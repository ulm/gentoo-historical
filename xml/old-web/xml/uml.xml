<?xml version='1.0'?>
<guide link="/doc/uml.html">
<title>Gentoo Linux Developer's guide to system testing with User-Mode Linux</title>
<author title="Editor"><mail link="g2boojum@gentoo.org">Grant Goodyear</mail></author>

<abstract>
   This guide shows Gentoo Linux developers how to set up and use
   user-mode linux for testing potentially system-breaking changes.
</abstract>

<version>0.05</version>
<date>5 Mar. 2002</date>

<chapter>
<title>Obtaining User-Mode Linux</title>
<section>
<body>
<p>As the user-mode linux website 
(<uri>http://user-mode-linux.sourceforge.net</uri>)
states, user-mode linux
allows a user to "run Linux inside itself".  Specifically,
user-mode linux provides a virtual machine on which a user can "[r]un buggy
software, experiment with new Linux kernels or distributions, and poke around
in the internals of Linux, all without risking your main Linux setup."  Changes
to Gentoo core packages such as <e>sys-apps/baselayout</e> or <e>sys-libs/glibc</e>
have the potential to break the system and render it unbootable; with user-mode
linux we can test these changes without having to worry about breaking the live
system.
</p>
<p>
Installing user-mode linux is essentially identical to a normal kernel
install.  First install the kernel sources (appropriately patched for
user-mode linux), and then configure the user-mode linux kernel in the
usual fashion:
</p>
<pre>
# <i>emerge sys-kernel/usermode-sources</i>
# <i>cd /usr/src/uml/linux</i>
# <i>make menuconfig <comment>ARCH=um</comment></i>
# <i>make linux <comment>ARCH=um</comment></i>
# <i>cp linux /usr/local/bin/linux</i>
</pre>
<warn>The <e>ARCH=um</e> fragment is <e>extremely</e> important!</warn>
<impo>
For the user-mode linux kernel to properly boot a Gentoo system the 
kernel needs to be configured to <e>not</e> automatically mount 
<path>/dev</path> (devfs) by default.  
Also, you will almost certainly
want to make sure that you have <e>tmpfs</e> (the "Virtual Memory 
Filesystem") compiled in, since by default the Gentoo linux bootscripts
store their information in a small tmpfs partition.
(The binary kernels available
from the user-mode website do automatically mount <path>/dev</path>,
and they don't have tmpfs compiled in; don't bother with them.)
</impo>
<p>I highly recommend reading the user-mode linux documentation, but the
basic idea is that running the <path>/usr/local/bin/linux</path> program
boots the user-mode kernel and tries to bring up the system stored in 
the file <path>root_fs</path> that should be located in the current working
directory.</p>
<p>It won't hurt to also install the user-mode linux tools.</p>
<pre>
# <i>emerge dev-utils/usermode</i>
</pre>
<p>These tools facilitate networking (among other things) 
between the user-mode linux virtual system
and the host Linux system.</p>
</body>
</section>
</chapter>

<chapter>
<title>Creating <path>root_fs</path></title>

<section>
<title>Making the Gentoo chroot</title>
<body>
<p>
The <path>root_fs</path> file needed for user-mode linux is 
a single file that contains an entire Gentoo Linux filesystem.
To generate this file you will need to have Loopback device
support enabled in the host (non-user-mode) kernel.
</p>
<p>Generating the <path>root_fs</path> file itself will be
our last step.  First we will generate a Gentoo filesystem in
an ordinary chroot.  We need the build tarball available, which 
could be downloaded separately, extracted from a build cd, or 
extracted from a build .iso.  
</p>
<pre caption="Mounting a build .iso">
# <i>mkdir /mnt/loop</i>
# <i>mount -o loop /path/to/build-&lt;TAB&gt;.iso /mnt/loop</i>
</pre>
<p>
Setting up the chroot is essentially identical to an ordinary Gentoo 
Linux build.
</p>
<pre>
# <i>mkdir /mnt/gentoo</i>
# <i>cd /mnt/gentoo</i>
# <i>tar xvjpf /path/to/build-&lt;TAB&gt;.tar.bz2</i>
</pre>
<p>
Go ahead and unmount the .iso.  You don't need it anymore.
</p>
<pre>
# <i>cp /etc/resolv.conf /mnt/gentoo/etc/</i>
# <i>mount -o bind /proc /mnt/gentoo/proc</i>
# <i>mkdir -p /mnt/gentoo/usr/portage/distfiles</i>
# <i>mkdir -p /mnt/gentoo/usr/portage/packages</i>
# <i>mount -o bind /usr/portage/distfiles /mnt/gentoo/usr/portage/distfiles</i>
# <i>mount -o bind /usr/portage/packages /mnt/gentoo/usr/portage/packages</i>
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>env-update</i>
# <i>source /etc/profile</i>
</pre>
<p>
By bind-mounting <path>/usr/portage/distfiles</path> and
<path>/usr/portage/packages</path> we avoid having to download
or build packages that are already present on the Gentoo host.
</p>
<p>
Bootstrap and build the system in the usual fashion:
</p>
<pre>
# <i>emerge rsync</i>
# <i>cd /usr/portage</i>
# <i>nano -w /etc/make.conf</i>
# <i>nano -w /etc/make.profile/packages</i> 
# <i>nano -w /usr/portage/profiles/package.mask</i>
# <i>scripts/bootstrap.sh &amp;&amp; emerge --usepkg system</i>
</pre>
<warn>
The <path>/etc/make.profile/packages</path> file needs to be
edited to remove grub from the default system (just remove the "*"
from the beginning of the "*sys-apps/grub" line).  The grub ebuild
tries to mount the /boot partition, which will fail in our chroot.
</warn>
<note>
Make sure you examine <path>/etc/make.profile/packages</path>
and <path>/usr/portage/profiles/package.mask</path> to be sure that
any to-be-tested packages that you want to install aren't masked out.
As currently written, <path>scripts/bootstrap.sh</path> will compile
the bootstrap packages from source.  To use already-existing packages,
add <c>alias emerge="emerge --usepkg"</c> somewhere near the top of 
the bootstrap script.
</note>
<p>
Add any additional packages you desire.  Feel free to give your virtual
Gentoo system a hostname, if you so desire.  In <path>/etc/fstab</path>
you will want <path>/dev/ROOT</path> to be <path>/dev/ubd/0</path>, with
a fs type of either ext2, ext3, or reiserfs.  Set <path>/dev/SWAP</path>
to be <path>/dev/ubd/1</path>, and comment out <path>/dev/BOOT</path>.
</p>
<p>
Exit the chroot, unmount all of the bind mounts,
tar up the new Gentoo distro, and clean up:
</p>
<pre>
# <i>exit</i>
# <i>umount /mnt/gentoo/usr/portage/distfiles</i>
# <i>umount /mnt/gentoo/usr/portage/packages</i>
# <i>umount /mnt/gentoo/proc</i>
# <i>du -ks /mnt/gentoo</i>
261744	/mnt/gentoo
# <i>tar cvjpf ~/gentoo.tbz2 *</i>
# <i>cd</i>
# <i>rm -rf /mnt/gentoo</i>
</pre>
</body>
</section>

<section>
<title>Making <path>root_fs</path></title>
<body>
<p>
Our Gentoo chroot is nearly 300 MB in size, so 
<path>root_fs</path> needs to be at least that size.
We'll choose 0.5 GB as a reasonable size.
</p>
<pre>
# <i>dd if=/dev/zero of=root_fs seek=500 count=1 bs=1M</i>
# <i>mke2fs -F root_fs</i>
# <i>mount -o loop root_fs /mnt/loop</i>
# <i>tar xvjpf gentoo.tbz2 -C /mnt/loop</i>
# <i>umount /mnt/loop</i>
</pre>
<p>
It would also be nice to have a 0.5 GB swap partition.
</p>
<pre>
# <i>dd if=/dev/zero of=swap_fs seek=500 count=1 bs=1M</i>
# <i>mkswap -f swap_fs</i>
</pre>
<p>
Now see if it works!
</p>
<pre>
# <i>linux ubd0=root_fs ubd1=swap_fs</i>
</pre>
<note>
User-mode linux uses xterms for the virtual consoles that 
are run at boot time, so you need to make sure that the
terminal from which you run user-mode linux has $DISPLAY
properly set (along with proper xhost/xauth permissions).
</note>
<p>
With any luck you should be able to log into your user-mode linux
Gentoo system.  The only thing keeping this user-mode linux version
of Gentoo from being fully functional is networking from the virtual
machine to the host.  Such networking is supposed to be trivial,
but I have yet to get it to work for me.  Should you find a workable
solution, please let me know!
</p>
</body>
</section>
</chapter>

<chapter>
<title>Testing the .iso</title>

<section>
<body>
<p>
Perhaps the true ideal of Gentoo Linux testing would be
to boot the .iso with user-mode linux and do the complete
Gentoo install from within the user-mode linux virtual system.
</p>
<p>
Booting the .iso, or actually the initrd from the .iso, is pretty
straightforward.
</p>
<pre>
# <i>mount -o loop /path/to/build-&lt;TAB&gt;.iso /mnt/loop</i>
# <i>cp /mnt/loop/isolinux/rescue.gz .</i>
# <i>linux load_ramdisk=1 prompt_ramdisk=0 ramdisk_size=22000 \</i>
&gt; <i>initrd=rescue.gz root=/dev/ram0 ubd0=root_fs ubd1=swap_fs</i>
</pre>
<p>If I only knew how to get networking to function properly!</p>
</body>
</section>
</chapter>


</guide>
