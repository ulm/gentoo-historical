<?xml version='1.0'?>
<guide link="/doc/build.html">
<title>Gentoo Linux 1.0_rc6 Installation Instructions</title>
<author title="Chief Architect"><mail link="drobbins@gentoo.org">Daniel Robbins</mail></author>
<author title="Author">Chris Houser</author>
<author title="Author"><mail link="jerry@gentoo.org">Jerry Alexandratos</mail></author>
<author title="Ghost"><mail link="g2boojum@gentoo.org">Grant Goodyear</mail></author>

<abstract> These instructions step you through the process of installing Gentoo
Linux 1.0_rc6 using a "build from scratch" as well as a new fast binary
install.  Using the "build from scratch" method, the complete system is built
from scratch using sources that are automatically downloaded from the Internet.
Using the fast binary install method, your installation will use pre-built
packages found on the CD.  The "from scratch" method will work with an
x86-compatible system, while the fast binary install method requires a Pentium
Classic or greater processor.  </abstract>

<version>1.4.5</version>
<date>15 Feb 2002</date>

<chapter>
<title>About the Install</title>
<section>
<body>

<p>This new boot CD will boot from nearly any modern IDE CD-ROM drive, as well
as many SCSI CD-ROMs.  Included on the CD-ROM is Linux support for IDE
(built-in to the kernel) as well as support for all SCSI devices (available as
modules).  In addition, we provide modules for literally every kind of network
card that Linux supports, as well as tools to allow you to configure your
network and establish outbound <c>ssh</c> connections and download files.  </p>

<p>To install from the build CD, you will need to have a 486+ processor
(Pentium+ for the pre-built fast binary install) and ideally at least 64
Megabytes of RAM.  (Gentoo linux has been successfully built with 64MB of RAM +
64MB of swap space, but the build process is awfully slow under those
conditions.) To begin the install process, first grab the latest 16Mb build CD
ISO image (<path>build-ix86-1.0_rc6-r16.iso</path> is the latest at the time
this article was written) from
<uri>http://www.ibiblio.org/gentoo/snapshots/build/ix86-linux-gnu/</uri> if you
want to use the "build from scratch" install method.  If you prefer the
Pentium+ fast binary install method; grab the ~600Mb binary CD ISO image
(<path>build-i586-1.0_rc6.iso</path> is the latest at the time this article was
written) from the same URL.  The Pentium+ fast binary CD can also be used as a
"from scratch" CD for i486+ systems.  Once you're done downloading the CD that
you'd like to use, burn the ISO image to a CD using your preferred CD burning
software.  </p>

</body>
</section>
</chapter>
<chapter>
<title>Booting</title>
<section>
<body>

<p>Now go ahead and boot the CD; you'll be greeted with a bunch of text and a
<c>boot:</c> prompt at the bottom of the screen.  At this prompt, hit enter,
and Linux will begin to load from the CD.</p> 

<p>Next, you'll be greeted with a small list of commands available on the boot
CD, including <c>nano</c> (a pico editor clone) and instructions for setting up
the network.  Then, you'll be prompted to select your preferred keymap,
followed by PCI autodection.  The PCI autodetection process will automatically
load the appropriate kernel modules for many popular PCI SCSI and ethernet
devices.  After this, you can hit enter to enter the minimal boot CD Linux
environment.  You should have a root ("<c>#</c>") prompt on the current
console, and can also open new consoles by typing alt-f2, alt-f3, etc and then
hitting enter.</p>

</body>
</section>
</chapter>

<chapter>
<title>Load kernel modules</title>
<section>
<body>

<p>We're almost ready to begin installing Gentoo Linux, but first we need take
the necessary steps so that the kernel recognizes our network cards, and
optionally any SCSI hardware that is in our system that PCI autodetection
missed.  To view a list of all available network card modules, type <c>ls
/lib/modules/*/kernel/drivers/net/*</c>.  To load a particular module,
type:</p>

<pre>
# <i>modprobe pcnet32</i>
	<comment>(replace pcnet32 with your NIC module)</comment>
</pre>

<p>Now, if you want to be able to access any SCSI hardware that wasn't detected
during the PCI autodetection process, you'll need to load the appropriate
modules from /lib/modules, again using <c>modprobe</c>:</p>

<pre>
# <i>modprobe aic7xxx</i>
# <i>modprobe sr_mod</i>
# <i>modprobe sd_mod</i>
</pre>

<p>Above, we modprobe the <c>aic7xxx</c> SCSI driver and then make sure that SCSI CD-ROM (<c>sr_mod</c>)
and disk (<c>sd_mod</c>) support is loaded.</p>
<note><c>hdparm</c> is now included on -r10 and later of the iso.  If any of your drives require tweaking, now
would be a good time to do so.</note>
</body>
</section>
</chapter>
<chapter>
<title>Configure installation networking</title>
<section>
<body>
<note>If you are doing a "fast binary" install and plan to use only those packages included on the CD for you,
then setting up a network is not required.  However, we always recommend doing it if possible since it can come
in handy a lot of the time.</note>

<p>The new -r11+ boot CDs allow you to configure a working network, allowing you to use <c>ssh</c>, <c>scp</c> or <c>wget</c>
as needed before even beginning the installation process.  Even if you don't need to do these things now,
you should go ahead and set up networking now.  Once set up, Portage will be able to use your configured network
once you are inside the chroot environment (required for installing Gentoo Linux).</p>
</body>
</section>

<section>
<title>DHCP</title>
<body>
<p>
Network configuration is simple with DHCP; If your ISP is not using
DHCP, skip down to the static configuration section below.  
</p>
<pre caption="Network configuration with DHCP">
# <i>dhcpcd eth0</i> 
</pre>
<note>
Some ISPs require you to provide a hostname.  To do that,
add a <c>-h myhostname</c> flag to the dhcpcd command line above.
</note>
<p>If you receive <i>dhcpConfig</i> warnings, don't panic; the errors
are most likely cosmetic.  Skip down to Network testing below.</p>
</body>
</section>
<section>
<title>Static configuration</title>
<body>
<p>
We need to setup just enough networking so that we can download
sources for the system build, as well as the required localhost interface.  Type in the following commands, replacing
$IFACE with your network interface (typically <c>eth0</c>), $IPNUM
with your IP address, $BCAST with your broadcast address, and $NMASK
with your network mask.  For the <c>route</c> command, replace 
$GTWAY with your default gateway.
</p>
<pre>
# <i>/sbin/ifconfig $IFACE $IPNUM broadcast $BCAST netmask $NMASK</i>
# <i>/sbin/route add -net default gw $GTWAY netmask 0.0.0.0 metric 1</i>
</pre>
<p>Now, it's time to create the <path>/etc/resolv.conf</path>
file so that name resolution (finding Web/FTP sites by name, rather than just by IP address) will work.</p>

<note>At the moment the only editor installed by default is <c>nano</c>, a
small and very easy-to-use visual editor.   Use <c>nano</c> with the <c>-w</c>
option to turn off automatic line-wrapping.
</note>

<p>Here's a template to follow for creating your /etc/resolv.conf file:
</p>
<pre caption="/etc/resolv.conf template">
domain mydomain.com
nameserver 10.0.0.1
nameserver 10.0.0.2
</pre>
<p>Replace <c>10.0.0.1</c> and <c>10.0.0.2</c> with the IP addresses of your
primary and secondary DNS servers respectively.</p>
</body>
</section>
<section>
<title>Network testing</title>
<body>
<p>Now that your network has been configured, the <c>/sbin/ifconfig -a</c> command should show (hopefully!) 
that your network card is working
(look for <e>UP</e> and <e>RUNNING</e> in the output).
</p>
<pre caption="/sbin/ifconfig for a working network card">
eth0      Link encap:Ethernet  HWaddr 00:50:BA:8F:61:7A
          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::50:ba8f:617a/10 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1498792 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1284980 errors:0 dropped:0 overruns:0 carrier:0
          collisions:1984 txqueuelen:100
          RX bytes:485691215 (463.1 Mb)  TX bytes:123951388 (118.2 Mb)
          Interrupt:11
</pre>
<!--
<note>
If you have a static ppp link, you can !!! do this...!!!
</note>
-->
</body>
</section>
<section>
<title>Networking is go!</title>
<body>
<p>Networking should now be configured an useable.  You should be able to use the included
<c>ssh</c>, <c>scp</c> and <c>wget</c> commands to connect to other machines on your LAN or the Internet.</p>
</body>
</section>
</chapter>
<chapter>
<title>Set up partitions</title>
<section>
<body>

<p>Now that the kernel can see our network card and disk controllers, it's time
to set up disk partitions for Gentoo Linux.</p>

<p>Here's a quick overview of the standard Gentoo Linux partition layout.
We're going to create at least three partitions: a swap partition, a root
partition (to hold the bulk of Gentoo Linux), and a special boot partition.
The boot partition is designed to hold GRUB boot loader information as well as
your Linux kernel(s).  The boot partition gives us a safe place to store
everything related to booting Linux. During normal day-to-day Gentoo Linux use,
your boot partition should remain <e>unmounted</e>.  This prevents your kernel
from being made unavailable to GRUB (due to filesystem corruption) in the event
of a system crash, preventing the chicken-and-egg problem where GRUB can't read
your kernel (since your filesystem isn't consistent) but you can't bring your
filesystem back to a consistent state (since you can't boot!)      </p>

<p>Now, on to filesystem types.  Right now, you have four filesystem options:
XFS, ext2, ext3 (journaling) and ReiserFS.  ext2 is the tried and true Linux
filesystem but doesn't have metadata journaling.  ext3 is the new version of
ext2 with both metadata journaling and ordered data writes, effectively
providing data journaling as well.  ReiserFS is a B*-tree based filesystem
that promises very good small file performance, and greatly outperforms both ext2 and
ext3 when dealing with small files (files less than 4k), often by a factor of
10x-15x.  However, we do <e>not</e> recommend ReiserFS at this time,
due to repeated occurances of file-system corruption with the 2.4.x series
kernels.  ReiserFS has metadata journaling, but no data journaling.  XFS
is a high-performance enterprise-class filesystem with metadata journaling that
is fully supported under Gentoo Linux.
</p><p>
If
you're looking for the most standard filesystem, use ext2.  If you're looking
for the most rugged journalled filesystem, use ext3.  If you're looking for a
high-performance filesystem with journaling support, use XFS;  both ext3 and XFS are 
mature and refined.  All filesystems except ReiserFS are production-ready.  
Here are our basic recommended filesystem
sizes and types:</p>

  <table>
  <tr>
  	<th>Partition</th>
	<th>Size</th>
	<th>Type</th>
  	<th>example device</th>
  </tr>
  <tr>
  	<ti>boot partition, containing kernel(s) and boot information</ti>
	<ti>&gt;10 Megabytes</ti>
	<ti>ext2/3 highly recommended (easiest); if ReiserFS then mount with <c>-o notail</c></ti>
  	<ti>/dev/hda1</ti>
  </tr>
   <tr>
  	<ti>swap partition (no longer a 128 Megabyte limit)</ti>
	<ti>&gt;=2*Amount of RAM in this system is recommended but no longer (as of kernel 2.4.10) required</ti>
	<ti>Linux swap</ti>
  	<ti>/dev/hda2</ti>
  </tr>
  <tr>
  	<ti>root partition, containing main filesystem (/usr, /home, etc)</ti>
	<ti>&gt;=1.5 Gigabytes</ti>
	<ti>XFS, ext3 recommended; ext2 ok</ti>
  	<ti>/dev/hda3</ti>
  </tr>
 </table>

<note>At this point, create your partitions using fdisk.  Note that your partitions
should be of type 0x82 if swap and 0x83 for regular filesystems (whether XFS, ReiserFS <e>or</e> ext2).
</note>

<p>Once you've created your partitions using <c>fdisk</c>, it's time to initialize
the filesystems that will be used to house our data.  Initialize swap as follows:</p>
<pre>
# <i>mkswap /dev/hda2</i>
</pre>
<p>You can use the <c>mke2fs</c> command to create ext2 filesystems:</p>
<pre>
# <i>mke2fs /dev/hda1</i>
</pre>
<p>To create an XFS filesystem, use the <c>mkfs.xfs</c> command:</p>
<pre>
# <i>mkfs.xfs /dev/hda3</i>
</pre>
<note>
You may want to add a couple of additional flags to the <c>mkfs.xfs</c> command: <c>-d agcount=3 -l size=32m</c>. 
The <c>-d agcount=3</c> command will lower
the number of allocation groups.  XFS will insist on using at least 1 allocation group per 4 GB of your partition,
so, for example, if you hava a 20 GB partition you will need a minimum agcount of 5.  The <c>-l size=32m</c> command
increases the journal size to 32 Mb, increasing performance.
</note>
<warn>
If you are installing an XFS partition over a previous ReiserFS partition, later attempts to mount may fail without
an explicit <c>mount -t xfs</c>.  The solution is to zero out the partition before creating the XFS filesystem:
<c>dd if=/dev/zero of=/dev/hd<comment>x</comment> bs=1k</c>. 
</warn>
<p>If you'd like to use ext3, you can create ext3 filesystems using <c>mke2fs -j</c>:</p>
<pre>
# <i>mke2fs -j /dev/hda3</i>
</pre>
<p>To create ReiserFS filesystems, use the <c>mkreiserfs</c> command:</p>
<pre>
# <i>mkreiserfs /dev/hda3</i>
</pre>

<warn>Again, we do not recommend ReiserFS at this time.  While ReiserFS has
worked fine for many, filesystem corruption has been too common a problem with
ReiserFS and the 2.4.x series kernels.</warn>

<note>You can find out more about using ext3 under Linux 2.4 at <uri>http://www.zip.com.au/~akpm/linux/ext3/ext3-usage.html</uri>.</note>
</body>
</section>
</chapter>
<chapter>
<title>Mount partitions</title>
<section>
<body>
<p>
Now, we'll activate our new swap, since we may need the additional virtual memory that
provides later:
</p>
<pre>
# <i>swapon /dev/hda2</i>
</pre>
<p>Next, we'll create the <path>/mnt/gentoo</path> and <path>/mnt/gentoo/boot</path> mountpoints,
and we'll mount our filesystems to these mountpoints. 
</p>
<pre>
# <i>mkdir /mnt/gentoo</i>
# <i>mount /dev/hda3 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/hda1 /mnt/gentoo/boot</i>
</pre>
<p>If you are setting up Gentoo
   Linux with a separate <path>/usr</path> or <path>/var</path>, these would get mounted to
   <path>/mnt/gentoo/usr</path> and <path>/mnt/gentoo/var</path>, respectively.
</p>
   <impo>If your <e>boot</e> partition (the one holding the kernel) is ReiserFS, be sure to mount it
   with the <c>-o notail</c> option so GRUB gets properly installed.  Make sure 
   that <c>notail</c> ends up in your new <path>/etc/fstab</path> boot partition entry, too.
   We'll get to that in a bit.</impo>
</body>
</section>
</chapter>

<chapter>
<title>Mounting the CD-ROM</title>
<section>
<body>
<p>Even though we've booted from the CD-ROM, the CD-ROM itself is not mounted under our minimal
Linux boot CD environment.  We'll need to mount it so that we can access the compressed build image
tarball contained on the CD-ROM.  To mount the CD-ROM, one typically types:
</p>
<pre>
# <i>mount /dev/cdroms/cdrom0 /mnt/cdrom -o ro -t iso9660</i>
</pre>
<p>With the CD-ROM mounted, you should be able to see the <c>build-???.tbz2</c> file by typing
<c>ls /mnt/cdrom</c>.</p>
</body>
</section>
</chapter>

<chapter>
    <title>Unpack the build archive and chroot</title>
<section>
<body>

<p>Now it's time to extract the compressed build image tarball to <path>/mnt/gentoo</path>.  Then, we'll <c>chroot</c> over to the new Gentoo Linux build installation. 
</p>

<impo>Be sure to use the <c>p</c> option with <c>tar</c>.  Forgetting to do this will cause certain files to contain incorrect permissions.</impo>

<impo>If you are using the "from scratch, build everything" install method, you will want to use the "build-ix86" tbz2 image.
But, if you are using the "fast binary" install method, you should use the "build-i586" tbz2 image.  The "build-i586" image
is included on the "build-i586" ISO; it contains a fully-bootstrapped i586-optimized Gentoo Linux system and a snapshot of
our Portage tree.  With the "build-i586" image, there is no need to boostrap or to run "emerge rsync" to grab the Portage
tree from cvs.gentoo.org.</impo>

<pre>
# <i>cd /mnt/gentoo</i>
# <i>tar -xvjpf /mnt/cdrom/build-*.tbz2</i>
<comment>Remember, use the "build-i586" tarball for the "fast binary install" and use
"build-ix86" for the "build from scratch" approach</comment>
# <i>mount -o bind /proc /mnt/gentoo/proc</i>
# <i>cp /etc/resolv.conf /mnt/gentoo/etc/resolv.conf</i>
</pre>

<p>If you want to use the many pre-built packages included on the i586 CD, an additional step is needed at this point:</p>
<pre>
# <i>mkdir /mnt/gentoo/usr/portage/packages</i>
# <i>mount -o bind /mnt/cdrom/packages /mnt/gentoo/usr/portage/packages</i>
</pre>

<p>Now, all users (both "ix86" and "i586" guys) should use the following commands to initialize your new Gentoo Linux
chroot environment:</p>

<pre>
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>env-update</i>
Regenerating /etc/ld.so.cache...
# <i>source /etc/profile</i>
(none) / # <comment>ooh!  A new prompt!</comment>
</pre>

<p>After you execute these commands, you'll be "inside" your new Gentoo Linux environment.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Rsync</title>
<section>
<body>
<p>Now, "build from scratch" people will need to run <c>emerge rsync</c>.  This command will tell <c>emerge</c> to
connect to cvs.gentoo.org and download the latest version of our Portage ports tree.</p>

<p>If you are doing a "fast binary" install, this step is <i>optional</i>, since a Portage tree snapshot was already
added to your build image.  You can choose to <c>emerge rsync</c> if you want to have the latest and greatest packages,
or you can choose to skip the step to ensure that you will use only the pre-built binary packages included on your
"i586" CD.  If you want or need to <c>emerge rsync</c>, simply type:</p>
<pre>
# <i>emerge rsync</i>
</pre>
<p>The Portage tree will be downloaded; it's about 10Mb in size.</p>
</body>
</section>
</chapter>
<chapter>
<title>Bootstrap</title>
<section>
<body>

<impo>If you are using the "fast binary" install method, then we've already
bootstrapped for you.  There is no reason for you to bootstrap again, unless
you decided to do an <c>emerge rsync</c> and want to ensure that you have an
up-to-the-minute current Gentoo Linux system.  Most "fast binary" installers
will <i>not</i> want to bootstrap again, since it can take up to an hour even
on very fast machines.</impo>

<impo>Another important note:  If you're installing this CD at FOSDEM, type
<c>nano -w /etc/hosts</c> and add a line to this file that reads <c>10.1.1.1   cvs.gentoo.org</c>.
This will trick your system into using the our local mirror at FOSDEM rather
than connecting to our actual server in Austin, Texas, USA.  This will make
things go a lot faster :).  Remember to remove this line from <path>/etc/hosts</path>
when you get home so that your system will connect to the <i>real</i> cvs.gentoo.org
from that point forward.</impo>

<p>Now that you have a working copy of the Portage tree, "ix86" installers need
to bootstrap their Gentoo Linux system.  "i586" installers already have a
bootstrapped system and should generally skip the entire bootstrap process and
skip down to the <e>Building the base system</e> section below.</p>

<p>Bootstrappers should first edit the file <path>/etc/make.conf</path>.  In
this file, you should set your <c>USE</c> flags, which specify optional
functionality that you would like to be built into packages; the commented-out
defaults are recommended.  You also should set appropriate <c>CHOST</c>, <c>
CFLAGS</c> and <c>CXXFLAGS</c> settings for the kind of system that you are
creating.  If necessary, you can also set proxy information here if you are
behind a firewall.  </p>

<pre>
# <i>nano -w /etc/make.conf</i> <comment>(Adjust these settings)</comment>
</pre>
<note>
People who need to substantially tweak the build process should take a look at
the <path>/etc/make.globals</path> file.  This file comprises gentoo defaults and
should never be touched.  If the defaults do not suffice, then new values should
be put in <path>/etc/make.conf</path>, as entries in <path>make.conf</path>
<comment>override</comment> the entries in <path>make.globals</path>.
</note>
<p>Now, it's time to start the "bootstrap" process.  This process will last 1-2 hours depending on 
how zippy your machine is; it takes about 45 minutes on my 900Mhz AMD Athlon system.  During this
time, the extracted build image will be prepped for compiling the rest of the system.  The GNU
compiler suite will be built, as well as the GNU C library.  These are time consuming builds and
make up the bulk of the bootstrap process:</p>
<pre>
# <i>cd /usr/portage</i>
# <i>scripts/bootstrap.sh</i>
</pre>
<p>The "bootstrap" process will now begin.</p>
<note>
Portage by default uses <c>/var/tmp</c> during package building, often
using several hundred megabytes of temporary storage. If you would like to
change where Portage stores these temporary files, set a new PORTAGE_TMPDIR <e>before</e>
starting the bootstrap process, as follows:
</note>
<pre>
# <i>export PORTAGE_TMPDIR="/otherdir/tmp"</i>
</pre>
<p>
The 
<c>bootstrap.sh</c> will build <c>binutils</c>, <c>gcc</c>, <c>gettext</c>,
and <c>glibc</c>, rebuilding <c>binutils</c>, <c>gcc</c>, and <c>gettext</c>
after <c>glibc</c> is built.  Needless to say, this process takes a while.
Have a nice nap.
</p>
</body>
</section>
</chapter>
<chapter>
<title>Building the base system</title>
<section>
<body>

<p>Once your build image has been bootstrapped (again, "i586" users have a
pre-bootstrapped system), it's time to build or install the rest of the base
system.  If you are using the "fast binary" i586 install, pre-built packages
will be automatically used if available in order to save time.  Otherwise, packages will be auto-built from sources.
The following commands will work for both "ix86" and "i586" installers:</p>

<pre>
# <i>export CONFIG_PROTECT=""</i>
# <i>emerge --usepkg --pretend system</i>
	<comment>[lists the packages to be installed]</comment>
# <i>emerge --usepkg system</i>
<comment>The --usepkg option tells emerge to check for a 
pre-built binary package first and to use it if available.</comment>
</pre>

<note>The <c>export CONFIG_PROTECT=""</c> line ensures that any new scripts
installed to <path>/etc</path> will overwrite the old scripts (stored in
<path>sys-apps/baselayout</path>), bypassing Portage's new config file
management support.  Type <c>emerge --help config</c> for more details.</note>

<p> If you're doing a "build from scratch" install, it's going to take a while
to finish building the entire base system.  Your reward is that it will be
thoroughly optimized for your system.  The drawback is that you have to find a
way to keep yourself occupied for some time to come.  The author suggests "Star
Wars - Super Bombad Racing" for the PS2.</p>

</body>
</section>
</chapter>
<chapter>
<title>Installing the kernel and system logger</title>
<section>
<body>
<p>
At the moment the Gentoo Linux default system does not include a kernel;
you have to install it yourself.  Here are the steps to compile and configure
your own custom kernel:
</p>
<pre>
# <i>emerge --usepkg sys-kernel/linux-sources</i>
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
# <i>make dep clean bzImage modules modules_install</i>
# <i>mv /boot/bzImage /boot/bzImage.orig</i> <comment>[if bzImage already exists]</comment>
# <i>cp /usr/src/linux/arch/i386/boot/bzImage /boot</i>
</pre>
<impo>For your kernel to function properly, there are several options that you will
need to ensure are in the kernel proper -- that is, they should <e>be enabled and not
compiled as modules.  You will need to enable the "Experimental Features"
options to see several of these selections.</e> 
Under the "File systems" section, be sure to enable the "Device File System" (note that
you <e>don't</e> need to enable the "/dev/pts file system support" option). You'll also
need to enable the "Virtual Memory Filesystem".  Be sure to enable "ReiserFS" if you have
any ReiserFS partitions; the same goes for "Ext3".  If you're using XFS, enable the 
"SGI XFS filesystem support"
option.  It's always a good idea to leave ext2
enabled whether you are using it or not.    Also, most people using IDE hard drives will
want to enable the "USE DMA by default" option; otherwise, your IDE drives may perform
very poorly.  Of course, remember to enable "IDE disk" support as well -- otherwise your
kernel won't be able to see your IDE disks.
</impo>

<p>
Your new custom kernel (and modules) are now installed.  Now you need to choose a system
logger that you would like to install.  We offer sysklogd, which is the traditional set
of system logging daemons.  We also have syslog-ng as well as metalog.  Power users seem
to gravitate away from sysklogd (not very good performance) and towards syslog-ng and 
metalog.  If in doubt, you may want to try metalog, since it seems to be quite popular.
To merge your logger of choice, type <e>one</e> of the next three lines:
</p>

<pre>
# <i>emerge --usepkg sys-apps/sysklogd</i>
# <i>rc-update add sysklogd default</i>
<comment>or</comment>
# <i>emerge --usepkg app-admin/syslog-ng</i>
# <i>rc-update add syslog-ng default</i>
<comment>or</comment>
# <i>emerge --usepkg app-admin/metalog</i>
# <i>rc-update add metalog default</i>
</pre>
<warn>
In the case of syslog-ng you need to create 
<path>/etc/syslog-ng/syslog-ng.conf</path>.
See <path>/etc/syslog-ng</path> 
for a sample configuration file.
</warn>
<impo>
Metalog flushes output to the disk in blocks, so messages aren't immediately recorded into
the system logs.  If you are trying to debug a daemon, this performance-enhancing behavior is less than helpful.  When your
Gentoo Linux system is up and running, you can send
metalog a USR1 signal to temporarily turn off this message buffering (meaning that 
<i>tail -f <path>/var/log/everything/current</path></i> will now work 
in real time, as expected), 
and a USR2 signal to turn buffering back on
again. 
</impo>
</body>
</section>
</chapter>
<chapter>
<title>Install additional packages</title>
<section>
<body>
<p>
You may need to install some additional packages in the Portage tree
if you are using any optional features like XFS or LVM.  If you're
using XFS, you should emerge the <c>xfsprogs</c> ebuild:
</p>
<pre>
# <i>emerge --usepkg sys-apps/xfsprogs</i>
</pre>
<p>
If you're using LVM, you should emerge the <c>lvm-user</c> ebuild:
</p>
<pre>
# <i>emerge --usepkg sys-apps/lvm-user</i>
</pre>
</body>
</section>
</chapter>
<chapter>
<title>Final configuration</title>
<section>
<body>
<p>Your Gentoo Linux system is almost ready for use.  All we need to do now is configure
a few important system files and install the GRUB boot loader. 
The first file we need to
configure is <path>/etc/fstab</path>.  Remember that you should use
the <c>notail</c> option for your boot partition if you chose to create a ReiserFS filesystem on it.
Remember to specify <c>ext2</c>, <c>ext3</c> or <c>reiserfs</c> filesystem types as appropriate.</p>
Use something like the <path>/etc/fstab</path> listed below, but of course be sure to replace "BOOT",
"ROOT" and "SWAP" with the actual block devices you are using (such as <c>hda1</c>, etc.)
<pre>
<comment>
# /etc/fstab: static file system information.
#
# noatime turns of atimes for increased performance (atimes normally aren't
# needed; notail increases performance of ReiserFS (at the expense of storage
# efficiency).  It's safe to drop the noatime options if you want and to 
# switch between notail and tail freely.

# &lt;fs&gt;          	&lt;mountpoint&gt;    &lt;type&gt;  	&lt;opts&gt;      		&lt;dump/pass&gt;

# NOTE: If your BOOT partition is ReiserFS, add the notail option to opts.
</comment>
/dev/BOOT		/boot		ext2		noauto,noatime		1 2
/dev/ROOT		/		ext3		noatime			0 1
/dev/SWAP		none            swap		sw			0 0
/dev/cdroms/cdrom0	/mnt/cdrom	iso9660		noauto,ro		0 0
proc			/proc           proc		defaults		0 0
</pre>

</body>
</section>
<section>
<title>Set the root password</title>
<body>
<p>Before you forget, set the root password by typing:</p>
<pre>
# <i>passwd</i>
</pre>
</body>
</section>
<section>
<title>/etc/localtime</title>
<body>
<p>Look for your timezone (or GMT if you using Greenwich Mean Time) in <path>/usr/share/zoneinfo</path>.  Then, make a symbolic link by typing:
</p><pre>
# <i>ln -sf /usr/share/zoneinfo/path/to/timezonefile /etc/localtime</i>
</pre>
</body>
</section>

<section>
<title>/etc/hostname</title>
<body>
<p>Edit this file so that it contains your fully-qualified domain name on a single line, i.e. <c>mymachine.mydomain.com</c>.
</p>
</body>
</section>

<section>
<title>/etc/hosts</title>
<body>
<p>This file contains a list of ip addresses and their associated hostnames.  It's used by the system to resolve the IP addresses
of any hostnames that may not be in your nameservers.  Here's a template for this file:
</p><pre>
127.0.0.1      localhost
<comment># the next line contains your IP for your local LAN, and your associated machine name</comment>
192.168.1.1    mymachine.mydomain.com	mymachine
</pre>
</body>
</section>

<section>
<title>Final network configuration</title>
<body>
<p>
Add the names of any modules that are necessary for the proper functioning of your system to 
<path>/etc/modules.autoload</path> file (you can also add any options you
need to the same line.) When Gentoo Linux boots, these modules will be automatically
loaded.  Of particular importance is your ethernet card module, if you happened to compile
it as a module:
</p>
<pre caption="/etc/modules.autoload">
3c59x
</pre>
<p>Edit the <path>/etc/conf.d/net</path> script to get your network configured for your
first boot:
</p>
<pre>
# <i>nano -w /etc/conf.d/net</i>
# <i>rc-update add net.eth0 default</i>
</pre>
<p>
If you have multiple network cards you need to create additional <path>net.eth<comment>x</comment></path>
scripts for each one (<comment>x</comment> = 1, 2, ...):
</p>
<pre caption="Multiple network interfaces">
# <i>cd /etc/init.d</i>
# <i>cp net.eth0 net.eth<comment>x</comment></i>
# <i>rc-update add net.eth<comment>x</comment> default</i>
</pre>
</body>
</section>

<section>
<title>Configure basic settings</title>
<body>
<pre caption="basic configuration">
# <i>nano -w /etc/rc.conf</i>
</pre>
<p>
Follow the directions in the file to configure the basic settings.
</p>
</body>
</section>

<section>
<title>Configure GRUB</title>
<body>
<p>
The most critical part of understanding GRUB is getting comfortable with how GRUB refers to hard drives and partitions.
Your Linux partition <path>/dev/hda1</path> is called <path>(hd0,0)</path> under GRUB.  Notice the parenthesis around the hd0,0 - they are required.  
Hard drives count from zero rather than "a", and partitions start at zero rather than one.  So, <path>/dev/hdb3</path> gets translated to <path>(hd1,2)</path>, and <path>/dev/hdd7</path> gets translated to <path>(hd3,6)</path>.  After you've gotten the feel for that, convert your boot and root partition names to the GRUB format and write them down.  Now, it's time to install GRUB.
</p>

<p>The easiest way to install grub is to simply type <c>grub</c> at your chrooted shell prompt:
</p><pre>
# <i>grub</i>
</pre><p>You'll be presented with the <c>grub&gt;</c> grub command-line prompt.  Now, you need to type in the
right commands to install the GRUB boot record onto your hard drive.  In my example configuration,
I want to install the GRUB boot record on my hard drive's MBR (master boot record), so that 
the first thing I see when I turn on the computer is the GRUB prompt.  In my case, the commands
I want to type are:</p>
<pre>grub&gt; <i>root (hd0,0)</i>
grub&gt; <i>setup (hd0)</i>
grub&gt; <i>quit</i>
</pre>

<p>Here's how the two commands work.  The first <c>root ( )</c> command tells GRUB
the location of your boot partition (in our example, <path>/dev/hda1</path> or 
<path>(hd0,0)</path> in GRUB terminology.  Then, the second <c>setup ( )</c> command tells GRUB where to install the
boot record - it will be configure to look for its special files at the <c>root
( )</c> location that you specified.  In my case, I want the boot record on the
MBR of the hard drive, so I simply specify <path>/dev/hda</path> (also known as <path>(hd0)</path>).  If I were using
another boot loader and wanted to set up GRUB as a secondary boot-loader, I
could install GRUB to the boot record of a particular partition.  In that case,
I'd specify a particular partition rather than the entire disk.  Once the GRUB
boot record has been 
successfully installed, you can type <c>quit</c> to quit GRUB.  Gentoo Linux is
installed, but we need to create the <path>/boot/grub/menu.lst</path> file so that
we get a nice GRUB boot menu when the system reboots.  Here's how to do it.</p>

<p>Now, create the menu.lst file (<c>nano -w /boot/grub/menu.lst</c>), and add the following to it:</p>
<pre>
default 0
timeout 30
splashimage=(hd0,0)/boot/grub/splash.xpm.gz

title=My example Gentoo Linux
root (hd0,0) 
kernel /boot/bzImage root=/dev/hda3 

<comment># Below needed only for people who dual-boot</comment>
title=Windows NT Workstation
root (hd0,5) 
chainloader +1
</pre>
<note>
The <path>menu.lst</path> file should end in "lst" as in "list", not "1st" as in "first".  Also, (hd0,0) should be 
written without any spaces inside the parentheses.
</note>
<p>After saving this file, Gentoo Linux installation is complete.  Selecting the first option will
tell GRUB to boot Gentoo Linux without a fuss.  The second part of the menu.lst file is optional, and shows you how to
use GRUB to boot a bootable Windows partition.</p>

<note>Above, <path>(hd0,0)</path> should point to your "boot" partition
(<path>/dev/hda1</path> in our example config) and <path>/dev/hda3</path> should point to
your root filesystem.  <path>(hd0,5)</path> contains the NT boot
loader.</note> <p>Also, if you need to pass any options to the kernel, simply
add them to the end of the <c>kernel</c> command.  We're already passing one option
(<c>root=/dev/hda3</c>), but you can pass others as well.  In particular, you can
turn off devfs by default (not recommended unless you know what you're doing) by
adding the <c>gentoo=nodevfs</c> option to the <c>kernel</c> command.

<note>Unlike in earlier versions of Gentoo Linux, you no longer have to add 
<c>devfs=mount</c> to the end of the <c>kernel</c> line to enable devfs.  In rc6
devfs is enabled by default.
</note>
</p>

</body>
</section>
</chapter>
<chapter>
<title>Installation complete!</title>
<section>
<body>
<p>Now, Gentoo Linux is installed.  The only remaining step is to exit the chrooted shell, safely unmount your partitions
and reboot the system:</p>
<pre>
# <i>exit</i> 
<codenote>This exits the chrooted shell; you can also type <c>^D</c></codenote>
# <i>cd / </i>
# <i>umount /mnt/gentoo/boot</i>
# <i>umount /mnt/gentoo/proc</i>
# <i>umount /mnt/gentoo</i>
# <i>reboot</i>
</pre>
<note>
After rebooting, it is a good idea to run the <c>update-modules</c> command to create
the <path>/etc/modules.conf</path> file.  Instead of modifying this file directly, you should
generally make changes to the files in <path>/etc/modules.d</path>.
</note>
<p>If you have any questions or would like to get involved with Gentoo Linux development, 
consider joining our gentoo-user and gentoo-dev mailing lists
(there's a "click to subscribe" link on our <uri link="http://www.gentoo.org">main page</uri>).
</p>
</body>
</section>
</chapter>
</guide>
