<?xml version='1.0'?>
<guide>
<title>Portage Handbook</title>
<author title="Author and Editor">
<mail link="blocke@shivan.org">Bruce A. Locke</mail>
</author>

<abstract>
Users and Developers Guide to Portage
</abstract>

<version>0.1</version>
<date>March 31, 2002</date>

<chapter>

<title>Configuring Portage</title>
<section>
  <title>Overview</title>
  <body>
  	The following chapter covers the various aspect of Portage
	configuration important to both users and developers.  Portage
	is a very flexible system and you will need to understand how
	to configure Portage to be charge of your system and optimize
	it for your needs.

	Please note that the use of "users" in this document means
	persons with administrative rights to use Portage and change the
	systems configuration.  You must have root access to change
	Portage's configuration and to merge and unmerge packages.
  </body>
</section>

<section>
<title>Portage Configuration Files</title>
<body>
	<p>Almost all of the configuration options discussed below can be
	found in /etc/make.conf and /etc/make.global.  It is important to note
	that any setting defined in /etc/make.conf will almost always
	override any setting made in /etc/make.global.  Everything in 
	/etc/make.conf and /etc/make.global can be considered a system-wide
	global setting as far as Portage is concerned.
	</p>
	<p>
	When checking to see where an option is already defined, it is 
	recommended that you check in /etc/make.conf first and then 
	check /etc/make.globals.
	</p>
</body>
</section>

<section>
  <title>USE settings</title>
  <body>
  	<p>
	The USE settings system is a flexible way to enable or disable
	various features at package build-time on a global level and for
	individual packages.  This allows an administrator control over how 
	packages are built in regards to the optional features which can be 
	compiled into those packages.  For instance packages with optional
	GNOME support can have this support disabled at compile time by 
	disabling the <i>gnome</i> USE setting.  Enabling the <i>gnome</i>
	USE setting would enable GNOME support in these same packages.
	</p>
	<p>
	The effect of USE settings on packages is dependent on whether both
	the software itself and the package ebuild supports the USE setting
	as an optional feature.  If the software does not have support for
	an optional feature then its corresponding USE setting will obviously
	have no effect.  Also many package dependencies are not considered
	optional by the software and thus USE settings will have no effect
	on those mandatory dependencies.  A list of USE keywords used by
	a particular package can be found by checking the <i>DEPEND</i>
	and <i>RDEPEND</i> lines in any ebuild file.
	</p>


	<p>
	Portage determines if a USE setting is enabled or disabled by checking
	up to four different locations.  These locations change USE settings
	in a way that "stacks".  Portage passes through each location and 
	remembers if a previous location enabled or disabled a setting.
	USE setting changes are cumulative during Portage's pass through
	each location.
	</p>
	<p>
	The locations checked in USE setting calculation and the order in which
	Portage checks them is set by <i>USE_ORDER</i> in /etc/make.globals.
	To disable a location you can simply remove it from <i>USE_ORDER</i>.
	</p>
	<p>
	The following is a description of each location listed in the order
	defined by <i>USE_ORDER</i> in Portage's default configuration.
	</p>
	
	
	<p><b>Defaults</b></p>
	<p>Portage profiles can define a set of default USE keywords.  This 
	is defined in the make.defaults file in any Portage profile.  Since 
	/etc/make.profile serves as a link to the currently used Portage 
	profile, /etc/make.profile/make.defaults is the set of defaults in 
	effect.  It is recommended that you do not edit this file as future
	profile changes may overwrite your changes.</p>
	
	<p><b>Auto</b></p>
	<p>These are defined in the use.defaults file in the Portage profile 
	(/etc/make.profile/use.defaults).  Each entry consists of a USE
	setting and a corresponding package.  If the package listed for
	a USE keyword is currently installed, then that USE setting is
	considered enabled.  Thus, for instance, if you installed
	<i>x11-base/xfree</i> and did not explicitly disable the X USE
	setting in a later pass location then the X keyword is enabled
	globally while that package is installed.  It is recommended that
	you do not edit this file as future profile changes may overwrite
	your changes.</p>

	<p><b>Conf</b></p>
	<p>If a <i>USE</i> configuration option is defined in /etc/make.conf
	the USE settings defined are included.  If there is no <i>USE</i>
	setting in make.conf then /etc/make.globals is checked.  This
	entry could look something like the following:</p>

	<pre>
USE="slang readline gpm berkdb gdbm tcpd pam libwww ssl gb tk
     lm_sensors lvm ldap tex bonobo sdl gtk xfs evo pda ldap
     mmx mitshm perl python guile ruby postgres dvd 3dnow tcl
     lcms gif sdl vorbis ogg oss libg++ directfb decss snmp
     gnome X opengl mozilla pdflib gpg -nls gd xface jpilot
     -kde -qt -esd -motif -alsa oggvorbis"
	</pre>

	<p>
	USE settings are enabled by simply listing the setting name.  USE
	settings are disabled by placing a <i>-</i> character before the
	setting name.  For instance, <i>gnome</i> enables the GNOME keyword
	while <i>-motif</i> disabled the motif keyword.
	</p>
	<p>
 	The <i>USE</i> setting in /etc/make.conf is the recommended place
	in which to explicitly enable and disable keywords.  This file will
	not be overwritten automatically by Portage.  It is recommended
	that you specifically enable and disable USE keywords that you
	do not want to be disabled or enabled by the previous two locations.
	</p>
	
	<p><b>Env</b></p>
	<p>USE keyword settings can be overrode manually using a shell
	environment setting.
	</p>

	<pre>
export USE="-gnome"
emerge net-im/gaim
	</pre>

	<p>This allows the use of a certain set of USE settings for the merging
	of one or more specific packages.  Any invocation of emerge after
	setting USE in the shell environment will be in effect as long as
	emerge is run from that shell and USE is still set.
	</p>
	
	<note>While Portage currently records the set of USE settings used
	when merging a package these USE settings are not persistent.  If
	the package is remerged or upgraded in the future it will use
	the USE keywords currently in effect and not the USE settings defined
	when it was first merged.</note>
	
  </body>
</section>

<section>
<title>Compiler Options</title>
<body>
	<p>The compiler options used by Portage to compile packages can be set
	in /etc/make.conf by editing <i>CHOST</i>, <i>CFLAGS</i>, and 
	<i>CXXFLAGS</i>. The <i>CHOST</i> setting specifies which platform
	you are compiling for and <i>CFLAGS</i> and <i>CXXFLAGS</i> settings
	specify compiler flags to be used while compiling C and C++
	respectively.
	</p>
	<p>
	Several sets of default settings are offered with comments on which
	platforms they are to be used with.  These provided defaults are 
	considered stable and tested.  Changing them may uncover compile 
	errors and bugs in both the compiler and in the software being 
	compiled.  Please be careful if you decide to customize a default 
	setting as you may end up with an unusable system.</p>
	<p>
	Users with multiprocessor systems may benefit by modifying the
	<i>MAKEOPTS</i> option found in /etc/make.globals.  This option
	is passed to the <i>make</i> command during package compilation
	to enable multiple gcc instances.
	</p>
	
</body>
</section>

<section>
<title>Directory Locations</title>
<body>
	<p>Portage allows you to configure the directories it uses 
	to build packages and where it stores various files.  Most users
	will have no need to change these locations.  The following
	options can be set:</p>

	<ul>
	<li><i>PORTDIR</i> - Portage tree location</li>
	<li><i>DISTDIR</i> - Local cache of downloaded archives</li>
	<li><i>PKGDIR</i> - Location of locally generated tbz2 packages</li>
	<li><i>RPMDIR</i> - Location of locally generated RPM packages</li>
	<li><i>CURRENTFILE</i> - ???</li>
	<li><i>PORTAGE_TMPDIR</i> - Temporary space used for package compilation</li>
	<li><i>BUILD_PREFIX</i> - Related to PORTAGE_TMPDIR</li>
	<li><i>PKG_TMPDIR</i> - Related to PKG_TMPDIR</li>
	</ul>
</body>
</section>
	

<section>
<title>Configuration File Protection</title>
<body>
	<p>Portage allows for the protection of all configuration files in
	specified directories.  Portage will not overwrite files in protected
	directories.  If a package tries to install a file that already
	exists, it will be renamed to something like <i>._cfg0000_name</i>.
	This is done so that users can later look at the new file and 
	manually merge the differences between the two themselves.</p>
	<p>
	Protected directories can be set by <i>CONFIG_PROTECT</i> in either
	/etc/make.conf or /etc/make.globals.  Specific files and subdirectories
	under protected directories can be made unprotected by setting
	<i>CONFIG_PROTECT_MASK</i>.
	</p>
	<p>
	The following is an example and should not be blindly copied:
	</p>

<pre>
CONFIG_PROTECT="/etc /usr/share/config /usr/kde/2/share/config"
CONFIG_PROTECT_MASK="/etc/gconf /etc/init.d /etc/pam.d"
</pre>

	<p>Users may request more information on how Configuration File 
	Protection works by issuing the following command in a shell:
	</p>

<pre>
emerge --help config
</pre>

</body>
</section>

<section>
<title>FEATURES</title>
<body>
	<p>Portage offers a number of options geared towards developers
	that govern how Portage behaves and cleans up after itself during
	various stages of a package merge.  These options should only
	be of interest to developers and may cause problems for users.
	</p>
	<p>
	A list of features to enable can be set by <i>FEATURES</i> in
	/etc/make.conf or /etc/make.globals.  The following is a list of
	available options: </p>
	<p>
	<ul>
	<li><i>digest</i> : Automatically create a digest for new ebuilds.</li>
	<li><i>cvs</i> : Automatically commit new digests to cvs.</li>
	<li><i>sandbox</i> : Enables "sandbox" for path prefix protection.</li>
	<li><i>noclean</i> : Portage never cleans up after itself.</li>
	<li><i>noauto</i> : Do not execute prior ebuild steps automatically.</li>
	</ul>
	</p>
</body>
</section>

<section>
<title>Portage SYNC settings</title>
<body>
	<p>Portage has the ability to update the Portage tree through the
	use of two different methods, rsync or anonymous CVS.  You can 
	define which method Portage should use via the <i>SYNC</i> setting 
	in /etc/make.conf.  </p>

	<p><b>RSYNC</b></p>

	<p>Users are recommended to use the rsync method unless they plan on 
	developing their own ebuild files as it places much less of a load
	on our servers then using anonymous CVS.  For this reason the rsync
	method is the default set in /etc/make.conf.  This method can be 
	set in the following way:</p>

<pre>
SYNC="rsync://cvs.gentoo.org/gentoo-x86-portage"
</pre>

	<note>The rsync method will blindly overwrite any changes you make
	to your local copy of the Portage tree.  If you need to keep
	local changes you will need to use the anonymous CVS method. </note>

	<p><b>Anonymous CVS</b></p>

	<p>Portage can sync the local Portage tree against a specified
	anonymous CVS server.  This is useful for developers who do not wish
	for their changes to be overwritten when Portage syncs with the
	official tree.  This method can be set in the following way: </p>

<pre>
SYNC="cvs://:pserver:anonymous@gentoo.org:/home/anoncvs"
</pre>

	<note>Anonymous CVS is slow and resource intensive on both the server
	and the client.  We ask that you please use the rsync method if you
	are not making changes to your local Portage tree.</note>
</body>
</section>

<section>
<title>Mirrors</title>
<body>
	<p>The Gentoo Project keeps a local mirror of all archive files
	referenced in ebuilds in the Portage tree.  Often upstream source
	tarballs, etc are kept on slow servers that may often be down.  Also
	upstream developers will remove older versions of software from an 
	ftp site when new releases of made.  To make life easier for people
	using the Gentoo distribution (and reduce the upstream source site's 
	bandwidth usage) we mirror these files.  This allows for faster and 
	more reliable downloading of these archive files from one more many 
	mirror sites close to your physical location. </p>
	<p>
	Whenever you attempt to merge a package Portage will first check
	our mirror site for the needed archives.  If the mirror site does not
	have the needed files then Portage tries to download them from the
	HTTP or FTP server specified in the package ebuild.</p>
	<p>
	The mirror Portage uses can be specified by <i>GENTOO_MIRRORS</i> 
	in /etc/make.conf.  The following is the current default setting:
	</p>
<pre>
GENTOO_MIRRORS="http://www.ibiblio.org/gentoo"
</pre>
	<p>To find a Gentoo mirror closer to your location please check the
	Gentoo website or ask your local friendly mailing list. </p>
</body>
</section>

<section>
<title>Downloading Program</title>
<body>
	<p>The program which Portage uses to download archive files can
	be specified by setting the <i>FETCHCOMMAND</i> and 
	<i>RESUMECOMMAND</i> settings.  Several examples are shown
	in /etc/make.conf and /etc/make.globals.  Portage uses <i>wget</i> by
	default which should serve most users needs.
	</p>

	<note>Portage passes HTTP and FTP proxy information to the downloading
	program through use of the HTTP_PROXY and FTP_PROXY environment
	variables.</note>
</body>
</section>

<section>
<title>Proxies</title>
<body>
	<p>Portage can be instructed to use both HTTP and FTP proxies
	when downloading files.  The proxies can specified by setting 
	<i>HTTP_PROXY</i> and <i>FTP_PROXY</i> in either /etc/make.conf
	or /etc/make.globals.  If both HTTP and FTP are served from the
	same proxy, you can set <i>PROXY</i> instead.</p>
	
	<p>The following is an example:</p>

<pre>
HTTP_PROXY="http://192.168.1.1:8080"
FTP_PROXY="http://192.168.1.1:8080"

or

PROXY="http://192.168.1.1:8080"
</pre>

	<note>These proxy settings currently only apply to HTTP and FTP
	downloads and are not used by rsync or anonymous CVS.  If you
	are behind a firewall that requires proxy use to reach the outside
	world you will need to update your Portage tree using a snapshot
	tarball.  [For now, ask the gentoo-users mailing list if someone
	is currently providing one for download]</note>

</body>
</section>

<section>
<title>Misc. Options</title>
<body>
	<p>The following are minor options which may be of use to users:</p>

	<ul>
	<li><i>NOCOLOR</i> : Allows users to disable the use of colors in output from the emerge tool.</li>
	<li><i>CLEAN_DELAY</i> : Portage delays unmerging of a package by a defined number of seconds to give users time to cancel.  This specifies the number of seconds to wait and can be disabled by setting it to "0".</li>
	</ul>

</body>
</section>

</chapter>

<chapter>
<title>Package Management</title>

<section>
<title>Overview</title>
<body>
	<p>
	[Not done yet]
	</p>
</body>
</section>

<section>
<title>Updating The Portage Tree</title>
<body>
	<p>The Portage tree, located within /usr/portage, contains the library
	of build instructions for various packages (called <i>ebuilds</i>).
	The tree also contains profile and package.mask information which
	is vital for keeping your system up to date.  It is important to keep 
	this tree updated and in sync with the official Portage tree in order
	to have the newest versions of packages and bugfixes available to you.
	You can update the Portage tree by issuing the following command:
	</p>
<pre>
emerge rsync
</pre>
	<p>The method emerge uses to update the local Portage tree can be 
	changed.  See <i>Portage SYNC settings</i> in the 
	<i>Configuring Portage</i> chapter for more information.
	</p>
</body>
</section>

<section>
<title>Merging Packages</title>
<body>
	<p>
	The act of compiling and installing a package through Portage
	is refered to as <i>merging</i>.  Portage compiles packages
	and temporarily installs them to an "image" directory where it 
	records the files to be installed.  These files are then moved from
	the image directory and merged with the real / filesystem. 
	</p>
	<p>
	The <i>emerge</i> command serves as the frontend of the Portage
	system.  The installation and removal of packages is controlled
	by using this command and its various command-line arguments.
	</p>
	<p>
	To install the newest unmasked version of a given package simply
	specify the package name like the following:
	</p>
<pre>
emerge galeon
</pre>
	<p>
	The command will compile and install any needed dependencies (taking 
	into account any USE settings) and then compile and install the 
	newest unmasked version of galeon.  Galeon could also have been
	refered to using fully qualified name with category: <i>net-www/galeon</i>
	</p>
	<p>
	The <i>emerge</i> command also accepts references to actual ebuild 
	files.  This allows users to merge older versions of a given package 
	and to merge third party ebuild based packages.  The following is an
	example:
	</p>
<pre>
emerge /usr/portage/net-www/galeon/galeon-1.2.0-r3.ebuild
</pre>
	<p>
	In addition to specifying the package name or ebuild file to be merged,
	<i>emerge</i> supports several very useful command line arguments.
	Of these arguments <i>--pretend</i> is perhaps the most useful.  When
	this argument is used the intended action is not performed.  Instead
	Portage displays a list of packages that would have been installed
	or updated while performing the action.  The following is an example
	listing of what would have been merged during the installation
	of the latest version of the kdevelop package:
	</p>

<pre>
root@kodiak blocke # emerge --pretend kdevelop             

These are the packages that I would merge, in order.

Calculating dependencies ...done!
[ebuild  N   ] kde-base/kdelibs-2.2.2-r4 to /
[ebuild  N   ] dev-util/kdbg-1.2.2 to /
[ebuild   U  ] app-text/psutils-1.17 to /
[ebuild   U  ] app-text/a2ps-4.13b-r3 to /
[ebuild   U  ] app-text/jadetex-2.20 to /
[ebuild  N   ] app-text/sgmltools-lite-3.0.3-r2 to /
[ebuild  N   ] kde-base/kdoc-2.2.2-r1 to /
[ebuild  N   ] net-www/htdig-3.1.5-r2 to /
[ebuild  N   ] app-text/enscript-1.6.3-r1 to /
[ebuild  N   ] kde-base/kdebase-2.2.2-r2 to /
[ebuild  N   ] app-doc/qt-docs-2.3.1 to /
[ebuild  N   ] dev-util/kdevelop-2.0.2 to /
</pre>
	<p>In the above listing, packages marked with a <i>N</i> are
	packages which have not yet been installed and would be installed
	during this action.  Packages marked with a <i>U</i> indicate
	that an older version of the package was already installed and the
	action would upgrade the package.
	</p>
	<p>
	The other arguments available are:
	</p>
	<p>
	<i>--fetchonly</i> : Downloads the needed archive files for compiling
	the package to be installed and any dependencies that need to be met.
	</p>
	<p>
	<i>--emptytree</i> : This option makes Portage pretend that none of the
	dependencies of this package or the packages it depends upon are 
	installed.  This is useful with <i>--pretend</i> to display a complete
	tree of dependencies for any particular package.  All dependencies
	except for glibc are displayed.
	</p>
	<p><i>--nodeps</i> : Portage attempts to merge only the specified
	packages and ignores any dependencies.  If you do not have the 
	appropriate dependencies already installed then compilation may
	fail.
	</p>
	<p><i>--onlydeps</i> : Only dependencies for a given package are
	merged.  The specified package is <u>not</u> merged.
        </p>
	<p><i>--noreplace</i> : Skips the merge of specified packages if they
	are already installed
	</p>
	<p><i>--usepkg</i> : Instead of compiling the specified packages
	Portage will attempt to use pre-compiled tbz2 packages from a specified
	location.  The location is specified by the <i>PKGDIR</i> shell
	environment variable.
	</p>
	<p><i>--debug</i> : The ebuild environment is instructed to become 
	much more verbal.  This is useful for developers trying to track 
	down syntax errors in bash script based ebuild files.
	</p>
	<p><i>--autoclean</i> : Forces <i>emerge</i> to clean out
	package-specific temporary build directories before it starts
	to build a package.  Portage does this by default so this option
	is only useful to developers who disabled this default behavior.
	</p>
	<p><i>--verbose</i> : Tells <i>emerge</i> to run in verbose mode.
	Currently, this only causes GNU info errors to be displayed.  These
	errors can be safely ignored by users.
	</p>
</body>
</section>

<section>
<title>Unmerging Packages</title>
<body>
	<p>The act of "unmerging" is to remove the files associated with
	an installed package from the filesystem.  The software in the package
	is removed from the system and can no longer be used until it is 
	remerged.
	</p>
	<p>Packages are removed by invoking the <i>emerge</i> command and
	specifying the <i>unmerge</i> argument followed by the name of the
	package to be removed.  The following example would unmerge all
	installed versions of the <i>ltrace</i> package:
	</p>

<pre>
emerge unmerge ltrace

or

emerge unmerge dev-util/ltrace
</pre>
	<p>Portage also allows for a specific versions of packages
	to be unmerged. Ranges are specified using <i>=</i> (exact version),
	<i>&lt;</i> (less then), <i>&gt;</i> (greater then), <i>&lt;=</i> 
	(less then or equal to), and <i>&gt;=</i> (greater then or equal to).
	The following would unmerge all versions of ltrace equal to 
	version 0.3.15 and older:
	</p>

<pre>
emerge unmerge \&lt;=dev-utils/ltrace-0.3.15
</pre>

	<p>When specifying package ranges it is important to escape <i>&gt;</i>
	and <i>&lt;</i> characters so your shell does not interpret them.
	Also you will need to specify the category in the package name as 
	shown in the example.  For another example of how package
	range specifications work see the <i>emerge --help</i> command.
	</p>

	<p>If the package to be removed is in fact installed the emerge
	program will display exactly what packages are to be removed and
	will wait a specified number of seconds to give the user time to
	cancel.  During this waiting period the user may press Control-C
	to cancel before the unmerge beings.
	</p>
	<p>
	Once the unmerge begins you will see a long list of filenames 
	belonging to the package displayed.  Some of these filenames
	will have a flag displayed to the left of the filename.
	The flags <i>!mtime</i>, <i>!empty</i>, and <i>cfg</i> specify
	reasons why certain files were not removed when this package
	was unmerged.  Files listed without any of these three flags
	were removed from the filesystem successfully.
	</p>
	<p>
	The <i>!mtime</i> flag means the file was modified after this specific 
	version of the package was installed.  This means that someone
	edited this file after the package was installed or some other package
	overwrote the file at a later time.  This allows for packages to be
	updated to newer versions without fear that unmerging the older
	installed version will remove vital files.
	</p>
	<warn>Files are considered owned by the last package installed.
	This is dependent on the order of installation and is independent
	of the actual version number or revision number of the packages
	installed.  Removing the newest installed package that claims a certain
	file will always remove the file even if older packages installed
	versions of the same file in the past (assuming the user did not 
	manually modify the file).
	</warn>


	<p>
	[ Sorry, this document is not finished yet.  We are working as fast
	as we can to get it all up in time for the Gentoo 1.0 rush... Please
	check back in a day for more. ]
	</p>
	
</body>
</section>


</chapter>


</guide>

