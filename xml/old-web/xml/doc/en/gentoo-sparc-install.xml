<?xml version='1.0'?>

<!DOCTYPE guide SYSTEM "../../../dtd/guide.dtd">

<guide>
<title>Gentoo Sparc/Sparc64 Linux Installation Guide</title>
<author title="Maintainer"><mail link="murphy@gentoo.org">Maarten Thibaut</mail></author>
<author title="Editor"><mail link="atom.stephens@ohiou.edu">Adam Stephens</mail></author>
<author title="Editor"><mail link="manson@gentoo.org">Rodney Rees</mail></author>

<abstract>This is a guide for installing Gentoo Linux on a Sparc64 based
machine. If you find errors or omissions please email the maintainer or an editor. </abstract>

<version>0.5</version>
<date>06 Oct 2002</date>
<chapter>
<title>Supported Hardware</title>
<section>
<body>
<p>For a list of hardware supported by the UltraLinux project and which should be supported by Gentoo Linux Sparc also
please visit <uri link="http://www.ultralinux.org/faq.html"> the UltraLinux FAQ.</uri>
</body>
</section>
<section>
<title>Kernel</title>
<body>
<p>Always use a 64 bit kernels on a 64 bit machine. This includes Ultra 1, 2,
5, 10 and 60, the SunBlade series, E250/E450, E4*00, E6*00, E10K and
StarFire platforms. The <c>uname -m</c> output of these machines is "sparc64"
or "sun4u".</p>

<p>Always use 32 bit kernels on 32 bit platforms (sun4c, sun4d or sun4m).
These include the IPC/IPX, SparcStations, etc. The "uname -m" output should
be one of the following: "sparc", "sun4c", "sun4d" or "sun4m".</p>

<p>Currently we use the ARCH environment variable specified in
/etc/make.profile/make.defaults to determine the kernel architecture
to build. This is subject to change. It will probably change to a USE
switch such as <c>arch=sparc64</c>.</p>

<p>Stage 1 builds that are made on 64 bit machines should work fine on
sparc32 machines. The same goes for stage2 I think (not tested). I'll
try it out.</p>

<note>Sparc32 support is extremely limited and not entirely supported at this time.</note>

<p>Some kernels have trouble booting with large amounts of memory.
Try removing some memory, that worked for me, or try a newer image.</p>
</body>
</section>
</chapter>
<chapter>
<title>Part 2: Booting</title>
<section>
<title>Boot methods</title>
<body>
<p>
There are three ways of booting:
</p>
<p>
<uri link="#doc_chap4_sect2">booting over the network, or netboot</uri>
<uri link="#doc_chap4_sect3">booting from an existing SILO boot loader</uri>
<uri link="#doc_chap4_sect4">booting from cdrom</uri>
</p>
<p>
Using an existing Linux system already on the machine's hard drive is the
easiest method as it will probably provide you with a complete Unix
environment and a working ethernet connection. In this case boot into
your Linux system as normal, mount the destination partition at <path>/mnt/gentoo</path>
and skip to <uri link="#doc_chap5">Step 3</uri>.
</p>
<p>
If using an already installed Linux is not possible, then use a <uri link="#doc_chap4_sect2">netboot</uri>.
</p>
</body>
</section>
<section>
<title>Netboot</title>
<body>
<p>
At the boot prompt, type:
</p>
<pre>
ok <i>boot net</i>
</pre>
<note>You'll need to have another machine on the same network to provide RARP
(to allow the client to determine its IP address) and TFTP service (to get
the kernel over the network).
</note>
<p>
You can find good documentation on the Debian Sparc pages:
</p>
<p>
<uri>http://www.debian.org/releases/stable/sparc/install</uri>
</p>
<p>
The SunBlades haven't been supported very long and you may have trouble
finding good boot images. You can get decent netboot images at:
</p>
<p>
<uri>http://auric.debian.org/~bcollins/disks-sparc/current/</uri>
</p>
<p>
Once booted, choose a disk to install on and configure the network.
When the debian woody install disk asks you to setup a kernel, go
down to <c>Execute a shell</c>.
</p>
<p>
If your debian install system is failing DNS requests then you
probably moved away the <path>/target/etc/resolv.conf</path> file, make sure it's
there because that's where the debian install disk expects it to be.
</p>
<p>
You can also use your current Linux to untar the contents of the stage 1
into a partition and then mount it from the boot command line:
</p>
<pre>
ok <i>boot net root=/dev/sda4</i>
</pre>
</body>
</section>
<section>
<title>Existing SILO</title>
<body>
<p>Or you can use your already-installed SILO to boot it (press TAB once the
SILO: appears). Of course this means you won't be able to load kernel
modules but that might not be a problem as the default sparc kernel configs
enable most SPARC hardware drivers by default. You could use your already
installed Linux sparc machine to compile a kernel with all your drivers
compiled in statically.</p>

<pre>ok <i>boot</i>
SILO: <codenote>Press TAB here.</codenote> boot:
linux
boot: <i>vmlinux root=/dev/hda4</i>
</pre>
<p>
or this will boot the 4th partition on the first disk:
</p>
<pre>
boot: <i>4/vmlinux root=/dev/hda4</i>
</pre>
</body>
</section>

<section>
<title>CDROM</title>
<body>
<note>Booting from CDROM is the easiest and preferred method.</note>
<p>
Please try to use a download mirror if possible. ISO images are
extremely big.  Get the latest Gentoo ISO image from 
<uri>http://www.ibiblio.org/pub/Linux/distributions/gentoo/releases/1.1a/</uri>
and use cdrecord to burn it to your CD writer.  Boot the CD from
the ok prompt and choose the ramdisk option:
</p>
<pre>
ok <i>boot cdrom</i>
SILO:
...
boot: <i>ramdisk</i>
</pre>
</body>
</section>
</chapter>
<chapter>
<title>Part 3: Installing gentoo</title>
<section>
<body>
<p>
If you used netboot to boot your system and allowed it to layout
your disks then the target will be mounted as <path>/target</path>. In this case
you may want to put a symlink from <path>/mnt/gentoo</path> to <path>/target</path> as the
documentation assumes <path>/mnt/gentoo</path>. If not, you should mount a
partition as <path>/mnt/gentoo</path> and use it to install on.
</p>
<note>if you have used Debian to boot your system, then

  partition your hard disk(s)
  configure your network
  execute a shell
</note>
<note>
about NFS

You can also do NFS mounts for the /usr/portage and /usr/distfiles
dirs if needed.

When using an NFS mounted /usr/distfiles, make sure it is writable
and let the system know about it:

# export DISTDIR=/usr/distfiles
</note>
<note>
An emerge bootstrap uses about 500MB to compile and 150 MB when finished.
If you want a complete system that can compile other stage1's you'll need
at least a gigabyte. This is including the distfiles.
</note>
<note>
You can use wget to download the stage1 from the gentoo site.
Warning, debian netboot images do not carry a /usr/bin/bzip binary
so you should get a .tgz instead (if available).
</note>

<p>Now, let's quickly review the install process.  We'll create partitions, 
create our filesystems, and extract either a stage1, stage2 or stage3 tarball.
If we are using a stage1 or stage2 tarball, we will take the appropriate steps
to get our systems to stage3.  Once our systems are at stage3, we can configure
them (tweaking config files, installing a bootloader, etc) and boot them and
have a fully-functional Gentoo Linux system.  Depending on what stage of the build
process you're starting from, here's what's required for installation:</p>

<table>
<tr><th>stage tarball</th><th>requirements for installation</th></tr>
<tr><ti>1</ti><ti>partition/filesystem setup, emerge rsync, bootstrap, emerge system, emerge linux sources, final configuration</ti></tr>
<tr><ti>2</ti><ti>partition/filesystem setup, emerge rsync, emerge system, emerge linux sources, final configuration</ti></tr>
<tr><ti>3</ti><ti>partition/filesystem setup, emerge rsync (optional), final configuration</ti></tr>
</table>
<p>First step is to insert any needed modules. You may not need this as most of the standard sparc hardware is 
built into the kernel.To view a list of all available network card modules, type <c>ls
/lib/modules/*/kernel/drivers/net/*</c>.  To load a particular module,
type:</p>

<pre>
# <i>modprobe pcnet32</i>
	<comment>(replace pcnet32 with your NIC module)</comment>
</pre>

<p>Now, if you want to be able to access any SCSI hardware that wasn't detected
during the PCI autodetection process, you'll need to load the appropriate
modules from /lib/modules, again using <c>modprobe</c>:</p>

<pre>
# <i>modprobe aic7xxx</i>
# <i>modprobe sr_mod</i>
# <i>modprobe sd_mod</i>
</pre>

<p>Above, we modprobe the <c>aic7xxx</c> SCSI driver and then make sure that SCSI CD-ROM (<c>sr_mod</c>)
and disk (<c>sd_mod</c>) support is loaded.</p>

<note><c>hdparm</c> is included on the Gentoo iso.  
If any of your drives require tweaking, now
would be a good time to do so. On reasonably modern hardware
<c>hdparm -d 1 /dev/hdx</c> should be quite safe.  You can use 
<c>hdparm -v /dev/hdx</c> to check your drive's settings,
and <c>hdparm -t /dev/hdx</c> to check your drive's performance.</note>
</body>
</section>
<section>
<title>Configure installation networking</title>
<body>

<p>The Gentoo install lets you configure a working network, allowing you to use <c>ssh</c>, <c>scp</c> or <c>wget</c>
as needed before even beginning the installation process.  Even if you don't need to do these things now,
you should go ahead and set up networking now.  Once set up, Portage will be able to use your configured network
once you are inside the chroot environment (required for installing Gentoo Linux). </p>
</body>
</section>

<section>
<title>Manual DHCP configuration</title>
<body>
<p>
Network configuration is simple with DHCP; If your ISP is not using
DHCP, skip down to the static configuration section below.  
</p>
<pre caption="Network configuration with DHCP">
# <i>dhcpcd eth0</i> 
</pre>
<note>
Some ISPs require you to provide a hostname.  To do that,
add a <c>-h myhostname</c> flag to the dhcpcd command line above.
</note>
<p>If you receive <i>dhcpConfig</i> warnings, don't panic; the errors
are most likely cosmetic.  Skip down to Network testing below.</p>
</body>
</section>
<section>
<title>Manual Static configuration</title>
<body>
<p>
We need to setup just enough networking so that we can download
sources for the system build, as well as the required localhost interface.  Type in the following commands, replacing
$IFACE with your network interface (typically <c>eth0</c>), $IPNUM
with your IP address, $BCAST with your broadcast address, and $NMASK
with your network mask.  For the <c>route</c> command, replace 
$GTWAY with your default gateway.
</p>
<pre>
# <i>/sbin/ifconfig $IFACE $IPNUM broadcast $BCAST netmask $NMASK</i>
# <i>/sbin/route add -net default gw $GTWAY netmask 0.0.0.0 metric 1</i>
</pre>
<p>Now, it's time to create the <path>/etc/resolv.conf</path>
file so that name resolution (finding Web/FTP sites by name, rather than just by IP address) will work.</p>

<note>At the moment the only editors installed by default are <c>nano</c>, a
small and very easy-to-use visual editor.   Use <c>nano</c> with the <c>-w</c>
option to turn off automatic line-wrapping.
</note>

<p>Here's a template to follow for creating your /etc/resolv.conf file:
</p>
<pre caption="/etc/resolv.conf template">
domain mydomain.com
nameserver 10.0.0.1
nameserver 10.0.0.2
</pre>
<p>Replace <c>10.0.0.1</c> and <c>10.0.0.2</c> with the IP addresses of your
primary and secondary DNS servers respectively.</p>
</body>
</section>

<section>
<title>Proxy Configuration</title>
<body>
<p>If you are behind a proxy, it is necessary to configure your proxy before
you continue. We will export some variables to set up the proxy accordingly. </p>
<pre>
# <i>export http_proxy="machine.company.com:1234" </i>
# <i>export ftp_proxy="$http_proxy" </i>
# <i>export RSYNC_PROXY="$http_proxy" </i>
</pre>
</body>
</section>

<section>
<title>Network testing</title>
<body>
<p>Now that your network has been configured, the <c>/sbin/ifconfig -a</c> command should show (hopefully!) 
that your network card is working
(look for <e>UP</e> and <e>RUNNING</e> in the output).
</p>
<pre caption="/sbin/ifconfig for a working network card">
eth0      Link encap:Ethernet  HWaddr 00:50:BA:8F:61:7A
          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::50:ba8f:617a/10 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1498792 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1284980 errors:0 dropped:0 overruns:0 carrier:0
          collisions:1984 txqueuelen:100
          RX bytes:485691215 (463.1 Mb)  TX bytes:123951388 (118.2 Mb)
          Interrupt:11
</pre>
</body>
</section>
<section>
<title>Networking is go!</title>
<body>
<p>Networking should now be configured and useable.  You should be able to use the included
<c>ssh</c>, <c>scp</c> and <c>wget</c> commands to connect to other machines on your LAN or the Internet.</p>
</body>
</section>
</chapter>
<chapter>
<title>Set up partitions</title>
<section>
<body>
<p>Now that the kernel can see our network card and disk controllers, it's time
to set up disk partitions for Gentoo Linux.</p>

<note>This next step is for if you were able to boot from the CDROM. 
If you followed any other boot process skip the next 3 instructions.</note>

<p>
Then mount the cdrom and chroot into the right root dir for
your platform:
</p>
<pre>
# <i>mount -t iso9660 -o ro /dev/cdroms/cdrom0 /mnt</i>
# <i>chroot /mnt/root-\`uname -m\` bin/bash</i>
# <i>source /etc/profile</i>
</pre>

<p>From here you have a rescue environment which you can use to
fix your system. You can also partition disks here and mount
them for installation.
</p>

<note>
When using the CD-ROM, do (this is an example, don't just copy/paste!)
</note>
<pre>
# <i>fdisk /dev/hda</i>
# <i>mount -n /dev/hda2 /mnt/gentoo; cd /mnt/gentoo</i>
# <i>wget http://www.ibiblio.org/pub/Linux/distributions/gentoo/releases/build/1.4_rc1/sparc/stage1-sparc64-1.4_rc1.tbz2</i>
# <i>bunzip2 -c /stage1-sparc64-1.4_rc1.tbz2 | tar xvpf -</i>
# <i>cp /etc/resolv.conf etc/resolv.conf</i>
# <i>nano /etc/resolv.conf</i>
# <i>rm etc/make.profile</i>
</pre>

<note>The easiest way to create the Sun Disk Label is to use the <i>'s'</i> option in fdisk and then modify
the partitions to suit your needs.</note>

<note>For SILO to work properly your /etc and /boot filesystems must be ext2 or ext3 only.</note>

<note>After mounting your / to /mnt/gentoo go ahead and mount any others that you may have (i.e. /boot /usr /var)</note>
<p>
Now edit make.conf and comment out any other definitions for these:
</p>
<pre>
<i>
CHOST="sparc-unknown-linux-gnu"
CFLAGS="-mcpu=v8 -mtune=v9 -O2 -pipe"
CXXFLAGS="-O2 -pipe"
</i>
</pre>
<note>
For /etc/make.conf change :

SYNC="rsync://cvs.gentoo.org/gentoo-portage"

to

SYNC="rsync://rsync.gentoo.org/gentoo-portage"
</note>
<pre>
# <i>mount -o bind /proc proc</i>
# <i>mount -o bind /dev dev 	<codenote>Not absolutely necessary</codenote></i>
# <i>chroot /mnt/gentoo bin/bash</i>
# <i>env-update</i>
# <i>source /etc/profile</i>
# <i>emerge rsync</i>
# <i>rm etc/make.profile</i>
</pre>
<p>
Select the right platform, for sparc64:
</p>
<pre>
# <i>uname -m</i>
sparc64
# <i>ln -s ../usr/portage/profiles/default-sparc64-1.4 etc/make.profile</i>
</pre>
<p>
Or for sparc:
</p>
<pre>
# <i>uname -m</i>
sparc
# <i>ln -s ../usr/portage/profiles/default-sparc-1.4 etc/make.profile</i>
</pre>
<p>
If starting with stage 1, run:
</p>
<pre>
# <i>scripts/bootstrap.sh</i>
</pre>
<p>
This may take a while. You now have a stage 2 Gentoo.
</p><p>
Then:
</p>
<pre>
# <i>emerge system</i>
</pre>
<p>
You now have a stage 3 Gentoo.
</p>
</body>
</section>
</chapter>
<chapter>
<title>Part 4: Building a kernel</title>
<section>
<body>
<p>
On sparc64 platforms we'll need a compiler for 64bit targets:
</p>
<pre>
# <i>emerge egcs64-sparc</i>
</pre>
<p>We now have working kernel sources !!! </p>
<pre>
#<i>emerge sparc-sources</i>
#<i>cd /usr/src/linux</i>
#<i>make mrproper</i>
#<i>make menuconfig</i>
#<i>make dep && make clean vmlinux modules modules_install</i>
#<i>cp vmlinux /boot</i> //see warning below before you do this
</pre>

<warn><p>
The kernel has to be smaller than 3.6 megabytes to "fit" in the memory
space SILO uses:
</p>
<pre>
# <i>ls -al vmlinux</i>
-rwxr-xr-x    1 root     root      3503075 Apr 20 21:42 vmlinux
</pre>
<p>
We need a straight GZIP for SILO.
</p>
<pre>
# <i>gzip -9 vmlinux</i>
</pre></warn>

<p>
If you haven't setup SILO on this disk and you want to boot from it:
</p>
<pre>
# <i>emerge silo</i>
# <i>nano /etc/silo.conf</i>
# <i>silo</i>
</pre>

<warn>Statements below are untested at this point. General practice for sparc
is to leave /boot on the / filesystem. If you wold like to test your system with
a /boot mount point please read the silo/silo.conf man pages. <uri link="http://silo.sourceforge.net">SILO homepage</uri>
</warn>
<warn>If you have used a seperate partition for boot: your /etc/silo.conf 
must reference the /boot partition instead of /boot/vmlinux. 
example scenario:
/dev/hda is set as: hda1 = boot hda2=/ hda3=disklabel hda4=swap
in your silo.conf you must have your image = line set to
<pre><i>	image = 1/vmlinux</i>
or
<i>		image = 1/boot/vmlinux</i>
</pre>
Also verify that your root= line reflect the correct partition such as
root=/dev/hda2
</warn>
<note>Other silo pages that have good info can be found at:
<uri link="http://www.ucs.ed.ac.uk/usd/scisup/faq/linux/silo.conf.html">SPARC Linux - silo.conf Solaris Boot HOWTO (seems to be sparc32 centric)</uri>
<uri link="http://www.tldp.org/HOWTO/SPARC-HOWTO-9.html">SPARC-HOWTO.: SILO. (located at the Linux Doc Project)</uri>
Information on configuring SILO to boot other operating systems is available. Please read the file README in
/usr/doc/silo*/docs after installation. 
</note>

</body>
</section>
</chapter>
<chapter>
<title>Grand Finale!</title>
<section>
<body>
<p>Congratulations! You have just completed your install of Gentoo Linux on your
Sparc. We welcome any comments or suggestions that you may have to help us better
our Sparc port. Please sign up for the gentoo-sparc mailing list and drop us a line.
Thank You for taking the time to install.</p>

<p>You are now at the point where you can do one of a few things.
Either unmount everything and reboot to start installing ebuilds or you can start installing them now.</p>
</body>
</section>
</chapter>

</guide>
