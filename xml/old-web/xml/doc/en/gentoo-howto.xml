<?xml version='1.0'?>
<!-- gentoo-howto.xml,v 1.20 2001/08/17 21:52:07 drobbins Exp -->

<!DOCTYPE guide SYSTEM "../../../dtd/guide.dtd">

<guide link="/doc/gentoo-howto.html">
<title>Gentoo Linux Developers HOWTO</title>
<author title="Author"><mail link="woodchip@gentoo.org">Donny Davies</mail></author>
<author title="Author"><mail link="drobbins@gentoo.org">Daniel Robbins</mail></author>
<author title="Author"><mail link="pete@gentoo.org">Peter Gavin</mail></author>
<author title="Author"><mail link="karltk@gentoo.org">Karl Trygve Kalleberg</mail></author>
<abstract>This document describes the Gentoo Linux Portage system, how
to create new packages for Gentoo, and is also meant to be somewhat of
a standard for the Gentoo Developers. It is a work in progress, and is
constantly being updated and changed. It is by no means complete.</abstract>
<version>1.2</version>
<date>24 Apr 2002</date>

<!--

Contents

I. Introduction
II. The Portage Tree
  A. What (Not) to Put in the Portage Tree
  B. Categories
  C. The files Directory
III. .ebuild Files
  A. Naming .ebuild Files
  B. Contents of an .ebuild File
  C. Rules for Writing an .ebuild File
IV. Filesystem Locations
  A. Introduction to the FHS
  B. How to Fit Your Packages into the Filesystem
V. The Portage Scripts and Utilities
  A. Public Scripts
  B. Private Scripts
VI. Package Dependencies
    
-->


<chapter>
<title>The Portage tree</title>

<section>
<title>Introduction</title>
<body><p>The Portage tree is typically found at <path>/usr/portage</path>
and is organized in a heirarchical structure consisting of category directories,
followed by specific package directories.  Here's an example; you can find
the <path>util-linux-2.11g.ebuild</path> file in the <path>/usr/portage/sys-apps/util-linux</path>
directory.  There may be several other versions of <c>util-linux</c> ebuilds alongside
<path>util-linux-2.11g.ebuild</path>.  This is because <e>all ebuilds for a particular
package (regardless of version)</e>, share the same <path>mycat/mypkg</path> directory in
<path>/usr/portage</path>.
</p></body>
</section>

<section>
<title> What (not) to put in the Portage tree</title>

<body><p>In general, the Portage tree should only be used for storing
<path>.ebuild</path> files, as well as any relatively small companion files,
such as patches or sample configuration files.  These types of files should be
placed in the <path>/usr/portage/mycat/mypkg/files</path> directory to keep the
main <path>mycat/mypkg</path> directory uncluttered.  Also, in general, it's
not a good idea for developers to add binary (non-ASCII) files to CVS.
However, if this is necessary (for example, if you need to add a small PNG
graphic for whatever reason, be sure to add it to CVS by using the <c>-kb</c>
option, like so: </p>

<pre>
# <i>cvs add -kb myphoto.png</i>
</pre>

<p>The <c>-kb</c> option tells CVS that <path>myphoto.png</path> is a binary
file and should be treated specially.  For example, merging the differences
between two different versions of this file should not be allowed to happen,
for obvious reasons.  Also, speaking of merging changes, any patches you add to
Portage should generally <e>not</e> be compressed.  This will allow CVS to
merge changes and inform developers of conflicts correctly.  </p>

</body>
</section>
<!--
<section>
<title>Categories</title>
<body><p>The categories are defined as follows:</p>
<table><tr><th>Category</th><th>Description</th></tr>
<tr><ti><path>app-admin</path></ti><ti>non-critical system administration utilities</ti></tr>
<tr><ti><path>app-arch</path></ti><ti>non-critical archival/compression utilities </ti></tr>
<tr><ti><path>app-cdr</path></ti><ti> CD recording utilities </ti></tr>
<tr><ti><path>app-crypt</path></ti><ti> Cryptography related apps </ti></tr>
<tr><ti><path>app-doc</path></ti><ti>application documentation </ti></tr>
<tr><ti><path>app-editors</path></ti><ti>non-critical text editors </ti></tr>
<tr><ti><path>app-emulation</path></ti><ti>packages for emulating other systems/OSes </ti></tr>
<tr><ti><path>app-games</path></ti><ti>Games!!! 'Nough said </ti></tr>
<tr><ti><path>app-misc</path></ti><ti>applications that don't fit anywhere else </ti></tr>
<tr><ti><path>app-office</path></ti><ti>office-type (word processing, spreadsheet, etc.) packages </ti></tr>
<tr><ti><path>app-shells</path></ti><ti>non-critical shells and command interpreters </ti></tr>
<tr><ti><path>app-text</path></ti><ti>text processing, spell checkers, and document formatting packages </ti></tr>
<tr><ti><path>dev-db</path></ti><ti>database libraries </ti></tr>
<tr><ti><path>dev-java</path></ti><ti>java classes/packages/etc.  </ti></tr>
<tr><ti><path>dev-lang</path></ti><ti>compilers and interpreters for different languages </ti></tr>
<tr><ti><path>dev-libs</path></ti><ti>miscellaneous developer's libraries </ti></tr>
<tr><ti><path>dev-perl</path></ti><ti>perl modules </ti></tr>
<tr><ti><path>dev-python</path></ti><ti>python modules </ti></tr>
<tr><ti><path>dev-ruby</path></ti><ti>ruby modules </ti></tr>
<tr><ti><path>dev-tcltk</path></ti><ti>Tcl-Tk modules </ti></tr>
<tr><ti><path>dev-util</path></ti><ti>various developers utilities </ti></tr>
<tr><ti><path>gnome-apps</path></ti><ti>applications for GNOME </ti></tr>
<tr><ti><path>gnome-base</path></ti><ti>base GNOME packages </ti></tr>
<tr><ti><path>gnome-libs</path></ti><ti>non-essential GNOME libraries </ti></tr>
<tr><ti><path>gnome-office</path></ti><ti>office packages for gnome </ti></tr>
<tr><ti><path>kde-base</path></ti><ti>main KDE distribution </ti></tr>
<tr><ti><path>kde-i18n</path></ti><ti>KDE internationalization packages </ti></tr>
<tr><ti><path>media-gfx</path></ti><ti>graphics-related programs </ti></tr>
<tr><ti><path>media-libs</path></ti><ti>  libraries for manipulating different media, including accessing multimedia peripherals of your computer (sound card, video card, etc.) </ti></tr>
<tr><ti><path>media-sound</path></ti><ti>programs related to sound, including cd-audio and sound encoding </ti></tr>
<tr><ti><path>media-video</path></ti><ti>programs related to video, including video codecs and players </ti></tr>
<tr><ti><path>net-analyzer</path></ti><ti>network usage statistics monitors/analyzers </ti></tr>
<tr><ti><path>net-dialup</path></ti><ti>network dialup clients and servers such as pppd </ti></tr>
<tr><ti><path>net-fs</path></ti><ti>network filesystems </ti></tr>
<tr><ti><path>net-ftp</path></ti><ti>ftp servers and clients </ti></tr>
<tr><ti><path>net-im</path></ti><ti>Instant Messaging servers and clients </ti></tr>
<tr><ti><path>net-irc</path></ti><ti>irc servers and clients </ti></tr>
<tr><ti><path>net-libs</path></ti><ti>networking-related libraries </ti></tr>
<tr><ti><path>net-mail</path></ti><ti>MTAs and MUAs </ti></tr>
<tr><ti><path>net-misc</path></ti><ti>miscellaneous servers, clients, firewalls, etc. </ti></tr>
<tr><ti><path>net-nds</path></ti><ti>NIS/NIS+ and other network directory services </ti></tr>
<tr><ti><path>net-news</path></ti><ti>Usenet servers and clients </ti></tr>
<tr><ti><path>net-print</path></ti><ti>print servers and clients </ti></tr>
<tr><ti><path>net-www</path></ti><ti>http/www servers and clients </ti></tr>
<tr><ti><path>sys-apps</path></ti><ti>system-critical applications and utilities </ti></tr>
<tr><ti><path>sys-devel</path></ti><ti>base development packages, such as gcc and make </ti></tr>
<tr><ti><path>sys-kernel</path></ti><ti>Linux kernels and kernel source packages </ti></tr>
<tr><ti><path>sys-libs</path></ti><ti>system-critical libraries such as glibc </ti></tr>
<tr><ti><path>x11-base</path></ti><ti>base X packages, such as XFree86 and drivers for various video cards </ti></tr>
<tr><ti><path>x11-libs</path></ti><ti>widget sets and other X-specific libraries</ti></tr>
<tr><ti><path>x11-terms</path></ti><ti>X-based terminal emulators </ti></tr>
<tr><ti><path>x11-wm</path></ti><ti>X window managers </ti></tr>
</table>
<note>If a new category is created (please get permission first!),
then the category needs to be added to
<path>/usr/lib/python2.0/portage.py</path>.
</note>
</body>
</section>
-->
<section>
<title>The files Directory</title>
<body>

<p>As noted earlier, under each package subdirectory is a <path>files</path>
directory.  Any  patches, configuration files, or other ancillary files your
package might require should be added to this directory. You may want to
consider naming patches you create yourself just to get your package to build
with a version-specific name, such as <path>mypkg-1.0-gentoo.diff</path>.  Also
note that the <path>gentoo</path> extension informs people that this patch was
created by us, the Gentoo Linux developers, rather than having been grabbed
from a mailing list or somewhere else.  Again, you should not compress these
diffs because cvs does not play well with binary files.  </p>

<p>Consider adding a suffix such as <path>mypkg-1.0</path> to the tail of every
file you put into the <path>files</path> directory, so that the files used for
each individual version of your ebuild scripts are distinguishable from one
another, and so that the changes between different revisions are visible.  This
is generally a really good idea. :)  You may want to use a different suffix if
coarser or finer granularity is required.</p>

<p>If you have many files that should go into the files directory, consider
creating subdirectories such as <path>files/mypkg-1.0</path> and putting the
relevant files in the appropriate subdirectory.  If you use this method, you do
not need to add suffix the names of the files in this directory, which is often
more convenient.</p>

</body>
</section>
</chapter>

<chapter>
<title>ebuild scripts</title>
<section>
<title>Introduction</title>
<body>

<p>ebuild scripts are the basis for the entire portage system. They contain all
the information required to download, unpack, compile and install a set of
sources, as well as how to perform any optional pre/post install/removal or
configuration functions.  While most of Portage is written in Python, the ebuild
scripts themselves are written in bash, since using bash allows us to call commands
as we would from the command-line.  One of the important design principles behind
ebuild scripts is to have the commands therein be analogs of those one would type
on the command-line if installing the package manually.  For this purpose, having
bash syntax is a good thing.</p>

<p>
Ebuild scripts are interpreted by the <c>ebuild</c> and <c>emerge</c> commands.
Think of the <c>ebuild</c> command as a low-level building tool.  It can build
and install a single ebuild, but no more.  It will check to see if dependencies
are satisfied, but it will not attempt to auto-resolve them.  On the other hand
<c>emerge</c> is a high level engine for <c>ebuild</c>, and has the ability to
auto-merge dependencies if needed, perform "pretend" merges so that user can see
what ebuilds <e>would</e> be merged, and more.  Generally, <c>emerge</c> blows
<c>ebuild</c> out of the water except in one area.  With <c>ebuild</c>, you can
incrementally step through the various parts of a package installation (fetching,
unpacking, compiling, installing and merging) one at a time.  For developers,
this is an invaluable debugging tool, because it allows you to isolate ebuild
problems to a specific portion of the build process.
</p>

</body>
</section>

<section>
<title>Naming ebuild Files</title>
<body>

<p>Ebuild file names consist of four logical sections:</p>

<p>The first section is the package name, which should only contain lowercase
letters, the digits 0-9, and any number of single hyphen ('-') characters.
Some examples are <c>util-linux</c>, <c>sysklogd</c> and <c>glibc</c>.  </p>

<p>The second section is the version of the package, which should normally be
same as the version on the main source tarball. The version is normally made up
of two or three numbers separated by periods, such as <c>1.2</c> or
<c>4.5.2</c> (although very long period-separated number sequences <e>are</e>
supported), and may have a single letter immediately following the last digit,
e.g., <c>1.4b</c> or <c>2.6h</c>. The package version is joined to the package
name with a hyphen; for example: <c>foo-1.0</c>, <c>bar-2.4.6</c>, etc.</p>

<impo>If you're thinking of using a trailing letter in your version string,
note that the trailing letter should <e>not</e> be used to signify alpha or beta
status for the package, since alphas and betas are <e>prereleases</e> and
letter revisions are <e>newer versions</e>.  This is an important distinction
because Portage uses an ebuild's version number to determine if it is newer
or older than other packages with the same category and name.  It's very
important that version numbers faithfully represent the version of the
package so that Portage properly performs its dependency checking duties.</impo>

<p>The third (optional) section contains a special suffix; either
<c>_alpha</c>, <c>_beta</c>, <c>_pre</c> or <c>_rc</c>. Any of these suffixes
may be immediately followed my a number, e.g., <c>linux-2.4.0_pre10</c>;
Assuming identical version parts, an <c>_alpha</c> package is older than
<c>_beta</c>, <c>_beta</c> older than <c>_pre</c>, and <c>_pre</c> older than
<c>_rc</c>.
</p>

<note>An <c>_rc</c> package is older than a package without an underscore
prefix (i.e. <c>linux-2.4.0</c>), and <c>linux-2.4.0</c> is older than a
package with a single letter prefix, i.e. <c>linux-2.4.0b</c>.  As you would
expect, the <c>linux-2.4.0b</c> package is considered older than
<c>linux-2.4.0c</c>.  Again this versioning information is important, as
Portage uses it internally to determine whether one package or ebuild is newer
than another with the same category and name.</note>

<p>The fourth (optional) section of the package name is the Gentoo Linux-specific <e>revision</e> number,
which is specified by <c>-r#</c>, where <c>#</c> is an integer,
e.g. <c>package-4.5.3-r3</c>. This revision number is independent of
the version of the source tarball and is used to inform people that
a new and improved Gentoo Linux rev of a particular package is available.
</p>

<p>
If you make non-trivial improvements to an existing ebuild file, you should
copy the ebuild file to a new file with the revision number incremented by 1.
Initial releases normally have no revision number, e.g.
<path>package-4.5.3</path> and are considered by Portage to have a a revision
number of zero.  This means that counting goes as follows: <c>1.0</c> (initial
version), <c>1.0-r1</c>, <c>1.0-r2</c>, etc.
</p>

<p>And I suppose that we actually have a <e>fifth</e> section of the ebuild name -- the
<c>.ebuild</c> extension itself.
</p>

</body>
</section>

<section>
<title>Contents of an ebuild File</title>
<body><p>1. Variable Settings:</p>
<p>The first part of every ebuild file is made up of a number of
variable settings. The variables you can set are:</p>
<table>
<tr><ti><c>P</c></ti><ti>the name and version of the package; you should not need to set this, as it is determined from the name of the ebuild file</ti></tr>
<tr><ti><c>A</c></ti><ti>the name (without the path) of the main archive file for your package</ti></tr>
<tr><ti><c>S</c></ti><ti>the source directory for your package; normally ${WORKDIR}/${P}</ti></tr>
<tr><ti><c>DESCRIPTION</c></ti><ti>a short, one line description of your package</ti></tr>
<tr><ti><c>SRC_URI</c></ti><ti>the URIs for every source file in your package, separated by whitespace; normally the first one is something like &quot;ftp://ftp.company.com/pub/somepackage/${A}&quot;</ti></tr>
<tr><ti><c>HOMEPAGE</c></ti><ti>your package's homepage</ti></tr>
<tr><ti><c>DEPEND</c></ti><ti>build dependencies; see the section <uri link="#dependencies">Package Dependencies</uri></ti></tr>
<tr><ti><c>RDEPEND</c></ti><ti>runtime dependencies; see the section <uri link="#dependencies">Package Dependencies</uri></ti></tr>
</table>
<p>2. ebuild Functions</p>
<p>There are a number of different functions that you can define in ebuild files that control the building and installation process of your package.</p>
<table>
<tr><ti><c>pkg_setup</c></ti><ti>Use this function to perform any miscellaneous prerequisite tasks.  This might include adding system accounts or checking for an existing configuration file.  This function must return 0 in order for processing to proceed.</ti></tr>
<tr><ti><c>src_unpack</c></ti><ti>Use this function to unpack your sources and run autoconf/automake/etc. if necessary. By default, it unpacks the packages in <c>${A}</c>. The default starting directory is <c>${WORKDIR}</c>.</ti></tr>
<tr><ti><c>src_compile</c></ti><ti>Use this function to configure and build the package. Default starting directory is <c>${S}</c>.</ti></tr>
<tr><ti><c>src_install</c></ti><ti>Use this function install the package to an image in <c>${D}</c>. If your package uses automake, you can do this simply with <c>make DESTDIR=${D} install</c>. <e>Make sure your package installs all its files using <c>${D}</c> as the root!</e></ti></tr>
<tr><ti><c>pkg_preinst</c></ti><ti>The commands in this function are run just prior to merging a package image into the filesystem.</ti></tr>
<tr><ti><c>pkg_postinst</c></ti><ti>The commands in this function are run just following merging a package image into the filesystem.</ti></tr>
<tr><ti><c>pkg_prerm</c></ti><ti>The commands in this function are run just prior to unmerging a package image from the filesystem.</ti></tr>
<tr><ti><c>pkg_postrm</c></ti><ti>The commands in this function are run just following unmerging a package image from the filesystem.</ti></tr>
<tr><ti><c>pkg_config</c></ti><ti>You use this function to setup an initial configuration for the package after it's installed. All paths in this function should be prefixed with ${ROOT}.  This function is <e>only</e> executed if and when the user runs: <c>ebuild /var/db/pkg/${CATEGORY}/${PF}/${PF}.ebuild config</c>.</ti></tr>
</table>
</body>
</section>

<section>
<title>Rules for writing an ebuild File</title>
<body>
<p>Since ebuild files are really just shell scripts, you should
use your editor's shell-script mode for editing them. You should use
proper indentation, using only tab characters -- no spaces. Make sure
you set up your editor to put tabstops at 4 spaces. Always make sure
you use braces around your environment variables; e.g. <c>${P}</c>
instead of just <c>$P</c>.</p>

<p>Long lines are wrapped with ' \', thus:</p>
<pre>
./configure \
	--prefix=/usr || die "configure failed"
</pre>

<p>For further details, refer to <path>skel.ebuild</path> (usually
residing in /usr/portage).</p>

<p>If you're using Vim, you can put the following snippet at the bottom
of your .vimrc to make sure you're using the right settings when editing
 anything Gentoo-related.</p>

<pre>
if (getcwd() =~ 'gentoo-x86\|gentoo-src\|portage')
	set tabstop=4 shiftwidth=4 noexpandtab
endif
</pre>
<p>TODO: add stuff about emacs.</p></body>
</section>

<section>
<title><c>USE</c> Variables</title>

<body>

<p>The purpose of USE variables is to allow you to configure Portage to globally
and automatically enable or disable certain <e>optional build-time</e>
features.  Here's an example.  Let's say you're a GNOME fan, and you'd like any
ebuild that has the option of compiling-in optional GNOME support to do
so.  In this case, you'd add <c>gnome</c> to the <c>USE</c> variable in
<path>/etc/make.conf</path>, and then Portage will automatically add optional
GNOME functionality to packages if it is available.  Likewise, if you don't
want optional GNOME features to be added to your ebuilds if they are available,
simply edit <path>/etc/make.conf</path> and make sure that <c>gnome</c> is
<e>not</e> set in the <c>USE</c> variable.  Gentoo Linux has an almost
overwhelming number of USE options, allowing you to have your system configured
exactly the way you want it.

<note> If you unset a USE variable (for example, removing <c>gnome</c> from
<c>USE</c>), this will only instruct Portage to disable <e>optional</e>
build-time support for GNOME.  However, if you <c>emerge</c> an ebuild that
<e>requires</e> GNOME, the package will obviously have GNOME support enabled, as you
would expect.  This also means that
GNOME will be automatically installed (as a dependency) if it hasn't been already.  That's why
it's always a good idea to do an <c>emerge --pretend</c> before doing the
"real" <c>emerge</c>; that way, you'll always know that you're going to get!
</note>

In your own ebuilds, you can check whether a USE variable is set by using the
<c>use &lt;variable&gt;</c> command. The <c>use</c> command prints out the name
of every variable that is present in both <c>USE</c> and its command line. You
would normally use this command as follows:</p>

<p><c>if [ &quot;`use X`&quot; ]; then commands; fi</c></p>


<p>USE variables can also be used to set dependencies. For example, you may
only want to require a package if a certain USE variable is set. This is done
by using the syntax <c>variable? ( mycat/mypackage-1.0-r1 )</c> in the DEPEND
variable for your ebuild. In this example, <c>mycat/mypackage-1.0-r1</c> will
only be required if <c>variable</c> is present in <c>USE</c></p>

<p>Here's an important tip about how to use <c>USE</c>.  Most of the time,
a package will have a <c>./configure</c> script used to perform configuration
steps.  Generally, if your ebuild uses <c>./configure</c>, any optional build-time
functionality will be enabled or disabled by passing the appropriate arguments to
the <c>./configure</c> command.  Here's the best way to handle this.  First,
find out whether the particular <c>./configure</c> option that you want to add
<c>USE</c> support for is is <e>enabled</e> or <e>disabled</e> by default.  If
it's <e>enabled</e> by default, then do things as follows:</p>
<pre>
DEPEND="gnome? ( &gt;=gnome-base/gnome-1.4 )
	mysql? ( &gt;=dev-db/mysql-3.23.49 )"

src_compile() {
	local myconf
	use gnome || myconf="--disable-gnome"
	use mysql || myconf="${myconf} --disable-mysql"

	./configure ${myconf} --prefix=/usr --host=${CHOST} || die
	emake || die
}
</pre>
<p>
Above, we only check to see if the <c>gnome</c> and <c>mysql</c> <c>USE</c> variables
are disabled.  The <c>use gnome || </c> part tests whether <c>gnome</c> is in the <c>USE</c>
variable, and if not, then sets <c>myconf="--disable-gnome"</c>.  There's no need to explicitly
enable GNOME or MySQL, since for this package, they are both enabled by
default.  However, if a particular feature is <e>disabled</e> by default, you can
use this approach:</p>
<pre>
DEPEND="gnome? ( &gt;=gnome-base/gnome-1.4 )
	mysql? ( &gt;=dev-db/mysql-3.23.49 )"

src_compile() {
	local myconf
	use gnome &amp;&amp; myconf="--enable-gnome"
	use mysql &amp;&amp; myconf="${myconf} --enable-mysql"

	./configure ${myconf} --prefix=/usr --host=${CHOST} || die
	emake || die
}
</pre>
<p>This time, we only explicitly enable GNOME and MySQL support if it's respective <c>USE</c> variable
has been set.  The <c>use mysql &amp;&amp;</c> part tests whether <c>mysql</c> is in the <c>USE</c>
variable, and if so, then sets <c>myconf="${myconf} --enable-mysql"</c>.</p>

<p>The following USE variables are currently used in Gentoo Linux:</p>

<table>
<tr><th>Variable</th><th>Description</th></tr>
<tr><ti>3dfx</ti><ti>Adds support for 3dfx video cards to XFree86. See: voodoo3</ti></tr>
<tr><ti>3dnow</ti><ti>dds support for 3dnow multimedia processor instructions</ti></tr>
<tr><ti>aalib</ti><ti>Adds support for media-libs/aalib (ASCI-Graphics Library)</ti></tr>
<tr><ti>acl</ti><ti>Adds support for sys-apps/acl (XFS dump/restore utilities)</ti></tr>
<tr><ti>afs</ti><ti>Adds OpenAFS support (distributed file system)</ti></tr>
<tr><ti>alsa</ti><ti>Adds support for media-libs/alsa-lib (Advanced Linux Sound Architecture</ti></tr>
<tr><ti>apm</ti><ti>Adds APM (Advanced Power Management) support</ti></tr>
<tr><ti>arts</ti><ti>Adds support for aRts: the KDE sound daemon</ti></tr>
<tr><ti>atlas</ti><ti>Adds support for atlas instead of blas in dev-lang/</ti></tr>
<tr><ti>avi</ti><ti>Adds Win32 AVI support and also adds avifile (Library for avi) support</ti></tr>
<tr><ti>berkdb</ti><ti>Adds support for sys-libs/db (Berkeley DB for MySQL)</ti></tr>
<tr><ti>bonobo</ti><ti>Adds support for gnome-base/bonobo (Gnome CORBA interfaces)</ti></tr>
<tr><ti>crypt</ti><ti>Add support for encryption -- using mcrypt or gpg where applicable</ti></tr>
<tr><ti>cups</ti><ti>Add support for CUPS (Common Unix Printing System</ti></tr>
<tr><ti>dga</ti><ti>Adds DGA Support (Xfree86 ) (DGA=Direct Graphic Access)</ti></tr>
<tr><ti>directfb</ti><ti>Adds support for DirectFB layer (library for FB devices)</ti></tr>
<tr><ti>doc</ti><ti>Adds extra documentation generated by fe.x gtk-doc</ti></tr>
<tr><ti>dvd</ti><ti>Adds support for DVDs</ti></tr>
<tr><ti>encode</ti><ti>Adds support for MEncoder or LaME encoder, wherever applicable</ti></tr>
<tr><ti>esd</ti><ti>Adds support for media-sound/esound (Enlightened Sound Daemon)</ti></tr>
<tr><ti>evo</ti><ti>Adds support for evolution in gnumeric</ti></tr>
<tr><ti>fbcon</ti><ti>Adds framebuffer support for the console, via the kernel</ti></tr>
<tr><ti>flash</ti><ti>Adds support for creating flash files using Ming</ti></tr>
<tr><ti>gb</ti><ti>Adds support for Gnome Basic to gnumeric</ti></tr>
<tr><ti>gd</ti><ti>Adds support for sys-libs/gdbm (GNU database libraries)</ti></tr>
<tr><ti>gdbm</ti><ti>Adds support for sys-libs/gdbm (GNU database libraries)</ti></tr>
<tr><ti>ggi</ti><ti>Adds support for media-libs/libggi (non-X video api/drivers)</ti></tr>
<tr><ti>ggz</ti><ti>Adds support for the Gnu Gaming Zone - http://ggz.sf.net</ti></tr>
<tr><ti>gif</ti><ti>Adds GIF image support</ti></tr>
<tr><ti>gnome</ti><ti>Adds GNOME support</ti></tr>
<tr><ti>gphoto2</ti><ti>Adds digital camera support</ti></tr>
<tr><ti>gpm</ti><ti>Adds support for sys-libs/gpm (Console-based mouse driver)</ti></tr>
<tr><ti>gtk</ti><ti>Adds support for x11-libs/gtk+ (The GIMP Toolkit)</ti></tr>
<tr><ti>gtkhtml</ti><ti>Adds support for gnome-extra/gtkhtml</ti></tr>
<tr><ti>guile</ti><ti>Adds support for dev-util/guile (interpreter for Scheme)</ti></tr>
<tr><ti>icc</ti><ti>Use the Intel C++ Compiler if the package supports it</ti></tr>
<tr><ti>icc-pgo</ti><ti>Enable PGO data generation or use when use icc.</ti></tr>
<tr><ti>imap</ti><ti>Adds support for IMAP</ti></tr>
<tr><ti>imlib</ti><ti>Adds support for media-libs/imlib (Image loading and rendering library)</ti></tr>
<tr><ti>innodb</ti><ti>Adds innodb support for mySQL (transaction support)</ti></tr>
<tr><ti>ipv6</ti><ti>Adds support for IP version 6</ti></tr>
<tr><ti>java</ti><ti>Adds support for Java</ti></tr>
<tr><ti>jpeg</ti><ti>Adds JPEG image support</ti></tr>
<tr><ti>kde</ti><ti>Adds support for kde-base/kde (K Desktop Enviroment)</ti></tr>
<tr><ti>lcms</ti><ti>Adds lcms support to media-gfx/imagemagick (Color management)</ti></tr>
<tr><ti>ldap</ti><ti>Adds LDAP support (Lightweight Directory Access Protocol)</ti></tr>
<tr><ti>libg++</ti><ti>Adds C++ modules in dev-db/postgresql (libpq++)</ti></tr>
<tr><ti>libgda</ti><ti>Adds GNU Data Access (CORBA wrapper) support for gnumeric</ti></tr>
<tr><ti>libwww</ti><ti>Adds libwww support (General purpose WEB API)</ti></tr>
<tr><ti>matrox</ti><ti>Adds Matrox MGA support to mplayer</ti></tr>
<tr><ti>mikmod</ti><ti>Adds libmikmod support to allow playing of SoundTracker-style music files</ti></tr>
<tr><ti>mmx</ti><ti>Adds support for optimizations for Pentium MMX and Athlon class processors</ti></tr>
<tr><ti>motif</ti><ti>Adds motif support (Open Motif)</ti></tr>
<tr><ti>mozaccess-builtin</ti><ti>Adds text-to-speech and eventually braille support mozilla</ti></tr>
<tr><ti>mozctl</ti><ti>Adds Pango like module to mozilla (???)</ti></tr>
<tr><ti>mozilla</ti><ti>Adds mozilla support</ti></tr>
<tr><ti>mozirc</ti><ti>Adds IRC (Internet Relay Chat) module to mozilla</ti></tr>
<tr><ti>mozxmlterm</ti><ti>Adds Xterm like terminal with XML support to mozilla</ti></tr>
<tr><ti>mpeg</ti><ti>Adds libmpeg3 support to various packages</ti></tr>
<tr><ti>mysql</ti><ti>Adds mySQL support</ti></tr>
<tr><ti>nas</ti><ti>Adds support for network audio sound</ti></tr>
<tr><ti>ncurses</ti><ti>Adds ncurses support (console display library)</ti></tr>
<tr><ti>nls</ti><ti>Adds Native Language Support (using gettext - GNU locale utilities)</ti></tr>
<tr><ti>nocardbus</ti><ti>Disables cardbus support in pcmcia-cs</ti></tr>
<tr><ti>odbc</ti><ti>Adds ODBC Support (Open DataBase Connectivity)</ti></tr>
<tr><ti>oggvorbis</ti><ti>Adds support for the OggVorbis audio encoding</ti></tr>
<tr><ti>opengl</ti><ti>Adds support for OpenGL</ti></tr>
<tr><ti>oss</ti><ti>Adds support for OSS (Open Sound System)</ti></tr>
<tr><ti>pam</ti><ti>Adds support PAM (Pluggable Authentication Modules)</ti></tr>
<tr><ti>pcmcia</ti><ti>Adds support for PCMCIA slots/devices found on laptop computers</ti></tr>
<tr><ti>pda</ti><ti>Adds support for portable devices.</ti></tr>
<tr><ti>pdflib</ti><ti>Adds support for PDF (Portable Document Format)</ti></tr>
<tr><ti>perl</ti><ti>Adds support/bindings for the Perl language</ti></tr>
<tr><ti>pic</ti><ti>Adds PIC support to gcc (???)</ti></tr>
<tr><ti>plotutils</ti><ti>Adds plotutils support to gnuplot (library for 2-D vector graphics)</ti></tr>
<tr><ti>png</ti><ti>Adds support for libpng (PNG images)</ti></tr>
<tr><ti>pnp</ti><ti>Adds support for PNP in pcmcia-cs (Plug-N-Play)</ti></tr>
<tr><ti>postgres</ti><ti>Adds support for the postgresql database</ti></tr>
<tr><ti>python</ti><ti>Adds support/bindings for the Python language</ti></tr>
<tr><ti>qt</ti><ti>Adds support for the Qt library</ti></tr>
<tr><ti>qtmt</ti><ti>Adds support for multithreaded QT</ti></tr>
<tr><ti>quicktime</ti><ti>Adds support for OpenQuickTime</ti></tr>
<tr><ti>readline</ti><ti>enables support for libreadline, a GNU line-editing library that most everyone wants</ti></tr>
<tr><ti>ruby</ti><ti>Adds support/bindings for the Ruby language</ti></tr>
<tr><ti>samba</ti><ti>Adds support for SAMBA</ti></tr>
<tr><ti>sdl</ti><ti>Adds support for Simple Direct Layer (media library)</ti></tr>
<tr><ti>slang</ti><ti>Adds support for the slang text display library (it's like ncurses, but different)</ti></tr>
<tr><ti>slp</ti><ti>Adds Service Locator Protocol support to CUPS</ti></tr>
<tr><ti>snmp</ti><ti>Adds support for the Simple Network Management Protocol if available</ti></tr>
<tr><ti>socks5</ti><ti>Adds support for the socks5 proxy</ti></tr>
<tr><ti>spell</ti><ti>Adds dictionary support</ti></tr>
<tr><ti>sse</ti><ti>fast floating point optimisation for Pentium class chips</ti></tr>
<tr><ti>ssl</ti><ti>Adds support for Secure Socket Layer connections</ti></tr>
<tr><ti>static</ti><ti>Causes things to be statically linked instead of dynamically</ti></tr>
<tr><ti>svga</ti><ti>Adds support for SVGAlib (graphics library)</ti></tr>
<tr><ti>tcltk</ti><ti>Support for Tcl and/or Tk</ti></tr>
<tr><ti>tcpd</ti><ti>Adds support for TCP wrappers</ti></tr>
<tr><ti>tetex</ti><ti>Adds support for teTeX</ti></tr>
<tr><ti>tiff</ti><ti>Adds support for the tiff image format</ti></tr>
<tr><ti>truetype</ti><ti>Adds support for FreeType and/or FreeType2 fonts</ti></tr>
<tr><ti>trusted</ti><ti>Builds trusting versions of the pcmcia-cs programs</ti></tr>
<tr><ti>voodoo3</ti><ti>Adds support for 3Dfx's Voodoo3 video chipset, else defaults to Voodoo4/5 support if not in USE</ti></tr>
<tr><ti>X</ti><ti>Adds support for XFree86</ti></tr>
<tr><ti>xface</ti><ti>Adds xface support -- only in use for sylpheed and sylpheed-claws</ti></tr>
<tr><ti>xml</ti><ti>Check/Support flag for XML library (version 1)</ti></tr>
<tr><ti>xml2</ti><ti>Check/Support flag for XML library (version 2)</ti></tr>
<tr><ti>xmms</ti><ti>Check/Support for XMMS (X MultiMedia System) player</ti></tr>
<tr><ti>xv</ti><ti>Adds in optional support for the Xvideo extension (an X API for video playback)</ti></tr>
<tr><ti>zeo</ti><ti>Adds support for Zope Enterprise Objects</ti></tr>
</table>
</body>
</section>
</chapter>

<chapter>
<title>Filesystem Locations</title>

<section>
<title>Introduction to the FHS</title>
<body>
<p>The filesystem layout standards used in Gentoo Linux closely follow the FHS,
short for <e>Filesystem Hierarchy Standard</e>. A simplified
description of the standard is given here; for a complete
specification go to <uri>http://www.pathname.com/fhs/</uri>.</p>
<note> The <path>/opt</path> hierarchy is addressed in section 3.12 of the FHS.
Section 4.4 deals with the <path>/usr/X11R6</path> directory.  KDE and GNOME are
not specifically addressed, and are in fact not even mentioned in the current
version of the FHS.
</note>
</body>
</section>

<section>
<title>How to fit your packages into the filesystem</title>
<body><p>Usually, if the package uses autoconf and automake, the
default installation destinations are mostly correct, with a few exceptions:</p>
<ul>

<li>If you're installing a program into <path>/bin</path>, <path>/sbin</path>,
<path>/usr/bin</path> or <path>/usr/sbin</path>, then the program's
corresponding man page should be installed into the <path>/usr/share/man</path>
tree.  This can often be accomplished by specifying a  <c>./configure
--mandir=/usr/share/man</c> in the ebuild.</li>

<li>GNU info files should always be installed to <path>/usr/share/info</path>,
<e>even if the info files are about X11, GNOME or KDE-specific programs or
tools</e>.  Make a note: <path>/usr/share/info</path> is the <e>only</e>
official location for GNU info files.  Since most <c>./configure</c> scripts
default to installing GNU info files in <c>/usr/info</c>, it's often necessary
to call <c>./configure</c> with the <c>--infodir=/usr/share/info</c> argument.</li>

<li>Documentation files are installed in <path>/usr/share/doc</path>, into a
subdirectory reflecting the name, version and revision of the particular
program. This applies to all programs: GNOME, KDE, X11 and console alike.
However, some programs may install additional documentation and support files
into a <path>/usr/share</path> hierarchy for their own purposes.
</li>

<li>X11-specific programs and libraries should always be installed into <path>/usr</path>, not
directly into <path>/usr/X11R6</path>.  We reserve the <path>/usr/X11R6</path> hierarchy for
the X Window System, Version 11 Release 6 <e>itself</e>.  This is perhaps a more to-the-letter
interpretation of the FHS than some other distributions have made.</li>

<li>GNOME and KDE programs, similarly, should always be installed into
<path>/usr</path>.</li>

</ul>
<impo> Some distributions choose to install GNOME and KDE into <path>/opt</path>. There
exists no standard for these desktop environments in terms of where to actually install
their files. In the interests of simplicity and consistency, we elect to install all
KDE and GNOME packages into the <path>/usr</path> hierarchy.</impo>

<p>In general, you should have ebuilds install their files into the <path>/usr</path>
tree.  <e>Some</e> programs can be compiled and linked with or without GNOME, KDE and X11 libraries,
which can cause confusion.  Our solution is to install everything into <path>/usr</path>
which avoids ambiguity and needless complexity for ebuild authors.  The location in which to
install a program's files should <e>not</e> depend on the presence or abscence of specific
<c>USE</c> variables.  Therefore, the ebuilds in the portage tree <e>almost always</e>
install into the <path>/usr</path> hierarchy exclusively.</p>

<note>The <path>/opt</path> directory is reserved in Gentoo Linux for binary-only packages.
Examples include mozilla-bin, acroread, netscape and realplayer.  Packages that get
installed here will usually require a <path>/etc/env.d/foo</path> stub file.  This is
so that paths and additional variables can be included into the environment.</note>

</body>
</section>
</chapter>

<chapter>
<title>The Portage scripts and utilities</title>

<section>
<title>Public scripts</title>
<body><p>These are scripts used by the system-administrator to install and remove packages, and maintain the package database.</p>
<p><c>ebuild</c> is the main engine of the Portage system; it performs all major tasks such as unpacking, compiling, installing, merging, and unmerging packages. It is called using the command: <c>ebuild path/to/package.ebuild command</c>. The commands available are:</p>
<table>
<tr><th>Command</th><th>Description</th><th>Related <c>ebuild</c> Function</th></tr>
<tr><ti>*<c>setup</c></ti><ti>performs any miscellaneous commands required before the ebuild can proceed</ti><ti><c>pkg_setup</c></ti></tr>
<tr><ti><c>depend</c></ti><ti>displays the dependencies required to build the package</ti><ti>n/a</ti></tr>
<tr><ti><c>check</c></ti><ti>checks that the package dependencies are fulfilled</ti><ti>n/a</ti></tr>
<tr><ti><c>rcheck</c></ti><ti>checks that the package runtime dependencies are fulfilled</ti><ti>n/a</ti></tr>
<tr><ti><c>merge</c></ti><ti>unpacks, compiles, installs, and merges the package into your filesystem</ti><ti>n/a</ti></tr>
<tr><ti>*<c>qmerge</c></ti><ti>merges the package into your filesystem, assuming that the the unpack, compile, and install stages have already been executed</ti><ti>n/a</ti></tr>
<tr><ti>*<c>unpack</c></ti><ti>unpacks the source tarballs into the work directory</ti><ti><c>src_unpack</c></ti></tr>
<tr><ti>*<c>compile</c></ti><ti>compiles the package</ti><ti><c>src_compile</c></ti></tr>
<tr><ti><c>rpm</c></ti><ti>creates an RPM from the package</ti><ti>n/a</ti></tr>
<tr><ti><c>package</c></ti><ti>creates a Gentoo <c>tbz2</c> package</ti><ti>n/a</ti></tr>
<tr><ti>*<c>prerm</c></ti><ti>executes the pre-removal stage of the package</ti><ti><c>pkg_prerm</c></ti></tr>
<tr><ti>*<c>postrm</c></ti><ti>executes the post-removal stage of the package</ti><ti><c>pkg_postrm</c></ti></tr>
<tr><ti>*<c>preinst</c></ti><ti>executes the pre-installation stage of the package</ti><ti><c>pkg_preinst</c></ti></tr>
<tr><ti>*<c>postinst</c></ti><ti>executes the post-installation stage of the package</ti><ti><c>pkg_postinst</c></ti></tr>
<tr><ti><c>config</c></ti><ti>sets up a default configuration once the package is merged</ti><ti><c>pkg_config</c></ti></tr>
<tr><ti>*<c>touch</c></ti><ti>updates the mtimes for each source archive in the package</ti><ti>n/a</ti></tr>
<tr><ti>*<c>clean</c></ti><ti>cleans the work directory for the package</ti><ti>n/a</ti></tr>
<tr><ti>*<c>fetch</c></ti><ti>fetches the package source tarballs</ti><ti>n/a</ti></tr>
<tr><ti>*<c>digest</c></ti><ti>creates a digest file for the package</ti><ti>n/a</ti></tr>
<tr><ti>*<c>install</c></ti><ti>installs the package into the image directory</ti><ti><c>src_install</c></ti></tr>
<tr><ti><c>unmerge</c></ti><ti>unmerges the package from your filesystem</ti><ti>n/a</ti></tr>
</table>
<p>Note: commands with an asterisk (*) are normally only used by the developer.</p>

<p><c>emerge</c> recursively merges a package and all of its dependencies into your filesystem.
This command has many options, try <c>emerge --help</c> for a list of them.</p>

<p><c>env-update</c> updates the configuration files (including, but not limited to <path>/etc/ld.so.conf</path> and <path>/etc/profile.env</path>) to include changes made by installed packages.</p>
</body>
</section>

<section>
<title>Private Scripts and Commands</title>
<body>

<p>These are scripts you can use in your ebuild files to perform common tasks.</p>

<p>For more detailed instructions, look at the scripts themselves in <path>/usr/lib/portage/bin</path>.</p>

<table>
<tr><ti>into</ti><ti>sets the target prefix (<path>DESTTREE</path>) for <c>dobin</c>, <c>dolib</c>, <c>dolib.a</c>, <c>dolib.so</c>, <c>domo</c>, <c>dosbin</c></ti></tr>
<tr><ti>dobin</ti><ti>installs the specified binaries into <path>DESTTREE/bin</path></ti></tr>
<tr><ti>dodoc</ti><ti>installs the specified files into the package's documentation directory (<path>/usr/share/doc/${PF}/DOCDESTTREE</path>) where <path>DOCDESTREE</path> is settable with <c>docinto</c></ti></tr>
<tr><ti>doexe</ti><ti>installs the specified files with mode <e>EXEOPTIONS</e> into <path>EXEDESTTREE</path>. <e>EXEOPTIONS</e> defaults to -m0755 and is settable via the <c>exeopts</c> command.  <path>EXEDESTTREE</path> is settable via the <c>exeinto</c> command.</ti></tr>
<tr><ti>dohard</ti><ti>creates a hardlink, handles ${D} transparently</ti></tr>
<tr><ti>dohtml</ti><ti>installs the specified files and directories into <path>/usr/share/doc/${PF}/html</path></ti></tr>
<tr><ti>doinfo</ti><ti>installs the specified files into /usr/share/info, then compresses them with gzip</ti></tr>
<tr><ti>doins</ti><ti>installs the specified files with mode <e>INSOPTIONS</e> into <path>INSDESTTREE</path>. <e>INSOPTIONS</e> defaults to -m0644 and is settable via the <c>insopts</c> command.  <path>INSDESTTREE</path> is settable via the <c>insinto</c> command.</ti></tr>
<tr><ti>dolib</ti><ti>installs the specified libraries with mode <e>LIBOPTIONS</e> into <path>DESTTREE/lib</path>. <e>LIBOPTIONS</e> defaults to -m0644 and is settable via the <c>libopts</c> command</ti></tr>
<tr><ti>dolib.a</ti><ti>installs the specified libraries into <path>DESTTREE/lib</path> with mode 0644</ti></tr>
<tr><ti>dolib.so</ti><ti>installs the specified libraries into <path>DESTTREE/lib</path> with mode 0755</ti></tr>
<tr><ti>doman</ti><ti>installs the specified files into <path>/usr/share/man/manX</path>, according to the suffix X</ti></tr>
<tr><ti>domo</ti><ti>used for manually installing .mo files, which are used for storing localized string data</ti></tr>
<tr><ti>donewins</ti><ti>same as <c>newins</c>; its actually a symlink to it.  this is deprecated and exists for compatibility with old ebuilds.  use <c>newins</c> instead</ti></tr>
<tr><ti>dosbin</ti><ti>installs a binary into <path>DESTTREE/sbin</path>, marking it as executable</ti></tr>
<tr><ti>dosed</ti><ti>removes all occurences of ${D} (the installation prefix path) in the specified files</ti></tr>
<tr><ti>dosym</ti><ti>creates a symlink, handles ${D} transparently</ti></tr>
<tr><ti>emake</ti><ti>runs a parallell make. some projects cannot be made in parallell; use make</ti></tr>
<tr><ti>fowners</ti><ti>applies the specified ownership (first argument) to the specified file (second argument) via the chown command, handles ${D} transparently</ti></tr>
<tr><ti>fperms</ti><ti>applies the specified permissions (first argument) to the specified file (second argument) via the chmod command, handles ${D} transparently</ti></tr>
<tr><ti>newbin</ti><ti>wrapper around <c>dobin</c> which installs the specified binary (first argument) in <path>DESTTREE/bin</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newdoc</ti><ti>wrapper around <c>dodoc</c> which installs the specified file (first argument) in <path>/usr/share/doc/${PF}/DOCDESTTREE</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newexe</ti><ti>wrapper around <c>doexe</c> which installs the specified file with mode <e>EXEOPTIONS</e> into <path>EXEDESTTREE</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newins</ti><ti>wrapper around <c>doins</c> which installs the specified file with mode <e>INSOPTIONS</e> into <path>INSDESTTREE</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newlib.a</ti><ti>wrapper around <c>dolib.a</c> which installs the specified library into <path>DESTTREE/lib</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newlib.so</ti><ti>wrapper around <c>dolib.so</c> which installs the specified library into <path>DESTTREE/lib</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newman</ti><ti>wrapper around <c>doman</c> which installs the specified file into <path>/usr/share/man/manX</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newsbin</ti><ti>wrapper around <c>dosbin</c> which installs the specified file into <path>DESTTREE/sbin</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>pmake</ti><ti>deprecated; use emake instead</ti></tr>
<tr><ti>prepalldocs</ti><ti>recursively gzips all doc files in <path>/usr/share/doc</path>, transparently fixing up any symlink paths</ti></tr>
<tr><ti>prepallinfo</ti><ti>recursively gzips all info files in <path>/usr/share/info</path></ti></tr>
<tr><ti>prepallman</ti><ti>recursively gzips all man pages in <path>/opt/*/man/*</path>, <path>/usr/share/man/*</path>, <path>/usr/local/man/*</path>, <path>/usr/X11R6/share/man/*</path> and transparently fixes up any symlink paths</ti></tr>
<tr><ti>prepall</ti><ti>wrapper around <c>prepallman</c>, <c>prepallinfo</c> and <c>prepallstrip</c>.  also ensures all libraries in <path>/opt/*/lib</path>, <path>/lib</path>, <path>/usr/lib</path> and <path>/usr/X11R6/lib</path> are executable.  also moves any stray aclocal macros into <path>/usr/share/aclocal</path></ti></tr>
<tr><ti>try</ti><ti>deprecated. Use the || die construct instead.</ti></tr>
</table>
</body>
</section>
</chapter>

<chapter>
<title>Package Dependencies</title>

<section>
<title>Why dependencies are important</title>
<body>
<p>Portage is more than just a convenience script that gives you a unified
way to build any one project (program, library) from source. It will also
fetch and install any necessary dependencies if you take care to specify
these in your ebuild.</p>

<p>In the official ebuilds, all dependencies have already been specified,
so when you issue <c>emerge net-www/mozilla/mozilla-1.0</c>, Portage will
insure that all libraries necessary for Mozilla to build and run are
properly installed before Mozilla itself is built.</p>

<p>Portage even distinguishes between build-time dependencies and run-time
dependencies. (Caveat: Currently, Portage installs all build-time and run-time
dependencies and leaves it at that. At a later stage, it will be possible to
trim your installation so that only the run-time dependencies are left installed).
</p>

</body>
</section>

<section>
<title>How to Specify Dependencies in Your ebuild Files</title>
<body>
<p>The <c>DEPEND</c> variable inside your <path>foo-x.y.z.ebuild</path> tells Portage
about which packages are needed to build <path>foo</path>. The <c>RDEPEND</c> variable
specifies which packages are needed for <path>foo</path> to run.
Example:</p>
<pre>
DEPEND="virtual/glibc
        sys-libs/zlib"
RDEPEND="virtual/glibc"
</pre>

<p>This tells Portage that to build <path>foo-x.y.z</path>, the packages
<path>virtual/glibc</path> (more on  virtuals in a bit) and <path>sys-libs/zlib</path>
are needed. It does not say anything about which version of glibc or zlib that are needed,
which means "anything goes".</p>

<p>The "anything goes" is of course a bit scary, and will not work in the general case.
But for central libraries like glibc, which strives very hard to be 100% binary compatible
all the time, it actually works. For other libraries, we can of course specify version
dependencies. There are numerous ways to do this:</p>
<pre>
&gt;=sys-apps/bar-1.2
=sys-apps/baz-1.0
</pre>

<p> &gt;= and = do what you would expect; sys-apps/bar version 1.2 or newer is okay (this means that
sys-apps/bar-2.0 is okay), while sys-apps/baz version 1.0 is the only version that is accepted.</p>

<p>Portage knows of four special suffixes to a version number: <c>-rX</c>, <c>-preX</c>,
<c>-alphaX</c> and <c>-betaX</c> where X is a number (as many digits as you like). Given the
specification <c>&gt;=sys-apps/foo-1.0</c> and the files:</p>
<pre>
sys-apps/frob-1.0-r1
sys-apps/frob-1.0
sys-apps/frob-1.0_pre1
sys-apps/frob-1.0_beta1
sys-apps/frob-1.0_alpha1
</pre>
<p>Portage will arrange them internally in the order listed, and pick the one on the top. This
means it will always pick <c>_beta</c> packages over <c>_alphaX</c>, <c>_preX</c> over <c>_betaX</c>,
non-suffixed over <c>_preX</c> and <c>-rX</c> suffixed over non-suffixed.</p>

<p>Other methods of specifying version dependencies are follow:</p>
<pre>
~sys-apps/qux-1.0
=sys-apps/foo-1.2*
</pre>

<p>~sys-apps/qux-1.0 will select the newest revision of qux-1.0</p>

<p>=sys-apps/foo-1.2* will select the newest member of the 1.2 series, but will ignore
1.3 and later series. That is, foo-1.2.3 and foo-1.2.0 are both valid, while foo-1.3.3
and foo-1.3.0 are not.</p>

</body>
</section>
</chapter>

<chapter>
<title>Testing and deploying</title>

<section>
<title>ChangeLog</title>
<body>
<p>Whenever you update a (or write a new) ebuild, you must also update its (or
create a new) ChangeLog. The <path>skel.ChangeLog</path> contains a sample
ChangeLog that you can use as a basis.</p>

<p>The purpose of the ChangeLog is to document <i>what</i> is being done, 
<i>why</i> it is being done, and by <i>whom</i>. This allows both 
developers and users to trace the changes made in an easy way.</p>

<p>The ChangeLog is primarily targeted at users, so be sure to keep your
writing short, to the point, and avoid getting verbose about the internal
technical details.</p>
</body>
</section>

<section>
<title>Useful testing tools</title>
<body>
<p>We have a few useful tools to help you with writing and maintaing your
ebuilds.</p>

<ul>
<li><c>lintool</c> - Checks ebuilds, ChangeLogs and digest files for syntactic correctness.</li>
<li><c>change</c> - Can create a new ChangeLog or add an entry to an existing one.</li>
<li><c>gentool-bump-revision</c> - Developer-only tool that bumps the revision number, adds the new revision to CVS, removed the old revision and updates the ChangeLog accordingly.</li>
<li><c>repoman</c> - Developer-only tool to assist with the CVS checkin procedure.</li>
</ul>
</body>
</section>
</chapter>
</guide>
