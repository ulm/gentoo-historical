<?xml version='1.0'?>
<!DOCTYPE guide SYSTEM "../../../dtd/guide.dtd">

<guide>
<title>Env.d HOWTO </title>
<author title="Author">
<mail link="zhen@gentoo.org">John P. Davis</mail>
</author>

<abstract>
This guide will explain the meaning and use of the 
<path>/etc/env.d</path> directory and its contents.
</abstract>

<version>1.4</version>
<date>26 September, 2002</date>

<chapter>

<title>Introduction to <c>env.d</c> and Generic Variables</title>

<section>
<title>Basic Gentoo Environment Variables</title>
<body>
<p>One of the common questions that we see from Gentoo users
is "where are my environment variables, and what are they set to?". To understand
this question, first we have to know what an environment variable is.
An environment variable is set whenever the <c>export</c> command is issued.
For example, if you were to issue an <c>export EDITOR="/usr/sbin/vim" </c>, you are setting
an environment variable that tells the sytem what your default editor is vim. There
are many different kinds of environment variables that can be set on your Gentoo
system, here are some examples:
</p>

<note><c>export</c> will set the Environment Variable in the shell *and* all child processes.
If you just want to set the variable without affecting child processes, just do something like
<i>FOO="bar"</i>. </note>

<note>Your <i>00basic</i> file may differ. This is not a problem, as these variables are the 
default ones that are packaged with Gentoo. </note>

<info>These examples can be found in <path>/etc/env.d/00basic</path>. </info>

<table>
<tr><th>Variable</th><th>Function</th></tr>
<tr><ti>PATH</ti><ti>This sets the default path of where programs are found. It is ':' delimited. 
A path variable would look something like <c>PATH=/usr/local/bin:/opt/bin </c>. </ti></tr>

<tr><ti>ROOTPATH</ti><ti>This variable is like the one above, but it sets the default root for programs for
<c>root</c>. An example of this would be something like <c>ROOTPATH=/usr/local/bin:/opt/bin</c>. </ti></tr>

<tr><ti>LDPATH</ti><ti> This variable specifies what the library path is for linking. This is also ':' delimited.
An example of this would be <c>LDPATH=/usr/local/lib </c>. </ti></tr>

<tr><ti>MANPATH</ti><ti>This specifies where the manpages are stored on your machine. Its like <i>PATH</i>,
but its for the manpages. An example of this would be <c>MANPATH=/usr/share/man:/usr/local/share/man </c>.
</ti></tr>

<tr><ti>INFODIR</ti><ti>This specifies where all of your info files are kept. An example of this would be
<c>INFODIR=/usr/share/info </c>.  </ti></tr>

<tr><ti>PAGER</ti><ti>This specifies what pager is used, i.e. less or more. An example of this would be
<c>PAGER=/usr/bin/less </c>. </ti></tr>

<tr><ti>EDITOR</ti><ti>This specifies the default editor for the system. This would look something like this:
<c>EDITOR=/usr/bin/vim </c>. </ti></tr>
</table>


<p>This is an example of a <i>00basic</i> file. This just gives you an idea of what it looks like.
If your <c>00basic</c> gets wrecked, you can use this one! </p>

<pre caption = "00basic">
# Copyright 1999-2002 Gentoo Technologies, Inc.
# Distributed under the terms of the GNU General Public License, v2 or later
# $Header: /home/cvsroot/gentoo-src/rc-scripts/etc/env.d/00basic,v 1.6 2002/06/20 22:07
:37 azarah Exp $

PATH=/usr/local/bin:/opt/bin
ROOTPATH=/usr/local/bin:/opt/bin
LDPATH=/usr/local/lib
MANPATH=/usr/share/man:/usr/local/share/man
INFODIR=/usr/share/info
CVS_RSH=ssh
PAGER=/usr/bin/less
EDITOR=/usr/bin/vim
LESSOPEN="|lesspipe.sh %s"
</pre>

</body>
</section>

<section>
<title>env.d Formatting</title>

<body>
<p>The files inside of <c>env.d</c>. are arranged in a logical order so that when <c>env-update</c> is run, 
it properly orders the variables. The numbers in front of the files specify which order they are parsed,
so <i>00basic</i> will go first, then <i>01something</i> will be parsed and so on. The content inside of
the files also have a specific format: </p>

<pre caption = "Content Format">
<comment># This is a comment, just like BASH </comment>
<i>VARIABLE1=/path/to/something </i>
<comment>Some of the variables can have : delimited arguments. </comment>
<i>VAR1A=/path/to/something:/path/to/another/something </i>
<i>VARIABLE2=name_something </i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Special Variables, and How it all Comes Together </title>

<section>
<title>Special Variables </title>
<body>

<p>There are some special variables that are included in <c>env.d </c>. These include:
<i>KDEDIRS, PATH, CLASSPATH, LDPATH, MANPATH, INFODIR, ROOTPATH, CONFIG_PROTECT, CONFIG_PROTECT_MASK </i> These are special because they are processed in a special fashion and they
are put into special files, which I will explain later. </p>

<note>Some of the variables mentioned below are also mentioned above in <i>00basic</i>
This is fine because these vars can be used more than once in seperate files, more explained
below. </note>

<table>
<tr><th>Variable</th><th>Function</th></tr>
<tr><ti>KDEDIRS</ti><ti> This is the path for all of KDE's files. </ti></tr>

<tr><ti>PATH</ti><ti>Previously mentioned, ':' delimited, (see above).</ti></tr>

<tr><ti>CLASSPATH</ti><ti>Sets the path to Java classes, ':' delimited.</ti></tr>

<tr><ti>LDPATH</ti><ti>Previously mentioned (see above).</ti></tr>

<tr><ti>MANPATH</ti><ti>Previously mentioned (see above), ':' delimited.</ti></tr>

<tr><ti>INFODIR</ti><ti>Previously mentioned (see above), ':' delimited.</ti></tr>

<tr><ti>ROOTPATH</ti><ti>Previously mentioned (see above), ':' delimited.</ti></tr>

<tr><ti>CONFIG_PROTECT</ti><ti>This specifies which config files in <path>/etc </path>that you want protected 
from new ebuilds, the arguments given to this are space delimited.</ti></tr>

<tr><ti>CONFIG_PROTECT_MASK</ti><ti>This is basically the inverse of CONFIG_PROTECT, it unprotects
certain files in <path>/etc </path> that you want to be changed automatically by
the emerge process.</ti></tr>
</table>

</body>
</section>

<section>
<title>Putting Everything Together</title>
<body>

<p>Alright, so now that I have defined everything, you are probably wondering what in the world
this has to do with you and your Gentoo machine. The power of <i>env.d </i> is the power that you can
change these variables in there to whatever you need them to be. With the definitions above,
hopefully you will be able to do this. </p>

<p>Since we have a handle on what is going on, it is time to explain what happens to these variables.
When <c>env-update </c> is called, it links all of these files in order. Remember when I said that
it is alright to have multiple <i>PATH </i> variables as long as they are in different files? This is
because <c>env-update </c> will go through the files sequentially and add the paths together.
So, if you have a <i>PATH </i> for KDE, GNOME, your default <i>PATH </i>, and one for X, 
<c>env-update </c> will concatenate all of those paths together so that your default <i>PATH </i>
becomes all of those paths combined. Spiffy eh? </p>

<p>Since these variables are now linked together, it is important to note where they are stored. </p>

<note>The below files are created by running <c>env-update</c> </note>

<pre caption = "Files Created from the Summation of all files in env.d">
<i>LDPATH ----> /etc/ld.so.conf </i>
<i>CONFIG_PROTECT and CONFIG_PROTECT_MASK ----> /etc/profile.env (as exported variables </i>
<i>Specials and Others ----> /etc/profile.env </i>
</pre>

<p>If you look at <path>/etc/ld.so.conf</path>, you can see clearly that <i>env.d</i> was the source
of the information contained within. </p>

<pre caption = "/etc/ld.so.conf">
# ld.so.conf autogenerated by env-update; make all changes to
# contents of /etc/env.d directory
/usr/local/lib
/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2
/usr/lib/opengl/nvidia/lib
/usr/lib/mozilla
/usr/X11R6/lib
/opt/blackdown-jdk-1.3.1/jre/lib/i386/
/opt/blackdown-jdk-1.3.1/jre/lib/i386/native_threads/
/usr/qt/3/lib
/usr/qt/2/lib
/usr/kde/3/lib
</pre>

<p>It is a good thing to know that <path>/etc/profile.env</path> is the same thing as your shell.env
(i.e. <i>csh.env</i> or <i>bash.env</i>). This is a good thing because now you can use the all of
your variables in your shell next time that you open it. </p>

<pre capton = "Sequence of events from env-update">
<i>/etc/env.d settings ----env-update----> /etc/profile.env ---> /etc/profile 
---> bash ---> all your programs</i>
</pre>

<p>Now that you have a <i>profile.env</i> it should look something like this: </p>

<pre caption = "/etc/profile.env">
export CONFIG_PROTECT='/usr/kde/3/share/config /usr/share/config'
export KDEDIRS='/usr/kde/3:/usr'
export MANPATH='/usr/share/man:/usr/local/share/man:/usr/X11R6/man:/opt/blackdown-jdk-1
.3.1/man'
export INFODIR='/usr/share/info:/usr/X11R6/info'
export PATH='/usr/local/bin:/opt/bin:/opt/rar/bin:/usr/X11R6/bin:/opt/blackdown-jdk-1.3
.1/bin:/opt/blackdown-jdk-1.3.1/jre/bin:/usr/qt/3/bin:/usr/qt/2/bin:/usr/kde/3/bin'
export CONFIG_PROTECT_MASK='/etc/gconf'
export CLASSPATH='/opt/blackdown-jdk-1.3.1/jre/lib/rt.jar:.'
export ROOTPATH='/usr/local/bin:/opt/bin:/opt/rar:/usr/X11R6/bin:/opt/blackdown-jdk-1.3
.1/bin:/opt/blackdown-jdk-1.3.1/jre/bin:/usr/qt/3/bin:/usr/qt/2/bin:/usr/kde/3/bin'
export KDEDIR='/usr/kde/3'
export VIMRUNTIME='/usr/share/vim/vim61'
export JDK_HOME='/opt/blackdown-jdk-1.3.1'
export JAVAC='/opt/blackdown-jdk-1.3.1/bin/javac'
export PAGER='/usr/bin/less'
export HOSTNAME='l00ser.muc.edu'
export QMAKESPEC='linux-g++'
export LESSOPEN='|lesspipe.sh %s'
export CVS_RSH='ssh'
export EDITOR='/usr/bin/vim'
export QTDIR='/usr/qt/3'
export JAVA_HOME='/opt/blackdown-jdk-1.3.1'
export XINITRC='/etc/X11/xinit/xinitrc'
export MOZILLA_FIVE_HOME='/usr/lib/mozilla'
</pre>

<p>Alright, thats all I have to say, so go have some fun, and don't break too much! </p>

</body>
</section>
</chapter>
</guide>
