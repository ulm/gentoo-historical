<?xml version='1.0'?>
<!DOCTYPE guide SYSTEM "../../../dtd/guide.dtd">

<guide link="/doc/build.html">
<title>Gentoo Linux 1.4 Installation Instructions</title>
<author title="Chief Architect"><mail link="drobbins@gentoo.org">Daniel Robbins</mail></author>
<author title="Author">Chris Houser</author>
<author title="Author"><mail link="jerry@gentoo.org">Jerry Alexandratos</mail></author>
<author title="Ghost"><mail link="g2boojum@gentoo.org">Grant Goodyear</mail></author>
<author title="Editor"><mail link="zhen@gentoo.org">John P. Davis</mail></author>
<author title="Editor"><mail link="Pierre-Henri.Jondot@wanadoo.fr">Pierre-Henri Jondot</mail></author> 
<author title="Editor"><mail link="stocke2@gentoo.org">Eric Stockbridge</mail></author>
<author title="Editor"><mail link="rajiv@gentoo.org">Rajiv Manglani</mail></author>

<abstract>These instructions step you through the process of installing Gentoo
Linux 1.4_rc1.  The Gentoo Linux installation process supports various installation
approaches, depending upon how much of the system you want to custom-build from
scratch.</abstract>

<version>2.1</version>
<date>31 October 2002</date>

<chapter>
<title>About the Install</title>
<section>
<body>

<p>This new boot CD will boot from nearly any modern IDE CD-ROM drive, as well
as many SCSI CD-ROM, assuming that your CD-ROM and BIOS both support booting. 
Included on the CD-ROM is Linux support for IDE (and PCI IDE)
(built-in to the kernel) as well as support for all SCSI devices (available as
modules).  In addition, we provide modules for literally every kind of network
card that Linux supports, as well as tools to allow you to configure your
network and establish outbound <c>ssh</c> connections and download files.  </p>

<p>To install from the build CD, you will need to have a 486+ processor and
ideally at least 64 Megabytes of RAM.  (Gentoo linux has been successfully
built with 64MB of RAM + 64MB of swap space, but the build process is awfully
slow under those conditions.) To begin the install process, first grab the
livecd ISO images from
<uri>http://www.ibiblio.org/gentoo/releases/1.4_rc1/</uri>. The three stages make our life
easy with Gentoo. The stage1 is for building the entire system from scratch. Stage2 is for building
some of the system from scratch, and stage3 saves a lot of time because it is already
optimized for you specific system. At the moment only the stage1 tarball is 
stored on the livecd, but you will be able to download a stage2 or
stage3 tarball optimized for your system after booting the livecd. </p>

<p>Now, let's quickly review the install process.  We'll create partitions, 
create our filesystems, and extract either a stage1, stage2 or stage3 tarball.
If we are using a stage1 or stage2 tarball, we will take the appropriate steps
to get our systems to stage3.  Once our systems are at stage3, we can configure
them (tweaking config files, installing a bootloader, etc) and boot them and
have a fully-functional Gentoo Linux system.  Depending on what stage of the build
process you're starting from, here's what's required for installation:</p>

<table>
<tr><th>stage tarball</th><th>requirements for installation</th></tr>
<tr><ti>1</ti><ti>partition/filesystem setup, emerge sync, bootstrap, emerge system, emerge linux sources, final configuration</ti></tr>
<tr><ti>2</ti><ti>partition/filesystem setup, emerge sync, emerge system, emerge linux sources, final configuration</ti></tr>
<tr><ti>3</ti><ti>partition/filesystem setup, emerge sync, final configuration</ti></tr>
</table>

</body>
</section>
</chapter>
<chapter>
<title>Booting</title>
<section>
<body>

<p>Start by booting the livecd. You'll be
greeted with a lot of  text output 
followed by the normal Gentoo Linux boot sequence.
Login as "root" (just hit &lt;enter&gt; for the password),
and then use the <c>passwd</c> command to change the root
password.  (This root password is only for this installation session.
The reason for changing the password is that you will have to connect
to the net to complete the installation.  Connecting to the internet with
the default root password is a <i>really</i> bad idea!)
You should have a root ("<c>#</c>") prompt on the current
console, and can also open new consoles by typing alt-f2, alt-f3, etc and then
hitting enter.</p>

<p>Next, you'll be greeted with a small list of commands available on the boot
CD, including <i>vi</i> and <i>nano</i>, and instructions for setting up
the network.  Then, you'll be prompted to select your preferred keymap,
followed by PCI autodetection.  The PCI autodetection process will automatically
load the appropriate kernel modules for many popular PCI SCSI and ethernet
devices.  After this, you can hit enter to enter the minimal boot CD Linux
environment.  You should have a root ("<c>#</c>") prompt on the current
console, and can also open new consoles by typing Alt-F2, Alt-F3, etc and then
hitting enter.</p>

</body>
</section>
</chapter>

<chapter>
<title>Load Kernel Modules</title>
<section>
<body>


<p>Hopefully you need only type <c>pci-setup</c> at the root prompt to 
autodetect the hardware on your system and to load the appropriate
kernel modules.
</p>

<p>If the PCI autodetection missed some of your hardware, you 
will have to load the appropriate modules manually.
To view a list of all available network card modules, type <c>ls
/lib/modules/*/kernel/drivers/net/*</c>.  To load a particular module,
type: </p>

<pre caption = "PCI Modules Configuration">
# <c>modprobe pcnet32</c>
	<comment>(replace pcnet32 with your NIC module)</comment>
</pre>

<p>Now, if you want to be able to access any SCSI hardware that wasn't detected
during the PCI autodetection process, you'll need to load the appropriate
modules from /lib/modules, again using <c>modprobe</c>:</p>

<pre caption = "Loading SCSI Modules">
# <c>modprobe aic7xxx</c>
# <c>modprobe sd_mod</c>
</pre>

<p>
<c>aic7xxx</c> supports your SCSI controller and <c>sd_mod</c> supports SCSI hard disks. 
<note>
Support for a SCSI CD-ROMs in build-in in the kernel.
</note>
</p>

<p>If you are using hardware RAID, you need  to load the 
ATA-RAID modules for your RAID controller. </p>

<pre caption = "Loading RAID Modules">    
# <c>insmod ataraid</c>    
# <c>insmod pdcraid</c>            
      <comment>(Promise Raid Controller)</comment>    
# <c>insmod hptraid</c>            
      <comment>(Highpoint Raid Controller)</comment>    
</pre>

<p>The Gentoo LiveCD should have enabled DMA on your disks, but if it did not,
<c>hdparm</c> can be used to set DMA on your drives. </p>

<pre caption = "Setting DMA">
<comment>Replace hdX with your disk device. </comment>
# <c>hdparm -d 1 /dev/hdX </c>
<comment>Enables DMA </comment>
# <c>hdparm -X66 /dev/hdX </c>
<comment>Enables Ultra-DMA </comment>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Loading PCMCIA Kernel Modules</title>
<section>
<body>

<p>If you have a PCMCIA network card, you will need to do some additional 
trickery.</p>

<warn>To avoid problems with <c>cardmgr</c>, you <e>must</e> run it <e>before</e> you enter the chroot
portion of the install. </warn>

<pre caption = "Loading PCMCIA Modules">
# <i>insmod pcmcia_core</i>
# <i>insmod i82365</i>
# <i>insmod ds</i>
# <i>cardmgr -f</i>
</pre>

<p>As cardmgr detects which hardware is present, your speaker should emit a
few reassuring beeps, and your PCMCIA network card should hum to life. You can
of course insert the PCMCIA card after loading cardmgr too, if that's 
preferable. (Technically, you need not run 
<i>cardmgr</i> if you know exactly which module your PCMCIA card requires. 
But if you don't, loading all PCMCIA modules and see which sticks won't work,
as all PCMCIA modules load obligingly and hang around for a PCMCIA card to 
drop by. <i>cardmgr</i> will also unload the module(s) for any card when you
remove it). </p>

</body>
</section>
</chapter>

<chapter>
<title>Configuring Networking</title>
<section>
<title> PPPoE configuration</title>
<body>

<p>Assuming you need PPPoE to connect to the internet, the livecd (any version) has
made things easy for you by including <i>rp-pppoe</i>. Use the provided <i>adsl-setup </i>
script to configure your connection. You will be prompted for the ethernet
device that is connected to your adsl modem, your username and password,
the IPs of your DNS servers, and if you need a basic firewall or not. </p>

<pre caption = "Configuring PPPoE">
# <i> adsl-setup </i>
# <i> adsl-start </i>
</pre>

<p>If something goes wrong,  double-check that you correctly typed
your username and password by looking at <path>/etc/ppp/pap-secrets</path> or
<path>/etc/ppp/chap-secrets</path>, and make sure you are using the right ethernet device. </p>

</body>
</section>

<section>
<title> Automatic Network Configuration </title>
<body>

<p>The Gentoo Linux install lets you configure a working network, allowing you to use
<c>ssh</c>, <c>scp</c> or <c>wget</c> as needed before even beginning the installation process. 
Even if you don't need to do these things now, you should go ahead and set up networking now.
Once networking is up, Portage will be able to use your configured network once you are inside
the chroot environment (required for installing Gentoo Linux). 
The simplest way to set up networking is to run our new <c>net-setup</c>
script. </p>

<pre caption = "Net-Setup Script">
# <c>net-setup eth0</c>
</pre>

<p>Of course, if you prefer, you may still set up networking manually. </p>

</body>
</section>

<section>
<title>Manual DHCP Configuration</title>
<body>

<p>Network configuration is simple with DHCP; If your ISP is not using
DHCP, skip down to the static configuration section below. </p> 

<pre caption="Network configuration with DHCP">
# <c>dhcpcd eth0</c> 
</pre>

<note>Some ISPs require you to provide a hostname.  To do that,
add a <c>-h myhostname</c> flag to the dhcpcd command line above.
</note>

<p>If you receive <i>dhcpConfig</i> warnings, don't panic; the errors
are most likely cosmetic.  Skip down to Network testing below.</p>

</body>
</section>

<section>
<title>Manual Static Configuration</title>
<body>

<p>We need to setup just enough networking so that we can download
sources for the system build, as well as the required localhost interface.
Type in the following commands, replacing
$IFACE with your network interface (typically <c>eth0</c>), $IPNUM
with your IP address, $BCAST with your broadcast address, and $NMASK
with your network mask.  For the <c>route</c> command, replace 
$GTWAY with your default gateway. </p>

<pre caption = "Static IP Network Configuration">
# <c>ifconfig $IFACE $IPNUM broadcast $BCAST netmask $NMASK</c>
# <c>/sbin/route add -net default gw $GTWAY netmask 0.0.0.0 metric 1</c>
</pre>

<p>Now it's time to create the <path>/etc/resolv.conf</path>
file so that name resolution (finding Web/FTP sites by name, rather than just by IP address) will work.</p>

<p>Here's a template to follow for creating your /etc/resolv.conf file: </p>

<pre caption="/etc/resolv.conf template">
domain mydomain.com
nameserver 10.0.0.1
nameserver 10.0.0.2
</pre>

<p>Replace <c>10.0.0.1</c> and <c>10.0.0.2</c> with the IP addresses of your
primary and secondary DNS servers respectively.</p>
</body>
</section>

<section>
<title>Proxy Configuration</title>
<body>
<p>If you are behind a proxy, it is necessary to configure your proxy before
you continue. We will export some variables to set up the proxy accordingly. </p>
<pre>
# <c>export http_proxy="machine.company.com:1234" </c>
# <c>export ftp_proxy="$http_proxy" </c>
# <c>export RSYNC_PROXY="$http_proxy" </c>
</pre>

</body>
</section>

<section>
<title>Network Testing</title>
<body>
<p>Now that your network has been configured, the <c>/sbin/ifconfig -a</c> command should show
that your network card is working (look for <e>UP</e> and <e>RUNNING</e> in the output). </p>

<pre caption="/sbin/ifconfig for a working network card">
eth0      Link encap:Ethernet  HWaddr 00:50:BA:8F:61:7A
          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::50:ba8f:617a/10 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1498792 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1284980 errors:0 dropped:0 overruns:0 carrier:0
          collisions:1984 txqueuelen:100
          RX bytes:485691215 (463.1 Mb)  TX bytes:123951388 (118.2 Mb)
          Interrupt:11
</pre>

</body>
</section>

<section>
<title>Networking is go!</title>
<body>
<p>Networking should now be configured and useable.  You should be able to use the included
<c>ssh</c>, <c>scp</c> and <c>wget</c> commands to connect to other machines on your LAN or the Internet.</p>
</body>
</section>
</chapter>

<chapter>
<title>Partition Configuration</title>
<section>
<body>

<p>Now that the kernel can see the network card and disk controllers, it's time
to set up disk partitions for Gentoo Linux.</p>

<p>Here's a quick overview of the standard Gentoo Linux partition layout.
We're going to create at least three partitions: a swap partition, a root
partition (to hold the bulk of Gentoo Linux), and a special boot partition.
The boot partition is designed to hold the GRUB or LILO  boot loader information as well as
your Linux kernel(s).  The boot partition gives us a safe place to store
everything related to booting Linux. During normal day-to-day Gentoo Linux use,
your boot partition should remain <e>unmounted</e>.  This prevents your kernel
from being made unavailable to GRUB (due to filesystem corruption) in the event
of a system crash, preventing the chicken-and-egg problem where GRUB can't read
your kernel (since your filesystem isn't consistent) but you can't bring your
filesystem back to a consistent state (since you can't boot!)      </p>

<p>Now, on to filesystem types.  Right now, you have four filesystem options:
XFS, ext2, ext3 (journaling) and ReiserFS.  ext2 is the tried and true Linux
filesystem but doesn't have metadata journaling.  ext3 is the new version of
ext2 with both metadata journaling and ordered data writes, effectively
providing data journaling as well.  ReiserFS is a B*-tree based filesystem
that has very good small file performance, and greatly outperforms both ext2 and
ext3 when dealing with small files (files less than 4k), often by a factor of
10x-15x. ReiserFS also scales extremely well and has metadata journaling.
As of kernel 2.4.18+, ReiserFS is finally rock-solid and highly recommended.
XFS is a filesystem with metadata journaling that
is fully supported under Gentoo Linux's <path>xfs-sources</path> kernel, but be warned that it
is highly unstable at this time.
</p>

<p>
If you're looking for the most standard filesystem, use ext2.  If you're looking
for the most rugged journalled filesystem, use ext3.  If you're looking for a
high-performance filesystem with journaling support, use ReiserFS;  both ext3 and ReiserFS are 
mature and refined.  Please be careful with XFS; this filesystem has a tendency to fry lots of data
if the system crashes or you lose power. Originally, it seemed like a promising filesystem but it
now appears that this tendency to lose data is a major achilles' heel.
Here are our basic recommended filesystem
sizes and types: </p>

  <table>
  <tr>
  	<th>Partition</th>
	<th>Size</th>
	<th>Type</th>
  	<th>example device</th>
  </tr>
  <tr>
  	<ti>boot partition, containing kernel(s) and boot information</ti>
	<ti>100 Megabytes</ti>
	<ti>ext2/3 highly recommended (easiest); if ReiserFS then mount with <c>-o notail</c></ti>
  	<ti>/dev/hda1</ti>
  </tr>
   <tr>
  	<ti>swap partition (no longer a 128 Megabyte limit)</ti>
	<ti>&gt;=2*Amount of RAM in this system is recommended but no longer (as of kernel 2.4.10) required</ti>
	<ti>Linux swap</ti>
  	<ti>/dev/hda2</ti>
  </tr>
  <tr>
  	<ti>root partition, containing main filesystem (/usr, /home, etc)</ti>
	<ti>&gt;=1.5 Gigabytes</ti>
	<ti>ReiserFS, ext3 recommended; ext2 ok</ti>
  	<ti>/dev/hda3</ti>
  </tr>
 </table>

<p>Before creating your partitions, it is a <e>very</e> good idea to initialize the beginning of your HD using <c>dd</c>. Doing this will ensure that you have no issues with mounting previously <i>fat32</i> partitions, like <path>/boot</path> for example. To do this you would do:</p>

<pre caption = "Initializing first 1024 Sectors of HD">
# <c>dd if=/dev/zero of=/dev/hdaBOOT bs=1024 count=1024 </c>
<comment>BOOT is the partition that holds your <path>/boot</path>.</comment>
</pre>

<p>At this point, create your partitions using fdisk.  Note that your partitions
should be of type 82 if swap and 83 for regular filesystems (whether ReiserFS <e>or</e> ext2/3). </p>

<note><i>cfdisk</i> is included on the install CD, and it is *considerably* easier to use than
<i>fdisk</i>. Just type <c>cfdisk</c> to run it. </note>

<note>If you are using RAID your partitions will be a little
different.
You will have the partitions like this:
<path>/dev/ataraid/discX/partY</path>
X is the arrays you have made, so if you only have made 1
array, then it will
be disc0.Y is the partition number as in <path>/dev/hdaY</path>
</note>


<p>Once you've created your partitions, it's time to initialize
the filesystems that will be used to house our data.  Initialize swap as follows:</p>

<pre caption= "Initializing Swap">
# <c>mkswap /dev/hda2</c>
</pre>

<p>You can use the <c>mke2fs</c> command to create ext2 filesystems.</p>

<pre caption = "Creating an ext2 Filesystem">
# <i>mke2fs /dev/hda1</i>
</pre>

<p>To create an XFS filesystem, use the <c>mkfs.xfs</c> command.</p>

<pre caption = "Creating a XFS Filesystem">
# <c>mkfs.xfs /dev/hda3</c>
</pre>

<note>
You may want to add a couple of additional flags to the <c>mkfs.xfs</c> command: <c>-d agcount=3 -l size=32m</c>. 
The <c>-d agcount=3</c> command will lower
the number of allocation groups.  XFS will insist on using at least 1 allocation group per 4 GB of your partition,
so, for example, if you hava a 20 GB partition you will need a minimum agcount of 5.  The <c>-l size=32m</c> command
increases the journal size to 32 Mb, increasing performance.
</note>

<warn>
If you are installing an XFS partition over a previous ReiserFS partition, later attempts to mount may fail without
an explicit <c>mount -t xfs</c>.  The solution is to zero out the partition before creating the XFS filesystem:
<c>dd if=/dev/zero of=/dev/hd<comment>x</comment> bs=1k</c>. 
</warn>
<p>If you'd like to use ext3, you can create ext3 filesystems using <c>mke2fs -j</c>.</p>

<pre caption = "Creating an ext3 Filesystem">
# <c>mke2fs -j /dev/hda3</c>
</pre>

<p>To create ReiserFS filesystems, use the <c>mkreiserfs</c> command.</p>
<pre caption = "Creating a ReiserFS Filesystem">
# <c>mkreiserfs /dev/hda3</c>
</pre>

<note>You can find out more about using ext3 under Linux 2.4 at <uri>http://www.zip.com.au/~akpm/linux/ext3/ext3-usage.html</uri>.</note>

</body>
</section>
</chapter>

<chapter>
<title>Mount Partitions</title>
<section>
<body>

<p>Now, we'll activate our new swap, since we may need the additional virtual memory that
provides later: </p>

<pre caption = "Activating Swap">
# <c>swapon /dev/hda2</c>
</pre>

<p>Next, we'll create the <path>/mnt/gentoo</path> and <path>/mnt/gentoo/boot</path> mountpoints,
and we'll mount our filesystems to these mountpoints. </p>

<pre caption = "Creating Mount Points">
# <c>mkdir /mnt/gentoo</c>
# <c>mount /dev/hda3 /mnt/gentoo</c>
# <c>mkdir /mnt/gentoo/boot</c>
# <c>mount /dev/hda1 /mnt/gentoo/boot</c>
</pre>

<p>If you are setting up Gentoo
   Linux with a separate <path>/usr</path> or <path>/var</path>, these would get mounted to
   <path>/mnt/gentoo/usr</path> and <path>/mnt/gentoo/var</path>, respectively. </p>
   
   <impo>If your <e>boot</e> partition (the one holding the kernel) is ReiserFS, be sure to mount it
   with the <c>-o notail</c> option so GRUB gets properly installed.  Make sure 
   that <c>notail</c> ends up in your new <path>/etc/fstab</path> boot partition entry, too.
   We'll get to that in a bit.</impo>

   <impo>If you are having problems mounting your boot partition with ext2, try using
   <c>mount /dev/hXX /mnt/gentoo/boot -t ext2 </c> </impo>
</body>
</section>
</chapter>

<chapter>
<title>Obtaining the Desired 'stage-x' Tarball</title>
<section>
<body>

<p>If you want to start from a stage1 tarball, then you're already set
to go; you can find the stage1 tarball in <path>/cdroot/nocompress</path>.
On the other hand, if you would prefer to start from a stage2 or stage3
tarball that has been optimized for your architecture you can download it
(into <path>/mnt/gentoo</path> would be the simplest)
from one of the Gentoo mirror sites: </p>

<pre caption = "Downloading Required Stages">
# <c>cd /mnt/gentoo</c>
# <c>lynx http://www.ibiblio.org/pub/Linux/distributions/gentoo/releases/1.4_rc1/x86/</c>
</pre>
</body>
</section>
</chapter>

<chapter>
<title>Unpacking the Stage Tarballs</title>
<section>
<body>

<p>Now it's time to extract the compressed stage tarball of your choice to <path>/mnt/gentoo</path>.  Then, we'll <c>chroot</c> over to the new Gentoo Linux build installation. </p>

<impo>Be sure to use the <c>p</c> option with <c>tar</c>.  Forgetting to do this will cause certain files to contain incorrect permissions.</impo>

<p>If you are using the "from scratch, build everything" install method, you will want to use the <path>stage1-ix86-1.4_beta.tbz2</path> image.
If you're using one of our bigger CDs, you'll also have a choice of a stage2 and stage3 image.  These images allow you to save time at the
expense of configurability (we've already chosen compiler optimizations and default USE variables for you.)  The stage3 image now also includes complete linux sources and a Portage tree snapshot, eliminating the need to do an <c>emerge sync</c> later, but it is highly recommended to do so anyway. </p>

<pre caption = "Unpacking the Stages">
# <c>cd /mnt/gentoo</c>
# <c>tar -xvjpf /path/to/stage?-*.tbz2</c>
# <c>mount -o bind /proc /mnt/gentoo/proc</c>
# <c>cp /etc/resolv.conf /mnt/gentoo/etc/resolv.conf</c>
</pre>

<pre caption = "Entering the chroot Environment">
# <c>chroot /mnt/gentoo /bin/bash</c>
# <c>env-update</c>
Regenerating /etc/ld.so.cache...
# <c>source /etc/profile</c>
</pre>

<p>After you execute these commands, you'll be "inside" your new Gentoo Linux environment. </p>

</body>
</section>
</chapter>

<chapter>
<title>Getting the Current Portage Tree using Rsync</title>
<section>
<body>
<p>Now, you'll need to run <c>emerge sync</c>.  This will make sure that
you have the most current copy of the Portage tree. </p>

<pre caption = "Updating Using Rsync">
# <c>emerge sync</c>
</pre>

<p>The Portage tree will be downloaded and stored in <path>/usr/portage</path>;
it's about 90Mb in size without tarballs.</p>
</body>
</section>
</chapter>

<chapter>
<title>Progressing from stage1 to stage2</title>
<section>
<body>

<p>If you are a stage2 or stage3 tarball, then we've already bootstrapped
for you.  There is no reason for you to bootstrap again, unless you decided to
do an <c>emerge sync</c> and want to ensure that you have an up-to-the-minute
current Gentoo Linux system.  Most people using stage2 or stage3 tarballs will
<i>not</i> want to bootstrap again, since it can take over two hours even on
very fast machines.</p>

<p>Now that you have a working copy of the Portage tree, people using stage1 to
install will need to bootstrap their Gentoo Linux system as follows.  First 
edit the file <path>/etc/make.conf</path>.  In this file, you should set your 
<c>USE</c> flags, which specify optional functionality that you would 
like to be built into packages; generally, the defaults (an <e>empty</e>
or unset <c>USE</c> variable) are fine.  
More information on <c>USE</c> flags can be found <uri link="http://www.gentoo.org/doc/use-howto.html">here</uri>.
</p>


<p>You also should set appropriate <c>CHOST</c>, <c>CFLAGS</c> and 
<c>CXXFLAGS</c> settings for the kind of system that you are creating 
(commented examples can be found further down in the file.)  Your best friend 
is <path>man gcc</path> to figure out what additional <c>CFLAGS</c> and 
<code>CXXFLAGS</code> are available.  Search for 'Optimization'.
</p>

<p>If necessary, you can also set proxy information here if you are behind a 
firewall.</p>

<pre caption = "Setting make.conf Options">
# <c>nano -w /etc/make.conf</c> <comment>(Adjust these settings)</comment>
</pre>

<note>
People who need to substantially tweak the build process should take a look at
the <path>/etc/make.globals</path> file.  This file comprises gentoo defaults and
should never be touched.  If the defaults do not suffice, then new values should
be put in <path>/etc/make.conf</path>, as entries in <path>make.conf</path>
<comment>override</comment> the entries in <path>make.globals</path>.  If you're
interested in tweaking USE settings, look in <path>/etc/make.profile/make.defaults</path>.
If you want to turn off any USE settings found here, add an appropriate <c>USE="-foo"</c>
in /etc/make.conf (to turn off the <c>foo</c> USE setting.)
</note>

<p>Now, it's time to start the "bootstrap" process.  This process takes about two hours on
my 1200Mhz AMD Athlon system.  During this time, the extracted build image will be prepped for compiling the rest ofthe system.  The GNU compiler suite will be built, as well as the GNU C library.
These are time consuming builds and make up the bulk of the bootstrap process. </p>

<pre caption = "Bootstrapping">
# <c>cd /usr/portage</c>
# <c>scripts/bootstrap.sh</c>
</pre>

<p>The "bootstrap" process will now begin.</p>
<note>

Portage by default uses <c>/var/tmp</c> during package building, often
using several hundred megabytes of temporary storage. If you would like to
change where Portage stores these temporary files, set a new PORTAGE_TMPDIR <e>before</e>
starting the bootstrap process, as follows:
</note>

<pre caption = "Changing Portage's Storage Path">
# <c>export PORTAGE_TMPDIR="/otherdir/tmp"</c>
</pre>

<p><c>bootstrap.sh</c> will build <c>binutils</c>, <c>gcc</c>, <c>gettext</c>,
and <c>glibc</c>, rebuilding <c>binutils</c>, <c>gcc</c>, and <c>gettext</c>
after <c>glibc</c>. Needless to say, this process takes a while.
Have a nice nap.  Once this process completes, your system will be in a "stage2" state. </p>

</body>
</section>
</chapter>

<chapter>

<title>Timezone</title>
<section>
<body>

<impo>It is extremely important that this step is completed, no matter which stage tarball you use. Major clock drift will be experienced if you do not set localtime correctly, let alone subtle issues when emerging packages later.</impo>

<p>At this point, you should have a stage2 system that's ready for final configuration.  We'll start this process by setting the timezone. By setting the timezone before building the kernel we ensure that users get reasonable <c>uname -a</c> output.</p>

<p>Look for your timezone (or GMT if you using Greenwich Mean Time) in <path>/usr/share/zoneinfo</path>.  Then, make a symbolic link by typing:</p>

<pre caption = "Creating a symbolic link for timezome">
# <c>ln -sf /usr/share/zoneinfo/path/to/timezonefile /etc/localtime</c>
</pre>

<p>You might also want to check <path>/etc/rc.conf</path> to make sure your timezone settings
are correct.</p>
</body>
</section>
</chapter>

<chapter>
<title>Progressing from stage2 to stage3</title>
<section>
<body>

<p>Once your build image has been bootstrapped and you're at stage2 (again, if you're
using a stage3 tarball than these steps are not required)
it's time to build or install the rest of the base
system.</p>

<pre caption = "Installing the Rest of the System">
# <c>export CONFIG_PROTECT=""</c>
# <c>emerge -p system</c>
	<comment>[lists the packages to be installed]</comment>
# <c>emerge system</c>
</pre>

<note>The <c>export CONFIG_PROTECT=""</c> line ensures that any new scripts
installed to <path>/etc</path> will overwrite the old scripts (stored in
<path>sys-apps/baselayout</path>), bypassing Portage's new config file
management support.  Type <c>emerge --help config</c> for more details.</note>

<p>It's going to take a while
to finish building the entire base system.  Your reward is that it will be
thoroughly optimized for your system.  The drawback is that you have to find a
way to keep yourself occupied for some time to come.  The author suggests "Star
Wars - Super Bombad Racing" for the PS2.  When <c>emerge system</c> completes,
you'll have a stage3 Gentoo Linux system.</p>

</body>
</section>
</chapter>
<chapter>

<title>Final steps: kernel and system logger</title>
<section>
<body>
<p>You now need to merge Linux source ebuilds.  Here are the ones we currently
offer:</p>

<table>
<tr><th>ebuild</th><th>description</th></tr>
<tr><ti><path>gentoo-sources</path></ti><ti>Our own performance and functionality-enhanced kernel based on -ac.</ti></tr>
<tr><ti><path>xfs-sources</path></ti><ti>A snapshot of the SGI XFS CVS Linux source tree; this is the kernel to run if you want bleeding edge(cvs) xfs support.</ti></tr>
<tr><ti><path>openmosix-sources</path></ti><ti>A stock Linux kernel source tree patched with support for the GPL <uri link="http://www.openmosix.com">openMosix</uri> load-balancing/clustering technology</ti></tr>
<tr><ti><path>usermode-sources</path></ti><ti>A stock Linux kernel source tree patched with support for User-Mode Linux.  ("Linux inside Linux" technology)</ti></tr>
<tr><ti><path>vanilla-sources</path></ti><ti>A stock Linux kernel source tree, just like you'd get from kernel.org</ti></tr>
</table>

<warn>Please note that <i>gentoo-sources</i> is heavily patched and may not be stable. Using <i>vanilla-sources</i> might be a better idea if you encounter numerous problems. If you are using
<i>gentoo-sources</i> beware of <i>grsecurity</i>, especially with <i>X</i>. It is best to disable <i>grsecurity</i>unless you are absolutely
sure that you need it.
</warn>

<p>Choose one and then merge as follows:</p>

<pre caption = "Emerging Kernel Sources">
# <c>emerge sys-kernel/gentoo-sources</c>
</pre>

<p>Once you have a Linux kernel source tree available, it's time to compile your own custom kernel. </p>

<pre caption = "Compiling the Linux Kernel">
# <c>cd /usr/src/linux</c>
# <c>make menuconfig</c>
# <c>make dep &amp;&amp; make clean bzImage modules modules_install</c>
# <c>mv /boot/bzImage /boot/bzImage.orig</c>
<comment>[if bzImage already exists]</comment>
# <c>cp /usr/src/linux/arch/i386/boot/bzImage /boot</c>
</pre>

<warn>For your kernel to function properly, there are several options that you will
need to ensure are in the kernel proper -- that is, they should <i>be enabled and not
compiled as modules</i>.  You will need to enable the <i>"Code maturity
level options --> Prompt for development and/or incomplete code/drivers"</i>
option to see several of these selections.
Under the "File systems" section, be sure to enable the <i>"Device File System"</i> (note that
you <e>don't</e> need to enable the "/dev/pts file system support" option). You'll also
need to enable the <i>"Virtual Memory Filesystem"</i>.  Be sure to enable "ReiserFS" if you have
any ReiserFS partitions; the same goes for "Ext3".  If you're using XFS, enable the 
"SGI XFS filesystem support"
option.  It's always a good idea to leave ext2
enabled whether you are using it or not.    Also, most people using IDE hard drives will
want to enable the "USE DMA by default" option; otherwise, your IDE drives may perform
very poorly.  Of course, remember to enable "IDE disk" support as well -- otherwise your
kernel won't be able to see your IDE disks.
</warn>

<p>If you are using hardware RAID you will need to enable a couple more options in the kernel:    
For Highpoint RAID controllers select hpt366 chipset support, support for IDE RAID controllers and Highpoint    
370 software RAID.For Promise RAID controllers select PROMISE PDC202{46|62|65|67|68|69|70} support, support for IDE RAID    
controllers and Support Promise software RAID (Fasttrak(tm))</p>

<p>If you use PPPoE to connect to Internet, you will need the following
options in the kernel (built-in or as preferably as modules) :
"PPP (point-to-point protocol) support", "PPP support for async serial ports",
"PPP support for sync tty ports". The two compression options won't harm but
are not definitely needed, neither does the "PPP over Ethernet" option,
that might only be used by <i>rp-pppoe</i> when configured to do kernel mode PPPoE.
</p>

<p>If you have an IDE cd burner, then you need to enable SCSI emulation in the
kernel.  Turn on "ATA/IDE/MFM/RLL support" ---> "IDE, ATA and ATAPI Block 
devices" ---> "SCSI emulation support" (I usually make it a module), then
under "SCSI support" enable "SCSI support", "SCSI CD-ROM support" and
"SCSI generic support" (again, I usually compile them as modules).  If you
also choose to use modules, then <c>echo -e "ide-scsi\nsg\nsr_mod"
>> /etc/modules.autoload</c> to have them automatically added at boot time. </p>

<note>
For those who prefer it, 
it is now possible to install Gentoo Linux with a 2.2 kernel.
Such stability will come at a price: 
you will lose many of the nifty features that
are new to the 2.4 series kernels (such as XFS and tmpfs
filesystems, iptables, and more), although the 2.2 kernel sources can be
patched with Reiserfs and devfs support.  
Gentoo linux bootscripts require either tmpfs or ramdisk support in the kernel, so 
2.2 kernel users need to make sure that ramdisk support is compiled in (ie, not a module).
It is <comment>vital</comment> that a <e>gentoo=notmpfs</e> flag be added to the kernel
line in <path>/boot/grub/grub.conf</path> for the 2.2 kernel so that a ramdisk is mounted
for the bootscripts instead of tmpfs.  If you choose not to use devfs, then
<e>gentoo=notmpfs,nodevfs</e> should be used instead.
</note>

<p>Your new custom kernel (and modules) are now installed.  Now you need to choose a system
logger that you would like to install.  We offer sysklogd, which is the traditional set
of system logging daemons.  We also have msyslog and syslog-ng as well as metalog.  Power users seem
to gravitate away from sysklogd (not very good performance) and towards the
newer alternatives.  
If in doubt, you may want to try metalog, since it seems to be quite popular.
To merge your logger of choice, type <e>one</e> of the next four lines: </p>


<pre caption = "Emerging System Logger of Choice">
# <c>emerge app-admin/sysklogd</c>
# <c>rc-update add sysklogd default</c>
<comment>or</comment>
# <c>emerge app-admin/syslog-ng</c>
# <c>rc-update add syslog-ng default</c>
<comment>or</comment>
# <c>emerge app-admin/metalog</c>
# <c>rc-update add metalog default</c>
<comment>or</comment>
# <c>emerge app-admin/msyslog</c>
# <c>rc-update add msyslog default</c>
</pre>

<warn>
In the case of syslog-ng you need to create 
<path>/etc/syslog-ng/syslog-ng.conf</path>.
See <path>/etc/syslog-ng</path> 
for a sample configuration file.
</warn>

<impo>
Metalog flushes output to the disk in blocks, so messages aren't immediately recorded into
the system logs.  If you are trying to debug a daemon, this performance-enhancing behavior is less than helpful.  When your
Gentoo Linux system is up and running, you can send
metalog a USR1 signal to temporarily turn off this message buffering (meaning that 
<i>tail -f <path>/var/log/everything/current</path></i> will now work 
in real time, as expected), 
and a USR2 signal to turn buffering back on
again. 
</impo>

<p>Now, you may optionally choose a cron package that you'd like to use.  Right now, we offer dcron, fcron and vcron. If you don't know which one to choose, you might as well grab vcron.  They can be installed as follows:</p>

<pre caption = "Choosing a CRON Daemon">
# <c>emerge sys-apps/dcron</c>
# <c>crontab /etc/crontab</c>
<comment>or</comment>
# <c>emerge sys-apps/fcron</c>
# <c>crontab /etc/crontab</c>
<comment>or</comment>
# <c>emerge sys-apps/vcron</c>
<comment>Don't forget to add your *cron to the proper init level. </comment>
# <c>rc-update add *cron default </c>
</pre>

<p>For more information how how cron works under Gentoo Linux, see <uri link="http://lists.gentoo.org/pipermail/gentoo-announce/2002-April/000151.html">this announcement</uri>.</p>
<p>For more information on starting programs and daemons at startup, see the <uri link="/doc/rc-scripts.html">rc-script guide</uri>. </p>
</body>
</section>
</chapter>

<chapter>
<title>Final steps: Install Additional Packages</title>
<section>
<body>

<p>If you need rp-pppoe to connect to the net, be aware that at this point
it has not been installed. It would be the good time to do it. </p>

<pre caption = "Installing rp-pppoe">
# <c>emerge rp-pppoe</c>
</pre>

<note> Please note that the rp-pppoe is built but not configured.
You will have to do it again using <c>adsl-setup</c> when you boot into your Gentoo system
for the first time. </note>


<p>You may need to install some additional packages in the Portage tree
if you are using any optional features like XFS, ReiserFS or LVM.  If you're
using XFS, you should emerge the <c>xfsprogs</c> ebuild: </p>

<pre caption = "Emerging Filesystem Tools">
# <c>emerge sys-apps/xfsprogs</c>
<comment>If you'd like to use ReiserFS, you should emerge the ReiserFS tools: </comment>
# <c> emerge sys-apps/reiserfsprogs</c>
<comment>If you're using LVM, you should emerge the <c>lvm-user</c> package: </comment>
# <c>emerge --usepkg sys-apps/lvm-user</c>
</pre>


<p>If you're a laptop user and wish to use your PCMCIA slots on your first
real reboot, you'll want to make sure you install the <i>pcmcia-cs</i> package. </p>

<pre caption = "Emerging PCMCIA-cs">
# <c>emerge sys-apps/pcmcia-cs</c>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Final steps: /etc/fstab</title>
<section>
<body>
<p>Your Gentoo Linux system is almost ready for use.  All we need to do now is configure
a few important system files and install the GRUB boot loader. 
The first file we need to
configure is <path>/etc/fstab</path>.  Remember that you should use
the <c>notail</c> option for your boot partition if you chose to create a ReiserFS filesystem on it.
Remember to specify <c>ext2</c>, <c>ext3</c> or <c>reiserfs</c> filesystem types as appropriate.</p>

<p>Use something like the <path>/etc/fstab</path> listed below, but of course be sure to replace "BOOT",
"ROOT" and "SWAP" with the actual block devices you are using (such as <c>hda1</c>, etc.)</p>
<pre caption = "Editing fstab">
<comment>
# /etc/fstab: static file system information.
#
# noatime turns of atimes for increased performance (atimes normally aren't
# needed; notail increases performance of ReiserFS (at the expense of storage
# efficiency).  It's safe to drop the noatime options if you want and to 
# switch between notail and tail freely.

# &lt;fs&gt;           &lt;mountpoint&gt;   &lt;type&gt;   &lt;opts&gt;          &lt;dump/pass&gt;

# NOTE: If your BOOT partition is ReiserFS, add the notail option to opts.
</comment>
/dev/BOOT           /boot       ext2	 noauto,noatime	 1 2
/dev/ROOT           /           ext3	 noatime         0 1
/dev/SWAP           none        swap	 sw              0 0
/dev/cdroms/cdrom0  /mnt/cdrom  iso9660	 noauto,ro       0 0
proc                /proc       proc	 defaults        0 0
</pre>

<warn>Please notice that <i>/boot</i> is NOT mounted at boottime. This is to protect the data in <i>/boot</i> from
corruption. If you need to access <i>/boot</i>, please mount it!
</warn>

</body>
</section>
<section>
<title>Final steps: Root Password</title>
<body>
<p>Before you forget, set the root password by typing: </p>

<pre caption = "Setting the root Password">
# <i>passwd</i>
</pre>

</body>
</section>

<section>
<title>Final steps: /etc/hostname</title>
<body>
<p>Edit this file so that it contains your fully-qualified domain name on a single line, i.e. <c>mymachine.mydomain.com</c>. </p>

<pre caption = "Configuring Hostname">
# <c>echo mymachine.mydomain.com > /etc/hostname</c>
</pre>

</body>
</section>

<section>
<title>Final steps: /etc/hosts</title>
<body>
<p>This file contains a list of ip addresses and their associated hostnames.  It's used by the system to resolve the IP addresses
of any hostnames that may not be in your nameservers.  Here's a template for this file: </p>

<pre caption = "Hosts Template">
127.0.0.1      localhost
<comment># the next line contains your IP for your local LAN, and your associated machine name</comment>
192.168.1.1    mymachine.mydomain.com	mymachine
</pre>

<note>If you are on a DHCP network, it might be helpful to set <i>localhost</i> to your machine's
actual hostname. This will help GNOME and many other programs in name resolution.
</note>

</body>
</section>

<section>
<title>Final Network Configuration</title>
<body>


<p>Add the names of any modules that are necessary for the proper functioning of your system to 
<path>/etc/modules.autoload</path> file (you can also add any options you
need to the same line.) When Gentoo Linux boots, these modules will be automatically
loaded.  Of particular importance is your ethernet card module, if you happened to compile
it as a module:
</p>

<pre caption="/etc/modules.autoload">
<comment>This is assuming that you are using a 3com card. Check <path>/lib/modules/`uname -r`/kernel/drivers/net</path> for your
card. </comment>
3c59x
</pre>

<p>Edit the <path>/etc/conf.d/net</path> script to get your network configured for your
first boot: </p>

<pre caption = "Boottime Network Configuration">
# <c>nano -w /etc/conf.d/net</c>
# <c>rc-update add net.eth0 default</c>
</pre>


<p>If you have multiple network cards you need to create additional <path>net.eth<comment>x</comment></path>
scripts for each one (<comment>x</comment> = 1, 2, ...): </p>

<pre caption="Multiple Network Interfaces">
# <c>cd /etc/init.d</c>
# <c>cp net.eth0 net.eth<comment>x</comment></c>
# <c>rc-update add net.eth<comment>x</comment> default</c>
</pre>


<p>If you have a PCMCIA card installed, have a quick look into 
<path>/etc/init.d/pcmcia</path> to verify that things seem all right for your setup,
then add </p>

<pre caption = "PCMCIA Options">
depend() {
	need pcmcia
}
</pre>

<p>to the top of your <path>/etc/init.d/net.eth<comment>x</comment></path> file. 
This makes sure that the PCMCIA drivers are autoloaded whenever your network is loaded. </p>

</body>
</section>

<section>
<title>Final steps: configure basic settings (including the international keymap setting)</title>
<body>

<pre caption="basic configuration">
# <c>nano -w /etc/rc.conf</c>
</pre>

<p>Follow the directions in the file to configure the basic settings.  
All users will want to make sure that <c>CLOCK</c> is set to his/her
liking.  International keyboard users will want to set the <c>KEYMAP</c>
variable (browse <path>/usr/share/keymaps</path> to see the various
possibilities). </p>

</body>
</section>

<section>
<title>Final steps: Configure GRUB</title>
<body>

<p>The most critical part of understanding GRUB is getting comfortable with how GRUB refers to hard drives and partitions.
Your Linux partition <path>/dev/hda1</path> is called <path>(hd0,0)</path> under GRUB.  Notice the parenthesis around the hd0,0 - they are required.  
Hard drives count from zero rather than "a", and partitions start at zero rather than one. Be aware too that with the hd devices, only harddrives are counted,
not atapi-ide devices such as cdrom players, burners, and that the same 
construct can be used with scsi drives. (Normally they get higher numbers
than ide drives except when the bios is configured to boot from scsi devices.)

Assuming you have a harddrive on /dev/hda, a cdrom player on /dev/hdb,
a burner on /dev/hdc and a second hardrive on /dev/hdd, for example,
and no scsi harddrive 
<path>/dev/hdd7</path> gets translated to <path>(hd1,6)</path>.

It might sound tricky, and tricky it is indeed, but as we will see, grub
offers a tab completion mechanism that comes handy for those of you having
a lot of harddrives and partitions and who are a little lost in the
grub numbering scheme. Having gotten the feel for that,
 it's time to install GRUB.
</p>

<p>The easiest way to install GRUB is to simply type <c>grub</c> at your chrooted shell prompt: </p>

<pre caption = "Installing GRUB">
# <c>grub</c>
</pre>

<impo>If you are using hardware RAID this part will not work at
this time.
Skip to the section on making your <path>grub.conf</path>. After that we will complete the
grub setup for RAID controllers</impo>

<p>You'll be presented with the <c>grub&gt;</c> grub
command-line prompt.  Now, you need to type in the
right commands to install the GRUB boot record onto your hard drive.  In my example configuration,
I want to install the GRUB boot record on my hard drive's MBR (master boot record), so that 
the first thing I see when I turn on the computer is the GRUB prompt.  In my case, the commands
I want to type are:</p>

<pre caption = "GRUB Commands">
grub&gt; <c>root (hd0,0)</c>
grub&gt; <c>setup (hd0)</c>
grub&gt; <c>quit</c>
</pre>

<p>Here's how the two commands work.  The first <c>root ( )</c> command tells GRUB
the location of your boot partition (in our example, <path>/dev/hda1</path> or 
<path>(hd0,0)</path> in GRUB terminology.  Then, the second <c>setup ( )</c> command tells GRUB where to install the
boot record - it will be configured to look for its special files at the <c>root
( )</c> location that you specified.  In my case, I want the boot record on the
MBR of the hard drive, so I simply specify <path>/dev/hda</path> (also known as <path>(hd0)</path>).  If I were using
another boot loader and wanted to set up GRUB as a secondary boot-loader, I
could install GRUB to the boot record of a particular partition.  In that case,
I'd specify a particular partition rather than the entire disk.  Once the GRUB
boot record has been 
successfully installed, you can type <c>quit</c> to quit GRUB.  
<note> The tab completion mechanism of grub can be used from within grub, 
assuming you wrote <c> root (</c> and that you hit the TAB key, you would
be prompted with a list of the available devices (not only harddrives), 
hitting the TAB key having written <c> root (hd</c>, grub would print the
available harddrives and hitting the TAB key after writing <c> root (hd0,</c>
would make grub print the list of partitions on the first harddrive.

Checking the syntax of the grub location with completion should really help
to make the right choice.
</note>
Gentoo Linux is now
installed, but we need to create the <path>/boot/grub/grub.conf</path> file so that
we get a nice GRUB boot menu when the system reboots.  Here's how to do it.</p>

<impo>To ensure backwards compatibility with GRUB, make sure to make a link from
<i>grub.conf</i> to <i>menu.lst</i>. You can do this by doing
<c>ln -s /boot/grub/grub.conf /boot/grub/menu.lst </c>. </impo>

<p>Now, create the grub.conf file (<c>nano -w /boot/grub/grub.conf</c>), and add the following to it: </p>

<pre caption = "Grub.conf for GRUB">
default 0
timeout 30
splashimage=(hd0,0)/boot/grub/splash.xpm.gz

title=My example Gentoo Linux
root (hd0,0) 
kernel /boot/bzImage root=/dev/hda3 

<comment> #Below is for setup using hardware RAID</comment>
title=My Gentoo Linux on RAID
root (hd0,0)
kernel /boot/bzImage root=/dev/ataraid/discX/partY

<comment># Below needed only for people who dual-boot</comment>
title=Windows NT Workstation
root (hd0,5) 
chainloader +1
</pre>

<note>
(hd0,0) should be written without any spaces inside the parentheses.
</note>

<impo>
If you set up scsi emulation for an IDE cd burner earlier, then to get it to
actually work you need to add an "hdx=ide-scsi" fragment to the kernel
line in grub.conf (where "hdx" should be the device for your cd burner).
</impo>

<p>After saving this file, Gentoo Linux installation is complete.  Selecting the first option will
tell GRUB to boot Gentoo Linux without a fuss.  The second part of the grub.conf file is optional, and shows you how to
use GRUB to boot a bootable Windows partition.</p>

<note>Above, <path>(hd0,0)</path> should point to your "boot" partition
(<path>/dev/hda1</path> in our example config) and <path>/dev/hda3</path> should point to
your root filesystem.  <path>(hd0,5)</path> contains the NT boot
loader.</note>

<p>If you need to pass any additional options to the kernel, simply
add them to the end of the <c>kernel</c> command.  We're already passing one option
(<c>root=/dev/hda3</c>), but you can pass others as well.  In particular, you can
turn off devfs by default (not recommended unless you know what you're doing) by
adding the <c>gentoo=nodevfs</c> option to the <c>kernel</c> command.
</p>

<note>Unlike in earlier versions of Gentoo Linux, you no longer have to add 
<c>devfs=mount</c> to the end of the <c>kernel</c> line to enable devfs.  In rc6
devfs is enabled by default.
</note>

<p>If you are using hardware RAID, you must make a GRUB boot
disk. With hardware RAID
if you try to install grub from your chrooted shell it will fail. So we
will make a GRUB
boot disk, and when you reboot the first time we will install GRUB
to the MBR. Make your
bootdisk like this: </p>

<pre caption = "Creating a RAID Bootdisk">
# <c>mke2fs /dev/fd0</c>
# <c>mount /dev/fd0 /mnt/floppy</c>
# <c>mkdir -p /mnt/floppy/boot/grub</c>
# <c>cp /usr/share/grub/i386-pc/stage1 /mnt/floppy/boot/grub/</c>
# <c>cp /usr/share/grub/i386-pc/stage2 /mnt/floppy/boot/grub/</c>

# <c>grub</c>

grub&gt; <c>root (fd0)</c>
grub&gt; <c>setup (fd0)</c>
grub&gt; <c>quit</c>
</pre>


</body>
</section>
</chapter>

<chapter>
<title>Installation Complete!</title>
<section>
<body>
<p>Now, Gentoo Linux is installed.  The only remaining step is to exit the chrooted shell, 
udpate necessary configuration files,
safely unmount your partitions
and reboot the system: </p>

<pre caption = "Rebooting the System">
# <c>etc-update</c>
# <c>exit</c> 
<codenote>This exits the chrooted shell; you can also type <c>^D</c></codenote>
# <c>cd / </c>
# <c>umount /mnt/gentoo/boot</c>
# <c>umount /mnt/gentoo/proc</c>
# <c>umount /mnt/gentoo</c>
# <c>reboot</c>
</pre>

<note>
After rebooting, it is a good idea to run the <c>update-modules</c> command to create
the <path>/etc/modules.conf</path> file.  Instead of modifying this file directly, you should
generally make changes to the files in <path>/etc/modules.d</path>.
</note>

<impo>Remember if you are running hardware RAID, you must
use the bootdisk for the first reboot.
then go back and install grub the way everyone else did the first
time. You are done, congratulations</impo>

<p>If you have any questions or would like to get involved with Gentoo Linux development, 
consider joining our gentoo-user and gentoo-dev mailing lists
(there's a "click to subscribe" link on our <uri link="http://www.gentoo.org">main page</uri>).
We also have a handy <uri link="/doc/desktop.html">Desktop configuration guide</uri> that will
help you to continue configuring your new Gentoo Linux system, and a useful
<uri link="http://www.gentoo.org/doc/portage-user.html">Portage user guide</uri>
to help familiarize you with Portage basics. You can find the rest of the Gentoo Documentation
<uri link = "http://www.gentoo.org/index-docs.html">here</uri>.
Enjoy and welcome to Gentoo Linux!</p>
</body>
</section>
</chapter>

<chapter>
<title>Gentoo-Stats</title>
<body>
<p>The Gentoo Linux usage statistics program was started as an attempt to give the developers a way to find out about their user base.  The gentoo-stats program collects information about Gentoo Linux usage to help us in set priorities our development. It is a completely optional package, and would be greatly appreciated if you decide to use it. The system will assign an ID for your system, this is used to make sure that each system is counted only once.  The ID will not be used to identify your system, it will not be mached against an ip address or anything else.  Every precaution has been taken to assure your privacy in the development of this system.  The following are the things that we are monitoring right now through our "gentoo-stats" program:</p>
<ul>
<li>installed packages and their version numbers</li>
<li>CPU information: speed (MHz), vendor name, model name, CPU flags (like "mmx" or "3dnow")</li>
<li>memory information (total available physical RAM, total available swap space)</li>
</ul>

<p>We are aware of the fact that disclosure of sensitive information is a threat to most, if not all, Gentoo Linux users (just like it is to us developers as well). The following is a list of things we don't transmit in this survey, and never will:</p>
<ul>
<li>Sensitive information, such as e-mail addresses, passwords, configuration data, shoe size...</li>
<li>The IP number your data transmission originates from will never be logged in such a way that we can identify you. There are no "IP number/system ID"  pairs.</li>
</ul>

<p>The following is a list of things we plan on in the future:</p>
<ul>
<li>Monitoring the Gentoo Linux profile you're using (that is, where your /etc/make.profile link is pointing to).</li>
<li>Number of network interfaces.</li>
<li>You will get to decide what information is to be transmitted and what is not to be disclosed.</li></ul>

<p>The installation is easy - just run the following command: </p>

<pre caption = "Emerging Gentoo-Stats">
#<c>emerge gentoo-stats</c>
</pre>

<p>you can run the client the first time to get your system ID with this command: </p>

<pre caption = "Obtaining a System ID">
#<c>gentoo-stats --new</c>
</pre>

<p>After that the program should be run as a cron job at regular intervals using this command:</p>

<pre caption = "Running Gentoo-Stats on a Regular Basis">
#  <c>gentoo-stats --update &lt;SYSTEMID&gt;</c>
   <codenote>replace &lt;SYSTEMID&gt; with the ID given to you on the second step</codenote>
</pre>

</body>
</chapter>




</guide>
