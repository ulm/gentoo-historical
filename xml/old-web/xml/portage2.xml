<?xml version='1.0'?>
<guide>
<title>Portage2 Development</title>
<author title="Core Developer"><mail link="gbevin@gentoo.org">
Geert Bevin</mail>
</author>

<abstract>Provides all the information required to start developing on Portage2</abstract>

<version>1.0</version>
<date>22 Mar 2002</date>

<chapter>
<title>Installation</title>
<section>
<title>Requirements</title>
<body>
<p>Portage2 is a complete, from the ground up, rewrite of the portage package
manager. It's being implemented entirely in c++ and relies on a number of
required applications and libraries before being able to function correctly.</p>

<p>The following packages all have to be compiled and installed on your system.
After that is done, just type <c>make</c> in the Portage2 distribution directory.
</p>

<ul>
<li><p>sys-devel/gcc-3.0.4 :</p></li>

  <p>Portage2 requires this version of gcc. Sadly, it's currently not possible to
  install this alongside gcc2. The following options are available to you :</p>
  
  <ol>
  <li><p>Build everything from source and keep gcc3 as the default compiler</p></li>
  
     <pre caption="Installing gcc v3 safely">$ /usr/lib/portage/bin/quickpkg /var/db/pkg/sys-devel/gcc-2.95.3-r5/
$ ebuild /usr/portage/sys-devel/gcc/gcc-3.0.4-r1.ebuild merge
$ ebuild /var/db/pkg/sys-devel/gcc-2.95.3-r5/gcc-2.95.3-r5.ebuild unmerge</pre>
	
	 <p>Now your system uses gcc3 by default and you've saved a binary copy of gcc2
	 to <path>/usr/portage/packages/All/gcc-2.95.3-r5.tbz2</path>. This ensures that you can
	 go back to gcc2 at any time.</p>
	
	 <p>Compile the packages below with your new gcc v3. If you leave this version
	 installed, you'll run into incompatible packages sooner or later. The best
	 option is to fix them and submit the changes, this will make the transition
	 to gcc3 as the default gentoo compiler much easier.</p>
	 

  <li><p>Build everything from source, make gcc2 the default compiler and keep a
     privately installed version of gcc3 available for portage2 compilation.</p></li>
  
     <p>Start with 1.</p>
  
	 <p>Instead of using gcc3 as your default compiler for any system compilation,
	 you can install your own private copy of gcc3 to <path>/opt/gcc-3</path> and use the
	 provided <c>switch_to_gcc3.sh</c> script in the portage2 directory before
	 starting to compile portage2. To perform this gcc3 installation, do the
	 following :</p>
	 
	 <pre caption="Install your personal copy of gcc v3 and restore gcc v2 as the default compiler">$ ./configure --prefix=/opt/gcc-3; make bootstrap-lean; make install
$ ebuild /var/db/pkg/sys-devel/gcc-3.0.4-r1/gcc-3.0.4-r1.ebuild unmerge
$ emerge --usepkg sys-devel/gcc</pre>
  
  <li><p>Install the binary packages and keep gcc3 as the default compiler</p></li>
  
     <p>There are binary packages available, built for i686. You can download them
	 from <uri link="#_sect2">here</uri>. After downloading them, put
	 them in <path>/usr/portage/packages/All</path> and use <c>emerge --usepkg</c> for any
	 of the emerge operations in this document.</p>
  </ol>

<li><p>x11-libs/tinyqt :</p></li>

  <p>Stripped down version of Qt 3.0.2 for console development.</p>
  <p>Portage2 uses it as a backend library for all lowlevel stuff and to make c++
  generally a nicer programming experience.</p>
  
<li><p>dev-util/qtunit :</p></li>

  <p>QtUnit is a unit testing framework for c++.</p>
  <p>Portage2 development is driven by unittests. This makes us only implement
  what's really needed and ensures that all code continues to behave as
  expected. The build process automatically runs the entire testsuite at the
  end.</p>

<li><p>dev-util/pccts :</p></li>

  <p>An embedded C/C++ parser generator.</p>
  <p>Portage2 contains an integrated query language called PQL (Package Query
  Language). The lexical scanning, parsing and abstract tree creation is done
  through the facilities offered by pccts.</p>

<li>dev-db/firebird :</li>

  <p>Firebird is an embedded relational database offering many SQL-92 features.</p>
  <p>Portage2 stores its package database by using the interfaces and
  functionalities offered by this database engine. Its rich featureset, small
  memory footprint and easy embeddebility makes this a great enhancement on
  the previous filesystem-based database.</p>

<li>dev-libs/ibpp :</li>

  <p>A C++ client API for firebird 1.0.</p>
  <p>Portage2 uses this api to be able to access firebird through c++ constructs
  instead of the native c api.</p>
</ul>
</body>
</section>
<section>
<title>Binary packages</title>
<body>
	<p>The following packages have all been compiled for a i686 architecture with gcc3.
	Download them if you don't feel like compiling these from source.</p>
	<table>
		<tr>
			<th>Package</th>
			<th>Size (bytes)</th>
			<th>Archive</th>
		</tr>
		<tr>
			<ti>Firebird 1.0 r1</ti>
			<ti><i>1.940.236</i></ti>
			<ti><uri link="portage2/binaries/firebird-1.0-r1.tbz2">firebird-1.0-r1.tbz2</uri></ti>
		</tr>
		<tr>
			<ti>Gcc 3.0.4 r1</ti>
			<ti><i>15.290.054</i></ti>
			<ti><uri link="portage2/binaries/gcc-3.0.4-r1.tbz2">gcc-3.0.4-r1.tbz2</uri></ti>
		</tr>
		<tr>
			<ti>Ibpp 1.0.5.2 r1</ti>
			<ti><i>167.984</i></ti>
			<ti><uri link="portage2/binaries/ibpp-1.0.5.2-r1.tbz2">ibpp-1.0.5.2-r1.tbz2</uri></ti>
		</tr>
		<tr>
			<ti>Pccts 1.33.32 r1</ti>
			<ti><i>394.150</i></ti>
			<ti><uri link="portage2/binaries/pccts-1.33.32-r1.tbz2">pccts-1.33.32-r1.tbz2</uri></ti>
		</tr>
		<tr>
			<ti>Qt 3.0.2</ti>
			<ti><i>5.266.907</i></ti>
			<ti><uri link="portage2/binaries/qt-3.0.2.tbz2">qt-3.0.2.tbz2</uri></ti>
		</tr>
		<tr>
			<ti>QtUnit 0.9.6</ti>
			<ti><i>233.902</i></ti>
			<ti><uri link="portage2/binaries/qtunit-0.9.6.tbz2">qtunit-0.9.6.tbz2</uri></ti>
		</tr>
		<tr>
			<ti>TinyQt 3.0.2</ti>
			<ti><i>1.283.329</i></ti>
			<ti><uri link="portage2/binaries/tinyqt-3.0.2.tbz2">tinyqt-3.0.2.tbz2</uri></ti>
		</tr>
	</table>
</body>
</section>
</chapter>
<chapter>
<title>Documentation</title>
<section>
<title>Overview</title>
<body>
<p>The following links contain documentation that you should read before starting to
program on Portage2. Every developer has to follow what's explained. If you disagree
with something, submit a changement request so that the other developers can comment.
Don't ever silently violate the standards since then we'll end up with a non-uniform
and unmaintainable codebase</p>
<ul>
	<li><p>C++ coding standard (todo)</p></li>
	<li><p>Design documentation (todo)</p></li>
</ul>
</body>
</section>
</chapter>

</guide>
