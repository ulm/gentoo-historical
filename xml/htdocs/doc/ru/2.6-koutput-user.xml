<?xml version='1.0' encoding="UTF-8"?>
<!-- REV: 1.5 -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ru/Attic/2.6-koutput-user.xml,v 1.1 2004/10/28 08:44:27 sergey Exp $ -->

<guide link="/doc/ru/2.6-koutput-user.xml">

<title>Ядра 2.6 и "koutput"</title>
<author title="Developer">
  <mail link="latexer@gentoo.org">Peter Johanson</mail>
</author>
<author title="Editor">
  <mail link="antifa@gentoo.org">Ken Nowack</mail>
</author>
<author title="Editor">
  <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>
<author title="Translator">
  <mail link="gclion@mail.ru">Cyrill V. Gorcunov</mail>
</author>

<abstract>
В данном руководстве рассматривается использование нового метода "koutput"
в Gentoo, для обработки ядер 2.6 и модулей ядра.
</abstract>

<license/>

<version>1.1</version>
<date>March 26, 2004</date>

<chapter>
<title>Обзор</title>
<section>
<body>

<p>
Ядро 2.6, помимо других вещей, предоставляет много улучшений в инфраструктуре
сборки ядра (системы "kbuild"). Среди новых функций была добавлена возможность
вывода любых файлы созданных ядром, в отдельное место.
Это предоставляет несколько преимуществ перед старыми методами:
</p>

<ul>
  <li>
    Все пользователи могут использовать одни и те же исходники для сборки ядра,
    выводя результаты в некоторое место в их домашней директории.
  </li>
  <li>
    Могут собираться ядра для различных целевых архитектур, и сгенерированные
    файлы для каждой архитектуры не потеряются.
  </li>
  <li>
    Каталог <path>/usr</path> может монтироваться в режиме только для чтения и
	это не помешает генерировать и переконфигурировать ядро.
  </li>
  <li>
    Внешние модули могут собираться без требования доступа на запись в
    каталог <path>/usr/src/linux</path>
  </li>
</ul>

<p>
Последнее преимущество особенно важно, т.к. ранее Portage нуждался во
временном доступе на запись в директорию на реальной файловой системе,
для компилирования внешних модулей для дерева исходников ядра 2.6. Если
вы <b>отказываетесь</b> от использования koutput для ядра 2.6, большинство
модулей вызовет сбой из-за этого ограничения. Чтобы разрешить Portage
запись в <path>/usr/src/linux</path> в течении сборки модуля при помощи
emerge, вы можете использовать config-kernel:
</p>

<note>
В этом руководстве рассмотрены не все свойства config-kernel. Для
дополнительной информации смотрите <b>man config-kernel</b>
</note>

<pre caption="Установка доступа записи в /usr/src/linux">
# <i>config-kernel --allow-writable yes</i>
</pre>

<p>
Позже, в любое время, вы можете вернуть обратно ограничение
доступа по записи, снова используя config-kernel.
</p>

<pre caption="Отключение доступа на запись в /usr/src/linux">
# <i>config-kernel --allow-writable no</i>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Преимущества</title>
<section>
<body>

<p>
Возможно, вы спрашиваете себя: "Зачем мне беспокоиться?". Проблема, из-за
которой потребовалась разработка новых функций koutput, фактически проявлялась
во время сборки модулей ядра (при помощи ebuild-скриптов) таких как nvidia-kernel
или hostap-driver. Эти ebuild-скрипты используют для компилирования систему
сборки ядра, однако их сборка требует обновления файлов в <path>
/usr/src/linux</path>, что приводит к нарушению правил sandbox и, как
следствие, к сбою процесса сборки.
</p>

<note>
Gentoo <b>sandbox</b> - это система которая предотвращает запись портежами 
в реальную файловую систему, до тех пор, пока не закончится финальный шаг
установки пакета.
</note>

<p>
Несколько последовательных шагов могут быть предприняты для решения этой проблемы.
Короче, собираемое ядро должно выводить все файлы в каталог отличный от того, где
проходит процесс сборки, позже, компилируемые внешние модули должны
делать <b>тоже самое</b>, только они выводят свои файлы в поддиректорию временного
каталога, где собирается ядро. Разрешая модулям выводить свои собираемые файлы
в доступный для записи каталог, мы предотвращаем появление ошибок sandbox.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Включение koutput</title>
<section>
<body>

<p>
Ядра 2.6 определяют куда выводить их файлы по двум переменным окружения -
<c>KBUILD_OUTPUT</c> и <c>O</c>. Переменная <c>KBUILD_OUTPUT</c> должна
быть установлена в окружении и может быть переопределена в командной строке,
путем задания нового значения переменной <c>O</c>, например:
</p>

<pre caption="Установка вывода вручную">
# <i>cd /usr/src/linux></i>
# <i>export KBUILD_OUTPUT="/var/tmp/kernel-output/2.6.4"</i>
# <i>mkdir /var/tmp/kernel-output/2.6.4</i>
<comment>Устанавливаем расположение каталога для вывода и проверяем, что
он существует</comment>
# <i>make menuconfig</i>
<comment>Сгенерированный .config оказывается в /var/tmp/kernel-output/2.6.4</comment>
# <i>make O=/home/joe/kernels/2.6.4 menuconfig</i>
<comment>Сгенерированный .config теперь расположен в /home/joe/kernels/2.6.4</comment>
</pre>

<p>
Инструмент Gentoo <b>config-kernel</b> предоставляет механизм для автоматизации
этого процесса. Используя config-kernel, вы можете задать префикс, куда ядро,
устанавливаемое портеджем, будет выводить свои файлы.
</p>

<pre caption="Подготовка окружения при помощи config-kernel">
# <i>config-kernel --output-dir /home/joe/kernels</i>
</pre>

<p>
Вышеуказанная команда приведет к тому, что все новые устанавливаемые
ядра будут выводить сои файлы в <path>/home/joe/kernels/KV</path>, где
<b>KV</b> - это версия ядра. Для установки вывода по умолчанию,
который для Gentoo является <path>/var/tmp/kernel-output/</path>, вы можете
ввести команду:
</p>

<pre caption="Подготовка окружения при помощи config-kernel">
# <i>config-kernel --output-dir default</i>
</pre>

<p>
Пользователь так же может конвертировать уже установленные ядра 2.6 для
использования нового метода, при помощи config-kernel. Обратите внимание,
что это вызовет удаление всех предварительно сгенерированных файлов,
так как <c>make mrproper</c> должно быть запущено в течение данного процесса.
</p>

<pre caption="Конвертирование текущего ядра">
# <i>config-kernel --make-koutput /usr/src/linux-2.6.3</i>
</pre>

<p>
Эта команда конвертирует ядро найденное в <path>/usr/src/linux-2.6.3</path>,
для вывода в другой каталог. Если директория для вывода была установлена
предварительно с помощью <c>--output-dir /some/path</c>, тогда будет
использоваться этот префикс. Иначе будет использоваться путь по умолчанию,
который в Gentoo установлен на <path>/var/tmp/kernel-output/KV</path>.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Последствия</title>
<section>
<body>

<p>
После конфигурирования для использования другой директории для вывода,
остаются незаметными при конфигурировании и установке
ядра. Есть несколько ключевых файлов, о изменении месторасположения которых
вы должны знать. Главные файлы, к которым это относится, это .config и 
сгенерированный bzImage (после компилирования ядра). Ниже приведена таблица,
отображающая старое и новое расположения этих ключевых файлов. В таблице принято,
что ядро 2.6.4 выводит свои файлы в <path>/var/tmp/kernel-output/2.6.4</path>
(по умолчанию в Gentoo).
</p>

<table>
<tr>
  <th>Старое расположение</th>
  <th>Новое расположение</th>
</tr>
<tr>
  <ti>/usr/src/linux/.config</ti>
  <ti>/var/tmp/kernel-output/2.6.4/.config</ti>
</tr>
<tr>
  <ti>/usr/src/linux/arch/i386/boot/bzImage</ti>
  <ti>/var/tmp/kernel-output/2.6.4/arch/i386/boot/bzImage</ti>
</tr>
</table>

<p>
Это изменение расположения важно. Новое расположение файлов сильно сказывается
на двух процессах - копирование файла .config в соответствующее место при
обновлении исходников ядра, и копирование нового скомпилированного bzImage
в <path>/boot</path>. В частности, при копировании .config, важно помнить,
что вам необходимо скопировать его из директории вывода старого ядра в
директорию вывода нового ядра. Для демонстрации того, как обновление ядра
может быть сделано при помощи koutput, приводится пример обновления из
vanilla-sources-2.6.4 в vanilla-sources-2.6.5:
</p>

<note>
Здесь мы принимаем, что префикс вывода установлен на
<path>/var/tmp/kernel-output</path> и что исходники ядра уже установлены
</note>

<pre caption="Обновление ядра при помощи koutput">
# <i>cp /var/tmp/kernel-output/2.6.4/.config /var/tmp/kernel-output/2.6.5/</i>
<comment>Копирование нашего .config в новую директорию вывода</comment>
# <i>config-kernel --set-symlink 2.6.5</i>
# <i>cd /usr/src/linux</i>
<comment>Переходим в наше новое дерево исходников</comment>
# <i>make oldconfig</i>
# <i>make &amp;&amp; make modules_install</i>
<comment>Компилируем наше новое ядро и модули</comment>
# <i>mount /boot</i>
# <i>cp /var/tmp/kernel-output/2.6.5/arch/i386/boot/bzImage /boot/</i>
# <i>umount /boot</i>
<comment>Устанавливаем образ нового ядра</comment>
</pre>

<p>
Для модулей ядра собираемых вне ядер с использованием новой системы, ничего
более не должно потребоваться, кроме установки желаемого ядра при помощи
emerge (как обычно). Во время написания этого руководства, до сих пор некоторые
модули ядра конвертируются для использования новой установки, или находятся
в стадии тестирования. Если стабильная версия модуля ядра сбоит, попробуйте
установить версию <b>~arch</b> вначале:
</p>

<pre>
# <i>ACCEPT_KEYWORDS='~x86' emerge foo</i>
<comment>Эта команда устанавливает тестируемую версию пакета foo</comment>
</pre>

<p>
Если сбои продолжаются, создайте отчет об ошибке в <uri
link="http://bugs.gentoo.org">http://bugs.gentoo.org</uri>,
ebuild-скрипт для сборки модуля ядра будет обновлен для использования
в новой системе так скоро, как только это возможно.
</p>

</body>
</section>
</chapter>
</guide>
