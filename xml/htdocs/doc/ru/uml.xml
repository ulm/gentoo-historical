<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ru/uml.xml,v 1.7 2006/04/01 20:03:27 achumakov Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/ru/uml.xml" lang="ru" disclaimer="draft">
<title>Руководство разработчика Gentoo Linux по тестированию системы
в пользовательском режиме (User-Mode Linux).</title>
<author title="редактор">
  <mail link="g2boojum@gentoo.org">Grant Goodyear</mail>
</author>
<author title="редактор">
  <mail link="zhen@gentoo.org">John Davis</mail>
</author>
<author title="переводчик">
  <mail link="yuribff@wolf.istc.kiev.ua">Юрий Борисов</mail>
</author>
<author title="редактор перевода">
  <mail link="zenkov@gentoo.org">Иван Зенков</mail>
</author>

<abstract>
Данное руководство покажет разработчикам Gentoo Linux, как установить
и использовать user-mode linux для тестирования потенциально сбойных
системных изменений.
</abstract>

<version>0.07</version>
<date>2003-05-20</date>

<chapter>
<title>Установка User-Mode Linux</title>
<section>
<body>

<p>
Web сайт, посвящённый user-mode
(<uri>http://user-mode-linux.sourceforge.net/</uri>), даёт следующие
определение: "user-mode linux позволяет пользователям запускать Linux
внутри себя".  Более конкретно, user-mode linux предоставляет
виртуальные машины, в которых пользователь может запускать "глючное"
ПО, экспериментировать с новыми ядрами Linux и дистрибутивами, а также
копаться во внутренностях без риска для вашей основной системы.
Изменение основных (core) пакетов, таких как <e>sys-apps/baselayout</e> или
<e>sys-libs/glibc</e>, чревато крахом системы и невозможностью
загрузки; с user-mode linux мы можем тестировать эти изменения, не
беспокоясь о крахах "живой" системы.
</p>

<p>
Установка user-mode linux чрезвычайно похожа на нормальную установку
ядра.  Сначала установим исходники ядра (пропатченного для user-mode
linux), а затем как обычно, настроим ядро с user-mode linux:
</p>

<pre caption="">
# <i>emerge sys-kernel/usermode-sources</i>
# <i>cd /usr/src/uml/linux</i>
# <i>make menuconfig <comment>ARCH=um</comment></i>
# <i>make linux <comment>ARCH=um</comment></i>
# <i>cp linux /usr/local/bin/linux</i>
</pre>

<warn>Фрагмент <e>ARCH=um</e> очень <e>важен</e>!</warn>

<impo>В ядре user-mode linux, для нормальной загрузки Gentoo системы,
должна быть <e>выключена</e> функция автоматического монтирования
<path>/dev</path> (devfs) по умолчанию.  Также, вы должны убедиться,
что <e>tmpfs</e> ("Virtual Memory Filesystem") скомпилирован, так как
по умолчанию загрузочные скрипты Gentoo linux сохраняют свою
информацию в небольшой tmpfs партиции.  Скомпилированное ядро,
доступное с сайта user-mode, автоматически монтирует <path>/dev</path>,
и не скомпилировано с tmpfs; советую с ним даже не связываться.</impo>

<p>
Я настоятельно рекомендую прочесть документацию по user-mode linux, но
основная идея, это запуск программ <path>/usr/local/bin/linux</path>
разгрузка ядра user-mode и попытка сохранить системные данные в файле
<path>root_fs</path> который расположен в текущем рабочем каталоге.
</p>

<p>Не помешает также установить user-mode linux tools.</p>

<pre caption="">
# <i>emerge sys-apps/usermode-utilities</i>
</pre>

<p>
Эти инструменты позволяют организовать сетевую работу (и не только)
между виртуальной системой user-mode linux и базовой системой.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Создание root_fs</title>

<section>
<title>Делаем Gentoo chroot</title>
<body>

<p>
Файл <path>root_fs</path> необходим user-mode linux, это файл, содержащий в себе
файловую систему Gentoo Linux.  Для его создания у вас должна быть
включена поддержка Loopback устройств (Loopback device) в основном
(не-user-mode) ядре.
</p>

<p>
Создание самого файла <path>root_fs</path> будет нашим последним
шагом.  Для начала же мы создадим файловую систему Gentoo обыкновенным
chroot.  Нам понадобятся stage tarball, которые могут быть загружены с
сайта, взяты с liveCD, или с liveCD.iso.
</p>

<pre caption="Монтирование a liveCD .iso">
# <i>mkdir /mnt/loop</i>
# <i>mount -o loop /path/to/build-&lt;TAB&gt;.iso /mnt/loop</i>
</pre>

<p>
Установка chroot аналогична обычной установке Gentoo Linux.
</p>

<pre caption="">
# <i>mkdir /mnt/gentoo</i>
# <i>cd /mnt/gentoo</i>
# <i>tar xvjpf /path/to/build-&lt;TAB&gt;.tar.bz2</i>
</pre>

<p>
Выходим и размонтируем .iso образ.  Больше он нам не понадобится.
</p>

<pre caption="">
# <i>cp /etc/resolv.conf /mnt/gentoo/etc/</i>
# <i>mount -o bind /proc /mnt/gentoo/proc</i>
# <i>mkdir -p /mnt/gentoo/usr/portage/distfiles</i>
# <i>mkdir -p /mnt/gentoo/usr/portage/packages</i>
# <i>mount -o bind /usr/portage/distfiles /mnt/gentoo/usr/portage/distfiles</i>
# <i>mount -o bind /usr/portage/packages /mnt/gentoo/usr/portage/packages</i>
# <i>chroot /mnt/gentoo /bin/bash</i>
<!--per bug 16134, added emerge sync to supress warning, etc-->
# <i>emerge sync</i>
# <i>env-update</i>
# <i>source /etc/profile</i>
</pre>

<p>
Благодаря связке (bind-mounting) <path>/usr/portage/distfiles</path> и
<path>/usr/portage/packages</path> нет необходимости скачивать или
компилировать уже установленные в основной системе пакеты.
</p>

<p>
Загружаемся (bootstrap) и устанавливаем систему в обычном порядке:
</p>

<pre caption="">
<!--removed the emerge sync below because it is done above-->
# <i>cd /usr/portage</i>
# <i>nano -w /etc/make.conf</i>
# <i>nano -w /etc/make.profile/packages</i> 
# <i>nano -w /usr/portage/profiles/package.mask</i>
# <i>scripts/bootstrap.sh &amp;&amp; emerge --usepkg system</i>
</pre>

<warn>
<!--Changed grub to virtual/bootloader-->
Отредактируйте файл <path>/etc/make.profile/packages</path> на предмет
удаления virtual/bootloader ebuild из системы по умолчанию (просто
удалите "*" из начала строки "*virtual/bootloader").
virtual/bootloader ebuild пытается монтировать
партицию /boot, которая отсутствует в нашем chroot.
</warn>

<note>
Проверьте <path>/etc/make.profile/packages</path> и
<path>/usr/portage/profiles/package.mask</path> что бы убедиться, что
любой пакет для тестирования которые вы хотите установить попадают под
маску.  Теперь scripts/bootstrap.sh скомпилирует загрузочные пакеты из
исходников.  Для использования уже созданных пакетов, добавьте alias
emerge="emerge --usepkg" вверх bootstrap скриптов.
</note>

<p>
Добавьте любые, необходимые вам дополнительные пакеты.  Если хотите,
выберете любое имя для своей виртуальной Gentoo системы.  В
<path>/etc/fstab</path> замените <path>/dev/ROOT</path> на
<path>/dev/ubd/0</path>, со следующими типами fs ext2, ext3, или
reiserfs.  Установите <path>/dev/SWAP</path> в
<path>/dev/ubd/1</path>, и закомментируйте <path>/dev/BOOT</path>.
</p>

<p>
Выйдите из chroot, размонтируйте все точки монтирования,
разархивируйте новый дистрибутив Gentoo и проведите чистку:
</p>

<pre caption="">
# <i>exit</i>
# <i>umount /mnt/gentoo/usr/portage/distfiles</i>
# <i>umount /mnt/gentoo/usr/portage/packages</i>
# <i>umount /mnt/gentoo/proc</i>
# <i>du -ks /mnt/gentoo</i>
<!-- wtf is this? 261744 /mnt/gentoo-->
<!-- added dir change to be more explicit-->
# <i>cd /mnt/gentoo</i>
# <i>tar cvjpf ~/gentoo.tbz2 *</i>
# <i>cd</i>
# <i>rm -rf /mnt/gentoo</i>
</pre>

<p>На этом шаге, не забудьте установить root пароль.</p>

<pre caption="Установка root пароля">
# <i>passwd</i>
</pre>

<p>
Возможно вы также захотите еще раз взглянуть на заключительные шаги по 
установке из <uri link="/doc/ru/handbook/handbook-x86.xml">настольной книги 
Gentoo</uri>.
</p>

</body>
</section>

<section>
<title>Создание root_fs</title>
<body>

<p>
Наш Gentoo chroot занимает 300 MB, значит, для <path>root_fs</path>
понадобится минимум столько же.  Мы выберем 0.5 GB как самый разумный
размер.
</p>

<pre caption="">
# <i>dd if=/dev/zero of=root_fs seek=500 count=1 bs=1M</i>
# <i>mke2fs -F root_fs</i>
# <i>mount -o loop root_fs /mnt/loop</i>
# <i>tar xvjpf gentoo.tbz2 -C /mnt/loop</i>
# <i>umount /mnt/loop</i>
</pre>

<p>
Неплохо было бы иметь 0.5 GB, swap раздел.
</p>

<pre caption="">
# <i>dd if=/dev/zero of=swap_fs seek=500 count=1 bs=1M</i>
# <i>mkswap -f swap_fs</i>
</pre>

<p>
Теперь посмотрим работает ли всё это!
</p>

<pre caption="">
# <i>linux ubd0=root_fs ubd1=swap_fs</i>
</pre>

<note>
User-mode linux использует X терминалы (xterms) для виртуальных
консолей которые запускаются при загрузке, убедитесь, что терминал с
которого вы запускаете user-mode linux имеет корректно установленную
переменную $DISPLAY (включая права xhost/xauth).
</note>

<p>
При некотором везении вы сможете зайти в вашу user-mode linux Gentoo
систему.  Единственное, что осталось сделать для получения
полнофункционального user-mode linux, это настроить сетевое соединение
с основной системой.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Сеть</title>

<section>
<body>

<p>
Благодаря Мартину Шлеммеру (Martin Schlemmer (Azarah)), я знаю, как
поднять сеть из под user-mode системы.  Идея состоит в том, что
настраивается частная сеть (private network) состоящая из основной и
user-mode системы.  User-mode система направляет все свои пакеты
основной системе, которая перенаправляет их в сеть.  Убедитесь, что
ядро основной системы имеет поддержку Networking --> IP: Netfilter
Configuration --> IP tables support --> Full NAT --> MASQUERADE target
support и Network Device Support --> Ethertap network tap
скомпилированы как модули; затем проделываем следующее на
<e>основной</e> машине:
</p>

<pre caption="">
# <i>modprobe ethertap</i>
# <i>modprobe iptable_nat</i>
# <i>iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</i>
# <i>echo 1 > /proc/sys/net/ipv4/ip_forward</i>
</pre>

<p>
Строка iptables включает IP Masquerading между частной сетью в которую
включена наша user-mode system и internet (в нашем случае, через
<c>eth0</c>).  Строка echo включает переадресацию пакетов между
частной сетью и интерфейсом в который включен шлюз (eth0 для нас).
</p>

<p>
Теперь запустим user-mode system и посмотрим работает ли сеть.
</p>

<pre caption="">
# <i>linux ubd0=root_fs ubd1=swap_fs eth0=ethertap,tap0,,192.168.0.254</i>
<comment>(Заходим в user-mode систему)</comment>
# <i>ifconfig eth0 192.168.0.1 up</i>
# <i>ping -c 2 192.168.0.254</i>
PING 192.168.0.254 (192.168.0.254): 56 octets data
64 octets from 192.168.0.254: icmp_seq=0 ttl=255 time=0.8 ms
64 octets from 192.168.0.254: icmp_seq=1 ttl=255 time=0.6 ms

--- 192.168.0.254 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 0.6/0.7/0.8 ms
<i>route add default gw 192.168.0.254</i>
<i>netstat -rn</i>
Kernel IP routing table
Destination  Gateway        Genmask        Flags MSS Window irtt Iface
192.168.0.0  0.0.0.0        255.255.255.0  U      40 0         0 eth0
0.0.0.0      192.168.0.254  0.0.0.0        UG     40 0         0 eth0
<i>scp user@192.168.0.254:/etc/resolv.conf /etc/resolv.conf</i> <comment>(если нужно)</comment>
<i>ping -c 2 www.gentoo.org</i>
PING www.gentoo.org (207.170.82.202): 56 octets data
64 octets from 207.170.82.202: icmp_seq=0 ttl=240 time=119.6 ms
64 octets from 207.170.82.202: icmp_seq=1 ttl=240 time=92.0 ms

--- www.gentoo.org ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 92.0/105.8/119.6 ms
</pre>

<p>
В системе user-mode мы выделили user-mode eth0 интерфейсу локальный IP
адрес 192.168.0.1 и подняли интерфейс.  Основная система имеет
локальный IP адрес 192.168.0.254, и мы пингуем её, что бы убедиться,
что сеть работает.  Строка route добавляет шлюз, которым является
основная система, мы используем scp для получения рабочего
<path>/etc/resolv.conf</path> (если необходимо), и пингуем www.gentoo.org
для проверки разрешения имён (и общей доступности internet) из нашей
user-mode системы.  Теперь user-mode система установлена!
</p>

</body>
</section>
</chapter>

<chapter>
<title>Тестирование .iso</title>

<section>
<body>

<p>
Наверное, настоящим идеалом тестирования Gentoo Linux является
загрузка .iso с user-mode linux и полная установка Gentoo внутри
виртуальной системы user-mode linux.
</p>

<p>
Загрузка .iso, или в действительности initrd из .iso, очень проста.
</p>

<pre caption="">
# <i>mount -o loop /path/to/build-&lt;TAB&gt;.iso /mnt/loop</i>
# <i>cp /mnt/loop/isolinux/rescue.gz .</i>
# <i>linux load_ramdisk=1 prompt_ramdisk=0 ramdisk_size=22000 \</i>
&gt; <i>initrd=rescue.gz root=/dev/ram0 ubd0=root_fs ubd1=swap_fs \</i>
&gt; <i>ubd2=/dev/cdroms/cdrom0 eth0=ethertap,tap0,,192.168.0.254</i>
</pre>

<p>
Теперь вы должны буквально следовать документации по установке
Gentoo, помня, что файловая система root это <path>/dev/ubd/0</path>,
раздел swap это <path>/dev/ubd/1</path>, CD-ROM это <path>/dev/ubd/2</path>.
</p>

</body>
</section>
</chapter>

</guide>
