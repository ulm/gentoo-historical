<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link = "/doc/ru/vi-guide.xml">
<!--Revision 1.6-->
<title>Изучение vi по шпаргалке</title>
<author title="Author">
	<mail link="drobbins@gentoo.org">
		Daniel Robbins</mail></author>
<author title="Author">
	<mail link="stocke2@gentoo.org">
		Eric Stockbridge</mail></author>
<author title="Переводчик">
		Alexey Potanin</author> 
<author title="Редактор">
		<mail link="svyatogor@gentoo.org">
			Sergey Kuleshov</mail></author> 

<abstract>
	Это руководство научит Вас пользоваться редактором vi, 
	используя для ускорения учебного процесса "шпаргалку". 
	Пусть это будет первым руководством по vi для начинающих.
</abstract>

<version>1.1</version>
<date>28 Feb 2003</date>

<chapter>	<title>Начало начал</title>
	<section>	<title>Введение</title>
		<body>

		<p>	Этот учебник покажет Вам как использовать мощный экранный
		редактор vi.  Это руководство разработано так, чтобы Вы стали искусным 
		пользователем vi без затрат огромного количества времени, используя специальный 
		ускоренный "шпаргалочный" метод.  Здесь Вы узнаете как перемещаться по тексту,
		редактировать текст, использовать добавление, копирование и вставку текста, а также 
		важные расширения vim, такие как экранный режим и многооконное редактирование.
		</p>

		<p>	Если Вы вообще не умеете пользоваться vi, или считаете его неудобным, 
		то Вам стоит уделить внимание этому учебнику, чтобы овладеть одной из наиболее 
		популярных и мощных программ экранного редактирования для Linux/UNIX.
		</p>

		</body>
	</section>

	<section>	<title>Об этом учебнике</title>
		<body>

		<p>	Одна мелочь делает изучение vi утомительным -- у vi множество команд.  
		Чтобы эффективно использовать vi, Вам нужно запомнить достаточно много.  
		Это может занять уйму времени, и потому одна из задач этого учебника -- не 
		допустить его растранжиривания.  Для начала, давайте разберемся -- каким конкретно 
		способом я смогу помочь Вам запомнить эту кучу команд за кратчайшее время?
		</p>

		<p>	Чтобы справиться с этой задачей, мы вместе, читая учебник, постепенно
		составим шпаргалку.  На этой шпаргалке будут записаны все важные команды vi. После 
		завершения этого учебника Вы сможете обратиться к шпаргалке, если забудете какую-то 
		команду.  Позднее, запоминая команды, Вы постепенно станете все меньше и меньше
		зависеть от шпаргалки.  Используя шпаргалочною технику, выучить, как пользоваться vi,
		Вы сможете быстрее, чем когда бы то ни было ранее!
		</p>
	
		</body>
	</section>

	<section>	<title>Процесс обучения</title>
		<body>

		<p>	В этом учебнике используются несколько приемов для облегчения изучения.
		Во-первых, описывается как работает какая-либо команда.  Затем Вам следует проверить
		работу этой команды на практике в редакторе.  После этого нужно записать команду
		на шпаргалке (для последующих обращений). Если Вы хотите изучить vi быстро, то важно
		проделать все эти шаги.  Проверка команды в редакторе и запись команды на шпаргалку
		помогают запомнить команду.
		</p>

		</body>
	</section>

	<section>	<title>Позвольте представить -- vim</title>
		<body>

		<p>	Существует множество версий vi, я представлю Вам версию vi называемую "vim".
		vim очень популярен, так как у него есть несколько дополнений, делающих vi немного приятнее
		(когда будут демонстрироваться специфичные для vim команды, я это отмечу).  Если Вам 
		нужно установить vim, Вы можете получить его на 
		<uri href="http://www.vim.org">http://www.vim.org</uri>.
		В придачу к улучшенному консольному vi, vim доступен также в виде gvim --
		прекрасного графического редактора, который может быть сконфигурирован для использования
		с великолепной библиотекой gui (графического интерфейса пользователя) GTK+. Здесь приведена
		картинка gvim из моей системы.  <uri link="#doc_chap9_sect1">(см. прим. переводчика)</uri>
		</p>

<figure link="../../../images/vishot-ru.png" 
	short="screenshot" 
	caption="Так выглядит gVIM"/>

		<p>
		Если vi Вам в новинку, попробуйте установить в своей системе gvim.  Использование
		vi в графической оболочке может кое в чем облегчить новичкам жизнь. 
		</p>

		</body>
	</section>
</chapter>

<chapter>	<title>Первые Шаги</title>
	<section>	<title>Открываем файл</title>
		<body>

		<p>	Перед использование vi для редактирования файлов Вам следует 
		узнать, как в vi перемещаться по файлу.  У vi множество команд перемещения, 
		многие из них мы сейчас рассмотрим.  Для этой части обучения найдите
		какой-нибудь малоценный текстовый файл (TODO: лучше на английском) 
		и загрузите его в vi напечатав:
		</p>
<pre>
$ vi myfile.txt
</pre>
		<p>	Если у Вас установлен vim, напечатайте <c>vim myfile.txt</c>.  
		Если Вы предпочитаете использовать gvim, наберите <c>gvim myfile.txt</c>. 
		<path>myfile.txt</path> должно быть именем текстового файла в Вашей системе.
		</p>

		</body>
	</section>

	<section>	<title>Внутри vi</title>
		<body>

		<p>
		После загрузки vi, на экране Вы должны увидеть часть загруженного Вами
		текстового файла.  Поздравляю -- Вы уже в vi!  В отличии от большинства редакторов,
		загрузившись, vi находится в специальном режиме, называемом "командным режимом".
		Это значит, что если вы нажмете клавишу "l"(строчная L), вместо появления "l"
		на месте курсора Вы увидите, что курсор всего лишь сдвинулся на один символ вправо.
		В командном режиме знаки, набираемые на клавиатуре, используются как команды
		для vi, а не как помещаемые в текст символы.  Один из наиболее важных типов
		команд -- это команды перемещения. Давайте рассмотрим некоторые из них.
		</p>

		</body>
	</section>
</chapter>

<chapter>	<title>Перемещаемся по документу</title>
	<section>	<title>Перемещения в vi, часть 1</title>
		<body>

		<p>	Находясь в командном режиме, Вы можете использовать клавиши
		<c>h</c>,<c>j</c>,<c>k</c> и <c>l</c> для перемещения курсора влево, вниз,
		вверх и вправо соответственно.  Если Вы используете современную версию vi, 
		Вы можете также с этой целью использовать клавиши со стрелками. 
		Клавиши <c>h</c>,<c>j</c>,<c>k</c> и <c>l</c> предпочтительнее, так как
		освоившись с ними Вы сможете перемещаться по файлу не размахивая руками
		над клавиатурой.  Попробуйте понажимать <c>h</c>,<c>j</c>,<c>k</c> и <c>l</c> 
		(а также клавиши со стрелками) для перемещения по текстовому файлу.
		Попробуйте использовать <c>h</c> пока не дойдете до начала строки.  
		Отметьте, что vi не даст Вам перескочить на предыдущую строку нажимая <c>h</c>,
		если Вы находитесь в начале строки.  Точно также он не позволит Вам перескочить
		на следующую строку нажимая <c>l</c> в конце строки.
		</p>

		</body>
	</section>

	<section>	<title>Перемещения в vi, часть 2</title>
		<body>

		<p>	vi предоставляет специальные команды для прыжков в начало и конец
		текущей строки.  Вы можете нажать <c>0</c> (ноль) чтобы перескочить на первый
		символ в строке, и <c>$</c> чтобы перескочить на последний символ в строке.
		Попробуйте и посмотрите.  
		</p>
		
		<p>	Поскольку у vi так много команд перемещения, его можно использовать в качестве 
		великолепного просмотрщика -- "pager"а (как команды more или less).  Используя vi 
		как просмотрщик, Вы очень быстро запомните все команды перемещения.
		</p>	

		<p>	Вы также можете использовать <c>&lt;Ctrl&gt;F</c> и <c>&lt;Ctrl&gt;B</c> 
		для перемещения вперед и назад сразу на страницу.  Современные версии vi (такие как vim)
		могут позволить использовать для этих целей клавиши PageUp и PageDown.
		</p>

		</body>
	</section>

	<section>	<title>Перемещение по словам, часть 1</title>
		<body>

		<p>	vi также позволяет Вам перемещаться влево и вправо по словам.
		Для перемещения на <i>первый символ следующего слова</i> нажмите <c>w</c>.
		Чтобы передвинуться на <i>следующий последний символ слова</i> нажмите <c>e</c>.
		Сдвинуться на <i>предыдущий первый символ слова</i> можно нажимая <c>b</c>. 
		Попробуйте, пожалуйста.
		</p>

		</body>
	</section>

	<section>	<title>Перемещение по словам, часть 2</title>
		<body>

		<p>	Позабавившись с командами перемещения по словам, вы могли заметить,
		что vi считает слова типа "foo-bar-oni" пятью различными словами!
		Это происходит потому, что vi по умолчанию разделяет слова пробелами 
		<i>или</i> знаками пунктуации (которые тоже считает словами).  
		Поэтому  foo-bar-oni считается пятью словами: "foo","-","bar","-" и "oni".
		</p>

		<p>	Иногда Вам так и надо, а иногда - нет.  К счастью, vi воспринимает
		понятие "большого слова".  vi разделяет большие слова <i>только пробелами и
		началами строк</i>.  Это значит, что foo-bar-oni состоит из пяти vi-слов, но
		является только одним большим словом vi.
		</p>

		</body>
	</section>

	<section>	<title>Перемещение по словам, часть 3</title>
		<body>

		<p>	Чтобы переместиться на следующее или предыдущее большое слово,
		Вы можете использовать <i>"заглавные"</i> команды перемещения по словам.
		Нажав <c>W</c>  Вы попадете на первый символ следующего большого слова,
		<c>E</c> -- на следующий последний символ большого слова, и <c>B</c> --
		на предшествующий первый символ большого слова.  Проверьте их работу,
		сравните соответствие команд перемещения по словам и по большим словам,
		почувствуйте разницу между ними.
		</p>

		</body>
	</section>

	<section>	<title>Дальние переходы</title>
		<body>

		<p>	Осталось рассмотреть еще несколько команд, и можно будет начинать
		их записывать на шпаргалку.  Вы можете использовать скобки --  <c>(</c> и <c>)</c>,
		чтобы перейти на начало предыдущего и следующего предложения.
		А еще Вы можете перескочить в начало параграфа -- текущего или следующего --
		используя команды <c>{</c> или <c>}</c> (фигурные скобки).
		Попробуйте и их.
		</p>

		</body>
	</section>
</chapter>

<chapter>	<title>Выход</title>
	<section>	<title>Выход</title>
		<body>

		<p>
		Мы рассмотрели основные команды перемещения, однако осталась еще пара команд,
		которые Вам необходимо знать.  Напечатав <c>:q</c> Вы должны выйти из vi.
		Если не получиться, значит Вы каким-то образом ухитрились изменить файл.
		Сообщить vi, что надо выйти отбросив изменения следует командой <c>:q!</c>. 
		Теперь Вы должны оказаться в командной строке системы.
		</p>

		<p>
		Любая команда в vi, начинающаяся с двоеточия (":"), называется командой ex-режима
		(an <i>ex-mode</i> command).  Это из-за того, что vi имеет встроенный не экранный
		редактор, зовущийся <e>ex</e>. Он может использоваться подобно sed для выполнения
		операций редактирования, ориентированных на строки.  Дополнительно, как мы только что
		видели, он может использоваться для завершения работы.  Если Вы случайно нажмете
		<c>Q</c> находясь в командном режиме, то можете оказаться в ex-режиме.  В этом случае
		Вы столкнетесь с приглашением ":", и нажатие на Enter будет сдвигать вверх
		содержимое экрана.  Для возврата к привычному vi-режиму просто наберите <c>vi</c>
		и нажмите Enter.
		</p>

		</body>
	</section>
</chapter>

<chapter>	<title>Шпаргалка</title>
	<section>	<title>Начало шпаргалки</title>
		<body>

		<p>	Мы рассмотрели несколько команд, и теперь самое время вписать их в нашу 
		шпаргалку.  Для шпаргалки Вам потребуется листок бумаги размером А4 или развернутый 
		тетрадный лист.  (На этoт лист надо будет втиснуть кучу информации!)  Здесь приведена 
		картинка моей шпаргалки после записи всех только что рассмотренных команд.  Постарайтесь 
		придерживаться моего размещения, если возможно, чтобы все уместилось на одной странице.
		</p>

<figure link="../../../images/vicheat-first-ru.png" 
	short="Шпаргалка" caption="Начало Шпаргалки"/>

		</body>

	</section>

	<section>	<title>Многогранный vi</title>
		<body>

		<p>
		Давайте продолжим наш беглый обзор команд.  В командном режиме Вы можете
		перескочить на конкретную строку напечатав <c>G</c>.  Чтобы оказаться на
		первой строке файла наберите <c>1G</c>.  Отметьте, что <c>G</c> - заглавная.
		</p>

		<p>
		Если желаете оказаться в очередном месте появления какого-либо текста --
		наберите <c>/&lt;regexp&gt;</c> и нажмите <c>enter</c>.  Замените только
		&lt;regexp&gt; разыскиваемым регулярным выражением.  Не смущайтесь, если
		не знаете как использовать регулярные выражения -- набрав <c>/foo</c> 
		окажетесь там, где далее по тексту встретится <i>foo</i>.
		Однако, если в образце поиска фигурируют символы <i>^</i>, <i>.</i>, <i>$</i> 
		или <i>\</i>, перед любым из них нужно ввести обратную наклонную черту
		- backslash (<i>\</i>).  К примеру, <c>/foo\.gif</c> займется поиском
		очередного появления "<i>foo.gif</i>".
		</p>

		<p>	Чтобы повторить выполнявшийся последним поиск, можете напечатать просто <c>//</c>.
		Можно поискать образец повторно, нажимая: 
		<c>n</c> - следующий или <c>N</c> - предыдущий.  
		Как обычно, посмотрите как работают эти команды в именно вашей версии редактора vi.
		</p>

		</body>
	</section>
</chapter>

<chapter>	<title>Сохранение и Редактирование</title>
	<section>	<title>Save(сохранить) и save as...(сохранить как...)</title>
		<body>

		<p>	Мы уже видели, как используя <e>ex</e>-команду <c>:q</c> выйти из vi.
		Пожелав сохранить сделанные изменения наберите команду <c>:w</c>.
		Если хотите сохранить свои труды в другом файле, напечатайте 
		<c>:w filename.txt</c> для записи их в файл <e>filename.txt</e>.
		Если хотите сохранить и выйти, введите команду <c>:x</c> или <c>:wq</c>.
		</p>

		<p>	В vim (и других потомках vi, типа elvis), Вы можете держать открытыми
		одновременно несколько буферов.  Введите команду <c>:sp filename.txt</c> и vim
		откроет файл <e>filename.txt</e> в новом окне, потеснив уже открытые.
		Команда <c>:sp</c> (без имени файла) откроет дополнительное окно для активного
		буфера.  Для перехода между окнами нажмите 
		<c>&lt;Ctrl&gt;w</c>,<c>&lt;Ctrl&gt;w</c> (дважды control-w).
		Любая из команд <c>:q</c>, <c>:q!</c>, <c>:w</c> и <c>:x</c> относиться только
		к активному окну.
		</p>

		</body>
	</section>

	<section>	<title>Простое редактирование</title>
		<body>

		<p>	Вот и подошло время заняться изучением простых команд редактирования.
		Рассматриваемые здесь команды считаются "простыми" из-за того, что 
		оставляют Вас в командном режиме.  Более сложные команды автоматически
		переводят Вас в режим ввода текста, позволяющий добавлять в буфер символьную
		информацию, набираемую на клавиатуре; их рассмотрим позднее.
		</p>

		<p>	Попробуйте теперь установить курсор над какими-нибудь символами и
		несколько раз нажать на <c>x</c>.  Вы увидите, что <c>x</c> будет удалять
		текущий символ под курсором.  А сейчас сместитесь в середину какого-либо 
		абзаца и нажмите <c>J</c> (заглавную).  Вы увидите, что команда <c>J</c>
		заставит vi присоединить следующую строку к концу текущей строки. Теперь
		установите курсор на символ и нажмите <c>r</c>, и следом другой символ --
		Вы увидите, как им будет заменен первоначальный символ.  Наконец, установите
		курсор на любой строке в файле и нажмите <c>dd</c>.  Вы увидите, что будет 
		удалена текущая строка текста.
		</p>

		</body>
	</section>

	<section>	<title>Повторение и удаление</title>
		<body>

		<p>	Повторить любую команду редактирования Вы можете нажимая клавишу 
		<c>.</c> (точка).  Если попробуете, то можете увидеть, что печать <c>dd...</c>
		удалит 4 строки, а <c>J......</c> объединит семь строк.  Как обычно, vi 
		обеспечивает Вас различными удобными средствами сокращения трудозатрат.
		</p>

		<p>	Удалять текст Вы можете также комбинируя команду <c>d</c> с любыми
		командами перемещения.  Например, <c>dw</c> удалит часть текста от текущей
		позиции курсора до начала следующего слова; <c>d)</c> удалит вплоть до 
		следующего конца предложения, и <c>d}</c> удалит весь остаток абзаца.
		Поэкспериментируйте с командой <c>d</c> и другими командами редактирования,
		пока не почувствуете себя с ними уверенно.
		</p>

		</body>
	</section>

	<section>	<title>Отставить!</title>
		<body>

		<p>	Теперь, когда мы поэкспериментировали с удалением, неплохо изучить,
		как отменять любые изменения.  При нажатии на <c>u</c> оригинальная версия
		vi позволит отменить только последнюю операцию редактирования.  Однако,
		современные версии vi, такие как vim, позволяют последовательным нажатием
		<c>u</c> продолжать убирать сделанные в файле изменения.  Попробуйте  
		протестировать некоторые <c>d</c> и <c>u</c> команды совместно.
		</p>

		</body>
	</section>

	<section>	<title>Обновление шпаргалки</title>
		<body>

		<p>	Подошло время обновить шпаргалку!  После внесения всех только что
		рассмотренных команд ваша шпаргалка должна выглядеть примерно так:
		</p>

<figure link="../../../images/vicheat-edit-ru.png" 
	short="Шпаргалка" 
	caption="Шпаргалка с командами редактирования"/>

		</body>
	</section>
</chapter>

<chapter>	<title>Режим ввода текста</title>
	<section>	<title>Режим ввода текста</title>
		<body>

		<p>	Мы уже рассмотрели, как в vi перемещаться, выполнять чтение\запись
		файлов и основные операции редактирования.  Однако, я еще не объяснил, как
		напечатать произвольный текст! Сделано это было умышленно, так как поначалу
		режим ввода текста в vi малость сложноват.  Тем не менее, после того, как
		Вы станете спокойно себя чувствовать в режиме ввода текста, эта сложность
		(и гибкость) станет настоящей ценностью.
		</p>

		<p>	В vi, в режиме ввода текста, Вы можете вводить текст "прямо на экран",
		как в большинстве других экранных редакторов.  Сделав свои изменения, Вы 
		можете нажать Escape и вернуться в командный режим.  В режим ввода текста Вы
		можете войти нажав <c>i</c> или <c>a</c>.  Если нажмете <c>i</c> -- ваш текст
		будет <e>вставлен (inserted)</e> перед текущим символом, а если нажмете <c>a</c>
		-- ваш текст будет <e>добавлен (appended)</e> после текущего символа.
		Не забудьте, введя свой текст, нажать <c>&lt;ESC&gt;</c> для возврата в режим команд.
		</p>

		</body>
	</section>

	<section>	<title>Прок от режима ввода текста</title>
		<body>

		<p>	Двинемся дальше и попробуем использовать команды <c>a</c> и <c>i</c>.  
		Нажмите <c>a</c> или <c>i</c>, наберите какой-нибудь текст, а затем нажмите 
		Escape чтобы вернуться в командный режим.  После нажатия <c>a</c> или <c>i</c>
		попробуйте нажать <c>&lt;ENTER&gt;</c>, и посмотреть, что произойдет.  Попробуйте
		использовать стрелки и клавишу <c>&lt;DEL&gt;</c> чтобы почувствовать, как 
		работает режим ввода текста.  Используя клавиши со стрелками и <c>&lt;DEL&gt;</c>
		Вы можете произвести значительные изменения без постоянного переключения в
		режим ввода текста и обратно.
		</p>

		</body>
	</section>

	<section>	<title>Вариации на тему</title>
		<body>

		<p>	Существуют и другие удобные способы переключения в режим ввода текста.
		Нажав <c>A</c> (заглавную), Вы начнете добавлять текст в <e>конце</e> текущей
		строки, не взирая на ваше текущее положение в строке.  Точно также, нажав
		<c>I</c> (заглавную), начнете вводить текст в <e>начале</e> текущей строки.
		Создать пустую строку после или перед текущей, где Вы сможете вводить текст,
		Вы можете нажав <c>o</c> (строчную) или <c>O</c> (заглавную) соответственно.
		Чтобы заменить текущую строку целиком, нажмите <c>cc</c>.  Для замены текста
		от текущего положения и до конца строки наберите <c>c$</c>.  Заменить все от
		начала строки до курсора можно набрав <c>c0</c> (ноль!).
		</p>

		<p>	Дополнительно, выполнив свои специфические действия, каждая из
		этих команд переведет Вас в режим ввода текста.  Закончив печатать 
		нажмите <c>&lt;ESC&gt;</c> для возвращения в режим ввода команд.
		</p>

		</body>
	</section>

	<section>	<title>Изменение текста</title>
		<body>

		<p>	Мы уже использовали команду <c>c</c> (change - заменить) совсем
		недавно, когда набирали <c>cc</c>, <c>c0</c> и <c>c$</c>.  <c>cc</c> --
		это специальная разновидность команды замены, похожая на <c>dd</c>. 
		Команды <c>c0</c> и <c>c$</c> являются образцами использования команды
		замены в комбинации с командами перемещения.  В такой форме <c>c</c> 
		работает также, как и <c>d</c>, только оставляет Вас в режиме ввода
		текста, чтобы Вы могли набрать замещающий текст взамен удаленного.
		Попробуйте комбинации <c>c</c> с разными командами перемещения 
		(например: <c>cW</c>, <c>ce</c>, <c>c(</c>) и оцените их работу 
		на своем тестовом файле.  
		</p>

		</body>
	</section>
</chapter>

<chapter>	<title>Комбинированные команды</title>
	<section>	<title>Комбинированные команды</title>
		<body>

		<p>	vi <e>действительно</e> становиться мощным, когда Вы начинаете
		использовать совмещенные (или комбинированные) команды, типа <c>d{</c>
		и <c>cw</c>.  Дополнительно к таким командам, Вы также можете
		совмещать числа с любыми командами перемещения, как <c>3w</c>, которая
		сообщает vi о необходимости проскочить вперед на три слова.  Вот еще 
		несколько примеров таких комбинированных команд: <c>12b</c>, <c>4j</c>.
		</p>

		<p>	Разрешая комбинации (число)(команда перемещения), vi позволяет
		еще совмещать команды <c>d</c> или <c>c</c> с числами или командами
		перемещения.  Так <c>d3w</c> удалит следующие три слова, <c>d2j</c> 
		удалит текущую и две следующие строки, и т.д.  Попробуйте немного
		поэкспериментировать с командами <c>c</c> и <c>d</c>, совмещенными с 
		перемещениями, чтобы почувствовать, каким мощным и лаконичным может быть
		редактирование в vi.  Когда эти команды станут вашей второй натурой,
		Вы сможете редактировать файлы с невероятной скоростью.
		</p>

		</body>
	</section>

	<section>	<title>Обновление шпаргалки</title>
		<body>

		<p>	Пора опять обновить шпаргалку.  
		Вот на что она теперь должна походить:
		</p>

<figure link="../../../images/vicheat-compound-ru.png" 
	short="Шпаргалка" 
	caption="Шпаргалка с комбинированными командами"/>

		</body>
	</section>

	<section>	<title>Увеличение производительности</title>
		<body>

		<p>	Только что мы рассмотрели, как перемещаться, сохранять и завершать
		работу, выполнять простое редактирование и удаление, пользоваться режимом
		ввода текста.  С этим багажом знаний (только что показанным на шпаргалке) 
		Вы уже способны, используя vi, справиться практически с любой задачей.
		</p>

		<p>	Однако, у vi есть еще много более мощных команд.  В этом разделе
		Вы узнаете как <e>вы'резать (cut)</e>, <e>скопировать (copy)</e> и 
		<e>вставить (paste)</e>, <e>найти (search)</e> и <e>заменить (replace)</e> текст,
		а так же как использовать <e>автоматический отступ (autoindent)</e>.
		Эти команды помогут vi быть более приятным и производительным.
		</p>

		</body>
	</section>

	<section>	<title>Экранный режим</title>
		<body>

		<p>	Лучшим способом вырезать и вставлять фрагменты текста является  
		использование экранного режима, специального режима, добавленного в современных 
		версиях vi, таких как vim и elvis.  Вы можете представлять себе экранный
		режим как режим "подсвечивания текста".  Выделенный текст может быть
		скопирован или удален, а затем вставлен.  Если Вы используете gvim,
		выделить кусок текста Вы можете просто нажав левую кнопку мышки и
		протащив курсор по нужной области:
		</p>

<figure link="../../../images/vihighlight-ru.png" 
	short="Выделение" 
	caption="VIM с выделенным текстом "/>

		</body>
	</section>

	<section>	<title></title>
		<body>

		<p>	Войти в экранный режим Вы еще можете нажав <c>v</c> (это
		может быть вашей единственной возможностью, если Вы используете
		vi в консоли).  Затем, двигая курсор командами перемещения
		(обычно стрелками), Вы можете выделить область текста.
		Закончив выделение, Вы уже готовы вырезать либо копировать текст.
		</p>

		<p>	Для копирования текста нажмите <c>y</c> (от слова "yank").  
		Чтобы вырезать текст нажмите <c>d</c>.  Вы будете переведены назад в 
		командный режим.  Теперь переместитесь в то место, где Вы хотите вставить
		вырезанный или скопированный текст, и нажмите <c>P</c> (заглавная) для 
		вставки перед курсором или <c>p</c> (строчная) для вставки за курсором.
		Всё, копирование\вырезание и вставка выполнены!  А теперь проделайте
		еще несколько раз процедуру копирования\вырезания и вставки перед тем,
		как перейти к следующему разделу.
		</p>

		</body>
	</section>

	<section>	<title>Замена текста</title>
		<body>

		<p>	Для замены образцов текста мы используем  <e>ex</e>-режим.  Если Вы 
		хотите заменить первый попавшийся в текущей строке образчик, наберите
		<c>:s/&lt;regexp&gt;/&lt;replacement&gt;/</c> и нажмите <c>&lt;ENTER&gt;</c>, 
		где &lt;regexp&gt; - что хотите заменить, и &lt;replacement&gt; - на что.
		Для замены всех совпадений с эталоном в текущей строке используйте команду 
		<c>:s/&lt;regexp&gt;/&lt;replacement&gt;/g</c>.  Если хотите выполнить 
		замену каждого вхождения образца во всем файле (что обычно и требуется),
		воспользуйтесь командой <c>:%s/&lt;regexp&gt;/&lt;replacement&gt;/g</c>.
		Подтвердить потребность замены в каждом конкретном случае при выполнении
		глобального замещения можно набрав
		<c>:%s/&lt;regexp&gt;/&lt;replacement&gt;/gc</c> (здесь "c" означает "confirm").
		И не забудьте, набрав команду, нажать <c>&lt;ENTER&gt;</c>.
		</p>

		</body>
	</section>

	<section>	<title>Выделение</title>
		<body>

		<p>	vi поддерживает автоматический отступ при редактировании
		Вами исходников (текстов программ). Большинство современных версий vi 
		(таких, как vim) могут самостоятельно включать абзацный авто отступ при
		редактировании Вами исходников (например, файлов типа .c). Если авто отступ
		включен, Вы можете использовать <c>&lt;CTR&gt;d</c> (control-d) для уменьшения 
		и <c>&lt;CTR&gt;t</c> (control-t) для увеличения уровня отступа. Если 
		автоматический абзацный отступ не включился самостоятельно, Вы можете 
		включить его вручную набрав <e>ex-</e>команду <c>:set autoindent </c>.
		Вы также можете попросить vi установить табуляцию Вашего любимого размера
		командой  <c>:set tabstop</c>; довольно популярна <c>:set tabstop=4</c>.
		</p>

		</body>
	</section>

	<section>	<title>Наша полная шпаргалка</title>
		<body>

		<p>	Ну вот, мы и достигли конца учебника по vi !  После помещения
		всех дополнительных команд редактирования на вашу "шпаргалочку", она должна 
		выглядеть примерно так:
		</p>

<figure link="../../../images/vicheat-final-ru.png" 
	short="Шпаргалка" 
	caption="Законченная шпаргалка"/>

		<p>	Держите Вашу шпаргалку под рукой и начинайте использовать vi чтобы 
		редактировать файлы и писать письма. Заглядывайте в шпаргалку при необходимости; 
		через неделю Вы заметите, что запомнили уже почти все команды и продуктивность 
		Вашей работы в vi невероятно выросла!
		</p>

		</body>
	</section>

	<section>	<title>Ресурсы</title>
		<body>

		<p>	Означенные здесь ресурсы могут быть полезны желающим 
		продолжить изучение vi далее.  (Правда, на английском):
		</p>

<ul>
<li><uri link="http://www.thomer.com/thomer/vi/vi.html">
	Домашняя страничка любителей vi</uri>, 
	прекрасный ресурс о всех деталях vi.
	</li>
<li><uri link="http://www.vim.org">
	Домашняя страничка vim</uri>,
	место, где есть все нужное Вам для vim.
	</li>
<li>Если Вы ищите хорошую, старомодную бумажную книгу, 
	<uri link="http://www.oreilly.com/catalog/vi6/">Learning the vi Editor, 6th Edition</uri> 
	может стать прекрасным выбором.  Содержит хороший обзор самого vi и его клонов.
	</li>
</ul>

		</body>
	</section>
</chapter>
</guide>
