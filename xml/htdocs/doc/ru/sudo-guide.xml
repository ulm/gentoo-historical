<?xml version='1.0' encoding="UTF-8"?>

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ru/sudo-guide.xml,v 1.3 2012/10/13 15:07:23 swift Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide disclaimer="obsolete" lang="ru">
<title>Руководство по использованию Sudo в Gentoo</title>

<author title="Author">
<mail link="mail@sphinx.net.ru">Дмитрий Джус</mail>
</author>

<abstract>
Если вы хотите разрешить другим лицам выполнять определённые
административные действия над вашей системой без предоставления им полных
прав администратора, использование sudo является лучшим
вариантом. С sudo вы можете управлять тем, кто и какие действия
может выполнить.  Данное руководство является введением в это замечательное
средство.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.6</version>
<date>2006-07-14</date>

<chapter>
<title>О sudo</title>
<section>
<title>Предоставление полномочий</title>
<body>

<p>
Пакет <c>app-admin/sudo</c> позволяет администратору системы
предоставлять другим пользователям права на запуск приложений, (**)
которых у них в противном случае не было бы. В отличие от
использования бита <c>setuid</c> для таких программ, <c>sudo</c> даёт
более тонкий контроль за тем, <e>кто</e> и <e>когда</e> сможет
выполнять определённую команду.
</p>

<p>
Благодаря <c>sudo</c> вы можете создать чёткий список тех, <e>кто</e>
может запускать определённое приложение. Если бы вы установили бит
<c>setuid</c> на программу, любой пользователь смог бы её выполнить
(или любой пользователь определённой группы, в зависимости от
предоставленных прав).  Вы можете (и, вероятно, даже должны) заставить
пользователя вводить пароль перед запуском соответствующего приложения
и изменять его полномочия в зависимости от того, подключён ли он к
системе локально или с удалённого узла через SSH.
</p>

</body>
</section>
<section>
<title>Журналирование деятельности</title>
<body>

<p>
Дополнительным преимуществом <c>sudo</c> является возможность
сохранения информации о каждой попытке запуска приложения, удачной или
нет. Это весьма полезно, особенно если вы захотите узнать, благодаря
кому вам пришлось 10 часов восстанавливать систему после сбоя :)
</p>

</body>
</section>
<section>
<title>Настройка sudo</title>
<body>

<p>
Настройка <c>sudo</c> осуществляется через файл
<path>/etc/sudoers</path>.  <e>Никогда</e> не редактируйте его при
помощи <c>nano</c>, <c>vim</c> или любого другого редактора! Для
внесения правок в этот файл используйте только <c>visudo</c>.
</p>

<p>
Эта утилита не даёт двум администраторам одновременно редактировать
<path>/etc/sudoers</path>, предохраняет права на файл и выполняет
некоторую синтаксическую проверку, чтобы уберечь файл от внесения в
него критических изменений.
</p>

</body>
</section>
<section>
<title>Об этом руководстве</title>
<body>

<p>
Это руководство - всего лишь краткое введение в <c>sudo</c>. Пакет
<c>sudo</c> гораздо мощнее, чем описано в данном документе, и обладает
специальными функциями для редактирования файлов от лица другого
пользователя (<c>sudoedit</c>), запуска из сценария (так что
<c>sudo</c> может работать в фоновом режиме и читать пароль со
стандартного ввода, а не с клавиатуры) и т.&nbsp;д.
</p>

<p>
Обращайтесь за подробными сведениями к страницам
руководств <c>sudo</c> и <c>sudoers</c>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Синтаксис файла /etc/sudoers</title>
<section>
<title>Базовый синтаксис</title>
<body>

<p>
Самая сложная часть <c>sudo</c> &mdash; синтаксис
<path>/etc/sudoers</path>.  В общем виде он такой:
</p>

<pre caption="Базовый синтаксис /etc/sudoers">
<const>user</const>  <const>host</const> <keyword>=</keyword> <const>commands</const>
</pre>

<p>
Согласно этому синтаксису, пользователь
<c>user</c>, вошедший в систему с узла <c>host</c>,
может запускать любую из команд, перечисленных в списке
<c>commands</c> с правами администратора (root). Вот
возможный пример файла <path>/etc/sudoers</path>, согласно которому
пользователь <c>swift</c> может запускать
<c>emerge</c>, если он вошёл в систему локально (не через SSH):
</p>

<pre caption="Реальный пример /etc/sudoers">
<const>swift</const>  <const>localhost</const> <keyword>=</keyword> <const>/usr/bin/emerge</const></pre>

<p>
<brite>Важно</brite> помнить следующее: не позволяйте пользователям
запускать приложения, которые дадут им право повысить их общий уровень
полномочий. Например, разрешая пользователю запускать <c>emerge</c>, вы на самом
деле можете дать ему полный доступ к системе с правами администратора, потому
что при помощи <c>emerge</c> пользователь может изменить реальный файл в системе
в собственных целях. Если вы не доверяете своим пользователям <c>sudo</c>, не
предоставляйте им никаких прав.
</p>

<!--
Wrappers are no real advantage here either, see #71750
-->

<p>
Вместо имени пользователя можно использовать название группы - в этом
случае имя группы нужно предварить символом <c>%</c>. К примеру, чтобы
разрешить всем пользователям группы <c>wheel</c>
запускать <c>emerge</c>, в <path>/etc/sudoers</path> нужно записать
следующее:
</p>

<pre caption="Разрешение всем пользователям группы wheel запускать emerge">
<keyword>%</keyword><const>wheel</const>  <const>localhost</const> <keyword>=</keyword> <const>/usr/bin/emerge</const></pre>

<p>
Строку можно дополнить, чтобы разрешить выполнение нескольких
команд. Например, чтобы позволить запуск не только <c>emerge</c>, но и
<c>ebuild</c>, и <c>emerge-webrsync</c> с правами администратора:
</p>

<pre caption="Несколько команд">
<const>swift</const>  <const>localhost</const> <keyword>=</keyword> <const>/usr/bin/emerge, /usr/bin/ebuild, /usr/sbin/emerge-webrsync</const></pre>

<p>
Вы также можете указывать конкретную команду для запуска, а не только
общее имя программы. Это полезно в том случае, когда нужно ограничить
права пользователя на запуск приложения определённым набором опций
(**) командной строки.  Утилита <c>sudo</c> позволяет использовать в
<path>/etc/sudoers</path> символы-маски (wildcards) в составе путей к
командам, а также среди параметров командной строки. Обратите
внимание, это <e>не</e> регулярные выражения!
</p>

<p>
Давайте попробуем такое (** что имеется в виду?):
</p>

<pre caption="Попытка обновить систему, используя sudo">
$ <i>sudo emerge -uDN world</i>

We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

#1) Respect the privacy of others.
#2) Think before you type.
#3) With great power comes great responsibility.

Password: <comment>(ожидается пароль пользователя, не администратора!)</comment>

<comment>
Надеемся, вы прослушали обычную лекцию от Системного Администратора. Обычно она
сводится к трём вещам:

#1) Уважайте права других на частную жизнь (**)
#2) Думайте, прежде чем печатать
#3) Большим возможностям сопутствует и большая ответственность

Пароль:
</comment></pre>

<p>
Пароль, который требует <c>sudo</c> &mdash; пароль самого
пользователя. Это сделано для того, чтобы оставленным открытым
терминалом не могли воспользоваться во вредоносных целях посторонние
лица.
</p>

<p>
Следует знать, что <c>sudo</c> не изменяет переменную среды
<c>${PATH}</c>: любая команда, введённая после <c>sudo</c>,
запускается с <e>вашими</e> переменными среды. Например, если вы
хотите разрешить пользователю запускать команду из <path>/sbin</path>,
ему понадобится вводить полный путь после <c>sudo</c>:
</p>

<pre caption="Использование полного пути к утилите">
$ <i>sudo /usr/sbin/emerge-webrsync</i></pre>

</body>
</section>
<section>
<title>Использование псевдонимов</title>
<body>

<p>
В системах больших масштабов ввод имён пользователей (или узлов или
команд) &mdash; утомительное занятие. Для облегчения управления файлом
<path>/etc/sudoers</path> вы можете назначать <e>псевдонимы</e>
(aliases). Формат объявления псевдонима весьма прост:
</p>

<pre caption="Объявление псведонимов в /etc/sudoers">
<keyword>Host_Alias</keyword>  <ident>hostalias</ident> <keyword>=</keyword> <const>hostname1, hostname2, ...</const>
<keyword>User_Alias</keyword>  <ident>useralias</ident> <keyword>=</keyword> <const>user1, user2, ...</const>
<keyword>Cmnd_Alias</keyword>  <ident>cmndalias</ident> <keyword>=</keyword> <const>command1, command2, ...</const></pre>

<p>
Один псевдоним доступен всегда и в любом месте &mdash; это псевдоним
<c>ALL</c> (чтобы отличать имена-псевдонимы от прочих имён,
рекомендуется использовать заглавные группы для псевдонимов). Как вы
уже конечно же догадались, псевдоним <c>ALL</c> обозначает все
возможные варианты, допустимые в месте его использования (**).
</p>

<p>
Вот пример использования псевдонима <c>ALL</c> для предоставления
<e>всем</e> пользователям прав на запуск команды <c>shutdown</c> с
локального терминала:
</p>

<pre caption="Разрешение всем пользователям выполнять shutdown">
<ident>ALL</ident>  <const>localhost</const> <keyword>=</keyword> <const>/sbin/shutdown</const></pre>

<p>
Другой пример &mdash; разрешение пользователю
<c>swift</c> запускать <c>emerge</c>, откуда бы ни
был выполнен вход в систему:
</p>

<pre caption="Разрешение пользователю swift выполнять emerge с любого узла">
<const>swift</const>  <ident>ALL</ident> = <const>/usr/bin/emerge</const></pre>

<p>
Интереснее определить набор пользователей, которые могут запускать
административные утилиты (такие как <c>emerge</c> и <c>ebuild</c>), и
группу администраторов, которые могут менять пароль любого
пользователя, кроме <c>root</c>.
</p>

<pre caption="Использование псевдонимов для пользователей и команд">
<keyword>User_Alias</keyword>  <ident>SOFTWAREMAINTAINERS</ident> <keyword>=</keyword> <const>swift, john, danny</const>
<keyword>User_Alias</keyword>  <ident>PASSWORDMAINTAINERS</ident> <keyword>=</keyword> <const>swift, sysop</const>
<keyword>Cmnd_Alias</keyword>  <ident>SOFTWARECOMMANDS</ident> <keyword>=</keyword> <const>/usr/bin/emerge, /usr/bin/ebuild</const>
<keyword>Cmnd_Alias</keyword>  <ident>PASSWORDCOMMANDS</ident> <keyword>=</keyword> <const>/usr/bin/passwd [a-zA-Z0-9_-]*, !/usr/bin/passwd root</const>

<ident>SOFTWAREMAINTAINERS</ident>  <const>localhost</const> <keyword>=</keyword> <ident>SOFTWARECOMMANDS</ident>
<ident>PASSWORDMAINTAINERS</ident>  <const>localhost</const> <keyword>=</keyword> <ident>PASSWORDCOMMANDS</ident></pre>

</body>
</section>
<section>
<title>Запуск программ не с правами администратора (** не от root?)</title>
<body>

<p>
Можно также разрешить пользователю выполнять приложение от имени
другого пользователя, а не администратора системы. Это может вас
заинтересовать(**), если нужно запускать программу от другого имени
(например, <c>apache</c> для веб-сервера) или
разрешить определённым пользователям выполнять административные
действия от чужого имени (например, убивать процессы-зомби).
</p>

<p>
В файле <path>/etc/sudoers</path> перечислите имена пользователей
между скобок <c>(</c>&nbsp;и&nbsp;<c>)</c> прямо перед списком команд.
</p>

<pre caption="Синтаксис для запуска от имени другого пользователя">
<const>users</const>  <const>hosts</const> <keyword>=</keyword> <keyword>(</keyword><const>run-as</const><keyword>)</keyword> <const>commands</const></pre>

<p>
Например, чтобы разрешить пользователю <c>swift</c>
выполнять <c>kill</c> и <c>pkill</c> от имени пользователей
<c>apache</c> или <c>gorg</c>, в <path>/etc/sudoers</path> нужно
записать следующее:
</p>

<pre caption="Пример записи для запуска от чужого имени">
<keyword>Cmnd_Alias</keyword> <ident>KILL</ident> <keyword>=</keyword> <const>/bin/kill, /usr/bin/pkill</const>

<const>swift</const>  <ident>ALL</ident> <keyword>=</keyword> <keyword>(</keyword><const>apache, gorg</const><keyword>)</keyword> <ident>KILL</ident></pre>

<p>
При таких настройках пользователь может выполнять <c>sudo&nbsp;-u</c>, чтобы
выбирать имя другого пользователя для запуска приложения от его имени:</p>

<pre caption="Запуск pkill от имени пользователя apache">
$ <i>sudo -u apache pkill apache</i></pre>

<p>
Вы можете назначить псевдоним для пользователя, от имени которого
требуется запускать приложения, с помощью директивы
<c>Runas_Alias</c>. Её использование аналогично
использованию других <c>_Alias</c>-директив,
которые были рассмотрены ранее.
</p>

</body>
</section>
<section>
<title>Пароли и настройки по умолчанию</title>
<body>

<p>
По умолчанию, <c>sudo</c> запрашивает у пользователя его пароль для
идентификации. После ввода пароля, <c>sudo</c> сохраняет его в течение
5 минут, позволяя пользователю сконцентрироваться на своих задачах, а
не постоянном вводе пароля.
</p>

<p>
Разумеется, это поведение можно изменить: установите директиву
<c>Defaults:</c> в файле
<path>/etc/sudoers</path>, чтобы поменять поведение <c>sudo</c> по
умолчанию для пользователя.
</p>

<p>
Например, для смены периода в 5 минут на 0 (чтобы не запоминать пароль
вообще) для пользователя <c>swift</c>:
</p>

<pre caption="Изменение времени сохранения пароля">
<keyword>Defaults:</keyword><const>swift</const>  <var>timestamp_timeout</var><keyword>=</keyword><const>0</const></pre>

<p>
Установка времени на <c>-1</c> означает сохранение пароля на
неограниченное время (до перезагрузки системы).
</p>

<p>
Другим параметром является запрос ввести пароль того пользователя, от
имени которого запускается команда. Для этого используется
<c>runaspw</c>. В следующем примере мы также
устанавливаем количество попыток ввода пароля (сколько раз можно
ошибиться в пароле, прежде чем <c>sudo</c> завершит работу) c 3 по
умолчанию на 2:
</p>

<pre caption="Запрос пароля администратора вместо пароля пользователя">
<keyword>Defaults:</keyword><const>john</const> <var>runaspw</var>, <var>passwd_tries</var><keyword>=</keyword><const>2</const></pre>

<p>
Другая интересная возможность - сохранение переменной среды <c>DISPLAY</c>,
чтобы можно было запускать графические приложения:
</p>

<pre caption="Сохранение переменной DISPLAY">
<keyword>Defaults:</keyword><const>john</const> <var>env_keep</var><keyword>=</keyword><const>DISPLAY</const></pre>

<p>
Можно изменять десятки настроек по умолчанию, пользуясь директивой
<c>Defaults:</c>.  Откройте руководство по <c>sudo</c> и
ищите там раздел <c>Defaults</c>.
</p>

<p>
Если же вы хотите разрешить пользователю запускать определённые
команды вообще без запроса пароля, добавьте параметр <c>NOPASSWD:</c>
перед именем команды:
</p>

<pre caption="Разрешение запуска emerge с правами администратора без запроса пароля">
<const>swift</const>  <const>localhost</const> <keyword>=</keyword> <keyword>NOPASSWD:</keyword> <const>/usr/bin/emerge</const></pre>

</body>
</section>
</chapter>

<chapter>
<title>Использование sudo</title>
<section>
<title>Получение списка привилегий.</title>
<body>

<p>
Что бы получить список своих прав, выполните <c>sudo&nbsp;-l</c>:
</p>

<pre caption="Получение списка привилегий">
$ <i>sudo -l</i>
User swift may run the following commands on this host:
<comment>Пользователь swift может выполнять следующие команды на этом узле:</comment>
(root)   /usr/libexec/xfsm-shutdown-helper
(root)   /usr/bin/emerge
(root)   /usr/bin/passwd [a-zA-Z0-9_-]*
(root)   !/usr/bin/passwd root
(apache) /usr/bin/pkill
(apache) /bin/kill</pre>

<p>
Если в списке ваших команд в <path>/etc/sudoers</path> есть команда,
не требующая ввода пароля, при запросе списка привилегий пароль также
не потребуется. В противном случае, может появиться запрос вашего
пароля, если он ещё не был запомнен.
</p>

</body>
</section>
<section>
<title>Продление времени запоминания пароля</title>
<body>

<p>
По умолчанию, когда пользователь вводит пароль для аутентификации в
<c>sudo</c>, он сохраняется на 5 минут. Если пользователю хочется
продлить время запоминания пароля, ему требуется выполнить
<c>sudo&nbsp;-v</c> для сброса счётчика времени, так что <c>sudo</c>
запомнит пароль ещё на 5 пять минут, прежде чем спросить его снова.
</p>

<pre caption="Продление времени запоминания пароля">
$ <i>sudo -v</i></pre>

<p>
Обратный эффект достигается выполнением <c>sudo&nbsp;-k</c>.
</p>

</body>
</section>
</chapter>
</guide>

<!-- *$Localization:
target-language: Russian
target-version: 1.11-r1
target-date: 2007-05-09
translated-by: Dmitry Dzhus
-->
