<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/security/shb-chroot.xml,v 1.3 2006/09/18 09:22:48 neysx Exp $ -->
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<sections>

<version>1.1</version>
<date>2005-12-15</date>

<section>
<title>Изменение корневого каталога</title>
<body>

<p>
Изменение корневого каталога для службы является способом ограничения среды
службы (или пользователя), в которой она имеет доступ лишь к необходимым
ресурсам. Запущенная служба под пользователем, отличном от суперпользователя
(<c>nobody</c>, <c>apache</c>, <c>named</c>) может предоставить злоумышленнику
доступ лишь к тем файлам, к которым имеет доступ пользователь, от имени
которого запущена служба. Это означает, что злоумышленник не сможет получить
права <c>root</c>, даже если служба подвержена различным уязвимостям.
</p>

<p>
Некоторые службы, например <c>pure-ftpd</c> и <c>bind</c>, могут быть заключены
в chroot. Если служба поддерживает эту возможность, используйте ее, иначе вы
можете можете создать среду собственноручно. Давайте рассмотрим пример создания
chroot. Чтобы изучить работу механизма chroot, мы будем экспериментировать с
<c>bash</c> (простейший для изучения случай).
</p>

<p>
Создайте каталог <path>/chroot</path>, выполнив команду <c>mkdir /chroot</c>.
Затем определите, какие динамические библиотеки необходимы для работы
<c>bash</c> (если он собран с параметром <c>-static</c>, этот шаг можно
пропустить):
</p>

<p>
Следующая команда создаст список библиотек, необходимых для <c>bash</c>.
</p>

<pre caption="Получение списка используемых библиотек">
# <i>ldd /bin/bash</i>
  libncurses.so.5 => /lib/libncurses.so.5 (0x4001b000)
  libdl.so.2 => /lib/libdl.so.2 (0x40060000)
  libc.so.6 => /lib/libc.so.6 (0x40063000)
  /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
</pre>

<p>
Теперь создадим изолированную среду для <c>bash</c>.
</p>

<pre caption="Создание изолированной среды для bash">
# <i>mkdir /chroot/bash</i>
# <i>mkdir /chroot/bash/bin</i>
# <i>mkdir /chroot/bash/lib</i>
</pre>

<p>
Затем скопируем файлы, используемые <c>bash</c> (<path>/lib</path>) в
изолированный <path>lib</path> и скопируем файл bash в изолированный каталог
<path>bin</path>. Этим мы создадим ту же самую среду, но с ограниченными
возможностями. После этого попробуйте выполнить команду <c>chroot
/chroot/bash /bin/bash</c>. Если вы получите строку приглашения, гласящую
<path>/</path>, то у вас все получилось! Иначе вам сообщат, какого файла не
хватает. Некоторые разделяемые библиотеки могут использовать другие файлы.
</p>

<p>
Как вы можете заметить, внутри изолированной среды ничего, кроме <c>echo</c>,
не работает. Это потому что в внутри среды chroot кроме bash нет никаких других
команд, а <c>echo</c> является встроенной командой.
</p>

<p>
Подобным образом вы можете создать службу в изолированной среде. Единственное
различие в том, что служба может время от времени обращаться к устройствам и
файлам настроек в <path>/etc</path>. Просто скопируйте их (файлы устройств
можно скопировать с помощью команды <c>cp -a</c>) в изолированную среду,
отредактируйте сценарий инициализации перед тем, как заключить службу в среду.
Может быть сложным определить, какие устройства и файлы конфигурации могут
понадобиться. Здесь может пригодиться команда <c>strace</c>. Запустите службу
вместе с <c>/usr/bin/strace</c> и отследите все вызовы open, read, stat и,
возможно, connect. Это подскажет вам, что нужно копировать. Но в большинстве
случаев вам понадобится скопировать файл passwd (отредактируйте копию, удалив
из него всех пользователей, не нужных для запуска службы),
<path>/dev/zero</path>, <path>/dev/log</path> и <path>/dev/random</path>.
</p>

</body>
</section>
<section>
<title>Пользовательский режим Linux</title>
<body>

<p>
Другим способом создания безопасной среды является запуск виртуальной машины.
Виртуальная машина &mdash; это процесс, выглядящий как отдельная ОС и
работающий в реальной операционной системе, которая предоставляет ему
необходимые системные ресурсы. Безопасность достигается в том, что если сервер,
запущенный внутри виртуальной машины, будет взломан, то будет затронут только
виртуальный сервер, а не родительская установка.
</p>

<p>
Для дальнейшей информации по установке пользовательского режима Linux,
обратитесь к <uri link="/doc/ru/uml.xml">руководству по пользовательскому
режиму Linux</uri>.
</p>

</body>
</section>

</sections>
