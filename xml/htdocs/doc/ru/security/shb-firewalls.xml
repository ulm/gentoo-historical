<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/security/shb-firewalls.xml,v 1.6 2006/11/19 21:06:26 nightmorph Exp $ -->
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- Текст этого документа распространяется на условиях лицензии CC-BY-SA -->
<!-- См. http://creativecommons.org/licenses/by-sa/2.5 -->
<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<sections>

<version>1.3</version>
<date>2006-11-19</date>

<section>
<title>Межсетевой экран</title>
<body>

<p>
Люди часто думают, что межсетевой экран окончательно защитит их систему, но они
ошибаются. В большинстве случаев плохо настроенный межсетевой экран
предоставляет еще меньше безопасен, чем его отсутствие. Он тоже является
программой, и с ним нужно обращаться так же, как и с остальными программами,
так как он может содержать уязвимости.
</p>

<p>
А теперь подумайте перед реализацией межсетевого экрана! Так ли он вам нужен?
Если да, то вам нужно написать правила, определяющие его работу, тип
межсетевого экрана и кто должен им управлять. Но сначала прочитайте это
руководство.
</p>

<p>
Межсетевые экраны используются для двух целей:
</p>

<ul>
<li>Для защиты извне (черви/злоумышленники)</li>
<li>Для защиты изнутри (сотрудники/дети)</li>
</ul>

<p>
В основном есть три типа межсетевых экранов:
</p>

<ul>
<li>Фильтрование пакетов</li>
<li>Прокси</li>
<li>Программный шлюз</li>
</ul>

<p>
Межсетевой экран должен работать на выделенном компьютере без лишних запущенных
сервисов (или же только с <c>sshd</c>) и обезопасен тами способами, которые
описаны в этом руководстве.
</p>

</body>
</section>
<section>
<title>Фильтрование пакетов</title>
<body>

<p>
Весь сетевой трафик передается в виде пакетов. Непрерывный поток разделяется
на маленькие, легко управляемые пакеты, которые собираются в точке назначения.
В заголовке каждого пакета содержится информация о способе и месте его
назначения. Также эта информация используется работы межсетевого экрана.
Фильтрация основана на:
</p>

<ul>
  <li>
    разрешении или запрещении пакетов на основании IP-адреса
    отправителя/получателя
  </li>
  <li>
    разрешении или запрещении пакетов на основании порта отправителя/получателя
  </li>
  <li>
    разрешении или запрещении пакетов на основании протокола
  </li>
  <li>
    разрешении или запрещении пакетов на основании параметров, специфичных для
    каждого из протоколов
  </li>
</ul>

<p>
Другими словами, фильтрация основана на содержимом заголовка пакета, а не
самого пакета.
</p>

<p>
Недостатки:
</p>

<ul>
  <li>
    адрес в пакете может быть ненастоящим адресом IP (или <e>подделанным</e>
    отправителем)
  </li>
  <li>
    данные или запросы в пропущенном пакете могут содержать непредвиденные
    данные, которые злоумышленник может использовать для эксплуатации известных
    уязвимостей в сервисах, расположенным на межсетевом экране или позади него
  </li>
  <li>
    критично к сбоям
  </li>
</ul>

<p>
Преимущества:
</p>

<ul>
  <li>
    простая реализация
  </li>
  <li>
    возможность отправки предупреждений о возможных атаках до того, как они
    произойдут (то есть регистрация сканирования портов)
  </li>
  <li>
    хорош против предотвращения SYN-атак
  </li>
</ul>

<p>
Вот примеры свободных фильтров пакетов для Linux:
</p>

<ul>
  <li>
    <uri link="http://www.iptables.org">Iptables</uri></li>
  <li>
    <uri link="http://www.linuxdocs.org/HOWTOs/IPCHAINS-HOWTO.html">Ipchains</uri>
  </li>
  <li>
    <uri link="http://www.smoothwall.org">SmoothWall</uri>
  </li>
</ul>
<!--FIXME: should SmoothWall really be included, since it uses iptables?-->

<note>
Рекомендуется использовать iptables. ipchains устарел.
</note>

</body>
</section>
<section>
<title>Прокси</title>
<body>

<p>
Шлюз сеансового уровня является межсетевым экраном, проверяющим соединения
перед разрешением обмена данных. Это значит, что он не только разрешает или
запрещает пересылку пакетов на основании их заголовка, но и определяет перед
открытием сессии на основании настраиваемых правил, что оба адресата реально
существуют. Фильтрация основывается на:
</p>

<ul>
  <li>IP-адресе отправителя/получателя</li>
  <li>порте отправителя/получателя</li>
  <li>времени</li>
  <li>протоколе</li>
  <li>пользователе</li>
  <li>пароле</li>
</ul>

<p>
Весь трафик прослушивается и проверяется, и непрошенный трафик может быть
отброшен.
</p>

<p>
Недостатки:
</p>

<ul>
  <li>
    Взаимодействует на транспортном уровне и может потребовать изменения
    программ, предоставляющих транспортные функции.
  </li>
</ul>

</body>
</section>
<section>
<title>Программный шлюз</title>
<body>

<p>
Шлюзы уровня приложений являются прокси-серверами для приложений,
обменивающимися вместо клиентов данными с удаленными системами. Это позволяет
находиться вне доступа извне за ДМЗ (демилитаризованной зоной, частью частной
сети, видимой сквозь межсетевой экран) или разрешать межсетевому экрану
предотвращать соединения извне. Фильтрация основывается на:
</p>

<ul>
  <li>разрешении или запрещении на основании IP-адреса источника/назначения</li>
  <li>на содержимом пакетов</li>
  <li>ограничения доступа к файлу на основе типа файла и расширения</li>
</ul>

<p>
Преимущества:
</p>

<ul>
  <li>Может кэшировать файлы, увеличивая производительность сети</li>
  <li>Детализированная регистрация всех подключений</li>
  <li>
    Хорошая расширяемость (некотрые прокси могут распределять кэшированные
    данные между собой)
  </li>
  <li>Нет прямого доступа извне</li>
  <li>Может изменять содержимое пакета на лету</li>
</ul>

<p>
Недостатки:
</p>

<ul>
  <li>Конфигурация является комплексной</li>
</ul>

<p>
Программные шлюзы принято считать наиболее безопасным решением, так как они
не запускаются с правами администратора, и все узлы за ними будут недоступными
из интернета.
</p>

<p>
Пример свободного шлюза:
</p>

<ul>
  <li><uri link="http://www.squid-cache.org/">Squid</uri></li>
</ul>

</body>
</section>
<section>
<title>Iptables</title>
<body>

<p>
Для нормального функционирования iptables должен быть включен в ядро. Я
включил поддержку iptables модулей (команда <c>iptables</c> загрузит их по
мере необходимости) и пересобрал ядро (но вы можете включить их в само ядро,
если намереваетесь отказаться от загружаемых модулей ядра, как сказано
выше). Для более детальной информации по настройке iptables в ядре
обратитесь к странице
<uri link="http://iptables-tutorial.frozentux.net/iptables-tutorial.html#PREPARATIONS">Iptables
Tutorial Chapter 5: Preparations</uri>. После пересборки нового ядра (или во
время компиляции) вы должны добавить команду <c>iptables</c>. Для этого
просто наберите <c>emerge iptables</c>.
</p>

<p>
Теперь проверим свою работу, запустив <c>iptables -L</c>. Если команда
завершилась ошибкой, значит, что-то не так, поэтому проверьте еще раз настройки.
</p>

<p>
iptables &mdash; новый и весьма улучшенный межсетевой экран в ядрах Linux 2.4.x.
Он является наследником ipchains для ядер Linux 2.2.x. Одним из значительных
нововведений является то, что iptables способен совершать полноценную
фильтрацию пакетов. С ее помощью стало возможным следить за каждым
установленным TCP-соединением.
</p>

<p>
TCP-соединение содержит в себе серию пакетов, содержащих информацию IP-адресе и
порте отправителя и получателя, а также последовательное число, поэтому пакеты
могут быть воссозданы без потери данных. TCP является протоколом,
ориентированном на подключение, в отличии от UDP, который не гарантирует
доставку.
</p>

<p>
Изучая заголовок TCP-пакета, межсетевой экран может может определить, является
ли полученный пакет частью уже установленного соединения или нет, и принять
решение, принять или отбросить этот пакет.
</p>

<p>
При использовании межсетевого экрана, не отслеживающего соединения, возможно
провести его и заставить с помощью манипулирования заголовками TCP-пакета
принимать пакеты, которые необходимо отбросить. Это может быть сделано с
помощью установки SYN или других флагов заголовка TCP и создания поддельного
пакета, который будет считаться частью уже установленного соединения (ведь
межсетевой экран не будет отслеживать состояние соединения). При использовании
фильтрации пакетов, отслеживающих соединения, можно отбрасывать подобные
пакеты, если они не являются частью уже установленного соединения. Это также
предотвратит &laquo;stealth-сканирование&raquo;, разновидности сканирования, с
помощью которого сканер отправляет пакеты с такой комбинацией флагов, при
которых они не будут зарегистрированы межсетевым экраном, полагающим, что это
&mdash; обычные SYN-пакеты.
</p>

<p>
В iptables также есть различные возможности, как например NAT (Network Address
Translation, сетевая трансляция адресов) и ограничения по частоте. Ограничение
по частоте весьма полезна для предотвращения DoS-атак (Denial of Service, отказ
от обслуживания), например SYN-наводнений.
</p>

<p>
TCP-соединения устанавливаются после так называемого троекратного рукопожатия.
При установлении TCP-соединения клиент отправляет серверу пакет с установленным
флагом SYN. При получении сервер возвращает клиенту пакет с установленными
SYN+ACK. При его получении клиент отвечает третьим пакетом с ACK для
подтверждения соединения.
</p>

<p>
SYN-наводнения основаны на отправке SYN-пакетов с одновременным запретом
отправки пакетов SYN+ACK. Клиент может создать пакет с поддельным IP-адресом
отправителя, так как ему не нужно на что-либо отвечать. Сервер заполнит
очередь подключений полуоткрытыми соединениями, ожидающими окончательного
пакета с ACK, до того, как удалит их из очереди. Очередь ограничена
определенным числом, и когда она заполнится, то станет невозможным принимать
новые подключения. Если пакет с ACK не будет получен по истечении
определенного временного интервала, то он будет автоматически удален из
очереди. Настройки таймаута могут быть различными, но обычно они находятся в
пределах 30&mdash;60 секунд или даже больше. Клиент инициирует атаку,
создавая множество SYN-пакетов с различных IP-адресов и отправляя их на
адрес цели как можно чаще, заполняя тем самым очередь полуоткрытыми
соединениями и не позволяя другим клиентам устанавливать легитимные подключения
к серверу.
</p>

<p>
В данном случае может быть полезным ограничение отправки. Можно ограничить
частоту отправки принятых SYN-пакетов с помощью <c>-m limit --limit 1/s</c>,
тем самым ограничив число SYN-пакетов до одного в секунду и оградив свои
ресурсы от SYN-наводнений.
</p>

<note>
Другим решением, предотвращающим SYN-наводнения является использование <uri
link = "http://cr.yp.to/syncookies.html">SYN cookies</uri>, которые позволят
вашему компьютеру отвечать на SYN-пакеты без заполнения очереди подключений.
SYN cookies могут быть включены при конфигурировании ядра Linux, однако на
данный момент эта поддержка считается экспериментальной.
</note>

<p>
А теперь немного практических занятий!
</p>

<p>
Будучи загруженным в ядро, iptables предоставляет 5 ловушек, в которые вы
можете поместить свои правила. Они называются <c>INPUT</c>, <c>OUTPUT</c>,
<c>FORWARD</c>, <c>PREROUTING</c> и <c>POSTROUTING</c>. Каждая из них
называется цепочкой и содержит список правил. Каждое правило описывает, что
если заголовок пакета выглядит как образец, то делать с этим пакетом нужно
то-то и то-то. Если правило не подходит под пакет, то пакет переходит к
следующему правилу в цепочке.
</p>

<p>
Вы можете поместить правила в 5 цепочках напрямую или создать новые цепочки и
добавлять в них правила таким же способом, как и в обычную цепочку. Iptables
поддерживает следующие параметры.
</p>

<table>
<tr>
  <th>Параметр:</th>
  <th>Описание:</th>
</tr>
<tr>
  <ti>-A</ti>
  <ti>Добавление</ti>
</tr>
<tr>
  <ti>-D</ti>
  <ti>Удаление</ti>
</tr>
<tr>
  <ti>-I</ti>
  <ti>Вставка</ti>
</tr>
<tr>
  <ti>-R</ti>
  <ti>Замена</ti>
</tr>
<tr>
  <ti>-L</ti>
  <ti>Просмотр</ti>
</tr>
<tr>
  <ti>-F</ti>
  <ti>Удалить все правила в цепочке или все цепочки</ti>
</tr>
<tr>
  <ti>-Z</ti>
  <ti>Обнулить счетчики во всех цепочках</ti>
</tr>
<tr>
  <ti>-C</ti>
  <ti>Проверить этот пакет в цепочке</ti>
</tr>
<tr>
  <ti>-N</ti>
  <ti>Создать новую пользовательскую цепочку</ti>
</tr>
<tr>
  <ti>-X</ti>
  <ti>Удалить пользовательскую цепочку</ti>
</tr>
<tr>
  <ti>-P</ti>
  <ti>Изменить политику цепочки для цели</ti>
</tr>
<tr>
  <ti>-E</ti>
  <ti>Изменить имя цепочки</ti>
</tr>
<tr>
  <ti>-p</ti>
  <ti>протоколе</ti>
</tr>
<tr>
  <ti>-s</ti>
  <ti>Адрес/маска источника</ti>
</tr>
<tr>
  <ti>-d</ti>
  <ti>Адрес/маска назначения</ti>
</tr>
<tr>
  <ti>-i</ti>
  <ti>Входящее имя (имя ethernet)</ti>
</tr>
<tr>
  <ti>-o</ti>
  <ti>Исходящее имя (имя ethernet)</ti>
</tr>
<tr>
  <ti>-j</ti>
  <ti>Перейти (цель для правила)</ti>
</tr>
<tr>
  <ti>-m</ti>
  <ti>Расширенные сравнения (могут использовать внешние расширения)</ti>
</tr>
<tr>
  <ti>-n</ti>
  <ti>Числовой вывод адресов и портов</ti>
</tr>
<tr>
  <ti>-t</ti>
  <ti>Таблица для обработки</ti>
</tr>
<tr>
  <ti>-v</ti>
  <ti>Расширенный режим</ti>
</tr>
<tr>
  <ti>-x</ti>
  <ti>Расширить числа (вывести все значения)</ti>
</tr>
<tr>
  <ti>-f</ti>
  <ti>Проверять только второй и последующие фрагменты</ti>
</tr>
<tr>
  <ti>-V</ti>
  <ti>Версия пакета</ti>
</tr>
<tr>
  <ti>--line-numbers</ti>
  <ti>Указывать номера строк при выводе</ti>
</tr>
</table>

<p>
Сначала попробуем заблокировать все ICMP-пакеты, идущие на наш компьютер,
просто для того, чтобы познакомиться с iptables поближе.
</p>

<pre caption="Блокировка всех пакетов ICMP">
# <i>iptables -A INPUT -p icmp -j DROP</i>
</pre>

<p>
Сначала мы указываем цепочку, в которую хотим поместить правило, затем протокол
проверяемого пакета и в конце цель. Цель может быть именем пользовательской
цепочки или одной из специальных целей &mdash; <c>ACCEPT</c>, <c>DROP</c>,
<c>REJECT</c>, <c>LOG</c>, <c>QUEUE</c> или <c>MASQUERADE</c>. В случае, если
мы укажем <c>DROP</c>, то пакет будет отброшен без уведомления клиента.
</p>

<note>
<c>LOG</c> является &laquo;необрывающей&raquo; целью. Если пакет подпадает
под правило с целью <c>LOG</c>, то он будет передан следующему правилу в
цепочке, а не обработан только этим правилом. Это позволяет регистрировать
пакеты и при этом их обрабатывать.
</note>

<p>
Теперь попробуйте выполнить <c>ping localhost</c>. Вы не должны получить
ответа, так как iptables будет отбрасывать все входящие ICMP-сообщения. Вы
также не сможете проверить и другие компьютеры, так как ответные ICMP-пакеты
тоже будут отбрасываться. А теперь, чтобы вновь получать ICMP, очистим цепочку.
</p>

<pre caption="Сбросить все правила">
# <i>iptables -F</i>
</pre>

<p>
Теперь взглянем на полноценную фильтрацию пакетов с помощью iptables. Если
нужно полноценное исследование входящих пакетов на интерфейсе eth0, то выполним
следующую команду:
</p>

<pre caption="Принимать пакеты от уже установленных соединений">
# <i>iptables -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</i>
</pre>

<p>
Это разрешит принимать любой пакет из уже установленного соединения или
связанного в цепочке INPUT. Вы можете отбросить любой пакет, не соответствующий
состоянию таблицы, выполнив команду <c>iptables -A INPUT -i eth0 -m state
--state INVALID -j DROP</c> сразу же после предыдущей. Эта команда включит
фильтрацию пакетов на основании состояния, подключив внешнее расширение
&laquo;state&raquo;. Если вам необходимо разрешить подключаться клиентам к
компьютеру, то вы можете использовать флаг <c>--state NEW</c>. Iptables
содержит несколько модулей различного назначения. Вот некоторые из них:
</p>

<table>
<tr>
  <th>Модуль/сравнение</th>
  <th>Описание</th>
  <th>Расширенные параметры</th>
</tr>
<tr>
  <ti>mac</ti>
  <ti>Расширение для проверки MAC-адресов входящих пакетов.</ti>
  <ti>--mac-source</ti>
</tr>
<tr>
  <ti>state</ti>
  <ti>Включение проверки состояния соединения</ti>
  <ti>--state (состоянием может быть ESTABLISHED,RELATED, INVALID, NEW)</ti>
</tr>
<tr>
  <ti>limit</ti>
  <ti>Частотное ограничение</ti>
  <ti>--limit, --limit-burst</ti>
</tr>
<tr>
  <ti>owner</ti>
  <ti>Попытка проверить различные характеристики создателя пакета</ti>
  <ti>
    --uid-owner userid --gid-owner groupid --pid-owner processid --sid-owner
    sessionid
  </ti>
</tr>
<tr>
  <ti>unclean</ti>
  <ti>Различные случайны проверки пакетов на правильность</ti><ti></ti>
</tr>
</table>

<p>
Теперь попробуем создать пользовательскую цепочку и применить ее для одного
из существующих:
</p>

<pre caption="Создание пользовательской цепочки">
<comment>(Создаем новую цепочку с одним правилом)</comment>
# <i>iptables -X mychain</i>
# <i>iptables -N mychain</i>
# <i>iptables -A mychain -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</i>
<comment>(Разрешающая политика по умолчанию для всего исходящего трафика. Входящий будет отброшен.)</comment>
# <i>iptables -P OUTPUT ACCEPT</i>
# <i>iptables -P INPUT DROP</i>
<comment>(И добавление ее в цепочку INPUT)</comment>
# <i>iptables -A INPUT -j mychain</i>
</pre>

<p>
Применив правило к входящей цепочке, мы получим следующую политику: все
исходящие пакеты будут пропущены, а все входящие &mdash; отброшены.
</p>

<p>
Документация может быть найдена по адресу <uri
link="http://www.iptables.org/documentation/index.html#HOWTO">Netfilter/iptables
documentation</uri>.
</p>

<p>
Теперь взглянем на полный пример. Мои правила для межсетевого экрана/шлюза
будут следующими:
</p>

<ul>
  <li>Подключения к межсетевому экрану разрешены только через SSH (порт 22)</li>
  <li>
    Локальная сеть должна иметь доступ к HTTP, HTTPS и SSH (также должен быть
    разрешен DNS)
  </li>
  <li>
    ICMP может содержать постороннюю информацию и не должен быть разрешен.
    Конечно же, мы разрешаем некоторые ICMP-сообщения.
  </li>
  <li>Сканирование портов должно быть определено и зарегистрировано</li>
  <li>SYN-атаки должны быть пресечены</li>
  <li>Весь остальной трафик должен быть отброшен и запротоколирован</li>
</ul>

<pre caption="/etc/init.d/firewall">
#!/sbin/runscript
IPTABLES=/sbin/iptables
IPTABLESSAVE=/sbin/iptables-save
IPTABLESRESTORE=/sbin/iptables-restore
FIREWALL=/etc/firewall.rules
DNS1=212.242.40.3
DNS2=212.242.40.51
#inside
IIP=10.0.0.2
IINTERFACE=eth0
LOCAL_NETWORK=10.0.0.0/24
#outside
OIP=217.157.156.144
OINTERFACE=eth1

opts="${opts} showstatus panic save restore showoptions rules"

depend() {
  need net
}

rules() {
  stop
  ebegin "Setting internal rules"

  einfo "Setting default rule to drop"
  $IPTABLES -P FORWARD DROP
  $IPTABLES -P INPUT   DROP
  $IPTABLES -P OUTPUT  DROP

  #default rule
  einfo "Creating states chain"
  $IPTABLES -N allowed-connection
  $IPTABLES -F allowed-connection
  $IPTABLES -A allowed-connection -m state --state ESTABLISHED,RELATED -j ACCEPT
  $IPTABLES -A allowed-connection -i $IINTERFACE -m limit -j LOG --log-prefix \
      "Bad packet from ${IINTERFACE}:"
  $IPTABLES -A allowed-connection -j DROP

  #ICMP traffic
  einfo "Creating icmp chain"
  $IPTABLES -N icmp_allowed
  $IPTABLES -F icmp_allowed
  $IPTABLES -A icmp_allowed -m state --state NEW -p icmp --icmp-type \
      time-exceeded -j ACCEPT
  $IPTABLES -A icmp_allowed -m state --state NEW -p icmp --icmp-type \
      destination-unreachable -j ACCEPT
  $IPTABLES -A icmp_allowed -p icmp -j LOG --log-prefix "Bad ICMP traffic:"
  $IPTABLES -A icmp_allowed -p icmp -j DROP

  #Incoming traffic
  einfo "Creating incoming ssh traffic chain"
  $IPTABLES -N allow-ssh-traffic-in
  $IPTABLES -F allow-ssh-traffic-in
  #Flood protection
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \
      ALL RST --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \
      ALL FIN --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \
      ALL SYN --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m state --state RELATED,ESTABLISHED -p tcp --dport ssh -j ACCEPT

  #outgoing traffic
  einfo "Creating outgoing ssh traffic chain"
  $IPTABLES -N allow-ssh-traffic-out
  $IPTABLES -F allow-ssh-traffic-out
  $IPTABLES -A allow-ssh-traffic-out -p tcp --dport ssh -j ACCEPT

  einfo "Creating outgoing dns traffic chain"
  $IPTABLES -N allow-dns-traffic-out
  $IPTABLES -F allow-dns-traffic-out
  $IPTABLES -A allow-dns-traffic-out -p udp -d $DNS1 --dport domain \
      -j ACCEPT
  $IPTABLES -A allow-dns-traffic-out -p udp -d $DNS2 --dport domain \
     -j ACCEPT

  einfo "Creating outgoing http/https traffic chain"
  $IPTABLES -N allow-www-traffic-out
  $IPTABLES -F allow-www-traffic-out
  $IPTABLES -A allow-www-traffic-out -p tcp --dport www -j ACCEPT
  $IPTABLES -A allow-www-traffic-out -p tcp --dport https -j ACCEPT

  #Catch portscanners
  einfo "Creating portscan detection chain"
  $IPTABLES -N check-flags
  $IPTABLES -F check-flags
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL FIN,URG,PSH -m limit \
      --limit 5/minute -j LOG --log-level alert --log-prefix "NMAP-XMAS:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL ALL -m limit --limit \
      5/minute -j LOG --log-level 1 --log-prefix "XMAS:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL ALL -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG \
      -m limit --limit 5/minute -j LOG --log-level 1 --log-prefix "XMAS-PSH:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL NONE -m limit \
      --limit 5/minute -j LOG --log-level 1 --log-prefix "NULL_SCAN:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL NONE -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,RST SYN,RST -m limit \
      --limit 5/minute -j LOG --log-level 5 --log-prefix "SYN/RST:"
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit \
      --limit 5/minute -j LOG --log-level 5 --log-prefix "SYN/FIN:"
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

  # Apply and add invalid states to the chains
  einfo "Applying chains to INPUT"
  $IPTABLES -A INPUT -m state --state INVALID -j DROP
  $IPTABLES -A INPUT -p icmp -j icmp_allowed
  $IPTABLES -A INPUT -j check-flags
  $IPTABLES -A INPUT -i lo -j ACCEPT
  $IPTABLES -A INPUT -j allow-ssh-traffic-in
  $IPTABLES -A INPUT -j allowed-connection

  einfo "Applying chains to FORWARD"
  $IPTABLES -A FORWARD -m state --state INVALID -j DROP
  $IPTABLES -A FORWARD -p icmp -j icmp_allowed
  $IPTABLES -A FORWARD -j check-flags
  $IPTABLES -A FORWARD -o lo -j ACCEPT
  $IPTABLES -A FORWARD -j allow-ssh-traffic-in
  $IPTABLES -A FORWARD -j allow-www-traffic-out
  $IPTABLES -A FORWARD -j allowed-connection

  einfo "Applying chains to OUTPUT"
  $IPTABLES -A OUTPUT -m state --state INVALID -j DROP
  $IPTABLES -A OUTPUT -p icmp -j icmp_allowed
  $IPTABLES -A OUTPUT -j check-flags
  $IPTABLES -A OUTPUT -o lo -j ACCEPT
  $IPTABLES -A OUTPUT -j allow-ssh-traffic-out
  $IPTABLES -A OUTPUT -j allow-dns-traffic-out
  $IPTABLES -A OUTPUT -j allow-www-traffic-out
  $IPTABLES -A OUTPUT -j allowed-connection

  #Allow client to route through via NAT (Network Address Translation)
  $IPTABLES -t nat -A POSTROUTING -o $OINTERFACE -j MASQUERADE
  eend $?
}

start() {
  ebegin "Starting firewall"
  if [ -e "${FIREWALL}" ]; then
    restore
  else
    einfo "${FIREWALL} does not exists. Using default rules."
    rules
  fi
  eend $?
}

stop() {
  ebegin "Stopping firewall"
  $IPTABLES -F
  $IPTABLES -t nat -F
  $IPTABLES -X
  $IPTABLES -P FORWARD ACCEPT
  $IPTABLES -P INPUT   ACCEPT
  $IPTABLES -P OUTPUT  ACCEPT
  eend $?
}

showstatus() {
  ebegin "Status"
  $IPTABLES -L -n -v --line-numbers
  einfo "NAT status"
  $IPTABLES -L -n -v --line-numbers -t nat
  eend $?
}

panic() {
  ebegin "Setting panic rules"
  $IPTABLES -F
  $IPTABLES -X
  $IPTABLES -t nat -F
  $IPTABLES -P FORWARD DROP
  $IPTABLES -P INPUT   DROP
  $IPTABLES -P OUTPUT  DROP
  $IPTABLES -A INPUT -i lo -j ACCEPT
  $IPTABLES -A OUTPUT -o lo -j ACCEPT
  eend $?
}

save() {
  ebegin "Saving Firewall rules"
  $IPTABLESSAVE &gt; $FIREWALL
  eend $?
}

restore() {
  ebegin "Restoring Firewall rules"
  $IPTABLESRESTORE &lt; $FIREWALL
  eend $?
}

restart() {
  svc_stop; svc_start
}

showoptions() {
  echo "Usage: $0 {start|save|restore|panic|stop|restart|showstatus}"
  echo "start)      will restore setting if exists else force rules"
  echo "stop)       delete all rules and set all to accept"
  echo "rules)      force settings of new rules"
  echo "save)       will store settings in ${FIREWALL}"
  echo "restore)    will restore settings from ${FIREWALL}"
  echo "showstatus) Shows the status"
}
</pre>

<p>
Вот несколько советов при создании правил для межсетевого экрана:
</p>

<ol>
  <li>Создайте политику межсетевого экрана до того, как ее реализуете</li>
  <li>Сделайте ее простой</li>
  <li>
   Знайте принцип работы каждого протокола (прочитайте подходящий <uri
   link="http://www.ietf.org/">RFC</uri>)
  </li>
  <li>
    Всегда помните, что межсетевой экран &mdash; это просто программа,
    запускаемая с правами администратора.
  </li>
  <li>Проверьте свой межсетевой экран</li>
</ol>

<p>
Если вам кажется, что iptables труден для понимания или нужно слишком много
времени для настройки межсетевого экрана, то вы можете попробовать <uri
link="http://www.shorewall.net">Shorewall</uri>. Для генерации правил
межсетевого экрана он использует iptables, но акцентируется на правилах и не
указывает протокол.
</p>

</body>
</section>
<section>
<title>Squid</title>
<body>

<p>
Squid является очень хорошим прокси-сервером. Он может фильтровать трафик на
основании времени, регулярных выражений в пути/URI, IP-адреса получателя и
отправителя, домена, браузера, имени зарегистрированного пользователя, типа
MIME и номера порта (протокола). Некоторые возможности не указаны, но трудно
перечислить их всех.
</p>

<p>
В следующем примере я добавил фильтр баннеров вместо фильтра, основанного на
фильтрации порносайтов. По этой причине gentoo.org <e>не должен быть</e>
перечислен в списке порносайтов. И я не собираюсь тратить свое время на
поиски хороших сайтов для вас.
</p>

<p>
В данном случае, вот мои правила:
</p>

<ul>
  <li>
    Веб-серфинг (HTTP/HTTPS) разрешен только в рабочее время (с понедельника по
    пятницу с 8 до 17 часов и в субботу с 8 до 13 часов), но если служащие
    остаются, то они должны работать, а не сидеть в интернете.
  </li>
  <li>
    Скачивание файлов не разрешено (.exe, .com, .arj, .zip, .asf, .avi, .mpg,
    .mpeg и так далее)
  </li>
  <li>
    Нам не нужны баннеры, поэтому они будут отфильтрованы и заменены на
    прозрачный GIF (здесь пригодится ваша креативность!).
  </li>
  <li>Все остальные подключения в/из Интернета запрещены.</li>
</ul>

<p>
Все это реализуется в 4 <e>простых</e> шага.
</p>

<pre caption="/etc/squid/squid.conf">
# Указываем IP и порт
http_port 10.0.2.1:3128

# Стандартная конфигурация
hierarchy_stoplist cgi-bin ?
acl QUERY urlpath_regex cgi-bin \?
no_cache deny QUERY

# Добавляем основные списки контроля доступа
acl all src 0.0.0.0/0.0.0.0
acl manager proto cache_object
acl localhost src 127.0.0.1/255.255.255.255

# Добавляем тех, кто может пользоваться прокси
acl localnet src 10.0.0.0/255.255.0.0

# Добавляем порты
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 443
acl purge method PURGE

# Добавляем список контроля доступа, основанного на регулярных
# выражениях, встречаемых в URL
acl archives urlpath_regex "/etc/squid/files.acl"
acl url_ads url_regex "/etc/squid/banner-ads.acl"

# Добавляем список контроля доступа, основанного на времени и дате
acl restricted_weekdays time MTWHF 8:00-17:00
acl restricted_weekends time A 8:00-13:00

acl CONNECT method CONNECT

# Разрешаем менеджеру подключаться с localhost
http_access allow manager localhost
http_access deny manager

# Разрешать очищать запросы только с localhost
http_access allow purge localhost
http_access deny purge

# Запрещать запросы на неизвестные порты
http_access deny !Safe_ports

# Запрещать подключение к портам, не относящимся к SSL
http_access deny CONNECT !SSL_ports

# Мои собственные правила

# Добавляем страницу, отображаемую на месте
# удаленного баннера
deny_info NOTE_ADS_FILTERED url_ads

# Запрещаем баннеры
http_access deny url_ads

# Запрещаем любые архивы
http_access deny archives

# Ограничиваем доступ в рабочим временем
http_access allow localnet restricted_weekdays
http_access allow localnet restricted_weekends

# Запрещаем все остальное
http_access deny all
</pre>

<p>
Далее перечислим типы запрещенных к скачиванию файлов. Я добавил zip, viv,
exe, mp3, rar, ace, avi, mov, mpg, mpeg, au, ra, arj, tar, gz и z файлы.
</p>

<pre caption="/etc/squid/files.acl">
\.[Zz][Ii][pP]$
\.[Vv][Ii][Vv].*
\.[Ee][Xx][Ee]$
\.[Mm][Pp]3$
\.[Rr][Aa][Rr]$
\.[Aa][Cc][Ee]$
\.[Aa][Ss][Ff]$
\.[Aa][Vv][Ii]$
\.[Mm][Oo][Vv]$
\.[Mm][Pp][Gg]$
\.[Mm][Pp][Ee][Gg]$
\.[Aa][Uu]$
\.[Rr][Aa]$
\.[Aa][Rr][Jj]$
\.[Tt][Aa][Rr]$
\.[Gg][Zz]$
\.[Zz]$
</pre>

<note>
Обратите внимание на [] с заглавными и строчными буквами. Это сделано для
того, чтобы никто не смог обмануть наш фильтр, пытаясь скачать файл с
расширением AvI вместо avi.
</note>

<p>
Далее добавим регулярные выражения для определения баннеров. Вы, возможно,
будете более изобретательнее меня:
</p>

<pre caption="/etc/squid/banner-ads.acl">
/adv/.*\.gif$
/[Aa]ds/.*\.gif$
/[Aa]d[Pp]ix/
/[Aa]d[Ss]erver
/[Aa][Dd]/.*\.[GgJj][IiPp][FfGg]$
/[Bb]annerads/
/adbanner.*\.[GgJj][IiPp][FfGg]$
/images/ad/
/reklame/
/RealMedia/ads/.*
^http://www\.submit-it.*
^http://www\.eads.*
^http://ads\.
^http://ad\.
^http://ads02\.
^http://adaver.*\.
^http://adforce\.
adbot\.com
/ads/.*\.gif.*
_ad\..*cgi
/Banners/
/SmartBanner/
/Ads/Media/Images/
^http://static\.wired\.com/advertising/
^http://*\.dejanews\.com/ads/
^http://adfu\.blockstackers\.com/
^http://ads2\.zdnet\.com/adverts
^http://www2\.burstnet\.com/gifs/
^http://www.\.valueclick\.com/cgi-bin/cycle
^http://www\.altavista\.com/av/gifs/ie_horiz\.gif
</pre>

<p>
И в заключении мы хотим, чтобы отображался следующий файл вместо удаленного
баннера. Он основан половине HTML-файла с прозрачным GIF-изображением размером
4х4.
</p>

<pre caption="/etc/squid/errors/NOTE_ADS_FILTERED">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META HTTP-EQUIV="REFRESH" CONTENT="0; URL=http://localhost/images/4x4.gif"&gt;
&lt;TITLE>ERROR: The requested URL could not be retrieved&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Add filtered!&lt;/H1&gt;
</pre>

<note>
Не закрывайте теги &lt;HTML&gt; и &lt;BODY&gt;. Squid сделает это
самостоятельно.
</note>

<p>
Как вы видите, у Squid есть множество возможностей для очень эффективной
фильтрации и кэширования. Можно даже использовать альтернативные прокси-сервера
Squid для сегментирования очень больших сетей. Приведенная конфигурация
подходит для небольшой сети с 1&mdash;20 пользователями.
</p>

<p>
Однако комбинация межсетевого экрана (iptables) и программного шлюза (Squid),
возможно, является наилучшей, особенно если Squid находится где-нибудь в
безопасном месте, где никто не может иметь к нему доступ извне. Нам все же
стоит позаботиться об атаках изнутри.
</p>

<p>
Теперь вам необходимо настроить клиентские браузеры для использования
прокси-сервера. Шлюз предотвратит попытки пользователей общаться с внешним
миром без использования прокси.
</p>

<note>
В Mozilla это может быть сделано через Edit->Preferences->Advanced->Proxies.
</note>

<p>
Также можно настроить прозрачное использование прокси, указав iptables
перенаправлять весь исходящий трафик на вход Squid. Это можно сделать, добавив
следующее правило на шлюзе:
</p>

<pre caption="Разрешить проброс портов для нашего прокси-сервера">
# <i>iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to proxyhost:3128</i>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to proxyhost:3128</i>
</pre>

<note>
Если прокси-сервер работает на том же узле, что и межсетевой экран (хотя это
не рекомендуется, но может понадобится из-за отсутствия свободных компьютеров),
то используйте цель <c>REDIRECT</c> вместо <c>DNAT</c> (<c>REDIRECT</c>
направит пакеты на localhost).
</note>

</body>
</section>
<section>
<title>Изучено</title>
<body>

<p>
Мы узнали:
</p>

<ol>
  <li>
    Межсетевой экран является опасным сам по себе. Плохо настроенный межсетевой
    экран хуже, чем его отсутствие.
  </li>
  <li>Как установить простой шлюз и прозрачный прокси-сервер.</li>
  <li>
    Залогом хорошей работы межсетевого экрана заключается в знании протоколов,
    которые вы собираетесь разрешить.
  </li>
  <li>
    IP-трафик не всегда содержит законные данные, например пакеты ICMP, которые
    могут содержать вредоносное содержимое.
  </li>
  <li>Как предотвратить SYN-атаку.</li>
  <li>
    Фильтрация HTTP-трафика предотвратит загрузку нежелательных изображений и
    вирусов.
  </li>
  <li>Сочетание пакетных фильтров и программных шлюзов дает лучший контроль.</li>
</ol>

<p>
Теперь, если вам <e>действительно</e> это нужно, идите и создайте правила
межсетевого экрана, отвечающего вашим требованиям.
</p>

</body>
</section>

</sections>
