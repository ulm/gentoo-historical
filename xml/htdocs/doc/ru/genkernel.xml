<?xml version='1.0' encoding="UTF-8"?>
<!-- REV: 1.6 -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/ru/genkernel">
<title>Руководство по Gentoo Linux Genkernel</title>

<author title="Author">
  <mail link="plasmaroo@gentoo.org">Tim Yamin</mail>
</author>
<author title="Translator">
  <mail link="deadlyFROZEN@yandex.ru">Ilya Krets</mail>
</author>

<abstract>
Цель этого руководства - предоставить справку по всем возможностям Genkernel.
</abstract>

<license/>

<version>1.0.0.1</version>
<date>June 15, 2003</date>

<chapter>
<title>Вступление</title>
<section>
<title>Вступление</title>
<body>

<p>
Genkernel написан для того, чтобы пользователи, не имеющие опыта по сборке ядра,
	могли использовать установку подобную Gentoo LiveCD, которая автоматически определяет системное
оборудование.
</p>

<p>
Некоторые пользователи, вероятно, будут заинтересованы в использовании genkernel для устройств,
которым необходима инициализация и уже работающее ядро перед его загрузкой, поскольку genkernel также
автоматически компилирует модули ядра, тем самым позволяя использовать оборудование, которое 
необходимо загружать с параметрами модулей.
</p>

</body>
</section>
<section>
<title>Нужен ли мне genkernel?</title>
<body>

<p>
Genkernel - это хороший выбор для тех, кто не имеет опыта сборки ядра собственноручно или 
тех, кто не уверен в конфигурации своего компьютера.
</p>

<p>
Так как genkernel приспособлен для использования настроек общего характера, он должен поддерживать
любое из ваших устройств, однако, поскольку для этого необходимо скомпилировать все драйверы и модули,
самостоятельная сборка ядра обычно гораздо быстрее, если вы знаете, что вам нужно.
</p>

<p>
Genkernel сейчас не поддерживает загрузку системы с разделов типа LVM2/EVMS2. Если Вы используете
разделы такого типа, вам рекомендуется использовать вручную собранное ядро.
</p>

</body>
</section>
<section>
<title>Получение genkernel</title>
<body>

<p>
Вы можете установить genkernel, просто запустив команду <c>emerge genkernel</c>. Не забудьте
использовать для установки флаг <c>-k</c>, если Вы используете бинарные пакеты, то есть GRP. 
Из-за того, что GRP пакеты включают более старые версии genkernel, возможности Вашей версии
genkernel может отличаться от приведенных в этом руководстве. Поэтому Вам следует посмотреть это:
 <uri link="http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1&amp;chap=9">
Gentoo Handbook</uri> и <path>genkernel --help</path>.
</p>

</body>
</section>
<section>
<title>Поддерживаемые платформы</title>
<body>

<p>
Genkernel 3.0.2 поддерживает следующие платформы: alpha, amd64, parisc, parisc64,
ppc, ppc64, sparc, sparc64, and x86. Если вам кажется, что существует ошибка в
коде поддержки, а не в genkernel, пожалуйста оставьте описание ошибки на <uri 
link="http://bugs.gentoo.org">Gentoo Bugzilla</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Использование genkernel</title>
<section>
<title>Вступление</title>
<body>

<p>
Genkernel может работать в трех режимах:
</p>

<ul>
  <li>режим "all" : собрирает как ядро, так и initrd</li>
  <li>режим "kernel": собирает только ядро</li>
  <li>режим "initrd": собирает только initrd</li>
</ul>

<p>
Большинству необходим только "all" режим, который запускает режимы "kernel" и "initrd".
<b>Заметьте</b>, что режимы "kernel" и "initrd" сейчас всего лишь псевдонимы для режима "all",
поэтому в текущей версии они никак не отразятся на работе программы.
</p>

<p>
Несмотря на то, что, в общем, genkernel - утилита, позволяющая упростить задачу компиляции ядра,
genkernel также включает в себя различные флаги, которые позволят вам задать
дополнительные настройки для сборки или конфигурирования ядра.
</p>

</body>
</section>
<section>
<title>Флаги компиляции genkernel</title>
<body>

<p>
Genkernel поддерживает следующие флаги, которые передаются соответствующим
приложениям при сборке ядра:
</p>

<ul>
  <li>
    <b>--kernel-as=<c>ассемблер</c></b>: задает ассемблер, который будет использован при сборке ядра.
  </li>
  <li>
    <b>--kernel-cc=<c>компилятор</c></b>: задает компилятор, который будет использован при сборке ядра.
  </li>
  <li>
    <b>--kernel-ld=<c>линковщик</c></b>: задает линковщик, который будет использован при сборке ядра.
  </li>
  <li>
    <b>--kernel-make=<c>утилита make</c></b>: задает альтернативную утилиту GNU Make, которая будет использована при сборке
    ядра.
  </li>
</ul>

<ul>
  <li>
    <b>--utils-as=<c>ассемблер</c></b>: задает ассемблер, который будет использован при сборке утилит поддержки.
  </li>
  <li>
    <b>--utils-cc=<c>компилятор</c></b>: задает компилятор, который будет использован при сборке утилит поддержки.
  </li>
  <li>
    <b>--utils-ld=<c>линковщик</c></b>: задает линковщик, который будет использован при сборке утилит поддержки.
  </li>
  <li>
    <b>--utils-make=<c>утилита make</c></b>: задает альтернативную утилиту GNU Make, которая будет использована при сборке
    ядра.
  </li>
</ul>

<ul>
  <li>
    <b>--makeopts=<c>-jJobs</c></b>: задает флаги, которые будут заданы GNU make, когда ядро и модули будут компилироваться.
  </li>
</ul>

</body>
</section>
<section>
<title>Флаги ядра genkernel</title>
<body>

<p>
Genkernel поддерживает следующие флаги (некоторые из них имеют <c>--<b>no-</b>опция</c> эквиваленты), которые влияют на 
сборку ядра:
</p>

<ul>
  <li>
    <b>--callback="echo Hello"</b>: выполняет заданные команды после того, как было собрано ядро и все связанные с ним модули,
    но перед сборкой initrd. Это полезно, когда вы хотите установить внешние модули в initrd, выполняя emerge через обратный вызов
    (callback) и переопределяя группу модулей genkernel.
  </li>
  <li>
    <b>--<c>no-</c>clean</b>: запускает <e>или не запускает</e> <c>make clean</c> перед сборкой ядра. Результатом этого будет 
    удаление всех объектых файлов и зависимостей.
  </li>
  <li>
    <b>--<c>no-</c>mrproper</b>: запускает <e>или не запускает</e> <c>make mrproper</c> перед сборкой ядра. Результатом этого будет
    удаление всех объектных файлов, зависимостей <b>и вашей конфигурации</b>.
  </li>
</ul>

<ul>
  <li>
    <b>--kerneldir=<path>/путь/до/исходников</path></b>: задает альтернативное расположение исходников ядра взамен стандартного
    расположения в <path>/usr/src/linux</path>.
  </li>
  <li>
    <b>--kernel-config=<path>/путь/до/конфигурации</path></b>: задает альтернативную конфигурацию ядра для сборки вместо
    <path>/путь/до/исходников/.config</path>, которая используется по умолчанию. 
  </li>
</ul>

<ul>
  <li>
    <b>--<c>no-</c>bootsplash</b>: добавляет <e>или не добавляет</e> поддержку bootsplash 
    в initrd, который собирает genkernel. Не все архитектуры сейчас поддерживают bootsplash, и для его использования
    необходима также поддержка bootsplash на уровне ядра.
  </li>
  <li>
    <b>--<c>no-</c>menuconfig</b>: запускает <e>или не запускает</e> конфигуратор ядра с использованием меню перед сборкой ядра,
    после того как <c>make oldconfig</c> был выполнен. 
  </li>
</ul>

<ul>
  <li>
    <b>--no-initrdmodules</b>: не копировать модули в initrd, который создает genkernel.
  </li>
  <li>
    <b>--<c>no-</c>install</b>: устанавливает <e>или не устанавливает</e> ваше ядро, модули и initrd по завершению процесса сборки.
  </li>
</ul>

</body>
</section>
<section>
<title>Другие флаги genkernel</title>
<body>

<p>
Genkernel также поддерживает несколько других флагов, которые не относятся к двум другим категориям:
</p>

<ul>
  <li>
    <b>--arch-override=<c>архитектура</c></b>: этот флаг используется для
	переопределения вашей архитектуры для genkernel, если
    автоопределение не удается (пожалуйста отправьте уведомление об ошибке, если
			это так) или Вы хотите провести кросс-компиляция ядра для
    платформы, отличной от той, с которой Вы запускаете genkernel. 
  </li>
</ul>

<ul>
  <li>
    <b>--busybox-config=<path>/путь/до/busybox-конфигурации</path></b>: заменяет конфигурацию busybox по умолчанию на указанный
    файл.
  </li>
  <li>
    <b>--busybox-bin=<path>/путь/до/busybox-бинарника.tar.bz2</path></b>: установка этой опции означает, что busybox бинарник не
    будет скомпилирован, а использоваться будет указанный тарболл. Заметьте, что
	busybox <e>должен</e> быть скомпилирован статически!
  </li>
</ul>

<ul>
  <li>
    <b>--minkernpackage=<path>/вывод/в/вашеядро.tar.bz2</path></b>: этот флаг
	сохраняет тарболл ядра, названный <path>kernel</path>
    и initrd, названный <path>initrd</path> в указанный файл. В тарболл не будет включены как модули, так и информация о пути.
  </li>
</ul>

</body>
</section>
<section>
<title>Запуск genkernel</title>
<body>

<p>
Все что нужно, чтобы запустить genkernel - это команда genkernel с необходимыми флагами под root. Например:
</p>

<pre caption="Запуск genkernel">
# genkernel --menuconfig --no-clean --no-install --bootsplash all
<comment>(Соберет ядро, запросив, как сконфигурировать его, оставляя нетронутыми все объектные файлы, добавляя поддержку
bootsplash, но не устанавливая ничего.)
</comment>
</pre>

<p>
Если Вы хотите, чтобы genkernel также установил Ваше ядро, Вы должны
смонтировать ваш <path>/boot</path> раздел -
последние версии genkernel сделают это за вас автоматически, если переменная MOUNTBOOT в <path>/etc/genkernel.conf</path>
равна "yes".
</p>

<pre caption="Монтирование /boot вручную">
<comment>(Если /boot - правильная запись в /etc/fstab:)</comment>
# mount /boot
<comment>(... иначе - для IDE дисков:)</comment>
# mount /dev/hda1 /boot
<comment>(... и для SCSI дисков:)</comment>
# mount /dev/sda1 /boot
</pre>

</body>
</section>
<section>
<title>Настройка genkernel для работы с bootloader</title>
<body>

<p>
Чтобы настроить genkernel для работы с загрузчиком, в него (в загрузчик)
придется внести кое-каки, изменения.
</p>

<ol>
  <li>
    Добавьте <c>root=/dev/ram0</c> и <c>init=/linuxrc</c> в параметры ядра, передаваемые его образу.
  </li>
  <li>
    Добавьте <c>real_root=/dev/hda3</c>, например, в параметры ядра, передаваемые его образу, где <path>/dev/hda3</path>
    - устройство, которое содержит ваш корневой раздел.
  </li>
  <li>
    Если Вы используете bootsplash, добавьте подходящую строчку, например <c>vga=0x317</c>, к параметрам, передаваемым ядру
    и также добавьте <c>splash=verbose</c> или <c>splash=silent</c> в зависимости от желаемого уровня информативности bootsplash.
  </li>
  <li>
    Добавьте initrd соответственно тому, как ваш bootloader требует этого: посмотрите <uri  
    link="http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1&amp;chap=9">Gentoo 
    Handbook</uri> для детальной информации о том, как сделать этого для вашего bootloader.
  </li>
</ol>

</body>
</section>
</chapter>

<chapter>
<title>Портирование genkernel</title>
<section>
<title>Вступление</title>
<body>

<p>
При том условии, что ваша архитектура имеет все необходимые библиотеки и
утилиты, необходимые genkernel, включая работающее ядро для вашей архитектуры, работающий комплект компилятора, GNU Make и работающий
дистрибутив busybox, вы готовы для портирования genkernel. 
</p>

<p>
Для каждой архитектуры, genkernel использует <path>/usr/share/genkernel/имяАрхитектуры</path> для конфигурационных файлов.
</p>

</body>
</section>
<section>
<title>Как работает начальная загрузка системы</title>
<body>

<ol>
  <li>
    Bootloader загружает образ ядра, собранный по конфигурационным спецификациям
	из директорий genkernel, а так же initrd, подготовленный genkernel.
  </li>
  <li>
    Ядро загружается, назначает небольшое количество RAM, в котором
	инициализируется busybox, который пытается загрузить для санной системы
	из списка modules_load.
  </li>
  <li>
    После завершения, и при условии, что <c>real_root</c> параметр, который является загрузочным root устройством, был найден
    busybox, система загружается с этого устройства. 
  </li>
</ol>

</body>
</section>
<section>
<title>Файлы настроек</title>
<body>

<ul>
  <li>
    <path>busy-config</path>: конфигурация, которая используется для сборки
	busybox для вашей архитектуры.
  </li>
  <li>
    <path>config.sh</path>: скрипт, который устанавливает различные внутренние переменные genkernel. Посмотрите один
    из <path>config.sh</path> файлов для примера.
  </li>
  <li>
    <path>modules_load</path>: файл, содержащий разделенный пробелами список модулей, которые загружаются для поддержки
    SCSI, FireWire, ATARAID и PCMCIA. Если ни один не доступен для вашей платформы, оставьте файл пустым. Посмотрите один
    из <path>modules_load</path> файлов для примера.
  </li>
</ul>

<ul>
  <li>
    <path>kernel-config</path>: конфигурация ядра по умолчанию, используемая для любой версии ядра.
  </li>
  <li>
    <path>kernel-config-2.4</path>: конфигурация ядра по умолчанию, используемая для ядер серии 2.4.
  </li>
  <li>
    <path>kernel-config-2.6</path>: конфигурация ядра по умолчанию, используемая для ядер серии 2.6.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
