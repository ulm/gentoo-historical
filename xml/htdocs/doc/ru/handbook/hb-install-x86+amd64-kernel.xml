<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- Текст этого документа распространяется на условиях лицензии CC-BY-SA -->
<!-- См. http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ru/handbook/hb-install-x86+amd64-kernel.xml,v 1.4 2013/04/14 16:51:06 swift Exp $ -->

<sections>

<abstract>
Ядро Linux — сердце каждого дистрибутива. В этой главе описывается, 
как его настроить. 
</abstract>

<version>7</version>
<date>2013-04-06</date>

<section>
<title>Установка исходных кодов ядра</title>
<subsection>
<title>Выбор ядра</title>
<body>

<p>
Ядро Linux &mdash; это то, вокруг чего формируются все дистрибутивы. Это слой 
между пользовательскими программами и вашим оборудованием. Пользователи Gentoo 
могут выбирать из нескольких типов ядра. Их полный список и описание находится 
в <uri link="/doc/en/gentoo-kernel.xml">руководстве по выбору ядра Gentoo 
(англ.)</uri>.
</p>

<p>
Для систем <keyval id="arch"/> есть такое ядро, как <c>gentoo-sources</c> (ядро с
заплатками для дополнительных возможностей).
</p>

<p>
С помощью команды <c>emerge</c> выберите и установите ядро. 
</p>

<pre caption="Установка исходных кодов ядра">
# <i>emerge gentoo-sources</i>
</pre>

<p>
Просмотрев содержимое каталога <path>/usr/src</path>, вы увидите
символьную ссылку <path>linux</path>, которая указывает на каталог с
исходными кодами ядра. В данном случае, установленный исходный код ядра
указывает на <c>gentoo-sources-<keyval id="kernel-version"/></c>. 
Имейте в виду, что ваша версия может отличаться.
</p>

<pre caption="Просмотр папки с исходными кодами ядра">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-<keyval id="kernel-version"/>
</pre>

<p>
Теперь настало время настройки и компиляции ядра. Можно использовать сценарий 
<c>genkernel</c>, который сформирует стандартное ядро, аналогичное 
используемому на установочном компакт-диске. Однако сначала мы расскажем о
&laquo;ручной&raquo; настройке ядра, так как это лучший из способов
оптимизации системы.
</p>

<p>
Если вы собираетесь настроить ядро вручную, то переходите к разделу <uri
link="#manual">по умолчанию: ручная настройка</uri>. Если вы хотите
использовать <c>genkernel</c>, то читайте <uri link="#genkernel">альтернатива:
использование genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>По умолчанию: ручная настройка</title>
<subsection>
<title>Введение</title>
<body>

<p>
Ручная настройка ядра считается одним из самых сложных вопросов для 
пользователей Linux. Зато после настройки нескольких вариантов ядра вы и не
вспомните, что это когда-то было трудно ;)
</p>

<p>
Однако есть одна непреложная <e>истина</e>: запуская ручную настройку ядра, 
следует знать состав аппаратуры своего компьютера. Большую часть информации 
можно собрать, установив пакет pciutils (<c>emerge pciutils</c>), в который 
входит <c>lspci</c>. <c>lspci</c> можно использовать, находясь в среде с 
временным корневым каталогом. Можно не обращать внимания на предупреждения, 
касающиеся <e>pcilib</e> (например: pcilib: cannot open /sys/bus/pci/devices 
[pcilib: не могу открыть /sys/bus/pci/devices]), которые выводит на экран 
<c>lspci</c>. Можно запустить <c>lspci</c> и <e>вне временной среды 
установки</e>. Результат тот же. Вы также можете запустить <c>lsmod</c> для 
просмотра модулей ядра, используемых установочным компакт-диском (это даст 
хорошую подсказку, какие параметры включать).
</p>

<p>
Теперь войдите в каталог с исходными кодами ядра и введите команду <c>make
menuconfig</c>. Этой командой вы вызовете меню настройки, использующее
ncurses.
</p>

<pre caption="Вызов меню настройки">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Перед вами появятся несколько разделов настройки. Сначала перечислим пункты,
включение которых обязательно (иначе Gentoo не заработает, или для его работы
потребуются дополнительные ухищрения).
</p>

</body>
</subsection>

<subsection>
<title>Включение нужных пунктов</title>
<body>

<p>
Удостоверьтесь, что каждый драйвер, жизненно необходимый для загрузки системы
(например, SCSI-контроллера), собран <e>внутри</e> ядра, а не как модуль, иначе 
система вообще не сможет загрузиться.
</p>

</body>

<body test="func:keyval('arch')='AMD64'">
<p>
Затем нам необходимо выбрать точный тип процессора. Человек, который
занимается поддержкой x86_64 ядер настоятельно рекомендует пользователям 
включить возможности MCE, чтобы они могли узнать о любых проблемах с
оборудованием. На x86_64 данные ошибки не пишутся в <c>dmesg</c>,
как на других архитектурах, а пишутся в <path>/dev/mcelog</path>.
Для этого необходим пакет <c>app-admin/mcelog</c>. Удостоверьтесь,
что вы выбрали опцию IA32 Emulation, если вы хотите запускать 32-битные
программы. По умолчанию, Gentoo установит систему multilib 
(для смешанных 32/64 битных вычислений), поэтому данная опция необходима.
</p>

<note>
Если вы хотите использовать профиль без multilib (для полностью 64-битной
системы), вам не обязательно выбирать поддержку IA32 Emulation. Однако
вам также нужно будет выполнить
<uri link="?part=1&amp;chap=6#doc_chap2_sect2">инструкции</uri> для
переключения на <uri link="/doc/en/gentoo-amd64-faq.xml">не-multilib
профиль</uri>, а также выбрать правильный <uri
link="?part=1&amp;chap=10#doc_chap2_sect2">начальный загрузчик</uri>.
</note>

<pre caption="Выбор типа процессора и возможностей">
Processor type and features --->
    [ ] Machine Check / overheating reporting 
    [ ] Intel MCE Features
    [ ] AMD MCE Features
  Processor family (AMD-Opteron/Athlon64) --->
    ( ) Opteron/Athlon64/Hammer/K8
    ( ) Intel P4 / older Netburst based Xeon
    ( ) Core 2/newer Xeon
    ( ) Intel Atom
    ( ) Generic-x86-64
Executable file formats / Emulations --->
  [*] IA32 Emulation
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
Далее выберите нужное семейство процессоров:
</p>

<pre caption="Выбор подходящего семейства процессоров">
Processor type and features ---&gt;
  <comment>(измените в соответствии со своей системой)</comment>
  (<i>Athlon/Duron/K7</i>) Processor family 
</pre>

</body>
<body>

<p>
Далее выберите <e>Maintain a devtmpfs file system to mount at /dev</e>, 
чтобы критические файлы устройств уже существовали во время процесса загрузки.
</p>

<pre caption="Включаем поддержку devtmpfs">
Device Drivers ---&gt;
  Generic Driver Options ---&gt;
    [*] Maintain a devtmpfs filesystem to mount at /dev
    [ ] Automount devtmpfs at /dev, after the kernel mounted the rootfs
</pre>

<p>
Теперь войдите в <c>File Systems</c> и выберите поддержку всех нужных
файловых систем. <e>Не</e> компилируйте поддержку файловой системы, которую
имеет ваш корневой раздел как модуль, иначе система Gentoo не
сможет смонтировать ваш раздел. Также выберите <c>Virtual memory</c> и
<c>/proc file system</c>.
</p>

<pre caption="Выбор необходимых файловых систем">
File systems ---&gt;
<comment>(выберите одну или более опций, в зависимости от вашей системы)</comment>
  &lt;*&gt; Second extended fs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; The Extended 4 (ext4) filesystem
  &lt;*&gt; Reiserfs support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; XFS filesystem support
  ...
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)

<comment>(Включите поддержку меток GPT, если вы ее использовали)</comment>
-*- Enable the block layer --->
  ...
  Partition Types --->
    [*] Advanced partition selection
      ...
      [*] EFI GUID Partition support
</pre>

<p>
Если вы используете PPPoE или коммутируемого соединения для соединения с 
интернетом, потребуется включить в ядре следующие функции:
</p>

<pre caption="Выбор нужных драйверов PPPoE">
Device Drivers ---&gt;
  Networking device Support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Два параметра сжатия данных не являются обязательными, но и не повредят.
То же относится и к параметру <c>PPP over Ethernet</c> который нужен только
для <c>ppp</c>, для поддержки PPPoE в режиме ядра.
</p>

<p>
При необходимости, не забудьте включить в ядре поддержку своей сетевой платы.
</p>

<p test="func:keyval('arch')='x86'">
Если у вас процессор Intel с поддержкой HyperTreading или многопроцессорная 
система, следует включить &laquo;симметричную многопроцессорную 
обработку&raquo;:
</p>

<p test="func:keyval('arch')='AMD64'">
Если у вас система с несколькими процессорами (Operton) или несколько
ядер (например, AMD64 X2), вам следует включать &laquo;симметричную
многопроцессорную обработку&raquo;:
</p>

<pre caption="Включение поддержки SMP">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<note>
В многоядерных системах каждое ядро считается отдельным процессором
</note>

<p test="func:keyval('arch')='x86'">
Если у вас более 4 Гб ОЗУ, вам нужно включить опцию "High Memory Support (64G)"
</p>

<p>
Если вы пользуетесь устройствами ввода на шине USB, (например, мышью или 
клавиатурой), не забудьте включить их поддержку:
</p>

<pre caption="Включение поддержки USB для устройств ввода">
Device Drivers ---&gt;
  [*] HID Devices ---&gt;
    &lt;*&gt;   USB Human Interface Device (full HID) support
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
Если вы хотите поддержку PCMCIA для своего ноутбука, не забудьте
включить поддержку моста PCMCIA своей системы:
</p>

<pre caption="Включение поддержки PCMCIA">
Bus options (PCI etc.)  ---&gt;
  PCCARD (PCMCIA/CardBus) support  ---&gt;
    &lt;*&gt; PCCard (PCMCIA/CardBus) support
<comment>(если нужно (обычно нужно), включите поддержку старых 16-битных карт PCMCIA)</comment>
    &lt;*&gt;   16-bit PCMCIA support
    [*]   32-bit CardBus support
<comment>(выберите наиболее подходящий мост)</comment>
    *** PC-card bridges ***
    &lt;*&gt; CardBus yenta-compatible bridge support (NEW)
    &lt;*&gt; Cirrus PD6729 compatible bridge support (NEW)
    &lt;*&gt; i82092 compatible bridge support (NEW)
</pre>

<p>
Закончив настройку ядра, приступайте к <uri link="#compiling">компиляции и 
установке</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Компиляция и установка</title>
<body>

<p>
Теперь, когда ядро настроено, настало время его скомпилировать и установить. 
Выйдите из настройки и запустите процесс компиляции:
</p>

<pre caption="Компилируем ядро">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
По завершении компиляции, скопируйте образ ядра в каталог <path>/boot</path>. 
Используйте любое имя, которое вам покажется подходящим для избранного ядра, и
запомните его, так как позже при настройке начального загрузчика оно 
потребуется. Не забудьте заменить <c><keyval id="kernel-name"/></c> на
имя и версию своего ядра.
</p>

<pre caption="Установка ядра">
# <i>cp arch/<keyval id="arch-sub"/>/boot/bzImage /boot/<keyval id="kernel-name"/></i>
</pre>

</body>
</subsection>

<subsection>
<include href="hb-install-initramfs.xml"/>
</subsection>
</section>

<section id="genkernel">
<title>Альтернатива: использование genkernel</title>
<body>

<p>
Если вы читаете эти строки, значит, вы собираетесь использовать наш сценарий
<c>genkernel</c> для настройки ядра за вас.
</p>

<p>
Теперь когда исходные коды ядра установлены, настало время скомпилировать ядро,
собрав его автоматически при помощи сценария <c>genkernel</c>. <c>genkernel</c> 
выполняет настройку ядра практически так же, как настраивается ядро на 
установочном компакт-диске. То есть система, ядро которой собрано 
<c>genkernel</c>, как правило, будет выполнять определение всех устройств при
загрузке. Поскольку genkernel не требует никакой ручной настройки ядра, это 
идеальное решение для тех, кому неуютно от одной мысли, что придется 
компилировать ядро.
</p>

<p>
Рассмотрим, как использовать genkernel. Сначала установите его:
</p>

<pre caption="Установка genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Теперь скомпилируйте исходный код ядра, запустив <c>genkernel all</c>. Имейте в 
виду, что компиляция займет приличное время, поскольку <c>genkernel</c> 
собирает ядро, поддерживающее практически любое оборудование.
</p>

<p>
Если в загрузочном разделе не используется файловая система ext2 или ext3, то 
вам придется вручную настроить ядро, запустив <c>genkernel --menuconfig 
all</c>, добавив поддержку используемой файловой системы <e>в</e> ядро (т.е. 
<e>не</e> модулем). Пользователям LVM2, вероятно, захочется также 
добавить параметр командной строки <c>--lvm2</c>.
</p>

<pre caption="Запуск genkernel">
# <i>genkernel all</i>
</pre>

<p>
В итоге работы <c>genkernel</c> будет создано ядро, полный набор модулей и 
<e>начальный RAM-диск</e> (initramfs). Ядро и initrd будут использоваться
в процессе настройки загрузчика системы, которая описана далее в руководстве.
Запишите имена ядра и начального корневого диска, так как они понадобятся при 
составлении конфигурационного файла загрузчика. initrd запускается сразу при
начальной загрузке, выполняя автоматическое определение устройств (точно так 
же, как при запуске установочного диска), до запуска &laquo;настоящей&raquo; 
системы.
</p>

<pre caption="Уточнение названия созданного образа ядра и initrd">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

</body>
</section>

<section id="kernel_modules">
<title>Модули ядра</title>
<subsection>
<include href="hb-install-kernelmodules.xml"/>
</subsection>
</section>

</sections>

<!-- *$Localization:
target-language: Russian
target-date: 2013-04-06
source-cvs-revision: 1.51
translated-by: Vasiliy Golubev [vas@nightmail.ru]
edited-by: Alexey Chumakov [achumakov@gentoo.org]
edited-by: Vladimir Romanov [blueboar2@gmail.com]
-->
