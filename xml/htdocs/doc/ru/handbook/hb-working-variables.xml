<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->
<!-- REV: 1.11 -->
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ru/handbook/hb-working-variables.xml,v 1.1 2005/02/26 14:14:16 sergey Exp $ -->

<sections>

<version>1.8</version>
<date>2004-08-30</date>

<section>
<title>Переменные окружения?</title>
<subsection>
<title>Что это такое</title>
<body>

<p>
Переменная окружения - это именованный объект содержащий информацию, которая
используется одним или болле приложением. Многим пользователям, в осбенности
недавно используещим Linux, эта методика кажется странной и совершенно
неконтролируемой. Это не совсем так, точнее совсем не так. Используя переменные
окружения, можно очень легко и просто изменить настройки одной или нескольких
программ.
</p>

</body>
</subsection>
<subsection>
<title>Важный пример</title>
<body>

<p>
В следующей таблице описывается ряд переменных использующихся в системах Linux.
Примеры их значений приведены далее.
</p>

<table>
<tr>
  <th>Переменная</th>
  <th>Описание</th>
</tr>
<tr>
  <ti>PATH</ti>
  <ti>
  	Эта переменная содержит список папок, разделённый двоеточиями, в которых
	система ищет исполняемые файлы. Если вы вводите имя исполняемого файла 
    (например <c>ls</c>, <c>rc-update</c> или <c>emerge</c>), который не
	находится ни в одной из перчисленных директорий, то этот файл не будет
	запущен, если, конечно, вы не указали полный путь (например: <c>/bin/ls</c>).
  </ti>
</tr>
<tr>
  <ti>ROOTPATH</ti>
  <ti>
  	Эта переменная имеет такое же значение что и <c>PATH</c>, но содержит
	список, только тех папок, в которых надо искать файлы, когда комманда
	вводится пользователем root.
  </ti>
</tr>
<tr>
  <ti>LDPATH</ti>
  <ti>
  	Содержит список папок, разделенных двоеточием, в которых динамический линкер
	ищет библиотеки.
  </ti>
</tr>
<tr>
  <ti>MANPATH</ti>
  <ti>
	Содержит список папок, разделенных двоеточием, в которых комманда <c>man</c>
	ищет страницы руководств.
  </ti>
</tr>
<tr>
  <ti>INFODIR</ti>
  <ti>
    Содержит список папок, разделенных двоеточием, в которых комманда <c>info</c>
	ищет страницы руководств.
  </ti>
</tr>
<tr>
  <ti>PAGER</ti>
  <ti>
  	Путь к программе, для просмотра содержимого файла, типа <c>less</c> или
	<c>more</c>.
  </ti>
</tr>
<tr>
  <ti>EDITOR</ti>
  <ti>
  	Путь к программе, использующейся для редактирования файлов, типа <c>vi</c>
	или <c>nano</c>.
  </ti>
</tr>
<tr>
  <ti>KDEDIRS</ti>
  <ti>
	Содержит список папок, разделенных двоеточием, в которых находятся материалы
	KDE.
  </ti>
</tr>
<tr>
  <ti>CLASSPATH</ti>
  <ti>
	Содержит список папок, разделенных двоеточием, с классами Java.
  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT</ti>
  <ti>
	Список папок, разделенных <c>пробелом</c>, которые зашишены Portage во время
	обновления.
  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT_MASK</ti>
  <ti>
	Список папок, разделенных <c>пробелом</c>, которые Portage не должен
	защищать во время обновления.
  </ti>
</tr>
</table>

<p>
Вот, как может выглядеть определение этих переменных.
</p>

<pre caption="Пример определения">
PATH="/bin:/usr/bin:/usr/local/bin:/opt/bin:/usr/games/bin"
ROOTPATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
LDPATH="/lib:/usr/lib:/usr/local/lib:/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
MANPATH="/usr/share/man:/usr/local/share/man"
INFODIR="/usr/share/info:/usr/local/share/info"
PAGER="/usr/bin/less"
EDITOR="/usr/bin/vim"
KDEDIRS="/usr"
CLASSPATH="/opt/blackdown-jre-1.4.1/lib/rt.jar:."
CONFIG_PROTECT="/usr/X11R6/lib/X11/xkb /opt/tomcat/conf \
                /usr/kde/3.1/share/config /usr/share/texmf/tex/generic/config/ \
                /usr/share/texmf/tex/platex/config/ /usr/share/config"
CONFIG_PROTECT_MASK="/etc/gconf
</pre>

</body>
</subsection>
</section>
<section>
<title>Глобальное определение переменных</title>
<subsection>
<title>Папка /etc/env.d</title>
<body>

<p>
Для того, чтобы централизовать определение этих переменных, в Gentoo была
введена папка <path>/etc/env.d</path>. В ней находится рад файлов, типа 
<path>00basic</path>, <path>05gcc</path> и т.д., в которых определяются
переменные необходимые программе стоящей в названии.
</p>

<p>
Например, если вы установили <c>gcc</c>, то ebuild создаст файл
<path>05gcc</path>, содержащий следующие определения переменных:
</p>

<pre caption="/etc/conf.d/05gcc">
PATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/info"
CC="gcc"
CXX="g++"
LDPATH="/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
</pre>

<p>
В других дистрибутивах вам, возможно, потребуется добавить или дополнить эти
определения в <path>/etc/profile</path> или где-то еще. Gentoo делает вашу жизнь
(ну и конечно работу для Portage) намного легче, т.к. больше не надо следить за
многочисленными файлами, которые могут содержать определения переменных.
</p>

<p>
Например, когда <c>gcc</c> обновится, то будет обновлен и
<path>/etc/env.d/05gcc</path> без какого либо вмешателсьтва со стороны
пользователя.
</p>

<p>
Это удобно не только для Portage, но и для пользователя. Иногда вам может
потребоваться установить какую то переменную глобально. Возьмем к примеру
<c>http_proxy</c>. Вместо того, чтобы возится с 
<path>/etc/profile</path>, вы можете создать файл в <path>/etc/env.d/</path>
(например <path>/etc/env.d/99local</path>) и добавить нужные определения туда:
</p>

<pre caption="/etc/env.d/99local">
http_proxy="proxy.server.com:8080"
</pre>

<p>
Очень удобно использовать один файл для всех пользовательских определний
переменных, тогда не будет проблем найти, какие же переменные вы установили.
</p>

</body>
</subsection>
<subsection>
<title>Скрипт env-update</title>
<body>

<p>
Переменная <c>PATH</c> определeнa в нескольких файлах в <path>/etc/env.d</path>.
Нет, нет это не ошибка: когда вы запустите <c>env-update</c>, он объединит
разные определения прежде обновить переменные окружения. Это позволяет авторам
пакетов и пользоователям добавлять свои определения переменных не затрагивая уже
существующих настроек.
</p>

<p>
Скрипт <c>env-update</c> объединит занчения переменных в алфавитном порядке
файлов в <path>/etc/env.d</path>, вот почему названия многих файлов в этой 
папке начинаются с цифр.
</p>

<pre caption="Порядок, в котором env-update прозиводит обновление">
         00basic        99kde-env       99local
     +-------------+----------------+-------------+
PATH="/bin:/usr/bin:/usr/kde/3.2/bin:/usr/local/bin"
</pre>

<p>
Скрипт <c>env-update</c> создаст все переменные окружения и положит их в
<path>/etc/profile.env</path>, который используется файлом
<path>/etc/profile</path>. Кроме того, на базе переменный <c>LDPATH</c>, он
создат <path>/etc/ld.so.conf</path> и запустит <c>ldconfig</c>, чтобы по новой
сгенерировать <path>/etc/ld.so.cache</path>, использующийся динамическим
линковщиком.
</p>

<p>
Есливы хотите, чтобы результаты работы <c>env-update</c> вступили в силу
немедлено, то вам надо выполнить следующую команду. Те, кто самостоятельно
устанавливал Gentoo, конечно же помнют ее со врмени инсталяции:
</p>

<pre caption="Обновление окружения">
# <i>env-update &amp;&amp; source /etc/profile</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Локальное определение переменных</title>
<subsection>
<title>Определения для пользователя</title>
<body>

<p>
Далеко не всегда нужно определять переменные глобально. Например, вы хотите
добавить <path>/home/мой_пользователь/bin</path> к переменной <c>PATH</c>, но не
хотите, чтобы это оказалось в переменной у всех пользователей. В этом случае
надо определить переменную локально - в файле <path>~/.bashrc</path> или 
<path>~/.bash_profile</path>:
</p>

<pre caption="Расширяем PATH для локального использования в ~/.bashrc">
PATH="${PATH}:/home/my_user/bin"
</pre>

<p>
Когда вы снова войдете в систему, ваш <c>PATH</c> будет обновлён.
</p>

</body>
</subsection>
<subsection>
<title>Определения для сессии</title>
<body>

<p>
Иногда необходимо наложить еще более жесткие ограничения. Например вы хотите
использовать испоняемые файлы из временной папки, не указывая полный путь. В
тоже время не хотелось бы менять файл <path>~/.bashrc</path> ради этих нескольких
минут.
</p>

<p>
В этом случае воспользуйтесь коммандой <c>export</c>, чтобы определить переменную
<c>PATH</c> только для текущей сессии. Переменная сохранится, до тех пор, пока
вы не закончите сеанс.
</p>

<pre caption="Определение переменной окружения для сессии">
# <i>export PATH="${PATH}:/home/my_user/tmp/usr/bin"</i>
</pre>

</body>
</subsection>
</section>
</sections>
