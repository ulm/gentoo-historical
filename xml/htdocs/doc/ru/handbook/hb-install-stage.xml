<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- Текст этого документа распространяется на условиях лицензии CC-BY-SA -->
<!-- См. http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ru/handbook/hb-install-stage.xml,v 1.16 2013/12/31 04:03:52 blueboar Exp $ -->

<sections>

<abstract>
Установка Gentoo выполняется с помощью архива третьей стадии (stage3). 
В этой главе мы расскажем, как извлечь файл третьей стадии и настроить Portage. 
</abstract>

<version>12</version>
<date>2013-12-17</date>

<section>
<title>Установка архива стадии</title>
<subsection>
<title>Установка текущей даты и времени</title>
<body>

<p>
Перед тем, как продолжать, убедитесь в правильности системной даты и времени, и 
при необходимости обновите их. Если часы установлены неверно, это в будущем 
может привести к странным результатам!
</p>

<p>
Для проверки времени, введите команду <c>date</c>:
</p>

<pre caption="Проверка даты и времени">
# <i>date</i>
Fri Mar 29 16:21:18 UTC 2005
</pre>

<p>
Если часы установлены неправильно, измените время командой <c>date 
ММДДччммГГГГГ</c> (формат: <b>М</b>есяц, <b>Д</b>ень, <b>ч</b>асы, 
<b>м</b>инуты и <b>Г</b>од). На этом этапе следует указывать время UTC.
Позднее вы сможете установить свой часовой пояс. Например, для установки часов
на 29 марта, 16:21, 2005 год, выполните:
</p>

<pre caption="Установка даты и времени">
# <i>date 032916212005</i>
</pre>

</body>
</subsection>
<subsection>
<title>Выбор источника</title>
<body>

<p>
Следующий необходимый шаг &mdash; установка архива <e>stage3</e> на вашу 
систему. Можно использовать команду <c>uname -m</c>, чтобы определить,
какой файл стадии нужно скачивать, так как она дает информацию об
архитектуре вашей системы.
</p>

</body>
</subsection>
</section>
<section>
<title>Использование файла стадии из интернета</title>
<subsection>
<title>Загрузка архива стадии</title>
<body>

<p>
Перейдите в точку подключения файловой системы Gentoo (обычно &mdash; 
<path>/mnt/gentoo</path>):
</p>

<pre caption="Переход к точке подключения Gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
Для загрузки файла стадии у вас уже есть различные инструменты, зависящие от 
типа диска, с которого производится установка. Если имеется <c>links</c>, 
можете сразу открыть <uri link="/main/ru/mirrors.xml">список зеркал 
Gentoo</uri> и выбрать ближайшее: наберите <c>links http://www.gentoo.org/main/en/mirrors.xml</c>
и нажмите ввод.
</p>

<p>
Когда <c>links</c> нет, в вашем распоряжении должен оказаться <c>lynx</c>.
Если требуется использовать прокси-сервер, экспортируйте переменные 
<c>http_proxy</c> и <c>ftp_proxy</c>:
</p>

<pre caption="Настройка информации о прокси-сервере для lynx">
# <i>export http_proxy="http://proxy.server.com:port"</i>
# <i>export ftp_proxy="http://proxy.server.com:port"</i>
</pre>

<p>
Предположим, у вас под рукой есть <c>links</c>.
</p>

<p>
Выберите ближайшее зеркало. Обычно подойдут HTTP-зеркала, однако существуют
и другие протоколы. Перейдите в каталог <path><keyval id="release-dir"/></path>.
Там вы должны увидеть все существующие файлы стадий для вашей архитектуры
(они могут располагаться в подкаталогах с названиями разновидностей
архитектуры). Выберите один из них и нажмите <c>D</c> для загрузки. По 
окончании &mdash; нажмите <c>Q</c>, чтобы выйти из браузера.
</p>

<p test="'x86'=func:keyval('arch')">
Большинство пользователей PC должны использовать архив третьей стадии
<b><keyval id="stage3"/></b>. Все современные PC считаются i686. Если
у вас старая машина, вы можете проверить <uri link="http://en.wikipedia.org/wiki/I686">
список i686-совместимых процессоров</uri> на Википедии. Старые процессоры,
вроде Pentium, K5, K6 или VIA C3, и похожие на них, требуют более общую 
третью стадию <b>x86</b>. Процессоры, более старые, чем <b>i486</b> не
поддерживаются.
</p>

<pre caption="Открытие списка зеркал в links">
# <i>links http://www.gentoo.org/main/ru/mirrors.xml</i>

<comment>(если в links нужна поддержка прокси-сервера:)</comment>
# <i>links -http-proxy proxy.server.com:8080 http://www.gentoo.org/main/ru/mirrors.xml</i>
</pre>

<p>
Удостоверьтесь, что вы скачали <b>stage3</b>-архив &mdash; установка с 
использованием файлов stage1 и stage2 более не поддерживается (и, в большинстве
случаев, вы все равно не найдете файлов stage1 или stage2 на наших обычных
зеркалах).
</p>

<p>
Если вы хотите проверить целостность загруженного архива стадии, используйте
<c>openssl</c> и сравните результат с контрольными суммами, взятыми с зеркала.
Файлы с расширением .DIGEST дают несколько контрольных сумм, рассчитанных по
различным алгоритмам. Рекомендуемыми являются SHA512 и Whirlpool.
</p>

<pre caption="Вычисляем контрольную сумму архива стадии">
<comment>## Вычисляем контрольную сумму SHA512</comment>
# <i>openssl dgst -r -sha512 <keyval id="stage3" /></i>
<comment>или</comment>
# <i>sha512sum <keyval id="stage3" /></i>

<comment>## Вычисляем контрольную сумму Whirlpool</comment>
# <i>openssl dgst -r -whirlpool <keyval id="stage3" /></i>
</pre>

<p>
Затем сравните вывод данных команд со значением, записанным в файлах
<path>.DIGEST(.asc)</path>, которые также можно найти на зеркалах. Значения должны совпадать,
иначе скачанный файл может быть испорчен (либо испорчен файл .DIGEST).
</p>

<p>
Как и с файлом ISO, вы можете проверить криптографическую сигнатуру файла
<path>.DIGESTS.asc</path> используя <c>gpg</c>, чтобы быть уверенным, что
контрольные суммы не менялись:
</p>

<pre caption="Проверка контрольных сумм с использованием gpg">
# <i>gpg --verify <keyval id="stage3" />.DIGESTS.asc</i>
</pre>

</body>
</subsection>
<subsection>
<title>Распаковка архива стадии</title>
<body>

<p>
Распакуйте загруженный архив стадии в своей системе. Мы используем <c>tar</c>, 
т.к. это простейший способ:
</p>

<pre caption="Распаковка архива стадии">
# <i>tar xvjpf stage3-*.tar.bz2</i>
</pre>

<p>
Убедитесь, что вы используете точно такие же параметры командной строки 
(<c>xvjpf</c>). Значения параметров: <c>x</c> &mdash; <e>извлечение</e>, 
<c>v</c> &mdash; <e>подробные сообщения</e>, чтобы видеть, что происходит во 
время распаковки (необязательный параметр), <c>j</c> &mdash; 
<e>декомпрессия bzip2</e>, <c>p</c> &mdash; <e>сохранение прав доступа</e>, и, 
наконец,  <c>f</c> &mdash; указывает на то, что мы распаковываем файл, а не 
то, что подается на стандартный ввод.
</p>

<!-- У MIPS свой файл hb-install-stage.xml, кроме него еще есть архитектуры?
<note>
На установочных компакт-дисках и загрузочных образах для некоторых архитектур
(например, MIPS) <c>tar</c> встроен в оболочку BusyBox, которая на данный
момент не поддерживает параметр <c>v</c>. Тогда вместо приведенных указывайте 
параметры <c>xjpf</c>.
</note>
-->

<p>
После развертывания установки стадии переходите к <uri 
link="#compile_options">настройке параметров компиляции</uri>.
</p>

</body>
</subsection>
</section>

<section id="compile_options">
<title>Настройка параметров компиляции</title>
<subsection>
<title>Введение</title>
<body>

<p>
Для оптимизации Gentoo вы можете создать ряд переменных, которые повлияют на 
поведение Portage. Все их можно создавать как переменные среды (с помощью 
<c>export</c>), но тогда они будут лишь временными. Для хранения ваших настроек
предназначен конфигурационный файл Portage, <path>/etc/portage/make.conf</path>. Именно 
его мы сейчас будем редактировать.
</p>

<note>
Список и описание всех допустимых переменных находятся в файле 
<path>/mnt/gentoo/usr/share/portage/config/make.conf.example</path>. Для успешной установки Gentoo, 
достаточно установить значения только тех переменных, которые описаны ниже.
</note>

<p>
Запустите ваш любимый редактор (в этом руководстве используется <c>nano</c>)
для изменения параметров оптимизации, которые обсуждаются далее.
</p>

<pre caption="Открытие /etc/portage/make.conf">
# <i>nano -w /mnt/gentoo/etc/portage/make.conf</i>
</pre>

<p>
Как вы могли заметить, у файла <path>make.conf.example</path> обычная 
структура: строки комментария начинаются со знака &laquo;#&raquo;, а в 
остальных строках выражениями вида <c>ПЕРЕМЕННАЯ=&quot;значение&quot;</c> 
определяются переменные. У файла <path>make.conf</path> такой же  
формат. Некоторые из переменных мы обсудим ниже.
</p>

</body>
</subsection>
<subsection>
<title>CFLAGS и CXXFLAGS</title>
<body>

<p>
Переменные <c>CFLAGS</c> и <c>CXXFLAGS</c> определяют параметры оптимизации 
компилятора <c>gcc</c> для языков C и C++, соответственно. При том, что общие 
значения следует устанавливать здесь, максимальная производительность 
достигается в том случае, когда для каждой компилируемой программы 
устанавливаются свои собственные оптимальные параметры. Причина в том, что все 
программы различны.
</p>

<p>
В файле <path>make.conf</path> следует указывать параметры оптимизации, 
которые, на ваш взгляд, повысят скорость системы <e>в целом</e>. Не помещайте 
сюда экспериментальные значения; излишняя оптимизация может привести к плохому 
поведению программ (аварийным завершениям, или, что хуже, неправильной работе). 
</p>

<p>
Мы не будем описывать все возможные параметры оптимизации. Если вы хотите 
узнать о них всё, почитайте <uri 
link="http://gcc.gnu.org/onlinedocs/">онлайновые руководства GNU (англ.)</uri> 
или страницу описания <c>gcc</c> (<c>info gcc</c> &mdash; доступна только на
работающей системе Linux). Не забудьте прочитать сам файл 
<path>make.conf.example</path>: в нем также есть немало примеров и полезных 
сведений.
</p>

<p test="not(contains('AMD64 x86', func:keyval('arch')))">
Первый параметр &mdash; флаг <c>-march=</c> или флаг <c>-mcpu=</c>, где указывается 
название целевой архитектуры. Возможные варианты описаны в комментариях в файле 
<path>make.conf.example</path>. Часто используется значение <e>native</e>, так как
оно сообщает компилятору, чтобы он выбрал архитектуру текущей системы (той, на
которую вы производите установку).
</p>

<p test="contains('AMD64 x86',func:keyval('arch'))">
Первый параметр &mdash; флаг <c>-march=</c> или флаг <c>-mtune=</c>, где указывается 
название целевой архитектуры. Возможные варианты описаны в комментариях в файле 
<path>make.conf.example</path>. Часто используется значение <e>native</e>, так как
оно сообщает компилятору, чтобы он выбрал архитектуру текущей системы (той, на
которую вы производите установку).
</p>

<p>
Следующий &mdash; флаг <c>-O</c> (заглавная латинская &laquo;O&raquo;, а не 
ноль), определяющий класс оптимизации в <c>gcc</c>. Допустимые значения: 
<c>s</c> &mdash; оптимизация по размеру; <c>0</c> &mdash; ноль, без 
оптимизации; <c>1</c>, <c>2</c> или даже <c>3</c> &mdash; все большая оптимизация 
по скорости (в каждый класс входят все флаги предыдущего, и некоторые 
дополнительные). <c>-O2</c> является рекомендуемым значением по умолчанием.
<c>-O3</c> при использовании для всей системы, иногда вызывает проблемы,
поэтому мы рекомендуем вам остановиться на <c>-O2</c>.
</p>

<p>
Другой популярный флаг оптимизации &mdash; <c>-pipe</c> (использование для 
связи между различными проходами компилятора каналов вместо временных файлов).
Этот флаг не влияет на получаемый код, но использует больше памяти. На системах
с малым объемом памяти, gcc может аварийно завершиться. В этом случае не
используйте данный флаг.
</p>

<p>
Использование <c>-fomit-frame-pointer</c> (не хранить в регистре 
указатель стекового кадра для функций, которым он не нужен) может всерьез
помешать отладке программ.
</p>

<p>
При определении переменных <c>CFLAGS</c> и <c>CXXFLAGS</c>, нужно объединять
несколько флагов оптимизации. Значения по умолчанию, содержащиеся в третьей
стадии, которую вы распаковали, должны быть достаточно хороши. Следующие значения
приведены просто для примера:
</p>

<pre test="not(contains('AMD64 arm', func:keyval('arch')))" caption="Определяем переменные CFLAGS и CXXFLAGS">
CFLAGS="<keyval id="CFLAGS"/>"
<comment># указывайте одинаковые значения обеих переменных</comment>
CXXFLAGS="${CFLAGS}"
</pre>

<pre test="func:keyval('arch')='AMD64'" caption="Определяем переменные CFLAGS и CXXFLAGS">
CFLAGS="<keyval id="CFLAGS"/>"       <comment># пользователи Intel EM64T должны использовать -march=core2</comment>
<comment># указывайте одинаковые значения обеих переменных</comment>
CXXFLAGS="${CFLAGS}"
</pre>

<pre test="func:keyval('arch')='arm'" caption="Определяем переменные CFLAGS и CXXFLAGS">
CFLAGS="<keyval id="CFLAGS"/>       <comment># Удостоверьтесь, что -march совпадает с типом вашего процессора</comment>
<comment># указывайте одинаковые значения обеих переменных</comment>
CXXFLAGS="${CFLAGS}"
</pre>

<note>
Вы можете также захотеть просмотреть 
<uri link="https://wiki.gentoo.org/wiki/GCC_optimization">гайд по оптимизации процесса компиляции</uri> для
более детальной информации о том, как различные опции компиляции могут повлиять
на вашу систему.
</note>

</body>
</subsection>
<subsection>
<title>MAKEOPTS</title>
<body>

<p>
С помощью <c>MAKEOPTS</c> определяется, сколько параллельных процессов 
компиляции можно запускать при установке пакета. Хорошим вариантом 
(но не всегда оптимальным) является значение, равное количеству процессоров 
(или ядер) в системе плюс один.
</p>

<pre caption="MAKEOPTS для обычной однопроцессорной системы">
MAKEOPTS="-j2"
</pre>

</body>
</subsection>
<subsection>
<title>На старт, внимание, марш!</title>
<body>

<p>
Измените <path>/mnt/gentoo/etc/portage/make.conf</path> в соответствии со своими  
пожеланиями, и сохраните изменения (пользователям <c>nano</c> нужно нажать
<c>CTRL+X</c>). Теперь вы готовы к <uri link="?part=1&amp;chap=6">установке 
базовой системы Gentoo</uri>.
</p>

</body>
</subsection>
</section>
</sections>

<!-- *$Localization:
target-language: Russian
target-date: 2013-12-17
source-cvs-revision: 1.135
translated-by: Anton Bitkov, Andrey Boroday, Vasiliy Golubev [vas@nightmail.ru]
edited-by: Alexey Chumakov [achumakov@gentoo.org]
edited-by: Vladimir Romanov [blueboar2@gmail.com]
-->
