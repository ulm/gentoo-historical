<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ru/handbook/hb-portage-advanced.xml,v 1.2 2013/04/14 16:51:06 swift Exp $ -->

<sections>

<abstract>
Со временем Portage эволюционирует и становится все более и более взрослым. 
Постоянно появляются дополнительные возможности. Многие из них будут 
использоваться только более подготовленными пользователями. Данная глава 
даст вам представление об этих специфических возможностях.
</abstract>

<version>2</version>
<date>2013-04-11</date>

<section>
<title>Введение</title>
<body>

<p>
Для большинства пользователей полученной до сих пор информации будет достаточно 
для всех операций в системе Linux. Но Portage способен на гораздо большее. 
Многие из его возможностей предназначены для более продвинутых пользователей, или применимы 
только в некоторых исключительных случаях. Но все же будет недопустимо их не документировать.
</p>

<p>
Конечно, из-за большой гибкости, может появиться огромный список потенциальных случаев. 
Невозможно рассмотреть здесь все. Вместо этого мы планируем сфокусироваться на некоторых 
общих случаях, которые вы можете использовать, чтобы справиться с вашими задачами. 
Если вам нужны более специфически подсказки, вы можете найти их в 
<uri link="https://wiki.gentoo.org">вики Gentoo</uri>.
</p>

<p>
Большинство (а может и все) из этих дополнительных возможностей можно легко найти,
прочитав страницу man, которая идет с Portage:
</p>

<pre caption="Читаем man-страницы portage">
$ <i>man portage</i>
$ <i>man make.conf</i>
</pre>

<p>
И, в конце концов, знайте, что эти расширенные возможности, если их применять 
неправильно, могут сильно затруднить отладку и решение проблем. Удостоверьтесь, 
что вы приняли это во внимание, прежде чем вы налетите на ошибку и захотите 
написать нам о ней отчет.
</p>

</body>
</section>

<section>
<title>Переменные окружения для отдельных пакетов</title>
<subsection>
<title>Используем /etc/portage/env</title>
<body>

<p>
По умолчанию, package использует при сборке переменные окружения, 
определенные в <path>/etc/portage/make.conf</path>. Это такие переменные, как 
<c>CFLAGS</c>, <c>MAKEOPTS</c> и другие. В некоторых случаях, однако, 
вы можете захотеть использовать различные переменные для различных пакетов. 
Чтобы это сделать, Portage поддерживает использование 
<path>/etc/portage/env</path> и <path>/etc/portage/package.env</path>.
</p>

<p>
Файл <path>/etc/portage/package.env</path> содержит список пакетов, для 
которых вы хотите изменить переменные, а также специальный идентификатор, 
который говорит Portage, какие вы хотите изменения. Имя идентификатора 
вы выбираете сами. Portage будет искать переменные в файле 
<path>/etc/portage/env/&lt;идентификатор&gt;</path>.
</p>

</body>
</subsection>
<subsection>
<title>Пример: Используем режим отладки для конкретных пакетов</title>
<body>

<p>
Как пример, мы включим отладку для пакета <path>media-video/mplayer</path>:
</p>

<p>
Прежде всего, мы настроим переменные для отладки в файле, называемом 
<path>/etc/portage/env/debug-cflags</path>. Имя выбрано наугад, но оно, 
конечно, отражает причину отклонения, чтобы потом было понятнее, 
почему отклонение было сделано.
</p>

<pre caption="Содержимое /etc/portage/env/debug-cflags">
CFLAGS="-O2 -ggdb -pipe"
FEATURES="${FEATURES} nostrip"
</pre>

<p>
Затем мы помечаем пакет <path>media-video/mplayer</path>, чтобы он использовал этот файл:
</p>

<pre caption="Содержимое /etc/portage/package.env">
media-video/mplayer debug-cflags
</pre>

</body>
</subsection>
</section>

<section>
<title>Вмешиваемся в процесс установки</title>
<subsection>
<title>Используем /etc/portage/bashrc и связанные с ним файлы</title>
<body>

<p>
Когда Portage работает с файлами ebuild, он использует окружение bash, 
в котором он вызывает различные функции компиляции (например, src_prepare, 
src_configure, pkg_postinst, и т. д.). Но Portage также позволяет вам 
настроить окружение bash самому.
</p>

<p>
Преимущество использования своего собственного окружения bash в том, что вы 
можете вклиниться в процесс установки на любом его шаге. Это может быть 
сделано для каждой установки (через <path>/etc/portage/bashrc</path>), или 
используя окружение для каждого пакета (через <path>/etc/portage/env</path>, 
как это было описано выше).
</p>

<p>
Чтобы вмешаться в процесс, окружение bash может слушать переменные 
<c>EBUILD_PHASE</c>, <c>CATEGORY</c>, а также переменные, которые всегда 
существуют в процессе установки (такие как <c>P</c>, <c>PF</c>, ...). На 
основании этих переменных вы можете выполнять дополнительные шаги.
</p>

</body>
</subsection>
<subsection>
<title>Пример: Обновляем базу данных файлов</title>
<body>

<p>
В данном примере мы используем файл <path>/etc/portage/bashrc</path> для вызова 
некоторых приложений с базами данных файлов, чтобы удостовериться, что их база 
данных синхронизирована с системой. Приложения, которые использованы в примере 
это <c>aide</c> (инструмент обнаружения вторжений) и <c>updatedb</c> 
(для использования с командой <c>locate</c>), но это только для примера. 
Не считайте этот пример как HOWTO для программы AIDE ;-).
</p>

<p>
Чтобы в данном случае использовать <path>/etc/portage/bashrc</path>, нам нужно 
"перехватить" функции <c>postrm</c> (после удаления файлов) и <c>postinst</c> 
(после установки файлов), так как именно тогда изменяются файлы на нашей файловой системе.
</p>

<pre caption="Пример /etc/portage/bashrc">
if [ "${EBUILD_PHASE}" == "postinst" ] || [ "${EBUILD_PHASE}" == "postrm" ];
then
  echo ":: Calling aide --update to update its database";
  aide --update;
  echo ":: Calling updatedb to update its database";
  updatedb;
fi
</pre>

</body>
</subsection>
</section>

<section>
<title>Выполняем задачи после --sync</title>
<subsection>
<title>/etc/portage/postsync.d</title>
<body>

<p>
До этого момента мы говорили о вмешательстве в процесс компиляции. Однако 
Portage имеет также еще одну важную функцию — обновление дерева Portage. 
Чтобы выполнять задачи после обновления дерева Portage, поместите скрипт 
в <path>/etc/portage/postsync.d</path>, и удостоверьтесь, что он помечен 
как исполняемый.
</p>

</body>
</subsection>
<subsection>
<title>Пример: Запускаем eix-update</title>
<body>

<p>
Если вы не используете <c>eix-sync</c> для обновления дерева, вы все еще 
можете обновлять его базу данных после запуска <c>emerge --sync</c> (или 
<c>emerge-webrsync</c>) добавив ссылку к <path>/usr/bin/eix</path>, и назвав 
ее <path>eix-update</path> в каталоге <path>/etc/portage/postsync.d</path>.
</p>

<pre caption="Запускаем eix-update после операции sync">
# <i>ln -s /usr/bin/eix /etc/portage/postsync.d/eix-update</i>
</pre>

<note>
Если вы хотите использовать другое имя, вам нужно сделать скрипт, который 
будет запускать <c>/usr/bin/eix-update</c>. Приложение <c>eix</c> смотрит, 
по какому имени его вызвали, чтобы определить, что ему нужно выполнить. 
Если вы разместите ссылку на <c>eix</c>, которая не будет называться 
<c>eix-update</c>, то программа будет работать некорректно.
</note>

</body>
</subsection>
</section>

<section>
<title>Изменяем настройки профиля</title>
<subsection>
<title>/etc/portage/profile</title>
<body>

<p>
По умолчанию, Gentoo использует настройки, находящиеся в профиле, на который 
указывает <path>/etc/make.profile</path> (символическая ссылка на нужную папку 
с профилем). Эти профили определяют как свои собственные настройки, так и 
наследуют настройки из других профилей (через свой родительский 
(<path>parent</path>) файл).
</p>

<p>
Используя <path>/etc/portage/profile</path> вы можете изменить настройки 
профиля, такие как пакеты (какие пакеты считаются частью системного набора),
обязательные USE флаги и многое другое.
</p>

</body>
</subsection>
<subsection>
<title>Пример: Добавляем nfs-utils к системному набору</title>
<body>

<p>
Если вы используете файловые системы, основанные на NFS, и они для 
вас являются критичными, вы можете захотеть добавить <path>net-fs/nfs-utils</path> 
в системные пакеты, что заставит Portage предупреждать вас, если 
он вдруг должен быть удален.
</p>

<p>
Чтобы достичь этой цели, мы добавим пакет в 
<path>/etc/portage/profile/packages</path>, и добавим перед его именем 
<c>*</c>:
</p>

<pre caption="Содержимое /etc/portage/profile/packages">
*net-fs/nfs-utils
</pre>

</body>
</subsection>
</section>

<section>
<title>Применение нестандартных патчей</title>
<subsection>
<title>Используем epatch_user</title>
<body>

<p>
Чтобы работать с несколькими файлами ebuild похожим образом, разработчики 
ebuild-файлов используют eclasses (что-то вроде библиотек оболочки), в которых 
определены частоиспользуемые функции. Один из этих eclass'ов это 
<path>eutils.eclass</path>, в котором есть одна интересная функция, 
<c>epatch_user</c>.
</p>

<p>
Функция <c>epatch_user</c> применяет патчи к исходному коду, которые находятся в
<path>/etc/portage/patches/&lt;category&gt;/&lt;package&gt;[-&lt;version&gt;[-&lt;revision&gt;]]</path>,
смотря какой каталог будет найден первым. К сожалению, не все ebuild-файлы 
автоматически вызывают данную функцию, поэтому простое добавление своего 
патча в это место не всегда вызовет его применение.
</p>

<p>
К счастью, с информацией, приведенной выше, вы можете вызывать эту функцию, 
вмешавшись, например, в фазу <c>prepare</c>. Эту функцию можно вызывать 
столько раз, сколько хотите, она применит патчи только один раз.
</p>

</body>
</subsection>
<subsection>
<title>Пример: Добавляем патчи к Firefox</title>
<body>

<p>
Пакет <path>www-client/firefox</path> это один из тех немногих пакетов, 
который уже вызывает <c>epatch_user</c> из файла ebuild, поэтому нам 
не нужно будет ничего переопределять.
</p>

<p>
Если вам нужно пропатчить firefox (например потому что разработчик 
дал вам патч, и спросил вас, исправляет ли он ошибку, которую вы
нашли), поместите патч в <path>/etc/portage/patches/www-client/firefox</path> 
(хотя, наверное, будет лучше использовать полное имя, включая версию, 
чтобы патч не вступил в противоречие с последующими версиями) и пересобрать firefox.
</p>

</body>
</subsection>
</section>

</sections>

<!-- *$Localization:
target-language: Russian
target-date: 2013-04-11
source-cvs-revision 1.7
translated-by: Romanov Vladimir [blueboar2@gmail.com]
-->
