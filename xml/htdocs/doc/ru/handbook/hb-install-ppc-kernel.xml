<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ru/handbook/hb-install-ppc-kernel.xml,v 1.12 2013/09/29 16:31:59 blueboar Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<abstract>
Ядро Linux — сердце каждого дистрибутива. В этой главе описывается, 
как его настроить.
</abstract>

<version>4</version>
<date>2013-09-25</date>

<section>
<title>Установка исходных кодов ядра</title>
<subsection>
<title>Выбор ядра</title>
<body>

<p>
Ядро Linux &mdash; это то, вокруг чего формируются все дистрибутивы. Это слой
между пользовательскими программами и вашими аппаратными средствами.
Gentoo предоставляет своим пользователям несколько исходных кодов ядра.
Полный список с их описанием можно найти в <uri
link="/doc/ru/gentoo-kernel.xml">Руководстве по выбору ядра Gentoo</uri>.
</p>

<p>
Для систем, основанных на <keyval id="arch"/> у нас есть <c>gentoo-sources</c>
(исходные коды ядра, с патчами для дополнительных возможностей).
</p>

<p>
Выберите ваши исходные коды ядра и установите их, используя <c>emerge</c>.
</p>

<pre caption="Установка исходных кодов ядра">
# <i>emerge gentoo-sources</i>
</pre>

<p>
Когда вы просмотрите содержимое каталога <path>/usr/src</path>, то увидите
символическую ссылку <path>linux</path>, которая указывает на каталог с
исходными кодами ядра. В данном случае, установленный исходный код ядра
указывает на <c>gentoo-sources-<keyval id="kernel-version"/></c>. 
Ваша версия может отличаться, имейте это в виду:
</p>

<pre caption="Просмотр каталога с исходными кодами ядра">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root    root 12 Oct 13 11:04 /usr/src/linux -&gt; linux-<keyval id="kernel-version"/>
</pre>

<p>
Теперь настало время настройки и компиляции ядра. Вы можете использовать
<c>genkernel</c>, который сформирует стандартное ядро, аналогичное
используемому на установочном компакт-диске. Мы расскажем сначала про
"ручную" конфигурацию, так как это лучший способ оптимизации вашего
окружения.
</p>

<p>
Если вы хотите вручную настроить ядро, то переходите к разделу <uri
link="#manual">По умолчанию: ручная настройка</uri>. Если вы хотите
использовать <c>genkernel</c>, то читайте <uri link="#genkernel">Альтернатива:
использование genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>По умолчанию: ручная настройка</title>
<subsection>
<title>Введение</title>
<body>

<p>
Ручная настройка ядра считается одним из самых сложных вопросов для
пользователей Linux. Зато после настройки нескольких ядер, вы и не вспомните,
что это было трудно ;).
</p>

<p>
Есть одна истина: начиная ручную настройку ядра, вы должны знать аппаратную 
часть своего компьютера. Большую часть информации можно получить после 
установки пакета pciutils (<c>emerge pciutils</c>), который содержит 
<c>lspci</c>. После этого вы сможете использовать <c>lspci</c> внутри временной 
среды установки. Можете не обращать внимания на предупреждения, касающиеся 
<e>pcilib</e> (например, pcilib: cannot open /sys/bus/pci/devices [pcilib: не 
могу открыть /sys/bus/pci/devices]), которые выводит на экран <c>lspci</c>. В 
качестве альтернативы, вы можете запустить <c>lspci</c> <e>вне временной среды
установки</e>. Результат тот же. Вы также можете запустить <c>lsmod</c> для
просмотра модулей ядра используемых установочным компакт-диском (это послужит
хорошей подсказкой, на предмет того, какие опции надо включить).
</p>

<p>
Теперь перейдите в каталог исходных кодов вашего ядра; пора настроить ядро. 
Конфигурацию ядра, которое будет загружаться практически на любом 32-битном
компьютере PowerPC нужно начать, запустив <c>make pmac32_defconfig</c>. 
После создания конфигурации по умолчанию, запустите <c>make menuconfig</c>
для запуска конфигурационного меню, использующего ncurses.
</p>

<pre caption="Вызов конфигурационного меню">
# <i>cd /usr/src/linux</i>
# <i>make pmac32_defconfig</i>
# <i>make menuconfig</i>
</pre>

<p>
Перед вами появятся несколько разделов настроек. Мы сначала перечислим
пункты, которые надо активировать (иначе Gentoo не будет работать или будет
работать не так как надо без дополнительных настроек).
</p>

</body>
</subsection>
<subsection>
<title>Активация нужных параметров</title>
<body>

<p>
Сначала войдите в <c>File Systems</c> и выберите поддержку всех нужных вам
файловых систем. <e>Не</e> компилируйте файловую систему, которую вы
используете для корневого раздела как модуль, иначе система Gentoo не
сможет смонтировать этот раздел. Также выберите <c>Virtual memory</c> и 
<c>/proc file system</c>. Удостоверьтесь, что вы также выбрали поддержку
разделов Amiga, если вы используете Pegasos, либо разделов Macintosh,
если вы используете компьютер Apple.
</p>

<pre caption="Выбор необходимых файловых систем">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
<comment>(На вашей конфигурации /proc может быть жестко задана, если это так, вы увидите ---)</comment>
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)
 Partition Types ---&gt;
    [*]  Advanced partition support
    [*]  Amiga partition table support
    [*]  Macintosh partition map support

<comment>(Выберите один или несколько параметров, необходимых вашей
системе)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Пользователи компьютеров NewWorld и OldWorld могут захотеть также включить
поддержку HFS. Пользователям OldWorld она нужна для копирования скомпилированных
ядер на раздел MacOS, а пользователям NewWorld она нужна для конфигурации
специального раздела Apple_Bootstrap:
</p>

<pre caption="Активируем поддержку HFS">
File Systems ---&gt;
  Miscellaneous filesystems ---&gt;
    &lt;M&gt; Apple Macintosh file system support
    &lt;M&gt; Apple Extended HFS file system support
</pre>

<p>
Если вы используете PPPoE или dial-up модем для соединений к интернету, то
вам нужно включить в ядре следующие параметры:
</p>

<pre caption="Выбор нужных драйверов PPPoE">
Device Drivers ---&gt;
  Network device support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Два параметра сжатия данных не всегда являются необходимыми, но и вреда от них тоже не
будет. То же относится и к опции <c>PPP over Ethernet</c> которая нужна только
для <c>ppp</c>, сконфигурированного для работы с PPPoE в ядре.
</p>

<p>
Не забудьте включить в ядро поддержку вашей сетевой карты! Большинство
более новых компьютеров Apple используют драйвер SunGEM. Более старые iMac
чаще всего используют драйвер BMAC.
</p>

<pre caption="Выбираем сетевой драйвер">
Device Drivers ---&gt;
  Network device support ---&gt;
    Ethernet (10 or 100Mbit) ---&gt;
      [*] Ethernet (10 or 100Mbit)
      &lt;*&gt;  Generic Media Independent Interface device support
      &lt;*&gt;  MACE (Power Mac ethernet) support
      &lt;*&gt;  BMAC (G3 ethernet) support
      &lt;*&gt;  Sun GEM support
</pre>

<p>
Если вы загружаетесь с устройств FireWire, вам понадобится включить их
поддержку. Если вы не хотите включать в ядро их поддержку, добавьте эти модули
и их зависимости в initrd.
</p>

<pre caption="Поддержка устройств FireWire при загрузке">
Device Drivers ---&gt;
  IEEE 1394 (FireWire) support ---&gt;
    &lt;*&gt; IEEE 1394 (FireWire) support
    &lt;*&gt;   OHCI-1394 support
    &lt;*&gt;   SBP-2 support (Harddisks etc.)
</pre>

<p>
Если вы загружаетесь с устройств USB, вам понадобится включить их
поддержку. Если вы не хотите включать в ядро их поддержку, добавьте эти модули
и их зависимости в initrd.
</p>

<pre caption="Поддержка устройств USB при загрузке">
Device Drivers ---&gt;
  USB support ---&gt;
    &lt;*&gt; Support for Host-side USB
    &lt;*&gt;   OHCI HCD support
    &lt;*&gt;   USB Mass Storage support
</pre>

<p>
Не отключайте в ядре поддержку кадрового буфера, если он необходим при успешной
загрузке системы. Если вы используете видеокарту на основе чипсета NVIDIA,
вы должны использовать кадровый буфер Open Firmware. Если вы используете
видеокарту на основе чипсета ATI, вы должны выбрать драйвер кадрового буфера,
основанный на вашем чипсете (Mach64, Rage128 или Radeon).
</p>

<pre caption="Выбор драйвера кадрового буфера">
Device Drivers ---&gt;
  Graphics support ---&gt;
    &lt;*&gt; Support for frame buffer devices
    [*] Open Firmware frame buffer device support
    &lt;*&gt; ATI Radeon display support
    &lt;*&gt; ATI Rage128 display support
    &lt;*&gt; ATI Mach64 display support
    Console display driver support ---&gt;
      &lt;*&gt; Framebuffer Console support
</pre>

<note>
Если вы выберете более одного устройства кадрового буфера, по умолчанию может
использоваться менее оптимальный драйвер. Либо используйте
только одно устройство кадрового буфера, либо укажите, какой драйвер следует
использовать ядру при загрузке системы, добавив строчку с video, например 
<c>video=radeonfb</c>.
</note>

<p>
Далее выберите <e>Maintain a devtmpfs file system to mount at /dev</e>,
чтобы критические файлы устройств уже были на ранних стадиях процесса
загрузки.
</p>

<pre caption="Включение поддержки devtmpfs">
Device Drivers ---&gt;
  Generic Driver Options ---&gt;
    [*] Maintain a devtmpfs filesystem to mount at /dev
    [ ] Automount devtmpfs at /dev, after the kernel mounted the rootfs
</pre>

<p>
Когда вы закончите настройку ядра, можете переходить к разделу <uri
link="#compiling">Компиляция и установка</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Компиляция и установка</title>
<body>

<p>
Теперь, когда ваше ядро настроено, настало время его скомпилировать и 
установить. Выйдите из конфигурационного меню и введите следующие команды:
</p>

<pre caption="Компиляция ядра">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Когда ядро будет скомпилировано, скопируйте образ ядра в каталог
<path>/boot</path>, как показано ниже. Если у вас отдельный загрузочный
раздел, как, например, на компьютерах Pegasos, удостоверьтесь, что он
правильно смонтирован. Если вы для загрузки пользуетесь BootX, мы скопируем ядро позже.
</p>

<p>
В отличие от многих начальных загрузчиков, Yaboot и BootX предполагают 
использование несжатого ядра. Несжатое ядро называется vmlinux и помещается в
<path>/usr/src/linux</path> по завершении компиляции ядра. Если вы используете
машину Pegasos, для встроенного ПО Pegasos требуется сжатое ядро под названием 
zImage.chrp, которое находится в 
<path>/usr/src/linux/arch/powerpc/boot/images</path>.
</p>

<pre caption="Установка ядра">
# <i>cd /usr/src/linux</i>
<comment>Заметьте, что ваша версия ядра может отличаться</comment>
<comment>(Apple/IBM)</comment>
# <i>cp vmlinux /boot/<keyval id="kernel-name"/></i>
<comment>(Pegasos)</comment>
# <i>cp arch/powerpc/boot/images/zImage /boot/<keyval id="kernel-name" /></i> 
</pre>

<p>
Теперь переходите к разделу <uri link="#kernel_modules">Модули Ядра</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Альтернатива: использование genkernel</title>
<body>

<p>
Теперь, когда исходные коды ядра установлены, настало время скомпилировать ядро,
используя сценарий <c>genkernel</c>. <c>genkernel</c> создаст ядро почти
идентичное тому, что используется на установочном компакт-диске. Т.е. при
использовании <c>genkernel</c> для сборки ядра, ваша система будет искать
новые устройства при каждой загрузке, подобно установочному компакт-диску.
Поскольку genkernel не требует ручной настройки ядра, это идеальное решение для
пользователей которые чувствуют себя неуютно от одной мысли, что придется
компилировать ядро.
</p>

<p>
Рассмотрим как использовать genkernel. Сначала выполним emerge genkernel:
</p>

<pre caption="Установка genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Если вы используете FireWire или USB для загрузки, вам понадобится
добавить соответсвующие модули в initrd. Отредактируйте
<path>/usr/share/genkernel/arch/modules_load</path> и измените 
<c>MODULES_FIREWIRE="ieee1394 ohci1394 sbp2"</c> для поддержки FireWire или 
<c>MODULES_USB="usbcore ohci-hcd ehci-hcd usb-storage"</c> для поддержки USB.
</p>

<p>
Перед компиляцией ваших исходных кодов, нужно немного изменить fstab.
Оставшая часть fstab будет заполнена на одном из более поздних шагов,
так что пока не беспокойтесь о деталях. Если вы не создали отдельный
загрузочный раздел (НЕ bootstrap, это другое), удалите строку, отвечающую
за <path>/boot</path> из <path>/etc/fstab</path>. Это то, что нужно сделать на
большинстве компьютеров Apple.
</p>

<pre caption="Удаляем /boot из /etc/fstab на компьютерах без загрузочного раздела">
# <i>nano -w /etc/fstab</i>
<comment>Удалите эту строку</comment>
/dev/BOOT   /boot     ext2     noauto,noatime    0 2
</pre>

<p>
Теперь соберем ядро, запустив <c>genkernel --genzimage all</c>. Для Pegasos нам
потребуется использовать другой конфигурационный файл и создать zImage вместо
ядра vmlinux, используемого комрьютерами Apple. Так как <c>genkernel</c> будет
собирать ядро, поддерживающее почти все оборудование, этот процесс может занять
приличное время!
</p>

<p>
Помните, если раздел, в котором будет находиться ядро, не использует в
качестве ФС ext2 или ext3, возможно, вам потребуется вручную настроить ваше
ядро, задействовав <c>genkernel --menuconfig all</c>, и включить
поддержку используемых файловых систем <e>в</e> ядре (т.е. <e>не</e> в
качестве модуля). Пользователям LVM2, возможно, потребуется
добавить <c>--lvm</c> в качестве аргумента.
</p>

<pre caption="Запуск genkernel">
# <i>genkernel all</i>
</pre>

<pre caption="Запуск genkernel на Pegasos">
# <i>genkernel --genzimage all</i>
</pre>

<p>
Когда <c>genkernel</c> завершит свою работу, будет создано ядро, полный набор
модулей и <e>начальный RAM-диск</e> (initramfs). Мы будем использовать ядро и
initrd в процессе настройки загрузчика системы, далее в этом руководстве.
Запишите имена ядра и начального корневого диска, так как они нам понадобятся
при редактировании конфигурационного файла загрузчика. initrd будет запущен
сразу после загрузки для автоматического определения устройств (точно так же как
и в установочном компакт-диске), прежде чем ваша система перейдет к настоящей
загрузке. Убедитесь, что записали требуемые параметры загрузки, необходимые для
успешной загрузки с genkernel.
</p>

<pre caption="Проверяем название созданного ядра и initrd">
<comment>Заметьте, что ваша версия ядра может отличаться</comment>
# <i>ls /boot/<keyval id="genkernel-name"/> /boot/<keyval id="genkernel-initrd"/></i>
</pre>

<p>
Теперь можете перейти к разделу <uri link="#kernel_modules">Модули Ядра</uri>.
</p>

</body>
</section>

<section id="kernel_modules">
<title>Kernel Modules</title>

<subsection>
<include href="hb-install-kernelmodules.xml"/>
</subsection>
</section>

</sections>

<!-- *$Localization:
target-language: Russian
target-date: 2013-09-25
source-cvs-revision: 1.74
translated-by: Vasiliy Golubev <vas@nightmail.ru>
translated-by: Azamat H. Hackimov <azazello1984@mail.ru>
edited-by: Vladimir Romanov <blueboar2@gmail.com>
-->
