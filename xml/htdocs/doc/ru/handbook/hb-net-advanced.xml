<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ru/handbook/hb-net-advanced.xml,v 1.4 2013/06/23 09:56:42 swift Exp $ -->

<sections>

<abstract>
Здесь вы изучите, как работает конфигурация — это нужно сделать перед 
изучением модульного построения сети. 
</abstract>

<version>9</version>
<date>2013-05-11</date>

<section>
<title>Расширенная настройка</title>
<body>

<p>
Переменная <c>config_eth0</c> служит основой конфигурации интерфейса.
Она содержит список высокоуровневых инструкций по настройке интерфейса (в 
данном случае, <c>eth0</c>). Все команды списка выполняются последовательно. 
Интерфейс считается работоспособным, если хотя бы одна команда выполнена 
успешно.
</p>

<p>
Вот список встроенных инструкций:
</p>

<table>
<tr>
  <th>Команда</th>
  <th>Описание</th>
</tr>
<tr>
  <ti><c>null</c></ti>
  <ti>Не выполнять никаких действий</ti>
</tr>
<tr>
  <ti><c>noop</c></ti>
  <ti>
    Если интерфейс включен и существует адрес, успешно завершить настройку.
  </ti>
</tr>
<tr>
  <ti>an IPv4 or IPv6 address</ti>
  <ti>Добавить адрес к интерфейсу</ti>
</tr>
<tr>
  <ti>
    <c>dhcp</c>, <c>adsl</c> or <c>apipa</c> (или  команда запуска
    модуля стороннего изготовителя)
  </ti>
  <ti>
    Запустить модуль, реализующий команду. Например, <c>dhcp</c> запускает
    модуль, реализующий DHCP, которым может быть <c>dhcpcd</c>,
    <c>dhclient</c> или <c>pump</c>.
  </ti>
</tr>
</table>

<p>
На случай неудачного выполнения команды можно указать запасную команду.
Запасной вариант должен строго соответствовать структуре конфигурации.
</p>

<p>
Команды можно сцеплять. Вот несколько практических примеров.
</p>

<pre caption="Примеры настройки">
<comment># Задание трех адресов IPv4</comment>
config_eth0="192.168.0.2/24
192.168.0.3/24
192.168.0.4/24"

<comment># Задание одного адреса IPv4 и двух адресов IPv6</comment>
config_eth0="192.168.0.2/24
4321:0:1:2:3:4:567:89ab
4321:0:1:2:3:4:567:89ac"

<comment># Сохранять адрес, присвоенный ядром, до отключения интерфейса.
# При этом назначить другой через DHCP. Если DHCP не работает, 
# задать статический адрес, определяемый APIPA</comment>
config_eth0="noop
dhcp"
fallback_eth0="null
apipa"
</pre>

<note>
При использовании модуля <c>ifconfig</c> для назначения нескольких адресов,
для каждого дополнительного адреса создаются псевдонимы интерфейса. Так,
в двух примерах, приведенных выше, создаются интерфейсы <c>eth0</c>, 
<c>eth0:1</c> и <c>eth0:2</c>. С этими интерфейсами нельзя сделать
ничего особенного, так как и ядро, и другие программы обрабатывают 
<c>eth0:1</c> и <c>eth0:2</c> просто как <c>eth0</c>. 
</note>

<impo>
Порядок настройки запасного режима имеет значение! Если бы мы не указали
инструкцию <c>null</c>, то команда <c>apipa</c> запускалась бы только при
неудачном выполнении команды <c>noop</c>.
</impo>

<note>
<uri link="?part=4&amp;chap=3#apipa">APIPA</uri> и
<uri link="?part=4&amp;chap=3#dhcp">DHCP</uri> обсуждаются позже.
</note>

</body>
</section>
<section>
<title>Сетевые зависимости</title>
<body>

<p>
Сценарии инициализации в <path>/etc/init.d</path> могут находиться в 
зависимости от определенного сетевого интерфейса или просто от службы сети 
(net). Все сетевые интерфейсы в системе инициализации Gentoo предоставляют
то, что называется <e>net</e>.
</p>

<p>
Если в файле <path>/etc/rc.conf</path>, установлена опция 
<c>rc_depend_strict="YES"</c>, тогда все сетевые интерфейсы, которые
предоставляют net, должны быть активны, прежде чем будет зависимость от
"net" будет выполнена. Другими словами, если у вас есть <path>net.eth0</path> и
<path>net.eth1</path>, а инициализационный скрипт зависит от "net", то
они обе должны быть включены.
</p>

<p>
С другой стороны, если установлена опция <c>rc_depend_strict="NO"</c>,
тогда зависимость "net" будет помечена как разрешенная при включении
хотя бы одного сетевого интерфейса.
</p>

<p>
Но как насчет <path>net.br0</path>, зависимого от <path>net.eth0</path> и 
<path>net.eth1</path>? <path>net.eth1</path> может быть беспроводным или 
РРР-устройством, требующим предварительной настройки для возможности включения
в мост. Это невозможно сделать в <path>/etc/init.d/net.br0</path>, так как он 
является символьной ссылкой на <path>net.lo</path>.
</p>

<p>
Ответом является определение настройки <c>rc_need_</c> в
<path>/etc/conf.d/net</path>.
</p>

<pre caption="Зависимость net.br0 в /etc/conf.d/net">
rc_need_br0="net.eth0 net.eth1"
</pre>

<p>
Но этого, однако, недостаточно. Инициализационные сетевые скрипты Gentoo
используют виртуальную зависимость, называемую <e>net</e> для того, чтобы
сообщить системе, что сеть доступна. Ясно, что в вышеприведенном примере
сеть можно считать доступной только когда включен интерфейс <path>net.br0</path>,
а не когда включены остальные. Поэтому нам нужно сказать об этом в файле
<path>/etc/conf.d/net</path>:
</p>

<pre caption="Обновляем виртуальные зависимости для сети">
rc_net_lo_provide="!net"
rc_net_eth0_provide="!net"
rc_net_eth1_provide="!net"
</pre>

<p>
Более подробно зависимости обсуждаются в разделе <uri 
link="?part=2&amp;chap=4#doc_chap4">Написание сценариев инициализации</uri> 
Настольной книги Gentoo. Более детальная информация о файле
<path>/etc/rc.conf</path> находится в комментариях в этом файле.
</p>

</body>
</section>

<section id="variable_name">
<title>Имена и значения переменных</title>
<body>

<p>
Имена переменных являются динамическими. Обычно они следуют структуре
<c>variable_${interface|mac|essid|apmac}</c>. Например, значение переменной
<c>dhcpcd_eth0</c> хранит параметры dhcpcd для eth0, а переменной 
<c>dhcpcd_essid</c> &mdash; параметры dhcpcd, используемые при подключении 
любого интерфейса к ESSID &laquo;essid&raquo;. 
</p>

<p>
Однако, не существует твердого простого правила, устанавливающего, что
интерфейсы должны называться ethx. На деле, имена многих беспроводных
выглядят как wlanx, rax и ethx. Кроме того, некоторые пользовательские 
интерфейсы, например, мосты, можно называть как угодно, например, foo. Для 
пущего разнообразия, в именах беспроводных точек доступа также допускаются 
знаки, не входящие в алфавитно-цифровые; это имеет значение, потому что есть
возможность настройки сетевых параметров для отдельных ESSID.
</p>

<p>
Оборотная сторона всего этого в том, что для настройки сети в Gentoo 
используются переменные bash, а bash не в состоянии использовать что-либо кроме 
знаков английского алфавита и цифр. Чтобы обойти такое ограничение, мы заменяем 
каждый символ, не являющийся английским буквенно-цифровым, на знак 
подчеркивания: <c>_</c>.
</p>

<p>
Другая особенность bash &mdash; это значения переменных: некоторые символы
требуют специальной записи, перед ними помещается знак <c>\</c>. Им 
необходимо предварять следующие символы: <c>"</c>, <c>'</c> и <c>\</c>.
</p>

<p>
В следующем примере мы используем беспроводные ESSID, так как в них может 
содержаться самое широкое множество символов. Мы воспользуемся ESSID
<c>My "\ NET</c>:
</p>

<pre caption="Пример имени переменной">
<comment>(Этот пример работает, но домен не существует)</comment>
dns_domain_My____NET="My \"\\ NET"

<comment>( Предыдущая строка устанавливает домен dns в My "\ NET при 
подключении беспроводной платы к точке доступа с ESSID My "\ NET)</comment>
</pre>

</body>
</section>

<section>
<title>Именование сетевых интерфейсов</title>
<subsection>
<title>Как это работает</title>
<body>

<p>
Имена сетевых интерфейсов не назначаются случайно: ядро Linux, а также
менеджер устройств (большинство систем используют в качестве менеджера
устройств udev, хотя существуют и другие) выбирают имя интерфейса с
помощью фиксированного набора правил.
</p>

<p>
Когда в системе определена сетевая карта, ядро Linux собирает о данной
карте необходимую информацию. В нее включается:
</p>

<ol>
  <li>
    зарегистрированное имя сетевой карты (на самом интерфейсе), которое
    в дальнейшем можно просмотреть через параметр <c>ID_NET_NAME_ONBOARD</c>;
  </li>
  <li>
    слот, в который вставлена сетевая карта, который затем можно
    просмотреть через параметр <c>ID_NET_NAME_SLOT</c>;
  </li>
  <li>
    путь, через который можно обратиться к устройству сетевой карты,
    который затем можно просмотреть через параметр 
    <c>ID_NET_NAME_PATH</c>;
  </li>
  <li>
    MAC-адрес карты (определенный производителем), который затем
    можно просмотреть через параметр <c>ID_NET_NAME_MAC</c>;
  </li>
</ol>

<p>
В зависимости от данной информации, менеджер устройств решает, как назвать
интерфейс в системе. По умолчанию он использует первое что найдет из
вышеприведенных трех параметров. Например, если найден <c>ID_NET_NAME_ONBOARD</c>,
и он установлен в <c>eno1</c>, то интерфейс будет назван eno1.
</p>

<p>
Если вы знаете имя вашего сетевого интерфейса, вы можете просмотреть значения
параметров, используя <c>udevadm</c>:
</p>

<pre caption="Читаем информацию о карте сетевого интерфейса">
# <i>udevadm test-builtin net_id /sys/class/net/enp3s0 2>/dev/null</i>
ID_NET_NAME_MAC=enxc80aa9429d76
ID_OUI_FROM_DATABASE=Quanta Computer Inc.
ID_NET_NAME_PATH=enp3s0
</pre>

<p>
Так как первое (и единственное) попадание в три вышеприведенных
параметра это параметр <c>ID_NET_NAME_PATH</c>, именно его значение
будет использовано как имя интерфейса. Если ни одного параметра
не будет найдено, то система вернется к названиям, данным ядром
(eth0, eth1, и т.д.)
</p>

</body>
</subsection>
<subsection>
<title>Использование наименований старого образца</title>
<body>

<p>
Перед данным изменением, интерфейсы сетевых карт именовались
самим ядром, в зависимости от порядка загрузки драйверов
(среди других, возможно более скрытых причин). Это поведение
все еще может быть включено установкой опции загрузки
<c>net.iframes=0</c> в начальном загрузчике.
</p>

<p>
Другим способом отключения данного поведения, и, следовательно,
возврата к именам, даваемым ядром, является создание пустого
правила udev, называемого <path>80-net-name-slot.rules</path>,
который переопределит правило по умолчанию (с тем же именем),
которое и ответственно за именование сетевых интерфейсов.
</p>

<pre caption="Переопределение схемы сетевого именования">
# <i>ln -s /dev/null /etc/udev/rules.d/80-net-name-slot.rules</i>
</pre>

</body>
</subsection>

<subsection>
<title>Использование своих собственных имен</title>
<body>

<p>
Вся идея, стоящая за этим изменением в именовании состоит не в том,
чтобы озадачить людей, а чтобы сделать изменение имен более простым.
Например, у вас есть два сетевых интерфейса, которые были бы названы
eth0 и eth1. Один предназначен для доступа к сети через кабель, а
другой для беспроводного доступа. С поддержкой именования интерфейсов,
вы можете назвать их lan0 (проводной) и wifi0 (беспроводной). Лучше
избегать использования хорошо известных в прошлом имен, вроде eth*
или wlan*, так как они могут все еще пересекаться с вашими
предлагаемыми именами).
</p>

<p>
Все, что вам нужно сделать - это определить, какие параметры
указаны для ваших сетевых карт, и затем использовать данну.
информацию для создания своего собственного правила именования:
</p>

<pre caption="Задаем имя lan0 для текущего интерфейса eth0">
# <i>udevadm test-builtin net_id /sys/class/net/eth0 2>/dev/null</i>
ID_NET_NAME_MAC=enxc80aa9429d76
ID_OUI_FROM_DATABASE=Quanta Computer Inc.

# <i>vim /etc/udev/rules.d/70-net-name-use-custom.rules</i>
<comment># Первое правило использует информацию о MAC</comment>
SUBSYSTEM=="net", ACTION=="add", ENV{ID_NET_NAME_MAC}=="enxc80aa9429d76", NAME="lan0"
<comment># Второе правило использует информацию ID_NET_NAME_PATH</comment>
SUBSYSTEM=="net", ACTION=="add", ENV{ID_NET_NAME_PATH}=="enp3s0", NAME="wifi0"
</pre>

<p>
Так как эти правила должны задаваться до тех, что определены по
умолчанию (правила просматриваются в порядке буквенно-цифровой
сортировки, так что 70 идет до 80), то имена, заданные в файле
с правилами будут использоваться вместо тех, что идут по умолчанию.
Число, назначенное файлу должно быть в диапазоне между 76 и 79
(переменные окружения определены в правиле 75, а именование
по умолчанию определено в правиле номер 80).
</p>

</body>
</subsection>
</section>

</sections>

<!-- *$Localization:
target-language: Russian
target-date: 2013-05-11
source-cvs-revision: 1.21
translated-by: Igor Naum [naumi@vesti-rtr.com]
edited-by: Alexey Chumakov [achumakov@gentoo.org]
edited-by: Vladimir Romanov [blueboar2@gmail.com]
-->
