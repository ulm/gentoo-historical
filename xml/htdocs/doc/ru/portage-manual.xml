<?xml version='1.0' encoding="UTF-8"?>

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link = "/doc/ru/portage-manual.xml">
<title>Учебник по Portage</title>
<author title="Author and Editor">
<mail link="blocke@shivan.org">Bruce A. Locke</mail>
</author>
<author title="Переводчик">
<mail link="pythoo@yandex.ru">Иван Зенков</mail>
</author>
<author title="Редактор">
<mail link="george@gentoo.org">George Shapovalov</mail>
</author>

<abstract>
Этот учебник содержит общий обзор Portage, детально описывающий процесс конфигурации, установки и поддержки системы.
</abstract>

<version>0.9.6</version>
<date>Dec 24, 2002</date>

<chapter>
<title>Portage: Краткий обзор</title>

<section>
<title>Краткий обзор</title>
<body>

<p>
Portage - очень мощная и наращиваемая система управления пакетами. Ее гибкость, простой механизм сборки и формирования базовой Linux-системы позволяют ей гордо носить имя дистрибутивного движка. Весь дистрибутив Gentoo Linux формируется вокруг Portage.
</p>

<p>
Gentoo Linux - это дистрибутив, состоящий из Portage и более 7000 скриптов сборки программного обеспечения, называемых <i>ebuild</i>. Эти <i>ebuild</i> скрипты сообщают Portage, как откомпилировать и установить программный пакет. С помощью <i>profiles</i> и программы <i>emerge</i> пользователи и разработчики могут использовать Portage для установки и обновления пакетов, составляющих основу операционной системы, и ее приложения.
</p>

<p>
Gentoo Linux - система, "компилируемая на лету". Процесс установки в Gentoo Linux использует компилятор и специальную среду компоновки, с помощью которой Portage загружает исходные файлы из Интернета и формирует остальную часть "ядра", с любыми желаемыми приложениями. Хотя Portage и поддерживает использование собранных бинарных пакетов, используются они, как правило, только разработчиками, которым нужно быстро восстановить какой-нибудь необходимый пакет, или пользователями, которые компилируют программы на более мощной машине для использования на слабой.
</p>

<p>
За счет этого Portage и становится высоко конфигурируемой системой, которая, оперируя компилятором, устанавливает пакеты. Очень немного установок Gentoo Linux проходят одинаково. В сущности, когда пользователь устанавливает Gentoo Linux, система Portage настраивает и компилируют его, исходя из опций, указанных в конфигурационном файле и внутри самого ebuild-скрипта.
</p>

<p>
На первый взгляд идея Portage может показаться схожей с традиционной системой портов BSD. Оба они компилируют пакеты из исходников, позволяя пользователям безопасно устанавливать и удалять программное обеспечение, и оба автоматически обрабатывают зависимости. Много идей для Portage заимствованы из системы BSD-портов, но Portage - это не еще одна их "ксерокопия".
</p>

<p>
Система Portage - это слияние языка Python с сценариями <i>ebuild</i>, базирующимися на Bash-скриптинге. Вместо простого использования сборочных файлов и команды <i>make</i>, Portage выигрывает за счет Python и легких в использовании shell-скриптов с некоторыми объектно-ориентированными характеристиками. Все это для того, чтобы сделать действительно мощную систему. Мы склонны считать Portage лучшей системой портов по сравнению с существующими аналогами.
</p>

<p>
Некоторые из дополнительных особенностей Portage - это возможность иметь в дереве множество версий и ревизий одного и того же пакета, условные зависимости и поддержка дополнительных возможностей, низкоуровневое управление пакетами, установка с диска, защита конфигурационных файлов и т.д. Многие из этих особенностей подробно рассмотрены в данном руководстве.
</p>

</body>
</section>

<section>
<title>Условные зависимости и дополнительные возможности</title>
<body>

<p>
Система Portage уникальна своей гибкостью, которую она предоставляет пользователям. Традиционные системы портов BSD могут поддерживают только одину версию пакета в дереве портов. Portage же не имеет такого ограничения. Для установки могут быть доступны множество различных версии одного и того же пакета. Пакеты, которые требуются для компиляции и использования другого пакета, могут быть определены или по имени, или по имени с добавлением номера версии. Это позволяет безопасно хранить несколько версии в пределах одного дерева.
</p>

<p>
Система зависимости также поддерживает условные зависимости. Portage обладает эффективной особенностью, называемой <i>системой настройки USE</i>. Изменив одну переменную в конфигурационном файле Portage, вы можете отключать дополнительную поддержку (и таким образом потребность в зависимости) специфических особенностей или библиотек для всех компилируемых пакетов. Это очень гибкая и мощная система, подробней о ней написано в следующей главе.
</p>

<p>
Кроме того, Portage поддерживает <i>СЛОТЫ</i> (<i>SLOT</i>). В период развития Gentoo Linux его разработчикам часто требовались разные версии пакетов (библиотек) в установленном виде, чтобы удовлетворить запросы других
пакетов. Традиционный подход к решению этой проблемы состоял в том, чтобы обрабвтывать различные версии того же самого пакета как различные пакеты с немного разными именами.
</p>

<p>
Вместо этого разработчики научили Portage обрабатывать и поддержать несколько версий того же самого пакета, используя <c>СЛОТЫ</c>. Мы рассмотрим пример с обычной библиотекой freetype. Версия 1.x несовместима с версией 2.x, но (практически) необходимы обе - чтобы удовлетворить зависимости различных пакетов. Большинство систем портов называют пакет "freetype" для freetype 1.x и "freetype2" для 2.x. Мы рассматриваем этот подход, как нарушение системы управления пакетами. Мы просто назначили <i>СЛОТ</i> номер 1 на первую версию и номер 2 - на вторую. С этой информацией Portage может прослеживать обе версии и модернизировать их если произведены соответствующие обновления.
</p>

</body>
</section>

<section>
<title>Конфигурационные профили</title>
<body>

<p>
Также Portage поддерживает <i>конфигурационные профили</i>. Профиль содержит список названий пакета и версий с директивой и набором заданных по умолчанию опций, которые Portage будет использовать. Также профиль сообщает Portage, какие пакеты и какие версии определенны для этих пакетов, чтобы разрешить или запретить их, как того требует система или пользователь. Пользователи могут переключать профили, изменяя единственную символическую ссылку (<i>/etc/make.profile</i>). Этот путь может показаться простым, но он позволяет Portage формировать ядро дистрибутива и служить профессиональному построению системы.
</p>

<p>
Усилия, потраченные на создание дистрибутива Gentoo Linux, привели к целой коллекции файлов <i>ebuild</i> и множеству переменных в профиле. Конфигурационный профиль определяет, какие пакеты жизненно важны для "ядра" системы. Он позволяет разработчикам блокировать и разблокировать определенные пакеты и/или версии, чтобы временно отключить из них сломанные и т.д. Файлы <i>Ebuild</i> просто сообщают Portage, как собирать и устанавливать пакеты с параметрами профиля.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Настройка Portage</title>

<section>
<title>Введение</title>
<body>

<p>
Данная глава охватывает различные аспекты настройки Portage, важные как для пользователей, так и для разработчиков. Portage - очень гибкая система и вам необходимо знать принципы ее конфигурирования, дабы установить и настроить под свои нужны.
</p>

<p>
Пожалуйста, обратите внимание, что слово "пользователи" в данном документе означает "люди с административными правами", то есть с возможностью использовать Portage и изменять конфигурацию системы. Вы должны иметь root-доступ для изменения конфигурации Portage, а также установки и удаления пакетов.
</p>

</body>
</section>

<section>
<title>Конфигурационные файлы Portage</title>
<body>

<p>
Почти все рассмотренные нами конфигурационные опции могут быть найдены в <path>/etc/make.conf</path>, <path>/etc/make.profile/make.defaults</path> и <path>/etc/make.global</path>. <path>/etc/make.conf</path> содержит  набор различных переменных и является файлом модифицируемым пользователем. Portage в первую очередь проверит все переменных среды, если искомая переменная не найдена он также проверит <path>/etc/make.conf</path>. Если ничего не найдено в <path>/etc/make.conf</path>, он проверит <path>/etc/make.profile/make.defaults</path>. Если и там тоже ничего не найдено, он возьмет настройки по умолчанию из <path>/etc/make.global</path>. Пожалуйста еще раз обратите внимание, что все пользовательские настройки должны быть указаны либо в среде оболочки, либо в файле <path>/etc/make.conf</path>, который специально для них предназначен. Важно заметить, что любая опция определенная в <path>/etc/make.conf</path> будет почти всегда отменять установку сделанную в <path>/etc/make.global</path>. В то же время эти файлы являются кумулятивными, то есть переменная не определенная в <path>/etc/make.conf</path> но  определенная скажем в <path>/etc/make.global</path> будет добавлена в итоговою переменную USE. Иными словами, все в <path>/etc/make.conf</path> и <path>/etc/make.global</path> может рассматриваться общесистемной глобальной переменной для использования в Portage.
</p>

<p>
Для проверки выставленных опций рекомендуется сначала заглянуть в <path>/etc/make.conf</path>, а уж затем в <path>/etc/make.globals</path>. Опция указанная в <path>/etc/make.conf</path> отменит опцию указанную в <path>/etc/make.globals</path>.
</p>

</body>
</section>

<section>
<title>Настройки USE</title>
<body>

<p>
USE настройки - очень гибкий способ включения или исключения различных особенностей пакета при сборке на глобальном и индивидуальном уровне. Что позволяет администратору контролировать процесс формирования пакета за счет дополнительных возможностей, которые могут быть выбраны в подобных пакетах. Например пакетам, для которых предусмотрена дополнительная поддержка GNOME, эту поддержку можно отключить, изменив опцию <i>gnome</i> в настройках USE. Если же не отключать поддержку <i>gnome</i>, то они будут скомпилированы с таковой.
</p>

<p>
Эффект параметров настройки USE на пакетах зависит от того, поддерживается ли программное обеспечение собственно программой, и имеет ли ebuild-скрипт установку USE, как дополнительную особенность. Если программное обеспечение не имеет такой поддержки, тогда соответствующая установка USE не будет иметь никакого эффекта. Также многие пакетные зависимости не рассматривают опции USE, и их изменение не будет иметь никакого эффекта, поскольку пакет обладает принудительными зависимостями. Список ключевых слов USE, используемых пакетами, может быть найден в строках <i>DEPEND</i> и <i>RDEPEND</i> в любом ebuild-файле.
</p>

<p>
Список всех настроек USE, используемых в Gentoo Linux, может быть найден в <path>/usr/portage/profiles/use.desc</path>. Каждая опция USE перечислена в одной строке с кратким описанием ее предназначения.
</p>

<p>
Portage определяет, включена USE или нет, проверяя до четырех различных локаций. Эти локации изменяют параметры настройки USE в пути к "стекам". Portage проходит через каждую локацию и запоминает, допускалась или нет опция USE, в предыдущей локации. Настройка USE изменяется в течение прохода Portage через каждую локацию.
</p>

<p>
Порядок проверки локаций настроек USE устанавливается в <i>USE_ORDER</i> файла /etc/make.globals. Чтобы отключать локации просто, удалите их из <i>USE_ORDER</i>.
</p>

<p>
Следующее описание каждой локации дается в порядке, определенном в настройках Portage по умолчанию для <i>USE_ORDER</i>.
</p>

<p><b>Defaults</b></p>

<p>
Portage определяет набор заданных по умолчанию ключей USE. Это указано в make.defaults и определено в файле make.defaults для любой конфигурации Portage. Поскольку /etc/make.profile является ссылкой, действительный набор ключей хранится в конфигурационном файле /etc/make.profile/make.defaults. Не рекомендуется его редактировать, поскольку смена профиля сменит и настройки.
</p>

<p><b>Auto</b></p>

<p>
Эти опции определены в профиле Portage use.defaults (/etc/make.profile/use.defaults). Каждая стока в файле состоит из ключевого слова USE и имени соответствующего пакета. Если пакет, перечисленный напротив ключевого слова USE, в настоящее время установлен, тогда опция USE рассматривается допустимой )то есть включенной). Таким образом, например, если Вы установили <i>x11-base/xfree</i> и не отключали соответствующую опцию USE, тогда опция X допускается глобально, при том, что пакет установлен. Не рекомендуется редактировать этот файл поскольку смена профиля сменит и настройки.
</p>

<p><b>Conf</b></p>

<p>
Если конфигурационная опция <i>USE</i> определена в /etc/make.conf, то в таком случае она включена. Если ее там нет, то будет проверен /etc/make.globals. Открыв этот файл можно увидеть что-то вроде:
</p>

<pre>
USE="slang readline gpm berkdb gdbm tcpd pam libwww ssl gb tk
     lm_sensors lvm ldap tex bonobo sdl gtk xfs evo pda ldap
     mmx mitshm perl python guile ruby postgres dvd 3dnow tcl
     lcms gif sdl vorbis ogg oss libg++ directfb decss snmp
     gnome X opengl mozilla pdflib gpg -nls gd xface jpilot
     -kde -qt -esd -motif -alsa oggvorbis"
</pre>

<p>
Параметры настройки USE включены, если выведено просто название опции. Параметры настройки USE будут выключены, если поместить символ <i>-</i> перед названием опции. Например, <i>gnome</i> включает поддержку GNOME, а <i>-motif</i> выключает поддержку motif.
</p>

<p>
Файл /etc/make.conf - самое рекомендуемое место для включения и отключения опций <i>USE</i>, если вы их не определили в придыдущих локациях. Система Portage автоматически не перезаписывает этот файл.
</p>

<p><b>Env</b></p>

<p>
Значение USE может быть задано вручную, используя переменные окружения командной оболочки.
</p>

<pre>
export USE="-gnome"
emerge net-im/gaim
</pre>

<p>
Это позволяет использовать некий набор опций USE для установки одного или более пакетов. В таком случае USE будет активна до тех пор, пока emerge запускается в том же самом сеансе оболочке.
</p>

<note>
Подобная запись опции USE в Portage во время установки пакета недолговечна. Если пакет будет повторно установлен или обновлен в будущем, то опции USE, указанные, подобным образом при первой сборки, не будут приняты во внимание.
</note>

</body>
</section>

<section>
<title>Опции компилятора</title>
<body>

<p>
Опции компилятора, используемые Portage при сборке пакета, могут быть указаны в /etc/make.conf путем редактирования <i>CHOST</i>, <i>CFLAGS</i>, и <i>CXXFLAGS</i>. Строка <i>CHOST</i> указывает платформу, а настройки <i>CFLAGS</i> и <i>CXXFLAGS</i> используются для указания флагов C и C++ соответственно.
</p>

<p>
По умолчанию представлено несколько прокомментированных настроек. Они считаются проверенными и надежными. Изменение их может повлечь за собой ошибки как в компиляции, так и в работе откомпилированного программного обеспечения. Пожалуйста, будьте внимательны, если вы решите изменить стандартные настройки - это может закончиться для вас абсолютной непригодностью системы к работе.
</p>

<p>
Пользователи с многопроцессорными системами выиграют от использования опции <i>MAKEOPTS</i> в /etc/make.globals, которая, передаваясь
<i>make</i>, во время компиляции включает несколько копий gcc.
</p>

</body>
</section>

<section>
<title>Директории</title>
<body>

<p>
Portage позволяет указать директории для самостоятельно собранных пакетов и для восстановления различных удаленных программ. Для большинства пользователей это, скорей всего, не понадобится. Правда, необходимые опции все же выглядят так:
</p>

<ul>
<li><i>PORTDIR</i> - Местоположение дерева Portage</li>
<li><i>DISTDIR</i> - Локальный архив загруженных файлов</li>
<li><i>PKGDIR</i> - Локальных архив для самостоятельно созданных tbz2 пакетов</li>
<li><i>RPMDIR</i> - Локальный архив для самостоятельно созданных RPM пакетов</li>
<li><i>CURRENTFILE</i> - ???</li>
<li><i>PORTAGE_TMPDIR</i> - Временная директория используемая при компиляции пакета.</li>
<li><i>BUILD_PREFIX</i> - Родственно PORTAGE_TMPDIR</li>
<li><i>PKG_TMPDIR</i> - Родственно PKGDIR</li>
</ul>

</body>
</section>

<section>
<title>Защита конфигурационных файлов</title>
<body>

<p>
Portage позволяет защитить все конфигурационных файлы в указанных директориях. Подобные файлы Portage не переписывает. Если устанавливаемый пакет попытается заменить защищенный файл, то у него ничего не получится, версия устанавливаемого им файла будет переименована, к примеру, в <i>._cfg0000_name</i>. Это позволяет пользователю в будущем сравнить содержимое двух файлов и исправить по мере надобности различия между ними.
</p>

<p>
Защищенные директории могут быть указаны в строке <i>CONFIG_PROTECT</i> файлов /make.conf или /etc/make.globals. Не защищенные файл в поддиректории, вложенной в защищенную директорию, можно определить в строке <i>CONFIG_PROTECT_MASK</i>.
</p>

<p>
Следующее - просто пример, его не надо копировать.
</p>

<pre>
CONFIG_PROTECT="/etc /usr/share/config /usr/kde/2/share/config"
CONFIG_PROTECT_MASK="/etc/gconf /etc/init.d /etc/pam.d"
</pre>

<p>
Пользователи могут запросить более подробную информацию относительно работы защиты конфигурационных файлов командой:
</p>

<pre>
emerge --help config
</pre>

</body>
</section>

<section>
<title>Дополнительные особенности</title>
<body>

<p>
Portage также предлагает для разработчиков несколько специализированных опций, управляющих поведением и чисткой Portage непосредственно на стадии сборки пакета. Эти опции, скорей всего, будут интересны разработчикам и могут вызвать проблемы у обычных пользователей.
</p>

<p>
Список подобных <i>ОСОБЕННОСТЕЙ</i> можно прописать в /etc/make.conf или /etc/make.globals. Вот их список:
</p>

<p>
<ul>
<li><i>digest</i> : Автоматически создает digest файл для новых ebuild скриптов.</li>
<li><i>cvs</i> : Автоматический передавать новые digest файлы по cvs.</li>
<li><i>sandbox</i> : Включение "sandbox" для ограничения доступа emerge каталогом PORTAGE_TMPDIR.</li>
<li><i>noclean</i> : Portage никогда не чистится автоматически.</li>
<li><i>noauto</i> : Автоматически не выполнять предшествующие шаги ebuild.</li>
</ul>
</p>

</body>
</section>

<section>
<title>Настройки SYNC в Portage</title>
<body>

<p>
Portage позволяет обновлять свое дерево портов через rsync. Если вы предпочитаете другой путь обновления дерева Portage, тогда пропишите его в строке <i>SYNC</i> файла /etc/make.conf.
</p>

<p><b>RSYNC</b></p>

<p>Один из самых распространенных способов обновления дерева портов -  это использование rsync. Вот так он прописывается в файл /etc/make.conf:</p>

<pre>
SYNC="rsync://rsync.gentoo.org/gentoo-portage"
</pre>

<note>
Метод rsync при обновлении дерева все время удаляет изменения, сделанные вами в локальном дере Portage. Для того, чтобы этого избежать, используйте
PORTDIR_OVERLAY="/директория/где/лежат/ваши/ebuild-скрипты".
</note>

<p><b>Ветка CVS для разработчиков</b></p>

<p>Разработчики, имеющие полный подступ к CVS репозитарию, помимо получения локального дерева, путем <i>emerge</i> sync, могут обращаться к CVS через RSH или SSH.
</p>

<p>
Просто проверьте CVS репозитарий, используя вашу учетную запись, затем перейдите в /usr/portage и выполните опцию <i>SYNC</i>:
</p>

<pre>
SYNC="cvs://youraccount@cvs.gentoo.org:/home/cvsroot"
</pre>

</body>
</section>

<section>
<title>Зеркала</title>
<body>

<p>
Gentoo создает локальное зеркало всех архивных файлов, загруженных при помощи ebuild-скриптов, в дереве Portage. Иногда исходники в архивах и т.д., хранятся на медленных серверах, которые часто бывают перегружены. Также разработчики удаляют старые версии программного обеспечения с ftp, если появляется более новые версии. Для облегчения жизни пользователям дистрибутива Gentoo (и уменьшения нагрузки) мы создаем зеркала нашего репозитария. Гораздо быстрей и надежней загружать архивы с исходниками с разных зеркал, которые при этом могут быть гораздо ближе географически.
</p>

<p>
Каждый раз, когда вы пытаетесь установить пакет, Portage сначала проверит наше зеркало на наличие необходимого архива. Если зеркало  не имеет необходимых файлов, тогда Portage пробует загружать их с HTTP ИЛИ FTP сервера, указанного в ebuild файле.
</p>

<p>
Зеркало Portage может быть определено в строке <i>GENTOO_MIRRORS</i> файла /etc/make.conf. Значение по умолчанию:
</p>

<pre>
GENTOO_MIRRORS="http://www.ibiblio.org/gentoo"
</pre>

<p>
Для поиска наилучшего зеркала посетите сайт Gentoo или спросите на дружественном листе рассылки.
</p>

</body>
</section>

<section>
<title>Загрузчик файлов</title>
<body>

<p>
Программа, используемая Portage для загрузки файлов, может быть указана в настройках <i>FETCHCOMMAND</i> и <i>RESUMECOMMAND</i>. Несколько примеров этих строк можно найти в /etc/make.conf и /etc/make.globals. По умолчанию Portage использует <i>wget</i>, как самый подходящий загрузчик для большинства пользователей.
</p>

<note>
Загрузчик в Portage получает информацию о HTTP и FTP прокси, используя
переменные среды оболочки, HTTP_PROXY и FTP_PROXY.
</note>

</body>
</section>

<section>
<title>Proxies</title>
<body>

<p>
Portage может быть настроена на загрузку фалов через HTTP и FTP прокси. Данные о прокси могут быть указаны в строках <i>HTTP_PROXY</i> и <i>FTP_PROXY</i> файлов /etc/make.conf или /etc/make.globals. Если HTTP и FTP обслуживаются одним и тем же прокси, используйте опцию <i>PROXY</i>.
</p>

<p>Вот пример:</p>

<pre>
HTTP_PROXY="http://192.168.1.1:8080"
FTP_PROXY="http://192.168.1.1:8080"

или

PROXY="http://192.168.1.1:8080"
</pre>

<p>
Также в Portage на HTTP прокси может быть настроен RSYNC. Для этого нужно отредактировать строку RSYNC_PROXY файла <i>/etc/make.conf</i> или просто задать соответствующую переменную среды оболочки.
</p>

<p>
Например:
</p>

<pre>
RSYNC_PROXY="192.168.1.1:8080"
</pre>

<note>
Если от внешнего мира вас отделяет надежная система сетевой защиты и вы не можете использовать HTTP прокси, вы сможете обновить версию своего дерева  системыPortage, используя архив репозитария. Сам архив доступен здесь: <uri>http://www.ibiblio.org/gentoo/snapshots/</uri>.
</note>

</body>
</section>

<section>
<title>Различные опции</title>
<body>

<p>
Ниже следует список опций, которые тоже могут быть использованы пользователями:
</p>

<ul>
<li>
<i>NOCOLOR</i> : Отключает цветной вывод программы утилиты emerge.
</li>
<li>
<i>CLEAN_DELAY</i> : Промежуток времени, в секундах, за который пользователь может безопасно остановить процесс удаления пакета.</li>
</ul>

</body>
</section>

</chapter>

<chapter>
<title>Пакетный менеджер</title>

<section>
<title>Обновление дерева Portage</title>
<body>

<p>
Дерево Portage размещается в /usr/portage и содержит огромную библиотеку инструкций для установки (так называемых скриптов <i>ebuild</i>) различных пакетов. Оно также содержит profile и package.mask - информацию, жизненно необходимую для обновления вашей системы. Очень важно поддерживать дерево в должном виде, постоянно обновляя его. Для обновления дерева Portage используйте следующую команду:
</p>

<pre>
emerge rsync
</pre>

<p>
Этот способ использования emerge для обновления пакетов изменяет локальное дерево системы Portage. Для большей информации смотрите раздел <i>SYNC настройки в Portage</i> в главе <i>Настройка Portage</i>.
</p>

</body>
</section>

<section>
<title>Установка пакетов</title>
<body>

<p>
Процесс компиляции и установки пакета в Portage именуется <i>присоединением</i> (merge). Portage компилирует пакеты и временно устанавливает их в каталог "образа" (обычно ${PORTAGE_TMPDIR}/portage/${PF}/image) где производит запись файлов, которые будут установлены. После чего эти файли и переносятся из "образа" на реальную файловую систему.
</p>

<p>
Команда <i>emerge</i> - это внешний интерфейс системы Portage. Именно через эту команду, путем ее запуска с различными ключами осуществятся установка и удаление пакетов.
</p>

<p>
Для установки свежей, незамаскированной, версии какого-нибудь пакета просто укажите его название, например так:
</p>

<pre>
emerge galeon
</pre>

<p>
Команда скомпилирует и установит любые необходимые зависимости (принимая во внимание параметры настроек USE), а также скомпилирует и установит новую, незамаскированную версию galeon. Galeon также может быть упомянут полным именем с использованием названия категории:<i>net-www/galeon</i>.
</p>

<p>
Команда <i>emerge</i> также принимает ссылки на сами ebuild-файлы. Это позволяет пользователям устанавливать более старые пакеты или пакеты
третьих лиц. Простой пример:
</p>

<pre>
emerge /usr/portage/net-www/galeon/galeon-1.2.0-r3.ebuild
</pre>

<p>
В дополнение к названию пакета или ebuild-файла, который будет установлен, <i>emerge</i> поддерживает несколько очень полезных параметров командной строки. Из всех этих параметров <i>--pretend</i>, наверное, наиболее полезен. При использовании этого параметра установка выполняться не будет. Вместо этого Portage просто отобразит список пакетов, которые должны быть установлены или обновлены для выполнения действия, например, все той же установки. В следующем примере показано, что должно быть установлено или обновлено на примере инсталляции последней версии пакета kdevelop:
</p>

<pre>
root@kodiak blocke # emerge --pretend kdevelop             

These are the packages that I would merge, in order.

Calculating dependencies ...done!
[ebuild  N   ] kde-base/kdelibs-2.2.2-r4 to /
[ebuild  N   ] dev-util/kdbg-1.2.2 to /
[ebuild   U  ] app-text/psutils-1.17 to /
[ebuild   U  ] app-text/a2ps-4.13b-r3 to /
[ebuild   U  ] app-text/jadetex-2.20 to /
[ebuild  N   ] app-text/sgmltools-lite-3.0.3-r2 to /
[ebuild  N   ] kde-base/kdoc-2.2.2-r1 to /
[ebuild  N   ] net-www/htdig-3.1.5-r2 to /
[ebuild  N   ] app-text/enscript-1.6.3-r1 to /
[ebuild  N   ] kde-base/kdebase-2.2.2-r2 to /
[ebuild  N   ] app-doc/qt-docs-2.3.1 to /
[ebuild  N   ] dev-util/kdevelop-2.0.2 to /
</pre>

<p>
В вышеупомянутой распечатке пакеты, отмеченные <i>N</i> - это те, что еще не были установлены и будут установлены в течении данного "действия". Буква <i>U</i> же свидетельствует о том, что более старая версия этого пакеты была установлена и будет обновлена до новой.
</p>

<p>
Другие аргументы командной строки:
</p>

<p>
<i>--fetchonly</i> : Просто загрузит пакет и все необходимые зависимости для компиляции и установки.
</p>

<p>
<i>--emptytree</i> : Данная опция заставит Portage притворится, что ни одна из зависимостей пакета или пакетов не установлена. Это полезно использовать с <i>--pretend</i>, которая отображает законченное дерево зависимостей для любого выбранного пакета. Все зависимости, за исключением glibc, будут отображены.
</p>

<p>
<i>--nodeps</i> : Portage установит только указанные пакеты, игнорируя их зависимости. Если у вас не установлены соответствующие зависимости, компиляция может потерпеть крах.
</p>

<p>
<i>--onlydeps</i> : Установит только зависимости для указанного пакета. Сам пакет <u>не</u> будет установлен.
</p>

<p>
<i>--noreplace</i> : Пропустит установку указанных пакетов, если они уже установлены.
</p>

<p>
<i>--usepkg</i> : Вместо компиляции указанных пакетов Portage попытается использовать бинарные tbz2 пакеты из указанного местоположения. Местоположение можно указать переменной среды оболочки <i>PKGDIR</i>.
</p>

<p>
<i>--debug</i> : Включает вывод сообщений отладки, что полезно для разработчиков, пытающихся проследить ошибки в bash синтаксисе ebuild-файлов.
</p>

<p>
<i>--autoclean</i> : Заставляет <i>emerge</i> удалять определенные пакетные временные каталоги перед компиляцией новой программы. Portage делает это по умолчанию, так что опция полезна только для разработчиков, которые изменили настройки по умолчанию.
</p>

<p>
<i>--verbose</i> : Позволяет запустить <i>emerge</i> в информационном режиме. В настоящие время отображаются только ошибки GNU info, которые могут безопасно игнорироваться пользователями.
</p>

</body>
</section>

<section>
<title>Удаление пакетов</title>
<body>

<p>Процесс "удаления" уничтожит из файловой системы все связанные файлы установленного пакета. Программное обеспечение пакета будет невозможно использовать, пока он заново не будет установлен.
</p>

<p>
Название удаляемого пакета следует после аргумента <i>unmerge</i> команды
<i>emerge</i>. Следующий пример удалит все установленные версии пакета
<i>ltrace</i>:
</p>

<pre>
emerge unmerge ltrace

или

emerge unmerge dev-util/ltrace
</pre>

<p>
Portage также позволяет указать определенные версии пакетов для
удаления. Список определений следующий, <i>=</i> (точная версия), 
<i>&lt;</i> (более старшая версия), <i>&gt;</i>
(более новая версия), <i>&lt;=</i> (более старшая, либо текущая), и
<i>&gt;=</i> (более новая, либо текущая). Следующий пример удалит
программу ltrace, версии 0.3.15 и старше:
</p>

<pre>
emerge unmerge \&lt;=dev-utils/ltrace-0.3.15
</pre>

<p>
При указании пакета важно заэкранировать символы <i>&gt;</i> и
<i>&lt;</i>, так, чтобы ваша оболочка их не интерпретировала.  Также
нужно указать категорию пакета, как это показано в примере. За другими
примерами обращайтесь к <i>emerge --help</i>.
</p>

<warn>
Удаление пакетов опасно. Если вы удалите какой-нибудь важный пакет
ваша система, скорей всего, перестанет функционировать, а удаление
библиотек может неудачно повлиять на работу программного обеспечения.
<b>Portage не предупредит вас если вы удалите системный пакет
или какую-нибудь зависимость для других пакетов.</b>
</warn>

<p>
Если удаляемый пакет установлен, emerge покажет какая именно его
версия подлежит удалению и сколько времени до этого осталось. В
течении данного периода пользователь может отменить удаление нажав
комбинацию клавиш Control-C.
</p>

<p>
Как только начнется процесс удаления вы увидите длинный список имен
файлов принадлежащих удаленному пакету. У некоторых их этих строк
слева от имени файла добавлен флажок. Флажки <i>!mtime</i>,
<i>!empty</i> и <i>cfgpro</i> определяют причины по которым данные
файлы не были физически удалены при удалении пакета. Файлы из списка
не имеющие флажков, успешно удалены из файловой системы.
</p>

<p>
Флажок <i>!mtime</i> означает, что файл был изменен после установки
указанного пакета. То есть, кто-то редактировал этот файл после того,
как пакет был установлен или какой-нибудь другой пакет позже переписал
этот файл. Это позволяет обновлять пакеты до более новых версии не
боясь, что удаление старых уничтожит жизненно важные файлы.
</p>

<p>
Флажок <i>!empty</i> относится к непустым каталогам, которые Portage
отказывается удалять (разные пакеты часто используют одни и теже
директории). При срабатывании защиты конфигурационных фалов вы видите флажок
<i>cfgpro</i>. Это означает, что Portage не позволяет более новому
устанавливаемому пакету, требующему свой конфигурационный файл,
заменить уже существующий.
</p>

<warn>
Файлы принадлежат последнему установленному пакету. Все зависит от
порядка инсталляции и не зависит от номера версии или номера ревизии
установленных пакетов. Удаление пакета установленного последним и 
содержащего некий файл, удалит и сам файл, даже если установлены пакеты 
более старших версии того же самого программного обеспечения (полагая, что
пользователь вручную не изменял файл).
</warn>

</body>
</section>

<section>
<title>Системное обновление</title>
<body>

<p>
Portage позволяет обновлять установленные пакеты всего одной
командой. Важная особенность для успешного функционирования системы,
это процесс обновления "основных" системных пакетов до версии
рекомендуемой разработчиками дистрибутива Gentoo.
Системное обновление не затрагивает рядовые пакеты, оно работает
только с теми пакетами, которые определены в конфигурационном файле
Portage как необходимые для функционирования и поддержания системы в
рабочем виде.
</p>

<p>
Для запуска системного обновления, укажите:
</p>

<pre>
emerge --update system
</pre>

<p>
Portage скомпилирует и установит обновления в зависимости от того какие
версии пакетов у вас уже установлены, а так же от текущей конфигурации
Portage. Пользователи могут использовать аргумент <i>--pretend</i> в
примере выше для получения списка пакетов, которые будут установлены
либо обновлены данной командой.
</p>

<note>
Вы должно быть обратили внимание, что один из первых шагов это запуск
<i>emerge system</i> для установки базовых (или "основных") пакетов.
<i>emerge --update system</i> же обновит основные пакеты до
рекомендуемых версий.
</note>

</body>
</section>

<section>
<title>Глобальное обновление</title>
<body>

<p>
Portage также одной командой позволяет обновить все установленные
пакеты. Система портов достаточно развита для того чтобы учесть
степень несовместимости версий различных пакетов, и произвести
обновление программного обеспечения.
</p>

<p>
При глобальном обновлении Portage проверяет <i>package.mask</i> на
наличие блокированных пакетов, зависимостей (включая диапазон версий) а
также глобальный профиль на пакеты нуждающиеся в обновлении. Пакет
обновится только при наличии новой версии, записи в глобальном профиле
или о записи зависимости все в том глобальном профиле. К тому же пакет
или его определенная версия не должны быть блокированы в
конфигурационном файле <i>package.mask</i>.
</p>

<p>
При рассмотрении пакетов для обновления Portage пытается обновить до
самой последней доступной версии все пакеты указанные в глобальном
конфигурационном файле. Portage также рассмотрит зависимости каждого
пакета отмеченного в глобальной конфигурации и попробует обновить их до
новых версии, если, конечно, эти версии доступны и не блокированы в
<i>package.mask</i>. И конечно будут рассмотрены <i>СЛОТЫ</i> речь о
которых шла в предыдущей главе.
</p>

<p>
Пользователи знакомые с другими дистрибутивами и пакетными
менеджерами кроме Portage, могут быть удивлены тем, почему Portage
просто не обновляет пакеты, основываясь исключительно на номерах
версий (как это было прежде в Gentoo 1.0). Многие из пакетов,
включенных в репозитарий Gentoo имеют много доступных версий. Старая
или более новая версия пакета может быть несовместима с программным
обеспечением с ней работающие. Вслепую обновление библиотек и
инструментальных средств без учета потребностей других пакетов может
быстро привести к серьезным проблемам. Portage пытается избежать этого
и рассматривает зависимости всех пакетов основываясь на индивидуальных
ebuild скриптах.
</p>

<p>
Основа глобального обновления Portage - это конфигурационный файл
<i>world</i>. В отличии от системного конфигурационного файла который
редактируется только разработчиками и как правило никогда не
затрагивается обычными пользователями, глобальный конфигурационный
файл генерируется через какое-то время, благодаря установкам
программного обеспечения производимым пользователем.  Глобальный
конфигурационный файл очень похож на "список избранного".  Все пакеты
установленные пользователем вручную посредством использования
программы <i>emerge</i> записываются в файл
<i>world</i>, расположенном <i>/var/cache/edb/world</i>. Portage
предполагает, что раз вы установили какой-либо паке,т то вам так же
необходимо его обновлять.
</p>

<p>
Глобальный файл <i>world</i> состоящий из категории и имени файла в
одну строку, представляет из себя следующие:
</p>

<pre>
net-im/gaim
net-www/skipstone
net-www/galeon
app-editors/vim
app-text/ispell
net-mail/evolution
dev-util/ltrace
sys-apps/xfsprogs
=net-www/mozilla-0.9.8-r3
sys-apps/attr
sys-apps/dmapi
sys-kernel/linux-sources
sys-apps/acl
app-office/gnucash
app-cdr/xcdroast
</pre>

<p>
Почти все строки в примере были добавлены автоматически при установке
пакетов пользователем. Строки эти будут обновлены при наличии более
новых версий.
</p>

<note>
Чтобы сэкономить время и быть уверенным в том, что нужные вам пакеты
всегда будут обновляться, отредактируйте <i>world</i> файл вручную
добавив данные о пакетах, которые вам будут нужны. Пользователям
обновляющимся старой версией Portage возможно потребуется дописать
этот файл. У недавно установленного Gentoo с Portage уже имеется
глобальный конфигурационный файл созданный в процессе инсталляции.
</note>

<p>
Вы должно быть обратили внимание на строку пакета mozilla
(<i>=net-www/mozilla-0.9.8-r3</i>). К названию файла был добавлен
вручную знак "=", определяющий точную версию. Списки определений
(которые уже были рассмотрены в главе <i>Удаление пакетов</i> данного
руководства) могут использоваться, чтобы заставить Portage
рассматривать только заданные диапазоны версий при обновлении
пакетов. В данной строке знак "=" поставлен для того, чтобы Portage
рассматривал mozilla-0.9.8-r3 единственной доступной версией и никогда
не затрагивал ее при глобальном обновлении пакетов.
</p>

<p>
Глобальное обновление производится командой:
</p>

<pre>
emerge --update world
</pre>

<p>
После чего Portage попробует обновить все пакеты упомянутые в
конфигурационном файле <i>world</i> и если необходимо, обновит любые
зависимости. Зависимости обновляются до самой последней версии,
основываясь на потребности обновляемого пакета. Пакеты не
перечисленные в конфигурационном файле <i>world</i>  и не являющиеся 
зависимостями другихпакетов не будут обновлены.
</p>

<warn>
Portage не будет переписывать файлы в директориях помеченных защитой
конфигурационных файлов. Вы должны будите вручную исправить различия
между вашими текущими файлами конфигурации и новыми версиями
специально сохраненными для вас Portage. Если вы не обновите ваши
рабочие конфигурационние файлы, то не исключено, что некоторое установленное
программное обеспечение может перестать функционировать. Для большей
информации смотрите <i>Защита конфигурационных файлов</i> в главе 
<i>Настройка Portage</i> или воспользуйтесь командой <i>emerge --help
config</i>
</warn>

<p>
Для того, чтобы увидеть список всего, что было бы обновлено или установлено в
течении глобального обновления, используйте аргумент <i>--pretend</i>,
как было упомянуто в предыдущих разделах этой главы.
</p>

<note>
Глобальное обновление также автоматически выполняет и системное
обновление. При этом версии системных пакетов не могут быть заморожены в файле 
<i>world</i>, поскольку установки используемого profile имеют более высокий приоритет.
</note>

<p>
Любопытный побочный эффект глобального обновления может быть
использован пользователями для перекомпиляции всего программного
обеспечения установленного в системе. Так как глобальное обновление
затрагивает все пакеты и их зависимости упомянутые в файле
<i>world</i>, использование аргумента <i>--emptytree</i> позволит
принудительно перекомпилировать пакеты и их зависимостей исключая
glibc. Это может быть полезно для пользователей желающих изменить
опции компилятора или настройки USE на все программное обеспечение
которое они используют без перекомпиляции каждого пакета вручную.
Просто запишите в файл <i>world</i> все обычно используемое вами
программное обеспечение и запустите:
</p>

<pre>
emerge --update world --emptytree
</pre>

<p>
К этой команде вы можете добавить аргумент <i>--pretend</i>, чтобы
получить список пакетов, которые были бы перекомпилированы в
результате ее выполнения.
</p>

</body>
</section>

<section>
<title>Чистка системы</title>
<body>

<p>
Portage позволяет установить несколько версий пакетов одна рядом с
другой. Чем успешно можно воспользоваться для ряда программного
обеспечения из дерева Portage (например для обратной совместимости,
поскольку старшие версии приложений могут быть несовместимы с более
новыми версиями других пакетов).
</p>

<p>
В большинстве случаев взамен старой версии будет использоваться более
новая и все, что останется нужным это документация, да возможно пара
незначительных файлов не имеющих влияния на систему. Со временем
накапливаясь, этот "груз" будет занимать все больше дискового
пространства.
</p>

<p>
Дабы бороться с этим, Portage поддерживает способ удаления всех
старых версий из пользовательской системы. Эта возможно благодаря
опции <i>clean</i> и используется следущим образом:
</p>

<pre>
emerge clean
</pre>

<p>
После чего <i>emerge</i> покажет список версий или ревизий, которые
будут удалены список версий, которые останутся и даст пользователю
время для отмены процесса удаления нажатием Control-C. В нормальных
условиях во время удаления на экран будет выводиться список файлов,
которые были уничтожены, либо по каким-либо причинам сохранены.
</p>

<p>
По умолчанию Portage рассматривает опцию чистки на всех установленных
пакетах (<i>world</i>. Вы можете сузить область чистки, использую с
опциями <i>world</i>, <i>system</i>, указывая название пакетов и
используя диапазоны версий которые были рассмотрены в разделе об
удалении пакетов в данной главе.
</p>

<p>
Перед удалением определенной версий пакета, Portage тщательно
проверяет различные конфигурационные файлы, зависимости установленных
пакетов, и СЛОТЫ. Получив нужные данные Portage безопасно удалит
старую версию пакета не не нарушив систему и сохранив ее
функциональность.
</p>	

</body>
</section>

<section>
<title>Уничтожение пакетов</title>
<body>

<p>
Portage также имеет опцию <i>prune</i>. Уничтожение - это более опасная
форма чистки. Она удаляет все версии всех пакетов, кроме последней
установленной. Она так же не выполняет многие из проверок <i>clean</i>,
в связи с чем, в вашей системе могут быть удалены необходимые
зависимости. Пользователи этой опцией могут легко нарушить
работоспособность системы и потому использовать ее стоит только в
некоторых особенных случаях.
</p>

<p>
Опция <i>prune</i> схожа с предыдущей опцией и используется почти
также:
</p>

<pre>
emerge prune
</pre>

</body>
</section>

<section>
<title>Поиск по дереву Portage</title>
<body>

<p>
Такие деревья, как Portage, формирующий основу Gentoo Linux, зачастую
могут быть очень большими. Специально для этого в <i>emerge</i> есть
функция поиска принимающая в качестве аргумента регулярное
выражение в виде строки в кавычках. Регулярные выражения вещь достаточно 
сложная, потому если вы заинтересовались этой темой рекомендую найти 
хорошую книгу по ней.
</p>

<p>
Наиболее простые примеры не требуют знания составления регулярных
выражений. Следующая команда произведет поиск пакета содержащего "gcc",
как часть своего имени:
</p>

<pre>
emerge search gcc
</pre>

<p>
Для каждого из значений поиска будет показан список из названия
пакета последней доступной версии, последний установленной, адреса
домашней страницы и описания программного обеспечения.
</p>

</body>
</section>

<section>
<title>Получение справки</title>
<body>

<p>
Для получения более подробной  информации по опциям и функциям <i>emerge</i>
выполните команду:
</p>

<pre>
emerge --help
</pre>

</body>
</section>

<section>
<title>Полезные утилиты</title>
<body>

<p>
Для облегчения жизни пользователям Gentoo, было создано несколько
утилит, которые находятся в каталаге <i>app-admin/gentoolkit</i> дерева Portage.
</p>

<p>
<ul>
<li><i>etc-update</i> : сценарий оболочки для обновления /etc файлов
(может быть опасно при неправильном использовании)</li>
<li><i>qpkg</i> : утилита для запросов к базе данных пакетов</li>
<li><i>epm</i> : другая утилита для запросов к базе данных пакетов, с
синтаксисом RPM.</li>
</ul>
</p>

</body>
</section>

</chapter>
</guide>
