<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ru/nvidia-guide.xml,v 1.9 2012/10/13 15:07:23 swift Exp $ -->

<guide disclaimer="obsolete" lang="ru">
<title>Руководство по настройке видеокарт nVidia в Gentoo Linux</title>

<author title="автор">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="автор">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="редактор">
  <mail link="curtis119@gentoo.org">M Curtis Napier</mail>
</author>
<author title="редактор">
  <mail link="wolf31o2@gentoo.org">Chris Gianelloni</mail>
</author>

<author title="переводчик">
  <mail link="selecter@spray.se">Антон Кузьмин</mail>
</author>
<author title="переводчик">
  <mail link="azamat.hackimov@gmail.com">Азамат Хакимов</mail>
</author>
<author title="переводчик, редактор перевода">
  <mail link="yuri@yast.msk.ru">Астахов Юрий</mail>
</author>
<author title="редактор перевода">
<mail link="pva@gentoo.org">Пётр Волков</mail>
</author>

<abstract>
Многие гентузиасты являются владельцами чипсетов nVidia. nVidia предоставляет
специальные драйверы Linux, увеличивающие производительность вашей карты. Это
руководство расскажет, как установить и настроить эти драйверы.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.34</version>
<date>2007-08-18</date>

<chapter>
<title>Введение</title>
<section>
<body>

<p>
Находящиеся в дереве драйверы для видеокарт nVidia выпущены самой компанией
nVidia и собираются для ядра Linux. Они содержат двоичный код, который
выполняет основную работу по &laquo;общению&raquo; с видеокартой. Драйвер
разделён на две части &mdash; модуль ядра и драйвер X11. Обе части находятся в
одном пакете. Из-за предложенного nVidia способа сборки пакета, перед тем, как
установить его, вам предстоит сделать некоторый выбор.
</p>

<p>
Пакет <c>nvidia-drivers</c> содержит свежайшие драйверы от nVidia, совместимые
со <e>всеми</e> видеокартами, и, в зависимости от того насколько стара ваша
карта, доступно несколько версий пакета. Используя eclass он определяет какую
видеокарту вы используете, и проверяет, что вы устанавливаете правильную версию
пакета.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Совместимость драйверов</title>
<section>
<title>Какую версию устанавливать?</title>
<body>

<p>
Пакет <c>nvidia-drivers</c> поддерживает весь спектр доступных видеокарт
nVidia. Доступно несколько версий пакета, и какую устанавливать зависит от
того, какая(ие) карта(ы) у вас есть.
</p>

<p>
Новейшие карты, такие как GeForce 8, 7, 6 и FX 5, используют свежие драйверы
серии 100.x.
</p>

<p>
Старым картам, таким как GeForce 3 или GeForce 4, нужны драйверы серии 96xx.
Для этих карт вам нужно замаскировать
<c>>=x11-drivers/nvidia-drivers-1.0.9700</c> в файле
<path>/etc/portage/package.mask</path>. Это предотвратит установку новых версий
драйверов, несовместимых с вашей картой.
</p>

<p>
Совсем древним картам на основе NV2x (TNT, TNT2, GeForce и GeForce 2) нужны
драйверы серии 71xx (например <c>nvidia-drivers-1.0.7185</c>). Для этих карт
вам нужно замаскировать <c>>=x11-drivers/nvidia-drivers-1.0.8700</c> в файле
<path>/etc/portage/package.mask</path>.
</p>

<p>
Совместимость драйверов с вашей видеокартой можно просмотреть на странице
<uri>http://us.download.nvidia.com/XFree86/Linux-x86_64/100.14.11/README/appendix-a.html</uri>.
</p>


</body>
</section>
</chapter>

<chapter>
<title>Настройка карты</title>
<section>
<title>Конфигурирование ядра</title>
<body>

<p>
Как уже упоминалось, драйвер nVidia устанавливается и запускается для текущего
ядра. Он собирается в качестве модуля, и поэтому ядро должно поддерживать
загрузку модулей. Если для конфигурирования ядра вы использовали <c>genkernel
all</c>, тогда всё уже сделано. Если же нет, тогда дважды проверьте
конфигурацию вашего ядра на наличие поддержки загружаемых модулей:
</p>

<pre caption="Включение поддержки загружаемых модулей ядра">
Loadable module support ---&gt;
  [*] Enable loadable module support
</pre>

<p>
Также вам потребуется включить в ядре <e>Memory Type Range Register</e>:
</p>

<pre caption="Включение MTRR">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

<p>
Также, если у вас AGP-видеокарта, вы можете включить поддержку <c>agpgart</c> в
ядре или в виде модуля. Если вы не используете встроенный agpgart, то драйверы
будут использовать собственную реализацию <c>agpgart</c> под названием
<c>NvAGP</c>. На одних системах эта реализация работает лучше чем та, что в
ядре, на других &mdash; хуже. Чтобы достичь наилучшей производительности вам
нужно попробовать обе реализации на своей собственной системе. Если вы не
хотите экспериментировать, просто используйте встроенный в ядро <c>agpgart</c>:
</p>

<pre caption="Включение agpgart">
Device Drivers ---&gt;
Character devices ---&gt;
&lt;*&gt; /dev/agpgart (AGP Support)
</pre>

<note>
На системах архитектуры amd64 настройку agpgart контролирует IOMMU.
</note>

</body>
</section>
<section>
<title>Замечания для архитектур</title>
<body>

<impo>
Для процессоров x86 и AMD64 встроенный в ядро драйвер конфликтует с двоичным
драйвером, выпускаемым nVidia. Если вы собираете ядро для этих процессоров,
следует полностью убрать поддержку драйвера предоставляемого ядром, как
показано ниже:
</impo>

<pre caption="Удалите предоставляемый ядром драйвер">
Device Drivers ---&gt;
Graphics Support ---&gt;
&lt; &gt;   nVidia Framebuffer Support
&lt; &gt;   nVidia Riva support
</pre>

<p>
Хорошей альтернативой кадрового буфера будет <c>VESA</c>:
</p>

<pre caption="Включение поддержки VESA">
Device Drivers ---&gt;
Graphics Support ---&gt;
&lt;*&gt;   VESA VGA graphics support
</pre>

<p>
Затем в разделе &laquo;VESA driver type&raquo; выберите либо <c>vesafb</c>,
либо <c>vesafb-tng</c>. Если у вас процессор AMD64, вы должны выбрать
<c>vesafb</c>, а не <c>vesafb-tng</c>:
</p>

<pre caption="Выбор типа кадрового буфера">
(X) vesafb
( ) vesafb-tng
</pre>

<p>
Если вы используете <c>vesafb</c>, то дополнительную информацию можно
посмотреть в файле <path>/usr/src/linux/Documentation/fb/vesafb.txt</path>, или
же найдите нужную документацию по кадровому буферу в каталоге
<path>/usr/src/linux/Documentation/fb/</path>.
</p>

</body>
</section>
<section>
<title>Последующая настройка ядра</title>
<body>

<p>
Сборочный файл <c>nvidia-drivers</c> автоматически определяет версию вашего
ядра по символической ссылке <path>/usr/src/linux</path>. Проверьте, что ссылка
присутствует в системе и указывает на правильно настроенное ядро. Чтобы
получить дополнительную информацию о том, как настроить ядро, обратитесь к
разделу &laquo;Настройка ядра&raquo; из <uri
link="/doc/ru/handbook/">Настольной книги по установке</uri>.
</p>

<p>
Для начала нужно установить <c>eselect</c> (emerge <c>eselect</c>, если он ещё
не установлен). В случае, если у вы используете ядро
<c>gentoo-sources-2.6.18-r4</c>, список доступных ядер может выглядеть
следующим образом:
</p>

<pre caption="Проверьте символическую ссылку /usr/src/linux">
# <i>eselect kernel list</i>
Available kernel symlink targets:
  [1]   linux-2.6.18-gentoo-r4 *
  [2]   linux-2.6.20-gentoo-r7
  [3]   linux-2.6.20-gentoo-r8
<comment>(Проверьте, что правильное ядро помечено звёздочкой)</comment>
</pre>

<p>
В выше приведённом выводе вы заметите, что ядро <c>linux-2.6.18-gentoo-r4</c>
отмечено звёздочкой (<b>*</b>), что указывает на то, что именно на него
указывает символическая ссылка.
</p>

<p>
Если ссылка не указывает на правильные исходные коды ядра, вам следует изменить
её, указав номер предпочитаемого ядра, продолжая предыдущий пример, следующим
образом.
</p>

<pre caption="Создание или изменение символической ссылки /usr/src/linux">
<comment>(Выберите правильное ядро)</comment>
# <i>eselect kernel set 1</i>
</pre>

</body>
</section>
<section>
<title>Установка подходящих драйверов</title>
<body>

<p>
Теперь пришло время установить драйверы.
</p>

<pre caption="Установка драйверов nVidia">
# <i>emerge nvidia-drivers</i>
</pre>

<note>
Новые драйвера серии 100.x можно установить с USE-флагом <c>gtk</c>. В таком
случае в качестве зависимости будет установлен
<c>media-video/nvidia-settings</c>, полезная графическая утилита для
отображения и настройки различных параметров вашей видеокарты nVidia.
</note>


<impo>
Каждый раз, когда вы <uri link="/doc/en/kernel-upgrade.xml">собираете новое
ядро (англ.)</uri> или пересобираете текущее, вам нужно запускать <c>emerge
nvidia-drivers</c> для пересборки модулей nVidia. Наипростейшим способом
следить за установленными с помощью Portage модулями ядра (как и
<c>nvidia-drivers</c>) является установка <c>sys-kernel/module-rebuild</c>.
Как только вы его установите, чтобы создать список пакетов, которые следует
пересобирать, запустите <c>module-rebuild populate</c>. Теперь, закончив
(пере)сборку ядра, чтобы (пере)собрать драйверы для нового ядра просто
запустите <c>module-rebuild rebuild</c>.
</impo>

<p>
Как только установка завершиться, чтобы загрузить модуль в память выполните
<c>modprobe nvidia</c>. Если вы обновляли модуль, вам следует предварительно
удалить устаревший модуль.
</p>

<pre caption="Загрузка модуля ядра">
# <i>lsmod | grep nvidia &amp;&amp; rmmod nvidia</i>
# <i>modprobe nvidia</i>
</pre>

<p>
Чтобы вам не приходилось вручную загружать модуль после каждой загрузки
системы, вы, вероятно, захотите, чтобы это делалось автоматически, поэтому
откройте <path>/etc/modules.autoload.d/kernel-2.6</path> и добавьте в него
<c>nvidia</c>. После этого не забудьте выполнить <c>update-modules</c>.
</p>

<impo>
Если вы собрали <c>agpgart</c> в качестве модуля, то вам понадобиться указать
его в <path>/etc/modules.autoload.d/kernel-2.6</path>.
</impo>

<pre caption="Запуск update-modules">
# <i>update-modules</i>
</pre>

</body>
</section>
<section>
<title>Настройка X-сервера</title>
<body>

<p>
Как только необходимые драйверы установлены, вам потребуется настроить
X-сервер и задействовать драйвер <c>nvidia</c> вместо используемого по
умолчанию <c>nv</c>.
</p>

<p>
Откройте файл <path>/etc/X11/xorg.conf</path> своим любимым текстовым
редактором (например <c>nano</c> или <c>vim</c>) и найдите раздел
<c>Device</c>. В этом разделе измените строку <c>Driver</c>:
</p>

<pre caption="Замена nv на nvidia в файле настроек X-сервера">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>
  VideoRam   65536
EndSection
</pre>

<p>
Теперь перейдите в раздел <c>Module</c> и проверьте, что будет загружаться
модуль <c>glx</c>, а <c>dri</c>&nbsp;&mdash; не будет:
</p>

<pre caption="Изменение раздела Module">
Section "Module"
  <comment>(...)</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>(...)</comment>
EndSection
</pre>

<p>
Далее, в разделе <c>Screen</c> проверьте, что каждая из инструкций
<c>DefaultDepth</c> установлена в 16 или 24, или что у вас есть только
подразделы <c>Display</c> с установленной <c>Depth</c> в 16 или 24. Без этого
расширение nVidia GLX не будет запускаться.
</p>

<pre caption="Обновление раздела Screen">
Section "Screen"
  <comment>(...)</comment>
  <i>DefaultDepth 16</i>
  Subsection "Display"
  <comment>(...)</comment>
EndSection
</pre>

<p>
Запустите <c>eselect</c>, чтобы X-сервер использовал GLX-библиотеки nVidia:
</p>

<pre caption="Запуск eselect">
# <i>eselect opengl set nvidia</i>
</pre>

</body>
</section>
<section>
<title>Добавление пользователей в группу video</title>
<body>

<p>
Добавьте ваших пользователей в группу <c>video</c>, чтобы у них был доступ к
файлам устройств nVidia:
</p>

<pre caption="Добавление пользователя в группу video">
# <i>gpasswd -a youruser video</i>
</pre>

<p>
В случае если вы не используете файловую систему <c>udev</c>, то в этом шаге
нет необходимости, но он ничего не испортит и сделает систему стойкой к
последующим изменениям.
</p>

</body>
</section>
<section>
<title>Проверка работоспособности видеокарты</title>
<body>

<p>
Для проверки работоспособности карты nVidia запустите X и выполните команду
<c>glxinfo</c>, которая является частью пакета <c>mesa-progs</c>. Вы должны
увидеть, что прямой доступ к рендерингу (direct rendering) включён:
</p>

<pre caption="Проверка статуса прямой прорисовки">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
Чтобы узнать FPS (число отрисованных кадров в секунду), используйте программу
<c>glxgears</c>.
</p>

</body>
</section>
<section>
<title>Включение поддержки nvidia</title>
<body>

<p>
Некоторые пакеты, например, <c>mplayer</c> и <c>xine-lib</c>, используют
локальный USE-флаг <c>xvmc</c>, который включает поддержку аппаратного
ускорения потока Mpeg (XvMCNVIDIA), полезного при просмотре фильмов в большом
разрешении. Добавьте в файле <path>/etc/make.conf</path> <c>xvmc</c> в
переменную USE или добавьте его в качестве USE-флага для
<c>media-video/mplayer</c> и/или <c>media-libs/xine-lib</c> в
<path>/etc/portage/package.use</path>.
</p>

<p>
Кроме этого некоторые приложения используют USE-флаг <c>nvidia</c>, так что вам
может понадобиться добавить его в <path>/etc/make.conf</path>.
</p>

<p>
После этого запустите <c>emerge -uD --newuse world</c>, чтобы пересобрать
приложения, которых коснулось изменение USE-флагов.
</p>

</body>
</section>
<section>
<title>Использование инструмента nVidia Settings</title>
<body>

<p>
nVidia также предлагает вам утилиту настройки. Эта утилита позволит наблюдать и
изменять графические настройки без перезапуска X-сервера. Она доступна в
Portage под именем <c>media-video/nvidia-settings</c>. Как было сказано выше,
она устанавливается автоматически, при условии, что вы добавили USE-флаг
<c>gtk</c> в <path>/etc/make.conf</path> или в
<path>/etc/portage/package.use</path> при установке
<c>>=x11-drivers/nvidia-drivers-100.14.09</c>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Решение проблем</title>
<section>
<title>Работа 2D на компьютерах с 4Гб ОЗУ и более</title>
<body>

<p>
Если у вас проблемы с 2D-ускорением nVidia, скорее всего, не удаётся установить
диапазон совмещения записи (write-combining range) для MTRR. Чтобы проверить
это, просмотрите содержимое <path>/proc/mtrr</path>:
</p>

<pre caption="Включена ли поддержка write-combining">
# <i>cat /proc/mtrr</i>
</pre>

<p>
Каждая строка должна содержать &laquo;write-back&raquo; или
&laquo;write-combining&raquo;. Если вы видите строку, содержащую
&laquo;uncachable&raquo;, то, чтобы исправить это, требуется изменить настройки
BIOS.
</p>

<p>
Перезагрузитесь и войдите в BIOS, затем найдите настройки MTRR (возможно в
&laquo;CPU Settings&raquo;). Измените установки с &laquo;continuous&raquo; на
&laquo;discrete&raquo; и загрузитесь назад в Linux. Теперь вы не нигде не
должны увидеть значения &laquo;uncachable&raquo;, и 2D-ускорение должно
работать без каких-либо помех.
</p>

</body>
</section>
<section>
<title>
  Ошибка &laquo;no such device&raquo; при попытке загрузить модуль ядра
</title>
<body>

<p>
Обычно это происходит, когда у вас нет соответствующей видеокарты. Убедитесь,
что ваша видеокарта основана на чипе nVidia (это можно проверить командой
<c>lspci</c>).
</p>

<p>
Если вы уверены, что у вас карта nVidia, проверьте BIOS и проверьте, включён ли
параметр <e>Assign IRQ to VGA</e>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Тонкая настройка</title>
<section>
<title>Документация</title>
<body>

<p>
Пакет драйверов nVidia поставляется с исчерпывающей документацией. Она
устанавливается в <c>/usr/share/doc</c>, её можно посмотреть следующей
командой:
</p>

<pre caption="Просмотр документации NVIDIA">
$ <i>less /usr/share/doc/nvidia-drivers-*/README.gz</i>
</pre>

</body>
</section>
<section>
<title>Параметры модуля ядра</title>
<body>

<p>
Модуль ядра <c>nvidia</c> принимает некоторые параметры, с помощью которых вы
можете изменять поведение драйвера. Большинство из них описано в документации.
Чтобы добавить или изменить эти параметры, отредактируйте файл
<c>/etc/modules.d/nvidia</c>. Не забудьте запустить <c>update-modules</c> после
изменения этого файла и держите в голове, что вам понадобиться перезагрузить
модуль <c>nvidia</c>, чтобы новые настройки возымели действие.
</p>

<pre caption="Изменение параметров nvidia">
<comment>(Отредактируйте /etc/modules.d/nvidia вашим любимым редактором)</comment>
# <i>nano -w /etc/modules.d/nvidia</i>
<comment>(Обновление информации о модулях)</comment>
# <i>update-modules</i>
<comment>(Выгрузка модуля nvidia...)</comment>
# <i>modprobe -r nvidia</i>
<comment>(...и его загрузка снова)</comment>
# <i>modprobe nvidia</i>
</pre>

</body>
</section>
<section>
<title>Расширенная настройка X-сервера</title>
<body>

<p>
GLX-интерфейс также имеет множество настраиваемых параметров. Они управляют
настройками TV-вывода, одновременным выводом на два монитора, определением
частоты монитора и так далее. И снова, все доступные параметры подробно описаны
в документации.
</p>

<p>
Если вы хотите задействовать любой из этих параметров, то вам нужно указать их
в соответствующем разделе Device конфигурационного файла X-сервера (обычно
<c>/etc/X11/xorg.conf</c>). Например, я хочу отключить всплывающий логотип
nVidia при загрузке X-сервера:
</p>

<pre caption="Расширенная конфигурация nvidia в настройках X-сервера">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  <i>Option     "NoLogo" "true"</i>
  VideoRam   65536
EndSection
</pre>

</body>
</section>
</chapter>

</guide>

<!-- *$Localization:
target-language: Russian
target-version: 1.34-r2
target-date: 2007-08-17
sourde-cvs-version: 1.43
translated-by: Azamat H. Hackimov <azamat.hackimov@gmail.com>
edited-by: Peter Volkov <pva@gentoo.org>

notes:
require /doc/ru/kernel-upgrade.xml
-->
