<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ru/utf-8.xml,v 1.3 2012/08/30 08:00:28 nightmorph Exp $ -->

<guide lang="ru">
<title>Использование UTF-8 в Gentoo</title>

<author title="автор">
  <mail link="slarti@gentoo.org">Thomas Martin</mail>
</author>
<author title="участник">
  <mail link="devil@gentoo.org.ua">Александр Симонов</mail>
</author>
<author title="редактор">
  <mail link="fox2mike@gentoo.org">Shyam Mani</mail>
</author>
<author title="редактор">
  <mail link="nightmorph"/>
</author>
<author title="переводчик">
  <mail link="azamat.hackimov@gmail.com">Азамат Хакимов</mail>
</author>
<author title="переводчик">
  <mail link="blueboar2@gmail.com">Романов Владимир</mail>
</author>

<abstract>
Это руководство поможет вам настроить кодировку UTF-8 Юникод для системы Gentoo
Linux и понять преимущества работы с Юникод и особенно в UTF-8.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license />

<version>3</version>
<date>2012-07-24</date>

<!--НАЧАЛО отсебятина-->
<chapter>
<title>Предупреждение или Напутствие переводчика</title>
<section>
<body>

<p>
Путь Юникода в русском Gentoo-сообществе сложен. Мы постоянно сталкивались с
проблемами неполной поддержки или же неподдержки вовсе отдельными приложениями
стандарта UTF-8.
</p>

<p>
Но всё меняется к лучшему. Большинство приложений так или иначе стало
поддерживать региональные настройки UTF-8. А для неподдерживающих уже разработаны
способы исправления этого недостатка. Но всё же, если у вас возникли трудности с
настройкой Юникода в Gentoo, то вы всегда найдете помощь и поддержку (иногда
сквозь стиснутые зубы :)) на следующих страницах:
</p>

<ul>
  <li>
    <uri
    link="http://ru.gentoo-wiki.com/HOWTO_ru_RU.utf8_Gentoo_way">Статья в
    gentoo-wiki о поддержке Юникода</uri>
  </li>
  <li>
    <uri link="http://gentoo.ru/forum">Форум русского сообщества Gentoo</uri>
  </li>
  <li>
    <uri link="http://forums.gentoo.org/viewforum-f-43.html">Русскоязычный
    форум на официальном сайте Gentoo</uri>
  </li>
</ul>

<p>
Если вы заметили неточность или хотите дополнить данное руководство, пожалуйста
свяжитесь с переводчиком или одним из редакторов перевода.
</p>

</body>
</section>
</chapter>
<!--КОНЕЦ отсебятина-->

<chapter>
<title>Кодировки</title>
<section>
<title>Что такое кодировка?</title>
<body>

<p>
Компьютеры неспособны воспринимать текст. Вместо этого они каждый символ
представляют как число. Традиционно каждый набор чисел, соответствующий
алфавиту и символам (известный как кодировка или набор символов), ограничен
в размере в силу ограничений оборудования.
</p>

</body>
</section>
<section>
<title>История кодировок символов</title>
<body>

<p>
Самой распространенной (или наиболее принятой повсеместно) кодировкой
является <b>ASCII</b> (Американский стандартный код для обмена информацией,
American Standard Code for Information Interchange). Повсеместное
использование говорит о том, что ASCII &mdash; наиболее успешный программный
стандарт современности. Нынешний ASCII стандартизован в 1986 году (ANSI X3.4,
RFC 20, ISO/IEC 646:1991, ECMA-6) Американским национальным институтом по
стандартизации (American National Standards Institute, ANSI).
</p>

<p>
ASCII является строго семибитной кодировкой, из чего следует, что она
использует семь двоичных цифр, то есть интервал от 0 до 127. ASCII начинается
с 32 невидимых управляющих символов (с кодами от 0 до 31) и заканчивается
управляющим символом DEL (или delete) с кодом 127. Символы в диапазоне от 32 до
126 видимы &mdash; это пробел, знаки препинания, латинские буквы и цифры.
</p>

<p>
Восьмой бит в ASCII изначально использовался как бит целостности для проверки
ошибок при передаче информации. Если не указывалось особо, он всегда равнялся 0.
Это означает, что в ASCII каждый символ равняется одному байту.
</p>

<p>
Хотя ASCII было достаточно для передачи информации на английском, для других
европейских языков, содержащих символы с ударениями, это было не так просто. Для
них был разработаны стандарты семейства ISO 8859. Они были обратно совместимы с
ASCII, но также использовали восьмой бит для дополнения таблицы дополнительными
127 символами для каждой кодировки. Ограничения ISO 8859 были незначительными,
поэтому стандарт получил распространение. На данный момент существует 15
вариантов стандарта ISO 8859 (от 8859-1 до 8859-15). Однако для каждого символа
вне ASCII-совместимого диапазона между этими стандартами возникал конфликт.
Чтобы еще больше усилить конфликт между различными кодировками, для
восточноевропейских языков корпорацией Microsoft был введен набор Windows-1252,
использованный в ранних версиях Windows. Этот набор является надстройкой ISO
8859-1, обладающий собственными изменениями. Однако все же эти наборы были
совместимы с ASCII.
</p>

<p>
Необходимость разработки совершенно отличных от ASCII однобайтовых кодировок для
нелатинских алфавитов, как например EUC (Extended Unix Coding), используемый в
японском и корейском (и в меньшей степени китайском) алфавитах, породила еще
большую неразбериху с кодировками, из-за чего ряд операционных систем все еще
использует различные наборы символов для одного и того же языка, например
японские Shift-JIS и ISO-2022-JP. А пользователи, желающие видеть кириллицу,
вынуждены были выбирать между KOI8-R (для русского и болгарского языков) и
KOI8-U (для украинского языка), неудачной ISO 8859-5 и популярной Windows-1251.
Все три семейства кодировок не полностью совместимы с ASCII (хотя в KOI8
фонетически созвучные кириллические символы расположены так же, как и латинские,
благодаря чему даже при отбрасывании восьмого бита текст оставался читабельным в
ASCII-терминалах в виде транслита).
</p>

<p>
Все это привело к путанице и полной невозможности многоязычного общения, в
особенности с использованием различных алфавитов. Переходим к Юникоду.
</p>

</body>
</section>
<section>
<title>Что такое Юникод?</title>
<body>

<p>
Юникод отбрасывает лимит традиционных однобайтовых кодировок. Он использует 17
&laquo;плоскостей&raquo;, содержащих по 65&nbsp;536 кодов символов. Таким
образом, максимальное возможное число символов равно 1&nbsp;114&nbsp;112.
Поскольку в первой плоскости (&laquo;Basic Multilingual Plane&raquo; или BMP)
содержится почти всё, что вам может понадобиться, многие ошибочно посчитали,
что Юникод &mdash; это 16-битный набор символов.
</p>

<p>
Юникод реализован несколькими способами, но распространены только два &mdash;
<b>UTF</b> (Unicode Transformation Format) и <b>UCS</b> (Universal Character
Set). Число после UTF обозначает число бит на каждый символ, когда как число
после UCS обозначает число байт. UTF-8 стала наиболее распространенной при
обмене текста Юникод из-за малых (сравнительно) потерь при хранении текста,
Поэтому она и является основной темой данного документа.
</p>

</body>
</section>
<section>
<title>UTF-8</title>
<body>

<p>
UTF-8 &mdash; это кодировка переменной длины. Это означает, что для каждого
символа она может использовать от одного до четырех байт. Первый байт UTF-8
используется для кодирования ASCII, благодаря чему UTF-8 полностью обратно
совместима с ASCII. UTF-8 подразумевает, что ASCII и латинские символы
равнозначны с небольшим увеличением размера данных, так как используется только
первый байт. Пользователи восточных кодировок (например, японского), которым
назначены старшие диапазоны, не так рады, так как в результате их данные
разбухают на 50 %.
</p>

</body>
</section>
<section>
<title>Что UTF-8 может сделать для вас</title>
<body>

<p>
UTF-8 позволяет вам работать в совместимой со всеобщими стандартами и
принятой по всему миру многоязычной среде, правда с небольшими потерями при
обработке данных. UTF-8 &mdash; это наилучший способ для передачи не-ASCII
символов через интернет, будь то электронная почта, IRC-сети или что-нибудь
еще. Несмотря на это, множество людей расценивают использование UTF-8 при
передаче данных неприличным и неуважительным. Всегда следует выяснять,
поддерживает ли определенный канал, группа Usenet или список рассылки UTF-8
перед тем, как использовать символы из <e>не-ASCII</e> диапазона UTF-8.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Включение UTF-8 в Gentoo Linux</title>
<section>
<title>Поиск или создание локалей UTF-8</title>
<body>

<p>
Теперь, когда вы поняли основы Юникода, вы готовы начать использование UTF-8 в
вашей системе.
</p>

<p>
Главным требованием для UTF-8 является наличие установленной библиотеки glibc с
поддержкой национального языка. При этом рекомендуется использовать файл
<path>/etc/locale.gen</path>. Описание использования этого файла, однако, выходит
за рамки данного документа. Его использование описано в <uri
link="/doc/ru/guide-localization.xml#doc_chap3_sect3">Руководстве по локализации
Gentoo</uri>.
</p>

<p>
Далее, нужно определить, доступна ли нам локаль UTF-8 для нашего языка или
придётся её создать.
</p>

<pre caption="Поиск существующей локали UTF-8">
<comment>(Замените "ru_RU" своим регионом)</comment>
# <i>locale -a | grep 'ru_RU'</i>
ru_RU
ru_RU.UTF-8
</pre>


<p>
На выходе этой команды мы должны получить хотя бы одну строку, содержащую
суффикс <c>.UTF-8</c>. Если таковых нет, то нам придётся создать локаль,
совместимую с UTF-8.
</p>

<note>
Запускайте следующую команду, если у вас нет UTF-8 локали для вашего языка.
</note>

<pre caption="Создание локали UTF-8">
<comment>(Замените "ru_RU" своим регионом)</comment>
# <i>localedef -i ru_RU -f UTF-8 ru_RU.UTF-8</i>
</pre>

<p>
Другим способом включить локаль UTF-8 является добавление её в файл
<path>/etc/locale.gen</path> и генерация нужных локалей командой
<c>locale-gen</c>.
</p>

<pre caption="Одна из строк в /etc/locale.gen">
ru_RU.UTF-8/UTF-8
</pre>

</body>
</section>
<section>
<title>Настройка локали</title>
<body>

<p>
Есть одна переменная среды, которую необходимо установить, чтобы использовать
UTF-8 локали: <c>LC_CTYPE</c> (или, опционально, переменную <c>LANG</c>, если
вы хотите заодно изменить и системный язык). Есть множество способов сделать это. 
Некоторые люди предпочитают использовать UTF-8 только для определенного 
пользователя, поэтому они устанавливают эту переменную в своём <path>~/.profile</path> 
(если используется <c>/bin/sh</c>), <path>~/.bash_profile</path> или
<path>~/.bashrc</path> (если используется <c>/bin/bash</c>). Большее количество
информации, а также наилучшие способы локализации можно найти в нашем
<uri link="/doc/en/guide-localization.xml">Гайде по Локализации</uri>.
</p>

<p>
Другие предпочитают установить локаль глобально. Есть по крайней один весомый
аргумент в пользу этого подхода &mdash; при использовании
<path>/etc/init.d/xdm</path>, так как сценарии инициализации запускают
диспетчер окон до того, как будут загружены конфигурационные файлы командной
оболочки.
</p>

<p>
При установке глобальной локали должен быть использован файл
<path>/etc/env.d/02locale</path>. Он должен выглядеть следующим образом:
</p>

<pre caption="Вид /etc/env.d/02locale">
<comment>(Как и всегда, замените "ru_RU.UTF-8" вашей локалью)</comment>
LANG="ru_RU.UTF-8"
</pre>

<note>
Вы можете также указывать <c>LC_CTYPE</c> вместо <c>LANG</c>. 
За дополнительными сведениями о категориях, затронутых использованием
<c>LC_CTYPE</c>, пожалуйста, обращайтесь к <uri
link="http://www.gnu.org/software/libc/manual/html_node/Locale-Categories.html#Locale-Categories">странице
локалей GNU</uri>.
</note>

<p>
Далее следует обновить среду.
</p>

<pre caption="Обновление среды">
# <i>env-update</i>
>>> Regenerating /etc/ld.so.cache...
 * Caching service dependencies ...
# <i>source /etc/profile</i>
</pre>

<p>
Теперь запустите <c>locale</c> без аргументов, чтобы увидеть, что у вас верные
переменные среды:
</p>

<pre caption="Проверка новой применённой локали">
# <i>locale</i>
LANG=ru_RU.UTF-8
LC_CTYPE="ru_RU.UTF-8"
LC_NUMERIC="ru_RU.UTF-8"
LC_TIME="ru_RU.UTF-8"
LC_COLLATE="ru_RU.UTF-8"
LC_MONETARY="ru_RU.UTF-8"
LC_MESSAGES="ru_RU.UTF-8"
LC_PAPER="ru_RU.UTF-8"
LC_NAME="ru_RU.UTF-8"
LC_ADDRESS="ru_RU.UTF-8"
LC_TELEPHONE="ru_RU.UTF-8"
LC_MEASUREMENT="ru_RU.UTF-8"
LC_IDENTIFICATION="ru_RU.UTF-8"
LC_ALL=
</pre>

<p>
Вот и всё. Теперь вы используете локаль UTF-8, и следующим этапом является
настройка повседневно используемых вами приложений.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Поддержка приложениями</title>
<section>
<body>

<p>
Пока Юникод делает первые шаги в мире программного обеспечения, и многобайтовые
кодировки еще не включены в языки программирования, наподобие C, и множество
повседневно используемых программ. Даже сейчас некоторые программы не
способны работать с UTF-8 как надо. К счастью, таких не так много!
</p>

</body>
</section>
<section>
<title>Имена файлов, NTFS и FAT</title>
<body>

<p>
В в конфигурационном меню ядра Linux есть множество параметров NLS, но главное
&mdash; не паниковать! В большинстве случаев всё, что вам нужно &mdash; включить
поддержку UTF-8 NLS в ваше ядро и изменить NLS по умолчанию на utf8.
</p>

<pre caption="Конфигурация ядра для UTF-8 NLS">
File Systems --&gt;
  Native Language Support --&gt;
    (utf8) Default NLS Option
    &lt;*&gt; NLS UTF8
    <comment>(также &lt;*&gt; для других кодировок, используемых в ФС FAT или Joilet CD-ROM)</comment>
</pre>

<p>
Если вы планируете монтировать разделы NTFS, то вам понадобиться указать
параметр при монтировании <c>nls=</c>. Если вы будете монтировать разделы FAT,
вам понадобится указать при монтировании параметр <c>codepage=</c>. Также вы
можете установить для FAT кодовую страницу по умолчанию при конфигурации ядра.
Помните, что параметр <c>codepage</c>, указываемый при монтировании, будет
иметь приоритет над настройками ядра.
</p>

<pre caption="Настройки FAT при конфигурировании ядра">
File Systems --&gt;
  DOS/FAT/NT Filesystems  --&gt;
    (866) Default codepage for fat
</pre>

<p>
Не устанавливайте <c>Default iocharset for fat</c> в UTF-8, так как это не
рекомендуется. Вместо этого укажите параметр utf8=true при монтировании раздела
FAT. Для более детальной информации, смотрите <c>man mount</c> и документацию
по ядру <path>/usr/src/linux/Documentation/filesystems/vfat.txt</path>.
</p>

<p>
Чтобы сменить кодировку имен файлов, используйте <c>app-text/convmv</c>.
</p>

<pre caption="Пример использования convmv">
# <i>emerge --ask app-text/convmv</i>
<comment>(Формат команды)</comment>
# <i>convmv -f &lt;current-encoding&gt; -t utf-8 &lt;filename&gt;</i>
<comment>(Замените koi8-r кодировкой, с которой хотите конвертировать)</comment>
# <i>convmv -f koi8-r -t utf-8 filename</i>
</pre>

<p>
Для изменения <e>содержимого</e> файлов, используйте утилиту <c>iconv</c>,
поставляемую вместе с <c>glibc</c>:
</p>

<pre caption="Пример использования iconv">
<comment>(Замените koi8-r кодировкой, с которой хотите конвертировать)</comment>
<comment>(Проверка верности вывода)</comment>
# <i>iconv -f koi8-r -t utf-8 filename</i>
<comment>(Конвертация файла, вы должны указать другое имя файла)</comment>
# <i>iconv -f koi8-r -t utf-8 filename > newfile</i>
</pre>

<p>
Также для этой цели может быть использована утилита <c>app-text/recode</c>.
</p>

</body>
</section>
<section>
<title>Системная консоль</title>
<body>

<impo>
Вам необходим >=sys-apps/baselayout-1.11.9 для поддержки Юникода в консоли.
</impo>

<p>
Для включения UTF-8 в консоли вы должны отредактировать
<path>/etc/rc.conf</path> и установить переменную <c>UNICODE="yes"</c>. Также
прочтите комментарии в этом файле &mdash; важно, чтобы в системе были шрифты с
нужным диапазоном символов, если вы хотите выжать из Юникода всё. Чтобы это
сработало, удостоверьтесь, что вы правильно создали локаль Unicode, как
описано в <uri link="#doc_chap1">главе 1</uri>.
</p>

<p>
В файле <path>/etc/conf.d/keymaps</path> переменной <c>KEYMAP</c> должна
соответствовать раскладка Unicode.
</p>

<pre caption="Пример файла /etc/conf.d/keymaps">
<comment>(Замените "ru4" на вашу любимую раскладку)</comment>
<comment>(Для русского языка нужен ключ -u &mdash; прим. переводчика)</comment>
KEYMAP="-u ru4"
<comment>(Подмена кодировки для русского языка &mdash; прим. переводчика)</comment>
DUMPKEYS_CHARSET="koi8-r"
</pre>

<impo>
Помните, что для правильного отображения вам понадобятся шрифты с поддержкой
Юникода. Подробнее смотрите раздел <uri link="#fonts">X11 и шрифты</uri> этого
руководства.
</impo>

<!--BEGIN Отсебятина-->
<p>
А теперь выберем подходящий шрифт, поддерживающий Юникод.
</p>

<pre caption="Файл /etc/conf.d/consolefont">
<comment>(Отредактируйте переменную CONSOLEFONT)</comment>
CONSOLEFONT="ter-k14n" <comment># шрифт из пакета terminus-font)</comment>
</pre>
<!--END Отсебятина-->


</body>
</section>
<section>
<title>ncurses и slang</title>
<body>

<note>
Если вы не устанавливали или не использует slang, не принимайте во внимание
упоминания о нём в этом разделе.
</note>

<p>
Будет хорошим решением добавить <c>unicode</c> к глобальным USE-флагам в файле
<path>/etc/portage/make.conf</path>, а затем при необходимости пересобрать
<c>sys-libs/ncurses</c> и <c>sys-libs/slang</c>. Portage это сделает
автоматически при обновлении системы:
</p>

<pre caption="Обновление системы">
# <i>emerge --update --deep --newuse world</i>
</pre>

<p>
Также понадобится пересобрать пакеты, зависящие от них, раз изменения USE
вступили в силу. Используемая утилита (<c>revdep-rebuild</c>) входит в пакет
<c>gentoolkit</c>.
</p>

<pre caption="Пересборка программ, скомпонованных с ncurses или slang">
# <i>revdep-rebuild --soname libncurses.so.5</i>
# <i>revdep-rebuild --soname libslang.so.1</i>
</pre>

</body>
</section>
<section>
<title>KDE, GNOME и Xfce</title>
<body>

<p>
Все основные графические оболочки полностью совместимы с Юникодом и не требуют
дополнительной настройки, кроме той, что описана в этом документе. Все это
благодаря тому, графические библиотеки (Qt и GTK+2) совместимы с UTF-8.
Следовательно, все приложения, работающие на основе этих библиотек, также
должны поддерживать UTF-8 без дополнительных настроек.
</p>

<p>
Исключением в этом правиле является Xlib и GTK+1. GTK+1 требует iso-10646-1
FontSpec в ~/.gtkrc, например <c>-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1</c>.
Также приложения, использующие Xlib или Xaw, нуждаются в подобной FontSpec,
иначе они не буду работать.
</p>

<note>
Если у вас установлен Центр управления gnome1, используйте его. Воспользуйтесь
любым из шрифтов семейства iso10646-1.
</note>

<pre caption="Пример ~/.gtkrc (для GTK+1), определяющий Юникод-совместимый
шрифт">
style "user-font"
{
    fontset="-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1"
}
widget_class "*" style "user-font"
</pre>

<p>
Если приложение одинаково поддерживает Qt и GTK+2, то обычно GTK+2 GUI
выдает лучшие результаты при работе с Юникодом.
</p>

</body>
</section>
<section>
<title>X11 и шрифты</title>
<body>

<p>
Шрифты TrueType обычно совместимы с Юникодом, и большинство шрифтов,
поставляемых с Xorg, имеют великолепную поддержку кодировок, хотя не все глифы
Юникода могут быть отображены для конкретного шрифта. Чтобы собрать шрифты с
поддержкой Восточноазиатских алфавитов (включающие набор Bitstream Vera) для
X-сервера, добавьте USE-флаг <c>cjk</c>. Много приложений используют этот
флаг, поэтому неплохо бы внести его как постоянный флаг.
</p>

<p>
Также несколько пакетов шрифтов в Portage совместимы с Юникодом.
</p>

<pre caption="Необязательно: установка некоторых Юникод-совместимых
шрифтов">
# <i>emerge terminus-font intlfonts freefonts corefonts</i>
</pre>

</body>
</section>
<section>
<title>Диспетчеры окон и терминальные эмуляторы</title>
<body>

<p>
Диспетчеры окон, не использующие GTK или Qt, обычно очень хорошо поддерживают
Юникод, так как чаще всего для отображения шрифтов используют библиотеку Xft.
Если ваш диспетчер окон не использует Xft, то вы все еще можете использовать
FontSpec, указанный в предыдущем разделе в качестве шрифта Юникода.
</p>

<p>
Эмуляторы терминала, использующие Xft, в большинстве случаев поддерживают
Юникод. Кроме Konsole и gnome-terminal, лучшим выбором в Portage будет
<c>x11-terms/rxvt-unicode</c>, <c>x11-terms/terminal</c>,
<c>gnustep-apps/terminal</c>, <c>x11-terms/mlterm</c> или чистый
<c>x11-terms/xterm</c>, собранный с USE-флагом <c>unicode</c> и запускаемый
как <c>uxterm</c>. <c>app-misc/screen</c> тоже поддерживает UTF-8, если
запускается с параметром <c>screen -U</c>, или внесите следующее в файл
<path>~/.screenrc</path>:
</p>

<pre caption="~/.screenrc с UTF-8">
defutf8 on
</pre>

</body>
</section>
<section>
<title>Vim, Emacs, Xemacs и Nano</title>
<body>

<p>
Vim полностью поддерживает UTF-8 и к тому же автоматически определяет файлы с
UTF-8. Для более детальной информации используйте в Vim <c>:help mbyte.txt</c>.
</p>

<p>
Emacs версии 23 и Xemacs версии 21.5 имеют полную поддержку UTF-8. Emacs 24
также будет поддерживать редактирование текста в обоих направлениях.
</p>

<p>
Nano полностью поддерживает UTF-8 начиная с версии 1.3.6.
</p>

</body>
</section>
<section>
<title>Командные оболочки</title>
<body>

<p>
На данный момент <c>bash</c> полностью поддерживает Юникод через
библиотеку GNU readline. Z Shell (<c>zsh</c>) поддерживает 
Unicode при использвании USE-флага <c>unicode</c>.
</p>

<p>
Оболочки C, <c>tcsh</c> и <c>ksh</c> не поддерживают UTF-8.
</p>

</body>
</section>
<section>
<title>Irssi</title>
<body>

<p>
Irssi полностью поддерживает UTF-8, хотя для этого требуется дополнительная
настройка пользователем.
</p>

<pre caption="Включение UTF-8 в Irssi">
/set term_charset UTF-8
</pre>

<p>
Для каналов, где не-ASCII символы чаще всего передаются в не-UTF-8 кодировках,
может пригодиться команда <c>/recode</c> для перекодировки символов. Наберите
<c>/help recode</c> для большей информации.
</p>

</body>
</section>
<section>
<title>Mutt</title>
<body>

<p>
Почтовый агент Mutt очень хорошо справляется с Юникодом. Чтобы использовать
UTF-8 для Mutt, вам нет необходимости что-либо добавлять в конфигурационные
файлы. Mutt будет работать с Юникодом без модификации, при условии, что все ваши
конфигурационные файлы (включая подпись) сохранены в UTF-8.
</p>

<note>
Вы всё ещё можете видеть знаки вопроса при чтении почты с помощью Mutt. Это
случается из-за того, что некоторые люди используют почтовые клиенты, не
устанавливающие используемую кодировку письма. Вы ничего больше не можете
сделать, кроме как попросить их правильно настроить свои клиенты.
</note>

<p>
См. <uri link="http://wiki.mutt.org/index.cgi?MuttFaq/Charset">Mutt Wiki</uri>
для большей информации.
</p>

</body>
</section>
<section>
<title>Man</title>
<body>

<p>
Man-страницы являются неотъемлемой частью любой системы Linux. Чтобы
удостовериться, что все страницы отображаются верно, отредактируйте
<path>/etc/man.conf</path> и замените следующую строку.
</p>

<pre caption="Изменения man.conf для поддержки Юникода">
<comment>(Это старая строка)</comment>
NROFF           /usr/bin/nroff -Tascii -c -mandoc
<comment>(Замените ее этой)</comment>
NROFF           /usr/bin/nroff -mandoc -c
</pre>

</body>
</section>
<section>
<title>elinks и links</title>
<body>

<p>
Это самые популярные текстовые браузеры, и вы узнаете, как установить
поддержку UTF-8 для них. В <c>elinks</c> и <c>links</c> есть два способа
сделать это &mdash; через меню Setup (Установки) браузера или отредактировав
конфигурационный файл. Чтобы настроить параметры в самом браузере, откройте
какой-нибудь сайт с помощью <c>elinks</c> или <c>links</c> и нажмите
<c>Alt+S</c>. Вы попадете в меню настроек (Setup Menu), после чего выберите
параметры терминала (Terminal options), или нажмите <c>T</c>. Пролистайте
вниз и выберите последний параметр &mdash; <c>UTF-8 I/O</c>, нажав на Enter.
После сохраните и выйдите из меню. В <c>links</c> вы можете сделать то же
самое, нажав <c>Alt+S</c>, а затем <c>S</c> для сохранения. Пример
конфигурационного файла показан ниже.
</p>

<pre caption="Включение UTF-8 в elinks/links">
<comment>(Для elinks добавьте в /etc/elinks/elinks.conf или ~/.elinks/elinks.conf следующую строку)</comment>
set terminal.linux.utf_8_io = 1

<comment>(Для links добавьте ~/.links/links.cfg следующую строку)</comment>
terminal "xterm" 0 1 0 us-ascii utf-8
</pre>

</body>
</section>
<section>
<title>Samba</title>
<body>

<p>
Samba &mdash; это набор программ, реализующих протокол SMB (Server Message
Block) для UNIX-систем (Mac, Linux и FreeBSD). Этот протокол также иногда
упоминается как Common Internet File System (CIFS). Samba содержит также
систему NetBIOS, используемую для предоставления доступа к файлам в
Windows-сетях.
</p>

<pre caption="Включение UTF-8 в Samba">
<comment>(Отредактируйте /etc/samba/smb.conf и добавьте следующее в раздел [global])</comment>
dos charset = 866
unix charset = UTF-8
display charset = UTF-8
</pre>


</body>
</section>
<section>
<title>Проверка работоспособности</title>
<body>

<p>
Есть множество сайтов, проверяющих UTF-8. <c>net-www/w3m</c>,
<c>net-www/links</c>, <c>net-www/elinks</c>, <c>net-www/lynx</c>, все
браузеры, основанные на движке Mozilla (включая Firefox) поддерживают UTF-8.
Konqueror и Opera тоже полностью поддерживают UTF-8.
</p>

<p>
При использовании текстовых браузеров, удостоверьтесь, что используете
совместимый с Юникодом терминал.
</p>

<p>
Если вы видите символы, отображаемые как квадратики с буквами или цифрами
внутри, то это значит, что в ваших шрифтах нет соответствующего глифа для
символа. Вместо этого, они отображают квадрат с шестнадцатиричным кодом символа
UTF-8.
</p>

<ul>
  <li>
    <uri link="http://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html">Тестовая
    страница W3C с UTF-8</uri>
  </li>
  <li>
    <uri link="http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm">
    Тестовая страница Франкфуртского университета</uri>
  </li>
</ul>

</body>
</section>
<section>
<title>Ввод символов</title>
<body>

<!--<note>
Пользователи с русской раскладкой могут пропустить чтение данного раздела, так
как в dead keys нет особой необходимости &mdash; все символы доступны при
непосредственном наборе.
</note>-->

<p>
<e>Dead keys</e> могут быть использованы для ввода символов, не отображенных на
клавиатуре, в X-сервере. Для этого нужно, удерживая правый Alt (в некоторых
странах он называется AltGr), нажать на дополнительную неалфавитную клавишу с
символом, не являющимся буквой или цифрой (модификатор), а затем нажать на
необходимую букву. Dead key изменит ее. Ввод может быть изменен также с помощью
Shift при нажатых AltGr и модификаторе.
</p>

<p>
Чтобы включить dead keys в X, нужно иметь раскладку, поддерживающую их.
Большинство европейских раскладок уже имеют dead keys по умолчанию. Тем не
менее, они не являются настоящими североамериканскими раскладками. Хотя
существуют незначительные отличия между различными раскладками, простейшим
решением будет использование раскладки &laquo;en_US&raquo; вместо просто
&laquo;us&raquo;. Раскладка указывается в <path>/etc/X11/xorg.conf</path>:
</p>

<pre caption="Пример раздела /etc/X11/xorg.conf">
Section "InputDevice"
    Identifier "Keyboard0"
    Driver     "kbd"
    Option     "XkbLayout" "en_US" <comment># Вместо просто "us"</comment>
    <comment>(Другие параметры Xkb)</comment>
EndSection
</pre>

<note>
Эти изменения нужны только в том случае, если вы используете североамериканскую
раскладку либо любую другую, в которой dead keys не работают. Европейским
пользователям нет нужны что-либо менять.
</note>

<p>
Изменения вступят в силу только при перезагрузке X-сервера. Чтобы изменения
вступили немедленно, используйте утилиту <c>setxkbmap</c>, например,
<c>setxkbmap en_US</c>.
</p>

<p>
Рассмотрим действия dead keys на примерах. Хотя результат зависит от текущей
локали, сам принцип действия должен работать в нее зависимости от нее. Примеры
содержат символы Юникода, так что убедитесь, что ваш браузер корректно
отображает их.
</p>

<p>
При нажатии единожды нажатых AltGr и [, а затем нажатой &laquo;a&raquo; мы
получаем &laquo;a&raquo;. При единожды нажатых AltGr и [, а затем нажатой
&laquo;e&raquo;, получаем &laquo;e&raquo;. Нажав на AltGr и ;, мы получим
&laquo;a&raquo;, а нажав AltGr и ;, а затем на &laquo;e&raquo;, получаем
&laquo;e&raquo;.
</p>

<p>
Нажав на AltGr, Shift и [, отпустив их и нажав &laquo;a&raquo;, мы получим
скандинавскую &laquo;a&raquo;. Также при нажатии AltGr, Shift и [,
отпускании <e>только</e> [ и повторном ее нажатии мы получим только
&laquo;?&raquo;. Хотя этот символ (U+02DA) и похож на символ градуса (U+00B0),
на самом деле он им не является. Подобным образом работают и другие
модификаторы &mdash; нажатие AltGr and [, отпускание [ и повторное нажатие
выводят &laquo;?&raquo;.
</p>

<p>
AltGr может быть использована вместе с одной из алфавитных клавиш.
Например, комбинация AltGr и m выводит греческую строчную букву мю:
&laquo;ч&raquo;. AltGr и s выводит немецкий символ эсцет<!--так он
называется-->: &laquo;?&raquo;. Множество европейцев захотят установить
сочетание AltGr и 4 (или E в зависимости от клавиатурный таблицы), выводящее
символ Евро, &laquo;?&raquo; (так как на их клавиатурах он нанесен).
</p>

</body>
</section>
<section>
<title>Ссылки</title>
<body>

<ul>
  <li>
    <uri link="http://ru.wikipedia.org/wiki/Юникод">Статья в Википедии о
    Юникоде</uri> (русск.)
  </li>
  <li>
    <uri link="http://en.wikipedia.org/wiki/UTF-8">Статья в Википедии об
    UTF-8</uri> (англ.)
  </li>
  <li><uri link="http://www.unicode.org">Unicode.org</uri></li>
  <li><uri link="http://www.utf-8.com">UTF-8.com</uri></li>
  <li><uri link="http://www.ietf.org/rfc/rfc3629.txt">RFC 3629</uri></li>
  <li><uri link="http://www.ietf.org/rfc/rfc2277.txt">RFC 2277</uri></li>
  <li>
    <uri link="http://www.tbray.org/ongoing/When/200x/2003/04/26/UTF">Символы
    против байтов</uri>
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Известные источники проблем</title>
<section>
<title>Системные конфигурационные файлы (в /etc)</title>
<body>

<p>
Большинство системных конфигурационных файлов, например <path>/etc/fstab</path>, 
не поддерживают UTF-8. Рекомендуется придерживаться набора символов ASCII при
работе с этими файлами.
</p>

</body>
</section>
</chapter>

</guide>

<!-- *$Localization:
target-language: Russian
target-date: 2012-07-24
source-cvs-revision: 1.56
translated-by: Azamat H. Hackimov <azamat.hackimov@gmail.com>
revised-by: Vladimir Romanov (blueboar2@gmail.com)
edited-by: none

notes:
This guide is extended to explain Russian-specific issues and solutions.
This may be also useful for other languages.

en-GB is replaced with ru-RU, and 8859-1 with 866 for convenience.
-->

