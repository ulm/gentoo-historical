<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ko/Attic/2.6-koutput-user.xml,v 1.1 2004/11/04 11:45:14 neysx Exp $ -->

<guide link="/doc/ko/2.6-koutput-user.xml">

<title>2.6 커널과 "koutput"</title>
<author title="개발">
  <mail link="latexer@gentoo.org">Peter Johanson</mail>
</author>
<author title="편집">
  <mail link="antifa@gentoo.org">Ken Nowack</mail>
</author>
<author title="편집">
  <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>
<author title="번역">
  <mail link="mithrandir@electrang.net">박지인</mail>
</author>

<abstract>
이 가이드는 젠투의 새로운 "koutput" 을 사용해서 2.6커널과 커널모듈을 어떻게 다루는
지에 대한 방법을 설명한다.
</abstract>

<license/>

<version>1.2</version>
<date>2004년 7월 28일</date>

<chapter>
<title>Overview</title>
<section>
<body>

<p>
커널 2.6이 제공하는 많은 기능들 중에서, 커널 빌드 기반 구조 흑은 "kbuild system" 
가 있다. 기능들 중에서 추가된, 2.6 커널은 이제 커널에 의해 생성된 모든 파일들을 
임의의 독립된 위치에 내보낼 수 있다. 이것은 예전 방식에 비해서 몇가지 장점을 가지고 있다.
</p>

<ul>
  <li>
임의의 사용자는 똑같은 소스를 사용해서 커널을 빌드할 수 있고, 컴파일 결과물을 자신의 홈디렉토리로
내보낼 수 있다.
  </li>
  <li>
커널은 여러가지 타겟 아키텍쳐를 지정해서 빌드할 수 있고, 각 아키텍쳐별로 빌드한 파일들을 
잃지 않을 수 있다.
  </li>
  <li>
<path>/usr</path>을 읽기 전용으로 마운트하고도 커널을 다시 생성하거나, 재설정하거나, 
기타등등 을 할 수 있다.
  </li>
  <li>
외부 모듈이 <path>/usr/src/linux</path>에 대한 쓰기권한이 없이도 빌드할 수 있다.
  </li>
</ul>

<p>
이 마지막 것이 가장 중요한데, 예전에는 포티지가 2.6 커널 소스 트리에 대한 
외부모듈을 빌드하기 위해서 
실제 파일 시스템에 위치한 디렉토리에 임시의 쓰기권한을 필요로 했습니다. 만약 2.6커널에 대해
koutput을 <b>선택 안한다면</b> 거의 모든 커널 모듈 빌드가 이것때문에 실패할 것이다
(주: 포티지를 이용할 경우). 포티지에 커널모듈 빌드동안 <path>/usr/src/linux</path>에 대한 
쓰기 권한을 주려면, config-kernel을 이용할 수 있다:
</p>

<note>
모든 config-kernel의 기능이 이 guide에 명시되어 있지는 않다. 나머지 정보들은
<b>man config-kernel</b>을 참조하라.
</note>

<pre caption="/usr/src/linux 에 쓰기권한 주기" >
# <i>config-kernel --allow-writable=yes</i>
</pre>

<p>
나중에 언제라도 config-kernel을 사용해서 이 설정을 뒤집을 수 있다.
</p>

<pre caption="/usr/src/linux 에서 쓰기권한 빼기">
# <i>config-kernel --allow-writable=no</i>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>장점들</title>
<section>
<body>

<p>
당신 자신에게 물어볼 수도 있다, "왜 내가 방해 받아야 하지?" 이 기능을 구현하게 된
문제점은 바로 nvidia-kernel 이나 hostap-driver 같은  커널 모듈 ebuild들 때문이다.
이 ebuild들은 컴파일할 때 커널 빌드 시스셈을 필요로 하는데, 그것은 <path>/usr/src/linux</path>
에 대한 갱신을 필요로 하고, sandbox를 위반해서 실패하게 된다.
</p>

<note>
젠투의 <b>sandbox</b>는 포티지가 마지막 merge 단계 전까지 실제 파일시스템을 건드리지 
않도록 하는 시스템이다.
</note>

<p>
몇몇 의존적인 단계가 이 문제를 해결하기위해 있어왔다. 줄이자면 커널 커널 빌드는 컴파일될때 
그 컴파일 결과 파일들을 특정한 다른 위치로 내보내야만 하고, 나중에 외부 모듈 빌드도
<b>마찬가지로</b>이렇게 임시 빌드 위치의 어떠한 하위 디렉토리로 내보내야 한다.
모듈컴파일 결과물을 허가된 디렉토리로 내보낼 수 있으면, 이러한 지저분한 sandbox 에러는 해결된다.
</p>

</body>
</section>
</chapter>
<chapter>
<title>koutput 활성화하기</title>
<section>
<body>

<p>
2.6커널은 두가지 환경변수 <c>KBUILD_OUTPUT</c>과 <c>O</c>를 참조해서 파일을 어디로 
내보낼지 결정한다. <c>KBUILD_OUTPUT</c>은 반드시 환경변수로 설정이 되어 있어야하고, 
커맨드 라인에서 O로 덮어 쓸 수 있다.
</p>

<pre caption="수동으로 출력 디렉토리 지정하기">
# <i>cd /usr/src/linux></i>
# <i>export KBUILD_OUTPUT="/var/tmp/kernel-output/2.6.4"</i>
# <i>mkdir /var/tmp/kernel-output/2.6.4</i>
<comment>내보낼 디렉토리를 지정하고, 그 디렉토리는 존재해야 한다.</comment>
# <i>make menuconfig</i>
<comment>생성된 .config 파일은 /var/tmp/kernel-output/2.6.4에 있다.</comment>
# <i>make O=/home/joe/kernels/2.6.4 menuconfig</i>
<comment>이번에 생성된 .config파일은 /home/joe/kernels/2.6.4에 있다. </comment>
</pre>

<p>
젠투의 도구 <b>config-kernel</b>은 이러한 과정을 자동적으로 할 수 있는 방법을 제공한다.
config-kernel을 사용하면, 포티지가 생성한 파일들을 설치할 디렉토리를 지정할 수 있다.
</p>

<pre caption="config-kernel 을 이용해서 환경 설정하기">
# <i>config-kernel --output-dir=/home/joe/kernels</i>
</pre>

<p>
위의 명령은 모든 커널이 그 출력들을 기본적으로 <path>/home/joe/kernels/KV</path> 로 
내보내도록 설정하다. 여기서 <b>KV</b>는 커널 버전이다. 출력 경로를 젠투 기본인 
<path>/var/tmp/kernel-output/</path>로 설정하려면 다음과 같이 하면 된다:
</p>

<pre caption="config-kernel 을 이용해서 환경 설정하기">
# <i>config-kernel --output-dir=default</i>
</pre>

<p>
사용자는 또한 config-kernel을 이용해서 이미 설치된 2.6커널을 새로운 방법으로 
바꿀 수 있다. <c>make mrproper</c>가 이 과정에서 실행되야 하기 때문에,
이미 생성된 파일들을 잃어버릴 수 있는 점을 명심해야 한다.
</p>

<pre caption="현재 커널을 변환하기">
# <i>config-kernel --make-koutput=/usr/src/linux-2.6.3</i>
</pre>

<p>
위의 명령은 <path>/usr/src/linux-2.6.3</path>에 위치한 커널을 변환해서 출력물을 다른 디렉토리로
내 놓도록 한다. 만약 <c>--output-dir=/some/path</c> 로 출력 디렉토리가 설정되어 있었다면
그 prefix 를 사용한다. 아니라면 젠투 기본인 <path>/var/tmp/kernel-output/KV</path>가 사용될 것이다.
</p>

</body>
</section>
</chapter>
<chapter>
<title>영향</title>
<section>
<body>

<p>
별도의 출력 디렉토리를 사용하도록 설정한 후엔, 커널을 설정하고 설치할 때 예고없이 변화가 커질 것이다.
주의를 기울여야 할 위치가 바뀌는 몇가지 중요한 파일이 있다. 먼저 살펴볼 것이, .config 파일. 
그리고 커널 컴파일 후 생성되는 bzImage 파일아다. 아래 표는 원래 위치와 새로운 위치를 나타낸다.
아래 표는 출력 디렉토리를 젠투 기본인 <path>/var/tmp/kernel-output/2.6.4</path>라고 가정한다.
</p>

<table>
<tr>
  <th>Old file location</th>
  <th>New file location</th>
</tr>
<tr>
  <ti>/usr/src/linux/.config</ti>
  <ti>/var/tmp/kernel-output/2.6.4/.config</ti>
</tr>
<tr>
  <ti>/usr/src/linux/arch/i386/boot/bzImage</ti>
  <ti>/var/tmp/kernel-output/2.6.4/arch/i386/boot/bzImage</ti>
</tr>
</table>

<p>
이 위치의 변화는 중요하다. 두 과정이 영향을 받게 되는데, 커널 소스를 업데이트 할때 
커널 설정 파일을 적당한 위치에 복사하는 것과, 컴파일된 bzImage를 <path>/boot</path>로
복사 할 때다. 특정한 경우, 당신의 .config 파일을 복사할때, 당신의 원래 커널 출력 위치에서 
목표 커널 출력 디렉토리로 복사해야 한 다는 것을 기억하는 것이 중요하다. koutput 을 이용할 때
커널 업그레이드가 어떻게 이루어지는지 보기 위해 예를 들겠다. 다음 예는 vanilla-sources-2.6.4 에서
vanilla-sources-2.6.5 로 옮기는 과정이다.
</p>

<note>
여기서 우리는 출력 prefix가 <path>/var/tmp/kernel-output</path>이라고 가정하고,
두 커널이 다 설치 되어있다고 하자.
</note>

<pre caption="koutput을 이용하면서 커널 업그레이드">
# <i>cp /var/tmp/kernel-output/2.6.4/.config /var/tmp/kernel-output/2.6.5/</i>
<comment>쓰던 config 를 새 커널 디렉토리로 옮긴다.</comment>
# <i>config-kernel --set-symlink=2.6.5</i>
# <i>cd /usr/src/linux</i>
<comment>새 커널 소스 디렉토리로 이동</comment>
# <i>make oldconfig</i>
# <i>make &amp;&amp; make modules_install</i>
<comment>새 커널을 컴파일</comment>
# <i>mount /boot</i>
# <i>cp /var/tmp/kernel-output/2.6.5/arch/i386/boot/bzImage /boot/</i>
# <i>umount /boot</i>
<comment>새 커널 이미지 설치</comment>
</pre>

<p>
커널 모듈 빌드를 새로운 시스템(주: koutput)에서 하기 위해서 
emerge 중에 원하는 커널 모듈 패키지를 보통처럼 하는 것 이상으로 특별히 더 해주어야 할 것은 없다.
이 문서를 쓸 때, 아직 새 시스템에 맞게 변환중이거나 아직 테스트 중인 것들이 남아있었다.
만약 안정버전의 커널 모듈이 실패(주 : emerge중에) 한다면, <b>~arch</b>버전의 것을 
먼저 시도해보라:
</p>

<pre>
# <i>ACCEPT_KEYWORDS='~x86' emerge foo</i>
<comment>위 명령은 테스트버전의 foo 패키지를 설치한다</comment>
</pre>

<p>
만약 이것도 실패한다면 <uri link="http://bugs.gentoo.org">http://bugs.gentoo.org</uri>
에 버그를 열면, 커널 모듈 ebuild가 새 시스템에 맞게 가능한한 빨리 고쳐질 것이다.
</p>

</body>
</section>
</chapter>
</guide>
