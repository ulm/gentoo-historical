<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ko/policy.xml,v 1.1 2004/11/04 11:45:14 neysx Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link =" /doc/ko/policy.xml">
<title>Gentoo Linux Development Policy</title>
<author title="원저자">Owen Stampflee</author> 
<author title="저자"><mail link="karltk@gentoo.org">Karl Trygve Kalleberg</mail></author> 
<author title="저자 및 편집자"><mail link="drobbins@gentoo.org">Daniel Robbins</mail></author> 
<author title="편집자"><mail link="seemant@gentoo.org">Seemant Kulleen</mail></author> 
<author title="편집자"><mail link="avenj@gentoo.org">Jon Portnoy</mail></author>
<author title="편집자"><mail link="vapier@gentoo.org">Mike Frysinger</mail></author>
<author title="편집자"><mail link="carl@gentoo.org">Carl Anderson</mail></author>
<author title="편집자"><mail link="liquidx@gentoo.org">Alastaire Tse</mail></author>
<author title="편집자"><mail link="swift@gentoo.org">Sven Vermeulen</mail></author>
<author title="번역자">
  <mail link="mithrandir@electrang.net">박지인</mail>
</author>

<abstract>
	이 가이드는 젠투 리눅스 개발 방침에 대한 레퍼런스로 쓰여진 것이다. 
	이 가이드는 새로운 개발절차를 반영하기 위해 주기적으로 갱신될 것이다.
</abstract>

<license/>

<version>1.0.9</version>
<date>2004년 9월 9일</date>

<chapter>
<title>General guidelines</title>
<section>
<body>
	<p>여기 몇가지 일반적인 개발 지침이 있다.</p>
<ul>

	<li>항상 고친 것을 repoman으로 검사하라. cvs commit 대신 repoman commit 을 사용하라.</li>

	<li>만약 현재버전의 패키지가 깨졌거나 빌드/설치 과정에서 문제가 있다면 다른 배포판들은 어떻게 하는지 보라.
		 <ul>
<li><uri>http://cvs.mandrakesoft.com/cgi-bin/cvsweb.cgi/SPECS/</uri></li>
<li><uri>http://www.debian.org/distrib/packages</uri></li> </ul> </li>
   
<li>당신의 패키지가 완성되고 마스크가 풀렸다면, 그것은 최종 사용자에게는 '동작함'
	을 뜻한다. 설치된 결과물을 가지고 동작 하도록 하기 위해 미세 조정 하는것은 선택사항이어야지, 
	필수사항이 되어서는 안된다..
	그러므로 패키지를 만들때는 적절한 기본 설정을 가지고 설치되도록 해야한다.
</li>

<li>많은 선배 개발자들이 만들고 관리하는 온라인 문서들과 ebuild 에 대해 질문하는 것을 겁내지 말라.
	선배 개발자들과 직접 접촉해서 기술적이나 정책적인 사항에 대해 물어보라.</li>

<li>커밋할 때는 항상 주의하라. 당신이 커밋하는 것이 수천 수만명의 사용자들에게 나쁜 영향을 끼칠 수
있음을 기억하라. 만약 당신이 커밋 한 것이 어떤 문제를 발생시킨다면, 
그것들은 최대한 빨리 수정 되어야만 한다.</li>
<li>모든 패키지들은 반드시 metadata.xml를 포함하고 있어야 한다. 이 파일은 어떤 herd가 (그리고/혹은 어떤 개인 메인테이너가) 책임자인지에 대한 내용을 가지고 있다.</li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Specific guidelines</title>
<section>
<title>Copyright</title>
<body>
	<p>ebuild들 (그리고 문서들) 의 저작권은 반드시 Gentoo Technologies 에 속해야 한다. 개발자들은 자기 이름을 저작권에 명시해서는 안된다.
		자세한 정보는 <uri>http://www.gentoo.org/proj/en/devrel/copyright-assignment.xml</uri>를 참조하라.

</p>
</body>
</section>
<section>
<title>fPIC</title>
<body>
<p>
몇몇 아키텍쳐에서는, 공유 라이브러리가 반드시 -fPIC옵션을 사용해서 빌드 해야만 합니다. x86과 다른것에서는 -fPIC 없이 빌드가 되지만, 쓸데 없고, 성능에 문제가 생깁니다. 만약 -fPIC 옵션 없이 빌드되는 패키지를 보게 된다면, 라이브러리가 -FPIC옵션을 이용해서 빌드되도록 Makefile 을 패치하라. PIC에 대한 자세한 정보는 <uri>http://www.gentoo.org/proj/en/hardened/pic-internals.xml</uri>에서 볼 수 있다.
</p>
</body></section>
<section>
<title>Perl</title>
<body>

<p>
	새로운 펄 모듈은 다음중 한가지 이상의 조건에 충족될 때만 
	포티지에 추가 될 수 있다.
</p>

<ul>
	<li>어떤 패키지가 해당 모듈에 의존성을 가질 때</li>

	<li> <c>g-cpan</c> 에 의해서 다루어질 수 없을 때 </li>
	<li>해당 모듈이 현재 존재하는 ebuild에 기능을 더할 때</li>
	<li>해당 모듈이 응용 프로그램이나 도구들이나, 기타 다른것들은 제공할때 (단지 펄 모듈- .pm 파일 - 이상을 제공할 때</li>
</ul>

<p>
	최소한 한명 이상의 perl herders 가 당신의 추가를 승인 해야 한다.

</p>

</body>
</section>
</chapter>

<chapter>
<title>Ebuild policy</title>
<section>
<title>Naming policy</title>
<body>

	<p>Ebuild 파일이름 은 다음과 같이 4부분으로 나누어져 있다.</p>

<p><c>pkg-ver{_suf{#}}{-r#}.ebuild</c></p>

<note>중괄호 (<c>{}</c>) 는 선택적인 필드를 나타내며, 실제로 중괄호가 ebuild파일 이름에 나타나진 않는다
	<c>#</c> 는 0이 아닌 양수의 정수를 뜻한다.</note>

<p>
	첫번째 부분은 <c>pkg</c>, 영어 소문자, 숫자 0-9, 그리고 몇개의 하이픈(<c>-</c>), 밑줄(<c>_</c>), 더하기(<c>+</c>)로 이루어진 
	패키지 이름이다. 예를 들면: <c>util-linux</c>, 
	<c>sysklogd</c>, <c>glibc</c>등이다. 포티지에는 위의 룰을 따르지 않는 패키지들이 몇개 있지만,
	<e>당신이 만든 패키지</e>는 반드시 위의 룰을 따라야 한다.

</p>

<p>
	두번째 부분인, <c>ver</c>은 반드시 메인 소스 타볼의 버전과 같아야 하는 패키지의 버전번호이다.
	버전번호는 <c>1.2</c> or <c>4.5.2</c> 과 같이 점으로 구분 된 두 세개 (혹은 그 이상)의 
	숫자들로 이루어져 있고,  <c>1.4b</c> or <c>2.6h</c> 처럼 마지막 숫자 바로뒤에 
	알파벳이 하나 올 수 있다.
	패키지 버전은 패키지 이름과 하이픈으로 연결한다. 예를 들면:
	<c>foo-1.0</c>, <c>bar-2.4.6</c> 과 같다.

</p>

<p>
	세번째 부분인 <c>{_suf{#}}</c>는 선택적이며 다음중 하나의 접미사를 선택해서 사용할 수 있다.
	다음 목록의 순서는 아래로 갈수록 최근 버전임을 뜻한다.
</p>

<table>
 <tr><th>접미사</th><th>뜻</th></tr>
 <tr><ti><c>_alpha</c></ti><ti>알파 발표</ti></tr>

 <tr><ti><c>_beta</c></ti><ti>베타 발표</ti></tr>
 <tr><ti><c>_pre</c></ti><ti>발표전 버전</ti></tr>
 <tr><ti><c>_rc</c></ti><ti>발표 후보</ti></tr>
 <tr><ti>(none)</ti><ti>일반적인 발표</ti></tr>
 <tr><ti><c>_p</c></ti><ti>패치 레벨 (추가로 오는 숫자와 함께)</ti></tr>
</table>

<p> 
	이것들중 어떤 접미사든지 <c>linux-2.4.0_pre10</c> 처럼 0보다 큰 정수가 따라 올 수 있다. 
	동일한 버전번호를 가질 때, 접미사들은 다음과 같은 순서를 가진다. (낮은쪽이 오래됨): 
	<c>_alpha</c> &lt;
	<c>_beta</c> &lt; <c>_pre</c> &lt; <c>_rc</c> &lt; (no suffix) &lt;

	<c>_p</c>
</p>
<p>
	접미사까지 동일하다면, 따라오는 숫자로 버전을 비교한다. 숫자가 큰 쪽이 최신을 뜻한다.
	예를 들면: <c>foo-1.0_alpha4</c>
	은 <c>foo-1.0_alpha3</c> 보다 최근 버전이다.
</p>

<p>

	네번째 부분은 젠투 리눅스 전용의 리비전 번호 (<c>{-r#}</c>) 이다.
	이 부분은 접미사와 마찬가지로 선택 사항이다.
	<c>#</c> 는 0보다 큰 정수이다. 
	예를 들면, <c>package-4.5.3-r3</c>. 
</p>

<p>
	이 리비전 번호는 소스 타볼의 버전 번호와 독립적이며 사람들에게 젠투리눅스에서
	추가한(향상시킨) 패키지가 있음을 알리기 위해 사용한다. 최초의 ebuild 발표는
	<c>package-4.5.3</c> 처럼 리비전 번호가 없어야 하고 포티지는 이것을 리비전 번호 0으로 해석한다.
	그러므로 순서는 다음과 같다.
	<c>1.0</c> (최초 버전), <c>1.0-r1</c>, <c>1.0-r2</c>, 기타 등등. 

</p>

</body>
</section>

<section>
<title>Versioning and revision bumps</title>
<body>

<p>
	ebuild가 변경되고, 사용자가 업그레이드를 원할 때 
	젠투 리눅스 개발자에 의해 패키지 리비전 번호는 되어야 한다.
	대체로, ebuild가 수정되었고 그 수정된 ebuild로 설치하면 설치된 파일도 달라지지만,
	소스 타볼은 동일한 것을 사용 할 때의 경우가 이에 해당한다.
	만약 당신이 설치된 파일에 영향을 미치지 않는 내부적이고 문체적인 수정을 했다면
	리비전 번호를 올릴 이유가 없다. 이와 비슷하게, ebuild 에서 일부 사용자에게만 영향을 미치는 
	컴파일 오류를수정했다면, 역시 리비전 번호를 올릴 이유가 없다. 왜냐 하면 정상적으로 설치를 마친 
	사용자는 다시 설치를 할 필요가 없고, 컴파일 오류때문에 설치를 못한 사람은 해당 리비전에 해당하는 
	패키지가 설치 되지 않았기 때문이다. 또한 소수의 사용자만이 영향을 받고, 컴파일 시간이 길다면 
	리비전 버전올림을 하지 않는편이 좋다. 적절한 판단에 따라 행하라.
</p>

<impo>
	언제나 새로운 리비전의 ebuild를 만들었다면, ebuild 디렉토리에 함께 있는 
	<path>ChangeLog</path> 를 갱신하도록 하라. 
	Failing to do so is considered to be in very poor taste and may result in disciplinary action.

</impo>

<p>
	ebuild 들은 수정사항의 잃어버리지 않도록 이전 버전의 ebuild 를 기반으로 만들어저야 한다. 
	수정사항들은 그것이 무엇이고, 무엇을 위한 것인지를 설명하는 알맞는 주석을 ebuild 내에 
	포함해야 한다. 만약 당신이 수정사항에 익숙하지 않거나, 과연 그것이 아직 필요한 것인지 
	알 수 없다면, ebuild를 갱신해서는 안된다.
</p>

</body> 
</section> 

<section>
<title>Virtuals</title>
<body>

<p>
	포티지는 가상 패키지 라는 개념을 제공한다. 가상 패키지를 이용하면,
	특정한 분류/패키지 이름을 어떤 패키지로 할당하는 것이 가능하다.

</p>

<p>
	여기 가상 패키지를 사용하는 예제가 있다. 당신이 새로운 크론 패키지인 <c>foocron</c> 을 
	만들었다고 하자 젠투 리눅스는 현재 cron패키지를 원하는 것들은 <c>virtual/cron</c> 을 의존하도록 
	되어있다. 이것은 ebuild가 크론이 설치되어 있음을 확인 시킬 수 있도록 한다. 유져들은 마음에 드는 
	cron 패키지를 설치할 수 있다. 당신이 만든 <path>foocron-1.0.ebuild</path> 를 이 체제에 적용하려면
	ebuild에 다음 라인을 추가하라.
</p>

<pre>

PROVIDE="virtual/cron"
</pre>

<p>
	이제 <c>foocron-1.0</c> 이 설치 되었고, <c>virtual/cron</c> 패키지가
	등록 되었다. 만약 당신이 이전에 어떤 cron패키지도 설치 하지 않았었다면, 
	이제 <c>virtual/cron</c> 에 <e>의존하는</e> 어떤 패키지에 대해서도 의존성을
	만족하게 되었음을 뜻한다. 어떤 종류의 패키지에 대해서도 <c>PROVIDE</c> 값을 
	아무값이나 쓸 수 있음을 기억하라. 반드시 virtual/ 로 시작할 필요가 없다.
	하지만, <c>PROVIDE</c> 를 이용해서 이름이 바뀐 패키지를 다루려 하는것이 아니라면
	<e>반드시</e> <c>virual/</c> 분료를 사용해야만 한다. (패키지 이름이 바뀌면 업데이트에 혼란이 
	있기 때문에 가상으로 바뀌기 전 패키지를 제공하는 경우가 있다)

</p>

<p>
	두번째 컴퍼넌트 젠투 리눅스 virtuals 구현에 대한.
	<c>virtual/cron</c>를 만족하는 패키지가 설치되지 않았다면 어찌 될 것인가?
	어떻게 포티지가 <c>virtual/cron</c> 를 만족하는 "적절한" 패키지를 선택 할 것인가?
	포티지는 이 상황을 해결하기 위해a<path>/etc/make.profile</path> 에 있는 
	<path>virtuals</path> 라고 하는 가상 매핑 파일을 사용한다.  <path>virtuals</path> 을 열어보면,
	다음과 같은 내용을 찾아볼 수 있다.

</p>

<pre caption="virtuals 파일 예제">
virtual/lpr             net-print/cups
virtual/python          dev-lang/python
virtual/mta             net-mail/ssmtp
</pre>

<p>
	첫번째 라인에 의하면, <c>virtual/lpr</c> 에 의존하는 패키지가 있고  
	<c>virtual/lpr</c> 이 설치되지 않았고 <c>virtual/lpr</c> 패키지가 포티지 트리에 없다면, 
	<c>net-print/cups</c> 이 의존성을 위해 설치될 것이다. 
	<c>net-print/cups</c> 의 ebuild 는  <c>PROVIDE="virtual/lpr"</c> 라인을 가지고 있어서
	<c>virtual/lpr</c> 가 만족될 것이다.

</p>

<p>
	이제 개발자 지침이다. 만약 당신이 <c>foocron</c>패키지를 추가 한다면, 
	명백히 <c>virtual/cron</c> 에 의존하는 모든 패키지가 제대로 동작하기를 원할 것이다.
	<c>foobarosity</c> 라는 패키지가 <c>virtual/cron</c>에 의존 한다면, 
	당신은 마찬가지로, <c>virtual/cron</c> 가 <c>foobarosity</c> 이 필요로 하는 기능을 만족하게 될 것이다.

</p>

<p>
	새로운 가상 패키지를 만들기 전에, 반드시 내부 메일링 리스트에 해당 가상 패키지에 대한
	건의를 해보기 바란다. 새로운 가상 패키지가 널리 쓰이기 위해서 개발자들에게 알리는 것이 
	꼭 필요하다.
</p>

</body>
</section>

<section>
<title>CVS sources policy</title>
<body>

<p>
	CVS 개발 트리의 소스를 기반으로 한 ebuild를 만드는 데는 두가지 방법이 있다.
	첫번째는 전통적인 방법으로, 개발중인 CVS 트리의 스냅샷 타볼을 직접 만들고,
	이것을 공식적인 distfile 저장소에서 미러링 하고
	그것으로 CVS 스냅샷 ebuild를 만드는것이다. 이런류의 CVS ebuild들을 "CVS 스냅샷 ebuild" 
	라고 부르기로 하자.

</p> 

<p>
	또 다른 방법은, <path>cvs.eclass</path> 를 기초로, 실시간 CVS ebuild를 만드는 것이다.
	이런류의 ebuild는 바로바로 최근의 개발 트리 소스를 "fetch" 할때 CVS 저장소로부터 긁어와서
	소스가 최신을 유지하도록 한다. 이런류의 CVS ebuild들을 "'live' ebuilds"라고 부르기로 하자
</p>

<p>
	다음 문단은 CVS기반 ebuild들에 관한 정책을 설명하고 있다. 그러한 ebuild들을 포티지 트리에
	추가하는 데는 엄격한 규칙이 있음을 명심하라.
</p>

<p>
	스냅샷 cvs ebuild들은 "live" <path>cvs.eclass</path> cvs ebuild에 비해 훨씬 우선적이다.

</p> 

<p>
  	cvs 스냅샷이 프로그램의 적절한 동작을 위해 필요한 알려진 수정사항들을 포함하고 있거나
	cvs 버전의 어떤 소프트웨어 패키지가 릴리즈 버전보다 "잘 동작함" 이라고 알려져 있거나 혹은 
	증명 되었을때 스냅샹 cvs ebuild들을 추가할 수 있다.
</p>

<p>
	"Live" <path>cvs.eclass</path> ebuild들은 오직 개발자들이 편리하게 사용하기 위해서만 사용할
	수 있다. 그리고 <c>~[arch]</c> 키워드를 통해서 마스크 되어 있어야만 한다. 개발중인 CVS 트리는
	항상 변해서 <path>cvs.eclass</path> ebuild 의 신뢰성을  보장할 수 없기 때문에, 
	항상 마스크 되어 있어야만 하는 것이다.

</p> 

<p>
	"live" cvs ebuild나, 스냅샷 CVS ebuild든간에, 개발자인 당신은 ebuild가 <b>정상적으로 
		동작하는것을 보증할 수 있어야 한다</b>. "live" cvs ebuild를 가지고 이것을 확신하는
	것이 어렵다는 것은 분명하다.
</p>

<p>
	만약 ebuild들이 제대로 제대로 동작하지 않거나 불안정 하다면, 제대로 고쳐지거나
	포티지 트리로부터 삭제되어야 한다. 만약 그것이 "live" ebuild라면, <c>~[arch]</c>로
	쭉 마스크 되어 있어야 할 것이다. (이것의 특별한 예외는 아래에 자세히 나와있다.)
</p>

<p>
	만약 어떤 사용자, 혹은 사용자들이 "live" cvs ebuild를 요청한다면, 당신은 그들을 위해
	추가할 수 있다. 그리고 다른 사용자들이 원치 않게 설치하지 않도록 <c>~[arch]</c> 키워드로
	마스크 되어 있어야만 한다.

</p>

<p>
	이런식으로, 요청한 사용자 (아마도 개발자일 것이다) 는 그것들을 설치할 수 있고,
	다른 사용자들은 실수로 설치하는것으로 부터 보하 받을 수 있다.
	다시 말하지만, 이런 경우는, 사용자가 "live"  <path>cvs.eclass</path> CVS ebuild
	를 요청했을 경우에만 해당된다. 스냅샷 ebuild는 그것들이 안정적이고, 릴리즈 버전보다
	기능적으로 낫게 동작할 경우에 한해서 추가될 수 있다.
</p>

<impo>
	<e>릴리스 전의(pre-release)</e> CVS 소스는 다음과 같이 이름 지어져야 한다:
	<path>foo-x.y_preYYYYMMDD.ebuild</path>. <c>foo</c>는 패키지 이름이고,
	<c>x.y</c>는 <e>다가오는(upcoming)</e> 릴리스의 버전 넘버이며,
	<c>_pre</c>는 문자열이고, <c>YYYYMMDD</c>는 CVS 스냅샷을 가져온 날짜이다.
	<c>x.y.1</c> 릴리스가 <c>x.y</c>의 스냅샷보다 오래된 것으로 고려되지 않고,
	공식 <c>x.y</c> 릴리스가 CVS 스냅샷 버전보다 <e>새</e> 것으로 고려되게 하기 위해
	이 이름 짓기 관례를 따르라.
	<e>이미 릴리스된(already-released)</e> CVS 소스의 스냅샷을 위해서는
	<path>foo-x.y_pYYYYMMDD.ebuild</path>형식을 사용하라.
	(<c>_p</c>는 "patchlevel"을 뜻한다는 것에 주의하라.)
	이는 여러분의 CVS 이빌드가 표준 <c>x.y</c>릴리스보다 <e>새</e> 것으로 고려되게
	할 것이다.
</impo>

<impo>
	현재 "살아 있는(live)" cvs 이빌드의 이름을 지을 때에는 패키지 이름이
	<c>-cvs</c>로 끝나게 하는 것을 정책으로 하고 있다. 미래에는 <c>_cvs</c>
	접미어가 포티지에 추가되어 이 정책이 갱신될 것이다.
</impo>

</body>
</section>

<section>
<title>User-submitted ebuilds</title>
<body>

<p>
	사용자가 보내온 이빌드들은 무조건 신뢰할 수는 없기 때문에 항상 CVS에 커밋하기 전에
	확인하고 검사해야 한다. <b>만약 사용자가 보내온 ebuild가 문제가 있다면, 당신은 해명을
		해야만 할 수도 있다.</b> 그것을 CVS에 올리는 것은, 그 ebuild가 젠투 리눅스 개발 표준
	에 부합한다는 것을 당신이 보증하는 것이 되기 때문이다.
</p>

<p>사용자가 보내온 ebuild가 다음과 같은 헤더를 가지고 있지 않도록 한다</p>

<pre caption="ChangeLog로 보내지게 될 특정한 헤더">
# Ebuild updated by: me &lt;me@me.com&gt;
</pre>

<p>
	이 정보는 적절한 주석 문법에 따라 <path>ChangeLog</path> 에 더해지게 된다. 
	<b> 항상 ebuild를 보내온 사용자에게는 ChangeLog에서 적절한 감사의 말을 쓰도록 한다.
	이 정보는 ChangeLog 항목 처음부분에 나타나도록 한다. </b>

</p>

<p>그리고 당신이 고친 ebuild는 대신 항상 다음 라인을 포함하도록 한다.</p>
<pre>
# &#36;Header: &#36;
</pre>
<p>몇몇 사용자들이 보낸 ebuild는 rsync 로부터 가져온 파일에 기초로 하기 때문에, 잘못된 헤더라인을 가질 수 있다.</p>

<p>
	만약 사용자들이 ebuild를 수정한다면, 수정사항 (diff) 를 보내도록 유도하라. 이것에 의해 이전에 발생한 버그가 
	"새로운" ebuild에 다시 들어오는것을 막을 수 있다. 만약 당신이 유져가 보낸 수정사항 (diff) 가 아니라, ebuild통째로
	작업을 한다면, <c>diff</c> 명령을 이용해서 무엇이 바뀌었는지 보고, 현재 ebuild에서 유지되어야 할 부분이나, 혹은 새로운 
	ebuild에서 잘못되거나 수정되어야 할 부분을 찾아내도록 하라.

</p>

<p>
	보통의 경우에는, 당신이 그들을 대신하여 하기를 <e>원하지</e> 않는 한은 
	사용자들에게, 그들이 보내온 ebuild를 어느정도의 상태로 만들도록 요청하라. 
	대개의 경우에는 사용자들에게 작업을 맞기는 것이, 그들이 자신의 실수로 부터 배우고, 나중에
	좀너 나은 ebuild를 보낼 수 있게 해준다. 항상 어떠한 제출(ebuild등을 제출하는것을 말함) 에도 감사하라. 비록 그것이
	별로 좋지 않더라도 말이다. 만약 ebuild가 쓸모가 없다면 사용자는 그들의 ebuild를 쓰는
	능력에 모욕을 받지 않으며 얘기를 들을 권리가 있다. 지금 당장 망가진 ebuild를 보내온 사람이 나중에 경험많고 능력있는
	우리들(개발자)의 구성원이 될 수 있음을 명심하라. 예의바르게, 그리고 정직한 충고와 격려를 받는다면 그들은 능력을
	향상시킬 수 있을 것이다.
</p>

</body>
</section>


</chapter> 

<chapter>
<title>QA policy</title>

<section>
<title>Portage release policy</title>
<body>
	<note>2002년 12월 17일 현재 Nick Jones (carapski) 가 포티지 메인테이너이다.</note>

<p>
	오직 포티지 메인테이너만이 사용자들에 의해 사용되는 포티지의 새로운 발표를 할 권리가 있다.
	그를 제외한 <b>그 누구도</b> 새로운 포티지의 발표를 할 수 없다.
</p>

<p>

	이것의 유일한 예외는 포티지 메인테이너가 오랜동안 자리를 비웠고, 포티지에 큰 버그가 있을 경우이다.
	이러한 비상상황에서, 고참 개발자들이 수정사항을 검사하고 새로운 포티지 발표를 할 수 있다.
</p>

<p>
	이러한 예외 상황을 적용하기 전에, 스스로에게 물어보라. 포티지 메인테이너가 정말로
	자리에 없고 연락이 불가능한가? 적용하려고 하는 수정사항이 정말로정말로 중요해서 
	당장 적용해야만 할 것인가? 당신은 스스로 작성한 <e>모든</e> 코드가 잘 동작 하는지 테스트 해 보았는가? 
	<b>이점은 중요하다</b> 만약 당신이 내놓은 버전의 포티지가 망가졌다면, <e>중대한 문제</e>가
	모든 사용자들에게 생기게 되는 것이다. <e>특히</e> 그것이 마스크가 풀렸다면 말이다.
	예외상황은 <e>절대적으로</e> 필요할때, 그리고 그것으로 인한 위험부담이 높지 않을때만 
	적용하도록 하라.

</p>

<p>
	그리고 만약 당신이 저질렀다면, 그 비상 수정사항은 현재 온라인에 접속한
	모든 개발자의 공동노력에 의한 것이어야 하고(테스트라던가..등등) 
	혼자서 독단으로 행해진 것이어서는 안된다. 그리고 왜 포티지 메인테이너를 
	기다리지 않고 수정이 이루어 졌는지에 대한 설명을 젠투-코어 메일링에도 
	올려야 한다.
</p>

<p>
	포티지 메인테이너는 몇몇의 특별한 사람에게 포티지 개발 cvs 트리에 커밋하도록 <e>허용한다</e>.
	하지만 비록 당신이 그 특별한 몇명중의 한명일 지라도, 그것이 새로운 포티지 릴리즈를 할 수 있다는
	뜻은 아니다. 이것은 포티지 메인테이너의 할 일이다. 그들은 당신의 코드를 읽어보고
	QA 시험을 할 것이다. 이 작업들이 포티지 메인테이너에 이루어지도록 하라. 이 규칙을 깨뜨리지 말라. 
	이것이 앞으로 발생할지도 모를 QA 문제를 막아줄것이라는 점이 우리의 희망이다.
</p>

</body>
</section>

<section>
<title>Masked packages</title>
<body>

<p>
	<path>/usr/portage/profiles/package.mask</path> 는 설치되서는 안되는
	패키지들의 목록과 그 이유가 자세히 적혀있다.
	package.mask는 망가졌거나, 깨졌거나 혹은 ~ARCH 키워드를 달고 포티지 트리에 들어가기 
	전에 테스트가 필요한 것들이 설치 되지 않도록 하는 역할을 한다. package.mask에 패키지
	를 더할때는 마스크 할 패키지 ebuild보다 먼저 package.mask를 커밋해서, 마스크될 패키지가 
	혹시라도 package.mask가 커밋되기 전에 설치되는 사태를 막도록 하라.
</p>

<p>
	<path>package.mask</path>에서 패키지 이름을 뺄 때는 주의가 필요하다. 
	ebuild가 <path>package.mask</path>에
	있었다면, 분명히 이유가 있었을 것이다. 당신이 마스크 했던게 아니라면, 
	행동을 취하기 전에 <path>package.mask</path>에 써 있는 개발자와 연락을 취하도록 하라.
	그리고, 마스크된 패키지가 핵심 패키지거나, 핵심패키지가 의존하는 것이거나 마스크를
	푸는것이 부정적인 효과를 가져올 가능성이 있다면, 변경사항에 대한 내용이 반드시
	내부 메일링 리스트에 올라와야 한다.
</p>

</body>
</section>

<section>
<title>~ARCH in KEYWORDS</title>
<body>
<p>
	~ARCH 의 목적은, 새로 포티지에 추가된 패키지의 테스팅을 위해서이다.
</p>

<p>
	<path>package.mask</path> 와 ~arch 키워드를 가진 ebuild 는 차이점이 있다.
	~arch는 <b>ebuild</b>가 테스팅을 필요로 한다는 것이다. <path>package.mask</path>
	는 해당 어플리케이션, 혹은 라이브러리가 불안정하다는 뜻이다. 예를 들면,
	<c>gimp-1.2.0</c> 는 안정버전의 발표이고, 새로운 버그 수정이 1.2.1에서 이루어졌으면,
	개발자(젠투쪽의)는 새버전의 ebuild를 ~arch 로 표시하고 테스트를 위해 포티지에 올린다.
	왜냐하면 그 발표는 안정버전이라고 여겨지기 때문이다. 또다른 예로, Gimp쪽에서 
	불안정/개발 버전의 1.3.0 버전을 내놓기로 했다면 그 버전의 ebuild는 반드시 
	<path>package.mask</path> 쪽에 넣어져야만 하는데, 이는 소프트웨어 자체가
	개발 버전의 품질이고, 배포를 위해 권장되지 않기 때문이다.

</p>

<p>
	그리고 포티지에 추가되는 새로운 패키지는 각 아키텍쳐별로 동작 한다고 알려진 것에 대해
	~arch를 달아야 한다. 커밋하는 개발자는 그것이 동작하는지 확인해야 하고, 키워드는 
	정확해야 한다.
</p>

</body>
</section>

<section>
<title>Moving package versions from ~ARCH to ARCH</title>
<body>
<p>
	어느 정도 시간이 지나서 패키지가 안정적이라고 증명이 되었고,
	해당 패키지를 젠투에서 관리하는 개발자가 그 패키지로 업그레이드 
	하는것이 일반적인 젠투 사용자의 컴퓨터에 별 문제가 없다고 확신한다면
	이제 그 패키지는 ~ARCH에서 ARCH로 옮겨갈 수 있다. 패키지의 안정성의 척도는
	그 버전이 발표된 후로부터 한달정도 후까지 발생, 보고된 버그가 없음. 으로 판단한다.

</p>
<p>
	패키지가 안정버전인지, 아니면 개발버전이라 <path>package.mask</path>에 들어가야 할 지
	아니면 ~ARCH에 남아있어야 할 지는, 젠투 개발자가 결정해야 할 사항이다.
</p>
<p>
	그리고, 해당 패키지가 의존하는 것들이 전부 ARCH에 있는지 확인해야 한다.
</p>
<warn>
	~ARCH 단계는 특별한 경우에 한해서 건너 뛸 수 있는데, 그것은 해당 패키지의
	해당 버전이 보안 수정사항을 포함하고 있거나 젠투 리눅스 시스템의 중요한 버그를 
	고치기 위해 필요할 경우이다.
</warn>
</body>
</section>

</chapter>

<chapter>
<title>Variables</title>

<section>
<title>Required variables</title>
<body>
<p>
	젠투 리눅스 정책에 따르면 모든 ebuild들은 <c>KEYWORDS</c>, <c>LICENSE</c>, 그리고
	<c>SLOT</c> variables 변수를 포함하고 있어야 한다. 
	<c>HOMEPAGE</c>, <c>SRC_URI</c> 그리고 <c>DESCRIPTION</c> 도 특별한 경우가 아니면 포함 되어야 한다.
	<c>DEPEND</c> (그리고 필요하면 <c>RDEPEND</c>도) 은 당신의 패키지가 컴파일 할 때,
	혹은 동작할 때의 의존성이 있다면 명시 되어야 한다. 

</p>
</body>
</section>

<section>
<title>DEPEND and RDEPEND</title>
<body>

<p>
	패키지를 컴파일 할 때의 의존성을 위해 <c>DEPEND</c>를, 그리고 <e>동작</e> 할 때의 의존성을 
	위해 <c>RDEPEND</c>  를 를 사용하라.  <c>RDEPEND</c> 는 실행시의 의존성이 <c>DEPEND</c> 와 다를 
	때만 써 주면 된다. 만약 <c>RDEPEND</c> 가 명시되지 않았다면, 자동적으로 <c>DEPEND</c> 같게 된다.
	<b>절대로</b> <c>RDEPEND</c> 를 <c>DEPEND</c> 와 같다고 직접 쓰지 말라.
</p>

<pre>
# 괜찮은 예
RDEPEND="${DEPEND}
	net-ftp/curl
	virtual/glibc"
# 안 괜찮은 예
RDEPEND="${DEPEND}"
</pre>

<p>
	또 한가지 중요한 점이 있다.
	<c>RDEPEND</c> 의존성은 바이너리 패키지인 <c>.tbz2</c> 를 설치할 때도 적용된다. 
	이것을 생각하면서 정확한 <c>RDEPEND</c> 의존성을 고르도록 하라. 정의되지 않았다면 <c>RDEPEND</c> 은
	기본적으로 <c>DEPEND</c>를 따르게 된다.

</p>

<p> 
	패키지는 의존성을 만족하는 가장 예전 버전에 의존성이 걸려 있어야 한다.
	<c>libfoo-1.2.x</c> 로 충분하다면 당신이 설치했다는 이유만으로 <c>libfoo-2.x</c> 에 의존성을 걸지 말라.
</p>

<p>
	일반적으로, 패키지들은 <c>&gt;=libfoo-1.2</c>대신 <c>=libfoo-1.2*</c> 를 의존한다.
	그렇지 않으면 <c>libfoo-2.0</c> 이 발표 되었을때, 의존성이 심하게 망가질 지도 모른다.

</p>

<p>
	<c>virtual/foo</c> 와 같은 가상 패키지를 의존하는 것들은 다른 어떤 패키지가
	<c>virtual/foo</c>를 제공하는 패키지들이 전부 동일한 인터페이스를 제공할 때에만
	잘 동작한다. <c>virtual/jdk-1.3</c>를 예로 들어보자. 어떤 패키지는  <c>sun-jdk-1.3</c> 에서는
	잘 동작하지만, <c>ibm-jdk-1.3</c>에서는 잘 동작하지 않는다. 이러한 이유로 항상 당신의 패키지의 
	마스크를 풀기 전에, 의존하는 해당 virtual 패키지의 모든 패키지들에서 테스트 해 보라.
	어떤 경우는 virtual이 아니라, 그 virtual에 해당하는 녀석들중 일부에만 의존성이 있을 수 있다.
</p>

</body>
</section>

</chapter>

<chapter>
<title>Moving packages</title>
<section>
<title>Moving packages between categories</title>
<body>

<p>
	시간이 지남에 따라 포티지 트리는 비대해진 패키지 분류를 잘게 나눠야 할 필요를 느끼게 된다.
	예를 들면  <c>net-misc</c>에 많은 수의 방화벽 관련 패키지들이 있을 경우, 그것들을 좀더
	알기 쉬운 작은 카테고리로 나누는것은 쓸만한 일이 될 것이다. 하지만 dev-perl을 잘게 쪼개는 것은 성공할 
	것 같지는 않다.

</p>

<p>
	이런 종류의 결정은 한명의 개발자 혼자서 결정해서는 곤란하다. 우선은 내부 메일링 리스트에
	제언 되어야 하고, 이러한 중대한 사안에 대해서 다 같이 생각을 해 봐야 한다.
</p>

<p>
	이전에는, 새로운 ebuild 에  <c>PROVIDE</c> 를 추가해서 새로운 패키지의 위치를 
	눈치채지 못한 패키지의 <c>DEPEND</c> 의존성을 만족시켜 주었다. 새로운 그리고 올바른, 패키지를 
	옮기는 방법은 포티지 트리 안쪽의 <path>profiles/updates/</path>의 파일에 적당한 항목을 추가하는 것이다.
	항목의 형식은 다음과 같다.
</p>

<pre>
move net-misc/fwbuilder net-firewall/fwbuilder
</pre>

<p>
이것은, <c>fwbuilder</c>패키지가 <c>net-misc</c> 에서 <c>net-firewall</c> 로 옮겨갔음을 표시한 것이다.
</p>

</body>
</section>
</chapter>

</guide>
