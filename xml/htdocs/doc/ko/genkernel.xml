<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ko/genkernel.xml,v 1.2 2005/07/31 17:38:36 neysx Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/ko/genkernel.xml" lang="ko">
<title>젠투 리눅스 genkernel 가이드</title>

<author title="저자">
  <mail link="plasmaroo@gentoo.org">Tim Yamin</mail>
</author>

<author title="번역자">
  <mail link="jinkyup@gmail.com">Park, Jin Kyu(bass1ife)</mail>
</author>

<author title="검토자">
  <mail link="jinhyung@gmail.com">Park, Jin Hyung</mail>
</author>

<abstract>
이 가이드는 genkerl이 제공하는 모든 함수들의 참조를 제공할 목적으로 
만들어졌습니다.
</abstract>

<license/>

<version>1.1.2.3</version>
<date>2005-06-26</date>

<chapter>
<title>소개</title>
<section>
<title>소개</title>
<body>

<p>
Genkernel은 이전에 커널 컴파일에 익숙하지 않은 사용자들이 하드웨어를 자동으로
검색하는 Gentoo LiveCD 에서 사용되는 것과 비슷한 설정을 사용할 수 있도록 
설계되었습니다.
</p>

<p>
어떤 사용자들은 genkernel을 초기화가 필요한 하드웨어와 부팅해보지 않고도 동작할
것이라고 여겨지는 커널에 사용하는 것에 궁금할 것입니다. genkernel이 커널 모
듈도 자동으로 컴파일하므로, 모듈 매개 변수를 사용해서 하드웨어를 사용할 수 있습니다.
</p>

</body>
</section>
<section>
<title>genkernel이 나를 위한 것인가?</title>
<body>

<p>
Genkernel은 커널을 컴파일하는 데에 익숙하지 않거나 하드웨어 설정에 확신을 갖지
못하는 사람들에게 적절한 선택입니다.
</p>

<p>
Genkernel이 일반적인 설정을 사용하도록 설계되었기 때문에, 이것은 당신의 
하드웨어를 모두 지정할 수 있을 것입니다 - 그렇지만, 모든 드라이버들과 모듈들
또한 컴파일되어야 하기 때문에, 만약 당신이 무엇이 필요한 지 알고 있다면 
당신이 직접 컴파일하는 것이 보통 훨씬 빠릅니다.
</p>

<p>
Genkernel 은 현재까지는 LVM2/EVMS2 파티션을 가진 시스템의 부팅은 
지원하지 않습니다. 사용자들은 당분간 수동으로 컴파일된 커널을 사용할 것을 
추천합니다.
</p>

</body>
</section>
<section>
<title>genkernel 얻기</title>
<body>

<p>
여러분은 간단히 <c>emerge genkernel</c>을 실행함으로써 genkernel을 얻을 수 있습니다.
만약 바이너리 패키지들을 사용한다면, emerge에 <c>-k</c> 플래그를 사용하는
것을 잊지 마십시요. i.e. GRP. GRP 패키지들은 오래된 버전의 genkernel을 가지고 있기 
때문에, 플래그들이 서로 다릅니다. 이에 대해서 
<uri link="/doc/en/handbook/handbook-x86.xml?part=1&amp;chap=10">
Gentoo Handbook</uri> 과 <path>genkernel --help</path> 를 통해 정보를 얻을 수 있습니다.
</p>

</body>
</section>
<section>
<title>선택할 플랫폼</title>
<body>

<p>
genkernel 3.0.2에서, 다음의 플랫폼들이 선택될 것입니다: alpha, amd64, parisc, 
parisc64, ppc, ppc64, sparc, sparc64, x86.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Genkernel 사용 방법</title>
<section>
<title>소개</title>
<body>

<p>
Genkernel은 세 가지 모드로 동작하도록 설계되었습니다.
</p>

<ul>
  <li>"all" mode: 커널과 initrd를 빌드한다.</li>
  <li>"kernel" mode: 커널 이미지만을 빌드한다.</li>
  <li>"initrd" mode: initrd만을 빌드한다.</li>
</ul>

<p>
대부분의 사용자들은 "kernel" 모드와 "initrd" 모드를 실행하는 "all" 모드만을
원할 것입니다. "kernel" "initrd" 모드들은 현재로써는 "all" 모드의 별칭(alias)들일
뿐이고, 따라서 이 모드들은 현재로써는 특별한 이득을 주지 않는다는 것을 
참고하십시오.
</p>

<p>
genkernel은 커널을 컴파일할 때 좀더 편하게 해 주는 명령어일 뿐이지만, genkernel은
여러분의 커널을 어떻게 컴파일하고 설정할지를 커스터마이징하게 해 줄 수 있는 서로 
다른 플래그들도 가지고 있습니다.
</p>

</body>
</section>
<section>
<title>Genkernel 컴파일러 플래그</title>
<body>

<p>
Genkernel은 커널을 조합할 때 적절한 어플리케이션들로 전달되는 다음의 플래그들을
지정합니다. 
</p>

<ul>
  <li>
    <b>--kernel-as=<c>someAssembler</c></b>
    : 커널을 컴파일하는 데 사용할 어셈블러를 지정한다.
  </li>
  <li>
    <b>--kernel-cc=<c>someCompiler</c></b>
    : 커널을 컴파일하는 데 사용할 컴파일러를 지정한다.
  </li>
  <li>
    <b>--kernel-ld=<c>someLinker</c></b>
    : 커널을 컴파일하는 데 사용할 링커를 지정한다.
  </li>
  <li>
    <b>--kernel-make=<c>someMake</c></b>
    : 커널을 컴파일하는 데 사용할 대체(alternate) GNU make를 지정한다.
  </li>
</ul>

<ul>
  <li>
    <b>--utils-as=<c>someAssembler</c></b>
    : 지정 유틸리티들을 컴파일하는 데 사용할 어셈블러를 지정한다.
  </li>
  <li>
    <b>--utils-cc=<c>someCompiler</c></b>
    : 지정 유티리티들을 컴파일하는 데 사용할 컴파일러를 지정한다.
  </li>
  <li>
    <b>--utils-ld=<c>someLinker</c></b>
    : 지정 유티리티들을 컴파일하는 데 사용할 링커를 지정한다.
  </li>
  <li>
    <b>--utils-make=<c>someMake</c></b>
    : 지정 유티리티들을 컴파일하는 데 사용할 대체(alternate) GNU make를 지정한다.
  </li>
</ul>

<ul>
  <li>
    <b>--makeopts=<c>-jJobs</c></b>
    : 커널과 유틸리티들이 컴파일 될때 GNU make로 전달할 플래그들을 지정한다.
  </li>
</ul>

</body>
</section>
<section>
<title>Genkernel 커널 플래그</title>
<body>

<p>
Genkernel은 커널 컴파일에 영향을 주는 <c>--<b>no-</b>option</c>과 같은 다음의
플래그들을 지원합니다.
</p>

<ul>
  <li>
    <b>--callback="echo Hello"</b>: 이 루틴은 커널과 적절한 모듈들이 빌드된 후에;
    그리고 initrd가 빌드되기 전에 지정된 인자들을 호출합니다. 이것은 callback을 
    사용해서 적절한 아이템을 emerge하고 genkernel 모듈 그룹을 재정의함으로써 
    외부(external) 모듈들을 initrd로 인스톨 하려고 할 때 유용합니다.
  </li>
  <li>
    <b>--<c>no-</c>clean</b>: 당신이 커널을 컴파일 하기 위해 
    <c>make clean</c>을 실행한다 <e>(실행하지 않는다)</e>. 그 결과 모든 오브젝트
    파일과 의존성이 있는 것들이 삭제됩니다.
  </li>
  <li>
    <b>--<c>no-</c>mrproper</b>: 커널을 컴파일하기 전에 <c>make mrproper</c>를
    실행합니다 <e>(실행하지 않는다)</e>. 그 결과 모든 오브젝트 파일과, 의존성이
    있는 것들 <b>그리고 여러분의 설정</b>이 삭제됩니다.
  </li>
</ul>

<ul>
  <li>
    <b>--kerneldir=<path>/path/to/sources</path></b>
    : 기본 경로인 <path>/usr/src/linux</path>대신에, 대체할 커널 소스 경로를 
    지정합니다.
  </li>
  <li>
    <b>--kernel-config=<path>/path/to/config-file</path></b>
    : 현재 기본으로 사용되고 더 이상 지속되지 않는 
    <path>/path/too/source/.config</path>대신에 사용할 대체 커널 설정을 지정합니다.
  </li>
</ul>

<ul>
  <li>
    <b>--<c>no-</c>bootsplash</b>: genkernel이 빌드하는 initrd 내부의 bootsplash를
    지정합니다 <e>(지정하지 않는다)</e>. 현재 모든 아키텍쳐들이 bootsplash를 
    지원하지는 않습니다. bootsplash를 지원하는 커널도 필요합니다.
  </li>
  <li>
    <b>--<c>no-</c>menuconfig</b>: 커널을 빌드하기 전, <c>make oldconfig</c>가 
    실행되기 전에 커널 메뉴 기반의 설정기를 실행합니다 <e>(실행하지 않는다)</e>.
  </li>
</ul>

<ul>
  <li>
    <b>--no-initrdmodules</b>
    : genkernel이 생성하는 어떤 모듈도 initrd로 복사하지 않습니다.
  </li>
  <li>
    <b>--<c>no-</c>install</b>: 컴파일이 끝난 커널, 모듈, 그리고 initrd를 
    인스톨합니다 <e>(인스톨하지 않는다)</e>.
  </li>
</ul>

</body>
</section>
<section>
<title>Genkernel 기타 플래그</title>
<body>

<p>
Genkernel은 또한 다른 두 범주에 해당하지 않는 몇몇 기타 플래그들도 지정합니다:
</p>

<ul>
  <li>
    <b>--arch-override=<c>someArch</c></b>: 자동 탐지 메커니즘이 실패할 때나
    만약 커널을 크로스 컴파일하고 싶을 때 genkernel은 여러분이 사용한다고 생각하는
    아키텍쳐를 덮어 쓰는 데 사용될 수 있습니다.
  </li>
</ul>

<ul>
  <li>
    <b>--busybox-config=<path>/path/to/busybox-config</path></b>
    : 주어진 파일로 기본 busybox 설정을 덮어 씁니다. 
  </li>
  <li>
    <b>--busybox-bin=<path>/path/to/busybox-binary.tar.bz2</path></b>
    : 이 옵션을 사용한다는 것은 busybox 바이너리가 컴파일되지 않았을 것이고, 
    주어진 타르볼이 사용된다는 의미입니다. busybox가 <e>반드시</e> static으로 
    컴파일되어야 한다는 것에 주의하십시오!
  </li>
</ul>

<ul>
  <li>
    <b>--minkernpackage=<path>/output/to/yourkernel.tar.bz2</path></b>
    : 이 플래그는 <path>kernel</path>이라고 이름 붙여진 커널의 타르볼과 
    <path>initrd</path>라고 이름붙여진 initrd를 주어진 파일로 출력합니다. 경로 
    정보나 모듈은 타르볼 내부에 포함되지 않을 것입니다.
  </li>
</ul>

</body>
</section>
<section>
<title>Genkernel 실행하기</title>
<body>

<p>
genkernel을 실행하는 데 필요한 것은 root로써 genkernel을 필요한 플래그들과 
함께 입력하는 것 뿐입니다. 예:
</p>

<pre caption="genkernel 실행">
# genkernel --menuconfig --no-clean --no-install --bootsplash all
<comment>(여러분에게 어떻세 설정하기를 원하는지 물어보고,
컴파일된 오브젝트 파일들을 남겨두며,
bootsplash를 지원하지만 실제로 설치는 하지 않으면서
커널을 만든다.)</comment>
</pre>

<p>
만약 genkernel을 여러분의 커널에도 인스톨하고자 한다면 <path>/boot</path> 
파티션이 마운트되어 있어야 합니다 - 최신의 genkernel들은 
<path>/etc/genkernel.conf</path> 에 MOUNTBOOT가 "yes"로 설정되어 있다면 이를 
자동으로 확인할 것입니다.
</p>

<pre caption="/boot 수동으로 마운트하기">
<comment>(/boot가 /etc/fstab의 올바른 항목일 경우:)</comment>
# mount /boot
<comment>(... 그 밖의 경우 IDE 디스크에 대해:)</comment>
# mount /dev/hda1 /boot
<comment>(... SCSI 디스크에 대해:)</comment>
# mount /dev/sda1 /boot
</pre>

</body>
</section>
<section>
<title>부트로더와 같이 동작하도록 genkernel 세팅하기</title>
<body>

<p>
genkernel을 부트로더와 같이 동작하도록 설치하려면, 부트로더 설정에서 세 가지 
또는 네 가지를 수정해야 합니다.
</p>

<ol>
  <li>
    커널 이미지로 전달되는 커널 파라메터에 <c>root=/dev/ram0</c> 와 
    <c>init=/linuxrc</c>를 추가 할 것.
  </li>
  <li>
    예를 들어, <path>/dev/hda3</path> 에 root 파티션이 포함되어 있을 경우, 
    <c>real_root=/dev/hda3</c>을 추가합니다.
  </li>
  <li>
    만약 bootsplash를 사용한다면, 커널로 전달되는 매개변수에 <c>vga=0x317</c>같은
    적합한 modeline을 추가하거나 또한 bootsplash 에서 필요로 하는 상세함의 정도에
    따리 <c>splash=verbose</c> 또는 <c>splash=silent</c>도 추가합니다.
  </li>
  <li>
    여러분의  부트로더가 initrd를 어떻게 필요로 하느냐에 따라서 initrd를 추가 
    할 것: 부트로더를 위해 무엇을 해야 하는지 자세히 알고 싶다면 
    <uri link="/doc/en/handbook/handbook-x86.xml?part=1&amp;chap=10">Gentoo Handbook</uri>
    을 보십시오.
  </li>
</ol>

</body>
</section>
<section>
<title>커널 설정 파일</title>
<body>

<p>
Genkernel은 커널 설정을 <path>/etc/kernels</path>에 저장하고 여러분이 
<c>genkernel</c>을 실행할 때 마다 그 설정을 사용합니다. 기본값에서 다시 시작하고
싶다면, <path>/etc/kernels</path>안의 파일 이름을 수정하십시오. Genkernel은 
<path>/usr/share/genkernel/&lt;arch&gt;</path>에 있는 커널 설정을 대신 사용합니다.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Genkernel 포팅</title>
<section>
<title>소개</title>
<body>

<p>
여러분의 아키텍쳐가 genkernel이 필요로 하는 모든 라이브러리와 유틸리티를 가지고 
있고, 아키텍쳐를 위한 커널과 컴파일러 세트(suite), GNU make, 그리고 busybox 
배포판에 제한받지 않는다면, 여러분은 시작할 준비가 된 것입니다!
</p>

<p>
각각의 아키텍쳐에 대해, genkernel은 <path>/usr/share/genkernel/$archName</path>을
설정 파일들로 사용합니다.
</p>

</body>
</section>
<section>
<title>시스템 부트스트랩이 어떻게 동작하는가</title>
<body>

<ol>
  <li>
    bootloader는 genkernel 디렉토리들 내부의 설정 파일 명세에 
    따라 빌드된 genkernel 이미지와 genkernel이 준비한 initrd를 로드합니다.
  </li>
  <li>
    커널은 부팅하면서, 적은 양의 RAM을 할당해서 busybox가 그 안에서 
    초기화되도록 하고 busybox는 아키텍쳐를 위한 modules_load 리스트 안에 있는 
    모듈들이 있는지 시스템을 조사합니다.
  </li>
  <li>
    작업이 완료되면, 그리고 busybox가 적절한 root boot 디바이스인 
    <c>real_root</c> 매개 변수를 찾으면, 시스템은 그 장치로부터 부팅합니다.
  </li>
</ol>

</body>
</section>
<section>
<title>설정 파일</title>
<body>

<ul>
  <li>
    <path>busy-config</path>: 여러분의 아키텍쳐에 맞는 busybox를 빌드하는 데에 
    사용되는 설정입니다.
  </li>
  <li>
    <path>config.sh</path>: 다양한 genkernel 내부 변수들을 설정하는 쉘 스크립트.
    예로 <path>config.sh</path> 파일들 중에 하나를 참고하십시오.
  </li>
  <li>
    SCSI, FireWire, ATARAID 그리고 PCMCIA 지정을 위해 로드된 모듈들의 크기-고정 
    리스트를 포함하고 있는 파일입니다. 만약 여러분의 플랫폼에서 아무것도 사용 
    가능하지 않다면, 이 필드를 비워두십시오. 
    예로 <path>modules_load</path> 파일 중의 하나를 참고하십시오.
  </li>
</ul>

<ul>
  <li>
    <path>kernel-config</path>: 모든 커널 버전에서 사용되는 기본 커널 설정.
  </li>
  <li>
    <path>kernel-config-2.4</path>: 2.4 시리즈 커널에서 사용되는 기본 커널 설정.
  </li>
  <li>
    <path>kernel-config-2.6</path>: 2.6 시리즈 커널에서 사용되는 기본 커널 설정.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
