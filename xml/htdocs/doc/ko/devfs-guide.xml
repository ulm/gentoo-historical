<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ko/devfs-guide.xml,v 1.1 2004/09/27 10:55:39 neysx Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/ko/devfs-guide.xml">
<title>Device File System Guide</title>
<author title="저자">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="검토자">
  <mail link="seemant@gentoo.org">Seemant Kulleen</mail>
</author>
<author title="번역자">
  <mail link="shavete@hotmail.com">shavete</mail>
</author>

<abstract>
이 문서에서 여러분은 devfs가 정말로 무엇인지와 어떻게 다루어야 할 지에 관한 정보를 얻을 수 있을 것이다.
</abstract>

<license/>

<version>0.2</version>
<date>2003년 9월 9일</date>

<chapter>
<title>devfs는 무엇인가?</title>
<section>
<title>(좋았던?) 옛날에</title>
<body>

<p>
전통적인 리눅스는 사용자에게 추상적인 <path>/dev</path>라고 불리는 디바이스 경로를 제공한다. 이러한 경로 안에는 시스템 안에서 디바이스를 나타내는 특별한 파일들인 <e>디바이스 노드들(device nodes)</e>이 있다. 예를 들어, <path>/dev/hda</path>는 시스템 안에서 첫번째 IDE 디바이스를 나타낸다. 이러한 디바이스 파일들을 제공하기 때문에, 사용자들은 하드웨어와 상호 작용하는 프로그램을 특별한 API들을 사용하는 대신 파일처럼 다루면서 만들 수 있다.
</p>

<p>
디바이스 파일은 <e>문자(character)</e>와 <e>블록(block)</e>이라 불리는 두 그룹으로 분류된다. <e>문자</e> 디바이스는 버퍼가 없는 하드웨어로 구성되고, 블록 디바이스는 당연히 버퍼가 없는 하드웨어로 구성된다. 두 가지 디바이스 모두 한번에 문자 한 개를 읽을 수도, 여러 블록들을 읽을 수도 있다. 따라서 두 그룹의 이름들은 혼동을 주며, 사실 잘못 지어졌다.
</p>

<p>
특정한 디바이스 파일을 살펴보면, 여러분은 아래와 같은 것을 발견 할 수 있다:
</p>

<pre caption = "디바이스 파일의 정보를 확인하기">
# <i>ls -l /dev/hda</i>
brw-rw----    1 root     disk       3,   0 Jul  5  2000 /dev/hda
</pre>

<p>
앞의 예에서 우리는 <path>/dev/hda</path>가 블록 디바이스라는 것을 알 수 있다. 하지만 더욱 중요한 것은 위의 디바이스에 부여된 두개의 특별한 숫자, <path>3, 0</path>이다. 두 개의 숫자는 <e>주 번호-부 번호(major-minor)</e> 짝(pair)이라 불린다. 두 개의 숫자는 커널이 디바이스 파일을 실제 디바이스에 대응(map)할 때 사용한다. 주 번호는 특정한 장치에 해당하며, 부 번호는 그 장치의 하위 장치에 해당한다. 혼돈스럽나? 그렇지 않다.
</p>

<p>
<path>/dev/hda4</path>와 <path>/dev/tty5</path>로 예를 들어보겠다. <path>/dev/hda4</path>는 첫번째 IDE 디바이스의 네번째 파티션에 해당한다. 그것의 주 번호-부 번호 짝은 <path>3, 4</path>이다. 다시 말해, 부 번호는 주 번호에 해당하는 장치의 파티션에 해당한다. <path>/dev/tty5</path>의 주 번호-부 번호 짝은 <path>4, 5</path>이다. 이 경우, 주 번호는 터미널 드라이버(terminal driver)에 해당하고, 부 번호는 터미널 번호에 해당한다. (이 경우, 다섯번째 터미널이다.)
</p>

</body>
</section>
<section>
<title>문제점</title>
<body>

<p>
여러분이 <path>/dev</path> 안을 대충 확인해 보면, 실제로 있는 디바이스가 모두 있을 뿐만 아니라 여러분이 상상할 수 있는 <e>모든</e> 디바이스들도 있다. 다시 말해, 여러분이 가지고 있지 않은 디바이스의 디바이스 파일도 있다. 이러한 디바이스 그룹을 관리하는 것은 아무리 줄여 말하더라도 귀찮은 일이다. 여러분의 시스템에 있는 모든 디바이스 파일의 접근 권한을 바꾸고, 나머지 디바이스 파일들은 그대로 남겨 놓는 작업을 상상해 보아라.
</p>

<p>
여러분이 시스템에 기존의 디바이스 파일이 없는 새로운 하드웨어를 추가할 때, 디바이스 파일을 새로 만들어야 할 것이다. 능숙한 사용자는 이러한 작업을 <path>/dev</path> 트리 안에 있는 <c>./MAKEDEV</c>로 할 수 있다는 것을 알고 있지만, 여러분은 만들어야 하는 디바이스 파일이 무엇인지 바로 알 수 있는가?
</p>

<p>
디바이스 파일을 이용하여 하드웨어와 상호작용하는 프로그램을 가지고 있다면, 루트 파티션을 읽고 쓰는 기능이 필요 없다 할지라도, 루트 파티션을 읽기 전용으로 마운트할 수 없다. 그리고 <path>/dev</path>를 분리된 파티션에 놓을 수 없다. 왜냐하면 <c>mount</c>는 파티션을 마운트할 때 <path>/dev</path>가 필요하기 때문이다.
</p>


</body>
</section>
<section>
<title>해결 방법</title>
<body>

<p>
여러분이 상상할 수 있다시피, 커널 해커들(the kernel hacker)은 앞서 말한 문제점을 해결할 수 있는 몇몇 방법을 알고 있다. 그러나 <uri>http://www.atnf.csiro.au/people/rgooch/linux/docs/devfs.html#faq-why</uri>에 나와 있듯이, 그 해결책 중 다수가 결함을 가지고 있다. 우리는 위의 구현들에 대해서는 이야기 하지 않고, 공식적인 커널의 소스가 된 devfs라는 구현에 대해서만 초점을 맞추겠다.
</p>

</body>
</section>
<section>
<title>다방면에 가장 좋은 devfs</title>
<body>

<p>
devfs는 위에 열거된 모든 문제점을 다룬다. 사용자에게 존재하는 디바이스만 제공하고, 새로운 디바이스를 찾았을 때 새로운 노드(node)를 추가하고, 루트 파일시스템을 읽기 전용으로 마운트할 수 있게 해 준다. 그리고 devfs는 우리가 앞에서 사용자들에게는 덜 흥미롭기 때문에 다루지 않았던 더 많은 문제점들도 다룬다.
</p>

<p>
예를 들어, devfs는 여러분이 주 번호/부 번호 짝에 대해서 걱정하지 않아도 되도록 해 준다. 주 번호/부 번호 짝은 필요없다 하더라도 (예전과의 호환을 위해) 지원되고 있다. devfs는 리눅스가 더 많은 디바이스를 지원할 수 있게 해 준다. 왜냐하면 한계가 없기 때문이다. (숫자는 항상 한계를 가지고 있다 :)
</p>
</body>
</section>
</chapter>

<chapter>
<title>디바이스 트리 살펴보기</title>
<section>
<title>디렉토리</title>
<body>

<p>
여러분이 제일 처음 알아 챌만한 것은 devfs가 디바이스를 그룹으로 분류하기 위해 디렉토리를 사용한다는 사실이다. 디렉토리를 사용한 그룹 분류는 관련된 모든 디바이스들이 공통된 디렉토리 안에 있도록 해서 가독성을 높여준다.
</p>

<p>
예를 들어, 모든 IDE 관련 디바이스는 <path>/dev/ide/</path>에 있으며, SCSI 관련 디바이스는 <path>/dev/scsi/</path>에 있다. SCSI와 IDE 디스크는 같은 방법으로 볼 수 있는데, 이는 같은 하부 디렉토리 구조를 가지고 있다는 것을 의미한다.
</p>

<p>
IDE와 SCSI 디스크는 <e>호스트(host)</e>라 불리는 어댑터(보드 내장형이나 분리된 카드)를 통해 제어된다. 모든 어댑터에는 <e>bus</e>라 불리는 수개의 채널이 있다. 각각의 채널에는 수 개의 ID가 있을 수 있다. 이러한 ID는 각 디스크를 식별한다. 이러한 아이디는 <e>타겟(target)</e>이라 불린다. 어떤 SCSI 디바이스, 예를 들어 여러개의 미디어를 동시에 제어할 수 있는 디바이스(hi-end tapedrives)에는 여러개의 luns(<e>Logical Unit Numbers</e>)가 있을 수 있다. 그렇지만 대부분의 경우 하나의 lun(<path>lun0/</path>)이 있다.
</p>

<p>
앞에서 <path>/dev/hda4</path>가 사용되므로, 우리는 <path>/dev/ide/host0/bus0/target0/lun0/part4</path>를 가지고 있는 셈이다. 이것은 정말 쉽...다. 아니, 나랑 말 싸움하지 말고... 더 <e>쉽단말야</e>... 아 상관없어! :)
</p>

<note>
물론 여러분은 유닉스에서 사용하는 <path>c0b0t0u0p2</path>와 같은 하드 디스크 디바이스 파일 명명법을 사용해도 좋다. 그 디바이스들은 <path>/dev/ide/hd</path>나  <path>/dev/scsi/hd</path> 등에서 찾을 수 있다.
</note>

<p>
디렉토리에 관한 개념을 다지기 위해 아래에 내 노트북에 있는 디렉토리 목록을 보여주겠다.
</p>

<pre caption = "/dev의 디렉토리들">
cdroms/     cpu/        discs/          floppy/
ide/        input/      loop/           misc/
netlink/    printers/   pts/            pty/
scsi/       sg/         shm/            sound/
sr/         usb/        vc/             vcc/
</pre>

</body>
</section>
<section>
<title>devfsd를 이용한 하위 호환성</title>
<body>

<p>
이 새로운 체계를 사용하는 것은 재미있게 보이지만, 몇몇 도구와 프로그램은 이전의 오래된 체계를 사용하고 있다. 시스템이 망가지지 않게 하기 위해 <c>devfsd</c>가 만들어진다. 이 데몬(daemon)은 새로운 디바이스 파일을 가리키는 옛날 이름의 심볼릭 링크를 만든다.
</p>

<pre caption = "만들어진 심볼릭 링크">
$ <i>ls -l /dev/hda4</i>
lr-xr-xr-x    1 root     root           33 Aug 25 12:08 /dev/hda4 -> ide/host0/bus0/target0/lun0/part4
</pre>

<p>
여러분은 devfsd로 접근 권한을 정할 수도 있고, 새로운 디바이스 파일을 만들 수도 있으며, 액션들(actions)을 정의할 수도 있고, 다른 일도 할 수 있다. 이 모든 것을 다음 장에서 다루겠다.
</p>

</body>
</section>
</chapter>

<chapter>
<title>디바이스 트리 관리하기</title>
<section>
<title>devfsd 다시 시작하기</title>
<body>

<p>
여러분이 <path>/etc/devfsd.conf</path>를 수정한 뒤 변경한 것을 시스템에 강제로 적용하고 싶을 때, 굳이 재부팅하지 않아도 된다. 여러분이 원하는 것에 따라, 아래에 있는 두가지 신호들(signals) 중에서 원하는 것을 사용할 수 있다.
</p>

<p>
<b>SIGHUP</b>은 <c>devfsd</c>가 설정 파일을 다시 읽고, 공유된 오브젝트들(objects)을 다시 로드하고, 디바이스 트리의 각 잎 노드(leaf node)에 대해 REGISTER 이벤트를 발생시키게 한다.
</p>

<p>
<b>SIGUSR1</b>은 REGISTER 이벤트를 발생시키는 것을 제외하면 같은 일을 한다.
</p>

<p>
신호를 보내려면 간단히 <c>kill</c>이나 <c>killall</c>을 사용한다.
</p>

<pre caption = "devfsd에 SIGHUP 신호 보내기">
# <i>kill -s SIGHUP `pidof devfsd`</i>
<comment>또는</comment>
# <i>killall -s SIGHUP devfsd</i>
</pre>

</body>
</section>
<section>
<title>호환성 심볼릭 링크 제거하기</title>
<body>

<warn>
현재, 젠투는 호환성 심볼릭 링크 없이는 제대로 작동하지 않는다.
</warn>

<p>
만약 여러분이 젠투 시스템으로부터 <path>/dev</path>를 어지럽히는 호환성 심볼릭 링크를 제거하기를 원한다면, <path>/etc/devfsd.conf</path>에서 다음 두 줄을 제거하면 된다.
</p>

<pre caption = "하위 호환성을 위한 /etc/devfsd.conf">
<comment># 심볼릭 링크를 제거하시려면 다음 두 줄을 주석으로 만들라</comment>
REGISTER        .*  MKOLDCOMPAT
UNREGISTER      .*  RMOLDCOMPAT
</pre>

<p>
변경한 것을 적용하기 위해서는 시스템을 재부팅해야 한다.
</p>

</body>
</section>
<section>
<title>자동으로 적재되는 기능 제거하기</title>
<body>

<p>
모듈을 적재할 때, devfs는 자동으로 디바이스 파일을 만들 것이다. 여러분이 이러한 작업을 원하지 않는 경우 <path>/etc/devfsd.conf</path>에서 다음 줄을 지우면 된다:
</p>

<pre caption = "/etc/devfsd.conf, 자동 적재 기능">
LOOKUP      .*  MODLOAD
</pre>

</body>
</section>
</chapter>

<chapter>
<title>접근 권한 관련</title>
<section>
<title>PAM을 이용한 접근권한 설정/변경하기</title>
<body>

<p>
비록 여러분이 <path>/etc/devfsd.conf</path>에서 접근권한을 설정할 수 있지만, PAM(<e>Pluggable Authentification Modules</e>)을 사용하는 것을 권장한다. 왜냐하면 PAM은 접근 권한을 최종적으로 결정하고, 그 과정에서 여러분이 변경한 <path>/etc/devfsd.conf</path>를 무시할 수도 있기 때문이다.
</p>

<p>
PAM은 접근 권한 설정을 위해 <path>/etc/security/console.perms</path>를 사용한다. 이 파일은 두 부분으로 구성된다. 처음 부분은 그룹에 대한 설명이고, 두번째 부분은 접근 권한에 대한 설명이다. 
</p>

<p>
그룹에 대한 설명 부분을 살펴보자. sound 그룹을 예로 들겠다.
</p>

<pre caption = "/etc/security/console.perms에 있는 sound 그룹">
&lt;sound&gt;=/dev/dsp* /dev/audio* /dev/midi* \
    /dev/mixer* /dev/sequencer* \
    /dev/sound/* /dev/snd/* /dev/beep \
    /dev/admm* \
    /dev/adsp* /dev/aload* /dev/amidi* /dev/dmfm* \
    /dev/dmmidi* /dev/sndstat
</pre>                  

<p>
문법은 굉장히 간단하다. 그룹의 이름으로 시작하여 그 그룹에 속하는 디바이스의 목록으로 끝내면 된다.
</p>

<p>
그룹들이 제 역할을 하기 위해서는 무엇인가를 더 해주어야 한다. 그래서 다음으로는 접근권한이 어떻게 설정되어야 하는지에 대해 설명하겠다.
</p>

<pre caption = "/etc/security/console.perms에 있는 sound 그룹의 접근 권한">
&lt;console&gt;  0600 &lt;sound&gt;      0600 root.audio
</pre>

<p>
처음 항목은 터미널 체크(terminal check)이다. 대부분의 시스템에서, 이 필드는 console 그룹이다. PAM은 로그인할 때마다 이 항목을 체크한다. console 그룹에 속하는 디바이스로 로그인하면, PAM은 접근 권한을 검사하고, 몇몇 디바이스 파일들의 접근 권한을 바꿀 수 있다.
</p>

<p>
두번째 항목은 성공적인 로그인을 했을 때 디바이스 파일에 설정되는 접근 권한이 들어 있다. 사용자가 시스템에 로그인했고 디바이스 파일들이 기본 사용자/그룹에 의해 소유될 때, PAM은 로그인한 사용자에게 소유권을 넘기고, 이러한 디바이스 파일에 대한 접근 권한을 두번째 항목에 있는 대로 설정하게 된다. 여기에서는 0600이 쓰였다. (사용자는 읽기/쓰기 접근이 가능하며, 나머지는 불가능하다.)
</p>

<p>
세번째 항목에는 접근 권한이 변경될 디바이스 그룹이 들어 있다. 여기에서는 sound 그룹(소리와 관련된 모든 디바이스 파일)의 접근 권한이 변경될 것이다.
</p>

<p>
네번째 항목은 기본 상태로 되돌아온 후에 디바이스 파일이 어떤 접근권한으로 설정될지 정의한다. 다시 말해, 모든 디바이스 파일을 소유한 사용자가 로그아웃할 때, PAM은 접근권한을 네번째 항목에서 정한 기본 상태로 설정할 것이다.
</p>

<p>
다섯번째 항목은 기본 상태로 되돌아온 후에 디바이스 속성의 소유권이 어느 사용자에게 갈지 (여러분이 원한다면 어느 그룹에 갈지도) 정한다. 다시 말해, 모든 디바이스 파일을 소유한 사용자가 로그아웃할 때, PAM은 소유권을 다섯번째 항목에서 정한 기본 상태로 설정할 것이다.
</p>

</body>
</section>
<section>
<title>devfsd를 이용한 접근권한 설정/변경하기</title>
<body>

<p>
만일 여러분이 정말로 <path>/etc/devfsd.conf</path>을 이용하여 접근 권한을 설정하고 싶다면, 아래의 예와 같은 문법을 이용하라.
</p>

<pre caption = "/etc/devfsd.conf에 있는 접근 권한">
REGISTER    ^cdroms/.*  PERMISSIONS root.cdrom 0660
</pre>

<p>
두번째 항목은 <path>/dev</path>로 시작하는 디바이스 그룹이다. 정규 표현식이기 때문에, 여러분은 하나의 규칙을 통해 여러 디바이스 파일을 선택할 수 있다.
</p>

<p>
네번째 항목은 디바이스 파일의 소유권이다. PAM과는 달리 이것은 변경되지 않는다. (PAM이 직접 설정하는 것보다 우선되기 때문에, <path>console.perms</path>에 언급되었다면 그렇지 않다.)
</p>

<p>
다섯번째 항목에는 디바이스 파일의 접근 권한이 들어 있다.
</p>

</body>
</section>
<section>
<title>손수 접근권한을 설정하고 devfsd가 그것을 저장하도록 하기</title>
<body>

<p>
이것이 젠투에서는 기본적인 행동이다. 만약에 여러분이 어떤 디바이스 파일을 <c>chown</c>(CHange OWNer)하거나 <c>chmod</c>(CHange MODe)하면, <c>devfsd</c>는 여러분이 시스템을 끌 때 변경 사항을 저장할 것이다. 왜냐하면 <path>/etc/devfsd.conf</path> 파일은 다음과 같은 줄을 포함하기 때문이다.
</p>

<pre caption = "접근 권한을 저장하기 위한 /etc/devfsd.conf">
REGISTER        ^pt[sy]/.*   IGNORE
CHANGE          ^pt[sy]/.*   IGNORE
CREATE          ^pt[sy]/.*   IGNORE
DELETE          ^pt[sy]      IGNORE
REGISTER        ^log         IGNORE
CHANGE          ^log         IGNORE
CREATE          ^log         IGNORE
DELETE          ^log         IGNORE
REGISTER        .*           COPY    /lib/dev-state/$devname $devpath
CHANGE          .*           COPY    $devpath /lib/dev-state/$devname
CREATE          .*           COPY    $devpath /lib/dev-state/$devname
DELETE          .*           CFUNCTION GLOBAL unlink
/lib/dev-state/$devname
RESTORE         /lib/dev-state
</pre>

<p>
다시 말하면, 시스템을 끌 때 변경된 디바이스 파일은 <path>/lib/dev-state</path>에 복사되고, 시스템이 부팅될 때 <path>/dev</path>에 복사된다.
</p>

<p>
또 다른 방법은 부팅할 때 <path>/dev</path>에 <path>/lib/dev-state</path>를 마운트하는 것이다. 이렇게 하려면 devfs가 자동으로 마운트되지 않는지와 (여러분은 커널을 다시 컴파일해야 할 것이라는 뜻이다.) <path>/dev/console</path>이 존재하는지를 확인해야 한다. 다음에는 여러분의 시스템의 부트 스크립트의 시작 부분에 다음과 같은 부분을 넣어야 한다.
</p>

<pre caption = "/dev 위에 /lib/dev-state 마운트하기">
mount --bind /dev /lib/dev-state
mount -t devfs none /dev
devfsd /dev
</pre>

</body>
</section>
</chapter>

<chapter>
<title>자료</title>
<section>
<body>

<p>
devfs에 대한 더 자세한 정보를 원하면, 아래의 자료를 확인하라.
</p>

<p>
devfsd.conf의 man페이지는 <path>/etc/devfsd.conf</path> 파일의 문법을 설명한다. 그것을 보려면 <c>man devfsd.conf</c>라고 입력한다.
</p>

<p>
<uri link="http://www.atnf.csiro.au/people/rgooch/linux/docs/devfs.html">devfs 자주 묻는 질문</uri>은 devfs에 대한 모든 것을 설명한다. devfs의 내부 구조와 드라이버가 어떻게 devfs를 지원하는지에 대한 정보도 담고 있다.
</p>

<p>
<uri link="http://www.linuxjournal.com">LinuxJournal</uri>에는 <uri link="http://www.linuxjournal.com/article.php?sid=6035">관리와 운영을 위한 devfs</uri>에 관한 흥미로운 기사가 있다.
</p>

<p>
Daniel Robbins는 IBM의 DeveloperWorks에 진보적인 파일시스템에 관한 몇 개의 기사를 썼다. 그 중에서 다음 세 개는 devfs에 관한 것이다.
</p>

<ul>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs4/">
    devfs 소개</uri>
  </li>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs5/">
    devfs 설정</uri>
  </li>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs6/">
    devfs 구현</uri>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>

