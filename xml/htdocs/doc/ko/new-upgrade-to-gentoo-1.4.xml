<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ko/new-upgrade-to-gentoo-1.4.xml,v 1.4 2012/04/18 18:30:29 swift Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide lang="ko">

<title>젠투 1.4 업그레이드 가이드</title>

<author title = "저자">
  <mail link = "rac@gentoo.org">Robert Coie</mail>
</author>
<author title = "사본 편집자">
  <mail link = "avenj@gentoo.org">Jon Portnoy</mail>
</author>
<author title="번역자">
  <mail link="shavete@hotmail.com">shavete</mail>
</author>
<author title="편집자">
  <mail link="envia@chol.com">envia</mail>
</author>

<abstract>오래된 젠투 설치를 1.4로 업그레이드하는 방법</abstract>
<license/>
<version>0.3</version>
<date>2004년 10월 2일</date>

<chapter>
<title>시작하기 전에</title>
<section>
<title>준비하기</title>
<body>

<p>
Gentoo 시스템의 핵심부분을 업그레이드하기 때문에, 나중에 일어날 예상치 못한
문제의 가능성은 언제나 있다. 이 작업을 하기 전에 중요한 데이터를 모두 백업해
놓는 것은 현명한 행동이다. 가능하다면 많은 시간을 지금의 업그레이드 작업에
투자하여, 서두른다는 느낌을 받지 않도록 한다. 여러분의 컴퓨터에 있는 모든
소프트웨어를 다시 컴파일해야 할 것이다.
</p>

</body>
</section>
<section>
<title>다른 옵션</title>
<body>

<p>
지금의 이 방법이 여러분의 시스템을 업그레이드 하는 유일한 방법은 아니다.
여러분은 분리되어 있는 파티션에 새로운 1.4 시스템을 설치할 수도 있고, 기존
시스템의 설정의 일부분을 재사용할 수도 있다. 이 방법은 일종의 후퇴로서 도중에
기존의 시스템으로 돌아갈 수 있는 장점이 있다. 여러분은 시스템을
업그레이드하지 않기로 간단하게 결정할 수도 있다.
만약 여러분이 업그레이드를 원한다면, 계속 읽어라.
</p>

</body>
</section>
<section>
<title>일반적인 주의 사항</title>
<body>

<p>
code listing에 <c>emerge</c> 명령을 실행하라고 제안하는 경우에,
<c>-p</c> 나 <c>--pretend</c> 옵션을 이용하여 테스트한 후
그 명령이 여러분이 예상하는 결과를 가져올 지 확인하는 것이 좋다.
</p>

</body>
</section>
</chapter>

<chapter>
<title>업그레이드하기</title>
<section>
<title>최신 Portage 구하기</title>
<body>

<p>
현재 ebuild의 몇몇 문법은 오래된 버전의 Portage가 읽을 수 없다.
여러분은 적어도 Portage 2.0.44를 가지고 있어야 한다.
Portage를 업그레이드 해보자.
</p>

<pre caption="">
# <i>emerge --sync</i>
# <i>emerge -u portage</i>
</pre>

<note>
만약 여러분의 Portage가 굉장히 오래된 버전일 경우,
"unscriptable object" 라는 내용을 담은 에러 메세지를 보게 될 지도 모른다.
<path>/usr/portage/sys-apps/portage/files/README.RESCUE</path>에
나오는 지시를 읽어보고 따라하라. 최신 Portage가 설치되어야 한다.
</note>

</body>
</section>
<section>
<title>여러 버전을 함께 사용할 수 있는(cohabitant) GCC 준비하기</title>
<body>

<p>
여러분은 업그레이드 과정에서 더 최신의 GCC를 설치할 것이다.
2.95.3-r8보다 오래된 버전의 GCC는 여러 버전을 함께 사용할 수 있도록
제작되지 않았다. 따라서 여러분은 적어도 2.95.3-r8버전의 GCC를 업그레이드해야
한다. 이 작업을 통해 시스템에 <c>gcc-config</c> 패키지를 설치하는 유익한
부수효과를 얻을 수 있다. 이 패키지는 설치된 GCC 중에 이 버전 저 버전 골라서
사용할 수 있도록 해준다.
</p>

<pre caption="">
# <i>emerge -u gcc</i>
</pre>

<p>
아래와 같이 명령을 입력하여 gcc-config가 제대로 작동하는 지 확인할 수 있다.
</p>

<pre caption="">
# <i>gcc-config --get-current-profile</i>
</pre>

<p>
대부분의 x86 시스템에서는 i686-pc-linux-gnu-2.95.3와 같은 결과를 얻을 수 있다.
오래된 시스템에서는 i586-pc-linux-gnu-2.95.3라고 나올 수도 있다.
</p>

</body>
</section>
<section>
<title>GCC 3 설치하기</title>
<body>

<p>
이제 여러분은 현재 설치되어 있는 GCC에 아무런 손상을 주지 않고 새로운 버전의
GCC를 설치할 수 있다. <path>/usr/portage/sys-devel/gcc</path> 안에서 적어도
3.2.1-r6이상의 GCC ebuild를 찾아본다. 여러분의 아키텍쳐 위에서 안정적이라고
표시된 버전 중에서 가장 높은 버전을 선택한다. 여러분의 아키텍쳐 위에서
안정적이라고 간주되는지 확인하려면 ebuild 파일 안의 KEYWORDS줄을 살펴보아라.
만약 KEYWORDS줄에 여러분의 아키텍쳐가 앞에 '~'표시 없이 나와 있다면,
안정적이라는 의미이다. 3.2.2버전이 가장 안정된 버전이라고 가정하고,
먼저 gcc의 glibc 의존성을 없앤다.
</p>

<p>
<path>/usr/portage/sys-devel/gcc/gcc-3.2.2.ebuild</path>를 열고
<c>DEPEND</c>를 포함하는 줄을 찾는다.
<c>glibc</c>의존성을 없애고 이빌드를 저장한다.
</p>

<pre caption="gcc-3.2.2.ebuild 편집하기">
# <i>vim /usr/portage/sys-devel/gcc/gcc-3.2.2.ebuild</i>
</pre>

<p>
이제 최신 GCC를 여러분의 시스템에 설치한다.
</p>

<pre caption="">
# <i>USE="-java" emerge /usr/portage/sys-devel/gcc/gcc-3.2.2.ebuild</i>
# <i>emerge /usr/portage/sys-devel/gcc/gcc-3.2.2.ebuild</i>
</pre>

</body>
</section>
<section>
<title>profiles 변경하기</title>
<body>

<p>
이제 여러분은 gcc-config profile과 Portage profile을 변경해야 한다. 
</p>

<pre caption="">
# <i>cd /etc</i>
# <i>rm make.profile</i>
# <i>ln -s ../usr/portage/profiles/default-x86-1.4 make.profile</i> <comment>("x86"을 여러분의 아키텍처로 교체하라)</comment>
</pre>

<pre caption="">
# <i>gcc-config --list-profiles</i> <comment>(여러분이 방금 emerge한 버전을 기록하고 아래에서 사용하라)</comment>
# <i>gcc-config i686-pc-linux-gnu-3.2.2</i> <comment>(버전을 여러분이 기록한 것으로 바꾸라)</comment>
</pre>

</body>
</section>
<section>
<title>툴체인 다시 컴파일하기</title>
<body>

<p>
이제 여러분은 여러분의 핵심 툴체인을 새로운 컴파일러를 이용하여
다시 컴파일해야 한다. 같은 쉘 위에서 계속 작업하기를 원한다면,
gcc-config가 여러분의 환경에 적용되도록 <c>source /etc/profile</c>을
실행해야 한다. 아래와 같이 명령하여 glibc와 binutils를 새로운 컴파일러를
이용하여 다시 설치(emerge)한다.
</p>

<pre caption="">
# <i>emerge glibc binutils</i>
</pre>

<warn>
2.2나 더 오래된 버전의 glibc에서 2.3버전으로 업그레이드하는 경우가
대부분일 것이다. 업그레이드 후에 다운그레이드하지 말아라.
다운그레이드 작업은 glibc 2.3버전을 기반으로 컴파일된 소프트웨어가
작동하지 않게 만들 것이며, 여러분의 시스템을 쓸모 없게 만들 것이다.
</warn>

</body>
</section>
<section>
<title>새로운 컴파일러를 이용하여 모든 소프트웨어 다시 컴파일하기</title>
<body>

<p>
이제 여러분은 아래와 같이 명령을 실행하여 여러분의 시스템에 있는 모든 것을
새로운 컴파일러를 이용하여 다시 컴파일할 수 있다.
</p>

<pre caption="">
# <i>emerge -e world</i>
</pre>

<note>
만약에 이 명령이 에러로 인해 실패한다면,
실패한 지점부터 작업을 다시 시작하기 위해 <c>emerge --resume</c> 명령을
이용할 수 있다. 이 작업은 Portage 2.0.47이나 그 이상의 버전을 요구한다.
</note>

</body>
</section>
</chapter>
</guide>

