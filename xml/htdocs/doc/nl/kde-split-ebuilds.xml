<?xml version='1.0' encoding='UTF-8'?>

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/nl/kde-split-ebuilds.xml,v 1.3 2012/06/30 18:42:54 swift Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide disclaimer="obsolete" lang="nl">

<title>De KDE gesplitste ebuilds HOWTO</title>

<author title="Auteur">
  <mail link="danarmak@gentoo.org">Dan Armak</mail>
</author>
<author title="Redacteur">
  <mail link="greg_g@gentoo.org">Gregorio Guidi</mail>
</author>
<author title="Vertaler">
  <mail link="frank.goubert@gmail.com">Frank Goubert</mail>
</author>

<abstract>
De "gesplitste ebuilds" zijn in portage geïntroduceerd met de komst van KDE 3.4.
Deze pagina documenteert de redenen acher deze overgang, de nieuwe mogelijkheden
en hoe je kan upgraden van de oude "monolithische" ebuilds.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.8</version>
<date>2006-09-28</date>

<chapter>
<title>De gesplitste KDE Ebuilds</title>
<section>
<title>Wat zijn ze?</title>
<body>

<p>
Tot januari 2005 waren de monolithische ebuilds de enige KDE ebuilds in Portage.
Dat wil zeggen dat er slechts 15 KDE ebuilds waren (<c>kdebase</c>,
<c>kdenetwork</c>, ...) en elke ebuild installeerde een hoop applicaties die in
feite niet van elkaar afhankelijk waren. Dit was duidelijk geen optimale
situatie en niet erg "Gentoo", maar werd lange tijd getolereerd.
</p>

<p>
De nieuwe gesplitste ebuilds (<c>konqueror</c>, <c>kmail</c>, ...) zetten de
situatie recht door aparte ebuilds te voorzien voor alle KDE-applicaties. Dit
gaf ons een totaal van 330 nieuwe ebulids in de categorie kde-base.
</p>

<p>
We voorzien nog steeds monolithische ebuilds voor KDE 3.5, en ze kunnen samen
met de gesplitste gebruikt worden. De gesplitste ebuilds zijn nu wel de
standaard en voor KDE 4.0 zullen er geen monolithische meer zijn.
</p>

<p>
Tenslotte moet er ook vermeld worden dat er gesplitste ebuilds zijn voor
KOffice. Deze voorzien <c>kword</c>, <c>kugar</c>, enz. als gescheiden
pakketten.
</p>

</body>
</section>
<section>
<title>Hoe de gesplitste ebuilds installeren?</title>
<body>

<p>
De laatste stabiele release op het moment van dit schrijven is 3.5.2. De laatste
onstabiele (~arch) is 3.5.5. Gesplitste en monolithische ebuilds voor beide
opleveringen zijn in Portage beschikbaar.
</p>

<ul>
  <li>
    Om een bepaald pakket zoals kmail te installeren, gebruik je heel eenvoudig
    <c>emerge kmail</c>.
  </li>
  <li>
    Om de basis van de KDE-omgeving die je toelaat je aan te melden in een
    minimale KDE-sessie, gebruik je <c>emerge kdebase-startkde</c>.
  </li>
  <li>
    Om hetzelfde te hebben als één van de monolithische pakketten,
    bijvoorbeeld alle pakketten uit <c>kdebase</c> via gesplitste ebuilds,
    gebruik je <c>emerge kdebase-meta</c> (of <c>kdepim-meta</c>, ...). Als je
    absoluut alle beschikbare gesplitste KDE ebuilds wil, typ je
    <c>emerge kde-meta</c>.
  </li>
</ul>

</body>
</section>
<section>
<title>Hoe upgraden van de monolithische naar de gesplitste ebuilds?</title>
<body>

<p>
Als je nu KDE 3.3.x hebt, kan je <c>emerge kde-meta</c> gebruiken om de 3.5.x
ebuilds te installeren, zonder je bestaande installatie te verstoren.
</p>

<p>
Als je nu de KDE 3.4.x of 3.5.x monolithische ebuilds geïnstalleerd hebt, moet
je ze desinstalleren voor je de gesplitste kan installeren. Dit proces kan om
de beurt voor elke monolithische ebuild gebeuren, je moet ze niet allemaal in
één keer desinstalleren.
</p>

<p>
Als je twijfelt, denk er dan aan dat er blokkerende afhankelijkheden zitten
tussen elke monolithische ebuild en de gesplitste ebuilds die eruit afgeleid
zijn. Portage laat je niet toe een illegale status te creëren, dus elke
installatie of desinstallatie die Portage toelaat, is goed.
</p>

</body>
</section>
<section>
<title>Voordelen van de gesplitste ebuilds</title>
<body>

<p>
Hier volgt een korte lijst van wat we winnen door de overschakeling naar
gesplitste ebuilds:
</p>

<ul>
  <li>
    De meeste KDE pakketten worden niet aangepast tussen twee kleine
    opleveringen van KDE. De update van 3.3.1 naar 3.3.2 bijvoorbeeld, wijzigde
    minder dan 100 pakketten van de 320. Gesplitste pakketten laten ons toe
    enkel nieuwe ebuilds te maken voor de pakketten die effectief gewijzigd
    zijn, wat (in dit voorbeeld) meer dan twee derden van de compilatietijd
    bespaart bij een upgrade.
  </li>
  <li>
    Patches hebben gewoonlijk maar effect op een specifiek pakket. Met
    gesplitste ebuilds kunnen ze sneller getest, goedgekeurd en gecommit worden,
    en de ontwikkelaars hebben minder te doen. Bovendien zal de gebruiker minder
    tijd nodig hebben bij de upgrade. Dit is vooral belangrijk bij
    beveiligingsupdates.
  </li>
  <li>
    Gebruikers van andere desktops en kleinere Vensterbeheerders kunnen nu de
    KDE-applicaties installeren die ze leuk vinden, zonder de grote overhead van
    de rest zoals <c>kdebase</c> of <c>kdepim</c>.
  </li>
  <li>
    Gebruikers kunnen de pakketten die ze geïnstalleerd hebben fijnstellen.
    Redenen waarom je dit wil doen:
    <ul>
      <li>
        Je zit in met de compilatietijd. <c>emerge kdebase kdepim kdenetwork</c>
        duurt veel te lang wanneer je enkel <c>konqueror</c>, <c>kmail</c> en
        <c>kopete</c> nodig hebt. Bovendien, compilatietijd is geld.
      </li>
      <li>
        Je zit in met schijfgebruik. Elke ongebruikt pakket is een aantal MB in
        de poriën van je schijfsectoren. Een schijf met meer vrije ruimte, ademt
        vrij; het is een snelle, blije schijf.
      </li>
      <li>
        Je zit in met de veiligheid van je systeem. Alle geïnstalleerde
        software is een potentiële bron van gevaar. Er is geen excuus voor
        ongebruikte software die ergens rondslingert.
      </li>
      <li>
        Je bewandelt braaf het <uri link="/main/en/philosophy.xml">Gentoo
        Pad (en)</uri> en je kan er (zoals wij) niet tegen dat pakketten
        gebundeld worden en aan de gebruiker opgelegd worden.
      </li>
    </ul>
  </li>
  <li>
    Tenslotte laten de gesplitste ebuilds ons toe meer flexibiliteit te bieden
    wat betreft USE-vlaggen bij compilatie.
  </li>
</ul>

</body>
</section>
<section>
<title>Samenwerking van gesplitste en monolithische ebuilds</title>
<body>

<p>
Gesplitste en monolithische ebuilds kunnen vrij gemengd worden. De enige
beperking is dat een monolithische ebuild niet geïnstalleerd kan worden samen
met een gesplitste die ervan is afgeleid. Er zijn blokkerende afhankelijkheden
die dit afdwingen, je kan dus alles doen wat emerge je toelaat.
</p>

<p>
Normaal gezien is er geen enkele reden om zo'n gemengde configuratie te
gebruiken. In feite zou je altijd de gesplitste ebuilds moeten gebruiken,
behalve voor uitzonderlijke gevallen zoals heel traag compilerende systemen
(mips).
</p>

<p>
De gesplitste ebuilds zijn ook de standaard ebuilds. Dit wil zeggen dat een
andere ebuild die afhangt van een KDE-applicatie de gesplitste ebuild zal
willen installeren. De overeenkomstige monolithische ebuild zal echter ook
die afhankelijkheid verzorgen. Je kan dus manueel de monolithische ebuild
installeren en daarna de ebuild die ervan afhangt.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Performantieperikelen</title>
<section>
<title>Waarom gesplitste ebuilds traag zijn</title>
<body>

<p>
Het werd al eerder
<uri link="http://bugs.gentoo.org/show_bug.cgi?id=11123">gezegd</uri> dat
gesplitste ebuilds veel meer tijd zouden nodig hebben om geïnstalleerd te worden
dan de monolithische, door de overhead van het uitpakken en uitvoeren van
./configure van elk pakket. Een volledige <c>emerge kde-meta</c> zou 20 à 30%
langer kunnen duren dan een klassieke <c>emerge kde</c>, onaanvaardbaar bij een
reeds lang durende compilatie.
</p>

<p>
Verder voeren de gesplitste ebuilds op die moment altijd <c>make -f
admin/Makefile.cvs</c> uit (dit wil zeggen een uitvoering van autoconf,
automake, ... en verschillende KDE-gerelateerde scripts). Dit veroorzaakt een
bijkomende vertraging van ongeveer dezelfde grootte als de configuratierun.
</p>

<p>
Tenslotte moet een gesplitste ebuild uitgepakt worden uit een grote tarball. Dit
is trager dan het uitpakken van een aangepaste, kleine tarball. Het aanmaken van
zulke kleine tarballs voor het op autotools gebaseerde systeem van KDE 3.x is
echter moeilijk.
</p>

<p>
Het is de moeite om hier nogmaals te herhalen dat met gesplitste ebuilds de
compilatietijd bij een KDE-upgrade sterk verkort kan worden door enkel de
gewijzigde pakketten te upgraden. Het voordeel van zo'n enkele update
overschaduwt meestal de overhead opgelopen bij de oorspronkelijke installatie.
</p>

<p>
Tenslotte is het installeren van alle KDE-pakketten enkel nodig indien je ze
wil ontdekken of wanneer je een multi-gebruikersomgeving opzet. De meeste mensen
gebruiken echter slechts een fractie van de meer dan 300 beschikbare
KDE-pakketten. Iedereen die zich iets van de compilatietijd aantrekt, kan meer
tijd winnen door het selectief installeren van de nodige pakketten dan ze
tijd zouden verliezen door de bijkomende overhead.
</p>

</body>
</section>
<section>
<title>Hoe gesplitste ebuilds sneller worden gemaakt</title>
<body>

<p>
De meeste of zelf alle performantieperikelen van de gesplitste ebuilds hangen
samen met autotools met name autoconf, automake en andere hulpmiddelen die het
<c>./configure;make;make install</c> bouwsysteem van KDE 3.x beheren.
</p>

<p>
KDE 4 zal (voor zover we op dit moment weten) een volledig nieuw bouwsysteem
bevatten, dat onder andere de tijd die het oude bouwsysteem nodig heeft
met <c>make -f admin/Makefile.common; ./configure</c>, sterk zal verkorten.
Hopelijk zal het daarbij ook gemakkelijker zijn om een kleine tarball voor elke
ebuild te voorzien door de kost te verlagen die het genereren van de bijhorende
configuratiescripts meebrengt.
</p>

<p>
Eerder al is er overwogen om <c>confcache</c> te gebruiken om de kost van het
herhaaldelijk uitvoeren van door autoconf gegenereerde configuratiescripts te
verlagen. <c>Confcache</c> is een manier om de resultaten van de
configuratietests op te slaan. Er is echter nog <c>confcache</c>-implementatie
in de stabiele (2.1) Portage-boom. Zelfs indien die in de toekomst wordt
toegevoegd, zou het te laat kunnen zijn om het in de KDE ebuilds te gebruiken;
we zouden kunnen wachten op KDE 4.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Gesplitste ebuilds - veel gestelde vragen (FAQ)</title>
<section>
<title>Waarom missen sommige pakketten de nieuwe ebuildversies?</title>
<body>

<p>
Zoals hierboven uitgelegd worden niet alle programma's aangepast bij kleine KDE
opleveringen, en dus krijgen ze niet allemaal nieuwe ebuild versies.
Bijvoorbeeld, libkdenetwork was niet aangepast in 3.5.0_beta2 dus de nieuwste
ebuild beschikbaar voor die oplevering was 3.5_beta1.
</p>

<p>
Dit wordt enkel gedaan om de compilatietijd tijdens een upgrade te verminderen.
Als we een libkdenetwork-3.5.0_beta2 ebuild hadden gemaakt, zou het exact
dezelfde bestanden als de 3.5_beta1 ebuild hebben geïnstalleerd. De
verschillende afhankelijkheden worden geupdate om correct te werken. Dit wil
zeggen dat geen enkele ebuild van libkdenetwork-3.5.0_beta2 zal afhangen, want
die bestaat niet.
</p>

</body>
</section>
<section>
<title>Is dit nog niet mogelijk met DO_NOT_COMPILE?</title>
<body>

<p>
DO_NOT_COMPILE is een omgevingsvariabele die intern in het KDE bouwsysteem wordt
gebruikt. Het laat toe selectie submappen bij compilatie uit te sluiten. Sommige
mensen gebruikten het om subsets van monolithische KDE ebuilds te compileren.
Het uitvoeren van <c>DO_NOT_COMPILE=konqueror emerge kdebase</c> zou dus kdebase
installeren zonder het programma <c>konqueror</c>.
</p>

<p>
DO_NOT_COMPILE was echter nooit bedoeld als interface voor de automatische
bouw via een pakketbeheerder. Het werkt niet, het kan je systeem stuk maken en
het werd nooit ondersteund. We vragen iedereen om dit niet te gebruiken.
</p>

<p>
Hier volgt een onvolledige lijst van problemen met DO_NOT_COMPILE:
</p>

<ul>
  <li>
    Het maakt de afhankelijkheidscontroles van Portage volledig stuk. Portage
    weet niets over DO_NOT_COMPILE en denk dat het hele monolithische pakket
    geïnstalleerd is en voldoet voor de afhankelijkheden van andere pakketten.
    Dit kan ervoor zorgen dat andere pakketten niet geïnstalleerd of niet
    uitgevoerd kunnen worden.
  </li>
  <li>
    Het dwingt de gebruiker om de namen en betekenissen van alle verschillende
    bestaande submappen van de KDE-modules te kennen. Weinig of geen gebruikers
    kennen deze, tenzij de KDE-ontwikkelaars, dus ze kunnen DO_NOT_COMPILE niet
    gepast gebruikten.
  </li>
  <li>
    De submappen van de KDE-modules kunnen onderling afhankelijkheden hebben,
    een bepaalde bouwvolgorde eisen of willen een bepaalde map aanwezig hebben,
    ook al moet ze niet geïnstalleerd worden, enzovoort. We stoppen heel veel
    werk in de gesplitste ebuilds om ze correct te doen werken. DO_NOT_COMPILE
    is geen goed hulpmiddel om dezelfde resultaten te krijgen, zelfs als de
    gebruiker genoeg kennis bezit. Het enige dat je ermee kan doen is enkele
    programma's uit te sluiten bij het compileren. Het is praktisch onmogelijk
    om het te gebruiken om slechts enkele programma's uit modules als
    <c>kdebase</c> of <c>kdepim</c> te installeren.
  </li>
  <li>
    Als ik gisteren kmail installeerde en ik wil vandaag korn erbij, zal ik bij
    gebruik van DO_NOT_COMPILE kmail opnieuw compileren. Op deze manier is
    DO_NOT_COMPILE altijd trager dan gesplitste ebuilds.
  </li>
  <li>
    DO_NOT_COMPILE kan niet gebruikt worden om geprecompileerde pakketten (zoals
    GRP) te maken die één enkel KDE-programma bevatten.
  </li>
</ul>

</body>
</section>
<section>
<title>Wordt er geen te zware druk gezet op de Gentoo KDE beheerders?</title>
<body>

<p>
Verrassend genoeg wordt deze vraag dikwijls gesteld. Ik ben blij dat de
gebruikers zo bezorgd zijn over de beheerders. Laat dit het moment zijn waarop
ik jullie kan verzekeren dat we uit vrije wil voor de gesplitste ebuilds hebben
gekozen en dat we geloven dat deze kunnen blijven onderhouden. Bovendien is er
geen enkele kans om ons nog om te praten... :-)
</p>

<p>
Voor de volledigheid wil ik ook vermelden dat de beheerders van andere
architecturen geklaagd hebben over de bijkomende werklast bij het testen van
zoveel verschillende ebuilds. We werken eraan dit probleem op te lossen en dit
is de belangrijkste reden waarom monolithische ebuilds nog beschikbaar zijn voor
KDE 3.5.
</p>

</body>
</section>
<section>
<title>Gaan de oude monolithische ebuilds verwijderd worden?</title>
<body>

<p>
We zijn dit in de toekomst van plan. Er zullen echter monolithische en
gesplitste ebuilds zijn voor alle KDE 3.x opleveringen.
</p>

<p>
Als je monolithische ebuilds verkiest boven gesplitste,
<uri link="http://bugs.gentoo.org">vertel ons</uri> dan alsjeblief waarom.
</p>

</body>
</section>
<section>
<title>Er zijn teveel ebuilds! Hoe vind ik diegene die ik nodig heb?</title>
<body>

<p>
Allereerst als je pakket kwam met kdebase, kan je nog steeds
<c>emerge kdebase-meta</c> gebruiken, met dezelfde resultaten als de installatie
van de monolithische <c>kdebase</c>. Er is dus niet op achteruitgegaan sinds
de gesplitste ebuilds.
</p>

<p>
Natuurlijk gelden ook alle gebruikelijke manieren om een pakket te vinden. Hoe
zou je een ebuild vinden als het een Gnome-programma was? Je moet minstens de
naam kennen van het programma dat je zoekt.
</p>

<p>
De situatie zou misschien verbeterd kunnen worden door wat meer -meta ebuilds
te voorzien. Deze bevatten slechts een lijst van afhankelijkheden, dus kosten
ons niets. Dit is nog niet beslist. Het zou interessant zijn om eerst de
Portage sets functionaliteit te hebben, voor we dit uitgebreid beginnen doen.
</p>

</body>
</section>
<section>
<title>Hoe kan ik alle ebuilds die afgeleid zijn van een bepaald pakket
uitlijsten of desinstalleren?</title>
<body>

<p>
Het doel is hier om alle gesplitste ebuilds uit te lijsten die afgeleid zijn van
bijvoorbeeld de <c>kdebase</c> monolithische ebuild. Een geschike implementatie
(zoals <uri link="/proj/en/glep/glep-0021.html">GLEP 21</uri>) zou dit triviaal
maken. Vandaag moet je je echter vertrouwd maken met de details van KDE's
eclassimplementatie. Als je dus één van deze benaderingen gebruikt in een script
dat niet privé is, laat het ons weten.
</p>

<p>
De kde-functions.eclass definieert functies genaamd get-parent-package() en
get-child-packages() die de vertaling voor jou doen. Deze twee functies zijn
de correcte manier om deze taak voor een ebuild te doen in een extern
bashscript. Hier is een voorbeeld:
</p>

<pre caption="Voorbeeld van gebruik van de kde-functies">
$ <i>function die() { echo $@; } # om fouten te rapporteren</i>
$ <i>source /usr/portage/eclass/kde-functions.eclass</i>
$ <i>get-parent-package konqueror # zal niet werken, je moet de volledige naam geven</i>
<i>Package konqueror not found in KDE_DERIVATION_MAP, please report bug # fout getoond</i>
$ <i>get-parent-package kde-base/konqueror # volledige pakketnaam</i>
<i>kde-base/kdebase # resultaat getoond</i>
$ <i>get-child-packages kde-base/kdebase</i>
<i> # (lange lijst van pakketten wordt hier getoond)</i>
</pre>

<p>
Als je script niet in bash is, kan je met grep de (meerlijnige) definitie van
de variabele KDE_DERIVATION_MAP die hierboven gebruikt wordt, uit
kde-functions.eclass halen. Deze variabele bevat een door witruimte gescheiden
lijst van woorden. Elk paar van twee opeenvolgende woorden mappen een
ouderpakket op een kindpakket nl. een gesplitste ebuild.
</p>

</body>
</section>
</chapter>
</guide>
