<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: cron-guide.xml,v 1.3 2012/04/18 18:30:30 swift Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide lang="nl">
<title>Gentoo Linux Cron Gids</title>

<author title="Auteur">
  <mail link="airuike@gmail.com">Eric Brown</mail>
</author>
<author title="Redacteur">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Vertaler">
  <mail link="diox@gentoo.org">Dimitry Bradt</mail>
</author>


<abstract>
Deze gids beschrijft hoe je cron kunt instellen en gebruiken.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.7</version>
<date>2006-02-20</date>

<chapter>
<title>De basis van Cron</title>
<section>
<title>Wat doet cron?</title>
<body>

<p>
Cron is een programma die in de achtergrond werkt en geplande taken uitvoert op
basis van een input van het commando <c>crontab</c>. Het voert deze daak uit
door iedere minuut te waken en controleren als er geen cron-taken zijn in de
gebruiker crontabs.
</p>

<note>
Merk op dat <e>crontab</e> de naam van een lijst van cron-taken is maar ook de
naam van het commando om die lijst aan te passen.
</note>

</body>
</section>
<section>
<title>De "de facto" cron</title>
<body>

<p>
Er zijn op zijn minst drie implementaties voor jou om te kiezen in de portage.
Ze leveren allemaal een gelijkaardige interface, namelijk het gebruik van
<c>crontab</c> of een gelijkaardig commando. Er is ook een gerelateerd
hulpmiddel die Anacron heet, die bedoeld is om te werken met cron op systemen
die niet constant werken.
</p>

<p>
Het is ook niets waard om alle beschikbare cron pakketten te installeren die
afhangen van <c>sys-process/cronbase</c>. Dit pakket is technisch gezien niet
afhankelijk van de cron pakketten, maar het levert een cron-gelijkaardige
functionaliteit die gebruikers kunnen apreciëren.
</p>

<p>
Vooraleer we beginnen te werken met cron, moet je kiezen welke implementatie je
wilt gebruiken. Voor je handigheid, heb ik over elke versie informatie
verzamelt. Deze is hieronder te vinden.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Welke cron zoek jij?</title>
<section>
<title>Vixie cron</title>
<body>

<p>
Vixie cron is een volledige cron met veel functies die gebaseerd is op SysV
cron. Elke gebruikers heeft zijn eigen crontab en heeft de mogelijkheid om zijn
omgevingsvariabelen binnen crontab in te stellen. Niet zoals andere cron
variaties, bied het ook ondersteuning aan voor SELinux en PAM. Het ondersteund
minder architecturen dan Dcron, maar meer dan Fcron.
</p>

<p>
Functies van <c>sys-process/vixie-cron</c>:
</p>

<ul>
<li>
  Ondersteuning voor SELinux
</li>
<li>
  Ondersteuning voor PAM <path>/etc/security/limits.conf</path>
</li>
<li>
  Instellen van de omgevingsvariabelen in crontabs (PATH, SHELL, HOME, enz.)
</li>
<li>
  Elke gebruiker kan zijn eigen crontab, toegangsrechten laten controleren door
  cron door cron.allow en cron.deny
</li>
</ul>

</body>
</section>
<section>
<title>Dillon's Cron</title>
<body>

<p>
Dcron's doel is een heel simpele, elegante en veilige implementatie zijn van
cron. Het laat niet toe om de omgegingsvariabelen te specifiëren in trabs en
alle cron-taken worden uitgevoert van <path>/bin/sh</path>. Zoals Vixie cron,
heeft elke gebruiker zijn eigen crontab.
</p>

<p>
Eigenschappen van <c>sys-process/dcron</c>:
</p>

<ul>
  <li>
    Snel, simpel en vrij van onnodige eigenschappen
  </li>
  <li>
    Toegang tot <c>crontab</c> is gelimiteerd tot de cron groep, m.a.w. hangt
    het niet af van externe faculteiten
  </li>
</ul>

</body>
</section>
<section>
<title>Fcron</title>
<body>

<p>
Fcron's doel is het vervangen van Vixie cron en Anacron. Het is ontworpen om te
werken op systemen die niet constant werken en is gebouwd met meerdere
eigenschappen. Het heeft taak opstartbeperkingen, controles van
taakrangschikking, de mogelijkheid om goede waarden aan taken te geven en de
mogelijkheid om taken te plannen als het systeem opstart. Bekijk ook <uri
link="http://fcron.free.fr/">fcron's homepagina</uri> voor meer informatie.
</p>

<p>
Eigenschappen van <c>sys-process/fcron</c>:
</p>

<ul>
  <li>
    Ontworpen om te werken op systemen die niet constant werken, m.a.w het kan
    een taak herstarten moest het niet uitgevoert is geweest
  </li>
  <li>Instellen van omgevingsvariabelen en vele andere opties in crontabs</li>
  <li>
    Elke gebruiker kan zijn eigen crontab hebben, toegang is gecontroleerd door
    cron.allow en cron.deny
  </li>
  <li>
    Verbeterde crontab syntax met ondersteuning voor veel nieuwe eigenschappen
  </li>
</ul>

</body>
</section>

<section>
<title>Anacron</title>
<body>

<p>
Anacron is geen cron programma die op de achtergrond werkt, het is iets die
meestal werkti in samenwerken met een ander. Het voert commando's uit op
bepaalde intervallen uitgedrukt in dagen en het gaat der ook niet van uit dat
het systeem constant werkt; Het zal dus taken uitvoeren die niet werden
uitgevoert terwijl het systeem niet aangeschakelt was. Anacron hangt meestal af
van een cron daemon om het iedere dag uit te voeren.
</p>

</body>
</section>
</chapter>

<chapter>
<title>cron gebruiken</title>
<section>
<title>Installatie</title>
<body>

<p>
Selecteer de cron implementatie die je het best vind, en emerge het.
</p>

<pre caption="Cron installeren">
# <i>emerge dcron</i>
# <i>/etc/init.d/dcron start</i>
# <i>rc-update add dcron default</i>
</pre>

<p>
Optioneel, als je keuze is gevallen op Fcron, installeer je best ook Anacron.
</p>

<pre caption="Installing anacron">
# <i>emerge anacron</i>
# <i>/etc/init.d/anacron start</i>
# <i>rc-update add anacron default</i>
</pre>

</body>
</section>
<section id="systemtab">
<title>Systeem crontab</title>
<body>

<p>
De post-installatie berichten van enkele cron pakketten zeggen je om <c>crontab
/etc/crontab</c> uit te voeren. Het <path>/etc/crontab</path> bestand is jouw
<e>systeem crontab</e>. Een cron installatie kan het gebruiken in samenwerking
met <c>sys-process/cronbase</c> om de scripts uit te voeren in
<path>/etc/cron.{daily,hourly,weekly,monthly}</path>. Merk ook op dat alleen
Vixie-cron geplande taken in <path>/etc/crontab</path> automatisch worden
gestart. Fcron gebruikers moeten <c>crontab /etc/crontab</c> uitvoeren als ze
veranderingen hebben gemaakt aan <path>/etc/crontab</path>.
</p>

<p>
Merk op dat de mogelijkheid er is dat geplande taken in het systeem crontab
niet tussen de cron-taken afgebeeld staan, als men <c>crontab -l</c> uitvoert.
</p>

<p>
Natuurlijk, kun je kiezen om geen crontab te gebruiken. ALs je Dcron of Fcron
verkiest, voer <c>crontab /etc/crontab</c> <e>niet</e> uit. Als je keuze
uitgaat naar Vixie-cron, zou je alle regels in <path>/etc/crontab</path> in
commentaar moeten plaatsen.
</p>

<pre caption="Alle regels in /etc/crontab in commentaar plaatsen">
# <i>sed -i -e "s/^/#/" /etc/crontab</i>
</pre>

</body>
</section>
<section>
<title>Vertrouwde gebruikers toegang geven tot cron</title>
<body>

<p>
Als je gebruikers wilt toegang verlenen om toegang te krijgen tot cron, wil je
waarschijnlijk dit hoofdstuk lezen, in het andere geval kun je overgaan naar
het volgende hoofdstuk, <uri link="#scheduling">plannen van cron-taken</uri>.
</p>

<note>
Een andere gebruiker toegang tot crontab geven, laat hem niet toe cron-taken
uit te voeren als root. Als je een gebruiker de mogelijkheid wil geven om het
root crontab aan te passen, kijk je best eens naar <c>sudo</c>. Gelieve onze
<uri link="/doc/en/sudo-guide.xml">Gentoo Sudo(ers) Gids</uri> door te nemen
voor meer details.
</note>

<p>
Het maakt niet uit welk cron pakket je gebruikt, als je een gebruiker wilt
toegang geven tot crontab, moet hij eerst in de cron groep zitten. Als
voorbeeld, als je de gebruiker <e>wepy</e> toegang wilt verlenen tot de groep
cron, zou je hetvolgende moeten uitvoeren:
</p>

<pre caption="Een gebruiker toevoegen tot de cron groep">
# <i>gpasswd -a wepy cron</i>
</pre>

<note>
Wanneer je een gebruiker toevoegt aan de cron groep, controleer dat de
gebruiker uit- en inlogt vooraleer de verandering effect heeft.
</note>

<p>
Als je <b>Dcron</b> niet gebruikt, moet je niets meer doen om een gebruiker
toegang te verlenen tot crontab. Dcron gebruikers kunnen verder gaan naar het
volgende hoofdstuk <uri link="#scheduling">plannen van cron-taken</uri>, alle
anderen, gelieve verder te lezen.
</p>

<p>
Als je <b>Fcron</b>gebruikt, moe tje <path>/etc/fcron/fcron.deny</path> en
<path>/etc/fcron/fcron.allow</path> aanpassen. De veiligste manier is om eerst
iedereen te weigeren en daarna bepaalde personen toe te staan in
<path>/etc/fcron/fcron.allow</path>.
</p>

<impo>
<b>Als <path>/etc/fcron/fcron.allow</path> nog
<path>/etc/fcron/fcron.deny</path> bestaat, zullen alle gebruikers toegang
hebben tot crontab</b>. fcron heeft een standaard <path>fcron.allow</path> die
<b>alle gebruikers toelaat</b> in de crongroep, fcrontab te raadplegen.
</impo>

<pre caption="Permissies in fcron.deny">
all
</pre>

<p>
Laten we nu zeggen dat we een gebruiker <e>wepy</e> hebben die zijn eigen taken
mag regelen, zouden we die moeten toevoegen in
<path>/etc/fcron/fcron.allow</path> als volgt:
</p>

<pre caption="Permissies in fcron.allow">
wepy
</pre>

<p>
Als je <b>Vixie cron</b> verkiest, wil je waarschijnlijk enkel
<path>/etc/cron.allow</path> aanpassen.
</p>

<impo>
Het is belangrijk om te wetend at enkel <path>/etc/cron.allow</path> bestaat,
dan zullen enkel de gebruikers in de cron-groep, toegang hebben, maar als er
enkel een lege <path>/etc/cron.deny</path> bestaat, zullen alle crongroep
gebruikers, toegang hebben. <b>Laat <path>/etc/cron.deny</path> niet leeg als
je geen <path>/etc/cron.allow</path> hebt.</b>
</impo>

<p>
Bijvoorbeeld, als je wilt teogang verstrekken tot de gebruiker <e>wepy</e>, zou
je hem toevoegen tot <path>/etc/cron.allow</path> als volgt:
</p>

<pre caption="Permissies in /etc/cron.allow">
wepy
</pre>

</body>
</section>

<section id="scheduling">
<title>plannen van cron-taken</title>
<body>

<p>
Het proces van het aanpassen van crontabs is verschillend voor elk pakket, maar
ze ondersteunen allemaal de zelfde basis set van commando's: toeveogen of
vervangen in crontabs. De volgende lijst toont je hoe je die commando's voor
elk pakket kunt uitvoeren.
</p>

<table>
<tr>
  <th>Versie</th>
  <th>Aanpassen van crontab</th>
  <th>Verwijderen van crontab</th>
  <th>Niewe crontab</th>
  <th>Lijst van cron-jobs</th>
</tr>
<tr>
  <ti>dcron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -d <e>[gebruiker]</e></c></ti>
  <ti><c>crontab <e>bestand</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
<tr>
  <ti>fcron</ti>
  <ti><c>fcrontab -e</c></ti>
  <ti><c>fcrontab -r <e>[gebruiker]</e></c></ti>
  <ti><c>fcrontab <e>bestand</e></c></ti>
  <ti><c>fcrontab -l</c></ti>
</tr>
<tr>
  <ti>vixie-cron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -r <e>-u [gebruiker]</e></c></ti>
  <ti><c>crontab <e>bestand</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
</table>

<note>
Als je het verwijder commando gebruikt, let er dan op dat je een argument
meegeeft; als dit niet geval is zal die de huidige crontab van de gebruiker
verwijderen.
</note>

<note>
Fcron heeft ook een snelkoppeling van <c>crontab</c> naar <c>fcrontab</c>.
</note>

<p>
Vooraleer we een van deze commando's kunnen gebruiken, moet je eerst crontab
zelf verstaan . Elke lijn in een crontab moet vijf tijd velden voorstellen in
de volgende volgorde: the minuten (0-59), uren (0-23), dagen (1-31), maanden
(1-12), en dagen van de week (0-7, Maandag is 1, Zondag is 0 en 7). De dagen
van de week en maand kunnen gespecifieerd worden door een drie-letter
afkorting zoals mon, tue, jan, feb, enz. Elk veld kan ook een een reeks waarden
bevatten (zoals 1-5 or mon-fri), een door een komma gescheiden lijst van
waarden (zoals 1,2,3 or mon,tue,wed) of een lijst van waarden met een
<e>stap</e> (zoals 1-6/2 als 1,3,5).
</p>

<p>
Dit klinkt misschien een beetje verwarrend, maar met enkele voorbeelden, zul je
zien dat het niet zo moeilijk is als het klinkt.
</p>

<pre caption="Voorbeelden">
<comment># Voert /bin/false elke minuut uit</comment>
*     *     *     *     *        /bin/false

<comment># Voert /bin/false uit om 1:35 op maandag,dinsdag,woensdag en de 4de van
elke maand</comment>
35    1     4     *     mon-wed  /bin/false

<comment># Voert /bin/true uit op 22:25 de 2de maart</comment>
25    22    2     3     *        /bin/true

<comment># Voert /bin/false uit om 2:00 elke maandag, woensdag en vrijdag</comment>
0     2     *     *     1-5/2    /bin/false
</pre>

<note>
Merk op hoe je specifieke dagen van de week en dagen van de maand moet
specifiëren vooraleer ze gecombineerd zijn. Als je een * plaats voor een van de
twee, krijgt de andere prioriteit, terwijl een * voor bijde gewoon elke dag
betekend.
</note>

<p>
Om te testen wat je juist hebt geleerd, laten we door deze stappen gaan en
effectief enkele cron-taken gaan instellen. Laten we eerst een bestand maken
dat <path>crons.cron</path> heet, en laten we die als volgt aanpassen.
</p>

<pre caption="Aanpassen van crons.cron">
$ <i>nano crons.cron</i>
<comment>#Mins  Hours  Days   Months  Day of the week</comment>
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
</pre>

<p>
Nu kunne we een kunnen we die crontab aan het systeem crontab toevoagen met het
"nieuw commando" van de tabel hierboven.
</p>

<pre caption="Een niewe crontab">
# <i>crontab crons.cron</i>
</pre>

<note>
Je zult niet echt de teruggave van deze commando's zien tenzij je omleiding
gebruikt.
</note>

<p>
Om te conterleren dat de cron-taken die je plande uitvoert worden, gebruiken we
het gepaste <e>list command</e> van de bnovenstaande tabel.
</p>

<pre caption="Een lijst maken van cron-jobs">
# <i>crontab -l</i>
</pre>

<p>
Je zou een lijstje moeten zie die gelijkaardig is aan <path>crons.cron</path>,
indien niet, heb je warschijnlijk het foute commando gebruikt om je cron toe te
voegen.
</p>

<p>
Deze crontab zou moeten elke minuut "I really like cron" teruggeven. Natuurlijk
zou je dit alleen doen als je erg veel van cron houdt. De crontab zal ook elke
dag in januari en frebuari "I like cron a little" teruggeven. Het zal ook om
3:10 op de eerste januari "I don't really like cron" teruggeven.
</p>

<p>
Als je anacron gebruikt, zou je moeten verder lezen, in de andere gevallen ga
je verder naar het volgende hoofdstuk, <uri
link="#editing">aanpassen van crontabs</uri>.
</p>

<p>
Anacron gebruikers willen waarschijnlijk <path>/etc/anacrontab</path>
aanpassen. Dit bestand heeft vier velden: Het nummer van de dagen tussen elke
startr, de tussentijd in minuten na welke het start, de naam van de taak, en
het commando waarin het moet starten.
</p>

<p>
Bijvoorbeeld, om het <c>echo "I like anacron"</c> elke 5 dagen, 10 minuten na
Anacron gestart is, te laten uitvoeren, zou je het volgende moeten hebben:
</p>

<pre caption="/etc/anacrontab">
5 10 wasting-time /bin/echo "I like anacron"
</pre>

<p>
Anacron verlaat echter alle taken in anacrontab wanneer die uitgevoert zijn,
dus als je wilt dat deze elkda dag zijn taken controleert, zul je cron moeten
gebruiken. De instructies op het ieinde van het hoofdstuk zullen je zeggen dit
te doen.
</p>

</body>
</section>
<section id="editing">
<title>aanpassen van crontabs</title>
<body>

<p>
Laten we beginnen met een realistische gedachte, je wilt niet dat je systeem je
zegt hoeveel je van cron houdt elke minuut. Als een volgende stap, laten we dit
verwijderen door de gepaste <e>remove command</e> van de bovenstaande tabel
gebruiken. We zullen daarna ook een lijstje opvragen van alle taken, gewoon om
te controleren dat het goed is verlopen.
</p>

<pre caption="Verwijderen van een crontab">
# <i>crontab -d</i>
# <i>crontab -l</i>
</pre>

<p>
Je zou geen verschil moeten zien in de teruggave van <c>crontab -l</c>. Als je
geen taken ziet, wil dat zeggen dat je faalde om de crontab te verwijderen, en
dat je zou moeten controleren dat je de correcte <e>remove command</e> voor je
cron pakket hebt gebruikt.
</p>

<p>
Nu je een schone lei hebt, laten we iets handig in de <b>root</b> crontab
stoppen. De meeste mensen willen <c>updatedb</c> elke week uitvoeren.
Controleer dat <c>slocate</c> goed werkt. Om het toe ge voegen aan je crontab,
laten eerst <path>crons.cron</path> terug aanpassen zodat het er als volgt
uitziet:</p>

<pre caption="Een echte crontab">
22 2 * * 1    /usr/bin/updatedb
</pre>

<p>
Dit zou er voor zorgen dat cron elke maandag morgen om 2:22 A.M. de taak
uitvoert. Voeg eje crontab nu met het juiste <e>new command</e> toe uit de
bovenstaande tabel.
</p>

<pre caption="Een lijstje maken van de cron-taken">
# <i>crontab crons.cron</i>
# <i>crontab -l</i>
</pre>

<p>
Laten we nu zeggen dat je <c>emerge --sync</c> wilt toevoegen aan je dagelijkse
plannen. Je kunt dit doen door <path>crons.cron</path> aan te passen en
<c>crontab crons.cron</c> te gebruiken, net als daarjuist, of je kunt het
juiste <e>edit command</e> gebruiken van de bovenstaande tabel. Het geeft je
een juiste manier om de gebruikers crontab aan te passen, zonder af te hangen
van externe bestanden zoals <path>crons.cron</path>.
</p>

<pre caption="Een crontab aanpassen">
# <i>crontab -e</i>
</pre>

<p>
Dit zou de editor van de gebruiker's crontab moeten openen met een
<e>editor</e>. We willen <c>emerge --sync</c> elke dag om 6:30 gestart hebben,
dus laten we het op de volgende manier aanpassen:
</p>

<pre caption="Een echte crontab">
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
<comment>(Als je anacron gebruikt, voegen de volgende lijn toe)</comment>
30 7 * * *    /usr/sbin/anacron -s
</pre>

<p>
Nogmaals, controleer de cron-taken lijst zoals we in het vorige voorbeeld
gedaan hebben om te controleren dat de taken die geplant zijn, toegevoegt zijn.
Als ze daar allemaal zijn, ben je klaar.
</p>

</body>
</section>
</chapter>

<chapter>
<title>cronbase gebruiken</title>
<section>
<body>

<p>
Zoals eerder vermeld, hangen alle cron-pakketten af van
<c>sys-process/cronbase</c>. Het cronbase pakket maakt
<path>/etc/cron.{hourly,daily,weekly,monthly}</path> aan, en een script die
<c>run-crons</c> heet. Je hebt waarschijnlijk ook gemerkt dat de standaard
<path>/etc/crontab</path> iets zoals dit bevat:
</p>

<pre caption="Standaard systeem crontab">
*/15 * * * *     test -x /usr/sbin/run-crons &amp;&amp; /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
</pre>

<p>
Om te vermijden te veel uit te wijden,, kunnen we gewoon aannemen dat deze
commandos effectief je uurlijkse, dagelijkse, wekelijkse en maandelijkse
scripts uitvoert. De methode van het plannen van cron-taken heeft enkele
belangrijke voordelen:
</p>

<ul>
  <li>
    Ze zullen starten zelfs als je computer uit was wanneer ze geplant waren.
  </li>
  <li>
    Het is gemakkelijk voor onderhouders een script te plaatsen in die goed
    bepaalde plaatsen
  </li>
  <li>
    Je weet perfect waar je crontaken geplaatst zijn, dit maakt het makkelijk
    voor je om een backup te maken en je systeem herstellen
  </li>
</ul>

<note>
Nogmaals, is het handig dat Vixiecron automatisch <path>/etc/crontab</path>
leest, terwijl dcron en fcron dit niet doen. Gelieve <uri
link="#systemtab">Systeem crontab</uri> hoofdstuk te lezen om daar meer over te
leren.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Laatste Notities</title>
<section>
<title>Probleemoplossing</title>
<body>

<p>
Als je moeilijkheden ondervindt cron goed aan de praat te krijgen, wil je
waarschijnlijk door deze controlelijst gaan.
</p>

<ul>
<li>
  <b>Is cron gestart?</b><br/>
  Voer <c>ps ax | grep cron</c> uit en controleer dat het tevoorschijn komt!
</li>
<li>
  <b>Werkt cron?</b><br/>
  Probeer: * * * * * /bin/echo "foobar" &gt;&gt; /bestand_die_je_eigendom_is en
  controleer dat het werkt.
</li>
<li>
  <b>Werkt je commando?</b><br/>
  Probeer: * * * * * /bin/foobar &gt; /bestand_die_je_eigendom_is 2&gt;&amp;1
  en bekijk de fouten in /bestand_die_je_eigendom_is
</li>
<li>
  <b>Kan cron je taak uitvoeren?</b><br/>
  Controleer de cron log, meestal <path>/var/log/cron.log</path> of
  <path>/var/log/messages</path> op fouten
</li>
<li>
  <b>Zijn er dead.letter's?</b><br/>
    Cron send meestal mail waneer er een probleemis, controleer ook dat je mail
    en zoek ook naar <path>~/dead.letter</path>.
</li>
</ul>

<p>
Hou ook in het achterhoofd, dat elk cron pakket verschillend is van
eigenschappen. Controleer de man paginas voor crontab, fcrontab of anacrontab,
afhangend van wat je gebruikt.
</p>

<p>
Veel succes!
</p>

</body>
</section>
</chapter>

</guide>
