<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/nl/policy.xml,v 1.9 2012/06/30 18:42:54 swift Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!--
  Sync: 1.34
-->

<guide disclaimer="obsolete" link = "/doc/nl/policy.xml">
<title>Gentoo Linux Ontwikkelings Beleid</title>
<author title="Original Author">Owen Stampflee</author> 
<author title="Author">
    <mail link="karltk@gentoo.org">Karl Trygve Kalleberg</mail>
</author> 
<author title="Author/Editor">
    <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author> 
<author title="Editor">
    <mail link="seemant@gentoo.org">Seemant Kulleen</mail>
</author> 
<author title="Editor">
    <mail link="avenj@gentoo.org">Jon Portnoy</mail>
</author>
<author title="Editor">
    <mail link="vapier@gentoo.org">Mike Frysinger</mail>
</author>
<author title="Editor">
    <mail link="carl@gentoo.org">Carl Anderson</mail>
</author>
<author title="Editor">
    <mail link="liquidx@gentoo.org">Alastaire Tse</mail>
</author>
<author title="Editor, Translator">
    <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Translator">
	<mail link="blubber@gentoo.org">Tiemo Kieft</mail>
</author>
<author title="Translator">
	<mail link="rip7@gentoo.org">Steven Lecompte</mail>
</author>

<abstract>
Dit document heeft als doel het ontwikkelingsbeleid van Gentoo Linux uit de
doeken te doen. Het wordt regelmatig geupdate om nieuwe ontwikkelingsprocedures
te beschrijven.
</abstract>

<license/>

<version>1.0.7</version>
<date>19 April 2004</date>

<chapter>
<title>Algemene regels</title>
<section>
<body>
<p>
Hier zijn enkele algemene ontwikkelingsregels die dienen opgevolgd te worden:
</p>
<ul>

<li>
Voer altijd je aanpassingen in via repoman; gebruik <c>repoman commit</c> in
plaats van <c>cvs commit</c>.
</li>

<li>
Indien een bepaalde versie van een pakket kapot is of een zeer moeilijk
compilatie en installatieproces vereist, kijk dan hoe andere distributies het
probleem oplossen:
<ul>
<li><uri>http://cvs.mandrakesoft.com/cgi-bin/cvsweb.cgi/SPECS/</uri></li>
<li><uri>http://www.debian.org/distrib/packages</uri></li> </ul> </li>
   
<li>
Je pakket moet, wanneer ze afgewerkt en beschikbaar is, "gewoon werken" voor de
eindgebruiker. Het tweaken van het geinstalleerde product om het werkende te
krijgen moet optioneel zijn; bijgevolg moet het pakket redelijke default
instellingen bevatten.
</li>

<li>
Wees niet terughoudend bij het raadplegen van onze on-line documentatie en
ebuilds die geschreven werden en onderhouden worden door gevestigde 
ontwikkelaars. Contacteer gerust een van deze ontwikkelaars met technische
vragen of beleidsonzekerheden.
</li>

<li>
Wees voorzichtig in het committen van zaken. Weet dat wat je commit
duizenden gebruikers hun systemen kan beschadigen als er problemen in
zitten. Indien je iets commit dat voor problemen zorgt in de Portage
structuur moet je dat snel oplossen.
</li>

<li>Bij elk pakket moet een <uri link="metadata.xml">metadata.xml</uri> bestand zitten
dat - tussen andere informatie - bevat welke groep (en/of individuele onderhouders)
de verantwoordelijkheid hebben voor het pakket.
</li>

</ul>
</body>
</section>
</chapter>

<chapter>
<title>Speciefieke rightlijnen</title>
<section>

<title>Copyright</title>
<body>

<p>
Copyright in ebuilds (en documentatie) moeten steeds toegewezen worden op naam 
van Gentoo Foundation. Ontwikkelaars mogen nooit hun eigen naam in de copyright
regels plaatsen. Voor meer informatie, lees <uri>http://www.gentoo.org/proj/en/devrel/copyright/index.xml</uri>.
</p>
</body>
</section>

<section>
<title>fPIC</title>
<body>

<p>
Op sommige architecturen, moeten gedeelde bibliotheken gebouwd worden met -fPIC.
Bij x86 en andere, zullen gedeelde bibliotheken ook gebouwd worden zonder -fPIC,
maar het zou verkwistend zijn en potentieel een prestatie verlies kunnen 
opleveren. Als je een pakket tegenkomt die geen gedeelde bibliotheken bouwt met 
-fPIC, patch dan de makefile om <b>alleen</b> de bibliotheken te bouwen met 
-fPIC. Er is meer informatie over PIC beschikbaar op <uri>http://www.gentoo.org/proj/en/hardened/pic-internals.xml</uri>.
</p>

</body>
</section>
 
<section>

<title>Perl</title>
<body>
<p>Nieuwe perl modules mogen alleen aan portage worden toegevoegd als een ze
aan een van de volgende voorwaarden voldoen:</p>
<ul>
	<li>De module vervult een afhankelijkheid</li>
	<li>De module kan niet afgehandeld worden via <c>g-cpan</c></li>
	<li>De module voegt functionaliteit toe aan bestaande ebuilds</li>
	<li>De module levert applicaties of andere features (i.e. meer dan hun .PM
		aanbiedt)</li>
</ul>

<p>Vergewis je er alsjeblieft van dat minimaal een van de perl herders je 
toevoeging goedkeurd.</p>
</body>
</section>
</chapter>

<chapter>
<title>Ebuild beleid</title>
<section>
<title>Beleid voor benaming</title>
<body>

<p>
Ebuild bestandsnamen bestaan uit 4 logische onderdelen:
</p>

<p><c>pkg-ver{_suf{#}}{-r#}.ebuild</c></p>

<note>
De vishaken (<c>{}</c>) duiden optionele velden aan en komen niet voor in de
naam van het pakket. <c>#</c> representeert een niet-nul positief getal.
</note>

<p>
Het eerste <c>pkg</c> onderdeel is de naam van het pakket, welke enkel kleine 
letters mag bevatten, de cijfers 0-9 en één of meer enkelvoudige streepkes 
(<c>-</c>). Bijvoorbeeld: <c>util-linux</c>, <c>sysklogd</c>, <c>glibc</c>. We 
hebben enkele pakketten in Portage die deze regel niet volgen, maar <e>jouw</e>
pakketten moeten dat wel.
</p>

<p>
Het <c>ver</c> onderdeel is de versie van het pakket, welke
hoogstwaarschijnlijk de zelfde zal zijn als de versie die de naam van de
tarball aanbiedt. Deze versie bestaat meestal uit 2 of 3 (soms meer) nummers
die door punten onderscheiden worden, zoals <c>1.2</c> of <c>4.5.2</c>, en
waarvan ze soms door een letter gevolgd worden, zoals in <c>1.4b</c> of
<c>2.6h</c>. Het versienummer van het pakket wordt aan de naam van het pakket
toegevoegd. Voorbeelden zijn <c>foo-1.0</c> en <c>bar-2.4.6</c>.
</p>

<p>
Het derde <c>{_suf{#}}</c> deel is optioneel en bevat een van de volgende 
voorgedefinieerde toevoegingen, gesorteerd van minst-volwassen tot 
meest-volwassen:
</p>

<table>
<tr><th>Suffix</th><th>Omschrijving</th></tr>
<tr><ti><c>_alpha</c></ti><ti>Alpha release</ti></tr>
<tr><ti><c>_beta</c></ti><ti>Beta release</ti></tr>
<tr><ti><c>_pre</c></ti><ti>Prerelease</ti></tr>
<tr><ti><c>_rc</c></ti><ti>Release candidate</ti></tr>
<tr><ti>(geen)</ti><ti>Normale release</ti></tr>
<tr><ti><c>_p</c></ti><ti>Patch level (gevolgd door een geheel getal)</ti></tr>
</table>

<p>
Elkeen van deze suffixen kunnen gevolgd worden door een niet-nul positief
getal, bijvoorbeeld <c>linux-2.4.0_pre10</c>. In de veronderstelling dat we met
dezelfde versies werken worden de suffixes door Portage in de volgende volgorde
van "hoogste versie" geïnterpreteerd (minst-volwassen is ouder): <c>_alpha</c>
&lt; <c>_beta</c> &lt; <c>_pre</c> &lt; <c>_rc</c> &lt; (geen suffix) &lt;
<c>_p</c>
</p>
       
<p>
Wanneer 2 dezelfde suffixen met elkaar worden vergeleken is deze met het
grootste volgende geheel getal de meest recente. Bijvoorbeeld
<c>foo-1.0_alpha4</c> is recenter dan <c>foo-1.0_alpha3</c>.
</p>

<p>
Het vierde deel van de naam van het pakket is een Gentoo Linux specifieke
revisienummer (<c>{-r#}</c>). Deze is, net zoals de voordien besproken suffix,
ook optioneel. <c>#</c> is een niet-nul positief geheel getal, bijvoorbeeld
<c>package-4.5.3-r3</c>.
</p>

<p>
Dit revisienummer is onafhankelijk van de versie van de broncode tarball en
wordt gebruikt om mensen te informeren dat er een nieuwe en verbeterde Gentoo
Linux revisie beschikbaar is voor het desbetreffende pakket. Initiele releases
mogen geen revisienummer hebben, dus bijvoorbeeld <c>package-4.5.3</c>, en
worden door Portage aanzien als een pakket met revisie 0. Dat wil zeggen dat de
benaming sequentieel als volgt gezien wordt: <c>1.0</c> (initiele versie),
<c>1.0-r1</c>, <c>1.0-r2</c>, ...
</p>
</body>
</section>
<section>
<title>Versie en revisie aanpassingen</title>
<body>

<p>
Revisienummers van pakketten moeten door de Gentoo Linux ontwikkelaars
aangepast worden wanneer de ebuild in die mate aangepast werd dat de gebruikers
er baat bij hebben up te daten. Typisch is dit het geval wanneer aanpassingen
aan de ebuild ervoor zorgen dat de geïnstalleerde bestanden zelf anders worden,
maar dat de versie van het pakket dezelfde blijft. Indien je interne,
stijlaanpassingen maakt aan de ebuild die geen invloed hebben op de
geïnstalleerde bestanden, dan moet je het revisienummer niet aanpassen. Analoog
moet je, wanneer je een aanpassing uitvoert die een compilatieprobleem voor
sommige gebruikers oplost, het revisienummer niet aanpassen, aangezien je niet
wil dat mensen die het wel succesvol kunnen installeren het opnieuw moeten 
compileren zonder dat ze daar voordeel uit halen, en de mensen die het
oorspronkelijke pakket niet konden installeren hebben het toch nog niet
geinstalleerd staan en hebben dus geen nood aan een nieuw revisienummer.
Een revisie aanpassing is ook niet nodig wanneer het maar een minderheid van de 
gebruikers aangaat en het pakket een alledaagse gemiddelde compilatie tijd heeft.
gebruik je eigen beste oordeel in deze omstandigheden.
</p>

<impo>
Wanneer je een nieuwe revisie aanmaakt voor een bepaalde ebuild, zorg er dan
voor dat je het <path>ChangeLog</path> bestand in de ebuild directorie aanpast.
Negeren van deze stap getuigt van een slechte smaak en kan leiden tot
disciplinaire acties.
</impo>

<p>
Ebuilds moeten gebaseerd zijn op de voorgaande versie van de
desbetreffende ebuild om ervoor te zorgen dat bugfixes niet per ongeluk
verloren gaan. De aanpassingen moeten commentaar in de ebuild bevatten
die uitleggen wat de aanpassing is en waarom de aanpassing doorgevoerd 
werd. Indien je niet weet waarom die aanpassingen nodig zijn, of je bent
niet zeker of ze nog steeds geldig zijn, dan ben jij niet de persoon die
de ebuild zou moeten aanpassen.
</p>

</body> 
</section> 
<section>
<title>Virtuals</title>
<body>

<p>
Portage ondersteunt een concept genaamd "virtual" pakketten. Door hiervan
gebruik te maken kan je een specifiek categorie/pakket-naam linken aan een
ander.
</p>

<p>
Hier volgt een voorbeeld van hoe je virtual pakketten gebruikt.
Veronderstel dat je een cronpakket aanmaakt genaamd <c>foocron</c>. Gentoo
Linux is momenteel ingesteld dat pakketten die een cron pakket nodig hebben
afhankelijk zijn van het <c>virtual/cron</c> pakket. Dit laat ebuilds toe om
te vereisen dat er een cron beschikbaar moet zijn zonder dat de gebruiker
gedwongen wordt een specifiek cronpakket te installeren. Om je
<path>foocron-1.0.ebuild</path> in dit systeem te steken moet je een specifieke
regel aan je ebuild toevoegen:
</p>

<pre caption="">
PROVIDE="virtual/cron"
</pre>

<p>
Wanneer <c>foocron-1.0</c> geinstalleerd is zal het <c>virtual/cron</c> pakket
geregistreerd zijn. Indien je geen cronpakket geinstalleerd staan had voordien,
dan wil dat zeggen dat de pakketten die van <c>virtual/cron</c> afhangen hun
afhankelijkheid nu opgelost zien. Het is mogelijk om een <c>PROVIDE</c> in te
stellen voor eender welk pakket -- het moet niet beginnen met <c>virtual/</c>.
Je moet echter wel <c>virtual/</c> gebruiken indien er meerdere mogelijkheden
zijn wat betreft pakketten die voldoen, tenzij je pakket iets levert dat
vroeger door een andere naam geleverd werd (bijvoorbeeld bij het hernoemen van
een pakket).
</p>

<p>
Er is een tweede component aan Gentoo Linux' virtuals-implementatie. Wat
gebeurt er indien er geen geinstalleerd pakket is dat <c>virtual/cron</c> 
levert? Hoe kiest Portage de "correcte" cron om aan de <c>virtual/cron</c>
afhankelijkheid te voldoen? Portage handelt dit af door een profielspecifieke
virtual-mapping in te lezen, genaamd <path>virtuals</path>, welke je kan
terugvinden in <path>/etc/make.profile</path>. Indien je kijkt in je
<path>virtuals</path> bestand zal je zien dat er inhoud er als volgt uit ziet:
</p>

<pre caption="Voorbeeld virtuals bestand">
virtual/lpr             net-print/cups
virtual/python          dev-lang/python
virtual/mta             net-mail/ssmtp
</pre>

<p>
De eerste regel in dit bestand vertelt aan Portage dat, indien er een pakket
afhangt van <c>virtual/lpr</c> en er is geen <c>virtual/lpr</c> geinstalleerd
noch beschikbaar onder die exacte naam, dat dan <c>net-print/cups</c> moet
geinstalleerd worden om aan deze afhankelijkheid te voldoen.
<c>net-print/cups</c> bevat een regel die <c>PROVIDE="virtual/lpr"</c> leest
zodat toekomstige <c>virtual/lpr</c> afhankelijkheden automatisch voldaan zijn.
</p>

<p>
Nu naar de ontwikkelaar regels. Indien je het <c>foocron</c> pakket wil
toevoegen moet je je er uiteraard van vergewissen dat alle programma's die
afhangen van <c>virtual/cron</c> ermee kunnen werken. En indien je een pakket
genaamd <c>foobarosity</c> toevoegt dat afhangt van <c>virtual/cron</c> moet je 
je er van vergewissen dat alle pakketten die <c>virtual/cron</c> leveren
correct samenwerken met <c>foobarosity</c>.
</p>

<p>
Alvorens je een nieuw virtueel pakket aanmaakt, begin eerst een
discussie op de interne ontwikkelaars mailinglist aangaande je
bedoelingen. Het is heel belangrijk dat je dit doet, zodat de
ontwikkelaars weet hebben van je intenties en desnoods hun pakketten
kunnen aanpassen.
</p>

</body>
</section>
<section>
<title>CVS broncode beleid</title>
<body>

<p>
Er zijn 2 verschillende manieren om een ebuild gebaseerd op broncode van een
CVS repository in te stellen. De eerste, en traditionele manier, is het maken
van een "CVS snapshot" ebuild door zelf een tarball te maken met daarin jouw
broncode die je van de CVS repository gehaald hebt, deze op de officiele
distfile repository te plaatsen en een ebuild aan te maken die deze tarball
gebruikt. Deze types van CVS ebuilds zullen we "CVS snapshot ebuilds" noemen.
</p> 

<p>
De andere manier is het creeren van een CVS-gebaseerde ebuild via 
<path>cvs.eclass</path> om een "live" CVS ebuild te maken. Dergelijke ebuild
zal de laatste ontwikkerversie broncode binnenhalen van de CVS repository op
het moment van installeren zelf, zodat de broncode zo recent mogelijk is. Deze
types van CVS ebuilds zullen we "'live' ebuilds" noemen.
</p>

<p>
De volgende paragrafen zullen het beleid aangaande CVS-gebaseerde ebuilds
aankaarten. Merk dus op dat er strikte regels zijn betreffende dergelijke
ebuilds in de Portage structuur.
</p>

<p>
Snapshot cvs ebuilds worden enorm verkozen boven "live" <path>cvs.eclass</path>
cvs ebuilds.
</p> 

<p>
Snapshot cvs ebuilds zijn toegestaan indien een cvs snapshot bekende
oplossingen bevat voor problemen die het correct functioneren van het pakket in
de weg liggen, of indien de cvs versie van een particulier pakket gekend is of
bewezen is stabieler te werken dan de normale versie.
</p>

<p>
"live" <path>cvs.eclass</path> ebuilds zijn in het algemeen enkel beschikbaar
met als doel het leven van de ontwikkelaars iets gemakkelijker te maken, en
moet bijgevolg altijd met <c>~[arch]</c> uitgerust zijn. Het is onmogelijk te
garanderen dat een "live" <path>cvs.eclass</path> ebuild correct functioneert
aangezien de cvs repository constant kan aangepast worden, wat dan ook de reden
is waarom dit pakket altijd gemaskeerd moet zijn.
</p> 

<p>
Of je nu een "live" cvs ebuild of een "snapshot" CVS ebuild levert, <b>jij, als
ontwikkelaar, bent verantwoordelijk voor het correct functioneren van de
ebuild</b>. Dit is enorm moelijk indien je met "live" cvs ebuilds werkt.
</p>

<p>
Indien ebuilds (eender welk soort) niet correct werken of zich ietswat vreemd
gedragen, dan moet het probleem opgelost worden of moet het pakket verwijderd
worden uit Portage. Indien het "live" ebuilds zijn moeten ze gedurende hun
ganse leven gemaskeerd zijn via <c>~[arch]</c> (deze specifieke regeling staat
hieronder uitgelegd).
</p>

<p>
Indien een gebruiker (of gebruikers) een "live" cvs ebuild vragen, dan kan je
deze toevoegen om ze tevreden te stellen. Je moet de ebuilds met <c>~[arch]</c>
uitrusten zodat andere gebruikers ze niet toevallig installeren.
</p>

<p>
Op deze manier zullen de gebruikers, die de ebuild gevraagd hebben (mogelijk
ontwikkelaars), deze kunnen installeren, maar andere gebruikers zullen
beschermd zijn tegen het accidenteel installeren ervan. Nogmaals, dit geldt
enkel voor situaties waar gebruiker(s) een "live" <path>cvs.eclass</path> CVS
ebuild vragen. Snapshot ebuilds mogen enkel toegevoegd worden aan de Portage
structuur indien ze stabiel zijn en een betere functionaliteit leveren dan de
normale versies van de software.
</p>

<impo>
Snapshot ebuilds van <e>pre-release</e> CVS broncode moeten als volgt genoemd
worden: <path>foo-x.y_preYYYYMMDD.ebuild</path>. <c>foo</c> is de naam van het
pakket, <c>x.y</c> is de versienummer van de <e>komende</e> release,
<c>_pre</c> is een letterlijke string en <c>YYYYMMDD</c> is de datum van de CVS
snapshot. Met deze conventie zorg je ervoor dat <c>x.y.1</c> niet aanzien zal
worden als een oudere versie dan de <c>x.y</c> snapshot, terwijl de <c>x.y</c>
release wel als recenter zal gezien worden dan de CVS snapshot versie. Voor CVS
snapshots van al gereleasede versies moet je
<path>foo-x.y_pYYYYMMDD.ebuild</path> gebruiken (de <c>_p</c> staat voor
"patchlevel"). Dit zal ervoor zorgen dat de CVS ebuild als een recentere versie
aanzien zal worden dan de gewone <c>x.y</c> release.
</impo>

<impo>
Op dit moment is het beleid voor het benoemen van "live" cvs ebuilds dusdanig
dat de naam van het pakket moet eindigen op <c>-cvs</c>. In de toekomst zal een
<c>_cvs</c> versie suffix toegestaan worden bij Portage en zal dit document
geupdate worden.
</impo>

</body>
</section>
<section>
<title>Gebruikers-toegestuurde ebuilds</title>
<body>
<p>
Ebuilds die gebruikers toegestuurd hebben mogen nooit blind vertrouwd worden en
moeten altijd goed getest worden en geaudit alvorens ze in CVS gestoken worden.
<b>Indien een ebuild van een gebruiker problemen heeft ben jij, als
ontwikkelaar die de ebuild in Portage gestoken heeft, verantwoordelijk!</b>
Door ze in CVS te steken zweer je dat de ebuild aan alle Gentoo Linux
ontwikkelingsregels voldoet.
</p>

<p>
Zorg ervoor dat de ebuild van de gebruiker geen zelfgemaakte velden bevat zoals
hieronder:
</p>

<pre caption="Commentaar in de ebuild die naar de ChangeLog moet">
# Ebuild updated by: me &lt;me@me.com&gt;
</pre>

<p>
Dergelijke informatie moet in de <path>ChangeLog</path> komen via de correcte
ChangeLog commentaar syntax. <b>Zorg er altijd voor dat de ChangeLog de juiste
credits toewijst aan de persoon die de ebuild doorgestuurd heeft. Deze
informatie moet in de eerste ChangeLog toevoeging staan</b>.
</p>

<p>
Zorg er tevens voor dat alle ebuilds die je in de CVS repository steekt de
volgende regel bevatten:
</p>
<pre caption="">
# &#36;Header: &#36;
</pre>
<p>
Een groot aantal ebuilds die je van gebruikers krijgt zijn gebaseerd op
rsync-bestanden, welke verkeerde regels kan bevatten.
</p>

<p>
Raad de gebruikers aan om diffs van bestaande ebuilds door te geven indien ze
een upgrade willen maken. Hierdoor zorgen we ervoor dat er minder kans is dat
net opgeloste fouten terug in de nieuwe ebuilds sluipen. Indien je niet werkt
met diffs die je van gebruikers gekregen hebt maar met volledige ebuilds,
gebruik dan <c>diff</c> om te zien wat er veranderd is, met een oog op alles
wat er in de huidige ebuild zit dat in de nieuwe ebuild moet komen, en een oog
op alles in de nieuwe ebuild dat moet opgelost of verwijderd worden.
</p>

<p>
Algemeen laat je best de gebruiker al het werk doen om de ebuild in orde te
krijgen, tenzij je echt <e>wil</e> de ebuild opkuisen in zijn/haar voordeel. En
zelfs in dat geval is het vaak beter om de gebruiker al het werk te laten doen
zodat ze van hun eigen fouten kunnen leren en in de toekomst betere ebuilds
doorsturen. Wees dankbaar voor elke toegestuurde ebuild, zelfs al trekt hij op
niet veel. Wees vriendelijk maar eerlijk -- indien een ebuild niet bruikbaar is
kan je dat aan de gebruiker duidelijk maken zonder dat je zijn ebuild-kennis
moet afkraken. Denk eraan dat deze gebruiker in de toekomst een zeer 
gekwalificeerd en productief lid van jouw project kan worden -- dat is
natuurlijk indien ze de juiste aanmoedigingen en ondersteuning krijgen zodat ze
hun kennis kunnen blijven uitbreiden.
</p>
</body>
</section>
</chapter> 
<chapter>
<title>QA beleid</title>
<section>
<title>Portage release beleid</title>
<body>
<note>
Sinds 17 Dec 2002 is Nick Jones (carpaski) de persoon in kwestie die Portage
onderhoudt.
</note>

<p>
Enkel de Portage onderhouder mag nieuwe versies van Portage uitbrengen, zowel
gemaskeerd of niet gemaskeerd. <b>Niemand</b> anders mag nieuwe Portage-versies
uitbrengen.
</p>


<p>
De enige uitzondering hierop is bij situaties waar de Portage onderhouder niet
bereikbaar is gedurende een lange periode en er een grote fout in Portage
bekend is. In deze situatie is het toegestaan dat een senior ontwikkelaar de
oplossing test en een nieuwe versie uitbrengt.
</p>

<p>
Alvorens je deze clausule wil gebruiken, vraag aan jezelf of de Portage
onderhouder werkelijk onbereikbaar is. Is het probleem werkelijk zo belangrijk
dat het binnen het uur in de Portage structuur moet zitten? Heb je <e>al</e> je
nieuwe code getest om te zien of het werkt? <b>Dit is extreem belangrijk</b>!
Denk eraan dat, indien je oplossing ervoor zorgt dat Portage niet meer werkt,
dit voor <e>enorme</e> problemen zal zorgen bij alle gebruikers, <e>vooral</e>
indien het een niet-gemaskeerde versie betreft. Gebruik deze "clausule" dus
enkel wanneer het <e>absoluut</e> noodzakelijk is -- dus wanneer het
<e>niet</e> gebruiken van de "clausule" te grote risico's inhoudt.
</p>

<p>
Indien je Portage gaat aanpassen moet de oplossing door alle beschikbare
ontwikkelaars bekeken worden (om de versie te testen enzo); het mag geen commit
zijn waar niemand van af weet. Er moet een posting komen op de gentoo-core
mailinglist om de nieuwe hoog-dringende versie aan te kondigen zodat iedereen
op de hoogte is; vergeet niet uit te leggen waarom dit nodig is en waarom het
niet mogelijk is te wachten op de Portage onderhouder.
</p>

<p>
De Portage onderhouder laat aan specifieke mensen toe om aan de Portage
CVS versie aanpassingen te maken. Indien je een van die mensen bent geeft dit
je nog niet het recht om nieuwe Portage versies uit te brengen. Dit is de job
van de Portage onderhouder. Hij/zij zal je aanpassingen testen en bekijken
alvorens hij een nieuwe versie uitbrengt. Geef hem/haar de tijd om dit uit te
voeren, en laat het hem/haar ook doen -- breek deze regels aub niet. Het is
onze hoop dat dit beleid ons zal helpen in het voorkomen van toekomstige
Portage QA problemen.
</p>

</body>
</section>
<section>
<title>Gemaskeerde pakketten</title>
<body>

<p>
<path>/usr/portage/profiles/package.mask</path> bevat een lijst van
pakketten die niet ge-emerged moeten worden door gebruikers, samen met
wat commentaar waarom het pakket niet ge-emerged mag worden.
<path>package.mask</path> bestaat zodat gebruikers geen gebroken
pakketten, of pakketten die andere pakketten breken, of pakketten die 
moeten getest worden alvorens ze in ~arch komen, niet installeren. Als
je iets commit dat in <path>package.mask</path> komt, moet je
<e>eerst</e> <path>package.mask</path> committen, en pas daarna de
gemaskeerde ebuild. Dit zorgt ervoor dat de ebuild niet geinstalleerd
wordt door gebruikers alvorens ze <path>package.mask</path> hebben.
</p>

<p>
Je moet zeer voorzichtig zijn wanneer je iets uit
<path>package.mask</path> wil halen. Dergelijke pakketten zitten in
<path>package.mask</path> om een reden; indien deze niet in het bestand
staat (als commentaar), contacteer dan eerst de ontwikkelaar van de
desbetreffende ebuild (of deze die in de commentaar van
<path>package.mask</path> staat) alvorens je verder doet. Indien het
gemaskeerde pakket een core pakket, een afhankelijkheid van een core
pakket of een pakket is dat bij het installeren andere, speciale
effecten teweeg brengt, dan moet de aanpassing op de interne mailinglist
besproken worden.
</p>

</body>
</section>
<section>
<title>~ARCH in KEYWORDS</title>
<body>
<p>
Het doel van ~arch is het kunnen testen van pakketten die aan Portage
toegevoegd worden. Dit is <e>niet</e> hetzelfde als "testing" of
"unstable" die je in andere distributies tegenkomt.
</p>

<p>
Er is een verschil in het gebruiken <path>package.mask</path> en ~arch voor
ebuilds. Het gebruik van ~arch duidt aan dat een <b>ebuild</b> nog getest moet
worden. Het gebruik van <path>package.mask</path> daarentegen duidt aan dat een
applicatie of bibliotheek nog onstabiel wordt geacht. Bijvoorbeeld, indien <c>gimp-1.2.0</c>
de stabiele uitgave is van de Gimp ontwikkelaars, en een nieuwe 'bug fix' wordt 
uitgebracht onder de versie 1.2.1, dan zou een ontwikkelaar de ebuild moeten 
markeren als ~arch voor te testen in portage omdat de release als stabiel wordt
geacht. In een ander voorbeeld, indien Gimp beslist om een 
onstabiele/ontwikkelings versie uit te brengen onder versie 1.3.0, dan moeten 
deze ebuilds ondergebracht worden in <path>package.mask</path> omdat de software
zelf van ontwikkelingskwaliteit is en daarmee niet aangeraden wordt door
de ontwikkelaars voor verspreiding.
</p>

<p>
Elk pakket dat aan Portage toegevoegd wordt moet met ~arch gemarkeerd
zijn voor de architecturen waarop dit pakket werkt. De ontwikkelaar die
deze ebuild commit moet ervoor zorgen dat het al werkt en dat KEYWORDS
in orde is.
</p>

</body>
</section>

<section>
<title>Pakketten verplaatsen van ~arch naar arch</title>
<body>
<p>
Wanneer een bepaalde versie van een pakket voldoende lang stabiel is
gebleken en de Gentoo onderhouder van het pakket is er zeker van dat een
upgrade bij een Gentoo-machine geen problemen zal opleveren, dan kan
deze verplaatst worden van ~ARCH naar ARCH. Een indicatie voor de
stabiliteit van een pakket kan zijn dat het pakket gedurende een maand
geen enkele openstaande bug heeft.
</p>

<p>
Het hangt van de onderhouder af of een pakket stabiel is of een
ontwikkelversie die in <path>package.mask</path> of ~arch moet blijven.
</p>

<p>
Je moet er tevens voor zorgen dat alle afhankelijkheden van het pakket
ook in ARCH zitten.
</p>

<warn>
De ~ARCH stap mag <e>enkel</e> genegeerd worden <e>indien en enkel
indien</e> het desbetreffende pakket een veiligheidsupdate bevat of
nodig is om een belangrijke fout in Gentoo Linux op te lossen.
</warn>

</body>
</section>
</chapter>
<chapter>
<title>Variabelen</title>
<section>
<title>Vereiste variabelen</title>
<body>

<p>
Gentoo Linux beleid vereist dat alle ebuilds de variabelen <c>KEYWORDS</c>,
<c>LICENSE</c> en <c>SLOT</c> definiëren. Behoudens enkele uitzonderingen
moeten de variabelen <c>HOMEPAGE</c>, <c>SRC_URI</c> en <c>DESCRIPTION</c> ook
ingesteld staan, en indien er afhankelijkheden zijn (compilatie of tijdens de
uitvoering van het programma) moeten <c>DEPEND</c> (en, indien nodig
<c>RDEPEND</c>) in de ebuild gedefinieerd zijn.
</p>

</body>
</section>
<section>
<title>DEPEND en RDEPEND</title>
<body>

<p>
Gebruik <c>DEPEND</c> om een afhankelijkheid te definieren die nodig is tijdens
de compilatie van een specifiek pakket, en stel <c>RDEPEND</c> in met de
afhankelijkheden die nodig zijn voor het <e>uitvoeren</e> van de software. Je
moet enkel <c>RDEPEND</c> specifiëren indien de ebuild's
uitvoerafhankelijkheden anders zijn dan deze van <c>DEPEND</c>. Indien ze niet
gedefinieerd is zal <c>RDEPEND</c> de waarde van je <c>DEPEND</c> nemen.
<b>Stel nooit</b> <c>RDEPEND</c> in op <c>DEPEND</c> in een ebuild!
</p> 

<pre caption = "DEPEND variabelen in een ebuild">
# Aanvaardbaar:
RDEPEND="${DEPEND}
         net-ftp/curl
         virtual/glibc"

# Niet aanvaardbaar:
RDEPEND="${DEPEND}"
</pre>

<p>
Het is tevens belangrijk op te merken dat enkel de <c>RDEPEND</c>
afhankelijkheden bekeken worden indien je een binair <c>.tbz2</c> pakket
installeert; gebruik deze informatie voor het correct instellen van de
<c>RDEPEND</c> afhankelijkheid. Indien niet gedefinieerd zal de <c>RDEPEND</c>
instelling dezelfde zijn als <c>DEPEND</c>.
</p>

<p>
Een pakket moet afhankelijk zijn van de oudste versie die aan de
afhankelijkheid voldoet. Indien het pakket werkt met <c>libfoo-1.2.x</c>, laat
ze dan niet afhangen van <c>libfoo-2.x</c> omdat dat net de versie is die jij
geinstalleerd staan hebt.
</p>

<p>
In het algemeen moeten pakketten afhangen van <c>=libfoo-1.2*</c> in plaats van
<c>&gt;=libfoo-1.2</c>. Anders kan het zijn dat je programma niet meer werkt
wanneer <c>libfoo-2.0</c> uitkomt.
</p>

<p>
Afhankelijk zijn van een virtual pakket zoals <c>virtual/foo</c> zal enkel
werken wanneer de verschillende pakketten die <c>virtual/foo</c> leveren
identieke interfaces hebben. Neem bijvoorbeeld <c>virtual/jdk-1.3</c>. Sommige
pakketten werken niet met <c>ibm-jdk-1.2</c> terwijl ze wel werken met
<c>sun-jdk-1.3</c>. Om dergelijke problemen te voorkomen is het belangrijk dat
je je pakket test tegen alle beschikbare pakketten alvorens je je pakket
unmaskt. Het is mogelijk om enkel af te hangen van een beperkt deel van de
pakketten van de virtual in plaats van de virtual zelf.
</p>

</body>
</section>

</chapter>

<chapter>
<title>Pakketten verplaatsen</title>
<section>
<body>

<p>
Van tijd tot tijd kan het gebeuren dat de Portage structuur
gereorganiseerd wordt zodat bepaalde categorien gesplitst worden in
kleinere categorien. Bijvoorbeeld, indien er een groot aantal
firewall-gerelateerde pakketten zitten in <c>net-misc</c>, dan is het
een goed idee om de categorie te splitsen wat de organisatie ten goede
komt; wat dan weer niet het geval is bij <c>dev-perl</c>.
</p>

<p>
Deze beslissing mag niet genomen worden door een enkelvoudige
ontwikkelaar. Het moet bediscussieerd worden op de interne mailinglist
zodat ideeen kunnen uitgewisseld worden over potentieel betere
oplossingen.
</p>

<p>
Vroeger werden pakketten verplaatst door een <c>PROVIDE</c> regel te
plaatsen in de nieuwe ebuild zodat het pakket de <c>DEPEND</c> regel van
andere ebuilds voldoet in het geval de andere ebuilds geen weet hebben
van de herlocatie. De nieuwe en correcte wijze om pakketten te
verplaatsen is door een regel in het correcte bestand in 
<path>profiles/updates/</path> te plaatsen (deze bevindt zich in de 
Portage structuur). Het formaat hiervan is als volgt:
</p>

<pre caption = "profiles/updates/ syntax">
move net-misc/fwbuilder net-firewall/fwbuilder
</pre>

<p>
In dit geval verplaatsen we het pakket <c>fwbuilder</c> van de categorie
<c>net-misc</c> naar <c>net-firewall</c>.
</p>

</body>
</section>
</chapter>
</guide>
