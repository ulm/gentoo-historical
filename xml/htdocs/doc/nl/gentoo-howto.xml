<?xml version='1.0' encoding="UTF-8"?>

<!--
	Sync: 1.23
-->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/nl/gentoo-howto.xml">
<title>Gentoo Linux Developers HOWTO</title>
<author title="Author">
	<mail link="woodchip@gentoo.org">Donny Davies</mail>
</author>
<author title="Author">
	<mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Author">
	<mail link="pete@gentoo.org">Peter Gavin</mail>
</author>
<author title="Author">
	<mail link="karltk@gentoo.org">Karl Trygve Kalleberg</mail>
</author>
<author title="Author">
	<mail link="zhen@gentoo.org">John P. Davis</mail>
</author>
<author title="Editor">
	<mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Editor, Translator">
	<mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Translator">
	<mail link="blubber@gentoo.org">Tiemo Kieft</mail>
</author>

<abstract>
Dit document beschijft Gentoo's Portage system, hoe je nieuwe pakketten
aanmaakt voor Gentoo, en het is tevens een goede referentie voor Gentoo
Ontwikkelaars. Het is een document dat constant aangepast wordt en is 
dus nog niet afgewerkt.
</abstract>

<version>1.3.4</version>
<date>30 September 2003</date>


<chapter>
<title>De Portage structuur</title>

<section>
<title>Inleiding</title>
<body>

<p>
De Portage structuur vind je meestal in <path>/usr/portage</path> en is
hierarchisch georganiseerd bestaande uit categorien, gevolgd door
directories voor specifieke pakketten. Misschien kan een voorbeeld
duidelijkheid scheppen: je vind <path>util-linux-2.11g.ebuild</path> in
<path>/usr/portage/sys-apps/util-linux</path>. Er kunnen ook meerdere
versies van <c>util-linux</c> beschikbaar zijn naast
<path>util-linux-2.11g.ebuild</path>. Dit is omdat <e>alle ebuilds voor
een specifiek pakket (onafhankelijk van versie)</e> eenzelfde
<path>categorie/pakket</path> gebruiken in <path>/usr/portage</path>.
</p>

</body>
</section>

<section>
<title>De Portage structuur uit CVS halen</title>
<body>

<p>
Indien je niet gewend bent om met CVS te werken, bekijk dan de <uri
link="http://www.gentoo.org/doc/en/cvs-tutorial.xml">CVS Tutorial</uri>
(Engels) voor meer informatie.
</p>

<p>
De Portage structuur kan je vinden in de <i>gentoo-x86</i> module die je
best binnenhaalt met de instructies uit bovenvermelde gids.
</p>

</body>
</section>

<section>
<title>Wat je (niet) in de Portage structuur mag steken</title>

<body>

<p>
Alvorens je een ebuild schrijft, kijk dan eerst op <uri
link="http://bugs.gentoo.org">bugs.gentoo.org</uri>, kies "Query" en
selecteer als product "Gentoo Linux" en component "ebuilds". In het
zoekveld steek je de naam van de ebuild en als status pak je NEW,
ASSIGNED, REOPENED en RESOLVED (vooral deze laatste is zeer belangrijk)
en je voert de query uit.
</p>

<p>
In het algemeen dient de Portage structuur enkel voor het opslaan van
<path>.ebuild</path> bestanden, alsook kleine bestanden die erbij horen,
zoals patches en voorbeeld configuratiebestanden. Deze bestanden moeten
in <path>/usr/portage/categorie/pakket/files</path> komen te staan zodat
de <path>categorie/pakket</path> directorie niet vol komt te staan. Het
is trouwens algemeen een slecht idee om binaire bestanden aan CVS toe te
voegen. Indien het toch nodig blijkt (bijvoorbeeld indien je een klein
PNG bestand moet toevoegen) moet je deze toevoegen aan de CVS door
middel van de <c>-kb</c> optie:
</p>

<pre>
# <i>cvs add -kb mijnfoto.png</i>
</pre>

<p>
De <c>-kb</c> optie zegt aan CVS om <path>mijnfoto.png</path> als binair
bestand te zien. Dit zorgt ervoor dat onder andere, bij het mergen van 
verschillende versies, er niet geprobeerd wordt om de verschillen door te 
voeren, dit om triviale redenen. Trouwens, wanneer je aanpassingen
aanmaakt in een bestand door middel van een bijgeleverde patch, dan mag
je deze patch <e>niet</e> gecomprimeerd in de CVS steken. Dit laat CVS
toe om de aanpassingen te onthouden en informeert andere ontwikkelaars
van mogelijke conflicten.
</p>

<p>
Zorg ervoor dat je pakket <e>direct</e> out-of-the-box werkt voor
eindgebruikers als je het pakket als stabiel aanduidt. Zorg ervoor dat
je goede default instellingen gebruikt die het merendeel van de systemen
tevreden zal stellen, alsook de meeste gebruikers die je pakket zullen
gebruiken. Indien je pakket kapot is en je bent niet zeker hoe je het
werkende moet krijgen, kijk dan naar hoe andere distributies dit
oplossen. Bekijk <uri
link="http://cvs.mandrakesoft.com/cgi-bin/cvsweb.cgi/SPECS">Mandrake</uri>
of <uri link="http://www.debian.org/distrib/packages">Debian</uri> voor
enkele voorbeelden.
</p>

<p>
Wanneer je iets in CVS steekt <e>moet</e> je <c>repoman commit</c>
gebruiken in plaats van <c>cvs commit</c> om de ebuilds door te sturen.
Alvorens je ze doorstuurt moet je je digest, Changelog en ebuild zelf
door <c>lintool</c> laten verifieren.
</p>

</body>
</section>

<section>
<title>CVS Commit Beleid</title>
<body>

<warn>
Let op - <c>lintool</c> werkt zeer slecht. Gebruik <c>repoman</c>.
</warn>

<ul>
<li>Voer altijd <c>repoman scan</c> uit alvorens je commit.</li>
<li>Voer <c>lintool</c> uit alvorens je commit.</li>
<li>Test altijd dat <path>package.mask</path> in orde is door <c>emerge 
--pretend glibc</c> uit te voeren alvorens je commit en kijk of deze
geen conflicten bevat.</li>
<li>Pas <e>altijd</e> de ChangeLog aan alvorens je commit.</li>
<li>Commit <e>eerst</e> package.mask en dan pas je pakket, dit in geval
een conflict voorkomt alvorens <path>package.mask</path> doorgestuurd
werd.</li>
<li>Doe altijd atomische commits; indien je een gemaskeerd pakket commit 
met een nieuwe licentie, commit dan eerst <path>package.mask</path>, dan
de ebuild <e>en</e> <path>ChangeLog</path> <e>en</e> licentie in een
trek, tenzij je gebruikers hun installatie wil verneuken.</li>
</ul>

</body>
</section>
								 
<section>
<title>De files directorie</title>
<body>

<p>
Zoals al eerder vermeld heeft elke pakketdirectorie een
<path>files</path> subdirectorie. Alle patches, configuratiebestanden,
of andere speciale bestanden die je pakket nodig heeft moet in deze
directorie geplaatst worden. Het is tevens interessant je patch dusdanig
te noemen dat ze gemakkelijk geidentificeerd kan worden bij een bepaalde
versie, bijvoorbeeld <path>mijnpakket-1.0-gentoo.diff</path>. De
extensie <path>gentoo</path> zorgt ervoor dat mensen weten dat wij,
Gentoo Linux ontwikkelaars, de patch gemaakt hebben in plaats van ergens
anders te rippen. Opnieuw, gelieve deze niet te comprimeren aangezien
CVS niet graag werkt met binaire bestanden.
</p>

<p>
Zorg ervoor dat elke patch begint met eenzelfde suffix zoals
<path>mijnpakket-1.0</path> zodat je de verschillende,
versie-afhankelijke patches kan onderscheiden. Zo kan je tevens
gemakkelijk zien wat de aanpassingen tussen de verschillende revisies
zijn. Indien nodig mag je andere suffixen gebruiken, maar blijf
consistent.
</p>

<p>
Indien je veel bestanden hebt om in de <path>files</path> directorie te
steken, overweeg dan het aanmaken van een subdirectorie zoals
<path>file/mijnpakket-1.0</path> en steek de bestanden daarin. Indien je
deze methode gebruikt moet je geen suffixen meegeven aan je patches.
</p>

</body>
</section>
</chapter>

<chapter>
<title>ebuild scripts</title>
<section>
<title>Inleiding</title>
<body>

<p>
ebuild scripts zijn eigenlijk de basis van het gehele Portage systeem.
Ze bevatten alle nodige informatie nodig om broncode te downloaden,
uitpakken, compileren en installeren alsook uitvoeren van pre/post
installatie/verwijdering of configuratie functies. Alhoewel het meeste
van Portage in Python geschreven is zijn de ebuilds script op zich
geschreven in bash, aangezien dit ons de mogelijkheid geeft commandos
uit te voeren zoals we dat gewend zijn vanop de commandline interface.
Een van de meest belangrijke principes bij ebuilds scripts is het
meegeven van de commandos die je normaal gezien vanuit de commandline
interface uitvoert. Daarom is de bash syntax een handig gegeven.
</p>

<p>
Ebuild scripts worden door de <c>ebuild</c> en <c>emerge</c> commandos
geinterpreteerd. Het <c>ebuild</c> commando is een low-level
compilatietool. Ze kan enkelvoudige ebuilds compileren en installeren,
maar dat is dan ook al. Ze zal tevens controleren of alle
afhankelijkheden in orde zijn, maar ze zal ze niet proberen op te
lossen. <c>emerge</c> is een hoogperformant programma dat gebruik maakt
van <c>ebuild</c>, en heeft wel de mogelijkheid om afhankelijkheden op
te lossen, "pretend" merges uit te voeren zodat gebruikers kunnen zien
welke ebuilds er <e>zouden</e> geinstalleerd worden, en meer. Algemeen
kan je zeggen dat <c>emerge</c> <c>ebuild</c> gewoon wegblaast, behalve
op 1 gebied: met <c>ebuild</c> kan je stap per stap pakketten
installeren (downloadingen, uitpakken, compileren, installeren,
registreren). Voor ontwikkelaars is dat een onbetaalbare tool aangezien
het de ontwikkelaar de mogelijkheid geeft om ebuild problemen te
isoleren tot aan een specifiek deel van het compilatie proces.
</p>

</body>
</section>

<section>
<title>ebuild bestanden benoemen</title>
<body>

<p>
Ebuild bestandsnamen bestaan uit 4 logische secties:
</p>

<p>
Het eerste deel is de naam van het pakket, welke enkel uit kleine
letters mag bestaan, alsook de cijfers 0-9 en liggende streepjes.
Voorbeelden zijn <c>util-linux</c>, <c>sysklogd</c> en <c>glibc</c>.
</p>

<p>
Het tweede deel is de versie van het pakket, welke normaal gezien
dezelfde moet zijn als de versie van de broncode. Deze bestaat meestal
uit twee of drie nummers, gescheiden door punten, zoals <c>1.2</c> of
<c>4.5.2</c> (alhoewel langere versies uiteraard ook ondersteund
worden), en welke gevolgd kunnen worden door een letter, bijvoorbeeld
<c>1.4b</c> of <c>2.6h</c>. Deze wordt door een liggend streepje aan de
naam van het pakket gehangen; bijvoorbeeld: <c>foo-1.0</c>,
<c>bar-2.4.6</c> etc.
</p>

<impo>
Indien je van plan bent een extra letter toe te voegen aan je
versiestring, dan mag deze letter <e>niet</e> gebruikt worden om alfa-
of beta-stadia aan te duiden van het pakket, aangezien alfas en betas
<e>prerelease</e> versies zijn terwijl extra letters <e>nieuwere</e>
versies betekenen. Dit is een belangrijk onderscheidt aangezien Portage
de versies van de ebuilds gebruikt om te zien of een ebuild recenter is
dan een andere ebuild van hetzelfde pakket. Het is zeer belangrijk dat
de versienummers dezelfde versie van het pakket weerspiegelen; dit
vooral voor de afhankelijkheden van andere pakketten.
</impo>

<p>
Het derde (optionele) deel bevat een speciale toevoeging; ofwel
<c>_alpha</c>, <c>_beta</c>, <c>_pre</c> of <c>_rc</c>. Al deze
toevoegsels kunnen gevolgd worden door een nummer, bijvoorbeeld
<c>linux-2.4.20_pre10</c>. In de veronderstelling dat de versies gelijk
zijn, is een <c>_alpha</c> ouder dan een <c>_beta</c>, <c>_beta</c>
ouder dan <c>_pre</c> en <c>_pre</c> ouder dan <c>_rc</c>.
</p>

<note>
Een <c>_rc</c> pakket is ouder dan een pakket zonder een underscore (bv
<c>linux-2.4.0</c>), en <c>linux-2.4.0</c> is ouder dan een pakket met
een extra letter, bijvoorbeeld <c>linux-2.4.0b</c>. Zoals je wel kan
verwachten is <c>linux-2.4.0b</c> ouder dan <c>linux-2.4.0c</c>. Opnieuw
is deze versienummering belangrijk aangezien Portage deze intern
gebruikt om onderlinge versies te vergelijken.
</note>

<p>
De vierde (optionele) sectie van het pakketnaam is een Gentoo Linux
specifieke <e>revisie</e>nummer welke aangeduid wordt door <c>-r#</c>,
waar <c>#</c> een geheel getal is, bijvoorbeeld <c>package-4.5.3-r3</c>.
Dit revisienummer is onafhankelijk van de versie van de broncode die de
ebuild gebruikt en heeft als doel de gebruikers te informeren over
nieuwere versies met Gentoo Linux aanpassingen.
</p>

<p>
Indien je niet-triviale aanpassingen aan een ebuild maakt moet je het
ebuildbestand kopieren en de revisienummer met 1 verhogen. Initiele
releases hebben geen revisienummer (bijvoorbeeld
<path>package-4.5.3</path>) en worden door Portage aanzien als een
revisienummer nul. Dat wil zeggen dat het tellen als volgt gebeurt:
<c>1.0</c>, <c>1.0-r1</c>, <c>1.0-r2</c> etc. Herinner eraan om
<e>altijd</e> je aanpassingen in de Changelog neer te pennen. Dit
vergeten wordt aanzien als een grove fout en kan leiden tot het
intrekken van CVS toegang.
</p>

<p>
En ik veronderstel dat we eigenlijk ook een vijfde extensie hebben aan
de naam -- <path>.ebuild</path> zelf :)
</p>

</body>
</section>

<section>
<title>Inhoud van een <e>ebuild</e> bestand</title>
<body>

<note>
Er is een manpage die over het interne formaat, variabelen en functies
in een ebuild script spreekt: <c>man 5 ebuild</c>.
</note>

<p>1. Variabele instellingen:</p>
<p>
Het eerste deel van de ebuild bestaat uit een hoeveelheid
variabele-declaraties. De variabelen die je kan instellen zijn:
</p>

<table>
<tr><ti><c>P</c></ti><ti>
de naam en versie van het pakket; je moet deze niet instellen aangezien
deze door Portage zelf wordt ingevuld.
</ti></tr>

<tr><ti><c>S</c></ti><ti>
de broncodedirectorie van je pakket, meestal ${WORKDIR}/${P}.
</ti></tr>

<tr><ti><c>T</c></ti><ti>
de tijdelijke directorie van je pakket. Deze wordt gebruikt als een
virtuele /tmp directorie tijdens het doorlopen van de verschillende
installatiestappen.
</ti></tr>

<tr><ti><c>D</c></ti><ti>
de root directorie waar het pakket geinstalleerd wordt; zie deze als een
virtuele /.
</ti></tr>

<tr><ti><c>SLOT</c></ti><ti>
Portage behandelt verschillende versies van eenzelfde pakket
verschillend. Indien je bijvoorbeeld GCC 2.95 en GCC 3.x wil kunnen
installeren moet je de SLOT variabele in beide ebuilds definieren;
zijnde GCC 2.95 met slot 0 en GCC 3.x slot 1.
</ti></tr>

<tr><ti><c>LICENSE</c></ti><ti>
Deze variabele specifieert welke licentie het programma gebruikt, zijnde
GPL-2, BSD, enz... Dit veld moet een geldige licentie bevatten (welke je
kan vinden in ${PORTDIR}/license/). Indien de licentie niet bestaat moet
deze eerst toegevoegd worden alvorens je de ebuild aan de Portage
structuur toevoegt.
</ti></tr>

<tr><ti><c>KEYWORDS</c></ti><ti>
Deze variabele ondersteunt verschillende functies. Allereerst
specifieert deze variabele voor welk architectuur de ebuild bedoeld is.
Deze zijn <e>x86, ppc, alpha, sparc, sparc64</e>. Uiteraard moet je deze
instellen op de architectuur van het pakket. Portage zal een
x86-pc niet toelaten iets te installeren behalve <e>x86</e> zoals
gedefinieerd door de <i>KEYWORDS</i> USE variabele. Pakketten die niet
in het natieve architectuur zitten worden door Portage vanzelf
gemaskeerd. Indien het <i>KEYWORDS</i> vlag een <e>~</e> vooraan heeft
wil dat zeggen dat de ebuild werkt maar nog niet als stabiel aanzien
wordt. Indien de <i>KEYWORDS</i> vlag voorafgegaan wordt door een
<e>-</e> dan wil dat zeggen dat de ebuild niet eens werkt voor de
gegeven vlag. Indien er niets voor het <i>KEYWORDS</i>-vlag staat kan je
de ebuild zien als stabiel. Je kan de installatie van deze verschillende
pakketten (des)activeren in <path>make.conf</path>.
</ti></tr>

<tr><ti><c>DESCRIPTION</c></ti><ti>
een kleine, 1-regel uitleg van je pakket
</ti></tr>

<tr><ti><c>SRC_URI</c></ti><ti>
de URIs van alle mogelijke broncodebestanden van je pakket, met witte
ruimte gescheiden; normaal gezien is de eerste iets in de aard van
&quot;ftp://ftp.company.com/pub/somepackage/${A}&quot;
</ti></tr>

<tr><ti><c>HOMEPAGE</c></ti><ti>
homepagina van het programma
</ti></tr>

<tr><ti><c>IUSE</c></ti><ti>
Dit moet ingesteld worden op de USE-variabelen die je pakket gebruikt.
Indien je pakket er geen gebruikt moet je deze instellen op
<c>IUSE=""</c>.
</ti></tr>

<tr><ti><c>DEPEND</c></ti><ti>
compilatie afhankelijkheden; zie de sectie <uri link="#doc_chap5">Pakket
Afhankelijkheden</uri>
</ti></tr>

<tr><ti><c>RDEPEND</c></ti><ti>
uitvoeringsafhankelijkheden; zie de sectie <uri
link="#doc_chap5">Pakket Afhankelijkheen</uri>
</ti></tr>
</table>

<p>2. ebuild Functies</p>
<p>
Er zijn enkele functies die je kan definieren in ebuild-bestanden die
het compilatieproces en installatie van je pakket definieren.
</p>

<table>
<tr><ti>
<c>pkg_setup</c></ti><ti>Gebruik deze functie om voorgaande 
taken uit te voeren. Dit kan bijvoorbeeld het toevoegen van gebruikers, 
controleren van een configuratiebestand, ... zijn. Deze functie moet
0 als return-waarde hebben, anders zal de installatie mislukken.
</ti></tr>
<tr><ti>
<c>pkg_nofetch</c></ti><ti>Informeer de gebruiker over vereiste acties
indien voor enige reden (zoals licentiezaken) de broncodebestanden 
niet door Portage gedownload kunnen/mogen worden.
</ti></tr>
<tr><ti>
<c>src_unpack</c></ti><ti>Gebruik deze functie om je broncodebestanden
uit te pakken en autoconf/automake/etc uit te voeren indien nodig. Per 
default zal deze het pakket uitpakken in <c>${A}</c>. De default start
directorie is <c>${WORKDIR}</c>.
</ti></tr>
<tr><ti>
<c>src_compile</c></ti><ti>Gebruik deze functie om je programma te 
configureren en installeren. De default start directorie is <c>${S}</c>.
</ti></tr>
<tr><ti>
<c>src_install</c></ti><ti>Gebruik deze functie om een programma te 
installeren in een tijdelijke directorie <c>${D}</c>. Indien je pakket
automake gebruikt kan je dit doen door simpelweg <c>make
DESTDIR=${D} install</c> te gebruiken. <e>Zorg ervoor dat je pakket al
zijn bestanden installeert in <c>${D}</c> als root!</e>
</ti></tr>
<tr><ti>
<c>pkg_preinst</c></ti><ti>De commandos in deze functie worden uitgevoerd
net voordat een voorgeinstalleerd programma van de tijdelijke directorie
naar het systeem gekopieerd wordt.
</ti></tr>
<tr><ti>
<c>pkg_postinst</c></ti><ti>De commandos in deze functie worden 
uitgevoerd net nadat een voorgeinstalleerd programma van de tijdlijke
directorie naar het systeem gekopieerd werd.
</ti></tr>
<tr><ti>
<c>pkg_prerm</c></ti><ti>De commandos in deze functie worden uitgevoerd
net voordat het programma verwijderd wordt van het systeem.
</ti></tr>
<tr><ti>
<c>pkg_postrm</c></ti><ti>De commandos in deze functie worden uitgevoerd
net nadat het programma verwijderd werd van het systeem.
</ti></tr>
<tr><ti><c>pkg_config</c></ti><ti>Je gebruikt deze functie om een 
initiele configuratie van het programma uit te voeren voor het programma
nadat het geinstalleerd is. Alle paden in deze functie moeten voorgegaan
worden door ${ROOT}. Deze functie wordt <e>enkel</e> uitgevoerd wanneer
de gebruiker het programma <c>ebuild
/var/db/pkg/${CATEGORY}/${PF}/${PF}.ebuild config</c> uitvoert.
</ti></tr>
</table>

<p>
Je kan tevens de volgende functies gebruiken in je ebuilds:
</p>

<table>
<tr><ti><c>use</c></ti><ti>
Kijk of een of meerdere use-vlaggen gedefinieerd zijn. Indien wel, dan
zal de functie de use-vlaggen echo'en. Om te zien of een use-vlag
gedefinieerd is kan je dus <c>[ -z "`use foobar`"]</c> gebruiken.
</ti></tr>

<tr><ti><c>has_version</c></ti><ti>
Heeft 1 als exitcode indien het systeem de gespecifieerde versie van een
bepaald pakket heeft. Bijvoorbeeld <c>has_version >=glibc-2.3.0</c>.
</ti></tr>

<tr><ti><c>best_version</c></ti><ti>
Geeft <path>category/package-version</path> van de gevraagde
<path>category/package</path> terug. Bijvoorbeeld <c>best_version
x11-libs/gtk+extra</c>.
</ti></tr>

<tr><ti><c>use_with</c></ti><ti>
Deze functie kijkt of een use-vlag gedefinieerd is en geeft
"--with-foobar" of "--without-foobar" terug. Indien je maar 1 argument
gebruikt, dan is dat argument zowel de use-vlag als een deel van de
with(out)-string. Anders is het eerste argument de use-vlag en is het
tweede argument het deel van de with(out)-string. Bijvoorbeeld
<c>use_with truetype freetype</c>.
</ti></tr>

<tr><ti><c>use_enable</c></ti><ti>
Dit is hetzelfde als <c>use_with</c>, maar dit geeft "--enable-foobar"
of "--disable-foobar" terug.
</ti></tr>

<tr><ti><c>check_KV</c></ti><ti>
Controleert of Portage de kernelversie weet. Indien niet zal hij een
foutmelding tonen en afbreken. Indien je de kernelversie in je script
nodighebt, gebruik dan de <c>${KV}</c> variabele welke automatisch
gedefinieerd wordt door Portage.
</ti></tr>

<tr><ti><c>keepdir</c></ti><ti>
Maakt (indien nodig) een <path>.keep</path> bestand aan in de gegeven
directorie zodat deze niet vanzelf verwijderd wordt.
</ti></tr>

<tr><ti><c>econf</c></ti><ti>
Voert <c>./configure</c> uit met de nodige path-aanpassingen (prefix,
host mandir, infodir, datadir, sysconfdir, localstatedir). Je kan
optioneel extra argumenten meegeven voor <c>./configure</c>.
</ti></tr>

<tr><ti><c>einstall</c></ti><ti>
Voert <c>make install</c> uit zodat Portage weet waar de bestanden
geplaatst worden.
</ti></tr>

<tr><ti><c>die</c></ti><ti>
Beeindigt het huidige proces. Dit zal tevens de gebruiker informeren
met als bericht de boodschap die als argument aan <c>die</c> meegegeven
wordt.
</ti></tr>

<tr><ti><c>einfo</c></ti><ti>
Informeer de gebruiker over iets belangrijk. Het argument dat je aan
<c>einfo</c> geeft is het bericht dat de gebruiker zal zien.
</ti></tr>

</table>

</body>
</section>

<section>
<title>Regels om een Ebuild te schrijven</title>
<body>
<p>
Aangezien ebuild bestanden niet meer zijn dan shellscripts, moet je je
editor's shell-script mode gebruiken om deze aan te passen. Je moet de
correcte indentatie gebruiken, en dit enkel via tab-karakters -- geen
spaties. Zorg ervoor dat je je editor instelt zodat de tabstops op 4
spaties staat. Maak altijd gebruik van haakjes wanneer je je variabele
aanspreekt; bijvoorbeeld <c>${P}</c> en niet <c>$P</c>.
</p>

<p>
Lange regels worden gewrapped met ' \', dus:
</p>
<pre>
./configure \
	--prefix=/usr || die "configure failed"
</pre>

<p>
Voor meer details, gelieve <path>skel.ebuild</path> te bekijken (welke
gewoonlijk te vinden is in <path>/usr/portage</path>).
</p>

<p>
Indien je Vim gebruikt kan je de volgende regels onderaan je .vimrc
plaatsen zodat je er zeker van bent dat je de juiste regels volgt:
</p>

<pre>
if (getcwd() =~ 'gentoo-x86\|gentoo-src\|portage')
	set tabstop=4 shiftwidth=4 noexpandtab
endif
</pre>
<p>
Indien je Emacs gebruikt kan je de volgende regels onderaan je .emacsrc
bestand plaatsen (voor GNU Emacs) of init.el (voor XEmacs) zodat je er
zeker van bent dat je de juiste regels volgt:
</p>

<pre>
(defun ebuild-mode ()
  (shell-script-mode)
  (sh-set-shell "bash")
  (make-local-variable 'tab-width)
  (setq tab-width 4))
(setq auto-mode-alist (cons '("\\.ebuild\\'" . ebuild-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.eclass\\'" . ebuild-mode) auto-mode-alist))
</pre>
</body>
</section>

<section>
<title><c>USE</c> Variabelen</title>

<body>

<p>
De bedoeling van USE variabelen is om je toe te staan Portage te
configureren om globaal en automatisch bepaalde <e>optionele</e>
ondersteuning <e>tijdens het compileren</e> al dan niet te activeren.
Hieronder volgt een voorbeeld. Veronderstel dat je een GNOME fan bent,
en je wil dat elke ebuild die GNOME-ondersteuning biedt deze
incompileert. In dit geval voeg je <c>gnome</c> toe aan de <c>USE</c>
variabele in <path>/etc/make.conf</path>, en Portage zal dan automatisch
optionele GNOME-functionaliteit meecompileren voor de pakketten die het
ondersteunen. Analoog, indien je geen GNOME ondersteuning wil
meecompileren, editeer je <path>/etc/make.conf</path> en zorg je ervoor
dat <c>gnome</c> <e>niet</e> gedefinieerd is in de <c>USE</c> variabelen
(of zorg ervoor dat er een minteken voorstaat, zoals in <c>-gnome</c>).
Gentoo Linux heeft een heleboel USE-opties, welke je toestaat om je
systeem zeer expliciet te bouwen naar je eigen smaak.

<note>
Indien je een USE-variabele wil desactiveren (door bijvoorbeeld
<c>gnome</c> te verwijderen uit <c>USE</c>) zal dit Portage vertellen om
de <e>optionele</e> GNOME ondersteuning uit te schakelen. Indien je
echter een ebuild <c>emerge</c>'t die GNOME <e>vereist</e>, dan zal dat
pakket uiteraard GNOME activeren zoals je wel kan vermoeden. Dat wil
zeggen dat GNOME als afhankelijkheid zal geinstalleerd worden indien ze
nog niet geinstalleerd is. Daarom is het altijd een goed idee om
<c>emerge --pretend</c> uit te voeren voordat je een "echte"
<c>emerge</c> uitvoert; op die manier weet je altijd wat je zal krijgen.
</note>

In je eigen ebuilds kan je zien of een USE vlag gedefinieerd is door het
<c>use &lt;variable&gt;</c> commando te gebruiken. Het <c>use</c>
commando zal de use-variabelen tonen die gedefinieerd zijn in zowel
<c>USE</c> als op de commandoregel. Je gebruikt dit commando als volgt:
voorkomen als argument. 
</p>

<p>
<c>if [ &quot;`use X`&quot; ]; then commandos; fi</c>
</p>


<p>
USE variabelen kunnen ook gebruikt worden om afhankelijkheden in te
stellen. Bijvoorbeeld wil je een pakket installeren als afhankelijkheid
enkel en alleen als een specifieke USE-variabele ingesteld is. Dit doe
je door <c>variabele? ( mycat/mypackage-1.0-r1 )</c> in de DEPEND
variabele van je ebuild te plaatsen. In dit voorbeeld wordt
<c>mycat/mypackage-1.0-r1</c> enkel als afhankelijkheid geinstalleerd
als <c>variabele</c> aanwezig is in <c>USE</c>. Het is ook mogelijk om
te specificeren welke afhankelijkheden er worden gebruikt als een bepaalde
USE-variabele is ingesteld, en welke afhankelijkheden er worden gebruikt
als een bepaalde USE-variabele <e>niet</e> ingesteld is:
<c>variabele? (mycat/mypackage-1.0-r1) : (othercat/otherpackage-1.0-r1)</c>.
In dit geval, als <c>variabele</c> niet ingesteld is, dan wordt 
<c>othercat/otherpackage-1.0-r1</c> gebruikt in plaats van 
<c>mycat/mypackage</c>. Tot slot kun je ook een afhankelijkgeid specificeren
waaraan wordt voldaan als een zeker variabele <e>niet</e> ingesteld is, dat
kan gedaan worden door er een "!" voor te zetten, zoals hier:
<c>!variabele? ( mycat/mypackage-1.0-r1)</c>. Zorg ervoor dat al je
ebuilds deze syntax gebruiken en niet Bash "ifs". Bash condities werken
niet met Portage's afhankelijkheidscontrole, en indien je ze wel
gebruikt zal dit je ebuilds ongeldig maken.
</p>

<p>
Hier is een belangrijke tip voor het gebruik van <c>USE</c>. Grotendeels
van de tijd zal een pakket een <c>./configure</c> script gebruiken om
configuratiestappen te ondernemen. Algemeen, indien je ebuild
<c>./configure</c> gebruikt, zal optionele ondersteuning geactiveerd of
gedesactiveerd worden door de juiste argumenten aan <c>./configure</c>
te geven. Hier is de beste manier om dit te doen. Allereerst moet je
kijken welke opties van <c>./configure</c> je moet gebruiken om
specifieke <c>USE</c>-ondersteuning te activeren/desactiveren, en of die
al dan niet al default geactiveerd zijn. Indien ze geactiveerd zijn, doe
je dit als volgt:
</p>
<pre>
DEPEND="X? ( &gt;=x11-base/xfree-4.3 )
	mysql? ( &gt;=dev-db/mysql-3.23.49 )
	apace2? ( &gt;net-www/apache-2 ) : (
=net-www/apache-1.* )"

src_compile() {
	local myconf
	use X || myconf="--disable-x11"
	use mysql || myconf="${myconf} --disable-mysql"

	./configure ${myconf} --prefix=/usr --host=${CHOST} || die
	emake || die
}
</pre>
<p>
Zoals je ziet controleren we enkel of <c>X</c> en <c>mysql</c> in
<c>USE</c> zitten. De <c>use X || </c> deel zal kijken of
<c>X</c> in de <c>USE</c> variabele zit, en indien niet zal het
<c>myconf="--disable-x11"</c> gebruiken. Er is geen nood aan het
expliciet meegeven van ondersteuning voor X11 of MySQL aangezien dit
pakket deze al default activeert. Indien echter een ondersteuning per
default gedesactiveerd is kan je het volgende doen:
</p>
<pre>
DEPEND="X? ( &gt;=x11-base/xfree-4.3 )
	mysql? ( &gt;=dev-db/mysql-3.23.49 )"

src_compile() {
	local myconf
	use gnome &amp;&amp; myconf="--enable-X11"
	use mysql &amp;&amp; myconf="${myconf} --enable-mysql"

	./configure ${myconf} --prefix=/usr --host=${CHOST} || die
	emake || die
}
</pre>
<p>
Hier gaan we expliciet X11 en MySQL ondersteuning activeren indien ze
in de <c>USE</c> variabele zitten. De <c>use mysql &amp;&amp; </c> deel
zal zien of <c>mysql</c> in de <c>USE</c> vlag zit, en indien wel zal
het de variabele <c>myconf="${myconf} --enable-mysql"</c> aanpassen.
</p>

<p>
Om een continue geupdate pagina van USE-variabelen te zien, kijk
<uri link="http://www.gentoo.org/dyn/use-index.xml">hier</uri> (Engels). 
</p>

</body>
</section>
</chapter>

<chapter>
<title>Bestandssysteem Locaties</title>

<section>
<title>Introductie tot de FHS</title>
<body>
<p>
De bestandssysteem standaard die Gentoo Linux gebruikt volgt FHS, welke
staat voor <e>Filesystem Hierarchy Standard</e>. Een eenvoudige uitleg
van de standaard volgt hieronder; voor een volledige specificatie ga je
naar <uri>http://www.pathname.com/fhs</uri>.
</p>

<note>
De <path>/opt</path> hierarchie wordt in sectie 3.12 van de FHS
geadresseerd. Sectie 4.4 handelt over de <path>/usr/X11R6</path>
directorie. KDE en GNOME worden niet specifiek behandelt, en worden
eigenlijk niet eens vermeld in de huidige versie van de FHS.
</note>
</body>
</section>

<section>
<title>Hoe steek je je programma in het bestandssysteem</title>
<body>
<p>
Normaal gezien, indien het pakket autoconf en automake gebruikt, zullen
de default installatiedirectories correct zijn, op een paar
uitzonderingen na:
</p>
<ul>

<li>
Indien je een programma installeert in <path>/bin</path>,
<path>/sbin</path>, <path>/usr/bin</path> of <path>/usr/sbin</path>, dan
moeten de manpages van dat programma geinstalleerd worden in
<path>/usr/share/man</path>. Dit kan je meestal bewerkstelligen door
<c>./configure --mandir=/usr/share/man</c> in de ebuild te gebruiken.
</li>

<li>
GNU info bestanden moeten altijd geinstalleerd worden in
<path>/usr/share/info</path> <e>zelfs indien de info-bestanden over X11,
GNOME of KDE handelen</e>. Dus <path>/usr/share/info</path> is de
<e>enige</e> plaats waar GNU info bestanden moeten staan. Aangezien de
meeste <c>./configure</c> scripts default de bestanden in
<path>/usr/info</path> plaatsen is het zeer vaak nodig om
<c>./configure</c> met <c>--infodir=/usr/share/info</c> uit te voeren.
</li>

<li>
Documentatiebestanden worden geinstalleerd in
<path>/usr/share/doc</path>, dit in een subdirectorie die de naam,
versie en revisie van een specifiek programma reflecteert. Dit geldt
voor alle programma's: GNOME, KDE, X11 en console. Er zijn echter
programma's die hun documentatie in <path>/usr/share</path> plaatsen.
</li>

<li>
X11-specifieke programma's en bibliotheekbestanden moeten altijd
geinstalleerd worden in <path>/usr</path> en niet in
<path>/usr/X11R6</path>. We reserveren <path>/usr/X11R6</path> voor
XFree zelf, en <e>enkel</e> daarvoor. Dit is misschien een strengere
interpretatie van de FHS dan dat andere distributies hebben.
</li>

<li>
GNOME en KDE programmas moeten ook in <path>/usr</path> geinstalleerd
worden.
</li>

</ul>
<impo>
Sommige distributies installeren GNOME en KDE in <path>/opt</path>. Er
is geen standaard die definieert wat precies er moet gebeuren. Om de
knoop door te hakken en wegens de logica hebben we gekozen ook deze te
installeren onder <path>/usr</path>.
</impo>

<p>
Algemeen moet je er dus voor zorgen dat je ebuild de bestanden in
<path>/usr</path> installeert. <e>Sommige</e> programma's kunnen
gecompileerd worden met of zonder GNOME, KDE en X11-bibliotheken, welke
voor verwarring kan zorgen. Onze oplossing is om alles onder
<path>/usr</path> te installeren wat de complexiteit van de
bestandslocaties vereenvoudigt. De locatie van een programma mag
<e>niet</e> afhankelijk zijn van de aanwezigheid of afwezigheid van een
specifieke <c>USE</c> variabele. Daardoor worden de ebuilds <e>bijna
altijd</e> geschreven zodat de bestanden in <path>/usr</path>
geinstalleerd worden.
</p>

<note>
De <path>/opt</path> directorie wordt gereserveerd voor binaire
pakketten (en enkel daarvoor). Voorbeelden zijn mozilla-bin, acroread,
netscape en realplayer. Dergelijke pakketten vereisen meestal een
<path>/etc/env.d/foo</path> bestand. Hierdoor wordt het correcte pad
gegenereert, samen met extra, nodige variabelen.
</note>

</body>
</section>
</chapter>

<chapter>
<title>De Portage scripts en tools</title>

<section>
<title>Publieke scripts</title>
<body>
<p>
Dit zijn de scripts die door de systeembeheerder gebruikt wordt om
programmas te installeren en verwijderen, alsook de pakket database te
beheren. 
</p>
<p>
<c>ebuilds</c> is het hart van het Portage systeem; het voert alle grote
taken uit zoals uitpakken, compileren, installeren, mergen en unmergen
van pakketten. Je gebruikt het als volgt: <c>ebuild
path/to/package.ebuild command</c>. De commando's zijn:
</p>
<table>
<tr><th>Commando</th><th>Uitleg</th><th>Gerelateerde <c>ebuild</c> Functie</th></tr>
<tr><ti>*<c>setup</c></ti><ti>voert algemene zaken uit die nodig zijn alvorens een ebuild verder kan gaan</ti><ti><c>pkg_setup</c></ti></tr>
<tr><ti><c>depend</c></ti><ti>toon de afhankelijkheden die nodig zijn om het pakket te installeren</ti><ti>n/a</ti></tr>
<tr><ti><c>merge</c></ti><ti>pakt uit, compileert, installeert en merget het programma op je systeem</ti><ti>n/a</ti></tr>
<tr><ti>*<c>qmerge</c></ti><ti>merget het pakket op je systeem, in de veronderstelling dat het al uitgepakt is, alsook gecompileert en geinstalleert</ti><ti>n/a</ti></tr>
<tr><ti>*<c>unpack</c></ti><ti>pakt de broncode uit in de werkdirectorie</ti><ti><c>src_unpack</c></ti></tr>
<tr><ti>*<c>compile</c></ti><ti>compileert het pakket</ti><ti><c>src_compile</c></ti></tr>
<tr><ti><c>rpm</c></ti><ti>maakt een RPM aan van het pakket</ti><ti>n/a</ti></tr>
<tr><ti><c>package</c></ti><ti>maakt een Gentoo <c>tbz2</c> pakket aan</ti><ti>n/a</ti></tr>
<tr><ti>*<c>prerm</c></ti><ti>voert de functies uit die nodig zijn voordat het pakket verwijderd kan worden</ti><ti><c>pkg_prerm</c></ti></tr>
<tr><ti>*<c>postrm</c></ti><ti>voert de functies uit die nodig zijn nadat het pakket verwijderd is</ti><ti><c>pkg_postrm</c></ti></tr>
<tr><ti>*<c>preinst</c></ti><ti>voert de functies uit die nodig zijn voordat het pakket geinstalleerd kan worden</ti><ti><c>pkg_preinst</c></ti></tr>
<tr><ti>*<c>postinst</c></ti><ti>voert de functies uit die nodig zijn nadat het pakket geinstalleerd werd</ti><ti><c>pkg_postinst</c></ti></tr>
<tr><ti><c>config</c></ti><ti>stelt een default configuratie in eenmaal het pakket geinstalleerd is</ti><ti><c>pkg_config</c></ti></tr>
<tr><ti>*<c>touch</c></ti><ti>update de mtimes van de broncode van het pakket</ti><ti>n/a</ti></tr>
<tr><ti>*<c>clean</c></ti><ti>maakt de werkdirectorie van het pakket leeg</ti><ti>n/a</ti></tr>
<tr><ti>*<c>fetch</c></ti><ti>download de broncodebestanden</ti><ti>n/a</ti></tr>
<tr><ti>*<c>digest</c></ti><ti>maakt een digest bestand aan voor het pakket</ti><ti>n/a</ti></tr>
<tr><ti>*<c>install</c></ti><ti>installeert het pakket in de image directorie</ti><ti><c>src_install</c></ti></tr>
<tr><ti><c>unmerge</c></ti><ti>verwijdert het pakket van je systeem</ti><ti>n/a</ti></tr>
</table>
<p>
Commandos die met een * aangeduid zijn worden enkel gebruikt door de
ontwikkelaar.
</p>

<p>
<c>emerge</c> merget een pakket en al zijn afhankelijkheden op je
systeem. Dit commando heeft veel opties, voer <c>emerge --help</c> uit
om een lijst te krijgen.
</p>

<p>
<c>env-update</c> update de configuratiebestanden (inclusief, maar niet
gelimiteerd tot <path>/etc/ld.so.conf</path> en
<path>/etc/profile.env</path>) zodat deze de aanpassingen van de
geinstalleerde pakketten herbergen.
</p>
</body>
</section>

<section>
<title>Private Scripts en Commandos</title>
<body>

<p>
Dit zijn scripts die je kan gebruiken in je ebuild bestand om frequent
voorkomende taken uit te voeren.
</p>

<p>
Voor meer gedetailleerde instructies bekijk je best de scripts zelf in
<path>/usr/lib/portage/bin</path>.
</p>

<table>
<tr><ti>into</ti><ti>stelt de target prefix in (<path>DESTTREE</path>) van <c>dobin</c>, <c>dolib</c>, <c>dolib.a</c>, <c>dolib.so</c>, <c>domo</c>, <c>dosbin</c></ti></tr>
<tr><ti>dobin</ti><ti>installeert de gegeve binaire bestanden in <path>DESTTREE/bin</path></ti></tr>
<tr><ti>dodoc</ti><ti>installeert de gegeven bestanden in de documentatiedirectorie (<path>/usr/share/doc/${PF}/DOCDESTTREE</path>) waar <path>DOCDESTTREE</path> instelbaar is door <c>docinto</c></ti></tr>
<tr><ti>doexe</ti><ti>installeert de gegeven bestanden met mode <e>EXEOPTIONS</e> in <path>EXEDESTTREE</path>. <e>EXEOPTIONS</e> is default -m0755 en kan ingesteld worden met het <c>exeopts</c> commando. <path>EXEDESTTREE</path> is instelbaar met <c>exeinto</c>.</ti></tr>
<tr><ti>dohard</ti><ti>maakt een hardlink aan, gebruikt ${D}.</ti></tr>
<tr><ti>dohtml</ti><ti>installeert de gegeven bestanden en directories in <path>/usr/share/doc/${PF}/html</path></ti></tr>
<tr><ti>doinfo</ti><ti>installeert de specifieke bestanden in /usr/share/info, en comprimeert deze dan met gzip</ti></tr>
<tr><ti>doins</ti><ti>installeert de gegeven bestanden met toegangsmode <e>INSOPTIONS</e> in <path>INSDESTTREE</path>. <e>INSOPTIONS</e> is default -m0644 en kan ingesteld worden met het <c>insopts</c> commando. <path>INSDSTTREE</path> is instelbaar met het <c>insinto</c> commando</ti></tr>
<tr><ti>dolib</ti><ti>installeert de gegeven bibliotheekbestanden met mode <e>LIBOPTIONS</e> in <path>DESTTREE/lib</path>. <e>LIBOPTIONS</e> is default -m0644 en kan ingesteld worden met het <c>libopts</c> commando.</ti></tr>
<tr><ti>dolib.a</ti><ti>installeert de gegeven bibliotheken in <path>DESTTREE/lib</path> met mode 0644</ti></tr>
<tr><ti>dolib.so</ti><ti>installeert de gegeven bibliotheekbestanden in <path>DESTTREE/lib</path> met mode 0755</ti></tr>
<tr><ti>doman</ti><ti>installeert de gegeven bestanden in <path>/usr/share/man/manX</path> afhankelijk van de suffix X die je eraan meegeeft</ti></tr>
<tr><ti>domo</ti><ti>wordt gebruikt om manueel .mo bestanden te installeren, welke gebruikt worden om localisatiestrings op te slaan</ti></tr>
<tr><ti>donewins</ti><ti>hetzelfde als <c>newins</c>; het is zelfs een symlink ernaartoe. Dit is ouderwets en mag niet gebruikt worden, maar bestaat voor compatibiliteitsredenen met oudere ebuilds. Gebruik <c>newins</c></ti></tr>
<tr><ti>dosbin</ti><ti>installeert een binair bestand in <path>DESTTREE/sbin</path>, en markeer ze als uitvoerbaar</ti></tr>
<tr><ti>dosed</ti><ti>verwijder alle voorkomens van ${D} (de installatie prefix) uit de gespecifieerde bestanden</ti></tr>
<tr><ti>dosym</ti><ti>maakt een symlink, maakt gebruik van ${D}</ti></tr>
<tr><ti>emake</ti><ti>voert een parallelle make uit. Sommige programmas kunnen niet parallel gecompileert worden, gebruik hiervoor make</ti></tr>
<tr><ti>fowners</ti><ti>geef de gegeven eigenaarsrechten (eerste argument) aan het gegeven bestand (tweede argument) via het chown commando; maakt gebruik van ${D}</ti></tr>
<tr><ti>fperms</ti><ti>geef de gegeven rechten (eerste argument) aan het gegeven bestand (tweede argument) met het chmod commando; maakt gebruik van ${D}</ti></tr>
<tr><ti>newbin</ti><ti>wrapper rond <c>dobin</c> welke de gespecifieerde binaire bestanden (eerste argument) installeert in <path>DESTTREE/bin</path> en deze terwijl hernoemt naar het tweede argument</ti></tr>
<tr><ti>newdoc</ti><ti>wrapper rond <c>dodoc</c> welke het gegeven bestandn (eerste argument) installeert in <path>/usr/share/doc/${PF}/DOCDESTTREE</path>, en deze terwijl hernoemd naar het tweede argument</ti></tr>
<tr><ti>newexe</ti><ti>wrapper rond <c>doexe</c> welke het gegeven bestand installeert met mode <e>EXEOPTIONS</e> in <path>EXEDESTTREE</path> en het terwijl hernoemd naar het tweede argument</ti></tr>
<tr><ti>newins</ti><ti>wrapper rond <c>doins</c> welke het gespecifieerde bestand met mode <e>INSOPTIONS</e> installeert in <path>INSDESTTREE</path> en deze terwijl hernoemd naar het tweede argument</ti></tr>
<tr><ti>newlib.a</ti><ti>wrapper rond <c>dolib.a</c> welke het gespecifieerde bibliotheekbestand in <path>DESTTREE/lib</path> installeert en deze terwijl hernoemd naar het tweede argument</ti></tr>
<tr><ti>newlib.so</ti><ti>wrapper rond <c>dolib.so</c> welke het gegeven bibliotheekbestand installeert in <path>DESTTREE/lib</path> en deze terwijl hernoemd naar het tweede argument</ti></tr>
<tr><ti>newman</ti><ti>wrapper rond <c>doman</c> welke het gegeven bestand in <path>/usr/share/man/manX</path> installeert en deze terwijl hernoemd naar het tweede argument</ti></tr>
<tr><ti>newsbin</ti><ti>wrapper rond <c>dosbin</c> welke het gegeven bestand installeert in <path>DESTTREE/sbin</path> en deze terwijl hernoemd naar het tweede argument</ti></tr>
<tr><ti>pmake</ti><ti>ouderwets, gebruik emake</ti></tr>
<tr><ti>prepalldocs</ti><ti>recursief gzip alle documentatiebestanden in <path>/usr/share/doc</path> en herstel de symlinks die door deze operatie ongeldig zouden worden</ti></tr>
<tr><ti>prepallinfo</ti><ti>recursief gzip alle info bestanden in <path>/usr/share/info</path></ti></tr>
<tr><ti>prepallman</ti><ti>recursief gzip alle manpages in <path>/opt/*/man/*</path>, <path>/usr/share/man*</path>, <path>/usr/local/man/*</path>, <path>/usr/X11R6/share/man/*</path> en herstel alle symlinks die door deze operatie ongeldig zouden worden</ti></tr>
<tr><ti>prepall</ti><ti>wrapper rond <c>prepallman</c>, <c>prepallinfo</c> en <c>prepallstrip</c>. Zorgt er tevens voor dat alle bibliotheekbestanden in <path>/opt/*/lib, /lib, /usr/lib</path> en <path>/usr/X11R6/lib</path> uitvoerbaar zijn. Zorgt er tevens voor dat alle overblijvende aclocal macros in <path>/usr/share/aclocal</path> geplaatst worden</ti></tr>
<tr><ti>try</ti><ti>Ouderwets, gebruik <c>|| die</c>.</ti></tr>
</table>
</body>
</section>
</chapter>

<chapter>
<title>Pakket Afhankelijkheden</title>

<section>
<title>Waarom afhankelijkheedn belangrijk zijn</title>
<body>
<p>
Portage is meer dan een handig script dat je de mogelijkheid biedt om
eenvoudig een programma of bibliotheek vanuit de broncode te
installeren. Het zal tevens alle nodige afhankelijkheden downloaden en
installeren indien deze in de ebuild vermeld worden.
</p>

<p>
In de officiele ebuilds zijn alle afhankelijkheden al vermeld, dus
wanneer je <c>emerge net-www/mozilla/mozilla-1.0</c> uitvoert zal
Portage ervoor zorgen dat alle bibliotheekbestanden die Mozilla nodig
heeft gecompileerd en geinstalleerd worden alvorens Mozilla zelf
gecompileerd wordt.
</p>

<p>
Portage maakt zelfs onderscheidt tussen compilatieafhankelijkheden en
uitvoeringsafhankelijkheden. (Addertje: Op dit moment installeert
Portage zowel de compilatie- als uitvoeringsafhankelijkheden en laat
deze dan staan. Later zal het mogelijk zijn zodat enkel de
uitvoeringsafhankelijkheden blijven staan).
</p>

</body>
</section>

<section>
<title>Hoe moet je afhankelijkheden in je ebuild bestanden
neerschrijven?</title>
<body>
<p>
De <c>DEPEND</c> variabele in je <path>foo-x.y.z.ebuild</path> vertelt
Portage over welke pakketten er geinstalleerd moeten zijn om
<path>foo</path> te kunnen installeren. De <c>RDEPEND</c> variabele
specifieert welke pakketten er nodig zijn om <path>foo</path> te kunnen
gebruiken. Bijvoorbeeld:
</p>
<pre>
DEPEND="virtual/glibc
        sys-libs/zlib"
RDEPEND="virtual/glibc"
</pre>

<p>
Dit zegt aan Portage dat, om <path>foo-x.y.z</path> te kunnen
compileren, de pakketten <path>virtual/glibc</path> (meer over virtuals
volgt) en <path>sys-libs/zlib</path> nodig zijn. Het zegt niet welke
versies er nodig zijn, wat wil zeggen dat eender welke versie voldoet.
</p>

<p>
De "eender welke versie voldoet" is natuurlijk beetje bangelijk, en zal
niet altijd werken. Maar voor centrale bibliotheken zoals glibc, die
proberen om zo compatible mogelijk te zijn met andere versies, werkt
dit. Voor andere bibliotheken kunnen we altijd specifieke versies
meegeven. Er zijn verschillende manieren om dat te doen:
</p>
<pre>
&gt;=sys-apps/bar-1.2
=sys-apps/baz-1.0
</pre>

<p>
&gt;= en = doen wat je denkt dat ze doen; sys-apps/bar versie 1.2 of
recenter is goed (maw sys-apps/bar-2.0 voldoet), terwijl sys-apps/baz
versie 1.0 de enige versie is die voldoet.
</p>

<p>
Portage weet van 4 verschillende suffixen die als versienummer werken:
<c>-rX</c>, <c>-preX</c>, <c>-alphaX</c> en <c>-betaX</c> waar X een
nummer is (met zoveel cijfers als je wil). Gegeven de specificatie
<c>&gt;=sys-apps/foo-1.0</c> en de bestanden:
</p>
<pre>
sys-apps/frob-1.0-r1
sys-apps/frob-1.0
sys-apps/frob-1.0_pre1
sys-apps/frob-1.0_beta1
sys-apps/frob-1.0_alpha1
</pre>
<p>
Portage zal deze intern ordenen in de lijst bovenaan gegeven, en de
bovenste gebruiken. Dit wil zeggen dat het altijd <c>_beta</c> neemt
boven <c>_alpha</c>, <c>_pre</c> boven <c>_beta</c>, geen suffix boven
<c>_pre</c> en <c>-r</c> boven geen suffix.
</p>

<p>
Andere methoden om versie-ranges aan te duiden zijn:
</p>
<pre>
~sys-apps/qux-1.0
=sys-apps/foo-1.2*
</pre>

<p>
~sys-apps/qux-1.0 zal de nieuwste revisie van qux-1.0 nemen.
</p>

<p>
=sys-apps/foo-1.2* zal de nieuwste versie van de 1.2-series nemen, maar
zal 1.3 en recentere series negeren. Maw foo-1.2.3 en foo-1.2.0 zijn
geldig, maar foo-1.3.3 en foo-1.3.0 niet.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Testen en ontwikkelen</title>

<section>
<title>ChangeLog</title>
<body>
<p>
Wanneer je een ebuild update (of een nieuwe schrijft) moet je zijn
ChangeLog altijd ook updaten (of een nieuwe aanmaken). Het bestand
<path>skel.ChangeLog</path> bevat een voorbeeld ChangeLog welke je als
basis kan gebruiken.
</p>

<p>
Het doel van de ChangeLog is om te documenteren <i>wat</i> er gebeurt,
<i>waarom</i> het gebeurt, en door <i>wie</i>. Dit laat toe voor
ontwikkelaars en gebruikers om aanpassingen te overzien.
</p>

<p>
De ChangeLog is vooral bedoelt voor de gebruikers, dus zorg ervoor dat
je je meldingen kort en overzichtelijk houdt, zonder verlies aan inhoud.
Zorg er tevens voor dat je geen volledige essay ervan maakt.
</p>
</body>
</section>

<section>
<title>Ebuilds lokaal opslaan</title>
<body>
<p>
Om je ebuilds te kunnen testen (en dus ervoor zorgen dat Portage hiervan
op de hoogte is) moet je je ebuilds op een gekende plaats opslaan.
Portage gebruikt de <c>PORTDIR_OVERLAY</c> variabele die je in
<path>/etc/make.conf</path> kan definieren. Je moet deze variabelen
instellen op je lokale directorie (bijvoorbeeld
<path>/usr/local/portage</path>).
</p>
<p>
In die directorie moet je dezelfde structuur (en categorien) gebruiken
als in <path>/usr/portage</path>.
</p>
<p>
Door gebruik te maken van <c>PORTDIR_OVERLAY</c> blijven je ebuilds op
je systeem, zelfs na een <c>emerge sync</c>, en ze blijven gekend voor
Portage.
</p>
</body>
</section>

<section>
<title>Interessante test tools</title>
<body>
<p>
We hebben enkele interessante tools die je helpen in het schrijven en
onderhouden van je ebuilds.
</p>

<warn>
Een herinnering aan het feit dat <c>lintool</c> niet goed werkt. Gebruik
repoman!
</warn>
<ul>
<li>
<c>lintool</c> - Controleert ebuilds, ChangeLogs en digest bestanden
voor syntactische correctheid.
</li>
<li>
<c>change</c> - Maakt een nieuwe ChangeLog aan of voegt een regel toe
aan een bestaande ChangeLog.
</li>
<li>
<c>gentool-bump-revision</c> - Tool die de revisienummer verhoogt, een
nieuwe revisie toevoegt aan de CVS, de oude verwijdert en de ChangeLog
update. Enkel voor ontwikkelaars.
</li>
<li>
<c>repoman</c> - Tool dat helpt om de CVS checkin procedure te
vereenvoudigen. Enkel voor ontwikkelaars.
</li>
<li>
<c>ccache</c> - Deze tool houdt de pre-processed bestanden bij zodat 
hercompileren van programmas sneller verloopt. Voeg <c>ccache</c> 
toe aan de <c>FEATURES</c> variabele in <path>/etc/make.conf</path> 
en voer <c>emerge ccache</c> uit.
</li>
</ul>
</body>
</section>
</chapter>
</guide>
