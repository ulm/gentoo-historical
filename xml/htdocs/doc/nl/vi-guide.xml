<?xml version="1.0" encoding="UTF-8"?>

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/nl/vi-guide.xml,v 1.6 2005/06/10 20:06:58 swift Exp $ -->

<!--
    English doc rev 1.8
-->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link = "/doc/nl/vi-guide.xml">
<title>vi leren -- de cheatsheet methode</title>
<author title="Author"><mail link="drobbins@gentoo.org">Daniel Robbins</mail></author>
<author title="Author"><mail link="stocke2@gentoo.org">Eric Stockbridge</mail></author>
<author title="Translator"><mail link="swift@gentoo.org">Sven Vermeulen</mail></author>
<abstract>
Deze handleiding zal je uitleggen hoe je vi leert gebruiken met een cheatsheet
zodat je snel je commando's kan terugvinden. Deze handleiding is bedoelt voor
vi-beginners.
</abstract>

<version>1.1.2</version>
<date>4 Oktober 2003</date>

<chapter>
<title>Erin vliegen</title>
<section>
<title>Inleiding</title>
<body>
<p>
Deze tutorial zal je uitleggen hoe je vi, een zeer krachtige editor, kan
gebruiken. Door gebruik te maken van een krachtige cheatsheet zal je wat je
leert niet snel vergeten en kan je toch snel veel zaken van vi aanleren. In
deze tutorial zullen we je leren navigeren, tekst aanpassen, insert mode
gebruiken, kopieren en plakken van tekst, alsook belangrijke vim-extensies
zoals multi-window editing.
</p><p>
Indien je niet echt zeker bent van jezelf of je bent nog niet echt gewend om
met vi te werken, dan ben je het jezelf verschuldigd om deze tutorial te lezen
om snel met een van de meest populaire en krachtige Linux/UNIX editors te
kunnen werken.
</p>
        
</body>
</section>
<section>
<title>Over de handleiding</title>
<body>
</body>
</section>
<section>
<title>VI snel leren</title>
<body>
<p>
Er is 1 ding dat vi zeer moeilijk maakt te leren -- vi heeft veeel commando's.
Om vi efficient te gebruiken dien je er best enkele van buiten te kennen. Dit
kan lang duren, en een van de doelen van deze handleiding is om niet al te veel
van je tijd in te nemen. Dus, eerste uitdaging: hoe zorgen we ervoor dat je
snel en efficient de commando's kan terugvinden zonder ze direct vanbuiten te
blokken?
</p>
<p>
Om deze uitdaging tot een goed einde te brengen gaan we een cheatsheet
aanmaken. Deze bevat alle belangrijke vi-commando's. Nadat je deze tutorial
gelezen en uitgevoerd hebt zal je van deze cheatsheet kunnen gebruik maken om
vergeten commando's terug te vinden. Naarmate je de commando's meer en meer
gebruikt zal je minder en minder afhankelijk worden van de cheatsheet. Door
deze methode leer je dus snel efficient werken met vi!
</p>
</body>
</section>
<section>
<title>Het leerproces</title>
<body>

<p>
In deze handleiding zal ik verschillende technieken gebruiken om je te helpen
leren. Allereerst zal ik uitleggen hoe een specifiek commando werkt (dit is
nogal wiedes :). Daarna zal ik je vragen om het commando in vi uit te testen
(praktijkervaring, zeer belangrijk) en daarna moet je iets op je cheatsheet
schrijven (voor toekomstig hergebruik). Indien je vi snel wil leren is het
belangrijk dat je al deze stappen uitvoert. Een commando proberen in vi en
neerschrijven zal je helpen in het memorizeren van het commando.
</p>
</body>
</section>
<section>
<title>Inleiding vim</title>
<body>

<p>
Er zijn verschillende vi-versies, en ik zal je uitleggen hoe je met 1
specifieke versie moet werken, namelijk "vim". Vim is zeer populair en heeft
enkele extraatjes die vi heel wat leuker maken (wanneer ik een vim-specifiek
commando demonstreer zal ik dat wel zeggen). Indien je vim nog moet
installeren: je kan deze vinden op 
<uri link="http://www.vim.org">www.vim.org</uri>. Er is tevens
gvim, een mooie grafische editor die net als vim werkt, maar dan met een mooie
GTK+ grafische interface. Hier is er een gvim screenshot van de auteur:
</p>

<figure link="http://www.ibiblio.org/web-gentoo/images/vishot.png" short="screenshot" caption="VIM screenshot"/>

<p>
Indie je een vi newbie bent, probeer dan gvim op je systeem. Het gebruiken van
vi via een GUI kan de moeilijkheidsgraad verlagen.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Eerste stappen</title>
<section>
<title>Kies een bestand</title>
<body>
<p>
Alvorens je vi leert gebruiken om bestanden aan te passen is het belangrijk te
weten hoe je onder vi in een bestand navigeert. Vi heeft veel
bewegingscommando's, en we gaan er een groot deel van bespreken. Voor dit deel
van de tutorial zoek je best een onbelangrijk tekstbestand en laadt het in via
vi door het volgende in te typen:
</p>
<pre>
$ vi myfile.txt
</pre><p>
Indien je vim geinstalleerd staan hebt, type dan "vim myfile.txt". Indien je
liever gvim gebruikt, type je "gvim myfile.txt". myfile.txt moet uiteraard de
naam zijn van dat onbelangrijk tekstbestand.
</p>
</body>
</section>

<section>
<title>Binnenin vi</title>
<body>

<p>
Nadat vi geladen is zal je een deel van je tekstbestand zien op je scherm.
Proficiat, je bent in vi. In tegenstelling tot veel editors start vi in wat de
"command mode" heet. Dat wil zeggen dat indien je "l" indrukt op je keyboard,
dat dan geen "l" in je tekstbestand wordt gestoken, maar dat de cursor 1
karakter naar rechts zal verschuiven. In command mode zijn de karakters die je
ingeeft de commando's die je aan vi geeft, dit in tegenstelling tot de meeste
editors waar de karakters direct aanpassingen veroorzaken in het tekstbestand.
Een van de meest essentiele types van commando's zijn navigatiecommando's.
Laten we er eens enkele bekijken:
</p>

</body>
</section>
</chapter>
<chapter>
<title>Rondhuppelen</title>
<section>
<title>Rondhuppelen in vi, deel 1</title>
<body>

	<p>
Wanneer je in command mode bent kan je de <c>h</c>, <c>j</c>, <c>k</c> en
<c>l</c> gebruiken om je cursor links, lager, hoger of rechts plaatsen. De
<c>h</c>, <c>j</c>, <c>k</c> en <c>l</c> toetsen zijn handig omdat, wanneer je
ze gewend bent, je zeer snel kan navigeren aangezien je je handpalm niet moet
verleggen. Gebruik <c>h, j, k</c> en <c>l</c> nu om in je tekstbestand te
navigeren. Bemerk dat vi je niet toelaat om naar de vorige regel te springen
indien je <c>h</c> indrukt terwijl je op het eerste karakter van een zin staat.
Uiteraard zal tevens <c>l</c> niet naar een nieuwe regel springen indien je op
het einde van een zin staat.
</p>

</body>
</section>
<section>
<title>Rondhuppelen in vi, deel 2</title>
<body>

<p>
vi levert speciale shortcuts voor het springen naar het begin en einde van een
regel. Je kan <c>0</c> (nul) indrukken om naar het begin te vliegen, en
<c>$</c> voor het einde. Probeer maar. Aangezien vi nog meer van deze leuke
zaken heeft is het een zeer handige "pager" (zoals less en more). Indien je vi
instelt als je pager zal je nog sneller al zijn navigatiecommando's leren.
</p>

<p>
Je kan tevens <c>&lt;CTRL&gt;-F</c> en <c>&lt;CTRL&gt;-B</c> gebruiken om een
volledige pagina verder respectievelijk terug te gaan. Moderne versies van vi
(zoals vim) laten je tevens toe PGUP en PGDOWN te gebruiken.
</p>

</body>
</section>
<section>
<title>Woordgoochelen, deel 1</title>
<body>
<p>
vi laat toe dat je links en rechts navigeert, woord per woord. Om naar het
eerste karakter van het volgende woord te gaan, druk <c>w</c>. Om naar het
laatste karakter van het volgende woord te gaan, druk <c>e</c>. Om naar het
eerste karakter van het <c>voorgaande</c> woord te gaan, druk <c>b</c>. Zeker
uitproberen!
</p>
</body>
</section>

<section>
<title>Woordgoochelen, deel 2</title>
<body>
<p>
Nadat je met deze commando's wat zitten spelen hebt zal je merken dat vi
woorden zoals "foo-bar-oni" als 5 aparte woorden interpreteert! Dit is per
default aangezien vi woorden onderscheidt tussen spaties <c>of</c> punctuatie.
foo-bar-oni is dus een 5-woorden-term: "foo", "-", "bar", "-" en "oni".
</p>
<p>
Soms is dit wat je wil, soms ook niet. Gelukkig herkent vi ook het concept van
"grote woorden". vi onderscheidt grote woorden enkel door <c>spaties of nieuwe
regels</c>. Dit wil zeggen dat, terwijl foo-bar-oni als een 5-woorden-vi-term
gezien wordt, het maar 1 vi-groot-woord is.
</p>

</body>
</section>
<section>
<title>Woordgoochelen, deel 3</title>
<body>
<p>
Om tussen de vorige en volgende grote woorden te navigeren moet je dezelfde
commando's gebruiken, maar dan in <c>hoofdletters</c>. Dus <c>W</c> om naar het
eerste karakter van het volgende woord te gaan, <c>E</c> voor het laatste
karakter van het volgende woord, en <c>B</c> voor het eerste karakter van het
voorgaande grote woord. 
</p>


</body>
</section>
<section>
<title>Andere bewegingen</title>
<body>
<p>
Er zijn nog enkele andere leuke commando's die je zeker moet kennen alvorens je
je cheatsheet opstelt. Je kan de <c>(</c> en <c>)</c> karakters gebruiken om
naar het begin van de volgende respectievelijk vorige regel te gaan. 
Daarbij kan je tevens <c>{</c> en <c>}</c> gebruiken om naar het begin van de
volgende respectievelijk vorige paragraaf te gaan.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Afsluiten</title>
<section>
<title>Afsluiten</title>
<body>
<p>
Nu je weet hoe je moet navigeren, zijn er nog enkele andere commando's die zeer
belangrijk zijn. Gebruik <c>:q</c> om vi af te sluiten. Indien dat niet werkt,
dan heb je waarschijnlijk het bestand (per ongeluk) aangepast. Om vi te
forceren af te sluiten, zonder de aanpassingen op te slaan, type je <c>:q!</c>.
Je zou jezelf nu weer op de prompt moeten bevinden.
</p>

<p>
In vi zijn de commando's die beginnen met ":" zogenaamde <c>ex-mode</c>
commando's. Dit is omdat vi een ingebouwde niet-visuele editor bevat, genaamd
<e>ex</e>. Deze kan gebruikt worden, net zoals sed, om regel-aanpassing
operaties uit te voeren. Zoals je dus al zag kan het tevens gebruikt worden om
vi af te sluiten. Indien je ooit <c>Q</c> slaat terwijl je in commando-mode
zit, dan zal je naar de ex-mode gaan. Indien dat ooit gebeurt zal je door een
":"-prompt begroet worden. Door enter te slaan zal je een volledig scherm terug
gescrolled worden. Om naar de goede oude vi-mode over te gaan, type gewoon vi
en druk enter.
</p>

</body>
</section>
</chapter>
<chapter>
<title>De cheatsheet</title>
<section>
<title>De beginselen van de cheatsheet</title>
<body>
<p>
We hebben al een aardig aantal commando's bekeken, en dus is het tijd om ze te
noteren op onze cheatsheet. Je neemt best een A4'tje aangezien we veel
informatie zullen neerschrijven. Hier is er een afbeelding van de auteur zijn
cheatsheet waarop al bovenstaande commando's staan. Probeer dezelfde layout te
gebruiken zodat we alles op 1 papiertje kunnen plaatsen.
</p>

<figure link="http://www.ibiblio.org/web-gentoo/images/vicheat-first.png" short="Eerste deel van de cheatsheet" caption="Cheatsheet"/>

</body>

</section>
<section>
<title>Vanalles van vi</title>

<body>
<p>
Laten we verder doen. In commando-mode kan je naar een specifieke regel
springen door <c>G</c> te typen. Om naar de allereerste regel te gaan, type
<c>1G</c>. Merk op dat de <c>G</c> een hoofdletter is. 
</p>
<p>
Indien je naar de eerstvolgende string wil gaan die voldoet aan een bepaalde
reguliere expressie, type <c>/&lt;regexp&gt;</c> en druk op <c>enter</c>.
Vervang &lt;regexp&gt; met de reguliere expressie waarnaar je op zoek bent.
Indien je niet weet hoe je regexps moet ingeven moet je niet panikeren --
<c>/foo</c> zal zoeken naar de eerstvolgende "foo". Het enige waarvoor je
moet oppassen is het zoeken naar een van de volgende karakters: <c>^.$\</c>.
Deze moet je escapen (een backslash voor plaatsen). Bijvoorbeeld
<c>/foo\.gif</c> zal zoeken naar de eerste <c>foo.gif</c> vanaf de positie dat
je cursor nu staat.
</p>
<p>
Om de voorwaardse zoektocht te herhalen, druk op <c>n</c>. Om achterwaarts
te zoeken, type <c>N</c>. Zoals altijd is het belangrijk dat je deze zaken nu
test. Je kan tevens <c>//</c> typen om de laatste zoekopdracht te herhalen.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Opslaan en Aanpassen</title>
<section>
<title>Opslaan en Opslaan Als...</title>
<body>
<p>
We hebben gezien hoe je het <c>ex</c> commando <c>:q</c> kan gebruiken om vi af
te sluiten. Indien je je aanpassingen wil opslaan, type <c>:w</c>. Indien je je
aanpassingen in een ander bestand wil opslaan, type <c>:w bestandsnaam</c> om
deze op te slaan als <e>bestandsnaam</e>. Indien je wil opslaan en afsluiten,
type <c>:x</c> of <c>:wq</c>.
</p>
<p>
In vim (en andere geavanceerde vi-editors, zoals elvis) kan je meerdere buffers
open staan hebben. Om een bestand in een nieuwe window te openen, type <c>:sp
bestandsnaam</c>. <e>bestandsnaam</e> zal klaar staan om aan te passen in een
split window. Om tussen deze windows te switchen type je <c>&lt;CTRL&gt;-w
&lt;CTRL&gt;-w</c> (dus 2 keer na elkaar control-w). De commando's <c>:q</c>,
<c>:q!</c> en <c>:x</c> werken enkel op de actieve window.
</p>
</body>
</section>

<section>
<title>Eenvoudige aanpassingen</title>
<body>
<p>
Nu is het tijd om enkele eenvoudige edit-commando's te leren. Ik noem ze simpel
omdat de commando's je in commando-mode houden. De meer complexe commando's
zullen je vanzelf in insert-mode steken -- een modus waardoor je rechtstreeks
het bestand kan aanpassen. Deze zullen we later behandelen.
</p>

<p>
Ga met je cursor over enkele karakters en druk <c>x</c> in. Je zal zien dat
<c>x</c> het karakter onder de cursor verwijdert. Ga nu naar het midden van een
paragraaf en druk <c>J</c>. Je zal zien dat <c>J</c> de volgende paragraaf aan
het eind van de huidige paragraaf plakt. Druk nu eens <c>r</c> terwijl je met
je cursor op een karakter staat, en type een nieuw karakter in. Je zal zien dat
het karakter vervangen wordt met het nieuwe karakter. Ga nu naar een bepaalde
regel en druk <c>dd</c>. Je zal zien dat deze de huidige regel verwijdert.
</p>

</body>
</section>
<section>
<title>Herhalen en Verwijderen</title>
<body>
<p>
Je kan eender welk commando herhaaldelijk uitvoeren door de <c>.</c> in te
drukken. Indien je experimenteert zal je merken dat <c>dd...</c> 4 regels zal
verwijderen, en <c>J......</c> zal 4 regels aan elkaar hangen. Uiteraard heeft
vi een snellere manier voor deze zaken :)
</p>
<p>
Om tekst te verwijderen kan je tevens het <c>d</c> commando gevolgd door een
navigatiecommando uitvoeren. Bijvoorbeeld <c>dw</c> zal alle tekst verwijderen
vanaf de huidige positie tot aan het begin van het bestand; <c>d)</c> zal alle
tekst verwijderen tot aan het eind van de volgende zin, en <c>d}</c> zal de
rest van de paragraaf verwijderen. Experimenteer et het <c>d</c> commando en de
andere edit-commando's totdat je ze allemaal onder de knie hebt.
</p>
</body>
</section>
<section>
<title>Ongedaan maken</title>
<body>
<p>
Nu dat we bezig zijn met verwijdercommando's is het een goed moment om te leren
hoe je aanpassingen ongedaan maakt. Door <c>u</c> te drukken kan je je laatste
commando ongedaan maken. Moderne versies van vi, zoals vim, laten je toe om
meerdere commando's ongedaan te maken door herhaaldelijk op <c>u</c> te
drukken. Probeer ze zeker uit.
</p>
</body>
</section>

<section>
<title>De cheatsheet updaten</title>
<body>
<p>
Het is tijd om de cheatsheet up te daten. Na het toevoegen van alle geziene
commando's zal je papier er als volgt kunnen uitzien:
</p>

	<figure link="http://www.ibiblio.org/web-gentoo/images/vicheat-edit.png" short="Cheat sheet" caption="Cheatsheet met editing-commando's"/>

</body>
</section>
</chapter>
<chapter>
<title>Insert mode</title>
<section>
<title>Insert mode</title>

<body>
<p>
Tot nu toe hebben we geleerd om met vi te navigeren, bestanden te manipuleren,
en basis editing commando's uit te voeren. Ik heb je echter nog niet uitgelegd
hoe je gewoon tekst in je bestand kan zetten! Dit is met opzet, aangezien vi's
insert mode ietswat ingewikkeld is in het begin. Maar eenmaal je gewend bent
met deze modus zal je zijn complexiteit (en flexibiliteit) zeker waarderen.
</p>
<p>
In vi insert modus kan je tekst aanpassen en invoegen zoals je bij de meeste
andere editors kan doen. Eenmaal je je aanpassingen gemaakt hebt kan je escape
drukken om terug te keren naar commandomodus. Je kan naar insert modus gaan
door <c>i</c> of <c>a</c> in te drukken. Indien je <c>i</c> drukt zal je tekst
voor het geselecteerde karakter komen, terwijl dat bij <c>a</c> erachter is.
Je kan dit eenvoudig onthouden door <e>insert</e> respectievelijk <e>append</e>
te denken. Vergeet niet om <c>&lt;Esc&gt;</c> te drukken om terug te keren naar
de commando modus.
</p>
</body>
</section>
<section>
<title>Voordelen van insert mode</title>
<body>
<p>
Probeer de <c>i</c> en <c>a</c> commando's uit. Type wat tekst en ga terug naar
de commando mode. Druk op <c>&lt;Enter&gt;</c> nadat je <c>a</c> of <c>i</c>
getypt hebt en let op wat er gebeurt. Probeer de pijltjes van je keyboard en de
<c>&lt;DEL&gt;</c> toets om te weten te komen hoe de insertmodus werkt. Door de
pijltjestoetsen en delete-toets te gebruiken kan je verschillende edit-stappen
uitvoeren zonder telkens de insertmode te verlaten.
</p>
</body>
</section>
<section>
<title>Insert opties</title>
<body>
<p>
Hier zijn er enkele andere interessante methoden om in insertmode te geraken.
Druk <c>A</c> om aan het <e>eind</e> van de regel te starten. <c>I</c> zal dan
aan het begin van de regel starten. Druk <c>o</c> om een nieuwe, blanco regel
te creeren net onder de huidige regel, en <c>O</c> om een blanco regel boven de
huidige regel te maken. Om de ganse regel met een nieuwe regel te vervangen,
druk <c>cc</c>. Om alles vanaf de huidige positie tot het eind van de regel te
vervangen, druk <c>c$</c>. Om alles vanaf de huidige positie tot het begin van
de regel te vervangen, druk <c>c0</c>.
</p>
<p>
Al bovenstaande commando's zullen je in insert-modus plaatsen. Druk op escape
om de insertmodus te verlaten.
</p>

</body>
</section>
<section>
<title>Tekst aanpassen</title>
<body>
<p>
We hebben het <c>c</c> (change) commando al een beetje gebruikt in de
commando's <c>cc, c0, c$</c>. <c>cc</c> is een speciaal commando, gelijkaardig
aan <c>dd</c>. De andere commando's zijn voorbeelden van het gebruiken van het
<c>c</c> commando met navigatiecommando's. Het is dus geheel gelijkaardig aan
het <c>d</c> commando, behalve dat het de gebruiker daarna in insertmodus
plaatst. Probeer enkele commando's te combineren en test ze uit op je bestand
(hint: <c>cW</c>, <c>ce</c>, <c>(</c>.)
</p>

</body>
</section>
</chapter>
<chapter>
<title>Combinatie Commandos</title>
<section>
<title>Combinatie Commandos</title>
<body>
<p>
Vi wordt pas <e>enorm</e> krachtig indien je begint met combinaties te
creeeren, zoals <c>d{</c> en <c>cw</c>. Daarbij kan je een nummer plaatsen,
zoals <c>3w</c>, waardoor vi 3 woorden naar rechts zal springen. Hier zijn nog
enkele combinatie-voorbeeldcommando's: <c>12b</c>, <c>4j</c>.
</p>
<p>
Behalve het gebruik van nummer-navigatie commando's laat vi tevens toe <c>d</c>
en <c>c</c> te combineren met nummers of navigatiecommando's. Dus <c>d3w</c>
zal de volgende 3 woorden verwijderen, <c>d2j</c> zal de huidige en de volgende
2 regels verwijderen enz. Test verschillende <c>c,d</c>-combinaties uit.
Eenmaal je deze onder de knie hebt zal je enorm snel met vi bestanden kunnen
manipuleren.
</p>

</body>
</section>
<section>
<title>De cheatsheet updaten</title>
<body>
<p>
Het is weer tijd om de cheatsheet up te daten. De mijne ziet er momenteel als
volgt uit:
</p>
	
  <figure link="http://www.ibiblio.org/web-gentoo/images/vicheat-compound.png" short="Cheat Sheet" caption="Cheatsheet met combinaties"/>

</body>
</section>
<section>
<title>Productivity features</title>

<body>
<p>
Tot nu toe hebben we gezien hoe je navigeert, opslaat en afsluit, hoe je
eenvoudige aanpassingen en verwijdercommando's ingeeft, en hoe je de insert
modus moet gebruiken. Met alle zaken op de cheatsheet moet je nu al gemakkelijk
bijna alle gewenste taken met vi kunnen afhandelen.
</p>
<p>
Vi heeft echter nog heel wat meer in zijn mars. In deze sectie zal ik je
uitleggen hoe je knipt, kopieert, plakt, zoekt en vervangt, en hoe je de
<e>autoindent</e> gebruikt. Deze maken het leven met vi heel wat leuker.
</p>

</body>
</section>
<section>
<title>Visuele modus</title>
<body>
<p>
De beste manier om te knippen, kopieren en plakken is met de visuele modus, een
speciale modus die toegevoegd is aan moderne versies van vi, zoals vim. Het is
een soort van selecteermodus. Eenmaal de tekst geselecteert is kan je ze
knippen, kopieren en plakken. Indien je gvim gebruikt kan je dat uiteraard door
gewoonweg met je muis te werken.
</p>
	<figure link="http://www.ibiblio.org/web-gentoo/images/vihighlight.png" short="Highlighted text" caption="VIM met geselecteerde tekst"/>

</body>
</section>
<section>
<title></title>
<body>

<p>
Daarbij kan je tevens in visuele mode gaan door <c>v</c> te drukken (dit is
trouwens de enige manier indien je met vim werkt). Door daarna met de cursor te
navigeren zal je delen van je tekst selecteren. Eenmaal geselecteert zijn we
klaar om te knippen of kopieren.
</p>

<p>
Indien je de tekst wil kopieren, druk <c>y</c> (<e>yank</e>). Indien je de
tekst knipt, druk <c>d</c>. Je zal teruggesmeten worden naar commandomodus. Ga
nu naar de positie waar je de tekst in wil voegen, en druk <c>P</c> om de tekst
na de cursor te plaatsen, of <c>p</c> om de tekst voor de cursor te plaatsen.
Voila, de knippen/kopieren/plakken is gedaan. Probeer verschillende operaties
uit alvorens je verder gaat.
</p>

</body>
</section>
<section>
<title>Tekst Vervangen</title>
<body>
<p>
Om bepaalde expressies van tekst te vervangen gebruiken we de <e>ex</e> modus.
Indien je de eerstvolgende expressie op de huidige lijn wil vervangen, type
<c>:s/&lt;regexp&gt;/&lt;vervangtekst&gt;/</c> en druk op enter. Hier is
&lt;regexp&gt; de expressie die je wil vervangen en &lt;vervangtekst&gt; de
tekst waarmee ze vervangen moet worden. Om alle expressies op de huidige lijn
te vervangen, gebruik <c>:s/&lt;regexp&gt;/&lt;vervangtekst&gt;/g</c> en druk
op enter. Om alle voorkomende expressies in je ganse tekst te vervangen,
gebruik <c>:%s/&lt;regexp&gt;/&lt;vervangtekst&gt;/g</c>. Indien je wil dat vi
bij elke vervanging vraagt of je wel wil vervangen, zet dan een extra <c>c</c>
achteraan: <c>:%s/&lt;regexp&gt;/&lt;vervangtekst&gt;/gc</c>.
</p>

</body>
</section>
<section>
<title>Inspringen</title>
<body>
<p>
vi ondersteunt automatisch inspringen, wat zeer handig is indien je broncode
aan het aanpassen bent. De meeste moderne implementaties van vi (zoals vim)
zullen vanzelf inspringen indien je broncodebestanden aan het aanpassen bent.
Indien deze ingeschakeld is kan je <c>&lt;CTRL&gt;-d</c> gebruiken om 1 niveau
in te springen, en <c>&lt;CTRL&gt;-t</c> om 1 niveau lager te gaan. Indien
autoindent niet vanzelf aanstaat kan je deze manueel activeren door <e>:set
autoindent</e> in te geven in <e>ex</e>-modus. Je kan tevens aan vi vertellen
dat je tab-afstand anders moet zijn door <c>:set tabstop</c> te gebruiken.
<c>:set tabstop=4</c> is zeer populair.
</p>

</body>
</section>
<section>
<title>Ons finale cheatsheet</title>
<body>
<p>
Voila, we zitten aan het eind van onze tutorial. Na het toevoegen van alle
geavanceerde commando's zou de cheatsheet er als volgt uit kunnen zien:
</p>
	<figure link="http://www.ibiblio.org/web-gentoo/images/vicheat-final.png" short="Cheat Sheet" caption="Finale cheatsheet"/>


<p>
Hou dit papiertje in de buurt, en gebruik vi om je bestanden en e-mails te
creeren of aan te passen. Gebruik de cheatsheet wanneer je ze nodig hebt; na
een weekje of zo zal je bijna alle commando's doorhebben en zal je
productiviteit de lucht in schieten.
</p>

</body>
</section>
<section>
<title>Resources</title>
<body>
<p>
Hier zijn er enkele resources die je handig kan vinden indien je nog meer wil
te weten komen over vi:
</p>
<ul>
<li><uri link="http://www.thomer.com/thomer/vi/vi.html">The vi Lovers Home
Page</uri>, een excellente resource.</li>
<li><uri link="http://www.vim.org">The vim homepage</uri> 
, de plaats voor alles wat vim aanbelangt</li>
<li>Indien je op zoek bent naar een goed boek, dan is <uri link="http://www.oreilly.com/catalog/vi6/">Learning the vi Editor, 6th Edition</uri> een excellente 
keuze, ze omschrijft nl tevens de vi-klonen zoals vim en elvis.</li>
</ul>
</body>
</section>

<section>
<title>Over dit document</title>
<body>
<p>De originele versie van dit document was eerst gepubliceerd op IBM 
DeveloperWorks, en is eigendom van Westtech Information Services. Dit document
is een aangepaste versie van het origineel, en bevat enkele verbeteringen
gemaakt door het Gentoo Linux documentatie team.</p>
</body>
</section>

</chapter>
</guide>
