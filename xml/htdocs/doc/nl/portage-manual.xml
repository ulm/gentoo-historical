<?xml version='1.0' encoding="UTF-8"?>

<!-- 
Last revision used: 1.18
Master Document: English version
-->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link = "/doc/nl/portage-manual.xml">
<title>Portage Handleiding</title>
<author title="Author and Editor">
    <mail link="blocke@shivan.org">Bruce A. Locke</mail>
</author>
<author title="Editor">
    <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Editor, Translator">
    <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Translator">
	<mail link="blubber@gentoo.org">Tiemo Kieft</mail>
</author>

<license/>

<abstract>
Deze handleiding geeft je een algemeen overzicht over Portage en gedetailleerde
configuratie-informatie en eindgebruikers-informatie aangaande het installeren
en onderhouden van packages door gebruik te maken van het Portage systeem.
</abstract>

<version>0.9.8</version>
<date>15 September 2003</date>

<chapter>
<title>Portage: een Overzicht</title>

<section>
<title>Overzicht</title>
<body>

<p>
Portage is een zeer geavanceerd package managment systeem. Het is flexibel
en heeft de mogelijkheid om zowel als eenvoudige compilatieinterface als
als hart van een hoge-ontwikkeling Linuxdistributie te werken. We noemen het
dan ook een &quot;Meta-distribution Engine&quot;. De Gentoo Linux
distributie is gemaakt rond Portage.
</p>

<p>
Gentoo Linux zelf wordt vaak als meta-distributie omschreven. Het bestaat
uit Portage en meer dan 4000 package compilatie-recepten die we
<i>ebuilds</i> noemen. Deze <i>ebuilds</i> leggen aan Portage uit hoe een
softwarepackage gecompileerd en geinstalleerd dient te worden. Door gebruik
te maken van profielen en de commandline tool <i>emerge</i> kunnen
gebruikers en ontwikkelaars Portage gebruiken om de packages waaruit het
onderliggende besturingssysteem bestaat te installeren en te beheren. 
</p>

<p>
Een Gentoo Linux distributie wordt gecompileerd net voor hij geinstalleerd
wordt. Het installeren van Gentoo bestaat uit het werkende krijgen van een
compiler en het compileren van Portage zodat deze dan de rest van de
broncode van het Internet kan halen en zo de rest van het systeem kan
compileren. Alhoewel Portage het gebruik van voorgemaakte binaire packages
ondersteunt is dit meer een compromis-oplossing voor trage machines of
ontwikkelaars die zeer snel een softwarepakket moeten kunnen herinstalleren,
of voor gebruikers die op snelle machines packages compileren voor tragere
machines.
</p>

<p>
Door deze eigenschappen, en het feit dat Portage zeer configureerbaar is in 
de manier waarop het compilatie en installatie afhandeld, zijn zeer weinig
Gentoo installaties hetzelfde. In zekere zin compileerd het Portage systeem een
persoonlijke linux distributie die voldoet aan de speciefiecaties van de
Portage configuratie, en de ebuilds.
</p>

<p>
Een eerste indruk van Portage zal je misschien leiden naar het idee van een
traditioneel BSD ports-systeem. Beide compileren packages van broncode en
laten gebruikers toe om veilig software te installeren en desinstalleren;
beide handelen ook autonoom afhankelijkheden (dependencies) af. Veel ideeen
van Portage zijn dan ook geleend van het BSD ports-systeem maar Portage is
zeker geen gewone ports-kopie.
</p>

<p>
Het Portage systeem is een samensmelting van Pythoncode, die het hart van
het systeem opmaakt, met Bash scripts-gebaseerde <i>Ebuilds</i>. In plaats
van met Makefiles en het <i>make</i> commando te prutsen maakt Portage
gebruik van de kracht van Python en de eenvoud van shellscripts met enkele
object-georienteerde karaktertrekken om een uniek en krachtig systeem te
genereren vanwie wij denken dat ze het summum van de huidige ports-systemen
is.
</p>

<p>
Sommige van de geavanceerde Portage-features zijn onder andere de
mogelijkheid om meerdere versies en revisies van eenzelfde package in het
systeem te hebben, voorwaardelijke afhankelijkheid-oplossingen en
feature-ondersteuning, exacte package managment, sandbox-veilige
installaties, configuratiebestandenbeveiliging, profielen en meer. Veel van
deze mogelijkheden worden later in deze handleiding uitvoerig besproken.
</p>

</body>
</section>

<section>
<title>Voorwaardelijke afhankelijkheidoplossing en
feature-ondersteuning</title>
<body>

<p>
Het Portage systeem is uniek op gebied van de flexibiliteit dat ze aanbiedt
aan de gebruikers. Het traditionele BSD ports-systeem ondersteunt maar 1
revisie per package in het systeem per keer. Portage heeft deze limitatie
niet. Meerdere versies van eenzelfde package kunnen beschikbaar zijn voor
installatie. Package afhankelijkheden, dat zijn andere softwaretitels die
nodig zijn voor het correct compileren en functioneren van een package,
kunnen gespecifieerd worden bij naam of bij naam+versie. Dit maakt het
mogelijk om veilig verschillende versies naast elkaar te hebben.
</p>

<p>
De afhankelijkheidondersteuning ondersteunt tevens voorwaardelijke
afhankelijkheden. Portage heeft een krachtig concept genaamd <i>USE
instellingen</i>. Door 1 variabele aan te passen in een Portage
configuratiebestand kan je optionele ondersteuning uitschakelen of
activeren (en dus tevens de afhankelijkheden hieromtrent), en dit voor 1
package, meerdere packages of alle packages op je systeem. Dit is een zeer
flexibel en krachtig systeem dat later verder uitgedelfd wordt.
</p>

<p>
Verder ondersteunt Portage het concept van <i>SLOT</i>s. Tijdens de
ontwikkeling van Gentoo Linux merkten ontwikkelaars dat verschillende
versies van bepaalde packages (zoals bibliotheekbestanden) geinstalleerd
dienen te zijn om aan de afhankelijkheden van andere packages te voldoen.
De traditionele aanpak van dit probleem is om de verschillende versies van
die package als aparte packages aan te zien met een licht verschillende
naam.
</p>

<p>
In plaats van de ontwikkelaars aan te leren om bepaalde versies als aparte
packages te ontwikkelen leren we onze ontwikkelaars om al die versies toch
in 1 package te onderhouden, maar om het scheiden te laten gebeuren dmv een
zogenaamde <i>SLOT</i>. Een voorbeeld is bijvoorbeeld een veelvoorkomende
bibliotheek genaamd freetype. De 1.x-serie van freetype is incompatibel met
de 2.x-serie, maar beide versies zijn nodig om aan de afhankelijkheden van
verschillende packages te voldoen. De meeste distributies zouden hier 2
packages genaamd &quot;freetype&quot; en &quot;freetype2&quot; leveren. Wij
zien dat echter als een fout in hun package managment strategie. Wij zeggen
gewoonweg dat de eerste als <i>SLOT</i> nummer 1 heeft, en de tweede
<i>SLOT</i> 2. Met deze informatie kan Portage beide versies onderscheiden
en upgraden indien updates voor elk van die gescheiden delen bestaan.
</p>

</body>
</section>

<section>
<title>Profielen</title>
<body>

<p>
Portage ondersteunt het concept van <i>profielen</i>. Een profiel bestaat
uit een lijst van packages en versies met wat uitleg en een verzameling van
default configuratieopties die door Portage gebruikt worden. Een profiel
vertelt Portage welke packages en welke specifieke versies van die packages
aanvaard of geweigerd moeten worden. Gebruikers kunnen tussen profielen
switchen door een symlink (<path>/etc/make.profile</path>) aan te passen.
Dit mag simpel lijken, maar het laat tenminste toe dat Portage een
basissysteem kan aanmaken en als professioneel gradueel compileersysteem
kan optreden.
</p>

<p>
De algehele ontwikkeling van Gentoo Linux heeft geresulteerd in een grote
verzameling van <i>ebuild</i> bestanden die Portage gebruikt samen met een
voorgedefinieerd profiel. Dit profiel beschrijft welke packages als
&quot;basis&quot; aanzien worden, packages die dus van vitaal belang zijn
voor het systeem. Het profiel laat tevens toe dat ontwikkelaars bepaalde
packages blokkeren of deblokkeren alsook bepaalde versies van packages
tijdelijk als &quot;kapot&quot; markeren zodat gewone gebruikers die niet
kunnen installeren. De <i>ebuild</i> bestanden vertellen Portage hoe de
programmas, die door een specifiek profiel toegelaten worden, gecompileerd 
en geinstalleerd moeten worden.
</p>

</body>
</section>
</chapter>


<chapter>
<title>Portage configureren</title>

<section>
<title>Overzicht</title>
<body>

<p>
Dit hoofdstuk legt de verschillende aspecten van het configureren van
Portage uit. Deze zaken zijn belangrijk voor zowel gebruikers als
ontwikkelaars. Portage is een zeer flexibel systeem en je moet weten hoe je
Portage configureert aangezien deze instaat voor je systeem en de
optimalisaties die je zelf instelt.
</p>

<p>
Gelieve op te merken dat &quot;gebruikers&quot; hier mensen zijn met de
nodige beheerrechten op het Gentoo Linux systeem zodat ze Portage kunnen
gebruiken alsook de configuratie van het systeem wijzigen. Je moet dus
root-access hebben om de Portage-configuratie aan te passen alsook om packages
te emergen.
</p>

</body>
</section>

<section>
<title>Portage Configuratiebestanden</title>
<body>

<p>
Bijna alle configuratieopties die verder uitgelegd worden kunnen gevonden
worden in <path>/etc/make.conf</path>,
<path>/etc/make.profile/make.defaults</path> en <path>/etc/make.globals</path>.
<path>/etc/make.conf</path> bevat verschillende variabelen die door Portage
gebruikt worden. Portage zal de gedefinieerde variabelen eerst raadplegen
alvorens hij iets doet.
</p>

<p>
Indien geen omgevingsvariabelen gevonden zijn controleert Portage
<path>/etc/make.conf</path>. Indien geen aanpassing gevonden is in
<path>/etc/make.conf</path>, dan controleert Portage
<path>/etc/make.profile/make.defaults</path>. Indien ook daar geen instelling
gevonden is wordt de default instelling van <path>/etc/make.globals</path>
genomen. Alles in <path>/etc/make.conf</path> en <path>/etc/make.globals</path>
kan aanzien worden als systeemwijde omgevingsvariabelen.
</p>

<p>
Wanneer je wil zien of een optie al gedefinieerd is kijk je best eerst in
<path>/etc/make.conf</path> en daarna in <path>/etc/make.globals</path>.
Tenzij anders vermeld zijn opties in <path>/etc/make.conf</path> dominant
tov van de andere locaties.
</p>

</body>
</section>

<section>
<title>USE instellingen</title>
<body>

<p>
De USE instellingen zijn een flexibele manier om ondersteuning voor
bepaalde zaken al dan niet te activeren, dit ofwel algemeen of specifiek
voor 1 of enkele packages. Dit laat toe dat de beheerer van het systeem
controle heeft over hoe packages gecompileerd worden op gebied van
ondersteuning van optionele zaken. Bijvoorbeeld kunnen packages optionele
GNOME-ondersteuning hebben; deze ondersteuning kan je uitschakelen door
geen <i>gnome</i> in de USE instelling te hebben (of deze expliciet te
desactiveren door <i>-gnome</i> in de USE instelling te plaatsen). Indien
je echter <i>gnome</i> wel in de USE instelling plaatst wordt deze
optionele GNOME-ondersteuning wel meegecompileerd.
</p>

<p>
Het effect van USE instellingen bij packages is afhankelijk van of de
software zelf die specifieke optie ondersteunt of niet. Indien de software
geen ondersteuning heeft voor die optionele feature, dan heeft die USE
instelling uiteraard geen effect. Veel package afhankelijkheden worden
tevens niet aanzien als optioneel waardoor de USE-instelling geen invloed
heeft op het compilatieproces. Een lijst van USE sleutelwoorden die door
een specifieke package ondersteund wordt kan je vinden door de
<i>DEPEND</i> en <i>RDEPEND</i> regels in een ebuild-bestand te raadplegen.
</p>

<p>
Een lijst van USE instellingen die door Gentoo Linux gebruikt worden kan je
vinden in <path>/usr/portage/profiles/use.desc</path	>. Elke USE instelling wordt
daar regel per regel vermeld samen met een kleine uitleg over wat de
instelling precies doet.
</p>

<p>
Portage kan zien of een USE instelling actief is door op 4 locaties te
kijken. Deze locaties passen de USE instellingen aan door middel van een
aan-uit methode. Portage gaat door elke locatie en onthoudt of een
instelling aan of af staat. 
</p>

<p>
De locaties die gecontroleerd worden zijn gedefinieerd in <i>USE_ORDER</i>,
samen met de volgorde. Dit staat in <path>/etc/make.globals</path>. Om een
bepaalde locatie uit te schakelen kan je die locatie uit deze variabele
halen.
</p>

<p>
Het volgende is een uitleg over elke locatie die in <i>USE_ORDER</i>
gedefinieerd staat.
</p>


<p>
<b>Default waarden (&quot;Defaults&quot;)</b>
</p>

<p>
Portage profielen kunnen een verzameling USE sleutelwoorden definieren.
Deze worden gedefinieerd in het <path>make.defaults</path> bestand in een
Portage profiel. Aangezien <path>/etc/make.profile</path> een link is naar
de huidig gebruikte Portage profiel, is
<path>/etc/make.profile/make.defaults</path> het bestand dat de default
waarden van de USE instellingen herbergt voor jouw profiel. Het is
aangeraden om dit bestand niet aan te passen aangezien nieuwe versies van
een profiel je aanpassingen ongedaan maken.
</p>

<p>
<b>Automatische USE-instellingen (&quot;Auto&quot;)</b>
</p>

<p>
Deze zijn gedefinieerd in de <path>use.defaults</path> bestand in de
Portage profiel (<path>/etc/make.profile/use.defaults</path>). Elke regel
bevat een USE-setting en een corresponderende package. Indien de vermelde
package geinstalleerd is op het systeem, wordt die USE-instelling vanzelf
als actief beschouwd. Dus, indien je <i>x11-base/xfree</i> geinstalleerd
hebt maar X niet als USE-instelling geactiveerd hebt, dan zal X zich toch
vanzelf in de USE-instelling gaan nestelen. 
Het wordt aangeraden om dit bestand niet aan te passen aangezien nieuwe
profielen je aanpassingen ongedaan maken.
</p>

<p>
<b>USE-instellingen als configuratieoptie</b>
</p>

<p>
Indien een <i>USE</i> configuratieinstelling gedefinieerd is in
<path>/etc/make.conf</path> dan worden deze door Portage gebruikt. Indien
een <i>USE</i> instelling niet in <path>make.conf</path> staat dan wordt
<path>/etc/make.globals</path> gecontroleerd. Deze instelling kan er als volgt
uit zien:
</p>

<pre caption="USE voorbeeld">
USE="slang readline gpm berkdb gdbm tcpd pam libwww ssl gb tk
     lm_sensors lvm ldap tex bonobo sdl gtk xfs evo pda ldap
     mmx mitshm perl python guile ruby postgres dvd 3dnow tcl
     lcms gif sdl vorbis ogg oss libg++ directfb decss snmp
     gnome X opengl mozilla pdflib gpg -nls gd xface jpilot
     -kde -qt -esd -motif -alsa oggvorbis"
</pre>

<p>
Een USE-instelling wordt geactiveerd door zijn naam in de USE-variabele te
plaatsen. Indien je een instelling expliciet wil desactiveren (omdat die bv
geactiveerd staat in <path>make.globals</path>) moet je er een <i>-</i>
teken voorplaatsen. Bijvoorbeeld, <i>gnome</i> activeert de
GNOME-ondersteuning, terwijl <i>-motif</i> de motif-ondersteuning
uitschakelt.
</p>

<p>
De <i>USE</i> instelling in <path>/etc/make.conf</path> is de aangeraden
locatie waarin je dergelijke instellingen moet plaatsen. Dit bestand wordt
immers niet vanzelf overschreven door Portage. Het is aangeraden dat je
specifiek die USE-instellingen aan- en uitschakelt die je niet door een
andere locatie wil laten (des)activeren. 
</p>

<p>
<b>USE-instellingen als omgevingsvariabele</b>
</p>

<p>
Een USE-instelling kan tevens als variabele in de huidige shell gezet
worden. Deze heeft dan voorrang op alle andere USE-instellingen.
</p>

<pre caption="USE variabelen overschrijven">
# <i>export USE="-gnome"</i>
# <i>emerge net-im/gaim</i>
</pre>

<p>
Deze laat het gebruik van een specifieke set van USE-instellingen toe voor
het mergen van een of meerdere specifieke packages. Elke uitvoering van
emerge na een manuele USE-instelling zal gebruik maken van die
USE-instelling voor zolang die shell bestaat en de USE-variabele
gedefinieerd is.
</p>

<note>
Alhoewel Portage op dit moment de USE-instellingen bijhoudt die bij het
compileren van een package zijn gebruikt zijn deze instellingen niet
blijvend. Indien een package opnieuw geemerged wordt of geupgrade in de
toekomst dan zal deze de USE-instellingen van die toekomstige periode
gebruiken en niet deze waarmee de package vooreerst is ge-emerged.
</note>

</body>
</section>

<section>
<title>Compiler Opties</title>
<body>

<p>
De compileropties die Portage gebruikt om een package te compileren kunnen
gedefinieerd worden in <path>/etc/make.conf</path> door <i>CHOST</i>,
<i>CFLAGS</i> en <i>CXXFLAGS</i> aan te passen. De <i>CHOST</i> instelling
specifieert voor welk platform je compileert terwijl de <i>CFLAGS</i> en
<i>CXXFLAGS</i> de specifieke compilerargumenten definieren die gebruikt
worden wanneer C respectievelijk C++ code gecompileerd wordt.
</p>

<p>
Verschillende default instellingen worden als commentaar voorzien in dat
bestand. Deze defaults zijn geen experimentele, maw indien je je
architectuur en type correct kiest zullen de optimalisatie goed werken. Indien
je deze aanpast kan je compilatie-errors krijgen of fouten in zowel de
compiler als in de software die gecompileerd wordt. Wees dus voorzichtig
als je een instelling aanpast aangezien dat ervoor kan zorgen dat je
systeem onstabiel wordt (dit is vooral voor strengere optimalisaties zo,
zwakkere zullen geen onstabiliteit veroorzaken).
</p>

<p>
Gebruikers met multiprocessor systemen kunnen voordeel halen door de
<i>MAKEOPTS</i> optie in <path>/etc/make.globals</path> aan te passen. Deze
optie wordt meegegeven aan het <i>make</i> commando gedurende package
compilatie om meerdere make-processen toe te laten.
</p>

</body>
</section>

<section>
<title>Directorie locaties</title>
<body>

<p>
Portage laat je toe om de directories die hij gebruikt om de packages te
compileren en bestanden te plaatsen zelfs te definieren. De meeste
gebruikers zullen echter deze locaties niet aanpassen. De volgende opties
kunnen ingesteld worden:
</p>

<ul>
<li><i>PORTDIR</i> - Portage bestandsstructuur locatie</li>
<li><i>DISTDIR</i> - Cache van de gedownloadde broncodes</li>
<li><i>PKGDIR</i> - Locatie van de zelf gemaakte .tgz packages</li>
<li><i>RPMDIR</i> - Locatie van de zelf gemaakte .rpm packages</li>
<li><i>PORTAGE_TMPDIR</i> - Tijdelijke locatie gebruikt om packages te compileren</li>
<li><i>BUILD_PREFIX</i> - Gerelateerd aan PORTAGE_TMPDIR</li>
<li><i>PKG_TMPDIR</i> - Gerelateerd aan PKGDIR</li>
</ul>

</body>
</section>


<section>
<title>Configuratiebestand beveiliging</title>
<body>

<p>
Portage laat toe dat configuratiebestanden in bepaalde directories
beschermd worden. Portage zal deze bestanden niet overschrijven bij het
upgraden of installeren van een package. Daarentegen zal het nieuwe bestand
hernoemd worden naar <path>._cfg0000_name</path>. Dit gebeurt opdat gebruikers
later kunnen kijken wat er nieuw is aan de bestanden en de aanpassingen
dan manueel kunnen doorvoeren.
</p>

<p>
Beschermde directories kunnen gedefinieerd worden in <i>CONFIG_PROTECT</i>
in ofwel <path>/etc/make.conf</path> of in <path>/etc/make.globals</path>.
Van specifieke bestanden en subdirectories in beschermde directories kan je 
de beveiliging opheffen door deze in <i>CONFIG_PROTECT_MASK</i> te
vermelden.
</p>

<p>
Het volgende is een voorbeeld en mag niet blindelings gekopieerd worden:
</p>

<pre caption="Bepaalde directories of bestanden beschermen">
CONFIG_PROTECT="/etc /usr/share/config /usr/kde/2/share/config"
CONFIG_PROTECT_MASK="/etc/gconf /etc/init.d /etc/pam.d"
</pre>

<p>
Gebruikers kunnen meer informatie over bestandsbeveiliging verkrijgen door
het volgende commando in een shell uit te voeren:
</p>

<pre caption="Meer informatie over Configuratie bestands bescherming">
# <i>emerge --help config</i>
</pre>

</body>
</section>

<section>
<title>FEATURES</title>
<body>

<p>
Portage biedt een aantal andere opties die meer naar ontwikkelaars gericht
zijn voor het besturen van Portage en het compileerproces van een package.
Deze opties zijn enkel interessant voor developers en kunnen vreemde
resultaten geven bij gewone gebruikers die niet weten wat ze doen.
</p>

<p>
De lijst van features die ondersteund moeten worden kan je aanzetten in
<i>FEATURES</i> in ofwel <path>/etc/make.conf</path> of
<path>/etc/make.globals</path>. Het volgende is een lijst van beschikbare
opties:
</p>

<ul>
<li><i>digest</i> : Automatisch een digest maken van nieuwe ebuilds</li>
<li><i>cvs</i> : Automatisch nieuwe ebuilds in de cvs committen</li>
<li><i>sandbox</i> : Activeert sandbox voor path prefix beveiliging</li>
<li><i>noclean</i> : Portage mag niet de broncode opkuisen als hij klaar is</li>
<li><i>noauto</i> : Niet vanzelf alle ebuild-stappen doorlopen</li>
<li><i>distcc</i> : Maak gebruik van gedistribueerd compileren met distcc</li>
<li><i>ccache</i> : Sla gecompileerde objectbestanden op zodat het hercompileren
van het pakket later minder tijd inneemt</li>
<li><i>buildpkg</i> : Maak binaire pakketten voor elke ebuild die je installeert</li>
<li><i>userpriv</i> : Compileer onder een andere gebruiker dan root</li>
<li><i>usersandbox</i> : Maak gebruik van sandbox wanneer <i>userpriv</i> 
gebruikt wordt</li>
<li><i>keeptemp</i> : Verwijder geen tijdelijke bestanden (${T}) na het 
installeren van een pakket</li>
</ul>
<p>
Enkele van deze features kunnen verder geconfigureerd worden door de volgende 
variabelen in te stellen:
</p>
<ul>
<li><i>CCACHE_SIZE</i> : Dit definieert hoeveel ruimte <c>ccache</c> kan
gebruiken. Default is dit 2 Gb</li>
<li><i>DISTCC_HOSTS</i> : Dit definieert welke hosts er deel uitmaken van het
gedistribueerde compilatiemodel dat <c>distcc</c> levert. Al deze hosts moeten
de <c>distccd</c> daemon draaien</li>
</ul>

</body>
</section>

<section>
<title>Portage SYNC instellingen</title>
<body>

<p>
Portage heeft de mogelijkheid om de Portage structuur te updaten via rsync.
Indien je een andere manier vindt om de Portage structuur te updaten kan je
deze definieren door de <i>SYNC</i> instelling in
<path>/etc/make.conf</path> aan te passen.
</p>

<p>
<b>RSYNC</b>
</p>

<p>
rsync is de meest gebruikte manier om je Portage structuur up to date te
houden. De rsync methode staat in <path>/etc/make.conf</path> gedefinieerd:
</p>

<pre caption="De SYNC variabele zetten">
SYNC="rsync://cvs.gentoo.org/gentoo-x86-portage"
</pre>

<note>
De rsync methode zal blindelings alle aanpassingen die je zelf gemaakt hebt
aan de structuur ongedaan maken. Indien je je eigen aanpassingen wil behouden,
gebruik dan de PORTDIR_OVERLAY=&quot;/een/dir/waar/jouw/structuur/staat&quot; 
om je aanpassingen te behouden.
</note>

<note>
Zie <path>/etc/make.conf</path> om te zien hoe je <i>SYNC</i> instelt
zodat deze tussen verschillende lokale rsync mirrors kiest. Hierdoor
zullen servers gekozen worden die dichter bij jou liggen en dus mogelijk
een hogere transfersnelheid hebben. Er wordt dan tevens voor gezorgd dat
de load van de servers eerlijk verdeeld wordt over een aantal servers.
</note>

<p>
<b>CVS voor ontwikkelaars</b>
</p>

<p>
Ontwikkelaars met volledige toegang tot de CVS structuur kunnen tevens
<i>emerge</i> sync instellen zodat zijn Portage structuur rechtstreeks uit
de CVS repository komt door RSH of SSH te gebruiken.
</p>

<p>
Log gewoon in op CVS met je account, checkout de structuur, verplaats deze
naar <path>/usr/portage</path> en gebruik de volgende <i>SYNC</i> optie:
</p>

<pre caption="CVS gebruiken om Portage bij te werken">
SYNC="cvs://youraccount@cvs.gentoo.org:/home/cvsroot"
</pre>

</body>
</section>

<section>
<title>Mirrors</title>
<body>

<p>
Het Gentoo Project houdt een lokale mirror van alle bestanden waarnaartoe
gerefereerd wordt in de ebuilds van de Portage structuur. Vaak worden deze
upstream broncodebestanden op trage servers opgeslagen die soms uitvallen.
Ook kunnen de ontwikkelaars van bepaalde programmas de oude broncode
verwijderen van hun eigen server wanneer ze een nieuwe versie hebben. Om
het leven voor Gentoo-gebruikers gemakkelijker te maken (en om het gebruik
van de officiele servers van die software te reduceren) mirroren we deze
bestanden. Dit laat toe om sneller en beter het downloaden van deze
bestanden in goede banen te leiden. Je kan tevens, om snelheidsredenen, een
mirror gebruiken die dicht in je buurt staat.
</p>

<p>
Wanneer je tracht een package te emergen zal Portage eerst de mirror
controleren of deze niet de nodige broncode heeft. Indien dat niet het
geval is zal Portage dat van de HTTP of FTP server downloaden die in de
ebuild gespecifieerd staat.
</p>

<p>
De mirror die Portage gebruikt kan gedefinieerd worden in
<i>GENTOO_MIRRORS</i> in <path>/etc/make.conf</path>. Het volgende is de
default instelling:
</p>

<pre>
GENTOO_MIRRORS="http://www.ibiblio.org/gentoo"
</pre>

<p>
Om een Gentoo mirror te vinden dichter bij huis, gelieve de Gentoo website
te controleren of op een lokale mailinglist eens te vragen. Je kan ook
<c>mirrorselect</c> installeren om automatisch de dichstbijzijnde mirror te 
vinden. Raadpleeg de installatie handleiding voor meer informatie over de
installatie en het gebruik van <c>mirrorselect</c>.
</p>

</body>
</section>

<section>
<title>Broncode downloaden</title>
<body>

<p>
Het programma dat Portage gebruikt om broncodebestanden te downloaden kan
gespecifieerd worden met <i>FETCHCOMMAND</i> en <i>RESUMECOMMAND</i>.
Verschillende voorbeelden worden getoond in <path>/etc/make.conf</path> en
<path>/etc/make.globals</path>. Portage maakt default gebruik van
<i>wget</i> wat voor de meeste gebruikers meer dan voldoende moet zijn.
</p>

<note>
Portage geeft de HTTP en FTP proxy instellingen door aan het programma door
gebruik te maken van de HTTP_PROXY en FTP_PROXY omgevingsvariabelen.
</note>

</body>
</section>

<section>
<title>Proxies</title>
<body>

<p>
Portage kan gevraagd worden om zowel HTTP als FTP proxies te gebruiken
wanneer er bestanden gedownload moeten worden. Deze proxies kunnen
ingesteld worden door <i>HTTP_PROXY</i> en <i>FTP_PROXY</i> in
<path>/etc/make.conf</path> of <path>/etc/make.globals</path> te plaatsen.
Indien zowel HTTP als FTP van dezelfde proxy voorzien moeten worden kan je
gewoon <i>PROXY</i> gebruiken.
</p>

<p>
Het volgende geldt als voorbeeld:
</p>

<pre caption="Proxies instellen">
HTTP_PROXY="http://192.168.0.10:8080"
FTP_PROXY="http://192.168.0.11:8080"

<comment>of</comment>

PROXY="http://192.168.0.1:8080"
</pre>

<p>
Je kan tevens aan portage vragen dat hij HTTP proxies gebruikt voor RSYNC.
RSYNC proxy-instellingen kunnen gezet worden door de RSYNC_PROXY optie in
<path>/etc/make.conf</path> in te stellen, of door deze als een
omgevingsvariabele te declareren.
</p>

<p>
Het volgende is een voorbeeld:
</p>

<pre caption="Een RSYNC proxy installen">
RSYNC_PROXY="proxy.pandora.be:8080"
</pre>

<note>
Indien er een firewall zit tussen je pc en de buitenwereld en rsync kan de
HTTP proxie niet vinden, dan kan je je Portage structuur updaten met een
snapshot tarball. Zie onze <uri link="/doc/en/faq.xml#doc_chap3_sect10">FAQ</uri> voor meer informatie.
</note>

</body>
</section>

<section>
<title>Misc. Opties</title>
<body>

<p>
De volgende zaken zijn kleinere opties die handig kunnen zijn voor sommige
gebruikers:
</p>

<ul>
<li><i>NOCOLOR</i> : Schakel het gebruik van gekleurde uitvoer uit.</li>
<li><i>CLEAN_DELAY</i> : Het aantal seconden dat Portage moet wachten
alvorens het doorgaat met unmergen van de gespecifieerde package. Default
staat dit op 5. Wachten kan je uitschakelen door deze op &quot;0&quot; te
zetten.</li>
</ul>

</body>
</section>

</chapter>

<chapter>
<title>Package Management</title>

<section>
<title>Updating de Portage structuur (Portage Tree)</title>
<body>

<p>
De Portage structuur, gelocaliseerd in <path>/usr/portage</path>, bevat de
bibliotheek van compilatieinstructies voor alle packages (die we
<i>ebuilds</i> noemen). Deze structuur bevat tevens profielinformatie en het
package.mask bestand dat vitaal is voor het up to date houden van het
systeem. Het is belangrijk om deze structuur up to date te houden en in
sync met de officiele Portage structuur om de nieuwste versies van packages
en bugfixes te verkrijgen. Je kan de Portage structuur updaten met de
volgende commando's:
</p>

<pre caption = "Portage structuur updaten">
# <i>emerge sync</i>
</pre>

<p>
De methode die emerge gebruikt om de lokale Portage structuur up te daten
kan aangepast worden. Zie de <i>Portage SYNC instellingen</i> in <i>Portage
configureren</i> voor meer informatie.
</p>

</body>
</section>

<section>
<title>Merging Packages</title>
<body>

<p>
Het compileren en installeren van een package met Portage wordt
<i>merging</i> genoemd, of <i>emerging</i>. Portage compileert de packages
in een tijdelijke directorie en maakt dan een snapshot van die directorie,
die hij dan registreert en uiteindelijk op je systeem installeert.
</p>

<p>
Het <i>emerge</i> commando werkt als een front-end voor Portage's systeem.
De installatie en verwijdering van packages wordt met dit commando gedaan
samen met zijn verschillende argumenten.
</p>

<p>
Om de recentste, niet-gemaskeerde versie van een package te installeren
moet je enkel de naam van die package meegeven:
</p>

<pre caption="Een pakket installeren">
# <i>emerge galeon</i>
</pre>

<p>
Bovenstaand commando zal de nodige afhankelijkheden downloaden, compileren en
installeren (gebruik makende van de USE-instellingen bij het berekenen van de 
afhankelijkheden) en zal dan de recentste niet-gemaskeerde versie van galeon 
compileren en installeren.
Er kan tevens naar Galeon verwezen worden door zijn volledige naam met
categorie mee te geven: <i>net-www/galeon</i>.
</p>

<p>
Het <i>emerge</i> commando aanvaart tevens referenties naar
ebuild-bestanden. Zo kan een gebruiker oudere versies van een gegeven
package of ebuilds van derden installeren. Het volgende is een voorbeeld:
</p>

<pre caption="Een speciefieke ebuild installeren">
# <i>emerge /usr/portage/net-www/galeon/galeon-1.2.0-r3.ebuild</i>
</pre>

<p>
Behalve het specifieren van de packagenaam of ebuildbestandsnaam om te
mergen, kan <i>emerge</i> ook andere commandoregelargumenten aannemen. Een
van deze argumenten is <i>--pretend</i>. Deze zal nl geen echte acties
ondernemen, maar tonen wat hij zou installeren of updaten bij het gegeven
commando. Het volgende is een voorbeeld van wat er zou ge-emerged worden
gedurende de installatie van de laatste versie van kdevelop:
</p>

<pre caption="Controleren wat emerge gaat doen">
# <i>emerge --pretend kdevelop</i>

These are the packages that I would merge, in order.

Calculating dependencies ...done!
[ebuild  N   ] kde-base/kdelibs-2.2.2-r4 to /
[ebuild  N   ] dev-util/kdbg-1.2.2 to /
[ebuild   U  ] app-text/psutils-1.17 to /
[ebuild   U  ] app-text/a2ps-4.13b-r3 to /
[ebuild   U  ] app-text/jadetex-2.20 to /
[ebuild  N   ] app-text/sgmltools-lite-3.0.3-r2 to /
[ebuild  N   ] kde-base/kdoc-2.2.2-r1 to /
[ebuild  N   ] net-www/htdig-3.1.5-r2 to /
[ebuild  N   ] app-text/enscript-1.6.3-r1 to /
[ebuild  N   ] kde-base/kdebase-2.2.2-r2 to /
[ebuild  N   ] app-doc/qt-docs-2.3.1 to /
[ebuild  N   ] dev-util/kdevelop-2.0.2 to /
</pre>

<p>
In de bovenstaande lijst zijn de packages die met een <i>N</i> aangeduid
staan packages die nog niet geinstalleerd zijn en die geinstalleerd zullen
worden als je de <i>--pretend</i> weglaat. Packages die met een <i>U</i>
aangeduid staat indiceren dat een oudere versie van de package al
geinstalleerd was en dat deze actie de package zal upgraden.
</p>

<p>
Andere beschikbare argumenten zijn:
</p>

<p>
<i>--fetchonly</i> : Download de nodige broncodebestanden die nodig zijn voor 
het compileren van de package, maar doe niets anders.
</p>

<p>
<i>--emptytree</i> : Deze optie laat Portage denken dat geen enkele package
waarop deze package afhankelijk is geinstalleerd staat. Dit is handig met
<i>--pretend</i> omdat je zo ziet welke packages er allemaal nodig zijn om
de gegeven package te kunnen installeren. Alle afhankelijkheden behalve
glibc worden getoond.
</p>

<p>
<i>--nodeps</i> : Portage zal proberen om enkel de gespecifieerde
package te mergen en de afhankelijkheden te negeren. Indien je deze
afhankelijkheden dus niet staan hebt zal de compilatie waarschijnlijk
mislukken.
</p>

<p>
<i>--onlydeps</i> : Alleen de afhankelijkheden van een package zullen
ge-emerged worden. Het gespecifieerde package zal <e>niet</e> ge-emerged
worden.
</p>

<p>
<i>--noreplace</i> : Indien de package al geinstalleerd is dan moet deze
niet opnieuw ge-emerged worden (default zal dat wel gebeuren).
</p>

<p>
<i>--usepkg</i> : Inplaats van de gespecifieerde package te compileren
zal Portage proberen om een voorgecompileerde .tbz2 package van een
gespecifieerde locatie te installeren. Deze locatie wordt ingesteld met de
<i>PKGDIR</i> variabele.
</p>

<p>
<i>--debug</i> : De ebuild omgeving wordt ingesteld om veeeeeeel uitvoer
te geven. Dit is handig voor ontwikkelaars om fouten uit ebuilds te kunnen
halen.
</p>

<p>
<i>--autoclean</i> : Forceert <i>emerge</i> om de package-specifieke
tijdelijke bestanden te verwijderen alvorens de package te compileren.
Portage doet dit per default dus deze optie is enkel handig voor de mensen
die dit default gedrag aangepast hebben.
</p>

<p>
<i>--verbose</i> : Zegt aan <i>emerge</i> om veel uitvoer te geven. Dit
zal GNU info fouten weergeven, maar deze kunnen veilig genegeerd worden.
Dit is niet hetzelfde als <i>--debug</i>, aangezien <i>--debug</i> vooral
op het ebuild-proces (compilatie en configuratie) gericht is, terwijl
<i>--verbose</i> algemener voor emerge is.
</p>

</body>
</section>

<section>
<title>Unmerging van packages</title>
<body>

<p>
Het doel van &quot;unmergen&quot; is het verwijderen van de bestanden die
geassocieerd zijn aan een geinstalleerde package. De software van deze
package wordt verwijderd en kan niet meer gebruikt worden tenzij deze
opnieuw ge-emerged wordt.
</p>

<p>
Packages kunnen verwijderd worden door <i>emerge</i> uit te voeren met de
<i>unmerge</i> optie gevolgd door de naam van de package die verwijderd
dient te worden. Het volgende voorbeeld zal alle versies van het
<i>ltrace</i> package die op je systeem staan verwijderen:
</p>

<pre caption="Een pakket unmergen">
# <i>emerge unmerge ltrace</i>
<comment>
of
</comment>
# <i>emerge unmerge dev-util/ltrace</i>
</pre>

<p>
Portage laat tevens toe dat specifieke versies van een package geunmerged
worden. Je kan versies of gebieden van versies definieren met <i>=</i>
(exacte versie), <i>&lt;</i> (kleinere versie dan), <i>&gt;</i> (grotere
versie dan), of combinaties van beide (<i>&lt;=</i> of <i>&gt;=</i>). Het
volgende commando zal alle versies van ltrace gelijk aan of ouder dan
0.3.15 desinstalleren:
</p>

<pre caption="Een speciefieke versie van een pakket unmergen">
# <i>emerge unmerge \&lt;=dev-utils/ltrace-0.3.15</i>
</pre>

<p>
Wanneer je een package versiegebied specifieert is het belangrijk om de
<i>&gt;</i> en <i>&lt;</i> karakters te escapen (door ofwel een
&quot;\&quot; voor te plaatsen, ofwel tussen &quot;'jes te plaatsen)
aangezien anders de shell die karakters zelf zal interpreteren. Voor meer
voorbeelden over hoe je versiegebieden specifieert gelieve de uitvoer van
<i>emerge --help</i> te lezen.
</p>

<warn>
Unmergen van packages kan gevaarlijk zijn. Vooral indien je packages
verwijdert die vervat zitten in het basissysteem van Gentoo aangezien dan
je systeem kan stoppen met werken. Ook het verwijderen van belangrijke
bibliotheekbestanden is gevaarlijk aangezien dat ervoor kan zorgen dat
bestaande software niet meer werkt. Portage herinnert je er <e>niet</e> aan
indien je dergelijke belangrijke packages of afhankelijkheden
van nog geinstalleerde packages verwijdert.
</warn>

<p>
Indien de package(s) die je wil verwijderen inderdaad geinstalleerd zijn,
zal emerge tonen welke package(s) en versies van die packages verwijderd
zullen worden. Je krijgt dan een aantal seconden (default 5) de tijd om dit
verwijderen te onderbreken door op <i>Ctrl+c</i> te drukken.
</p>

<p>
Eenmaal het unmerge proces begonnen is zal je een grote lijst van
bestandsnamen zien voorblijflitsen die tot de package behoren. Sommige van
die bestandsnamen zullen een vlag links van hun naam staan hebben. De
vlaggen <i>!mtime</i>, <i>!empty</i> en <i>cfgpro</i> specifieren redenen
waarom die bestanden niet verwijderd worden van het systeem ook al wordt de
package verwijderd. Indien geeneen van die vlaggen naast een bestandsnaam
staat wordt het bestand wel verwijderd.
</p>

<p>
De <i>!mtime</i> vlag wil zeggen dat het bestand aangepast is geweest nadat
dit bestand door de package geinstalleerd werd. Dat wil dus zeggen dat
ofwel iemand dit bestand heeft aangepast, of dat er een ander programma een
andere versie (nieuwer meestal) geinstalleerd heeft van dat bestand (en dus
dat bestand overschreven heeft). Dit laat toe voor packages om nieuwere
versies te installeren zonder bang te zijn dat het unmergen van de oudere
versie een vitaal belangrijk bestand zou verwijderen.
</p>

<p>
De <i>!empty</i> vlag wil zeggen dat Portage een bepaalde directorie niet
verwijdert aangezien deze niet leeg is (meerdere packages kunnen immers
zeggen dat een directorie van hun is). Configuratiebestandsbeveiliging
treed in werking als je de <i>cfgpro</i> vlag ziet passeren. Dat wil zeggen
dat een ander programma dit bestand ook als configuratiebestand heeft.
Uiteraard zal Portage dan dat bestand niet verwijderen.
</p>

<warn>
Bestanden behoren toe aan de package die het laatst geinstalleerd is. Dit
is dus afhankelijk van de volgorde dat je de packages installeert en niet
afhankelijk van de versienummers van de packages. Het verwijderen van de
nieuwste installatie van een package die een bepaald bestand als het zijne
ziet zal ervoor zorgen dat dat bestand verwijderd wordt, ook al zijn er
vroeger geinstalleerde packages die dat bestand leveren (uiteraard in de
veronderstelling dat het bestand ondertussen niet verandert is door de
gebruiker).
</warn>

</body>
</section>

<section>
<title>Systeem Updaten</title>
<body>

<p>
Portage ondersteunt de mogelijkheid om geinstalleerde packages te upgraden
met een simpel commando. De <i>system</i> updatefeature laat gebruikers toe
om het hart van hun systeem up te daten naar versies die door de Gentoo
systeemontwikkelaars goedgekeurd zijn en als belangrijk beschouwd worden
voor het verder correct functioneren van eender welk Gentoo Linux systeem.
Een <i>system</i> update zal niet de niet-essentiele packages updaten,
alleen deze die door het Portage profiel als essentieel aanzien worden.
</p>

<p>
Een systeemupdate voer je uit met het volgende commando:
</p>

<pre caption="Je systeem updaten"> 
# <i>emerge --update system</i>
</pre>

<p>
Portage zal dan de updates compileren en installeren afhankelijk van welke
versies van packages je geinstalleerd staan hebt en de aangeraden packages
door het huidige Portage profiel. Gebruikers kunnen de <i>--pretend</i>
optie meegeven om een lijst te zien van wat er zou gebeuren.
</p>

<note>
Je zal zien dat een van de installatieinstructies van Gentoo Linux het
commando <i>emerge system</i> is dat het hart van je systeem installeert.
<i>emerge --update system</i> zal dus die packages updaten naar de laatste
aangeraden versie.
</note>

</body>
</section>

<section>
<title>Alles (world) Updaten</title>
<body>

<p>
Portage laat tevens toe dat alle niet-essentiele packages met een eenvoudig
commando geupdate worden. Het Portage systeem heeft een zekere
intelligentie in zich zitten dat het toelaat om veilig bepaalde packages te
installeren waar dat meerdere versies of conflicterende packages bestaan.
</p>

<p>
Portage's <i>world</i> update mogelijkheid controleert het systeemprofiel,
de lijst van gemaskeerde packages (<path>package.mask</path>), het
wereldprofiel en de afhankelijkheden (inclusief versies) van de packages
die in het wereldprofiel gedefinieerd staan. Aan de hand van die informatie
zal Portage beslissen welke packages er geupdate moeten worden. Een package
wordt enkel geupdate indien een nieuwe versie bestaat (of de huidige versie
ineens gemaskeerd is, in welk geval hij een oudere versie zal installeren)
en de package voorkomt in het wereldprofiel of als afhankelijkheid van een
dergelijke package gekend is. Daarbij mag een bepaalde versie of
versierange niet geblokkeerd zijn in het systeemprofiel of in
<path>package.mask</path>.
</p>

<p>
Portage zal proberen om alle packages in het wereldprofiel te updaten naar
de nieuwste niet-gemaskeerde versie. Portage zal tevens aan de 
afhankelijkheden van die package proberen te voldoen en de recentst
mogelijke versie van die afhankelijkheid installeren (tenzij een versie of
versierange opgegeven is), waarbij hij ook hier kijkt naar of de package en
versie niet gemaskeerd is. Het zal tevens rekening houden met <i>SLOTS</i>
zoals voordien uitgelegd is geweest.
</p>

<p>
Gebruikers die gewend zijn aan andere distributies en packaging methoden
naast Portage zullen misschien verward kijken over waarom Portage niet
gewoonweg een &quot;blinde&quot; upgrade doet gebaseerd op de versienummers
(zoals het deed bij Gentoo pre-1.0). Veel packages in Gentoo's Portage
structuur hebben nieuwere versies. Een oudere of nieuwere versie kan
incompatibel zijn met software die ervan afhangt. Het blind updaten van die
bibliotheken en software zonder de afhankelijkheden te controleren kan snel
leiden tot zware problemen. Om dit te vermijden zal Portage proberen om op
een veilige manier de correcte beslissingen te nemen gebaseerd op alle
voordien besproken informatie. Deze zit vervat in verschillende locaties,
zoals de <i>ebuilds</i> van een package, de profielen, de
configuratiebestanden (voor de variabelen <i>SLOTS</i>, <i>USE</i> e.d.),
de <path>package.mask</path> en dergelijke meer.
</p>

<p>
Het hart van Portage's <i>world update</i> is de world profiel. In
tegenstelling tot het systeemprofiel die door de ontwikkelaars gedefinieerd
wordt en nooit door de gebruiker aangeraakt (mag) worden, wordt de world
profiel automatisch aangemaakt en aangepast naargelang de acties die de
gebruiker met Portage onderneemt.
Het world profiel fungeert eerder als een &quot;Favorieten lijst&quot;.
Packages die manueel geinstalleerd worden door de gebruiker met
<i>emerge</i> worden in het <path>world</path> bestand gelocaliseerd in
<path>/var/cache/edb/world</path> opgeslagen. Portage veronderstelt immers
dat, aangezien je die package geinstalleerd hebt, je waarschijnlijk wel
geinteresseerd bent om die package uptodate te houden.
</p>

<p>
Het <path>world</path> bestand bevat een package per regel samen met zijn
categorie en kan er als volgt uitzien:
</p>

<pre caption="/var/cache/edb/world voorbeeld">
net-im/gaim
net-www/skipstone
net-www/galeon
app-editors/vim
app-text/ispell
net-mail/evolution
dev-util/ltrace
sys-fs/xfsprogs
=net-www/mozilla-0.9.8-r3
sys-apps/attr
sys-apps/dmapi
sys-kernel/linux-sources
sys-apps/acl
app-office/gnucash
app-cdr/xcdroast
</pre>

<p>
Bijna alle regels in dit voorbeeld werden automatisch toegevoegd door
Portage toen de gebruiker met <i>emerge</i> de applicaties installeerde.
Deze applicaties zullen geupgrade worden wanneer een nieuwe versie
beschikbaar is.
</p>

<note>
Om tijd te besparen en om er zeker van te zijn dat alle packages die je
wenst geupdate blijven kan je <path>world</path> manueel editeren en zelf
regels toevoegen. Gebruikers die van oudere versies van Portage upgraden
kunnen het nodig vinden om dit bestand aan te vullen. Recente installaties
van Gentoo en Portage zouden een al aardig volle world profiel moeten
hebben.
</note>

<p>
Een interessante toevoeging is de regel voor mozilla
(<i>=net-www/mozilla-0.9.8-r3</i>). Deze werd nl toegevoegd door de
gebruiker om een bepaalde versie &quot;vast te pinnen&quot;. Hierdoor zal
Portage bij een <i>emerge --update world</i> niet proberen om Mozilla te
upgraden, maar zal deze versie laten staan.
</p>

<p>
Een wereldupdate doe je met het volgende commando:
</p>

<pre caption="Alles updaten">
# <i>emerge --update world</i>
</pre>

<p>
Portage zal nu proberen om alle packages die in <i>world</i> voorkomen up
te daten, alsook de afhankelijkheden van die packages. Deze worden naar de
meest recente versie geupgrade of met de meest recente versie
geinstalleerd, uiteraard afhankelijk van hoe de afhankelijkheid in de
<i>ebuild</i> omschreven wordt (indien een specifieke versie vereist wordt
zal die specifieke versie gebruikt worden). Packages die niet in
<i>world</i> voorkomen en geen afhankelijkheden zijn van packages die in
<i>world</i> voorkomen worden niet geupdate.
</p>

<warn>
Portage zal geen bestanden overschrijven in directories die door de
Configuratiebestandsbeveiliging beveiligd zijn. Je zal de verschillen
tussen de oude en nieuwe configuratiebestanden manueel moeten doen. Indien
je je configuratiebestanden niet update kan het zijn (maar gelukkig slechts
in weinig gevallen) dat de tool die die configuratiebestand gebruikt niet
of slecht functioneert. Gelieve de <i>Configuratiebestandsbeveiliging</i>
in <i>Portage configureren</i>  of de uitvoer van het commando
<i>emerge --help config</i> te lezen voor meer informatie.
</warn> 

<p>
Om een lijst van de programmas te krijgen die geupdate zullen worden
tijdens een world-update, kan je het <i>--pretend</i> argument meegeven aan
emerge zoals al vroeger werd vermeld.
</p>

<note>
Een wereldupdate zal tevens een system-update vanzelf uitvoeren. Packages
die tot het <i>system</i>-profiel (het hart van je installatie) behoren
kunnen niet vastgepinned worden in je <path>world</path> bestand aangezien
Portage bij die packages voorrang geeft aan het updaten.
</note>

<p>
Een interessant effect van de wereldupdate is dat gebruikers alle
geinstalleerde packages kunnen hercompileren indien ze dat wensen.
Aangezien een wereldupdate alle packages wil upgraden zal het gebruik van
<i>--emptytree</i> ervoor zorgen dat alle packages (behalve glibc)
gehercompileerd zullen worden. Dit kan handig zijn voor gebruikers die hun
compileropties of USE-instellingen aangepast hebben en deze aanpassingen
voor hun ganse systeem wensen door te voeren, inclusief al gecompileerde
packages. 
</p>

<pre caption="Alle afhankelijkheden ook opnieuw compilen">
# <i>emerge --update world --emptytree</i>
</pre>

<p>
Je kan het <i>--pretend</i> argument gebruiken om een lijst van alle
packages te verkrijgen die gecompileerd zullen worden.
</p>

</body>
</section>

<section>
<title>Systeem kuisen</title>
<body>

<p>
Portage heeft de mogelijkheid om meerdere versies van eenzelfde programma
tegelijk geinstalleerd te staan hebben. Er zijn verschillende packages die
van deze functionaliteit gebruik maken (voor achterwaartse compatibiliteit
aangezien oudere applicaties incompatibel kunnen zijn met recentere
versies).
</p>

<p>
In de meeste gevallen zal een nieuwe versie echter de oudere overschrijven
en blijven er enkele niet-meer-gebruikte bestanden over. Na verloop van
tijd groeit deze rommel aan en kan veel ruimte innemen.
</p>

<p>
Om dit aan te vechten biedt Portage een gemakkelijke manier aan om deze
bestanden van het systeem te verwijderen. Deze functionaliteit zit bevat
onder emerge's <i>clean</i> optie en kan uitgevoerd worden door het
volgende commando:
</p>

<pre caption="Oudere versies van pakketten verwijderen">
# <i>emerge clean</i>
</pre>

<p>
<i>emerge</i> zal dan een lijst tonen van packageversies die verwijderd
kunnen worden en versies die blijven bestaan, en zal de gebruiker enkele
seconden de tijd geven om het verwijderen van de oudere versies te
onderbreken door op <i>Ctrl+c</i> te drukken. Daarna zullen de ondernomen
acties snel op het scherm getoond worden (bestandsnamen die verwijderd of
behouden worden weergeven).
</p>

<p>
Tenzij anders medegedeeld zal Portage automatisch de <i>clean</i>
mogelijkheid uitvoeren voor de packages van de <i>world</i> profiel (en dus
alle geinstalleerde packages). Je kan de packagelijst die door <i>clean</i>
onderzocht moet worden aanpassen door, behalve <i>world</i> of
<i>system</i>, gewoon een lijst packages of package-versiegebieden
meegeven zoals al eerder vermeld in deze handleiding.
</p>

<p>
Wanneer er overwegen wordt welke packageversies er verwijderd dienen te
worden zal Portage de verschillende profielen raadplegen, samen met de
noodzakelijke afhankelijkheden van andere packages en de package
SLOT-instellingen. In de veronderstelling dat de afhankelijkheden van alle
packages in orde zijn zal de clean-actie veilig de oudere versies
verwijderen en mogen er geen problemen optreden bij verder gebruik van je
systeem.
</p>

</body>
</section>

<section>
<title>Verplicht verwijderen van Packages</title>
<body>

<p>
Portage ondersteunt ook de zogenaamde <i>prune</i> actie. Deze actie is het
onveilige broertje van <i>clean</i>. Het zal alle versies behalve de
laatste versie van een package verwijderen. Het zal niet de controles
uitvoeren die door <i>clean</i> wel worden uitgevoerd waardoor het dus
essentiele afhankelijkheden van je systeem kan verwijderen. Gebruikers die
deze optie willen gebruiken kunnen gemakkelijk fouten verkrijgen in hun
systeem en het is dus niet aangeraden dit te gebruiken, behalve in
specifieke omstandigheden.
</p>

<p>
De <i>prune</i>-actie zal dezelfde mogelijke lijsten aanvaarden als de
<i>clean</i> actie en kan dus als volgt gebruikt worden:
</p>

<pre caption="Het system prunen">
# <i>emerge prune</i>
</pre>

</body>
</section>


<section>
<title>De Portage structuur doorzoeken</title>
<body>

<p>
De Portage structuur kan zeer groot worden. Het <i>emerge</i> commando laat
bepaalde zoekacties toe die door deze structuur zoeken naar een geleverde
string in de vorm van een reguliere expressie die tussen &quot;'s staat.
Reguliere expressies kunnen ingewikkelde zaken zijn dus raden we je aan om
een goed boek aangaande reguliere expressies te raadplegen bij problemen of
interesse.
</p>

<p>
De meest eenvoudige zoekacties gebeuren zonder werkelijke reguliere
expressies. Het volgende is een voorbeeld van een zoektoch naar packages
die ofwel &quot;gcc&quot; heten ofwel &quot;gcc&quot; in hun naam zitten
hebben:
</p>

<pre caption="Zoeken naar ene pakket">
# <i>emerge search gcc</i>
</pre>

<p>
Voor elke mogelijke match wordt de package, samen met zijn meest recente
versie, geinstalleerde versie, website en uitleg vervat in de <i>ebuild</i>
getoond.
</p>

</body>
</section>

<section>
<title>Help verkrijgen</title>
<body>

<p>
Meer informatie over de verschillende opties en acties van <i>emerge</i>
kunnen verkregen worden door het volgende commando uit te voeren:
</p>

<pre caption="Help verkrijgen">
# <i>emerge --help</i>
</pre>

</body>
</section>



<section>
<title>Interessante utilities</title>
<body>

<p>
Verschillende tools worden aan de Gentoo gebruikers, door de Gentoo
gebruikers, ter beschikking gesteld. Deze zijn beschikbaar in de
<i>app-admin/gentoolkit</i> ebuild in de Gentoo Portage structuur.
</p>

<ul>
<li><i>etc-update</i> : Shellscript dat gebruik maakt van vim om het mergen
van /etc configuratiebestanden te vereenvoudigen (kan gevaarlijk zijn 
indien je dit nonchalant gebruikt).</li>
<li><i>qpkg</i> : package database query tool</li>
<li><i>epm</i> : een andere package database query tool met RPM-achtige syntax</li>
<li><i>etcat</i> : laat de USE flaggen die een pakket gebruik zien, en omschrijf ze</li>
</ul>

</body>
</section>
</chapter>
<chapter>
<title>Wat zijn gemaskeerde packages?</title>
<section>
<body>

<p>
Veel mensen zijn soms verbaasd om te zien dat sommige packages niet geupgrade
worden met de nieuwere versies wanneer ze <c>emerge -u world</c> uitvoeren. Een
goed voorbeeld is xfree-4.3.0 op het moment van schrijven. Indien je <c>emerge
sync</c> uitvoert, gevolgd door <c>emerge -u world</c>, dan zal xfree niet
geupdate worden. Waarom niet?
</p>

<p>
De reden hiervan is dat bepaalde packages als &quot;masked&quot; ingeschreven
zijn. Dat wil zeggen dat de package niet automatisch geupgrade of geinstalleerd
zal worden tenzij je specifieke acties onderneemt om dit wel te doen. Voor een
uitleg over hoe je gemaskeerde packages installeert raden we je aan om de <uri
link="http://forums.gentoo.org/viewtopic.php?t=33534">Masked Packages FAQ</uri>
(Engels) te lezen in onze <uri link="http://forums.gentoo.org">Gentoo
Forums</uri>.
</p>

</body>

</section>

</chapter>

</guide>

