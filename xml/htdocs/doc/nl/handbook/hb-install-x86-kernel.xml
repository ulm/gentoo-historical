<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/nl/handbook/hb-install-x86-kernel.xml,v 1.3 2005/01/01 16:19:20 swift Exp $ -->

<sections>

<version>1.27</version>
<date>2004-12-22</date>

<section>
<title>Tijdzone</title>
<body>

<p>
<!--
You first need to select your timezone so that your system knows where it is
located. Look for your timezone in <path>/usr/share/zoneinfo</path>, then make a
symlink to <path>/etc/localtime</path> using <c>ln</c>:
-->
Je dient eerst je tijdzone in te stellen zodat je systeem weet waar het zich
bevindt. Zoek naar je tijdzone in <path>/usr/share/zoneinfo</path>, maak er dan
een symlink naar toe vanaf <path>/etc/localtime</path> met behulp van <c>ln</c>:
</p>

<pre caption="De tijdzone instellen">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Stel dat je Amsterdam wil)</comment>
# <i>ln -sf /usr/share/zoneinfo/Europe/Amsterdam /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>De sources installeren</title>
<subsection>
<title>Een kernel kiezen</title>
<body>

<p>
<!--
The core around which all distributions are built is the Linux kernel. It is the
layer between the user programs and your system hardware. Gentoo provides its
users several possible kernel sources. A full listing with description is
available at the <uri link="/doc/en/gentoo-kernel.xml">Gentoo Kernel
Guide</uri>. 
-->
De basis waarop alle distributies gebouwd zijn, is de Linux kernel. Het is de
laag tussen gebruikers programma's en je systeemapparatuur. Gentoo biedt zijn
gebruikers verschillende kernelsources. Een volledige lijst met beschrijvingen
is beschikbaar in de <uri link="/doc/en/gentoo-kernel.xml">Gentoo Kernel
Guide</uri> (EN).
</p>

<p>
<!--
For x86-based systems we have, amongst other kernels, <c>vanilla-sources</c>
(the default 2.4 kernel source as developed by the linux-kernel developers),
<c>gentoo-sources</c> (2.4 kernel source patched with performance-enhancing
features), <c>gentoo-dev-sources</c> (kernel v2.6 source patched with
performance-enhancing features), <c>development-sources</c> (vanilla 2.6 kernel
source), ...
-->
Voor x86-gebaseerde systemen hebben we, onder andere, <c>vanilla-sources</c>
(de standaard 2.4 kernelsource die wordt onwikkeld door de linux-kernel
onwikkelaars), <c>gentoo-sources</c> (de 2.4 kernelsource gepatched met
snelheidsverhogende extras), <c>gentoo-dev-sources</c> (de 2.6 kernelsource
met snelheidsverhogende extras), <c>development-sources</c> (de vanilla 2.6
kernelsource), ...
</p>

<p>
<!--
If you are performing a network-less install your kernel choices will be limited
to those provided on the CD. For the 2004.3 release those are:
-->
Als je een netwerkloze installatie uitvoert, zal je keuze beperkt zijn tot de op
de CD meegeleverde mogelijkheden. Voor de 2004.3 versie zijn dat:
</p>

<ul>
  <li>gentoo-sources</li>
  <li>vanilla-sources</li>
  <li>gentoo-dev-sources</li>
  <li>development-sources</li>
</ul>

<p>
<!--
Choose your kernel source and install it using <c>emerge</c>. 
-->
Kies je kernelsource en installeer het door middel van <c>emerge</c>.
</p>

<pre caption="Een kernel source installeren">
# <i>emerge gentoo-sources</i>
</pre>

<p>
<!--
When you take a look in <path>/usr/src</path> you should see a symlink called
<path>linux</path> pointing to your kernel source. We will assume the kernel
source installed is <c>gentoo-sources-2.4.26-r9</c>:
-->
Als je een kijkje neemt in <path>/usr/src</path> zou je een symlink genaamd
<path>linux</path> moeten zien. Deze verwijst naar jouw kernelsource. We zullen
aannemen dat de geÃ¯nstalleerde kernelsource <c>gentoo-sources-2.4.26-r9</c> is:
</p>

<pre caption="De kernel source symlink bekijken">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.4.26-gentoo-r9
</pre>

<p>
<!--
If the symlink doesn't point to the kernel source of your choice (note that
<c>linux-2.4.26-gentoo-r9</c> is merely an example) you should change it to the
right kernel:
-->
Als jouw symlink niet naar de juiste kernelsource verwijst (let er op dat
<c>linux-2.4.26-gentoo-r9</c> slechts een voorbeeld is), verander deze dan
voordat je verder gaat:
</p>

<pre caption="De kernel source symlink goed zetten">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.4.26-gentoo-r9 linux</i>
</pre>

<p>
<!--
Now it is time to configure and compile your kernel source. You 
can use <c>genkernel</c> for this, which will build a generic kernel as used 
by the LiveCD. We explain the "manual" configuration first though, as it is 
the best way to optimize your environment.
-->
Nu is het tijd om je kernel te configureren en te compileren. Je kunt
<c>genkernel</c> hiervoor gebruiken. Deze zal een algemene kernel maken zoals
ook op de LiveCD wordt gebruikt. We zullen eerst de "handmatige" manier
uitleggen omdat dit de beste manier is om je systeem te optimaliseren.
</p>

<p>
<!--
If you want to manually configure your kernel, continue now with <uri
link="#manual">Default: Manual Configuration</uri>. If you want to use 
<c>genkernel</c> you should read <uri link="#genkernel">Alternative: Using 
genkernel</uri> instead.
-->
Als je je kernel handmatig wilt configureren, ga verder met <uri
link="manual">Standaard: handmatige configuratie</uri>. Als je <c>genkernel</c>
wilt gebruiken, dan kun je het beste <uri link="#genkernel">Alternatief:
genkernel gebruiken</uri>
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Standaard: handmatige configuratie</title>
<subsection>
<title>Introductie</title>
<body>

<p>
<!--
Manually configuring a kernel is often seen as the most difficult procedure a
Linux user ever has to perform. Nothing is less true -\- after configuring a
couple of kernels you don't even remember that it was difficult ;)
-->
Handmatig een kernel configureren wordt vaak gezien als het moeilijkste wat
een Linux gebruiker ooit uit moet voeren. Niets is minder waar -- na een paar
kernels configureren herinner je niet eens meer dat het moeilijk was ;)
</p>

<p>
<!--
However, one thing <e>is</e> true: you must know your system when you start
configuring a kernel manually. Most information can be gathered by viewing the
contents of <path>/proc/pci</path> (or by using <c>lspci</c> if available). You
can also run <c>lsmod</c> to see what kernel modules the LiveCD uses (it might
provide you with a nice hint on what to enable).
-->
Hoewel, een ding <e>is</e> is waar: je moet je systeem kennen voordat je je
kernel handmatig gaat configureren. De meeste informatie kun je vergaren via
de inhoud van <path>/proc/pci</path> (of door het gebruik van <c>lspci</c>,
indien beschikbaar). Je kunt ook <c>lsmod</c> draaien om te zien welke
kernelmodules de LiveCD gebruikt (het geeft een goede hint wat je aan moet
zetten).
</p>

<p>
<!--
Now go to your kernel source directory and execute <c>make menuconfig</c>. This
will fire up an ncurses-based configuration menu.
-->
Ga nu naar je kernelsourcemap en voer <c>make menuconfig</c> uit. Dit zal een
configuratiemenu openen wat op ncurses is gebaseerd.
</p>

<pre caption="menuconfig starten">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
<!--
You will be greeted with several configuration sections. We'll first list some
options you must activate (otherwise Gentoo will not function, or not function
properly without additional tweaks).
-->
Je zult worden begroet door een serie configuratiesecties. We zullen eerst
enkele opties geven die je zeker aan moet zetten (anders zal Gentoo niet
functioneren, of niet goed zonder enkele extra trucs).
</p>

</body>
</subsection>
<subsection>
<title>Vereiste opties aan zetten</title>
<body>

<p>
<!--
First of all, activate the use of development and experimental code/drivers.
You need this, otherwise some very important code/drivers won't show up:
-->
Om te beginnen activeer je het gebruik van ontwikkel- en experimentele
code/drivers. Je hebt dit nodig, anders zullen zeer belangrijke code/drivers
niet te voorschijn komen:
</p>

<pre caption="Experimentele code/drivers activeren">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
<!--
Make sure that you compile your kernel with the correct processor family:
-->
Zorg dat je je kernel compileert voor de juiste processorfamilie:
</p>

<pre caption="De correcte processor familie kiezen">
Processor type and features ---&gt;
  <comment>(Wijzig aan de hand van je systeem)</comment>
  (<i>Athlon/Duron/K7</i>) Processor family
</pre>

<p>
<!--
Now go to <c>File Systems</c> and select support for the filesystems you use.
<e>Don't</e> compile them as modules, otherwise your Gentoo system will not be
able to mount your partitions. Also select <c>Virtual memory</c>, <c>/proc
file system</c>, <c>/dev file system</c> + <c>Automatically mount at boot</c>:
-->
Ga nu naar <c>File Systems</c> en kies ondersteuning voor het bestandssysteem
dat je gebruikt. Compileer deze <e>niet</e> als modules, anders zal je Gentoo
systeem zal je rootpartitie niet kunnen mounten. Kies ook <c>Virtual memory</c>,
<c>/proc file system</c>, <c>/dev file system</c> + <c>Automatically mount
at boot</c>:
</p>

<pre caption="benodigde file systems kiezen">
<comment>(Met een 2.4.x kernel)</comment>
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot
  [ ] /dev/pts file system for Unix98 PTYs

<comment>(Met een 2.6.x kernel)</comment>
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] /dev file system support (OBSOLETE)
    [*]   Automatically mount at boot
    [*] Virtual memory file system support (former shm fs)

<comment>(Kies een of meer van de volgende, voor jouw systeem benodigde, opties )</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
<!--
If your BIOS can't handle large harddrives and you jumpered the harddrive to
report a limited size you have to enable the following option to gain access
to your whole harddrive:
-->
Als je BIOS geen grote harde schijven ondersteunt en je hebt je harde schijf
met jumpertjes ingesteld om een beperkte grootte door te geven, dan dien je
een van de volgende opties mee te geven om toegang tot je hele harde schijf
te krijgen.
</p>

<pre caption="Autogeometry resizing support aan zetten">
<comment>(alleen 2.4.x kernels)</comment>
ATA/IDE/MFM/RLL support ---&gt;
  IDE, ATA and ATAPI Block devices ---&gt;
    &lt;*&gt;   Include IDE/ATA-2 DISK support
    [ ]     Use multi-mode by default
    [*]     Auto-Geometry Resizing support
</pre>

<p>
<!--
If you are using PPPoE to connect to the Internet or you are using a dial-up
modem, you will need the following options in the kernel:
-->
Indien je PPPoE gebruikt om verbinding te maken met het internet of als je een
inbelmodem gebruikt, dien je de volgende opties aan te zetten in de kernel:
</p>

<pre caption="Benodigde PPPoE drivers selecteren">
<comment>(Met een 2.4.x kernel)</comment>
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports

<comment>(Met een 2.6.x kernel)</comment>
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
<!--
The two compression options won't harm but are not definitely needed, neither
does the <c>PPP over Ethernet</c> option, that might only be used by 
<c>rp-pppoe</c> when configured to do kernel mode PPPoE.
-->
De twee compressie-opties zullen niets kapot maken, maar ze zijn niet nodig,
net zoals de optie <c>PPP over Ethernet</c> die alleen wordt gebruikt door
<c>rp-pppoe</c> als die wordt geconfigureerd om PPPoE in kernelmodus te doen.
</p>

<p>
<!--
If you require it, don't forget to include support in the kernel for your
ethernet card.
-->
Als je het nodig hebt, vergeet dan niet ondersteuning voor je netwerkkaart toe
te voegen aan je kernel.
</p>

<p>
<!--
If you have an Intel CPU that supports HyperThreading (tm), or you have a
multi-CPU system, you should activate "Symmetric multi-processing support":
-->
Als je een Intel CPU met HyperThreading (tm) ondersteuning hebt, of een
multi-CPU systeem, dien je ook "Symmetric multi-processing support" toe te
voegen:
</p>

<pre caption="SMP ondersteuning inschakelen">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
<!--
If you use USB Input Devices (like Keyboard or Mouse) don't forget to enable
those as well:
-->
Als je USB-invoerapparaten gebruikt (zoals toetsenbord of muis),
vergeet dan niet die ook aan te zetten:
</p>

<pre caption="USB ondersteuning voor Input Devices">
USB Support ---&gt;
  &lt;*&gt;   USB Human Interface Device (full HID) support
</pre>

<p>
<!--
Laptop-users who want PCMCIA support should <e>not</e> use the PCMCIA drivers if
they choose to use a 2.4 kernel. More recent drivers are available through the
<c>pcmcia-cs</c> package which will be installed later on. 2.6-kernel users
however should use the PCMCIA drivers from the kernel.
-->
Laptopgebruikers die PCMCIA-ondersteuning willen moeten <e>niet</e> de
PCMCIA-drivers niet gebruiken als zij een 2.4-kernel kiezen. Recentere drivers
zijn beschikbaar via het <c>pcmcia-cs</c> pakket welke we later zullen
installeren. 2.6-kernelgebruikers dienen echter wel de PCMCIA-drivers uit de
kernel te gebruiken.
</p>

<p>
<!--
When you've finished configuring the kernel, continue with <uri 
link="#compiling">Compiling and Installing</uri>.
-->
Als je klaar bent met het configureren van de kernel, ga je verder met <uri 
link="#compiling">Compileren en installeren</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Compileren en installeren</title>
<body>

<p>
<!--
Now that your kernel is configured, it is time to compile and install it. Exit 
the configuration and run <c>make dep &amp;&amp; make bzImage modules 
modules_install</c>:
-->
Nu de kernel is geconfigureerd is het tijd om te compileren en installeren.
Sluit de configuratie af en start <c>make dep &amp;&amp; make bzImage modules
modules_install</c>:
</p>

<pre caption="De kernel compileren">
<comment>(Voor 2.4 kernels)</comment>
# <i>make dep &amp;&amp; make bzImage modules modules_install</i>

<comment>(Voor 2.6 kernels)</comment>
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
<!--
When the kernel has finished compiling, copy the kernel image to
<path>/boot</path>. From here onwards we assume that the kernel you are
installing is the 2.4.26 version of the <c>gentoo-sources</c>. Use whatever name
you feel is appropriate for your choice and remember it as you will need it
later on when you configure your bootloader.
-->
Als je kernel klaar is met compileren, kopieer je de kernel-image naar
<path>/boot</path>. Vanaf hier nemen we aan dat je versie 2.4.26 van de
<c>gentoo-sources</c> installeert. Gebruik een naam die jij toepasselijk vindt
voor jouw keuze en onthoud hem want je zult hem bij het configureren van je
bootloader nodig hebben.
</p>

<pre caption="De kernel installeren">
# <i>cp arch/i386/boot/bzImage /boot/kernel-2.4.26-gentoo-r9</i>
# <i>cp System.map /boot/System.map-2.4.26-gentoo-r9</i>
</pre>

<p>
<!--
It is also wise to copy over your kernel configuration file to
<path>/boot</path>, just in case :)
-->
Het is ook slim om je kernelconfiguratiebestand naar <path>/boot</path> te
kopiÃ«ren, je weet maar nooit :)
</p>

<pre caption="Je kernel configuratie backuppen">
# <i>cp .config /boot/config-2.4.26-gentoo-r9</i>
</pre>

<p>
<!--
Now continue with <uri link="#kernel_modules">Installing Separate Kernel
Modules</uri>.
-->
Ga nu verder met <uri link="#kernel_modules">Losse kernel modules
installeren</uri>
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternatief: genkernel gebruiken</title>
<body>

<p>
<!--
If you are reading this section, you have chosen to use our <c>genkernel</c>
script to configure your kernel for you.
-->
Als je dit hoofdstuk leest, heb je ervoor gekozen om ons <c>genkernel</c> script
te geruiken voor de configuratie van jouw kernel.
</p>

<p>
<!--
Now that your kernel source tree is installed, it's now time to compile your 
kernel by using our <c>genkernel</c> script to automatically build a kernel for 
you. <c>genkernel</c> works by configuring a kernel nearly identically to the 
way our LiveCD kernel is configured. This means that when you use 
<c>genkernel</c> to build your kernel, your system will generally detect all 
your hardware at boot-time, just like our Live CD does. Because genkernel 
doesn't require any manual kernel configuration, it is an ideal solution for 
those users who may not be comfortable compiling their own kernels.
-->
Nu je kernelsource is geÃ¯nstalleerd, is het tijd om je kernel te
compileren met behulp van ons <c>genkernel</c> script. Deze bouwt automatisch
een kernel voor jou. <c>genkernel</c> werkt door een kernel bijna identiek te
configureren aan de manier waarop onze LiveCD kernel is geconfigureerd.
Dit betekent dat wanneer je <c>genkernel</c> gebruikt om je kernel te bouwen,
je systeem over het algemeen alle apparatuur tijdens het opstarten zal
detecteren, net zoals onze LiveCD dat doet. Omdat genkernel geen handmatige
configuratie vereist, is het de ideale oplossing voor die gebruikers die zich
niet prettig voelen bij het compileren van hun eigen kernels.
</p>

<p>
<!--
Now, let's see how to use genkernel. First, emerge the genkernel ebuild:
-->
Laten we nu eens kijken hoe we genkernel gebruiken. Emerge genkernel eerst:
</p>

<pre caption="Genkernel emergen">
# <i>emerge genkernel</i>
</pre>

<p>
<!--
Now, compile your kernel sources by running <c>genkernel all</c>.
Be aware though, as <c>genkernel</c> compiles a kernel that supports almost all 
hardware, this compilation will take quite a while to finish!
-->
Compileer nu je kernelsource door <c> genkernel all</c> te draaien.
Pas echter op, omdat <c>genkernel</c> een kernel compileert die bijna alle
apparatuur ondersteunt, kan deze compilatie aardig wat tijd in beslag nemen!
</p>

<p>
<!--
Note that, if your boot partition doesn't use ext2 or ext3 as filesystem you
might need to manually configure your kernel using <c>genkernel -\-menuconfig 
all</c> and add support for your filesystem <e>in</e> the kernel (i.e. 
<e>not</e> as a module).
-->
Let op, als je bootpartitie geen ext2 of ext3 als bestandssysteem gebruikt,
moet je mogelijk handmatig deze ondersteuning <e>in</e> de kernel (dus
<e>niet</e> als een module) moet toevoegen. Gebruik hiervoor <c>genkernel
--menuconfig all</c>.
</p>

<pre caption="Genkernel draaien">
# <i>genkernel all</i>
</pre>

<p>
<!--
Once <c>genkernel</c> completes, a kernel, full set of modules and 
<e>initial root disk</e> (initrd) will be created. We will use the kernel 
and initrd when configuring a boot loader later in this document. Write
down the names of the kernel and initrd as you will need it when writing
the bootloader configuration file. The initrd will be started immediately after 
booting to perform hardware autodetection (just like on the Live CD) before 
your "real" system starts up.
-->
Als <c>genkernel</c> eenmaal klaar is, zal een kernel, een volledige set met
modules en een <e>start-rootschijf</e> (initrd) worden gemaakt. We gebruiken
de kernel en initrd wanneer we de bootloader zullen configureren, verderop
in dit document. Noteer de namen van de kernel en initrd omdat je deze nodig
zult hebben bij de bootloaderconfiguratie. De initrd zal direct worden gestart
na het opstarten om apparatuurdetectie uit te voeren (net zoals op de LiveCD)
voordat je "echte" systeem opstart.
</p>

<pre caption="De gecreerde kernel image naam en initrd controleren">
# <i>ls /boot/kernel* /boot/initrd*</i>
</pre>

<p>
<!--
Now, let's perform one more step to get our system to be more like the Live 
CD -\- let's emerge <c>coldplug</c>. While the initrd autodetects hardware that 
is needed to boot your system, <c>coldplug</c> autodetects everything else.
To emerge and enable <c>coldplug</c>, type the following:
-->
Laten we nu nog een stap uitvoeren zodat ons systeem nog meer op de LiveCD
lijkt -- laten we <c>coldplug</c> emergen. De initrd detecteert de apparatuur
die die nodig is om op te starten automatisch, <c>coldplug</c> detecteert de
rest. Om te <c>coldplug</c> te emergen en aan zetten, typ je het volgende:
</p>

<note>
<!--
If you are running a network-less installation, please use <c>hotplug</c>
instead of <c>coldplug</c>. Coldplug has been introduced after the 2004.3
release and the 2004.3 <c>hotplug</c> has the same functionality.
-->
Als je een netwerkloze installatie uitvoert, gebruik dan <c>hotplug</c> in
plaats van <c>coldplug</c>. Coldplug is geïntroduceerd na de 2004.3 versie en de
2004.3 <c>hotplug</c> biedt dezelfde functionaliteit.
</note>

<pre caption="Coldplug emergen en aan zetten">
# <i>emerge coldplug</i>
# <i>rc-update add coldplug default</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>Losse kernel modules installeren</title>
<subsection>
<title>Extra modules installeren</title>
<body>

<p>
<!--
If appropriate, you should emerge ebuilds for any additional hardware that is 
on your system. Here is a list of kernel-related ebuilds that you could emerge:
-->
Indien van toepassing, zou je enkele ebuilds kunnen emergen voor eventuele
extra appatuur die zich je systeem bevindt. Hier is een lijst van
kernel-gerelateerde ebuilds die je kunt emergen:
</p>

<table>
<tcolumn width="1in"/>
<tcolumn width="4in"/>
<tcolumn width="2in"/>
<tr>
  <th>Ebuild</th>
  <th>Doel</th>
  <th>Commando</th>
</tr>
<tr>
  <ti>nvidia-kernel</ti>
  <ti>NVIDIA drivers voor xorg-x11</ti>
  <ti><c>emerge nvidia-kernel</c></ti>
</tr>
<tr>
  <ti>nforce-audio</ti>
  <ti>On-board audio voor NVIDIA NForce(2) moederborden</ti>
  <ti><c>emerge nforce-audio</c></ti>
</tr>
<tr>
  <ti>e100</ti>
  <ti>Intel e100 Fast Ethernet Adapters</ti>
  <ti><c>emerge e100</c></ti>
</tr>
<tr>
  <ti>e1000</ti>
  <ti>Intel e1000 Gigabit Ethernet Adapters</ti>
  <ti><c>emerge e1000</c></ti>
</tr>
<tr>
  <ti>emu10k1</ti>
  <ti>
    Creative Sound Blaster Live!/Audigy ondersteuning (alleen voor 2.4 kernels)
  </ti>
  <ti><c>emerge emu10k1</c></ti>
</tr>
<tr>
  <ti>ati-drivers</ti>
  <ti>ATI Radeon 8500+/FireGL drivers voor xorg-x11</ti>
  <ti><c>emerge ati-drivers</c></ti>
</tr>
</table>

<p>
<!--
Beware though, some of these ebuilds might deal with big dependencies. To verify
what packages will be installed by emerging an ebuild, use <c>emerge 
-\-pretend</c>. For instance, for the <c>emu10k1</c> package:
-->
Pas echter op, sommige van deze ebuilds kunnen veel afhankelijkheden hebben. Om
te controleren welke pakketten zullen worden geÃ¯nstalleerd, gebruik je
<c>emerge --pretend</c>. Bijvoorbeeld voor het <c>emu10k1</c> pakket:
</p>

<pre caption="Volledige lijst van te installeren pakketten">
# <i>emerge --pretend emu10k1</i>
</pre>

<p>
<!--
If you don't like the packages it wants to install, use <c>emerge -\-pretend 
-\-verbose</c> to see what USE-flags are checked when deciding the dependencies:
-->
Als je al deze pakketten die geïnstalleerd zouden worden niet wilt, kun je
met <c>emerge --pretend --verbose</c> kijken wel USE-vlaggen worden gebruikt
bij het uitzoeken van de afhankelijkheden:
</p>

<pre caption="gebruik van USE-vlaggen bekijken">
# <i>emerge --pretend --verbose emu10k1</i>
<comment>...</comment>
[ebuild  N    ] media-sound/aumix-2.8  +gpm +nls +gtk +gnome +alsa -gtk2
</pre>

<p>
<!--
In the previous example you can see that one of <c>emu10k1</c>'s dependencies
(<c>aumix</c>) uses the <c>gtk</c> and <c>gnome</c> USE-flags, making gtk (which
depends on xorg-x11) be compiled with it.
-->
In het vorige voorbeeld kun je zien dat een van <c>emu10k1</c>'s
afhankelijkheden (<c>aumix</c>) gebruikt maakt van de <c>gtk</c> en <c>gnome</c>
USE-vlaggen. Dit zorgt ervoor dat gtk-ondersteuning (wat steunt op xorg-x11)
er bij in gecompileerd wordt.
</p>

<p>
<!--
If you don't want all this to be compiled, deselect all USE-flags, for instance:
-->
Als je niet wilt dat dit alles er in zit, deselecteer alle USE-vlaggen:
</p>

<pre caption="Emu10k1 emergen met alle USE-vlaggen gedeselecteerd">
# <i>USE="-gpm -nls -gtk -gnome -alsa" emerge --pretend emu10k1</i>
</pre>

<p>
<!--
When you're happy with the results, remove the <c>-\-pretend</c> to start
installing <c>emu10k1</c>.
-->
Als je tevreden bent met de resultaten, haal je de <c>--pretend</c> weg om
<c>emu10k1</c> te installeren.
</p>

</body>
</subsection>
<subsection>
<title>De modules configureren</title>
<body>

<p>
<!--
You should list the modules you want automatically loaded in 
<path>/etc/modules.autoload.d/kernel-2.4</path> (or <path>kernel-2.6</path>). 
You can add extra options to the modules too if you want.
-->
Je moet een lijstje maken van alle modules die je automatisch wilt laden, doe
dit in <path>/etc/modules.autoload.d/kernel-2.4</path> (of
<path>kernel-2.6</path>). Je kunt indien je dit wilt ook extra opties aan de
modules meegeven.
</p>

<p>
<!--
To view all available modules, run the following <c>find</c> command. Don't
forget to substitute "&lt;kernel version&gt;" with the version of the kernel you
just compiled:
-->
Om alle beschikbare modules te zien, draai je het volgende <c>find</c> commando.
Vergeet niet om "&lt;kernel version&gt;" te vervangen met de versie van de door
jou zojuist gecompileerde kernel.
</p>

<pre caption="Alle beschikbare modules vinden">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
<!--
For instance, to automatically load the <c>3c59x.o</c> module, edit the
<path>kernel-2.4</path> or <path>kernel-2.6</path> file and enter the module
name in it.
-->
Om bijvoorbeeld automatisch de <c>3x59x.o</c> module te laden, wijzig je het
<path>kernel-2.4</path>- of <path>kernel-2.6</path>-bestand en zet er de
modulenaam in.
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.4 bewerken">
<comment>(Voorbeeld voor 2.4 kernels)</comment>
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4 of kernel-2.6">
3c59x
</pre>

<p>
<!--
Now run <c>modules-update</c> to commit your changes to the
<path>/etc/modules.conf</path> file:
-->
Draai nu <c>modules-update</c> om je veranderingen door te voeren in het
<path>/etc/modules.conf</path> bestand:
</p>

<pre caption="Modules-update draaien">
# <i>modules-update</i>
</pre>

<p>
<!--
Continue the installation with <uri link="?part=1&amp;chap=8">Configuring 
your System</uri>.
-->
Ga verder met <uri link="?part=1&amp;chap=8">Configuratie van het Systeem</uri>.
</p>

</body>
</subsection>
</section>
</sections>
