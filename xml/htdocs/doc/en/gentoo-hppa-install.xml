<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/gentoo-hppa-install.xml,v 1.7 2004/02/03 12:33:43 swift Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/doc/en/gentoo-hppa-install.xml">
<title>Gentoo HPPA Installation Guide </title>
<author title="Gentoo HPPA developer">
<mail link="gmsoft@gentoo.org">Guy Martin</mail>
</author>

<abstract>Gentoo Linux is installable on an HP PA-RISC machine.  The port is
in early development, and notes about this document or the install in
general, should be addressed to <uri link="http://bugs.gentoo.org">Gentoo's
Bugzilla.</uri>
</abstract>
<version>0.2</version>
<date>February 3, 2004</date>

<license/>

<chapter>
<title>Supported hardware</title>
<section>
<title>Note about the current state of this port</title>
<body>
<p>
As of this writing, the SMP and 64-bit kernels are not well tested. Testing and 
feedback are very welcome.
</p>
<p>The supported hardware only depends on the kernel. You can find a list of 
supported platforms at the <uri link="http://pateam.esiee.fr/list.html">ESIEE 
web site</uri>.</p>
</body>
</section>
</chapter>

<chapter>
<title>Booting</title>
<body>
<note>The boot procedure is briefly described here. If you need more help or 
alternate ways to boot your HPPA (e.g. via serial line), please read the HOWTO 
at <uri>http://tldp.org/HOWTO/PA-RISC-Linux-Boot-HOWTO/index.html</uri>.</note>
<p>
During the boot process, you will see a message similar to the following :
</p>
<pre>
Searching for Potential Boot Devices.
To terminate search, press and hold the ESCAPE key.
</pre>
<p>
When this message appears, press and hold the Esc key until an option menu appears. This can take a while, be patient.
By default, you should enter the BOOT_ADMIN console.
<note>
On some 715s and 725s, an option menu may appear. You can enter the BOOT_ADMIN console by choosing <c>a)    Enter Boot Administration mode</c> and type <c>a&lt;enter&gt;</c>.
</note>
Once you have the '<c>&gt;</c>' prompt, you are in BOOT_ADMIN mode.
</p>

</body>
<section>
<title>Booting using LiveCD</title>
<body>
<p>If you do not know the SCSI ID of your CD-ROM drive, your PA-RISC
station will search for it when you issue the <c>search</c> command.</p>
<pre>
> <i>search</i>

Searching for Devices with Bootable Media.
To terminate search, please press and hold the ESCAPE key.
</pre>
<p>Your PA-RISC station will now display all the available boot media.  This is
an example result of this command :</p>
<pre>
Device Selection      Device Path             Device Type and Utilities
---------------------------------------------------------------------------

P0                    scsi.5.0                TOSHIBA CD-ROM XM-3301TA
                                                  IPL
P1                    scsi.2.0                COMPAQ ST32550N
                                                  IPL
P2                    lan.0010a7-06d1b6.3.6   server
                                                  IPL


&gt;
</pre>
<p>
Of course, this example will vary depending on your hardware configuration.
</p>
<p>
Now that you know which device you must boot, let us boot it.
</p>
<pre>
&gt; <i>boot scsi.5.0 ipl</i>

Trying scsi.5.0
</pre>
<p>
The <e>ipl</e> keywords (Initial Program Loader) tells <i>palo</i> (the
PA-RISC boot LOader) to enter interactive mode. This will allow you to change,
for example, the kernel boot parameters.
</p>
</body>
</section>
<section>
<title>Booting using lifimage (Net Boot)</title>
<body>
<p>
Lifimage is not available now. You can use Debian's lifimage to create a shell
but that lifimage does not ship with the bunzip2 utility, which means that
you will have to decompress the stages before using them. You will also have to 
put them on an FTP or HTTP server in order to fetch them with <i>wget</i> at
install time.
<warn>The kernel version of the lifimage must be greater than or equal to 2.4.20
otherwise your system <e>will not work at all</e>.</warn>
</p>
</body>
</section>
<section>
<title>After booting : Interacting with PALO, the PA-RISC Linux Loader</title>
<body>
<p>When the boot process is successful, <i>palo</i> will start in interactive mode.</p>
<pre>
Boot path initialized.
Attempting to load IPL.


Hard booted.
palo ipl 1.2 root@b180l.da-kot Tue Apr  8 12:43:07 CEST 2003

Boot image contains:
    0/vmlinux32 4028015 bytes @ 0x1520000
    0/ramdisk 834748 bytes @ 0xf800
Current command line:
0/vmlinux initrd=initrd.gz TERM=linux console=tty root=/dev/ram0 init=/linuxrc
  0: 0/vmlinux
  1: initrd=initrd.gz
  2: TERM=linux
  3: console=tty
  4: root=/dev/ram0
  5: init=/linuxrc

Edit which field?
(or 'b' to boot with this command line)? 0
</pre>
<p>
These parameters are suitable for most situations.
</p>
<p>
If you need extra features you must add apropriate kewords to the end of the 
command line. To add a keyword, edit the last field, add a space and type your
keyword. The only implemented keyword as of now is <c>cdcache</c> which tells 
the LiveCD to load itself into RAM, allowing you to unmount the CD.
</p>
<pre>
(or 'b' to boot with this command line)? <i>5</i>
init=/linuxrc <i>cdcache</i>
</pre>
<p>
Now that you tweaked your kernel boot params, boot it.
</p>
<pre>
(or 'b' to boot with this command line)? <i>b</i>
</pre>
</body>
</section>


</chapter>
<chapter>
<title>Installing Gentoo</title>
<section>
<body>
<p>A quick review of the installation process:  You will create partitions,
initialise them with filesystems, and then extract either a stage 1, a stage 2 or a stage 
3 tarball.  If you use a stage 1 or a stage 2 tarball, you will take the 
necessary steps to get your system to stage 3.  Once your system is at stage 3,
you can configure it (by tweaking configuration files, installing a
bootloader, etc). Once you reboot it you will have a fully-functional Gentoo
Linux system.  Depending on what stage of the build
process you are starting from, here is what is required for installation:</p>

<table>
<tr><th>stage tarball</th><th>requirements for installation</th></tr>
<tr><ti>1</ti><ti>partition/filesystem setup, emerge sync, bootstrap, emerge system, emerge linux sources, final configuration</ti></tr>
<tr><ti>2</ti><ti>partition/filesystem setup, emerge sync, emerge system, emerge linux sources, final configuration</ti></tr>
<tr><ti>3</ti><ti>partition/filesystem setup, emerge sync (optional), final configuration</ti></tr>
</table>
<p>The first step is to insert any needed modules. You may not need to do this
since most of the standard PA-RISC hardware drivers are built into the kernel.
To view a list of all available network card modules, type <c>ls
/lib/modules/*/kernel/drivers/net/*</c>.  To load a particular module,
type:</p>

<pre>
# <i>modprobe pcnet32</i>
	<comment>(replace pcnet32 with your NIC module)</comment>
</pre>

<p>Now, if you want to be able to access any SCSI hardware that was not detected
during the PCI auto-detection process, you will need to load the appropriate
modules from <path>/lib/modules</path>, again using <c>modprobe</c>:</p>

<pre>
# <i>modprobe aic7xxx</i>
# <i>modprobe sr_mod</i>
# <i>modprobe sd_mod</i>
</pre>

<p>The above example the <c>aic7xxx</c> SCSI driver is loaded, or
<i>modprobed</i>  and SCSI CD-ROM (<c>sr_mod</c>) and disk (<c>sd_mod</c>)
support are loaded.</p>

<note><c>hdparm</c> is included on the Gentoo ISO.
If any of your drives require tweaking, now
would be a good time to do so. On reasonably modern hardware
<c>hdparm -d 1 /dev/hdx</c> should be quite safe.  You can use
<c>hdparm -v /dev/hdx</c> to check your drive's settings,
and <c>hdparm -t /dev/hdx</c> to check your drive's performance.</note>
</body>
</section>

<section>
<title>Configure installation networking</title>
<body>

<p>The Gentoo installation lets you configure a working network, allowing you to use <c>ssh</c>, <c>scp</c> or <c>wget</c>
as needed before even beginning the installation process.  Even if you do not
need to do these things immediately, you should go ahead and set up networking now.  Once set up, Portage will be able to use your configured network
from inside the chroot environment (required for installing Gentoo Linux). </p>
</body>
</section>

<section>
<title>Manual DHCP configuration</title>
<body>
<p>
Network configuration is simple with DHCP. If your ISP does not use
DHCP, skip down to the static configuration section below.
</p>
<pre caption="Network configuration with DHCP">
# <i>dhcpcd eth0</i>
</pre>
<note>
Some ISPs require you to provide a hostname.  To do that,
add a <c>-h myhostname</c> flag to the dhcpcd command line above.
</note>
<p>If you receive <i>dhcpConfig</i> warnings, do not panic:  The errors
are most likely cosmetic.  Skip down to Network testing below.</p>
</body>
</section>
<section>
<title>Manual Static configuration</title>
<body>
<p>
You need to setup just enough networking (to enable you to download
sources for the system build) as well as the required localhost interface.  Type in the following commands, replacing
$IFACE with your network interface (typically <c>eth0</c>), $IPNUM
with your IP address, $BCAST with your broadcast address, and $NMASK
with your network mask.  For the <c>route</c> command, replace
$GTWAY with your default gateway.
</p>
<pre>
# <i>/sbin/ifconfig $IFACE $IPNUM broadcast $BCAST netmask $NMASK</i>
# <i>/sbin/route add -net default gw $GTWAY netmask 0.0.0.0 metric 1</i>
</pre>
<p>Now, it is time to create the <path>/etc/resolv.conf</path>
file so that name resolution (finding Web/FTP sites by name, rather than just by IP address) will work.</p>

<note>At the moment the only editor installed by default is <c>nano</c>, a
small and very easy-to-use visual editor.   Use <c>nano</c> with the <c>-w</c>
option to turn off automatic line-wrapping.
</note>

<p>Here is a template to follow for creating your <path>/etc/resolv.conf</path> file:
</p>
<pre caption="/etc/resolv.conf template">
domain mydomain.com
nameserver 10.0.0.1
nameserver 10.0.0.2
</pre>
<p>Replace <c>10.0.0.1</c> and <c>10.0.0.2</c> with the IP addresses of your
primary and secondary DNS servers respectively.</p>
</body>
</section>

<section>
<title>Proxy Configuration</title>
<body>
<p>If you are behind a proxy, it is necessary to configure your proxy before
you continue. You will need to export some variables to set up the proxy accordingly. </p>
<pre>
# <i>export http_proxy="machine.company.com:1234" </i>
# <i>export ftp_proxy="$http_proxy" </i>
# <i>export RSYNC_PROXY="$http_proxy" </i>
</pre>
</body>
</section>

<section>
<title>Network testing</title>
<body>
<p>Now that your network has been configured, the <c>/sbin/ifconfig -a</c> command should show (hopefully!)
that your network card is working
(look for <e>UP</e> and <e>RUNNING</e> in the output).
</p>
<pre caption="/sbin/ifconfig for a working network card">
eth0      Link encap:Ethernet  HWaddr 00:50:BA:8F:61:7A
          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::50:ba8f:617a/10 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1498792 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1284980 errors:0 dropped:0 overruns:0 carrier:0
          collisions:1984 txqueuelen:100
          RX bytes:485691215 (463.1 Mb)  TX bytes:123951388 (118.2 Mb)
          Interrupt:11
</pre>
</body>
</section>

<section>
<title>Networking is go!</title>
<body>
<p>Networking should now be configured and usable.  You should be able to use the included
<c>ssh</c>, <c>scp</c> and <c>wget</c> commands to connect to other machines on your LAN or the Internet.</p>
</body>
</section>
</chapter>

<chapter>
<title>Set up partitions and building the system</title>
<body>
<note>At this point, if you need more than one console, do not forget to set a 
password for root. Additionally, many programs are available on the LiveCD, such
as <i>screen</i>, <i>lynx</i>, and <i>irssi</i></note>
</body>
<section>
<title>Set up partitions</title>
<body>
<p>Run <i>fdisk</i> to create the partitions you want.</p>
<pre>
# <i>fdisk /dev/sdX</i>
<codenote>replace sdX by the disk on which you want to create a partition.
(i.e. sda, hda, ...)</codenote>
</pre>
<warn>PALO needs a special partition to work. You have to create a partition of
at least 16 MB at the begining of your disk. This partition must be of type <e>f0 (Linux/PA-RISC boot)</e></warn>
<impo>If your disk is larger than 2 GB, you will need to create a boot partition in the first 2 GB of your disk. PALO is unable to read a kernel after the 2 GB limit.</impo>
<p>After you have succefully created your partitions and placed filesystems
on them, you are ready to begin the fun stuff.
In the following example, the root partition is at <path>/dev/sda3</path>, 
the swap partition at <path>/dev/sda4</path> for a stage 1 installation (The 
stage 1 tarball is fetched from the gentoo mirrors).</p>
<pre>
# <i>swapon /dev/sda4</i>
# <i>mount -n /dev/sda3 /mnt/gentoo</i>
</pre>
<note>After mounting your new root partition to <path>/mnt/gentoo</path>, it 
is time to mount any other partitions (e.g. <path>/boot, /usr, /var</path>).
</note>
<pre>
# <i>cd /mnt/gentoo</i>
# <i>wget http://www.ibiblio.org/pub/Linux/distributions/gentoo/experimental/hppa/stages/stage1-hppa1.1-1.4_someversion.tar.bz2</i>
# <i>tar xpjvf stage1-hppa1.1-1.4_someversion.tar.bz2</i>
# <i>cp /etc/resolv.conf etc/resolv.conf</i>
# <i>mount -o bind /proc proc</i>
# <i>chroot .</i> <codenote>Now you are in your new system</codenote>
# <i>env-update</i> <codenote>This will correctly set your evironment variables</codenote>
<codenote>You can safely ignore any warnings about missing files</codenote>
# <i>source /etc/profile</i>
# <i>nano -w /etc/make.conf</i> <codenote>Tweak your optimisations and mirrors here</codenote>
# <i>emerge sync</i> <codenote>This will retrieve the current portage tree which is about 10 MB</codenote>
</pre>
<p>If you started from a stage 1, start the bootstrap process.</p>
<pre>
# <i>cd /usr/portage</i>
# <i>./scripts/bootstrap.sh</i>
</pre>
<p>This brings you to stage 2, where you will now compile and install the
base system files.</p>
<pre>
# <i>export CONFIG_PROTECT="-*"</i>
# <i>emerge system</i>
</pre>
<p>Your Gentoo setup is now at stage 3. If you start from a stage 3,
it is possible that there are some new and/or updated packages. To update
them:</p>
<pre>
# <i>unset CONFIG_PROTECT</i>
# <i>emerge -uD world</i>
</pre>
<p>
The base system is now up to date.
</p>
</body>
</section>
</chapter>


<chapter>
<title>Building a kernel</title>
<section>
<title>Getting current kernel sources for HP-PA</title>
<body>
<p>There is a specially patched kernel tuned for HP-PA machines available in
Gentoo Linux. To install it just <c>emerge hppa-sources</c></p>
<pre>
# <i>emerge hppa-sources</i>
</pre>
<p>Now you may need to patch your kernel to add certains support like for
SGI's XFS filesystem, Usagi IPv6, etc.
<note>None of those patches are currently tested, so do so at your own
risk.</note>
Once the sources have been fetched and unpacked, you will need to configure
your kernel.
</p>
</body>
</section>
<section>
<title>Configuring and compiling your kernel</title>
<body>
<p>Here is how to configure and compile your kernel.</p>
<pre>
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
# <i>make vmlinux modules modules_install</i>
# <i>cp vmlinux System.map /boot</i>
</pre>
<warn>In order to have a working kernel, you will have to choose the right options in your configuration. Some of them should <c>be enabled staticaly and not compiled as modules</c>. You will need to enable the <c>"Code maturity level options --> Prompt for development and/or incomplete code/drivers"</c> option to see several of these selections. Under the <c>"File systems"</c> section, be sure to enable the <c>Device File System</c> (note that you <e>do not</e> need to enable the <c>"/dev/pts file system support"</c> option). You will also need to enable the <c>Virtual Memory File system</c>.</warn>
<impo>If you have a HIL mouse or keyboard, do not forget to compile in support for them. For this, you must enable the <c>"Keyboard support"</c>, the <c>"Mouse support"</c> and the <c>"Event interface support"</c> in the section <c>"Input core support"</c>.
</impo>
<impo>
In the section <c>"HIL support"</c>, if you have no mouse on your HIL port,
it is recommend to use only the <c>"HIL Keyboard (basic) support"</c>.
</impo>
<impo>
By the way, full support is available when choosing the options <c>"HP System Device Controller i8042 Support"</c> and then <c>"HIL MLC Support"</c>, <c>"HIL Keyboard (full) support"</c> and <c>"HIL Mouse &amp; Pointer support"</c>. But in this case <e>DO NOT</e> select the <c>"HIL Keyboard (basic) support"</c>.
</impo>
</body>
</section>
<section>
<title>Installing PALO : the boot loader</title>
<body>
<p>On the PA-RISC platform, the boot loader is called <i>palo</i>. You can find the configuration file in <e>/etc/palo.conf</e>.
Here is a sample configuration :</p>
<pre>
--commandline=2/vmlinux root=/dev/sdb2 HOME=/
--recoverykernel=/vmlinux.old
--init-partitioned=/dev/sdb
</pre>
<p>The first line tells palo the location of the kernel and which boot parameters it must use.
<c>2/vmlinux</c> means the kernel named <i>/vmlinux</i> resides on the second partition.
</p>
<impo>The path to the kernel is relative to the root <e>of the partition</e>, not to the root of your file tree.</impo>
<p>
The second line indicates which recovery kernel to use. If it is your first
install and you do not have a recovery kernel, please comment this out.
</p><p>
The third line indicates on which disk <i>palo</i> will reside.
When configuration is done, just run <c>palo</c>.</p>
<pre>
# <i>palo</i>
</pre>

</body>
</section>
</chapter> 
<chapter>
<title>Final Configs</title>
<section>
<title>Timezone</title>
<body>
<note>It is extremely important that this step is completed. Major clock drift
will be experienced if you do not set localtime correctly.
</note>

<p>At this point, you should have a stage 3 system that is ready for final configuration.  You will start this process by setting the time zone.  By setting the timezone before building the kernel you ensure that
users get reasonable <c>uname -a</c> output.</p>
<p>Look for your timezone (or UTC if you prefer to use Universal Time
Constant) in <path>/usr/share/zoneinfo</path>.  Then, make a symbolic link by typing:
</p><pre>
# <i>ln -sf /usr/share/zoneinfo/path/to/timezonefile /etc/localtime</i>
</pre>
<p>You might also want to check <path>/etc/rc.conf</path> to make sure your time zone settings are correct. </p>
</body>
</section>
<section>
<title>System Logger and Cron daemon</title>
<body>
<p>Now you need to choose a system logger to install.  Gentoo Linux offers
<i>sysklogd</i>, which is the traditional set
of system logging daemons.  Also available are: <i>msyslog</i>,
<i>syslog-ng</i>, and <i>metalog</i>.  Power users seem
to gravitate away from <i>sysklogd</i> (not very good performance), toward the
newer alternatives.  In paticular, <i>metalog</i> seems to be quite popular.
To merge your logger of choice, type <e>one</e> of the next four sets of
commands:
</p>

<pre>
# <i>emerge app-admin/sysklogd</i>
# <i>rc-update add sysklogd default</i>
<comment>or</comment>
# <i>emerge app-admin/syslog-ng</i>
# <i>rc-update add syslog-ng default</i>
<comment>or</comment>
# <i>emerge app-admin/metalog</i>
# <i>rc-update add metalog default</i>
<comment>or</comment>
# <i>emerge app-admin/msyslog</i>
# <i>rc-update add msyslog default</i>
</pre>
<impo>
Metalog flushes its output to the disk in blocks, so messages are not immediately recorded into
the system logs.  If you are trying to debug a daemon, this performance-enhancing behavior is less than helpful.  When your
Gentoo Linux system is up and running, you can send
metalog a USR1 signal to temporarily turn off this message buffering (meaning that 
<i>tail -f <path>/var/log/everything/current</path></i> will now work 
in real time, as expected), 
and a USR2 signal to turn buffering back on
again. 
</impo>
<p>Now, you may optionally choose a cron package to use.  The current
available choices in Gentoo Linux are: <i>dcron</i>, <i>fcron</i>, and
<i>vixie-cron</i>.
If you do not know which one to choose, you might as well grab <i>vixie-cron</i>.
Again, please issue <em>one</em> of the following sets of commands:</p>
<pre>
# <i>emerge sys-apps/dcron</i>
# <i>crontab /etc/crontab</i>
<comment>or</comment>
# <i>emerge sys-apps/fcron</i>
# <i>crontab /etc/crontab</i>
<comment>or</comment>
# <i>emerge sys-apps/vixie-cron</i>
<comment>do not forget to add your *cron to the proper init level. </comment>
# <i>rc-update add *cron default </i>
</pre>
<p>For more information how how cron works under Gentoo Linux, see <uri link="http://lists.gentoo.org/pipermail/gentoo-announce/2002-April/000151.html">this announcement</uri>.</p>
<p>For more information on starting programs and daemons at startup, see the <uri link="/doc/en/rc-scripts.xml">rc-script guide</uri>. </p>
</body>
</section>
<section>
<title>/etc/fstab</title>
<body>
<p>Your Gentoo Linux system is almost ready for use.  All you need to do now is configure
a few important system files and install the PALO boot loader.
The first file you need to
configure is <path>/etc/fstab</path>.  Remember that you should use
the <c>notail</c> option for your boot partition if you chose to create a ReiserFS filesystem on it.
Remember to specify <c>ext2</c>, <c>ext3</c> or <c>reiserfs</c> filesystem types as appropriate.</p>
<p>Your <path>/etc/fstab</path> should somewhat resemble the one shown below,
but of course be sure to replace "BOOT", "ROOT" and "SWAP" with the actual block devices you are using (such as <c>hda1</c>, etc.)</p>
<pre>
<comment>
# /etc/fstab: static file system information.
#
# noatime turns off atimes for increased performance (atimes normally aren't
# needed; notail increases performance of ReiserFS (at the expense of storage
# efficiency).  it is safe to drop the noatime options if you want and to
# switch between notail and tail freely.

# &lt;fs&gt;           &lt;mountpoint&gt;   &lt;type&gt;   &lt;opts&gt;          &lt;dump/pass&gt;

# NOTE: If your BOOT partition is ReiserFS, add the notail option to opts.
</comment>
/dev/BOOT           /boot       ext2	 noauto,noatime	 1 2
/dev/ROOT           /           ext3	 noatime         0 1
/dev/SWAP           none        swap	 sw              0 0
/dev/cdroms/cdrom0  /mnt/cdrom  iso9660	 noauto,ro       0 0
proc                /proc       proc	 defaults        0 0
</pre>

<warn>Please notice that <path>/boot</path> is NOT mounted at boot time. This is to protect the data in <path>/boot</path> from
corruption. If you need to access <path>/boot</path>, please mount it!
</warn>

</body>
</section>
<section>
<title>Set the root password</title>
<body>
<p>Before you forget, set the root password by typing:</p>
<pre>
# <i>passwd</i>
</pre>
</body>
</section>
<section>
<title>/etc/hostname</title>
<body>
<p>Edit this file so that it contains your fully-qualified domain name on a single line, i.e. <c>mymachine.mydomain.com</c>.
<pre>
# <i>echo mymachine.mydomain.com > /etc/hostname</i>
</pre>
</p>
</body>
</section>

<section>
<title>/etc/hosts</title>
<body>
<p>This file contains a list of IP addresses and their associated hostnames.  It is used by the system to resolve the IP addresses
of any hostnames that may not be in your nameservers.  Here is a template for this file:
</p><pre>
127.0.0.1      localhost
<comment># the next line contains your IP for your local LAN, and your associated machine name</comment>
192.168.1.1    mymachine.mydomain.com	mymachine
</pre>

<note>If you are on a DHCP network, it might be helpful to set <i>localhost</i> to your machine's
actual hostname. This will help GNOME and many other programs in name resolution.
</note>

</body>
</section>

<section>
<title>Final network configuration</title>
<body>
<p>
Add the names of any modules that are necessary for the proper functioning
of your system to the
<path>/etc/modules.autoload</path> file (you can also add any options you
need to the same line.) When Gentoo Linux boots, these modules will be automatically
loaded.  Of particular importance is your ethernet card module, if you happened to compile it as a module:
</p>
<pre caption="/etc/modules.autoload">
3c59x
</pre>
<p>Edit the <path>/etc/conf.d/net</path> script to get your network configured for your first boot:
</p>
<pre>
# <i>nano -w /etc/conf.d/net</i>
# <i>rc-update add net.eth0 default</i>
</pre>
<p>
If you have multiple network cards you need to create additional <path>net.eth<comment>x</comment></path>
scripts for each one (<comment>x</comment> = 1, 2, ...):
</p>
<pre caption="Multiple network interfaces">
# <i>cd /etc/init.d</i>
# <i>cp net.eth0 net.eth<comment>x</comment></i>
# <i>rc-update add net.eth<comment>x</comment> default</i>
</pre>

</body>
</section>

<section>
<title>Configure basic settings (including the international keymap setting)</title>
<body>
<pre caption="basic configuration">
# <i>nano -w /etc/rc.conf</i>
</pre>
<p>
Follow the directions in the file to configure the basic settings.
Please make sure that <c>CLOCK</c> is set to your liking. 
International keyboard users will want to set the <c>KEYMAP</c>
variable (browse <path>/usr/share/keymaps</path> to see the various
available keymaps).
</p>
</body>
</section>

</chapter>
<chapter>
<title>Grand Finale!</title>
<section>
<body>
<p>Congratulations! You have just completed your install of Gentoo Linux on your
HPPA station. We welcome any comments or suggestions that you may have to help us better
our HPPA port. Thank you for taking the time to install.</p>

<p>You are now at the point where you can do one of a few things.
Either unmount everything and reboot to start installing ebuilds or you can start installing them now.</p>
<note>A large part of this installation document was based on the Gentoo
SPARC Installation Guide and from the PA-RISC-Linux-Boot-HOWTO.</note>
</body>
</section>
</chapter>

</guide>
