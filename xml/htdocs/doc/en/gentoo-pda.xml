<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/doc/en/gentoo-pda.xml">
  <title>Gentoo Linux PDA/PIM Guide</title>
  <author title="Author">
    <mail link="zhen@gentoo.org">John P. Davis</mail>
  </author>
  <author title="Contributor">Steven Hay</author>
  <author title="Editor">
    <mail link="swift@gentoo.org">Sven Vermeulen</mail>
  </author>
  <abstract>This guide covers the configuration of many popular PDAs for
use under Gentoo Linux.
</abstract>

<license/>

  <version>2.1</version>
  <date>September 15, 2003</date>
  <chapter>
    <title>PDA Independent Setup</title>
    <section>
      <title>Connection Configuration</title>
      <body>
	  <p>The first thing that must be done before any information management is done, is getting your PDA to talk
	  to your computer.
	  </p>
	  </body>
	  </section>
	  <section>
	  <title>USB Connection</title>
	  <body>
        <p>The first thing you must do is see if your kernel supports your USB
hardware properly, and if not, install the appropriate drivers.  This
HOWTO assumes that you know the basics of configuring a kernel.</p>
        <p>If you do not already have the sources to the Linux kernel on your hard drive, now would
be the time to go and get them. I will not cover the different kernels that Gentoo offers,
so if you would like more information, please consult the
<uri link="http://www.gentoo.org/doc/en/gentoo-x86-install.xml">Installation Guide</uri>.
</p>
        <pre caption="Necessary USB Kernel Options">
# <c>cd /usr/src/linux</c>
# <c>make menuconfig</c>
</pre>
        <p> Here are the options you should be looking for:
<ul><li>USB support (CONFIG_USB)</li>
<li>The preliminary USB Device Filesystem (CONFIG_USB_DEVICEFS)</li>
<li>The appropriate controller - UHCI, or OHCI (CONFIG_USB_UHCI, or CONFIG_USB_OHCI)</li>
<li>USB Serial Converter support (CONFIG_USB_SERIAL)</li>
<li>USB Handspring Visor Driver (CONFIG_USB_SERIAL_VISOR) (serial converter's sub-option)
[Only necessary if you are using a Handspring]</li></ul>
</p>
        <note>If possible, compile these as modules, and add them to
<path> /etc/modules.autoload</path> so that they can be automatically
loaded at boot time.
</note>
      </body>
    </section>
    <section>
      <title>Serial Connection</title>
      <body>
        <p>I'll assume your serial PDA cradle plugs into the first serial port
(/dev/ttyS0, or /dev/tts/0 in &quot;devfs&quot; notation).
</p>
        <pre caption="Adding serial device">
# <c>groupadd serial</c>
# <c>chown root.serial /dev/tts/0</c>
# <c>chmod g+rw /dev/tts/0</c>
# <c>ls -l /dev/tts/0</c>
# crw-rw----    1 root     serial     4,  64 Dec 31  1969 /dev/tts/0
# <c>ln -s /dev/tts/0 /dev/pilot</c>
# <c>nano -w /etc/group</c> <comment>(add appropriate users to the serial group)</comment>
</pre>
        <p>We've added a &quot;serial&quot; group to the system, and you should add any users who need
to use the serial port (any Palm pilot users) to the serial group.  We've given
the serial group &quot;rw&quot; permissions on <path>/dev/tts/0</path>, and for future
reference we have made a <path>/dev/pilot</path> symbolic link to
<path>/dev/tts/0</path>.  Thanks to recent changes in how devfs is handled on
Gentoo these changes will persist after rebooting.
</p>
        <note>
Users of pre-rc6-r13 can either upgrade <path>sys-apps/baselayout</path>
and <path>sys-fs/devfsd</path> (and merge in any &quot;._cfg*&quot; files in
<path>/etc</path> that result), or simply add the appropriate permissions
and symlink in <path>/etc/devfsd.conf</path>.
</note>
      </body>
    </section>
    <section>
      <title>Restarting devfsd</title>
      <body>
        <p> Now you need to restart the <e>devfsd</e> daemon.  If your
config file has errors, you may need to start the daemon again
manually because it will stop running.</p>
        <pre caption="Restarting devfsd">
# <i>killall -HUP devfsd</i>
</pre>
      </body>
    </section>

<section>
<title>Sharp Zaurus (SL5000/SL5500) USB Connection</title>
<body>
<p>The Zaurus has the handy feature of being able to connect to your computer like a device on the network, but it does
not require a network card (NIC). All that you need is your Zaurus' USB cradle, and the <i>usbd</i> kernel module.
</p>

<note>Most of this information is derived from <uri>http://www.zauruszone.com/howtos/lc_generic.shtml</uri>.
I give much thanks to Sharp's Developer website for their willingness to work with the Open Source community.
</note>

<p>The first thing that has to be done is the kernel patch. The <i>usbd</i> driver is a patch file that is patched against
a kernel tree, and then enabled during kernel configuration. </p>

<pre caption="Getting and Installing the usbd kernel patch">
# <c>cd /usr/src</c>
# <c>wget http://www.zauruszone.com/howtos/downloads/usbdnet-2.4.18-patch.gz</c>
<comment>Patch for kernel 2.4.18</comment>
# <c>wget http://www.zauruszone.com/howtos/downloads/usbdnet-2.4.19-patch.gz</c>
<comment>Patch for kernel 2.4.19</comment>
# <c>wget http://www.zauruszone.com/howtos/downloads/usbdnet-2.4.20-patch.gz</c>
<comment>Patch for kernel 2.4.20</comment>

<comment>Now, patch the kernel, where 2.4.x is the patch that corresponds to your kernel version</comment>
# <c>zcat usbdnet-2.4.x.patch.gz | patch -p0</c>
</pre>

<p>Once that is done, configure your kernel and add these options:</p>

<pre caption="Kernel Configuration">
<comment>While in <path>/usr/src/linux</path></comment>
# <c>make menuconfig</c>
In "Code maturity level options", select "Prompt for development and/or incomplete code/drivers"
In "USB support", section "USB Network adaptors", select (as a module) "USBD Network (Encapsulated) Host-to-Host Link (EXPERIMENTAL)"
Then enter <i>04dd in USBD Network idVendor</i> and <i>8004 in USBD Network idProduct</i>.
</pre>

<p>It does not matter if the <i>usbd</i> module is built as a module or into the kernel. If you do build it as
a module, make sure that you load it after you reboot. Additionally, make sure that you have the necessary USB
information built into your kernel, as noted above.
</p>

<p>After your kernel is configured and you have rebooted, it is time to see
if the patch has worked and you are in business.
</p>
 
<p>After turning your Zaurus on, insert it into the cradle and hit the sync button. 
If you check <path>/var/log/messages</path>, you should see some information like this: </p>

<pre caption="/var/log/messages output">
# <c>tail -f /var/log/messages</c>
<comment>output</comment>
hub.c: USB new device connect on bus1/1, assigned device number 38
usb.c: USB device 38 (vend/prod 0x4dd/0x8004) is not claimed by any active driver.
v0.4b sl@lineo.com, tbr@lineo.com
usbdnet.c: v0.4b sl@lineo.com, tbr@lineo.com
usbdnet.c: USB Host to Device Network - for Linux USB Devices using MDLM/CDC
usb.c: registered new driver usbdnet
</pre>

<p>If all goes well with that step, move on to loading the network device:</p>

<pre caption="Loading the USB network device">
# <c>ifconfig -a</c>
</pre>

<p>One of the adapters, namely <i>usb0</i> should show up in the list.</p>

<p>Now it is time to setup the network on the Zaurus. USB Networking is similar to PPP in that each device on either
end gets an IP address. The IP address on the Zaurus is set via the network setup tool. If it is not "192.168.129.201"
then use the given IP adddress when trying to ping the Zaurus below.
</p>

<p>If when you put the Zaurus in the cradle an interface other then usb0 is created, replace all usb0 instances with that interface
name for this section of the HOWTO. You should be able to configure the device using the following commands: </p>

<pre caption="Configuring the Zaurus">
<comment>This is entered into your desktop's command line</comment>
# <c>ifconfig usb0 192.168.129.1 netmask 255.255.255.255 up </c>
# <c>route add -host 192.168.129.201 usb0 </c>
</pre>

<p>Now, try to ping the Zaurus, <c>ping 192.168.129.201</c>, if you've got a reply then you are sucessfully connected!
</p>

<note>The above steps will only get your desktop talking to the Zaurus for syncing purposes. If you
wish to connect to the Internet from the Zaurus via the USB cradle, please consult the 
<uri link="http://www.zauruszone.com/howtos/lc_generic.shtml">Sharp Zaurus Developer</uri> website.
</note>

</body>
</section>
	
    <section>
	<title>Miscellaneous Procedures</title>
      <body>
        <p>Before compiling any programs that you will be using for your PDA, it is a good idea
to add the <e>pda</e> USE variable to <path>/etc/make.conf</path>. Doing this will ensure
that any programs you have will have their optional PDA (if availible) support built-in.
</p>
        <pre caption="Editing /etc/make.conf">
# <c>vim /etc/make.conf</c>
<comment>You are looking for this line</comment>
USE=&quot;use1 use2 etc <e>pda</e>&quot;
</pre>

<p>Now, if you are going to be using a Palm/Handspring, it is a good idea to add the necessary
symlinks.
</p>
         <pre caption="Creating symlinks">
# <c>ln -s /dev/usb/tts/1 /dev/palm</c>
# <c>ln -s /dev/usb/tts/1 /dev/pilot</c>
</pre>
     </body>
    </section>
  </chapter>
  <chapter>
    <title>Handspring/Palm Syncing</title>
    <section>
      <title>General Information</title>
      <body>
        <p>You will need software to synchronize the data on your PDA.
So far, we have setup the hardware side of the house, now its time for
the (hopefully) easier software side.  There are two major categories
for syncing software; some are rather low-level and simply perform the
synchronization download, others are more robust palm environments to
edit and view the data on your palmtop.</p>
      </body>
    </section>
    <section>
      <title>Coldsync</title>
      <body>
        <p>Coldsync is considered a <i>low-level</i> program, because it
doesn't do anything fancy like some of the ones covered later.  This
may or may not be what you are looking for.  Coldsync can be found at
<uri>http://www.coldsync.org/</uri>It was written as a replacement for
pilot-link.  To install this program, do the following:</p>
        <pre caption="Installing ColdSync">
# <c>emerge coldsync</c>
</pre>
        <p>Now, after making sure all of your modules are loaded, press
the sync button on the cradle and within a few seconds, execute
coldsync with proper options as a user this time:</p>
        <pre caption="Using ColdSync">
# <c>mkdir ~/palmbackup/</c>
<comment>press the sync button</comment>
# <c>coldsync -p /dev/usb/tts/1 -mb ~/palmbackup/</c>
</pre>
      </body>
    </section>
    <section>
      <title>Pilot-link</title>
      <body>
        <p>Pilot-Link can be found at
<uri>http://www.gnu-designs.com/pilot-link</uri>. This utility is beyond the
scope of this tutorial because I chose not to use this program
directly.  However, I've read that the execution command is
something like this:</p>
        <pre caption="Using Pilot-Link">
# <c>mkdir ~/palmbackup/</c>
<comment>press the sync button</comment>
# <c>pilot-xfer -p /dev/usb/tts/1 -b ~/palmbackup/</c>
</pre>
      </body>
    </section>
    <section>
      <title>Higher-Level Syncing Software</title>
      <body>
        <p>There are a few Palm desktop equivalents. I will go over how to use
JPilot, which uses the pilot-link libraries.  You can try them out at
your own pleasure:
<ul><li><uri>http://www.moshpit.org/pilotmgr/</uri>Pilotmanager</li><li><uri>http://www.jpilot.org/</uri>J-Pilot</li><li><uri>http://www.slac.com/pilone/kpilot_home/</uri>KPilot (KDE)</li><li><uri>http://www.gnome.org/projects/gnome-pilot/</uri>Gnome-Pilot (GNOME)</li></ul>
</p>
      </body>
    </section>
    <section>
      <title>J-Pilot</title>
      <body>
        <p> J-Pilot is easy.  Emerge it and run it, play around with it.  To
install, type:</p>
        <pre caption="Installing JPilot">
# <c>emerge jpilot</c>
</pre>
        <p>Now as a user, go ahead and sync your palm first, then run the
software: </p>
        <pre caption="Syncing your PDA">
# <c>jpilot-sync</c>
# <c>jpilot</c>
</pre>
        <note>If syncing doesn't work, look at the error message; you
may need to make a symlink, set your permissions properly in devfsd,
or pass an argument.  See the manpage.
</note>
      </body>
    </section>
    <section>
      <title>Smooth, Sexy Automation</title>
      <body>
        <p>Now you should go and look at your devfsd configuration file
again.  If you hadn't guessed by, this is how
you get the PDA to sync automatically when you press the sync button.
When that device shows up, you can setup devfsd to automatically
execute something.  Below, I have an example setup for user YOU:</p>
        <pre caption="Editing /etc/devfsd.conf">
#configure USB  added by YOU!
REGISTER        ^usb            PERMISSIONS     0.0     0777
REGISTER        ^usb/tts        PERMISSIONS     0.0     0777
<comment>Use this if you are using jpilot to sync</comment>
REGISTER        ^usb/tts/1      EXECUTE       /bin/su YOU -c	&quot;/usr/bin/jpilot -sync&quot;
<comment>Use this if you are using coldsync to sync</comment>
REGISTER       ^usb/tts/1       EXECUTE       /bin/su YOU -c	/usr/local/bin/sync-coldsync &amp;
</pre>

<p>
If you are using coldsync to sync, you have to create a small script
called <path>/usr/local/bin/sync-coldsync</path> with the following
content:
</p>

<pre caption = "/usr/local/bin/sync-coldsync">
#!/bin/sh

/usr/bin/coldsync -p /dev/usb/tts/ -mb $HOME/palmbackup
</pre>

<note>This option is not availible if you are syncing via serial since serial is always "on".
USB is detected differently than serial. You may try, but this will not work with serial.
</note>

        <note>The daemon is run as root. Notice that it uses su
to change to the person who owns the pilot before syncing, and doesn't
require a password to do so.
</note>
      </body>
    </section>
  </chapter>
  <chapter>
    <title>Final Notes</title>
    <section>
      <title>References</title>
      <body>
        <p>Additional info:
<ul>
<li><uri>http://www.linuxpda.com/visor/howto/current/t1.html</uri> Handspring-Visor with Linux mini-HOWTO</li>
<li><uri>http://www.linux-usb.org/USB-guide/book1.html</uri> Linux USB Guide</li>
<li><uri>http://www.zauruszone.com/howtos/lc_generic.shtml</uri> Sharp Zaurus Developer Website</li>
</ul>
</p>
      </body>
    </section>
  </chapter>
</guide>
