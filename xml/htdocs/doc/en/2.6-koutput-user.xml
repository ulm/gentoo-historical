<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/Attic/2.6-koutput-user.xml,v 1.6 2004/07/28 14:24:59 swift Exp $ -->

<guide link="/doc/en/2.6-koutput-user.xml">

<title>2.6 Kernels and "koutput"</title>
<author title="Developer">
  <mail link="latexer@gentoo.org">Peter Johanson</mail>
</author>
<author title="Editor">
  <mail link="antifa@gentoo.org">Ken Nowack</mail>
</author>
<author title="Editor">
  <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>

<abstract>
This guide covers how to use Gentoo's new "koutput" method to handle 2.6
kernels and kernel modules.
</abstract>

<license/>

<version>1.2</version>
<date>July 28, 2004</date>

<chapter>
<title>Overview</title>
<section>
<body>

<p>
The 2.6 kernel, among other things, provides many enhancements to the kernel
build infrastructure, or "kbuild system." Among the features that have been
added, the 2.6 kernel now allows all of the files created by the kernel to be
output to a arbitrary separate location. This has several advantages over the
old method:
</p>

<ul>
  <li>
    Arbitrary users can all use the same sources to build kernels, outputting
    to some location in their home directory.
  </li>
  <li>
    Kernels can be built for multiple target architectures, and the generated
    files for each architecture won't be lost.
  </li>
  <li>
    <path>/usr</path> can be mounted read-only and still allow kernels to be
    generated, reconfigured, etc
  </li>
  <li>
    External modules can be built without requiring write access to
    <path>/usr/src/linux</path>
  </li>
</ul>

<p>
This last fact is important, as previously portage would need to be given
temporary write access to a directory on the live filesystem in order to compile
external modules against a 2.6 kernel source tree. If you choose <b>not</b> to
use koutput for 2.6 kernels, most kernel modules will fail, due to this
restriction. To allow portage to write to <path>/usr/src/linux</path> during
kernel module emerges, you can use config-kernel:
</p>

<note>
Not all of config-kernel's features are discussed in this guide. For the
rest of the information see <b>man config-kernel</b>
</note>

<pre caption="Enabling writing to /usr/src/linux">
# <i>config-kernel --allow-writable=yes</i>
</pre>

<p>
At any later time you can revert this decision by using config-kernel again.
</p>

<pre caption="Disabling writing to /usr/src/linux">
# <i>config-kernel --allow-writable=no</i>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Advantages</title>
<section>
<body>

<p>
You may be asking yourself, "Why should I bother?" The problem that inspired
this functionality was in fact an issue with kernel module ebuilds like
nvidia-kernel or hostap-driver. These ebuilds  need to use the kernel build
system to compile, however building them would require updating files in
<path>/usr/src/linux</path>, and fail because of sandbox violations.
</p>

<note>
Gentoo's <b>sandbox</b> is a system that prevents portage from writing to the
live filesystem until the final merge step of the package installation.
</note>

<p>
Several dependent steps can be taken to resolve this issue. In short, kernel
builds must output all of their files to a different location when they are
compiled, and later external module compiles must <b>also</b> do this, only they
output to some subdirectory of the temporary build location. By letting the
modules output their built files into the permitted build location, those nasty
sandbox errors are prevented.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Enabling koutput</title>
<section>
<body>

<p>
2.6 kernels determine where to output their files based on two environmental
variables, <c>KBUILD_OUTPUT</c> and <c>O</c>. <c>KBUILD_OUTPUT</c> should be set
environmentally, and can then be overridden on the command line by specifying a
new <c>O</c> value. e.g.:
</p>

<pre caption="Setting an output by hand">
# <i>cd /usr/src/linux></i>
# <i>export KBUILD_OUTPUT="/var/tmp/kernel-output/2.6.4"</i>
# <i>mkdir /var/tmp/kernel-output/2.6.4</i>
<comment>Set our output location, and make sure that directory exists</comment>
# <i>make menuconfig</i>
<comment>The generated .config ends up in /var/tmp/kernel-output/2.6.4</comment>
# <i>make O=/home/joe/kernels/2.6.4 menuconfig</i>
<comment>The generated .config now ends up in /home/joe/kernels/2.6.4</comment>
</pre>

<p>
Gentoo's tool <b>config-kernel</b> provides a mechanism for automating some of
this processes. Using config-kernel, you can define a prefix for where kernels
that get installed by portage will output their files to.
</p>

<pre caption="Prepare environment with config-kernel">
# <i>config-kernel --output-dir=/home/joe/kernels</i>
</pre>

<p>
The above command will make all new kernels installed send their output by
default to <path>/home/joe/kernels/KV</path> where <b>KV</b> is the kernel
version. To set the output path to the Gentoo default, which is
<path>/var/tmp/kernel-output/</path>, you can do:
</p>

<pre caption="Prepare environment with config-kernel">
# <i>config-kernel --output-dir=default</i>
</pre>

<p>
User can also convert already installed 2.6 kernels to the new method using
config-kernel. Beware that this will cause all your previously generated files
to be erased, since <c>make mrproper</c> must be run during this process.
</p>

<pre caption="Converting a current kernel">
# <i>config-kernel --make-koutput=/usr/src/linux-2.6.3</i>
</pre>

<p>
The above command converts the kernel found in <path>/usr/src/linux-2.6.3</path>
to outputting to a different directory. If the output directory has been set
previously with <c>--output-dir /some/path</c>, then that prefix will be used.
Otherwise, the Gentoo default of <path>/var/tmp/kernel-output/KV</path> will be
used.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Repercussions</title>
<section>
<body>

<p>
After configuring to use a different output directory, the changes go largely
unnoticed when configuring and installing a kernel. There are a few key file
location changes that you should be aware of though. The main files to be
concerned with are .config, and the generated bzImage after compiling a kernel.
Below is a table showing the original and new locations for these key files. The
table assumes a 2.6.4 kernel outputting to the Gentoo default of
<path>/var/tmp/kernel-output/2.6.4</path>.
</p>

<table>
<tr>
  <th>Old file location</th>
  <th>New file location</th>
</tr>
<tr>
  <ti>/usr/src/linux/.config</ti>
  <ti>/var/tmp/kernel-output/2.6.4/.config</ti>
</tr>
<tr>
  <ti>/usr/src/linux/arch/i386/boot/bzImage</ti>
  <ti>/var/tmp/kernel-output/2.6.4/arch/i386/boot/bzImage</ti>
</tr>
</table>

<p>
This change of location is important. Two processes are largely affected by this
new file location, copy a kernel config into the proper location when updating
kernel sources, and copying a newly compiled bzImage into <path>/boot</path>. In
particular, when copying your .config, it's important to remember that you need
to copy it from the kernel output location of the original into the kernel
output location of the new kernel. To demonstrate how a kernel upgrade would be
performed using koutput, an example upgrade from vanilla-sources-2.6.4 to
vanilla-sources-2.6.5 is depicted:
</p>

<note>
Here, we assume the output prefix is set to <path>/var/tmp/kernel-output</path>
and that both kernel sources are already installed
</note>

<pre caption="Kernel Upgrade with koutput">
# <i>cp /var/tmp/kernel-output/2.6.4/.config /var/tmp/kernel-output/2.6.5/</i>
<comment>Copy our .config into the new output directory</comment>
# <i>config-kernel --set-symlink=2.6.5</i>
# <i>cd /usr/src/linux</i>
<comment>Move into our new source tree</comment>
# <i>make oldconfig</i>
# <i>make &amp;&amp; make modules_install</i>
<comment>Compile our new kernel and modules</comment>
# <i>mount /boot</i>
# <i>cp /var/tmp/kernel-output/2.6.5/arch/i386/boot/bzImage /boot/</i>
# <i>umount /boot</i>
<comment>Install the new kernel image</comment>
</pre>

<p>
For kernel modules building against kernels using the new system, nothing more
should be required beyond emerging the desired kernel module package as usual.
At the time of this writing, there are still some kernel modules being converted
over to the new setup, or still in testing phase. If the stable version of a
kernel module fails, try installing the <b>~arch</b> version first:
</p>

<pre>
# <i>ACCEPT_KEYWORDS='~x86' emerge foo</i>
<comment>The above command installs the testing version of the foo package</comment>
</pre>

<p>
If this still fails, please open a bug at <uri
link="http://bugs.gentoo.org">http://bugs.gentoo.org</uri>, and the kernel
module ebuild will be updated to the new system as soon as possible.
</p>

</body>
</section>
</chapter>
</guide>
