<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/Attic/openmosix-howto.xml,v 1.8 2006/11/28 20:01:21 nightmorph Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/openmosix-howto.xml">
  
<title>openMosix Cluster on Gentoo</title>
<author title="Author">
  <mail link="tantive@gentoo.org">Michael Imhof</mail>
</author>
<author title="Author">
    <mail link="ma53@drexel.edu">Michael Andrews</mail>
</author>
<author title="Reviewer">
    <mail link="sven.vermeulen@siphos.be">Sven Vermeulen</mail>
</author>
<author title="Reviewer">
    <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>


<abstract>
This HOWTO will help you create an openMosix cluster using Gentoo.
</abstract>

<license/>

<version>1.4</version>
<date>2006-11-28</date>

<chapter>
<title>Introduction</title>
<section>
<title>About this HOWTO</title>
<body>

<p>
This HOWTO will help you create an openMosix cluster. It will be based around
the Gentoo Linux distribution. We intend to make this as user friendly as
possible and cater to the Linux newbie. While an experienced user could easily
tie the multiple HOWTOs available on openMosix, diskless nodes and networking 
together, we hope that this HOWTO can ease the procedure for less-experienced 
users.
</p>

<note>
If you plan on setting up your openMosix cluster using diskless nodes, you
should read the kernel section below to learn how to compile a kernel with
openMosix support, then read our <uri link="diskless-howto.xml">diskless
HOWTO</uri>, and come back here to proceed with the actual cluster
installation.
</note>

</body>
</section>
<section>
<title>About openMosix</title>
<body>

<p>
OpenMosix is a patch to the Linux kernel that allows multiple hosts to act as a
single system image (SSI). This results in multiple hosts <e>appearing</e> as
one large multiprocessor host. At the time of writing the latest release of 
the openMosix kernel patch is version 2.4.22, and the openMosix user tools 
has version 0.3.4. There is a wide variety of information about
openMosix at <uri>http://openmosix.sourceforge.net</uri>. It is not easy to
cluster different versions of patched kernel sources, and we have found that 
most patches are not backwards compatible. OpenMosix migrates heavy weight 
processes explicitly when executing a.out or ELF binaries
or when a heavy weight process forks. It will not migrate light weight
processes such as p-threads, or heavyweight processes that use shared memory. 
</p>

<p>
For more information about openMosix visit their <uri
link="http://openmosix.sourceforge.net">home page</uri>.
</p>

</body>
</section>
<section>
<title>About the cluster</title>
<body>

<p>
Our cluster will be composed of individual computers (nodes) sharing
computational resources in an effort to increase the computational power of all
nodes. Not all nodes need to be of the same architecture but that makes the
task of clustering them much easier.
</p>

</body>
</section>
<section>
<title>Before you start</title>
<body>

<p>
You should have Gentoo installed on the computers you wish to bring into your
cluster. Additionally you should have the openMosix kernel source which has
been conveniently patched by Gentoo.
</p>

<p>
To get this source simply use <c>emerge</c>:
</p>

<pre caption="Getting patched kernel source">
# <i>emerge openmosix-sources</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Configuring the kernel</title>
<section>
<title>About kernels</title>
<body>

<p>
The kernel is the software that sits between your hardware and all other
software you have loaded on your machine, essentially the heart of a kernel
based operating system. When your computer is started, the BIOS executes the
instructions found at the reserved boot space of your hard drive. These
instructions are typically a boot loader that loads your kernel. After your
kernel has been loaded all processes are handled by the kernel.
</p>

<p>
For more information on kernels and kernel configuration you might want to
check out the <uri link="http://www.tldp.org/HOWTO/Kernel-HOWTO.html">kernel
HOWTO</uri>.
</p>

</body>
</section>
<section>
<title>Configuring the kernel</title>
<body>

<p>
The kernel can be as large and as customized as you would like but there are a
few required kernel options you need to check.
</p>

<impo>
It is extremely important to link <path>/usr/src/linux</path> to the 
openmosix-sources as shown below.
</impo>

<pre caption="Setting /usr/src/linux to openmosix">
# <i>cd /usr/src</i>
# <i>rm linux</i>
# <i>ln -s linux-2.4.22-openmosix linux</i>
</pre>

<p>
Then go into your kernel configuration:
</p>

<pre caption="Editing the kernel configuration">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
You should get a grey and blue GUI that offers a safe alternative to manually
editing the <path>/usr/src/linux/.config</path> file. If your kernel is
currently functioning well you might want to backup the current configuration
file:
</p>

<pre caption="Backing up the kernel configuration">
# <i>cp .config .config_working</i>
</pre>

<p>
The topmost menu item should say <c>openMosix ---&gt;</c>. If it doesn't, you
need to emerge the kernel source with the openMosix patch (see <uri
link="#doc_chap1_sect4">Before you start</uri>). Go into the following sub-menus
and make sure the following items are checked as built-in (and <e>NOT</e> as
module):
</p>

<pre caption="Menuconfig options">
openMosix ---&gt;
    [*] openMosix process migration support
    [ ] Support clusters with a complex network topology
    [*] Stricter security on openMosix ports
    (1) Level of process-identity disclosure (0-3)
    [*] openMosix File-System
    [ ] Poll/Select exceptions on pipes
    [ ] Disable OOM Killer
    [ ] Load Limit

Code maturity level options  ---&gt;
    [*] Prompt for development and/or incomplete code/drivers

Networking options ---&gt;
    &lt;*&gt; Packet socket
    [ ]   Packet socket: mmapped IO
    &lt; &gt; Netlink device emulation
    [ ] Network packet filtering (replaces ipchains)
    [ ] Socket Filtering
    &lt;*&gt; Unix domain sockets
    [*] TCP/IP networking
    [*]   IP: multicasting

File systems ---&gt;
    [*] /proc file system support
    [*] /dev file system support (EXPERIMENTAL)
    [*]   Automatically mount at boot 
</pre>

<note>
These kernel configuration options should only be appended to your system
specific configuration options and are not meant to completely replace those
options.
</note>

<p>
After you have re-configured the kernel you will want to rebuild it:
</p>

<pre caption="Recompiling the kernel and modules">
# <i>make dep</i>
# <i>make clean bzImage modules modules_install</i>
<comment>(Make sure /boot is mounted before copying to it)</comment>
# <i>cp arch/i386/boot/bzImage /boot/bzImage-openmosix</i>
</pre>

<p>
Then add an entry for that new kernel into <path>lilo.conf</path> or
<path>grub.conf</path> (depending on which bootloader you are using) and make 
the new kernel the default one. Now that the new <path>bzImage</path> has been 
copied into your <path>/boot</path> directory all you will have to do is reboot 
the system.
</p>

</body>
</section>
<section>
<title>Missing Options</title>
<body>

<p>
If you have missing options in your kernel configuration make sure you check:
</p>

<ul>
  <li>Code maturity level options ---&gt;
  <ul>
    <li>Prompt for development and/or incomplete code/drivers</li>
  </ul>
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Configuring of the openMosix nodes</title>
<section>
<title>Installing openMosix user tools</title>
<body>

<p>
In order for the cluster to be able to migrate processes, a few user-land 
binaries need to be installed. Additionally, an openMosix server needs to be 
started in order for a node to join a cluster and make full use of the 
openMosix capabilities. To get those binaries and files, use <c>emerge</c>:
</p>

<pre caption="Installing openMosix userland utilities">
# <i>emerge openmosix-user</i>
</pre>

</body>
</section>
<section>
<title>Configuring openMosix nodes</title>
<body>

<p>
Editing or creating <path>/etc/openmosix.map</path> is no longer needed. The 
newer versions of the userland utilities have an autodiscovery daemon available
that automatically detects all nodes in your network.
</p>

<p>
Create a directory <path>/mfs</path> on every node and mount it if you want to 
use the openMosix filesystem (highly recommended) that allows you to access all 
your nodes.
</p>

<pre caption="mkdir /mfs">
# <i>mkdir /mfs</i>
</pre>

<pre caption="Sample entry in /etc/fstab">
none                    /mfs            mfs             noauto,dfsa=1          0 0
</pre>


<note>
Not all nodes need to be up and running for openMosix to function correctly.
</note>

</body>
</section>
<section>
<title>Starting openMosix</title>
<body>

<p>
Starting openMosix is really simple. The following command will enable
openMosix functionality in your kernel and start the autodiscovery daemon, that
keeps track of all available nodes.
</p>

<pre caption="Starting openMosix">
# <i>/etc/init.d/openmosix start</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>openMosix userland utilities</title>
<section>
<title>Command line utilities</title>
<body>

<p>
openMosix-user installs several useful tools on your system. To name a few:
</p>

<ul>
  <li>
    <c>mosmon</c> - openMosix monitor. Allows you to see the state of all your 
    nodes including cpu utilization, installed memory, used memory, etc.
  </li>
  <li>
    <c>mtop</c> - Enhanced version of top that shows you on which node a 
    process is actually running.
  </li>
  <li><c>mps</c> - Enhanced version of ps. Shows nodenumber too.</li>
  <li>
    <c>mosctl whois</c> - This is very useful as mosmon and the other tools only
    tell you the node-number. With <c>mosctl whois nodenumber</c> you can figure
    out the ip or hostname of that node.
  </li>
</ul>

<p>
The openmosix stress test can be used to test if everything on your cluster
works as it should and how it behaves under load. This package is called
<c>openmosixtest</c>:
</p>

<pre caption="Emerge openmosixtest">
# <i>emerge openmosixtest</i>
</pre>

<p>
The ebuild should inform you how to run the test.
</p>

</body>
</section>
<section>
<title>Graphical utilities</title>
<body>

<p>
To get a graphical overview of your cluster and see processes being migrated,
you can use <c>openmosixview</c>.
</p>

<pre caption="Emerge openmosixview">
# <i>emerge openmosixview</i>
</pre>

<p>
To run this wonderful application just type <c>openmosixview</c>:
</p>

<pre caption="Launching openmosixview">
# <i>openmosixview</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Resources</title>
<section>
<title>openMosix</title>
<body>

<ul>
  <li><uri>http://openmosix.sf.net</uri></li>
</ul>

</body>
</section>
<section>
<title>openMosix add-ons (ebuilds are available)</title>
<body>

<ul>
  <li><uri link="http://www.openmosixview.com">openMosixview</uri></li>
  <li>
    <uri link="http://www.openmosixview.com/omtest">openMosix stress test</uri>
  </li>
  <li>
    <uri link="http://www.nongnu.org/gomd/">general openMosix daemon</uri>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
