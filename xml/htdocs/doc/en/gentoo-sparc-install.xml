<?xml version='1.0' encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link = "/doc/en/gentoo-sparc-install.xml">
<title>Gentoo Sparc/Sparc64 Linux Installation Guide</title>
<author title="Maintainer"><mail link="murphy@gentoo.org">Maarten Thibaut</mail></author>
<author title="Editor"><mail link="atom.stephens@ohiou.edu">Adam Stephens</mail></author>
<author title="Editor"><mail link="manson@gentoo.org">Rodney Rees</mail></author>

<abstract>This is a guide for installing Gentoo Linux on a Sparc64 based
machine. If you find errors or omissions please email the maintainer or an editor. </abstract>

<version>0.4</version>
<date>06 Oct 2002</date>
<chapter>
<title>Supported Hardware</title>
<section>
<body>
<p>
* Multiprocessor machines. Support really depends on the kernel, these
platforms are the same as single CPU machines for our purposes. Boot
images typically have SMP disabled in order to reduce the kernel size.
</p>
<p>
Warning: Most of these platforms have not been tested. Development is
done by a handful of people. Reports of (non-)working installations/platforms
are welcome on our mailing lists.
</p>
</body>
</section>
<section>
<title>Supported by the 32-bit UltraLinux project (sparc)</title>
<body>
<p>
<table>
<tr><th>* Sun4c architecture(*):</th></tr>
<tr><ti>    o SPARCstation SLC (4/20)</ti></tr>
<tr><ti>    o SPARCstation ELC (4/25)</ti></tr>
<tr><ti>    o SPARCstation IPC (4/40)</ti></tr>
<tr><ti>    o SPARCstation IPX (4/50)</ti></tr>
<tr><ti>    o SPARCstation/server 1 (4/60)</ti></tr>
<tr><ti>    o SPARCstation/server 1+ (4/65)</ti></tr>
<tr><ti>    o SPARCstation/server 2 (4/75)</ti></tr>
<tr><th>* Sun4d architecture:</th></tr>
<tr><ti>    o SparcCenter 2000</ti></tr>
<tr><th>* Sun4m architecture:</th></tr>
<tr><ti>    o SPARCclassic</ti></tr>
<tr><ti>    o SPARCstation LC (4/15)</ti></tr>
<tr><ti>    o SPARCstation LX (4/30)</ti></tr>
<tr><ti>    o SPARCstation 4</ti></tr>
<tr><ti>    o SPARCstation/server 5 (70, 85, 110, and 170(**) Mhz)</ti></tr>
<tr><ti>    o SPARCstation/server 10 (with most MBUS processor cards)</ti></tr>
<tr><ti>    o SPARCstation/server 20 (with most MBUS processor cards)</ti></tr>
<tr><ti>    o JavaStation 1 (***)</ti></tr>
<tr><ti>    o JavaStation 10 (***)</ti></tr>
<tr><ti>    o JavaStation E (***)</ti></tr>
<tr><ti>    o JavaEngine 1 (***)</ti></tr>
</table>
</p><p>
(*)   There are some kernel related memory management problems with sun4c. This
      is being worked on.
</p><p>
(**)  The 170MHz SPARC 5 (Also known as the TurboSPARC) is only supported in the
      newer kernel releases. There is not much active development, and UltraLinux
      on this processor is not very stable.
</p><p>
(***) See the related question further in this section.
</p><p>
<table>
<tr><th>* The following MBUS modules are known to work:</th></tr>
<tr><ti>    o SuperSPARC Model 20, 30, 40, 402, 41, 412, 51, 512, 514, 52, 54,61, 612, 71, 712, 81</ti></tr>
<tr><ti>    o All HyperSPARC modules</ti></tr>
<tr><ti>    o Cypress modules</ti></tr>
</table>
</p>
</body>
</section>
<section>
<title>Supported by the 64-bit UltraLinux project (sparc64)</title>
<body>
<p>
<table>
<tr><th>* Sun4u architecture:</th></tr>
<tr><ti>    o UltraSPARC Sbus based workstations: Ultra1, Ultra2, Ultra1 Creator, Ultra2 Creator</ti></tr>
<tr><ti>    o UltraSPARC Sbus based servers: Netra i, Enterprise 1, 2, 150</ti></tr>
<tr><ti>    o UltraSPARC Sbus based large servers: Enterprise 3000, 3500, 4000, 4500, 5000, 6000, 6500, 10000</ti></tr>
<tr><ti>    o UltraSPARC PCI based board computers: SPARCengine CP1400, CP1500 (*)</ti></tr>
<tr><ti>    o UltraSPARC PCI based workstations: Ultra30, UltraAXe, UltraAXi, UltraAXmp, Ultra5, Ultra10, Ultra60, Ultra80, SunBlade 100, SunBlade 1000</ti></tr>
<tr><ti>    o UltraSPARC PCI based servers: Netra X1(**), Netra T series(***), Enterprise 250, 450</ti></tr>
</table>
</p><p>
(*) These boards are known to work without any modifications, see also (***)
</p><p>(**) Currently completely supported except the embedded network interfaces.
</p><p>(***) See also Eric Browser's Sun Microsystems CP1400/CP1500/Netra-T1 Platform Support Document).
</p>
</body>
</section>
<section>
<title>Devices</title>
<body>
<p>
<table>
<tr><th>* SCSI:</th></tr>
<tr><ti>    o Sun/PTI Qlogic SCSi cards</ti></tr>
<tr><ti>    o SCSI/ether Sbus expansion cards</ti></tr>
<tr><ti>    o SCSI CD-ROM drives</ti></tr>
<tr><ti>    o SCSI Tape drives</ti></tr>
<tr><th>* 3rd party SCSI(*):</th></tr>
<tr><ti>    o NCR53c8xx</ti></tr>
<tr><ti>    o Adaptec SCSI</ti></tr>
<tr><ti>    o Qlogic/ISP</ti></tr>
<tr><th>* Ethernet cards:</th></tr>
<tr><ti>    o Onboard SunLance</ti></tr>
<tr><ti>    o Sun QuadEthernet (**)</ti></tr>
<tr><ti>    o Sunswift Happy Meal SCSI/Ethernet</ti></tr>
<tr><ti>    o Myricom Gigabit Ethernet (Sbus)</ti></tr>
<tr><ti>    o Several Linux supported PCI based ethernet cards.</ti></tr>
<tr><th>* Framebuffers:</th></tr>
<tr><ti>    o MG1/MG2 - bwtwo (monochrome)</ti></tr>
<tr><ti>    o CG3 - cgthree (8-bit)</ti></tr>
<tr><ti>    o GX, GX+, TGX and TGX+ - cgsix (8-bit)</ti></tr>
<tr><ti>    o SX - cgfourteen (support for 8-bit only)</ti></tr>
<tr><ti>    o TCX - SS4 and SS5 (resp. 8-bit and 24-bit, AFX bus)</ti></tr>
<tr><ti>    o LEO - ZX/TurboZX (24-bit)</ti></tr>
<tr><ti>    o FFB/FFB2 - Creator/Creator3D (24-bit)</ti></tr>
<tr><ti>    o PGX - ATI Rage Pro (8-bit)</ti></tr>
<tr><ti>    o PGX24 - ATI Mach64 (8 and 24-bit)</ti></tr>
<tr><ti>    o AFB - Elite3D (accelerated only ***, 24-bit)</ti></tr>
<tr><ti>    o OEM framebuffers:</ti></tr>
<tr><ti>      + cgRDI (cgthree, 8-bit)</ti></tr>
<tr><ti>      + Raptor GFX (8-bit and 24-bit)</ti></tr>
<tr><th>* Storage:</th></tr>
<tr><ti>    o All tape drives and changers</ti></tr>
<tr><ti>    o StorEdge T3 (****)</ti></tr>
<tr><th>* Miscellaneous:</th></tr>
<tr><ti>    o serial console</ti></tr>
<tr><ti>    o CS4231 based audio</ti></tr>
<tr><th>*  Floppy drive(*****)</th></tr>
</table>
</p><p>
(*) Booting from these cards requires OBP firmware.</p><p>
(**) The sun4c platform has problems with these card due to firmware problems.
</p><p>(***) Use the Xsun24 X server with the "-noFFB" option to disable acceleration, or if you have the Solaris driver, see the related question in Section "Running".
</p><p>(****) See http://open-projects.linuxcare.com/t3 for more driver information.
</p><p>(*****) Booting from floppy might not work on certain sparc64 based machines.
        Also, the floppy driver has been disabled on the CD boot image.
</p>
</body>
</section>
<section>
<title>Unsupported</title>
<body>
<p>* Any building of userland 64-bit targets. Kernel compiles work fine.
You'll need package egcs64-sparc, type: "emerge egcs64-sparc" once the
"emerge system" completes to get the compiler.
</p><p>
* X-windows system is not currently supported in Gentoo Sparc, but
</p>
</body>
</section><section>
<title>Space Requirements</title>
<body>
<p>A typical install of Gentoo sparc uses about 500-1000 MB. Gentoo sparc itself
uses about 450 MB for a complete bootstrap. This is reduced to about 150 after
building is complete. You probably don't want to make your root partition smaller
than 1 Gigabyte if you use only one partition.</p>
</body>
</section>
<section>
<title>Kernel</title>
<body>
<p>Always use a 64 bit kernels on a 64 bit machine. This includes Ultra 1, 2,
5, 10 and 60, the SunBlade series, E250/E450, E4*00, E6*00, E10K and
StarFire platforms. The <c>uname -m</c> output of these machines is "sparc64"
or "sun4u".</p>

<p>Always use 32 bit kernels on 32 bit platforms (sun4c, sun4d or sun4m).
These include the IPC/IPX, SparcStations, etc. The "uname -m" output should
be one of the following: "sparc", "sun4c", "sun4d" or "sun4m".</p>

<p>Currently we use the ARCH environment variable specified in
/etc/make.profile/make.defaults to determine the kernel architecture
to build. This is subject to change. It will probably change to a USE
switch such as <c>arch=sparc64</c>.</p>

<p>Stage 1 builds that are made on 64 bit machines should work fine on
sparc32 machines. The same goes for stage2 I think (not tested). I'll
try it out.</p>

<note>Sparc32 support is extremely limited and not entirely supported at this time.</note>

<p>Some kernels have trouble booting with large amounts of memory.
Try removing some memory, that worked for me, or try a newer image.</p>
</body>
</section>
</chapter>
<chapter>
<title>Part 2: Booting</title>
<section>
<title>Boot methods</title>
<body>
<p>
There are three ways of booting:
</p>
<p>
<uri link="#doc_chap4_sect2">booting over the network, or netboot</uri>
<uri link="#doc_chap4_sect3">booting from an existing SILO boot loader</uri>
<uri link="#doc_chap4_sect4">booting from cdrom</uri>
</p>
<p>
Using an existing Linux system already on the machine's hard drive is the
easiest method as it will probably provide you with a complete Unix
environment and a working ethernet connection. In this case boot into
your Linux system as normal, mount the destination partition at <path>/mnt/gentoo</path>
and skip to <uri link="#doc_chap5">Step 3</uri>.
</p>
<p>
If using an already installed Linux is not possible, then use a <uri link="#doc_chap4_sect2">netboot</uri>.
</p>
</body>
</section>
<section>
<title>Netboot</title>
<body>
<p>
At the boot prompt, type:
</p>
<pre>
ok <i>boot net</i>
</pre>
<note>You'll need to have another machine on the same network to provide RARP
(to allow the client to determine its IP address) and TFTP service (to get
the kernel over the network).
</note>
<p>
You can find good documentation on the Debian Sparc pages:
</p>
<p>
<uri>http://www.debian.org/releases/stable/sparc/install</uri>
</p>
<p>
The SunBlades haven't been supported very long and you may have trouble
finding good boot images. You can get decent netboot images at:
</p>
<p>
<uri>http://auric.debian.org/~bcollins/disks-sparc/current/</uri>
</p>
<p>
Once booted, choose a disk to install on and configure the network.
When the debian woody install disk asks you to setup a kernel, go
down to <c>Execute a shell</c>.
</p>
<p>
If your debian install system is failing DNS requests then you
probably moved away the <path>/target/etc/resolv.conf</path> file, make sure it's
there because that's where the debian install disk expects it to be.
</p>
<p>
You can also use your current Linux to untar the contents of the stage 1
into a partition and then mount it from the boot command line:
</p>
<pre>
ok <i>boot net root=/dev/sda4</i>
</pre>
</body>
</section>
<section>
<title>Existing SILO</title>
<body>
<p>Or you can use your already-installed SILO to boot it (press TAB once the
SILO: appears). Of course this means you won't be able to load kernel
modules but that might not be a problem as the default sparc kernel configs
enable most SPARC hardware drivers by default. You could use your already
installed Linux sparc machine to compile a kernel with all your drivers
compiled in statically.</p>

<pre>ok <i>boot</i>
SILO: <codenote>Press TAB here.</codenote> boot:
linux
boot: <i>vmlinux root=/dev/hda4</i>
</pre>
<p>
or this will boot the 4th partition on the first disk:
</p>
<pre>
boot: <i>4/vmlinux root=/dev/hda4</i>
</pre>
</body>
</section>

<section>
<title>CDROM</title>
<body>
<note>Booting from CDROM is the easiest and preferred method.</note>
<p>
Please try to use a download mirror if possible. ISO images are
extremely big.  Get the latest Gentoo ISO image from 
<uri>http://www.ibiblio.org/pub/Linux/distributions/gentoo/releases/1.1a/</uri>
and use cdrecord to burn it to your CD writer.  Boot the CD from
the ok prompt and choose the ramdisk option:
</p>
<pre>
ok <i>boot cdrom</i>
SILO:
...
boot: <i>ramdisk</i>
</pre>
</body>
</section>
</chapter>
<chapter>
<title>Part 3: Installing gentoo</title>
<section>
<body>
<p>
If you used netboot to boot your system and allowed it to layout
your disks then the target will be mounted as <path>/target</path>. In this case
you may want to put a symlink from <path>/mnt/gentoo</path> to <path>/target</path> as the
documentation assumes <path>/mnt/gentoo</path>. If not, you should mount a
partition as <path>/mnt/gentoo</path> and use it to install on.
</p>
<note>if you have used Debian to boot your system, then

  partition your hard disk(s)
  configure your network
  execute a shell
</note>
<note>
about NFS

You can also do NFS mounts for the /usr/portage and /usr/distfiles
dirs if needed.

When using an NFS mounted /usr/distfiles, make sure it is writable
and let the system know about it:

# export DISTDIR=/usr/distfiles
</note>
<note>
An emerge bootstrap uses about 500MB to compile and 150 MB when finished.
If you want a complete system that can compile other stage1's you'll need
at least a gigabyte. This is including the distfiles.
</note>
<note>
You can use wget to download the stage1 from the gentoo site.
Warning, debian netboot images do not carry a /usr/bin/bzip binary
so you should get a .tgz instead (if available).
</note>

<p>Now, let's quickly review the install process.  We'll create partitions, 
create our filesystems, and extract either a stage1, stage2 or stage3 tarball.
If we are using a stage1 or stage2 tarball, we will take the appropriate steps
to get our systems to stage3.  Once our systems are at stage3, we can configure
them (tweaking config files, installing a bootloader, etc) and boot them and
have a fully-functional Gentoo Linux system.  Depending on what stage of the build
process you're starting from, here's what's required for installation:</p>

<table>
<tr><th>stage tarball</th><th>requirements for installation</th></tr>
<tr><ti>1</ti><ti>partition/filesystem setup, emerge rsync, bootstrap, emerge system, emerge linux sources, final configuration</ti></tr>
<tr><ti>2</ti><ti>partition/filesystem setup, emerge rsync, emerge system, emerge linux sources, final configuration</ti></tr>
<tr><ti>3</ti><ti>partition/filesystem setup, emerge rsync (optional), final configuration</ti></tr>
</table>
<p>First step is to insert any needed modules. You may not need this as most of the standard sparc hardware is 
built into the kernel.To view a list of all available network card modules, type <c>ls
/lib/modules/*/kernel/drivers/net/*</c>.  To load a particular module,
type:</p>

<pre>
# <i>modprobe pcnet32</i>
	<comment>(replace pcnet32 with your NIC module)</comment>
</pre>

<p>Now, if you want to be able to access any SCSI hardware that wasn't detected
during the PCI autodetection process, you'll need to load the appropriate
modules from /lib/modules, again using <c>modprobe</c>:</p>

<pre>
# <i>modprobe aic7xxx</i>
# <i>modprobe sr_mod</i>
# <i>modprobe sd_mod</i>
</pre>

<p>Above, we modprobe the <c>aic7xxx</c> SCSI driver and then make sure that SCSI CD-ROM (<c>sr_mod</c>)
and disk (<c>sd_mod</c>) support is loaded.</p>

<note><c>hdparm</c> is included on the Gentoo iso.  
If any of your drives require tweaking, now
would be a good time to do so. On reasonably modern hardware
<c>hdparm -d 1 /dev/hdx</c> should be quite safe.  You can use 
<c>hdparm -v /dev/hdx</c> to check your drive's settings,
and <c>hdparm -t /dev/hdx</c> to check your drive's performance.</note>
</body>
</section>
<section>
<title>Configure installation networking</title>
<body>

<p>The Gentoo install lets you configure a working network, allowing you to use <c>ssh</c>, <c>scp</c> or <c>wget</c>
as needed before even beginning the installation process.  Even if you don't need to do these things now,
you should go ahead and set up networking now.  Once set up, Portage will be able to use your configured network
once you are inside the chroot environment (required for installing Gentoo Linux). </p>
</body>
</section>

<section>
<title>Manual DHCP configuration</title>
<body>
<p>
Network configuration is simple with DHCP; If your ISP is not using
DHCP, skip down to the static configuration section below.  
</p>
<pre caption="Network configuration with DHCP">
# <i>dhcpcd eth0</i> 
</pre>
<note>
Some ISPs require you to provide a hostname.  To do that,
add a <c>-h myhostname</c> flag to the dhcpcd command line above.
</note>
<p>If you receive <i>dhcpConfig</i> warnings, don't panic; the errors
are most likely cosmetic.  Skip down to Network testing below.</p>
</body>
</section>
<section>
<title>Manual Static configuration</title>
<body>
<p>
We need to setup just enough networking so that we can download
sources for the system build, as well as the required localhost interface.  Type in the following commands, replacing
$IFACE with your network interface (typically <c>eth0</c>), $IPNUM
with your IP address, $BCAST with your broadcast address, and $NMASK
with your network mask.  For the <c>route</c> command, replace 
$GTWAY with your default gateway.
</p>
<pre>
# <i>/sbin/ifconfig $IFACE $IPNUM broadcast $BCAST netmask $NMASK</i>
# <i>/sbin/route add -net default gw $GTWAY netmask 0.0.0.0 metric 1</i>
</pre>
<p>Now, it's time to create the <path>/etc/resolv.conf</path>
file so that name resolution (finding Web/FTP sites by name, rather than just by IP address) will work.</p>

<note>At the moment the only editors installed by default are <c>nano</c>, a
small and very easy-to-use visual editor.   Use <c>nano</c> with the <c>-w</c>
option to turn off automatic line-wrapping.
</note>

<p>Here's a template to follow for creating your /etc/resolv.conf file:
</p>
<pre caption="/etc/resolv.conf template">
domain mydomain.com
nameserver 10.0.0.1
nameserver 10.0.0.2
</pre>
<p>Replace <c>10.0.0.1</c> and <c>10.0.0.2</c> with the IP addresses of your
primary and secondary DNS servers respectively.</p>
</body>
</section>

<section>
<title>Proxy Configuration</title>
<body>
<p>If you are behind a proxy, it is necessary to configure your proxy before
you continue. We will export some variables to set up the proxy accordingly. </p>
<pre>
# <i>export http_proxy="machine.company.com:1234" </i>
# <i>export ftp_proxy="$http_proxy" </i>
# <i>export RSYNC_PROXY="$http_proxy" </i>
</pre>
</body>
</section>

<section>
<title>Network testing</title>
<body>
<p>Now that your network has been configured, the <c>/sbin/ifconfig -a</c> command should show (hopefully!) 
that your network card is working
(look for <e>UP</e> and <e>RUNNING</e> in the output).
</p>
<pre caption="/sbin/ifconfig for a working network card">
eth0      Link encap:Ethernet  HWaddr 00:50:BA:8F:61:7A
          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::50:ba8f:617a/10 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1498792 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1284980 errors:0 dropped:0 overruns:0 carrier:0
          collisions:1984 txqueuelen:100
          RX bytes:485691215 (463.1 Mb)  TX bytes:123951388 (118.2 Mb)
          Interrupt:11
</pre>
</body>
</section>
<section>
<title>Networking is go!</title>
<body>
<p>Networking should now be configured and useable.  You should be able to use the included
<c>ssh</c>, <c>scp</c> and <c>wget</c> commands to connect to other machines on your LAN or the Internet.</p>
</body>
</section>
</chapter>
<chapter>
<title>Set up partitions</title>
<section>
<body>
<p>Now that the kernel can see our network card and disk controllers, it's time
to set up disk partitions for Gentoo Linux.</p>

<note>This next step is for if you were able to boot from the CDROM. 
If you followed any other boot process skip the next 3 instructions.</note>

<p>
Then mount the cdrom and chroot into the right root dir for
your platform:
</p>
<pre>
# <i>mount -t iso9660 -o ro /dev/cdroms/cdrom0 /mnt</i>
# <i>chroot /mnt/root-\`uname -m\` bin/bash</i>
# <i>source /etc/profile</i>
</pre>

<p>From here you have a rescue environment which you can use to
fix your system. You can also partition disks here and mount
them for installation.
</p>

<note>
When using the CD-ROM, do (this is an example, don't just copy/paste!)
</note>
<pre>
# <i>fdisk /dev/hda</i>
# <i>mount -n /dev/hda2 /mnt/gentoo; cd /mnt/gentoo</i>
# <i>wget http://www.ibiblio.org/pub/Linux/distributions/gentoo/releases/build/1.4_rc1/sparc/stage1-sparc64-1.4_rc1.tbz2</i>
# <i>bunzip2 -c /stage1-sparc64-1.4_rc1.tbz2 | tar xvpf -</i>
# <i>cp /etc/resolv.conf etc/resolv.conf</i>
# <i>nano /etc/resolv.conf</i>
# <i>rm etc/make.profile</i>
</pre>

<note>The easiest way to create the Sun Disk Label is to use the <i>'s'</i> option in fdisk and then modify
the partitions to suit your needs.</note>

<note>After mounting your / to /mnt/gentoo go ahead and mount any others that you may have (i.e. /boot /usr /var)</note>
<p>
Now edit make.conf and comment out any other definitions for these:
</p>
<pre>
<i>
CHOST="sparc-unknown-linux-gnu"
CFLAGS="-mcpu=v8 -mtune=v9 -O2 -pipe"
CXXFLAGS="-O3 -pipe"
</i>
</pre>
<note>
For /etc/make.conf change :

SYNC="rsync://cvs.gentoo.org/gentoo-portage"

to

SYNC="rsync://rsync.gentoo.org/gentoo-portage"
</note>
<pre>
# <i>mount -o bind /proc proc</i>
# <i>mount -o bind /dev dev 	<codenote>Not absolutely necessary</codenote></i>
# <i>chroot /mnt/gentoo bin/bash</i>
# <i>env-update</i>
# <i>source /etc/profile</i>
# <i>emerge rsync</i>
# <i>rm etc/make.profile</i>
</pre>
<p>
Select the right platform, for sparc64:
</p>
<pre>
# <i>uname -m</i>
sparc64
# <i>ln -s ../usr/portage/profiles/default-sparc64-1.4 etc/make.profile</i>
</pre>
<p>
Or for sparc:
</p>
<pre>
# <i>uname -m</i>
sparc
# <i>ln -s ../usr/portage/profiles/default-sparc-1.4 etc/make.profile</i>
</pre>
<p>
If starting with stage 1, run:
</p>
<pre>
# <i>scripts/bootstrap.sh</i>
</pre>
<p>
This may take a while. You now have a stage 2 Gentoo.
</p><p>
Then:
</p>
<pre>
# <i>export CONFIG_PROTECT=""</i>
# <i>emerge system</i>
</pre>
<p>
You now have a stage 3 Gentoo.
</p>
</body>
</section>
</chapter>
<chapter>
<title>Part 4: Building a kernel</title>
<section>
<body>
<p>
On sparc64 platforms we'll need a compiler for 64bit targets:
</p>
<pre>
# <i>emerge egcs64-sparc</i>
</pre>
<p>
Next, get the Linux sources. At this time the Gentoo
sys-kernel/linux-sources package seems to contain some platform specific
patches which make it fail compilation. If you find out what's causing it
or better yet find a fix then please file a bug on our bugzilla.
</p><p>
So get the vanilla kernel and do the work yourself. Be careful, any
deviation from this will result in kernel compilation errors.
</p>

<pre>
# <i>cd /usr/src</i>
# <i>wget http://www.kernel.org/pub/linux/kernel/v2.4/linux-2.4.18.tar.bz2</i>
# <i>tar xvfj linux-2.4.18.tar.bz2</i>
# <i>mv linux linux-2.4.18</i>
# <i>ln -s linux-2.4.18 linux</i>
# <i>cd linux</i>
</pre>
<p>
Apply any kernel patches you want to apply at this time. Do not
apply the -ac series kernel patches on Sparc systems (they make the
system extremely unstable). XFS (the filesystem) is not supported
on Sparc for now.
</p>
<note>To fix: we may need additional fixes for Sparc platforms.</note>
<p>
Now get a .config file, I like tmpfs (a dynamic RAM filesystem, very
nice for machines with a lot of RAM) so I copy the file and enable
tmpfs like this. Well, you get the picture.
</p>
<pre>
# <i>sed -s 's/.*CONFIG_TMPFS.*/CONFIG_TMPFS=m/' \
	-s 's/.*CONFIG_DEVFS_FS.*/CONFIG_DEVFS_FS=y/' \
	-s 's/.*CONFIG_DEVFS_MOUNT.*/CONFIG_DEVFS_MOUNT=y/' \
	-s 's/.*CONFIG_EXT3_FS.*/CONFIG_EXT3_FS=y/' \
	arch/`uname -m`/defconfig \
	> .config</i>
</pre>
<p>
Or just copy the file:
</p>
<pre>
# <i>cp arch/`uname -m`/defconfig .config</i>
</pre>
<p>
The oldconfig step is required to set some links:
</p>
<pre>
# <i>make ARCH=sparc64 oldconfig dep clean vmlinux modules</i>
# <i>make modules_install</i>
</pre>
<p>
The kernel has to be smaller than 3.6 megabytes to "fit" in the memory
space SILO uses:
</p>
<pre>
# <i>ls -al vmlinux</i>
-rwxr-xr-x    1 root     root      3503075 Apr 20 21:42 vmlinux
</pre>
<p>
We need a straight GZIP for SILO.
</p>
<pre>
# <i>gzip -9 vmlinux</i>
# <i>cp vmlinux.gz /boot/vmlinuz-2.4.18</i>
# <i>ln /boot/vmlinuz-2.4.18 /vmlinuz</i>
</pre>
<p>
If you haven't setup SILO on this disk and you want to boot from it:
</p>
<pre>
# <i>emerge silo</i>
# <i>nano /etc/silo.conf</i>
# <i>silo</i>
</pre>
</body>
</section>
</chapter>
<chapter>
<title>Final Configs</title>
<section>
<title>Timezone</title>
<body>
<note>It is extremely important that this step is completed. Major clock drift
will be experienced if you do not set localtime correctly.
</note>

<p>At this point, you should have a stage3 system that's ready for final configuration.  We'll start this process by setting the timezone.  By setting the timezone before building the kernel we ensure that
users get reasonable <c>uname -a</c> output.</p>
<p>Look for your timezone (or GMT if you using Greenwich Mean Time) in <path>/usr/share/zoneinfo</path>.  Then, make a symbolic link by typing:
</p><pre>
# <i>ln -sf /usr/share/zoneinfo/path/to/timezonefile /etc/localtime</i>
</pre>
<p>You might also want to check <path>/etc/rc.conf</path> to make sure your timezone settings
are correct. </p>
</body>
</section>
<section>
<title>System Logger and Cron daemon</title>
<body>
<p>Now you need to choose a system
logger that you would like to install.  We offer sysklogd, which is the traditional set
of system logging daemons.  We also have msyslog and syslog-ng as well as metalog.  Power users seem
to gravitate away from sysklogd (not very good performance) and towards the
newer alternatives.  
If in doubt, you may want to try metalog, since it seems to be quite popular.
To merge your logger of choice, type <e>one</e> of the next four lines:
</p>

<pre>
# <i>emerge app-admin/sysklogd</i>
# <i>rc-update add sysklogd default</i>
<comment>or</comment>
# <i>emerge app-admin/syslog-ng</i>
# <i>rc-update add syslog-ng default</i>
<comment>or</comment>
# <i>emerge app-admin/metalog</i>
# <i>rc-update add metalog default</i>
<comment>or</comment>
# <i>emerge app-admin/msyslog</i>
# <i>rc-update add msyslog default</i>
</pre>
<warn>
In the case of syslog-ng you need to create 
<path>/etc/syslog-ng/syslog-ng.conf</path>.
See <path>/etc/syslog-ng</path> 
for a sample configuration file.
</warn>
<impo>
Metalog flushes output to the disk in blocks, so messages aren't immediately recorded into
the system logs.  If you are trying to debug a daemon, this performance-enhancing behavior is less than helpful.  When your
Gentoo Linux system is up and running, you can send
metalog a USR1 signal to temporarily turn off this message buffering (meaning that 
<i>tail -f <path>/var/log/everything/current</path></i> will now work 
in real time, as expected), 
and a USR2 signal to turn buffering back on
again. 
</impo>
<p>Now, you may optionally choose a cron package that you'd like to use.  Right now, we offer dcron, fcron and vcron.
If you don't know which one to choose, you might as well grab vcron.  They can be installed as follows:</p>
<pre>
# <i>emerge sys-apps/dcron</i>
# <i>crontab /etc/crontab</i>
<comment>or</comment>
# <i>emerge sys-apps/fcron</i>
# <i>crontab /etc/crontab</i>
<comment>or</comment>
# <i>emerge sys-apps/vcron</i>
<comment>Don't forget to add your *cron to the proper init level. </comment>
# <i>rc-update add *cron default </i>
</pre>
<p>For more information how how cron works under Gentoo Linux, see <uri link="http://lists.gentoo.org/pipermail/gentoo-announce/2002-April/000151.html">this announcement</uri>.</p>
<p>For more information on starting programs and daemons at startup, see the <uri link="/doc/rc-scripts.html">rc-script guide</uri>. </p>
</body>
</section>
<section>
<title>/etc/fstab</title>
<body>
<p>Your Gentoo Linux system is almost ready for use.  All we need to do now is configure
a few important system files and install the GRUB boot loader. 
The first file we need to
configure is <path>/etc/fstab</path>.  Remember that you should use
the <c>notail</c> option for your boot partition if you chose to create a ReiserFS filesystem on it.
Remember to specify <c>ext2</c>, <c>ext3</c> or <c>reiserfs</c> filesystem types as appropriate.</p>
<p>Use something like the <path>/etc/fstab</path> listed below, but of course be sure to replace "BOOT",
"ROOT" and "SWAP" with the actual block devices you are using (such as <c>hda1</c>, etc.)</p>
<pre>
<comment>
# /etc/fstab: static file system information.
#
# noatime turns of atimes for increased performance (atimes normally aren't
# needed; notail increases performance of ReiserFS (at the expense of storage
# efficiency).  It's safe to drop the noatime options if you want and to 
# switch between notail and tail freely.

# &lt;fs&gt;           &lt;mountpoint&gt;   &lt;type&gt;   &lt;opts&gt;          &lt;dump/pass&gt;

# NOTE: If your BOOT partition is ReiserFS, add the notail option to opts.
</comment>
/dev/BOOT           /boot       ext2	 noauto,noatime	 1 2
/dev/ROOT           /           ext3	 noatime         0 1
/dev/SWAP           none        swap	 sw              0 0
/dev/cdroms/cdrom0  /mnt/cdrom  iso9660	 noauto,ro       0 0
proc                /proc       proc	 defaults        0 0
</pre>

<warn>Please notice that <i>/boot</i> is NOT mounted at boottime. This is to protect the data in <i>/boot</i> from
corruption. If you need to access <i>/boot</i>, please mount it!
</warn>

</body>
</section>
<section>
<title>Set the root password</title>
<body>
<p>Before you forget, set the root password by typing:</p>
<pre>
# <i>passwd</i>
</pre>
</body>
</section>
<section>
<title>/etc/hostname</title>
<body>
<p>Edit this file so that it contains your fully-qualified domain name on a single line, i.e. <c>mymachine.mydomain.com</c>.
<pre>
# <i>echo mymachine.mydomain.com > /etc/hostname</i>
</pre>
</p>
</body>
</section>

<section>
<title>/etc/hosts</title>
<body>
<p>This file contains a list of ip addresses and their associated hostnames.  It's used by the system to resolve the IP addresses
of any hostnames that may not be in your nameservers.  Here's a template for this file:
</p><pre>
127.0.0.1      localhost
<comment># the next line contains your IP for your local LAN, and your associated machine name</comment>
192.168.1.1    mymachine.mydomain.com	mymachine
</pre>

<note>If you are on a DHCP network, it might be helpful to set <i>localhost</i> to your machine's
actual hostname. This will help GNOME and many other programs in name resolution.
</note>

</body>
</section>

<section>
<title>Final network configuration</title>
<body>
<p>
Add the names of any modules that are necessary for the proper functioning of your system to 
<path>/etc/modules.autoload</path> file (you can also add any options you
need to the same line.) When Gentoo Linux boots, these modules will be automatically
loaded.  Of particular importance is your ethernet card module, if you happened to compile
it as a module:
</p>
<pre caption="/etc/modules.autoload">
3c59x
</pre>
<p>Edit the <path>/etc/conf.d/net</path> script to get your network configured for your
first boot:
</p>
<pre>
# <i>nano -w /etc/conf.d/net</i>
# <i>rc-update add net.eth0 default</i>
</pre>
<p>
If you have multiple network cards you need to create additional <path>net.eth<comment>x</comment></path>
scripts for each one (<comment>x</comment> = 1, 2, ...):
</p>
<pre caption="Multiple network interfaces">
# <i>cd /etc/init.d</i>
# <i>cp net.eth0 net.eth<comment>x</comment></i>
# <i>rc-update add net.eth<comment>x</comment> default</i>
</pre>

</body>
</section>

<section>
<title>configure basic settings (including the international keymap setting)</title>
<body>
<pre caption="basic configuration">
# <i>nano -w /etc/rc.conf</i>
</pre>
<p>
Follow the directions in the file to configure the basic settings.  
All users will want to make sure that <c>CLOCK</c> is set to his/her
liking.  International keyboard users will want to set the <c>KEYMAP</c>
variable (browse <path>/usr/share/keymaps</path> to see the various
possibilities).
</p>
</body>
</section>

<section>
<title>Harddrive settings (hdparm)</title>
<body>
<p>
Add your <i>hdparm</i> tweaks to
 to <path>/etc/conf.d/local.start</path>,
so that they are initialized at every boot.
</p>
<pre>
# <i>nano -w /etc/conf.d/local.start</i>
</pre>
<pre caption="add hdparm tweak to /etc/conf.d/local.start">
# This is a good place to load any misc.
# programs on startup ( 1>&amp;2 )

# turn on DMA on both harddrives
hdparm -d 1 /dev/hda
hdparm -d 1 /dev/hdb
</pre>
</body>
</section>
</chapter>
<chapter>
<title>Grand Finale!</title>
<section>
<body>
<p>Congratulations! You have just completed your install of Gentoo Linux on your
Sparc. We welcome any comments or suggestions that you may have to help us better
our Sparc port. Please sign up for the gentoo-sparc mailing list and drop us a line.
Thank You for taking the time to install.</p>

<p>You are now at the point where you can do one of a few things.
Either unmount everything and reboot to start installing ebuilds or you can start installing them now.</p>
</body>
</section>
</chapter>

</guide>
