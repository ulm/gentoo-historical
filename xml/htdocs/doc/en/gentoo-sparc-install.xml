<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/gentoo-sparc-install.xml,v 1.28 2004/02/03 12:33:43 swift Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/gentoo-sparc-install.xml">
<title>Gentoo SPARC/SPARC64 Linux Installation Guide</title>
<author title="Maintainer">
<mail link="blademan@gentoo.org">Joe Kallar</mail>
</author>
<author title="Editor">
<mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Editor">
<mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>
<author title="Editor">
<mail link="klasiakhl@gentoo.org">Zack Gilburd</mail>
</author>


<abstract>
This is a guide for installing Gentoo Linux on a Sun SPARC based 
machine. If you find errors or omissions please email the maintainer 
or an editor.
</abstract>

<license/>

<version>0.4.14</version>

<date>February 3, 2004</date>

<chapter>
<title>About the Install</title>

<section>
<body>
<p>
Gentoo Linux can be installed using one of three "stage" tarball files.
The one you choose depends on how much of the system you want to compile
yourself. The stage1 tarball is used when you want to bootstrap and 
build the entire system from scratch. The stage2 tarball is used for 
building the entire system from a bootstrapped state. The stage3 tarball 
already contains a basic Gentoo Linux system.
</p>

<p>
<b>So, should you choose to start from a stage1, stage2, or stage3 
tarball?</b> Starting from a stage1 allows you to have total control 
over the optimization settings and optional build-time functionality 
that is initially enabled on your system. This makes stage1 installs 
good for power users who know what they are doing. Stage2 installs allow 
you to skip the bootstrap process, and doing this is fine if you are 
happy with the optimization settings that we chose for your particular 
stage2 tarball. Choosing to go with a stage3 allows for the fastest 
install of Gentoo Linux, but also means that your base system will have 
the optimization settings that we chose for you. <b>If you're installing 
Gentoo Linux for the first time, consider using a stage3 tarball for 
installation.</b>
</p>

<impo>
If you encounter a problem with any part of the install and wish to 
report it as a bug, report it to <uri>http://bugs.gentoo.org</uri>. 
If the bug needs to be sent upstream to the original software developers 
(e.g. the KDE team) the <e>Gentoo Linux developers</e> will take care of 
that for you.
</impo>

<p>
Now, let us quickly review the install process. First, we will boot a 
LiveCD. After getting a root prompt, we will create partitions, create 
our filesystems, and extract either a stage1, stage2 or stage3 tarball. 
If we are using a stage1 or stage2 tarball, we will take the appropriate 
steps to get our system to stage3. Once our system is at stage3, we can 
configure it (customize configuration files, install a boot loader, etc) 
and boot it and have a fully functional Gentoo Linux system. Depending on 
what stage of the build process you're starting from, here is what is 
required for installation:
</p>

<table>

<tr>
<th>stage tarball</th>
<th>requirements for installation</th>
</tr>

<tr>
<ti>1</ti>
<ti>bootstrap + stage 2 steps</ti>
</tr>

<tr>
<ti>2</ti>
<ti>emerge system, emerge kernel sources + stage 3 steps</ti>
</tr>

<tr>
<ti>3</ti>
<ti>partition/filesystem setup, emerge sync, final configuration</ti>
</tr>

</table>

</body>
</section>
</chapter>

<chapter>
<title>Hardware Requirements</title>

<section>
<body>
<p>
Gentoo SPARC supports most of the hardware supported by the UltraLinux 
project <uri>http://www.ultralinux.org/faq.html#s_2</uri>. Boot images 
typically have SMP disabled in order to reduce the kernel size.
</p>

<warn>
Many of these platforms have not been tested. Development is done by a 
handful of people. Reports of (non-)working installations/platforms are 
welcome on our mailing lists.
</warn>

</body>
</section>

<section>
<title>Sun Open Boot Prom (OBP)</title>
<body>

<p>
Sun OBP must be version 4.5.9 or below. Linux is not supported on 
versions 4.6.0 and higher. Also, Linux does not work on OBP version 
4.10.x.
</p>

<warn>
It is <e>highly</e> recommended that Sun Blade 100 users do <e>not</e> 
upgrade their OBP to any version above 4.5.9, as this will lead to 
unexpected behavior with the Linux Kernel and most likely will not boot.
</warn>

<impo>
The Sun Blade 150, out of the box, has an incompatible OBP. The Sun Blade 
150 cannot downgrade the OBP, and therefore is not supported by Linux at 
this time. Attempting to downgrade the OBP will result in a dead board.
</impo>

</body>
</section>

<section>
<title>Space Requirements</title>

<body>
<p>
A typical install of Gentoo SPARC uses about 500-1000 MB. Gentoo SPARC 
itself uses about 450 MB for a complete bootstrap. This is reduced to 
about 150 MB after building is complete. You probably don't want to make
your root partition smaller than 1 Gigabyte if you use only one 
partition.
</p>

</body>
</section>

<section>
<title>Kernel</title>
<body>

<p>
Always use a 64 bit kernel on a 64 bit machine. This includes Ultra 1, 2, 
5, 10, 30, 60, and 80, the SunBlade series, E250/E450, E4*00, E6*00, E10K
and StarFire platforms. The <c>uname -m</c> output of these machines is 
"sparc64" or "sun4u".
</p>

<p>
Always use 32 bit kernels on 32 bit platforms (sun4c, sun4d or sun4m -- 
sun4 is currently unsupported). These include the IPC/IPX, SPARCStations, 
etc. The <c>uname -m</c> output should be one of the following: "sparc", 
"sun4c", "sun4d" or "sun4m".
</p>

<p>
Currently we use the ARCH environment variable specified in 
<path>/etc/make.profile/make.defaults</path> to determine the kernel 
architecture to build. This is subject to change. It will probably change
to a USE switch such as <c>arch=sparc64</c>.
</p>

<!--
<p>Stage 1 builds that are made on 64 bit machines should work fine on SPARC32 machines. The same goes for stage2 I think (not tested). I'll try it out.</p>
-->

<note>
SPARC32 support is extremely limited and not entirely supported at this 
time.
</note>

<note>
Some kernels have trouble booting with large amounts of memory. Try 
removing some memory, or try a more recent image.
</note>

<pre caption="Sample uname -m output">
# <i>uname -m</i>
sparc64
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Booting</title>

<section>
<title>CDROM</title>
<body>

<note>
Booting from CDROM is the easiest and preferred method.
</note>

<p>
ISO images are extremely large. Please be kind and use a download
<uri link="http://www.gentoo.org/main/en/mirrors.xml">mirror</uri>.
The latest LiveCD images are found for each platform in the <path>/releases/1.4_rc4/sparc</path> path.</p>

<p>
Boot the CD, and choose the "gentoo" option:
</p>

<pre caption="SILO Boot CDROM">
ok <i>boot cdrom</i>
SILO: <codenote>Press TAB. This will list the kernels that you can boot from the CDROM.</codenote>
...
boot: <i>gentoo</i>
</pre>

<note>
The gentoo-smp kernel on the SPARC64 CDROM does not currently work.
</note>

<p>
Skip down to <uri link="#doc_chap4">Logging into the System</uri>.
</p>

</body>
</section>

<section>
<title>Existing Linux system</title>

<body>

<p>
Using an existing Linux system already on the machine's hard drive is 
the easiest method. This will jumpstart you with a complete Unix 
environment and a working network connection. In this case, boot into 
your Linux system as normal, and then mount the destination partition 
at <path>/mnt/gentoo</path> and skip to <uri link="#doc_chap10">Stage 
tarballs and chroot</uri>.
</p>

</body>
</section>

<section>
<title>Existing SILO</title>

<body>

<p>
You can use your previously installed SILO to boot (press TAB once the 
SILO: appears). Of course this means you won't be able to load kernel 
modules but that might not be a problem as the default SPARC kernel 
configs enable most SPARC hardware drivers by default. You could use 
your already installed Linux SPARC machine to compile a kernel with 
all your drivers compiled in statically.
</p>

<pre caption="SILO Boot Prompt">
ok <i>boot</i>
SILO: <codenote>Press TAB. This will list the kernels that you can boot from the existing SILO.</codenote>
...
boot: <i>linux</i>
</pre>

<p>
Or try this to boot the 4th partition on the first disk:
</p>

<pre caption="Booting the 4th partition">
boot: <i>4/vmlinux root=/dev/hda4</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Logging into the System</title>
<section>
<body>

<p>
Log into the system as follows. A password is not needed.
</p>

<pre caption="System login prompt">
gentoo login : <i>root</i>
password: <comment>Press (enter) here. No password is necessary.</comment>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Load Kernel Modules</title>

<section>
<body>

<p>
First step is to insert any needed modules. You may not need this as 
most of the standard SPARC hardware is built into the kernel. To view 
a list of all available network card modules, type <c>ls 
/lib/modules/*/kernel/drivers/net/*</c>. To load a particular module, 
type:
</p>

<pre caption="PCI Modules Configuration">
# <i>modprobe pcnet32</i>
<comment>(replace pcnet32 with your NIC module)</comment>
</pre>

<p>
Now, if you want to be able to access any SCSI hardware that wasn't 
detected during the PCI auto detection process, you'll need to load 
the appropriate modules from <path>/lib/modules</path>, again using 
<c>modprobe</c>:
</p>

<pre caption="Loading SCSI Modules">
# <i>modprobe aic7xxx</i>
<comment>(replace aic7xxx with your SCSI adapter module)</comment>
# <i>modprobe sr_mod</i>
<comment>(sd_mod is the module for SCSI CD-ROM support)</comment>
# <i>modprobe sd_mod</i>
<comment>(sd_mod is the module for SCSI disk support)</comment>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Configure installation networking</title>
<section>
<body>

<p>
The Gentoo install lets you configure a working network, allowing you to 
use <c>ssh</c>, <c>scp</c> or <c>wget</c> as needed before even beginning
the installation process. Even if you don't need to do these things now, 
you should go ahead and set up networking anyway. Once set up, Portage 
will be able to use your configured network once you are inside the 
chroot environment (required for installing Gentoo Linux).
</p>

</body>
</section>

<section>
<title>DHCP configuration</title>
<body>

<p>
Network configuration is simple with DHCP; If your ISP is not using 
DHCP, skip down to the static configuration section below.
</p>

<pre caption="Network configuration with DHCP">
# <i>dhcpcd eth0</i>
</pre>

<note>
Some ISPs require you to provide a hostname. To do that, add a <c>-h 
myhostname</c> flag to the dhcpcd command line above.
</note>

<p>
If you receive <c>dhcpConfig</c> warnings, don't panic; the errors are 
most likely cosmetic. Skip down to <uri link="#doc_chap6_sect5">Network 
Testing</uri>.
</p>

</body>
</section>

<section>
<title>Manual Static configuration</title>

<body>

<p>We need to setup just enough networking so that we can download 
sources for the system build, as well as the required localhost 
interface. Type in the following commands, replacing $IFACE with your 
network interface (typically <c>eth0</c>), $IPNUM with your IP address, 
$BCAST with your broadcast address, and $NMASK with your network mask. 
For the <c>route</c> command, replace $GTWAY with your default gateway.
</p>

<pre caption="Static network configuration">
# <i>/sbin/ifconfig $IFACE $IPNUM broadcast $BCAST netmask $NMASK</i>
# <i>/sbin/route add -net default gw $GTWAY netmask 0.0.0.0 metric 1</i>
</pre>

<p>
Now, it's time to create the <path>/etc/resolv.conf</path> file so that 
name resolution (finding Web/FTP sites by name, rather than just by IP 
address) will work.
</p>

<note>
At the moment the only editors installed by default are <c>nano</c>, a 
small and very easy-to-use visual editor, and the traditional <c>vi</c>. 
Use <c>nano</c> with the <c>-w</c> option to turn off automatic 
line-wrapping.
</note>

<p>
Here's a template to follow for creating your 
<path>/etc/resolv.conf</path> file:
</p>

<pre caption="/etc/resolv.conf template">
domain mydomain.com
nameserver 10.0.0.1
nameserver 10.0.0.2
</pre>

<p>
Replace <c>10.0.0.1</c> and <c>10.0.0.2</c> with the IP addresses of 
your primary and secondary DNS servers respectively.
</p>

</body>
</section>

<section>
<title>Proxy Configuration</title>

<body>

<p>
If you are behind a proxy, it is necessary to configure your proxy 
before you continue. We will export some variables to set up the proxy 
accordingly.
</p>

<pre caption="Proxy configuration">
<codenote>If the proxy restricts HTTP traffic:</codenote>
# <i>export http_proxy="machine.company.com:1234" </i>
<codenote>If the proxy restricts FTP traffic:</codenote>
# <i>export ftp_proxy="machine.company.com:1234" </i>
<codenote>If the proxy restricts RSYNC traffic:</codenote>
# <i>export RSYNC_PROXY="machine.company.com:1234" </i>
</pre>

<note>
If your proxy requires authentification, use a construct like
<c>http://username:password@machine.company.com</c> (note the added
&quot;username:password@&quot;).
</note>

</body>
</section>

<section>
<title>Network testing</title>
<body>

<p>
Now that your network has been configured, the <c>/sbin/ifconfig -a</c> 
command should show (hopefully) that your network card is working (look 
for <e>UP</e> and <e>RUNNING</e> in the output).
</p>

<pre caption="/sbin/ifconfig for a working network card">
eth0      Link encap:Ethernet  HWaddr 00:50:BA:8F:61:7A
inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
inet6 addr: fe80::50:ba8f:617a/10 Scope:Link
UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
RX packets:1498792 errors:0 dropped:0 overruns:0 frame:0
TX packets:1284980 errors:0 dropped:0 overruns:0 carrier:0
collisions:1984 txqueuelen:100
RX bytes:485691215 (463.1 Mb)  TX bytes:123951388 (118.2 Mb)
Interrupt:11
</pre>

<p>
You may want to also try pinging your ISP's DNS server (found in 
<path>/etc/resolv.conf</path>), and a Web site of choice, just to make 
sure that your packets are reaching the net, DNS name resolution is 
working correctly, etc.
</p>

<pre caption="Further Network Testing">
# <i>ping -c 3 www.yahoo.com </i>
</pre>

</body>
</section>

<section>
<title>Networking is go!</title>

<body>
<p>
Networking should now be configured and usable. You should be able to 
use the included <c>ssh</c>, <c>scp</c> and <c>wget</c> commands to 
connect to other machines on your LAN or the Internet.
</p>

</body>
</section>

<section>
<title>I don't have networking!</title>
<body>

<p>
If you don't have networking there is some help in the <uri link="http://forums.gentoo.org/">Gentoo Forums</uri>. Some useful links 
can be found at <uri>http://forums.gentoo.org/viewforum.php?f=27</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Setting your system's date and time</title>

<section>
<body>

<p>
Now you need to set your system's date and time. You can do this using
the <c>date</c> command.
</p>

<pre caption="Setting your system's date">
# <i>date</i>
Thu Feb 27 09:04:42 CST 2003
<comment>(If your date is wrong, set your date with this next command)</comment>
# <i>date 022709042003</i>
<comment>(date MMDDhhmmCCYY)</comment>
</pre>
</body>
</section>
</chapter>

<chapter>
<title>Filesystems, partitions and block devices</title>

<section>
<title>Introduction to block devices</title>

<body>

<p>
In this section, we'll take a good look at disk-oriented aspects of 
Gentoo Linux and Linux in general, including Linux filesystems, 
partitions and block devices. Then, once you're familiar with the ins 
and outs of disks and filesystems, you'll be guided through the process 
of setting up partitions and filesystems for your Gentoo Linux install.
</p>

<p>
To begin, I'll introduce "block devices". The most famous block device 
is probably the one that represents the first IDE drive in a Linux 
system:
</p>

<pre caption="/dev/hda, the block device representing the primary master IDE drive in your system">
/dev/hda
</pre>

<p>
If your system uses SCSI drives, then your first hard drive will be:
</p>

<pre caption="/dev/sda, the block device representing the first logical SCSI drive in your system">
/dev/sda
</pre>

<p>
The block devices above represent an <e>abstract</e> interface to the 
disk. User programs can use these block devices to interact with your 
disk without worrying about whether your drivers are IDE, SCSI or 
something else. The program can simply address the storage on the disk 
as a bunch of contiguous, randomly-accessible 512-byte blocks.
</p>

</body>
</section>

<section>
<title>Partitions and fdisk</title>
<body>

<p>
Under Linux, we create filesystems by using a special command called 
<c>mkfs</c> (or <c>mke2fs</c>, <c>mkreiserfs</c>, etc) specifying a 
particular block device as a command-line argument.
</p>

<p>
However, although it is theoretically possible to use a "whole disk" 
block device (one that represents the <e>entire</e> disk) like 
<path>/dev/hda</path> or <path>/dev/sda</path> to house a single 
filesystem, this is almost never done in practice. Instead, full disk 
block devices are split up into smaller, more manageable block devices 
called "partitions". Partitions are created using a tool called 
<c>fdisk</c>, which is used to create and edit the partition table 
that's stored on each disk. The partition table defines exactly how to 
split up the full disk.
</p>

<p>
We can take a look at a disk's partition table by running <c>fdisk</c>, 
specifying a block device that represents a full disk as an argument:
</p>

<note>
Alternate interfaces to the disk's partition table include 
<c>cfdisk</c>, <c>parted</c> and <c>partimage</c>. We recommend 
<c>fdisk</c> because it's more powerfull and well known in the 
Unix/Linux world.
</note>

<pre caption="Starting up fdisk">
# <i>fdisk /dev/hda</i>
<comment>or</comment>
# <i>fdisk /dev/sda</i>
</pre>

<impo>
<b>Note that you should <e>not</e> save or make any changes to a 
disk's partition table if any of its partitions contain filesystems 
that are in use or contain important data. Doing so will generally cause 
data on the disk to be lost.</b>
</impo>

<p>
Once in <c>fdisk</c>, you'll be greeted with a prompt that looks like this:
</p>

<pre caption="The fdisk prompt">
Command (m for help): 
</pre>

<p>
Type <c>p</c> to display your disk's current partition configuration:
</p>

<pre caption="An example partition configuration">
Command (m for help): <i>p</i>

Disk /dev/hda: 240 heads, 63 sectors, 2184 cylinders
Units = cylinders of 15120 * 512 bytes

Device    Flag    Start       End    Blocks   Id  System
/dev/hda1             1        14    105808+  83  Linux
/dev/hda2            15        49    264600   82  Linux swap
/dev/hda3             0        70    519168    5  Whole Disk
/dev/hda4            50        70    158760   83  Linux

Command (m for help): 
</pre>

<p>
This particular disk is configured to house two Linux filesystems (each 
with a corresponding partition listed as "Linux") as well as a swap 
partition (listed as "Linux swap").
</p>

<p>
Notice the name of the corresponding partition block devices on the left
hand side, starting with <path>/dev/hda1</path> and going up to 
<path>/dev/hda3</path>. Also, notice that each partition has an "Id", 
also called a "partition type". Whenever you create a new partition, you
should ensure that the partition type is set correctly. '83' is the 
correct partition type for partitions that will be housing Linux 
filesystems, '82' is the correct partition type for Linux swap 
partitions and 'fd' is the recommended partition type for Software RAID 
partitions. You set the partition type using the <c>t</c> option in 
<c>fdisk</c>. The Linux kernel uses the partition type setting to 
auto-detect filesystems and swap devices on the disk at boot-time.
</p>

</body>
</section>

<section>
<title>Using fdisk to set up partitions</title>

<body>

<p>
Now that you've had your introduction to the way disk partitioning is 
done under Linux, it's time to walk you through the process of setting up 
disk partitions for your Gentoo Linux installation. After we walk you 
through the process of creating partitions on your disk, your partition 
configuration will look like this:
</p>

<pre caption="The partition configuration that you will have after following these steps">
Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Flag    Start       End    Blocks   Id  System
/dev/hda1   *         1        14    105808+  83  Linux
/dev/hda2            15        81    506520   82  Linux swap
/dev/hda3             0      3876  29302528    5  Whole Disk
/dev/hda4            82      3876  28690200   83  Linux

Command (m for help):
</pre>

<p>
In our suggested "newbie" partition configuration, we have three 
partitions. The first one (<path>/dev/hda1</path>) at the beginning of 
the disk is a small partition called a boot partition. The boot 
partition's purpose is to hold all the critical data related to booting 
-- boot loader information as well as your Linux kernel(s). The boot 
partition gives us a safe place to store everything related to booting 
Linux. During normal day-to-day Gentoo Linux use, your boot partition 
should remain <e>unmounted</e> for safety. If you are setting up a SCSI 
system, your boot partition will likely end up being 
<path>/dev/sda1</path>.
</p>

<warn>
The boot partition that SILO will use to boot <e>must be</e> ext2 or 
ext3. SILO will not read any other type of filesystem. If you make a 
separate <path>/boot</path> partition, then this applies only to 
<path>/boot</path>, all other partitions can be of any type of your 
choosing. If you do <e>not</e> make a separate <path>/boot</path>, then 
your / or root filesystem much be of type ext2 or ext3. If the boot 
partition is not ext2 or ext3, your system <e>will not boot</e> after 
installation.
</warn>

<note>
For SPARC32, in order to avoid problems while booting, it is recommended
to place your <path>/boot</path> partition within 1GB from the start of the disk.
</note>

<p>
The second partition (<path>/dev/hda2</path>) is used to for swap space. 
The kernel uses swap space as virtual memory when RAM becomes low. This 
partition, relatively speaking, isn't very big either, typically 
somewhere around 512MB. If you're setting up a SCSI system, this 
partition will likely end up being called <path>/dev/sda2</path>.
</p>

<p>
The fourth partition (<path>/dev/hda4</path>) is quite large and takes 
up the rest of the disk. This partition is called our "root" partition 
and will be used to store your main filesystem that houses Gentoo Linux 
itself. On a SCSI system, this partition would likely end up being 
<path>/dev/sda4</path>.
</p>

<p>
Before we partition the disk, here's a quick technical overview of the 
suggested partition and filesystem configuration to use when installing 
Gentoo Linux:
</p>

<table>

<tr>
<th>Partition</th>
<th>Size</th>
<th>Type</th>
<th>example device</th>
</tr>

<tr>
<ti>boot partition, containing kernel(s) and boot information</ti>
<ti>32 Megabytes</ti>
<ti>
ext2 or ext3 mandatory. SILO, the bootloader for SPARC will only read 
ext2 and ext3. Other filesystems are not supported. If you will be using 
ext3, you must add the size of the journal to the partition size; in that 
case 64MB is recommended.
</ti>
<ti>/dev/hda1</ti>
</tr>

<tr>
<ti>swap partition (no longer a 128 Megabyte limit, now 2GB)</ti>
<ti>Generally, twice (2x) the size of the physical RAM in your system.</ti>
<ti>swap</ti>
<ti>/dev/hda2</ti>
</tr>

<tr>
<ti>Sun Disk Label</ti>
<ti>0, although it will be displayed as the whole disk.</ti>
<ti>Whole disk</ti>
<ti>/dev/hda3 (requires the 3rd partition)</ti>
</tr>

<tr>
<ti>root partition (/), containing main filesystem (/usr, /home, etc)</ti>
<ti>&gt;=1.5 Gigabytes</ti>
<ti>ext3 recommended, ReiserFS, ext2</ti>
<ti>/dev/hda4</ti>
</tr>

</table>

<p>
OK, now to create the partitions as in the example and table above. 
First, enter <c>fdisk</c> by typing <c>fdisk /dev/hda</c> or <c>fdisk 
/dev/sda</c>, depending on whether you're using IDE or SCSI. Then, 
type <c>p</c> to view your current partition configuration. Is there 
anything on the disk that you need to keep? If so, <b>stop now</b>. 
If you continue with these directions, <b>all existing data on your 
disk will be erased.</b>
</p>

<impo>
Following these instructions below will cause all prior data on your 
disk to <b>be erased</b>! If there is anything on your drive, please be 
sure that it is non-critical information that you don't mind losing. 
Also make sure that you <b>have selected the correct drive</b> so that 
you don't mistakenly wipe data from the wrong drive.
</impo>

<p>
Now, it's time to delete any existing partitions. To do this, type 
<c>d</c> and hit Enter. You will then be prompted for the partition 
number you would like to delete. To delete a pre-existing 
<path>/dev/hda1</path>, you would type:
</p>

<pre caption="Deleting a partition">
Command (m for help): <c>d</c>
Partition number (1-4): <c>1</c>
</pre>

<p>
The partition has been scheduled for deletion. It will no longer show 
up if you type <c>p</c>, but it will not be erased until your changes 
have been saved. If you made a mistake and want to abort without saving 
your changes, type <c>q</c> immediately and hit enter and your partition 
will not be deleted.
</p>

<!-- NOTE: This is not sufficient documentation to cover ATA Raid and I just
find it confusing, so I'm commenting it out (drobbins)
<note>If you are using RAID your partitions will be a little different.  You
will have the partitions like this: <path>/dev/ataraid/discX/partY</path> X are
the arrays you have made, so if you only have made 1 array, then it will be
disc0.Y is the partition number as in <path>/dev/hdaY</path> </note>
-->

<p>
Assuming that you want to wipe out all the partitions on your system, 
type <c>p</c> to print out a partition listing and then type <c>d</c>
and the number of the partition to delete it. Repeat the process for 
every partition and you'll end up with a partition table with nothing
in it:
</p>

<pre caption="An empty partition table">
Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Flag    Start       End    Blocks   Id  System

Command (m for help):
</pre>

<p>
Now that the in-memory partition table is empty, we're ready to create 
the Sun Disk Label partition. To do this, type <c>n</c> to create a new 
partition, then type <c>3</c> to create the partition. When prompted for
the first cylinder, hit enter. When prompted for the last cylinder, hit 
enter. After you've done this, type <c>t</c> to set the partition type, 
and then type in <c>5</c> to set the partition type to "Whole disk".
</p>

<pre caption="Steps to create our Sun Disk Label partition">
Command (m for help): <i>n</i>
Partition number (1-4): <i>3</i>
First cylinder (1-3876, default 0): <i>0</i>
Last cylinder or +size or +sizeM or +sizeK (1-3876, default 3876): <i>(press enter)</i>
Using default value 3876

Command (m for help): <i>t</i>
Partition number (1-8): <i>3</i>
Hex code (type L to list codes): <i>5</i>
</pre>

<p>
After completing these steps, typing <c>p</c> should display a partition 
table that looks similar to this:
</p>

<pre caption="Our Sun Disk Label partition has been created">
Command (m for help): <i>p</i>

Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Flag    Start       End    Blocks   Id  System
/dev/hda3             0      3876  29302528    5  Whole disk
</pre>

<p>
We're ready to create a boot partition. To do this, type <c>n</c> to 
create a new partition, then type <c>1</c> to create the partition. 
When prompted for the first cylinder, hit enter. When prompted for the 
last cylinder, type <c>+32M</c> to create a partition 32MB in size. You
can see output from these steps below:
</p>

<note>
Journaled filesystems require extra space for their journal. Default 
settings require about 33 Megabytes of space. Therefore, if you are 
using a journaled filesystem for <path>/boot</path>, you should type 
<c>+64M</c> when prompted for the last cylinder.
</note>

<pre caption="Steps to create our boot partition">
Command (m for help): <i>n</i>
Partition number (1-4): <i>1</i>
First cylinder (1-3876, default 1): <i>(press enter to accept the default)</i>
Using default value 1
Last cylinder or +size or +sizeM or +sizeK (1-3876, default 3876): +32M
</pre>

<p>
Now, when you type <c>p</c>, you should see the following partition 
printout:
</p>

<pre caption="Our first partition has been created">
Command (m for help): <i>p</i>

Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Flag    Start       End    Blocks   Id  System
/dev/hda1             1        14    105808+  83  Linux
/dev/hda3             0      3876  29302528    5  Whole disk
</pre>

<p>
Next, let's create the swap partition. To do this, type <c>n</c> to 
create a new partition, then <c>2</c> to create the second partition, 
<c>/dev/hda2</c> in our case. When prompted for the first cylinder, hit
enter. When prompted for the last cylinder, type <c>+512M</c> to create
a partition 512MB in size. After you've done this, type <c>t</c> to set
the partition type, and then type in <c>82</c> to set the partition type
to "Linux Swap". After completing these steps, typing <c>p</c> should 
display a partition table that looks similar to this:
</p>

<pre caption="Our swap partition has been created">
Command (m for help): <i>p</i>

Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Flag    Start       End    Blocks   Id  System
/dev/hda1             1        14    105808+  83  Linux
/dev/hda2            15        81    506520   82  Linux swap
/dev/hda3             0      3876  29302528    5  Whole disk
</pre>

<p>
Finally, let's create the root partition. To do this, type <c>n</c> to 
create a new partition, then type <c>4</c> to create the third partition, 
<c>/dev/hda4</c> in our case. When prompted for the first cylinder, hit 
enter. When prompted for the last cylinder, hit enter to create a 
partition that takes up the rest of the remaining space on your disk. 
After completing these steps, typing <c>p</c> should display a partition 
table that looks similar to this:
</p>

<pre caption="Our root partition has been created">
Command (m for help): <i>p</i>

Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Flag    Start       End    Blocks   Id  System
/dev/hda1             1        14    105808+  83  Linux
/dev/hda2            15        81    506520   82  Linux swap
/dev/hda3             0      3876  29302528    5  Whole disk
/dev/hda4            82      3876  28690200   83  Linux
</pre>


<p>
After you are satisfied with the partition table, type <c>w</c> to write 
the partition table to your disk and exit fdisk.
</p>

</body>
</section>

<section>
<title>Creating filesystems</title>

<body>
<warn>One should avoid using the JFS filesystem on SPARC64.</warn>

<p>
Now that the partitions have been created, it's time to set up 
filesystems on the boot and root partitions so that they can be 
mounted and used to store data. We will also configure the swap 
partition to serve as swap storage.
</p>

<p>
Gentoo Linux supports a variety of different types of filesystems; each 
type has its strengths and weaknesses and its own set of performance 
characteristics. Currently, we support the creation of ext2, ext3, XFS, 
JFS and ReiserFS filesystems. Ext3 is recommended for SPARC.
</p>

<p>
ext2 is the tried and true Linux filesystem but doesn't have metadata 
journaling, which means that routine ext2 filesystem checks at startup 
time can be quite time-consuming. There is now quite a selection of 
newer-generation <e>journaled</e> filesystems that can be checked for 
consistency very quickly and are thus generally preferred over their 
non-journaled counterparts. Journaled filesystems prevent long delays 
when you boot your system and your filesystem happens to be in an 
<e>inconsistent</e> state.
</p>

<p>
ext3 is the journaled version of the ext2 filesystem, providing metadata 
journaling for fast recovery in addition to other enhanced journaling 
modes like full data and ordered data journaling. ext3 is a very good 
and reliable filesystem. It offers generally decent performance under 
most conditions. Because it does not extensively employ the use of 
"trees" in its internal design, it doesn't scale very well, meaning 
that it is not an ideal choice for very large filesystems, or situations
where you will be handling very large files or large quantities of files
in a single directory. But when used within its design parameters, ext3 
is an excellent filesystem.
</p>

<p>
ReiserFS is a B*-tree based filesystem that has very good overall 
performance and greatly outperforms both ext2 and ext3 when dealing with 
small files (files less than 4k), often by a factor of 10x-15x. ReiserFS 
also scales extremely well and has metadata journaling. As of kernel 
2.4.18+, ReiserFS is now rock-solid and highly recommended for use both 
as a general-purpose filesystem and for extreme cases such as the 
creation of large filesystems, the use of many small files, very large 
files, and directories containing tens of thousands of files. ReiserFS 
is the filesystem we recommend by default for all non-boot partitions.
</p>

<p>
XFS is a filesystem with metadata journaling that is fully supported 
under Gentoo Linux's <path>xfs-sources</path> kernel. It comes with a 
robust feature-set and is optimized for scalability. We only recommend
using this filesystem on Linux systems with high-end SCSI and/or fibre 
channel storage and an uninterruptible power supply. Because XFS 
aggressively caches in-transit data in RAM, improperly designed programs 
(those that don't take proper precautions when writing files to disk, and
there are quite a few of them) can lose a good deal of data if the system
goes down unexpectedly.
</p>

<p>
JFS is IBM's own high performance journaling filesystem. It has recently 
become production-ready, and there hasn't been a sufficient track record 
to comment either positively nor negatively on its general stability at 
this point.
</p>

<p>
If you're looking for the most rugged journaling filesystem, use ext3. If 
you're looking for a good general-purpose high-performance filesystem with
journaling support, use ReiserFS; both ext3 and ReiserFS are mature, 
refined and recommended for general use.
</p>

<p>
Based on our example above, we will use the following commands to 
initialize all our partitions for use:
</p>

<pre caption="Initializing our partitions (example)">
# <i>mke2fs -j /dev/hda1</i>
# <i>mkswap /dev/hda2</i>
# <i>mke2fs -j /dev/hda4</i>
</pre>

<p>
We choose ext3 for our <path>/dev/hda1</path> and <path>/dev/hda4</path>
boot and root partition because it is a robust journaling filesystem 
supported by SILO, the SPARC bootloader. We used <c>mkswap</c> for our 
<path>/dev/hda2</path> swap partition -- the only choice. Now, go ahead 
and initialize your partitions.
</p>

<p>
For your reference, here are the various <c>mkfs</c>-like commands 
available during the installation process:
</p>

<p>
<c>mkswap</c> is the command that is used to initialize swap partitions:
</p>

<pre caption="Initializing Swap">
# <i>mkswap /dev/hda2</i>
</pre>

<p>
You can use the <c>mke2fs</c> command to create ext2 filesystems:
</p>

<pre caption="Creating an ext2 Filesystem">
# <i>mke2fs /dev/hda1</i>
</pre>

<p>
If you would like to use ext3, you can create ext3 filesystems using 
<c>mke2fs -j</c>:
</p>

<pre caption="Creating an ext3 Filesystem">
# <i>mke2fs -j /dev/hda4</i>
</pre>

<note>
You can find out more about using ext3 under Linux 2.4 at 
<uri>http://www.zip.com.au/~akpm/linux/ext3/ext3-usage.html</uri>.
</note>

</body>
</section>

<section>
<title>Experimental Filesystems</title>
<body>

<warn>
The information for the following filesystems is provided as is. We do 
not recommend their use on SPARC. Their use may result in data 
corruption and/or loss.
</warn>

<p>
To create ReiserFS filesystems, use the <c>mkreiserfs</c> command:
</p>

<pre caption="Creating a ReiserFS Filesystem">
# <i>mkreiserfs /dev/hda4</i>
</pre>

<p>
To create an XFS filesystem, use the <c>mkfs.xfs</c> command:
</p>

<pre caption="Creating a XFS Filesystem">
# <i>mkfs.xfs /dev/hda4</i>
</pre>

<note>
You may want to add a couple of additional flags to the <c>mkfs.xfs</c>
command: <c>-d agcount=3 -l size=32m</c>. The <c>-d agcount=3</c> 
command will lower the number of allocation groups. XFS will insist on 
using at least 1 allocation group per 4 GB of your partition, so, for 
example, if you have a 20 GB partition you will need a minimum agcount 
of 5. The <c>-l size=32m</c> command increases the journal size to 32 Mb, 
increasing performance.
</note>

<p>
To create JFS filesystems, use the <c>mkfs.jfs</c> command:
</p>

<pre caption="Creating a JFS Filesystem">
# <i>mkfs.jfs /dev/hda4</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Mount Partitions</title>

<section>
<body>

<p>
Now, we will activate our newly-initialized swap volume, since we may 
need the additional virtual memory that it provides later:
</p>

<pre caption="Activating Swap">
# <i>swapon /dev/hda2</i>
</pre>

<p>
Next, we will create the <path>/mnt/gentoo/boot</path> mount point, 
and we will mount our filesystems to the appropriate mount points. Once 
our boot and root filesystems are mounted, any files we copy or create inside 
<path>/mnt/gentoo</path> will be placed on our new filesystems. Note 
that if you are setting up Gentoo Linux with separate <path>/usr</path>
or <path>/var</path> filesystems, these would get mounted to 
<path>/mnt/gentoo/usr</path> and <path>/mnt/gentoo/var</path> respectively.
</p>

<pre caption="Creating Mount Points">
# <i>mount /dev/hda4 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/hda1 /mnt/gentoo/boot</i>
</pre>

<impo>
If you are having problems mounting your boot partition with ext2, try 
using <c>mount /dev/hXX /mnt/gentoo/boot -t ext2</c>
</impo>

</body>
</section>
</chapter>

<chapter>
<title>Stage tarballs and chroot</title>

<section>
<title>Selecting the desired stage tarball</title>

<body>

<p>
Now, you need to decide which one you would like to use as a basis for 
the install if you haven't already.
</p>

<p>
If you are using the "from scratch, build everything" install method, 
you will want to use the stage1 image. If you're using one of our bigger
CDs like the "3stages" ISO, you will also have a choice of a stage2 and 
stage3 image. These images allow you to save time at the expense of 
configurability (we've already chosen compiler optimizations and default 
USE variables for you). The stages on the CD are accessible at 
<path>/mnt/cdrom/gentoo</path>, and you can type <c>ls 
/mnt/cdrom/gentoo</c> to see what's available on your CD.
</p>

<p>
If you were able to boot from a CDROM, you can skip this section and 
move on to "Extracting the stage tarball" below.
</p>

<p>
If you need to perform an install using a stage tarball <e>without 
access</e> to a CD, you will need to download the stage using the 
following instructions.
</p>

<pre caption="Downloading Required Stages">
# <i>cd /mnt/gentoo</i>
<comment>Use the text-only web browser,<uri link="http://lynx.browser.org/">lynx</uri>, to get to the URL for your tarball:</comment>
<comment>For 32-bit SPARC:</comment>
# <i>lynx http://distro.ibiblio.org/pub/linux/distributions/gentoo/releases/1.4_rc4/sparc/sparc32/</i>
<comment>For 64-bit SPARC:</comment>
# <i>lynx http://distro.ibiblio.org/pub/linux/distributions/gentoo/releases/1.4_rc4/sparc/sparc64/</i>
<comment>This is just an example.</comment>
<comment>Please use a <uri link="http://www.gentoo.org/main/en/mirrors.xml">mirror</uri> near you.</comment>
<comment/>
<comment>Once in the directory, use <c>Up</c> and <c>Down</c> arrows keys to move through the page.</comment>
<comment>Use <c>Left</c> and <c>Right</c> arrows keys to go back and forward/select through a page.</comment>
<comment>Highlight the appropriate stage you want to download.</comment>
<comment>Press <c>d</c> or <c>Right</c> arrow which will initiate the download.</comment>
<comment>When the file download is complete, you will be asked to save the file.</comment>
<comment>Then press <c>q</c> to quit the browser</comment>
<comment/>
<comment><b>OR</b> use wget from the command line:</comment>
# <i>wget <comment>(Insert URL from above for the required stage tarball here.)</comment></i>
</pre>
</body>
</section>

<section>
<title>Extracting the stage tarball</title>

<body>

<p>
Now it is time to extract the compressed stage tarball of your choice to 
<path>/mnt/gentoo/</path>. Remember, you only need to unpack <b>only 
one</b> stage tarball, <b>either</b> a stage1, stage2 <b>or</b> stage3. 
So, if you wanted to perform a stage3 install of Gentoo, then you would 
just unpack the stage3 tarball. Unpack the stage tarball as follows:
</p>

<impo>
Be sure to use the <c>p</c> option with <c>tar</c>. Forgetting to do this
will cause certain files to have incorrect permissions.
</impo>

<pre caption="Unpacking the Stages">
<comment>Confirm that you are in the right directory</comment>
# <i>cd /mnt/gentoo</i>
<comment/>
<comment>Change "stage3" to "stage2" or "stage1" if you want to start from those stages instead.</comment>
# <i>tar -xvjpf /mnt/cdrom/gentoo/stage3-*.tar.bz2</i>
<comment/>
<comment>If you downloaded your stage tarball, use the following</comment>
<comment>(assuming you downloaded the stage to the current directory:</comment>
# <i>tar -xvjpf stage3-*.tar.bz2</i>
</pre>

<p>
If you downloaded your stage tarball to <path>/mnt/gentoo</path>, you can 
now delete it by typing <c>rm /mnt/gentoo/stage*.tar.bz2</c>.
</p>

</body>
</section>

<section>
<title>Entering the chroot</title>

<body>

<p>
Next, we will <c>chroot</c> over to the new Gentoo Linux build 
installation to "enter" the new Gentoo Linux system.
</p>

<note>
You may receive a notice during <c>env-update</c> stating that 
"<path>/etc/make.profile/make.defaults</path> isn't available." We will
resolve the problem with an <c>emerge sync</c> immediately afterwards.
</note>

<pre caption="Prepping and entering the chroot environment">
# <i>mount -t proc proc /mnt/gentoo/proc</i>
# <i>cp /etc/resolv.conf /mnt/gentoo/etc/resolv.conf</i>
<comment>The above copies your network settings</comment>
# <i>chroot /mnt/gentoo /bin/bash</i>
<comment>The above command CHanges ROOT. You are now "inside" your new installation.</comment>
# <i>env-update</i>
&gt;&gt;&gt; Regenerating /etc/ld.so.cache...
# <i>source /etc/profile</i>
<comment>(The above points your shell to the new paths and updated binaries.)</comment>
</pre>

<p>
After you execute these commands, you will be "inside" your new Gentoo 
Linux environment in <path>/mnt/gentoo</path>. We can perform the rest 
of the installation process inside the chroot.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Getting the Current Portage Tree using sync</title>

<section>
<body>

<p>
Now, you will need to run <c>emerge sync</c>. This command tells Portage
to download the most recent copy of the Gentoo Linux Portage tree. The 
Portage tree contains all the scripts (called ebuilds) used to build 
every package under Gentoo Linux. Once <c>emerge sync</c> completes, you 
will have a complete Portage tree in <path>/usr/portage</path>.
</p>

<pre caption="Updating Using sync">
# <i>emerge sync</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Setting Gentoo optimizations (make.conf)</title>

<section>
<body>

<p>
Now that you have a working copy of the Portage tree, it is time to 
customize the optimization and optional build-time settings to use on 
your Gentoo Linux system. Portage will use these settings when compiling
any programs for you. To do this, edit the file 
<path>/etc/make.conf</path>. In this file, you should set your <c>USE</c>
flags, which specify optional functionality that you would like to have 
built into packages if available; generally, the defaults (an 
<e>empty</e> or unset <c>USE</c> variable) are fine. More information on 
<c>USE</c> flags can be found <uri link="http://www.gentoo.org/doc/en/use-howto.xml">here</uri>. A complete 
list of current USE flags can be found <uri link="http://www.gentoo.org/dyn/use-index.xml">here</uri>.
</p>

<p>
You also should set appropriate <c>CHOST</c>, <c>CFLAGS</c> and 
<c>CXXFLAGS</c> settings for the kind of system that you are creating 
(commented examples can be found further down in the file). These 
settings will be used to tell the C and C++ compiler how to optimize the
code that is generated on your system. The <path>/etc/make.conf</path> 
file contains a general guide for the proper settings of CFLAGS and 
CXXFLAGS.
</p>

<table>
<tr>
<th>Platform</th>
<th>SPARC32</th>
<th>SPARC64</th>
</tr>

<tr>
<ti>CHOST</ti>
<ti>sparc-unknown-linux-gnu</ti>
<ti>sparc-unknown-linux-gnu</ti>
</tr>

<tr>
<ti>CFLAGS</ti>
<ti>-O2 -pipe</ti>
<ti>-mcpu=ultrasparc -O3 -pipe</ti>
</tr>

<tr>
<ti>CXXFLAGS</ti>
<ti>${CFLAGS}</ti>
<ti>${CFLAGS}</ti>
</tr>

</table>

<note>
The values "-O2" and "-O3" are "O"ptimize and not Zero(0).
</note>

<note>
People who need to substantially customize the build process should take 
a look at the <path>/etc/make.globals</path> file. This file comprises 
gentoo defaults and should never be touched. If the defaults do not 
suffice, then new values should be put in <path>/etc/make.conf</path>, 
as entries in <path>make.conf</path> <e>override</e> the entries in 
<path>/etc/make.globals</path>. If you're interested in customizing USE 
settings, look in <path>/etc/make.profile/make.defaults</path>. If you 
want to turn off any USE settings found here, add an appropriate 
<c>USE="-foo"</c> in <path>/etc/make.conf</path> to turn off any 
<c>foo</c> USE setting enabled by default in 
<path>/etc/make.globals</path> or 
<path>/etc/make.profile/make.defaults</path>.
</note>

<note>
<c>USE="-java"</c> can reduce your compile time by 30%.
</note>

<p>
If necessary, you can also set proxy information here if you are behind 
a firewall. Use the following command to edit <path>/etc/make.conf</path>
using <c>nano</c>, a simple visual editor.
</p>

<pre caption="Setting make.conf Options">
# <i>nano -w /etc/make.conf</i>
<comment>(Edit USE, CHOST, CFLAGS, MAKEOPTS, SYNC and any necessary proxy settings)</comment>
</pre>

<warn>
Use of too aggressive flags in <path>/etc/make.conf</path> often results
in compiling issues. If you have a failure during <c>emerge</c>, the 
first thing to check is your <path>/etc/make.conf</path> flags. Remove 
unnecessary and aggressive flags, and recompile.
</warn>

</body>
</section>
</chapter>

<chapter>
<title>Starting from Stage1</title>

<section>
<body>

<note>
If you are not starting from a stage1 tarball, skip this section.
</note>

<p>
The stage1 tarball is for complete customization and optimization. If 
you have picked this tarball, you are most likely looking to have an 
uber-optimized and up-to-date system. Have fun, because optimization is 
what Gentoo Linux is all about! Installing from a stage1 takes a lot of 
time, but the result is a system that has been optimized from the ground 
up for your specific machine and needs.
</p>

<p>
Now, it is time to start the "bootstrap" process. During this time, the 
GNU C library, GNU Compiler Collection and other key system programs will
be built. Start the bootstrap as follows:
</p>

<pre caption="Bootstrapping">
# <i>cd /usr/portage</i>
# <i>scripts/bootstrap.sh</i>
</pre>

<p>
The "bootstrap" process will now begin.
</p>

<note>
Portage by default uses <c>/var/tmp</c> during package building, often 
using several hundred megabytes of temporary storage. If you would like 
to change where Portage stores these temporary files, set a new 
PORTAGE_TMPDIR <e>before</e> starting the bootstrap process, as 
follows:
</note>

<pre caption="Changing Portage's Storage Path">
# <i>export PORTAGE_TMPDIR="/otherdir/tmp"</i>
</pre>

<p>
<c>bootstrap.sh</c> will build <c>binutils</c>, <c>gcc</c>, 
<c>gettext</c>, and <c>glibc</c>, rebuilding <c>binutils</c>, 
<c>gcc</c>, and <c>gettext</c> after <c>glibc</c>. Needless to say, 
this process takes a while. Once this process completes, your system 
will be equivalent to a "stage2" system, which means you can now move 
on to the stage2 instructions.
</p>

<table>

<tr>
<th>Approximate Stage Time</th>
<th>Platform</th>
<th>Model</th>
<th>CPU MHz</th>
<th>RAM MB</th>
<th>Notes</th>
</tr>

<tr>
<ti>20 hours</ti>
<ti>SPARC32</ti>
<ti>SuperSPARC 20</ti>
<ti>75</ti>
<ti>224</ti>
<ti>USE="-java ..."</ti>
</tr>

<tr>
<ti>12 hours</ti>
<ti>SPARC64</ti>
<ti>Ultra 1</ti>
<ti>167</ti>
<ti>256</ti>
<ti>USE="-java ..."</ti>
</tr>

<tr>
<ti>6.5 hours</ti>
<ti>SPARC64</ti>
<ti>Ultra 5/10</ti>
<ti>333</ti>
<ti>384</ti>
<ti>USE="-java -X ..."</ti>
</tr>

<tr>
<ti>3.5 hours</ti>
<ti>SPARC64</ti>
<ti>Ultra 60</ti>
<ti>360 x 2</ti>
<ti>900</ti>
<ti>USE="-java -X ..."</ti>
</tr>

</table>

</body>
</section>
</chapter>

<chapter>
<title>Mirrorselect</title>
<section>
<body>

<impo>
This is a step to select mirrors nearest to you which will speed up your 
installation.
</impo>

<p>
The <uri link="http://www.gentoo.org/news/en/gwn/20030224-newsletter.xml#doc_chap8">mirrorselect</uri> 
package allows for easy configuration of rsync and download mirrors. 
Mirrorselect will insert the results in <path>/etc/make.conf</path>. 
These steps will not only benefit the rest of your installation, but will
improve the responsiveness of all future rsync and download operations. 
Whenever you find a mirror to be slow or unresponsive, repeat these steps.
The following steps install and configure mirrorselect.
</p>

<pre caption="Installing and configuring mirrorselect">
# <i>emerge mirrorselect</i>
# <i>mirrorselect -r -i</i>    <comment>This command will allow you to select an rsync mirror close to you.</comment>
# <i>mirrorselect -a -s3</i>   <comment>This command sets package download mirrors.</comment>
# <i>mirrorselect --help</i>   <comment>Displays mirrorselect help.</comment>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Ccache</title>
<section>
<body>

<note>
This is an optional step to speed up package compilation.
</note>

<p>
The following step installs <uri link="http://ccache.samba.org/">ccache</uri>.
</p>

<pre caption="Installing ccache">
# <i>emerge ccache</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Starting from Stage2 (or continuing from Stage1)</title>
<section>
<body>

<note>
This section is for those continuing a stage1 install or starting at 
stage2. If this is not you (i.e. you're using a stage3,) then skip 
this section.
</note>

<p>
A stage2 tarball has the bootstrapping completed. This step installs the 
rest of the system.
</p>

<note>
If you are starting from a pre-built stage2 and want to ensure that your
packages are fully up-to-date, add the <c>-u</c>(update) option to the 
emerge commands below.
</note>

<pre caption="Installing the Rest of the System">
# <i>emerge system -p</i>
<comment>(lists the packages to be installed)</comment>
# <i>emerge system</i>
</pre>

<p>
It is going to take a while to finish building the entire base system. 
Your reward is that it will be thoroughly optimized for your system. The
drawback is that you have to find a way to keep yourself occupied for 
some time to come. The author suggests "Star Wars - Super Bombad Racing"
for the PS2.
</p>

<table>

<tr>
<th>Approximate Stage Time</th>
<th>Platform</th>
<th>Model</th>
<th>CPU MHz</th>
<th>RAM MB</th>
<th>Notes</th>
</tr>

<tr>
<ti>20 hours</ti>
<ti>SPARC32</ti>
<ti>SuperSPARC 20</ti>
<ti>75</ti>
<ti>224</ti>
<ti>USE="-java ..."</ti>
</tr>

<tr>
<ti>12 hours</ti>
<ti>SPARC64</ti>
<ti>Ultra 1</ti>
<ti>167</ti>
<ti>256</ti>
<ti>USE="-java ..."</ti>
</tr>

<tr>
<ti>6.5 hours</ti>
<ti>SPARC64</ti>
<ti>Ultra 5/10</ti>
<ti>333</ti>
<ti>384</ti>
<ti>USE="-java -X ..."</ti>
</tr>

<tr>
<ti>5 hours</ti>
<ti>SPARC64</ti>
<ti>Ultra 60</ti>
<ti>360 x 2</ti>
<ti>900</ti>
<ti>USE="-java -X ..."</ti>
</tr>

</table>

<p>
Building is now complete. Go ahead and skip down to the <uri link="#doc_chap18">Setting your time zone</uri> chapter.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Starting from Stage3</title>

<section>
<body>
<note>
This section is for those <b>starting</b> with stage3. Stage1 and 
stage2 systems <b>should skip</b> this section.
</note>

<p>
The stage3 tarball provides a fully functional basic Gentoo system, so 
no building is required. However, since the stage3 tarball is pre-built,
it may be slightly out-of-date. If this is a concern for you, you can 
automatically update your existing stage3 to contain the most up-to-date
versions of all system packages by performing the following steps. Note 
that this could take a long time if your stage3 is very old; otherwise,
this process will generally be quick and will allow you to benefit from
the very latest Gentoo updates and fixes. In any case, feel free to skip
these steps and proceed to the next section if you like.
</p>

<p>
First copy over <path>make.conf</path> to a backup. This is necessary because
<e>if</e> a new Portage version is installed, it will overwrite your
<path>make.conf</path>.
</p>

<pre caption="Backing up make.conf">
# <i>cd /etc</i>
# <i>cp make.conf make.conf~</i>
</pre>

<p>
Now update Portage and replace the backup <path>make.conf</path>:
</p>

<pre caption="Updating Portage">
# <i>emerge -u portage</i>
# <i>cp make.conf~ make.conf</i>
</pre>

<p>
As Portage is now up-to-date, we can now begin getting the rest updated.
</p>

<pre caption="Getting up-to-date">
# <i>export CONFIG_PROTECT="-*"</i>
# <i>emerge -up system</i>
<comment>(lists the packages that would be installed)</comment>
# <i>emerge -u system</i>
<comment>(actually merges the packages)</comment>
# <i>unset CONFIG_PROTECT</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Setting your time zone</title>

<section>
<body>

<p>
Now you need to set your time zone.
</p>

<p>
Look for your time zone (or GMT if you are using Greenwich Mean Time) 
in <path>/usr/share/zoneinfo</path>. Then, make a symbolic link to 
<path>/etc/localtime</path> by typing:
</p>

<pre caption="Creating a symbolic link for time zone">
# <i>ls /usr/share/zoneinfo/</i>
# <i>ln -sf /usr/share/zoneinfo/path/to/timezonefile /etc/localtime</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Installing the kernel</title>

<section>
<body>

<note>
If you haven't done so, please edit <path>/etc/make.conf</path> 
to your flavor.
</note>

<warn>
If you are configuring your own kernel, be careful with the 
<i>grsecurity</i> option. Being too aggressive with your security 
settings can cause certain programs (such as X) to not run properly. 
If in doubt, leave it out.
</warn>

<p>
Merge the kernel as follows:
</p>

<pre caption="Emerging Kernel Sources">
# <i>emerge sparc-sources</i>
</pre>

<p>
Once you have a Linux kernel source tree available, it is time to compile
your own custom kernel.
</p>

<p>
Please note that <path>/usr/src/linux</path> is a symlink to your current 
emerged kernel source package, and is set automatically by Portage at 
emerge time. If you have multiple kernel source packages, it is necessary 
to set the <path>/usr/src/linux</path> symlink to the correct one before 
proceeding.
</p>

<pre caption="Configuring the Linux Kernel">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<warn>
For your kernel to function properly, there are several options that you 
will need to ensure are in the kernel proper -- that is, they should 
<i>be enabled and not compiled as modules</i>. Be sure to enable 
"ReiserFS" if you have any ReiserFS partitions; the same goes for 
"Ext3". If you're using XFS, enable the "SGI XFS filesystem support" 
option. It's always a good idea to leave ext2 enabled whether you are 
using it or not. Below are some options that you will need:
</warn>

<pre caption="make menuconfig options">
Code maturity level options ---&gt;
[*] Prompt for development and/or incomplete code/drivers"
<comment>(Required for Gentoo Linux.)</comment>
...
General setup ---&gt;
[*] Symmetric multi-processing support
<comment>(Required for multi-processor support.)</comment>
...
Console drivers ---&gt;       
 Frame-buffer support ---&gt;      
  [*] SBUS and UPA framebuffers             
      [*] Creator/Creator3D support     
<comment>(Only for UPA slot adapter used in many Ultras.)</comment>           
  [*] CGsix (GX,TurboGX) support    
<comment>(Only for SBUS slot adapter used in many SPARCStations.)</comment>
...
Misc Linux/SPARC drivers ---&gt;
[*]  /dev/openprom device support
<comment>(Required for Gentoo Linux.)</comment>
...
SCSI support ---&gt;
 SCSI low-level drivers ---&gt;
 &lt;*&gt; Sparc ESP Scsi Driver   
<comment>(Only for SPARC ESP on-board SCSI adapter.)</comment>    
 &lt;*&gt; PTI Qlogic, ISP Driver  
<comment>(Only for SBUS SCSI controllers from PTI or QLogic.)</comment>
&lt;*&gt; SYM53C8XX Version 2 SCSI support
<comment>(Only for Ultra 60 on-board SCSI adapter.)</comment>
...
Network device support ---&gt;
 Ethernet (10 or 100Mbit) ---&gt;
 &lt;*&gt; Sun LANCE support   
<comment>(Only for SPARCStation on-board ethernet, on some older Ultra systems, and as an Sbus option.)</comment>
&lt;*&gt; Sun Happy Meal 10/100baseT support
<comment>(Only for Ultra on-board ethernet. Also supports "qfe" quad-ethernet on PCI and Sbus.)</comment>
...
Unix 98 PTY support ---&gt;
[ ] Unix98 PTY support
<comment>(NOT needed for Gentoo Linux. Uncheck this.)</comment>
...
File systems ---&gt;
&lt;*&gt; Reiserfs support
<comment>(Only needed if you are using reiserfs.)</comment>
&lt;*&gt; Ext3 journalling file system support
<comment>(Only needed if you are using ext3.)</comment>
[*] Virtual memory file system support (former shm fs)
<comment>(Required for Gentoo Linux. Also known as "tmpfs".)</comment>
&lt;*&gt; JFS filesystem support
<comment>(Only needed if you are using JFS.)</comment>
[*] /proc file system support
<comment>(Required for Gentoo Linux.)</comment>
[*] /dev file system support (EXPERIMENTAL)
<comment>(Required for Gentoo Linux.)</comment>
[*]   Automatically mount at boot          
<comment>(Required for Gentoo Linux.)</comment>
[ ] /dev/pts file system for Unix98 PTYs
<comment>(NOT needed for Gentoo Linux. Uncheck this.)</comment>
&lt;*&gt; Second extended fs support
<comment>(Only needed if you are using ext2, and suggested if using ext3.)</comment>
&lt;*&gt; XFS filesystem support
<comment>(Only needed if you are using XFS.)</comment>
</pre>

<p>
If you are using hardware RAID you will need to enable a couple more 
options in the kernel: For Highpoint RAID controllers select hpt366 
chipset support, support for IDE RAID controllers and Highpoint 370 
software RAID. For Promise RAID controllers select PROMISE 
PDC202{46|62|65|67|68|69|70} support, support for IDE RAID controllers 
and Support Promise software RAID (Fasttrak(tm))
</p>

<p>
If you use PPPoE to connect to Internet, you will need the following 
options in the kernel (built-in or as preferably as modules) : "PPP 
(point-to-point protocol) support", "PPP support for async serial ports",
"PPP support for sync tty ports". The two compression options won't harm
but are not definitely needed, neither does the "PPP over Ethernet" 
option, that might only be used by <c>rp-pppoe</c> when configured to do 
kernel mode PPPoE.
</p>

<p>
If you have an IDE cd burner, then you need to enable SCSI emulation in 
the kernel. Turn on "ATA/IDE/MFM/RLL support" ---&gt; "IDE, ATA and ATAPI
Block devices" ---&gt; "SCSI emulation support" (I usually make it a 
module), then under "SCSI support" enable "SCSI support", "SCSI CD-ROM 
support" and "SCSI generic support" (again, I usually compile them as 
modules). If you also choose to use modules, then <c>echo -e 
"ide-scsi\nsg\nsr_mod" &gt;&gt; /etc/modules.autoload.d/kernel-KV</c>
to have them automatically added at boot time.
</p>
<impo>Replace KV for whichever kernel version you are using. If you are using
a 2.4 Kernel, simply replace <e>KV</e> with <e>2.4</e>.</impo>

<note>
For those who prefer it, it is now possible to install Gentoo Linux with
a 2.2 kernel. However, doing this comes at a price: you will lose many 
of the nifty features that are new to the 2.4 series kernels (such as 
XFS and tmpfs filesystems, iptables, and more), although the 2.2 kernel
sources can be patched with ReiserFS and devfs support. Gentoo linux 
boot scripts require either tmpfs or ramdisk support in the kernel, so 
2.2 kernel users need to make sure that ramdisk support is compiled in 
(i.e., not a module). It is <comment>vital</comment> that a 
<e>gentoo=notmpfs</e> to the append line in <path>/etc/silo.conf</path>
for the 2.2 kernel so that a ramdisk is mounted for the boot scripts 
instead of tmpfs. If you choose not to use devfs, then 
<e>gentoo=notmpfs,nodevfs</e> should be used instead.
</note>

<pre caption="Compiling the kernel">
# <i>make dep &amp;&amp; make clean vmlinux modules modules_install</i>
</pre>

<impo>
The SPARC64 kernel <b>must</b> be smaller than 3.6 megabytes to "fit" 
in the SILO (the SPARC bootloader) memory space. For SPARC32, the kernel 
limit is 2.5 MB.
</impo>

<pre caption="Checking vmlinux's size">
# <i>ls -alh vmlinux</i>
-rwxr-xr-x    1 root     root      3.1M Apr 20 21:42 vmlinux
</pre>

<p>
If your kernel is a tad too big, you can try stripping it using the <c>strip</c>
command:
</p>

<pre caption="Stripping a kernel">
# <i>strip -R .comment -R .note vmlinux</i>
</pre>

<warn>
If you kernel exceeds your platforms SILO requirements, SILO will NOT 
boot the kernel, and <b>your machine will not boot.</b> You must return 
to "Configuring the Linux Kernel" above. Reconfigure and recompile your 
kernel until it is within the specified limits. You can also accomplish this by
using as many modules as possible, as those aren't compiled in the kernel and
therefore reduce the kernel size.
</warn>

<warn>
It is <b>not</b> recommended to compress the kernel image with gzip as it is the
<b>uncompressed</b> kernel size that is important.
</warn>

<pre caption="Installing the kernel">
# <i>cp /usr/src/linux/vmlinux /boot</i>
</pre>

<!--
<p>We need a straight GZIP for SILO.</p>

<pre caption="Compressing, moving, and making a symlink for vmlinux">
# <i>gzip -9 vmlinux</i>
# <i>cp vmlinux.gz /boot/vmlinuz-2.4.18</i>
# <i>ln /boot/vmlinuz-2.4.18 /vmlinuz</i>
</pre>
-->

</body>
</section>
</chapter>

<chapter>
<title>Installing a System Logger, and ssh</title>

<section>
<body>

<p>
Your new custom kernel (and modules) are now installed. Now you need to 
choose a system logger that you would like to install. We offer sysklogd,
which is the traditional set of system logging daemons. We also have 
msyslog and syslog-ng as well as metalog. Power users seem to gravitate
away from sysklogd (not very good performance) and towards the newer 
alternatives. If in doubt, you may want to try metalog, since it seems 
to be quite popular. To merge your logger of choice, type <e>one</e>
of the next four lines:
</p>

<pre caption="Emerging System Logger of Choice">
# <i>emerge metalog</i>
# <i>rc-update add metalog default</i>
<comment>or</comment>
# <i>emerge sysklogd</i>
# <i>rc-update add sysklogd default</i>
<comment>or</comment>
# <i>emerge syslog-ng</i>
# <i>rc-update add syslog-ng default</i>
<comment>or</comment>
# <i>emerge msyslog</i>
# <i>rc-update add msyslog default</i>
</pre>

<impo>
Metalog flushes output to the disk in blocks, so messages aren't 
immediately recorded into the system logs. If you are trying to debug 
a daemon, this performance-enhancing behavior is less than helpful. When
your Gentoo Linux system is up and running, you can send metalog a USR1 
signal to temporarily turn off this message buffering (meaning that 
<c>tail -f <path>/var/log/everything/current</path></c> will now work 
in real time, as expected), and a USR2 signal to turn buffering back on
again. If you want to disable buffering permanently, you can change 
METALOG_OPTS="-B" to METALOG_OPTS="-B -s" in 
<path>/etc/conf.d/metalog</path>.
</impo>

<pre caption="Turning metalog buffering on/off">
<codenote>To turn the buffering off:</codenote>
# <i>killall -USR1 metalog</i>
<codenote>To turn the buffering back on:</codenote>
# <i>killall -USR2 metalog</i>
</pre>

<p>
Now, you may optionally choose a cron package that you would like to 
use. Right now, we offer dcron, fcron and vixie-cron. If you do not know 
which one to choose, you might as well grab vixie-cron. They can be installed
as follows:
</p>

<pre caption="Choosing a CRON Daemon">
# <i>emerge vixie-cron</i>
# <i>rc-update add vixie-cron default</i>
<comment>You do not need to run <i>crontab /etc/crontab</i> if using vixie-cron.</comment>
<comment>or</comment>
# <i>emerge dcron</i>
# <i>rc-update add dcron default</i>
# <i>crontab /etc/crontab</i>
<comment>or</comment>
# <i>emerge fcron</i>
# <i>rc-update add fcron default</i>
# <i>crontab /etc/crontab</i>
</pre>


<p>
You may optionally choose to have <uri link="http://www.openssh.com/">ssh</uri>, which is already installed, 
automatically start on boot as follows:
</p>

<pre caption="Starting ssh at boot">
# <i>rc-update add sshd default</i>
</pre>

<p>
For more information on starting programs and daemons at startup, see the 
<uri link="/doc/en/rc-scripts.xml">rc-script guide</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Installing miscellaneous necessary packages</title>

<section>
<body>

<p>
If you need rp-pppoe to connect to the net, be aware that at this point 
it has not been installed. It would be a good time to do it.
</p>

<pre caption="Installing rp-pppoe">
# <i>USE="-X" emerge rp-pppoe</i>
</pre>

<note>
The <i>USE="-X"</i> prevents pppoe from installing its optional X 
interface, which is a good thing, because X and its dependencies would 
also be emerged. You can always recompile <i>rp-pppoe</i> with X support
later.
</note>

<note>
Please note that the rp-pppoe is built but not configured. You will have 
to do it again using <c>adsl-setup</c> when you boot into your Gentoo 
system for the first time.
</note>

<p>
You may need to install some additional packages in the Portage tree 
if you are using any optional features like XFS, ReiserFS or LVM. If 
you're using XFS, you should emerge the <c>xfsprogs</c> package:
</p>

<pre caption="Emerging Filesystem Tools">
# <i>emerge xfsprogs</i>
<comment>If you would like to use ReiserFS, you should emerge the ReiserFS tools: </comment>
# <i>emerge reiserfsprogs</i>
<comment>If you would like to use JFS, you should emerge the JFS tools: </comment>
# <i>emerge jfsutils</i>
<comment>If you're using LVM, you should emerge the <c>lvm-user</c> package: </comment>
# <i>emerge lvm-user</i>
</pre>

<p>
If you're a laptop user and wish to use your PCMCIA slots on your first 
real reboot, you will want to make sure you install the <c>pcmcia-cs</c>
package.
</p>

<pre caption="Emerging PCMCIA-cs">
# <i>emerge pcmcia-cs</i>
</pre>

<warn>
You will have to re-emerge <c>pcmcia-cs</c> after installation to get 
PCMCIA to work.
</warn>

</body>
</section>
</chapter>

<chapter>
<title>Modifying /etc/fstab for your machine</title>

<section>
<body>

<p>
Your Gentoo Linux system is almost ready for use. All we need to do now 
is configure a few important system files and install the boot loader. 
The first file we need to configure is <path>/etc/fstab</path>. Remember
to specify <c>ext2</c>, <c>ext3</c> or <c>reiserfs</c> filesystem types 
as appropriate.
</p>

<p>
Use something like the <path>/etc/fstab</path> listed below, but of 
course be sure to replace "BOOT", "ROOT" and "SWAP" with the actual
block devices you are using (such as <path>hda1</path>, etc).
</p>

<pre caption="Editing fstab">
<comment># /etc/fstab: static file system information.
#
# noatime turns off atimes for increased performance (atimes normally aren't
# needed; notail increases performance of ReiserFS (at the expense of storage
# efficiency).  It is safe to drop the noatime options if you want and to 
# switch between notail and tail freely.

# &lt;fs&gt;           &lt;mount point&gt;   &lt;type&gt;   &lt;opts&gt;          &lt;dump/pass&gt;

# NOTE: If your BOOT partition is ReiserFS, add the notail option to opts.
</comment>
/dev/BOOT           /boot           ext2      noauto,noatime  1 2
/dev/ROOT           /               ext3      noatime         0 1
/dev/SWAP           none            swap      sw              0 0
/dev/cdroms/cdrom0  /mnt/cdrom      iso9660    noauto,ro      0 0
proc                /proc           proc      defaults        0 0
none                /proc/openprom    openpromfs defaults     0 0
</pre>

<p>
A more detailed explanation of fstab can be found at <uri link="http://www.oreilly.com/catalog/debian/chapter/book/ch07_02.html">O'Reilly.com.</uri>
</p>

<p>
The Dump flag specifies whether the dump command will create a backup 
of the filesystem. Filesystems with no value or a value of zero will not 
be dumped.
</p>

<p>
The Pass number specifies the <e>order</e> in which filesystems are 
checked at boot time. No value or a value of zero specifies that the 
filesystem will not be checked.
</p>

<warn>
Please notice that <path>/boot</path> is NOT mounted at boot time. This is
to protect the data in <path>/boot</path> from corruption. If you need 
to access <path>/boot</path>, please mount it!
</warn>

</body>
</section>
</chapter>

<chapter>
<title>Setting the Root Password</title>

<section>
<body>

<p>
Before you forget, set the root password by typing:
</p>

<pre caption="Setting the root Password">
# <i>passwd</i>
</pre>

<p>
You will also want to add a non-root user for everyday use. Please 
consult the <uri link="http://www.gentoo.org/doc/en/faq.xml">Gentoo 
FAQ</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Setting your Hostname</title>

<section>
<body>

<p>
Edit <path>/etc/hostname</path> so that it contains your hostname on a 
single line, i.e. <c>mymachine</c>.
</p>

<pre caption="Configuring Hostname">
# <i>echo mymachine &gt; /etc/hostname</i>
</pre>

<p>
Then edit <path>/etc/dnsdomainname</path> so that it contains your DNS 
domainname, i.e. <c>mydomain.com</c>.
</p>

<pre caption="Configuring Domainname">
# <i>echo mydomain.com &gt; /etc/dnsdomainname</i>
</pre>

<p>
If you have a NIS domain, you should set it in 
<path>/etc/nisdomainname</path>.
</p>

<pre caption="Configuring NIS Domainname">
# <i>echo nis.mydomain.com &gt; /etc/nisdomainname</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Modifying /etc/hosts</title>

<section>
<body>

<p>
This file contains a list of IP addresses and their associated hostnames. 
It is used by the system to resolve the IP addresses of any hostnames that
may not be in your nameservers. Here is a template for this file:
</p>

<pre caption="Hosts Template">
127.0.0.1      localhost
<comment># the next line contains your IP for your local LAN, and your associated machine name</comment>
192.168.1.1    mymachine.mydomain.com mymachine
</pre>

<note>
If you are on a DHCP network, it might be helpful to set <e>localhost</e>
to your machine's actual hostname. This will help GNOME and many other
programs in name resolution.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Final Network Configuration</title>

<section>
<body>

<p>
Add the names of any modules that are necessary for the proper 
functioning of your system to the <path>/etc/modules.autoload.d/kernel-KV</path>
file (you can also add any options you need to the same line). When Gentoo 
Linux boots, these modules will be automatically loaded. Of particular 
importance is your ethernet card module, if you happened to compile it 
as a module:
</p>

<pre caption="/etc/modules.autoload.d/kernel-KV">
<comment>This is assuming that you are using a 3com card.
Check <path>/lib/modules/`uname -r`/kernel/drivers/net</path> for your card.</comment>
3c59x
</pre>

<p>
Edit the <path>/etc/conf.d/net</path> script to get your network 
configured for your first boot:
</p>

<pre caption="Boot time Network Configuration">
# <i>nano -w /etc/conf.d/net</i>
# <i>rc-update add net.eth0 default</i>
</pre>

<p>I
f you have multiple network cards or token ring interfaces, you need to 
create additional <path>net.eth<comment>x</comment></path> or 
<path>net.tr<comment>x</comment></path> scripts respectively for each 
one (<comment>x</comment> = 1, 2, ...):
</p>

<pre caption="Multiple Network Interfaces">
# <i>cd /etc/init.d</i>
# <i>cp net.eth0 net.eth <comment>x</comment></i>
# <i>rc-update add net.eth<comment>x</comment> default</i>
</pre>

<p>
If you have a PCMCIA card installed, have a quick look into 
<path>/etc/init.d/pcmcia</path> to verify that things seem all right 
for your setup, then add this line to the top of 
<path>/etc/init.d/net.ethx</path>:
</p>

<pre caption="PCMCIA depend in /etc/init.d/net.ethx">
depend() {
need pcmcia
}
</pre>

<p>
This makes sure that the PCMCIA drivers are automatically loaded before 
your network is started.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Final steps: Configure Basic Settings (including the international keymap setting)</title>

<section>
<body>

<pre caption="Basic Configuration">
# <i>nano -w /etc/rc.conf</i>
</pre>

<p>
Follow the directions in the file to configure the basic settings. All 
users will want to make sure that <c>CLOCK</c> is set to his/her liking. 
International keyboard users will want to set the <c>KEYMAP</c> variable 
(browse  <path>/usr/share/keymaps</path> to see the various 
possibilities).
</p>

</body>
</section>
</chapter>

<chapter>
<title>Configure SILO Bootloader</title>

<section>
<body>

<p>
If you haven't already, setup <uri link="http://www.sparc-boot.org/">SILO</uri>, the Sparc Improved boot
LOader:
</p>

<pre caption="Emerge and configure SILO">
# <i>emerge silo</i>
# <i>nano /etc/silo.conf</i>
</pre>

<p>
Here is a very simple SILO conf.
</p>


<pre caption="Sample /etc/silo.conf based on a separate /boot partition">
partition = 1   <comment>Boot partition that contains silo.conf</comment>
root = /dev/hda4   <comment>Location of your /, or root, partition</comment>
timeout = 15
image = /boot/vmlinux
label = linux   <comment>What you would type at the silo prompt to boot the kernel</comment>
</pre>

<note>
Comment out <b>all lines</b> that you do not need in the 
<path>silo.conf</path>.
</note>

<p>
You must run SILO after configuration, and as an added bonus, SILO will 
check for any errors in your silo.conf.
</p>

<pre caption="Run SILO">
# <i>silo</i>
/etc/silo.conf appears to be valid
</pre>

<note>
If you have a separate <path>/boot</path> partition, complete the 
following steps:
</note>

<pre caption="SILO on a separate partition">
# <i>cp /etc/silo.conf /boot/</i>   <comment>Copy silo.conf to your /boot partition</comment>
# <i>silo -C /boot/silo.conf</i>   <comment>Run and verify silo.conf, specifying the non-default location of silo.conf</comment>
/boot/silo.conf appears to be valid
</pre>

</body>
</section>
</chapter>

<!--
  Commenting out just for now, until gentoo-stats is revived.
  Don't forget that I also had to change the double-dashes to two single
  dashes (otherwise commenting doesn't work).
                                                Sven Vermeulen (SwifT)


<chapter>
<title>Gentoo-Stats</title>
<section>
<body>

<p>
The Gentoo Linux usage statistics program was started as an attempt to 
give the developers a way to find out about their user base. It collects 
information about Gentoo Linux usage to help us setting priorities in our
development. Installing it is completely optional, and it would be 
greatly appreciated if you decide to use it. Compiled statistics can 
be viewed at <uri>http://stats.gentoo.org/</uri>.
</p>

<p>
The gentoo-stats server will assign a unique ID to your system.
This ID is used to make sure that each system is counted only once. The 
ID will not be used to individually identify your system, nor will it be
matched against an IP address or other personal information. Every 
precaution has been taken to assure your privacy in the development 
of this system. The following are the things that we are monitoring
right now through our "gentoo-stats" program:
</p>

<ul>
<li>installed packages and their version numbers</li>
<li>CPU information: speed (MHz), vendor name, model name, CPU flags (like "mmx" or "3dnow")</li>
<li>memory information (total available physical RAM, total available swap space)</li>
<li>PCI cards and network controller chips</li>
<li>the Gentoo Linux profile your machine is using (that is, where the /etc/make.profile link is pointing to).</li>
</ul>

<p>
We are aware that disclosure of sensitive information is a threat to 
most Gentoo Linux users (just as it is to the developers).
</p>

<ul>
<li>Unless you modify the gentoo-stats program, it will never transmit sensitive
information such as your passwords, configuration data, shoe size...</li>
<li>Transmission of your e-mail addresses is optional and turned off by default.</li>
<li>The IP address your data transmission originates from will never be logged
in such a way that we can identify you. There are no "IP address/system ID" pairs.</li>
</ul>

<p>
The installation is easy - just run the following commands:
</p>

<pre caption="Installing gentoo-stats">
# <i>emerge gentoo-stats</i>   <codenote>Installs gentoo-stats</codenote>
# <i>gentoo-stats - -new</i>    <codenote>Obtains a new system ID</codenote>
# <i>nano -w /etc/gentoo-stats/gentoo-stats.conf</i>    <codenote>If you wish to see/edit what is submitted</codenote>
</pre>

<p>
The second command above will request a new system ID and enter it into
<path>/etc/gentoo-stats/gentoo-stats.conf</path> automatically. You can 
view this file to see additional configuration options.
</p>

<p>
After that, the program should be run on a regular schedule
(gentoo-stats does not have to be run as root). Add the following line 
to the bottom of your <path>crontab</path>:
</p>

<pre caption="Updating gentoo-stats with cron">
# <i>nano -w /etc/crontab</i>
<i>0 0 * * 0,4 /usr/sbin/gentoo-stats - -update &gt; /dev/null</i>    <codenote>Add this line to the bottom of the list</codenote>
</pre>

<p>
The <c>gentoo-stats</c> program is a simple perl script which can be
viewed with your favorite pager or editor: 
<path>/usr/sbin/gentoo-stats</path>.
</p>

</body>
</section>
</chapter>

-->

<chapter>
<title>Installation Complete and Rebooting the System</title>

<section>
<body>

<p>
Now, Gentoo Linux is installed. The only remaining step is to update 
necessary configuration files, exit the chrooted shell, safely unmount 
your partitions, and reboot the system:
</p>

<pre caption="Rebooting the System">
# <i>etc-update</i>
# <i>exit</i>
<comment>(This exits the chrooted shell; you can also type <c>^D</c>)</comment>
# <i>cd / </i>
# <i>umount /mnt/gentoo/boot</i>
# <i>umount /mnt/gentoo/proc</i>
# <i>umount /mnt/gentoo</i>
# <i>reboot</i>
</pre>

<note>
After rebooting, it is a good idea to run the <c>update-modules</c> 
command to create the <path>/etc/modules.conf</path> file. Instead of 
modifying this file directly, you should generally make changes to the
files in <path>/etc/modules.d</path>.
</note>

</body>
</section>
</chapter>


<chapter>
<title>Post-Installation Suggestions</title>
<section>
<body>

<p>
Feel free to search for and install any packages that you may like. 
<c>emerge -s</c> provides information on packages. We suggest the 
following:
</p>

<pre caption="Emerge useful packages">
# <i>emerge -s ufed</i>
Searching...   
[ Results for search key : ufed ]
[ Applications found : 1 ]

*  app-admin/ufed
Latest version available: 0.32
Latest version installed: [ Not Installed ]
Size of downloaded files: 14 kB
Homepage:    http://www.gentoo.org
Description: Gentoo Linux USE flags editor

# <i>emerge ufed</i>
# <i>emerge gentoolkit</i>
</pre>

<note>
Only complete the following step if you installed <path>/boot</path> on 
a separate partition. You may want to complete the following steps to 
avoid confusion in the future:
</note>

<pre caption="touch /boot/">
# <i>touch /boot/I_AM_UNMOUNTED</i>
<comment>Since the /boot partition is not normally mounted at boot, this is a good reminder</comment>
<comment/>
<comment>If you need to mount /boot, for example to install a kernel, use the following command:</comment>
# <i>mount /boot</i>
</pre>

</body>
</section>
</chapter>


<chapter>
<title>Feedback and How to get Involved</title>

<section>
<body>

<p>
If you have any questions or would like to get involved with Gentoo Linux 
development, consider joining our gentoo-user and gentoo-dev mailing lists 
(more information on our <uri link="http://www.gentoo.org/main/en/lists.xml">mailing lists</uri>
page). We also have a handy <uri link="http://www.gentoo.org/doc/en/desktop.xml">Desktop configuration
guide</uri> that will help you to continue configuring your new Gentoo 
Linux system, and a useful <uri link="http://www.gentoo.org/doc/en/portage-user.xml">Portage user 
guide</uri> to help familiarize you with Portage basics. You can find 
the rest of the Gentoo Documentation <uri link="http://www.gentoo.org/main/en/docs.xml">here</uri>. If you have any 
other questions involving installation or anything for that matter, please 
check the Gentoo Linux <uri link="http://www.gentoo.org/doc/en/faq.xml">FAQ</uri>. Enjoy and welcome 
to Gentoo Linux!
</p>

</body>
</section>
</chapter>
</guide>
