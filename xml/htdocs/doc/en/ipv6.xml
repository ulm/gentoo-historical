<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/ipv6.xml,v 1.23 2007/01/24 00:45:18 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/ipv6.xml">

<title>Gentoo IPv6 Router Guide</title>
<author title="Developer">
  <mail link="latexer@gentoo.org">Peter Johanson</mail>
</author>
<author title="Editor">
  <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Editor, Reviewer">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Editor">
  <mail link="cam@gentoo.org">Camille Huot</mail>
</author>
<author title="Editor">
  <mail link="okun@hack.fi">Pasi Valminen</mail>
</author>

<abstract>
This guide shows how to setup IPv6 on a Gentoo system.  This includes
establishing a tunnel with a tunnel broker, some basic DNS configuration
and configuring clients to use the system to connect to IPv6 addresses.
</abstract>

<license/>

<version></version>
<date>2007-01-23</date>

<chapter>
<title>Preliminaries</title>
<section>
<title>Basic Kernel Configuration</title>
<body>

<p>
Any of the 2.4 or 2.6 kernel trees availables in Gentoo will easily support
IPv6 connections. The new USAGI IPv6 stack is integrated to the kernel since
Linux 2.4.22 and Linux 2.6.0. Note that for older kernels,
<b>alpha-sources-2.4.21</b> and <b>gentoo-sources-2.4.20</b> can have the USAGI
patches applied, if you correctly set <e>usagi</e> in your USE variable.
</p>

<pre caption="Emerging a kernel">
<comment>(for a 2.6 kernel)</comment>
# <i>emerge '>=gentoo-sources-2.6'</i>
<comment>(or for a 2.4 one)</comment>
# <i>emerge '=gentoo-sources-2.4*'</i>
</pre>

<p>
Now we are ready to enter the kernel source directory and begin our
actual kernel configuration.
</p>

<pre caption="Configuring the Linux Kernel">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<note>
This assumes the symlink <path>/usr/src/linux</path> points to the
sources you will be using.
</note>

<note>
Make sure you have <path>Prompt for development and/or incomplete
code/drivers</path> enabled in your kernel config.
</note>

<pre caption="'make menuconfig' options">
Device Drivers ---&gt;
Networking support ---&gt;
Networking options ---&gt;
   &lt;*&gt; The IPv6 protocol (EXPERIMENTAL)
<comment>(The IPv6 options beneath this one can be useful for many other applications,</comment>
<comment>but should not be needed for a basic setup)</comment>

<comment>(This option is only required if you are using ptrtd for 6to4 conversion)</comment>
[*] Network device support
   &lt;*&gt; Universal TUN/TAP device driver support
</pre>

</body>
</section>

<section>
<title>Testing IPv6 Support</title>
<body>

<p>
After enabling the recommended options, recompile your kernel and reboot
into your new IPv6-enabled kernel.
</p>

<p>
If you don't already have <b>iproute2</b> installed, we urge you to do it now.
iproute2 is a network configuration suite that contains <c>ip</c>, the famous
replacement for <c>ifconfig</c>, <c>route</c>, <c>iptunnel</c> and others...
</p>

<pre caption="Installing iproute2">
# <i>emerge sys-apps/iproute2</i>
</pre>

<warn>
Use of ifconfig can cause serious headaches if you have multiple tunnel
devices. You have to remove the tunnels in backorder, which means that the
latest created must be removed first. You have been warned!
</warn>

<p>
If IPv6 is working, the loopback device should show an IPv6 address:
</p>

<pre caption="Checking the loopback device">
# <i>ip -6 addr show lo</i>
1: lo: &lt;LOOPBACK,UP&gt; mtu 16436
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
    <comment>(The above lines show things are working)</comment>
</pre>

<p>
Before going any further, make sure that you add <e>ipv6</e> to your list of
USE variables in <path>make.conf</path>, so that future emerges of packages
will include IPv6 support.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Tunnel Configuration</title>
<section>
<title>Basic Configuration</title>
<body>

<p>
Most ISPs still do not offer any native IPv6 connections. To get around
this limitation, there are several "tunnel brokers" around the globe
that offer free IPv6 tunnels. This will allow you to tunnel all your
IPv6 connections through an IPv4 connection.
</p>

<table>
<tr><th>Broker</th><th>Location</th></tr>
<tr>
  <ti><uri link="http://tunnelbroker.net/">Hurricane Electric</uri></ti>
  <ti>US/Canada</ti>
</tr>
<tr>
  <ti><uri link="http://www.freenet6.net/">Freenet6</uri></ti>
  <ti>US</ti>
</tr>
<tr>
  <ti><uri link="http://www.sixxs.net/">Sixxs</uri></ti>
  <ti>Europe</ti>
</tr>
<tr>
  <ti><uri link="http://tunnel-broker.singnet.com.sg/">Singnet</uri></ti>
  <ti>Singapore</ti>
</tr>
<tr>
  <ti><uri link="http://broker.aarnet.net.au/">Aarnet</uri></ti>
  <ti>Australia/South Pacific</ti>
</tr>
</table>

<p>
Below are two examples for setting up a tunnel with two popular North
American tunnels, Hurricane Electric (applies for non-heartbeat tunnels
from sixxs.net as well) and Freenet6.
</p>

</body>
</section>

<section>
<title>Hurricane Electric</title>
<body>

<p>
Hurricane Electric (HE for short) offers free IPv6 tunnels and allocates
a /64 block of addresses for you. It also allows configuration of
reverse DNS. Getting a tunnel from HE is as easy as going to
<uri>http://www.tunnelbroker.net/</uri> and filling out a one page form.
</p>

<note>
Registration includes listing information like your address and phone
number.
</note>

<warn>
Tunnels from HE take 24 hours to be activated.  This is in order to curb
abuse of the service.
</warn>

<p>
After you have a tunnel approved and have a /64 block allocated, you can
configure your Gentoo box. HE provides sample configurations based on
ifconfig and the iproute utilities. The following two examples assume
you have the following configuration:
</p>

<table>
<tr><ti>Local IPv4 Address (eth0)</ti><ti>68.36.91.195</ti></tr>
<tr><ti>HE IPv4 Address</ti><ti>64.71.128.82</ti></tr>
<tr><ti>Local IPv6 tunnel Address</ti><ti>2001:470:1F00:FFFF::189</ti></tr>
<tr><ti>IPv6 Block</ti><ti>2001:470:1F00:296::/64</ti></tr>
</table>

<p>
Using the iproute2 package and the <c>ip</c> command, you would do the
following:
</p>

<pre caption="Configuration of an IPv6 tunnel">
<comment>(Create a tunnel between the local (eth0) IPv4 and HE's remote IPv4 address)</comment>
# <i>ip tunnel add sixbone mode sit remote 64.71.128.82 local 68.36.91.195 ttl 64 dev eth0</i>
<comment>(Extract the tunneling overhead from the MTU)</comment>
# <i>ip link set sixbone mtu 1280</i>
<comment>(Bring the tunnel up)</comment>
# <i>ip link set sixbone up</i>
<comment>(Assign the IPv6 address to it)</comment>
# <i>ip addr add 2001:470:1F00:FFFF::189 dev sixbone</i>
<comment>(Route all global unicast IPv6 addresses through our 'sixbone' tunnel device)</comment>
# <i>ip route add 2000::/3 dev sixbone</i>
</pre>

</body>
</section>

<section>
<title>Freenet6</title>
<body>

<p>
<uri link="http://www.freenet6.net/">Freenet6</uri> is another free tunnel
broker. Registration only requires a username and a valid email address.
They have chosen to turn the tunnel management into a client/server
setup and have created the <c>tspc</c> client. The client is available
in portage. To install it do:
</p>

<pre caption="Installing the Freenet6 client">
# <i>emerge freenet6</i>
</pre>

<p>
Now you need to configure freenet6 by editing
<path>/etc/freenet6/tspc.conf</path>. You should only have to edit the
<e>userid</e> and <e>passwd</e> fields to match those
assigned from Freenet6. Below is a complete sample config file.
</p>

<pre caption="tspc.conf example">
tsp_version=1.0.1
tsp_dir=/etc/freenet6
auth_method=any
client_v4=auto
<i>userid=anonymous</i>
<i>passwd=foobar</i>
template=gentoo
server=tsps1.freenet6.net
retry_delay=0
if_tunnel=sit3
</pre>

</body>
</section>

<section>
<title>Testing your connection</title>
<body>

<p>
Now that your tunnel is configured, you can test your connection. The
easiest way to do this is to use the <c>ping6</c> utility and try to ping
an IPv6 host.
</p>

<pre caption="Testing the connection">
# <i>emerge iputils</i>
# <i>ping6 www.kame.net</i>
PING www.kame.net(orange.kame.net) 56 data bytes
64 bytes from orange.kame.net: icmp_seq=1 ttl=52 time=290 ms
64 bytes from orange.kame.net: icmp_seq=2 ttl=52 time=277 ms
64 bytes from orange.kame.net: icmp_seq=3 ttl=52 time=280 ms
64 bytes from orange.kame.net: icmp_seq=4 ttl=52 time=279 ms
64 bytes from orange.kame.net: icmp_seq=5 ttl=52 time=277 ms

--- www.kame.net ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4038ms
rtt min/avg/max/mdev = 277.040/281.041/290.046/4.699 ms
</pre>

<p>
Further work is currently in progress to add better IPv6 support to the
network init scripts. If you'd like to know the status of this and/or
help out, email <mail link="latexer@gentoo.org">latexer@gentoo.org</mail>.
</p>

</body>
</section>

</chapter>
<chapter>

<title>IPv6 Support in Applications</title>

<section>
<title>Re-emerging packages</title>
<body>

<p>
Unless you had <e>USE="ipv6"</e> in your <path>/etc/make.conf</path>
previously, you probably need to re-emerge a bunch of packages to compile in
IPv6 support for them. To get a list of all the installed packages which are
affected by USE flag changes, use Portage's <c>--newuse</c> (<c>-N</c>) option:
</p>

<pre caption="Candidates for re-emerging">
# <i>emerge -uDNav world</i>
</pre>

<p>
If you have changed a lot of USE flags, the list could be quite long. It's
suggested to keep your system up-to-date, so it won't hurt if you recompile
all affected packages.
</p>

<note>
Some packages detect IPv6 support automagically and hence have no ipv6 USE
flag. Thus not all packages, which should support IPv6, will support it if
you have not compiled it with an IPv6 enabled kernel.
</note>

</body>
</section>

<section>
<title>IPv6 Specific Packages</title>
<body>

<p>
There are a few packages which specifically deal with IPv6 items. Most
of these are located in <path>/usr/portage/net-misc</path>.
</p>

<table>
<tr><th>Package</th><th>Description</th></tr>
<tr>
  <ti>net-misc/ipv6calc</ti>
  <ti>Converts an IPv6 address to a compressed format</ti>
</tr>
<tr>
  <ti>net-misc/nc6</ti>
  <ti>netcat version that supports IPv6 and IPv4</ti>
</tr>
<tr>
  <ti>dev-perl/Socket6</ti>
  <ti>
    IPv6 related part of the C socket.h defines and structure manipulators
  </ti>
</tr>
</table>

</body>
</section>
</chapter>

<chapter>
<title>DNS setup</title>
<section>
<title>IPv6 and DNS</title>
<body>

<p>
Just as DNS for IPv4 uses A records, DNS for IPv6 uses AAAA records.
(This is because IPv4 is an address space of 2^32 while IPv6 is an
address space of 2^128). For reverse DNS, the INT standard is deprecated
but still widely supported. ARPA is the latest standard. Support for the
ARPA format will be described here.
</p>

</body>
</section>

<section>
<title>BIND configuration</title>
<body>

<p>
Recent versions of BIND include excellent IPv6 support. This section
will assume you have at least minimal knowledge about the configuration
and use of BIND. We will assume you are not running bind in a chroot.
If you are, simply append the chroot prefix to most of the paths in the
following section.
</p>

<p>
First you need to add entries for both forward and reverse DNS zone files
in <path>/etc/bind/named.conf</path>.
</p>

<pre caption="named.conf entries">
<comment>(We allow bind to listen to IPv6 addresses.</comment>
<comment>Using 'any' is the only way to do it prior to bind-9.3)</comment>
options {
    [...]
    listen-on-v6 { any; }
    [...]
};
<comment>(This will provide the forward DNS for the domain 'ipv6-rules.com':)</comment>
zone "ipv6-rules.com" IN {
    type master;
    file "pri/ipv6-rules.com";
};
<comment>(This format for reverse DNS is "bitwise." It's done by taking the IPv6 prefix,</comment>
<comment>reversing the order of the numbers and putting a period between each number)</comment>
zone "6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa" {
        type master;
        file "pri/rev-ipv6-rules.com.arpa";
};
</pre>

<p>
Now we must create those zone files and add entries for all of our
hosts:
</p>

<pre caption="pri/ipv6-rules.com">
$TTL    2h
@       IN      SOA     ipv6-rules.com. webmaster.ipv6-rules.com.  (
                                2003052501 ; Serial
                                28800      ; Refresh
                                14400      ; Retry
                                3600000    ; Expire
                                86400 )    ; Minimum
                NS      ns1.ipv6-rules.com

        IN      AAAA    2001:470:1f00:296::1 ; address for ipv6-rules.com
host1   IN      AAAA    2001:470:1f00:296::2 ; address for host1.ipv6-rules.com
host2   IN      AAAA    2001:470:1f00:296::3:3 ; address for host2.ipv6-rules.com
</pre>

<pre caption="pri/rev-ipv6-rules.com.arpa">
$TTL 3d ; Default TTL (bind 8 needs this, bind 9 ignores it)
@       IN SOA ipv6-rules.com. webmaster.ipv6-rules.com. (
                        2003052501      ; Serial number (YYYYMMdd)
                        24h             ; Refresh time
                        30m             ; Retry time
                        2d              ; Expire time
                        3d )            ; Default TTL
        IN      NS     ns1.ipv6-rules.com.
; IPv6 PTR entries
$ORIGIN 6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa.

1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     ipv6-rules.com.
2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     host1.ipv6-rules.com.
3.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     host2.ipv6-rules.com.
</pre>

</body>
</section>

<section>
<title>DJBDNS configuration</title>
<body>

<p>
There are currently some third-party patches to DJBDNS available at
<uri link="http://www.fefe.de/dns/">http://www.fefe.de/dns/</uri> that allow
it to do IPv6 nameserving. DJBDNS can be installed with these patches
by emerging it with <e>ipv6</e> in your USE variables.
</p>

<warn>
Not all record types are support yet with these patches.  In particular,
NS and MX records are not supported.
</warn>

<pre caption="Installing djbdns">
# <i>emerge djbdns</i>
</pre>

<p>
After djbdns is installed, it can be setup by running
<c>tinydns-setup</c> and answering a few questions about which IP
addresses to bind to, where to install tinydns, etc.
</p>

<pre caption="Setting up tinydns">
# <i>tinydns-setup</i>
</pre>

<p>
Assuming we've installed <c>tinydns</c> into <path>/var/tinydns</path>,
we can now edit <path>/var/tinydns/root/data</path>. This file will contain
all the data needed to get tinydns handling DNS for your IPv6 delegation.
</p>

<pre caption="sample data file">
<comment>(*.ipv6-rules.com is authoritatively handled by 192.168.0.1)</comment>
.ipv6-rules.com:192.168.0.1:a:259200
<comment>(Authoritative reverse DNS for 2001:470:1f00:296::/64)</comment>
.6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa:192.168.0.1:a
<comment>(Specify the IPs for host1 and host2)</comment>
6host1.ipv6-rules.com:200104701f0002960000000000000001:86400
6host2.ipv6-rules.com:200104701f0002960000000000000002:86400
<comment>(Point www to host1)</comment>
3www.ipv6-rules.com:200104701f0002960000000000000002:86400
</pre>

<p>
Lines prefixed with a <c>6</c> will have both an AAAA and a PTR record
created. Those prefixed with a <c>3</c> will only have an AAAA record
created. Besides manually editing the <path>data</path> file, you can
use the scripts <c>add-host6</c> and <c>add-alias6</c> to add new entries.
After changes are made to the <path>data</path> file, you simply need to
run <c>make</c> from <path>/var/tinydns/root</path>. This will create
<path>/var/tinydns/root/data.cfb</path>, which tinydns will use as its
source of information for DNS requests.
</p>

</body>
</section>
</chapter>

<chapter>
<title>IPv6 Router</title>
<section>
<title>Configure routing</title>
<body>

<p>
Further configuration is required if we want to use our system as a
router for other clients wishing to connect to the outside world with
IPv6. We need to enable forwarding of IPv6 packets. We can do this in
one of two ways.
</p>

<pre caption="Enabling forwarding">
# <i>echo 1 > /proc/sys/net/ipv6/conf/all/forwarding</i>
or
# <i>sysctl -w net.ipv6.conf.all.forwarding=1</i>
</pre>

<warn>
The radvd init script enables (and disables) forwarding, making the next step
unnecessary.
</warn>

<p>
To enable forwarding at boot, you'll need to edit
<path>/etc/sysctl.conf</path> and add the following line.
</p>

<pre caption="sysctl.conf addition">
net.ipv6.conf.default.forwarding=1
</pre>

<p>
Traffic should now be forwarded from this box through the tunnel we've
established with our broker.
</p>

<p>
To assign IPv6 addresses to clients, the IPv6 specification allows for
both stateless and stateful IP assignment. Stateless assignment uses a
process called Router Advertisement and allows clients to obtain an IP
and a default route by simply bringing an interface up. It is called
"stateless" because there is no record of IPs assigned and the host they
are assigned to. Stateful assignment is handled by DHCPv6. It is
"stateful" because the server keeps a state of the clients who've
requested IPs and received them.
</p>

</body>
</section>

<section>
<title>Stateless Configuration</title>
<body>

<p>
Stateless configuration is easily accomplished using the Router
Advertisement Daemon, or radvd.
</p>

<pre caption="Configuring radvd">
# <i>emerge radvd</i>
</pre>

<p>
After having emerged radvd, we need to create
<path>/etc/radvd/radvd.conf</path> that contains information about what
IP block to assign IPs from. Here is a sample <path>radvd.conf</path>
file using the prefix we've been assigned from our tunnel broker.
</p>

<pre caption="Sample radvd.conf">
interface eth1
{
        <comment>(Send advertisement messages to other hosts)</comment>
        AdvSendAdvert on;
        <comment>(Fragmentation is bad(tm))</comment>
        AdvLinkMTU 1280;
        MaxRtrAdvInterval 300;
        <comment>(IPv6 subnet prefix we've been assigned by our PoP)</comment>
        prefix 2001:470:1F00:296::/64
        {
                AdvOnLink on;
                AdvAutonomous on;
        };
};
</pre>

<warn>
Make sure the interface on the first line is correct so you broadcast router
advertisement to your intranet and not to your ISP!
</warn>

<p>
Further information is available in <c>man radvd.conf</c>. We can now
start radvd and set it to start at boot.
</p>

<pre caption="Starting up radvd">
# <i>/etc/init.d/radvd start</i>
# <i>rc-update add radvd default</i>
</pre>

</body>
</section>

<section>
<title>Stateful Configuration</title>
<body>

<p>
If you'd like to use stateful configuration, you'll need to install and
configure dhcpv6.
</p>

<pre caption="Installing dhcpv6">
# <i>emerge dhcpv6</i>
</pre>

<p>
Next we must configure the DHCPv6 server by editing
<path>/etc/dhcp6s.conf</path>.
</p>

<pre caption="Sample dhcp6s.conf">
prefer-life-time 10000;
valid-life-time 20000;
renew-time 5000;
rebind-time 8000;
interface eth1 {
    link AAA {
        allow unicast;
        send unicast;
        allow rapid-commit;
        send server-preference 5;
        renew-time 1000;
        rebind-time 2400;
        prefer-life-time 2000;
        valid-life-time 3000;
        pool{
            range 2001:470:1f00:296::10 to 2001:470:1f00:296::110/64;
            prefix 2001:470:1f00:296::/64;
        };
    };
};
</pre>

<p>
We can now start dhcp6s, and configure it to start at boot.
</p>

<pre caption="Starting dhcp6s">
# <i>/etc/init.d/dhcp6s start</i>
# <i>rc-update add dhcp6s default</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>IPv6 Clients</title>
<section>
<title>Using radvd</title>
<body>

<p>
Clients behind this router should now be able to connect to the rest
of the net via IPv6. If using radvd, configuring hosts should be as easy
as bringing the interface up. (This is probably already done by your
net.ethX init scripts).
</p>

<pre caption="Connecting through IPv6">
# <i>ip link set eth0 up</i>
# <i>ip addr show eth0</i>
1: eth0: &lt;BROADCAST,MULTICAST,UP&gt; mtu 1400 qdisc pfifo_fast qlen 1000
    link/ether 00:01:03:2f:27:89 brd ff:ff:ff:ff:ff:ff
    inet6 2001:470:1f00:296:209:6bff:fe06:b7b4/128 scope global
       valid_lft forever preferred_lft forever
    inet6 fe80::209:6bff:fe06:b7b4/64 scope link
       valid_lft forever preferred_lft forever
    inet6 ff02::1/128 scope global
       valid_lft forever preferred_lft forever
</pre>

</body>
</section>

<section>
<title>using DHCPv6</title>
<body>

<p>
If your router is set up to use DHCPv6, your clients will also need to
have the dhcpv6 package installed. After having done this, you need to
configure your client by editing <path>/etc/dhcp6c.conf</path>.
</p>

<pre caption="Sample dhcp6c.conf">
interface eth0 {
        send rapid-commit;
        request domain-name-servers;
        iaid 11111;
        renew-time 11000;
};
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Using 6to4 Conversion</title>
<section>
<title>Basic principles</title>
<body>

<p>
6to4 conversion can be used if you want to have hosts that talk to IPv4
hosts over a purely IPv6 connection. Thus you can have an entirely IPv6
internal network, with one host dealing with connecting to the outside
IPv4/IPv6 world.
</p>

</body>
</section>

<section>
<title>DNS configuration</title>
<body>

<p>
To get 6to4 conversion working, a DNS proxy, <c>totd</c>, need to be
configured that will send you AAAA records for sites that really only have
A records. These AAAA records will point to IPv6 addresses which don't
actually exist, but which will get routed through a 6to4 proxy.
</p>

<p>
Since <c>totd</c> is still <c>~x86</c> masked pending further testing, you'll
have to unmask it by appending the following line to your
<path>/etc/portage/package.keywords</path> file (see "man portage" for more
informations about this file).
</p>

<pre caption="Permanently unmask totd in package.keywords">
net-misc/totd ~x86
</pre>

<p>
Then simply run emerge:
</p>

<pre caption="Installing totd">
# <i>emerge totd</i>
</pre>

<p>
Next, we need to setup <path>/etc/totd.conf</path> with some basic
configuration information.
</p>

<pre caption="Sample /etc/totd.conf">
<comment>(Points to a real DNS nameserver)</comment>
forwarder 192.168.0.2 port 53
<comment>(What prefix to put before faked AAAA records)</comment>
prefix 3ffe:abcd:1234:9876::
<comment>(What port to run totd on)</comment>
port 5005
<comment>(What PID file to use)</comment>
pidfile /var/run/totd.pid
<comment>(Actually do 6to4 stuff)</comment>
stf
</pre>

<note>
<c>totd</c> must be set to use a port different than port 53 if another
nameserver is running on the same machine.
</note>

</body>
</section>

<section>
<title>6to4 proxy</title>
<body>

<p>
<c>ptrtd</c> will be used as a 6to4 proxy, enabling connections between
the internal IPv6 host and the outside IPv4 host.
</p>

<pre caption="Installing ptrtd">
# <i>emerge ptrtd</i>
</pre>

<p>
We now need to configure <c>ptrtd</c>, telling it what fake prefix
(the one we setup <c>totd</c> to use) to create proxy connections for.
Edit <path>/etc/conf.d/ptrtd</path> and set <c>IPV6_PREFIX</c>. This
should be the same prefix as was configured with <c>totd</c>.
</p>

<pre caption="Sample /etc/ptrtd.conf">
IPV6_PREFIX="3ffe:abcd:1234:9876::"
</pre>

<p>
You can now start totd, and enable it to start at boot.
</p>

<pre caption="Starting totd">
# <i>/etc/init.d/totd start</i>
# <i>rc-update add totd default</i>
</pre>

</body>
</section>

<section>
<title>Client configuration and testing</title>
<body>

<p>
Clients may now be configured to connect to both IPv4 and IPv6 hosts
through an IPv6 only connection. Assuming that the clients are already
receiving an IP address from radvd, we simply need to add a new DNS
resolver entry, and add a default route for those "fake addresses".
First, add an entry at the top of your <path>/etc/resolv.conf</path>
pointing to the machine running <c>totd</c>.
</p>

<pre caption="/etc/resolv.conf sample">
nameserver 2001:470:1f00:296::1 <comment>(The server running totd)</comment>
</pre>

<p>
To test name resolution, request an AAAA record for a known IPv4
only site.
</p>

<pre caption="Testing name resolution">
# <i>dig aaaa google.com</i>
;; ANSWER SECTION:
google.com.             300     IN      AAAA     3ffe:abcd:1234:9876::d8ef:3364
google.com.             300     IN      AAAA     3ffe:abcd:1234:9876::d8ef:3564
</pre>

<p>
We will now add a default route for all addresses prefixed with our
chosen fake prefix.
</p>

<pre caption="Adding the default route">
<comment>(Assuming your IPv6 interface is eth0)</comment>
# <i>ip route add 3ffe:abcd:1234:9876::/64 via 2001:470:1f00:296::1 dev eth0</i>
</pre>

<p>
Finally, use <c>ping6</c> to ping google.com at it's fake IPv6 location.
</p>

<pre caption="Testing 6to4">
# <i>ping6 -c 2 google.com</i>
PING 3ffe:abcd:1234:9876::d8ef:3364(3ffe:abcd:1234:9876::d8ef:3364) 56 data bytes
64 bytes from 3ffe:abcd:1234:9876::d8ef:3364: icmp_seq=1 ttl=54 time=0.106 ms
64 bytes from 3ffe:abcd:1234:9876::d8ef:3364: icmp_seq=2 ttl=54 time=0.090 ms

--- 3ffe:abcd:1234:9876::d8ef:3364 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 0.090/0.098/0.106/0.008 ms
</pre>

<note>
The router running <c>ptrtd</c> is actually replying, but this at least
tells us things are working.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Other Resources</title>
<section>
<body>

<p>
There are many excellent resources online pertaining to IPv6.
</p>

<table>
<tr><th>Websites</th><th>Resources</th></tr>
<tr>
  <ti><uri link="http://www.ipv6.org/">www.ipv6.org</uri></ti>
  <ti>General IPv6 Information</ti>
</tr>
<tr>
  <ti><uri link="http://www.linux-ipv6.org/">www.linux-ipv6.org/</uri></ti>
  <ti>USAGI Project</ti>
</tr>
<tr>
  <ti><uri link="http://www.deepspace6.net/">www.deepspace6.net</uri></ti>
  <ti>Linux/IPv6 site</ti>
</tr>
<!-- dead, was hacked<tr>
  <ti><uri link="http://www.hs247.com/">www.hs247.com</uri></ti>
  <ti>All things IPv6</ti>
</tr>-->
<!-- dead, not responding<tr>
  <ti><uri link="http://www.ipv6-net.org/">www.ipv6-net.org</uri></ti>
  <ti>German IPv6 site</ti>
</tr>-->
<tr>
  <ti><uri link="http://www.kame.net/">www.kame.net</uri></ti>
  <ti>*BSD implementation</ti>
</tr>
</table>

<p>
On IRC, you can try <c>#gentoo-ipv6</c> or <c>#ipv6</c> on
<uri link="http://www.freenode.net/">Freenode</uri>. You can connect to the
Freenode servers using an IPv6 enabled client by connecting to
<b>irc.ipv6.freenode.net</b>.
</p>

</body>
</section>
</chapter>
</guide>
