<?xml version='1.0' encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link = "/doc/en/policy.xml">
<title>Gentoo Linux Development Policy</title>
<author title="Original Author">Owen Stampflee</author> 
<author title="Author"><mail link="karltk@gentoo.org">Karl Trygve Kalleberg</mail></author> 
<author title="Author/Editor"><mail link="drobbins@gentoo.org">Daniel Robbins</mail></author> 
<author title="Editor"><mail link="seemant@gentoo.org">Seemant Kulleen</mail></author> 
<abstract>
This guide is meant to be the authoritative written reference for Gentoo Linux development policy.
It will be updated periodically to reflect new developer procedures.
</abstract>

<version>1.0</version>
<date>14 Nov 2002</date>

<chapter>
<title>General guidelines</title>
<section>
<body>
<p>Here are some general development guidelines to follow:</p>
<ul>

<li>Always check in your changes with repoman; use repoman commit instead of cvs commit.</li>

<li>If a package is either broken in its current version or it has a really
nasty build/install process, take a look at how other distributions do it: <ul>
<li><uri>http://cvs.mandrakesoft.com/cgi-bin/cvsweb.cgi/SPECS/</uri></li>
<li><uri>http://www.debian.org/distrib/packages</uri></li> </ul> </li>
   
<li>Your package, when complete and unmasked, is supposed to "just work" for
the end-user. Tweaking the installed product to get it to work should be
optional; thus you need to install the package with reasonable default
settings.</li>

<li>Don't be afraid to consult our on-line documentation and ebuilds written
and maintained by more senior developers.</li>
</ul>
</body>
</section>
</chapter>
<chapter>
<title>Ebuild policy</title>
<section>
<title>Naming policy</title>
<body>

<p>Ebuild file names consist of four logical sections:</p>

<p><c>pkg-ver{_suf{#}}{-r#}.ebuild</c></p>

<note>The brackets (<c>{}</c>) deliniate optional fields and do not appear in
the literal package name. <c>#</c> represents any non-zero positive
integer.</note>

<p>The first <c>pkg</c> section is the package name, which should only contain
lowercase letters, the digits 0-9, and any number of single hyphen (<c>-</c>)
characters. Examples: <c>util-linux</c>, <c>sysklogd</c>, <c>glibc</c>. We have
some packages in Portage that don't follow these rules, but <i>your</i>
packages should.</p>

<p>The <c>ver</c> second section is the version of the package, which should
normally be same as the version on the main source tarball. The version is
normally made up of two or three (or more) numbers separated by periods, such
as <c>1.2</c> or <c>4.5.2</c>, and may have a single letter immediately
following the last digit, e.g., <c>1.4b</c> or <c>2.6h</c>. The package version
is joined to the package name with a hyphen. Examples: <c>foo-1.0</c>,
<c>bar-2.4.6</c>.</p>

<p>The third <c>{_suf{#}}</c> section is optional may contain one of these
predefined suffixes, listed in least-recent to most-recent order:</p>

<table>
<tr><th>Suffix</th><th>Meaning</th></tr>
<tr><ti><c>_alpha</c></ti><ti>Alpha release</ti></tr>
<tr><ti><c>_beta</c></ti><ti>Beta release</ti></tr>
<tr><ti><c>_pre</c></ti><ti>Prerelease</ti></tr>
<tr><ti><c>_rc</c></ti><ti>Release candidate</ti></tr>
<tr><ti>(none)</ti><ti>Normal release</ti></tr>
<tr><ti><c>_p</c></ti><ti>Patch level (normally accompanied by trailing integer</ti></tr>
</table>

<p> Any of these suffixes may be immediately followed by a non-zero positive
integer, e.g., <c>linux-2.4.0_pre10</c>. Assuming identical version parts, the
suffixes are ordered as follows (lower means older): <c>_alpha</c> &lt;
<c>_beta</c> &lt; <c>_pre</c> &lt; <c>_rc</c> &lt; (no suffix) &lt;
<c>_p</c></p>
       
<p>When comparing identical suffixes with trailing integers, the one with the
larger integer will be considered most recent. Example: <c>foo-1.0_alpha4</c>
is more recent than <c>foo-1.0_alpha3</c>.</p>

<p>The fourth section of the package name is the Gentoo Linux-specific revision
number (<c>{-r#}</c>). This section, like the suffix, is also optional.
<c>#</c> is a non-zero positive integer, e.g.  <c>package-4.5.3-r3</c>. </p>

<p>This revision number is independent of the version of the source tarball and
is used to inform people that a new and improved Gentoo Linux revision of a
particular package is available. Initial releases of ebuilds must have no
revision number, e.g. <c>package-4.5.3</c> and are considered by Portage to
have a revision number of zero. This means that counting goes as follows:
<c>1.0</c> (initial version), <c>1.0-r1</c>, <c>1.0-r2</c>, etc. </p>
</body>
</section>
<section>
<title>Versioning and revision bumps</title>
<body>

<p>Package revision numbers should be incremented by Gentoo Linux developers
when the ebuild has changed to the point where users would want to upgrade.
Typically, this is the case when fixes are made to an ebuild that affect the
resultant installed files, but the ebuild uses the same source tarball as the
previous release.  If you make an internal, stylistic change to the ebuild that
does not change any of the installed files, then there is no need to bump the
revision number.  Likewise, if you fix a compilation problem in the ebuild that
was affecting some users, there is no need to bump the revision number, since
those for whom it worked perfectly would see no benefit in installing a new
revision, and those who experienced the problem do not have the package
installed (since compilation failed) and thus have no need for the new revision
number to force an upgrade.</p>

<impo>Whenever you create a new revision of an ebuild, be sure to update the
<path>ChangeLog</path> file in the ebuild directory. Failing to do so is
considered to be in very poor taste and many result in disciplinary
action.</impo>

</body> 
</section> 
<section>
<title>Virtuals</title>
<body>

<p>Portage supports a concept called "virtual" packages. Using virtual
packages, it is possible to have a particular category/package name map to
another. Here's an example of how to use virtual packages. Let's say you create
a new cron package called <c>foocron</c>. Gentoo Linux is currently set up so
that things that need a cron package of some kind depend on the
<c>virtual/cron</c> package. This allows ebuilds to ensure that there is some
kind of cron available while allowing users the flexibility to install the cron
package that they prefer. To plug your <path>foocron-1.0.ebuild</path> into
this system, you'd add a line to the ebuild that reads:</p>

<pre>
PROVIDE="virtual/cron"
</pre>

<p>Now, when <c>foocron-1.0</c> is installed, the <c>virtual/cron</c> package
will be registered. If you didn't have any cron package installed before, this
would mean that any package <e>depending</e> on <c>virtual/cron</c> would have
that dependency fully satisfied. Note that is is possible to specify a
<c>PROVIDES</c> value for any type of package -- it need not begin with
<c>virtual/</c>. However, you <e>should</e> use the <c>virtual/</c> category
unless you are using the <c>PROVIDES</c> functionality to handle packages that
have been renamed.  </p>

<p>There is a second component to the Gentoo Linux virtuals implementation.
What would happen if there were no installed package that provided
<c>virtual/cron</c>? How would Portage choose the "correct" cron to install to
satisfy the <c>virtual/cron</c> dependency? Portage takes care of this
situation by using a profile-specific virtual mapping file called
<path>virtuals</path> which is stored in the profile directory
<path>/etc/make.profile</path>. If you take a look at your
<path>virtuals</path> file, you'll find that the contents look something like
this: </p>

<pre caption="Sample virtuals file">
virtual/lpr             net-print/cups
virtual/python          dev-lang/python
virtual/mta             net-mail/ssmtp
</pre>

<p>The first line of this file tells Portage that if a package depends on
<c>virtual/lpr</c> and no <c>virtual/lpr</c> is installed and no
<c>virtual/lpr</c> package is available in the Portage tree, then
<c>net-print/cups</c> should be installed to satisfy this dependency.
<c>net-print/cups</c> contains a line that reads <c>PROVIDE="virtual/lpr"</c>
so that future dependencies on <c>virtual/lpr</c> will be satisfied.</p>

<p>Now for the developer guidelines. If you were to add the <c>foocron</c>
package, you would obviously want to ensure that all programs that depend upon
<c>virtual/cron</c> are able to work correctly with it. And if you were to add
a package named <c>foobarosity</c> that depended on <c>virtual/cron</c>, you
should likewise ensure that all packages that provide <c>virtual/cron</c> will
be satisfactory for the proper functioning of <c>foobarosity</c>.</p>
</body>
</section>
<section>
<title>CVS snapshot policy</title>
<body>
<p><e>(coming soon)</e></p>
</body>
</section>
<section>
<title>User-submitted ebuilds</title>
<body>
<p>User-submitted ebuilds should never be blindly trusted and should always be
well-tested and audited before being committed to CVS. <b>If a user-submitted
ebuild has problems, you will be held accountable.</b> By committing it to CVS,
you are vouching that the ebuild meets all Gentoo Linux development standards.</p>

<p>Make sure that the user-submitted ebuild doesn't contain custom headers like this:</p>

<pre caption="A custom header that should be transferred to the ChangeLog">
# Ebuild updated by: me &lt;me@me.com&gt;
</pre>

<p>This information should be added to the <file>ChangeLog</file> using proper ChangeLog
comment syntax. <b>Always ensure that the ChangeLog gives proper credit to the user
who submitted the ebuild. This information should appear in the first ChangeLog entry.</b></p>

<p>Also ensure that any new ebuilds you commit contain the following line:</p>
<pre>
# $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/Attic/policy.xml,v 1.3 2002/11/15 18:39:34 zhen Exp $
</pre>
<p>Quite a few user-submitted ebuilds are based on files from rsync, which can contain
incorrect header lines.</p>

<p>Encourage users to submit diffs to existing ebuilds if they are submitting
an upgrade.  By doing this, we can help avoid the re-introduction of
previously-fixed bugs into our "new" ebuilds. If you are not working from a user-submitted
diff but a complete ebuild, then use the <c>diff</c> command to see what has changed, keeping
an eye open for anything from our current ebuild that should appear in the new ebuild, or
anything in the new ebuild that should be fixed or removed.</p>

<p>In general, let the user do the work required to get his or her ebuild up to par, unless
you <e>want</e> to clean up the ebuild on his or her behalf.  Even so, it's often better
to have the user do the work so that they can learn from their mistakes and submit cleaner ebuilds
in the future. Be sure to be thankful for any submission, even if it isn't very good. Be polite
but honest -- if an ebuild isn't usable, the user can be told in a way that does not insult their
current ebuild-writing abilities. Remember that the user who submitted that broken ebuild may
be a skilled an productive member of our project in the future -- that is, if they receive the right
amount of encouragement and support and continue to improve in their abilities.</p>
</body>
</section>
</chapter> 
<chapter>
<title>Variables</title>
<section>
<title>Required variables</title>
<body>
<p>Gentoo Linux policy requires that all ebuilds contain <c>KEYWORDS</c>, <c>LICENSE</c> and <c>SLOT</c> variables.
<c>HOMEPAGE</c>, <c>SRC_URI</c> and <c>DESCRIPTION</c> should also be included except for special circumstances,
and <c>DEPEND</c> and <c>RDEPEND</c> should be included if your package has any build or runtime dependencies
respectively.
</p>
</body>
</section>
</chapter>

</guide>
