<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/2005.0/hb-install-ppc-disk.xml,v 1.4 2005/08/02 08:03:54 swift Exp $ -->

<sections>

<version>4.2</version>
<date>2005-08-02</date>

<section>
<title>Introduction to Block Devices</title>
<subsection>
<title>Block Devices</title>
<body>

<p>
We'll take a good look at disk-oriented aspects of Gentoo Linux
and Linux in general, including Linux filesystems, partitions and block devices.
Then, once you're familiar with the ins and outs of disks and filesystems,
you'll be guided through the process of setting up partitions and filesystems
for your Gentoo Linux installation.
</p>

<p>
To begin, we'll introduce <e>block devices</e>. The most famous block device is
probably the one that represents the first IDE drive in a Linux system, namely
<path>/dev/hda</path>. If your system uses SCSI or SATA drives, then your first
hard drive would be <path>/dev/sda</path>.
</p>

<p>
The block devices above represent an abstract interface to the disk. User
programs can use these block devices to interact with your disk without worrying
about whether your drives are IDE, SCSI or something else. The program can
simply address the storage on the disk as a bunch of contiguous,
randomly-accessible 512-byte blocks.
</p>

</body>
</subsection>
<subsection>
<title>Partitions and Slices</title>
<body>

<p>
Although it is theoretically possible to use a full disk to house your Linux
system, this is almost never done in practice. Instead, full disk block devices
are split up in smaller, more manageable block devices. On most systems,
these are called <e>partitions</e>. Other architectures use a similar technique,
called <e>slices</e>.
</p>

</body>
</subsection>
</section>
<section>
<title>Designing a Partitioning Scheme</title>
<subsection>
<title>Default Partitioning Scheme</title>
<body>

<p>
If you are not interested in drawing up a partitioning scheme for your system,
you can use the partitioning scheme we use throughout this book:
</p>

<table>
<tr>
  <th>Partition NewWorld</th>
  <th>Partition OldWorld</th>
  <th>Partition Pegasos</th>
  <th>Partition RS/6000</th>
  <th>Filesystem</th>
  <th>Size</th>
  <th>Description</th>
</tr>
<tr>
  <ti><path>/dev/hda1</path></ti>
  <ti><path>/dev/hda1</path></ti>
  <ti>(Not applicable)</ti>
  <ti>(Not applicable)</ti>
  <ti>(Partition Map)</ti>
  <ti>32k</ti>
  <ti>Apple_partition_map</ti>
</tr>
<tr>
  <ti><path>/dev/hda2</path></ti>
  <ti>(Not needed)</ti>
  <ti>(Not applicable)</ti>
  <ti>(Not applicable)</ti>
  <ti>(bootstrap)</ti>
  <ti>800k</ti>
  <ti>Apple_Bootstrap</ti>
</tr>
<tr>
  <ti>(Not applicable</ti>
  <ti>(Not applicable)</ti>
  <ti>(Not applicable)</ti>
  <ti><path>/dev/sda1</path></ti>
  <ti>(PReP Boot)</ti>
  <ti>800k</ti>
  <ti>Type 0x41</ti>
</tr>
<tr>
  <ti>(Not needed)</ti>
  <ti>(Not needed)</ti>
  <ti><path>/dev/hda1</path></ti>
  <ti>(Not needed)</ti>
  <ti>ext2</ti>
  <ti>32MB</ti>
  <ti>Boot partition</ti>
</tr>
<tr>
  <ti><path>/dev/hda3</path></ti>
  <ti><path>/dev/hda2</path></ti>
  <ti><path>/dev/hda2</path></ti>
  <ti><path>/dev/sda2</path></ti>
  <ti>(swap)</ti>
  <ti>512M</ti>
  <ti>Swap partition, Type 0x82</ti>
</tr>
<tr>
  <ti><path>/dev/hda4</path></ti>
  <ti><path>/dev/hda3</path></ti>
  <ti><path>/dev/hda3</path></ti>
  <ti><path>/dev/sda3</path></ti>
  <ti>ext3, xfs</ti>
  <ti>Rest of the disk</ti>
  <ti>Root partition, Type 0x83</ti>
</tr>
</table>

<note>
There are some partitions named like this: <path>Apple_Driver43,
Apple_Driver_ATA, Apple_FWDriver, Apple_Driver_IOKit, Apple_Patches</path>. If
you are not planning to use MacOS 9 you can delete them, because MacOS X and
Linux don't need them.  You might have to use <c>parted</c> in order to delete
them, as mac-fdisk can't delete them yet.
</note>

<warn>
<c>parted</c> is able to resize partitions.  On the Installation CD there 
are patches included to resize HFS+ filesystem.  Unfortunately it is not 
possible to resize HFS+ journaled filesystems, even if the journaling has been 
switchedoff in Mac OS X.  Everything you do with resizing in parted you do it 
on your own risk!  Be sure to have a backup of your data!
</warn>

<p>
If you are interested in knowing how big a partition should be, or even how many
partitions you need, read on. Otherwise continue now with <uri
link="#fdisk">Default: Using mac-fdisk (Apple/IBM) to Partition your Disk</uri>
or <uri link="#parted">Alternative: Using parted (especially Pegasos) to
Partition your Disk</uri>.
</p>

</body>
</subsection>
<subsection>
<title>How Many and How Big?</title>
<body>

<p>
The number of partitions is highly dependent on your environment. For instance,
if you have lots of users, you will most likely want to have your
<path>/home</path> separate as it increases security and makes backups easier.
If you are installing Gentoo to perform as a mailserver, your <path>/var</path>
should be separate as all mails are stored inside <path>/var</path>. A good
choice of filesystem will then maximise your performance. Gameservers will have
a separate <path>/opt</path> as most gaming servers are installed there. The
reason is similar for <path>/home</path>: security and backups. You will
definitely want to keep <path>/usr</path> big: not only will it contain the 
majority of applications, the Portage tree alone takes around 500 Mbyte 
excluding the various sources that are stored in it.
</p>

<p>
As you can see, it very much depends on what you want to achieve. Separate
partitions or volumes have the following advantages:
</p>

<ul>
<li>
  You can choose the best performing filesystem for each partition or volume
</li>
<li>
  Your entire system cannot run out of free space if one defunct tool is
  continuously writing files to a partition or volume
</li>
<li>
  If necessary, file system checks are reduced in time, as multiple checks can
  be done in parallel (although this advantage is more with multiple disks than
  it is with multiple partitions)
</li>
<li>
  Security can be enhanced by mounting some partitions or volumes read-only,
  nosuid (setuid bits are ignored), noexec (executable bits are ignored) etc.
</li>
</ul>

<p>
However, multiple partitions have one big disadvantage: if not configured
properly, you might result in having a system with lots of free space on one
partition and none on another. There is also a 15-partition limit for SCSI and
SATA.
</p>

</body>
</subsection>
</section>
<section id="fdisk">
<title>Default: Using mac-fdisk (Apple) Partition your Disk</title>
<body>

<p>
At this point, create your partitions using <c>mac-fdisk</c>:
</p>

<pre caption="Starting mac-fdisk">
# <i>mac-fdisk /dev/hda</i>
</pre>

<p>
First delete the partitions you have cleared previously to make room for your
Linux partitions. Use <c>d</c> in <c>mac-fdisk</c> to delete those partition(s).
It will ask for the partition number to delete.  Usually the first partition on
NewWorld machines (Apple_partition_map) could not be deleted.
</p>

<p>
Second, create an <e>Apple_Bootstrap</e> partition by using <c>b</c>. It will
ask for what block you want to start. Enter the number of your first free
partition, followed by a <c>p</c>. For instance this is <c>2p</c>.
</p>

<note>
This partition is <e>not</e> a <path>/boot</path> partition. It is not used by
Linux at all; you don't have to place any filesystem on it and you should never
mount it. Apple users don't need an extra partition for <path>/boot</path>.
</note>

<p>
Now create a swap partition by pressing <c>c</c>. Again <c>mac-fdisk</c> will
ask for what block you want to start this partition from. As we used <c>2</c>
before to create the Apple_Bootstrap partition, you now have to enter
<c>3p</c>. When you're asked for the size, enter <c>512M</c> (or whatever size
you want -- 512MB is recommended though). When asked for a name, enter <c>swap</c>
(mandatory).
</p>

<p>
To create the root partition, enter <c>c</c>, followed by <c>4p</c> to select
from what block the root partition should start. When asked for the size, enter
<c>4p</c> again. <c>mac-fdisk</c> will interpret this as "Use all available
space". When asked for the name, enter <c>root</c> (mandatory).
</p>

<p>
To finish up, write the partition to the disk using <c>w</c> and <c>q</c> to
quit <c>mac-fdisk</c>.
</p>

<note>
To make sure everything is ok, you should run mac-fdisk once more and check
whether all the partitions are there. If you don't see any of the partitions
you created, or the changes you made, you should reinitialize your partitions
by pressing "i" in mac-fdisk. Note that this will recreate the partition map
and thus remove all your partitions.
</note>

<p>
Now that your partitions are created, you can continue with <uri
link="#filesystems">Creating Filesystems</uri>.
</p>

</body>
</section>
<section id="parted">
<title>Using parted (especially Pegasos) to Partition your Disk</title>
<body>

<p>
<c>parted</c>, the Partition Editor, can now handle HFS+ partitions used by
Mac OS and Mac OS X.  With this tool you can resize your Mac-partitions and
create space for your Linux partitions.  Nevertheless, the example below
describes partitioning for Pegasos machines only.
</p>

<p>
To begin let's fire up <c>parted</c>:
</p>

<pre caption="Starting parted">
# <i>parted /dev/hda</i>
</pre>

<p>
If the drive is unpartitioned, run <c>mklabel amiga</c> to create a new
disklabel for the drive.
</p>

<p>
You can type <c>print</c> at any time in parted to display the current partition
table. If at any time you change your mind or made a mistake you can press
<c>Ctrl-c</c> to abort parted.
</p>

<p>
If you intend to also install MorphOS on your Pegasos create an affs1 filesystem
named "BI0" (BI zero) at the start of the drive. 32MB should be more than enough
to store the MorphOS kernel. If you have a Pegasos I or intend to use reiserfs or
xfs, you will also have to store your Linux kernel on this partition (the
Pegasos II can only boot from ext2/ext3 or affs1 partitions). To create the partition run
<c>mkpart primary affs1 START END</c> where <c>START</c> and <c>END</c> should
be replaced with the megabyte range (e.g. <c>0 32</c> creates a 32 MB partition
starting at 0MB and ending at 32MB.
</p>

<p>
You need to create two partitions for Linux, one root filesystem for all your
program files etc, and one swap partition. To create the root filesystem you
must first decide which filesystem to use. Possible options are ext2, ext3,
reiserfs and xfs. Unless you know what you are doing, use ext3. Run
<c>mkpart primary ext3 START END</c> to create an ext3 partition. Again, replace
<c>START</c> and <c>END</c> with the megabyte start and stop marks for the
partition.
</p>

<p>
It is generally recommended that you create a swap partition the same size as
the amount of RAM in your computer times two. You will probably get away with a
smaller swap partition unless you intend to run a lot of applications at the
same time (although at least 512MB is recommended). To create the swap
partition, run <c>mkpart primary linux-swap START END</c>.
</p>

<p>
Write down the partition minor numbers as they are required during the
installation process. To display the minor numbers run <c>print</c>. Your drives
are accessed as <path>/dev/hdaX</path> where X is replaced with the minor number
of the partition.
</p>

<p>
When you are done in parted simply run <c>quit</c>.
</p>

</body>
</section>
<section id="filesystems">
<title>Creating Filesystems</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Now that your partitions are created, it is time to place a filesystem on them.
If you don't care about what filesystem to choose and are happy with what we use
as default in this handbook, continue with <uri
  link="#filesystems-apply">Applying a Filesystem to a Partition</uri>.
Otherwise read on to learn about the available filesystems...
</p>

</body>
</subsection>
<subsection>
<title>Filesystems?</title>
<body>

<p>
Several filesystems are available. ext2, ext3 and XFS are found stable on the
PPC architecture. jfs is unsupported, ReiserFS still has some problems on ppc
and is not supported.
</p>

<p>
<b>ext2</b> is the tried and true Linux filesystem but doesn't have metadata
journaling, which means that routine ext2 filesystem checks at startup time can
be quite time-consuming. There is now quite a selection of newer-generation
journaled filesystems that can be checked for consistency very quickly and are
thus generally preferred over their non-journaled counterparts. Journaled
filesystems prevent long delays when you boot your system and your filesystem
happens to be in an inconsistent state.
</p>

<p>
<b>ext3</b> is the journaled version of the ext2 filesystem, providing metadata
journaling for fast recovery in addition to other enhanced journaling modes like
full data and ordered data journaling. ext3 is a very good and reliable
filesystem. It has an additional hashed b-tree indexing option that enables 
high performance in almost all situations. You can enable this indexing by
adding <c>-O dir_index</c> to the <c>mke2fs</c> command. In short, ext3 is an 
excellent filesystem.
</p>

<p>
<b>ReiserFS</b> is a B*-tree based filesystem that has very good overall 
performance and greatly outperforms both ext2 and ext3 when dealing with small 
files (files less than 4k), often by a factor of 10x-15x. ReiserFS also scales 
extremely well and has metadata journaling. As of kernel 2.4.18+, ReiserFS is 
solid and usable as both general-purpose filesystem and for extreme cases such 
as the creation of large filesystems, the use of many small files, very large 
files and directories containing tens of thousands of files. Unfortunately we still have some
issues with ReiserFS on ppc. We do not encourage people to use this filesystem.
</p>

<p>
<b>XFS</b> is a filesystem with metadata journaling which comes with a robust
feature-set and is optimized for scalability. We only recommend using this
filesystem on Linux systems with high-end SCSI and/or fibre channel storage and
an uninterruptible power supply. Because XFS aggressively caches in-transit data
in RAM, improperly designed programs (those that don't take proper precautions
when writing files to disk and there are quite a few of them) can lose a good
deal of data if the system goes down unexpectedly.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>Applying a Filesystem to a Partition</title>
<body>

<p>
To create a filesystem on a partition or volume, there are tools available for 
each possible filesystem:
</p>

<table>
<tr>
  <th>Filesystem</th>
  <th>Creation Command</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mkfs.ext2</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mkfs.ext3</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkfs.reiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
</table>

<p>
For instance, to have the root partition (<path>/dev/hda4</path> in our example)
in ext3 (as in our example), you would use:
</p>

<pre caption="Applying a filesystem on a partition">
# <i>mkfs.ext3 /dev/hda4</i>
</pre>

<p>
Now create the filesystems on your newly created partitions (or logical
volumes).
</p>

<note>
On OldWorld machines and the PegasosII your partition which holds the kernel must
be ext2 or ext3.  NewWorld machines can boot from any of ext2, ext3, XFS,
ReiserFS or even HFS/HFS+ filesystems.
</note>

</body>
</subsection>
<subsection>
<title>Activating the Swap Partition</title>
<body>

<p>
<c>mkswap</c> is the command that is used to initialize swap partitions:
</p>

<pre caption="Creating a Swap signature">
# <i>mkswap /dev/hda3</i>
</pre>

<p>
To activate the swap partition, use <c>swapon</c>:
</p>

<pre caption="Activating the swap partition">
# <i>swapon /dev/hda3</i>
</pre>

<p>
Create and activate the swap now.
</p>

</body>
</subsection>
</section>
<section>
<title>Mounting</title>
<body>

<p>
Now that your partitions are initialized and are housing a filesystem, it is
time to mount those partitions. Use the <c>mount</c> command. Don't forget to
create the necessary mount directories for every partition you created. As an
example we create a mount-point and mount the root partition:
</p>

<warn>
Due to a bug in the e2fsprogs package, you need to explicitly use 
the <c>mount -t ext3</c> option if you are using an ext3 filesystem.
</warn>

<pre caption="Mounting partitions">
# <i>mkdir /mnt/gentoo</i>
# <i>mount /dev/hda4 /mnt/gentoo</i>
<comment>(For ext3 partitions:)</comment>
# <i>mount -t ext3 /dev/hda4 /mnt/gentoo</i>
</pre>

<note>
If you want your <path>/tmp</path> to reside on a separate partition, be sure to
change its permissions after mounting: <c>chmod 1777 /mnt/gentoo/tmp</c>. This
also holds for <path>/var/tmp</path>.
</note>


<p>
We will have to mount the proc filesystem (a virtual interface with the
kernel) on <path>/proc</path>. But first we will need to place our files on the
partitions.
</p>

<p>
Continue with <uri link="?part=1&amp;chap=5">Installing the Gentoo
Installation Files</uri>.
</p>

</body>
</section>
</sections>
