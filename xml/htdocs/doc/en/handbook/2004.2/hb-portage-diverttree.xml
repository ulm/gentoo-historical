<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/2004.2/hb-portage-diverttree.xml,v 1.1 2004/11/15 12:43:54 swift Exp $ -->

<sections>

<version>1.1</version>
<date>October 21, 2004</date>

<section>
<title>Using a Portage Tree Subset</title>
<subsection>
<title>Excluding Packages/Categories</title>
<body>

<p>
You can selectively update certain categories/packages and ignore the other
categories/packages. We achieve this by having <c>rsync</c> exclude
categories/packages during the <c>emerge --sync</c> step.
</p>

<p>
By default, <c>rsync</c> will check the contents of
<path>/etc/portage/rsync_excludes</path> (if it exists) which contains the
categories or packages that you <e>don't</e> want <c>rsync</c> to update.
</p>

<p>
Note however that this may lead to dependency issues since new, allowed packages
might depend on new but excluded packages.
</p>

</body>
</subsection>
</section>
<section>
<title>Adding Unofficial Ebuilds</title>
<subsection>
<title>Defining a Portage Overlay Directory</title>
<body>

<p>
You can ask Portage to use ebuilds that are not officially available through the
Portage tree. Create a new directory (for instance
<path>/usr/local/portage</path>) in which you store the 3rd-party ebuilds. Use
the same directory structure as the official Portage tree!
</p>

<p>
Then define PORTDIR_OVERLAY in <path>/etc/make.conf</path> and have it point to
the previously defined directory. When you use Portage now, it will take those
ebuilds into account as well without removing/overwriting those ebuilds the next
time you run <c>emerge --sync</c>.
</p>

</body>
</subsection>
</section>
<section>
<title>Non-Portage Maintained Software</title>
<subsection>
<title>Using Portage with Self-Maintained Software</title>
<body>

<p>
In some cases you want to configure, install and maintain software yourself
without having Portage automate the process for you, even though Portage
can provide the software titles. Known cases are kernel sources and nvidia 
drivers. You can configure Portage so it knows that a certain package is 
manually installed on your system. This process is called <e>injecting</e> and 
supported by Portage through the 
<path>/etc/portage/profile/package.provided</path> file.
</p>

<p>
For instance, if you want to inform Portage about 
<c>development-sources-2.6.8.1</c> which you've installed manually, add the 
following line to <path>/etc/portage/profile/package.provided</path>:
</p>

<pre caption="Example line for package.provided">
sys-kernel/development-sources-2.6.8.1
</pre>

</body>
</subsection>
</section>
</sections>
