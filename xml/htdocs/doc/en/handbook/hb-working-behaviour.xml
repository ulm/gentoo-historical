<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/Attic/hb-working-behaviour.xml,v 1.3 2003/11/28 16:59:56 swift Exp $ -->

<sections>
<section>
<title>Configuration File Protection</title>
<subsection>
<title>Protecting?</title>
<body>

<p>
Portage knows the concept of "protected files". This means that, when you update
software, it will not immediately overwrite certain files with newer versions,
but inform you that a newer version exists. This is of course very usefull for
configuration files (the files that reside in <path>/etc</path>).
</p>

<p>
Instead of overwriting such files, it will create a new file called
<path>._cfg0000_&lt;name&gt;</path> with <path>&lt;name&gt;</path> being the 
original file name. It is then up to the user to merge the necessary differences
in the existing file. He can use the <c>etc-update</c> command to ease this
operation. We will talk about <c>etc-update</c> later.
</p>

</body>
</subsection>
<subsection>
<title>Declaring CONFIG_PROTECT</title>
<body>

<p>
Portage cannot protect on a file per file basis. Instead it protects entire
directories. The <c>CONFIG_PROTECT</c> variable lists all protected directories.
All subdirectories of the listed directories are protected too. The
<c>CONFIG_PROTECT</c> variable is defined in <path>/etc/make.globals</path>,
but if you want to change it, you should declare it in
<path>/etc/make.conf</path> (to keep things consistent
<path>/etc/make.conf</path> is used for all Portage configuration).
</p>

<pre caption="An example CONFIG_PROTECT setting">
CONFIG_PROTECT="/etc /usr/share/config /usr/kde/3.1/share/config"
</pre>

<p>
If you want a certain directory protected, but not all of its subdirectories,
you can "unprotect" these directories by listing them in the
<c>CONFIG_PROTECT_MASK</c> variable, which also has a default value defined in
<path>/etc/make.globals</path> but should be altered by declaring it in
<path>/etc/make.conf</path>:
</p>

<pre caption="An example CONFIG_PROTECT_MASK setting">
CONFIG_PROTECT_MASK="/etc/init.d"
</pre>

<p>
More information about the Configuration File Protection can be found in
<c>emerge</c>'s online help:
</p>

<pre caption="Getting information about Configuration File Protection">
# <i>emerge --help config</i>
</pre>

</body>
</subsection>
<subsection>
<title>etc-update</title>
<body>

<p>
<c>etc-update</c> is a tool that aids in merging the
<path>._cfg0000_&lt;name&gt;</path> files. It provides an interactive merging
setup and can also auto-merge trivial changes.
</p>

<p>
Running <c>etc-update</c> is pretty straight-forward:
</p>

<pre caption="Running etc-update">
# <i>etc-update</i>
</pre>

<p>
After merging the trivial changes, you will be prompted with a list of protected
files that have an update waiting. At the bottom you are greeted by the possible
options:
</p>

<pre caption="etc-update options">
Please select a file to edit by entering the corresponding number.
              (-1 to exit) (-3 to auto merge all remaining files)
                           (-5 to auto-merge AND not use 'mv -i'): 
</pre>

<p>
If you enter <c>-1</c>, <c>etc-update</c> will exit without performing any
changes. If you enter <c>-3</c> or <c>-5</c>, <e>all</e> listed configuration
files will be overwritten with the newer versions. It is therefore very
important to first select the configuration files that should not be
automatically updated. This is as easy as entering the number listed to the left
of that configuration file.
</p>

<p>
As an example, we select the configuration file <path>/etc/pear.conf</path>:
</p>

<pre caption="Updating a specific configuration file">
Beginning of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
<comment>[...]</comment>
End of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
1) Replace original with update
2) Delete update, keeping original as is
3) Interactively merge original with update
4) Show differences again
</pre>

<p>
You can now see the differences between the two files. If you believe that the
updated configuration file can be used without problems, enter <c>1</c>. If you
believe that the updated configuration file isn't necessary, or doesn't provide
any new or usefull information, enter <c>2</c>. If you want to interactively
update your current configuration file, enter <c>3</c>. 
</p>

<p>
It is not usefull to elaborate about the interactive merging here. For
completeness sake, we will list the possible commands you can use while you are
interactively merging the two files. You are greeted with two lines (the
original one, and the proposed new one) and a prompt at which you can enter one
of the following commands:
</p>

<pre caption="Commands available for the interactive merging">
ed:     Edit then use both versions, each decorated with a header.
eb:     Edit then use both versions.
el:     Edit then use the left version.
er:     Edit then use the right version.
e:      Edit a new version.
l:      Use the left version.
r:      Use the right version.
s:      Silently include common lines.
v:      Verbosely include common lines.
q:      Quit.
</pre>

<p>
When you have finished updating the important configuration files, you can now
automatically update all the other configuration files. <c>etc-update</c> will
exit if it doesn't find any more updateable configuration files.
</p>

</body>
</subsection>
</section>
<section>
<title>Networking Options</title>
<subsection>
<title>Mirrors</title>
<body>

<!-- TODO: "Portage uses three variables"... "and one for the prebuilt
            packages." -->

<p>
As Gentoo is becoming increasingly popular, the use of mirrors is greatly
appreciated. Portage uses two variables for the mirrors: one for the rsync
mirrors (which is used to synchronise your Portage Tree with) and one for the
distfiles (which is used to download the sourcecode).
</p>

<p>
All possible distfiles mirrors are listed on our <uri 
link="/main/en/mirrors.xml">Gentoo mirrors page</uri>. You can also use 
<c>mirrorselect</c> which will easen the setup of mirrors for your system. But 
let us first check out the individual variables...
</p>

<p>
The <c>SYNC</c> variable contains a list of rsync-mirrors you wish to use. For
instance, to use <uri>rsync://rsync.namerica.gentoo.org/gentoo-portage</uri> as
first choice, and <uri>rsync://rsync.samerica.gentoo.org/gentoo-portage</uri> as
second, you would define this in <path>/etc/make.conf</path>:
</p>

<pre caption="Defining SYNC in /etc/make.conf">
SYNC="rsync://rsync.namerica.gentoo.org/gentoo-portage
      rsync://rsync.samerica.gentoo.org/gentoo-portage"
</pre>

<p>
The <c>GENTOO_MIRRORS</c> variable contains a list of distfiles mirrors you wish
to use. For instance, to use
<uri>ftp://ibiblio.org/pub/Linux/distributions/gentoo</uri> as first choice,
and <uri>http://www.gtlib.cc.gatech.edu/pub/gentoo</uri> as second, you would
define this in <path>/etc/make.conf</path>:
</p>

<pre caption="Defining GENTOO_MIRRORS in /etc/make.conf">
GENTOO_MIRRORS="ftp://ibiblio.org/pub/Linux/distributions/gentoo
                http://www.gtlib.cc.gatech.edu/pub/gentoo"
</pre>


<!-- TODO: No PORTAGE_BINHOST mirrors available yet 


<p>
The <c>PORTAGE_BINHOST</c> variable contains a list of prebuilt package mirrors
you wish to use. For instance, to use <uri>http://localhost</uri> as first
choice, and <uri>http://127.0.0.1</uri> as second, you would define this in
<path>/etc/make.conf</path>:
</p>

<pre caption="Defining PORTAGE_BINHOST in /etc/make.conf">
PORTAGE_BINHOST="http://localhost
                 http://127.0.0.1"
</pre>

- - - Until here -->

</body>
</subsection>
<subsection>
<title>Mirrorselect</title>
<body>

<p>
If you want to use <c>mirrorselect</c>, first install it (if you haven't done so
already).
</p>

<pre caption="Installing mirrorselect">
# <i>emerge mirrorselect</i>
</pre>

<p>
You can now opt to have <c>mirrorselect</c> automatically select the best
mirrors for you, or select the mirrors manually from a list. For more
information on how to use <c>mirrorselect</c>, just run <c>mirrorselect</c> from
the command line - it will give you a quick overview on <c>mirrorselect</c>.
</p>

<pre caption="Running mirrorselect">
# <i>mirrorselect</i>
</pre>

</body>
</subsection>
<subsection>
<title>Fetching</title>
<body>

<p>
The program which Portage uses to download archive files can be specified by
setting the <c>FETCHCOMMAND</c> and <c>RESUMECOMMAND</c> settings. Several 
examples are shown in <path>/etc/make.conf</path> and 
<path>/etc/make.globals</path>. Portage uses <c>wget</c> by default:
</p>

<pre caption="Default FETCHCOMMAND &amp; RESUMECOMMAND">
FETCHCOMMAND="/usr/bin/wget -t 5 --passive-ftp -P \${DISTDIR} \${URI}"
RESUMECOMMAND="/usr/bin/wget -c -t 5 --passive-ftp -P \${DISTDIR} \${URI}"
</pre>

<p>
The <c>${DISTDIR}</c> variable is substituted with the location where 
downloaded files are saved (<path>/usr/portage/distfiles</path>), while the 
<c>${URI}</c> variable is substituted with the file that Portage needs to 
download.
</p>

<p>
As Portage uses <c>wget</c> by default, you can configure it to use proxies by
defining <c>http_proxy</c> and <c>ftp_proxy</c> (note the small caps). Although 
you can do this in <path>/etc/make.conf</path> too ... <!-- TODO finish -->
</p>

</body>
</subsection>
</section>
<section>
<title>Directory Locations</title>
<subsection>
<title>Portage Tree</title>
<body>

</body>
</subsection>
<subsection>
<title>Distfiles</title>
<body>

</body>
</subsection>
<subsection>
<title>Packages and RPMs</title>
<body>

</body>
</subsection>
<subsection>
<title>Temporary Portage Files</title>
<body>

</body>
</subsection>
<subsection>
<title>Logging</title>
<body>

</body>
</subsection>
</section>
<section>
<title>Other Portage Options</title>
<subsection>
<title>Output Formatting</title>
<body>

</body>
</subsection>
<subsection>
<title>Delay Variables</title>
<body>

</body>
</subsection>
<subsection>
<title>Nice Value</title>
<body>

</body>
</subsection>
</section>
</sections>
