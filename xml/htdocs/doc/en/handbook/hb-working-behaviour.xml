<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/Attic/hb-working-behaviour.xml,v 1.10 2004/03/01 05:43:41 swift Exp $ -->

<sections>
<section>
<title>Configuration File Protection</title>
<subsection>
<title>Protecting?</title>
<body>

<p>
Portage knows the concept of "protected files". This means that, when you update
software, it will not immediately overwrite certain files with newer versions,
but inform you that a newer version exists. This is of course very usefull for
configuration files (the files that reside in <path>/etc</path>).
</p>

<p>
Instead of overwriting such files, it will create a new file called
<path>._cfg0000_&lt;name&gt;</path> with <path>&lt;name&gt;</path> being the 
original file name. It is then up to the user to merge the necessary differences
in the existing file. He can use the <c>etc-update</c> command to ease this
operation. We will talk about <c>etc-update</c> later.
</p>

</body>
</subsection>
<subsection>
<title>Declaring CONFIG_PROTECT</title>
<body>

<p>
Portage cannot protect on a file per file basis. Instead it protects entire
directories. The <c>CONFIG_PROTECT</c> variable lists all protected directories.
All subdirectories of the listed directories are protected too. The
<c>CONFIG_PROTECT</c> variable is defined in <path>/etc/make.globals</path>,
but if you want to change it, you should declare it in
<path>/etc/make.conf</path> (to keep things consistent
<path>/etc/make.conf</path> is used for all Portage configuration).
</p>

<pre caption="An example CONFIG_PROTECT setting">
CONFIG_PROTECT="/etc /usr/share/config /usr/kde/3.1/share/config"
</pre>

<p>
If you want a certain directory protected, but not all of its subdirectories,
you can "unprotect" these directories by listing them in the
<c>CONFIG_PROTECT_MASK</c> variable, which also has a default value defined in
<path>/etc/make.globals</path> but should be altered by declaring it in
<path>/etc/make.conf</path>:
</p>

<pre caption="An example CONFIG_PROTECT_MASK setting">
CONFIG_PROTECT_MASK="/etc/init.d"
</pre>

<p>
More information about the Configuration File Protection can be found in
<c>emerge</c>'s online help:
</p>

<pre caption="Getting information about Configuration File Protection">
# <i>emerge --help config</i>
</pre>

</body>
</subsection>
<subsection>
<title>etc-update</title>
<body>

<p>
<c>etc-update</c> is a tool that aids in merging the
<path>._cfg0000_&lt;name&gt;</path> files. It provides an interactive merging
setup and can also auto-merge trivial changes.
</p>

<p>
Running <c>etc-update</c> is pretty straight-forward:
</p>

<pre caption="Running etc-update">
# <i>etc-update</i>
</pre>

<p>
After merging the trivial changes, you will be prompted with a list of protected
files that have an update waiting. At the bottom you are greeted by the possible
options:
</p>

<pre caption="etc-update options">
Please select a file to edit by entering the corresponding number.
              (-1 to exit) (-3 to auto merge all remaining files)
                           (-5 to auto-merge AND not use 'mv -i'): 
</pre>

<p>
If you enter <c>-1</c>, <c>etc-update</c> will exit without performing any
changes. If you enter <c>-3</c> or <c>-5</c>, <e>all</e> listed configuration
files will be overwritten with the newer versions. It is therefore very
important to first select the configuration files that should not be
automatically updated. This is as easy as entering the number listed to the left
of that configuration file.
</p>

<p>
As an example, we select the configuration file <path>/etc/pear.conf</path>:
</p>

<pre caption="Updating a specific configuration file">
Beginning of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
<comment>[...]</comment>
End of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
1) Replace original with update
2) Delete update, keeping original as is
3) Interactively merge original with update
4) Show differences again
</pre>

<p>
You can now see the differences between the two files. If you believe that the
updated configuration file can be used without problems, enter <c>1</c>. If you
believe that the updated configuration file isn't necessary, or doesn't provide
any new or usefull information, enter <c>2</c>. If you want to interactively
update your current configuration file, enter <c>3</c>. 
</p>

<p>
It is not usefull to elaborate about the interactive merging here. For
completeness sake, we will list the possible commands you can use while you are
interactively merging the two files. You are greeted with two lines (the
original one, and the proposed new one) and a prompt at which you can enter one
of the following commands:
</p>

<pre caption="Commands available for the interactive merging">
ed:     Edit then use both versions, each decorated with a header.
eb:     Edit then use both versions.
el:     Edit then use the left version.
er:     Edit then use the right version.
e:      Edit a new version.
l:      Use the left version.
r:      Use the right version.
s:      Silently include common lines.
v:      Verbosely include common lines.
q:      Quit.
</pre>

<p>
When you have finished updating the important configuration files, you can now
automatically update all the other configuration files. <c>etc-update</c> will
exit if it doesn't find any more updateable configuration files.
</p>

</body>
</subsection>
</section>
<section>
<title>Networking Options</title>
<subsection>
<title>Mirrors</title>
<body>

<p>
As Gentoo is becoming increasingly popular, the use of mirrors is greatly
appreciated. Portage uses three variables for the mirrors: one for the rsync
mirrors (which is used to synchronise your Portage Tree with), one for the
distfiles (which is used to download the source code) and one for the prebuilt
packages.
</p>

<p>
All possible distfiles mirrors are listed on our <uri 
link="/main/en/mirrors.xml">Gentoo mirrors page</uri>. You can also use 
<c>mirrorselect</c> which will ease the setup of mirrors for your system. But 
let us first check out the individual variables...
</p>

<p>
The <c>SYNC</c> variable contains a list of rsync-mirrors you wish to use. For
instance, to use <uri>rsync://rsync.namerica.gentoo.org/gentoo-portage</uri> as
first choice, and <uri>rsync://rsync.samerica.gentoo.org/gentoo-portage</uri> as
second, you would define this in <path>/etc/make.conf</path>:
</p>

<pre caption="Defining SYNC in /etc/make.conf">
SYNC="rsync://rsync.namerica.gentoo.org/gentoo-portage
      rsync://rsync.samerica.gentoo.org/gentoo-portage"
</pre>

<p>
The <c>GENTOO_MIRRORS</c> variable contains a list of distfiles mirrors you wish
to use. For instance, to use
<uri>ftp://ibiblio.org/pub/Linux/distributions/gentoo</uri> as first choice,
and <uri>http://www.gtlib.cc.gatech.edu/pub/gentoo</uri> as second, you would
define this in <path>/etc/make.conf</path>:
</p>

<pre caption="Defining GENTOO_MIRRORS in /etc/make.conf">
GENTOO_MIRRORS="ftp://ibiblio.org/pub/Linux/distributions/gentoo
                http://www.gtlib.cc.gatech.edu/pub/gentoo"
</pre>


<p>
The <c>PORTAGE_BINHOST</c> variable contains a list of prebuilt package mirrors
you wish to use. For instance, to use 
<uri>ftp://login:pass@grp.mirror.site/pub/grp/i686/athlon-xp</uri>, you would 
define this in <path>/etc/make.conf</path>:
</p>

<pre caption="Defining PORTAGE_BINHOST in /etc/make.conf">
PORTAGE_BINHOST="ftp://login:pass@grp.mirror.site/pub/grp/i686/athlon-xp"
</pre>

</body>
</subsection>
<subsection>
<title>Mirrorselect</title>
<body>

<p>
If you want to use <c>mirrorselect</c>, first install it (if you haven't done so
already).
</p>

<pre caption="Installing mirrorselect">
# <i>emerge mirrorselect</i>
</pre>

<p>
You can now opt to have <c>mirrorselect</c> automatically select the best
mirrors for you, or select the mirrors manually from a list. For more
information on how to use <c>mirrorselect</c>, just run <c>mirrorselect</c> from
the command line - it will give you a quick overview on <c>mirrorselect</c>.
</p>

<pre caption="Running mirrorselect">
# <i>mirrorselect</i>
</pre>

</body>
</subsection>
<subsection>
<title>Fetching</title>
<body>

<p>
The program which Portage uses to download archive files can be specified by
setting the <c>FETCHCOMMAND</c> and <c>RESUMECOMMAND</c> settings. Several 
examples are shown in <path>/etc/make.conf</path> and 
<path>/etc/make.globals</path>. Portage uses <c>wget</c> by default:
</p>

<pre caption="Default FETCHCOMMAND &amp; RESUMECOMMAND">
FETCHCOMMAND="/usr/bin/wget -t 5 --passive-ftp -P \${DISTDIR} \${URI}"
RESUMECOMMAND="/usr/bin/wget -c -t 5 --passive-ftp -P \${DISTDIR} \${URI}"
</pre>

<p>
The <c>${DISTDIR}</c> variable is substituted with the location where 
downloaded files are saved (<path>/usr/portage/distfiles</path>), while the 
<c>${URI}</c> variable is substituted with the file that Portage needs to 
download.
</p>

<p>
As Portage uses <c>wget</c> by default, you can configure it to use proxies by
defining <c>http_proxy</c> and <c>ftp_proxy</c> (note the small caps). Although 
you can do this in <path>/etc/make.conf</path> too, you are advised to use a
more general approach as the <c>http_proxy</c> and <c>ftp_proxy</c> variables
are used by other tools too (<path>/etc/make.conf</path> is used by Portage 
only). Please read the chapter on <uri link="?part=2&amp;chap=6">Environment 
Variables</uri> on how to declare system-wide environment variables.
</p>

</body>
</subsection>
<subsection>
<title>Configuring rsync</title>
<body>

<p>
<c>rsync</c> is used by <c>emerge sync</c> to update your Portage tree. Three
variables used by Portage to change <c>rsync</c>'s behaviour are
<c>RSYNC_EXCLUDEFROM</c>, <c>RSYNC_RETRIES</c> and <c>RSYNC_TIMEOUT</c>.
</p>

<p>
A way to "protect" ebuilds from being updated or removed by <c>emerge
sync</c> is to use the <c>RSYNC_EXCLUDEFROM</c> variable. It should be set to a
file that is used by <c>rsync</c> to exclude certain files and defaults to
<path>/etc/portage/rsync_excludes</path>. It is <e>not</e> adviseable to use 
this method as it can break dependencies if you are not careful. We will talk
about <c>PORTDIR_OVERLAY</c> later on, which is the recommended method. For more
information, please read the <c>rsync</c> manpage.
</p>

<pre caption="The RSYNC_EXCLUDEFROM variable">
RSYNC_EXCLUDEFROM="/etc/portage/rsync_excludes"
</pre>

<p>
When <c>rsync</c> fails, it will retry a number of times before switching to the
next available rsync server. The number of retries is defined in
<c>RSYNC_RETRIES</c> and defaults to <c>3</c>:
</p>

<pre caption="The RSYNC_RETRIES variable">
RSYNC_RETRIES="3"
</pre>

<p>
If you are using a (very) slow rsync server, <c>rsync</c> can time-out if no
traffic is received anymore. The amount of seconds to wait before time-out is
defined in the <c>RSYNC_TIMEOUT</c> variable and defaults to <c>180</c>:
</p>

<pre caption="The RSYNC_TIMEOUT variable">
RSYNC_TIMEOUT="180"
</pre>

</body>
</subsection>
</section>
<section>
<title>Directory Locations</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Everything about Portage is configurable, including the directories used for the
various tasks and files needed by Portage. To change the default locations (as
defined in <path>/etc/make.globals</path>) you need to define the correct
variables in - where else :) - <path>/etc/make.conf</path>.
</p>

<warn>
If you alter a variable to point to a different location, <e>never</e> end the
path with a trailing <path>/</path> !
</warn>

</body>
</subsection>
<subsection>
<title>Portage Tree</title>
<body>

<p>
The location of the Portage tree is defined in the <c>PORTDIR</c> variable. It
defaults to <path>/usr/portage</path>:
</p>

<pre caption="The PORTDIR variable">
PORTDIR="/usr/portage"
</pre>

<p>
If you want to keep a local Portage tree next to the "official" one, you need to
define the <c>PORTDIR_OVERLAY</c> variable. The directory location(s) listed in
this value are unaffected by <c>emerge sync</c> actions: ebuilds in those
locations will not get updated or removed, but are part of your Portage tree.
</p>

<pre caption="The PORTDIR_OVERLAY variable">
PORTDIR_OVERLAY="/usr/local/portage"
</pre>

</body>
</subsection>
<subsection>
<title>Distfiles</title>
<body>

<p>
The location of the downloaded source code (so called distfiles) is defined in
the <c>DISTDIR</c> variable. It defaults to <path>${PORTDIR}/distfiles</path>:
</p>

<pre caption="The DISTDIR variable">
DISTDIR="${PORTDIR}/distfiles"
</pre>

</body>
</subsection>
<subsection>
<title>Packages and RPMs</title>
<body>

<p>
The location of the prebuilt packages is defined in the <c>PKGDIR</c> variable.
It defaults to <path>${PORTDIR}/packages</path>:
</p>

<pre caption="The PKGDIR variable">
PKGDIR="${PORTDIR}/packages"
</pre>

<p>
The location of the RPMs (yes, some packages are available as RPMs) is defined
in the <c>RPMDIR</c> variable. It defaults to <path>${PORTDIR}/rpm</path>:
</p>

<pre caption="The RPMDIR variable">
RPMDIR="${PORTDIR}/rpm"
</pre>

</body>
</subsection>
<subsection>
<title>Temporary Portage Files</title>
<body>

<p>
Portage uses a temporary location to build its ebuilds in. This location is
defined in the <c>PORTAGE_TMPDIR</c> variable. It defaults to
<path>/var/tmp</path>:
</p>

<pre caption="The PORTAGE_TMPDIR variable">
PORTAGE_TMPDIR="/var/tmp"
</pre>

<p>
Per default, Portage will create a <path>portage</path> directory inside
<c>PORTAGE_TMPDIR</c>. This is declared in the <c>BUILD_PREFIX</c> variable:
</p>

<pre caption="The BUILD_PREFIX variable">
BUILD_PREFIX="${PORTAGE_TMPDIR}/portage"
</pre>

<p>
If you intend to change the location, make sure this temporary directory is on a
partition with a sufficient amount of free space: when compiling big software
packages, the directory can grow to 2 Gb and beyond!
</p>

</body>
</subsection>
<subsection>
<title>Logging</title>
<body>

<p>
The <c>PORT_LOGDIR</c> is a special variable and unset by default. When you 
define it, Portage will create per-ebuild logs in the given directory:
</p>

<pre caption="The PORT_LOGDIR variable">
PORT_LOGDIR="/var/log/portage"
</pre>

</body>
</subsection>
</section>
<section>
<title>Other Portage Options</title>
<subsection>
<title>Nice Value</title>
<body>

<p>
Portage supports building with a different nice-value (a priority-like value).
If you want to have Portage build packages with a higher nice-value (resulting
in a more responsive system during the building process, but which also
increases the build time) you can define the <c>PORTAGE_NICENESS</c> variable
with a positive number:
</p>

<pre caption="The PORTAGE_NICENESS variable">
PORTAGE_NICENESS="3"
</pre>

</body>
</subsection>
<subsection>
<title>SLOT'ed Packages and Automatic Cleaning</title>
<body>

<p>
In several situations you want multiple different versions of a package
(including libraries) to be available on your system. Portage supports this by
defining the <c>SLOT</c> variable in the ebuilds. As a user, you don't have to
know how <c>SLOT</c>'ing works, but it is important you know it is supported.
</p>

<p>
If you are installing a newer version of a package, Portage will check if the
<c>SLOT</c> variable is declared for that package. If that is the case, and the
<c>SLOT</c> variable is different for both packages (new and old), Portage will
not touch the older package.
</p>

<p>
However, if the <c>SLOT</c> variable is the same (as is usually the case), the
older package will be removed by default. In order for the user to interrupt
this removal, Portage will count down a certain amount of seconds. This amount
is defined in the <c>CLEAN_DELAY</c> variable and defaults to <c>5</c> seconds:
</p>

<pre caption="The CLEAN_DELAY variable">
CLEAN_DELAY="5"
</pre>

<p>
If you don't want Portage to automatically remove the older versions (called
"cleaning") you can set the <c>AUTOCLEAN</c> variable to <c>no</c>:
</p>

<pre caption="The AUTOCLEAN variable">
AUTOCLEAN="no"
</pre>

</body>
</subsection>
<subsection>
<title>Build Related Variables</title>
<body>

<p>
We have already encountered quite a lot of variables, but we are not done yet.
People who have installed Gentoo will know about the <c>CHOST</c>, <c>CFLAGS</c>
and <c>CXXFLAGS</c> variables, used by the compiler to compile and optimize the
packages.
</p>

<p>
More information about these variables can be found in the <c>gcc</c> info
pages, or online in the <uri
link="http://www.gnu.org/software/gcc/onlinedocs/">GCC Online Manuals</uri>.
</p>

<pre caption="Getting information on CHOST, CFLAGS and CXXFLAGS">
# <i>info gcc</i>
<comment>(Select "Invoking gcc")</comment>
<comment>(Select "Optimize options")</comment>
</pre>

<p>
If the <c>DEBUGBUILD</c> is defined, Portage will not strip the binaries and
libraries to make debugging more easy. This slows down your system and increases
the filesizes.
</p>

<pre caption="The DEBUGBUILD variable">
<comment># Do not set this to "false"; instead remove the line. Portage does not</comment>
<comment># check the value, it just checks if the variable is defined.</comment>
DEBUGBUILD="true"
</pre>

<p>
The <c>MAKEOPTS</c> variable is used by <c>make</c>, a tool used to ease the
compilation of a package. It is usually defined to tell <c>make</c> to run
several compilations simultaneously (especially if you have a multi-CPU system, 
or are using <c>distcc</c> as described previously).
</p>

<p>
To have <c>make</c> run three compilations simultaneously, set the 
<c>MAKEOPTS</c> variable to <c>-j3</c>:
</p>

<pre caption="The MAKEOPTS variable">
MAKEOPTS="-j3"
</pre>

<p>
The <c>ROOT</c> variable shouldn't be set in <path>/etc/make.conf</path>, but
rather as environment variable. Portage will check this variable to see where a
package needs to be installed. Of course, this defaults to <path>/</path>. As
an example we show you how to install <c>gnumeric</c> in 
<path>/mnt/gentoo</path> instead of in your running system:
</p>

<pre caption="The ROOT variable">
# <i>ROOT="/mnt/gentoo" emerge gnumeric</i>
</pre>

</body>
</subsection>
<subsection>
<title>Output Formatting</title>
<body>

<p>
By default, Portage colors its output to improve readability. If you do not want
this, set the <c>NOCOLOR</c> variable to <c>true</c>:
</p>

<pre caption="The NOCOLOR variable">
NOCOLOR="true"
</pre>

</body>
</subsection>
</section>
<section>
<title>Resources</title>
<subsection>
<title>Man Pages</title>
<body>

<p>
If you need a quick reference on all listed variables, please consult the
<path>make.conf</path> man page:
</p>

<pre caption="Consulting the make.conf man page">
# <i>man make.conf</i>
</pre>

</body>
</subsection>
<subsection>
<title>Commented Examples</title>
<body>

<p>
The <path>/etc/make.conf</path> file contains lots of comments, including
examples you might find interesting. However, most people don't update their
<path>/etc/make.conf</path> interactively and therefore miss updates to the
files. You can find the latest <path>/etc/make.conf</path> file in our
<uri
link="http://www.gentoo.org/cgi-bin/viewcvs.cgi/*checkout*/portage/cnf/make.conf?rev=HEAD&amp;cvsroot=gentoo-src&amp;content-type=text/plain">Online
ViewCVS Repository</uri>.
</p>

</body>
</subsection>
</section>
</sections>
