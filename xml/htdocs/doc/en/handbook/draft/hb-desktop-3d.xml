<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/draft/Attic/hb-desktop-3d.xml,v 1.2 2004/04/25 19:32:04 swift Exp $ -->

<sections>
<section>
<title>Preparing yourself for DRI</title>
<subsection>
<title>What is hardware 3D acceleration and why do I want it?</title>
<body>

<p>
With hardware 3D acceleration, three-dimensional rendering uses the graphics
processor on your video card instead of taking up valuable CPU resources drawing
3D images. It's also referred to as "hardware acceleration" instead of "software
acceleration" because without this 3D acceleration your CPU is forced to draw
everything itself using the Mesa software rendering libraries, which takes up
quite a bit of processing power. While Xorg typically supports 2D hardware
acceleration, it often lacks hardware 3D acceleration. Three-dimensional
hardware acceleration is valuable in situations requiring rendering of 3D
objects such as games, 3D CAD and modeling.
</p>

</body>
</subsection>
<subsection>
<title>How do I get hardware 3D acceleration?</title>
<body>

<p>
In many cases, both binary and open-source drivers exist. Open-source drivers
are preferable since we're using Linux and open source is one of its underlying
principles. Sometimes, binary drivers are the only option, like with nVidia's
cards. Binary drivers include media-video/nvidia-kernel and
media-video/nvidia-glx for nVidia cards, media-video/mgavideo for Matrox cards
and media-video/ati-drivers for ATI cards. Other open-source drivers include
media-video/kyro-kernel for KyroII cards and media-video/ati-gatos for ATI
cards, which aim to support ATI's video capabilities more fully.
</p>

</body>
</subsection>
<subsection>
<title>What is DRI?</title>
<body>

<p>
The Direct Rendering Infrastructure (<uri>http://dri.sourceforge.net</uri>), 
also known as the DRI, is a framework for allowing direct access to graphics 
hardware in a safe and efficient manner. It includes changes to the X server, 
to several client libraries and to the kernel. The first major use for the DRI 
is to create fast OpenGL implementations.
</p>

</body>
</subsection>
<subsection>
<title>What is XFree-DRM and how does it relate to regular XFree86?</title>
<body>

<p>
XFree-DRM is an <e>enhancement</e> to XFree86/Xorg that adds 3D acceleration for
cards by adding the kernel module necessary for direct rendering.
</p>

</body>
</subsection>
<subsection>
<title>Purpose</title>
<body>

<p>
This guide is for people who can't get direct rendering working with just XFree.
XFree-DRM works for 3dfx, gamma, i8x0, matrox, rage128, radeon, mach64 (as of
xfree-drm-4.3.0-r7) and sis300 series drivers. Since the 2.4 kernels' Direct
Rendering Manager (DRM) doesn't support XFree 4.3/Xorg, the xfree-drm package is
needed. If you're using a 2.6 kernel, its DRM supports XFree 4.3/Xorg; Gentoo's
XFree-DRM package is not yet working on 2.6 kernels. See the <uri
link="http://dri.sourceforge.net">DRI homepage</uri> for more info and
documentation.
</p>

</body>
</subsection>
</section>
<section>
<title>Install XFree-DRM and configure direct rendering</title>
<subsection>
<title>Install XFree-DRM</title>
<body>

<p>
Installing XFree-DRM is a breeze:
</p>

<pre caption="Installing xfree-drm">
# <i>emerge xfree-drm</i>
</pre>

</body>
</subsection>
<subsection>
<title>Configure XF86Config or xorg.conf</title>
<body>

<p>
Open <path>/etc/X11/XF86Config</path> (XFree) or <path>/etc/X11/xorg.conf</path>
(Xorg) and edit it to enable DRI and GLX:
</p>

<pre caption="Editing the X configuration file">
...
Section "Module"
  Load "dri"
  Load "glx"
  ...
EndSection
...
Section "Device"
  <comment># Replace radeon with your driver</comment>
  Driver "radeon"
  ...
EndSection
...
Section "dri"
  Mode 0666
EndSection
</pre>

</body>
</subsection>
<subsection>
<title>Testing your Changes</title>
<body>

<p>
Start your graphical environment and run the following command:
</p>

<pre caption="Testing DRI">
$ <i>glxinfo | grep rendering</i>
direct rendering: Yes
</pre>

<p>
If it sais "No" then you have a problem. Otherwise you're all set :)
</p>

</body>
</subsection>
</section>
<section>
<title>Using the CVS sources</title>
<subsection>
<title>Do you Need the CVS Sources?</title>
<body>

<p>
First you have to check whether the xfree-drm package works. If it doesn't and
you have checked your logs to verify it's not a configuration error, you might
want to consider the CVS sources. There are also daily driver snapshots
available if you do not wish to build the full CVS.
</p>

<p>
Check the DRI <uri link="http://dri.sourceforge.net/dri_status.phtml">supported
card list</uri> to see if the CVS supports your card. Even if it doesn't, but it
supports a similar card, try it.
</p>

</body>
</subsection>
<subsection>
<title>Building the CVS sources</title>
<body>

<p>
First create a directory to store the CVS files in:
</p>

<pre caption="Creating a CVS directory">
# <i>mkdir ~/DRI-CVS</i>
</pre>

<p>
Now check out the CVS sources:
</p>

<pre caption="Checking out the CVS sources">
# <i>cd ~/DRI-CVS</i>
# <i>cvs -d:pserver:anonymous@cvs.dri.sourceforge.net:/cvsroot/dri login</i>
<comment>(Hit Enter when asked for a password)</comment>
# <i>cvs -z3 -d:pserver:anonymous@cvs.dri.sourceforge.net:/cvsroot/dri co xc</i>
</pre>

<p>
If you already have a CVS checkout but you want to update your sources, run
the cvs <c>update</c> command:
</p>

<pre caption="Updating CVS sources">
# <i>cd ~/DRI-CVS</i>
# <i>cvs -z3 update -dA xc</i>
</pre>

<p>
Rather than placing object files and library files right in the source tree,
they're instead put into a parallel build tree. The build tree is made with the
<c>lndir</c> command:
</p>

<pre caption="Creating a parallel build tree">
# <i>cd ~/DRI-CVS</i>
# <i>ln -s xc XServer</i>
# <i>mkdir build; cd build</i>
# <i>lndir -silent -ignorelinks ../XServer</i>
</pre>

<p>
The build tree will be populated with symbolic links which point back into the
CVS source tree. Advanced users may have several build trees for compiling and
testing with different options.
</p>

</body>
</subsection>
<subsection>
<title>Edit the host.def file</title>
<body>

<p>
The <path>~/DRI-CVS/build/xc/config/cf/host.def</path> file is used to 
configure the XFree86 build process. You can change it to customize your build 
options or make adjustments for your particular system configuration. The 
default host.def file will look something like this:
</p>

<pre caption="host.def">
#define DefaultCCOptions -Wall
<comment>/* For i386: */</comment>
#define DefaultGcc2i386Opt -O2
<comment>/* For Alpha: */</comment>
#define DefaultGcc2AxpOpt -O2 -mcpu=ev6 (or similar)
<comment>/* For all architectures */</comment>
#define LibraryCDebugFlags -O2
#define BuildServersOnly YES
#define XF86CardDrivers vga tdfx mga ati i810
#define LinuxDistribution LinuxRedHat
#define DefaultCCOptions -ansi GccWarningOptions -pipe
#define BuildXF86DRI YES
<comment>/* Optionally turn these on for debugging */
/* #define GlxBuiltInTdfx YES */
/* #define GlxBuiltInMga YES */
/* #define GlxBuiltInR128 YES */
/* #define GlxBuiltInRadeon YES */
/* #define DoLoadableServer NO */</comment>
#define SharedLibFont NO
</pre>

<pre caption="host.def continued">
<comment>/* Note the XF86CardDrivers line to be sure your card's driver is listed.
   If you want to enable 3DNow! optimizations in Mesa and the DRI drivers, you
   should add the following: */</comment>
#define MesaUse3DNow YES
<comment>/* You don't have to be using an AMD processor to enable this option.
   The DRI will look for 3DNow! support at runtime and only enable it if
   applicable. */</comment>
</pre>

</body>
</subsection>
<subsection>
<title>Compile the XServer/DRI Tree</title>
<body>

<p>
Now compile the complete DRI tree:
</p>

<pre caption="Compiling the DRI tree">
# <i>cd ~/DRI-CVS/build/xc/</i>
# <i>make World &gt;&amp; world.log</i>
</pre>

<p>
It may also be necessary to do the following, depending on what you placed in
host.def:
</p>

<pre caption="Further compiling steps">
# <i>cd ~/DRI-CVS/build/xc/programs/Xserver/hw/xfree86/os-support/linux/drm/kernel</i>
<comment>(Replace "radeon" with your driver)</comment>
# <i>make -f Makefile.linux radeon.o</i>
</pre>

<p>
Using your text editor, examine world.log for errors by searching for the
pattern <path>***</path>.
</p>

</body>
</subsection>
<subsection>
<title>Install the freshly-build sources</title>
<body>

<p>
Verify that the DRI kernel module(s) for your system were built:
</p>

<pre caption="Verification">
# <i>cd ~/DRI-CVS/build/xc/programs/Xserver/hw/xfree86/os-support/linux/drm/kernel</i>
# <i>ls</i>
</pre>

<p>
For the 3dfx Voodoo, you should see tdfx.o. For the Matrox G200/G400, you should
see mga.o. For the ATI Rage 128, you should see r128.o. For the ATI Radeon, you
should see radeon.o. For the Intel i810, you should see i810.o. If the DRI
kernel module(s) failed to build, you should verify that you're using the right
version of the Linux kernel. The most recent kernels are not always supported.
</p>

<p>
Install over your XFree86 installation. You may wish to back up xfree.
</p>

<pre caption="Backing up XFree">
# <i>quickpkg xfree</i>
# <i>make install</i>
</pre>

<p>
To load the appropriate DRM module in your running kernel, copy the kernel
module to <path>/lib/modules/`uname -r`/kernel/drivers/char/drm/</path> then run
<c>modules-update</c> and restart your X server. If you're not running the 
kernel you'll be using it in, instead of <c>`uname -r`</c>, use that kernel's 
name.
</p>

</body>
</subsection>
</section>
<section>
<title>Tweak your Performance</title>
<subsection>
<title>Get the Most out of Direct Rendering</title>
<body>

<p>
A few options may increase performance by up to 30 percent (or more) over the
default. Set them in <path>/etc/X11/XF86Config</path> (XFree) or
<path>/etc/X11/xorg.conf</path> (Xorg):
</p>

<pre caption="XF86Config/xorg.conf Tweaks">
Section "Device"
  Option     "AGPMode" "4"
  Option     "AGPFastWrite" "True"
  Option     "EnablePageFlip" "True"
  ...
EndSection
</pre>

<p>
If you want to set even more features, check out the <uri
link="http://dri.sourceforge.net/doc/dri_driver_features.phtml">features 
listing</uri> on the DRI Web site.
</p>

</body>
</subsection>
</section>
<section>
<title>Troubleshooting</title>

<!-- TODO integrate troubleshooting from dri-howto -->

</section>
</sections>
