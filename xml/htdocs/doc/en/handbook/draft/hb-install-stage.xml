<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/draft/Attic/hb-install-stage.xml,v 1.2 2004/01/05 21:32:30 swift Exp $ -->

<sections>
<section>
<title>Prebuilt or Compile-All?</title>
<subsection>
<body>

<p>
When we asked you to choose for an installation medium (LiveCDs, existing
distribution etc.) we explained you what the pros and cons are. One of those was
the availability of the necessary stage tarball(s): do you go for a full 
compilation (<e>stage1</e>), skip the bootstrapping (<e>stage2</e>) or start 
from a precompiled state (<e>stage3</e>)?
</p>

<p>
We also discussed the possibility of installing Gentoo through prebuilt
packages, the so-called GRP. It is now time to elaborate more on this concept we
call the <e>Gentoo Reference Platform</e>.
</p>

</body>
</subsection>
<subsection>
<title>What is the Gentoo Reference Platform?</title>
<body>

<p>
The Gentoo Reference Platform, from now on abbreviated to GRP, is a snapshot of
prebuilt packages users (that means you!) can install during the installation of
Gentoo to speed up the installation process. The GRP consists out of all
packages required to have a fully functional Gentoo installation. They are not
only sufficient to have a base installation up to speed in no time, but all
lengthier builds (such as KDE, XFree, GNOME, OpenOffice, Mozilla, ...) are
available as GRP packages too.
</p>

<p>
However, these prebuilt packages aren't maintained during the lifetime of the
Gentoo distribution. They are snapshots released at every Gentoo release and
make it possible to have a functional environment in a short amount of time. You
can then upgrade your system in the background while working in your Gentoo
environment.
</p>

</body>
</subsection>
<subsection>
<title>How Portage Handles GRP Packages</title>
<body>

<p>
In order for Portage to be able to install the prebuilt packages they must
reside in the <path>/usr/portage/packages/All</path> directory. If you are
installing Gentoo from a LiveCD that houses these packages and you wish to
install Gentoo using the GRP packages, we will tell you how to copy over those 
packages to this location later.
</p>

<p>
However, having the packages alone isn't sufficient: your Portage tree - the
collection of <e>ebuilds</e> (files that contain all information about a
package, such as its description, homepage, sourcecode URLs, compilation
instructions, dependencies, etc.) - must be synchronised with the GRP set: the
versions of the available ebuilds and their accompanying GRP packages must 
match.
</p>

<p>
For this reason you will have to install a Portage snapshot instead of
synchronising Portage with the latest available tree if you want to use the GRP
installation method.
</p>

</body>
</subsection>
<subsection>
<title>Making your Choice</title>
<body>

<p>
You should now have made a decision on what <e>stage</e> you want to use to
install Gentoo from. You have the option of downloading the required
<e>stage</e> tarball from the Internet or copy it over from your installation
medium (LiveCD) if it is available.
</p>

<ul>
<li><uri link="#doc_chap2">Default: Using a Stage from the Internet</uri></li>
<li><uri link="#doc_chap3">Alternative: Using a Stage from the LiveCD</uri></li>
</ul>

</body>
</subsection>
</section>
<section>
<title>Default: Using a Stage from the Internet</title>
<subsection>
<title>Downloading the Stage Tarball</title>
<body>

<p>
Go to the Gentoo mountpoint at which you mounted your filesystems
(most likely <path>/mnt/gentoo</path>):
</p>

<pre caption="Going to the Gentoo mountpoint">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
Depending on your installation medium, you have a couple of tools available to
download a stage. If you have <c>lynx</c> available, then you can immediately
surf to <uri link="/main/en/mirrors.xml">the Gentoo
mirrorlist</uri> and choose a mirror close to you. Then pick the
<path>releases/</path> directory, followed by your architecture (for instance
<path>x86/</path>) and the Gentoo version (<path>1.4/</path>) to finish up with
the <path>stages/</path> directory. For there on you should see all available
stage files for your architecture. Select one and press <c>D</c> to download.
When you're finished, press <c>Q</c> to quit the browser.
</p>

<pre caption="Surfing to the mirror listing with lynx">
# <i>lynx http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

<p>
If you do not have <c>lynx</c>, you should have <c>links2</c> at your disposal.
<c>links2</c> is more powerful than <c>lynx</c>, but has some drawbacks. One of
them is that it doesn't listen to the proxy variables we have declared
previously. If you need to setup a proxy, use <c>links2 -http-proxy
proxy.server.com:8080</c>. From there on, you should follow the same steps as
with <c>lynx</c> as they are equivalent.
</p>

<pre caption="Surfing to the mirror listing with links2">
<comment>(Without proxy:)</comment>   # <i>links2 http://www.gentoo.org/main/en/mirrors.xml</i>
<comment>(With proxy:)</comment>      # <i>links2 -http-proxy proxy.server.com:8080 http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

</body>
</subsection>
<subsection>
<title>Unpacking the Stage Tarball</title>
<body>

<p>
Now unpack your downloaded stage onto your system. We use GNU's <c>tar</c> to
proceed as it is the easiest method:
</p>

<pre caption="Unpacking the stage">
# <i>tar -xvjpf stage?-*.tar.bz2</i>
</pre>

<p>
Make sure that you use the same options (<c>-xvjpf</c>). The <c>x</c> stands for
<e>Extract</e>, the <c>v</c> for <e>Verbose</e> (okay, yes, this is optional),
the <c>j</c> for <e>Decompress with bzip2</e>, the <c>p</c> for <e>Preserve
permissions</e> and the <c>f</c> to denote that we want to extract a file, not
standard input.
</p>

<p>
If you want to use GRP (note that this implies that you've installed a
<e>stage3</e> tarball), continue with <uri link="#doc_chap5">Optional: 
Preparing for GRP</uri>. Otherwise continue with <uri 
link="#doc_chap6">Configuring the Compile Options</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>Alternative: Using a Stage from the LiveCD</title>
<subsection>
<title>Extracting the Stage Tarball</title>
<body>

<p>
The stages on the CD reside in the <path>/mnt/cdrom/stages</path> directory. To
see a listing of available stages, use <c>ls</c>:
</p>

<pre caption="List all available stages">
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
If the system replies with an error, you may need to mount the CD-ROM first:
</p>

<pre caption="Mounting the CD-ROM">
# <i>ls /mnt/cdrom/stages</i>
ls: /mnt/cdrom/stages: No such file or directory
# <i>mount /dev/cdroms/cdrom0 /mnt/cdrom</i>
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
Now go into your Gentoo mountpoint (usually <path>/mnt/gentoo</path>):
</p>

<pre caption="Changing directory to /mnt/gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
We will now extract the stage tarball of your choice. We will do this with the
GNU <c>tar</c> tool. Make sure you use the same options (<c>-xvjpf</c>)! In the
next example, we extract the stage tarball <path>stage3-20031011.tar.bz2</path>.
Be sure to substitute the tarball filename with your stage.
</p>

<pre caption="Extracting the stage tarball">
# <i>tar -xvjpf /mnt/cdrom/stages/stage3-20031011.tar.bz2</i>
</pre>

<p>
If you want to install Gentoo but have no working Internet connection (or you
just don't want to use it), continue with <uri link="#doc_chap4">Optional:
Preparing for a Networkless Installation</uri>. If you want to use your Internet
connection but also want to use GRP, continue with <uri
link="#doc_chap5">Optional: Preparing for GRP</uri>. And if none of those two
options apply to you, continue with <uri link="#doc_chap6">Configuring the
Compile Options</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>Optional: Preparing for a Networkless Installation</title>
<subsection>
<title>Installing a Portage Snapshot and Source Code</title>
<body>

<p>
There is a Portage snapshot available on some LiveCDs. Since you are reading
this, we can safely assume you are using such a LiveCD. To install this
snapshot, take a look inside <path>/mnt/cdrom/snapshots/</path> to see what
snapshot we have available:
</p>

<pre caption="Checking the /mnt/cdrom/snapshots content">
# <i>ls /mnt/cdrom/snapshots</i>
</pre>

<p>
Now extract the snapshot using the following construct. Again,
make sure you use the correct options to <c>tar</c>. Also, the <c>-C</c> is with
a capital <c>C</c>, not <c>c</c>. In the next example we use
<path>portage-20031011.tar.bz2</path> as the snapshot filename. Be sure to
substitute with your snapshot.
</p>

<pre caption="Extracting a Portage snapshot">
# <i>tar -xvjf /mnt/cdrom/snapshots/portage-20031011.tar.bz2 -C /mnt/gentoo/usr</i>
</pre>

<p>
You also need to copy over all source code from the CD, even if you want to
use GRP as we don't provide prebuilt kernel images yet:
</p>

<pre caption="Copy over source code">
# <i>mkdir /mnt/gentoo/usr/portage/distfiles</i>
# <i>cp /mnt/cdrom/distfiles/* /mnt/gentoo/usr/portage/distfiles/</i>
</pre>

<p>
If you want to use GRP (precompiled binaries), continue with <uri
link="#doc_chap5_sect2">Copying over the GRP packages</uri>. Otherwise continue 
with <uri link="#doc_chap6">Configuring the Compile Options</uri>.
</p>

</body>
</subsection>

</section>
<section>
<title>Optional: Preparing for GRP</title>
<subsection>
<title>Downloading a Portage Snapshot</title>
<body>

<p>
In order to succesfully use GRP, you need to download a matching Portage
snapshot. Go to one of our <uri link="/main/en/mirrors.xml">mirrors</uri> 
with <c>lynx</c> (or <c>links2</c>) and download the Portage snapshot available
from <path>foo/bar/bleh</path>. Be sure you are located inside
<path>/mnt/gentoo</path> so that the downloaded snapshot is saved on your disk.
</p>

<pre caption="Downloading a Portage Snapshot">
# <i>cd /mnt/gentoo</i>
# <i>lynx http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

<p>
Now extract the snapshot using the following construct. Again,
make sure you use the correct options to <c>tar</c>. Also, the <c>-C</c> is with
a capital <c>C</c>, not <c>c</c>. In the next example we use
<path>portage-20031011.tar.bz2</path> as the snapshot filename. Be sure to
substitute with your snapshot.
</p>

<pre caption="Extracting a Portage snapshot">
# <i>tar -xvjf /mnt/gentoo/portage-20031011.tar.bz2 -C /mnt/gentoo/usr</i>
</pre>

</body>
</subsection>
<subsection>
<title>Copying over the GRP packages</title>
<body>

<p>
If you have booted from a Gentoo LiveCD that contains the GRP packages you
can now copy over those packages onto your filesystem so that Portage can 
use them:
</p>

<pre caption="Copy over precompiled packages">
# <i>mkdir -p /mnt/gentoo/usr/portage/packages/All</i>
# <i>cp /mnt/cdrom/packages/All/* /mnt/gentoo/usr/portage/packages/All/</i>
</pre>

<p>
If you want Portage to download the GRP packages for you instead, continue with 
<uri link="#doc_chap5_sect3">Optional: Configuring Portage for GRP 
Downloads</uri>. Otherwise continue with <uri link="#doc_chap5_sect4">Optional: 
What Happens Now?</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Optional: Configuring Portage for GRP Downloads</title>
<body>

<p>
First of all, you need to edit <path>/mnt/gentoo/etc/make.conf</path> and define
the <c>PORTAGE_BINHOST</c> variable so that it points to the server from which
you want to download the GRP packages:
</p>

<pre caption="Editing /mnt/gentoo/etc/make.conf">
# <i>nano -w /mnt/gentoo/etc/make.conf</i>
</pre>

<pre caption="Setting the PORTAGE_BINHOST variable">
PORTAGE_BINHOST="ftp://some.mirror.com/pub/gentoo/releases/grp"
</pre>

<p>
Save and exit (by pressing Ctrl-X and confirming). With this in place, you must 
now pay close attention. Portage will not automagically download the GRP 
packages if you don't instruct it to. However, this isn't hard: every time you 
are asked to install a package using <c>emerge</c>, you must add 
<c>--getbinpkg</c> as an option:
</p>

<pre caption="Example for Downloading GRP Packages">
<comment>(Example without downloading GRP)</comment>
# <i>emerge vanilla-sources</i>

<comment>(Example with downloading GRP)</comment>
# <i>emerge --getbinpkg vanilla-sources</i>
</pre>

<p>
That's all there is to it. Just don't forget to add <c>--getbinpkg</c>. Now
continue with <uri link="#doc_chap6">Configuring the Compile Options</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Optional: What Happens Now?</title>
<body>

<p>
Now pay close attention! Your Portage snapshot is in place and the GRP packages
are ready to be used. However, Portage doesn't automagically use them unless you
tell it to. Luckily, this is hardly difficult: every time you are asked to
install a package using <c>emerge</c>, you must add <c>--usepkg</c> as an
option:
</p>

<pre caption="Example for Installing a GRP Package">
<comment>(Example without GRP:)</comment>
# <i>emerge vanilla-sources</i>

<comment>(Example with GRP:)</comment>
# <i>emerge --usepkg vanilla-sources</i>
</pre>

<p>
That's all there is to it. Just don't forget to add <c>--usepkg</c>. Now
continue with <uri link="#doc_chap6">Configuring the Compile Options</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>Configuring the Compile Options</title>
<subsection>
<title>Introduction</title>
<body>

<p>
To optimize Gentoo, you can set a couple of variables which impact Portage 
behaviour. All those variables can be set as environment variables (using
<c>export</c>) but that isn't permanent. To keep your settings, Portage provides
you with <path>/etc/make.conf</path>, a configuration file for Portage. It is
this file we will edit now. 
</p>

<note>
A commented listing of all possible variables can be found in
<path>/mnt/gentoo/etc/make.conf(.example)</path>. For a successful Gentoo 
installation you'll only need to set the variables which are mentioned beneath.
</note>

<p>
Fire up your favorite editor (in this guide we use <c>nano</c>) so we can alter
the optimization variables we will discuss hereafter.
</p>

<pre caption="Opening /etc/make.conf">
# <i>nano -w /mnt/gentoo/etc/make.conf</i>
</pre>

<p>
As you probably notice now, the <path>make.conf(.example)</path> file is
structured in a generic way: commented lines start with "#", other lines define
variables using the <c>VARIABLE="content"</c> syntax. Several of those
variables are discussed next.
</p>

</body>
</subsection>
<subsection>
<title>CHOST</title>
<body>

<warn>
Although it might be tempting for non-stage1 users, they should <e>not</e>
change the <c>CHOST</c> setting in <path>make.conf</path>. Doing so might render
their system unusable. Again: only change this variable if you use a
<e>stage1</e> installation.
</warn>

<p>
The <c>CHOST</c> variable defines what architecture <c>gcc</c> has to
compile programs for. The possibilities are:
</p>

<table>
<tr>
  <th>Architecture</th>
  <th>Subarchitecture</th>
  <th>CHOST Setting</th>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i386</ti>
  <ti>i386-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i486</ti>
  <ti>i486-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i586</ti>
  <ti>i586-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i686 and above (incl. athlon)</ti>
  <ti>i686-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>alpha</ti>
  <ti></ti>
  <ti>alpha-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>ppc</ti>
  <ti></ti>
  <ti>powerpc-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>sparc</ti>
  <ti></ti>
  <ti>sparc-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>(generic)</ti>
  <ti>hppa-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>pa7000</ti>
  <ti>hppa1.1-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>pa8000 and above</ti>
  <ti>hppa2.0-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>mips</ti>
  <ti></ti>
  <ti>mips-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>amd64</ti>
  <ti></ti>
  <ti>x86_64-pc-linux-gnu</ti>
</tr>
</table>

</body>
</subsection>
<subsection>
<title>CFLAGS and CXXFLAGS</title>
<body>

<p>
The <c>CFLAGS</c> and <c>CXXFLAGS</c> variables define the optimization flags 
for the <c>gcc</c> C and C++ compiler respectively. Although we define those
generally here, you will only have maximum performance if you optimize these
flags for each program separately. The reason for this is because every program
is different.
</p>

<p>
In <path>make.conf</path> you should define the optimization flags you think
will make your system the most responsive <e>generally</e>. Don't place
experimental settings in this variable; too much optimization can make 
programs behave bad (crash, or even worse, malfunction).
</p>

<p>
We will not explain all possible optimization options. If you want to know
them all, read the <uri link="http://www.gnu.org/software/gcc/onlinedocs/">GNU
Online Manual(s)</uri> or the <c>gcc</c> info page (<c>info gcc</c> -- only
works on a working Linux system). The <path>make.conf</path> file itself also
contains lots of examples and information; don't forget to read it too. 
</p>

<p>
A first setting is the <c>-march=</c> flag, which specifies the name of the
target architecture. Possible options are described in the
<path>make.conf</path> file (as comments). For instance, for the x86 Athlon XP
architecture:
</p>

<pre caption="The GCC march setting">
-march=athlon-xp
</pre>

<p>
A second one is the <c>-O</c> flag, which specifies the <c>gcc</c> optimization
class flag. Possible classes are <c>s</c> (for size-optimized),
<c>0</c> (for no optimizations), <c>1</c>, <c>2</c> or <c>3</c> for more
speed-optimization flags (every class has the same flags as the one before, plus
some extras). For instance, for a class-2 optimization:
</p>

<pre caption="The GCC O setting">
-O2
</pre>

<p>
Other popular optimization flags are <c>-pipe</c> (use pipes rather than
temporary files for communication between the various stages of compilation) and
<c>-fomit-frame-pointer</c> (which doesn't keep the frame pointer in a register
for functions that don't need one).
</p>

<p>
When you define the <c>CFLAGS</c> and <c>CXXFLAGS</c>, you should combine
several optimization flags, like in the following example:
</p>

<pre caption="Defining the CFLAGS and CXXFLAGS variable">
CFLAGS="-march=athlon-xp -pipe -O2"
CXXFLAGS="${CFLAGS}"                  <comment># Use the same settings for both variables</comment>
</pre>

</body>
</subsection>
<subsection>
<title>MAKEOPTS</title>
<body>

<p>
With <c>MAKEOPTS</c> you define how many parallel compilations should occur when
you install a package. The suggested number is the number of CPUs in your system
plus one.
</p>

<pre caption="MAKEOPTS for a regular, 1-CPU system">
MAKEOPTS="-j2"
</pre>

</body>
</subsection>
<subsection>
<title>Ready, Set, Go!</title>
<body>

<p>
Update your <path>/mnt/gentoo/etc/make.conf</path> to your own will and save. 
You are now ready to continue with <uri link="?part=1&amp;chap=6">Installing the
Gentoo Base System</uri>.
</p>

</body>
</subsection>
</section>
</sections>
