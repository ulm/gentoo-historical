<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/draft/complete/Attic/hb-intro-versions.xml,v 1.1 2006/01/06 20:05:07 swift Exp $ -->

<sections>

<version>0.0</version>
<date>2005-06-19</date>

<section>
<title>Versioning</title>
<subsection>
<title>The role of freedom</title>
<body>

<p>
When you are allowed to do anything you want, whenever you want and wherever you
want, you will probably think total chaos is but a few inches away. Yet with
Free Software we see that people work together closely, forming hierarchies
built upon knowledge and expertise instead of popularity: most projects are
governed as a <e>meritocracy</e> instead of a <e>democracy</e>.
</p>

<p>
In a meritocacry, the power goes to the people who have shown that they are
superior in their field above most others. The hierarchies formed within a
larger software project are chosen based on the abilities of the
developers and not their charisma or any political decision.
</p>

<p>
In such projects, the lead developers decide when software is ready. There are
generally five states where we can pin software on: in-development, tagged,
development release, stable release and revised. We explain those states in the
next few sections.
</p>

</body>
</subsection>
<subsection>
<title>State: in-development</title>
<body>

<p>
Software that is in-development is software where the developers work on
constantly. When you have software installed on your system that is
in-development, your software will already be outdated by the time you use it
(unless the project isn't quite active of course).
</p>

<p>
Such software has the latest version of everything: every feature, every bug and
every file that has been started is available in the software. Of course, this
does mean that there is hardly any quality assurance on the software apart from
the quality measures taken by the developers themselves. 
</p>

<p>
Think as if you bought a painting where the painter was still busy painting: you
will probably see it isn't finished yet.
</p>

<p>
If you are interested in such software, you might very well be a good candidate
to become a developer for that software. In-development software is often
referred to as the software available through the verioning system, such as CVS
or SVN. Some distributions allow you to install such software despite it being
unfinished. For instance, within Gentoo you can install <c>cinelerra-cvs</c>,
the in-development version of the Cinelerra Video Editor. In this case, you will
install the software that was in-development at the moment of installing. Every
time you reinstall it, the latest in-development program code is used.
</p>

<p>
Most users however are not interested in the in-development version of any
software. Distributions that allow installing such software therefore also
protect their users by making sure the user knows what he is doing before he can
install such software. In case of Gentoo, you must configure Portage to allow
the installation of <e>untested</e> software.
</p>

</body>
</subsection>
<subsection>
<title>State: tagged and static</title>
<body>

<p>
When the developers know that the in-development software code works, or they
want it as a reference for future development, they <e>tag</e> the software.
Such tagged software is often called a <e>snapshot</e> of the in-development
code and is given a specific name (most likely the date when the snapshot was
taken). 
</p>

<p>
This occurs often when the project does not allow outsiders to use the
in-development code straight from the versioning system (for instance because
the versioning system is not powerful enough to handle user requests or because
they want a subproject to control the quality of the code before it is handed to
contributors and interested parties).
</p>

<p>
Using such snapshots is often preferred to the in-development code because the
distributions who use the software can ask the user who uses the snapshot which
snapshot they took. Then the developers can install that specific snapshot
themselves and see if they can reproduce the problem. When using in-development
code, the developer would need to know exactly when the user has installed the
in-development code.
</p>

<p>
Take Gentoo as an example: various (untested) packages are snapshots.
<c>gentoo-syntax-20050325</c> is the snapshot taken on March 25th, 2005 of the
<c>gentoo-syntax</c> package which provides syntax hilighting and indentation
settings for <c>vim</c> (a popular command-line editor) for editing Gentoo 
related files.
</p>

</body>
</subsection>
<subsection>
<title>State: development release</title>
<body>

<p>
When the developers feel that the software is in a quite good shape, they will
tag it again but instead of having it as a snapshot, they will make it a
<e>development release</e>. In most cases, such a release is more than just a
snapshot: it is made simultaneously with documentation updates, project web site
updates and after meeting quality assurance. The project advises people who want
to contribute to the development of the project to use at least the development
release.
</p>

<p>
Because of this, such releases are given a specific version. Sometimes you can
see that it is a development release by the name. For instance,
<c>kdoc-2.0_alpha54</c> is a development release (because it contains the atom
<c>alpha</c>) of <c>kdoc</c>, a KDE documentation processing/generation tool.
</p>

<p>
There are three atoms generally used to denote development releases: 
<c>alpha</c> (quite new, far from ready for production use), <c>beta</c> (should
give a nice idea how the program will look and behave like when it is officially
released to the public) and <c>rc</c> (<e>release candidate</e> - already
contains all the features the final release will have, only bug fixes are
accepted).
</p>

<p>
Previously, lots of projects made development releases. However, we notice that
lately most projects have stepped down and only make official releases and
in-development code. Distributions are now taking on the job of making snapshots
and (although in lesser extend) development releases. Only when <e>major</e>
releases are made projects make development releases to make sure the final
release is really bugfree.
</p>

</body>
</subsection>
<subsection>
<title>State: stable release</title>
<body>

<p>
The real release is the stable release. Such releases are generally governed by
a specific subproject of the software project and are made simultaneously with
documentation updates, web site updates, and public release information.
</p>

<p>
If you are not interested in contributing to the project, you should use the
stable releases of a project since these releases are very stable (they have
undergone a lot of testing), have the most support (user and development 
community), documentation, etc.
</p>

<p>
For instance, <c>kde-meta-3.4.1</c> is an official release of the KDE project
(version 3.4.1). You will find that the KDE project itself has written a <uri
link="http://www.kde.org/announcements/announce-3.4.1.php">Press Release</uri>:
this is an official statement by the project meant for various news sites,
editors, distributions and interested users to inform them a new release is
made. It contains pointers about the new features and enhancements that are put
in the software and where you can download the software release.
</p>

<p>
The given example, <c>kde-meta-3.4.1</c>, is a great example for us to inform
you about versioning numbers. The <c>3</c> is the <e>major version</e>. This
number only changes when <e>very big changes</e> have happened since the
previous release. The <c>4</c> is a <e>minor version</e>, informing people that
the release has <e>big</e> updates but that they don't warrant a major version
bump (a <e>bump</e> means to increase a number by one). The <c>1</c> is a
<e>release revision</e> (although many people will also say it is a minor
version). New releases that only differ in the revision number have small
changes that improve stability, resolve security issues and bug fixes, but have
relatively minor feature enhancements.
</p>

</body>
</subsection>
<subsection>
<title>State: revised</title>
<body>

<p>
While the official project makes stable releases, it is the distribution that
makes sure that regular users can install the software on their system. Of
course, you can install the software straight from the official project, but
then you don't have the advantages that the distribution offers you with respect
to software management.
</p>

<p>
The distribution takes the official release and makes some minor changes to it
so that it installs flawlessly on your system. It might add in some eye-candy,
add in some additional features that are highly asked upon by the community or
change the location or names of some files to make the installation easier to
manage.
</p>

<p>
Sometimes, the distribution finds a bug in the software (based on feedback it
has received by users of the distribution or by the developers themselves).
Quite often, the distribution will fix the issue for the users of the
distribution and release it: in such cases, a <e>revision update</e> is made.
</p>

<p>
Take <c>gdm-2.6.0.9-r3</c> as an example. The official release is <c>2.6.0.9</c>
(if you think this is a dull version, check out <c>binutils-2.15.94.0.2.2</c>)
but Gentoo has made three revision releases since: the first revision
(<c>-r1</c>) added Gentoo-specific PAM support. The second revision made the
package stable for various architectures (different kind of systems). The third
revision fixed some IPv6 issues.
</p>

</body>
</subsection>
</section>
<section>
<title>Forks</title>
<subsection>
<title>Same software, different software</title>
<body>

<p>
We have touched the idea of a <e>fork</e> previously. A fork happens when one
group of developers is not satisfied with another group of developers and start
developing the same software, but differently. This occurs on occasion in the 
Free Software world.
</p>

<p>
For instance, one group of developers might not easily accept new features while
there is a huge demand for it. This has happened with <c>blackbox</c>: its
developers did not accept certain feature enhancements so a group of developers
forked the code. They started <c>fluxbox</c> which was essentially the same as
<c>blackbox</c> but its development was different as were the end goals. As of
today, both projects still exist.
</p>

</body>
</subsection>
</section>
<section>
<title>The role of distributions</title>
<subsection>
<title>Ease of use</title>
<body>

<p>
Whereas regular software releases can still be quite difficult a distribution
makes it very easy to install software. When you want to install software as
released by the projects, you still need to know <e>how</e> to install it and
what options you need to enable. You need to know <e>what</e> you should have 
installed prior to installing the software (the dependencies).
</p>

<p>
When you install software using the distribution, the distribution does all this
for you. It will automatically resolve dependencies and conflicts, use the
correct installation options and merge the software on your system, registering
every file it installs so that uninstallations are easy as cake.
</p>

</body>
</subsection>
<subsection>
<title>Protecting users from themselves</title>
<body>

<p>
Because projects have development releases and even snapshots and in-development
code, distributions help their users by making sure novice users can not shoot
themselves in the foot by installing such software while retaining the
possibility of using such releases by more advanced users.
</p>

<p>
Distributions also register every file installation. If a user wants to install
software that overwrites a file, the distribution will make sure this cannot
happen or that the changes are reversible. A distribution will also make sure
that two packages that interfere can not be both installed on the system.
</p>

</body>
</subsection>
<subsection>
<title>Feedback to upstream</title>
<body>

<p>
One of the most important roles of distributions is to provide feedback to the
original software projects about how their software functions within the
totality of a Linux system. The distributions inform the software projects about
bugs that users reported to the distribution and they provide valuable
enhancement requests <e>with</e> contributions based on the revision updates
they have made themselves.
</p>

<p>
Quite often distributions have developers working for them who also work on the
software projects. It goes without saying that this only improves the
cooperation between the two projects.
</p>

</body>
</subsection>
<subsection>
<title>Taking care of updates</title>
<body>

<p>
A distribution also takes care of informing the user about updates. Updates can
happen for various reasons. The most important ones are <e>security updates</e>.
In this case, the distribution warns the user that he needs to update (or accept
the pending updates) because there are security issues with his current system.
</p>

<p>
Other updates are mostly new versions (new features, lots of bug fixes) made by
the software project itself (in other words, new releases) or
distribution-specific updates (new revision releases by the distribution).
</p>

</body>
</subsection>
</section>
</sections>
