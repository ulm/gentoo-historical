<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/draft/complete/Attic/hb-install-building.xml,v 1.1 2006/01/06 20:05:07 swift Exp $ -->

<sections>

<version>0.0</version>
<date>2005-06-19</date>

<section>
<title>Configuring the Gentoo environment</title>
<subsection>
<title>The build configuration file</title>
<body>

<p>
As Gentoo is primarily a <e>build the software</e>-distribution it requires a
bit more configuration directives than most other distributions. The first and
foremost configuration file is <path>/etc/make.conf</path> (remember, we are now
inside the chrooted environment - outside it would be
<path>/mnt/gentoo/etc/make.conf</path>). Open up the file with <c>nano</c>, an
easy to use editor. We add the <c>-w</c> option to turn off word wrapping since
this might harm the configuration itself.
</p>

<pre caption="Editing /etc/make.conf">
# <i>nano -w /etc/make.conf</i>
</pre>

<p>
Inside this configuration file you can define various configuration directives
that affect Portage' behavior or the software building process. We will only 
discuss a few here - others exist as well, but are not that important at the 
beginning of the installation procedure.
</p>

<p>
Each directive is a variable with some specific content. Variables are often
used throughout Linux (and this is even more so within Gentoo). To set a certain
variable, you define its name followed by an equal sign and then the content of
the variable.
</p>

<pre caption="Example variable definition">
MYVARIABLE="value of the variable"
</pre>

</body>
</subsection>
</section>

<section>
<title>Compiler directives</title>
<subsection>
<title>The compiler flags</title>
<body>

<p>
The first directives that we'll discuss are the compiler flags. A compiler is a
tool that builds executable code from source code and one of the benefits of
using Gentoo is that you can define how the compiler should behave. More
precisely, you can tell the compiler to use certain optimizations on your
system. Although a compiler can take a lot more options than just optimization
options, most Gentoo users only use the optimization options.
</p>

<p>
The GNU Compiler Collection, the compiler toolchain used by most architectures,
supports more than hundred optimization flags. Some of them are interesting,
others hardly used. Some of them are harmless, others quite intrusive. We must
warn you that <brite>using anything beyond the Gentoo-recommended optimization
flags is not supported</brite>.
</p>

</body>
</subsection>
<subsection>
<title>CFLAGS and CXXFLAGS</title>
<body>

<p>
The <c>CFLAGS</c> and <c>CXXFLAGS</c> directives are immediately passed to the
C and C++ compilers respectively as command line arguments. They are often used
to inform the compiler about the destination architecture and optimization
settings.
</p>

<p>
Quite often, the <c>CXXFLAGS</c> is told to contain the same setting as the
<c>CFLAGS</c> variable:
</p>

<pre caption="Setting CXXFLAGS">
CXXFLAGS="${CFLAGS}"
</pre>

<p>
The GNU Compiler Collection has lots of possible directives. The first directive
that most users will want to set is the destination CPU type. This is
configurable with the <c>-march=&lt;CPU-TYPE&gt;</c> setting. For most people,
finding out what CPU-TYPE to pick is quite a challenge and indeed, it is not
possible to document what you should use. What we can tell you is that it is
safe to pick an older type while a more recent type can cause malformed software
on your system.
</p>

<p>
To obtain a list of valid <c>-march=</c> settings, please consult the GCC Manual
or the GCC Info pages:
</p>

<pre caption="Consulting the gcc info pages">
# <i>info gcc</i>
Select <i>GCC Command Options</i>,
       <i>Submodel Options</i>,
and pick your architecture.
</pre>

<p>
A second often used compiler setting is the optimization setting. By adding a
<c>-O</c> followed by a number you can ask the compiler to optimize the code in
various degrees. Gentoo recommends <c>-O2</c> (that is "O" for "Optimization",
not "0" like in "007"). The highest possible value is <c>-O3</c> - if you want
even stronger optimization settings you'll need to add them to the variable.
</p>

<p>
If you don't want to optimize the code for speed but for size, use <c>-Os</c>.
</p>

<p>
The third option we add is <c>-pipe</c> which tells GCC that it can use process
pipes instead of temporary files for communication between the various stages of
compilation. This considerably improves compiling performance on systems with
sufficient memory.
</p>

</body>
</subsection>
<subsection>
<title>CHOST</title>
<body>

<p>
The <c>CHOST</c> variable is an identifier for the target host for which the
compiler should build software. It is vital that this variable identifies your
system, but it is even more vital that you <brite>do not edit this variable if
you are not performing a bootstrap installation</brite>. If you alter this
variable, any toolchain rebuild will cause the toolchain to be in an
intermediate state, possibly producing malfunctioning libraries.
</p>

</body>
</subsection>
<subsection>
<title>So your settings would be ...</title>
<body>

<p>
At the end of this handbook you will find architecture-specific chapters. For
each architecture, precise (and valid) examples for various systems are listed
so that you can pick one of those if the above explanation isn't sufficient.
</p>

</body>
</subsection>
</section>

<section>
<title>Gentoo directives</title>
<subsection>
<title>USE</title>
<body>

<p>
The <c>USE</c> variable is probably the most important setting of all inside
<path>/etc/make.conf</path>. With this variable you define what purposes your
system serves. Each flag set in the <c>USE</c> variable enables or disables
specific support in one or more packages.
</p>

<p>
The idea is pretty simple: if your system has a DVD reader, you'll probably set
<c>dvd</c> as one of the <c>USE</c> flags to add support for DVD readers. When
you want to play DVDs as well, <c>dvdread</c> should be added. Writing DVDs will
require the <c>dvdr</c> setting.
Similar, if your system will host an IBM DB2 server (or any application you'll
use connects to such a server) you'll probably want <c>db2</c> as a <c>USE</c>
flag.
</p>

<p>
A list of all possible USE flags can be found in
<path>/usr/portage/profiles/use.desc</path>. This is a plain text file which is
also reproduced online at the <uri
link="http://www.gentoo.org/dyn/use-index.xml">Gentoo web site</uri>. But
starting to dig through this list is cumbersome as many USE flags will have no
clear description (which is <e>not</e> because we want to remain vague on the
subject, but because the USE flag is either used by different applications for
slightly different purposes, or because the topic itself is too technical).
</p>

<p>
To resolve this issue, Gentoo provides you with a default <c>USE</c> setting. To
find out what the default setting is, run <c>emerge&nbsp;--info</c> and filter
out the line that starts with <c>USE</c>:
</p>

<pre caption="Checking the default USE setting">
# <i>emerge --info | grep -E ^USE</i>
</pre>

<p>
Any setting you place in <path>/etc/make.conf</path> is <e>added</e> to the USE
flag - you don't substitute the default setting but embrace and extend it.
Therefore you need to place a hyphen in front of the USE flags you do not want.
For instance, the <c>arts</c> USE flag (which enables support for the aRts sound
daemon) might be set by default. To deselect it, use <c>-arts</c>. As an example
we'll select support for the Enlightened Sound Daemon and disable support for
aRts:
</p>

<pre caption="Example USE flag">
USE="-arts esd"
</pre>

<p>
There are also USE flags that are specific to a single package. Such USE flags
are called <e>local USE flags</e>. Although you can set those USE flags in
<path>/etc/make.conf</path>, it is wiser to enable or disable those USE flags on
a per-package basis. We'll refrain from explaining how to do this here - you
don't need to set USE flags during the installation, Portage is intelligent
enough to handle USE flag changes after an installation.
</p>

<p>
Before we go on with the next setting there are four remarks we want to make
regarding USE flags:
</p>

<ol>
  <li>
    Changing the USE flag in this stage of the installation might result in
    Portage downloading tools you don't want to install at this point yet.
    A frequently occurring issue is where a USE flag combination triggers the
    installation of <c>kde-base/kdebase</c> which is a quite huge build. You
    should consider altering the USE flags at any point later and ask Portage 
    to just rebuild those tools that are affected by the USE flag change.
  </li>
  <li>
    USE flags allow Gentoo to make decisions regarding <e>optional</e> support
    and features. If any feature or support is not optional but mandatory or
    inherent to the package, the respective USE flags are ignored. A good
    example here is the <c>qt</c> USE flag. If a package can (but doesn't have
    to) support the Qt Graphical Widget library, it uses the <c>qt</c> USE flag
    to decide whether or not to build in support for Qt. If the package requires
    Qt to function, it'll install Qt regardless of USE flag.
  </li>
  <li>
    Some packages override the default USE flag settings (not the one you
    specify in <path>/etc/make.conf</path> though) if you install them. For
    instance, the <c>tetex</c> USE flag is not set by default, but when you
    install the TeX distribution, Gentoo will automatically enable the 
    <c>tetex</c> USE flag so that other programs can now be built with
    TeX support if they can handle it.
  </li>
  <li>
    If you want to hard-set a custom USE flag listing regardless of the default
    USE flags, you can start with deactivating all USE flags and then list those
    you want to enable. This can be accomplished using
    <c>USE="-*&nbsp;flag1&nbsp;flag2&nbsp;..."</c>.
  </li>
</ol>

</body>
</subsection>
<subsection>
<title>The Gentoo Portage repository</title>
<body>

<p>
Any Gentoo package information is stored inside an ebuild. That is a small text
file which contains some metadata about the package (like the description, home
page, source code location, ...) and instructions for Gentoo on how to
succesfully build and deploy the package on your system.
</p>

<p>
The complete set of all supported ebuilds is stored inside the Gentoo Portage
Tree, also known as the Gentoo Portage Repository. You will find a snapshot of
this repository at <path>/usr/portage</path> where all the ebuilds are
categorised by function and name. Gentoo Portage, Gentoo's software management
tool, builds decisions such as "What packages should be updated" or "What
software is available for installation" based on the content of the repository
snapshot <e>on your disk</e>. 
</p>

<p>
It is therefore quite important that you regularly update the snapshot on your
disk with the latest Gentoo Portage Repository content released by the Gentoo
Developers. By default, Gentoo Portage chooses a random mirror<sup>1</sup> but
it is more efficient to use a mirror that is either close to you or fastest for
your environment. The <c>SYNC</c> variable is where you put the location of the
Gentoo Portage Repository where you want to take a snapshot of.
</p>

<p>
Because you can't know what mirrors are available, Gentoo provides an easy to
remember naming scheme for the mirrors. The default setting picks a random
mirror. The country-based still picks a random mirror, but only of a pool of
mirrors inside that country. The single mirror syntax always picks the mirror
you define.
</p>

<pre caption="Mirror syntax">
<comment>(Default)</comment>       rsync://rsync.gentoo.org/gentoo-portage
<comment>(Country-based)</comment> rsync://rsync.${COUNTRYCODE}.gentoo.org/gentoo-portage
<comment>(Single mirror)</comment> rsync://rsync#.${COUNTRYCODE}.gentoo.org/gentoo-portage
</pre>

<p>
An example setting for <path>/etc/make.conf</path> could be:
</p>

<pre caption="Setting the SYNC variable">
SYNC="rsync://rsync3.us.gentoo.org/gentoo-portage"
</pre>

<note>
<sup>1</sup> A mirror is a location on a server on the Internet where the exact
content of another server location is replicated. The idea behind mirrors is to
decrease the stress put on a single server by allowing clients to retrieve the
data from various sources.
</note>

</body>
</subsection>
<subsection>
<title>Gentoo source code location</title>
<body>

<p>
Most Gentoo ebuilds inform Gentoo about the original location of the source
code. This could be a mirror set (like with the many sourceforge hosted
projects) or a fixed URL. Some ebuilds can't point to this location for whatever
possible reason. If this is the case, the source code is pushed on the Gentoo
mirrors in a specific location called the <path>distfiles/</path> directory.
</p>

<p>
The <c>GENTOO_MIRRORS</c> variable declares what mirrors Gentoo Portage should 
check to find the required source code. Each mirror declared in this variable
should point to the parent location of the mirror (i.e. not the
<path>distfiles/</path> directory but one level higher). A list of possible
mirrors can be found <uri
link="http://www.gentoo.org/main/en/mirrors.xml">online</uri>.
</p>

</body>
</subsection>
</section>

<section>
<title>Bootstrapping</title>
<subsection>
<title>What is bootstrapping?</title>
<body>

<p>
A bootstrap procedure prepares a system with the c library and compiler
specifically for a certain environment. This procedure is very sensitive for
problems which is why you shouldn't touch the bootstrap script (called
<path>bootstrap.sh</path> inside <path>/usr/portage/scripts</path>).
</p>

<p>
And because you shouldn't really touch it, you also don't really need to perform
a bootstrap yourself: if you are using a stage-2 or stage-3 tarball, the
bootstrapping has already been done. If you do want to rebuild your system (for
instance, because you altered your compiler directives), you should follow the
method explained next.
</p>

</body>
</subsection>
<subsection>
<title>Bootstrapping your system from stage 3</title>
<body>

<p>
If you are performing a bootstrap installation where you don't alter the
<path>bootstrap.sh</path> script, the procedure should perform the following
steps:
</p>

<ol>
  <li>Use your current toolchain to rebuild itself using the new settings</li>
  <li>
    Use the new toolchain to rebuild itself again. Unlike the previous time,
    your toolchain is now built, not only with the new settings, but also by a
    toolchain built with those settings.
  </li>
  <li>
    Use the new toolchain to build the rest of the packages using the new
    settings.
  </li>
  <li>
    Rebuild the packages again to make sure that all packages are built against
    rebuilt libraries. If you don't have any circular dependencies, this won't
    be necessary, but as you will probably not know if this is the
    case<sup>1</sup> it is better to perform this step anyway.
  </li>
</ol>

<p>
These steps can all be performed using the following commands:
</p>

<pre caption="Bootstrapping the system">
# <i>emerge -e system</i>
# <i>emerge -e world</i>
# <i>emerge -e world</i>
</pre>

<p>
To be honest, the last <c>emerge -e world</c> will rebuild some tools that don't
need to be rebuilt: the <e>world</e> collection (all packages that should be
installed on your system) contains the <e>system</e> collection (all packages
that are vital for your system) as well, so that the system collection is built
three times where it only needs to be built twice. 
</p>

<p>
Since in this stage of the installation you don't have any differences between
the system collection and the world one, performing <c>emerge -e system</c>
twice instead of the system-world-world combination is sufficient.
</p>

<note>
<sup>1</sup> Although Portage can detect circular dependencies, it only detects
those on metadata level. That means that it depends on the content of the
ebuild, written by the package maintainer, and not on the <e>real</e>
dependencies that the package has (the maintainer can always miss one or two
that are almost always met) so Portage doesn't know that it needs to rebuild the
dependency before the package.
</note>

</body>
</subsection>
<subsection>
<title>Bootstrapping your system from stage 1</title>
<body>

<p>
When you need to bootstrap your system different from the procedure set forth in
the <path>bootstrap.sh</path> script, you can use any tarball you like,
including a stage1. You can base your bootstrap procedure from the one
documented in the <path>bootstrap.sh</path> script but you don't have to.
However, make sure that the toolchain you build it built with Portage (using
<c>emerge</c>), otherwise the Portage database will be inconsistent.
</p>

<pre caption="Bootstrapping the toolchain">
# <i>/usr/portage/scripts/bootstrap.sh</i>
</pre>

</body>
</subsection>
</section>

<section>
<title>Progressing from a bootstrapped system</title>
<subsection>
<title>Installing core system packages</title>
<body>

<p>
A bootstrapped system doesn't offer much beyond some libraries and compiler. You
will need additional core system packages before you can actually work on your
system. Gentoo Portage obtains a list of core system packages from your profile
and installs them on your system after building them with the bootstrapped
toolchain.
</p>

<p>
The list of core system packages is available as the <e>system</e> keyword for
<c>emerge</c>. <c>emerge</c> is Gentoo's command-line interface to Gentoo
Portage, Gentoo's software management system. 
</p>

<p>
If you have bootstrapped your system previously, or you are installing Gentoo
through a stage-2 tarball, or you are installing Gentoo through a stage-3
tarball but want to rebuild your packages with the configuration directives
you've set in your <path>make.conf</path> previously, run the following command
to build all core system packages for your profile:
</p>

<pre caption="Building core system packages">
# <i>emerge -e system</i>
</pre>

<p>
Remember, most users will not need to perform this step: the stage3 tarball
provided by Gentoo already contains a prepared system.
</p>

</body>
</subsection>
</section>

</sections>
