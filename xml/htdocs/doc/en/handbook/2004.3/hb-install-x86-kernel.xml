<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/2004.3/hb-install-x86-kernel.xml,v 1.2 2005/03/25 15:50:12 swift Exp $ -->

<sections>

<version>1.29</version>
<date>2005-03-25</date>

<section>
<title>Timezone</title>
<body>

<p>
You first need to select your timezone so that your system knows where it is
located. Look for your timezone in <path>/usr/share/zoneinfo</path>, then make a
symlink to <path>/etc/localtime</path> using <c>ln</c>:
</p>

<pre caption="Setting the timezone information">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Suppose you want to use GMT)</comment>
# <i>ln -sf /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Installing the Sources</title>
<subsection>
<title>Choosing a Kernel</title>
<body>

<p>
The core around which all distributions are built is the Linux kernel. It is the
layer between the user programs and your system hardware. Gentoo provides its
users several possible kernel sources. A full listing with description is
available at the <uri link="/doc/en/gentoo-kernel.xml">Gentoo Kernel
Guide</uri>. 
</p>

<p>
For x86-based systems we have, amongst other kernels, <c>vanilla-sources</c>
(the default 2.4 kernel source as developed by the linux-kernel developers),
<c>gentoo-sources</c> (2.4 kernel source patched with performance-enhancing
features), <c>gentoo-dev-sources</c> (kernel v2.6 source patched with
performance-enhancing features), <c>development-sources</c> (vanilla 2.6 kernel
source), ...
</p>

<p>
Choose your kernel source and install it using <c>emerge</c>. 
</p>

<pre caption="Installing a kernel source">
# <i>emerge gentoo-sources</i>
</pre>

<p>
When you take a look in <path>/usr/src</path> you should see a symlink called
<path>linux</path> pointing to your kernel source. We will assume the kernel
source installed is <c>gentoo-sources-2.4.26-r9</c>:
</p>

<pre caption="Viewing the kernel source symlink">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.4.26-gentoo-r9
</pre>

<p>
If the symlink doesn't point to the kernel source of your choice (note that
<c>linux-2.4.26-gentoo-r9</c> is merely an example) you should change it to the
right kernel:
</p>

<pre caption="Changing the kernel source symlink">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.4.26-gentoo-r9 linux</i>
</pre>

<p>
Now it is time to configure and compile your kernel source. You 
can use <c>genkernel</c> for this, which will build a generic kernel as used 
by the LiveCD. We explain the "manual" configuration first though, as it is 
the best way to optimize your environment.
</p>

<p>
If you want to manually configure your kernel, continue now with <uri
link="#manual">Default: Manual Configuration</uri>. If you want to use 
<c>genkernel</c> you should read <uri link="#genkernel">Alternative: Using 
genkernel</uri> instead.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Default: Manual Configuration</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Manually configuring a kernel is often seen as the most difficult procedure a
Linux user ever has to perform. Nothing is less true -- after configuring a
couple of kernels you don't even remember that it was difficult ;)
</p>

<p>
However, one thing <e>is</e> true: you must know your system when you start
configuring a kernel manually. Most information can be gathered by viewing the
contents of <path>/proc/pci</path> (or by using <c>lspci</c> if available). You
can also run <c>lsmod</c> to see what kernel modules the LiveCD uses (it might
provide you with a nice hint on what to enable).
</p>

<p>
Now go to your kernel source directory and execute <c>make menuconfig</c>. This
will fire up an ncurses-based configuration menu.
</p>

<pre caption="Invoking menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
You will be greeted with several configuration sections. We'll first list some
options you must activate (otherwise Gentoo will not function, or not function
properly without additional tweaks).
</p>

</body>
</subsection>
<subsection>
<title>Activating Required Options</title>
<body>

<p>
First of all, activate the use of development and experimental code/drivers.
You need this, otherwise some very important code/drivers won't show up:
</p>

<pre caption="Selecting experimental code/drivers">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Make sure that you compile your kernel with the correct processor family:
</p>

<pre caption="Selecting correct processor family">
Processor type and features ---&gt;
  <comment>(Change according to your system)</comment>
  (<i>Athlon/Duron/K7</i>) Processor family
</pre>

<p>
Now go to <c>File Systems</c> and select support for the filesystems you use.
<e>Don't</e> compile them as modules, otherwise your Gentoo system will not be
able to mount your partitions. Also select <c>Virtual memory</c>, <c>/proc
file system</c>, <c>/dev file system</c> + <c>Automatically mount at boot</c>:
</p>

<pre caption="Selecting necessary file systems">
<comment>(With a 2.4.x kernel)</comment>
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot
  [ ] /dev/pts file system for Unix98 PTYs

<comment>(With a 2.6.x kernel)</comment>
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] /dev file system support (OBSOLETE)
    [*]   Automatically mount at boot
    [*] Virtual memory file system support (former shm fs)

<comment>(Select one or more of the following options as needed by your system)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
If your BIOS can't handle large harddrives and you jumpered the harddrive to
report a limited size you have to enable the following option to gain access
to your whole harddrive:
</p>

<pre caption="Selecting autogeometry resizing support">
<comment>(2.4.x kernel only)</comment>
ATA/IDE/MFM/RLL support ---&gt;
  IDE, ATA and ATAPI Block devices ---&gt;
    &lt;*&gt;   Include IDE/ATA-2 DISK support
    [ ]     Use multi-mode by default
    [*]     Auto-Geometry Resizing support
</pre>

<p>
If you are using PPPoE to connect to the Internet or you are using a dial-up
modem, you will need the following options in the kernel:
</p>

<pre caption="Selecting PPPoE necessary drivers">
<comment>(With a 2.4.x kernel)</comment>
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports

<comment>(With a 2.6.x kernel)</comment>
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
The two compression options won't harm but are not definitely needed, neither
does the <c>PPP over Ethernet</c> option, that might only be used by 
<c>rp-pppoe</c> when configured to do kernel mode PPPoE.
</p>

<p>
If you require it, don't forget to include support in the kernel for your
ethernet card.
</p>

<p>
If you have an Intel CPU that supports HyperThreading (tm), or you have a
multi-CPU system, you should activate "Symmetric multi-processing support":
</p>

<pre caption="Activating SMP support">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
If you use USB Input Devices (like Keyboard or Mouse) don't forget to enable
those as well:
</p>

<pre caption="Activating USB Support for Input Devices">
USB Support ---&gt;
  &lt;*&gt;   USB Human Interface Device (full HID) support
</pre>

<p>
Laptop-users who want PCMCIA support should <e>not</e> use the PCMCIA drivers if
they choose to use a 2.4 kernel. More recent drivers are available through the
<c>pcmcia-cs</c> package which will be installed later on. 2.6-kernel users
however should use the PCMCIA drivers from the kernel.
</p>

<p>
When you've finished configuring the kernel, continue with <uri 
link="#compiling">Compiling and Installing</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Compiling and Installing</title>
<body>

<p>
Now that your kernel is configured, it is time to compile and install it. Exit 
the configuration and start the compilation process:
</p>

<pre caption="Compiling the kernel">
<comment>(For 2.4 kernel)</comment>
# <i>make dep &amp;&amp; make bzImage modules modules_install</i>

<comment>(For 2.6 kernel)</comment>
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
When the kernel has finished compiling, copy the kernel image to
<path>/boot</path>. From here onwards we assume that the kernel you are
installing is the 2.4.26 version of the <c>gentoo-sources</c>. Use whatever name
you feel is appropriate for your choice and remember it as you will need it
later on when you configure your bootloader.
</p>

<pre caption="Installing the kernel">
# <i>cp arch/i386/boot/bzImage /boot/kernel-2.4.26-gentoo-r9</i>
# <i>cp System.map /boot/System.map-2.4.26-gentoo-r9</i>
</pre>

<p>
It is also wise to copy over your kernel configuration file to
<path>/boot</path>, just in case :)
</p>

<pre caption="Backing up your kernel configuration">
# <i>cp .config /boot/config-2.4.26-gentoo-r9</i>
</pre>

<p>
Now continue with <uri link="#kernel_modules">Installing Separate Kernel
Modules</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternative: Using genkernel</title>
<body>

<p>
If you are reading this section, you have chosen to use our <c>genkernel</c>
script to configure your kernel for you.
</p>

<p>
Now that your kernel source tree is installed, it's now time to compile your 
kernel by using our <c>genkernel</c> script to automatically build a kernel for 
you. <c>genkernel</c> works by configuring a kernel nearly identically to the 
way our LiveCD kernel is configured. This means that when you use 
<c>genkernel</c> to build your kernel, your system will generally detect all 
your hardware at boot-time, just like our Live CD does. Because genkernel 
doesn't require any manual kernel configuration, it is an ideal solution for 
those users who may not be comfortable compiling their own kernels.
</p>

<p>
Now, let's see how to use genkernel. First, emerge the genkernel ebuild:
</p>

<pre caption="Emerging genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Now, compile your kernel sources by running <c>genkernel all</c>.
Be aware though, as <c>genkernel</c> compiles a kernel that supports almost all 
hardware, this compilation will take quite a while to finish!
</p>

<p>
Note that, if your boot partition doesn't use ext2 or ext3 as filesystem you
might need to manually configure your kernel using <c>genkernel --menuconfig 
all</c> and add support for your filesystem <e>in</e> the kernel (i.e. 
<e>not</e> as a module).
</p>

<pre caption="Running genkernel">
# <i>genkernel all</i>
</pre>

<p>
Once <c>genkernel</c> completes, a kernel, full set of modules and 
<e>initial root disk</e> (initrd) will be created. We will use the kernel 
and initrd when configuring a boot loader later in this document. Write
down the names of the kernel and initrd as you will need it when writing
the bootloader configuration file. The initrd will be started immediately after 
booting to perform hardware autodetection (just like on the Live CD) before 
your "real" system starts up.
</p>

<pre caption="Checking the created kernel image name and initrd">
# <i>ls /boot/kernel* /boot/initrd*</i>
</pre>

<p>
Now, let's perform one more step to get our system to be more like the Live 
CD -- let's emerge <c>hotplug</c>. While the initrd autodetects hardware that 
is needed to boot your system, <c>hotplug</c> autodetects everything else.
To emerge and enable <c>hotplug</c>, type the following:
</p>

<pre caption="Emerging and enabling hotplug">
# <i>emerge hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>Installing Separate Kernel Modules</title>
<subsection>
<title>Installing Extra Modules</title>
<body>

<p>
If appropriate, you should emerge ebuilds for any additional hardware that is 
on your system. Here is a list of kernel-related ebuilds that you could emerge:
</p>

<table>
<tcolumn width="1in"/>
<tcolumn width="4in"/>
<tcolumn width="2in"/>
<tr>
  <th>Ebuild</th>
  <th>Purpose</th>
  <th>Command</th>
</tr>
<tr>
  <ti>nvidia-kernel</ti>
  <ti>Accelerated NVIDIA graphics for xorg-x11</ti>
  <ti><c>emerge nvidia-kernel</c></ti>
</tr>
<tr>
  <ti>nforce-audio</ti>
  <ti>On-board audio on NVIDIA NForce(2) motherboards</ti>
  <ti><c>emerge nforce-audio</c></ti>
</tr>
<tr>
  <ti>e100</ti>
  <ti>Intel e100 Fast Ethernet Adapters</ti>
  <ti><c>emerge e100</c></ti>
</tr>
<tr>
  <ti>e1000</ti>
  <ti>Intel e1000 Gigabit Ethernet Adapters</ti>
  <ti><c>emerge e1000</c></ti>
</tr>
<tr>
  <ti>emu10k1</ti>
  <ti>Creative Sound Blaster Live!/Audigy support (for 2.4 kernels only)</ti>
  <ti><c>emerge emu10k1</c></ti>
</tr>
<tr>
  <ti>ati-drivers</ti>
  <ti>Accelerated ATI Radeon 8500+/FireGL graphics for xorg-x11</ti>
  <ti><c>emerge ati-drivers</c></ti>
</tr>
</table>

<p>
Beware though, some of these ebuilds might deal with big dependencies. To verify
what packages will be installed by emerging an ebuild, use <c>emerge 
--pretend</c>. For instance, for the <c>emu10k1</c> package:
</p>

<pre caption="View full installation package listing">
# <i>emerge --pretend emu10k1</i>
</pre>

<p>
If you don't like the packages it wants to install, use <c>emerge --pretend 
--verbose</c> to see what USE-flags are checked when deciding the dependencies:
</p>

<pre caption="View USE-flag usage">
# <i>emerge --pretend --verbose emu10k1</i>
<comment>...</comment>
[ebuild  N    ] media-sound/aumix-2.8  +gpm +nls +gtk +gnome +alsa -gtk2
</pre>

<p>
In the previous example you can see that one of <c>emu10k1</c>'s dependencies
(<c>aumix</c>) uses the <c>gtk</c> and <c>gnome</c> USE-flags, making gtk (which
depends on xorg-x11) be compiled with it.
</p>

<p>
If you don't want all this to be compiled, deselect all USE-flags, for instance:
</p>

<pre caption="Emerging emu10k1 with all USE-flags deselected">
# <i>USE="-gpm -nls -gtk -gnome -alsa" emerge --pretend emu10k1</i>
</pre>

<p>
When you're happy with the results, remove the <c>--pretend</c> to start
installing <c>emu10k1</c>.
</p>

</body>
</subsection>
<subsection>
<title>Configuring the Modules</title>
<body>

<p>
You should list the modules you want automatically loaded in 
<path>/etc/modules.autoload.d/kernel-2.4</path> (or <path>kernel-2.6</path>). 
You can add extra options to the modules too if you want.
</p>

<p>
To view all available modules, run the following <c>find</c> command. Don't
forget to substitute "&lt;kernel version&gt;" with the version of the kernel you
just compiled:
</p>

<pre caption="Viewing all available modules">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
For instance, to automatically load the <c>3c59x.o</c> module, edit the
<path>kernel-2.4</path> or <path>kernel-2.6</path> file and enter the module
name in it.
</p>

<pre caption="Editing /etc/modules.autoload.d/kernel-2.4">
<comment>(Example for 2.4 kernels)</comment>
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4 or kernel-2.6">
3c59x
</pre>

<p>
Now run <c>modules-update</c> to commit your changes to the
<path>/etc/modules.conf</path> file:
</p>

<pre caption="Running modules-update">
# <i>modules-update</i>
</pre>

<p>
Continue the installation with <uri link="?part=1&amp;chap=8">Configuring 
your System</uri>.
</p>

</body>
</subsection>
</section>
</sections>
