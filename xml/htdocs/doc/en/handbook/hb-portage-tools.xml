<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/hb-portage-tools.xml,v 1.12 2010/10/04 07:11:12 nightmorph Exp $ -->

<sections>

<abstract>
Portage comes with a few extra tools that might make your Gentoo experience even
better. Read on to discover how to use dispatch-conf and other tools.
</abstract>

<version>2</version>
<date>2010-10-04</date>

<section>
<title>dispatch-conf</title>
<body>

<p>
<c>dispatch-conf</c> is a tool that aids in merging the
<path>._cfg0000_&lt;name&gt;</path> files. <path>._cfg0000_&lt;name&gt;</path>
files are generated by Portage when it wants to overwrite a file in a directory
protected by the CONFIG_PROTECT variable.
</p>

<p>
With <c>dispatch-conf</c>, you are able to merge updates to your configuration
files while keeping track of all changes. <c>dispatch-conf</c> stores the
differences between the configuration files as patches or by using the RCS
revision system. This means that if you make a mistake when updating a config
file, you can revert to the previous version of your config file at any time.
</p>

<p>
When using <c>dispatch-conf</c>, you can ask to keep the configuration file
as-is, use the new configuration file, edit the current one or merge the changes
interactively. <c>dispatch-conf</c> also has some nice additional features:
</p>

<ul>
  <li>
    Automatically merge configuration file updates that only contain updates to
    comments
  </li>
  <li>
    Automatically merge configuration files which only differ in the amount of
    whitespace
  </li>
</ul>

<p>
Make certain you edit <path>/etc/dispatch-conf.conf</path> first and create the
directory referenced by the archive-dir variable.
</p>

<pre caption="Running dispatch-conf">
# <i>dispatch-conf</i>
</pre>

<p>
When running <c>dispatch-conf</c>, you'll be taken through each changed config
file, one at a time. Press <c>u</c> to update (replace) the current config file
with the new one and continue to the next file. Press <c>z</c> to zap (delete)
the new config file and continue to the next file. Once all config files have
been taken care of, <c>dispatch-conf</c> will exit. You can also press <c>q</c>
to exit any time.
</p>

<p>
For more information, check out the <c>dispatch-conf</c> man page. It tells you
how to interactively merge current and new config files, edit new config files,
examine differences between files, and more.
</p>

<pre caption="Reading the dispatch-conf man page">
$ <i>man dispatch-conf</i>
</pre>

</body>
</section>
<section>
<title>etc-update</title>
<body>

<p>
You can also use <c>etc-update</c> to merge config files. It's not as simple to
use as <c>dispatch-conf</c>, nor as featureful, but it does provide an
interactive merging setup and can also auto-merge trivial changes.
</p>

<p>
However, unlike <c>dispatch-conf</c>, <c>etc-update</c> does <e>not</e> preserve
the old versions of your config files. Once you update the file, the old version
is gone forever! So be very careful, as using <c>etc-update</c> is
<e>significantly</e> less safe than using <c>dispatch-conf</c>.
</p>

<pre caption="Running etc-update">
# <i>etc-update</i>
</pre>

<p>
After merging the straightforward changes, you will be prompted with a list of
protected files that have an update waiting. At the bottom you are greeted by
the possible options:
</p>

<pre caption="etc-update options">
Please select a file to edit by entering the corresponding number.
              (-1 to exit) (-3 to auto merge all remaining files)
                           (-5 to auto-merge AND not use 'mv -i'):
</pre>

<p>
If you enter <c>-1</c>, <c>etc-update</c> will exit and discontinue any further
changes. If you enter <c>-3</c> or <c>-5</c>, <e>all</e> listed configuration
files will be overwritten with the newer versions. It is therefore very
important to first select the configuration files that should not be
automatically updated. This is simply a matter of entering the number listed to
the left of that configuration file.
</p>

<p>
As an example, we select the configuration file <path>/etc/pear.conf</path>:
</p>

<pre caption="Updating a specific configuration file">
Beginning of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
<comment>[...]</comment>
End of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
1) Replace original with update
2) Delete update, keeping original as is
3) Interactively merge original with update
4) Show differences again
</pre>

<p>
You can now see the differences between the two files. If you believe that the
updated configuration file can be used without problems, enter <c>1</c>. If you
believe that the updated configuration file isn't necessary, or doesn't provide
any new or useful information, enter <c>2</c>. If you want to interactively
update your current configuration file, enter <c>3</c>.
</p>

<p>
There is no point in further elaborating the interactive merging here. For
completeness sake, we will list the possible commands you can use while you are
interactively merging the two files. You are greeted with two lines (the
original one, and the proposed new one) and a prompt at which you can enter one
of the following commands: 
</p>

<pre caption="Commands available for the interactive merging">
ed:     Edit then use both versions, each decorated with a header.
eb:     Edit then use both versions.
el:     Edit then use the left version.
er:     Edit then use the right version.
e:      Edit a new version.
l:      Use the left version.
r:      Use the right version.
s:      Silently include common lines.
v:      Verbosely include common lines.
q:      Quit.
</pre>

<p>
When you have finished updating the important configuration files, you can now
automatically update all the other configuration files. <c>etc-update</c> will
exit if it doesn't find any more updateable configuration files.
</p>

</body>
</section>
<section>
<title>quickpkg</title>
<body>

<p>
With <c>quickpkg</c> you can create archives of the packages that are already
merged on your system. These archives can be used as prebuilt packages. Running
<c>quickpkg</c> is straightforward: just add the names of the packages you want
to archive.
</p>

<p>
For instance, to archive <c>curl</c>, <c>orage</c>, and <c>procps</c>:
</p>

<pre caption="Example quickpkg usage">
# <i>quickpkg curl orage procps</i>
</pre>

<p>
The prebuilt packages will be stored in <path>$PKGDIR</path>
(<path>/usr/portage/packages/</path> by default). These packages are placed in
<path>$PKGDIR/&lt;category&gt;</path>.
</p>

</body>
</section>
</sections>
