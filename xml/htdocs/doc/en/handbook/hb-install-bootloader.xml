<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/Attic/hb-install-bootloader.xml,v 1.32 2004/03/19 08:34:55 swift Exp $ -->

<sections>
<section>
<title>Making your Choice</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Now that your kernel is configured and compiled and the necessary system
configuration files are filled in correctly, it is time to install a
program that will fire up your kernel when you start the system. Such a
program is called a <e>bootloader</e>. But before you start, consider
your options...
</p>

<p>
Several bootloaders exist for Linux. However, these bootloaders only
function on a small set of architectures. Therefore you must choose between the
bootloaders that support your architecture.
</p>

<p>
The next table lists the architectures and the supported bootloaders.
Pick a bootloader based on your architecture. For instance, if you have
a Pentium IV, then your architecture is <e>x86</e>. You have the choice
between GRUB (recommended) and LILO.
</p>

<table>
<tr>
  <th>Architecture</th>
  <th>Recommended</th>
  <th>Alternatives</th>
</tr>
<tr>
  <th>x86</th>
  <ti><uri link="#doc_chap2">GRUB</uri></ti>
  <ti><uri link="#doc_chap3">LILO</uri></ti>
</tr>
<tr>
  <th>alpha</th>
  <ti><uri link="#doc_chap4">aBoot</uri></ti>
  <ti><uri link="#doc_chap5">MILO</uri></ti>
</tr>
<tr>
  <th>sparc</th>
  <ti><uri link="#doc_chap6">SILO</uri></ti>
  <ti></ti>
</tr>
<tr>
  <th>ppc</th>
  <ti>
    <uri link="#doc_chap8">yaBoot</uri> (NewWorld), 
    <uri link="#doc_chap9">BootX</uri> (OldWorld)
  </ti>
  <ti></ti>
</tr>
<tr>
  <th>hppa</th>
  <ti><uri link="#doc_chap7">PALO</uri></ti>
  <ti></ti>
</tr>
<tr>
  <th>mips</th>
  <ti><uri link="#doc_chap10">MIPS PROM</uri></ti>
  <ti></ti>
</tr>
<tr>
  <th>amd64</th>
  <ti><uri link="#doc_chap2">GRUB</uri></ti>
  <ti></ti>
</tr>
</table>

</body>
</subsection>
<subsection>
<title>Optional: Framebuffer</title>
<body>

<note>
This section only applies to x86, AMD64 and PPC users who have configured 
framebuffer support in their kernel. This includes <c>genkernel</c> users.
</note>

<p>
<e>If</e> you have configured your kernel with framebuffer support, you
have to add a <c>vga</c>-statement to your bootloader configuration
file if you require framebuffer. The next table lists the available 
<c>vga</c>-values you can use. In the example configuration files we use 
<e>800x600 @ 16bpp</e>, thus <e>788</e>.
</p>

<table>
<tr>
  <ti></ti><th>640x480</th><th>800x600</th><th>1024x768</th><th>1280x1024</th>
</tr>
<tr>
  <th>8 bpp</th><ti>769</ti><ti>771</ti><ti>773</ti><ti>775</ti>
</tr>
<tr>
  <th>16 bpp</th><ti>785</ti><ti>788</ti><ti>791</ti><ti>794</ti>
</tr>
<tr>
  <th>32 bpp</th><ti>786</ti><ti>789</ti><ti>792</ti><ti>795</ti>
</tr>
</table>

<p>
Remember (or write down) your value; you will need it shortly hereafter.
</p>

<p>
Now select the bootloader of your choice from the table above.
</p>

</body>
</subsection>
</section>
<section>
<title>Default: Using GRUB</title>
<subsection>
<title>Understanding GRUB's terminology</title>
<body>

<impo>
GRUB can only be used with x86- and AMD64-based systems!
</impo>

<p>
The most critical part of understanding GRUB is getting comfortable with
how GRUB refers to hard drives and partitions. Your Linux partition
<path>/dev/hda1</path> is called <path>(hd0,0)</path> under GRUB. Notice the 
parenthesis around the <path>hd0,0</path> - they are required.
</p>

<p>
Hard drives count from zero rather than "a" and partitions start at zero 
rather than one. Be aware too that with the hd devices, only hard drives are 
counted, not atapi-ide devices such as cdrom players and burners.  Also, the 
same construct is used with scsi drives. (Normally they get higher numbers 
than ide drives except when the bios is configured to boot from scsi devices.)
</p>

<p>
Assuming you have a hard drive on <path>/dev/hda</path>, a cdrom player on 
<path>/dev/hdb</path>, a burner on <path>/dev/hdc</path>, a second hard drive 
on <path>/dev/hdd</path> and no SCSI hard drive, <path>/dev/hdd7</path> gets 
translated to <path>(hd1,6)</path>. It might sound tricky and tricky it is 
indeed, but as we will see, GRUB offers a tab completion mechanism
that comes handy for those of you having a lot of hard drives and
partitions and who are a little lost in the GRUB numbering scheme.
</p>

<p>
Having gotten the feel for that, it is time to install GRUB.
</p>

</body>
</subsection>
<subsection>
<title>Installing GRUB</title>
<body>

<p>
To install GRUB, let's first emerge it. Users of the x86 architecture have to
install <c>grub</c>, AMD64 users will need to emerge <c>grub-static</c>:
</p>

<pre caption = "Installing GRUB">
<comment>(For the x86 architecture:)</comment>
# <i>emerge --usepkg grub</i>

<comment>(For the AMD64 architecture:)</comment>
# <i>emerge --usepkg grub-static</i>
# <i>cp -Rpv /usr/share/grub/i386-pc/* /boot/grub</i>
</pre>

<p>
To start configuring GRUB, you type in <c>grub</c>. You'll be presented
with the <path>grub&gt;</path> grub command-line prompt. Now, you need to type 
in the right commands to install the GRUB boot record onto your hard drive.
</p>

<pre caption = "Starting the GRUB shell">
# <i>grub</i>
</pre>

<note>
If your system does not have any floppy drives, add the <c>--no-floppy</c>
option to the above command to prevent grub from probing the (non-existing) 
floppy drives.
</note>

<p>
In the example configuration we want to install GRUB so that it reads its 
information from the boot-partition <path>/dev/hda1</path>, and installs the 
GRUB boot record on the hard drive's MBR (master boot record) so that the first
thing we see when we turn on the computer is the GRUB prompt. Of course, if you
haven't followed the example configuration during the installation,
change the commands accordingly.
</p>

<p>
The tab completion mechanism of GRUB can be used from within GRUB.
For instance, if you type in "<c>root (</c>" followed by a TAB, you will
be presented with a list of devices (such as <path>hd0</path>). If you
type in "<c>root (hd0,</c>" followed by a TAB, you will receive a list
of available partitions to choose from (such as <path>hd0,0</path>).
</p>

<p>
By using the tab completion, setting up GRUB should be not that hard.
Now go on, configure GRUB, shall we? :-)
</p>

<pre caption = "Installing GRUB in the MBR">
grub&gt; <i>root (hd0,0)</i>          <comment>(Specify where your /boot partition resides)</comment>
grub&gt; <i>setup (hd0)</i>           <comment>(Install GRUB in the MBR)</comment>
grub&gt; <i>quit</i>                  <comment>(Exit the GRUB shell)</comment>
</pre>

<note>
If you want to install GRUB in a certain partition instead of the MBR,
you have to alter the <c>setup</c> command so it points to the right
partition. For instance, if you want GRUB installed in
<path>/dev/hda3</path>, then the command becomes <c>setup (hd0,2)</c>.
Few users however want to do this.
</note>

<p>
Although GRUB is now installed, we still need to write up a
configuration file for it, so that GRUB automatically boots your newly
created kernel. Create <path>/boot/grub/grub.conf</path> with
<c>nano</c> (or, if applicable, another editor):
</p>

<pre caption = "Creating /boot/grub/grub.conf">
# <i>nano -w /boot/grub/grub.conf</i>
</pre>

<p>
Now we are going to write up a <path>grub.conf</path>. Beneath you'll
find three possible <path>grub.conf</path> for the partitioning example we use 
in this guide, with kernel image <path>kernel-2.4.24</path>. We've only
extensively commented the first <path>grub.conf</path>. 
</p>

<ul>
  <li>
    The first <path>grub.conf</path> is for people who have not used 
    <c>genkernel</c> to build their kernel
  </li>
  <li>
    The second <path>grub.conf</path> is for people who have used the
    <c>genkernel</c> from the LiveCD (i.e. <c>genkernel</c> installed using GRP
    packages) to build their kernel
  </li>
  <li>
    The third <path>grub.conf</path> is for people who have used a downloaded
    <c>genkernel</c> to build their kernel
  </li>
</ul>

<pre caption = "grub.conf for non-genkernel users">
<comment># Which listing to boot as default. 0 is the first, 1 the second etc.</comment>
default 0
<comment># How many seconds to wait before the default listing is booted.</comment>
timeout 30
<comment># Nice, fat splash-image to spice things up :)</comment>
splashimage=(hd0,0)/grub/splash.xpm.gz

title=Gentoo Linux 2.4.24
<comment># Partition where the kernel image (or operating system) is located</comment>
root (hd0,0)
kernel /kernel-2.4.24 root=/dev/hda3

<comment># The next three lines are only if you dualboot with a Windows system.</comment>
<comment># In this case, Windows is hosted on /dev/hda6.</comment>
title=Windows XP
rootnoverify (hd0,5)
chainloader +1
</pre>

<pre caption = "grub.conf for GRP genkernel users">
default 0
timeout 30
splashimage=(hd0,0)/grub/splash.xpm.gz

title=Gentoo Linux 2.4.24
root (hd0,0)
kernel /kernel-2.4.24 root=/dev/hda3
initrd /initrd-2.4.24

<comment># Only in case you want to dual-boot</comment>
title=Windows XP
root (hd0,5)
chainloader +1
</pre>

<pre caption = "grub.conf for non-GRP genkernel users">
default 0
timeout 30
splashimage=(hd0,0)/grub/splash.xpm.gz

title=Gentoo Linux 2.4.24
root (hd0,0)
kernel /kernel-2.4.24 root=/dev/ram0 init=/linuxrc real_root=/dev/hda3
initrd /initrd-2.4.24

<comment># Only in case you want to dual-boot</comment>
title=Windows XP
root (hd0,5)
chainloader +1
</pre>


<note>
If you use a different partitioning scheme and/or kernel image, adjust 
accordingly. However, make sure that anything that follows a GRUB-device 
(such as <path>(hd0,0)</path>) is relative to the mountpoint, not the root. In 
other words, <path>(hd0,0)/grub/splash.xpm.gz</path> is in reality 
<path>/boot/grub/splash.xpm.gz</path> since <path>(hd0,0)</path> is 
<path>/boot</path>.
</note>

<p>
If you need to pass any additional options to the kernel, simply add
them to the end of the kernel command. We're already passing one option
(<c>root=/dev/hda3</c> or <c>real_root=/dev/hda3</c>), but you can pass others 
as well. As an example we use the <c>vga</c> statement for framebuffer we 
discussed previously:
</p>

<pre caption = "Adding the vga-statement as a kernel option">
title=Gentoo Linux
  root (hd0,0)
  kernel /kernel-2.4.24 root=/dev/hda3 vga=788
</pre>

<p>
<c>genkernel</c> users should know that their kernels use the same boot options
as is used for the LiveCD. For instance, if you have SCSI devices, you should
add <c>doscsi</c> as kernel option.
</p>

<p>
Now save the <path>grub.conf</path> file and exit. As of now, GRUB is
fully configured, and you can continue with <uri
link="?part=1&amp;chap=10">Installing Necessary System Tools</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>Alternative: Using LILO</title>
<subsection>
<title>Installing LILO</title>
<body>

<impo>
LILO can only be used with x86-based systems!
</impo>

<p>
LILO, the LInuxLOader, is the tried and true workhorse of Linux
bootloaders. However, it lacks some features that GRUB has (which is
also the reason why GRUB is currently gaining popularity). The reason
why LILO is still used is that, on some systems, GRUB doesn't work and
LILO does. Of course, it is also used because some people know LILO and
want to stick with it. Either way, Gentoo supports both, and apparently
you have chosen to use LILO.
</p>

<p>
Installing LILO is a breeze; just use <c>emerge</c>.
</p>

<pre caption = "Installing LILO">
# <i>emerge --usepkg lilo</i>
</pre>

</body>
</subsection>
<subsection>
<title>Configuring LILO</title>
<body>

<p>
To configure LILO, you must create <path>/etc/lilo.conf</path>. Fire up
your favorite editor (in this handbook we use <c>nano</c> for
consistency) and create the file.
</p>

<pre caption = "Creating /etc/lilo.conf">
# <i>nano -w /etc/lilo.conf</i>
</pre>

<p>
Some sections ago we have asked you to remember the kernel-image name
you have created. In the next example <path>lilo.conf</path> we assume
the imagename is <path>kernel-2.4.24</path>. We also use the
example partitioning scheme in this example. There are three separate parts: 
</p>

<ul>
  <li>
    One for those who have not used <c>genkernel</c> to build their kernel
  </li>
  <li>
    One for those who have used a GRP <c>genkernel</c> to build their kernel
  </li>
  <li>
    One for those who have used a recent (downloaded) <c>genkernel</c> to build 
    their kernel
  </li>
</ul>

<pre caption = "Example /etc/lilo.conf">
boot=/dev/hda             <comment># Install LILO in the MBR</comment>
prompt                    <comment># Give the user the chance to select another section</comment>
timeout=50                <comment># Wait 5 (five) seconds before booting the default section</comment>
default=gentoo            <comment># When the timeout has passed, boot the "gentoo" section</comment>
<comment># Only if you use framebuffer. Otherwise remove the following line:</comment>
vga=788                   <comment># Framebuffer setting. Adjust to your own will</comment>

<comment># For non-genkernel users</comment>
image=/boot/kernel-2.4.24
  label=gentoo            <comment># Name we give to this section</comment>
  read-only               <comment># Start with a read-only root. Do not alter!</comment>
  root=/dev/hda3          <comment># Location of the root filesystem</comment>

<comment># For GRP genkernel users</comment>
image=/boot/kernel-2.4.24
  label=gentoo
  read-only
  root=/dev/hda3
  initrd=/boot/initrd-2.4.24

<comment># For recent genkernel users</comment>
image=/boot/kernel-2.4.24
  label=gentoo
  read-only
  root=/dev/ram0
  append="init=/linuxrc real_root=/dev/hda3"
  initrd=/boot/initrd-2.4.24

<comment># The next two lines are only if you dualboot with a Windows system.</comment>
<comment># In this case, Windows is hosted on /dev/hda6.</comment>
other=/dev/hda6
  label=windows
</pre>

<note>
If you use a different partitioning scheme and/or kernel image, adjust
accordingly.
</note>

<p>
If you need to pass any additional options to the kernel, add an
<c>append</c> statement to the section. As an example, we add the
<c>acpi=off</c> statement to disable ACPI support:
</p>

<pre caption = "Using append to add kernel options">
image=/boot/kernel-2.4.24
  label=gentoo
  read-only
  root=/dev/hda3
  <i>append="acpi=off"</i>
</pre>

<p>
<c>genkernel</c> users should know that their kernels use the same boot options
as is used for the LiveCD. For instance, if you have SCSI devices, you should
add <c>doscsi</c> as kernel option.
</p>


<p>
Now save the file and exit. To finish up, you have to run
<c>/sbin/lilo</c> so LILO can apply the <path>/etc/lilo.conf</path> to
your system (i.e. install itself on the disk).
</p>

<pre caption = "Finishing the LILO installation">
# <i>/sbin/lilo</i>
</pre>

<p>
Now continue with <uri link="?part=1&amp;chap=10">Installing Necessary System
Tools</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>Alternative: Using aboot</title>
<body>

<impo>
aboot can only be used with alpha-based systems!
</impo>

<p>
We first install aboot on our system. Of course we use <c>emerge</c> to
do so:
</p>

<pre caption = "Installing aboot">
# <i>emerge --usepkg aboot</i>
</pre>

<p>
The next step is to make our bootdisk bootable. This will start
<c>aboot</c> when you boot your system. We make our bootdisk bootable by
writing the <c>aboot</c> bootloader to the start of the disk.
</p>

<pre caption = "Making your bootdisk bootable">
# <i>swriteboot -f3 /dev/sda /boot/bootlx</i> 
# <i>abootconf /dev/sda 2</i>
</pre>

<note>
If you use a different partitioning scheme than the one we use
throughout this chapter, you have to change the commands accordingly.
Please read the appropriate manual pages (<c>man 8 swriteboot</c> and
<c>man 8 abootconf</c>).
</note>

<p>
Additionally, you can make Gentoo boot more easily by setting up the
aboot configuration file and SRM boot_osflags variable. You will need to
make sure that the bootdef_dev is also properly set (easier to do at the
console than from Linux).
</p>

<pre caption = "Improve booting Gentoo">
# <i>echo '0:2/boot/vmlinux.gz root=/dev/sda2' &gt; /etc/aboot.conf</i>
# <i>echo -n 0 &gt; /proc/srm_environment/named_variables/boot_osflags</i>
# <i>echo -n '' &gt; /proc/srm_environment/named_variables/boot_file</i>
</pre>

<p>
If you're installing using a serial console, don't forget to include
the serial console boot flag in <path>aboot.conf</path>. See 
<path>/etc/aboot.conf.example</path> for some further information. 
</p>

<p>
Aboot is now configured and ready to use. Continue with <uri
link="?part=1&amp;chap=10">Installing Necessary System Tools</uri>.
</p>

</body>
</section>
<section>
<title>Alternative: Using MILO</title>
<body>

<impo>
MILO can only be used with alpha-based systems!
</impo>

<p>
Before continuing, you should decide on how to use MILO. In this
section, we will assume that you want to make a MILO boot floppy. If you
are going to boot from an MS-DOS partition on your hard disk, you should
amend the commands appropriately.
</p>

<p>
To install MILO, we use <c>emerge</c>.
</p>

<pre caption = "Installing MILO">
# <i>emerge --usepkg milo</i>
</pre>

<p>
After MILO has been installed, the MILO images should be in
<path>/opt/milo</path>. The commands below make a bootfloppy for use
with MILO. Remember to use the correct image for your Alpha-system.
</p>

<pre caption = "Installing MILO on a floppy">
<comment>(First insert a blank floppy)</comment>
# <i>fdformat /dev/fd0</i>
# <i>mformat a:</i>
# <i>mcopy /opt/milo/milo-2.2-18-gentoo-ruffian a:\milo</i>
# <i>mcopy /opt/milo/linload.exe a:\lilnload.exe</i>
<comment>(Only if you have a Ruffian:</comment>     
  # <i>mcopy /opt/milo/ldmilo.exe a:\ldmilo.exe</i>
<comment>)</comment>
# <i>echo -ne '\125\252' | dd of=/dev/fd0 bs=1 seek=510 count=2</i>
</pre>

<p>
Your MILO boot floppy is now ready to boot Gentoo Linux. You may need to
set environment variables in your ARCS Firmware to get MILO to start;
this is all explained in the <uri
link="http://tldp.org/HOWTO/MILO-HOWTO/">MILO-HOWTO</uri> with some examples 
on common systems, and examples of the commands to use in interactive mode.
</p>

<p>
Not reading the <uri link="http://tldp.org/HOWTO/MILO-HOWTO/">MILO-HOWTO</uri> 
is a <e>bad</e> idea.
</p>

<p>
Now continue with <uri link="?part=1&amp;chap=10">Installing Necessary System
Tools</uri>.
</p>

</body>
</section>
<section>
<title>Alternative: Using SILO</title>
<body>

<p>
It is now time to install and configure <uri
link="http://www.sparc-boot.org">SILO</uri>, the Sparc Improved boot
LOader.
</p>

<pre caption = "Installing SILO">
# <i>emerge --usepkg silo</i>
</pre>

<p>
Now open up your favorite editor (we use <c>nano</c> as an example) and
create <path>/etc/silo.conf</path>.
</p>

<pre caption = "Creating /etc/silo.conf">
# <i>nano -w /etc/silo.conf</i>
</pre>

<p>
Beneath you find an example <path>silo.conf</path> file. It uses the
partitioning scheme we use throughout this book and
<path>kernel-2.4.24</path> as kernelimage.
</p>

<pre caption = "Example /etc/silo.conf">
partition = 1         <comment># Boot partition</comment>
root = /dev/hda4      <comment># Root partition</comment>
timeout = 15          <comment># Wait 15 seconds before booting the default section</comment>

image = /boot/kernel-2.4.24
  label = linux
</pre>

<p>
If you use the example <path>silo.conf</path> delivered by Portage, be
sure to comment out <e>all</e> lines that you do not need.
</p>

<p>
If you have a separate <path>/boot</path> partition, copy over the
configuration file to <path>/boot</path> and run <c>/sbin/silo</c>:
</p>

<pre caption = "Only if you have /boot on a separate partition">
# <i>cp /etc/silo.conf /boot</i>
# <i>/sbin/silo -C /boot/silo.conf</i>
/boot/silo.conf appears to be valid
</pre>

<p>
If your <path>/boot</path> directory resides on your root partition,
just run <c>/sbin/silo</c>:
</p>

<pre caption = "Run silo">
# <i>/sbin/silo</i>
/etc/silo.conf appears to be valid
</pre>

<p>
Now continue with <uri link="?part=1&amp;chap=10">Installing Necessary System
Tools</uri>.
</p>

</body>
</section>
<section>
<title>Alternative: Using PALO</title>
<body>

<impo>
PALO can only be used on HPPA-based systems!
</impo>

<p>
On the PA-RISC platform, the boot loader is called palo. You can find
the configuration file in <path>/etc/palo.conf</path>. Here is a sample 
configuration:
</p>

<pre caption = "/etc/palo.conf example">
--commandline=2/vmlinux root=/dev/sdb2 HOME=/
--recoverykernel=/vmlinux.old
--init-partitioned=/dev/sdb
</pre>

<p>
The first line tells palo the location of the kernel and which boot
parameters it must use. <c>2/vmlinux</c> means the kernel named <c>/vmlinux</c>
resides on the second partition. Beware, the path to the kernel is
relative to the partition, not to the root of your filesystem.
</p>

<p>
The second line indicates which recovery kernel to use. If it is your
first install and you do not have a recovery kernel, please comment this
out. The third line indicates on which disk palo will reside. 
</p>

<p>
When configuration is done, just run <c>palo</c>.
</p>

<pre caption = "Applying the PALO configuration">
# <i>palo</i>
</pre>

<p>
Now continue with <uri link="?part=1&amp;chap=10">Installing Necessary System
Tools</uri>.
</p>

</body>
</section>
<section>
<title>Alternative: Using yaBoot</title>
<subsection>
<title>Introduction</title>
<body>

<impo>
yaBoot can only be used on NewWorld PPC-based systems!
</impo>

<p>
There are two ways to configure yaBoot for your system. You can use the
new and improved <c>yabootconfig</c> included with
<path>yaboot-1.3.8-r1</path> and later to automatically setup yaboot. If
for some reason you do not want to run <c>yabootconfig</c> to
automatically setup <path>/etc/yaboot.conf</path> or you are installing Gentoo
on a G5 (on which <c>yabootconfig</c> does not always work), you can just edit 
the sample file already installed on your system.
</p>

<ul>
  <li><uri link="#doc_chap8_sect2">Default: Using yabootconfig</uri></li>
  <li>
    <uri link="#doc_chap8_sect3">Alternative: Manual yaBoot Configuration</uri>
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>Default: Using yabootconfig</title>
<body>

<p>
<c>yabootconfig</c> will auto-detect the partitions on your machine and will
setup dual and triple boot combinations with Linux, Mac OS, and Mac OS
X.
</p>

<p>
To use <c>yabootconfig</c>, your drive must have a bootstrap partition, and
<path>/etc/fstab</path> must be configured with your Linux partitions. Both of 
these should have been done already in the steps above. To start, ensure that
you have the latest version of yaboot installed by running <c>emerge --update
yaboot</c>. This is necessary as the latest version will be available via
Portage, but it may not have made it into the stage files.
</p>

<pre caption = "Installing yaboot">
# <i>emerge --usepkg --update yaboot</i>
</pre>

<p>
Now run <c>yabootconfig</c>. The program will run and it will confirm
the location of the bootstrap partition. Type <c>Y</c> if it is correct. If
not, double check <path>/etc/fstab</path>. yabootconfig will then scan your
system setup, create <path>/etc/yaboot.conf</path> and run <c>mkofboot</c> for
you. <c>mkofboot</c> is used to format the bootstrap partition, and install 
the yaboot configuration file into it.
</p>

<p>
You might want to verify the contents of <path>/etc/yaboot.conf</path>. If 
you make changes to <path>/etc/yaboot.conf</path> (like setting the 
default/boot OS), make sure to rerun <c>ybin -v</c> to apply changes to the 
bootstrap partition.
</p>

<p>
Now continue with <uri link="?part=1&amp;chap=10">Installing Necessary System
Tools</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Alternative: Manual yaBoot Configuration</title>
<body>

<p>
First make sure you have the latest <c>yaboot</c> installed on your
system:
</p>

<pre caption = "Installing yaboot">
# <i>emerge --usepkg --update yaboot</i>
</pre>

<p>
Below you find a completed <path>yaboot.conf</path> file. Alter it at
will. G5 users should be aware that their disks are Serial ATA disks which are
seen as SCSI disks by the Linux kernel (so substitute <path>/dev/hda</path> with
<path>/dev/sda</path>).
</p>

<pre caption = "/etc/yaboot.conf">
<comment>## /etc/yaboot.conf
##
## run: "man yaboot.conf" for details. Do not make changes until you have!!
## see also: /usr/share/doc/yaboot/examples for example configurations.
##
## For a dual-boot menu, add one or more of:
## bsd=/dev/hdaX, macos=/dev/hdaY, macosx=/dev/hdaZ

## our bootstrap partition:</comment>

boot=/dev/hda9

<comment>## ofboot is the openfirmware way to specify the bootstrap partition.
## If this isn't defined, yaboot fails on the G5 (unless you pass the necessary
## arguments to the mkofboot/ybin program).
## hd:X means /dev/sdaX (or /dev/hdaX).
## 
## G5 users should uncomment this line!!

#ofboot=hd:9</comment>

<comment>##hd: is open firmware speak for hda</comment>
device=hd:
partition=11

delay=5
defaultos=macosx
timeout=30
install=/usr/lib/yaboot/yaboot
magicboot=/usr/lib/yaboot/ofboot

<comment>#################
## This section can be duplicated if you have more than one kernel or set of
## boot options
#################</comment>
image=/boot/vmlinux
  label=Linux
  root=/dev/hda11
  sysmap=/boot/System.map
  read-only
<comment>##################</comment>

<comment>## G5 users should set 
##   macos=hd:13
##   macosx=hd:12
## instead of the example values.</comment>
macos=/dev/hda13
macosx=/dev/hda12
enablecdboot
enableofboot
</pre>

<p>
Once <path>yaboot.conf</path> is set up the way you want it, you run 
<c>mkofboot -v</c> to install the settings in the bootstrap partition. <e>Don't 
forget this!</e> If all goes well, and you have the same options as the sample 
above, your next reboot will give you a simple, five-entry boot menu. If you 
update your yaboot config later on, you'll just need to run <c>ybin -v</c> to 
update the bootstrap partition - <c>mkofboot</c> is for initial setup only.
</p>

<p>
For more information on yaboot, take a look at the <uri
link="http://penguinppc.org/projects/yaboot">yaboot project</uri>. For
now, continue the installation with <uri link="?part=1&amp;chap=10">Installing
Necessary System Tools</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>Alternative: BootX</title>
<body>

<impo>
BootX can only be used on OldWorld PPC-based systems!
</impo>

<p>
If you want to use BootX, then you don't have to do anything at this
stage. However, after rebooting, you will have to some configuration in
the BootX control panel (inside MacOS). We discuss this later in the
installation.
</p>

<p>
For now, continue with <uri link="?part=1&amp;chap=10">Installing Necessary
System Tools</uri>.
</p>

</body>
</section>
<section>
<title>Alternative: MIPS PROM</title>
<subsection>
<body>

<p>
MIPS doesn't require that you install a bootloader. The MIPS PROM handles the
booting, but you need to install your kernel as a viable option. 
</p>

<p>
First, install <c>dvhtool</c>, needed to copy the kernel to the SGI Volume
Header.
</p>

<pre caption="Installing dvhtool">
# <i>emerge dvhtool</i>
</pre>

<p>
Now copy over the kernel to the SGI Volume Header. By default <c>dvhtool</c>
assumes that the SGI Volume Header is on <path>/dev/sda</path>. If this is not
the case (for instance when IRIX is installed on <path>/dev/sda</path> and
Gentoo/MIPS on <path>/dev/sdb</path>) you need to inform <c>dvhtool</c> about it
using <c>-d &lt;device&gt;</c>.
</p>

<pre caption="Copying a kernel to the SGI Volume Header">
# <i>dvhtool --unix-to-vh &lt;kernel name in /boot&gt; &lt;name you want to give in volume header&gt;</i>
</pre>

<p>
If you want to see all available entries in the volume, use
<c>--print-volume-directory</c>:
</p>

<pre caption="Viewing all available entries in the volume">
# <i>dvhtool --print-volume-directory</i>
</pre>

<p>
To setup your system to boot Gentoo/MIPS you need to go tweak some settings in
the MIPS PROM. We will describe this later on when the Gentoo installation has
finished.
</p>

<p>
Now continue with <uri link="?part=1&amp;chap=10">Installing Necessary System
Tools</uri>.
</p>

</body>
</subsection>
</section>
</sections>
