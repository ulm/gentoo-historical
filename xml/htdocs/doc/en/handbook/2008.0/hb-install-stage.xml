<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/2008.0/hb-install-stage.xml,v 1.8 2009/07/22 05:05:20 nightmorph Exp $ -->

<sections>

<version>9.5</version>
<date>2009-07-21</date>

<section>
<title>Installing a Stage Tarball</title>
<subsection>
<title>Setting the Date/Time Right</title>
<body>

<p>
Before you continue you need to check your date/time and update it. A
misconfigured clock may lead to strange results in the future!
</p>

<p>
To verify the current date/time, run <c>date</c>:
</p>

<pre caption="Verifying the date/time">
# <i>date</i>
Fri Mar 29 16:21:18 UTC 2005
</pre>

<p>
If the date/time displayed is wrong, update it using the <c>date
MMDDhhmmYYYY</c> syntax (<b>M</b>onth, <b>D</b>ay, <b>h</b>our, <b>m</b>inute
and <b>Y</b>ear). At this stage, you should use UTC time. You will be able to
define your timezone later on. For instance, to set the date to March 29th,
16:21 in the year 2005:
</p>

<pre caption="Setting the UTC date/time">
# <i>date 032916212005</i>
</pre>

</body>
</subsection>
</section>
<section id="available">
<title>Default: Using a Stage from the Installation CD</title>
<subsection>
<title>Extracting the Stage Tarball</title>
<body>

<p>
The stages on the CD reside in the <path>/mnt/cdrom/stages</path> directory. To
see a listing of available stages, use <c>ls</c>:
</p>

<pre caption="List all available stages">
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
If the system replies with an error, you may need to mount the CD-ROM first:
</p>

<pre caption="Mounting the CD-ROM">
# <i>ls /mnt/cdrom/stages</i>
ls: /mnt/cdrom/stages: No such file or directory
# <i>mount /dev/cdroms/cdrom0 /mnt/cdrom</i>
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
Now go into your Gentoo mountpoint (usually <path>/mnt/gentoo</path>):
</p>

<pre caption="Changing directory to /mnt/gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
We will now extract the stage tarball of your choice. We will do this with the
<c>tar</c> tool. Make sure you use the same options (<c>xvjpf</c>)! The <c>x</c>
stands for <e>Extract</e>, the <c>v</c> for <e>Verbose</e> to see what happens
during the extraction process (this one is optional), the <c>j</c> for
<e>Decompress with bzip2</e>, the <c>p</c> for <e>Preserve permissions</e> and
the <c>f</c> to denote that we want to extract a file, not standard input. In
the next example, we extract the stage tarball <path><keyval
id="stage3"/></path>. Be sure to substitute the tarball filename with your
stage.
</p>

<pre caption="Extracting the stage tarball">
# <i>tar xvjpf /mnt/cdrom/stages/<keyval id="stage3"/></i>
</pre>

<p>
Now that the stage is installed, continue with <uri
link="#installing_portage">Installing Portage</uri>.
</p>

</body>
</subsection>
</section>
<section id="installing_portage">
<title>Installing Portage</title>
<subsection>
<title>Unpacking a Portage Snapshot</title>
<body>

<p>
You now have to install a Portage snapshot, a collection of files that inform
Portage what software titles you can install, which profiles are available, etc.
</p>

</body>
</subsection>
<subsection id="installing_from_InstallCD">
<title>Unpack the Snapshot from the Installation CD</title>
<body>

<p>
To install the snapshot, take a look inside <path>/mnt/cdrom/snapshots/</path> 
to see what snapshot is available:
</p>

<pre caption="Checking the /mnt/cdrom/snapshots content">
# <i>ls /mnt/cdrom/snapshots</i>
</pre>

<p>
Now extract the snapshot using the following construct. Again, make sure you
use the correct options with <c>tar</c>. Also, the <c>-C</c> is with a capital
<c>C</c>, not <c>c</c>. In the next example we use
<path>portage-&lt;date&gt;.tar.bz2</path> as the snapshot filename. Be sure to
substitute with the name of the snapshot that is on your Installation CD.
</p>

<pre caption="Extracting a Portage snapshot">
# <i>tar xvjf /mnt/cdrom/snapshots/portage-&lt;date&gt;.tar.bz2 -C /mnt/gentoo/usr</i>
</pre>

</body>
</subsection>
<subsection id="copysources">
<title>Copy Source Code Archives</title>
<body>

<p>
You also need to copy over all source code from the Universal Installation CD. 
</p>

<pre caption="Copy over source code">
# <i>mkdir /mnt/gentoo/usr/portage/distfiles</i>
# <i>cp /mnt/cdrom/distfiles/* /mnt/gentoo/usr/portage/distfiles/</i>
</pre>

</body>
</subsection>
</section>
<section id="compile_options">
<title>Configuring the Compile Options</title>
<subsection>
<title>Introduction</title>
<body>

<p>
To optimize Gentoo, you can set a couple of variables which impact Portage 
behaviour. All those variables can be set as environment variables (using
<c>export</c>) but that isn't permanent. To keep your settings, Portage provides
you with <path>/etc/make.conf</path>, a configuration file for Portage. It is
this file we will edit now. 
</p>

<note>
A commented listing of all possible variables can be found in
<path>/mnt/gentoo/etc/make.conf.example</path>. For a successful Gentoo 
installation you'll only need to set the variables which are mentioned beneath.
</note>

<p>
Fire up your favorite editor (in this guide we use <c>nano</c>) so we can alter
the optimization variables we will discuss hereafter. 
</p>

<pre caption="Opening /etc/make.conf">
# <i>nano -w /mnt/gentoo/etc/make.conf</i>
</pre>

<p>
As you probably noticed, the <path>make.conf.example</path> file is
structured in a generic way: commented lines start with "#", other lines define
variables using the <c>VARIABLE="content"</c> syntax. The <path>make.conf</path>
file uses the same syntax. Several of those variables are discussed next. 
</p>

<warn>
Do not make any modifications to the USE variable if you are performing a stage3
with GRP installation. You can alter the USE variable after having installed the
packages you want. Gremlins are known to attack your system if you ignore this
warning!
</warn>

</body>
</subsection>
<subsection>
<title>CHOST</title>
<body>

<p>
The <c>CHOST</c> variable declares the target build host for your system. This
variable should already be set to the correct value. <brite>Do not edit
it</brite> as that might break your system. If the <c>CHOST</c> variable does
not look correct to you, you might be using the wrong stage3 tarball.
</p>

</body>
</subsection>
<subsection>
<title>CFLAGS and CXXFLAGS</title>
<body>

<p>
The <c>CFLAGS</c> and <c>CXXFLAGS</c> variables define the optimization flags 
for the <c>gcc</c> C and C++ compiler respectively. Although we define those
generally here, you will only have maximum performance if you optimize these
flags for each program separately. The reason for this is because every program
is different.
</p>

<p>
In <path>make.conf</path> you should define the optimization flags you think
will make your system the most responsive <e>generally</e>. Don't place
experimental settings in this variable; too much optimization can make 
programs behave bad (crash, or even worse, malfunction).
</p>

<p>
We cannot explain all possible optimization options here, but if you want to 
investigate them all, read the <uri link="http://gcc.gnu.org/onlinedocs/">GNU 
Online Manual(s)</uri> or the <c>gcc</c> info page (<c>info gcc</c> -- only
works on a working Linux system). For common optimizations and architecture
specific settings, please read <path>/etc/make.conf.example</path>.  This
file also contains lots of examples and information; don't forget to read it
too.
</p>

<p>
A first setting is the <c>-march=</c> or <c>-mcpu=</c> flag, which specifies
the name of the target architecture. Possible options are described in the
<path>make.conf.example</path> file (as comments).
</p>

<p>
A second one is the <c>-O</c> flag (that is a capital O, not a zero),
which specifies the <c>gcc</c> optimization
class flag. Possible classes are <c>s</c> (for size-optimized),
<c>0</c> (zero - for no optimizations), <c>1</c>, <c>2</c> or even <c>3</c> for more
speed-optimization flags (every class has the same flags as the one before, plus
some extras). <c>-O2</c> is the recommended default. <c>-O3</c> is known to
cause problems when used system-wide, so we recommend that you stick to
<c>-O2</c>.
</p>

<p>
Another popular optimization flag is <c>-pipe</c> (use pipes rather than
temporary files for communication between the various stages of compilation).
It has no impact on the generated code.
</p>

<p>
Using <c>-fomit-frame-pointer</c> (which doesn't keep the frame pointer in a
register for functions that don't need one) might have serious repercussions on
the debugging of applications.
</p>

<p>
When you define the <c>CFLAGS</c> and <c>CXXFLAGS</c>, you should combine
several optimization flags. The default values contained in the stage3 archive
you unpacked should be good enough. The following example is just an example:
</p>

<pre caption="Defining the CFLAGS and CXXFLAGS variable">
CFLAGS="<keyval id="CFLAGS"/>"
<comment># Use the same settings for both variables</comment>
CXXFLAGS="${CFLAGS}"
</pre>

<note>
You may also want to view the <uri
link="/doc/en/gcc-optimization.xml">Compilation Optimization Guide</uri> for
more information on how the various compilation options can affect your system.
</note>

</body>
</subsection>
<subsection>
<title>MAKEOPTS</title>
<body>

<p>
With <c>MAKEOPTS</c> you define how many parallel compilations should occur when
you install a package. A good choice is the number of CPUs in your system plus 
one, but this guideline isn't always perfect.
</p>

<pre caption="MAKEOPTS for a regular, 1-CPU system">
MAKEOPTS="-j2"
</pre>

</body>
</subsection>
<subsection>
<title>Ready, Set, Go!</title>
<body>

<p>
Update your <path>/mnt/gentoo/etc/make.conf</path> to your own preference and
save (<c>nano</c> users would hit <c>Ctrl-X</c>). You are now ready to continue
with <uri link="?part=1&amp;chap=6">Chrooting into the Gentoo Base System</uri>.
</p>

</body>
</subsection>
</section>
</sections>
