<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<sections>
<section>
<title>Installing the Sources</title>
<subsection>
<title>Choosing a Kernel</title>
<body>

<p>
The core around which all distributions are built is the Linux kernel. It is the
layer between the user programs and your system hardware. Gentoo provides its
users several possible kernel sources. A full listing with description is
available at the <uri link="/doc/en/gentoo-kernel.xml">Gentoo Kernel
Guide</uri>. 
</p>

<p>
For x86-based systems we have, amongst other kernels, <c>vanilla-sources</c>
(the default kernel source as developed by the linux-kernel developers),
<c>gentoo-sources</c> (kernel source patched with performance-enhancing
features), <c>xfs-sources</c> (kernel source with the latest XFS support),
<c>gs-sources</c> (kernel source patched for server usage),
<c>gaming-sources</c> (kernel source patched for optimal gaming performance),
...
</p>

<p>
For alpha-based systems we have <c>vanilla-sources</c> (the default kernel
source as developed by the linux-kernel developers), <c>alpha-sources</c>
(kernel source optimized for alpha users) and <c>compaq-sources</c> (kernel
source as used by RedHat for Alpha, maintained by Compaq).
</p>

<p>
For sparc-based systems we have <c>vanilla-sources</c> (the default kernel
source as developed by the linux-kernel developers) and <c>sparc-sources</c>
(kernel source optimized for SPARC users).
</p>

<p>
Other architectures should use the kernel source specifically optimized for
their architecture: <c>hppa-sources</c> (HPPA) and <c>ppc-sources</c> (PowerPC).
</p>

<p>
Choose your kernel source and install it using <c>emerge</c>. In the next
example we install the <c>vanilla-sources</c> (as <c>gentoo-sources</c> isn't
available on all architectures). Ofcourse substitute with your choice of 
sources:
</p>

<pre caption="Installing a kernel source">
# <i>emerge -k vanilla-sources</i>
</pre>

<p>
When you take a look in <path>/usr/src</path> you should see a symlink called
<path>linux</path> pointing to your kernel source:
</p>

<pre caption="Viewing the kernel source symlink">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.4.22-gentoo-r2
</pre>

<p>
If this isn't the case (i.e. the symlink points to a different kernel source) 
change the symlink before you continue:
</p>

<pre caption="Changing the kernel source symlink">
# <i>rm /usr/src/linux &amp;&amp; ln -s /usr/src/linux-2.4.22-gentoo-r2 /usr/src/linux</i>
</pre>

<p>
Now it is time to configure and compile your kernel source. The x86-based
architectures can use <c>genkernel</c> for this, which will build a generic
kernel as used by the LiveCD. We explain the "manual" configuration first
though, as it is the best way to optimize your environment.
</p>

<p>
If you want to manually configure your kernel, continue now with <uri
link="#doc_chap2">Default: Manual Configuration</uri>. x86-users can use
<c>genkernel</c> if they want and read <uri link="#doc_chap3">Alternative: Using
genkernel</uri> instead.
</p>

</body>
</subsection>
</section>
<section>
<title>Default: Manual Configuration</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Manually configuring a kernel is often seen as the most difficult course every
Linux users ever has to go through. Nothing is less true -- after configuring a
couple of kernels you don't even remember that it was difficult ;)
</p>

<p>
However, one thing <e>is</e> true: you must know your system when you start
configuring a kernel manually. Most information can be gathered by viewing the
contents of <path>/proc/pci</path> (or by using <c>lspci</c> if available).
</p>

<p>
Now go to your kernel source directory and execute <c>make menuconfig</c>. This
will fire up an ncurses-based configuration menu.
</p>

<pre caption="Invoking menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
You will be greeted with several configuration sections. We'll first list some
options you must activate (otherwise Gentoo will not function, or not function
properly without additional tweaks).
</p>

</body>
</subsection>
<subsection>
<title>Activating Required Options</title>
<body>

<p>
First of all, activate the use of development and experimental code/drivers.
You need this, otherwise some very important code/drivers won't show up:
</p>

<pre caption="Selecting experimental code/drivers">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers"
</pre>

<p>
Now go to <c>File Systems</c> and select support for the filesystems you use.
<e>Don't</e> compile them as modules, otherwise your Gentoo system will not be
able to mount your partitions. Also select <c>Virtual memory</c>, <c>/proc
file system</c>, <c>/dev file system</c> + <c>Automatically mount at boot</c>:
</p>

<pre caption="Selecting necessary file systems">
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot

<comment>(Deselect the following unless you have a 2.6 kernel)</comment>
  [ ] /dev/pts file system for Unix98 PTYs

<comment>(Select one of more of the following options as needed by your system)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
If you are using PPPoE to connect to the Internet, you will need the following
options in the kernel:
</p>

<pre caption="Selecting PPPoE necessary drivers">
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
The two compression options won't harm but are not definitely needed, neither
does the <c>PPP over Ethernet</c> option, that might only be used by 
<c>rp-pppoe</c> when configured to do kernel mode PPPoE.
</p>

<p>
If you are using LVM, you will need to activate it in the kernel:
</p>

<pre caption="Selecting LVM support">
Multi-device support (RAID and LVM) ---&gt;
  [*] Multiple devices driver support (RAID and LVM)
  &lt;*&gt;  Logical volume manager (LVM) support
</pre>

<p>
If you require it, don't forget to include support in the kernel for your
ethernet card.
</p>

<p>
Now, dependent on your architecture, you might need to select more options:
</p>

<ul>
<li><uri link="#doc_chap2_sect3">Activating Alpha-recommended Options</uri></li>
<li><uri link="#doc_chap2_sect4">Activating HPPA-recommended Options</uri></li>
<li><uri link="#doc_chap2_sect5">Activating PPC-recommended Options</uri></li>
<li><uri link="#doc_chap2_sect6">Activating SPARC-recommended Options</uri></li>
</ul>

<p>
If you have an x86-based system, you can immediately continue with <uri
link="#doc_chap2_sect7">Compiling and Installing</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Activating Alpha-recommended Options</title>
<body>

<p>
The following options are recommended for Alpha-users:
</p>

<pre caption="Alpha-specific options">
General setup ---&gt;
  &lt;*&gt; SRM environment through procfs
  &lt;*&gt; Configure uac policy via sysctl

Plug and Play configuration ---&gt;
  &lt;*&gt; Plug and Play support
  &lt;M&gt;   ISA Plug and Play support

SCSI support ---&gt;
  SCSI low-level drivers ---&gt;
    &lt;*&gt; SYM53C8XX Version 2 SCSI support (NEW)
    &lt;*&gt; Qlogic ISP SCSI support

Network device support ---&gt;
  Ethernet (10 or 100 Mbit) ---&gt;
    &lt;M&gt; DECchip Tulip (dc21x4x) PCI support
    &lt;M&gt; Generic DECchip &amp; DIGITAL EtherWORKS PCI/EISA
    &lt;M&gt; EtherExpressPro/100 support (eepro100)
    &lt;M&gt; EtherExpressPro/100 support (e100)
  Ethernet (1000 Mbit) ---&gt;
    &lt;M&gt; Alteon AceNIC
      [*] Omit support for old Tigon I
    &lt;M&gt; Broadcom Tigon3
  [*] FDDI driver support
  &lt;M&gt; Digital DEFEA and DEFPA
  &lt;*&gt; PPP support
    &lt;*&gt; PPP Deflate compression

Character devices ---&gt;
  [*] Support for console on serial port
  [*] Direct Rendering Manager

File systems ---&gt;
  &lt;*&gt; Kernel automounter version 4 support
  Network File Systems ---&gt;
    &lt;*&gt; NFS
      [*] NFSv3 client
      &lt;*&gt; NFS server
      [*] NFSv3 server
  Partition Types ---&gt;
    [*] Advanced partition selection
    [*] Alpha OSF partition support
  Native Language Support
    &lt;*&gt; NLS ISO 8859-1

Sound ---&gt;
  &lt;M&gt; Sound card support
    &lt;M&gt; OSS sound modules
      [*] Verbose initialisation
      [*] Persistent DMA buffers
      &lt;M&gt; 100% Sound Blaster compatibles
</pre>

<p>
When you're finished configuring the kernel, continue with <uri
link="#doc_chap2_sect7">Compiling and Installing</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Activating HPPA-recommended Options</title>
<body>

<p>
If you have a HIL mouse or keyboard, do not forget to compile in support for
them.
</p>

<pre caption="Activating HIL support">
Input core support ---&gt;
  [*] Keyboard support
  [*] Mouse support
  [*] Event interface support
</pre>

<p>
If you have no mouse on your HIL port, only use the basic support:
</p>

<pre caption="Basic HIL support">
HIL support ---&gt;
  [*] HIL Keyboard (basic) support
</pre>

<p>
If you however want <e>full</e> HIL support, select the following options:
</p>

<pre caption="Full HIL support">
HIL support ---&gt;
  [*] HP System Device Controller i8042 Support
  [*] HIL MLC Support
  [*] HIL Keyboard (full) support
  [*] HIL Mouse &amp; Pointer support
</pre>

<p>
When you're done configuring your kernel, continue with <uri
link="#doc_chap2_sect7">Compiling and Installing</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Activating PPC-recommended Options</title>
<body>

<p>
First of all, disable ADB raw keycodes:
</p>

<pre caption="Disabling ADB raw keycodes">
Macintosh Device Drivers ---&gt;
  [ ] Support for ADB raw keycodes
</pre>

<p>
Also choose the correct RTC support (<e>disable</e> the <c>Enhanced RTC</c> 
option):
</p>

<pre caption="Activating the correct RTC option">
Character devices ---&gt;
  [ ] Enhanced RTC

General setup ---&gt;
  [*] Support for /dev/rtc
</pre>

<p>
Users of OldWorld machines will want HFS support so they can copy compiled
kernels to the MacOS partition.
</p>

<pre caption="Activating HFS support">
File Systems ---&gt;
  [*] HFS Support
</pre>

<p>
When you're done configuring your kernel, continue with <uri
link="#doc_chap2_sect7">Compiling and Installing</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Activating SPARC-recommended Options</title>
<body>

<p>
First activate the correct bus-support:
</p>

<pre caption="Activating SBUS/UPA">
Console drivers ---&gt;
  Frame-buffer support ---&gt;
    [*] SBUS and UPA framebuffers             
      [*] Creator/Creator3D support     <comment>(Only for UPA slot adapter used in many Ultras)</comment>
    [*] CGsix (GX,TurboGX) support      <comment>(Only for SBUS slot adapter used in many SPARCStations)</comment>
</pre>

<p>
Ofcourse you want support for the OBP:
</p>

<pre caption="Activating OBP Support">
Misc Linux/SPARC drivers ---&gt;
  [*]  /dev/openprom device support
</pre>

<p>
You will also need SCSI-specific support:
</p>

<pre caption="Activating SCSI-specific support">
SCSI support ---&gt;
  SCSI low-level drivers ---&gt;
    &lt;*&gt; Sparc ESP Scsi Driver             <comment>(Only for SPARC ESP on-board SCSI adapter)</comment>
    &lt;*&gt; PTI Qlogic, ISP Driver            <comment>(Only for SBUS SCSI controllers from PTI or QLogic)</comment>
    &lt;*&gt; SYM53C8XX Version 2 SCSI support  <comment>(Only for Ultra 60 on-board SCSI adapter)</comment>
</pre>

<p>
To support your network card, select on of the following:
</p>

<pre caption="Activating networking support">
Network device support ---&gt;
  Ethernet (10 or 100Mbit) ---&gt;
    &lt;*&gt; Sun LANCE support                   <comment>(Only for SPARCStation, older Ultra systems, and as Sbus option)</comment>
    &lt;*&gt; Sun Happy Meal 10/100baseT support  <comment>(Only for Ultra; also supports "qfe" quad-ethernet on PCI and Sbus)</comment>
</pre>

<p>
When you're done configuring your kernel, continue with <uri
link="#doc_chap2_sect7">Compiling and Installing</uri>. However, after having
compiled the kernel, check its size:
</p>

<pre caption="Check kernel size">
# <i>ls -lh vmlinux</i>
-rw-r--r--    1 root     root         2.4M Oct 25 14:38 vmlinux
</pre>

<p>
If the size is bigger than 2.5Mb (for Sparc32) or 3.5Mb (for Sparc64),
reconfigure your kernel untill it doesn't exceed these limits. Ignoring this can
lead to a non-booting kernel.
</p>

</body>
</subsection>
<subsection>
<title>Compiling and Installing</title>
<body>

<p>
Now that your kernel is (hopefully) correctly configured, it is time to compile
and install it. Exit the configuration and run <c>make dep &amp;&amp; make
bzImage modules modules_install</c>:
</p>

<pre caption="Compiling the kernel">
<comment>(For x86-based systems, 2.4 kernel)</comment>
# <i>make dep &amp;&amp; make bzImage modules modules_install</i>

<comment>(For other systems, 2.4 kernel)</comment>
# <i>make dep &amp;&amp; make vmlinux modules modules_install</i>

<comment>(For 2.6 kernel)</comment>
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
When the kernel is done compiling, copy over the kernel image to
<path>/boot</path>. In the next example we assume you have configured and
compiled <c>vanilla-sources-2.4.22</c>:
</p>

<pre caption="Installing the kernel">
<comment>(For x86-based systems)</comment>
# <i>cp arch/i386/boot/bzImage /boot/kernel-2.4.22</i>
# <i>cp System.map /boot/System.map-2.4.22</i>

<comment>(For other systems)</comment>
# <i>cp vmlinux /boot/kernel-2.4.22</i>
# <i>cp System.map /boot/System.map-2.4.22</i>
</pre>

<p>
It is also wise to copy over your kernel configuration file to
<path>/boot</path>, just in case :)
</p>

<pre caption="Backing up your kernel configuration">
# <i>cp .config /boot/config-2.4.22-gentoo-r2</i>
</pre>

<p>
Now continue with <uri link="#doc_chap4">Installing Seperate Kernel
Modules</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>Alternative: Using genkernel</title>
<body>

<p>
If you are reading this section, you have chosen to use our <c>genkernel</c>
script to configure your kernel for you. However, this also means that you have
an x86-based system. Other architectures are <e>not supported</e> by
<c>genkernel</c>.
</p>

<p>
Now that your kernel source tree is installed, it's now time to compile your 
kernel by using our <c>genkernel</c> script to automatically build a kernel for 
you. <c>genkernel</c> works by configuring a kernel nearly identically to the 
way our LiveCD kernel is configured. This means that when you use 
<c>genkernel</c> to build your kernel, your system will generally detect all 
your hardware at boot-time, just like our Live CD does. Because genkernel 
doesn't require any manual kernel configuration, it is an ideal solution for 
those users who may not be comfortable compiling their own kernels.
</p>

<p>
Now, let's see how to use genkernel. First, emerge the genkernel ebuild:
</p>

<pre caption="Emerging genkernel">
# <i>emerge -k genkernel</i>
</pre>

<p>
Now, compile your kernel sources by running <c>genkernel</c>:
</p>

<pre caption="Running genkernel">
# <i>genkernel</i>
Gentoo Linux genkernel, version 1.4
Copyright 2003 Gentoo Technologies, Inc., Bob Johnson, Daniel Robbins
Distributed under the GNU General Public License version 2

Settings:
compile optimization: 1 processor(s)
source tree: /usr/src/linux-2.4.22
config: gentoo (customized)
config loc: /etc/kernels/config-2.4.22
initrd config: (default) /etc/kernels/settings

* Running "make oldconfig"...                                                                     [ ok ]
* Logging to /var/log/genkernel.log...                                                            [ ok ]
* Starting 2.4.22 build...                                                                        [ ok ]
* Running "make dep"...                                                                           [ ok ]
* Running "make bzImage"...                                                                       [ ok ]
* Running "make modules"...                                                                       [ ok ]
* Running "make modules_install"...                                                               [ ok ]
* Moving bzImage to /boot/kernel-2.4.22...                                                        [ ok ]
* Building busybox...                                                                             [ ok ]
* Creating initrd...                                                                              [ ok ]

* Build completed successfully!

* Please specify /boot/kernel-2.4.22 and /boot/initrd-2.4.22
* when customizing your boot loader configuration files.
</pre>

<p>
Once <c>genkernel</c> completes, a kernel, full set of modules and 
<e>initial root disk</e> (initrd) will be created. We will use the kernel 
and initrd when configuring a boot loader later in this document. Write
down the names of the kernel and initrd as you will need it when writing
the bootloader configuration file. The initrd will be started immediately after 
booting to perform hardware autodetection (just like on the Live CD) before 
your "real" system starts up.
</p>

<p>
Now, let's perform one more step to get our system to be more like the Live 
CD -- let's emerge <c>hotplug</c>. While the initrd autodetects hardware that 
is needed to boot your system, <c>hotplug</c> autodetects everything else.
To emerge and enable <c>hotplug</c>, type the following:
</p>

<pre caption="Emerging and enabling hotplug">
# <i>emerge -k hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>

</body>
</section>
<section>
<title>Installing Seperate Kernel Modules</title>
<body>

<p>
Finally, you should emerge ebuilds for any additional hardware that is on your
system. Here is a list of kernel-related ebuilds that you could emerge:
</p>

<table>
<tcolumn width="1in"/>
<tcolumn width="4in"/>
<tcolumn width="2in"/>
<tr>
  <th>Ebuild</th>
  <th>Purpose</th>
  <th>Command</th>
</tr>
<tr>
  <ti>nvidia-kernel</ti>
  <ti>Accelerated NVIDIA graphics for XFree86</ti>
  <ti><c>emerge -k nvidia-kernel</c></ti>
</tr>
<tr>
  <ti>nforce-net</ti>
  <ti>On-board ethernet controller on NVIDIA NForce(2) motherboards</ti>
  <ti><c>emerge nforce-net</c></ti>
</tr>
<tr>
  <ti>nforce-audio</ti>
  <ti>On-board audio on NVIDIA NForce(2) motherboards</ti>
  <ti><c>emerge nforce-audio</c></ti>
</tr>
<tr>
  <ti>e100</ti>
  <ti>Intel e100 Fast Ethernet Adapters</ti>
  <ti><c>emerge e100</c></ti>
</tr>
<tr>
  <ti>e1000</ti>
  <ti>Intel e1000 Gigabit Ethernet Adapters</ti>
  <ti><c>emerge e1000</c></ti>
</tr>
<tr>
  <ti>emu10k1</ti>
  <ti>Creative Sound Blaster Live!/Audigy support</ti>
  <ti><c>emerge emu10k1</c></ti>
</tr>
<tr>
  <ti>ati-drivers</ti>
  <ti>Accelerated ATI Radeon 8500+/FireGL graphics for XFree86</ti>
  <ti><c>emerge ati-drivers</c></ti>
</tr>
<tr>
  <ti>xfree-drm</ti>
  <ti>
    Accelerated graphics for ATI Radeon up to 9200, Rage128, Matrox, Voodoo and
    other cards for XFree86
  </ti>
  <ti><c>VIDEO_CARDS="yourcard" emerge xfree-drm</c></ti>
</tr>
</table>

<p>
Beware though, some of these ebuilds might deal with big dependencies. To verify
what packages will be installed by emerging an ebuild, use <c>emerge -p</c>. For
instance, for the <c>emu10k1</c> package:
</p>

<pre caption="View full installation package listing">
# <i>emerge -p emu10k1</i>
</pre>

<p>
If you don't like the packages it wants to install, use <c>emerge -pv</c> to see
what USE-flags are checked when deciding the dependencies:
</p>

<pre caption="View USE-flag usage">
# <i>emerge -pv emu10k1</i>
<comment>...</comment>
[ebuild  N    ] media-sound/aumix-2.8  +gpm +nls +gtk +gnome +alsa -gtk2
</pre>

<p>
In the previous example you can see that one of <c>emu10k1</c>'s dependencies
(<c>aumix</c>) uses the <c>gtk</c> and <c>gnome</c> USE-flags, making gtk (which
depends on XFree) be compiled with it.
</p>

<p>
If you don't want all this to be compiled, deselect all USE-flags, for instance:
</p>

<pre caption="Emerging emu10k1 with all USE-flags deselected">
# <i>USE="-gpm -nls -gtk -gnome -alsa" emerge -p emu10k1</i>
</pre>

<p>
When you're happy with the results, remove the <c>-p</c> to start installing
<c>emu10k1</c>.
</p>

</body>
</section>
</sections>
