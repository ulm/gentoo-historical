<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/hb-install-ppc-bootloader.xml,v 1.27 2005/06/14 10:18:25 swift Exp $ -->

<sections>

<version>2.4</version>
<date>2005-05-12</date>

<section>
<title>Making your Choice</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Now that your kernel is configured and compiled and the necessary system
configuration files are filled in correctly, it is time to install a
program that will fire up your kernel when you start the system. Such a
program is called a <e>bootloader</e>. But before you start, consider
your options...
</p>

<p>
Several bootloaders exist for Linux/PPC. We have <uri link="#yaboot">yaboot</uri>
(for NewWorld Apple and IBM machines) and <uri link="#bootx">BootX</uri> (for 
OldWorld Apple machines). The Pegasos does not require a bootloader, but
we included the <uri link="#bootcreator">BootCreator</uri> for creating a
SmartFirmware bootmenu.
</p>

</body>
</subsection>
</section>
<section id="yaboot">
<title>Default: Using yaboot</title>
<subsection>
<title>Introduction</title>
<body>

<impo>
yaboot can only be used on NewWorld Apple and IBM systems!
</impo>

<p>
First we have to create the <path>/dev</path> files in our new home, which is
needed during the bootloader installation.  This could be done by "bind"-mapping
the <path>/dev</path>-filesystem from the Installation CD:
</p>

<pre caption="Bind-mounting the /dev-filesystem">
# <i>exit </i> # this will exit the chroot
# <i>mount -o bind /dev /mnt/gentoo/dev</i>
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>/usr/sbin/env-update &amp;&amp; source /etc/profile </i>
</pre>

<p>
There are two ways to configure yaboot for your system. You can use the
included <c>yabootconfig</c> to automatically set up yaboot. If
for some reason you do not want to run <c>yabootconfig</c> to
automatically set up <path>/etc/yaboot.conf</path> or you are installing Gentoo
on a G5 (on which <c>yabootconfig</c> does not always work), you can just edit 
the sample file already installed on your system.
</p>

<note>
You may need to edit the yaboot.conf file if using genkernel.  The arguments
provided by the genkernel ebuild need to be added as an option to the kernel
image section.  The relevant section of yaboot.conf is given below:
</note>

<pre caption="Adding boot arguments to yaboot.conf">
<comment>#################
## This section can be duplicated if you have more than one kernel or set of
## boot options - replace 2.6.9 with your kernel-version
#################</comment>
image=/boot/kernel-2.6.9
  label=Linux
  root=/dev/ram0    <comment># If using genkernel this is /dev/ram0</comment>
  partition=3
  sysmap=/boot/System.map-2.6.9
  append="real_root=/dev/hda3 init=/linuxrc"  <comment># Add arguments to this line</comment>
  read-only
<comment>##################</comment>
</pre>

<ul>
  <li><uri link="#yabootconfig">Default: Using yabootconfig</uri></li>
  <li>
    <uri link="#manual_yaboot">Alternative: Manual yaboot Configuration</uri>
  </li>
</ul>

</body>
</subsection>
<subsection id="yabootconfig">
<title>Default: Using yabootconfig</title>
<body>

<p>
<c>yabootconfig</c> will auto-detect the partitions on your machine and will
set up dual and triple boot combinations with Linux, Mac OS, and Mac OS X.
</p>

<p>
To use <c>yabootconfig</c>, your drive must have an Apple_Bootstrap partition,
and <path>/etc/fstab</path> must be configured with your Linux partitions. Both
of these should have been done already in the steps above. To start, ensure that
you have the latest <c>yaboot</c> installed.
</p>

<pre caption = "Installing yaboot with GRP">
# <i>emerge --usepkg --update yaboot</i>
</pre>

<p>
Now exit the chroot and run <c>yabootconfig --chroot /mnt/gentoo</c>. The
program will run and it will confirm the location of the bootstrap partition.
Type <c>Y</c> if it is correct. If not, double check <path>/etc/fstab</path>.
yabootconfig will then scan your system setup, create
<path>/etc/yaboot.conf</path> and run <c>mkofboot</c> for you. <c>mkofboot</c>
is used to format the Apple_Bootstrap partition, and install the yaboot
configuration file into it.  After this enter the chroot again.
</p>
<pre caption="enter chroot">
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>/usr/sbin/env-update &amp;&amp; source /etc/profile</i>
</pre>

<p>
You might want to verify the contents of <path>/etc/yaboot.conf</path>. If you
make changes to <path>/etc/yaboot.conf</path> (like setting the default/boot
OS), make sure to rerun <c>ybin -v</c> to apply changes to the Apple_Bootstrap
partition.
</p>

<p>
Now continue with <uri link="#reboot">Rebooting the System</uri>.
</p>

</body>
</subsection>
<subsection id="manual_yaboot">
<title>Alternative: Manual yaboot Configuration</title>
<body>

<p>
First make sure you have the latest <c>yaboot</c> installed on your
system:
</p>

<pre caption = "Installing yaboot">
# <i>emerge --usepkg --update yaboot</i>
</pre>

<p>
Below you find a completed <path>yaboot.conf</path> file. Alter it at
will. G5 users should be aware that their disks are Serial ATA disks which are
seen as SCSI disks by the Linux kernel (so substitute <path>/dev/hda</path> with
<path>/dev/sda</path>).
</p>

<pre caption = "/etc/yaboot.conf">
<comment>## /etc/yaboot.conf
##
## run: "man yaboot.conf" for details. Do not make changes until you have!!
## see also: /usr/share/doc/yaboot/examples for example configurations.
##
## For a dual-boot menu, add one or more of:
## bsd=/dev/hdaX, macos=/dev/hdaY, macosx=/dev/hdaZ

## our bootstrap partition:</comment>

boot=/dev/hda2

<comment>## ofboot is the openfirmware way to specify the bootstrap partition.
## If this isn't defined, yaboot fails on the G5 and some G4s (unless 
## you pass the necessary arguments to the mkofboot/ybin program).
## hd:X means /dev/sdaX (or /dev/hdaX).
## 
## G5 users should uncomment this line!!

#ofboot=hd:2

## hd: is open firmware speak for hda</comment>
device=hd:

delay=5
defaultos=macosx
timeout=30
install=/usr/lib/yaboot/yaboot
magicboot=/usr/lib/yaboot/ofboot

<comment>#################
## This section can be duplicated if you have more than one kernel or set of
## boot options - replace 2.6.9 with your kernel-version
#################</comment>
image=/boot/kernel-2.6.9
  label=Linux
  root=/dev/hda3
  partition=3
  sysmap=/boot/System.map-2.6.9
  read-only
<comment>##################

## G5 users and some G4 users should set 
##   macos=hd:13
##   macosx=hd:12
## instead of the example values.</comment>
macos=/dev/hda13
macosx=/dev/hda12
enablecdboot
enableofboot
</pre>

<p>
Once <path>yaboot.conf</path> is set up the way you want it, you run
<c>mkofboot -v</c> to install the settings in the bootstrap partition. <e>Don't
forget this!</e> Confirm when <c>mkofboot</c> asks you to create a new
filesystem.
</p>

<p>
If all goes well, and you have the same options as the sample
above, your next reboot will give you a simple, five-entry boot menu. If you
update your yaboot config later on, you'll just need to run <c>ybin -v</c> to
update the bootstrap partition - <c>mkofboot</c> is for initial setup only.
</p>

<p>
For more information on yaboot, take a look at the <uri
link="http://penguinppc.org/bootloaders/yaboot">yaboot project</uri>. For
now, continue the installation with <uri link="#reboot">Rebooting the
System</uri>.
</p>

</body>
</subsection>
</section>
<section id="bootx">
<title>Alternative: BootX</title>
<body>

<impo>
BootX can only be used on OldWorld Apple systems!
</impo>

<p>
Since BootX boots Linux from within MacOS, the kernel will need to be copied
from the Linux Partition to the MacOS partition.  First, mount the MacOS 
partition from outside of the chroot.  Use <c>mac-fdisk -l</c> to find the 
MacOS partition number, sda6 is used as an example here.  Once the partition is
mounted, we'll copy the kernel to the system folder so BootX can find it.
</p>

<pre caption="Copying the kernel to the MacOS partition">
# <i>exit</i>
cdimage ~# <i>mkdir /mnt/mac</i>
cdimage ~# <i>mount /dev/sda6 /mnt/mac -t hfs</i>
cdimage ~# <i>cp /mnt/gentoo/usr/src/linux/vmlinux "/mnt/mac/System Folder/Linux Kernels"</i>
</pre>

<p>
If genkernel is used, the kernel is located in a different place and the initrd
will need to be copied as well.
</p>

<pre caption="Copying the Genkernel kernel and initrd to the MacOS partition">
# <i>exit</i>
cdimage ~# <i>mkdir /mnt/mac</i>
cdimage ~# <i>mount /dev/sda6 /mnt/mac -t hfs</i>
cdimage ~# <i>cp /mnt/gentoo/boot/kernel-* "/mnt/mac/System Folder/Linux Kernels"</i>
cdimage ~# <i>cp /mnt/gentoo/boot/initrd-* "/mnt/mac/System Folder"</i>
</pre>

<p>
Now that the kernel is copied over, unmount all mounted filesystems and enter 
that one magical command that you have been waiting for: <c>reboot</c>.
</p>

<pre caption="Unmounting all partitions and rebooting">
cdimage ~# <i>cd /</i>
cdimage ~# <i>umount /mnt/gentoo/proc /mnt/gentoo /mnt/mac</i>
cdimage ~# <i>reboot</i>
</pre>

<p>
Of course, don't forget to remove all bootable media, MacOS needs to boot this
time.
</p>

<p>
Now that the machine has booted into MacOS, open the BootX control panel and 
Select <c>Options</c> and uncheck <c>Used specified RAM disk</c> if not using
genkernel.  If using genkernel, ensure that the genkernel initrd is selected
instead of the Installation CD initrd.  If not using genkernel, there is now 
an option to specify the machine's Linux root disk and partition. Fill these 
in with the appropriate values.  Depending upon the kernel configuration, some 
boot arguments may need to be applied.
</p>

<p>
BootX can be configured to start Linux upon boot. If you chose to do this, the 
computer will boot into MacOS and then during startup load BootX which in turn
starts Linux. See the <uri link="http://penguinppc.org/bootloaders/bootx/">
Boot X home page</uri> for more information.
</p>

<p>
Now reboot again and boot into Linux, then continue with <uri
link="?part=1&amp;chap=11">Finalizing your Gentoo Installation</uri>.
</p>

</body>
</section>
<section id="bootcreator">
<title>Alternative: BootCreator</title>
<body>

<impo>
BootCreator will build a nice SmartFirmware bootmenu written in Forth for the
Pegasos.
</impo>

<p>
First make sure you have the latest <c>bootcreator</c> installed on your
system:
</p>

<pre caption = "Installing bootcreator">
# <i>emerge --usepkg --update bootcreator</i>
</pre>

<p>
Now copy the file <path>/etc/bootmenu.example</path> into
<path>/etc/bootmenu</path> and edit it to your needs:
</p>

<pre caption = "Edit the bootcreator config file">
# <i>cp /etc/bootmenu.example /etc/bootmenu</i>
# <i>nano -w /etc/bootmenu</i>
</pre>

<p>
Below you find a completed <path>/etc/bootmenu</path> config file. Alter it at
will.
</p>

<pre caption = "bootcreator config file">
<comment>#
# Example description file for bootcreator 1.1
#</comment>

[VERSION]
1

[TITLE]
Boot Menu

[SETTINGS]
AbortOnKey = false
Timeout    = 9
Default    = 1

[SECTION]
Local HD -> Morphos      (Normal)
ide:0 boot2.img ramdebug edebugflags="logkprintf"

[SECTION]
Local HD -> Linux 2.6.10 (Normal)
ide:0 linux-2.6.10 video=radeonfb:1024x768@70 root=/dev/hda3

</pre>

<p>
Finally the <path>bootmenu</path> must be transfered into Forth and copied to
your boot partition, so that the SmartFirmware can read it.  Therefore you have
to call <c>bootcreator</c>:
</p>

<pre caption = "Install the bootmenu">
# <i>bootcreator /etc/bootmenu /boot/menu</i>
</pre>

<note>
Be sure to have a look into the SmartFirmware's settings when you reboot, that
<path>menu</path> is the file that will be loaded by default.
</note>

<p>
For now, continue the installation with <uri link="#reboot">Rebooting the
System</uri>.
</p>


</body>
</section>
<section id="reboot">
<title>Rebooting the System</title>
<subsection>
<body>

<p>
Exit the chrooted environment and unmount all mounted partitions. Then type in
that one magical command you have been waiting for: <c>reboot</c>.
</p>

<pre caption="Exiting the chroot, unmounting all partitions and rebooting">
# <i>exit</i>
livecd ~# <i>umount /mnt/gentoo/proc /mnt/gentoo/dev /mnt/gentoo</i>
livecd ~# <i>reboot</i>
</pre>

<p>
Once rebooted in your Gentoo installation, finish up with <uri
link="?part=1&amp;chap=11">Finalizing your Gentoo Installation</uri>.
</p>

</body>
</subsection>
</section>
</sections>
