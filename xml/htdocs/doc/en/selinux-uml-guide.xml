<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/doc/en/selinux-uml-guide.xml">
<title>Gentoo Linux Guide to setting up a User Mode SELinux Environment</title>
<author title="Author">
  <mail link="dimiduk.1@osu.edu">Nick Dimiduk</mail>
</author>

<abstract>
This guide shows you how to set up a User-Mode Linux (UML) installation of
SELinux.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->
<license/>

<version>0.2</version>
<date>March 4, 2004</date>

<chapter>
<title>Before we start</title>
<section>
<title>What this guide is</title>
<body>

<p>
The purpose of this guide is to provide a step by step walk-through for
setting up a user-mode linux installation with SELinux support. It provides
instructions, pointers, hints and warnings of possible pitfalls. After
completing the guide, you will have a fully functional SELinux system
running in a user mode linux "jail".
</p>

</body>
</section>
<section>
<title>What you will not find in this document</title>
<body>

<p>
This guide is not a replacement for the documentation provided by
the <uri link="http://user-mode-linux.sf.net">UML</uri> and <uri
link="http://www.nsa.gov/selinux/">SELinux</uri> projects.  We highly recommend 
to take a look through the appropriate docs to acquire a full understanding of 
what the listed commands actually do and to fully understand the decisions you 
make while setting up the virtual environment.
</p>

<p>
This guide is <e>not</e> a tutorial on how to use or administer a SELinux-based
system.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Preparing for User-Mode SELinux</title>
<section>
<title>Building the kernel</title>
<body>

<p>
Start by getting the user-mode sources and configure the kernel accordingly:
</p>

<pre caption="Installation, Configuration and Compilation of the Kernel">
# <i>emerge sys-kernel/usermode-sources</i>
# <i>cd /usr/src/linux-&gt;ver&lt;-uml</i>
# <i>make menuconfig <comment>ARCH=um</comment></i>
# <i>make linux <comment>ARCH=um</comment></i>
# <i>cp linux /usr/local/bin/linux</i>
</pre>

<warn>
The <e>ARCH=um</e> fragment is <e>extremely</e> important.  You have
been warned.
</warn>

<p>
During the configuration of the kernel, be sure to activate the following 
features:
</p>

<pre caption="Feature List">
<comment>(Under "Code maturity level options")</comment>
[*] Prompt for development and/or incomplete code/drivers

<comment>(Under "File Systems")</comment>
[*] Second extended fs support
[*]   Ext2 extended attributes
[ ]     Ext2 POSIX Access Control Lists
[*]     Ext2 Security Labels
<comment>(If you want ext3)</comment>
[*] Ext3 journalling file system support
[*]   Ext3 extended attributes
[ ]     Ext3 POSIX Access Control Lists
[*]     Ext3 Security Labels


<comment>(Under "File Systems --&gt; Pseudo filesystems")</comment>
[ ] /dev file system support (OBSOLETE)
[ ]   Automatically mount at boot
[*] /dev/pts file system for Unix98 PTYs
[*]   /dev/pts Extended Attributes
[*]     /dev/pts Security Labels
[*] Virtual memory file system support (former shm fs)

<comment>(Under "Security Options")</comment>
[*] Enable different security models
[*]   NSA SELinux Support
[*]     NSA SELinux Development Support
</pre>

<warn>ReiserFS and JFS are not supported in SELinux</warn>

<p>
No other policy should be added.
</p>

</body>
</section>
<section>
<title>Userland utils</title>
<body>

<p>
Now continue with installing the UML utilities.
</p>

<pre caption="Installing UML utilities">
# <i>emerge sys-apps/usermode-utilities</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Creating root_fs</title>
<section>
<title>Making the Gentoo chroot</title>
<body>

<p>
The <path>root_fs</path> file needed for user-mode linux is a single file that
contains an entire Gentoo Linux filesystem. To generate this file you
will need to have Loopback device support enabled in the host
(non-user-mode) kernel.
</p>

<p>
Generating the <path>root_fs</path> file itself will be our last step. First we
will generate a Gentoo filesystem in an ordinary chroot. Download (or extract) a
stage tarball and start the Gentoo installation as you would do with a live
system. 
</p>

<p>
There are a few quirks that you need to take into consideration:
</p>

<ul>
  <li>
    You can safely ignore warnings about the SELinux module not being loaded;
    the warnings should go away once the SELinux kernel is used
  </li>
  <li>
    Edit <path>/etc/make.profile/packages</path> and remove the "*" in front of
    the <c>virtual/bootloader</c> line if it exists
  </li>
  <li>
    Of all available system loggers, only <c>syslog-ng</c> and <c>metalogd</c>
    have been sufficiently tested with SELinux
  </li>
  <li>
    The only cron daemon that seems to work with SELinux is <c>vixie-cron</c>
  </li>
</ul>

<p>
When you edit <path>/etc/fstab</path> you'll need to make a couple of 
changes:
</p>

<ul>
  <li><path>/dev/ROOT</path> should be changed to <path>/dev/ubd/0</path></li>
  <li><path>/dev/ubd/0</path> should have an fs type of ext2 or ext3</li>
  <li>point <path>/dev/SWAP</path> at <path>/dev/ubd/1</path></li>
  <li>Comment out (remove)<path>/dev/BOOT</path></li>
</ul>

<p>
Also add the following two lines:
</p>

<pre caption="Additions to /etc/fstab">
none    /dev/pts    devpts       gid=5,mode=620    0    0
none    /selinux    selinuxfs    defaults          0    0
</pre>

<p>
Now the fun part begins: let's build the policies!
</p>

<pre caption="Creating SELinux policies">
# <i>cd /etc/security/selinux/src/policy/</i>
# <i>make install</i>
</pre>

<p>
Now finish up the installation and proceed with creating the 
<path>root_fs</path> file.
</p>

</body>
</section>
<section>
<title>Making root_fs</title>
<body>

<p>
When we check the size of the chroot environment we find out that it takes a 
hefty 1.2G.  Why, you ask?  We have an entire portage tree, for starters.  
More on this later.
</p>

<p>
Because of this hefty foot-print, we're going to have to make an image with
some room -- let's start with 1.5G.
</p>

<pre caption="Creating the root_fs file">
# <i>cd /mnt/gentoo</i>
# <i>tar cvjpf ~/root_fs.tbz2 *</i>
# <i>cd</i>
# <i>dd if=/dev/zero of=root_fs seek=1500 count=1 bs=1M</i>
# <i>mke2fs -F root_fs</i>
# <i>mount -o loop root_fs /mnt/loop/</i>
# <i>tar xvjpf root_fs.tbz2 -C /mnt/loop</i>
# <i>umount /mnt/loop</i>
</pre>

<p>
Let's also create a 500MB swap file.
</p>

<pre caption="Creating a swap file">
# <i>dd if=/dev/zero of=swap_fs seek=500 count=1 bs=1M</i>
# <i>mkswap -f swap_fs</i>
</pre>

<p>
Now see if it works:
</p>

<pre caption="Booting the Gentoo environment">
# linux ubd0=root_fs ubd1=swap_fs
</pre>

<note>
User-mode linux uses xterms for the virtual consoles that are run at boot
time, so you need to make sure that the terminal from which you run
user-mode linux has $DISPLAY properly set (along with proper xhost/xauth
permissions).
</note>

<p>
Once we're here, the last thing to do is label the filesystem.
</p>

<pre caption="Label the filesystem">
<comment>(From inside the Gentoo SELinux environment)</comment>
# <i>cd /etc/security/selinux/src/policy</i>
# <i>make relabel</i>
# <i>reboot</i>
</pre>

<p>
Congratulations; you're all set and ready :)
</p>

</body>
</section>
</chapter>

</guide>
