<?xml version='1.0' encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/desktop.xml">
	<title>Gentoo Linux Desktop Configuration Guide</title>
		<author title="Author"><mail link="zhen@gentoo.org">John P. Davis</mail></author>
		<author title="Author"><mail link="g2boojum@gentoo.org">Grant Goodyear</mail></author>

	<abstract>
		This guide shows you configure Gentoo Linux to be a full-purpose
   		desktop system.  Specifically, we walk through installing and 
   		configuring X, KDE, GNOME, OSS (sound), postfix (electronic mail), 
   		and samba (unix/windows interoperability).
	</abstract>

	<version>1.2</version>
	<date>9 February 2003</date>

	<chapter>
		<title>Preliminaries</title>
			<section>
			
				<body>
			
				<p>Needless to say, you first need to have Gentoo Linux installed
				(<uri>http://www.gentoo.org/doc/en/build.xml</uri>).  Having finished
				that rather enjoyable process, you also need to download the <e>Portage</e>
				tree.  You really should read the Portage User Guide 
				(<uri>http://www.gentoo.org/doc/en/portage-user.xml</uri>), but if you're
				in a hurry you just need to type:
				</p>
			
				<pre caption = "Getting Current">
# <c>emerge sync</c>
				</pre>

				<p>A quick note is in order about the packages that I have chosen to 
				discuss here.  Gentoo Linux has a considerable wealth of window managers,
				mail transport agents, etcetera that can easily be installed.  The specific
				packages that I have chosen to cover are not preferred by Gentoo Linux, they
				are simply packages that the author likes and/or knows how to configure.
				In other words, they're the packages on the author's own desktop.</p>

				<impo>
				Depending on which desktop you are going to install, you might want to
				disable support for which desktops you are not using in <path>/etc/make.conf</path>.
				Under the <i>USE</i> section, add <e>-gnome -gtk</e> if you are using KDE, or add
				<e>-kde -qt</e> if you are going to use GNOME.
				</impo>

				<warn>If you encounter a bug with any of these packages, report
				them to <uri>http://bugs.gentoo.org/</uri>. <e>Do Not</e> report them to the 
				package maintainers (i.e. KDE), the Gentoo Developers will move the bug
				upstream if necessary.
				</warn>

			</body>
		</section>
	</chapter>

	<chapter>
	<title>Installing XFree86</title>
		<section>
			<title>Installation</title>

			<body>

			<p>The emerge/install process of X will take awhile on even a quick system. The system
			is quite large, so be prepared to read a book, take a nap, etc.
			</p>

			<p>To emerge X, all that you have to do is type:
			</p>

			<pre caption = "Emerging XFree86">
# <c>emerge xfree</c>
			</pre>

			<p>After this rather length process is completed, configuration will begin.
			</p>

			</body>
		</section>

		<section>
			<title>Configuring X</title>

			<body>

			<p>I like using the console-based <c>xf86config</c> program to configure X,
			although the generated <path>/etc/X11/XF86Config</path> file is not very
			elegant -- see <uri link="http://www-105.ibm.com/developerworks/education.nsf/
			linux-onlinecourse-bytitle/3100FF4795B3F31F86256AF70056FDB3?OpenDocument"> this tutorial</uri>
			for an alternative and more thorough X configuration.
			Before you start, you'll need to know the horizontal and vertical refresh
			rates of your monitor (my viewsonic G773 has Horizontal: 30-69 KHz, 
			Vertical: 55-90 KHz), the type and amount of ram (in KB) of your video card
			(a 32768 KB GeForce card, in my case), and the type and device of your
			mouse (an intellimouse plugged into the ps/2 port <path>/dev/psaux</path>).
			</p>

			<pre caption = "Running xf86config">
# <c>/usr/X11R6/bin/xf86config</c>
			</pre>

			<p>Because I have a three-button mouse I choose not to enable 
			3-button emulation.  Don't  forget to add XKB support if you have an internation
			keyboard or need multiple language support. 
			You'll have to guess at a screen resolution and pixel depth that you'll like.  I happen
			to like 1280x1024 at 24bpp on my viewsonic, but that's only because it
			doesn't work at a higher resolution.  If you've never done this before,
			don't be surprised if you end up running <c>xf86config</c> multiple
			times.
			</p>

			<note>If you don't know the refresh rates of your monitor, try doing a 
			google search, <uri>http://www.google.com/</uri>, on the model number and
			manufacturer of your monitor.  The refresh rates are generally given as
			part of the monitor specs.</note>

			<p>If you're an X-configuring veteran, you may be used to making
			a symbolic link from your mouse device to <path>/dev/mouse</path>.
			Such symlinks used to be problematic with devfs, since they tended to go
			away after a reboot.  Gentoo Linux now handles symbolic links in 
			<path>/dev</path> correctly.  Just make the <path>/dev/mouse</path> symlink
			using <c>ln -s</c> and it <e>will</e> be preserved upon rebooting.
			</p>

			<pre caption = "Testing your Configuration">
# <c>startx</c>
			</pre>
			
			<p>If you configured X properly, running <c>startx</c> should start an
			amazingly ugly X window manager (twm, to be specific).  If X comes up,
			you're good to go.  Hit <c>&lt;ctrl&gt;&lt;alt&gt;&lt;backspace&gt;</c>
			to kill the X server.
			</p>

			<p><c>xf86config</c> will only create a default set of configuration options. NVIDIA cards,
			USB mice and many other options have to be set manually. I will explore these options below, 
			but I encourage you to take a look at the <i>XF86Config</i> file. It is not too cryptic,
			and you might be able to tweak some interesting settings. A good place to start on tweaking
			information would be <uri link = "http://www.tldp.org/HOWTO/mini/FDU/">here</uri>.
			</p>

			</body>
		</section>

			<section>
				<title>Configuring a PS/2 Mouse</title>

				<body>
				
				<p>If you have a wheel mouse you'll want to edit the XF86Config file
				by hand:
				</p>
				
				<pre caption = "Editing XF86Config">
# <i>cp /etc/X11/XF86Config /etc/X11/XF86Config.working</i>
# <i>vim /etc/X11/XF86Config</i>
				</pre>
				
				<pre caption="Pointer section of XF86Config">
Section "InputDevice"

#Identifier and driver

Identifier	"Mouse1"
Driver	"mouse"
<i>Option "Protocol"    "IMPS/2" </i>
Option "Device"      "/dev/psaux"
<i>Option "ZAxisMapping"	"4 5"</i>
				
				</pre>
				
				<p>Because I have an intellimouse I changed the "Protocol" from 
				"PS/2" to "IMPS/2".  Getting the wheel to scroll just requires
				adding the 'Option "ZAxisMapping" "4 5"' line, where '4' and '5'
				correspond to mouse wheel up and mouse wheel down.
				</p>
				
				<note>Netscape 4.x won't scroll with the wheel by default; you'll need
				to create an .Xdefaults file first.  Go 
				<uri link="http://www-sop.inria.fr/koala/colas/mouse-wheel-scroll/">here</uri>
				for instructions.  Better yet, use <c>konqueror</c>, <c>opera</c>,
				<c>mozilla</c>, <c>galeon</c>, or some other real browser.</note>

				<p>Run <c>startx</c> again just to make sure X still comes up.
				</p>

			</body>
		</section>

		<section>
			<title>Configuring a USB Mouse</title>

			<body>
			
			<p>A USB mouse is your friend on a high resolution screen. The kernel takes care
			of the scaling so you don't have to move your mouse five times across the pad to make it
			across the screen. </p>

			<p>The first thing that has to be done is the installation of the kernel modules. The modules that
			will be needed for a USB mouse to work are <i>usbmouse</i>, <i>mousedev</i>, <i>hid</i>, 
			<i>usbcore</i>, <i>usb-uhci</i>, and <i>input</i>. After the necessary kernel
			configuration is done, <i>insmod</i> the modules. 
			</p>
			<note>Use either <i>usbmouse</i> <b>OR</b> <i>hid</i>. If you install both, mouse will stop working.</note>
			<note>When configuring the Input Core support for the mouse, make sure to enter the screen
			resolution that you will be using in X. This makes the scaling all pretty and correct. </note>

			<p>Now, unplug the mouse, and plug it back in, and check your kernel log for a message that
			looks something like this </p>

			<pre caption = "Kernel Message">
hub.c: USB new device connect on bus1/1, assigned device number 2
input0,hiddev0: USB HID v1.00 Mouse [Microsoft Microsoft IntelliMouse Optical] on usb1:2.0
			</pre>

			<p>Now that the mouse is detected, check <path>/dev/input</path> to make sure that your mouse
			is there and working. </p>

			<pre caption = "Checking for USB Mouse">
# <c>cd /dev/input</c>
# <c>cat mice</c>
<comment>Move your mouse when you <i>cat</i> the device, you should see a lot
of garbage. </comment>
			</pre>

			<p>Once the mouse is properly detected and installed, now we have to tell X to use the 
			USB mouse. All that is required here is a slight change to what device X uses
			for the mouse. 
			</p>

			<pre caption = "Editing XF86Config">
# <c>cp /etc/X11/XF86Config /etc/X11/XF86Config.working</c>
# <c>vim /etc/X11/XF86Config</c>
			</pre>

			<pre caption="Pointer section of XF86Config">
Section "InputDevice"

# Identifier and driver

Identifier	"Mouse1"
Driver	"mouse"
<i>Option "Protocol"    "IMPS/2" </i>
Option "Device"      "/dev/input/mice"
<i>Option "ZAxisMapping"	"4 5"</i>

			</pre>

			<p>Okay, restart X, and the mouse should be working! </p>
			<p>Don't forget to add the modules that your mouse uses to <i>modules.autoload</i>. </p>

			<pre caption = "Adding entries to modules.autoload">
# <c>echo $'/n'usbmouse $'/n'mousedev $'/n'hid #'/n'usbcore $'/n'input >> /etc/modules.autoload</c>
			</pre>

			</body>
		</section>

		<section>
			<title>Configuring your NVIDIA Card</title>
			
			<body>
			<p>If you happen to have an NVIDIA card, now would be a good time to
			install the NVIDIA accelerated drivers.</p>

			<note>If you recompile your kernel, you must also recompile <i>nvidia-kernel</i>. This has
			to be done beacause the new kernel build will delete your nvidia modules.
			</note>
			
			<pre caption="NVIDIA owners only">
# <c>emerge nvidia-glx</c>
# <c>emerge nvidia-kernel</c>
# <c>nano -w /etc/X11/XF86Config</c>
			</pre>
			
			<pre caption="Enabling GLX in /etc/X11/XF86Config">
Section "Module"

# This loads the GLX module
#    Load       "glx" <comment>(Uncomment this line)</comment>
			</pre>
			
			<pre caption="Tell X to use the NVIDIA driver in /etc/X11/XF86Config">
Section "Device"
	Identifier  "NVIDIA GeForce"
	#Driver      "nv"
	Driver      "nvidia"
	#VideoRam    32768
	# Insert Clocks lines here if appropriate
EndSection
			</pre>

			<p>Run <c>startx</c> one more time to make sure that X still comes up
			(this time with the NVIDIA splash screen, if you have installed the
			nvidia drivers).
			</p>

			</body>
		</section>
	</chapter>

	<chapter>	
		<title>Window Managers</title>

		<section>
			<title>Introduction</title>
			<body>

			<p>Generally, the first thing to do after installing X is to install a nice
			window manager. Of course, you can stick to tvm if you want a really ugly,
			I mean functional, window manager. 
			</p>

			<p>There are many window managers to choose from. Some of these include KDE,
			GNOME, Fluxbox, Blackbox, the other *box 'es, Windowmaker, Sawfish, etc.
			As you can see, there is a nice selection of windowmanagers availible in
			Gentoo Linux.
			</p>
		
			</body>
		</section>
	
		<section>
			<title>KDE</title>
			<body>

			<p>I am assuming that you are going to install KDE if you are reading this section.
			KDE is fully supported in Gentoo Linux, but there are a couple of things that you want
			to make sure of before you emerge KDE: 
			</p>
			
			<li>Make sure that "qt" and "kde" are in your USE variables in <i>make.conf</i>. </li>
			<li>Make sure that (optional) "-gnome" and "-gtk" are in your USE variables in <i>make.conf</i>. </li>
			
			<p>Both of the above steps can be done by editing <path>/etc/make.conf</path> like so: 
			</p>

			<pre caption = "Editing make.conf">
# <c>vim /etc/make.conf </c>
<comment>Inside of <i>make.conf</i></comment>

USE="qt kde -gnome -gtk"
				
			</pre>

			<p>To find out more about USE variables, please reference the
			<uri link="http://www.gentoo.org/doc/en/use-howto.xml">USE HOWTO</uri>.
			</p>
			
			<p>It's always useful to use the <c>--pretend</c> flag before doing
			an <c>emerge</c> to see what dependencies are going to be installed, and in our
			case it's quite a lot.
			</p>

			<pre caption = "Looking at KDE Packages/Deps">
# <c>emerge --pretend kde</c>
# <c>emerge kde</c>
			</pre>

			<note>
			Be careful when using <i>emerge kde-base</i>. This will only install the base KDE packages
			and none of KDE's helper applications.
			</note>

			<note>
			If you plan to use CUPS for printing then you probably want "cups"
			in your USE variables in <path>/etc/make.conf</path> before emerging
			KDE. This can also be done from the command line by doing a
			<i>USE="cups" emerge kde </i>. 
			Please reference the Gentoo Print Guide for a complete CUPS install
			explanation.
			</note>

			<p>Have a nice nap!</p>

			<note>If you have a Gentoo Linux binary CD, then you can install
			the packages directly off of the CD.
			</note>
			
			<pre caption="Installing binary packages from the CD">
# <c>export PKGDIR=/mnt/cdrom/gentoo/packages</c>
<comment>Normally Portage expects packages to be in /usr/portage/packages
</comment>
# <c>emerge --usepkg /mnt/cdrom/gentoo/packages/All/kdebase-x.y.z.tbz2</c>
<comment>The <c>--usepkg</c> flag makes sure that binary packages are used
for the dependencies (if available).</comment>
			</pre>

			</body>
		</section>

		<section>
			<title>Configuring KDM</title>
			<body>
			
			<p>After KDE is installed, it maybe preferable to use a nice login manager,
			specifically the KDE login manager, or KDM. KDM comes with the KDE packages,
			so to run it all you have to do is:
			</p>
			
			<pre caption = "Running KDM">
# <c>kdm</c>
			</pre>
			
			<p>You should be able to log in and see KDE in full working order.
			Of course sound shouldn't be working yet, so you'll miss the annoying
			KDE start-up sound, but we'll fix that in a moment.  Open a 
			konsole, type <c>ls /usr/bin</c> (or anything else that more than fills 
			the konsole window), and see if the mouse wheel lets
			you scroll up and down in the konsole window.  It really should
			work!
			</p>
			
			<note>If running <c>kdm</c> returns "command not found", then you just
			need to update the $PATH in that terminal via <c>source
			<path>/etc/profile</path></c>.</note>

			<p>All that's left is to make sure that X comes up when Gentoo boots.
			Edit <path>/etc/rc.conf</path> so that 
			<e>DISPLAYMANAGER="kdm"</e>.  
			</p>
			
			<pre caption = "Editing /etc/rc.conf">
# <c>vim /etc/rc.conf</c>
			</pre>
			
			<pre caption="/etc/rc.conf -- setting DISPLAYMANAGER">
# What display manager do you use ?  [ xdm | gdm | kdm ]
DISPLAYMANAGER=kdm
			</pre>
			
			<p>	Now we just need to make sure that the <e>xdm</e> start-up script is read when booting.
			</p>
			
			<pre caption = "Adding XDM script to default runlevel">
# <c>rc-update add xdm default</c>
			</pre>
			
			<p>Reboot, and see if X/KDE comes up!
			</p>
			
			<impo>The <c>rc-update</c> command is Gentoo Linux's improved version of
			the venerable <c>chkconfig</c> command for managing init scripts.  Type
			<c>rc-update</c> by itself for a list of options.
			</impo>
		
			</body>
		</section>
	</chapter>

	<chapter>
		<title>GNOME</title>

		<section>
			<title>Installation</title>
			<body>

			<p>Before you start installing GNOME packages, you might want to edit your
			USE variables. Doing this will enable GNOME support in supported applications that
			you compile.
			</p>
			
			<li>Make sure that "gtk" and "gnome" are in your USE variables in <i>make.conf</i>. </li>
			<li>Make sure that (optional) "-kde" and "-qt" are in your USE variables in <i>make.conf</i>. </li>
			
			<p>Both of the above steps can be done by editing <path>/etc/make.conf</path> like so: 
			</p>

			<pre caption = "Editing make.conf">
# <c>vim /etc/make.conf </c>
<comment>Inside of <i>make.conf</i></comment>

USE="gnome gtk -kde -qt"
				
			</pre>

			<p>To find out more about USE variables, please reference the
			<uri link="http://www.gentoo.org/doc/en/use-howto.xml">USE HOWTO</uri>.
			</p>

			<p>Now, install the necessary GNOME packages.
			</p>

			<pre caption = "Installing the GNOME Packages">
# <c>emerge --pretend gnome</c>
# <c>emerge gnome</c>
			</pre>

			<p>This will take a good while to do, so kick back and watch a movie.
			Author recommends Pulp Fiction.
			</p>

			<p>GNOME configuration is basically the same as KDE from this point forward.
			There are not really any GNOME specific configuration files, but there is
			GDM, the GNOME login manager, to setup.
			</p>

			</body>
		</section>

		<section>
			<title>Configuring GDM</title>
			<body>

			<p>After GNOME is installed, it maybe preferable to use a nice login manager,
			specifically the GNOME login manager, or GDM. GDM comes with the GDE packages,
			so to run it all you have to do is:
			</p>
			
			<pre caption = "Running GDM">
# <c>gdm</c>
			</pre>
			
			<p>You should be able to log in and see GDM in full working order.
			Of course sound shouldn't be working yet, so you'll miss the annoying
			GNOME start-up sound, but we'll fix that in a moment.  Open a 
			console, type <c>ls /usr/bin</c> (or anything else that more than fills 
			the console window), and see if the mouse wheel lets
			you scroll up and down in the console window.  It really should
			work!
			</p>
			
			<note>If running <c>gdm</c> returns "command not found", then you just
			need to update the $PATH in that terminal via <c>source
			<path>/etc/profile</path></c>.</note>

			<p>All that's left is to make sure that X comes up when Gentoo boots.
			Edit <path>/etc/rc.conf</path> so that 
			<e>DISPLAYMANAGER="gdm"</e>.  
			</p>
			
			<pre caption = "Editing /etc/rc.conf">
# <c>vim /etc/rc.conf</c>
			</pre>
			
			<pre caption="/etc/rc.conf -- setting DISPLAYMANAGER">
# What display manager do you use ?  [ xdm | gdm | kdm ]
DISPLAYMANAGER=gdm
			</pre>
			
			<p>	Now we just need to make sure that the <e>xdm</e> start-up script is read when booting.
			</p>
			
			<pre caption = "Adding XDM script to default runlevel">
# <c>rc-update add xdm default</c>
			</pre>
			
			<p>Reboot, and see if X/GNOME comes up!
			</p>
			
			<impo>The <c>rc-update</c> command is Gentoo Linux's improved version of
			the venerable <c>chkconfig</c> command for managing init scripts.  Type
			<c>rc-update</c> by itself for a list of options.
			</impo>
		
			</body>
		</section>
	</chapter>

	<chapter>
		<title>Sound Configuration</title>
			<section>
				<title>Alsa</title>
				<body>

				<p>To install ALSA, please refer to the Gentoo Linux ALSA setup guide
				<uri link = "http://www.gentoo.org/doc/alsa-guide.html">here</uri>
				</p>

				</body>
			</section>

			<section>
				<title>KDE and sound</title>
				<body>
				
				<p>
				KDE has some nice sound utilities, including the KDE sound mixer 
				<c>kmix</c>.  
				</p>

				<note>If kmix cannot find a mixer, then it probably thinks you don't
				have sound support.  Log out and remove <path>~/.kde/share/config/kmixrc</path>
				and <path>~/.kde/share/config/kmix:*</path>
				then log in again.  This time it should find 
				the sound mixer properly.
				</note>
				
				</body>
			</section>

			<section>
				<title>GNOME and sound</title>
				<body>

				<p>Coming in next revision.
				</p>

				</body>
			</section>
	</chapter>

	<chapter>
		<title>Mail</title>
			<section>
				<title>Postfix -- Install and Configure</title>
				<body>
				
				<p>
				I happen to like the <c>postfix</c> mail system because it emulates
				<c>sendmail</c> without the considerable nightmare of having to 
				configure <c>sendmail</c>.  While we're at it we'll also install 
				<c>mutt</c>, a mail reader, so that we can test out our 
				<c>postfix</c> configuration.
				</p>

				<pre caption = "Emerging postfix and mutt">
# <c>emerge postfix mutt</c>
				</pre>

				<p>If you only intend to use your mail server for sending mail,
				then postfix is already set up for you.  Otherwise, you'll 
				want to edit <path>/etc/postfix/main.cf</path>.  The 
				<path>main.cf</path> file is reasonably well documented, and
				the defaults are reasonable for a standalone machine.  If
				your workstation is directly on the internet (i.e., having
				its own non-private IP address and DNS name) then the only
				change you will probably have to make is enabling postfix to receive
				mail.
				</p>

				<pre caption="Turning on mail reception in main.cf">
# RECEIVING MAIL

# The inet_interfaces parameter specifies the network interface
# addresses that this mail system receives mail on.  By default,
# the software claims all active interfaces on the machine. The
# parameter also controls delivery of mail to user@[ip.address].
#
#inet_interfaces = all
#inet_interfaces = $myhostname
#inet_interfaces = $myhostname, localhost
<i>inet_interfaces = $myhostname, localhost</i>
<i>mydestination = $myhostname, localhost.$mydomain</i>
				</pre>


				</body>
			</section>

			<section>
				<title>Postfix Testing (with Mutt)</title>
				<body>
				
				<p>Let's see if it works.
				</p>

				<pre caption = "Testing Postfix">
# <c>postfix check</c>
# <c>newaliases</c>
# <c>postfix start</c>
postfix-script: starting the Postfix mail system
# <c>mutt -x root</c>
/root/.maildir does not exist. Create it? ([y]/n): <comment>[answer y]</comment>
To:  &lt;root&gt;
Subject: test
(End message with a . on a line by itself)
test
.

# <c>mutt</c>
<comment>[You should see your message]</comment>
				</pre>
			
				<p>By using <c>postfix check</c> we make sure that <path>main.cf</path>
				parses properly and a number of important directories are created.
				Running <c>newaliases</c> sets up the system mail aliases, and 
				<c>postfix start</c> then starts the mailer.  I then used
				<c>mutt</c> (in <c>mailx</c>, or old-fashioned <c>mail</c>, mode)
				to send a message to myself on the local machine.  Along the way
				<c>mutt</c> creates the user's (root's, in this case) mail spool
				directory, <path>~/.maildir</path>.  Running <c>mutt</c> in
				full interactive mode then showed me my message, so at least local
				sending and delivery is working.  I then sent mail to one of my
				non-local email addresses (not shown) and verified that the mail
				did, indeed, get there.
				</p>
				
				<warn>If you send mail to an account using the default 
				<path>main.cf</path> from a machine on a private network, then
				it is possible you will never see it.  Many mail servers automatically
				reject mail coming from a source that can't be reached by reverse-DNS.
				</warn>

				<p>Assuming everything is working, then it's time to set up postfix
				so that it starts at boot time.
				</p>

				<pre caption = "Configuring Postfix to start at boot">
# <c>postfix stop</c>
postfix-script: starting the Postfix mail system
# <c>rc-update add postfix default</c>
 * postfix added to runlevel default...
 * Caching service dependencies...          [ ok ] 
 * rc-update complete.
# <c>/etc/init.d/postfix start</c>
Starting postfix......     [  ok  ]
				</pre>
				
				<impo>Veteran <c>sendmail</c> or <c>postfix</c> junkies may
				be more used to storing mail in 
				<path>/var/spool/mail</path> instead of in the user directories,
				and that mail is then stored in <e>mbox</e> format instead of
				in <e>maildir</e> format.  It is not all that hard to reconfigure
				<c>postfix</c> and <c>mutt</c> to use the standard unix mailbox
				system (<e>mbox</e>) format instead.  Edit <path>/etc/postfix/main.cf</path>
				to comment out <i>home_mailbox</i> and uncomment
				<i>mail_spool_directory = /var/spool/mail</i>.
				Make the mail spool directory with 
				<c>mkdir -p /var/spool/mail</c> and restart <c>postfix</c>.
				That will take care of the mailer, for <c>mutt</c> you just
				have to edit <path>/etc/mutt/Muttrc</path> to use <e>mbox</e>
				with <i>set mbox_type = mbox</i> 
				and the <path>/var/spool/mail</path> directory
				with <i>set spoolfile=/var/spool/mail</i>.
				</impo>
				
				<p>If you would prefer a GUI mail client, we install a web-based mail server,
				Squirrelmail, later in this guide.  Alternatively, Daniel Robbins highly
				recommends a combination of IMAP (which we install below as a prerequisite to
				Squirrelmail) and KDE's <c>kmail</c> client.  The kmail program is part of 
				<path>kde-base/kdenetwork</path>.
				</p>
	
				<p>Below we will also install Ximian's <e>Evolution</e> as our Personal Information Management
				software of choice, complete with Palm pilot support.  It, too, can serve as an
				excellent mail client.
				</p>
			
			</body>
		</section>
	</chapter>

	<chapter>
		<title>Samba</title>
			
			<section>
				<title>Installing/Configuring Samba</title>
				<body>
			
				<p>Samba is a remarkable package that lets your linux box share files
				and printers with MS Windows machines.  For more detailed information read
				the Samba articles by Daniel Robbins at	<uri>http://www.ibm.com/developerworks</uri>.
				</p>

				<pre caption = "Installing Samba">
# <c>emerge samba</c>
# <c>rc-update add samba default</c>
# <c>cd /etc/samba</c>
# <c>cp smb.conf.example smb.conf</c>
					# <c>nano -w smb.conf</c>
				</pre>
				
				<pre caption="smb.conf -- workgroup">
# workgroup = NT-Domain-Name or Workgroup-Name, eg: REDHAT4
workgroup = MYGROUP <comment>[change to match your workgroup]</comment>
				</pre>
				
				<pre caption="smb.conf -- printing with cups">
# It should not be necessary to specify the print system type unless
# it is non-standard. Currently supported print systems include:
# bsd, sysv, plp, lprng, aix, hpux, qnx
;   printing = bsd
printing = cups
				</pre>
				
				<pre caption="smb.conf -- encryption">
# You may wish to use password encryption. Please read
# ENCRYPTION.txt, Win95.txt and WinNT.txt in the Samba documentation.
# Do not enable this option unless you have read those documents
encrypt passwords = yes
				</pre>
				
				<p>I have fairly minimal Samba needs.  I just want to be able to share
				files between my linux and windows machines, and I want to use my
				linux box as a print server (using <c>cups</c>).  After installing,
				it suffices to make a few minor edits to the <path>/etc/samba/smb.conf</path>
				file.  Specifically, the <e>workgroup</e> variable needs to match the
				workgroup for the windows network (I usually use "OLYMPUS", but "WORKGROUP"
				is the default on windows if I remember correctly), <e>printing</e> needs to be <e>cups</e>
				instead of <e>bsd</e>, and the <e>encrypt passwords = yes</e> line needs
				to be uncommented.  Windows machines use encrypted passwords by default,
				so that last change is essential unless you want to hack the Windows 
				registry on all of your windows machines <comment>[not recommended]</comment>.
				Unfortunately, Windows uses a different encryption method for passwords than
				does Linux, so you have to maintain a separate password file for samba.
				</p>

				<pre caption = "Adding users in Samba">
# <i>smbpasswd -a grant</i> <comment>[Replace "grant" with your user name]</comment>
New SMB password:
Retype new SMB password:
Added user grant.
				</pre>

				<note>
				Before adding a user to samba's password list that user must first be
				listed in <path>/etc/passwd</path>.
				</note>

				<p>For each user that you want to be able to use samba from a windows machine
				you need to run the <c>smbpasswd</c> command.  Samba stores passwords in
				<path>/etc/samba/private/smbpasswd</path>, which will be created for you 
				the first time you run the <c>smbpasswd</c> command.
				</p>
				
				<pre caption = "Starting Samba">
# <c>/etc/init.d/samba start</c>
Starting samba...        [  ok  ]
				</pre>

				<p>Start samba, and you should be able to connect to your Gentoo Linux
				box from any of your windows machines and see the home directory for
				whatever user you connect as and also whatever printers you have set up.
				If you can't connect, take a look at 
				<path>/usr/share/doc/samba-2.2.5-r1/full_docs/textdocs/DIAGNOSIS.txt.gz</path>
				for additional help.
				</p>
				
				</body>
			</section>
		</chapter>

		<chapter>
			<title>Apache and Squirrelmail Webmail</title>
			<section>
				<title>Apache with SSL and PHP</title>
				
				<body>
				
				<p>Assuming that you have a static IP address (or you use a service 
				such as dyndns with your dynamic IP address), then you might want an
				effective way to check your e-mail when you're out of town.  The
				solution that I have chosen is to set up a webmail server,
				Squirrelmail, that I can access remotely using any web browser.
				</p>
				
				<p>The first step is to install a web server.  Most of the
				rest of the world uses Apache; we will too.  We will also
				install PHP (PHP4, actually) at the same time, since Squirrelmail
				is a PHP program.  The version numbers shown in the code listing
				below might be different by the time you read this.  Please
				adjust them accordingly.  Don't just copy and paste the commands
				into your terminal!
				</p>

				<pre caption = "Installing and configuring Apache">
# <c>emerge apache php mod_php mod_ssl</c>
# <c>ebuild /var/db/pkg/dev-php/mod_php-4.2.2-r1/mod_php-4.2.2-r1.ebuild config</c>
# <c>ebuild /var/db/pkg/net-www/mod_ssl-2.8.10/mod_ssl-2.8.10.ebuild config</c>
				</pre>
				
				<impo>You want to make sure that you install mod_ssl if you want
				Apache to have SSL support.  If  you want to check your e-mail
				remotely without sending your password across the internet unencrypted,
				then you <e>do</e> want SSL!.</impo>
				
				<p>You should take a good look at <path>/etc/apache/conf/apache.conf</path>,
				since Apache is very customizable.  By default the Apache document root
				(where it first looks for html files when you connect to
				http://www.servername.foo or http://localhost) is <path>/home/httpd/htdocs</path>;
				feel free to relocate it if you wish.
				</p>
				
				<pre caption="/etc/apache/conf/apache.conf">
# Do NOT add a slash at the end of the directory path.
#
DocumentRoot "/home/httpd/htdocs" <comment>(edit this line if desired)</comment>
				</pre>
				
				<pre caption = "Making Apache start at boot">
# <c>rc-update add apache default</c>
 * apache added to runlevel default...
 * Caching service dependencies...               [ ok ]
 * rc-update complete.
# <c>nano -w /etc/conf.d/apache</c>
				</pre>
				
			<p>Use <c>rc-update</c> to add Apache to the default runlevel,  and then
			edit <path>/etc/conf.d/apache</path> to add the following lines so that Apache
			automatically loads the SSL and PHP modules at start-up.
			</p>
			
			<pre caption="/etc/conf.d/apache">
APACHE_OPTS="-D SSL -D PHP4"
			</pre>

			<pre caption = "Restarting Apache">
# <c>/etc/init.d/apache start</c>
 * Starting Apache...                            [ OK ]
# <c>lynx localhost</c>
			</pre>
			
			<p>You can check to make sure your Apache web server is working
			by using any browser to connect to localhost.  To make sure that SSL support
			is functional, use a browser to connect to <uri>http<comment>s</comment>://localhost</uri>.
			The <c>https</c> prefix tells the browser to make a <e>secure</e> connection
			to the server using SSL.  Graphical browsers will have a padlock icon somewhere
			indicating the secure connection.
			</p>
			
			<note>When making a secure connection to your server, you will most likely receive
			a warning that the site's security certificate is not recognized.  The mod_ssl ebuild
			installs a self-signed security certificate, which is intended to be used for
			testing purposes only.  See the <c>mod_ssl</c> manual: 
			<path>/usr/share/doc/mod_ssl-2.8.10</path>.  For personal use a self-signed
			certificate is just fine.</note>
			
			<p>Now we need to make sure that PHP is working correctly.  The first step
			is to create a simple PHP file and put it in the Apache DocumentRoot directory.
			</p>

			<pre caption = "Testing PHP">
# <c>echo "&lt;? phpinfo(); ?&gt;" > /home/httpd/htdocs/test.php</c>
# <c>lynx http://localhost/test.php</c>
			</pre>

			<pre caption="working Apache + PHP">
             	                                              phpinfo() (p1 of 26)
               	                  PHP Logo
 	
   	                         PHP Version 4.0.6
 
     System Linux my.server.edu 2.4.10 #1 Tue Oct 9 16:33:50 Local
 	        time zone must be set--see zic manuali686 i686 unknown
   	                       Build Date Oct 16 2001
			</pre>
			
			<p>If you see something like the above, then Apache is successfully
			processing PHP code.
			</p>
		
			<warn>If you look at the full output of the above, you'll find out that
			the <path>test.php</path> script gives out a <e>lot</e> of information 
			about your system.  You should probably get rid of it once you know that
			php is working.  (Or you can do what I do, and just <c>mv test.php test.phps</c>.
			Apache will display <path>test.phps</path> as a PHP source file instead
			of executing the script.)
			</warn>

			</body>
		</section>
	
		<section>
			<title>Courier IMAP</title>
			<body>
			
			<p>Squirrelmail is a PHP application, but it relies on an IMAP server
			as the glue between the web server and e-mail.  Since Gentoo linux
			uses Maildir mail folders by default, Courier IMAP is a good choice.</p>
			
			<pre caption = "Emerging/testing Courier-imap">
# <c>emerge courier-imap</c>
# <c>rc-update add courier-imapd default</c>
 * courier-imapd added to runlevel default...
 * Caching service dependencies...                        [ ok ]
 * rc-update complete.
# <c>nano -w /etc/courier-imap/authdaemonrc</c>
# <c>/etc/init.d/courier-imapd start</c>
# <c>telnet localhost 143</c>
Trying 127.0.0.1...
Connected to localhost.localdomain.
Escape character is '^]'.
* OK Courier-IMAP ready. Copyright 1998-2001 Double Precision, Inc.  
See COPYING for distribution information.
1 LOGIN grant passwd <comment>(&lt;-- replace "grant" w/ your username 
and "passwd" w/ your password)</comment>
1 OK LOGIN OK
<comment>(Hit &lt;ctrl&gt;-"]" and type "quit" to exit)</comment>
			</pre>
			
			<pre caption="Correct authorization in /etc/courier-imap/authdaemonrc">
##NAME: authmodulelist:0
#
# The authentication modules that are linked into authdaemond.  The
# default list is installed.  You may selectively disable modules simply
# by removing them from the following list.  The available modules you
# can use are: authcustom authcram authuserdb authpam

#authmodulelist="authcustom authcram authuserdb authpam"
authmodulelist="authpam"
			</pre>
			
			<impo>Courier IMAP usually hardwires the name of the user's Maildir-type
			inbox directory that is used in its rc start-up script,
			<path>/usr/lib/courier-imap/imapd.rc</path>, to be <path>$HOME/Maildir</path>.  
			Gentoo linux, however, uses $HOME/.maildir instead, so the courier-imap ebuild
			modifies the <path>imapd.rc</path> script to use <e>$MAILDIR</e>, which it obtains
			from the Gentoo init script <path>/etc/init.d/courier-imap</path>.  If you choose
			to use a home user's mailbox other than <path>.maildir</path>, you'll need to modify
			the <e>MAILDIR=.maildir</e> entry in courier-imap's init script.</impo>
			
			<p>If you want Courier IMAP to have SSL support you just need to make
			the IMAP SSL certificate (and tell courier-imap where to find it),
			</p>
			
			<pre caption = "Making SSL Certs for IMAP">
# <i>/usr/sbin/mkimapdcert</i> 
			</pre>
			
			<p>and then start up imap-ssl.
			</p>

			<pre caption = "Adding Courier IMAP to default">
# <c>rc-update add courier-imapd-ssl default</c>
# <c>/etc/init.d/courier-imapd-ssl start</c>
			</pre>
			
			<p>You can verify that imap is working by using any
			IMAP-enabled mail client, such as netscape, kmail,
			or mutt.
			</p>

			<pre caption = "Checking your IMAP Server">
# <c>mutt -f imap://localhost</c>
			</pre>

			<pre caption = "Checking your SSL IMAP Server">
# <c>mutt -f imaps://localhost</c>
			</pre>
		</body>
	</section>

	<section>
		<title>Squirrelmail</title>
		<body>
		
		<p>Fortunately, installing and configuring
		Squirrelmail, once all of the components are in
		place, is straightforward.
		</p>

		<pre caption = "Emerging Squirrelmail">
# <c>emerge squirrelmail</c>
# <c>cd /home/httpd/htdocs</c>
# <c>cd squirrelmail</c>
# <c>./configure</c>
		</pre>
		
		<note>If your Apache DocumentRoot is not <path>/home/httpd/htdocs</path>,
		you will want to edit the <path>net-mail/squirrelmail</path> ebuild
		to point there.</note>

		<p>For squirrelmail to work correctly, you need to make sure that
		all of the files are owned by the user that Apache runs
		as (the squirrelmail ebuild assumes that user is "apache").
		Use <c>./configure</c> to select option <e>2</e>.</p>

		<pre caption="Squirrelmail configuration -- Server settings">
SquirrelMail Configuration : Read: config.php
---------------------------------------------------------
Server Settings
1.  Domain               : my.server.edu
2.  IMAP Server          : localhost
3.  IMAP Port            : 143
4.  Use Sendmail/SMTP    : SMTP
6.    SMTP Server        : localhost
7.    SMTP Port          : 25
8.    Authenticated SMTP : false
9.  Server               : courier
10. Invert Time          : false
11. Delimiter            : detect

R   Return to Main Menu
C.  Turn color off
S   Save data
Q   Quit
 
Command >>
		</pre>

		<p>Make sure that <e>Server</e> is set to <e>courier</e>.
		Return to the main menu and select option <e>4</e>, General
		Options.
		</p>

		<pre caption="Squirrelmail configuration -- General options">
SquirrelMail Configuration : Read: config.php
---------------------------------------------------------
General Options
1.  Default Charset        : iso-8859-1
2.  Data Directory         : ../data/
3.  Attachment Directory   : /tmp/
4.  Default Left Size      : 150
5.  Usernames in Lowercase : false
 
R   Return to Main Menu
C.  Turn color off
S   Save data
Q   Quit
 
Command >>
		</pre>
		
		<p>I use the data directory in the package, although it would be
		better security to use one outside the Apache document tree.  I
		also use <path>/tmp</path> as my directory to store attachments.
		</p>

		<p>Now we just need to restart Apache, and we will be ready to go! </p>
		
		<pre caption = "Restarting Apache">
# <c>/etc/init.d/apache restart</c>
		</pre>

		<p>Now you can browse to <uri>https://localhost/squirrelmail/src/login.php</uri>, and it should work!</p>

		<pre caption = "Testing Squirrelmail">
# <c>lynx https://localhost/squirrelmail/</c>
		</pre>

		<pre caption="Squirrelmail login page">
                                           SquirrelMail - Login
   	                           [sm_logo.jpg]

       	              SquirrelMail version 1.2.0 [rc2]
           	        By the SquirrelMail Development Team
 
               	             SquirrelMail Login
 
       Name: ____________________
 Password: ____________________
 
   	                               Login
		</pre>

		<p>(I don't really suggest using lynx with Squirrelmail, but you could!)</p>
		
		</body>
	</section>
</chapter>

	<chapter>
		<title>Personal Information Management</title>
		
		<section>
			<title>Evolution with Palm support</title>
			<body>

			<p>Evolution is an exceptionally nice Personal Information Management
			tool that syncs with a Palm pilot quite well.  The first step is
			to emerge evolution.  If you do intend to use evolution with a
			Palm pilot, make sure "pda" is in your USE variables in 
			<path>/etc/make.conf</path> before emerging evolution.
			</p>

			<pre caption = "Emerging Evolution">
# <c>emerge --pretend evolution</c>
# <c>emerge evolution</c> 
			</pre>

			<p>Unfortunately, the evolution build takes slightly longer than forever
			(notice that <c>mozilla</c> is a dependency!); have several gallons of
			coffee/tea while you wait.
			</p>

			<p>While building <c>evolution</c> the necessary Palm pilot tools should have been
			built as well.  To make sure that regular users can sync a pilot we need to make
			a couple of changes to the serial port permissions.  I'll assume your Palm cradle
			plugs into the first serial port (/dev/ttyS0, or /dev/tts/0 in "devfs" notation).
			</p>

			<pre caption = "Adding serial device">
# <c>groupadd serial</c>
# <c>chown root.serial /dev/tts/0</c>
# <c>chmod g+rw /dev/tts/0</c>
# <c>ls -l /dev/tts/0</c>
crw-rw----    1 root     serial     4,  64 Dec 31  1969 /dev/tts/0
# <c>ln -s /dev/tts/0 /dev/pilot</c>
# <c>nano -w /etc/group</c> <comment>(add appropriate users to the serial group)</comment>
			</pre>

			<p>We've added a "serial" group to the system, and you should add any users who need
			to use the serial port (any Palm pilot users) to the serial group.  We've given
			the serial group "rw" permissions on <path>/dev/tts/0</path>, and for future 
			reference we have made a <path>/dev/pilot</path> symbolic link to
			<path>/dev/tts/0</path>.  Thanks to recent changes in how devfs is handled on
			Gentoo these changes will persist after rebooting.
			</p>

			<note>
			Users of pre-rc6-r13 can either upgrade <path>sys-apps/baselayout</path>
			and <path>sys-apps/devfsd</path> (and merge in any "._cfg*" files in 
			<path>/etc</path> that result), or simply add the appropriate permissions
			and symlink in <path>/etc/devfsd.conf</path>.
			</note>

			<p>Users will want to use the <path>tools/Pilot settings</path> menu option in evolution
			to set up the Gnome pilot software.  Don't forget to set up the "Pilot Conduits" as
			well as the "Pilot Link" in the Gnome Control Center.
			</p>

			</body>
		</section>
	</chapter>
</guide>
