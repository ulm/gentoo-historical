<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/apache-upgrading.xml,v 1.10 2007/12/12 02:44:00 nightmorph Exp $ -->

<guide link="/doc/en/apache-upgrading.xml" lang="en">
<title>Upgrading Apache</title>

<author title="Author">
  <mail link="vericgar@gentoo.org">Michael Stewart</mail>
</author>
<author title="Editor">
  <mail link="hollow"/>
</author>
<author title="Editor">
  <mail link="nightmorph"/>
</author>

<abstract>
This document describes the procedure end-users should follow to safely 
upgrade their apache installation.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>2.7</version>
<date>2007-12-11</date>

<chapter id="upgrade-2.2.6-r4">
<title>Upgrading from &lt;2.2.6-r4</title>
<section>
<body>

<p>
The Apache ebuilds have used <path>/etc/apache2/apache2-builtin-mods</path> for
a very long time to select the built-in modules during compile time. However,
this behavior has several disadvantages:
</p>

<ul>
  <li>
    Selecting built-in modules during the initial merge is not possible
  </li>
  <li>
    Portage does not know which modules have been installed. This is especially
    annoying for binary packages.
  </li>
  <li>
    Portage will try to overwrite <path>apache2-builtin-mods</path> on every
    upgrade
  </li>
</ul>

<p>
To rectify this situation <path>/etc/apache2/apache2-builtin-mods</path> has
been deprecated and migrated to the new <c>APACHE2_MODULES</c> <c>USE_EXPAND</c>
variable. To convert your custom module selection to the new format use the
following command:
</p>

<pre caption="Convert apache2-builtin-mods to APACHE2_MODULES">
$ <i>echo APACHE2_MODULES=\"$(sed '/^mod_/s/mod_\(.*\)\s\+\(shared\|static\)/\1/;t n;d;:n' /etc/apache2/apache2-builtin-mods)\" >> /etc/make.conf</i>
# <i>rm /etc/apache2/apache2-builtin-mods</i>

<comment>(You can now safely upgrade apache:)</comment>
# <i>emerge -uva '>=www-servers/apache-2.2.6-r4'</i>
</pre>

<p>
Additionally to the new <c>APACHE2_MODULES</c> the local USE flags have been
cleaned up:
</p>

<ul>
  <li>
    All MPM USE flags have been moved to the <c>APACHE2_MPMS</c>
    <c>USE_EXPAND</c> variable
  </li>
  <li>
    <c>no-suexec</c> is now <c>suexec</c>
  </li>
  <li>
    <c>static-modules</c> is now <c>static</c>
  </li>
</ul>

<p>
For a detailed description of old and corresponding new USE flags see <uri
link="#use-2.2.6-r4">below</uri>.
</p>

</body>
</section>
</chapter>

<chapter id="upgrade-2.0.52-r3">
<title>Upgrading from &lt;2.0.52-r3</title>
<section>
<title>Introduction</title>
<body>

<p>
The state of Apache and its modules in Gentoo was becoming dismal. There were a
number of problems that caused support problems and made maintaining everything
the Apache herd is responsible for difficult:
</p>

<ul>
  <li>
    The configuration that came with Gentoo was dramatically different from 
    the upstream configuration that most users expect
  </li>
  <li>
    Many modules used similar code, but all did things their own way
  </li>
  <li>
    Most modules weren't maintained very well - mostly because of the large
    number of modules available
  </li>
  <li>Modules didn't have a configuration standard</li>
  <li>
    Some modules could support both versions of Apache, but the ebuilds 
    didn't handle that
  </li>
  <li>
    Choices available in Apache were not available for Gentoo users (for 
    example MPMs)
  </li>
  <li>Bugs for Apache were stacking up</li>
</ul>

<p>
This document details how to upgrade without breaking your system. If you are 
a developer or would like to know what we changed, or how ebuilds need to be 
modified to take advantage of our eclass, then check the <uri 
link="apache-developer.xml">Apache Developer Reference</uri>.
</p>

</body>
</section>
<section>
<title>Upgrading</title>
<body>

<p>
There have been many changes to how Apache works within Gentoo. Every package
that is directly related to Apache needs to be updated and some things that 
worked previously will no longer work.
</p>

<p>
First you need to figure out what packages you need to upgrade. You can do this
using the <c>equery</c> tool, which is part of the
<c>app-portage/gentoolkit</c> package.
</p>

<pre caption="Finding packages to update">
$ <i>equery depends www-servers/apache</i>
[ Searching for packages depending on www-servers/apache... ]
dev-db/phpmyadmin-2.5.6
dev-php/mod_php-4.3.10
dev-php/phpsysinfo-2.1-r2
net-www/mod_bandwidth-2.0.5
net-www/mod_layout-4.0.1a
net-www/mod_mp3-0.40
net-www/mod_random-2.0
net-www/mod_throttle-3.1.2-r1
www-apache/mod_ldap_userdir-1.1.4
www-apache/mod_loopback-1.04
www-apache/mod_watch-3.18
www-apps/viewcvs-0.9.2_p20030430
</pre>

<impo>
The packages you have installed may be vastly different; make sure you run this
command for yourself.
</impo>

<warn>
There are some modules and packages that depend on Apache that have not yet 
been updated. Please <uri link="http://bugs.gentoo.org">search bugzilla</uri> 
for any critical packages that you use with Apache.
</warn>

<p>
Many webapps aren't affected in any way as most use the <c>webapp</c> eclass 
which takes care of installing them correctly. You may want to check to see if 
there is a new revision.
</p>

<p>
As we have added some new USE flags, you may want to review them and add 
appropriate lines to <path>/etc/portage/package.use</path>. See <uri 
link="#use-2.2.6-r4">Apache supported USE flags</uri> for more details.
</p>

<pre caption="Checking USE flag settings and rebuild">
<comment>(Check the USE flags and needed updates)</comment>
# <i>emerge --pretend --verbose --update --newuse --deep apache subversion \
mod_php mod_bandwidth mod_layout mod_ldap_userdir mod_loopback mod_mp3 \ 
mod_random mod_throttle mod_watch</i>

<comment>(Update the packages)</comment>
# <i>emerge --verbose --update --newuse --deep apache subversion mod_php \
mod_bandwidth mod_layout mod_ldap_userdir mod_loopback mod_mp3 mod_random \
mod_throttle mod_watch</i>

<comment>(It may be easier to just update world instead of the above)</comment>
# <i>emerge --ask --verbose --update --newuse --deep world</i>
</pre>

<p>
Now you need to reconfigure Apache and its modules. Start by using 
<c>etc-update</c> or <c>dispatch-conf</c> to update the <path>/etc/init.d</path>
and <path>/etc/conf.d</path> files. You will notice that your apache
configuration files won't show up in the updates - this is because all the
configuration files have moved.
</p>

<p>
If you have made changes to the previous default <path>apache.conf</path>  and 
<path>commonapache.conf</path> you will need to migrate your changes  to 
<path>/etc/apache{|2}/httpd.conf</path>. Also configuration locations for 
modules and virtual hosts have changed -- they are now located in 
<path>/etc/apache2/modules.d</path> and <path>/etc/apache2/vhosts.d</path> 
respectively.
</p>

<p>
When you have finished migrating your changes to the new configuration file, 
you will need to delete the old configuration files (or move them to a safe 
place). The new <path>/etc/init.d/apache{|2}</path> checks for these files and 
doesn't let you start apache unless you have removed them, indicating that you 
have reconfigured apache using the new paths.
</p>

<note>
Many modules that used to be enabled by default are now disabled. If they are 
apache built-in modules, then uncomment the appropriate line in httpd.conf. 
If they are external modules, check the module's .conf for <c>IfDefine</c> and 
add the name to <path>/etc/conf.d/apache{|2}</path> to enable it.
</note>

<p>
Now you may restart apache.
</p>

<pre caption="Restarting apache">
# <i>/etc/init.d/apache stop</i>
# <i>/etc/init.d/apache start</i>
</pre>

<p>
If you run into any problems check the <uri 
link="/doc/en/apache-troubleshooting.xml">Apache Troubleshooting Guide</uri>
and if that doesn't solve the issue, please report it on <uri 
link="http://bugs.gentoo.org">Gentoo Bugzilla</uri>. Be sure to include the 
modules you have enabled and (if you are using Apache 2) what MPM USE flag you
compiled with (if any). You may also join <path>#gentoo-apache</path> on 
<path>irc.freenode.net</path> for support.
</p>

</body>
</section>
</chapter>

<chapter id="use-pre-2.2.6-r4">
<title>Supported USE flags in &lt;2.2.6-r4</title>
<section>
<body>


<p>
There are USE flags that are local to apache and its modules. Apache 
supports several other more generic USE flags such as <c>ssl</c>, but the 
effect they have on apache doesn't differ much from the effect is has elsewhere,
so it's not included in this list. Run a <c>emerge --verbose --pretend 
apache</c> to see the full listing of supported USE flags.
</p>

<table>
<tr>
  <th>USE flag</th>
  <th>Description</th>
</tr>
<tr>
  <ti>apache2</ti>
  <ti>
    Should always be set if using the Apache-2.0 line, should not be set if
    using the Apache-1.3 line. The eclass uses this to determine what version of
    apache to depend on.
  </ti>
</tr>
<tr>
  <ti>debug</ti>
  <ti>
    Enables a hook that allows external modules to plug in and do something
    after a child crashed. There are already two modules,
    <c>mod_whatkilledus</c> and <c>mod_backtrace</c> that make use of this
    hook.
  </ti>
</tr>
<tr>
  <ti>doc</ti>
  <ti>
    Install the Apache manual and configuration.
  </ti>
</tr>
<tr>
  <ti>ldap</ti>
  <ti>
    Install <c>mod_ldap</c> and <c>mod_auth_ldap</c>/<c>mod_authnz_ldap</c>.
  </ti>
</tr>
<tr>
  <ti>ssl</ti>
  <ti>
    Installs <c>mod_ssl</c>.
  </ti>
</tr>
<tr>
  <ti>mpm-itk</ti>
  <ti>Builds the <uri link="http://mpm-itk.sesse.net/">itk</uri> MPM</ti>
</tr>
<tr>
  <ti>mpm-leader</ti>
  <ti>
    Builds the <uri
    link="http://httpd.apache.org/docs/2.0/mod/leader.html">leader</uri> MPM
  </ti>
</tr>
<tr>
  <ti>mpm-peruser</ti>
  <ti>
    Builds the <uri link="http://www.telana.com/peruser.php">peruser</uri> MPM
  </ti>
</tr>
<tr>
  <ti>mpm-prefork</ti>
  <ti>
    Builds the <uri	
    link="http://httpd.apache.org/docs/2.0/mod/prefork.html">prefork</uri> 
    MPM</ti>
</tr>
<tr>
  <ti>mpm-threadpool</ti>
  <ti>
    Builds the <uri	
    link="http://httpd.apache.org/docs/2.0/mod/threadpool.html">threadpool</uri>
    MPM
  </ti>
</tr>
<tr>
  <ti>mpm-worker</ti>
  <ti>
    Builds the <uri
    link="http://httpd.apache.org/docs/2.0/mod/worker.html">worker</uri> MPM
  </ti>
</tr>
<tr>
  <ti>static-modules</ti>
  <ti>
    Statically links the modules into the apache binary, so that a 
    LoadModule isn't required for loading the base modules into 
    Apache.
  </ti>
</tr>
</table>

<note>
While there are many <c>mpm-*</c> USE flags, they are mutually exclusive. You
should enable one and only one of the <c>mpm-*</c> USE flags. (If you do not
enable one, <c>mpm-prefork</c> or <c>mpm-worker</c> will be used, depending on
if the threads USE flag is set.)
</note>

</body>
</section>
</chapter>

<chapter id="use-2.2.6-r4">
<title>Supported USE flags in 2.2.6-r4 and above</title>
<section>
<body>

<p>
With the advent of <c>APACHE2_MODULES</c> a general cleanup of USE flags was
necessary. The following table lists supported USE flags for
<c>apache-2.2.6-r4</c> and above as well as their equivalent in previous
versions.
</p>

<table>
<tr>
  <th>USE flag</th>
  <th>Old USE flag</th>
  <th>Description</th>
</tr>
<tr>
  <ti>debug</ti>
  <ti>debug</ti>
  <ti>
    Enables a hook that allows external modules to plug in and do something
    after a child crashed. There are already two modules,
    <c>mod_whatkilledus</c> and <c>mod_backtrace</c>, that make use of this
    hook.
  </ti>
</tr>
<tr>
  <ti>doc</ti>
  <ti>doc</ti>
  <ti>Install the Apache manual and configuration.</ti>
</tr>
<tr>
  <ti>ldap</ti>
  <ti>ldap</ti>
  <ti>Install <c>mod_ldap</c> and <c>mod_authnz_ldap</c></ti>
</tr>
<tr>
  <ti>ssl</ti>
  <ti>ssl</ti>
  <ti>Installs <c>mod_ssl</c></ti>
</tr>
<tr>
  <ti>static</ti>
  <ti>static-modules</ti>
  <ti>
    Statically links the modules into the apache binary, so that a LoadModule
    isn't required for loading the base modules into Apache
  </ti>
</tr>
<tr>
  <ti>suexec</ti>
  <ti>no-suexec</ti>
  <ti>Install <c>mod_suexec</c> and the <c>suexec</c> helper binary</ti>
</tr>
<tr>
  <ti>threads</ti>
  <ti>threads</ti>
  <ti>Selects the default MPM if none is set in APACHE2_MPMS</ti>
</tr>
</table>

<p>
The following table lists supported <c>APACHE2_MPMS</c> as of
<c>apache-2.2.6-r4</c> and their corresponding previous local USE flag.
</p>

<table>
<tr>
  <th>Flag</th>
  <th>Old USE flag</th>
  <th>Description</th>
</tr>
<tr>
  <ti>event</ti>
  <ti>mpm-event</ti>
  <ti>An experimental variant of the standard worker MPM</ti>
</tr>
<tr>
  <ti>itk</ti>
  <ti>mpm-itk</ti>
  <ti>Allows to run each virtual host under a separate uid and gid</ti>
</tr>
<tr>
  <ti>peruser</ti>
  <ti>mpm-peruser</ti>
  <ti>
    Peruser is a working implementation of the perchild MPM allowing to run each
    apache child process as its own user and group, each handling its own set of
    virtual hosts
  </ti>
</tr>
<tr>
  <ti>prefork</ti>
  <ti>mpm-prefork</ti>
  <ti>Implements a non-threaded, pre-forking web server</ti>
</tr>
<tr>
  <ti>worker</ti>
  <ti>mpm-worker</ti>
  <ti>
    Multi-Processing Module implementing a hybrid multi-threaded multi-process
    web server
  </ti>
</tr>
</table>

<p>
The following table lists supported <c>APACHE2_MODULES</c> as of
<c>apache-2.2.6-r4</c>.
</p>

<table>
<tr>
  <th>Flag</th>
  <th>Description</th>
</tr>
<tr>
  <ti>actions</ti>
  <ti>
    Provides for executing CGI scripts based on media type or request method
  </ti>
</tr>
<tr>
  <ti>alias</ti>
  <ti>
    Provides for mapping different parts of the host filesystem in the
    document tree and for URL redirection
  </ti>
</tr>
<tr>
  <ti>asis</ti>
  <ti>Sends files that contain their own HTTP headers</ti>
</tr>
<tr>
  <ti>auth_basic</ti>
  <ti>Basic authentication</ti>
</tr>
<tr>
  <ti>auth_digest</ti>
  <ti>User authentication using MD5 Digest Authentication</ti>
</tr>
<tr>
  <ti>authn_alias</ti>
  <ti>
    Provides the ability to create extended authentication providers based on
    actual providers
  </ti>
</tr>
<tr>
  <ti>authn_anon</ti>
  <ti>Allows "anonymous" user access to authenticated areas</ti>
</tr>
<tr>
  <ti>authn_dbd</ti>
  <ti>User authentication using an SQL database</ti>
</tr>
<tr>
  <ti>authn_dbm</ti>
  <ti>User authentication using DBM files</ti>
</tr>
<tr>
  <ti>authn_default</ti>
  <ti>Authentication fallback module</ti>
</tr>
<tr>
  <ti>authn_file</ti>
  <ti>User authentication using text files</ti>
</tr>
<tr>
  <ti>authz_dbm</ti>
  <ti>Group authorization using DBM files</ti>
</tr>
<tr>
  <ti>authz_default</ti>
  <ti>Authorization fallback module</ti>
</tr>
<tr>
  <ti>authz_groupfile</ti>
  <ti>Group authorization using plaintext files</ti>
</tr>
<tr>
  <ti>authz_host</ti>
  <ti>Group authorizations based on host (name or IP address)</ti>
</tr>
<tr>
  <ti>authz_owner</ti>
  <ti>Authorization based on file ownership</ti>
</tr>
<tr>
  <ti>authz_user</ti>
  <ti>User Authorization</ti>
</tr>
<tr>
  <ti>autoindex</ti>
  <ti>
    Generates directory indexes automatically, similar to the Unix <c>ls</c>
    command
  </ti>
</tr>
<tr>
  <ti>cache</ti>
  <ti>Content cache keyed to URIs</ti>
</tr>
<tr>
  <ti>cern_meta</ti>
  <ti>CERN httpd metafile semantics</ti>
</tr>
<tr>
  <ti>charset_lite</ti>
  <ti>Specify character set translation or recoding</ti>
</tr>
<tr>
  <ti>dav</ti>
  <ti>Distributed Authoring and Versioning (WebDAV) functionality</ti>
</tr>
<tr>
  <ti>dav_fs</ti>
  <ti>filesystem provider for mod_dav</ti>
</tr>
<tr>
  <ti>dav_lock</ti>
  <ti>generic locking module for mod_dav</ti>
</tr>
<tr>
  <ti>dbd</ti>
  <ti>Manages SQL database connections</ti>
</tr>
<tr>
  <ti>deflate</ti>
  <ti>Compress content before it is delivered to the client</ti>
</tr>
<tr>
  <ti>dir</ti>
  <ti>
    Provides for "trailing slash" redirects and serving directory index files
  </ti>
</tr>
<tr>
  <ti>disk_cache</ti>
  <ti>Content cache storage manager keyed to URIs</ti>
</tr>
<tr>
  <ti>dumpio</ti>
  <ti>Dumps all I/O to error log as desired</ti>
</tr>
<tr>
  <ti>env</ti>
  <ti>Modifies the environment which is passed to CGI scripts and SSI pages</ti>
</tr>
<tr>
  <ti>expires</ti>
  <ti>
    Generation of Expires and Cache-Control HTTP headers according to
    user-specified criteria
  </ti>
</tr>
<tr>
  <ti>ext_filter</ti>
  <ti>
    Pass the response body through an external program before delivery to the
    client
  </ti>
</tr>
<tr>
  <ti>file_cache</ti>
  <ti>Caches a static list of files in memory</ti>
</tr>
<tr>
  <ti>filter</ti>
  <ti>Context-sensitive smart filter configuration module</ti>
</tr>
<tr>
  <ti>headers</ti>
  <ti>Customization of HTTP request and response headers</ti>
</tr>
<tr>
  <ti>ident</ti>
  <ti>RFC 1413 ident lookups</ti>
</tr>
<tr>
  <ti>imagemap</ti>
  <ti>Server-side imagemap processing</ti>
</tr>
<tr>
  <ti>include</ti>
  <ti>Server-parsed html documents (Server Side Includes)</ti>
</tr>
<tr>
  <ti>info</ti>
  <ti>Provides a comprehensive overview of the server configuration</ti>
</tr>
<tr>
  <ti>log_config</ti>
  <ti>Logging of the requests made to the server</ti>
</tr>
<tr>
  <ti>log_forensic</ti>
  <ti>Forensic Logging of the requests made to the server</ti>
</tr>
<tr>
  <ti>logio</ti>
  <ti>Logging of input and output bytes per request</ti>
</tr>
<tr>
  <ti>mem_cache</ti>
  <ti>Content cache keyed to URIs</ti>
</tr>
<tr>
  <ti>mime</ti>
  <ti>
    Associates the requested filename's extensions with the file's behavior
    (handlers and filters) and content (mime-type, language, character set and
    encoding)
  </ti>
</tr>
<tr>
  <ti>mime_magic</ti>
  <ti>
    Determines the MIME type of a file by looking at a few bytes of its
    contents
  </ti>
</tr>
<tr>
  <ti>negotiation</ti>
  <ti>Provides for content negotiation</ti>
</tr>
<tr>
  <ti>proxy</ti>
  <ti>HTTP/1.1 proxy/gateway server</ti>
</tr>
<tr>
  <ti>proxy_ajp</ti>
  <ti>AJP support module for mod_proxy</ti>
</tr>
<tr>
  <ti>proxy_balancer</ti>
  <ti>mod_proxy extension for load balancing</ti>
</tr>
<tr>
  <ti>proxy_connect</ti>
  <ti>mod_proxy extension for CONNECT request handling</ti>
</tr>
<tr>
  <ti>proxy_ftp</ti>
  <ti>FTP support module for mod_proxy</ti>
</tr>
<tr>
  <ti>proxy_http</ti>
  <ti>HTTP support module for mod_proxy</ti>
</tr>
<tr>
  <ti>rewrite</ti>
  <ti>
    Provides a rule-based rewriting engine to rewrite requested URLs on the fly
  </ti>
</tr>
<tr>
  <ti>setenvif</ti>
  <ti>
    Allows the setting of environment variables based on characteristics of the
    request
  </ti>
</tr>
<tr>
  <ti>speling</ti>
  <ti>
    Attempts to correct mistaken URLs that users might have entered by
    ignoring capitalization and by allowing up to one misspelling
  </ti>
</tr>
<tr>
  <ti>status</ti>
  <ti>Provides information on server activity and performance</ti>
</tr>
<tr>
  <ti>unique_id</ti>
  <ti>
    Provides an environment variable with a unique identifier for each request
  </ti>
</tr>
<tr>
  <ti>userdir</ti>
  <ti>User-specific directories</ti>
</tr>
<tr>
  <ti>usertrack</ti>
  <ti>Clickstream logging of user activity on a site</ti>
</tr>
<tr>
  <ti>version</ti>
  <ti>Version dependent configuration</ti>
</tr>
<tr>
  <ti>vhost_alias</ti>
  <ti>Provides for dynamically configured mass virtual hosting</ti>
</tr>
</table>

</body>
</section>
</chapter>
</guide>
