<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/apache-upgrading.xml,v 1.3 2005/09/29 09:28:21 neysx Exp $ -->

<guide link="apache-upgrading.xml" lang="en">
<title>Upgrading Apache</title>

<author title="Author">
  <mail link="vericgar@gentoo.org">Michael Stewart</mail>
</author>

<abstract>
This document describes the procedure end-users should follow to safely 
upgrade their apache installation.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>2.3</version>
<date>2005-09-29</date>

<chapter>
<title>Introduction</title>
<section>
<body>

<p>
The state of Apache and it's modules in Gentoo was becoming dismal. There 
were a number of problems that caused support problems and made maintaining 
everything the Apache herd is responsible for difficult:
</p>

<ul>
  <li>
    The configuration that came with Gentoo was dramatically different from 
    the upstream configuration that most users expect
  </li>
  <li>
    Many modules used similar code, but all did things their own way
  </li>
  <li>
    Most modules weren't maintained very well - mostly because of the large
    number of modules available
  </li>
  <li>Modules didn't have a configuration standard</li>
  <li>
    Some modules could support both versions of Apache, but the ebuilds 
    didn't handle that
  </li>
  <li>
    Choices available in Apache were not available for Gentoo users (for 
    example MPMs)
  </li>
  <li>Bugs for Apache were stacking up</li>
</ul>

<p>
The solution? The Apache herd was expanded, adding several new members, who 
worked together to create an eclass, update all the modules and fix a number 
of bugs.
</p>

<p>
This document details how to upgrade without breaking your system. If you are 
a  developer or would like to know what we changed, or how ebuilds need to be 
modified to take advantage of our eclass, then check the <uri 
link="apache-developer.xml">Apache Developer Reference</uri>.
</p>

</body>
</section>
</chapter>

<chapter id="upgrade">
<title>Upgrade Instructions</title>
<section>
<body>

<p>
We have made many changes to how Apache works within Gentoo. Every package 
that is directly related to Apache needs to be updated and some things that 
worked previously will no longer work.
</p>

<p>
First you need to figure out what packages you need to upgrade. You can do 
this using the <c>equery</c> tool, part of the <c>app-portage/gentoolkit</c> 
package.
</p>

<pre caption="Finding packages to update">
$ <i>equery depends net-www/apache</i>
[ Searching for packages depending on net-www/apache... ]
dev-db/phpmyadmin-2.5.6
dev-php/mod_php-4.3.10
dev-php/phpsysinfo-2.1-r2
net-www/mod_bandwidth-2.0.5
net-www/mod_layout-4.0.1a
net-www/mod_ldap_userdir-1.1.4
net-www/mod_loopback-1.04
net-www/mod_mp3-0.40
net-www/mod_random-2.0
net-www/mod_throttle-3.1.2-r1
net-www/mod_watch-3.18
www-apps/viewcvs-0.9.2_p20030430
</pre>

<impo>
The packages you have installed may be vastly different, make sure you run this
command for yourself.
</impo>

<warn>
There are some modules and packages that depend on Apache that have not yet 
been updated. Please <uri link="http://bugs.gentoo.org">search bugzilla</uri> 
for any critical packages that you use with Apache.
</warn>

<p>
Many webapps aren't affected in any way as most use the <c>webapp</c> eclass 
which takes care of installing them correctly. You may want to check to see if 
there is a new revision.
</p>

<p>
As we have added some new USE-flags, you may want to review them and add 
appropriate lines to <path>/etc/portage/package.use</path>. See <uri 
link="#use">Apache supported USE-flags</uri> for more details.
</p>

<pre caption="Checking USE flag settings and rebuild">
<comment>(Check the USE-flags and needed updates)</comment>
# <i>emerge --pretend --verbose --update --newuse --deep apache subversion \
mod_php mod_bandwidth mod_layout mod_ldap_userdir mod_loopback mod_mp3 \ 
mod_random mod_throttle mod_watch</i>

<comment>(Update the packages)</comment>
# <i>emerge --verbose --update --newuse --deep apache subversion mod_php \
mod_bandwidth mod_layout mod_ldap_userdir mod_loopback mod_mp3 mod_random \
mod_throttle mod_watch</i>

<comment>(It may be easier to just update world instead of the above)</comment>
# <i>emerge --ask --verbose --update --newuse --deep world</i>
</pre>

<p>
Now you need to reconfigure Apache and its modules. Start by using 
<c>etc-update</c> or <c>dispatch-conf</c> to update the <path>/etc/init.d</path>
and <path>/etc/conf.d</path> files. You will notice that your apache
configuration files won't show up in the updates - this is because all the
configuration files have moved.
</p>

<p>
If you have made changes to the previous default <path>apache.conf</path>  and 
<path>commonapache.conf</path> you will need to migrate your changes  to 
<path>/etc/apache{|2}/httpd.conf</path>. Also configuration locations for 
modules and virtual hosts have changed -- they are now located in 
<path>/etc/apache2/modules.d</path> and <path>/etc/apache2/vhosts.d</path> 
respectively.
</p>

<p>
When you have finished migrating your changes to the new configuration file, 
you will need to delete the old configuration files (or move them to a safe 
place). The new <path>/etc/init.d/apache{|2}</path> checks for these files and 
doesn't let you start apache unless you have removed them, indicating that you 
have reconfigured apache using the new paths.
</p>

<note>
Many modules that used to be enabled by default are now disabled. If they are 
apache built-in modules, then uncomment the appropriate line in httpd.conf. 
If they are external modules, check the module's .conf for <c>IfDefine</c> and 
add the name to <path>/etc/conf.d/apache{|2}</path> to enable it.
</note>

<p>
Now you may restart apache.
</p>

<pre caption="Restarting apache">
# <i>/etc/init.d/apache stop</i>
# <i>/etc/init.d/apache start</i>
</pre>

<p>
If you run into any problems check the <uri 
link="/doc/en/apache-troubleshooting.xml">Apache Troubleshooting Guide</uri>
and if that doesn't solve the issue, please report it on <uri 
link="http://bugs.gentoo.org">Gentoo Bugzilla</uri>. Be sure to include the 
modules you have enabled and (if you are using Apache 2) what MPM USE-flag you
compiled with (if any). You may also join <path>#gentoo-apache</path> on 
<path>irc.freenode.net</path> for support.
</p>

</body>
</section>
</chapter>

<chapter id="use">
<title>Apache supported USE-flags</title>
<section>
<body>


<p>
There are USE-flags that are local to apache and its modules. Apache 
supports several other more generic USE-flags such as <c>ssl</c>, but the 
effect they have on apache doesn't differ much from the effect is has elsewhere,
so it's not included in this list. Run a <c>emerge --verbose --pretend 
apache</c> to see the full listing of supported USE-flags.
</p>

<table>
<tr>
  <th>USE-flag</th>
  <th>Packages</th>
  <th>Description</th>
</tr>
<tr>
  <ti>apache2</ti>
  <ti>depend.apache eclass (all modules)</ti>
  <ti>
    Should always be set if using the Apache-2.0 line, should not be set if
    using the Apache-1.3 line. The eclass uses this to determine what version 
    of apache to depend on.</ti>
</tr>
<tr>
  <ti>mpm-leader</ti>
  <ti>apache-2*</ti>
  <ti>
    Builds the <uri	
    link="http://httpd.apache.org/docs-2.0/mod/leader.html">leader</uri> 
    MPM</ti>
</tr>
<tr>
  <ti>mpm-metux</ti>
  <ti>apache-2*</ti>
  <ti>Builds the <uri link="http://www.metux.de/mpm/">metux</uri> MPM</ti>
</tr>
<tr>
  <ti>mpm-peruser</ti>
  <ti>apache-2*</ti>
  <ti>
    Builds the <uri link="http://www.telana.com/peruser.php">peruser</uri> MPM
  </ti>
</tr>
<tr>
  <ti>mpm-prefork</ti>
  <ti>apache-2*</ti>
  <ti>
    Builds the <uri	
    link="http://httpd.apache.org/docs-2.0/mod/prefork.html">prefork</uri> 
    MPM</ti>
</tr>
<tr>
  <ti>mpm-threadpool</ti>
  <ti>apache-2*</ti>
  <ti>
    Builds the <uri	
    link="http://httpd.apache.org/docs-2.0/mod/threadpool.html">threadpool</uri>
    MPM</ti>
</tr>
<tr>
  <ti>mpm-worker</ti>
  <ti>apache-2*</ti>
  <ti>
    Builds the <uri	
    link="http://httpd.apache.org/docs-2.0/mod/worker.html">worker</uri> 
    MPM</ti>
</tr>
<tr>
  <ti>no-suexec</ti>
  <ti>apache</ti>
  <ti>
    Disables building of the suexec module (for those that don't want a 
    potentially unsafe suid binary on their system)
  </ti>
</tr>
<tr>
  <ti>static-modules</ti>
  <ti>apache</ti>
  <ti>
    Statically links the modules into the apache binary, so that a 
    LoadModule isn't required for loading the base modules into 
    Apache.
  </ti>
</tr>
<tr>
  <ti>lingerd</ti>
  <ti>apache-1*</ti>
  <ti>
    Adds support for <uri   
    link="http://www.iagora.com/about/software/lingerd/">lingerd</uri>
  </ti>
</tr>
<tr>
  <ti>no-htdocs</ti>
  <ti>gentoo-webroot-default</ti>
  <ti>
    Disables installing the default webroot  into 
    <path>/var/www/localhost</path> so that custom files there are not 
    overwritten. Instead the webroot is installed into 
    <path>/usr/share/doc/gentoo-webroot-default-*/webroot/</path>.
  </ti>
</tr>
</table>

<note>
While there are many mpm-* USE-flags, they are mutually exclusive. You should 
enable one and only one of the mpm-* USE-flags. (If you do not enable one, 
mpm-prefork or mpm-worker will be used, depending on if the threads USE-flag is
set.)
</note>

</body>
</section>
</chapter>

</guide>
