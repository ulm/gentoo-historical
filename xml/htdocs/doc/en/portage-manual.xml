<?xml version='1.0' encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<guide link = "/doc/en/portage-manual.xml">
<title>Portage Manual</title>
<author title="Author and Editor">
<mail link="blocke@shivan.org">Bruce A. Locke</mail>
</author>

<abstract>
This manual provides a general overview of Portage, detailed
configuration information and an end user guide to installing
and maintaining packages using the Portage system.
</abstract>

<version>0.9.6</version>
<date>April 27, 2002</date>

<chapter>
<title>Portage: An Overview</title>

<section>
  <title>Overview</title>
  <body>
	<p>
	Portage is a very powerful advanced package management system.  Its
	flexibility and its ability to serve as either a simple build engine
	or to form the heart of a cutting edge Linux distribution earns it
	the title of a Meta-distribution Engine.  The Gentoo Linux distribution 
	is built around Portage.
	</p>
	<p>
	Gentoo Linux itself is often referred to as a Meta-distribution.  It 
	consists of Portage and around 1,500 sets of package build recipes 
	called  <i>ebuilds</i>.  These <i>ebuilds</i> tell the Portage 
	engine how to compile and install a software package.  Through the
	use of <i>profiles</i> and the command-line utility called 
	<i>emerge</i>, users and developers can use Portage to install and
	maintain the packages that make up the underlying operating system
	and the applications on a system.
	</p>
	<p>
	A Gentoo Linux system is "compiled on the fly".  The act of installing
	Gentoo Linux involves setting up enough of a working compiler and 
	build environment through which Portage can download source code from 
	the Internet and build the rest of the "core" of the system and any
	desired applications.  Although Portage does support the use of
	premade binary packages they are a compromise and only used for 
	installation on slow machines, by developers who might need to 
	quickly restore a certain package, or for when users compile packages 
	on a faster machine for use on very old machines.  
	</p>
	<p>
	Due to the this
	and the fact Portage is highly configurable in the way it handles
	compiling and installing packages very few Gentoo Linux installations
	are the same.  In essence, when a user installs Gentoo Linux, the
	Portage system compiles a customized Linux distribution conforming
	to the options specified in the Portage configuration and in the
	ebuilds themselves.
	</p>	
	<p>
	At first glance the idea behind Portage may seem similar to the
	traditional BSD ports system.  They both compile packages from source
	and allow users to safely install and uninstall software from a system
	and both automatically handle dependencies.  Many ideas for Portage
	are borrowed from the BSD ports system but Portage is defiantly not
	just another "ports ripoff".
	</p>
	<p>The Portage system is a merge of a Python core with Bash script
	based <i>Ebuilds</i>.  Instead of dealing with Makefiles and the
	<i>make</i> command, Portage leverages the power of Python and the
	ease of use of shell scripting with some object oriented
	characteristics to make a uniquely powerful system we dare think
	puts Portage ahead of all current ports systems.  
	</p>

	<p>
	Some of the advanced features Portage offers are the ability
	to have multiple versions and revisions of the same package in
	the tree, conditional dependency resolution and feature support, 
	fine-grained package management,  sandboxed safe installation, 
	configuration file protection, profiles, and much more.  Many of
	these features are discussed in detail later in this manual.
	</p>
  </body>
</section>

<section>
<title>Conditional Dependency Resolution and Feature Support</title>
<body>
	<p>
	The Portage system is unique in the amount of flexibility it offers
	users.  Traditional BSD ports systems tend to only support
	one revision for a package in the ports tree at once.  Portage
	has no such limitation.  Multiple versions of the same package can
	be available for installation.  Package dependencies, those packages
	that are required for the compilation and use of another package,
	can be specified either by name or by name with a version range
	attached.  This makes it safe to have multiple versions available
	in the tree.
	</p>
	<p>
	The dependency system also supports conditional dependencies.  Portage
	has a powerful concept called the <i>USE setting</i> system.  By
	changing one configuration variable in a Portage configuration file
	you can disable optional support (and thus the need to depend on it)
	for particular features or libraries for all packages at compile time.
	This is a very flexible and powerful system which is farther explained 
	in the next chapter.
	</p>
	<p>In addition Portage supports the concept of <i>SLOT</i>s.  In
	the development of Gentoo Linux its developers often found that 
	we needed to have multiple versions of certain packages (such as
	libraries) installed to satisfy the demands of other packages.
	The traditional approach to solving this problem has been to treat
	different versions of the same package as different packages with
	slightly different names.</p>
	<p>
	Instead of the developers learning
	to treat certain versions as separate packages, the developers taught
	Portage how to handle and maintain several versions of the same package
	though the use of <i>SLOT</i>s.  An example of this would be to consider
	the common library known as freetype.  The 1.x branch of freetype
	is incompatible with the 2.x branch but both versions are needed
	to satisfy the dependencies of various packages.  Most distributions
	and ports systems tend to have a "freetype" package for freetype 1.x
	and "freetype2" for 2.x.  We consider this approach a sign of a 
	fundamentally broken package management system.  We simply assigned
	the <i>SLOT</i> number 1 to the first and number 2 to the second.  With 
	this information Portage can track both versions and upgrade both 
	versions if updates to the respective upstream branches are made.
	</p>
</body>
</section>

<section>
<title>Profiles</title>
<body>

	<p>Portage supports the concept of <i>profiles</i>.  A profile
	contains a list of package names and versions with a directive
	and a set of default configuration options to be used by Portage.
	A profile tells Portage which packages and which specific versions
	of those packages to allow, disallow, or treat as required.  Users
	can switch profiles by changing a single symlink 
	(<i>/etc/make.profile</i>).  This may seem simple but it allows 
	Portage to form the core of a distribution and serve as a professional 
	grade build system. 
	</p>
	<p>
	The entire effort spent in producing the Gentoo Linux distribution
	has resulted in a collection of <i>ebuild</i> files Portage uses
	and a profile.  This profile defines which packages are considered
	"core" packages vital to the operation of a system.  The profile
	also allows developers to block and unblock specific packages
	and versions to temporarily disable broken packages, etc.  The
	<i>ebuild</i> files simply tell Portage how to actually build
	and install the packages the profile either demands or allows.
	</p>
	
</body>
</section>
</chapter>


<chapter>
<title>Configuring Portage</title>

<section>
<title>Overview</title>
<body>
	<p>
  	The following chapter covers the various aspect of Portage
	configuration important to both users and developers.  Portage
	is a very flexible system and you will need to understand how
	to configure Portage to be in charge of your system and optimize
	it for your needs.
	</p>
	<p>
	Please note that the use of "users" in this document means
	persons with administrative rights to use Portage and change the
	systems configuration.  You must have root access to change
	Portage's configuration and to merge and unmerge packages.
	</p>
</body>
</section>

<section>
<title>Portage Configuration Files</title>
<body>
	<p>Almost all of the configuration options discussed below can be
		found in <path>/etc/make.conf</path>, <path>/etc/make.profile/make.defaults</path> and <path>/etc/make.global</path>. 
	"<path>/etc/make.conf</path>  contains  various  variables  that are used by Portage.  Portage 
will check the  currently-defined  environment  variables first for any 
settings.  
If no environment settings are found, Portage  then 
checks <path>/etc/make.conf</path>.  
If no setting is found in <path>/etc/make.conf</path>, Portage  
checks <path>/etc/make.profile/make.defaults</path>.   
If no setting is found there, the 
default setting is grabbed from <path>/etc/make.globals</path>.  
Please note that all user 
settings should be made in the environment or  in <path>/etc/make.conf</path>, 
which is intended to be customized by the user."
It is important to note
that any setting defined in <path>/etc/make.conf</path> will almost always
override any setting made in <path>/etc/make.global</path>.  Everything in 
<path>/etc/make.conf</path> and <path>/etc/make.global</path> can be considered a system-wide global setting as far as Portage is concerned.
	</p>
	<p>
	When checking to see where an option is already defined, it is 
	recommended that you check in /etc/make.conf first and then 
	check /etc/make.globals.  Unless specifically noted, options set 
	in /etc/make.conf will override options set in /etc/make.globals.
	</p>
</body>
</section>

<section>
  <title>USE settings</title>
  <body>
  	<p>
	The USE settings system is a flexible way to enable or disable
	various features at package build-time on a global level and for
	individual packages.  This allows an administrator control over how 
	packages are built in regards to the optional features which can be 
	compiled into those packages.  For instance packages with optional
	GNOME support can have this support disabled at compile time by 
	disabling the <i>gnome</i> USE setting.  Enabling the <i>gnome</i>
	USE setting would enable GNOME support in these same packages.
	</p>
	<p>
	The effect of USE settings on packages is dependent on whether both
	the software itself and the package ebuild supports the USE setting
	as an optional feature.  If the software does not have support for
	an optional feature then its corresponding USE setting will obviously
	have no effect.  Also many package dependencies are not considered
	optional by the software and thus USE settings will have no effect
	on those mandatory dependencies.  A list of USE keywords used by
	a particular package can be found by checking the <i>DEPEND</i>
	and <i>RDEPEND</i> lines in any ebuild file.
	</p>

	<p>A list of the USE settings used by Gentoo Linux can be found
	in <i>/usr/portage/profiles/use.desc</i>.  Each USE setting
	is listed one per line with a brief description of what the USE
	setting enables.
	</p>

	<p>
	Portage determines if a USE setting is enabled or disabled by checking
	up to four different locations.  These locations change USE settings
	in a way that "stacks".  Portage passes through each location and 
	remembers if a previous location enabled or disabled a setting.
	USE setting changes are cumulative during Portage's pass through
	each location.
	</p>
	<p>
	The locations checked in USE setting calculation and the order in which
	Portage checks them is set by <i>USE_ORDER</i> in /etc/make.globals.
	To disable a location you can simply remove it from <i>USE_ORDER</i>.
	</p>
	<p>
	The following is a description of each location listed in the order
	defined by <i>USE_ORDER</i> in Portage's default configuration.
	</p>
	
	
	<p><b>Defaults</b></p>
	<p>Portage profiles can define a set of default USE keywords.  This 
	is defined in the make.defaults file in any Portage profile.  Since 
	/etc/make.profile serves as a link to the currently used Portage 
	profile, /etc/make.profile/make.defaults is the set of defaults in 
	effect.  It is recommended that you do not edit this file as future
	profile changes may overwrite your changes.</p>
	
	<p><b>Auto</b></p>
	<p>These are defined in the use.defaults file in the Portage profile 
	(/etc/make.profile/use.defaults).  Each entry consists of a USE
	setting and a corresponding package.  If the package listed for
	a USE keyword is currently installed, then that USE setting is
	considered enabled.  Thus, for instance, if you installed
	<i>x11-base/xfree</i> and did not explicitly disable the X USE
	setting in a later pass location then the X keyword is enabled
	globally while that package is installed.  It is recommended that
	you do not edit this file as future profile changes may overwrite
	your changes.</p>

	<p><b>Conf</b></p>
	<p>If a <i>USE</i> configuration option is defined in /etc/make.conf
	the USE settings defined are included.  If there is no <i>USE</i>
	setting in make.conf then /etc/make.globals is checked.  This
	entry could look something like the following:</p>

	<pre>
USE="slang readline gpm berkdb gdbm tcpd pam libwww ssl gb tk
     lm_sensors lvm ldap tex bonobo sdl gtk xfs evo pda ldap
     mmx mitshm perl python guile ruby postgres dvd 3dnow tcl
     lcms gif sdl vorbis ogg oss libg++ directfb decss snmp
     gnome X opengl mozilla pdflib gpg -nls gd xface jpilot
     -kde -qt -esd -motif -alsa oggvorbis"
	</pre>

	<p>
	USE settings are enabled by simply listing the setting name.  USE
	settings are disabled by placing a <i>-</i> character before the
	setting name.  For instance, <i>gnome</i> enables the GNOME keyword
	while <i>-motif</i> disabled the motif keyword.
	</p>
	<p>
 	The <i>USE</i> setting in /etc/make.conf is the recommended place
	in which to explicitly enable and disable keywords.  This file will
	not be overwritten automatically by Portage.  It is recommended
	that you specifically enable and disable USE keywords that you
	do not want to be disabled or enabled by the previous two locations.
	</p>
	
	<p><b>Env</b></p>
	<p>USE keyword settings can be overrode manually using a shell
	environment setting.
	</p>

	<pre>
export USE="-gnome"
emerge net-im/gaim
	</pre>

	<p>This allows the use of a certain set of USE settings for the merging
	of one or more specific packages.  Any invocation of emerge after
	setting USE in the shell environment will be in effect as long as
	emerge is run from that shell and USE is still set.
	</p>
	
	<note>While Portage currently records the set of USE settings used
	when merging a package these USE settings are not persistent.  If
	the package is remerged or upgraded in the future it will use
	the USE keywords currently in effect and not the USE settings defined
	when it was first merged.</note>
	
  </body>
</section>

<section>
<title>Compiler Options</title>
<body>
	<p>The compiler options used by Portage to compile packages can be set
	in /etc/make.conf by editing <i>CHOST</i>, <i>CFLAGS</i>, and 
	<i>CXXFLAGS</i>. The <i>CHOST</i> setting specifies which platform
	you are compiling for and <i>CFLAGS</i> and <i>CXXFLAGS</i> settings
	specify compiler flags to be used while compiling C and C++
	respectively.
	</p>
	<p>
	Several sets of default settings are offered with comments on which
	platforms they are to be used with.  These provided defaults are 
	considered stable and tested.  Changing them may uncover compile 
	errors and bugs in both the compiler and in the software being 
	compiled.  Please be careful if you decide to customize a default 
	setting as you may end up with an unusable system.</p>
	<p>
	Users with multiprocessor systems may benefit by modifying the
	<i>MAKEOPTS</i> option found in /etc/make.globals.  This option
	is passed to the <i>make</i> command during package compilation
	to enable multiple gcc instances.
	</p>
	
</body>
</section>

<section>
<title>Directory Locations</title>
<body>
	<p>Portage allows you to configure the directories it uses 
	to build packages and where it stores various files.  Most users
	will have no need to change these locations.  The following
	options can be set:</p>

	<ul>
	<li><i>PORTDIR</i> - Portage tree location</li>
	<li><i>DISTDIR</i> - Local cache of downloaded archives</li>
	<li><i>PKGDIR</i> - Location of locally generated tbz2 packages</li>
	<li><i>RPMDIR</i> - Location of locally generated RPM packages</li>
	<li><i>CURRENTFILE</i> - ???</li>
	<li><i>PORTAGE_TMPDIR</i> - Temporary space used for package compilation</li>
	<li><i>BUILD_PREFIX</i> - Related to PORTAGE_TMPDIR</li>
	<li><i>PKG_TMPDIR</i> - Related to PKG_TMPDIR</li>
	</ul>
</body>
</section>
	

<section>
<title>Configuration File Protection</title>
<body>
	<p>Portage allows for the protection of all configuration files in
	specified directories.  Portage will not overwrite files in protected
	directories.  If a package tries to install a file that already
	exists, it will be renamed to something like <i>._cfg0000_name</i>.
	This is done so that users can later look at the new file and 
	manually merge the differences between the two themselves.</p>
	<p>
	Protected directories can be set by <i>CONFIG_PROTECT</i> in either
	/etc/make.conf or /etc/make.globals.  Specific files and subdirectories
	under protected directories can be made unprotected by setting
	<i>CONFIG_PROTECT_MASK</i>.
	</p>
	<p>
	The following is an example and should not be blindly copied:
	</p>

<pre>
CONFIG_PROTECT="/etc /usr/share/config /usr/kde/2/share/config"
CONFIG_PROTECT_MASK="/etc/gconf /etc/init.d /etc/pam.d"
</pre>

	<p>Users may request more information on how Configuration File 
	Protection works by issuing the following command in a shell:
	</p>

<pre>
emerge --help config
</pre>

</body>
</section>

<section>
<title>FEATURES</title>
<body>
	<p>Portage offers a number of options geared towards developers
	that govern how Portage behaves and cleans up after itself during
	various stages of a package merge.  These options should only
	be of interest to developers and may cause problems for users.
	</p>
	<p>
	A list of features to enable can be set by <i>FEATURES</i> in
	either /etc/make.conf or /etc/make.globals. The following is a list of
	available options: </p>
	<p>
	<ul>
	<li><i>digest</i> : Automatically create a digest for new ebuilds.</li>
	<li><i>cvs</i> : Automatically commit new digests to cvs.</li>
	<li><i>sandbox</i> : Enables "sandbox" for path prefix protection.</li>
	<li><i>noclean</i> : Portage never cleans up after itself.</li>
	<li><i>noauto</i> : Do not execute prior ebuild steps automatically.</li>
	</ul>
	</p>
</body>
</section>

<section>
<title>Portage SYNC settings</title>
<body>
	<p>Portage has the ability to update the Portage tree through
	rsync.  If you find another way to update the Portage tree, 
	you can define which method Portage should use via the <i>SYNC</i> setting 
	in /etc/make.conf.  </p>

	<p><b>RSYNC</b></p>

	<p>rsync is the most common way to keep your Portage
	tree up to date. The rsync method is set in /etc/make.conf: </p>

<pre>
SYNC="rsync://cvs.gentoo.org/gentoo-x86-portage"
</pre>

	<note>The rsync method will blindly overwrite any changes you make
	to your local copy of the Portage tree.  If you need to keep
	local changes, use PORTDIR_OVERLAY="/some/dir/where/you/keep-your-tree"
	to protect your own changes. </note>

	<p><b>Developer CVS</b></p>

	<p>Developers with full access to the CVS tree can also have
	<i>emerge</i> sync the local tree against a CVS repository that
	they can access through RSH or SSH.
	</p>
	<p>
	Simply check out a CVS tree using your account, move it to 
	/usr/portage, and use the following <i>SYNC</i> option:
	</p>
	
<pre>
SYNC="cvs://youraccount@cvs.gentoo.org:/home/cvsroot"
</pre>

</body>
</section>

<section>
<title>Mirrors</title>
<body>
	<p>The Gentoo Project keeps a local mirror of all archive files
	referenced in ebuilds in the Portage tree.  Often upstream source
	tarballs, etc are kept on slow servers that may often be down.  Also
	upstream developers will remove older versions of software from an 
	ftp site when new versions are released.  To make life easier for people
	using the Gentoo distribution (and reduce the upstream source site's 
	bandwidth usage) we mirror these files.  This allows for faster and 
	more reliable downloading of these archive files from one of many 
	mirror sites close to your physical location. </p>
	<p>
	Whenever you attempt to merge a package, Portage will first check
	our mirror site for the needed archives.  If the mirror site does not
	have the needed files then Portage tries to download them from the
	HTTP or FTP server specified in the package ebuild.</p>
	<p>
	The mirror Portage uses can be specified by <i>GENTOO_MIRRORS</i> 
	in /etc/make.conf.  The following is the current default setting:
	</p>
<pre>
GENTOO_MIRRORS="http://www.ibiblio.org/gentoo"
</pre>
	<p>To find a Gentoo mirror closer to your location please check the
	Gentoo web site or ask your local friendly mailing list. </p>
</body>
</section>

<section>
<title>Downloading Program</title>
<body>
	<p>The program which Portage uses to download archive files can
	be specified by setting the <i>FETCHCOMMAND</i> and 
	<i>RESUMECOMMAND</i> settings.  Several examples are shown
	in /etc/make.conf and /etc/make.globals.  Portage uses <i>wget</i> by
	default which should serve most users needs.
	</p>

	<note>Portage passes HTTP and FTP proxy information to the downloading
	program through use of the HTTP_PROXY and FTP_PROXY environment
	variables.</note>
</body>
</section>

<section>
<title>Proxies</title>
<body>
	<p>Portage can be instructed to use both HTTP and FTP proxies
	when downloading files.  The proxies can be specified by setting 
	<i>HTTP_PROXY</i> and <i>FTP_PROXY</i> in either /etc/make.conf
	or /etc/make.globals.  If both HTTP and FTP are served from the
	same proxy, you can set <i>PROXY</i> instead.</p>
	
	<p>The following is an example:</p>

<pre>
HTTP_PROXY="http://192.168.1.1:8080"
FTP_PROXY="http://192.168.1.1:8080"

or

PROXY="http://192.168.1.1:8080"
</pre>

	<p>Portage can also be instructed to use an HTTP proxy for use
	with RSYNC.  RSYNC proxy use can be configured by setting the
	RSYNC_PROXY option in <i>/etc/make.conf</i> or by setting it as 
	an environment variable.</p>
	<p>
	The following is an example:
	</p>

<pre>
RSYNC_PROXY="192.168.1.1:8080"
</pre>

	<note>If you are firewalled from the outside world and rsync
	seems unable to use your HTTP proxy, you can update your Portage
	tree using a snapshot tarball.  A snapshot tarball is available
	from <uri>http://www.ibiblio.org/gentoo/snapshots/</uri>.
	</note>

</body>
</section>

<section>
<title>Misc. Options</title>
<body>
	<p>The following are minor options which may be of use to users:</p>

	<ul>
	<li><i>NOCOLOR</i> : Allows users to disable the use of colors in output from the emerge tool.</li>
	<li><i>CLEAN_DELAY</i> : Portage delays unmerging of a package by a defined number of seconds to give users time to cancel.  This specifies the number of seconds to wait and can be disabled by setting it to "0".</li>
	</ul>

</body>
</section>

</chapter>

<chapter>
<title>Package Management</title>

<section>
<title>Updating The Portage Tree</title>
<body>
	<p>The Portage tree, located within /usr/portage, contains the library
	of build instructions for various packages (called <i>ebuilds</i>).
	The tree also contains profile and package.mask information which
	is vital for keeping your system up to date.  It is important to keep 
	this tree updated and in sync with the official Portage tree in order
	to have the newest versions of packages and bug fixes available to you.
	You can update the Portage tree by issuing the following command:
	</p>
<pre>
emerge rsync
</pre>
	<p>The method emerge uses to update the local Portage tree can be 
	changed.  See <i>Portage SYNC settings</i> in the 
	<i>Configuring Portage</i> chapter for more information.
	</p>
</body>
</section>

<section>
<title>Merging Packages</title>
<body>
	<p>
	The act of compiling and installing a package through Portage
	is referred to as <i>merging</i>.  Portage compiles packages
	and temporarily installs them to an "image" directory where it 
	records the files to be installed.  These files are then moved from
	the image directory and merged with the real / filesystem. 
	</p>
	<p>
	The <i>emerge</i> command serves as the front-end of the Portage
	system.  The installation and removal of packages is controlled
	by using this command and its various command-line arguments.
	</p>
	<p>
	To install the newest unmasked version of a given package simply
	specify the package name like the following:
	</p>
<pre>
emerge galeon
</pre>
	<p>
	The command will compile and install any needed dependencies (taking 
	into account any USE settings) and then compile and install the 
	newest unmasked version of galeon.  Galeon could also have been
	referred to using fully qualified name with category: <i>net-www/galeon</i>
	</p>
	<p>
	The <i>emerge</i> command also accepts references to actual ebuild 
	files.  This allows users to merge older versions of a given package 
	and to merge third party ebuild based packages.  The following is an
	example:
	</p>
<pre>
emerge /usr/portage/net-www/galeon/galeon-1.2.0-r3.ebuild
</pre>
	<p>
	In addition to specifying the package name or ebuild file to be merged,
	<i>emerge</i> supports several very useful command line arguments.
	Of these arguments <i>--pretend</i> is perhaps the most useful.  When
	this argument is used the intended action is not performed.  Instead
	Portage displays a list of packages that would have been installed
	or updated while performing the action.  The following is an example
	listing of what would have been merged during the installation
	of the latest version of the kdevelop package:
	</p>

<pre>
root@kodiak blocke # emerge --pretend kdevelop             

These are the packages that I would merge, in order.

Calculating dependencies ...done!
[ebuild  N   ] kde-base/kdelibs-2.2.2-r4 to /
[ebuild  N   ] dev-util/kdbg-1.2.2 to /
[ebuild   U  ] app-text/psutils-1.17 to /
[ebuild   U  ] app-text/a2ps-4.13b-r3 to /
[ebuild   U  ] app-text/jadetex-2.20 to /
[ebuild  N   ] app-text/sgmltools-lite-3.0.3-r2 to /
[ebuild  N   ] kde-base/kdoc-2.2.2-r1 to /
[ebuild  N   ] net-www/htdig-3.1.5-r2 to /
[ebuild  N   ] app-text/enscript-1.6.3-r1 to /
[ebuild  N   ] kde-base/kdebase-2.2.2-r2 to /
[ebuild  N   ] app-doc/qt-docs-2.3.1 to /
[ebuild  N   ] dev-util/kdevelop-2.0.2 to /
</pre>
	<p>In the above listing, packages marked with a <i>N</i> are
	packages which have not yet been installed and would be installed
	during this action.  Packages marked with a <i>U</i> indicate
	that an older version of the package was already installed and the
	action would upgrade the package.
	</p>
	<p>
	The other arguments available are:
	</p>
	<p>
	<i>--fetchonly</i> : Downloads the needed archive files for compiling
	the package to be installed and any dependencies that need to be met.
	</p>
	<p>
	<i>--emptytree</i> : This option makes Portage pretend that none of the
	dependencies of this package or the packages it depends upon are 
	installed.  This is useful with <i>--pretend</i> to display a complete
	tree of dependencies for any particular package.  All dependencies
	except for glibc are displayed.
	</p>
	<p><i>--nodeps</i> : Portage attempts to merge only the specified
	packages and ignores any dependencies.  If you do not have the 
	appropriate dependencies already installed then compilation may
	fail.
	</p>
	<p><i>--onlydeps</i> : Only dependencies for a given package are
	merged.  The specified package is <u>not</u> merged.
        </p>
	<p><i>--noreplace</i> : Skips the merge of specified packages if they
	are already installed
	</p>
	<p><i>--usepkg</i> : Instead of compiling the specified packages
	Portage will attempt to use pre-compiled tbz2 packages from a specified
	location.  The location is specified by the <i>PKGDIR</i> shell
	environment variable.
	</p>
	<p><i>--debug</i> : The ebuild environment is instructed to become 
	much more verbal.  This is useful for developers trying to track 
	down syntax errors in bash script based ebuild files.
	</p>
	<p><i>--autoclean</i> : Forces <i>emerge</i> to clean out
	package-specific temporary build directories before it starts
	to build a package.  Portage does this by default so this option
	is only useful to developers who disabled this default behavior.
	</p>
	<p><i>--verbose</i> : Tells <i>emerge</i> to run in verbose mode.
	Currently, this only causes GNU info errors to be displayed.  These
	errors can be safely ignored by users.
	</p>
</body>
</section>

<section>
<title>Unmerging Packages</title>
<body>
	<p>The act of "unmerging" is to remove the files associated with
	an installed package from the filesystem.  The software in the package
	is removed from the system and can no longer be used until it is 
	remerged.
	</p>
	<p>Packages are removed by invoking the <i>emerge</i> command and
	specifying the <i>unmerge</i> argument followed by the name of the
	package to be removed.  The following example would unmerge all
	installed versions of the <i>ltrace</i> package:
	</p>

<pre>
emerge unmerge ltrace

or

emerge unmerge dev-util/ltrace
</pre>
	<p>Portage also allows for a specific versions of packages
	to be unmerged. Ranges are specified using <i>=</i> (exact version),
	<i>&lt;</i> (less then), <i>&gt;</i> (greater then), <i>&lt;=</i> 
	(less then or equal to), and <i>&gt;=</i> (greater then or equal to).
	The following would unmerge all versions of ltrace equal to 
	version 0.3.15 and older:
	</p>

<pre>
emerge unmerge \&lt;=dev-utils/ltrace-0.3.15
</pre>

	<p>When specifying package ranges it is important to escape <i>&gt;</i>
	and <i>&lt;</i> characters so your shell does not interpret them.
	Also you will need to specify the category in the package name as 
	shown in the example.  For another example of how package
	range specifications work see the <i>emerge --help</i> command.
	</p>

	<warn>Unmerging packages can be dangerous.  If you remove any
	core packages your system may cease to function and 
	the removal of various libraries may cause software to fail.
	<b>Portage does not warn you if you are removing core packages
	or dependencies for other packages.</b>
	</warn>

	<p>If the package to be removed is in fact installed the emerge
	program will display exactly what packages are to be removed and
	will wait a specified number of seconds to give the user time to
	cancel.  During this waiting period the user may press Control-C
	to cancel before the unmerge begins.
	</p>
	<p>
	Once the unmerge begins you will see a long list of filenames 
	belonging to the package displayed.  Some of these filenames
	will have a flag displayed to the left of the filename.
	The flags <i>!mtime</i>, <i>!empty</i>, and <i>cfgpro</i> specify
	reasons why certain files were not removed when this package
	was unmerged.  Files listed without any of these three flags
	were removed from the filesystem successfully.
	</p>
	<p>
	The <i>!mtime</i> flag means the file was modified after this specific 
	version of the package was installed.  This means that someone
	edited this file after the package was installed or some other package
	overwrote the file at a later time.  This allows for packages to be
	updated to newer versions without fear that unmerging the older
	installed version will remove vital files.  
	</p>
	<p>
	The <i>!empty</i> flag refers to directories which Portage refuses 
	to remove due to the directory not being empty (multiple packages 
	often claim ownership to the same directories).  Configuration File 
	protection kicks in when you see the <i>cfgpro</i> flag.  This means 
	a newer installed package is claiming ownership of this particular
	configuration file and Portage refuses to remove it.
	</p>
	<warn>Files are considered owned by the last package installed.
	This is dependent on the order of installation and is independent
	of the actual version number or revision number of the packages
	installed.  Removing the newest installed package that claims a certain
	file will always remove the file even if older packages installed
	versions of the same file in the past (assuming the user did not 
	manually modify the file).
	</warn>
	
</body>
</section>

<section>
<title>System Update</title>
<body>
	<p>Portage supports the ability to upgrade installed packages
	automatically with a single command.  The system update feature
	allows users to update the "core" packages to versions recommended
	by Gentoo core developers as being important to the operation
	of any Gentoo Linux system.  A system update does not update
	nonessential packages, only those packages defined in the Portage
	profile as being essential for the operation and maintaince of 
	a system.
	</p>
	<p>
	To perform a system update issue the following command:
	</p>
<pre>
emerge --update system
</pre>
	<p>Portage will then compile and install updates depending on
	what versions and packages you have installed and what is recommended
	by the current Portage profile.  Users can use the <i>--pretend</i>
	argument with the above example to get a list of what would be
	installed and upgraded during this action.
	</p>
	<note>You will notice in the install instructions that one of the
	first steps is to run <i>emerge system</i> to install the base
	(or "core") packages.  <i>emerge --update system</i> updates
	those base packages to the latest recommended versions.
	</note>
</body>
</section>

<section>
<title>World Update</title>
<body>
	<p>Portage also supports the ability to automatically upgrade
	selected non-essential packages with a single command.  The portage
	system has a degree of intelligence built into it to allow for the 
	safe upgrading of a system where multiple versions of conflicting 
	packages may be available.</p>

	<p>Portage's world update feature checks the system profile, the
	list of blocked packages (<i>package.mask</i>), the world profile and 
	the dependencies (including version ranges) of packages listed 
	in the world profile when determining which packages need upgrading.
	A package is only upgraded if a newer version exists and the package
	is listed in the world profile or is a dependency of a package in the 
	world profile.  In addition the package or specific version of the 
	package must not be blocked by the system profile or in 
	<i>package.mask</i>.
	</p>

	<p>When considering which packages to upgrade, Portage tries to 
	upgrade all packages mentioned in the world profile to the newest
	unblocked version available.  Portage also considers the dependencies
	of each package mentioned in the world profile and will try to
	upgrade the dependency to a newer version if one is available, matches
	the version ranges specified, and is not blocked by either the system
	profile or <i>package.mask</i>.  It also takes into consideration
	<i>SLOTS</i> as mentioned in a previous chapter.
	</p>

	<p>Users familiar with other distributions and packaging methods
	besides Portage may be confused by why Portage does not simply
	do a blind upgrade of packages based solely on version numbers (as it
	did before Gentoo 1.0).  Many of the packages included in Gentoo's
	Portage Tree have many versions available.  An older or newer
	version of a package may be incompatible with the software that relies
	on it.  Blindly upgrading libraries and tools without taking into
	consideration the needs of other packages can quickly result in
	many severe problems.  To avoid this Portage tries to take care when
	upgrading and takes the needs of all packages into consideration based
	on the needs declared in individual package ebuilds.
	</p>
	
	<p>
	The heart of Portage's world update is the world profile.  Unlike
	the system profile which is usually defined by developers and never
	touched by users, the world update profile is generated indirectly
	over time by actions performed by the user.
	The world profile operates much like a "favorites list".
	Packages that are manually installed by the user through use of the
	<i>emerge</i> command are recorded in the <i>world</i> file located at
	<i>/var/cache/edb/world</i>.  Portage assumes that because you took
	the effort to tell it to install the package then you must have some
	interest in keeping it up to date.
	</p>
	<p>
	The <i>world</i> file consists of one package name with category per
	line and may look something like the following:
	</p>
<pre>
net-im/gaim
net-www/skipstone
net-www/galeon
app-editors/vim
app-text/ispell
net-mail/evolution
dev-util/ltrace
sys-apps/xfsprogs
=net-www/mozilla-0.9.8-r3
sys-apps/attr
sys-apps/dmapi
sys-kernel/linux-sources
sys-apps/acl
app-office/gnucash
app-cdr/xcdroast
</pre>
	<p>
	Almost all of the entries in this example file were added 
	automatically by Portage when the user manually merged the specific 
	packages.  These packages will be upgrade if a newer version is 
	available.
	</p>
	
	<note>To save time and make sure your favorite packages are kept updated
	you may manually edit the <i>world</i> file and add entries for these
	packages.  Users upgrading from old versions of Portage may need
	to populate this file.  Recent installations of Gentoo and Portage
	should have a fairly populated world profile created during
	installation.</note>
	
	<p>An interesting entry to note is the entry for the mozilla package
	(<i>=net-www/mozilla-0.9.8-r3</i>).  This entry was added manually
	by a user to "pin" a specific version.  Package ranges (as discussed
	in the <i>Unmerge Packages</i> section of this manual) can be used
	to force Portage to only consider certain version ranges when 
	updating packages.  This entry in effect "pins" Portage into 
	considering mozilla-0.9.8-r3 to be the only available version and 
	thus it will never attempt to update the package during a world
	update for any reason.
	</p>
	
	<p>World updates are done using the following command:</p>
<pre>
emerge --update world
</pre>
	<p>Portage will then attempt to update all packages mentioned in
	the <i>world</i> file and will update any dependencies if needed.
	Dependencies are upgraded to the newest version available that
	satisfies the needs of the package being upgraded.  Packages
	that are not listed in <i>world</i> and are not dependencies of
	the aforementioned packages are not updated.
	</p>

	<warn>Portage will not overwrite files in directories protected
	by Configuration File Protection.  You will need to manually
	merge the differences between your current configuration files
	and the new versions Portage saved for you.  If you do not
	update your configuration files installed software may stop 
	functioning.  Please see <i>Configuration File Protection</i> 
	in the <i>Configuring Portage</i> chapter or use the command 
	<i>emerge --help config</i> for more information. </warn> 

	<p>To view a list of what would be updated or installed during 
	a world update, you can use the <i>--pretend</i> argument as 
	mentioned in previous sections of this chapter.
	</p>

	<note>A world update also performs a system update automatically.  
	Core packages cannot be pinned using the <i>world</i> file method as 
	the current Portage profile will always override it.</note>

	<p>
	An interesting side effect of how world update works can
	be exploited by users wishing to recompile all installed software
	on a system.  Since world update will try to update all packages
	mentioned in the <i>world</i> file and their dependencies, the use
	of the argument <i>--emptytree</i> is a way of forcing the recompile
	of these packages and every dependency except for glibc.
	This can be useful for users wishing to change their compiler options
	or USE keyword settings and want these changes to be used by all
	the software they use without manually remerging every package.
	Simply populate the <i>world</i> file with all your commonly used
	applications and issue the following command: 
	</p>
<pre>
emerge --update world --emptytree
</pre>
	<p>
	You can add the <i>--pretend</i> argument to this command to get a 
	list of packages that would be recompiled as a result of this action.
	</p>
	
</body>
</section>

<section>
<title>Cleaning System</title>
<body>
	<p>Portage supports the ability to install multiple versions
	of the same version on top of each other.  There are quite a few
	packages in Gentoo's Portage Tree that makes use of this
	functionality (for backwards compatibility as older applications may
	be incompatible with a newer version of another package)
	</p>
	<p>In most cases though when a newer version of a package is installed
	most of the older package is overwritten and all that remains is
	a few documentation files and other files unimportant to the operation
	of a system.  Overtime this "cruft" can build up and waste valuable
	disk-space.
	</p>
	<p>To combat this, Portage provides an easy way to remove traces
	of older versions from a user's system.  This functionality is referred
	to as the emerge <i>clean</i> option and be used by issuing the
	following command:
	</p>
<pre>
emerge clean
</pre>
	<p><i>emerge</i> will then display a list of package revisions and 
	versions to be removed, the versions that will remain, and give
	the user time to cancel out of the action by pressing Control-C.
	On a typical system a flurry of activity will occur as it displays
	long lists of files that were either deleted or kept.
	</p>

	<p>Unless specified, Portage assumes the clean action is to be
	performed for the <i>world</i> (all installed packages).  You can
	narrow the scope of the clean action by using options such as 
	<i>world</i>, <i>system</i>, a list of package names, and package 
	version ranges as mentioned in the unmerge section of this chapter.
	</p>

	<p>When considering which package versions should be removed the 
	Portage system considers the various profiles, the needs of other
	installed packages, and a packages SLOT.  Assuming dependencies
	are correctly defined for all packages, the clean action will
	safely remove old package system and should not remove any
	functionality or prevent the system from functioning.
	</p>	
</body>
</section>

<section>
<title>Pruning Packages</title>
<body>
	<p>
	Portage also supports a package <i>prune</i> action.   The prune
	action is an unsafe form of the clean.  It removes all versions
	of all packages except for the last installed version.  It does
	not perform many of the checks <i>clean</i> performs and can
	remove essential dependencies from your system.  Users of this 
	option can easily break their systems and its use is not recommended
	except in specific specialized circumstances.
	</p>

	<p>The <i>prune</i> action accepts the same list as options as the
	<i>clean</i> action and can be used like the following:
	</p>
<pre>
emerge prune
</pre>
</body>
</section>


<section>
<title>Searching The Portage Tree</title>
<body>
	<p>Portage Trees such as the one that forms the heart of the Gentoo
	Linux distribution can be quite large.  The <i>emerge</i> command
	provides a search feature which accepts a search string in the form
	of a regular expression contained in quotes.  Regular expressions
	are very complicated beasts so it is recommended you find a good book
	on the topic if you are interested in fully using regular expressions.
	</p>
	<p>
	Most simple searches can be done without knowing how to form
	regular expressions.  The following is an example of a simple search 
	for a package either named "gcc" or has "gcc" as part of its name:
	</p>
<pre>
emerge search gcc
</pre>
	<p>
	For each match the search action lists the package name, newest 
	available version, newest version installed, its home page, and
	a description of the software contained in the package.
	</p>
</body>
</section>

<section>
<title>Getting Help</title>
<body>
	<p>More information on the many options and actions <i>emerge</i>
	supports can be found by issuing the following command:</p>
<pre>
emerge --help
</pre>
</body>
</section>
	
		

<section>
<title>Useful Utilities</title>
<body>
	<p>Several utilities have been made available by Gentoo users
	to make life easier.  These utilities are available in the
	<i>app-admin/gentoolkit</i> in the Gentoo Portage tree.
	</p>
	<p>
	<ul>
	<li><i>etc-update</i> : shell script using vim to assist with the
	merging of /etc files (can be dangerous if used incorrectly)</li>
	<li><i>qpkg</i> : package database query tool</li>
	<li><i>epm</i> : another package database query tool with RPM like syntax</li>
	</ul>
	</p>
</body>
</section>


</chapter>

</guide>

