<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/doc/en/gentoo-mips-install.xml">

<title>Gentoo/MIPS Linux Installation Guide</title>
<author title="Author">
  <mail link="kumba@gentoo.org">Joshua Kinard</mail>
</author>

<abstract>
This is a guide for installing Gentoo Linux on Silicon
Graphics MIPS based machines.  If you find errors or ommissions
please email the maintainer or an editor.
</abstract>

<version>3.5</version>
<date>05 Dec 2003</date>

<license/>

<chapter>
<title>Supported/Unsupported Hardware</title>
<section>
<body>

<note>
Items in <comment>red</comment> are currently <e>unsupported</e> in Gentoo/MIPS 
at this time. This means Linux does not run on this system/CPU at the current 
time, or the specific piece of hardware is unsupported in the kernel.
</note>

<note>
Items in <i>blue</i> are considered <e>highly experimental</e> at this time.  
This means the system can boot Linux, but either is unstable, or Gentoo/MIPS has
not been tested on it yet.  In regards to hardware, it means the specific piece 
of hardware either works to some extent, or is untested.
</note>

</body>
</section>
<section>
<title>Systems</title>
<body>

<table>
<tr>
  <th>Systems</th>
  <th>CPUs</th>
  <th>Architectures</th>
  <th>Kernel</th>
</tr>
<tr>
  <ti>Indy</ti>
  <ti>R4000, R4400, R4600, R5000</ti>
  <ti>32-bit, <i>64-bit (kernel)</i></ti>
  <ti>2.4, <comment>2.6</comment></ti>
</tr>
<tr>
  <ti>Indigo2</ti>
  <ti>
    R4000, R4400, R4600, <comment>R8000</comment>, <comment>R10000</comment>
  </ti>
  <ti>32-bit, <i>64-bit (kernel) [IP22]</i></ti>
  <ti>2.4, <comment>2.6</comment></ti>
</tr>
<tr>
  <ti>Challenge S</ti>
  <ti>R4000, R4400, R4600, R5000</ti>
  <ti>32-bit, <i>64-bit (kernel)</i></ti>
  <ti>2.4, <comment>2.6</comment></ti>
</tr>
<tr>
  <ti><i>O2</i></ti>
  <ti><i>R5000</i>, <i>RM5200</i>, <comment>R10000</comment>, <i>R12000</i></ti>
  <ti><i>32-bit (userland)</i>, <i>64-bit (kernel)</i></ti>
  <ti><comment>2.4</comment>, <i>2.6</i></ti>
</tr>
<tr>
  <ti><i>Origin</i></ti>
  <ti><i>R10000</i></ti>
  <ti><i>32-bit (userland)</i>, <i>64-bit (kernel)</i></ti>
  <ti><i>2.4</i>, <i>2.6</i></ti>
</tr>
<tr>
  <ti><comment>Indigo</comment></ti>
  <ti><comment>R3000</comment>, <comment>R4000</comment></ti>
  <ti><comment>32-bit</comment>, <comment>64-bit</comment></ti>
  <ti><comment>2.4</comment>, <comment>2.6</comment></ti>
</tr>
<tr>
  <ti><comment>Octane</comment></ti>
  <ti><comment>R10000</comment>, <comment>R12000</comment></ti>
  <ti><comment>32-bit</comment>, <comment>64-bit</comment></ti>
  <ti><comment>2.4</comment>, <comment>2.6</comment></ti>
</tr>
<tr>
  <ti><comment>Octane2</comment></ti>
  <ti><comment>R14000A</comment></ti>
  <ti><comment>32-bit</comment>, <comment>64-bit</comment></ti>
  <ti><comment>2.4</comment>, <comment>2.6</comment></ti>
</tr>
<tr>
  <ti><comment>Fuel</comment></ti>
  <ti><comment>R14000A</comment>, <comment>R16000</comment></ti>
  <ti><comment>32-bit</comment>, <comment>64-bit</comment></ti>
  <ti><comment>2.4</comment>, <comment>2.6</comment></ti>
</tr>
<tr>
  <ti><comment>Tezro</comment></ti>
  <ti><comment>R16000</comment></ti>
  <ti><comment>32-bit</comment>, <comment>64-bit</comment></ti>
  <ti><comment>2.4</comment>, <comment>2.6</comment></ti>
</tr>
</table>

</body>
</section>
<section>
<title>Accessories</title>
<body>

<table>
<tr>
  <th>Miscellaneous (Supported)</th>
</tr>
<tr>
  <ti>GIO32 Slots on Indy</ti>
</tr>
<tr>
  <ti>XL Graphics Card (Newport) [Indy &amp; Indigo2]</ti>
</tr>
<tr>
  <th>Miscellaneous (Experimental)</th>
</tr>
<tr>
  <ti><i>Indy I2C subsystem &amp; IndyCam</i></ti>
</tr>
<tr>
  <th>Miscellaneous (Unsupported)</th>
</tr>
<tr>
  <ti><comment>Impact &amp; Extreme graphics chipsets <i>(1)</i></comment></ti>
</tr>
<tr>
  <ti>
    <comment>WD33C95A SCSI Adapter/RJ-45 Daughter Card [Challenge S] <i>(2)</i>
    </comment>
  </ti>
</tr>
<tr>
  <ti><comment>GIO64 Slots on Indigo2/Challenge S</comment></ti>
</tr>
<tr>
  <ti><comment>Phobos G130 10/100Mbps NIC [Indy]</comment></ti>
</tr>
<tr>
  <ti><comment>Phobos G160 10/100Mbps NIC [Indigo2]</comment></ti>
</tr>
<tr>
  <th>Indigo2 EISA Slots <b><i>(3)</i></b></th>
</tr>
<tr>
  <ti>ISA Parallel Port Card (PC-Style)</ti>
</tr>
<tr>
  <ti>ISA NE2000 Compatible 10Mbps NIC (RTL8019)</ti>
</tr>
</table>

<impo>
<b><i>(1)</i></b> If you lack an appropriate Framebuffer, you will be required 
to use serial console.  Serial console programs for linux include <c>minicom</c>
and <c>xc</c>, and for Windows, <c>HyperTerminal</c> and <c>Tera Term Pro</c>. 
If you are running Windows, and intend to use HyperTerminal, it is advised that
you seek out an updated client from the program's website instead of the one 
installed by default.  An upgraded client provides much better serial support 
than the default one installed by Windows.
</impo>

<impo>
<b><i>(2)</i></b> The Challenge S has its RJ-45 connector on a daughter board 
linked with an unsupported SCSI adapter, a WD33C95A.  In order for this network 
connector to function, this SCSI bus needs to be activated, however it is not 
yet supported by Linux.  As a result of this, the Challenge S can only get 
network connectivity via its AUI connector.
</impo>

<impo>
<b><i>(3)</i></b> Indigo2 EISA Support is <e>highly</e> experimental.  It isn't 
very well tested and may not work with all hardware.  Hardware that it is known 
to function with is listed, and as more compatible hardware is discovered, it 
will be added.  Please note that hardware requiring DMA support is currently 
not functional.  This includes EISA/ISA-based soundcards.  EISA Video cards 
requiring an x86-compatible BIOS are also not functional.
</impo>

<impo>
The maximum amount of RAM supported in the Indigo/Indy systems is 256MB, due to 
no HIGHMEM support in 32-bit kernels.  Only a 64-bit kernel can properly detect 
RAM amounts greater than 256MB on these systems.
</impo>

<note>
MIPS Little-Endian (mipsel) is currently being tested on a Cobalt RaQ2, however 
progress is currently hindered by a flaky Tulip NIC driver in the 2.4.21 mips 
kernels that makes running Gentoo a bit difficult.  Any help in this effort is 
appreciated.
</note>

<note>
The Playstation 2 is a specialized MIPS system, using an R5900 MIPS processor.  
The support for this processor is extremely limited, and only found in the 
development toolchains available in the PS2 Linux Kit and via some patches 
available on the PS2 Linux Homepage.  There was a limited amount of work done on
porting Gentoo to the PS2 Linux Kit, however it is incomplete as of this 
writing.  Those interested may visit 
<uri>http://playstation2-linux.com/projects/gentoo-ps2/</uri> if they are 
interested in assisting or completing the port.  Additional information on PS2 
Compiler Toolchains can be found at <uri>http://ps2dev.sf.net/</uri>.
</note>

<note>
Gentoo/MIPS has also been installed on a SiByte BCM1250 Machine, a Big-endian, 
dual-processor MIPS machine.  Currently, only one person to date has done this, 
but more people willing to test Gentoo on such hardware are welcomed to try and 
report results.
</note>

</body>
</section>
<section>
<title>Minimum Recommended Requirements</title>
<body>

<ul>
  <li>
    128MB RAM - More ram is better, as Gentoo currently uses the gcc-3.2.x and 
    greater versions of gcc. These versions of gcc tend to consume more memory 
    than their older 2.95.x counterparts, and on the merging of large packages, 
    anything less than 128MB of ram could make gcc fail to compile the package, 
    or mysteriously stop in the middle of compiliation.  A recommended amount 
    of ram is 160MB.
  </li>
  <li>
    9GB Hard Drive Space - 9GB is more or less the recommended minimum.  It is 
    enough space to install Gentoo on and leaves extra space for daily 
    activities on the machine.  Gentoo has been installed on smaller drives, 
    the smallest being a 3.2GB drive, but it does not leave alot of room for 
    much else.
  </li>
</ul>

</body>
</section>
</chapter>
<chapter>
<title>Netbooting</title>
<section>
<title>Host Machine Configuration - DHCPD</title>
<body>

<p>
Currently, Gentoo/MIPS requires nebooting to get started, as other forms of 
booting are currently untested and/or unsupported.  All that is needed for 
netbooting is another linux/unix machine, a TFTP server, DHCP server, and a 
Gentoo netboot image.   Gentoo netboot images may be found at: 
<uri>http://dev.gentoo.org/~kumba/mips/netboot/</uri>.  You'll need to choose 
the netboot image that works with the CPU running in your system.  For 
R5000-based SGI Indy systems, you'll want the <path>gentoo-r5k.img</path> 
file and for R4x00 (R4000, R4400, R4600) Indy &amp; Indigo2's, the 
<path>gentoo-r4k.img</path> file is what you'll need.
</p>

<p>
The Gentoo netboot images are new, and haven't received much testing.  Feedback 
on them is very welcome, as is any ideas or suggestions for improvement.  
Should the netboots not work correctly for whatever reason, the debian-mips 
netboot that was formerly relied on can be found in 
<uri>http://dev.gentoo.org/~kumba/mips/netboot/old/</uri>.  
Please report any problems regarding the Gentoo netboots to the gentoo-mips 
mailing list or the gentoo-mips IRC channel.
</p>

<p>
First, we need to setup dhcpd to work:
</p>

<pre caption="Edit dhcpd.conf">
# <i>nano -w /etc/dhcp/dhcpd.conf</i>
</pre>

<pre caption="dhcpd.conf">
ddns-update-style ad-hoc;
group {
  <comment># IP address of TFTP/NFS server</comment>
  next-server <i>&lt;IP Address of TFTP Server&gt;</i>;


  subnet <i>&lt;subnet&gt;</i> netmask <i>&lt;netmask&gt;</i> {
  <comment># Allow BOOTP Requests</comment>
  allow bootp;
}


host <i>&lt;hostname or IP&gt;</i> {
  <comment># Ethernet address of the client machine</comment>
  hardware ethernet <i>&lt;MAC Address&gt;</i>;

  <comment># IP address to assign</comment>
  fixed-address <i>&lt;IP Address to assign&gt;</i>;

  <comment># The name of the file to be downloaded by the PROM</comment>
  filename "<i>&lt;filename&gt;</i>";
}
}</pre>

<note>
If you use a DHCP server for other purposes, you'll want to modify the above
example to work with your existing config file.
</note>

<note>
The above example assumes the machine running dhcpd is a gentoo machine.  For 
other linux distributions, the path to dhcpd.conf may be different.
</note>

</body>
</section>
<section>
<title>Host Machine Configuration - TFTP</title>
<body>

<p>
Setting up a TFTP server can sometimes be easy or difficult.  In Gentoo, you 
have three choices of TFTP servers: <c>app-admin/tftp-hpa</c>, 
<c>net-ftp/atftp</c>, and <c>net-misc/netkit-tftp</c>.  If you run another 
linux distribution, different flavour of unix of another OS altogether, you'll 
have to find a TFTP server and set it up.  Since setting up a TFTP server can 
be different from system to system, this document won't focus on that 
aspect.  For SGI Machines, however, we need to make some minor tweaks to the 
host system in order for TFTP to work properly.
</p>

<pre caption="Host TFTP setup for SGI Machines">
# <i>echo 1 > /proc/sys/net/ipv4/ip_no_pmtu_disc</i>
<codenote>The first line will disable "Path Maximum Transfer Unit" discovery, which</codenote>
<codenote>is required if you want the SGI Prom to find the kernel.</codenote>

# <i>echo "2048 32767" > /proc/sys/net/ipv4/ip_local_port_range</i>
<codenote>The second line will fix the port range to a range of values most usable</codenote>
<codenote>by the SGI Prom.</codenote>
</pre>

</body>
</section>
<section>
<title>Netbooting</title>
<body>

<p>
Power on the machine, and get into the PROM Monitor, and issue the command to 
boot the kernel over the network:
</p>

<pre caption="Netbooting">
Running power-on diagnostics...





System Maintenance Menu

1) Start System
2) Install System Software
3) Run Diagnostics
4) Recover System
5) Enter Command Monitor

Option? <i>5</i>
Command Monitor.  Type "exit" to return to the menu.
&gt;&gt; <i>bootp(): root=/dev/ram0</i>
<codenote>The "root=/dev/ram0" line will tell the netboot kernel where</codenote>
<codenote>to find its root filesystem, which will invoke a busybox shell.</codenote>
</pre>

<note>
You may have to press the <c>Esc</c> key to get into the menu above, otherwise, 
the system will attempt to boot the system directly.  You can disable this by 
disabling the <c>AutoLoad</c> variable in the Prom Command Monitor.  Execute 
<c>setenv AutoLoad false</c> in the Prom Monitor.
</note>

<p>
Sometimes netbooting is a tricky endeavour.  The following PROM commands below 
may help, but this is not guaranteed.  If your machine refuses to netboot, 
double check things on the host TFTP machine to make sure that:
</p>

<ul>
  <li>dhcpd is giving the SGI Machine an IP Address</li>
  <li>
    Permissions are set properly in your tftp folder (typically /tftpboot)
  </li>
  <li>
    Check system logs to see what the tftp server is reporting (errors perhaps)
  </li>
  <li>
    Pray to a Tux plushie (this may or may not work, and is not an officially 
    supported troubleshooting technique).
  </li>
</ul>

<pre caption="Netbooting tricks">
&gt;&gt; <i>resetenv</i>
&gt;&gt; <i>unsetenv netaddr</i>
&gt;&gt; <i>unsetenv dlserver</i>
&gt;&gt; <i>init</i>
&gt;&gt; <i>bootp(): root=/dev/ram0</i>
</pre>

<note>
For more information on Prom Monitor Commands, please see the documentation 
here: <uri>http://techpubs.sgi.com/library/tpl/cgi-bin/getdoc.cgi/0650/bks/SGI_Admin/books/IA_ConfigOps/sgi_html/ch09.html#LE63851-PARENT</uri>
</note>

</body>
</section>

<section>
<title>Busybox Shell "ash"</title>
<body>

<p>
Provided the netboot kernel didn't panic, die, or otherwise have any problems 
booting, you will be dropped off at busybox "ash" shell.  Instructions will 
also be printed on the screen that enable networking which will allow the 
installation to proceed.
</p>

<pre caption="Setting up Networking">
Gentoo Linux; http://www.gentoo.org/
Copyright 2001-2003 Gentoo Technologies, Inc.; Distributed under the GPL

Gentoo/MIPS Netboot for SGI Indy/Indigo2 Machines
Build Date: November 26th, 2003

* To configure networking, do the following:

* For Static IP:
* /sbin/ifconfig ethX &lt;ip addr&gt; broadcast &lt;bcast addr&gt; netmask &lt;netmask&gt;
* /sbin/route add -net default gw &lt;gateway addr&gt; netmask 0.0.0.0 metric 1

* For Dynamic IP:
* dhcpcd ethX

* Where ethX is your ethernet device (i.e., eth0)



Please press Enter to activate this console.


BusyBox v1.00-pre3 (2003.11.26-05:37+0000) Built-in shell (ash)
Enter 'help' for a list of built-in commands.

/ #
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Partition Layout</title>
<section>
<title>Creating an SGI Disk Label</title>
<body>

<p>
Now the fun part begins -- <c>fdisk</c>.  All disks in an SGI System require an 
<c>SGI Disk Label</c>, which serves a similar function as Sun &amp; MS-DOS 
disklabels -- It stores information about the disk partitions. Creating a new 
SGI Disk Label will create two special partitions on the disk:
</p>

<ul>
  <li>
    <c>SGI Volume Header</c> (9th Partition) - This partition is 
    <e>important</e> -- it is where the kernel images will go.  To store 
    kernel images, you will utilize the tool known as <c>dvhtool</c> to copy 
    kernel images to this partition.   You will then be able to boot kernels 
    from this partition via the SGI PROM Monitor.
  </li>
  <li>
    <c>SGI Volume</c> (11th Partition) - This partition is similar in purpose 
    to the Sun Disklabel's third partition of "Whole Disk".  This partition 
    spans the entire disk, and should be left untouched.  It serves no special 
    purpose other than to assist the PROM in some undocumented fashion (or it 
    is used by IRIX in some way).
  </li>
</ul>

<warn>
The SGI Volume Header <e>must</e> begin at cylinder 0.  Failure to do so means 
you won't be able to boot from the disk.
</warn>

<impo>
Every disk is different.  In the fdisk examples provided below, the 
<c>Units = cylinders of 2048 * 512 bytes</c> line may vary depending on the 
type of disk used in the machine.  For this particular disk, assume 1 Cylinder 
== 1MB.
</impo>

<pre caption="Creating an SGI Disklabel">
# <i>fdisk /dev/sda</i>

Command (m for help): <i>x</i>

Expert command (m for help): <i>m</i>
Command action
  b   move beginning of data in a partition
  c   change number of cylinders
  d   print the raw data in the partition table
  e   list extended partitions
  f   fix partition order
  <i>g   create an IRIX (SGI) partition table</i>
  h   change number of heads
  m   print this menu
  p   print the partition table
  q   quit without saving changes
  r   return to main menu
  s   change number of sectors/track
  v   verify the partition table
  w   write table to disk and exit

Expert command (m for help): <i>g</i>
Building a new SGI disklabel. Changes will remain in memory only,
until you decide to write them. After that, of course, the previous
content will be unrecoverably lost.

Expert command (m for help): <i>r</i>

Command (m for help): <i>p</i>

Disk /dev/sda (SGI disk label): 64 heads, 32 sectors, 17482 cylinders
Units = cylinders of 2048 * 512 bytes

----- partitions -----
Pt#     Device  Info     Start       End   Sectors  Id  System
9:  /dev/sda1               0         4     10240   0  SGI volhdr
11:  /dev/sda2               0     17481  35803136   6  SGI volume
----- Bootinfo -----
Bootfile: /unix
----- Directory Entries -----

Command (m for help):
</pre>

<note>
If your disk already has an existing SGI Disklabel, then fdisk will not allow 
the creation of a new label.  There are two ways around this.  One is to create 
a Sun or MS-DOS disklabel, write the changes to disk, and restart fdisk.  The 
second is to overwrite the partition table with null data via the following 
command: <c>dd if=/dev/zero of=/dev/sda bs=512 count=1</c>.
</note> 

</body>
</section>

<section>
<title>Getting the SGI Volume Header to just the right size</title>
<body>

<p>
Now that an SGI Disklabel is created, partitions may now be defined.  In the 
above example, there are already two partitions defined for you.  These are the 
special partitions mentioned above and should not normally be altered.  However,
for installing Gentoo, we'll need to load multiple kernel images directly into 
the volume header, as there is no supported SGI Bootloader available in Portage 
yet.   The volume header itself can hold up to <e>eight images</e> of any size, 
with each image allowed <e>eight-character</e> names.
</p>

<p>
The process of making the volume header larger isn't exactly straight-forward --there's a bit of a trick to it.  One cannot simply delete and re-add the volume 
header due to odd fdisk behavior.  In the example provided below, we'll create 
a 50MB Volume header in conjunction with a 50MB /boot partition.  The actual 
layout of your disk may vary, but this is for illustrative purposes only.
</p>

<pre caption="Resizing the SGI Volume Header correctly">
Command (m for help): <i>d</i>
Partition number (1-16): <i>1</i>
<codenote>Delete Partition #1 [/boot] (If it happened to already exist)</codenote>

Command (m for help): <i>n</i>
Partition number (1-16): <i>1</i>
First cylinder (5-8682, default 5): <i>51</i>
Last cylinder (51-8682, default 8682): <i>101</i>
<codenote>Notice how fdisk only allows Partition #1 to be re-created starting at a minimum of cylinder 5</codenote>
<codenote>Had you attempted to delete &amp; re-create the SGI Volume Header this way, this is the same</codenote>
<codenote>issue you would have encountered.</codenote>
<codenote>In our example, we want /boot to be 50MB, so we start it at cylinder 51 (the Volume Header</codenote>
<codenote>needs to start at cylinder 0, remember?), and set its ending cylinder to 101, which will</codenote>
<codenote>roughly be 50MB (+/- 1-5MB).</codenote>

Command (m for help): <i>d</i>
Partition number (1-16): <i>9</i>
<codenote>Delete Partition #9 (SGI Volume Header)</codenote>

Command (m for help): <i>n</i>
Partition number (1-16): <i>9</i>
First cylinder (0-50, default 0): <i>0</i>
Last cylinder (0-50, default 50): <i>50</i>
<codenote>Re-Create Partition #9, ending just before Partition #1</codenote>
</pre>

</body>
</section>

<section>
<title>Final partition layout</title>
<body>

<p>
Once this is done, you are safe to create the rest of your partitions as you see
fit.  After all your partitions are laid out, make sure you set the partition ID
of your swap partition to <c>82</c>, which is Linux Swap.  By default, it will 
be <c>83</c>, Linux Native.  Below is the finished partition table of my disk, 
before I actually write it to disk.
</p>

<pre caption="Partition Layout">
----- partitions -----
Pt# Device  Info     Start       End   Sectors  Id  System
1: part1  boot        51       101    104448  83  Linux native
2: part2  swap       102       602   1026048  82  Linux swap
3: part3             603      1053    923648  83  Linux native
4: part4            1054      6554  11266048  83  Linux native
5: part5            6555      7555   2050048  83  Linux native
6: part6            7556      8106   1128448  83  Linux native
7: part7            8107      8682   1179648  83  Linux native
9: part8               0        50    104448   0  SGI volhdr
11: part9               0      8682  17782784   6  SGI volume
----- Bootinfo -----
Bootfile: /unix
----- Directory Entries -----
0: 2419       sector    4 size 2576660
1: 2420       sector 5037 size 2602465
2: 2421p4     sector10120 size 2534377

<codenote>I use multiple partitions in my layout for organizational purposes.  Your actual partition layout will</codenote>
<codenote>likely vary and contain more or less partitions than the example here based upon your preferences.</codenote>

<codenote>part1 == /boot</codenote>
<codenote>part2 == swap</codenote>
<codenote>part3 == /</codenote>
<codenote>part4 == /usr</codenote>
<codenote>part5 == /home</codenote>
<codenote>part6 == /var</codenote>
<codenote>part7 == /tmp</codenote>
<codenote>part8 == SGI Volume Header</codenote>
<codenote>part9 == SGI Volume</codenote>
</pre>

<note>
The <c>Bootinfo</c> section shouldn't be of much concern.  Technically, it 
holds the name of the kernel to be booted, but since this same value can also be
stored in a PROM variable, it has proven unnecessary to change.
</note>

<note>
The <c>Directory Entries</c> section is a list of file currently stored in the 
SGI Volume Header. You can put virtually any file in the volume header using 
dvhtool, however you can only have a maximum of eight files in the volume 
header and each is restructed to eight-character names.
</note>

<note>
SGI Disklabels can support up to 16 individual partitions.
</note>

</body>
</section>
</chapter>
<chapter>
<title>Filesystems &amp; Mounting</title>
<section>
<title>Choosing a Filesystem</title>
<body>

<p>
When it comes to filesystem support on Gentoo/MIPS, there are several choices:
</p>

<table>
<tr>
  <th>Filesystem</th>
  <th>Reliability</th>
  <th>Usage/Purpose</th>
  <th>Tools</th>
  <th>Notes</th>
</tr>
<tr>
  <ti>Ext2</ti>
  <ti>Stable and well tested but lacks journalling support.</ti>
  <ti>
    Useful for partitions that are not mounted too often, such as 
    <path>/boot</path>.  Not recommended  for partitions that are mounted 
    constantly, as without journaling support, a sudden power loss may cause 
    data corruption.
  </ti>
  <ti>mke2fs, e2fsck, badblocks</ti>
  <ti>
    Add the <c>noatime</c> atttribute to your fstab file for a performance gain.
    <c>noatime</c> disables recording of the last time a file was accessed.
  </ti>
</tr>
<tr>
  <ti>Ext3</ti>
  <ti>Very Stable and features journaling support.</ti>
  <ti>
    The recommended filesystem for Gentoo/MIPS.  This filesystem has been well 
    tested, and is both fast and stable.
  </ti>
  <ti>mke2fs, e2fsck, badblocks</ti>
  <ti>
    Adding the <c>noatime</c> attribute mentioned above offers the same 
    performance benefits.
  </ti>
</tr>
<tr>
  <ti>JFS</ti>
  <ti>
    JFS is considered to be stable on x86, but this is untested on MIPS. 
    <e>Use with caution.</e>
  </ti>
  <ti>
    JFS is the filesystem developed by IBM for their AIX operating system.  JFS 
    has a long history, primarily with AIX, and is somewhat new in linux, but it
    is reportedly very stable and about the same performance as ext3.
  </ti>
  <ti>jfs_mkfs, jfs_fsck, mkfs.jfs, fsck.jfs</ti>
  <ti>
    The <c>noatime</c> option mentioned above is relelvant for JFS filesystems.
  </ti>
</tr>
<tr>
  <ti>ReiserFS</ti>
  <ti>
    ReiserFS is rather stable on x86, but this is untested on MIPS.
    <e>Use with caution.</e>
  </ti>
  <ti>
    ReiserFS is a performance filesystem.  It is not as reliable as ext3 in the 
    event of an unclean shutdown, but it beats ext3 in the handling of large 
    numbers of small files, like source code files.
  </ti>
  <ti>mkreiserfs, reiserfsck, fsck.reiserfs</ti>
  <ti>
    Add the <c>notail</c> attribute to your fstab file to gain a big speed boost
    out of reiserfs.  By default, Reiserfs packs data together tightly, 
    resulting in increased diskspace storage, but at a performance tradeoff.  
    Adding the <c>noatime</c> attribute mentioned above also applies for some 
    performance gains.
  </ti>
</tr>
<tr>
  <ti>XFS</ti>
  <ti>
    XFS is considered to be stable on x86, but this is untested on MIPS.
    <e>Use with caution.</e>
  </ti>
  <ti>
    XFS is the high-performance filesystem used in SGI's IRIX operating system. 
    It is designed to handle files of medium to large size rather quickly, and 
    it scales easily.  XFS also is capable of supporting 64KB block sizes, 
    making it useful for large filesystems.  The XFS driver used in Linux is 
    also capable of mounting and reading the XFS volumes on a disk with IRIX 
    installed.
  </ti>
  <ti>mkfs.xfs, fsck.xfs, xfs_repair</ti>
  <ti>
    When creating an XFS filesystem, there are a few arguments to pass to the 
    <c>mkfs.xfs</c> command that affects things like performance and the 
    journal. The first option is <c>-d agcount=</c><comment>X</comment>, which 
    lowers the number of allocation groups.  XFS will insist on a minimum of 
    one allocation group per 4GB of disk space, so if you are making a 20GB 
    XFS partition, set <comment>X</comment> to <c>5</c>.  The second option is 
    <c>-l size=32m</c>, which increases the journal size to 32MB, which will 
    increase filesystem performance.  Lastly, the <c>noatime</c> attribute 
    also applies as it does for the previous filesystems.
  </ti>
</tr>
</table>

<impo>
As of the writing of this guide, XFS is not available in current kernel sources 
for mips.  This will be addressed in the near future, however the netboot 
images contain utilities for creating an XFS filesystem.  Until XFS is 
included in the kernel sources, it is recommended to not use XFS for a 
filesystem at this time.  Once XFS is included in the kernel sources, this 
notice will be removed.
</impo>

<pre caption="Creating a Filesystem">
# <i>mke2fs -j /dev/sda</i><comment>X</comment>
<codenote>This creates an ext3 filesystem.  If you want ext2, remove the -j parameter.</codenote>

# <i>mkreiserfs /dev/sda</i><comment>X</comment>
<codenote>This will create a ReiserFS filesystem on the selected partition.</codenote>

# <i>mkfs.jfs /dev/sda</i><comment>X</comment>
<codenote>This will create a JFS filesystem on the selected partition.</codenote>

# <i>mkfs.xfs -d agcount=<comment>X</comment> -l size=32m /dev/sda</i><comment>X</comment>
<codenote>This will create an XFS filesystem on the selected partition, with the number of allocation blocks set</codenote>
<codenote>to X (Minimum 1 per 4GB of diskspace) and a journal size of 32MB</codenote>

# <i>mkswap /dev/sda</i><comment>X</comment>
# <i>swapon /dev/sda</i><comment>X</comment>
<codenote>This will create swapspace on the selected partition and activate it.</codenote>
</pre>

<warn>
Make sure you do not create a filesystem on the two special partitions -- the 
<c>SGI Volume Header</c> and <c>SGI Volume</c>.
</warn>

</body>
</section>

<section>
<title>Mounting Disks</title>
<body>

<p>
Now that the disks have a filesystem, it's time to create mount points and mount
the root partition, then mount any remaining partitions.
</p>

<pre caption="Mounting the partitions">
# <i>mount /dev/sda<comment>X</comment> /gentoo</i>
# <i>cd /gentoo</i>
<codenote>The gentoo netboot provides a /gentoo mountpoint for your root filesystem.</codenote>

<codenote>Important: Don't forget to change directories to /gentoo before continuing.</codenote>
<codenote>Important: After changing into the mounted rootfs, create mountpoints for any additional partitions you may</codenote>
<codenote>           have made and mount them before continuing.</codenote>

<codenote>Note: When mounting filesystems, it is normal to see "error" messages from other filesystem drivers reporting</codenote>
<codenote>      that they were unable to find a valid filesystem.  This is because the kernel runs through all</codenote>
<codenote>      available filesystem drivers when attempting to mount a partition.  If a driver fails to match,</codenote>
<codenote>      then it will report an error.  Not all drivers will print errors.  This behavior can be</codenote>
<codenote>      overwritten by passing the -t &lt;fs&gt; flag to mount, where &lt;fs&gt; is the target</codenote>
<codenote>      filesystem.</codenote></pre>

</body>
</section>
</chapter>

<chapter>
<title>Choosing a Gentoo/MIPS Stage</title>
<section>
<title>Gentoo Stage Basics</title>
<body>

<p>
There are three stages to pick from when installing Gentoo/MIPS.  What stage 
you choose depends on where in the installation procedure you wish to start 
from.
</p>

<ul>
  <li>
    <b>Stage 1</b> is the bare minimum.  It contains some useful utilities, like
    <c>wget</c>, <c>nano</c>, <c>vi</c> and so on to assist with installation, 
    as well as the minimum required libraries and compiler neccessary to fully 
    build a Gentoo/MIPS system.  It is from this stage that you will 
    <e>bootstrap</e> a Gentoo/MIPS install.  This involves using the included 
    libraries and compiler to rebuild themselves using any compiler 
    optimizations you specify in <path>/etc/make.conf</path>.  This stage can 
    take anywheres from about ~17 hours on a relatively fast SGI Indy R5000 
    to a day or more, depending on the processor type and speed.
  </li>
  <li>
    <b>Stage 2</b> is similar to Stage 1, except that the system already has 
    the bootstrap phase completed.  From this stage, the <c>emerge system</c> 
    command will be executed (after downloading the portage tree), which will 
    install the basic system packages.  <c>emerge system</c> can take about the 
    same amount of time or less than a stage 1 bootstrap.  Generally, an 
    <c>emerge system</c> is quicker than the bootstrap, since a number of 
    system packages are small, but results will vary depending on the system. 
    Once this stage completes, the end result is essentially a Stage 3 system.
  </li>
  <li>
    <b>Stage 3</b> is just about a complete system.  All that is left in this 
    stage is to compile and install a kernel/modules, system logger, crontab, 
    setting localtime, and other minor things detailed later on in this guide.  
    If you want to get a system up and running in the shortest amount of time 
    possible, then Stage 3 is what you need to use.
  </li>
</ul>

</body>
</section>

<section>
<title>Unpacking a stageball, mounting proc, copying nameserver settings</title>
<body>

<p>
Once you determine which stage you want to start from, you'll want to fetch it 
from <uri>http://dev.gentoo.org/~kumba/mips/stages/</uri>.  The stage 
directories are sorted by the month that the stages were built in.
</p>

<note>
The latest full set of stages available (200308) have gcc-3.2.3, while the 
200309 stage1 has gcc-3.3.1.  There is a new tool in the works for stage 
building on Gentoo systems called <c>catalyst</c>, and once it is stabilized 
and working on MIPS, newer, more up-to-date stages will be made available.  So 
when using the available stages, keep in mind that things may be a bit out of 
date until newer stages are made available.  To avoid lengthy system updates,
it is recommended to start from a stage1.  While the bootstrap and system 
merge is time consuming, it will allow for an easier time in getting the 
system more up-to-date than starting from a stage3.
</note>

<pre caption="Unpacking the stage tarball (stageball)">
# <i>tar jvx -f stage<comment>X</comment>-mips-<comment>&lt;DATE&gt;</comment>.tar.bz2</i>
<codenote>This actually extracts the specified stage into the root partition.</codenote>
<codenote>Important: Pass the tar arguments above exactly as shown, otherwise tar will hang while waiting for input on</codenote>
<codenote>           stdin, and if ctrl+c doesn't work, you'll have to reboot to gain control of the console back</codenote>
<codenote>Important: Replace &lt;DATE&gt; with the date of the stageball you chose.</codenote>

# <i>mount /proc proc -t proc -o bind</i>
<codenote>Bind the current /proc to our chroot's proc.</codenote>

# <i>cp /etc/resolv.conf etc/</i>
<codenote>Copy our nameserver settings to our chroot.</codenote>
</pre>

</body>
</section>

<section>
<title>Chroot</title>
<body>

<p>
Now it's time to drop into the chroot environment and start constructing a 
Gentoo/MIPS system!
</p>

<pre caption="Entering the chroot environment">
# <i>chroot /gentoo bin/bash</i>
<codenote>Engage!</codenote>

# <i>source /etc/profile</i>
<codenote>Sets your shell's path so it knows where to find everything</codenote>

# <i>env-update</i>
<codenote>Does some environment things, like generating /etc/ld.so.cache, and such.</codenote>
</pre>

</body>
</section>

<section>
<title>Downloading the Portage Tree</title>
<body>

<p>
With our environment all set, it's time we synchronized our <e>Portage tree</e>!
</p>

<pre caption="Sync the Portage Tree">
# <i>emerge sync</i>
<codenote>This will connect to a Gentoo Rsync server and download the latest portage tree.</codenote>
<codenote>The size of the downloaded tree is variable.  With rsync compression, the actual download</codenote>
<codenote>is about 25+MB, but in terms of actual diskspaced used, expect around 250+MB.</codenote>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Building the System</title>
<section>
<title>Setting Optimizations</title>
<body>

<p>
Now comes time to make use of one of Gentoo's many unique abilities -- Setting 
optimizations.
</p>

<p>
First, use an editor, either <c>nano</c> or <c>vi</c>, open 
<path>/etc/make.conf</path>, and review the comments and information inside.  
The sections that you should pay most attention to are the sections detailing 
your <c>CHOST</c>, <c>CFLAGS/CXXFLAGS</c>, <c>FEATURES</c>, 
<c>ACCEPT_KEYWORDS</c>.  There are several other environment variables that 
may prove interesting to read as well, but the ones mentioned above are the 
main ones, and are discussed a little bit more later on.  The end result of 
these settings is a system fine-tuned to your hardware and your choice of 
optimizations.
</p>

<p>
Discussed in more detail below are the <e>MIPS ISA Levels</e>, which enable or 
disable certain features in the processor, depending on what ISA level the 
processor conforms to.
</p>

<pre caption="MIPS ISA Levels (GCC)">
<codenote>These are excerpted from an older GCC manual</codenote>

<codenote>Note: In GCC 3.3.x, the four flags below had their behavior changed.  Passing -mips2 is equivalent to passing</codenote>
<codenote>      -march=mips2.  However, since Gentoo still makes use of the older GCC-3.2.x series of compilers, the</codenote>
<codenote>      old format of -mipsX is still valid, and is thus referenced.  Once the transition to GCC 3.3 is fully</codenote>
<codenote>      complete, then this might change.  For now, the differences between the ISA levels is listed below.</codenote>


<i>-mips1</i>
Issue instructions from level 1 of the MIPS ISA.  This
is the default.  r3000 is the default cpu-type at this
ISA level.

<i>-mips2</i>
Issue instructions from level 2 of the MIPS ISA (branch
likely, square root instructions).  r6000 is the default
cpu-type at this ISA level.

<i>-mips3</i>
Issue instructions from level 3 of the MIPS ISA (64-bit
instructions).  r4000 is the default cpu-type at this
ISA level.

<i>-mips4</i>
Issue instructions from level 4 of the MIPS ISA
(conditional move, prefetch, enhanced FPU instructions).
r8000 is the default cpu-type at this ISA level.
</pre>

<impo>
Starting with GCC 3.3, the <c>-mcpu=</c> option has been dropped completely.  
The behaviour of <c>-mipsX</c> has also changed.  For further information, 
please see <uri>http://gcc.gnu.org/gcc-3.3/changes.html</uri> under the 
<e>New Targets and Target Specific Improvements</e> section.
</impo>

<pre caption="Gentoo/MIPS Sample Optimizations">
CHOST="<i>mips-unknown-linux-gnu</i>"
<codenote>This CHOST is what you *should* use.  This implies a MIPS Big Endian system.  It is also what will be used for</codenote>
<codenote>mips64 systems that use a 64-bit kernel and 32-bit userland.</codenote>

CFLAGS="<i>-O2 -pipe</i>"
<codenote>Bare minimum flags. Implies MIPS I ISA level (-mips1).</codenote>

CFLAGS="<i>-O2 -mips2 -mabi=32 -pipe</i>"
<codenote>MIPS II ISA level, adds a bit of a performance gain.  The -mabi=32 is required, as it sets the MIPS ABI level.</codenote>

CFLAGS="<i>-O2 -mips3 -mabi=32 -pipe</i>"
<codenote>MIPS III ISA is the max setting for R4x00-class machines.  It enables 64-bit instructions, which is why the</codenote>
<codenote>-mabi=32 option is *required*.  Otherwise, the enabling of 64-bit level instructions makes the compiler attempt</codenote>
<codenote>to generate 64-bit code.</codenote>

CFLAGS="<i>-O2 -mips4 -mabi=32 -pipe</i>"
<codenote>MIPS IV ISA is the max setting for R5000-class machines (and greater).</codenote>

CFLAGS="<i>${CFLAGS} -fomit-frame-pointer</i>"
<codenote>Makes gcc not include frame pointers when compiling code.  This makes things run a bit faster but makes debugging</codenote>
<codenote>a binary virtually impossible.</codenote>

CFLAGS="<i>${CFLAGS} -mtune=rXXXX</i>"
<codenote>Optimizes binaries for a specific processor.</codenote>
<codenote>Several options are r4000, r4400, r4600, &amp; r5000</codenote>

CXXFLAGS="<i>${CFLAGS}</i>"
<codenote>Match ${CXXFLAGS} to ${CFLAGS}.  This is recommended.</codenote>

ACCEPT_KEYWORDS="<i>~mips</i>"
<codenote>This setting will make Portage use an "unstable" series of packages instead of stable versions.  If you like</codenote>
<codenote>bleeding edge software, then you will like this setting.</codenote>

FEATURES="<i>-sandbox ccache</i>"
<codenote>Portage's sandbox works for the most part on mips, but is still known to sometimes cause problems.  As such,</codenote>
<codenote>it is better to turn off the feature for now until it can be safely relied on one day.  "ccache" tells Portage</codenote>
<codenote>to use the ccache program to cache compiled object files.  This feature is used after Stage 1 and will explained</codenote>
<codenote>in more detail later on.</codenote>
</pre>

<note>
For a full list of supported MIPS options to GCC, please visit the following 
URL: <uri>http://gcc.gnu.org/onlinedocs/gcc/MIPS-Options.html#MIPS%20Options</uri>.
</note>

</body>
</section>

<section>
<title>Stage 1</title>
<body>

<p>
If you want to start from Stage 1, be prepared to have something else to do to 
occupy your time, as Stage 1 bootstrapping will take awhile.  The author 
recommends watching the Lord of the Rings extended DVD sets.
</p>

<pre caption="Stage 1">
# <i>cd /usr/portage</i>
# <i>scripts/bootstrap.sh</i>
<codenote>This will invoke the Gentoo bootstrap script.  Bootstrap will rebuild a full-blown GCC and glibc with the settings</codenote>
<codenote>specified in make.conf.  It will also rebuild other packages like binutils, zlib, portage and baselayout.</codenote>
</pre>

<note>
If you have <e>any</e> problems or errors regarding Stage 1 bootstrapping, 
please inform the developers so we can look into solving them.
</note>

<p>
Following the successful completion of the bootsrap script, you will have a 
Stage 2 system.
</p>

</body>
</section>

<section>
<title>Stage 2</title>
<body>

<p>
A Stage 2 Gentoo install is essentially pre-bootstrapped for you.  All you need 
to do is merge the rest of the "system".  Before starting the system build, 
however, there are a few small packages of interest worth installing to further 
tweak the things Portage will install.
</p>

<pre caption="ccache">
# <i>emerge ccache</i>
<codenote>ccache is a very useful tool to have, especially on slow systems.  ccache stores object files in</codenote>
<codenote>a temporary directory, and if a program has already been compiled once, having ccache around allows</codenote>
<codenote>it to use the already cached object file, rather than re-compiling the source again.  For installing Gentoo</codenote>
<codenote>this can be very handy.</codenote>

<codenote>Once ccache is merged, edit /etc/make.conf and make sure "ccache" is in the FEATURES list.  This will allow</codenote>
<codenote>Portage to make use of ccache.  For compiling outside of portage, other steps need to be taken.  For these</codenote>
<codenote>steps, please see the ccache man page.</codenote>
</pre>

<pre caption="ufed">
# <i>emerge ufed</i>
<codenote>ufed is another useful little tool that stands for "USE Flag Editor".  Gentoo's portage system makes use of</codenote>
<codenote>"USE Flags", which depending on whether the flag is enabled or disabled, affects various ways a package will</codenote>
<codenote>install itself.  For more information on USE Flags, see the following URL:</codenote>
<codenote></codenote><uri>http://www.gentoo.org/doc/en/use-howto.xml</uri>

<codenote>Once ufed is installed, run it by typing "ufed" on the command line, and enable or disable the USE Flags you</codenote>
<codenote>want.  The changes will be saved to /etc/make.conf in the USE variable.</codenote>
</pre>

<pre caption="Stage 2">
# <i>emerge system -p</i>
<codenote>Take a close look at the list of stuff which portage installed, this is the core "system".  If something</codenote>
<codenote>is going to be installed that you don't want installed, then double check your USE Flags.</codenote>

# <i>emerge system</i>
<codenote>If you started from Stage 1, then you'll be familiar with the long wait time needed to complete this stage.  The</codenote>
<codenote>Author recommends a good RPG game, like Xenosaga to effectively kill the time.</codenote>
</pre>

<p>
Once this stage completes, you will effectively have a Stage 3 system.
</p>

</body>
</section>

<section>
<title>Stage 3</title>
<body>

<p>
Stage 3 is basically a bootstrapped system, all that is left is to <e>Install 
a Kernel</e>, <e>Configure a Timezone</e>, and <e>Final System 
Configuration</e>.  It is not as difficult as it all sounds.  If you survived 
through Stage 1 and Stage 2, then Stage 3 is a breeze.  Kernel configuration 
and compiliation is discussed in the next chapter below.  Final system 
configuration is discussed afterwards.  For now, there are two small tasks 
needed to be done before starting the kernel.  The first task will set our 
timezone, and then the installation of <c>dvhtool</c>, which is the program 
that stores kernel images in the SGI Volume Header so that they can be booted.
</p>

<pre caption="Setting the Timezone">
# <i>ln -sf /usr/share/zoneinfo/&lt;your timezone&gt; /etc/localtime</i>
<codenote>This creates a symlink from /usr/share/zoneinfo/&lt;your timezone&gt; to /etc/localtime</codenote>
</pre>

<pre caption="Installing dvhtool">
# <i>emerge dvhtool</i>
<codenote>Up to eight kernels may exist in the volume header at the same time.  Images can only have names up to eight</codenote>
<codenote>charactersin length.</codenote>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Compiling a Kernel</title>
<section>
<title>Choosing Sources</title>
<body>

<pre caption="Installing Kernel Sources">
# <i>emerge mips-sources</i>
<codenote>mips-sources are for stable kernel releases.</codenote>

<comment>or</comment>

# <i>emerge mips-prepatch-sources</i>
<codenote>mips-prepatch-sources are for -pre or -rc releases of stable kernel releases.</codenote>


# <i>cd /usr/src/linux-&lt;linux version&gt;-&lt;CVS Date&gt;</i>
# <i>make menuconfig</i>
<codenote>&lt;CVS Date&gt; is the date of when the kernel sources ebuild was downloaded off of linux-mips.org's</codenote>
<codenote>anoncvs server and turned into an ebuild.  New sources are usually made once a month if possible.</codenote>
</pre>

<note>
Only 2.4.x kernels work on IP22 systems at the moment.  2.6 kernels have an 
issue regarding the serial driver that can be problematic, rendering the 
system unable to boot.  Using strictly the newport console and excluding the 
serial driver may allow a 2.6 kernel to boot, but this is untested, and 
therefore not covered here.
</note>

</body>
</section>

<section>
<title>Kernel menuconfig</title>
<body>

<pre caption="Basic 2.4.2x Kernel Configuration">
Code maturity level options  --->
  [<i>*</i>] Prompt for development and/or incomplete code/drivers


Loadable module support  --->
  [<i>*</i>] Enable loadable module support
  [<i>*</i>]   Kernel module loader
  <codenote>If you intend to use modules, you will need this.</codenote>


Machine selection  --->
  [<i>*</i>] Support for SGI IP22 (Indy/Indigo2)


CPU selection  --->
  (R4x00) CPU type  <codenote>For R4000, R4400, or R4600 CPUs only.</codenote>
  (R5000) CPU type  <codenote>For R5000 Systems only.</codenote>


General setup  --->
  [<i>*</i>] Include IRIX binary compatibility
  <codenote>If you want to run IRIX Binaries, check this off.</codenote>

  [<i>*</i>] Indigo-2 (IP22) EISA bus support
  [<i>*</i>]     ISA bus support
  <codenote>If you have ISA/EISA Cards you want to use in the SGI Indigo2, check these off.</codenote>

  [<i>*</i>] Networking support
  [<i>*</i>] System V IPC
  [<i>*</i>] BSD Process Accounting
  [<i>*</i>] Sysctl support
  &lt;<i>*</i>&gt; Kernel support for ELF binaries


Parallel port support  --->
  &lt;<i>*</i>&gt; Parallel port support
  &lt;<i>*</i>&gt;   SGI Indy/Indigo2 hardware (EXPERIMENTAL) (NEW)
  [<i>*</i>]   IEEE 1284 transfer modes (NEW)
  <codenote>If you wish to use the SGI Parallel Port, check these off.</codenote>
  <codenote>An ISA Parallel Port card has been tested on Indigo2s.  If this is what you wish to use, then use</codenote>
  <codenote>the "PC-style hardware" option instead.</codenote>


Plug and Play configuration  --->
  &lt;<i>*</i>&gt; Plug and Play support
  &lt;<i>*</i>&gt;   ISA Plug and Play support
  <codenote>You'll want this if you intend to use the Indigo2's ISA Slots.</codenote>


Block devices  --->
  &lt;<i>*</i>&gt; Loopback device support
  <codenote>Useful to have in some cases, otherwise, it's safe to exclude.</codenote>


Networking options  --->
  &lt;<i>*</i>&gt; Packet socket
  [<i>*</i>]   Packet socket: mmapped IO
  &lt;<i>*</i>&gt; Netlink device emulation
  [<i>*</i>] Socket Filtering		<codenote>Some programs, like dhcpd need this option, otherwise it's safe to exclude.</codenote>
  &lt;<i>*</i>&gt; Unix domain sockets
  [<i>*</i>] TCP/IP networking


SCSI support  --->
  &lt;<i>*</i>&gt; SCSI support
  --- SCSI support type (disk, tape, CD-ROM)
  &lt;<i>*</i>&gt;   SCSI disk support
  &lt;<i>*</i>&gt;   SCSI tape support		<codenote>If you have any scsi tape devices...</codenote>
  &lt;<i>*</i>&gt;   SCSI CD-ROM support
  &lt;<i>*</i>&gt;   SCSI generic support	<codenote>If you have a scsi CD Burner, you'll need this. (Untested)</codenote>

  [ ]   Verbose SCSI error reporting (kernel size +=12K)
  <codenote>Unless you're trying to debug a scsi problem, then this can be disabled.</codenote>

SCSI low-level drivers  --->
  &lt;<i>*</i>&gt; SGI WD93C93 SCSI Driver


Network device support  --->
  Ethernet (10 or 100Mbit)  --->
    [<i>*</i>] Ethernet (10 or 100Mbit)
    [<i>*</i>]   SGI Seeq ethernet controller support


Character devices  --->
  [<i>*</i>] Virtual terminal
  [<i>*</i>]   Support for console on virtual terminal (NEW)
  <codenote>Check this off if you have an XL Graphics Card (Newport) and a monitor.</codenote>

  [<i>*</i>] Non-standard serial port support
  [<i>*</i>]   SGI Zilog85C30 serial support
  <codenote>For Serial Console Support.  (Serial Console support is automatically assumed)</codenote>

  [<i>*</i>] Unix98 PTY support

Mice  --->
  &lt;<i>*</i>&gt; Mouse Support (not serial and bus mice)
  [<i>*</i>]   PS/2 mouse (aka "auxiliary device") support (NEW)
  <codenote>If you want to use a PS/2 mouse.</codenote>

Watchdog Cards  --->
  [<i>*</i>] Watchdog Timer Support
  &lt;<i>*</i>&gt;   Indy/I2 Hardware Watchdog

  [<i>*</i>] SGI DS1286 RTC support


File systems  --->
  &lt;<i>*</i>&gt; Ext3 journalling file system support

  [<i>*</i>] Virtual memory file system support (former shm fs)
  <codenote>Gentoo requires this currently, also known as "tmpfs" and provides /dev/shm.</codenote>

  &lt;<i>*</i>&gt; ISO 9660 CDROM file system support
  [<i>*</i>]   Microsoft Joliet CDROM extensions
  [<i>*</i>]   Transparent decompression extension
  <codenote>In case you have a CD-ROM drive, you'll want these.</codenote>

  [<i>*</i>] /proc file system support

  [<i>*</i>] /dev file system support (EXPERIMENTAL)
  [<i>*</i>]   Automatically mount at boot
  <codenote>Gentoo by default uses devfs in 2.4 kernels, so you'll need this and to disable /dev/pts support below</codenote>
  <codenote></codenote><comment>If you do not wish to use devfs, then you will need to pass <b>gentoo=nodevfs</b> at boottime.</comment>

  &lt;<i>*</i>&gt; Second extended fs support

  [ ] /dev/pts file system for Unix98 PTYs
  <codenote>Uncheck this if you plan on using devfs</codenote>

Network File Systems  --->
  &lt;<i>*</i>&gt; NFS file system support
  [<i>*</i>]   Provide NFSv3 client support
  <codenote>If you need to NFS Mount anything, you will need this.</codenote>

  &lt;<i>*</i>&gt; SMB file system support (to mount Windows shares etc.)
  <codenote>If you plan on mounting shared Windows drives or Samba mounts, you'll need this.</codenote>

Partition Types  --->
  [<i>*</i>] Advanced partition selection
  [<i>*</i>]   SGI partition support

Native Language Support  --->
  <codenote>This only appears if you enabled "SMB file system support".  Select your desired</codenote>
  <codenote>Codepage and NLS options here.</codenote>


Console drivers  --->
  &lt;<i>*</i>&gt; SGI Newport Console support (NEW)
  <codenote>If you have an SGI Newport (XL Gfx) Card and want to use it, then you'll want this.</codenote>


Sound  --->
  &lt;<i>*</i>&gt; Sound card support
  &lt;<i>*</i>&gt;   SGI HAL2 sound (EXPERIMENTAL)
  <codenote>If you want sound support on Indy/Indigo2, then check this option off.</codenote>


Kernel hacking  --->
  [<i>*</i>] Are you using a crosscompiler
  <codenote></codenote><comment><b>ONLY</b> use this if you are building on a different architecture.  The art of building a</comment>
  <codenote>cross-compiler is not discussed in this guide.  You are essentially on your own in that</codenote>
  <codenote>adventure.</codenote>

[<c>*</c>] Magic SysRq key
  <codenote>Always useful to have in an emergency.</codenote>


Library routines  --->
  &lt;<i>*</i>&gt; zlib compression support
  &lt;<i>*</i>&gt; zlib decompression support
  <codenote>Both of these options are not necessary, but may be useful.  They don't always appear</codenote>
  <codenote>together either.  Oftentimes, only one is displayed.</codenote>
</pre>

<note>
The above configuration is a basic kernel config for a Gentoo/MIPS kernel for 
SGI Indigo2/Indy Machines.  You may want to further tweak settings if you have 
additional devices.  The only settings shown are those that are known to create 
a functional kernel.  No items above are shown as modules for simplicity's 
sake, so feel free to modularize whatever aspects of the kernel as desired. 
Options not needed are not displayed here.
</note>

</body>
</section>

<section>
<title>Compiling &amp; Installing the Kernel</title>
<body>

<pre caption="Compiling the Kernel">
# <i>make dep</i>
<codenote>Generate dependency information.</codenote>

# <i>make vmlinux</i>
<codenote>Compile the actual kernel.  This creates an ELF Format Kernel.</codenote>

# <i>make vmlinux.ecoff</i>
<codenote>Optional: This will create an ECOFF kernel.  ECOFF is an older format that is still recognizable by the</codenote>
<codenote>          SGI Proms in Indys &amp; Indigo2's.  It is not necessary to create an ECOFF kernel, but it</codenote>
<codenote>          could prove useful in the event your machine has an old PROM version that cannot understand</codenote>
<codenote>          ELF kernels.</codenote>

# <i>make modules</i>
# <i>make modules_install</i>
<codenote>Compile and Install kernel modules.</codenote></pre>

<pre caption="Installing the Kernel"># <c>cp vmlinux /boot/&lt;whatever you want to name it&gt;</c>
<codenote>Copy the kernel to /boot, and name it whatever we want.  Regarding</codenote>
<codenote>Kernel names, it is advised you keep the name to eight characters or less, as</codenote>
<codenote>the volume header only allows names up to eight characters.  Any additional</codenote>
<codenote>characters will be truncated.</codenote>

# <i>cp arch/mips/boot/vmlinux.ecoff /boot/&lt;whatever&gt;.e</i>
<codenote>Optional: Copy the ECOFF kernel to /boot.  The ".e" extension is made up simply to distinguish which kernel is</codenote>
<codenote>          which should you chose to compile both formats.</codenote>

# <i>cp System.map /boot/System.map-&lt;version&gt;</i>
<codenote>Copy the System.map file, and name it to something that easily identifies it with the current kernel you are running.</codenote>

# <i>cd /boot</i>

# <i>ln -sf System.map-&lt;version&gt; System.map</i>
<codenote>Symlink the new version of our System Map to "System.map".</codenote>

# <i>dvhtool --unix-to-vh &lt;name of kernel to copy&gt; &lt;kernel name in volume header&gt;</i>
<codenote>dvhtool is the utility that will copy a kernel into the SGI Volume Header.  The "--unix-to-vh" </codenote>
<codenote>argument requires two parameters:</codenote>
<codenote></codenote>	<i>&lt;name of kernel to copy&gt;</i><comment> - The name of the kernel in /boot we wish to copy.</comment>
<codenote></codenote>	<i>&lt;kernel name in volume header&gt;</i><comment> - The name the kernel will have in the volume header.</comment>
<codenote></codenote>
<codenote>It is recommended to keep the filenames of kernels in /boot the same as their copies in the volume header to</codenote>
<codenote>easily identify which kernel is which. </codenote>

<codenote></codenote>
<codenote>If you wish to see all entries in the volume header, call dvhtool with the "--print-volume-directory" argument.</codenote>
<codenote>Further options available to dvhtool can be viewed by passing "--help" to dvhtool.</codenote>
</pre>

<impo>
<c>dvhtool</c> assumes <path>/dev/sda</path> by default to be the device 
containing the SGI Volume Header.  If this is not the case (such as IRIX is 
installed on <path>/dev/sda</path> and Gentoo/MIPS on <path>/dev/sdb</path>), 
then use <c>dvhtool</c> with the <c>-d &lt;device&gt;</c> option to specify 
the device for it to look on.
</impo>

<note>
<c>dvhtool</c> doesn't really care what you tell it to put into the Volume 
Header.  It can store any kind of file in the Volume Header, however, it is 
best to store only kernels, as only eight entries, no matter the size of the 
volume header, can be stored.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Final System Configuration</title>
<section>
<body>

<p>
Following the kernel, there are only a few more steps left in the installation:
</p>

<ol>
  <li>Install a system logger</li>
  <li>Install a crontab</li>
  <li>Modify /etc/fstab</li>
  <li>Set a root password</li>
  <li>Add a normal user</li>
  <li>Set the machine name</li>
  <li>Modify /etc/hosts</li>
  <li>Setup kernel modules</li>
  <li>Network Configuration</li>
  <li>Configure basic settings</li>
  <li>Chroot cleanup and reboot</li>
  <li>Tweak PROM variables</li>
</ol>

</body>
</section>

<section>
<title>System Logger</title>
<body>

<p>
For System Logger, you have <c>app-admin/sysklogd</c>, 
<c>app-admin/syslog-ng</c>, <c>app-admin/metalog</c>, and 
<c>app-admin/msyslog</c>.
</p>

<pre caption="Installing a System Logger">
# <i>emerge app-admin/sysklogd</i>
# <i>rc-update add sysklogd default</i>

<comment>or</comment>

# <i>emerge app-admin/syslog-ng</i>
# <i>rc-update add syslog-ng default</i>

<comment>or</comment>

# <i>emerge app-admin/metalog</i>
# <i>rc-update add metalog default</i>

<comment>or</comment>

# <i>emerge app-admin/msyslog</i>
# <i>rc-update add msyslog default</i>
</pre>

<impo>
In the case of syslog-ng you need to create 
<path>/etc/syslog-ng/syslog-ng.conf</path>. See 
<path>/etc/syslog-ng/syslog-ng.conf.sample</path> for a sample configuration 
file.
</impo>

<impo>
Metalog flushes output to the disk in blocks, so messages aren't immediately 
recorded into the system logs. If you are trying to debug a daemon, this 
performance-enhancing behavior is less than helpful. When your Gentoo Linux 
system is up and running, you can send metalog a <c>USR1</c> signal to 
temporarily turn off this message buffering (meaning that <c>tail -f 
/var/log/everything/current</c> will now work in real time, as expected), and 
a <c>USR2</c> signal to turn buffering back on again. If you want to disable 
buffering permanently, you can change <c>METALOG_OPTS="-B"</c> to 
<c>METALOG_OPTS="-B -s"</c> in <path>/etc/conf.d/metalog</path>.
</impo>

</body>
</section>

<section>
<title>Crontab</title>
<body>

<p>
Available choices for a crontab are as follows: <c>sys-apps/dcron</c>, 
<c>emerge sys-apps/fcron</c>, and <c>sys-apps/vcron</c>.
</p>

<pre caption="Installing a Crontab">
# <i>emerge sys-apps/dcron</i>
# <i>crontab /etc/crontab</i>
# <i>rc-update add dcron default</i>

<comment>or</comment>

# <i>emerge sys-apps/fcron</i>
# <i>crontab /etc/crontab</i>
# <i>rc-update add fcron default</i>

<comment>or</comment>

# <i>emerge sys-apps/vcron</i>
# <i>rc-update add vcron default</i>
<codenote>vcron doesn't require executing "crontab /etc/crontab" following its install.</codenote>
</pre>

</body>
</section>

<section>
<title>Modifying /etc/fstab</title>
<body>

<p>
<path>/etc/fstab</path> is the file that tells the system what devices are 
drives, where to mount them, and what to mount them as.  Below is a sample 
fstab, which will require editing to work properly.
</p>

<pre caption="Sample /etc/fstab">
<comment># /etc/fstab: static file system information.
# &lt;fs&gt;			&lt;mountpoint&gt;		&lt;type&gt;		&lt;opts&gt;			&lt;dump/pass&gt;</comment>


<comment>#// Main Filesystems</comment>
/dev/<i>BOOT</i>		/boot			ext3		noatime			1 1
/dev/<i>ROOT</i>		/			ext3		noatime			0 0


<comment>#// Swap Drive(s)</comment>
/dev/<i>SWAP</i>		none			swap		sw			0 0


<comment>#// External/Removable Filesystems</comment>
/dev/cdroms/cdrom0	/mnt/cdrom		iso9660		noauto,ro,user		0 0
/dev/fd0		/mnt/floppy		auto		noauto,ro,user		0 0


<comment>#// Miscellaneous Filesystems</comment>
proc			/proc			proc		defaults		0 0
tmpfs			/dev/shm		tmpfs		defaults		0 0
</pre>

<impo>
Be sure to replace <c>/dev/BOOT</c>, <c>/dev/ROOT</c>, <c>/dev/SWAP</c> with 
the correct block device names.  Otherwise, your system will fail to boot.  
Do not forget to add devices and mountpoints for any additional partitions you 
may have created along side these as well.
</impo>

<note>
Other options exist aside from <c>noatime</c> that can help increase security.  
For more information on these options, read the <uri 
link="http://www.gentoo.org/doc/en/gentoo-security.xml">Gentoo Linux Security 
Guide</uri>.
</note>

</body>
</section>

<section>
<title>Root Password</title>
<body>

<p>
As usual, you will want to set a root password.
</p>

<pre caption="Setting a Root Password">
# <i>passwd</i>
</pre>

<pre caption="Allow root to login on the Serial Console">
# <i>echo "ttyS0" >> /etc/securetty</i>
<codenote>This adds the first serial port to the /etc/securetty file so that root is allowed to login via the</codenote>
<codenote>serial console.</codenote>
</pre>

</body>
</section>

<section>
<title>Add a normal user</title>
<body>

<p>
Generally, it is unwise to always use the root account.  The root account 
should only be used for adminiatrative purposes, while a normal user should be 
used for everything else.
</p>

<pre caption="Adding a normal user/group">
# <i>groupadd &lt;group&gt;</i>
# <i>useradd -g &lt;group&gt; -d &lt;home folder&gt; -s &lt;shell&gt; &lt;username&gt;</i>
<codenote>This adds a group for the new user, and then adds the user itself.  Most users are in their own groups, but user setups</codenote> 
<codenote>can differ from system to system.  For more information on these commands, please refer to the man pages</codenote>

# <i>passwd &lt;username&gt;</i>
New UNIX password:
Retype new UNIX password:
<codenote>This will set a password for the new user.  The username must be supplied to passwd otherwise passwd attempts to change</codenote>
<codenote>root's passwd.  Note: the password you assign to this iser will not be echoed to the screen.</codenote>

# <i>usermod -G wheel &lt;username&gt;</i>
<codenote>If you plan on using the root account from the normal user, then you need to add this user to the "wheel" group.  Only</codenote>
<codenote>users that are in the wheel group can use commands like "su" and "sudo" to access the root account.</codenote>
</pre>

</body>
</section>

<section>
<title>Machine Hostname &amp; domain name</title>
<body>

<p>
The name of your machine is comprised of two parts.  First, there is the 
hostname, which is stored in <path>/etc/hostname</path>, and then the domain 
name, which is stored in <path>/etc/dnsdomainname</path>.
</p>

<pre caption="Setting the hostname">
# <i>echo "mymachine" > /etc/hostname</i>
# <i>echo "mydomain.tld" > /etc/dnsdomainname</i>
<codenote>Replace "mymachine" with the name of your machine, and "mydomain.tld" with the fully qualified domain name (FQDN)</codenote>
<codenote>of the machine.  The ".tld" is the top-level domain, like ".net", ".com", ".co.uk", etc...</codenote>
</pre>

</body>
</section>

<section>
<title>Modifying /etc/hosts</title>
<body>

<p>
<path>/etc/hosts</path> is a simple text file that contains a list of IP 
Addresses and hostnames for machines not found in the nameservers.  It's 
useful for resolving the names of machines on a local network.
</p>

<pre caption="/etc/hosts">
<comment># "localhost" always refers to the machine itself</comment>
127.0.0.1	localhost

&lt;IP Address&gt;	mymachine1.mydomain.tld			mymachine1
&lt;IP Address&gt;	mymachine2.mydomain.tld			mymachine2
<comment>...</comment>
</pre>

<note>
If you are on a DHCP-based network, it might be helpful to set localhost to your
machine's actual hostname. This will help other programs in name resolution.
</note>

</body>
</section>

<section>
<title>Setting up kernel modules</title>
<body>

<p>
If there are any kernel modules that need to be automatically loaded when the 
system starts, they need to be added to the file 
<path>/etc/modules.autoload.d/kernel-2.4</path>.
</p>

<pre caption="/etc/modules.autoload.d/kernel-*">
<comment># /etc/modules.autoload.d/kernel-2.4:  kernel modules to load when system boots.
# $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/gentoo-mips-install.xml,v 1.3 2004/01/09 19:34:36 swift Exp $
#
# Note that this file is for 2.4 kernels.  If you need different modules
# for a 2.5 kernel, you can create /etc/modules.autoload.d/kernel-2.5
#
# Add the names of modules that you'd like to load when the system
# starts into this file, one per line.  Comments begin with # and
# are ignored.  Read man modules.autoload for additional details.

# For example:
# 3c59x</comment>
</pre>

<note>
<path>/etc/modules.autoload.d/kernel-2.4</path> only loads modules for 2.4 
kernels.  When 2.6 kernels become stables on mips, modules will be added to a 
<path>/etc/modules.autoload.d/kernel-2.6</path> file instead.
</note>

</body>
</section>

<section>
<title>Network Configuration</title>
<body>

<p>
Next, you will want to edit <path>/etc/conf.d/net</path> to setup networking 
parameters for each networking device you have.
</p>

<pre caption="/etc/conf.d/net">
iface_eth0="192.168.1.8 broadcast 192.168.1.255 netmask 255.255.255.0"
<codenote>Edit the "iface_eth0" line to set the necessary parameters for the eth0 interface.  If you happen to have a second</codenote>
<codenote>interface called eth1, then also edit "iface_eth1" to set the necessary parameters as well.</codenote>

iface_eth0="dhcp"
dhcpcd_eth0="..."
<codenote>If you use DHCP instead of statically assigning addresses, then set "iface_eth0" to "dhcp" instead.  Pass any necessary</codenote>
<codenote>options to dhcpcd via "dhcpcd_eth0".</codenote>
</pre>

<pre caption="Starting network on boot">
# <i>rc-update add net.eth0 default</i>
<codenote>This ensures the first networking device (eth0) is initialized on bootup.</codenote>
</pre>

<pre caption="Multiple Networking Devices">
# <i>cd /etc/init.d</i>
# <i>cp net.eth0 net.eth<comment>X</comment></i>
# <i>rc-update add net.eth<comment>X</comment> default</i>
<codenote>Where "X" is for each additional networking device in your machine</codenote>
</pre>

</body>
</section>

<section>
<title>Configure Basic Settings</title>
<body>

<p>
Almost there...  One of the last things to do is to configure you basic 
settings, specifically by editing <path>/etc/rc.conf</path>.
</p>

<pre caption="/etc/rc.conf">
# <i>nano -w /etc/rc.conf</i>
<codenote>Follow the directions in the file to configure the basic settings. All users will</codenote>
<codenote>want to make sure that "CLOCK" is set to his/her liking. International keyboard users will</codenote>
<codenote>want to set the "KEYMAP"  variable (browse "/usr/share/keymaps" to see the various</codenote>
<codenote>possibilities).</codenote>
</pre>

</body>
</section>

<section>
<title>Cleanup and Rebooting</title>
<body>

<pre caption="Unmounting">
# <i>exit</i>
<codenote>Exit the chroot so we can get back to the netboot shell</codenote>

# <i>umount &lt;mount point&gt;</i>
# <i>umount proc</i>
<codenote>Unmount any partitions.</codenote>

# <i>cd /</i>
# <i>umount /gentoo</i>
<codenote>If the above command does not work (device is busy), then try the example below.</codenote>

# <i>mount -o remount,ro /dev/sda3 /</i>
<codenote>This remounts our root device as read-only in the event we can't just straight unmount it.</codenote>

# <i>poweroff</i>
<codenote>Best to fully shut the machine down.  Sometimes "reboot" just attempts to netboot again instead of</codenote>
<codenote>returning to the Prom Monitor.</codenote>
</pre>

<pre caption="Booting for the first time">
Running power-on diagnostics...





System Maintenance Menu

1) Start System
2) Install System Software
3) Run Diagnostics
4) Recover System
5) Enter Command Monitor

Option? <i>5</i>
Command Monitor.  Type "exit" to return to the menu.
&gt;&gt; <i>boot -f &lt;kernel name&gt;</i>
<codenote>The kernel images booted by the PROM are stored in the volume header.  Specify the image you copied into the volume</codenote>
<codenote>header with dvhtool.</codenote>
</pre>

<p>
Provided nothing errors out in the bootup sequence, you should be dropped off 
at a login prompt.  From here, you can login as root or the normal user you 
added.  It is best to check around the system, make sure things work and 
verify nothing went wrong during the install.  If any errors are encounted, 
then go back and double check any settings that may have been missed.  For 
configuring the machine to automatically boot a specific kernel, see the next 
section below.
</p>

</body>
</section>

<section>
<title>Automatically booting the machine</title>
<body>

<pre caption="Making the system boot automatically">
Running power-on diagnostics...





System Maintenance Menu

1) Start System
2) Install System Software
3) Run Diagnostics
4) Recover System
5) Enter Command Monitor

Option? <i>5</i>
Command Monitor.  Type "exit" to return to the menu.
&gt;&gt; <i>setenv OSLoadPartition &lt;root drive&gt;</i>
<codenote>This variable is read by the kernel to determine the root device.  If your root is on sda3, then use /dev/sda3.</codenote>

&gt;&gt; <i>setenv OSLoader &lt;kernel name&gt;</i>
&gt;&gt; <i>setenv OSLoadFilename &lt;kernel name&gt;</i>
<codenote>These variables set the kernel name to load from the Volume Header.  To see a list of available kernels, type "ls".</codenote>

&gt;&gt; <i>setenv OSLoadOptions &lt;kernel parameters&gt;</i>
<codenote>This variable will pass command line options to the kernel.</codenote>

&gt;&gt; <i>setenv SystemPartition scsi(0)disk(1)rdisk(0)partition(8)</i>
<codenote>This tells the PROM Monitor that the location of the Volume Header is the 8th partition on the first disk.  If the</codenote>
<codenote>Volume Header is on a different drive than the first disk, then change the "disc(X)" value to the proper disc.</codenote>

&gt;&gt; <i>setenv AutoLoad Yes</i>
<codenote>This enables autobooting, and will not give you a chance to access the PROM Monitor at bootup unless you press</codenote>
<codenote>the ESC key when prompted by the machine.</codenote>

&gt;&gt; <i>setenv TimeZone EST5EDT</i>
<codenote>This sets the timezone of the machine to Eastern Time.  The format is Standard Time abbreviation, offset from</codenote>
<codenote>GMT, and Daylight Savings Time abbreviation.</codenote>

&gt;&gt; <i>setenv console d1</i>
<codenote>Set this if you plan on using the serial console instead of a graphics adapter.  Otherwise, use "g" instead of d1.</codenote>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Installation Complete!</title>
<section>
<title>Getting Involved with Gentoo/MIPS</title>
<body>

<p>
Since Gentoo/MIPS is an ongoing effort, anyone who is interested in helping out 
is greatly welcomed.  Right now, we know Gentoo/MIPS runs well on a limited 
selection of SGI Hardware, as this document illustrates.  However, the MIPS 
architectures encompasses many kinds of devices.  Everything from video game 
consoles (N64, PSX, PS2), to SGI Machines (Big-Endian), to DEC Machines 
(Little-Endian), to various PDAs (Embedded MIPS) all run on some version of 
the MIPS architecture.  Whether or not Gentoo/MIPS will run on all of these
devices is really unknown at this point.  Linux/MIPS development in general 
is still ongoing, and each day brings new things to this architecture, and 
that development will most likely be the deciding factor in future expansion 
of Gentoo/MIPS.
</p>

<p>
If you wish to get involved in helping the Gentoo/MIPS effort, feel free to drop
into our IRC Channel, <c>#gentoo-mips</c> on the Freenode IRC Network at 
<c>irc.freenode.net</c>.  You may also want to join <c>#mipslinux</c> on 
Freenode as well for general Linux/MIPS development and questions.
</p>

</body>
</section>
</chapter>
</guide>
