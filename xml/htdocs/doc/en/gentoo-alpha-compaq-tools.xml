<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/Attic/gentoo-alpha-compaq-tools.xml,v 1.6 2004/02/19 14:52:46 swift Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/gentoo-alpha-compaq-tools.xml">
<title>Guide to Compaq-Tools on Gentoo Alpha</title>
<author title="Gentoo Alpha Developer"> <mail link="taviso@gentoo.org">Tavis Ormandy</mail></author>
<author title="Editor"><mail link="peesh@gentoo.org">Jorge Paulo</mail></author>

<abstract>This guide is an introduction to the free Compaq Tools for Gentoo Alpha users.</abstract>

<license/>

<version>1.0.1</version>
<date>September 30, 2003</date>
<chapter>
<title>Introduction</title>
<section>
<title>Licensing Considerations</title>
<body>
<p>
Before you read any further through this guide, you should check your eligibility to use the Compaq Tools.  If you need to use anything more than the runtime libraries <i>dev-libs/libots</i> and <i>dev-libs/libcpml</i> you need to qualify as an academic user or an enthusiast.
</p>
<p>
<pre caption="HP Educational and Enthusiast License">
The Software may be used solely for your individual and personal "enthusiast"
purposes or personal education and study. It may not be used for any
commercial, business or institutional purpose, whether "for profit" or "not
for profit." Any work performed or produced as a result of the use of this
Software cannot be performed or produced for the benefit of other parties for
a fee, compensation or any other reimbursement or remuneration.
</pre>
</p>
<p>
<note>If you don't qualify and would still like to use the software, you can purchase a <uri link="http://h18000.www1.hp.com/products/software/alpha-tools/purchase.html">commercial license</uri> from HP, which will give you more flexibility in how you use the toolkit.</note>
</p>
<p>
If you do qualify for a free license, you need to register with HP using the form located at <uri>http://h18000.www1.hp.com/products/software/alpha-tools/ee-license.html</uri>. Once your request has been processed, HP will send you a license key that can be used to decrypt and install the Compaq Compilers.
</p>
</body>
</section>
<section>
<title>Compaq Tools Overview</title>
<body>
<p>
If you're familiar with PC optimization, you've probably heard of <uri link="http://www.intel.com/software/products/compilers/clin/">icc</uri>, Intel's optimizing compiler for their pentium processors. The Alpha user's equivalent is <uri link="http://www.support.compaq.com/alpha-tools/">The Professional Linux Developers Tools</uri>, a set of high performance libraries, compilers and utilities specifically tuned for the Alpha platform, made freely available to Alpha enthusiasts and for educational use. Experimenting with using the Libraries and Compilers in portage compiles is an effective way of improving the performance of your Gentoo Alpha system.
</p>
<p>The following tools are available to Gentoo users:</p>
<p>
<table>
<tr>
<th>Utility</th>
<th>Description</th>
<th>Portage Name</th>
</tr>
<tr>
<ti>libots</ti>
<ti>Compiled code support, a dependency required for using the toolkit.</ti>
<ti>dev-libs/libots</ti>
</tr>
<tr>
<ti><uri link="http://www.support.compaq.com/alpha-tools/software.html#cpml">libcpml</uri></ti>
<ti>Compaq Portable Math Library, a high performance maths library for Alpha users that can be used to improve maths performance in applications.</ti>
<ti>dev-libs/libcpml</ti>
</tr>
<tr>
<ti><uri link="http://www.support.compaq.com/alpha-tools/software.html#c">ccc</uri></ti>
<ti>Compaq C Compiler, highly optimized and tuned for the Alpha platform, it contains a highly optimizing code generator specifically designed to exploit the 64-bit Alpha architecture. It is particularly well-suited and contains extended support for systems programming, parallel programming, and mathematical computing.</ti>
<ti>dev-lang/ccc</ti>
</tr>
<tr>
<ti><uri link="http://www.support.compaq.com/alpha-tools/software.html#cxx">cxx</uri></ti>
<ti>Compaq's C++ compiler, tuned specifically for the Alpha platform, offers the same optimizing code generator from Compaq C to C++ programmers.</ti>
<ti>dev-lang/cxx</ti>
</tr>
<tr>
<ti><uri link="http://www.support.compaq.com/alpha-tools/software.html#ladebug">ladebug</uri></ti>
<ti>Compaq's famous debugger for Tru64, ported to Alpha Linux, contains extended support for applications compiled with the compaq c compilers.</ti>
<ti>dev-util/ladebug</ti>
</tr>
<tr>
<ti><uri link="http://www.support.compaq.com/alpha-tools/software.html#cxml">libcxml</uri></ti>
<ti>Compaq's eXtended Math Library, high performance maths library for fortran, c and c++ programmers.</ti>
<ti>dev-libs/libcxml</ti>
</tr>
</table></p>
<p><note>As of this writing, some of the Compaq Tools are still marked ~alpha  This means that although they have been tested and seem to work, they have not undergone extensive testing and we cannot be certain they are totally stable. If you want to install some of these applications, you might need to prefix the commands ACCEPT_KEYWORDS="~alpha" to the <path>emerge</path> command.</note>
</p><p>
<note>If you have any problems with ccc or cxx, or any of the Compaq Tools, please enter a bug into the <uri link="http://bugs.gentoo.org/">gentoo bugzilla</uri> and assign it to me -- <uri link="mailto:taviso@gentoo.org">taviso@gentoo.org</uri></note></p>
</body>
</section>
</chapter>
<chapter>
<title>Installing the Developers Tools</title>
<section>
<title>Runtime Libraries</title>
<body>
<p>
The first step toward installing the Developer Tools is getting the runtime libraries. Due to license restrictions, Gentoo cannot distribute the RPM's and you must download them from Compaq.
</p>
<p>
<uri>ftp://ftp.compaq.com/pub/products/linuxdevtools/latest/downloads.html</uri>
</p>
<p>
Download the libots and libcpml rpms, and then place them into your distfiles directory.</p>

<note>If you have an ev6 or higher processor, you should download the ev6 optimized libcpml rpm, this will allow you to exploit the features of your newer processor.  You should also add "ev6" to your USE in /etc/make.conf so that the ebuild will know to use the optimized rpm.  If you don't know which processor revision is in your machine, use the command below to identify it</note>

<p>
<pre caption="Getting the Runtime Libraries">
# uname -p   # check your processor revision
EV56
# mv libots-2.2.7-2.alpha.rpm cpml_ev?-5.2.0-1.alpha.rpm /usr/portage/distfiles
</pre>
</p>
<p>
Now the rpms are in your distfiles directory, portage will be able to find them and install them onto your system. Use the following code to emerge the libraries.
</p>
<p>
<pre caption="Installing Required Libraries">
# emerge -pv dev-libs/libots dev-libs/libcpml # check everything looks okay
# emerge dev-libs/libots dev-libs/libcpml
</pre>
</p>
<p>
Now the libraries are installed in your system and you are ready to install the compilers and utilities.
</p>
</body>
</section>
<section>
<title>Installing the Compilers</title>
<body>
<p>
If you haven't already registered for an enthusiast or academic license with HP, now would be a good time.  It seems to take about 24 hours for the license to be issued after you fill in the form on the web.
</p>
<p>
<uri>http://h18000.www1.hp.com/products/software/alpha-tools/ee-license.html</uri>
</p>
<warn>You will be asked to enter your details and email address.  The email address must be valid as you will be emailed a license key that can be used to unlock the compilers.</warn>
<note>
You will also be asked to explain why you qualify for a free license, eg "Home Alpha enthusiast" or "For academic use at XYZ college."
 </note>
 <p>
 When your license is issued, your notification email will contain the license key.  Use it in the command below to install the ccc and cxx compilers.</p>
 <pre caption="Installing Compaq C">
# emerge -pv dev-lang/ccc  # check everything looks okay
# CCC_LICENSE_KEY=0123456789 emerge dev-lang/ccc
# ebuild /var/db/pkg/dev-lang/ccc-6.5.9.001.ebuild config
</pre>
<note>Remember to substitute 0123456789 with the license key emailed to you</note>
<note>Check which version of the C compiler you are installing before issuing the ebuild command.  Emerge will tell you the command to issue when it completes. The ebuild command configures the compiler for your system, allowing it to locate system files and libraries.</note>
<p>
If everything went okay, you now have the Compaq C Compiler installed and can use it to start compiling applications from portage or your own applications. If you would also like to use the C++ compilers, use the commands below to install them.  Don't forget to run "cxx" at the end to agree to the EULA.
</p>
<pre caption="Installing Compaq C++">
# emerge -pv dev-lang/cxx   # check everything looks okay
# CXX_LICENSE_KEY=0123456789 emerge dev-lang/cxx
# ebuild /var/db/pkg/dev-lang/cxx-6.5.9.31-r1.ebuild config
# cxx   # read and agree to the EULA.
</pre>
<p>
If you would like to take advantage of the enhanced debugger ladebug, you should install it now
</p>
<pre caption="Installing Ladebug, the Compaq Debugger">
# emerge -pv dev-util/ladebug
# emerge dev-util/ladebug
</pre>

<note>ladebug can be used with gcc executables as well as ccc/cxx executables, If you are from a Tru64 background, you may be familiar with ladebug and might feel more comfortable using it than gdb for general debugging.</note>

</body>
</section>
</chapter>
<chapter>
<title>Using the Compaq Tools with Portage</title>
<section>
<title>Compiling C/C++ Programs with Portage</title>
<body><p>
Compiling programs from portage with ccc is simple.  In the following example we will demonstrate installing gzip, an application known to perform very well with ccc.
</p>
<pre caption="Portage Compiling with ccc">
# emerge -pv gzip   # check everything looks okay
# CC=ccc CFLAGS="-host -fast" emerge gzip
</pre>
<p>
ccc has many optimization features.  There is an overview and explanation of the CFLAGS used here and some other common options farther below.
</p><p>
The same method can be used to compile C++ programs.  The following example uses groff, which benchmarks much better when compiled with cxx.
</p>
<pre caption="Portage Compiling with cxx">
# emerge -pv groff   # check everything looks okay
# CXX=cxx CXXFLAGS="-host -fast" emerge groff
</pre>
</body>
</section>
<section>
<title>Optimizing Your ccc/cxx Compiled Applications</title>
<body><p>
Optimizing applications for Alpha with ccc/cxx is simpler than with gcc.  Similar options are grouped together, making command lines shorter and simpler. The table below demonstrates some of the common flags you might want to try in your programs.
</p>
<p>
<table>
<tr>
<th>Flag</th>
<th>Description</th>
<th>Safety</th>
</tr>
<tr>
<ti>-host</ti>
<ti>Optimizes the application for the system being compiled on by taking advantage of any extended instruction set available and scheduling specifically for this machine.  Applications compiled with this will probably not function on different alpha machines.</ti>
<ti>Very Safe.</ti>
</tr>
<tr>
<ti>-fast</ti>
<ti>Turns on some advanced optimizations; using this will maximize the performance of your applications</ti>
<ti>Safe.</ti>
</tr>
<tr>
<ti>-O4</ti>
<ti>Inserts NOP instructions into your code to improve scheduling.  Software pipelining using dependency analysis, vector-ization of some loops on 8-bit and  16-bit data (char and  short). Using this may not always improve code performance and should be compared to -O3 and -fast.</ti>
<ti>Usually Safe, may not always improve performance</ti>
</tr>
<tr>
<ti>-std1</ti>
<ti>Informs the compiler to use the strictest possible interpretation of the standards allowing it to perform more aggressive optimizations that might not have had predictable results in a more liberal interpretation. Not all applications will compile with this and some may not perform as intended if they do compile.</ti>
<ti>May not Compile, but Will Improve Performance.</ti>
</tr>
<tr>
<ti>-tune host</ti>
<ti>Fine tunes the compiler scheduling to perform best on the arch specified; using this will not stop you from using the binaries on different machines and will improve performance.</ti>
<ti>Very Safe.</ti>
</tr>
</table>
</p>
<note>CCC supports interpretation of most gcc compiler flags so if your application <path>Makefile</path> specifies some gcc options, don't worry, CCC will probably understand it.</note>
<p>
<note>If you have the "doc" USE flag set in your <path>make.conf</path>, the compilers will have installed extensive documentation in <path>/usr/share/doc</path>.  You can browse this for more information. There are also excellent man pages.</note>
</p>
</body>
</section>
</chapter>
<chapter>
<title>Notes on the Compaq Compilers</title>
<section>
<title>Applications that benefit from CCC/CXX</title>
<body><p>
The compaq compilers really excel at optimizing applications that involve intensive floating point maths.  They can also outperform GCC at integer maths in most situations. During my experiments I have found many applications that benchmark almost identically with ccc as with gcc, but I haven't found any applications that perform worse with ccc/cxx.</p><p>Remember however that GCC has received more extensive testing and provides many extensions to the standards that programmers might make use of.  CCC might not support these extensions or not support them as fully as gcc. You should take this into account when choosing what to optimize with ccc.
</p>
</body>
</section>
<section>
<title>Benchmarking CCC</title>
<body><p>If you want to experiment with different CCC flags and compare them to GCC, you need to benchmark them. For this purpose, I recommend the <uri link="http://www.freebench.org/">Freebench</uri> benchmark suite.  It will compile and run 6 different tests designed to test Integer and Floating Point performance and will also generate html graphs for comparisons.</p>
<p>
Here are some examples I have prepared
</p>
<table>
<tr>
<th>Test</th>
<th>Summary</th>
</tr>
<tr>
<ti><uri link="http://dev.gentoo.org/~taviso/results-ccc-vanilla.html">CCC Vanilla</uri></ti>
<ti>CCC results with no flags specified.</ti>
</tr>
<tr>
<ti><uri link="http://dev.gentoo.org/~taviso/results-gcc-vanilla.html">GCC Vanilla</uri></ti>
<ti>GCC results with no flags specified.</ti>
</tr>
<tr>
<ti></ti><ti></ti>
</tr>
<tr>
<ti><uri link="http://dev.gentoo.org/~taviso/results-ccc-normal.html">CCC Normal</uri></ti>
<ti>CCC Results with some common flags</ti>
</tr>
<tr>
<ti><uri link="http://dev.gentoo.org/~taviso/results-gcc-normal.html">GCC Normal</uri></ti>
<ti>GCC Results with some common flags.</ti>
</tr>
<tr>
<ti></ti><ti></ti>
</tr>

<tr>
<ti><uri link="http://dev.gentoo.org/~taviso/results-ccc-best.html">CCC Best</uri></ti>
<ti>CCC With some more options specified.</ti>
</tr>
<tr>
<ti><uri link="http://dev.gentoo.org/~taviso/results-gcc-best.html">GCC Best</uri></ti>
<ti>GCC With some more options specified.</ti>
</tr>
</table>
<note>Higher is better.</note>
<note>A Single page comparison is available <uri link="http://dev.gentoo.org/~taviso/results.html">here</uri></note>
</body>
</section>
<section>
<title>Advanced Performance Features</title>
<body><p>
If you've been using Alpha for more than a few minutes, you know about Unaligned accesses, programming errors that affect Alpha users and cause applications to incur performance penalties as the kernel fixes them.</p>
<p>Unaligned accesses aren't serious; programs will run fine even with them.  However the kernel can't fix these instantly and every time it does a fix, your application will run slower. Usually this isn't a problem, but on some programs you might notice the slowdown.</p>
<p>
<pre caption="Unaligned Trap Messages">
Apr 9 01:05:55 amnesiac bash(20147): unaligned trap at 0000039db4526d98: 000003
9db4662e26 28 1
Apr 9 01:05:55 amnesiac bash(20147): unaligned trap at 0000039db4526d9c: 000003
9db4662e2a 28 3
Apr 9 01:06:03 amnesiac snort(23800): unaligned trap at 000000012003fe60: 00000
00120161a92 2c 2
Apr 9 01:06:03 amnesiac snort(23800): unaligned trap at 000000012003fe78: 00000
00120161a96 2c 2
Apr 9 01:06:03 amnesiac snort(23800): unaligned trap at 000000012003feb0: 00000
00120161a9e 2c 4
Apr 9 01:06:03 amnesiac snort(23800): unaligned trap at 000000012003feb4: 00000
00120161aa2 2c 5
</pre>
</p>
<p>
<note>You can see these messages on your machine with the dmesg command</note>
</p>
<p>
There are 2 ways to fix these errors so as to minimize the performance hit.
If you're a programmer, you can fix the errors.  This is usually simple, but some applications are riddled with them or are very subtle. If you think you can do this, HP has some documentation for programmers on how to identify and fix these bugs at the link below.</p>
<p>
<uri>http://h21007.www2.hp.com/dspp/tech/tech_TechSingleTipDetailPage_IDX/1,2366,161,00.html</uri>
</p><p>
The second way is using the Compaq Compiler and the -misalign flag, this will add extra checking code to make sure that all code is aligned. This will make your program run slower, so you need to experiment and check if it's worth it.
</p><p>If possible run the application through <path>time</path>.  When the program completes it should show how much time the kernel spent processing system calls, including fixing misaligned accesses. If this number is high (you can compare it to other platforms) and you are receiving lots of UAC messages, you might benefit from recompiling with the extra checking code.
</p>
<p>
<pre caption="Measuring the Performance of an Unaligned Access">
# time your_application
real 0m2.011s
user 0m0.004s
sys 0m2.007s
# CC=ccc CFLAGS="-host -fast -misalign" emerge your_application
# time your_application
0m0.811s
0m0.804s
0m0.007s
</pre>
</p><p>
<note>Of course that you don't have to compile your whole application with -misalign  You can use the hp documentation above to identify the source file that contains the errors and use misalign on those files specifically.</note>
</p><p> <note>If the UAC messages bother you or you would like to streamline the kernel handling code for maximum performance, you can modify <path>/usr/src/linux/arch/alpha/kernel/traps.c</path> and remove the printk() and switch statements.</note></p>
<note>You can use the following command to check how many times the kernel has fixed these errors since you last rebooted</note>
<pre caption="Check UAC Stats">
$ grep unaligned /proc/cpuinfo
kernel unaligned acc : 3 (pc=fffffc000035c7e0,va=120000f1a)
user unaligned acc : 6623 (pc=28d361e4c1c,va=28d36320f62)
</pre>
</body>
</section>
</chapter>
</guide>
