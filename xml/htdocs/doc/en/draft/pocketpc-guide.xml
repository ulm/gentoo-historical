<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/draft/Attic/pocketpc-guide.xml,v 1.2 2005/09/29 15:11:35 neysx Exp $ -->

<guide link="/doc/en/draft/pocketpc-guide.xml">
<title>Working with Pocket PCs using libsynCE</title>

<author title="Author">
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>
<author title="Editor">
  <mail link="fox2mike@gentoo.org">Shyam Mani</mail>
</author>

<abstract>
This guide will show how you how to work with a Pocket PC (in this case an HP
IPAQ 1945) using libsynCE.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2005-08-30</date>

<chapter>
<title>Setting up your Pocket PC</title>
<section>
<title>Kernel Setup</title>
<body>

<p>
This guide uses the HP iPAQ 1945 as an example. Other Pocket PCs also use
similar procedures to work. You <e>must</e> make sure you have the right kernel
settings for your Pocket PC.
</p>

<p>
The first thing we need to do is get the kernel to recognize our device.  In
this case, we have an HP iPAQ 1945. It is usb based and the module needed is
called <c>ipaq</c>.
</p>

<pre caption="iPAQ Kernel Config">
[ ]   USB Serial Console device support (EXPERIMENTAL)
[ ]   USB Generic Serial Driver
&lt; &gt;   USB Belkin and Peracom Single Port Serial Driver
&lt; &gt;   USB ConnectTech WhiteHEAT Serial Driver
&lt; &gt;   USB Digi International AccelePort USB Serial Driver
&lt; &gt;   USB Cypress M8 USB Serial Driver
&lt; &gt;   USB Empeg empeg-car Mark I/II Driver
&lt; &gt;   USB FTDI Single Port Serial Driver (EXPERIMENTAL)
&lt; &gt;   USB Handspring Visor / Palm m50x / Sony Clie Driver
&lt;M&gt;   USB PocketPC PDA Driver
</pre>

<p>
Now we reboot.
</p>

</body>
</section>
<section>
<title>Post-Kernel Setup</title>
<body>

<p>
Ok, now that we have the kernel module setup, let's go ahead and get some
information.  Before we begin though, allow me to explain something.  While it
states USB Serial Converter, it's basically taking your PDA and communicating
using serial over USB.  That means this device is a USB based IPAQ.  In fact,
we even use ppp later on to create the connection.  First though, let's plugin
our device and take a look at our modules list (note this is a udev system):
</p>

<pre caption="Information about our PocketPC">
# <i>lsmod</i>
Module                  Size  Used by
ipaq                   30736  0
nvidia               3914428  12
vmnet                  27428  2
vmmon                 167564  0

# <i>dmesg | grep Pocket</i>
drivers/usb/serial/usb-serial.c: USB Serial support registered for PocketPC PDA
drivers/usb/serial/ipaq.c: USB PocketPC PDA driver v0.5
ipaq 1-1.1:1.0: PocketPC PDA converter detected
usb 1-1.1: PocketPC PDA converter now attached to ttyUSB0

# <i>ls -la /dev/tts/USB0</i>
crw-------  1 root tty 188/ 0  6/  1 10:41 /dev/tts/USB0
secures chris #
</pre>

<p>
In the first code segment, we see that as soon as the ipaq is plugged in, the
ipaq module is loaded (this is with coldplug of course).  Not only that, but a
quick scan of dmesg shows that our setup works, and that the device is now
located at /dev/tts/USB0.  Remember this, as we'll need it for configuration
later on.  Now that we have our device setup, let's get ahold of some packages
that will help us communicate with it.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Working with SynCE</title>
<section>
<title>Getting ahold of the tools</title>
<body>

<p>
Alright, the first thing we need to do is get ahold of the tools that will
allow us to communicate with the PocketPC.  So, we'll need to get ahold of the
following packages:
</p>

<ul>
  <li>app-pda/synce - core for synce</li>
  <li>app-pda/synce-dccm - manages connections for synce devices</li>
  <li>app-pda/synce-librapi2 - rapi protocol communication</li>
  <li>app-pda/synce-libsynce - core library</li>
  <li>app-pda/synce-serial - needed to configure device</li>
  <li>net-dialup/ppp - needed for point to point connection with the device</li>
</ul>

<p>
Once we these programs, we can begin the setup.
</p>

</body>
</section>
<section>
<title>Setting up the IPAQ</title>
<body>

<p>
Alright, remember that device node I told you we'd need.  Here's where it comes
into play.  Now, as part of the synce-serial package, we have something called
synce-serial-config.  This is what we'll use to configure the device.  To do
so, simply give it the device node from earlier:
</p>

<pre caption="Configuring the device">
# <i>synce-serial-config tts/USB0</i>

You can now run synce-serial-start to start a serial connection.
</pre>

<p>
Please note that when you feed synce-serial-config the device node, do it
without the /dev.  Now that we have it up and running, we can begin to use the
device.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Using the IPAQ</title>
<section>
<title>Getting the IPAQ ready for connections</title>
<body>

<p>
In order to use the IPAQ, we need to run a couple of commands.  The first is
dccm.  This is our connection manager for the ipaq, and without it programs
won't be able to connect.  To use this run it <e>AS THE USER WHO WILL ACCESS
SYNCE APPS</e>.  So we do as so:
</p>

<pre caption="Initiating dccm">
# <i>exit</i>
exit
$ <i>dccm</i>
</pre>

<p>
Now one more quick bit of user switching again, and we will now initiate the
connection with the device:
</p>

<pre caption="Device connection">
# <i>synce-serial-start</i>

synce-serial-start is now waiting for your device to connect
</pre>

<p>
Your device should now respond to the connection.  Mine does by displaying the
sync icon and beeping to announce the connection.  Now let's start by working
with files.
</p>

</body>
</section>
<section>
<title>Working with files</title>
<body>

<p>
In my IPAQ, the following structure exists:
</p>

<pre caption="IPAQ structure">
My Device
  - My Documents
  - Program Files
  - Storage Card
  - Temp
  - Windows
</pre>

<p>
Now let's see how we can copy files over.  To accomplish this, we use the tools
that come with synce:
</p>

<ul>
  <li>pcp - copy files</li>
  <li>pls - list directory contents</li>
  <li>pmkdir - make directory</li>
  <li>pmv - move (rename) files</li>
  <li>prm - remove file</li>
  <li>prmdir - remove an empty directory</li>
  <li>prun - run a program</li>
  <li>pstatus - display status about remote device</li>
  <li>synce-install-cab - install a .cab file</li>
</ul>

<p>
Let's try first by using pstatus to check how our IPAQ is doing:
</p>

<pre caption="pstatus output">
$ <i>pstatus</i>
Version
=======
Version:    3.0.11171 (Merlin: Pocket PC 2002)
Platform:   3 (Windows CE)
Details:    ""

System
======
Processor architecture: 5 (ARM)
Processor type:         2577 (StrongARM)
Page size:              0x10000

Power
=====
ACLineStatus: 01 (Online)

Status for main battery
=========================
Flag:          1 (High)
LifePercent:   100%
LifeTime:      Unknown
FullLifeTime:  Unknown

Status for backup battery
=========================
Flag:          1 (High)
LifePercent:   100%
LifeTime:      Unknown
FullLifeTime:  Unknown

Store
=====
Store size: 24461312 bytes (23 megabytes)
Free space: 24105564 bytes (22 megabytes)

Memory for storage: 24530944 bytes (23 megabytes)
Memory for RAM:     24477696 bytes (23 megabytes)
</pre>

<p>
There we go, we have all the information about the IPAQ, which means our
connection was successful.  Now let's try to copy some files over.  We use the
pcp program for this.  First, we'll copy a file "test.txt" over to the IPAQ:
</p>

<pre caption="Copying over test.txt">
$ <i>pcp test.txt :test.txt</i>
File copy of 16 bytes took 0 minutes and 1 seconds, that's 16 bytes/s.
</pre>

<p>
A small note, the ':' indicates the IPAQ is the destination.  Also, the IPAQ
defaults to My Documents when you open File Explorer.  However, the file is
copied to My Device instead.  If you wanted to copy it to My Documents, you
would do as such:
</p>

<pre caption="Copying test.txt to My Documents">
$ <i>pcp test.txt :"My Documents/test.txt"</i>
File copy of 16 bytes took 0 minutes and 3 seconds, that's 5 bytes/s.
</pre>

<p>
The file will now showup in your My Documents folder.  One interesting thing to
note as well is the output of pls:
</p>

<pre caption="pls output">
$ <i>pls</i>
Archive             16  2002/07/01 18:50:57  test.txt
Directory               2002/07/01 09:00:00  Business/
Directory               2002/07/01 09:00:00  Personal/
Directory               2002/07/01 09:00:00  Templates/
</pre>

<p>
In this case, it accesses the My Documents folder, not My Device.  Remember
that when you copy over!  As a final example, the IPAQ has the ability to play
MP3's, but only with a storage card.  Let's take a small folder full of mp3's
and copy them over to the storage card (Remember, the storage card is displayed
as Storage Card in the IPAQ):
</p>


<pre caption="Copying mp3s over to the storage card">
$ <i>for mp3s in *.mp3</i>
&gt; <i>do</i>
&gt; <i>pcp "${mp3s}" :"Storage Card/${mp3s}"</i>
&gt; <i>done</i>
</pre>

<p>
And there you have it, it will queue and copy over all the mp3's in that directory.
</p>

</body>
</section>
<section>
<title>Conclusion</title>
<body>

<p>
I hope this tutorial works out for you ok.  If you have any inquiries about
this article, please email me at <mail>chriswhite@gentoo.org</mail>.
</p>

</body>
</section>
</chapter>
</guide>
