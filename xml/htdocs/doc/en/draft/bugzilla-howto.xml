<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/draft/Attic/bugzilla-howto.xml,v 1.10 2005/09/29 15:11:35 neysx Exp $ -->

<guide link="/doc/en/draft/bugzilla-howto.xml">
<title>Gentoo Bug Reporting Guide</title>

<author title="Author">
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>
<author title="Editor">
  <mail link="fox2mike@gentoo.org">Shyam Mani</mail>
</author>

<abstract>
This document shows the proper method of reporting bugs using Bugzilla.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.3</version>
<date>2005-07-13</date>

<chapter>
<title>Searching Using Bugzilla</title>
<section>
<title>Introduction</title>
<body>

<p>
<uri link="http://www.bugzilla.org">Bugzilla</uri> is what we at Gentoo use to
handle bugs. Gentoo's Bugzilla is reachable by HTTP and HTTPS. HTTPS is
available for those on insecure networks or are simply paranoid :). For the sake
of consistency, we will be using the HTTPS version in the examples to follow.
Head over to <uri link="https://bugs.gentoo.org">Gentoo Bugs</uri> to see how it
looks.
</p>

<p>
One of the most frustrating things for developers and bug-wranglers is finding
duplicate bug reports. These cost them valuable time that they could otherwise
use to work on more important bugs. Often, this can be prevented by a few simple
search methods. So we're going to see how to search for bugs and find out if
you have one that's similar. For this example, we're going to use an xclass
emerge error.
</p>

<pre caption="xclass emerge error">
/usr/lib/gcc-lib/i686-pc-linux-gnu/3.3.2/include/g++-v3/backward/backward_warning.h:32:2:
warning: #warning This file includes at least one deprecated or antiquated
header. Please consider using one of the 32 headers found in section 17.4.1.2 of
the C++ standard. Examples include substituting the &lt;X&gt; header for the &lt;X.h&gt;
header for C++ includes, or &lt;sstream&gt; instead of the deprecated header
&lt;strstream.h&gt;. To disable this warning use -Wno-deprecated.
In file included from main.cc:40:
menudef.h:55: error: brace-enclosed initializer used to initialize `
OXPopupMenu*'
menudef.h:62: error: brace-enclosed initializer used to initialize `
OXPopupMenu*'
menudef.h:70: error: brace-enclosed initializer used to initialize `
OXPopupMenu*'
menudef.h:78: error: brace-enclosed initializer used to initialize `
OXPopupMenu*'
main.cc: In member function `void OXMain::DoOpen()':
main.cc:323: warning: unused variable `FILE*fp'
main.cc: In member function `void OXMain::DoSave(char*)':
main.cc:337: warning: unused variable `FILE*fp'
make[1]: *** [main.o] Error 1
make[1]: Leaving directory
`/var/tmp/portage/xclass-0.7.4/work/xclass-0.7.4/example-app'
make: *** [shared] Error 2

!!! ERROR: x11-libs/xclass-0.7.4 failed.
!!! Function src_compile, Line 29, Exitcode 2
!!! 'emake shared' failed
</pre>

<p>
So to begin searching, we head over to the <uri
link="https://bugs.gentoo.org/">Bugzilla Homepage</uri>.
</p>

<figure link="/images/docs/bugzie-homepage.png" caption="Bugzilla Homepage"/>

<p>
We'll click on "Query Existing bug reports". The reason why we choose this
over the basic bug search is because the basic bug search tends to give vague
results and often hinders users from looking through the results and finding the
duplicate bug. Once we click on the query screen, we reach the next page:
</p>

<figure link="/images/docs/bugzie-search.png" caption="Bugzilla Search Page"/>

<note>
If you've used the Advanced Search before, you'll most likely see that screen
instead.
</note>

<p>
Proceed by clicking on the "Advanced Search" link to bring up the Advanced
Search page.
</p>

<figure link="/images/docs/bugzie-adv-search.png" caption="Advanced Search Page"/>

<p>
This is how the Advanced Search Page looks like. While it may seem overwhelming
at first, we're going to look at a few simple areas to narrow down the rather
vague searches bugzilla returns.
</p>

<figure link="/images/docs/bugzie-content.png" caption="Content"/>

<p>
The first field is the summary of the bug. Here we're simply going to put the
name of the package that's crashing. If bugzie doesn't return results, try
removing the package name, just in case someone didn't put that in the summary
(highly unlikely, but we've seen a fair share of strange bug reports).
</p>

<p>
Product, Component, and Version should all be set to the default. This
prevents us from being too specific and missing all the bugs.
</p>

<p>
Comment is the important part. Use the comment field to list what appears to be a
specific instance of the error. Basically, don't use anything like the
beginning of the build error, find a line that's before it stating a true
error. Also, you'll want to filter out any punctuation to prevent bugzilla
from interpreting the results the comment the wrong way. Example from the xclass
emerge error:
</p>

<pre caption="Comment Line Content">
menudef.h:78: error: brace-enclosed initializer used to initialize `OXPopupMenu'
<comment>(Remove the quotes ' ')</comment>
menudef.h 78 error brace-enclosed initializer used to initialize OXPopupMenu
</pre>

<p>
The above is specific enough to where we'll find the bug without wading through
other xclass compile failure candidates.
</p>

<p>
URI, Whiteboard, and Keywords can all be left alone. What we've entered so far
should be enough to find our bug. Let's take a look at what we have filled out.
</p>

<figure link="/images/docs/bugzie-comp-search.png" caption="Completed Search Form"/>

<p>
Now we click on the Search button and here come the results...
</p>

<figure link="/images/docs/bugzie-search-result.png" caption="Search Results"/>

<p>
Only 2 bugs! That's a lot easier to deal with. We click on the first one to
check, and sure enough it's the one we're looking for.
</p>

<figure link="/images/docs/bugzie-located.png" caption="Bug Located"/>

<p>
Not only is it the one we want, but it has also been resolved. By checking the
last comment we see the solution and know what to do in order to resolve it.
Now, let's see what would have happened if we had not used the advanced search.
</p>

<figure link="/images/docs/bugzie-basic-search-result.png" caption="Basic Search Results"/>

<p>
4 more bugs to deal with! It gets even worse with larger packages. However,
with these simple tools, we're able to significantly narrow down the search to
try and locate a specific bug.
</p>

</body>
</section>
<section>
<title>Conclusion</title>
<body>

<p>
Let's say that you have searched and searched but still can't find a bug.
You've found yourself a new bug. Let's take a look at the bug reporting process
for submitting your new bug.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Reporting Bugs</title>
<section>
<title>Introduction</title>
<body>

<p>
In this chapter, we'll figure out how to use Bugzilla to file a shiny, new bug.
Head over to <uri link="https://bugs.gentoo.org">Gentoo Bugs</uri> and...
</p>

<figure link="/images/docs/bugzie-homepage.png" caption="Bugzilla Homepage"/>

<p>
Click on "Report a Bug - Using the guided format".
</p>

<figure link="/images/docs/bugzie-prod-select.png" caption="Product Selection"/>

<p>
As you can see, <b>major</b> emphasis has been placed on putting your bug in the
right place. Gentoo Linux is where a large majority of bugs go.
</p>

<p>
Despite this, some people will file ebuild bugs in portage development
(assumption that portage team handles the portage tree) or infra (assumption
that infra has access to mirrors and rsync and can fix it directly). This is
simply not how things work.
</p>

<p>
Another common misconception occurs with our Documentation bugs. For example, a
user finds a bug with the <uri
link="/proj/en/releng/catalyst/index.xml">Catalyst
Docs</uri>. The general tendency is to file a bug under Docs-user, which gets
assigned to the <uri link="http://gdp.gentoo.org">GDP</uri>, when it should
actually go to a member of the <uri
link="/proj/en/releng/">Release Engineering</uri> team. As
a rule of thumb, only documentation under http://www.gentoo.org/doc/* is under
the GDP. Anything under http://www.gentoo.org/proj/* is under the respective
teams.
</p>

<note>
We would rather see a bug whose product was not supposed to be Gentoo Linux but
has been filed under the same rather than seeing a bug which belongs the Gentoo
Linux product and filed elsewhere. While neither is preferred, the former is more
acceptable and understandable (except website bugs.. we might have an issue with
that...).
</note>

<p>
Our bug goes in Gentoo Linux as it's an ebuild bug. We head over there and are presented
with the multi-step bug reporting process. Let us now proceed with Step 1...
</p>

<figure link="/images/docs/bugzie-guide-step1.png" caption="Guided Format Step 1"/>

<p>
The first step here is really important (as the red text tells you). This is
where you search to see that someone else hasn't hit the same bug you have, yet.
If you do skip this step and a bug like yours already exists, it will be marked
as a DUPLICATE thus wasting a large amount of QA effort. To give you an idea,
the bug numbers that are struck out above are duplicate bugs. Now comes step 2,
where we give the information.
</p>

</body>
</section>
<section>
<title>Required Information</title>
<body>

<figure link="/images/docs/bugzie-basic.png" caption="Basic Information"/>

<p>
Let us take a closer look at what's what.
</p>

<ul>
  <li>
  First, there's the Product. The product will narrow down the bug to a
  specific area of Gentoo like Bugzilla (for bugs relating to bugs.gentoo.org),
  Docs-user(for User Documentation) or Gentoo Linux (for ebuilds and the like).
  </li>
  <li>
  Component is where exactly the problem occurs, more specifically which part
  of selected product the bug comes under. This makes classification easier.
  </li>
  <li>
  Hardware platform is what architecture you're running. If you were running
  SPARC, you would set it to SPARC.
  </li>
  <li>
  Operating System is what Operating System you're using. Because Gentoo is
  considered a "Meta-distribution", it can run on other operating systems
  beside Linux.
  </li>
</ul>

<p>
So, for our example bug, we have :
</p>

<ul>
  <li>
  Product - Gentoo Linux (Since it is an ebuild issue)
  </li>
  <li>
  Component - Application (It is an application at fault, foobar2)
  </li>
  <li>
  Hardware Platform - All (This error could occur across architectures)
  </li>
  <li>
  Operation System - All (It could occur on all types of systems)
  </li>
</ul>

<figure link="/images/docs/bugzie-basic-comp.png" caption="Completed Basic Information"/>

<ul>
  <li>
  Build Identifier is basically the User Agent of the browser that is being used
  to report the bugs (for logging purposes). You can just leave this as is.
  </li>
  <li>
  URL is optional and is used to point to errors on a site someplace (pastebin,
  etc.). However, doing it inside the bug allows the developers be able to
  reference to it at any time and is preferred.
  </li>
  <li>
  In the Summary, you should put the package category, name, and number.
  </li>
</ul>

<p>
Not including the category in the summary really isn't too bad, but it's
recommended. If you don't include the package name, however, we won't know what
you're filling a bug for, and will have to ask you about it later. The version
number is important for people searching for bugs. If 20 people filed bugs and
not one put a version number, how would people looking for similar bugs be able
to tell if one was there's? They'd have to look through every single bug, which
isn't too hard, but if there are say, 200 bugs.. it's not that easy. After all
the package information, you'll want to include a small description of the
incident. Here's an example:
</p>

<figure link="/images/docs/bugzie-summary.png" caption="Summary"/>

<p>
These simple rules can make handling bugs a lot easier. Next, we give details
and information about the bug. We'll demonstrate with an example:
</p>

<figure link="/images/docs/bugzie-details.png" caption="Details"/>

<p>
Now the developer knows why we're filing the bug. They can then try to
reproduce it. Reproducibility tells us how often we were able to make the
problem recur. In this example, we can reproduce it any time simply by running
foobar2. Let's put that information in.
</p>

<figure link="/images/docs/bugzie-reprod.png" caption="Reproduction"/>

<p>
We have explained how we found the bug. The next step is to explain what were
the results we got and what we think they should actually be.
</p>

<figure link="/images/docs/bugzie-results.png" caption="Results"/>

<p>
We could then provide additional information. This could be things such as stack traces,
<b>sections</b> (since the whole log is usually big and of not much use) of
strace logs, but most importantly, your <c>emerge --info</c> output. Here's an
example.
</p>

<figure link="/images/docs/bugzie-addl-info.png" caption="Additional Information"/>

<p>
Lastly we select the severity of the bug. Please look this over carefully. In
most cases it is <e>ok</e> to leave it as is and someone will raise/lower it for
you. However, if you raise the severity of the bug, please make sure you read it
over carefully and make sure you're not making a mistake. A run down of the
various levels is given below.
</p>

<ul>
  <li>
  Blocker - The program just plain doesn't want to emerge or is a major
  hinderance to the system. For example a <c>baselayout</c> issue which prevents
  a system from booting up would be a sure candidate to be labelled blocker.
  </li>
  <li>
  Critical - The program has loss of data or severe memory leaks during
  runtime. Again, an important program like say <c>net-tools</c> failing to
  compile could be labelled critical. It won't prevent the system from starting
  up, but is quite essential for day to day stuff.
  </li>
  <li>
  Major - The program crashes, but nothing that causes your system severe
  damage or information loss.
  </li>
  <li>
  Minor - Your program crashes here and there with apparent workarounds.
  </li>
  <li>
  Normal - The default.  If you're not sure leave it here unless it's a new
  build or cosmetic change, then read below for more information.
  </li>
  <li>
  Trivial - Things such as a mispelled word or whitespace clean up.
  </li>
  <li>
  Enhancement - A request to enable a new feature in a program, or more
  specifically <e>new ebuilds</e>.
  </li>
</ul>

<figure link="/images/docs/bugzie-sev.png" caption="Severity"/>

<p>
Here, we'll set it to Normal.
</p>

<p>
Now we can submit the bug report by clicking on the Submit Bug Report box. You
will now see your new bug come up. See <uri
link="https://bugs.gentoo.org/show_bug.cgi?id=97265">Bug 97561</uri> for what
the result looks like. We've reported our bug! Now let's see how it's dealt
with.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Working With Your Bug</title>
<section>
<body>

<p>
Looking at the bug, we see the information we provided earlier. You will notice
that the bug has been assigned to bug-wranglers@gentoo.org. This is the default
location for Application component bugs.
</p>

<figure link="/images/docs/bugzie-new-basic.png" caption="New Bug Basic Information"/>

<p>
The details we entered about the bug are available as well.
</p>

<figure link="/images/docs/bugzie-new-details.png" caption="New Bug Details"/>

<p>
However, bug-wranglers (usually) won't fix our bugs, so we'll reassign it to
someone that can (you can let bug-wranglers re-assign it for you as well). For
this we use the package's metadata.xml. You can normally find them in
<path>/usr/portage/category/package/metadata.xml</path>. Here's one I've made up
for foobar2.
</p>

<note>
You have to be the reporter of the bug or a member of certain Gentoo Bugzilla
groups (like Gentoo Developers) to be able to reassign bugs.
</note>

<pre caption="metadata.xml">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd"&gt;
&lt;pkgmetadata&gt;
&lt;herd&gt;chriswhite&lt;/herd&gt;
&lt;maintainer&gt;
&lt;email&gt;chriswhite@gentoo.org&lt;/email&gt;
&lt;name&gt;Chris White&lt;/name&gt;
&lt;/maintainer&gt;
&lt;longdescription lang="en"&gt;
Foobar2 is a package that uses a configuration file to display a word.
&lt;/longdescription&gt;
&lt;/pkgmetadata&gt;
</pre>

<p>
Notice the maintainer section. This lists the maintainer of the package, which
in this case is myself, Chris White. The email listed is chriswhite@gentoo.org.
We will use this to re-assign the bug to the proper person. To do this, click
the bubble next to Reassign bug to, then fill in the email.
</p>

<note>
A bug for a package without a metadata.xml file should be re-assigned to
maintainer-needed@gentoo.org and a package that needs a Gentoo Developer to
maintain should be assigned to maintainer-wanted@gentoo.org.
</note>

<figure link="/images/docs/bugzie-reassign.png" caption="Bug Reassignment"/>

<p>
Then hit the Commit button for the changes to take place. The bug has been
reassigned to me. Shortly afterward, you notice (by email usually) that I've
responded to your bug. I've stated that I'd like to see an strace log to figure
out how the program is trying to reach your configuration file. You follow the
previous instructions on using strace and obtain an strace log. Now you need to
attach it to the bug. In order to do this, click on "Create A New Attachment".
</p>

<figure link="/images/docs/bugzie-new-attach.png" caption="New Attachment"/>

<p>
Now we have to attach the log. Let's go throught it step wise.
</p>

<ul>
  <li>
  File - This is the location of the file in your machine. In this example, the
  location of <path>strace.log</path>. You can use the "Browse..." button to
  select the file, or enter the path directly in the text field.
  </li>
  <li>
  Description - A short one liner, or a few wors describing the attachment.
  We'll just enter strace.log here, since that's quite self-explanatory.
  </li>
  <li>
  Content Type - This is the type of the file we're attaching to the bug.
  </li>
  <li>
  Obsoletes - If there were attachements submitted to the bug before the current
  one, you have an option of declaring them obsoleted by yours. Since we have no
  prior attachments to this bug, we need not bother.
  </li>
  <li>
  Comment - Enter comments that will be visible along with the attachments. You
  could elaborate on the attachment here, if needed.
  </li>
</ul>

<p>
With respect to Content Type, here are a few more details. You can check the
"patch" checkbox if you're submitting a patch. Otherwise, you could ask Bugzilla
to "auto-detect" the file type (not advisable). The other options are "select
from list", which is most frequently used. Use plain text (text/plain) for <e>most</e>
attachments except binary files like images (which can use image/gif,
image/jpeg or image/png depending on type) or compressed files like .tar.bz2
which would use application/octet-stream as content type.
</p>


<figure link="/images/docs/bugzie-new-attach-comp.png" caption="New Attachment Completed"/>

<p>
We submit <path>strace.log</path> and it is reflected on the bug report.
</p>

<figure link="/images/docs/bugzie-strace.png" caption="Attached strace log"/>

<p>
We've mentioned before that sometimes ebuilds will tell you to attach a file in
the emerge error. An example can be seen below.
</p>

<pre caption="Example File Attachment Request">
configure: error: PNG support requires ZLIB. Use --with-zlib-dir=&lt;DIR&gt;

!!! Please attach the config.log to your bug report:
!!! /var/tmp/portage/php-5.0.3-r1/work/php-5.0.3/config.log

!!! ERROR: dev-php/php-5.0.3-r1 failed.
!!! Function econf, Line 485, Exitcode 0
!!! econf failed
!!! If you need support, post the topmost build error, NOT this status message.
</pre>

<p>
Please attach any file mentioned like this to your bug report.
</p>

<p>
While we're doing all this, suppose another person finds your bug by searching
through bugzilla and is curious to keep track of the bug, they may do so by
putting their email in the Add CC field of the bug as shown below. You could
also keep track of other bugs by following the same method.
</p>

<figure link="/images/docs/bugzie-add-email.png" caption="Adding Email To CC:"/>

<note>
Email addresses must be registered with Gentoo Bugzilla. In order to CC multiple
addresses, simply separate them with commas or spaces.
</note>

<p>
After all this work, the bug can undergo various status markings. This is
usually done by the Gentoo Developers and sometimes by the reporter. The
following are the various possible states a bug may go through during its
lifetime.
</p>

<ul>
  <li>
  UNCONFIRMED - You're generally not going to see this too often. This
  means that a bug reporter has opened a bug using the advanced method and is
  uncertain his or her bug is an actual bug.
  </li>
  <li>
  NEW - Bugs that are first opened are considered new.
  </li>
  <li>
  ASSIGNED - When the person you've assigned the bug too validates your
  bug, it will often receive ASSIGNED status while they figure out the issue.
  This lets you know that they've accepted your bug as a real bug.
  </li>
  <li>
  REOPENED - Someone has resolved a bug and you think the solution is not
  feasible or the problem still persists. At this point, you may re-open the
  bug. Please <b>do not abuse this</b>. If a developer closes the bug a
  second or third time, chances are that your bug is closed.
  </li>
  <li>
  RESOLVED - A firm decision has been taken on the bug. Usually goes onto FIXED
  to indicate the bug is solved and the matter closed although various other
  resolutions are possible. We'll look into those a little later.
  </li>
  <li>
  VERIFIED - The steps take to work the bug are correct. This is usually a QA
  thing.
  </li>
  <li>
  CLOSED - Basically means RIP for the bug and it's buried under the never ending
  flow of new bugs.
  </li>
</ul>

<p>
Now shortly afterward, we find the error in the strace log and fix the bug and
mark it as RESOLVED FIXED and mention that there was a change in the location of
configuration files, and that I will update the ebuild with a warning about it.
The bug now becomes resolved, and you are shown the following.
</p>

<figure link="/images/docs/bugzie-reso.png" caption="Resolved Bug"/>

<p>
A little below, you'll see the following:
</p>

<figure link="/images/docs/bugzie-options.png" caption="Bug Options"/>

<p>
This gives you the option of Reopening the bug if you wish to (i.e. the developer
thinks it's resolved but it's really not to your standards). Now our bug is
fixed! However, different resolutions can occur. Here's a small list:
</p>

<ul>
  <li>
  FIXED - The bug is fixed, follow the instructions to resolve your
  issue.
  </li>
  <li>
  INVALID - You did not do something specifically documented, causing the
  bug.
  </li>
  <li>
  DUPLICATE - You didn't use this guide and reported a duplicate bug
  :)
  </li>
  <li>
  WORKSFORME - Developer/person assigned the bug cannot reproduce your
  error.
  </li>
  <li>
  CANTFIX - Somehow the bug cannot be solved because of certain circumstances.
  These circumstances will be noted by the person taking the bug.
  </li>
  <li>
  WONTFIX - This is usually applied to new ebuilds or feature requests.
  Basically the developer does not want to add a certain feature because it is
  not needed, a better alternative exists, or it's just plain broken. Sometimes
  you may be given a solution to get said issue resolved.
  </li>
  <li>
  UPSTREAM - The bug cannot be fixed by the Gentoo development team, and
  have requested you take the problem upstream (the people that actually made
  the program) for review. Upstream has a few ways of handling bugs. These
  include mailing lists, irc channels, and even bug reporting systems. If
  you're not sure how to contact them, ask in the bug and someone will point
  you to the right direction.
  </li>
</ul>

<p>
Sometimes, before the bug can be resolved, a developer may request that you
test an updated ebulid.  In the next chapter we'll take a look at testing
ebuilds.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Testing Ebuilds</title>
<section>
<title>Getting The Files</title>
<body>

<p>
Let's say that you reported a bug for the foobar2 compile fix from earlier. Now
developers might find out what the problem is and might need you to test the
ebuild for them to be sure it works for you as well:
</p>

<figure link="/images/docs/bugzie-ebuild-request.png" caption="Ebuild Test Request"/>

<p>
Some rather confusing vocabulary is used here. First off, let's see what an
overlay is. An overlay is a special directory like <path>/usr/portage</path>,
the difference being that when you <c>emerge sync</c>, files contained within it
will not be deleted. Luckily, a special <path>/usr/local/portage</path>
directory is created for that purpose. Let's go ahead and set our portage
overlay in<path>/etc/make.conf</path>. Open make.conf up in your favorite editor
and add this towards the end.
</p>

<pre caption="Setting Up PORTDIR_OVERLAY">
PORTDIR_OVERLAY="/usr/local/portage"
</pre>

<p>
Now we'll want to create the appropriate directories to put our test ebuild
files in. In this case, we're supposed to put them in sys-apps/foobar2. You'll
notice that the second comment asks for a files directory for the patch. The
files directory holds the digests (md5sums of files for a particular version of
a package) and any other required files that aren't included with the standard
source archive (patches, init.d scripts, etc). This is a subdir in the package
directory called files. Go ahead and create these directories:
</p>

<pre caption="Setting Up The Category And Package Directories">
# <i>mkdir -p /usr/local/portage/sys-apps/foobar2/files</i>
</pre>

<note>
The -p in mkdir creates not only the directory you want but also any missing
parent directories as well (sys-apps and foobar2 in this case).
</note>

<p>
Ok now, we can go ahead and download the files. First, download the ebuild
into <path>/usr/local/portage/sys-apps/foobar2</path>, and then add the patch
to <path>/usr/local/portage/sys-apps/foobar2/files</path>. Now that we have the
files, we can begin working on testing the ebuild.
</p>

</body>
</section>
<section>
<title>Testing The ebuild</title>
<body>

<p>
The process to create an ebuild that can be used by emerge is fairly simple. You
must create a Manifest and a digest file for the ebuild. This can be done with
the ebuild command. Run it as shown.
</p>

<pre caption="Creating the Manifest and digest files">
# <i>ebuild foobar2-1.0.ebuild digest</i>
&gt;&gt;&gt; Generating digest file...
&lt;&lt;&lt; foobar2-1.0.tar.bz2
&gt;&gt;&gt; Generating manifest file...
&lt;&lt;&lt; foobar2-1.0.ebuild
&lt;&lt;&lt; files/digest-foobar2-1.0
&lt;&lt;&lt; files/foobar2-1.0-Makefile.patch
&gt;&gt;&gt; Computed message digests.
</pre>

<p>
Now let's test to see if it works as it should.
</p>

<pre caption="Testing With emerge -pv">
# <i>emerge -pv foobar2</i>

These are the packages that I would merge, in order:

Calculating dependencies ...done!
[ebuild  N    ] sys-apps/foobar2-1.0  0 kB [1]

Total size of downloads: 0 kB
Portage overlays:
 [1] /usr/local/portage
</pre>

<p>
It does seem to have worked! You'll notice the [1] next to the [ebuild] line.
That points to <path>/usr/local/portage</path>, which is the overlay we created
earlier. Now we go ahead and emerge the package.
</p>

<pre caption="Emerge Result">
# emerge foobar2
 Calculating dependencies ...done!
<comment>(compile info snipped)</comment>
>>> Unpacking foobar2-1.0.tar.bz2 to /var/tmp/portage/foobar2-1.0/work
 * Applying foobar2-1.0-Makefile.patch ...                                    [ ok ]
<comment>(compile info snipped)</comment>
>>> Merging sys-apps/foobar2-1.0 to /
>>> chris +sandbox(preinst)
--- /usr/
--- /usr/bin/
>>> /usr/bin/foobar2
</pre>

<p>
In the first section we see that the emerge started off as it should. The second
section shows our patch being applied successfully by the "[ ok ]" status
message to the right. The last section tells us the program compiled ok.  The
patch works! Now we can go and let the developer know that their patch works
fine, and that they can commit the fix to portage.
</p>

</body>
</section>
<section>
<title>Conclusion</title>
<body>

<p>
This concludes the howto on working with Bugzilla. I hope you find this useful.
If you have any questions, comments, or ideas regarding this document, please
send them to me at <mail
link="chriswhite@gentoo.org">chriswhite@gentoo.org</mail>. Special
thanks go to moreon for his notes on -g flags and compile errors, the people at
#gentoo-bugs for helping out with bug-wrangling, Griffon26 for his notes on
maintainer-needed, robbat2 for general suggestions and fox2mike for fixing up
the doc and adding stuff as needed.
</p>

</body>
</section>
</chapter>
</guide>
