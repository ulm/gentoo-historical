<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Id: hb-portage-ebuild.xml,v 1.1 2007/05/15 11:00:24 neysx Exp $ -->

<sections>

<version>1.3</version>
<date>2004-10-24</date>

<section>
<title>Emerge és Ebuild</title>
<body>

<p>
Az <c>ebuild</c> alkalmazás egy alacsony szintű interfész a Portage 
rendszerhez. Ezzel az alkalmazással speciális akciókat tudsz egy meghatározott 
ebuilddal csinálni. 

</p>

<p>
Az <c>ebuild</c>-dal még fejleszteni is tudsz; további információk az 
<c>ebuild</c>-ről a 
<uri link="/proj/en/devrel/handbook/handbook.xml">Fejlesztők 
Kézikönyvében</uri> találhatók. Valamint elmagyarázzuk neked, hogy a Portage 
rendszerében az ebuilddal mi történik egy szoftver telepítésénél, és hogy 
lehet egy ebuild utó-konfigurálását elvégezni a teljes emergelés nélkül.
</p>

</body>
</section>
<section>
<title>Szoftver telepítése kézzel</title>
<subsection>
<title>Forrás megszerzése &amp; Checksumm</title>
<body>

<p>
Amikor meghívod az <c>ebuild</c>-ot egy ebuild fájllal, akkor kiszámolja az 
állományok ellenőrző-összegét (checksumm) és összeveti a <path>Manifest</path> 
vagy a <path>files/digest-&lt;name&gt;-&lt;version&gt;</path> 
állományokban található értékkel. Csak ha ez sikeres, akkor sikeres a 
forrásfájlok megszerzése.
</p>

<p>
A forrás <c>ebuild</c>-dal történő megszerzéséhez futtasd:
</p>

<pre caption="Forrás megszerzése">
# <i>ebuild path/to/ebuild fetch</i>
</pre>

<p>
Ha az ebuild md5sum-ja nem egyezik a <path>Manifest</path> fájl megfelelő 
sorára, vagy a letöltött forrásé <path>files/digest-&lt;package&gt;</path> 
fájlban lévővel, akkor egy alábbihoz hasonló hibaüzenettel tér vissza a 
program.
</p>

<pre caption="Ebuild checksum hiba">
!!! File is corrupt or incomplete. (Digests do not match)
>>> our recorded digest: db20421ce35e8e54346e3ef19e60e4ee
>>>  your file's digest: f10392b7c0b2bbc463ad09642606a7d6
</pre>

<p>
Az ezt követő sor(ok) tartalmazza(k) a hibás fájl(ok) nevét.
</p>

<p>
Ha néhány megszerzett forrást és az ebuildot érvényesíteni szeretnél, akkor 
azt le tudod generálni a <path>Manifest</path> és 
<path>digest-&lt;package&gt;</path> fájlokba az <c>ebuild</c> digest
funkciójával:
</p>

<pre caption="Manifest and digest újragenerálása">
# <i>ebuild path/to/ebuild digest</i>
</pre>

</body>
</subsection>
<subsection>
<title>Források kicsomagolása</title>
<body>

<p>
A forrás <path>/var/tmp/portage</path> könyvtárba (vagy bármely más <path>/etc/
make.conf</path>-ban meghatározott könyvtárba) való kicsomagoláshoz, futtasd  
az <c>ebuild</c>-ot az unpack funkcióval:
</p>

<pre caption="Forrás kicsomagolása">
# <i>ebuild path/to/ebuild unpack</i>
</pre>

<p>
Ekkor az ebuildban lévő src_unpack() függvényt valósítja meg (vagy ennek 
hiányában egy alapértelmezett eljárást). Ehhez a lépéshez tartozik az összes 
alkalmazandó patch forrásba építése is.
</p>

</body>
</subsection>
<subsection>
<title>A forrás fordítása</title>
<body>

<p>
A következő lépés a mergelési folyamatban a forrás fordítása. Az 
<c>ebuild</c> compile funkciója az ebuildban lévő src_compile() függvényt 
hívja meg. Ez tartalmazza a konfigurációs lépéseket, ha a folyamat ezt igényli.
</p>

<pre caption="A forrás fordítása">
# <i>ebuild path/to/ebuild compile</i>
</pre>

<p>
Meggondoltan szerkeszd az ebuild src_compile() függvényt, ha változtatni 
szeretnél a fordítás utasításain. Viszont van pár Portage trükk, amit az 
<c>ebuild</c> alkalmazással tudsz a fordítási folyamatban kipróbálni. Ha már 
futtattál minden parancsot, akkor a végén hozz létre egy üres 
<path>.compiled</path> fájlt a munkakönyvtárban:
</p>

<pre caption="Információ átadása a Portage-nak a fordítás befejezéséről">
# <i>touch .compiled</i>
</pre>

</body>
</subsection>
<subsection>
<title>A Fájlok Ideiglenes Helyre telepítése</title>
<body>

<p>
A következő Portage lépés minden szükséges fájlok telepítése egy ideiglenes 
helyre. Ebből a könyvtárból fognak beépülni az élő fájlrendszerbe a 
csomagfájljok. Amikor futtatod az <c>ebuild</c> install funkcióját, akkor az 
ebuild src_install() függvényét hívod meg:
</p>

<pre caption="A fájlok telepítése">
# <i>ebuild path/to/ebuild install</i>
</pre>

</body>
</subsection>
<subsection>
<title>A Fájlok mergelése az élő fájlrendszerbe</title>
<body>

<p>
Az utolsó lépés minden fájl mergelése (beépítése) az élő fájlrendszerbe, és 
regisztrálása a Portage adatbázisba. Az <c>emerge</c> "qmerge" lépése a 
következő lépéseket teszi:
</p>

<ul>
  <li>Futtatja a pkg_preinst() funkciót, ha létezik</li>
  <li>Bemásol minden fájlt az élő fájlrendszerbe</li>
  <li>Regisztrálja a fájlokat a Portage adatbázisba</li>
  <li>Futtatja a pkg_postinst() funkciót, ha létezik</li>
</ul>

<p>
Futtasd az <c>ebuild</c> qmerge funkcióját a lépés megtételéhez:
</p>

<pre caption="A fájlok mergelése az élő fájlrendszerbe">
# <i>ebuild path/to/ebuild qmerge</i>
</pre>

</body>
</subsection>
<subsection>
<title>Ideiglenes könyvtár kitisztítása</title>
<body>

<p>
Végül tisztítsd ki az ideiglenes könyvtárat az <c>ebuild</c> clean 
funkciójának a használatával:
</p>

<pre caption="Ideiglenes könyvtár kitisztítása">
# <i>ebuild path/to/ebuild clean</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Egyéb ebuild funkciók</title>
<subsection>
<title>Minden merge-környéki parancs futtatása</title>
<body>

<p>
Használd az <c>ebuild</c> merge funkcióját a fetch, unpack, compile, install 
és qmerge parancsok egyszerre történő végrehajtásához:
</p>

<pre caption="Szoftware telepítése">
# <i>ebuild path/to/ebuild merge</i>
</pre>

</body>
</subsection>
<subsection>
<title>Konfigurációs utasítások végrehajtása</title>
<body>

<p>
Néhány alkalmazás telepítéséhez a csomag tartalmaz konfigurációs scriptet. 
Ezek az utasítások interaktívak, ezért nem futnak automatikusan. A 
futtatásukhoz az ebuildnak tartalmaznia kell (nem kötelező) egy config() 
függvényt, és használnod kell hozzá az <c>ebuild</c> config funkcióját:
</p>

<pre caption="Egy csomag konfigurálása">
# <i>ebuild path/to/ebuild config</i>
</pre>

</body>
</subsection>
<subsection>
<title>Csomag (RPM) építése</title>
<body>

<p>
A Portage képes az ebuildból bináris csomagot (package), vagy egy ezzel 
egyenértékű RPM fájlt készíteni. Használd ehhez az <c>ebuild</c> rpm 
funkcióját az archívum elkészítéséhez. A két bináris csomag között van néhány 
különbség:
</p>

<ul>
  <li>
    A package funkció tartalmazza a merge funkció lépéseit, azaz a csomag 
    építése előtt futtatja az ehhez szükséges lépéseket (fetch, unpack, 
    compile, install)
  </li>
  <li>
    Az rpm funkció egy RPM csomagot épít a létrejött fájlokból, <e>miután</e> 
    az <c>ebuild</c> lefutott az install funkcióval
  </li>
</ul>

<pre caption="Csomagok létrehozása">
<comment>(Portage-kompatibilis bináris csomaghoz)</comment>
# <i>ebuild path/to/ebuild package</i>

<comment>(RPM csomaghoz)</comment>
# <i>ebuild path/to/ebuild rpm</i>
</pre>

<p>
A létrehozott RPM fájl nem tartalmazza az ebuildban meghatározott függőségi 
információkat.
</p>

</body>
</subsection>
</section>
<section>
<title>Még információ</title>
<subsection>
<body>

<p>
Kérlek nézd át az alábbi Portageról, az ebuild alkalmazás vagy ebuild fájlok 
használatáról szóló man lapokat:
</p>

<pre caption="Man lapok">
$ <i>man portage</i>    <comment>(Magáról a Portageról)</comment>
$ <i>man emerge</i>     <comment>(Az emerge parancs)</comment>
$ <i>man ebuild</i>     <comment>(Az ebuild parancs)</comment>
$ <i>man 5 ebuild</i>   <comment>(Az ebuild fájl szintakszis)</comment>
</pre>

<p>
Valamint találhatsz még fejlesztőknek szánt információkat a 
<uri link="/proj/en/devrel/handbook/handbook.xml">Fejlesztők 
Kézikönyvében</uri>.
</p>

</body>
</subsection>
</section>
</sections>
