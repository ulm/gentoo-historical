<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/Attic/2.6-koutput-user.xml,v 1.1 2005/02/23 16:30:13 bass Exp $ -->

<guide link="/doc/en/2.6-koutput-user.xml">

<title>Kernels 2.6 y "koutput"</title>
<author title="Desarrollador">
  <mail link="latexer@gentoo.org">Peter Johanson</mail>
</author>
<author title="Editor">
  <mail link="antifa@gentoo.org">Ken Nowack</mail>
</author>
<author title="Editor">
  <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>
<author title="Editor">
    <mail link="bass@gentoo.org">José Alberto Suárez López</mail>
</author>
<author title="Traductor">
    <mail link="nmiyasato@datafull.com">Nicolás Miyasato</mail>
</author>

<abstract>
Esta guía cubre como utilizar el nuevo método "koutput" de Gentoo para manejar 
los núcleos 2.6 y sus módulos.
</abstract>

<license/>

<version>1.2</version>
<date>28 de Julio, 2004</date>

<chapter>
<title>Descripción</title>
<section>
<body>

<p>
El núcleo 2.6, entre otras cosas, provee muchas mejoras a la infraestructura
para la creacion del núcleo, o "sistema kbuild". Entre las funcionalidades que
fueron agregadas, el núcleo 2.6 permite ahora que todos los archivos creados
por el núcleo sean direccionados a un lugar separado arbitrario. Esto nos
proporciona varias ventajas sobre el viejo método:
</p>

<ul>
  <li>
    Arbitrariamente, cualquier usuario puede utilizar las mismas fuentes para
    construir núcleos, direccionando a algún lugar en su directorio personal.
  </li>
  <li>
    Los núcleos pueden ser construidos para varias arquitecturas, y los 
    archivos generados para cada arquitectura no serán perdidos.
  </li>
  <li>
    <path>/usr</path> puede ser montado como solo-lectura y aún así permitir
    que los núcleos sean generados, configurados, etc.
  </li>
  <li>
    Módulos externos pueden ser construidos sin el requisito de permisos de escritura a
    <path>/usr/src/linux</path>
  </li>
</ul>

<p>
Este último hecho es importante, ya que anteriormente portage necesitaba
obtener temporalmente, permisos de escritura a un directorio en el sistema
de archivos en vido, de manera de poder compilar módulos externos contra el código
fuente del núcleo 2.6. Si usted elige <b>no</b> usar koutput para los núcleos
2.6, la mayoría de los módulos del núcleo van a fallar, debido a esta
restricción. Para permitirle a portage que escriba a <path>/usr/src/linux</path> 
durante el emerge del módulo del núcleo, usted puede utilizar config-kernel:
</p>

<note>
No todas las funcionalidades del config-kernel son discutidos en esta guía. Para
el resto de la información ver <b>man config-kernel</b>
</note>

<pre caption="Habilitando escritura a /usr/src/linux">
# <i>config-kernel --allow-writable=yes</i>
</pre>

<p>
Usted puede revertir esta decisión en cualquier momento usando nuevamente config-kernel.
</p>

<pre caption="Deshabilitando escritura a /usr/src/linux">
# <i>config-kernel --allow-writable=no</i>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Ventajas</title>
<section>
<body>

<p>
Te estarás preguntando, "¿Y a mi que me importa?" El problema que
inspiró esta funcionalidad fue un inconveniente con los ebuilds de los módulos 
del kernel como nvidia-kernel o hostap-driver. Estos ebuilds necesitan usar 
el sistema de contrucción del kernel para compilar, sin embargo, construirlos
necesitaría hacer una actualización de los archivos en 
<path>/usr/src/linux</path>, y fallaría debido a las violaciones del sandbox.
</p>

<note>
El <b>sandbox</b> de Gentoo es un sistema que evita que portage escriba al 
sistema de archivos en vivo hasta el último paso de de la instalación del 
paquete.
</note>

<p>
Varios pasos que dependen unos de otros pueden ser tomados para resolver
este inconveniente. Para hacerla corta, las construcciones de los kernels 
deben redirigir todos sus archivos a un lugar diferente cuando estos son
compilados, y luego, las compilaciones de los módulos externos <b>también</b>
deben de hacer esto, solamente redirigen tu salida a algún subdirectorio del
lugar temporal de construcción. Dejando a los módulos redirigir sus 
archivos construidos a un lugar permitido para la contrucción, esos
errores tan feos provocados por el sandbox son evitados.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Habilitando koutput</title>
<section>
<body>

<p>
Los kernels 2.6 determinan el destino de sus archivos de acuerdo a dos
variables de entorno, <c>KBUILD_OTPUT</c> y <c>O</c>. <c>KBUILD_OTPUT</c> debe
de ser seteado en el entorno, y luego puede ser redefinido en la lína de comandos
especificando un nuevo valor para <c>O</c>. Por ejemplo:
</p>

<pre caption="Configurando una salida a mano">
# <i>cd /usr/src/linux></i>
# <i>export KBUILD_OUTPUT="/var/tmp/kernel-output/2.6.4"</i>
# <i>mkdir /var/tmp/kernel-output/2.6.4</i>
<comment>Configurar nuestra ubicación de salida, y verificar que dicho directorio exista</comment>
# <i>make menuconfig</i>
<comment>El .config generado termina en  /var/tmp/kernel-output/2.6.4</comment>
# <i>make O=/home/joe/kernels/2.6.4 menuconfig</i>
<comment>El .config generado termina ahora en /home/joe/kernels/2.6.4</comment>
</pre>

<p>
La herramienta de Gentoo <b>config-kernel</b>, nos provee un mecanismo para 
automatizar alguno de estos procesos. Utilizando config-kernel, usted puede 
definir un prefijo en donde los archivos de los kernels que son instalados 
por portage serán ubicados.
</p>

<pre caption="Preparando el entorno con config-kernel">
# <i>config-kernel --output-dir=/home/joe/kernels</i>
</pre>

<p>
El comando de arriba hará que todos los nuevos kernels instalados manden sus
salidas a <path>/home/joe/kernels/KV</path> por defecto, en donde <b>KV</b>
es la versión del kernel. Para configurar la ruta de salida por defecto de Gentoo,
que es <path>/var/tmp/kernel-output/</path>, se puede hacer:
</p>

<pre caption="Preparando el entorno con config-kernel">
# <i>config-kernel --output-dir=default</i>
</pre>

<p>
Un usuario también puede convertir núcleos que ya fueron instalados al nuevo
método usando config-kernel. Teniendo en cuenta que esto puede causar que todos los
archivos previamente generados sean borrados, ya que <c>make mrproper</c> tiene
que ser ejecutado durante este proceso.
</p>

<pre caption="Convirtiendo el núcleo actual">
# <i>config-kernel --make-koutput=/usr/src/linux-2.6.3</i>
</pre>

<p>
El comando de arriba convierte el núcleo encontrado en 
<path>/usr/src/linux-2.6.3</path> a redireccionar su salida a un directorio
diferente. Si el directorio de salida ha sido seteado previamente con
<c>--output-dir /some/path</c>, entonces ese prefijo será usado. De otra 
manera, el valor por defecto de gentoo <path>/var/tmp/kernel-output/KV</path> 
será usado.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Repercusiones</title>
<section>
<body>

<p>
Luego de configurar para que use un directorio de salida diferente, los cambios
no serán vistos en la configuración e instalación de un núcleo. Sin embargo, 
hay algunos cambios en archivos clave que se deben de tener en cuenta. Los
archivos principales a tomar en cuenta con el .config y el bzImage generados
despues de la compilación del núcleo. Debajo se encuentra una tabla que muestra
las ubicaciones originales y las nuevas para estos archivos clave. La tabla
asume un núcleo 2.6.4 que direcciona al directorio por defecto de Gentoo, el
cual es <path>/var/tmp/kernel-output/2.6.4</path>.
</p>

<table>
<tr>
  <th>Vieja ubicación del archivo</th>
  <th>Nueva ubicación del archivo</th>
</tr>
<tr>
  <ti>/usr/src/linux/.config</ti>
  <ti>/var/tmp/kernel-output/2.6.4/.config</ti>
</tr>
<tr>
  <ti>/usr/src/linux/arch/i386/boot/bzImage</ti>
  <ti>/var/tmp/kernel-output/2.6.4/arch/i386/boot/bzImage</ti>
</tr>
</table>

<p>
Este cambio de la ubicación es importante. Dos procesos son afectados en gran
medida debido a esta nueva ubicación de los archivos, (1) la copia de una nueva 
configuración del núcleo dentro de la ubicación cuando se hace la 
actualización de las fuentes del núcleo, y (2) cuando copias el .config; es
importante recordar que necesitas copiarlo desde el destino original del 
núcleo hacia el nuevo destino del nuevo núcleo. Para demostrar como una 
actualización del núcleo sería hecha usando koutput, un ejemplo de actualización
de vanilla-sources-2.6.4 a vanilla-sources-2.6.5 es descripto:
</p>

<note>
Aquí, asumimos que el prefijo de salida se encuentra configurado a 
<path>/var/tmp/kernel-output</path> y que ambas fuentes de los núcleos se
encuentran instalados.
</note>

<pre caption="Actualización del núcleo utilizando koutput">
# <i>cp /var/tmp/kernel-output/2.6.4/.config /var/tmp/kernel-output/2.6.5/</i>
<comment>Copiamos nuestro .config dentro del nuevo directorio de salida</comment>
# <i>config-kernel --set-symlink=2.6.5</i>
# <i>cd /usr/src/linux</i>
<comment>Nos movemos hacia nuestro nuevo fuente del núcleo</comment>
# <i>make oldconfig</i>
# <i>make &amp;&amp; make modules_install</i>
<comment>Compilamos nuestro nuevo núcleo y  módulos</comment>
# <i>mount /boot</i>
# <i>cp /var/tmp/kernel-output/2.6.5/arch/i386/boot/bzImage /boot/</i>
# <i>umount /boot</i>
<comment>Instalamos la nueva imagen del núcleo</comment>
</pre>

<p>
Para los módulos del núcleo que son construídos contra núcleos utilizando el
nuevo sistema, como siempre, no es necesario todo esto, ya que emerge se encarga de todo por ti. En estos momentos, todavía se
encuentran algunos módulos que están siendo convertidos a la nueva
configuración, o están en etapa de pruebas. Si la versión estable de un
módulo falla, trate primero de instalar la versión <b>~arch</b>:
</p>

<pre>
# <i>ACCEPT_KEYWORDS='~x86' emerge foo</i>
<comment>El comando de arriba instala la versión de prueba del paquete foo.</comment>
</pre>

<p>
Si esto todavía falla, por favor abre un bug en <uri
link="http://bugs.gentoo.org">http://bugs.gentoo.org</uri>, y el módulo 
del núcleo será actualizado al nuevo sistema tan pronto como sea posible.
</p>

</body>
</section>
</chapter>
</guide>
