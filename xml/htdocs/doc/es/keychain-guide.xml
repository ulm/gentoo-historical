<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/keychain-guide.xml,v 1.11 2013/08/31 09:40:17 nimiux Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide disclaimer="obsolete" redirect="https://wiki.gentoo.org/wiki/Keychain/es" lang="es">
<title>Guía Keychain en Gentoo Linux</title>

<author title="Autor">
  <mail link="eric.brown@dnbrown.net">Eric Brown</mail>
</author>
<author title="Editor">
  <mail link="vanquirius@gentoo.org">Marcelo Góes</mail>
</author>
<author title="Editor">
  <mail link="nightmorph"/>
</author>
<author title="Traductor">
  <mail link="chiguire@gentoo.org">John Christian Stoddart</mail>
</author>
<author title="Traductor">
  <mail link="nimiux"/>
</author>

<abstract>
Este documento describe cómo usar contraseñas compartidas de ssh
junto con el programa keychain. Asume un conocimiento básico de
criptografía con clave pública.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>3</version>
<date>2013-07-24</date>

<chapter>
<title>Información de fondo</title>
<section>
<title>El problema</title>
<body>

<p>
Así que tiene todas esas hermosas máquinas Gentoo ejecutando <c>sshd</c>,
pero es algo inconveniente tener que constantemente escribir todas esas
claves de login, ¿verdad? O tal vez tenga un guión o trabajo programado
que requiere una manera conveniente de usar una conexión ssh. De cualquier
manera, hay una solución a este problema, comenzando con autenticación con
clave pública.
</p>
</body>
</section>

<section>
<title>¿Cómo funciona la autenticación con clave pública?</title>
<body>

<p>
Asumamos que tenemos un cliente que requiere conectarse a un servidor
por medio de sshd. El cliente primero genera el par de claves y le
entrega la clave pública al servidor. Luego, cuando el cliente intente
conectarse, el servidor envía un reto cifrado con la clave
pública. Solamente el titular de la correspondiente clave privada (el
cliente) puede descifrar el reto, así que como puede haber adivinado,
la respuesta correcta conduce a la autenticación exitosa.
</p>
</body>
</section>
</chapter>

<chapter>
<title>¿Cómo usar la autenticación con clave pública?</title>
<section>
<title>Genere su par de claves</title>
<body>

<p>
El primer paso consiste en crear su par de claves. Para hacer esto,
usaremos el comando <c>ssh-keygen</c> de la siguiente manera:
</p>

<pre caption="Generar el par de claves">
$ <i>ssh-keygen -t dsa</i>
<comment>(Acepte los valores por defecto y asegúrese de ingresar una
contraseña de frase (passphrase) fuerte)</comment>
</pre>

<warn>
Asegúrese de usar una contraseña-frase fuerte, ¡especialmente si esta
clave se usará para ingresos del usuario root!
</warn>

<p>
Ahora debería tener una clave privada en <path>~/.ssh/id_dsa</path> y
una clave pública en <path>~/.ssh/id_dsa.pub</path>. Estamos listos
para copiar la clave pública al servidor remoto.
</p>
</body>
</section>

<section>
<title>Preparar el servidor</title>
<body>

<p>
Copiaremos el archivo <path>~/.ssh/id_dsa.pub</path> al servidor que
corre sshd. Agregaremos la clave al archivo
<path>~/.ssh/authorized_keys</path> del usuario que se conectará a
este servidor. Aquí está un ejemplo de cómo hacerlo si ya tiene acceso
por vía de ssh al servidor.
</p>

<pre caption="Copiar la clave pública al servidor">
$ <i>scp ~/.ssh/id_dsa.pub server_user@server:~/myhost.pub</i>
$ <i>ssh server_user@server "cat ~/myhost.pub >> ~/.ssh/authorized_keys"</i>
$ <i>ssh server_user@server "cat ~/.ssh/authorized_keys"</i>
</pre>

<p>
La salida del comando de la última línea le mostrará el contenido
del archivo <path>~/.ssh/authorized_keys</path>. Revise para ver si
está bien.
</p>
</body>
</section>

<section>
<title>Probar la configuración</title>
<body>

<p>
Teóricamente, si todo ha salido bien y el demonio ssh del servidor lo
permite, deberá obtener acceso ssh sin contraseña en este
momento. Todavía hará falta descifrar la clave privada en el cliente
con la contraseña de frase que establecimos antes, pero no confunda esto
con la contraseñas de frase del usuario en el servidor.
</p>

<pre caption="Probar las claves">
$ <i>ssh server_user@server</i>
</pre>

<p>
Esperemos que se le haya solicitado la contraseña de frase id_dsa y que
haya podido obtener acceso por vía ssh como server_user al
servidor. Si no, ingrese como server_user al servidor y verifique
el contenido del archivo <path>~/.ssh/authorized_keys</path> para
asegurarse que cada entrada esté en su propia línea. Quizás quiera
revisar la configuración de sshd para determinar que prefiera usar la
autenticación por clave pública cuando ésta esté disponible.
</p>

<p>
En este momento, seguro que está pensando "¿Cuál será la gracia?
¡Apenas he cambiado una contraseña por otra!" Relájese, la siguiente
sección le mostrará exactamente cómo hacer para ahorrar su precioso
tiempo.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Hacer que la autenticación por clave pública sea conveniente</title>
<section>
<title>Gestión típica de claves con ssh-agent</title>
<body>

<p>
Si nos ha seguido la corriente hasta ahora, probablemente piense que
sería grandioso si pudiésemos, de alguna manera, descifrar nuestra(s)
clave(s) privada una sola vez y así poder usar ssh libremente sin más
contraseñas. ¡Es su día de suerte! porque es exactamente para lo que
sirve el programa <c>ssh-agent</c>.
</p>

<p>
El programa <c>ssh-agent</c> normalmente se inicia al comienzo de una
sesión X, o al iniciar una sesión con un guión como
<path>~/.bash_profile</path>. Funciona creando una conexión (socket) y
registrando las variables de entorno apropiadas para que cualquier
aplicación posterior pueda aprovechar sus servicios al conectarse a
este "enchufe" (socket). Por supuesto, tiene mucho sentido ejecutarlo a
nivel del proceso padre de su sesión X si desea usar las claves
descifradas en las aplicaciones X posteriores.
</p>

<pre caption="Preparar el ssh-agent">
$ <i>ssh-agent</i>
</pre>

<note>
Este ssh-agent mantendrá las claves descifradas hasta que termine este
proceso. Si desea establecer un límite de tiempo para las claves, use
el argumento -t tal como lo describe <c>man ssh-agent</c>.
</note>

<p>
Al ejecutar ssh-agent, le notificará del identificador del proceso (PID) y
además establecerá valores para algunas variables de entorno como
<c>SSH_AUTH_SOCK</c> y <c>SSH_AGENT_PID</c>. Debería también
automáticamente agregar <path>~/.ssh/id_dsa</path> a su propia
colección y pedirle la contraseña de frase apropiada. Si tiene otras
claves privadas, puede agregarlas al mismo ssh-agent con el comando
<c>ssh-add</c> de la siguiente manera:
</p>

<pre caption="Agregar más claves privadas a ssh-agent">
$ <i>ssh-add somekeyfile</i>
</pre>

<p>
Ahora viene la magia. Ya que debe tener lista su clave privada
descifrada, podrá ingresar al servidor por ssh sin ingresar
contraseña alguna.
</p>

<pre caption="Ingresar vía ssh sin contraseña">
$ <i>ssh server</i>
</pre>

<p>
¿No sería bueno saber cómo parar ssh-agent cuando lo requiera?
</p>

<pre caption="Parar el ssh-agent">
$ <i>ssh-agent -k</i>
</pre>

<note>
Si ha tenido algún problema en hacer funcionar a ssh-agent, tal vez
sea porque sigue corriendo. Puede acabar con él como cualquier otro
proceso con <c>killall ssh-agent</c>.
</note>

<p>
Si desea aún más comodidad del ssh-agent, proceda a la siguiente
sección sobre el uso de keychain. Asegúrese de acabar con el ssh-agent
que esté siendo ejecutar tal como en el ejemplo anterior, si así lo desea.
</p>
</body>
</section>

<section>
<title>Sacar hasta la última gota de comodidad de ssh-agent</title>
<body>

<p>
Keychain le permitirá reutilizar un ssh-agent entre un ingreso y otro y
opcionalmente, pedirle la contraseña de frase cada vez que un usuario
haga ingreso. Pero, antes de adelantarnos demasiado, vamos a ejecutar
emerge.
</p>

<pre caption="Instalar keychain">
# <i>emerge keychain</i>
</pre>

<p>
Asumiendo que esto ocurrió sin problemas, podemos ahora usar keychain
libremente. Agregue lo siguiente a su <path>~/.bash_profile</path>
para activarlo:
</p>

<pre caption="Activar keychain en .bash_profile">
keychain ~/.ssh/id_dsa
. ~/.keychain/$HOSTNAME-sh-gpg
</pre>

<note>
Puede agregar a gusto más claves privadas a la línea del
comando. Además si quiere que solicite la contraseña de frase cada vez
que inicie un shell, agregue la opción --clear.
</note>

<note>
Si no está usando bash, revise la sección <b>EXAMPLES</b> en la página
<c>man keychain</c> para ver ejemplos de cómo usarlo con otros
shells. La idea es que estos comandos sean ejecutados cada vez que use
un shell.
</note>

<p>
Ahora vamos a probarlo. Primero aseguremos que hemos acabado con el
ssh-agent iniciado en la sección anterior e iniciamos un nuevo shell,
usualmente haciendo ingreso o abriendo otro terminal. Deberá entonces
pedirle la contraseña para cada clave especificada en la línea del
comando. Todos los shells abiertos después de este punto deben
reutilizar al ssh-agent, permitiéndole realizar conexiones ssh sin
contraseña una y otra vez.
</p>
</body>
</section>
<section>
<title>Usar keychain con KDE</title>
<body>

<p>
Si es usuario de KDE, en vez usar <path>~/.bash_profile</path> le puede
dejar a KDE que se encargue del ssh-agent por Ud. Para ello, tendrá que
editar tanto el fichero <path>/etc/kde/agent-startup.sh</path>, que se
lee durante el inicio de KDE, como el fichero
<path>/etc/kde/shutdown/agent-shutdown.sh</path>, que es ejecutado durante
el apagado de KDE. A continuación se muestra como podrían editarse estos
ficheros:
</p>

<pre caption="Editando /etc/kde/agent-startup.sh">
if [ -x /usr/bin/ssh-agent ]; then
  eval "$(/usr/bin/ssh-agent -s)"
fi
</pre>

<pre caption="Editando /etc/kde/shutdown/agent-shutdown.sh">
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi
</pre>

<p>
Ahora, todo lo que tiene que hacer es iniciar un terminal de su elección, como
Konsole, y cargar las claves que le gustaría usar. Por ejemplo:
</p>

<pre caption="Cargar la contraseña ssh">
$ <i>keychain ~/.ssh/id_dsa</i>
<comment>(Ingrese la contraseña de su clave)</comment>
</pre>

<p>
Sus claves serán recordadas hasta que finalice su sesión de KDE o finalice
manualmente el proceso ssh-agent (vía el comando kill).
</p>

</body>
</section>
</chapter>

<chapter>
<title>Comentarios al concluir</title>
<section>
<title>Consideraciones de seguridad</title>
<body>

<p>
Por supuesto, el uso de ssh-agent podrá agregarle un toque de
inseguridad a su sistema. Si otro usuario se apoderara de su shell
mientras use el baño, pudiese hacer ingreso a todos sus servidores sin
contraseña. Como resultado, es un riesgo de seguridad para los
servidores a los cuales se conecta, por lo que debiera consultar la
política de seguridad local. De hacer uso de ssh-agent, tome las
medidas apropiadas para asegurar la seguridad de sus sesiones.
</p>
</body>
</section>

<section>
<title>Solución de problemas</title>
<body>

<p>
La mayoría de lo que hemos visto debe funcionar bien, pero si halla
problemas, valdrá la pena conocer algunas cosas útiles.
</p>

<ul>
  <li>
    Si no puede conectarse sin ssh-agent, considere usar ssh con el
    argumento -vvv para averiguar qué está ocurriendo. A veces el servidor
    no está configurado para hacer uso de autenticación con claves
    públicas y ¡a veces está configurado para pedir contraseñas locales
    de todos modos! Si este es el caso, tal vez quiera usar también la
    opción -o con ssh o cambiar el archivo sshd_config del servidor.
  </li>
  <li>
    Si tiene problemas con ssh-agent o keychain, podría ser que no
    esté usando un shell que entienda los comandos utilizados. Consulte
    las páginas del manual de ssh-agent y keychain para los detalles de cómo
    trabajar con otros shells.
  </li>
  <li>
    Puede visitar también la <uri
    link="http://www.funtoo.org/en/security/keychain/intro/">página
    principal de keychain</uri> para recomendaciones de uso.
  </li>
</ul>
</body>
</section>
</chapter>
</guide>
