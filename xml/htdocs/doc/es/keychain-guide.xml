<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/keychain-guide.xml,v 1.2 2005/02/23 16:35:29 bass Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/es/keychain-guide.xml">
<title>Guía Keychain en Gentoo Linux</title>

<author title="Autor">
  <mail link="airuike@gmail.com">Eric Brown</mail>
</author>
<author title="Editor-Es">
    <mail link="bass@gentoo.org">José Alberto Suárez López</mail>
 </author>
<author title="Editor-Es Adjunto">
    <mail link="chiguire@gentoo.org">John Christian Stoddart</mail>
</author>

<abstract>
Este documento describe cómo usar contraseñas compartidas de ssh 
junto con el programa keychain. Asume un conocimiento básico de
criptografía con clave pública.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.0 -->
<license/>

<version>1.1</version>
<date>2004-12-02</date>

<chapter>
<title>Información de fondo</title>
<section>
<title>El problema</title>
<body>

<p>
Así que tiene todas esas hermosas máquinas Gentoo corriendo sshd, pero
es algo inconveniente tener que constantemente escribir todas esas
claves de login, ¿verdad? O tal vez tenga un guión o trabajo
programado que requiere una manera conveniente de usar una conexión
ssh. De cualquier manera, hay una solución a este problema, comenzando
con autentificación con clave pública.
</p>
</body>
</section>

<section>
<title>¿Cómo funciona la autentificación con clave pública?</title>
<body>

<p>
Asumamos que tenemos un cliente que requiere conectarse a un servidor
por medio de sshd. El cliente primero genera una clave en par y le
entrega la clave pública al servidor. Luego, cuando el cliente intente
conectarse, el servidor envío un reto encriptada con la clave
pública. Solamente el cliente que ostente la clave par privada
correcta puede descifrar el reto, lo cual concluye en una
autentificación exitosa.
</p>
</body>
</section>
</chapter>

<chapter>
<title>¿Cómo usar la autentificación con clave pública?</title>
<section>
<title>Genere su propia clave par</title>
<body>

<p>
El primer paso consiste en crear su clave par. Para hacer esto,
usaremos el comando <c>ssh-keygen</c> de la siguiente manera:
</p>

<pre caption="Generando la clave par">
$ <i>ssh-keygen -t dsa</i>
<comment>(Acepte los valores por defecto y asegúrese de ingresar una
contraseña-frase fuerte)</comment>
</pre>

<warn>
Asegúrese de usar una contraseña-frase fuerte, ¡especialmente si esta
clave se usará para logons del usuario root!
</warn>

<p>
Ahora debería tener una clave privada en <path>~/.ssh/id_dsa</path> y
una clave pública en <path>~/.ssh/id_dsa.pub</path>. Estamos listos
para copiar la clave pública al servidor remoto.
</p>
</body>
</section>

<section>
<title>Preparando al servidor</title>
<body>

<p>
Copiaremos el archivo <path>~/.ssh/id_dsa.pub</path> al servidor que
corre sshd. Agregaremos la clave al archivo
<path>~/.ssh/authorized_keys</path> del usuario que se conectará a
este servidor. Aquí está un ejemplo de cómo hacerlo si ya tiene acceso
por vía de ssh al servidor.
</p>

<pre caption="Copiando la clave pública al servidor">
$ <i>scp ~/.ssh/id_dsa.pub server_user@server:~/myhost.pub</i>
$ <i>ssh server_user@server "cat ~/myhost.pub >> ~/.ssh/authorized_keys"</i>
$ <i>ssh server_user@server "cat ~/.ssh/authorized_keys"</i>
</pre>

<p>
La respuesta del comando de la última línea le mostrará el contenido
del archivo <path>~/.ssh/authorized_keys</path>. Revise para ver si
está bien.
</p>
</body>
</section>

<section>
<title>Probando la configuración</title>
<body>

<p>
Teóricamente, si todo ha salido bien y el demonio ssh del servidor lo
permite, deberá obtener acceso ssh sin contraseña en este
momento. Todavía hará falta descifrar la clave privada en el cliente
con la contraseña-frase que establecimos antes, pero no confunda esto
con la contraseñas-frase del usuario en el servidor.
</p>

<pre caption="Probando las claves">
$ <i>ssh server_user@server</i>
</pre>

<p>
Esperemos que se le haya solicitado la contraseña-frase id_dsa y que
haya podido obtener acceso por vía ssh como server_user al
servidor. Si no, haga login como server_user al servidor y verifique
el contenido del archivo <path>~/.ssh/authorized_keys</path> para
asegurarse que cada entrada esté en su propia línea. Quizás quiera
revisar la configuración de sshd para determinar que prefiera usar la
autentificación por clave pública cuando ésta esté disponible.
</p>

<p>
En este momento, seguro que está pensando "¿Cuál será la gracia?
¡Apenas he cambiado una contraseña por otra!" Relájese, la siguiente
sección le mostrará exactamente cómo hacer para ahorrar su precioso
tiempo.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Haciendo que la autentificación por clave pública sea conveniente</title>
<section>
<title>Manejo típico de claves con ssh-agent</title>
<body>

<p>
Si nos ha seguido la corriente hasta ahora, probablemente piense que
sería grandioso si pudiésemos, de alguna manera, descifrar nuestra(s)
clave(s) privada una sóla vez y así poder usar ssh libremente sin más
contraseñas. ¡Es su día de suerte! porque es exactamente para lo que
sirve el programa <c>ssh-agent</c>.
</p>

<p>
El programa <c>ssh-agent</c> se inicia usualmente al comienzo de una
sesión X, o al iniciar una sesión con un guión como
<path>~/.bash_profile</path>. Funciona creando una conexión (socket) y
registrando las variables de entorno apropiadas para que cualquier
aplicación subsecuente pueda aprovechar sus servicios al conectarse a
este "enchufe". Por supuesto, tiene mucho sentido ejecutarlo a
nivel del proceso progenitor de su sesión X si desea usar las claves
descifradas en las aplicaciones X subsecuentes.
</p>

<pre caption="Preparando el ssh-agent">
$ <i>ssh-agent</i>
</pre>

<note>
Este ssh-agent mantendrá las claves descifradas hasta que termine este
proceso. Si desea establecer un límite de tiempo para las claves, use
el argumento -t tal como lo describe <c>man ssh-agent</c>.
</note>

<p>
Al correr ssh-agent, le notificará del PID del proceso y además
establecerá valores para algunas variables de entorno como
<c>SSH_AUTH_SOCK</c> y <c>SSH_AGENT_PID</c>. Debería también
automáticamente agregar <path>~/.ssh/id_dsa</path> a su propia
colección y pedirle la contraseña-frase apropiada. Si tiene otras
clavez privadas, puede agregarlas al mismo ssh-agent con el comando
<c>ssh-add</c> de la siguiente manera:
</p>

<pre caption="Agragando más claves privadas a ssh-agent">
$ <i>ssh-add somekeyfile</i>
</pre>

<p>
Ahora viene la magia. Ya que debe tener su clave privada
descifrada y lista, podrá ingresar al servidor por ssh sin ingresar
contraseña alguna.
</p>

<pre caption="Haciendo ssh sin contraseña">
$ <i>ssh server</i>
</pre>

<p>
¿No sería bueno saber cómo parar ssh-agent cuando lo requiera?
</p>

<pre caption="Parando el ssh-agent">
$ <i>ssh-agent -k</i>
</pre>

<note>
Si ha tenido algún problema en hacer funcionar a ssh-agent, tal vez
sea porque sigue corriendo. Puede acabar con él como cualquier otro
proceso con <c>killall ssh-agent</c>.
</note>

<p>
Si desea aun más conveniencia de ssh-agent, proceda a la siguiente
sección sobre el uso de keychain. Asegúrese de acabar con el ssh-agent
que esté corriendo como el ejemplo anterior, si así lo desea.
</p>
</body>
</section>

<section>
<title>Sacandole hasta la última gota de conveniencia de ssh-agent</title>
<body>

<p>
Keychain le permitirá reutilizar un ssh-agent entre un login y otro y
opcionalmente, pedirle la contraseña-frase cada vez que un usuario
haga login. Pero, antes de adelantarnos demasiado, vamos a hacer un
emerge.
</p>

<pre caption="Instalando keychain">
# <i>emerge keychain</i>
</pre>

<p>
Asumiendo que esto ocurrió sin problemas, podemos ahora usar keychain
libremente. Agregue lo siguiente a su <path>~/.bash_profile</path>
para activarlo:
</p>

<pre caption="Activando keychain en .bash_profile">
keychain ~/.ssh/id_dsa
. ~/.keychain/$HOSTNAME-sh
</pre>

<note>
Puede agregar a gusto más claves privadas a la línea del
comando. Además si quiere que solicite la contraseña-frase cada vez
que inicie un shell, agregue la opción --clear.
</note>

<note>
Si no está usando bash, revise la sección <b>EXAMPLES</b> en la página
<c>man keychain</c> para ver ejemplos de cómo usarlo con otros
shells. La idea es que estos comandos sean ejecutados cada vez que use
un shell.
</note>

<p>
Ahora vamos a probarlo. Primero aseguremos que hemos acabado con el
ssh-agent iniciado en la sección anterior y iniciamos un nuevo shell,
usualmente haciendo login o abriendo otro terminal. Deberá entonces
pedirle la contraseña para cada clave especificada en la línea del
comando. Todos los shells abiertos después de este punto deben
reutilizar al ssh-agent, permitiéndole realizar conexiones ssh sin
contraseña una y otra vez.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Comentarios al concluir</title>
<section>
<title>Consideraciones de seguridad</title>
<body>

<p>
Por supuesto, el uso de ssh-agent podrá agregarle un toque de
inseguridad a su sistema. Si otro usuario se apoderara de su shell
mientras use el baño, pudiese hacer login a todos sus servidores sin
contraseña. Como resultado, es un riesgo de seguridad para los
servidores a los cuales se conecta, por lo que debiera consultar la
política de seguridad local. De hacer uso de ssh-agent, tome las
medidas apropiadas para asegurar la seguridad de sus sesiones.
</p>
</body>
</section>

<section>
<title>Solucionando problemas</title>
<body>

<p>
La mayoría de lo que hemos visto debe funcionar bien, pero si halla
problemas, valdrá la pena conocer algunas cosas útiles.
</p>

<ul>
  <li>
    Si no puede conectarse sin ssh-agent, considere usar ssh con el
argumento -vvv para averiguar qué está ocurriendo. A veces el servidor
no está configurado para hacer uso de autentificación con claves
públicas y ¡a veces está configurado para pedir contraseñas locales
irrespectivamente! Si este es el caso, tal vez quiera usar también la
opción -o con ssh o cambiar el archivo sshd_config del servidor.
  </li>
  <li>
    Si tiene problemas con ssh-agent o keychain, podría ser que no
esté usando un shell que entienda los comandos utilizados. Consulte
las páginas man de ssh-agent y keychain para los detalles de cómo
trabajar con otros shells.
  </li>
</ul>
</body>
</section>
</chapter>
</guide>
