<?xml version = '1.0' encoding = 'UTF-8' ?>
<!-- $Header: -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/es/home-router-howto.xml" lang="es">
<title>Guía de enrutamiento doméstico</title>

<author title="Autor" >
  <mail link="vapier@gentoo.org">Mike Frysinger</mail>
</author>
<author title="Traductor" >
  <mail link="carles@carles.no-ip.info">Carles Ferrer Peris</mail>
</author>

<abstract>
Este documento detalla cómo convertir una vieja máquina con Gentoo en
un enrutador para conectar su red doméstica a Internet.
</abstract>

<!-- The content of this document is released into the public domain -->
<license/>

<version>1.28</version>
<date>2006-06-13</date>

<chapter>
<title>Introducción</title>
<section>
<body>

<p>
Montar su propio enrutador (router, en inglés) con viejas piezas de
repuesto tiene algunas ventajas frente a comprar un router enlatado
como un Linksys. La mayor, de lejos, es el control sobre la
conexión. Dejo las otras ventajas a su imaginación; todo se puede
hacer en este escenario, sólo es cuestión de lo que se necesite.
</p>

<p>
Esta guía le mostrará cómo configurar la Traducción de Direcciones de
Red (en inglés, Network Address Translation o NAT) en el enrutador
(núcleo e iptables), añadir y configurar servicios comunes (Sistema de
Nombres de Dominio -en inglés, Domain Name System, DNS- mediante
dnsmasq, DHCP con dhcpcd, ADLS mediante rp-pppoe), y acabar haciendo
cosas más elaboradas y divertidas (redirección de puertos -en inglés,
port forwarding-, perfilado o gestión de tráfico -en inglés, traffic
shaping-, proxies/caching, etc ...).
</p>

<p>
Antes de comenzar hay unos pocos requisitos básicos que debe
reunir. Primero, necesitará un ordenador con al menos 2 tarjetas de
red (en inglés, NIC o Network Interface Cards) instaladas. Luego,
necesitará los parámetros de configuración de su conexión a Internet
(cosas como IP/DNS/puerta de enlace/nombre de
usuario/contraseña). Finalmente, necesitará un poco de tiempo libre y
algo de amor a Gentoo.
</p>

<p>
Las convenciones utilizadas en esta guía son:
</p>

<ul>
  <li>eth0 - Tarjeta de red para la red local (Local Area Network,
  LAN)</li>
  <li>eth1 - Tarjeta de red conectada a la red amplia (Wide Area Network,
  WAN)</li>
  <li>la LAN utiliza las direcciones de red privadas 192.168.0.xxx</li>
  <li>el enrutador está configurado con la IP estándar 192.168.0.1</li>
  <li>el enrutador ejecuta Linux 2.4 o 2.6; queda a su riesgo usar el
  núcleo 2.0/2.2</li>
</ul>

<impo>
Debido a consideraciones de seguridad, le sugiero firmemente que
desactive cualquier servicio que no necesite en el enrutador hasta
tener la oportunidad de que el cortafuegos esté configurado y
funcionando. Para ver los servicios que se están ejecutando
actualmente basta ejecutar <c>rc-status</c>.
</impo>

</body>
</section>
</chapter>

<chapter>
<title>Configuración del núcleo (lo primero a hacer)</title>
<section>
<body>

<p>
Su núcleo o 'kernel' necesita tener en ejecución los controladores
para ambas tarjetas de red. Para comprobar si sus tarjetas están ya
configuradas, basta ejecutar <c>ifconfig</c>. Su salida puede diferir
ligeramente de la siguiente, lo que resultaría normal. Lo que importa
es que la interfaz esté activa.
</p>

<pre caption="Verificación de las tarjetas de red (NIC)" >
# <i>ifconfig -a</i>
eth0      Link encap:Ethernet  HWaddr 00:60:F5:07:07:B8
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
          Interrupt:11 Base address:0x9800 

eth1      Link encap:Ethernet  HWaddr 00:60:F5:07:07:B9
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
          Interrupt:10 Base address:0x9400 
</pre>

<p>
Si no se muestra la información de sus dos tarjetas y no está seguro
de qué tipo de tarjetas se trata, pruebe a ejecutar
<c>lspci | grep Ethernet</c>. Puede obtenerlo mediante <c>emerge pciutils</c>.
Una vez tenga esta información, vaya al núcleo y añada el soporte para
los controladores correctos.
</p>

<p>
Lo siguiente que necesitará es el soporte para iptables y NAT (y
gestión de tráfico, si así lo quiere).La siguiente lista se divide en
opciones siempre requeridas (*), requeridas sólo para adsl vía PPPoE (a), 
aconsejadas para todos (x), y sólo para gestión de tráfico (s). No
importa que defina las características embebidas en el núcleo o como
módulos con tal de que cuando se necesite la opción, el módulo o
módulos correctos sean cargados (no obstante, la carga de
módulos se deja al lector como un divertido ejercicio).
</p>

<pre caption="Opciones de red" >
  Networking options  ---&gt;
     [*] TCP/IP networking
        [*] IP: advanced router
     [*] Network packet filtering (replaces ipchains)
<comment>Si utiliza 2.4.x, debe habilitar los siguiente para el DHCP:</comment>
     [*] Socket Filtering
     
     IP: Netfilter Configuration  ---&gt;
        [*] Connection tracking (required for masq/NAT)
           [x] FTP protocol support
           [x] IRC protocol support
        [*] IP tables support (required for filtering/masq/NAT)
           [*] IP range match support
           [x] MAC address match support
           [*] Multiple port match support
           [*] Packet filtering
              [*] REJECT target support
              [x] REDIRECT target support
           [*] Full NAT
              [*] MASQUERADE target support
           [s] Packet mangling
              [s] MARK target support
           [x] LOG target support

     QoS and/or fair queueing  ---&gt;
        [s] QoS and/or fair queueing
           [s] HTB packet scheduler
           [s] Ingress Qdisc

     [a] PPP (point-to-point protocol) support
        [a] PPP filtering
        [a] PPP support for async serial ports
        [a] PPP support for sync tty ports
        [a] PPP Deflate compression
        [a] PPP BSD-Compress compression
        [a] PPP over Ethernet
</pre>

<note>
Algo puede variar ligeramente entre un kernel 2.4 y un 2.6, pero debería ser
capaz de darse cuenta :).
</note>

</body>
</section>
</chapter>

<chapter>
<title>Abrazar la WAN (alias Internet)</title>
<section>
<title>Introducción</title>
<body>

<p>
Hay varias maneras de conectarse a Internet por lo que sólo trataré
aquéllas que me son más familiares. Revisaremos ADSL (PPPoE) y módems
de cable (IP estática o dinámica). Si hay otras formas además de
estas, les invito a que escriban una pequeña reseña y me la envíen por
correo electrónico. Pasen por alto cualquiera de las secciones en este
capítulo que no le sean de aplicación. Este capítulo trata de conectar
el enrutador a Internet a través de eth1.
</p>

</body>
</section>
<section>
<title>ADSL y PPPoE</title>
<body>

<p>
Todo el elaborado software de PPPoE ha sido incluido en un paquetito
llamado actualmente <uri link="http://www.roaringpenguin.com/">
Roaring Penguin</uri>. Simplemente haga <c>emerge rp-pppoe</c> y
estará encaminado. ¿Recuerda cómo le decía que necesitaría la
información de usuario/contraseña? Bien, no le he mentido y ¡espero
que disponga de ella ahora! Abra en su editor preferido
<path>/etc/ppp/pppoe.conf</path> y configúrelo.
</p>

<note>
Para hacer que la siguiente configuración de net.eth1 funcione,
necesita tener instalado en su sistema baselayout-1.11.14 o posterior.
</note>

<pre caption="Configurando eth1" >
<comment>(Reemplace 'vla9h924' con su usuario y 'password' con su contraseña)</comment>

# <i>nano /etc/ppp/pap-secrets</i>
<comment># cliente    servidor  contraseña</comment>
&quot;vla9h924&quot; * &quot;password&quot;
# <i>nano /etc/conf.d/net</i>
<comment>Indique a baselayout que utilice adsl en eth1:</comment>
config_eth1=( &quot;adsl&quot; )
user_eth1=( "vla9h924" )
# <i>ln -s net.lo /etc/init.d/net.eth1</i>
# <i>rc-update add net.eth1 default</i>
# <i>/etc/init.d/net.eth1 start</i>
</pre>

<warn>
Cuando la interfaz DSL se levante, creará ppp0. Si bien la tarjeta de
red se llama eth1, la IP está ahora vinculada a ppp0. Desde este
momento, cuando vea ejemplos que utilicen 'eth1', sustitúyalo con
'ppp0'.
</warn>

</body>
</section>
<section>
<title>Cable con IP dinámica/estática</title>
<body>

<p>
Si tiene una IP estática necesitará menos detalles que si tiene una IP
dinámica. Los usuarios &quot;estáticos&quot; necesitarán conocer su
IP, puerta de enlace y servidores DNS.
</p>

<pre caption="Setting up eth1" >
<comment>Usuarios con IP dinámica:</comment>
# <i>emerge dhcpcd</i>
# <i>nano /etc/conf.d/net</i>
<comment>Necesitará una línea similar a:</comment>
config_eth1=( &quot;dhcp&quot; )
<comment>Usuarios con IP estática:</comment>
# <i>nano /etc/conf.d/net</i>
<comment>Necesitará entradas tal que:</comment>
config_eth1=( &quot;66.92.78.102 broadcast 66.92.78.255 netmask 255.255.255.0&quot; )
routes_eth1=( &quot;default gw 66.92.78.1&quot; )
# <i>nano /etc/resolv.conf</i>
<comment>Añada una línea por cada servidor DNS:</comment>
nameserver 123.123.123.123

<comment>Configuración para IP dinámica o estática:</comment>
# <i>ln -s net.lo /etc/init.d/net.eth1</i>
# <i>rc-update add net.eth1 default</i>
# <i>/etc/init.d/net.eth1 start</i>
</pre>

<p>
Debería de haberlo configurado todo ya.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Abrazar la LAN (trayendo algunos amigos)</title>
<section>
<body>

<p>
Este paso es pan comido comparado con el anterior.
</p>

<pre caption="Configurando eth0" >
# <i>nano /etc/conf.d/net</i>
<comment>Añada una línea como la siguiente:</comment>
config_eth0=( &quot;192.168.0.1 broadcast 192.168.0.255 netmask 255.255.255.0&quot; )
# <i>rc-update add net.eth0 default</i>
# <i>/etc/init.d/net.eth0 start</i>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Servicios en la LAN (porque somos buena gente)</title>
<section>
<title>Servidor DHCP</title>
<body>

<p>
Apuesto que sería bonito que cualquiera en su casa pueda simplemente
enchufar su ordenador en la red y todo funcione. ¡No necesita
recordarles galimatías o hacerles mirar fijamente confusas pantallas
de configuración! La vida puede ser magnífica, ¿verdad? Le presento el
Protocolo de Configuración Dinámica de Hosts (DHCP, en sus siglas en
inglés) y por qué debería encargarse de él.
</p>

<p>
DHCP es exactamente lo que su nombre indica. Es un protocolo que le
permite configurar dinámicamente otros equipos (hosts). Usted ejecuta
un servidor DHCP en el enrutador, que da toda la información
acerca de su red (IPs válidas, servidores DNS, puertas de enlace,
etc.), y entonces cuando los otros hosts arrancan, ejecutan un cliente
DHCP para configurarse solos automáticamente. ¡Sin arrugarse ni
despeinarse! Para más información a cerca de DHCP, puede siempre
visitar <uri link="http://en.wikipedia.org/wiki/DHCP">
Wikipedia</uri>.
</p>

<p>
Usaremos un paquete llamado dnsmasq que proporciona tanto los servicios DHCP
como DNS. Por ahora nos centraremos en la parte de DHCP. Si queremos usar otro
servidor DHCP distinto, podemos encontrar otro ejemplo en el capítulo "Cosas
divertidas". Incluso, si sólo quiere jugar con las opciones del servidor DHCP
basta leer los comentarios de <path>/etc/dnsmasq.conf</path>. Todas las 
opciones por defecto deberían funcionar bien.
</p>

<pre caption="Configurando un servidor DHCP" >
# <i>emerge dnsmasq</i>
# <i>nano /etc/dnsmasq.conf</i>
<comment>Añada esta línea para habilitar dhcp:</comment>
dhcp-range=192.168.0.100,192.168.0.250,72h
<comment>Restringir el uso de dnsmasq sólo en la interface LAN</comment>
interface=eth0

# <i>rc-update add dnsmasq default</i>
# <i>/etc/init.d/dnsmasq start</i>
</pre>

<p>
¡Ahora su pequeño enrutador es un genuino servidor DHCP! ¡Enchufe esos
ordenadores y mírelos funcionar! Con los sistemas Windows debe ir a
las Propiedades TCP/IP y seleccionar las opciones 'Obtener una
dirección IP automáticamente' y 'Obtener las direcciones de los
servidores DNS automáticamente'. Algunas veces, los cambios no son
instantáneos, por eso debe abrir un interfaz de comandos y ejecutar
<c>ipconfig /release</c> e <c>ipconfig /renew</c>. Pero ya es
suficiente de Windows, volvamos a nuestro pingüino favorito.
</p>

</body>
</section>
<section>
<title>Servidor DNS</title>
<body>

<p>
Cuando alguien quiere visitar un lugar en Internet, recuerda nombres,
no una cadena de números raros. Al fin y al cabo, ¿qué es más fácil
de recordar, ebay.com o 66.135.192.87? Aquí es donde entra DNS. Los
servidores DNS se ejecutan en Internet, y cada vez que alguien
pretende visitar 'ebay.com', esos servidores convierten 'ebay.com'
(como nosotros entendemos) en '66.135.192.87' (como nuestros
ordenadores entienden). Para más información sobre DNS, puede visitar
como siempre <uri link="http://en.wikipedia.org/wiki/DNS">
Wikipedia</uri>.
</p>

<p>
Puesto que estamos utilizando dnsmasq para nuestro servidor DHCP, que incluye 
un servidor DNS, ¡no tendremos que hacer nada ahora!. Su pequeño enrutador ya
proporciona DSN a sus clientes DHCP. Apuesto a que quisiéramos que todo fuese
tan fácil ;).
</p> 

<p>
Desde luego puede elegir cualquier otro servidor DNS si se encuentra más a 
gusto con él, pero la razón por la que dnsmasq es bueno es porque está
diseñado para hacer exactamente aquello que queremos y nada más. Es un
pequeño  servidor DNS que presta almacenamiento caché y retransmisión de
peticiones DNS en redes locales. Aquí no estamos buscando proveer DNS para
nuestro propio dominio, únicamente ofrecer servicios simples de DNS a
cualquiera en nuestra LAN.
</p>

</body>
</section>
<section>
<title>NAT (alias enmascaramiento de IP)</title>
<body>

<p>
En este punto, la gente en su red local puede hablar con otros en la
misma y pueden localizar nombres de equipos externos a través de DNS,
pero no pueden todavía conectarse a Internet. Mientras que usted puede
pensar que esto es positivo (¡mayor ancho de banda para usted!),
apuesto que ellos todavía no están muy contentos.
</p>

<p>
Aquí es donde entra la Traducción de Direciones de Red (en inglés, 
"Network Address Translation", NAT). NAT es el camino para conectar 
múltiples ordenadores en una LAN privada a Internet cuando usted sólo 
dispone de un reducido número de direcciones IP. Normalmente, usted recibe 
una IP de su proveedor de servicios Internet (ISP, son sus siglas en inglés),
pero usted quiere tener su casa enteramente conectada a Internet. NAT
es la magia que lo hace posible. Para más información a cerca de NAT
puede visitar como siempre <uri
link="http://en.wikipedia.org/wiki/NAT" >Wikipedia</uri>.
</p>

<note>
Antes de que empecemos, asegúrese que dispone de iptables en su
sistema. Si bien se instala automáticamente en muchos sistemas, podría
no tenerlo. Si no lo tiene, simplemente ejecute <c>emerge
iptables</c>.
</note>

<pre caption="Configurando iptables" >
<comment>Primero vaciaremos nuestras reglas actuales</comment>
# <i>iptables -F</i>
# <i>iptables -t nat -F</i>

<comment>Configuración de las políticas por defecto para manejar el resto de tráfico
</comment>
# <i>iptables -P INPUT ACCEPT</i>
# <i>iptables -P OUTPUT ACCEPT</i>
# <i>iptables -P FORWARD DROP</i>

<comment>Copie y pegue estos ejemplos ...</comment>
# <i>export LAN=eth0</i>
# <i>export WAN=eth1</i>

<comment>Luego aseguraremos los servicios que sólo trabajan para la LAN</comment>
# <i>iptables -I INPUT 1 -i ${LAN} -j ACCEPT</i>
# <i>iptables -I INPUT 1 -i lo -j ACCEPT</i>
# <i>iptables -A INPUT -p UDP --dport bootps -i ! ${LAN} -j REJECT</i>
# <i>iptables -A INPUT -p UDP --dport domain -i ! ${LAN} -j REJECT</i>

<comment>(Opcional) Permitir el acceso a nuestro servidor ssh desde la WAN</comment>
# <i>iptables -A INPUT -p TCP --dport ssh -i ${WAN} -j ACCEPT</i>

<comment>Descartaremos los paquetes TCP / UDP dirigidos a puertos privilegiados</comment>
# <i>iptables -A INPUT -p TCP -i ! ${LAN} -d 0/0 --dport 0:1023 -j DROP</i>
# <i>iptables -A INPUT -p UDP -i ! ${LAN} -d 0/0 --dport 0:1023 -j DROP</i>

<comment>Finalmente añadiremos las reglas para NAT</comment>
# <i>iptables -I FORWARD -i ${LAN} -d 192.168.0.0/255.255.0.0 -j DROP</i>
# <i>iptables -A FORWARD -i ${LAN} -s 192.168.0.0/255.255.0.0 -j ACCEPT</i>
# <i>iptables -A FORWARD -i ${WAN} -d 192.168.0.0/255.255.0.0 -j ACCEPT</i>
# <i>iptables -t nat -A POSTROUTING -o ${WAN} -j MASQUERADE</i>
<comment>Decir al kernel que el enmascaramiento IP (IP-forwarding, en inglés) está correcto</comment>
# <i>echo 1 > /proc/sys/net/ipv4/ip_forward</i>
# <i>for f in /proc/sys/net/ipv4/conf/*/rp_filter ; do echo 1 > $f ; done</i>

<comment>Esto lo hacemos porque al arrancar no hemos ejecutado las reglas</comment>
# <i>/etc/init.d/iptables save</i>
# <i>rc-update add iptables default</i>
# <i>nano /etc/sysctl.conf</i>
<comment>Añada/descomente las líneas siguientes:
net.ipv4.ip_forward = 1
net.ipv4.conf.default.rp_filter = 1</comment>
</pre>

<p>
Una vez haya tecleado todo esto, el resto de su red debería ser ya
capaz de usar Internet tal como si estuviesen conectados directamente
ellos mismos.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Cosas divertidas (para un día lluvioso)</title>
<section>
<title>Introducción</title>
<body>

<p>
Lo crea o no, ya está hecho :). De aquí en adelante, trataré de una
serie de temas comunes que podrían interesarle. Este capítulo es
enteramente opcional.
</p>

</body>
</section>
<section>
<title>Redirección de puertos</title>
<body>

<p>
Algunas veces le interesaría ser capaz de albergar servicios en un
ordenador detrás del enrutador, o simplemente facilitarle las cosas
cuando se conecte remotamente. Quizás quiera ejecutar un servidor FTP,
HTTP, SSH o VNC en una o más máquinas detrás de su enrutador y quiera
poder conectarse a todas ellas. La única consideración es que sólo
puede tener una combinación de servicio/máquina por puerto. Por
ejemplo, no es posible instalar tres servidores FTP detrás del router
e intentar conectarse a todos ellos a través del puerto 21; sólo uno
puede estar en el puerto 21 mientras que los otros deberían estar en
los puertos 123 y 567.
</p>

<p>
Todas las reglas de redirección de puertos son del tipo <c>iptables -t
nat -A PREROUTING [-p protocol] --dport [external port on router] -i
${WAN} -j DNAT --to [ip/port to forward to]</c>. Desafortunadamente, 
iptables no acepta nombres de máquina cuando redirige puertos. Si está
redirigiendo un puerto externo al mismo puerto en la máquina de la red 
local, puede omitir el puerto de destino. Mire la página iptables(8) para 
más información.
</p>

<pre caption="Ejecución de los comandos iptables">
<comment>Copie y pegue estos ejemplos ...</comment>
# <i>export LAN=eth0</i>
# <i>export WAN=eth1</i>

<comment>Redirigir el puerto 2 a ssh en una máquina local</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 2 -i ${WAN} -j DNAT --to 192.168.0.2:22</i>

<comment>Redirección FTP a una máquina local</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 21 -i ${WAN} -j DNAT --to 192.168.0.56</i>

<comment>Redirección HTTP a una máquina local</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 80 -i ${WAN} -j DNAT --to 192.168.0.56</i>

<comment>Redirección VNC para máquinas locales</comment>
# <i>iptables -t nat -I PREROUTING -p tcp --dport 5900 -i ${WAN} -j DNAT --to 192.168.0.2</i>
# <i>iptables -t nat -I PREROUTING -p tcp --dport 5901 -i ${WAN} -j DNAT --to 192.168.0.3:5900</i>
<comment>Si quiere hacer VNC en 192.168.0.3, basta añadir ':1' al nombre de host del enrutador</comment>

<comment>Redirección para Bittorrent</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 6881:6889 -i ${WAN} -j DNAT --to 192.168.0.2</i>

<comment>Redirección para Donkey/eMule</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 4662 -i ${WAN} -j DNAT --to 192.168.0.55</i>

<comment>Soporte para Game Cube Warp Pipe</comment>
# <i>iptables -t nat -A PREROUTING -p udp --dport 4000 -i ${WAN} -j DNAT --to 192.168.0.56</i>

<comment>Soporte para Playstation2 Online</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 10070:10080 -i ${WAN} -j DNAT --to 192.168.0.11</i>
# <i>iptables -t nat -A PREROUTING -p udp --dport 10070:10080 -i ${WAN} -j DNAT --to 192.168.0.11</i>

<comment>Xbox Live</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 3074 -i ${WAN} -j DNAT --to 192.168.0.69</i>
# <i>iptables -t nat -A PREROUTING -p udp --dport 3074 -i ${WAN} -j DNAT --to 192.168.0.69</i>
 # <i>iptables -t nat -A PREROUTING -p udp --dport 88 -i ${WAN} -j DNAT --to 192.168.0.69</i>
 </pre>
 
<note>
Si tiene otros ejemplos comunes o interesantes, por favor <mail 
link="vapier@gentoo.org" >escríbame un mensaje</mail>.
</note>

</body>
</section>
<section>
<title>Identd (para IRC)</title>
<body>

<p>
Internet Relay Chat (algo así como &quot;conversaciones trasmitidas
por Internet&quot;) utiliza el servicio ident con bastante
profusión. Ahora que los clientes de IRC están tras el enrutador,
necesitamos una manera de albergar ident tanto para el enrutador como
para los clientes. Uno de tales servidores ha sido llamado
<c>midentd</c>.
</p>

<pre caption="Configurando ident" >
# <i>emerge midentd</i>
# <i>rc-update add midentd default</i>
# <i>/etc/init.d/midentd start</i>
</pre>

<p>
Hay algunos otros servidores ident en el Portage. Dependiendo de sus
necesidades, le recomiendo que pruebe <c>oidentd</c> y
<c>fakeidentd</c>.
</p>

</body>
</section>

<!--
<section>
<title>Traffic Shaping</title>
<body>
<p>
This is an attempt to simply and Gentooify the <uri 
link="http://www.tldp.org/HOWTO/ADSL-Bandwidth-Management-HOWTO/">ADSL 
Bandwidth Management HOWTO</uri> found over at the TLDP. Feel free to 
refer to the original document for more details.
</p>

<p>
Here we will be setting up what some people refer to as a "Packet Shaper", <uri link="http://en.wikipedia.org/wiki/Traffic_shaping">"Traffic Shaping"</uri>, or <uri link="http://en.wikipedia.org/wiki/QoS">"Quality of Service"</uri>. Simply put, we want to setup rules on our router that will slow down certain activities (like sending large e-mails or downloading from P2P networks) while keeping other activities (like browsing the web or playing online video games) reasonably fast.  A 30 second difference in a video game is a lot worse than a 30 second difference in downloading large files :).
</p>

<p>
The first thing is to make sure your kernel has all the features added to it.  See the chapter on <uri link="#doc_chap2">Kernel setup</uri> for more information.  Next, you will need to <c>emerge iptables iputils</c> so that you will have access to the <c>iptables</c>, <c>ip</c>, and <c>tc</c> commands.
</p>

<p>
Before we jump into the commands, let's cover a little of the theory. The way this whole system works is to classify common network streams and then to prioritize them.  You use iptables to classify network streams, iputils to define the different priority levels, and the kernel to adjust speeds. Just remember that although you can control outbound traffic pretty tightly (from the LAN to the WAN), your ability to control inbound traffic (from the WAN to the LAN) is somewhat limited.  Just remember that the following examples are to get your feet wet; if you want more then I'd suggest reading up on the subject.  In this example, we will be using the <uri link="http://luxik.cdi.cz/~devik/qos/htb/">Hierarchical Token Buckets (HTB)</uri> packet scheduling algorithm.  Still with me?  Great, let's start shaping :).
</p>

<pre caption="Setup">
DEV=eth1 <comment>NIC connected to WAN</comment>
RATE_OUT=100 <comment>Available outbound bandwidth (in kilobits [kb])</comment>
RATE_IN=1400 <comment>Available inbound bandwidth (in kb)</comment>

<comment>Here we initialize the priority system.  The 45 is used to set the default classification level.</comment>
ip link set dev ${DEV} qlen 30
tc qdisc add dev ${DEV} root handle 1: htb default 45
tc class add dev ${DEV} parent 1: classid 1:1 htb rate ${RATE_OUT}kbit
</pre>

<p>
Here we initialized the system which will be used to prioritize all of 
our network traffic.  We created our queue, told it to use the HTB 
algorithm, and set the default classification level to '45'.  The 
default is completely arbitrary, as are the levels we choose from 
here on out.  The only thing that matters is how the levels compare 
relatively; a level '10' packet will be given preference over a 
level '45' packet.  Let's move on to declaring different levels.
</p>

<pre caption="Declaring levels">
tc class add dev $DEV parent 1:1 classid 1:10 htb rate $rkbit ceil $tkbit
prio $p
tc qdisc add dev $DEV parent 1:10 handle 10: sfq
</pre>
</body>
</section>
-->

<section>
<title>Servidor de hora (Time Server)</title>
<body>

<p>
Mantener la hora correcta en su sistema es esencial para tener un
sistema saludable. Una de las formas más comunes de conseguirlo es
utilizando el Protocolo de Tiempo de Red (en ingles, Network Time
Protocol, NTP) y el paquete ntp (que proporciona implementaciones
tanto de servidor como de cliente).
</p>

<p>
Mucha gente ejecuta el cliente ntp en sus ordenadores. Obviamente,
cuantos más clientes en el mundo, mayor es el esfuerzo con el que los
servidores ntp tienen que cargar. Sin embargo, en entornos como una
red doméstica podemos ayudar a mantener baja la carga de los
servidores públicos mientras continuamos proporcionando la hora
correcta a todos nuestros computadores. Como valor añadido, también
¡nuestras actualizaciones privadas serán bastante más rápidas para los
clientes! Todo lo que tenemos que hacer es ejecutar un servidor ntp en
nuestro enrutador, que se sincroniza él mismo con los servidores
públicos de Internet, mientras proporciona la fecha y la hora al resto
de ordenadores de nuestra red. Para empezar, basta <c>emerge ntp</c>
en el enrutador.
</p>

<pre caption="Configurar el servidor NTP" >
# <i>nano /etc/conf.d/ntp-client</i>
<comment>Personalice si así lo quiere, pero las opciones por defecto deberían
funcionar bien</comment>
# <i>rc-update add ntp-client default</i>

# <i>nano /etc/ntp.conf</i>
<comment>Añada las líneas siguientes:</comment>
restrict default ignore
restrict 192.168.0.0 mask 255.255.255.0 notrust nomodify notrap
<comment>Eso permitirá usar únicamente su servidor ntp a clientes con una dirección IP en el rango 192.168.0.xxx</comment>
# <i>nano /etc/conf.d/ntpd</i>
<comment>Personalice si así lo quiere, pero las opciones por defecto deberían funcionar bien</comment>
# <i>rc-update add ntpd default</i>

# <i>/etc/init.d/ntp-client start</i>
# <i>/etc/init.d/ntpd start</i>
</pre>

<note>
Cuando configure su servidor debe asegurarse que permite las conexiones
entrantes y salientes por el puerto de ntp (123/udp). El cliente sólo necesita
acceso de salida en el puerto 123/udp.
</note>

<p>
Ahora, en sus clientes, debe también <c>emerge ntp</c>. Sin embargo,
como sólo ejecutaremos el cliente ntp su configuración es bastante más
simple.
</p>

<pre caption="Configurando un cliente NTP" >
# <i>nano /etc/conf.d/ntp-client</i>
<comment>Cambie el servidor 'pool.ntp.org' en la variable NTPCLIENT_OPTS a
'192.168.0.1'</comment>
# <i>rc-update add ntp-client default</i>
# <i>/etc/init.d/ntp-client start</i>
</pre>

</body>
</section>
<section>
<title>Servidor Rsync</title>
<body>

<p>
Todos los que tienen múltiples ordenadores con Gentoo en la misma red local,
frecuentemente buscan evitar ejecutar en cada máquina <c>emerge sync</c> con
los servidores remotos. Instalando un rsync local conseguimos ahorrar tanto
nuestro ancho de banda como el ancho de banda de los servidores rsync de
Gentoo. Es muy simple de hacer.
</p>

<note>
Una guía de rsync más en profundidad puede encontrarse en la <uri
link="/doc/en/rsync.xml#local" >rsync guide</uri> oficial.
</note>

<p>
Puesto que cada máquina Gentoo necesita rsync, no es necesario instalarlo.
Editaremos el fichero de configuración por defecto
<path>/etc/rsyncd.conf</path>, descomentaremos la sección
<c>[gentoo-portage]</c> y nos aseguraremos de añadir una opción
<c>address</c>. Las otras opciones por defecto deberían funcionar bien.
</p>

<pre caption="Configuración del servidor rsync" >
pid file = /var/run/rsyncd.pid
use chroot = yes
read only = yes
address = 192.168.0.1

[gentoo-portage]
path = /mnt/space/portage
comment = Gentoo Linux Portage tree
exclude = /distfiles /packages
</pre>

<p>
Luego hay que iniciar el servicio (nuevamente, las opciones por defecto son
buenas)
</p>

<pre caption="Iniciar el servidor rsync" >
# <i>/etc/init.d/rsyncd start</i>
# <i>rc-update add rsyncd default</i>
</pre>

<p>
Sólo queda indicar a los clientes que hagan sync contra el servidor local.
</p>

<pre caption="Configuración SYNC de cliente en make.conf" >
SYNC=&quot;rsync://192.168.0.1/gentoo-portage&quot;
</pre>

</body>
</section>
<section>
<title>Servidor de correo</title>
<body>

<p>
A veces es agradable ejecutar su propio servidor de Protocolo Simple
de Transferencia de Correo (en inglés, Simple Mail Transfer Protocol,
SMTP) en el enrutador. Usted debe tener su propia razón para querer
hacerlo, pero yo lo ejecuto porque los usuarios ven cómo el correo ha
sido enviado instantáneamente y el trabajo de reintentar/enrutar se
deja en manos del servidor de correo. Algunos ISP tampoco permiten
retransmitir para cuentas que no forman parte de su red (como
Verizon). También, puede fácilmente reducir el caudal de la entrega de
correo de tal manera que adjuntos grandes no retrasen seriamente su
conexión media hora.
</p>

<pre caption="Configurando SMTP" >
# <i>emerge qmail</i>
<comment>Asegúrese que la salida de `hostname` es correcta</comment>
# <i>ebuild /var/db/pkg/*-*/qmail-1.03-r*/*.ebuild config</i>
# <i>iptables -I INPUT -p tcp --dport smtp -i ! ${LAN} -j REJECT</i>
# <i>ln -s /var/qmail/supervise/qmail-send /service/qmail-send</i>
# <i>ln -s /var/qmail/supervise/qmail-smtpd /service/qmail-smtpd</i>
<!--
# <i>cd /etc/tcprules.d</i>
# <i>nano tcp.qmail-smtp</i>
-->
# <i>cd /etc</i>
# <i>nano tcp.smtp</i>
<comment>Añada una línea tal que esta en la sección permitir (allow):</comment>
192.168.0.:allow,RELAYCLIENT=&quot;&quot;
<!--
# <i>tcprules tcp.qmail-qmtp.cdb rules.tmp &lt; tcp.qmail-smtp</i>
-->
# <i>tcprules tcp.smtp.cdb rules.tmp &lt; tcp.smtp</i>
# <i>rc-update add svscan default</i>
# <i>/etc/init.d/svscan start</i>
</pre>

<p>
Soy un gran admirador de qmail, pero usted es libre de utilizar un mta
distinto :). Cuando configure el correo electrónico en los ordenadores
de su red, indique que su servidor SMTP es 192.168.0.1 y así todo
estaría correcto. Podría visitar <uri link="http://qmail.org/" >página
web de qmail</uri> para más información.
</p>

</body>
</section>

<!--
<section>
<title>E-mail Virus Scanning</title>
<body>
<p>

If you'd like to provide e-mail virus scanning for your users, but 
don't want to have to install a virus scanner on every single machine, 
then <c>pop3vscan</c> may just be the thing for you; a transparent 
Post Office Protocol (POP) scanner.
</p>

<pre caption="Configurando pop3vscan">
TODO
</pre>
</body>
</section>
-->

<section>
<title>Servidor DHCP completo</title>
<body>

<p>
Anteriormente hemos utilizado dnsmasq para proporcionar servicios de DHCP a
todos nuestros clientes. Para mucha gente con una LAN pequeña es perfecto. 
Pero puede que necesite algo con más opciones. De esta manera podremos optar
por un servidor DHCP completo como el proporcionado por <uri
link="http://www.isc.org/products/DHCP">ISC</uri>.
</p>

<pre caption="Configurando dhcpd" >
# <i>emerge dhcp</i>
# <i>nano /etc/dhcp/dhcpd.conf</i>
<comment>(Este es un ejemplo de fichero de configuración:)</comment>
authoritative;
ddns-update-style interim;
subnet 192.168.0.0 netmask 255.255.255.0 {
  range 192.168.0.100 192.168.0.250;
  default-lease-time 259200;
  max-lease-time 518400;
  option subnet-mask 255.255.255.0;
  option broadcast-address 192.168.0.255;
  option routers 192.168.0.1;
  option domain-name-servers 192.168.0.1;
}
# <i>nano /etc/conf.d/dhcpd</i>
<comment>(Set IFACE="eth0")</comment>
# <i>rc-update add dhcpd default</i>
# <i>/etc/init.d/dhcpd start</i>
</pre>

<p>
Esta es la configuración mínima necesaria para sustituir la funcionalidad 
DHCP de dnsmasq que hemos usado anteriormente. Y hablando de esto, ya debemos
haber deshabilitado las opciones de DHCP en dnsmasq, ¿verdad? Si no ha sido
así, lo deberemos hacer ahora (basta con comentar el apartado de
<c>dhcp-range</c> en <path>/etc/dnsmasq.conf</path> y reiniciar el servicio)
</p>

</body>
</section>

<section>
<title>Conectar otra LAN (o dos o tres o ...)</title>
<body>
 
<p>
A veces tendremos la necesidad de conectar el enrutador a otra red local (LAN). 
Quizá queramos conectarnos temporalmente con un grupo de amigos, o 
simplemente somos unos obsesos del orden y queremos separar la red en diferentes
grupos de ordenadores, o quizás estamos aburridos. Cualquiera que sea la
razón, extender el enrutador a otra red LAN debería ser bastante sencillo. 
En los siguientes ejemplos, asumiremos que la nueva red está conectada a
través de una tercera tarjeta ethenet llamda <c>eth2</c>. 
</p>

<p>
Primero configuraremos la interfaz.  Basta seguir las indicaciones de  <uri
link="#doc_chap4_pre1">4.1 code listing</uri> y reemplazar <c>eth0</c>
por <c>eth2</c> y <c>192.168.0</c> por <c>192.168.1</c>.
</p>

<p>
Luego tendremos que ajustar dnsmasq para que dé servicio a la nueva interfaz. 
Basta editar nuevamente el fichero <path>/etc/conf.d/dnsmasq</path> y añadir
<c>-i eth2</c> a DNSMASQ_OPTS; usar -i varias veces es correcto. Seguidamente 
hay que editar <path>/etc/dnsmasq.conf</path> y añadir otra línea similar a la
ya existente de dhcp-range en  <uri link="#doc_chap5_pre1">5.1 code 
listing</uri>, cambiando <c>192.168.0</c> por <c>192.168.1</c>. Tener 
múltiples líneas de dhcp-range también es correcto.
</p>

<p>
Finalmente, miraremos las reglas de <uri link="#doc_chap5_pre2">5.2 code
listing</uri> y duplicaremos las que contienen <c>-i ${LAN}</c>. Se puede 
crear otra variable, por ejemplo <c>LAN2</c> para hacerlo más fácil.
</p>

</body>
</section>

</chapter>
<chapter>
<title>Solución de problemas</title>
<section>
<title>Herramientas comunes</title>
<body>

<p>
Si tiene dificultades para que sus ordenadores se comuniquen, puede intentar
utilizar las herramientas siguientes (que pueden encontrarse en la categoría
<c>net-analyzer</c> de Portage):
</p>

<table>
  <tr>
    <th>Utilidad</th>
    <th>Descripción</th>
  </tr>
  <tr>
    <ti>ethereal</ti>
    <ti>
    Herramienta GUI para ver todos los datos en bruto de la red de acuerdo
    a los filtros
</ti>
  </tr>
  <tr>
    <ti>tcpdump</ti>
    <ti>
    Herramienta de consola para volcar los datos en bruto de la red de
    acuerdo a los filtros
</ti>
  </tr>
  <tr>
    <ti>iptraf</ti>
    <ti>Monitor de una red IP basado en ncurses</ti>
  </tr>
  <tr>
    <ti>ettercap</ti>
    <ti>Monitor/manejador de red basado en ncurses</ti>
  </tr>
</table>

</body>
</section>
<section>
<title>DHCP no quiere iniciarse</title>
<body>

<p>
Cuando iniciamos el guión de dhcp en init.d por primera vez y no se carga 
y tampoco nos proporciona ninguna información de utilidad.
</p>

<pre caption="Ejemplo de fallo de DHCP">
# <i>/etc/init.d/dhcp start</i>
 * Setting ownership on dhcp.leases ...          [ ok ]
 * Starting dhcpd ...                            [ !! ]
</pre>

<p>
El truco está en conocer cómo dhcpd muestra esta salida. Simplemente iremos
a /var/log y leeremos los ficheros de registro. Puesto que determinar el 
fichero exacto de registro depende del paquete de bitácora del sistema
instalado, puede probar con <c>grep -Rl dhcpd /var/log</c> para cubrir todas
las posibilidades. Lo más sencillo sería un fallo de tecleo en el fichero
de configuración. También puede intentar ejecutar <c>dhcpd -d -f</c>
(depuración y en primer plano) y depurar el error según lo mostrado.
</p>

</body>
</section>
<section>
<title>Valor MTU incorrecto</title>
<body>

<p>
Si experimenta errores intermitentes (como no poder acceder a determinadas
páginas web mientras que otras se cargan bien), puede que tenga un problema de
Path MTU Discovery. La manera rápida de verificarlo es ejecutar este comando
iptables:
</p>

<pre caption="Burlando problemas MTU" >
# <i>iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu</i>
</pre>

<p>
Lo que afectará a todas las conexiones nuevas, por tanto, actualice la página
con la que está teniendo problemas para probarlo. En caso de que esto ayude, el
valor estándar para una conexión Ethernet de 100Mbits es <c>1500</c> mientras
que para una PPPoE es de <c>1492</c>. Para más información, debería leer el
capítulo 15 de <uri link="http://lartc.org/howto/">Linux Advanced Routing &amp;
Traffic Control HOWTO</uri> (en inglés).
</p>

</body>
</section>
</chapter>
<chapter>
<title>Notas finales</title>
<section>
<body>

<p>
No tengo otras notas finales que si encuentra problemas con la guía,
por favor <mail link="vapier@gentoo.org" >contácteme</mail> o abra una
incidencia en <uri link="http://bugs.gentoo.org/"> Gentoo's
Bugtracking Website</uri>. Si tiene algo interesante que cree que
mejoraría esta guía, envíemelo para su inclusión. 
</p>

</body>
</section>
</chapter>
</guide>
