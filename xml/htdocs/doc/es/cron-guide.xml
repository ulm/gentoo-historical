<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/cron-guide.xml,v 1.12 2007/07/25 14:02:47 chiguire Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/es/cron-guide.xml" lang="es">
<title>Guía Gentoo Linux de Cron</title>

<author title="Autor">
  <mail link="eric.brown@dnbrown.net">Eric Brown</mail>
</author>
<author title="Editor">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Traductor">
  <mail link="bass@gentoo.org">José Alberto Suárez López</mail>
</author>
<author title="Traductor">
  <mail link="chiguire@gentoo.org">John Christian Stoddart</mail>
</author>
<author title="Traductor">
  <mail link="yoswink@gentoo.org">José Luis Rivero</mail>
</author>

<abstract>
Esta guía describe cómo configurar y usar cron.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.8</version>
<date>2007-04-29</date>

<chapter>
<title>Aspectos básicos de cron</title>
<section>
<title>¿Qué hace cron?</title>
<body>

<p>
Cron es un demonio que ejecuta tareas de manera programada basado en
la configuración del comando <c>crontab</c>. Cumple esta tarea al
despertar cada minuto y revisando la existencia de trabajos-cron en
los crontabs de los usuarios.
</p>

<note>
Note que <e>crontab</e> es a la vez, el nombre de la lista de trabajos-cron
al igual que el nombre del comando usado para modificar esa lista.
</note>

</body>
</section>

<section>
<title>El cron de facto</title>
<body>

<p>
Existen al menos tres implementaciones del gestor cron para escoger en
Portage. Todos ofrecen un interfaz similar, el uso del comando
<c>crontab</c> o similar. Existe una herramienta relacionada de
nombre anacron, que trabaja en conjunto con cron en sistemas que no
estén encendidos de manera continua.
</p>

<p>
Vale la pena mencionar que los tres paquetes disponibles de cron dependen de
<c>sys-process/cronbase</c>. Este paquete técnicamente no aparece en las
dependencias de los paquetes cron, pero provee la funcionalidad de tipo cron
que la mayoría de los usuarios pueden apreciar.
</p>

<p>
Antes de empezar a trabajar con cron, habrá que escoger cuál
implementación quiere usar. Para su conveniencia, he resumido alguna
información acerca de cada una a continuación.
</p>

</body>
</section>
</chapter>

<chapter>
<title>¿Cual cron le conviene más?</title>
<section>
<title>Vixie cron</title>
<body>

<p>
Vixie cron es un cron pleno de características, basado en el cron
SysV. Cada usuario tiene su propio crontab y le está permitido
especificar variables de entorno dentro de su crontab. A diferencia de
las demás variantes de cron, también tiene soporte para SELinux y
PAM. Soporta menos plataformas que Dcron, pero más que Fcron.
</p>

<p>
Características de <c>sys-process/vixie-cron</c>:
</p>

<ul>
<li>
  Soporte para SELinux
</li>
<li>
  Soporte para PAM <path>/etc/security/limits.conf</path>
</li>
<li>
  Configuración de variables de entorno en el crontab (PATH, SHELL, HOME, etc.)
</li>
<li>
  Cada usuario puede tener su propio crontab, el acceso se controla
  con los archivos cron.allow y cron.deny
</li>
</ul>
</body>
</section>

<section>
<title>El cron de Dillon</title>
<body>

<p>
Dcron apunta a ser una sencilla, elegante y segura implementación de
cron. No permite especificar variables de entorno en los crontabs y
todos los trabajos cron son ejecutados desde <path>/bin/sh</path>. Así
como Vixie cron, cada usuario tiene su propio crontab.
</p>

<p>
Características de <c>sys-process/dcron</c>:
</p>

<ul>
  <li>
    Rápido, sencillo y libre de características innecesarias
  </li>
  <li>
    El acceso a <c>crontab</c> se limita al grupo cron, en otras
    palabras, no requiere capacidad externas
  </li>
</ul>

</body>
</section>

<section>
<title>Fcron</title>
<body>

<p>
Fcron apunta a sustituir Vixie cron y Anacron. Su diseño toma en
cuenta los sistemas que no están encendidos de manera continua y está
repleto de características adicionales. Tiene restricciones para
iniciar los trabajos, control del orden de ejecución, la posibilidad
de asignar valores "nice" (prioridad) a los trabajos y para ejecutar trabajos al
arrancar el sistema. Vea la <uri link="http://fcron.free.fr/">página
de fcron</uri> para mayor información.
</p>

<p>
Características de <c>sys-process/fcron</c>:
</p>

<ul>
  <li>
    Diseñado para funcionar en sistemas que no están constantemente
    encendidos, por ejemplo, puede ejecutar una tarea después de
    reiniciar la máquina si la oportunidad de ejecutarla se perdió
  </li>
  <li>
    Configuración de variables de entorno y muchas otras opciones en los
    crontabs
  </li>
  <li>
    Cada usuario puede tener su propio crontab, el acceso se controla
    con los archivos cron.allow y cron.deny
  </li>
  <li>
    Sintaxis mejorada de crontab con soporte para muchas características
    nuevas
  </li>
</ul>

</body>
</section>

<section>
<title>Anacron</title>
<body>

<p>
Anacron no es un demonio cron, funciona conjuntamente con uno. Ejecuta
comandos a intervalos especificados en días y no asume que el sistema
está encendido de manera continua; ejecutará las tareas que no
pudieron ejecutarse si el sistema estaba apagado. Anacron normalmente
requiere un demonio cron para ejecutarlo diariamente.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Usando cron</title>
<section>
<title>Instalación</title>
<body>

<p>
Seleccione la implementación de cron que más le guste e instálela vía emerge.
</p>

<pre caption="Instalar cron">
# <i>emerge dcron</i>
# <i>/etc/init.d/dcron start</i>
# <i>rc-update add dcron default</i>
</pre>

<p>
Opcionalmente, si no ha instalado Fcron, tal vez quiera instalar Anacron.
</p>

<pre caption="Instalar anacron">
# <i>emerge anacron</i>
# <i>/etc/init.d/anacron start</i>
# <i>rc-update add anacron default</i>
</pre>

</body>
</section>

<section id="systemtab">
<title>El crontab del sistema</title>
<body>

<p>
Los mensajes post-instalación de algunos de estos paquetes cron le
informan que debe ejecutar el comando <c>crontab /etc/crontab</c>. El
archivo <path>/etc/crontab</path> es el <e>crontab del
sistema</e>. Una instalación de cron lo usa junto a
<c>sys-process/cronbase</c> para ejecutar los guiones en
<path>/etc/cron.{daily,hourly,weekly,monthly}</path>. Note que
solamente Vixie-cron programa las tareas en <path>/etc/crontab</path>
automáticamente. Los usuarios de Dcron y Fcron deberán ejecutar
<c>crontab /etc/crontab</c> cada vez que hagan cambios a
<path>/etc/crontab</path>.
</p>

<p>
Por favor note que los trabajos programados en el crontab del sistema
puede que no aparezcan en la lista de trabajos cron mostrados por
<c>crontab -l</c>.
</p>

<p>
Por supuesto, puede escoger no usar un crontab de sistema. Si escogió
a Dcron o Fcron, <e>no</e> ejecute <c>crontab /etc/crontab</c>. Si
escogió vixie-cron, debe comentar todas las líneas del
<path>/etc/crontab</path>.
</p>

<pre caption="Comentar todas las líneas en /etc/crontab">
# <i>sed -i -e "s/^/#/" /etc/crontab</i>
</pre>

</body>
</section>

<section>
<title>Dándole acceso a cron a los usuarios confiables</title>
<body>

<p>
Si desea que otros usuarios que no sean root tengan acceso al demonio
cron, deberá leer esta sección, de lo contrario puede proceder a la
siguiente sección, <uri link="#scheduling">programando los trabajos
cron</uri>.
</p>

<note>
Darle acceso a un usuario al crontab no hace que los trabajos
se ejecuten como el usuario root. Si desea que un usuario pueda
modificar el crontab del usuario root, debe evaluar el uso de
<c>sudo</c>. Por favor, lea nuestra <uri link="/doc/es/sudo-guide.xml">Guía
de Sudo(ers) de Gentoo</uri> para más detalles.
</note>

<p>
Sin importar qué paquete de cron use, si quiere permitir que un
usuario use crontab, primero tendrá que pertenecer al grupo
cron. Por ejemplo, si quisiera agregar el usuario <e>wepy</e> al
grupo cron ejecute:
</p>

<pre caption="Agregar un usuario al grupo cron">
# <i>gpasswd -a wepy cron</i>
</pre>

<note>
Cuando agregue el usuario al grupo cron, asegúrese que este salga
e ingrese nuevamente al sistema para que el cambio de grupo tenga efecto.
</note>

<p>
Es todo lo que tiene que hacer para darle a un usuario acceso al
crontab, si está usando <b>Dcron</b>. Los usuarios de Dcron pueden
saltar a la siguiente sección <uri link="#scheduling">programando
los trabajos cron</uri>, los demás querrán seguir leyendo.
</p>

<p>
Si está usando <b>Fcron</b>, querrá modificar los archivos
<path>/etc/fcron/fcron.deny</path> y
<path>/etc/fcron/fcron.allow</path>. La manera más segura es primero
negarle acceso a todo el mundo en <path>/etc/fcron/fcron.deny</path> y
luego, explícitamente permitir acceso a los usuarios en
<path>/etc/fcron/fcron.allow</path>.
</p>

<impo>
<b>Si no existen los archivos <path>/etc/fcron/fcron.allow</path> o
<path>/etc/fcron/fcron.deny</path>, se les permitirá a todos los
usuarios del grupo cron usar el crontab</b>.
fcron viene con un <path>fcron.allow</path> por defecto que <b>permite
que todos los usuarios</b> del grupo cron tengan acceso a fcrontab.
</impo>

<pre caption="Los permisos en fcron.deny">
all
</pre>

<p>
Ahora, digamos que tenemos un usuario, <e>wepy</e>, quien debería
poder programar sus propios trabajos cron. Debemos agregarlo a
<path>/etc/fcron/fcron.allow</path> de la siguiente manera:
</p>

<pre caption="Los permisos en fcron.allow">
wepy
</pre>

<p>
Si escogió <b>Vixie cron</b>, probablemente querrá modificar el
archivo <path>/etc/cron.allow</path> solamente.
</p>

<impo>
Es importante notar que solamente si existe el archivo
<path>/etc/cron.allow</path>, los usuarios del grupo cron allí
listados tendrán acceso, pero sólo si existe un archivo
<path>/etc/cron.deny</path> vacío, ¡Entonces todos los usuarios del
grupo cron se les permitirá acceso! <b>No permita que haya un
<path>/etc/cron.deny</path> vacío si no existe el
<path>/etc/cron.allow</path>.</b>
</impo>

<p>
Por ejemplo, si quiere permitirle acceso al usuario <e>wepy</e>,
agréguelo a <path>/etc/cron.allow</path> de la siguiente manera:
</p>

<pre caption="Los permisos en /etc/cron.allow">
wepy
</pre>

</body>
</section>

<section id="scheduling">
<title>Programando trabajos cron</title>
<body>

<p>
El proceso de modificar los archivos crontab es distinto para cada
paquete, pero todos soportan el mismo conjunto básico de comandos:
agregando y reemplazando crontabs, modificando crontabs, borrando
crontabs y listando los trabajos en los crontabs. La siguiente lista
muestra cómo ejecutar estos comandos para cada paquete.
</p>

<table>
<tr>
  <th>Versión</th>
  <th>Editar crontab</th>
  <th>Borrar crontab</th>
  <th>Nuevo crontab</th>
  <th>Listar tareas programadas</th>
</tr>
<tr>
  <ti>dcron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -d <e>[usuario]</e></c></ti>
  <ti><c>crontab <e>file</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
<tr>
  <ti>fcron</ti>
  <ti><c>fcrontab -e</c></ti>
  <ti><c>fcrontab -r <e>[usuario]</e></c></ti>
  <ti><c>fcrontab <e>file</e></c></ti>
  <ti><c>fcrontab -l</c></ti>
</tr>
<tr>
  <ti>vixie-cron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -r <e>-u [usuario]</e></c></ti>
  <ti><c>crontab <e>file</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
</table>

<note>
Cuando use el comando para borrar un crontab, de no pasarle un parámetro, este
borra el crontab del usuario actual.
</note>

<note>
Fcron también posee un enlace simbólico desde <c>crontab</c> a <c>fcrontab</c>.
</note>

<p>
Antes de poder usar cualquiera de estos comandos, primero hace falta
entender el propio crontab. Cada línea en un crontab debe especificar
cinco campos de tiempo en el siguiente orden: los minutos (0-59), las
horas (0-23), los días del mes (1-31), los meses (1-12) y los días de
la semana (0-7, lunes es 1, el domingo es 0 y 7). Los días de las
semanas y meses pueden ser especificados por abreviaturas de tres
letras (en inglés), como mon, tue, jan, feb, etc. Cada campo también
puede especificar un rango de valores (por ejemplo, 1-5 o mon-fri),
una lista separada por comas de valores (por ejemplo, 1,2,3 o
mon,tue,wed) o un rango de valores con <e>paso</e> (por ejemplo, 1-6/2
para 1,3,5).
</p>

<p>
Tal vez suene algo confuso, pero con algunos ejemplos, verán que no es
tan complicado como parece.
</p>

<pre caption="Ejemplos">
<comment># Corra /bin/false cada minuto todo el año</comment>
*     *     *     *     *        /bin/false

<comment># Corra /bin/false a la 1:35 el lunes,martes,miércoles
(mon,tue,wed) y el día 4 de cada mes</comment>
35    1     4     *     mon-wed  /bin/false

<comment># Corra /bin/true a las 22:25 el 2 de marzo</comment>
25    22    2     3     *        /bin/true

<comment># Corra /bin/false a las 2:00 cada lunes, miércoles y viernes</comment>
0     2     *     *     1-5/2    /bin/false
</pre>

<note>
Note que tiene que nombrar días específicos de la semana y días del
mes para poder combinarlos. Si tienen un * para uno de ellos, el otro
toma precedencia, mientras que un * en ambos campos significa
diariamente.
</note>

<p>
Para poner a prueba lo que hemos aprendido, registraremos paso a paso
algunos trabajos cron. Primero, crearemos un archivo llamado
<path>crons.cron</path> de la siguiente manera:
</p>

<pre caption="Editar crons.cron">
$ <i>nano crons.cron</i>
<comment>#Mins  Horas  Días   Meses  Dia de la semana</comment>
10     3      1      1       *       /bin/echo "Realmente no me gusta cron"
30     16     *      1,2     *       /bin/echo "Me gusta cron un poco"
*      *      *      1-12/2  *       /bin/echo "Realmente me gusta cron"
</pre>

<p>
Ahora podemos agregar ese crontab al sistema con el comando "Nuevo Crontab" de
la tabla anterior.
</p>

<pre caption="Un crontab nuevo">
# <i>crontab crons.cron</i>
</pre>

<note>
No verá la salida de estos comandos si no se usa la redirección.
</note>

<p>
Para verificar los trabajos cron programados, usaremos el <e>comando
"Listar tareas programadas"</e> apropiado, tomado de la tabla anterior.
</p>

<pre caption="Listar los trabajos cron">
# <i>crontab -l</i>
</pre>

<p>
Debe ver ahora una lista parecida a <path>crons.cron</path>, si no, a
lo mejor ha usado un comando equivocado para ingresar su nuevo
crontab.
</p>

<p>
Este crontab debe hacer presentar el texto "Realmente me gusta cron"
cada minuto de cada hora de cada día en meses alternos. Obviamente
esto sólo lo haría si realmente le gustara cron. Este crontab también
presentará el texto "Me gusta cron un poco" a las 16:30 horas todos
los días en Enero y Febrero. También presentará "Realmente no me gusta
cron" a las 03:10 horas el 1 de enero.
</p>

<p>
Si está usando Anacron, siga leyendo esta sección, sino proceda a la
sección siguiente, acerca de <uri link="#editing">modificando los
crontabs</uri>.
</p>

<p>
Los usuarios de Anacron querrán modificar
<path>/etc/anacrontab</path>.  Este archivo está dividido en cuatro
campos: el número de días entre cada ejecución, el retraso en minutos
luego de cada ejecución, el nombre del trabajo y el comando a ejecutar.
</p>

<p>
Por ejemplo, para hacer que ejecute <c>echo "Me gusta anacron"</c>
cada 5 días, 10 minutos después de arrancar Anacron, haríamos:
</p>

<pre caption="/etc/anacrontab">
5 10 perdiendo-tiempo /bin/echo "Me gusta anacron"
</pre>

<p>
Anacron termina de ejecutar después que haya ejecutado todos los
trabajos en anacrontab, así que si queremos que realice estos trabajos
todos los días, tendremos que usar cron. Las instrucciones al final de
la siguiente sección explicarán cómo hacer ésto.
</p>

</body>
</section>

<section id="editing">
<title>Editando los crontabs</title>
<body>

<p>
Bueno, vamos a ser realistas, realmente no nos interesa que nuestro
sistema nos diga cuanto le gusta cron cada minuto. Así que el
siguiente paso es eliminar ese crontab usando el <e>comando "Borrar crontab"</e>
correspondiente de la tabla anterior. Después listaremos los trabajos
cron, para asegurarnos que lo que eliminamos funcionó.
</p>

<pre caption="Eliminar un crontab">
# <i>crontab -d</i>
# <i>crontab -l</i>
</pre>

<p>
No debería haber trabajos cron en la salida del comando <c>crontab
-l</c>. Si ve alguno, es porque no eliminamos nuestro crontab, por lo
que debe asegurarse de usar el <e>comando "Borrar crontab"</e> correspondiente a
su paquete cron.
</p>

<p>
Ahora que estamos en cero, vamos a colocar algo útil en el crontab de
<b>root</b>. La mayoría de usuarios querrán ejecutar <c>updatedb</c>
semanalmente para que <c>slocate</c> funcione correctamente. Para
hacer esto primero modificaremos <path>crons.cron</path> para que se
vea algo como:
</p>

<pre caption="Un crontab de verdad">
22 2 * * 1    /usr/bin/updatedb
</pre>

<p>
Esto hará que cron ejecute updatedb a las 2:22 am todos los
lunes. Ingrese el crontab con el <e>comando "Nuevo Crontab"</e> adecuado de la
tabla anterior y revise la lista otra vez.
</p>

<pre caption="Listar los trabajos cron">
# <i>crontab crons.cron</i>
# <i>crontab -l</i>
</pre>

<p>
Ahora, digamos que también quiere agregar <c>emerge --sync</c> a sus
trabajos programados diarios. Esto lo puede hacer primero modificando
<path>crons.cron</path> y luego usando <c>crontab crons.cron</c> tal
como hicimos anteriormente o el sencillamente con el <e>comando
"Editar Crontab"</e> apropiado de la tabla anterior, lo cual permite modificar
el crontab del usuario in situ sin depender de archivos externos como
<path>crons.cron</path>.
</p>

<pre caption="Editar un crontab in situ">
# <i>crontab -e</i>
</pre>

<p>
Esto deberá abrir el crontab del usuario con un editor de
texto. Queremos que <c>emerge --sync</c> se ejecute diariamente a las 6:30
am, por lo que se vería algo como:
</p>

<pre caption="Un crontab de verdad">
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
<comment>(si está usando anacron, agregue esta línea)</comment>
30 7 * * *   /usr/sbin/anacron -s
</pre>

<p>
Una vez más, revise la lista de trabajos cron, como hicimos en los
ejemplos anteriores para asegurarnos que los trabajos estén realmente
programados. Si todos están allí, está listo.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Usando cronbase</title>
<section>
<body>

<p>
Como se mencionó antes, los tres paquetes cron disponibles dependen de
<c>sys-process/cronbase</c>. El paquete cronbase crea
<path>/etc/cron.{hourly,daily,weekly,monthly}</path> y un guión llamado
<c>run-crons</c>. Puede que se haya dado cuenta que el archivo
<path>/etc/crontab</path> por defecto contiene algo como esto:
</p>

<pre caption="Crontab del sistema por defecto">
*/15 * * * *     test -x /usr/sbin/run-crons &amp;&amp; /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
</pre>

<p>
Para evitar entrar en mayores detalles, podemos asumir que estos comandos
efectivamente ejecutan sus guiones cada hora, día, semana o mes. Este
método de calendarización de tareas tiene algunas ventajas importantes:
</p>

<ul>
  <li>
    Las tareas se ejecutarán incluso si su computadora fue apagada cuando
    estaban programadas para ejecutarse.
  </li>
  <li>
    Es fácil para los mantenedores de paquetes ubicar los guiones en esos
    lugares definidos.
  </li>
  <li>
    Conoce exactamente donde se guardan sus tareas y crontab,
    facilitándole el proceso de respaldo y recuperación de esta parte de su
    sistema.
  </li>
</ul>

<note>
Nuevamente, es útil señalar que Vixie cron lee automáticamente el archivo
<path>/etc/crontab</path>, mientras que dcron y fcron no lo hacen. Por favor,
lea la sección <uri link="#systemtab">El crontab del sistema</uri> para aprender
más sobre esto.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Notas finales</title>
<section>
<title>En caso de problemas</title>
<body>

<p>
Si está teniendo problemas para hacer que cron funcione correctamente,
tal vez quiera chequear esta lista.
</p>

<ul>
<li>
  <b>¿Está siendo ejecutado cron?</b><br/>
  Ejecute <c>ps ax | grep cron</c>. Si está siendo ejecutado, ¡aparecerá!
</li>
<li>
  <b>¿Está funcionando cron?</b><br/>
  Intente: * * * * * /bin/echo "foobar" &gt;&gt; /su_archivo y asegúrese que
  funciona
</li>
<li>
  <b>¿Su comando funciona?</b><br/>
  Intente: * * * * * /bin/foobar &gt; /su_archivo 2&gt;&amp;1, busque
  mensajes de error en /su_archivo
</li>
<li>
  <b>¿Podrá cron ejecutar su trabajo?</b><br/>
  Revise el registro (log) de cron, normalmente en
  <path>/var/log/cron.log</path> o <path>/var/log/messages</path> y
  busque mensajes de error
</li>
<li>
  <b>¿Hay correos no entregados (dead.letters)?</b><br/>
    Normalmente cron envía correos cuando hay algún problema, revise
    su buzón y busque <path>~/dead.letter</path>
</li>
</ul>

<p>
Acuérdese que cada paquete cron es distinto y que la gama de
características varía bastante. Consulte las páginas del manual
de crontab, fcrontab o anacrontab, dependiendo de cuál versión use.
</p>

<p>
¡Buena suerte!
</p>

</body>
</section>
</chapter>

</guide>
