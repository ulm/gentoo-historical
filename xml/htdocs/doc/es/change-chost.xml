<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/change-chost.xml,v 1.7 2012/07/24 22:24:39 nimiux Exp $ -->

<guide lang="es">

<title>Cambiando la variable CHOST</title>

<author title="Autor">
  <mail link="amne@gentoo.org">Wernfried Haas</mail>
</author>
<author title="Revisor">
  <mail link="vapier@gentoo.org">Mike Frysinger</mail>
</author>
<author title='"Codificación GuideXML"'>
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>
<author title="Traductor">
  <mail link="chiguire@gentoo.org">John Christian Stoddart</mail>
</author>
<author title="Traductor">
  <mail link="srinclan@gmail.com">Sergio D. Rodríguez Inclan</mail>
</author>

<abstract>
Este documento explica cómo cambiar la variable CHOST en un sistema
existente.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>4</version>
<date>2012-07-24</date>

<chapter>
<title>Introducción</title>
<section>
<body>

<p>
Cambiar el CHOST es un asunto importante que puede seriamente
desestabilizar el sistema - así que ¿porqué existe esta guía?
</p>

<p>
Existen ciertas situaciones donde cambiar el CHOST es inevitable, por
ejemplo, si desea actualizar al glibc 2.4 que solo soporta nptl y
averigua que el CHOST es un i386, lo cual imposibilita el uso de
nptl. En este caso no existe una variedad de opciones y cambiar el
CHOST es una de ellas.
</p>

<p>
Aún siguiendo estas instrucciones puede surgir problemas, así que por
favor asegúrese de leer y ejecutarlas con sumo cuidado. En este
ejemplo cambiaremos el CHOST de i386 a i686 y si su situación es
diferente, por favor haga los cambios de rigor en los comandos.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Cambiando la variable CHOST</title>
<section>
<title>Construyendo los paquetes</title>
<body>

<p>
Para comenzar con el cambio de CHOST, modifique el archivo
<path>/etc/portage/make.conf</path> y cambie el valor de
<b>CHOST</b> según sus necesidades. Luego, reconstruya estos
paquetes en el siguiente orden:
</p>

<pre caption="Reconstruyendo las herramientas del sistema importantes">
# <i>emerge -av1 binutils gcc glibc</i>
</pre>

<impo>
Por favor tome en cuenta la advertencia que actualizar el gcc al mismo
tiempo que hacer el cambio de CHOST (como por ejemplo comenzar con un
gcc 3.3 y un CHOST i386 y cambiar a un gcc 4.1 y un CHOST i686) puede
conllevar unos severos efectos colaterales. Aunque tal vez no sea
imposible, es difícil predecir cuáles problemas potenciales pueden
surgir y documentarlos en esta guía. Como consecuencia, le rogamos
haga una cosa a la vez, por ejemplo actualizar el gcc primero de
acuerdo a nuestra <uri link="/doc/es/gcc-upgrading.xml">guía de
actualización del gcc</uri> y luego cambiar el CHOST. Si está en un
sistema con el CHOST=i386, necesita enmascarar el glibc 2.4 (o más
reciente) durante la actualización del gcc ya que no puede ser usado
con i386 y luego desenmascararlo al terminar.
</impo>
</body>
</section>

<section>
<title>Verificando el funcionamiento</title>
<body>

<p>
Ahora es el momento de asegurarse que la configuración de
<c>gcc-config</c> y <c>binutils-config</c> están sanos y que no tiene
el <path>/etc/env.d/</path> embasurado.
</p>

<p>
La salida de <c>gcc-config</c> y de <c>binutils-config</c> deberían
parecerse a (podría ser distinto según su versión de gcc y CHOST,
siendo el gcc 4.1.1 y CHOST i686 en este caso):
</p>

<pre caption="Verificando una configuración sana">
# <i>gcc-config -l</i>
 [1] i686-pc-linux-gnu-4.1.1 *
# <i>gcc-config -c</i>
i686-pc-linux-gnu-4.1.1

# <i>binutils-config -l</i>
 [1] i686-pc-linux-gnu-2.16.1 *
# <i>binutils-config -c</i>
i686-pc-linux-gnu-2.16.1
</pre>

<p>
Luego revisemos si tenemos alguna referencia antigua al CHOST viejo en
<path>/etc/env.d/</path>:
</p>

<pre caption="Revisando la existencia de referencias al CHOST viejo">
# <i>cd /etc/env.d/</i>
# <i>grep 386 *</i>
05gcc-i386-pc-linux-gnu:PATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
05gcc-i386-pc-linux-gnu:ROOTPATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
</pre>

<note>
Esto tal vez no le ocurra, pero en este caso 05gcc-i386-pc-linux-gnu
contiene referencias al CHOST anterior. Las cosas pueden lucir
distintas en su sistema, dependiendo de cuál CHOST se está cambiando
de/a, o tal vez hasta esté perfecto. El nombre puede ser también
05gcc-nuevo_CHOST-pc-linux-gnu.
</note>

<p>
Antes de borrar este archivo, revisemos si hay archivos con el CHOST
actualizado:
</p>

<pre caption="Revisando la presencia de archivos con el CHOST actualizado">
# <i>grep 686 *</i>
05binutils:MANPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/man
05binutils:INFOPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/info
05binutils:LDPATH=/usr/i686-pc-linux-gnu/lib
05gcc:PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
05gcc:INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
05gcc:LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
</pre>

<p>
Esto se ve bien, ya que siempre debe haber un solo archivo para el
<c>gcc</c> en <path>/etc/env.d/</path> (en este ejemplo, el 05gcc),
así que borremos el que tiene las referencias equivocadas:
</p>

<pre caption="Borrando los archivos con las referencias incorrectas">
# <i>rm 05gcc-i386-pc-linux-gnu</i>
</pre>

<p>
Lo mismo aplica a <c>binutils</c> - si hay uno extra, verifique que
sea antiguo y bórrelo. a continuación revise su directorio
<path>/etc/env.d/binutils/</path>:
</p>

<pre caption="Chequeando el binutils correcto">
# <i>cd /etc/env.d/binutils/</i>
# <i>ls -la</i>
total 8
-rw-r--r-- 1 root root  15 Sep  3 13:48 config-i686-pc-linux-gnu
-rw-r--r-- 1 root root 126 Sep  3 13:48 i686-pc-linux-gnu-2.16.1

# <i>cat config-i686-pc-linux-gnu</i>
CURRENT=2.16.1
# <i>cat i686-pc-linux-gnu-2.16.1</i>
TARGET="i686-pc-linux-gnu"
VER="2.16.1"
LIBPATH="/usr/lib/binutils/i686-pc-linux-gnu/2.16.1"
FAKE_TARGETS="i686-pc-linux-gnu"
</pre>

<p>
Esto está bien, ambos archivos deben estar donde están. Hora de
continuar al directorio gcc.
</p>

<pre caption="Chequeando el gcc correcto">
# <i>cd /etc/env.d/gcc</i>
# <i>ls -la</i>
total 12
-rw-r--r-- 1 root root  32 Sep  3 16:43 config
-rw-r--r-- 1 root root  32 Aug  3 14:25 config-i386-pc-linux-gnu
-rw-r--r-- 1 root root 292 Sep  3 16:43 i686-pc-linux-gnu-4.1.1

# <i>cat config</i>
CURRENT=i686-pc-linux-gnu-4.1.1

# <i>cat config-i386-pc-linux-gnu</i>
CURRENT=i386-pc-linux-gnu-4.1.1

# <i>cat i686-pc-linux-gnu-4.1.1</i>
PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
GCCBITS="32"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
STDCXX_INCDIR="g++-v4"
</pre>

<p>
<path>config</path> y <path>i686-pc-linux-gnu-4.1.1</path> estan bien,
pero <path>config-i386-pc-linux-gnu</path> es otro remanente que hay
que borrar.
</p>

<note>
Una vez más el nombre del archivo que contiene referencias a una
versión vieja de gcc podría tener un nombre diferente, por ejemplo,
config-i686-pc-linux-gnu aunque esté cambiando a i686. Es importante
identificar el archivo por el contenido, no solo el nombre.
</note>

<pre caption="Borrando el archivo de configuración gcc incorrecto">
# <i>rm config-i386-pc-linux-gnu</i>
</pre>

<p>
Ahora ejecute los siguientes comandos para actualizar su entorno:
</p>

<pre caption="Actualizando el entorno">
# <i>env-update &amp;&amp; source /etc/profile</i>
</pre>

<p>
Verifique que todo esté arreglado:
</p>

<pre caption="Verificando que las referencias al CHOST viejo hayan sido borradas">
# <i>grep -r 386 /etc/env.d/</i>
</pre>

<p>
Si todavía encuentra algo, debe haber saltado algún archivo, trate de
ubicarlo antes de continuar.
</p>
</body>
</section>

<section>
<title>Terminando el Cambio</title>
<body>

<p>
Ahora será necesario hacer emerge otra vez a <c>libtool</c> y ejecutar
<c>/usr/share/gcc-data/$CHOST/&lt;gcc-version&gt;/fix_libtool_files.sh</c>.
Debemos asegurar el uso de la versión correcta del gcc (la actual, 4.1.1 y
la arquitectura anterior, i386). Reemplace $CHOST con el CHOST nuevo y la
&lt;gcc-version&gt; con la versión del gcc. Este ejemplo asume un
CHOST i686.
</p>

<pre caption="Asegurando una librería sana">
# <i>emerge -av1 libtool</i>
# <i>/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/fix_libtool_files.sh 4.1.1 --oldarch i386-pc-linux-gnu</i>
</pre>

<p>
Tal vez quiera reconstruir todos los paquetes instalados:
</p>

<pre caption="Reconstruyendo world">
# <i>emerge -e world</i>
</pre>

<p>
Ahora en teoría, no debería ser necesario hacer esto, pero no podemos
garantizar esto al 100% si no recompila world. Entiendo que al menos
algunos paquetes requieren recompilación, así que:
</p>

<pre caption="Recompilando python">
# <i>emerge -av1 python</i>
</pre>

<p>
Todos los paquetes que usan perl instalan según el directorio CHOST y
por ende hay que recompilarlos. En caso que no haya instalado
<c>qfile</c>, necesitará instalar primero
<c>app-portage/portage-utils</c>.
</p>

<pre caption="Recompilando los paquetes perl">
# <i>emerge -av portage-utils</i>
# <i>emerge -av1 `qfile /usr/lib/perl* -Cq | sort -u`</i>
</pre>

<p>
Si encuentra otros paquetes que requieren recompilación, por favor
hágaselo saber al autor de este documento.
</p>
</body>
</section>

<section>
<title>Problemas Comunes</title>
<body>

<p>
Al actualizar del gcc 3.3 a 4.1 al mismo tiempo que hacer el cambio de
CHOST (de todas formas, por favor no lo haga), un par de usuarios
reportaron paquetes rotos que requirieron recompilación como groff y
courier:
</p>

<pre caption="Mensaje de error">
error while loading shared libraries: libstdc++.so.5: cannot open shared object file: No such file or directory
</pre>

<p>
Esto ocurre porque al hacer la actualización, el CHOST no es
exactamente igual al CTARGET y el compilador asume que se trata de una
compilación cruzada. Como consecuencia, no se inserta LDPATH en el
archivo <path>ld.so.conf</path>, lo cual resulta en este error.
</p>

<p>
Por favor vea nuestra <uri link="/doc/es/gcc-upgrading.xml">guía de
actualización del gcc</uri> para información acerca de qué reconstruir
después de una actualización del gcc.
</p>

<p>
En algunos raros casos, esto puede romper versiones antiguas de
python también. Esto se puede arreglar agregando
<path>/usr/lib/gcc-lib/i386-pc-linux-gnu/3.3.6</path> (cambie según el
CHOST y gcc anteriores) a <path>/etc/ld.so.conf</path>, ejecutando
<c>ldconfig</c> y luego haciendo <c>emerge libstdc++-v3</c>. Sin
embargo, tal como puede ver, realmente puede evitar encontrarse con
este problema al no cambiar el CHOST y el gcc al mismo tiempo.
</p>
</body>
</section>

<section>
<title>Comentarios, sugerencias</title>
<body>

<p>
Eso debería ser todo, cualquier comentario o sugerencia (si funciona o
no o si se encontraron otros problemas) es bienvenido. Por favor envíe
correo electrónico a <mail>amne@gentoo.org</mail> o haga un post en
<uri link="http://forums.gentoo.org/viewtopic-t-494147.html">este
foro</uri>. Mucha de la información en este documento es por cortesía
de vapier, ¡gracias por tu ayuda!
</p>
</body>
</section>
</chapter>
</guide>
