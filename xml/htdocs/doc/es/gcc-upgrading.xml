<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/gcc-upgrading.xml,v 1.16 2014/03/25 08:04:26 nimiux Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide disclaimer="obsolete" redirect="https://wiki.gentoo.org/wiki/Upgrading_GCC/es" lang="es">
<title>Guía de actualización de GCC en Gentoo Linux</title>

<author title="Autor">
  <mail link="swift"/>
</author>
<author title="Traductor">
  <mail link="chiguire"/>
</author>

<abstract>
Este documento guiará al usuario en el proceso de actualización de GCC.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>27</version>
<date>2013-08-24</date>

<chapter id="quickstart">
<title>Inicio rápido</title>
<section>
<title>Introducción</title>
<body>

<p>
Esta guía trata la <e>actualización</e> de GCC. Cambiar a una versión
más antigua podría traer efectos secundarios indeseados. Por favor
refiérase a la sección <uri link="#troubleshooting">Solucionando
problemas</uri> para algunos de los problemas frecuentemente
reportados.
</p>

<p>
La siguiente sección ofrece una introducción rápida a las
actualizaciones de GCC (y lo fáciles que son). Si desea leer
el razonamiento completo detrás de las actualizaciones de GCC,
por favor, continue con <uri link="#explanation">Explicación de
Actualizaciones de GCC</uri>.
</p>

</body>
</section>

<section>
<title>Versión corta</title>
<body>

<p>
Si está actualizando GCC, no necesita hacer más que cambiar de
versión de compilador y reconstruir libtool:
</p>

<pre caption="Cambiar de versión de GCC">
# <i>emerge -u gcc</i>
# <i>gcc-config -l</i>
[1] i686-pc-linux-gnu-4.4.5 *
[2] i686-pc-linux-gnu-4.5.3

# <i>gcc-config 2</i>
# <i>env-update &amp;&amp; source /etc/profile</i>
# <i>emerge --oneshot libtool</i>
</pre>

<p>
Si está actualizando GCC de una versión anterior a la 3.4.0 (de la
serie 3.x) ó 4.1, tendrá que ejecutar <c>revdep-rebuild</c> también:
</p>

<pre caption="Actualizando una versión no compatible a futuro de GCC">
# <i>revdep-rebuild --library libstdc++.so.5</i>
</pre>

<p>
¡Listo! Ahora a disfrutar del compilador nuevo.
</p>

</body>
</section>
</chapter>

<chapter id="explanation">
<title>Explicación de Actualizaciones de GCC</title>
<section>
<title>Introducción</title>
<body>

<p>
Las actualizaciones de GCC siempre han sido rodeadas de un aura de
misterio, con sugerencias que van desde "No hace falta hacer nada"
hasta "Tendrá que reconstruir el sistema completo, dos veces". La
mayoría de estas medias informaciones (FUD) vienen de la confusión que
rodea las incompatibilidades del ABI. Antes, unas palabras sobre
<c>libtool</c>.
</p>

</body>
</section>

<section>
<title>libtool y fix_libtool_files.sh</title>
<body>

<p>
Las instalaciones anteriores de GCC en Gentoo requerían ejecutar una
orden específica llamado <c>fix_libtool_files.sh</c>. Hace algún
tiempo, la ejecución de esta orden se ha integrado en la propia
instalación del paquete (a través del eclass toolchain), así que ya
no es necesario que los usuarios ejecuten esta orden.
</p>

<p>
La razón por la cual necesitamos reconstruir libtool después de
actualizar GCC es debida a su función principal: <e>libtool</e>
reúne un conjunto de herramientas que agregan código específico en
un interfaz genérico permitiendo que las aplicaciones se construyan
contra librerías compartidas sin tener que manejar aspectos
específicos en cada plataforma de estas librerías. Para que realice
su función correctamente, el guión <c>libtool</c> utiliza variar
localizaciones en la librería con información fija acerca de
versiones de GCC.
</p>

</body>
</section>

<section>
<title>Cambios en el ABI</title>
<body>

<p>
Un ABI, <e>Interfaz Binaria para Aplicaciones</e> (en inglés
Application Binary Interface), es un conjunto de convenciones usadas
por todas las herramientas que manejan representaciones binarias de
los programas, incluyendo compiladores, ensambladores, enlazadores y
soporte en tiempo de ejecución (fuente: <uri
link="http://gcc.gnu.org/onlinedocs/gcc/Compatibility.html">GCC Binary
Compatibility</uri>). Al cambiar el ABI usado para aplicaciones
binarias y librerías, existirá el riesgo de obtener errores de
enlazado o programas funcionando incorrectamente si no se reconstruyen
todas las librerías que usen el código C++. Si, C++, ya que la mayoría
de las incompatibilidades ocurren en el ABI de C++. Por esto usamos
la orden <c>revdep-rebuild</c> contra la librería
<path>libstdc++.so.5</path>.
</p>

<pre caption="Reconstruyendo aplicaciones enlazadas a libstdc++.so.5">
# <i>revdep-rebuild --library libstdc++.so.5</i>
</pre>

<p>
Asi que, ¿Por qué se requiere esto para GCC hasta la versión
3.4.0/4.1? A partir de estas versiones, GCC usa un ABI compatible a
futuro, que elimina la necesidad de reconstruir las aplicaciones y
librerías. Por supuesto que no se pueden dar garantía indefinidamente,
pero cuando ocurra nuevamente una incompatibilidad, definitivamente la
documentaremos aquí. En este caso la versión de la librería
<path>libstdc++.so</path> probablemente será superior.
</p>

</body>
</section>

<section>
<title>Reconstruyendo todo</title>
<body>

<p>
Algunos juran que al aparecer una nueva versión de GCC, se debe
reconstruir hasta el último paquete del sistema. Por supuesto, esto no
tiene sentido, ya que de todas formas hay muchas aplicaciones que no
usan GCC en su proceso de construcción e instalación y por tanto
nunca serían afectados por estos cambios.
</p>

<p>
Sin embargo, esto no significa que estén completamente equivocados:
las versiones recientes de GCC suelen incluir soporte mejorado para
los conjuntos de instrucciones de los procesadores, lo que podría
influenciar el desempeño de algunas aplicaciones positivamente. Aunque se
estima que estas mejoras sean generalmente marginales, en algunos casos
(especialmente en aplicaciones que usan intensivamente el CPU) podrían
traer mejoras notables.
</p>

<p>
Existen también casos conocidos donde un conjunto de paquetes se
deben construir con el mismo compilador. Aunque la versión de estos
paquetes se suele aumentar simultáneamente con el compilador (de
forma que se construyan con la misma versión de GCC) el escoger
selectivamente reinstalaciones de algunos de estos paquetes puede
traer problemas. Los paquetes de <path>qt-*</path> son un ejemplo de
esto.
</p>

</body>
</section>
</chapter>

<chapter id="troubleshooting">
<title>Solucionando problemas</title>
<section>
<title>libstdc++.so.6: version `GLIBCXX_3.4.15' not found</title>
<body>

<p>
Durante las actualizaciones podría tropezarse con un error como el
siguiente:
</p>

<pre caption="No se encuentra GLIBCXX_x.y.z">
cmake_bootstrap_28021_test: /usr/lib/gcc/i486-pc-linux-gnu/4.1.2/libstdc++.so.6:
version `GLIBCXX_3.4.11' not found
</pre>

<p>
Esto significa que está intentando construir un paquete con una
versión de GCC <e>más antigua</e> que el usado para construir algunas
de sus librerías dependientes. ¿Recuerde cuando dijimos que el ABI C++
era compatible a futuro? Esto es cierto, pero asegura solamente que
versiones <e>más recientes</e> (o iguales) de GCC pueden ser
utilizadas para construir aplicaciones y librerías enlazadas (en
comparación con la versión de GCC usada para construir esas
librerías).
</p>

</body>
</section>

<section>
<title>¿Cuáles paquetes se conocen que requieren reconstrucción?</title>
<body>

<p>
La siguiente table lista los paquetes, que <e>de estar instalados</e>
necesitarían ser reconstruidos y por que.
</p>

<table>
<tr>
  <th>Paquete</th>
  <th>Reconstrucción requerida por ...</th>
</tr>
<tr>
  <ti>sys-devel/libtool</ti>
  <ti>
    la aplicación libtool usa trayectorias a las librerías internas
    de GCC codificadas de manera fija
  </ti>
</tr>
</table>

</body>
</section>
</chapter>

<chapter>
<title>Recursos</title>
<section>
<title>Guías Gentoo y Recursos</title>
<body>
<ul>
  <li>
    <uri link="https://wiki.gentoo.org/wiki/Upgrade_GCC_up_to_4.1">
    Actualización a la versión 4.1</uri>, la versión anterior de esta
    misma guía
  </li>
</ul>
</body>
</section>
</chapter>
</guide>
