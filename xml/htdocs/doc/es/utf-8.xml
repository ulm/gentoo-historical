<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/utf-8.xml,v 1.11 2006/01/16 00:45:18 yoswink Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/es/utf-8.xml" lang="es">
<title>Usando UTF-8 con Gentoo</title>

<author title="Author">
  <mail link="slarti@gentoo.org">Thomas Martin</mail>
</author>
<author title="Contribuidor">
  <mail link="devil@gentoo.org.ua">Alexander Simonov</mail>
</author>
<author title="Editor Es">
    <mail link="bass@gentoo.org">José Alberto Suárez López</mail>
</author>
<author title="Editor Es">
    <mail link="chiguire@gentoo.org">John Christian Stoddart</mail>
 </author>
<author title="Editor Es">
    <mail link="yoswink@gentoo.org">José Luis Rivero</mail>
 </author>

<abstract>
Esta guía muestra cómo configurar y utilizar el conjunto de caracteres
UTF-8 con su sistema Gentoo Linux, luego de explicar los beneficios de
Unicode en general y de UTF-8 en específico.
</abstract>

<license />

<version>2.2</version>
<date>2005-06-02</date>

<chapter>
<title>Codificación de caracteres</title>
<section>
<title>¿Qué es la codificación de caracteres?</title>
<body>

<p>
Los computadores no entienden texto por sí mismas, de manera que
cada carácter está representado por un número. Tradicionalmente, cada
conjunto de números usados para representar alfabetos y caracteres
(conocidos como sistema de codificación, codificación o conjunto de
caracteres) han sido limitados en su tamaño por las limitaciones
presentes en el hardware de las computadoras.
</p>
</body>
</section>

<section>
<title>La historia de codificación de caracteres</title>
<body>

<p>
El conjunto de caracteres más común (o al menos el más ampliamente
aceptado) es el <b>ASCII</b> (American Standard Code for Information
Interchange o Código Norma Norteamericano para el Intercambio de
Información). Se ha dicho que el ASCII es la norma de software más
exitosa jamás. El ASCII moderno fue normalizado en 1986 (ANSI X3.4,
RFC 20, ISO/IEC 646:1991, ECMA-6) por el American National Standards
Institute o Instituto Nacional Norteamericano para Normas.
</p>

<p>
ASCII se ciñe estrictamente a siete bits, lo cual significa que usa
patrones de bits que pueden ser representados por siete dígitos
binarios, que suministra un rango de 0 a 127 en números
decimales. Estos incluyen 32 caracteres de control que no son
visibles, la mayoría de los cuales están entre el 0 y el 31, con el
último caracter de control, DEL o delete (borrar) en la posición
127. Los caracteres del 32 al 126 son visibles: un espacio, caracteres
de puntuación, letras del alfabeto latino y los números.
</p>

<p>
El octavo bit en ASCII fue originalmente utilizado como un bit de
paridad, para comprobación de errores. Si no hace falta, se puede
dejar en 0. Esto significa que en ASCII, cada caracter es representado
por un solo byte.
</p>

<p>
Aunque ASCII era suficiente para las comunicaciones en inglés moderno,
esto no hacía las cosas fáciles para otros idiomas europeos que
incluían caracteres acentuados. Las normas ISO 8859 fueron
desarrolladas para cubrir estas necesidades. Eran compatibles con la
versión original de ASCII, pero en vez de dejar el octavo bit en
blanco fue utilizado para proporcionar 127 caracteres adicionales en
cada codificación. Las limitaciones de ISO 8859 pronto se hicieron
sentir, existiendo actualmente 15 variantes de esta norma (8859-1 a la
8859-15). Más allá de los valores compatibles con ASCII, existen
conflictos en la representación de los caracteres. Para complicar aún
más la interoperabilidad entre distintas codificaciones, se usa
Windows-1252 en algunas versiones de Windows para representar
idiomas europeos occidentales. Este es un super-conjunto de la ISO
8859-1, con varias diferencias. Sin embargo, todos estos conjuntos de
caracteres retienen la compatibilidad con ASCII.
</p>

<p>
El necesario desarrollo de codificaciones de un solo byte para
alfabetos no-latinos, tales como el EUC (Extended Unix Encoding o
Codificación Extendida para Unix), usados para japonés y koreano (y a
menor grado para chino) agregó más confusión, mientras que otros
sistema operativos usaban otros conjuntos completamente distintos
para los mismos idiomas, por ejemplo, Shift-JIS e ISO-2022-JP. Los
usuarios que requerían usar glifos en cirílico tenían que escoger
entre KOI8-R para ruso o búlgaro o KOI8-U para ukraniano, encima de
las demás codificaciones cirílicas como el fallido ISO 8859-5 y el más
común Windows-1251. Todos estos conjuntos de caracteres rompieron con
la compatibilidad con el ASCII (aunque la codificación KOI8 coloca los
caracteres cirílicos en el órden latino, de manera de conservar la
posibilidad de lectura, pasado a mayúsculas en un terminal ASCII, si
se llegara a perder el octavo bit).
</p>

<p>
Esto ha causado confusión e inabilidad casi total de comunicación
entre idiomas, especialmente a través de alfabetos distintos. Aquí
ingresa Unicode.
</p>
</body>
</section>

<section>
<title>¿Qué es Unicode?</title>
<body>

<p>
Unicode desecha el límite tradicional de los conjuntos de caracteres
de un sólo byte. Usa 17 "planos" de 65,536 codificaciones para
describir un máximo de 1,114,112 caracteres. Como el primer plano,
también conocido como Basic Multilingual Plane (Plano Multilingüe
Básico) o BMP contiene prácticamente todo lo que pudiera usarse jamás,
muchos han asumido que el Unicode es un conjunto de caracteres de 16
bits.
</p>

<p>
El Unicode ha sido mapeado en muchas maneras diferentes, pero las dos
más comunes son <b>UTF</b> (Unicode Transformation Format o Formato de
Transofrmación Unicode) y <b>UCS</b> (Universal Character
Set o Conjunto de Caracteres Universal). El número que sigue las
siglas UTF indican el número de bits en una unidad, mientras que el
número que sigue las siglas UCS indica el número de bytes. UTF-8 se ha
convertido en el medio más difundido para el intercambio de texto en
Unicode dada su implementación limpia de ocho bits y es el tema de
este documento.
</p>
</body>
</section>

<section>
<title>UTF-8</title>
<body>

<p>
La codificación UTF-8 es de longitud variable, lo cual significa en
este caso, que utiliza de uno a cuatro bytes por símbolo. Así, el
primer byte UTF-8 se utiliza para codificar los caracteres ASCII,
permitiendo completa compatibilidad con este conjunto de
caracteres. Además, significa que los caracteres Latin y de UTF-8 son
intercambiables con un pequeño aumento en el tamaño de la data, ya que
usa solo el primer bit. Los usuarios de alfabetos orientales, como el
japonés, no están tan contentos, ya que les han asignado cuentas
mayores de bytes que resulta en un aumento hasta del 50% en su data.
</p>
</body>
</section>

<section>
<title>¿En qué puede ayudar el UTF-8?</title>
<body>

<p>
UTF-8 permite trabajar en un entorno multilingüe normado
internacionalmente aceptado con un nivel comparativamente bajo de
redundancia de datos. El UTF-8 es la manera preferida para transmitir
caracteres no-ASCII a través del Internet por correo electrónico, IRC
o casi cualquier otro medio. A pesar de esto, muchos opinan que el uso
de UTF-8 en las comunicaciones en línea es abusivo. Vale la pena
siempre estar atento de la actitud hacia UTF-8 en determinados
canales, listas de correo o grupo usenet antes de usar UTF-8
<e>no-ASCII</e>.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Configurando UTF-8 en Gentoo Linux</title>
<section>
<title>Buscando o Creando Localizaciones UTF-8</title>
<body>

<p>
Ahora que entendemos los principios detrás de Unicode, podemos empezar
a usar UTF-8 con el sistema.
</p>

<p>
El requerimiento preliminar para UTF-8 es tener instalada una versión
de glibc con soporte para idiomas nacional. El medio recomendado para
hacer esto es el archivo <path>/etc/locales.build</path> en
combinación con el parámetro USE <c>userlocales</c>. Va más allá de
este documento la explicación de cómo usar este archivo, aunque su uso
está explicado a través de los comentarios allí contenidos. Además, su
uso también está cubierto en la <uri
link="/doc/es/guide-localization.xml#doc_chap3_sect3">Guía Gentoo de Localización</uri>.
</p>

<p>
Luego, debemos decidir si ya existe una localización UTF-8 para
nuestro idioma, o si debemos crear uno.
</p>

<pre caption="Revisar si existe una localización UTF-8">
<comment>(Sustituya "es_ES" por la localización deseada)</comment>
# <i>locale -a | grep 'es_ES'</i>
es_ES
es_ES.iso88591
es_ES.iso885915@euro
es_ES.utf8
es_ES@euro
</pre>

<p>
Por la salida de este comando, debemos usar el resultado con un
sufijo similar a <c>.utf8</c>. Si no se producen resultados que tengan este
sufijo, debemos crear una localización compatible con UTF-8.
</p>

<note>
Solamente ejecute los comandos listados a continuación si no tiene una
localización UTF-8 disponible para su idioma.
</note>

<pre caption="Creando una localización UTF-8">
<comment>(Sustituya "es_ES" por la localización deseada)</comment>
# <i>localedef -i es_ES -f UTF-8 es_ES.utf8</i>
</pre>

<p>
Otra manera de incluir una localización UTF-8 es agregarla al archivo
<path>/etc/locales.build</path> y reconstruir <c>glibc</c> activando
el parámetro USE <c>userlocales</c>.
</p>

<pre caption="La línea en /etc/locales.build">
es_ES.UTF-8/UTF-8
</pre>
</body>
</section>

<section>
<title>Estableciendo la Localización</title>
<body>

<p>
Existe una variable de entorno que se debe configurar para utilizar
nuestra localización UTF-8 nueva: <c>LC_ALL</c> (esta variable toma
precedencia por encima de la configuración de <c>LANG</c>
también). Hay distintas maneras de configurarla; algunos prefieren
tener ambientes UTF-8 para usuarios específicos, en cuyo caso se
configura en su <path>~/.profile</path> (si usa <c>/bin/sh</c>) o sino
<path>~/.bash_profile</path> o <path>~/.bashrc</path> (si se usa
<c>/bin/bash</c>).
</p>

<p>
Otros prefieren establecer la localización de manera global. Una
circunstancia específica donde el autor recomienda particularmente
hacer esto es cuando se usa <path>/etc/init.d/xdm</path>, ya que este
guión inicia el gestor de ventanas y el entorno del escritorio antes
de evaluar los distintos archivos de inicio del intérprete de
comandos, antes que éstos puedan establecer variables de entorno.
</p>

<p>
Establecer la localización de manera global debe hacerse usando
<path>/etc/env.d/02locale</path>. El archivo debe parecerse algo a:
</p>


<pre caption="Archivo ejemplo de /etc/env.d/02locale">
<comment>(Como siempre, cambie "es_ES.UTF-8" según la localización)</comment>
LC_ALL="es_ES.UTF-8"
</pre>

<p>
Luego, el entorno debe actualizarse con los cambios.
</p>

<pre caption="Actualizando el entorno">
# <i>env-update</i>
>>> Regenerating /etc/ld.so.cache...
 * Caching service dependencies ...
# <i>source /etc/profile</i>
</pre>

<p>
Ahora, ejecute <c>locale</c> sin parámetros para ver si tenemos las
variables adecuadas según nuestro entorno:
</p>

<pre caption="Revisando si nuestra localización funciona en nuestro entorno">
# <i>locale</i>
LANG=
LC_CTYPE="es_ES.UTF-8"
LC_NUMERIC="es_ES.UTF-8"
LC_TIME="es_ES.UTF-8"
LC_COLLATE="es_ES.UTF-8"
LC_MONETARY="es_ES.UTF-8"
LC_MESSAGES="es_ES.UTF-8"
LC_PAPER="es_ES.UTF-8"
LC_NAME="es_ES.UTF-8"
LC_ADDRESS="es_ES.UTF-8"
LC_TELEPHONE="es_ES.UTF-8"
LC_MEASUREMENT="es_ES.UTF-8"
LC_IDENTIFICATION="es_ES.UTF-8"
LC_ALL=es_ES.UTF-8
</pre>

<p>
Eso es todo. En este momento está usando la localización UTF-8 y el
siguiente paso es configurar las aplicaciones usadas en el día a día.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Soporte para Aplicaciones</title>
<section>
<body>

<p>
Cuando Unicode empezó a ganar aceptación en el mundo del software, los
conjuntos de caracteres con codificaciones multi-byte no encajaban
bien con lenguajes de programación como C, en la que están escritos
muchos programas que la gente usa a diario. Aún hoy algunos programas
no manejan UTF-8 correctamente. ¡Afortanadamente la mayoría sí!
</p>
</body>
</section>

<section>
<title>Nombres de archivos, NTFS y FAT</title>
<body>

<p>
Hay varias opciones para soporte de idiomas nativos (NLS) en el menú
de configuración del kernel Linux, ¡pero es importante no confundirse!
Mayormente, lo único que hay que hacer es construir el soporte para
UTF-8 en el kernel y cambiar la opción por defecto a UTF-8.
</p>

<pre caption="Pasos para configurar el kernel para NLS con UTF-8">
File Systems --&gt;
  Native Language Support --&gt;
    (utf8) Default NLS Option
    &lt;*&gt; NLS UTF8
    <comment>(También &lt;*&gt; otros conjuntos de caracteres usados
  por los sistemas de archivo FAT o CDROMs Joliet.)</comment>
</pre>

<p>
Si tiene planes de montar particiones NTFS, tal vez tenga que
especificar como parámetro a mount, la opción <c>nls=</c>. Para más
información, vea <c>man mount</c>.
</p>

<p>
Para cambiar la codificación de los nombres de archivos, use 
<c>app-text/convmv</c>.
</p>

<pre caption="Ejemplo del uso de convmv">
# <i>emerge --ask app-text/convmv</i>
# <i>convmv -f codificación-actual -t utf-8 archivo</i>
</pre>

<p>
Para cambiar la codificación del <e>contenido</e> de los archivos, use la 
herramienta <c>iconv</c>, que forma parte de <c>glibc</c>:
</p>

<pre caption="Ejemplo del uso de iconv">
<comment>(sustituya iso-8859-1 por el conjunto de caracteres que va a convertir)</comment>
<comment>(Revise si la salida se ve bien)</comment>
# <i>iconv -f iso-8859-1 -t utf-8 archivo</i> 
<comment>(Para convertir un archivo, debe crear otro)</comment>
# <i>iconv -f iso-8859-1 -t utf-8 archivo > archivo-nuevo</i>
</pre>

<p>
Para este propósito también se puede usar la herramienta <c>app-text/recode</c>.
</p>
</body>
</section>

<section>
<title>La consola del sistema</title>
<body>

<impo>
Hará falta tener instalado >=sys-apps/baselayout-1.11.9 para poder
tener Unicode en la consola.
</impo>

<p>
Para usar UTF-8 en la consola, debe modificarse el archivo
<path>/etc/rc.conf</path> colocando <c>UNICODE="yes"</c>. Lea también
los comentarios en el archivo y si quiere hacer uso pleno de
Unicode, es importante tener una fuente con una buena gama de caracteres.
</p>

<p>
Debe asignarse un mapa de teclado Unicode a la variable de entorno
<c>KEYMAP</c> en <path>/etc/conf.d/keymaps</path>. Para esto,
sencillamente anteceda el actual con -u.
</p>

<pre caption="Ejemplo parcial de /etc/conf.d/keymaps">
<comment>(Cambie "es" a su mapa local)</comment>
KEYMAP="es"
</pre>

</body>
</section>

<section>
<title>Ncurses y Slang</title>
<body>

<note>
Ignore cualquier mención acerca de Slang en esta sección si no lo
usa o si tampoco lo tiene instalado.
</note>

<p>
Es buena idea agregar <c>unicode</c> a sus parámetros USE globales en
<path>/etc/make.conf</path> y luego hacer emerge otra vez a
<c>sys-libs/ncurses</c> y <c>sys-libs/slang</c> si es apropiado:
</p>

<pre caption="Haciendo emerge a ncurses y slang">
<comment>(Podemos evitar colocar estas librerías en nuestro archivo
world usando --oneshot)</comment>
# <i>emerge --oneshot --verbose --ask sys-libs/ncurses sys-libs/slang</i>
</pre>

<p>
También debemos reconstruir los paquetes que enlazan con estos, ya que
se han aplicado cambios a los parámetros USE. La herramienta que
usamos (<c>revdep-rebuild</c>) es parte del paquete
<c>gentoolkit</c>.
</p>

<pre caption="Reconstruyendo los programa enlazados a ncurses o slang">
# <i>revdep-rebuild --soname libncurses.so.5</i>
# <i>revdep-rebuild --soname libslang.so.1</i>
</pre>
</body>
</section>

<section>
<title>KDE, GNOME y Xfce</title>
<body>

<p>
Todos los principales entornos de escritorio tienen soporte completo
para Unicode y no requieren configuración adicional, apartando lo
cubierto en esta guía. Esto es porque los kits gráficos subyacentes
(Qt o GTK+2) ya reconocen UTF-8, por ende, todas las aplicaciones que
hacen uso de estos kits deben reconocer UTF-8 también, sin hacer nada
más.
</p>

<p>
Las excepciones a esta regla son Xlib y GTK+1. GTK+1 requiere una
especificación de fuente iso-10646-1 en el ~/.gtkrc, como
<c>-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1</c>. Además, las
aplicaciones que utilizen Xlib o Xaw también necesitarán una
especificación de fuente similar, porque si no, no trabajarán.
</p>

<note>
Si tiene por ahí una versión del centro de control gnome1, úsela para
escoger cualquier fuente iso10646-1 de allí.
</note>

<pre caption="Ejemplo de ~/.gtkrc (para GTK+1) que define una fuente
compatible con Unicode">
style "user-font"
{
    fontset="-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1"
}
widget_class "*" style "user-font"
</pre>

<p>
Si una aplicación tiene soporte Unicode para ambos interfaces gráficos, Qt y
GTK+2, generalmente obtendrá mejores resultados con GTK+2.
</p>
</body>
</section>

<section>
<title>X11 y las fuentes</title>
<body>

<impo>
<c>x11-base/xorg-x11</c> tiene mucho mejor soporte para Unicode que
XFree86, por lo que es <e>altamente</e> recomendado.
</impo>

<p>
Las fuentes (tipos) TrueType tienen soporte para Unicode y la mayoría
de los cuales vienen con Xorg tienen un soporte bastante impresionante
respecto a la amplitud de caracteres, aunque obviamente, no todos los
glifos disponibles en Unicode tienen su correspondiente. Para
construir fuentes (incluyendo el conjunto Bitstream Vera) con soporte
para los caracteres Asiáticos Orientales en X, asegúrese de activar el
parámetro USE <c>cjk</c>. Muchas otras aplicaciones usan este
parámetro, de manera que vale la pena agregarlo permanentemente.
</p>

<p>
También varios otros paquetes de fuentes (tipos) en Portage soportan Unicode.
</p>

<pre caption="Opcional: Instalar más fuentes con soporte para Unicode">
# <i>emerge terminus-font intlfonts freefonts cronyx-fonts corefonts</i>
</pre>
</body>
</section>

<section>
<title>Entornos gráficos y emuladores de terminal</title>
<body>

<p>
Los entornos gráficos que no esten construidos sobre GTK o Qt
generalmente tienen buen soporte para Unicode, ya que muchas veces
usan la librería Xft para el manejo de fuentes. Si su entorno gráfico
no usa Xft para las fuentes, entonces todavía puede usar la
especificación de fuente mencionada en la sección anterior como una
fuente Unicode.
</p>

<p>
Los emuladores de terminales que usen Xft y soportan Unicode son más
difiles de encontrar. Aparte de Konsol y gnome-terminal, las mejores
opciones en Portage son <c>x11-terms/rxvt-unicode</c>, 
<c>xfce-extra/terminal</c>, <c>gnustep-apps/terminal</c>, 
<c>x11-terms/mlterm</c>, <c>x11-terms/mrxvt</c> o
sencillamente <c>x11-terms/xterm</c> construido con el parámetro USE
<c>unicode</c> e invocado como <c>uxterm</c>.  <c>app-misc/screen</c>
también soporta UTF-8 al invocarse como <c>screen -u</c> o al agregar
los siguientes parámetros al archivo <path>~/.screenrc</path>:
</p>

<pre caption="Para activar soporte UTF-8 en ~/.screenrc">
defutf8 on
</pre>
</body>
</section>

<section>
<title>Vim, emacs, xemacs y nano</title>
<body>

<p>
Vim, emacs y xemacs suministran soporte pleno para UTF-8 support,
además de detectar automáticamente los archivos UTF-8. Para más
información en vim, use <c>:help mbyte.txt</c>.
</p>

<p>
Actualmente nano no suministra soporte para UTF-8, aunque está
planificado desde hace tiempo. Con suerte esto cambiará en el
futuro. Al escribir estas líneas, el soporte para UTF-8 está en el CVS
de nano y debiera estar incluido en el siguiente lanzamiento.
</p>
</body>
</section>

<section>
<title>Intérprete de comandos</title>
<body>

<p>
Actualmente, <c>bash</c> suministra soporte pleno para Unicode a
través de la librería readline de GNU. Los usuarios de Z Shell están
en una situación algo peor -- no hay parte del intérprete de 
comandos que soporte Unicode,  aunque hay un esfuerzo concertado para
agregar soporte para conjuntos de caracteres multibyte en este mismo
momento.
</p>

<p>
El shell C, <c>tcsh</c> y <c>ksh</c> no tienen soporte alguno
para UTF-8.
</p>
</body>
</section>

<section>
<title>Irssi</title>
<body>

<p>
A partir de la versión 0.8.10, irssi tiene soporte pleno para UTF-8,
aunque se requiere que el usuario configure una opción.
</p>

<pre caption="Activando soporte para UTF-8 en irssi">
/set term_charset UTF-8
</pre>

<p>
Para los canales donde se intercambian caracteres no ASCII en
conjuntos de caracteres no UTF-8, el comando <c>/recode</c> puede
usarse para convertir los caracteres. Escriba <c>/help recode</c> para
más información.
</p>
</body>
</section>

<section>
<title>Mutt</title>
<body>

<p>
El cliente de correo electrónico mutt tiene muy buen soporte para
Unicode. Para usar UTF-8 con mutt, coloque las siguientes líneas en su
<path>~/.muttrc</path>:
</p>

<pre caption="~/.muttrc para UTF-8">
set send_charset="utf8" <comment>(conjunto de caracteres saliente)</comment>
set charset="utf8"      <comment>(conjunto de caracteres en pantalla)</comment>
</pre>

<note>
Tal vez vea algún '?' en su correo al leerlo con mutt. Este es el
resultado del uso de un cliente de correo que no indica cuál conjunto
de caracteres utiliza. No se puede hacer mucho acerca de esto, aparte
de pedirles que configuren su cliente correctamente.
</note>

<p>
Hay más información disponible en el <uri
link="http://wiki.mutt.org/index.cgi?MuttFaq/Charset">WikiWiki Mutt</uri>.
</p>
</body>
</section>

<section>
<title>Less</title>
<body>

<p>
Todos hacemos mucho uso de <c>more</c> o <c>less</c> en conjunto con
el <c>|</c> para ver correctamente la salida de un comando, como por
ejemplo <c>dmesg | less</c>. Mientras que <c>more</c> solo requiere
que el intérprete de comandos sepa acerca de UTF-8, <c>less</c>
requiere establecer el valor de una variable de entorno,
<c>LESSCHARSET</c> para asegurar que los caracteres unicode aparezcan
correctamente. Esto se puede hacer en el <path>/etc/profile</path> o
el <path>~/.bash_profile</path>. Inicie el editor de textos de su
preferencia y agregue la siguiente línea a alguno de los archivos
antes mencionados.
</p>

<pre caption="Estableciendo la variable de entorno para less">
LESSCHARSET=utf-8
</pre>
</body>
</section>

<section>
<title>Man</title>
<body>

<p>
La páginas man son una parte integral de cualquier máquina Linux. Para
asegurar que cualquier unicode en las páginas man aparezcan
correctamente, modifique el <path>/etc/man.conf</path>  y reemplace
una línea, como se hace a continuación.
</p>

<pre caption="cambios a man.conf para agregar soporte para Unicode">
<comment>(Esta es la línea antigua)</comment>
NROFF           /usr/bin/nroff -Tascii -c -mandoc
<comment>(Reemplace la anterior por ésta)</comment>
NROFF           /usr/bin/nroff -mandoc -c
</pre>
</body>
</section>

<section>
<title>Probándolo todo</title>
<body>

<p>
Existen numerosos sitios UTF-8. <c>net-www/w3m</c>,
<c>net-www/links</c>, <c>net-www/elinks</c>, <c>net-www/lynx</c> y
todos los navegadores basados en Mozilla (incluyendo a Firefox)
soportan UTF-8. Konqueror y Opera también tienen soporte pleno para
UTF-8 también.
</p>

<p>
Al usar uno de los navegadores de texto, asegúrese de usar un terminal
que soporte Unicode.
</p>

<p>
Si llegara a ver algun caracter en forma de caja con letras o números
adentro, esto significa que la fuente no tiene el dibujo del caracter
para el símbolo o glifo que necesita UTF-8, por lo que muestra una
cajita con el código hexadecimal del símbolo UTF-8.
</p>

<ul>
  <li>
    <uri
    link="http://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html">Una
    página de prueba de UTF-8</uri>
  </li>
  <li>
    <uri link="http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm">
    Una página de prueba de UTF-8, suministrada por la Universidad de 
    Frankfurt</uri>
  </li>
</ul>
</body>
</section>

<section>
<title>Métodos para ingresar caracteres</title>
<body>

<p>
En X, se puede usar las llamadas <e>teclas muertas</e> para escribir
caracteres que no aparecen en el teclado. Estos funcionan pulsando la
tecla Alt derecha (en algunos países, AltGr) junto con una tecla
opcional de la sección no alfabética del teclado, justo a la izquierda
de la tecla Enter, soltándolas y a continuación pulsando una letra. La
tecla muerta debe entonces modificar la letra. Se pueden efectuar aún
más modificaciones pulsando la tecla Shift al mismo tiempo que AltGr y
el caracter modificador.
</p>

<p>
Para activar las teclas muertas en X, necesita usar un mapa de teclado
que las soporte. La mayoría de los mapas europeos ya tienen teclas muertas
con el mapa por defecto. Sin embargo, esto no es así con los mapas
norteamericanos. Aunque exista algún grado de inconsistencia, la
solución más sencilla parece ser usar un mapa "en_US" en vez de "us",
por ejemplo, el mapa se especifica en <path>/etc/X11/xorg.conf</path>
así:
</p>

<pre caption="Ejemplo parcial de /etc/X11/xorg.conf">
Section "InputDevice"
    Identifier "Keyboard0"
    Driver     "kbd"
    Option     "XkbLayout" "en_US" <comment># En vez de solo "us"</comment>
    <comment>(Continúa con las demás opciones Xkb)</comment>
EndSection
</pre>

<note>
El cambio recién visto solo se requiere en caso de usar un mapa de
teclado norteamericano u otro mapa donde las teclas muertas parecen no
funcionar. Los usuarios europeos deben tener sus teclas muertas
funcionando sin más.
</note>

<p>
Este cambio hará efecto al reiniciar el servidor X. Para aplicar el
cambio en seguida, use la herramienta <c>setxkbmap</c>, así
<c>setxkbmap en_US</c>.
</p>

<p>
Probablemente sea más fácil describir el uso de teclas muertas con
ejemplos. Aunque los resultados dependen de la localización del
sistema, los conceptos son iguales, sin importar la localización. Los
ejemplos contienen UTF-8, así que para verlos, debe configurar su
navegador para ver la página como UTF-8, o tener su localización UTF-8
ya configurada.
</p>

<p>
Si pulsamos AltGr y [ a la vez, los soltamos y luego pulsamos a,
producimos una 'ä'. Si pulsamos AltGr y [ al mismo tiempo y luego
pulsamos e, producimos una 'ë'. Al pulsar AltGr y ; a la vez,
producimos una 'á' y cuando pulsamos AltGr y ; a la vez, los soltamos
y pulsamos la e, producimos una 'é'.
</p>

<p>
Si pulsamos AltGr, Shift y [ a la vez, los soltamos y luego pulsamos
una a, podemos producir una 'å' escandinava. Similarmente, al pulsar
AltGr, Shift y [ al mismo tiempo, soltamos <e>solamente</e>
la [ y luego al pulsarla otra vez, producimos una '˚'. Aunque lo
parezca, este caracter (U+02DA) no es el símbolo de grados
(U+00B0). Esto funciona para los demás acentos producidos por las
teclas muertas — AltGr y [, soltando solo la tecla [ y pulsándolo de
nuevo hace una '¨'.
</p>

<p>
AltGr puede ser usado con las teclas alfabéticas solas. Por ejemplo una
AltGr y una m producen una mu griega en minúscula: 'µ'. AltGr y una s
producen un 'scharfes s' también conocida como 'esszet', así:
'ß'. Como es de esperarse por parte de muchos usuarios europeos
(porque está marcado en su teclado), AltGr y 4 producen un signo de
Euro, '€'.
</p>
</body>
</section>

<section>
<title>Recursos</title>
<body>

<ul>
  <li>
    <uri link="http://www.wikipedia.com/wiki/Unicode">El artículo de
    Wikipedia sobre Unicode</uri>
  </li>
  <li>
    <uri link="http://www.wikipedia.com/wiki/UTF-8">El artículo Wikipedia sobre
    UTF-8</uri>
  </li>
  <li><uri link="http://www.unicode.org">Unicode.org</uri></li>
  <li><uri link="http://www.utf-8.com">UTF-8.com</uri></li>
  <li><uri link="http://www.ietf.org/rfc/rfc3629.txt">RFC 3629</uri></li>
  <li><uri link="http://www.ietf.org/rfc/rfc2277.txt">RFC 2277</uri></li>
  <li><uri
    link="http://www.tbray.org/ongoing/When/200x/2003/04/26/UTF">Caracteres vs.
    Bytes</uri>
  </li></ul>
</body>
</section>
</chapter>
</guide>
