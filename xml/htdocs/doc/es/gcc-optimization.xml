<?xml version='1.0' encoding='UTF-8'?>

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/gcc-optimization.xml,v 1.15 2014/03/22 20:17:43 nimiux Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide disclaimer="obsolete" redirect="https://wiki.gentoo.org/wiki/GCC_optimization/es" lang="es">

<title>Guía de Compilación Optimizada</title>

<author title="Autor">
  <mail link="nightmorph"/>
</author>
<author title="Traductor">
  <mail link="chiguire"/>
</author>
<author title="Traductor">
  <mail link="nordri@gmail.com">Federico Díaz</mail>
</author>
<author title="Traductor">
  <mail link="srinclan@gmail.com">Sergio D. Rodríguez Inclan</mail>
</author>
<author title="Traductor">
  <mail link="nimiux"/>
</author>

<abstract>
Esta guía ofrece una introducción al código compilado de forma
óptima usando CFLAGS y CXXFLAGS seguras y sanas. También describe
la teoría detrás de la optimización en general.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>6</version>
<!-- 2012-12-25 -->
<date>2013-07-27</date>

<chapter>
<title>Introducción</title>
<section>
<title>¿Qué son CFLAGS y CXXFLAGS?</title>
<body>

<p>
CFLAGS y CXXFLAGS son variables de entorno usadas para decirle a la
Colección de Compiladores GNU, <c>gcc</c>, que tipo de opciones usar
cuando compila código fuente. Las CFLAGS son para código escrito en C,
mientras que CXXFLAGS son para código escrito en C++.
</p>

<p>
Pueden usarse para disminuir la cantidad de mensajes de depuración
para un programa, aumentar los niveles de aviso de errores, y por
supuesto, optimizar el código producido. El <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Invoking-GCC.html#Invoking-GCC">
Cuaderno de GNU gcc </uri> mantiene una completa lista de opciones
disponibles y sus propósitos.
</p>

</body>
</section>

<section>
<title>¿Cómo se usan?</title>
<body>

<p>
CFLAGS y CXXFLAGS se pueden usar de dos formas. La primera,
por programa con los ficheros Makefile generados por
automake.
</p>

<p>
Sin embargo, esto no debería hacerse cuando instalamos paquetes
que se encuentran en el árbol Portage. En su lugar, establezca sus
CFLAGS y CXXFLAGS en <path> /etc/portage/make.conf</path>. De
esta manera todos los paquetes se compilarán con las opciones que
especifique.
</p>

<pre caption="CFLAGS en /etc/portage/make.conf">
CFLAGS="-march=athlon64 -O2 -pipe"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
Como puede ver, CXXFLAGS se establece para usar todas las opciones
presentes en CFLAGS. Casi seguro que es lo que se desea. Normalmente
no necesitará especificar opciones adicionales en CXXFLAGS.
</p>

</body>
</section>

<section>
<title>Confusiones</title>
<body>

<p>
Aunque CFLAGS y CXXFLAGS pueden ser muy efectivos tomando el código
fuente para producir binarios pequeños o rápidos, también pueden
deteriorar la función de su código, inflar su tamaño, ralentizar su
ejecución, ¡O incluso causar errores de compilación!
</p>

<p>
CFLAGS no es una solución mágica; no hará que su sistema corra más
rápido o sus binarios sean más pequeños automáticamente. Añadir más y
más opciones en un intento de optimización (o "apretar") su sistema
es una receta segura para fracasar. Hay un punto en el cual
alcanzará resultados de peor calidad.
</p>

<p>
A pesar de las recomendaciones que se pueden encontrar en Internet,
unas variables CFLAGS y CXXFLAGS agresivas están más cerca de dañar sus
programas que de hacerles algún bien. Recuerde que la razón para la
cual existen las opciones en primer lugar es porque están diseñadas
para usarse en sitios específicos para propósitos específicos. ¡Solo
porque una CFLAG particular sea buena para un fragmento de código no
significa que esté diseñada para compilar todo lo que quiera instalar
en su máquina!
</p>

</body>
</section>

<section>
<title>¿Preparado?</title>
<body>

<p>
Ahora que está advertido de algunos de los riesgos involucrados,
echemos un vistazo a algunas optimizaciones sanas y seguras para su
computadora. Esto le será útil y los desarrolladores lo agradecerán
la próxima vez que informe de un problema en <uri
link="http://bugs.gentoo.org">Bugzilla</uri>. (Los desarrolladores
suelen pedir que recompile un paquete con los CFLAGS mínimos para ver
si el problema persiste. Recuerde que las opciones agresivas pueden
arruinar el código.)
</p>

</body>
</section>
</chapter>

<chapter>
<title>Optimizar</title>
<section>
<title>Lo básico</title>
<body>

<p>
El objetivo de usar CFLAGS y CXXFLAGS es crear código específico
para su sistema; debería funcionar perfectamente y ser ligero y
rápido, si es posible. Algunas veces estás condiciones son mutuamente
excluyentes, pero nosotros trabajaremos con combinaciones que sabemos
que funcionan bien. Idealmente, las mejores están disponibles para cada
arquitectura de CPU. Mencionaremos más adelante ajustes más
agresivos para que se sepa con cuales debe tener cuidado. No
discutiremos cada opción listada en el manual de <c>GCC</c> (hay
cientos), pero hablaremos de las básicas, las más comunes.
</p>

<note>
Si no está seguro qué hace la opción, revise el capítulo relevante
en el <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Optimize-Options.html#Optimize-Options">
manual de gcc</uri> y si aún continúa atascado, pruebe Google, o
revise las <uri link="http://gcc.gnu.org/lists.html">listas de
correo</uri> de <c>gcc</c>.
</note>

</body>
</section>

<section>
<title>-march</title>
<body>

<p>
La primera y más importante opción es <c>-march</c>. Esta le dice al
compilador que código debería producir para su <uri
link="http://en.wikipedia.org/wiki/Microarchitecture">arquitectura</uri>
de procesador (o <e>arch</e>); dice que debería producir código para
un cierto tipo de CPU. Diferentes CPUs tienen diferentes
características, soportan diferentes conjunto de instrucciones y
tienen diferentes formas de ejecutar código. La opción
<c>-march</c> indicará al compilador que produzca código específico
para su CPU, tomando en cuenta todas sus capacidades, características,
conjuntos de instrucciones, caprichos y demás.
</p>

<p>
A pesar que la variable CHOST en <path>/etc/portage/make.conf</path>
especifica la arquitectura general usada, <c>-march</c> también se
usa para que sus programas sean optimizados para su procesador
específico. Las arquitecturas x86 y x86-64 (entre otras) también
deberían hacer uso de la opción <c>-march</c>.
</p>

<p>
¿Qué tipo de CPU tiene? Para averiguarlo, ejecute la siguiente orden:
</p>

<pre caption="Examinar la información de la CPU">
$ <i>cat /proc/cpuinfo</i>
</pre>

<p>
Ahora veamos <c>-march</c> en acción. Este ejemplo es para un antiguo
Pentium III:
</p>

<pre caption="/etc/portage/make.conf: Pentium III">
CFLAGS="-march=pentium3"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
Aquí hay otro para una CPU AMD de 64 bits:
</p>

<pre caption="/etc/portage/make.conf: AMD:64">
CFLAGS="-march=athlon64"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
Si todavía no está seguro qué tipo de CPU tiene, tal vez quiera usar
la opción <c>-march=native</c>. Al usarla, GCC detectará el procesador
y automáticamente usará las opciones apropiadas.<brite>¡Sin embargo,
no use esta opción si la intención es ¡compilar paquetes para un CPU
diferente!</brite>
</p>

<p>
De manera que, si está compilando paquetes en una computadora, pero
piensa ejecutarlos en una computadora diferente (usando, por ejemplo,
una computadora rápida para construir paquetes para una máquina más
antigua y lenta), entonces <e>no</e> use la opción
<c>-march=native</c>. La palabra "native" significa que el código
producido podrá ejecutarse <e>solamente</e> en ese tipo de CPU. Las
aplicaciones construidas con <c>-march=native</c> en una CPU AMD Athlon
64 no podrán ejecutarse en una CPU VIA C3 más antigua.
</p>

<p>
También están disponibles las opciones <c>-mcpu</c> y
<c>-mtune</c>. Cada una de ellas <e>solo</e> se usará cuando no haya
otra opción <c>-march</c> disponible. Ciertas arquitecturas de
procesador pueden requerir <c>-mtune</c> o incluso de
<c>-mcpu</c>. Desgraciadamente, el comportamiento de <c>gcc</c> no es
muy consistente con la manera que cada opción se comporta de una
arquitectura a la otra.
</p>

<p>
En CPUs x86 y x86-64, <c>-mcpu</c> se generará código específico para
esa CPU usando todas sus instrucciones disponibles y el ABI correcto; no
tendrá compatibilidad hacia atrás para CPUs antiguas o diferentes. Si no
necesita ejecutar código en otro sitio que en el sistema que está
corriendo Gentoo, continúe con <c>-march</c>. Solo debería
considerar usar <c>-mtune</c> cuando necesite generar código para CPUs
antiguas como i386 e i486. <c>-mtune </c> produce un código más
genérico que <c>-march</c>; aunque afinará el código para cierta CPU,
no tendrá en cuenta los conjuntos de instrucciones disponibles y ABI. No
use <c>-mcpu</c> en sistemas x86 o x86-64, ya que es obsoleto para
estas arquitecturas.
</p>

<p>
Solo CPUs que no sean x86/x86-64 (como Sparc, Alpha y PowerPC) pueden
requerir <c>-mtune </c> o <c>-mcpu</c> en lugar de <c>-march</c>.
En estas arquitecturas, <c>-mtune</c>/<c>-mcpu</c> algunas veces se
comportará como <c>-march</c> en (x86/x86-64) ... pero con un nombre
distinto. De nuevo, el comportamiento de <c>gcc</c> y los nombres de
las opciones no es consistente entre arquitecturas, así que asegúrese
de revisar el <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Submodel-Options.html#Submodel-Options">
manual</uri> de <c>gcc</c> para determinar cual de ellas se ajusta a
su sistema.
</p>

<note>
Para más sugerencias de configuraciones de
<c>-march</c>/<c>-mtune</c>/ <c>-mcpu</c>, por favor lea el capítulo 5
de la <uri link="/doc/es/handbook/">Guía de Instalación de Gentoo
</uri> apropiada a su arquitectura. También, lea el manual de
<c>gcc</c> listado en la página <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Submodel-Options.html#Submodel-Options">
opciones específicas por arquitectura</uri>, con
explicaciones más detalladas sobre las diferencias entre
<c>-march</c>, <c>-mcpu</c>, y <c>-mtune</c>.
</note>

</body>
</section>

<section>
<title>-O</title>
<body>

<p>
Lo siguiente es la variable <c>-O</c>. Controla el nivel de
optimización de todo el código. Hace que la compilación de código
tome algo más de tiempo, y puede usar mucha más memoria, especialmente
al incrementar el nivel de optimización.
</p>

<p>
Hay cinco configuraciones para <c>-O</c>: <c>-O0</c>, <c>-O1</c>,
<c>-O2</c>, <c>-O3</c> y <c>-Os</c>. Debería usar solamente una de
ellas en <path>/etc/portage/make.conf</path>.
</p>

<p>
A excepción de <c>-O0</c>, la configuración de <c>-O</c> activa
varias opciones adicionales, así que asegúrese de leer el capítulo
del manual de gcc en <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Optimize-Options.html#Optimize-Options">
opciones de optimización</uri> para aprender qué opciones se
activan en cada nivel <c>-O</c>, así como algunas explicaciones
sobre lo que hacen.
</p>

<p>
Examinemos cada nivel de optimización:
</p>

<ul>
  <li>
    <c>-O0</c>: Este nivel (la letra "O" seguida de un cero)
    desconecta por completo la optimización y es el predeterminado si
    no se especifica ningún nivel <c>-O</c> en CFLAGS o CXXFLAGS. El
    código no se optimizará. Esto, normalmente, no es lo que se
    desea.
  </li>
  <li>
    <c>-O1</c>: Este es el nivel de optimización más básico. El
    compilador intentará producir un código rápido y pequeño sin tomar
    mucho tiempo de compilación. Es bastante básico, pero conseguirá
    acabar el trabajo siempre.
  </li>
  <li>
    <c>-O2</c>: Un paso delante de <c>-O1</c>. Este es el nivel
    <e>recomendado</e> de optimización, a no ser que tenga necesidades
    especiales. <c>-O2</c> activará algunas opciones añadidas a
    las que se activan con <c>-O1</c>. Con <c>-O2</c>, el compilador
    intentará aumentar el rendimiento del código sin comprometer el
    tamaño y sin tomar mucho más tiempo de compilación.
  </li>
  <li>
    <c>-O3</c>: Este es el nivel más alto de optimización posible, y
    también el más arriesgado. Tomará muchísimo tiempo compilar su
    código con esta opción, y de hecho, <e>no debería usarse para
    todo el sistema con <c>gcc</c> 4.x</e>. El comportamiento de
    <c>gcc</c> ha cambiado significativamente desde la versión 3.x,
    donde con <c>-O3</c> se había demostrado producir código con
    tiempos de ejecución marginalmente menores sobre <c>-O2</c>, pero
    este ya no es el caso con <c>gcc</c> 4.x. Compilar todos sus
    paquetes con <c>-O3</c> <e>resultará</e> en grandes binarios que
    requerirán mucha memoria e incrementará significativamente los
    extraños fallos de compilación o los comportamientos inesperados
    de los programas (incluidos los errores). Las desventajas
    compensan las ventajas. <b>No se recomienda usar <c>-O3</c> con
    <c>gcc</c> 4.x.</b>
  </li>
  <li>
    <c>-Os</c>: Este nivel optimizará su código para el tamaño. Activa
    todas las opciones de <c>-O2</c> que no aumenten el tamaño del
    código generado. Es útil para máquinas con capacidad limitada de
    disco y/o con CPUs con poca caché. Sin embargo, puede causar
    algunos problemas porque es filtrado por muchos ebuilds del
    árbol. No aconsejamos usar <c>-Os</c>.
  </li>
</ul>

<p>
Como se comentó anteriormente, <c>-O2</c> es el nivel de optimización
recomendado. Si un paquete muestra errores de compilación, asegúrese
que no está usando <c>-O3</c>. Como opción de marcha atrás, pruebe
configurando CFLAGS y CXXFLAGS a un nivel de optimización inferior,
como <c>-O1</c> o incluso <c>-O0 -g2 -ggdb</c> (para reportar errores
y comprobar posibles problemas) y recompile el paquete.
</p>

</body>
</section>

<section>
<title>-pipe</title>
<body>

<p>
<c>-pipe</c> es una opción común. Realmente no tiene efecto sobre el
código que se produce, pero hace que el proceso de compilación sea más
rápido. Indica al compilador que use tuberías en lugar de archivos
temporales durante los diferentes estados de compilación, lo cual usa
más memoria. En sistemas con poca memoria, el proceso de gcc podría
ser terminado. En este caso no use esta opción.
</p>

</body>
</section>

<section>
<title>-fomit-frame-pointer</title>
<body>

<p>
Esta es una opción muy común diseñada para reducir el tamaño del
código generado. Está activada para todos los niveles de <c>-O</c>
(excepto <c>-O0</c>) en arquitecturas donde no interfiera con la
depuración (como x86-64), pero puede que haga falta activarla
añadiéndola a sus opciones. Aunque el manual de GNU <c>gcc</c> no
especifica todas las arquitecturas en las que está activada al usar
<c>-O</c>, hay que activarla explícitamente en un x86. Sin embargo,
al usar esta opción la depuración se convierta en difícil o incluso
imposible.
</p>

<p>
En particular, provoca que la localización de problemas en aplicaciones
escritas en Java sea mucho más complicada, aunque Java no es el único
código afectado al usar esta opción. Así, aunque esta opción
puede ayudar, la depuración será complicada; los "backtraces" en
particular no servirán de mucho. Sin embargo, si no planea hacer muchas
depuraciones y no tiene añadida ninguna otra CFLAG relacionada con la
depuración como <c>-ggdb</c> (y no está instalando paquetes con la
variable USE <c>debug</c>), entonces intente usar
<c>-fomit-frame-pointer</c>.
</p>

<impo>
<e>No</e> combine <c>-fomit-frame-pointer</c> con la opción de
nombre similar <c>-momit- leaf-frame-pointer</c>. No se aconseja
la utilización de esta última, ya que <c>-fomit-frame-pointer</c>
ya hace el trabajo apropiado. Es más, <c>-momit-leaf-frame-pointer</c>
ha demostrado que impacta negativamente en el rendimiento del código.
</impo>

</body>
</section>

<section>
<title>-msse, -msse2, -msse3, -mmmx, -m3dnow</title>
<body>

<p>
Estas opciones activan los conjuntos de instrucciones <uri
link="http://es.wikipedia.org/wiki/Streaming_SIMD_Extensions">SSE</uri>,
<uri link="http://es.wikipedia.org/wiki/SSE2">SSE2</uri>, <uri
link="http://es.wikipedia.org/wiki/SSSE3">SSE3</uri>, <uri
link="http://es.wikipedia.org/wiki/MMX">MMX</uri>, and <uri
link="http://es.wikipedia.org/wiki/3DNow%21">3DNow!</uri> para
arquitecturas x86-64. Son útiles principalmente en multimedia, juegos
y otras tareas intensivas de computación en punto flotante, aunque
también contienen muchos otros realces matemáticos. Estos conjuntos de
instrucciones se encuentran en las CPUs más modernas.
</p>

<impo>
Asegúrese de verificar si su CPU las soporta ejecutando <c>cat
/proc/cpuinfo</c>. La salida incluirá cualquier conjunto de
instrucciones adicionales. Observe que <b>pni</b> es solo otro nombre
para SSE3.
</impo>

<p>
Normalmente no necesita añadir ninguna de estas opciones a
<path>/etc/portage/make.conf </path> mientras esté usando la
<c>-march</c> correcta (por ejemplo, <c>-march= nocona</c> implica
<c>-msse3</c>). Algunas excepciones notables son las nuevas CPUs VIA
y AMD64 que soportan instrucciones no implicadas por <c>-march</c>
(como SSE3). Para CPUs como estas necesitará habilitar opciones
adicionales donde sea apropiado después de verificar la salida de
<c>cat /proc/cpuinfo</c>.
</p>

<note>
Debería revisar la <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/i386-and-x86_002d64-Options.html#i386-and-x86_002d64-Options">
lista</uri> de opciones
específicas para x86 y x86-64 para ver cuales de estos conjuntos de
instrucciones los activa la propia configuración del tipo de
CPU. Si aparece una instrucción, entonces no necesita especificarla;
se activará al usar la configuración de <c>-march </c> apropiada.
</note>

</body>
</section>
</chapter>

<chapter>
<title>PUFs de Optimización</title>
<section>
<title>¡Pero tengo un mejor rendimiento con -funroll-loops -fomg-optimize!
</title>
<body>

<p>
No, solo <e>piensa</e> que lo hace porque alguien le ha convencido que
es mejor utilizar el mayor número de opciones. Las opciones agresivas
solo dañarán sus aplicaciones cuando use un sistema completo. Incluso
el <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Optimize-Options.html#Optimize-Options">
manual</uri> de <c>gcc</c> dice que usar
<c>-funroll-loops </c> y <c>-funroll-all-loops</c> crea código que
ocupa más espacio y que corre más lento. Aunque por alguna razón,
estas dos opciones, junto con <c>-ffast-math</c>, <c>-fforce-mem</c>,
<c>-fforce-addr</c>, y similares, continúan siendo muy populares entre
pardillos que creen saber más que nadie.
</p>

<p>
La verdad es que son opciones peligrosamente agresivas. Eche un
vistazo a los <uri link="http://forums.gentoo.org">Foros de
Gentoo</uri> y <uri link="http://bugs.gentoo.org">Bugzilla</uri> para
ver que hacen estas variables: ¡Nada bueno!
</p>

<p>
No necesita usar estas opciones globalmente en CFLAGS o en
CXXFLAGS. Solo dañarán el rendimiento. Puede sonarle como que tiene un
sistema avanzado de alto rendimiento, pero no hará más que inflar su
código y marcar sus informes de error como INVALID o WONTFIX.
</p>

<p>
No necesita opciones peligrosas como estas. <b>No las
utilice</b>. Quédese con las básicas: <c>-march</c>, <c>-O</c>, y
<c>-pipe</c>.
</p>

</body>
</section>

<section>
<title>¿Qué pasa con los niveles -O mayores que 3?</title>
<body>

<p>
Algunos usuarios alardean de que obtienen mejor rendimiento usando
<c>-O4</c>, <c>-O9</c> y similares, pero la realidad es que niveles de
<c>-O</c> mayores que 3 no tienen efecto. El compilador puede aceptar
CFLAGS como <c>-O4</c>, pero realmente no hace nada con él. Solo
realiza la optimización para <c>-O3</c>, nada más.
</p>

<p>
¿Necesita más pruebas? Examine el <uri
link="http://gcc.gnu.org/viewcvs/trunk/gcc/opts.c?revision=124622&amp;view=
markup">código fuente</uri> de <c>gcc</c>:
</p>

<pre caption="Código fuente de -O">
if (optimize >= 3)
    {
      flag_inline_functions = 1;
      flag_unswitch_loops = 1;
      flag_gcse_after_reload = 1;
      /* Allow even more virtual operators.  */
      set_param_value ("max-aliased-vops", 1000);
      set_param_value ("avg-aliased-vops", 3);
    }
</pre>

<p>
Como puede ver, cualquier valor por encima de 3 es tratado como solo
<c>-O3</c>.
</p>

</body>
</section>

<section>
<title>¿Qué pasa con las opciones redundantes?</title>
<body>

<p>
A menudo CFLAGS y CXXFLAGS que se han activado en varios niveles de
<c>-O</c> están especificadas de forma redundante en
<path>/etc/portage/make.conf</path>. A veces esto ocurre por
ignorancia, pero también se hace para permitir el filtrado o el
reemplazo de opciones.
</p>

<p>
Muchos de los ebuilds del árbol del Portage contienen
filtrado o reemplazo de opciones. Suele hacerse porque hay paquetes
que fallan en ciertos niveles de <c>-O</c>, o cuando el código fuente
es muy sensible para ser usado para cualquier opción adicional. El
ebuild podrá cada vez filtrar para algunas o todas las CFLAGS y
CXXFLAGS, o puede reemplazar <c>-O</c> con un nivel diferente.
</p>

<p>
El <uri
link="http://devmanual.gentoo.org/ebuild-writing/functions/src_compile/build-
environment/index.html">Manual del Desarrollador de Gentoo</uri>
resume dónde y cómo trabaja el filtrado o reemplazo de opciones.
</p>

<p>
Es posible evitar el filtrado de <c>-O</c> filtrando mediante el
listado redundante de opciones para un cierto nivel, como
<c>-O3</c>, haciendo cosas como:
</p>

<pre caption="Especificar CFLAGS redundantes">
CFLAGS="-O3 -finline-functions -funswitch-loops"
</pre>

<p>
Sin embargo, <brite>hacer esto no es algo acertado</brite>.
¡Las CFLAGS se filtran por alguna razón! Cuando estas opciones se
filtran es porque es inseguro construir paquetes con ellos.
Claramente, <e>no</e> es seguro compilar su sistema completo con
<c>-O3</c> si alguna de estas opciones está activada para este nivel
causará problemas con ciertos paquetes. Por lo tanto, no debería
intentar "saber más" que los desarrolladores que mantienen estos
paquetes. <e>Confíe en ellos</e>. ¡El filtrado y reemplazo de
opciones se hace por su bien!  Si un ebuild especifica opciones
alternativas, entonces no intente evitarlas.
</p>

<p>
No encontrará más que problemas cuando construya un paquete con
opciones inaceptables. Cuando informe de sus problemas en Bugzilla,
las opciones que usó en <path>/etc/portage/make.conf</path> serán
fácilmente visibles y se le instará a recompilar sin ellas.
¡Protéjase de los problemas de recompilar evitando el uso
de opciones redundantes! No asuma automáticamente que sabe más
que los desarrolladores.
</p>

</body>
</section>

<section>
<title>¿Qué pasa con LDFLAGS?</title>
<body>

<p>
Los desarrolladores de Gentoo ya han configurado LDFLAGS básicas y
seguras en los perfiles base, de tal manera que no necesita cambiarlas.
</p>

</body>
</section>

<section>
<title>¿Puedo usar opciones por paquete?</title>
<body>

<warn>
El uso de opciones específicas de paquetes complica la depuración
y el soporte. Asegúrese mencionarlo en los informes de fallos si está
usando esta característica y los cambios que haya realizado.
</warn>

<p>
Puede encontrarse información acerca de como utilizar las variables
de entorno por paquete (incluyendo CFLAGS) en el <uri
link="/doc/es/handbook/handbook-amd64.xml?part=3&amp;chap=6#doc_chap2">Manual
Gentoo, "Variables de entorno por paquete"</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Recursos</title>
<section>
<body>

<p>
Los siguientes recursos pueden ser de ayuda para comprender la
optimización:
</p>

<ul>
  <li>
    El <uri link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/">Manual de
    GNU gcc</uri>
  </li>
  <li>
    Capítulo 5 del <uri link="/doc/es/handbook/">Manual de Instalación
    de Gentoo</uri>
  </li>
  <li><c>man make.conf</c></li>
  <li><uri link="http://es.wikipedia.org">Wikipedia</uri></li>
  <li>Los <uri link="http://forums.gentoo.org">Foros de Gentoo</uri></li>
</ul>

</body>
</section>
</chapter>
</guide>
