<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/nvidia-guide.xml,v 1.4 2004/12/02 18:40:28 chiguire Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/nvidia-guide.xml">
<title>Guía nVidia Gentoo</title>

<author title="Autor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Editor-Es">
    <mail link="bass@gentoo.org">José Alberto Suárez López</mail>
 </author>
<author title="Editor-Es Adjunto">
    <mail link="chiguire@gentoo.org">John Christian Stoddart</mail>
 </author>

<abstract>
Muchos usuarios Gentoo tienen un chipset nVidia en su sistema. nVidia suministra 
manejadores específicos para aumentar el desempeño de su tarjeta. Esta guía 
informa cómo instalar y configurar estos manejadores.
</abstract>

<license/>

<version>1.7</version>
<date>2004-12-02</date>

<chapter>
<title>Configurando su Tarjeta</title>
<section>
<title>Instalando los manejadores apropiados</title>
<body>

<p>
Los manejadores nVidia incluyen módulos para integrar a su kernel actual. 
Para poder hacer esto, el kernel debe soportar la carga de módulos. Si ha 
usado <c>genkernel</c> al configurar su kernel entonces está listo, sino 
revise su configuración de kernel para que esté soporte esté habilidado: 
</p>

<pre caption="Activando la carga de módulos del kernel">
Loadable module support ---&gt;
  [*] Enable loadable module support
</pre>

<p>
Probablemente tendrá que activar <e>Memory Type Range Register</e> en el kernel:
</p>

<pre caption="Activando MTRR">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

<p>
Los módulos y librerías nVidia están combinado en dos paquetes: <c>nvidia-glx</c> 
y <c>nvidia-kernel</c>. El primero son las librerías GLX mientras que el segundo 
son los módulos del kernel. Como <c>nvidia-glx</c> depends de <c>nvidia-kernel</c>, 
es suficiente instalar <c>nvidia-glx</c>:
</p>

<pre caption="Instalando los módulos nVidia">
# <i>emerge nvidia-glx</i>
</pre>

<p>
Al concluir la instalación, ejecute <c>modprobe nvidia</c> para cargar el módulo 
del kernel a la memoria.
</p>

<pre caption="Cargando el módulo del kernel">
# <i>modprobe nvidia</i>
</pre>

<p>
Probablemente quiera hacer esto cada vez que arranque, así que modifique 
<path>/etc/modules.autoload.d/kernel-2.6</path> (o <path>kernel-2.4</path>) y
agréguele <c>nvidia</c>. ¡No se olvide ejecutar <c>modules-update</c> 
después!
</p>

<pre caption="Ejecute modules-update">
# <i>modules-update</i>
</pre>
</body>
</section>

<section>
<title>Configurando el servidor X</title>
<body>

<p>
Una vez que los manejadores apropiados estén cargados, hará falta configurar 
su servidor X (XFree86 o Xorg) para que use el manejador <c>nvidia</c> en 
vez del manejador <c>nv</c>.
</p>

<p>
Abra <path>/etc/X11/XF86Config</path> (o <path>/etc/X11/xorg.conf</path>) 
con su editor de texto preferido (como <c>nano</c> o <c>vim</c>) y busque 
la sección <c>Device</c>. Allí cambie la línea <c>Driver</c>:
</p>

<pre caption="Cambiando nv por nvidia en la configuración del servidor X">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>
  VideoRam   65536
EndSection
</pre>

<p>
Luego vaya a la sección <c>Module</c> y verifique que el módulo <c>glx</c> 
sea cargado mientras que el módulo <c>dri</c> no lo sea:
</p>

<pre caption="Actualizando la sección Module">
Section "Module"
  <comment>(...)</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>(...)</comment>
EndSection
</pre>

<p>
Ejecute <c>opengl-update</c> para que el servidor X use las librerías GLX  de nVidia:
</p>

<pre caption="Ejecute opengl-update">
# <i>opengl-update nvidia</i>
</pre>
</body>
</section>

<section>
<title>Agregando usuarios al grupo video</title>
<body>

<p>
Debe agregar el usuario al grupo <c>video</c> para que éste tenga
acceso a los archivos de dispositivo nvidia:
</p>

<pre caption="Agregando el usuario al grupo video">
# <i>gpasswd -a youruser video</i>
</pre>

<p>
Esto tal vez no sea totalmente necesario si no es usuario de
<c>udev</c>, pero no hace daño alguno, ya que es una actualización a
futuro :)
</p>
</body>
</section>

<section>
<title>Probando su tarjeta</title>
<body>

<p>
Para probar su tarjeta nVidia, inicie X y escriba el comando 
<c>glxinfo | grep direct</c>. Debería decir que el renderizado directo 
ha sido activado:
</p>

<pre caption="Revisando el estado del renderizado directo">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
Para verificar su FPS (cuadros por segundo), ejecute <c>glxgears</c>. 
</p>
</body>
</section>
</chapter>

<chapter>
<title>Localización de problemas</title>
<section>
<title>¿Cómo hacer funcionar la aceleración 2D en equipos con 4Gb o más de memoria?</title>
<body>

<p>
Si tiene problemas con la acelerración 2D es probable que no haya podido 
establecer un intervalo de escritura combinada (write-combining range) con 
el MTRR. Para verificar, revise el contenido de <path>/proc/mtrr</path>:
</p>

<pre caption="Revisión de activación de escritura combinada">
# <i>cat /proc/mtrr</i>
</pre>

<p>
Cada línea debe contener "write-back" o "write-combining". Si ve una línea con la palabra 
"uncachable", habrá que cambiar la configuración del BIOS para hacerlo funcionar.
</p>

<p>
Reinicie su equipo e ingrese al BIOS. Encuentre la configuración MTRR (probablemente 
bajo "CPU Settings"). Cambie la configuración de "continuous" a "discrete" y reinicie 
Linux. Deberá poder comprobar que no hay entradas "uncachable" y que la aceleración 
2D funcione sin problemas.</p>
</body>
</section>

<section>
<title>Recibo advertencias acerca de pilas de 4K no soportadas</title>
<body>

<p>
Los paquetes <c>nvidia-kernel</c> menores que la versión 1.0.6106 sólo soportan 
kernels que usen pilas de 8K. Los kernels más recientes (del 2.6.6 en adelante) soportan 
pilas de 4K también. No seleccione pilas de 4K en su configuración de kernel si está 
usando un paquete <c>nvidia-kernel</c> de ésta versión. Puede encontrar esta opción 
bajo la sección <c>Kernel Hacking</c>.
</p>
</body>
</section>
</chapter>
</guide>
