<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/security/shb-firewalls.xml,v 1.3 2006/11/10 22:02:32 chiguire Exp $ -->
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<sections>

<version>1.2</version>
<date>2006-10-31</date>

<section>
<title>Cortafuegos</title>
<body>

<p>
Mucha gente piensa a menudo que un cortafuegos (firewall) es la máxima
expresión de la seguridad, pero están equivocados. En muchos casos un
cortafuegos mal configurado da menos seguridad que no tener uno
instalado. Un cortafuegos también es un componente de software y
debería tratarse de la misma manera que cualquier otro software,
porque puede contener agujeros de seguridad.
</p>

<p>
¡Así que piénselo antes de implementar un cortafuegos! ¿Realmente lo
necesita? Si cree que lo necesita, escriba una política sobre cómo
debería funcionar, qué tipo de cortafuegos, y cómo debería
operar. Pero primero lea esta guía.
</p>

<p>
Los cortafuegos se usan con dos propósitos:
</p>

<ul>
<li>Para mantener a los usuarios (gusanos/atacantes) fuera</li>
<li>Para mantener a los usuarios (empleados/niños) dentro</li>
</ul>

<p>
Básicamente hay tres tipos de cortafuegos:
</p>

<ul>
<li>Filtrado de paquetes</li>
<li>Circuit relay</li>
<li>Aplicación de puerta de enlace</li>
</ul>

<p>
Un cortafuegos debería ser una máquina dedicada que no ejecute otros
servicios (<c>sshd</c> es el único) y asegurada tal como recomienda
esta guía.
</p>
</body>
</section>

<section>
<title>Filtrado de paquetes</title>
<body>

<p>
Todo el tráfico de la red se transmite como paquetes. Grandes
cantidades de tráfico se dividen en paquetes pequeños para un mejor
manejo y se juntan cuando llegan a su destino. La cabecera de cada
paquete contiene la información de cómo y dónde debe ser entregado. Y
estas informaciones son exactamente las que un cortafuegos de filtrado
de paquetes utiliza. El filtrado se basa en:
</p>

<ul>
<li>
  Permitir o denegar los paquetes basados en la dirección IP origen/destino
</li>
<li>
  Permitir o denegar los paquetes basados en un puerto de   origen/destino
</li>
<li>Permitir o denegar los paquetes basados en un protocolo</li>
<li>
  Permitir o denegar los paquetes basados en parámetros específicos
  del protocolo
</li>
</ul>

<p>
En otras palabras, este filtrado se fundamenta en la información de la
cabecera del paquete y no en su contenido.
</p>

<p>
Debilidades:
</p>

<ul>
<li>
  La dirección de un paquete puede ser potencialmente falsa (o como se
  suele decir <e>spoofed</e>) por el remitente
</li>
<li>
  Los datos o peticiones contenidos en un paquete permitido pueden
  contener datos no esperados que el atacante puede usar para explotar
  fallos en servicios en el cortafuegos o a través de él 
</li>
<li>Normalmente es un punto único de fallo</li>
</ul>

<p>
Ventajas:
</p>

<ul>
<li>Simple y fácil de implementar</li>
<li>
  Puede avisar de posibles ataques antes de que ocurran (por ejemplo
  detectando sondeos de puertos)
</li>
<li>Son buenos para parar ataques SYN</li>
</ul>

<p>
Ejemplos de cortafuegos de filtrado de paquetes libres en Linux:
</p>

<ul>
<li><uri link="http://www.iptables.org">Iptables</uri></li>
<li>
  <uri link="http://www.linuxdocs.org/HOWTOs/IPCHAINS-HOWTO.html">Ipchains</uri>
</li>
<li><uri link="http://www.smoothwall.org">SmoothWall</uri></li>
</ul>
<!--FIXME: should SmoothWall really be included, since it uses iptables?-->

<note>
Se recomienda utilizar iptables. Ipchains es obsoleto.
</note>
</body>
</section>

<section>
<title>Circuit relay</title>
<body>

<p>
Un circuito de nivel de puerta de enlace es un cortafuegos que valida
las conexiones antes de permitir el intercambio de datos. Esto
significa que simplemente no permite o deniega paquetes basándose en
su cabecera si no que determina si la conexión entre los dos extremos
es válida de acuerdo a las reglas configuradas antes de abrir una
sesión y permitir que los datos sean intercambiados. El filtrado está
basado en:
</p>

<ul>
<li>Dirección IP de origen/destino</li>
<li>Puerto de origen/destino</li>
<li>Periodo de tiempo</li>
<li>Protocolo</li>
<li>Usuario</li>
<li>Contraseña</li>
</ul>

<p>
Todo el tráfico es validado y monitorizado, y el tráfico no deseado se
descarta.
</p>

<p>
Debilidades:
</p>

<ul>
<li>
  Opera en la Capa de Trasporte y puede requerir una modificación
  sustancial en el programa que normalmente provee de las funciones de 
  transporte.
</li>
</ul>
</body>
</section>

<section>
<title>Aplicación de puerta de enlace</title>
<body>

<p>
La pasarela de aplicación de puerta de enlace es un &quot;proxy&quot;
para aplicaciones, que intercambian datos con los sistemas remotos en
nombre de sus clientes. Suele estar a salvo detrás de una DMZ
(&quot;zona desmilitarizada&quot;: la porción de una red privada que
es visible a través del cortafuegos) o de un cortafuegos que no
permite conexiones desde el exterior. El filtrado está basado en:
</p>

<ul>
<li>Permitir o denegar basándose en direcciones IP del origen/destino</li>
<li>Basándose en el contenido del paquete</li>
<li>Limitar el acceso a ficheros basándose en su tipo o su extensión</li>
</ul>

<p>
Ventajas:
</p>

<ul>
<li>
  Puede hacer &quot;cache&quot; de archivos, incrementando el rendimiento de red
</li>
<li>Detallado registro de todas las conexiones</li>
<li>
  Crece bien (algunos proxys de servidores pueden &quot;compartir&quot;
  los datos en cache)
</li>
<li>No hay acceso directo desde el exterior</li>
<li>Pueden alterar el contenido del paquete al vuelo</li>
</ul>

<p>
Debilidades:
</p>

<ul>
<li>La configuración es compleja</li>
</ul>

<p>
Las aplicaciones de pasarela están consideradas la mejor solución
segura puesto que no tienen que ser ejecutadas como root y los hosts
tras ellos no son accesibles desde Internet.
</p>

<p>
Ejemplo de una aplicación de pasarela libre:
</p>

<ul>
<li><uri link="http://www.squid-cache.org/">Squid</uri></li>
</ul>
</body>
</section>

<section>
<title>Iptables</title>
<body>

<p>
Para poner en funcionamiento iptables, tiene que estar habilitado en
el kernel. Yo lo he añadido como módulo (el comando <c>iptables</c> lo
cargará como se necesita) y he recompilado mi núcleo (pero puede
compilarlo embebido, si quiere deshabilitar los Módulos Cargables del
Núcleo como se indicaba anteriormente). Para más información al
respecto de como configurar su kernel para iptables vea a <uri link="http://iptables-tutorial.frozentux.net/iptables-tutorial.html#PREPARATIONS">Iptables
Tutorial Chapter 5: Preparations</uri>. Después de que haya
compilado su nuevo kernel (o mientras lo compila) tiene que añadir el
comando <c>iptables</c> . Simplemente con <c>emerge iptables</c> ya
debería funcionar.
</p>

<p>
Ahora compruebe que funciona ejecutando <c>iptables -L</c>. Si falla,
algo está mal y deberá revisar su configuración una vez más.
</p>

<p>
Iptables es el nuevo y fuertemente mejorado filtro de paquetes en el
kernel de Linux 2.4.x. Es el sucesor del anterior filtro de paquetes
ipchains del kernel de linux 2.2.x. Una de las más grandes mejoras es
que iptables es capaz de realizar filtrado de estado de paquetes. Con
el filtrado de estado es posible mantener el registro de cada conexión
TCP establecida.
</p>

<p>
Una conexión TCP consiste en una serie de paquetes que contienen
información respecto la dirección IP origen, la IP de destino, puerto
de origen, puerto de destino, y un número de secuencia para que los
paquetes puedan juntarse sin perder datos. TCP es un protocolo
orientado a la conexión en contraste a UDP que es &quot;sin
conexión&quot;.
</p>

<p>
Examinando la cabecera del paquete TCP, un filtro de estado de
paquetes puede determinar si un paquete TCP recibido es parte de una
conexión ya establecida o no y decidir si aceptarlo o rechazarlo.
</p>

<p>
Es posible engañar a un filtro de paquetes que no verifique el estado
de los mismos para que acepte paquetes que deberían ser desechados si
se manipula la cabecera del paquete TCP. Esto puede hacerse alterando
el indicador SYN u otros indicadores en la cabecera TCP para fabricar
un paquete malicioso que parezca formar parte de una conexión
establecida (puesto que el filtro de paquetes por si mismo no hace un
seguimiento de la conexión). Con un filtro de estado de paquetes es
posible descartar aquellos paquetes que no formen parte de una
conexión ya establecida. Esto detendrá también la posibilidad de
&quot;escaneos pasivos&quot;, un tipo de exploración de puertos en la
cual quien realiza la exploración envía paquetes con indicadores que
están lejos de ser registrados por un cortafuegos ordinario.
</p>

<p>
Iptables proporciona otras prestaciones como NAT (Network Address
Translation) y limitación de tasas. La limitación de tasas es muy
práctica para prevenir ciertos ataques DoS (&quot;Denial of
Service&quot;, denegación de servicio) como las inundaciones SYN
(&quot;SYN floods&quot;)
</p>

<p>
Una conexión TCP se establece con una &quot;conversación en tres
fases&quot;. Para iniciar la conexión TCP la parte de cliente envía un
paquete al servidor con el flag SYN habilitado. Cuando el servidor
recibe el paquete con el SYN responde enviando un paquete SYN+ACK de
vuelta al cliente. Entonces el SYN+ACK es recibido en el cliente que
responde con un tercer paquete ACK reconociendo la conexión.
</p>

<p>
Un ataque de inundación SYN se realiza enviando paquetes SYN de forma
que no se responda el correspondiente paquete SYN+ACK. El cliente
puede crear un paquete con una dirección IP origen falsa puesto que no
necesita la respuesta. El sistema del servidor añadirá una entrada en
la cola de las conexiones pendientes de establecer cuando se reciba el
paquete SYN y esperará a recibir el paquete final ACK antes de borrar
esta entrada de la cola. La cola tiene un número limitado de
posiciones (slots) y si todas estas posiciones están ocupadas no podrá
abrir nuevas conexiones. Si el paquete ACK no se recibe antes de un
tiempo determinado la entrada se borrará automáticamente de la
cola. Este tiempo de espera es variable, pero normalmente es de 30 a
60 segundos o incluso más.  La parte de cliente inicia el ataque
enviando gran número de paquetes SYN con diferentes IP origen y
enviándolos a la IP objetivo todo lo rápido que pueda y de ese modo
llenará la cola de las conexiones pendientes de establecer y por tanto
impedirá que otros clientes establezcan una conexión legítima con el
servidor.
</p>

<p>
Aquí es donde la limitación de tasas se vuelve útil. Es posible
limitar la tasa de paquetes SYN aceptados usando <c>-m limit --limit
1/s</c>. Esto limitará el número de paquetes SYN aceptados a uno por
segundo y por tanto evitará el riesgo de inundaciones SYN en nuestros
equipos.
</p>

<note>
Otra opción para prevenir inundaciones SYN es <uri link="http://cr.yp.to/syncookies.html">SYN cookies</uri>, que permite a su ordenador responder a paquetes SYN sin llenar el espacio de la cola de conexiones. Las galletas (cookies) SYN pueden ser habilitadas en la configuración del Núcleo de Linux, pero hoy en día todavía están consideradas como experimentales.
</note>

<p>
¡Ahora algunas prácticas!
</p>

<p>
Cuando iptables se activa en el kernel proporciona 5 lugares donde
especificar las reglas. Estos lugares se llaman <c>INPUT</c>,
<c>OUTPUT</c>, <c>FORWARD</c>, <c>PREROUTING</c> y
<c>POSTROUTING</c>. Cada uno de ellos es a su vez una cadena que
consiste en una serie de reglas. Cada regla especifica una cabecera de
paquete con la que compararse, después indica qué hacer con el
paquete. Si la regla no coincide con el paquete se consulta la
siguiente regla en la cadena.
</p>

<p>
Usted puede añadir reglas directamente en estas 5 cadenas principales
o crear nuevas cadenas y añadirlas como si fueran reglas a una cadena
existente. Iptables admite las siguientes opciones.
</p>

<table>
<tr>
  <th>Opción:</th>
  <th>Descripción:</th>
</tr>
<tr>
  <ti>-A</ti>
  <ti>Añadir</ti>
</tr>
<tr>
  <ti>-D</ti>
  <ti>Borrar</ti>
</tr>
<tr>
  <ti>-I</ti>
  <ti>Insertar</ti>
</tr>
<tr>
  <ti>-R</ti>
  <ti>Reemplazar</ti>
</tr>
<tr>
  <ti>-L</ti>
  <ti>Listar</ti>
</tr>
<tr>
  <ti>-F</ti>
  <ti>Borra todas las reglas de una o de todas las cadenas</ti>
</tr>
<tr>
  <ti>-Z</ti>
  <ti>Pone a cero los contadores en una o en todas las cadenas</ti>
</tr>
<tr>
  <ti>-C</ti>
  <ti>Verifica ese paquete en la cadena</ti>
</tr>
<tr>
  <ti>-N</ti>
  <ti>Crea una nueva cadena definida por el usuario</ti>
</tr>
<tr>
  <ti>-X</ti>
  <ti>Borra una cadena definida por el usuario</ti>
</tr>
<tr>
  <ti>-P</ti>
  <ti>Cambia la forma de actuar de una cadena respecto un objetivo</ti>
</tr>
<tr>
  <ti>-E</ti>
  <ti>Cambia el nombre de la cadena</ti>
</tr>
<tr>
  <ti>-p</ti>
  <ti>Protocolo</ti>
</tr>
<tr>
  <ti>-s</ti>
  <ti>Dirección o máscara de origen</ti>
</tr>
<tr>
  <ti>-d</ti>
  <ti>Dirección o máscara de destino</ti>
</tr>
<tr>
  <ti>-i</ti>
  <ti>Nombre de entrada (nombre ethernet)</ti>
</tr>
<tr>
  <ti>-o</ti>
  <ti>Nombre de salida (nombre ethernet)</ti>
</tr>
<tr>
  <ti>-j</ti>
  <ti>Salto (objetivo de la regla)</ti>
</tr>
<tr>
  <ti>-m</ti>
  <ti>Coincidencia extendida (puede usar una extensión)</ti>
</tr>
<tr>
  <ti>-n</ti>
  <ti>Salida numérica para las direcciones y puertos</ti>
</tr>
<tr>
  <ti>-t</ti>
  <ti>Tabla a manipular</ti>
</tr>
<tr>
  <ti>-v</ti>
  <ti>Modo de información detallada</ti>
</tr>
<tr>
  <ti>-x</ti>
  <ti>Expande los números (muestra valores exactos)</ti>
</tr>
<tr>
  <ti>-f</ti>
  <ti>Sólo hacer coincidir el segundo fragmento o posteriores</ti>
</tr>
<tr>
  <ti>-V</ti>
  <ti>Versión de paquete</ti>
</tr>
<tr>
  <ti>--line-numbers</ti>
  <ti>Muestra los números de línea al listar</ti>
</tr>
</table>

<p>
Primero trataremos de bloquear todos los paquetes ICMP en nuestra
máquina, sólo para familiarizarnos con iptables.
</p>

<pre caption="Bloquear todos los paquetes ICMP">
# <i>iptables -A INPUT -p icmp -j DROP</i>
</pre>

<p>
Primero indicamos la cadena o regla donde debe ser añadida, después el
protocolo de los paquetes, y finalmente el destino. El destino puede
ser el nombre de una cadena definida por el usuario o uno de los
siguientes <c>ACCEPT</c>, <c>DROP</c>, <c>REJECT</c>, <c>LOG</c>,
<c>QUEUE</c>, <c>MASQUERADE</c>. En este ejemplo usamos <c>DROP</c>
que desechará el paquete sin responder al cliente.
</p>

<note>
El destino <c>LOG</c> es del tipo conocido como
&quot;non-terminating&quot;. Si un paquete concuerda con una regla con
el destino <c>LOG</c>, en lugar de para la evaluación, el paquete
continua siendo comparado con las otras reglas. Esto le permite
registrar el paquete mientras se se procesa con normalidad.
</note>

<p>
Ahora intente <c>ping localhost</c>. No recibirá ninguna respuesta
puesto que iptables desechará todos los paquetes ICMP entrantes. No
podrá hacer ping a otras máquinas puesto que los paquetes ICMP de
respuesta también son desechados. Ahora elimine la cadena para
permitir el tráfico ICMP de nuevo.
</p>

<pre caption="Elimina todas las reglas">
# <i>iptables -F</i>
</pre>

<p>
Ahora veamos el filtrado de paquetes de estado en iptables. Si
buscamos activar una inspección de estado en los paquetes entrantes en
eth0, podríamos activarlo con el comando:
</p>

<pre caption="Acepta paquetes originados en una conexión entrante o ya establecida">
# <i>iptables -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</i>
</pre>

<p>
Esto aceptará cualquier paquete de una conexión ya establecida o con
relación a la cadena INPUT. Usted también puede desechar cualquier
paquete que no esté en la tabla de estado indicando <c>iptables -A
INPUT -i eth0 -m state --state INVALID -j DROP</c> justo antes del
comando anterior. Esto habilita el filtrado de estado de paquetes en
ipetables cargando la extensión &quot;estate&quot;. Si quiere permitir
a otros conectarse a su máquina puede usar el indicador <c>--state
NEW</c>. Iptables contiene algunos módulos con propósitos
diversos. Algunos de ellos son:
</p>

<table>
<tr>
  <th>Módulo/Concordancia</th>
  <th>Descripción</th>
  <th>Opciones extendidas</th>
</tr>
<tr>
  <ti>mac</ti>
  <ti>
    Comprueba la extensión para los paquetes que provienen de esa
    dirección mac.
  </ti>
  <ti>--mac-source</ti>
</tr>
<tr>
  <ti>state</ti>
  <ti>Activa la inspección de estado</ti>
  <ti>--state (los estados son ESTABLISHED,RELATED, INVALID, NEW)</ti>
</tr>
<tr>
  <ti>limit</ti>
  <ti>Limitación de tasas</ti>
  <ti>--limit, --limit-burst</ti>
</tr>
<tr>
  <ti>owner</ti>
  <ti>Intenta comparar varias características del creador de los paquetes</ti>
  <ti>
    --uid-owner userid --gid-owner groupid --pid-owner processid --sid-owner sessionid
  </ti>
</tr>
<tr>
  <ti>unclean</ti>
  <ti>Varios chequeos aleatorios en los paquetes</ti>
  <ti/>
</tr>
</table>

<p>
Intentemos crear una cadena definida por el usuario y añadirla a una
de las ya existentes:
</p>

<pre caption="Creación de una cadena definida por el usuario">
  <comment>(Creamos una nueva cadena con una regla)</comment>
# <i>iptables -X micadena</i>
# <i>iptables -N micadena</i>
# <i>iptables -A micadena -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</i>
<comment>(El comportamiento por defecto es permitir todo el tráfico saliente. El entrante es desechado.)</comment>
# <i>iptables -P OUTPUT ACCEPT</i>
# <i>iptables -P INPUT DROP</i>
<comment>(Y la añadimos a la cadena INPUT)</comment>
# <i>iptables -A INPUT -j micadena</i>
</pre>

<p>
Aplicando la regla a la cadena input obtenemos la política: Se permite
todos los paquetes salientes y se desechan todos los entrantes.
</p>

<p>
Puede encontrar más documentación en <uri link="http://www.iptables.org/documentation/index.html#HOWTO">Documentación sobre netfilter/iptables</uri>.
</p>

<p>
Veamos ahora un ejemplo completo. En este caso el comportamiento de mi
cortafuegos/puerta de enlace indica:
</p>

<ul>
<li>
  Sólo se permiten las conexiones hacia el cortafuegos a través de SSH
  (puerto 22)
</li>
<li>
  La red local debe tener acceso a HTTP, HTTPS y SSH (DNS puede también
  permitirse)
</li>
<li>
  El tráfico ICMP puede contener carga no deseada y no debe ser permitido.
  Por supuesto deberemos permitir cierto tráfico ICMP
</li>
<li>Los sondeos de puertos deben ser detectados y registrados</li>
<li>Los ataques SYN deben ser prevenidos</li>
<li>El tráfico restante debe ser desechado y registrado</li>
</ul>

<pre caption="/etc/init.d/firewall">
#!/sbin/runscript
IPTABLES=/sbin/iptables
IPTABLESSAVE=/sbin/iptables-save
IPTABLESRESTORE=/sbin/iptables-restore
FIREWALL=/etc/firewall.rules
DNS1=212.242.40.3
DNS2=212.242.40.51
#interior
IIP=10.0.0.2
IINTERFACE=eth0
LOCAL_NETWORK=10.0.0.0/24
#exterior
OIP=217.157.156.144
OINTERFACE=eth1

opts=&quot;${opts} showstatus panic save restore showoptions rules&quot;

depend() {
  need net
}

rules() {
  stop
  ebegin &quot;Estableciendo las reglas internas&quot;

  einfo &quot;Estableciendo la regla por defecto para drop&quot;
  $IPTABLES -P FORWARD DROP
  $IPTABLES -P INPUT   DROP
  $IPTABLES -P OUTPUT  DROP

  # Regla por defecto
  einfo &quot;Creando las cadenas de estado&quot;
  $IPTABLES -N allowed-connection
  $IPTABLES -F allowed-connection
  $IPTABLES -A allowed-connection -m state --state ESTABLISHED,RELATED -j ACCEPT
  $IPTABLES -A allowed-connection -i $IINTERFACE -m limit -j LOG --log-prefix \ 
      &quot;Bad packet from ${IINTERFACE}:&quot;
  $IPTABLES -A allowed-connection -j DROP

  # Tráfico ICMP
  einfo &quot;Creando la cadena icmp&quot;
  $IPTABLES -N icmp_allowed
  $IPTABLES -F icmp_allowed
  $IPTABLES -A icmp_allowed -m state --state NEW -p icmp --icmp-type \ 
      time-exceeded -j ACCEPT
  $IPTABLES -A icmp_allowed -m state --state NEW -p icmp --icmp-type \ 
      destination-unreachable -j ACCEPT
  $IPTABLES -A icmp_allowed -p icmp -j LOG --log-prefix &quot;Bad ICMP traffic:&quot;
  $IPTABLES -A icmp_allowed -p icmp -j DROP

  # Tráfico entrante
  einfo &quot;Creando la cadena para el tráfico ssh entrante&quot;
  $IPTABLES -N allow-ssh-traffic-in
  $IPTABLES -F allow-ssh-traffic-in
  #Protección &quot;Flood&quot;
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \ 
      ALL RST --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \ 
      ALL FIN --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \ 
      ALL SYN --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m state --state RELATED,ESTABLISHED -p tcp --dport ssh -j ACCEPT

  # Tráfico saliente
  einfo &quot;Creando la cadena para el tráfico ssh saliente&quot;
  $IPTABLES -N allow-ssh-traffic-out
  $IPTABLES -F allow-ssh-traffic-out
  $IPTABLES -A allow-ssh-traffic-out -p tcp --dport ssh -j ACCEPT

  einfo &quot;Creando la cadena para el tráfico DNS saliente&quot;
  $IPTABLES -N allow-dns-traffic-out
  $IPTABLES -F allow-dns-traffic-out
  $IPTABLES -A allow-dns-traffic-out -p udp -d $DNS1 --dport domain \ 
      -j ACCEPT
  $IPTABLES -A allow-dns-traffic-out -p udp -d $DNS2 --dport domain \ 
     -j ACCEPT

  einfo &quot;Creando la regla para el tráfico http/https saliente&quot;
  $IPTABLES -N allow-www-traffic-out
  $IPTABLES -F allow-www-traffic-out
  $IPTABLES -A allow-www-traffic-out -p tcp --dport www -j ACCEPT
  $IPTABLES -A allow-www-traffic-out -p tcp --dport https -j ACCEPT

  # Detección de scanners de puertos
  einfo &quot;Creando la cadena de detección de scanner de puertos&quot;
  $IPTABLES -N check-flags
  $IPTABLES -F check-flags
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL FIN,URG,PSH -m limit \ 
      --limit 5/minute -j LOG --log-level alert --log-prefix &quot;NMAP-XMAS:&quot; 
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL ALL -m limit --limit \ 
      5/minute -j LOG --log-level 1 --log-prefix &quot;XMAS:&quot;
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL ALL -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG \ 
      -m limit --limit 5/minute -j LOG --log-level 1 --log-prefix &quot;XMAS-PSH:&quot;
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL NONE -m limit \ 
      --limit 5/minute -j LOG --log-level 1 --log-prefix &quot;NULL_SCAN:&quot;
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL NONE -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,RST SYN,RST -m limit \ 
      --limit 5/minute -j LOG --log-level 5 --log-prefix &quot;SYN/RST:&quot;
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit \ 
      --limit 5/minute -j LOG --log-level 5 --log-prefix &quot;SYN/FIN:&quot;
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

  # Aplicando y añadiendo estados no válidos a las cadenas
  einfo &quot;Aplicando cadenas en INPUT&quot;
  $IPTABLES -A INPUT -m state --state INVALID -j DROP
  $IPTABLES -A INPUT -p icmp -j icmp_allowed
  $IPTABLES -A INPUT -j check-flags
  $IPTABLES -A INPUT -i lo -j ACCEPT
  $IPTABLES -A INPUT -j allow-ssh-traffic-in
  $IPTABLES -A INPUT -j allowed-connection

  einfo &quot;Aplicando cadenas en FORWARD&quot;
  $IPTABLES -A FORWARD -m state --state INVALID -j DROP
  $IPTABLES -A FORWARD -p icmp -j icmp_allowed
  $IPTABLES -A FORWARD -j check-flags
  $IPTABLES -A FORWARD -o lo -j ACCEPT
  $IPTABLES -A FORWARD -j allow-ssh-traffic-in
  $IPTABLES -A FORWARD -j allow-www-traffic-out
  $IPTABLES -A FORWARD -j allowed-connection

  einfo &quot;Aplicando cadenas en OUTPUT&quot;
  $IPTABLES -A OUTPUT -m state --state INVALID -j DROP
  $IPTABLES -A OUTPUT -p icmp -j icmp_allowed
  $IPTABLES -A OUTPUT -j check-flags
  $IPTABLES -A OUTPUT -o lo -j ACCEPT
  $IPTABLES -A OUTPUT -j allow-ssh-traffic-out
  $IPTABLES -A OUTPUT -j allow-dns-traffic-out
  $IPTABLES -A OUTPUT -j allow-www-traffic-out
  $IPTABLES -A OUTPUT -j allowed-connection

  # Permite a los clientes enrutar a través de NAT (Network Address
  # Translation)
  $IPTABLES -t nat -A POSTROUTING -o $IINTERFACE -j MASQUERADE 
  eend $?
}

start() {
  ebegin &quot;Iniciando el cortafuegos&quot;
  if [ -e &quot;${FIREWALL}&quot; ]; then
    restore
  else
    einfo &quot;${FIREWALL} no existe. Usando las reglas por defecto.&quot;
    rules
  fi
  eend $?
}

stop() {
  ebegin &quot;Parando el cortafuegos&quot;
  $IPTABLES -F
  $IPTABLES -t nat -F
  $IPTABLES -X
  $IPTABLES -P FORWARD ACCEPT
  $IPTABLES -P INPUT   ACCEPT
  $IPTABLES -P OUTPUT  ACCEPT
  eend $?
}

showstatus() {
  ebegin &quot;Estatus&quot;
  $IPTABLES -L -n -v --line-numbers
  einfo &quot;Estatus NAT&quot;
  $IPTABLES -L -n -v --line-numbers -t nat
  eend $?
}

panic() {
  ebegin &quot;Estableciendo reglas 'panic'&quot;
  $IPTABLES -F
  $IPTABLES -X
  $IPTABLES -t nat -F
  $IPTABLES -P FORWARD DROP
  $IPTABLES -P INPUT   DROP
  $IPTABLES -P OUTPUT  DROP
  $IPTABLES -A INPUT -i lo -j ACCEPT
  $IPTABLES -A OUTPUT -o lo -j ACCEPT
  eend $?
}

save() {
  ebegin &quot;Guardando las reglas del cortafuegos&quot;
  $IPTABLESSAVE > $FIREWALL
  eend $?
}

restore() {
  ebegin &quot;Restaurando las reglas del cortafuegos&quot;
  $IPTABLESRESTORE &lt; $FIREWALL
  eend $?
}

restart() {
  svc_stop; svc_start
}

showoptions() {
  echo &quot;Usage: $0 {start|save|restore|panic|stop|restart|showstatus}&quot;
  echo &quot;start)      restaura si existe y si no fuerza las reglas&quot;
  echo &quot;stop)       elimina todas las reglas y lo permite todo&quot;
  echo &quot;rules)      fuerza el establecimiento de nuevas reglas&quot;
  echo &quot;save)       gruada la configuración en ${FIREWALL}&quot;
  echo &quot;restore)    restaura la configuración desde ${FIREWALL}&quot;
  echo &quot;showstatus) muestra el estatus&quot; 
}
</pre>

<p>
Algunos consejos para cuando cree un cortafuegos:
</p>

<ol>
<li>Cree su política de cortafuegos antes de implementarlo</li>
<li>Hágalo simple</li>
<li>
Conozca cómo trabajan los protocolos (lea lo más relevante de <uri link="http://www.ietf.org/">RFC</uri> (Request For Comments))
</li>
<li>
Tenga bien presente que un cortafuegos sólo es otro software
ejecutándose como root
</li>
<li>Compruebe su cortafuegos</li>
</ol>

<p>
Si piensa que iptables es difícil de comprender o le lleva mucho
tiempo configurar un cortafuegos decente, puede usar <uri link="http://www.shorewall.net">Shorewall</uri>. Básicamente utiliza
iptables para generar las reglas del cortafuegos, pero se concentra en
reglas y no en protocolos específicos.
</p>
</body>
</section>

<section>
<title>Squid</title>
<body>

<p>
Squid es un servidor proxy muy potente. Puede filtrar el tráfico
atendiendo a: tiempo, expresiones regulares en la ruta/URI, dirección
IP de origen y destino, dominio, navegador, nombre de usuario
autentificado, mime-type y número de puerto (protocolo). Probablemente
olvido algunas características, pero puede ser pesado cubrir aquí la
lista entera de características.
</p>

<p>
En el ejemplo siguiente he añadido un filtrado de pancartas
(&quot;banners&quot;) en lugar de un filtro basado en sitios porno. La
razón de esto es que Gentoo.org <e>no</e> debe ser catalogado como un
sitio pornográfico. Y yo no quiero malgastar mi tiempo intentando
buscar algunos buenos sitios para usted.
</p>

<p>
En este caso, mi política de acceso es:
</p>

<ul>
<li>
La navegación (HTTP/HTTPS) está permitida durante las horas de trabajo
(lunes a viernes de 8 a 17 y sábado de 8 a 13 horas), si alguien está
más tarde debería trabajar, no navegar.
</li>
<li>
No está permitido descargar ficheros (.exe, .com, .arj, .zip, .asf,
.avi, .mpg, .mpeg, etc.)
</li>
<li>
No nos gustan las pancartas (banners), por lo que son filtradas y
reemplazadas por un gif transparente (¡aquí es donde puede ser
creativo!)
</li>
<li>
Cualquier otra conexión hacia o desde Internet no está permitida
</li>
</ul>

<p>
Esto se implementa en 4 pasos <e>fáciles</e>.
</p>

<pre caption="/etc/squid/squid.conf">
# Enlaza con una IP y un puerto
http_port 10.0.2.1:3128

# Configuración standard 
hierarchy_stoplist cgi-bin ?
acl QUERY urlpath_regex cgi-bin \?
no_cache deny QUERY

# Añade listas de control de acceso básico
acl all src 0.0.0.0/0.0.0.0
acl manager proto cache_object
acl localhost src 127.0.0.1/255.255.255.255

# Añade quien puede acceder a este servidor proxy
acl localnet src 10.0.0.0/255.255.0.0

# Y los puertos
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 443
acl purge method PURGE

# Añade una lista de control de acceso basada en
# expresiones regulares mediante urls
acl archives urlpath_regex &quot;/etc/squid/files.acl&quot;
acl url_ads url_regex &quot;/etc/squid/banner-ads.acl&quot;

# Añade una lista de control de acceso basada en día y hora
acl restricted_weekdays time MTWHF 8:00-17:00
acl restricted_weekends time A 8:00-13:00

acl CONNECT method CONNECT

# Permite el acceso administrativo desde localhost
http_access allow manager localhost
http_access deny manager

# Solo permite purgar peticiones desde localhost
http_access allow purge localhost
http_access deny purge

# Deniega peticiones hacia puertos desconocidos
http_access deny !Safe_ports

# Deniega CONNECT a otros puertos distintos de SSL
http_access deny CONNECT !SSL_ports

# Mis propias reglas

# Añade una página para ser mostrada cuando
# se elimina una pancarta
deny_info NOTE_ADS_FILTERED url_ads

# Entonces lo rechaza
http_access deny url_ads

# Deniega todos los archivos
http_access deny archives

# Restringe el acceso a las horas de trabajo
http_access allow localnet restricted_weekdays
http_access allow localnet restricted_weekends

# Deniega el resto
http_access deny all
</pre>

<p>
Después complete los ficheros que no quiere que sus usuarios
descarguen. Yo he indicado zip, viv, exe, mp3, rar, ace, avi, mov,
mpg, mpeg, au, ra, arj, tar, gz and z files.
</p>

<pre caption="/etc/squid/files.acl">
\.[Zz][Ii][pP]$
\.[Vv][Ii][Vv].*
\.[Ee][Xx][Ee]$
\.[Mm][Pp]3$
\.[Rr][Aa][Rr]$
\.[Aa][Cc][Ee]$
\.[Aa][Ss][Ff]$
\.[Aa][Vv][Ii]$
\.[Mm][Oo][Vv]$
\.[Mm][Pp][Gg]$
\.[Mm][Pp][Ee][Gg]$
\.[Aa][Uu]$
\.[Rr][Aa]$
\.[Aa][Rr][Jj]$
\.[Tt][Aa][Rr]$
\.[Gg][Zz]$
\.[Zz]$
</pre>

<note>
Por favor, tenga en cuenta los [ ] con mayúsculas y minúsculas en cada
carácter. Esto sirve para que alguien no se salte las reglas
accediendo a un fichero llamado AvI en lugar de avi.
</note>

<p>
Ahora vamos a añadir las expresiones regulares para identificar a las
pancartas. Probablemente usted será más creativo que yo:
</p>

<pre caption="/etc/squid/banner-ads.acl">
/adv/.*\.gif$
/[Aa]ds/.*\.gif$
/[Aa]d[Pp]ix/
/[Aa]d[Ss]erver
/[Aa][Dd]/.*\.[GgJj][IiPp][FfGg]$
/[Bb]annerads/
/adbanner.*\.[GgJj][IiPp][FfGg]$
/images/ad/
/reklame/
/RealMedia/ads/.*
^http://www\.submit-it.*
^http://www\.eads.*
^http://ads\.
^http://ad\.
^http://ads02\.
^http://adaver.*\.
^http://adforce\.
adbot\.com
/ads/.*\.gif.*
_ad\..*cgi
/Banners/
/SmartBanner/
/Ads/Media/Images/
^http://static\.wired\.com/advertising/
^http://*\.dejanews\.com/ads/
^http://adfu\.blockstackers\.com/
^http://ads2\.zdnet\.com/adverts
^http://www2\.burstnet\.com/gifs/
^http://www.\.valueclick\.com/cgi-bin/cycle
^http://www\.altavista\.com/av/gifs/ie_horiz\.gif
</pre>

<p>
Y como último paso, queremos que este fichero sea mostrado cuando una
pancarta sea eliminada. Básicamente es un medio archivo html con una
imagen gif transparente de 4x4 pixels.
</p>

<pre caption="/etc/squid/errors/NOTE_ADS_FILTERED">
&lt;HTML>
&lt;HEAD>
&lt;META HTTP-EQUIV=&quot;REFRESH&quot; CONTENT=&quot;0; URL=http://localhost/images/4x4.gif&quot;>
&lt;TITLE>ERROR: La URL solicitada no puede ser recuperada&lt;/TITLE>
&lt;/HEAD>
&lt;BODY>
&lt;H1>Anuncio filtrado&lt;/H1>
</pre>
<p/>

<note>
No cierre los tags &lt;HTML> &lt;BODY>. Eso lo hará squid.
</note>

<p>
Como puede ver, Squid tiene muchas posibilidades y es muy efectivo
tanto como filtro como proxy. Incluso se pueden usar proxies Squid
encadenados para escalar en redes muy grandes. La configuración que he
indicado aquí es muy conveniente para una pequeña red de 1 a 20
usuarios.
</p>

<p>
Pero combinar el filtrado de paquetes (iptables) y una pasarela de
aplicaciones (Squid) es probablemente la mejor solución, incluso si
Squid está ubicado en un lugar seguro y donde nadie pueda acceder
desde el exterior. Continuamos teniendo que preocuparnos de los
ataques desde dentro.
</p>

<p>
Ahora tiene que configurar los navegadores en los clientes para usar
el servidor proxy. La puerta de enlace evitará que los usuarios tengan
cualquier contacto con el exterior salvo que usen el proxy.
</p>

<note>
En Mozilla se consigue en Edición->Preferencias->Advanzadas->Proxies.
</note>

<p>
También se conseguir un proxy transparente usando iptables dirigiendo
todo el tráfico saliente a un proxy Squid. Esto se hace añadiendo una
regla de forwarding/prerouting en la pasarela:
</p>

<pre caption="Activa el portforwarding hacia nuestro servidor proxy">
# <i>iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to proxyhost:3128</i>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to proxyhost:3128</i>
</pre>

<note>
Si el proxy se está ejecutando en el host que hace el filtrado de
paquetes --y aunque que no se recomienda, puede ser necesario si no
tiene suficientes máquinas disponibles-- use un destino
<c>REDIRECT</c> en lugar de <c>DNAT</c> (<c>REDIRECT</c> dirige los
paquetes al localhost).
</note>
</body>
</section>

<section>
<title>Lecciones aprendidas</title>
<body>

<p>
Hemos aprendido esto:
</p>

<ol>
<li>
Un cortafuegos puede representar un riesgo por si mismo. Un
cortafuegos mal configurado es peor que no tenerlo
</li>
<li>Cómo configurar una pasarela básica y un proxy transparente</li>
<li>
La clave para tener un buen cortafuegos es conocer el protocolo
que queremos permitir
</li>
<li>Que el tráfico IP puede contener datos no legítimos, por ejemplo
los paquetes ICMP pueden llevar una carga oculta
</li>
<li>Cómo prevenir un ataque SYN</li>
<li>
El filtrado de tráfico HTTP quitando imágenes no adecuadas,
descargas de ficheros de virus
</li>
<li>
Combinar filtros de paquetes y pasarelas de aplicaciones
proporcionan mayor control
</li>
</ol>

<p>
Entonces si <e>realmente</e> necesita usted un cortafuegos, cree uno
que satisfaga sus necesidades.
</p>
</body>
</section>
</sections>
