<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/handbook/hb-working-rcscripts.xml,v 1.2 2004/11/19 22:30:57 chiguire Exp $ -->

<sections>
<section>
<title>Niveles de ejecución</title>
<subsection>
<title>Iniciando su sistema</title>
<body>

<p>
Al iniciar, notará que pasará al frente suyo una gran cantidad de
texto. Si pone atención, notará que estos textos son iguales cada vez
que reinicie su sistema. La secuencia de todas estas acciones se llama
la <e>secuencia de inicio</e> y es (más o menos) definido
estáticamente.
</p>

<p>
Primero, su gestor de arranque cargará a la memoria la imagen del
kernel que definido en la configuración del gestor de arranque, después
de lo cual, se indica a la CPU que debe ejecutar el kernel. Al ser
cargado y luego ejecutado inicializa todas las estructuras y tareas
específicas del kernel e inicia el proceso <c>init</c>.
</p>

<p>
Este proceso asegura que todos los sistemas de archivo (definidos en
<path>/etc/fstab</path>) estén montados y listos para usar. Luego
ejecuta varios scripts en <path>/etc/init.d</path>, correspondientes a
los servicios requeridos para tener un sistema correctamente iniciado.
</p>

<p>
Finalmente, al concluir la ejecución de los scripts, <c>init</c>
activa los terminales (generalmente solo las consolas virtuales
accesibles con <c>Alt-F1</c>, <c>Alt-F2</c>, etc.) fijándoles un proceso
especial denominado <c>agetty</c>. Este proceso hará posible que pueda
ingresar al sistema a través de uno de estos terminales ejecutando
<c>login</c>.
</p>

</body>
</subsection>
<subsection>
<title>Scripts de inicio (init scripts)</title>
<body>

<p>
Ahora bien, <c>init</c> no solamente ejecuta los scripts contenidos en
<path>/etc/init.d</path> de manera aleatoria. Aún más, no ejecuta
todos los scripts del <path>/etc/init.d</path>, solamente los que han
sido seleccionados para ejecutar. Los scripts seleccionados para
ejecutar se encuentran dentro del directorio
<path>/etc/runlevels</path>.
</p>

<p>
Primero, <c>init</c> ejecuta todos los scripts de
<path>/etc/init.d</path> cuyos vínculos simbólicos se encuentran
dentro de <path>/etc/runlevels/boot</path>. Usualmente los iniciará en
orden alfabético, pero algunos scripts tienen información relativa a
dependencias, para lo cual otros scripts deben ser iniciados anteriormente.
</p>

<p>
Cuando todos los scripts referenciados en
<path>/etc/runlevels/boot</path> sean ejecutados, <c>init</c> continua
su trabajo con los scripts en <path>/etc/runlevels/default</path>. Una
vez más, usará el orden alfabético, salvo cuando hay dependencias, en
cuyo caso es alterado el orden de inicio para realizar una secuencia
válida de arranque.
</p>

</body>
</subsection>
<subsection>
<title>¿Cómo funciona Init?</title>
<body>

<p>
Por supuesto que <c>init</c> no decide todo eso por su
cuenta. Requiere un archivo de configuración que especifica las
acciones a tomar. Este archivo es <path>/etc/inittab</path>.
</p>

<p>
Si recuerda al secuencia de inicio recién explicada, recordará que la
primera acción de <c>init</c> es montar todos los sistemas de
archivo. Esto está definido en la siguiente línea de <path>/etc/inittab</path>:
</p>

<pre caption="La línea de inicialización del sistema en /etc/inittab">
si::sysinit:/sbin/rc sysinit
</pre>

<p>
Es línea dice a <c>init</c> que debe ejecutar <c>/sbin/rc sysinit</c> al
iniciar el sistema. Los scripts <path>/sbin/rc</path> se encargan de la
inicialización, con lo que podríamos decir que <c>init</c> no hace mucho,
delega la tarea de inicialización del sistema a otro proceso. 
</p>

<p>
En segundo lugar, <c>init</c> ejecutó los scripts con vínculos
simbólicos en <path>/etc/runlevels/boot</path>. Esto se define en la
siguiente línea:
</p>

<pre caption="Inicialización del sistema, continuada">
rc::bootwait:/sbin/rc boot
</pre>

<p>
Una vez más, el script <c>rc</c> lleva a cabo las tareas
necesarias. Note que la opción de <c>rc</c> (<e>boot</e>) corresponde
al subdirectorio usado bajo <path>/etc/runlevels</path>.
</p>

<p>
Ahora <c>init</c> revisa su archivo de configuración para ver que
<e>nivel de ejecución</e> debe ejecutar. Para decidirlo, lee la
siguiente línea de <path>/etc/inittab</path>:
</p>

<pre caption="La línea init por defecto (default)">
id:3:initdefault:
</pre>

<p>
En este caso (para la mayoría de usuarios Gentoo), el identificador
del <e>nivel de ejecución</e> será el 3. Con esta información
<c>init</c> revisa qué debe ejecutar para iniciar el <e>nivel de
ejecución 3</e>:
</p>

<pre caption="Definiciones de niveles de ejecución">
l0:0:wait:/sbin/rc shutdown
l1:S1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
</pre>

<p>
La línea que define el nivel 3, de nuevo usa el script <c>rc</c> para
iniciar los servicios (ahora con el parámetro por defecto
<e>default</e>). Note una vez más que el parámetro pasado al script
<c>rc</c> corresponde al subdirectorio de <path>/etc/runlevels</path>.
</p>

<p>
Al terminar <c>rc</c>, <c>init</c> decide cuáles consolas virtuales
debe activar y qué comandos deben ser ejecutados para cada una:
</p>

<pre caption="Definición de las consolas virtuales">
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
</pre>


</body>
</subsection>
<subsection>
<title>¿Qué es un nivel de ejecución?</title>
<body>

<p>
Ha visto que <c>init</c> utiliza un esquema de numeración para decidir
cual <e>nivel de ejecución</e> debe activar. Un <e>nivel de
ejecución</e> es un estado en el cual su sistema está corriendo y
contiene scripts (del nivel de ejecución o <e>initscripts</e>)
que serán ejecutados al ingresar o salir del nivel de ejecución.
</p>

<p>
En Gentoo, hay siete niveles de ejecución definidos: tres internos y
cuatro definidos por el usuario. Los internos se llaman
<e>sysinit</e>, <e>shutdown</e> y <e>reboot</e> y hacen exactamente lo
que implican sus nombres, inicialización, apagado y reinicio del
sistema.</p>

<p>
Los niveles de ejecución definidos por el usuario están acompañados de
un subdirectorio bajo <path>/etc/runlevels</path>: <path>boot</path>,
<path>default</path>, <path>nonetwork</path> y <path>single</path>. El
nivel de ejecución <path>boot</path> inicia los servicios necesarios
que requieren los demás niveles de ejecución. Los tres niveles de
ejecución restantes difieren respecto a los servicios que inician:
<path>default</path> es para uso diario, <path>nonetwork</path> en
caso de no requerirse la red y <path>single</path> es utilizado en
caso de necesitar arreglar el sistema.
</p>

</body>
</subsection>
<subsection>
<title>Trabajando con los scripts de inicio</title>
<body>

<p>
Los scripts iniciados por el proceso <c>rc</c> son llamados <e>scripts de
inicio</e> o <e>init scripts</e>. Cada script en
<path>/etc/init.d</path> puede ser ejecutado con los parámetros
<e>start</e>, <e>stop</e>, <e>restart</e>, <e>pause</e>, <e>zap</e>,
<e>status</e>, <e>ineed</e>, <e>iuse</e>, <e>needsme</e>,
<e>usesme</e> o <e>broken</e>.
</p>

<p>
Para iniciar, parar o reiniciar un servicio (y sus respectivas
dependencias), deben usarse <c>start</c>, <c>stop</c> y
<c>restart</c>:
</p>

<pre caption="Iniciando postfix">
# <i>/etc/init.d/postfix start</i>
</pre>

<note>
Sólo los servicios que necesiten (<e>need</e>) del servicio nombrado
serán parados o reiniciados. Los demás servicios, aquellos que usen
(<e>use</e>) el servicio nombrado, pero que no lo necesiten
(<e>need</e>) continuarán sin ser tocados.
</note>

<p>
Si desea parar un servicio, pero no los que dependan de el, puede usar
el parámetro para pausarlo <c>pause</c>:
</p>

<pre caption="Parando postfix, manteniendo ejecución de los demás servicios">
# <i>/etc/init.d/postfix pause</i>
</pre>

<p>
Si desea ver el estado de un servicio (iniciado, parado, pausado, ...)
puede usar el parámetro <c>status</c>:
</p>

<pre caption="Estado del servicio postfix">
# <i>/etc/init.d/postfix status</i>
</pre>

<p>
Si la respuesta a status indica que el servicio está corriendo, pero
realmente no es así, puede reajustarlo manualmente con el
parámetro <c>zap</c>:
</p>

<pre caption="Reajustando la información del estado del servicio postfix">
# <i>/etc/init.d/postfix zap</i>
</pre>

<p>
Para preguntar por las dependencias que tiene un servicio, puede usar
<c>iuse</c> o <c>ineed</c>. Con <c>ineed</c> puede ver cuales
servicios son realmente necesarios para el correcto funcionamiento del
servicio nombrado. Por otra parte, el parámetro <c>iuse</c> muestra
los servicios que pueden ser usados por el servicio nombrado, pero que
no son requeridos para su correcto funcionamiento.
</p>

<pre caption="Solicitando una lista de servicios de los cuales
depende postfix">
# <i>/etc/init.d/postfix ineed</i>
</pre>

<p>
De igual manera, puede indagar que servicios requieren el servicio
nombrado (<c>needsme</c>) o cuáles pueden usarlo (<c>usesme</c>):
</p>

<pre caption="Solicitando una lista de todos los servicios que
requieren postfix">
# <i>/etc/init.d/postfix needsme</i>
</pre>

<p>
Finalmente, puede indagar cuales dependencias son requeridas y están faltando:
</p>

<pre caption="Solicitando una lista de dependencias faltantes para postfix">
# <i>/etc/init.d/postfix broken</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Trabajando con rc-update</title>
<subsection>
<title>¿Qué es rc-update?</title>
<body>

<p>
El sistema de inicio (init) de Gentoo usa un árbol de dependencias para
decidir qué servicios deben iniciarse primero. Como ésta es una tarea
tediosa, que no deseamos que nuestros usuarios tengan que hacer
manualmente, hemos creado unas herramientas para facilitar la
administración de los niveles de ejecución y los scripts de inicio.
</p>

<p>
Con <c>rc-update</c> puede añadir o quitar scripts de inicio a un
nivel de ejecución. La herramienta <c>rc-update</c> automáticamente
usará el script <c>depscan.sh</c> para reconstruir el árbol de dependencias.
</p>

</body>
</subsection>
<subsection>
<title>Añadiendo y removiendo servicios</title>
<body>

<p>Ya hemos agregado scripts de inicio al nivel de ejecución por
defecto durante la instalación de Gentoo. En ese instante tal vez no
haya tenido una idea clara acerca del uso de un nivel de ejecución
"por defecto", aunque ahora sí. El script <c>rc-update</c> requiere un
segundo parámetro que define la acción a llevar a cabo: <e>add</e>,
<e>del</e> o <e>show</e> para agregar, borrar o mostrar.
</p>

<p>
Para añadir o quitar un script de inicio, use <c>rc-update</c> con el
parámetro <c>add</c> o <c>del</c>, seguido por el nombre del script de
inicio y el nivel de ejecución, por ejemplo:
</p>

<pre caption="Quitar postfix del nivel de ejecución por defecto">
# <i>rc-update del postfix default</i>
</pre>

<p>
El comando <c>rc-update show</c> mostrará todos los scripts de inicio
con los niveles de ejecución donde ejecutarán:
</p>

<pre caption="Recibiendo información de los scripts de inicio">
# <i>rc-update show</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Configuración de servicios</title>
<subsection>
<title>¿Porqué requerimos configuración adicional?</title>
<body>

<p>Los scripts de inicio pueden ser bastante complejos, por lo cual no
es interesante que los usuarios modifiquen directamente el script de
inicio, ya que esto puede ser propenso a errores. Sin embargo es
importante poder configurar estos servicios, en caso que se
quieren dar más opciones al servicio.
</p>

<p>
Una segunda razón para mantener esta información fuera del script de
inicio es para poder actualizar estos scripts sin que los cambios de
configuración sean perdidos.
</p>

</body>
</subsection>
<subsection>
<title>El directorio /etc/conf.d</title>
<body>

<p>
Gentoo provee una manera fácil de configurar estos servicios: cada
script de inicio configurable tiene un archivo dispuesto en
<path>/etc/conf.d</path>. Por ejemplo, el script de inicio apache2
(llamado <path>/etc/init.d/apache2</path>) tiene un archivo de
configuración de nombre <path>/etc/conf.d/apache2</path>, el cual
contiene las opciones a pasar al servidor web Apache 2 en el momento
de inicio:
</p>

<pre caption="Variables definidas en /etc/conf.d/apache2">
APACHE2_OPTS="-D PHP4"
</pre>

<p>
Este tipo de archivo de configuración contiene solamente variables
(como <path>/etc/make.conf</path>), lo que facilita la configuración
de servicios. También nos permite suministrar información adicional
acerca de las variables (en forma de comentarios).
</p>

</body>
</subsection>
</section>
<section>
<title>Escribiendo scripts de inicio</title>
<subsection>
<title>¿Realmente tengo que hacerlo?</title>
<body>

<p>
Realmente, no. Escribir un script de inicio usualmente no hace falta,
ya que Gentoo provee scripts listos para usar para todos los
servicios suministrados. Sin embargo, puede haber instalado un
servicio sin usar Portage, en cuyo caso probablemente tenga que crear
un script de inicio.
</p>

<p>
No use el script de inicio suministrado por el servicio si no está
explícitamente escrito para Gentoo: los scripts de inicio de Gentoo ¡no
son compatibles con los de las demás distribuciones!
</p>

</body>
</subsection>
<subsection>
<title>Disposición</title>
<body>

<p>
La disposición básica de un script de inicio se muestra a continuación.
</p>

<pre caption="Disposición básica de un script de inicio">
#!/sbin/runscript

depend() {
  <comment>(Información acerca de las dependencias)</comment>
}

start() {
  <comment>(Comandos requeridos para iniciar el servicio)</comment>
}

stop() {
  <comment>(Comandos requeridos para parar el servicio)</comment>
}

restart() {
  <comment>(Comandos requeridos para reiniciar el servicio)</comment>
}
</pre>

<p>
Cualquier script de inicio <e>requiere</e> la definición de la función
<c>start()</c>. Todas las demás son opcionales.
</p>

</body>
</subsection>
<subsection>
<title>Dependencias</title>
<body>

<p>
Hay dos dependencias que puede definir: <c>use</c> y <c>need</c>. Tal
como hemos mencionado anteriormente, la dependencia <c>need</c> es más
estricta que la dependencia <c>use</c>. Siguiendo este esquema, se
declaran los servicios que dependen de éste o la dependencia <e>virtual</e>.
</p>

<p>
Una dependencia <e>virtual</e> es una suministrada por un servicio,
pero no solo por ese servicio. Su script de inicio puede depender de un
gestor de registro de sistema, habiendo disponibilidad de varios (metalogd, syslog-ng,
sysklogd, ...). Como no se <c>necesitan</c> todos (ningún
sistema normal tiene todos estos gestores de registro instalados y
corriendo) nos aseguramos que todos estos servicios <c>provean</c> una
dependencia virtual.
</p>

<p>
Examinemos la información de dependencia del servicio postfix.
</p>

<pre caption="Información de dependencias de postfix">
depend() {
  need net
  use logger dns
  provide mta
}
</pre>

<p>
Como podemos ver, el servicio postfix:
</p>

<ul>
  <li>
    requiere la dependencia (virtual) <c>net</c> (suministrada por, en
    este caso, <path>/etc/init.d/net.eth0</path>)
  </li>
  <li>
    usa la dependencia (virtual) <c>logger</c> (suministrada por, en
    este caso, <path>/etc/init.d/syslog-ng</path>)
  </li>
  <li>
    usa la dependencia virtual (virtual) <c>dns</c> (suministrada por,
    en este caso, <path>/etc/init.d/named</path>)
  </li>
  <li>
    provee la dependencia (virtual) <c>mta</c> (común a todos los
    servidores de correo electrónico)
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>Controlando el orden</title>
<body>

<p>
En algunos casos, tal vez no requiera un servicio determinado, pero
desea que inicie <c>antes</c> (o <c>después</c>) de otro servicio
<e>si</e> está disponible en el sistema (note la condicionalidad,
esto ya no es una dependencia) <e>y</e> en el mismo nivel de ejecución
(note la condicionalidad, solo involucra servicios del mismo nivel de
ejecución). Puede suministrar esta información usando los parámetros
<c>before</c> o <c>after</c>.
</p>

<p>
Como ejemplo, podemos ver la disposición del servicio portmap:
</p>

<pre caption="La función depend() en el servicio portmap">
depend() {
  need net
  before inetd
  before xinetd
}
</pre>

<p>
También puede usar el carácter cque engloba "*" para todos los servicios,
aunque no es aconsejable.
</p>

<pre caption="Ejecutando un script de inicio como el primer script del
nivel de ejecución">
depend() {
  before *
}
</pre>

</body>
</subsection>
<subsection>
<title>Funciones estándar</title>
<body>

<p>
Junto con la función <c>depend()</c>, hará falta definir la función
<c>start()</c>, que contiene los comandos necesarios para inicializar
su servicio. Es aconsejable usar las funciones <c>ebegin</c> y
<c>eend</c> para informarle al usuario acerca de lo que está
ocurriendo:
</p>

<pre caption="Ejemplo de función start()">
start() {
  ebegin "Starting my_service"
  start-stop-daemon --start --quiet --exec /path/to/my_service
  eend $?
}
</pre>

<p>
Si requiere más ejemplos de funciones <c>start()</c>, favor leer
directamente las fuentes de los scripts de inicio en su directorio
<path>/etc/init.d</path>. En lo que respecta el
<c>start-stop-daemon</c>, hay un excelente página man disponible en
caso de requerir mayor información:
</p>

<pre caption="Buscando página man para el start-stop-daemon">
# <i>man start-stop-daemon</i>
</pre>

<p>
Otras funciones que puede definir son: <c>stop()</c> y
<c>restart()</c>. ¡No es obligatorio definirlas! Nuestro sistema de
inicio es suficientemente inteligente para llevar a cabo esta
funciones solo, si usa el <c>start-stop-daemon</c>.
</p>

</body>
</subsection>
<subsection>
<title>Añadiendo opciones personalizadas</title>
<body>

<p>
Si desea que su script de inicio soporte un mayor número de opciones de
las que hemos encontrado hasta ahora, debe agregar la opción a la
variable <c>opts</c> y crear una función con el mismo nombre de la
opción. Por ejemplo, para soportar una opción de nombre <c>restartdelay</c>:
</p>

<pre caption="Soporte para la opción restartdelay">
opts="${opts} restartdelay"

restartdelay() {
  stop()
  sleep 3    <comment># Espere 3 segundo antes de reiniciar</comment>
  start()
}
</pre>

</body>
</subsection>
<subsection>
<title>Variables para la configuración de servicios</title>
<body>

<p>
No hay que hacer nada para soportar un archivo de configuración en
<path>/etc/conf.d</path>: si su script de inicio se ejecuta, los
siguientes archivos serán automáticamente leídos (sourced) y las
variables estarán disponibles para usar.
</p>

<ul>
  <li><path>/etc/conf.d/&lt;your init script&gt;</path></li>
  <li><path>/etc/conf.d/basic</path></li>
  <li><path>/etc/rc.conf</path></li>
</ul>

<p>
También, si su script de inicio provee una dependencia virtual (como
<c>net</c>), el archivo asociado a esa dependencia (el
<path>/etc/conf.d/net</path>) será leído también.
</p>

</body>
</subsection>
</section>
<section>
<title>Cambiando el comportamiento del nivel de ejecución</title>
<subsection>
<title>¿Quién puede beneficiarse de esto?</title>
<body>

<p>
Muchos usuarios de equipos portátiles conocen la situación: en casa necesita
iniciar <c>net.eth0</c> mientras que puede no querer iniciar <c>net.eth0</c>
mientras está de viaja (cuando no hay una red disponible). Con Gentoo puede
modificar el comportamiento del nivel de ejecución para sus propios propósitos.
</p>

<p>
Por ejemplo puede crear un segundo nivel de ejecución "default" con el cual
puede arrancar y que utiliza otros scripts de inicio que le han sido asignados.
Puede seleccionar al arrancar que nivel de ejecución quiere utilizar.
</p>

</body>
</subsection>
<subsection>
<title>Utilizando SOFTLEVEL</title>
<body>

<p>
Antes de nada, cree el directorio para su segundo nivel de ejecución "default".
Como ejemplo vamos a crear el nivel de ejecución <path>offline</path>:
</p>

<pre caption="Creando el directorio para el nivel de ejecución">
# <i>mkdir /etc/runlevels/offline</i>
</pre>

<p>
Añada los scripts de inicio necesarios para el nuevo nivel de ejecución. 
Por ejemplo, si quiere una copia exacta de su actual "default" pero sin
<c>net.eth0</c>:
</p>

<pre caption="Añadiendo los scripts de inicio necesarios">
# <i>ls /etc/runlevels/default</i>
acpid  domainname  local  net.eth0  netmount  postfix  syslog-ng  vixie-cron
# <i>rc-update add acpid offline</i>
# <i>rc-update add domainname offline</i>
# <i>rc-update add local offline</i>
# <i>rc-update add syslog-ng offline</i>
# <i>rc-update add vixie-cron offline</i>
</pre>

<p>
Ahora edite la configuración de su gestor de arranca y añada una nueva
entrada para el nivel de ejecución <c>offline</c>. Por ejemplo, en
<path>/boot/grub/grub.conf</path>:
</p>

<pre caption="Añadiendo una entrada para el nivel de ejecución offline">
title Gentoo Linux Offline Usage
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3 <i>softlevel=offline</i>
</pre>

<p>
Listo, ha terminado de configurarlo. Si arranca su sistema y selecciona la 
nueva entrada al inicio, el nivel de ejecución <c>offline</c> será el utilizado
en lugar del <c>default</c>.
</p>

</body>
</subsection>
<subsection>
<title>Utilizando BOOTLEVEL</title>
<body>

<p>
Utilizar <c>bootlevel</c> es completamente análogo a <c>softlevel</c>. La
única diferencia es que se define un segundo nivel de ejecución "boot" en lugar
de un segundo "default".
</p>

</body>
</subsection>
</section>
</sections>
