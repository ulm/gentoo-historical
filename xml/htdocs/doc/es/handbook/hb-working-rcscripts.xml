<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/handbook/hb-working-rcscripts.xml,v 1.14 2011/08/17 11:53:42 nimiux Exp $ -->

<sections>

<abstract>
Gentoo usa un formato especial de guiones de inicio, que, entre otras
características permite decisiones basadas en dependencias y guiones
virtuales. Este capítulo explica todos estos aspectos y explica cómo
trabajar con estos guiones.
</abstract>

<version>4</version>
<date>2011-08-17</date>

<section>
<title>Niveles de ejecución</title>
<subsection>
<title>Iniciando su sistema</title>
<body>

<p>
Al iniciar, notará que pasará al frente suyo una gran cantidad de
texto. Si pone atención, notará que estos textos son iguales cada vez
que reinicie su sistema. La secuencia de todas estas acciones se llama
la <e>secuencia de inicio</e> y es (más o menos) definido
estáticamente.
</p>

<p>
Primero, su gestor de arranque cargará en memoria la imagen del kernel
que definió en la configuración del gestor de arranque, después de lo
cual, se indica a la CPU que debe ejecutar el kernel. Al ser cargado y
luego ejecutado inicializa todas las estructuras y tareas específicas
del kernel e inicia el proceso <c>init</c>.
</p>

<p>
Este proceso asegura que todos los sistemas de archivo (definidos en
<path>/etc/fstab</path>) estén montados y listos para usar. Luego
ejecuta varios guiones en <path>/etc/init.d</path>, correspondientes a
los servicios requeridos para tener un sistema correctamente iniciado.
</p>

<p>
Finalmente, al concluir la ejecución de los guiones, <c>init</c>
activa los terminales (generalmente solo las consolas virtuales
accesibles con <c>Alt-F1</c>, <c>Alt-F2</c>, etc.) fijándoles un
proceso especial denominado <c>agetty</c>. Este proceso hará posible
que pueda ingresar al sistema a través de uno de estos terminales
ejecutando <c>login</c>.
</p>
</body>
</subsection>

<subsection>
<title>Guiones de inicio (init scripts)</title>
<body>

<p>
Ahora bien, <c>init</c> no solamente ejecuta los guiones contenidos en
<path>/etc/init.d</path> de manera aleatoria. Aún más, no ejecuta
todos los guiones del <path>/etc/init.d</path>, solamente los que han
sido seleccionados para ejecutar. Los guiones seleccionados para
ejecutar se encuentran dentro del directorio
<path>/etc/runlevels</path>.
</p>

<p>
Primero, <c>init</c> ejecuta todos los guiones de
<path>/etc/init.d</path> cuyos vínculos simbólicos se encuentran
dentro de <path>/etc/runlevels/boot</path>. Usualmente los iniciará en
orden alfabético, pero algunos guiones tienen información relativa a
dependencias, para lo cual otros guiones deben ser iniciados
anteriormente.
</p>

<p>
Cuando se ejecuten todos los guiones referenciados en
<path>/etc/runlevels/boot</path>, <c>init</c> continua su trabajo con los
guiones en <path>/etc/runlevels/default</path>. Una vez más, usará el
orden alfabético, salvo cuando hay dependencias, en cuyo caso es alterado
el orden de inicio para realizar una secuencia válida de arranque.
</p>

</body>
</subsection>
<subsection>
<title>¿Cómo funciona Init?</title>
<body>

<p>
Por supuesto que <c>init</c> no decide todo eso por su
cuenta. Requiere un archivo de configuración que especifica las
acciones a tomar. Este archivo es <path>/etc/inittab</path>.
</p>

<p>
Si recuerda al secuencia de inicio recién explicada, recordará que la
primera acción de <c>init</c> es montar todos los sistemas de
archivo. Esto está definido en la siguiente línea de <path>/etc/inittab</path>:
</p>

<pre caption="La línea de inicialización del sistema en /etc/inittab">
si::sysinit:/sbin/rc sysinit
</pre>

<p>
Esa línea dice a <c>init</c> que debe ejecutar <c>/sbin/rc sysinit</c> al
iniciar el sistema. Los guiones <path>/sbin/rc</path> se encargan de la
inicialización, con lo que podríamos decir que <c>init</c> no hace mucho,
delega la tarea de inicialización del sistema a otro proceso.
</p>

<p>
En segundo lugar, <c>init</c> ejecutó los guiones con vínculos
simbólicos en <path>/etc/runlevels/boot</path>. Esto se define en la
siguiente línea:
</p>

<pre caption="Inicialización del sistema, continuada">
rc::bootwait:/sbin/rc boot
</pre>

<p>
Una vez más, el guión <c>rc</c> lleva a cabo las tareas
necesarias. Note que la opción de <c>rc</c> (<e>boot</e>) corresponde
al subdirectorio usado bajo <path>/etc/runlevels</path>.
</p>

<p>
Ahora <c>init</c> revisa su archivo de configuración para ver que
<e>nivel de ejecución</e> debe ejecutar. Para decidirlo, lee la
siguiente línea de <path>/etc/inittab</path>:
</p>

<pre caption="La línea init por defecto (default)">
id:3:initdefault:
</pre>

<p>
En este caso (para la mayoría de usuarios Gentoo), el identificador
del <e>nivel de ejecución</e> será el 3. Con esta información
<c>init</c> revisa qué debe ejecutar para iniciar el <e>nivel de
ejecución 3</e>:
</p>

<pre caption="Definiciones de niveles de ejecución">
l0:0:wait:/sbin/rc shutdown
l1:S1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
</pre>

<p>
La línea que define el nivel 3, de nuevo usa el guión <c>rc</c> para
iniciar los servicios (ahora con el parámetro por defecto
<e>default</e>). Note una vez más que el parámetro pasado al guión
<c>rc</c> corresponde al subdirectorio de <path>/etc/runlevels</path>.
</p>

<p>
Al terminar <c>rc</c>, <c>init</c> decide cuáles consolas virtuales
debe activar y qué comandos deben ser ejecutados para cada una:
</p>

<pre caption="Definición de las consolas virtuales">
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
</pre>


</body>
</subsection>
<subsection>
<title>¿Qué es un nivel de ejecución?</title>
<body>

<p>
Ha visto que <c>init</c> utiliza un esquema de numeración para decidir
cual <e>nivel de ejecución</e> debe activar. Un <e>nivel de
ejecución</e> es un estado en el cual su sistema está corriendo y
contiene guiones (del nivel de ejecución o <e>initscripts</e>)
que serán ejecutados al ingresar o salir del nivel de ejecución.
</p>

<p>
En Gentoo, hay siete niveles de ejecución definidos: tres internos y
cuatro definidos por el usuario. Los internos se llaman
<e>sysinit</e>, <e>shutdown</e> y <e>reboot</e> y hacen exactamente lo
que implican sus nombres, inicialización, apagado y reinicio del
sistema.</p>

<p>
Los niveles de ejecución definidos por el usuario están acompañados de
un subdirectorio bajo <path>/etc/runlevels</path>: <path>boot</path>,
<path>default</path>, <path>nonetwork</path> y <path>single</path>. El
nivel de ejecución <path>boot</path> inicia los servicios necesarios
que requieren los demás niveles de ejecución. Los tres niveles de
ejecución restantes difieren respecto a los servicios que inician:
<path>default</path> es para uso diario, <path>nonetwork</path> en
caso de no requerirse la red y <path>single</path> es utilizado en
caso de necesitar arreglar el sistema.
</p>

</body>
</subsection>
<subsection>
<title>Trabajando con los guiones de inicio</title>
<body>

<p>
Los guiones iniciados por el proceso <c>rc</c> son llamados <e>guiones de
inicio</e> o <e>init scripts</e>. Cada guión en
<path>/etc/init.d</path> puede ser ejecutado con los parámetros
<e>start</e>, <e>stop</e>, <e>restart</e>, <e>pause</e>, <e>zap</e>,
<e>status</e>, <e>ineed</e>, <e>iuse</e>, <e>needsme</e>,
<e>usesme</e> o <e>broken</e>.
</p>

<p>
Para iniciar, parar o reiniciar un servicio (y sus respectivas
dependencias), deben usarse <c>start</c>, <c>stop</c> y
<c>restart</c>:
</p>

<pre caption="Iniciar postfix">
# <i>/etc/init.d/postfix start</i>
</pre>

<note>
Sólo los servicios que necesiten (<e>need</e>) del servicio nombrado
serán parados o reiniciados. Los demás servicios, aquellos que usen
(<e>use</e>) el servicio nombrado, pero que no lo necesiten)
continuarán sin ser tocados.
</note>

<p>
Si desea parar un servicio, pero no los que dependan de el, puede usar
el parámetro <c>pause</c> para pausarlo:
</p>

<pre caption="Detener postfix, manteniendo la ejecución de los demás servicios">
# <i>/etc/init.d/postfix pause</i>
</pre>

<p>
Si desea ver el estado de un servicio (iniciado, parado, pausado, ...)
puede usar el parámetro <c>status</c>:
</p>

<pre caption="Estado del servicio postfix">
# <i>/etc/init.d/postfix status</i>
</pre>

<p>
Si la respuesta a status indica que el servicio está corriendo, pero
realmente no es así, puede reajustarlo manualmente con el
parámetro <c>zap</c>:
</p>

<pre caption="Reajustar la información de estado del servicio postfix">
# <i>/etc/init.d/postfix zap</i>
</pre>

<p>
Para preguntar por las dependencias que tiene un servicio, puede usar
<c>iuse</c> o <c>ineed</c>. Con <c>ineed</c> puede ver cuales
servicios son realmente necesarios para el correcto funcionamiento del
servicio nombrado. Por otra parte, el parámetro <c>iuse</c> muestra
los servicios que pueden ser usados por el servicio nombrado, pero que
no son requeridos para su correcto funcionamiento.
</p>

<pre caption="Solicitar una lista de servicios de los cuales depende postfix">
# <i>/etc/init.d/postfix ineed</i>
</pre>

<p>
De igual manera, puede indagar que servicios requieren el servicio
nombrado (<c>needsme</c>) o cuáles pueden usarlo (<c>usesme</c>):
</p>

<pre caption="Solicitar una lista de todos los servicios que requieren postfix">
# <i>/etc/init.d/postfix needsme</i>
</pre>

<p>
Finalmente, puede indagar cuales dependencias son requeridas y están faltando:
</p>

<pre caption="Solicitar una lista de dependencias faltantes para postfix">
# <i>/etc/init.d/postfix broken</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Trabajando con rc-update</title>
<subsection>
<title>¿Qué es rc-update?</title>
<body>

<p>
El sistema de inicio (init) de Gentoo usa un árbol de dependencias para
decidir qué servicios deben iniciarse primero. Como ésta es una tarea
tediosa, que no deseamos que nuestros usuarios tengan que hacer
manualmente, hemos creado unas herramientas para facilitar la
administración de los niveles de ejecución y los guiones de inicio.
</p>

<p>
Con <c>rc-update</c> puede añadir o quitar guiones de inicio a un
nivel de ejecución. La herramienta <c>rc-update</c> automáticamente
usará el guión <c>depscan.sh</c> para reconstruir el árbol de dependencias.
</p>

</body>
</subsection>
<subsection>
<title>Añadiendo y removiendo servicios</title>
<body>

<p>Ya hemos agregado guiones de inicio al nivel de ejecución por
defecto durante la instalación de Gentoo. En ese instante tal vez no
haya tenido una idea clara acerca del uso de un nivel de ejecución
"por defecto", aunque ahora sí. El guión <c>rc-update</c> requiere un
segundo parámetro que define la acción a llevar a cabo: <e>add</e>,
<e>del</e> o <e>show</e> para agregar, borrar o mostrar.
</p>

<p>
Para añadir o quitar un guión de inicio, use <c>rc-update</c> con el
parámetro <c>add</c> o <c>del</c>, seguido por el nombre del guión de
inicio y el nivel de ejecución, por ejemplo:
</p>

<pre caption="Quitar postfix del nivel de ejecución por defecto">
# <i>rc-update del postfix default</i>
</pre>

<p>
El comando <c>rc-update -v show</c> mostrará todos los guiones de inicio
con los niveles de ejecución donde ejecutarán:
</p>

<pre caption="Recibir información de los guiones de inicio">
# <i>rc-update -v show</i>
</pre>

<p>
Es posible ejecutar también <c>rc-update show</c> (sin <c>-v</c>) simplemente
para ver los guiones de inicio activos y sus respectivos niveles de ejecución.
</p>

</body>
</subsection>
</section>
<section>
<title>Configuración de servicios</title>
<subsection>
<title>¿Porqué requerimos configuración adicional?</title>
<body>

<p>
Los guiones de inicio pueden ser bastante complejos, por lo cual no
es interesante que los usuarios modifiquen directamente el guión de
inicio, ya que esto puede ser propenso a errores. Sin embargo es
importante poder configurar estos servicios, en caso que se
quieren dar más opciones al servicio.
</p>

<p>
Una segunda razón para mantener esta información fuera del guión de
inicio es para poder actualizar estos guiones sin que los cambios de
configuración sean perdidos.
</p>

</body>
</subsection>
<subsection>
<title>El directorio /etc/conf.d</title>
<body>

<p>
Gentoo provee una manera fácil de configurar estos servicios: cada
guión de inicio configurable tiene un archivo dispuesto en
<path>/etc/conf.d</path>. Por ejemplo, el guión de inicio apache2
(llamado <path>/etc/init.d/apache2</path>) tiene un archivo de
configuración de nombre <path>/etc/conf.d/apache2</path>, el cual
contiene las opciones a pasar al servidor web Apache 2 en el momento
de inicio:
</p>

<pre caption="Variables definidas en /etc/conf.d/apache2">
APACHE2_OPTS="-D PHP5"
</pre>

<p>
Este tipo de archivo de configuración contiene solamente variables
(como <path>/etc/make.conf</path>), lo que facilita la configuración
de servicios. También nos permite suministrar información adicional
acerca de las variables (en forma de comentarios).
</p>

</body>
</subsection>
</section>
<section>
<title>Escribiendo guiones de inicio</title>
<subsection>
<title>¿Realmente tengo que hacerlo?</title>
<body>

<p>
Realmente, no. Escribir un guión de inicio usualmente no hace falta,
ya que Gentoo provee guiones listos para usar para todos los
servicios suministrados. Sin embargo, puede haber instalado un
servicio sin usar Portage, en cuyo caso probablemente tenga que crear
un guión de inicio.
</p>

<p>
No use el guión de inicio suministrado por el servicio si no está
explícitamente escrito para Gentoo: los guiones de inicio de Gentoo ¡no
son compatibles con los de las demás distribuciones!
</p>

</body>
</subsection>
<subsection>
<title>Disposición</title>
<body>

<p>
La disposición básica de un guión de inicio se muestra a continuación.
</p>

<pre caption="Disposición básica de un guión de inicio">
#!/sbin/runscript

depend() {
  <comment>(Información acerca de las dependencias)</comment>
}

start() {
  <comment>(Comandos requeridos para iniciar el servicio)</comment>
}

stop() {
  <comment>(Comandos requeridos para parar el servicio)</comment>
}
</pre>

<p>
Cualquier guión de inicio <e>requiere</e> la definición de la función
<c>start()</c>. Todas las demás son opcionales.
</p>

</body>
</subsection>
<subsection>
<title>Dependencias</title>
<body>

<p>
Hay dos dependencias que puede definir: <c>use</c> y <c>need</c>. Tal
como hemos mencionado anteriormente, la dependencia <c>need</c> es más
estricta que la dependencia <c>use</c>. Siguiendo este esquema, se
declaran los servicios que dependen de éste o la dependencia <e>virtual</e>.

Existen dos ajustes relacionados con las dependencias que puede definir
y que influyen en el arranque o secuenciación de los guiones de inicio:
<c>use</c> y <c>need</c>. Aparte de estas dos, existen también dos
métodos que influyen en el orden llamados: <c>before</c> y <c>after</c>.
Estos últimos no son dependencias en sí mismos, no provocan el fallo del
guión de inicio si el guión seleccionado no está programado para ser iniciado
(o falla al iniciar).
</p>

<ul>
  <li>
    Los ajustes <c>use</c> informan al sistema de inicio que este guión
    <e>utiliza</e> funcionalidad ofrecida por el guión seleccionado, sin
    embargo no depende directamente de él. Un buen ejemplo sería
    <c>use logger</c> o <c>use dns</c>. Si estos servicios están disponibles,
    se usarán de forma correcta, pero aunque no tenga instalado un programa
    de registro (logger) o servidor DNS, los servicios funcionarán de todos
    modos. Si estos servicios están presentes en su sistema, entonces se
    arrancarán antes del guión que los <c>utiliza</c>.
  </li>
  <li>
    El ajuste <c>need</c> es una dependencia inevitable. Esto significa
    que el guión que <c>necesita</c> otro guión, no podrá arrancar antes
    de que el otro guión se arranque de forma correcta. Si el otro guión
    es reiniciado, entonces el guión que depende de él será reiniciado
    igualmente.
  </li>
  <li>
    Cuando se utiliza <c>before</c>, el guión dado es arrancado antes del
    guión seleccionado <e>si</e> el seleccionado forma parte del nivel
    de inicio. Por lo tanto, si el guión de inicio <path>xdm</path> define
    <c>before alsasound</c>, será arrancado antes que el guión
    <path>alsasound</path>, pero solo si <path>alsasound</path> está
    también programado para ser arrancado en el mismo nivel de inicio.
    Si <path>alsasound</path> no está programado para arrancar, entonces
    este ajuste en particular no tiene efecto y el guión <path>xdm</path>
    será arrancado cuando el sistema de inicio lo juzgue apropiado.
  </li>
  <li>
    De modo similar, <c>after</c> informa al sistema de inicio que el
    guión dado debería ser arrancado antes que el seleccionado <e>si</e> el
    guión seleccionado forma parte de nivel de inicio. En caso contrario,
    el ajuste no tiene efecto y el guión será arrancado por el sistema
    de inicio cuando éste lo juzgue apropiado.
  </li>
</ul>

<p>
Debería quedar claro una vez leida la parte de arriba, que <c>need</c> es
el único ajuste que define un "auténtica" dependencia ya que afecta al hecho
de que el guión sea arrancado o no. Las demás son simplemente apuntes al
sistema de inicio para clarificar el orden en el que los guiones deben
(o deberían ser arrancados).
</p>

<p>
Si echa un vistazo al muchos de los guiones de inicio disponibles en Gentoo,
observará que algunos tienen dependencias de objetos que no son guiones de
inicio. Estos "objetos" son los llamados <e>virtuals</e> (virtuales).
</p>

<p>
Una dependencia <e>virtual</e> es una suministrada por un servicio,
pero no solo por ese servicio. Su guión de inicio puede depender de un
gestor de registro de sistema, habiendo disponibilidad de varios
(metalogd, syslog-ng, sysklogd, ...). Como no se <c>necesitan</c> todos
(ningún sistema normal tiene todos estos gestores de registro instalados y
corriendo) nos aseguramos que todos estos servicios <c>provean</c> una
dependencia virtual.
</p>

<p>
Examinemos la información de dependencia del servicio postfix.
</p>

<pre caption="Información de dependencias de postfix">
depend() {
  need net
  use logger dns
  provide mta
}
</pre>

<p>
Como podemos ver, el servicio postfix:
</p>

<ul>
  <li>
    requiere la dependencia (virtual) <c>net</c> (suministrada por, en
    este caso, <path>/etc/init.d/net.eth0</path>)
  </li>
  <li>
    usa la dependencia (virtual) <c>logger</c> (suministrada por, en
    este caso, <path>/etc/init.d/syslog-ng</path>)
  </li>
  <li>
    usa la dependencia virtual (virtual) <c>dns</c> (suministrada por,
    en este caso, <path>/etc/init.d/named</path>)
  </li>
  <li>
    provee la dependencia (virtual) <c>mta</c> (común a todos los
    servidores de correo electrónico)
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>Controlando el orden</title>
<body>

<p>
Tal y como se ha descrito en la sección anterior, puede indicarle al sistema
de inicio qué orden debe seguir para arrancar (o parar) los guiones. Este
orden es manejado tanto por los ajustes de dependencia <c>use</c> y
<c>need</c>, como por los ajustes de orden <c>before</c> y <c>after</c>. Como
ya hemos descrito estos ajustes, echemos un vistazo al servicio Portmap como
ejemplo de guión de inicio.
</p>

<pre caption="La función depend() en el servicio portmap">
depend() {
  need net
  before inetd
  before xinetd
}
</pre>

<p>
También puede usar el carácter que engloba "*" para todos los servicios,
aunque no es aconsejable.
</p>

<pre caption="Ejecutando un guión de inicio como el primer guión del
nivel de ejecución">
depend() {
  before *
}
</pre>

<p>
Si su servicio debe escribir a discos locales, debe necesitar
<c>localmount</c>. Si escribe algo en <path>/var/run</path> como un
archivo pid, entonces debería comenzar después de <c>bootmisc</c>:
</p>

<pre caption="Función ejemplo de depend()">
depend() {
  need localmount
  after bootmisc
}
</pre>
</body>
</subsection>

<subsection>
<title>Funciones estándar</title>
<body>

<p>
Junto con la función <c>depend()</c>, hará falta definir la función
<c>start()</c>, que contiene los comandos necesarios para inicializar
su servicio. Es aconsejable usar las funciones <c>ebegin</c> y
<c>eend</c> para informarle al usuario acerca de lo que está
ocurriendo:
</p>

<pre caption="Ejemplo de función start()">
start() {
  if [ "${RC_CMD}" = "restart" ];
  then
    <comment># Hacer algo en caso de que restart requiera algo más que para y arrancar</comment>
  fi

  ebegin "Starting my_service"
start-stop-daemon --start --exec /path/to/my_service \
                  --pidfile /path/to/my_pidfile
  eend $?
}
</pre>

<p>
Ambos <c>--exec</c> y <c>--pidfile</c> deben usarse en las funciones
start y stop. Si el servicio no crea un archivo pid, entonces use
<c>--make-pidfile</c> si es posible, aunque debe probar esto para
estar seguro. De otra manera, no use archivos pid. Puede también
agregar <c>--quiet</c> a las opciones al <c>start-stop-daemon</c>,
pero esto no es recomendado a no ser que el el servicio sea
extremadamente verboso. Usando <c>--quiet</c> puede interferir con la
depuración si el servicio no logra arrancar.
</p>

<p>
Otro ajuste notable usado en el ejemplo de arriba es la comprobación de
los contenidos de la variable <c>RC_CMD</c>. Al contrario que el sistema
de guiones de inicio anterior, el nuevo sistema <c>openrc</c> no soporta
funcionalidad de reinicio específica de los guiones. En lugar de esto,
el guión necesita comprobar el contenido de la variable <c>RC_CMD</c>
para var si una función (sea <c>start()</c> o <c>stop()</c>) se llama
como parte del reinicio o no.
</p>

<note>
Asegúrese que <c>--exec</c> de hecho llame un servicio y no solamente
un guión que lanza un servicio y termina -- después de todo, eso es lo
que el guión de inicio está supuesto de hacer.
</note>

<p>
Si requiere más ejemplos de funciones <c>start()</c>, favor leer
directamente las fuentes de los guiones de inicio en su directorio
<path>/etc/init.d</path>.
</p>

<p>
Otra función que puede definir es <c>stop()</c>. Sin embargo, ¡No está
obligado a definir esta función! Nuestro sistema de inicio es lo
suficientemente inteligente para rellenar esta función por sí mismo si
utiliza <c>start-stop-daemon</c>.
</p>

<p>
A continuación se muestra un ejemplo de la función <c>stop()</c>:
</p>

<pre caption="Función stop() de ejemplo">
stop() {
  ebegin "Stopping my_service"
  start-stop-daemon --stop --exec /path/to/my_service \
    --pidfile /path/to/my_pidfile
  eend $?
}
</pre>

<p>
Si su servicio corre otro guión (por ejemplo, bash, python o perl), y
este guión luego cambia algún nombre (por ejemplo, <c>foo.py</c> a
<c>foo</c>), entonces hará falta agregar <c>--name</c> al
<c>start-stop-daemon</c>. Debe especificar el nombre al cual cambiará
el guión. En este ejemplo, un servicio inicia <c>foo.py</c>, el cual
cambia de nombre a <c>foo</c>:
</p>

<pre caption="Un servicio que inicia el guión foo">
start() {
  ebegin "Starting my_script"
  start-stop-daemon --start --exec /path/to/my_script \
    --pidfile /path/to/my_pidfile --name foo
  eend $?
}
</pre>

<p>
El <c>start-stop-daemon</c> tiene una excelente página man si requiere
más información:
</p>

<pre caption="Obteniendo la página man para el start-stop-daemon">
$ <i>man start-stop-daemon</i>
</pre>

<p>
La sintaxis de los guiones de inicio de Gentoo está basada en el
intérprete de comandos Bourne Again Shell (bash), de manera que es
libre de usar construcciones compatibles con bash dentro del guión de
inicio. Sin embargo, puede que desee escribir sus guiones
de forma que sean compatibles POSIX. Puede que Los sistemas de
inicio futuros permitan enlazar de forma simbólica
<path>/bin/sh</path> a otros intérpretes de comandos aparte de
bash. Los guiones de inicio que dependen de características
propias de bash pueden romper estas configuraciones.
</p>

</body>
</subsection>

<subsection>
<title>Añadiendo opciones personalizadas</title>
<body>

<p>
Si desea que su guión de inicio soporte un mayor número de opciones
de las que hemos encontrado hasta ahora, debe agregar la opción a la
variable <c>opts</c> y crear una función con el mismo nombre de la
opción. Por ejemplo, para soportar una opción de nombre
<c>restartdelay</c>:
</p>

<pre caption="Soporte para la opción restartdelay">
opts="${opts} restartdelay"

restartdelay() {
  stop
  sleep 3    <comment># Espere 3 segundo antes de reiniciar</comment>
  start
}
</pre>

<impo>
¡La función <c>restart()</c> no puede ser sobreescrita en openrc!.
</impo>

</body>
</subsection>
<subsection>
<title>Variables para la configuración de servicios</title>
<body>

<p>
No hay que hacer nada para soportar un archivo de configuración en
<path>/etc/conf.d</path>: si su guión de inicio se ejecuta, los
siguientes archivos serán automáticamente leídos (sourced) y las
variables estarán disponibles para usar.
</p>

<ul>
  <li><path>/etc/conf.d/&lt;su guión de inicio&gt;</path></li>
  <li><path>/etc/conf.d/basic</path></li>
  <li><path>/etc/rc.conf</path></li>
</ul>

<p>
También, si su guión de inicio provee una dependencia virtual (como
<c>net</c>), el archivo asociado a esa dependencia (el
<path>/etc/conf.d/net</path>) será leído también.
</p>

</body>
</subsection>
</section>
<section>
<title>Cambiando el comportamiento del nivel de ejecución</title>
<subsection>
<title>¿Quién puede beneficiarse de esto?</title>
<body>

<p>
Muchos usuarios de equipos portátiles conocen la situación: en casa necesita
iniciar <c>net.eth0</c> mientras que puede no querer iniciar <c>net.eth0</c>
mientras está de viaja (cuando no hay una red disponible). Con Gentoo puede
modificar el comportamiento del nivel de ejecución para sus propios propósitos.
</p>

<p>
Por ejemplo puede crear un segundo nivel de ejecución "default" con el cual
puede arrancar y que utiliza otros guiones de inicio que le han sido asignados.
Puede seleccionar al arrancar que nivel de ejecución quiere utilizar.
</p>

</body>
</subsection>
<subsection>
<title>Utilizando softlevel</title>
<body>

<p>
Antes de nada, cree el directorio para su segundo nivel de ejecución "default".
Como ejemplo vamos a crear el nivel de ejecución <path>offline</path>:
</p>

<pre caption="Creando el directorio para el nivel de ejecución">
# <i>mkdir /etc/runlevels/offline</i>
</pre>

<p>
Añada los guiones de inicio necesarios para el nuevo nivel de ejecución.
Por ejemplo, si quiere una copia exacta de su actual "default" pero sin
<c>net.eth0</c>:
</p>

<pre caption="Añadiendo los guiones de inicio necesarios">
<comment>(Copiar todos los servicios desde el nivel de ejecución default al nivel offline)</comment>
# <i>cd /etc/runlevels/default</i>
# <i>for service in *; do rc-update add $service offline; done</i>
<comment>(Eliminar servicios no deseados en el nivel offline)</comment>
# <i>rc-update del net.eth0 offline</i>
<comment>(Mostrar los servicios activos en el nivel offline)</comment>
# <i>rc-update show offline</i>
<comment>(Salida incompleta de ejemplo)</comment>
               acpid | offline
          domainname | offline
               local | offline
            net.eth0 |
</pre>

<p>
Incluso aunque se haya eliminado <c>net.eth0</c> del nivel de ejecución
offline, puede que <c>udev</c> quiera intentar iniciar cualquier
dispositivo que detecte y lanzar los servicios apropiados, una funcionalidad
llamada <e>hotplugging</e> (enchufado en caliente). Por defecto Gentoo
no habilita esta funcionalidad.
</p>

<p>
Si quiere habilitar el hotplugging pero solo para un conjunto seleccionado
de guiones, utilice la variable <c>rc_hotplug</c> en
<path>/etc/rc.conf</path>:
</p>

<pre caption="Deshabilitando los servicions iniciados por dispositivos en /etc/rc.conf">
<comment># Permite enchufar en caliente net.wlan así como cualquier otro
# servicio excepto los que concuerden con net.*</comment>
rc_hotplug="net.wlan !net.*"
</pre>

<note>
Para más información sobre los servicios iniciados en función de dispositivos,
consulte los comentarios del archivo <path>/etc/rc.conf</path>.
</note>

<p>
Ahora edite la configuración de su gestor de arranca y añada una nueva
entrada para el nivel de ejecución <c>offline</c>. Por ejemplo, en
<path>/boot/grub/grub.conf</path>:
</p>

<pre caption="Añadiendo una entrada para el nivel de ejecución offline">
title Gentoo Linux Offline Usage
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3 <i>softlevel=offline</i>
</pre>

<p>
Listo, ha terminado de configurarlo. Si arranca su sistema y selecciona la
nueva entrada al inicio, el nivel de ejecución <c>offline</c> será el utilizado
en lugar del <c>default</c>.
</p>

</body>
</subsection>
<subsection>
<title>Utilizando bootlevel</title>
<body>

<p>
Utilizar <c>bootlevel</c> es completamente análogo a <c>softlevel</c>. La
única diferencia es que se define un segundo nivel de ejecución "boot" en lugar
de un segundo "default".
</p>

</body>
</subsection>
</section>
</sections>
