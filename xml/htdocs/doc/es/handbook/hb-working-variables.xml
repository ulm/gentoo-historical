<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/handbook/hb-working-variables.xml,v 1.1 2004/02/19 22:40:03 chiguire Exp $ -->

<sections>
<section>
<title>¿Variables de Entorno?</title>
<subsection>
<title>¿Qué son?</title>
<body>

<p>
Una variable de entorno es un objeto designado para contener información usada por una 
o más aplicaciones. Algunos usuarios (especialmente aquellos nuevos en Linux) encuentran esto un 
poco extraño o inmanejable. Sin embargo esto no es cierto: usando variables de entorno
hace que cualquiera pueda cambiar una opción de configuración para una o más aplicaciones fácilmente.
</p>

</body>
</subsection>
<subsection>
<title>Ejemplos Importantes</title>
<body>

<p>
La siguiente tabla muestra un listado de variables de entorno usado por un sistema Linux y
describe su uso. Los valores de ejemplo se encuentran después de la tabla.
</p>

<table>
<tr>
  <th>Variable</th>
  <th>Descripción</th>
</tr>
<tr>
  <ti>PATH</ti>
  <ti>
    Esta variable contiene una lista de directorios separados por ":" en la cual el 
    sistema buscarÃ¡ los archivos ejecutables. Al introducir el nombre de un ejecutable
    (como <c>ls</c>, <c>rc-update</c> o <c>emerge</c>) que no se 
    encuentre en un de los directorios listados, el sistema no lo encontrarÃ¡, (a menos que 
    se introduzca la ruta completa, por ejemplo: <c>/bin/ls</c>).
  </ti>
</tr>
<tr>
  <ti>ROOTPATH</ti>
  <ti>
    Esta variable tiene la misma función que <c>PATH</c>, pero únicamente contiene 
    los directorios que el sistema debe revisar cuando el usuario root introduce un comando.
  </ti>
</tr>
<tr>
  <ti>LDPATH</ti>
  <ti>
    Esta variable contiene una lista de directorios separados por ":" en la cual 
    el enlazador dinámico busca para encontrar una librería.
  </ti>
</tr>
<tr>
  <ti>MANPATH</ti>
  <ti>
    Esta variable contiene una lista de directorios separados por ":" en la cual 
    el comando <c>man</c> busca las páginas de manual.
  </ti>
</tr>
<tr>
  <ti>INFODIR</ti>
  <ti>
    Esta variable contiene una lista de directorios separados por ":" en la cual
    el comando <c>info</c> busca las paginas info.
  </ti>
</tr>
<tr>
  <ti>PAGER</ti>
  <ti>
    Esta variable contiene la ruta hacia el programa utilizado para mostrar el 
    contenido de los ficheros (como <c>less</c> o <c>more</c>).
  </ti>
</tr>
<tr>
  <ti>EDITOR</ti>
  <ti>
    Esta variable contiene la ruta hacia el programa utilizado para modificar el
    contenido de los archivos (como <c>nano</c> o <c>vi</c>).
  </ti>
</tr>
<tr>
  <ti>KDEDIRS</ti>
  <ti>
    Esta variable contiene una lista de directorios separados por ":"
    los cuales contienen material específico de KDE.
  </ti>
</tr>
<tr>
  <ti>CLASSPATH</ti>
  <ti>
    Esta variable contiene una lista de directorios separados por ":" los cuales 
    contienen las clases de Java.
  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT</ti>
  <ti>
    Esta variable una lista de directorios separados por <e>espacio</e> los cuales
    deben ser protegidos por Portage durante las actualizaciones.
  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT_MASK</ti>
  <ti>
    Esta variable una lista de directorios separados por <e>espacio</e> los cuales
    no deben ser protegidos por Portage durante las actualizaciones.
  </ti>
</tr>
</table>

<p>
A continuación puedes encontrar ejemplos de definiciones para todas estas variables:
</p>

<pre caption="Definiciones de ejemplo">
PATH="/bin:/usr/bin:/usr/local/bin:/opt/bin:/usr/games/bin"
ROOTPATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
LDPATH="/lib:/usr/lib:/usr/local/lib:/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
MANPATH="/usr/share/man:/usr/local/share/man"
INFODIR="/usr/share/info:/usr/local/share/info"
PAGER="/usr/bin/less"
EDITOR="/usr/bin/vim"
KDEDIRS="/usr"
CLASSPATH="/opt/blackdown-jre-1.4.1/lib/rt.jar:."
CONFIG_PROTECT="/usr/X11R6/lib/X11/xkb /opt/tomcat/conf \
                /usr/kde/3.1/share/config /usr/share/texmf/tex/generic/config/ \
                /usr/share/texmf/tex/platex/config/ /usr/share/config"
CONFIG_PROTECT_MASK="/etc/gconf
</pre>

</body>
</subsection>
</section>
<section>
<title>Definiendo variables globalmente</title>
<subsection>
<title>El directorio /etc/env.d</title>
<body>

<p>
Para centralizar la definición de estas variables, Gentoo introduce el directorio
<path>/etc/env.d</path>. Dentro de este directorio se encuentran varios
ficheros como por ejemplo <path>00basic</path>, <path>05gcc</path>, etc. los cuales contienen
las variables necesarias para la aplicación de la cual llevan el nombre.
</p>

<p>
Por ejemplo, al instalar <c>gcc</c>, un fichero llamado <path>05gcc</path>
que contiene la definición de las siguientes variables, fue creado por 
el ebuild:

</p>

<pre caption="/etc/conf.d/05gcc">
PATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/info"
CC="gcc"
CXX="g++"
LDPATH="/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
</pre>

<p>
Otras distribuciones le piden modificar o añadir definiciones de variables de 
entorno semejantes en <path>/etc/profile</path> o en otros sitios. Por otro lado, 
Gentoo nos hace (y a Portage) más fácil mantener y manejar las variables de entorno
sin tener que prestar atención a los numerosos ficheros que pueden contenerlas. 
</p>

<p>
Por ejemplo, cuando <c>gcc</c> es actualizado, también es actualizado 
el fichero <path>/etc/env.d/05gcc</path> sin ser necesaria ninguna interacción 
por parte del usuario.
</p>

<p>
Esto no solo beneficia a Portage, sino también al usuario. En ocasiones se podrá 
pedir establecer cierta variable de entorno para todo el sistema. Como ejemplo,
tomamos la variable <c>http_proxy</c>. En lugar de perder el tiempo con
<path>/etc/profile</path>, puedes crear el fichero (<path>/etc/env.d/99local</path>) 
y introducir la(s) definición(es) en él:
</p>

<pre caption="/etc/env.d/99local">
http_proxy="proxy.server.com:8080"
</pre>

<p>
Usando el mismo fichero para todas las variables, se obtiene una visión rápida de las
variables que definidas por uno mismo.
</p>

</body>
</subsection>
<subsection>
<title>El guión env-update</title>
<body>

<p>
Varios archivos de <path>/etc/env.d</path> definen la variable <c>PATH</c>. esto
no es un error: cuando ejecute <c>env-update</c>, este concatenarÃ¡ las múltiples 
definiciones antes de actualizar las variables de entorno, haciendo más fácil a 
los paquetes (o usuarios) añadir sus propias opciones en las variables de entorno
sin interferir con los valores ya existentes.
</p>

<p>
El guión <c>env-update</c> concatenarÃ¡ los valores alfabéticamente ordenados por 
el nombre de los ficheros de <path>/etc/env.d</path>. Esto es así porque muchos de 
los ficheros de <path>/etc/env.d</path> empiezan por un número.
</p>

<pre caption="Orden de actualización usado por env-update">
         00basic        99kde-env       99local
     +-------------+----------------+-------------+
PATH="/bin:/usr/bin:/usr/kde/3.2/bin:/usr/local/bin"
</pre>

<p>
Cuando ejecute <c>env-update</c>, el guión crearÃ¡ todas las variables de entorno
y las colocarÃ¡ en <path>/etc/profile.env</path> (el cual es usado por 
<path>/etc/profile</path>). Además, también extraerá la información de la 
variable <c>LDPATH</c> y la usarÃ¡ para crear <path>/etc/ld.so.conf</path>.
Después de esto, ejecutarÃ¡ <c>ldconfig</c> para recrear el archivo usado por el 
enlazador dinamico: <path>/etc/ld.so.cache</path>.
</p>

<p>
Si quiere observar el efecto de <c>env-update</c> inmediatamente después de ejecutarlo, 
ejecute el siguiente comando para actualizar su entorno. Posiblemente, los usuarios que 
instalaron Gentoo ellos mismos, recordarÃ¡n estas instrucciones de la instalación:
</p>

<pre caption="Actualizando el entorno">
# <i>env-update &amp;&amp; source /etc/profile</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Definiendo variables locales</title>
<subsection>
<title>EspecÃ­ficas de usuario</title>
<body>

<p>
No siempre queremos definir variables de entorno globales. Por ejemplo,
podríamos querer añadir <path>/home/my_user/bin</path> a la variable <c>PATH</c>,
pero no queremos que todos los usuarios de nuestro sistema lo tengan en su <c>PATH</c>.
Si queremos definir una variable localmente, debemos usar <path>~/.bashrc</path> o 
<path>~/.bash_profile</path>:
</p>

<pre caption="Extendiendo el PATH para uso local en: ~/.bashrc">
PATH="${PATH}:/home/my_user/bin"
</pre>

<p>
Cuando vuelva a iniciar la sesión, su variable <c>PATH</c> serÃ¡ actualizada.
</p>

</body>
</subsection>
<subsection>
<title>EspecÃ­ficas de sesión</title>
<body>

<p>
En ocasiones, se requieren definiciones aÃºn mÃ¡s estrictas. Puede querer usar binarios 
de un directorio temporal que ha creado sin tener que usar la trayectoria completa 
a los binarios o sin editar <path>~/.bashrc</path>. Para estos
momentos necesitarÃ¡ esto.
</p>

<p>
En este caso, puede definir la variable <c>PATH</c> en su sesión activa
usando el comando <c>export</c>. Mientra no cierre la sesión, la variable 
<c>PATH</c> usarÃ¡ los valores temporales.
</p>

<pre caption="Definiendo una variable especÃ­fica a la sesión">
# <i>export PATH="${PATH}:/home/my_user/tmp/usr/bin"</i>
</pre>

</body>
</subsection>
</section>
</sections>
