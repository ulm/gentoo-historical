<?xml version = '1.0' encoding = 'UTF-8' ?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/handbook/hb-install-ppc-disk.xml,v 1.9 2006/11/10 21:39:28 chiguire Exp $ -->

<sections>

<version>7.1</version>
<date>2006-11-02</date>

<section>
<title>Introducción a los dispositivos de bloque</title>
<subsection>
<title>Dispositivos de bloque</title>
<body>

<p>
Examinaremos de forma detallada los aspectos de Gentoo Linux así como
Linux en general que tengan que ver con discos, sistemas de ficheros
de Linux, particiones y dispositivos de bloque. Una vez estemos
familiarizados con las entrañas de los discos y sistemas de ficheros,
veremos el proceso de creación de particiones y sistemas de ficheros
en una instalación Gentoo Linux.
</p>

<p>
Para empezar, explicaremos el término <e>dispositivos de bloque</e>. El
dispositivo de bloque más común es el que representa la primera unidad
IDE llamada <path>/dev/hda</path> en un sistema Linux. Si está instalando
en un dispositivo SCSI, FireWire, USB o SATA, entonces el primer disco
duro debería ser <path>/dev/sda</path>.
</p>

<p>
Los dispositivos de bloque mencionados anteriormente representan una
interfaz abstracta del disco. Las aplicaciones pueden hacer uso de
estas interfaces para interactuar con el disco sin importar el tipo de
unidad que se trate: IDE, SCSI, o cualquier otra. La aplicación puede
simplemente dirigirse al almacenamiento en el disco como a una serie
de bloques de acceso aleatorio de 512-bytes situados de forma
contigua.
</p>

</body>
</subsection>
<subsection>
<title>Particiones</title>
<body>

<p>
Aunque teóricamente es posible utilizar el disco duro completo para
albergar la instalación Linux, esto casi nunca se hace. En su lugar,
los discos se dividen en dispositivos de bloque más pequeños y
manejables. En muchos sistemas se llaman <e>particiones</e>.
</p>

</body>
</subsection>
</section>
<section>
<title>Diseño de un esquema de particionamiento</title>
<subsection>
<title>Esquema de particionamiento por defecto</title>
<body>

<p>
Si no queremos diseñar un esquema de particionamiento específico para
el sistema, podemos hacer uso del esquema utilizado en este manual:
</p>

<note>
Si está utilizando una máquina OldWorld, necesitará conservar MacOS
disponible. Este esquema de aquí asume que MacOS está instalado en un
disco separado.
</note>

<table>
<tr>
  <th>Partición NewWorld</th>
  <th>Partición OldWorld</th>
  <th>Partición Pegasos</th>
  <th>Partición RS/6000</th>
  <th>Sistema de ficheros</th>
  <th>Tamaño</th>
  <th>Descripción</th>
</tr>
<tr>
  <ti><path>/dev/hda1</path></ti>
  <ti><path>/dev/hda1</path></ti>
  <ti>(No aplicable)</ti>
  <ti>(No aplicable)</ti>
  <ti>(Mapa de particionamiento)</ti>
  <ti>32k</ti>
  <ti>Apple_partition_map</ti>
</tr>
<tr>
  <ti><path>/dev/hda2</path></ti>
  <ti>(No necesario)</ti>
  <ti>(No aplicable)</ti>
  <ti>(No aplicable)</ti>
  <ti>(bootstrap)</ti>
  <ti>800k</ti>
  <ti>Apple_Bootstrap</ti>
</tr>
<tr>
  <ti>(No aplicable)</ti>
  <ti>(No aplicable)</ti>
  <ti>(No aplicable)</ti>
  <ti><path>/dev/sda1</path></ti>
  <ti>(PReP Boot)</ti>
  <ti>800k</ti>
  <ti>Tipo 0x41</ti>
</tr>
<tr>
  <ti>(No aplicable)</ti>
  <ti><path>/dev/hda2</path> (Si se usa quik)</ti>
  <ti><path>/dev/hda1</path></ti>
  <ti>(No aplicable)</ti>
  <ti>ext2</ti>
  <ti>32MB</ti>
  <ti>Partición de arranque (boot)</ti>
</tr>
<tr>
  <ti><path>/dev/hda3</path></ti>
  <ti><path>/dev/hda2</path> (<path>/dev/hda3</path> usando quik)</ti>
  <ti><path>/dev/hda2</path></ti>
  <ti><path>/dev/sda2</path></ti>
  <ti>(swap)</ti>
  <ti>512M</ti>
  <ti>Partición de intercambio (swap), Tipo 0x82</ti>
</tr>
<tr>
  <ti><path>/dev/hda4</path></ti>
  <ti><path>/dev/hda3</path> (<path>/dev/hda4</path> usando quik)</ti>
  <ti><path>/dev/hda3</path></ti>
  <ti><path>/dev/sda3</path></ti>
  <ti>ext3, xfs</ti>
  <ti>Resto del disco</ti>
  <ti>Partición raíz (root), Tipo 0x83</ti>
</tr>
</table>

<note>
Puede haber algunas particiones llamadas: <path>Apple_Driver63, 
Apple_Driver_ATA, Apple_FWDriver, Apple_Driver_IOKit, Apple_Patches</path>. 
Si no estamos pensando en usar MacOS 9 podemos borrarlas, puesto que MacOS X 
y Linux no las necesitan. Para borrarlas se puede utilizar <c>parted</c> o 
borrar el disco entero inicializando el mapa de particiones.
</note>

<warn>
<c>parted</c> es capaz de redimensionar particiones incluyendo HFS+.
Desafortunadamente no es posible redimensionar sistemas de ficheros HFS+ con
transacciones (journaling), por tanto nos aseguraremos de desactivar la
transaccionalidad en Mac OS X antes de redimensionar. Recuerde que cualquier
operación de redimensionamiento es peligrosa, ¡hágalo bajo su propia
responsabilidad! ¡Hay que asegurarse siempre de tener una copia de seguridad de
los datos antes de redimensionar!
</warn>

<p>
Si queremos conocer el tamaño que debería tener una partición, o
incluso cuantas particiones necesitamos, hay que continuar con la
siguiente sección. En caso contrario, seguiremos con <uri
link="#mac-fdisk" >Por defecto: Uso de mac-fdisk (Apple) para
particionar el disco</uri> o <uri link="#parted" >Alternativa: Uso de
parted (IBM/Pegasos) para particionar el disco</uri>.
</p>

</body>
</subsection>
<subsection>
<title>¿Cuántas y de qué tamaño?</title>
<body>

<p>
El número de particiones que se necesitan depende mucho del entorno
particular. Por ejemplo, si la máquina tiene muchos usuarios, lo más
probable es que se quiera tener <path>/home</path> en una partición
separada para facilitar las tareas de copia de respaldo y aumentar la
seguridad. Si se está instalando Gentoo para funcionar como servidor
de correo, deberemos tener <path>/var</path> sobre una partición
separada ya que es allí dónde se almacena todo el correo. Así mismo,
una buena elección del sistema de ficheros optimizará el rendimiento
del equipo. Los servidores de juegos deben disponer de una
partición<path>/opt</path> ya que la mayoría de juegos se instalan en
ese directorio. Las razones para todas estas recomendaciones son 
similares a aquellas que hemos mencionado para el caso de 
<path>/home</path>: seguridad y salvaguarda de datos. Definitivamente 
querremos tener un gran <path>/usr</path>: no sólo contendrá la mayor 
parte de aplicaciones, también el árbol de Portage que por si mismo 
ocupa alrededor de 500 MByte sin incluir las fuentes que igualmente se 
almacenan en él.
</p>

<p>
Como se puede ver, todo dependerá de lo que queramos conseguir. Tener
particiones o volúmenes separados tiene las siguientes ventajas:
</p>

<ul>
<li>
  Elegimos el mejor sistema de ficheros para cada partición o volumen
</li>
<li>
  El sistema en su totalidad no se quedará sin espacio si una
  herramienta o aplicación está escribiendo datos de forma continua en
  el volumen o partición
 </li>
<li>
  Si es el caso, el tiempo dedicado a las comprobaciones de integridad
  de sistemas de ficheros se reduce, ya que las comprobaciones pueden
  ser llevadas acabo en paralelo (sin embargo esta ventaja es mayor
  con múltiples discos que con múltiples particiones)
</li>
<li>
  La seguridad puede ser mejorada montando algunas de las particiones
  en modo sólo lectura, nosuid (los bits setuid se ignoran), noexec
  (los bits de ejecución se ignoran), etc.
</li>
</ul>

<p>
Sin embargo, tener múltiples particiones tiene una gran desventaja: si la 
configuración no es la adecuada, podemos acabar teniendo mucho espacio
libre en una de las particiones y quedarnos sin espacio en
otras. Además, existe un límite de 15 particiones para SCSI y SATA.
</p>
</body>
</subsection>

</section>
<section id="mac-fdisk" >
<title>Por defecto: Uso de mac-fdisk (Apple/IBM) para particionar el 
disco</title>
<body>

<p>
Ahora es el momento de crear las particiones con <c>mac-fdisk</c>:
</p>

<pre caption="Inicio de mac-fdisk" >
# <i>mac-fdisk /dev/hda</i>
</pre>

<p>
Primero borraremos las particiones que no nos sirven para dejar espacio 
a las particiones Linux. Usamos <c>d</c> en <c>mac-fdisk</c> para 
borrarla(s). Nos preguntará por el número de partición a borrar. 
Normalmente la primera partición en las máquinas NewWorld 
(Apple_partition_map) no debe ser borrada.
</p>

<p>
En segundo lugar, crearemos una partición <e>Apple_Bootstrap</e> usando
<c>b</c>. Nos preguntará cuál es el bloque inicial. Introduciremos el
número de la primera partición libre seguido de una <c>p</c>. Por
ejemplo sería <c>2p</c>.
</p>

<note>
Esta partición <e>no</e> es una partición <path>/boot</path>. Linux no
la utilizará para nada; no deberemos crear ningún sistema de ficheros
en ella y no deberemos montarla nunca. Los usuarios de Apple no
necesitan una partición extra para <path>/boot</path>.
</note>

<p>
Ahora crearemos una partición de intercambio presionando <c>c</c>. De
nuevo, <c>mac-fdisk</c> preguntará cuál es el bloque en el que
queremos que esta partición comience. Como anteriormente hemos usado
<c>2</c> para crear la partición Apple_Bootstrap, ahora tendríamos que
teclear <c>3p</c>. Cuando nos pregunte por el tamaño, indicaremos
<c>512M</c> (o el tamaño que queramos, aunque se sigue recomendando
512MB) Cuando nos pida el nombre, introduciremos <c>swap</c>
(obligatorio).
</p>

<p>
Para crear la partición raíz, teclearemos <c>c</c>, seguido de
<c>4p</c> para indicar el bloque en el que la partición debe
comenzar. Cuando nos pregunte el tamaño volveremos a poner
<c>4p</c>. <c>mac-fdisk</c> interpretará esto como  &quot;usa todo el
espacio disponible&quot;. Y cuando nos pregunte el nombre, indicaremos
<c>root</c> (obligatorio).
</p>

<p>
Para finalizar, escribiremos la estructura de particiones en el disco
tecleando <c>w</c> y saldremos de <c>mac-fdisk</c> con <c>q</c>.
</p>

<note>
Para asegurarnos de que todo está correcto, deberíamos ejecutar
mac-fdisk una vez más y comprobar que se muestran todas las
particiones. Si no aparece ninguna de las particiones creadas o los
cambios realizados, tendríamos que reinicializarlas pulsando
&quot;i&quot; en mac-fdisk. Esto recreará el mapa de particiones
borrándolas todas.
</note>

<p>
Ahora que las particiones ya están creadas continuaremos con <uri
link="#filesystems" >Creación de los sistemas de ficheros</uri>.
</p>

</body>
</section>
<section id="parted" >
<title>
Uso de parted (especialmente Pegasos) para particionar el disco
</title>

<body>

<p>
<c>parted</c>, por &quot;Partition Editor&quot;, puede actualmente
manejar las particiones HFS+ empleadas por MacOS y MacOS X. Con esta
herramienta se pueden redimensionar éstas y así hacer espacio para las
particiones Linux. Sin embargo, el ejemplo siguiente sólo describe el
particionamiento para sistemas Pegasos.
</p>

<p>
Empecemos iniciando <c>parted</c>:
</p>

<pre caption="Iniciando parted" >
# <i>parted /dev/hda</i>
</pre>

<p>
Si el disco está sin particionar, ejecutaremos <c>mklabel amiga</c>
para crear una nueva etiqueta para el disco.
</p>

<p>
En parted, podemos escribir <c>print</c> en cualquier momento para
mostrar la tabla de particiones en memoria. Si por cualquier razón
cambiamos de criterio o cometemos un error podemos pulsar
<c>Ctrl-c</c> para salir de parted sin guardar ningún cambio.
</p>

<p>
Si en el Pegasos también queremos instalar MorphOS deberemos crear un
sistema de ficheros affs1 llamado &quot;BI0&quot; (BI cero) al
comienzo del disco. 32MB serán más que suficientes para almacenar el
núcleo de MorphOS. Si disponemos de un Pegasos I o pretendemos usar
reiserfs o xfs, también tendremos que almacenar el núcleo de Linux en
dicha partición (Pegasos II sólo puede arrancar de una partición
ext2/ext3 o affs1). Para crear la partición ejecutaremos <c>mkpart
primary affs1 START END</c> donde <c>START</c> y <c>END</c> deben
reemplazarse por un rango en megabytes (por ejemplo, <c>0 32</c> crea
una partición de 32MB empezando en 0MB y acabando en 32MB).
</p>

<p>
Además necesitamos crear dos particiones para Linux, una como sistema
de ficheros raíz para todos los programas, etc., y otra como partición
de intercambio. Para crear el sistema de ficheros raíz debemos decidir
primero que tipo vamos a utilizar. Las opciones disponibles son ext2,
ext3, reiserfs y xfs. Si no sabemos qué elegir usaremos
ext3. Ejecutando <c>mkpart primary ext3 START END</c> se crea una
partición ext3. Nuevamente, hay que reemplazar <c>START</c> y
<c>END</c> con las marcas de inicio y fin (en megabytes) de la
partición.
</p>

<p>
Generalmente se recomienda crear una partición de intercambio con el
doble de la RAM instalada en el ordenador. Probablemente será
suficiente con una partición de intercambio más pequeña a no ser que
queramos ejecutar bastantes aplicaciones al mismo tiempo (en cualquier
caso, se recomienda un mínimo de 512MB). Para crear la partición de
intercambio ejecutaremos <c>mkpart primary linux-swap START END</c>.
</p>

<p>
Anotaremos los números (minor numbers) de las particiones puesto que
los necesitaremos durante el proceso de instalación. <c>print</c>
permite mostrarlos. Accederemos a los discos mediante
<path>/dev/hdaX</path> donde X se reemplaza con el número de la
partición.
</p>

<p>
Cuando esté todo listo en parted saldremos simplemente con
<c>quit</c>.
</p>

</body>
</section>
<section id="filesystems" >
<title>Creación de los sistemas de ficheros</title>
<subsection>
<title>Introducción</title>
<body>

<p>
Ahora que las particiones ya están creadas, es el momento de crear un
sistema de ficheros en ellas. Si no nos importa el tipo de sistema de
ficheros a utilizar podemos utilizar la elección por defecto propuesta
en <uri link="#filesystems-apply" >Creación de un sistema de ficheros
en una partición</uri>. En caso contrario, a continuación se describen
los sistemas de ficheros que podemos utilizar ...
</p>

</body>
</subsection>
<subsection>
<title>¿Sistemas de ficheros?</title>
<body>

<p>
Disponemos de varios sistemas de ficheros. ext2, ext3, ReiserFS y XFS se
consideran estables en la arquitectura PPC.
</p>

<p>
<b>ext2</b> es un sistema de ficheros Linux probado, pero no dispone
de soporte para transacciones, lo que significa que las comprobaciones
rutinarias al arrancar pueden tardar bastante tiempo. En la
actualidad, hay muchas opciones alternativas, sistemas de ficheros de
nueva generación con soporte para transacciones cuya integridad puede
ser verificada con mayor rapidez, por lo que gozan de mayor
popularidad. Los sistemas de ficheros transaccionales previenen
retrasos durante el inicio del equipo, incluso cuando el sistema de
ficheros está en un estado inconsistente.
</p>

<p>
<b>ext3</b> es la versión transaccional de ext2, proporcionando
soporte para una rápida recuperación además de otros modos mejorados
de funcionamiento como registro completo y ordenado de datos. Usa un
índice B*-tree (basado en árboles balanceados) con funciones de
resumen (hash) que permite unas altas prestaciones en casi todas las
situaciones. En resumen, ext3 es un buen y fiable sistema de ficheros.
</p>

<p>
<b>ReiserFS</b> es un sistema de ficheros B*-tree  que tiene un gran
rendimiento y que sobrepasa con creces a ext2 y ext3 cuando se trata
de trabajar con ficheros pequeños (archivos menores de 4KB), en
ocasiones diez o quince veces mejor. ReiserFS es extremadamente
escalable y soporta transaccionalidad. ReiserFS es sólido y estable
para su uso en escenarios genéricos así como en casos extremos
cuando es necesario trabajar por ejemplo con grandes sistemas de
ficheros, manejar ficheros muy grandes o directorios conteniendo miles
y miles de ficheros.
</p>

<p>
<b>XFS</b> es un sistema de ficheros transaccional que cuenta con un
juego de características robustas y está optimizado para ser
escalable. Sólo recomendamos el uso de este sistema de ficheros para
aquellas plataformas Linux que dispongan de dispositivos de
almacenamiento SCSI de alto rendimiento y/o almacenamientos de canal
de fibra (en inglés, fiber channel) con sistema de alimentación
ininterrumpida. Como XFS realiza un almacenamiento temporal agresivo
de datos en tránsito en RAM, aquellas aplicaciones con defectos de
diseño (aquéllas que no toman las precauciones necesarias durante la
escritura de datos al disco, y hay bastantes) pueden perderlos en caso
de que el sistema se apague de forma inesperada.
</p>

</body>
</subsection>
<subsection id="filesystems-apply" >
<title>Creación del sistema de ficheros en una partición</title>
<body>

<p>
Para crear un sistema de ficheros en una partición o volumen existen
herramientas específicas para cada sistema de ficheros:
</p>

<table>
<tr>
  <th>Sistema de Ficheros</th>
  <th>Comando de Creación</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
</table>

<p>
Por ejemplo, para formatear la partición de arranque
(<path>/dev/hda4</path> según el ejemplo) en formato ext3 (siguiendo
el ejemplo) utilizaríamos:
</p>

<pre caption="Creación de un sistema de ficheros en una partición" >
# <i>mkfs.ext3 /dev/hda4</i>
</pre>

<p>
Ahora podríamos crear todos los sistemas de ficheros en las
particiones o volúmenes lógicos recién creados.
</p>

<note>
En máquinas Pegasos II la partición que contiene el núcleo debe ser 
ext2/ext3 o affs1. Las máquinas NewWorld pueden arrancar desde sistemas de
ficheros ext2, ext3, XFS, ReiserFS e incluso HFS/HFS+. En las máquinas
OldWorld que arranquen mediante BootX, el núcleo debe ser ubicado en una
partición HFS, pero esto se completará al configurar el gestor de arranque.
</note>

</body>
</subsection>
<subsection>
<title>Activando la partición de intercambio</title>
<body>

<p>
  <c>mkswap</c> es el comando usado para inicializar particiones de
  intercambio:
</p>

<pre caption="Inicialización de una partición de intercambio" >
# <i>mkswap /dev/hda3</i>
</pre>

<p>
Para activar la partición, se usa el comando <c>swapon</c>:
</p>

<pre caption="Activación de una partición de intercambio" >
# <i>swapon /dev/hda3</i>
</pre>

<p>
Ahora crearíamos y activaríamos la partición de intercambio.
</p>

</body>
</subsection>
</section>
<section>
<title>Montaje</title>
<body>

<p>
Ahora que las particiones están inicializadas y albergan sistemas de
ficheros, es hora de montarlas. Utilizaremos el comando <c>mount</c>.
Como ejemplo montaremos la partición para root:
</p>

<pre caption="Montaje de particiones" >
# <i>mount /dev/hda4 /mnt/gentoo</i>
</pre>

<note>
Si queremos que <path>/tmp</path> resida en una partición diferente,
hay que asegurarse de cambiar sus permisos después de haberla montado:
<c>chmod 1777 /mnt/gentoo/tmp</c>. Lo mismo se aplicaría a
<path>/var/tmp</path>.
</note>

<p>
También hay que montar el sistema de ficheros proc (la interfaz
virtual del núcleo) en <path>/proc</path>. Pero primero necesitaremos
situar nuestros ficheros en las particiones.
</p>

<p>
Ahora continuaremos con <uri link="?part=1&amp;chap=5" >Instalación de
los ficheros de instalación de Gentoo</uri>. 
</p>

</body>
</section>
</sections>
