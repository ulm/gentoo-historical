<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/handbook/hb-portage-advanced.xml,v 1.5 2012/10/09 15:58:05 nimiux Exp $ -->

<sections>

<abstract>
A medida que transcurre el tiempo, Portage evoluciona y madura cada
vez más. Continuamente se agrega funcionalidad adicional - en gran parte
dirigida hacia usuarios avanzados. Esta sección detallará algunas de
estas características específicas.
</abstract>

<version>4</version>
<date>2012-08-15</date>

<section>
<title>Introducción</title>
<body>

<p>
Para la mayoría de los usuarios, la información recibida hasta ahora
es suficiente para todas sus operaciones en Linux. Sin embargo,
Portage es capaz de mucho más; gran parte de sus características están
dirigidas a usuarios avanzados o aplicable solo en casos muy
particulares. En todo caso, esto es excusa para no documentarlas.
</p>

<p>
Por supuesto que con gran flexibilidad viene una gran lista de casos
potenciales. No será posible documentarlos todos aquí. En cambio,
esperamos poder enfocarnos en algunas situaciones genéricas que
pueden ser modificadas para cumplir las necesidades de cada quien. Si
requiere afinamientos o datos más específicos, intente encontrarlos
más bien en el <uri link="https://wiki.gentoo.org">Wiki Gentoo</uri>.
</p>

<p>
La mayoría, si acaso no todas estas características adicionales puede
encontrarlas fácilmente leyendo las páginas del manual de Portage:
</p>

<pre caption="Leyendo las páginas man de Portage">
$ <i>man portage</i>
$ <i>man make.conf</i>
</pre>

<p>
Finalmente, sabemos que, si estas características avanzadas no son
usadas correctamente, pueden hacer el solucionar fallos pueda hacerse
muy difícil. Asegúrese de mencionarlas en caso crea que ha tropezado
con un fallo y desea abrir un reporte.
</p>

</body>
</section>

<section>
<title>Variables de entorno por paquete</title>
<subsection>
<title>Usando /etc/portage/env</title>
<body>

<p>
De manera predeterminada, se usarán en la construcción de un paquete
las variables de entorno definidas en
<path>/etc/portage/make.conf</path>, tales como <c>CFLAGS</c>,
<c>MAKEOPTS</c> etc. Sin embargo, en algunos casos, tal vez quisiéramos
proporcionar diferentes variables para paquetes específicos. Para esto,
Portage soporta el uso de <path>/etc/portage/env</path> y
<path>/etc/portage/package.env</path>.
</p>

<p>
El archivo <path>/etc/portage/package.env</path> contiene una lista de
paquetes que proporcionan variables con valores distintos y un
identificador específico que indica a Portage los cambios
deseados. Portage buscará este identificador, cuyo nombre puede
escoger uno mismo, en el archivo
<path>/etc/portage/env/&lt;identifier&gt;</path>.
</p>

</body>
</subsection>

<subsection>
<title>Ejemplo: Depurando fallos en paquetes específicos</title>
<body>

<p>
Como ejemplo, activaremos la depuración para el paquete
<path>media-video/mplayer</path>.
</p>

<p>
Primero registramos las variables para depuración en un archivo
llamado <path>/etc/portage/env/debug-cflags</path>. El nombre es
escogido arbitrariamente, pero por supuesto refleja claramente su
razón de ser para que sea obvia en el futuro.
</p>

<pre caption="Contenido de /etc/portage/env/debug-cflags">
CFLAGS="-O2 -ggdb -pipe"
FEATURES="${FEATURES} nostrip"
</pre>

<p>
Luego agregamos el rótulo al paquete <path>media-video/mplayer</path>
para usar su contenido:
</p>

<pre caption="Contenido de /etc/portage/package.env">
media-video/mplayer debug-cflags
</pre>

</body>
</subsection>
</section>

<section>
<title>Enganchándose en el proceso del emerge</title>
<subsection>
<title>Usando /etc/portage/bashrc y archivos afiliados</title>
<body>

<p>
Al trabajar Portage con los ebuilds, usa un entorno bash en el cual
llama las distintas funciones de construcción (como src_prepare,
src_configure, pkg_postinst, etc.). Portage también permite que uno
mismo establezca el entorno bash.
</p>

<p>
La ventaja de usar un entorno bash propio es poder engancharse en el
proceso de emerge en cada paso realizado. Esto puede hacerse para cada
emerge (por medio de <path>/etc/portage/bashrc</path>) o con entornos
individuales por paquete (con <path>/etc/portage/env</path>, como
expusimos anteriormente).
</p>

<p>
Para engancharse al proceso emerge, el entorno bash puede inspeccionar
las variables <c>EBUILD_PHASE</c>, <c>CATEGORY</c> y las variables que
siempre están disponibles durante el desarrollo del ebuild (tales como
<c>P</c>, <c>PF</c>, ...). En base a los valores de estas variables,
podemos ejecutar pasos adicionales.
</p>

</body>
</subsection>

<subsection>
<title>Ejemplo: Actualizando bases de datos de archivos</title>
<body>

<p>
En este ejemplo usaremos <path>/etc/portage/bashrc</path> para llamar
algunas aplicaciones de bases de datos para asegurar que sus bases de
datos estén actualizadas con respecto al sistema. En el ejemplo
usaremos <c>aide</c> (una herramienta para detectar intrusiones) y
<c>updatedb</c> (usado por <c>locate</c>), pero solo como ejemplo. No
considere que esto sea un CÓMO para aide ;-)
</p>

<p>
Para usar <path>/etc/portage/bashrc</path> en este caso, necesitaremos
"enganchar" a las funciones <c>postrm</c> (después de borrar archivos)
y <c>postinst</c> (después de instalar archivos) porque es cuando
los archivos en el sistema de archivos han sido cambiados.
</p>

<pre caption="Ejemplo de /etc/portage/bashrc">
if [ "${EBUILD_PHASE}" == "postinst"] || [ "${EBUILD_PHASE}" == "postrm" ];
then
  echo ":: Calling aide --update to update its database";
  aide --update;
  echo ":: Calling updatedb to update its database";
  updatedb;
fi
</pre>

</body>
</subsection>
</section>

<section>
<title>Ejecutando tareas después de --sync</title>
<subsection>
<title>La ubicación de /etc/portage/postsync.d</title>
<body>

<p>
Hasta ahora hemos conversado acerca de engancharnos a procesos del
ebuild. Sin embargo, Portage también tiene otra función importante:
actualizar el árbol Portage. Para ejecutar tareas después de
actualizar el árbol Portage, coloque el guión dentro de
<path>/etc/portage/postsync.d</path> y asegúrese que esté marcado
ejecutable.
</p>

</body>
</subsection>

<subsection>
<title>Ejemplo: ejecutar eix-update</title>
<body>

<p>
Aunque no haya usado <c>eix-sync</c> para actualizar el árbol, todavía
puede actualizar su base de datos después de ejecutar la orden
<c>emerge --sync</c> (o <c>emerge-webrsync</c>)) colocando un enlace
simbólico a <path>/usr/bin/eix</path> llamado <path>eix-update</path>
en <path>/etc/portage/postsync.d</path>.
</p>

<pre caption="Ejecutando eix-update luego de un sync">
# <i>ln -s /usr/bin/eix /etc/portage/postsync.d/eix-update</i>
</pre>

<note>
Si prefiere usar otro nombre, deberá escribir un guión que llame a
<c>/usr/bin/eix-update</c>. El binario <c>eix</c> puede averigua cómo
ha sido llamado y deduce qué función debe ejecutar. Si crea
un enlace simbólico a <c>eix</c> que no sea <c>eix-update</c>, no
se ejecutará correctamente.
</note>

</body>
</subsection>
</section>

<section>
<title>Haciendo caso omiso a la configuración de perfil</title>
<subsection>
<title>La ubicación de /etc/portage/profile</title>
<body>

<p>
De manera predeterminada, Gentoo usa la configuración del perfil
apuntado por <path>/etc/portage/make.profile</path> (un enlace
simbólico al directorio del perfil correcto). Estos perfiles definen
configuraciones específicas al igual que hereda configuraciones de
otros perfiles (por medio de su archivo <path>parent</path>).
</p>

<p>
Al usar <path>/etc/portage/profile</path>, podemos hacer caso omiso de
las configuraciones de perfil, tales como <path>packages</path> (los
paquetes considerados parte del conjunto system), ajustes use forzados
y demás.
</p>

</body>
</subsection>

<subsection>
<title>Ejemplo: Agregar nfs-utils al conjunto system</title>
<body>

<p>
Si usa sistemas de archivo NFS en sistemas de archivos críticos, tal
vez quiera "proteger" al paquete <path>net-fs/nfs-utils</path> para
que forme parte de system, lo cual ocasionará fuertes advertencias por
parte de Portage en caso que se tratara de borrar.
</p>

<p>
Para hacer esto, agregamos el paquete a
<path>/etc/portage/profile/packages</path>, antecedido por un
<c>*</c>:
</p>

<pre caption="Contenido de /etc/portage/profile/packages">
*net-fs/nfs-utils
</pre>

</body>
</subsection>
</section>

<section>
<title>Aplicando parches no normados</title>
<subsection>
<title>Usando epatch_user</title>
<body>

<p>
Para manejar varios ebuilds similarmente, los desarrolladores de
ebuilds usan <e>eclasses</e> (especie de librerías al nivel del
intérprete de comandos) que definen funciones comunes. Una de estas
eclasses es <path>eutils.eclass</path> que ofrece una interesante
función de nombre <c>epatch_user</c>.
</p>

<p>
La función <c>epatch_user</c> aplica parches encontrados en
<path>/etc/portage/patches/&lt;category&gt;/&lt;package&gt;[-&lt;version&gt;[-&lt;revision&gt;]]</path>
al código fuente, en el directorio que encuentre primero. Lamentablemente
no todos los ebuilds llaman automáticamente a esta función, así que el solo
hecho de colocar el parche en esta ubicación no implica que funcione
siempre.
</p>

<p>
Con suerte, con la información proporcionada arriba, se puede llamar
esta función para enganchar a, por ejemplo, la fase <c>prepare</c>. La
función puede ser llamada cuantas veces lo desee, pero aplicará los
parches una sola vez.
</p>

</body>
</subsection>

<subsection>
<title>Ejemplo: Aplicando parches a Firefox</title>
<body>

<p>
El paquete <path>www-client/firefox</path> es uno de los pocos que
llaman a <c>epatch_user</c> desde el ebuild, de manera que no hace
falta sustituir nada en particular.
</p>

<p>
Si necesita parchear firefox (en caso que un desarrollador requiera
soporte de un fallo que haya reportado), coloque el parche en
<path>/etc/portage/patches/www-client/firefox</path> (probablemente
sea mejor usar el nombre completo, incluyendo la versión para que el
parche no interfiera con versiones) y vuelva a construir firefox.
</p>

</body>
</subsection>
</section>
</sections>
