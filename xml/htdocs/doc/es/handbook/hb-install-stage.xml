<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/handbook/hb-install-stage.xml,v 1.55 2014/03/22 20:17:44 nimiux Exp $ -->

<sections>

<abstract>
Las instalaciones Gentoo funcionan con un archivo stage3. En
este capítulo describimos como descomprimir el archivo stage3 y
configurar Portage.
</abstract>

<version>20</version>
<date>2013-12-17</date>

<section>
<title>Instalar el Stage comprimido (tarball)</title>
<subsection>
<title>Ajustar la Fecha/Hora correcta</title>
<body>

<p>
Antes de continuar debe revisar la fecha y la hora y actualizarlos.
¡Un reloj mal configurado puede traer resultados extraños a futuro!
</p>

<p>
Para comprobar la fecha/hora actual, ejecute la orden <c>date</c>:
</p>

<pre caption="Verificar la fecha/hora">
# <i>date</i>
Fri Mar 29 16:21:18 UTC 2005
</pre>

<p>
Si la fecha/hora está equivocada, actualícela con la orden <c>date
MMDDhhmmAAAA</c>, con la siguiente sintaxis (<b>M</b>es, <b>D</b>ía,
<b>h</b>ora, <b>m</b>inuto y <b>A</b>ño). En este punto, se debería usar
la hora UTC. Podrá utilizar su propia zona horaria más adelante. Por
ejemplo, para ajustar la fecha y hora a las 16:21 horas del 29 de
marzo del 2005:
</p>

<pre caption="Ajustar la fecha/hora UTC">
# <i>date 032916212005</i>
</pre>

</body>
</subsection>

<subsection>
<title>Realizar su propia elección</title>
<body>

<p>
El siguiente paso es instalar el archivo tarball del
<e>stage3</e> en su sistema. La orden <c>uname -m</c> le puede ayudar
a decidir el fichero stage a descargar ya que ofrece información
de la arquitectura de su sistema.
</p>

</body>
</subsection>
</section>

<section>
<title>Utilizar un stage obtenido en Internet</title>
<subsection>
<title>Descargar el stage comprimido (tarball)</title>
<body>

<p>
Vaya al punto de montaje de Gentoo en el que ha montado los sistemas
de archivo (probablemente <path>/mnt/gentoo</path>):
</p>

<pre caption="Ir al punto de montaje de Gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
Dependiendo del medio de instalación, tendremos un par de herramientas
disponibles para descargar el stage. Si disponemos de <c>links</c>,
podremos navegar por <uri link="/main/en/mirrors.xml">la lista de
servidores réplica de Gentoo</uri> y escoger el más cercano a
nosotros: escriba <c>links http://www.gentoo.org/main/en/mirrors.xml</c>
y pulse intro.
</p>

<p>
Si no tiene <c>links</c>, debería disponer de <c>lynx</c>. Si necesita
pasar a través de un proxy, exporte las variables <c>http_proxy</c> y
<c>ftp_proxy</c>:
</p>

<pre caption="Configurar la información del proxy para lynx">
# <i>export http_proxy="http://proxy.server.com:port"</i>
# <i>export ftp_proxy="http://proxy.server.com:port"</i>
</pre>

<p>
A partir de ahora asumiremos que tiene <c>links</c> a su disposición.
</p>

<p>
Seleccione un servidor réplica cercano. Normalmente los servidores
HTTP nos servirán, sin embargo, también están disponibles otros protocolos.
Entre en el directorio <path><keyval id="release-dir"/></path>. En él,
Deberían aparecer todos los archivos de stage disponibles para su arquitectura
(quizá almacenados en subdirectorios con el nombre de cada subarquitectura).
Seleccione uno y pulse <c>D</c> para descargarlo. Cuando haya terminado, pulse
<c>Q</c> para cerrar el navegador.
</p>

<p test="'x86'=func:keyval('arch')">
La mayoría de usuarios de PC deberían emplear el archivo <b><keyval
id="stage3"/></b>. Todos los PCs modernos son considerados i686.  Si
utiliza una máquina antigua, puede revisar <uri
link="http://en.wikipedia.org/wiki/I686">la lista de procesador
compatibles con i686</uri> en la wikipedia. Los procesadores antiguos,
como son los Pentium, K5, K6 o Via C3 y similares necesitan el stage
<b>i586</b>.  Los procesadores más antiguos de <b>i486</b> no están
soportados.
</p>

<pre caption="Navegar por la lista de servidores réplica con links">
# <i>links http://www.gentoo.org/main/en/mirrors.xml</i>

<comment>(Si necesita soporte para proxy con links:)</comment>
# <i>links -http-proxy proxy.server.com:8080 http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

<p>
Conviene asegurarse de que ha descargado un archivo <b>stage3</b>,
las instalaciones que utilizan un stage1 o stage2 ya no reciben soporte
(y en la mayoría de los casos, no podrá encontrar ficheros tarball
de los stage1 o stage2 en nuestros servidores réplica regulares).
</p>

<p>
Si quiere comprobar la integridad del tarball de stage que ha descargado,
<c>openssl</c> y compare la salida con las sumas ofrecidas por el servidor
réplica. Los ficheros digest ofrecen varias sumas de comprobación, cada
una se ha realizado con un algoritmo diferente. La sumas recomendadas
son SHA512 y Whirlpool.
</p>

<pre caption="Calcular la integridad de las sumas de comprobación de un fichero tarball de stage">
<comment>## Calcular la suma SHA512</comment>
# <i>openssl dgst -r -sha512 <keyval id="stage3" /></i>
<comment>o</comment>
# <i>sha512sum <keyval id="stage3" /></i>

<comment>## Calcular la suma Whirlpool</comment>
# <i>openssl dgst -r -whirlpool <keyval id="stage3" /></i>
</pre>

<p>
A continuación compare la salida de estas órdenes con el valor
registrado en los ficheros con extensión
<path>.DIGESTS(.asc)</path> que puede encontrar en los servidores
réplica. Los valores deben coincidir, de lo contrario, los ficheros
descargados podrían estar corruptos (o el fichero de digests).
</p>

<p>
Al igual que con el fichero ISO, puede también verificar la
firma criptográfica del fichero <path>.DIGESTS.asc</path> mediante
<c>gpg</c> para asegurarse de las sumas de comprobación no se
han manipulado, puede hacerlo de la siguiente forma:
</p>

<pre caption="Validar las sumas de comprobación mediante gpg">
# <i>gpg --verify <keyval id="stage3" />.DIGESTS.asc</i>
</pre>

</body>
</subsection>

<subsection>
<title>Extraer el Stage comprimido</title>
<body>

<p>
Ahora desempaquetamos el stage descargado en sistema. Usaremos
<c>tar</c> para dicha labor y este es el método más fácil.
</p>

<pre caption="Descomprimir el Stage">
# <i>tar xvjpf stage3-*.tar.bz2</i>
</pre>

<p>
Asegúrese de usar las mismas opciones <c>xvjpf</c>). La <c>x</c> se usa
para <e>Desempaquetar</e>, la <c>v</c> (<e>Verbose</e>)para ver que
pasa durante el proceso de extracción (opcional), la <c>j</c> para
<e>Descomprimir con bzip2</e>, la <c>p</c> para <e>Preservar los
permisos</e> y la <c>f</c> para decir que extraemos un archivo, no
la entrada estándar.
</p>

<!-- MIPS usa su propio fichero hb-install-stage.xml, ¿Otras arquitecturas?
<note>
Algunos CDs de instalación de algunas arquitecturas (e.j. MIPS) e imágenes
de arranque funcionan sobre <c>tar</c> compilado con BusyBox el cual
actualmente no soporta la opción <c>v</c>. Utilice en su lugar las
opciones <c>xjpf</c>
</note>
-->

<p>
Ahora que el stage está instalado sigamos con <uri
link="#compile_options">Configurar las opciones de compilación</uri>.
</p>

</body>
</subsection>
</section>

<section id="compile_options">
<title>Configurar las opciones de compilación</title>
<subsection>
<title>Introducción</title>
<body>

<p>
Para optimizar Gentoo, tendrá que ajustar un par de variables que
afectarán el comportamiento de Portage. Todas estas variables se
pueden fijar como variables de entorno (usando <c>export</c>) pero eso
no es permanente. Para mantener su configuración, Portage dispone de
<path>/etc/portage/make.conf</path>, un fichero de configuración para
Portage. Este es el fichero que editaremos ahora.
</p>

<note>
Una lista comentada de todas las posibles variables puede encontrarse
en <path>/mnt/gentoo/usr/share/portage/make.conf.example</path>. Para
una instalación de Gentoo correcta lo único que necesita es configurar
las variables que se mencionan en las siguientes líneas.
</note>

<p>
Use su editor favorito (en esta guía nosotros usaremos <c>nano</c>. Así
que empezamos con la modificación de las variables.
</p>

<pre caption="Abrir /etc/portage/make.conf">
# <i>nano -w /mnt/gentoo/etc/portage/make.conf</i>
</pre>

<p>
Como probablemente habrá notado, el fichero
<path>make.conf.example</path> está estructurado de una manera genérica:
Las líneas comentadas empiezan con "#", otras líneas definen variables
usando la sintaxis <c>VARIABLE="contenido"</c>. El fichero
<path>make.conf</path> utiliza la misma sintaxis. Discutiremos muchas
de esas variables más adelante.
</p>

</body>
</subsection>

<subsection>
<title>CFLAGS y CXXFLAGS</title>
<body>

<p>
Las variables <c>CFLAGS</c> y <c>CXXFLAGS</c>, definen los parámetros
de optimización para el compilador de C y C++ de <c>gcc</c>
respectivamente. Aunque generalmente se definen aquí, tendrá el
máximo rendimiento si optimiza estos parámetros para cada programa
por separado. La razón es que cada programa es diferente.
</p>

<p>
En el fichero <path>make.conf</path> deberá definir los parámetros de
optimización que piense que vayan a hacer su sistema el mejor <e>en
todas las situaciones</e>. No coloque parámetros experimentales en
esta variable; un nivel demasiado alto de optimización puede hacer que
los programas se comporten mal (cuelgues, o incluso peor,
funcionamientos erróneos).
</p>

<p>
No explicaremos todas las opciones posibles para la optimización. Pero
si quiere conocerlas todas, léase <uri
link="http://www.gcc.gnu.org/onlinedocs/">El manual en línea
de GNU</uri> o la página información de <c>gcc</c> (<c>info gcc</c> --
Solo en un sistema Linux funcional). El fichero <path>make.conf</path>
también contiene una gran cantidad de ejemplos e información; no
olvide leerlo también.
</p>

<p test="not(contains('AMD64 x86', func:keyval('arch')))">
El primer parámetro es <c>-march=</c> o <c>-mcpu=</c>, el cual especifica
el nombre de la arquitectura destino. Las posibles opciones se
describen en el fichero <path>make.conf.example</path> (como
comentarios). Un valor frecuentemente utilizado es <e>native</e> ya
que indica al compilador que seleccione la arquitectura destino del
sistema actual (en el que se está realizando la instalación).
</p>

<p test="contains('AMD64 x86',func:keyval('arch'))">
El primer parámetro es <c>-march=</c> o <c>-mtune=</c>, el cual especifica
el nombre de la arquitectura destino. Las posibles opciones se
describen en el fichero <path>make.conf.example</path> (como comentarios).
Un valor frecuentemente utilizado es <e>native</e> ya que indica al
compilador que seleccione la arquitectura destino del sistema actual (en
el que se está realizando la instalación).
</p>

<p>
Seguida de esta, está el parámetro <c>-O</c>, que especifica la clase
optimización de <c>gcc</c>. Las clases posibles son <c>s</c> (para
tamaño optimizado), <c>0</c> (para no optimizar), <c>1</c>, <c>2</c>
o incluso <c>3</c> para la optimización de velocidad (cada clase
tiene los mismos parámetros que la primera, más algunos extras).
<c>-O2</c> es la recomendada. Es conocido que <c>-O3</c> provoca
problemas cuando se utiliza globalmente en el sistema, por esto
se recomienda mantener siempre <c>-O2</c>.
</p>

<p>
Otros parámetros de optimización bastante populares son los
<c>-pipe</c> (usando tuberías en lugar de ficheros temporales para la
comunicación entre las diferentes etapas de compilación). No tiene
ningún impacto sobre le código generado, pero usa más memoria. En
sistemas con poca memoria, el proceso del compilador podría ser
terminado. En este caso, no use este parámetro.
</p>

<p>
Cuidado con utilizar <c>-fomit-frame-pointer</c> (el cual no mantiene
el puntero de macro en un registro para las funciones que no lo necesiten)
pues podría tener graves repercusiones en la depuración de errores en
aplicaciones.
</p>

<p>
Cuando defina las variables <c>CFLAGS</c> y <c>CXXFLAGS</c>, debería
combinar algunos parámetros de optimización, Los valores por defecto
que trae el archivo stage3 deberían ser suficientemente buenos.
El siguiente ejemplo es simplemente eso, un ejemplo:
</p>

<pre test="not(contains('AMD64 arm', func:keyval('arch')))" caption="Definir las variables CFLAGS y CXXFLAGS">
CFLAGS="<keyval id="CFLAGS"/>"
<comment># Use la misma configuración para ambas variables.</comment>
CXXFLAGS="${CFLAGS}"
</pre>

<pre test="func:keyval('arch')='AMD64'" caption="Definir las variables CFLAGS y CXXFLAGS">
CFLAGS="<keyval id="CFLAGS"/>"
<comment># Los usuarios de Intel EM64T deberán utilizar -march=core2</comment>
<comment># Use la misma configuración para las dos variables.</comment>
CXXFLAGS="${CFLAGS}"
</pre>

<pre test="func:keyval('arch')='arm'" caption="Definir las variables CFLAGS y CXXFLAGS">
CFLAGS="<keyval id="CFLAGS"/>
<comment># Asegúrese de cambiar -march para corresponder al tipo de CPU</comment>
<comment># Use la misma configuración para ambas variables</comment>
CXXFLAGS="${CFLAGS}"
</pre>

<note>
Quizá quiera echar un vistazo a la <uri
link="https://wiki.gentoo.org/wiki/GCC_optimization/es"> Guía de
Compilación Optimizada</uri> para más información sobre las
distintas opciones de compilación que afectan al sistema.
</note>

</body>
</subsection>

<subsection>
<title>MAKEOPTS</title>
<body>

<p>
Con la variable <c>MAKEOPTS</c> definimos cuantas compilaciones
paralelas pueden hacerse al mismo tiempo cuando instalamos un
paquete. El valor sugerido se obtiene sumando uno a la cantidad
de CPUs (o de cores) de su sistema, aunque este valor no es
siempre el perfecto.
</p>

<pre caption="MAKEOPTS para un sistema normal de 1-CPU">
MAKEOPTS="-j2"
</pre>

</body>
</subsection>

<subsection>
<title>¡Preparados, listos, ya!</title>
<body>

<p>
Actualice su <path>/mnt/gentoo/etc/portage/make.conf</path> con
sus propios parámetros y guarde los cambios (los usuarios de
<c>nano</c> deben usar <c>Ctrl-X</c>). Ahora estamos listos para
continuar con <uri link="?part=1&amp;chap=6">Instalando el sistema
base de Gentoo</uri>.
</p>

</body>
</subsection>
</section>
</sections>
