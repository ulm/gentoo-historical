<?xml version = '1.0' encoding = 'UTF-8' ?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/handbook/hb-install-ppc-kernel.xml,v 1.22 2007/07/13 08:40:58 nightmorph Exp $ -->

<sections>

<version>8.2</version>
<date>2007-05-21</date>

<section>
<title>Zona horaria</title>
<body>

<p>
Primero necesitamos seleccionar la zona horaria para que nuestro
sistema sepa dónde está ubicado. Hay que buscar la zona horaria en
<path>/usr/share/zoneinfo</path>, luego cópiela en
<path>/etc/localtime</path>. Por favor, tenga cuidado con las zonas
horarias de <path>/usr/share/zoneinfo/Etc/GMT*</path> pues sus nombres no
hacen referencia a las zonas esperadas. Por ejemplo, <path>GMT-8</path>
es en realidad GMT+8.
</p>

<pre caption="Configurar la zona horaria" >
# <i>ls /usr/share/zoneinfo</i>
<comment>(Suponiendo que queremos usar GMT)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Instalar las fuentes del núcleo</title>
<subsection>
<title>Elegir un núcleo</title>
<body>

<p>
El corazón alrededor del cual se construyen todas las distribuciones es
el núcleo (kernel) de Linux. Es la capa entre los programas de usuario
y el hardware del sistema. Gentoo proporciona a sus usuarios varios
núcleos para escoger. Una lista completa está disponible en la <uri
link="/doc/es/gentoo-kernel.xml" >Guía Gentoo del Kernel</uri>.
</p>

<p>
Sugerimos utilizar <c>gentoo-sources</c> en PPC, que es un núcleo 2.6
reciente.
</p>

<pre caption="Instalar unas fuentes del kernel" >
# <i>emerge gentoo-sources</i>
</pre>

<p>
En <path>/usr/src</path> se encuentra un enlace simbólico llamado
<path>linux</path> apuntando a las fuentes del núcleo actual. En nuestro
caso, el enlace a las fuentes del núcleo instaladas apunta a
<c>gentoo-sources-<keyval id="kernel-version"/></c>. Tenga en cuenta que
su versión puede ser diferente.
</p>

<pre caption="Ver el enlace a las fuentes del kernel" >
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           22  Mar 18 16:23 /usr/src/linux -&gt; linux-<keyval id="kernel-gentoo"/>
</pre>

<p>
Ahora vamos a configurar y compilar las fuentes del núcleo. Puede usar
para ello <c>genkernel</c>, que construirá un núcleo genérico como el
usado por el CD de instalación. Sin embargo, primero vamos a explicar la
configuración "manual", puesto que es una configuración más eficiente.
</p>

<p>
Para configurar manualmente el núcleo, podemos seguir en <uri link="#manual">
Predeterminado: Configuración manual</uri>. En cambio,para usar
<c>genkernel</c> podemos leer <uri link="#genkernel">Alternativa: Usar
genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual" >
<title>Predeterminado: Configuración manual</title>
<subsection>
<title>Introducción</title>
<body>

<p>
Configurar manualmente un núcleo es visto frecuentemente como el
procedimiento más difícil al que tiene que enfrentarse un usuario de
Linux. Nada mas lejos de la realidad: después de configurar algunos
núcleos no recordaremos si era algo difícil ;)
</p>

<p>
Sin embargo, una cosa <e>es</e> cierta: necesitaremos conocer nuestro sistema
si queremos configurar el núcleo manualmente. Mucha de la información
necesaria se puede recolectar instalando pciutils (<c>emerge pciutils</c>) que
contiene el programa <c>lscpi</c>. Ahora podremos utilizar <c>lscpi</c> en el
entorno del chroot. Se puede ignorar sin riesgo cualquier aviso que muestre
<c>lspci</c> relativo a <e>pcilib</e> (como "pcilib: cannot open 
/sys/bus/pci/devices"). Alternativamente, se puede ejecutar <c>lscpi</c> desde
un entorno <e>no chroot</e>. Los resultados serían los mismos. También se
puede ejecutar <c>lsmod</c> para ver que módulos del núcleo usa el CD de
instalación (puede proporcionar buenos consejos sobre qué habilitar). Otro
lugar para buscar posibles pistas sobre que componentes habilitar es comprobar
los mensajes del kernel que se obtienen durante el proceso de inicio. Ejecute
<c>dmesg</c> para ver los mensajes del kernel.
</p>

<p>
Ahora hay que ir al directorio de las fuentes para configurar el núcleo.
Empiece configurando un núcleo que pueda arranacar en la mayor parte de
máquinas PowerPC de 32 bits ejecutando <c>make pmac32_defconfig</c>. Una
vez que la configuración por defecto haya sido incluida, ejecutaremos
<c>make menuconfig</c> que lanzará un menú de configuración basado en
ncurses.
</p>

<pre caption="Invocar a menuconfig" >
# <i>cd /usr/src/linux</i>
# <i>make pmac32_defconfig</i>
# <i>make menuconfig</i>
</pre>

<p>
Nos darán la bienvenida varias secciones de configuración. Listaremos
primero algunas opciones que se deben activar (de otro modo Gentoo no
funcionará, o no funcionará adecuadamente sin configuración
adicional).
</p>

</body>
</subsection>
<subsection>
<title>Activar opciones necesarias</title>
<body>

<p>
Primero que nada, activaremos el uso de código y dispositivos en
desarrollo y experimentales. Es necesario, porque algunos dispositivos
o código importante no aparecerían:
</p>

<pre caption="Seleccionar código/dispositivos expremientales" >
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Ahora, en <c>File Systems</c> seleccionaremos el soporte para los
sistemas de ficheros empleados. <e>No</e> deben compilarse como
módulos, en cuyo caso el sistema Gentoo no sería capaz de montar las
particiones. También debe seleccionarse el <c>/proc file system</c> y
<c>Virtual memory</c>. Asegúrese de habilitar el soporte para particiones
Amiga si está utilizando un Pegasos, o las particiones Macintosh si está
utilizando un ordenador Apple.
</p>

<pre caption="Selecionar los sistemas de ficheros necesarios" >
File systems ----&gt;
  Pseudo Filesystems ----&gt;
<comment>(/proc puede estar ya forzado por su configuración, si es así,
verá --- en su lugar)</comment> 
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)
  Partition Types ---&gt;
    [*] Advanced partition support
    [*] Amiga partition table support
    [*] Macintosh partition map support    
    
<comment>(Deben seleccionarse una o más de las siguientes opciones según se necesite)</comment>
   &lt;*&gt; Reiserfs support
   &lt;*&gt; Ext3 journalling file system support
   &lt;*&gt; Second extended fs support
   &lt;*&gt; XFS filesystem support
</pre>

<p>
Los usuarios de las máquinas NewWorld y OldWorld querrán igualmente
soporte para HFS. Los usuarios de OldWorld lo necesitan para copiar en la
partición MacOS los núcleos compilados. Los usuarios de NewWorld lo
necesitan para configurar la partición especial Apple_Bootstrap:
</p>

<pre caption="Activar el soporte HFS">
File Systems ---&gt;
  Miscellaneous filesystems ---&gt;
    &lt;M&gt; Apple Macintosh file system support
    &lt;M&gt; Apple Extended HFS file system support
</pre>

<p>
Si usamos PPPoE o un módem para conectar a Internet, necesitaremos las
siguientes opciones del núcleo:
</p>

<pre caption="Seleccionar los controladores necesarios para PPPoE" >
Device Drivers ---&gt;
   Network device support ---&gt;
    &lt;*> PPP (point-to-point protocol) support
    &lt;*>   PPP support for async serial ports
    &lt;*>   PPP support for sync tty ports
</pre>

<p>
Las dos opciones de compresión no molestan pero no son siempre necesarias.
La opción <c>PPP over Ethernet</c> sólo podría ser usada por <c>ppp</c>
cuando se configure para realizar PPPoE en modo núcleo.
</p>

<p>
¡No olvide incluir soporte en el núcleo para su tarjeta ethernet! Muchos de
los nuevos ordenadores Apple usan el controlador ethernet SunGEM. Lo viejos
iMac usan habitualmente el controlador BMAC.
</p>

<pre caption="Selección del controlador de red" >
Device Drivers ---&gt;
   Network device support ---&gt;
    Ethernet (10 or 100Mbit) ---&gt;
      [*] Ethernet (10 or 100Mbit)
      &lt;*&gt;   Generic Media Independent Interface device support
      &lt;*&gt;   MACE (Power Mac ethernet) support
      &lt;*&gt;   BMAC (G3 ethernet) support
      &lt;*&gt; Sun GEM support
</pre>

<p>
En el momento presente, la característica de núcleo preentivo completo
todavía puede ser inestable en PPC y puede causar fallos de compilación y
de segmentación aleatorios. Se sugiere <c>encarecidamente</c> no usar esta
opción. Tanto <e>Voluntary Preemption</e> como <e>No Forced Preemption</e>
pueden ser seguras..
</p>

<pre caption="Comprobar que la opción Preemptible Kernel está desactivada">
Kernel options ---&gt;
<comment>(Elija una)</comment>
  Preemption Model
    (X) No Forced Preemption (Server)
    (X) Voluntary Kernel Preemption (Desktop)
</pre>

<p>
Si estamos arrancando desde Firewire, necesitaremos habilitar estas opciones.
Si no queremos compilar el soporte embebido, necesitaremos incluir estos
módulos y sus dependencias en un initrd.
</p>

<pre caption="Activar soporte para dispositivos firewire en el arranque">
  Device Drivers ---&gt;
    IEEE 1394 (FireWire) support ---&gt;
      &lt;*&gt; IEEE 1394 (FireWire) support
      &lt;*&gt;   OHCI-1394 support
      &lt;*&gt;   SBP-2 support (Harddisks etc.)
</pre>

<p>
Si estamos arrancando desde USB, necesitaremos habilitar estas opciones, si
no queremos compilar el soporte embebido, necesitaremos incluir estos módulos
y sus dependencias en un initrd.
</p>

<pre caption="Activar soporte para dispositivos USB en el arranque">
  Device Drivers ---&gt;
    USB support ---&gt;
      &lt;*&gt; Support for Host-side USB
      &lt;*&gt;   OHCI HCD support
      &lt;*&gt;   USB Mass Storage support
</pre>

<p>
No desactivaremos el soporte en el núcleo para el framebuffer porque se
necesita para un arranque satisfactorio. Si utilizamos un chipset basado
en NVIDIA deberemos utilizar el framebuffer de Open Firmware. Si utilizamos
un chipset basado en ATI, deberemos utilizar el controlador de framebuffer
basado en el chipset (Mach64, Rage128 or Radeon).
</p>

<pre caption="Elegir un controlador de Framebuffer">
  Device Drivers ---&gt;
  Graphics support ---&gt;
    &lt;*&gt; Support for frame buffer devices
    [*] Open Firmware frame buffer device support
    &lt;*&gt; ATI Radeon display support
    &lt;*&gt; ATI Rage128 display support
    &lt;*&gt; ATI Mach64 display support
    Console display driver support ---&gt;
    &lt;*&gt; Framebuffer Console support
</pre>

<note>
Si seleccionamos más de un dispositivo de framebuffer puede que se utilice por
defecto un controlador no óptimo. Podemos tanto utilizar un sólo framebuffer
como especificar el que queremos utilizar pasándolo como parámetro del núcleo
durante el arranque añadiendo una línea de vídeo como por ejemplo
<c>video=radeonfb</c>.
</note>

<p>
Continuaremos con <uri link="#compiling" >Compilar e instalar</uri> al
acabar de configurar el núcleo.
</p>

</body>
</subsection>
<subsection id="compiling" >
<title>Compilar e instalar</title>
<body>

<p>
Ahora que ya está configurado el núcleo, es el momento para compilarlo
e instalarlo. Saldremos del menú de configuración y ejecutaremos los
comandos siguientes:
</p>

<pre caption="Compilar el núcleo" >
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Cuando el núcleo haya terminado de compilar, se ha de copiar la imagen
a <path>/boot</path>  tal como se muestra a continuación. Si tiene una
partición boot separada, como en los ordenadores Pegasos, asegúrese que
esté montada correctamente. Si estamos utilizando BootX para arrancar,
copiaremos el núcleo después.
</p>

<p>
Yaboot y BootX usan un núcleo sin comprimir a diferencia de otros gestores
de arranque. El núcleo sin comprimir se llama vmlinux y se encontrará en
<path>/usr/src/linux</path> una vez que el núcleo haya terminado de
compilarse. Si está utilizando una máquina Pegasos, el microcódigo del
Pegasos necesita un núcleo comprimido llamado zImage que puede
encontrarse en <path>/usr/src/linux/arch/powerpc/boot/images</path>.
</p>

<pre caption="Instalar el kernel" >
# <i>cd /usr/src/linux</i>
<comment>Note que su versión del núcleo puede ser diferente</comment>
<comment>(Apple/IBM)</comment>
# <i>cp vmlinux /boot/<keyval id="kernel-name"/></i>
<comment>(Pegasos)</comment>
# <i>cp arch/powerpc/boot/images/zImage /boot/&lt;kernel-version&gt;</i>
</pre>

<p>
Ahora hay que continuar con <uri link="#kernel_modules" >Instalar
módulos del núcleo separadamente</uri>.
</p>

</body>
</subsection>
</section>
<section id="kernel_modules" >
<title>Instalar módulos del núcleo separadamente</title>
<subsection>
<title>Configurar los módulos</title>
<body>

<p>
Se deben poner los módulos que queramos cargar automáticamente en
<path>/etc/modules.autoload.d/kernel-2.6</path>. También puede agregar
opciones extras a los módulos si se requiere.
</p>

<p>
Para ver todos los módulos disponibles, se puede ejecutar el comando
<c>find</c>. No hay que olvidar sustituir &quot;&lt;versión del
kernel>&quot; con la versión del kernel que hemos compilado:
</p>

<pre caption="Ver todos los módulos disponibles" >
# <i>find /lib/modules/&lt;kernel version>/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Por ejemplo, para cargar automáticamente el módulo <c>3c59x</c>, hay
que editar el fichero <path>kernel-2.6</path> y añadir el módulo en él,
un módulo en una línea.
</p>

<pre caption="Editar /etc/modules.autoload.d/kernel-2.6" >
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6" >
3c59x
</pre>

<p>
Continuaremos la instalación con <uri link="?part=1&amp;chap=8">Configurar el
sistema</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel" >
<title>Alternativa: Usar genkernel</title>
<body>

<p>
Ahora que el árbol de las fuentes del núcleo está instalado, es hora
de compilarlo usando el guión <c>genkernel</c> que automáticamente
construirá uno por nosostros. <c>genkernel</c> trabaja configurando un
núcleo prácticamente idéntico al núcleo del CD de instalación. Esto
significa que cuando se usa <c>genkernel</c> para construir el núcleo,
el sistema generalmente detectará todo el hardware durante el
arranque, tal como lo hace el CD de instalación. Debido a que genkernel
no requiere ninguna configuración manual del núcleo, es una solución
ideal para esos usuarios que no se sienten cómodos compilando sus propios
núcleos.
</p>

<p>
Ahora, veamos como usar genkernel. Primero, hay que hacer emerge al
ebuild de genkernel:
</p>

<pre caption="Instalar genkernel" >
# <i>emerge genkernel</i>
</pre>

<p>
A continuación, hay que copiar la configuración del núcleo empleada
por el CD de instalación al sitio donde genkernel busca la
configuración predeterminada del núcleo:
</p>

<pre caption="Copiar la configuración del kernel del CD de instalación" >
# <i>zcat /proc/config.gz > /usr/share/genkernel/ppc/kernel-config-2.6</i>
</pre>

<p>
Si estamos usando firewire o USB para arrancar, necesitaremos añadir los
módulos al initrd. Editaremos
<path>/usr/share/genkernel/ppc/modules_load</path> y cambiaremos
<c>MODULES_FIREWIRE="ieee1394 ohci1394 sbp2"</c> para el soporte de firewire
o <c>MODULES_USB="usbcore ohci-hcd ehci-hcd usb-storage"</c> para el soporte
de USB.
</p>

<p>
Antes de compilar las fuentes, el fichero fstab necesita algunos pequeños
ajustes. El resto del fstab se podrá completar en un paso posterior, por lo
que no se preocupe ahora por los detalles. Si no quiere crear una partición
separada para boot (NO bootstrap, que es algo diferente), quite la línea que
se refiere a <path>/boot</path> en <path>/etc/fstab</path>. Esto tendrá que
hacerse en muchos ordenadores Apple.
</p>

<pre caption="Quitar /boot en /etc/fstab en las máquinas sin una partición boot">
# <i>nano -w /etc/fstab</i>
<comment>Quite esta línea</comment>
/dev/BOOT               /boot           ext2            noauto,noatime  1 2
</pre>

<p>
Ahora hay que compilar las fuentes del núcleo ejecutando <c>genkernel
--genzimage all</c>. Para Pegasos necesitaremos usar una configuración
diferente y crear una zImage en lugar del núcleo vmlinux usado en las
máquinas Apple. Recordaremos que como <c>genkernel</c> compila un núcleo
que soporta casi todo el hardware, esta compilación ¡tardará un rato en
terminar!
</p>

<p>
Observaremos que si la partición de arranque no usa ext2 o ext3 como sistema
de archivos, se necesita configurar manualmente el núcleo usando 
<c>genkernel --menuconfig all</c> para agregar soporte para el sistema de
archivos correspondiente <e>en</e> el núcleo (<e>no</e> como módulo). Los
usuarios de EVMS2 o LVM2 probablemente querrán añadir también los argumentos
<c>--evms2</c> or <c>--lvm2</c>.
</p>

<pre caption="Ejecutar genkernel" >
# <i>genkernel all</i>
</pre>

<pre caption="Ejecutar genkernel en el Pegasos">
# <i>genkernel --genzimage --kernel-config=/usr/share/genkernel/ppc/Pegasos all</i>
</pre>

<p>
Una vez que <c>genkernel</c> haya terminado, un núcleo, un conjunto
completo de módulos y un <e>disco raíz de inicio</e> (initrd) habrán
sido creados. Usaremos el núcleo e initrd para configurar un gestor de
arranque más tarde en este documento. Escribiremos los nombres del
núcleo y de initrd ya que se necesitarán para el archivo de
configuración del gestor de arranque. initrd se iniciará
inmediatamente después del arranque para realizar la autodetección de
hardware (igual que en el CD de instalación) antes que se inicie el
sistema &quot;real&quot;. Nos aseguraremos de escribir también los
parámetros de arranque necesarios, puesto que se requieren para un
arranque correcto con genkernel.
</p>

<pre caption="Verificar los nombres del kernel e initrd creados" >
<comment>Note que su versión del núcleo puede ser diferente</comment>
# <i>ls /boot/kernel-genkernel-ppc-<keyval id="kernel-gentoo"/> /boot/initramfs-genkernel-ppc-<keyval id="kernel-gentoo"/></i>
</pre>

<p>
Ahora continuaremos con <uri link="?part=1&amp;chap=8" >Configurar el
sistema</uri>.
</p>

</body>
</section>
</sections>
