<?xml version = '1.0' encoding = 'UTF-8' ?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/handbook/hb-install-ppc-kernel.xml,v 1.32 2011/08/16 14:01:17 chiguire Exp $ -->

<sections>

<abstract>
El núcleo Linux está al centro de cada distribución. Este capítulo
enseñará cómo configurar el núcleo.
</abstract>

<version>12</version>
<date>2011-08-12</date>

<section>
<title>Zona horaria</title>
<body>

<p>
Primero necesitamos seleccionar la zona horaria para que nuestro
sistema sepa dónde está ubicado. Hay que buscar la zona horaria en
<path>/usr/share/zoneinfo</path>, luego cópiela en
<path>/etc/localtime</path>. Por favor, tenga cuidado con las zonas
horarias de <path>/usr/share/zoneinfo/Etc/GMT*</path> pues sus nombres
no hacen referencia a las zonas esperadas. Por ejemplo,
<path>GMT-8</path> es en realidad GMT+8.
</p>

<pre caption="Configurar la zona horaria" >
# <i>ls /usr/share/zoneinfo</i>
<comment>(Suponiendo que queremos usar GMT)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>
</body>
</section>

<section>
<title>Instalar las fuentes del núcleo</title>
<subsection>
<title>Elegir un núcleo</title>
<body>

<p>
El corazón alrededor del cual se construyen todas las distribuciones
es el núcleo (kernel) de Linux. Es la capa entre los programas de
usuario y el hardware del sistema. Gentoo proporciona a sus usuarios
varias fuentes posibles para el núcleo. Una lista completa está disponible
en la <uri link="/doc/es/gentoo-kernel.xml">Guía Gentoo del Kernel</uri>.
</p>

<p>
Para los sistemas basados en <keyval id="arch"/> tenemos
<c>gentoo-sources</c> (fuentes del núcleo parcheadas para características
extra).
</p>

<p>
Escoja sus fuentes del núcleo e instálelas con <c>emerge</c>.
</p>

<pre caption="Instalar unas fuentes del kernel" >
# <i>emerge gentoo-sources</i>
</pre>

<p>
Al mirar en <path>/usr/src</path> debería ver un enlace simbólico
llamado <path>linux</path> apuntando a las fuentes del núcleo
actual. En este caso, el enlace a las fuentes instaladas apunta a
<c>gentoo-sources-<keyval id="kernel-version"/></c>. Tenga en cuenta
que su versión puede ser diferente.
</p>

<pre caption="Ver el enlace a las fuentes del kernel" >
# <i>ls -l /usr/src/linux</i>
 lrwxrwxrwx    1 root   root    12 Oct 13 11:04 /usr/src/linux -&gt; linux-<keyval id="kernel-version"/>
</pre>

<p>
Ahora vamos a configurar y compilar las fuentes del núcleo. Puede usar
<c>genkernel</c>, que construirá un núcleo genérico como el usado por
el CD de instalación. Explicaremos la configuración "manual", puesto
que es la mejor forma de optimizar el entorno.
</p>

<p>
Para configurar manualmente el núcleo, podemos seguir en <uri
link="#manual"> Predeterminado: Configuración manual</uri>. En
cambio,para usar <c>genkernel</c> podemos leer <uri
link="#genkernel">Alternativa: Usar genkernel</uri>.
</p>
</body>
</subsection>
</section>

<section id="manual" >
<title>Predeterminado: Configuración manual</title>
<subsection>
<title>Introducción</title>
<body>

<p>
Configurar manualmente un núcleo es visto frecuentemente como el
procedimiento más difícil al que tiene que enfrentarse un usuario de
Linux. Nada más lejos de la realidad: después de configurar algunos
núcleos no recordaremos si era algo difícil ;)
</p>

<p>
Sin embargo, una cosa sí <e>es</e> cierta: debemos conocer nuestro
sistema para configurar el núcleo manualmente. Mucha información se
puede recolectar instalando pciutils (<c>emerge pciutils</c>) que
contiene <c>lscpi</c>. Ahora podremos utilizar <c>lscpi</c> en el
entorno chroot. Podemos ignorar cualquier advertencia <e>pcilib</e>
(tales como "pcilib: cannot open /sys/bus/pci/devices") que produzca
<c>lspci</c>. Si ejecutamos <c>lscpi</c> desde un entorno <e>no
chroot</e>, los resultados serán los mismos. También podemos ejecutar
<c>lsmod</c> para ver que módulos del núcleo usa el CD de instalación
(podría proporcionar consejos sobre qué activar).
</p>

<p>
Ahora hay que ir al directorio de las fuentes para configurar el
núcleo.  Empiece configurando un núcleo que pueda arrancar en la
mayoría de máquinas PowerPC de 32 bits, ejecutando <c>make
pmac32_defconfig</c>. Una vez que la configuración predeterminada haya
sido generada, ejecutemos <c>make menuconfig</c> que presentará un
menú de configuración basado en ncurses.
</p>

<pre caption="Invocar a menuconfig" >
# <i>cd /usr/src/linux</i>
# <i>make pmac32_defconfig</i>
# <i>make menuconfig</i>
</pre>

<p>
Se presentarán varias secciones de configuración. Listaremos primero
algunas opciones que se deben activar (de otro modo Gentoo no
funcionará, o no funcionará adecuadamente sin configuración
adicional).
</p>
</body>
</subsection>

<subsection>
<title>Activar opciones requeridas</title>
<body>

<p>
Primero vayamos a <c>File Systems</c> y seleccionemos el soporte de
los sistemas de archivo a usar. <e>No</e> los compile como módulos, ya
que entonces su sistema Gentoo no podrá montar las
particiones. También seleccione el <c>sistema de archivos /proc</c> y
<c>Virtual memory</c>. Asegúrese de activar soporte para particiones
Amiga si está usando un equipo Pegasos, o particiones Macintosh si
está usando un equipo Apple.
</p>

<pre caption="Selecionar los sistemas de ficheros necesarios" >
File systems ----&gt;
  Pseudo Filesystems ----&gt;
<comment>(/proc puede estar ya forzado por su configuración, si es así,
verá --- en su lugar)</comment>
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)
  Partition Types ---&gt;
    [*] Advanced partition support
    [*] Amiga partition table support
    [*] Macintosh partition map support

<comment>(Deben seleccionarse una o más de las siguientes opciones según se necesite)</comment>
   &lt;*&gt; Reiserfs support
   &lt;*&gt; Ext3 journalling file system support
   &lt;*&gt; Second extended fs support
   &lt;*&gt; XFS filesystem support
</pre>

<p>
Los usuarios de las máquinas NewWorld y OldWorld querrán soporte para
HFS también. Los usuarios de OldWorld lo necesitan para copiar en la
partición MacOS los núcleos compilados. Los usuarios de NewWorld lo
necesitan para configurar la partición especial Apple_Bootstrap:
</p>

<pre caption="Activar el soporte HFS">
File Systems ---&gt;
  Miscellaneous filesystems ---&gt;
    &lt;M&gt; Apple Macintosh file system support
    &lt;M&gt; Apple Extended HFS file system support
</pre>

<p>
Si usamos PPPoE o un módem para conectar a Internet, necesitaremos las
siguientes opciones del núcleo:
</p>

<pre caption="Seleccionar los controladores necesarios para PPPoE" >
Device Drivers ---&gt;
   Network device support ---&gt;
    &lt;*> PPP (point-to-point protocol) support
    &lt;*>   PPP support for async serial ports
    &lt;*>   PPP support for sync tty ports
</pre>

<p>
Las dos opciones de compresión no molestan pero no son siempre
necesarias.  La opción <c>PPP over Ethernet</c> sólo podría ser usada
por <c>ppp</c> cuando se configure para realizar PPPoE en modo núcleo.
</p>

<p>
¡No olvide incluir soporte en el núcleo para su tarjeta ethernet!
Muchos de los nuevos computadores Apple usan el controlador ethernet
SunGEM. Lo viejos iMac usan el controlador BMAC.
</p>

<pre caption="Selección del controlador de red" >
Device Drivers ---&gt;
   Network device support ---&gt;
    Ethernet (10 or 100Mbit) ---&gt;
      [*] Ethernet (10 or 100Mbit)
      &lt;*&gt;   Generic Media Independent Interface device support
      &lt;*&gt;   MACE (Power Mac ethernet) support
      &lt;*&gt;   BMAC (G3 ethernet) support
      &lt;*&gt; Sun GEM support
</pre>

<p>
Si estamos arrancando desde FireWire, necesitaremos activar estas
opciones. Si no queremos compilar el soporte embebido, necesitaremos
incluir estos módulos y sus dependencias en un initrd.
</p>

<pre caption="Activar soporte para dispositivos FireWire en el arranque">
  Device Drivers ---&gt;
    IEEE 1394 (FireWire) support ---&gt;
      &lt;*&gt; IEEE 1394 (FireWire) support
      &lt;*&gt;   OHCI-1394 support
      &lt;*&gt;   SBP-2 support (Harddisks etc.)
</pre>

<p>
Si estamos arrancando desde USB, necesitaremos habilitar estas
opciones, si no queremos compilar el soporte embebido, necesitaremos
incluir estos módulos y sus dependencias en un initrd.
</p>

<pre caption="Activar soporte para dispositivos USB en el arranque">
  Device Drivers ---&gt;
    USB support ---&gt;
      &lt;*&gt; Support for Host-side USB
      &lt;*&gt;   OHCI HCD support
      &lt;*&gt;   USB Mass Storage support
</pre>

<p>
No desactive el soporte en el núcleo para el framebuffer porque se
necesita para un arranque exitoso. Si utilizamos un chipset basado en
NVIDIA debemos utilizar el framebuffer de Open Firmware. Si utilizamos
un chipset basado en ATI, debemos utilizar el controlador según el
chipset (Mach64, Rage128 o Radeon).
</p>

<pre caption="Elegir un controlador de Framebuffer">
  Device Drivers ---&gt;
  Graphics support ---&gt;
    &lt;*&gt; Support for frame buffer devices
    [*] Open Firmware frame buffer device support
    &lt;*&gt; ATI Radeon display support
    &lt;*&gt; ATI Rage128 display support
    &lt;*&gt; ATI Mach64 display support
    Console display driver support ---&gt;
    &lt;*&gt; Framebuffer Console support
</pre>

<note>
Si seleccionamos más de un dispositivo de framebuffer puede que se
utilice por defecto un controlador no óptimo. Podemos tanto utilizar
un sólo framebuffer como especificar el que queremos utilizar
pasándolo como parámetro del núcleo durante el arranque añadiendo una
línea de vídeo como por ejemplo <c>video=radeonfb</c>.
</note>

<p>
Continuaremos con <uri link="#compiling" >Compilar e instalar</uri> al
acabar de configurar el núcleo.
</p>
</body>
</subsection>

<subsection id="compiling" >
<title>Compilar e instalar</title>
<body>

<p>
Ahora que ya está configurado el núcleo, es el momento para compilarlo
e instalarlo. Saldremos del menú de configuración y ejecutaremos los
comandos siguientes:
</p>

<pre caption="Compilar el núcleo" >
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Cuando el núcleo haya terminado de compilar, copiemos la imagen
a <path>/boot</path> tal como se muestra a continuación. Si tiene una
partición boot separada, como en los ordenadores Pegasos, asegúrese
que esté montada correctamente. Si estamos utilizando BootX para
arrancar, copiaremos el núcleo después.
</p>

<p>
Yaboot y BootX usan un núcleo sin comprimir a diferencia de otros
gestores de arranque. El núcleo sin comprimir se llama vmlinux y se
encontrará en <path>/usr/src/linux</path> una vez que el núcleo haya
terminado de compilarse. Si está utilizando una máquina Pegasos, el
microcódigo del Pegasos necesita un núcleo comprimido llamado zImage
que puede encontrarse en
<path>/usr/src/linux/arch/powerpc/boot/images</path>.
</p>

<pre caption="Instalar el núcleo" >
# <i>cd /usr/src/linux</i>
<comment>Note que su versión del núcleo puede ser diferente</comment>
<comment>(Apple/IBM)</comment>
# <i>cp vmlinux /boot/<keyval id="kernel-name"/></i>
<comment>(Pegasos)</comment>
# <i>cp arch/powerpc/boot/images/zImage /boot/<keyval id="kernel-name"/></i>
</pre>

<p>
Ahora continuemos con <uri link="#kernel_modules" >Instalar
módulos del núcleo separadamente</uri>.
</p>
</body>
</subsection>
</section>

<section id="genkernel" >
<title>Alternativa: Usar genkernel</title>
<body>

<p>
Ahora que el árbol de las fuentes del núcleo está instalado, es hora
de compilarlo usando el guión <c>genkernel</c> que automáticamente
construirá uno por nosotros. <c>genkernel</c> trabaja configurando un
núcleo prácticamente idéntico al núcleo del CD de instalación. Esto
significa que cuando se usa <c>genkernel</c> para construir el núcleo,
el sistema generalmente detectará todo el hardware durante el
arranque, tal como lo hace el CD de instalación. Debido a que
genkernel no requiere ninguna configuración manual del núcleo, es una
solución ideal para esos usuarios que no se sienten cómodos compilando
sus propios núcleos.
</p>

<p>
Ahora, veamos como usar genkernel. Primero, hay que hacer emerge al
ebuild de genkernel:
</p>

<pre caption="Instalar genkernel" >
# <i>emerge genkernel</i>
</pre>

<p>
A continuación, hay que copiar la configuración del núcleo empleada
por el CD de instalación al sitio donde genkernel busca la
configuración predeterminada del núcleo:
</p>

<pre caption="Copiar la configuración del núcleo del CD de instalación" >
# <i>zcat /proc/config.gz > /usr/share/genkernel/arch/ppc/kernel-config</i>
</pre>

<p>
Si estamos usando firewire o USB para arrancar, necesitaremos añadir
los módulos al initrd. Editaremos
<path>/usr/share/genkernel/arch/ppc/modules_load</path> y cambiaremos
<c>MODULES_FIREWIRE="ieee1394 ohci1394 sbp2"</c> para el soporte de
FireWire o <c>MODULES_USB="usbcore ohci-hcd ehci-hcd usb-storage"</c>
para el soporte de USB.
</p>

<p>
Antes de compilar las fuentes, el fichero fstab necesita algunos
pequeños ajustes. El resto del fstab se podrá completar en un paso
posterior, por lo que no se preocupe ahora por los detalles. Si no
quiere crear una partición separada para boot (NO bootstrap, que es
algo diferente), quite la línea que se refiere a <path>/boot</path> en
<path>/etc/fstab</path>. Esto tendrá que hacerse en muchos ordenadores
Apple.
</p>

<pre caption="Quitar /boot en /etc/fstab en las máquinas sin una partición boot">
# <i>nano -w /etc/fstab</i>
<comment>Quite esta línea</comment>
/dev/BOOT               /boot           ext2            noauto,noatime  1 2
</pre>

<p>
Ahora hay que compilar las fuentes del núcleo ejecutando <c>genkernel
--genzimage all</c>. Para Pegasos necesitaremos usar una configuración
diferente y crear una zImage en lugar del núcleo vmlinux usado en las
máquinas Apple. Recordaremos que como <c>genkernel</c> compila un
núcleo que soporta casi todo el hardware, esta compilación ¡tardará un
rato en terminar!
</p>

<p>
Observaremos que si la partición de arranque no usa ext2 o ext3 como
sistema de archivos, debemos configurar manualmente el núcleo usando
<c>genkernel --menuconfig all</c> para agregar soporte para el sistema
de archivos correspondiente <e>en</e> el núcleo (<e>no</e> como
módulo). Los usuarios de EVMS2 o LVM2 probablemente querrán añadir
también los argumentos <c>--evms2</c> or <c>--lvm2</c>.
</p>

<pre caption="Ejecutar genkernel" >
# <i>genkernel all</i>
</pre>

<pre caption="Ejecutar genkernel en el Pegasos">
# <i>genkernel --genzimage all</i>
</pre>

<p>
Una vez que <c>genkernel</c> haya terminado, un núcleo, un conjunto
completo de módulos y un <e>disco ram de inicio</e> (initramfs) habrán
sido creados. Usaremos el núcleo e initrd para configurar un gestor de
arranque más tarde en este documento. Escribiremos los nombres del
núcleo y de initrd ya que se necesitarán para el archivo de
configuración del gestor de arranque. initrd se iniciará
inmediatamente después del arranque para realizar la autodetección de
hardware (igual que en el CD de instalación) antes que se inicie el
sistema &quot;real&quot;. Nos aseguraremos de escribir también los
parámetros de arranque necesarios, puesto que se requieren para un
arranque correcto con genkernel.
</p>

<pre caption="Verificar los nombres del kernel e initrd creados" >
<comment>Note que su versión del núcleo puede ser diferente</comment>
# <i>ls /boot/<keyval id="genkernel-name"/> /boot/initramfs-genkernel-ppc-<keyval id="genkernel-initrd"/></i>
</pre>

<p>
Ahora continuaremos con <uri link="?part=1&amp;chap=8" >Configurar el
sistema</uri>.
</p>
</body>
</section>

<section id="kernel_modules">
<title>Módulos del núcleo</title>

<subsection>
  <include href="hb-install-kernelmodules.xml"/>
</subsection>
</section>
</sections>
