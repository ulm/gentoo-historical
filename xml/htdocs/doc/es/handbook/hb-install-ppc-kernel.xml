<?xml version = '1.0' encoding = 'UTF-8' ?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/handbook/hb-install-ppc-kernel.xml,v 1.4 2005/06/14 22:20:33 chiguire Exp $ -->

<sections>

<version>2.7</version>
<date>2005-06-09</date>

<section>
<title>Zona horaria</title>
<body>
      
<p>
Primero necesitamos seleccionar la zona horaria para que nuestro
sistema sepa dónde está ubicado. Hay que buscar el nombre de la zona
horaria en <path>/usr/share/zoneinfo</path>, y luego hacer un vínculo
simbólico a <path>/etc/localtime</path> usando <c>ln</c>:
</p>

<pre caption="Configurar la zona horaria" >
# <i>ls /usr/share/zoneinfo</i>
<comment>(Suponiendo que queremos usar GMT)</comment>
# <i>ln -sf /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>
</body>
</section>

<section>
<title>Instalar las fuentes</title>
<subsection>
<title>Elegir un núcleo</title>
<body>

<p>
El centro alrededor del cual se construyen todas las distribuciones es
el núcleo (kernel) de Linux. Es la capa entre los programas de usuario
y el hardware del sistema. Gentoo proporciona a sus usuarios varias
fuentes de kernel. Una lista completa está disponible en la <uri
link="/doc/es/gentoo-kernel.xml" >Guía Gentoo del Kernel</uri>.
</p>

<p>
Para PPC se puede elegir entre <c>vanilla-sources</c> y
<c>gentoo-sources</c> (ambos núcleos 2.6). El último está disponible
para una instalación sin red. Además de estos dos, hay otro núcleo 2.6
con adaptaciones especiales para Pegasos:
<c>pegasos-sources</c>. Vamos, pues, a continuar con la instalación o
<c>emerge</c> de las fuentes del kernel:
</p>

<pre caption="Instalar unas fuentes del kernel" >
# <i>emerge gentoo-sources</i>
</pre>

<note>
Las fuentes para PowerPC están basadas en un núcleo 2.6.10 con mejoras
de seguridad traídas del 2.6.11. En el momento del lanzamiento del
núcleo 2.6.11, éste tenía algunos problemas en diferentes sistemas
PowerPC.
</note>

<p>
En <path>/usr/src</path> se encuentra un enlace simbólico llamado
<path>linux</path> apuntando a las fuentes del núcleo. Asumiremos que
las fuentes instaladas son las <c>gentoo-sources-2.6.10-r8</c>:
</p>

<pre caption="Ver el enlace a las fuentes del kernel" >
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           22  Mar 18 16:23 /usr/src/linux -> linux-2.6.10-gentoo-r8
</pre>

<p>
Si el enlace simbólico no apunta a las fuentes del kernel elegidas
(hay que tener en cuenta que <c>linux-2.6.10-gentoo-r8</c> es un mero
ejemplo) debe cambiarse para que lo haga a las del núcleo correcto.
</p>

<pre caption="Cambiar el enlace a las fuentes del núcleo" >
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.6.10-gentoo-r8 linux</i>
</pre>

<p>
Ahora vamos a configurar y compilar las fuentes del núcleo. Puede
usarse <c>genkernel</c>, que construirá un núcleo genérico como el
usado por el CD de instalación. En este apartado vamos a explicar la
configuración &quot;manual&quot;, ya que es la mejor manera de
optimizar nuestro sistema.
</p>

<p>
Para configurar manualmente el núcleo, podemos seguir en <uri link="#manual" >Predeterminado: Configuración manual</uri>. En cambio,
para usar <c>genkernel</c> podemos leer <uri link="#genkernel"
>Alternativa: Usar genkernel</uri>.
</p>
</body>
</subsection>
</section>

<section id="manual" >
<title>Predeterminado: Configuración manual</title>
<subsection>
<title>Introducción</title>
<body>

<p>
Configurar manualmente un núcleo se ve frecuentemente como el
procedimiento más difícil al que tiene que enfrentarse un usuario de
Linux. Nada mas lejos de la realidad: después de configurar un par de
núcleos no recordaremos si fue difícil la primera vez ;)
</p>

<p>
Sin embargo, una cosa <e>es</e> cierta: debemos conocer nuestro sistema para empezar a configurar el núcleo manualmente. Mucha de la información necesaria se puede recolectar instalando pciutils (<c>emerge pciutils</c>) que contiene <c>lscpi</c>. Ahora podremos utilizar <c>lscpi</c> en el entorno del chroot. Se puede ignorar sin riesgo cualquier aviso que muestre <c>lspci</c>  relativo a <e>pcilib</e> (como "pcilib: cannot open /sys/bus/pci/devices"). Alternativamente, se puede ejecutar <c>lscpi</c> desde un entorno <e>no chroot</e>. Los resultados serían los mismos. También se puede ejecutar <c>lsmod</c> para ver que módulos del núcleo usa el CD de instalación (puede proporcionar buenos consejos sobre qué habilitar).
</p>

<p>
Ahora hay que ir al directorio de las fuentes y ejecutar <c>make
menuconfig</c>. Lo que lanzará un menú de configuración basado en
ncurses.
</p>

<pre caption="Invocar a menuconfig" >
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Nos darán la bienvenida varias secciones de configuración. Listaremos
primero algunas opciones que se deben activar (de otro modo Gentoo no
funcionará, o no funcionará adecuadamente sin configuración
adicional).
</p>
</body>
</subsection>

<subsection>
<title>Activar opciones necesarias</title>
<body>

<p>
Primero que nada, activaremos el uso de código y dispositivos en
desarrollo y experimentales. Es necesario, porque algunos dispositivos
o código importante no aparecerían:
</p>

<pre caption="Seleccionar código/dispositivo expremiental" >
Code maturity level options --->
  [*] Prompt for development and/or incomplete code/drivers
General setup --->
  [*] Support for hot-pluggable devices
</pre>

<p>
Ahora, en <c>File Systems</c> seleccionaremos el soporte para los
sistemas de ficheros empleados. <e>No</e> deben compilarse como
módulos, en cuyo caso el sistema Gentoo no sería capaz de montar las
particiones. También debe seleccionarse el <c>/proc file system</c> y
<c>Virtual memory</c>. <e>No</e> debe seleccionarse <c>/dev file
system</c>.
</p>

<pre caption="Selecionar los sistemas de ficheros necesarios" >
File systems --->
  Pseudo Filesystems --->
    [*] /proc file system support
    [ ] /dev file system support (OBSOLETE)
    [*] Virtual memory file system support (former shm fs)
<comment>(Deben seleccionarse una o más de las siguientes opciones según se necesite)</comment>
  &lt;*> Reiserfs support
  &lt;*> Ext3 journalling file system support
  &lt;*> Second extended fs support
  &lt;*> XFS filesystem support
</pre>

<p>
Si usamos PPPoE o un módem para conectar a Internet, necesitaremos las
siguientes opciones del núcleo:
</p>

<pre caption="Seleccionando los controladores necesarios para PPPoE" >
Device Drivers --->
  Networking support --->
    &lt;*> PPP (point-to-point protocol) support
    &lt;*>   PPP support for async serial ports
    &lt;*>   PPP support for sync tty ports
</pre>

<p>
Las dos opciones de compresión no molestan pero no son necesarias. La
opción<c>PPP over Ethernet</c> tampoco es obligatoria, tal vez solo
sea usada por <c>rp-pppoe</c> cuando se configure PPPoE en modo
núcleo.
</p>

<p>
Si es necesario, no hay que olvidar incluir el soporte en el núcleo
para la tarjeta ethernet.
</p>

<p>
Los usuarios de sistemas OldWorld deberán activar el soporte HFS para
poder copiar el núcleo a la partición MacOS. Esto también se aplica a
las máquinas NewWorld, por que lo requiere la partición especial
Apple_Bootstrap:
</p>

<pre caption="Activating HFS support" >
File Systems --->
  [*] HFS Support
</pre>

<p>
En el momento presente, la característica de núcleo preentivo es todavía inestable en PPC y puede causar fallos de compilación y de segmentación aleatorios. Se sugiere <c>encarecidamente</c> no usar esta opción.
</p>
 
<pre caption="Asegurarse que la opción Preemptible Kernel está desactivada">
Platform options ---&gt;
  [ ] Preemptible Kernel
</pre>

<p>
Continuaremos con <uri link="#compiling" >Compilar e instalar</uri> al
acabar de configurar el núcleo.
</p>
</body>
</subsection>

<subsection id="compiling" >
<title>Compilar e instalar</title>
<body>

<p>
Ahora que ya está configurado el núcleo, es el momento para compilarlo
e instalarlo. Saldremos de la configuración y comenzaremos con el
proceso de compilación:
</p>

<pre caption="Compilar el núcleo" >
# <i>make all &amp;&amp; make modules_install</i>
</pre>

<p>
Cuando el núcleo haya terminado de compilar, se ha de copiar la imagen
a <path>/boot</path> (hay que asegurarse que esté correctamente
montada en un Pegasos).
</p>

<pre caption="Instalar el kernel" >
<comment>reemplazar 2.6.10 con la versión correspondiente del núcleo</comment>
(Apple/IBM)  # <i>cp vmlinux /boot/kernel-2.6.10</i>
(Pegasos)    # <i>cp arch/ppc/boot/images/zImage.chrp /boot/kernel-2.6.10</i>
</pre>

<p>
También sería bueno copiar el archivo de configuración del kernel a
<path>/boot</path>, por si acaso :)
</p>

<pre caption="Respaldar la configuración del kernel" >
# <i>cp .config /boot/config-2.6.10-gentoo-r8</i>
</pre>

<p>
Ahora hay que continuar con <uri link="#kernel_modules" >Instalar
módulos del núcleo separadamente</uri>.
</p>
</body>
</subsection>
</section>

<section id="kernel_modules" >
<title>Instalar módulos del núcleo separadamente</title>
<subsection>
<title>Configurar los módulos</title>
<body>

<p>
Se deben poner los módulos que queramos cargar automáticamente en
<path>/etc/modules.autoload.d/kernel-2.6</path>. Se pueden agregar
opciones extras a los módulos si así se quiere.
</p>

<p>
Para ver todos los módulos disponibles, se puede ejecutar el comando
<c>find</c>. No hay que olvidar sustituir &quot;&lt;versión del
kernel>&quot; con la versión del kernel que hemos compilado:
</p>

<pre caption="Ver todos los módulos disponibles" >
# <i>find /lib/modules/&lt;kernel version>/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Por ejemplo, para cargar automáticamente el módulo <c>3c59x.o</c>, hay
que editar el fichero <path>kernel-2.6</path> y escribir en él el
nombre del módulo.
</p>

<pre caption="Editar /etc/modules.autoload.d/kernel-2.6" >
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6" >
3c59x
</pre>

<p>
Continuaremos la instalación con <uri link="?part=1&amp;chap=8"
>Configurar el sistema</uri>.
</p>
</body>
</subsection>
</section>

<section id="genkernel" >
<title>Alternativa: Usar genkernel</title>
<body>

<p>
Si hemos llegado a esta sección, es porque habremos elegido usar el
guión <c>genkernel</c> para configurar el kernel.
</p>

<p>
Ahora que el árbol de las fuentes del núcleo está instalado, es hora
de compilarlo usando el guión <c>genkernel</c> que automáticamente
construirá uno por nosostros. <c>genkernel</c> trabaja configurando un
núcleo prácticamente idéntico al núcleo del CD de instalación. Esto
significa que cuando se usa <c>genkernel</c> para construir el núcleo,
el sistema generalmente detectará todo el hardware durante el
arranque, tal como lo hace el CD de instalación. Debido a que
genkernel no requiere ninguna configuración manual del núcleo, es una
solución ideal para esos usuarios que no se sienten cómodos compilando
sus propios núcleos.
</p>

<p>
Ahora, veamos como usar genkernel. Primero, hay que hacer emerge al
ebuild de genkernel:
</p>

<pre caption="Instalar genkernel" >
# <i>emerge genkernel</i>
</pre>

<p>
A continuación, hay que copiar la configuración del núcleo empleada
por el CD de instalación al sitio donde genkernel busca la
configuración predeterminada del núcleo:
</p>

<pre caption="Copiar la configuración del kernel del CD de instalación" >
# <i>zcat /proc/config.gz > /usr/share/genkernel/ppc/kernel-config-2.6</i>
</pre>

<p>
Ahora hay que compilar las fuentes del núcleo ejecutando <c>genkernel
--udev all</c>. Recordaremos que como <c>genkernel</c> compila un
núcleo que soporta casi todo el hardware, esta compilación ¡tardará un
rato en terminar!
</p>

<p>
Observaremos que si la partición de arranque no usa ext2 o ext3 como
sistema de archivos, se necesita configurar manualmente el núcleo
usando <c>genkernel --menuconfig all</c> para agregar soporte para el
sistema de archivos correspondiente <e>en</e> el núcleo (<e>no</e>
como módulo). Los usuarios de EVMS2 o LVM2 probablemente querrán
añadir también los argumentos <c>--evms2</c> or <c>--lvm2</c>.
</p>

<pre caption="Ejecutar genkernel" >
# <i>genkernel --udev all</i>
</pre>

<p>
Una vez que <c>genkernel</c> haya terminado, un núcleo, un conjunto
completo de módulos y un <e>disco raíz de inicio</e> (initrd) habrán
sido creados. Usaremos el núcleo e initrd para configurar un gestor de
arranque más tarde en este documento. Escribiremos los nombres del
núcleo y de initrd ya que se necesitarán para el archivo de
configuración del gestor de arranque. initrd se iniciará
inmediatamente después del arranque para realizar la autodetección de
hardware (igual que en el CD de instalación) antes que se inicie el
sistema &quot;real&quot;. Nos aseguraremos de escribir también los
parámetros de arranque necesarios, puesto que se requieren para un
arranque correcto con genkernel.
</p>

<pre caption="Verificar los nombres del kernel e initrd creados" >
# <i>ls /boot/kernel* /boot/initrd*</i>
</pre>

<p>
Ahora vamos a dar un paso más para que nuestro sistema sea más
parecido al CD de instalación, vamos a instalar
<c>coldplug</c>. Mientras initrd autodetecta el hardware necesario
para arrancar el sistema, <c>coldplug</c> autodetecta todo lo
demás. Para instalar y habilitar <c>coldplug</c>, escribiremos lo
siguiente:
</p>

<pre caption="Instalar y habilitar coldplug" >
# <i>emerge coldplug</i>
# <i>rc-update add coldplug boot</i>
</pre>

<p>
Si queremos que el sistema reaccione ante eventos de hotplug (conexión
en caliente), también necesitaremos instalar y configurar
<c>hotplug</c>:
</p>

<pre caption="Instalar y habilitar hotplug" >
# <i>emerge hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>

<p>
Ahora continuaremos con <uri link="?part=1&amp;chap=8" >Configurar el
sistema</uri>.
</p>
</body>
</section>
</sections>
