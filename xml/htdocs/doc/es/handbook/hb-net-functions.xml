<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>1.1</version>
<date>2005-06-14</date>

<section>
<title>Puntos de enlace standard en las funciones</title>
<body>

<p>
Cuatro funciones puedes ser definidas, llamables antes y después de
operación de arranque/parada. Sus nombre se componen usando el nombre
de interfaz primero, para que una función puede controlar múltiples
interfaces.
</p>

<p>
Los valores de retorno de las funciones "preup" y "predown" deben
ser cero (éxito) indicando que la configuración o la
des-configuración de los interfaces pueden continuar. Si "preup"
devuelve un no-cero, se detendrá la configuración del interfaz.  Si
"predown" devuelve un valor no-cero, no se permite que el interfaz
continúe desconfigurándose.
</p>

<p>
Los valores de retorno de las funciones "postup" y "postdown" son
ignorados, ya que no hay nada por hacer si indican algún fallo.
</p>

<p>
<c>${IFACE}</c> es el interfaz que será encendido/apagado,
<c>${IFVAR}</c> es <c>${IFACE}</c> convertido a un nombre de variable
válido según bash.
</p>

<pre caption="Ejemplo de funciones pre/post up/down">
preup() {
	<comment># Comprobación del enlace de la interfaz antes de activarla.
	# Esto solamente funciona con algunos adaptadores de red y necesita 
	# que este instalado el paquete mii-diag.</comment>
	if mii-tool ${IFACE} 2> /dev/null | grep -q 'no link'; then
		ewarn "No link on ${IFACE}, aborting configuration"
		return 1
	fi

	<comment># Comprobación del enlace en la interfaz antes de activarla. 
	# Esto solamente funciona con algunos interfaces de red y necesita 
	# que el paquete ethtool este instalado.</comment>
	if ethtool ${IFACE} | grep -q 'Link detected: no'; then
		ewarn "No link on ${IFACE}, aborting configuration"
		return 1
	fi

	<comment># Recordamos devolver cero si todo fue correcto</comment>
	return 0
}

predown() {
	<comment># Por defecto en el script de inicio se comprueba si 
	# el sistema (root) está montado por NFS y en ese caso no permitir
	# que las interfaces se desactiven. Tenga en cuenta que, si 
	# especifica una función predown() sobreescribirá está regla. 
	# Aquí la tiene en caso de que todavía quiera utilizarla...</comment>
	if is_net_fs /; then
		eerror "root filesystem is network mounted -- can't stop ${IFACE}"
		return 1
	fi

	<comment># Recordamos devolver cero si todo fue correcto</comment>
	return 0
}

postup() {
	<comment># Esta función podría utilizarse, por ejemplo, para 
	# registrarse en un servicio dinámico de DNS. Otra posibilidad 
	# sería enviar un correo cada vez que la interfaz se conecta.</comment>
       return 0
}

postdown() {
	<comment># Esta función está en gran parte por completar ...
	Aún no hemos pensado en nada interesante que pueda hacer ;-)</comment>
	return 0
}
</pre>
</body>
</section>

<section>
<title>Puntos de enlace para las herramientas inalámbricas</title>
<body>

<note>
Esto no funcionará con WPA suplicante - pero las variables
<c>${ESSID}</c> y <c>${ESSIDVAR}</c> están disponibles en la función postup().
</note>

<p>
Se pueden definir dos funciones ejecutables antes y después de la
función asociada referida. Estas funciones se nombran antecediéndole el
nombre del interfaz, de manera que la misma función puede controlar
múltiples interfaces.
</p>

<p>
El valor retornado por la función pre-asociada debe ser 0 (éxito)
para indicar que la configuración o desconfiguración del interfaz
puede continuar. Si la función pre-asociada retorna un valor no-cero,
se interrumpirá la configuración del interfaz.
</p>

<p>
El valor retornado por la función post-asociada se ignora, ya que no
hay nada que hacer si llegase a indicarse una falla.
</p>

<p>
Al <c>${ESSID}</c> se le asigna el ESSID exacto del PA al cual se está
conectando ya que <c>${ESSIDVAR}</c> es <c>${ESSID}</c>, convertido a
un nombre de una variable permitido por bash.
</p>

<pre caption="Funciones pre/post asociación">
preassociate() {
	<comment># A continuación se agregan 2 variables
	# de configuración leap_user_ESSID y leap_pass_ESSID. Cuando
	# ambos esten configurados para el ESSID al que se conectan,
	# corremos el guión LEAP de CISCO.</comment>

	local user pass
	eval user=\"\$\{leap_user_${ESSIDVAR}\}\"
	eval pass=\"\$\{leap_pass_${ESSIDVAR}\}\"

	if [[ -n ${user} &amp;&amp; -n ${pass} ]]; then
		if [[ ! -x /opt/cisco/bin/leapscript ]]; then
			eend "For LEAP support, please emerge net-misc/cisco-aironet-client-utils"
			return 1
		fi
		einfo "Waiting for LEAP Authentication on \"${ESSID//\\\\//}\""
		if /opt/cisco/bin/leapscript ${user} ${pass} | grep -q 'Login incorrect'; then
			ewarn "Login Failed for ${user}"
			return 1
		fi
	fi

	return 0
}

postassociate() {
	<comment># Esta función existe mayormente para completar ...
	# aunque no he pensado en algo interesante para hacer acá
        # todavía ;-)</comment>

	return 0
}
</pre>

<note>
Las variables <c>${ESSID}</c> y <c>${ESSIDVAR}</c> no están
disponibles en las funciones predown() y postdown().
</note>
</body>
</section>
</sections>
