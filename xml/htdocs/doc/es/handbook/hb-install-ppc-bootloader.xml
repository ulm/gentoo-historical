<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/handbook/hb-install-ppc-bootloader.xml,v 1.15 2008/07/24 21:43:22 chiguire Exp $ -->

<sections>

<version>9.1</version>
<date>2008-05-02</date>

<section>
<title>Realizando su elección</title>
<subsection>
<title>Introducción</title>
<body>

<p>
Ahora que su núcleo está configurado y compilado se necesita un
<e>gestor de arranque</e> para poder iniciar su nueva instalación de
linux.  El <e>gestor de arranque</e> dependerá del tipo de máquina PPC
que tenga.
</p>

<p>
Si usa una máquina IBM o Apple NewWorld, necesita <uri link="#yaboot"
>yaboot</uri>. Las máquinas Apple OldWorld tienen dos opciones, <uri
link="#bootx" >BootX</uri> (recomendado) y <uri
link="#quik">quik</uri>. Las Pegasos no requieren gestor de arranque,
pero debemos instalar <uri link="#bootcreator">bootcreator</uri> para
crear un menú de inicio SmartFirmware.
</p>
</body>
</subsection>
</section>

<section id="yaboot">
<title>Predeterminado: Yaboot</title>
<subsection>
<title>Introducción</title>
<body>

<impo>
¡yaboot sólo puede usarse en sistemas NewWorld Apple o IBM!
</impo>

<p>
Para encontrar los dispositivos de arranque yaboot necesita acceder a
los nodos de dispositivo creados por udev durante el arranque y al
sistema de ficheros sysfs. Esos dos sistemas de ficheros se encuentran
respectivamente en <path>/dev</path> y <path>/sys</path>. Para hacer
esto, necesitaremos re-montar con bind esos sistemas de ficheros en el
directorio root del CD de instalación a los puntos de montaje
<path>/dev</path> y <path>/sys</path> dentro del entorno de chroot. Si
ya lo hemos hecho no es necesario volver a hacerlo.
</p>

<pre caption="Re-montando con bind los archivos de dispositivos y sysfs">
# <i>exit </i> # para salir del chroot
# <i>mount -o bind /dev /mnt/gentoo/dev</i>
# <i>mount -o bind /sys /mnt/gentoo/sys</i>
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>/usr/sbin/env-update &amp;&amp; source /etc/profile </i>
</pre>

<p>
Para configurar yaboot, puede usar <c>yabootconfig</c> para que se
cree automáticamente un fichero de configuración. Si estamos
instalando Gentoo en un G5 (donde <c>yabootconfig</c> no siempre
funciona), o pensamos arrancar desde firewire o USB, debemos
configurarlo manualmente.
</p>

<note>
Necesitarás editar el fichero yaboot.conf cuando uses genkernel, incluso
habiendo utilizado yabootconfig. La sección de la imagen del núcleo de
yaboot.conf deberá ser modificada así (usando vmlinux e initrd como los
nombres del núcleo y de la imagen initrd):
</note>

<pre caption="Añadiendo los argumentos de genkernel a yaboot.conf">
<comment>
###########################################################
## Esta sección se puede duplicar si tenemos más de un
## núcleo o conjunto de opciones de arranque - reemplazaremos la imagen
## y el initrd con el nombre exacto del fichero del núcleo
## y de la imagen initrd.
###########################################################
</comment>
image=/boot/kernel-genkernel-ppc-<keyval id="kernel-gentoo"/>
 label=Linux
 root=/dev/ram0
 partition=3
 initrd=/boot/initramfs-genkernel-ppc-<keyval id="kernel-gentoo"/>
 <comment>
 # Podemos añadir argumentos adicionales al núcleo como por ejemplo
 # rootdelay=10 para un arranque USB/Firewire
 </comment>
 append="real_root=/dev/sda3 init=/linuxrc"
 read-only
 <comment>##########################################################</comment>
</pre>

<ul>
  <li>
      <uri link="#yabootconfig" >Predeterminado: yabootconfig</uri>
  </li>
  <li>
     <uri link="#manual_yaboot">Alternativa: Configuración manual de yaboot</uri>
  </li>
</ul>
</body>
</subsection>

<subsection id="yabootconfig">
<title>Por defecto: yabootconfig</title>
<body>

<p>
<c>yabootconfig</c> autodetectará las particiones en nuestra máquina y
configurará un arranque múltiple con Linux, Mac OS y Mac OS X.
</p>

<p>
Para usar <c>yabootconfig</c>, el disco debe tener una partición
Apple_Bootstrap, y <path>/etc/fstab</path> debe estar configurado
reflejando nuestras particiones Linux (notemos que la partición
Bootstrap <e>no</e> debe estar en el fstab). Estos pasos deben haberse
satisfecho ya anteriormente, pero deberíamos revisar
<path>/etc/fstab</path> antes de continuar. Ahora, instalaremos
<c>yaboot</c>.
</p>

<pre caption = "Instalando yaboot">
# <i>emerge yaboot</i>
</pre>

<p>
Ahora saldremos del chroot y ejecutaremos <c>yabootconfig --chroot
/mnt/gentoo</c>. Primero, el programa pedirá confirmación de la
ubicación de la partición de bootstrap. Si usaste el esquema de
particionamiento sugerido, la partición de arranque podría ser /dev/hda2.
Pulsaremos <c>Y</c> si lo mostrado es correcto. Si no lo es, comprobaremos
nuestro <path>/etc/fstab</path>. <c>yabootconfig</c> revisará entonces la
configuración del sistema, creará <path>/etc/yaboot.conf</path> y
ejecutará <c>mkofboot</c>. <c>mkofboot</c> se utiliza para formatear la
partición Apple_Bootstrap, e instalar allí el fichero de configuración de
yaboot. Después de esto, entraremos en el chroot nuevamente.
</p>

<pre caption="Entrar de nuevo al chroot">
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>/usr/sbin/env-update &amp;&amp; source /etc/profile</i>
</pre>

<p>
Debemos verificar el contenido de <path>/etc/yaboot.conf</path>. Si
lo modificamos (por ejemplo, para indicar el sistema operativo por
defecto) debemos asegurarnos de volver a ejecutar <c>ybin -v</c> para
aplicar los cambios en la partición Apple_Bootstrap. Cada vez que
realicemos un cambio en yaboot.conf, como cuando probamos un nuevo
núcleo, debemos recordar siempre ejecutar <c>ybin -v</c> para
actualizar la partición de bootstrap.
</p>

<p>
Ahora continúe con <uri link="#reboot">Reiniciando el Sistema</uri>.
</p>
</body>
</subsection>
</section>

<section id="manual_yaboot">
<title>Alternativa: Configuración manual de yaboot</title>
<body>

<p>
Primero, instale <c>yaboot</c> en su sistema:
</p>

<pre caption="Instalando yaboot">
# <i>emerge yaboot</i>
</pre>

<p>
A continuación se muestra un ejemplo del archivo
<path>yaboot.conf</path>, pero necesitarás adaptarlo a tus
necesidades. Los usuarios de G5 y los que arranquen de firewire o
USB deben tener cuidado que sus discos sean vistos como discos SCSI
por el núcleo Linux, por lo que necesitaremos cambiar
<path>/dev/hda</path> por <path>/dev/sda</path>.
</p>

<pre caption = "/etc/yaboot.conf">
<comment>
## /etc/yaboot.conf
##
## Más detalles en &quot;man yaboot.conf&quot;. ¡No se deben hacer cambios
## hasta haber consultado el manual!
## Hay más ejemplos de configuración en /usr/share/doc/yaboot/examples.
##
## En un menú de arranque dual, se añadirían una o más de las
## siguientes opciones:
## bsd=/dev/hdaX, macos=/dev/hdaY, macosx=/dev/hdaZ

## La partición de bootstrap:
</comment>

boot=/dev/sda2

<comment>
## ofboot es la forma Open Firmware para especificar la partición de arranque.
## Si no está definido, yaboot falla en los G5 y algunos G4 (a menos que
## se pasen los parámetros necesarios al programa mkofboot/ybin program).
## hd:X significa /dev/sdaX (o /dev/hdaX).
##
## ¡¡Los usuarios de G5 deben descomentar esta línea!!

#ofboot=hd:2

## Los que arranquen desde firewire tener algo como:
# ofboot=fw/node/sbp-2/disk@0:

## Los que arranquen desde USB deben tener algo como::
# ofboot=usb/disk@0:

## hd: es la abreviatura del primer disco duro que ve Open Firmware
</comment>
device=hd:

<comment>
## Los usuarios de Firewire y USB deberán especificar el nombre entero
## del dispositivo OF.
## Se puede encontrar usando ofpath, incluido con yaboot.

# device=fw/node@0001d200e00d0207/sbp-2@c000/disk@0:
</comment>

delay=5
defaultos=macosx
timeout=30
install=/usr/lib/yaboot/yaboot
magicboot=/usr/lib/yaboot/ofboot

<comment>
############################################################
## Esta sección puede duplicarse si tiene más de un núcleo o
## conjunto de opciones de arranque - reemplazaremos la variable
## imagen con el nombre exacto de nuestro núcleo.
###########################################################
</comment>
image=/boot/<keyval id="kernel-name"/>
  label=Linux
  root=/dev/sda3
  partition=3
  <comment>
  #  append="rootdelay=10"  # Necesario para arrancar desde USB/Firewire
  </comment>
  read-only
<comment>
##################
## Los usuarios de G5 y algunos de G4 deben indicar
##   macos=hd:13/
##   macosx=hd:12
## en lugar de los valores de ejemplo.
</comment>
macos=/dev/sda13
macosx=/dev/sda12
enablecdboot
enableofboot
</pre>

<p>
Una vez que <path>yaboot.conf</path> esté configurado, ejecutaremos
<c>mkofboot -v</c> para formatear la partición Apple_bootstrap e
instalar las configuraciones. Si cambiamos yaboot.conf después de que
la partición Apple_bootstrap haya sido creada, se debe actualizar la
configuración ejecutando <c>ybin -v</c>.
</p>

<pre caption="Configurando la partición de bootstrap">
# <i>mkofboot -v</i>
</pre>

<p>
Para más información acerca de yaboot, de un vistazo a <uri
link="http://penguinppc.org/bootloaders/yaboot" >yaboot
project</uri>. Ahora continuaremos la instalación con <uri
link="#reboot" >Reiniciando el sistema</uri>.
</p>
</body>
</section>

<section id="bootx">
<title>Alternativa: BootX</title>
<body>

<impo>
¡BootX sólo puede usarse en sistemas Apple e IBM OldWorld con MacOS 9
o una versión anterior!
</impo>

<p>
Debido a que BootX arranca Linux después de MacOS, el núcleo
necesitará ser copiado desde la partición Linux a la partición
MacOS. Primero montaremos la partición MacOS fuera del
chroot. Usaremos <c>mac-fdisk -l</c> para encontrar el número de la
partición MacOS, que en el ejemplo siguiente será sda6. Una vez que la
partición esté montada, copiaremos el núcleo en la carpeta del sistema
donde BootX pueda encontrarlo.
</p>

<pre caption="Copiando el núcleo a la partición MacOS">
# <i>exit</i>
cdimage ~# <i>mkdir /mnt/mac</i>
cdimage ~# <i>mount /dev/sda6 /mnt/mac -t hfs</i>
cdimage ~# <i>cp /mnt/gentoo/usr/src/linux/vmlinux "/mnt/mac/System Folder/Linux Kernels/<keyval id="kernel-name"/>"</i>
</pre>

<p>
Si se usa genkernel, debe copiar tanto el núcleo como el initrd en la
partición MacOS.
</p>

<pre caption="Copiando el núcleo de Genkernel y el initrd a la partición MacOS">
# <i>exit</i>
cdimage ~# <i>mkdir /mnt/mac</i>
cdimage ~# <i>mount /dev/sda6 /mnt/mac -t hfs</i>
cdimage ~# <i>cp /mnt/gentoo/boot/kernel-genkernel-ppc-<keyval id="kernel-gentoo"/> "/mnt/mac/System Folder/Linux Kernels"</i>
cdimage ~# <i>cp /mnt/gentoo/boot/initramfs-genkernel-ppc-<keyval id="kernel-gentoo"/> "/mnt/mac/System Folder"</i>
</pre>

<p>
Ahora que el núcleo ha sido copiado, necesitaremos reiniciar para configurar
BootX.
</p>

<pre caption="Desmontando las particiones y reiniciando">
cdimage ~# <i>cd /</i>
cdimage ~# <i>umount /mnt/gentoo/proc /mnt/gentoo/dev /mnt/gentoo/sys /mnt/gentoo /mnt/mac</i>
cdimage ~# <i>reboot</i>
</pre>

<p>
Desde luego, no olvidemos extraer el CD arrancable, de otra manera
el sistema volverá a iniciarse desde el CD.
</p>

<p>
Una vez que la máquina ha arrancado en MacOS, abre el panel de control
de BootX. Si no estamos usando genkernel seleccionaremos
<c>Options</c>, desactivando <c>Use specified RAM disk</c>. Usando
genkernel, nos aseguraremos que el initrd de genkernel está
seleccionado en lugar del initrd del CD de instalación. Si no se usa
genkernel, hay una opción para especificar el disco y la partición
raíz de Linux. La rellenaremos con los valores apropiados.
Dependiendo de la configuración del núcleo probablemente deberemos
aplicar algunos parámetros adicionales de inicio del núcleo.
</p>

<p>
BootX puede ser configurado para arrancar Linux tras el inicio. Si
hace esto, primero verá que su máquina se inicia en MacOS y luego,
durante el proceso de arranque, BootX se cargará e iniciará Linux.
Hay más información disponible en <uri
link="http://penguinppc.org/bootloaders/bootx/" >la página web de Boot
X</uri>.
</p>

<impo>
Debemos asegurarnos de tener soporte para los sistemas de fichero HFS
y HFS+ en el núcleo, en caso contrario, no podremos actualizar o
cambiar el núcleo en la partición MacOS.
</impo>

<p>
Ahora reiniciaremos otra vez cargando Linux, y luego continuaremos con
<uri link="hb-install-finalise.xml" >Finalizando la instalación de
Gentoo</uri>.
</p>
</body>
</section>

<section id="quik">
<title>Alternativa: quik</title>
<body>

<p>
quik permite a los Macs OldWorld arrancar sin MacOS. Sin embargo, no
está bien soportado y tiene algunas peculiaridades. Si tiene opción,
es recomendable usar BootX en su lugar, porque es mucho más confiable
y fácil de configurar que quik.
</p>

<p>
Primero, debemos instalar quik
</p>

<pre caption="Emerge quik">
# <i>emerge quik</i>
</pre>

<p>
A continuación, necesitaremos configurarlo. Editaremos
<path>/etc/quik.conf</path> e indicaremos la imagen del núcleo que
hemos copiado en la partición de arranque.
</p>

<pre caption="Configurando quik.conf">
# Ejemplo de quik.conf
init-message = "Gentoo 2008.0\n"
<comment>
# Esta es la partición de boot
</comment>
partition = 2
root = /dev/sda4
timeout = 30
default = gentoo
<comment>
# Este es tu núcleo
</comment>
image = /<keyval id="kernel-name"/>
  label = gentoo
</pre>

<p>
El fichero quik.conf <e>debe</e> estar en el mismo disco que las
imágenes de arranque quik, sin embargo puede estar en una partición
diferente del mismo, a pesar de esto es recomendable tenerlo en la
partición de arranque.
</p>

<pre caption="Moviendo quik.conf a /boot">
# <i>mv /etc/quik.conf /boot/quik.conf</i>
</pre>

<p>
Necesitaremos ahora indicar las variables de arranque que cargará quik
al inicio. Para hacerlo, usaremos un programa llamado
<c>nvsetenv</c>. Las variables que hay que configurar cambian de una
máquina a otra, por lo que es mejor buscar primero nuestra máquina en
<uri
link="http://penguinppc.org/bootloaders/quik/quirks.php">quirks</uri>
antes de intentar esto.
</p>

<pre caption="Configurando las variables de arranque">
# <i>nvsetenv auto-boot true</i>
<comment>
# Establezca a false si quiere arrancar en OF, no todos los modelos muestran los mensajes de OF
</comment>
# <i>nvsetenv output-device video</i>
<comment>
# Mire la página de quirks, hay algunas variantes posibles
</comment>
# <i>nvsetenv input-device kbd</i>
# <i>nvsetenv boot-device scsi/sd@1:0</i> <comment># Para SCSI</comment>
# <i>nvsetenv boot-device ata/ata-disk@0:0</i> <comment># Para ATA</comment>
# <i>nvsetenv boot-file /boot/<keyval id="kernel-name"/> root=/dev/hda4</i>
<comment>
# El primer ítem es la ruta al núcleo, el segundo es la partición raíz.
# Se pueden añadir las opciones del núcleo al final de esta línea.
</comment>
# <i>nvsetenv boot-command boot</i>
<comment>
# Establezca esta opción para arrancar desde Linux en vez de MacOS
</comment>
</pre>

<note>
También es posible cambiar las variables de arranque desde
MacOS. Dependiendo del modelo, tanto <uri
link="http://penguinppc.org/bootloaders/quik/BootVars.sit.hqx">bootvars</uri>
o <uri
link="ftp://ftp.apple.com/developer/macosxserver/utilities/SystemDisk2.3.1.smi.bin">
Apple System Disk</uri> pueden usarse. Por favor, busque más>
información en la página de quik en quirks.
</note>

<p>
Ahora que hemos configurado la máquina para el arranque, necesitaremos
asegurarnos que las imágenes de arranque están correctamente
instaladas.  Ejecutaremos <c>quik -v -C /boot/quik.conf</c>. Nos
deberá decir que ha instalado el primer "stage QUIK boot block".
</p>

<note>
Si algo no ha ido bien, siempre se puede inicializar la PRAM con los
valores por defecto pulsando <c>command + option + p + r</c> antes de
apagar la máquina. Esto borra los valores establecidos con nvsetenv y
debería permitir arrancar tanto con un disco de inicio MacOS como un
disco de inicio Linux.
</note>

<p>
Ahora, seguiremos con <uri link="#reboot" >Reiniciando el
sistema</uri>.
</p>
</body>
</section>

<section id="bootcreator">
<title>Alternativa: BootCreator</title>
<body>

<impo>
BootCreator creará un bonito menú de arranque SmartFirmware escrito en
Forth para el Pegasos.
</impo>

<p>
Primero nos aseguraremos de tener <c>bootcreator</c> instalado en el
sistema:
</p>

<pre caption = "Instalando bootcreator">
# <i>emerge bootcreator</i>
</pre>

<p>
Ahora copiaremos el fichero <path>/etc/bootmenu.example</path> en
<path>/etc/bootmenu</path> y lo editaremos convenientemente:
</p>

<pre caption = "Editando el fichero de configuración de bootcreator">
# <i>cp /etc/bootmenu.example /etc/bootmenu</i>
# <i>nano -w /etc/bootmenu</i>
</pre>

<p>
A continuación se encuentra un completo fichero de configuración de
<path>/etc/bootmenu</path>. vmlinux e initrd deben cambiarse por los
nombres de núcleo e imagen initrd que estemos utilizando.
</p>

<pre caption="fichero de configuración de bootcreator" >
<comment>
#
# Ejemplo de fichero de configuración para bootcreator 1.1
#
</comment>

[VERSION]
1

[TITLE]
Boot Menu

[SETTINGS]
AbortOnKey = false
Timeout    = 9
Default    = 1

[SECTION]
Local HD -> Morphos      (Normal)
ide:0 boot2.img ramdebug edebugflags="logkprintf"

[SECTION]
Local HD -> Linux (Normal)
ide:0 <keyval id="kernel-name"/> video=radeonfb:1024x768@70 root=/dev/sda3

[SECTION]
Local HD -> Genkernel (Normal)
ide:0 kernel-genkernel-ppc-<keyval id="kernel-gentoo"/> root=/dev/ram0 real_root=/dev/sda3 init=/linuxrc initrd=initramfs-genkernel-ppc<keyval id="kernel-gentoo"/>
</pre>

<p>
Finalmente el <path>bootmenu</path> debe transferirse a Forth y
copiarse a la partición de inicio para que SmartFirmware pueda
leerlo. Sin embargo, deberemos llamar a <c>bootcreator</c>:
</p>

<pre caption = "Instalando el bootmenu">
# <i>bootcreator /etc/bootmenu /boot/menu</i>
</pre>

<note>
Durante el siguiente reinicio nos aseguraremos de revisar en la
configuración de SmartFirmware que <path>menu</path> es el fichero que
se cargará por defecto.
</note>

<p>
Por el momento, continuaremos con la instalación en
<uri link="#reboot">Reiniciando el sistema</uri>.
</p>
</body>
</section>

<section id="reboot">
<title>Reiniciando el sistema</title>
<subsection>
<body>

<p>
Salimos del entorno chroot y desmontaremos todas las particiones que
continúen montadas. Luego escriba el comando mágico que estaba
esperando: <c>reboot</c>.
</p>

<pre caption="Saliendo del chroot, desmontando todas las particiones y reiniciando" >
# <i>exit</i>
livecd ~# <i>umount /mnt/gentoo/proc /mnt/gentoo/dev /mnt/gentoo/sys /mnt/gentoo</i>
livecd ~# <i>reboot</i>
</pre>

<p>
Una vez que reiniciado y en nuestra nueva instalación de
Gentoo, acabaremos con <uri link="hb-install-finalise.xml">Finalizando
su instalación de Gentoo</uri>.
</p>
</body>
</subsection>
</section>
</sections>
