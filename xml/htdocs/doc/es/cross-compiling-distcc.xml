<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/cross-compiling-distcc.xml,v 1.4 2013/08/06 18:58:53 nimiux Exp $ -->

<guide redirect="https://wiki.gentoo.org/wiki/Distcc/Cross-Compiling" lang="es">
<title>Guía de compilación cruzada de DistCC</title>

<author title="Autor">
  <mail link="agaffney@gentoo.org">Andrew Gaffney</mail>
</author>

<author title="Editor">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>

<author title="Traductor">
  <mail link="chiguire@gentoo.org">John Christian Stoddart</mail>
</author>

<abstract>
Esta guía enseña cómo configurar distcc para realizar compilaciones cruzadas
a través de distintas arquitecturas de procesador.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.3</version>
<date>2006-02-17</date>

<chapter>
<title>Compilación cruzada con distcc</title>
<section>
<title>Introducción</title>
<body>

<p>
<c>distcc</c> es una herramienta que permite compartir la carga de
compilación de software entre varios computadores en una red. Mientras
todos los computadores usen las mismas herramientas de sistema
(toolchain) construidas para la misma arquitectura o procesador no
hace falta ninguna configuración especial para <c>distcc</c>. Pero
¿qué hacer si necesita compilar para una arquitectura diferente usando
computadores diferentes? Esta guía enseñará cómo configurar
<c>distcc</c> para compilar para diferentes arquitecturas.
</p>

</body>
</section>

<section>
<title>Instale las herramientas necesarias</title>
<body>

<p>
Primero debe hacer emerge <c>crossdev</c> en cada uno de los
equipos involucrados en el proceso de compilación. <c>crossdev</c>
es una herramienta que hace más fácil la construcción de herramientas de
sistema para arquitecturas en forma cruzada. Fue escrito originalmente
por <mail link="kumba@gentoo.org">Joshua Kinard</mail> y fue
re-escrito completamente por <mail link="vapier@gentoo.org">Mike
Frysinger</mail>. Su uso es sencillo: <c>crossdev -t sparc</c>
construirá un conjunto de herramientas de sistema cruzado para la
arquitectura sparc. Esto incluye binutils, gcc, glibc y
linux-headers. Si necesita más ayuda, intente ejecutar <c>crossdev
--help</c>.  Obviamente, solo necesitará hacer emerge al conjunto de
herramientas del sistema cruzado adecuado en los equipos que asisten a
la compilación.
</p>

<p>
A continuación, debe hacer emerge <c>distcc</c> en todos los equipos
involucrados en la compilación compartida. Esto incluye el equipo que
ejecutará el emerge y los computadores con los compiladores
cruzados. Por favor vea la <uri
link="/doc/es/distcc.xml">documentación Gentoo distcc</uri> para más
información acerca de la configuración y uso de <c>distcc</c>.
</p>

</body>
</section>

<section>
<title>Notas específicas por arquitectura</title>
<body>

<p>
Si está haciendo una compilación cruzada entre distintas
subarquitecturas para Intel x86 (por ejemplo, i586 e i686), debe
construir el conjunto de herramientas de sistema cruzado para el CHOST
requerido o sino fallará la compilación. Esto es porque el i586 y el
i686 son CHOSTs diferentes a pesar que ambos son considerados "x86."
Por favor tome esto en cuenta al construir sus herramientas de sistema
cruzado. Por ejemplo, si el sistema objetivo es i586, tiene que
construir las herramientas de sistema cruzado en los equipos i686
coadyuvantes.
</p>

</body>
</section>

<section>
<title>Configurando distcc para compilaciones cruzadas correctas</title>
<body>

<p>
En la configuración por defecto de distcc, la compilación cruzada
<e>no</e> funcionará correctamente. El problema es que muchos paquetes
solo llaman <c>gcc</c> en vez de usar el nombre completo (por ejemplo,
<c>sparc-unknown-linux-gnu-gcc</c>). Cuando esta tarea de compilación
se distribuye a un equipo coadyuvante, este es pasado al compilador
nativo y no al compilador cruzado.
</p>

<p>
Afortunadamente existe una solución para este pequeño problema. Lo
único que se requiere es un guión tipo envoltorio y algunos enlaces
simbólicos en el equipo que hace el <c>emerge</c>. Usaré mi equipo
Sparc como ejemplo. Donde quiera que vea <c>sparc-unknown-linux-gnu</c>
a continuación, sustitúyalo por su propio CHOST (por ejemplo,
<c>x86_64-pc-linux-gnu</c> para un equipo AMD64). Al hacer emerge
distcc inicialmente, el directorio <path>/usr/lib/distcc/bin</path>
será así:
</p>

<note>
Las siguientes instrucciones son solamente para el equipo que corre el
emerge. No las ejecute en los equipos coadyuvantes.
</note>

<pre caption="Compiladores disponibles">
# <i>cd /usr/lib/distcc/bin</i>
# <i>ls -l</i>
total 0
lrwxrwxrwx  1 root root 15 Dec 23 20:13 c++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 cc -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 g++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 gcc -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-c++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-g++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-gcc -&gt; /usr/bin/distcc
</pre>

<p>
A continuación lo que debemos hacer:
</p>

<pre caption="Modificando nuestro distcc">
# <i>rm c++ g++ gcc cc</i>
</pre>

<p>
A continuación crearemos un guión nuevo para este computador. Use su
editor de texto y cree un archivo con el siguiente texto, luego
sálvelo como <path>sparc-unknown-linux-gnu-wrapper</path>. Recuerde
cambiar el CHOST (en est caso <c>sparc-unknown-linux-gnu</c>) al CHOST
del equipo que correrá el emerge.
</p>

<pre caption="El nuevo guión envoltorio">
#!/bin/bash
exec /usr/lib/distcc/bin/sparc-unknown-linux-gnu-g${0:$[-2]} "$@"
</pre>

<p>
Luego, haremos que el guión sea ejecutable y crearemos los enlaces
simbólicos adecuados:
</p>

<pre caption="Creando los enlaces sinbólicos">
# <i>chmod a+x sparc-unknown-linux-gnu-wrapper</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper cc</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper gcc</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper g++</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper c++</i>
</pre>

<p>
Al terminar, el directorio <path>/usr/lib/distcc/bin</path> se verá
así:
</p>

<pre caption="Como debe ser nuestro conjunto de compiladores">
# <i>ls -l</i>
total 4
lrwxrwxrwx  1 root root 25 Jan 18 14:20 c++ -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 cc -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 g++ -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 gcc -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-c++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-g++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Jul 27 10:52 sparc-unknown-linux-gnu-gcc -&gt; /usr/bin/distcc
-rwxr-xr-x  1 root root 70 Jan 18 14:20 sparc-unknown-linux-gnu-wrapper
</pre>

<p>
¡Felicitaciones! Ahora tiene (esperemos que sí, de veras) el esquema de
compilación cruzada funcionando correctamente.
</p>

</body>
</section>

<section>
<title>¿Cómo funciona todo esto?</title>
<body>

<p>
Cuando llamamos a <c>distcc</c>, este programa revisa cómo fue llamado
(por ejemplo, como <c>i686-pc-linux-gnu-gcc</c>,
<c>sparc-unknown-linux-gnu-g++</c>, etc.). Entonces, cuando distcc
distribuya la tarea de compilación a un equipo coadyuvante, pasa
también el mismo nombre con el que fue llamado. El demonio distcc en
el equipo coadyuvante buscará un binario con el mismo nombre. Si solo
ve un <c>gcc</c>, buscará un <c>gcc</c>, que probablemente será el
compilador nativo en el equipo coadyuvante si la arquitectura no es
igual que el equipo que corre el <c>emerge</c>. Cuando pasamos el
nombre <e>completo</e> del compilador (como por ejemplo
<c>sparc-unknown-linux-gnu-gcc</c>), entonces no habrá confusión.
</p>

</body>
</section>
</chapter>
</guide>
