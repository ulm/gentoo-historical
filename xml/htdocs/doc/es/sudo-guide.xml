<?xml version='1.0' encoding="UTF-8"?>

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/sudo-guide.xml,v 1.3 2006/06/04 19:19:39 yoswink Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/es/sudo-guide.xml" lang="es">
<title>Guía de Sudo(ers) de Gentoo</title>

<author title="Author">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Traductor">
  <mail link="enrique@barbeito.org">Enrique Barbeito García</mail>
</author>

<abstract>
Cuando quiera que varias personas realicen ciertos movimientos administrativos
en su sistema pero sin concederles un acceso total, el uso de sudo es la mejor
opción. Con sudo puede controlar quién puede hacer según qué. Esta guía le
proporciona una pequeña introducción a esta maravillosa herramienta.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.5</version>
<date>2005-12-31</date>

<chapter>
<title>Acerca de Sudo</title>
<section>
<title>Otorgar permisos</title>
<body>

<p>
El paquete <c>app-admin/sudo</c> permite al administrador del sistema otorgar
permiso a otros usuarios para ejecutar una o más aplicaciones con las que,
normalmente, no tendrían permisos. A diferencia de usar el bit <e>setuid</e> en
estas aplicaciones, <c>sudo</c> proporciona una buena pizca de control en
<e>quién</e> puede, y <e>cuándo</e>, ejecutar un determinado comando.
</p>

<p>
Con <c>sudo</c> puede hacer una completa lista de <e>quién</e> puede ejecutar
una determinada aplicación. Si estableciera el bit setuid, cualquier usuario
sería capaz de ejecutar la aplicación (o cualquier usuario de un grupo en
concreto, dependiendo de los permisos empleados). Puede (e incluso debería)
exigir al usuario que proporcione una contraseña cuando éste quiera ejecutar la
aplicación, y hasta puede afinar mejor los permisos basados en la localización
del usuario: conectado desde el propio sistema o a través de SSH, desde un
sitio remoto.
</p>

</body>
</section>
<section>
<title>Actividad del registro</title>
<body>

<p>
Una de las ventajas adicionales de <c>sudo</c> es que registra cualquier
intento (satisfactorio o no) de ejecución. Esto es de gran utilidad si le
quiere seguir la pista al que hizo ese error fatal que le llevó diez horas
arreglar :)
</p>

</body>
</section>
<section>
<title>Configurar Sudo</title>
<body>

<p>
La configuración de <c>sudo</c> la gestiona el fichero
<path>/etc/sudoers</path>. Éste nunca debe ser editado a través de
<c>nano&nbsp;/etc/sudoers</c> o <c>vim&nbsp;/etc/sudoers</c> o cualquier otro
editor preferido. Cuando desee modificar este fichero, tendrá que utilizar
<c>visudo</c>.
</p>

<p>
Esta herramienta asegura que no hayan 2 administradores del sistema editando el
fichero al mismo tiempo, conserva sus permisos y realiza comprobaciones de
sintaxis para cerciorarse de que no se cometan errores fatales en el fichero.
</p>

</body>
</section>
<section>
<title>Acerca de esta guía</title>
<body>

<p>
Esta guía pretende ser una introducción rápida. El paquete <c>sudo</c> es mucho
más potente que lo que aquí se describe. Tiene características especiales para
la edición de ficheros como un usuario distinto (<c>sudoedit</c>), ejecutarse
desde un script (por lo que puede estar en segundo plano, leer la contraseña
desde la entrada estándar en vez del teclado, ...), etc.
</p>

<p>
Por favor, lea las páginas de <c>sudo</c> y <c>sudoers</c> del manual para
mayor información.
</p>

</body>
</section>
</chapter>

<chapter>
<title>La sintaxis de Sudoers</title>
<section>
<title>Sintaxis básica</title>
<body>

<p>
La parte más difícil de <c>sudo</c> es la sintaxis de
<path>/etc/sudoers</path>. La sintaxis básica es la siguiente:
</p>

<pre caption="Sintaxis básica de /etc/sudoers">
user  host = commands
</pre>

<p>
Esta sintaxis le dice a <c>sudo</c> que el usuario, identificado como
<e>user</e> y conectado a través del sistema <e>host</e>, puede ejecutar
cualquiera de los comandos listados en <e>commands</e> como usuario root. Un
ejemplo más real podría ser más clarificador: permitir al usuario <e>swift</e>
ejecutar <c>emerge</c> si está conectado desde el sistema (y no a través de
SSH):
</p>

<pre caption="Ejemplo real de /etc/sudoers">
swift  localhost = /usr/bin/emerge
</pre>

<p>
De todos modos, una <brite>gran advertencia</brite>: no deje que un usuario
ejecute alguna aplicación que pueda permitir incrementar los permisos. Por
ejemplo, permitir que los usuarios ejecuten <c>emerge</c> como root puede en
efecto otorgarles acceso total al sistema, puesto que <c>emerge</c> se puede
modificar para cambiar el comportamiento del sistema de ficheros en beneficio
del usuario. Si no confía en sus usuarios que pueden emplear <c>sudo</c>, no
les conceda ningún derecho.
</p>

<!--
  Wrappers are no real advantage here either, see #71750
-->

<p>
El nombre de usuario también se puede sustituir por un nombre de grupo - en
este caso, debería anteponer el signo <c>%</c> al nombre de grupo. Por ejemplo,
para permitir que cualquiera del grupo <c>wheel</c> ejecute <c>emerge</c>:
</p>

<pre caption="Permitir la ejecución de emerge a los miembros del grupo wheel">
%wheel  localhost = /usr/bin/emerge
</pre>

<p>
Puede ampliar la línea para permitir varios comandos (en lugar de escribir una
por cada comando). Por ejemplo, para permitir al mismo usuario ejecutar como
root no solamente <c>emerge</c> sino también <c>ebuild</c> y
<c>emerge-webrsync</c>:
</p>

<pre caption="Múltiples comandos">
swift  localhost = /usr/bin/emerge, /usr/bin/ebuild, /usr/sbin/emerge-webrsync
</pre>

<p>
Puede incluso especificar un comando preciso y no sólo la herramienta en sí
misma. Esto es útil para restringir el uso de cierta herramienta con un grupo
específico de argumentos. La herramienta <c>sudo</c> también tiene en cuenta el
uso de expresiones regulares.
</p>

<p>
Pongamos esto a prueba:
</p>

<pre caption="Intentar actualizar el sistema mediante sudo">
$ <i>sudo emerge -uDN world</i>

We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.

Password: <comment>(Enter the user password, not root!)</comment>
</pre>

<p>
La contraseña pedida por <c>sudo</c> es la del propio usuario. Esto es para
asegurarse de que ninguna terminal abierta a otros por error sea utilizada con
fines dañinos.
</p>

<p>
Debería saber que <c>sudo</c> no cambia la variable <c>${PATH}</c>: cualquier
comando situado después de <c>sudo</c> es tratado desde <e>su</e> entorno. Si
desea que el usuario ejecute una herramienta ubicada en, por ejemplo,
<path>/sbin</path> éste debería proporcionar a <c>sudo</c> la ruta completa,
algo como:
</p>

<pre caption="Utilizar la ruta completa de una herramienta">
$ <i>sudo /usr/sbin/emerge-webrsync</i>
</pre>

</body>
</section>
<section>
<title>Utilizar alias</title>
<body>

<p>
En entornos más grandes que tengan que dar acceso a todos los usuarios una y
otra vez (o hosts, o comandos) puede ser una impresionante tarea. Para
facilitar la administración de <path>/etc/sudoers</path>, puede definir
<e>alias</e> (accesos directos). El formato para declarar alias es muy
fácil:
</p>

<pre caption="Declarar alias en /etc/sudoers">
Host_Alias hostalias = hostname1, hostname2, ...
User_Alias useralias = user1, user2, ...
Cmnd_Alias cmndalias = command1, command2, ...
</pre>

<p>
Un alias que siempre funciona, en cualquier posición, es <c>ALL</c> (para
distinguir correctamente entre lo que son y no son alias, se recomienda
utilizar mayúsculas para los alias). Como indudablemente pueda haber pensado,
el alias <c>ALL</c> sirve para todas las opciones posibles.
</p>

<p>
Un ejemplo de uso del alias <c>ALL</c> para permitir a <e>cualquier</e> usuario
ejecutar el comando <c>shutdown</c> si está localmente en el sistema:
</p>

<pre caption="Permitir a cualquiera ejecutar shutdown">
ALL  localhost = /sbin/shutdown
</pre>

<p>
Otro ejemplo es permitir al usuario <c>swift</c> ejecutar el comando
<c>emerge</c> como root, ignorando desde dónde haya iniciado sesión:
</p>

<pre caption="Permitir a un usuario ejecutar una aplicación ignorando su localización">
swift   ALL = /usr/bin/emerge
</pre>

<p>
Más interesante es definir un conjunto de usuarios que puedan ejecutar software
administrativo (como por ejemplo <c>emerge</c> y <c>ebuild</c>) en el sistema y
un grupo de administradores que puedan cambiar la contraseña de cualquier
usuario, excepto de la de root:
</p>

<pre caption="Utilizar alias para usuarios y comandos">
User_Alias  <i>SOFTWAREMAINTAINERS</i> = swift, john, danny
User_Alias  <i>PASSWORDMAINTAINERS</i> = swift, sysop
Cmnd_Alias  <i>SOFTWARECOMMANDS</i>    = /usr/bin/emerge, /usr/bin/ebuild
Cmnd_Alias  <i>PASSWORDCOMMANDS</i>    = /usr/bin/passwd [a-zA-Z0-9_-]*, !/usr/bin/passwd root

<i>SOFTWAREMAINTAINERS</i>  localhost = <i>SOFTWARECOMMANDS</i>
<i>PASSWORDMAINTAINERS</i>  localhost = <i>PASSWORDCOMMANDS</i>
</pre>

</body>
</section>
<section>
<title>Ejecución como usuario no root</title>
<body>

<p>
También es posible tener un usuario para ejecutar una aplicación como otro
usuario distinto de root. Esto puede ser muy interesante si ejecuta
aplicaciones como un usuario diferente (por ejemplo, <c>apache</c> para el
servidor web) y desea permitir a ciertos usuarios realizar labores
administrativas (como matar procesos zombi) como ese usuario.
</p>

<p>
En <path>/etc/sudoers</path> añada el/los usuario/s entre
<c>(</c>&nbsp;y&nbsp;<c>)</c> antes del listado de comandos:
</p>

<pre caption="Sintaxis de ejecución como usuario no root">
users  hosts = (run-as) commands
</pre>

<p>
Por ejemplo, para permitir a <c>swift</c> ejecutar la herramienta <c>kill</c>
como usuario <c>apache</c> o <c>gorg</c>:
</p>

<pre caption="Ejemplo de ejecución como usuario no root">
Cmnd_Alias KILL = /bin/kill, /usr/bin/pkill

swift   ALL = (apache, gorg) KILL
</pre>

<p>
Con esta configuración, el usuario puede ejecutar <c>sudo&nbsp;-u</c> para
seleccionar el usuario con el que desea ejecutar la aplicación:
</p>

<pre caption="Ejecutar pkill como usuario de apache">
$ <i>sudo -u apache pkill apache</i>
</pre>

<p>
Mediante la directiva <c>Runas_Alias</c>, puede establecer un alias para el
usuario con el que se va a ejecutar una aplicación. Su uso es idéntico al de
otras directivas <c>_Alias</c> vistas anteriormente.
</p>

</body>
</section>
<section>
<title>Contraseñas y opciones por defecto</title>
<body>

<p>
Por defecto, <c>sudo</c> le pide al usuario que se identifique con su propia
contraseña. Una vez que la introduce, <c>sudo</c> la recuerda
durante cinco minutos dejando al usuario centrarse en sus tareas sin tener que
estar reescribiendo su contraseña cada vez.
</p>

<p>
Esta conducta, por supuesto, se puede cambiar: puede establecer la
directiva <c>Defaults:</c> en <path>/etc/sudoers</path> para cambiar el
comportamiento por defecto para un usuario.
</p>

<p>
Por ejemplo, para cambiar los 5 minutos preestablecidos a 0 (no recordarla
nunca):
</p>

<pre caption="Cambiar el tiempo de expiración">
Defaults:swift  timestamp_timeout=0
</pre>

<p>
La opción <c>-1</c> haría recordar la contraseña permanentemente (hasta
reiniciar el sistema).
</p>

<p>
Una configuración diferente sería exigir la contraseña del usuario con el que
se ejecutaría el comando y no la propia contraseña personal de los usuarios.
Esto se consigue utilizando <c>runaspw</c>. En el ejemplo siguiente, también
fijaremos el número de intentos (cuántas veces puede el usuario reintroducir
una contraseña antes de que <c>sudo</c> falle) a <c>2</c>, en el lugar de los 3
predeterminados:
</p>

<pre caption="Exigir la contraseña de root en vez de la del propio usuario">
Defaults:john   runaspw, passwd_tries=2
</pre>

<p>
Otra característica interesante es mantener definida la variable <c>DISPLAY</c>
de modo que pueda ejecutar herramientas gráficas:
</p>

<pre caption="Mantener viva la variable DISPLAY">
Defaults:john env_keep=DISPLAY
</pre>

<p>
Puede cambiar docenas de opciones predeterminadas mediante la directiva
<c>Defaults:</c>. Dele caña a la página del manual de <c>sudo</c> y busque
por <c>Defaults</c>.
</p>

<p>
Si, no obstante, desea permitirle a un usuario ejecutar un cierto grupo de
comandos sin proporcionar ningún tipo de contraseña, necesita entonces empezar
los comandos con <c>NOPASSWD:</c>, así:
</p>

<pre caption="Permitir que emerge sea ejecutado como root sin pedir contraseña">
swift     localhost = NOPASSWD: /usr/bin/emerge
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Utilizar Sudo</title>
<section>
<title>Listar privilegios</title>
<body>

<p>
Ejecute <c>sudo&nbsp;-l</c> para informarse de cuáles son sus capacidades:
</p>

<pre caption="Listar capacidades">
$ <i>sudo -l</i>
User swift may run the following commands on this host:
    (root)   /usr/libexec/xfsm-shutdown-helper
    (root)   /usr/bin/emerge
    (root)   /usr/bin/passwd [a-zA-Z]*
    (root)   !/usr/bin/passwd root
    (apache) /usr/bin/pkill
    (apache) /bin/kill
</pre>

<p>
Si tiene cualquier comando en <path>/etc/sudoers</path> que no le pida que
introduzca una contraseña, tampoco se le pedirá una contraseña para listar las
entradas. De no ser así, podría ser preguntado por su contraseña si ésta no es
recordada.
</p>

</body>
</section>
<section>
<title>Prolongar el tiempo de expiración de la contraseña</title>
<body>

<p>
Por defecto, si un usuario ha introducido su contraseña para autenticarse ante
<c>sudo</c>, ésta es recordada durante cinco minutos. Si el usuario quiere
prolongar este periodo, puede ejecutar <c>sudo&nbsp;-v</c> para reiniciar la
marca de tiempo de modo que coja otros cinco minutos antes de que <c>sudo</c>
pregunte de nuevo por la contraseña.
</p>

<pre caption="Prolongar el tiempo de expiración de la contraseña">
$ <i>sudo -v</i>
</pre>

<p>
Lo contrario es matar la marca de tiempo usando <c>sudo&nbsp;-k</c>.
</p>

</body>
</section>
</chapter>
</guide>
