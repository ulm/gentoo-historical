<?xml version = '1.0' encoding = 'UTF-8'?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link=" /doc/es/virt-mail-howto.xml" lang="es">

<title>Sistema de correo virtual con postfix</title>

<author title="Autor">
  <mail link="antifa@gentoo.org">Ken Nowack</mail>
</author>
<author title="Autor">
  <mail link="ezra@revoltltd.org">Ezra Gorman</mail>
</author>
<author title="Editor">
  <mail link="klasikahl@gentoo.org">Zack Gilburd</mail>
</author>
<author title="Editor">
  <mail link="seather@scygro.za.net">Scygro</mail>
</author>
<author title="Traductor">
    <mail link="bass@gentoo.org">José Alberto Suárez López</mail>
</author>
<author title="Traductor">
    <mail link="chiguire@gentoo.org">John Christian Stoddart</mail>
 </author>
<author title="Traductor">
    <mail link="yoswink@gentoo.org">José Luis Rivero</mail>
 </author>
<author title="Traductor" >
  <mail link="ferdy@ferdyx.org">Fernando J. Pereda Garcimartín</mail>
</author>
<author title="Traductor">
  <mail link="LinuxBlues@gentoo-es.org">Fernando M. Bueno</mail>
</author>

<abstract>
Este documento describe como crear un sistema de correo virtual basado
en postfix, mysql, courier-imap, y cyrus-sasl.
</abstract> 

<version>1.0.25</version>
<date>2006-01-07</date>
<!--

Contents

I. Introduction
II. Postfix Basics
III. Courier-imap
IV. Cyrus-sasl
V. SSL Certificates for Postfix and Apache
VI. Adding SSL and SASL support to Postfix
VII. MySQL
VIII. Apache and phpMyAdmin
IX. The vmail user
X. Configuring MySQL Authentication and vhosts
XI. Squirrelmail
XII. Mailman
XIII. Content Filtering and Anti-Virus
XIV. Wrap Up
XV. Troubleshooting

-->
<chapter>
<title>Introducción</title>
<section>
<body>

<p>
Para la mayoría de los usuarios de Gentoo, con un simple cliente de
correo y fetchmail bastaría. Sin embargo, si se está hospedando un
dominio en el sistema, se necesitará un MTA (Agente de Transporte de
Correo) de verdad. Y si se están hospedando varios dominios,
definitivamente se necesita algo más robusto para manejar todo el
correo de los usuarios. Este sistema fue diseñado para ser una
elegante solución a este problema.
</p>

<p>
Un sistema de correo virtual tiene que ser capaz de manejar correo de
numerosos dominios con diferentes usuarios sobre una variedad de
interfaces. Esto presenta algunos problemas con los que tendremos que
tratar. Por ejemplo, ¿qué ocurre si dos usuarios en diferentes
dominios quieren usar el mismo nombre de usuario? Si proveemos acceso
imap y smtp-auth, ¿cómo combinamos todos los demonios de autenticación
en un solo sistema? ¿Cómo proporcionar seguridad para los numerosos
componentes que componen el sistema? ¿Cómo lo maneja todo?
</p>

<p>
Este documento muestra cómo configurar un sistema capaz de manejar
correo para todos los dominios que el equipo pueda manejar, soporte de
usuarios virtuales que no necesiten cuentas de shell, que los nombres
sean específicos de cada dominio, que los clientes se puedan
autenticar por web, imap, smtp, y pop3 contra una base de datos,
utilizar ssl para la capa de transporte segura, que tenga una interfaz
web, que pueda manejar listas de correo para cualquiera de los
dominios, y sea controlado por una bonita, central y simple base de
datos mysql.
</p>

<p>
Hay gran variedad de formas para mantener un sistema de correo
virtual. Con tantas opciones, cualquier otra puede ser más adecuada
dependiendo de las necesidades que se tengan. Hay que considerar
investigar <uri>http://www.es.qmail.org/</uri> y
<uri>http://www.exim.org/</uri> para explorar otras opciones.
</p>

<p>
Los siguientes paquetes serán usados en este sistema: apache,
courier-imap, courier-authlib, postfix, mod_php, phpmyadmin,
squirrelmail, cyrus-sasl, mysql, php, y mailman.
</p>

<p>
Hay que asegurarse de activar las siguientes variables USE en
<path>/etc/make.conf</path> antes de compilar los paquetes:
<c>USE="mysql imap libwww maildir sasl ssl"</c>. De otra forma se
necesitarán recompilar cosas para obtener soporte para todos los
protocolos. Además, es una buena idea desactivar cualquier otra
variable que tenga que ver con correo y red, como ipv6.
</p>

<impo>
Esta guía ha sido escrita para postfix-2.0.x. Si se está usando
postfix &lt; 2 algunas de las variables en este documento serán
diferentes. Se recomienda actualizar. Cualquier otro paquete incluido
en esta guía también es sensible a los números de versión. Se aconseja
la lectura de la documentación incluida en los paquetes si se tienen
problemas con el sistema.
</impo>

<impo>
Este documento usa apache-1.3.x. Apache-2 se considera estable en
portage. Pero de cualquier forma hay un cierto número de problemas con
la integración php. Hasta que el soporte php no se considere estable
en apache-2.0.x, esta guía continuará usando la versión 1.3.x.
</impo>

<impo>
Se necesita un nombre de dominio para ejecutar un servidor de correo
público, o al menos un registro MX para un dominio. Lo ideal sería
tener control sobre al menos dos dominios para beneficiarse del nuevo
sistema de correo virtual.
</impo>

<impo>
Hay que asegurarse de que <path>/etc/hostname</path> contiene el
nombre de máquina correcto del servidor de correo. Se puede verificar
el nombre de máquina con <c>hostname</c>. También hay que verificar
que no hay entradas conflictivas en <path>/etc/hosts</path>.
</impo>

<note>
Se recomienda la lectura de este documento completo y la familiaridad
con todos los pasos antes de ponerse a instalarlo. Si se tienen
problemas con alguno de los pasos, puede comprobarse la guía de
problemas frecuentes al final de este documento. También, no todos los
paquetes aquí referenciados son necesarios, esto es para un sistema
muy flexible. Por ejemplo, si no se desea una interfaz web, puede
evitarse la sección de squirrelmail.
</note>
</body>
</section>
</chapter>

<chapter>
<title>Postfix Básico</title>
<section>
<body>
<pre caption="Instalar postfix" >
# <i>emerge postfix</i>
</pre>

<warn>
Hay que verificar que no se ha instalado otro MTA, como ssmtp, exim, o
qmail, o seguro que se tendrán GRANDES problemas.
</warn>

<p>
Tras que postfix sea instalado, es el momento de configurarlo. Vamos a
cambiar las siguientes opciones en <path>/etc/postfix/main.cf</path>:
</p>

<pre caption="/etc/postfix/main.cf">
myhostname = $host.domain.name
mydomain = $domain.name
inet_interfaces = all 
mydestination = $myhostname, localhost.$mydomain $mydomain
mynetworks = my.ip.net.work/24, 127.0.0.0/8
home_mailbox = .maildir/
local_destination_concurrency_limit = 2 
default_destination_concurrency_limit = 10
</pre>

<p>
Lo siguiente es cambiar <path>/etc/postfix/master.cf</path>. Esto
activará que la salida sea detallada para poder depurar:
</p>

<pre caption="/etc/postfix/master.cf">
# service type  private unpriv  chroot  wakeup  maxproc command + args
#               (yes)   (yes)   (yes)   (never) (50)
#
==========================================================================
<comment>(Sólo hay que añadir "-v" después de smtpd a la siguiente línea)</comment>
smtp      inet  n       -       n       -       -       smtpd -v

</pre>

<p>
Lo siguiente es editar <path>/etc/mail/aliases</path> para añadir los
alias locales. Debe haber al menos un alias para root como: <c>root:
your@email.address</c>.
</p>

<pre caption="Iniciando postfix por primera vez" >
# <i>/usr/bin/newaliases</i>
<comment>
(Esto instalará el nuevo alias. Sólo se necesita hacer esto cuando se actualicen o añadan nuevos alias.)
</comment>

# <i>/etc/init.d/postfix start</i>
</pre>

<p>
Ahora que postfix está corriendo, se ejecuta el cliente de correo de
consola y nos enviamos un mensaje. Yo uso <c>mutt</c> para todo mi
email. Comprobamos que postfix está repartiendo el correo a los
usuarios locales, una vez esto esté hecho, pasaremos al siguiente
paso.
</p>

<note>
Recomiendo que se verifique que esta configuración básica de postfix
está funcionando antes de dar el siguiente paso en esta guía.
</note>
</body>
</section>
</chapter>

<chapter>
<title>Courier-imap</title>
<section>
<body>
<pre caption="Instalar courier-imap" >
# <i>emerge courier-imap</i>
</pre>

<pre caption="Configuración de Courier-imap">
# <i>cd /etc/courier-imap</i>
<comment>
(Si se quiere usar ssl para imap y pop, hay que crear certificados para este propósito.
Este paso está recomendado. Si no se quiere ssl, simplemente se puede evitar.)
</comment>

# <i>nano -w /etc/courier-imap/pop3d.cnf</i>
# <i>nano -w /etc/courier-imap/imapd.cnf</i>

<comment>(Se cambian los campos C, ST, L, CN, y email ajustándolos a nuestro caso.)</comment>

# <i>mkpop3dcert</i>
# <i>mkimapdcert</i>
</pre>

<pre caption="Inicie los servicios de courier que necesite." >
# <i>/etc/init.d/courier-imapd start</i>
# <i>/etc/init.d/courier-imapd-ssl start</i>
# <i>/etc/init.d/courier-pop3d start</i>
# <i>/etc/init.d/courier-pop3d-ssl start</i>
</pre>

<p>
Se ejecuta nuestro cliente de correo preferido y se comprueba que
todas las conexiones para mandar y recibir correo funcionan. Ahora que
lo básico funciona, vamos a seguir con el resto del manojo de paquetes
para que el sistema funcione. Y otra vez, hay que comprobar que se ha
instalado todo y que funciona antes de continuar.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Cyrus-sasl</title>
<section>
<body>

<p>
Ahora vamos a instalar cyrus-sasl. Sasl va a hacer la labor de pasar
las variables de autenticación a pam que pasará está información a
mysql para autenticar usuarios de smtp. Para este documento no vamos a
comprobar si sasl funciona hasta que mysql no esté configurado
correctamente con un usuario de prueba; lo que está bien, porque
siempre autenticaremos contra una base de datos mysql.
</p>
			
<pre caption="Configurar e instalar el ebuild cyrus-sasl">
# <i>emerge cyrus-sasl</i>
</pre>

<p>
Ahora, se edita <path>/etc/sasl2/smtpd.conf</path>.
</p>

<pre caption="Iniciar sasl">
# <i>nano -w /etc/sasl2/smtpd.conf</i>
mech_list: PLAIN LOGIN
pwcheck_method: saslauthd
# <i>nano -w /etc/conf.d/saslauthd</i>
SASLAUTHD_OPTS="${SASLAUTH_MECH} -a rimap -r"
SASLAUTHD_OPTS="${SASLAUTHD_OPTS} -O localhost"
# <i>/etc/init.d/saslauthd start</i>
</pre>
</body>
</section>
</chapter>

<chapter>
<title>Certificados SSL para Postfix y Apache</title>
<section>
<body>

<p>
Ahora vamos a hacer los certificados SSL para postfix y apache.
</p>

<pre caption="Certificados ssl">
# <i>cd /etc/ssl/</i>
# <i>nano -w openssl.cnf</i>

<comment>
Hay que ajustar los siguientes valores por defecto para nuestro dominio:
</comment>
countryName_default
stateOrProvinceName_default
localityName_default
0.organizationName_default
commonName_default
emailAddress_default.

<comment>
(Si las variables no están presentes, hay que añadirlas.)
</comment>

# <i>cd misc</i>
# <i>nano -w CA.pl</i>

<comment>
Necesitamos añadir -nodes al # crear un certificado y # crear una
petición de certificado para que nuestros nuevos certificados ssl sean
cargados sin necesidad de una password. De otra forma no se podrán
reiniciar los certificados ssl.
</comment>
			
# crear un certificado
system ("$REQ -new -nodes -x509 -keyout newreq.pem -out newreq.pem $DAYS");

# crear una petición de certificado
system ("$REQ -new -nodes -keyout newreq.pem -out newreq.pem $DAYS");

# <i>./CA.pl -newca</i>
# <i>./CA.pl -newreq</i>
# <i>./CA.pl -sign</i>
# <i>cp newcert.pem /etc/postfix</i>
# <i>cp newreq.pem /etc/postfix</i>
# <i>cp demoCA/cacert.pem /etc/postfix</i>

<comment>Hacemos lo mismo para Apache</comment>

# <i>openssl req -new > new.cert.csr</i>
# <i>openssl rsa -in privkey.pem -out new.cert.key</i>
# <i>openssl x509 -in new.cert.csr -out new.cert.cert -req -signkey new.cert.key -days 365</i>

<comment>
(Por ahora dejamos estos certificados ahí. Los agregaremos después de instalar Apache.)
</comment>
</pre>
</body>
</section>
</chapter>

<chapter>
<title>Añadir a Postfix soporte para SSL y SASL</title>
<section>
<body>

<p>
Ahora se edita el fichero de configuración de Postfix para que utilice
ssl y sasl. Se añaden los siguientes parámetros al final del fichero
para que serán más sencillos de encontrar.
</p>

<pre caption="/etc/postfix/main.cf" >
# <i>nano -w /etc/postfix/main.cf</i>

smtpd_sasl_auth_enable = yes
smtpd_sasl2_auth_enable = yes
smtpd_sasl_security_options = noanonymous
broken_sasl_auth_clients = yes 
smtpd_sasl_local_domain =

<comment>
(Las opciones broken_sasl_auth_clients y login y auth son para outlook y outlook express y no están documentadas. ¿No es fantástico tener que hackear software para estúpidos, rotos, M$ y BS?
smtpd_sasl_local_domain añade un dominio a los clientes que usen smtp-auth. Hay que asegurarse de que está en blanco o los nombres de usuario serán manejados por postfix y estos serán incapaces de autenticarse.
</comment>

smtpd_recipient_restrictions =
	permit_sasl_authenticated,
	permit_mynetworks,
	reject_unath_destination

<comment>(Las siguientes dos opciones activan el cifrado saliente)</comment>
smtp_tls_note_starttls_offer = yes
smtpd_use_tls = yes
#smtpd_tls_auth_only = yes
smtpd_tls_key_file = /etc/postfix/newreq.pem
smtpd_tls_cert_file = /etc/postfix/newcert.pem
smtpd_tls_CAfile = /etc/postfix/cacert.pem
smtpd_tls_loglevel = 3
smtpd_tls_received_header = yes
smtpd_tls_session_cache_timeout = 3600s
tls_random_source = dev:/dev/urandom

<comment>
(smtpd_tls_auth_only está comentado para poder probar el sistema. Se puede habilitar más tarde si se desea.)
</comment>

# <i>postfix reload</i>

</pre>

<p>
Ahora vamos a comprobar que la configuración es aceptada por
postfix.
</p>

<pre caption="Comprobando la configuración de ssl y tls" >
# <i>telnet localhost 25</i>

Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 mail.domain.com ESMTP Postfix
<i>EHLO domain.com</i>
250-mail.domain.com
250-PIPELINING
250-SIZE 10240000
250-VRFY
250-ETRN
250-STARTTLS
250-AUTH LOGIN PLAIN OTP
250-AUTH=LOGIN PLAIN OTP
250-XVERP
250 8BITMIME
<i>^]</i>
telnet> <i>quit</i>
</pre>

<p>
Se comprueba que aparecen las líneas AUTH y STARTTLS. Como dije antes,
tal y como está ahora AUTH no funcionará porque sasl intentará
autenticar contra sasldb en lugar de hacerlo con el shadow, por alguna
extraña razón, que nosotros no hemos configurado. Así que vamos a
instalar mysql para que guarde la información sobre autenticación y la
información de los dominios virtuales.
</p>
</body>
</section>
</chapter>

<chapter>
<title>MySQL</title>
<section>
<body>

<p>
Ahora vamos a instalar y configurar MySQL. Se necesitará el fichero
<uri
link="http://kickasskungfu.com/~ken/genericmailsql.sql">genericmailsql.sql</uri>
para este paso.
</p>

<pre caption="Instalar y configurar MySQL" >
# <i>emerge mysql</i>

# <i>/usr/bin/mysql_install_db</i>

<comment>
Después de este comando hay que seguir los pasos en pantalla para
añadir un password para root en mysql, no mysqladmin, de otra forma la
base de datos estará abierta a todo el mundo.
</comment>

# <i>/etc/init.d/mysql start</i>
# <i>mysqladmin -u root -p create mailsql</i>
# <i>mysql -u root -p --opt mailsql &lt; genericmailsql.sql</i>

# <i>mysql -u root -p mysql</i>
mysql> <i>GRANT SELECT,INSERT,UPDATE,DELETE</i>
	->     <i>ON mailsql.*</i>
	->     <i>TO mailsql@localhost</i>
	->     <i>IDENTIFIED BY '$password';</i>
Query OK, 0 rows affected (0.02 sec)

mysql> <i>FLUSH PRIVILEGES;</i>
Query OK, 0 rows affected (0.00 sec)

mysql> <i>quit</i>

<comment>
(Hay que comprobar que el nuevo usuario (mailsql) puede conectar al servidor de base de datos.)
</comment>

# <i>mysql -u mailsql -p mailsql</i>
</pre>

<p>
La nueva base de datos tiene algunos valores por defecto para dos
dominios. Las siguientes tablas están incluidas:
</p>

<ul>
  <li>alias - información sobre los alias locales y los alias de mailman.</li>
  <li>relocated - mapas de direcciones de correo relocalizadas</li>
  <li>transport - transporte de correo por defecto para todos los dominios que se hospedan</li>
  <li>users - información sobre todos los usuarios</li>
  <li>virtual - información sobre los dominios virtuales</li>
</ul>

<pre caption="Ejemplo de tabla alias" >
id   alias    destination
1    root     foo@bar.com
2  postmaster foo@bar.com
</pre>

<pre caption="Ejemplo de tabla user" >
<comment>
(Línea dividida para una mayor claridad.)
</comment>

id email            clear     name     uid     gid     homedir     \
	maildir                                quota  postfix
10 foo@virt-bar.org $password realname virtid  virtid  /home/vmail \
	/home/vmail/virt-bar.org/foo/.maildir/        y
13 foo@bar.com      $password realname localid localid /home/foo   \
	/home/foo/.maildir/                           y
</pre>

<p>
Los valores del uid y gid en <c>virtid</c> deben ser los del usuario y
el grupo <c>vmail</c>.
</p>

<pre caption="Ejemplo de tabla transport" >
id   domain       destination
1    bar.com      local:
2    virt-bar.org virtual:
</pre>

<pre caption="Ejemplo de tabla virtual" >
id   email            destination
3   root@virt-bar.org other@email.address
</pre>
</body>
</section>
</chapter>

<chapter>
<title>Apache y phpMyAdmin</title>
<section>
<body>

<p>
Ahora vamos a configurar apache y una interfaz para trabajar con la
base de datos.
</p>

<pre caption="Configurar apache y phpmyadmin" >
# <i>emerge apache mod_php mod_ssl phpmyadmin</i>
</pre>

<p>
Hay muchas guías sobre cómo configurar apache con php. Como esta:
<uri>http://www.linuxguruz.org/z.php?id=31</uri>. También hay muchos
mensajes en <uri>http://forums.gentoo.org</uri> con información
detallada sobre problemas comunes en la  instalación (puede buscarse
'apache php'). Así que, no lo cubriremos aquí. Después de instalar y
configurar apache y php, se puede continuar con esta guía. Ahora
crearemos el .htaccess en el directorio que esté phpMyAdmin. Si no se
hace esto, los motores de búsqueda entrarán e indexaran estas páginas
y cualquiera podrá obtener información sobre la base de datos buscando
en google, lo que es <e>¡MALO!</e>. Hay muchas guías acerca de esto,
como por ejemplo:
<uri>http://www.csoft.net/docs/micro/htaccess.html.en</uri>.
</p>

<p>
Ahora vamos a instalar los certificados que hicimos para Apache. Las
directivas de Apache-SSL que se necesitan son las siguientes:
</p>

<ul>
  <li>SSLCertificateFile /path/to/certs/new.cert.cert</li>
  <li>SSLCertificateKeyFile /path/to/certs/new.cert.key</li>
</ul>

<pre caption="Instalar los certificados SSL en Apache" >
# <i>cp /etc/ssl/misc/new.cert.cert /etc/apache/conf/ssl/</i>
# <i>cp /etc/ssl/misc/new.cert.key /etc/apache/conf/ssl/</i>
# <i>nano -w /etc/apache/conf/vhosts/ssl.default-vhost.conf</i>

<comment>
Cambiamos los siguientes parámetros:
</comment>

ServerName host.domain.name
ServerAdmin your@email.address
SSLCertificateFile /etc/apache/conf/ssl/new.cert.cert
SSLCertificateKeyFile /etc/apache/conf/ssl/new.cert.key

# <i>/etc/init.d/apache restart</i>
</pre>

<note>
Si se tiene una instalación previa de Apache, se necesitará reiniciar
completamente el servidor para instalar los nuevos certificados. Hay
que comprobar los logs para verificar que Apache se reinició
satisfactoriamente.
</note>

<p>
Ahora configuremos phpMyAdmin.
</p>

<pre caption="Configurar phpMyAdmin" >
# <i>nano -w /home/httpd/htdocs/phpmyadmin/config.inc.php</i>

<comment>Hay que cambiar los siguientes parámetros</comment>
			
$cfg['Servers'][$i]['host'] = 'localhost';	 	// MySQL hostname
$cfg['Servers'][$i]['controluser'] = 'mailsql';    	// MySQL información del usuario de control
							// (este usuario debe tener acceso de solo
$cfg['Servers'][$i]['controlpass'] = '$password';	// lectura a "mysql/user" y "mysql/db")
$cfg['Servers'][$i]['user'] = 'mailsql';      		// Usuario MySQL
$cfg['Servers'][$i]['password'] = '$password';	 	// Password MySQL
</pre>

<p>
Ahora se accede a la página de phpMyAdmin y navegamos por las
tablas. Podremos añadir los alias locales, editar la tabla de usuarios
para añadir un usuario de prueba, y añadir la información sobre los
dominios. Por defecto, las tablas tienen unos valores que servirán de
guía. Hay que asegurarse de poner la información correcta en la base
de datos. Por ejemplo, hay que asegurarse de que los directorios de
los usuarios locales existen y que tienen los valores uid/gid
correctos. Los maildirs deberían ser creados automáticamente por
postfix cuando el usuario recibe su primer mensaje. Así que, en
general, es una buena idea mandar un mensaje de bienvenida tras crear
los nuevos usuarios de forma que .maildir sea creado.
</p>
</body>
</section>
</chapter>

<chapter>
<title>El usuario vmail</title>
<section>
<body>

<p>
Llegados a este punto uno se pregunta cuál será el usuario bajo el que
funcionen los usuarios virtuales. Así que configuremos eso ahora:
</p>

<pre caption="Añadir el usuario vmail" >
# <i>adduser -d /home/vmail -s /bin/false vmail</i>
# <i>uid=`cat /etc/passwd | grep vmail | cut -f 3 -d :`</i>
# <i>groupadd -g $uid vmail</i>
# <i>mkdir /home/vmail</i>
# <i>chown vmail: /home/maule</i>
</pre>

<p>
Así que, cuando se creen cuentas de correo virtuales, hay que utilizar
el directorio personal y el uid y gid de vmail. Cuando se creen
cuentas locales hay que utilizar los gid, uid, y directorio personal
correspondientes. Estuvimos pensando en crear una página php para
administrar esto, pero aún no lo hemos hecho, dado que phpMyAdmin
funciona muy bien para esto.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Configurar la autenticación MySQL y con dominios virtuales</title>
<section>
<body>

<p>
Ahora vamos a reconfigurar nuestra autenticación para que use la base
de datos mailsql en courier-imap y en postfix. En todos los ejemplos
que siguen, hay que reemplazar <c>$password</c> por la contraseña que
se escogió a la hora de crear el usuario mailsql en MySQL.
</p>

<pre caption="Configurar la autenticación">
# <i>nano -w /etc/courier/authlib/authdaemonrc</i>
authmodulelist="authmysql authpam"

# <i>nano -w /etc/courier/authlib/authmysqlrc</i>
MYSQL_SERVER            localhost
MYSQL_USERNAME          mailsql
MYSQL_PASSWORD          $password
MYSQL_DATABASE          mailsql
MYSQL_USER_TABLE        users
<comment>
(Hay que asegurarse de que la siguiente línea está comentada, dado que usamos sólo texto.)
</comment>
#MYSQL_CRYPT_PWFIELD    crypt
MYSQL_CLEAR_PWFIELD     clear
MYSQL_UID_FIELD         uid
MYSQL_GID_FIELD         gid
MYSQL_LOGIN_FIELD       email
MYSQL_HOME_FIELD        homedir
MYSQL_NAME_FIELD        name
MYSQL_MAILDIR_FIELD     maildir

# <i>/etc/init.d/courier-authlib restart</i>
# <i>/etc/init.d/saslauthd restart</i>
</pre>

<p>
¡Ya casi está! Ahora haremos las configuraciones necesarias para que
postfix interactúe con la base de datos.
</p>

<pre caption="/etc/postfix/mysql-aliases.cf" >
# <i>nano -w /etc/postfix/mysql-aliases.cf</i>
# mysql-aliases.cf

user         	= mailsql
password     	= $password
dbname       	= mailsql
table        	= alias
select_field 	= destination
where_field  	= alias
hosts        	= unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-relocated.cf" >
# <i>nano -w /etc/postfix/mysql-relocated.cf</i>
# mysql-relocated.cf

user         	= mailsql
password     	= $password
dbname       	= mailsql
table        	= relocated
select_field 	= destination
where_field  	= email
hosts        	= unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-transport.cf (opcional)" >
# <i>nano -w /etc/postfix/mysql-transport.cf</i>		
# mysql-transport.cf

user         	= mailsql
password     	= $password
dbname       	= mailsql
table        	= transport
select_field 	= destination
where_field  	= domain
hosts        	= unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-virtual-gid.cf (opcional)" >
# <i>nano -w /etc/postfix/mysql-virtual-gid.cf</i>
# mysql-virtual-gid.cf

user          	= mailsql
password        = $password
dbname        	= mailsql
table           = users
select_field    = gid
where_field     = email
additional_conditions = and postfix = 'y'
hosts         	= unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-virtual-maps.cf" >
# <i>nano -w /etc/postfix/mysql-virtual-maps.cf</i>
# mysql-virtual-maps.cf

user        	= mailsql
password        = $password
dbname          = mailsql
table           = users
select_field    = maildir
where_field   	= email
additional_conditions = and postfix = 'y'
hosts           = unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-virtual-uid.cf (opcional)" >
# <i>nano -w /etc/postfix/mysql-virtual-uid.cf</i>
# mysql-virtual-uid.cf
	
user            = mailsql
password        = $password
dbname          = mailsql
table           = users
select_field    = uid
where_field    	= email
additional_conditions = and postfix = 'y'
hosts           = unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-virtual.cf" >
# <i>nano -w /etc/postfix/mysql-virtual.cf</i>
# mysql-virtual.cf
	
user         	= mailsql
password     	= $password
dbname       	= mailsql
table        	= virtual
select_field 	= destination
where_field  	= email
hosts        	= unix:/var/run/mysqld/mysqld.sock
</pre>

<p>
Por último, hay que editar <path>/etc/postfix/main.cf</path> una vez
más.
</p>

<pre caption="/etc/postfix/main.cf" >
# <i>nano -w /etc/postfix/main.cf</i>

alias_maps = mysql:/etc/postfix/mysql-aliases.cf
relocated_maps = mysql:/etc/postfix/mysql-relocated.cf

local_transport = local
local_recipient_maps = $alias_maps $virtual_mailbox_maps unix:passwd.byname

virtual_transport = virtual
virtual_mailbox_domains =
	virt-bar.com,
	$other-virtual-domain.com

virtual_minimum_uid = 1000
virtual_gid_maps = static:$vmail-gid
virtual_mailbox_maps = mysql:/etc/postfix/mysql-virtual-maps.cf
virtual_alias_maps = mysql:/etc/postfix/mysql-virtual.cf
virtual_uid_maps = static:$vmail-uid
virtual_mailbox_base = /
#virtual_mailbox_limit =
</pre>

<p>
Por razones de seguridad es necesario cambiar los permisos de todos
los <path>/etc/mail/mysql-*.cf</path>:
</p>

<pre caption="Cambiar los permisos de los archivos">
# <i>chmod 640 /etc/postfix/mysql-*.cf</i>
# <i>chgrp postfix /etc/postfix/mysql-*.cf</i>
</pre>

<p>
En Postfix 2.0.x, hay cambios significativos desde 1.1.x. Destacando
que las tablas transport, virtual-gid y virtual-uid no son
necesarias. Las tablas aún se incluyen, por si se quieren usar.
</p>

<note>
Se recomienda la lectura de VIRTUAL_README incluido en la
documentación de postfix para más información.
</note>

<pre caption="Hacer a postfix recargar sus tablas">
# <i>postfix reload</i>
</pre>

<p>
Ahora, si todo ha ido bien, se debería tener el sistema
funcionando. Los usuarios serán capaces de autenticarse contra la base
de datos sql, usando su dirección de email completa, para pop3, imap,
y smtp. Se recomienda comprobar que todo funciona correctamente en
este momento. Si se tienen problemas, siempre puede comprobarse la
sección de problemas frecuentes en esta guía.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Squirrelmail</title>
<section>
<body>

<pre caption="Instalar squirrelmail">
# <i>emerge squirrelmail</i>

<comment>
(Si se instala squirrelmail hacia localhost, puede accederse al mismo con http://localhost/mail)
(Hay que sustituir 1.4.3a-r2 con la versión que se use)
</comment>

# <i>webapp-config -I -h localhost -d /mail squirrelmail 1.4.3a-r2</i>
# <i>cd /var/www/localhost/htdocs/mail/config</i>
# <i>perl ./conf.pl</i>

<comment>
(Hay que cambiar las opciones de la Organización, Servidor y
Directorio en squirrelmail. Ahora se debería poder conectar a
squirrelmail, con la dirección de correo completa, y utilizar el nuevo
sistema de webmail).
</comment>
</pre>
</body>
</section>
</chapter>

<chapter>
<title>Mailman</title>
<section>
<body>

<p>
Último paso: mailman. La nueva versión de mailman tiene una buena
interfaz para soportar dominios virtuales, que es por lo que lo uso, y
sin mencionar que es un muy buen paquete. Para instalar este paquete y
hacer que funcione bien con dominios virtuales vamos a necesitar un
poco de hacking. Yo recomiendo leer toda la documentación de mailman,
incluyendo README.POSTFIX.gz, para entender qué se está haciendo aquí.
</p>

<p>
Otra nota más, las versiones actuales de mailman se instalan en
/usr/local/mailman. Si, como yo, se quiere cambiar la localización de
la instalación, se puede modificar el ebuild, cambiando la variable
INSTALLDIR.
</p>

<pre caption="Instalar mailman">
# <i>emerge mailman</i>

<comment>
(Este paquete también está enmascarado, así que se necesita
desenmascararlo o proporcionar a emerge la ruta al ebuild. Una vez
esté instalado, hay que seguir las directrices descritas en
README.gentoo.gz *exceptuando* no añadir los alias a
/etc/mail/aliases. Vamos a enlazar toda la base de datos de alias en
postfix).
</comment>

# <i>zless /usr/share/doc/mailman-$ver/README.gentoo.gz</i>
</pre>

<pre caption="Configurando valores por defecto: Mailman/Defaults.py">
# <i> nano -w /var/mailman/Mailman/Defaults.py</i>
<comment>
(Hay que cambiar los valores a continuación para reflejar el dominio primario, configuraremos los virtuales después.)
</comment>

DEFAULT_EMAIL_HOST = 'domain.com'
DEFAULT_URL_HOST = 'www.domain.com'
</pre>

<pre caption="configuración de mailman: mm_cfg.py">
# <i>nano -w /usr/local/mailman/Mailman/mm_cfg.py</i>
MTA = "Postfix"
POSTFIX_STYLE_VIRTUAL_DOMAINS = ['virt-domain.com', 'virt.domain2.com']	
add_virtualhost('www.virt.domain.com', 'virt.domain.com')
add_virtualhost('www.virt.domain2.com', 'virt.domain2.com')
<comment>
(Esto es necesario para que funcionen los dominios virtuales.)
</comment>
</pre>

<pre caption="Y por último, aunque no lo último">
<comment>
(Cuando se haya terminado, añadiremos la primera lista.)
</comment>

# <i>su mailman</i>
# <i>cd ~</i>
# <i>bin/newlist test</i>
Enter the email of the person running the list: <i>your@email.address</i>
Initial test password:
Hit enter to continue with test owner notification...
<comment>
(Las listas de dominios virtuales tendrán que ser especificadas con el formato lista@dominio.com para el nombre de la lista.)
</comment>

# <i>bin/genaliases</i>
<comment>
(Ahora que los alias han sido regenerados, hay que verificar que han sido añadidos correctamente.)
</comment>

# <i>nano -w data/aliases</i>
# STANZA START: test
# CREATED:
test:             "|/var/mailman/mail/mailman post test"
test-admin:       "|/var/mailman/mail/mailman admin test"
test-bounces:     "|/var/mailman/mail/mailman bounces test"
test-confirm:     "|/var/mailman/mail/mailman confirm test"
test-join:        "|/var/mailman/mail/mailman join test"
test-leave:       "|/var/mailman/mail/mailman leave test"
test-owner:       "|/var/mailman/mail/mailman owner test"
test-request:     "|/var/mailman/mail/mailman request test"
test-subscribe:   "|/var/mailman/mail/mailman subscribe test"
test-unsubscribe: "|/var/mailman/mail/mailman unsubscribe test"
# STANZA END: test

# <i>/etc/init.d/mailman start</i>
# <i>rc-update add mailman default</i>
<comment>
(Hay que utilizar este comando para iniciar mailman en cada reinicio.)
</comment>
</pre>

<pre caption="Añadir soporte de alias mailman en postfix">
# <i>nano -w /etc/postfix/main.cf</i>
owner_request_special = no
recipient_delimiter = +
<comment>
(Puede leerse README.POSTFIX.gz para más detalles.)
</comment>

alias_maps     =
	hash:/var/mailman/data/aliases,
	mysql:/etc/postfix/mysql-aliases.cf

virtual_alias_maps =
	hash:/var/mailman/data/virtual-mailman,
	mysql:/etc/postfix/mysql-virtual.cf
<comment>
(Esto añade el fichero de alias de mailman a postfix. Se pueden
utilizar tablas de MySQL para esto, pero odio hacer esto a
mano. Además, si no se están usando dominios virtuales, añadir los
mapas de dominios virtuales a postfix causará problemas, avisado).
</comment>
</pre>

<p>
Ahora se deberían poder configurar listas de correo para cualquier
dominio en la máquina. Como última nota sobre el asunto, hay que
asegurarse de que se ejecutan todos los comandos de mailman con el
usuario mailman (<c>su mailman</c>) o los permisos serán erróneos y
habrá que corregirlos. Hay que leer la documentación de mailman para
más información sobre cómo configurar y manejar listas de correo con
mailman.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Filtrando el contenido y Anti-Virus</title>
<section>
<body>

<p>
Para filtrado de contenido y anti-virus, se puede consultar la <uri
link="/doc/es/mailfilter-guide.xml">Guía Gentoo para el filtrado de
correo</uri>.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Todo en uno</title>
<section>
<body>

<p>
Ok, ya está todo, editamos <path>/etc/postfix/master.cf</path> y
quitamos el modo detallado (verbose) para el uso en
producción. Probablemente se quieran añadir los servicios al arranque
del sistema para que se inicien cada vez que se reinicie el
servidor. Hay que asegurarse de añadir todos los paquetes que se están
usando - apache, mysql, saslauthd, postfix, courier-imapd,
courier-imapd-ssl, courier-pop3d, y courier-pop3d-ssl, dependiendo de
los tipos de acceso que se quieran ofrecer. Normalmente yo los inicio
todos.
</p>

<pre caption="Todo en uno">
# <i>postfix reload</i>
# <i>rc-update add $service default</i>
</pre>

<p>
<e>¡A disfrutarlo!</e>
</p>
</body>
</section>
</chapter>

<chapter>
<title>Problemas frecuentes</title>
<section>
<title>Introducción</title>
<body>

<p>
Lidiando con problemas: Esta es una pequeña guía para lidiar con los
posibles problemas que puedan surgir para la configuración que hemos
hecho. No es exhaustiva, pero puede ser un comienzo para empezar a
pelearse con los problemas. Con una configuración complicada como
esta, es necesario que se asigne correctamente el problema con el
componente que está fallando. En general para hacer esto sirve con
seguir los siguientes pasos. Empezar por la base del sistema y empezar
a ascender hasta conseguir dar con el componente que tiene el
problema.
</p>
</body>
</section>

<section>
<title>Paso 1: Comprobar los ficheros de configuración</title>
<body>

<p>
Los errores al escribir un fichero de configuración son mortales,
especialmente cuando se trata de sistemas de autenticación. Han de
comprobarse los ficheros de configuración y sql en busca de estos
errores. Se puede depurar todo lo que uno quiera, pero si no se le
está pasando la información correcta, el sistema de correo no va a
funcionar. Si se hace un cambio en un fichero de configuración para un
servicio, hay que asegurarse de reiniciar dicho servicio para que los
cambios en el fichero tengan efecto.
</p>

<pre caption="Cómo reiniciar un servicio">
# <i>/etc/init.d/servicio restart</i>
</pre>
</body>
</section>

<section>
<title>Paso 2: ¿Los servicios necesarios están corriendo?</title>
<body>

<p>
Si no están corriendo, hay que iniciarlos. Es tremendamente difícil
depurar un servicio que no está corriendo. A veces un servicio puede
actuar como si estuviera iniciado pero puede seguir sin funcionar. A
veces, cuando se tiene un fichero incorrecto, o una mala transmisión
entra en un componente de correo, el servicio abre un puerto para
evitar que sea usado por otro proceso. A veces se puede detectar esto
con netstat. Reiniciar la máquina limpiará la lista de puertos
abiertos por procesos que no están funcionando bien.
</p>

<pre caption="Comprobando el estado de un servicio">
# <i>/etc/init.d/$service status</i>
# <i>netstat -a | grep $service (o bien: $port)</i>
</pre>
</body>
</section>

<section>
<title>Paso 3: ¿Están todos los servicios usando los últimos ficheros de configuración?</title>
<body>

<p>
Si se ha modificado alguno de los ficheros, hay que reiniciar ese
servicio para asegurarse de que está utilizando la última versión de
dicho fichero. Algunos programas como postfix volcarán su
configuración actual.
</p>

<pre caption="Algunos servicios pueden mostrar su configuración actual">
# <i>apachectl fullstatus</i> (necesita lynx instalado)
# <i>apachectl configtest</i> (comprueba el fichero de configuración)
# <i>postconf -n</i> (mostrará los parámetros que está usando postfix)
# <i>/etc/init.d/$service restart</i>
</pre>
</body>
</section>

<section>
<title>Paso 4: Comprobación de bitácoras (log).</title>
<body>
<p>
Las bitácoras son mis amigas. El siguiente paso son siempre las
bitácoras. A veces es muy útil provocar un fallo en el sistema de
correo para, tras esto, comprobar el error en los registros. Ver si
hay algo de información que nos ayude a diagnosticar el problema, o
quizá, mostrarnos qué componente está fallando.
</p>

<pre caption="Comprobando las bitácoras">
# <i>kill -USR1 `ps -C metalog -o pid=`</i> (para deshabilitar el búfer de metalog)
# <i>nano -w /var/log/mail/current</i>
# <i>cat /var/log/mysql/mysql.log</i>
# <i>tail /var/log/apache/error_log</i>
</pre>

<p>
Se pueden encontrar útiles los parámetros de debug_peer en
main.cf. Añadiendo esto, se incrementará el nivel de depuración.
</p>

<pre caption="Añadiendo soporte debug_peer">
# <i>nano -w /etc/postfix/main.cf</i>
debug_peer_level = 5
debug_peer_list = $host.domain.name
<comment>
(Se descomenta también uno de los comandos de depuración sugeridos.)
</comment>
</pre>
</body>
</section>

<section>
<title>Paso 5:  Hablar con el propio servicio.</title>
<body>

<p>
SMTP, IMAP y POP3 responden a sesiones telnet. Tal y como vimos cuando
comprobamos la configuración de postfix. A veces es útil abrir una
sesión telnet a uno de los servicios para ver qué está pasando.
</p>

<pre caption="Conectando a un servicio con telnet">
# <i>telnet localhost $port</i>
<comment>
(SMTP es 25, IMAP es 143, POP3 es 110. Se debe recibir una cadena OK,
que nos muestre que el servicio se está ejecutando y listo para
aceptar peticiones).
</comment>

Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
* OK Courier-IMAP ready. Copyright 1998-2002 Double Precision, Inc.
</pre>
</body>
</section>

<section>
<title>Paso 6: A veces las grandes armas nos dan la información que se necesita: strace.</title>
<body>

<p>
Debe tenerse este programa instalado. Es una herramienta muy buena
para depurar programas. Se pueden iniciar comandos desde la consola
con strace y ver las llamadas al sistema a la vez que ocurren. Muchas
veces vuelca una enorme cantidad de información, así que se tendrá que
ver en tiempo real mientras que intenta una transacción fallida con el
sistema de correo, o bien, mandar la salida a un fichero para luego
examinarlo.
</p>

<pre caption="Usar strace">
# <i>emerge strace</i>
# <i>strace $command</i>
# <i>strace -p `ps -C $service -o pid=`</i>
</pre>
</body>
</section>

<section>
<title>Paso 7: Investigación</title>
<body>

<p>
Una vez que se tiene la información, si se puede diagnosticar y
arreglar el problema, ¡bien! Si no, probablemente se necesite navegar
un poco por la red en busca de información que nos ayude a diagnosticar
y arreglar el problema. Aquí hay una lista de sitios donde se puede
comprobar si el problema ha sido resuelto. También hay una buena guía
para configurar smtp-auth que contiene buenas ideas sobre depuración.
</p>

<ul>
  <li>
  <uri>http://forums.gentoo.org/</uri> - Excelentes foros para usuarios de Gentoo
  </li>
  <li>
  <uri>http://bugs.gentoo.org/</uri> - Base de datos de errores de Gentoo - Excelente lugar para buscar errores específicos
  </li>
  <li>
  <uri>http://postfix.state-of-mind.de/</uri> - guía smtp-auth
  </li>
  <li>
  <uri>http://marc.theaimsgroup.com/?l=postfix-users</uri> - Lista de correo de Postfix</li>
  <li>
  <uri>http://sourceforge.net/mailarchive/forum.php?forum_id=6705</uri> - Lista de correo de Courier-imap
  </li>
  <li>
  <uri>http://www.google.es/linux</uri> - Si todo falla, siempre existe google, nunca me ha fallado.
  </li>
  <li>El canal #gentoo (#gentoo-es para encontrar usuarios que hablen español) en irc.freenode.net es un buen sitio para buscar ayuda.
  </li>
</ul>
</body>
</section>
</chapter>
</guide>
