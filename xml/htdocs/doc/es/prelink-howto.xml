<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/prelink-howto.xml,v 1.9 2012/04/18 18:30:20 swift Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide lang="es">
<title>Guía Prelink de Gentoo Linux</title>

<author title="Autor">
  <mail link="cretin@gentoo.org">Stefan Jones</mail>
</author>
<author title="Editor"><!-- zhen@gentoo.org -->
  John P. Davis
</author>
<author title="Editor">
  <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Editor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Editor">
  <mail link="erwin@gentoo.org">Erwin</mail>
</author>
<author title="Editor">
  <mail link="nightmorph"/>
</author>
<author title="Traductor">
    <mail link="bass@gentoo.org">José Alberto Suárez López</mail>
</author>
<author title="Traductor">
    <mail link="chiguire@gentoo.org"/>
</author>
<author title="Traductor">
    <mail link="yoswink@gentoo.org">José Luis Rivero</mail>
</author>
<author title="Traductor">
  <mail link="enrique@barbeito.org">Enrique Barbeito García</mail>
</author>

<abstract>
Esta guía le indica cómo hacer uso del soporte prelink en versiones de portage
2.0.46 en adelante.
</abstract>

<license/>

<version>1.18</version>
<date>2010-01-12</date>

<chapter>
<title>Introducción</title>
<section>
<title>¿Qué es Prelink y en qué me puede ayudar?</title>
<body>

<p>
La mayoría de aplicaciones comunes hacen uso de librerías compartidas. Estas
librerías compartidas necesitan ser cargadas en memoria en tiempo de ejecución
y las distintas referencias simbólicas deben ser resueltas. Para la mayoría de
los pequeños programas, este tiempo de carga es muy rápido. Pero para los
programas escritos en C++ y que utilicen muchas librerías, el tiempo de
carga puede llevar bastante tiempo.
</p>

<p>
En la mayoría de sistemas, las librerías no se cambian muy a menudo y cuando se
ejecuta un programa, las operaciones para cargarlo son siempre las mismas.
Prelink se aprovecha de esto para llevar el linkado a cabo y almacenarlo en el
ejecutable, prelinkándolo en realidad.
</p>

<p>
El prelinkado puede reducir los tiempos de inicialización de las aplicaciones.
Por ejemplo, el tiempo de carga de un programa típico de KDE puede ser reducido
hasta un 50%. El único mantenimiento requerido es ejecutar prelink cada vez que
se actualice una librería para un ejecutable prelinkado.
</p>

<warn>
Prelink no funciona en Gentoo Hardened. Esto es debido a que ambos proyectos
tratan de cambiar el espacio de mapeo de direcciones de las librerías
compartidas. De todos modos, prelink con la opción -R utiliza direcciones
aleatorias, proporcionando así mayor grado de protección.
</warn>

</body>
</section>

<section>
<title>Resumen</title>
<body>

<ul>
  <li>
    El prelinkado se hace con un programa llamado, sorprendentemente,
    <c>prelink</c>. Cambia el binario para hacerlo más rápido en su
    inicialización.
  </li>
  <li>
    Si las librerías dependientes de una aplicación cambian después de que la
    haya prelinkado, necesitará prelinkar de nuevo la aplicación; de no ser
    así, perderá la ganancia de velocidad. Esto es para decir que cada vez que
    actualice un paquete con portage que actualice librerías, éstas necesitarán
    ser prelinkadas de nuevo.
  </li>
  <li>
    El cambio del binario es completamente reversible. <c>prelink</c> tiene una
    función para deshacer dicho cambio.
  </li>
  <li>
    Las actuales versiones de Portage pueden manejar, vía <c>prelink</c>, los
    cambios de las sumas MD5 y los mtimes de los binarios.
  </li>
  <li>
    No necesita poner <c>FEATURES="prelink"</c> en su fichero
    <path>make.conf</path>; Portage soportará prelink automáticamente si puede
    encontrar el binario prelink.
  </li>
</ul>
</body>
</section>
</chapter>

<chapter>
<title>Configurar Prelink</title>
<section>
<title>Instalar los programas</title>
<body>

<p>
Lo primero que necesita es instalar la herramienta <c>prelink</c>. El proceso
de emerge comprueba automáticamente que su sistema pueda hacer prelink sin
peligro.
</p>

<pre caption = "Instalando Prelink">
# <i>emerge prelink</i>
</pre>

<p>
Algunas personas obtienen errores emergiendo prelink a causa de las pruebas
fallidas. Estas pruebas se pusieron por razones de seguridad; si las desactiva,
el comportamiento de prelink puede ser impreciso. Normalmente los errores de
emerge dependen únicamente de los paquetes base: binutils, gcc, y glibc.
Intente re-emerger estos paquetes en ese orden.
</p>

<note>
Sugerencia: Si obtiene un error, pruebe a compilar y probar <c>prelink</c>
usted mismo (<c>./configure</c> ; <c>make</c> ; <c>make check</c> ). Ante un
fallo, puede ver los ficheros *.log en el directorio testsuite. Le pueden
proporcionar algunas pistas de utilidad.
</note>

<p>
Si obtiene una serie de pasos que reproducen el error de emerge en otro
sistema, por favor compruebe <uri
link="http://bugzilla.gentoo.org">Bugzilla</uri> y realice un nuevo informe de
error si éste todavía no ha sido reportado.
</p>
</body>
</section>

<section>
<title>Preparar su sistema</title>
<body>

<p>
Asegúrese también de que <e>no</e> tiene el parámetro -fPIC puesto en sus
CFLAGS/CXXFLAGS. Si lo tiene, necesitará reconstruir todo su sistema sin él.
</p>
</body>
</section>

<section>
<title>Configuración</title>
<body>

<p>
Ejecutando <c>env-update</c> se creará el fichero
<path>/etc/prelink.conf</path> que le dice a <path>prelink</path> qué ficheros
prelinkar.
</p>

<pre caption="Ejecutando env-update">
# <i>env-update</i>
</pre>

<p>
Desafortunadamente, no puede prelinkar ficheros que hayan sido compilados con
antiguas versiones de binutils. La mayoría de estas aplicaciones vienen de
paquetes binarios precompilados instalados en <path>/opt</path>. Creando el
siguiente fichero, le diremos a prelink que no intente prelinkarlos.
</p>

<pre caption="/etc/env.d/60prelink">
PRELINK_PATH_MASK="/opt"
</pre>

<note>
Puede añadir más o menos directorios a la lista, separados por dos puntos (:).
</note>
</body>
</section>
</chapter>

<chapter>
<title>Prelinkado</title>
<section>
<title>Uso de Prelink</title>
<body>

<p>
Utilizo el siguiente comando para prelinkar todos los binarios de los
directorios dados por <path>/etc/prelink.conf</path>.
</p>

<pre caption = "Prelinkando los ficheros listados">
# <i>prelink -amR</i>
</pre>

<warn>
Se ha observado que si tiene poco espacio en disco y prelinka por completo su
sistema, hay una posibilidad de que sus binarios queden truncados. El resultado
es un sistema destrozado. Utilice el comando <c>file</c> o <c>readelf</c> para
comprobar el estado de un fichero binario. De modo alternativo, compruebe la
cantidad de espacio libre de su disco duro con <c>df -h</c>.
</warn>

<table>
<tr>
  <th>Las opciones explicadas:</th>
</tr>
<tr>
  <th>-a</th>
  <ti>"All": prelinka todos los binarios</ti>
</tr>
<tr>
  <th>-m</th>
  <ti>
    Conserva el espacio de la memoria virtual. Esta opción es necesaria si
    tiene muchas librerías que tengan que ser prelinkadas.
  </ti>
</tr>
<tr>
  <th>-R</th>
  <ti>
    Al azar - hace aleatoria la asignación de la dirección. Esta opción aumenta
    la seguridad frente a desbordamientos de búfer.
  </ti>
</tr>
</table>

<note>
Para más opciones y detalles vea <c>man prelink</c>.
</note>

</body>
</section>
<section>
<title>Prelink como tarea programada</title>
<body>

<p>
<c>sys-devel/prelink-20060213</c> y posteriores instalan una tarea programada
en <path>/etc/cron.daily/prelink</path>. Para activarla, edite el fichero de
configuración <path>/etc/conf.d/prelink</path>. Esto ejecutará prelink en
segundo plano a diario, como es necesario, ahorrándole lanzar el comando
manualmente.
</p>

</body>
</section>

<section>
<title>Acelerar KDE después del Prelinkado</title>
<body>

<p>
El tiempo de carga de KDE puede reducirse muchísimo después del prelinkado. Si
informa a KDE de que ha sido prelinkado él desactivará la carga de
<c>kdeinit</c> (ya que no se requiere más) por lo que acelerará KDE aún más.
</p>

<p>
Ponga <c>KDE_IS_PRELINKED=1</c> en <path>/etc/env.d/*kdepaths*</path> para
informar del prelinkado a KDE.
</p>

</body>
</section>
<section>
<title>Borrar prelink</title>
<body>

<p>
Si ha cambiado de de opinión acerca del prelinkado, antes de desinstalar el
paquete prelink necesitará eliminar su correspondiente tarea programada en
<path>/etc/cron.daily</path> y <path>/etc/conf.d/prelink</path>.
A continuación, tendrá que eliminar el prelinkado de todos los binarios:
</p>

<pre caption="Eliminar el prelinkado de todos los binarios">
# <i>prelink -au</i>
</pre>

<p>
Finalmente, desinstale el paquete <c>prelink</c>:
</p>

<pre caption="Desinstalar prelink">
# <i>emerge -aC prelink</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Problemas conocidos y soluciones</title>
<section>
<title>"No puedo prelinkar contra librerías compartidas non-PIC"</title>
<body>

<p>
La causa de este problema está en la errónea compilación de las librerías
compartidas que fueron compiladas sin la opción -fPIC de gcc para todos sus
ficheros objeto.
</p>

<p>
Aquí están las librerías que no han sido o no pueden ser arregladas:
</p>

<ul>
  <li>
    Las librerías en el paquete wine, incluyendo winex. De todos modos, el
    prelinkado no aceleraría los ejecutables de MS Windows.
  </li>
  <li>
    La librería en media-video/mjpegtools, 
    <path>/usr/lib/liblavfile-1.6.so.0</path>.
  </li>
  <li>
    Las librerías OpenGL de NVIDIA,
    <path>/usr/lib/opengl/nvidia/lib/libGL.so.*</path>. Debido a razones de
    rendimiento fueron compiladas sin soporte PIC.
  </li>
</ul>

<p>
Si su problema de librería no está listado, por favor publíquelo con,
preferiblemente, un parche para añadir la opción <c>-fPIC</c> al CFLAGS
pertinente.
</p>
</body>
</section>

<section>
<title>Cuando prelinko mi sistema algunos binarios estáticos dejan de funcionar
</title>
<body>

<p>
Por lo que a glibc concierne, el binario 100% estático no existe.
Si compila estáticamente un binario con glibc, éste puede depender de otros
ficheros del sistema. A continuación tiene una explicación de Dick Howell,
</p>

<p>
"Supongo que la idea es que todo estuviera en el fichero descargado, de
modo que nada dependa de las librerías locales del sistema al que va dirigido.
Desafortunadamente con Linux, y creo que con todo lo que use GLIBC, esto
todavía no es del todo cierto. Ahí está "libnss" (servicio de nombres (name
service switch), algunas personas parece que lo llaman sistema de seguridad de
red (network security system)) que proporciona funciones para acceder a varias
bases de datos de autenticación, información de red y otras cosas. Se supone
que hace programas independientes del entorno de red real configurado de la
máquina. Una buena idea, pero los cambios a GLIBC pueden llevar a problemas
cargándolo. Además, no puede linkar "libnss" estáticamente ya que está
configurado individualmente para cada máquina. El problema viene, pienso,
principalmente de linkar estáticamente otras librerías de GLIBC, en particular
"libpthread", "libm" y "libc" de donde vienen llamadas incompatibles a
funciones de "libnss"."
</p>
</body>
</section>

<section>
<title>Prelink se para con "prelink: dso.c:306: fdopen_dso: Assertion
`j == k' failed."</title>
<body>

<p>
Es un problema conocido, amablemente diagnosticado <uri
link="http://bugs.gentoo.org/show_bug.cgi?id=13878">aquí</uri>.
Prelink no puede arreglárselas con los ejecutables UPX-comprimidos. En cuanto a
prelink-20021213 no hay solución excepto esconder los ejecutables mientras esté
realizando el prelinkado.
Vea la <uri link="#doc_chap2_sect2">sección de Configuración</uri> para tener
un modo sencillo de hacer ésto.
</p>
</body>
</section>

<section>
<title>Uso grsecurity y parece que el prelinkado no funciona.</title>
<body>

<p>
Para usar prelink en un sistema con grsecurity que use una base mmap()
aleatoria, es necesario quitar "randomized mmap() base" del fichero
<path>/lib/ld-2.3.*.so</path>. Esto puede hacerse con la utilidad <c>chpax</c>,
pero debe hacerse cuando el fichero no esté en uso (p.e. iniciando desde un
disco de rescate)
</p>

</body>
</section>
<section>
<title>
Prelink falla con el error "prelink: Can't walk directory tree XXXX: Too many
levels of symbolic links"
</title>
<body>

<p>
Sus enlaces simbólicos están demasiado anidados. Esto ocurre cuando un enlace
simbólico se apunta a sí mismo. Por ejemplo, <path>/usr/lib/lib -&gt;
lib</path> es el más común. Para solucionarlo, puede buscar el enlace
manualmente o emplear la herramienta proporcionada por el paquete
<c>symlinks</c>:
</p>

<pre caption="Arreglar enlaces simbólicos">
# <i>emerge symlinks</i>
# <i>symlinks -drv /</i>
</pre>

<p>
Puede encontrar más detalles en <uri
link="http://bugs.gentoo.org/show_bug.cgi?id=82117">Bugzilla</uri> y en este
<uri
link="http://forums.gentoo.org/viewtopic-t-458144-highlight-prelink.html">hilo
del foro</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Conclusión</title>
<section>
<body>

<p>
El prelinkado puede acelerar drásticamente los tiempos de inicialización de un
gran número de aplicaciones. Su soporte está incorporado en Portage. El
prelinkado también es fiable ya que siempre puede deshacer los cambios para
cualquier binario si se encuentra con algún problema. ¡Sólo recuerde que cuando
actualice glibc u otras librerías con las que haya prelinkado, necesitará
ejecutar <path>prelink</path> de nuevo! Resumiendo ¡Buena suerte!
</p>
</body>
</section>
</chapter>
</guide>
