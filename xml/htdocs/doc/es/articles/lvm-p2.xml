<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/articles/lvm-p2.xml,v 1.2 2006/02/17 20:19:12 chiguire Exp $ -->

<guide link="/doc/es/articles/lvm-p2.xml" disclaimer="articles" lang="es">
<title>Aprender LVM Linux, Parte 2</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<!-- xmlified by: Joshua Saddler (jackdark@gmail.com) -->
<author title="Traductor">
  <mail link="LinuxBlues@gentoo-es.org">Fernando M. Bueno</mail>
</author>

<abstract>
En este artículo, Daniel comparte su experiencia convirtiendo el sistema de
ficheros /home de cvs.gentoo.org en un volumen lógico LVM. Después de la
transición, veremos los beneficios de LVM al poder cambiar dicha partición de
tamaño en tiempo real, sin reiniciar, desmontar /home ni teniendo que pasar
al nivel de ejecución 1. Todos los procesos continúan funcionando sin
interrupción. Los detalles paso a paso de la conversión efectuada por Daniel
guiarán a cualquiera interesado en una transición similar en su propia máquina.
</abstract>

<!-- The original version of this article was first published on IBM
developerWorks, and is property of Westtech Information Services. This
document is an updated version of the original article, and contains
various improvements made by the Gentoo Linux Documentation team -->

<version>1.2</version>
<date>2006-01-22</date>

<chapter>
<title>La mejora de cvs.gentoo.org</title>
<section>
<title>Introducción</title>
<body>

<p>
En <uri link="/doc/es/articles/lvm-p1.xml">mi primer artículo LVM</uri>,
expliqué los conceptos que hay tras LVM. Ahora es el momento de poner LVM en
acción. En este artículo, voy a configurar LVM en el servidor oficial cvs de
Gentoo Linux, cvs.gentoo.org. Aunque cvs.gentoo.org tiene una sola unidad de
disco, la flexibilidad de LVM proporciona una increíble mejora sobre el esquema
normal de particionamiento estático. Mostraré todos los pasos del proceso de
conversión a LVM por lo que, si se está interesado, se podrá realizar una
conversión similar en cualquier otra máquina.
</p>

<warn>
Debido a que implementar LVM es un cambio importante para el sistema
(involucrando la creación de nuevas particiones y otras acciones potencialmente
arriesgadas) es realmente una buena idea realizar una copia de seguridad
completa de todo el sistema antes de comenzar a llevar a cabo este proceso.
Si no se va a realizar una copia de seguridad, espero que se esté usando una
máquina de pruebas que no contenga datos importantes. He de mencionar que no
tuve el más mínimo problema en la conversión a LVM, pero es mejor estar
preparado por si algo sale mal.
</warn>

<p>
Queda dicho, continuemos. Antes de comenzar con el proceso de conversión,
actualicé cvs.gentoo.org y estaba utilizando los siguientes paquetes. En el
momento en que realicé la transición LVM, estas eran las últimas versiones
disponibles (ver <uri link="#resources">Recursos</uri> más adelante en este
artículo):
</p>

<ul>
  <li>Linux kernel 2.4.1-ac19</li>
  <li>LVM 0.9.1_beta5</li>
  <li>reiserfs-utils 3.6.25</li>
</ul>

<p>
Ahora, el disco duro. cvs.gentoo.org tenía una unidad IBM de 45 GB; aunque,
cuando instalé Gentoo Linux en el cvs, solamente particioné alrededor de 10 GB
de la unidad, manteniendo los 35 GB restantes para futuras particiones. Estos
son los pequeños trucos que se necesitan usar cuando no se está utilizando LVM
-- dejar parte de la unidad sin particionar es una primitiva, aunque efectiva,
forma de permitir una futura expansión. De todos modos, con LVM tenemos una
solución mucho mejor.
</p>

</body>
</section>
<section>
<title>El problema del espacio</title>
<body>

<p>
En las pasadas semanas, venía observando que la partición raíz ReiserFS se
había ido llenando lentamente, como puede verse con este resultado de
<c>df</c>:
</p>

<pre caption="Reducción de espacio libre">
Filesystem           1k-blocks      Used Available Use% Mounted on
/dev/hda3              9765200   6989312   2775888  72% /
tmpfs                   269052         0    269052   0% /dev/shm
</pre>

<p>
Bien, una partición raíz con un 72% de ocupación no es exactamente una crisis,
pero tampoco es una situación maravillosa. ReiserFS, como muchos otros sistemas
de ficheros, comienza a ser mucho más lento en cuanto se empieza a ocupar todo
el espacio, y era sólo una cuestión de tiempo que mi sistema de ficheros raíz
estuviese ocupado por completo y el rendimiento del mismo se redujera
considerablemente.
</p>

<p>
Decidí solucionar el problema usando LVM para crear un nuevo volumen lógico
a partir de los 35 GB sin utilizar al final de mi disco duro. Entonces, crearía
un sistema de ficheros en este volumen y movería gran parte de los contenidos
de <path>/dev/hda3</path> al mismo.
</p>

<p>
Si se está pensando en hacer algo similar en una máquina, lo primero que se
necesita hacer es encontrar la parte del sistema de ficheros raíz que vamos a
mover al volumen lógico. Para mí, la elección fue fácil -- el árbol
<path>/home</path> estaba ocupando alrededor de 5,7 GB. Moviendo
<path>/home</path> a su propio volumen lógico LVM, dejaría al sistema de
ficheros raíz al 20% de su capacidad. Dado que la mayoría de nuevos datos iban
a parar a <path>/home</path>, mi sistema de ficheros raíz se quedaría
aproximadamente al 20% de su capacidad -- lo cual es muy favorable.
</p>

</body>
</section>
<section>
<title>El comienzo de la solución</title>
<body>

<p>
Para comenzar la conversión, primero tuve que particionar el espacio no
utilizado al final del disco duro. Usando <c>cfdisk</c>, creé una partición de
35 GB (<path>/dev/hda5</path>) y configuré el tipo de partición como <c>8E</c>
(el tipo de partición LVM oficial). Después de este cambio, reinicié para
forzar la relectura de la tabla de particiones. Después de haber reiniciado,
mi tabla de particiones era la siguiente:
</p>

<pre caption="La nueva tabla de particiones">
# <i>sfdisk -l</i>
Disk /dev/hda: 89355 cylinders, 16 heads, 63 sectors/track
Units = cylinders of 516096 bytes, blocks of 1024 bytes, counting from 0
   Device Boot Start     End   #cyls   #blocks   Id  System
/dev/hda1   *      0+    247     248-   124960+  83  Linux
/dev/hda2        248     743     496    249984   82  Linux swap
/dev/hda3        744   20119   19376   9765504   83  Linux
/dev/hda4      20120   89354   69235  34894440    5  Extended
/dev/hda5      20120+  89354   69235- 34894408+  8e  Linux LVM
</pre>

<p>
Ahora que tenía una partición de 35 GB, estaba listo para inicializarla para
LVM. He aquí el procedimiento -- primero, tenía que inicializar los 35
gigabytes como un volumen <e>físico</e>; después tenía que crear un
<e>grupo</e> de volumen que usase el volumen físico y, finalmente, tenía que
localizar algunos de los "extents" (grupos de bloques dedicados al
almacenamiento) en el grupo de volumen, creando un <e>volumen lógico</e>
que contendría el nuevo sistema de ficheros y ocuparía con todos los archivos
contenidos en <path>/home</path>.
</p>

<p>
Para comenzar el proceso, usé el comando <c>pvcreate</c> para inicializar
<path>/dev/hda5</path> como volumen físico:
</p>

<pre caption="Creación del volumen físico">
# <i>pvcreate /dev/hda5</i>
pvcreate -- physical volume "/dev/hda5" successfully created
</pre>

<p>
<c>pvcreate</c> configuró un área especial de "cuentas" en
<path>/dev/hda5</path>, denominada VGDA (Área del Descriptor del Grupo de
Volumen). LVM usa este área para seguirle la pista a cómo se localizan los
extents físicos, entre otras cosas.
</p>

<p>
Mi siguiente paso fue crear un grupo de volumen y añadir <path>/dev/hda5</path>
al grupo. El grupo de volumen actuaría como un conjunto de extents (fragmentos
de bloques de almacenamiento). Una vez que el grupo de volumen estaba creado,
podía crear tantos volúmenes lógicos como quisiese. Decidí que mi grupo de
volumen se llamaría "principal":
</p>

<pre caption="Creación del grupo de volumen">
# <i>vgcreate principal /dev/hda5</i>
vgcreate -- INFO: using default physical extent size 4 MB
vgcreate -- INFO: maximum logical volume size is 255.99 Gigabyte
vgcreate -- doing automatic backup of volume group "principal"
vgcreate -- volume group "principal" successfully created and activated
</pre>

<p>
El comando <c>vgcreate</c> hizo un par de cosas. Además de crear el grupo de
volumen "principal", también configuró <path>/dev/hda5</path> para usar extents
de 4 MB, el tamaño por defecto de los extents. Esto significa que cualquier
volumen lógico que crease a partir de este grupo de volumen, puede ser
expandido o reducido en bloques de 4MB.
</p>

<p>
Debido a limitaciones en el núcleo, el tamaño del extent determina el máximo
tamaño del volumen lógico. Como puede verse en la información mostrada
anteriormente, un tamaño de 4 MB por extent impone una limitación del volumen
lógico a 256 gigabytes, que es una cantidad fácilmente alcanzable si se están
añadiendo varias unidades de gran capacidad al grupo de volumen. Si los
volúmenes pueden llegar a ser mayores de 256 GB por unidad, recomiendo indicar
un tamaño mayor de extent cuando se use el comando <c>vgcreate</c>. Los extents
pueden ser de 8 KB hasta 512 MB, y debe ser siempre un múltiplo de 2.
Incrementar el tamaño del extent más de 4 MB, causará que el tamaño máximo del
volumen físico crezca a escala de acuerdo con el mismo, hasta un máximo de 1
petabyte (aunque el límite actual de tamaño en sistemas x86 es de 2 terabytes).
Por ejemplo, si hubiese querido crear un un grupo de volumen con extents de 32
MB, habría tecleado:
</p>

<pre caption="Extent de mayor tamaño">
# <i>vgcreate -s 32M principal /dev/hda5</i>
</pre>

<p>
32 MB es un buen tamaño para los extents, dado que las porciones de 32 MB se
pueden manejar adecuadamente y aumenta el tamaño máximo del volumen lógico a 2
terabytes. En cuanto creamos el grupo de volumen, podemos ver toda su
información tecleando <c>vgdisplay</c>:
</p>

<pre caption="Examinar la información del volumen">
# <i>vgdisplay</i>
--- Volume group ---
VG Name               principal
VG Access             read/write
VG Status             available/resizable
VG #                  0
MAX LV                256
Cur LV                0
Open LV               0
MAX LV Size           255.99 GB
Max PV                256
Cur PV                1
Act PV                1
VG Size               33.28 GB
PE Size               4 MB
Total PE              8519
Alloc PE / Size       0 / 0
Free  PE / Size       8519 / 33.28 GB
VG UUID               2qC2H2-iA8s-qW6F-cwXx-JVIh-I6VC-VVCGmn
</pre>

<p>
Ahora que teía mi grupo de volumen, estaba listo para crear un volumen lógico.
Decidí darle un tamaño inicial de 8 gigabytes y llamarlo "lv_home":
</p>

<pre caption="Creación del nuevo volumen lógico">
# <i>lvcreate -L8G -nlv_home principal</i>
lvcreate -- doing automatic backup of "principal"
lvcreate -- logical volume "/dev/principal/lv_home" successfully created
</pre>

<p>
Después, creé un sistema de ficheros en el volumen:
</p>

<pre caption="Creación del sistema de ficheros">
# <i>mkreiserfs /dev/principal/lv_home</i>


  &lt;----------- MKREISERFSv2 -----------&gt;

   Block size 4096 bytes
   Block count 2097152
   Used blocks 8275
           Journal - 8192 blocks (18-8209), journal header is in block 8210
           Bitmaps: 17, 32768, 65536, 98304, 131072, 163840,
           196608, 229376, 262144, 294912, 327680, 360448,
           393216, 425984, 458752, 491520, 524288, 557056,
           589824, 622592, 655360, 688128, 720896, 753664,
           786432, 819200, 851968, 884736, 917504, 950272,
           983040, 1015808, 1048576, 1081344, 1114112,
           1146880, 1179648, 1212416, 1245184, 1277952,
           1310720, 1343488, 1376256, 1409024, 1441792,
           1474560, 1507328, 1540096, 1572864, 1605632,
           1638400, 1671168, 1703936, 1736704, 1769472,
           1802240, 1835008, 1867776, 1900544, 1933312,
           1966080, 1998848, 2031616, 2064384
   Root block 8211
Hash function "r5"
ATTENTION: ALL DATA WILL BE LOST ON '/dev/principal/lv_home'! (y/n)y
journal size 8192 (from 18)
Initializing journal - 0%....20%....40%....60%....80%....100%
Syncing..done.
</pre>

<p>
Ahora que se había creado el nuevo sistema de ficheros, podía montarlo en
<path>/mnt/newhome</path>:
</p>

<pre caption="Montar el nuevo volumen">
# <i>mkdir /mnt/newhome</i>
# <i>mount /dev/principal/lv_home /mnt/newhome</i>
# <i>df</i>
Filesystem           1k-blocks      Used Available Use% Mounted on
/dev/hda3              9765200   6989840   2775360  72% /
tmpfs                   291388         0    291388   0% /dev/shm
/dev/principal/lv_home      8388348     32840   8355508   1% /mnt/newhome
</pre>

<p>
Como puede verse, estaba casi listo para empezar a copiar todos los archivos de
<path>/home</path>. Pero antes de comenzar, debía pasar al nivel de ejecución 1
para asegurarme de que ningún usuario o proceso accedía o modificaba archivos
en <path>/home</path>.
</p>

<pre caption="Nivel de ejecución 1">
# <i>init 1</i>
</pre>

<p>
Entonces, empecé a copiar los archivos:
</p>

<pre caption="Copiado de archivos al nuevo directorio">
# <i>cp -avx /home/* /mnt/newhome</i>
</pre>

<p>
La copia terminó en alrededor de 10 minutos. Entonces hice una copia de
seguridad del <path>/home</path> original a <path>/home.old</path>, sólo por si
algo había ido mal con la copia. Creé un nuevo punto de montaje y remonté el
nuevo home en <path>/home</path>:
</p>

<pre caption="Nuevo punto de montaje">
# <i>cd /</i>
# <i>mv home home.old</i>
# <i>mkdir home</i>
# <i>umount /mnt/newhome</i>
# <i>mount /dev/principal/lv_home /home</i>
</pre>

<p>
Entonces, era el momento de configurar el servidor para que mi nueva partición
<path>/home</path> estuviese disponible cada vez que la máquina se iniciase.
Primero, modifiqué <path>/etc/fstab</path> para que incluyese la nueva entrada
de <path>/home</path>:
</p>

<pre caption="Editar fstab">
<comment>
#fs                 mountpoint       type         opts          dump/pass</comment>
/dev/hda3           /                reiserfs     defaults      1 1
/dev/principal/lv_home   /home       reiserfs     defaults      2 2
/dev/hda2           none             swap         sw            0 0
/dev/hda1           /boot            reiserfs     noauto        0 0
/dev/cdrom          /mnt/cdrom       iso9660      noauto,ro     0 0
proc                /proc            proc         defaults      0 0
none                /dev/pts         devpts       mode=620      0 0
tmpfs               /dev/shm         tmpfs        defaults      0 0
</pre>

<p>
Entonces, hice unas modificaciones menores a las macros de inicialización.
Modifiqué la macro de inicio "checkroot" para que ejecutase los siguientes
comandos en cuanto la partición raíz se remontase en modo lectura/escritura:
</p>

<pre caption="Modificación de la macro de inicio">
/sbin/vgscan
/sbin/vgchange -a y
</pre>

<p>
Entonces, modifiqué la macro que desmonta todos los sistemas de ficheros cuando
el sistema se apaga, para que ejecutase el siguiente comando inmediatamente
después de desmontarlos:
</p>

<pre caption="Modificación de la macro de apagado">
/sbin/vgchange -a n
</pre>

<p>
En cuanto terminé con todos estos pasos, reinicié la máquina, y todo funcionó
perfectamente. Después de un día o así sin el más mínimo problema, borré el
directorio <path>/home.old</path> para liberar espacio en la partición raíz.
El paso a LVM fue todo un éxito.
</p>

</body>
</section>
<section>
<title>La belleza de LVM</title>
<body>

<p>
Mientras que la transición a LVM puede parecer algo compleja, una vez que la
hemos completado, manejar los sistemas de ficheros es algo mucho más sencillo.
Como ejemplo, decidí cambiar el tamaño de mi nuevo volumen lógico
<path>/home</path> añadiéndole unos 2 gigabytes al final del sistema de
ficheros. Primero, añadí la capacidad adicional al volumen lógico "lv_home", y
después usé la utilidad <c>resize_reiserfs</c> para expandir el sistema de
ficheros y utilizar esta capacidad añadida. He aquí los dos comandos que lo
llevaron a cabo:
</p>

<pre caption="Utilización del espacio adicional">
# <i>lvextend -L+2G /dev/principal/lv_home</i>
# <i>resize_reiserfs -f /dev/principal/lv_home</i>
</pre>

<p>
En aproximadamente un segundo, incrementé la capacidad del sistema de ficheros
<path>/home</path> 2 GB; además, ni tan siquiera necesité reiniciar, pasar al
nivel de ejecución 1, ni desmontar <path>/home</path> para realizar el cambio
de tamaño. Todo continuó funcionando tal y como lo había hecho anteriormente.
¿No es excelente? He aquí el estado actual de mis sistemas de ficheros:
</p>

<pre caption="Espacio en los sistemas de ficheros">
# <i>df</i>
Filesystem           1k-blocks      Used Available Use% Mounted on
/dev/hda3              9765200   1413340   8351860  15% /
/dev/principal/lv_home     10485436   5609836   4875600  54% /home
</pre>

<p>
Se habrá visto que LVM puede hacer el trabajo de un administrador mucho más
sencillo. En el futuro, espero mover partes adicionales del sistema de ficheros
raíz a LVM y, eventualmente, convertir el sistema de ficheros raíz en un
volumen lógico LVM. Los siguientes recursos ayudarán a aprender más acerca de
LVM.
</p>

</body>
</section>
<section id="resources">
<title>Recursos</title>
<body>

<ul>
  <li>
    Para conceptos LVM y consejos para conseguir los últimos parches para el
    núcleo y herramientas instaladas en nuestro sistema, ver mi anterior
    artículo <uri link="/doc/es/articles/lvm-p1.xml">Aprender LVM Linux,
    Parte 1</uri>.
  </li>
  <li>
    Descargue el <uri
    link="ftp://sources.redhat.com/pub/lvm2">tarball LVM</uri> desde
    RedHat.
  </li>
<!-- Comment out Sistina links, Bug #119882
  <li>
    Sistina tiene ahora un excelente <uri
    link="http://www.sistina.com/lvm/doc/lvm_howto/index.html">HOWTO LVM</uri>
    disponible.
  </li>
  <li>
    Asegurarse de consultar el <uri
    link="http://www.sistina.com/cgi-bin/lvm-faqprocessor.cgi">PUF de Linux
    LVM</uri>.
  </li>
-->
  <li>
    Los impacientes querrán comprobar el <uri
    link="http://www.linux.org/docs/ldp/howto/LVM-HOWTO.html">LVM HOWTO de
    Heinz Mauelshagen</uri>, que muestra cómo configurar volúmenes físicos,
    grupos de volumen y volúmenes lógicos. Todo esto es algo que cubriré en mi
    siguiente artículo.
  </li>
  <li>
    Hay un interesante HOWTO que muestra cómo <uri
    link="http://www.the-infinite.org/archive/docs/lvm/howto-boot-off-root-lv.txt">
    configurar el sistema de archivos raíz en un volumen lógico</uri>. En
    cuanto salga la versión final de LVM-0.9.1, intentaré hacer esto.
  </li>
  <li>
    Andreas Dilger se ha involucrado en el proyecto LVM Linux y tiene un muy
    interesante <uri
    link="http://www-mddsp.enel.ucalgary.ca/People/adilger/online-ext2/">
    redimensionador del sistema de ficheros ext2</uri>.
  </li>
  <li>
    <uri link="http://www.namesys.com">ReiserFS</uri> es un excelente sistema
    de ficheros (especialmente en combinación con LVM). Si se está usando
    ReiserFS, debería tenerse instalado también reiserfs-utils, que contiene
    el programa llamado <c>reiserfs_resize</c> -- que permite cambiar el
    tamaño de dicho sistema de ficheros.
  </li>
  <li>
    Para más información acerca de la configuración de volúmenes RAID, ver la
    <uri link="/doc/en/articles/software-raid-p1.xml">Parte 1</uri> y la <uri
    link="/doc/en/articles/software-raid-p2.xml">Parte 2</uri> de los artículos
    de Daniel acerca del RAID software.
  </li>
  <li>
    Como repaso, ver el <uri
    link="/doc/en/articles/linux-kernel-compiling.xml">tutorial de compilación
    del núcleo Linux</uri> de Daniel.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
