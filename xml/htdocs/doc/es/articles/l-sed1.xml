<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/articles/l-sed1.xml,v 1.2 2009/10/27 13:18:03 chiguire Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/es/articles/l-sed1.xml" disclaimer="articles" lang="es">
<title>Sed mediante ejemplos, Parte 1</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traductor">
  <mail link="LinuxBlues@gentoo-es.org">LinuxBlues</mail>
</author>

<abstract>
En esta serie de artículos, Daniel Robbins mostrará cómo usar el poderoso
(aunque muy a menudo olvidado) editor de flujo UNIX, sed. Sed es una
herramienta ideal para editar archivos por lotes o para crear macros en el
intérprete de comandos que modifiquen archivos existentes de forma muy
poderosa.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.4</version>
<date>2005-10-09</date>

<chapter>
<title>Dar a conocer el poderoso editor UNIX</title>
<section>
<title>Elegir un editor</title>
<body>

<p>
En el mundo UNIX, disponemos de muchas opciones cuando necesitamos editar
archivos. Pensando en ello -- vienen a la mente vi, emacs y jed, así como
muchos otros. Todos nosotros tenemos nuestro editor favorito (así como nuestras
combinaciones de teclas favoritas) que hemos llegado a conocer y ahora amamos.
Con nuestro editor de confianza, estamos listos para manejar cualquier tarea de
administración relacionada con UNIX o de programación con facilidad.
</p>

<p>
Mientras que los editores interactivos son buenos, tienen algunas limitaciones.
A pesar de que su naturaleza interactiva puede ser un punto fuerte, también
puede ser una debilidad. Consideremos una situación en la que necesitemos hacer
un tipo muy similar de cambios en un grupo de archivos. Podemos lanzar nuestro
editor de textos favorito y realizar una labor mundana, tediosa y repetitiva,
malgastando nuestro tiempo en muchas ediciones a mano. Pero hay una forma mejor
de hacerlo
</p>

</body>
</section>
<section>
<title>Introducción a sed</title>
<body>

<p>
Sería bueno poder automatizar el proceso de editar archivos, de forma que
podamos "procesar por lotes" la edición de archivos, e incluso crear macros con
la habilidad de realizar cambios sofisticados a archivos existentes.
Afortunadamente para nosotros y para este tipo de situaciones, hay un método
mucho mejor -- y este método se denomina sed.
</p>

<p>
sed es un ligero editor de flujo que está incluido en casi todos los
sabores UNIX, Linux incluido. sed tiene muchas buenas características. La
primera de ellas es que es de peso muy ligero, normalmente muy inferior al de
nuestro lenguaje favorito de macros. En segundo lugar, dado que sed es un
editor de flujo, puede editar los datos que recibe de stdin, como aquellos
redireccionados. Por lo que no se necesita tener los datos a editar almacenados
en un archivo del disco. Dado que los datos pueden redirigirse a sed, es muy
fácil usar sed como parte de un largo y complejo redireccionamiento en un
archivo por lotes de nuestro intérprete de comandos. Intentemos hacerlo con
nuestro editor favorito.
</p>

</body>
</section>
<section>
<title>sed GNU</title>
<body>

<p>
Afortunadamente para nosotros, usuarios de Linux, una de las mejores versiones
disponibles de sed es la versión de GNU, actualmente en su versión 3.02. Cada
distribución de Linux posee el editor sed de GNU o, al menos, debería. El sed
de GNU es muy conocido, no únicamente porque su código fuente sea de libre
distribución, sino porque tiene muchas extensiones del estándar POSIX de sed
que nos evitarán desperdiciar el tiempo. El sed de GNU tampoco sufre muchas de
las limitaciones del sed anterior y propietario, como una longitud de línea
limitada -- El sed de GNU puede manejar líneas de cualquier tamaño con
facilidad.
</p>

</body>
</section>
<section>
<title>El último sed de GNU</title>
<body>

<p>
Mientras elaboraba este artículo, noté que varios aficionados de sed hacían
referencia al sed de GNU 3.02a. A pesar de que no pude encontrarlo en
<uri>ftp://ftp.gnu.org</uri> (ver los <uri link="#recursos">Recursos</uri>
para encontrar estos enlaces), por lo que tuve que buscarlo en otra parte. Lo
encontré en <uri>ftp://alpha.gnu.org</uri>, bajo <path>/pub/sed</path>. Lo
descargué, compilé e instalé para observar, pasados unos minutos, que la
última versión de sed es la 3.02.80 -- y puede encontrarse su código fuente
justo al lado de las de 3.02a, en <uri>ftp://alpha.gnu.org</uri>. Después de
tener el sed de GNU 3.02.80 instalado, ya estaba listo para continuar.
</p>

</body>
</section>
<section>
<title>El sed correcto</title>
<body>

<p>
En esta serie, utilizaré el sed de GNU versión 3.02.80. Algunos (aunque pocos)
de los ejemplos más avanzados en mi serie de artículos acerca de sed no
funcionarán con el sed de GNU 3.02 ó 3.02a. Si se está usando un sed que no
sea el de GNU los resultados pueden variar. ¿Por qué no nos tomamos el tiempo
necesario para instalar el sed 3.02.80 de GNU ahora? Después, no sólo
estaremos preparados para el resto de los artículos acerca de sed, sino que
estaremos usando, indiscutiblemente, el mejor sed que existe.
</p>

</body>
</section>
<section>
<title>Ejemplos con sed</title>
<body>

<p>
Sed trabaja realizando cualquier número de operaciones de edición
especificadas por el usuario ("comandos") en los datos de entrada. Sed se
basa en líneas, por lo que los comandos se realizan en cada línea, siguiendo
un orden. Sed, escribe sus resultados en la salida estándar (stdout); por lo
que no modifica ninguno de los archivos de entrada.
</p>

<p>
Veamos algunos ejemplos. Los primeros van a ser un poco inútiles, debido a que
pretendo mostrar con ellos cómo trabaja sed, en lugar de realizar cualquier
tarea útil. De cualquier modo, si somos principiantes con sed, es muy
importante entenderlos. He aquí nuestro primer ejemplo:
</p>

<pre caption="Ejemplo de uso de sed">
$ <i>sed -e 'd' /etc/services</i>
</pre>

<p>
Si tecleamos este comando, no obtendremos absolutamente ningún mensaje. ¿Qué
ha ocurrido? En este ejemplo, hemos llamado a sed con un comando de edición,
<c>d</c>. Sed abrió el archivo <path>/etc/services</path>, leyó una línea en
su memoria intermedia, realizó nuestro comando de edición ("borrar una
línea") y después mostró su memoria intermedia de patrones (la cual estaba
vacía). Después repitió estos pasos para cada línea sucesivamente. Con lo
cual no se produjo ningún mensaje, dado que el comando <c>d</c> erradicó todas
y cada una de las líneas en la memoria intermedia de patrones.
</p>

<p>
Hay un par de cosas a considerar en este ejemplo. La primera,
<path>/etc/services</path> no fue modificado en absoluto. Esto se debe a que
sed únicamente lee del archivo que se le indica en la línea de comandos,
usándolo como entrada -- ni siquiera intenta modificarlo. La segunda es que sed
está orientado hacia líneas. El comando <c>d</c> no le dijo a sed que borrara
todos los datos sin la más mínima precaución. En su lugar, sed leyó línea
por línea /etc/services en su memoria intermedia interna, denominada memoria
intermedia de patrones (pattern buffer). Cada vez que se leía una línea en la
memoria intermedia de patrones, realizaba el comando <c>d</c> e imprimía los
contenidos de la memoria intermedia de patrones (ninguno en este ejemplo).
Después mostraré cómo usar rangos de direcciones para controlar las líneas a
las que se aplica un comando -- aunque en ausencia de los mismos, un comando se
aplica a todas las líneas.
</p>

<p>
La tercera cosa a notar es el uso de comillas simples para introducir el
comando <c>d</c>. Es una buena idea adquirir el hábito de usar comillas simples
para introducir los comandos sed, para deshabilitar la expansión del
intérprete de comandos.
</p>

</body>
</section>
<section>
<title>Otro ejemplo de uso de sed</title>
<body>

<p>
He aquí un ejemplo de cómo usar sed para eliminar la primera línea del
archivo <path>/etc/services</path> de nuestro flujo de salida:
</p>

<pre caption="Otro ejemplo de uso de sed">
$ <i>sed -e '1d' /etc/services | more</i>
</pre>

<p>
Como puede verse, este comando es muy similar a nuestro primer comando <c>d</c>
exceptuando que se encuentra precedido por un <c>1</c>. Si al verlo hemos
pensado que el <c>1</c> hacía alusión a la línea 1, estábamos en lo cierto.
Mientras que en nuestro primer ejemplo usamos <c>d</c> por sí mismo, en este
caso usamos el comando <c>d</c> precedido por una dirección lineal opcional.
Usando direcciones, podemos decirle a sed que edite únicamente una línea o
sólo unas líneas.
</p>

</body>
</section>
<section>
<title>Rangos de direcciones</title>
<body>

<p>
Ahora, veamos cómo especificar rangos de direcciones. En este ejemplo, sed
borrará de la línea 1 a la 10 de la salida:
</p>

<pre caption="Especificar un rango de direcciones">
$ <i>sed -e '1,10d' /etc/services | more</i>
</pre>

<p>
Cuando separamos dos direcciones por una coma, sed aplicará el siguiente
comando al rango que empieza con la primera dirección y terminará con la
segunda dirección. En este ejemplo, el comando <c>d</c> se ha aplicado desde la
línea 1 hasta la línea 10, inclusive. El resto de líneas son ignoradas.
</p>

</body>
</section>
<section>
<title>Direcciones con expresiones regulares</title>
<body>

<p>
Ha llegado el momento de un ejemplo mucho más útil. Digamos que queríamos ver
los contenidos del archivo <path>/etc/services</path>, pero no estamos
interesados en ver ninguno de los comentarios incluidos. Como todos sabemos, se
pueden añadir comentarios en nuestro archivo <path>/etc/services</path>
comenzando la línea con un carácter '#'. Para evitar los comentarios, le
indicamos a sed que elimine todas las líneas que comienzan con '#'. He aquí
cómo hacerlo:
</p>

<pre caption="Eliminar las líneas que comienzan con #">
$ <i>sed -e '/^#/d' /etc/services | more</i>
</pre>

<p>
Intentemos realizar este ejemplo y veamos lo que ocurre. Notaremos que sed
realiza la labor solicitada con gran rapidez. Vamos a figurarnos qué es lo que
ha ocurrido.
</p>

<p>
Para comprender el comando '/^#/d', antes necesitamos diseccionarlo. Primero,
eliminemos la 'd' -- estamos usando el mismo comando de borrado de líneas que
hemos usado previamente. La nueva parte añadida es la '/^#/', que es un nuevo
tipo de dirección mediante una expresión regular. Las direcciones con
expresiones regulares se indican siempre entre barras. Especifican un patrón y
el comando que está a continuación de una dirección con expresión regular
únicamente se aplicará a una línea si encuentra dicho patrón en ella.
</p>

<p>
Por lo que '/^#/' es una expresión regular. Pero, ¿qué es lo que hace?
Obviamente, este sería un buen momento para repasar las expresiones regulares.
</p>

</body>
</section>
<section>
<title>Repaso a las expresiones regulares</title>
<body>

<p>
Podemos usar expresiones regulares para expresar patrones que podemos encontrar
en el texto. Si hemos usado alguna vez el carácter '*' en un comando del
intérprete de comandos, hemos usado algo muy similar, aunque no idéntico, a
las expresiones regulares. Aquí tenemos los caracteres especiales que pueden
usarse en las expresiones regulares:
</p>

<table>
  <tr>
    <th>Carácter</th>
    <th>Descripción</th>
  </tr>
  <tr>
    <ti>^</ti>
    <ti>Apunta al comienzo de la línea</ti>
  </tr>
  <tr>
    <ti>$</ti>
    <ti>Apunta al final de la línea</ti>
  </tr>
  <tr>
    <ti>.</ti>
    <ti>Apunta a un único carácter</ti>
  </tr>
  <tr>
    <ti>*</ti>
    <ti>Apunta a cero o más ocurrencias del carácter previo</ti>
  </tr>
  <tr>
    <ti>[ ]</ti>
    <ti>Apunta a todos los caracteres entre los corchetes</ti>
  </tr>
</table>

<p>
Veamos algunos ejemplos con expresiones regulares para facilitar las cosas.
Todos estos ejemplos serán aceptados por sed como direcciones válidas que
pueden aparecer a la izquierda de cualquier comando:
</p>

<table>
  <tr>
    <th>Expresión regular</th>
    <th>Descripción</th>
  </tr>
  <tr>
    <ti>/./</ti>
    <ti>Apuntará a cualquier línea que contenga al menos un carácter</ti>
  </tr>
  <tr>
    <ti>/../</ti>
    <ti>Apuntará a cualquier línea que contenga al menos dos caracteres</ti>
  </tr>
  <tr>
    <ti>/^#/</ti>
    <ti>Apuntará a cualquier línea que comience con un '#'</ti>
  </tr>
  <tr>
    <ti>/^$/</ti>
    <ti>Apuntará a cualquier línea en blanco</ti>
  </tr>
  <tr>
    <ti>/}^/</ti>
    <ti>Apuntará a toda línea que termine con un '}' (sin espacios)</ti>
  </tr>
  <tr>
    <ti>/} *^/</ti>
    <ti>Apuntará a toda línea que termine con un '}' con cero o más
        espacios</ti>
  </tr>
  <tr>
    <ti>/[abc]/</ti>
    <ti>Apuntará a toda línea que contenga una 'a', 'b', o 'c' minúscula</ti>
  </tr>
  <tr>
    <ti>/^[abc]/</ti>
    <ti>Apuntará a cualquier línea que empiece con 'a', 'b', o 'c'</ti>
  </tr>
</table>

<p>
Recomiendo encarecidamente intentarlo con varios de estos ejemplos. Tomarse el
tiempo necesario para familiarizarse con las expresiones regulares, e intentar
usar algunas expresiones regulares de nuestra propia invención. Puede usarse
una expreg de este modo:
</p>

<pre caption="Forma adecuada de usar expreg">
$ <i>sed -e '/expreg/d' /ruta/a/mi/archivo/de/pruebas | more</i>
</pre>

<p>
Esto dará lugar a que sed borre cualquier línea coincidente. De todos modos,
puede ser más sencillo familiarizarse con las expresiones regulares pidiéndole
a sed que muestre las coincidencias con expreg y que borre las que no
coincidan, en lugar de seguir el camino opuesto. Lo cual puede lograrse con el
siguiente comando:
</p>

<pre caption="Imprimir las coincidencias expreg">
$ <i>sed -n -e '/expreg/p' /ruta/a/mi/archivo/de/pruebas | more</i>
</pre>

<p>
Hay que tomar nota de la opción '-n', que indica a sed que no imprima el
espacio en el patrón a menos que se le indique. También observamos que hemos
sustituido el comando <c>d</c> con el comando <c>p</c>, que como se podrá
pensar solicita a sed que muestre el espacio entre patrones. Por lo tanto, sólo
se mostrarán las expresiones que coincidan.
</p>

</body>
</section>
<section>
<title>Más direcciones</title>
<body>

<p>
Hasta ahora, hemos echado un vistazo a direcciones lineales, direcciones en
rangos lineales y direcciones expreg. Pero aún hay más posibilidades. Podemos
especificar dos expresiones regulares separadas por una coma, y sed marcará
todas las líneas que comiencen con la primera expresión regular seleccionada
hasta la línea (incluida) que contenga la segunda expresión regular. Por
ejemplo, el siguiente comando mostrará un bloque de texto que comience con una
línea que contenga "PRINCIPIO", y termine con una línea que contenga "FIN":
</p>

<pre caption="Imprimir el bloque deseado de texto">
$ <i>sed -n -e '/PRINCIPIO/,/FIN/p' /mi/archivo/de/pruebas | more</i>
</pre>

<p>
Si "PRINCIPIO" no se encuentra, no se imprimirá ningún dato. Y si se encuentra
"PRINCIPIO" pero no se encuentra ninguna línea que contenga "FIN" a
continuación, todas las líneas siguientes se imprimirán. Esto ocurre debido a
la naturaleza basada en flujo de sed -- desconoce si "FIN" aparecerá o no.
</p>

</body>
</section>
<section>
<title>Ejemplo con código fuente en C</title>
<body>

<p>
Si únicamente se quiere imprimir la función main() en un archivo de código
fuente en C, se podría teclear:
</p>

<pre caption="Imprimir la función main() en un archivo de código fuente en C">
$ <i>sed -n -e '/main[[:space:]]*(/,/^}/p' sourcefile.c | more</i>
</pre>

<p>
Este comando tiene dos expresiones regulares, '/main[[:space:]]*(/' y '/^}/', y
un comando , <c>p</c>. La primera expresión regular apuntará a la cadena
"main" seguida de cualquier número de espacios o tabuladores, seguida además
por un paréntesis abierto. Lo cual debería coincidir con el comienzo de
nuestra declaración main() en ANSI C.
</p>

<p>
En este caso de expresión regular, encontramos la clase de caracteres
'[[:space:]]'. La cual es únicamente una palabra clave especial para sed que le
indica a sed que apunte a cualquier espacio o TAB. De haberlo querido, en lugar
de teclear '[[:space:]]', podríamos haber tecleado '[', después un espacio
literalmente, a continuación Control-V, después un TAB literal y un ']' --
Control-V indica a bash que queremos introducir un TAB "real" en lugar de una
expansión del comando. Es mucho más claro, especialmente en archivos de
comandos usar la clase de comandos '[[:space:]]'.
</p>

<p>
Bien, ahora la segunda expreg. '/^}/' apuntará a algún carácter '}' que
aparezca al comienzo de una nueva línea. Si nuestro código se ha formateado
correctamente, toparemos con ello con el final de nuestra función main(). Si no
lo está, no lo hará -- cuestión de trabajar con la coincidencia de patrones.
</p>

<p>
El comando <c>p</c> hace lo mismo que siempre, le dice a sed que imprima
explícitamente la línea, dado que estamos en el modo silencioso '-n'. Si se
intenta ejecutar el comando en una línea de código fuente en C, tratará de
mostrar el bloque completo main() { }, incluyendo el "main ()" inicial y el '}'
final.
</p>

</body>
</section>
<section>
<title>La próxima vez</title>
<body>

<p>
Ahora que hemos tratado los principios básicos, estamos listos para los
siguientes dos artículos. Si necesitamos más material acerca de sed, hay que
ser paciente -- se está elaborando. Mientras tanto, pueden consultarse los
siguientes recursos acerca de sed y de las expresiones regulares.
</p>

</body>
</section>
</chapter>

<chapter id="recursos">
<title>Recursos</title>
<section>
<title>Enlaces útiles</title>
<body>

<ul>
  <li>
    Leer los otros artículos acerca de sed de Daniel en developerWorks: "Sed
    mediante ejemplos, <uri link="/doc/es/articles/l-sed2.xml">Parte 2</uri> y
    <uri link="/doc/es/articles/l-sed3.xml">Parte 3</uri>.
  </li>
  <li>
    Comprobar la excelente <uri
    link="http://sed.sourceforge.net/sedfaq.html">sed FAQ</uri>
    de Eric Pement.
  </li>
  <li>
    Se puede encontrar el código fuente de sed en
    <uri>ftp://ftp.gnu.org/pub/gnu/sed</uri>.
  </li>
  <li>
    Eric Pement tiene también una lista muy práctica de <uri
    link="http://sed.sourceforge.net/sed1line.txt">sed one-liners</uri>
    que cualquier aspirante a gurú sed debería consultar.
  </li>
  <li>
    Si nos gustan los libros tradicionales, <uri
    link="http://www.oreilly.com/catalog/sed2/">O'Reilly's sed &amp; awk, 2nd
    Edition</uri> sería una gran elección.
  </li>
<!-- FIXME BOTH DEAD and not possible to find other locations, sorry
 <li>
    Maybe you'd like to read <uri
    link="http://www.softlab.ntua.gr/unix/docs/sed.txt">7th edition UNIX's sed
    man page</uri> (circa 1978!).
  </li>
  <li>
    Take Felix von Leitner's short <uri
    link="http://www.math.fu-berlin.de/~leitner/sed/tutorial.html">sed
    tutorial</uri>.
  </li>
-->
  <li>
    Leer el artículo de David Mertz acerca del <uri
    link="http://www-106.ibm.com/developerworks/linux/library/l-python5.html">
    Procesamiento de texto bajo Python</uri> (en inglés) en developerWorks.
  </li>
<!-- Dead link
  <li>
    Brush up on <uri link="http://vision.eng.shu.ac.uk/C++/misc/regexp/">using
    regular expressions</uri> to find and modify patterns in text in this free,
    dW-exclusive tutorial.
  </li>
-->
  <li>
    Ver el <uri
    link="http://docs.python.org/dev/howto/regex.html">Regular Expression
    HOWTO</uri> (en inglés) de <uri link="http://python.org">Python.org</uri>.
  </li>
  <li>
    Tener en cuenta el <uri
    link="http://www.uky.edu/ArtsSciences/Classics/regex.html">Regular
    Expression Overview</uri> (en inglés) de la Universidad de Kentucky.
  </li>
</ul>

</body>
</section>
</chapter>

</guide>
