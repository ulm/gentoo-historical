<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/articles/l-redesign-4.xml,v 1.4 2011/08/15 15:36:40 nimiux Exp $ -->

<guide disclaimer="articles" lang="es">
<title>El rediseño de gentoo.org, Parte 4: El renacimiento de un sitio</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traductor">
  <mail link="nimiux" />
</author>

<abstract>
¿Se ha levantado alguna vez por la mañana y de repente se ha dado cuenta de
que su pequeño y cuco sitio Web personal de desarrollo no es realmente tan
bueno?. En este caso, está en buena compañía. En esta serie, Daniel Robbins
comparte sus experiencias surgidas mientras rediseñaba el sitio
www.gentoo.org usando tecnologías como XML, XSLT y Python. En este artículo:
Daniel completa la conversión a XML/XSLT, corrige un montón de errores en la
compatibilidad del navegador Netscape 4.x y añade un registro de cambios
(Changelog) al sitio.
</abstract>

<!-- La vesión original de este artículo fue publicada en IBM developerWorks,
y es propiedad de Westtech Information Services. Este documento es una
versión actualizada del artículo original, y contiene varias mejoras
realizadas por el Equipo de Documentación de Gentoo Linux -->

<version>1.1</version>
<date>2005-10-10</date>

<chapter>
<title>El toque final</title>
<section>
<title>Un nuevo aspecto, pero...</title>
<body>

<p>
Al final de artículo anterior, el sitio Web Gentoo Linux tenía un nuevo
aspecto completamente diferente, pero todavía hay cosas que no están
completas aún. En este artículo, la última entrega de la serie, doy los
toques finales al sitio, resultando un sitio basado en XML, refinado,
completamente operativo y modular que está preparado para el futuro. A
continuación se muestra lo que faltaba en es sitio desde el último artículo.
</p>

</body>
</section>
<section>
<title>Finales flojos</title>
<body>

<p>
En primer lugar, a pesar de que el sitio  tenía un aspecto completamente
nuevo, solo la parte de la documentación del sitio estaba basada en XML. La
páginas principales de las "categorías" están aún en HTML puro y necesitan
ser convertidas a una solución XML para hacer las cosas más mantenibles y
expandibles.
</p>

<p>
También, mis desarrolladores han encontrado varios problemas con el HTML
puro en sí mismo. El sitio tiene mal aspecto cuando se mira con Netscape
4.77 -- obviamente, esto es un problema. También, hay algunos otros pequeños
problemas con la renderización, que aparecen en navegadores modernos, el más
molesto de todos es el de una línea negra vertical que no se extiende
completamente a lo largo de toda la página, arruinando la ilusión de que el
área de contenido principal es dicha por el platillo volante. También,
nuestras páginas de documentación no se adaptan al aspecto más refinado de
las páginas principales de categorías -- claramente algo merece ser
actualizado.
</p>

</body>
</section>
<section>
<title>El objetivo</title>
<body>

<p>
Este es el plan para los trabajos finales en el sitio Gentoo Linux. Primero,
reharemos totalmente la página principal HTML, guardando el mismo aspecto
global, pero haciendo la página más compatible con los navegadores. Al mismo
tiempo, añadiremos algunos refinamientos relacionados con la presentación,
sugeridos por nuestros invitados y también corregiremos problemas de
compatibilidad con los navegadores en nuestro sistema actual de
documentación "guía".
</p>

<p>
A continuación, moveremos completamente el sitio a XML y XSLT. Al final de
este artículo, cualquier cambio en el sitio será realizado modificando XML o
XSLT en lugar de editar HTML directamente, el cual será ahora generado
automáticamente con la ayuda de xsltproc. Esto hará que todo el sitio sea
bastante más fácil de mantener. Ya que Gentoo Linux es un proyecto
desarrollado por la comunidad, esto permitirá a nuestros desarrolladores
(y a mí) mantener y mejorar el sitio de la forma que sea necesaria. Estoy
realmente ilusionado con todo esto, ya que nos ahorrará un montón de tiempo
y asegurará que nuestros invitados sean bienvenidos con contenido
actualizado.
</p>

</body>
</section>
<section>
<title>Aspectos de compatibilidad</title>
<body>

<p>
Aunque Netscape 4.x es todavía un navegador usado ampliamente, es difícil
para mí decidir exactamente cuantos aros hay que saltar para hacer que el
sitio tenga mejor aspecto cuando se mire con este navegador. ¿Debo
simplemente asegurarme que el sitio es legible? (sin ningún fallo
importante) o ¿Debo hacer todo lo que pueda para asegurarme de que el sitio
se ve absolutamente perfecto con Netscape 4.x incluso si eso supone usar
menos o ningún CSS y añadir ajustes extraños de compatibilidad al HTML
existente?.
</p>

<p>
Al final decidí hacer varios cambios importantes al HTML de modo que el
sitio se viera bien con Netscape 4.x sin enfocar demasiado en errores
menores relacionados con es espaciado en las tablas o el renderizado de
fuentes. A continuación se muestran algunos de los cambios al HTML del sitio
para hacerlo del todo compatible con 4.x. (El equipo de desarrollo de Gentoo
Linux ha enviado algunas de estas correcciones).
</p>

<p>
En primer lugar Netscape 4.x tiene un error que hace que los colores de
fondo de los bloques de elementos CSS sean mostrados incorrectamente. Por
ejemplo, aquí se muestra como una parte en particular de un documento guía
debe ser renderizada:
</p>

<figure link="/images/docs/l-redesign-07.gif"
        caption="Un simple documento guía en IE5"/>

<p>
Y ahora, cómo  Netscape 4.x renderiza esta misma porción cuando los colores
de fondo son especificados usando CSS:
</p>

<figure link="/images/docs/l-redesign-08.gif"
        caption="Un simple documento guía en Netscape 4.7; se necesitan algunas correciones"/>

<p>
Esto queda feo. Para solucionarlo, los elementos de nivel de bloque como
este...
</p>

<pre caption="Párrafo ejemplo">
&lt;p class="note"&gt;Este párrafo no tiene buen aspecto en 4.x&lt;/p&gt;
</pre>

<p>
...fue reemplazado con tablas, de esta forma:
</p>

<pre caption="Tabla ejemplo">
&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;
        &lt;tr&gt;
                &lt;td bgcolor="#ddffff"&gt;&lt;p class="note"&gt;
                Esto tiene bastante mejor aspecto en 4.x&lt;/p&gt;&lt;/td&gt;
        &lt;/tr&gt;
&lt;/table&gt;
</pre>

<p>
Este arreglo corrige el problema del renderizado del fondo. Sin embargo,
Esta "corrección" también requiere que la información de color sea incluida
en el HTML, el cual, en primer lugar, mina los beneficios de usar CSS. Esta
es una situación desafortunada, especialmente para los fans de CSS como yo,
pero se necesita para la compatibilidad con Netscape 4.x.
</p>

</body>
</section>
<section>
<title>Reconstruyendo el HTML</title>
<body>

<p>
Ahora es el momento de tratar con la línea negra vertical que no siempre se
extiende hasta el final de la pantalla. He sido incapaz de encontrar una
solución a este problema que funcione tanto en navegadores 4.x como 5.x;
cada versión 5.x ha desatado errores en Netscape 4.x, y cada versión
compatible 4.x se ve horrible en un navegador 5.x. Por ello, decidí
simplemente quitar la linea negra completamente; Finalmente, el sitio
funciona en la mayoría de navegadores populares. A continuación crearé una
sintaxis parecida a las guías para crear las páginas principales.
</p>

</body>
</section>
<section>
<title>Acercándonos a XML</title>
<body>

<p>
En lugar de implementar un conjunto de etiquetas completamente nuevo para la
página principal, creo que sería una buena idea intentar usar la mayor
cantidad posible de las etiquetas de documentación "guía" XML (mire la parte
2 de esta serie para más información del formato guía XML). Por ello jugué
un poco con nuevos XSL, usando mi formato guía XSL como plantilla para mi
trabajo. Después de una hora o dos, tenía un conjunto completamente
funcional de transformaciones XSL para convertir una sintaxis del tipo guía
en una página principal HTML. La revisión 2 de la nueva página principal
tiene este aspecto:
</p>

<figure link="/images/docs/l-redesign-09.gif"
        caption="La nueva revisión de la página principal"/>

<p>
Ahora que la página principal está usando un nuevo soporte XML/XSLT, dirigí
mi atención a la salida HTML del sistema "guía". No solo necesité corregir
un montón de errores de compatibilidad con Netscape 4.7, sino que también
necesité actualizar los gráficos y el HTML generado de forma que se adapten
a la nueva página principal revisada. Entonces la idea me llegó: ¿Por qué no
simplemente ajusto mi nueva página principal XML/XSL un poquito de forma que
pueda también generar HTML para mi documentación?. Después de todo,
simplemente he añadido soporte para casi todas las etiquetas "guía" XML,
para que también puedan ser usadas para el contenido de la página principal.
</p>

<p>
Esta solución llegó a ser realmente fácil de implementar. Simplemente ajusté
el fichero XSLT para que quitara la "barra de enlaces" de la parte izquierda
y realicé algunos otro pequeños cambios a la salida del HTML cuando se
procesan las páginas de documentación. Ya que la mayor parte del XSLT sigue
siendo el mismo, puedo usar un conjunto maestro único de plantillas tanto
para la guía de documentación como para las páginas de categorías:
</p>

<figure link="/images/docs/l-redesign-10.gif"
        caption="Cómo trabaja el nuevo XSL"/>

<p>
No solo tengo ahora un único conjunto de plantillas XSLT que mantener, sino
que ahora comparten la misma hoja de estilos CSS, ya que ambas formas de
salida HTML están basadas en el mismo documento maestro. Esto significa que
no hay necesidad de "sincronizar el aspecto" entre dos conjuntos dispares de
plantillas y salida HTML. Y, como puede ver, el nuevo HTML de la
documentación tiene un ajuste perfecto para la nueva página principal:
</p>

<figure link="/images/docs/l-redesign-11.gif"
        caption="Las nuevas páginas de documentación se adaptan perfectamente a la nueva página principal"/>

</body>
</section>
<section>
<title>La implementación XML</title>
<body>

<p>
La implementación actual es bien fácil; mi actual sintaxis de la guía XML
requiere que cada documento sea parte de un único elemento maestro
&lt;guide&gt;. Para añadir soporte a las páginas principales de categorías,
creé un nuevo elemento maestro: &lt;mainpage&gt;. Para crear una página
principal de categoría, coloqué todo dentro de un elemento &lt;mainpage&gt;
en lugar de en un elemento &lt;guide&gt;, y el XSLT hace los cambios
apropiados a la salida. Aparte de esto, el único cambio importante requerido
es añadir un elemento opcional &lt;sidebar&gt; que es usado para especificar
los contenidos de la tabla flotante en una página principal de categoría. La
plantilla &lt;guide&gt; XSLT existente tiene este aspecto:
</p>

<pre caption="XSLT template">
&lt;xsl:template match="/guide"&gt;
        &lt;html&gt;
        &lt;head&gt;
                Aquí va el encabezamiento de la guía
        &lt;/head&gt;
        &lt;body&gt;
                La parte superior del contenido del cuerpo HTML de la guía va aquí
&lt;!--ahora, insertamos nuestro contenido--&gt;
                &lt;xsl:apply-templates select="chapter" /&gt;
                La parte inferior del contenido del cuerpo HTML de la guía va aquí
        &lt;/body&gt;
        &lt;/html&gt;
&lt;/xsl:template&gt;
</pre>

<p>
Si no está muy familiarizado con XSLT, esta plantilla le dice a un
procesador XSLT que reemplace las etiquetas &lt;guide&gt; &lt;/guide&gt; con
el armazón de un documento HTML, así como que aplique  recursivamente las
plantillas a cualquier elemento &lt;chapter&gt; (abriendo/cerrando pares de
etiquetas) dentro del elemento &lt;guide&gt; e insertando la salida
resultante en medio del armazón HTML.
</p>

<p>
Por ello, para añadir soporte a las páginas principales de categorías,
necesito especificar que un armazón HTML diferente debería ser usado si todo
está encerrado en un único elemento &lt;mainpage&gt;. Para hacer esto, añado
una nueva plantilla como sigue:
</p>

<pre caption="La nueva plantilla">
&lt;xsl:template match="/mainpage"&gt;
        &lt;html&gt;
        &lt;head&gt;
                El encabezamiento de mainpage va aquí
        &lt;/head&gt;
        &lt;body&gt;
                La parte superior del contenido del cuerpo HTML de la guía va aquí
&lt;!--ahora, insertamos nuestro contenido--&gt;
                &lt;xsl:apply-templates select="chapter" /&gt;
                La parte inferior del contenido del cuerpo HTML de la guía va aquí
        &lt;/body&gt;
        &lt;/html&gt;
&lt;/xsl:template&gt;
</pre>

<p>
Ya que casi cada uno de los otros elementos XML (desde &lt;chapter&gt; en
adelante) produce salida HTML idéntica tanto para la guía como para las
páginas de categorías, casi cada una de las plantillas XSLT puede ser
compartida por ambos tipos de páginas. Así, podemos continuar de forma
correcta con un único fichero que especifique los dos "armazones HTML" y un
conjunto común de plantillas XSLT de XML a HTML. Como siempre la
reutilización de código es definitivamente algo bueno.
</p>

</body>
</section>
<section>
<title>La página Changelog</title>
<body>

<p>
Recordará de la parte 2 de esta seria que mencioné que el guión de
generación CVS Changelog cvs2cl.pl produce salida XML y que quería usar
eventualmente esta característica como base para una página CVS Changelog
diaria que aparecería en el nuevo sito Web. Ahora, con este nuevo soporte
XML en su lugar, añadiendo la nueva página Changelog era muy fácil. Aquí se
muestra una versión mejorada de el guión <path>cvslog.sh</path> que también
tiene en cuenta el manejo de la conversión XML-a-HTML:
</p>

<pre caption="Versión mejorada del scrtip cvslog.sh">
#!/bin/bash
#various paths
HOMEDIR=/home/drobbins
CVSDIR=${HOMEDIR}/gentoo/gentoo-x86
OUTLOG=${HOMEDIR}/gentoo/xmlcvslog.txt
OUTMAIL=${HOMEDIR}/gentoo/cvslog.txt
WEBDIR=/usr/local/httpd/htdocs
XSLTP=/opt/gnome/bin/xsltproc
TMPFILE=${HOMEDIR}/gentoo/xmlcvslog.tmp
USER=drobbins
#if $CVSMAIL is undefined, set it to "yes"
if [ -z "$CVSMAIL" ]
then
        export CVSMAIL="yes"
fi
#the main script
cd $CVSDIR
cvs -q update -dP
yesterday=`date -d "1 day ago 00:00" -R`
today=`date -d "00:00" -R`
cvsdate=-d\'${yesterday}\&lt;${today}\'
nicedate=`date -d yesterday +"%d %b %Y %Z (%z)"`
#generate cvs2cl.pl XML output
/usr/bin/cvs2cl.pl --xml -f $OUTLOG -l "${cvsdate}"
#use sed to remove "xmlns=" from cvs2cl.pl output
/usr/bin/sed -e 's/xmlns=".*"//' $OUTLOG &gt; ${OUTLOG}.2
#convert cvs2cl.pl XML output to guide format using $XLSTP
$XSLTP ${WEBDIR}/xsl/cvs.xsl ${OUTLOG}.2 &gt; $TMPFILE
#convert guide XML output to HTML format using $XLSTP
$XSLTP ${WEBDIR}/xsl/guide-main.xsl
$TMPFILE &gt; ${WEBDIR}/index-changelog.html
#fix perms
chmod 0644 ${WEBDIR}/index-changelog.html
#automatically send cvs mail if $CVSMAIL is set to "yes"
if [ "$CVSMAIL" = "yes" ]
then
        /usr/bin/cvs2cl.pl -f ${OUTMAIL} -l "${cvsdate}"
        mutt -x gentoo-cvs -s "cvs log for $nicedate" &gt; ${OUTMAIL}
fi
</pre>

<p>
Aunque este guión pueda parecer significativamente más complicado que la
versión anterior, realmente solo contiene cuatro o cinco lineas clave
adicionales; el resto de las adiciones son bien comentarios, bien
definiciones de variables de entorno.
</p>

<p>
Ahora explicaré cómo las nuevas partes relacionadas con XML del guión
cvslog.sh funcionan. Primero, llamamos a cvs2cl.pl y le indicamos que genere
un Changelog basado en XML conteniendo todos los ficheros que fueron
modificados ayer. Entonces, esta salida XML es ejecutada a través de sed
para eliminar cualquier atributo xmlns= innecesario del XML. A continuación,
le entregamos este XML ligeramente tocado a xsltproc y le decimos que
aplique el procesamiento que se encuentra en cvs.xsl; estas instrucciones
transforman la salida XML de cvs2cl.pl en un documento guía XML
apropiado. Finalmente, usamos de nuevo xsltproc para convertir este
documento guía XML en un HTML preparado para la Web, el cual es inyectado en
el directorio htdocs de nuestro servidor Web. La página HTML Changelog
generada está completa y este es el resultado:
</p>

<figure link="/images/docs/l-redesign-12.gif"
        caption="La página Changelog automáticamente generada"/>

<p>
Se sorprendería de la simplicidad del XSLT contenido en cvs.xsl. En él,
especificamos tres plantillas para &lt;changelog&gt;, &lt;entry&gt;, y
&lt;file&gt;. También hacemos referencia a unas pocas etiquetas en el fuente
XML, incluyendo &lt;date&gt;, &lt;author&gt; y &lt;msg&gt; (los cuales usa
cvs2cl.pl para especificar los comentarios del autor del commit en
CVS). cvs.xsl hace bastante, considerando que tiene alrededor de 35 líneas
de código:
</p>

<pre caption="El cvs.xsl">
&lt;?xml version='1.0' encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
&lt;xsl:output encoding="iso-8859-1" method="xml" indent="yes"/&gt;
&lt;xsl:template match="/changelog"&gt;
        &lt;mainpage id="changelog"&gt;
        &lt;title&gt;Gentoo Linux Development Changelog for &lt;xsl:value-of select="entry/date"/&gt;&lt;/title&gt;
        &lt;author title="script"&gt;cvs-xml.xsl&lt;/author&gt;
        &lt;standout&gt;
                &lt;title&gt;About the Development Changelog&lt;/title&gt;
                &lt;body&gt;
                        This page contains a daily Changelog, listing all modifications made to our
                        CVS tree on &lt;xsl:value-of select="entry/date"/&gt; (yesterday).
                &lt;/body&gt;
        &lt;/standout&gt;
        &lt;version&gt;1.0.0&lt;/version&gt;
        &lt;date&gt;&lt;xsl:value-of select="entry/date"/&gt;&lt;/date&gt;
        &lt;chapter&gt;
                &lt;xsl:apply-templates select="entry"/&gt;
        &lt;/chapter&gt;
        &lt;/mainpage&gt;
&lt;/xsl:template&gt;
&lt;xsl:template match="entry"&gt;
        &lt;section&gt;
                &lt;title&gt;Files modified by &lt;xsl:value-of select="author"/&gt; at
                                        &lt;xsl:value-of select="time"/&gt;
                &lt;/title&gt;
                &lt;body&gt;
                        &lt;note&gt;&lt;xsl:value-of select="msg"/&gt;&lt;/note&gt;
                        &lt;ul&gt;
                                &lt;xsl:apply-templates select="file"/&gt;
                        &lt;/ul&gt;
                &lt;/body&gt;
        &lt;/section&gt;
&lt;/xsl:template&gt;
&lt;xsl:template match="file"&gt;
        &lt;li&gt;&lt;path&gt;&lt;xsl:value-of select="name"/&gt;&lt;/path&gt;, &lt;xsl:value-of select="revision"/&gt;&lt;/li&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre>

</body>
</section>
<section>
<title>¡Proyecto completo!</title>
<body>

<p>
Desde los comienzos del rediseño del sitio Web Gentoo Linux, hemos creado un
plan centrado en el usuario, diseñado un nuevo sistema de documentación
basado en XML, un nuevo logo, un nuevo aspecto para el sitio, convertido las
partes restantes a XML y añadido una nueva página Changelog basada en XML
¡Uau! Espero que haya disfrutado siguiendo mi progreso y que haya encontrado
un abanico de ideas e inspiración a lo largo del camino. He recibido algunas
peticiones de más información y código relacionado con el rediseño, por lo
que he preparado una página especial
<uri link="http://www.gentoo.org/proj/es/site.xml">Proyectos XML de Gentoo
Linux</uri> que contiene el más reciente XML, XSLT, guiones y documentación
usada para www.gentoo.org. Además de visitar la página de Proyectos,
asegúrese de echar un vistazo a los valiosos recursos listados abajo.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Recursos</title>
<section>
<body>

<ul>
  <li>
    Compruebe la página de
    <uri link="http://www.gentoo.org/proj/en/site.xml"> proyectos XML
    de Gentoo Linux</uri> si está interesado en usar el sistema guide
    XML de Gentoo Linux como base para sus propios proyectos. Ahí se
    puede encontrar lo último en materia XML/XSLT.
  </li>
  <li>
    Lea los otros artículos de esta serie de developerWorks sobre el
    rediseño del sitio Web www.gentoo.org usando tecnologías como XML,
    XSLT, y Python:
    <ul>
      <li>
        En la <uri link="/doc/es/articles/l-redesign-1.xml">Parte 1</uri>,
        el autor crea un plan centrado en el usuario y presenta pytext, un
        intérprete incrustado de Python (Marzo 2001).
      </li>
      <li>
        En la <uri link="/doc/es/articles/l-redesign-2.xml">Parte 2</uri>,
        Daniel nos muestra el nuevo sistema de documentación y pone en
        marcha una lista de correo diaria CVS-log (Mayo 2001).
      </li>
      <li>
        En la <uri link="/doc/es/articles/l-redesign-3.xml">Parte 3</uri>,
        crea un nuevo aspecto para el sitio (Julio 2001).
      </li>
    </ul>
  </li>
  <li>
    Aprenda más acerca de las hojas de estilo en cascada (CSS) visitando la
    página <uri link="http://www.w3.org/Style/CSS/">CSS</uri> en el
    Consorcio de la World Wide Web o W3C. Puede encontrar más sobre
    <uri link="http://www.w3.org/XML">XML</uri>,
    <uri link="http://www.w3.org/TR/xslt">XSLT</uri> y muchas más
    tecnologías igualmente.
  </li>
  <li>
    Eche un vistazo a <uri link="http://www.xara.com/">Xara.com</uri>, el
    lugar de Xara X -- un excelente paquete de dibujo vectorial para
    Windows. Sin apenas grandes pretensiones y una velocidad impresionante,
    obtiene mi recomendación personal.
  </li>
  <li>Aprenda incluso más sober XSLT en <uri>http://www.xslt.com</uri></li>
  <li>
    Cuando despierte, pruebe Sablotron, un procesador XSLT bueno y rápido
disponible en <uri>http://www.gingerall.com</uri>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
