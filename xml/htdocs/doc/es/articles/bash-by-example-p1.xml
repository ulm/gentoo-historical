<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/articles/bash-by-example-p1.xml,v 1.3 2007/04/10 16:34:19 chiguire Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/es/articles/bash-by-example-p1.xml" disclaimer="articles" lang="es">
<title>Bash mediante ejemplos, parte 1</title>

<author title="Author">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traductor">
  <mail link="pabloa@gmail.com">Pablo Antonio</mail>
</author>

<abstract>
Aprendiendo cómo programar en el lenguaje de scripting de bash, tu interacción 
del "día a día" con Linux se hará más divertida y productiva, y serás capaz de 
construir a partir de lo que brinda UNIX de manera estándar (como las tuberías
y redirecciones) que ya conoces y amas. En esta serie de tres partes, Daniel
Robbins te enseñará cómo programar en bash mediante ejemplos. Cubrirá los
aspectos absolutamente básicos (haciendo de esta una excelente serie para
principiantes) y mostrará características más avanzadas de bash a medida que la
serie avance.
</abstract>

<!-- La versión original de este artículo fue publicada en "IBM developerWorks",
y es propiedad de Westtech Information Services. Este documento es una versión
actualizada del artículo original, y contiene varias mejoras hechas por el equipo
de Documentación de Gentoo Linux -->

<version>1.3</version>
<date>2005-10-09</date>

<chapter>
<title>Programación fundamental en la "Bourne again shell" (bash)</title>
<section>
<title>Introducción</title>
<body>

<p>
Te puedes llegar a preguntar por qué deberías aprender programación en Bash.
Bueno, aquí hay un par de razones que te presionan para hacerlo:
</p>

</body>
</section>
<section>
<title>Ya la estás corriendo</title>
<body>

<p>
Si lo chequeas, probablemente encontrarás que ya estás corriendo bash en este
momento. Aún si has cambiado tu "shell" por defecto, bash está probablemente
corriendo aún en algún lugar de tu sistema, porque es la shell de Linux
estándar y es usada para una gran variedad de propósitos. Porque bash ya está
corriendo, cualquier número de scripts adicionales que corras serán
intrínsecamente eficientes en cuanto al uso de memoria porque la comparten
con algún proceso de bash que ya se encuentra corriendo. ¿Por qué cargar un
intérprete de 500K si ya estás corriendo algo que puede hacer el trabajo, y
hacerlo bien?
</p>

</body>
</section>
<section>
<title>Ya la estás usando</title>
<body>

<p>
No sólo ya estás corriendo bash, sino que además estás interectuando con bash
diariamente. Siempre está allí, así que tiene sentido aprender cómo usarla
en su máximo potencial. Hacerlo hará tu experiencia con bash más divertida
y productiva. Pero... ¿Por qué deberías aprender programación en bash? Fácil,
porque ya piensas en términos de comandos, copiando archivos, y usando las
tuberías y redirrecionando salidas. ¿No deberías aprender un lenguaje que te
permita trabajar y construir a partir de estas poderosas herramientas que ya
sabes utilizar? Las shells dan libertad al potencial de los sistemas UNIX, y
bash es la shell de Linux.
Es el "pegamento" de alto nivel entre tú y la máquina. Crece en tu conocimiento
sobre bash y automáticamente incrementarás tu productividad bajo Linux y UNIX
-- es así de simple.
</p>

</body>
</section>
<section>
<title>Confusión con bash</title>
<body>

<p>
Aprender bash del modo equivocado puede ser un proceso muy confuso. Muchos
usuarios novatos escriben <c>man bash</c> para ver la página del manual de bash
("man page"), sólo para ser confrontados con una muy concisa y técnica
descripción de la funcionalidad de la shell. Otros intentan con
<c>info bash</c> (para ver la documentación que provee GNU info), causando que
la página del manual sea reimpresa o, si tienen suerte, verán a lo sumo una
página de documentación escasamente más amigable.
</p>

<p>
Aunque esto puede ser algo entristecedor para los novatos, la documentación
estándar de bash no puede ser todas las cosas para toda la gente, y se orienta
hacia aquellos ya familiarizados con la programación shell en general. Hay
definitivamente un montón de información técnica excelente en la página del
manual ("man page"), pero su utilidad para los principiantes es limitada.
</p>

<p>
Allí es donde esta serie entra en el juego. En ella, te mostraré cómo usar las
construcciones de bash en realidad, para que te encuentres preparado para
escribir tus propios scripts. En vez de descripciones técnicas, te proveeré
explicaciones en tu idioma, para que sepas no sólo qué es lo que algo hace,
sino además cuándo deberías usarlo. Hacia el final esta serie de tres partes,
serás capaz de escribir tus propios scripts complejos para bash, y de estar al
nivel en el que podrás usar bash confortablemente y aumentar tus conocimientos
leyendo (y entendiendo!) la documentación estándar de bash. Comencemos.
</p>

</body>
</section>
<section>
<title>Variables de entorno</title>
<body>

<p>
Bajo bash y bajo casi cualquier shell, el usuario puede definir variables
de entorno, que son guardadas internamente como cadenas de caracteres ASCII.
Una de las cosas más prácticas acerca de las variables de entorno es
que son una parte estándar del modelo de proceso de UNIX. Esto significa que
las variables de entorno no son exclusivas de los scripts de shell, sino
que pueden ser usadas por programas compilados de manera estándar también.
Cuando "exportamos" una variable de entorno bajo bash, cualquier programa
subsecuente que corramos podrá leer lo que le asignamos, sea un script de shell
o no. 
Un buen ejemplo es el comando <c>vipw</c>, que normalmente permite al
superusuario root editar el archivo con la clave ("password") del sistema.
Ajustando la variable de entorno <c>EDITOR</c> con el nombre de tu editor de
texto favorito, puedes configurar a vipw para que lo use en lugar de vi, algo
bastante práctico si estás acostumbrado a xemacs y realmente no te gusta vi.
</p>

<p>
La manera estándar de definir una variable de entorno bajo bash es:
</p>

<pre caption="Definir una variable de entorno">
$ <i>myvar='This is my environment variable!'</i>
</pre>

<p>
El comando de arriba definió una variable de entorno llamada "myvar" que
contiene la cadena "This is my environment variable!". Hay algunas cosas a las
que es necesario prestarle atención en lo anterior: primero, no hay ningún
espacio rodeando al signo "="; cualquier espacio allí resultaría en un error
(pruébalo y confírmalo). La segunda cosa a tener en cuenta es que, aunque
pudimos haber omitido las comillas si se tratase de una sola palabra, son
necesarias cuando el valor de la variable de entorno es más de una palabra
(contiene espacios o tabs).
</p>

<note>
Para información extremadamente detallada sobre cómo deben ser usadas las
comillas en bash, es probable que la sección "QUOTING" de la "man page" de bash
te resulte útil. La existencia de secuencias especiales de caracteres que son
"expandidas" (reemplazadas) por otros valores complica el modo en que las
cadenas son manejadas en bash. Sólo cubriremos las funciones más
usadas/importantes de las comillas en esta serie.
</note>

<p>
En tercer lugar, mientras que normalmente podemos usar comillas dobles en vez
de comillas simples, hacerlo en el ejemplo anterior hubiera causado un error.
¿Por qué? Porque el usar comillas simples desactiva una de las características
de bash llamada "expansión", donde caracteres y secuencias de caracteres
especiales son reemplazados por valores. Por ejemplo, el caracter "!" es el
caracter de expansión del historial, que bash normalmente reemplaza por un
comando previamente escrito. (No cubriremos la expansión del historial en esta
serie de artículos, porque no es usada frecuentemente en la programación en
bash. Para más información sobre eso, mira la sección "HISTORY EXPANSION" en la
página del manual ("man page") de bash.)
Aunque este comportamiento al estilo "macro" puede ser muy práctico, en esta
ocasión queremos un signo de exclamación literal al final del valor de nuestra
variable de entorno, en vez de un "macro".
</p>

<p>
Ahora, echémosle una mirada a cómo uno usa en realidad una variable de entorno.
Aquí hay un ejemplo:
</p>

<pre caption="Usar variables de entorno">
$ <i>echo $myvar</i>
This is my environment variable!
</pre>

<p>
Precediendo el nombre de nuestra variable de entorno con un $, podemos hacer
que bash la reemplace por el valor de myvar. En la terminología de bash, esto
se llama "expansión de variable" ("variable expansion"). Pero, si probamos lo
siguiente:
</p>

<pre caption="Primer intento de uso de expansión de una variable">
$ <i>echo foo$myvarbar</i>
foo
</pre>

<p>
Queríamos que esto imprima "fooThis is my environment variable!bar", pero no
funcionó. ¿Cuál fue el error? En pocas palabras, la facilidad de expansión
de variable de bash se encontró confundida. No pudo dilucidar si queríamos
expandir la variable $m, $my, $myvar, $myvarbar, etc. ¿Cómo podemos ser más
explícitos y claramente decirle a bash a qué variables nos estamos refiriendo?
Intenta esto:
</p>

<pre caption="Expansión de variable; segundo intento.">
$ <i>echo foo${myvar}bar</i>
fooThis is my environment variable!bar
</pre>

<p>
Como puedes ver, podemos encuadrar el nombre de nuestra variable de entorno
entre llaves cuando no se encuentra claramente separada del texto que la rodea.
Mientras que $myvar es más rápido de escribir y funcionará en la mayoría de las
ocasiones, ${myvar} puede ser comprendida correctamente en casi cualquier
situación. Más allá de eso, ambas hacen lo mismo, y verás ambas formas de
expansión de variable en el resto de la serie. Querrás recordar que tienes que
usar la forma más explícita (con las llaves) cuando tu variable de entorno
no se encuentre aislada del texto que la rodea mediante algún espacio en blanco
(espacio o tabs).
</p>

<p>
Recuerda que también mencionamos que podemos "exportar" variables. Cuando
exportamos una variable de entorno, esta se encuentra automáticamente
disponible en el entorno de cualquier script o ejecutable que se corra
subsecuentemente. Los scripts de shell pueden acceder a la variable de entorno
usando el soporte que brinda bash intrínsecamente, mientras que los programas
en C pueden usar la función getenv(). Aquí hay un código en C de ejemplo que
deberías escribir y compilar -- nos permitirá entender las variables de
entorno desde la perspectiva de C:
</p>

<pre
caption="myvar.c -- un programa en C de ejemplo para las variables de entorno">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
  char *myenvvar=getenv("EDITOR");
  printf("The editor environment variable is set to %s\n",myenvvar);
}
</pre>

<p>
Guarda el código anterior en un archivo llamado <path>myenv.c</path>, y luego
compílalo usando el siguiente comando:
</p>

<pre caption="Compilar el código de arriba">
$ <i>gcc myenv.c -o myenv</i>
</pre>

<p>
Ahora habrá un programa ejecutable en tu directorio que, al ser corrido,
imprimirá el valor de la variable de entorno <c>EDITOR</c>, si es que lo tiene.
Esto es lo que pasa cuando lo corro en mi máquina:
</p>

<pre caption="Correr el programa de arriba">
$ <i>./myenv</i>
The editor environment variable is set to (null)
</pre>

<p>
Hmmm... Como la variable de entorno <c>EDITOR</c> no poseía ningún valor,
el programa en C recibe una cadena nula. Intentemos nuevamente dándole un valor
específico:
</p>

<pre caption="Probar con un valor específico">
$ <i>EDITOR=xemacs</i>
$ <i>./myenv</i>
The editor environment variable is set to (null)
</pre>

<p>
Aunque pudiste haber esperado que myenv imprima el valor "xemacs", no funcionó,
porque no exportamos la variable de entorno <c>EDITOR</c>. Esta vez lo haremos
funcionar:
</p>

<pre caption="Mismo programa luego de exportar la variable">
$ <i>export EDITOR</i>
$ <i>./myenv</i>
The editor environment variable is set to xemacs
</pre>

<p>
Así, has visto con tus propios ojos que otro proceso (en este caso nuestro
programa en C) no puede ver la variable de entorno hasta que esta es exportada.
Incidentalmente, si tú quieres, puedes definir y exportar una variable de
entorno usando una sola línea, del siguiente modo:
</p>

<pre
caption="Definir y exportar una variable de entorno en un solo comando">
$ <i>export EDITOR=xemacs</i>
</pre>

<p>
Funciona idénticamente a la versión de dos líneas. Este sería un buen momento
para enseñar cómo borrar una variable de entorno usando <c>unset</c>:
</p>

<pre caption="Borrar una variable de entorno">
$ <i>unset EDITOR</i>
$ <i>./myenv</i>
The editor environment variable is set to (null)
</pre>

</body>
</section>
<section>
<title>Vistazo a los cortes de cadenas</title>
<body>

<p>
Cortar cadenas -- esto es, separar una cadena original en más pequeños y
separados trozos -- es una de esas tareas que es llevada a cabo diariamente por
tu script de shell tipo. Muchas veces, los scripts de shell necesitan tomar una
ruta completa, y encontrar el archivo o directorio final. Aunque es posible (y
divertido!) programar esto en bash, el ejecutable estándar de UNIX
<c>basename</c> hace esto extremadamente bien:
</p>

<pre caption="Usar basename">
$ <i>basename /usr/local/share/doc/foo/foo.txt</i>
foo.txt
$ <i>basename /usr/home/drobbins</i>
drobbins
</pre>

<p>
<c>basename</c> es una muy práctica herramienta para cortar cadenas.
Su acompañante, llamado <c>dirname</c>, devuelve la "otra" parte de la ruta que
<c>basename</c> desecha:
</p>

<pre caption="Usar dirname">
$ <i>dirname /usr/local/share/doc/foo/foo.txt</i>
/usr/local/share/doc/foo
$ <i>dirname /usr/home/drobbins/</i>
/usr/home
</pre>

<note>
Ambos <c>dirname</c> y <c>basename</c> no miran ningún archivo ni directorio
en el disco; son puramente comandos de manipulación de cadenas.
</note>

</body>
</section>
<section>
<title>Sustitución de comandos</title>
<body>

<p>
Una cosa bastante práctica de saber es cómo crear una variable de entorno que
contenga el resultado de un comando ejecutable. Esto es muy fácil de hacer:
</p>

<pre
caption="Crear una variable de entorno con el resultado de un comando">
$ <i>MYDIR=`dirname /usr/local/share/doc/foo/foo.txt`</i>
$ <i>echo $MYDIR</i>
/usr/local/share/doc/foo
</pre>

<p>
Lo que hicimos arriba se llama <e>sustitución de comando</e> ("command
substitution"). Varias cosas merecen ser notadas en este ejemplo. En la primera
línea, simplemente encuadramos el comando que queríamos ejecutar entre
esas comillas especiales. Esas comillas no son las comillas simples estándar,
sino que son las que se imprimen al oprimir una de las teclas del teclado que
normalmente se encuentra por encima de la tecla Tab. Podemos hacer exactamente
lo mismo con la sintaxis alternativa para la sustitución de comandos de bash:
</p>

<pre caption="Sintaxis alternativa para la sustitución de comandos">
$ <i>MYDIR=$(dirname /usr/local/share/doc/foo/foo.txt)</i>
$ <i>echo $MYDIR</i>
/usr/local/share/doc/foo
</pre>

<p>
Como puedes ver, bash provee múltiples maneras de realizar exactamentela misma
cosa. Usando la sustitución de comandos, podemos ubicar cualquier comando o
tuberías con comandos entre <e>` `</e> o <e>$( )</e> y asignar su resultado
a una variable de entorno. ¡Qué cosa práctica! Aquí hay un ejemplo de
cómo usar tuberías con la sustitución de comandos:
</p>

<pre caption="Tuberías y sustitución de comandos">
$ <i>MYFILES=$(ls /etc | grep pa)</i>
$ <i>echo $MYFILES</i>
pam.d passwd
</pre>

</body>
</section>
<section>
<title>Cortando cadenas como un profesional</title>
<body>

<p>
Si bien <c>basename</c> y <c>dirname</c> son herramientas grandiosas, hay
momentos en los que podemos necesitar realizar operaciones de corte de cadenas
de una manera más avanzada que sólo manipulaciones estándar con las rutas.
En esos casos, podemos aprovechar la característica intrínseca avanzada de bash
de expansión de variable. Ya hemos usado la manera estándar de expansión de
variable, que se ve como esto: ${MYVAR}. Pero bash puede también realizar
cortes de cadenas prácticos por sí mismo. Échale una mirada a estos
ejemplos:
</p>

<pre caption="Ejemplos de corte de cadenas">
$ <i>MYVAR=foodforthought.jpg</i>
$ <i>echo ${MYVAR##*fo}</i>
rthought.jpg
$ <i>echo ${MYVAR#*fo}</i>
odforthought.jpg
</pre>

<p>
En el primer ejemplo, escribimos ${MYVAR##*fo}. ¿Qué significa esto
exactamente? Básicamente, dentro de ${ }, escribimos el nombre de la variable
de entorno, dos ##s, y una "wildcard" (comodín, representación de caracteres
o cadenas de caracteres no explicitados), "*fo". Luego, bash tomó <c>MYVAR</c>,
encontró la más larga sub-cadena desde el comienzo de la cadena
"foodforthought.jpg" que encajaba con la "wildcard" "*fo", y realizó el corte
desde el comienzo de la cadena principal. Esto es un poco difícil de asimilar
a la primera, así que para entender cómo funciona esta opción especial de "##",
sigamos los pasos que realizó bash para completar esta expansión. Primero,
comenzó buscando las sub-cadenas desde el principio de "foodforthought.jpg"
que encajaran con la "wildcard" "*fo". Aquí están las sub-cadenas que chequeó:
</p>

<pre caption="Sub-cadenas siendo chequeadas">
f       
fo              MATCHES *fo
foo     
food
foodf           
foodfo          MATCHES *fo
foodfor
foodfort        
foodforth
foodfortho      
foodforthou
foodforthoug
foodforthought
foodforthought.j
foodforthought.jp
foodforthought.jpg
</pre>

<p>
Luego de buscar sub-cadenas que encajaran (puedes ver que bash encontró dos)
seleccionó la más larga, la eliminó del inicio de la cadena original,
y devolvió el resultado.
</p>

<p>
La segunda forma de expansión de variable mostrada arriba es casi idéntica a
la primera, excepto que usa sólo un "#" -- y bash realiza un proceso muy
muy similar. Chequea las mismas sub-cadenas que chequeó en nuestro primer
ejemplo, sólo que bash ahora quita la más corta de nuestra cadena original,
y devuelve el resultado. Entonces, tan pronto como determina que la subcadena
"fo" es lo que buscaba, elimina "fo" de nuestra cadena y devuelve
"odforthought.jpg".
</p>

<p>
Esto puede parecer extremadamente críptico, así que te mostraré una manera
fácil de recordar estas herramientas. Cuando buscamos la sub-cadena más larga,
usamos ## (porque ## es más largo que #). Cuando buscamos la más corta, usamos
#. ¿Ves? ¡No es tan difícil de recordar! Espera. ¿Cómo recordamos que debemos
usar el caracter '#' para eliminar desde el "principio" de una cadena? ¡Simple!
Notarás que en un teclado americano, shift-4 es "$", que es el caracter de
expansión de variable de bash. En el teclado, inmediatamente a la izquierda de
"$" está "#". Entonces, puedes ver que "#" está "al principio" de "$", y así
(de acuerdo a nuestra regla mnemotécnica), "#" elimina caracteres desde el
principio de la cadena. Te puedes llegar a preguntar cómo eliminamos caracteres
ubicados al final de la cadena. Si adivinaste que usamos el caracter
inmediatamente a la derecha de "$" en el teclado americano ("%"),
estás en lo cierto! Aquí hay algunos ejemplos rápidos sobre cómo cortar
porciones finales de cadenas:
</p>

<pre caption="">
$ <i>MYFOO="chickensoup.tar.gz"</i>
$ <i>echo ${MYFOO%%.*}</i>
chickensoup
$ <i>echo ${MYFOO%.*}</i>
chickensoup.tar
</pre>

<p>
Como puedes ver, las opciones de expansión de variable % y %% funcionan
del mismo modo que # y ##, excepto que eliminan la "wildcard" del final de la
cadena. Nota que no estás obligado a usar el caracter "*" si quieres eliminar
una sub-cadena específica del final:
</p>

<pre caption="Cortar sub-cadenas del final">
<i>MYFOOD="chickensoup"</i>
$ <i>echo ${MYFOOD%%soup}</i>
chicken
</pre>

<p>
En este ejemplo, no importa si usas "%%" o "%", ya que sólo una sub-cadena
puede encajar. Y recuerda, si te olvidas si debes usar "#" o "%", mira las
teclas 3, 4, y 5 en tu teclado y te darás cuenta.
</p>

<p>
Podemos usar otra forma de expansión de variable para seleccionar una
sub-cadena específica, basándonos en un punto de inicio y una longitud.
Intenta escribir las siguienes líneas en bash:
</p>

<pre caption="Seleccionar una sub-cadena específica">
$ <i>EXCLAIM=cowabunga</i>
$ <i>echo ${EXCLAIM:0:3}</i>
cow
$ <i>echo ${EXCLAIM:3:7}</i>
abunga
</pre>

<p>
Esta forma de corte de cadena puede sernos muy útil; simplemente especifica el
caracter a partir del cual iniciar y la longitud de la sub-cadena, todo
separado por dos puntos.
</p>

</body>
</section>
<section>
<title>Poniendo en práctica el corte de cadenas</title>
<body>

<p>
Ahora que hemos aprendido todo acerca del corte de cadenas, escribamos un
pequeño y simple script de shell. Nuestro script aceptará un sólo archivo como
argumento, e imprimirá si parece ser un "tarball" o no. Para determinar si se
trata de un "tarball", se fijará en el patrón ".tar" al final del archivo.
Aquí está:
</p>

<pre caption="mytar.sh -- un script de ejemplo">
#!/bin/bash

if [ "${1##*.}" = "tar" ]
then
       echo This appears to be a tarball.
else
       echo At first glance, this does not appear to be a tarball.
fi
</pre>

<p>
Para correr este script, transcríbelo dentro a un archivo llamado
<path>mytar.sh</path>, y luego escribe <c>chmod 755 mytar.sh</c> para hacerlo
ejecutable. Luego, pruébalo con un "tarball" del siguiente modo:
</p>

<pre caption="Probar el script">
$ <i>./mytar.sh thisfile.tar</i>
This appears to be a tarball.
$ <i>./mytar.sh thatfile.gz</i>
At first glance, this does not appear to be a tarball.
</pre>

<p>
OK, funciona, pero no es muy funcional. Antes de que lo hagamos más útil,
echémosle una mirada a la construcción "if" usada arriba. En ella, tenemos una
expresión booleana. En bash, el operador de comparación "=" chequea la igualdad
de cadenas. En bash, todas las expresiones booleanas son encuadradas en
corchetes. ¿Pero qué es lo que la expresión booleana prueba en realidad?
Echémosle una mirada a la parte izquierda. De acuerdo con lo que hemos
aprendido sobre corte de cadenas, "${1##*.}" eliminará la sub-cadena más larga
que encaje con "*." del principio de nuestra cadena contenida en la variable
de entorno "1", devolviendo el resultado. Esto causará que se devuelva todo lo
escrito luego del último ".". Obviamente, si el archivo termina en ".tar",
tendremos "tar" como resultado, y la condición se cumplirá.
</p>

<p>
Te puedes estar preguntando qué representa la variable de entorno "1". Muy
simple -- $1 es el primer argumento recibido por el script desde la línea de
comandos, $2 es el segundo, etc. OK, ahora que hemos repasado la función,
podemos echar una primera mirada a las instrucciones "if".
</p>

</body>
</section>
<section>
<title>Instrucciones "if"</title>
<body>

<p>
Como la mayoría de los lenguajes, bash tiene su propia implementación de
condicionales. Cuando la uses, ajústate al formato de arriba; esto es, mantén
el "if" y el "then" en líneas separadas, y procura que el "else" y el "fi"
final (y requerido) estén alineados horizontalmente con los primeros. Esto hace
que el código sea más fácil de entender y posibilita encontrar los errores más
rápidamente. Además de la forma de "if,else", hay algunas otras formas de
instrucciones "if":
</p>

<pre caption="Forma básica de la instrucción if">
if      [ condition ]
then
        action
fi
</pre>

<p>
Esta realiza una acción sólo si la condición es verdadera; caso contrario, no
realiza ninguna acción y continúa ejecutando cualquier línea luego del "fi".
</p>

<pre
caption="Chequear condiciones antes de seguir después del fi">
if [ condition ]
then 
        action
elif [ condition2 ]
then
        action2
.
.
.
elif [ condition3 ]
then

else
        actionx
fi
</pre>

<p>
La forma "elif" de arriba probará consecutivamente cada condición y ejecutará
la acción correspondiente a la primera condición verdadera. Si ninguna de las
condiciones es verdadera, ejecutará la acción del "else", si la hay, y
luego continuará ejecutando las líneas que sigan a la instrucción entera
de"if,elif,else".
</p>

</body>
</section>
<section>
<title>La próxima vez</title>
<body>

<p>
Ahora que hemos cubierto lo más básico de bash, es tiempo de poner manos a la
obra y escribir algunos scripts reales. En el próximo artículo, cubriré las
construcciones de bucles (iteraciones), funciones, "namespace" (ámbito de
variables), y otros temas esenciales.
Luego, estaremos listos para escribir algunos scripts más complicados. En el
tercer artículo, nos enfocaremos casi exclusivamente en scripts y funciones más
complejos, como también en varias opciones de diseño de scripts en bash. Nos
vemos en el siguiente!
</p>

</body>
</section>
</chapter>

<chapter>
<title>Recursos</title>
<section>
<title>Enlaces útiles</title>
<body>

<ul>
  <li>
    Lee <uri
    link="http://www.gentoo.org/doc/es/articles/bash-by-example-p2.xml">Bash
    mediante ejemplos, parte 2</uri>.
  </li>
  <li>
    Lee <uri
    link="http://www.gentoo.org/doc/es/articles/bash-by-example-p3.xml">Bash
    mediante ejemplos, parte 3</uri>.
  </li>
  <li>
    Visita <uri link="http://www.gnu.org/software/bash/bash.html">la página
    de bash de GNU</uri>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>



























