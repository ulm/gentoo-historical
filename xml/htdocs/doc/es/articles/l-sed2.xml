<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/articles/l-sed2.xml,v 1.2 2009/10/26 20:30:13 chiguire Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/es/articles/l-sed2.xml" disclaimer="articles" lang="es">
<title>Sed mediante ejemplos, Parte 2</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traductor">
  <mail link="LinuxBlues@gentoo-es.org">LinuxBlues</mail>
</author>


<abstract>
Sed es un poderoso y compacto editor de flujos de texto. En este artículo, el
segundo de la serie, Daniel muestra cómo realizar sustituciones de cadenas;
crear archivos de comandos más amplios y usar los comandos de sed para añadir,
insertar y modificar una línea.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.2</version>
<date>2005-10-09</date>

<chapter>
<title>Cómo aprovechar más el editor UNIX</title>
<section>
<title>¡Sustitución!</title>
<body>

<p>
Veamos uno de los comandos más útiles de sed, el de sustitución. Usándolo,
podemos reemplazar una cadena en concreto o la expresión regular coincidente
con otra cadena. He aquí un ejemplo del uso más básico de este comando:
</p>

<pre caption="El uso más básico del comando de sustitución">
$ <i>sed -e 's/foo/bar/' miarchivo.txt</i>
</pre>

<p>
El comando anterior sacará los contenidos de miarchivo.txt a stdout, con la
primera aparición de 'foo' (si es que hay alguna) reemplazada en cada línea
por la cadena 'bar'. Por favor, hay que tener en cuenta que he dicho la
primera aparición en cada línea, a pesar de que esto no es lo que se desea
normalmente. Cuando quiero realizar la sustitución de una cadena, normalmente
la quiero realizar globalmente. Dicho con otras palabras, quiero reemplazar la
expresión todas las veces que se muestra, como sigue:
</p>

<pre caption="Reemplazar todas las coincidencias en cada línea">
$ <i>sed -e 's/foo/bar/g' miarchivo.txt</i>
</pre>

<p>
La opción adicional 'g' después de la última barra le indica a sed que debe
realizar el reemplazo de forma global.
</p>

<p>
He aquí algunas otras cosas que se deben saber acerca del comando de
sustitución <c>s///</c>. La primera es que se trata de un comando y de un
comando únicamente; no hay ninguna dirección mostrada en los ejemplos
anteriores. Lo cual significa que el comando <c>s///</c> puede usarse con
directivas acerca de las direcciones a las cuales se aplicará, como se muestra:
</p>

<pre caption="Especificar las líneas a las que se aplicará el comando">
$ <i>sed -e '1,10s/enchantment/entrapment/g' miarchivo2.txt</i>
</pre>

<p>
El ejemplo anterior causará que todas las veces que aparezca 'enchantment' se
reemplace por 'entrapment', pero sólo hasta la línea 10, inclusive.
</p>

<pre caption="Especificar más opciones">
$ <i>sed -e '/^$/,/^FIN/s/colinas/montañas/g' miarchivo3.txt</i>
</pre>

<p>
Este ejemplo cambiará 'colinas' por 'montañas', pero únicamente en los
bloques de texto que comiencen con una línea en blanco, y que terminen con una
línea que comience con los tres caracteres 'FIN', inclusive.
</p>

<p>
Otra de las buenas cosas acerca del comando <c>s///</c> es que tenemos muchas
opciones cuando usamos estos <c>/</c> separadores. Si estamos realizando la
sustitución de una cadena y la expresión regular o el reemplazo tiene muchas
barras, podemos cambiar el separador especificando un carácter distinto
después de la 's'. Por ejemplo, lo siguiente cambiará el contenido cambiando
<path>/usr/local</path> por <path>/usr</path>:
</p>

<pre caption="Reemplazar todas las apariciones de una cadena con otra">
$ <i>sed -e 's:/usr/local:/usr:g' milista.txt</i>
</pre>

<note>
En este ejemplo, estamos usando los dos puntos como separador. Si alguna vez
necesitamos especificar el carácter separador en nuestra expresión regular hay
que ponerle antes una barra invertida.
</note>

</body>
</section>
<section>
<title>La caótica confusión con las expreg</title>
<body>

<p>
Hasta ahora, únicamente hemos realizado una simple sustitución de cadenas.
Aunque esto puede ser muy útil, podemos también buscar expresiones regulares.
Por ejemplo, el siguiente comando sed encontrará una frase que comience con
'&lt;' y termine con '&gt;', y que contenga cualquier número de caracteres
entremedias. Esta frase se borrará (será reemplazada por una cadena sin
contenido):
</p>

<pre caption="Borrar la frase especificada">
$ <i>sed -e 's/&lt;.*&gt;//g' miarchivo.html</i>
</pre>

<p>
Un buen comienzo con un archivo de comandos sed sería eliminar todas las
etiquetas HTML de un archivo, pero no funcionará de forma correcta, debido a
algo que hace especiales a las expresiones regulares. ¿Cuál es la razón?
Cuando sed intenta encontrar la expresión regular en una línea, encuentra la
coincidencia más larga en la línea. Esto no era ningún problema en mi
anterior artículo acerca de sed, dado que estaba usando los comandos <c>d</c>
y <c>p</c>, que borrarían la línea completa de todas formas. Pero cuando
usamos el comando <c>s///</c>, es muy diferente, dado que todo aquello con lo
que coincida la expresión regular será reemplazado con la cadena de
sustitución, o en este caso, eliminado. Lo cual significa que, en el ejemplo
anterior, convertirá la siguiente línea:
</p>

<pre caption="ejemplo de código HTML">
&lt;b&gt;Esto&lt;/b&gt; es lo que &lt;b&gt;I&lt;/b&gt; quería decir.
</pre>

<p>
en esta otra:
</p>

<pre caption="Efecto no deseado">
quería decir.
</pre>

<p>
en lugar de hacer esto otro, que era lo que pretendíamos:
</p>

<pre caption="Efecto deseado">
Esto es lo que quería decir.
</pre>

<p>
Afortunadamente, hay una forma sencilla de resolverlo. En lugar de teclear una
expresión regular que indique "un carácter '&lt;' seguido de cualquier número
de caracteres y que termine con un carácter '&gt;'". Lo cual tendrá el efecto
de apuntar a la menor coincidencia posible, en lugar de a la mayor de ellas. El
nuevo comando sería similar a este:
</p>

<pre caption="">
$ <i>sed -e 's/&lt;[^&gt;]*&gt;//g' miarchivo.html</i>
</pre>

<p>
En el ejemplo anterior, el '[^&gt;]' especifica un "carácter que no sea '&gt;'"
y el '*' después del mismo completa la expresión para significar "cero o más
caracteres que no sean '&gt;'". Recomiendo probar este comando con algunos
archivos HTML de ejemplo, encauzarlos con more y comprobar los resultados.
</p>

</body>
</section>
<section>
<title>Coincidencia con más caracteres</title>
<body>

<p>
La sintaxis de expresiones regulares '[ ]' tiene más opciones adicionales. Para
especificar un rango de caracteres se puede usar '-', siempre y cuando no esté
ni en la primera ni en la última posición, como se muestra a continuación:
</p>

<pre caption="Especificar un rango de caracteres">
'[a-x]*'
</pre>

<p>
Apuntará a cero o más caracteres, siempre que cada uno de ellos sea una 'a',
'b','c'...'v','w','x'. Además, la clase de caracteres '[:space:]' está
disponible para coincidir con espacios en blanco. He aquí una lista bastante
completa de clases de caracteres:
</p>


<table>
  <tr>
    <th>Clase de carácter</th>
    <th>Descripción</th>
  </tr>
  <tr>
    <ti>[:alnum:]</ti>
    <ti>Alfanumérico [a-z A-Z 0-9]</ti>
  </tr>
  <tr>
    <ti>[:alpha:]</ti>
    <ti>Alfabético [a-z A-Z]</ti>
  </tr>
  <tr>
    <ti>[:blank:]</ti>
    <ti>Espacios o tabuladores</ti>
  </tr>
  <tr>
    <ti>[:cntrl:]</ti>
    <ti>Cualquier carácter de control</ti>
  </tr>
  <tr>
    <ti>[:digit:]</ti>
    <ti>Dígitos numéricos [0-9]</ti>
  </tr>
  <tr>
    <ti>[:graph:]</ti>
    <ti>Cualquier carácter visible (no espacios en blanco)</ti>
  </tr>
  <tr>
    <ti>[:lower:]</ti>
    <ti>Minúsculas [a-z]</ti>
  </tr>
  <tr>
    <ti>[:print:]</ti>
    <ti>Caracteres que no sean de control</ti>
  </tr>
  <tr>
    <ti>[:punct:]</ti>
    <ti>Caracteres de puntuación</ti>
  </tr>
  <tr>
    <ti>[:space:]</ti>
    <ti>Espacio en blanco</ti>
  </tr>
  <tr>
    <ti>[:upper:]</ti>
    <ti>Mayúsculas [A-Z]</ti>
  </tr>
  <tr>
    <ti>[:xdigit:]</ti>
    <ti>Dígitos hexadecimales [0-9 a-f A-F]</ti>
  </tr>
</table>

<p>
Es una gran ventaja usar clases de caracteres siempre que sea posible, dado que
se adaptan mejor a las locales no inglesas (incluyendo caracteres con acentos
siempre que sea necesario, etc.).
</p>

</body>
</section>
<section>
<title>Asuntos de sustitución avanzada</title>
<body>

<p>
Nos hemos detenido con la realización de simples e incluso complejas
sustituciones directas, pero sed puede hacer mucho más. Podemos referirnos a
partes o a cadenas enteras con las que coincida la expresión regular y usar
estas partes para construir la cadena de reemplazo. Como ejemplo, digamos que
estamos respondiendo a un mensaje. El siguiente ejemplo pondrá el prefijo "Rafa
dijo: " a cada frase:
</p>

<pre caption="Añadir un prefijo a cada frase con cierta cadena">
$ <i>sed -e 's/.*/Rafa dijo: &amp;/' msjorig.txt</i>
</pre>

<p>
La salida será similar a esta:
</p>

<pre caption="Salida del anterior comando">
Rafa dijo: Hola Jaime,
Rafa dijo:
Rafa dijo: ¡Seguro que me gusta este material acerca de sed!
Rafa dijo:
</pre>

<p>
En este ejemplo, usamos el carácter '&amp;' en la cadena de reemplazo, que le
indica a sed que inserte la expresión regular completa con la que coincida. Por
lo que todo lo que coincidió con '.*' (el mayor grupo de cero o más caracteres
en la línea, o la línea completa) puede ser introducido en la cadena de
reemplazo, incluso en múltiples ocasiones. Esto está muy bien, pero sed es
mucho más poderoso aún.
</p>

</body>
</section>
<section>
<title>Aquellos maravillosos paréntesis con barras invertidas</title>
<body>

<p>
Aún mejor que con '&amp;', el comando <c>s///</c> nos permite definir regiones
en nuestra expresión regular, y podemos referirnos a estas regiones
específicas en nuestra cadena de reemplazo. Como ejemplo, digamos que tenemos
un archivo que contiene el siguiente texto:
</p>

<pre caption="Cita del texto">
foo bar oni
eeny meeny miny
larry curly moe
jimmy the weasel
</pre>

<p>
Ahora, digamos que queremos escribir un archivo de comandos sed que reemplace
"eeny meeny miny" con "Victor eeny-meeny Von miny", etc. Para hacerlo, primero
deberíamos escribir una expresión regular con la que coincidan las tres
cadenas, separadas por espacios:
</p>

<pre caption="Coincidir con la expresión regular">
'.* .* .*'
</pre>

<p>
Aquí está. Ahora, definiremos regiones insertando paréntesis con barras
invertidas alrededor de cada región de nuestro interés:
</p>

<pre caption="Definición de regiones">
'\(.*\) \(.*\) \(.*\)'
</pre>

<p>
Esta expresión regular funcionará exactamente igual que la anterior, excepto
porque definirá tres regiones lógicas a las que podremos referirnos en nuestra
cadena de reemplazo. He aquí el archivo de comandos final:
</p>

<pre caption="Archivo de comandos final">
$ <i>sed -e 's/\(.*\) \(.*\) \(.*\)/Victor \1-\2 Von \3/' miarchivo.txt</i>
</pre>

<p>
Como puede verse, nos referimos a cada región delimitada por un paréntesis
tecleando '\x', donde x es el número de región, comenzando por uno. El
resultado será el siguiente:
</p>

<pre caption="Resultado del anterior comando">
Victor foo-bar Von oni
Victor eeny-meeny Von miny
Victor larry-curly Von moe
Victor jimmy-the Von weasel
</pre>

<p>
A medida que uno se familiariza con sed, puede realizarse un procesamiento de
textos realmente poderoso con un mínimo de esfuerzo. Pensemos ahora en cómo
habríamos afrontado este mismo problema con nuestro lenguaje para crear
archivos de comandos favorito -- ¿habríamos sido capaces de encontrar la
solución con una sola línea?
</p>

</body>
</section>
<section>
<title>Combinarlo todo</title>
<body>

<p>
A medida que creamos archivos de comandos con sed más complejos, necesitaremos
la capacidad para introducir más de un comando. Hay varias formas de lograrlo.
Primero podemos usar puntos y comas entre los comandos. Por ejemplo, en esta
serie de comandos se emplea el comando '=', que le indica a sed que muestre el
número de línea, así como el comando <c>p</c>, que le indica a sed que
muestre la línea (dado que estamos en el modo '-n'):
</p>

<pre caption="Primer método, puntos y comas">
$ <i>sed -n -e '=;p' myfile.txt</i>
</pre>

<p>
Cada vez que se indiquen dos o más comandos, se ejecutará cada comando (en
orden) para cada línea del archivo. En el ejemplo anterior, primero se aplica
el comando '=' a la línea 1, y después se le aplica el comando <c>p</c>.
Entonces sed procede con la línea 2 y repite el proceso. Mientras que los
puntos y comas son muy útiles, hay ciertas situaciones en las que no
funcionará. Otra alternativa sería usar dos opciones -e para especificar dos
comandos separados:
</p>

<pre caption="Segundo método, múltiples -e">
$ <i>sed -n -e '=' -e 'p' miarchivo.txt</i>
</pre>

<p>
De todas formas, cuando nos adentremos en comandos más complejos para añadir e
insertar texto, no será suficiente con múltiples opciones '-e'. Para archivos
de comandos complejos con varias líneas, el método más adecuado es poner
todos esos comandos en un archivo diferente. Después haremos referencia a
este archivo de comandos con la opción -f:
</p>

<pre caption="Tercer método, archivo externo con comandos">
$ <i>sed -n -f miscomandos.sed miarchivo.txt</i>
</pre>

<p>
Este método, aunque parezca menos conveniente, siempre funcionará.

</p>

</body>
</section>
<section>
<title>Múltiples comandos en una sola dirección</title>
<body>

<p>
A veces, podemos querer especificar múltiples comandos que se apliquen en una
sola dirección. Lo cual es realmente útil cuando se realizan montones de
<c>s///</c> para modificar palabras o la sintaxis de un archivo. Para realizar
múltiples comandos en una sola dirección, introducimos nuestros comandos sed
en un archivo y usamos los caracteres de llaves '{ }' para agruparlos, como
sigue:
</p>

<pre caption="Introducción de múltiples comandos por dirección">
1,20{
        s/[Ll]inux/GNU\/Linux/g
        s/samba/Samba/g
        s/posix/POSIX/g
}
</pre>

<p>
El ejemplo anterior aplicará tres comandos de sustitución desde la línea 1 a
la 20, inclusive. Se pueden expresar también direcciones con expresiones
regulares o una combinación de ambas:
</p>

<pre caption="Combinación de ambos métodos">
1,/^END/{
        s/[Ll]inux/GNU\/Linux/g
        s/samba/Samba/g
        s/posix/POSIX/g
       p
}
</pre>

<p>
Este ejemplo aplicará todos los comandos entre '{ }' a las líneas que se
encuentren entre la primera y aquella que comience con las letras "END", o
hasta el final del archivo, si no se encuentra "END" antes.
</p>

</body>
</section>
<section>
<title>Añadir, insertar y cambiar de línea</title>
<body>

<p>
Ahora que estamos escribiendo archivos de comandos sed en archivos separados,
podemos aprovechar los comandos para añadir, insertar y cambiar de línea.
Estos comandos insertarán una línea después de la línea actual, insertarán
una línea antes de la línea actual o reemplazarán a la línea actual en el
espacio de patrones. Pueden usarse para insertar múltiples líneas en su
salida.  El comando para insertar líneas se usa como sigue:
</p>

<pre caption="Usar el comando para insertar líneas">
i\
Esta línea se insertará antes de cada línea
</pre>

<p>
Si no se especifica ninguna dirección en la que aplicar este comando, se
aplicará a cada línea y producirá un resultado como el siguiente:
</p>

<pre caption="Resultados del anterior comando">
Esta línea se insertará antes de cada línea
línea 1 aquí
Esta línea se insertará antes de cada línea
línea 2 aquí
Esta línea se insertará antes de cada línea
línea 3 aquí
Esta línea se insertará antes de cada línea
línea 4 aquí
</pre>

<p>
Si se quieren insertar varias líneas antes de la actual, se pueden añadir
agregando una barra invertida a la línea anterior, como se muestra:
</p>

<pre caption="Insertar varias líneas antes de la actual">
i\
inserta esta línea\
y esta otra\
y esta otra\
y, ¡ah!, esta también.
</pre>

<p>
El comando para añadir funciona de forma similar, pero insertará una línea o
líneas después de la actual en el espacio de patrones. Se usa como sigue:
</p>

<pre caption="Añadir líneas después de la actual">
a\
Añade esta línea después de cada línea. ¡Gracias! :)
</pre>

<p>
Por otra parte, el comando para cambiar de línea reemplazará la línea actual
en el espacio de patrones, y se usa como se indica:
</p>

<p>
Dado que el comando para añadir, insertar y cambiar de línea necesitan ser
indicados en varias líneas, es necesario teclearlos en archivos de comandos de
texto e indicar a sed que los ejecute con la opción '-f'. Usar los otros
métodos de sed para introducir comandos resultará problemático.
</p>

</body>
</section>
<section>
<title>La próxima vez</title>
<body>

<p>
La próxima vez, en el último artículo acerca de sed en esta serie, mostraré
muchos ejemplos excelentes de uso en el mundo real para muchos tipos diferentes
de tareas. No solamente mostraré lo que los archivos de comandos hacen sino
porqué lo hacen. Después de consultarlo, dispondremos de muchas ideas
adicionales excelentes acerca de cómo usar sed en nuestros proyectos. ¡Nos
vemos !
</p>

</body>
</section>
</chapter>

<chapter>
<title>Recursos</title>
<section>
<title>Enlaces útiles</title>
<body>

<ul>
  <li>
    Leer los otros artículos acerca de sed de Daniel en developerWorks: "Sed
    mediante ejemplos, <uri link="/doc/es/articles/l-sed1.xml">Parte 1</uri> y
    <uri link="/doc/es/articles/l-sed3.xml">Parte 3</uri>.
  </li>
  <li>
    Comprobar la excelente <uri
    link="http://sed.sourceforge.net/sedfaq.html">
    FAQ de sed</uri> de Eric Pement.
  </li>
  <li>
    Puede encontrar el código fuente de sed en
    <uri>ftp://ftp.gnu.org/pub/gnu/sed</uri>.
  </li>
  <li>
    Eric Pement tiene también una lista muy práctica de <uri
    link="http://sed.sourceforge.net/sed1line.txt">
    sed one-liners</uri> que cualquier aspirante a gurú sed debería consultar.
  </li>
  <li>
    Si nos gustan los libros tradicionales, <uri
    link="http://www.oreilly.com/catalog/sed2/">O'Reilly's sed &amp; awk, 2nd
    Edition</uri> sería una gran elección.
  </li>
<!-- FIXME BOTH DEAD and no other locations, sorry
 <li>
    Maybe you'd like to read <uri
    link="http://www.softlab.ntua.gr/unix/docs/sed.txt">7th edition UNIX's sed
    man page</uri> (circa 1978!).
  </li>
  <li>
    Take Felix von Leitner's short <uri
    link="http://www.math.fu-berlin.de/~leitner/sed/tutorial.html">sed
    tutorial</uri>.
  </li>
    <li>
    Brush up on <uri link="http://vision.eng.shu.ac.uk/C++/misc/regexp/">using
    regular expressions</uri> to find and modify patterns in text in this free,
    dW-exclusive tutorial.
  </li>
-->
</ul>

</body>
</section>
</chapter>

</guide>
