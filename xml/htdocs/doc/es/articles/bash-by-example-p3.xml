<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/articles/bash-by-example-p3.xml,v 1.1 2007/04/10 17:09:43 chiguire Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/es/articles/bash-by-example-p3.xml" lang="es" disclaimer="articles">
<title>Bash by example, Part 3</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traductor">
  <mail link="6thpink@terra.es">Jesús Guerrero</mail>
</author>

<abstract>
En su artículo final de Bash con ejemplos, Daniel Robbins da un buen
repaso al sistema de ebuilds de Gentoo Linux, un excelente ejemplo del
poder verdadero de bash. Paso a paso te enseñará como fue implementado
el sistema de ebuilds, entrando de lleno en técnicas de bash muy
útiles y estrategias de diseño. Al final de este artículo tendrás una
buena idea básica de todo lo que supone la creación de una aplicación
completa basada en bash, así como un posible comienzo para la creación
de tu propio sistema de compilación automática.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.3</version>
<date>2005-10-09</date>

<chapter>
<title>Explorando el sistema de ebuilds</title>
<section>
<title>Entra en el sistema de ebuilds</title>
<body>

<p>
He estado deseando que llegara este capítulo final de <e>Bash con
ejemplos</e>, porque ahora que hemos cubierto los conceptos básicos de
la programación en bash,
<uri link="/doc/es/articles/bash-by-example-p1.xml">Parte 1</uri>
y <uri link="/doc/es/articles/bash-by-example-p2.xml">Parte 2</uri>,
podemos centrarnos en temas más avanzados, como el desarrollo de
aplicaciones en bash y diseño de programas. Te daré una buena dosis de
programación práctica, del mundo real, presentando un proyecto en cuya
codificación y refinamiento he invertido muchas horas: El sistema de
Ebuilds de Gentoo.
</p>

<p>
Soy el arquitecto líder de Gentoo Linux, un sistema Linux de próxima
generación, actualmente en estado beta. Una de mis principales
responsabilidades es asegurarme de que todos los paquetes binarios
(similares a los RPM) se crean correctamente, y funcionan bien en
conjunto. Como probablemente sepas, un sistema Linux estándar no está
compuesto de un solo árbol unificado de fuentes, como en el caso de
BSD, sino que está compuesto de más de 25 paquetes críticos que
funcionan juntos.  Algunos de estos paquetes son:
</p>

<table>
  <tr>
    <th>Paquete</th>
    <th>Descripción</th>
  </tr>
  <tr>
    <ti>linux</ti>
    <ti>El kernel actual</ti>
  </tr>
  <tr>
    <ti>util-linux</ti>
    <ti>Una colección de programas variados relacionados con Linux</ti>
  </tr>
  <tr>
    <ti>e2fsprogs</ti>
    <ti>Una colección de utilidades relacionadas con ext2</ti>
  </tr>
  <tr>
    <ti>glibc</ti>
    <ti>La librería C de GNU</ti>
  </tr>
</table>

<p>
Cada paquete viene en su propio tarball, y es mantenido por
desarrolladores o equipos de desarrollo distintos. Para crear una
distribución, cada paquete debe ser descargado por separado,
compilado, y empaquetado, cada vez que el paquete necesita ser
reparado, actualizado o mejorado. Todo esto debe ser repetido (algunos
paquetes quedan desfasados realmente rápidot). Para ayudar en este
proceso tan repetitivo, he creado el sistema de ebuilds. Escrito casi
por completo en bash. Y para mejorar tu conocimiento de bash, te
enseñaré como implementé las secciones de desempaquetado y compilado
del sistema de ebuilds.  Al explicar cada paso, explicaré también por
qué se hicieron ciertas decisiones.  Al final de este artículo, no
solo tendrás una visión de proyectos en bash a mayor escala, sino que
también habrás implementado una buena porción de un sistama de
autocompilado.
</p>
</body>
</section>

<section>
<title>¿Por qué bash?</title>
<body>

<p>
Bash es un componente esencial del sistema de ebuilds de Gentoo
Linux. Fue elegido como el lenguaje primario para los ebuilds por
varias razones. En primer lugar, posee una sintaxis familiar y
asequible, muy apropiada para el uso de programas externos. Un sistema
de autocompilado es un código intermedio que automatiza la llamada a
programas externos, y bash es un lenguaje particularmente apropiado
para este tipo de aplicación. Segundo, el soporte de bash para
funciones permite al sistema de ebuilds adoptar un diseño modular,
fácil de entender. Tercero, el sistema de ebuilds saca provecho del
soporte de bash para las variables de entorno, permitiendo a los
mantenedores de paquetes y a los desarrolladores reconfigurarlo al
vuelo.
</p>
</body>
</section>

<section>
<title>Revista al proceso de construcción</title>
<body>

<p>
Antes de entrar en el sistema de ebuilds de lleno, tendremos que
conocer los pasos necesarios para compilar e instalar un paquete. Para
nuestro ejemplo usaremos el paquete "sed", un editor estándar de
flujos GNU que es parte integrante de todas las distribuciones de
Linux. Primero descarga el archivo con las fuentes
(<path>sed-3.02.tar.gz</path>) (ver <uri
link="#resources">Recursos</uri>). Almacenaremos este archivo en
<path>/usr/src/distfiles</path>, un directorio al que nos referiremos
usando la variable de entorno <c>$DISTDIR</c>. <c>$DISTDIR</c> es el
directorio donde se guardarán todos los tarball de código fuente, será
un gran almacén de código fuente.
</p>

<p>
Nuestro siguiente paso será crear un directorio
temporal <path>work</path>, que aloje los fuentes descomprimidos. Nos
referiremos a este directorio usando la variable <c>$WORKDIR</c>. Para
ésto, cambia a un directorio sobre el que tengas permiso de escritura
y escribe lo siguiente:
</p>

<pre caption="Descomprimiendo sed en un directorio temporal">
$ <i>mkdir work</i>
$ <i>cd work</i>
$ <i>tar xzf /usr/src/distfiles/sed-3.02.tar.gz</i>
</pre>

<p>
Ahora el tarball está descomprimido, habrá creado un directorio
llamado
<path>sed-3.02</path>, que contiene las fuentes de sed. Nos referiremos a dicho
directorio <path>sed-3.02</path> más tarde usando la variable de entorno
<c>$SRCDIR</c>. Para compilar el programa teclea lo siguiente:
</p>

<pre caption="Uncompressing sed into a temporary directory">
$ <i>cd sed-3.02</i>
$ <i>./configure --prefix=/usr</i>
<comment>(autoconf generará los archivos make adecuados, esto puede tardar)</comment>

$ <i>make</i>

<comment>(el paquete se compila desde fuente, también tardará un poco)</comment>
</pre>

<p>
Vamos a saltarnos el paso "make install", ya que solo estamos
cubriendo los pasos de desempaquetado y compilación en este
artículo. Si quisiéramos usar un script de bash para realizar todos
estos pasos por nosotros haríamos algo como:
</p>

<pre caption="Script bash de ejemplo para desempaquetar y compilar">
#!/usr/bin/env bash

if [ -d work ]
then
<comment># remove old work directory if it exists</comment>
      rm -rf work
fi
mkdir work
cd work
tar xzf /usr/src/distfiles/sed-3.02.tar.gz
cd sed-3.02
./configure --prefix=/usr
make
</pre>
</body>
</section>

<section>
<title>Generalizando el código</title>
<body>

<p>
Aunque este script de autocompilado funciona, no es muy
flexible. Básicamente, el script contiene la lista de los comandos que
han sido escritos anteriormente en línea de comandos. Esta solución
funciona, pero sería mucho mejor tener un script más genérico que
pudiera configurar y desempaquetar cualquier paquete, quizás cambiando
solo unas pocas líneas. El trabajo para el mantenedor del paquete se
ve así disminuído, y es más fácil añadir nuevos paquetes a la
distribución.  Podemos usar variables de entorno para hacer nuestro
script más genérico:
</p>

<pre caption="Un script nuevo, más genérico">
#!/usr/bin/env bash

<comment># P es el nombre del paquete</comment>

P=sed-3.02

<comment># A es el nombre del archivo comprimido</comment>

A=${P}.tar.gz

export ORIGDIR=`pwd`
export WORKDIR=${ORIGDIR}/work
export SRCDIR=${WORKDIR}/${P}

if [ -z "$DISTDIR" ]
then
<comment># DISTDIR es /usr/src/distfiles si no ha sido definido ya</comment>
        DISTDIR=/usr/src/distfiles
fi
export DISTDIR

if [ -d ${WORKDIR} ]
then
<comment># borra el directorio de trabajo antiguo si es que existe</comment>
        rm -rf ${WORKDIR}
fi

mkdir ${WORKDIR}
cd ${WORKDIR}
tar xzf ${DISTDIR}/${A}
cd ${SRCDIR}
./configure --prefix=/usr
make
</pre>

<p>
Hemos añadido muchas variables al nuevo código, pero, básicamente,
todavía hace lo mismo. Sin embargo, ahora podemos compilar cualquier
paquete basado en GNU autoconf. Simplemente copiando este archivo con
un nuevo nombre que refleje el nombre del paquete, y cambiando los
valores de <c>$A</c> y <c>$P</c>, compilará. Las demás variables se
ajustarán automáticamente. Si bien es útil, hay aún mejoras que
podemos introducir en este código. Este código es bastante más largo
que el original. Ya que una de las tareas principales de cualquier
proyecto de programación es reducir la complejidad de cara al usuario,
estaría bien reducir un poco la longitud del cógido, o, al menos,
organizarlo un poco mejor. Podemos hacer esto con un ingenioso
truco -- separaremos el código en dos ficheros separados, guarda lo
siguiente como <path>sed-3.02.ebuild</path>:
</p>

<pre caption="sed-3.02.ebuild">
<comment>#fichero ebuild para sed - ¡simple!</comment>
P=sed-3.02
A=${P}.tar.gz
</pre>

<p>
Nuestro primer fichero es trivial, y contiene solo variables de
entorno, que han de ser configuradas paquete por paquete, el segundo
fichero contiene el cerebro de la operación. Guárdalo como "ebuild" y
hazlo ejecutable:
</p>

<pre caption="The ebuild script">
#!/usr/bin/env bash


if [ $# -ne 1 ]
then
        echo "se esperaba un argumento."
        exit 1
fi

if [ -e "$1" ]
then
        source $1
else
        echo "ebuild $1 no encontrado."
        exit 1
fi

export ORIGDIR=`pwd`
export WORKDIR=${ORIGDIR}/work
export SRCDIR=${WORKDIR}/${P}

if [ -z "$DISTDIR" ]
then
        <comment># DISTDIR será /usr/src/distfiles si no está ya definido</comment>
        DISTDIR=/usr/src/distfiles
fi
export DISTDIR

if [ -d ${WORKDIR} ]
then
        # borra directorio antiguo si ya existía
        rm -rf ${WORKDIR}
fi

mkdir ${WORKDIR}
cd ${WORKDIR}
tar xzf ${DISTDIR}/${A}
cd ${SRCDIR}
./configure --prefix=/usr
make
</pre>

<p>
Ahora que hemos dividido nuestro sistema en dos ficheros, apuesto a
que te estarás preguntando como funciona. Fácil, para compilar sed,
escribe:
</p>

<pre caption="Probando el ebuild">
$ <i>./ebuild sed-3.02.ebuild</i>
</pre>

<p>
Cuando "ebuild" se ejecuta, primero intenta
interpretar <c>$1</c>. ¿Que significa esto? Recuerda de mi anterior
artículo, que <c>$1</c> es el primer argumento de línea de comandos,
en este caso <path>sed-3.02.ebuild</path>. En bash, el comando
"source" lee instrucciones bash de un archivo y las ejecuta como si
estuvieran dentro del fichero desde donde se usa el comando
"source". Así que "source" ${1}" causa que el script "ebuild" ejecute
los comandos contenidos en
<path>sed-3.02.ebuild</path>, de este modo, <c>$P</c> y <c>$A</c> son
definidos. Este cambio de diseño es realmente conveniente, porque si
queremos compilar otro programa, en lugar de sed, tan solo necesitamos
un nuevo fichero <path>.ebuild</path> que pasar a nuestro script
"ebuild". De este modo, los ficheros <path>.ebuild</path> son
realmente simples, mientras la parte complicada del sistema se
almacena en el script "ebuild". De esta forma, también se puede
mejorar o actualizar el sistema ebuild simplemente editando el script,
manteniendo los detalles de la implementación fuera de los ficheros
ebuild. Aquí hay un fichero ebuild de ejemplo para <c>gzip</c>:
</p>

<pre caption="gzip-1.2.4a.ebuild">
<comment>#Otro script ebuild realmente simple</comment>
P=gzip-1.2.4a
A=${P}.tar.gz
</pre>
</body>
</section>

<section>
<title>Añadiendo funcionalidad</title>
<body>

<p>
Bien, ya hemos hecho algún progreso, pero hay funcionalidades
adicionales que me gustaría añadir. Me gustaría que el script ebuild
aceptara un segundo parámetro que será <c>compile</c>, <c>unpack</c>,
o <c>all</c>. Este segundo parámetro dirá al ebuild la operación que
debe realizar. De esta forma, puedo decirle a ebuild que desempaquete
el archivo pero sin compilarlo (por si necesito inspeccionar el código
fuente antes de la compilación). Para hacer esto usaremos una
estructura case, que comprobará la variable <c>$2</c>, y actuará de
acuerdo con su valor. El código sería algo así:
</p>

<pre caption="ebuild, revisión 2">
#!/usr/bin/env bash

if [ $# -ne 2 ]
then
        echo "Por favor, especifique dos argumentos, el fichero .ebuild y"
        echo "unpack, compile or all"
        exit 1
fi


if [ -z "$DISTDIR" ]
then
<comment># DISTDIR será /usr/src/distfiles si no está ya definido</comment>
        DISTDIR=/usr/src/distfiles
fi
export DISTDIR

ebuild_unpack() {
        <comment> #nos aseguramos de estar en el directorio correcto</comment>
        cd ${ORIGDIR}

        if [ -d ${WORKDIR} ]
        then
                rm -rf ${WORKDIR}
        fi

        mkdir ${WORKDIR}
        cd ${WORKDIR}
        if [ ! -e ${DISTDIR}/${A} ]
        then
            echo "${DISTDIR}/${A} no existe. Por favor, descárguelo primero."
            exit 1
        fi
        tar xzf ${DISTDIR}/${A}
        echo "Desempaquetado ${DISTDIR}/${A}."
        #el código fuente está descomprimido
}


ebuild_compile() {

        <comment> #nos aseguramos de estar en el directorio correcto</comment>
        cd ${SRCDIR}
        if [ ! -d "${SRCDIR}" ]
        then
                echo "${SRCDIR} no existe -- por favor, descomprima primero el paquete."
                exit 1
        fi
        ./configure --prefix=/usr
        make
}

export ORIGDIR=`pwd`
export WORKDIR=${ORIGDIR}/work

if [ -e "$1" ]
then
        source $1
else
        echo "Ebuild $1 no encontrado."
        exit 1
fi

export SRCDIR=${WORKDIR}/${P}

case "${2}" in
        unpack)
                ebuild_unpack
                ;;
        compile)
                ebuild_compile
                ;;
        all)
                ebuild_unpack
                ebuild_compile
                ;;
        *)
                echo "Por favor, especifique unpack, compile o All como segundo argumento"
                exit 1
                ;;
esac
</pre>

<p>
Hemos hecho varios cambios, así que revisémoslos. Primero, hemos
puesto las órdenes para desempaquetar y compilar los paquetes en su
propia función.  Las hemos llamado <c>ebuild_compile()</c>
y <c>ebuild_unpack()</c>, respectivamente.  Ha sido un buen
movimiento, ya que el código se está complicando, y las funciones lo
dotan de algo más de modularidad, lo que nos ayudará a mantener el
script ordenado. En la primera línea de cada función, se cambia de
forma explícita, con <c>cd</c>, al directorio al que se quiere ir. Al
complicarse nuestro código es muy probably que terminemos ejecutando
algo en un directorio distinto del correcto, así, nos aseguramos de
estar en el lugar correcto antes de hacer nada, con <c>cd</c>, y nos
ahorraremos posible errores más adelante. Ésto es un paso importante,
sobre todo, si se borran ficheros dentro de una función.
</p>

<p>
También he añadido un test al principio de la
función <c>ebuild_compile()</c>.  Ahora comprueba que el
directorio <c>$SRCDIR</c> existe, y, si no, imprime un mensaje de
error diciéndole al usuario que desempaquete el archivo y sale.  Si lo
prefieres, puesdes cambiar el comportamiento de forma que,
si <c>$SRCDIR</c> no existe, nuestro ebuild desempaquete
automáticamente el archivo. Puedes hacerlo
cambiando <c>ebuild_compile()</c> por esta nueva versión:
</p>

<pre caption="Nueva versión de ebuild_compile()">
ebuild_compile() {
        <comment> #nos aseguramos de estar en el directorio correcto</comment>
        if [ ! -d "${SRCDIR}" ]
        then
                ebuild_unpack
        fi
        cd ${SRCDIR}
        ./configure --prefix=/usr
        make
}
</pre>

<p>
Uno de los cambios más obvios en nuestro script ebuild es la
estructura case añadida al final del mismo. Dicha estructura
simplemente chequea el segundo argumento de línea de comandos, y, en
base al valor del mismo, decide la acción a realizar.  Si ahora
ejecutamos esto:
</p>

<pre caption="Acción predeterminada">
$ <i>ebuild sed-3.02.ebuild</i>
</pre>

<p>
Obtendremos un mensaje de error, porque ebuild ahora necesita que le
digamos qué hacer, de esta forma:
</p>

<pre caption="Descomprimir">
$ <i>ebuild sed-3.02.ebuild unpack</i>
</pre>

<p>
or:
</p>

<pre caption="Compilar">
$ <i>ebuild sed-3.02.ebuild compile</i>
</pre>

<p>
or:
</p>

<pre caption="Descomprimir y compilar">
$ <i>ebuild sed-3.02.ebuild all</i>
</pre>

<impo>
Si se suministra un segundo parámetro distinto de los usados más arriba, se
obtiene un mensaje de error (caso *), y el programa termina.
</impo>
</body>
</section>

<section>
<title>Modularizando el código</title>
<body>

<p>
Ahora que el código es más avanzado y funcional, puede que estés
pensando en crear varios ebuilds para desempaquetar y compilar tus
programas favoritos. Si lo hicieras, tarde o temprano comprobarías que
algunas fuentes no usan autoconf (<c>./configure</c>), sino que se
valen de otros procesos de compilación no estándar. Tenemos que
modificar el sistema de ebuilds para que se acomode a estos
programas. Pero antes de hacerlo, es bueno pararse a pensar como
conseguiremos esto.
</p>

<p>
Una de las grandes ventajas de usar
siempre <c>./configure --prefix=/usr; make</c> en la fase de
compilación, es que, la mayoría de las veces funciona. Pero también
debemos hacer que el sistema de ebuilds funcione con aquellos fuentes
que no usan autoconf, o fichero Make normales. Propongo lo siguiente,
como solución a este problema:
</p>

<ol>
  <li>
    Si hay un script configure en <c>${SRCDIR}</c>, ejecutarlo de esta forma:
   <c>./configure --prefix=/usr</c>. De otro modo, saltarse este paso.
  </li>
  <li>Ejecutar el comando siguiente: make</li>
</ol>

<p>
Los ebuilds solo ejecutarán configure si dicho script existe. Así
hacemos que ebuild funcione con programas que no usan autoconf, y
tienen un fichero Make estándar.  Pero, ¿y si un simple "make" no
funciona con algunos fuentes? Necesitamos una forma de saltarse esta
funcionalidad predefinida, usando un código alternativo para manejar
situaciones específicas. Para esto, convertiremos nuestra función
<c>ebuild_compile()</c> en dos funciones. La primera de dichas funciones puede
ser vista como "padre" de la segunda, y se llamará <c>ebuild_compile()</c>. La
nueva función, llamada <c>user_compile()</c>, contendrá nuestras acciones
predeterminadas:
</p>

<pre caption="ebuild_compile() separada en dos funciones">
user_compile() {
        <comment>#estamos en ${SRCDIR}</comment>
        if [ -e configure ]
        then
                #run configure script if it exists
                ./configure --prefix=/usr
        fi
        #run make
        make
}

ebuild_compile() {
        if [ ! -d "${SRCDIR}" ]
        then
                echo "${SRCDIR} no existe -- por favor, descomprima primero."
                exit 1
        fi
        <comment>#se asegura de que estamos en el directorio correcto</comment>
        cd ${SRCDIR}
        user_compile
}
</pre>

<p>
Puede que no parezca obvio el por qué de todo esto ahora mismo. Así
que, por ahora, sigamos. Si bien el código de arriba funciona de forma
idéntica a la anterior versión de ebuild, ahora podemos hacer algo que
no podiamos hacer antes.  Podemos redefinir la
función <c>user_compile()</c> en <path>sed-3.02.ebuild</path>.  Así,
si la predeterminada <c>user_compile()</c> no sirve a nuestras
necesidades, podemos redefinirla por completo en nuestro
fichero <path>.ebuild</path>. Como ejemplo, un fichero .ebuild
para <c>e2fsprogs-1.18</c>, que requiere una línea <c>./configure</c>
ligeramente modificada:
</p>

<pre caption="e2fsprogs-1.18.ebuild">
<comment>#este fichero ebuild redefine user_compile()</comment>
P=e2fsprogs-1.18
A=${P}.tar.gz

user_compile() {
       ./configure --enable-elf-shlibs
       make
}
</pre>

<p>
Ahora, <c>e2fsprogs</c> será compilado de la forma correcta. Para la
mayoría de los paquetes, esto no es necesario. Simplemente omitiendo
la definición de <c>user_compile()</c> en nuestro
fichero <path>.ebuild</path>, conseguiremos que se use la
función <c>user_compile()</c> predeterminada.
</p>

<p>
¿Como sabe el script ebuild que función <c>user_compile()</c> debe
usar?  Muy sencillo: en el script ebuild, la
función <c>user_compile()</c> es definida antes de que el fichero
.ebuild <path>e2fsprogs-1.18.ebuild</path> sea leído.  Si hay una
función <c>user_compile()</c> en <path>e2fsprogs-1.18.ebuild</path>,
dicha función sobreescribe a la versión predeterminada, definida
previamente.  Si no, la primera versión es usada.
</p>

<p>
Hemos añadido una gran funcionalidad sin requerir ningún tipo de
codificación compleja. No lo explicaré aquí, pero se podría hacer algo
similar con la función <c>ebuild_unpack()</c>, de forma que podamos
reescribir el proceso de desempaquetado predeterminado. Esto podría
ser práctico si se tiene que hacer algún tipo de parcheo o si los
ficheros están contenido en múltiples archivos comprimidos. También
sería una buena idea modificar el código de desempaquetado de forma
que reconozca tarballs comprimidos con bzip2 por defecto.
</p>
</body>
</section>

<section>
<title>Ficheros de configuración</title>
<body>

<p>
Hemos cubierto varias técnicas interesantes de bash, y ahora es el
momento de aprender una más. A menudo es práctico para un programa
tener un fichero de configuración global que resida
en <path>/etc</path>. Afortunadamente, esto es fácil cuando se usa
bash. Simplemente crea este fichero y guárdalo como
<path>/etc/ebuild.conf</path>:
</p>

<pre caption="/ect/ebuild.conf">
<comment># /etc/ebuild.conf: configuraciones globales de ebuild</comment>

<comment># MAKEOPTS son las opciones pasadas a make</comment>
MAKEOPTS="-j2"
</pre>

<p>
En este ejemplo he incluído una sola opción de configuración, pero se
podrían incluír muchas más. Una de las cosas interesantes de bash es
que el fichero se puede interpretar simplemente usando el comando
"source" sobre el mismo. Éste es un truco de diseño que funciona con
la mayoría de lenguajes interpretados. Después de
que <path>/etc/ebuild.conf</path> haya sido
interpretado, <c>$MAKEOPTS</c> está definido en nuestro script
.ebuild, y le permite al usuario pasar dichas opciones a make. En este
caso, la opción le dice al ebuild que lance una instancia paralela de
make.
</p>

<note>
<b>¿Qué es una instancia paralela de make?</b> Las instancias
paralelas pueden servir para agilizar el proceso en sistema con varios
procesadores. Make soporta la compilación en paralelo. Esto significa
que, en lugar de compilar un fichero fuente en un momento dado, make
puede compilar un número de ficheros (dado por el usuario) al mismo
tiempo. En un sistema multiprocesador esto hace que se usen estos
procesadores extra. Make en paralelo se activa al interpretar la
opción <c>-j #</c> pasada a make, de esta forma: <c>make -j4
MAKE="make -j4"</c>. Esto instruye a make para compilar cuatro
programas de forma simultánea. El argumento <c>MAKE="make -j4"</c> le
dice a make que pase la opción <c>-j4</c> a cualquier proceso hijo que
lance.
</note>

<p>
Y aquí tenemos la versión final de ebuild:
</p>

<pre caption="ebuild, la versión final">
#!/usr/bin/env bash

if [ $# -ne 2 ]
then
        echo "Por favor, especifique fichero ebuild file y unpack, compile u all"
        exit 1
fi

source /etc/ebuild.conf

if [ -z "$DISTDIR" ]
then
        <comment># configura DISTDIR como /usr/src/distfiles si no está configurado ya</comment>
        DISTDIR=/usr/src/distfiles
fi
export DISTDIR

ebuild_unpack() {
        <comment>#se asegura de estar en el directorio correcto</comment>
        cd ${ORIGDIR}

        if [ -d ${WORKDIR} ]
        then
                rm -rf ${WORKDIR}
        fi

        mkdir ${WORKDIR}
        cd ${WORKDIR}
        if [ ! -e ${DISTDIR}/${A} ]
        then
                echo "${DISTDIR}/${A} no existe.  Por favor, descargue primero."
                exit 1
        fi
        tar xzf ${DISTDIR}/${A}
        echo "Unpacked ${DISTDIR}/${A}."
        <comment>#las fuentes han sido descomprimidas</comment>
}

user_compile() {
        <comment>#ya estamos en ${SRCDIR}</comment>
        if [ -e configure ]
        then
                <comment>#ejecuta el script configure si existe</comment>
                ./configure --prefix=/usr
        fi
        <comment>#ejecuta make</comment>
        make $MAKEOPTS MAKE="make $MAKEOPTS"
}

ebuild_compile() {
        if [ ! -d "${SRCDIR}" ]
        then
                echo "${SRCDIR} no existe -- por favor, descomprima primero."
                exit 1
        fi
        <comment>#se asegura de estar en el directorio correcto</comment>
        cd ${SRCDIR}
        user_compile
}

export ORIGDIR=`pwd`
export WORKDIR=${ORIGDIR}/work

if [ -e "$1" ]
then
        source $1
else
        echo "Fichero .ebuild $1 no encontrado."
        exit 1
fi

export SRCDIR=${WORKDIR}/${P}

case "${2}" in
        unpack)
                ebuild_unpack
                ;;
        compile)
                ebuild_compile
                ;;
        all)
                ebuild_unpack
                ebuild_compile
                ;;
        *)
                echo "Por favor, especifique unpack, compile u all como segundo argumento"
                exit 1
                ;;
esac
</pre>

<p>
<path>/etc/ebuild.conf</path> es interpretado cerca del principio del
fichero.  Usamos <c>$MAKEOPTS</c> en nuestra <c>user_compile()</c>
prefabricada. Puede que te preguntes como funcionará ésto -- después
de todo, nos referimos a <c>$MAKEOPTS</c> antes de
interpretar <path>/etc/ebuild.conf</path>, que es el encargado de
definir <c>$MAKEOPTS</c>. Afortunadamente, ésto no es problema, porque
la expansión de variables se produce al
ejecutar <c>user_compile()</c>.  Cuando eso
sucede, <path>/etc/ebuild.conf</path> ha sido ya incorporado y
<c>$MAKEOPTS</c> tiene un valor correcto.
</p>
</body>
</section>

<section>
<title>Resumiendo</title>
<body>

<p>
Hemos cubierto muchas técnicas de programación en bash en este
artículo, pero en realidad solo hemos arañado la superficie de lo que
el poder auténtico de bash representa. Por ejemplo, el sistema de
ebuilds de Gentoo no solo puede desempaquetar y compilar de forma
automática, sino que también:
</p>

<ul>
  <li>
  Descarga las fuentes de forma automática si no están
  en <c>$DISTDIR</c>
  </li>
  <li>
  Verifica que las fuentes no están corruptas, usando sumas MD5
  </li>
  <li>
     Si se especifica, instala el programa compilado en un sistema de
     archivos, en vivo, manteniendo un listado de los ficheros
     instalados de forma que el paquete pueda ser fácilmente
     desinstalado en cualquier momento.
  </li>
  <li>
    Si se especifica, puede empaquetar una aplicación instalada en un
    tarball (comprimido) de forma que pueda ser instalada después, en
    otro ordenador, o durante un proceso de instalación basado en CD
    (por ejemplo, si estás contruyendo una distribución basada en
    dicho medio).
  </li>
</ul>

<p>
De forma adicional, el sistema ebuild en producción tiene otras
opciones globales de configuración, que permiten al usuario establecer
banderas de optimización que se usan en tiempo de compilación, o el
soporte específico que se quiere en ciertas aplicaciones. Por ejemplo,
los soportes para GNOME y slang se activan de forma predeterminada en
los paquetes que lo soportan.
</p>

<p>
Bash puede hacer mucho más de lo que he tocado en esta serie de
artículos. Espero que hayas aprendido mucho sobre esta increíble
utilidad, y que estés deseando usar bash para acelerar y mejorar tus
proyectos de desarrollo.
</p>
</body>
</section>
</chapter>

<chapter id="resources">
<title>Recursos</title>
<section>
<title>Links de utilidad</title>
<body>

<ul>
  <li>
     Descarga los fuentes de (<path>sed-3.02.tar.gz</path>) desde
     <uri>ftp://ftp.gnu.org/pub/gnu/sed</uri>
  </li>
  <li>
    Lee <uri link="/doc/es/articles/bash-by-example-p1.xml">Bash
    mediante ejemplos: Parte 1</uri>.
  </li>
  <li>
    Read <uri link="/doc/es/articles/bash-by-example-p2.xml">Bash con
    ejemplos: Parte 2</uri>.
  </li>
  <li>
    Visita la página del <uri link="http://gentoo.org">Proyecto
    Gentoo</uri>
  </li>
  <li>
    Mira también el <uri
    link="http://www.gnu.org/software/bash/manual/bash.html">manual de
    referencia de bash on-line</uri>.
  </li>
</ul>
</body>
</section>
</chapter>
</guide>
