<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/articles/l-awk1.xml,v 1.1 2008/01/09 14:35:57 chiguire Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/articles/l-awk1.xml" lang="es" disclaimer="articles">
<title>Awk mediante ejemplos, Parte 1</title>

<author title="Author">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traductor">
  <mail link="i92guboj@terra.es">Jesús Guerrero</mail>
</author>

<abstract>
Awk es un lenguaje muy elegante con un nombre un tanto extraño. En
este primer artículo de una seria de tres, Daniel Robbins pondrá en
forma tus habilidades de programación con awk. Conforme avance la
serie, serán tratados temas un poco más avanzados, culminando en una
demostración de aplicación real avanzada escrita usando awk.
</abstract>

<!-- The original version of this article was published on IBM
     developerWorks, and is property of Westtech Information
     Services. This document is an updated version of the original
     article, and contains various improvements made by the Gentoo
     Linux Documentation team -->

<version>1.4</version>
<date>2008-01-08</date>

<chapter>
<title>Introducción al gran lenguaje de nombre extraño</title>
<section>
<title>En defensa de awk</title>
<body>

<p>
En esta serie de artículos, te transformaré en un programador
productivo con awk. Admito que awk no tiene un nombre particularmente
bonito, y que la versión GNU de awk, llamada gawk, suena simplemente
rara. Los que no estén familiarizados con el lenguage, al oír "awk"
podrían pensar en un código desordenado y anticuado que sería capaz de
volver loco al más avispado de los gurús de UNIX (haciéndole gritar
repetidamente "kill -s9!" mientras corre hacia la máquina de café).
</p>

<p>
Awk no tiene un gran nombre. Pero es un gran lenguage. Awk está
enfocado al procesamiento de texto y la generación de reportes, pero
también posee muchas características que permiten la programación
seria. Y, al contrario que otros lenguages, la sintaxis de awk es
bastante familiar y toma prestados algunos de los mejores elementos de
lenguajes como C, python y bash (aunque técnicamente, awk fue creado
antes que python y bash. Awk es uno de estos lenguajes que, una vez
aprendido se convierte en una parte imprescindible de nuestro arsenal
de codificación.
</p>
</body>
</section>

<section>
<title>El primer awk</title>
<body>

<pre caption="El primer awk">
$ <i>awk '{ print }' /etc/passwd</i>
</pre>

<p>
Deberías ver el contenido de tu archivo <path>/etc/passwd</path>
aparecer ante tus ojos. Ahora explicaré lo que awk ha hecho. Cuando lo
hemos llamado, hemos especificado <path>/etc/passwd</path> como
nuestro fichero de entrada. Al ejecutar awk, éste ha evaluado el
comando para cada línea de <path>/etc/passwd</path>, por orden. Toda
la salida se manda a stdout, y así obtenemos una salida idéntica a la
que nos daría el comando <c>cat</c> sobre el fichero
<path>/etc/pass</path>.
</p>

<p>
Y ahora, una explicación sobre el bloque de código { print }. En awk,
las llaves se usan para englobar bloques de código, de forma similar a
C. Dentro de nuestro bloque de código, tenemos un solo comando
print. En awk, cuando un comando print aparece solo, se imprime todo
el contenido de la línea.
</p>

<pre caption="Imprimiendo la línea actual">
$ <i>awk '{ print $0 }' /etc/passwd</i>
$ <i>awk '{ print "" }' /etc/passwd</i>
</pre>

<p>
En awk, la variable $0 representa la línea actual, por tanto, print y
print $0 hacen exactamente lo mismo.
</p>

<pre caption="Llenar la pantalla con un texto">
$ <i>awk '{ print "hiya" }' /etc/passwd</i>
</pre>
</body>
</section>

<section>
<title>Múltiples campos</title>
<body>

<pre caption="print $1">
$ <i>awk -F":" '{ print $1 $3 }' /etc/passwd</i>
halt7
operator11
root0
shutdown6
sync5
bin1
<comment>....etc.</comment>
</pre>

<pre caption="print $1 $3">
$ <i>awk -F":" '{ print $1 " " $3 }' /etc/passwd</i>
</pre>

<pre caption="$1$3">
$ <i>awk -F":" '{ print "username: " $1 "\t\tuid:" $3 }' /etc/passwd</i>
username: halt          uid:7
username: operator      uid:11
username: root          uid:0
username: shutdown      uid:6
username: sync          uid:5
username: bin           uid:1
<comment>... etc.</comment>
</pre>
</body>
</section>

<section>
<title>Guiónes externos</title>
<body>

<pre caption="Guión de ejemplo">
BEGIN { FS=":" }
{ print $1 }
</pre>

<p>
La diferencia entre estos dos métodos consiste en cómo establecemos el
separador de campo. En este guión, el separador es especificado en el
mísmo código (estableciendo la variable FS). Mientras que en nuestro
anterior ejemplo, FS se establece a través de la opción -F":". Por
norma general es mejor establecerlo dentro del mismo script,
simplemente porque será un argumento menos que tendrás que tendrás que
recordar teclear. Cubriremos la variable FS en más detalle más tarde
en este mismo artículo.
</p>
</body>
</section>

<section>
<title>The BEGIN and END blocks</title>
<body>

<p>
Normalmente, awk ejecuta cada bloque de código del guión una vez por
cada línea de entrada que se le proporcione. Sin embargo, hay muchas
situaciones donde se necesita ejecutar un código de inicialización
antes de que awk comience a procesar el texto del fichero de
entrada. Para dichas situaciones, awk permite definir un bloque
BEGIN. Hemos usado un bloque BEGIN en el ejemplo anterior. Como el
bloque BEGIN es evaluado antes de que awk procese el fichero de
entrada, es un lugar excelente para inicializar la variable FS
(separador de campo), imprimir una cabecera o inicializar otras
variables globales a las que podrás hacer referencia más adelante en
el programa.
</p>

<p>
Awk también provee otro bloque especial, llamado el bloque END. Awk
ejecuta este bloque tras procesar todas las líneas del fichero de
entrada. Típicamente, el bloque END se usa para realizar cálculos
finales o imprimir sumarios que deban aparecer al final del flujo de
salida.
</p>
</body>
</section>

<section>
<title>Expresiones regulares y bloques</title>
<body>

<pre caption="Regular expressions and blocks">
/foo/ { print }
/[0-9]+\.[0-9]*/ { print }
</pre>
</body>
</section>

<section>
<title>Expresiones y bloques</title>
<body>

<pre caption="fredprint">
$1 == "fred" { print $3 }
</pre>

<pre caption="root">
$5 ~ /root/ { print $3 }
</pre>
</body>
</section>

<section>
<title>Sentencias condicionales</title>
<body>

<pre caption="if">
{
    if ( $5 ~ /root/ ) {
        print $3
    }
}
</pre>

<p>
Ambos scripts funcionan de forma idéntica. En el primer ejemplo, la
expresión booleana se pone fuera del bloque, mientras que en el
segundo, el bloque se ejecuta para cada línea, y la impresión se
realiza de forma selectiva usando una sentencia if. Ambos métodos son
válidos, y puedes escoger el que mejor se adapte a tu guión.
</p>

<pre caption="if if">
{
    if ( $1 == "foo" ) {
        if ( $2 == "foo" ) {
            print "uno"
        } else {
            print "one"
        }
    } else if ($1 == "bar" ) {
        print "two"
    } else {
        print "three"
    }
}
</pre>

<pre caption="if">
! /matchme/ { print $1 $3 $4 }
</pre>

<pre caption="if">
{
    if ( $0 !~ /matchme/ ) {
        print $1 $3 $4
    }
}
</pre>

<p>
Ambos scripts imprimirán solo aquellas líneas que no contengan una
cadena de caracteres matchme. De nuevo, puedes escoger el que mejor se
ajuste a tu código.  Ambos hacen lo mismo.
</p>

<pre caption="Imprimiendo los campos iguales a foo y bar">
( $1 == "foo" ) &amp;&amp; ( $2 == "bar" ) { print }
</pre>

<p>
Este ejemplo imprimirá solo aquellas líneas en las que el campo 1 sea
igual a foo y el campo 2 sea igual a bar.
</p>
</body>
</section>

<section>
<title>¡Variables numéricas!</title>
<body>

<p>
En el bloque BEGIN, inicializamos nuestra variable entera x a
cero. Luego, cada vaz que awk encuentra una línea en blanco, ejecutará
la sentencia x=x+1, incrementando x. Tras ser procesadas todas las
líneas, el bloque END se ejecutará, y awk imprimirá un sumario final
especificando el número total de líneas en blanco que ha encontrado.
</p>
</body>
</section>

<section>
<title>Variables no interpretables como numéricas</title>
<body>

<pre caption="Campo ejemplo">
2.01
</pre>

<pre caption="1.01x$( )1.01">
{ print ($1^2)+1 }
</pre>

<p>
Si experimentas un poco, encontrarás que si una variable no contiene
un número válido, awk tratará dicha variable numéricamente como un
cero si es evaluada en alguna expresión matemática.
</p>
</body>
</section>

<section>
<title>Montones de operadores</title>
<body>

<p>
Otra cosa buena de awk es su gran cantidad complementaria de
operadores matemáticos. Además de la suma, la resta, la multiplicación
y la división, awk nos permite usar el operador de exponenciación "^",
el operador módulo (restos) "%" y y un surtido de operadores de
asignación que ha tomado prestados de C.
</p>

<p>
Estos incluyen pre- y post-incremento/decremento ( i++, --foo ) y
operadores de asignación combinados con suma, resta, multiplicación o
división ( a+=3, b*=2, c/=2.2, d-=6.2 ). Pero eso no es todo --
también podemos usar útiles operadores de asignación combinados con
operaciones de modulo o exponenciación ( a^=2, b%=4 ).
</p>
</body>
</section>

<section>
<title>Separadores de campo</title>
<body>

<p>
Awk tienes su propio surtido de variables especiales. Algunas nos
permiten afinar el comportamiento de awk, mientras otras pueden ser
leídas para obtener imformación valiosa sobre la entrada. Ya hemos
usado una de estas variables especiales: FS. Como se mención antes,
ésta nos permite especificar la secuencia de caracteres que awk espera
encontrar como separador de campo. Cuando usamos
<path>/etc/passwd</path> como entrada, FS se fijó a ":". Si bien esto
funcionó en ese momento, FS nos permite mucha más flexibilidad.
</p>

<pre caption="Otro separador de campo">
FS="\t+"
</pre>

<p>
Arriba usando el operador especial de expresiones regulares "+", que
significa "una ocurrencia o más del caracter anterior".
</p>

<pre caption="Fijando FS como espacio en blanco">
FS="[[:space:]+]"
</pre>

<p>
Si bien esta asignación funcionará, no es necesaria. ¿Por qué? Porque
por defecto, FS está prefijado como un solo espacio en blanco, que awk
interpreta como "uno o más espacios o tabuladores". En este ejemplo en
particular, ¡el valor predeterminado de FS era exáctamente lo que
andabas buscando desde primera hora!
</p>

<pre caption="Ejemplo de separador de campo">
FS="foo[0-9][0-9][0-9]"
</pre>
</body>
</section>

<section>
<title>Número de campos</title>
<body>

<pre caption="Número de campos">
{
    if ( NF > 2 ) {
        print $1 " " $2 ":" $3
    }
}
</pre>
</body>
</section>

<section>
<title>Número de registro</title>
<body>

<pre caption="Número de registro">
{
    <comment>#saltar cabecera</comment>
    if ( NR > 10 ) {
        print "ok, ¡ahora a por la información!"
    }
}
</pre>

<p>
Awk provee variables adicionales que pueden ser usadas para varios
propósitos.  Veremos más de estas variables en artículos posteriores.
</p>

<p>
Hemos llegado al final de nuestra exploración inicial de awk. Conforme
la serie avance, demostraré funcionalidades más avanzadas de awk, y
terminaremos la serie con una aplicación real en awk. Mientras tanto,
si quieres aprender más, examina la lista de recursos listada más
abajo.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Recursos</title>
<section>
<title>Enlaces útiles</title>
<body>

<ul>
  <li>
    Lee otros artículos de Daniel sobre awk publicados en
    developerWorks: Awk mediante ejemplos, <uri
    link="l-awk2.xml">Parte 2</uri> y <uri link="l-awk3.xml">Parte
    3</uri>.
  </li>
  <li>
    Si prefieres un buen libro a la vieja usanza, el <uri
    link="http://www.oreilly.com/catalog/sed2/">sed &amp; awk, 2ª
    Edición</uri> de O'Reilly es una buena opción.
  </li>
  <li>
    Asegúrate también de examinar <uri
    link="http://www.faqs.org/faqs/computer-lang/awk/faq/">comp.lang.awk
    FAQ</uri>. También contiene varios enlaces sobre awk.
  </li>
  <li>
    El <uri link="http://sparky.rice.edu/~hartigan/awk.html">tutorial
    de awk</uri> de Patrick Hartigan viene con varios scripts
    interesantes de awk.
  </li>
  <li>
    El <uri link="http://www.tasoft.com/tawk.html">Compilador TAWK de
    Thompson</uri> compila guiones de awk transformándolos en binarios
    ejecutables. Hay versiones para Widows, OS/2, DOS, y UNIX.
  </li>
  <li>
    <uri link="http://www.gnu.org/software/gawk/manual/gawk.html">La
    guía de usuario de GNU Awk</uri> también está disponible para
    referencia en línea.
  </li>
</ul>
</body>
</section>
</chapter>
</guide>
