<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/articles/openssh-key-management-p1.xml,v 1.1 2008/01/29 17:01:07 chiguire Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/es/articles/openssh-key-management-p1.xml" disclaimer="articles" lang="es">
<title>Gestión de claves para OpenSSH, Parte 1</title>
<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traductor">
  <mail link="neoannagul@gmail.com">Luis Alberto Fernández Vallejo</mail>
</author>

<!-- xmlified by Max Lorenz (anarchyisgoodforthee@gmail.com) -->

<abstract>
En esta serie aprenderá cómo funcionan las autenticaciones RSA y DSA,
y verá cómo preparar una autenticación sin contraseñas de la manera
correcta. En el primer artículo de la serie, Daniel Robbins se centra
en introducir los protocolos de autenticación RSA y DSA y muestra cómo
puede hacerlos funcionar en la red.
</abstract>

<!-- La versión original de este artículo fue publicada por IBM developerWorks y
     es propiedad de Westtech Information Services. Este documento es una
     versión actualizada del artículo original y contiene mejoras introducidas
     por el Equipo de Documentación de Gentoo. -->

<version>1.1</version>
<date>2005-10-09</date>

<chapter>
<title>Entendiendo la autenticación RSA/DSA</title>
<section>
<body>

<p>
Muchos de nosotros usamos el excelente OpenSSH (vea <uri
link="#resources">Recursos</uri>, más adelante en este artículo) como
un reemplazo seguro y encriptado de los vulnerables <c>telnet</c> y
<c>rsh</c>. Una de las características más intrigantes de OpenSSH es
su capacidad para autenticar usuarios usando los protocolos RSA y DSA
de autenticación, basados en un par de claves numéricas
complementarias. Como uno de sus principales atractivos, las
autenticaciones RSA y DSA prometen la habilidad de establecer
conexiones con sistemas remotos <e>sin proporcionar una
contraseña</e>. A pesar de que esto es interesante, los nuevos
usuarios de OpenSSH muchas veces configuran RSA/DSA de forma rápida y
sucia, dando como resultado una entrada en el sistema sin necesidad de
contraseña, pero dejando abierto un gran agujero de seguridad en el
proceso.
</p>
</body>
</section>

<section>
<title>¿Qué es la autenticación RSA/DSA?</title>
<body>

<p>
SSH, en especial OpenSSH (una implementación completamente libre de
SSH), es una herramienta increíble. Como <c>telnet</c> o <c>rsh</c>,
el cliente ssh puede ser usado para iniciar sesión en una máquina
remota. Todo lo que se necesita es que la máquina remota esté
ejecutando <c>sshd</c>, el proceso del servidor <c>ssh</c>. Sin
embargo, a diferencia de <c>telnet</c>, el protocolo ssh es muy
seguro. Usa algoritmos especiales para encriptar el flujo de datos,
asegurando la integridad del canal de datos e incluso llevando a cabo
autenticación de una forma segura y protegida.
</p>

<p>
Sin embargo, aunque que <c>ssh</c> es realmente magnífico, hay una
cierto componente de la funcionalidad de <c>ssh</c> que la mayor parte
de las veces se ignora, no se conoce o, simplemente, se entiende
mal. Este componente es el sistema de autenticación mediante clave
RSA/DSA, una alternativa al sistema de autenticación estándar de
contraseña segura que OpenSSH usa por defecto.
</p>

<p>
Los protocolos de autenticación RSA y DSA de OpenSSH están basados en
un par de claves criptográficas especialmente creadas, denominadas
<e>clave privada</e> y <e>clave pública</e>. La ventaja de usar este
sistema de autenticación basado en claves es que, en muchos casos, es
posible establecer una conexión segura sin tener que escribir una
contraseña a mano.
</p>

<p>
Mientras que los protocolos de autenticación basados en claves son
relativamente seguros, los problemas surgen cuando los usuarios se
toman algunos atajos por comodidad, sin entender completamente sus
implicaciones en materia de seguridad. En este artículo echaremos un
buen vistazo a cómo usar correctamente los protocolos de autenticación
RSA y DSA sin exponernos nosotros mismos a cualquier riesgo de
suguridad innecesario. En mi siguiente artículo, le enseñaré cómo usar
<c>ssh-agent</c> para guardar claves privadas desencriptadas, e
introduciremos <c>keychain</c>, un interfaz de <c>ssh-agent</c> que
ofrece un buen número de cómodas ventajas sin sacrificar la
seguridad. Si siempre ha querido cogerle el truco a las
características de autenticación avanzadas de OpenSSH, entonces siga
leyendo.
</p>
</body>
</section>

<section>
<title>Cómo funcionan las claves RSA/DSA</title>
<body>

<p>
He aquí un rápido vistazo general de cómo funcionan las claves
RSA/DSA. Vamos a empezar con un hipotético escenario donde nos
gustaría usar la autenticación RSA para permitir que una estación de
trabajo Linux local (llamada <e>localbox</e>) abra un shell remoto en
<e>remotebox</e>, una máquina en nuestro ISP. En este momento, cuando
intentemos conectarnos a <e>remotebox</e> usando el cliente
<c>ssh</c>, obtendríamos el siguiente prompt:
</p>

<pre caption="Conectando a remotebox">
$ <i>ssh drobbins@remotebox</i>
drobbins@remotebox's password:
</pre>

<p>
Aquí vemos un ejemplo de la forma <e>por defecto</e> de <c>ssh</c> de
llevar a cabo la autenticación. A saber, pregunta por la contraseña de
la cuenta de <e>drobbins</e> en <e>remotebox</e>. Si introducimos
nuestra contraseña para <e>remotebox</e>, <c>ssh</c> usa su protocolo
seguro de autenticación por contraseña, transmitiendo nuestra
contraseña a <e>remotebox</e> para su verifición. Sin embargo, al
contrario de lo que hace <c>telnet</c>, aquí nuestra contraseña está
encriptada para que no pueda ser interceptada por nadie que esté
escuchando nuestra conexión. Una vez que <e>remotebox</e> autentica la
contraseña que hemos dado con su base de datos de contraseñas, si es
correcta, tendremos acceso y seremos recibidos con un intérprete de
comandos de <e>remotebox</e>. Mientras que el método por defecto de
autenticación de <c>ssh</c> es bastante seguro, la autenticación RSA y
DSA abre algunas nuevas posibilidades.
</p>

<p>
Sin embargo, al contrario que la autenticación de contraseña segura de
<c>ssh</c>, la autenticación RSA requiere alguna configuración
inicial. Necesitamos hacer estos pasos de configuración inicial sólo
una vez. Después de eso, la autenticación RSA entre <e>localbox</e> y
<e>remotebox</e> será totalmente indolora. Para preparar la
autenticación RSA, primero necesitamos generar un par de claves, una
privada y una pública. Estas dos claves tienen algunas propiedades muy
interesantes. La clave pública puede ser usada para encriptar un
mensaje, y sólo el poseedor de la clave privada puede
desencriptarlo. La clave pública sólo puede ser usada para
<e>encriptación</e>, y la clave privada sólo puede puede ser usada
para <e>desencriptación</e> de un mensaje codificado por la clave
pública correspondiente. El protocolo de autenticación RSA (y DSA)
usan las propiedades especiales de los pares de claves para llevar a
cabo autenticación segura, sin necesidad de transmitir ninguna
información confidencial por la red.
</p>

<p>
Para hacer que funcione la autenticación RSA o DSA, haremos sólo un
único paso de configuración. Copiaremos nuestra <e>clave pública</e> a
<e>remotebox</e>. La clave pública se llama "pública" por una
razón. Ya que sólo puede ser usada para <e>encriptar</e> mensajes para
nosotros, no necesitamos estar demasiado preocupados por si cae en
malas manos. Una vez que nuestra clave pública ha sido copiada a
<e>remotebox</e> y colocada en un fichero especial
(<path>~/.ssh/authorized_keys</path>) para que <c>sshd</c> en
<e>remotebox</e> pueda localizarla, estaremos listos para usar la
autenticación RSA para entrar en <e>remotebox</e>.
</p>

<p>
Para hacer esto, simplemente escribimos <c>ssh drobbins@remotebox</c>
en la consola de <e>localbox</e>, como siempre hacemos. Sin embargo,
esta vez, <c>ssh</c> le hará saber al <c>sshd</c> en <e>remotebox</e>
que le gustaría usar el protocolo de autenticación RSA. Lo que pasa a
continuación es bastante interesante. <c>Sshd</c> en <e>remotebox</e>
genera un número aleatorio, y lo encripta usando nuestra clave pública
que copiamos ahí anteriormente. Entonces, manda este número aleatorio
encriptado de vuelta al <c>ssh</c> que se ejecuta en
<e>localbox</e>. A continuación, nuestro <c>ssh</c> usa nuestra
<e>clave privada</e> para desencriptar este número aleatorio, y
entonces lo envía de vuelta a <e>remotebox</e>, como diciendo "¡Mira,
yo realmente <e>tenía</e> la clave privada correspondiente; he sido
capaz de desencriptar correctamente tu mensaje!" Finalmente,
<c>sshd</c> concluye que deberíamos estar permitidos para entrar, ya
que teníamos la clave privada correspondiente. De esta forma, el hecho
de que tengamos una clave privada pareja nos garantiza acceder a
<e>remotebox</e>.
</p>
</body>
</section>

<section>
<title>Dos observaciones</title>
<body>

<p>
Hay dos observaciones importantes sobre la autenticación RSA y DSA. La
primera es que realmente sólo necesitamos generar un par de
claves. Podemos entonces copiar nuestra clave pública a las máquinas
remotas en las que nos gustaría acceder y todas ellas nos autenticarán
felizmente contra nuestra única clave privada. En otras palabras, no
necesitamos un par de claves para <e>cada</e> sistema al que nos
gustaría tener acceso. Sólo un par es suficiente.
</p>

<p>
La otra observación es que nuestra <e>clave privada no debería caer en
malas manos</e>. La clave privada es lo único que nos concede acceso a
nuestros sistemas remotos, y cualquiera que posea nuestra clave
privada es admitido exactamente con los mismos provilegios que
tenemos. Así como no querríamos que personas extrañas tuvieran las
llaves de nuestra casa, debemos proteger nuestra clave privada de un
uso no autorizado. En el mundo de los bits y los bytes, esto significa
que nadie debería poder leer o copiar nuestra clave privada.
</p>

<p>
Desde luego, los desarrolladores de <c>ssh</c> son concientes de la
importancia de la claves privadas, y han construído unas pocas
salvaguardas en <c>ssh</c> y en <c>ssh-keygen</c> para que nuestra
clave privada no sea maltratada. Primero, <c>ssh</c> está configurado
para imprimir un gran mensaje de advertencia si nuestra clave tiene
permisos de fichero que permitiría ser leída por cualquiera además de
nosotros. Segundo, cuando creamos nuestro par de claves
pública/privada usando <c>ssh-keygen</c>, <c>ssh-keygen</c> nos pedirá
que introduzcamos una frase de paso. Si lo hacemos, nuestra clave
privada estará encriptada usando esta frase de paso, así que si
incluso fuera robada, será inútil para cualquiera que por casualidad
no supiera la frase de paso. Armados con este conocimiento, vamos a
echar un vistazo a cómo configurar <c>ssh</c> para usar los protocolos
de autenticación RSA y DSA.
</p>
</body>
</section>

<section>
<title>ssh-keygen de cerca</title>
<body>

<p>
El primer paso en preparar la autenticación RSA empieza generando un
par de claves pública/privada. La autenticación RSA es la forma
original de autenticación de claves de <c>ssh</c>, por lo que RSA
debería funcionar con cualquier versión de OpenSSH, aunque recomiendo
que instales la versión más reciente disponible, que es openssh-2.9_p2
en el momento en el que este artículo fue escrito. Generar un par de
claves RSA es como sigue:
</p>

<pre caption="Usando ssh-keygen">
$ <i>ssh-keygen</i>
Generating public/private rsa1 key pair.
Enter file in which to save the key (/home/drobbins/.ssh/identity):
<comment>(Pulsa Enter)</comment>
Enter passphrase (empty for no passphrase): <comment>(introduce una frase de paso)</comment>
Enter same passphrase again: <comment>(introdúcela otra vez)</comment>
Your identification has been saved in /home/drobbins/.ssh/identity.
Your public key has been saved in /home/drobbins/.ssh/identity.pub.
The key fingerprint is:
a4:e7:f2:39:a7:eb:fd:f8:39:f1:f1:7b:fe:48:a1:09 drobbins@localbox
</pre>

<p>
Cuando <c>ssh-keygen</c> pregunte por una localización por omisión
para la clave, presionamos "Enter" para aceptar la de por defecto de
<path>/home/drobbins/.ssh/identity</path>. <c>ssh-keygen</c> guardará
la clave privada en la ruta de arriba, y la clave <e>pública</e>
estará guardada con ella, en un fichero llamando identity.pub.
</p>

<p>
Hay que notar que <c>ssh-keygen</c> nos preguntó para introducir una
frase de paso. Cuando nos preguntó, introducimos una buena frase de
paso (siete o más caracteres difíciles de predecir). <c>ssh-keygen</c>
entonces encriptó nuestra clave privada (<path>~/.ssh/identity</path>)
usando esta frase de paso para que así nuestra clave privada sea
inútil para cualquiera que no la conozca.
</p>
</body>
</section>

<section>
<title>El rápido acuerdo</title>
<body>

<p>
Cuando especificamos una frase de paso, ésta permite a
<c>ssh-keygen</c> asegurar nuestra clave privada contra un mal uso,
pero también creo un pequeño inconveniente. Ahora, cada vez que
intentemos conectar con nuestra cuenta en <e>drobbins@remotebox</e>
usndo <c>ssh</c>, <c>ssh</c> nos preguntará que introduzcamos la frase
de paso para que pueda desencriptar nuestra clave privada y usarla
para la autenticación RSA. De nuevo, no estaremos introduciendo
nuestra contraseña para la cuenta <e>drobbins</e> en <e>remotebox</e>,
estaremos introduciendo la frase de paso necesaria para desencriptar
localmente nuestra clave privada. Una vez que nuestra clave privada es
desencriptada, nuestro cliente <c>ssh</c> se hará cargo del resto. A
pesar de que los mecanismos de usar nuestra contraseña remota y la
frase de paso de RSA son completamente diferentes, en la práctica
todavía estamos siendo preguntados por una "frase secreta" para
escribir en <c>ssh</c>
</p>

<pre caption="Inicio de sesión con frase de paso">
$ <i>ssh drobbins@remotebox</i>
Enter passphrase for key '/home/drobbins/.ssh/identity': <comment>(introducir
frase de paso)</comment>
Last login: Thu Jun 28 20:28:47 2001 from localbox.gentoo.org 

Welcome to remotebox!

$
</pre>

<p>
Sin embargo, a pesar de que esto es un inconveniente, no deberías usar
este método sin entender completamente su impacto en seguridad. Con
una clave privada desencriptada, si alguien alguna vez trastea en
<e>localbox</e>, obtendrán también acceso automático a
<e>remotebox</e> y cualquier otros sistemas que hayan sido
configurados con la clave pública.
</p>

<p>
Sé lo que está pensando. La autenticación sin contraseña, a pesar de
ser un poco arriesgada parece realmente atractiva. Estoy totalmente de
acuerdo. ¡Pero <e>hay una manera mejor!</e> Quédese conmigo, y le
mostraré cómo obtener los beneficios de la autenticación sin
contraseña sin comprometer la seguridad de su clave privada. Le
mostraré cómo usar con dominio <c>ssh-agent</c> (lo que hace posible
la autenticación sin contraseña <e>segura</e> en primer lugar) en mi
siguiente artículo. Ahora, vamos a estar listos para usar
<c>ssh-agent</c> preparando la autenticación RSA y DSA. Aquí están las
indicaciones paso a paso.
</p>
</body>
</section>

<section>
<title>Generación del par de claves RSA</title>
<body>

<p>
Para preparar la autenticación RSA, vamos a hacer el único paso de la
generación del par de claves pública/privada. Hacemos esto
escribiendo:
</p>

<pre caption="Generando claves...">
$ <i>ssh-keygen</i>
</pre>

<p>
Acepte la localización por omisión de la clave cuando se le requiera
(normalmente <path>~/.ssh/identity</path> y
<path>~/.ssh/identity.pub</path> para la clave prública), y
proporcione a <c>ssh-keygen</c> una frase de paso segura. Una vez
termine <c>ssh-keygen</c>, tendrá una clave pública así como una clave
privada encriptada con la frase de paso.
</p>
</body>
</section>

<section>
<title>Instalación de la clave pública RSA</title>
<body>

<p>
A continuación, necesitaremos configurar los sistemas remotos que
ejecutan <c>sshd</c> para que usen nuestra clave RSA <e>pública</e>
para autenticación. Normalmente, esto se hace copiando la clave
pública al sistema local como sigue:
</p>

<pre caption="Copiando la clave pública">
$ <i>scp ~/.ssh/identity.pub drobbins@remotebox:</i>
</pre>

<p>
Ya que la autenticación RSA no está completamente preparada aún,
seremos preguntados por nuestra contraseña en
<e>remotebox</e>. Hágalo. Entonces, inicie sesión en <e>remotebox</e>
y añada la clave pública al fichero
<path>~/.ssh/authorized_keys</path> así:
</p>

<pre caption="Instalando la clave pública">
$ <i>ssh drobbins@remotebox</i>
drobbins@remotebox's password: <comment>(introducir contraseña)</comment>
Last login: Thu Jun 28 20:28:47 2001 from localbox.gentoo.org 

Welcome to remotebox!

$ <i>cat identity.pub >> ~/.ssh/authorized_keys</i>
$ <i>exit</i>
</pre>

<p>
Ahora, con la autenticación RSA configurada, deberíamos ser
preguntados por nuestra <e>frase de paso</e> RSA (en vez de nuestra
<e>contraseña</e>) cuando intentemos conectarnos a <e>remotebox</e>
usando <c>ssh</c>.
</p>

<pre caption="Inicio de sesión con autenticación de clave pública">
$ <i>ssh drobbins@remotebox</i>
Enter passphrase for key '/home/drobbins/.ssh/identity': 
</pre>

<p>
¡Enhorabuena, completada la configuración de la autenticación RSA! Si
no fuera preguntado por una frase de paso, aquí hay algunas cosas que
probar. Primero, intente iniciar sesión escribiendo <c>ssh -1
drobbins@remotebox</c>. Esto le dirá a ssh que use sólo la versión 1
del protocolo ssh, y puede ser necesario si por alguna razón el
sistema remoto está usando la autenticación DSA por defecto. Si eso no
funciona, asegúrese que no tenga una línea que ponga
<c>RSAAuthentication no</c> en su <path>/etc/ssh/ssh_config</path>. Si
la tiene, coméntela precediéndola con un "#". En otro caso, intente
contactar con el administrador del sistema <e>remotebox</e> y
verifique que tienen habilitada la autenticación RSA y tienen las
configuraciones apropiadas en <path>/etc/ssh/sshd_config</path>.
</p>
</body>
</section>

<section>
<title>Generación de clave DSA</title>
<body>

<p>
Mientras que las claves RSA son usadas por la versión 1 del protocolo
<c>ssh</c>, las claves DSA son usadas por el protocolo de nivel 2, una
versión actualizada del protocolo <c>ssh</c>. Cualquier versión
moderna de OpenSSH debería ser capaz de usar ambas claves RSA y
DSA. Generar claves DSA usando <c>ssh-keygen</c> de OpenSSH puede
hacerse de manera similiar a RSA de la siguiente manera:
</p>

<pre caption="Generar un par de claves DSA">
$ <i>ssh-keygen -t dsa</i>
</pre>

<p>
De nuevo, seremos preguntados por una frase de paso. Introduzca una
segura. También se nos preguntará por una localicación para guardar
nuestras claves DSA. Las de por defecto, normalmente
<path>~/.ssh/id_dsa</path> y <path>~/.ssh/id_dsa.pub</path>, deberían
estar bien. Después de que nuestra generación única de clave DSA esté
completa, es hora de instalar nuestra clave pública DSA en los
sistemas remotos.
</p>
</body>
</section>

<section>
<title>Instalación de la clave pública DSA</title>
<body>

<p>
De nuevo, la instalación de la clave pública DSA es casi idéntica a la
RSA. Para DSA, querremos copiar nuestro fichero
<path>~/.ssh/id_dsa.pub</path> a <e>remotebox</e>, y entonces añadirlo
a <path>~/.ssh/authorized_keys2</path> en <e>remotebox</e>. Note que
este fichero tiene un nombre distinto que el fichero
<path>authorized_keys</path> de RSA. Una vez configurado, deberíamos
ser capaces de iniciar sesión en <e>remotebox</e> escribiendo nuestra
frase de paso de la clave privada DSA en vez de escribir nuestra
contraseña de <e>remotebox</e>.
</p>

<note>
Hoy en día debería usar únicamente la versión 2 del protocolo ssh, ya
que la versión 1 tiene flaquezas.
</note>
</body>
</section>

<section>
<title>La próxima vez</title>
<body>

<p>
Ahora mismo, debería tener la autenticación RSA o DSA funcionando,
pero aún necesita escribir su frase de paso en cada nueva conexión. En
mi próximo artículo, veremos cómo usar <c>ssh-agent</c>, un sistema
realmente bueno que nos permite establecer conexiones <e>sin</e> dar
una contraseña, pero también nos permite mantener nuestras claves
privadas encriptadas en el disco. También presentaré <c>keychain</c>,
un interfaz muy útil de <c>ssh-agent</c> que hace a <c>ssh-agent</c>
aún más seguro, práctico y divertido de usar. Hasta entonces, eche un
vistazo a los prácticos recursos de abajo para seguir por el buen
camino.
</p>
</body>
</section>
</chapter>

<chapter id="resources">
<title>Recursos</title>
<section>
<body>

<ul>
  <li>
    Lea los otros dos artículos de Daniel de esta serie, <uri
    link="/doc/en/articles/openssh-key-management-p2.xml">OpenSSH key
    management, Part 2</uri> and <uri
    link="/doc/en/articles/openssh-key-management-p3.xml">OpenSSH key
    management, Part 3</uri>
  </li>
  <li>
    Asegúrese de visitar la web del desarrollo de <uri
    link="http://www.openssh.com">OpenSSH</uri>.
  </li>
  <li>
    Mire los <uri link="http://www.openssh.com/faq.html">FAQ de OpenSSH</uri>.
  </li>
  <li>
    <uri link="http://www.chiark.greenend.org.uk/~sgtatham/putty/">PuTTY</uri>
    es un excelente cliente de <c>ssh</c> para máquinas Windows.
  </li>
  <li>
    Puede encontrar útil el libro de O'Reilly <e>SSH, The Secure Shell: The
    Definitive Guide</e>. La <uri link="http://www.snailbook.com/">web de los
    autores</uri> contiene información sobre el libro, un FAQ, noticias y
    actualizaciones.
  </li>
</ul>
</body>
</section>
</chapter>
</guide>
