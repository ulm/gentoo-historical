<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/articles/partitioning-p2.xml,v 1.4 2005/11/07 00:16:20 yoswink Exp $ -->

<guide link="/doc/es/articles/partitioning-p2.xml" disclaimer="articles" lang="es">
<title>Particionamiento en acción, Parte 2</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Editor">
  <mail link="jackdark@gmail.com">Joshua Saddler</mail>
</author>
<author title="Traductor">
  <mail link="LinuxBlues@gentoo-es.org">Fernando M. Bueno</mail>
</author>


<abstract>
En este segundo consejo acerca de cómo cambiar el entramado de particiones en
un sistema en funcionamiento, Daniel Robbins muestra cómo mover /tmp y /var a
otra partición compartida por ambos. También cubre algunos trucos para evitar
caídas y evitar cometer costosos errores.
</abstract>

<!-- The original version of this article was first published on IBM
developerWorks, and is property of Westtech Information Services. This
document is an updated version of the original article, and contains
various improvements made by the Gentoo Linux Documentation team -->

<version>1.3</version>
<date>2005-10-09</date>

<chapter>
<title>Consolidación de datos</title>
<section>
<title>Introducción</title>
<body>

<p>
En mi <uri link="/doc/es/articles/partitioning-p1.xml">anterior consejo</uri>,
movimos apropiadamente <path>/home</path> a una nueva partición. Ahora, es el
momento de aprender cómo consolidar archivos modificados frecuentemente en una
nueva partición. ¿Por qué queremos hacer esto? He aquí un ejemplo. Los archivos
modificados frecuentemente contribuyen extraordinariamente a la fragmentación.
Una de las mejores formas de minimizar su efecto, es almacenar los archivos
modificados frecuentemente en su propia partición. De esta forma, las otras
particiones no se verán afectadas por la fragmentación de los archivos
modificados muy a menudo. El concepto es fácil de entender, pero ¿como podemos
hacerlo?
</p>

<p>
Primero, debemos crear una nueva partición para el propósito concreto de
almacenar todos los archivos modificados muy a menudo. Se puede querer usar
otro disco duro separado para incrementar el rendimiento. Entonces, seguimos
los pasos para mover tanto <path>/tmp</path> como <path>/var</path> a una nueva
partición.
</p>

<warn>
La siguiente técnica describe cómo mover partición(es). Aunque esta técnica
está diseñada para que uno pueda regresar sobre sus pasos de un fallo al
moverla, no protege de errores de usuario. En otras palabras, siempre que uno
formatea particiones o se copia gran número de archivos, existe la posibilidad
de teclear un comando equivocadamente y causar la pérdida de muchos datos. Por
esta razón, se recomienda encarecidamente <e>tomar todos pasos necesarios
adecuadamente para hacer una copia de seguridad de todos los archivos
importantes antes de proceder</e>.
</warn>

</body>
</section>
<section>
<title>Crear un sistema de ficheros en la nueva partición</title>
<body>

<p>
El primer paso de este procedimiento es crear una nueva partición lo
suficientemente grande como para alojar <path>/var</path> y <path>/tmp</path>,
con algo de espacio adicional. Se necesita o bien una unidad libre o bien otra
partición no usada que contendrá los archivos modificados frecuentemente. De
resultar necesario usar <c>fdisk</c> o <c>cfdisk</c> para crear la nueva
partición, se necesitará reiniciar el sistema una vez. Entonces, es el momento
de formatear la nueva partición como indicamos (no hay problema si se está en
modo multi-usuario mientras se hace esto; (indicaré cuándo es necesario pasar a
modo mono-usuario):
</p>

<pre caption="Creación del sistema de ficheros">
# <i>mkfs.ext2 /dev/???</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>La Montamos en /mnt/variable</title>
<section>
<body>

<p>
Como en mi anterior consejo, debe reemplazarse <path>???</path> por el nombre
del dispositivo para la nueva partición vacía que estamos creando. Teclear
accidentalmente el número de partición equivocado, provocará que perdamos todos
los datos en esa otra partición, ¡hay que tener mucho cuidado! Después de
teclear este comando tendremos un sistema de ficheros ext2 completamente nuevo
en la recién creada partición. Estamos casi listos para montarla, pero primero,
vamos a crear un nuevo punto de montaje.
</p>

<pre caption="Creación de un punto de montaje">
# <i>mkdir /mnt/variable</i>
</pre>

<p>
He elegido el nombre <path>variable</path> para recordarnos que esta partición
en concreto va a ser usada específicamente para contener ficheros de los que se
va a leer y en los que se va a escribir frecuentemente. Para montar la
partición tecleamos:
</p>

<pre caption="Montar la partición">
# <i>mount /dev/??? /mnt/variable</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Creación de un nuevo /tmp</title>
<section>
<body>

<p>
La partición está montada y estamos listos para crear nuestro nuevo directorio
<path>/tmp</path>:
</p>

<pre caption="Creación del nuevo /tmp">
# <i>cd /mnt/variable</i>
# <i>mkdir tmp</i>
# <i>chmod 1777 tmp</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Pasar a modo mono-usuario</title>
<section>
<body>

<p>
Nuestro nuevo directorio en <path>/mnt/variable/tmp</path> tiene los permisos
correctos para un directorio temporal. Ahora, se pasa a modo de usuario único,
dado que debemos copiar desde <path>/var</path>. Como siempre, hemos retrasado
este paso lo máximo posible. Ahora, no podemos permitir que ningún programa lea
o escriba datos en <path>/var</path>, así que debemos detener todos los
demonios, desconectar a todos los usuarios y hacer algo de mantenimiento
tecleando:
</p>

<pre caption="Entrar en modo mono-usuario">
# <i>init 1</i>
</pre>

<p>
Si se nos pregunta, debemos entrar la contraseña de root para realizar el
mantenimiento del sistema. Deberíamos tener un intérprete de comandos root
ahora y se detendrán todos los demonios innecesarios. Creamos una nueva
localización para los archivos de <path>/var</path> tecleando:
</p>

<pre caption="Creación del nuevo directorio">
# <i>cd /mnt/variable</i>
# <i>mkdir var</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Copiar /var</title>
<section>
<body>

<p>
Los permisos por defecto en nuestro nuevo directorio <path>/mnt/variable/var
</path> deberían ser correctos, así pues, estamos listos para copiar el
contenido de <path>/var</path> en la nueva partición::
</p>

<pre caption="Copiado de datos">
# <i>cd /var </i>
# <i>cp -ax * /mnt/variable/var</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Copia de seguridad y creación de enlaces simbólicos</title>
<section>
<body>

<p>
Cuando este comando concluya, tendremos una copia exacta de <path>/var</path>
en <path>/mnt/variable/var</path>. Ahora, nos estaremos preguntando cómo hacer
que Linux use <path>/mnt/variable/var</path> y <path>/mnt/variable/tmp</path>
en lugar de los que hay por defecto en el sistema de ficheros raíz. Puede
hacerse fácilmente mediante el uso de enlaces simbólicos -- crearemos los
nuevos enlaces simbólicos, <path>/tmp</path> y <path>/var</path>, que apuntarán
a los directorios correspondientes en <path>/mnt/variable</path>. Primero,
crearemos una copia de seguridad de los directorios originales:
</p>

<pre caption="Copia de seguridad de los directorios">
# <i>cd /</i>
# <i>cp var var.anterior</i>
# <i>cp tmp tmp.anterior</i>
</pre>

<p>
El último comando será probablemente innecesario, dado que es muy probable que
no se tenga nada importante en <path>/tmp</path>, pero vamos a hacerlo de la
forma más segura posible. Ahora, se crean los enlaces simbólicos:
</p>

<pre caption="Creación de los enlaces simbólicos">
# <i>cd /</i>
# <i>ln -s /mnt/variable/var /var</i>
# <i>ln -s /mnt/variable/tmp /tmp</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Toques finales en /etc/fstab</title>
<section>
<body>

<p>
Ahora, cuando cualquier usuario o programa use <path>/var</path>, se redirigirá
automáticamente a <path>/mnt/variable/var</path>, al igual que con <path>/tmp
</path>. Aún nos queda un paso más, pero puede ser realizado de forma segura en
modo multi-usuario nuevamente. Es el momento de poner Apache en funcionamiento
de nuevo y de permitir a todos los usuarios que puedan entrar de nuevo al
sistema. Salimos del nivel de ejecución 1 presionando <c>CTRL-D</c>. El sistema
debería iniciarse normalmente. Entramos como root.
</p>

<p>
El último paso que debemos dar consiste en configurar <path>/etc/fstab</path>
para que monte <path>/dev/???</path> en <path>/mnt/variable</path>. Se debe
añadir una línea como la siguiente en <path>/etc/fstab</path>:
</p>

<pre caption="Configuración de fstab">
/dev/???   /mnt/variable   ext2   defaults   1   2
</pre>

<impo>
Si se tiene un kernel del rango 2.3+, es muy probable que se tenga una línea
como la siguiente en <path>/etc/fstab</path>:
</impo>

<pre caption="Memoria compartida">
none   /var/shm   shm   defaults   0   0
</pre>

<p>
Esta línea habilita la memoria compartida en el sistema, y se monta por defecto
en <path>/var</path>. Para que este parámetro funcione correctamente, debe
aparecer justo después de la línea que acabamos de añadir. De esta forma,
cuando se inicia Linux, <path>/mnt/variable</path> se montará primero
(habilitando /var). Entonces, y sólo entonces, el dispositivo de memoria
compartida shm se montará en <path>/var/shm</path>, aunque en realidad sea
<path>/mnt/variable/var/shm</path>. Hay que asegurarse de que las líneas están
en este orden:
</p>

<pre caption="Habilitar la memoria compartida">
/dev/???        /mnt/variable   ext2    defaults       1     2
none            /var/shm        shm     defaults       0     0
</pre>

<p>
Después de guardar los cambios en <path>/etc/fstab</path>, ¡el sistema se habrá
actualizado correctamente! Después de verificar que todo está funcionando
correctamente, se podrán eliminar los directorios de las copias de seguridad
<path>/tmp.anterior</path> y <path>/var.anterior</path>. Enhorabuena -- se han
reconfigurado las particiones del sistema para alcanzar un rendimiento óptimo.
</p>

</body>
</section>
<section id="resources">
<title>Recursos</title>
<body>

<ul>
  <li>
    En <uri link="/doc/es/articles/partitioning-p1.xml">Particionamiento en
    acción: Mover /home</uri>, se muestra paso a paso cómo mover
    <path>/home</path> a una nueva partición.
  </li>
  <li>
    En <uri link="/doc/es/articles/maximum-swappage.xml">Maximizar el
    intercambio</uri>, se muestra cómo incrementar drásticamente el rendimiento
    del espacio de intercambio bajo Linux.  </li>
  <li>
    En <uri link="/doc/es/articles/partition-planning-tips.xml">Planificación de
    Particiones</uri>, comparto varias formas de organizar efectivamente el
    planteamiento de las particiones.
  </li>
  <li>
    Siempre recomiendo comprobar los <uri
    link="http://www.insflug.org/comos/comos.php3?accion=autor&amp;nombre=%">COMOS
    </uri> en <uri link="http://www.insflug.org/">El Proyecto de Documentación
    de Linux</uri> -- son un recurso extraordinario.
  </li>
</ul>

</body>
</section>
<section>
<title>Acerca del autor</title>
<body>

<p>
Daniel Robbins vive en Albuquerque, New Mexico. Él fue el Presidente/CEO de
Gentoo Technologies Inc., el Arquitecto Jefe del Proyecto Gentoo y contribuye
como autor de varios libros publicados por MacMillan: Caldera OpenLinux
Unleashed, SuSE Linux Unleashed y Samba Unleashed. Daniel se ha visto
involucrado en el mundo de las computadoras de algún modo desde segundo grado
cuando se expuso al lenguaje de programación Logo y a una potencialmente letal
dosis de Pac Man. Ésto probablemente explica porqué ha sido un artista de
gráficos en SONY Electronic Publishing/Psygnosis. Daniel disfruta pasando el
tiempo con su mujer Mary y con su hija, Hadassah. Se puede contactar con Daniel
en <mail>drobbins@gentoo.org</mail>.
</p>

</body>
</section>
</chapter>
</guide>
