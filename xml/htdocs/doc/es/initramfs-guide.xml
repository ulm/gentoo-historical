<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/es/initramfs-guide.xml,v 1.4 2013/09/18 09:54:06 nimiux Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide disclaimer="obsolete" redirect="https://wiki.gentoo.org/wiki/Initramfs/HOWTO" lang="es">
<title>Guía Gentoo Linux de Sistemas de Archivos Iniciales en RAM</title>

<author title="Autor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Traductor">
  <mail link="chiguire"/>
</author>

<abstract>
Cada vez más sistemas requieren de un sistema de archivos iniciales en
RAM o initramfs para iniciar correctamente. En esta guía, tratamos de
entender los conceptos de los initramfs al igual que como crearlos
correctamente y manejar sus instancias.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/3.0 -->
<license/>

<version>2</version>
<date>2012-07-24</date>

<chapter>
<title>Conceptos de los initramfs</title>
<section>
<title>Introducción</title>
<body>

<p>
Para muchos usuarios un sistema initramfs no es asunto de
preocupación. Sus sistemas usan esquemas sencillos de particiones de
disco, sin manejadores o configuraciones exóticas (tales como sistemas
de archivo encriptados), de manera que el núcleo Linux kernel bien
puede entregar el control al binario <c>init</c> de su sistema. Sin
embargo, para muchos sistemas, un initramfs es prácticamente
obligatorio.
</p>

<p>
El concepto clave para entender lo que es un initramfs (o para qué
sirve) sería comprender como funciona el proceso de arranque de Linux,
aún aproximándolo a un alto nivel.
</p>

</body>
</section>

<section>
<title>El proceso de arranque de Linux</title>
<body>

<p>
Una vez que el núcleo Linux obtiene control sobre el sistema (lo cual
ocurre luego de ser cargado por el gestor de arranque), prepara las
estructuras de memoria y los manejadores de la mejor forma que
puede. Luego entrega el control a otra aplicación (usualmente
<c>init</c>), cuya tarea es continuar la adecuación del sistema y
asegurarse que al concluir el proceso de arranque todos los servicios
necesarios estan disponibles y que el usuario puede ingresar. La
aplicación <c>init</c> hace esto iniciando, entre otros servicios, el
demonio <c>udev</c> que a su vez también cargará y preparará el
sistema en base a los dispositivos detectados. Al iniciar
<c>udev</c>, todos los sistemas de archivos que quedan y deben ser
montados, se montan, y los servicios faltantes se inician.
</p>

<p>
Para sistemas donde todos los archivos y herramientas necesarias
residen en el mismo sistema de archivos, la aplicación <c>init</c>
puede controlar perfectamente el resto del proceso de arranque. Sin
embargo, cuando se han definido múltiples sistemas de archivos (o
necesitamos configuraciones más exóticas), esto podría ser un poco
más difícil:
</p>

<ul>
  <li>
    Cuando la partición <path>/usr</path> está en un sistema de
    archivos separado, las herramientas y manejadores con archivos
    almacenados en <path>/usr</path> no pueden usarse a no ser que
    <path>/usr</path> esté disponible. Si esas herramientas se
    necesitan para que <path>/usr</path> sea disponible, entonces el
    sistema no podrá arrancar.
  </li>
  <li>
    Si el sistema de archivos raíz está encriptado, entonces el núcleo
    Linux no podrá encontrar la aplicación <c>init</c>, lo cual
    resultará en un sistema que no iniciará.
  </li>
</ul>

<p>
La solución a este problema ha sido desde hace tiempo utilizar un
<e>initrd</e> (dispositivo de raíz inicial).
</p>

</body>
</section>

<section>
<title>El dispositivo de raíz inicial</title>
<body>

<p>
Un <e>initrd</e> es una estructura de disco en memoria (ramdisk) que
contiene las herramientas y guiones necesarios para montar los
sistemas de archivos necesitados antes de pasar el control a la
aplicación <c>init</c> en el sistema de archivos raíz. El núcleo
Linux ejecuta el guión de configuración (usualmente, pero no
obligatoriamente llamado <c>linuxrc</c>) en este disco raíz, que
prepara al sistema, cambia al verdadero sistema de archivos raíz y
luego llama a <c>init</c>.
</p>

<p>
Aunque el método initrd es todo lo que se requiere, tiene algunas
desventajas:
</p>

<ul>
  <li>
    Es un dispositivo de bloque de pleno derecho que requiere la carga
    de llevar un sistema de archivos completo con un estado fijo. Si
    elige un initrd muy pequeño, no podremos incluir todos los
    guiones necesarios y si lo hacemos muy grande estamos
    desperdiciando memoria.
  </li>
  <li>
    Como es un dispositivo verdadero, también consume memoria caché en
    el núcleo Linux y es propenso a los métodos de manejo de memoria y
    archivos en uso (como paginación), empeorando la situación con
    respecto al consumo de memoria.
  </li>
</ul>

<p>
El initramfs se creó para resolver estos (para algunos) problemas.
</p>

</body>
</section>

<section>
<title>El sistema de archivos inicial en ram</title>
<body>

<p>
Un <e>initramfs</e> es un sistema de archivos inicial basado en
<e>tmpfs</e> (un sistema de archivos en memoria liviano y flexible
en cuanto a tamaño), que requiere dispositivos de bloque separados
(de manera que no requiere caché y la carga mencionada antes
desaparece). Tal como el initrd, contiene las herramientas y los
guiones necesarios para montar los sistemas de archivos antes de
llamar el binario <c>init</c> en el verdadero sistema de archivos
raíz. Estas herramientas pueden ser capas de abstracción para
desencriptación (para los sistemas de archivo encriptados),
manejadores de volúmenes lógicos, raid en software, cargadores de
sistemas de archivo basados en manejadores bluetooth, etc.
</p>

<p>
El contenido del initramfs se realiza creando un archivo.
<c>cpio</c> es una antigua (pero de uso probado) solución de
archivos (sus archivos son conocidos como <e>archivos cpio</e>).
Son definitivamente comparados con <c>tar</c>. La elección de
<c>cpio</c> en este caso es porque era más fácil de
implementar (en términos de código) y soporta (aún en épocas
antiguas) los archivos de dispositivos (lo cual <c>tar</c>
no puede hacer).
</p>

<p>
Todos los archivos, herramientas, librerías configuraciones (si
aplican), etc. se colocan en el archivo cpio. Este archivo se
comprime con la herramienta <c>gzip</c> y se almacena junto al
núcleo Linux. El gestor de arranque se lo ofrecerá al núcleo en
el momento de arrancar de modo que el núcleo sabrá que se
requiere un initramfs.
</p>

<p>
Una vez detectado, el núcleo Linux creará un sistema de archivos
tmpfs, allí extraerá el contenido del archivo e iniciará el guión
<c>init</c> en la raíz del sistema de archivos tmpfs. Este guión
luego montará el verdadero sistema de archivos raíz (despúes de
asegurar que lo puede montar, por ejemplo, cargando módulos
adicionales, preparando una capa de abstracción para manejar
encriptación, etc.) al igual que otros sistemas de archivos
vitales (como <path>/usr</path> y <path>/var</path>).
</p>

<p>
Una vez que el sistema de archivos raíz y otros sistemas de
archivos vitales están montados, el guión <c>init</c> del
initramfs cambiará la raíz al verdadero sistema de archivos
raíz y finalmente llamar a <c>/sbin/init</c> en ese sistema
para continuar con el proceso de arranque.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Crear un initramfs</title>
<section>
<title>Introducción y configuración del gestor de arranque</title>
<body>

<p>
Para crear un initramfs, es importante saber qué manejadores,
guiones y herramientas adicionales se requieren para arrancar
el sistema. Por ejemplo, si usa LVM, entonces deberá soportar las
herramientas LVM en el initramfs. De igual manera, si usa RAID en
software, hará falta <c>mdadm</c>, etc.
</p>

<p>
Algunas herramientas ayudan a crear initramfs (archivos cpio
comprimidos) para el sistema. Para los que quieren un control total,
se puede crear fácilmente initramfs propios también.
</p>

<p>
Una vez creados, debemos ajustar la configuración del gestor de
arranque para que sepa que se usará un initramfs. Por ejemplo, si el
archivo del initramfs file está almacenado como
<path>/boot/initramfs-3.2.2-gentoo-r5</path>, entonces la
configuración en <path>/boot/grub/grub.conf</path> sería:
</p>

<pre caption="Ejemplo en grub.conf para arrancar con un initramfs">
title Gentoo Linux 3.2.2-r5
root (hd0,0)
kernel /boot/kernel-3.2.2-gentoo-r5
initrd /boot/initramfs-3.2.2-gentoo-r5
</pre>

</body>
</section>

<section id="genkernel">
<title>Usar genkernel</title>
<body>

<p>
<c>genkernel</c>, la herramienta de Gentoo para construir núcleos,
puede ser utilizada para generar un initramfs, aunque no haya usado
<c>genkernel</c> para configurar o construir el núcleo.
</p>

<p>
Para usar <c>genkernel</c> para generar un initramfs, se recomienda
incluir todos los manejadores y código necesario para montar los
sistemas de archivos <path>/</path> y <path>/usr</path> al construir
el núcleo (no como módulos). Luego, llamar a <c>genkernel</c> de la
siguiente manera:
</p>

<pre caption="Ejecutar genkernel para crear un initramfs">
# <i>genkernel --install --no-ramdisk-modules initramfs</i>
</pre>

<p>
Dependiendo del sistema, tal vez quiera agregar una o más de las
siguientes opciones:
</p>

<table>
<tr>
  <th>Opción</th>
  <th>Descripción</th>
</tr>
<tr>
  <ti>--disklabel</ti>
  <ti>Agrega soporte para configurar con <c>LABEL=</c> en el
  <path>/etc/fstab</path></ti>
</tr>
<tr>
  <ti>--dmraid</ti>
  <ti>Agrega soporte para RAID falso en hardware</ti>
</tr>
<tr>
  <ti>--firmware</ti>
  <ti>Agregar código firmware para el sistema</ti>
</tr>
<tr>
  <ti>--gpg</ti>
  <ti>Agregar soporte para GnuPG</ti>
</tr>
<tr>
  <ti>--iscsi</ti>
  <ti>Agregar soporte para iSCSI</ti>
</tr>
<tr>
  <ti>--luks</ti>
  <ti>Agregar soporte para contenedores de encriptación luks</ti>
</tr>
<tr>
  <ti>--lvm</ti>
  <ti>Agregar soporte para LVM</ti>
</tr>
<tr>
  <ti>--mdadm</ti>
  <ti>Agregar soporte para RAID en software</ti>
</tr>
<tr>
  <ti>--multipath</ti>
  <ti>Agregar soporte para acceso E/S múltiple a un SAN</ti>
</tr>
<tr>
  <ti>--zfs</ti>
  <ti>Agregar soporte para ZFS</ti>
</tr>
</table>

<p>
Al terminar, el initramfs resultante estará almacenado en
<path>/boot</path>.
</p>

</body>
</section>

<section id="dracut">
<title>Usando dracut</title>
<body>

<warn>
En el momento de escribir esta guía, dracut todavía no está
marcado como estable, de manera que tal vez tenga que
desenmascarlo antes de continuar.
</warn>

<p>
La herramienta <c>dracut</c> se creó con el único propósito de
manejar archivos initramfs. Utiliza un enfoque altamente modular
acerca de la inclusión o no del soporte deseado.
</p>

<p>
Al instalar <c>dracut</c>, asegúrese de incluir soporte para los
<c>DRACUT_MODULES</c> adecuados. Esta es una variable de entorno
configurable en <path>/etc/portage/make.conf</path> para incluir
soporte para configuraciones específicas:
</p>

<pre caption="Prepación para instalar dracut">
DRACUT_MODULES="dmraid lvm syslog -biosdevname -btrfs -caps -crypt -crypt-gpg
-dmsquash-live -gensplash -iscsi -livenet -mdraid -multipath -nbd -nfs -plymouth
-ssh-client"
</pre>

<p>
Es aconsejable activar (o desactivar) los módulos que necesite
(y no necesite). Luego, haga <c>emerge dracut</c> para instalar la
herramienta en el sistema.
</p>

<p>
El siguiente paso es configurar <c>dracut</c> modificando
<path>/etc/dracut.conf</path>. En el archivo de configuración, por
cierto bien comentado, podemos agregar soporte para módulos
específicos en caso de necesidad.
</p>

<p>
Una vez preparada la configuración, podemos crear un initramfs
ejecutando <c>dracut</c> así:
</p>

<pre caption="Ejecutar dracut para generar un initramfs">
# <i>dracut</i>
</pre>

<p>
La imagen resultante soporta arranque de sistemas genéricos basados
en la configuración en <path>/etc/dracut.conf</path>. También podemos
optar por generar un initramfs específicamente configurado para el
sistema (en el cual <c>dracut</c> intenta detectar las herramientas,
manejadores, etc. del sistema actual). Si conoce el soporte necesario
(código y manejadores) que forma parte del núcleo (no como módulos),
entonces puede agregar la opción <c>--no-kernel</c>:
</p>

<pre caption="Permitir que dracut genere un initramfs específico">
# <i>dracut --host-only --no-kernel</i>
</pre>

<p>
Para más información, revise las páginas man <c>dracut</c> y
<c>dracut.cmdline</c>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Recursos adicionales</title>
<section>
<title>Específicos de Gentoo</title>
<body>

<ul>
  <li>
    <uri
    link="http://en.gentoo-wiki.com/wiki/Initramfs">Initramfs</uri>
    (en inglés) en Gentoo-wiki.com
  </li>
  <li>
    <uri link="http://wiki.gentoo.org/wiki/Initramfs">Initramfs</uri>
    (en inglés) en el wiki oficial de Gentoo
  </li>
  <li>
    <uri link="http://wiki.gentoo.org/wiki/Dracut">Dracut</uri>
    (en inglés) en el wiki oficial de Gentoo
  </li>
</ul>

</body>
</section>

<section>
<title>Recursos generales</title>
<body>

<ul>
  <li>
    <uri
    link="https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt">
    ramfs-rootfs-initramfs.txt</uri> (en inglés) dentro de la propia
    documentación del núcleo Linux
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
