<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/zh_tw/portage-manual.xml,v 1.7 2004/11/28 10:25:21 ccpz Exp $ -->
<!-- rev 1.33 by ccpz --> 
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link = "portage-manual.xml" lang="zh_tw">
<title>Portage 手冊</title>

<author title="Author and Editor">
  <mail link="blocke@shivan.org">Bruce A. Locke</mail>
</author>
<author title="Editor">
  <mail link="carl@gentoo.org">Carl Anderson</mail>
</author>
<author title="Editor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Editor">
  <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Editor">
  <mail link="erwin@gentoo.org">Erwin</mail>
</author>
<author title="Translator"> 
  <mail link="ccpz@gentoo.org">YiDa Chiang</mail>
</author> 
<author title="Reviewer">
  <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>

<abstract>
這份手冊提供 Portage 的概覽，詳細的設定資訊及一般使用者使用 Portage 來安裝，維
護套件的指南。
</abstract>

<license/>

<version>0.9.16</version>
<date>July 04, 2004</date>

<chapter>
<title>Portage：概覽</title>
<section>
<title>概覽</title>
<body>

<p>
Portage 是一個很有威力，並且先進的套件管理系統。他的彈性及從簡單的編譯程式到建
立創新的 Linux 套件讓他贏得了 Meta-distribution Engine 得頭銜。Gentoo Linux 是
依靠 Portage 來建立的。
</p>

<p>
Gentoo Linux 本身通常被視為準發行版。他由 Portage 及超過4000套以上叫做
 <e>ebuilds</e> 的軟體套件編譯指令搞組成。這些 <e>ebuilds</e> 告訴 Portage 核心
如何編譯及安裝軟體套件。透過使用 <e>profiles</e> 以及指令列工具 <c>emerge</c>，
使用者和開發者可以使用 Portage 來安裝及維護組成基本的作業系統及應用程式的軟體套
件。
</p>

<p>
Gentoo Linux 是"即時編譯"。安裝 Gentoo Linux 的動作包含設定足以工作的編譯器，由
 Portage 透過網際網路下載建立 Linux 環境所需的原始碼，還有編譯其餘的系統"核心"
和合適的軟體。雖然 Portage 的確支援使用預先編譯好的程式來安裝，但這只是一種妥協
，讓比較慢的電腦也可以安裝，或是想要快速還原某些套件的發展者，以及在較快的電腦
先編譯再拿到比較慢的電腦去使用的使用者。
</p>

<p>
因為以上的性質以及 Portage 具有相當高的編譯及安裝方式的操控性。極少數的 Gentoo 
安裝方式會一樣，基本上來說，當使用者安裝 Gentoo Linux 時，Portage 系統依照 
Portage 中的設定以及 ebuilds 本身的設定來編譯自訂的 Linux 套件。
</p>	

<p>
第一眼看到 Portage 這個概念時或許會覺得和傳統的 BSD port 系統很類似，他們都從原
始碼編譯套件並且允許使用者安全的從系統安裝或移除軟體，以及自動的處理相依性。許
多 Portage 的概念是從 BSD ports 系統借來的，但是 Portage 絕不只是另一個 
"ports 模仿者"。
</p>

<p>
Portage 系統是融合了 Python 核心和以 <e>Ebuilds</e> 為基礎的 Bash 指令搞。不是
由 Makefiles 和 <c>make</c> 處理，而是巧妙的使用 Python 的威力及輕鬆的使用指令
搞的物件導向特性來建立獨一無二且有力的系統，我們敢將 Portage 放置在目前所有
 ports 系統之前。
</p>

<p>
一些 Portage 先進的功能讓 Portage 提供同時使用同一軟體的不同版本(校定版本)的能
力，相依性分析與功能的支援，容易使用的套件管理，安全的 sandbox 安裝，檔案保護設
定，profiles，還有其他許多。這些功能裡一大部分會在手冊的後面討論到。
</p>

</body>
</section>
<section>
<title>相依性分析與功能的支援</title>
<body>

<p>
Portage 提供給使用者的彈性是相當特殊的。傳統的 BSD ports 系統在 port 樹中一次只
能支援該套件的單一版本，Portage 則沒有這種限制。同一套件的不同版本都可以拿來安
裝。套件相依性，也就是某個套件在編譯時需要另一個套件，可以用名稱或名稱以及一段
版本範圍來指定。這讓多重版本同時存在是很安全的。
</p>

<p>
相依性系統也支援了可調控的相依性。Portage 有一種很有威力的概念叫做 
<e>USE 設定</e>系統。藉著改變 Portage 設定檔中一個設定參數，你可以對所有套件在
編譯時關閉某個非必要的功能支援(包括他需要的東西)或函式庫。這是一個非常有彈性及
威力的系統，我們會在下一章更進一步討論他。
</p>

<p>
此外 Portage 也支援 <e>SLOT</e> 的概念。在 Gentoo Linux 的發展過程中，發展者常
會發現需要某一套件的多重版本(例如函式庫)同時安裝來滿足其他套件的要求。傳統上解
決這個問題的方法是把同一個套建的不同版本當作不同套件來看待，給予略為不同的名稱
。
</p>

<p>
發展者不把某一版本當作獨立的版本，而是告訴 Portage 如何利用 <e>SLOT</e> 來處理
及維護套件的多個版本。一個為人所熟知的例子就是 freetype 函式庫。1.x 系列版本和
 2.x 並不相容，但是許多套件都依賴這兩種版本其中之一。大部分的發行版以及 port 系
統常常會有 "freetype" 套件來提供 freetype 1.x，以及 "freetype2" 提供 2.x。我們
認為這個方法基本上來說代表一個毀損的 portage 管理系統。我們只要輕鬆的指定
 <c>SLOT</c> 號碼 1 給第一個，2給第二個。藉著這個資訊 Portage 可以同時追蹤兩個
版本以及兩種分枝的新版本有更新時自動更新。
</p>

</body>
</section>
<section>
<title>Profiles</title>
<body>

<p>
Portage 支援 <e>profiles</e> 的概念。profile 包含套件名稱的列表以及指令及一套預
設的設定選項讓 Portage 使用。profile 告訴 Portage 那些套件中哪一個套件及哪一個
版本要允許，拒絕，還是由使用者決定。使用者可以藉著改變單一的符號連結
(<path>/etc/make.profile</path>)來改變 profiles。這或許看起來很簡單`,但是可以讓
 Portage 建立一個發行版的核心，以及一個專業級的變異系統。
</p>

<p>
建立 Gentoo Linux 發行版整個的工作是由一大群 Portage 所使用的 <e>ebuild</e> 檔
案來完成的。Profile 定義哪些套件對系統使用上是足夠重要而要視為 "核心" 套件。
Profile 也允許發展者限制或取消限制某個套件版本來暫時移除已損毀的套件等等。
<e>ebuild</e> 檔案只要簡單的告訴 Portage 實際上如何編譯及安裝 profile 所要求或
允許的套件。
</p>

</body>
</section>
</chapter>

<chapter>
<title>設定 Portage</title>
<section>
<title>概覽</title>
<body>

<p>
下面的章節包含了多種角度的 Portage 設定，對使用者或發展者來說都很重要，Portage 
是非常有彈性的系統，你將會需要了解如何設定讓 Portage 掌控你的系統，以及針對你的
需求最佳化。
</p>

<p>
請注意文件中的 "使用者" 代表有使用 Portage 管理權限，改變 Portage 設定，安裝及
反安裝軟體的使用者。
</p>

</body>
</section>
<section>
<title>Portage 設定檔</title>
<body>

<p>
幾乎的下所有討論的選項都可以在 <path>/etc/make.conf</path>、
<path>/etc/make.conf.example</path>、
<path>/etc/make.profile/make.defaults</path> 以及 
<path>/etc/make.globals</path> 找到。<path>/etc/make.conf</path> 包含許多 
Portage 用的參數。Portage 首先會檢查目前的環境變數來套用在設定上，如果找不到的
話，Portage 接下來會檢查 <path>/etc/make.conf</path>，如果在 
<path>/etc/make.conf</path> 還是沒有，就檢查 
<path>/etc/make.profile/make.defaults</path>。最後還是找不到的話，預設是從 
<path>/etc/make.globals</path> 中取得，請注意所有的設定要在環境中或 
<path>/etc/make.conf</path> 中設定，這通常是由使用者自訂的。更重要的一點是要記
得 <path>/etc/make.conf</path> 中的任何設定會覆蓋掉 
<path>/etc/make.globals</path> 的設定。在 <path>/etc/make.conf</path> 以及
 <path>/etc/make.globals</path> 中的設定到目前都被 Portage 當作全域的設定。
</p>

<p>
當你要檢查哪個設定已經定義時，建議你先檢查 <path>/etc/make.conf</path> ，然後檢
查 <path>/etc/make.globals</path>。除非是特別提醒，<path>/etc/make.conf</path> 
中的設定會取代 <path>/etc/make.globals</path> 的設定。
</p>

</body>
</section>
<section>
<title>USE 設定</title>
<body>

<p>
USE 設定系統是一個非常有彈性的方法，在編譯時對全域或個別軟體開啟或關閉套件的某
些功能。這讓管理者控制套件如何編譯，以決定哪些非必要的功能要加入。例如說支援 
GNOME 的套件可以關閉 <c>gnome</c> USE 設定來取消對 GNOME 的支援，開啟 
<c>gnome</c> USE 設定可以讓該套件支援 GNOME。
</p>

<p>
USE 設定對套件的效用決定在軟體本身和套件的 ebuild 是否支援該 USE 設定。如果軟體
沒有支援和 USE 設定相對應的功能的話，USE 設定很明顯的沒有作用。而且許多套件的相
依性對那個套件來說並不是可以自由選擇的，因此 USE 設定對強制的相依性也是沒有作用
的。套件所使用的 USE 關鍵字列表可以在 ebuild 檔案中的 <c>DEPEND</c> 以及 
<c>RDEPEND</c> 找到。
</p>

<p>
Gentoo Linux 使用的 USE 設定列表可以在 
<path>/usr/portage/profiles/use.desc</path> 中找到。每一個 USE 設定在單一行中列
出來，包含簡單的描述這個 USE 設定開啟哪些功能。
</p>

<p>
Portage 檢查四個不同的位置來決定 USE 設定是開啟還是關閉。這些位置用 "堆疊" 的方
法改變 USE 設定。Portage 閱覽每一個位置並且記得前一個位置開啟或關閉一個設定。
USE 設定在瀏覽的過程中累積。
</p>

<p>
檢查 USE 設定的位置及順序是由 <path>/etc/make.globals</path> 中的 
<c>USE_ORDER</c> 決定。要櫃必一個位置你只要簡單的將他從 <c>USE_ORDER</c> 中移除
。
</p>

<p>
接下來是 Portage 預設設定中由 <c>USE_ORDER</c> 中定義的每個位置的說明。
</p>

<p>
<b>Defaults</b>
</p>

<p>
Portage profiles 可以定義一套預設的 USE 關鍵字。這在任何 Portage profile 的 
make.defaults 檔案中定義。因為 <path>/etc/make.profile</path> 只是一個指向目前
使用的 profile 的連結。<path>/etc/make.profile/make.defaults</path> 是目前有作
用的關鍵字。因為 porfile 的改變會蓋掉你的設定，建議你不要編輯這個檔案。
</p>

<p>
<b>Auto</b>
</p>

<p>
這在 Portage profile 中的 use.defaults 檔案定義 
(<path>/etc/make.profile/use.defaults</path>)。每一行包含一個 USE設定以及相對應
的套件。如果列表上的套件安裝了，那相對的 USE 設定就被視為開啟的。例如你安裝了 
<c>x11-base/xfree</c> 而且並沒有明確的關閉位置在這之後的 X USE 設定，那 X 關鍵
字將會被全域的開啟當這個套件安裝完以後。因為 porfile 的改變會蓋掉你的設定，建議
你不要編輯這個檔案。
</p>

<p>
<b>Conf</b>
</p>

<p>
如果在 <path>/etc/make.conf</path> 有定義 <c>USE</c> 設定的話，這個設定也會被包
含在內。如果 <path>make.conf</path> 中沒有 <c>USE</c> 設定的話，會檢查 
<path>/etc/make.globals</path>。他的內容看起來可能像這樣：
</p>

<pre caption="USE 內容">
USE="slang readline gpm berkdb gdbm tcpd pam libwww ssl gb tk
lm_sensors lvm ldap tex bonobo sdl gtk xfs evo pda ldap
mmx mitshm perl python guile ruby postgres dvd 3dnow tcl
lcms gif sdl vorbis ogg oss libg++ directfb decss snmp
gnome X opengl mozilla pdflib gpg -nls gd xface jpilot
-kde -qt -esd -motif -alsa oggvorbis"
</pre>

<p>
USE 設定只要加上名稱就能輕鬆的開啟了。在名稱之前加上 <c>-</c> 字元就會被關閉。
例如說 <c>gnome</c> 開啟 GNOME 支援，而 <c>-motif</c> 關閉 motif 支援。
</p>

<p>
當你要開啟或關閉某個關鍵字時，建議你放在 <path>/etc/make.conf</path> 中的 
<c>USE</c> 設定。這個檔案並不會被 Portage 取代掉。並且建議你開啟或關閉在前兩個
位置中你不想要被關閉或開啟的 USE 關鍵字。
</p>

<p>
<b>Env</b>
</p>

<p>
USE 關鍵字可以手動的用 shell 環境變數取代掉。
</p>

<pre caption = "取代 USE 關鍵字">
# <i>export USE="-gnome"</i>
# <i>emerge net-im/gaim</i>
</pre>

<p>
這允許安裝一個或多個特定軟體時使用某些特定的 USE 設定。在設定之後就會一直使用這
些關鍵字，只要 emerge 是從這個 shell 執行而且 USE 設定仍然存在。
</p>

<note>
Portage 目前紀錄下來用來安裝的 USE 設定並不是永久的。如果重新安裝或昇級套件他將
會使用目前作用中的 USE關鍵字而不是上次安裝的 USE 設定。
</note>

</body>
</section>
<section>
<title>編譯設定</title>
<body>

<p>
Portage 用來編譯套件的編譯選項可以藉著編輯 <path>/etc/make.conf</path> 中的 
<c>CHOST</c>，<c>CFLAGS</c>，和 <c>CXXFLAGS</c> 來設定。<c>CHOST</c> 設定你編譯
的平台，而 <c>CFLAGS</c> 及 <c>CXXFLAGS</c> 分別設定編譯 C 和 C++ 時使用的編譯
參數。
</p>

<p>
不同的平台要使用哪些編譯參數在註解中提供了一些設定。這些預設值都很穩定且被測試
過了。改變他們可能會發現編譯器或軟體出現編譯錯誤或是 bug。如果你想要自訂設定請
小心，因為你可能會得到不穩定的系統。
</p>

<p>
多處理器的使用這可能會從調整 <path>/etc/make.globals</path> 中的 
<c>MAKEOPTS</c> 獲得一些好處。這選項在編譯時傳給 <c>make</c> 指令同時開啟多個 
gcc程序。
</p>

</body>
</section>
<section>
<title>目錄位置</title>
<body>

<p>
Portsge 允許你去設定他存放檔案及編譯套件時使用的目錄。大部分使用者並不需要改變
這些選項。底下這些是你可以設定的：
</p>

<ul>
  <li><c>PORTDIR</c> - Portage 樹位置</li>
  <li><c>DISTDIR</c> - 已下載的檔案存放位置</li>
  <li><c>PKGDIR</c> - 本機上產生的 tbz2 套件位置</li>
  <li><c>RPMDIR</c> - 本機上產生的 RPM 套件位置</li>
  <li><c>PORTAGE_TMPDIR</c> - 編譯套件時所使用的暫存目錄</li>
  <li><c>BUILD_PREFIX</c> - 和 PORTAGE_TMPDIR 有關</li>
  <li><c>PKG_TMPDIR</c> - 和 PKGDIR 有關</li>
</ul>

</body>
</section>
<section>
<title>設定檔案保護</title>
<body>

<p>
Portage 允許保護特定目錄內的所有設定檔。Portage 不會覆蓋掉被保護目錄內的檔案。
如果一個套件嘗試安裝一個已存在的檔案，他會被更名成類似 
<path>._cfg0000_name</path> 的名稱。這樣可以讓使用者之後查看這些新檔案並且手動
的合併這兩個檔案的相異處。
</p>

<p>
被保護的目錄可以在 <path>/etc/make.conf</path> 或 
<path>/etc/make.globals</path> 之中的 <c>CONFIG_PROTECT</c> 設定。特定的檔案或
是被保護目錄下的子目錄可以用 <c>CONFIG_PROTECT_MASK</c> 解除保護。
</p>

<p>
下便是一個範例，但你不應該直接複製他：
</p>

<pre caption = "保護特定的檔案或目錄">
CONFIG_PROTECT="/etc /usr/share/config /usr/kde/2/share/config"
CONFIG_PROTECT_MASK="/etc/gconf /etc/init.d /etc/pam.d"
</pre>

<p>
使用者可以用下面的指令取得更多的設定檔案保護資訊：
</p>

<pre caption = "更多的設定檔案保護資訊">
# <i>emerge --help config</i>
</pre>

</body>
</section>
<section>
<title>FEATURES</title>
<body>

<p>
Portage 提供許多選項，控制 Portage 的行為，以及在安裝套件的各種階段後如何清除。
這些選項應該只有發展者有興趣而對一般使用者可能會造成問題。
</p>

<p>
底下是可以在 <path>/etc/make.conf</path> 或 <path>/etc/make.globals</path> 中的
 <c>FEATURES</c> 設定選項列表：
</p>

<ul>
  <li><c>digest</c>：自動建立新的 ebuild 的 digest。</li>
  <li><c>cvs</c>：自動遞交新的 digests 給 cvs。</li>
  <li><c>sandbox</c>：啟動 "sandbox" 作為路徑前置字元保護。</li>
  <li><c>noclean</c>：Portage 不會在安裝完後清除檔案。</li>
  <li><c>noauto</c>：不要自動執行預先的編譯工作。</li>
  <li><c>distcc</c>：使用 distcc 提供的分散編譯功能。</li>
  <li><c>ccache</c>：維持編譯的目的檔讓重新編譯時可以花比較少的時間。</li>
  <li><c>buildpkg</c>：當安裝完後建立執行檔套件。</li>
  <li><c>userpriv</c>：編譯時使用一般使用者權限。</li>
  <li><c>usersandbox</c>：當 <c>userpriv</c> 啟動時使用 sandbox。</li>
  <li><c>keeptemp</c>：安裝完後不要移除暫存檔案 (${T})。</li>
</ul>

<p>
一些功能可以藉著設定底下的選項來作更好的調整：
</p>

<ul>
  <li>
    <c>CCACHE_SIZE</c>：這定義 <c>ccache</c> 可以用多少空間。預設是 2 Gb。
  </li>
  <li>
    <c>DISTCC_HOSTS</c>：定義哪些主機執行 <c>distcc</c> 的分散編譯。所有的主機
	都要執行  <c>distccd</c> 服務。
  </li>
</ul>

</body>
</section>
<section>
<title>Portage SYNC 設定</title>
<body>

<p>
Portage 支援透過 rsync 來更新 Portage 樹。如果你發現其他的更新方法，你可以透過 
<path>/etc/make.conf</path> 中的 <c>SYNC</c> 來指定你想使用的方法。
</p>

<p>
<b>RSYNC</b>
</p>

<p>
rsync 是保持你的 Portage 最新的最常用的方法。在 <path>/etc/make.conf</path> 設
定 rsync 方式：
</p>

<pre caption = "設定 RSYNC 變數">
SYNC="rsync://rsync.gentoo.org/gentoo-portage"
</pre>

<note>
rsync 會盲目的覆蓋掉你在本機上 Portage 樹做的一切改變。如果你想要維持改變，使用
 <c>PORTDIR_OVERLAY="/some/dir/where/you/keep-your-tree"</c> 保護你想要保留的
Ebuild。
</note>

<note>
查看 <path>/etc/make.conf.example</path> 來了解如何設至 <c>SYNC</c> 取得
本地的 rsync 鏡像。這可以讓你選擇地理位置較靠近你的位置，通常速度會比較快。
這也會幫助伺服器減輕負荷。
</note>

<note>
查看 <path>/etc/make.conf</path> 來了解如何設定到本地的 rsync 鏡像。這可以讓你
選擇地理位置較靠近你的位置，通常速度會比較快。這也會幫助伺服器減輕負荷。
</note>

<p>
<b>發展者的 CVS</b>
</p>

<p>
有完整權限讀取 CVS 樹的發展者也可以讓 <c>emerge</c> 透過 SSH 來和 CVS 樹同步。
</p>

<p>
輕鬆的使用你的帳號檢查 CVS 樹，把他移動到 /usr/portage ，然後使用下面的
 <c>SYNC</c> 設定。
</p>

<pre caption = "使用 CVS 更新 Portage 樹">
SYNC="cvs://youraccount@cvs.gentoo.org:/var/cvsroot"
</pre>

</body>
</section>
<section>
<title>鏡像</title>
<body>

<p>
Gentoo 企劃維持了一份本地的 Portage 樹中所有檔案的鏡像。通常軟體最新的原始檔和
設定放在速度慢，可能會停止的伺服器上。而且軟體發展者通常在新版本發行時移除 ftp 
上舊的版本。讓使用 Gentoo 發行版的使用者用的比較輕鬆(以及減少原始碼 ftp 的頻寬
使用)，我們鏡像這些檔案。這讓你可以從本地的站台更快速且穩定的下載檔案。
</p>

<p>
當你想要安裝一個套件時，Portage 會先檢查鏡像站上有沒有檔案，沒有的話才從 ebuild
 檔案中指定的位置下載。
</p>

<p>
Portage 使用的鏡像站可以在 <path>/etc/make.conf</path> 中的 
<c>GENTOO_MIRRORS</c> 指定。底下是目前預設的設定：
</p>

<pre caption = "宣告鏡像站">
GENTOO_MIRRORS="http://www.ibiblio.org/gentoo"
</pre>

<p>
你可以查看 Gentoo 網站或是本的的郵寄列表來找到離你較近的鏡像站。也可以安裝 
<c>mirrorselect</c> 來幫你尋找。請看安裝指南來取得更多 <c>mirrorselect</c> 的資
訊。
</p>

</body>
</section>
<section>
<title>下載程式</title>
<body>

<p>
Portage 用來下載的程式可以在 <c>FETCHCOMMAND</c> 和 <c>RESUMECOMMAND</c> 指定。
在 <path>/etc/make.conf.example</path> 以及 <path>/etc/make.globals</path> 有
一些設定的範例。Portage 預設使用的 <c>wget</c> 可以滿足大部分需求的。
</p>

<note>
Portage 可以使用 HTTP_PROXY 和 FTP_PROXY 環境變數取得 HTTP 和 FTP 代理伺服器資訊
。
</note>

</body>
</section>
<section>
<title>代理伺服器</title>
<body>

<p>
Portage 可以在下載檔案時使用 HTTP 和 FTP 代理伺服器。這可以在 
<path>/etc/make.conf</path> 或 <path>/etc/make.globals</path> 中的 
<c>HTTP_PROXY</c> 和 <c>FTP_PROXY</c> 指定。如果 HTTP 和 FTP 都是使用同一個伺服
器，你也可以只設定 <c>PROXY</c>。
</p>

<p>
底下是一個範例：
</p>

<pre caption = "設定代理伺服器">
HTTP_PROXY="http://192.168.1.1:8080"
FTP_PROXY="http://192.168.1.1:8080"
<comment>或</comment>
PROXY="http://192.168.1.1:8080"
</pre>

<p>
Portage 也可以在使用 RSYNC 時使用 HTTP 代理伺服器。RSYNC 代理伺服器可以在 
<path>/etc/make.conf</path> 中的 RSYNC_PROXY 選項設定或設成環境變數。
</p>

<p>
底下是一個範例：
</p>

<pre caption = "設定 RSYNC 代理伺服器">
RSYNC_PROXY="192.168.1.1:8080"
</pre>

<note>
如果你連外要經過防火牆，而 rsync 不能使用 HTTP 代理伺服器，你可以透過最新的 
tarball 來更新，看我們的 <uri link="/doc/zh_tw/faq.xml#doc_chap4_sect10">
FAQ</uri> 取得更多資訊。
</note>

</body>
</section>
<section>
<title>其他設定</title>
<body>

<p>
底下是一些可能對使用者有用的選項：
</p>

<ul>
  <li>
    <c>NOCOLOR</c>：讓使用者關閉 emerge 工具的顏色。
  </li>
  <li>
    <c>CLEAN_DELAY</c>：Portage 在解除安裝時延遲一些時間給使用者取消的機會。這
	指定要暫停幾秒，設成 "0" 就會關閉。
  </li>
  <li>
    <c>PORTAGE_NICENESS</c>：這個變數設定 emerge 的優先權。
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>套件管理</title>
<section>
<title>更新 Portage 樹</title>
<body>

<p>
位在 <path>/usr/portage</path> 的 Portage 樹包含各種套件如何安裝的函式庫(叫做 
<e>ebuilds</e>)。這裡面也包含讓你的電腦保持最新的 profile 和 package.mask。為了
取得最新的套件以及修正，讓套件保持在最新而且和官方的 Portage 樹同步非常重要的。
你可以輸入下面的指令來更新：
</p>

<pre caption = "更新 Portage 樹">
# <i>emerge sync</i>
</pre>

<p>
emerge 用來更新的方法可以改變。查看 
<uri link="#doc_chap2">設定 Portage</uri> 中的  
<uri link="#doc_chap2_sect8">Portage SYNC 設定</uri> 來得到更多資訊。
</p>

</body>
</section>
<section>
<title>安裝(merge) 套件</title>
<body>

<p>
Portage 編譯及安裝套件的工作稱為 <e>merging</e>。Portage 編譯套件然後暫時安裝在
虛擬的目錄紀錄安裝好的檔案。然後這些檔案從目錄中移出來並且合併到真實的 / 檔案系
統。
</p>

<p>
<c>emerge</c> 指令是 Portage 的前端程式。安裝及移除軟體是靠這個指令及他多種參數
來完成的。
</p>

<p>
安裝最新且沒有被封鎖的套件只要簡單的像底下指定套件名稱就可以了：
</p>

<pre caption = "安裝套件">
# <i>emerge galeon</i>
</pre>

<p>
這個指令會編譯及安裝任何需要的相依套件(任何 USE 設定都會被考慮)然後安裝最新且沒
有封鎖的 galeon。galeon 也可以用跟著類別的完整名稱來指定：<c>net-www/galeon</c>
</p>

<p>
<c>emerge</c> 也可以指定實際的 ebuild 檔案。這讓使用這可以安裝比較舊的版本或安
裝非官方的套件。注意這會覆蓋掉告件的封鎖並且忽略 <c>ACCEPT_KEYWORDS</c> 設定。
底下是一個範例：
</p>

<pre caption = "安裝指定的 ebuild">
# <i>emerge /usr/portage/net-www/galeon/galeon-1.2.0-r3.ebuild</i>
</pre>

<p>
除了指定套件名稱或 ebuild 檔案，<c>emerge</c> 支援許多有用的命令列參數。在這些
參數之中 <c>--pretend</c> 或許是最有用的一個。當使用這個參數時指定的工作並不會
執行，相反的 Portage 顯示執行這個動作會安裝或更新的套件列表。底下是一個範例，顯
是安裝最新的 kdevelop 套件時哪些套件會被安裝：
</p>

<pre caption = "查看 emerge 會做什麼">
# <i>emerge --pretend kdevelop</i>

These are the packages that I would merge, in order.

Calculating dependencies ...done!
[ebuild  N   ] kde-base/kdelibs-2.2.2-r4 to /
[ebuild  N   ] dev-util/kdbg-1.2.2 to /
[ebuild   U  ] app-text/psutils-1.17 to /
[ebuild   U  ] app-text/a2ps-4.13b-r3 to /
[ebuild   U  ] app-text/jadetex-2.20 to /
[ebuild  N   ] app-text/sgmltools-lite-3.0.3-r2 to /
[ebuild  N   ] kde-base/kdoc-2.2.2-r1 to /
[ebuild  N   ] net-www/htdig-3.1.5-r2 to /
[ebuild  N   ] app-text/enscript-1.6.3-r1 to /
[ebuild  N   ] kde-base/kdebase-2.2.2-r2 to /
[ebuild  N   ] app-doc/qt-docs-2.3.1 to /
[ebuild  N   ] dev-util/kdevelop-2.0.2 to /
</pre>

<p>
在上面的列表中，有 <c>N</c> 標記的套件代表先前還沒安裝而在這次動作將會被安裝。 
<c>U</c> 代表已經安裝過而這次會將他更新。
</p>

<p>
其他可用的指令有：
</p>

<p>
<c>--fetchonly</c>：下載安裝套件需要的檔案以及他依賴的套件。
</p>

<p>
<c>--emptytree</c>：這個選項讓 Portage 以為相依的套件都沒有安裝。這是一個很有用
的選項讓 <c>--pretend</c> 顯示完整的相依性列表。
</p>

<p>
<c>--nodeps</c>：Portage 指安裝指定的套件而略過任何的相依性。如果你沒優安裝合適
的相依套件，編譯時可能會失敗。
</p>

<p>
<c>--onlydeps</c>：只安裝相依套件，指定要安裝的套件<b>不會</b>被安裝。
</p>

<p>
<c>--noreplace</c>：如果套件已經安裝了就略過不裝。
</p>

<p>
<c>--usepkg</c>：不要編譯指定的套件，Portage 會使用預先編譯好放在指定位置的 
tbz2 套件，這個位置在 <c>PKGDIR</c> 環境變數指定。
</p>

<p>
<c>--debug</c>：ebuild會顯示更多東西，這在發展者檢查以 bash script 為基礎的 
ebuild 檔的語法錯誤是很有用的。
</p>

<p>
<c>--autoclean</c>：強制 <c>emerge</c> 在刊使編譯前清除暫存目錄。Portage 預設就
會執行這個動作，所以這對關閉這個選項的發展者才有用。
</p>

<p>
<c>--verbose</c>：告訴 <c>emerge</c> 以完整模式執行。這通常和 <c>--pretend</c> 
一起使用來顯示這個套件可用的 USE 設定。
</p>

</body>
</section>
<section>
<title>移除 (unmerging) 套件</title>
<body>

<p>
unmerging 是從檔案系統移除所有套件相關的檔案。套件中的軟體不能在被使用除非再次
安裝他。
</p>

<p>
使用 <c>emerge</c> 指令加上 <c>unmerge</c> 參數，後面接著要移除的套件名稱就可以
移除了。底下是移除 <c>ltrace</c> 套件所有安裝的版本的範例：
</p>

<pre caption = "移除套件">
# <i>emerge unmerge ltrace</i>
<comment>或</comment>
# <i>emerge unmerge dev-util/ltrace</i>
</pre>

<p>
Portage 也允許指定移除特定的版本。可以用 <c>=</c> (同一版本)，<c>&lt;</c> (小於)
，<c>&gt;</c> (大於)，<c>&lt;=</c> (小於或等於)，或 <c>&gt;=</c> (大於或等於)來
指定範圍。底下是指定移除版本等於 0.3.15 或更舊的 ltrace：
</p>

<pre caption = "移除特定的套件版本">
# <i>emerge unmerge \&lt;=dev-utils/ltrace-0.3.15</i>
</pre>

<p>
當你指定範圍時，跳脫 <c>&gt;</c> 和 <c>&lt;</c> 是很重要的，以免 shell 執行他們
。而且你需要像範例一樣指定他的類別。其他的指定版本範圍範例可以在 
<c>emerge --help</c> 看到。
</p>

<warn>
移除套件可能很危險。如果你移除核心成是，你的系統可能中斷某些功能，而且移除某些
函式庫可能讓軟體無法執行。<b>Portage 當你在移除核心套件或其他程式依賴的套件時不
會警告你。</b>
</warn>

<p>
如果要移除的程式的確安裝了 emerge 會顯示目前要移除哪個套件並且會暫停指定時間，
讓使用者有取消的機會。在這段警告的期間使用者可以按 Control-C 來取消移除。
</p>

<p>
一但開始解除安裝後你可以看到一長串屬於這個套件的檔案清單。一些檔案在檔案名稱左
邊會有些標記。<c>!mtime</c>，<c>!empty</c>，和 <c>cfgpro</c> 說明這些檔案為什麼
不會被移除。沒有這些標記的檔案將會從檔案系統中移除。
</p>

<p>
<c>!mtime</c> 標記代表這個檔案在套件安裝完成以後有被更改過。也就是說有人在安裝
完以後編輯這個檔案，或是之後安裝的套件更動了檔案內容。這讓套件可以放心的更新而
不必擔心移除舊的版本會刪除重要的檔案。
</p>

<p>
<c>!empty</c> 標記表示因為目錄不是空的，所以 Portage 拒絕移除(通常多個套件會擁
有同一目錄的使用權)。當你看到 <c>cfgpro</c> 標記代表這是受保護的而不會移除。也
就是說新安裝的套件擁有一些設定檔的使用權而 Portage 拒絕移除他。
</p>

<warn>
檔案通常被視為最新的套件所擁有的。這是由安裝的順序來決定而不是安裝套件的版本號
碼或修訂版號碼決定。即使之前安裝的套件也安裝這個檔案，移除最新安裝的套件他擁有
的檔案也會移除(假設你沒有手動修改他)。
</warn>

</body>
</section>
<section>
<title>系統更新</title>
<body>

<p>
Portage 支援用單一指令自動更新安裝過的套件。系統更新讓使用者更新對操作 Gentoo 
Linux 系統很重要的 "核心" 程式到 Gentoo 核心發展者建議的版本。系統更新並不會更
新非基礎的套件，只有在 Portage profile 中定義為操作及維持系統的基礎套件才會更
新。
</p>

<p>
輸入下列指令執行系統更新：
</p>

<pre caption = "更新你的系統">
# <i>emerge --update system</i>
</pre>

<p>
Portage 會依照目前安裝及 Portage profile 建議的版本來編譯及安裝更新。使用者可
以在上面的例子用 <c>--pretend</c> 參數來取得會被安裝及更新的列表。
</p>

<note>
你可能注意到安裝指南中一個步驟是執行 <c>emerge system</c> 安裝基礎(核心)套件。
 <c>emerge --update system</c> 根據最新的建議版本更新基礎套件。
</note>

</body>
</section>
<section>
<title>更新全系統</title>
<body>

<p>
Portage 也支援用單一指令更新選擇的非必要套件。Portage 夠聰明而可以在多個互相衝
突的套件版本存在時，安全的更新系統。
</p>

<p>
Portage 的全系統更新功能查看系統 profile，封鎖的套件列表，全系統的 profile 以及
他裡面列的相依性(包括版本範圍)來決定哪些要升級。如果套件有新版本並且列在全系統 
profile 中，或是被全系統 profile 中某套件依賴，這個套件就會被更新。而且指定的套
件版本要沒有在系統 profile 或 <path>package.mask</path> 中封鎖才會更新。
</p>

<p>
當考慮哪些套件要更新時，Portage 嘗試更新全系統 profile 中的所有套件鄧最新的版本。
Portage 也會考慮被那些套件依賴的套件，如果有新的版本時，而且符合版本範圍且沒有
系統 profile 或 <path>package.mask</path> 封鎖的話也會更新。他也會將前面提到的
 <c>SLOTS</c> 也列入考慮。
</p>

<p>
熟悉其他發行版和 Portage 以外的套件管理系統的使用者，可能會對 Portage 為什麼不
直接根據版本號碼升級(像 Gentoo 1.0 之前一樣)感到疑惑。Gentoo 中的許多套件有多重
版本，較舊或較新的套件可能和其他依賴他的套件不相容。直接昇及而不考慮其他套件的
需求可能導致許多嚴重的問題。為了避免這種情況，Portage 更新時注意這些狀況並且依
據每一個套件的 ebuild 中宣告的需求來做。
</p>

<p>
Portage 的全系統更新核心是全系統 profile。不像系統 profile 由發展者決定而且使用
者不曾修改他，全系統更新根據使用者的動作間接產生。全系統 profile 像是一個當使用
者用 <c>emerge</c> 指令安裝時會紀錄的 "我的最愛列表"。他是紀錄在位於 
<path>/var/cache/edb/world</path> 的 <path>world</path> 檔。Portage 假設因為你
安裝這個套件，所以你對保持最新的版本有興趣。
</p>

<p>
<path>world</path> 包含套件名稱以及他的類別的列表，每一行看起來會像下面這樣：
</p>

<pre caption = "/var/cache/edb/world 範例">
net-im/gaim
net-www/skipstone
net-www/galeon
app-editors/vim
app-text/ispell
net-mail/evolution
dev-util/ltrace
sys-fs/xfsprogs
sys-apps/attr
sys-apps/dmapi
sys-kernel/linux-sources
sys-apps/acl
app-office/gnucash
app-cdr/xcdroast
</pre>

<p>
幾乎上面的每一行是當使用者安裝指定的套件時由 Portage 自動加進去的。如果這些套件
有新的版本就會被更新。
</p>

<note>
為了節省時間和保持你最愛的套件最新，你可能要手動編輯 <path>world</path> 加上哪
些套件。從舊的 Portage 版本升級的使用者可能需要建立這個檔案。在最近安裝的 
Gentoo 或 Portage 安裝時就會建立這個檔案了。
</note>

<p>
使用底下的指令來完成全系統更新：
</p>

<pre caption = "更新全系統">
# <i>emerge --update world</i>
</pre>

<p>
Portage 會嘗試更新 <path>world</path> 中提到的套件以及需要的話相依套件也會更新
。相依套件會更新到最新且符合套件需求的版本。沒有列在 <path>world</path> 而且沒
有被裡面套件相依的套件將不會被更新。
</p>

<p>
如果 <c>emerge</c> 相要降級一些套件但你不想這麼做，使用 <c>--upgradeonly</c>：
</p>

<pre caption="只升級">
# <i>emerge --upgradeonly world</i>
</pre>

<warn>
Portage 不會覆蓋設定檔中設定要保護的目錄，你需要手動合併舊版和新版的設定檔。如
你沒有更新設定檔，安裝好的軟體可能會停止工作。查看
<uri link="#doc_chap2">設定 Portage</uri>中的
<uri link="#doc_chap2_sect6">設定檔案保護</uri>或是使用這個指令
 <c>emerge --help config</c> 來取得更多的資訊。
</warn> 

<p>
想要查看全系統更新會更新的軟體列表，你可以使用前面提到的 <c>--pretend</c> 參數。
</p>

<note>
全系統更新也會自動執行系統更新。
</note>

<p>
使用者想要更新所有系統上安裝的軟體可能會出現一個有趣的副作用。因為全系統更新會
嘗試更新 <path>world</path> 檔案內提到的套件以及他的相依套件。使用 
<c>--emptytree</c> 是一個強迫重新編譯所有套件及相依套件的方法。這對使用者改變編
譯選項或 USE 設定，而且希望所有套件套用新的設定，但不想手動重新安裝的使用者相當
有用。用你常用的程式建立 <path>world</path> 檔然後輸入下列指令：
</p>

<pre caption = "也重新編譯所有相依套件">
# <i>emerge --update world --emptytree</i>
</pre>

<p>
你可以加上 <c>--pretend</c> 參數來取得會被重新編譯的套件列表。
</p>

</body>
</section>
<section>
<title>清理系統</title>
<body>

<p>
Portage 支援安裝同一套件的不同版本。在 Portage 中只有少數套件會用到這個功能(為
了向下相容，因為舊的程式可能會和其他新的套件不相容)。
</p>

<p>
雖然新版的套件安裝時就的套件大部分檔案都會被覆蓋。但還有一些文件檔和一些不重要
檔案會被留下來，隨著時間過去，這些 "髒東西" 會越積越多而且浪費你寶貴的磁碟空間。
</p>

<p>
Portage 提供一個簡單的功能從你的系統移除這些舊版本的遺跡，以解決這種情況。這個
功能只要使用 emerge 的 <c>clean</c> 選項。只要輸入下面指令就可以使用：
</p>

<pre caption = "移除舊版本的套件">
# <i>emerge clean</i>
</pre>

<p>
<c>emerge</c> 會顯示會被移除和會保留的套件版本，修訂版列表，然後給使用者一些時
間按 Control-C 取消。在一般的系統中會有一陣混亂的動作，然後會顯示要保留或移除的
長檔案列表。
</p>

<p>
除非特別指定，Portage 假設要依照 <path>world</path> (所有安裝套件)來執行清理。
你可以用類似 <c>world</c>，<c>system</c> 的選項，或是套件名稱，前面提到的版本範
圍來縮小清理的範圍。
</p>

<p>
Portage 依照各種 profiles，其他套件的需要，套件的 SLOT 來決定哪些套件要移除。假
設相依性在所有套件中都正確定義，清理的動作將會安全的移除舊的套件系統，而且不會
移除任何功能也不會讓系統失去作用。
</p>	

</body>
</section>
<section>
<title>修整套件</title>
<body>

<p>
Portage 也支援<c>修整</c> (prune) 的動作。修整是清除的不安全形式。他移除最新版
本以外的套件。他並不像<c>清理</c>做這麼多安全檢查，而且可能移除基礎的軟體。使用
者執行這個指令可能會輕易的毀掉整個系統，除了在特別情況我們不建議你執行他。
</p>

<p>
<c>修整</c>支援和清理一樣的列表，你可以像底下這樣執行：
</p>

<pre caption = "修整系統">
# <i>emerge prune</i>
</pre>

</body>
</section>
<section>
<title>搜尋 Portage 樹</title>
<body>

<p>
像 Portage 這種建立 Gentoo Linux 核心的發行版核心的東西可能會相當大。
<c>emerge</c> 提供搜尋功能，他接受以括號括起來的正規表示式，正規表示式是一團非
常複雜的東東，如果你對熟練使用正規表示式有興趣的話，建議你找一本關於這主題的好
書來看。
</p>

<p>
你可以不知道正規表示式就可以執行簡單的搜尋。底下是一個範例，搜尋叫做 "gcc" 的套
件或是名稱一部分有 "gcc" 的套件。
</p>

<pre caption = "以正規表示式搜尋">
# <i>emerge search gcc</i>
</pre>

<p>
每一個符合搜尋條件的套件會列出套件名，最新版本，已安裝的最新版本，他的首頁，以
及套件包含軟體的描述。
</p>

</body>
</section>
<section>
<title>取得幫助</title>
<body>

<p>
更多關於 <c>emerge</c> 選項及動作的資訊可以輸入下列的指令來取得：
</p>

<pre caption = "取得幫助">
# <i>emerge --help</i>
</pre>

</body>
</section>
<section>
<title>有用的工具</title>
<body>

<p>
一些有用的工具已經製作好了，讓 Gentoo 使用者更輕鬆的使用。這些工具可以在 
Gentoo Portage 樹中的 <c>app-portage/gentoolkit</c> 找到。
</p>

<ul>
  <li>
    <c>etc-update</c>：使用 vim 來決定如何合併 /etc 新舊檔案的 shell 指令搞。
	(如果不正確使用可能很危險)。
  </li>
  <li>
    <c>qpkg</c>：套件資料庫搜尋工具。
  </li>
  <li><c>epm</c>：另外一個套件資料庫搜尋工具，使用類似 RPM 的語法。</li>
  <li><c>etcat</c>：顯示並且解釋套件的 USE 標記。</li>
  <li>
    <c>revdep-rebuild</c>：重新編譯因為更新函式庫而和 API 不相容的套件。
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>什麼是封鎖 (Masked) 的套件</title>
<section>
<body>

<p>
許多人好奇為什麼最新的套件沒有包含在 <c>emerge -u world</c> 中。一個範例是 
xfree-4.3.0(在寫這篇文章時的版本)，如果你執行 <c>emerge sync</c> 然後執行
 <c>emerge -u world</c>，你會發現 xfree 並不會被更新，為什麼呢？
</p>

<p>
理由就是套件被標記為"封鎖"，也就是說這個套件並不會被自動安裝或更新，除非你指定
要這樣做。詳細的安裝被封鎖的套件說明，我們建議你參觀
<uri link="http://forums.gentoo.org/">Gentoo 討論區</uri>的
<uri link="http://forums.gentoo.org/viewtopic.php?t=33534">封鎖套件 FAQ</uri>。
或是 <uri link="http://forums.gentoo.org.tw">Getoo 台灣討論區</uri>。
</p>

</body>
</section>
</chapter>
</guide>
