<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/zh_tw/udev-guide.xml,v 1.6 2004/11/27 10:25:20 ccpz Exp $ -->

<guide link="/doc/zh_tw/udev-guide.xml" lang="zh_tw">
<title>Gentoo udev 指南</title>

<author title="Author">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Contributor">
  <mail link="g.guidi@sns.it">Gregorio Guidi</mail>
</author>
<author title="Translator">
  <mail link="ccpz@gentoo.org">YiDa Chiang</mail>
</author>
<author title="Reviewer">
  <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>

<!-- rev 1.18 by ccpz -->

<abstract>
這份文件說明什麼是 udev 還有您如何使用 udev 來達成您的需求。
</abstract>

<license/>

<version>0.14</version>
<date>2004年9月30日</date>

<chapter>
<title>什麼是 udev?</title>
<section>
<title>/dev 目錄</title>
<body>

<p>
當 Linux 使用者談到他們系統上的硬體時，對周圍那些認為 Linux 是一種病毒或是一種
咖啡的牌子的人，'斜線 dev 斜線 某個東西'的用法他們一定會投給您一個奇怪的眼光。
但是對於那些幸運的使用者(包括您)，使用 <path>/dev/hda1</path> 就是一種快速的表
達方法，而不用說第一個 IDE 插槽上主硬碟的第一個分割區，不是嗎？
</p>

<p>
我們都知道什麼是裝置檔。一些人更了解為什麼我們在 <path>/dev</path> 中輸入 
<c>ls -l</c> 仔細查看時那些裝置檔會有特別的數字。但是我們一直認為 
<path>/dev/hda</path> 代表第一個 IDE 插槽上主硬碟是理所當然的。您或許並不知道，
但這只是設計上一個瑕疵。
</p>

<p>
考慮一下可熱插拔的裝置，例如說 USB，IEEE1394，可抽換的 PCI，...什麼是第一個裝置
？他會維持多久？當第一個裝置消失後其他的裝置要如何命名？這會不會影響進行中的傳
輸工作？如果說因為您媽媽決定插上 inkjet 使它變成第一台印表機，而讓您的列印工作
從爆新的雷射印表機變成快壞的矩陣印表機在列印，這會很有趣嗎？
</p>

<p>
進入 <e>udev</e>。udev 計畫的目標有趣而且迫切需要：
</p>

<ul>
  <li>在 userspace 中執行</li>
  <li>動態建立/移除裝置檔</li>
  <li>提供固定的名稱</li>
  <li>提供 user-space API</li>
</ul>

<p>
為了提供這些功能，udev 以三個分割的子計畫發展：
<e>namedev</e>，<e>libsysfs</e>，還有不用說就是<e>udev</e>。
</p>

</body>
</section>
<section>
<title>namedev</title>
<body>

<p>
Namedev 允許您從 udev 之外自行定義裝置的名稱。這讓您輸入多個段落來設定有彈性的
命名規則以及方案。這個裝置命名子系統提供 udev 可以使用的標準介面。
</p>

<p>
目前 namedev 只有提供一個命名方案，由 LANANA 提供。目前這被大部分的 Linux 系統
使用，因此適合大多數的 Linux 使用者。
</p>

<p>
Namedev 使用下面五個步驟來決定指定裝置的名稱。如果債這些步驟的其中一個找到了這
個裝置的名稱，就會使用它。這五個步驟是：
are:
</p>

<ul>
  <li>標籤或序號</li>
  <li>匯流排裝置編號</li>
  <li>匯流排拓樸</li>
  <li>靜態指定名稱</li>
  <li>核心提供的名稱</li>
</ul>

<p>
<e>標籤或序號</e> 這一步檢查裝置是否有唯一的識別記號。例如說 USB 裝置有唯一的 
USB 序號。SCSI 有唯一的 UUID。如果 namedev 找到與這種唯一編號相對應的設定檔，他
將或使用設定檔提供的名稱。
</p>

<p>
<e>匯流排裝置編號</e> 這一步會檢查匯流排裝置編號，對於不可熱抽換的環境，這一步
足以辨識裝置。例如說 PCI 匯流排編號在系統的使用期限內很少變更。同樣的，如果 
namedev 找到相對應的設定檔，設定檔中的名稱就會被使用。
</p>

<p>
類似的，<e>匯流排拓樸</e> 相對來說也是夠穩定而可以辨識設備，只要使用者不抽換設
備。當裝置的位置滿足使用者提供的設定，就會使用指定的名稱。
</p>

<p>
第四個步驟，<e>靜態指定名稱</e>，是一個簡單的字串取代。當核心提供的名稱(預設名
稱)符合指定的取代字串，就會使用取代後的名稱。
</p>

<p>
最後一步(<e>核心提供的名稱</e>)一定會找到符合的：由核心提供的預設名稱。在大部份
的情況下這足以在目前的 Linux 系統中找到對應的名稱。
</p>

</body>
</section>
<section>
<title>libsysfs</title>
<body>

<p>
udev 使用虛擬的 sysfs 檔案系統和核心溝通。libsysfs 計畫提供通用的 API 以一般方
式取得 sysfs 提供的資訊。這讓查詢任何硬體時不用先知道他們是哪種硬體。
</p>

</body>
</section>
<section>
<title>udev</title>
<body>

<p>
每當核心注意到硬體結構有更新時，他會呼叫 <path>/sbin/hotplug</path> 這個程式。
Hotplug 會執行連結到 <path>/etc/hotplug.d/default</path> 目錄下的程式。在哪裡面
您也會找到 udev 程式的連結。Hotplug 送出核心提供的資訊給 udev 程式，以便執行必
要的動作修改 <path>/dev</path> 結構(建立或刪除裝置檔)。
</p>

</body>
</section>
</chapter>

<chapter>
<title>在 Gentoo 使用 udev</title>
<section>
<title>需求</title>
<body>

<p>
udev 需要與 2.6 核心共同使用(例如 <c>development-sources</c> 或 
<c>gentoo-dev-sources</c>)。如果您已經用這類核心，您只要確定您的 
<c>sys-apps/baselayout</c> 是最新的。這就是所有您需要的。
</p>

<pre caption="安裝 udev">
# <i>emerge udev</i>
</pre>

<p>
udev 會安裝 <c>hotplug-base</c>，因為這是他的相依套件其中之一。除非你想要插入裝
置時自動載入模組，你不用安裝 <c>hotplug</c>。<c>hotplug</c> 也會處理自動啟動網
路裝置及下載 firmware。
</p>

<pre caption="自由選擇:安裝 hotplug">
# <i>emerge hotplug</i>
</pre>

<p>

如果你想要在開機完成之前就載入已插入的硬體裝置，使用 coldplug 套件。
</p>
  	 
<pre caption="安裝 coldplug 套件">
# <i>emerge coldplug</i>
</pre>
  	 
<p>
在核心的設定方面，如果您使用 <c>genkernel</c> 的預設設定，那相關設定都設定好了
。否則確定您有啟動下列選項：
</p>

<pre caption="需要的核心設定">
General setup ---&gt;
  [*] Support for hot-pluggable devices

File systems ---&gt;
  Pseudo filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)
</pre>

<p>
如果您想的話，也可以啟動 <c>/dev file system support (OBSOLETE)</c>。但是你要確
定關閉 "Automatically mount at boot"：
</p>

<pre caption="不要自動掛載 devfsd"> 
   File systems ---&gt; 
     Pseudo Filesystems ---&gt; 
       [*] /dev file system support (OBSOLETE) 
         [ ]   Automatically mount at boot 
</pre> 


</body>
</section>
<section>
<title>設定</title>
<body>

<p>
如果您像要在 Gentoo 使用調整過的 udev 讓您的生活更加快樂，那您讀到這就可以了。
Gentoo 會使用 udev 但保持靜態的 <path>/dev</path> 讓你不會遺失任何裝置結點。
Gentoo init scripts 不會執行 devfsd 服務，而且當您開機時會關閉 devfs。
</p>

<p>
但如果您是頑固的傢伙，想要執行只使用 udev，未經調整過的系統，就如同 udev 發展過
程中所做的事(包括一些困難，像是因為 udev 不支援而遺失的裝置)，那就讀下去吧 :)
</p>

<p>
我們會停止裝置檔節點的儲存規則：編輯 <path>/etc/conf.d/rc</path> 中的 
<c>RC_DEVICE_TARBALL</c> 變數，把他設成 <c>no</c>：
<c>no</c>:
</p>

<pre caption="/etc/conf.d/rc">
RC_DEVICE_TARBALL="no"
</pre>

<p>
如果您的核心包含 devfs 支援，您可以在開機管理員選單設定中停止他：在核心參數中加
入 <c>devfs=nodevfs</c>。如果您想要用 devfs 並且停止 udev，在核心參數中加入 
<c>gentoo=noudev</c>。
</p>

</body>
</section>
</chapter>

<chapter>
<title>已知問題</title>
<section>
<title>開機時遺失裝置節點檔</title>
<body>

<p>
如果您因為一個找不到 <path>/dev/null</path> 的錯誤而不能開機，或者是遺失 
initial console，這是因為您缺少一些需要在 udev 掛載及處理 <path>/dev</path> 
<e>之前</e>就要存在的檔案。在使用舊的媒體安裝的 Gentoo 機器上很常見。
</p>

<p>
如果您是用 <c>sys-apps/baselayout-1.8.12</c> 或之後的版本，因為開機程序會繼續完
成開機，所以這訊息不那麼嚴重了。然而，如果想要移除這個惱人的警告訊息，您應該依
以下的方法來建立遺失的裝置節點。
</p>

<p>
要查看哪些裝置在 <path>/dev</path> 掛載前就存在了，執行底下的指令：
</p>

<pre caption="列出開機時存在的裝置節點">
# <i>mkdir test</i>
# <i>mount --bind / test</i>
# <i>cd test/dev</i>
# <i>ls</i>
</pre>

<p>
要成功開機所需要的裝置是 <path>/dev/null</path> 和 <path>/dev/console</path>，
如果他們沒有在前面的測試中顯示，您需要手動建立他們，在 <path>test/dev/</path> 
目錄中輸入下列指令：
</p>

<pre caption="建立必要的裝置節點">
# <i>mknod -m 660 console c 5 1</i>
# <i>mknod -m 660 null c 1 3</i>
</pre>

<p>
完成後，不要忘了卸載 <path>test/</path> 目錄。
</p>

<pre caption="卸載 test/ 目錄">
# <i>cd ../..</i>
# <i>umount test</i>
# <i>rmdir test</i>
</pre>

</body>
</section>
<section>
<title>udev 和 nvidia</title>
<body>

<p>
如果您使用 nVidia 提供的驅動程式，但是 X server 沒辦法在只使用 udev 的系統啟動
，確定您有：
</p>

<ul>
  <li>
    <c>nvidia</c> 模組有列在
    <path>/etc/modules.autoload.d/kernel-2.6</path>
  </li>
  <li>
    <c>nvidia-kernel</c> 的版本大於或等於
    <c>media-video/nvidia-kernel-1.0.5336-r2</c>
  </li>
  <li>
    baselayout 的版本大於或等於
    <c>sys-apps/baselayout-1.8.12</c>
  </li>
</ul>

</body>
</section>

<section>
<title>LVM2 名稱消失</title> 
<body> 
    
<p> 
當你同時使用 <c>udev</c> 和 LVM2，你可能會發現你建立的容量群組和邏輯分割區消失
了。不過呢，他們並沒有消失，但是他們不幸的被命名為 <path>/dev/dm-#</path>，# 代
表 0，1， ...
</p> 
    
<p> 
要修正他，編輯 <path>/etc/udev/rules.d/50-udev.rules</path> 然後取消這幾行的注
解：
</p> 
    
<pre caption="取消 /etc/udev/rules.d/50-udev.rules 中這幾行的注解"> 
KERNEL="dm-[0-9]*",     PROGRAM="/sbin/devmap_name %M %m", NAME="%k", SYMLINK="%c" 
</pre> 
    
</body> 
</section> 
<section> 
<title>DevFS 和 udev 之間沒有固定的命名</title> 
<body> 
    
<p> 
雖然我們想要對這兩種動態裝置管理解決方案都用相同的命名規則，有時候還是會發生名
稱不同的情況。一個回報的衝突是使用 HP Smart Array 5i RAID 控制器(精確的說，
<c>cciss</c> 核心模組)。使用 udev 時，裝置被命名成
<path>/dev/cciss/cXdYpZ</path>，X，Y 和 Z 是固定的號碼。而使用 devfs 時，裝置是
<path>/dev/hostX/targetY/partZ</path> 或是 <path>/dev/cciss/cXdY</path> 的符號
連結。
</p> 
    
<p> 
如果這樣的話，不要忘記正確的更新 <path>/etc/fstab</path> 和開機管理員設定檔。
</p> 
    
</body> 
</section> 
<section> 
<title>其他問題</title>
<body>

<p>
如果當 <path>/etc/modules.autoload.d/kernel-2.6</path> 裡面的模組載入時，裝置節
點並沒有建立，但是當您用 modprobe 手動載入時他又有出現，您應該是是升級到 
<c>sys-apps/baselayout-1.8.12</c> 或之後的版本。
</p>

<p>
framebuffer 裝置(<path>/dev/fb/*</path>)的支援包含在核心 2.6.6-rc2 之後的版本。
</p>

<p>
2.6.4 之前的核心您需要加入 <path>/dev/pts</path> 檔案系統的支援。
</p>

<pre caption="啟動 /dev/pts 檔案系統">
File systems ---&gt;
  Pseudo filesystems ---&gt;
    [*] /dev/pts file system for Unix98 PTYs
</pre>

</body>
</section>
</chapter>

<chapter>
<title>資源 &amp; 感謝</title>
<section>
<body>

<p>
在 Linux Symposium (Ottawa, Ontario Canada - 2003) 中由 
Greg Kroah-Hartman (IBM Corporation) 發表的 udev 演講提供了關於 udev 程式完整的
了解。
</p>

<p>
<uri link="http://webpages.charter.net/decibelshelp/LinuxHelp_UDEVPrimer.html">Decibel's 
UDEV Primer</uri> 是一份關於 udev 和 Gentoo 的深度文件。
</p>

<p>
由 Gentoo 開發員 Daniel Drake 寫的
<uri link="http://www.reactivated.net/udevrules.php">撰寫 udev 規則</uri>是一個
學習如何自訂 udev 的傑出文章。
</p>

</body>
</section>
</chapter>

</guide>
