<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/zh_tw/gnupg-user.xml,v 1.4 2004/11/28 10:25:21 ccpz Exp $ -->
<!-- rev 1.23 by Palatis -->
<guide link = "gnupg-user.xml" lang="zh_tw">
<title>GnuPG Gentoo 使用者指南</title>
<author title="Author">
  <mail link="gustavo@felisberto.net">Gustavo Felisberto</mail>
</author>
<author title="Editor">
  <mail link="zhen@gentoo.org">John P. Davis</mail>
</author>
<author title="Editor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Translator">
  <mail link="palatis@gentoo.org.tw">【Palatis】</mail>
</author>
<author title="Translator,Reviewer">
  <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>

<abstract>這篇指南教您怎麼使用 GnuPG - 一個安全的加密工具。</abstract>

<license/>

<version>1.0.78</version>
<date>2004年8月23號</date>

<chapter>
<title>介紹</title>
<section>
<title>您可以在這篇指南中得到什麼？</title>
<body>

<p>
這篇指南假設您對公開金鑰密碼、加密、以及數位簽章很熟悉。如果不是，請先跳到 <uri
link="#doc_chap6">Public Key Cryptography</uri> 或閱讀 <uri 
link="http://www.gnupg.org/(en)/documentation/guides.html">GnuPG handbook</uri>
的第二章再回來。
</p>

<p>
這篇指南將教導您如何安裝 GnuPG、如何建立自己的鑰匙對、如何將鑰匙加入鑰匙鍊、<!--
-->如何將公開金鑰放至金鑰伺服器，以及如何 (簽章/加密)/(驗證/解密) 您傳送/收<!--
-->到的訊息。您也會學到如何將本機電腦的檔案加密，讓別人不能隨意閱讀它們的內容。
</p>

<note>
因為這篇是中文翻譯，所以提供 gpg 的中文對照介面 (雖然我不喜歡在文字介面看中<!--
-->文)。若您對中文介面有疑問，可以 <c>export LC_ALL="POSIX"</c> 切換至英文介<!--
-->面。有些動作我懶得作的，請自己消化...
</note>

</body>
</section>
<section>
<title>安裝需要的軟體</title>
<body>

<p>
最基本的，您必須先 <c>emerge gnupg</c>，如果您需要有個可以用 GnuPG 的郵件用<!--
-->戶端，您可以使用 pine (<c>emerge pinepgp</c>)、mutt (<c>emerge mutt</c>)、
Mozilla/Netscape Mail、evolution (evolution 是以 GNOME 來模仿 Microsoft Outlook 
的 MUA)、和 KDE 自己的 KMail (KMail 是 kdepim 套件的一部份)。
</p>

<p>
如果您使用 KDE，那麼 <c>Kgpg</c> 應該會很討人喜愛。這個小程式讓您建立鑰匙對<!--
-->、匯入 ASCII 鑰匙、對匯入的鑰匙簽名、匯出鑰匙、以及其他一些功能。
</p>

</body>
</section>
</chapter>

<chapter>
<title>產生您的金鑰並且將它加入公開鑰匙鍊</title>
<section>
<title>建立您的金鑰</title>
<body>

<p>
要建立您的金鑰，請執行 <c>gpg --gen-key</c>。您第一次執行的時候，它會建立幾個目
錄；再執行一次即可建立鑰匙：
</p>

<pre caption="鑰匙產生的過程">
<codenote>中文：</codenote>
$ <i>gpg --gen-key</i>
gpg (GnuPG) 1.2.4; Copyright (C) 2003 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.

請選擇妳要使用的金鑰種類：
   (1) DSA 和 ElGamal (預設)
   (2) DSA (僅能簽署用)
   (4) RSA (僅能簽署用)
妳要選哪一個？<i>1</i>
<codenote>英文：</codenote>
# <i>gpg --gen-key</i>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.

Please select what kind of key you want:
   (1) DSA and ElGamal (default)
   (2) DSA (sign only)
   (4) ElGamal (sign and encrypt)
   (5) RSA (sign only)
   Your selection? <i>1</i>
</pre>

<p>
您可以在這裡選擇金鑰的種類。大部份的使用者會選預設的 DSA 和 ElGamal。然後是金鑰
的長度，記得數字越大越好，但是不要用超過 2048 bit 的 DSA/ElGamal 金鑰。一般來說
，1024 對加簽/加密 e-mail 已經很夠用了。
</p>

<p>
在長度之後，您要選金鑰的保存期限。在這裡越小越好，但是一般使用者可以選永不過期或
一至二年的期限。
</p>

<pre caption = "選擇金鑰長度" >
<codenote>中文：</codenote>
DSA 金鑰對會有 1024 位元。
關於產生一副新的 ELG-E 金鑰對。
      最起碼的金鑰尺寸是  768 位元
        預設的金鑰尺寸是 1024 位元
    建議的最大金鑰尺寸是 2048 位元
妳想要用多大的金鑰尺寸？ (1024) <i>2048</i>
妳所要求的金鑰尺寸是 2048 位元
請指定這把金鑰的有效期限是多久。
         0 = 金鑰不會過期
      &lt;n&gt;  = 金鑰在 n 天後會過期
      &lt;n&gt;w = 金鑰在 n 週後會過期
      &lt;n&gt;m = 金鑰在 n 月後會過期
      &lt;n&gt;y = 金鑰在 n 年後會過期
金鑰的有效期限是多久？ (0) <i>0</i>
Key 完全不會過期
<codenote>英文：</codenote>
DSA keypair will have 1024 bits.
About to generate a new ELG-E keypair.
              minimum keysize is  768 bits
              default keysize is 1024 bits
    highest suggested keysize is 2048 bits
    What keysize do you want? (1024) <i>2048</i>
Requested keysize is 2048 bits       
Please specify how long the key should be valid.
         0 = key does not expire
 &lt;n&gt;= key expires in n days
 &lt;n&gt;w = key expires in n weeks
 &lt;n&gt;m = key expires in n months
 &lt;n&gt;y = key expires in n years
 Key is valid for? (0) <i>0</i>
Key does not expire at all
</pre>

<p>
現在您可以輸入一些有關個人的資訊。如果您想將公開金鑰傳送給別人，則您可以在這<!--
-->裡使用真正的郵件位置。
</p>

<pre caption="輸入個人資訊">
<codenote>中文：</codenote>
以上正確嗎？ (y/n) <i>y</i>

妳需要一個使用者 ID 來辨識妳的金鑰；這個軟體會用真實姓名、
註釋和電子郵件地址組合成使用者 ID 如下：
    &quot;Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;&quot;

真實姓名： <i>Victor Tseng</i>
電子郵件地址： <i>palatis@gentoo.org.tw</i>
註釋： <i>Palatis</i>
妳選擇了這個使用者 ID ：
    &quot;Victor Tseng (Palatis) &lt;palatis@gentoo.org.tw&gt;&quot;

變更姓名(N) 、註釋(C) 、電子郵件地址(E)或確定(O)/退出(Q)？ <i>O</i>
妳需要一個密碼串來保護妳的私鑰。

請輸入密碼串：
<codenote>英文：</codenote>
Is this correct (y/n)? <i>y</i>
                        
You need a User-ID to identify your key; the software constructs the user id
from Real Name, Comment and Email Address in this form:
"Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;"

Real name: <i>John Doe</i>
Email address: <i>john@nowhere.someplace.flick</i>
Comment: <i>The Real John Doe</i>
You selected this USER-ID:
"John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? <i>O</i> 
You need a Passphrase to protect your secret key.    

Enter passphrase: 
</pre>

<p>
現在輸入兩次您的鑰匙密碼。用個難被破解的密碼是個好主意。如果某個人得到了您的<!--
-->私密金鑰並且破解了您的密碼，他就可以用您的名義簽章，而且大家都會認為那
"真的是您簽的名"。
</p>

<p>
然後，GnuPG 會產生您的密碼。移動滑鼠或在背景撥放 mp3 等等可以加速處理過程，<!--
-->因為這些動作會製造隨機的資料。
</p>

</body>
</section>
<section>
<title>產生撤回的認證</title>
<body>

<impo>
這個步驟非常重要，而且您應該<e>現在馬上</e>做。
</impo>

<p>
在您建立一組鑰匙之後應該馬上建立撤回認證。這允許您在某些麻煩事 (某人取得了您的私
密金鑰/密碼) 發生的時候撤回這付鑰匙。
</p>

<pre caption="產生撤回認證">
<codenote>中文：</codenote>
$ <i>gpg --list-keys</i>
/home/tblanku/.gnupg/pubring.gpg
--------------------------------
pub  1024D/93F3B82A 2004-06-14 Victor Tseng (Palatis) &lt;palatis@gentoo.org.tw&gt;
sub  2048g/93458851 2004-06-14

$ <i>gpg --output revoke.asc --gen-revoke 93F3B82A</i>

sec  1024D/93F3B82A 2004-06-14   Victor Tseng (Palatis) &lt;palatis@gentoo.org.tw&gt;

要為這把金鑰建立一份撤銷憑證嗎？ <i>y</i>
請選擇撤銷的原因：
  0 = 未指定原因
  1 = 金鑰已經被洩漏了
  2 = 金鑰被代換了
  3 = 金鑰不再被使用了
  Q = 取消
（也許妳會想要在這裡選擇 1 ）
妳的決定是甚麼？ <i>1</i>
請輸入選用的描述；以空白列結束：
&gt; <i>我被入侵了！有人已經偷了我的金鑰。</i>
&gt;
撤銷原因： 金鑰已經被洩漏了
我被入侵了！有人已經偷了我的金鑰。
這樣可以嗎？ <i>y</i>

妳需要下列使用者的密碼串，纔能解開私鑰：
"Victor Tseng (Palatis) &lt;palatis@gentoo.org.tw&gt;"
1024 位元 DSA ID 93F3B82A 的金鑰，建立於 2004-06-14

已強迫使用 ASCII 封裝過的輸出。
已建立撤銷憑證。

請把這個檔案搬移到另一個妳能夠將之藏起來的媒介上；
如果有人能夠取得這份憑證的話，那麼他也能夠讓妳的
金鑰無法繼續使用。把這份憑證列印出來再藏到別的地
方也是很好的方法，以免妳的儲存媒介損毀而無法讀取。
但是千萬小心：妳的機器上的列印系統可能會在列印過
程中把這些資料暫存在某個其他人也能夠看得到的地方！
<codenote>英文：</codenote>
# <i>gpg --list-keys</i>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;
sub  2048g/96D6CDAD 2002-12-08

# <i>gpg --output revoke.asc --gen-revoke 75447B14</i>

sec  1024D/75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;

Create a revocation certificate for this key? <i>y</i>
Please select the reason for the revocation:   
  0 = No reason specified
  1 = Key has been compromised
  2 = Key is superseded
  3 = Key is no longer used
  Q = Cancel
(Probably you want to select 1 here)
Your decision? <i>1</i>
Enter an optional description; end it with an empty line:
&gt; <i>Someone cracked me and got my key and passphrase</i>
&gt;
Reason for revocation: Key has been compromised
Someone cracked me and got my key and passphrase
Is this okay? <i>y</i>

You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"
1024-bit DSA key, ID 75447B14, created 2002-12-08

ASCII armored output forced.
Revocation certificate created.

Please move it to a medium which you can hide away; if Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just in case
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!
</pre>

<p>
<c>gpg --list-keys</c> 指令會列出您的公開鑰匙鍊。您可以使用它來查看您可以建<!--
-->立撤回認證的鑰匙 ID。現在是個把所有 .gnupg 目錄以及它們的撤回認證 (ASCII 鎧甲
<path>revoke.asc</path>) 複製到其他安全的媒體 (您放在保險櫃的磁碟片或光碟片上)
的好機會。注意 <path>revoke.asc</path> 可以撤銷您的金鑰並且讓它們以後不能再<!--
-->被使用。
</p>

<note>
如果您有數個 e-mail 地址而您想要使用同一把鑰匙，您可以執行 <c>gpg --edit-key 
YOUR_ID</c> 然後使用 <c>adduid</c> 指令。它會問您的名稱、電子郵件以及您會使用的
第二個 ID 的註解。
</note>

</body>
</section>
<section>
<title>匯出金鑰</title>
<body>

<p>
想匯出您的鑰匙，您可以輸入 <c>gpg --armor --output john.asc --export 
john@nowhere.someplace.flick</c>。您幾乎總是可以使用鑰匙的 ID 或某些可以指出<!--
-->鑰匙的資訊 (在這裡我們使用電子郵件地址)。現在他可以把 john.asc 這把公開金<!--
-->鑰傳送給他的朋友，或是放在某個大家都可以安全拿到的地方。
</p>

</body>
</section>
<section>
<title>匯入金鑰</title>
<body>

<p>
想在公開鑰匙鍊中加入檔案，您必須先匯入它，然後檢查金鑰的指紋。在您確認了指紋<!--
-->之後您應該核對它。
</p>

<note>
您應該小心的核對這些金鑰。這是公開金鑰編碼的弱點之一。
</note>

<p>
現在我們會加入 Luis Pinto (我一個朋友) 的公開金鑰到我們的公開鑰匙鍊。在打電<!--
-->話問到她的金鑰指紋以後，我將把指紋根和使用 <c>fpr</c> 指令產生的指紋比對<!--
-->。因為這個金鑰是可靠的，所以我將它加入公開鑰匙鍊。同時，Lius 的鑰匙會在
2003-12-01 過期，所以他問我要不要在過期的同時讓我的加簽過期。
</p>

<note>
譯桉：我加入 benny 的金鑰作為示範 :)
</note>

<pre caption = "匯入以及加簽金鑰">
<codenote>中文：</codenote>
$ <i>gpg --import bennyc_at_gentoo_org.asc</i>
gpg: 金鑰 DB8FF979: 公鑰 "Benny Chuang (BennyC) &lt;bennyc@gentoo.org&gt;" 已被匯入
gpg: 總共被處理的數量： 1
gpg:                已匯入： 1
$ <i>gpg --list-keys</i>
/home/tblanku/.gnupg/pubring.gpg
--------------------------------
pub  1024D/93F3B82A 2004-06-14 Victor Tseng (Palatis) &lt;palatis@gentoo.org.tw&gt;
sub  2048g/93458851 2004-06-14

pub  1024D/DB8FF979 2003-09-12 Benny Chuang (BennyC) &lt;bennyc@gentoo.org&gt;
sub  2048g/1D151A92 2003-09-12

$ <i>gpg --edit-key bennyc@gentoo.org</i>
gpg (GnuPG) 1.2.4; Copyright (C) 2003 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.


gpg: 正在檢查信任資料庫
gpg: 正在檢查深度 0 簽署=0 ot(-/q/n/m/f/u)=0/0/0/0/0/1
pub  1024D/DB8FF979  製造於： 2003-09-12 使用期限： 永遠不過期 信任： -/-
sub  2048g/1D151A92  製造於： 2003-09-12 使用期限： 永遠不過期
(1). Benny Chuang (BennyC) &lt;bennyc@gentoo.org&gt;

指令&gt; <i>fpr</i>
pub  1024D/DB8FF979 2003-09-12 Benny Chuang (BennyC) &lt;bennyc@gentoo.org&gt;
 主鑰指紋： B635 00E4 723A A22B CCD3  00C4 53CD 3411 DB8F F979

指令&gt; <i>sign</i>

pub  1024D/DB8FF979  製造於： 2003-09-12 使用期限： 永遠不過期 信任： -/-
 主鑰指紋： B635 00E4 723A A22B CCD3  00C4 53CD 3411 DB8F F979

     Benny Chuang (BennyC) &lt;bennyc@gentoo.org&gt;

妳有多謹慎檢查正要簽署的金鑰確實屬於上面那個人的名字呢？
如果妳不知道這個問題的答案，請輸入「0」。

   (0) 我不作答。  (預設)
   (1) 我根本沒有檢查過。
   (2) 我隨意檢查過了。
   (3) 我非常小心地檢查過了。

Your selection? (enter '?' for more information): <i>3</i>
妳真的確定要簽署這把金鑰
用妳的金鑰： "Victor Tseng (Palatis) &lt;palatis@gentoo.org.tw&gt;" (93F3B82A)

我非常小心地檢查過這把金鑰了。

真的要簽署嗎？ <i>y</i>

妳需要下列使用者的密碼串，纔能解開私鑰：
"Victor Tseng (Palatis) &lt;palatis@gentoo.org.tw&gt;"
1024 位元 DSA ID 93F3B82A 的金鑰，建立於 2004-06-14


指令&gt; <i>check</i>
uid  Benny Chuang (BennyC) &lt;bennyc@gentoo.org&gt;
sig!3       DB8FF979 2003-09-12   [自我簽章]
sig!3       93F3B82A 2004-06-14   Victor Tseng (Palatis) &lt;palatis@gentoo.o
<codenote>英文：</codenote>
# <i>gpg --import luis.asc</i>
gpg: key 462405BB: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
# <i>gpg --list-keys</i>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;
sub  2048g/96D6CDAD 2002-12-08

pub  1024D/462405BB 2002-12-01 Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;
uid                            Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
sub  4096g/922175B3 2002-12-01 [expires: 2003-12-01]

# <i>gpg --edit-key lmpinto@dei.uc.pt</i>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.


gpg: checking the trustdb
gpg: checking at depth 0 signed=0 ot(-/q/n/m/f/u)=0/0/0/0/0/1
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
sub  4096g/922175B3  created: 2002-12-01 expires: 2003-12-01
(1)  Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
(2). Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;

Command> <i>fpr</i>
pub  1024D/462405BB 2002-12-01 Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
     
Command> <i>sign</i>
Really sign all user IDs? <i>y</i>
                           
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB

     Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
     Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;

This key is due to expire on 2003-12-01.
Do you want your signature to expire at the same time? (Y/n) <i>Y</i>
How carefully have you verified the key you are about to sign actually belongs
to the person named above?  If you don't know what to answer, enter "0".

   (0) I will not answer. (default)
   (1) I have not checked at all.
   (2) I have done casual checking.
   (3) I have done very careful checking.

   Your selection? <i>3</i>
Are you really sure that you want to sign this key
with your key: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"

I have checked this key very carefully.

Really sign? <i>y</i>
              
You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"
1024-bit DSA key, ID 75447B14, created 2002-12-08

Command> <i>check</i>
uid  Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhe
uid  Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhe
</pre>

</body>
</section>
</chapter>

<chapter>
<title>與金鑰伺服器交換鑰匙</title>
<section>
<title>傳送鑰匙至金鑰伺服器</title>
<body>

<p>
現在您有了自己的鑰匙，將它傳送到世界性的金鑰伺服器大概是個好主意。世界上有很<!--
-->多金鑰伺服器並且會自動在它們之間交換金鑰。在這裡我們將把 Luis 的鑰匙送到 
pgp.mit.edu 伺服器。這使用 HTTP，所以如果您需要使用 HTTP 代理伺服器別忘了先<!--
-->設定它 (<c>export http_proxy=http://proxy_host:port/</c>)。傳送金鑰的指令<!--
-->是：<c>gpg --keyserver pgp.mit.edu --keyserver-options honor-http-proxy
--send-key john@nowhere.someplace.flick</c>。如果您不需要使用 HTTP 代理伺服<!--
-->器，則您可以拿掉 <e>--keyserver-options honor-http-proxy</e> 的部份。
</p>

<p>
您也可以傳送其他您簽過名的鑰匙到金鑰伺服器。我們可以將 Luis Pinto's 的鑰匙送至金
鑰伺服器。這樣的話，某個信任您金鑰的人可以使用您信任 Luis 的鑰匙的簽章。
</p>

</body>
</section>
<section>
<title>從金鑰伺服器取得鑰匙</title>
<body>

<p>
現在我們將找尋 Gustavo Felisberto 的金鑰並將它加入 John Doe 的鑰匙鍊 (只是為了確
定您有注意到 Gustavo Felisberto 是寫了這篇指南的人 :) )。
</p>

<pre caption = "從金鑰伺服器尋找金鑰">
# <i>gpg --keyserver pgp.mit.edu --keyserver-options honor-http-proxy --search-keys humpback@felisberto.net</i>
gpg: searching for "humpback@felisberto.net" from HKP server pgp.mit.edu
Keys 1-5 of 5 for "humpback@felisberto.net"
(1)Gustavo Felisberto (apt-get install anarchy) &lt;humpback@felisberto.net&gt; 1024
  created 2002-12-06, key B9F2D52A
(2)Gustavo Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1999-08-03, key E97E0B46
(3)Gustavo A.S.R. Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1998-12-10, key B59AB043
(4)Gustavo Adolfo Silva Ribeiro Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1998-08-26, key 39EB133D
(5)Gustavo Adolfo Silva Ribeiro Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1998-06-14, key AE02AF87
  Enter number(s), N)ext, or Q)uit &gt;<i>1</i>
gpg: requesting key B9F2D52A from HKP keyserver pgp.mit.edu
gpg: key B9F2D52A: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>

<p>
如您從伺服器回應看到的，我傳送了好些個金鑰到伺服器。可是我目前只使用
B9F2D52A。現在 John Doe 可以取得這把鑰匙並且信任地將它簽章。
</p>

</body>
</section>
</chapter>

<chapter>
<title>和文件一起使用</title>
<section>
<title>加密以及簽名</title>
<body>

<p>
讓我們假設您現在想送份檔案給 Lius。您可以將它加密、簽名、或又加密又簽名。加密表
示只有 Luis 能夠開啟它。而簽章表示這份檔案真的是您建立的。
</p>

<p>
接下了的三個命令會幫您做這些事，加密、簽名、和又加密又簽名。
</p>

<pre caption="檢查檔案中的金鑰並將它解碼">
# <i>gpg --output doc.gpg --encrypt --recipient lmpinto@dei.uc.pt doc_to_encrypt</i>
# <i>gpg --output doc.gpg --sign --recipient lmpinto@dei.uc.pt doc_to_sign</i>
# <i>gpg --output doc.gpg --encrypt --sign --recipient lmpinto@dei.uc.pt doc_to_encrypt_and_sign</i>
</pre>

<p>
這會建立二進位的加密檔。如果您想要建立 ASCII 檔案，請在命令前面加上 
<c>--clearsign</c> 選項。
</p>

</body>
</section>
<section>
<title>解密以及驗證簽名</title>
<body>

<p>
設想您取得了一篇給您的加密文件，將它解密的指令是 <c>gpg --output document 
--decrypt encrypted_doc.gpg</c>。這會將文件解密並且檢查簽章 (如果有的話)。
</p>

</body>
</section>
<section>
<title>進階功能</title>
<body>

<p>
GnuPG 還有一些不錯的進階功能。讓我們在 <path>~/.gnupg/options</path> 這個檔<!--
-->案中找出他們！
</p>

<pre caption="~/.gnupg/options">
#keyserver x-hkp://pgp.mit.edu
#keyserver-options auto-key-retrieve include-disabled include-revoked
</pre>

<p>
找到上面兩行並取消他們的註解。這樣的話，每當 GnuPG 需要檢查簽名卻無法在本機<!--
-->找到對方的金鑰的時候，會自動向 <uri link="http://pgp.mit.edu">pgp.mit.edu<!--
--></uri> 詢問並嘗試從那裡下載。
</p>

<p>
另一個指令則是 <c>gpg --refresh-keys</c>。它會自動向上面定義的金鑰伺服器更新<!--
-->公開金鑰，例如查詢撤回認證，新的 id，新的金鑰簽名等等。這個動作應該每個月<!--
-->作個 1~2 次，這樣某個人撤回他的金鑰的時候您可以馬上察覺。
</p>

</body>
</section>
</chapter>

<chapter>
<title>GnuPG 介面</title>
<section>
<title>關於電子郵件簽名</title>
<body>

<p>
您使用 GnuPG 中 95% 以上的時間，大概都是在加簽/加密/驗證簽名/解密電子郵件。<!--
-->這也是為什麼這個小節在最前面。
</p>

<p>
要使用 GnuPG 加簽/加密某封電子郵件有兩個方法，新方法跟老方法 :)。在老方法中<!--
-->，訊息會以純文字顯示。附件跟特殊格式都不會被驗證/解密。以下是個用老方法加<!--
-->簽的訊息：
</p>

<pre>
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Test message

-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 6.5.8 for non-commercial use

iQA/AwUBP8461jMX0745gR7AEQIEOwCg011GbufXO3ED3FkLWXmfzg7xm1cAoJD0
0EU3Kd2EKNCqataEqM5qjpPs
=LchZ
-----END PGP SIGNATURE-----
</pre>

<p>
這種訊息在今日的世界已經落伍了，現在多得是美妙的圖形介面以及看的懂 html 的電<!--
-->子郵件用戶程式。
</p>

<p>
為了解決這個問題，我們加了個新的 MIME (多用途網際網路郵件擴展 - Multipurpose
Internet Mail Extensions)。它在電子郵件中多加了一個欄位，告訴用戶端訊息的全<!--
-->部內容是否有簽名或加密。問題並不是每種郵件用戶端都支援它，甚至有些用戶端<!--
-->會整個爛掉，例如 Microsoft 的 Outlook 就是不支援的用戶端中最有名的一個。
</p>

</body>
</section>
<section>
<title>Kgpg</title>
<body>

<p>
kgpg 是個很好的 GNUPG 圖形化界面。在主視窗中，您可以直接貼上您想要簽名或加密<!--
-->的文字，而您可以直接貼上想要解密的 ASCII 格式加密文字。
</p>

<figure link="http://www.ibiblio.org/web-gentoo/images/kgpg1.png" short="kgpg main window"/>

<p>
在這個 kgpg 主視窗中您可以看見一個貼滿了 ASCII 格式的加密檔案。您可以在這裡將它
解密 (您必須提供您的密碼)，將其他檔案加密，貼上要簽名的文字...
</p>

<figure link="http://www.ibiblio.org/web-gentoo/images/kgpg2.png" short="kgpg key manage window"/>

<p>
現在您可以看到金鑰管理視窗。從這裡我們看到了 John Doe 的好鑰匙。兩把從 Gustavo 
和 Luis 來的認證的鑰匙，以及從 Daniel Robbins 得到尚未信任的鑰匙 (我還沒打電話給
他確認指紋 :) )。
</p>

</body>
</section>
<section>
<title>Seahorse</title>
<body>

<p>
Seahorse 似乎想成為 Gnome 桌面環境的 GnuPG 圖形化介面。這個軟體以驚人的速度<!--
-->發展，不過目前還是缺少一些在 Kgpg 或指令介面的重要功能。
</p>

</body>
</section>
<section>
<title>Mozilla Enigmail</title>
<body>

<p>
Mozilla 從 1.0 版以後有附上 Enigmail，一個設定簡單的郵件用戶端插件。您只要去 
Preferences -&gt; Privacy &amp; Security -&gt; Enigmail，並且在那裡輸入您金鑰的 
e-mail 位置就可以了。
</p>

<p>
附上沒有認證的 pgp 或 gpg 簽章的郵件會以一支斷掉的筆標註，其他有優良簽章的會看起
來像一支完好無缺的筆。Enigmail 還有從金鑰伺服器取得鑰匙的功能，不過如果有發生問
題它會秀出一則非常詭異的訊息 (您還記得怎麼使用文字指令吧？)。
</p>

</body>
</section>
<section>
<title>KMail</title>
<body>

<p>
Kmail 也很好設定。我將會貼上幾張表示該怎樣設定它的圖。基本上您必須告訴 KMail 要
使用 GPG 以及要用那把金鑰簽名。
</p>

<figure link="http://www.gentoo.org/images/kmail_identity.png" caption="kmail identity options OpenGPG key"/>
<figure link="http://www.gentoo.org/images/kmail_security_openpgp.png" caption="kmail security options OpenPGP"/>
<figure link="http://www.gentoo.org/images/kmail_security_plugins.png" caption="kmail security options Crypto Plugins"/>

</body>
</section>
<section>
<title>Sylpheed-Claws</title>
<body>

<p>
這是我所使用的電子郵件用戶端程式。即使信箱再大它還是<e>非常</e>快，擁有幾乎<!--
-->您想得到所有郵件用戶端該有的功能，並且與 gpg 有很好的結合。唯一的問題是它<!--
-->不支援舊的 PGP 簽名，所以當您收到那種郵件的時候必須手動驗證簽名。
</p>

<p>
要再 Sylpheed-Claws 中使用您的 gpg 金鑰，請至 "帳戶設定" 中的 "隱私" 頁，並<!--
-->且選擇您要用來加密的金鑰。大部份的使用者應該都會使用預設的金鑰。
</p>

</body>
</section>
</chapter>

<chapter>
<title>公開金鑰加密</title>
<section>
<title>基本公開金鑰加密</title>
<body>

<p>
基本的公開金鑰加密步驟是由 Whitfield Diffie 及 Martin Hellman 於 1976 提出的<!--
-->。在我第一次在同一個句子中聽到 "公開金鑰" 以及 "加密" 這兩個詞的時候，我<!--
-->覺得那根本是不可能的事情。在那個時候根本沒有網際網路這種東西 (其實有啦，<!--
-->但是我沒有用)，所以我跑去圖書館找有關加密的資料。我必須提一下那時候我十六<!--
-->歲，所以圖書館管理員驚奇的看著我，並給了我一本寫給小朋友、關於替換加密的書
(以某個字母代替另一個的加密法，例如有名的 Caesar Cypher 或 ROT-13 (Tragbb Ebpxf,
naq lbh xabj vg vf tbbq orpnhfr lbh ner ernqvat guvf qbp.)。 (若您不知道之前<!--
-->那句英文在幹麼，請 <c>emerge rotix</c>))。我感到蠻沮喪的，並且開始尋找更<!--
-->多資訊。有個數學加在家裡真好，當我跟他們聊天的時候，進入了嶄新的世界！
</p>

<p>
現在，一點點數學觀念：
</p>

<pre caption="數學基礎">
定義：

1- "質數" 是只能被 1 以及自己整除的正整數 (除了之後餘數為 0)。
前 8 個質數是 1、2、3、5、7、11、13、17

理論 (不在此證明)
1- 任何非質數的正整數都可以化為兩個以上質數的乘積，而且是唯一的組合。
4=2*2
6=2*3
8=2*4=2*2*2
10=2*5
12=2*6=2*2*3

"事實"：
1- 數學上，兩個大數相乘是很簡單的。
2- 找出某個正整數的質因數並不是那麼簡單。
</pre>

<p>
如果給您個數字 35 並且告訴您那是兩個質數的乘積，您可以簡單的找出那兩個質數是 5
跟 7。但若我告訴您 1588522601 也是，您可能會花許多時間 (或 CPU 週期) 找出它是
49811*31891。當這個數字真的非常大的時候，這項工作就變成 "時間上不可能"。所以<!--
-->，現在我舉出一個很大的兩個質數相乘的數字，我可以保證除了我以外沒有其他人<!--
-->會知道。
</p>

<p>
這就是今天的公開金鑰認證 (PKC - Public Key Cryptography) 的實作方法。舉個
(不真實的) 例子，我告訴所有人一個數字，而某人會使用他來加密資料給我。每個<!--
-->都可以看到加密之後的資料，不過我是唯一一個知道解密捷徑的人。其他人必須先<!--
-->分解那個大數字，然後才能讀取裡面的訊息，而在 "事實上" 那是個不可能在短時<!--
-->間內達成的任務 (使用現有的方法跟目前世界上最快的電腦大概需要幾千年來解密)<!--
-->。在這個例子中，那兩個大質數是我的 "私密金鑰，而那個非質數則是 "公開金鑰"。
</p>

<p>
實際上這不是 100% 正確，但是這能讓新手比較好理解。您可以從 <uri
link="http://www.hack.gr/users/dij/crypto/overview/diffie.html"><!--
-->Diffie-Hellman</uri> 協定中的 hack.gr 中找到一些資訊。想要更多資訊的話，<!--
-->請去圖書館找 Alfred J. Menezes, Paul C. van Oorschot and Scott A. Vanstone
所著的 <uri link="http://www.cacr.math.uwaterloo.ca/hac/">"Handbook of Applied
Cryptography"</uri> 這本書，它的免費版本可以在上面的網址找到。
</p>

<p>
有個問題是，如果您加密了某個訊息給我，但是您遺失了原本未加密的訊息，則您無法<!--
-->從已加密的版本還原。
</p>

</body>
</section>
<section>
<title>簽名</title>
<body>

<p>
我們已經知道對方有我的公開金鑰之後，要怎麼送給我加密過的訊息。但是我該如何得<!--
-->知這篇訊息的作者真的是那個人？換句話說：在我收到您寄給我的電子郵件之後，<!--
-->我該怎麼知道那真的是您寄的，而不是由其他假扮成您的人寄的？
</p>

<p>
記得我說過 PKC 並沒有我之前說的那麼簡單？基本的作法是，在您加密要送出給我的<!--
-->訊息之後使用您自己的私密金鑰簽名。所以當我收到這個訊息之後，我可以先使用<!--
-->您的公開金鑰檢驗，然後使用我自己的私鑰來解密。如您所見，我們無法在我上面<!--
-->設定的狀況下套用這個動作。
</p>

<p>
還有一件事情很重要，您不需要在簽名之前先把訊息加密。例如您想建立一則所有人都<!--
-->可以看的訊息，不過有您的簽名。當訊息中任何一個字元被變更的時候，其他人可<!--
-->以檢查出來。
</p>

</body>
</section>
<section>
<title>金鑰伺服器以及簽名的金鑰</title>
<body>

<p>
但是，假設直到您傳送訊息給我之前，我並沒有您的通訊方式。我要怎麼取得您的公開<!--
-->金鑰，以及我該怎麼知道那真的是您的公開金鑰？
</p>

<p>
公開金鑰伺服器就是為了解決這個問題而設立的。當您建立金鑰對 (公鑰以及私鑰) 之<!--
-->後，您將公鑰傳送至伺服器。接著所有人都可以從那裡取得您的公鑰。這解決了找<!--
-->鑰匙的問題，但是我該怎麼知道那真的是您的公鑰？為了了解這個問題，您必須先搞懂
"金鑰簽名" 這個技術：
</p>

<p>
"金鑰簽名" 是指，若我有另外某個人的公開金鑰，而我<e>清楚知道</e>那真的是那個<!--
-->人的金鑰 (他是我某個朋友，是我真實世界中認識的某個人... 等等。) 我可以將<!--
-->這個金鑰加簽並傳送至伺服器，這表示我告訴全世界：「這個公鑰真的是這個人的<!--
-->。」。這樣的話，擁有我金鑰的人可以利用對我金鑰的信任來信任其他金鑰。
</p>

<p>
這似乎蠻混亂的，讓我們來看看這個實際的例子：
</p>

<p>
讓我們假設三個人：John、Mary、跟 Lisa。John 是 Mary 的好友，但是不認識 Lisa<!--
-->；Lisa 是 Mary 的好友但是不認識 John。某日 Lisa 送了一則簽名訊息給 John，則
John 會至公開金鑰伺服器取得 Lisa 的公鑰並檢驗這則訊息。若一切都那麼美好，John
會看到撰寫訊息的人就是打造了這付鑰匙的人。但是我要怎麼知道打造這付鑰匙的人真的是
Lisa 本人？
</p>

<p>
接著，John 發現這付公鑰上有 Mary 的簽名，由於他已經有 Mary 的公鑰並且他信任 Mary
的公鑰，所以他可以知道 Mary 信任這付鑰匙，由於他信任 Mary，所以他信任這付鑰<!--
-->匙。最後，John 可以確定 Lisa 真的是這封訊息的作者。
</p>

<p>
您現在已經準備好繼續閱讀此指南了，請回到<uri link="#doc_chap1">第一章</uri><!--
-->繼續學習如何使用 <c>gpg</c>。
</p>

</body>
</section>
</chapter>

<chapter>
<title>最後的想法以及榮譽榜</title>
<section>
<title>一些問題</title>
<body>

<p>
我有些把照片放進金鑰的問題。檢查您使用的版本，如果您使用 GnuPG 1.2.1-r1 或以<!--
-->上，那應該不會有什麼問題。比較舊的版本也許有問題，而且大部份的伺服器不喜<!--
-->歡附了照片的鑰匙。
</p>

<p>
最新版的 gnupg 不支援 <c>gpg --send-keys</c> 指令，它本來是用來將您鑰匙鍊中<!--
-->所有金鑰傳送至伺服器的指令。
</p>

</body>
</section>
<section>
<title>這篇文章還缺什麼？</title>
<body>

<p>
<c>gpg</c> 是個非常複雜的工具，它可以讓您做到許多這裡沒有提到的事情。這篇文<!--
-->件是為了那些 GnuPG 新手寫的。要得到更多資訊，您應該查閱 <uri
link="http://www.gnupg.org">GnuPG 網站</uri>。
</p>

<p>
我沒有介紹例如 <c>pgp4pine</c>、<c>gpgpine</c>、<c>evolution</c> 以及也許一些
Windows 工具之類的東西。也許以後會陸續增加。
</p>

</body>
</section>
<section>
<title>榮譽榜</title>
<body>

<p>
John Michael Ashley 的 <uri link="http://www.gnupg.org">GnuPG Handbook</uri> 寫
的非常美妙。對新手來說是很好的參考書。
</p>

<p>
逼著我重寫這篇文章的 Swift (Sven Vermeulen)。
</p>

<p>
所有 #gentoo-doc 團隊中的人。
</p>

<p>
追蹤我隱私的 Tiago Serra。
</p>

</body>
</section>
</chapter>
</guide>
