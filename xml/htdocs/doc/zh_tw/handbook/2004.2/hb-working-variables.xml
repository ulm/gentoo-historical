<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- rev 1.9 by ccpz -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/zh_tw/handbook/2004.2/hb-working-variables.xml,v 1.1 2004/11/26 04:08:48 ccpz Exp $ -->

<sections>
<version>1.8</version>
<date>2004 年 8 月 30 日</date>
<section>
<title>系統變數？</title>
<subsection>
<title>這是什麼</title>
<body>

<p>
系統變數是一個有名稱的物件，包含一個或多個程式要用的資訊。許多使用者(特別是 Linux
新手)覺得這有一些古怪而且難以管理。這想法有一些錯誤：使用者可以用系統變數輕鬆的
改變一個或多個程式設定。
</p>

</body>
</subsection>
<subsection>
<title>重要的範例</title>
<body>

<p>
下面的表格顯示許多 Linux 使用的變數以及它們的用途。範例在表格後面展示。
</p>

<table>
<tr>
  <th>變數</th>
  <th>說明</th>
</tr>
<tr>
  <ti>PATH</ti>
  <ti>
	這個變數包含用冒號分隔的目錄列表，讓系統尋找可執行檔。如果您輸入一個可執行檔
	(例如 <c>ls</c>，<c>rc-update</c> 或 <c>emerge</c>)但是這個檔案不在列表中的
	目錄，您的系統不會執行它(除非您輸入完整的路徑，如 <c>/bin/ls</c>)。
  </ti>
</tr>
<tr>
  <ti>ROOTPATH</ti>
  <ti>
    這個變數和 <c>PATH</c> 有相同功能，但是這裡面包含的目錄是根使用者數入指令時
	才會尋找。
  </ti>
</tr>
<tr>
  <ti>LDPATH</ti>
  <ti>
    這個變數包含以冒號分隔的目錄列表，讓動態連結檔在裡面搜尋函式庫。
  </ti>
</tr>
<tr>
  <ti>MANPATH</ti>
  <ti>
    這個變數包含以冒號分隔的目錄列表，讓 <c>man</c> 指令搜尋手冊頁。
  </ti>
</tr>
<tr>
  <ti>INFODIR</ti>
  <ti>
    這個變數包含以冒號分隔的目錄列表，讓 <c>info</c> 搜尋資訊頁。
  </ti>
</tr>
<tr>
  <ti>PAGER</ti>
  <ti>
    這個變數包含顯示檔案內容的程式路徑(例如 <c>less</c> 或 <c>more</c>)。
  </ti>
</tr>
<tr>
  <ti>EDITOR</ti>
  <ti>
    這個變數包含編輯的程式路徑(例如 <c>nano</c> 或 <c>vi</c>)。
  </ti>
</tr>
<tr>
  <ti>KDEDIRS</ti>
  <ti>
    這個變數包含以冒號分隔的目錄列表，設定 KDE 的主要路徑。
  </ti>
</tr>
<tr>
  <ti>CLASSPATH</ti>
  <ti>
    這個變數包含以冒號分隔的目錄列表，設定 Java 程式的路徑。
  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT</ti>
  <ti>
	這個變數包含以<e>空白</e>分隔的目錄列表，這些目錄在 Portage 更新時需要被保護。
  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT_MASK</ti>
  <ti>
    這個變數包含以<e>空白</e>分隔的目錄列表，這些目錄更新 Portage 時不要被保護。
  </ti>
</tr>
</table>

<p>
底下是所有的變數的設定範例：
</p>

<pre caption="Example definitions">
PATH="/bin:/usr/bin:/usr/local/bin:/opt/bin:/usr/games/bin"
ROOTPATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
LDPATH="/lib:/usr/lib:/usr/local/lib:/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
MANPATH="/usr/share/man:/usr/local/share/man"
INFODIR="/usr/share/info:/usr/local/share/info"
PAGER="/usr/bin/less"
EDITOR="/usr/bin/vim"
KDEDIRS="/usr"
CLASSPATH="/opt/blackdown-jre-1.4.1/lib/rt.jar:."
CONFIG_PROTECT="/usr/X11R6/lib/X11/xkb /opt/tomcat/conf \
                /usr/kde/3.1/share/config /usr/share/texmf/tex/generic/config/ \
                /usr/share/texmf/tex/platex/config/ /usr/share/config"
CONFIG_PROTECT_MASK="/etc/gconf
</pre>

</body>
</subsection>
</section>
<section>
<title>定義全域變數</title>
<subsection>
<title>/etc/env.d 目錄</title>
<body>

<p>
為了要集中管理這些變數的設定，Gentoo 使用 <path>/etc/env.d</path> 目錄。在目錄中
您會發現許多檔案，例如 <path>00basic</path>，<path>05gcc</path> 等。這裡面包含檔
案名稱中所提到的程式需要用的變數。
</p>

<p>
例如，當您安裝 <c>gcc</c> 後，ebulid 會建立一個叫做 <path>05gcc</path> 的檔案，
包含下面的變數設定：
</p>

<pre caption="/etc/env.d/05gcc">
PATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/info"
CC="gcc"
CXX="g++"
LDPATH="/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
</pre>

<p>
其他的 Linux 套件會告訴您在 <path>/etc/profile</path> 或其他地方新增這些變數。
Gentoo 則讓您很容易(對 Portage 也是)去管理這些變數而不用注意其他設定系統變數的
檔案。
</p>

<p>
舉例來說，當 <c>gcc</c> 更新了之後，<path>/etc/env.d/05gcc</path> 也會同時被更新
而使用者不必做任何事。
</p>

<p>
這不僅對 Portage 有好處，對使用者也是。您或許偶爾會被要求設定一些系統變數。拿
 <c>http_proxy</c> 做例子。您不用弄亂 <path>/etc/profile</path>，只要建立一個
檔案( <path>/etc/env.d/99local</path> )然後在裡面輸入設定：
</p>

<pre caption="/etc/env.d/99local">
http_proxy="proxy.server.com:8080"
</pre>

<p>
藉著將您自己的變數設定放到這個檔案中，您可以很快找到哪些變數是您自己設定的。
</p>

</body>
</subsection>
<subsection>
<title>env-update 指令稿</title>
<body>

<p>
在 <path>/etc/env.d</path> 中的數個檔案同時定義了 <c>PATH</c> 變數。這並沒有錯：
當您執行 <c>env-update</c>，他會把數個設定同時加到系統設定中，因此讓軟體套件(或
使用者)加入他們自己的設定而不會干擾已經存在的設定。
</p>

<p>
<c>env-update</c> 指令稿將會以 <path>/etc/env.d</path> 中的檔案名稱以字母順序依
序加入系統設定中。這就是為什麼這裡面的許多檔案以數字開頭。
</p>

<pre caption="env-update 的新增順序">
         00basic        99kde-env       99local
     +-------------+----------------+-------------+
PATH="/bin:/usr/bin:/usr/kde/3.2/bin:/usr/local/bin"
</pre>

<p>
當您執行 <c>env-update</c>，他會建立所有的系統變數然後寫入
<path>/etc/profile.env</path> 中(這檔案被 <path>/etc/profile</path> 使用)。他也
會從 <c>LDPATH</c> 讀取資訊然後建立 <path>/etc/ld.so.conf</path>，之後，他會執行
 <c>ldconfig</c> 重新建立動態連結使用的 <path>/etc/ld.so.cache</path> 檔案。
</p>

<p>
如果您希望 <c>env-update</c> 在您執行它後立刻作用，執行下面的指令來更新。自行安
裝 Gentoo 的使用者可能會記得安裝過程中執行過：
</p>

<pre caption="更新環境變數">
# <i>env-update &amp;&amp; source /etc/profile</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>定義局部變數</title>
<subsection>
<title>使用者自行設定</title>
<body>

<p>
您或許不想要定義全域變數。例如您可能要加入 <path>/home/my_user/bin</path> 到
 <c>PATH</c> 變數中，但是您不想要其他使用者在他們的 <c>PATH</c> 也有這個設定。
如果您想要定義區域變數，您可以加到 <path>~/.bashrc</path> 或
 <path>~/.bash_profile</path>：
</p>

<pre caption="在 ~/.bashrc 中額外增加局部 PATH 設定">
PATH="${PATH}:/home/my_user/bin"
</pre>

<p>
當您重新登入後，您的 <c>PATH</c> 變數就會更新了。
</p>

</body>
</subsection>
<subsection>
<title>有期限的設定</title>
<body>

<p>
有的時候需要更嚴格的定義。例如您可能需要從您剛剛建立的暫時目錄執行程式，但您不想
輸入完整的路徑或是編輯 <path>~/.bashrc</path> 只為了在這一小段時間使用。
</p>

<p>
在這種情況下，您只要使用 <c>export</c> 指令設定 <c>PATH</c> 變數。只要您不登出，
<c>PATH</c> 將會使用目前暫時的設定。
</p>

<pre caption="設定有期限的變數">
# <i>export PATH="${PATH}:/home/my_user/tmp/usr/bin"</i>
</pre>

</body>
</subsection>
</section>
</sections>
