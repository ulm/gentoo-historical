<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/zh_tw/handbook/hb-portage-ebuild.xml,v 1.2 2004/11/11 06:29:08 ccpz Exp $ -->
<!-- rev 1.4 by ccpz -->
<sections>

<version>1.3</version>
<date>2004 年 10 月 24 日</date>

<section>
<title>Emerge 與 Ebuild</title>
<body>

<p>
<c>ebuild</c> 程式是 Portage 系統較低層的操控介面。你可以透過給予 ebuild 檔案，
使用這個程式去執行特定動作。例如，你可以單獨執行各個 merge 步驟。
</p>

<p>
使用 <c>ebuild</c> 大多是為了開發；更多關於 <c>ebuild</c> 的資訊因此可以在 <uri
link="/proj/en/devrel/handbook/handbook.xml">開發者手冊</uri>中找到。然而，我們
將解釋在 merge 一個確切的軟體名稱時，什麼 ebuild 動作會被 Portage 請求，還有如何
執行一些 ebuilds 支援的後端配置。
</p>

</body>
</section>
<section>
<title>手動安裝軟體</title>
<subsection>
<title>抓取原始碼 &amp; 驗證 checksum</title>
<body>

<p>
當你使用 <c>ebuild</c> 程式且給他一個 ebuild 檔案，他將驗證所有內涵檔案的 checksums 
是否與 <path>Manifest</path> 附帶的，或與 
<path>files/digest-&lt;name&gt;-&lt;version&gt;</path> 檔案中的 checksums 相同。
這會在下載原始碼之後執行。
</p>

<p>
使用 <c>ebuild</c> 抓取原始碼, 請執行:
</p>

<pre caption="抓取原始碼">
# <i>ebuild path/to/ebuild fetch</i>
</pre>

<p>
如果 ebuild 的 md5sum 不符合列在 <path>Manifest</path> 檔案裡面的那份，
或是下載的原始碼不符合列在 <path>files/digest-&lt;package&gt;</path> 檔案中
的那些 checksum，你將收到像是這樣的錯誤訊息：
</p>

<pre caption="Ebuild checksum 錯誤">
!!! File is corrupt or incomplete. (Digests do not match)
>>> our recorded digest: db20421ce35e8e54346e3ef19e60e4ee
>>>  your file's digest: f10392b7c0b2bbc463ad09642606a7d6
</pre>

<p>
接著會指出錯誤的檔案。
</p>

<p>
如果你確定你下載的原始碼和 ebuild 本身正確無誤，你可以使用 <c>ebuild</c> 的 
digest 功能重新建立 <path>Manifest</path> 
和 <path>digest-&lt;package&gt;</path>。
</p>

<pre caption="重新建立 Manifest and digest">
# <i>ebuild path/to/ebuild digest</i>
</pre>

</body>
</subsection>
<subsection>
<title>解開原始碼包裹</title>
<body>

<p>
想解開 <path>/var/tmp/portage</path>（或你在 <path>/etc/make.conf</path> 
指定的其他目錄路徑）中的原始碼檔案, 可以使用 <c>ebuild</c> 的 unpack 功能：
</p>

<pre caption="解開原始碼包裹">
# <i>ebuild path/to/ebuild unpack</i>
</pre>

<p>
這將執行 ebuild 的 src_unpack() 函式（如果沒有定義 src_unpack() 函式，預設會單純
解壓縮）。在這個步驟也會套用所有必須的修補檔。
</p>

</body>
</subsection>
<subsection>
<title>編譯原始碼</title>
<body>

<p>
在 merge 程序中，下個步驟就是編譯原始碼。<c>ebuild</c> 的 compile 功能是去執行 
ebuild 檔案中的 src_compile() 函式。如果有需要，這也包含著 configure 步驟。
</p>

<pre caption="編譯原始碼">
# <i>ebuild path/to/ebuild compile</i>
</pre>

<p>
如果你想改變編譯指令，建議您編輯 ebuild 檔案中的 src_compile() 函式。然而，你也可
以讓 Portage 以為 ebuild 程式已經完成編譯步驟了。自己執行所有必須的命令然後在
工作目錄建立一個叫做 <path>.compiled</path> 的空檔案。
</p>

<pre caption="通知 Portage 編譯工作完成了">
# <i>touch .compiled</i>
</pre>

</body>
</subsection>
<subsection>
<title>安裝暫存路徑中的檔案</title>
<body>

<p>
下個步驟 Portage 將會安裝暫存目錄中的所有必要檔案。這個目錄將會包含所有要被 
merge 到 Live 檔案系統的檔案。你可以跑 <c>ebuild</c> 的 install 功能來完成
這個動作，他會執行 ebuild 檔案中的 src_install() 函式：
</p>

<pre caption="安裝檔案">
# <i>ebuild path/to/ebuild install</i>
</pre>

</body>
</subsection>
<subsection>
<title>Merge 檔案到 Live 檔案系統</title>
<body>

<p>
最後一個步驟是把所有檔案 merge 到 Live 檔案系統和登記他們到 Portage 後端。
<c>ebuild</c> 將這個步驟稱做 "qmerge"，而且包含下列步驟：
</p>

<ul>
  <li>若有指定，將會執行 pkg_preinst() 函式</li>
  <li>複製所有檔案到 Live 檔案系統</li>
  <li>登記檔案到 Portage 後端</li>
  <li>若有指定，將會執行 pkg_postinst() 函式</li>
</ul>

<p>
執行 <c>ebuild</c> 的 qmerge 功能以達成這些步驟：
</p>

<pre caption="Merge 檔案到 Live 檔案系統">
# <i>ebuild path/to/ebuild qmerge</i>
</pre>

</body>
</subsection>
<subsection>
<title>清除暫存目錄</title>
<body>

<p>
最後，你可以使用 <c>ebuild</c> 的 clean 功能清除暫存資料夾：
</p>

<pre caption="清除暫存目錄">
# <i>ebuild path/to/ebuild clean</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>額外的 ebuild 特性</title>
<subsection>
<title>執行所有 Merge 相關命令</title>
<body>

<p>
使用 <c>ebuild</c> 的 merge 功能，你可以一次執行 fetch、unpack、compile、install、qmerge 命令：
</p>

<pre caption="安裝軟體">
# <i>ebuild path/to/ebuild merge</i>
</pre>

</body>
</subsection>
<subsection>
<title>執行設定動作</title>
<body>

<p>
某些程式包含對你系統更進一步設定的指令。這些指令可以與人互動，也因此不會自動執行。
使用 <c>ebuild</c> 的 config 功能來執行列在 ebuild 檔案裡（非必要）config() 函式中
的設定步驟：
</p>

<pre caption="設定套件">
# <i>ebuild path/to/ebuild config</i>
</pre>

</body>
</subsection>
<subsection>
<title>建立一個 (RPM) 套件</title>
<body>

<p>
你可以叫 Portage 由 ebuild 檔案建立一個二進位的套件，即使是 RPM 檔案。使用 
<c>ebuild</c> 的 package 或 rpm 功能去建立這些檔案。然而這兩個功能有些不同：
</p>

<ul>
  <li>
    package 功能與 merge 功能非常相像，在建立套件之前，會執行所有必備的動作
   （fetch、unpack、compile、install）
  </li>
  <li>
    rpm 功能會把執行 <c>ebuild</c> 的 install 功能<e>之後</e>所建立的檔案
    包成 RPM 套件。
  </li>
</ul>

<pre caption="建立套件">
<comment>（建立 Portage 相容，已編譯好套件）</comment>
# <i>ebuild path/to/ebuild package</i>

<comment>（建立 RPM 套件）</comment>
# <i>ebuild path/to/ebuild rpm</i>
</pre>

<p>
然而用此方式建立的 RPM 檔案並不包含 ebuild 的相依性相關訊息。
</p>

</body>
</subsection>
</section>
<section>
<title>更多資訊</title>
<subsection>
<body>

<p>
要更多關於 Portage、ebuild 程式和 ebuild 檔案的資訊，請查閱下列 man page：
</p>

<pre caption="Man pages">
$ <i>man portage</i>    <comment>(Portage 本身)</comment>
$ <i>man emerge</i>     <comment>(emerge 命令)</comment>
$ <i>man ebuild</i>     <comment>(ebuild command)</comment>
$ <i>man 5 ebuild</i>   <comment>(The ebuild file syntax)</comment>
</pre>

<p>
你也可以在 <uri link="/proj/en/devrel/handbook/handbook.xml">開發者手冊</uri> 找到更多有關開發的資訊
</p>

</body>
</subsection>
</section>
</sections>
