<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/zh_tw/handbook/hb-working-rcscripts.xml,v 1.6 2006/03/23 10:47:56 ccpz Exp $ -->

<!-- rev 1.25 by ccpz -->

<sections>
<version>1.21</version>
<date>2004-05-29</date>
<section>
<title>執行階段（Runlevels）</title>
<subsection>
<title>啟用您的系統</title>
<body>

<p>
當您開啟您的系統，您將會看到很多文字跳過。如果您注意一點，您將會發現那些文字都是
一樣的。這些動作叫做固定式的 <e>開機序列</e>。
</p>

<p>
首先，您的開機程式將會載入您所定義到設定檔內的核心映像檔，並且將他放到記憶體內。
這是為了要告訴 CPU 該執行核心。當核心載入完畢開始執行後，它將會起始核心相關的
架構和程序然後開始 <c>init</c> 的程序。
</p>

<p>
這個步驟是為了確保所有的檔案系統（被定義在 <path>/etc/fstab</path>）有被載入並且
可以使用。然後將執行一些放在 <path>/etc/init.d</path> 的給個程序，將啟用所有您打
算開啟的服務。
</p>

<p>
最後，當所有的程序都執行後，<c>init</c> 將會啟用終端（在大多的例子裡，只是幾個
藏在 <c>Alt-F1</c> 下的虛擬終端，<c>Alt-F2</c>，等等。）包含著一個特別的程序
叫做 <c>agetty</c>。然後這個程序將會使用 <c>login</c> 讓您可以登入到這些終端內。
</p>

</body>
</subsection>
<subsection>
<title>Init 程序</title>
<body>

<p>
現在 <c>init</c> 不只是執行 <path>/etc/init.d</path> 裡面的程序。更多的是，他還
會依照 <path>/etc/runlevels</path> 來選擇要執行的程序。
</p>

<p>
首先，<c>init</c> 將執行所有 <path>/etc/runlevels/boot</path> 內的連接，這些連接
將會連到 <path>/etc/init.d</path> 裡面的程序。大部份來說，這些將會按照字母排列
分別起始，但是有些會因為相依性的關係而先執行其他的程序。
</p>

<p>
當 <c>/etc/runlevels/boot</c> 內的程序都被執行後，<c>init</c> 將繼續執行
<path>/etc/runlevels/default</path> 內的連接。在一次，這些將會按照字母排列分別起
始，但是有些會因為相依性的關係而先執行其他的程序。
</p>

</body>
</subsection>
<subsection>
<title>Init 是如何執行的</title>
<body>

<p>
當然 <c>init</c> 不能自己決定所有的選擇。他需要一個設定檔來告訴要有那些動作。這
個設定檔為 <path>/etc/inittab</path>。
</p>

<p>
如果您記得剛剛解釋過的開機序列，您將會記得 <c>init</c> 的第一個動作就是掛載所有
的檔案系統。這將會按照以下的方式定義在 <path>/etc/inittab</path>：
</p>

<pre caption="/etc/inittab 的系統起始">
si::sysinit:/sbin/rc sysinit
</pre>

<p>
這行將告訴 <c>init</c> 一定要執行 <c>/sbin/rc sysinit</c>來起始系統。
<path>/sbin/rc</path> 的程序將掌管起始的動作，您也可以說 <c>init</c> 的工作其實
不多 -- 它只是指派起始系統的工作給另外一個程序。
</p>

<p>
第二，<c>init</c> 將執行 <path>/etc/runlevels/boot</path> 內所有的連接。將按照以
下定義：
</p>

<pre caption="繼續系統起始">
rc::bootwait:/sbin/rc boot
</pre>

<p>
<c>rc</c> 程序再一次的執行相關工作。但是這是是 <c>rc</c> （<e>boot</e>）將會去
執行 <path>/etc/runlevels</path> 的相關目錄。
</p>

<p>
現在 <c>init</c> 將檢察他的設定檔然後查看他應該執行那個<e>階段</e>。要決定這個，
它將會從 <path>/etc/inittab</path> 取以下這行：
</p>

<pre caption="init預設（initdefault）">
id:3:initdefault:
</pre>

<p>
在這個例子（大多數的 Gentoo 使用者也會使用），將會從第三個<e>執行階段</e>開始。
使用這個資訊，<c>init</c> 將會從 <e>執行階段 3</e> 開始：
</p>

<pre caption="定義執行階段">
l0:0:wait:/sbin/rc shutdown
l1:S1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
</pre>

<p>
這行將定義第三階段，然後執行 <c>rc</c> 程序來選擇要啟用的服務（現在則是更改為
<e>default</e>）。這個 <c>rc</c> 後面的參數將會合 <path>/etc/runlevels</path>
內的子目錄一樣。
</p>

<p>
當 <c>rc</c> 完成的時候，<c>init</c> 將會決定應該要啟用那些虛擬終端和在各終端應
該執行什麼指令：
</p>

<pre caption="虛擬終端定義">
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
</pre>


</body>
</subsection>
<subsection>
<title>什麼是執行階段（runlevel）？</title>
<body>

<p>
您已經知道了 <c>init</c> 如何使用號碼來決定該啟用那個執行階段。一個 
<e>執行階段</e> 將會代表著您的系統將執行那些程序（執行階段程序或是 
<e>起始程序（initscripts））</e>。
</p>

<p>
在 Gentoo 內共有定義七個執行階段：三個內部執行階段，和四個使用者定義的執行階段。
內部的執行階段叫做 <e>sysinit</e>，<e>shoutdown</e> 和 <e>reboot</e> 就和他們的
名字一樣：
</p>

<p>
使用者定義的執行階段包含著 <path>/etc/runlevels</path> 的自目錄：
<path>boot</path>，<path>default</path>，<path>nonetwork</path> 和 
<path>single</path>。<path>boot</path> 的執行階段將起始包含其他所有系統相關的服務
。剩下的三個執行階段則是依照不同的服務而類別：<path>default</path> 適用於日常運作
所需，<path>nonetwork</path> 適用於沒有網路連線的需求，和 <path>single</path>
則是在您需要整理系統時所用。

</p>

</body>
</subsection>
<subsection>
<title>使用 Init Scripts</title>
<body>

<p>
<c>rc</c> 的程序叫做 <e>init scripts</e>。每個在 <path>/etc/init.d</path> 的程序
都可以使用 <e>start</e>，<e>stop</e>，<e>restart</e>，<e>pause</e>，<e>zap</e>，
<e>status</e>，<e>ineed</e>，<e>iuse</e>，<e>needsme</e>，<e>usesme</e> 或是
<e>broken</e> 為參數。
</p>

<p>
要開始，停止，或是重新啟動一個服務（和所有相依的服務），您應該使用 <c>start</c>
，<c>stop</c> 和 <c>restart</c>：
</p>

<pre caption="啟用 Postfix">
# <i>/etc/init.d/postfix start</i>
</pre>

<note>
只有 <e>指定</e> 的服務會被停止或是重開。其他相依的程式（那些<e>使用</e>這個服務
但是不需要他的）將不會被影響到。
</note>

<p>
如果您要停止一個服務，但是不是依賴著它的其他服務，您可以使用 <c>pause</c>：
</p>

<pre caption="停止 Postfix 但是繼續執行其他相依的服務">
# <i>/etc/init.d/postfix pause</i>
</pre>

<p>
如果您要查看某個服務的狀態（啟用，停止，暫停﹍）您可以使用 <c>status</c>：
</p>

<pre caption="關於 postfix 的狀態">
# <i>/etc/init.d/postfix status</i>
</pre>

<p>
如果狀態告訴您這個服務正在執行，但是您知道這是錯的，那您將可以使用 <c>zap</c> 將
狀態重設為 "停止"：
</p>

<pre caption="重設 postfix 的狀態">
# <i>/etc/init.d/postfix zap</i>
</pre>

<p>
如果要查看某個服務的相依性有那些，您可以使用 <c>iuse</c> 或是 <c>ineed</c>。
您可以使用 <c>ineed</c> 來觀看服務的相關功能。<c>iuse</c> 則是查看服務是否有被
其他服務依賴著。
</p>

<pre caption="查詢 Postfix 依賴的服務">
# <i>/etc/init.d/postfix ineed</i>
</pre>

<p>
類似的，您可以查詢那些服務需要那些服務（<c>needsme</c>）或是（<c>usesme</c>）：
</p>

<pre caption="需要用到 Postfix 的服務">
# <i>/etc/init.d/postfix needsme</i>
</pre>

<p>
最後您可以查看依賴著某個服務但是壞損的其他服務：
</p>

<pre caption="查詢 Postifx 需要但是損毀的相依性">
# <i>/etc/init.d/postfix broken</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>使用 rc-update</title>
<subsection>
<title>什麼是 rc-update？</title>
<body>

<p>
Gentoo 的 init 系統使用的是相依性列表來決定那個服務需要先啟用。這是一個複雜
的工作，所以我們不會讓我們的使用者手動完成這項工作。所以我們建立了相關的執行階段
工具和 init 工具方便管理。
</p>

<p>
使用 <c>rc-update</c>，您可以從執行階段新增或是移除 init 程序。<c>rc-update</c>
的工具將自動讓 <c>depscan.sh</c> 程序重新建立相依性資料。
</p>

</body>
</subsection>
<subsection>
<title>新增或是移除服務</title>
<body>

<p>
您已經在安裝 Gentoo 時將 init 程序加入過 "default" 的執行階段了。當時您應該對
"default" 沒有任何了解，但是您現在應該知道了它的意義。<c>rc-update</c> 程序需要
第二個參數來告訴它要執行的動作：<e>add</e>，<e>del</e> 或是 <e>show</e>。
</p>

<p>
要增加或是移除一個 init 程序，只需要在 <c>rc-update</c> 後面放入 <c>add</c> 或是
<c>del</c> 的參數，然後接著就是要加入的 init 程序的名字。舉例來說：
</p>

<pre caption="執行階段移除 Postfix">
# <i>rc-update del postfix default</i>
</pre>

<p>
<c>rc-update show</c> 的指令將會0按照執行順序顯示出所有可能的 init 程序清單：
</p>

<pre caption="顯示 init 程序資料">
# <i>rc-update show</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>設定服務</title>
<subsection>
<title>為什麼需要多餘的設定？</title>
<body>

<p>
Init 程序可以是很複雜的。所以直接編輯 init 程序會讓使用者感到困難。但是要可以
正確的設定這些服務是極為重要的。舉例來說，您或許會想在啟動服務時加入某個參數。
</p>

<p>
第二個原因是為了要讓 init 程序可以更新原始設定檔以外的設定，而不會直接改到重要的
設定檔。
</p>

</body>
</subsection>
<subsection>
<title>/etc/conf.d 目錄</title>
<body>

<p>
Gentoo 提供一個簡單的方法設定相關服務：每個 init 程序都有一個可以設定的設定檔
放在 <path>/etc/conf.d</path>舉例來說， apache2 的 init 程序（叫做
<path>/etc/init.d/apache2</path>）的設定檔會放在 
<path>/etc/conf.d/apache2</path>，這樣可以在啟動 Apache 2 伺服器時加數您需要的參
數：
</p>

<pre caption="/etc/conf.d/apache2 的變數定義">
APACHE2_OPTS="-D PHP4"
</pre>

<p>
這種設定檔包含的變數（就和 <path>/etc/make.conf</path> 類似），是為了要讓服務的
設定更加簡易。它也以註解的方式提供著一些相關的資料和變數用法。
</p>

</body>
</subsection>
</section>
<section>
<title>編寫 Init 程序</title>
<subsection>
<title>我需要嗎？</title>
<body>

<p>
不。Gentoo 提供了這些 init 程序，所以您不需要自己編寫一個。但是，如果您安裝了
非 Portage 提供的服務，那麼您就需要編寫一個類似 init 的程序。
</p>

<p>
如果不是針對 Gentoo 所設計的程序，請不要使用：Gentoo 的 init 程序和其他版本的
init 程序不相容！
</p>

</body>
</subsection>
<subsection>
<title>規劃</title>
<body>

<p>
以下為一個 init 程序的規劃。
</p>

<pre caption="Basic layout of an init script">
#!/sbin/runscript

depend() {
  <comment>（相依性資訊）</comment>
}

start() {
  <comment>（啟動服務的相關指令）</comment>
}

stop() {
  <comment>（停止服務的相關指令）</comment>
}

restart() {
  <comment>（重新啟動服務的相關指令）</comment>
}
</pre>

<p>
任何 init 程序 <e>都需要</e> <c>start()</c> 功能的定義。其他的則是非必需。
</p>

</body>
</subsection>
<subsection>
<title>相依性</title>
<body>

<p>
您總共有兩種相依性可以定義：<c>use</c> 和 <c>need</c>。就如我們之前提到的，
<c>need</c> 的相依性比 <c>use</c> 來的嚴厲。然後使用 <c>virtual</c>
來選擇所依賴的相依性。
</p>

<p>
<e>virtual</e> 是一個提供服務的相依性，但是並不是完全由這個服務提供。您的 init
程序可以依賴著系統記錄器，但是我們提供著許多系統記錄器（metalogd,syslog-ng，
sysklogd，﹍）當您無法 <c>need</c> 所有的（執行全部的系統記錄器並不合理）我們將
確定這些服務可以 <c>提供</c> 一個虛擬相依性。
</p>

<p>
現在讓我們來看看一個 postfix 服務所依賴的相依性。
</p>

<pre caption="Postfix 的相依性">
depend() {
  need net
  use logger dns
  provide mta
}
</pre>

<p>
如擬可見，postfix：
</p>

<ul>
  <li>
    需要所有的（虛擬）<c>net</c> 相依性 （是由 <path>/etc/init.d/net.eth0</path>
    所提供）
  </li>
  <li>
    需要使用（虛擬） <c>logger</c> 相依性（是由 
    <path>/etc/init.d/syslog-ng</path> 提供）
  </li>
  <li>
    需要使用（虛擬） <c>dns</c> 相依性（事由 <path>/etc/init.d/named</path>
    提供）
  </li>
  <li>
    提供（虛擬） <c>mta</c> 相依性（常用的郵件伺服器所需）
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>控制順序</title>
<body>

<p>
在某些情況下您不需要一個服務，如果在系統可以提供的環境下（沒有相依的問題），但是
您想要在這個服務之前 <c>befre（開始）</c> （或是 <c>after（之後）</c> 使用另外一
個服務 <e>然後</e> 放到同一個執行階段（只有同執行階段的服務）。您可以使用
<c>before</c> 或是 <c>after</c> 設定來完成這些設定。
</p>

<p>
我們將查看 Portmap 的設定為範例：
</p>

<pre caption="Portmap 服務的 depend() 功能">
depend() {
  need net
  before inetd
  before xinetd
}
</pre>

<p>
您也可以使用 "*" 來選擇同一個執行階段內所有的服務，但是我們並不建議。
</p>

<pre caption="設定成為第一個同執行階段的 init 程序">
depend() {
  before *
}
</pre>

</body>
</subsection>
<subsection>
<title>符合標準的功能</title>
<body>

<p>
<c>depend()</c> 之後，您將需要定義 <c>start()</c> 的功能。這個將包含著所有相關
啟動服務的指令。我們建議您使用 <c>ebegin</c> 和 <c>eend</c> 功能來通知使用者正在
發生什麼事：
</p>

<pre caption="start() 功能範例">
start() {
  ebegin "Starting my_service"
  start-stop-daemon --start --quiet --exec /path/to/my_service
  eend $?
}
</pre>

<p>
如果您需要更多的 <c>start()</c> 功能的範例，請查看您系統中放在 
<path>/etc/init.d</path> 目錄裡面的 init 程序。關於 <c>start-stop-daemon</c>，
我們有提供著一個很棒的說明頁讓您查閱：
</p>

<pre caption="查詢更多關於start-stop-daemon 的說明頁">
# <i>man start-stop-daemon</i>
</pre>

<p>
其他您可以定義的功能為：<c>stop()</c> 和 <c>restart()</c>。您不一定要定義這些功
能！如果您使用 <c>start-stop-daemon</c>，我們 init 系統將會自動填入這些功能。
</p>

<p> 
Gentoo 的 init script 語法是以 Bourne Again Shell (bash) 為基礎，所以你可以在你
的 init script 中自由使用和 bash 相容的架構。
</p> 

</body>
</subsection>
<subsection>
<title>加入自訂選項</title>
<body>

<p>
如果您想要讓您的 init 程序支援更多我們已經提供的選項，您應該將這些選項加入到
<c>opts</c> 變數，然後建立一個功能將此功能的命名為 opt 變數內所定義的。舉例來說，
要提供一個 <c>restartdely</c> 的功能：
</p>

<pre caption="提供 restartdely 選項">
opts="${opts} restartdelay"

restartdelay() {
  stop
  sleep 3    <comment># 等待三秒才開始</comment>
  start
}
</pre>

</body>
</subsection>
<subsection>
<title>系統設定變數</title>
<body>

<p>
您不需要任何動作來提供一個 <path>/etc/conf.d</path> 的設定檔：如果您的 init 程序
執行了，以下將會自動的載入（例：可用的變數）：
</p>

<ul>
  <li><path>/etc/conf.d/&lt;您的 init 程序&gt;</path></li>
  <li><path>/etc/conf.d/basic</path></li>
  <li><path>/etc/rc.conf</path></li>
</ul>

<p>
另外，如果您的 init 程序需要一個虛擬的相依性（如 <c>net</c>），那麼相關的檔案將
會也會被載入（如 <path>/etc/conf.d/net</path>）。
</p>

</body>
</subsection>
</section>
<section>
<title>更改執行階段（RunLevel）的態度</title>
<subsection>
<title>誰會受益？</title>
<body>

<p>
很多使用手提電腦的使用者將會明白這個狀況：在家裡您需要啟動 <c>net.eth0</c>，在外
面因為沒有網路，所以您不想啟動 <c>net.eth0</c>。因此您可以依照您的需求而改變 
Gentoo 的執行階段。
</p>

<p>
舉例來說，您可以建立第二個 "default" 執行階段來讓您執行其他的起始程序（Init
Scripts）。然後在開機時選擇使用預設的執行階段。
</p>

</body>
</subsection>
<subsection>
<title>使用 softlevel</title>
<body>

<p>
首先，建立第二個 "default" 執行階段。我們將建立 <path>offline</path> 執行階段為
這次的範例：
</p>

<pre caption="建立一個執行階段目錄">
# <i>mkdir /etc/runlevels/offline</i>
</pre>

<p>
然後加入相關的起始程序到剛建立完成的目錄內。舉例來說，如果除了 <c>net.eth0</c> 
以外，您想要將其他 <c>default</c> 執行階段的內容都複製到新的執行階段：
</p>

<pre caption="加入相關起始程序">
<comment>(把所有預設執行階段的服務複製到 offline 執行階段)</comment>
# <i>cd /etc/runlevels/default</i>
# <i>for service in *; do rc-update add $service offline; done</i>
<comment>(將不需要的服務從 offline 執行階段移除)</comment>
# <i>rc-update del net.eth0 offline</i>
<comment>(顯示 offline 執行階段啟動的服務)</comment>
# <i>rc-update show offline</i>
<comment>(部分的輸出)</comment>
acpid | offline 
domainname | offline 
local | offline 
net.eth0 | 														   
</pre>

<p>
現在編輯您的開機程式設定檔然後加入一個新的 <c>offline</c> 執行階段。
舉例來說，在 <path>/boot/grub/grub.conf</path>：
</p>

<pre caption="加入 offline 執行階段">
title Gentoo Linux Offline Usage
  root (hd0,0)
  kernel hd(0,0)/kernel-2.4.25 root=/dev/hda3 <i>softlevel=offline</i>
</pre>

<p>
噹啷！完成了。當您重新啟動系統然後選擇剛加入的選項， <c>offline</c> 將會被執行而
不是本來的 <c>default</c>。
</p>

</body>
</subsection>
<subsection>
<title>使用 bootlevel</title>
<body>

<p>
使用 <c>bootlevel</c> 和 <c>softlevel</c> 的方法完全類似。唯一不一樣的就是您需要
定義另外一個 "boot" 執行階段而不是第二個 "default" 執行階段。
</p>

</body>
</subsection>
</section>
</sections>
