<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/zh_tw/cron-guide.xml,v 1.2 2005/07/26 06:17:50 ccpz Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="cron-guide.xml" lang="zh_tw">
<title>Gentoo Linux Cron 指南</title>

<author title="Author">
  <mail link="airuike@gmail.com">Eric Brown</mail>
</author>
<author title="Editor">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Translator">
  <mail link="ccpz@gentoo.org">YiDa Chiang</mail>
</author>
  
<abstract>
這分指南說明如何設定及使用 cron。
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.0 -->
<license/>

<version>1.4</version>
<date>2005-07-25</date>

<!-- rev 1.5 by ccpz -->

<chapter>
<title>Cron 基礎</title>
<section>
<title>cron 是做什麼用的？</title>
<body>

<p>
Cron 是一個根據 <c>crontab</c> 的輸入資料執行排程程序的服務。他藉由每分鐘啟動，
檢查每個使用者的 crontab 是否有要執行的程序來完成這個功能。
</p>

<note>
要注意的是 <e>crontab</e> 同時是排定程序的列表名稱以及編輯列表時下的指令。
</note>

</body>
</section>
<section>
<title>實際上...</title>
<body>

<p> 
這裡至少有三種你可以從 Portage 中選擇的 cron 實作程式。他們全部都有類似的介面。
都使用叫做 <c>crontab</c> 或相似名稱的指令。除此之外，也有一個相關的工具，叫做
Anacron，可以在沒有持續運行的機器上工作。
</p>

<p>
在我們開始使用 cron 之前，你要先選擇使用那一套實作程式。為了方便起見，在底下有
收集關於他們每一個的資訊。
</p>

</body>
</section>
</chapter>

<chapter>
<title>那一個 cron 適合你？</title>
<section>
<title>Vixie cron</title>
<body>

<p>
Vixie cron 是依據 SysV cron 完整實作的 cron。每個使用者有他自己的 crontab 並且
允許在 crontab 中指定特別的環境變數。和其他 cron 不同的是，他也支援 SELinux 還
有 PAM。他支援的架構少於 Dcron，但是比 Fcron 多。
</p>

<p>
<c>sys-process/vixie-cron</c> 的功能：
</p>

<ul>
<li>
  支援 SELinux
</li>
<li>
  支援 PAM <path>/etc/security/limits.conf</path>
</li>
<li>
  在 crontab 中設定環境變數 (PATH, SHELL, HOME, 等等。)
</li>
<li>
  每個使用者可以有他自己的 crontab，權限是由 cron.allow 及 cron.deny 控管。
</li>
</ul>

</body>
</section>
<section>
<title>Dillon's Cron</title>
<body>

<p>
Dcron 著重在簡單，嚴謹以及安全的 cron 實作。他並不允許在 crontab 指定環境變數，
並且所有的 cron 排程工作是由 <path>/bin/sh</path> 執行。如同 Vixie cron，每個使
用者可以有他們自己的 crontab。
</p>

<p>
<c>sys-process/dcron</c> 的功能：
</p>

<ul>
<li>
  快速，簡單並且沒有不必要的功能。
</li>
<li>
  存取 <c>crontab</c> 的權限僅限 cron 群組，也就是說他不依賴任何外部的功能。
</li>
</ul>

</body>
</section>
<section>
<title>Fcron</title>
<body>

<p>
Fcron 目標是取代 Vixie cron 及 Anacron。他的設計是可以在沒有持續執行的系統工作，
而且包入許多額外的功能，他有程序啟動限制,序列式的程序控制，指定程序優先權的能力
以及在系統啟動時安排執行程序的能力。查看 <uri
link="http://fcron.free.fr/">fcron 首頁</uri>取得更多資訊。
</p>

<p>
<c>sys-process/fcron</c> 的功能：
</p>

<ul>
<li>
  為不是持續運行的系統設計，例如說，如果一個程序忽略掉了在重開機後他會去執行這個程序。
</li>
<li>
  在 crontab 中設定環境變數及許多選項
</li>
<li>
  每個使用者可以有他們自己的 crontab，權限是由 cron.allow 及 cron.deny 控制。
</li>
<li>
  加強的 crontab 語法，支援許多新功能
</li>
</ul>


</body>
</section>

<section>
<title>Anacron</title>
<body>
<p>
Anacron 並不是 cron 服務，有時候和一個 cron 服務結合在一起工作。他依照指定的日期
間格執行指令。這程式並不會假設系統是持續執行，所以會執行系統關機時忽略的工作。
Anacron 通常依賴一個 cron 服務每天執行他。
</p>
</body>

</section>
</chapter>

<chapter>
<title>使用 cron</title>
<section>
<title>安裝</title>
<body>

<p>
選擇你最喜歡的 cron 程式然後安裝他。
</p>

<pre caption="安裝 cron">
# <i>emerge dcron</i>
# <i>rc-update add dcron default</i>
# <i>/etc/init.d/dcron start</i>
</pre>

<p>
額外的，如果你沒有安裝 Fcron，可能也想要安裝 Anacron。
</p>

<pre caption="安裝 anacron">
# <i>emerge anacron</i>
# <i>rc-update add anacron default</i>
# <i>/etc/init.d/anacron start</i>
</pre>

</body>
</section>
<section>
<title>系統 crontab</title>
<body>

<p>
一些 cron 安裝後的訊息告訴你要執行 <c>crontab /etc/crontab</c>。
<path>/etc/crontab</path> 這個檔案是你的 <e>系統 crontab</e>。Gentoo 預設安裝使
用他來執行在 <path>/etc/cron.{daily,hourly,weekly,monthly}</path> 中的 script。
要注意的是 Vixie-cron 自動排程 <path>/etc/crontab</path> 中的程序。Dcron 及
Fcron 使用者需要在他們每次改變 <path>/etc/crontab</path> 後執行
<c>crontab /etc/crontab</c>。
</p>

<p>
注意在系統 crontab 中排程的程序並不會在  <c>crontab -l</c> 的程序列表中顯示。
</p>

<p>
當然，你可以選擇不使用任何系統 crontab。如果你是使用 Dcron 或 Fcron，不要執行
<c>crontab /etc/crontab</c>。假如是 vixie-cron，你要把
<path>/etc/crontab</path> 中的每一行標成註解。
</p>

<pre caption="註解 /etc/crontab 中每一行">
# <i>sed -i -e "s/^/#/" /etc/crontab</i>
</pre>

</body>
</section>
<section>
<title>給予信任的使用者使用 cron 的權限</title>
<body>

<p>
假如你想要 root 以外的使用者使用 cron 服務的權限，你會需要繼續讀下去。否則你可
以跳去下一節 <uri link="#scheduling">排程 cron 要執行的程序</uri>
</p>

<note>
給另一個使用者使用 crontab 的權限並不會讓他以 root 身份執行排程的程序。如果你要
讓使用者可以編輯 root 的 crontab，你應該查詢 <c>sudo</c>。
</note>

<p>
不管你使用什麼 cron 套件，當你想要允許使用者使用 crontab，他首先需要在 cron 群
組中。舉例來說，如果你想要將使用者 <e>wepy</e> 加到 cron 群組，你要執行：
</p>

<pre caption="把使用者加到 cron 群組中">
# <i>gpasswd -a wepy cron</i>
</pre>

<p>
假設你使用 <b>Dcron</b>，這就是你給使用者使用 cron 權限所需的工作了。接著可以繼續看
<uri link="#scheduling">排程 cron 要執行的程序</uri>，其他的話請繼續閱讀下去。
</p>

<p>
如果是使用 <b>Fcron</b>，你要去編輯 <path>/etc/fcron/fcron.deny</path> 和
<path>/etc/fcron/fcron.allow</path>。更安全的方法是先在
<path>/etc/fcron/fcron.deny</path> 中阻擋所有使用者，然後在
<path>/etc/fcron/fcron.allow</path> 中明確指定允許的使用者。
</p>

<impo>
<b>假如 <path>/etc/fcron/fcron.allow</path> 還有
<path>/etc/fcron/fcron.deny</path> 都不存在，所有在 cron 群組的使用者都可以使用
frontab</b>。
fcron 預設的 <path>fcron.allow</path> 是 <b>允許所有在 cron 群組的使用者</b> 使用 fcrontab。
</impo>

<pre caption="fcron.deny 中的設定">
all
</pre>

<p>
現在，假如有一個 <e>wepy</e> 使用者可以排程他自己的 cron 程序，我們依下面的設定
加到 <path>/etc/fcron/fcron.allow</path> 中。
</p>

<pre caption="fcron.allow 中的設定">
wepy
</pre>

<p>
假如你使用 <b>Vixie cron</b>，你只需要編輯 <path>/etc/cron.allow</path>。
</p>

<impo>
相當重要的一點是如果只有 <path>/etc/cron.allow</path> 存在，那只有列在裡面的
cron 群組使用者可以使用，但是如果有一個空白的 <path>/etc/cron.deny</path>，那會
讓所有 cron 群組使用者都可以使用！<b>如果你沒有 <path>/etc/cron.allow</path>，
不要留一個空白的 <path>/etc/cron.deny</path>。</b>
</impo>

<p>
舉個例子，你想要允許 <e>wepy</e> 使用者使用，你需要依照下面把他加到
<path>/etc/cron.allow</path>：
</p>

<pre caption="/etc/cron.allow 中的設定">
wepy
</pre>

</body>
</section>

<section id="Scheduling">
<title>排程 cron 要執行的程序</title>
<body>

<p>
編輯 crontab 的過程隨著套件不同而改變，但是他們都支援基本的指令集：新增，取代，
編輯，刪除還有列出排程程序的指令。下面幾行顯示對於每種套件如何執行這些指令。
</p>

<table>
<tr>
  <th>版本</th>
  <th>編輯</th>
  <th>移除</th>
  <th>新增</th>
  <th>列出</th>
</tr>
<tr>
  <ti>dcron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -d</c></ti>
  <ti><c>crontab <e>file</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
<tr>
  <ti>fcron</ti>
  <ti><c>fcrontab -e</c></ti>
  <ti><c>fcrontab -r</c></ti>
  <ti><c>fcrontab <e>file</e></c></ti>
  <ti><c>fcrontab -l</c></ti>
</tr>
<tr>
  <ti>vixie-cron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -r</c></ti>
  <ti><c>crontab <e>file</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
</table>

<note>
Fcron 也有一個指向 <c>crontab</c> 的符號連結。
</note>

<p>
在我們可以使用這些指令之前，你首先需要了解 crontab。crontab 中每一行需要指定五
個時間欄位，次序如下：分鐘(0-59)，小時(0-23)，日(1-31)，月(1-12)，最後是星期
(0-7，1 是星期一，0 和 7 是星期日)。星期還有月份可以用三個字母的縮寫來表示，如
mon，tue，jan，feb 等等。每個欄位可以指定一段範圍。(像是 1-5 或 mon-fri)，以逗
號分隔的清單(例如 1,2,3 或 mon,tue,wed) 或是一段範圍加上<e>間格</e> (譬如說
1-6/2 代表 1，3，5)。
</p>

<p>
這些聽起來有一點讓人困惑，看是看過幾個範例後，你會了解這並不會像聽起來這麼複雜。
</p>

<pre caption="Examples">
<comment># 全年每分鐘執行 /bin/false</comment>
*     *     *     *     *        /bin/false  

<comment># 在每個月的四號及星期一，二，三的 1:35 執行 /bin/false</comment>
35    1     4     *     mon-wed  /bin/false

<comment># 在四月二日 22:25 執行 /bin/true</comment>
25    22    2     3     *        /bin/true

<comment># 每個星期一，三，五的 2:00 執行 /bin/false</comment>
0     2     *     *     1-5/2    /bin/false
</pre>

<note>
注意如何合併星期幾和幾號。如果只有一個有 * ，那另一個有優先權。而兩個都 * 代表
每天。
</note>

<p>
來測測我們剛學的，依照上面的步驟真的放幾個排程的程序進去。首先，建立一個叫
<path>crons.cron</path> 的檔案，內容看起來像這樣：
</p>

<pre caption="編輯 crons.cron">
$ <i>nano crons.cron</i>
<comment>#Mins  Hours  Days   Months  Day of the week</comment>
10     3      1      1       *       /bin/echo "i don't really like cron"
30     16     *      1,2     *       /bin/echo "i like cron a little"
*      *      *      1-12/2  *       /bin/echo "i really like cron"
</pre>

<p>
現在我們用上面表格中的 "新增指令" 把這個 crontab 加到系統中。
</p>

<pre caption="新的 crontab">
# <i>crontab crons.cron</i>
</pre>

<note>
除非你把他們的輸出轉向，你不會實際看到這些 echo 指令的輸出。
</note>

<p>
要檢查你排程的程序，我們使用表格中適當的 <e>列出指令</e>。
</p>

<pre caption="列出程序">
# <i>crontab -l</i>
</pre>

<p>
你應該會看到類似 <path>crons.cron</path> 的輸出，如果沒有的話，或許你在輸入新的
crontab 時輸入錯誤的指令。
</p>

<p>
這個 crontab 會每隔一個月的每一天每分每秒顯示 "i really like cron"。明顯的除非
你超級喜歡 cron 你才會幹這種事。crontab 也會在一月及二月每天 16:30 顯示
"i like cron a little"。並且在一月一日 3:10 秀出 "i don't really like cron"。
</p>

<p>
假如你使用 Anacron，你要繼續閱讀這一節。否則你可以跳到下一節
<uri link="#editing">編輯 crontabs</uri>。
</p>

<p>
Anacron 使用者要去編輯 <path>/etc/anacrontab</path>。這個檔案有四個欄位：每次執
行間格幾天，Anacron 啟動後延遲多久執行，程序的名稱，要執行的指令。
</p>

<p>
舉例來說，要每隔五天，Anacron 啟動 10 分鐘後執行 <c>echo "i like anacron"</c>，
你要輸入：
</p>

<pre caption="/etc/anacrontab">
5 10 wasting-time /bin/echo "i like anacron"
</pre>

<p>
Anacron 在所有程序都完成後結束，所以如果我們要讓他每天檢查，會需要用 cron。下一
節最後面的指南會告訴你如何做。
</p>

</body>
</section>
<section id="editing">
<title>編輯 crontabs</title>
<body>

<p>
現在該醒醒了，你並不會想要系統每分鐘告訴你你多喜歡 cron。接下來我們要做的是，依
照上面的表格使用相對應的 <e>移除指令</e> 來移除 crontab。接著我們也會列出目前的
cron 程序，只是要確定這指令正常工作。
</p>

<pre caption="移除 crontab">
# <i>crontab -d</i>
# <i>crontab -l</i>
</pre>

<p>
你應該會在 <c>crontab -l</c> 的輸出中看到連一個 cron 程序都沒有。如果你的確看到
上面還有程序的話，這代表說移除失敗了，你要去確定你是否使用適合你 cron 套件的
<e>移除指令</e>。
</p>

<p>
現在有一個空白的時間表，來放一些有用的東西到 <b>root</b> 的 crontab。大部分的人
會每個禮拜跑一次 <c>updatedb</c> 讓 <c>slocate</c> 正常工作。要把這放到 crontab，
先編輯 <path>crons.cron</path> 讓他看起來像這樣：
</p>

<pre caption="一個真實的 crontab">
22 2 * * 1    /usr/bin/updatedb
</pre>

<p>
這會讓 cron 在每個禮拜一的早上 2:22 執行 updatedb。你現在要依上面的表執行合適的
<e>新增指令</e>，然後再檢查列表。
</p>

<pre caption="列出 cron 程序">
# <i>crontab crons.cron</i>
# <i>crontab -l</i>
</pre>

<p>
假設說你想要在日行程中增加 <c>emerge --sync</c>。你可以先編輯
<path>crons.cron</path>，然後就如同之前說的，輸入 <c>crontab crons.cron</c>。或
者用合適的 <e>編輯指令</e>。這讓你可以在原來的檔案編輯使用者的 crontab，而不用
透過像是 <path>crons.cron</path> 的外部檔案。
</p>

<pre caption="原地編輯 crontab">
# <i>crontab -e</i>
</pre>

<p>
這會用一個編輯器開啟使用者的 crontab。我們想要每天 6:30 A.M. 執行 <c>emerge
--sync</c>，所以看起來像這樣：
</p>

<pre caption="真實的 crontab">
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
<comment>(如果你使用 anacron，加上這行)</comment>
30 7 * * * 	  /usr/sbin/anacron -s
</pre>

<p>
再一次，如我們之前做的，檢查 cron 程序列表倔定程序排程好了。如果都顯示再上面，
那全部都完成了。
</p>

</body>
</section>
</chapter>

<chapter>
<title>最後的提醒</title>
<section>
<title>排困解難</title>
<body>

<p>
假如你碰到一些問題讓 cron 不能正常工作，你或許想要走一次快速檢查清單。
</p>

<ul>
<li>
  <b>cron 在執行嗎？</b><br/>
  執行 <c>ps ax | grep cron</c>，確定有顯示出來！
</li>
<li>
  <b>cron 有正常工作嗎？</b><br/>
  試試： * * * * * /bin/echo "foobar" &gt;&gt; /file_you_own ，然後確定他有在工作。
</li>
<li>
  <b>你的指令有在執行嗎？</b><br/>
  試試： * * * * * /bin/foobar &gt; /file_you_own 2&gt;&amp;1，在 /file_you_own
  中尋找錯誤
</li>
<li>
  <b>cron 有執行你的程序嗎？</b><br/>
  檢查 cron 紀錄檔找出錯誤，通常在 <path>/var/log/cron.log</path> 或
  <path>/var/log/messages</path>。
</li>
<li>
  <b>出現了 dead.letter？</b><br/>
    cron 通常會在有問題時寄給你一封信，檢查你的信箱並且尋找 ~/dead.letter。
</li>
</ul>

<p>
記得，每一種 cron 套件都不同而且功能的差別也很大。記得依你用的套件，查詢
crontab，fcrontab，anacrontab 的手冊頁。
</p>

<p>
祝你好運！
</p>

</body>
</section>
</chapter>

</guide>
