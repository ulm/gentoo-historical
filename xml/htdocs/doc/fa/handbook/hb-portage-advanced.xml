<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fa/handbook/hb-portage-advanced.xml,v 1.1 2013/02/23 19:45:01 swift Exp $ -->

<sections>

<abstract>
همچنانکه زمان به پیش می‌رود، پرتیج کاملتر و رشدیافته‌تر می‌گردد. خصوصیت‌های جدید مرتب در حال افزوده شدن به آن هستند - بسیاری از آنها تنها برای استفاده کاربران پیشرفته‌تر هستند. این بخش وارد جزئیات بیشتر این خصوصیت‌ها می‌شود.
</abstract>

<version>5</version>
<date>2012-10-06</date>

<section>
<title>مقدمه</title>
<body>

<p>
برای بیشتر کاربران، اطلاعات رسیده تا اینجا برای کار با همه عملگرهای لینوکسشان کافی است. اما پرتیج بیش از این توانمند است; بسیاری از خصوصیت‌های آن برای کاربران پیش رفته است یا تنها در موردهای خاص توانمند هستند. هنوز نمی‌توان از مستندسازی آنها چشم پوشی نمود. 
</p>

<p>
البته، با بسیاری از انعطاف‌پذیری‌ها فهرست بزرگی از پتانسیل‌های موردی هم می‌آیند. امکان اینکه همه آنها را در اینجا مستند نماییم وجود ندارد. بجای آن، انتظار داریم بروی برخی پی‌آمدهای عمومی که می‌توانید از آنها برای درست نمودن اشکال‌های خود از آنها استفاده نمایید، تمرکز نماییم. اگر نیاز به نکته‌ها و ترفندهای بیشتری دارید، بجای این ممکن است آنها را در <uri link="https://wiki.gentoo.org">ویکی جنتو</uri> بیابید.
</p>

<p>
بیشتر، اگر این خصوصیت‌ها در کنکاش در صفحه‌های راهنمای فراهم آورده شده توسط پرتیج یافت نگردیدند: 
</p>

<pre caption="Reading up on portage man pages">
$ <i>man portage</i>
$ <i>man make.conf</i>
</pre>

<p>
سرانجام، بدانید این راهنمای خصوصیت‌های پیشرفته‌ائی است که، اگر بدقت کار نکرد، بسختی می‌توان آنها را ایرادیابی و اشکال‌زدائی نمود. اگر می‌خواهید یک ایراد اعلام نمایید یا گزارش یک ایراد بدهید نخست از آن مطمئن شوید. 
</p>

</body>
</section>

<section>
<title>متغییرهای محیطی بسته‌های پیش‌ساخته</title>
<subsection>
<title>استفاده کردن از /etc/portage/env</title>
<body>

<p>
بشکل پیش فرض، بسته‌های ساخته شده از متغییرهای محیطی تعریف شده در <path>/etc/portage/make.conf</path> استفاده می‌کنند، مانند <c>CFLAGS</c> ، <c>MAKEOPTS</c> و بیشتر. در گاهی زمان‌ها، ممکن است بخواهید برای بسته‌های خاصی متغییرهای متفاوتی فراهم آورید. برای چنین کاری پرتیج از <path>/etc/portage/env</path> و <path>/etc/portage/package.env</path> پشتیبانی می نماید.
</p>

<p>
فایل <path>/etc/portage/package.env</path> حاوی فهرستی از بسته‌هائی است که با استفاده از شناساگر متغییرهای تحریف شده باید کار نمایند که بخوبی به پرتیج تغییراتی را که شما می‌خواهید اعلام می‌نماید. نام شناساگر را که خودتان انتخاب می‌نمایید، پرتیج به متغییرهای موجود در <path>/etc/portage/env/&lt;identifier&gt;</path> نگاه می‌نماید.
</p>

</body>
</subsection>
<subsection>
<title>نمونه: استفاده کردن از ایرادیابی برای بسته‌های خاص</title>
<body>

<p>
برای نمونه، ما ایرادیابی برای بسته <path>media-video/mplayer</path> را فعال می‌نماییم.
</p>

<p>
ابتدا، متغییرهای ایرادیابی در فایلی به نام <path>/etc/portage/env/debug-cflags</path> را تنظیم می‌نماییم. نام فایل کاملا انتخابی است، البته اشتباه در نشانگذاری آن می‌تواند دلیل انحراف واکنش‌های پس از این باشد. 
</p>

<pre caption="/etc/portage/env/debug-cflags content">
CFLAGS="-O2 -ggdb -pipe"
FEATURES="${FEATURES} nostrip"
</pre>

<p>
سپس، بسته <path>media-video/mplayer</path> را با استفاده از این مفهوم تگ می‌نماییم:
</p>

<pre caption="/etc/portage/package.env content">
media-video/mplayer debug-cflags
</pre>

</body>
</subsection>
</section>

<section>
<title>چنگک‌زنی در روش امرژ نمودن</title>
<subsection>
<title>استفاده نمودن از /etc/portage/bashrc و مربوط نمودن فایل‌ها</title>
<body>

<p>
هنگامیکه پرتیج با ائی‌بیلدها کار می‌نماید، از یک محیط bash که به آن تابع‌های سازه‌های گوناگون گفته می شود استفاده می‌نماید ( مانند src_prepare, src_configure, pkg_postinst, و دیگر از آن). اما پرتیج همچنین به شما امکان می‌دهد تا محیط bash را برای خودتان برپا نمایید.
</p>

<p>
مزیت استفاده نمودن از محیط bash خودتان آن است که هر مرحله‌ائی را که در هنگام امرژ نمودن اجرا می‌گردد را چنگک نمایید. اینکار می‌تواند برای هربار امرژ انجام گردد (در سراسر <path>/etc/portage/bashrc</path> ) یا بوسیله استفاده نمودن از محیط‌های  ( در سراسر <path>/etc/portage/env</path> که پیشتر گفته شد).
</p>

<p>
برای چنگک‌زنی در جریان عمل، محیط bash می‌تواند به متغییرهای <c>EBUILD_PHASE</c> ، <c>CATEGORY</c> به خوبی متغییرهائی که گسترش‌دهندگان ائی‌بیلدها همیشه استفاده می نمایند (مانند <c>P</c> ، <c>PF</c> ، ...) گوش‌فرا دهد. پس از آن بر اساس این متغییرها، می تواند گام‌های بعدی را اجرا نمایید.
</p>

</body>
</subsection>
<subsection>
<title>نمونه: بروزرسانی پایگاه‌‌داده</title>
<body>

<p>
در این نمونه، ما از <path>/etc/portage/bashrc</path> برای فراخوانی برخی فایل‌ برنامه‌های پایگاه‌داده استفاده می‌نماییم تا اطمینان بیابیم که پایگاه‌داده با کمک دستگاه بروزرسانی می‌گردد. برنامه‌های استفاده شده در نمونه در <c>aide</c> هستند (یک ابزار مرتبط ساز ساختار) و <c>updatedb</c> (برای استفاده با <c>locate</c> )، اما این تنها یک نمونه است. به عنوان یک روش گام‌به‌گام استفاده ننمایید ;-)
</p>

<p>
برای استفاده از <path>/etc/portage/bashrc</path> برای این مورد، لازم است تا در تابع‌های <c>postrm</c> چنگک نماییم (پس از پاک‌سازی فایل‌ها) و <c>postinst</c> (پس از نصب فایل‌ها)، در هنگامیکه دستگاه فایل تغییر می‌یابد. 
</p>

<pre caption="Example /etc/portage/bashrc">
if [ "${EBUILD_PHASE}" == "postinst"] || [ "${EBUILD_PHASE}" == "postrm" ];
then
  echo ":: Calling aide --update to update its database";
  aide --update;
  echo ":: Calling updatedb to update its database";
  updatedb;
fi
</pre>

</body>
</subsection>
</section>

<section>
<title>اجرا نمودن کارها پس از --sync</title>
<subsection>
<title>موقعیت /etc/portage/postsync.d</title>
<body>

<p>
تا این هنگام درباره چنگک‌زنی صحبت می‌نمودیم. هرچند، پرتیج تابع مهم دیگری هم دارد: بروز رسانی شاخه پرتیج. در درخواست اجرای کارها پس از بروز رسانی شاخه پرتیج، کدی درون <path>/etc/portage/postsync.d</path> قرار دهید و مطمئن شوید به شکل قابل اجرا برچسب بخورد.
</p>

</body>
</subsection>
<subsection>
<title>نمونه: اجرا نمودن eix-update</title>
<body>

<p>
اگر از <c>eix-sync</c> برای بروز رسانی شاخه استفاده ننمایید، هنوز می‌توانید بوسیله قرار دادن یک میانبر در <path>/usr/bin/eix</path> که به آن <path>eix-update</path> گفته می‌شود در <path>/etc/portage/postsync.d</path> پایگاه‌داده را پس از اجرا نمودن <c>emerge --sync</c> (یا <c>emerge-webrsync</c> ) بروز نگاه‌دارید. 
</p>

<pre caption="Running eix-update after a sync operation">
# <i>ln -s /usr/bin/eix /etc/portage/postsync.d/eix-update</i>
</pre>

<note>
اگر از نام دیگری استفاده می‌نمایید، لازم دارید تا بجای آن کدی به نام <c>/usr/bin/eix-update</c> بسازید. باینری <c>eix</c> به آن نگاه می‌نماید تا بیابد کدام تابع را اجرا نماید. اگر میانبری در <c>eix</c> که به آن <c>eix-update</c> گفته می‌شود قرار ندهید، بخوبی اجرا نخواهد گردید.
</note>

</body>
</subsection>
</section>

<section>
<title>تنظیم‌های برجسته پروفایل</title>
<subsection>
<title>موقعیت /etc/portage/profile</title>
<body>

<p>
بشکل پیش‌فرض، جنتو از تنظیم‌هائی که در <path>/etc/portage/make.profile</path> آمده (که یک میانبر به دایرکتوری پروفایل درست است) استفاده می‌نماید. این پروفایل‌ها همه تنظیم‌های مشخص شده را بخوبی تنظیم‌های جانشین شده از دیگر پروفایل‌ها (در سراسر فایل <path>parent</path> شان) تعریف می‌نماید.
</p>

<p>
با استفاده از <path>/etc/portage/profile</path>، می‌توانید تنظیم‌های برجسته مانند <path>packages</path> (چه بسته‌هائی برای بخشی از تنظیم‌های دستگاه مطرح شده)، اجبار برای استفاده از پرچمک‌ها و بیش از آن را انجام دهید.
</p>

</body>
</subsection>
<subsection>
<title>نمونه: افزودن nfs-utils به تنظیم دستگاه</title>
<body>

<p>
اگر از فایل‌های سیستمی بر اساس NFS برای بیشتر فایل سیستم‌های بحرانی استفاده می‌نمایید، ممکن است بخواهید <path>net-fs/nfs-utils</path> را حفاظت شده به عنوان یک بسته سیستمی داشته باشید، که سبب می شود پرتیج اگر پاک شد بشدت به شما اخطار دهد. 
</p>

<p>
برای انجام دادن آن، ما بسته را به <path>/etc/portage/profile/packages</path> ، با توجه به یک <c>*</c> می‌افزاییم:
</p>

<pre caption="/etc/portage/profile/packages content">
*net-fs/nfs-utils
</pre>

</body>
</subsection>
</section>

<section>
<title>بکاربستن وصله‌های غیر استاندارد</title>
<subsection>
<title>استفاده نمودن از epatch_user</title>
<body>

<p>
برای مدیریت چندین ائی‌بیلد در یک روش مشابه، گسترش‌دهندگان ائی‌بیلدها از <e>eclasses</e> (که فهرست مرتبی از کتابخانه‌های شل است) استفاده می‌نمایند که تابع‌های عمومی مورد استفاده را تعریف می‌نماید. یکی از این کلاس‌های الکترونیکی <path>eutils.eclass</path> است که تابع جذابی که <c>epatch_user</c> نامیده می‌شود را ارائه می‌دهد.
</p>

<p>
تابع <c>epatch_user</c> هرآنچه از وصله‌های کد منبع را که در دایرکتوری موجود باشد فراهم می‌آورد که در <path>/etc/portage/patches/&lt;category&gt;/&lt;package&gt;[-&lt;version&gt;[-&lt;revision&gt;]]</path> یافت می‌شوند، متاسفانه، همه ائی‌بیلدها بطور خودکار این تابع را فراخوانی نمی‌نمایند بنابر این قرار دادن وصله‌تان در این موقعیت ممکن است همیشه کار نکند.
</p>

<p>
خوشبختانه، با اطلاعات فراهم آمده در بالا، می توانید این تابع را بوسیله چنگک‌زنی به آن فراخوانی نمایید، برای نمونه، فاز <c>prepare</c> . تابع می‌تواند به هر تعداد بار که شما دوست داشته باشید فراخوانی گردد - این تنها یک‌بار وصله‌ها را فراهم می‌آورد.
</p>

</body>
</subsection>
<subsection>
<title>نمونه: فراهم آوردن وصله به فایرفاکس</title>
<body>

<p> 
بسته <path>www-client/firefox</path> یکی از معدود بسته‌هائی است که در حال حاضر <c>epatch_user</c> را از درون ائی‌بیلد فراخوانی می‌نماید، بنابر این لازم نیست تا چیزی را بشکل مشخص برجسته نمایید.
</p>

<p>
اگر می‌خواهید فایرفاکس را وصله نمایید (برای نمونه چراکه یک گسترش‌دهنده یک وصله فراهم آورده و از شما خواسته تا آنرا بررسی نمایید تا ایرادی که گزارش نموده‌اید را برطرف نماید)، وصله را در <path>/etc/portage/patches/www-client/firefox</path> قرار دهید (بهترین راه استفاده از نام کامل آن است، شامل نسخه تا وصله با نسخه‌های واپسین درگیر نشود) و فایرفاکس را دوباره سازی نمایید.
</p>

</body>
</subsection>
</section>

</sections>
