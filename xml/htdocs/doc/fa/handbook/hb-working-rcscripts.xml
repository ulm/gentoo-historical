<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fa/handbook/hb-working-rcscripts.xml,v 1.1 2013/01/20 17:21:27 swift Exp $ -->

<sections>

<abstract>
جنتو از یک فرمت کدنوشته درونی خاص که از جمله دیگر خصوصیات، امکان تصمیم برای راندن-وابستگی و کدنوشته های مجازی، استفاده می نماید. این فصل همه این جنبه ها و نحوه سروکار داشتن با این کدها را تشریح می نماید. 
</abstract>

<version>7</version>
<date>2012-10-31</date>

<section>
<title>مرحله های اجرا</title>
<subsection>
<title>راه اندازی نمودن دستگاه شما</title>
<body>

<p>
هنگامیکه دستگاهتان را راه اندازی می نمایید، متوجه می‌شوید که مقدار زیادی نوشته شروع به بالا رفتن می نمایند. اگر دقت بیشتری بخرج دهید متوجه خواهید شد که این متن ها هرگاه شما دستگاه را راه اندازی مجدد می نمایید، به نظر می آیند. به دنباله همه این فعالیت‌ها، <e>boot sequence</e> گفته می‌شود و (کم و بیش) به شکل ثابتی تعریف می گردند. 
</p>

<p>
ابتدا راه انداز دستگاهتان تصویر کرنلی را که در پیکربندی راه انداز تعریف نموده‌اید را در حافظه لود می نماید و پس از آن این تصویر به CPU می‌گوید که کرنل را لود نماید. هنگامیکه کرنل لود گردید و اجرا شد، شروع به ارزش آغازین دادن به ساختارهای خصوصیات-کرنل و وظیفه ها می نماید و مرحله <c>init</c> آغاز می شود. 
</p>

<p>
این پردازش پس از آن مطمئن می‌شود که همه فایل سیستم‌ها (که در <path>/etc/fstab</path> تعریف شده اند) مانت شوند و برای استفاده آماده گردند. پس از آن تعدادی کد را که در <path>/etc/init.d</path> قرار دارند را اجرا می نماید، که خدماتی را آغاز می نمایند که برای راه اندازی موفق دستگاهتان به آن‌ها نیاز دارید. 
</p>

<p>
سر انجام هنگامی که همه این کدها اجرا گردیدند، <c>init</c> ترمینال ها را با چسباندن مرحله ائی به آن‌ها که <c>agetty</c> نامیده می شود، راه اندازی می نماید (در بیشتر موارد کنسول های مجازی را که در پشت <c>Alt-F1</c> و <c>Alt-F2</c> و غیره پنهان گردیده اند). این پردازش پس از آن مطمئن می‌شود که شما قادر به ورود توسط این ترمینالها بوسیله اجرای <c>login</c> خواهید بود. 
</p>

</body>
</subsection>
<subsection>
<title>Init کدها</title>
<body>

<p>
اکنون <c>init</c> تنها به اجرا اتفاقی کدهای موجود در <path>/etc/init.d</path> نمی پردازد. حتی بیشتر، آن همه کدهای داخل <path>/etc/init.d</path> را اجرا نمی نماید، بلکه تنها کدهائی را که به آن گفته شده را اجرا می نماید. آن با نگاه کردن به درون <path>/etc/runlevels</path> تصمیم می‌گیرد که چه کدهائی باید اجرا گردند. 
</p>

<p> 
ابتدا <c>init</c> همه کدهای <path>/etc/init.d</path> را که میانبری در <path>/etc/runlevels/boot</path> دارند را اجرا می نماید. معمولاً شروع به اجرای برنامه‌ها به ترتیب الف باء نام آن‌ها می نماید اما برخی کدها اطلاعات پیش نیازهائی را در خود دارند که به دستگاه می‌گویند که کد دیگری پیش از اجرای آن‌ها باید اجرا گردد تا آن‌ها بتوانند آغاز شوند. 
</p>

<p>
هنگامیکه همه کدهای ارجاع داده شده در <path>/etc/runlevels/boot</path> اجرا گردیدند، <c>init</c> با اجرا نمودن کدهائی که در <path>/etc/runlevels/default</path> میانبری از آن‌ها وجود دارد، ادامه می دهد. مجدداً از ترتیب الف باء در نام آن‌ها استفاده می نماید، تا اینکه کدی اطلاعاتی درباره پیش نیازهائی در خود داشته باشد، که در این موردها برای ایجاد یک توالی تأیید شده آغاز روش را تغییر می دهد. 
</p>

</body>
</subsection>
<subsection>
<title>Init چگونه کار می‌کند</title>
<body>

<p>
البته <c>init</c> همه این تصمیم ها را خودش نمی گیرد. نیاز به فایل پیکربندی دارد که مشخص نماید چه فعالیت هائی باید اعمال شود. این فایل پیکربندی <path>/etc/inittab</path> است. 
</p>

<p>
اگر ترتیب راه اندازی را بخاطر داشته باشید، بخاطر دارید که اولین فعالیت <c>init</c> مانت نمودن همه فایل سیستم‌ها بود. این در خطی که در زیر به آن اشاره شده در <path>/etc/inittab</path> قرار دارد: 
</p>

<pre caption="The system initialisation line in /etc/inittab">
si::sysinit:/sbin/rc sysinit
</pre>

<p>.
این خط به <c>init</c> می‌گوید که باید <c>/sbin/rc sysinit</c> را برای ارزش آغازین دادن به دستگاه اجرا نماید. کد <path>/sbin/rc</path> مراقب ارزش آغازین دادن هست، بنابر این ممکن است شما بگویید <c>init</c> کار بیشتری انجام نمی دهد-این وظیفه به مرحله دیگری ارجاع داده می شود. 
</p>

<p>
دوم، <c>init</c> شروع به اجرا همه کدهائی که میانبری در <path>/etc/runlevels/boot</path> دارند می نماید. این در خط زیر تعریف می شود: 
</p>

<pre caption="The system initialisation, continued">
rc::bootwait:/sbin/rc boot
</pre>

<p>
دوباره کد <c>rc</c> وظایف لازم را انجام می دهد. توجه داشته باشید که انتخاب های داده شده به <c>rc</c> (<e>راه اندازی</e>) مشابه زیردایرکتوری است که <path>/etc/runlevels</path> استفاده می نماید. 
</p>

<p>
اکنون <c>init</c> فایل پیکربندی آن‌ها را برای دیدن اینکه چه <e>runlevel</e> باید اجرا شود، بررسی می نماید. برای تصمیم گیری برای اینکار، خط زیر را در <path>/etc/inittab</path> می خواند: 
</p>

<pre caption="The initdefault line">
id:3:initdefault:
</pre>

<p>
در این مورد (که بیشتر کاربران جنتو از آن استفاده خواهند نمود)، نشانگر <e>runlevel</e> ۳ است. با استفاده از این اطلاعات، <c>init</c> بررسی می نماید که چه چیزی باید برای آغاز به کار <e>runlevel 3</e> ، اجرا شود: 
</p>

<pre caption="The runlevel definitions">
l0:0:wait:/sbin/rc shutdown
l1:S1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
</pre>

<p>
خطی که مرحله ۳ را تعریف می نماید، دوباره از کد <c>rc</c> برای شروع خدمات (اکنون با آرگومنت های <e>default</e>) استفاده می نماید. دوباره توجه داشته باشید که آرگومنت های <c>rc</c> مشابه آرگومنت های زیردایرکتوری <path>/etc/runlevels</path> هستند. 
</p>

<p>
هنگامیکه <c>rc</c> به پایان رسید، <c>init</c> تصمیم می‌گیرد کدام کنسول مجازی باید فعال شود و چه دستوری باید در هر کنسول اجرا گردد: 
</p>

<pre caption="The virtual consoles definition">
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
</pre>


</body>
</subsection>
<subsection>
<title>یک مرحله اجرا چیست؟</title>
<body>

<p>
دارید می‌بینید که <c>init</c> از یک نمایه شماره بندی برای تصمیم درباره اینکه کدام <e>runlevel</e> باید فعال شود، استفاده می نماید. یک <e>runlevel</e> قسمتی است که دستگاه شما اجرا می نماید و شامل مجموعه ائی از کدها است (کدهای مرحله اجرا یا <e>initscripts</e> ) که باید در زمانی که شما به یک مرحله اجرا وارد یا خارج می شوید، اجرا گردند. 
</p>

<p>
در جنتو هفت مرحله اجرا تعریف گردیده اند: سه مرحله اجرای داخلی. به این سه مرحله اجرای داخلی <e>sysinit</e> و <e>shutdown</e> و <e>reboot</e> گفته می‌شود و واقعاً همان چیزی را که نام آن‌ها بر آن دلالت می نماید را انجام می دهند: ارزش آغازی دادن به دستگاه، قطع نمودن برق و راه اندازی دوباره دستگاه. 
</p>

<p>
مرحله اجراهای تعریف شده توسط کاربر آنهائی هستند که یک همراه در زیردایرکتوری <path>/etc/runlevels</path> دارند: <path>boot</path>, <path>default</path>, <path>nonetwork</path> و <path>single</path>. مرحله اجرای <path>boot</path> همه خدمات ضروری دستگاه که مورد استفاده همه مرحله اجراهای دیگر قرار می‌گیرند را راه اندای می نماید. سه مرحله اجرای باقی‌مانده در خدماتی که آن‌ها را راه اندازی می نمایند با هم متفاوت هستند: <path>default</path> برای مدیریت روز به روز استفاده می شود، <path>nonetwork</path> در مواردی که وجود یک شبکه مورد نیاز نیست استفاده می‌شود و <path>single</path> هنگامیکه می‌خواهید دستگاه را تعمیر نمایید مورد استفاده قرار می گیرد. 
</p>

</body>
</subsection>
<subsection>
<title>کارکردن با Init Scripts</title>
<body>

<p>
کدهائی که فرایند <c>rc</c> آن‌ها را راه اندازی می نماید <e>init scripts</e> نامیده می شوند. هر کد در <path>/etc/init.d</path> می‌تواند بوسیله آرگومنت های start, stop, restart, pause,<e>start</e>, <e>stop</e>, <e>restart</e>, <e>pause</e>, <e>zap</e>,
<e>status</e>, <e>ineed</e>, <e>iuse</e>, <e>needsme</e>, <e>usesme</e> یا
<e>broken</e> اجرا گردد. 
</p>

<p>
برای راه اندازی، توقف یا راه اندازی دوباره یک خدمت (و همه خدمات وابسته به آن)، آرگومنت های <c>start</c>, <c>stop</c> و <c>restart</c> باید استفاده گردند: 
</p>

<pre caption="Starting Postfix">
# <i>/etc/init.d/postfix start</i>
</pre>

<note>
فقط خدماتی که به خدمات دادن <e>نیاز</e> دارند متوقف یا راه اندازی دوباره می شوند. دیگر خدمات پیش نیاز (آن‌ها که از خدمات <e>استفاده می نمایند</e> اما به آن نیاز ندارند) دست نخورده باقی می مانند. 
</note>

<p>
اگر می‌خواهید یک خدمت را متوقف نمایید، اما نه خدماتی را که به آن وابسته هستند، می‌توانید از آرگومنت <c>pause</c> استفاده نمایید: 
</p>

<pre caption="Stopping Postfix but keep the depending services running">
# <i>/etc/init.d/postfix pause</i>
</pre>

<p>
اگر می‌خواهید ببینید یک خدمت چه وضعیتی دارد (راه اندازی، توقف، توقف موقت …) می‌توانید از آرگومنت <c>status</c> استفاده نمایید: 
</p>

<pre caption="Status information for postfix">
# <i>/etc/init.d/postfix status</i>
</pre>

<p>
اگر اطلاعات وضعیت به شما گفت که خدمتی در حال اجرا است، اما شما می‌دانید که نیست، می‌توانید اطلاعات وضعیت را برای توقف آن با استفاده از آرگومنت <c>zap</c> تنظیم مجدد نمایید: 
</p>

<pre caption="Resetting status information for postfix">
# <i>/etc/init.d/postfix zap</i>
</pre>

<p>
برای اینکه بپرسید هر خدمتی چه پیش نیازهائی دارد، می‌توانید از <c>iuse</c> یا <c>ineed</c> استفاده نمایید. با <c>ineed</c> می‌توانید خدماتی را که واقعاً مورد نیاز کارکردن دقیق و خدمات دیگر هستند را ببینید. در سمت دیگر <c>iuse</c> خدماتی را نشان می‌دهد که می‌توانند توسط خدمات استفاده شوند، اما برای کارکردن دقیق مورد نیاز نیستند. 
</p>

<pre caption="Requesting a list of all necessary services on which Postfix depends">
# <i>/etc/init.d/postfix ineed</i>
</pre>

<p>
مشابها می توانید درباره خدمات مورد نیاز خدمت (<c>needsme</c>) یا خدماتی که می‌تواند استفاده نماید (<c>usesme</c>) بپرسید: 
</p>

<pre caption="Requesting a list of all services that require Postfix">
# <i>/etc/init.d/postfix needsme</i>
</pre>

<p>
در نهایت می‌توانید درباره پیش نیازهائی که خدمت به آن‌ها نیاز دارد و وجود ندارند بپرسید: 
</p>

<pre caption="Requesting a list of missing dependencies for Postfix">
# <i>/etc/init.d/postfix broken</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>کارکردن با rc-update</title>
<subsection>
<title>rc-update چیست؟</title>
<body>

<p>
دستگاه init جنتو از یک شاخه-پیش نیازها استفاده می نماید تا تصمیم بگیرد چه خدمتی باید در ابتدای همه آغاز گردد. از آنجا که این کاری خسته‌کننده است که ما نمی‌خواهیم کاربرانمان آنرا به شکل دستی انجام دهند، ابزارهائی ایجاد نموده ایم که بسادگی مراحل اجرا و کدهای init را مدیریت می نمایند.
</p>

<p>
با <c>rc-update</c> می‌توانید یک کد init را به مرحله اجرا افزوده یا از آن پاک نمایید. پس از آن ابزار <c>rc-update</c> به شکل خودکار از کد <c>depscan.sh</c> می‌خواهد تا شاخه-پیش نیازها را دوباره بازسازی نماید. 
</p>

</body>
</subsection>
<subsection>
<title>اضافه کردن و پاک کردن خدمات</title>
<body>

<p>
هم‌اکنون نیز درهنگامه مراحل نصب شما کدهای init را به مرحله اجرای "default" افزوده اید. در آن هنگام شما هیچ سرنخی درباره اینکه "default" چه چیزی است نداشتید اما اکنون باید داشته باشید. کد <c>rc-update</c> به آرگومنت دومی هم نیاز دارد که فعالیت را تعریف نماید: <e>add</e>، <e>del</e>یا <e>show</e> دادن. 
</p>

<p>
برای افزودن یا پاک نمودن یک کد init در پی یک کد init و یک مرحله اجرا فقط به <c>rc-update</c> آرگومنت <c>add</c> یا <c>del</c> بدهید. برای مثال: 
</p>

<pre caption="Removing Postfix from the default runlevel">
# <i>rc-update del postfix default</i>
</pre>

<p>
دستور <c>rc-update -v show</c> همه کدهای init و فهرستی از مرحله اجراهائی که آن‌ها را اجرا می نمایند را به شما نشان خواهد داد: 
</p>

<pre caption="Receiving init script information">
# <i>rc-update -v show</i>
</pre>

<p>
همچنین فقط برای دیدن کدهای init در حال اجرا و مرحله اجراهای آن‌ها می‌توانید دستور <c>rc-update show</c> را (بدون <c>-v</c>) اجرا نمایید. 
</p>

</body>
</subsection>
</section>
<section>
<title>پیکربندی کردن خدمات</title>
<subsection>
<title>پیکربندی بیشتر چه لزومی دارد؟</title>
<body>

<p>
کدهای init می‌توانند کاملاً پیچیده باشند. به همین دلیل واقعا پسندیده نیست که کاربران به شکل مستقیم آن‌ها را ویرایش نمایند، چرا که این کار می‌تواند آن‌ها را بسیار مستعد خطا نماید. هرچند این هم بسیار مهم است که بتوانیم هر خدمتی را پیکربندی نماییم. برای مثال ممکن است بخواهید به یک خدمت انتخاب های بیشتری در خودش بدهید. 
</p>

<p>
دلیل دوم اینکه این پیکربندی را در بیرون از مدهای init اعمال نمایید آن است که بتوانید بدون ترس از تغییر پیکربندی تان کدهای init را بروزرسانی نمایید. 
</p>

</body>
</subsection>
<subsection>
<title>دایرکتوری /etc/conf.d</title>
<body>

<p>
جنتو راه ساده ائی برای پیکربندی هر خدمتی فراهم نموده است: هر کد init که بتواند پیکربندی شود، فایلی در <path>/etc/conf.d</path> دارد. برای مثال، apache2 initscript که (به آن <path>/etc/init.d/apache2</path> گفته می شود) فایل پیکربندی که به آن <path>/etc/conf.d/apache2</path> گفته می شود، دارد. که می‌تواند شامل انتخاب هائی باشد که شما می‌خواهید در هنگام راه اندازی به سرور آپاچی ۲ بدهید: 
</p>

<pre caption="Variable defined in /etc/conf.d/apache2">
APACHE2_OPTS="-D PHP5"
</pre>

<p>
چنین فایل‌های پیکربندی حاوی متغییرها و خود متغییرها به تنهائی (شبیه به <path>/etc/portage/make.conf</path> ) پیکربندی خدمات را بسیار ساده می نمایند. همچنین ما را قادر می‌سازند تا اطلاعات بیشتری درباره متغییرها (به عنوان توضیح) فراهم آوریم. 
</p>

</body>
</subsection>
</section>
<section>
<title>نوشتن کدهای init</title>
<subsection>
<title>آیا من هم می توانم؟</title>
<body>

<p>
خیر، از آنجا که جنتو کدهای init آماده برای استفاده ائی، برای همه خدمات فراهم آورده شده، ارائه می نماید، نوشتن یک کد init معمولاً ضرورتی ندارد. هرچند ممکن است شما خدمتی را بدون استفاده از پرتیج نصب نموده باشید، در چنین موردی باید علاقمند باشید یک کد init ایجاد نمایید. 
</p>

<p>
اگر کد init خدمتی مشخصاً برای جنتو نوشته نشده، از آن استفاده ننمایید: کدهای init جنتو با کدهای init دیگر توزیع‌ها سازگاری ندارند! 
</p>

</body>
</subsection>
<subsection>
<title>لایه ها</title>
<body>

<p>
اساس لایه بندی یک کد init در زیر نشان داده شده است: 
</p>

<pre caption="Basic layout of an init script">
#!/sbin/runscript

depend() {
  <comment>(Dependency information)</comment>
}

start() {
  <comment>(Commands necessary to start the service)</comment>
}

stop() {
  <comment>(Commands necessary to stop the service)</comment>
}
</pre>

<p>
همه کدهای init برای تعریف شدن <e>نیاز</e> به تابع <c>start()</c> دارند. دیگر بخش‌ها انتخابی هستند. 
</p>

</body>
</subsection>
<subsection>
<title>وابستگی‌ها</title>
<body>

<p>
دو شبه-تنظیم وجود دارد که می‌توانید برای تأثیر بر مرحله شروع یا ترتیب اجرای کدهای init ، تعریف نمایید: <c>use</c> و <c>need</c>. پس از این دو روش مؤثر-بر درخواست وجود دارند که به نام های <c>before</c> و <c>after</c> نامیده می شوند. این آخری ها بخودی خود پیش نیاز نیستند – اگر آغاز یکی از آن‌ها زمانبندی نشده باشد، موجب خراب شدن اجرای کدهای init اصلی (یا خراب کردن راه اندازی) نمی شوند. 
</p>

<ul>
  <li>
تنظیمات <c>use</c> دستگاه init را مطلع می‌سازد که کد حاضر از توابعی <e>استفاده می نماید</e> که با کدی انتخابی ارائه گردیده، اما مستقیماً به آن وابسته نیست. یک نمونه خوب می‌تواند use<c>use logger</c> یا <c>use dns</c> باشد. اگر موجود باشند، در استفاده مفیدی قرار خواهند گرفت. اما اگر یک سرور DNS یا ورودگر نداشته باشید هم هنوز خدمات کار خواهند نمود. اگر خدمات موجود باشند، آن‌ها پیش از کدهائی که از آن‌ها <c>استفاده می نمایند</c> آغاز به کار می نمایند.
  </li>
  <li>
تنظیمات <c>need</c> وابستگی سختی است. این به آن معنی است که کدی که برای آغاز <c>نیاز</c> به کد دیگری دارد، بدون آغاز موفق کد دیگر راه نخواهد افتاد. همچنین اگر آن کد راه اندازی مجدد شود، این کد هم بخوبی راه اندازی مجدد خواهد شد. 
  </li>
  <li>
هنگامیکه از <c>before</c> استفاده می نمایید، کد داده شده قبل از کد انتخاب شده دیگر استفاده می‌شود <e>اگر</e> آن کد دیگر بخشی از مرحله init باشد. بنابر این یک کد init مانند <path>xdm</path> که <c>before alsasound</c> تعریف می شود، پیش از کد <path>alsasound</path> آغاز به کار خواهد نمود، اما فقط در زمانی که <path>alsasound</path> در برنامه شروع یک مرحله init قرار داده شده باشد. اگر <path>alsasound</path> برای شروع برنامه‌ریزی نشده باشد، این بخش تنظیمات بی تأثیر خواهد بود و <path>xdm</path> هرگه که دستگاه init فرض نماید که آغاز آن لازم است، شروع به کار خواهد نمود. 
  </li>
  <li>
مشابها، <c>پس از اینکه</c> دستگاه init مطلع گردید که کد داده شده باید پیش از کد دیگری آغاز به کار نماید، <e>اگر</e> کد دیگر بخشی از مرحله init باشد، به همین ترتیب انجام خواهد گرفت. در غیر اینصورت تنظیمات بی تأثیر خواهد بود و کد تنها در زمانی که دستگاه init کارکرد آنرا ضروری بداند، بکار انداخته خواهد شد. 
  </li>
</ul>

<p>
از مطالب بالا باید مشخص باشد که <c>need</c> تنها تنظیمات پیش نیاز صحیح است که بدون توجه به آغاز به کار کد یا خیر، تاثیرگذاری خود را حفظ خواهد نمود. دیگران تنها هشدار دهنده هائی هستند به دستگاه init که کدام کد درخواست شده می‌تواند (یا باید) راه اندازی گردد. 
</p>

<p>
اکنون اگر به بسیاری از کدهای init جنتو نگاه بنمایید، متوجه خواهید شد که برخی از آن‌ها دارای پیش نیازهائی به چیزهائی هستند که به کدهای init وابسته نیستند. این چیزها را <e>virtuals</e> می خوانیم. 
</p>

<p>
یک پیش نیاز <e>virtual</e>، پیش نیازی است که یک خدمت فراهم می آورد، اما آن چیزی که فقط آن خدمت آنرا فراهم بیاورد، نیست. کد init شما می‌تواند به یک ورودگر دستگاه وابسته باشد، اما تعداد زیادی ورودگر دستگاه وجود دارد ( metalogd, syslog-ng, sysklogd، ... ). از آنجا که شما همه آن‌ها را <c>نمی‌خواهید</c> (هیچ دستگاه معقولی همه آن‌ها را نصب و استفاده نمی نماید) ما مطمئن هستیم که همه این برنامه‌ها یک پیش نیاز مجازی <c>فراهم</c> می آورند. 
</p>

<p>
اجازه دهید نگاهی به اطلاعات پیش نیاز خدمت پسوندی بیاندازیم. 
</p>

<pre caption="Dependency information for Postfix">
depend() {
  need net
  use logger dns
  provide mta
}
</pre>

<p>
همانگونه که می‌توانید ببینید، خدمت پسوندی: 
</p>

<ul>
  <li>
نیازمند پیش نیاز مجازی <c>net</c> است (که برای نمونه توسط <path>/etc/init.d/net.eth0</path> فراهم آورده می شود) 
  </li>
  <li>
از یک پیش نیاز <c>logger</c> مجازی استفاده می نماید (که برای نمونه توسط <path>/etc/init.d/syslog-ng</path> فراهم آورده می شود) 
  </li>
  <li>
از پیش نیاز های مجازی <c>dns</c> استفاده می نماید (که برای نمونه توسط <path>/etc/init.d/named</path> فراهم آورده می شود) 
  </li>
  <li>
پیش نیاز (مجازی) <c>mta</c> را فراهم می‌آورد (که برای همه سرورها mail عمومی است) 
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>کنترل کردن درخواست ها</title>
<body>

<p>
چنانکه در بخش پیشین توضیح دادیم، می‌توانید به دستگاه init بگویید چه درخواستی برای کد آغاز (یا خاتمه) باید استفاده شود. این درخواست ها توسط دو تنظیمات <c>use</c> و <c>need</c> اداره می شوند. اما همچنین در حین تنظیمات <c>before</c> و <c>after</c> هم همینطور. چنانکه پیشتر توضیح دادیم، اکنون اجازه دهید نگاهی به خدمت Portmap به عنوان نمونه ائی برای کدهای init بیاندازیم: 
</p>

<pre caption="The depend() function in the Portmap service">
depend() {
  need net
  before inetd
  before xinetd
}
</pre>

<p>
همچنین می‌توانید از نشانک "*" برای گرفتن همه خدمات یک مرحله اجرا استفاده نمایید، هرچند که اینکار خردمندانه نیست. 
</p>

<pre caption="Running an init script as first script in the runlevel">
depend() {
  before *
}
</pre>

<p>
اگر خدمت شما باید در لوحه های محلی نوشته شود، به <c>localmount</c> نیاز دارد. اگر همه چیز مانند pisfile را در <path>/var/run</path> نگهداری می نماید، پس باید بعد از bootmisc راه اندازی شود: 
</p>

<pre caption="Example depend() function">
depend() {
  need localmount
  after bootmisc
}
</pre>

</body>
</subsection>
<subsection>
<title>توابع استاندارد</title>
<body>

<p>
پس از تابع <c>depend()</c> ، همچنین لازم دارید تا تابع <c>start()</c> را تعریف نمایید. این یکی حاوی همه دستور هائی است که خدمت شما را ارزش آغازین می دهد. خردمندانه است که از توابع <c>ebegin</c> و <c>eend</c> برای اعلام آنچه در حال رخ دادن است به کاربرانتان استفاده نمایید: 
</p>

<pre caption="Example start() function">
start() {
  if [ "${RC_CMD}" = "restart" ];
  then
    <comment># Do something in case a restart requires more than stop, start</comment>
  fi

  ebegin "Starting my_service"
  start-stop-daemon --start --exec /path/to/my_service \
    --pidfile /path/to/my_pidfile
  eend $?
}
</pre>

<p>
هر دو <c>--exec</c> و <c>--pidfile</c> باید در توابع آغاز و پایان استفاده گردند. اگر خدمت یک pidfile ایجاد نمی نماید، اگر ممکن است از <c>--make-pidfile</c> استفاده نمایید، به هر حال باید آنرا امتحان نمایید تا مطمئن شوید. در غیر اینصورت از <c>--make-pidfile</c> استفاده ننمایید. همچنین می‌توانید <c>--quiet</c> را به انتخاب های <c>start-stop-daemon</c> اضافه نمایید. اما این تنها در شرایطی که خدمت بشدت دراز باشد پیشنهاد می شود. استفاده از <c>--quiet</c> موجب پنهان شدن ایرادیابی در صورتی که خدمت آغاز بکار ننماید می شود. 
</p>

<p>
تنظیم قابل اشاره دیگری که در نمونه بالا استفاده گردیده بررسی محتوی متغییر <c>RC_CMD</c> است. بی شباهت به دستگاه کد init قبلی، دستگاه جدیدتر <c>openrc</c> از تابع راه اندازی مجدد مخصوص کد پشتیبانی نمی نماید. بجای آن کد نیازمند بررسی محتوی متغییر <c>RC_CMD</c> است تا ببیند یک تابع (تابع RC_CMD باشد <c>start()</c> یا تابع <c>stop()</c> ) راه اندازی مجدد گردد یا خیر. 
</p>

<note>
مطمئن شوید که <c>--exec</c> واقعاً یک خدمت را فراخوانی می نماید نه فقط یک کد قابل اجرا در شل را که خدمت را فراخوانی می نماید و خارج می‌شود – این چیزی است که کد init از آن پشتیبانی می نماید. 
</note>

<p>
اگر به نمونه‌های بیشتری از تابع <c>start()</c> نیاز دارید، لطفاً کد منبع کدهای init را که در دایرکتوری <path>/etc/init.d</path> دستگاه شما قرار دارند را مطالعه بفرمایید. 
</p>

<p>
تابع دیگری که می‌توانید تعریف نمایید <c>stop()</c> است. هرچند اجباری برای تعریف این تابع ندارید! دستگاه init ما به اندازه کافی هوشمند هست که اگر شما از <c>start-stop-daemon</c> استفاده نمودید، خودش این تابع را بموقع به اجرا بگذارد. 
</p>

<p>
اینجا نمونه ائی از تابع <c>stop()</c> آورده شده. 
</p>

<pre caption="Example stop() function">
stop() {
  ebegin "Stopping my_service"
  start-stop-daemon --stop --exec /path/to/my_service \
    --pidfile /path/to/my_pidfile
  eend $?
}
</pre>

<p>
اگر خدمت شما کدهای دیگری را به اجرا می‌گذارد (برای مثال، bash ، python یا perl)، و این کدها بعداً نامشان عوض می‌گردد (مثلاً <c>foo.py</c> به <c>foo</c>)،نیاز دارید تا <c>--name</c> را به <c>start-stop-daemon</c> اضافه نمایید. باید نامی را که کد شما به آن نام تغییر می نمایید را مشخص نمایید. در این نمونه، یک خدمت <c>foo.py</c> را اجرا می نماید که به <c>foo</c> تغییر نام داده است: 
</p>

<pre caption="A service that starts the foo script">
start() {
  ebegin "Starting my_script"
  start-stop-daemon --start --exec /path/to/my_script \
    --pidfile /path/to/my_pidfile --name foo
  eend $?
}
</pre>

<p>
اگر اطلاعات بیشتری می خواهید، <c>start-stop-daemon</c> یک صفحه راهنمای بسیار جذاب دارد: 
</p>

<pre caption="Getting the man page for start-stop-daemon">
$ <i>man start-stop-daemon</i>
</pre>

<p>
نحو کد init جنتو بر اساس شل POSIX است. بنابر این آزادید که از توانائی های sh در داخل ساخت init خود استفاده نمایید. ساختارهای دیگر، مانند خصوصیات bash، را برای اطمینان از باقی ماندن کد بطور تابعی صرفنظر از اینکه جنتو ممکن است دستگاه init خود را تغییر دهد، از کد init خود دور نگاه دارید. 
</p>

</body>
</subsection>
<subsection>
<title>اضافه نمودن انتخاب های دلخواه</title>
<body>

<p>
اگر می‌خواهید کد init شما از انتخاب هائی بیشتر از آن‌هائی که ما به آنها اشاره نمودیم پشتیبانی نماید، باید انتخاب های خودتان را به متغییر <c>extra_commands</c> اضافه نمایید، و تابعی با نام مشابه به عنوان انتخاب ایجاد نمایید. برای نمونه برای پشتیبانی از انتخابی به نام <c>restartdelay</c> اینگونه عمل می نماییم: 
</p>

<pre caption="Supporting the restartdelay option">
extra_commands="restartdelay"

restartdelay() {
  stop
  sleep 3    <comment># Wait 3 seconds before starting again</comment>
  start
}
</pre>

<impo>
تابع <c>restart()</c> نمی‌تواند مجدداً در openrc بازنویسی گردد! 
</impo>

</body>
</subsection>
<subsection>
<title>متغییرهای پیکربندی خدمات</title>
<body>

<p>
چیز زیادی برای انجام دادن برای ایجاد پشتیبانی از یک فایل پیکربندی در <path>/etc/conf.d</path> ندارید: اگر کد init شما اجرا شد، فایل‌های زیر بطور خودکار منبع آن می‌شوند (برای نمونه متغییرهای که برای استفاده موجود هستند): 
</p>

<ul>
  <li><path>/etc/conf.d/&lt;your init script&gt;</path></li>
  <li><path>/etc/conf.d/basic</path></li>
  <li><path>/etc/rc.conf</path></li>
</ul>

<p>
همچنین اگر کد init شما پیش نیاز مجازی را فراهم می‌آورد (مانند <c>net</c>) فایل‌های همراه پیش نیاز هم (برای نمونه <path>/etc/conf.d/net</path> ) منبع می گردند. 
</p>

</body>
</subsection>
</section>
<section>
<title>تغییر دادن عادت های مرحله اجرا</title>
<subsection>
<title>چه کسی ممکن است از این منافعی ببرد؟</title>
<body>

<p>
بسیاری از کاربران لپ تاپ موقعیت را می دانند: برخلاف راه ها که لازم نیست <c>net.eth0</c> را راه اندازی نمایید (چراکه شبکه ائی موجود نیست)، در خانه باید <c>net.eth0</c> را راه اندازی نمایید. با جنتو می‌توانید عادت‌های مرحله اجرا را به شکل دلخواه خود تغییر دهید. 
</p>

<p>
برای مثال می‌توانید یک مرحله اجرای <c>"default"</c> دوم ایجاد نمایید که می‌توانید آنرا راه اندازی نمایید و کدهای init دیگر را به آن ارجاع نمایید. پس از آن می‌توانید در زمان راه اندازی انتخاب نمایید می‌خواهید کدام مرحله اجرا default را استفاده نمایید. 
</p>

</body>
</subsection>
<subsection>
<title>استفاده کردن از softlevel</title>
<body>

<p>
اول از همه، دایرکتوری مرحله اجرائی برای دومین مرحله اجرا "default" خود ایجاد نمایید. به عنوان یک مثال ما یک مرحله اجرا <path>offline</path> ایجاد می نماییم: 
</p>

<pre caption="Creating a runlevel directory">
# <i>mkdir /etc/runlevels/offline</i>
</pre>

<p>
کدهای init لازم را به مرحله اجرای تازه ایجاد شده اضافه نمایید. برای نمونه، اگر می‌خواهید کپی دقیقی از مرحله اجرا <c>default</c> فعلی خود بدون <c>net.eth0</c> داشته باشید: 
</p>

<pre caption="Adding the necessary init scripts">
<comment>(Copy all services from default runlevel to offline runlevel)</comment>
# <i>cd /etc/runlevels/default</i>
# <i>for service in *; do rc-update add $service offline; done</i>
<comment>(Remove unwanted service from offline runlevel)</comment>
# <i>rc-update del net.eth0 offline</i>
<comment>(Display active services for offline runlevel)</comment>
# <i>rc-update show offline</i>
<comment>(Partial sample Output)</comment>
               acpid | offline
          domainname | offline
               local | offline
            net.eth0 |
</pre>

<p> 
هرچند <c>net.eth0</c> از مرحله اجرا پاک گردیده، <c>udev</c> ممکن است بخواهد تلاش نماید تا دستگاهی را راه اندازی نماید که برای خدمات مورد نیاز خود، خدمت را متصل و راه اندازی نماید، فرایندی که به <e>hotplugging</e> معروف است. بطور پیش‌فرض جنتو hotplugging را فعال نمی نماید. 
</p>

<p>
اگر می‌خواهید hotplugging را فعال نمایید، اما فقط برای دسته انتخابی از کدها، از متغییر <c>rc_hotplug</c> در <path>/etc/rc.conf</path> استفاده نمایید: 
</p>

<pre caption="Disabling device initiated services in /etc/rc.conf">
<comment># Allow net.wlan as well as any other service, except those matching net.*
# to be hotplugged</comment>
rc_hotplug="net.wlan !net.*"
</pre>

<note>
برای اطلاعات بیشتر درباره خدمات راه انداخته شده دستگاه، لطفاً توضیحات موجود در داخل <path>/etc/rc.conf</path> را ببینید. 
</note>

<p>
اکنون پیکربندی راه انداز خود را ویرایش نمایید و ورودی جدید برای مرحله اجرا <c>offline</c> را وارد نمایید. برای نمونه در <path>/boot/grub/grub.conf</path> اینگونه عمل می نماییم: 
</p>

<pre caption="Adding an entry for the offline runlevel">
title Gentoo Linux Offline Usage
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3 <i>softlevel=offline</i>
</pre>

<p>
اکنون همه چیز را تنظیم نموده اید. اگر دستگاه خود را راه اندازی نمایید و گزینه جدید اضافه شده به راه انداز را انتخاب نمایید، مرحله اجرای <c>offline</c> بجای آن مرحله اجرای پیش‌فرض <c>default</c> استفاده خواهد گردید. 
</p>

</body>
</subsection>
<subsection>
<title>استفاده کردن از مرحله اجرای راه انداز</title>
<body>

<p>
استفاده نمودن از <c>softlevel</c> کاملاً مشابه <c>bootlevel</c> است. تنها تفاوت در اینجا این است که شما بجای یک مرحله اجرا default ، یک مرحله اجرا boot تعریف می نمایید. 
</p>

</body>
</subsection>
</section>
</sections>
