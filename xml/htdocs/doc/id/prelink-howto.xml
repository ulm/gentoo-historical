<?xml version='1.0' encoding="UTF-8"?>
<!-- $Id: prelink-howto.xml,v 1.2 2012/04/18 18:30:24 swift Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide lang="id">
<title>Panduan Prelink Gentoo Linux</title>

<author title="Author">
  <mail link="cretin@gentoo.org">Stefan Jones</mail>
</author>
<author title="Editor"><!-- zhen@gentoo.org -->
  John P. Davis
</author>
<author title="Editor">
  <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Editor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Editor">
  <mail link="erwin@gentoo.org">Erwin</mail>
</author>
<author title="Translator">
  <mail link="kucrut.dz@gmail.com">Dzikri Aziz</mail>
</author>

<abstract>
Panduan ini berisi cara menggunakan dukungan prelink di Portage 2.0.46 dan yang
lebih baru
</abstract>

<license/>

<version>1.17</version>
<date>2007-04-02</date>

<chapter>
<title>Pendahuluan</title>
<section>
<title>Apa itu Prelink dan apa gunanya?</title>
<body>

<p>
Hampir semua aplikasi memanfaatkan pustaka yang digunakan bersamaan (<e>shared
libraries</e>). Pustaka ini harus dimuat ke memori ketika aplikasi dijalankan
dan berbagai referensi simbol harus diterjemahkan. Untuk aplikasi kecil, proses
ini berlangsung dengan cepat. Tetapi untuk program yang ditulis dengan bahasa
C++ dan yang memiliki banyak dependensi pustaka, proses ini bisa memakan waktu
yang lumayan lama.
</p>

<p>
Pada kebanyakan sistem, pustaka tidak terlalu sering berganti dan ketika sebuah
program sedang berjalan, operasi yang dijalankan untuk mengkaitkan program
hampir selalu sama. <e>Perlink</e> memanfaatkan situasi ini dengan membawa
kaitan tersebut dan menyimpannya dalam bentuk binari.
</p>

<p>
Prelink dapat mempersingkat waktu yang diperlukan untuk memanggil sebuah
aplikasi. Misalnya, waktu yang dibutuhkan untuk memanggil sebuah program KDE
biasa dapat dipersingkat sampai 50%. Satu-satunya pemeliharaan yang harus anda
lakukan adalah menjalankan perlink setiap kali pustaka di-upgrade untuk
mendapatkan binari baru.
</p>

<warn>
Prelink tidak dapat berfungsi dengan Hardened Gentoo karena proyek prelink dan
Hardened Gentoo sama-sama mencoba untuk mengubah pemetaan ruang alamat dari
pustaka, tetapi prelink dengan opsi -R mengacak alamat dasar pustaka, yang
menyediakan proteksi yang hampir sama dengan hardened.
</warn>

</body>
</section>
<section>
<title>Ringkasan</title>
<body>

<ul>
  <li>
    Proses prelink dilakukan dengan sebuah program yang bernama <c>prelink</c>.
    Program ini merubah binari agar dapat dipanggil lebih cepat.
  </li>
  <li>
    Jika pustaka khusus dari sebuah aplikasi berubah setelah anda
    mem-<e>prelink</e>-nya, anda harus mengulangi kembali proses prelink. Jika
    tidak, anda akan kehilangan peningkatan kecepatan yang pernah anda
    dapatkan. Artinya, setiap kali anda mendapatkan pustaka barus sebagai hasil
    dari upgrade sebuah paket melalui portage, anda harus mengulangi proses
    prelink untuk aplikasi tersebut.
  </li>
  <li>
    Perubahan pada binari dapat dikembalikan seperti semula secara penuh.
    <c>prelink</c> memiliki fungsi <e>undo</e>.
  </li>
  <li>
    Versi Portage saat ini dapat menangani perubahan MD5sum dan mtime binari
    melalui <c>prelink</c>.
  </li>
  <li>
    Anda tidak perlu menetapkan <c>FEATURES="prelink"</c> di file
    <path>make.conf</path>; Portage akan langsung mendukung perlink jika binari
    prelink ditemukan.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Menyiapkan Prelink</title>
<section>
<title>Instalasi</title>
<body>

<p>
Pertama anda harus menginstal <c>prelink</c>. Proses emerge akan langsung
memeriksa apakah sistem anda dapat menggunakan prelink dengan aman.
</p>

<pre caption="Instalasi prelink">
# <i>emerge prelink</i>
</pre>

<p>
Banyak pengguna yang mendapatkan error ketika menginstal prelink karena adanya
kegagalan pada beberapa pemeriksaan. Pemeriksaan ini dilakukan untuk alasan
keamanan, tingkah laku perlink tidak dapat diduga jika anda menonaktifkan
pemeriksaan ini. Error emerge biasanya hanya disebabkan oleh paket-paket inti;
<c>binutils</c>, <c>gcc</c>, dan <c>glibc</c>. Coba instal ulang paket-paket
tersebut secara berurutan.
</p>

<note>
Saran: Jika anda mendapatkan error, coba kompilasi dan uji sendiri
<c>prelink</c> (<c>./configure</c> ; <c>make</c> ; <c>make check</c> ). Ketika
gagal, anda akan menemukan file-file <path>*.log</path> di direktorinya.
File-file ini mungkin dapat memberikan petunjuk bagi anda.
</note>

<p>
Jika anda telah mencoba untuk mengulangi langkah-langkah yang telah anda
lakukan di komputer lain tetapi masih mendapatkan error, kunjungilah <uri
link="http://bugzilla.gentoo.org">Bugzilla</uri> untuk membuat laporan bug jika
belum ada yang melaporkannya.
</p>

</body>
</section>
<section>
<title>Menyiapkan Sistem</title>
<body>

<p>
Pastikan juga anda <b>tidak</b> menggunakan flag <c>-fPIC</c> di variabel
CFLAGS/CXXFLAGS. Jika anda menggunakannya, anda harus membangun ulang seluruh
sistem anda tanpa flag tersebut.
</p>

</body>
</section>
<section>
<title>Konfigurasi</title>
<body>

<p>
Jalankan <c>env-update</c> untuk menciptakan file <path>/etc/prelink.conf</path>
yang akan memberitahukan <c>perlink</c> tentang file apa saja yang harus
di-prelink.
</p>

<pre caption="Menjalankan env-update">
# <i>env-update</i>
</pre>

<p>
Sayangnya, anda tidak dapat mem-prelink file-file yang dikompilasi oleh
<c>binutils</c> versi lama. Kebanyakan aplikasi ini hanya disediakan dalam
bentuk binari yang diinstal di <path>/opt</path>. Dengan menciptakan file
berikut ini, anda dapat memerintahkan prelink untuk tidak memprosesnya.
</p>

<pre caption="/etc/env.d/60prelink">
PRELINK_PATH_MASK="/opt"
</pre>

<note>
Anda dapat menambahkan direktori lain dengan memisahkannya dengan titik dua.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Proses Prelink</title>
<section>
<title>Cara Menggunakan Prelink</title>
<body>

<p>
Penulis menggunakan perintah berikut untuk mem-prelink semua binari di dalam
direktori yang terdaftar di <path>/etc/prelink.conf</path>.
</p>

<pre caption="Prelink file-file terdaftar">
# <i>prelink -amR</i>
</pre>

<warn>
Telah diketahui bahwa jika anda hanya memilki sedikit ruang kosong di harddisk
anda dan anda mem-prelink seluruh sistem anda, maka kemungkinan binari anda
akan disusutkan. Hal ini akan menghasilkan sistem yang kacau. Gunakan perintah
<c>file</c> atau <c>readelf</c> untuk memeriksa file binari. Atau, periksa sisa
ruang kosong yang anda miliki dengan perintah <c>df -h</c>.
</warn>

<table>
<tr>
  <th>Opsi-opsi:</th>
</tr>
<tr>
  <th>-a</th>
  <ti>"All": prelink semua binari</ti>
</tr>
<tr>
  <th>-m</th>
  <ti>
    Menghemat memori virtual. Ini diperlukan jika anda akan mem-prelink banyak
    pustaka.
  </ti>
</tr>
<tr>
  <th>-R</th>
  <ti>
    Random -- mengacak urutan alamat. Opsi ini akan meningkatkan proteksi
    terhadap serangan <e>buffer overflows</e>.
  </ti>
</tr>
</table>

<note>
Untuk mengetahui opsi-opsi lain yang tersedia, bacalah <c>man prelink</c>
</note>

</body>
</section>
<section>
<title>Tugas Cron Prelink</title>
<body>

<p>
<c>sys-devel/prelink-20060213</c> dan yang lebih baru menginstal sebuah tugas
cron di <path>/etc/cron.daily/prelink</path>. Untuk menggunakannya, edit file
<path>/etc/conf.d/prelink</path>. Ini akan menjalankan prelink di belakang
setiap hari, agar anda tidak perlu menjalankannya lagi.
</p>

</body>
</section>
<section>
<title>Mempercepat KDE Setelah Proses Prelink</title>
<body>

<p>
Waktu yang diperlukan untuk memanggil aplikasi KDE dapat dipersingkat setelah
proses prelink. Jika anda memberitahukan KDE bahwa anda telah mem-prelink-nya,
KDE akan menonaktifkan <c>kdeinit</c> (karena tidak diperlukan lagi), yang
akhirnya dapat lebih mempercepat KDE.
</p>

<p>
Tetapkan <c>KDE_IS_PRELINKED="true"</c> di <path>/etc/env.d/*kdepaths*</path>
untuk memberitahukan KDE tentang prelink.
</p>

</body>
</section>
<section>
<title>Menghapus prelink</title>
<body>

<p>
Jika anda berubah pikiran dan tidak ingin menggunakan prelink lagi, anda harus
menghapus tugas cron prelink terlebih dahulu dari <path>/etc/cron.daily</path>
dan <path>/etc/conf.d/prelink</path> sebelum anda meng-unmerge <c>prelink</c>.
Kemudian, anda harus menghapus prelink dari semua binari:
</p>

<pre caption="Menghapus prelink dari semua binari">
# <i>prelink -au</i>
</pre>

<p>
Terakhir, unmerge paket <c>prelink</c>:
</p>

<pre caption="Unmerge prelink">
# <i>emerge -aC prelink</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Masalah-masalah dan Pemecahannya</title>
<section>
<title>"Cannot prelink against non-PIC shared library"</title>
<body>

<p>
Masalah ini disebabkan oleh pustaka yang tidak dikompilasi dengan benar karena
menggunakan opsi <c>-fPIC</c> gcc untuk semua file objeknya.
</p>

<p>
Berikut ini adalah pustaka yang belum atau tidak dapat diperbaiki:
</p>

<ul>
  <li>
    Pustaka pada paket <c>wine</c>, termasuk <c>winex</c>. Prelink tidak akan
    dapat mempercepat pemanggilan binari MS windows.
  </li>
  <li>
    Pustaka di paket <c>media-video/mjpegtools</c>,
    <path>/usr/lib/liblavfile-1.6.so.0</path>.
  </li>
  <li>
    Pustaka OpenGl nVidia,
    <path>/usr/lib/opengl/nvidia/lib/libGL.so.*</path>. Karena alasan performa,
    pustaka ini dikompilasi tanpa dukungan PIC.
  </li>
</ul>

<p>
Jika pustaka anda yang bermasalah tidak dicantumkan di atas, tolong laporkan,
lebih baik lagi jika anda mengikutsertakan tambalan (<e>patch</e>) untuk
menambahkan <c>-fPIC</c> di CFLAGS.
</p>

</body>
</section>
<section>
<title>
  Ketika saya mem-prelink sistem saya, beberapa binari statis tidak bisa
  digunakan lagi
</title>
<body>

<p>
Menurut glibc, tidak ada satupun binari yang 100% statis. Jika anda
mengkompilasi sebuah binari secara statis dengan glibc, binari ini masih akan
bergantung pada file lain. Berikut ini adalah penjelasan dari Dick Howell:
</p>

<p>
"Menurut saya, ide binari statis adalah menyediakan semua yang diperlukan pada
file yang didownload, jadi tidak ada lagi yang bergantung pada pustaka lokal
di sistem target. Sayangnya, di Linux, dan menurut saya di semua sistem operasi
yang menggunakan GLIBC, hal ini tidak selalu benar. Ada "libnss" (<e>name
service switch</e>, ada juga yang menyebutnya <e>network security system</e>)
yang menyediakan fungsi-fungsi untuk mengakses berbagai database untuk
otentikasi, informasi jaringan, dan beberapa fungsi lain. Ide ini bertujuan
untuk menjadikan sebuah aplikasi independen dari lingkungan jaringan yang telah
dikonfigurasi. Memang bagus, tetapi perubahan pada GLIBC dapat menyebabkan
masalah ketika aplikasi tersebut diluncurkan. Anda juga tidak dapat mengkaitkan
"libnss" secara statis karena telah dikonfigurasi untuk setiap komputer secara
individual. Masalahnya, menurut saya, datang dari pengaitan pustaka lain GLIBC
secara statis, terutama "libpthread", "libm", dan "libc", yang mendatangkan
fungsi pemanggilan yang tidak kompatibel dengan "libnss".
</p>

</body>
</section>
<section>
<title>
  Prelink terhenti dengan pesan "prelink: dso.c:306: fdopen_dso: Assertion
  `j == k' failed."
</title>
<body>

<p>
Masalah ini sudah diketahui, carilah masalah yang mirip dengan masalah yang
anda dapatkan di <uri
link="http://bugs.gentoo.org/show_bug.cgi?id=13878">sini</uri>. Prelink tidak
dapat mengatasi binari UPX yang dipadatkan. Sejak prelink-20021213, tidak ada
perbaikan yang dapat dilakukan kecuali menyembunyikan binari ini ketika anda
melakukan proses prelink. Bacalah bagian <uri
link="#doc_chap2_sect2">Konfigurasi</uri> di atas untuk mengetahui cara
melakukannya.
</p>

</body>
</section>
<section>
<title>
  Saya menggunakan grsecurity dan kelihatannya prelink tidak berhasil
</title>
<body>

<p>
Untuk melakukan prelink pada sistem yang menggunakan <c>grsecurity</c> dengan
"randomized mmap() base", anda harus menonaktifkan "randomized mmap() base"
untuk <path>/lib/ld-2.3.*.so</path>. Anda dapat melakukannya dengan utilitas
<c>chpax</c>, tetapi harus dilakukan ketika file tersebut sedang tidak
digunakan (mis. dengan cara boot dari CD rescue).
</p>

</body>
</section>
<section>
<title>
  Prelink gagal dengan pesan error "prelink: Can't walk directory tree XXXX:
  Too many levels of symbolic links"
</title>
<body>

<p>
Symlink anda diletakkan terlalu jauh di dalam. Ini terjadi ketika sebuah
symlink menunjuk ke dirinya sendiri. <path>/usr/lib/lib -&gt; lib</path> adalah
contoh yang paling umum. Untuk memperbaikinya, anda boleh mencari sendiri
symlink tersebut, atau dengan menggunakan utilitas yang disediakan oleh paket
<c>symlinks</c>:
</p>

<pre caption="Memperbaiki symlink">
# <i>emerge symlinks</i>
# <i>symlinks -drv /</i>
</pre>

<p>
Penjelasan lebih lanjut bisa anda dapatkan di <uri
link="http://bugs.gentoo.org/show_bug.cgi?id=82117">Bugzilla</uri> dan topik
<uri
link="http://forums.gentoo.org/viewtopic-t-458144-highlight-prelink.html">forum
ini</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Penutup</title>
<section>
<body>

<p>
Prelink dapat mempersingkat waktu yang dibutuhkan untuk memanggil aplikasi
besar secara drastis. Dukungannya telah diikutsertakan di Portage. Prelink juga
aman digunakan karena anda dapat mengembalikan binari yang telah anda prelink
kapan saja, jika anda mendapatkan masalah. Anda hanya harus selalu untuk
mengulangi proses prelink ketika anda meng-upgrade glibc atau pustaka lain!
Singkat kata, seomga berhasil!
</p>

</body>
</section>
</chapter>
</guide>
