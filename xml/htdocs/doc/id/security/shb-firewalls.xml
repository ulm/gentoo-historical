<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $Id: shb-firewalls.xml,v 1.1 2007/02/23 11:24:09 neysx Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<sections>

<version>1.4</version>
<date>2007-02-20</date>

<section>
<title>Firewall</title>
<body>

<p>
Orang-orang biasanya berpikir bahwa firewall menyediakan keamanan yang tidak
dapat ditembus, tetapi mereka salah. Firewall yang dikonfigurasi dengan tidak
benar biasanya hanya memberikan sedikit tambahan keamanan dibandingkan dengan
tidak memiliki firewall sama sekali. Firewall juga merupakan software yang
harus diperlakukan sama dengan software lain, karena sama-sama mengandung bug.
</p>

<p>
Jadi pikirkan kembali sebelum anda mengimplementasikan firewall! Apakah anda
benar-benar membutuhkannya? Jika iya, anda perlu menuliskan aturan kerjanya,
tipe, serta siapa yang akan mengoperasikannya. Tapi sebelumnya, bacalah
panduan ini.
</p>

<p>
Firewall digunakan untuk dua tujuan:
</p>

<ul>
  <li>Mengahadang user dari luar (worm/penyerang)</li>
  <li>Mengahadang user dari dalam (pegawai/anak-anak)</li>
</ul>

<p>
Pada dasarnya terdapat tiga tipe firewall:
</p>

<ul>
  <li>Packet Filtering (Penyaringan paket)</li>
  <li>Circuit Relay (Relay sirkuit)</li>
  <li>Applications Gateway (Gerbang aplikasi)</li>
</ul>

<p>
Firewall seharusnya merupakan komputer khusus yang tidak menjalankan servis
apapun (selain <c>sshd</c>) dan diamankan dengan cara yang dianjurkan di
panduan ini.
</p>

</body>
</section>
<section>
<title>Packet Filtering</title>
<body>

<p>
Semua lalu-lintas jaringan dikirimkan dalam bentuk paket. Paket yang besar
dipecah menjadi bagian-bagian kecil agar lebih mudah dalam penanganannya
kemudian disatukan kembali ketika telah mencapai tujuan. Pada setiap paket,
header berisi informasi tentang bagaimana dan kemana paket tersebut harus
diantarkan. Informasi inilah yang digunakan oleh firewall packet filtering.
Filtering (penyaringan) didasarkan pada:
</p>

<ul>
  <li>
    Paket yang dibolehkan/tidak dibolehkan berdasarkan alamat IP
    sumber/tujuan
  </li>
  <li>
    Paket yang dibolehkan/tidak dibolehkan berdasarkan port
    sumber/tujuan
  </li>
  <li>Paket yang dibolehkan/tidak dibolehkan berdasarkan protokol</li>
  <li>
    Paket yang dibolehkan/tidak dibolehkan berdasarkan flag pada
    protokol tertentu
  </li>
</ul>

<p>
Dengan kata lain, penyaringan ini berdasarkan pada data di dalam header dari
sebuah paket dan bukan isinya.
</p>

<p>
Kelemahan:
</p>

<ul>
  <li>
    Informasi alamat pada sebuah paket berpotensial untuk menjadi alamat IP
    palsu (atau kita sebut dengan <e>spoofed</e> oleh sang pengirim)
  </li>
  <li>
    Data atau permintaan di dalam paket yang dibolehkan dapat mengandung data
    yang tidak diinginkan dan dapat digunakan oleh penyerang untuk
    mengeskploitasi bug yang sudah diketahui ada di dalam servis atau firewall
  </li>
  <li>Biasanya merupakan titik kelemahan firewall itu sendiri</li>
</ul>

<p>
Kelebihan-kelebihan:
</p>

<ul>
  <li>Sederhana dan mudah diimplementasikan</li>
  <li>
    Dapat memberikan peringatan peringatan tentang penyerangan yang mungkin
    ada sebelum terjadi (mis. dengan mendeteksi scan port)
  </li>
  <li>Baik untuk menghentikan penyerangan SYN</li>
</ul>

<p>
Contoh contoh penyaring paket bebas/gratis di Linux:
</p>

<ul>
  <li><uri link="http://www.iptables.org">Iptables</uri></li>
  <li>
    <uri link="http://www.linuxdocs.org/HOWTOs/IPCHAINS-HOWTO.html">Ipchains</uri>
  </li>
  <li><uri link="http://www.smoothwall.org">SmoothWall</uri></li>
</ul>
<!--FIXME: should SmoothWall really be included, since it uses iptables?-->
<note>
Anda dianjurkan untuk menggunakan iptables. Ipchains sudah usang.
</note>

</body>
</section>
<section>
<title>Circuit relay</title>
<body>

<p>
Circuit level gateway adalah firewall yang memvalidasi koneksi sebelum
mengizinkan pertukaran data. Artinya, firewall ini tidak mengizinkan atau
menolak paket paket begitu saja berdasarkan header paket, tetapi memeriksa
apakah koneksi di antara kedua tepi valid berdasarkan aturan-aturan yang
dapat dikonfigurasi sebelum sesi dibuka dan pertukaran data diizinkan.
Penyaringan didasarkan pada:
</p>

<ul>
  <li>Alamat IP sumber/tujuan</li>
  <li>Port sumber/tujuan</li>
  <li>Waktu periode</li>
  <li>Protokol</li>
  <li>User</li>
  <li>Password</li>
</ul>

<p>
Semua traffic divalidasikan dan dimonitor, semua traffic yang tidak diinginkan
dapat dibuang.
</p>

<p>
Kelemahan:
</p>

<ul>
  <li>
    Beroperasi pada Transport Layer dan mungkin memerlukan banyak modifikasi
    pada program yang biasanya menyediakan fungsi-fungsi tranport.
  </li>
</ul>

</body>
</section>
<section>
<title>Application Gateway</title>
<body>

<p>
Application level gateway adalah proxy untuk aplikasi, bertukar data dengan
sistem remote dengan mengatasnamakan klien. Disimpan jauh dari publik dengan
aman di belakang DMZ (De-Militarized Zone: porsi jaringan pribadi yang terlihat
lewat firewall) atau sebuah firewall yang tidak mengizinkan koneksi dari luar.
Penyaringan didasarkan pada:
</p>

<ul>
  <li>Izinkan/tidak diizinkan berdasarkan alamat IP sumber/tujuan</li>
  <li>Isi paket</li>
  <li>Pembatasan akses file berdasarkan tipe file atau ekstensi</li>
</ul>

<p>
Kelebihan-kelebihan:
</p>

<ul>
  <li>Dapat meng-cache file, meningkatkan performa jaringan</li>
  <li>Logging terinci semua koneksi</li>
  <li>Berskala baik (beberapa proxy dapat "berbagi" data yang di-cached)</li>
  <li>Tidak ada akses langsung dari luar</li>
  <li>Dapat merubah isi paket ketika ditransfer</li>
</ul>

<p>
Kelemahan:
</p>

<ul>
  <li>Konfigurasi yang rumit</li>
</ul>

<p>
Application gateway dianggap sebagai solusi teraman karena tidak perlu
dijalankan oleh root dan host-host di belakangnya tidak dapat diraih dari
internet.
</p>

<p>
Contoh application gateway bebas/gratis:
</p>

<ul>
<li><uri link="http://www.squid-cache.org/">Squid</uri></li>
</ul>

</body>
</section>
<section>
<title>Iptables</title>
<body>

<p>
Untuk menggunakan iptables, anda perlu mengaktifkannya di kernel. Penulis telah
menambahkan iptables sebagai modul (perintah <c>iptables</c> akan me-load-nya
karena diperlukan) dan mengkompilasi ulang kernel (tetapi anda mungkin perlu
mengkompilasi iptables di dalam kernel jika anda ingin menonaktifkan
<e>Loadable Kernel Modules</e> seperti yang kita diskusikan sebelumnya). Untuk
info tentang cara mengkonfigurasi kernel anda untuk iptabels, bacalah <uri
link="http://iptables-tutorial.frozentux.net/iptables-tutorial.html#PREPARATIONS">Iptables
Tutorial Chapter 5: Preparations</uri>. Setelah anda mengkompilasi kernel anda
(atau ketika sedang mengkompilasi kernel), anda perlu menambahkan perintah
<c>iptables</c>. Emerge saja <c>iptables</c> dan semuanya akan beres.
</p>

<p>
Sekarang coba apakah iptables telah bekerja dengan menjalankan <c>iptables -L</c>.
Jika gagal, berarti ada yang salah dengan konfigurasi anda, periksalah kembali.
</p>

<p>
Iptables adalah penyaring paket yang baru dan telah diperbagus di Linux 2.4.x,
yang juga merupakan penerus penyaring paket <c>ipchains</c> di kernel 2.2.x.
Salah satu peningkatan terbesar adalah, iptables dapat melakukan <e>stateful
packet filtering</e>. Dengan stateful packet filtering, anda dapat melacak
semua koneksi TCP.
</p>

<p>
Koneksi TCP terdiri dari beberapa paket yang berisi informasi tentang alamat IP
sumber, alamat IP tujuan, port sumber, port tujuan, dan nomor urut agar
paket-paket dapat dirangkai kembali tanpa kehilangan data. TCP merupakan
protokol berorientasi koneksi, kebalikan dari UDP.
</p>

<p>
Dengan menguji header paket TCP, sebuah stateful packet filter dapat menentukan
apakah paket TCP yang diterima merupakan bagian dari koneksi yang telah sukses
atau bukan, lalu memutuskan apakah menerima atau menolak paket tersebut.
</p>

<p>
<e>Stateless packet filter</e> dapat diperdaya untuk menerima paket yang
seharusnya ditolak dengan memanipulasi header paket TCP. Ini dapat dilakukan
dengan memanipulasi flag SYN atau flag lain pada header TCP agar paket palsu
dapat dianggap sebagai bagian dari koneksi yang telah sukses (karena penyaring
paket itu sendiri tidak melakukan pelacakan koneksi). Dengan stateful packet
filtering kita dapat menolak paket paket semacam itu karena bukan bagian dari
koneksi yang telah sukses. Ini juga akan menghentikan kemungkinan "stealth
scans", sejenis port scan yang mana scanner mengirimkan paket paket dengan flag
yang kemungkinan besar tidak akan di-log oleh firewall.
</p>

<p>
Iptables menyediakan beberapa fitur seperti NAT (Network Address Translation)
dan <e>rate limiting</e>. Rate limiting sangat berguna untuk mencegah
penyerangan DoS seperti flood SYN.
</p>

<p>
Koneksi TCP terjadi dengan yang disebut sebagai <e>jabat tangan tiga arah</e>.
Ketika melakukan koneksi TCP, klien mengirimkan sebuah paket ke server dengan
flag SYN terpasang. Ketika server menerima paket SYN, server akan meresponnya
dengan mengirimkan kembali paket SYN+ACK ke klien. Ketika paket SYN+ACK
diterima oleh klien, klien akan meresponnya dengan paket ACK ke tiga sekaligus
mengetahui koneksi yang telah suskes.
</p>

<p>
Penyerangan flood SYN dilakukan dengan mengirimkan paket SYN, tetapi tidak
merespon paket SYN+ACK. Klien dapat meniru sebuah paket dengan alamat IP
sumber yang palsu karena klien tidak memerlukan balasan. Sistem server akan
menambahkan sebuah entri ke antrian koneksi setengan terbuka ketika server
menerima paket SYN kemudian menunggu paket ACK terakhir sebelum menghapus
entri dari antrian. Antrian ini memiliki jumlah slot terbatas dan jika semua
slot telah terisi, server tidak akan dapat membuka koneksi baru. Jika paket ACK
tidak diterima sebelum waktu timeout yang telah ditentukan, entri tersebut akan
langsung dihapus dari antrian. Aturan timeout bisa bermacam-macam, tetapi
biasanya berkisar antara 30 sampai 60 atau bahkan lebih. Klien menyerang dengan
meniru banyak paket-paket SYN dengan alamat-alamat IP yang berbeda lalu
mengirimkannya alamat IP target secepat mungkin agar koneksi setengah terbuka
di server penuh yang akhirnya akan mencegah klien lain untuk melakukan koneksi
ke server.
</p>

<p>
Di sinilah <e>rate limit</e> diperlukan. Kita dapat membatasi rate paket paket
SYN yang diterima dengan menggunakan <c>-m limit --limit 1/s</c>. Ini akan
membatasi jumlah paket SYN yang diterima ke satu paket per detik agar dapat
mencegah flood SYN pada server.
</p>

<note>
Pilihan lain untuk mencegah flood SYN adalah dengan <uri
link="http://cr.yp.to/syncookies.html">SYN cookies</uri>, yang akan mengizinkan
komputer anda untuk merespon ke paket SYN tanpa memenuhi ruang pada antrian
koneksi. SYN cookies dapat diaktifkan pada konfigurasi kernel Linux, tetapi
untuk saat ini masih dianggap EXPERIMENTAL.
</note>

<p>
Sekarang kita praktekkan!
</p>

<p>
Ketika iptables di-load ke kernel, iptables memiliki 5 <e>hook</e> sebagai
tempat untuk anda menyimpan aturan-aturan anda. Kelima hook ini adalah
<c>INPUT</c>, <c>OUTPUT</c>, <c>FORWARD</c>, <c>PREROUTING</c> dan
<c>POSTROUTING</c>. Masing-masing hook ini disebut rantai yang terdiri dari
daftar aturan. Setiap aturan mengatakan jika header paket seperti ini, maka
hal inilah yang harus dilakukan terhadapt paket tersebut. Jika aturan tidak
cocok dengan paket, maka aturan selanjutnya di dalam rantai akan dijalankan.
</p>

<p>
Anda dapat langsung meletakkan aturan aturan pada lima rantai utama atau
menciptakan rantai baru kemudian menambahkannya sebagai aturan pada rantai
yang telah ada. Iptabels mendukung opsi opsi berikut ini.
</p>

<table>
<tr>
  <th>Opsi:</th>
  <th>Penjelasan:</th>
</tr>
<tr>
  <ti>-A</ti>
  <ti>Append (tambahkan)</ti>
</tr>
<tr>
  <ti>-D</ti>
  <ti>Delete (hapus)</ti>
</tr>
<tr>
  <ti>-I</ti>
  <ti>Insert (masukkan)</ti>
</tr>
<tr>
  <ti>-R</ti>
  <ti>Replace (gantikan)</ti>
</tr>
<tr>
  <ti>-L</ti>
  <ti>List (tampilkan)</ti>
</tr>
<tr>
  <ti>-F</ti>
  <ti>Hapus semua aturan di rantai ini atau semua rantai</ti>
</tr>
<tr>
  <ti>-Z</ti>
  <ti><e>Zero counters</e> pada rantai ini atau semua rantai</ti>
</tr>
<tr>
  <ti>-C</ti>
  <ti>Uji paket ini pada sebuah rantai</ti>
</tr>
<tr>
  <ti>-N</ti>
  <ti>Ciptakan sebuah rantai baru yang ditentukan oleh user</ti>
</tr>
<tr>
  <ti>-X</ti>
  <ti>Hapus rantai yang dibuat oleh user</ti>
</tr>
<tr>
  <ti>-P</ti>
  <ti>Gantikan aturan pada rantai ke target</ti>
</tr>
<tr>
  <ti>-E</ti>
  <ti>Ganti nama rantai</ti>
</tr>
<tr>
  <ti>-p</ti>
  <ti>Protokol</ti>
</tr>
<tr>
  <ti>-s</ti>
  <ti>Alamat/mask sumber</ti>
</tr>
<tr>
  <ti>-d</ti>
  <ti>Alamat/mask tujuan</ti>
</tr>
<tr>
  <ti>-i</ti>
  <ti>Nama input (nama Ethernet)</ti>
</tr>
<tr>
  <ti>-o</ti>
  <ti>Nama output (nama Ethernet)</ti>
</tr>
<tr>
  <ti>-j</ti>
  <ti>Jump/loncat (target untuk aturan)</ti>
</tr>
<tr>
  <ti>-m</ti>
  <ti>Extended match (boleh menggunakan ekstensi)</ti>
</tr>
<tr>
  <ti>-n</ti>
  <ti>Output numeric dari alamat dan port</ti>
</tr>
<tr>
  <ti>-t</ti>
  <ti>Tabel yang akan dimanipulasi</ti>
</tr>
<tr>
  <ti>-v</ti>
  <ti>Modus verbose</ti>
</tr>
<tr>
  <ti>-x</ti>
  <ti>Expand numbers (tampilkan nilai yang sebenarnya)</ti>
</tr>
<tr>
  <ti>-f</ti>
  <ti>Hanya cocokkan fragmen kedua atau yang seterusnya</ti>
</tr>
<tr>
  <ti>-V</ti>
  <ti>Versi paket</ti>
</tr>
<tr>
  <ti>--line-numbers</ti>
  <ti>Berikan nomor pada baris ketika menampilkan daftar</ti>
</tr>
</table>

<p>
Pertama kita akan mencoba untuk memblok semua paket ICMP ke komputer kita,
hanya untuk berkenalan dengan iptables.
</p>

<pre caption="Blok semua paket ICMP">
# <i>iptables -A INPUT -p icmp -j DROP</i>
</pre>

<p>
Pertama-tama kita tentukan rantai yang akan kita tambahkan aturan, kemudian
protokol paket, dan terakhir target. Target boleh sebagai nama dari rantai
yang ditentukan oleh user atau salah satu dari target-target khusus
<c>ACCEPT</c>, <c>DROP</c>, <c>REJECT</c>, <c>LOG</c>, <c>QUEUE</c>, atau
<c>MASQUERADE</c>. Pada contoh ini kita menggunakan <c>DROP</c>, yang akan
menolak semua paket tanpa merespon ke klien.
</p>

<note>
Target <c>LOG</c> dikenal juga sebagai "non-terminating". Jika paket cocok
dengan aturan pada target <c>LOG</c>, evaluasi tidak akan dihentikan, tetapi
paket akan terus dicocokkan dengan aturan-aturan selanjutnya. Dengan begini
anda dapat me-log semua paket sambil terus memprosesnya seperti biasa.
</note>

<p>
Sekarang coba <c>ping localhost</c>. Anda tidak akan mendapatkan respon apa-apa
karena iptables akan menolak semua pesa-pesan ICMP. Anda juga tidak dapat
melakukan ping ke komputer lain, karena paket balasan ICMP juga akan ditolak.
Sekarang hapus rantai tersebut agar ICMP dapat mengalir kembali.
</p>

<pre caption="Hapus semua rantai">
# <i>iptables -F</i>
</pre>

<p>
Sekarang mari kita melihat ke <e>stateful packet filtering</e> pada iptables.
Untuk mengaktifkan inspeksi stateful pada paket yang datang dari eth0, kita
perlu menjalankan perintah berikut:
</p>

<pre caption="Menerima paket yang berasal dari koneksi yang telah sukses">
# <i>iptables -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</i>
</pre>

<p>
Ini akan menerima semua paket dari koneksi yang telah sukses atau terkait di
rantai INPUT. Anda juga dapat menolak paket yang tidak terdapat pada table
state dengan menjalankan <c>iptables -A INPUT -i eth0 -m state --state INVALID
-j DROP</c> sebelum menjalankan perintah sebelumnya. Ini akan mengefektifkan
<e>stateful packet filtering</e> pada iptables dengan me-load ekstensi "state".
Jika anda ingin mengizinkan komputer lain untuk melakukan koneksi ke komputer
anda, anda dapat menggunakan flag <c>--state NEW</c>. Iptables memiliki
beberapa modul untuk berbagai tujuan. Di antaranya:s
</p>

<table>
<tr>
  <th>Modul/Match</th>
  <th>Penjelasan</th>
  <th>Opsi-opsi tambahan</th>
</tr>
<tr>
  <ti>mac</ti>
  <ti>Mencocokkan ekstensi untuk paket masuk berdasarkan alamat MAC.</ti>
  <ti>--mac-source</ti>
</tr>
<tr>
  <ti>state</ti>
  <ti>Mengaktifkan stateful inspection</ti>
  <ti>--state (bisa berupa ESTABLISHED,RELATED, INVALID, NEW)</ti>
</tr>
<tr>
  <ti>limit</ti>
  <ti>Batasan pencocokan rata-rata</ti>
  <ti>--limit, --limit-burst</ti>
</tr>
<tr>
  <ti>owner</ti>
  <ti>Mencoba untuk mencocokkan beberapa karakteristik dari pembuat paket</ti>
  <ti>
    --uid-owner userid --gid-owner groupid --pid-owner processid --sid-owner
    sessionid
  </ti>
</tr>
<tr>
  <ti>unclean</ti>
  <ti>Berbagai pemeriksaan pada paket</ti><ti></ti>
</tr>
</table>

<p>
Mari kita mencoba menciptakan sebuah rantai sendiri dan menerapkannya ke rantai
yang sudah ada:
</p>

<pre caption="Menciptakan sebuah rantai baru">
<comment>(Menciptakan sebuah rantai baru dengan satu aturan)</comment>
# <i>iptables -X mychain</i>
# <i>iptables -N mychain</i>
# <i>iptables -A mychain -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</i>
<comment>(Aturan defaultnya adalah semua traffic keluar diijinkan dan semua traffic ke dalam ditolak.)</comment>
# <i>iptables -P OUTPUT ACCEPT</i>
# <i>iptables -P INPUT DROP</i>
<comment>(Lalu tambahkan ke rantai INPUT)</comment>
# <i>iptables -A INPUT -j mychain</i>
</pre>

<p>
Dengan menerapkan aturan tersebut ke rantai INPUT maka kita memiliki aturan:
Semua paket keluar diijinkan dan semua paket masuk ditolak.
</p>

<p>
Anda dapat membaca dokumentasinya di <uri
link="http://www.iptables.org/documentation/index.html#HOWTO">Dokumentasi
Netfilter/Iptables</uri>.
</p>

<p>
Mari kita lihat sebuah contoh lengkap. Pada contoh ini, aturan firewall/gateway
menyatakan:
</p>

<ul>
  <li>Koneksi ke firewall hanya diijinkan melalui SSH (port 22)</li>
  <li>
    Jaringan lokal harus mendapatkan akses ke HTTP, HTTPS dan SSH (DNS juga
    harus diijinkan)
  </li>
  <li>
    Traffic ICMP bisa saja mengandung payload maka tidak bolek diijinkan.
    Tentu saja kita perlu mengecualikan beberapa traffic ICMP.
  </li>
  <li>Scan port harus dilacak dan di-log</li>
  <li>Penyerangan SYN harus dihindari</li>
  <li>Semua traffic lain harus ditolak dan di-log</li>
</ul>

<pre caption="/etc/init.d/firewall">
#!/sbin/runscript
IPTABLES=/sbin/iptables
IPTABLESSAVE=/sbin/iptables-save
IPTABLESRESTORE=/sbin/iptables-restore
FIREWALL=/etc/firewall.rules
DNS1=212.242.40.3
DNS2=212.242.40.51
# dalam
IIP=10.0.0.2
IINTERFACE=eth0
LOCAL_NETWORK=10.0.0.0/24
# luar
OIP=217.157.156.144
OINTERFACE=eth1

opts="${opts} showstatus panic save restore showoptions rules"

depend() {
  need net
}

rules() {
  stop
  ebegin "Setting internal rules"

  einfo "Setting default rule to drop"
  $IPTABLES -P FORWARD DROP
  $IPTABLES -P INPUT   DROP
  $IPTABLES -P OUTPUT  DROP

  # aturan default
  einfo "Creating states chain"
  $IPTABLES -N allowed-connection
  $IPTABLES -F allowed-connection
  $IPTABLES -A allowed-connection -m state --state ESTABLISHED,RELATED -j ACCEPT
  $IPTABLES -A allowed-connection -i $IINTERFACE -m limit -j LOG --log-prefix \
      "Bad packet from ${IINTERFACE}:"
  $IPTABLES -A allowed-connection -j DROP

  # traffic ICMP
  einfo "Creating icmp chain"
  $IPTABLES -N icmp_allowed
  $IPTABLES -F icmp_allowed
  $IPTABLES -A icmp_allowed -m state --state NEW -p icmp --icmp-type \
      time-exceeded -j ACCEPT
  $IPTABLES -A icmp_allowed -m state --state NEW -p icmp --icmp-type \
      destination-unreachable -j ACCEPT
  $IPTABLES -A icmp_allowed -p icmp -j LOG --log-prefix "Bad ICMP traffic:"
  $IPTABLES -A icmp_allowed -p icmp -j DROP

  # traffic masuk
  einfo "Creating incoming ssh traffic chain"
  $IPTABLES -N allow-ssh-traffic-in
  $IPTABLES -F allow-ssh-traffic-in
  # pencegahan flood
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \
      ALL RST --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \
      ALL FIN --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \
      ALL SYN --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m state --state RELATED,ESTABLISHED -p tcp --dport ssh -j ACCEPT

  # traffic keluar
  einfo "Creating outgoing ssh traffic chain"
  $IPTABLES -N allow-ssh-traffic-out
  $IPTABLES -F allow-ssh-traffic-out
  $IPTABLES -A allow-ssh-traffic-out -p tcp --dport ssh -j ACCEPT

  einfo "Creating outgoing dns traffic chain"
  $IPTABLES -N allow-dns-traffic-out
  $IPTABLES -F allow-dns-traffic-out
  $IPTABLES -A allow-dns-traffic-out -p udp -d $DNS1 --dport domain \
      -j ACCEPT
  $IPTABLES -A allow-dns-traffic-out -p udp -d $DNS2 --dport domain \
     -j ACCEPT

  einfo "Creating outgoing http/https traffic chain"
  $IPTABLES -N allow-www-traffic-out
  $IPTABLES -F allow-www-traffic-out
  $IPTABLES -A allow-www-traffic-out -p tcp --dport www -j ACCEPT
  $IPTABLES -A allow-www-traffic-out -p tcp --dport https -j ACCEPT

  # tangkap portscanners
  einfo "Creating portscan detection chain"
  $IPTABLES -N check-flags
  $IPTABLES -F check-flags
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL FIN,URG,PSH -m limit \
      --limit 5/minute -j LOG --log-level alert --log-prefix "NMAP-XMAS:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL ALL -m limit --limit \
      5/minute -j LOG --log-level 1 --log-prefix "XMAS:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL ALL -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG \
      -m limit --limit 5/minute -j LOG --log-level 1 --log-prefix "XMAS-PSH:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL NONE -m limit \
      --limit 5/minute -j LOG --log-level 1 --log-prefix "NULL_SCAN:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL NONE -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,RST SYN,RST -m limit \
      --limit 5/minute -j LOG --log-level 5 --log-prefix "SYN/RST:"
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit \
      --limit 5/minute -j LOG --log-level 5 --log-prefix "SYN/FIN:"
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

  # terapkan dan tambahkan status invalid ke rantai
  einfo "Applying chains to INPUT"
  $IPTABLES -A INPUT -m state --state INVALID -j DROP
  $IPTABLES -A INPUT -p icmp -j icmp_allowed
  $IPTABLES -A INPUT -j check-flags
  $IPTABLES -A INPUT -i lo -j ACCEPT
  $IPTABLES -A INPUT -j allow-ssh-traffic-in
  $IPTABLES -A INPUT -j allowed-connection

  einfo "Applying chains to FORWARD"
  $IPTABLES -A FORWARD -m state --state INVALID -j DROP
  $IPTABLES -A FORWARD -p icmp -j icmp_allowed
  $IPTABLES -A FORWARD -j check-flags
  $IPTABLES -A FORWARD -o lo -j ACCEPT
  $IPTABLES -A FORWARD -j allow-ssh-traffic-in
  $IPTABLES -A FORWARD -j allow-www-traffic-out
  $IPTABLES -A FORWARD -j allowed-connection

  einfo "Applying chains to OUTPUT"
  $IPTABLES -A OUTPUT -m state --state INVALID -j DROP
  $IPTABLES -A OUTPUT -p icmp -j icmp_allowed
  $IPTABLES -A OUTPUT -j check-flags
  $IPTABLES -A OUTPUT -o lo -j ACCEPT
  $IPTABLES -A OUTPUT -j allow-ssh-traffic-out
  $IPTABLES -A OUTPUT -j allow-dns-traffic-out
  $IPTABLES -A OUTPUT -j allow-www-traffic-out
  $IPTABLES -A OUTPUT -j allowed-connection

  # ijinkan client untuk melakukan route melalui NAT (Network Address Translation)
  $IPTABLES -t nat -A POSTROUTING -o $OINTERFACE -j MASQUERADE
  eend $?
}

start() {
  ebegin "Starting firewall"
  if [ -e "${FIREWALL}" ]; then
    restore
  else
    einfo "${FIREWALL} does not exists. Using default rules."
    rules
  fi
  eend $?
}

stop() {
  ebegin "Stopping firewall"
  $IPTABLES -F
  $IPTABLES -t nat -F
  $IPTABLES -X
  $IPTABLES -P FORWARD ACCEPT
  $IPTABLES -P INPUT   ACCEPT
  $IPTABLES -P OUTPUT  ACCEPT
  eend $?
}

showstatus() {
  ebegin "Status"
  $IPTABLES -L -n -v --line-numbers
  einfo "NAT status"
  $IPTABLES -L -n -v --line-numbers -t nat
  eend $?
}

panic() {
  ebegin "Setting panic rules"
  $IPTABLES -F
  $IPTABLES -X
  $IPTABLES -t nat -F
  $IPTABLES -P FORWARD DROP
  $IPTABLES -P INPUT   DROP
  $IPTABLES -P OUTPUT  DROP
  $IPTABLES -A INPUT -i lo -j ACCEPT
  $IPTABLES -A OUTPUT -o lo -j ACCEPT
  eend $?
}

save() {
  ebegin "Saving Firewall rules"
  $IPTABLESSAVE &gt; $FIREWALL
  eend $?
}

restore() {
  ebegin "Restoring Firewall rules"
  $IPTABLESRESTORE &lt; $FIREWALL
  eend $?
}

restart() {
  svc_stop; svc_start
}

showoptions() {
  echo "Usage: $0 {start|save|restore|panic|stop|restart|showstatus}"
  echo "start)      will restore setting if exists else force rules"
  echo "stop)       delete all rules and set all to accept"
  echo "rules)      force settings of new rules"
  echo "save)       will store settings in ${FIREWALL}"
  echo "restore)    will restore settings from ${FIREWALL}"
  echo "showstatus) Shows the status"
}
</pre>

<p>
Beberapa saran untuk anda ketika membuat firewall:
</p>

<ol>
  <li>
    Buatlah dulu aturan/kebijakan firewall anda sebelum mengimplementasikannya
  </li>
  <li>Buatlah aturan yang sederhana</li>
  <li>
    Ketahui cara kerja setiap protokol (bacalah <uri
    link="http://www.ietf.org/">RFC</uri>(Request For Comments) yang sesuai)
  </li>
  <li>
    Ingat selalu bahwa firewall hanyalah software biasa yang dijalankan oleh
    root.
  </li>
  <li>Uji coba firewall anda</li>
</ol>

<p>
Jika menurut anda iptables terlalu sulit untuk dipelajari atau membutuhkan
waktu yang cukup lama untuk membuat firewall bagus, anda dapat menggunakan <uri
link="http://www.shorewall.net">Shorewall</uri>. Pada dasarnya ini menggunakan
iptables untuk menciptakan aturan-aturan firewall, tetapi berkonsentrasi pada
aturan dan bukan pada protokol tertentu.
</p>

</body>
</section>
<section>
<title>Squid</title>
<body>

<p>
Squid adalah server proxy yang sangat handal. Ia dapat menyaring traffic
berdasarkan waktu, <e>regular expressions</e> di path/URI, alamat IP sumber dan
tujuan, domain, browser, nama user yang teah diotentikasi, tipe MIME, dan nomor
port (protokol). Penulis mungkin lupa menyebutkan beberapa fitur lain karena
terlalu banyak jika harus disebutkan semua di sini.
</p>

<p>
Pada contoh berikut ini, penulis telah menambahkan penyaring <e>banner</e>
sebagai ganti penyaring berbasis situs-situs porno. Alasannya karena Gentoo.org
seharusnya <b>tidak</b> dicantumkan sebagai situs porno. Selain itu penulis
juga tidak ingin menyia-nyiakan waktu untuk membuat daftar situs porno.
</p>

<p>
Pada contoh ini, aturannya menyatakan:
</p>

<ul>
  <li>
    <e>Surfing</e> (HTTP/HTTPS) diijinkan selama jam kerja (senin-jum'at 8-17 dan
    sabtu 8-13), tetapi jika karyawan masih ada di kantor pada malam hari maka
    mereka seharusnya bekerja, bukan menjelajahi internet
  </li>
  <li>
    Download dilarang (.exe, .com, .arj, .zip, .asf, .avi, .mpg, .mpeg, dll)
  </li>
  <li>
    Kita tidak menyukai <e>banner</e>, jadi kita saring dan gantikan dengan gif
    transparan (di sini anda harus kreatif!)
  </li>
  <li>
    Semua koneksi lain dari dan ke internet ditolak
  </li>
</ul>

<p>
Aturan-aturan ini diimplementasikan dengan 4 langkah <e>mudah</e>:
</p>

<pre caption="/etc/squid/squid.conf">
# ikatkan ke sebuah IP dan port
http_port 10.0.2.1:3128

# konfigurasi standar
hierarchy_stoplist cgi-bin ?
acl QUERY urlpath_regex cgi-bin \?
no_cache deny QUERY

# tambahkan daftar kendali akses dasar
acl all src 0.0.0.0/0.0.0.0
acl manager proto cache_object
acl localhost src 127.0.0.1/255.255.255.255

# tambahkan siapa saja yang boleh mengakses server proxy ini
acl localnet src 10.0.0.0/255.255.0.0

# dan port
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 443
acl purge method PURGE

# tambahkan daftar kendali akses berdasarkan regular
# expressions di dalam URL
acl archives urlpath_regex "/etc/squid/files.acl"
acl url_ads url_regex "/etc/squid/banner-ads.acl"

# tambahkan daftar kendali akses berdasarkan waktu dan hari
acl restricted_weekdays time MTWHF 8:00-17:00
acl restricted_weekends time A 8:00-13:00

acl CONNECT method CONNECT

# ijinkan manajer untuk mengakses dari localhost
http_access allow manager localhost
http_access deny manager

# hanya ijinkan permintaan "purge" dari localhost
http_access allow purge localhost
http_access deny purge

# tolak permintaan dari port tak dikenal
http_access deny !Safe_ports

# tolak CONNECT ke selain port SSL
http_access deny CONNECT !SSL_ports

# aturan-aturan tambahan dari penulis

# tambahkan sebuah halaman untuk menggantikan banner
deny_info NOTE_ADS_FILTERED url_ads

# lalu tolak semua banner
http_access deny url_ads

# tolak semua file arsip
http_access deny archives

# perketat akses selama jam kerja
http_access allow localnet restricted_weekdays
http_access allow localnet restricted_weekends

# tolak semua yang tidak tercantum
http_access deny all
</pre>

<p>
Selanjutnya, cantumkan semua jenis file yang tidak boleh di-download. Penulis
mencantumkan zip, viv, exe, mp3, rar, ace, avi, mov, mpg, mpeg, au, ra, arj,
tar, gz dan z.
</p>

<pre caption="/etc/squid/files.acl">
\.[Zz][Ii][pP]$
\.[Vv][Ii][Vv].*
\.[Ee][Xx][Ee]$
\.[Mm][Pp]3$
\.[Rr][Aa][Rr]$
\.[Aa][Cc][Ee]$
\.[Aa][Ss][Ff]$
\.[Aa][Vv][Ii]$
\.[Mm][Oo][Vv]$
\.[Mm][Pp][Gg]$
\.[Mm][Pp][Ee][Gg]$
\.[Aa][Uu]$
\.[Rr][Aa]$
\.[Aa][Rr][Jj]$
\.[Tt][Aa][Rr]$
\.[Gg][Zz]$
\.[Zz]$
</pre>

<note>
Perhatikan tanda [] dengan hurup besar dan kecil. Ini diperlukan agar penyaring
kita tidak dibodohi oleh akses file AvI.
</note>

<p>
Lalu kita tambahkan <e>regular expressions</e> untuk mengenali <e>banner</e>.
Anda mungkin lebih kreatif:
</p>

<pre caption="/etc/squid/banner-ads.acl">
/adv/.*\.gif$
/[Aa]ds/.*\.gif$
/[Aa]d[Pp]ix/
/[Aa]d[Ss]erver
/[Aa][Dd]/.*\.[GgJj][IiPp][FfGg]$
/[Bb]annerads/
/adbanner.*\.[GgJj][IiPp][FfGg]$
/images/ad/
/reklame/
/RealMedia/ads/.*
^http://www\.submit-it.*
^http://www\.eads.*
^http://ads\.
^http://ad\.
^http://ads02\.
^http://adaver.*\.
^http://adforce\.
adbot\.com
/ads/.*\.gif.*
_ad\..*cgi
/Banners/
/SmartBanner/
/Ads/Media/Images/
^http://static\.wired\.com/advertising/
^http://*\.dejanews\.com/ads/
^http://adfu\.blockstackers\.com/
^http://ads2\.zdnet\.com/adverts
^http://www2\.burstnet\.com/gifs/
^http://www.\.valueclick\.com/cgi-bin/cycle
^http://www\.altavista\.com/av/gifs/ie_horiz\.gif
</pre>

<p>
Terakhir, ini adalah file yang akan ditampilkan untuk mengganti banner. Pada
dasarnya ini adalah file setengah html dengan gambar gif transparan 4x4.
</p>

<pre caption="/etc/squid/errors/NOTE_ADS_FILTERED">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META HTTP-EQUIV="REFRESH" CONTENT="0; URL=http://localhost/images/4x4.gif"&gt;
&lt;TITLE>ERROR: The requested URL could not be retrieved&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Add filtered!&lt;/H1&gt;
</pre>

<note>
Jangan tutup tag &lt;HTML&gt; &lt;BODY&gt; . Ini akan dilakukan oleh squid.
</note>

<p>
Seperti yang bisa anda lihat, squid memiliki banyak sekali kemungkinan dan
sangat efektif dalam penyaringan dan proxy. Squid bahkan dapat menggunakan
proxy squid alternatif lain untuk mengskalakan jaringan yang sangat besar.
Konfigurasi di atas cocok untuk jaringan kecil dengan 1-20 pengguna.
</p>

<p>
Walaupun menggabungkan penyaring paket (iptables) dan gerbang aplikasi (Squid)
mungkin merupakan solusi terbaik, bahkan jika squid ditempatkan pada tempat
yang tidak dapat diakses oleh siapapun dari luar, kita masih perlu memikirkan
tentang penyerangan dari dalam.
</p>

<p>
Sekarang anda harus mengkonfigurasi browser klien anda agar menggunakan server
proxy. Gateway akan mencegah semua klien untuk melakukan kontak dengan dunia
luar kecuali menggunakan proxy.
</p>

<note>
Di Mozilla Firefox, pengaturannya ada di Edit->Preferences->Advanced->Network.
</note>

<p>
Anda juga dapat melakukannya secara transparan dengan menggunakan iptables
untuk mem-<e>forward</e> semua traffic keluar ke proxy squid, yaitu dengan
menambahkan aturan forwarding/prerouting di gateway:
</p>

<pre caption="Aktifkan portforwarding ke server proxy">
# <i>iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to proxyhost:3128</i>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to proxyhost:3128</i>
</pre>

<note>
Jika server proxy juga menjalankan penyaringan paket --hal ini tidak dianjurkan
tetapi mungkin terpaksa dilakukan jika tidak ada komputer lain-- gunakan target
<c>REDIRECT</c> sebagai ganti <c>DNAT</c> (<c>REDIRECT</c> mengarahkan semua
paket ke localhost).
</note>

</body>
</section>
<section>
<title>Pelajaran yang telah diambil</title>
<body>

<p>
Kita telah mempelajari:
</p>

<ol>
  <li>
    Bahwa firewall sendiri bisa menjadi resiko baru. Memiliki firewall yang
    tidak dikonfigurasi dengan benar lebih berbahaya daripada tidak memiliki
    firewall sama sekali.
  </li>
  <li>Cara menyiapkan gateway dasar dan transparent proxy.</li>
  <li>
    Kunci firewall yang bagus adalah dengan mengetahui semua protokol yang akan
    diijinkan.
  </li>
  <li>
    Traffic IP tidak selalu berisi data yang benar, mis. paket ICMP yang bisa
    saja mengandung <e>payload</e> jahat.
  </li>
  <li>Cara mencegah penyerangan SYN.</li>
  <li>
    Cara menyaring traffic HTTP dengan membuang gambar-gambar tidak senonoh dan
    mencegah download virus.
  </li>
  <li>
    Menggabungkan penyaring paket dan gerbang aplikasi dapat memberikan kendali
    yang lebih baik.
  </li>
</ol>

<p>
Sekarang, jika anda <e>benar-benar</e> memerlukannya, buatlah firewall sesuai
dengan kebutuhan anda.
</p>

</body>
</section>

</sections>
