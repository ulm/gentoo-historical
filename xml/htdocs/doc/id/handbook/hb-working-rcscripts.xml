<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $Id: hb-working-rcscripts.xml,v 1.10 2007/12/16 13:03:44 neysx Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<abstract>
Gentoo menggunakan sebuah format skrip init khusus yang, di antara fitur-fitur
lain, menyediakan pilihan berdasarkan dependensi dan skrip init virtual. Bab
ini menjelaskan seluruh aspek tersebut dan cara bekerja dengan skrip-skrip ini.
</abstract>

<version>1.25</version>
<date>2007-10-11</date>

<section>
<title>Runlevel</title>
<subsection>
<title>Boot Sistem</title>
<body>

<p>
Ketika sistem anda boot, anda akan melihat banyak teks yang beterbangan. Jika
anda memperhatikan dengan benar, anda akan mengetahui bahwa teks ini adalah
teks yang selalu ditampilkan setiap kali sistem anda boot. Urutan dalam semua
proses ini disebut <e>boot sequences</e> dan (lebih kurang) didefenisikan
secara statis.
</p>

<p>
Pertama-tama, bootloader akan memuat imej kernel yang telah anda tentukan di
konfigurasi bootloader ke dalam memori, setelah itu bootloader memerintahkan
CPU untuk menjalankan kernel. Ketika kernel telah dimuat dan dialankan,
bootloader akan menginisialisasi semua struktur dan tugas-tugas khusus kernel
dan memulai proses <c>init</c>.
</p>

<p>
Proses ini kemudian akan memastikan bahwa semua filesystem (yang didefenisikan
dalam <path>/etc/fstab</path>) dimuat dan siap digunakan. Kemudian beberapa
skrip yang berada pada <path>/etc/init.d</path> akan dijalankan, yang akan
memulai servis yang anda perlukan untuk menghasilkan suatu sistem yang sukses
di-boot.
</p>

<p>
Terakhir, setelah semua skrip dijalankan, <c>init</c> mengaktifkan
terminal-terminal (dalam banyak kasus ini berupa konsol virtual yang
tersembunyi di dalam <c>Alt-F1</c>, <c>Alt-F2</c>, dst) dengan melampirkan
proses khusus yang disebut <c>agetty</c> padanya. Proses ini akan memastikan
bahwa anda dapat login melalui terminal-terminal ini dengan menjalankan
<c>login</c>.
</p>

</body>
</subsection>
<subsection>
<title>Skrip Init</title>
<body>

<p>
<c>init</c> tidak hanya menjalankan skrip yang ada di dalam
<path>/etc/init.d</path> secara acak. Bahkan tidak menjalankan semua skrip yang
berada di dalam <path>/etc/init.d</path>, melainkan hanya skrip yang telah
diperintahkan untuk dijalankan saja. Skrip yang akan dijalankan ditentukan
dengan melihat isi <path>/etc/runlevels</path>.
</p>

<p>
Pertama-tama, <c>init</c> menjalankan semua skrip dari <path>/etc/init.d</path>
yang mempunyai symlink di <path>/etc/runlevels/boot</path>. Biasanya, skrip
dijalankan sesuai dengan urutan abjad, tetapi beberapa skrip mempunyai
dependensi di dalamnya, memberitahukan kepada sistem bahwa skrip yang lain
harus dijalankan terlebih dahulu sebelum ia dapat dijalankan.
</p>

<p>
Ketika semua skrip yang direferensikan oleh <path>/etc/runlevels/boot</path>
telah dijalankan, <c>init</c> melanjutkannya dengan menjalankan skrip yang
memiliki symlink di <path>/etc/runlevels/default</path>. Lagi-lagi, init akan
menggunakan urutan abjad untuk menentukan skrip mana yang akan dijalankan lebih
dulu, kecuali jika suatu skrip mempunyai dependensi di dalamnya yang menyebabkan
perubahan urutan agar skrip-skrip dijalankan dengan urutan yang benar.
</p>

</body>
</subsection>
<subsection>
<title>Cara Kerja Init</title>
<body>

<p>
Tentu saja <c>init</c> tidak memutuskan semuanya sendirian. Diperlukan sebuah
file konfigurasi yang menentukan tindakan apa saja yang harus diambil. File
konfigurasi ini adalah <path>/etc/inittab</path>.
</p>

<p>
Jika anda mengingat urutan boot yang telah kami jelaskan, anda akan mengingat
bahwa tindakan <c>init</c> yang pertama adalah melakukan mount semua filesystem.
Tindakan ini ditentukan pada baris berikut ini dalam <path>/etc/inittab</path>:
</p>

<pre caption="Baris inisialisasi sistem pada /etc/inittab">
si::sysinit:/sbin/rc sysinit
</pre>

<p>
Baris ini memerintahkan <c>init</c> untuk menjalankan <c>/sbin/rc sysinit</c>
untuk menginisialisasi sistem. Skrip <path>/sbin/rc</path> menangani proses
inisialisasi, jadi anda boleh saja mengatakan bahwa <c>init</c> tidaklah
bekerja banyak -- ia hanya memberikan tugas untuk menginisialisasi sistem
kepada proses lain.
</p>

<p>
Kedua, <c>init</c> menjalankan semua skrip yang mempunyai symlink di
<path>/etc/runlevels/boot</path> yang ditentukan pada baris berikut ini:
</p>

<pre caption="Inisialisasi sistem, lanjutan">
rc::bootwait:/sbin/rc boot
</pre>

<p>
Kemudian skrip <c>rc</c> akan melakukan tugas-tugas yang diperlukan. Perlu
dicatat bahwa opsi yang diberikan kepada <c>rc</c> (<e>boot</e>) sama dengan
subdirektori dari <path>/etc/runlevels</path> yang dipergunakan.
</p>

<p>
Sekarang <c>init</c> akan memeriksa file konfigurasinya untuk melihat
<e>runlevel</e> apa yang perlu dijalankan. Untuk memutuskan hal ini, maka
baris berikut ini dari <path>/etc/inittab</path> akan dibaca:
</p>

<pre caption="Baris init default">
id:3:initdefault:
</pre>

<p>
Dalam hal ini (dimana mayoritas pengguna Gentoo akan menggunakannya), <e>id</e>
<e>runlevel</e> adalah 3. Dengan menggunakan informasi ini, <c>init</c> akan
memeriksa apa saja yang harus dijalankan untuk memulai <e>runlevel 3</e>:
</p>

<pre caption="Defenisi runlevel">
l0:0:wait:/sbin/rc shutdown
l1:S1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
</pre>

<p>
Baris yang mendefenisikan level 3, sekali lagi, menggunakan skrip <c>rc</c>
untuk memulai servis (dengan argumen <e>default</e>). Perlu dicatat juga bahwa
argumen <c>rc</c> sama dengan subdirektori di dalam
<path>/etc/runlevels</path>.
</p>

<p>
Ketika <c>rc</c> selesai dijalankan, <c>init</c> menentukan konsol virtual apa
yang perlu diaktifkan dan perintah apa yang perlu dijalankan pada setiap konsol:
</p>

<pre caption="Defenisi konsol virtual">
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
</pre>

</body>
</subsection>
<subsection>
<title>Apakah runlevel itu?</title>
<body>

<p>
Anda telah mengetahui bahwa <c>init</c> menggunakan skema penomoran untuk
menentukan <e>runlevel</e> apa yang harus diaktifkan. Sebuah <e>runlevel</e>
adalah sebuah kondisi dimana sistem berjalan dan berisi koleksi skrip (skrip
runlevel atau <e>initscripts</e>) yang harus dijalankan ketika anda memasuki
atau meninggalkan suatu runlevel.
</p>

<p>
Di Gentoo, terdapat tujuh runlevel yang didefenisikan, tiga runlevel internal,
dan empat runlevel yang didefenisikan user. Runlevel internal terdiri dari
<e>sysinit</e>, <e>shutdown</e> dan <e>reboot</e> dan melakukan hal-hal yang
sama dengan nama mereka: inisialisasi sistem, mematikan sistem dan reboot sistem.
</p>

<p>
Runlevel yang didefenisikan user berada di dalam subdirektori
<path>/etc/runlevels</path>: <path>boot</path>, <path>default</path>,
<path>nonetwork</path> dan <path>single</path>. Runlevel <path>boot</path>
memulai semua servis penting untuk sistem yang akan digunakan oleh
runlevel-runlevel lainnya. Sisa tiga runlevel dibedakan dari servis yang
dimulai: <path>default</path> digunakan untuk penggunaan sehari-hari,
<path>nonetwork</path> digunakan bila koneksi jaringan tidak diperlukan, dan
<path>single</path> digunakan ketika Anda harus memperbaiki sistem.
</p>

</body>
</subsection>
<subsection>
<title>Bekerja dengan Skrip Init</title>
<body>

<p>
Skrip yang dimulai oleh proses <c>rc</c> disebut <e>skrip init</e>.
Setiap skrip pada <path>/etc/init.d</path> dapat dieksekusi dengan argumen
<e>start</e>, <e>stop</e>, <e>restart</e>, <e>pause</e>, <e>zap</e>,
<e>status</e>, <e>ineed</e>, <e>iuse</e>, <e>needsme</e>, <e>usesme</e>
atau <e>broken</e>.
</p>

<p>
Untuk memulai, menghentikan atau memulai kembali suatu servis (dan semua servis
yang bergantung padanya), <c>start</c>, <c>stop</c> dan <c>restart</c> harus
digunakan:
</p>

<pre caption="Memulai postfix">
# <i>/etc/init.d/postfix start</i>
</pre>

<note>
Hanya servis yang <e>memerlukan</e> servis yang diberikan yang akan dihentikan
atau dimulai ulang. Servis lain yang bergantung padanya (yang <e>menggunakan</e>
servis ini tetapi tidak memerlukannya) tidak akan diutak-atik.
</note>

<p>
Jika anda ingin menghentikan suatu servis, tetapi bukan servis yang bergantung
padanya, anda dapat menggunakan argumen <c>pause</c>:
</p>

<pre caption="Menghentikan postfix tetapi membiarkan servis yang bergantung padanya tetap berjalan">
# <i>/etc/init.d/postfix pause</i>
</pre>

<p>
Jika Anda ingin melihat status dari suatu servis (started, stopped, paused,
...) Anda dapat menggunakan argumen <c>status</c>:
</p>

<pre caption="Informasi status postfix">
# <i>/etc/init.d/postfix status</i>
</pre>

<p>
Jika informasi status memberitahukan Anda bahwa suatu servis sedang berjalan,
tetapi Anda tahu bahwa itu tidak berjalan, maka Anda dapat mereset informasi
status ke "stopped" dengan argumen <c>zap</c>:
</p>

<pre caption="Reset informasi status postfix">
# <i>/etc/init.d/postfix zap</i>
</pre>

<p>
Untuk memeriksa dependensi dari servis tersebut, Anda dapat menggunakan
<c>iuse</c> atau <c>ineed</c>. Dengan <c>ineed</c> anda dapat melihat servis
yang benar-benar diperlukan oleh suatu servis untuk dapat berfungsi dengan
benar. Pada sisi lain, <c>iuse</c> menunjukkan servis yang dapat digunakan oleh
servis itu, tetapi tidak terlalu diperlukan untuk berfungsi dengan benar.
</p>

<pre caption="Melihat daftar semua servis yang dibutuhkan oleh postfix">
# <i>/etc/init.d/postfix ineed</i>
</pre>

<p>
Demikian juga, anda dapat melihat servis-servis apa saja yang memerlukan servis
tersebut (<c>needsme</c>) atau yang dapat menggunakannya (<c>usesme</c>):
</p>

<pre caption="Melihat daftar semua servis yang membutuhkan postfix">
# <i>/etc/init.d/postfix needsme</i>
</pre>

<p>
Terakhir, anda dapat melihat dependensi apa yang saja yang diperlukan oleh
servis tersebut tetapi tidak tersedia:
</p>

<pre caption="Melihat daftar dependensi yang tidak tersedia untuk postfix">
# <i>/etc/init.d/postfix broken</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Bekerja dengan rc-update</title>
<subsection>
<title>Apakah rc-update itu?</title>
<body>

<p>
Sistem init Gentoo menggunakan suatu pohon dependensi untuk menentukan
servis-servis apa saja yang harus dijalankan terlebih dulu. Karena ini
merupakan tugas yang membosankan, maka kami tidak ingin user kami melakukannya
secara manual. Kami telah membuatkan sebuah utilitas yang memudahkan
administrasi runlevel dan skrip init.
</p>

<p>
Dengan <c>rc-update</c> anda dapat menambah dan menghapus skrip init dari suatu
runlevel. Utilitas <c>rc-update</c> kemudian akan secara otomatis memerintahkan
skrip <c>depscan.sh</c> untuk membangun ulang pohon dependensi.
</p>

</body>
</subsection>
<subsection>
<title>Menambah dan Menghapus Servis</title>
<body>

<p>
Anda telah menambahkan beberapa skrip init pada runlevel "default" ketika
melakukan instalasi Gentoo. Pada saat itu, mungkin anda sama sekali tidak
mempunyai bayangan "default" itu untuk apa, tetapi sekarang anda seharusnya
sudah tahu. Skrip <c>rc-update</c> membutuhkan argumen kedua yang
mendefenisikan aksi: <e>add</e>, <e>del</e> atau <e>show</e>.
</p>

<p>
Untuk menambah atau menghapus sebuah skrip init, berikan argumen <c>add</c>
atau <c>del</c> kepada <c>rc-update</c>, diikuti dengan skrip init dan
runlevel. Sebagai contoh:
</p>

<pre caption="Menghapus postfix dari runlevel default">
# <i>rc-update del postfix default</i>
</pre>

<p>
Perintah <c>rc-update -v show</c> akan menunjukkan semua skrip init yang ada
dan daftar runlevel tempat mereka dijalankan:
</p>

<pre caption="Menampilkan informasi skrip init">
# <i>rc-update -v show</i>
</pre>

<p>
Anda juga bisa menjalankan <c>rc-update show</c> (tanpa opsi <c>-v</c>) jika
anda hanya ingin melihat skrip init yang telah diaktifkan bersama runlevelnya.
</p>

</body>
</subsection>
</section>
<section>
<title>Pengaturan Servis</title>
<subsection>
<title>Mengapa Diperlukan Pengaturan Tambahan?</title>
<body>

<p>
Skrip init dapat menjadi begitu rumit. Oleh karena itu akan menjadi sangat
tidak menarik bagi user untuk mengedit skrip init secara langsung, karena akan
membuatnya menjadi rentan terhadap kesalahan. Bagaimanapun juga, pengaturan
servis tersebut tetaplah penting. Contohnya, Anda mungkin ingin memberikan
opsi lebih untuk servis itu sendiri.
</p>

<p>
Alasan kedua untuk memiliki pengaturan ini di luar skrip init adalah agar dapat
melakukan update skrip init tanpa harus khawatir dibatalkannya perubahan pada
pengaturan anda.
</p>

</body>
</subsection>
<subsection>
<title>Direktori /etc/conf.d</title>
<body>

<p>
Gentoo memberikan cara mudah untuk mengatur suatu servis: setiap skrip init
yang dapat dikonfigurasi, mempunyai suatu file di dalam
<path>/etc/conf.d</path>. Contohnya, skrip init apache2 (bernama
<path>/etc/init.d/apache2</path>) mempunyai suatu file konfigurasi yang bernama
<path>/etc/conf.d/apache2</path>, yang dapat berisi opsi-opsi yang ingin anda
berikan kepada server Apache 2 ketika memulai servis tersebut:
</p>

<pre caption="Variable yang didefenisikan pada /etc/conf.d/apache2">
APACHE2_OPTS="-D PHP5"
</pre>

<p>
File konfigurasi tersebut berisi variabel, dan hanya variabel (seperti
<path>/etc/make.conf</path>), sehingga konfigurasi servis menjadi sangat mudah.
Dan juga, kita dapat memberikan lebih banyak informasi mengenai variabel
(sebagai komentar).
</p>

</body>
</subsection>
</section>
<section>
<title>Menulis Skrip Init</title>
<subsection>
<title>Haruskah saya melakukannya?</title>
<body>

<p>
Tidak. Menulis skrip init biasanya tidak diperlukan, karena Gentoo telah 
menyediakan skrip init siap pakai untuk semua servis yang disediakan. Tetapi,
anda mungkin telah menginstal suatu servis tanpa menggunakan Portage, sehingga
anda harus membuat sendiri skrip initnya.
</p>

<p>
Jangan gunakan skrip init yang disediakan oleh servis tersebut bila tidak
disebutkan secara jelas bahwa skrip tersebut ditulis untuk Gentoo: skrip init
Gentoo tidak kompatibel dengan skrip init yang digunakan oleh distro lain!
</p>

</body>
</subsection>
<subsection>
<title>Layout</title>
<body>

<p>
Layout dasar dari sebuah skrip init ditunjukkan di bawah ini.
</p>

<pre caption="Layout dasar skrip init">
#!/sbin/runscript

depend() {
  <comment>(Informasi dependensi)</comment>
}

start() {
  <comment>(Perintah penting untuk memulai servis)</comment>
}

stop() {
  <comment>(Perintah penting untuk menghentikan servis)</comment>
}

restart() {
  <comment>(Perintah penting untuk memulai kembali servis)</comment>
}
</pre>

<p>
Semua skrip init <e>mengharuskan</e> fungsi <c>start()</c> didefenisikan.
Sedangkan seksi yang lain adalah opsional.
</p>

</body>
</subsection>
<subsection>
<title>Dependensi</title>
<body>

<p>
Terdapat dua dependensi yang dapat Anda defenisikan: <c>use</c> dan <c>need</c>.
Seperti yang telah kami sebutkan sebelumnya, dependensi <c>need</c> lebih ketat
daripada dependensi <c>use</c>. Mengikuti tipe dependensi ini, anda memasukkan
servis yang dibutuhkan atau dependensi <e>virtual</e>.
</p>

<p>
Dependensi <e>virtual</e> adalah suatu dependensi yang diberikan oleh suatu
servis, tetapi tidak melulu cuma bisa diberikan oleh servis itu saja. Skrip
anda dapat bergantung pada logger sistem, tetapi terdapat banyak logger sistem
yang tersedia (metalogd, syslog-ng, sysklogd, ...). Karena anda tidak dapat
<c>menjalankan</c> semuanya (tidak ada sistem yang menginstal dan menjalankan
semua logger sistem ini dalam satu waktu) kami memastikan bahwa semua servis
ini <c>menyediakan</c> sebuah dependensi virtual.
</p>

<p>
Mari kita lihat informasi dependensi untuk servis postfix.
</p>

<pre caption="Informasi dependensi postfix">
depend() {
  need net
  use logger dns
  provide mta
}
</pre>

<p>
Seperti yang anda lihat, servis postfix:
</p>

<ul>
  <li>
    membutuhkan dependensi <c>net</c> (virtual) (yang disediakan oleh -
    misalnya - <path>/etc/init.d/net.eth0</path>)
  </li>
  <li>
    menggunakan dependensi <c>logger</c> (virtual) (yang disediakan oleh -
    misalnya - <path>/etc/init.d/syslog-ng</path>)
  </li>
  <li>
    menggunakan dependensi <c>dns</c> (virtual) (yang disediakan oleh -
    misalnya - <path>/etc/init.d/named</path>)
  </li>
  <li>
    menyediakan dependensi <c>mta</c> (virtual) (yang umum untuk semua
    server mail)
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>Mengatur urutan</title>
<body>

<p>
Dalam beberapa kasus, anda mungkin tidak membutuhkan suatu servis, tetapi
menginginkan servis anda dimulai <c>sebelum</c> (atau <c>sesudah</c>) servis
yang lain dijalankan <e>jika</e> tersedia dalam sistem (catatan kondisi - ini
sudah bukan merupakan dependensi) <e>dan</e> berjalan dalam runlevel yang sama
(catatan kondisi - hanya servis yang berada dalam runlevel yang sama yang
terlibat). Anda dapat memberikan informasi ini dengan <c>before</c> atau
<c>after</c>.
</p>

<p>
Sebagai contoh, kita akan melihat setting dari servis Portmap:
</p>

<pre caption="Fungsi depend() pada servis portmap">
depend() {
  need net
  before inetd
  before xinetd
}
</pre>

<p>
Anda dapat juga menggunakan glob "*" untuk menangkap semua servis yang berada
pada runlevel yang sama, meskipun hal ini tidak dianjurkan.
</p>

<pre caption="Menjalankan skrip init sebagai skrip pertama pada runlevel">
depend() {
  before *
}
</pre>

<p>
Jika servis anda harus menulis ke disk lokal, servis tersebut harus memerlukan
<c>localmount</c>. Jika servis tersebut menempatkan sesuatu di dalam
<path>/var/run</path> sebagai sebuah pidfile, maka servis tersebut harus
dijalankan setelah <c>bootmisc</c>:
</p>

<pre caption="Contoh fungsi depend()">
depend() {
  need localmount
  after bootmisc
}
</pre>

</body>
</subsection>
<subsection>
<title>Fungsi standar</title>
<body>

<p>
Setelah fungsi <c>depend()</c>, anda juga perlu mendefenisikan fungsi
<c>start()</c>. Fungsi ini berisi semua perintah yang diperlukan untuk
menginisialisasi servis Anda. Dianjurkan untuk menggunakan fungsi <c>ebegin</c>
dan <c>eend</c> untuk menginformasikan kepada user apa saja yang sedang terjadi:
</p>

<pre caption="Contoh fungsi start()">
start() {
  ebegin "Starting my_service"
  start-stop-daemon --start --quiet --exec /path/to/my_service \
    --pidfile /path/to/my_pidfile
  eend $?
}
</pre>

<p>
<c>--exec</c> dan <c>--pidfile</c> harus digunakan pada fungsi start dan stop.
Jika servis tidak menciptakan sebuah pidfile, maka gunakan <c>--make-pidfile</c>
jika memungkinkan, tetapi anda harus mencobanya dahulu untuk memastikan. Jika
tidak, jangan gunakan pidfile. Anda juga dapat menambahkan <c>--quiet</c> pada
opsi <c>start-stop-daemon</c>, tapi hal ini tidak dianjurkan kecuali servis
tersebut sangat verbose. Penggunaan <c>--quiet</c> dapat menghalangi proses
debugging jika servic tersebut gagal dimulai.
</p>

<note>
Pastikan agar <c>--exec</c> benar-benar memanggil sebuah servis, bukannya skrip
shell yang menjalankan servis kemudian berhenti -- inilah yang seharusnya
dijalankan oleh skrip init.
</note>

<p>
Jika anda memerlukan contoh lebih lanjut terkait fungsi <c>start()</c>,
silakan baca kode sumber dari skrip init yang tersedia di dalam direktori
<path>/etc/init.d</path>.
</p>

<p>
Fungsi lain yang dapat anda defenisikan adalah: <c>stop()</c> dan
<c>restart()</c>. Anda tidak diharuskan untuk mendefenisikan fungsi-fungsi ini!
Sistem init kita cukup cerdas untuk mengisi fungsi-fungsi ini secara otomatis
jika anda sudah menggunakan <c>start-stop-daemon</c>.
</p>

<p>
Walaupun anda tidak <e>harus</e> menciptakan fungsi <c>stop()</c>, berikut ini
adalah contohnya:
</p>

<pre caption="Contoh fungsi stop()">
stop() {
  ebegin "Stopping my_service"
  start-stop-daemon --stop --exec /path/to/my_service \
    --pidfile /path/to/my_pidfile
  eend $?
}
</pre>

<p>
Jika servis anda menjalankan skrip lain (mis. bash, python, atau perl), dan
skrip ini nantinya akan mengganti nama-nama (mis. <c>foo.py</c> ke <c>foo</c>),
maka anda perlu menambahkan <c>--name</c> ke <c>start-stop-daemon</c>. Anda
harus menentukan nama yang akan diganti oleh skrip anda. Pada contoh ini,
sebuah servis menjalankan <c>foo.py</c>, yang kemudian berganti nama menjadi
<c>foo</c>:
</p>

<pre caption="Servis yang menjalankan skrip foo">
start() {
  ebegin "Starting my_script"
  start-stop-daemon --start --exec /path/to/my_script \
    --pidfile /path/to/my_pidfile --name foo
  eend $?
}
</pre>

<p>
<c>start-stop-daemon</c> menyediakan manual yang sangat bagus jika anda
memerlukan informasi lebih lanjut:
</p>

<pre caption="Membaca manual start-stop-daemon">
# <i>man start-stop-daemon</i>
</pre>


<p>
Sintaks skrip init Gentoo berbasis Bourne Again Shell (bash), jadi anda bebas
menggunakan konstruksi yang kompatibel dengan bash di dalam skrip init anda.
</p>

</body>
</subsection>
<subsection>
<title>Menambahkan opsi kustomisasi</title>
<body>

<p>
Jika anda ingin skrip init anda mendukung opsi yang lebih <e>advanced</e>
daripada opsi-opsi yang telah kami sediakan, anda harus menambahkan opsi
tersebut pada variabel <c>opts</c>, dan membuat suatu fungsi dengan nama yang
sama dengan opsi tersebut. Contohnya, untuk mendukung sebuah opsi bernama
<c>restartdelay</c>:
</p>

<pre caption="Menambahkan dukungan opsi restartdelay">
opts="${opts} restartdelay"

restartdelay() {
  stop()
  sleep 3    <comment># Tunggu 3 detik sebelum menjalankan lagi</comment>
  start()
}
</pre>

</body>
</subsection>
<subsection>
<title>Variabel konfigurasi servis</title>
<body>

<p>
Anda tidak perlu melakukan apa-apa untuk menyediakan sebuah file konfigurasi di
dalam <path>/etc/conf.d</path>: jika skrip init anda dijalankan, file-file
berikut ini secara otomatis akan dijadikan sebagai sumber (variabel-variabel
tersedia untuk digunakan):
</p>

<ul>
  <li><path>/etc/conf.d/&lt;skrip init anda&gt;</path></li>
  <li><path>/etc/conf.d/basic</path></li>
  <li><path>/etc/rc.conf</path></li>
</ul>

<p>
Juga, jika skrip init anda menyediakan dependensi virtual (seperti <c>net</c>),
maka file yang diasosiasikan dengan dependensi itu (seperti
<path>/etc/conf.d/net</path>) juga akan dijadikan sebagai sumber.
</p>

</body>
</subsection>
</section>
<section>
<title>Mengubah Tingkah Laku Runlevel</title>
<subsection>
<title>Siapa yang akan diuntungkan?</title>
<body>

<p>
Banyak pengguna laptop yang mengetahui situasi ini: di rumah anda memerlukan
<c>net.eth0</c> sementara di perjalanan, anda tidak memerlukannya (karena
tidak ada jaringan yang tersedia). Dengan Gentoo, anda dapat mengubah tingkah
laku runlevel agar sesuai keinginan anda.
</p>

<p>
Contoh, anda dapat membuat suatu runlevel "default" kedua yang memiliki skrip
init yang berbeda di dalamnya. Kemudian, pada saat boot anda dapat memilih
runlevel default mana yang ingin anda gunakan.
</p>

</body>
</subsection>
<subsection>
<title>Menggunakan softlevel</title>
<body>

<p>
Pertama-tama, buatlah direktori runlevel untuk runlevel "default" anda yang
kedua. Sebagai contoh kami akan membuat runlevel <path>offline</path>:
</p>

<pre caption="Membuat direktori runlevel">
# <i>mkdir /etc/runlevels/offline</i>
</pre>

<p>
Tambahkan skrip init yang diperlukan pada runlevel yang baru dibuat ini.
Contoh, jika anda ingin memiliki duplikat yang sama persis dengan runlevel
<c>default</c> anda sekarang, tetapi tanpa <c>net.eth0</c>:
</p>

<pre caption="Menambahkan skrip init yang diperlukan">
<comment>(Salin seluruh servis dari runlevel default ke runlevel offline)</comment>
# <i>cd /etc/runlevels/default</i>
# <i>for service in *; do rc-update add $service offline; done</i>
<comment>(Menghapus servis yang tidak diperlukan dari runlevel offline)</comment>
# <i>rc-update del net.eth0 offline</i>
<comment>(Menampilkan servis aktif dari runlevel offline)</comment>
# <i>rc-update show offline</i>
<comment>(Contoh sebagian output)</comment>
                acpid | offline
           domainname | offline
                local | offline
             net.eth0 |
</pre>

<p>
Walaupun <c>net.eth0</c> telah dihapus dari runlevel offline, <c>udev</c> masih
akan tetap mencoba menjalankan semua perangkat yang ditemukannya dan
meluncurkan servis yang sesuai. Untuk itu, anda perlu menambahkan setiap servis
jaringan yang tidak anda ingin untuk dijalankan (juga servis untuk setiap
perangkat yang mungkin akan dijalankan oleh udev) ke
<path>/etc/conf.d/rc</path> seperti berikut:
</p>

<pre caption="Menonaktifkan peluncuran servis di /etc/conf.d/rc">
RC_COLDPLUG="yes"
<comment>(Selanjutnya, tentukan servis yang tidak ingin langsung anda jalankan</comment>
RC_PLUG_SERVICES="!net.eth0"
</pre>

<note>
Untuk mendapatkan info lanjutan tentang hal ini, bacalah komentar di dalam file
<path>/etc/conf.d/rc</path>.
</note>

<p>
Sekarang edit konfigurasi bootloader Anda dan tambahkan suatu entri baru untuk
runlevel <c>offline</c>. Misalnya, di file <path>/boot/grub/grub.conf</path>:
</p>

<pre caption="Menambahkan sebuah entri untuk runlevel offline">
title Gentoo Linux Offline Usage
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3 <i>softlevel=offline</i>
</pre>

<p>
VoilÃ, semuanya sudah siap sekarang. Jika Aada boot sistem  dan memilih entri
yang baru ditambahkan pada waktu boot, runlevel <c>offline</c> akan digunakan
sebagai ganti dari <c>default</c>.
</p>

</body>
</subsection>
<subsection>
<title>Menggunakan bootlevel</title>
<body>

<p>
Menggunakan <c>bootlevel</c> sangat sejalan dengan <c>softlevel</c>.
Perbedaannya di sini hanyalah anda mendefenisikan runlevel "boot" yang kedua
dan bukan runlevel "default" yang ke dua.
</p>

</body>
</subsection>
</section>
</sections>
