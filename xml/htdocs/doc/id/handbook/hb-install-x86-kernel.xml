<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- English doc rev. 1.1 -->

<sections>
<section>
<title>Zona Waktu (Timezone)</title>
<body>

<p>
Pertama, anda perlu memilih zona waktu anda agar sistem anda tahu dimana
dia berada. Carilah zona waktu anda di <path>/usr/share/zoneinfo</path>, lalu
buat sebuah link simbolik (symlink) ke <path>/etc/localtime</path> menggunakan
perintah <c>ln</c>:
</p>

<pre caption="Set zona waktu">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Misalnya anda ingin menggunakan GMT)</comment>
# <i>ln -sf /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Instal Source</title>
<subsection>
<title>Memilih Sebuah Kernel</title>
<body>

<p>
Inti/Jantung dari semua distro adalah kernel Linux. Kernel merupakan sebuah
lapisan antara program-program pengguna dengan perangkat keras sistem.
Gentoo menyediakan beberapa kernel kepada para penggunanya. Sebuah daftar
lengkap beserta penjelasannya dapat ditemui di <uri
link="/doc/id/gentoo-kernel.xml">Panduan Kernel Gentoo</uri>.
</p>

<p>
Untuk sistem berbasis x86 Gentoo menyediakan, di antara kernel-kernel lainnya,
<c>vanilla-sources</c> (kernel default yang dikembangkan oleh para developer
kernel Linux), <c>gentoo-sources</c> (kernel yang telah dipatch dengan
fitur-fitur peningkat performa), <c>gentoo-dev-sources</c> (kernel v2.6 yang
dipatch dengan fitur-fitur peningkat performa dan stabilitas),
<c>xfs-sources</c> (kernel dengan dukungan XFS terbaru), <c>gs-sources</c>
(kernel yang dipatch untuk penggunaan server), <c>gaming-sources</c> (kernel
yang dipatch untuk performa optimal gaming), <c>development-sources</c>
(kernel 2.6 murni), ...
</p>

<p>
Jika anda sedang melakukan instalasi tanpa jaringan, anda tidak dapat memilih
kernel-kernel yang tersedia secara bebas, karena kami hanya menyediakan
beberapa kernel saja. Dalam kasus ini, anda hanya dapat menggunakan
<c>vanilla-sources</c>, versi 2.4.24.
</p>

<p>
Pilihlah kernel anda dan instal menggunakan perintah <c>emerge</c>.
</p>

<p>
Di contoh berikutnya, kita menginstal <c>vanilla-sources-2.4.24</c> (karena
ini adalah kernel yang tersedia bagi instalasi tanpa jaringan sistem x86)
dan <c>gentoo-sources</c>. Tentu saja, gantikan nama kernelnya dengan
pilihan anda, berikut ini hanya merupakan contoh. Catat juga bahwa anda
seharusnya hanya menginstal <e>satu</e> source kernel saja.
</p>

<pre caption="Instal sebuah kernel">
<comment>(Hanya jika anda sedang melakukan instalasi tanpa jaringan)</comment>
# <i>emerge =vanilla-sources-2.4.24</i>

<comment>(Sebaliknya, gunakan nama source kernel yang anda inginkan)</comment>
# <i>emerge gentoo-sources</i>
</pre>

<p>
Jika anda melihat ke direktori <path>/usr/src</path>, anda akan menemukan
sebuah link simbolik (symlink) bernama <path>linux</path> yang menunjuk
ke kernel anda:
</p>

<pre caption="Melihat link simbolik kernel">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.4.24
</pre>

<p>
Jika ini tidak benar (link simbolik menunjuk ke kernel lain), gantikan link
simbolik tersebut sebelum anda melanjutkan:
</p>

<pre caption="Mengganti link simbolik kernel">
# <i>rm /usr/src/linux &amp;&amp; ln -s /usr/src/linux-2.4.24 /usr/src/linux</i>
</pre>

<p>
Sekarang saatnya untuk mengkonfigurasi dan kompilasi kernel anda. Semua
arsitektur dapat menggunakan <c>genkernel</c> untuk melakukannya, yang
akan menciptakan sebuah kernel generik seperti yang digunakan oleh LiveCD.
Kami akan menjelaskan cara konfigurasi secara "manual" dahulu, karena cara
ini adalah cara terbaik untuk mengoptimasi sistem anda.
</p>

<p>
Jika anda ingin mengkonfigurasi kernel anda secara manual, lanjutkan ke <uri
link="#manual">Default: Konfigurasi Manual</uri>. Jika anda ingin
menggunakan <c>genkernel</c>, anda sebaiknya membaca bagian <uri
link="#genkernel">Alternatif: Menggunakan genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Default: Konfigurasi Manual</title>
<subsection>
<title>Pendahuluan</title>
<body>

<p>
Konfigurasi kernel secara manual tampaknya adalah pelajaran tersulit yang
harus dilewati oleh setiap pengguna Linux. Memang benar -- setelah
mengkonfigurasi beberapa kernel, anda tidak akan lagi ingat bahwa cara
tersebut sulit ;-)
</p>

<p>
Bagaimanapun juga, satu hal <e>selalu</e> benar: anda harus tahu sistem anda
sebelum mulai mengkonfigurasi kernel secara manual. Kebanyakan informasi
dapat ditemukan dengan melihat isi <path>/proc/pci</path> (atau menggunakan
perintah <c>lspci</c> jika tersedia). Anda dapat juga menjalankan <c>lsmod</c>
untuk melihat modul kernel apa saja yang digunakan oleh LiveCD (tampilan
tersebut mungkin memberi gambaran bagi anda apa saja yang harus diaktifkan).
</p>

<p>
Sekarang, masuklah ke direktori kernel anda dan jalankan <c>make
menuconfig</c>. Perintah ini akan menjalankan menu konfigurasi berbasis
ncurses.
</p>

<pre caption="Menjalankan menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Anda akan menemukan beberapa seksi konfigurasi. Kami pertama-tama akan
menjelaskan beberapa opsi yang harus anda aktifkan (jika tidak, Gentoo tidak
dapat berjalan dengan benar).
</p>

</body>
</subsection>
<subsection>
<title>Mengaktifkan Opsi-Opsi yang Diperlukan</title>
<body>

<p>
Pertama, aktifkan penggunaan "development and experimental code/drivers".
Anda memerlukannya, jika tidak, beberapa code/driver yang sangat penting
tidak akan ditampilkan:
</p>

<pre caption="Memilih code/driver eksperimental">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Sekarang masuklah ke <c>File Systems</c> dan aktifkan dukungan terhadap
filesystem yang anda gunakan. <e>Jangan</e> kompilasi dukungan tersebut
sebagai modul, jika tidak, sistem Gentoo anda tidak akan dapat me-mount
partisi-partisi anda. Serta, aktifkan juga <c>Virtual memory</c>, <c>/proc
file system</c>, <c>/dev file system</c> + <c>Automatically mount at boot</c>:
</p>

<pre caption="Memilih filesystem yang diperlukan">
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot

<comment>(Nonaktifkan pilihan berikut kecuali anda menggunakan kernel 2.6)</comment>
  [ ] /dev/pts file system for Unix98 PTYs

<comment>(Aktifkan satu atau lebih opsi-opsi berikut sesuai kebutuhan sistem anda)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<note>
Para pengguna kernel 2.6 akan menemukan beberapa opsi-opsi yang dijelaskan
di atas di <c>Pseudo filesystems</c> yang merupakan sub-menu dari <c>File
systems</c>.
</note>

<p>
Jika anda menggunakan PPPoE untuk koneksi internet atau modem dial-up,
anda memerlukan opsi-opsi berikut di kernel:
</p>

<pre caption="Memilih driver-driver PPPoE yang diperlukan">
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports
</pre>

<note>
Para pengguna kernel 2.6 akan menemukan beberapa opsi-opsi yang dijelaskan
di atas di  <c>Networking support</c> yang merupakan sub-menu dari
<c>Device Drivers</c>.
</note>

<p>
Kedua opsi-opsi kompresi tidak berbahaya tetapi tidak benar-benar diperlukan,
begitu juga dengan opsi <c>PPP over Ethernet</c>, opsi-opsi tersebut mungkin
hanya digunakan oleh <c>rp-pppoe</c> jika dikonfigurasi untuk melakukan
modus kernel PPPoE.
</p>

<p>
Jika anda memerlukannya, jangan lupa untuk mengikutsertakan dukungan kernel
terhadap kartu ethernet anda.
</p>

<p>
Jika anda memiliki prosesor Intel yang mendukung HyperThreading (tm), atau
anda memiliki sistem multi-CPU, anda sebaiknya mengaktifkan "Symmetric
multi-processing support":
</p>

<pre caption="Aktifkan dukungan SMP">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
Setelah anda selesai mengkonfigurasi kernel, lanjutkan ke <uri
link="#compiling">Kompilasi dan Instalasi</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilasi dan Instalasi</title>
<body>

<p>
Setelah kernel anda dikonfigurasi, sekarang saatnya untuk mengkompilasi dan
menginstalnya. Keluarlah dari menu konfigurasi dan jalankan <c>make dep
&amp;&amp; make bzImage modules modules_install</c>:
</p>

<pre caption="Kompilasi kernel">
<comment>(Untuk kernel 2.4)</comment>
# <i>make dep &amp;&amp; make bzImage modules modules_install</i>

<comment>(Untuk kernel 2.6)</comment>
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Setelah kernel selesai dikompilasi, copy imej kernel tersebut ke
<path>/boot</path>. Di contoh berikutnya, kami menganggap anda telah
mengkonfigurasi dan mengkompilasi kernel <c>vanilla-sources-2.4.24</c>
(yang mungkin bukan kernel yang tepat bagi arsitektur anda!):
</p>

<pre caption="Instalasi kernel">
# <i>cp arch/i386/boot/bzImage /boot/kernel-2.4.24</i>
# <i>cp System.map /boot/System.map-2.4.24</i>
</pre>

<p>
Ide yang bagus juga untuk meng-copy file konfigurasi kernel anda ke
<path>/boot</path>, sebagai antisipasi :)
</p>

<pre caption="Backup konfigurasi kernel anda">
# <i>cp .config /boot/config-2.4.24</i>
</pre>

<p>
Sekarang lanjutkan ke <uri link="#kernel_modules">Instalasi Modul-Modul Kernel
yang Terpisah</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternatif: Menggunakan genkernel</title>
<body>

<p>
Jika anda membaca bagian ini, berarti anda memilih untuk menggunakan skrip
<c>genkernel</c> kami untuk mengkonfigurasi kernel bagi anda.
</p>

<p>
Setelah source kernel anda terinstal, sekarang saatnya untuk mengkompilasi
kernel anda menggunakan skrip <c>genkernel</c> kami untuk membangun
sebuah kernel secara otomatis bagi anda. <c>genkernel</c> bekerja dengan
mengkonfigurasi sebuah kernel yang hampir sama dengan cara kernel LiveCD
kami dikonfigurasi. Hal ini berarti, jika anda menggunakan <c>genkernel</c>
untuk membangun kernel anda, sistem anda akan secara umum mendeteksi
semua perangkat keras anda pada saat boot, seperti yang dilakukan oleh
Live CD kami. Karena genkernel tidak memerlukan konfigurasi kernel secara
manual, cara ini merupakan cara yang ideal bagi para pengguna yang tidak
terbiasa mengkompilasi kernel mereka sendiri.
</p>

<p>
Sekarang, marilah kita lihat cara menggunakan genkernel. Pertama, emerge
paket genkernel:
</p>

<pre caption="Emerge genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Lalu, kompilasilah kernel anda dengan menjalankan perintah <c>genkernel
all</c>. Perlu anda ketahui juga, karena <c>genkernel</c> mengkompilasi
sebuah kernel yang mendukung hampir semua perangkat keras, kompilasi
ini akan berjalan cukup lama!
</p>

<p>
Catat juga, jika partisi boot anda tidak menggunakan ext2 atau ext3 sebagai
filesystemnya, anda perlu mengkonfigurasi kernel anda secara manual menggunakan
perintah <c>genkernel --menuconfig all</c> dan tambahkan dukungan terhadap
filesystem anda <e>di</e> kernel (<e>bukan</e> sebagai modul).
</p>

<pre caption="Menjalankan genkernel">
# <i>genkernel all</i>
GenKernel v3.0.1_beta10
* ARCH: x86    
* KERNEL VER: 2.4.24
* kernel: configuring source
* kernel: running mrproper
<comment>(Output dibuang untuk memudahkan pembacaan)</comment>
* Kernel compiled successfully!
* Required Kernel Params:
*   : root=/dev/ram0 init=/linuxrc real_root=/dev/$ROOT
*     where $ROOT is the devicenode for your root partition as
*     you should have specified in /etc/fstab
*              
* You MUST tell your bootloader to use the generated initrd
*              
* Recommended Kernel Params:
*   : vga=0x317 splash=verbose
*              
* Do NOT report kernel bugs (configs included) as genkernel bugs.
* Make sure you have the latest genkernel before reporting bugs
*              
* For more info see /usr/share/genkernel/README
</pre>

<p>
Setelah <c>genkernel</c> selesai, sebuah kernel, set lengkap modul, dan
<e>initial root disk</e> (initrd) akan diciptakan. Kita akan menggunakan kernel
dan initrd tersebut pada saat mengkonfigurasi bootloader nantinya. Catat nama
kernel dan initrd anda karena anda akan memerlukannya nanti pada saat
menulis file konfigurasi bootloader. initrd akan dijalankan secara otomatis pada
saat boot untuk melakukan otodeteksi perangkat keras (hardware) (seperti
LiveCD) sebelum sistem "asli" dijalankan.
</p>

<pre caption="Memeriksa nama kernel dan initrd yang baru diciptakan">
# <i>ls /boot/kernel* /boot/initrd*</i>
</pre>

<p>
Sekarang, mari kita jalankan satu langkah lagi untuk membuat sistem kita
lebih persis dengan LiveCD -- mari emerge <c>hotplug</c>. Jika initrd
melakukan otodeteksi perangkat keras yang diperlukan pada saat sistem anda
boot, <c>hotplug</c> melakukan otodeteksi sisanya. Ketikkan perintah berikut
untuk me-emerge dan mengaktifkan <c>hotplug</c>:
</p>

<pre caption="Emerge dan aktifkan hotplug">
# <i>emerge hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>Instalasi Modul-Modul Kernel yang Terpisah</title>
<subsection>
<title>Instalasi Modul-Modul Tambahan</title>
<body>

<p>
Jika sesuai, anda sebaiknya me-emerge ebuild-build bagi perangkat-perangkat
tambahan pada sistem anda. Berikut ini adalah daftar ebuild yang berhubungan
dengan kernel yang dapat anda emerge:
</p>

<table>
<tcolumn width="1in"/>
<tcolumn width="4in"/>
<tcolumn width="2in"/>
<tr>
  <th>Ebuild</th>
  <th>Kegunaan</th>
  <th>Perintah</th>
</tr>
<tr>
  <ti>nvidia-kernel</ti>
  <ti>Grafis NVIDIA yang diakselerasi bagi XFree86</ti>
  <ti><c>emerge nvidia-kernel</c></ti>
</tr>
<tr>
  <ti>nforce-net</ti>
  <ti>Kontroler ethernet on-board pada mobo-mobo NVIDIA NForce(2)</ti>
  <ti><c>emerge nforce-net</c></ti>
</tr>
<tr>
  <ti>nforce-audio</ti>
  <ti>Suara on-board pada mobo-mobo NVIDIA NForce(2)</ti>
  <ti><c>emerge nforce-audio</c></ti>
</tr>
<tr>
  <ti>e100</ti>
  <ti>Adaptor Ethernet Intel e100</ti>
  <ti><c>emerge e100</c></ti>
</tr>
<tr>
  <ti>e1000</ti>
  <ti>Adaptor Ethernet Gigabit Intel e1000</ti>
  <ti><c>emerge e1000</c></ti>
</tr>
<tr>
  <ti>emu10k1</ti>
  <ti>Dukungan Creative Sound Blaster Live!/Audigy</ti>
  <ti><c>emerge emu10k1</c></ti>
</tr>
<tr>
  <ti>ati-drivers</ti>
  <ti>Grafis ATI Radeon 8500+/FireGL yang diakselerasi bagi XFree86</ti>
  <ti><c>emerge ati-drivers</c></ti>
</tr>
<tr>
  <ti>ati-drivers-extra</ti>
  <ti>Utilitas-utilitas Grafis ATI</ti>
  <ti><c>emerge ati-drivers-extra</c></ti>
</tr>
<tr>
  <ti>xfree-drm</ti>
  <ti>
    Grafis akselerasi untuk ATI Radeon sampai 9200, Rage128, Matrox, Voodoo
    dan kartu-kartu lain bagi XFree86. Silahkan memeriksa variabel
    <c>IUSE_VIDEO_CARDS</c> di ebuild
    <path>/usr/portage/x11-base/xfree-drm</path> untuk melihat apa yang harus
    anda isi sebagai <c>kartuanda</c>.
  </ti>
  <ti><c>VIDEO_CARDS="kartuanda" emerge xfree-drm</c></ti>
</tr>
</table>

<p>
Perlu anda waspadai, beberapa ebuild-ebuild ini mungkin memerlukan dependensi
yang besar. Untuk memeriksa paket-paket apa saja yang akan diinstal ketika
me-emerge sebuah ebuild, gunakan perintah <c>emerge --pretend</c>. Misalnya,
untuk paket <c>emu10k1</c>:
</p>

<pre caption="Melihat daftar paket instalasi lengkap">
# <i>emerge --pretend emu10k1</i>
</pre>

<p>
Jika anda tidak menyukai paket-paket yang akan diinstal, gunakan perintah
<c>emerge --pretend --verbose</c> untuk memeriksa flag-flag USE apa saja
yang diperiksa ketika menghitung dependensi:
</p>

<pre caption="Melihat penggunaan flag USE">
# <i>emerge --pretend --verbose emu10k1</i>
<comment>...</comment>
[ebuild  N    ] media-sound/aumix-2.8  +gpm +nls +gtk +gnome +alsa -gtk2
</pre>

<p>
Di contoh sebelumnya, anda dapat melihat bahwa satu dari dependensi
<c>emu10k1</c> (<c>aumix</c>) menggunakan flag-flag USE <c>gtk</c> dan
<c>gnome</c>, sehingga gtk (yang bergantung terhadap XFree) dikompilasi juga.
</p>

<p>
Jika anda tidak ingin semua ini dikompilasi, nonaktifkan semua flag-flag USE,
misalnya:
</p>

<pre caption="Emerge emu10k1 dengan semua flag USE dinonaktifkan">
# <i>USE="-gpm -nls -gtk -gnome -alsa" emerge --pretend emu10k1</i>
</pre>

<p>
Jika anda puas dengan paket-paket yang akan diinstal, hapus <c>--pretend</c>
untuk mulai menginstal <c>emu10k1</c>.
</p>

</body>
</subsection>
<subsection>
<title>Konfigurasi Modul-Modul</title>
<body>

<p>
Anda harus menuliskan semua modul-modul yang ingin anda load secara otomatis
di file <path>/etc/modules.autoload.d/kernel-2.4</path> (atau
<path>kernel-2.6</path>). Anda dapat juga menambahkan opsi-opsi tambahan
pada modul-modul tersebut jika anda mau.
</p>

<p>
Untuk melihat modul-modul yang tersedia, jalankan perintah <c>find</c> berikut.
Jangan lupa untuk menggantikan "&lt;versi kernel&gt;" dengan versi kernel yang
baru saja anda kompilasi:
</p>

<pre caption="Melihat modul-modul yang tersedia">
# <i>find /lib/modules/&lt;versi kernel&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Misalnya, untuk meload modul <c>3c59x.o</c> secara otomatis, edit file
<path>kernel-2.4</path> atau <path>kernel-2.6</path> dan tuliskan nama
modul tersebut di dalamnya.
</p>

<pre caption="Edit file /etc/modules.autoload.d/kernel-2.4">
<comment>(Contoh untuk kernel-kernel 2.4)</comment>
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4 atau kernel-2.6">
3c59x
</pre>

<p>
Sekarang jalankan <c>modules-update</c> untuk menuliskan perubahan
anda ke file <path>/etc/modules.conf</path>:
</p>

<pre caption="Menjalankan modules-update">
# <i>modules-update</i>
</pre>

<p>
Lanjutkan proses instalasi dengan bab <uri
link="?part=1&amp;chap=8">Mengkonfigurasi Sistem anda</uri>.
</p>

</body>
</subsection>
</section>
</sections>
