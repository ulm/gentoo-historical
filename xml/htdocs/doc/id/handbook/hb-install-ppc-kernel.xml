<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>7.2</version>
<date>2006-09-27</date>

<section>
<title>Zona Waktu/Timezone</title>
<body>

<p>
Pertama, anda perlu memilih zona waktu anda agar sistem anda tahu dimana
dia berada. Carilah zona waktu anda di <path>/usr/share/zoneinfo</path>,
salinlah ke <path>/etc/localtime</path>. Hindari penggunaan zona waktu
<path>/usr/share/zoneinfo/Etc/GMT*</path> karena namanya tidak mengindikasikan
zona yang diharapkan. <path>GMT-8</path> sesungguhnya adalah GMT+8.
</p>

<pre caption="Mengatur zona waktu">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Misalnya anda ingin menggunakan GMT)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Instal Source</title>
<subsection>
<title>Memilih Sebuah Kernel</title>
<body>

<p>
Inti/Jantung dari semua distro adalah kernel Linux. Kernel merupakan sebuah
lapisan antara program-program pengguna dengan perangkat keras sistem.
Gentoo menyediakan beberapa kernel kepada para penggunanya. Sebuah daftar
lengkap beserta penjelasannya dapat ditemui di <uri
link="/doc/id/gentoo-kernel.xml">Panduan Kernel Gentoo</uri>.
</p>

<p>
Kami anjurkan anda untuk menggunakan <c>vanilla-sources</c> atau
<c>gentoo-sources</c> di PPC, yang keduanya merupakan kernel 2.6.
<c>gentoo-sources</c> tersedia ketika anda menjalankan instalasi tanpa
jaringan. Mari kita lanjutkan dengan meng-<c>emerge</c> source kernel.
<c>USE="-doc"</c> diperlukan untuk menghindari instalasi xorg-x11 atau
dependensi lain untuk saat ini. <c>USE="symlink"</c> tidak diperlukan untuk
instalasi baru tapi pastikan anda memciptakan symlink yang benar untuk
<path>/usr/src/linux</path>.
</p>

<pre caption="Instal source kernel">
# <i>USE="-doc symlink" emerge gentoo-sources</i>
</pre>

<p>
Jika anda melihat ke direktori <path>/usr/src</path>, anda akan menemukan
sebuah link simbolik (symlink) bernama <path>linux</path> yang menunjuk
ke kernel <c>gentoo-sources-2.6.15</c>. Versi anda mungkin berbeda, jadi
ingatlah ini.
</p>

<pre caption="Melihat link simbolik kernel">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           22  Mar 18 16:23 /usr/src/linux -&gt; linux-2.6.15
</pre>

<p>
Sekarang saatnya untuk mengkonfigurasi dan kompilasi kernel anda. Anda dapat
menggunakan <c>genkernel</c> untuk melakukannya, yang akan menciptakan sebuah
kernel generik seperti yang digunakan oleh CD Instalasi. Kami akan menjelaskan
metode manual terlebih dahulu, karena metode ini merupakan cara terbaik untuk
mengoptimasi sistem anda.
</p>

<p>
Jika anda ingin mengkonfigurasi kernel anda secara manual, lanjutkan ke <uri
link="#manual">Default: Konfigurasi Manual</uri>. Jika anda ingin
menggunakan <c>genkernel</c>, anda sebaiknya membaca bagian <uri
link="#genkernel">Alternatif: Menggunakan genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Default: Konfigurasi Manual</title>
<subsection>
<title>Pendahuluan</title>
<body>

<p>
Konfigurasi kernel secara manual tampaknya adalah prosedur tersulit yang
harus dijalankan oleh setiap pengguna Linux. Memang benar, setelah
mengkonfigurasi beberapa kernel, anda tidak akan lagi ingat bahwa cara
tersebut sulit ;-)
</p>

<p>
Bagaimanapun juga, satu hal <e>selalu</e> benar: anda harus mengenal sistem
anda sebelum mulai mengkonfigurasi kernel secara manual. Kebanyakan informasi
dapat ditemukan dengan menginstal pciutils (<c>emerge pciutils</c>) yang
berisi <c>lspci</c>. Anda juga bisa menggunakan <c>lspci</c> dari dalam
lingkungan chroot. Biarkan saja peringatan <e>pcilib</e> (seperti pcilib:
cannot open /sys/bus/pci/devices) yang dikeluarkan oleh <c>lspci</c>. Anda
dapat juga menggunakan <c>lspci</c> dari lingkungan <e>non-chroot</e>.
Hasilnya sama saja. Anda dapat juga menjalankan <c>lsmod</c> untuk melihat
modul kernel apa saja yang digunakan oleh CD Instalasi (tampilan tersebut
mungkin memberi gambaran bagi anda apa saja yang harus diaktifkan). Tempat
lain untuk mencari info tentang komponen yang perlu anda aktifkan ialah log
pesan-pesan kernel setelah boot yang sukses. Jalankan <c>dmesg</c> untuk
menampilah pesan-pesan kernel.
</p>

<p>
Sekarang masuklah ke direktori source kernel anda, saatnya untuk mengkonfigurasi
kernel. Anda dianjurkan untuk pertama-tama menambahkan setting default untuk
konfigurasi kernel anda dengan menjalankan <c>make pmac32_defconfig</c>. Setelah
konfigurasi default tercipta, jalankan <c>make menuconfig</c> yang akan
menampilkan menu konfigurasi berbasis ncurses.
</p>

<pre caption="Menjalankan menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make pmac32_defconfig</i>
# <i>make menuconfig</i>
</pre>

<p>
Anda akan menemukan beberapa seksi konfigurasi. Kami pertama-tama akan
menjelaskan beberapa opsi yang harus anda aktifkan (jika tidak, Gentoo tidak
dapat berjalan dengan benar tanpa tweak tambahan).
</p>

</body>
</subsection>
<subsection>
<title>Mengaktifkan Opsi-Opsi yang Diperlukan</title>
<body>

<p>
Pertama, aktifkan penggunaan "development and experimental code/drivers".
Anda memerlukannya, jika tidak, beberapa code/driver yang sangat penting
tidak akan ditampilkan:
</p>

<pre caption="Memilih code/driver eksperimental">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Sekarang masuklah ke <c>File Systems</c> dan aktifkan dukungan terhadap
filesystem yang anda gunakan. <e>Jangan</e> kompilasi dukungan tersebut
sebagai modul, jika tidak, sistem Gentoo anda tidak akan dapat me-mount
partisi-partisi anda. Serta, aktifkan juga <c>/proc file system</c> dan
<c>Virtual memory</c>. Anda juga perlu mengaktifkan dukungan untuk partisi
Amiga jika anda menggunakan Pegasos, atau dukungan partisi Macintosh jika
anda menggunakan komputer Apple.
</p>

<pre caption="Memilih filesystem yang diperlukan">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)
  Partition Types ---&gt;
    [*] Amiga partition table support
    [*] Macintosh partition map support

<comment>(Aktifkan satu atau lebih opsi-opsi berikut sesuai kebutuhan sistem anda)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Jika anda menggunakan PPPoE untuk koneksi internet atau modem dial-up,
anda memerlukan opsi-opsi berikut di kernel:
</p>

<pre caption="Memilih driver-driver PPPoE yang diperlukan">
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Kedua opsi-opsi kompresi tidak berbahaya tetapi tidak benar-benar diperlukan,
begitu juga dengan opsi <c>PPP over Ethernet</c>, opsi-opsi tersebut mungkin
hanya digunakan oleh <c>rp-pppoe</c> jika dikonfigurasi untuk melakukan
modus kernel PPPoE.
</p>

<p>
Jika anda memerlukannya, jangan lupa untuk mengikutsertakan dukungan kernel
untuk kartu ethernet anda.
</p>

<p>
Pengguna komputer NewWorld dan OldWorld perlu mengaktifkan dukungan HFS.
Pengguna OldWorld memerlukannya untuk menyalin kernel yang telah dikompilasi
ke partisi MacOS. Pengguna NewWorld memerlukannya untuk mengkonfigurasi partisi
khusus Apple_Bootstrap:
</p>

<pre caption="Mengaktifkan dukungan HFS">
File Systems ---&gt;
  [*] HFS Support
</pre>

<p>
Untuk saat ini, kernel preemption masih belum stabil di PPC dan dapat
mengakibatkan kegagalan kompilasi dan segfaults. <e>Sangat</e> dianjurkan
untuk tidak menggunakan fitur ini.
</p>

<pre caption="Memastikan opsi Preemptible Kernel telah Off">
Kernel options ---&gt;
  Preemption Model (No Forced Preemption (Server))
</pre>

<p>
Jika anda boot dari Firmware, anda perlu mengaktifkan opsi-opsi berikut ini.
Jika anda tidak ingin mengaktifkannya di dalam kernel, anda perlu
mengikutsertakan modul-modul ini dan dependensinya di dalam sebuah intrd.
</p>

<pre caption="Mengaktifkan dukungan perangkat firewire ketika boot">
Device Drivers ---&gt;
  IEEE 1394 (FireWire) support ---&gt;
    &lt;*&gt; IEEE 1394 (FireWire) support
    &lt;*&gt;   OHCI-1394 support
    &lt;*&gt;   SBP-2 support (Harddisks etc.)
</pre>

<p>
Jika anda boot dari USB, anda perlu mengaktifkan opsi-opsi berikut ini.
Jika anda tidak ingin mengaktifkannya di dalam kernel, anda perlu
mengikutsertakan modul-modul ini dan dependensinya di dalam sebuah intrd.
</p>

<pre caption="Mengaktifkan dukungan perangkat USB ketika boot">
Device Drivers ---&gt;
  USB support ---&gt;
    &lt;*&gt; Support for Host-side USB
    &lt;*&gt;   OHCI HCD support
    &lt;*&gt;   USB Mass Storage support
</pre>

<p>
Jangan nonaktifkan dukungan framebuffer kernel karena ini diperlukan untuk boot.
Jika anda menggunakan chipset berbasis nVidia, anda harus menggunakan
framebuffer OpenFirmware. Jika anda menggunakan chipset berbasis ATi, anda
perlu memilih driver framebuffer yang sesuai dengan chipset anda (Mach64,
Rage128 atau Radeon).
</p>

<pre caption="Memilih sebuah Driver Framebuffer">
Device Drivers ---&gt;
  Graphics support ---&gt;
    &lt;*&gt; Support for frame buffer devices
    [*] Open Firmware frame buffer device support
    &lt;*&gt; ATI Radeon display support
    &lt;*&gt; ATI Rage128 display support
    &lt;*&gt; ATI Mach64 display support
    Console display driver support ---&gt;
      &lt;*&gt; Framebuffer Console support
</pre>

<note>
Jika anda memilih lebih dari satu driver frambuffer, kemungkinan framebuffer
defaultnya adalah driver yang kurang optimal. Gunakan saja salah satu atau
tentukan dengan menambahkan driver pilihan anda pada kernel ketika boot,
misalnya <c>video=radeonfb</c>.
</note>

<p>
Setelah anda selesai mengkonfigurasi kernel, lanjutkan ke <uri
link="#compiling">Kompilasi dan Instalasi</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilasi dan Instalasi</title>
<body>

<p>
Setelah kernel anda dikonfigurasi, sekarang saatnya untuk mengkompilasi dan
menginstalnya. Keluarlah dari menu konfigurasi dan mulailah proses kompilasi:
</p>

<pre caption="Kompilasi kernel">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Setelah kernel selesai dikompilasi, salin imej kernel tersebut ke
<path>/boot</path> (pastikan agar <path>/boot</path> telah di-mount dengan
benar pada komputer Pegasos). Jika anda menggunakan BootX, kita akan menyalin
kernel nanti.
</p>

<p>
Yaboot dan BootX menggunakan kernel yang tidak terkompresi, tidak seperti
kebanyakan bootloader lain. Kernel yang tidak terkompresi terletak di
<path>/usr/src/linux</path> setelah kernel selesai dikompilasi. Jika anda
menggunakan komputer Pegasos, firmware Pegasos membutuhkan sebuah kernel
terkompresi dengan nama zImage.chrp yang dapat anda temukan di
<path>/usr/src/linux/arch/ppc/boot/images</path>.
</p>

<pre caption="Instalasi kernel">
# <i>cd /usr/src/linux</i>
<comment>gantikan &lt;versi-kernel&gt; dengan versi kernel anda</comment>
<comment>(Apple/IBM)</comment>
# <i>cp vmlinux /boot/&lt;versi-kernel&gt;</i>
<comment>(Pegasos)</comment>
# <i>cp arch/ppc/boot/images/zImage.chrp /boot/&lt;versi-kernel&gt;</i>
</pre>

<p>
Sekarang lanjutkan dengan <uri link="#kernel_modules">Instalasi Modul-modul
Kernel Terpisah</uri>.
</p>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Instalasi Modul-modul Kernel Terpisah</title>
<subsection>
<title>Konfigurasi Modul</title>
<body>

<p>
Anda perlu mendaftarkan modul-modul yang ingin anda load secara otomatis di
<path>/etc/modules.autoload.d/kernel-2.6</path>. Anda dapat menambahkan opsi
tambahan pada modul jika diperlukan.
</p>

<p>
Untuk melihat modul-modul yang tersedia, jalankan perintah <c>find</c> berikut.
Jangan lupa untuk menggantikan "&lt;versi kernel&gt;" dengan versi kernel yang
baru saja anda kompilasi:
</p>

<pre caption="Melihat modul-modul yang tersedia">
# <i>find /lib/modules/&lt;versi kernel&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Misalnya, untuk me-load modul <c>3c59x.o</c> secara otomatis, edit file
<path>kernel-2.6</path> dan tuliskan nama modul tersebut di dalamnya.
</p>

<pre caption="Edit /etc/modules.autoload.d/kernel-2.6">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Lanjutkan proses instalasi dengan bab <uri
link="?part=1&amp;chap=8">Mengkonfigurasi Sistem anda</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternatif: Menggunakan genkernel</title>
<body>

<p>
Jika anda membaca bagian ini, berarti anda memilih untuk menggunakan skrip
<c>genkernel</c> kami untuk mengkonfigurasi kernel bagi anda.
</p>

<p>
Setelah source kernel anda terinstal, sekarang saatnya untuk mengkompilasi
kernel anda menggunakan skrip <c>genkernel</c> kami untuk membangun
sebuah kernel secara otomatis bagi anda. <c>genkernel</c> bekerja dengan
mengkonfigurasi sebuah kernel yang hampir sama dengan cara kernel CD Instalasi
kami dikonfigurasi. Hal ini berarti, jika anda menggunakan <c>genkernel</c>
untuk membangun kernel anda, sistem anda akan secara umum mendeteksi
semua perangkat keras anda pada saat boot, seperti yang dilakukan oleh
CD Instalasi kami. Karena genkernel tidak memerlukan konfigurasi kernel secara
manual, cara ini merupakan cara yang ideal bagi para pengguna yang tidak
terbiasa mengkompilasi kernel mereka sendiri.
</p>

<p>
Sekarang, marilah kita lihat cara menggunakan genkernel. Pertama, emerge
paket genkernel:
</p>

<pre caption="Emerge genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Kemudian, salin konfigurasi kernel yang digunakan oleh CD Instalasi ke lokasi
tempat genkernel mencari konfigurasi default kernel:
</p>

<pre caption="Menyalin Konfigurasi kernel CD Instalasi">
# <i>zcat /proc/config.gz > /usr/share/genkernel/ppc/kernel-config-2.6</i>
</pre>

<p>
Jika anda menggunakan Firewire atau USB untuk boot, anda perlu menambahkan
modul-modulnya ke initrd. Edit <path>/usr/share/genkernel/ppc/modules_load</path>
dan gantikan <c>MODULES_FIREWIRE="ieee1394 ohci1394 sbp2"</c> untuk dukungan
firewire atau <c>MODULES_USB="usbcore ohci-hcd ehci-hcd usb-storage"</c> untuk
dukungan USB.
</p>

<p>
Sebelum mengkompilasi source kernel, anda perlu sedikit mengadakan perubahan
pada fstab. Sisa dari isi file fstab akan kita lengkapi pada langkah berikutnya
nanti, jadi anda tidak perlu memikirkan tentang detilnya sekarang. Jika anda
tidak menciptakan partisi boot terpisah (BUKAN bootstrap), hapus baris yang
berisi /boot dari <path>/etc/fstab</path>. Hal ini perlu dilakukan pada hampir
semua komputer Apple.
</p>

<pre caption="Menghapus baris /boot dari /etc/fstab pada komputer tanpa partisi boot">
# <i>nano -w /etc/fstab</i>
<comment>Hapus baris ini</comment>
/dev/BOOT         /boot           ext2            noauto,noatime  1 2
</pre>

<p>
Sekarang, kompilasilah source kernel anda dengan menjalankan <c>genkernel
--genzimage all</c>. Untuk Pegasos, kita perlu menggunakan konfigurasi yang
berbeda dan menciptakan zImage, bukannya vmlinux yang digunakan di komputer
Apple. Perlu anda ketahui juga, karena <c>genkernel</c> mengkompilasi sebuah
kernel yang mendukung hampir semua perangkat keras, kompilasi ini akan
berjalan cukup lama!
</p>

<p>
Catat juga, jika partisi boot anda tidak menggunakan ext2 atau ext3 sebagai
filesystemnya, anda mungkin perlu mengkonfigurasi kernel anda secara manual
menggunakan perintah <c>genkernel --menuconfig all</c> dan tambahkan dukungan
terhadap filesystem anda <e>di</e> kernel (<e>bukan</e> sebagai modul).
Pengguna EVMS2 atau LVM2 mungkin perlu menambahkan argumen <c>--evms2</c> atau
<c>--lvm2</c>.
</p>

<pre caption="Menjalankan genkernel">
# <i>genkernel all</i>
</pre>

<pre caption="Menjalankan genkernel pada Pegasos">
# <i>genkernel --genzimage --kernel-config=/usr/share/genkernel/ppc/Pegasos all</i>
</pre>

<p>
Setelah <c>genkernel</c> selesai, sebuah kernel, set lengkap modul, dan
<e>initial root disk</e> (initrd) akan diciptakan. Kita akan menggunakan kernel
dan initrd tersebut pada saat mengkonfigurasi bootloader nantinya. Catat nama
kernel dan initrd anda karena anda akan memerlukannya nanti pada saat
menulis file konfigurasi bootloader. initrd akan dijalankan secara otomatis
pada saat boot untuk melakukan otodeteksi perangkat keras (hardware) (seperti
CD Instalasi) sebelum sistem "asli" dijalankan. Pastikan untuk menyalin argumen
boot yang diperlukan karena penting untuk boot sukses dengan genkernel.
</p>

<pre caption="Memeriksa nama kernel dan initrd yang baru diciptakan">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

<p>
Sekarang, mari kita jalankan satu langkah lagi untuk membuat sistem kita
lebih persis dengan CD Instalasi -- mari emerge <c>coldplug</c>. Jika initrd
melakukan otodeteksi perangkat keras yang diperlukan pada saat sistem anda
boot, <c>coldplug</c> melakukan otodeteksi sisanya. <c>coldplug</c> tersedia
sebagai salah satu paket pada CD Paket.
</p>

<pre caption="Emerge dan aktifkan coldplug">
<comment>(Lakukan ini setelah selesai instalasi, ketika menjalankan instruksi
instalasi GRP)</comment>
# <i>emerge -k coldplug</i>
# <i>rc-update add coldplug boot</i>
</pre>

<p>
Jika anda ingin agar sistem anda bereaksi terhadap even hotplug, anda perlu
menginstal dan mensetup hotplug juga:
</p>

<pre caption="Emerge dan aktifkan hotplug">
# <i>emerge hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>

<p>
Sekarang lanjutkan dengan <uri link="?part=1&amp;chap=8">Mengkonfigurasi Sistem Anda</uri>.
</p>

</body>
</section>

</sections>
