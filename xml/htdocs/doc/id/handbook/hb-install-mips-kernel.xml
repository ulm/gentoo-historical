<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>7.1</version>
<date>2007-02-26</date>

<section>
<title>Zona Waktu (Timezone)</title>
<body>

<p>
Pertama, anda perlu memilih zona waktu anda agar sistem anda tahu dimana
dia berada. Carilah zona waktu anda di <path>/usr/share/zoneinfo</path>,
kemudian copy ke <path>/etc/localtime</path>. Hindari penggunaan zona waktu
<path>/usr/share/zoneinfo/Etc/GMT*</path> karena namanya tidak mengindikasikan
zona yang diharapkan. <path>GMT-8</path> sesungguhnya adalah GMT+8.
</p>

<pre caption="Mengatur zona waktu">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Misalnya anda ingin menggunakan GMT)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Instal Source</title>
<subsection>
<title>Memilih Sebuah Kernel</title>
<body>

<p>
Inti/Jantung dari semua distro adalah kernel Linux. Kernel merupakan sebuah
lapisan antara program-program pengguna dengan perangkat keras sistem.
Gentoo menyediakan beberapa kernel kepada para penggunanya. Sebuah daftar
lengkap beserta penjelasannya dapat ditemui di <uri
link="/doc/id/gentoo-kernel.xml">Panduan Kernel Gentoo</uri>.
</p>

<p>
Sistem berbasis MIPS hanya memiliki satu pilihan kernel, yaitu
<c>mips-sources</c>. <!--Special patches are needed to make certain systems work.
The table below displays the USE flags required to enable the patchsets. Note
that Indy, Indigo2 (R4k) and Challenge S systems do not require any additional
patchsets.--> Kumpulan <e>patch</e> di paket ini berbeda dengan yang terdapat
pada paket kernel untuk arsitektur lain, karena berisi banyak sekali
<e>patch</e> khusus untuk arsitektur MIPS.
</p>

<!--
<table>
<tr>
  <th>USE flag</th>
  <th>System</th>
</tr>
<tr>
  <ti><c>cobalt</c></ti>
  <ti>Cobalt Qube/RaQ support</ti>
</tr>
<tr>
  <ti><c>ip27</c></ti>
  <ti>SGI Origin 200/2000 support (1)</ti>
</tr>
<tr>
  <ti><c>ip28</c></ti>
  <ti>SGI Indigo2 Impact (R10000) support (1,2)</ti>
</tr>
<tr>
  <ti><c>ip30</c></ti>
  <ti>SGI Octane/Octane2 support (1)</ti>
</tr>
</table>-->

<pre caption="Instalasi source kernel...">
<!-- Done by profile?
<comment>(Substitute cobalt with the appropriate USE flag for your system if required)</comment>
# <i>mkdir /etc/portage</i>
# <i>echo "sys-kernel/mips-sources cobalt" &gt;&gt; /etc/portage/package.use</i>
-->
<comment>(Ekstrak &amp; instal source kernel)</comment>
# <i>emerge mips-sources</i>
</pre>

<impo>
<!--(1)--> Pada sistem Origin 200/2000, Indigo2 Impact (R10000), Octane/Octane2
dan O2, diperlukan kernel 64-bit agar sistem dapat boot. Untuk komputer-komputer
ini, anda harus <!--switch to the <path>default-linux/mips/mips64/RELEASE</path>
profile by altering the <path>/etc/make.profile</path> symlink.
Then you can --><c>emerge kgcc64</c> untuk menciptakan <e>cross-compiler</e>
yang akan digunakan untuk membangun kernel 64-bit.
</impo>

<!--<impo>
(2) The Indigo2 Impact is a special case in that it requires special patch to
be applied to <c>gcc</c> before it will build an IP28 kernel correctly. This
patch adds support for the <c>-mip28-cache-barriers</c> CFLAG, which is used
when building kernels to work around the inherent hardware bug brought on by
speculative execution. This USE flag can be set in <path>/etc/make.conf</path>.
This is done for you by setting your profile to
<path>default-linux/mips/mips64/ip28/RELEASE</path>, which also takes care of
(1).
</impo>-->

<pre caption="Instalasi kgcc64...">
<!--<comment>(This assumes PORTDIR is in the usual location; /usr/portage)</comment>
# <i>rm /etc/make.profile</i>
# <i>ln -s /usr/portage/profiles/default-linux/mips/mips64/2005.0</i> <comment>(or .../mips64/ip28/2005.0)</comment>

<comment>(Install the 64-bit kernel toolchain)</comment>
--># <i>emerge kgcc64</i>
</pre>

<p>
Jika anda melihat ke direktori <path>/usr/src</path>, anda akan menemukan
sebuah link simbolik (symlink) bernama <path>linux</path> yang menunjuk
ke source kernel. Pada contoh ini, source kernel yang terinstal adalah
<c>mips-sources-2.6.13.4</c>. Versi kernel anda mungkin berbeda, jadi ingatlah
ini selalu.
</p>

<pre caption="Melihat link simbolik kernel">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.6.13.4
</pre>

<p>
Jika hasilnya tidak sama (symlink menunjuk ke source kernel lain), gantilah
symlink sebelum anda melanjutkan:
</p>

<pre caption="Mengganti symlink source kernel">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.6.13.4 linux</i>
</pre>

<p>
Sekarang saatnya untuk mengkonfigurasi dan kompilasi kernel anda.
</p>

</body>
</subsection>
</section>
<section>
<title>Kompilasi &amp; Instalasi Kernel</title>
<subsection>
<title>Pendahuluan</title>
<body>

<p>
Dahulu, kami menggunakan konfigurasi manual untuk men-setup source kernel.
Tetapi sekarang hal ini sudah tidak praktis lagi karena banyaknya sistem
yang kami dukung. Seksi ini menjelaskan beberapa sumber contoh konfigurasi
kernel.
</p>

</body>
</subsection>
<subsection>
<title>Menggunakan contoh konfigurasi yang ada di source kernel</title>
<body>

<p>
Banyak sistem yang telah diberikan contoh file <path>.config</path> yang
tersembunyi di dalam source kernel. Tidak semua sistem diberikan file ini
dengan cara yang sama. Bagi sistem yang diberikan, anda dapat
mengkonfigurasinya dengan menggunakan perintah-perintah pada tabel berikut ini:
</p>

<table>
<tr>
  <th>Sistem</th>
  <th>Perintah konfigurasi</th>
</tr>
<tr>
  <ti>Server Cobalt</ti>
  <ti><c>make cobalt_defconfig</c></ti>
</tr>
<tr>
  <ti>Indy, Indigo2 (R4k), Challenge S</ti>
  <ti><c>make ip22_defconfig</c></ti>
</tr>
<tr>
  <ti>Origin 200/2000</ti>
  <ti><c>make ip27_defconfig</c></ti>
</tr>
<tr>
  <ti>Indigo2 Impact (R10k)</ti>
  <ti>
    <c>make ip28_defconfig</c> (membutuhkan <c>mips-sources-2.6.14.5</c> atau
    yang lebih baru)
  </ti>
</tr>
<tr>
  <ti>O2</ti>
  <ti><c>make ip32_defconfig</c></ti>
</tr>
</table>

</body>
</subsection>

<subsection>
<title>
  Menggunakan konfigurasi kernel yang sedang digunakan dari media instalasi
</title>
<body>

<p>
Semua imej instalasi Gentoo menyediakan opsi-opsi konfigurasi kernel sebagai
bagian dari imej itu sendiri, berupa file <path>/proc/config.gz</path>.
File ini dapat digunakan pada banyak kasus. Sangat baik digunakan jika versi
kernel anda dekat dengan kernel CD. Untuk menyalinnya, jalankan perintah
berikut ini:
</p>

<pre caption="Ekstrak .config dari /proc/config.gz">
# <i>zcat /proc/config.gz > .config</i>
</pre>

<impo>
Konfigurasi kernel ini diatur untuk imej netboot. Artinya, filesystem root
akan dicari di suatu tempat yang dekat, berupa direktori atau initramfs, atau
device loopback untuk initrd. Ketika anda menjalankan <c>make menuconfig</c>
nanti, jangan lupa untuk masuk ke menu "General Setup" dan nonaktifkan opsi
untuk initramfs.
</impo>

</body>
</subsection>

<subsection>
<title>Database Kompatibilitas Hardware</title>
<body>

<p>
Sebagai bantuan agar anda mudah mendapatkan setting-setting yang bagus, kami
telah menyusun database kompatibilitas hardware. Database ini berisi dukungan
untuk berbagai perangkat MIPS, dan mempersilahkan para pengguna untuk
mengirimkan konfigurasi kernel yang diketahui dapat berfungsi dengan baik.
Alamat website ini adalah
<uri>http://stuartl.longlandclan.hopto.org/gentoo/mips</uri>.
</p>

<p>
Jika menurut anda layanan ini berguna, kami sangat mengharapkan kontribusi
anda berupa catatan-catatan dan file <path>.config</path> agar pengguna lain
dapat merasakan manfaat dari pengalaman anda. Namun perlu dicatat bahwa kami
tidak menjamin semua file yang terdapat di website ini bisa bekerje dengan baik.
</p>

</body>
</subsection>

<subsection>
<title>Menyesuaikan konfigurasi dengan kebutuhan anda</title>
<body>

<p>
Setelah anda menemukan sebuah konfigurasi, download file tersebut ke direktori
kernel anda lalu ganti namanya menjadi <path>.config</path>. Dari sana, anda
dapat menjalankan <c>make oldconfig</c> untuk memperbarui semua konfigurasi dan
menyesuaikannya sebelum memulai konfigurasi.
</p>

<pre caption="Konfigurasi kernel">
# <i>cd /usr/src/linux</i>
# <i>cp /path/to/example-config .config</i>
# <i>make oldconfig</i>
<comment>(Tekan ENTER pada setiap pertanyaan untuk menerima default... kita akan menyesuaikannya nanti)</comment>
# <i>make menuconfig</i>
</pre>

<impo>
Pada menu "Kernel Hacking" terdapat opsi "Are You Using A Cross Compiler?".
Opsi ini memerintahkan kernel untuk menambahkan "<c>mips-linux-</c>" (atau
<c>mipsel-linux</c> ... dll) ke perintah <c>gcc</c> dan <c>as</c> ketika kernel
dikompilasi. Opsi ini harus dinonaktifkan, walaupun anda melakukan
<e>cross-compiling</e>. Sebaliknya, jika anda perlu memanggil
<e>cross-compiler</e>, tentukan prefiks dengan variabel <c>CROSS_COMPILE</c>
seperti ditunjukkan pada seksi berikut.
</impo>

<impo>
Ada masalah yang diketahui dengan JFS dan ALSA pada sistem Octane, di mana ALSA
tidak bisa berfungsi. Karena sifat asli JFS yang masih dalam tahap pengujian di
MIPS kami anjurkan anda untuk menghindari penggunaan JFS.
</impo>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilasi dan Instalasi</title>
<body>

<p>
Sekarang kernel anda telah dikonfigurasi, saatnya untuk mengkompilasi dan
menginstalnya. Keluar dari menu konfigurasi lalu mulalilah proses kompilasi:
</p>

<note>
Pada komputer 64-bit, anda perlu menentukan
<c>CROSS_COMPILE=mips64-unknown-linux-gnu-</c> (atau <c>mips64el-...</c>
pada sistem <e>little-endian</e>) untuk menggunakan compiler 64-bit.
</note>

<pre caption="Kompilasi kernel">
<comment>(Hanya untuk kernel 2.4)</comment>
# <i>make dep</i>

<comment>(Untuk kernel 2.4 dan 2.6 -- kompilasi nativ)</comment>
# <i>make vmlinux modules modules_install</i>

<comment>(Untuk kernel 2.4 dan 2.6 -- cross-compiling di komputer target)</comment>
<comment>(             Sesuaikan mips64-unknown-linux-gnu-              )</comment>
# <i>make vmlinux modules modules_install CROSS_COMPILE=mips64-unknown-linux-gnu-</i>

<comment>(     Ketika melakukan kompilasi di komputer lain, seperti x86... gunakan     )</comment>
<comment>(  perintah-perintah berikut untuk mengkompilasi kernel &amp; dan menginstal  )</comment>
<comment>(modul-modul ke suatu direktori yang nanti akan dipindahkan ke komputer target)</comment>
# <i>make vmlinux modules CROSS_COMPILE=mips64-unknown-linux-gnu-</i>
# <i>make modules_install INSTALL_MOD_PATH=/somewhere</i>
</pre>

<impo>
Ketika mengkompilasi kernel 64-bit untuk Indy, Indigo2 (R4k), Challenge S dan
O2, gunakan target <c>vmlinux.32</c>, bukan <c>vmlinux</c>. Jika tidak,
komputer anda tidak akan bisa boot. Hal ini untuk menyiasati PROM yang tidak
memahami format ELF64.
</impo>

<pre caption="Menggunakan target vmlinux.32">
# <i>make vmlinux.32</i>
<comment>(Ini akan menciptakan vmlinux.32 -- kernel akhir anda)</comment>
</pre>

<p>
Ketika kernel telah selesai dikompilasi, salin imej kernel ke
<path>/boot</path>.
</p>

<note>
Pada server Cobalt, bootloader akan mencari imej kernel yang telah dipadatkan.
Jangan upa untuk meng- <c>gzip -9</c> file jika sudah di salin ke
<path>/boot</path>.
</note>

<pre caption="Instalasi kernel">
# <i>cp vmlinux /boot/kernel-2.6.13.4</i>

<comment>(Server Cobalt -- Memadatkan imej kernel)</comment>
# <i>gzip -9v /boot/kernel-2.6.13.4</i>
</pre>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Instalasi Modul-modul Kernel Terpisah</title>
<subsection>
<title>Konfigurasi Modul</title>
<body>

<p>
Anda perlu mendaftarkan modul apa saja yang ingin langsung anda load pada
salah satu file berikut. Anda juga boleh menambahkan opsi-opsi tambahan ke
modul jika memerlukannya.
</p>

<ul>
  <li><path>/etc/modules.autoload.d/kernel-2.4</path> - Untuk kernel 2.4</li>
  <li><path>/etc/modules.autoload.d/kernel-2.6</path> - Untuk kernel 2.6</li>
  <li><path>/etc/modules.autoload</path> - Semua kernel</li>
</ul>

<p>
Jadi, jika anda ingin me-load sebuah modul -- yang sama baik di kernel 2.4
dan 2.6, maka letakkan di <path>/etc/modules.autoload</path>. Atau anda boleh
meletakkannya di file khusus versi kernelnya.
</p>

<p>
Untuk melihat semua modul yang tersedia, jalankan perintah <c>find</c> berikut.
Jangan lupa untuk mengganti "&lt;versi kernel&gt;" dengan versi kernel yang
baru saja anda kompilasi:
</p>

<pre caption="Melihat semua modul yang tersedia">
# <i>find /lib/modules/&lt;versi kernel&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Sebagai contoh, jika anda ingin langsung me-load modul <c>3c59x.o</c> ketika
boot, edit file yang sesuai lalu masukkan nama modul ke dalam file tersebut.
</p>

<pre caption="Mengedit /etc/modules.autoload.d/kernel-2.4">
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4 or kernel-2.6">
3c59x
</pre>

<p>
Anda juga dapat melakukannya dengan cara lain:
</p>

<pre caption="Menambahkan modul -- metode satu baris">
# <i>echo '3c59x' >> /etc/modules.autoload.d/kernel-2.4</i>
<comment>(atau kernel-2.6, atau /etc/modules.autoload...)</comment>
</pre>

<p>
Lanjutkan instalasi dengan <uri link="?part=1&amp;chap=8">Mengkonfigurasi
Sistem Anda</uri>.
</p>

</body>
</subsection>
</section>
</sections>
