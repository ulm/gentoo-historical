<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $Id: hb-install-ia64-disk.xml,v 1.4 2007/07/04 14:26:15 neysx Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>3.2</version>
<date>2007-06-26</date>

<!-- TODO: Add section about MTD and such -->

<section>
<title>Pengenalan ke Block Device</title>
<subsection>
<title>Block Device</title>
<body>

<p>
Kita akan melihat lebih dalam tentang aspek disk di Gentoo Linux dan Linux pada
umumnya, termasuk filesystem Linux, partisi dan block device. Kemudian, setelah
anda mulai mengenal disk dan filesystem luar dan dalam, anda akan dipandu dalam
proses pembuatan partisi dan filesystem untuk instalasi Gentoo Linux anda.
</p>

<p>
Pertama-tama, kami akan memperkenalkan <e>block device</e>. Block device yang
paling dikenal mungkin adalah device yang menunjukkan drive IDE pertama anda
di sistem Linux, bernama <path>/dev/hda</path>. Jika sistem anda menggunakan
drive SCSI atau SATA, maka drive pertama anda akan dinamakan
<path>/dev/sda</path>.
</p>

<p>
Block device di atas menunjukkan sebuah antarmuka abstrak ke disk.
Program-program dapat menggunakan block device tersebut untuk berinteraksi
dengan disk anda tanpa perlu khawatir apakah drive anda adalah IDE, SCSI,
atau yang lain. Program-program dapat dengan mudah menuliskan data ke disk
sebagai susunan blok-blok 512 byte yang dapat diakses secara acak.
</p>

</body>
</subsection>
<subsection>
<title>Partisi</title>
<body>

<p>
Walaupun secara teori anda dapat menggunakan seluruh disk untuk sistem Linux,
hal ini hampir tidak pernah diterapkan. Tetapi, block device disk
dipisah-pisahkan lagi menjadi block device yang lebih kecil, agar lebih mudah
ditangani. Pada sistem <keyval id="arch"/>, block device kecil tersebut dikenal
sebagai <e>partisi</e>.
</p>

<p>
KOmputer Itanium menggunakan EFI, <e>Extensible Firmware Interface</e>, untuk
boot. Format tabel partisi yang dimengerti oleh EFI disebut GPT, atau <e>GUID
Partition Table</e>. Program pembuat partisi yang dapat mengerti GPT adalah
<c>parted</c>, jadi kita akan menggunakannya. Sebagai tambahan, EFI hanya
dapat membaca filesystem FAT, jadi format inilah yang akan kita gunakan untuk
partisi boot, tempat kernel akan diinstal oleh <c>elilo</c>.
</p>

</body>
</subsection>
<subsection>
<title>Advanced Storage</title>
<body>

<p>
CD Instalasi <keyval id="arch"/> menyediakan dukungan untuk EVMS dan LVM2.
EVMS dan LVM2 meningkatkan fleksibilitas pada saat setup partisi anda. Selama
proses instalasi, kami akan berfokus pada partisi "biasa", tetapi bagus juga
untuk mengetahui bahwa EVMS dan LVM2 juga didukung.
</p>

</body>
</subsection>
</section>
<section>
<title>Merancang Skema Partisi</title>
<subsection>
<title>Skema Partisi Default</title>
<body>

<p>
Jika anda tidak tertarik untuk merancang sebuah skema partisi anda sendiri
untuk sistem anda, anda dapat menggunakan skema partisi yang kami gunakan di
seluruh buku ini:
</p>

<table>
<tr>
  <th>Partisi</th>
  <th>Filesystem</th>
  <th>Besar</th>
  <th>Penjelasan</th>
</tr>
<tr>
  <ti><path>/dev/sda1</path></ti>
  <ti>vfat</ti>
  <ti>32M</ti>
  <ti>Partisi boot EFI</ti>
</tr>
<tr>
  <ti><path>/dev/sda2</path></ti>
  <ti>(swap)</ti>
  <ti>512M</ti>
  <ti>Partisi swap</ti>
</tr>
<tr>
  <ti><path>/dev/sda3</path></ti>
  <ti>ext3</ti>
  <ti>Sisa dari disk</ti>
  <ti>Partisi root</ti>
</tr>
</table>

<p>
Jika anda tertarik untuk mengetahui seberapa besar sebuah partisi harusnya,
atau tentang berapa banyak partisi yang anda perlukan, baca terus seksi
selanjutnya. Jika tidak, lanjutkan dengan proses mem-partisi disk, dengan
membaca <uri link="#parted">Menggunakan parted untuk mem-partisi disk</uri>:
</p>

</body>
</subsection>
<subsection>
<title>Berapa Banyak dan Berapa Besar?</title>
<body>

<p>
Jumlah partisi sangat tergantung pada lingkungan anda. Sebagai contoh, jika
anda memiliki banyak pengguna (user), anda mungkin sekali ingin menciptakan
partisi <path>/home</path> yang terpisah untuk meningkatkan keamanan dan
proses backup semakin mudah. Jika anda menginstal Gentoo sebagai server mail,
partisi <path>/var</path> anda sebaiknya dipisahkan karena surat-surat anda
disimpan di partisi <path>/var</path>. Pilihan filesystem yang tepat juga
dapat meningkatkan performa. Server-server game sebaiknya memiliki partisi
<path>/opt</path> yang terpisah karena kebanyakan server game diinstal di
partisi tersebut. Alasan utamanya juga sama dengan partisi <path>/home</path>:
keamanan dan backup. Anda pasti ingin menjaga <path>/usr</path> agar tetap
luas: bukan hanya karena partisi ini menampung hampir semua aplikasi, tapi
pohon Portage saja memerlukan ruang sebesar 500MB, belum termasuk berbagai
macam paket source yang disimpan di dalamnya.
</p>

<p>
Seperti yang anda lihat, jumlah partisi sangat tergantung pada tujuan anda.
Partisi-partisi yang terpisah memiliki beberapa keuntungan:
</p>

<ul>
<li>
  Anda dapat memilih filesystem yang paling tepat untuk setiap partisi
</li>
<li>
  Seluruh sistem anda tidak akan kehabisan ruang kosong jika sebuah aplikasi
  secara terus-menerus menulis file-file ke sebuah partisi.
</li>
<li>
  Waktu untuk memeriksa filesystem lebih cepat, karena beberapa pemeriksaan
  dapat dijalankan secara bersamaan (walaupun keuntungan ini lebih dirasakan
  oleh multi-disk daripada multi-partisi)
</li>
<li>
  Keamanan dapat ditingkatkan dengan me-mount beberapa partisi secara
  read-only, nosuid (setuid bit diabaikan), noexec (executable bit
  diabaikan), dll.
</li>
</ul>

<p>
Walaupun begitu, multi-partisi memiliki satu kelemahan utama: jika tidak
dikonfigurasi dengan benar, anda akan mendapatkan sistem yang memiliki
banyak ruang kosong di satu partisi dan kekurangan ruang kosong di partisi
lain. Untuk sistem SCSI dan SATA, terdapat batas partisi sebanyak 15.
</p>

<p>
Berikut ini adalah contoh tabel partisi disk 20 Gb, yang digunakan pada laptop
(berisi webserver, mailserver, gnome, ...):
</p>

<pre caption="Contoh Penggunaan Filesystem">
$ <i>df -h</i>
Filesystem    Type    Size  Used Avail Use% Mounted on
/dev/hda5     ext3    509M  132M  351M  28% /
/dev/hda2     ext3    5.0G  3.0G  1.8G  63% /home
/dev/hda7     ext3    7.9G  6.2G  1.3G  83% /usr
/dev/hda8     ext3   1011M  483M  477M  51% /opt
/dev/hda9     ext3    2.0G  607M  1.3G  32% /var
/dev/hda1     ext2     51M   17M   31M  36% /boot
/dev/hda6     swap    516M   12M  504M   2% &lt;not mounted&gt;
<comment>(Sisa disk yang tidak terpartisi untuk penggunaan masa datang: 2 Gb)</comment>
</pre>

<p>
Partisi <path>/usr</path> hampir penuh (terpakai 83%) pada contoh di atas,
tetapi setelah seluruh software terinstal, partisi <path>/usr</path> tidak
akan berkembang banyak lagi. Untuk partisi <path>/var</path>, Kelihatannya
ruang kosong yang dialokasikan terlalu banyak, ingatlah bahwa Portage secara
default menggunakan partisi ini untuk mengkompliasi semua program-program. Jika
anda ingin menjaga <path>/var</path> agar tetap memiliki ukuran yang cukup
beralasan, misalnya 1GB, anda perlu mengganti variabel <c>PORTAGE_TMPDIR</c> di
<path>/etc/make.conf</path> agar menunjuk ke sebuah pertisi yang memiliki ruang
kosong yang cukup untuk mengkompilasi paket-paket besar seperti OpenOffice.
</p>

</body>
</subsection>
</section>
<section id="parted">
<title>Menggunakan parted untuk mem-partisi disk</title>
<subsection>
<body>

<p>
Bagian berikut ini menjelaskan tentang cara menciptakan contoh tabel partisi
seperti yang dijabarkan sebelumnya, yaitu:
</p>

<table>
<tr>
  <th>Partisi</th>
  <th>Penjelasan</th>
</tr>
<tr>
  <ti><path>/dev/sda1</path></ti>
  <ti>Partisi boot EFI</ti>
</tr>
<tr>
  <ti><path>/dev/sda2</path></ti>
  <ti>Partisi swap</ti>
</tr>
<tr>
  <ti><path>/dev/sda3</path></ti>
  <ti>Partisi root</ti>
</tr>
</table>

<p>
Gantilah tabel partisi sesuai kebutuhan anda.
</p>

</body>
</subsection>
<subsection>
<title>Menampilkan Tabel Partisi Saat ini</title>
<body>

<p>
<c>parted</c> adalah <e>Partition Editor</e> dari GNU. Jalankan <c>parted</c>
pada disk anda (di sini, kita menggunakan <path>/dev/sda</path>):
</p>

<pre caption="Menjalankan parted">
# <i>parted /dev/sda</i>
</pre>

<p>
Setelah anda berada di dalam <c>parted</c>, anda akan mendapatkan prompt
seperti berikut:
</p>

<pre caption="Prompt parted">
GNU Parted 1.6.22
Copyright (C) 1998 - 2005 Free Software Foundation, Inc.
This program is free software, covered by the GNU General Public License.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

Using /dev/sda
(parted)
</pre>

<p>
Salah satu perintah yang tersedia di sini adalah <c>help</c>, yang harus anda
gunakan jika anda ingin mengetahui perintah-perintah lain yang tersedia.
Perintah lainnya adalah <c>print</c> yang harus anda ketikkan setelah ini
untuk melihat konfigurasi partisi anda yang sudah ada:
</p>

<pre caption="Contoh tabel partisi">
(parted) <i>print</i>
Disk geometry for /dev/sda: 0.000-34732.890 megabytes
Disk label type: gpt
Minor    Start       End     Filesystem  Name                  Flags
1          0.017    203.938  fat32                             boot
2        203.938   4243.468  linux-swap
3       4243.469  34724.281  ext3
</pre>

<p>
Konfigurasi ini sangat mirip dengan skema partisi anjuran kami di atas.
Perhatikan, baris kedua pada tabel partisi memiliki tipe GPT. Jika bukan GPT,
maka sistem ia64 tidak akan bisa boot dari disk ini. Untuk membantu anda
memahaminya, kami akan menghapus semua partisi dan membuatnya lagi.
</p>

</body>
</subsection>
<subsection>
<title>Menghapus Semua Partisi</title>
<body>

<note>
Tidak seperti <c>fdisk</c> dan program pembuat partisi lainnya yang menerapkan
perubahan setelah anda memerintahkannya, semua perintah di <c>parted</c>
langsung diterapkan. Jadi ketika anda menambahkan/menghapus partisi, anda tidak
dapat keluar dari <c>parted</c> dengan harapan tabel partisi akan kembali
seperti semula... semua perubahan sudah diterapkan.
</note>

<p>
Cara mudah untuk menghapus partisi dan memulai dengan tabel kosong, dengan
menjamin kita telah menggunakan tipe partisi yang benar, adalah dengan membuat
tabel partisi baru menggunakan perintah <c>mklabel</c>. Setelah melakukannya,
anda harus mengosongkan tabel partisi GPT.
</p>

<pre caption="Menciptakan tabel partisi baru">
(parted) <i>mklabel gpt</i>
(parted) <i>print</i>
Disk geometry for /dev/sda: 0.000-34732.890 megabytes
Disk label type: gpt
Minor    Start       End     Filesystem  Name                  Flags
</pre>

<p>
Setelah tabel partisi di memori kosong, anda sudah siap untuk menciptakan
partisi-partisi. Kita akan menggunakan skema partisi default seperti yang
dijabarkan sebelumnya. Tentu saja, jangan ikuti instruksi ini secara persis
jika anda tidak ingin menggunakan skema partisi yang sama!
</p>

</body>
</subsection>
<subsection>
<title>Menciptakan Partisi Boot EFI</title>
<body>

<p>
Pertama-tama, kita akan menciptakan sebuah partisi boot EFI kecil. Partisi ini
harus menggunakan filesystem FAT agar dapat dibaca oleh firmware ia64. Contoh
ini membuat partisi boot EFI sebesar 32MB, cukup untuk menyimpan kernel dan
konfigurasi <c>elilo</c>. Kernel ia64 kira-kira berukuran 5MB, jadi konfigurasi
ini masih menyisakan tempat untuk anda bereksperimen dengan kernel lain.
</p>

<pre caption="Menciptakan partisi boot">
(parted) <i>mkpart primary fat32 0 32</i>
(parted) <i>print</i>
Disk geometry for /dev/sda: 0.000-34732.890 megabytes
Disk label type: gpt
Minor    Start       End     Filesystem  Name                  Flags
1          0.017     32.000  fat32
</pre>

</body>
</subsection>
<subsection>
<title>Menciptakan Partisi Swap</title>
<body>

<p>
Sekarang marilah kita ciptakan partisi swap. Ukuran klasik untuk partisi swap
adalah dua kali ukuran RAM di komputer. Pada komputer modern yang memiliki
banyak RAM, hal ini tidak lagi berlaku. Untuk kebanyakan sistem desktop, 512MB
sudah cukup. Untuk server, anda harus mempertimbangkan untuk mempertimbangkan
ukuran yang lebih besar untuk mengantisipasi kebutuhan server.
</p>

<pre caption="Menciptakan partisi swap">
(parted) <i>mkpart primary linux-swap 32 544</i>
(parted) <i>print</i>
Disk geometry for /dev/sda: 0.000-34732.890 megabytes
Disk label type: gpt
Minor    Start       End     Filesystem  Name                  Flags
1          0.017     32.000  fat32
2         32.000    544.000
</pre>

</body>
</subsection>
<subsection>
<title>Menciptakan Partisi Root</title>
<body>

<p>
Terakhir, mari kita ciptakan partisi root. Konfigurasi kami menggunakan seluruh
sisa disk untuk partisi root. Kami menggunakan ext3, tetapi anda boleh saja
menggunakan ext2, jfs, reiserfs atau xfs jika anda mau. Filesystem tidak
diciptakan pada langkah ini, tetapi tabel partisi yang berisi indikasi tentang
jenis filesystem yang digunakan oleh setiap partisi. Sesuaikan tabel partisi
anda dengan kebutuhan anda.
</p>

<pre caption="Menciptakan partisi root">
(parted) <i>mkpart primary ext3 544 34732.890</i>
(parted) <i>print</i>
Disk geometry for /dev/sda: 0.000-34732.890 megabytes
Disk label type: gpt
Minor    Start       End     Filesystem  Name                  Flags
1          0.017     32.000  fat32
2         32.000    544.000
3        544.000  34732.874
</pre>

</body>
</subsection>
<subsection>
<title>Keluar dari parted</title>
<body>

<p>
Untuk keluar dari parted, ketik <c>quit</c>. Anda tidak perlu lagi menjalankan
langkah lain untuk menerapkan perubahan tabel karena parted langsung
menerapkannya. Setelah anda keluar, parted akan mengingatkan anda untuk
memperbarui <c>/etc/fstab</c>, yang akan kita lakukan nanti.
</p>

<pre caption="Keluar dari parted">
(parted) <i>quit</i>
Information: Don't forget to update /etc/fstab, if necessary.
</pre>

<p>
Setelah partisi-partisi anda siap, anda dapat melanjutkan ke <uri
link="#filesystems">Menciptakan Filesystem</uri>.
</p>

</body>
</subsection>
</section>
<section id="filesystems">
<title>Menciptakan Filesystem</title>
<subsection>
<title>Pendahuluan</title>
<body>

<p>
Setelah semua partisi anda diciptakan, sekarang saatnya untuk menempatkan
filesystem di partisi tersebut. Jika anda tidak yakin dengan filesystem apa
yang  harus anda pilih dan puas dengan apa yang kami gunakan di buku pegangan
ini, lanjutkan ke <uri link="#filesystems-apply">Menciptakan Filesystem
Partisi</uri>. Jika tidak, baca terus untuk mengetahui filesystem-filesystem
yang tersedia...
</p>

</body>
</subsection>
<subsection>
<title>Filesystem?</title>
<body>

<p>
Kernel Linux mendukung berbagai filesystem. Kami akan menjelaskan vfat, ext2,
ext3, ReiserFS, XFS dan JFS karena filesystem tersebut adalah yang paling
umum digunakan di sistem Linux.
</p>

<p>
<b>vfat</b> adalah filsystem MS-DOS, telah di-update agar dapat menggunakan
nama file yang panjang. Filesystem ini juga merupakan satu-satunya filsystem
yang dapat dibaca oleh firmware EFI pada sistem ia64. Partisi boot di sistem
ia64 harus selalu menggunakan vfat, tetapi partisi anda yang lain harus
menggunakan salah satu dari filesystem berikut ini:
</p>

<p>
<b>ext2</b> adalah filesystem yang asli dan telah dicoba/dipakai tetapi tidak
memiliki journal metadata, yang berarti waktu yang diperlukan untuk memeriksa
filesystem ext2 kadang bisa sangat lama. Saat ini telah ada beberapa filesystem
journal generasi baru yang dapat diperiksa konsistensinya dengan cepat
dan karena itu lebih dipilih daripada partisi non-journal. Journal filesystem
menghindari waktu tunda sewaktu anda boot dari sistem dimana filesystem
anda kebetulan berada pada saat inkonsisten.
</p>

<p>
<b>ext3</b> adalah filesystem ext2 versi journal, memiliki journal metadata
untuk pemulihan sistem yang cepat dan juga beberapa tambahan modus journal
seperti journal data terstruktur dan data penuh. ext3 adalah filesystem yang
sangat bagus dan dapat dihandalkan. Filesystem ini menggunakan <e>HTree
index</e> tambahan yang menghasilkan performa yang tinggi di hampir semua
situasi. Secara singkat, ext3 adalah filesystem yang handal.
</p>

<p>
<b>ReiserFS</b> adalah filesystem berbasis B+tree yang memiliki performa
keseluruhan yang bagus dan performanya melebihi ext2 dan ext3 pada saat
menangani file kecil (file yang besarnya kurang dari 4k), sering kali melebihi
dalam faktor 10x-15x. ReiserFS juga berskala sangat bagus dan memiliki journal
metadata. Setelah kernel 2.4.18+, ReiserFS telah mapan dan bagus untuk
pemakaian umum atau kasus khusus seperti pembuatan filesystem yang besar,
penggunaan file kecil yang banyak, file yang besar, dan direktori yang
mengandung puluhan ribu file.
</p>

<p>
<b>XFS</b> adalah filesystem dengan journal metadata yang datang dengan
fungsi fungsi mapan dan teroptimasi untuk skalabilitas. Kami hanya
merekomendasikan anda menggunakan filesystem ini pada system Linux
dengan disk SCSI kelas atas dan/atau disk fibre serta power supply yang tidak
pernah terputus. Karena XFS meng-cache data yang lewat dengan agresif ke
dalam RAM, data-data mungkin hilang pada saat program yang tidak didisain
dengan benar (program-program yang tidak mengambil langkah yang aman
sewaktu menulis ke disk, dan ada beberapa program seperti itu) berjalan dan
sistem tiba-tiba mati.
</p>

<p>
<b>JFS</b> adalah filesystem journal dengan performa tinggi dari IBM.
Filesystem ini baru-baru ini menjadi filesystem yang siap pakai.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>Menciptakan Filesystem di Partisi</title>
<body>

<p>
Untuk menciptakan filesystem di sebuah partisi, anda dapat menggunakan
beberapa utilitas yang tersedia untuk setiap filesystem:
</p>

<table>
<tr>
  <th>Filesystem</th>
  <th>Perintah</th>
</tr>
<tr>
  <ti>vfat</ti>
  <ti><c>mkdosfs</c></ti>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
Sebagai contoh, untuk menciptakan filesystem vfat di partisi boot
(<path>/dev/sda1</path> pada contoh kita) dan ext3 di partisi root
(<path>/dev/hda3</path> pada contoh kita), anda perlu menjalankan:
</p>

<pre caption="Menciptakan filesystem di partisi">
# <i>mkdosfs /dev/sda1</i>
</pre>

</body>
</subsection>
<subsection>
<title>Mengaktifkan Partisi Swap</title>
<body>

<p>
<c>mkswap</c> adalah perintah untuk menciptakan partisi swap:
</p>

<pre caption="Menciptakan partisi swap">
# <i>mkswap /dev/sda2</i>
</pre>

<p>
Untuk mengaktifkan partisi swap, gunakan <c>swapon</c>:
</p>

<pre caption="Mengaktifkan partisi swap">
# <i>swapon /dev/sda2</i>
</pre>

<p>
Ciptakan dan aktifkan swap seperti contoh di atas.
</p>

</body>
</subsection>
</section>
<section>
<title>Mount</title>
<body>

<p>
Setelah semua partisi anda memiliki filesystemnya masing-masing, sekarang
saatnya untuk me-mount partisi-partisi tersebut. Gunakan perintah <c>mount</c>.
Jangan lupa untuk menciptakan direktori-direktori mount yang diperlukan untuk
setiap partisi anda. Sebagai contoh, kita akan me-mount partisi root:
</p>

<pre caption="Mount partisi">
# <i>mount /dev/sda3 /mnt/gentoo</i>
</pre>

<note>
Tidak seperti arsitektur lain yang didukung oleh Gentoo, <path>/boot</path>
di ia64 tidak perlu di-mount. Alasannya karena partisi boot EFI akan langsung
di-mount dan ditulis oleh perintah <c>elilo</c> setiap kali anda
menjalankannya. Karena itu, direktori <path>/boot</path> terletak di filesystem
root dan merupakan tempat penyimpanan kernel yang akan dicari oleh konfigurasi
<c>elilo</c>.
</note>

<note>
Jika anda ingin menempatkan <path>/tmp</path> anda diletakkan di partisi
terpisah, jangan lupa untuk mengganti perizinan nya setelah proses mount:
<c>chmod 1777 /mnt/gentoo/tmp</c>. Hal ini juga berlaku untuk
<path>/var/tmp</path>.
</note>

<p>
Kita juga perlu me-mount filesystem proc (penghubung kernel virtual) di
<path>/proc</path>. Tetapi, pertama kita perlu menempatkan file-file kita di
partisi.
</p>

<p>
Lanjutkan ke <uri link="?part=1&amp;chap=5">Instalasi File-file Instalasi
Gentoo</uri>.
</p>

</body>
</section>
</sections>
