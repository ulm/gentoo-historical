<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<abstract>
Di sini kita akan belajar tentang cara kerja konfigurasi - anda perlu
mengetahuinya sebelum belajar tentang jaringan modular.
</abstract>

<version>7.0</version>
<date>2006-08-30</date>

<section>
<title>Konfigurasi Advance</title>
<body>

<p>
Variabel <c>config_eth0</c> merupakan jantung dari konfigurasi antarmuka
jaringan. Variabel ini merupakan instruksi level tinggi untuk mengkonfigurasi
antarmuka jaringan (<c>eth0</c> pada contoh ini). Setiap perintah di daftar
instruksi akan dijalankan secara berurutan. Antarmuka akan dianggap OK jika
paling tidak salah satu perintah berhasil dijalankan.
</p>

<p>
Berikut ini merupakan daftar instruksi <e>built-in</e>.
</p>

<table>
<tr>
  <th>Perintah</th>
  <th>Penjelasan</th>
</tr>
<tr>
  <ti><c>null</c></ti>
  <ti>Tidak melakukan apa-apa</ti>
</tr>
<tr>
  <ti><c>noop</c></ti>
  <ti>
    Jika antarmuka telah menyala dan telah memiliki alamat, maka batalkan
    konfigurasi dengan sukses
  </ti>
</tr>
<tr>
  <ti>sebuah alamat IPv4 atau IPv6</ti>
  <ti>Menambahkan alamat ke antarmuka</ti>
</tr>
<tr>
  <ti>
    <c>dhcp</c>, <c>adsl</c> atau <c>apipa</c> (atau sebuah perintah khusus
    dari modul pihak ketiga)
  </ti>
  <ti>
    Jalankan modul yang menyediakan perintah. Misalnya <c>dhcp</c> akan
    menjalankan modul yang menyediakan DHCP, bisa berupa <c>dhcpcd</c>,
    <c>udhcpc</c>, <c>dhclient</c> atau <c>pump</c>.
  </ti>
</tr>
</table>

<p>
Jika perintah gagal, anda dapat menentukan perintah fallback. Fallback harus
sama persis dengan struktur konfigurasi.
</p>

<p>
Anda dapat merangkai perintah-perintah ini bersamaan. berikut ini adalah
beberapa contoh nyata.
</p>

<pre caption="Contoh-contoh konfigurasi">
<comment># Menambahkan tiga alamat IPv4</comment>
config_eth0=(
  "192.168.0.2/24"
  "192.168.0.3/24"
  "192.168.0.4/24"
)

<comment># menambahkan satu alamat IPv4 dan dua alamat IPv6</comment>
config_eth0=(
  "192.168.0.2/24"
  "4321:0:1:2:3:4:567:89ab"
  "4321:0:1:2:3:4:567:89ac"
)

<comment># Menjaga alamat dari kernel, kecuali antarmuka kemudian
# mati, maka berikan alamat lain melalui DHCP. Jika DHCP gagal, maka
# tambahkan sebuah alamat tetap dari APIPA</comment>
config_eth0=(
  "noop"
  "dhcp"
)
fallback_eth0=(
  "null"
  "apipa"
)
</pre>

<note>
Ketika menggunakan modul <c>ifconfig</c> dan menambahkan lebih dari satu
alamat, alias-alias antarmuka diciptakan untuk setiap alamat tambahan. Jadi
dengan dua contoh di atas, anda akan mendapatkan antarmuka <c>eth0</c>,
<c>eth0:1</c> dan <c>eth0:2</c>. Anda tidak dapat melakukan hal-hal khusus
dengan antarmuka-antarmuka ini karena kernel dan program lain hanya akan
menganggap <c>eth0:1</c> dan <c>eth0:2</c> sebagai <c>eth0</c>.
</note>

<impo>
Urutan fallback sangatlah penting! Jika kita tidak menentukan opsi <c>null</c>
maka perintah <c>apipa</c> hanya akan dijalankan jika perintah <c>noop</c>
gagal.
</impo>

<note>
<uri link="?part=4&amp;chap=3#apipa">APIPA</uri> dan <uri
link="?part=4&amp;chap=3#dhcp">DHCP</uri> akan kita bicarakan nanti.
</note>

</body>
</section>
<section>
<title>Dependensi Jaringan</title>
<body>

<p>
Skrip-skrip init di <path>/etc/init.d</path> dapat bergantung pada satu
antarmuka khusus atau hanya net. <c>net</c> dapat didefinisikan di
<path>/etc/conf.d/rc</path> agar berarti sebagai hal-hal lain dengan
menggunakan variabel <c>RC_NET_STRICT_CHECKING</c>.
</p>

<table>
<tr>
  <th>Nilai</th>
  <th>Penjelasan</th>
</tr>
<tr>
  <ti><c>none</c></ti>
  <ti>Servis <path>net</path> selalu dianggap menyala</ti>
</tr>
<tr>
  <ti><c>no</c></ti>
  <ti>
    Opsi ini pada dasarnya berarti bahwa paling tidak salah satu dari servis
    <path>net.*</path> selain <path>net.lo</path> harus menyala. Ini dapat
    digunakan oleh pengguna laptop yang memiliki satu WIFI dan satu NIC statis,
    dan hanya ingin menyalakan salah satu saja pada setiap waktu agar servis
    net dianggap telah menyala.
  </ti>
</tr>
<tr>
  <ti><c>lo</c></ti>
  <ti>
    Opsi ini sama dengan opsi <c>no</c>, tetapi <path>net.lo</path> juga
    dihitung. Ini berguna untuk anda yang tidak peduli tentang antarmuka mana
    yang harus dinyalakan ketika boot.
  </ti>
</tr>
<tr>
  <ti><c>yes</c></ti>
  <ti>
    Untuk opsi ini, SEMUA antarmuka jaringan HARUS dinyalakan agar servis
    <path>net</path> dianggap menyala.
  </ti>
</tr>
</table>

<p>
Tetapi bagaimana dengan <path>net.br0</path> yang bergantung pada
<path>net.eth0</path> dan <path>net.eth1</path>? <path>net.eth1</path> mungkin
merupakan sebuah perangkat nirkabel atau PPP yang memerlukan konfigurasi
sebelum dapat ditambahkan ke bridge. Ini tidak dapat dilakukan di
<path>/etc/init.d/net.br0</path> karena hanya merupakan symlink ke
<path>net.lo</path>.
</p>

<p>
Jawabannya adalah dengan membuat sendiri fungsi <c>depend()</c> anda di
<path>/etc/conf.d/net</path>.
</p>

<pre caption="Dependensi net.br0 di /etc/conf.d/net">
<comment># Anda boleh menggunakan dependensi apapun (use, after, before)
# seperti tertera di skrip-skrip yang telah ada</comment>
 depend_br0() {
  need net.eth0 net.eth1
}
</pre>

<p>
Untuk diskusi lebih detail tentang dependensi, bacalah seksi <uri
link="?part=2&amp;chap=4#doc_chap4">Menulis Skrip Init</uri> di Buku Panduan
Gentoo.
</p>

</body>
</section>

<section id="variable_name">
<title>Nama-nama dan nilai-nilai variabel</title>
<body>

<p>
Nama-nama variabel adalah dinamis. Biasanya nama-nama ini mengikuti struktur
<c>variable_${interface|mac|essid|apmac}</c>. Misalnya, variabel
<c>dhcpcd_eth0</c> berisi opsi-opsi dhcpcd untuk eth0 dan <c>dhcpcd_essid</c>
berisi nilai untuk opsi-opsi dhcpcd ketika salah satu antarmuka melakukan
koneksi ke "essid" ESSID.
</p>

<p>
Bagaimanapun juga, tidak ada aturan baku yang menyatakan nama-nama antarmuka
haruslah <e>ethx</e>. Malahan, banyak antarmuka nirkabel yang memiliki nama
seperti <e>wlanx</e>, <e>rax</e>, dan <e>ethx</e>. Juga, beberapa antarmuka
yang dapat didefinisikan oleh oengguna seperti <e>bridge</e> dapat dinamakan
apa saja, seperti <e>foo</e>. Agar lebih menarik, Access Point nirkabel boleh
diberi nama yang berisi karakter bukan alpha-numeric - ini penting karena anda
dapat mengkonfigurasi parameter jaringan per ESSID.
</p>

<p>
Kelemahan dari semua ini adalah, Gentoo menggunakan variabel bash untuk
jaringan - dan bash tidak dapat menggunakan karakter apapun di luar
alpha-numeric Inggris. Untuk menyiasati keterbatasan ini, kita akan mengganti
semua karakter yang bukan alpha-numeric Inggris menjadi karakter <c>_</c>.
</p>

<p>
Kelemahan lain dari bash ialah isi dari variabel - beberapa karakter harus
di-<e>escape</e>. Hal ini bisa kita dapatkan dengan menempatkan karakter
<c>\</c> di depan karakter yang perlu di-escape. Berikut ini merupakan karakter
yang perlu di-escape dengan cara tersebut di atas: <c>"</c>, <c>'</c> dan
<c>\</c>.
</p>

<p>
Pada contoh berikut ini kita menggunakan ESSID nirkabel karena ESSID ini
dapat menggunakan karakter terbanyak.Kita akan menggunakan ESSID
<c>My "\ NET</c>:
</p>

<pre caption="Contoh nama variabel">
<comment># Ini bisa, tetapi domain-nya salah</comment>
dns_domain_My____NET="My \"\\ NET"

<comment># Variabel di atas mengeset domain dns ke My "\ NET ketika sebuah
# kartu wireless terhubung ke sebuah AP yang ESSID-nya adalah My "\ NET</comment>
</pre>

</body>
</section>
</sections>
