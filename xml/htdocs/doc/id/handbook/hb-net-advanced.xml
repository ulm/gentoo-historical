<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $Id: hb-net-advanced.xml,v 1.1 2006/07/21 23:06:54 neysx Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>1.4</version>
<date>2005-12-22</date>

<section>
<title>Konfigurasi Lebih Lanjut</title>
<body>

<p>
Variabel <c>config_eth0</c> merupakan jantung dari konfigurasi interface.
Variabel ini merupakan daftar instruksi tingkat tinggi untuk konfigurasi
interface (dalam hal ini <c>eth0</c>). Setiap perintah dalam instruksi ini
dilaksanakan secara berurutan. Interface dianggap OK jika paling tidak sebuah
perintah terlaksana.
</p>

<p>
Di bawah ini daftar instruksi tetap.
</p>

<table>
<tr>
  <th>Perintah</th>
  <th>Penjelasan</th>
</tr>
<tr>
  <ti><c>null</c></ti>
  <ti>Tidak melakukan apa-apa</ti>
</tr>
<tr>
  <ti><c>noop</c></ti>
  <ti>
    Jika interface telah menyala dan ada sebuah alamat, maka hentikan
    konfigurasi dengan sukses.
  </ti>
</tr>
<tr>
  <ti>sebuah alamat IPv4 atau IPv6</ti>
  <ti>Tambahkan alamat pada interface</ti>
</tr>
<tr>
  <ti>
    <c>dhcp</c>, <c>adsl</c> atau <c>apipa</c> (atau sebuah perintah lain dari
    modul pihak ketiga)
  </ti>
  <ti>
    Jalankan modul yang menyediakan perintah. Sebagai contoh, <c>dhcp</c> akan
    menjalankan sebuah modul yang menyediakan DHCP, bisa berupa <c>dhcpcd</c>,
    <c>udhcpc</c>, <c>dhclient</c> atau <c>pump</c>.
  </ti>
</tr>
</table>

<p>
Jika sebuah perintah gagal, anda dapat menentukan sebuah perintah fallback.
Perintah ini harus sesuai dengan struktur konfigurasi.
</p>

<p>
Anda dapat merangkai perintah-perintah ini. Di bawah ini merupakan beberapa
contoh nyata.
</p>

<pre caption="Contoh-contoh Konfigurasi">
<comment># Menambahkan tiga alamat IPv4</comment>
config_eth0=(
"192.168.0.2/24"
"192.168.0.3/24"
"192.168.0.4/24"
)

<comment># Menambahkan sebuah alamat IPv4 dan dua alamat IPv6</comment>
config_eth0=(
"192.168.0.2/24"
"4321:0:1:2:3:4:567:89ab"
"4321:0:1:2:3:4:567:89ac"
)

<comment># Memelihara alamat kita yang telah ditetapkan oleh kernel, kecuali
# interface tidak menyala, maka tetapkan alamat lain melalui DHCP. Jika DHCP
# gagal, maka tambahkan sebuah alamat tetap (statis) yang didapatkan
# dari APIPA</comment>
config_eth0=(
"noop"
"dhcp"
)
fallback_eth0=(
"null"
"apipa"
)
</pre>

<note>
Ketika menggunakan modul <c>ifconfig</c> dan menambahkan lebih dari satu
alamat, alias-alias interface akan diciptakan untuk setiap alamat tambahan.
Jadi, dengan dua contoh di atas, anda akan mendapatkan interface <c>eth0</c>,
<c>eth0:1</c> dan <c>eth0:2</c>. Anda tidak bisa melakukan apapun dengan
interface-interface ini karena kernel dan program lain hanya akan memperlakukan
<c>eth0:1</c> dan <c>eth0:2</c> sebagai <c>eth0</c>.
</note>

<impo>
Urutan fallback adalah penting! Jika kita tidak menentukan opsi <c>null</c> maka
perintah <c>apipa</c> hanya akan dijalankan jika perintah <c>noop</c> gagal.
</impo>

<note>
<uri link="?part=4&amp;chap=3#apipa">APIPA</uri> dan <uri
link="?part=4&amp;chap=3#dhcp">DHCP</uri> akan dibicarakan nanti.
</note>

</body>
</section>
<section>
<title>Ddependensi Jaringan</title>
<body>

<p>
Skrip init di <path>/etc/init.d</path> bisa bergantung kepada sebuah interface
jaringan tertentu atau hanya net. <c>net</c> dapat ditentukan di
<c>/etc/conf.d/rc</c> agar menjadi sesuatu yang lain dengan menggunakan
variabel <c>RC_NET_STRICT_CHECKING</c>.
</p>

<table>
<tr>
  <th>Nilai</th>
  <th>Penjelasan</th>
</tr>
<tr>
  <ti><c>none</c></ti>
  <ti>Service <path>net</path> akan selalu dianggap menyala</ti>
</tr>
<tr>
  <ti><c>no</c></ti>
  <ti>
    Pada dasarnya ini berarti paling tidak satu service <path>net.*</path>
    selain <path>net.lo</path> harus menyala. Ini bisa digunakan oleh pengguna
    notebook yang memiliki sebuah WIFI dan NIC statis, dan hanya ingin salah
    satu menyala di waktu tertentu agar service net dianggap menyala.
  </ti>
</tr>
<tr>
  <ti><c>lo</c></ti>
  <ti>
    Ini sama dengan opsi <c>no</c>, tetapi <path>net.lo</path> juga dihitung.
    Ini berguna untuk yang tidak peduli akan interface mana yang harus
    menyala ketika boot.
  </ti>
</tr>
<tr>
  <ti><c>yes</c></ti>
  <ti>
    Untuk ini, SEMUA interface jaringan HARUS menyala agar service <path>net</path>
    bisa dianggap menyala.
  </ti>
</tr>
</table>

<p>
Tapi bagaimana dengan <path>net.br0</path> yang bergantung kepada
<path>net.eth0</path> dan <path>net.eth1</path>? <path>net.eth1</path> dapat
berupa sebuah wireless atau device PPP yang membutuhkan konfigurasi sebelum
bisa ditambahkan ke bridge. Hal ini tidak bisa dilakukan di
<path>/etc/init.d/net.br0</path> karena file ini hanya berupa symbolic link
ke <path>net.lo</path>.
</p>

<p>
Jawabannya adalah dengan menciptakan fungsi <c>depend()</c> anda sendiri di
<path>/etc/conf.d/net</path>.
</p>

<pre caption="Dependensi net.br0 di /etc/conf.d/net">
<comment># Anda dapat menggunakan dependensi apa saja (use, after, before) seperti yang terdapat pada skrip di bawah ini</comment>
depend_br0() {
  need net.eth0 net.eth1
}
</pre>

<p>
Untuk diskusi yang lebih detil tentang dependensi, bacalah seksi <uri
link="?part=2&amp;chap=4#doc_chap4">Menulis Skrip Init</uri> di
Buku Panduan Gentoo.
</p>

</body>
</section>

<section id="variable_name">
<title>Nama-nama dan Nilai Variabel</title>
<body>

<p>
Nama-nama variabel adalah dinamis. Biasanya, nama-nama ini mengikuti struktur
<c>variable_${interface|mac|essid|apmac}</c>. Sebagai contoh variabel
<c>dhcpcd_eth0</c> menyimpan nilai untuk opsi dhcpcd untuk eth0 dan
<c>dhcpcd_essid</c> menyimpan nilai untuk opsi dhcpcd ketika ada interface
yang terhubung ke ESSID "essid".
</p>

<p>
Bagaimanapun juga, tidak ada aturan keras dan cepat yang menyatakan nama-nama
interface harus berupa ethx. Malahan, banyak interface wireless yang memiliki
nama seperti wlanx, rax, juga ethx. Selain itu, beberapa interface yang dapat
ditetapkan oleh user seperti bridge dapat diberikan anama apa saja, seperti
foo. Untuk menjadikan hidup lebih asyik, Titik Akses wireless bisa menggunakan
nama dengan karakter bukan alpha-numeric - ini penting karena anda dapat
mengkonfigurasi parameter jaringan per ESSID.
</p>

<p>
Kelemahan dari semua ini adalah Gentoo menggunakan variabel bash untuk
jaringan - dan bash tidak dapat menggunakan apapun selain karakter
alpha-numeric Inggris. Untuk menyiasati keterbatasan ini, kita bisa mengganti
setiap karakter yang bukan alpha-numeric Inggris ke karakter <c>_</c>.
</p>

<p>
Kelemahan lain dari bash adalah isi variabel - beberapa karakter perlu
di-escape. Hal ini bisa dicapai dengan cara menempatkan karakter <c>\</c> di
depan karakter yang perlu di-escape. Karakter-karakter berikut ini perlu
di-escape dengan cara tersebut: <c>"</c>, <c>'</c> dan <c>\</c>.
</p>

<p>
Pada contoh ini kita menggunakan ESSID wireless karena bisa mengandung cakupan
karakter terluas. Kita akan menggunakan ESSID <c>My "\ NET</c>:
</p>

<pre caption="variable name example">
<comment># Ini bisa, tapi domain nya tidak valid</comment>
dns_domain_My____NET="My \"\\ NET"

<comment># Contoh di atas mengeset dns domain ke My "\ NET ketika sebuah kartu
# wireless terhubung ke sebuah AP yang ESSID-nya adalah My "\ NET</comment>
</pre>

</body>
</section>
</sections>
