<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Id: cron-guide.xml,v 1.1 2006/12/21 12:06:02 neysx Exp $ -->

<guide link="/doc/id/cron-guide.xml" lang="id">
<title>Panduan Cron Gentoo Linux</title>

<author title="Author">
  <mail link="airuike@gmail.com">Eric Brown</mail>
</author>
<author title="Editor">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Translator">
  <mail link="kucrut.dz@gmail.com">Dzikri Aziz</mail>
</author>

<abstract>
Panduan ini menjelaskan cara men-setup dan menggunakan cron.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.7</version>
<date>2006-02-20</date>

<chapter>
<title>Dasar-dasar Cron</title>
<section>
<title>Apa yang dilakukan oleh cron</title>
<body>

<p>
Cron merupakan sebuah daemon yang menjalankan tugas yang telah dijadwalkan
berdasarkan input dari perintah <c>crontab</c>. Cron menyelesaikan tugas ini
dengan membangunkan dirinya setiap menit dan memeriksa apakah ada cron-job
yang harus dijalankannya berdasarkan crontab user.
</p>

<note>
Ingatlah bahwa <e>crontab</e> adalah nama untuk daftar cron-job dan nama dari
perintah untuk mengedit daftar tersebut.
</note>

</body>
</section>
<section>
<title>Cron de facto</title>
<body>

<p>
Paling tidak terdapat tiga implementasi cron yang bisa anda pilih di Portage.
Kesemuanya menyediakan antarmuka yang mirip, dengan menggunakan perintah
<c>crontab</c> atau yang semacamnya. Terdapat juga utilitas terkait yang
bernama Anacron yang ditujukan untuk bekerja bersama-sama dengan cron pada
sistem yang tidak selalu menyala.
</p>

<p>
Perlu diketahui juga bahwa ketiga paket cron bergantung kepada paket
<c>sys-process/cronbase</c>. Paket ini secara teknis tidak dibutuhkan oleh
paket cron manapun, tetapi menyediakan fungsionalitas mirip cron yang mungkin
disukai oleh semua user.
</p>

<p>
Sebelum kita mulai bekerja dengan cron, anda harus memilih implementasi mana
yang ingin anda gunakan. Untuk membantu anda, penulis telah mengumpulkan
informasi tentang masing-masing implementasi di bawah ini.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Cron mana yang tepat untuk anda?</title>
<section>
<title>Vixie cron</title>
<body>

<p>
Vixie cron merupakan implementasi penuh fitur berbasis SysV cron. Setiap user
memiliki crontab-nya masing-masing dan boleh menentukan variabel lingkungan
di dalam crontab tersebut. Tidak seperti varian cron yang lain, cron ini juga
menawarkan dukungan untuk SeLinux dan PAM. Cron ini mendukung arsitektur lebih
sedikit dari Dcron, tetapi lebih banyak dari Fcron.
</p>

<p>
Fitur-fitur <c>sys-process/vixie-cron</c>:
</p>

<ul>
<li>
  Dukungan untuk SELinux
</li>
<li>
  Dukungan untuk PAM <path>/etc/security/limits.conf</path>
</li>
<li>
  Setting variabel lingkungan di crontab (PATH, SHELL, HOME, etc.)
</li>
<li>
  Setiap user boleh memiliki crontab-nya sendiri, akses dikendalikan oleh
  cron.allow dan cron.deny
</li>
</ul>

</body>
</section>
<section>
<title>Dillon's Cron</title>
<body>

<p>
Dcron diciptakan untuk menjadi implementasi cron yang sederhana, elegan, dan
aman. Implementasi ini tidak mengizinkan spesifikasi variabel lingkungan di
crontab dan semua cron-job dijalankan dari <path>/bin/sh</path>. Seperti Vixie
cron, setiap user boleh memiliki crontab-nya sendiri.
</p>

<p>
Fitur-fitur <c>sys-process/dcron</c>:
</p>

<ul>
  <li>
    Kencang, sederhana dan bebas dari fitur-fitur yang tidak diperlukan
  </li>
  <li>
    Akses ke <c>crontab</c> terbatas pada grup cron
  </li>
</ul>

</body>
</section>
<section>
<title>Fcron</title>
<body>

<p>
Fcron diciptakan untuk menjadi pengganti Vixie cron dan Anacron. Dirancang
untuk bekerja pada sistem yang tidak selalu dinyalakan dan memiliki beberapa
fitur tambahan. Memiliki penyekat startup job, kendali serialisasi job,
kemampuan untuk menetapkan nilai "nice" ke job dan kemampuan untuk menjadwalkan
job agar dijalankan ketika sistem startup. Bukalah <uri
link="http://fcron.free.fr/">website fcron</uri> untuk info lebih lanjut.
</p>

<p>
Fitur-fitur <c>sys-process/fcron</c>:
</p>

<ul>
  <li>
    Dirancang untuk bekerja pada sistem yang tidak selalu dinyalakan, yakni
    dapat mengerjakan tugas setelah restart jika tugas tersebut terlewatkan.
  </li>
  <li>Setting variabel lingkungan dan banyak opsi-opsi lain di crontab</li>
  <li>
    Setiap user dapat memiliki crontab-nya sendiri, akses dikendalikan oleh
    cron.allow dan cron.deny
  </li>
  <li>
    Sintaks crontab yang disempurnakan dengan dukungan untuk banyak
    fitur-fitur baru
  </li>
</ul>

</body>
</section>

<section>
<title>Anacron</title>
<body>

<p>
Anacron bukanlah merupakan sebuah daemon cron, tetapi merupakan sesuatu yang
biasanya bekerja sama dengan daemon cron. Anacron mengeksekusi perintah pada
interval yang ditentukan dengan hitungan hari dan tidak menganggap bahwa sistem
selalu menyala; ia akan menjalankan tugas-tugas yang terlewatkan ketika sistem
sedang dimatikan. Anacron biasanya bergantung pada daemon cron untuk
menjalankannya setiap hari.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Menggunakan cron</title>
<section>
<title>Instalasi</title>
<body>

<p>
Pilihlah implementasi cron yang paling anda sukai, kemudian emerge.
</p>

<pre caption="Instalasi cron">
# <i>emerge dcron</i>
# <i>/etc/init.d/dcron start</i>
# <i>rc-update add dcron default</i>
</pre>

<p>
Sebagai pilihan, jika anda telah menginstal Fcron, anda juga mungkin ingin
menginstal Anacron.
</p>

<pre caption="Instalasi anacron">
# <i>emerge anacron</i>
# <i>/etc/init.d/anacron start</i>
# <i>rc-update add anacron default</i>
</pre>

</body>
</section>
<section id="systemtab">
<title>Crontab sistem</title>
<body>

<p>
Pesan-pesan setelah instalasi dari beberapa paket cron ini memerintahkan
anda untuk menjalankan <c>crontab /etc/crontab</c>. File
<path>/etc/crontab</path> adalah <e>crontab sistem</e> anda. Sebuah instalasi
cron dapat menggunakannya bersama-sama dengan <c>sys-process/cronbase</c>
untuk menjalankan skrip-skrip di dalam
<path>/etc/cron.{daily,hourly,weekly,monthly}</path>. Catat bahwa Vixie-cron
menjadwalkan tugas-tugasnya di <path>/etc/crontab</path> secara otomatis.
Pengguna Dcron dan Fcron perlu menjalankan <c>crontab /etc/crontab</c> setiap
kali mengadakan perubahan pada <path>/etc/crontab</path>.
</p>

<p>
Catat pula bahwa tugas-tugas yang dijadwalkan di crontab sistem mungkin tidak
akan ditampilkan di daftar cron-job yang ditampilkan oleh <c>crontab -l</c>.
</p>

<p>
Tentunya, anda dapat memilih untuk tidak menggunakan crontab sistem sama sekali.
Jika anda memilih Dcron atau Fcron, <e>jangan</e> menjalankan <c>crontab
/etc/crontab</c>. Jika anda memilih vixie-cron, anda perlu memberi tanda
komentar pada semua baris di file <path>/etc/crontab</path>.
</p>

<pre caption="Memberi tanda komentar pada semua baris di /etc/crontab">
# <i>sed -i -e "s/^/#/" /etc/crontab</i>
</pre>

</body>
</section>
<section>
<title>Memberikan akses ke cron pada user yang terpercaya</title>
<body>

<p>
Jika anda ingin agar user selain root untuk memiliki akses ke daemon cron,
anda perlu membaca seksi ini. Jika tidak, anda boleh melanjutkan ke seksi
selanjutnya, <uri link="#scheduling">menjadwalkan cron-job</uri>.
</p>

<note>
Memberikan akses ke crontab pada user lain tidak akan mengizinkannya untuk
menjalankan cron-job sebagai root. Jika anda ingin agar user dapat mengedit
crontab root, anda perlu melihat <c>sudo</c>. Silakan baca <uri
link="/doc/id/sudo-guide.xml">Panduan Sudo(ers) Gentoo</uri> kami untuk info
selanjutnya.
</note>

<p>
Apapun paket cron yang anda gunakan, jika anda ingin mengizinkan user untuk
mengunakan crontab, pertama-tama ia harus menjadi anggota grup cron. Sebagai
contoh, jika anda ingin menambahkan user <e>wepy</e> ke grup cron, jalankan:
</p>

<pre caption="Menambahkan user ke grup cron">
# <i>gpasswd -a wepy cron</i>
</pre>

<note>
Ketika menambahkan user ke grup cron, pastikan agar user tersebut logout, lalu
login kembali agar perubahan grup berpengaruh.
</note>

<p>
Jika anda menggunakan <b>Dcron</b>, hanya itu saja yang anda butuhkan untuk
memberikan akses ke crontab. Pengguna Dcron boleh melanjutkan ke seksi
selanjutnya, <uri link="#scheduling">menjadwalkan cron-job</uri>, pengguna
cron lain harus terus membaca.
</p>

<p>
Jika anda menggunakan <b>Fcron</b>, anda perlu mengedit
<path>/etc/fcron/fcron.deny</path> dan <path>/etc/fcron/fcron.allow</path>.
cara paling aman adalah dengan <e>tidak</e> mengizinkan semua user di
<path>/etc/fcron/fcron.deny</path>, lalu secara eksplisit mengizinkan user
di <path>/etc/fcron/fcron.allow</path>.
</p>

<impo>
<b>Jika <path>/etc/fcron/fcron.allow</path> atau
<path>/etc/fcron/fcron.deny</path> tidak ada, semua user di grup cron akan
diizinkan untuk menggunakan</b>. fcron memiliki default
<path>fcron.allow</path> yang <b>mengizinkan semua user </b> di grup cron
untuk mengakses fcrontab.
</impo>

<pre caption="Perizinan di fcron.deny">
all
</pre>

<p>
Sekarang, katakanlah kita memiliki user bernama <c>wepy</c> yang perlu
menjadwalkan cron-job-nya sendiri. Kita akan menambahkannya ke
<path>/etc/fcron/fcron.allow</path> sebagai berikut:
</p>

<pre caption="Perizinan di fcron.allow">
wepy
</pre>

<p>
Jika anda memilih <b>Vixie cron</b>, anda mungkin hanya perlu mengedit
<path>/etc/cron.allow</path>.
</p>

<impo>
Perlu dicatat bahwa jika hanya terdapat <path>/etc/cron.allow</path>, maka
hanya user grup cron yang terdaftar di sana yang akan memiliki akses. Tetapi
jika hanya terdapat file <path>/etc/cron.deny</path> kosong, maka semua user
grup cron akan diizinkan! <b> Jangan membiarkan file <path>/etc/cron.deny</path>
Jika anda tidak memiliki file <path>/etc/cron.allow</path>.</b>
</impo>

<p>
Sebagai contoh, jika anda ingin memberikan akses ke user <e>wepy</e>, anda perlu
menambahkannya ke <path>/etc/cron.allow</path> sebagai berikut:
</p>

<pre caption="Perizinan di /etc/cron.allow">
wepy
</pre>

</body>
</section>

<section id="scheduling">
<title>Menjadwalkan cron-jobs</title>
<body>

<p>
Proses pengeditan crontab berbeda untuk setiap paket, tetapi semuanya mendukung
kumpulan perintah dasar yang sama: menambahkan dan menggantikan crontab,
mengedit crontab, menghapus crontab, dan menampilkan daftar cron-job di cron-tab.
Daftar berikut ini menunjukkan kepada anda cara menjalankan perintah-perintah
tersebut untuk masing-masing paket.
</p>

<table>
<tr>
  <th>Versi</th>
  <th>Edit crontab</th>
  <th>Menghapus crontab</th>
  <th>Crontab baru</th>
  <th>Menampilkan cron-job</th>
</tr>
<tr>
  <ti>dcron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -d <e>[user]</e></c></ti>
  <ti><c>crontab <e>file</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
<tr>
  <ti>fcron</ti>
  <ti><c>fcrontab -e</c></ti>
  <ti><c>fcrontab -r <e>[user]</e></c></ti>
  <ti><c>fcrontab <e>file</e></c></ti>
  <ti><c>fcrontab -l</c></ti>
</tr>
<tr>
  <ti>vixie-cron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -r <e>-u [user]</e></c></ti>
  <ti><c>crontab <e>file</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
</table>

<note>
Ketika menggunakan perintah menghapus, jika tidak ada argumen yang diberikan,
semua crontab user akan dihapus.
</note>

<note>
Fcron juga memiliki symlink dari <c>crontab</c> ke <c>fcrontab</c>.
</note>

<p>
Tetapi sebelum kita menggunakan salah satu dari perintah-perintah ini, pertama
kita perlu memahami crontab itu sendiri. Setiap baris di crontab perlu
menentukan lima kolom dengan urutan ini: menit (0-59), jam (0-23), hari dari
bulan (1-31), bulan (1-12), dan hari dari pekan (0-1, Senin adalah 1 dan Minggu
adalah 0 dan 7). Hari-hari dari pekan dan bulan dapat ditulis dengan singkatan
tiga huruf seperti mon, tue, jan, feb, dll. Setiap kolom juga dapat menentukan
jarak nilai (mis. 1-5 atau mon-fri), nilai yang dipisahkan dengan koma (mis.
1,2,3 atau mon,tue,wed) atau nilai jarak di dalam sebuah <e>langkah</e> (mis.
1-6/2 sebagai 1,3,5).
</p>

<p>
Kelihatannya agak membingungkan, tetapi dengan sedikit contoh, anda akan
melihat bahwa itu sesungguhnya tidak terlalu membingungkan seperti kelihatannya.
</p>

<pre caption="Contoh-contoh">
<comment># Jalankan /bin/false setiap menit selama satu tahun</comment>
*     *     *     *     *        /bin/false

<comment># Jalankan /bin/false pada jam 1:35 di hari senin, selasa, rabu dan hari ke-4 pada setiap bulan</comment>
35    1     4     *     mon-wed  /bin/false

<comment># Jalankan /bin/true pada jam 22:25 di hari ke-2 bulan Maret</comment>
25    22    2     3     *        /bin/true

<comment># Jalankan /bin/false pada jam 2:00 setiap Senin, Rabu dan Jum'at</comment>
0     2     *     *     1-5/2    /bin/false
</pre>

<note>
Perhatikan cara anda menentukan hari-hari tertentu dari setiap pekan dan
hari-hari dari setiap bulan sebelum dikombinasikan. Jika anda hanya memiliki
satu tanda * dari keduanya, yang lainnya akan didahulukan, sedangkan tanda *
untuk keduanya berarti setiap hari.
</note>

<p>
Untuk menguji apa yang baru saja kita peljari, mari kita lalui langkah-langkah
tersebut dengan benar-benar memasukkan beberapa cron-job. Pertama, ciptakan
sebuah file yang bernama <path>crons.cron</path> dan buatlah seperti berikut
ini:
</p>

<pre caption="Mengedit crons.cron">
$ <i>nano crons.cron</i>
<comment>#Menit Jam    Hari   Bulan   Hari dari pekan</comment>
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
</pre>

<p>
Sekarang kita dapat menambahkan crontab tersebut ke sistem dengan "new command"
dari tabel di atas.
</p>

<pre caption="Crontab baru">
# <i>crontab crons.cron</i>
</pre>

<note>
Anda tidak akan dapat melihat keluaran dari perintah-perintah echo di atas
kecuali jika anda menggunakan redirection.
</note>

<p>
Untuk memverifikasi cron-job yang telah anda jadwalkan, kita akan menggunakan
<e>list command</e> dari tabel di atas.
</p>

<pre caption="Menampilkan cron-job">
# <i>crontab -l</i>
</pre>

<p>
Anda seharusnya dapat melihat daftar isi dari <path>crons.cron</path>, jika
tidak, anda mungkin telah mengetikkan perintah yang salah ketika memasukkan
crontab baru anda.
</p>

<p>
Crontab ini seharusnya mengeluarkan "I really like cron" setiap menit dalam
setiap hari dalam setiap bulan. Tentunya anda hanya akan melakukannya jika
anda memang benar-benar menyukai cron. Crontab ini juga akan mengeluarkan
"I like cron a little" pada jam 16:30 setiap hari di bulan Januari dan
Februari. Ia juga akan mengeluarkan "I don't really like cron" pada jam
3:10 di hari pertama bulan Januari.
</p>

<p>
Jika anda menggunakan Anacron, anda harus terus membaca seksi ini. Jika tidak,
silakan melanjutkan ke seksi selanjutnya yaitu <uri link="#editing">mengedit
crontab</uri>.
</p>

<p>
Pengguna Anacronperlu mengedit <path>/etc/anacrontab</path>. File ini memiliki
empat kolom: jumlah hari di antara setiap kali perintah dijalankan, penundaan
dalam hitungan menit setelah dijalankan, nama job, dan perintah yang akan
dijalankan.
</p>

<p>
Sebagai contoh, agar <c>echo "I like anacron"</c> dijalankan setiap 5 hari, 10
menit setelah Anacron dijalankan, anda perlu memasukkan:
</p>

<pre caption="/etc/anacrontab">
5 10 wasting-time /bin/echo "I like anacron"
</pre>

<p>
Anacron ada setelah semua tugas di anacrontab dijalankan, jadi jika kita ingin
agar anacron memeriksa tugas-tugas ini setiap hari, kita perlu menggunakan
cron. Anda akan mengetahui caranya pada instruksi-instruksi di seksi selanjutnya.
</p>

</body>
</section>
<section id="editing">
<title>Mengedit crontab</title>
<body>

<p>
Tetapi mari kita lebih realistis, anda tidak ingin sistem anda menyatakan betapa
anda menyukai cron setiap menit. Sebagai langkah maju, mari kita buang crontab
dengan menggunakan <e>remove command</e> dari tabel di atas. Kita juga akan
melihat cron-job setelahnya, untuk memastikan agar semuanya telah benar.
</p>

<pre caption="Menghapus crontab">
# <i>crontab -d</i>
# <i>crontab -l</i>
</pre>

<p>
Anda seharusnya tidak melihat cron-job dari output perintah <c>crontab -l</c>.
Jika anda masih melihatnya, berarti kita telah gagal menghapus crontab, dan anda
harus memastikan bahwa anda telah menggunakan <e>remove command</e> yang benar
dari paket cron anda.
</p>

<p>
Sekarang setelah kita memiliki file yang bersih, marilah kita meletakkan
sesuatu yang bermanfaat di crontab <b>root</b>. Kebanyakan pengguna ingin
menjalankan <c>updatedb</c> setiap minggu untuk memastikan agar <c>slocate</c>
bekerja dengan benar. Untuk menambahkannya ke crontab anda, pertama mari kita
edit  lagi <path>crons.cron</path> agar terlihat seperti berikut ini:
</p>

<pre caption="Sebuah crontab nyata">
22 2 * * 1    /usr/bin/updatedb
</pre>

<p>
Baris tersebut akan memerintahkan crontab untuk menjalankan <c>updatedb</c>
pada jam  2:22 A.M. di hari Senin setiap pekan. Anda sekarang perlu memasukkan
crontab dengan <e>new command</e> yang benar dari tabel di atas, lalu periksa
kembali daftar tersebut.
</p>

<pre caption="Menampilkan cron-job">
# <i>crontab crons.cron</i>
# <i>crontab -l</i>
</pre>

<p>
Sekarang anggaplah anda juga ingin menambahkan <c>emerge --sync</c> ke jadwal
harian anda. Anda dapat melakukannya dengan mengedit <path>crons.cron</path>
kemudian menggunakan <c>crontab crons.cron</c> persis seperti yang telah kita
lakukan tadi, atau anda dapat menggunakan <e>edit command</e> yang benar dari
tabel di atas. Dengan begini anda memiliki satu cara untuk mengedit crontab
user anda dengan mudah, tanpa bergantung pada file lain seperti
<path>crons.cron</path>.
</p>

<pre caption="Mengedit crontab secara langsung">
# <i>crontab -e</i>
</pre>

<p>
Perintah tersebut akan membuka crontab user anda dengan sebuah editor. Kita
ingin menjalankan <c>emerge --sync</c> setiap jam 6:30 A.M., agar terlihat
seperti berikut ini:
</p>

<pre caption="Sebuah crontab nyata">
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
<comment>(jika anda menggunakan anacron, tambahkan baris ini)</comment>
30 7 * * *    /usr/sbin/anacron -s
</pre>

<p>
lagi-lagi, periksalah daftar cron-job seperti yang telah kita lakukan pada
contoh sebelumnya untuk memastikan agar tugas-tugas tadi telah dijadwalkan.
Jika semuanya telah terdaftar, maka anda telah berhasil.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Menggunakan cronbase</title>
<section>
<body>

<p>
Seperti yang telah disebutkan sebelumnya, ketiga paket cron yang tersedia
bergantung pada <c>sys-process/cronbase</c>. Paket cronbase menciptakan
<path>/etc/cron.{hourly,daily,weekly,monthly}</path>, dan sebuah skrip bernama
<c>run-crons</c>. Anda mungkin telah memperhatikan bahwa
<path>/etc/crontab</path> default berisi seperti berikut ini:
</p>

<pre caption="Crontab sistem default">
*/15 * * * *     test -x /usr/sbin/run-crons &amp;&amp; /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
</pre>

<p>
Agar tidak terlalu bertele-tele, kita boleh saja mengasumsikan bahwa
perintah-perintah ini akan menjalankan skrip anda setiap jam, hari, pekan,
dan bulan. Metode penjadwalan cron-job ini memiliki beberapa keutamaan:
</p>

<ul>
  <li>
    Semua skrip akan dijalankan walaupun komputer anda telah dimatikan ketika
    skrip-skrip tersebut dijadwalkan untuk dijalankan
  </li>
  <li>
    Kemudahan bagi para pengurus paket untuk meletakkan skrip-skrip pada
    tempat-tempat yang telah ditentukan tadi
  </li>
  <li>
    Anda mengetahui dengan pasti di mana cron-job dan crontab anda berada,
    jadi memudahkan anda untuk mem-backup dan mengembalikan bagian dari sistem
    anda
  </li>
</ul>

<note>
Lagi-lagi, anda perlu mengetahui bahwa Vixie cron akan secara otomatis membaca
<path>/etc/crontab</path>, sedangkan dcron dan fcron tidak. Silakan baca bagian
<uri link="#systemtab">Crontab sistem</uri> untuk lebih memperdalam masalah ini.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Catatan Akhir</title>
<section>
<title>Pemecahan masalah</title>
<body>

<p>
Jika anda mengalami masalah ketika mengatur cron, anda mungkin perlu memeriksa
daftar singkat berikut ini.
</p>

<ul>
<li>
  <b>Apakah cron telah berjalan?</b><br/>
    Jalankan <c>ps ax | grep cron</c> dan pastikan agar cron tercantum!
</li>
<li>
  <b>Apakah cron bekerja?</b><br/>
    Cobalah: * * * * * /bin/echo "foobar" &gt;&gt; /file_yang_anda_miliki dan
    pastikan agar bekerja dengan benar bekerja
</li>
<li>
  <b>Apakah perintah anda bekerja?</b><br/>
    Cobalah: * * * * * /bin/foobar &gt; /file_yang_anda_miliki 2&gt;&amp;1 lalu
    cari pesan error pada file tersebut
</li>
<li>
  <b>Dapatkah cron menjalankan tugas anda?</b><br/>
    Carilah error di log cron, biasanya ada di <path>/var/log/cron.log</path>
    atau <path>/var/log/messages</path>
</li>
<li>
  <b>Apakah ada file dead.letter?</b><br/>
    cron biasanya mengirimkan email anda ketika ada masalah, periksa email
    anda juga carilah file <path>~/dead.letter</path>.
</li>
</ul>

<p>
Ingat, setiap paket cron berbeda, begitu juga dengan fitur-fiturnya, Pastikan
untuk membaca manual crontab, fcrontab, atau anacrontab, tergantung apa yang
anda gunakan.
</p>

<p>
Semoga berhasil!
</p>

</body>
</section>
</chapter>

</guide>
