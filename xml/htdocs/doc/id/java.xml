<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Id: java.xml,v 1.5 2008/03/01 20:42:48 neysx Exp $ -->

<guide link="/doc/id/java.xml" lang="id">
<title>Panduan Java Gentoo</title>

<author title="Author">
 <mail link="nichoj@gentoo.org">Joshua Nichols</mail>
</author>
<author title="Author">
 <mail link="karltk@gentoo.org">Karl Trygve Kalleberg</mail>
</author>
<author title="Editor">
 <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="Translator">
 <mail link="kucrut.dz@gmail.com">Dzikri Aziz</mail>
</author>

<abstract>
Panduan ini akan memperkenalkan anda dengan Java dan menjelaskan cara
menggunakannya dengan Gentoo Linux.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.16</version>
<date>2008-01-01</date>

<chapter>
<title>Apa itu Java?</title>
<section>
<title>Pendahuluan</title>
<body>

<p>
Java merupakan sebuah bahasa pemrograman yang dikembangkan oleh para insinyur
Sun Microsystems. Bahasa ini berorientasi objek dan dirancang untuk berjalan
pada berbagai platform tanpa perlu mengkompilasi ulang kode untuk setiap
platform. Walaupun Java dapat dikompilasi sebagai sebuah program asli, Java
lebih terkenal karena portabilitasnya, juga beberapa fitur lain seperti
pengumpulan sampah. Untuk mendapatkan independensi platform, <e>compiler</e>
Java mengkompilasi kode Java ke sebuah perwakilan intermedit yang disebut
<e>"Java bytecode"</e> yang berjalan di atas sebuah JRE (Java Runtime
Environment) dan tidak langsung berjalan di atas sistem operasi.
</p>

<p>
Untuk menjalankan Java bytecode, kita perlu menginstal sebuah JRE (Java Runtime
Environment). JRE menyediakan pustaka kode, Java Virtual Machine yang bergantung
pada platform, <e>plugin</e> untuk browser, di antara yang lainnya. Sebuah JDK
(Java Development Kit) menambahkan tool pemrograman, seperti compiler bytecode
dan debugger.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Sebelum Memulai</title>
<section>
<title>Instalasi yang telah ada</title>
<body>

<p>
Untuk instalasi yang telah ada, tanpa memandang apakah anda telah menginstal
paket Java sebelumnya, pastikan anda telah mengikuti <uri
link="/proj/en/java/java-upgrade.xml">Panduan Upgrade Java</uri>.
</p>

</body>
</section>
<section>
<title>Instalasi baru</title>
<body>

<p>
Instalasi baru tidak memerlukan persiapan lainnya.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Menginstal Virtual Machine</title>
<section>
<title>Pilihan-pilihan</title>
<body>

<p>
Gentoo menyediakan banyak Runtime Environment (JRE ) dan Development Kit
(JDK). Di antara semua pilihan yang ada, kami memiliki:
</p>

<table>
<tr>
  <th>Vendor</th>
  <th>JDK</th>
  <th>JRE</th>
</tr>
<tr>
  <ti>Java Kit Blackdown</ti>
  <ti>dev-java/blackdown-jdk</ti>
  <ti>dev-java/blackdown-jre</ti>
</tr>
<tr>
  <ti>Java Kit Sun</ti>
  <ti>dev-java/sun-jdk</ti>
  <ti>dev-java/sun-jre-bin</ti>
</tr>
<tr>
  <ti>Java Kit IBM</ti>
  <ti>dev-java/ibm-jdk-bin</ti>
  <ti>dev-java/ibm-jre-bin</ti>
</tr>
<tr>
  <ti>J2SE Development Kit BEA WebLogic</ti>
  <ti>dev-java/jrockit-jdk-bin</ti>
</tr>
</table>

<!--
TODO: list free implementations?
note about not drop-in replacements
kaffe/sablevm/gcj/jamvm
-->
<p>
Default untuk Java 1.4 adalah pasangan Blackdown JRE/JDK, karena tersedia
bebas (gratis) tanpa pendaftaran.
</p>

<p>
JRE dan JDK dari Sun, IBM, dan BEA pada umumnya lebih kencang, tapi untuk
mendapatkannya dibutuhkan kerja tambahan, karena anda diminta untuk membaca dan
menyetujui lisensi mereka sebelum mendownloadnya (IBM meminta anda untuk
mendaftarkan diri terlebih dahulu).
</p>

</body>
</section>
<section>
<title>Instalasi JRE/JDK</title>
<body>

<p>
Untuk menginstal JDK default profil anda, jalankan <c>emerge virtual/jdk</c>.
Atau untuk menginstal JRE default profil anda, jalankan
<c>emerge virtual/jre</c>.
</p>

<p>
Baru-baru ini, Sun telah mengganti lisensi JDK dan JRE dengan lisensi yang
lebih bersahabat dengan distro Linux. Hasilnya, Sun meluncurkan Java 1.5 dan
seterusnya yang dapat didownload bebas, tanpa kerumitan tambahan.
</p>

<note>
Sebuah JDK juga berisi sebuah JRE, jadi jika anda menginstal JDK, anda tidak
perlu lagi untuk menginstal JRE.
</note>

</body>
</section>
<section>
<title>Instalasi Virtual Machine dengan proses download yang ketat</title>
<body>

<p>
Seperti yang telah disebutkan di atas, ada beberapa JDK dan JRE yang
mengharuskan anda untuk melewati beberapa rintangan sebelum menginstalnya.
Emerge saja paket-paket tersebut seperti biasa. Anda akan mendapatkan
petunjuk dari ebuild tentang cara dan tempat mendownloadnya.
</p>

<p>
Anda harus meletakkan file yang dibutuhkan di
<path>/usr/portage/distfiles</path>. Setelah itu, anda dapat menjalankan kembali
perintah emerge, maka JRE/JDK akan mulai diinstal.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Konfigurasi virtual machine</title>
<section>
<title>Pendahuluan</title>
<body>

<p>
Gentoo memiliki kemampuan untuk memiliki banyak JDK dan JRE tanpa mengakibatkan
konflik.
</p>

<p>
Dengan menggunakan tool <c>java-config</c>, anda dapat menentukan default untuk
sistem (dengan catatan anda memiliki akses root). Pengguna biasa juga dapat
menggunakan <c>java-config</c> untuk menentukan default mereka masing-masing.
</p>

<note>
Anda juga dapat menggunakan <e>eselect</e> untuk mengganti VM sistem dan user.
Bacalah <c>eselect java-vm help</c>.
</note>

</body>
</section>
<section>
<title>Menentukan virtual machine default</title>
<body>

<p>
Dengan menjalankan perintah <c>java-config --list-available-vms</c>, anda akan
mendapatkan sebuah daftar berisi semua JRE dan JDK yang terinstal di sistem
anda. Berikut ini merupakan contoh output:
</p>

<pre caption="Menampilkan VM yang tersedia">
# <i>java-config --list-available-vms</i>
The following VMs are available for generation-2:
1)      Blackdown JDK 1.4.2.03 [blackdown-jdk-1.4.2]
2)      Blackdown JRE 1.4.2.03 [blackdown-jre-1.4.2]
3)      Blackdown 32bit JRE 1.4.2.03 [emul-linux-x86-java-1.4.2]
4)      Sun 32bit JRE 1.5.0.08 [emul-linux-x86-java-1.5]
5)      Kaffe 1.1.7 [kaffe]
*)      Sun JDK 1.5.0.08 [sun-jdk-1.5]
</pre>

<p>
Lambang <e>*</e> menandakan item tersebut adalah vm yang saat ini aktif
(system-vm atau user-vm ketika diatur). Nama di dalam kurung (<e>[]</e>)
merupakan <e>handle</e> atau ID untuk VM tersebut. Gunakan handle atau nomor
untuk perintah <c>java-config --set-system-vm</c>. Berikut ini merupakan contoh
cara menentukan VM sistem.
</p>

<pre caption="Menentukan VM Sistem">
<comment>(Dengan handle (dianjurkan))</comment>
# <i>java-config --set-system-vm blackdown-jdk-1.4</i>
Sekarang menggunakan blackdown-jdk-1.4 sebagai JVM generation-2
<comment>(Dengan nomor)</comment>
# <i>java-config --set-system-vm 6</i>
Sekarang menggunakan sun-jdk-1.5 sebagai JVM generation-2
</pre>

<p>
Sebagai user biasa, anda dapat menggunakan <c>java-config --set-user-vm</c>.
</p>

<note>
Anda tidak perlu lagi melakukan <c>source</c> ke profil untuk menerapkan
perubahan VM sistem/user.
</note>

</body>
</section>
<section id="preferred-vm">
<title>VM yang dianjurkan</title>
<body>

<p>
Ketika menginstal paket-paket Java, VM dapat dan akan ditukar sesuai dengan
kebutuhan.
</p>

<p>
Karena banyaknya VM yang tersedia, kami tidak memiliki sumber daya untuk
menguji dan memastikan bahwa setiap paket dapat bekerja dengan baik. Jadi untuk
memastikan bahwa semua paket dapat diinstal dengan baik, kami telah membuat
sebuah daftar <e>VM default/yang didukung</e> untuk setiap arsitektur. Anda
dapat menemukannya di
<path>/usr/share/java-config-2/config/jdk-defaults.conf</path>. Ketika anda
menginstal paket Java, dan salah satu dari VM yang ada di dalam daftar tersebut
terinstal, VM tersebut akan langsung digunakan, bukan VM sistem.
</p>

<p>
Perpindahan VM ketika instalasi juga dibutuhkan ketika, misalnya, VM sistem
anda menggunakan 1.4 dan paket yang sedang anda instal membutuhkan VM 1.5.
Selama instalasi, VM 1.5 akan digunakan, tanpa menyentuh VM sistem anda.
</p>

<p>
Tentunya, Gentoo menawarkan banyak pilihan, jadi anda dapat mengganti
default-default ini di <path>/etc/java-config-2/build/jdk.conf</path> dan
memiliki kendali penuh atas VM yang akan digunakan. Beberapa contoh:
</p>

<pre caption="Contoh /etc/java-config-2/build/jdk.conf">
<comment>(Penulis selalu ingin menggunakan sun-jdk, mis. sun-jdk-1.4 untuk 1.4, sun-jdk-1.5 untuk 1.5, dll)</comment>
*=sun-jdk
</pre>

<pre caption="Contoh /etc/java-config-2/build/jdk.conf">
<comment>(Selalu menggunakan sun-jdk-1.5 jika dimungkinkan, kecuali ketika VM 1.4 atau 1.3 diperlukan secara eksplisit)</comment>
*=sun-jdk-1.5
</pre>

<pre caption="Contoh /etc/java-config-2/build/jdk.conf">
<comment># Untuk 1.3 penulis menggunakan sun-jdk 1.4 tetapi jika tidak tersedia, menggunakan ibm-jdk-bin,
# Untuk 1.4, gunakan blackdown-jdk, dan untuk 1.5, gunakan sun-jdk </comment>
1.3=sun-jdk-1.4 ibm-jdk-bin
1.4=blackdown-jdk
1.5=sun-jdk
</pre>

<warn>
Anda tidak perlu mengedit file ini. Jika anda mengganti opsi-opsi ini untuk
menggunakan VM yang tidak didukung, kemungkinan sistem anda akan rusak. Laporan
bug untuk VM yang tidak didukung tidak akan diprioritaskan seperti laporan bug
dengan VM yang didukung.
</warn>

</body>
</section>
</chapter>

<chapter>
<title>Compiler</title>
<section>
<body>

<p>
Compiler Java standar yang digunakan untuk kompilasi adalah <c>javac</c>, yang
dimiliki oleh setiap JDK. Sebagai tambahan konfigurasi VM yang digunakan ketika
kompilasi, anda juga dapat menentukan compiler mana yang ingin anda gunakan.
Pada dasarnya, anda hanya perlu mendaftarkan urutan compiler yang ingin anda
gunakan di <path>/etc/java-config-2/build/compilers.conf</path>.
</p>

<pre caption="/etc/java-config-2/build/compilers.conf">
# Jika ebuild mendukungnya
# variabel COMPILERS akan diperiksa dari depan ke belakang lalu
# compiler pertama yang terinstal akan digunakan

COMPILERS="ecj-3.1 jikes javac"
</pre>

<p>
Beberapa compiler tidak mendukung semua argumen <c>-target</c> dan
<c>-source</c> yang dimungkinkan. Untuk itu, setiap compiler yang ada di dalam
daftar akan diperiksa apakah compiler tersebut dapat mendukung
<c>-source</c>/<c>-target</c> yang diperlukan. Pada kebanyakan kasus
<c>javac</c> dapat digunakan, jadi jika tidak ada compiler lain yang cocok
ditemukan, <c>javac</c> akan digunakan.
</p>

<p>
Berikut ini adalah rincian dari setiap compiler:
</p>

<table>
<tr>
  <th>Nama</th>
  <th>Handle</th>
  <th>Paket</th>
  <th>Penjelasan</th>
</tr>
<tr>
  <ti>javac</ti>
  <ti>javac</ti>
  <ti>Tidak tersedia</ti>
  <ti>
    Ini merupakan compiler default yang akan digunakan, tersedia pada setiap JDK.
  </ti>
</tr>
<tr>
  <ti>jikes</ti>
  <ti>jikes</ti>
  <ti>dev-java/jikes</ti>
  <ti>
    Jikes pada awalnya dikembangkan oleh IBM. Secara anekdot, jikes lebih
    kencang dari javac. Namun perlu dicatat bahwa jikes lebih sewot, dan akan
    gagal pada beberapa keadaan di mana javac tidak mengalami masalah apapun.
    jikes juga belum mendukung sintaks Java 1.5.
  </ti>
</tr>
<tr>
  <ti>Eclipse Compiler for Java</ti>
  <ti>ecj-3.1</ti>
  <ti>=dev-java/eclipse-ecj-3.1*</ti>
  <ti>
    ECJ merupakan compiler yang digunakan oleh Eclipse software development kit.
    ECJ memiliki banyak fitur, dan sangat kencang, mendukung sintaks Java 1.5.
  </ti>
</tr>
</table>

</body>
</section>
</chapter>

<chapter>
<title>Menentukan CLASSPATH default</title>
<section>
<body>

<warn>
Opsi-opsi yang dijelaskan pada seksi ini harus dianggap usang dan kemungkinan
besar akan dibuang di masa yang akan datang. Kami sangat menganjurkan anda
untuk tidak menggunakan opsi-opsi ini, karena proyek-proyek atau aplikasi Java
anda idealnya harus mengatur <e>calsspath</e>-nya sendiri. Jika anda memilih
untuk menentukan CLASSPATH default, beberapa aplikasi mungkin akan bertingkah
aneh, karena class yang tidak diharapkannya terdapat pada classpath.
</warn>

<p>
<c>java-config</c> juga dapat digunakan untuk menentukan CLASSPATH sistem dan
CLASSPATH user.
</p>

<p>
Pertama, anda perlu menampilkan pustaka Java yang terinstal di sistem anda
yang mungkin ingin anda letakkan di CLASSPATH anda. Berikut ini merupakan
contoh output:
</p>

<pre caption="Menampilkan class">
# <i>java-config --list-available-packages</i>
[xerces-2] The next generation of high performance, fully compliant XML parsers in the Apache Xerces family (/usr/share/xerces-2/package.env)
[junit] Simple framework to write repeatable tests (/usr/share/junit/package.env)
[bsh] BeanShell: A small embeddable Java source interpreter (/usr/share/bsh/package.env)
[bcel] The Byte Code Engineering Library: analyze, create, manipulate Java class files (/usr/share/bcel/package.env)
[log4j] A low-overhead robust logging package for Java (/usr/share/log4j/package.env)
...
</pre>

<p>
Lagi-lagi, nama di dalam kurung (<e>[]</e>) merupakan ID yang harus anda
berikan ke perintah <c>java-config --set-system-classpath</c>. Berikut ini
merupakan contoh:
</p>

<pre caption="Menentukan classpath">
# <i>java-config --set-system-classpath log4j,xerces-2</i>
</pre>

<note>
Direktori saat ini (<path>.</path>) tidak akan menjadi bagian dari classpath
sistem, karena seharusnya ditambahkan ke profil login sistem anda.
</note>

<p>
Anda perlu memperbarui lingkungan anda dengan cara logout, kemudian login
kembali atau dengan men-<e>source</e> <path>/etc/profile</path>.
</p>

<p>
Untuk user, <c>java-config --set-user-classpath</c> akan menciptakan
<path>~/.gentoo/java-env-classpath</path>, yang kemudian perlu anda tambahkan
sebagai source di profil shell anda.
</p>

<pre caption="Men-source classpath khusus user">
<i>if [[ -f "${HOME}/.gentoo/java-env-classpath" ]]; then
       source ${HOME}/.gentoo/java-env-classpath
fi</i>
</pre>

<p>
Jika anda benar-benar menginginkan classpath default untuk sistem atau user,
anda dapat menambahkan sesuatu seperti berikut ini di profil shell anda. Tetapi
kami menganjurkan untuk tidak menggunakannya.
</p>

<pre caption="Menentukan classpath">
# <i>export CLASSPATH="${CLASSPATH}:$(java-config --classpath log4j,xerces-2)"</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Plugin Java untuk Browser</title>
<section>
<title>Instalasi plugin</title>
<body>

<p>
Anda dapat menginstal plugin Java untuk browser web dengan meng-emerge VM Java
dengan dukungan flag USE <c>nsplugin</c>.
</p>

<note>
<c>nsplugin</c> tidak tersedia untuk semua arsitektur. Periksalah plugin yang
tersedia untuk arsitektur anda sebelum mencoba untuk menginstal sebuah VM
dengan menjalankan <c>emerge -pv &lt;java-vm&gt;</c>.
</note>

<p>
Portage akan mengijinkan anda untuk menginstal banyak versi plugin Java,
walaupun hanya satu yang akan digunakan oleh browser anda. Anda dapat memeriksa
daftar plugin yang tersedia dengan menjalankan:
</p>

<pre caption="Melihat plugin yang tersedia">
# <i>eselect java-nsplugin list</i>
   [1]   sun-jre-bin-1.5
   [2]   blackdown-jre-1.4.2
</pre>

<p>
Pada contoh berikut ini, <c>sun-jre-bin</c> dipilih untuk plugin browser.
</p>

<pre caption="Memilih plugin">
# <i>eselect java-nsplugin set sun-jre-bin-1.5</i>
</pre>

<p>
Periksa kembali apakah plugin yang benar telah dipilih:
</p>

<pre caption="Memeriksa plugin">
# <i>eselect java-nsplugin list</i>
   [1]   sun-jre-bin-1.5  current
   [2]   blackdown-jre-1.4.2
</pre>

<p>
Java.com juga menyediakan link untuk <uri
link="http://java.com/en/download/installed.jsp">memeriksa plugin anda yang
telah terinstal</uri>. Sebagai tambahan, jika anda menggunakan borwser berbasis
Mozilla, anda dapat memeriksa plugin Java anda dengan mengetikkan
<c>about:plugins</c> di kolom alamat.
</p>

</body>
</section>
<section>
<title>Plugin pada sistem multilib</title>
<body>

<p>
Jika anda menggunakan sistem multilib campuran 64-bit dan 32-bit (mis. pada
AMD64), anda hanya dapat menggunakan plugin 32-bit.
</p>

<p>
Untuk menggunakan plugin 32-bit, anda perlu meng-emerge <c>emul-linux-x86-java</c>
dengan sebelumnya mengaktifkan flag USE <c>nsplugin</c>.
</p>

<pre caption="Installing a 32-bit plugin">
# <i>echo "app-emulation/emul-linux-x86-java nsplugin" &gt;&gt; /etc/portage/package.use</i>
# <i>emerge emul-linux-x86-java</i>
</pre>

<p>
Kemudian, periksa plugin apa saja yang tersedia:
</p>

<pre caption="Melihat plugin yang tersedia">
# <i>eselect java-nsplugin list</i>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.4.2
  [2]   emul-linux-x86-java-1.5
</pre>

<p>
Walaupun anda harus menggunakan browser 32-bit (seperti
<c>mozilla-firefox-bin</c>) untuk digunakan dengan plugin 32-bit, versi 64-bit
dari <c>konqueror</c> menggunakan VM Java anda secara langsung, jadi anda
mendapatkan pilihan untuk menggunakan versi 64-bit dari <c>blackdown</c> dengan
browser ini; dan anda tidak perlu melakukan konfigurasi tambahan.
</p>

<p>
Sekarang pilih untuk browser 32-bit anda:
</p>

<pre caption="Memilih plugin">
# <i>eselect java-nsplugin set 32bit emul-linux-x86-java-1.5</i>
</pre>

<p>
Periksa kembali apakah plugin yang benar telah dipilih:
</p>

<pre caption="Memeriksa plugin">
# <i>eselect java-nsplugin list</i>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.4.2
  [2]   emul-linux-x86-java-1.5   current
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Flag-flag USE untuk digunakan dengan Java</title>
<section>
<title>Pengaturan Flag-flag USE</title>
<body>

<p>
Untuk info lebih lanjut tentang flag-flag use, silakan merujuk bagian <uri
link="/doc/id/handbook/handbook-x86.xml?part=2&amp;chap=2">Flag-flag USE</uri>
dari Buku Pegangan Gentoo.
</p>

</body>
</section>
<section>
<title>Flag-flag</title>
<body>

<ul>
  <li>Flag <b>java</b> menambahkan dukungan untuk Java pada berbagai program</li>
  <li>
    Flag <b>nsplugin</b> menambahkan dukungan untuk browser mirip Mozilla
    (termasuk Firefox). Anda memerlukan ini untuk melihat applet Java pada
    browser mirip Mozilla anda.
  </li>
  <li>
    Flag <b>source</b> menginstal file zip dari source code paket. Biasanya ini
    digunakan oleh IDE untuk meng-<e>'attach'</e> source ke pustaka yang anda
    gunakan.
  </li>
  <li>Flag <b>jce</b> menambahkan dukungan untuk Java Cryptography Engine</li>
  <li>
    Untuk paket-paket Java, flag <b>doc</b> akan membangun dokumentasi API
    dengan menggunakan javadoc.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Sumber-sumber tambahan</title>
<section>
<title>Sumber-sumber off-line</title>
<body>

<ul>
  <li>Manual java-config</li>
  <li><c>java-config --help</c></li>
</ul>

</body>
</section>
<section>
<title>Sumber-sumber online</title>
<body>

<ul>
  <li>
    <uri link="http://www.gentoo.org/proj/en/java/">Website Proyek
    Java</uri>
  </li>
  <li>
    Arsip milis <uri
    link="http://news.gmane.org/gmane.linux.gentoo.java">gentoo-java</uri>,
    <uri
    link="http://news.gmane.org/gmane.linux.gentoo.user">gentoo-user</uri>, dan
    <uri
    link="http://news.gmane.org/gmane.linux.gentoo.devel">gentoo-dev</uri>
  </li>
  <li>#gentoo dan #gentoo-java di irc.freenode.net</li>
  <li>
    <uri
    link="http://en.wikipedia.org/wiki/Java_programming_language">Entri
    Wikipedia untuk Java</uri>
  </li>
  <li>
    Jika anda memiliki saran atau pertanyaan terkait dokumen ini, silakan kirim
    email ke tim Java Gentoo: <mail>java@gentoo.org</mail>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
