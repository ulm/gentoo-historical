<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Id: keychain-guide.xml,v 1.4 2012/04/18 18:30:24 swift Exp $ -->

<guide lang="id">
<title>Panduan Keychain Gentoo Linux</title>

<author title="Author">
  <mail link="eric.brown@dnbrown.net">Eric Brown</mail>
</author>
<author title="Editor">
 <mail link="vanquirius@gentoo.org">Marcelo GÃ³es</mail>
</author>
<author title="Translator">
  <mail link="kucrut.dz@gmail.com">Dzikri Aziz</mail>
</author>

<abstract>
Dokumen ini menjelaskan cara menggunakan kunci publik ssh dan program keychain.
Anda dianggap telah memiliki pemahaman dasar tentang kriptografi kunci publik.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.3</version>
<date>2006-04-29</date>

<chapter>
<title>Latar Belakang</title>
<section>
<title>Masalah yang dihadapi</title>
<body>

<p>
Jadi anda sudah memiliki komputer Gentoo yang menjalankan <c>sshd</c>, tetapi
belum merasa nyaman karena harus terus-menerus mengetikkan password login, iya
'kan? Atau mungkin anda memiliki skrip atau tugas <c>cron</c> yang memerlukan
cara mudah untuk menggunakan koneksi ssh. Apapun masalah anda, kami memiliki
solusinya, dimulai dengan otentikasi kunci publik.
</p>

</body>
</section>
<section>
<title>Bagaimana otentikasi kunci publik bekerja?</title>
<body>

<p>
Anggaplah kita memiliki sebuah klien yang ingin terhubung ke sshd pada sebuah
server. Pertama-tama klien menciptakan sepasang kunci dan memberikan kunci
publik ke server. Selanjutnya, kapanpun klien ingin terhubung, server akan
mengirimkan pertanyaan yang terenkripsi dengan kunci publik tersebut. Hanya
pemegang pasangan dari kunci publik tadilah (klien) yang dapat mendekripnya.
Jadi, seperti yang sudah bisa anda duga, respon yang benar akan membuat
otentikasi sukes.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Cara menggunakan otentikasi kunci publik</title>
<section>
<title>Menciptakan sepasang kunci</title>
<body>

<p>
Langkah pertama yang harus dilakukan adalah menciptakan sepasang kunci. Untuk
melakukannya, kita akan menggunakan perintah <c>ssh-keygen</c> berikut:
</p>

<pre caption="Menciptakan sepasang kunci">
$ <i>ssh-keygen -t dsa</i>
<comment>(Terima saja nilai-nilai default, dan pastikan untuk memasukkan passphrase yang rumit)</comment>
</pre>

<warn>
Anda harus menggunakan passphrase, terutama jika kunci ini akan digunakan
untuk login root!
</warn>

<p>
Sekarang anda seharusnya sudah memiliki sebuah kunci pribadi di
<path>~/.ssh/id_dsa</path> dan sebuah kunci publik di
<path>~/.ssh/id_dsa.pub</path>. Kita akan mengirimkan kunci publik ke server.
</p>

</body>
</section>
<section>
<title>Menyiapkan server</title>
<body>

<p>
Kita akan mengirimkan <path>~/.ssh/id_dsa.pub</path> ke server yang menjalankan
<c>sshd</c>. Kita juga akan menambahkannya ke file
<path>~/.ssh/authorized_keys</path> milik pengguna yang akan melakukan koneksi
ke server. Berikut ini adalah contoh cara pengirimannya jika anda sudah
memiliki akses ke server.
</p>

<pre caption="Mengirimkan kunci publik ke server">
$ <i>scp ~/.ssh/id_dsa.pub server_user@server:~/myhost.pub</i>
$ <i>ssh server_user@server "cat ~/myhost.pub >> ~/.ssh/authorized_keys"</i>
$ <i>ssh server_user@server "cat ~/.ssh/authorized_keys"</i>
</pre>

<p>
Output dari perintah terakhir akan menunjukkan kepada anda isi file
<path>~/.ssh/authorized_keys</path>. Pastikan agar isinya sudah benar.
</p>

</body>
</section>
<section>
<title>Menguji pengaturan</title>
<body>

<p>
Secara teori, jika semuanya berjalan dengan lancar, dan daemon <c>ssh</c> di
server mengijinkannya, kita sekarang sudah bisa mendapatkan akses ssh tanpa
perlu mengetikkan password. Kita masih harus mendekrip kunci pribadi di klien
dengan passphrase yang kita gunakan tadi, tetapi jangan sampai tertukar dengan
passphrase akun pengguna di server.
</p>

<pre caption="Mencoba kunci">
$ <i>ssh server_user@server</i>
</pre>

<p>
Mudah-mudahan, anda akan ditanyakan passphrase untuk <path>id_dsa</path>, lalu
anda mendapatkan akses ssh sebagai <e>server_user</e> di server. Jika tidak,
login sebagai server_user, kemudian periksa isi
<path>~/.ssh/authorized_keys</path> untuk memastikan apakah setiap entri
masing-masing berada pada satu baris. Anda juga mungkin perlu memeriksa
konfigurasi <path>sshd</path> untuk memastikan apakah otorisasi kunci publik
akan didahulukan jika tersedia.
</p>

<p>
Sekarang anda mungkin berpikir, "Apa gunanya, saya hanya mengganti satu
password dengan password lainnya?!" Tenang, bagian selanjutnya akan menunjukkan
kepada anda bagaimana kita dapat menghemat waktu kita yang sangat berharga
dengan cara ini.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Memperbagus otentikasi kunci publik</title>
<section>
<title>Pengaturan kunci dengan ssh-agent</title>
<body>

<p>
Jika anda sudah mengikuti dari awal, anda mungkin berpikir bahwa kiranya akan
lebih bagus lagi jika kita dapat mendekrip kunci pribadi kita sekali, kemudian
bebas mendapatkan akses ssh tanpa perlu mengetikkan password apapun. Anda
sedang beruntung, inilah fungsi dari program <c>ssh-agent</c>.
</p>

<p>
Program <c>ssh-agent</c> biasanya akan dimulai pada awal sesi X anda, atau dari
skrip startup seperti <path>~/.bash_profile</path>. Program ini bekerja dengan
cara menciptakan sebuah <e>unix-socket</e>, lalu mendaftarkan variabel
lingkungan yang sesuai ke semua aplikasi yang dapat memanfaatkan layanan ini
dengan terhubung ke socket. Sudah jelas, program ini hanya akan berguna jika
kita menjalankannya pada awal sesi X jika kita ingin menggunakan kumpulan
kunci pribadi yang telah didekrip pada semua aplikasi X yang memerlukannya.
</p>

<pre caption="Menyiapkan ssh-agent">
$ <i>ssh-agent</i>
</pre>

<note>
Perintah ini akan menjaga semua kunci agar tetap terdekrip sampai anda
menghentikannya. Jika anda ingin agar semua kunci didekrip seumur hidup,
tambahkan argumen <c>-t</c> seperti yang dijelaskan di <c>man ssh-agent</c>.
</note>

<p>
Ketika anda menjalankan <c>ssh-agent</c>, perintah ini akan memberitahukan anda
tentang PID-nya, juga menetapkan beberapa variabel lingkungan, yaitu
<c>SSH_AUTH_SOCK</c> dan <c>SSH_AGENT_PID</c>. Perintah ini juga akan langsung
menambahkan <path>~/.ssh/id_dsa</path> ke koleksinya dan meminta passphrase
yang benar dari anda. Jika anda memiliki kunci-kunci pribadi lain yang ingin
anda tambahkan ke <c>ssh-agent</c> yang sedang berjalan, anda dapat menggunakan
perintah <c>ssh-add</c> seperti pada contoh berikut:
</p>

<pre caption="Menambahkan kunci lain ke ssh-agent">
$ <i>ssh-add file_kunci_lain</i>
</pre>

<p>
Karena sekarang kunci pribadi anda sudah siap, anda dapat melakukan ssh ke
server tanpa perlu mengetikkan password lagi.
</p>

<pre caption="ssh tanpa password">
$ <i>ssh server</i>
</pre>

<p>
Tidakkah baik jika kita tahu cara menghentikan <c>ssh-agent</c> jika
diperlukan?
</p>

<pre caption="Menghentikan ssh-agent">
$ <i>ssh-agent -k</i>
</pre>

<note>
Jika anda mendapatkan masalah ketika menjalankan ssh-agent, kemungkinan program
ini masih berjalan. Anda dapat menghentikannya seperti proses-proses lain
dengan perintah <c>killall ssh-agent</c>.
</note>

<p>
Jika anda masih menginginkan kenyamanan lain dari ssh-agent, lanjutkan ke
bagian selanjutnya tentang penggunaan <c>keychain</c>. Jangan lupa untuk
menghentikan ssh-agent jika anda ingin melanjutkan.
</p>

</body>
</section>
<section>
<title>Mengambil manfaat terakhir dari ssh-agent</title>
<body>

<p>
Dengan <c>keychain</c> anda dapat menggunakan kembali ssh-agent di antara
beberapa login, dan (opsional) menanyakan passphrase setiap kali ada pengguna
yang login. Namun sebelum melanjutkan, mari kita <c>emerge keychain</c>:
</p>

<pre caption="Instalasi keychain">
# <i>emerge keychain</i>
</pre>

<p>
Dengan anggapan proses emerge sukses, sekarang anda dapat dengan bebas
menggunakan keychain. Tambahkan beris-baris berikut ini ke file
<path>~/.bash_profile</path> anda untuk mengaktifkannya.
</p>

<pre caption="Mengaktifkan keychain di .bash_profile">
keychain ~/.ssh/id_dsa
. ~/.keychain/$HOSTNAME-sh
</pre>

<note>
Anda dapat menambahkan kunci pribadi lain jika anda ingin. Juga, jika anda
ingin ditanyakan passphrase setiap kali anda membuka shell, tambahkan opsi
<c>--clear</c>.
</note>

<note>
Jika anda tidak menggunakan <c>bash</c>, bacalah bagian <b>EXAMPLES</b> dari
<c>man keychain</c> untuk mendapatkan contoh-contoh penggunaannya pada
shell-shell lain. Intinya adalah menjalankan perintah-perintah tersebut setiap
kali anda menggunakan shell.
</note>

<p>
Mari kita coba. Pertama pastikan agar <c>ssh-agent</c> telah dihentikan,
kemudian jalankan shell baru, biasanya cukup dengan login atau membuka
terminal. Anda akan dimintakan password untuk semua kunci yang anda tentukan
tadi. Semua shell yang dibuka setelahnya akan menggunakan kembali ssh-agent,
dan mengijinkan anda untuk terus-menerus mendapatkan koneksi ssh tanpa perlu
memasukkan password.
</p>

</body>
</section>
<section>
<title>Menggunakan keychain dengan KDE</title>
<body>

<p>
Jika anda adalah pengguna KDE, daripada menggunakan
<path>~/.bash_profile</path>, anda juga boleh memerintahkan KDE untuk mengatur
<c>ssh-agent</c>. Untuk melakukannya, anda perlu mengedit file
<path>/usr/kde/${KDE_VERSION}/env/agent-startup.sh</path>, yang dieksekusi
ketika KDE dijalankan, dan file
<path>/usr/kde/${KDE_VERSION}/shutdown/agent-shutdown.sh</path>, yang
dieksekusi ketika KDE dihentikan, dimana ${KDE_VERSION} adalah dua angka
pertama dari versi KDE yang anda gunakan. Misalnya, jika anda menggunakan KDE
3.5.1, berarti anda harus mengedit file:
</p>

<pre caption="Edit /usr/kde/3.5/env/agent-startup.sh">
if [ -x /usr/bin/ssh-agent ]; then
  eval "$(/usr/bin/ssh-agent -s)"
fi
</pre>

<pre caption="Edit /usr/kde/3.5/shutdown/agent-shutdown.sh">
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi
</pre>

<p>
Sekarang, yang perlu anda lakukan adalah membuka terminal kesukaan anda,
seperti <e>Konsole</e>, lalu muat semua kunci yang ingin anda gunakan. Sebagai
contoh:
</p>

<pre caption="Muat kunci ssh">
keychain ~/.ssh/id_dsa
<comment>(Masukkan password kunci anda)</comment>
</pre>

<p>
Kunci-kunci anda akan selalu diingat sampai anda keluar dari dari sesi KDE
atau menghentikan <c>ssh-agent</c>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Penutup</title>
<section>
<title>Pertimbangan Keamanan</title>
<body>

<p>
Tentu saja, penggunaan <e>ssh-agent</e> akan sedikit melonggarkan keamanan
sistem anda. Jika ada orang lain yang menggunakan shell anda ketika anda sedang
berada di toilet, ia bisa login ke semua server anda tanpa membutuhkan
password. Dan akhirnya menjadi resiko bagi server anda. Anda juga perlu membaca
aturan keamanan lokal. Jika anda menggunakan <c>ssh-agent</c>, jangan pernah
lupa untuk mengambil tindakan-tindakan pencegahan yang diperlukan untuk tetap
menjaga keamanan sesi anda.
</p>

</body>
</section>
<section>
<title>Mengatasi masalah</title>
<body>

<p>
Seharusnya semua langkah di panduan ini bisa anda selesaikan tanpa masalah.
Tetapi jika anda mendapatkan masalah, maka anda perlu mengetahui beberapa hal:
</p>

<ul>
  <li>
    Jika anda tidak dapat terhubung dengan <c>ssh-agent</c>, coba gunakan
    <c>ssh</c> dengan argumen <c>-vvv</c> untuk mengetahui apa yang sedang
    terjadi. Terkadang server belum dikonfigurasi untuk menggunakan otentikasi
    kunci publik, terkadang sudah dikonfigurasi tetapi masih menanyakan
    password lokal! Jika ini kasusnya, anda mungkin perlu menggunakan opsi
    <c>-o</c>, atau edit file <path>sshd_config</path> di server.
  </li>
  <li>
    Jika anda mendapatkan masalah dengan <c>ssh-agent</c> atau <c>keychain</c>,
    anda mungkin sedang menggunakan shell yang tidak mengerti akan
    perintah-perintah yang digunakan. Bacalah manual <c>ssh-agent</c> dan
    <c>keychain</c> untuk mengetahui cara penggunaannya dengan shell-shell
    lain.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
