<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: postgres-howto.xml,v 1.1 2007/05/15 12:15:42 neysx Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/id/postgres-howto.xml" lang="id">
<title>Panduan PostgreSQL</title>

<author title="Author">
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>
<author title="Editor">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Editor">
  <mail link="kucrut.dz@gmail.com">Dzikri Aziz</mail>
</author>

<abstract>
Panduan ini dibuat untuk menunjukkan kepada anda pengaturan dasar PostrgreSQL.
Pengaturan yang dijelaskan di sini sudah cukup untuk digunakan dengan aplikasi
web, dan program lain yang menyediakan dukungan PostgreSQL.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.2</version>
<date>2007-04-25</date>

<chapter>
<title>Pendahuluan</title>
<section>
<title>Pengenalan PostgreSQL</title>
<body>

<p>
Ketika kita menanyakan tentang solusi database kepada para pengembang, biasanya
mereka akan menjawabnya dengan dua database utama. Yang pertama adalah
<c>MySQL</c>, sedangkan yang kedua adalah apa yang akan kita bahas di sini,
yaitu <c>PostgreSQL</c>. Kelebihan dari masing-masing database sering
menyebabkan perdebatan panjang, tetapi pada dasarnya, PostgreSQL memiliki lebih
banyak <e>firm grasp</e> pada struktur database relasional daripada MySQL.
Kebanyakan fitur standar seperti <b>FOREIGN KEY</b> baru ditambahkan di MySQL
5. Tetapi, apapun keadaannya, dokumen ini menganggap anda telah memiliki
PostgreSQL. Langkah pertama yang akan kita lakukan adalah proses emerge. Bagian
berikut ini akan menjelaskannya bersama konfigurasi dasar PostgreSQL.
</p>

</body>
</section>
<section>
<title>Instalasi PostgreSQL</title>
<body>

<p>
Untuk memulai kita harus menginstal paket PostgreSQL. Untuk melakukannya,
jalankan dahulu perintah berikut untuk memastikan bahwa opsi-opsinya sudah
ditetapkan dengan benar:
</p>

<pre caption="Memeriksa opsi-opsi kompilasi PostgreSQL">
# <i>emerge -pv postgresql</i>

These are the packages that I would merge, in order:

Calculating dependencies ...done!
[ebuild  N    ] dev-db/postgresql-8.0.4  -doc -kerberos +nls +pam +perl -pg-intdatetime +python +readline (-selinux) +ssl -tcl +xml +zlib 0 kB
</pre>

<p>
Berikut ini adalah daftar dari opsi-opsi kompilasi:
</p>

<table>
<tr>
  <th>Flag USE</th>
  <th>Penjelasan</th>
</tr>
<tr>
  <ti>doc</ti>
  <ti>
    Flag USE ini mengaktifkan atau menonaktifkan instalasi dokumentasi selain
    halaman manual standar. Anda sebaiknya menonaktifkan opsi ini jika anda
    hanya memiliki sedikit sisa ruang kosong di harddisk, karena anda masih
    bisa membaca dokumentasi online.
  </ti>
</tr>
<tr>
  <ti>kerberos</ti>
  <ti>
    Ketika melakukan koneksi ke database, jika opsi ini diaktifkan, admin
    memiliki pilihan untuk menggunakan <c>kerberos</c> untuk mengotentikasi
    pengguna/layanannya ke database.
  </ti>
</tr>
<tr>
  <ti>nls</ti>
  <ti>
    Jika opsi ini diaktifkan, PostgreSQL dapat menterjemahkan kalimat-kalimat
    yang digunakannya ke bahasa selain Inggris.
  </ti>
</tr>
<tr>
  <ti>pam</ti>
  <ti>
    Jika opsi ini diaktifkan dan admin sudah mengatur file konfigurasi
    PostgreSQL dengan benar, pengguna/servis akan dapat login ke database
    PostgreSQL dengan menggunakan <c>PAM</c> (Pluggable Authentication Module).
  </ti>
</tr>
<tr>
  <ti>perl</ti>
  <ti>
    Jika opsi ini diaktifkan, <c>perl</c> <e>binding</e> untuk PostgreSQL akan
    diikutsertakan.
  </ti>
</tr>
<tr>
  <ti>pg-intdatetime</ti>
  <ti>
    Jika opsi ini diaktifkan, PostgreSQL akan mendukung tipe data integer 64
    bit.
  </ti>
</tr>
<tr>
  <ti>python</ti>
  <ti>
    Jika opsi ini diaktifkan PostgreSQL akan dikompilasi dengan dukungan
    <c>python</c> bindings.
  </ti>
</tr>
<tr>
  <ti>readline</ti>
  <ti>
    Jika opsi ini diaktifkan PostgreSQL akan mendukung gaya pengeditan baris
    perintah <c>readline</c>. Ini termasuk sejarah perintah dan isearch.
  </ti>
</tr>
<tr>
  <ti>selinux</ti>
  <ti>
    Jika opsi ini diaktifkan, sebuah polis <c>selinux</c> untuk PostgreSQL akan
    diinstal.
  </ti>
</tr>
<tr>
  <ti>ssl</ti>
  <ti>
    Jika opsi ini diaktifkan, PostgreSQL akan akan memanfaatkan pustaka
    <c>openssl</c> untuk mengenkripsi lalu lintas antara klien klien PostgreSQL
    dan server.
  </ti>
</tr>
<tr>
  <ti>tcl</ti>
  <ti>
    Jika opsi ini diaktifkan, PostgreSQL akan mendapatkan <c>tcl</c> bindings.
  </ti>
</tr>
<tr>
  <ti>xml</ti>
  <ti>
    Jika opsi ini diaktifkan, dukungan <c>XPATH</c> xml akan diikutsertakan.
    Informasi lebih rinci tentang penggunaan dukungan xml dengan PostgreSQL
    bisa anda dapatkan di halaman <uri
    link="http://www.throwingbeans.org/postgresql_and_xml.html">PostgreSQL and
    XML</uri>.
  </ti>
</tr>
<tr>
  <ti>zlib</ti>
  <ti>
    Opsi ini tidak benar-benar diperlukan oleh PostgreSQL sendiri, tetapi
    diperlukan oleh <c>pg_dump</c> untuk memadatkan data yang dihasilkan.
  </ti>
</tr>
</table>

<p>
Setelah anda menyesuaikan flag USE, mulailah proses <c>emerge</c>:
</p>

<pre caption="Instalasi PostgreSQL">
# <i>emerge postgresql</i>
<comment>(Output dipotong)</comment>
>>> /usr/lib/libecpg.so.5 -> libecpg.so.5.0
>>> /usr/bin/postmaster -> postgres
 * Make sure the postgres user in /etc/passwd has an account setup with /bin/bash as the shell
 *
 * Execute the following command
 * emerge --config =postgresql-8.0.4
 * to setup the initial database environment.
 *
>>> Regenerating /etc/ld.so.cache...
>>> dev-db/postgresql-8.0.4 merged.
</pre>

<p>
Seperti yang ditunjukkan oleh output einfo, ada beberapa pengaturan pasca
instalasi yang harus anda lakukan. Bagian berikut ini akan menjelaskannya.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Konfigurasi PostgreSQL</title>
<section>
<title>Pengaturan lingkungan database dasar</title>
<body>

<p>
Seperti yang diberitahukan oleh output <c>emerge</c> tadi, lingkungan database
dasar harus diatur. Namun begitu, sebelum kita melakukannya, kita harus
mempertimbangkan satu hal. Tidak seperti -- katakanlah MySQL --, password root
PostgreSQL adalah password root yang sesungguhnya. Ebuild hanya menciptakan
user, tetapi tidak menetapkan passwordnya. Untuk itu, kita harus menetapkan
dahulu password untuk user postgres:
</p>

<pre caption="Menetapkan password">
# <i>passwd postgres</i>
New UNIX password:
Retype new UNIX password:
passwd: password updated successfully
</pre>

<p>
Selanjutnya, kita dapat melanjutkan ke pengaturan lingkungan database dasar.
</p>

<pre caption="Konfigurasi lingkungan database dengan emerge --config">
# <i>emerge --config =postgresql-8.0.4</i>


Configuring pkg...

 * Creating the data directory ...
 * Initializing the database ...
The files belonging to this database system will be owned by user "postgres".
This user must also own the server process.

The database cluster will be initialized with locale C.

fixing permissions on existing directory /var/lib/postgresql/data ... ok
creating directory /var/lib/postgresql/data/global ... ok
creating directory /var/lib/postgresql/data/pg_xlog ... ok
creating directory /var/lib/postgresql/data/pg_xlog/archive_status ... ok
creating directory /var/lib/postgresql/data/pg_clog ... ok
creating directory /var/lib/postgresql/data/pg_subtrans ... ok
creating directory /var/lib/postgresql/data/base ... ok
creating directory /var/lib/postgresql/data/base/1 ... ok
creating directory /var/lib/postgresql/data/pg_tblspc ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 1000
creating configuration files ... ok
creating template1 database in /var/lib/postgresql/data/base/1 ... ok
initializing pg_shadow ... ok
enabling unlimited row size for system tables ... ok
initializing pg_depend ... ok
creating system views ... ok
loading pg_description ... ok
creating conversions ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok

WARNING: enabling "trust" authentication for local connections
You can change this by editing pg_hba.conf or using the -A option the
next time you run initdb.

Success. You can now start the database server using:

    /usr/bin/postmaster -D /var/lib/postgresql/data
or
    /usr/bin/pg_ctl -D /var/lib/postgresql/data -l logfile start

 *
 * You can use /etc/init.d/postgresql script to run PostgreSQL instead of pg_ctl.
 *
</pre>

<p>
Sekarang lingkungan database dasar sudah siap. Bagian selanjutnya akan
mejelaskan cara memeriksa instalasi dan mengatur pengguna yang boleh mengakses
database.
</p>

</body>
</section>
<section>
<title>Pengaturan Database PostgreSQL</title>
<body>

<p>
Sekarang adalah waktu yang tepat untuk memeriksa instalasi kita. Pertama,
pastikan bahwa servis dapat dijalankan dengan benar:
</p>

<pre caption="Menjalankan servis PostgreSQL">
# <i>/etc/init.d/postgresql start</i>
* Starting PostgreSQL ...                                          [ ok ]
</pre>

<p>
Jika servis sudah bagus, kita juga sebaiknya menambahkannya ke runlevel default
agar langsung dijalankan ketika boot:
</p>

<pre caption="Menambahkan postgresql ke runlevel default">
# <i>rc-update add postgresql default</i>
* postgresql added to runlevel default
</pre>

<p>
Selanjutnya kita akan mencoba mengatur database percobaan. Untuk memulai, mari
kita ciptakan sebuah database percobaan baru dengan perintah <c>createdb</c>.
Kita juga akan menggunakan opsi <c>-U</c> untuk menetapkan user-nya
(default-nya adalah nama user saat ini), dan opsi <c>-W</c> untuk meminta
password yang sebelumnya telah kita tetapkan. Terakhir, kita berikan nama
database yang ingin kita ciptakan:
</p>

<pre caption="Menciptakan database dengan createdb">
$ <i>createdb -U postgres -W test</i>
Password:
CREATE DATABASE
</pre>

<p>
Database berhasil diciptakan dengan sukses, dan kita bisa memastikan bahwa
database tersebut dapat menjalankan tugas-tugas dasar. Kita akan berlanjut
dengan menghapus database ini dengan perintah <c>dropdb</c>:
</p>

<pre caption="Menghapus database dengan dropdb">
$ <i>dropdb -U postgres -W test</i>
Password:
DROP DATABASE
</pre>

<p>
Saat ini, hanya user postgres yang dapat menjalankan perintah. Tentu saja, ini
bukanlah pengaturan yang bagus untuk lingkungan multi-user. Bagian selanjutnya
akan menjelaskan pengaturan akun user.
</p>

</body>
</section>
<section>
<title>Pengaturan akun user database</title>
<body>

<p>
Seperti yang telah kita bicarakan tadi, login sebagai user postgres kurang baik
jika dilakukan di lingkungan multi-user. Pada kebanyakan kasus, akan ada banyak
user dan servis yang mengakses server, dan masing-masing memiliki kebutuhan
serta hak yang berbeda-beda. Jadi, untuk mengatasi masalah ini, kita akan
menggunakan perintah <c>createuser</c>. Perintah ini adalah sebuah alternatif
untuk menjalankan beberapa <e>query</e> SQL, dan jauh lebih luwes jika dilihat
dari sisi administrasi. Kita akan membuat dua akun user; 'superuser' yang dapat
menambahkan user lain dan melakukan administrasi database, dan user biasa.
</p>

<pre caption="Membuat akun superuser">
<comment>(Gantikan chris dengan nama user yang ingin anda gunakan)</comment>
$ <i>createuser -a -d -P -E -U postgres -W chris</i>
Enter password for new user:
Enter it again:
Password:
CREATE USER
</pre>

<p>
Nah, kita sudah menciptakan superuser. Opsi <c>-a</c> menetapkan user ini dapat
menambahkan/membuat akun user. Opsi <c>-d</c> berarti user ini dapat
menciptakan database. Opsi <c>-P</c> mengizinkan anda untuk menetapkan password
untuk user ini dan opsi <c>-E</c> mengenkripsinya untuk alasan keamanan.
Sekarang, kita akan menguji hak yang dimiliki oleh user ini dengan membuat akun
user biasa:
</p>

<pre caption="Membuat akun user biasa">
<comment>(Gantikan chris dengan nama user yang baru saja anda ciptakan)</comment>
$ <i>createuser -A -D -P -E -U chris -W testuser</i>
Enter password for new user:
Enter it again:
Password:
CREATE USER
</pre>

<p>
Sukses! Akun user baru kita berhasil diciptakan dengan menggunakan akun
superuser. Opsi <c>-A</c> dan <c>-D</c> adalah kebalikan dari opsi <c>-a</c>
dan <c>-d</c> yaitu tidak mengizinkan user untuk membuat akun user dan
database. Bagian selanjutnya menjelaskan cara menggunakan database baru.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Menggunakan PostgreSQL</title>
<section>
<title>Mengatur perizinan</title>
<body>

<p>
Sekarang kita sudah memiliki akun user yang dapat menciptakan database dan
membuat akun user baru, serta akun user yang memiliki hak tak terbatas. Akun
user yang telah kita ciptakan tadi sekarang sudah bisa login ke server, dan
haya itu saja. Secara umum, user harus mendapatkan hak untuk menambahkan dan
menerima data, dan terkadang, memiliki hak untuk melakukan sejumlah tugas
lainnya. Untuk itu, kita harus mengatur perizinan/hak user. Ini mudah sekali
dilakukan dengan menambahkan parameter <c>-O</c> ke perintah <c>createdb</c>.
Kita akan memulai dengan membuat database baru bernama <b>MyDB</b> yang akan
dimiliki oleh testuser dengan menggunakan akun superuser:
</p>

<pre caption="Membuat database MyDB">
$ <i>createdb -O testuser -U chris -W MyDB</i>
Password:
CREATE DATABASE
</pre>

<p>
OK, kita sekarang sudah memiliki database baru bernama MyDB, dan testuser dapat
mengaksesnya. Untuk mencobanya, kita akan login sebagai testuser ke database
MyDB. Kita melakukannya dengan program <c>psql</c>. Program ini adalah program
yang digunakan untuk melakuan koneksi ke database PostgreSQL dari baris
perintah. Jadi sekarang, masuklah ke database seperti ini:
</p>

<pre caption="Masuk ke database MyDB sebagai testuser">
$ <i>psql -U testuser -W MyDB</i>
Password:
Welcome to psql 8.0.4, the PostgreSQL interactive terminal.

Type:  \copyright for distribution terms
       \h for help with SQL commands
       \? for help with psql commands
       \g or terminate with semicolon to execute query
       \q to quit

MyDB=&gt;
</pre>

<p>
Sekarang testuser sudah login ke database, dan dapat mulai menjalankan beberapa
perintah. Bagian selanjutnya akan menjelaskan beberapa peintah dasar terkait
penggunaan klien <c>psql</c>.
</p>

</body>
</section>
<section>
<title>Perintah-perintah dasar PostgreSQL dan pembuatan tabel</title>
<body>

<p>
Bagi anda yang sudah terbiasa dengan MySQL, anda harus membaca bagian ini. Di
sinilah letak keunikan PostgreSQL dalam cara menjalankan perintah. Untuk
memulai, berikut ini adalah daftar dari beberapa perinta yang akan kita
diskusikan:
</p>

<table>
<tr>
  <th>Perintah</th>
  <th>Kegunaan</th>
  <th>Persamaan pada MySQL</th>
</tr>
<tr>
  <ti>\c[onnect] [DBNAME|- [USER]]</ti>
  <ti>Melakukan koneksi ke database</ti>
  <ti>USE DATABASE</ti>
</tr>
<tr>
  <ti>\q</ti>
  <ti>Keluar dari klien <c>psql</c></ti>
  <ti>quit</ti>
</tr>
<tr>
  <ti>\i FILE</ti>
  <ti>Menjalankan program dari <c>FILE</c></ti>
  <ti>source FILE</ti>
</tr>
<tr>
  <ti>\o [FILE]</ti>
  <ti>Mengirimkan hasil query ke <c>FILE</c></ti>
  <ti>INTO OUTFILE, tetapi memberikan semua output (tidak hanya SELECTS)</ti>
</tr>
<tr>
  <ti>\d [NAME]</ti>
  <ti>Menjelaskan sebuah database atau table (juga item lain)</ti>
  <ti>DESC(RIBE)</ti>
</tr>
<tr>
  <ti>\db [PATTERN]</ti>
  <ti>
    Melihat tabel yang tersedia yang cocok dengan <c>PATTERN</c> (menampilkan
    semua tabel jika PATTERN tidak diberikan)
  </ti>
  <ti>SHOW TABLES</ti>
</tr>
</table>

<p>
Kecuali <c>\c[onnect]</c>, semua perintah yang disebutkan di atas akan kita
gunakan di panduan ini. Untuk sekarang, database masih kosong, untuk itu kita
perlu menambahkan beberapa data. Langkah pertama untuk melakukannya adalah
meletakkannya di dalam tabel. Database kita saat ini belum berisi tabel, jadi
kita harus membuatnya dahulu, yaitu dengan perintah <c>CREATE TABLE</c>. Kita
akan membuat tabel yang berisi ID produk, Penjelasan, dan harga:
</p>

<pre caption="Membuat tabel produk">
MyDB=> CREATE TABLE produk (
MyDB(&gt;   id_produk SERIAL,
MyDB(&gt;   penjelasan TEXT,
MyDB(&gt;   harga DECIMAL
MyDB(&gt; );
NOTICE:  CREATE TABLE will create implicit sequence "products_product_id_seq"
for serial column "products.product_id"
CREATE TABLE
</pre>

<p>
Anda boleh mengabaikan NOTICE, karena sama sekali tidak membahayakan. Dari
baris terakhir, kita bisa melihat bahwa perintah berhasil dilaksankan dengan
sukses. Sekarang, kita akan memeriksa apakah tabel benar-benar telah diciptakan
dengan menggunakan perintah <c>\d</c>:
</p>

<pre caption="Melihat tabel baru">
MyDB=&gt; <i>\d produk</i>
                                 Table "public.products"
   Column    |  Type   |                            Modifiers
-------------+---------+------------------------------------------------------------------
 id_produk   | integer | not null default nextval('public.products_product_id_seq'::text)
 penjelasan  | text    |
 harga       | numeric |
</pre>

<p>
Ternyata tabel kita benar-benar telah diciptakan. Sekarang saatnya untuk
mengisi tabel tersebut dengan data. Bagian selanjutnya akan menjelaskan cara
mengisi database dengan data.
</p>

</body>
</section>
<section>
<title>Mengisi data ke dalam database</title>
<body>

<p>
Bagian ini menjelaskan dua cara untuk mengisi tabel baru dengan data. Pertama,
kita akan menggunakan perintah paling dasar, <c>INSERT</c>:
</p>

<pre caption="Sintaks INSERT">
INSERT INTO [tablename] (column1,column2,column3) VALUES(value1,value2,value3)
</pre>

<p>
<b>tablename</b> adalah nama tabel yang ingin kita isi dengan data. Dengan
(column1,column2,column3) anda dapat menentukan kolom mana saja yang ingin anda
isikan data. VALUES(value1,value2,value3) adalah data yang ingin kita isikan,
dengan urutan yang sama seperti (column1 gets value1, column2 gets value2,
column3 gets value3). Urutan ini <b>harus</b> sama. Sekarang mari kita isikan
data ke dalam tabel:
</p>

<impo>
Berdasarkan pengalaman, penulis menganjurkan anda untuk menggunakan statemen
<c>INSERT</c> persis seperti pada contoh di atas. Seorang pengembang terkadang
melakukan kesalahan ketika menggunakan <c>INSERT INTO</c> tanpa menentukan
kolom yang akan diisi dengan data. Cara ini kurang produktif, karena kita akan
mendapatkan masalah ketika menambahkan kolom baru ke dalam database, yang
disebabkan oleh urutan kolom yang telah berubah. Anda harus <b>selalu</b>
menentukan kolom pada perintah <c>INSERT INTO</c> kecuali jika anda yakin 300%
bahwa anda tidak akan pernah menambahkan kolom lagi.
</impo>

<pre caption="Mengisi data ke dalam kolom">
MyDB=&gt; <i>INSERT INTO produk (penjelasan,harga) VALUES('A test product', 12.00);</i>
INSERT 17273 1
</pre>

<p>
Baris terakhir memerlukan penjelasan yang lebih panjang. Hasil dari perintah
<c>INSERT</c> adalah sebuah OID (Object Identifier) dan jumlah baris yang
diisi. Penjelasan tentang OID kurang sesuai untuk dibahas di sini, jadi
sebaiknya anda membaca <uri
link="http://www.postgresql.org/docs/8.1/static/datatype-oid.html">manual
PostgreSQL</uri> untuk memahaminya. Nah, jika anda memiliki 20.000 produk,
statemen <c>INSERT</c> akan menjadi sedikit lebih rumit. Namun begitu, anda
dapat menggunakan perintah <c>COPY</c> untuk memasukkan data ke dalam tabel
dari sebuah file atau <e>stdin</e>. Pada contoh ini, penulis menganggap anda
memiliki sebuah file csv (comma separated values) yang berisi id produk,
penjelasan, dan harga. Isi file tersebut kira-kira seperti ini:
</p>

<pre caption="produk.csv">
2,meat,6.79
3,soup,0.69
4,soda,1.79
</pre>

<p>
Sekarang kita akan menggunakan perintah <c>COPY</c> untuk memasukkan data kita:
</p>

<impo>
Kita menggunakan perintah <c>COPY FROM STDIN</c> karena hanya user postgres-lah
yang dapat memasukkan data dari sebuah file (tentunya karena alasan keamanan).
</impo>

<pre caption="Menggunakan COPY untuk mengisi tabel produk">
MyDB=&gt; <i>COPY produk FROM STDIN WITH DELIMITER AS ',';</i>
Enter data to be copied followed by a newline.
End with a backslash and a period on a line by itself.
>> <i>2,meat,6.79</i>
>> <i>3,soup,0.69</i>
>> <i>4,soda,1.79</i>
>> <i>\.</i>
</pre>

<p>
Sayangnya, baris ini tidak menghasilkan informasi status yang sama seperti
perintah <c>INSERT INTO</c>. Bagaimana kita bisa mengetahui jika data sudah
diisi? Bagian berikut akan menjelaskannya untuk anda:
</p>

</body>
</section>
<section>
<title>Menggunakan query PostgreSQL</title>
<body>

<p>
Bagian ini menjelaskan cara menggunakan statemen <c>SELECT</c> untuk melihat
data di dalam tabel. Format dasar <c>SELECT</c> adalah sebagai berikut:
</p>

<pre caption="Sintaks SELECT">
SELECT (column1,column2|*) FROM (table) [WHERE (conditionals)]
</pre>

<p>
Ada dua cara untuk memilih kolom. Cara pertama adalah dengan menggunakan
<c>*</c> untuk memilih semua kolom, sedangkan langkah kedua adalah dengan
menentukan kolom tertentu yang ingin anda lihat. Cara kedua lebih baik
digunakan jika anda ingin mencari kolom tertentu di dalam sebuah tabel besar.
mari kita mulai dengan <c>*</c> untuk memilih semua kolom:
</p>

<pre caption="Melihat isi tabel produk">
MyDB=&gt; <i>SELECT * FROM produk;</i>
 id_produk  |  penjelasan    | harga
------------+----------------+-------
          1 | A test product | 12.00
          2 | meat           |  6.79
          3 | soup           |  0.69
          4 | soda           |  1.79
(4 rows)
</pre>

<p>
Seperti yang bisa anda lihat, semua data yang sebelumnya kita isi, sudah
benar-benar ada di dalam tabel. Sekarang katakanlah kita tidak ingin melihat id
produk, tetapi hanya ingin melihat bagian penjelasan dan harganya. Untuk itu,
kita gunakan format lain dari <c>SELECT</c>:
</p>

<pre caption="Melihat kolom tertentu dari tabel produk">
MyDB=&gt; <i>SELECT penjelasan,harga FROM produk;</i>
  penjelasan    | harga
----------------+-------
 A test product | 12.00
 meat           |  6.79
 soup           |  0.69
 soda           |  1.79
(4 rows)
</pre>

<p>
Sekarang hanya penjelasan dan harga yang ditampilkan, sehingga kita dapat
berfokus pada data penting yang ingin kita lihat. Nah, sekarang anggaplah kita
hanya ingin melihat produk yang harganya lebih dari $2.00. Di sinilah
perintah <c>WHERE</c> berguna:
</p>

<pre caption="Melihat baris tertentu dari tabel produk">
MyDB=&gt; <i>SELECT penjelasan,harga FROM produk WHERE harga > 2.00;</i>
  description   | price
----------------+-------
 A test product | 12.00
 meat           |  6.79
(2 rows)
</pre>

<p>
Sekarang kita mendapatkan daftar produk yang harganya lebih dari $2.00. Format
ini sangat berguna dan dapat membantu kita ketika membuat laporan yang bagus.
</p>

</body>
</section>
<section>
<title>Penutup</title>
<body>

<p>
Bagian ini menutup Panduan PostgreSQL. Terima kasih sebanyak-banyaknya kepada
Masatomo Nakano, pengurus paket PostgreSQL Gentoo terdahulu atas bantuannya
dengan menjawab pertanyaan-pertanyaan dari penulis. Kirimkan saran anda untuk
panduan ini ke <mail>chriswhite@gentoo.org</mail>. Untuk mendapatkan
dokumentasi yang lebih terinci, kunjungilah website <uri
link="http://www.postgresql.org">PostgreSQL</uri>.
</p>

</body>
</section>
</chapter>
</guide>
