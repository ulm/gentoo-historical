<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/id/cvs-tutorial.xml" lang="id">

<title>Tutorial CVS Gentoo Linux</title>

<author title="Author">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Editor">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Translator">
  <mail link="kucrut.dz@gmail.com">Dzikri Aziz</mail>
</author>

<abstract>
Tutorial ini memperkenalkan CVS, Concurrent Versions System, digunakan oleh
para pengembang di seluruh dunia untuk mengembangkan software dengan cara
kolaborasi dan fleksibel. Diperuntukkan bagi pengguna baru CVS, tutorial ini
akan memberikan pemahaman yang cepat baik untuk pengguna biasa maupun para
pengembang. Apakah anda ingin menggunakan CVS untuk men- "check out" source
terbaru dari paket software tertentu atau anda ingin mulai menggunakan CVS
karena anda baru menjadi pengembang, tutorial ini sangat cocok untuk anda.
</abstract>

<version>1.8</version>
<date>2005-05-23</date>

<chapter>
<title>Pendahuluan</title>
<section>
<title>Layout tutorial</title>
<body>

<p>
Tutorial ini memiliki dua bagian. Bagian pertama berisi cara menggunakan CVS
bagi anda yang bukan pengembang, misalnya cara mendapatkan source dari CVS dan
menjaganya tetap <e>up-to-date</e>. Bagian kedua memperkenalkan cara
menggunakan CVS bagi para pengembang, seperti cara memodifikasi, menambahkan
dan menghapus file di CVS dan menjalankan berbagai tugas terkait pengembangan
lainnya. Jika anda baru menggunakan CVS, anda dianjurkan untuk memulai dari
bagian pertama dan melanjutkan ke bagian kedua; jika anda sudah memiliki
pengalaman dasar menggunakan CVS tetapi akan menggunakan CVS sebagai pengembang
untuk pertama kalinya, anda dapat menemukan semua yang anda perlukan pada
bagian kedua, tetapi anda juga mungkin perlu membaca bagian pertama untuk
menyegarkan ingatan anda.
</p>

</body>
</section>
<section>
<title>Apa itu CVS dan apa yang dikerjakannya?</title>
<body>

<p>
CVS adalah sistem klien/server yang digunakan oleh pengembang untuk menyimpan
proyeknya di sebuah lokasi sentral, disebut sebagai <e>repository</e>.
Menggunakan cvs sebagai klien, seorang pengembang dapat membuat perubahan pada
isi repositori. Sebaliknya, repositori cvs mencatat semua perubahan yang
terjadi pada setiap file, menciptakan catatan lengkap tentang evolusi dari
proyek tersebut. Pengembang dapat meminta versi lama dari sebuah file source
tertentu, melihat catatan perubahan, dan menjalankan tugas-tugas lain sesuai
dengan kebutuhannya.
</p>

</body>
</section>
<section>
<title>Tugas CVS</title>
<body>

<p>
Kebanyakan proyek software open source memiliki server cvs-nya sendiri yang
digunakan oleh para pengembang proyek tersebut sebagai repositori pusat dari
pekerjaan mereka. Para pengembang sering membuat perbaikan pada source di
repositori cvs setiap hari; dan biasanya, lokasi para pengembang ini tersebar
di seluruh dunia, namun cvs dapat menyediakan mekanisme yang diperlukan untuk
menyatukan proyek mereka pada kesatuan yang terpusat. CVS menciptakan
<e>"organizational glue"</e> yang dengannya, para pengembang dapat membuat
perbaikan pada kode-kode mereka tanpa ada bentrokan, kehilangan data atau
ketertinggalan atas pembaruan data yang penting pada file source tertentu.
</p>

</body>
</section>
<section>
<title>CVS -- source terbaru para pengembang</title>
<body>

<p>
Ketika para pengembang sudah siap, mereka akan memampatkan hasil kerja mereka
saat ini di cvs pada sebuah file <path>tar.gz</path> dan merilisnya sebagai
versi resmi baru dari paket software mereka. Namun, terkadang rilis resmi
terasa masih belum cukup, dikarenakan berbagai macam alasan. Pada bagian
pertama dari tutorial ini, kami akan memberikan cara menggunakan cvs untuk
tujuan tersebut -- mendapatkan versi pengembang yang terbaru dan terbaik dari
source untuk penggunaan pribadi.
</p>

</body>
</section>
<section>
<title>Instalasi CVS</title>
<body>

<p>
Untuk menginstal cvs, ketik saja <c>emerge cvs</c>:
</p>

<pre caption="Instalasi CVS">
# <i>emerge cvs</i>
</pre>

</body>
</section>
<section>
<title>CVSROOT</title>
<body>

<p>
Sebelum memulai, ada beberapa dasar-dasar cvs yang perlu anda ketahui. Yang
pertama adalah, untuk dapat terhubung ke sebuah repositori cvs, pertama anda
perlu mengenal sebuah path bernama "CVSROOT". CVSROOT adalah <e>string</e>,
seperti URL, yang memberitahukan letak repositori kepada perintah cvs juga cara
yang dipakai untuk melakukan koneksi. Agar lebih menarik, cvs memiliki banyak
format CVSROOT, tergantung pada repositori cvs, apakah lokal atau jauh, juga
metode apa yang akan digunakan untuk melakukan koneksi. Berikut ini adalah
beberapa contoh CVSROOT bersama penjelasannya.
</p>

</body>
</section>
<section>
<title>CVSROOT Lokal</title>
<body>

<pre caption="Pengaturan CVSROOT">
CVSROOT=/var/cvsroot
</pre>

<p>
Ini adalah contoh dari path CVSROOT lokal; anda perlu menggunakan CVSROOT
seperti ini jika anda ingin terhubung ke repositori lokal yang terletak di
<path>/var/cvsroot</path>; atau mungkin ada memiliki repositori yang telah
di-mount melalui NFS di <path>/var/cvsroot</path>.
</p>

</body>
</section>
<section>
<title>CVSROOT untuk server jauh dengan password</title>
<body>

<pre caption="Pengaturan CVSROOT dengan otentikasi">
CVSROOT=:pserver:cvs@foo.bar.com:/var/cvsroot
</pre>

<p>
Ini adalah contoh CVSROOT untuk repositori jauh yang terletak di komputer
foo.bar.com di dalam direktori <path>/var/cvsroot</path>. Awalan ":pserver:"
memerintahkan klien kita untuk melakukan koneksi dengan protokol server
password CVS, protokol <e>built-in</e> CVS. Biasanya, repositori untuk umum
menggunakan protokol ini untuk memberikan akses bagi pengguna <e>anonymous</e>.
</p>

</body>
</section>
<section>
<title>CVSROOT rsh/ssh jauh</title>
<body>

<pre caption="CVSROOT RSH/SSH">
CVSROOT=drobbins@foo.bar.com:/data/cvs
</pre>

<p>
Ini adalah contoh CVSROOT yang menggunakan protokol RSH/SSH; pada contoh ini,
klien CVS akan mencoba untuk mengakses repositori di foo.bar.com menggunakan
akun <e>drobbins</e>. Jika variabel CVS_RSH berisi "ssh", maka klien cvs kita
akan mencoba untuk menggunakan ssh ketika melakukan koneksi, jika tidak, maka
rsh akan digunakan. Metode akses ssh banyak digunakan oleh mereka yang
mengutamakan keamanan; namun, metode RSH maupun SSH tidak menyediakan cara
apapun untuk memberikan izin kepada pengguna <e>anonymous</e>. Untuk
menggunakan metode ini, anda harus memiliki akun login di foo.bar.com.
</p>

</body>
</section>
<section>
<title>Beberapa hal lainnya...</title>
<body>

<p>
Sebagai tambahan dari CVSROOT, anda juga perlu mengetahui nama modul (koleksi
dari source) yang ingin anda lihat, juga password anonymous yang anda perlukan
untuk masuk ke server password CVS. Tidak seperti ftp anonymous, tidak ada
format "standar" untuk password anonymous, jadi anda perlu mendapatkan
passwordnya dari website pengembang atau langsung dari para pengembang. Setelah
anda mendapatkannya, anda siap memulai.
</p>

</body>
</section>
<section>
<title>Berinteraksi dengan CVS, bagian 1</title>
<body>

<p>
Mengambil source adalah proses dua langkah. Pertama, kita masuk ke server
password. Kemudian mengambil source dengan perintah <c>checkout</c>. Berikut
ini adalah kumpulan contoh dari perintah-perintah yang dapat anda gunakan untuk
melihat source Samba terbaru, proyek integrasi UNIX/Windows yang terkenal:
</p>

<pre caption="Pengaturan CVSROOT">
# <i>export CVSROOT=:pserver:cvs@pserver.samba.org:/cvsroot</i>
</pre>

<p>
Perintah pertama mengatur variabel lingkungan CVSROOT. Jika anda tidak mengatur
variabel ini, kedua perintah di bawah ini memerlukan tambahan <c>-d
:pserver:cvs@pserver.samba.org:/cvsroot</c> setelah perintah <c>cvs</c>. Kita
dapat sedikit menghemat waktu dengan menetapkan nilai variabel CVSROOT.
</p>

</body>
</section>
<section>
<title>Berinteraksi dengan CVS, bagian 2</title>
<body>

<p>
Berikut ini adalah perintah-perintah yang diperlukan untuk mendapatkan salinan
terbaru dari source pengembang. Anda boleh langsung loncat untuk membaca
penjelasannya kemudian kembali lagi:
</p>

<pre caption="Mengambil source terbaru">
# <i>cvs login</i>
(Logging in to cvs@pserver.samba.org)
CVS password: <comment>(masukkan password di sini)</comment>

# <i>cvs -z5 co samba</i>
U samba/COPYING
U samba/Manifest
U samba/README
U samba/Read-Manifest-Now
U samba/Roadmap
U samba/WHATSNEW.txt
<comment>(output dipotong)</comment>
</pre>

</body>
</section>
<section>
<title>Berinteraksi dengan CVS -- penjelasan</title>
<body>

<p>
Perintah cvs pertama di atas menghubungkan kita ke pserver, dan perintah kedua
memerintahkan klien CVS untuk mengambil ("co") modul samba dengan kompresi gzip
tingkat 5 ("-z5") untuk mempercepat transfer memalui jalur lambat. Untuk setiap
file baru yang didapatkan, cvs menampilkan "U [path]" yang menandakan bahwa
file tersebut di disk telah diperbarui.
</p>

</body>
</section>
<section>
<title>Checkout selesai</title>
<body>

<p>
Setelah perintah checkout selesai dijalankan, anda akan melihat direktori
"samba" di dalam direktori anda saat ini yang berisi source terbaru. Anda juga
akan melihat bahwa semua direktori memiliki direktori <path>CVS</path> di
dalamnya -- <path>CVS</path> menyimpan informasi akun di dalam
direktori-direktori tersebut, dan anda dapat mengabaikannya. Dari sini, kita
tidak perlu lagi khawatir tentang variabel CVSROOT karena variabel ini telah
dicatat di dalam semua direktori <path>CVS</path> tambahan tadi. Jangan lupa,
anda hanya perlu mengatur CVSROOT ketika melakukan login dan checkout untuk
pertama kali.
</p>

</body>
</section>
<section>
<title>Memperbarui source</title>
<body>

<p>
Nah, itu dia -- source terbaru! Setelah anda mendapatkannya, anda boleh
melakukan kompilasi dan menginstalnya, melakukan pengujian atau apapun yang
anda inginkan.
</p>

<p>
Selanjutnya, anda mungkin ingin mengsinkronkan direktori source anda dengan
versi CVS saat ini. Untuk melakukannya, anda tidak perlu login ke pserver;
informasi otentikasi anda telah direkam oleh cvs di dalam direktori
<path>CVS</path> tadi. Pertama, masuklah ke direktori <e>check-out</e> utama
(pada contoh ini adalah "samba"), lalu ketik:
</p>

<pre caption="Memperbarui source">
# <i>cvs update -dP</i>
</pre>

</body>
</section>
<section>
<title>Melihat "cvs update", bagian 1</title>
<body>

<p>
Jika ada file baru, cvs akan memberikan output baris "U [path] untuk setiap
file yang diperbaruinya. Dan, jika anda sudah pernah mengkompilasi file
tersebut, anda mungkin akan melihat banyak baris "? [path]"; ini adalah
file-file objek yang diketahui cvs bukan berasal dari repositori.
</p>

</body>
</section>
<section>
<title>Melihat "cvs update", bagian 2</title>
<body>

<p>
Perhatikan juga dua opsi baris perintah yang kita gunakan untuk "cvs update".
<c>-d</c> memerintahkan cvs untuk menciptakan direktori baru yang mungkin telah
ditambahkan di repositori (secara default ini tidak dilakukan), dan <c>-P</c>
memerintahkan cvs untuk membuang direktori kosong apapun dari salinan lokal.
<c>-P</c> baik digunakan karena cvs sering mengambil banyak direktori kosong
(yang dulu digunakan, sekarang tidak lagi).
</p>

<p>
Jika anda hanya ingin mengambil source terbaru, itu saja yang perlu anda
ketahui. Sekarang, kita akan melihat cara berinteraksi dengan CVS sebagai
pengembang.
</p>

</body>
</section>
</chapter>

<chapter>
<title>CVS untuk pengembang</title>
<section>
<title>Merubah file</title>
<body>

<p>
Sebagai pengembang, anda mungkin perlu merubah file tertentu di CVS. Untuk
melakukannya, lakukan perubahan yang diperlukan pada file di salinan lokal
anda. Perubahan yang anda buat tidak akan diterapkan di repositori sampai anda
memerintahkan cvs untuk meng-<c>commit</c> perubahan tersebut. Ketika anda
sudah menguji perubahan anda untuk memastikan bahwa tidak ada kekeliruan dan
anda sudah siap untuk menerapkan perubahan tersebut di repositori, ikutilah
proses dua tahap berikut. Pertama, perbarui source lokal anda dengan perintah
berikut dari direktori source utama:
</p>

<pre caption="Memperbarui source dan direktori">
# <i>cvs update -dP</i>
</pre>

</body>
</section>
<section>
<title>CVS menggabungkan perubahan dari pengembang lain</title>
<body>

<p>
Seperti yang telah kita lihat sebelumnya, "cvs update" akan menyamakan salinan
source anda dengan versi saat ini di repositori -- tetapi apa yang terjadi pada
perubahan yang anda buat? Jangan takut, perubahan ini tidak dibuang. Jika anda
pengembang lain yang telah membuat perubahan pada sebuah file yang belum anda
sentuh, file lokal anda akan diperbarui agar sama dengan versi yang ada di
repositori.
</p>

<p>
Dan, jika anda telah melakukan perubahan pada baris 1-10 dari sebuah file
lokal, sedangkan pengembang lain menghapus baris 40-50, menambahkan 12 baris
pada akhir file, merubah baris 30-40 lalu menerapkan perubahan tersebut pada
repositori sebelum anda, cvs dengan cerdik akan menggabungkan semua perubahan
tersebut pada file lokal anda yang telah anda modifikasi tanpa menghapus
perubahan yang telah anda buat. Dengan begini, dua pengembang atau lebih dapat
bekerja pada bagian berbeda dari satu file dalam satu waktu.
</p>

</body>
</section>
<section>
<title>Penggabungan tidak selalu sempurna</title>
<body>

<p>
Bagaimanapun juga, jika ada dua pengembang atau lebih yang melakukan perubahan
pada <e>bagian yang sama dari satu file</e>, maka situasinya akan lebih rumit.
Jika hal ini terjadi, maka cvs akan memberitahukan anda tentang konflik
tersebut. Perubahan anda tidak akan hilang, tetapi anda diharuskan untuk
melakukan perbaikan secara manual, karena cvs memerlukan masukan dari anda
tentang cara menggabungkan perubahan yang saling konflik.
</p>

</body>
</section>
<section>
<title>Commit</title>
<body>

<p>
Sebentar lagi kita akan melihat bagaimana cara mengatasi konflik, tetapi
sekarang, kita anggap tidak ada konflik yang terjadi setelah anda mengetikkan
<c>cvs update -dP</c> -- karena biasanya tidak ada. jika tidak ada konflik,
source lokal anda sudah diperbarui, dan anda siap untuk menerapkan perubahan
pada repositori dengan mengetikkan perintah berikut dari dalam direktori source
anda:
</p>

<pre caption="Menerapkan perubahan">
# <i>cvs commit</i>
</pre>

</body>
</section>
<section>
<title>Apa yang dilakukan oleh commit</title>
<body>

<p>
<c>cvs commit</c> tidak <e>hanya</e> menerapkan perubahan anda di repositori.
Sebelum menerapkan perubahan anda di repositori, cvs akan meluncurkan editor
default anda agar anda dapat mengetikkan penjelasan tentang perubahan yang anda
buat. Kemudian cvs akan menyimpan perubahan anda serta menutup editor, dan
perubahan (serta komentar) anda akan diterapkan di repositori dan akan tersedia
untuk pengembang lain di tim anda.
</p>

</body>
</section>
<section>
<title>Melihat log</title>
<body>

<p>
Melihat sejarah lengkap dari sebuah file beserta komentar yang diberikan oleh
pengembang (termasuk anda sendiri) ketika menerapkan perubahan sangatlah mudah.
Untuk melihatnya, ketikkan:
</p>

<pre caption="Melihat informasi log">
# <i>cvs log file.c</i>
</pre>

<p>
Perintah <c>cvs log</c> dijalankan secara <e>recursive</e>, jadi jika anda
ingin melihat semua log dari seluruh isi direktori, masuklah ke direktori lalu
ketik:
</p>

<pre caption="Melihat informasi log dengan pager">
# <i>cvs log | less</i>
</pre>

</body>
</section>
<section>
<title>Opsi-opsi commit</title>
<body>

<p>
Anda mungkin ingin menggunakan editor yang berbeda dari editor yang dijalankan
oleh cvs ketika anda mengetik <c>cvs commit</c>. Jika begitu, isi variabel
EDITOR dengan nama editor yang ingin anda gunakan. Pengaturan ini baik sekali
untuk dilakukan di <path>~/.bashrc</path>:
</p>

<pre caption="Pengaturan editor">
export EDITOR=jpico
</pre>

<p>
Atau, anda juga dapat menuliskan pesan log sebagai opsi beris perintah agar cvs
tidak perlu lagi meluncurkan editor:
</p>

<pre caption="Menerapkan perubahan dengan memberikan sedikit informasi log">
# <i>cvs commit -m 'I fixed a few silly bugs in portage.py'</i>
</pre>

</body>
</section>
<section>
<title>File .cvsrc</title>
<body>

<p>
Sebelum kita berlanjut untuk melihat perintah-perintah cvs lainnya, kami
anjurkan anda untuk membuat file <path>~/.cvsrc</path>. Dengan menciptakan file
<path>.cvsrc</path> di direktori home, anda dapat memerintahkan cvs untuk
menggunakan opsi-opsi baris perintah default yang telah anda pilih agar anda
tidak perlu lagi mengetikkannya. Berikut ini adalah file <path>.cvsrc</path>
default yang dianjurkan:
</p>

<pre caption="Nilai-nilai default yang dianjurkan">
cvs -q  
diff -u -b -B
checkout -P
update -d -P
</pre>

</body>
</section>
<section>
<title>File .cvsrc, lanjutan</title>
<body>

<p>
Sebagai tambahan dari pengaturan opsi-opsi default perintah cvs, baris pertama
dari file <path>.cvsrc</path> menempatkan cvs pada modus <e>quiet</e>, yang
menjadikan output dari perintah <c>cvs update</c> lebih rapi dan mudah dibaca.
Juga, jika anda telah meletakkan opsi ini di file <path>.cvsrc</path>. anda
tidak perlu lagi mengetikkan <c>cvs update -dP</c>, tetapi cukup <c>cvs
update</c>.
</p>

</body>
</section>
<section>
<title>Menambahkan file baru di repositori</title>
<body>

<p>
Menambahkan file baru di CVS sangatlah mudah. Pertama, ciptakan file tersebut
dengan editor, kemudian ketikkan perintah berikut:
</p>

<pre caption="Menambahkan file">
# <i>cvs add file.c</i>
cvs server: use 'cvs commit' to add this file permanently
</pre>

<p>
Ini akan memerintahkan cvs untuk menambahkan file tersebut ke repositori ketika
anda melakukan <c>cvs commit</c> nantinya. Sebelum anda melakukannya,
pengembang lain tidak akan dapat melihat file baru tersebut.
</p>

</body>
</section>
<section>
<title>Menambahkan direktori baru di repositori</title>
<body>

<p>
Proses penambahan direktori di CVS juga hampir sama:
</p>

<pre caption="Menambahkan direktori">
# <i>mkdir foo</i>
# <i>cvs add foo</i>
Directory /var/cvsroot/mycode/foo added to the repository
</pre>

<p>
Tidak seperti menambahkan file, ketika anda menambahkan sebuah direktori baru,
perubahan akan langsung diterapkan; cvs commit tidak diperlukan. Ketika anda
menambahkan direktori lokal di cvs, anda akan melihat sebuah direktori
<path>CVS</path> baru diciptakan di dalamnya yang bertindak sebagai penampung
data cvs. Jadi, anda dapat memastikan apakah sebuah direktori telah ditambahkan
di repositori dengan mencari direktori <path>CVS</path> di dalamnya.
</p>

</body>
</section>
<section>
<title>Catatan "cvs add"</title>
<body>

<p>
Oh, dan seperti yang sudah anda duga, sebelum anda menambahkan sebuah file atau
direktori di repositori, anda harus memastikan agar direktori di atasnya telah
ditambahkan di CVS. Jika tidak, anda akan mendapatkan pesan error seperti
berikut:
</p>

<pre caption="Menambahkan file baru, tetapi gagal">
# <i>cvs add myfile.c</i>
cvs add: cannot open CVS/Entries for reading: No such file or directory
cvs [add aborted]: no repository  
</pre>

</body>
</section>
<section>
<title>Akrab dengan "cvs update", bagian 1</title>
<body>

<p>
Sebelum kita melihat cara mengatasi konflik, sebaiknya kita akrab dulu dengan
output dari perintah <c>cvs update</c>. Jika anda telah menciptakan file
<path>~/.cvsrc</path> yang berisi baris <c>cvs -q</c>, anda akan melihat output
perintah <c>cvs update</c> yang lebih mudah dibaca. <c>cvs update</c>
memberikan informasi tentang apa yang dilakukan dan dilihatnya dengan mencetak
sebuah karakter, spasi dan nama file; seperti pada contoh berikut:
</p>

<pre caption="Memperbarui CVS">
# <i>cvs update -dP</i>
? distfiles
? packages
? profiles 
</pre>

</body>
</section>
<section>
<title>Akrab dengan "cvs update", bagian 2</title>
<body>

<p>
<c>cvs update</c> menggunakan karakter "?" untuk memberitahukan anda bahwa ia
tidak mengetahui apapun tentang file tersebut yang ditemukannya di salinan
lokal repositori anda. File ini berarti bukan bagian resmi dari repositori,
juga tidak dijadawalkan untuk ditambahkan. Berikut ini adalah daftar karakter
tunggal lain yang digunakan oleh CVS sebagai pesan informasi:
</p>

<pre caption="Pesan informasi: U">
U [path]
</pre>

<p>
Digunakan ketika file baru telah diciptakan di salinan lokal, atau file yang
tidak disentuh (oleh anda) telah diperbarui.
</p>

<pre caption="Pesan informasi: A">
A [path]
</pre>

<p>
File ini telah dijadwalkan untuk ditambahkan dan akan ditambahkan secara resmi
di repositori ketika anda melakukan <c>cvs commit</c>.
</p>

</body>
</section>
<section>
<title>Akrab dengan "cvs update", bagian 3</title>
<body>

<pre caption="Pesan informasi: R">
R [path]
</pre>

<p>
Seperti "A", "R" memberitahukan anda bahwa file ini telah dijadwalkan untuk
dihapus. File tersebut akan dihapus dari repositori ketika anda melakukan
<c>cvs commit</c>.
</p>

<pre caption="Pesan informasi: M">
M [path]
</pre>

<p>
Artinya file ini telah dimodifikasi oleh anda; sebagai tambahan, mungkin saja
perubahan dari repositori telah digabungkan pada file ini dengan sukses.
</p>

<pre caption="Pesan informasi: C">
C [path]
</pre>

<p>
Karakter "C" menandakan bahwa file ini berisi konflik dan membutuhkan
perbaikan secara manual sebelum anda dapat menerapkan perubahan anda.
</p>

</body>
</section>
<section>
<title>Pengantar penyelesaian konflik</title>
<body>

<p>
Sekarang, mari kita lihat cara mengatasi konflik. Penulis sangat terlibat dalam
proyek Gentoo Linux, dan kami memiliki server cvs kami sendiri di
cvs.gentoo.org. Kami, para pengembang, menghabiskan waktu kami dengan
mengutak-atik source di dalam modul "gentoo-x86". Di dalamnya, ada sebuah file
bernama <path>ChangeLog</path> yang berisi (seperti dugaan anda) penjesalan
tentang perubahan yang telah kami terapkan pada file tersebut di repositori.
</p>

</body>
</section>
<section>
<title>Contoh konflik</title>
<body>

<p>
Karena file ini di hampir selalu mengalami perubahan ketika seorang pengembang
menerapkan perubahan di CVS, maka file ini adalah sumber konflik -- inilah
contoh konflik. Anggaplah penulis menambahkan beberapa baris berikut di bagian
atas <path>ChangeLog</path>:
</p>

<pre caption="Entri ChangeLog">
date 25 Feb 2001
 
This is the thing I added myself
</pre>

<p>
Namun, katakanlah sebelum penulis menerapkan perubahan tersebut, seorang
pengembang lain telah menambahkan baris-baris yang sama di bagian atas
<path>ChangeLog</path> dan menerapkan perubahan tersebut:
</p>

<pre caption="Entri 2 ChangeLog">
date 25 Feb 2001
 
This is the part added by another developer
</pre> 


</body>
</section>
<section>
<title>Contoh konflik, lanjutan</title>
<body>

<p>
Sekarang, ketika penulis menjalankan <c>cvs update -dP</c> (seperti yang selalu
kita lakukan sebelum melakukan commit), cvs tidak dapat menggabungkan perubahan
tersebut di salinan lokal <path>ChangeLog</path> milik penulis karena penulis
dan pengembang lain telah menambahkan beberapa baris di bagian yang sama dari
file -- bagaimana cvs tahu versi apa yang harus digunakan? Untuk itu, penulis
mendapatkan pesan error berikut dari CVS:
</p>

<pre caption="Error CVS">
RCS file: /var/cvsroot/gentoo-x86/ChangeLog,v
retrieving revision 1.362
retrieving revision 1.363
Merging differences between 1.362 and 1.363 into ChangeLog
rcsmerge: warning: conflicts during merge
cvs server: conflicts found in ChangeLog
C ChangeLog
</pre>

</body>
</section>
<section>
<title>Resolusi konflik, bagian 1</title>
<body>

<p>
Argh -- konflik! Untungnya, mengatasi konflik sangatlah mudah. Jika penulis
membuka editor, penulis akan melihat teks barikut di bagian atas file
ChangeLog:
</p>

<pre caption="Konflik ChangeLog">
&lt;&lt;&lt;&lt;&lt;&lt;&lt; ChangeLog
date 25 Feb 2001
 
This is the thing I added myself
 
=======
date 25 Feb 2001
 
This is the part added by another developer
 
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1.363
</pre>


</body>
</section>
<section>
<title>Resolusi konflik, bagian 2</title>
<body>

<p>
Daripada harus memilih salah satu versi, cvs menambahkan kedua versi pada file
ChangLog, dan mengurungnya dengan pemisah khusus untuk memberikan tanda yang
jelas tentang konflik yang tejadi. Sekarang, saatnya bagi penulis untuk membuat
perubahan pada bagian ini dengan memberikan teks yang <e>seharusnya</e>
ditampilkan di <path>ChageLog</path>; pada contoh ini, teks pengganti tidak
diambil dari salah satu versi, namun penggabungan dari keduanya:
</p>

<pre caption="Entri ChangeLog">
date 25 Feb 2001

This is the thing I added myself

This is the part added by another developer
</pre>

<p>
Setelah penulis melakukan perubahan pada bagian yang berisi konflik dengan teks
yang sesuai (dan menghapus tanda "======", dll), penulis dapat menerapkan
perubahan di cvs tanpa masalah apapun.
</p>

</body>
</section>
<section>
<title>Saran-saran terkait resolusi konflik</title>
<body>

<p>
Kapanpun anda ingin mengedit file yang berisi konflik, pastikan anda telah
melihat seluruh isi file agar tidak ada konflik lain yang tertinggal; jika anda
melewatkan salah satu konflik, cvs tidak akan mengizinkan anda untuk menerapkan
perubahan anda sampai semua konflik diselesaikan! Jelas sekali bahwa anda harus
menghapus tanda-tanda khusus yang ditambahkan oleh cvs pada file berisi konflik
tersebut. Saran lain -- jika anda melakukan kesalahan ketika melakukan
perbaikan kemudian ("Aduh!) menyimpan perubahan anda dengan tidak sengaja, anda
bisa mendapatkan salinan asli dari versi anda di file
<path>.#namafile.versi</path>.
</p>

</body>
</section>
<section>
<title>Menghapus file</title>
<body>

<p>
Sekarang saatnya untuk pelajaran terakhir tentang CVS -- menghapus file dari
repositori. Menghapus file adalah proses dua tahap. Pertama, hapus file dari
salinan source lokal, kemudian jalankan perintah <c>cvs remove</c>:
</p>

<pre caption="Menghapus file">
# <i>rm filelama.c</i>
# <i>cvs remove filelama.c</i>
</pre>

</body>
</section>
<section>
<title>Menghapus file, lanjutan</title>
<body>

<p>
File tersebut telah dijadwalkan untuk dihapus dari repositori ketika anda
melakukan commit. Ketika anda melakukannya, file tersebut akan dihapus secara
resmi dari repositori. Bagaimanapun juga, cvs tidak akan membuang file ini dan
akan tetap menyimpan catatan lengkap tentang isi dan sejarahnya, sebagai
antisipasi jika anda membutuhkannya kembali nanti. Inilah salah satu cara cvs
untuk melindungi kode sumber anda yang bernilai.
</p>

<p>
<c>cvs remove</c> dijalankan secara <e>recursive</e>, artinya, anda dapat
menghapus banyak file, kemudian menjalankan perintah <c>cvs remove</c> dari
direktori di atasnya tanpa argumen tambahan. Dengan ini, file-file tersebut
akan dijadwalkan untuk dihapus pada commit selanjutnya.
</p>

</body>
</section>
<section>
<title>Menghapus direktori</title>
<body>

<p>
Jika anda ingin menghapus sebuah direktori beserta seluruh isinya, penulis
sarankan anda untuk melakukan proses berikut ini. Pertama, hapus dan <c>cvs
remove</c> semua file di dalam direktori:
</p>

<pre caption="Menghapus direktori beserta isinya">
# <i>rm *.c</i>
# <i>cvs remove</i>
</pre>

</body>
</section>
<section>
<title>Menghapus direktori, lanjutan</title>
<body>

<p>
Selanjutnya, lakukan commit:
</p>

<pre caption="Menerapkan perubahan">
# <i>cvs commit</i>
</pre>

<p>
Di sinilah triknya. Lakukan langkah-langkah berikut untuk menghapus direktori:
</p>

<pre caption="Menghapus direktori">
# <i>cd ..</i>
# <i>cvs remove mydir</i>
# <i>rm -rf mydir</i>
</pre>

<p>
Perlu dicatat bahwa menghapus direktori tidak memerlukan commit tambahan --
direktori akan langsung ditambahkan dan dihapus dari repositori.
</p>

</body>
</section>
<section>
<title>Selesai!</title>
<body>

<p>
Perkenalan anda dengan CVS sudah selesai -- penulis harap tutorial ini dapat
membantu. Masih banyak yang dapat dilakukan dengan CVS daripada apa yang telah
dicantumkan di sini, tetapi untungnya tersedia banyak sumber-sumber pengetahuan
tentang CVS yang dapat anda gunakan untuk memperluas pengetahuan anda:
</p>

<ul>
  <li>
    <uri>http://www.cvshome.org</uri> adalah rumah pengembangan CVS, dan
    menyediakan banyak sekali dokumentasi tentang CVS, termasuk <uri 
    link="http://www.cvshome.org/docs/manual">dokumentasi resmi CVS
    online</uri>
  </li>
  <li>
    Situs <uri link="http://www.durak.org/cvswebsites/">CVS Version Control for
    Web Site Projects</uri> memiliki informasi yang bagus tentang cara
    menggunakan CVS untuk pengembangan website.
  </li>
  <li>
    Karl Fogel menulis sebuah buku berjudul <uri 
    link="http://cvsbook.red-bean.com/">Open Source Development with CVS</uri>.
    Banyak bab dari buku ini yang tersedia bebeas dari wabsite di atas.
  </li>
  <li>
    <uri link="http://www.freebsd.org/projects/cvsweb.html">cvsweb</uri> adalah
    skrip CGI bagus yang menyediakan antarmuka web untuk repositri CVS; baik
    sekali untuk dijelajahi.
  </li>
  <li>
    Situs <uri link="http://www.loria.fr/~molli/cvs-index.html">CVS
    Bubbles</uri> memiliki banyak sekali sumber pengetahuan termasuk <e>CVS
    FAQ-o-matic</e>.
  </li>
</ul>

</body>
</section>
<section>
<title>Tentang dokumen ini</title>
<body>

<p>
Versi asli dari artikel ini pertama kali diterbitkan di IBM developerWorks, dan
merupakan properti dari Westtech Information Services. Dokumen ini merupakan
versi update dari artikel aslinya, dan berisi banyak perbaikan dari tim
dokumentasi Gentoo Linux.
</p>

</body>
</section>
</chapter>
</guide>
