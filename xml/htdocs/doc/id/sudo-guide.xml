<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Id: sudo-guide.xml,v 1.3 2012/06/30 18:25:24 swift Exp $ -->

<guide disclaimer="obsolete" lang="id">
<title>Panduan Sudo(ers) Gentoo</title>

<author title="Author">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Translatoror">
  <mail link="kucrut.dz@gmail.com">Dzikri Aziz</mail>
</author>

<abstract>
Ketika anda ingin agar sebagian pengguna dapat menjalankan beberapa langkah
administratif pada sistem anda tanpa memberikan seluruh akses root kepada
mereka, menggunakan sudo merupakan pilihan terbaik anda. Dengan sudo anda
dapat mengontrol siapa saja yang dapat melakukan tugas tertentu. Panduan ini
memberikan sedikit pengenalan tentang utilitas yang sangat bagus ini untuk anda.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.6</version>
<date>2006-07-14</date>

<chapter>
<title>Tentang Sudo</title>
<section>
<title>Memberikan Izin</title>
<body>

<p>
Dengan paket <c>app-admin/sudo</c>, seorang administrator sistem dapat memberikan
izin kepada pengguna lain untuk menjalankan satu aplikasi atau lebih yang pada
keadaan normal tidak dapat dilakukannya. Tidak seperti penggunaan bit
<e>setuid</e> pada aplikasi-aplikasi ini, <c>sudo</c> memberikan kendali yang
lebih baik tentang <e>siapa</e> dan <e>kapan</e>beberapa perintah tertentu dapat
dieksekusi.
</p>

<p>
Dengan <c>sudo</c> anda dapat menciptakan sebuah daftar jelas berisi siapa saja
yang dapat mengeksekusi aplikasi-aplikasi tertentu. Jika anda ingin mengeset
bit setuid, setiap user dapat menjalankan aplikasi tersebut (atau user yang
termasuk dalam sebuah grup tertentu, tergantung kepada perizinan yang
digunakan). Anda dapat (bahkan mungkin harus) meminta user untuk memberikan
sebuah password ketika ia ingin menjalankan sebuah aplikasi dan bahkan anda
juga dapat memperketat perizinan berdasarkan pada lokasi user: login dari
sistem itu sendiri atau lewat SSH dari sebuah site remote.
</p>

</body>
</section>
<section>
<title>Aktivitas Logging</title>
<body>

<p>
Sebuah keutamaan lain dari <c>sudo</c> adalah dapat me-log setiap percobaan
(sukses atau tidak) untuk menjalankan sebuah aplikasi. Hal ini sangat berguna
jika anda ingin melacak siapa saja yang telah melakukan kesalahan fatal yang
membuat anda menghabiskan waktu lebih dari 10 jam untuk memperbaikinya :)
</p>

</body>
</section>
<section>
<title>Konfigurasi Sudo</title>
<body>

<p>
Konfigurasi <c>sudo</c> diatur di file <path>/etc/sudoers</path>. File ini
tidak boleh di edit dengan <c>nano&nbsp;/etc/sudoers</c> atau
<c>vim&nbsp;/etc/sudoers</c> atau editor lain yang anda sukai. Ketika anda
ingin mengubah isi file ini, anda harus menggunakan <c>visudo</c>.
</p>

<p>
Tool ini memastikan agar tidak ada dua administrator sistem yang meng-edit file
ini pada saat yang bersamaan, menjaga perizinan pada file dan menjalankan
beberapa pemeriksaan sintaks untuk memastikan agar anda tidak melakukan
kesalahan fatal pada file ini.
</p>

</body>
</section>
<section>
<title>Tentang Panduan Ini</title>
<body>

<p>
Panduan ini dibuat sebagai pengenalan singkat. Paket <c>sudo</c> jauh lebih
powerful dari apa yang dijelaskan pada panduan ini. Paket <c>sudo</c> memiliki
beberapa fitur khusus untuk mengedit file sebagai user yang berbeda
(<c>sudoedit</c>), menjalankannya dari skrip (agar dapat dijalankan di belakang,
membaca password dari input standar sebagai ganti keyboard, ... ), dll.
</p>

<p>
Silakan membaca manual <c>sudo</c> dan <c>sudoers</c> untuk info lebih lanjut.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Sintaks Sudoers</title>
<section>
<title>Sintaks Dasar</title>
<body>

<p>
Bagian tersulit dari <c>sudo</c> ialah sintaks <path>/etc/sudoers</path>.
Sintaks dasarnya adalah seperti berikut ini:
</p>

<pre caption="Sintaks dasar /etc/sudoers">
user  host = commands
</pre>

<p>
Sintaks ini memberitahu <c>sudo</c> bahwa sang user, yang teridentifikasi oleh
<e>user</e> dan login dari sistem <e>host</e> dapat menjalankan semua perintah
yang terdaftar di <e>commands</e> sebagai user root. Sebuah contoh yang lebih
nyata mungkin dapat lebih memperjelasnya: mengizinkan user <e>swift</e> untuk
menjalankan <c>emerge</c> jika ia login dari sistem (bukan lewat SSH):
</p>

<pre caption="Contoh nyata /etc/sudoers">
swift  localhost = /usr/bin/emerge
</pre>

<p>
Tetapi ada <brite>peringatan keras</brite>: jangan mengizinkan sebuah user untuk
menjalankan sebuah aplikasi yang dapat mengizinkan orang lain untuk merubah
perizinan. Sebagai contoh, mengizinkan user untuk menjalankan <c>emerge</c>
sebagai root jelas-jelas dapat memberikan mereka akses root penuh di sistem
karena <c>emerge</c> dapat dimanipulasi untuk mengubah sistem file yang sedang
digunakan untuk keuntungan si user. Jika anda tidak mempercayai user <c>sudo</c>
anda, jangan berikan mereka hak apapun.
</p>

<!--
  Wrappers are no real advantage here either, see #71750
-->

<p>
Nama user juga dapat digantikan dengan nama grup - pada kasus ini anda harus
memulai nama grup dengan sebuah tanda <c>%</c>. Misalnya, untuk mengizinkan
semua anggota grup <c>wheel</c> untuk menjalankan <c>emerge</c>:
</p>

<pre caption="Mengizinkan anngota grup wheel untuk menjalankan emerge">
%wheel  localhost = /usr/bin/emerge
</pre>

<p>
Anda dapat memperpanjang baris di atas untuk beberapa perintah lain (bukan
dengan membuat baris baru untuk setiap perintah). Sebagai contoh, untuk
mengizinkan user yang sama untuk tidak hanya menjalankan <c>emerge</c> tetapi
juga <c>ebuild</c> dan <c>emerge-webrsync</c> sebagai root:
</p>

<pre caption="Banyak perintah">
swift  localhost = /usr/bin/emerge, /usr/bin/ebuild, /usr/sbin/emerge-webrsync
</pre>

<p>
Anda juga dapat menentukan perintah yang lebih detail dan tidak hanya tool itu
saja. Hal ini sangat berguna untuk mempersempit penggunaan beberapa tool tertentu
pada opsi-opsi perintah yang telah ditentukan. Tol <c>sudo</c> mengizinkan
wildcard gaya shell (alias karakter meta atau glob) untuk digunakan pada nama
path, juga argumen perintah di file sudoers. Perlu dicatat bahwa hal ini
<e>bukan</e> merupakan regular expressions.
</p>

<p>
Mari kita mencobanya:
</p>

<pre caption="Percobaan untuk meng-update sistem menggunakan sudo">
$ <i>sudo emerge -uDN world</i>

We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.

Password: <comment>(Masukkan password user, bukan root!)</comment>
</pre>

<p>
Password yang dibutuhkan oleh <c>sudo</c> adalah password milik user itu sendiri.
Hal ini untuk memastikan agar tidak ada terminal yang secara tidak sengaja anda
tinggalkan terbuka untuk user lain dan disalahgunakan untuk tujuan yang tidak
baik.
</p>

<p>
Anda perlu mengetahui bahwa <c>sudo</c> tidak merubah variabel <c>${PATH}</c>:
perintah apa saja yang anda berikan setelah <c>sudo</c> dijalankan dari
lingkungan <e>anda</e>. Jika anda ingin agar user dapat menjalankan perintah
yang misalnya terdapat di <path>/sbin</path> maka ia harus memberikan path
lengkap ke perintah <c>sudo</c>, seperti:
</p>

<pre caption="Menggunakan path lengkap ke sebuah tool">
$ <i>sudo /usr/sbin/emerge-webrsync</i>
</pre>

</body>
</section>
<section>
<title>Menggunakan Alias</title>
<body>

<p>
Pada lingkungan yang lebih besar, keharusan untuk terus menerus mencantumkan nama
user (atau host, atau perintah) bisa menjadi pekerjaan yang membosankan. Untuk
mempermudah administrasi <path>/etc/sudoers</path> anda dapat menentukan
<e>alias</e>. Format untuk mendeklarasikan alias sangat sederhana:
</p>

<pre caption="Mendeklarasikan alias di /etc/sudoers">
Host_Alias hostalias = hostname1, hostname2, ...
User_Alias useralias = user1, user2, ...
Cmnd_Alias cmndalias = command1, command2, ...
</pre>

<p>
Sebuah alias yang pasti selalu berfungsi, pada posisi apapun, adalah alias
<c>ALL</c> (untuk membedakan antara alias dan yang bukan alias, dianjurkan untuk
menggunakan huruf kapital untuk alias). Seperti yang anda duga, alias <c>ALL</c>
merupakan alias untuk seluruh aturan yang memungkinkan.
</p>

<p>
Sebuah contoh penggunaan alias <c>ALL</c> untuk mengizinkan <e>semua</e> user
untuk menjalankan perintah <c>shutdown</c> jika ia login secara lokal ialah:
</p>

<pre caption="Mengizinkan semua user untuk menjalankan shutdown">
ALL  localhost = /sbin/shutdown
</pre>

<p>
Contoh lainnya ialah mengizinkan user <c>swift</c> untuk menjalankan
<c>emerge</c> sebagai root, dari manapun ia login:
</p>

<pre caption="Mengizinkan user untuk menjalankan sebuah aplikasi dari semua lokasi">
swift   ALL = /usr/bin/emerge
</pre>

<p>
Yang lebih menarik lagi ialah menentukan sebuah set user yang dapat menjalankan
aplikasi administratif (seperti <c>emerge</c> dan <c>ebuild</c>) pada sistem dan
sebuah grup administrator yang dapat mengganti password semua user, kecuali root!
</p>

<pre caption="Menggunakan alias untuk user dan perintah">
User_Alias  <i>SOFTWAREMAINTAINERS</i> = swift, john, danny
User_Alias  <i>PASSWORDMAINTAINERS</i> = swift, sysop
Cmnd_Alias  <i>SOFTWARECOMMANDS</i>    = /usr/bin/emerge, /usr/bin/ebuild
Cmnd_Alias  <i>PASSWORDCOMMANDS</i>    = /usr/bin/passwd [a-zA-Z0-9_-]*, !/usr/bin/passwd root

<i>SOFTWAREMAINTAINERS</i>  localhost = <i>SOFTWARECOMMANDS</i>
<i>PASSWORDMAINTAINERS</i>  localhost = <i>PASSWORDCOMMANDS</i>
</pre>

</body>
</section>
<section>
<title>Eksekusi Non-Root</title>
<body>

<p>
Anda juga dapat mengizinkan sebuah user untuk menjalankan sebuah aplikasi sebagai
user lain, tetapi bukan user root. Hal ini sangat menarik jika anda menjalankan
aplikasi-aplikasi sebagai user lain (misalnya <c>apache</c> untuk web server)
dan ingin mengizinkan user-user tertentu untuk menjalankan langkah-langkah
administratif sebagai user tersebut (seperti mematikan proses-proses zombie).
</p>

<p>
Di dalam <path>/etc/sudoers</path> anda mendaftarkan user(-user) di antara
<c>(</c>&nbsp;and&nbsp;<c>)</c> sebelum daftar perintah:
</p>

<pre caption="Sintaks eksekusi non-root">
users  hosts = (run-as) commands
</pre>

<p>
Misalnya, untuk mengizinkan <c>swift</c> untuk menjalankan tool <c>kill</c>
sebagai user <c>apache</c> atau <c>gorg</c>:
</p>

<pre caption="Contoh eksekusi non-root">
Cmnd_Alias KILL = /bin/kill, /usr/bin/pkill

swift   ALL = (apache, gorg) KILL
</pre>

<p>
Dengan set ini, user dapat menjalankan <c>sudo&nbsp;-u</c> untuk memilih user
yang yang ingin digunakannya ketika menjalankan aplikasi tersebut:
</p>

<pre caption="Menjalankan pkill sebagai user apache">
$ <i>sudo -u apache pkill apache</i>
</pre>

<p>
Anda dapat mengatur sebuah alias bagi user untuk menjalankan sebuah aplikasi
dengan menggunakan direktif <c>Runas_Alias</c>. Penggunaannya sama dengan
direktif <c>_Alias</c> lain yang telah kita lihat sebelumnya.
</p>

</body>
</section>
<section>
<title>Password dan Setting Default</title>
<body>

<p>
Secara default, <c>sudo</c> meminta user untuk mengidentifikasi dirinya dengan
menggunakan passwordnya sendiri. Ketika password telah dimasukkan, <c>sudo</c>
mengingatnya selama 5 menit, mengizinkan user untuk fokus pada tugasnya agar
tidak perlu memasukkan passwordnya berulang-kali.
</p>

<p>
Tentunya, hal ini dapat anda ubah: anda dapat mengatur direktif <c>Defaults:</c>
di <path>/etc/sudoers</path> untuk mengaturnya untuk sebuah user.
</p>

<p>
Sebagai contoh, untuk mengubah 5 menit ke 0 (tidak pernah diingat):
</p>

<pre caption="Mengubah nilai timeout">
Defaults:swift  timestamp_timeout=0
</pre>

<p>
Setting <c>-1</c> akan mengingat password tanpa batas (sampai sistem reboot).
</p>

<p>
Setting lainnya adalah mengharuskan user untuk memasukkan password user yang
digunakan ketika menjalankan sebuah aplikasi dan bukan passwordnya sendiri.
Hal ini bisa didapatkan dengan <c>runaspw</c>. Pada contoh berikut ini kita
juga mengeset banyaknya percobaan yang diperbolehkan (berapa kali sang user
dapat memasukkan password sebelum <c>sudo</c> gagal) ke <c>2</c> sebagai ganti
default 3:
</p>

<pre caption="Meeminta password root, bukan password user">
Defaults:john   runaspw, passwd_tries=2
</pre>

<p>
Fitur menarik lainnya ialah menjaga variabel <c>DISPLAY</c> agar anda dapat
mengeksekusi tool grafis:
</p>

<pre caption="Menjaga variabel DISPLAY">
Defaults:john env_keep=DISPLAY
</pre>

<p>
Anda dapat mengganti aturan-aturan default dengan menggunakan direktif
<c>Defaults:</c>. bacalah manual <c>sudo</c> lalu cari <c>Defaults</c>.
</p>

<p>
Namun jika anda ingin mengizinkan sebuah user untuk menjalankan sekumpulan
perintah tertentu tanpa memasukkan password, anda perlu menambahkan
<c>NOPASSWD:</c>, di depan perintah tersebut seperti:
</p>

<pre caption="Mengizinkan emerge untuk dijalankan sebagai root tanpa meminta password">
swift     localhost = NOPASSWD: /usr/bin/emerge
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Menggunakan Sudo</title>
<section>
<title>Menampilkan Hak</title>
<body>

<p>
Untuk mengetahui hak apa saja yang anda miliki, jalankan <c>sudo&nbsp;-l</c>:
</p>

<pre caption="Menampilkan hak">
$ <i>sudo -l</i>
User swift may run the following commands on this host:
    (root)   /usr/libexec/xfsm-shutdown-helper
    (root)   /usr/bin/emerge
    (root)   /usr/bin/passwd [a-zA-Z0-9_-]*
    (root)   !/usr/bin/passwd root
    (apache) /usr/bin/pkill
    (apache) /bin/kill
</pre>

<p>
Jika anda memiliki perintah di <path>/etc/sudoers</path> yang tidak meminta
anda untuk memasukkan password, perintah tersebut juga tidak membutuhkan untuk
menampilkan entri. Jika tidak, maka anda akan diminta untuk memasukkan password
anda jika memang belum diingat.
</p>

</body>
</section>
<section>
<title>Memperpanjang Timeout Password</title>
<body>

<p>
Secara default, jika sebuah user memasukkan passwordnya untuk mengidentifikasi
dirinya kepada <c>sudo</c>, password tersebut akan diingat selama 5 menit.
Jika sang user ingin memperpanjang periode ini, ia dapat menjalankan
<c>sudo&nbsp;-v</c> untuk me-reset waktu agar diperlukan 5 menit lagi untuk
<c>sudo</c> meminta password kembali.
</p>

<pre caption="Memperpanjang timeout password">
$ <i>sudo -v</i>
</pre>

<p>
Kebalikannya ialah dengan mematikan tanda waktu dengan <c>sudo&nbsp;-k</c>.
</p>

</body>
</section>
</chapter>
</guide>
