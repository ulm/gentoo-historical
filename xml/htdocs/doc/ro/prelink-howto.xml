<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ro/prelink-howto.xml,v 1.5 2005/04/21 17:39:26 alin Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="prelink-howto.xml" lang="ro">
<title>Ghid Prelink pentru Gentoo Linux</title>

<author title="Author">
  <mail link="cretin@gentoo.org">Stefan Jones</mail>
</author>
<author title="Editor"><!-- zhen@gentoo.org -->
  John P. Davis
</author>
<author title="Editor">
  <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Editor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Editor">
  <mail link="erwin@gentoo.org">Erwin</mail>
</author>
<author title="Translator">
  <mail link="thu@gentoo.ro">Tiberiu Ana</mail>
</author>

<abstract>
Acest ghid explică utilizarea suportului pentru prelink în portage 2.0.46 sau
mai nou.
</abstract>

<license/>

<version>1.12</version>
<date>2005-04-21</date>

<chapter>
<title>Introducere</title>
<section>
<title>Ce este Prelink şi cum mă poate ajuta?</title>
<body>

<p>
Multe aplicaţii folosesc biblioteci partajate. Aceste biblioteci partajate
trebuiesc încărcate în memorie la execuţie şi diferitele referinţe simbolice
trebuie rezolvate. Pentru majoritatea programelor mici acest proces de link
dinamic este foarte rapid. Totuşi, pentru unele programe scrise în C++ şi care
au multe dependinţe de biblioteci, procesul de link dinamic poate dura o
perioadă semnificativă de timp.
</p>

<p>
Pe majoritatea sistemelor, bibliotecile nu sunt schimbate foarte des şi, când
un program este rulat, operaţiile de link sunt aceleaşi de fiecare dată.
Prelink-ul se foloseşte de asta executând procesul de link şi stocându-l în
executabil.
</p>

<p>
Prelinking-ul poate să reducă timpul de pornire al aplicaţiilor. De exemplu,
timpul de încărcare al unui program tipic KDE poate fi redus până la 50%.
Singura operaţie necesară este re-rularea prelink-ului pentru executabil de
fiecare dată când o bibliotecă este actualizată.
</p>

</body>
</section>
<section>
<title>Sumar</title>
<body>

<ul>
  <li>
    Prelinking-ul este executat de un program numit, surprinzator,
    <c>prelink</c>. Acesta modifică fişierul binar pentru a-l face să
    pornească mai repede.
  </li>
  <li>
    Dacă bibliotecile de care este dependentă o aplicaţie se schimbă după
    prelink, procesul de prelink trebuie repetat, altfel avantajul vitezei este
    pierdut. Cu alte cuvinte, de fiecare dată când portage actualizează
    bibliotecile, prelink-ul trebuie repetat.
  </li>
  <li>
    Schimbarea fişierului binar este în întregime reversibilă.
    <c>prelink</c> are o funcţie de refacere (undo).
  </li>
  <li>
    Versiunile noi de Portage pot să gestioneze, prin <c>prelink</c>,
    sumele MD5 schimbate şi timpii de modificare (mtime) pentru fişierele
    binare.
  </li>
  <li>
    Nu este necesar să setaţi <c>FEATURES="prelink"</c> în fişierul dvs.
    <path>make.conf</path>; Portage va suporta automat prelink dacă va găsi
    binarul prelink.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Configurarea Prelink</title>
<section>
<title>Instalarea programelor</title>
<body>

<p>
Mai întâi, trebuie să instalaţi utilitarul <c>prelink</c>. Procesul de
instalare verifică automat dacă sistemul poate să efectueze procesul de prelink
în siguranţă.
</p>

<pre caption = "Instalarea prelink">
# <i>emerge prelink</i>
</pre>

<p>
Multe persoane primesc erori la instalarea prelink deoarece testele eşuează.
Testele există din motive de securitate -- comportamentul lui prelink este
nedefinit dacă le dezactivaţi. Erorile aparute la instalare sunt, de obicei,
dependente doar de pachetele de bază; binutils, gcc, şi glibc. Încercaţi să le
reinstalaţi pe fiecare în ordine.
</p>

<note>
Sugestie: Dacă primiţi o eroare, încearcaţi să compilaţi şi să testaţi prelink
manual (<c>./configure</c> ; <c>make</c> ; <c>make check</c> ). În cazul unei
erori, analizaţi fişierele *.log din directorul de test. Acestea vă pot oferi
indicii utile.
</note>

<p>
Dacă deţineţi un set de paşi care reproduc eroarea cauzată de emerge pe un alt
sistem, vă rugăm trimiteţi-le lui <mail link="cretin@gentoo.org">Stefan
Jones</mail>.
</p>

</body>
</section>
<section>
<title>Pregătirea Sistemului Dvs.</title>
<body>

<p>
Urmează activarea indicatorului USE "pic" în fişierul dvs.
<path>/etc/make.conf</path>. Nu uitaţi să rulaţi <c>emerge --update --deep
--newuse world</c> pentru ca modificarea indicatorului USE să fie încorporată
în sistemul dvs.
</p>

<p>
De asemenea, asiguraţi-vă că <e>nu</e> aveţi setată -fPIC între opţiunile dvs.
CFLAGS/CXXFLAGS. Dacă o aveţi setată, va trebui să vă recompilaţi întregul
sistem fără aceasta.
</p>

</body>
</section>
<section>
<title>Configurarea</title>
<body>

<p>
Rularea <c>env-update</c> va genera fişierul <path>/etc/prelink.conf</path>
care îi specifică aplicaţiei <path>prelink</path> pentru ce fişiere să
realizeze prelink.
</p>

<pre caption="Rularea env-update">
# <i>env-update</i>
</pre>

<p>
Din păcate nu puteţi să utilizaţi prelink pentru fişiere care au fost
compilate de versiuni vechi de binutils. Multe dintre aceste aplicaţii vin cu
pachete precompilate care sunt instalate în <path>/opt</path>. Fişierul următor
va specifica aplicaţiei prelink să nu încerce să le modifice. 
</p>

<pre caption="/etc/env.d/60prelink">
PRELINK_PATH_MASK="/opt"
</pre>

<note>
Puteţi adăuga mai multe directoare la listă, separate prin doua puncte ( : ).
</note>

</body>
</section>
</chapter>

<chapter>
<title>Procesul de prelink</title>
<section>
<title>Utilizarea prelink</title>
<body>

<p>
Se foloseşte următoarea comandă pentru a rula prelink pe toate fişierele binare
din directoarele precizate în <path>/etc/prelink.conf</path>.
</p>

<pre caption = "Prelinking pentru fişierele din listă">
# <i>prelink -amR</i>
</pre>

<warn>
S-a observat că procesul de prelink al întregului sistem atunci când există
puţin spaţiu liber pe disc poate să truncheze fişierele binare. Rezultatul este
un sistem stricat. Folosiţi comanda <c>file</c> sau <c>readelf</c> pentru a
verifica starea unui fişier binar. O altă variantă este să verificaţi înainte
cât spaţiu liber este disponibil pe disc cu comanda <c>df -h</c>.
</warn>

<table>
<tr>
  <th>Explicaţia opţiunilor:</th>
</tr>
<tr>
  <th>-a</th>
  <ti>"All": prelink pentru toate fişierele binare</ti>
</tr>
<tr>
  <th>-m</th>
  <ti>
    Conservă spaţiul de memorie virtuală. Necesar dacă aveţi multe biblioteci
    care trebuie prelink-ate.
  </ti>
</tr>
<tr>
  <th>-R</th>
  <ti>
    Random (aleator) -- distribuie aleator ordinea adreselor. Aceasta măreşte
    securitatea împotriva depăşirilor de buffer.
  </ti>
</tr>
</table>

<note>
Pentru mai multe optiuni şi detalii puteţi consulta <c>man prelink</c>.
</note>

</body>
</section>
<section>
<title>Mărirea Vitezei KDE După Prelink</title>
<body>

<p>
Timpul de încărcare al KDE poate fi redus mult după operaţia de prelink. Dacă
informaţi KDE de faptul că i-a fost aplicat prelink, va dezactiva încărcarea
aplicaţiei <c>kdeinit</c> (doarece nu mai este necesară), fapt care măreşte
viteza de încărcare şi mai mult.
</p>

<p>
Setaţi <c>KDE_IS_PRELINKED="true"</c> în <path>/etc/env.d/99kde-env</path>
pentru a informa KDE despre prelink.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Probleme cunoscute şi rezolvări</title>
<section>
<title>&quot;Cannot prelink against non-PIC shared library&quot;</title>
<body>

<p>
Cauza acestei probleme sunt bibliotecile partajate prost compilate, fără
opţiunea gcc -fPIC pentru toate fişierele lor obiect. 
</p>

<p>
Acestea sunt bibliotecile care nu au fost sau nu pot fi reparate:
</p>

<ul>
  <li>
    Bibliotecile din pachetul wine, inclusiv winex. Prelinking-ul nu ar
    accelera executabilele MS Windows în nici un fel.
  </li>
  <li>
    Biblioteca din media-video/mjpegtools,
    <path>/usr/lib/liblavfile-1.6.so.0</path>.
  </li>
</ul>

<p>
Dacă biblioteca cu care aveţi probleme nu a fost menţionată, vă rugăm să
trimiteţi un raport, preferabil cu un patch, care să adauge <c>-fPIC</c> la
indicatorii CFLAGS relevanţi.
</p>

</body>
</section>
<section>
<title>Când folosesc prelink pe sistemul meu, unele fişiere binare statice nu mai funcţionează</title>
<body>

<p>
Unde este implicat glibc, nu exista fişiere binare 100% statice. Dacă compilaţi
un fişier binar cu glibc, acesta poate în continuare să depindă de alte fişiere
sistem. Mai jos este o explicaţie de Dick Howell,
</p>

<p>
&quot;Presupun că ideea este că totul va fi în fişierul descărcat, aşa că nimic
nu depinde de bibliotecile locale de pe sistemul destinaţie. Din păcate, în
Linux şi cred că în orice altceva care foloseşte GLIBC, acest lucru nu este
adevărat. Exista acest "libnss" (name service switch, unii oameni îl numesc
network security system - sistem de securitate al reţelei) care oferă funcţii
pentru accesarea diferitelor baze de date pentru autentificare, informaţie
despre reţea şi alte lucruri. Acesta se presupune că face aplicaţiile să fie
independente de setările reale de reţea ale maşinii, care sunt configurate
separat. Ideea este buna, dar schimbarile in GLIBC pot conduce la probleme la
încărcarea libnss. Şi nu se poate să faci linking static pentru libnss deoarece
este configurat individual pentru fiecare maşină. Problema apare, cred, în
principal de la linking-ul static al altor biblioteci GLIBC, în principal
"libpthread", "libm" şi "libc", din care provin apeluri incompatibile către
funcţii "libnss".&quot;
</p>

</body>
</section>
<section>
<title>Prelink se opreşte cu &quot;prelink: dso.c:306: fdopen_dso: Assertion
`j == k' failed.&quot;</title>
<body>

<p>
Aceasta este o problemă cunoscută, diagnosticată <uri
link="http://bugs.gentoo.org/show_bug.cgi?id=13878">aici</uri>. Prelink nu
poate să lucreze cu executabile comprimate cu UPX. Începând cu prelink-20021213
nu există nici o soluţie în afară de a ascunde executabilele când foloseşti
prelink. Vezi <uri link="#doc_chap2_sect2">secţiunea despre configurare</uri>
de mai sus pentru un mod simplu de a face asta.
</p>

</body>
</section>
<section>
<title>Folosesc grsecurity şi se pare că prelinking-ul nu funcţionează.</title>
<body>

<p>
Pentru a folosi prelink pe un sistem cu grsecurity care foloseşte o bază
aleatoare mmap(), este necesar să opriţi "randomized mmap() base" pentru
<path>/lib/ld-2.3.*.so</path>. Puteţi să efectuaţi această operaţie cu
utilitarul <c>chpax</c>, dar doar atunci când fişierul nu este folosit (de
exemplu, bootând de pe un CD).
</p>

</body>
</section>    
</chapter>

<chapter>
<title>Concluzie</title>
<section>
<body>

<p>
Prelinking-ul poate să scadă drastic timpii de pornire pentru un număr de
aplicaţii mari. Suport pentru prelinking exista în Portage. Prelinking-ul este
sigur pentru că este întotdeauna posibil să anulaţi schimbările pentru orice
fişier binar dacă întâmpinaţi probleme. Ţine în minte că, de fiecare dată când
actualizaţi glibc sau alte biblioteci pe care le-aţi folosit pentru prelinking,
trebuie să rulaţi <path>prelink</path>!
Pe scurt, succes!
</p>

</body>
</section>
</chapter>
</guide>
