<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ro/nvidia-guide.xml,v 1.2 2004/11/24 21:59:21 neysx Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/ro/nvidia-guide.xml" lang="ro">
<title>Ghid Gentoo pentru nVidia</title>

<author title="Autor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Translator">
	<mail link="zinky@gentoo.ro">Talos Teodor</mail>
</author>

<abstract>
Mulţi utilizatori Gentoo au pe sistemul lor un chipset nVidia. nVidia asigură drivere specifice pentru Linux pentru a îmbunătăţi performanţele plăcii. Acest ghid vă informează cum să instalaţi şi să configuraţi aceste drivere.
</abstract>

<license/>

<version>1.6</version>
<date>2004-10-19</date>

<chapter>
<title>Configurarea Plăcii Dumneavoastră</title>
<section>
<title>Instalarea Driver-elor Aferente</title>
<body>

<p>
Setul de drivere nVidia include module din kernel care trebuie integrate în kernel-ul dumneavoastră curent. Ca să îndepliniţi această condiţie, kernel-ul dumneavoastră trebuie să suporte încarcărea de noi module. Dacă aţi folosit <c>genkernel</c> ca să configuraţi kernel-ul sunteţi pregătiţi. Dacă nu, mai faceţi încă o verificare în configurarea kernel-ului pentru ca acest suport să fie activ:
</p>

<pre caption="Activarea Încărcării de Module">
Loadable module support ---&gt;
  [*] Enable loadable module support
</pre>

<p>
Va trebui, de asemenea, să activaţi în kernel opţiunea <e>Memory Type Range Register</e>:
</p>

<pre caption="Activarea MTRR">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

<p>
Modulele nVidia şi librăriile sunt găsite în două pachete: <c>nvidia-glx</c> şi <c>nvidia-kernel</c>. Primele sunt librăriile X11 GLX în timp ce ultimile sunt modulele de kernel. Deoarece <c>nvidia-glx</c> depinde de <c>nvidia-kernel</c>, este suficientă doar instalarea <c>nvidia-glx</c>:
</p>

<pre caption="Instalarea modulelor nVidia ">
# <i>emerge nvidia-glx</i>
</pre>

<p>
Odată ce instalarea s-a finalizat, executaţi comanda <c>modprobe nvidia</c> pentru a încărca modulele de kernel în memorie.
</p>

<pre caption="Încărcarea modulelor de kernel">
# <i>modprobe nvidia</i>
</pre>

<p>
Probabil că doriţi această încărcare de fiecare dată când sistemul dumneavoastră porneşte, aşa că editaţi <path>/etc/modules.autoload.d/kernel-2.6</path> (sau <path>kernel-2.4</path>) şi adăugaţi <c>nvidia</c> în acesta. Nu uitaţi să rulaţi <c>modules-update</c> ulterior!
</p>

<pre caption="Rularea modules-update">
# <i>modules-update</i>
</pre>

</body>
</section>
<section>
<title>Configurarea Serverului X</title>
<body>

<p>
Odată ce driver-ele aferente au fost instalate trebuie să configuraţi Serverul X (XFree86 sau Xorg) pentru a folosi driver-ul <c>nvidia</c> în loc de driver-ul <c>nv</c> implicit.
</p>

<p>
Deschideţi <path>/etc/X11/XF86Config</path> (sau <path>/etc/X11/xorg.conf</path>) cu editorul dumneavoastră favorit (spre exemplu <c>nano</c> sau <c>vim</c>) şi căutaţi linia cu secţiunea <c>Device</c>. În aceea secţiune, schimbaţi linia <c>Driver</c>:
</p>

<pre caption="Schimbarea de la nv la nvidia în configuraţia X">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>
  VideoRam   65536
EndSection
</pre>

<p>
Apoi căutaţi secţiunea <c>Module</c> şi asiguraţi-vă că modulul <c>glx</c> este definit pentru a fi încărcat şi că modulul <c>dri</c>, nu:
</p>

<pre caption="Actualizarea secţiunii Module">
Section "Module"
  <comment>(...)</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>(...)</comment>
EndSection
</pre>

<p>
Rulaţi <c>opengl-update</c> pentru ca aplicaţia server X să folosească librăriile nVidia GLX:
</p>

<pre caption="Rularea opengl-update">
# <i>opengl-update nvidia</i>
</pre>

</body>
</section>
<section>
<title>Testarea plăcii dumneavoastră</title>
<body>

<p>
Pentru a testa placa dumneavoastră nVidia, lansaţi X şi rulaţi comanda <c>glxinfo | grep direct</c>. Ar trebui să afişeze că direct rendering este activat:
</p>

<pre caption="verificarea stării direct rendering">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
Pentru a monitoriza FPS (numărul de cadre pe secundă), rulaţi <c>glxgears</c>. 
</p>

</body>
</section>
</chapter>

<chapter>
<title>Probleme</title>
<section>
<title>Activarea funcţionalităţilor 2D pe maşinile cu mai mult de 4GO Memorie</title>
<body>

<p>
Dacă aveţi probleme cu accelerarea 2D de la nVidia, cel mai probabil nu puteţi seta o plajă valorică pentru proprietatea write-combining cu MTRR. Pentru a verifica, analizaţi conţinutul fişierului <path>/proc/mtrr</path>:
</p>

<pre caption="Verificarea dacă este activată proprietatea write-combining">
# <i>cat /proc/mtrr</i>
</pre>

<p>
Fiecare linie ar trebui să conţină "write-back" sau "write-combining". Dacă este o linie ce conţine "uncachable" în acest fişier, va trebui să schimbaţi o setare din BIOS pentru a repara eroarea.
</p>

<p>
Reporniţi şi intraţi în mediul BIOS, cautaţi setările MTRR (probabil sub "CPU Settings"). Schimbaţi setarea din "continuous" în "discrete" şi porniţi înapoi în Linux. ACum, veţi observa că nu mai există nici o intrare cu valoarea "uncachable" şi accelerarea 2D funcţionează fără probleme.
</p>

</body>
</section>
<section>
<title>Primesc mesaje de eroare despre mărimi de stivă de 4K nesuportate (unsupported 4K stack sizes)</title>
<body>

<p>
Pachetele <c>nvidia-kernel</c> mai vechi de versiunea 1.0.6106 suportă doar versiuni de kernel ce utilizează mărimea stivei de 8K. Versiunile mai recente de kernel (2.6.6 sau mai noi) conţin suport pentru mărimea stivei de 4K, de asemenea. Nu selectaţi mărimea stivei de 4K în configuraţia dvs. de kernel, dacă utilizaţi o asemenea versiune a pachetului <c>nvidia-kernel</c>. Puteţi găsi această opţiune în secţiunea <c>Kernel Hacking</c>.
</p>

</body>
</section>
</chapter>
</guide>
