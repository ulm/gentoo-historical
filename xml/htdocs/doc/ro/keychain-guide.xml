<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ro/keychain-guide.xml,v 1.3 2012/04/18 18:30:35 swift Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide lang="ro">
<title>Ghid pentru Keychain în Gentoo Linux</title>

<author title="Autor">
  <mail link="airuike@gmail.com">Eric Brown</mail>
</author>
<author title="Editor">
 <mail link="vanquirius@gentoo.org">Marcelo Góes</mail>
</author>
<author title="Translator">
  <mail link="alin@gentoo.org">Alin Dobre</mail>
</author>

<abstract>
Acest document descrie cum să utilizaţi cheile partajate ssh împreună cu
aplicaţia keychain. Presupune cunoştinţe de bază despre criptografia cu chei
publice.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.2</version>
<date>2006-02-05</date>

<chapter>
<title>Context</title>
<section>
<title>Problema de rezolvat</title>
<body>

<p>
Aveţi, deci, toate aceste maşini Gentoo minunate ce rulează sshd, dar este
puţin cam incomod pentru dvs. să tot tastaţi toate acele parole de
autentificare, nu? Sau poate aveţi un script sau o intrare cron ce necesită o
modalitate convenabilă pentru utilizarea unei conexiuni ssh. Oricare ar fi
situaţia, există o soluţie pentru această problemă, şi începe cu autentificarea
bazată pe cheie publică.
</p>

</body>
</section>
<section>
<title>Cum funcţionează autentificarea cu cheie publică?</title>
<body>

<p>
Prespupunem că avem un client ce doreşte să se conecteze la sshd pe un server.
Mai întâi, clientul generează o pereche de chei şi îi pasează cheia publică
server-ului. După aceastaa, de fiecare dată când clientul se conectează,
server-ul trimite un şir de caractere de recunoaştere, criptat cu cheia
publică. Doar deţinătorul cheii private corespondente (clientul) poate să o
decripteze, şi după cum aţi ghicit, răspunsul corect induce la o autentificare
cu succes.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Cum să utilizăm autentificarea cu cheie publică</title>
<section>
<title>Generarea perechii de chei</title>
<body>

<p>
Primul pas este crearea perechii dvs. de chei. Pentru aceasta, vom utiliza
comanda <c>ssh-keygen</c>, după cum urmează:
</p>

<pre caption="Generarea perechii de chei">
$ <i>ssh-keygen -t dsa</i>
<comment>(Trebuie doar să acceptaţi valorile implicite, şi să vă
asiguraţi că introduceţi o frază de autentificare puternică)</comment>
</pre>

<warn>
Asiguraţi-vă că alegeţi o frază de autentificare puternică, în special în cazul
în care cheia este utilizată pentru autentificări la root!
</warn>

<p>
Ar trebui, acum, să aveţi o cheie privată în <path>~/.ssh/id_dsa</path> şi o
cheie publică în <path>~/.ssh/id_dsa.pub</path>. Suntem gata de a copia cheia
publică pe sistemul gazdă la distanţă.
</p>

</body>
</section>
<section>
<title>Pregătirea aplicaţiei server</title>
<body>

<p>
Vom copia fişierul <path>~/.ssh/id_dsa.pub</path> pe server-ul ce rulează sshd.
Vom adăuga, de asemenea, în fişierul <path>~/.ssh/authorized_keys</path> ce
corespunde utilizatorului ce se conectează pe acel server. Iată un exemplu
despre modalitatea de efectua aceste operaţii dacă aveţi deja acces ssh pe acel
server.
</p>

<pre caption="Copierea cheii publice pe server">
$ <i>scp ~/.ssh/id_dsa.pub server_user@server:~/myhost.pub</i>
$ <i>ssh server_user@server "cat ~/myhost.pub >> ~/.ssh/authorized_keys"</i>
$ <i>ssh server_user@server "cat ~/.ssh/authorized_keys"</i>
</pre>

<p>
Informaţia rezultată de la ultima comandă ar trebui să vă arate conţinutul
fişierului <path>~/.ssh/authorized_keys</path>. Asiguraţi-vă că aceasta este
corectă.
</p>

</body>
</section>
<section>
<title>Testarea setărilor</title>
<body>

<p>
Teoretic, dacă totul a funcţionat corect şi aplicaţia daemon ssh de pe server
permite acest lucru, ar trebui să putem să avem acces ssh fără parolă, pe
server. Va trebui în continuare să decriptăm cheia privată pe aplicaţia client
cu fraza de autentificare utilizată anterior, dar aceasta nu ar trebui să fie
confundată cu fraza de autentificare corespondentă contului utilizator de pe
server.
</p>

<pre caption="Testarea cheilor">
$ <i>ssh server_user@server</i>
</pre>

<p>
Sperăm că vi s-a cerut să introduceţi fraza de autentificare pentru id_dsa şi
aţi putut să obţineţi acces ssh ca server_user pe server. Dacă nu,
autentificaţi-vă ca server_user şi verificaţi conţinutul fişierului
<path>~/.ssh/authorized_keys</path> pentru a vă asigura că fiecare intrare este
pe câte o singură linie. Aţi mai putea să verificaţi configuraţia sshd pentru a
vă asigura că acesta preferă utilizarea autorizării pe bază de cheie publică,
dacă aceasta este disponibilă.
</p>

<p>
La acest pas, probabil că vă gândiţi "Care este rostul, tocmai am înlocuit o
parolă cu alta?!". Relaxaţi-vă, următoarea secţiune vă va arăta exact cum putem
să utilizăm aceste setări pentru a salva timp preţios.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Utilizarea autentificării cu cheie publică mai convenabil</title>
<section>
<title>Administrarea tipică a cheilor cu ssh-agent</title>
<body>

<p>
Dacă aţi urmărit până aici, probabil că vă gândiţi că ar fi bine dacă aţi putea
cumva să decriptaţi cheile noastre publice doar o singură dată şi să obţinem
funcţionalitatea aplicaţiei ssh fără a mai utiliza parole. Sunteţi norocoşi,
pentru că aceasta este exact menirea aplicaţiei <c>ssh-agent</c>.
</p>

<p>
Aplicaţia <c>ssh-agent</c> este, de obicei, pornită la începutul sesiunii dvs.
X, sau dintr-un script de pornire al aplicaţiei shell, cum ar fi
<path>~/.bash_profile</path>. Funcţionează prin crearea unei componente socket
de tip unix şi înregistrarea variabilelor de mediu corespunzătoare pentru ca
toate aplicaţiile ulterioare să facă uz de avantajul serviciilor acestuia prin
conectarea la acea componentă socket. În mod clar, aceasta are sens doar în
cazul în care îl porniţi în procesul părinte al sesiunii dvs. X, dacă doriţi să
utilizaţi setul de chei private decriptate în toate aplicaţiile X ulterioare.
</p>

<pre caption="Pregătirea ssh-agent">
$ <i>ssh-agent</i>
</pre>

<note>
Acest ssh-agent va reţine cheile decriptate, până când veţi opri rularea
ssh-agent. Dacă doriţi să setaţi o valoare pentru timpul cât vor fi reţinute
cheile, utilizaţi argumentul -t descris în pagina de manual <c>man
ssh-agent</c>.
</note>

<p>
Când rulaţi ssh-agent, ar trebui să vă afişeze numărul PID al acestuia şi să
seteze unele variabile de mediu respectiv <c>SSH_AUTH_SOCK</c> şi
<c>SSH_AGENT_PID</c>. Ar trebui, de asemenea, să adauge
<path>~/.ssh/id_dsa</path> în colecţia acestuia şi să vă indice introducerea
frazei de autentificare corespondente. Dacă aveţi alte chei private pe care
doriţi să le adăugaţi aplicaţiei ssh-agent, puteţi utiliza comanda
<c>ssh-add</c>, după cum urmează:
</p>

<pre caption="Adăugarea altor chei în ssh-agent">
$ <i>ssh-add somekeyfile</i>
</pre>

<p>
Acum, magia. Deoarece ar trebui să aveţi, acum, cheia privată pregătită, ar
trebui să puteţi efectua ssh la server fără a introduce nici o parolă.
</p>

<pre caption="Ssh fără parole">
$ <i>ssh server</i>
</pre>

<p>
Ar fi bine de ştiut cum să opriţi ssh-agent, dacă este necesar, nu?
</p>

<pre caption="Oprirea ssh-agent">
$ <i>ssh-agent -k</i>
</pre>

<note>
Dacă aveţi probleme cu rularea ssh-agent, este posibil ca acesta să mai ruleze,
încă. Îl puteţi opri ca pe oricare al proces, prin rularea <c>killall
ssh-agent</c>.
</note>

<p>
Dacă doriţi ca ssh-agent să fie şi mai convenabil, continuaţi cu următoarea
secţiune despre utilizarea keychain. Asiguraţi-vă că opriţi aplicaţia ssh-agent
din exemplul anterior, dacă decideţi acest lucru.
</p>

</body>
</section>
<section>
<title>Profitarea de toate posibilităţile aplicaţiei ssh-agent</title>
<body>

<p>
Keychain vă va permite să reutilizaţi o sesiune ssh-agent între două
autentificări şi, opţional, să vă ceară frazele de autentificare de fiecare
dată când utilizatorul efectuează login. Înainte de toate, haideţi să-l
instalăm.
</p>

<pre caption="Instalarea keychain">
# <i>emerge keychain</i>
</pre>

<p>
Presupunând că s-a încheiat cu succes, putem, acum, să utilizăm keychain în
voie. Adăugaţi următorul cod în fişierul dvs. <path>~/.bash_profile</path>
pentru a-l activa:
</p>

<pre caption="Activarea keychain în .bash_profile">
keychain ~/.ssh/id_dsa
. ~/.keychain/$HOSTNAME-sh
</pre>

<note>
Puteţi adăuga mai multe chei private în linia de comandă, dacă doriţi. De
asemenea, dacă doriţi să vi se ceară fraza de autentificare de fiecare dată
când rulaţi un process shell, adăugaţi opţiunea --clear.
</note>

<note>
Dacă nu utilizaţi bash, verificaţi secţiunea <b>EXAMPLES</b> din <c>man
keychain</c> pentru exemple de utilizare în alte aplicaţii shell. Ideea este ca
aceste comenzi să fie rulate de fiecare dată când utilizaţi o sesiune shell.
</note>

<p>
Haideţi să-l testăm. Mai întâi, asiguraţi-vă că aţi oprit aplicaţia ssh-agent
din secţiunea anterioară, apoi porniţi o sesiune shell nouă, de obicei doar
prin efectuarea de login sau prin rularea unui nou terminal. Ar trebui să vă
ceară parola pentru fiecare cheie specificată în linia de comandă. Toate
sesiunile shell deschise ulterior ar trebui să reutilizeze sesiunea ssh-agent,
permiţându-vă să efectuaţi alte conexiuni ssh fără parolă.
</p>

</body>
</section>
<section>
<title>Utilizarea keychain cu KDE</title>
<body>

<p>
Dacă sunteţi un utilizator KDE, în loc sa utilizaţi
<path>~/.bash_profile</path>, puteţi lăsa KDE să vă administreze
ssh-agent pentru dvs. Pentru aceasta, va trebui să editaţi
<path>/usr/kde/${ERSIUNE_KDE}/env/agent-startup.sh</path>, ce este citit în
timpul pornirii KDE şi
<path>/usr/kde/${ERSIUNE_KDE}/shutdown/agent-shutdown.sh</path>, ce este
executat în timpul opririi KDE, unde ${VERSIUNE_KDE} corespunde primelor
două componente ale versiunii instalării dvs. de KDE. Spre ex., dacă
utilizaţi KDE 3.5.1, iată cum aţi putea să editaţi acele fişiere:
</p>

<pre caption="Editarea /usr/kde/3.5/env/agent-startup.sh">
if [ -x /usr/bin/ssh-agent ]; then
  eval "$(/usr/bin/ssh-agent -s)"
fi
</pre>

<pre caption="Editarea /usr/kde/3.5/shutdown/agent-shutdown.sh">
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi
</pre>

<p>
Acum, tot ce mai trebuie să faceţi este să lansaţi un terminal la
alegere, cum ar fi Konosole, şi să încărcaţi cheile pe care doriţi
să le utilizaţi. Spre exemplu:
</p>

<pre caption="Încărcarea cheii ssh">
keychain ~/.ssh/id_dsa
<comment>(Introduceţi fraza de protecţie a cheii)</comment>
</pre>

<p>
Cheile dvs. vor fi reţinute până când vă veţi opri sesiunea dvs. KDE
sau când veţi opri ssh-agent manual.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Remarci concludente</title>
<section>
<title>Consideraţii de securitate</title>
<body>

<p>
Bineînţeles, utilizarea ssh-agent adăugă puţină insecuritate sistemului dvs.
Dacă un al utilizator v-ar utiliza mediul shell în timp ce sunteţi la baie,
acesta ar putea să se autentifice pe toate server-ele dvs., fără parolă. Ca
rezultat, este un risc pentru server-ele la care vă conectaţi şi ar trebui să
consultaţi politica de secutitate locală. Dacă utilizaţi această variantă,
asiguraţi-vă că luaţi măsurile corespunzătoare pentru a vă asigura securitatea
sesiunilor dvs.
</p>

</body>
</section>
<section>
<title>Probleme</title>
<body>

<p>
Majoritatea acestor paşi ar trebui să funcţioneze fără probleme, dar dacă le
întâlniţi, va trebui să ştiţi, cu siguranţă, anumite lucruri utile.
</p>

<ul>
  <li>
    Dacă nu puteţi să vă conectaţi fără ssh-agent, luaţi în considerare
    utilizarea ssh cu argumentele -vvv pentru a afla ce se întâmplă. Uneori
    server-ul nu este configurat pentru utilizarea autentificării cu cheie
    publică, uneori este configurat să ceară oricum parola locală! Dacă acesta
    este cazul dvs., aţi putea să utilizaţi opţiunea -o cu ssh, sau să
    modificaţi fişierul sshd_config al server-ului.
  </li>
  <li>
    Dacă aveţi probleme cu ssh-agent sau keychain, poate fi din cauza faptului
    că nu utilizaţi o aplicaţie shell care să poată interpreta comenzile
    utilizate de acestea. Consultaţi paginile de manual pentru ssh-agent şi
    keychain pentru detalii despre funcţionarea acestora în alte medii shell.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
