<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/articles/l-awk2.xml,v 1.3 2011/08/29 11:00:04 cam Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide lang="fr" disclaimer="articles">
<title>Awk par l'exemple, 2e partie</title>

<author title="Auteur">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traducteur">
  <mail link="clefebvre.62@free.fr">Christophe Lefebvre</mail>
</author>

<abstract>
Suite à son introduction à Awk, dans cette séquence, Daniel Robbins continue
l'exploration d'Awk, le grand langage au nom étrange. Daniel va vous expliquer
comment manipuler des enregistrements sur plusieurs lignes, utiliser les
boucles et créer et utiliser des tableaux Awk. À la fin de cet article, vous
aurez déjà vu une bonne partie des fonctionnalités d'Awk et vous serez prêt à
écrire vos propres scripts avancés en Awk.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.4</version>
<date>2005-10-31</date>

<chapter>
<title>Enregistrements, boucles et tableaux</title>
<section>
<title>Les enregistrements sur plusieurs lignes</title>
<body>

<p>
Awk est un excellent outil pour lire et traiter des données structurées, comme
le fichier système <path>/etc/passwd</path>. <path>/etc/passwd</path> est la
base de données UNIX des utilisateurs. C'est un fichier texte délimité par des
":", contenant beaucoup d'informations importantes, incluant entre autres tous
les comptes et les ID des utilisateurs. Dans <uri
link="/doc/fr/articles/l-awk1.xml"> mon article précédent</uri>, je vous ai
montré comment Awk pouvait facilement traiter les différents champs de ce
fichier. Tout ce que nous avions à faire était d'assigner ":" à la variable FS
(séparateur de champs).
</p>

<p>
En renseignant correctement la variable FS, Awk peut être configuré pour
traiter les différents champs de n'importe quelle sorte de données structurées,
tant qu'il y a un enregistrement par ligne. Cependant, FS ne sera pas suffisant
si nous voulons traiter les différents champs d'un enregistrement qui sont sur
plusieurs lignes. Dans ces situations, nous avons aussi besoin de modifier la
variable séparatrice d'enregistrements RS (Record Separator). La variable RS
indique à Awk quand l'enregistrement courant se termine et que le suivant
commence.
</p>

<p>
Par exemple, regardez comment nous faisons pour traiter une liste d'adresses de
participants du «&nbsp;Federal Witness Protection Program&nbsp;»&nbsp;:
</p>

<pre caption="Exemple de données de la liste des participants du «&nbsp;Federal
Witness Protection Program&nbsp;»">
Jimmy the Weasel
100 Pleasant Drive
San Francisco, CA 12345

Big Tony
200 Incognito Ave.
Suburbia, WA 67890
</pre>

<p>
Idéalement, nous souhaiterions qu'Awk reconnaisse chaque bloc de 3 adresses
comme étant un enregistrement individuel, plutôt que 3 enregistrements séparés.
Cela rendrait notre code un peu plus simple si Awk pouvait reconnaître la
première ligne de l'enregistrement comme le premier champ ($1), les coordonnées
de la rue comme le second champ ($2), la ville, l'état et le code postal comme
troisième champ ($3). Le code suivant va simplement faire ce que nous
voulons&nbsp;:
</p>

<pre caption="Réaliser l'initialisation d'un enregistrement de la liste
d'adresse">
BEGIN {
    FS="\n"
    RS=""
}
</pre>

<p>
Ci-dessus, assigner "\n" à FS indique à Awk que chaque champ apparaît sur une
ligne séparée. En assignant "" à RS, nous lui indiquons également que chaque
enregistrement d'adresse est séparé par une ligne vide. Une fois qu'Awk sait
comment les données en entrée sont formatées, il peut faire tous les
traitements d'affichage de ces enregistrements que nous souhaitons. Et le reste
du script est simple à écrire. Regardez ce script complet qui traite cette
liste d'adresse et affiche chaque enregistrement correspondant à une adresse
sur une simple ligne, séparant chaque champ avec une virgule.
</p>

<pre caption="Script complet">
BEGIN {
    FS="\n"
    RS=""
}
{ print $1 ", " $2 ", " $3 }
</pre>


<p>
Si ce script est sauvegardé en <path>address.awk</path> et que les données
correspondantes aux adresses sont stockées dans un fichier appelé
<path>address.txt</path>, vous pouvez exécuter ce script en tapant <c>awk -f
address.awk address.txt</c>. Ce code produit l'affichage suivant&nbsp;:
</p>

<pre caption="Les données affichées par le script">
Jimmy the Weasel, 100 Pleasant Drive, San Francisco, CA 12345
Big Tony, 200 Incognito Ave., Suburbia, WA 67890
</pre>

</body>
</section>
<section>
<title>OFS et ORS</title>
<body>

<p>
Dans la directive d'affichage «&nbsp;print&nbsp;» du fichier
<path>address.awk</path>, vous pouvez voir qu'Awk concatène (joint) les chaînes
de caractères qui sont les unes à côté des autres sur une ligne. Nous avons
utilisé cette fonctionnalité pour insérer une virgule et une espace (",&nbsp;")
entre les trois champs d'adresse qui apparaissent sur la ligne. Bien que cette
méthode fonctionne, elle n'est pas très élégante. Plutôt que d'insérer des
",&nbsp;" entre nos différents champs, Awk peut le faire pour nous grâce à une
variable spéciale d'Awk appelée OFS, le séparateur des champs affichés
«&nbsp;Output Field Separator&nbsp;». Regardez cet extrait de code&nbsp;:
</p>

<pre caption="Exemple d'un extrait de code">
print "Hello", "there", "Jim!"
</pre>

<p>
Les virgules sur cette ligne ne font pas partie de notre chaîne de caractères
d'origine. Au lieu de cela, elles indiquent à Awk que "Hello", "there" et
"Jim!" sont des champs séparés et que la variable OFS doit être affichée entre
chaque chaîne de caractères. Par défaut, Awk produit le résultat suivant&nbsp;:
</p>

<pre caption="Affichage produit par Awk">
Hello there Jim!
</pre>

<p>
Cela nous montre que par défaut, OFS vaut "&nbsp;", une simple espace.
Cependant, nous pouvons facilement redéfinir OFS, Awk insérera alors notre
séparateur de champs favori. Voici une version modifiée de notre programme
d'origine <path>address.awk</path> qui utilise OFS pour afficher ces caractères
intermédiaires ",&nbsp;"&nbsp;:
</p>

<pre caption="Redéfinir OFS">
BEGIN {
    FS="\n"
    RS=""
    OFS=", "
}
{ print $1, $2, $3 }
</pre>

<p>
Awk dispose aussi une variable spéciale appelée ORS, appelée le
«&nbsp;séparateur des enregistrements affichés&nbsp;» (Ouput Record Separator).
En renseignant ORS, qui vaut par défaut le caractère de nouvelle ligne ("\n"),
nous pouvons contrôler le caractère qui sera automatiquement affiché à la fin
d'une ligne. La valeur par défaut ORS oblige Awk à afficher chaque directive
«&nbsp;print&nbsp;» sur une nouvelle ligne. Si nous voulons que les résultats
soient séparés par une double ligne, nous affecterons alors "\n\n" à ORS. Ou,
si nous voulons que les enregistrements soient séparés par une simple espace
(et non par une nouvelle ligne), nous devons mettre ORS à "&nbsp;".
</p>

</body>
</section>
<section>
<title>D'un enregistrement multiligne formaté en enregistrement avec des
tabulations</title>
<body>

<p>
Disons que nous avons écrit un script qui convertit notre liste d'adresses vers
le format&nbsp;: une ligne par enregistrement en délimitant les champs par des
tabulations afin de pouvoir l'importer dans une feuille de calcul. Après avoir
utilisé une version légèrement modifiée de <path>address.awk</path>, cela
devient clair que notre programme ne fonctionne que pour des adresses composées
de trois lignes. Si Awk rencontre l'adresse suivante, la quatrième ligne sera
rejetée et ne sera pas affichée&nbsp;:
</p>

<pre caption="Exemple d'enregistrement">
Cousin Vinnie
Vinnie's Auto Shop
300 City Alley
Sosueme, OR 76543
</pre>

<p>
Pour gérer de telles situations, ce serait bien si notre code prenait le nombre
de champs par enregistrements en compte, affichant chacun d'entre eux dans
l'ordre. Pour l'instant, le code affiche seulement les trois premiers champs de
l'adresse. Voici un code qui fait ce que nous voulons&nbsp;:
</p>

<pre caption="Code amélioré">
BEGIN { 
    FS="\n" 
    RS="" 
    ORS="" 
} 
 
{  
    x=1 
    while ( x&lt;NF ) { 
        print $x "\t" 
        x++ 
    } 
    print $NF "\n" 
} 
</pre>

<p>
Tout d'abord, nous renseignons le séparateur de champs FS à "\n" et le
séparateur d'enregistrements RS à "" afin qu'Awk analyse les adresses de
plusieurs lignes correctement, comme auparavant. Alors, nous renseignons le
séparateur d'affichage des enregistrements à "", ce qui demande à la directive
«&nbsp;print&nbsp;» de ne pas afficher une nouvelle ligne à la fin de chaque
appel. Cela signifie que si nous voulons qu'un texte commence sur une nouvelle
ligne, nous avons besoin d'écrire explicitement «&nbsp;print "\n"&nbsp;».
</p>

<p>
Dans le bloc de code principal, nous créons une variable appelée x qui conserve
le numéro du champ actuel que nous traitons. Initialement, il vaut 1. Alors,
nous utilisons une boucle «&nbsp;while&nbsp;» (une boucle d'Awk qui est
construite de la même façon que celle que l'on trouve dans le langage C) pour
tout parcourir sauf le dernier enregistrement, afficher l'enregistrement et une
nouvelle ligne&nbsp;; aussi, comme qu'ORS vaut "", «&nbsp;print&nbsp;»
n'affiche plus de nouvelle ligne pour nous. Le résultat produit par le
programme est le suivant, ce qui est exactement ce que nous voulons&nbsp;:
</p>

<pre caption="Notre résultat attendu. Pas très élégant, mais délimité par des
tabulations pour une importation facile dans une feuille de calcul">
Jimmy the Weasel        100 Pleasant Drive      San Francisco, CA 12345 
Big Tony        200 Incognito Ave.      Suburbia, WA 67890
Cousin Vinnie   Vinnie's Auto Shop      300 City Alley  Sosueme, OR 76543
</pre>

</body>
</section>
<section>
<title>Fonctionnement des boucles</title>
<body>

<p>
Nous avons déjà vu le fonctionnement des boucles «&nbsp;while&nbsp;», qui est
identique à son homologue en C. Awk a aussi une boucle «&nbsp;do...while&nbsp;»
qui évalue la condition à la fin du bloc de code plutôt qu'au début comme une
boucle «&nbsp;while&nbsp;». C'est identique à une boucle
«&nbsp;repeat...until&nbsp;» que l'on peut trouver dans d'autres langages.
Voici un exemple&nbsp;:
</p>

<pre caption="Exemple «&nbsp;do...while&nbsp;»">
{
    count=1
    do {
        print "Peu importe, je serais affiché au moins une fois" 
    } while ( count != 1 )
}
</pre>

<p>
Parce que la condition est évaluée après le bloc de code, une boucle
«&nbsp;do...while&nbsp;», à la différence d'une boucle normale
«&nbsp;while&nbsp;», s'exécute toujours au moins une fois. Une boucle normale
«&nbsp;while&nbsp;» ne s'exécutera jamais si sa condition est fausse à la
première boucle.
</p>

</body>
</section>
<section>
<title>Pour les boucles</title>
<body>

<p>
Awk vous permet de créer des boucles, comme les boucles «&nbsp;while&nbsp;»
sont identiques à leur homologue en C&nbsp;:
</p>

<pre caption="Exemple de boucle">
for ( assignement initial; comparaison; incrémentation ) {
    bloc de code
}
</pre>

<p>
Voici un exemple simple&nbsp;:
</p>

<pre caption="Exemple simple">
for ( x = 1; x &lt;= 4; x++ ) {
    print "iteration",x
}
</pre>

<p>
Cet extrait affiche&nbsp;:
</p>

<pre caption="Résultat de l'extrait de code">
iteration 1
iteration 2
iteration 3
iteration 4
</pre>

</body>
</section>
<section>
<title>«&nbsp;Break&nbsp;» et «&nbsp;continue&nbsp;»</title>
<body>

<p>
De plus, exactement comme en C, Awk fournit des directives «&nbsp;break&nbsp;»
et «&nbsp;continue&nbsp;». Ces directives fournissent un meilleur contrôle sur
les différentes implémentations de boucles d'Awk. Voici un extrait de code qui
a désespérément besoin d'une directive «&nbsp;break&nbsp;»&nbsp;:
</p>

<pre caption="Extrait de code ayant besoin d'une directive «&nbsp;break&nbsp;»">
while (1) {
    print "pour toujours et toujours..."
}
</pre>

<p>
Parce que 1 est toujours vrai, cette boucle se fera indéfiniment. Voici une
boucle qui s'exécute seulement dix fois&nbsp;:
</p>

<pre caption="Boucle qui s'exécute seulement 10 fois">
x=1
while(1) {
    print "iteration",x
    if ( x == 10 ) {
        break
    }
    x++
}
</pre>

<p>
Ici, la directive «&nbsp;break&nbsp;» est utilisée pour arrêter la boucle la
plus profonde. «&nbsp;break&nbsp;» termine donc immédiatement la boucle et
l'exécution continue à la ligne après le bloc de code de la boucle.
</p>

<p>
La directive «&nbsp;continue&nbsp;» complète «&nbsp;break&nbsp;» et fonctionne
de cette façon&nbsp;:
</p>

<pre caption="La directive «&nbsp;continue&nbsp;» complète la directive
«&nbsp;break&nbsp;»">
x=1
while (1) {
    if ( x == 4 ) {
        x++
        continue
    }
    print "iteration",x
    if ( x > 20 ) {
        break
    }
    x++
}
</pre>

<p>
Ce code affichera de «&nbsp;iteration 1&nbsp;» jusqu'à «&nbsp;iteration
21&nbsp;», sauf «&nbsp;iteration 4&nbsp;». Si l'itération est égale à 4, x est
incrémenté et la directive «&nbsp;continue&nbsp;» est appelée, ayant pour effet
qu'Awk démarre alors la boucle suivante sans même exécuter le reste du bloc de
code. La directive «&nbsp;continue&nbsp;» fonctionne pour tout type de boucle
itérative d'Awk, comme le fait la directive «&nbsp;break&nbsp;». Lorsqu'elle
est utilisée à l'intérieur d'une boucle «&nbsp;for&nbsp;», la directive
«&nbsp;continue&nbsp;» fait que la variable de contrôle de la boucle est
automatiquement incrémentée. Voici un code équivalent pour la boucle&nbsp;:
</p>

<pre caption="Code équivalent au code précédent">
for ( x=1; x&lt;=21; x++ ) {
    if ( x == 4 ) {
        continue
    }
    print "iteration",x
}
</pre>

<p>
Il n'est pas nécessaire d'incrémenter «&nbsp;x&nbsp;» juste avant l'appel de
«&nbsp;continue&nbsp;» comme c'était le cas dans notre boucle
«&nbsp;while&nbsp;», puisque la boucle «&nbsp;for&nbsp;» incrémente
«&nbsp;x&nbsp;» automatiquement.
</p>

</body>
</section>
<section>
<title>Tableaux</title>
<body>

<p>
Vous serez ravi d'apprendre qu'Awk a des tableaux. Cependant, sous Awk, il est
habituel de démarrer les index de tableau à 1, plutôt que 0&nbsp;:
</p>

<pre caption="Exemple de tableaux Awk">
myarray[1]="jim"
myarray[2]=456
</pre>

<p>
Quand Awk rencontre le premier assignement, myarray est créé et l'élément
myarray[1] est initialisé à "jim". Après que le second assignement ait été
évalué, le tableau a deux éléments.
</p>

<p>
Une fois défini, Awk a un moyen pratique pour parcourir les éléments d'un
tableau&nbsp;:
</p>

<pre caption="Parcourir des tableaux">
for ( x in myarray ) {
    print myarray[x]
}
</pre>

<p>
Ce code affiche chaque élément du tableau myarray. Quand vous utilisez cette
forme spéciale du «&nbsp;in&nbsp;» d'une boucle for, Awk assigne chaque index
existant de myarray à x (la variable de contrôle de la boucle) à tour de rôle,
exécutant le bloc de code de la boucle une fois après chaque assignement. Bien
que ce soit une fonctionnalité d'Awk vraiment pratique, il a un
inconvénient&nbsp;: quand Awk parcourt les index du tableau, il ne le fait pas
suivant un ordre particulier. Cela signifie qu'il n'y a pas de moyen pour nous
de savoir si le résultat du code précédent sera&nbsp;:
</p>

<pre caption="Résultat du code précédent">
jim
456
</pre>

<p>
ou
</p>

<pre caption="Un autre résultat possible du même code">
456
jim
</pre>

<p>
Pour reprendre une phrase de Forrest Gump, parcourir le contenu d'un tableau
est comme une boîte de chocolats&nbsp;: vous ne savez jamais sur quoi vous
allez tomber. Cela a quelque chose à voir avec la nature «&nbsp;chaînes de
caractères&nbsp;» des tableaux Awk, ce que nous allons voir à présent.
</p>

</body>
</section>
<section>
<title>Les index de tableaux en «&nbsp;chaînes de caractères&nbsp;»</title>
<body>

<p>
<uri link="/doc/fr/articles/l-awk1.xml">Dans mon article précédent</uri>, je
vous ai montré qu'Awk conserve en fait les valeurs numériques en format de
chaînes de caractères. Pendant qu'Awk réalise les conversions nécessaires pour
faire son travail, il ouvre la porte pour du code un peu étrange &nbsp;:
</p>

<pre caption="Code un peu étrange">
a="1"
b="2"
c=a+b+3
</pre>

<p>
Une fois ce code exécuté, «&nbsp;c&nbsp;» est égal à 6. Puisqu'Awk fonctionne
avec des chaînes de caractères, ajouter les chaînes de caractères
«&nbsp;1&nbsp;» et 2 est fonctionnellement la même chose que d'ajouter les
nombres 1 et 2. Dans les deux cas, Awk réalisera correctement l'opération. La
nature «&nbsp;chaînes de caractères&nbsp;» est assez intrigante&nbsp;: vous
pouvez vous demander si nous utilisons des index de chaînes de caractères pour
les tableaux. Par exemple, prenez le code suivant&nbsp;:
</p>

<pre caption="Exemple de code">
myarr["1"]="Mr. Whipple"
print myarr["1"]
</pre>

<p>
Comme vous pouvez vous y attendre, ce code affichera «&nbsp;Mr. Whipple&nbsp;».
Mais que se passe-t-il si nous enlevons les guillemets autour du deuxième index
"1"&nbsp;?
</p>

<pre caption="En enlevant les guillemets du code">
myarr["1"]="Mr. Whipple"
print myarr[1]
</pre>


<p>
Deviner le résultat de cet extrait de code est un peu plus difficile. Est-ce
que Awk considère myarr["1"] et myarr[1] comme 2 éléments séparés du tableau,
ou référencent-ils le même élément&nbsp;? La réponse est qu'ils référencent le
même élément, Awk affichera «&nbsp;Mr. Whipple&nbsp;» exactement comme dans le
premier extrait de code. Bien que cela puisse sembler étrange, derrière le
décor, Awk a utilisé des index de chaînes de caractères pour ses tableaux tout
le temps&nbsp;!
</p>

<p>
Après avoir pris connaissance de cette curiosité, certains d'entre nous peuvent
être tentés d'exécuter du code farfelu comme ça&nbsp;:
</p>

<pre caption="Code farfelu">
myarr["name"]="Mr. Whipple"
print myarr["name"]
</pre>

<p>
Ce code ne génère pas d'erreur et fonctionne comme nos exemples précédents et
affichera aussi "Mr. Whipple"&nbsp;! Comme vous pouvez le voir, Awk ne nous
limite pas à utiliser que des index de nombres entiers&nbsp;; nous pouvons
utiliser des index de chaînes de caractères si nous le voulons, sans que cela ne
crée de problème. Chaque fois que nous utilisons des index de tableau n'étant
pas des nombres entiers comme myarr["name"], nous utilisons des tableaux
associatifs. Techniquement, Awk ne fait rien de différent quand nous utilisons
un index de chaînes de caractères (même si vous utilisez un index de
«&nbsp;nombre entier&nbsp;», Awk le traite encore comme une chaîne de
caractères). Cependant, vous devriez utiliser ces tableaux associatifs&nbsp;:
c'est plutôt cool et impressionnera votre patron. L'astuce d'index de chaînes
de caractères sera notre petit secret. ;)
</p>

</body>
</section>
<section>
<title>Les outils pour les tableaux</title>
<body>

<p>
Quand il en vient aux tableaux, Awk nous donne beaucoup de flexibilité. Nous
pouvons utiliser des chaînes de caractères comme index et nous ne sommes pas
tenus d'avoir une suite continue de nombres d'index (par exemple, nous pouvons
définir myarr[1] et myarr[1000] et laisser les autres éléments indéfinis). Bien
que cela puisse être très utile, dans certaines circonstances, cela peut porter
à confusion. Heureusement, Awk offre quelques fonctionnalités pratiques pour
aider à rendre les tableaux plus facilement manipulables.
</p>

<p>
Tout d'abord, nous pouvons supprimer des éléments d'un tableau. Si vous voulez
effacer l'élément 1 de votre tableau fooarray, tapez&nbsp;:
</p>

<pre caption="Supprimer des éléments du tableau">
delete fooarray[1]
</pre>

<p>
Et si vous voulez voir si un élément particulier du tableau existe, vous pouvez
utiliser l'opérateur booléen spécial «&nbsp;in&nbsp;» comme décrit ci-dessous.
</p>

<pre caption="Vérifier si un élément particulier du tableau existe">
if ( 1 in fooarray ) {
    print "Oui&nbsp;! Il est ici."
} else {
    print "Non&nbsp;! Je ne le trouve pas."
}
</pre>

</body>
</section>
<section>
<title>La prochaine fois</title>
<body>

<p>
Nous avons abordé pas mal de points dans cet article. La prochaine fois, je
compléterai votre connaissance d'Awk en vous expliquant comment utiliser les
fonctions mathématiques, les fonctions de chaînes de caractères et comment
créer vos propres fonctions. Je vous parcourrai la création d'un programme
d'équilibrage d'un carnet de chèques. D'ici là, je vous encourage à écrire
quelques programmes Awk et de consulter les ressources suivantes.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Ressources</title>
<section>
<body>

<ul>
  <li>
    Lisez les autres articles de Daniel sur Awk&nbsp;: Awk par l'exemple, <uri
    link="l-awk1.xml">1re partie</uri> et <uri
    link="../../en/articles/l-awk3.xml">3e partie</uri>.
  </li>
  <li>
    Si vous recherchez un bon vieux livre, <uri
    link="http://www.oreilly.com/catalog/sed2/">Sed &amp; Awk, 2nd
    Edition</uri> d'O'Reilly est un très bon choix.
  </li>
  <li>
    Consultez aussi la <uri
    link="http://www.faqs.org/faqs/computer-lang/awk/faq/">FAQ comp.lang.awk
    </uri>. Elle contient beaucoup de liens supplémentaires sur Awk.
  </li>
  <li>
    <uri link="http://sparky.rice.edu/~hartigan/awk.html">Awk tutorial</uri> de
    Patrick Hartigan est présenté avec des scripts Awk avancés.
  </li>
  <li>
    <uri link="http://www.tasoft.com/tawk.html">Thompson's TAWK Compiler</uri>
    compile les scripts Awk en exécutables binaires rapides. Des versions sont
    disponibles pour Windows, OS/2, DOS et UNIX.
  </li>
  <li>
    <uri link="http://www.gnu.org/software/gawk/manual/gawk.html">The GNU Awk
    User's Guide</uri> est disponible comme référence en ligne.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
