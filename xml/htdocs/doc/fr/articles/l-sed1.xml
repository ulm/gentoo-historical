<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/articles/l-sed1.xml,v 1.3 2005/09/21 08:04:22 neysx Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/fr/articles/l-sed1.xml" lang="fr">
<title>Sed par l'exemple &mdash; Première partie</title>

<author title="Auteur">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<!-- xmlified by
  <mail link="rane@gentoo.org">Łukasz Damentko</mail>
-->
<author title="Traducteur">
  <mail link="clement@varaldi.org">Clément Varaldi</mail>
</author>

<abstract>
Dans cette série d'articles, Daniel Robbins vous montrera comment utiliser Sed,
un éditeur de flux UNIX très puissant (mais souvent méconnu). Sed est l'outil
idéal pour éditer un groupe de fichiers ou pour créer des scripts Shell qui
modifient des fichiers existants de manière efficace.
</abstract>

<!-- La version originale de cet article a été publiée par les développeurs IBM,
et est la propriété de Westtech Information Services. Ce document est une
traduction de la mise à jour de la version originale de l'article réalisée par
l'équipe de documentation Gentoo et contient de nombreuses améliorations
proposées par l'équipe de documentation de Gentoo Linux. -->

<version>1.2</version>
<date>2005-07-15</date>

<chapter>
<title>Prise en main de Sed, puissant éditeur UNIX</title>
<section>
<title>Le choix de l'éditeur</title>
<body>

<note>
La version originale de cet article a été publiée sur IBM developerWorks
et est la propriété de Westtech Information Services. Ce document est une
traduction de la mise à jour de la version originale de l'article réalisée par
l'équipe de documentation Gentoo et contient de nombreuses améliorations
proposées par l'équipe de documentation de Gentoo Linux.
</note>

<p>
Dans le monde UNIX, nous disposons de beaucoup d'options quand il s'agit
d'éditer des fichiers. Il vous suffit de réfléchir et vous verrez des noms comme
vi, emacs ou jed vous venir à l'esprit, mais ce ne sont que des exemples parmi
d'autres. Nous avons tous un éditeur de texte favori (accompagné de raccourcis
claviers adaptés à vos habitudes) que nous avons appris à utiliser et que nous
aimons. Avec notre éditeur bien aimé nous pouvons réaliser n'importe quelle
tâche d'administration liée à la programmation ou à l'administration UNIX.
</p>

<p>
Si les éditeurs interactifs sont puissants, ils ont aussi des limitatons. Si
leur nature interactive peut être une force, cela peut aussi se révéler être une
faiblesse. Prenez par exemple une situation dans laquelle vous devez effectuer
des modifications similaires sur un groupement de fichiers. Vous pouvez lancer
instinctivement votre éditeur favori et réaliser une grosse quantité d'éditions
de fichiers à la main, opération longue et répétitive. Mais il existe un
meilleur moyen.
</p>

</body>
</section>
<section>
<title>Utiliser Sed</title>
<body>

<p>
Ce serait bien si nous pouvions automatiser le processus d'édition des fichiers
et ainsi pouvoir les éditer en ligne de commande, voire même écrire des scripts
qui permettent d'effectuer des modifications sophistiquées sur des fichiers
existants. Heureusement pour nous, dans ce genre de situation, il existe une
solution. Cette solution s'appelle Sed.
</p>

<p>
Sed est un éditeur de flux léger inclu dans presque tous les systèmes UNIX,
notamment Linux. Sed dispose de nombreuses fonctionnalités intéressantes. Tout
d'abord, il est très léger, généralement plusieurs fois plus petit que votre
éditeur préféré. Ensuite, comme Sed est un éditeur de flux, il peut éditer les
données qu'il reçoit depuis l'entrée standard stdin ou depuis un
«&nbsp;pipe&nbsp;». Vous n'avez donc pas besoin d'avoir les données sauvées dans
un fichier pour pouvoir les éditer. Comme les données peuvent être traitées en
ligne de commande, il est très facile d'utiliser Sed dans une longue ligne de
commande d'un script Shell. Essayez donc d'en faire autant avec votre éditeur
favori.
</p>

</body>
</section>
<section>
<title>GNU sed</title>
<body>

<p>
Heureusement pour nous autres utilisateurs de Linux, l'une des meilleures
versions de Sed existantes se trouve être GNU sed, actuellement dans sa version
3.02. Toutes les distributions Linux contiennent GNU sed ou, du moins, devraient
le contenir. GNU sed est populaire non seulement parce que ses sources peuvent
être distribuées librement, mais aussi parce qu'il dispose de nombreuses
extensions efficaces et sympathiques vis-à-vis du standard POSIX. GNU sed ne
souffre pas des nombreuses limitations que l'on trouve dans les récentes
solutions propriétaires de Sed, comme, par exemple, une limite sur la longueur
des lignes (GNU sed gère avec aisance les lignes de toutes tailles).
</p>

</body>
</section>
<section>
<title>La version GNU sed la plus récente</title>
<body>

<p>
Lors de mes recherches pour écrire cet article, j'ai remarqué que beaucoup de
fans de Sed sur Internet faisaient référence à GNU sed 3.02a. Curieusement je
n'arrivais pas à trouver cette version sur <uri>ftp://ftp.gnu.org</uri> (voir
les <uri link="#resources">Ressources</uri> de cet article pour obtenir les
liens), il m'a fallu donc chercher ailleurs. Je l'ai trouvée sur
<uri>ftp://alpha.gnu.org</uri>, dans le répertoire <path>/pub/sed</path>. J'ai
téléchargé avec joie cette nouvelle version, l'ai installée, pour me rendre
compte quelques minutes plus tard que la version de Sed la plus récente était la
3.02.80, que vous pouvez trouver à côté de la 3.02a, sur
<uri>ftp://alpha.gnu.org</uri>. Après avoir installé GNU sed 3.02.80, j'étais
prêt à faire mes expérimentations.
</p>

</body>
</section>
<section>
<title>Le bon Sed</title>
<body>

<p>
Dans cette série d'articles, nous utiliserons GNU sed 3.02.80. Quelques-uns
(mais très peu) des exemples les plus avancés que vous trouverez plus loin dans
ces articles ne fonctionnent pas avec GNU sed 3.02 ou 3.02a. Si vous utilisez
une version de Sed non GNU, le résultat peut varier. Pourquoi donc ne pas
prendre le temps d'installer GNU sed 3.02.80 dès maintenant&nbsp;? Vous serez
alors non seulement prêt pour la suite des articles, mais vous pourrez également
vous vanter d'avoir la meilleure version de Sed qui existe&nbsp;!
</p>

</body>
</section>
<section>
<title>Sed par l'exemple</title>
<body>

<p>
Sed fonctionne en effectuant toutes les opérations d'édition (des
«&nbsp;commandes&nbsp;») spécifiées par l'utilisateur sur la ligne de commande.
Sed est un de ces outils qui ne traitent qu'une ligne à la fois. Ainsi, les
commandes seront appliquées sur chaque ligne, dans l'ordre. Il écrit le résultat
sur la sortie standard (stdout) puis passe à la ligne suivante. Aucun fichier
envoyé en entrée n'est modifié.
</p>

<p>
Jetons un œil à quelques exemples. Les premiers seront un peu étranges parce que
je les utiliserai pour montrer comment fonctionne Sed plus que pour effectuer
une manipulation quelconque. Cela dit, si vous utilisez Sed pour la première
fois, il est très important que vous compreniez ces exemples. Voici le premier
d'entre eux&nbsp;:
</p>

<pre caption="Exemple d'utilisation de Sed">
$ <i>sed -e 'd' /etc/services</i>
</pre>

<p>
En tapant cette commande, vous n'obtiendrez absolument aucun message de sortie.
Bien, mais alors que se passe-t-il&nbsp;? Dans cet exemple, nous exécutons Sed
avec une commande d'édition, <c>d</c>. Sed ouvre le fichier
<path>/etc/services</path>, lit une ligne dans son tampon d'édition, effectue
notre commande d'édition («&nbsp;supprimer la ligne&nbsp;»), puis affiche le
tampon (qui est vide). Il répète la même étape pour chaque ligne du fichier.
Vous n'obtiendrez aucun message de sortie, puisque la commande <c>d</c> supprime
toutes les lignes du tampon d'édition&nbsp;!
</p>

<p>
Vous devez remarquer un certain nombre d'éléments dans cet exemple. Tout
d'abord, <path>/etc/services</path> n'a pas du tout été modifié. Cela est dû au
fait que Sed ne fait que lire le fichier spécifié dans la ligne de commande en
ne l'utilisant que comme flux d'entrée. Il n'essaye pas de modifier ce fichier.
Ensuite, vous remarquerez que Sed travaille en mode ligne par ligne. La commande
<c>d</c> n'indique pas simplement à Sed de supprimer toutes les données d'un
seul coup. À la place, Sed récupère l'une après l'autre les lignes de ce fichier
dans un tampon d'édition interne. Une fois qu'une ligne est mise dans le tampon
d'édition, Sed exécute la commande <c>d</c> sur ce tampon et renvoie en sortie
standard le résultat (dans notre exemple&nbsp;: rien, vu que le contenu est
supprimé). Plus tard, je vous montrerai comment utiliser des intervalles
d'adresses pour contrôler quelles lignes doivent être éditées par la commande.
Si aucune adresse n'est précisée, la commande sera appliquée à toutes les
lignes.
</p>

<p>
La troisième chose à remarquer est l'utilisation des apostrophes autour de la
commande <c>d</c>. Il est bon de prendre l'habitude d'utiliser des apostrophes
autour des commandes Sed pour que votre console Shell ne l'interprète pas.
</p>

</body>
</section>
<section>
<title>Sed par l'exemple, deuxième exemple</title>
<body>

<p>
Voici un exemple d'utilisation de Sed permettant de supprimer la première ligne
de <path>/etc/services</path> dans le flux de sortie&nbsp;:
</p>

<pre caption="Autre exemple de Sed">
$ <i>sed -e '1d' /etc/services | more</i>
</pre>

<p>
Comme vous pouvez le voir, cette commande ressemble vraiment à la première
commande <c>d</c>, sauf que nous l'avons fait précéder d'un <c>1</c>. Comme vous
l'aurez probablement deviné, le <c>1</c> indique une référence à la première
ligne. Contrairement au premier exemple, nous précédons le <c>d</c> d'une
adresse numérique optionnelle. En utilisant les adresses, vous pouvez indiquer à
Sed de n'effectuer les commandes que sur certaines lignes en particulier.
</p>

</body>
</section>
<section>
<title>Intervalles d'adresses</title>
<body>

<p>
Maintenant, jetons un œil sur comment spécifier un intervalle d'adresses. Dans cet
exemple, Sed va supprimer les lignes de 1 à 10 dans la sortie&nbsp;:
</p>

<pre caption="Spécifier un intervalle d'adresses">
$ <i>sed -e '1,10d' /etc/services | more</i>
</pre>

<p>
Lorsque vous séparez deux adresses par une virgule, Sed va appliquer la commande
suivante à l'intervalle d'adresses compris entre la première et la seconde
adresse. Dans cet exemple, la commande <c>d</c> sera appliquée aux lignes de 1 à
10 incluses. Toutes les autres lignes seront ignorées.
</p>

</body>
</section>
<section>
<title>Des adresses avec expressions régulières</title>
<body>

<note>
N.d.T&nbsp;: Pour traduire «&nbsp;regular expression&nbsp;», nous utilisons ici
le terme «&nbsp;expression régulière&nbsp;», plus répandu que le terme plus
conventionnel «&nbsp;expression rationnelle&nbsp;».
</note>

<p>
Il est maintenant temps de montrer des exemples utiles. Disons que vous
souhaitez voir le contenu du fichier <path>/etc/services</path> à l'exception
des commentaires. Comme vous le savez, vous pouvez placer des commentaires dans
votre fichier <path>/etc/services</path> en faisant commencer la ligne par un
dièse «&nbsp;#&nbsp;». Pour éviter d'afficher les commentaires, nous allons
supprimer les lignes commençant par un dièse. Voici comment faire&nbsp;:
</p>

<pre caption="Supprimer les lignes commençant par un #">
$ <i>sed -e '/^#/d' /etc/services | more</i>
</pre>

<p>
Essayez cet exemple et regardez ce qui se passe. Vous remarquerez que Sed
effectue sa tâche avec brio. Essayons de comprendre ce qui s'est passé.
</p>

<p>
Pour comprendre la commande «&nbsp;/^#/d&nbsp;», nous devons tout d'abord la
disséquer. Laissons de côté le <c>d</c> (nous utilisons la même commande de
suppression que précédemment). La partie nouvelle, ici, est <c>/^#/</c> qui est
une adresse par expression régulière. Les adresses avec des expressions
régulières sont toujours encadrées par des <c>/</c>. Elles définissent un
modèle et la commande qui suit immédiatement l'expression régulière ne sera
appliquée que dans le cas où le texte vérifie les conditions spécifiées dans le
modèle indiqué.
</p>

<p>
Donc, <c>/^#/</c> est une expression régulière. Mais que fait-elle&nbsp;? À
l'évidence, c'est le bon moment pour se rafraîchir la mémoire à propos des
expressions régulières.
</p>

</body>
</section>
<section>
<title>Petit topo sur les expressions régulières</title>
<body>

<p>
Nous pouvons utiliser les expressions régulières pour indiquer un modèle que
nous souhaiterions rencontrer dans un texte. Si vous avez déjà utilisé le
caractère <c>*</c> dans une ligne de commande Shell, vous avez déjà utilisé
quelque chose qui est similaire (bien que pas identique) aux expressions
régulières. Voici les caractères spéciaux que vous pouvez utiliser dans les
expressions régulières&nbsp;:
</p>

<table>
<tr>
  <th>Caractère</th>
  <th>Description</th>
</tr>
<tr>
  <ti>^</ti>
  <ti>Indique un début de ligne.</ti>
</tr>
<tr>
  <ti>$</ti>
  <ti>Indique une fin de ligne.</ti>
</tr>
<tr>
  <ti>.</ti>
  <ti>Indique n'importe quel caractère seul.</ti>
</tr>
<tr>
  <ti>*</ti>
  <ti>Indique zéro ou plus occurrences du caractère précédent le *.</ti>
</tr>
<tr>
  <ti>[ ]</ti>
  <ti>Indique l'occurrence d'un des caractères présents dans les [ ].</ti>
</tr>
</table>

<p>
Le meilleur moyen de se faire la main avec les expressions régulières est de
voir quelques exemples. Tous ces exemples seront acceptés par Sed en tant
qu'adresses pouvant être placées à gauche d'une commande. En voici
quelques-uns&nbsp;:
</p>

<table>
<tr>
  <th>Expression régulière</th>
  <th>Description</th>
</tr>
<tr>
  <ti>/./</ti>
  <ti>Récupère toutes les lignes contenant au moins un caractère.</ti>
</tr>
<tr>
  <ti>/../</ti>
  <ti>Récupère toutes les lignes contenant au moins deux caractères.</ti>
</tr>
<tr>
  <ti>/^#/</ti>
  <ti>Récupère toutes les lignes commençant par un #.</ti>
</tr>
<tr>
  <ti>/^$/</ti>
  <ti>Récupère toutes les lignes vides.</ti>
</tr>
<tr>
  <ti>/}^/</ti>
  <ti>Récupère toutes les lignes finissant par un }.</ti>
</tr>
<tr>
  <ti>/} *^/</ti>
  <ti>Récupère toutes les lignes finissant par un } suivi ou non d'espaces.</ti>
</tr>
<tr>
  <ti>/[abc]/</ti>
  <ti>Récupère toutes les lignes contenant un des caractères a, b ou c.</ti>
</tr>
<tr>
  <ti>/^[abc]/</ti>
  <ti>
    Récupère toutes les lignes commençant soit par un a, soit un b, soit un
    c.
  </ti>
</tr>
</table>

<p>
Je vous encourage d'essayer plusieurs de ces exemples. Prenez votre temps pour
vous familiariser avec les expressions régulières et pour essayer de nouvelles
expressions régulières faites maison. Vous pouvez utiliser une expression
régulière (ou regexp) de cette manière&nbsp;:
</p>

<pre caption="Méthode d'utilisation des regexp">
$ <i>sed -e '/regexp/d' /chemin/d/acces/de/mon/fichier | more</i>
</pre>

<p>
Sed supprimera toutes les lignes respectant les règles de la regexp. Il est
cependant plus facile de s'habituer à l'usage des expressions régulières en
indiquant à Sed d'afficher les regexp qui sont vérifiées et de supprimer celles
qui ne correspondent pas, plutôt que l'inverse. Cela peut se faire avec la
commande suivante&nbsp;:
</p>

<pre caption="Afficher les expressions correspondant à une regexp">
$ <i>sed -n -e '/regexp/p' /chemin/d/acces/de/mon/fichier | more</i>
</pre>

<p>
Remarquez la nouvelle option <c>-n</c> qui indique à Sed de n'afficher que les
modèles de texte demandés en commande. Vous noterez également que nous avons
remplacé la commande <c>d</c> par la commande <c>p</c> qui, comme vous l'aurez
probablement compris, demande explicitement à Sed d'afficher les lignes
reconnues par le modèle en question. Voilà. Maintenant, seules les lignes
reconnues par l'expression régulière seront affichées.
</p>

</body>
</section>
<section>
<title>Plus loin avec les adresses</title>
<body>

<p>
Jusqu'à maintenant, nous avons jeté un œil sur les adresses pour les lignes, les
intervalles d'adresses de lignes et les adresses par expression régulière, mais
il existe encore d'autres possibilités. On peut spécifier deux expressions
régulières séparées par une virgule et Sed reconnaîtra toutes les lignes depuis
la première ligne reconnue par la première expression régulière jusqu'à la
première ligne (incluse) reconnue par la seconde expression régulière. Par
exemple, la commande suivante affichera un bloc de texte commençant par une
ligne contenant «&nbsp;BEGIN&nbsp;» et terminant par une ligne contenant
«&nbsp;END&nbsp;»&nbsp;:
</p>

<pre caption="Affichage du bloc de texte souhaité">
$ <i>sed -n -e '/BEGIN/,/END/p' /mon/fichier/texte | more</i>
</pre>

<p>
Si le mot «&nbsp;BEGIN&nbsp;» n'a pas été trouvé, rien ne sera affiché. De plus,
si «&nbsp;BEGIN&nbsp;» a été trouvé, mais que «&nbsp;END&nbsp;» n'a pas été
trouvé plus loin, toutes les lignes suivant le «&nbsp;BEGIN&nbsp;» seront
affichées. Cela est dû au fait que Sed est un éditeur de flux et donc il ne peut
pas deviner à l'avance si «&nbsp;END&nbsp;» sera ou non rencontré.
</p>

</body>
</section>
<section>
<title>Exemple de traitement d'un code source en C</title>
<body>

<p>
Si vous souhaitez n'afficher que la fonction main() d'un code source écrit en C,
vous pouvez écrire&nbsp;:
</p>

<pre caption="Affichage de la fonction main() d'un code en C">
$ <i>sed -n -e '/main[[:space:]]*(/,/^}/p' fichiersource.c | more</i>
</pre>

<p>
Cette commande est composée de deux expressions régulières,
<c>/main[[:space:]]*(/</c> et <c>/^}/</c>, suivies d'une commande, <c>p</c>. La
première expression régulière reconnaît la chaîne de caractère
«&nbsp;main&nbsp;» suivie de zéro ou plusieurs espaces ou tabulations, suivies
d'une parenthèse ouverte. Cela devrait reconnaître le début de votre fonction
main() écrite en ANSI C.
</p>

<p>
Dans ce cas particulier d'expression régulière, nous rencontrons la classe de
caractères «&nbsp;[[:space:]]&nbsp;». Il s'agit d'un mot-clef spécial qui
indique à Sed de reconnaître soit une tabulation, soit une espace. Si vous le
souhaitez, au lieu d'écrire «&nbsp;[[:space:]]&nbsp;», vous pouvez écrire
«&nbsp;[&nbsp;» suivi d'un caractère espace littéral, puis un Ctrl-V, une
tabulation littérale et enfin un «&nbsp;]&nbsp;» (la commande Ctrl-V indique à
bash que vous souhaitez insérer une vraie tabulation plutôt qu'une complétion de
commande). Il est cependant plus lisible d'utiliser la classe de caractères
«&nbsp;[[:space:]]&nbsp;».
</p>

<p>
Bon, passons maintenant à la seconde regexp. <c>/^{/</c> reconnaîtra un
caractère «&nbsp;}&nbsp;» en début de ligne. Si votre code est correctement
formatté, il reconnaîtra alors le crochet fermant de votre fonction main(). Si
ce n'est pas le cas, cela n'affichera pas le code souhaité. C'est un point
important à noter lors de la reconnaissance de modèles.
</p>

<p>
La commande <c>p</c> fait ce qu'elle a toujours fait&nbsp;: indiquer de manière
explicite à Sed d'afficher les lignes souhaitées, en conjonction avec le mode
silencieux <c>-n</c> que nous utilisons. Essayez de lancer la commande sur un
code source écrit en C, Sed devrait alors afficher le bloc correspondant à la
fonction main(), en incluant les lignes «&nbsp;main()&nbsp;» et «&nbsp;}&nbsp;».
</p>

</body>
</section>
<section>
<title>Pour la suite</title>
<body>

<p>
Maintenant que nous avons vu les bases, nous sommes prêts à passer aux deux
prochains articles. Si vous êtes avides de commandes Sed, soyez patient, elles
arrivent&nbsp;! En attendant, vous pouvez jeter un œil sur les ressources
suivantes traitant de Sed et des expressions régulières.
</p>

</body>
</section>
</chapter>

<chapter id="resources">
<title>Ressources</title>
<section>
<title>Liens utiles</title>
<body>

<ul>
  <li>
    Lisez les autres articles que Daniel a écrit dans le cadre du developerWorks
    d'IBM&nbsp;: Sed par l'exemple, <uri link="l-sed2.xml">Deuxième partie</uri>
    et <uri link="l-sed3.xml">Troisième partie</uri>.
  </li>
  <li>
    Lisez l'excellente
    <uri link="http://www.student.northpark.edu/pemente/sed/sedfaq.html">FAQ
    de Sed</uri> (en anglais) d'Eric Pement.
  </li>
  <li>
    Vous trouverez les sources de Sed 3.02 sur
    <uri>ftp://ftp.gnu.org/pub/gnu/sed</uri>.
  </li>
  <li>
    Vous trouverez l'excellente nouvelle version de Sed 3.02.80 sur
    <uri>http://alpha.gnu.org</uri>.
  </li>
  <li>
    Eric Pement met également à disposition de tous une bonne liste de
<uri link="http://www.student.northpark.edu/pemente/sed/sed1line.txt">commandes
    Sed en une ligne</uri> que tout aspirant au poste de gourou de Sed doit
    avoir lue.
  </li>
  <li>
    Si vous aimez les livres à l'ancienne mode, le livre
    <uri link="http://www.oreilly.com/catalog/sed2/">O'Reilly's sed &amp; awk,
    2nd Edition</uri> (en anglais) sera un excellent choix.
  </li>
<!-- À corriger, les liens sont morts, et aucun miroir n'a été actuellement
trouvé, désolé
 <li>
    Vous souhaiterez sans doute lire la page de manuel <uri
    link="http://www.softlab.ntua.gr/unix/docs/sed.txt">7th edition UNIX's sed
    man page</uri> (circa 1978!).
  </li>
  <li>
    Jetez un œil au <uri
    link="http://www.math.fu-berlin.de/~leitner/sed/tutorial.html">guide de
    sed</uri> de Felix von Leitner.
  </li>
-->
  <li>
    Lisez l'article de David Mertz sur la <uri
    link="http://www-106.ibm.com/developerworks/linux/library/l-python5.html">reconnaissance
    de texte en Python</uri> (en anglais) sur le site du developerWorks.
  </li>
  <li>
    Poursuivez votre exploration sur comment <uri
    link="http://vision.eng.shu.ac.uk/C++/misc/regexp/">utiliser les expressions
    régulières</uri> (en anglais) pour trouver et modifier des modèles de texte
    avec ce guide gratuit et exclusif du developerWorks.
  </li>
  <li>
    Lisez ce <uri
    link="http://www.python.org/doc/howto/regex/regex.html">document sur les
    expressions régulières</uri> (en anglais) sur le site
    <uri link="http://python.org">Python.org</uri>.
  </li>
  <li>
    Référez-vous enfin à cet <uri
    link="http://www.uky.edu/ArtsSciences/Classics/regex.html">aperçu des
    expressions régulières</uri> (en anglais) de l'Université du Kentucky.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
