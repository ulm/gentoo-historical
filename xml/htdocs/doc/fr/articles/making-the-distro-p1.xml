<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/fr/articles/making-the-distro-p1.xml" lang="fr" disclaimer="articles">
<title>La création de la distribution, 1e partie</title>

<author title="Auteur">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<!--<author title="Editor">
  <mail link="fox2mike@gentoo.org">Shyam Mani</mail>
</author>-->
<author title="Traducteur">
  <mail link="clefebvre.62@free.fr">Christophe Lefebvre</mail>
</author>

<abstract>
Chacun d'entre nous a son histoire sur son expérience avec Linux. Voici
l'histoire de Linux par Daniel Robbins. Dans ce premier article d'une série de
trois, il nous explique comment il est devenu un développeur de Stampede et
pourquoi il a quitté par la suite Stampede pour démarrer sa propre distribution
appelée Enoch.
</abstract>

<!-- The original version of this article was first published on IBM 
developerWorks, and is property of Westtech Information Services. This 
document is an updated version of the original article, and contains
various improvements made by the Gentoo Linux Documentation team -->

<version>1.3</version>
<date>2005-10-09</date>

<chapter>
<title>La naissance de la distribution Gentoo Linux</title>
<section>
<title>Linux et moi</title>
<body>

<p>
Pour chaque geek Linux, il y a un moment où Linux devient plus qu'un nom et se
révèle être comme quelque chose de plus merveilleux, plus puissant et plus
intrigant que n'importe quel développeur n'a jamais rencontré. Ma révélation
est venu pendant que je travaillais à l'Université du Nouveau Mexique
(University of New Mexico) comme administrateur système. Notre serveur NT
fonctionnait assez bien et j'avais un peu de temps libre. Alors, j'ai installé
Debian sur un serveur en Pentium 166 et j'ai commencé à apprendre, à apprendre,
à apprendre et à apprendre. Et alors, j'ai été accroché.
</p>

<p>
Tout d'abord, j'ai appris les bases de Linux en long, en large et en
travers&nbsp;: comment l'enrichir, réaliser des sauvegardes, faire fonctionner
Samba, etc... Puis j'ai installé Qmail et Apache, puis appris la programmation
en Python et en Shell. J'ai construit un intranet départemental.  J'ai installé
Linux à la maison et j'ai commencé à essayer différentes distributions.
Finalement, j'ai installé Stampede Linux. Vous savez comment ça commence&nbsp;:
d'abord, vous vous battez pour comprendre les bases de Linux, puis quand vous
commencez à en avoir une bonne connaissance, vous personnalisez votre Linux
tout en continuant à apprendre. Parce que Linux n'a rien à cacher, vous pouvez
explorer la technologie et les outils tandis que vous vous améliorez dans la
maîtrise de Linux.
</p>

</body>
</section>
<section>
<title>Linux est un potentiel</title>
<body>

<p>
Linux a offert quelque chose que je n'ai jamais vu avant. Si je devais mettre
un mot sur cette chose de magique, ce serait «&nbsp;potentiel&nbsp;»&nbsp;: le
potentiel de modifier, d'améliorer, de corriger des choses et oui, même de
casser des choses. Au fur et à mesure que je faisais des mises à jour vers des
nouvelles versions du noyau (kernel), j'ai vu Linux s'améliorer devant mes yeux
et se transformer presque quotidiennement. Et c'était parti&nbsp;! J'étais une
partie de la transformation. C'était amusant.
</p>

<p>
Si vous êtes quelqu'un comme moi, avant que vous n'ayez été exposé à Linux et à
l'open source, vous avez regardé ces grandes compagnies de Redmond et de
Cupertino fournir un système d'exploitation de la nouvelle génération qui
travaillerait finalement comme vous le voudriez. Mais hélas, ce rêve n'est
jamais devenu une réalité. Et tandis que nous attendions, Linux est arrivé. Et
bien qu'il y ait eu beaucoup d'imperfections, il nous a fourni quelque chose
que nous pouvions améliorer en attendant la prochaine grande chose. Alors un
jour, nous nous sommes réveillés pour constater que Linux était devenu cette
prochaine grande chose. Et continuant à sourire, nous avons continuer à
bidouiller.
</p>

</body>
</section>
<section>
<title>Linux est un ensemble de personnes</title>
<body>

<p>
La chose suivante que j'ai appris est que Linux est un ensemble de personnes.
Ce n'est pas rafraîchissant&nbsp;? Linux n'est pas juste qu'un bouquet de code
source. C'est une communauté. Nous comptons sur cette communauté pour trouver
la réponse à nos questions et nous commençons à faire partie de la communauté
quand nous commençons à aider les autres en y faisant partager notre expertise
et en y consacrant un peu de notre temps.
</p>

<p>
IRC (Internet relay chat) est un grand endroit pour rencontrer des gens et pour
y passer énormément de temps. Le canal #stampede sur irc.openprojects.net est
devenu mon lieu de visite officiel. C'est là où je posais mes questions sur
Linux. C'est aussi là où j'ai commencé la première fois à dépanner d'autres
personnes. Le canal #stampede avait désespérément besoin d'utilisateurs Linux
expérimentés pour aider les débutants qui venaient juste d'installer la
distribution. Comme c'est souvent le cas sur l'IRC, beaucoup des personnes
expérimentées sur Stampede ont perdu leur ardeur pour répondre à une question
(encore une autre) d'un débutant. Mais j'étais si excité de savoir répondre aux
questions des débutants que je ne pouvais pas résister à les aider. Et c'est
comme ça que ma participation avec Stampede a commencé. J'étais juste un autre
gars qui aimait répondre aux questions. Bien sûr, ce n'était pas entièrement
altruiste parce que je me suis également aidé à améliorer mes connaissances
d'expert Linux avec l'aide que pouvaient m'apporter les personnes les plus
expérimentées sur le canal (pour ne pas dire les développeurs Stampede
eux-mêmes&nbsp;!).
</p>

</body>
</section>
<section>
<title>S'impliquer</title>
<body>

<p>
Quand les gens me demandent comment s'impliquer dans un projet open source, je
leur dis de trouver un endroit où ils peuvent être utiles, même si c'est juste
en aidant avec des questions Linux de base. Un désir sincère d'aider les autres
est un billet d'entrée important dans la communauté Linux parce que ce
sentiment est au coeur de tous les développements open source (incluant Linux).
Du moins, il devrait l'être.
</p>

<p>
Sur la route, vous rencontrerez inévitablement des personnes qui en savent plus
que vous et vous apprendrez d'eux tout comme les débutants continuent à
apprendre grâce à vous. C'est aussi comme ça que vous vous acquerrez plus
d'expérience en trouvant des occasions d'aider de différentes façons. Peut-être
que quelques uns des développeurs que vous rencontrerez par hasard vous
suggérerons quelque chose ou demanderont de l'aide par eux-mêmes. Ils peuvent
même vous inviter à faire partie de l'équipe de développement. Si vous êtes
intéressé pour aider les autres, ils seraient idiots de vous laisser passer. Si
vous dépannez beaucoup de personnes, vous serez certainement remarqué dans la
communauté. C'est un peu de cette façon que ça s'est passé entre Stampede et
moi.
</p>

<p>
Progressivement, je suis devenu de plus en plus impliqué dans le développement
de Stampede. Peu après, j'étais un développeur officiel de Stampede. Avec la
bénédiction de skibum (Matt Wood, le fondateur de Stampede), j'ai commencé à
travaillé sur une nouvelle version du format de paquetages «&nbsp;.slp&nbsp;»
de Stampede. À ce moment là, le format de paquetage «&nbsp;.slp&nbsp;»
consistait en une archive «&nbsp;.tar.bz2&nbsp;» avec un titre de bas de page
de longueur constante sur la fin qui contenait des informations sur l'auteur du
paquetage, une description du contenu, le créateur du paquetage, etc... Cette
approche avait deux problèmes majeurs&nbsp;: les champs avaient une longueur
fixe et le pied de page n'était pas vraiment grand et il n'y avait aucune
extensibilité définie dans le format (il n'y avait pas de moyen permettant
d'ajouter des champs supplémentaires au format «&nbsp;.slp&nbsp;» dans le
futur). Évidemment cela a nécessité une révision majeure.
</p>

<p>
En travaillant avec d'anciens développeurs Stampede, j'ai préparé une
proposition sur la façon de traiter le problème. Puis j'ai commencé à coder un
prototype des outils en Python. Le nouveau format (appelé slpv6) était quelque
chose de similaire au format de fichier IFF du monde Amiga. Ce format
«&nbsp;.slp&nbsp;» de nouvelle génération permettait pour 2 32 champs, 2 32
catégories de champs et une longueur maximale pour les champs de données de 2
32 octets. Non seulement le format était vraiment extensible, mais c'était
aussi plus compacte que du simple texte et facile à analyser. Les données
binaires et texte pouvaient être enregistrées dans le format, ce qui permettait
beaucoup de possibilités pour l'avenir. L'idée était de coller cette en-tête
dynamique de nouvelle génération sur la fin du fichier d'archive produisant
ainsi un format «&nbsp;.slp&nbsp;» de nouvelle génération qui servirait aux
utilisateurs de Stampede pour les années à venir et maintiendrait en même temps
la compatibilité avec les formats d'archives standards d'Unix.
</p>

</body>
</section>
<section>
<title>Les gens peuvent devenir laids</title>
<body>

<p>
Le développement de slpv6 se passait bien et tous les anciens développeurs
étaient heureux de mon travail. Mais malheureusement, deux développeurs
Stampede d'un plus petit niveau ont voulu contrôler le projet de slpv6. Ils
n'aimaient pas la direction que je prenais et ils passaient la plupart de leur
temps à insulter le nouveau système slpv6. Bien que j'ai passé des heures dans
des discussions de développement échauffées pour défendre la proposition face à
leurs attaques, nous n'avons pas été capables de résoudre quoi que ce soit.
Finalement, c'est devenu clair qu'ils argumentaient naturellement et qu'ils ne
seraient pas heureux tant qu'ils n'avaient pas raison. Heureusement pour moi,
mon projet a eu l'approbation des anciens développeurs de Stampede. Mais ces
discussions ont commencé à me fatiguer et le développement de Stampede devenait
très désagréable. Pouah&nbsp;!
</p>

<p>
Je ne pouvais pas éviter ces gars car je devais aller sur le canal #stampede
pour discuter avec les développeurs de plus haut niveau. Et chaque fois que
j'étais sur le canal, ils commençaient à être agressifs en essayant de saper
mon travail. Ils utilisaient des techniques tordues comme demander des réunions
de développement (en réalité, c'était juste une opportunité d'insulter mon
travail en face des anciens développeurs). Ils ont essayé aussi de demander des
votes pour essayer d'obtenir le contrôle de Stampede. Bien sûr, ils ont juste
demandé un vote au moment où ils avaient convaincu assez de personnes d'être
d'accord avec eux. Malgré tout cela, j'ai continué mon développement de slpv6.
Inutile de le dire, les anciens développeurs ont aimé mon travail et voulaient
que je continue (sans leur support, je n'aurais pas été capable d'y arriver).
</p>

</body>
</section>
<section>
<title>Comprendre les détracteurs</title>
<body>

<p>
Ces deux gars appartiennent à une catégorie de développeurs que j'aime appeler
«&nbsp;les détracteurs&nbsp;» («&nbsp;freaks&nbsp;»). Mais malgré le fait qu'il
m'aient rendu le travail de développement désagréable, j'ai aussi appris
beaucoup sur la façon d'avoir affaire à eux. À ce sujet, je voudrais vous
offrir un exposé des développeurs détracteurs, une sorte de vue d'ensemble
complète&nbsp;: les qualités qui en font un, leur mode de fonctionnement et
comment vous, le chef de projet du développement, pouvez confronter et
probablement en venir à bout sans exercer beaucoup d'efforts.
</p>

<p>
Afin d'éviter des dommages émotifs, vous aurez besoin d'un pré-requis&nbsp;:
une colonne vertébrale. Si vous n'êtes pas capable de confronter le détracteir
d'une façon respectueuse mais ferme, il n'y a aucun espoir. Son but est de
contrôler autant que possible votre projet de sorte qu'il ou qu'elle se sente
puissante. Il utilisera plusieurs techniques pour y parvenir. Tout d'abord, il
commencera à critiquer injustement ou à se plaindre amèrement au sujet d'un
projet et/ou des développeurs qui travaillent sur un projet. Puis ils
s'abstiendront d'apporter des solutions constructives. Ils ne seront également
pas disposés à contribuer au projet d'aucune manière à moins qu'ils ne soient
promus au rôle de chef de projet. Leur but est de vous convaincre de leur
donner autant d'autorité que possible alors ils peuvent résoudre des problèmes
que seulement, avec leurs yeux de détracteurs finement entraînés, ils peuvent
voir.
</p>

<p>
Si la critique et le fait de se plaindre ne sont pas efficaces, ils demanderont
une réunion de développeurs. Ce sera leur opportunité d'essayer de diviser
votre équipe de développeurs en deux camps. Quand ils pensent qu'ils ont assez
de personnes de leur côté, ils demandent un vote (sachant qu'ils gagneront).
S'ils ne gagnent pas, le vote ou s'ils sont outrepassés, ils provoqueront une
autre réunion de développeurs la semaine suivante dans laquelle ils essaieront
encore de diviser votre équipe de développement. Ils répéteront infiniment ce
processus.
</p>

<p>
Si l'approche de la réunion de développeurs ne fonctionne pas, les détracteurs
deviendront des réformateurs. En adoptant ce rôle, ils vont essayer de
rationaliser (lisez&nbsp;: saper) le processus décisionnel exécutif accablant
et injuste en essayant de le remplacer avec quelque chose de plus démocratique
(lisez&nbsp;: facilement manipulé). Cela impliquera souvent de vous convaincre
que vous devez faire ce que la majorité des développeurs veulent. Les
détracteurs aiment cela parce que vous ne pouvez plus outrepasser ces votes de
réunion de développeurs (muhahaha&nbsp;!). Si vous permettez que cela se
produise, vous leur avez donné la clef de votre Lexus. Vous êtes impuissant.
</p>

<p>
Dans une autre approche, les détracteurs irriteront et vous conduiront loin vos
développeurs productifs. Alors ils entraîneront votre équipe entière dans une
frénésie comme ils essaient avec force de réformer la structure puissante du
projet. Si tous leurs efforts sont finalement vains, ils essaieront de
rassembler autant de déserteurs que possibles pour travailler sur une nouvelle
version de votre projet. Aïe&nbsp;!
</p>

</body>
</section>
<section>
<title>Gérer les détracteurs</title>
<body>

<p>
Vous pouvez identifier ces gars assez facilement. Il y a ceux qui n'écrivent
aucun code (et qui n'ont pas l'intention de le faire). Au lieu de ça, ils
passent leur temps à parler de choses plus importantes. Vous savez, ces
solutions de management. Si vous êtes un chef de projet, c'est assez facile de
traiter avec eux. Dites-leur juste que vous ne prendrez en compte aucune
proposition excepté s'ils produisent du code qui fonctionne. Ou insistez sur le
fait qu'ils aident le projet en cours, incluant l'obéissance du chef de projet
avant de leur donner l'opportunité d'apporter n'importe quelle critique
(constructive). S'ils écrivent un peu de bon code ou commence à être plus
utiles, super. Sinon, dites-leur de partir. Soit ils laisseront le projet (si
vous les ignorez assez longtemps) ou alors ils prendront acte et commenceront à
écrire du code et en général, deviendront plus agréables.
</p>

<p>
Malheureusement les anciens développeurs de Stampede ne connaissent pas la
gestion des détracteurs. En d'autres mots, ils ont permis à ces gars de
m'agacer (et d'en agacer d'autres) à n'en pas finir. Bien que les anciens
développeurs étaient toujours en faveur de mon travail de développement, ils
n'ont pas fait grand chose pour avoir ces gars sous contrôle. Alors un jour,
j'ai décidé qu'il serait plus facile de créer ma propre distribution plutôt que
de devoir accepter les deux détracteurs. J'ai démissionné du développement de
Stampede et j'ai commencé à faire des plans pour produire ma propre
distribution.
</p>

<p>
Même si je me sentais un peu bizarre de quitter un projet à cause de deux
développeurs de bas niveau, le fait qu'ils n'aient pas vraiment été gérés
indiquait que le projet avait de sérieux problèmes de gestion. Si les
développeurs de plus haut niveau ne pouvaient pas ou n'étaient pas disposés à
ce que les efforts pour le développement de Stampede soient plaisants et
gratifiants alors je n'avais rien à y faire.
</p>

</body>
</section>
<section>
<title>Le fait de recommencer</title>
<body>

<p>
Une fois que je suis parti, j'ai eu un grand soupir de soulagement.
Wouah&nbsp;!  Finalement, les choses étaient calmes et tranquilles. Maintenant,
c'était le moment de définir ce que ma distribution devait être et comment elle
pouvait contribuer sur la scène des distribution Linux. L'une des choses qui
m'avait attiré dans la distribution Stampede était sa rapidité d'exécution
(grâce à son utilisation du compilateur expérimental pgcc optimisé pour
Pentium). Alors j'ai décidé de m'intéresser d'abord à la performance. En plus
de minimiser l'utilisation du CPU, je voulais aussi minimiser la taille. Trop
de distributions activent tellement de services par défaut que vous n'avez
quasiment plus de mémoire RAM disponible après avoir ouvert un terminal
«&nbsp;xterm&nbsp;». Je voulais que ma distribution soit maigre et moyenne et
je me suis intéressé à maximiser la performance du matériel sur lequel elle
tournerait. J'ai décidé d'adopter une approche holistique et d'aborder le
problème de performance par tous les angles.
</p>

<p>
Mais j'ai eu un sérieux manque de ressources puisque j'étais le seul
développeur pour ma distribution&nbsp;! Comment pouvais-je créer quelque chose
qui serait comparable à la «&nbsp;Caldera&nbsp;» ou à la «&nbsp;RedHat&nbsp;»
moi-même&nbsp;? La réponse était l'automatisation. J'ai eu à écrire des scripts
pour tout automatiser de sorte à avoir besoin d'un minimum de temps à consacrer
aux tâches répétitives. Après tout, c'est ce que les ordinateurs font de mieux.
</p>

<p>
J'ai rapidement vu que d'écrire des scripts simples pour automatiser ne serait
pas assez. J'ai dû concevoir un système complet pour générer une distribution
Linux à partir de zéro. Je l'ai appelé à titre d'essai le système
«&nbsp;ebuild&nbsp;» et j'ai commencé à travailler. Le système
«&nbsp;ebuild&nbsp;» devait être capable de créer automatiquement tous les
binaires de la distribution, tout automatiser de la décompression, à
l'application des correctifs lors de la compilation, à l'installation et au
packaging. Après avoir obtenu un prototype de l'«&nbsp;ebuild&nbsp;», j'ai
commencé à créer des scripts «&nbsp;ebuild&nbsp;» pour les composants-clés
d'une distribution Linux (comme gcc, glibc, binutils, util-linux et compagnie).
Mon environnement de développement de Stampede devenait progressivement mon
propre système car j'ai remodelé les scripts d'initialisation (les basant sur
les scripts d'initialisation de Stampede que j'avais précédemment conçus),
testé et installé chaque nouveau paquet que je créais.
</p>

<p>
Quelques mois plus tard, j'avais eu une distribution Linux complète et son
propre hébergement. Je l'ai appelée Enoch, je me suis rassis et j'ai souri,
satisfait. Mais qu'est devenu Enoch et comment a-t-il évolué en Gentoo
Linux&nbsp;? Rejoignez-moi dans mon article suivant où je vous raconterai
l'histoire de comment Enoch est devenu Gentoo Linux et les nombreux nouveaux
challenges auxquels j'ai dû faire face.
</p>

</body>
</section>
<section>
<title>Ressources</title>
<body>

<ul>
  <li>
    Continuez à lire mon histoire avec "La création de la distribution, <uri
    link="/doc/en/articles/making-the-distro-p2.xml">2e partie</uri> et <uri
    link="/doc/en/articles/making-the-distro-p3.xml">3e partie</uri>"
  </li>
  <li>
    Visitez le <uri link="/index.xml">site web Gentoo Linux</uri> pour plus
    d'informations sur la distribution.
  </li>
  <li>
    Apprenez-en plus sur le système d'ebuild de Gentoo Linux dans cet article de
    Daniel, <uri
    link="http://www.gentoo.org/doc/en/articles/bash-by-example-p3.xml">Bash par
    l'exemple, 3e partie</uri>
  </li>
</ul>

</body>
</section>
<section>
<title>À propos de l'auteur</title>
<body>

<p>
Daniel Robbins vit à Albuquerque au Nouveau Mexique. Il était le président de
Gentoo Technologies Inc., l'architecte en chef du projet Gentoo et il est un
auteur ayant contribué à plusieurs livres publiés par MacMillan&nbsp;:
«&nbsp;Caldera OpenLinux Unleashed&nbsp;», «&nbsp;SuSE Linux Unleashed&nbsp;»
et «&nbsp;Samba Unleashed&nbsp;». Daniel s'est intéressé aux ordinateurs
suivant une certaine mode vers l'âge de 7 ans («&nbsp;second grade&nbsp;»)
quand il a été exposé au langage de programmation Logo et à une dose
potentiellement mortelle de «&nbsp;Pac Man&nbsp;». Cela explique probablement
pourquoi il a depuis servi d'artiste graphique à «&nbsp;SONY Electronic
Publishing&nbsp;». Daniel aime passer le temps avec son épouse Mary et sa
nouvelle fille Hadassah. Vous pouvez contacter Daniel en écrivant à <mail
link="drobbins@gentoo.org">drobbins@gentoo.org</mail>
</p>

</body>
</section>
</chapter>
</guide>
