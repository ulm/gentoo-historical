<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/articles/l-sed2.xml,v 1.3 2011/08/29 11:00:04 cam Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide lang="fr" disclaimer="articles"> 
<title>Sed par l'exemple, 2e partie</title>

<author title="Auteur">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traducteur">
  <mail link="clefebvre.62@free.fr">Christophe Lefebvre</mail>
</author>

<abstract>
Sed est un petit éditeur de textes très puissant. Dans cet article, le deuxième
de la série, Daniel vous explique comment utiliser Sed pour réaliser des
substitutions de chaînes de caractères, créer des scripts Sed plus avancés et
utiliser Sed pour ajouter, insérer et modifier les lignes de commandes.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.2</version>
<date>2005-10-09</date>

<chapter>
<title>Comment tirer plus de profit de l'éditeur de texte UNIX&nbsp;?</title>
<section>
<title>Substitution&nbsp;!</title>
<body>

<p>
Regardons l'une des commandes les plus pratiques de Sed, la commande de
substitution. En l'utilisant, nous pouvons remplacer une chaîne de caractères
ou une expression régulière par une autre chaîne de caractères. Voici un
exemple de l'utilisation la plus fondamentale de cette commande&nbsp;:
</p>

<pre caption="L'utilisation la plus fondamentale de la commande de
substitution">
$ <i>sed -e 's/foo/bar/' myfile.txt</i>
</pre>

<p>
Cette commande va afficher le contenu du fichier <path>myfile.txt</path> à
l'écran avec la première occurrence de «&nbsp;foo&nbsp;» (si elle existe)
rencontrée sur chaque ligne, remplacée par la chaîne de caractères
«&nbsp;bar&nbsp;». Notez-bien que j'ai dit la première occurrence de chaque
ligne, bien que ce ne soit pas normalement ce que vous voulez. Normalement,
quand je fais le remplacement d'une chaîne de caractères, je veux l'exécuter
globalement. C'est à dire que je veux remplacer toutes les occurrences sur
chaque ligne comme suit&nbsp;:
</p>

<pre caption="Remplacer toutes les occurences sur chaque ligne">
$ <i>sed -e 's/foo/bar/g' myfile.txt</i>
</pre>

<p>
L'option supplémentaire «&nbsp;g&nbsp;» après le dernier slash «&nbsp;/&nbsp;»
indique à Sed de réaliser un remplacement global.
</p>

<p>
Voici quelques autres petites choses que vous devriez savoir au sujet de la
commande de substitution <c>s///</c>. Tout d'abord, c'est une commande et
seulement une commande&nbsp;: il n'y a pas de numéro de ligne spécifié dans les
exemples précédents. Cela veut dire que la commande <c>s///</c> peut aussi être
utilisée avec des numéros de ligne pour préciser à quelles lignes elle doit
s'appliquer, comme suit&nbsp;:
</p>

<pre caption="Préciser les lignes auxquelles la commande doit s'appliquer">
$ <i>sed -e '1,10s/enchantment/entrapment/g' myfile2.txt</i>
</pre>

<p>
L'exemple précédent entraîne le remplacement de toutes les occurrences du mot
«&nbsp;enchantment&nbsp;» par le mot «&nbsp;entrapment&nbsp;» mais seulement de
la première à la dixième ligne incluse.
</p>

<pre caption="Spécifier plus d'options">
$ <i>sed -e '/^$/,/^END/s/hills/mountains/g' myfile3.txt</i>
</pre>

<p>
Cette exemple remplace «&nbsp;hills&nbsp;» par «&nbsp;mountains&nbsp;» mais
seulement sur les blocs de texte commençant par une ligne vide et se terminant
par une ligne commençant par les trois caractères «&nbsp;END&nbsp;».
</p>

<p>
Une autre chose de bien avec la commande <c>s///</c>, c'est que l'on peut
remplacer le séparateur «&nbsp;<c>/</c>&nbsp;» par autre chose. Si nous
réalisons un remplacement de chaîne de caractères et que l'expression régulière
ou la chaîne de caractères de remplacement contient beaucoup de barres obliques
(slashs), nous pouvons changer le séparateur en utilisant un caractère
différent après le «&nbsp;s&nbsp;». Par exemple, cela remplacera toutes les
occurrences de <path>/usr/local</path> par <path>/usr</path>&nbsp;:
</p>

<pre caption="Remplacer toutes les occurences d'une chaîne de caractères par
une autre">
$ <i>sed -e 's:/usr/local:/usr:g' mylist.txt</i>
</pre>

<note>
Dans cet exemple, nous utilisons le caractère «&nbsp;:&nbsp;» comme séparateur.
Si vous devez quand même utiliser le caractère de séparation dans l'expression
régulière, ajoutez une barre oblique inverse (backslash «&nbsp;\&nbsp;») devant
lui.
</note>

</body>
</section>
<section>
<title>Avec des expressions régulières</title>
<body>

<p>
Jusqu'à présent, nous avons seulement réalisé une simple substitution d'une
chaîne de caractères. Bien que ce soit pratique, nous pouvons aussi rechercher
une expression régulière. Par exemple, la commande suivante de Sed recherche
une phrase commençant par «&nbsp;&lt;&nbsp;», se terminant par
«&nbsp;&gt;&nbsp;» et contenant un nombre quelconque de caractères entre
«&nbsp;&lt;&nbsp;» et «&nbsp;&gt;&nbsp;». Cette phrase va être supprimée
(remplacée par une chaîne de caractères vide)&nbsp;:
</p>

<pre caption="Supprimer une phrase spécifique">
$ <i>sed -e 's/&lt;.*&gt;//g' myfile.html</i>
</pre>

<p>
C'est un bon premier essai de script Sed qui retire des balises HTML à partir
d'un fichier mais il ne marche pas bien à cause d'un caprice de l'expression
régulière. La raison&nbsp;? Quand Sed recherche une expression régulière sur
une ligne, il recherche la correspondance la plus longue sur la ligne. Ceci
n'est pas une correction à mon article précédent sur Sed car nous utilisions
les commandes <c>d</c> et <c>p</c> qui supprimaient de toute façon la ligne
entière. Mais quand nous utilisons la commande <c>s///</c>, cela est très
différent parce que la partie entière que l'expression régulière trouve est
remplacée par la chaîne de caractères de remplacement ou, comme dans le cas
précédent, est supprimée. Cela signifie que l'exemple précédent transforme la
ligne suivante&nbsp;:
</p>

<pre caption="Exemple de code HTML">
&lt;b&gt;C'est&lt;/b&gt; ce que &lt;b&gt;nous&lt;/b&gt; voulons.
</pre>

<p>
En&nbsp;:
</p>

<pre caption="Effet non désiré">
voulons.
</pre>

<p>
Au lieu de ça, voici ce que nous souhaitions&nbsp;:
</p>

<pre caption="Effet désiré">
C'est ce que nous voulons.
</pre>

<p>
Heureusement, il y a un moyen facile de corriger ça. Au lieu de taper une
expression régulière qui dit «&nbsp;un caractère "&lt;" suivi par un nombre
quelconque de caractères et se terminant par un caractère "&gt;"&nbsp;», nous
avons juste à taper une expression régulière qui dit «&nbsp;un caractère "&lt;"
suivi par un nombre quelconque de caractères n'étant pas "&gt;" et se terminant
par un caractère "&gt;"&nbsp;». Cela a pour effet de rechercher la plus petite
correspondance plutôt que la plus longue. Voici à quoi ressemble la nouvelle
commande&nbsp;:
</p>

<pre caption="">
$ <i>sed -e 's/&lt;[^&gt;]*&gt;//g' myfile.html</i>
</pre>

<p>
Dans l'exemple précédent, le «&nbsp;[^&gt;]&nbsp;» correspond à un caractère
n'étant pas «&nbsp;&gt;&nbsp;» et le «&nbsp;*&nbsp;» qui le suit complète cette
expression signifiant «&nbsp;zéro ou plus de zéro caractère n'étant pas
"&gt;"&nbsp;». Testez cette commande sur quelques fichiers HTML puis examinez
les résultats obtenus.
</p>

</body>
</section>
<section>
<title>Plus de caractères de correspondance</title>
<body>

<p>
La syntaxe de l'expression régulière «&nbsp;[ ]&nbsp;» a quelques options
supplémentaires. Pour spécifier une série de caractères, vous pouvez utiliser
un «&nbsp;-&nbsp;» tant qu'il n'est pas en première ou dernière position, comme
ceci&nbsp;:
</p>

<pre caption="Spécifier une série de caractères">
'[a-x]*'
</pre>

<p>
Cela recherche zéro caractère ou plus, tant que ceux-ci sont «&nbsp;a&nbsp;»,
«&nbsp;b&nbsp;», «&nbsp;c&nbsp;»... «&nbsp;v&nbsp;», «&nbsp;w&nbsp;» et
«&nbsp;x&nbsp;». De plus, la classe de caractères «&nbsp;[:space:]&nbsp;» est
disponible pour rechercher une espace. Voici une liste assez complète des
classes de caractères disponibles&nbsp;:
</p>


<table>
<tr>
  <th>Classe de caractères</th>
  <th>Description</th>
</tr>
<tr>
  <ti>[:alnum:]</ti>
  <ti>Alphanumérique [a-z A-Z 0-9]</ti>
</tr>
<tr>
  <ti>[:alpha:]</ti>
  <ti>Alphabétique [a-z A-Z]</ti>
</tr>
<tr>
  <ti>[:blank:]</ti>
  <ti>Espace ou tabulation</ti>
</tr>
<tr>
  <ti>[:cntrl:]</ti>
  <ti>Tout caractère de contrôle</ti>
</tr>
<tr>
  <ti>[:digit:]</ti>
  <ti>Chiffre [0-9]</ti>
</tr>
<tr>
  <ti>[:graph:]</ti>
  <ti>Tout caractère visible (sauf le caractère espace)</ti>
</tr>
<tr>
  <ti>[:lower:]</ti>
  <ti>Minuscule [a-z]</ti>
</tr>
<tr>
  <ti>[:print:]</ti>
  <ti>Un caractère qui n'est pas un caractère de contrôle.</ti>
</tr>
<tr>
  <ti>[:punct:]</ti>
  <ti>Caractère de ponctuation</ti>
</tr>
<tr>
  <ti>[:space:]</ti>
  <ti>Espace</ti>
</tr>
<tr>
  <ti>[:upper:]</ti>
  <ti>Majuscule [A-Z]</ti>
</tr>
<tr>
  <ti>[:xdigit:]</ti>
  <ti>Caractère hexadécimal [0-9 a-f A-F]</ti>
</tr>
</table>

<p>
Il est avantageux d'utiliser des classes de caractères lorsque cela est
possible car ils s'adaptent mieux dans les environnements non-anglophones (par
exemple, en incluant les caractères accentués lorsque cela est nécessaire).
</p>

</body>
</section>
<section>
<title>Commandes avancées pour la substitution de chaînes de caractères</title>
<body>

<p>
Nous avons vu comment réaliser des substitutions simples et même relativement
complexes mais Sed peut faire bien plus. Nous pouvons réellement nous référer à
des parties ou à l'expression régulière entière trouvée et utiliser ces parties
pour construire la chaîne de caractères de remplacement. Par exemple, disons
que vous répondez à un message. L'exemple suivant va préfixer chaque ligne avec
la phrase «&nbsp;ralph a dit&nbsp;»&nbsp;:
</p>

<pre caption="Préfixer chaque ligne avec une chaîne de caractères">
$ <i>sed -e 's/.*/ralph a dit : &amp;/' origmsg.txt</i>
</pre>

<p>
Le résultat affiché ressemblera à quelque chose comme ça&nbsp;:
</p>

<pre caption="Résultat affiché par la commande">
ralph a dit : Hiya Jim,
ralph a dit : 
ralph a dit : I sure like this sed stuff!
ralph a dit :
</pre>

<p>
Dans cet exemple, nous utilisons le caractère «&nbsp;&amp;&nbsp;» dans la
chaîne de caractères de remplacement, ce qui indique à Sed d'insérer
l'expression régulière entière rencontrée. Donc, tout ce qui correspond à
«&nbsp;.*&nbsp;» (le groupe le plus large composé de zéro ou plus de caractères
sur la ligne, autrement dit la ligne entière) peu être inséré où l'on veut dans
la chaîne de caractères de remplacement, même plusieurs fois. C'est génial mais
Sed est encore plus puissant.
</p>

</body>
</section>
<section>
<title>Ces magnifiques parenthèses backslashées</title>
<body>

<p>
Encore mieux que «&nbsp;&amp;&nbsp;», la commande <c>s///</c> nous permet de
définir des zones dans notre expression régulière et nous pourrons nous référer
à ces zones spécifiques dans notre chaîne de remplacement. Par exemple, disons
que nous avons un fichier qui contient le texte suivant&nbsp;:
</p>

<pre caption="Exemple de texte">
foo bar oni
eeny meeny miny
larry curly moe
jimmy the weasel
</pre>

<p>
Maintenant, disons que nous voulons écrire un script Sed qui remplace
«&nbsp;eeny meeny miny&nbsp;» par «&nbsp;Victor eeny-meeny Von miny&nbsp;»,
etc. Pour faire ça, tout d'abord nous devons écrire une expression régulière
qui doit correspondre aux trois chaînes de caractères séparées par des
espaces&nbsp;:
</p>

<pre caption="Expression régulière correspondante">
'.* .* .*'
</pre>

<p>
Voilà. Maintenant, nous allons définir les zones en insérant des parenthèses
backslashées autour de chaque zone qui nous intéresse&nbsp;:
</p>

<pre caption="Définir des zones">
'\(.*\) \(.*\) \(.*\)'
</pre>

<p>
Cette expression régulière travaille de la même façon que la première, exceptée
qu'elle définit trois zones logiques auxquelles nous pouvons nous référer dans
notre chaîne de caractères de remplacement. Voici le script final&nbsp;:
</p>

<pre caption="Script final">
$ <i>sed -e 's/\(.*\) \(.*\) \(.*\)/Victor \1-\2 Von \3/' myfile.txt</i>
</pre>

<p>
Comme vous pouvez le voir, nous nous référons à chaque zone délimitée par des
parenthèses en tapant «&nbsp;\x&nbsp;» où x est le numéro de la région,
démarrant à un. Le résultat affiché est le suivant&nbsp;:
</p>

<pre caption="Résultat affiché par la commande précédente">
Victor foo-bar Von oni
Victor eeny-meeny Von miny
Victor larry-curly Von moe
Victor jimmy-the Von weasel
</pre>

<p>
Au fur et à mesure que vous vous familiariserez avec Sed, vous serez capable de
réaliser des traitements de textes assez puissants avec un minimum d'efforts.
Vous pouvez réfléchir à la façon dont vous auriez traité ce problème en
utilisant votre langage de script favori&nbsp;: pouvez-vous facilement trouver
une solution tenant sur une seule ligne&nbsp;?
</p>

</body>
</section>
<section>
<title>Utiliser plusieurs commandes</title>
<body>

<p>
Comme nous commençons à créer des scripts Sed plus complexes, nous avons besoin
d'être capables d'entrer plus d'une commande. Il y a plusieurs manières de
procéder. Tout d'abord, nous pouvons utiliser des points-virgules entre les
commandes. Par exemple, cette série de commandes utilise la commande
«&nbsp;=&nbsp;» qui indique à Sed de n'afficher que le numéro de ligne puis la
commande «&nbsp;p&nbsp;» qui indique à Sed d'afficher la ligne (puisque nous
sommes dans le mode «&nbsp;-n&nbsp;»&nbsp;:
</p>

<pre caption="Première méthode, les points-virgules">
$ <i>sed -n -e '=;p' myfile.txt</i>
</pre>

<p>
Même si deux commandes ou plus sont spécifiées, chaque commande est appliquée
(dans l'ordre) à chaque ligne du fichier. Dans l'exemple précédent, tout
d'abord la commande «&nbsp;=&nbsp;» est appliqué à la ligne 1 puis la commande
<c>p</c> est appliquée. Puis, Sed traite la ligne 2 et répète le processus.
Bien que l'utilisation du point-virgule soit pratique, il y a des situations où
cela ne fonctionnera pas. Une autre solution est d'employer deux fois l'option
«&nbsp;-e&nbsp;» pour spécifier séparément les deux commandes&nbsp;:
</p>

<pre caption="Deuxième méthode, plusieurs «&nbsp;-e&nbsp;»">
$ <i>sed -n -e '=' -e 'p' myfile.txt</i>
</pre>

<p>
Cependant, quand nous verrons les commandes plus complexes d'ajout et
d'insertion, même plusieurs options «&nbsp;-e&nbsp;» ne nous aideront pas. Pour
des scripts complexes de plusieurs lignes, la meilleure façon est de saisir vos
commandes dans un fichier séparé. Puis référencez ce fichier de script avec
l'option «&nbsp;-f&nbsp;»&nbsp;:
</p>

<pre caption="Troisième méthode, un fichier externe contenant les commandes">
$ <i>sed -n -f mycommands.sed myfile.txt</i>
</pre>

<p>
Cette méthode, bien que discutablement moins pratique, fonctionnera toujours.
</p>

</body>
</section>
<section>
<title>Utiliser plusieurs commandes sur un groupe de lignes</title>
<body>

<p>
Parfois, vous pourrez vouloir spécifier plusieurs commandes qui s'appliqueront
à une simple ligne. Ceci devient particulièrement pratique quand vous réalisez
beaucoup de substituions <c>s///</c> pour transformer des mots ou la syntaxe
dans le fichier source. Pour réaliser plusieurs commandes par ligne, entrez vos
commandes Sed dans un fichier et utilisez les caractères «&nbsp;{&nbsp;}&nbsp;»
pour grouper les commandes comme suit&nbsp;:
</p>

<pre caption="Réaliser plusieurs commandes par ligne">
1,20{
        s/[Ll]inux/GNU\/Linux/g
        s/samba/Samba/g
        s/posix/POSIX/g
}
</pre>

<p>
L'exemple précédent applique trois commandes de substitutions de la ligne 1 à
la ligne 20 incluse. Vous pouvez aussi utiliser une expression régulière pour
spécifier les numéros de ligne ou une combinaison des deux&nbsp;:
</p>

<pre caption="Combinaison des deux méthodes">
1,/^END/{
        s/[Ll]inux/GNU\/Linux/g 
        s/samba/Samba/g 
        s/posix/POSIX/g 
       p
}
</pre>

<p>
Cet exemple applique les commandes entre accolades «&nbsp;{&nbsp;}&nbsp;» de la
ligne 1 (première ligne) à la ligne commençant par les lettres
«&nbsp;END&nbsp;» ou la fin du fichier si «&nbsp;END&nbsp;» n'est pas trouvé
dans le fichier source.
</p>

</body>
</section>
<section>
<title>Ajouter, insérer et modifier une ligne</title>
<body>

<p>
Maintenons que nous savons écrire des scripts Sed dans des fichiers séparés,
nous pouvons profiter des commandes permettant d'ajouter, insérer et modifier
les lignes. Ces commandes insèrent une ligne après la ligne courante, insèrent
une ligne avant la ligne courante ou remplacent la ligne courante.
</p>

<pre caption="Utiliser la commande d'insertion de ligne">
i\
Cette ligne sera insérée avant chaque ligne
</pre>

<p>
Si vous ne précisez pas les numéros de ligne auxquelles doit s'appliquer ce
script, il sera appliqué à chaque ligne et produira l'affichage de quelque
chose ressemblant à ça&nbsp;:
</p>

<pre caption="Résultat affiché par la commande précédente">
Cette ligne sera insérée avant chaque ligne
ligne 1
Cette ligne sera insérée avant chaque ligne
ligne 2
Cette ligne sera insérée avant chaque ligne
ligne 3
Cette ligne sera insérée avant chaque ligne
ligne 4
</pre>

<p>
Si vous souhaitez insérer plusieurs lignes avant la ligne actuelle, vous pouvez
les ajouter en les terminant par un backslash «&nbsp;\&nbsp;» comme ceci&nbsp;:
</p>

<pre caption="Insérer plusieurs lignes avant la ligne actuelle">
i\
insère cette ligne\
et celle-ci\
et celle-ci\
et, euh, celle-ci aussi.
</pre>

<p>
La commande d'ajout fonctionne de la même façon mais elle insère une ou
plusieurs lignes après la ligne courante. Elle est utilisée comme suit&nbsp;:
</p>

<pre caption="Ajouter des lignes après la ligne courante">
a\
Ajoute cette ligne après chaque ligne. Merci&nbsp;! :)
</pre>

<p>
D'autre part, la commande de modification de ligne remplace la ligne courante
et est utilisée comme suit&nbsp;:
</p>

<p>
Parce que les commandes d'ajout, d'insertion et de modification de ligne ont
besoin d'être saisies sur plusieurs lignes, vous devriez les taper dans un
fichier texte et indiquer ce fichier texte contenant le script en utilisant
l'option «&nbsp;-f&nbsp;». Utiliser les autres méthodes pour passer ces
commandes à Sed entraînera des problèmes.
</p>

</body>
</section>
<section>
<title>La prochaine fois</title>
<body>

<p>
La prochaine fois, dans le dernier article de cette série sur Sed, je vous
montrerai beaucoup d'exemples excellents utilisant Sed dans le monde réel pour
beaucoup de types de tâches différentes. Non seulement je vous expliquerai ce
que les scripts font mais aussi pourquoi ils font ce qu'ils font. Une fois que
ce sera fait, vous aurez des idées supplémentaires excellentes pour utiliser
Sed dans des projets variés.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Ressources</title>
<section>
<title>Liens utiles</title>
<body>

<ul>
  <li>
    Consultez les autres articles de Daniel de developerWorks&nbsp;: Sed par
    l'exemple, <uri link="l-sed1.xml">1re partie</uri> et <uri
    link="l-sed3.xml">3e partie</uri>.
  </li>
  <li>
     Consultez cette excellente <uri
     link="http://sed.sourceforge.net/sedfaq.html">FAQ sur
     Sed</uri>, d'Eric Pement.
  </li>
  <li>
     Vous trouverez la version la plus récente de Sed sur
     <uri>ftp://ftp.gnu.org/pub/gnu/sed</uri>.
  </li>
  <li>
    Eric Pement propose également <uri
    link="http://sed.sourceforge.net/sed1line.txt">une
    feuille de triche sur Sed</uri> que n'importe quel futur gourou de Sed
    devrait certainement consulter.
  </li>
  <li>
    Si vous recherchez un bon vieux livre, le <uri
    link="http://www.oreilly.com/catalog/sed2/">sed &amp; awk, 2nd
    Edition</uri> d'O'Reilly est un très bon choix.
  </li>
<!-- FIXME BOTH DEAD and no other locations, sorry
 <li>
    Maybe you'd like to read <uri
    link="http://www.softlab.ntua.gr/unix/docs/sed.txt">7th edition UNIX's sed
    man page</uri> (circa 1978!).
  </li>
  <li>
    Take Felix von Leitner's short <uri
    link="http://www.math.fu-berlin.de/~leitner/sed/tutorial.html">sed
    tutorial</uri>.
  </li>
-->
<!-- DEAD location
    <li>
    Brush up on <uri link="http://vision.eng.shu.ac.uk/C++/misc/regexp/">using
    regular expressions</uri> to find and modify patterns in text in this free,
    dW-exclusive tutorial.
  </li>
  -->
</ul>

</body>
</section>
</chapter>
</guide>
