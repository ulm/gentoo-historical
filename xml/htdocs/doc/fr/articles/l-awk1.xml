<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/articles/l-awk1.xml,v 1.1 2008/10/10 23:54:55 cam Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/fr/articles/l-awk1.xml" lang="fr" disclaimer="articles">
<title>Awk par l'exemple, 1re partie</title>

<author title="Auteur">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traducteur">
  <mail link="clefebvre.62@free.fr">Christophe Lefebvre</mail>
</author>

<abstract>
Awk est un langage très intéressant avec un nom étrange. Dans ce premier
article d'une série en 3 parties, Daniel Robbins va rapidement améliorer votre
niveau en programmation Awk. Au fur et à mesure que nous progresserons, des
sujets plus avancés seront abordés, avec en conclusion une démonstration
avancée d'une application Awk dans le monde réel.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.4</version>
<date>2008-01-08</date>

<chapter>
<title>Une introduction au grand langage au nom étrange</title>
<section>
<title>Pour la défense d'Awk</title>
<body>

<p>
Dans cette série d'articles, je vais vous aider à devenir un codeur Awk
compétent. Je l'admets, Awk n'a un nom ni très élégant, ni «&nbsp;cool&nbsp;»,
et la version GNU d'Awk, appelée gawk, a un nom complètement surnaturel. Ceux
qui ne sont pas familiers avec ce langage peuvent entendre «&nbsp;awk&nbsp;» et
penser à un langage compliqué et archaïque, capable de conduire le gourou Unix
le plus compétent au bord de la folie&nbsp;!
</p>

<p>
D'accord, Awk n'a pas un grand nom. Mais c'est un grand langage. Awk est
destiné au traitement de texte et à la génération de rapports, bien qu'il
présente de nombreuses fonctionnalités bien conçues pour programmer
sérieusement. Et à la différence de quelques langages, Awk a une syntaxe
familière et emprunte certaines des meilleures parties des langages tels que le
C, Python et Bash (bien que techniquement, Awk ait été créé avant Python et
Bash). Awk est l'un de ces langages qui, une fois appris, deviendra un outil
majeur de vos stratégies de développement.
</p>

</body>
</section>
<section>
<title>Le premier awk</title>
<body>

<pre caption="Le premier awk">
$ <i>awk '{ print }' /etc/passwd</i>
</pre>

<p>
Vous devez voir le contenu de votre fichier <path>/etc/passwd</path> apparaître
devant vos yeux. Maintenant, une explication de ce qu'awk fait. Quand nous
avons lancé awk, nous avons spécifié <path>/etc/passwd</path> comme fichier en
entrée. Quand nous avons exécuté awk, il a traité la commande print pour chaque
ligne de <path>/etc/passwd</path>, dans l'ordre. Tous les résultats ont été
envoyés vers stdout et nous obtenons un résultat identique à <c>cat</c>
<path>/etc/passwd</path>.
</p>

<p>
Maintenant, une explication du bloc de code { print }. Dans awk, les accolades
sont utilisées pour grouper des blocs de code ensemble, comme en C. À
l'intérieur de notre bloc de code, nous avons une simple commande
«&nbsp;print&nbsp;». Dans awk, quand une commande «&nbsp;print&nbsp;» apparaît
seule, le contenu complet de la ligne courante est affiché.
</p>

<pre caption="Afficher la ligne courante">
$ <i>awk '{ print $0 }' /etc/passwd</i>
$ <i>awk '{ print "" }' /etc/passwd</i>
</pre>

<p>
Dans awk, la variable $0 représente la ligne courante entière, donc
«&nbsp;print&nbsp;» et «&nbsp;print $0&nbsp;» donnent exactement la même chose.
</p>

<pre caption="Remplir l'écran avec du texte">
$ <i>awk '{ print "hiya" }' /etc/passwd</i>
</pre>

</body>
</section>
<section>
<title>Plusieurs champs</title>
<body>

<pre caption="print $1">
$ <i>awk -F":" '{ print $1 $3 }' /etc/passwd</i>
halt7
operator11
root0
shutdown6
sync5
bin1
<comment>etc.</comment>
</pre>

<pre caption="print $1 $3">
$ <i>awk -F":" '{ print $1 " " $3 }' /etc/passwd</i>
</pre>

<pre caption="$1$3">
$ <i>awk -F":" '{ print "username: " $1 "\t\tuid:" $3 }' /etc/passwd</i>
username: halt          uid:7
username: operator      uid:11
username: root          uid:0
username: shutdown      uid:6
username: sync          uid:5
username: bin           uid:1
<comment>etc.</comment>
</pre>

</body>
</section>
<section>
<title>Les scripts externes</title>
<body>

<pre caption="Exemple de script">
BEGIN { FS=":" }
{ print $1 }
</pre>

<p>
La différence entre ces deux méthodes est la façon dont nous avons précisé le
séparateur de champs «&nbsp;:&nbsp;». Dans ce script, le séparateur de champs
est spécifié à l'intérieur même du code (en renseignant la variable FS
«&nbsp;Field Separator&nbsp;»), alors que notre exemple précédent renseigne la
variable FS en utilisant l'option -F":" d'awk sur la ligne de commande. Il est
en général plus judicieux de renseigner le séparateur de champs à l'intérieur
du script même, simplement parce que vous avez ainsi un argument en ligne de
commande en moins à vous rappeler de taper. Nous aborderons la variable FS plus
en détail, ultérieurement dans cet article.
</p>

</body>
</section>
<section>
<title>Les blocs BEGIN et END</title>
<body>

<p>
Normalement, awk exécute chaque bloc du code de votre script une fois pour
chaque ligne en entrée. Cependant, dans de nombreuses situations en
programmation, vous pouvez avoir besoin d'exécuter du code d'initialisation
avant qu'awk ne commence à traiter le texte à partir du fichier en entrée. Pour
ces situations, awk permet de définir un bloc BEGIN. Nous avons utilisé un bloc
BEGIN dans l'exemple précédent. Parce que le bloc BEGIN est évalué avant qu'awk
ne commence à traiter le fichier d'entrée, c'est le meilleur endroit pour
initialiser la variable FS (séparateur de champs), afficher un en-tête, ou
initialiser d'autres variables globales que vous réutiliserez plus tard dans le
programme.
</p>

<p>
Awk fournit aussi un autre bloc spécial, appelé le bloc END. Awk exécute ce
bloc après que toutes les lignes du fichier d'entrée aient été traitées.
Généralement, le bloc END est utilisé pour réaliser des calculs finaux ou pour
afficher des résumés qui doivent apparaître à la fin du flux de sortie.
</p>

</body>
</section>
<section>
<title>Expressions rationnelles et blocs</title>
<body>

<pre caption="Expressions rationnelles et blocs">
/foo/ { print }
/[0-9]+\.[0-9]*/ { print }
</pre>

</body>
</section>
<section>
<title>Expressions et blocs</title>
<body>

<pre caption="fredprint">
$1 == "fred" { print $3 }
</pre>

<pre caption="root">
$5 ~ /root/ { print $3 }
</pre>

</body>
</section>
<section>
<title>Tests conditionnels</title>
<body>

<pre caption="if">
{ 
    if ( $5 ~ /root/ ) { 
        print $3 
    }
}
</pre>

<p>
Les deux scripts fonctionnent de la même façon. Dans le premier exemple,
l'expression booléenne est placée en dehors du bloc, alors que dans le second
exemple, le bloc est exécuté pour chaque ligne en entrée et nous avons
sélectivement réalisé la commande «&nbsp;print&nbsp;» en utilisant un test
«&nbsp;if&nbsp;». Les deux méthodes sont valables et vous pouvez choisir celle
qui est le plus en adéquation avec les autres parties de votre script.
</p>

<pre caption="if if">
{
    if ( $1 == "foo" ) {
        if ( $2 == "foo" ) {
            print "uno"
        } else {
            print "one"
        }
    } else if ($1 == "bar" ) {
        print "two"
    } else {
        print "three"
    }
}
</pre>

<pre caption="if">
! /matchme/ { print $1 $3 $4 }
</pre>

<pre caption="if">
{
    if ( $0 !~ /matchme/ ) {
        print $1 $3 $4
    }
}
</pre>

<p>
Les deux scripts n'affichent que les lignes ne contenant pas une séquence de de
caractères qui corresponde à «&nbsp;matchme&nbsp;». Ici encore, vous pouvez
choisir la méthode qui convient le mieux pour votre code. Les deux scripts font
la même chose&nbsp;:
</p>

<pre caption="Afficher les champs correspondant à foo et à bar">
( $1 == "foo" ) &amp;&amp; ( $2 == "bar" ) { print } 
</pre>

<p>
Cet exemple affiche seulement les lignes dont le premier champ vaut
«&nbsp;foo&nbsp;» et dont le deuxième champ vaut «&nbsp;bar&nbsp;».
</p>

</body>
</section>
<section>
<title>Variables numériques&nbsp;!</title>
<body>

<p>
Dans le bloc BEGIN, nous initialiserions une variable x à zéro. Alors, chaque
fois qu'awk rencontrerait une ligne vide, il exécuterait x=x+1, incrémentant x.
Après que toutes les lignes aient été traitées, le bloc END serait exécuté et
awk afficherait un résumé final spécifiant le nombre de lignes vides trouvées.
</p>

</body>
</section>
<section>
<title>Variables avec des caractères</title>
<body>

<pre caption="Exemple">
2.01
</pre>

<pre caption="1.01x$( )1.01">
{ print ($1^2)+1 }
</pre>

<p>
Si vous expérimentez un peu, vous verrez que si une variable ne contient pas un
nombre valide, awk traitera cette variable comme un zéro numérique quand il
évaluera votre expression mathématique.
</p>

</body>
</section>
<section>
<title>Plein d'opérateurs</title>
<body>

<p>
Une autre chose intéressante d'awk est son complément d'opérateurs
mathématiques. En plus de l'addition, soustraction, multiplication et
division, awk nous permet d'utiliser l'opérateur exposant «&nbsp;^&nbsp;»
utilisé précédemmment, l'opérateur modulo «&nbsp;%&nbsp;» (reste de division)
et d'autres opérateurs empruntés au C.
</p>

<p>
Cela inclut la pré et la post-incrémentation/decrémentation (i++, --foo), des
opérateurs d'assignation add/sub/mult/div (a+=3, b*=2, c/=2.2, d-=6.2). Mais ce
n'est pas tout&nbsp;: nous avons aussi les opérateurs d'assignation
modulo/exposant (a^=2, b%=4).
</p>

</body>
</section>
<section>
<title>Les séparateurs de champs</title>
<body>

<p>
Awk a son propre complément de variables spéciales. Certaines d'entre elles
vous permettent de bien peaufiner vos fonctions awk, alors que d'autres peuvent
être utilisées pour récupérer de l'information pertinente sur les données en
entrée. Nous avons déjà abordé une de ces variables spéciales, FS. Comme
mentionné précédemment, cette variable vous permet de préciser une séquence de
caractères qu'awk vise à trouver entre les champs. Quand nous utilisions
<path>/etc/passwd</path> en entrée, FS était à «&nbsp;:&nbsp;». Bien qu'il ait
fait son travail, FS nous permet encore plus de flexibilité.
</p>

<pre caption="Un autre séparateur de champ">
FS="\t+"
</pre>

<p>
Ci-dessus, nous utilisons le caractère spécial d'expression rationnelle
«&nbsp;+&nbsp;», qui signifie «&nbsp;une ou plusieurs occurrences du caractère
précédent&nbsp;».
</p>

<pre caption="Mettre une espace comme FS">
FS="[[:space:]+]"
</pre>

<p>
Bien que cet assignement fasse son travail, il n'est pas nécessaire.
Pourquoi&nbsp;? Parce que, par défaut, FS correspond à un simple caractère
d'espacement qu'awk interprète comme «&nbsp;une ou plusieurs espaces ou
tabulations&nbsp;». Dans cet exemple particulier, le paramètre par défaut de FS
est exactement ce que nous recherchions&nbsp;!
</p>

<pre caption="Exemple de séparateur de champ">
FS="foo[0-9][0-9][0-9]"
</pre>

</body>
</section>
<section>
<title>Nombre de champs</title>
<body>

<pre caption="Nombre de champs">
{
    if ( NF > 2 ) {
        print $1 " " $2 ":" $3 
    }
}
</pre>

</body>
</section>
<section>
<title>Nombre d'enregistrements</title>
<body>

<pre caption="Nombre d'enregistrements NR (Number of Records)">
{
    <comment># Nous ne voulons pas afficher l'en-tête</comment>
    if ( NR > 10 ) {
        print "ok, now for the real information!"
    }
}
</pre>

<p>
Awk fournit des variables supplémentaires qui peuvent être utilisées dans une
variété de situations. Nous aborderons la plupart de ces variables dans les
prochains articles.
</p>

<p>
Nous en sommes à la fin de notre première exploration d'Awk. Dans la suite de
cette série, je décrirai des fonctionnalités plus avancées d'Awk et nous
finirons la série avec une application Awk dans le monde réel. Dans le même
temps, si vous êtes désireux d'en apprendre plus, consultez les ressources
listées ci-dessous.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Ressources</title>
<section>
<title>Liens utiles</title>
<body>

<ul>
  <!--<li>
    Lisez les autres articles de Daniel sur awk sur
    developerWorks&nbsp;:&nbsp;Common threads: Awk by example, <uri
    link="l-awk2.xml">Part 2</uri> and <uri link="l-awk3.xml">Part 3</uri>.
  </li>-->
  <li>
    Si vous recherchez un bon vieux livre, O'Reilly's <uri
    link="http://www.oreilly.com/catalog/sed2/">sed &amp; awk, 2nd
    Edition</uri> est un très bon choix.
  </li>
  <li>
    Consultez aussi la <uri
    link="http://www.faqs.org/faqs/computer-lang/awk/faq/">FAQ
    comp.lang.awk</uri>. Elle contient de nombreux liens supplémentaires sur
    Awk.
  </li>
  <li>
    <uri link="http://sparky.rice.edu/~hartigan/awk.html">Awk tutorial</uri> de
    Patrick Hartigan est présenté avec des scripts awk avancés.
  </li>
  <li>
    <uri link="http://www.tasoft.com/tawk.html">Thompson's TAWK Compiler</uri>
    compile des scripts awk en exécutables binaires rapides. Des versions sont
    disponibles pour Windows, OS/2, DOS et UNIX.
  </li>
  <li>
    <uri link="http://www.gnu.org/software/gawk/manual/gawk.html">The GNU Awk
    User's Guide</uri> est disponible comme référence en ligne.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
