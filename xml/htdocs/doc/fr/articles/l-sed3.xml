<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/articles/l-sed3.xml,v 1.1 2009/10/18 15:22:27 cam Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide lang="fr" disclaimer="articles">
<title>Sed par l'exemple, 3e partie</title>

<author title="Auteur">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traducteur">
  <mail link="clefebvre.62@free.fr">Christophe Lefebvre</mail>
</author>

<abstract>
Dans cette conclusion d'une série d'articles sur Sed, Daniel Robbins vous donne
un réel aperçu de la puissance de Sed. Après une introduction sur des scripts
Sed pratiques et essentiels, il explique la réalisation d'un script Sed qui
convertit un fichier Quicken au format «&nbsp;.QIF&nbsp;» en un fichier texte
lisible. Ce script de conversion est non seulement opérationnel, mais il sert
aussi d'excellent exemple pour illustrer la puissance des scripts en Sed.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.3</version>
<date>2008-02-14</date>

<chapter>
<title>Passons au niveau suivant&nbsp;: Manipulations de données en Sed</title>
<section>
<title>Musclé ce Sed&nbsp;!</title>
<body>

<p>
Dans <uri link="l-sed2.xml">le deuxième article sur Sed</uri>, j'ai présenté
des exemples montrant le fonctionnement de Sed mais vraiment peu d'entre eux
ont réellement fait quelque chose de particulièrement utile. Dans ce dernier
article sur Sed, il est temps de voir une bonne utilisation de Sed et d'en
changer votre point de vue. Je vais vous montrer plusieurs exemples excellents
qui n'illustrent pas seulement la puissance de Sed mais qui font aussi des
choses ordonnées (et pratiques). Par exemple, dans la deuxième partie de cet
article, je vous montre comment j'ai réalisé un script Sed qui convertit un
fichier «&nbsp;.QIF&nbsp;» du programme financier Intuit Quicken en un fichier
texte proprement formaté. Avant de faire ça, nous allons nous intéresser à des
scripts Sed utiles encore un peu plus complexes.
</p>

</body>
</section>
<section>
<title>Ré-encodage de texte</title>
<body>

<p>
Notre premier script convertit un texte du format UNIX vers le format
DOS/Windows. Comme vous le savez sans doute, les fichiers texte au format
DOS/Windows ont un CR (Carriage Return, un «&nbsp;retour chariot&nbsp;» ) et un
LF (Line Feed, un «&nbsp;saut de ligne&nbsp;») à la fin de chaque ligne, alors
qu'un texte UNIX a seulement un saut de ligne.
Il peut arriver que vous ayez besoin de transférer du texte UNIX vers un système
Windows et le script suivant va réaliser pour vous la conversion nécessaire.
</p>

<pre caption="Conversion de format UNIX vers le format Windows">
$ <i>sed -e 's/$/\r/' mon_fichier_unix.txt > mon_fichier_dos.txt</i>
</pre>

<p>
Dans ce script, l'expression régulière «&nbsp;$&nbsp;» correspond à la fin de la
ligne et le «&nbsp;\r&nbsp;» indique à Sed d'insérer juste avant un retour
chariot&nbsp;: insère un retour chariot avant un saut de ligne donc chaque
ligne se terminera par un «&nbsp;CR/LF&nbsp;». Veuillez noter que le
«&nbsp;\r&nbsp;» est remplacé seulement par un CR «&nbsp;retour chariot&nbsp;»
depuis les versions 3.02.80 et ultérieures de GNU Sed. Si vous n'avez pas encore
installé GNU Sed, les instructions pour le faire sont dans
<uri link="l-sed1.xml">mon premier article sur Sed</uri>.
</p>

<p>
Je ne peux pas vous dire le nombre de fois où j'ai téléchargé des exemples de
script ou du code en langage C pour constater qu'ils étaient au format
DOS/Windows.  Alors que beaucoup de programmes ne sont pas préoccupés par les
fichiers textes DOS/Windows au format CR/LF, d'autres programmes le sont&nbsp;:
le plus notable reste Bash, perturbé dès qu'il rencontre un retour chariot.
L'invocation suivante de Sed convertit le texte au format DOS/Windows vers le
format UNIX&nbsp;:
</p>

<pre caption="Conversion de format Windows vers le format UNIX">
$ <i>sed -e 's/.$//' mon_fichier_dos.txt > mon_fichier_unix.txt</i>
</pre>

<p>
La façon dont ce script fonctionne est simple&nbsp;: notre expression régulière
de substitution recherche le dernier caractère de la ligne qui est suivi d'un
retour chariot. Nous le remplaçons avec rien, ce qui induit sa suppression lors
de la substitution. Si vous utilisez ce script et que vous remarquez que le
dernier caractère de chaque ligne du fichier produit a été supprimé, c'est que
vous avez spécifié un fichier texte qui était déjà au format UNIX. Pas besoin de
ça&nbsp;!
</p>

</body>
</section>
<section>
<title>Inverser des lignes</title>
<body>

<p>
Voici un autre petit script pratique. Il inverse les lignes d'un fichier tout
comme le fait la commande «&nbsp;tac&nbsp;» qui est incluse dans la plupart des
distributions Linux. Le nom «&nbsp;tac&nbsp;» peut être un peu trompeur parce
que «&nbsp;tac&nbsp;» n'inverse pas la position des caractères sur la ligne
(gauche et droite) mais la position des lignes dans le fichier (en haut et en
bas). Appliquer la commande «&nbsp;tac&nbsp;» sur le fichier suivant&nbsp;:
</p>

<pre caption="Exemple de fichier">
foo
bar
oni
</pre>

<p>
... produit le résultat suivant&nbsp;:
</p>

<pre caption="Résultat obtenu">
oni
bar
foo
</pre>

<p>
Nous pouvons faire la même chose avec le script Sed suivant&nbsp;:
</p>

<pre caption="Faisons la même chose avec un script Sed">
$ <i>sed -e '1!G;h;$!d' fichier_a_l_endroit.txt > fichier_inverse.txt</i>
</pre>

<p>
Vous trouverez ce script Sed utile si vous êtes sur un système FreeBSD qui n'a
pas la commande «&nbsp;tac&nbsp;». Bien que ce soit pratique, c'est aussi une
bonne idée de savoir ce que ce script fait. Dissectons-le&nbsp;!
</p>

</body>
</section>
<section>
<title>Explication de l'inversion</title>
<body>

<p>
Tout d'abord, ce script contient trois commandes Sed séparées par des
points-virgules&nbsp;: «&nbsp;1!G&nbsp;», «&nbsp;h&nbsp;» et «&nbsp;$!d&nbsp;».
À présent, il est temps de bien comprendre les adresses utilisées pour la
première et la troisième commande. Si la première commande était
«&nbsp;1G&nbsp;», la commande «&nbsp;G&nbsp;» devrait être uniquement appliquée
à la première ligne. Cependant, il y a un caractère supplémentaire
«&nbsp;!&nbsp;». Celui-ci nie l'adresse ce qui signifie que la commande
«&nbsp;G&nbsp;» s'appliquera à tout excepté à la première ligne. Pour la
commande «&nbsp;$!d&nbsp;», nous avons un cas similaire. Si la commande était
«&nbsp;$d&nbsp;», elle s'appliquerait seulement sur la dernière ligne du fichier
(l'adresse «&nbsp;$&nbsp;» est moyen simple de spécifier la dernière ligne).
Cependant, avec le «&nbsp;!&nbsp;», «&nbsp;$!d&nbsp;» applique la commande
«&nbsp;d&nbsp;» à tout excepté à la dernière ligne. Maintenant, tout ce dont
nous avons besoin est de comprendre comment interagissent ces commandes.
</p>

<p>
Sed applique les trois commandes sur chaque ligne du fichier.
</p>

<p>
Première ligne («&nbsp;foo&nbsp;»)&nbsp;: La première commande
«&nbsp;1!G&nbsp;» n'a aucun effet puisqu'elle applique la commande
«&nbsp;G&nbsp;» sur tout le fichier excepté sur la première ligne. La deuxième
commande «&nbsp;h&nbsp;» dit à Sed de copier le contenu de l'espace de travail
(ce qui est en cours de traitement soit «&nbsp;foo&nbsp;») vers un espace de
stockage temporaire (buffer). La troisième commande «&nbsp;d&nbsp;» supprime
«&nbsp;foo&nbsp;» de l'espace de travail (car après chaque série de commandes,
le contenu de l'espace de travail est affiché vers l'écran ou redirigé vers un
fichier).
</p>

<p>
Deuxième ligne («&nbsp;bar&nbsp;»)&nbsp;: La première commande «&nbsp;G&nbsp;»
ajoute le contenu de l'espace de stockage temporaire («&nbsp;foo\n&nbsp;») à
l'espace de travail («&nbsp;bar\n&nbsp;»). Notre espace de travail contient à
présent «&nbsp;bar\nfoo\n&nbsp;». La deuxième commande «&nbsp;h&nbsp;» copie le
contenu de notre espace de travail dans notre espace de stockage temporaire. La
troisième commande «&nbsp;d&nbsp;» supprime le contenu de l'espace de travail
pour que rien ne soit affiché à l'écran ou redirigé vers un fichier).
</p>

<p>
Troisième et dernière ligne («&nbsp;oni&nbsp;»)&nbsp;: Les mêmes étapes sont
répétées excepté que le contenu de l'espace de travail n'est pas supprimé (car
«&nbsp;$!&nbsp;» avant le «&nbsp;d&nbsp;» signifie que la commande de
suppression de l'espace de travail n'est pas appliqué lors du traitement de la
dernière ligne). Dans le cas présent, le contenu de l'espace de travail
«&nbsp;oni\nbar\n\foo&nbsp;» est redirigé vers le fichier fichier_inverse.txt.
</p>

<p>
Maintenant, il est l'heure de réaliser de la conversion de données encore
plus puissante avec Sed&nbsp;!
</p>

</body>
</section>
<section>
<title>Sed, digne d'un tour de magie sur un fichier au format QIF</title>
<body>

<p>
Ces dernières semaines, j'ai pensé à acheter Quicken pour équilibrer mes
comptes bancaires. Quicken est un très bon programme financier et effectuerait
certainement le travail avec plus qu'il n'en faut. Mais en y repensant, j'ai
décidé qu'il serait facile de de développer un logiciel qui équilibrerait mon
livre de comptes. Après avoir raisonné, je me suis dit que j'étais un
développeur de logiciel&nbsp;!
</p>

<p>
J'ai développé un petit programme d'équilibrage de livre de comptes (en
utilisant Awk) qui calcule ma balance en traitant un fichier texte qui
contient toutes mes transactions. Après un peu d'optimisations, je l'ai
amélioré de sorte que je peux maintenir différentes rubriques de crédit et de
débit comme Quicken peut le faire. Mais, il y avait une fonctionnalité que je
souhaitais ajouter. J'ai transféré mes comptes vers une banque qui a une
interface de gestion des comptes en ligne sur Internet. Un jour, j'ai remarqué
que le site Internet de ma banque me permettait de télécharger les informations
de mon compte au format Quicken «&nbsp;.QIF&nbsp;». En vraiment très peu de
temps, j'ai décidé que ce serait vraiment pratique si je pouvais convertir ces
informations au format texte.
</p>

</body>
</section>
<section>
<title>La belle histoire de deux formats de fichiers</title>
<body>

<p>
Avant de nous intéresser au format QIF, voici à quoi ressemble mon livre de
compte&nbsp;:
</p>

<pre caption="Exemple d'un fichier au format QIF">
28 Aug 2000     food          -       -       Y     Supermarché           30.94
25 Aug 2000     watr          -       103     Y     Chèque n°103          52.86
</pre>

<p>
Dans mon fichier, tous les champs sont séparés par une ou plusieurs
tabulations avec une transaction par ligne. Après la date, le champ suivant
indique le type de dépense (ou «&nbsp;-&nbsp;» si c'est un revenu. Le troisième
champ indique le type de revenu (ou «&nbsp;-&nbsp;» si c'est une dépense). Puis,
il y a un champ pour le numéro de chèque («&nbsp;-&nbsp;» s'il n'est pas
renseigné), un champ de vérification de la transaction («&nbsp;Y&nbsp;» ou
«&nbsp;N&nbsp;»), un commentaire et un montant en dollar.
Maintenant, nous sommes prêt à nous intéresser au format QIF. Quand j'ai
regardé mon fichier QIF téléchargé avec un éditeur de texte, voici ce que j'ai
vu&nbsp;:
</p>

<pre caption="Affichage du fichier QIF, peu pratique à lire...">
!Type:Bank
D08/28/2000
T-8.15
N
PCHECKCARD SUPERMARKET
^
D08/28/2000
T-8.25
N
PCHECKCARD PUNJAB RESTAURANT
^
D08/28/2000
T-17.17
N
PCHECKCARD SUPERMARKET
</pre>

<p>
Après avoir parcouru le fichier, il n'est pas très difficile d'en identifier le
format. Ignorons juste la première ligne, le format de ce fichier est le
suivant&nbsp;:
</p>

<pre caption="Format du fichier">
D&lt;date&gt;
T&lt;montant de la transaction&gt;
N&lt;numéro de chèque&gt;
P&lt;description&gt;
^
<comment>(«&nbsp;^&nbsp;» est le séparateur de champ)</comment>
</pre>

</body>
</section>
<section>
<title>Débutons le traitement</title>
<body>

<p>
Quand vous abordez un tel projet avec Sed, ne soyez pas découragé&nbsp;! Sed
permet de manipuler pas à pas des données jusqu'à parvenir au résultat souhaité.
Au fur et à mesure que vous progressez, vous pouvez continuer d'améliorer votre
script Sed jusqu'à ce que le résultat ressemble exactement à ce que vous
attendiez. Vous n'avez pas besoin d'y arriver dès votre premier essai.
</p>

<p>
Tout d'abord, j'ai créé un fichier que j'ai appelé <path>qiftrans.sed</path> et
j'ai commencé à traiter les données&nbsp;:
</p>

<pre caption="qiftrans.sed">
1d
/^^/d
s/[[:cntrl:]]//g
</pre>

<p>
La première commande «&nbsp;1d&nbsp;» supprime la première ligne. La seconde
commande supprime les caractères gênants «&nbsp;^&nbsp;». La dernière ligne
supprime tous les caractères de contrôle qui peuvent exister dans le fichier.
Comme je traite un fichier avec un format de fichier inconnu, je veux éliminer
le risque de rencontrer n'importe quel caractère de contrôle. Maintenant,
consacrons un peu d'énergie à notre script de base&nbsp;:
</p>

<pre caption="Script de base amélioré">
1d
/^^/d
s/[[:cntrl:]]//g
/^D/ {
  s/^D\(.*\)/\1\tOUTY\tINNY\t/
        s/^01/Jan/
        s/^02/Feb/
        s/^03/Mar/
        s/^04/Apr/
        s/^05/May/
        s/^06/Jun/
        s/^07/Jul/
        s/^08/Aug/
        s/^09/Sep/
        s/^10/Oct/
        s/^11/Nov/
        s/^12/Dec/
        s:^\(.*\)/\(.*\)/\(.*\):\2 \1 \3:
}
</pre>

<p>
Tout d'abord, j'ajoute une adresse «&nbsp;/^D/&nbsp;» pour que Sed commence
seulement à traiter lorsqu'il rencontre le premier caractère du champ de date
QIF, «&nbsp;D&nbsp;».  Toutes les commandes incluses dans les accolades
(«&nbsp;{ (...) }&nbsp;») seront exécutés dans l'ordre dès que Sed lira une
ligne dans son espace de travail.
</p>

<p>
La première ligne incluse dans les accolades transforme une ligne comme
celle-ci &nbsp;:
</p>

<pre caption="La première ligne avant modification">
D08/28/2000
</pre>

<p>
en une ligne qui ressemble à ça&nbsp;:
</p>

<pre caption="La première ligne après modification">
08/28/2000  OUTY  INNY
</pre>

<p>
Bien sûr, ce format n'est pas encore parfait mais c'est déjà ça. Nous allons
progressivement améliorer le contenu de l'espace de lecture. Les 12 prochaines
lignes ont pour effet de transformer la date en un format de trois lettres avec
la dernière ligne qui supprime les trois barres obliques de la date. Nous
terminons avec cette ligne&nbsp;:
</p>

<pre caption="Résultat final de la ligne">
Aug 28 2000  OUTY  INNY
</pre>

<p>
Les champs «&nbsp;OUTY&nbsp;» et «&nbsp;INNY&nbsp;» servent de textes
intermédiaires et seront remplacés ultérieurement. Je ne peux pas encore les
renseigner car si le montant en dollars est positif, je veux les changer
respectivement en «&nbsp;-&nbsp;» et «&nbsp;inco&nbsp;». Puisque le montant en
dollars n'a pas encore été lu, j'ai besoin d'utiliser des textes intermédiaires
pour l'instant.
</p>

</body>
</section>
<section>
<title>Améliorations</title>
<body>

<p>
Il est l'heure pour quelques améliorations supplémentaires&nbsp;:
</p>

<pre caption="Améliorations supplémentaires">
1d
/^^/d
s/[[:cntrl:]]//g
/^D/ {
        s/^D\(.*\)/\1\tOUTY\tINNY\t/
        s/^01/Jan/
        s/^02/Feb/
        s/^03/Mar/
        s/^04/Apr/
        s/^05/May/
        s/^06/Jun/
        s/^07/Jul/
        s/^08/Aug/
        s/^09/Sep/
        s/^10/Oct/
        s/^11/Nov/
        s/^12/Dec/
        s:^\(.*\)/\(.*\)/\(.*\):\2 \1 \3:
        N
        N
        N
        s/\nT\(.*\)\nN\(.*\)\nP\(.*\)/NUM\2NUM\t\tY\t\t\3\tAMT\1AMT/
        s/NUMNUM/-/
        s/NUM\([0-9]*\)NUM/\1/
        s/\([0-9]\),/\1/
}
</pre>

<p>
Les sept dernières lignes du listing ci-dessus sont un peu plus compliquées, je
vais donc les expliquer en détails. Tout d'abord, nous avons une série de trois
commandes «&nbsp;N&nbsp;». La commande «&nbsp;N&nbsp;» dit à Sed de lire
la ligne suivante et de l'ajouter à l'espace de travail. Les trois commandes
«&nbsp;N&nbsp;» ajoutent les trois lignes suivantes à notre espace temporaire
de stockage. Notre ligne ressemble désormais à ça&nbsp;:
</p>

<pre caption="Aperçu du résultat obtenu">
28 Aug 2000  OUTY  INNY  \nT-8.15\nN\nPCHECKCARD SUPERMARKET
</pre>

<p>
Le résultat affiché par Sed est devenu laid&nbsp;! Nous avons besoin de
supprimer les caractères inutiles de nouvelle ligne «&nbsp;\n&nbsp;» et de
réaliser encore un peu de formatage supplémentaire. Pour cela, nous allons
utiliser la commande de substitution.  Le motif que nous voulons rechercher est
le suivant&nbsp;:
</p>

<pre caption="Supprimer des caractères de nouvelle ligne et appliquer un peu de
formattage supplémentaire">
'\nT.*\nN.*\nP.*'
</pre>

<p>
Cette expression recherche une nouvelle ligne suivie par un «&nbsp;T&nbsp;»,
par zéro ou plusieurs caractères, par une nouvelle ligne, par un
«&nbsp;N&nbsp;», par n'importe quel nombre de caractères, par une nouvelle
ligne, par un «&nbsp;P&nbsp;» et enfin suivi par un nombre quelconque de
caractères. Ouf&nbsp;! Cette expression régulière recherche sur le contenu
entier des trois lignes qui ont juste été ajoutées dans l'espace de travail.
Mais nous voulons reformater cette section et non pas la remplacer entièrement.
Le montant en dollars, éventuellement le numéro de chèque et la description
doivent réapparaître dans notre chaîne de caractères de remplacement. Pour cela,
nous entourons ces parties intéressantes avec des parenthèses backslashées ainsi
nous pourrons nous y référer facilement dans notre chaîne de caractères de
remplacement (en utilisant «&nbsp;\1&nbsp;», «&nbsp;\2&nbsp;» et
«&nbsp;\3&nbsp;» pour dire à Sed où les insérer). Voici la commande
complète&nbsp;:
</p>

<pre caption="La commande complète">
s/\nT\(.*\)\nN\(.*\)\nP\(.*\)/NUM\2NUM\t\tY\t\t\3\tAMT\1AMT/
</pre>

<p>Cette commande transforme notre ligne en&nbsp;:
</p>

<pre caption="Résultat de la commande précédente">
28 Aug 2000  OUTY  INNY  NUMNUM    Y     CHECKCARD SUPERMARKET AMT-8.15AMT
</pre>

<p>
Tandis que cette ligne se présente de mieux en mieux, il y a encore quelques
petites choses qui nous paraissent peu intéressantes... La première est cette
chaîne de caractères étrange «&nbsp;NUMNUM&nbsp;». À quoi sert-elle&nbsp;?
Vous le découvrirez quand vous inspecterez les deux lignes suivantes de notre
script Sed qui remplace «&nbsp;NUMNUM&nbsp;» par un «&nbsp;-&nbsp;» et
«&nbsp;NUM&lt;nombre&gt;NUM&nbsp;» par «&nbsp;&lt;nombre&gt;&nbsp;». Comme
vous pouvez le voir, entourer le numéro de chèque avec une balise quelconque
nous permet d'insérer de façon pratique un «&nbsp;-&nbsp;» si le champ est
vide.
</p>

</body>
</section>
<section>
<title>Finitions</title>
<body>

<p>
La dernière ligne supprime une virgule qui suit un nombre. Cela convertit les
montants en dollars comme «&nbsp;3,231.00&nbsp;» en «&nbsp;3231.00&nbsp;» qui
est le format que j'utilise. Maintenant, regardons notre script finalisé&nbsp;:
</p>

<pre caption="Le script finalisé">
1d
/^^/d
s/[[:cntrl:]]//g
/^D/ {
  s/^D\(.*\)/\1\tOUTY\tINNY\t/
  s/^01/Jan/
  s/^02/Feb/
  s/^03/Mar/
  s/^04/Apr/
  s/^05/May/
  s/^06/Jun/
  s/^07/Jul/
  s/^08/Aug/
  s/^09/Sep/
  s/^10/Oct/
  s/^11/Nov/
  s/^12/Dec/
  s:^\(.*\)/\(.*\)/\(.*\):\2 \1 \3:
  N
  N
  N
  s/\nT\(.*\)\nN\(.*\)\nP\(.*\)/NUM\2NUM\t\tY\t\t\3\tAMT\1AMT/
  s/NUMNUM/-/
  s/NUM\([0-9]*\)NUM/\1/
  s/\([0-9]\),/\1/
  /AMT-[0-9]*.[0-9]*AMT/b fixnegs
  s/AMT\(.*\)AMT/\1/
  s/OUTY/-/
  s/INNY/inco/
  b done
:fixnegs
  s/AMT-\(.*\)AMT/\1/
  s/OUTY/misc/
  s/INNY/-/
:done
}
</pre>

<p>
Les onze lignes supplémentaires utilisent la substitution et quelques commandes
de renvoi pour améliorer le résultat obtenu. Nous allons tout d'abord nous
intéresser à cette ligne&nbsp;:
</p>

<pre caption="Première ligne intéressante à regarder">
        /AMT-[0-9]*.[0-9]*AMT/b fixnegs
</pre>

<p>
Cette ligne contient une commande de «&nbsp;renvoi&nbsp;» qui est au format
«&nbsp;/expression_régulière/b étiquette&nbsp;». Si l'espace de lecture
correspond à l'expression régulière, Sed saute à l'étiquette
«&nbsp;fixnegs&nbsp;». Vous devriez repérer facilement cette étiquette qui
apparaît en «&nbsp;:fixnegs&nbsp;» dans le code. Si l'expression régulière ne
correspond pas, le traitement continue normalement avec la prochaine commande.
</p>

<p>
Maintenant que vous avez compris le fonctionnement de la commande elle-même,
jetons un coup d'œil aux renvois. Si vous regardez l'expression régulière de
renvoi vous voyez qu'elle recherche la chaîne «&nbsp;AMT&nbsp;» suivie par un
«&nbsp;-&nbsp;» suivi par un nombre de chiffres, un «&nbsp;.&nbsp;», un nombre
de chiffres et «&nbsp;AMT&nbsp;». Je suis sûr que vous avez compris que cette
expression régulière traite spécifiquement un montant négatif en dollars.
Précédemment, nous avons entouré notre montant en dollars avec des chaînes de
caractères «&nbsp;AMT&nbsp;» pour que nous puissions facilement les retrouver.
Parce que l'expression régulière recherche uniquement des montants en dollars
commençant par un «&nbsp;-&nbsp;», notre renvoi se produit uniquement si nous
sommes en train de traiter un débit. Si nous traitons un débit, OUTY doit être
placé à «&nbsp;misc&nbsp;», INNY doit être placé à «&nbsp;-&nbsp;» et le signe
négatif avant le montant du débit doit être supprimé. Si vous suivez le code,
vous verrez que c'est exactement ce qui se produit. Si le renvoi n'est pas
exécuté, OUTY est remplacé par «&nbsp;-&nbsp;» et INNY est remplacé par
«&nbsp;inco&nbsp;». Nous avons terminé&nbsp;! Notre résultat est maintenant
parfait&nbsp;:
</p>

<pre caption="La ligne de résultat parfaite">
28 Aug 2000  misc  -  -       Y     CHECKCARD SUPERMARCHÉ  -8.15
</pre>

</body>
</section>
<section>
<title>Ne soyez pas perdu</title>
<body>

<p>
Comme vous pouvez le voir, convertir des données en utilisant Sed n'est pas si
difficile que ça, d'autant plus si vous approchez le problème par étapes.
N'essayez pas de tout faire avec une seule commande Sed ou tout d'un coup. Au
lieu de ça, travaillez progressivement jusqu'au but et continuez à améliorer
votre script Sed jusqu'à ce que le résultat obtenu soit ce que vous souhaitiez.
Sed est plein d'énergie et j'espère que vous deviendrez bientôt très familier
avec son fonctionnement interne et que vous continuerez à vous développer dans
la maîtrise de Sed&nbsp;!
</p>

<ul>
  <li>
    Consultez les autres articles de Daniel de developerWorks&nbsp;: Sed par
    l'exemple, <uri link="l-sed1.xml">1re partie</uri> et <uri
    link="l-sed2.xml">3e partie</uri>.
  </li>
  <li>
    Consultez cette excellente <uri
    link="http://sed.sourceforge.net/sedfaq.html">FAQ sur Sed</uri>, d'Eric
    Pement.
  </li>
  <li>
    Vous trouverez la version la plus récente de Sed sur <uri>
    ftp://ftp.gnu.org/pub/gnu/sed</uri>.
  </li>
  <li>
    Eric Pement propose également une <uri
    link="http://sed.sourceforge.net/sed1line.txt">feuille de triche sur Sed
    </uri> que n'importe quel futur Gourou de Sed devrait certainement
    consulter.
  </li>
<!-- FIXME BOTH DEAD and no other locations, sorry
  <li>
    Maybe you'd like to read <uri
    link="http://www.softlab.ntua.gr/unix/docs/sed.txt">7th edition UNIX's sed
    man page</uri> (circa 1978!).
  </li>
  <li>
    Take Felix von Leitner's short <uri
    link="http://www.math.fu-berlin.de/~leitner/sed/tutorial.html">sed
    tutorial</uri>.
  </li>
-->
<!-- DEAD link
  <li>
    Brush up on <uri link="http://vision.eng.shu.ac.uk/C++/misc/regexp/">using
    regular expressions</uri> to find and modify patterns in text in this free,
    dW-exclusive tutorial.
  </li>
  -->
</ul>

</body>
</section>
</chapter>
</guide>
