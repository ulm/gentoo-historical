<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/keychain-guide.xml,v 1.5 2013/06/23 10:01:16 swift Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide lang="fr">
<title>Guide de Keychain pour Gentoo Linux</title>

<author title="Auteur">
  <mail link="eric.brown@dnbrown.net">Eric Brown</mail>
</author>
<author title="Correcteur">
  <mail link="vanquirius"/>
</author>
<author title="Correcteur">
  <mail link="nightmorph"/>
</author>
<author title="Traducteur">
  <mail link="ribosome"/>
</author>
<author title="Traducteur">
  <mail link="titefleur"/>
</author>
<author title="Traducteur">
  <mail link="jaaf.forums@zoraldia.com">José Fournier</mail>
</author>

<abstract>
Ce guide décrit comment utiliser des clés SSH partagées en conjonction avec le
programme keychain. Une connaissance de base de la cryptographie par clé
publique est assumée.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>2</version>
<date>2010-12-16</date>

<chapter>
<title>Contexte</title>
<section>
<title>Le problème à résoudre</title>
<body>

<p>
Peut-être disposez-vous d'un ensemble bien réjouissant d'ordinateurs qui
utilisent tous Gentoo Linux. Si c'est le cas, vous exécutez probablement
<c>sshd</c> sur ces ordinateurs, mais n'est-ce pas lassant de devoir toujours
taper un mot de passe pour ouvrir une session à distance&nbsp;? Peut-être
avez-vous écrit un script ou une commande cron qui nécessiterait une connexion
SSH qui puisse être établie sans taper de mot de passe. Il existe une solution
à ces problèmes&nbsp;: utiliser l'authentification par clé publique.
</p>

</body>
</section>
<section>
<title>Comment l'authentification par clé publique
fonctionne-t-elle&nbsp;?</title>
<body>

<p>
Considérons le cas d'un client qui souhaite se connecter à un serveur sshd. Le
client génère d'abord une paire de clés et donne la clé publique au serveur.
Ensuite, à chaque fois que le client tente de se connecter, le serveur lui
soumet un «&nbsp;défi&nbsp;» chiffré par le biais de la clé publique. Seul le
détenteur de la clé privée correspondante (soit le client) est capable de le
déchiffrer. Comme vous l'avez sans doute deviné, une réponse correcte au
«&nbsp;défi&nbsp;» lancé par le serveur permet l'authentification.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Comment utiliser l'authentification par clé publique&nbsp;?</title>
<section>
<title>Générer votre paire de clés</title>
<body>

<p>
La première étape est la création de votre paire de clés. Pour ce faire,
utilisons la commande <c>ssh-keygen</c> comme suit&nbsp;:
</p>

<pre caption="générer une paire de clés">
$ <i>ssh-keygen -t dsa</i>
<comment>(Acceptez les valeurs proposées par défaut et assurez-vous d'utiliser une phrase de passe robuste.)</comment>
</pre>

<warn>
il est très important d'utiliser une phrase de passe robuste, particulièrement
si la clé sera utilisée pour se connecter en tant que superutilisateur
(root)&nbsp;!
</warn>

<p>
Vous devriez maintenant disposer d'une clé privée dans le fichier
<path>~/.ssh/id_dsa</path> et d'une clé publique dans
<path>~/.ssh/id_dsa.pub</path>. Nous somme prêts à copier la clé publique sur
l'hôte distant.
</p>

</body>
</section>
<section>
<title>Préparer le serveur</title>
<body>

<p>
Nous allons copier le fichier <path>~/.ssh/id_dsa.pub</path> sur le serveur
qui exécute sshd. Nous allons aussi ajouter cette clé au fichier
<path>~/.ssh/authorized_keys</path> qui appartient à l'utilisateur dont on
utilise le compte pour la connexion. Voici un exemple que vous pouvez utiliser
si vous disposez déjà d'un accès SSH vers l'hôte distant.
</p>

<pre caption="copier la clé publique sur le serveur">
$ <i>scp ~/.ssh/id_dsa.pub nom_utilisateur@serveur:~/myhost.pub</i>
$ <i>ssh nom_utilisateur@serveur "cat ~/myhost.pub >> ~/.ssh/authorized_keys"</i>
$ <i>ssh nom_utilisateur@serveur "cat ~/.ssh/authorized_keys"</i>
</pre>

<p>
La sortie de la dernière commande liste le contenu du fichier
<path>~/.ssh/authorized_keys</path>. Assurez-vous qu'il contient les bonnes
informations.
</p>

</body>
</section>
<section>
<title>Tester la configuration</title>
<body>

<p>
Si tout s'est bien passé et que le serveur distant le permet, vous devriez
être capable de vous connecter par SSH au serveur sans fournir de mot de passe
utilisateur. Vous devrez tout de même déchiffrer la clé privée située sur le
client à l'aide de la phrase de passe définie plus tôt, mais ce n'est pas la
même chose que de taper le mot de passe utilisateur.
</p>

<pre caption="tester les clés">
$ <i>ssh nom_utilisateur@serveur</i>
</pre>

<p>
Si tout va bien, vous aurez à taper votre phrase de passe pour id_dsa, puis
vous obtiendrez l'accès par SSH au serveur. Si ce n'est pas le cas,
connectez-vous à l'hôte distant (en utilisant le même compte utilisateur) et
vérifiez le contenu du fichier <path>~/.ssh/authorized_keys</path>&nbsp;;
assurez-vous que chaque entrée est sur une ligne séparée. Vous souhaiterez
peut-être aussi vérifier la configuration de sshd pour vous assurer que ce
dernier favorise l'authentification par clé publique dès que cela est possible.
</p>

<p>
À ce point, vous vous demandez peut-être&nbsp;: «&nbsp;À quoi cela
rime-t-il&nbsp;? Je n'ai qu'échangé un mot de passe pour un
autre&nbsp;!&nbsp;» La prochaine section répond à cette interrogation en vous
montrant comment éviter la saisie d'un mot de passe et ainsi économiser un
temps précieux.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Rendre l'authentification par clé publique plus pratique</title>
<section>
<title>Gestion des clés avec ssh-agent</title>
<body>

<p>
Si vous avez suivi les instructions qui précèdent, vous pensez sans doute
qu'il serait bien pratique de ne déchiffrer notre clé privée qu'une seule fois,
puis d'utiliser SSH librement sans avoir à taper de mot de passe. C'est
exactement la fonction du programme <c>ssh-agent</c>.
</p>

<p>
<c>ssh-agent</c> est habituellement lancé au début de votre session X ou à
partir d'un script shell tel que <path>~/.bash_profile</path>. Il fonctionne
en créant un socket UNIX et en paramétrant les variables d'environnement
nécessaires pour que d'autres programmes puissent utiliser le service en se
connectant au socket. Bien sûr, il est absolument nécessaire de lancer ce
programme dans le processus parent de votre session X si vous souhaitez que
vos applications X aient accès aux clés déchiffrées.
</p>

<pre caption="préparer ssh-agent">
$ <i>ssh-agent</i>
</pre>

<note>
lancé ainsi, ssh-agent conservera vos clés déchiffrées jusqu'à ce qu'il soit
arrêté. Si vous souhaitez définir une limite de temps pendant lequel les clés
sont conservées, utilisez l'option -t telle que décrite dans la page man du
programme (<c>man ssh-agent</c>).
</note>

<p>
Lorsque ssh-agent est exécuté, il devrait afficher le numéro d'identification
de son processus (PID) et paramétrer quelques variables d'environnement, dont
<c>SSH_AUTH_SOCK</c> et <c>SSH_AGENT_PID</c>.  Il devrait aussi ajouter
<path>~/.ssh/id_dsa</path> à son ensemble de clés automatiquement, et vous
demander la phrase de passe correspondante. Si vous souhaitez ajouter d'autres
clés privées à ssh-agent, vous pouvez utiliser la commande <c>ssh-add</c>
comme suit&nbsp;:
</p>

<pre caption="ajouter de nouvelles clés à ssh-agent">
$ <i>ssh-add fichier_contenant_une_clé</i>
</pre>

<p>
Voici le clou du spectacle. Puisque votre clé privée est maintenant déchiffrée,
vous devriez pouvoir vous connecter au serveur par SSH sans avoir à entrer de
mot de passe.
</p>

<pre caption="SSH sans mot de passe">
$ <i>ssh serveur</i>
</pre>

<p>
Bien sûr, vous devriez aussi savoir comment arrêter ssh-agent si besoin est.
</p>

<pre caption="arrêter ssh-agent">
$ <i>ssh-agent -k</i>
</pre>

<note>
si vous avez eu des problèmes pour faire fonctionner ssh-agent, peut-être
qu'il sera encore actif. Vous pouvez l'arrêter comme n'importe quel autre
processus en exécutant <c>killall ssh-agent</c>.
</note>

<p>
Si vous souhaitez augmenter le niveau de confort fourni par ssh-agent,
continuez votre lecture avec la section sur l'utilisation de keychain.
Assurez-vous toutefois d'arrêter ssh-agent tel que décrit ci-dessus avant de
poursuivre.
</p>

</body>
</section>
<section>
<title>Profiter de toutes les possibilités de ssh-agent</title>
<body>

<p>
Le programme keychain permet de réutiliser une instance de ssh-agent dans des
sessions différentes et, si désiré, d'inviter l'utilisateur à entrer les
phrases de passe à chaque ouverture de session. Avant d'aller plus loin,
installons keychain.
</p>

<pre caption="installer keychain">
# <i>emerge keychain</i>
</pre>

<p>
Si cette commande s'exécute sans problème, vous pouvez alors utiliser keychain
sans plus attendre. Ajoutez ce qui suit à votre <path>~/.bash_profile</path>
pour activer keychain&nbsp;:
</p>

<pre caption="activer keychain dans .bash_profile">
keychain ~/.ssh/id_dsa
. ~/.keychain/$HOSTNAME-sh
. ~/.keychain/$HOSTNAME-sh-gpg
</pre>

<note>
vous pouvez ajouter davantage de clés privées à cette commande si vous le
désirez. Si vous souhaitez être interrogé pour fournir les phrases de passe à
chaque fois qu'un shell est lancé, ajoutez l'option --clear.
</note>

<note>
si vous n'utilisez pas bash, consultez la section <b>EXAMPLES</b> de la page
man de keychain (<c>man keychain</c>), qui montre comment utiliser keychain
avec un shell alternatif. L'idée globale est que ces commandes doivent être
exécutées chaque fois que vous utilisez un shell.
</note>

<p>
Passons aux tests. D'abord, assurez-vous d'avoir arrêté ssh-agent tel que
décrit à la section précédente, puis lancez un nouveau shell (par exemple en
ouvrant une nouvelle session ou un nouveau terminal). Vous devriez être invité
à entrer la phrase de passe correspondant à chacune des clés que vous avez
spécifiées avec la commande présentée ci-haut. Tous les shells lancés après
cela devraient réutiliser ssh-agent, ce qui vous permettra de vous connecter
par SSH encore et encore sans jamais avoir à entrer un mot de passe.
</p>

</body>
</section>
<section>
<title>Utilisation de keychain avec KDE</title>
<body>

<p>
Si vous êtes utilisateur de KDE, au lieu d'utiliser
<path>~/.bash_profile</path>, vous pouvez laisser KDE gérer ssh-agent pour
vous. Pour faire cela, vous devez editer
<path>/etc/kde/agent-startup.sh</path>, qui est lu pendant le démarrage de KDE,
et <path>/etc/kde/shutdown/agent-shutdown.sh</path>, qui est exécuté pendant
son arrêt. Les modifications à apporter à ces deux fichiers sont&nbsp;:
</p>

<pre caption="édition de /etc/kde/agent-startup.sh">
if [ -x /usr/bin/ssh-agent ]; then
  eval "$(/usr/bin/ssh-agent -s)"
fi
</pre>

<pre caption="édition de /etc/kde/shutdown/agent-shutdown.sh">
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi
</pre>

<p>
Maintenant, tout ce qu'il vous reste à faire est de lancer le terminal de votre
choix, disons Konsole, et de charger les clés que vous souhaitez utiliser. Par
exemple&nbsp;:
</p>

<pre caption="chargement de clé ssh">
$ <i>keychain ~/.ssh/id_dsa</i>
<comment>(Entrez votre phrase de passe)</comment>
</pre>

<p>
Vos clés seront mémorisées jusqu'à ce que vous terminiez votre session KDE ou
fermiez ssh-agent manuellement.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Conclusion</title>
<section>
<title>Sécurité</title>
<body>

<p>
Bien sûr, l'utilisation de ssh-agent introduit un peu d'insécurité dans votre
système. Si un collègue utilise votre shell pendant que vous êtes aux toilettes,
il peut accéder à tous vos serveurs sans mot de passe. Cela accroît les risques
pour ces serveurs&nbsp;; vous devriez donc consulter la politique locale de
sécurité. Si vous utilisez ssh-agent, prenez les mesures nécessaires pour
assurer la sécurité de vos sessions.
</p>

</body>
</section>
<section>
<title>Résolution des problèmes</title>
<body>

<p>
Les procédures décrites dans ce document fonctionneront du premier coup pour
la plupart des utilisateurs. Si ce n'est pas votre cas, les astuces suivantes
vous aideront probablement à cerner le problème.
</p>

<ul>
  <li>
    Si vous ne pouvez vous connecter sans utiliser ssh-agent, exécutez ssh
    avec les options -vvv pour savoir ce qui se passe. Parfois, le serveur
    n'est pas paramétré pour utiliser l'authentification par clé publique.
    Dans certains cas, il est paramétré pour demander tout de même un mot de
    passe&nbsp;! Si c'est le cas, vous pouvez utiliser l'option -o avec ssh,
    ou éditer le fichier sshd_config du serveur.
  </li>
  <li>
    Si vous avez des problèmes avec ssh-agent ou keychain, peut-être
    utilisez-vous un shell qui ne comprend pas les commandes utilisées par ces
    programmes. Consultez les pages man de ssh-agent et de keychain pour
    savoir comment adapter leur utilisation à d'autres shells.
  </li>
  <li>
    Vous pouvez également consulter <uri
    link="http://www.funtoo.org/en/security/keychain/intro/">la page d'accueil de keychain
    </uri> (en anglais) pour en apprendre plus sur son utilisation.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
