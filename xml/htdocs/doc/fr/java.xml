<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/java.xml,v 1.17 2008/02/18 12:41:15 titefleur Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/fr/java.xml" lang="fr">
<title>Guide Java avec Gentoo</title>

<author title="Auteur">
 <mail link="nichoj@gentoo.org">Joshua Nichols</mail>
</author>
<author title="Auteur">
 <mail link="karltk@gentoo.org">Karl Trygve Kalleberg</mail>
</author>
<author title="Correcteur">
 <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="Traducteur">
 <mail link="marc@pangos.com">Marc Krauth</mail>
</author>
<author title="Traducteur, relecteur">
 <mail link="cam@gentoo.org">Camille Huot</mail>
</author>
<author title="Traducteur">
 <mail link="clement@varaldi.org">Clément Varaldi</mail>
</author>
<author title="Traducteur">
 <mail link="titefleur@gentoo.org">Marion Agé</mail>
</author>

<abstract>
Ce guide présente aux utilisateurs et développeurs la technologie Java et
explique comment utiliser Java sous Gentoo Linux.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.16</version>
<date>2008-01-01</date>

<chapter>
<title>Qu'est-ce que Java&nbsp;?</title>
<section>
<title>Vue d'ensemble</title>
<body>

<p>
Java est un langage de programmation qui a été développé par les ingénieurs de
Sun Microsystems. C'est un langage orienté objet conçu pour pouvoir
s'exécuter sur différentes plates-formes sans avoir besoin de recompiler le code
sur chacune d'elles. Même si Java peut être compilé comme un programme natif,
la grande popularité de Java vient probablement du fait qu'il permet de
produire des programmes portables. De plus, il dispose de nombreuses
fonctionnalités intéressantes comme le «&nbsp;garbage collector&nbsp;». Pour
rendre possible l'indépendance de la plate-forme, le compilateur Java
compile le code Java dans une représentation intermédiaire appelée
«&nbsp;Java bytecode&nbsp;» qui s'exécute dans un JRE
(«&nbsp;Java Runtime Environment&nbsp;», Environnement d'exécution Java)
et non directement sur le système d'exploitation.
</p>

<p>
Afin d'exécuter le code Java, il faut donc disposer d'un JRE. Le JRE met à
disposition du programme les bibliothèques principales, une machine virtuelle
Java (ou JVM, pour «&nbsp;Java Virtual machine&nbsp;») dépendante de la
plate-forme, des extensions pour les navigateurs (Mozilla par exemple), etc. Un
JDK («&nbsp;Java Development Kit&nbsp;», ou kit de développement pour Java)
ajoute à cela des outils de programmation comme par exemple un compilateur et
un débogueur.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Avant de commencer</title>
<section>
<title>Installations existantes</title>
<body>

<p>
Pour les installations existantes, quelque soit la façon dont vous avez
installé Java auparavant, assurez-vous d'avoir suivi le <uri
link="/proj/en/java/java-upgrade.xml">guide de mise à jour de Java</uri>.
</p>

</body>
</section>
<section>
<title>Nouvelles installations</title>
<body>

<p>
Les nouvelles installations ne devraient nécessiter aucune autre préparation.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Installation d'une machine virtuelle</title>
<section>
<title>Les choix</title>
<body>

<p>
Gentoo propose de nombreux environnements JRE et JDK. Actuellement, voici les
choix que nous avons&nbsp;:
</p>

<table>
<tr>
  <th>Vendeur</th>
  <th>JDK</th>
  <th>JRE</th>
</tr>
<tr>
  <ti>Le kit Java de Blackdown</ti>
  <ti>dev-java/blackdown-jdk</ti>
  <ti>dev-java/blackdown-jre</ti>
</tr>
<tr>
  <ti>Le kit Java de Sun</ti>
  <ti>dev-java/sun-jdk</ti>
  <ti>dev-java/sun-jre-bin</ti>
</tr>
<tr>
  <ti>Le kit Java d'IBM</ti>
  <ti>dev-java/ibm-jdk-bin</ti>
  <ti>dev-java/ibm-jre-bin</ti>
</tr>
<tr>
  <ti>Le kit de développement J2SE de BEA WebLogic</ti>
  <ti>dev-java/jrockit-jdk-bin</ti>
</tr>
</table>

<p>
Par défaut, c'est le couple JRE/JDK de Blackdown qui sera installé, dans la
mesure où il est librement disponible, sans avoir besoin d'enregistrement
auprès du fournisseur.
</p>

<p>
En général, les kits JRE/JDK de Sun et d'IBM sont plus rapides, mais ils sont
plus compliqués à installer puisque, pour chacun d'entre eux, on vous demandera
de lire et d'accepter leur licence avant de les télécharger. (IBM vous
demandera par ailleurs de remplir un formulaire d'enregistrement.)
</p>

</body>
</section>
<section>
<title>Installation d'un JRE/JDK</title>
<body>

<p>
Pour installer le JDK par défaut de votre profil, vous pouvez exécuter la
commande <c>emerge virtual/jdk</c>. Ou encore, pour le JRE par défaut de votre
profil, vous pouvez faire <c>emerge virtual/jre</c>.
</p>

<p>
Il y a peu, Sun a rendu la licence de ses JDK et JRE plus faciles à
l'utilisation sous Linux. En conséquence, Sun a rendu ses versions de Java 1.5
et antérieures plus facilement téléchargeables, sans tracas supplémentaire.
</p>

<note>
Un JDK inclut également un JRE, donc si vous avez installé un JDK vous n'êtes
pas obligé d'installer un JRE en plus.
</note>

</body>
</section>
<section>
<title>Installation des machines virtuelles téléchargées manuellement</title>
<body>

<p>
Comme nous l'avons déjà mentionné, quelques machines JDK et JRE vous demandent
de passer par quelques étapes avant de pouvoir être téléchargées. Compilez
simplement les paquets avec <c>emerge</c> comme vous le faites habituellement.
Les ebuilds vous indiqueront alors où aller et ce qui est à télécharger.
</p>

<p>
Vous devez télécharger et placer les fichiers indiqués dans
<path>/usr/portage/distfiles</path>. Ceci fait, vous pouvez relancer
la commande emerge et JRE/JDK commencera alors à s'installer.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Configuration de la machine virtuelle</title>
<section>
<title>Vue d'ensemble</title>
<body>

<p>
Gentoo donne la possibilité d'avoir plusieurs JDK et JRE installés
sans provoquer de conflit.
</p>

<p>
En utilisant l'outil <c>java-config</c>, vous pouvez déterminer la
configuration par défaut de tout le système (à condition d'avoir un accès aux
droits de super-utilisateur sur le système). Les utilisateurs peuvent aussi se
servir de <c>java-config</c> pour définir leur propre configuration par
défaut.
</p>

<note>
Vous pouvez aussi utiliser <c>eselect</c> pour changer le système et
l'utilisateur de la machine virtuelle. Pour cela, regardez avec la commande
<c>eselect java-vm help</c>.
</note>

</body>
</section>

<section>
<title>Paramétrage d'une machine virtuelle par défaut</title>
<body>

<p>
En lançant la commande <c>java-config --list-available-vms</c> (N.D.T.&nbsp;:
VM&nbsp;= Machine Virtuelle), vous avez la liste de tous les JRE et JDK
installés sur votre système. Voici un exemple de retour de la commande&nbsp;:
</p>

<pre caption="Liste des machines virtuelles disponibles">
# <i>java-config --list-available-vms</i>
Les machines virtuelles suivantes sont disponibles pour generation-2&nbsp;:
1)      Blackdown JDK 1.4.2.03 [blackdown-jdk-1.4.2]
2)      Blackdown JRE 1.4.2.03 [blackdown-jre-1.4.2]
3)      Blackdown 32bit JRE 1.4.2.03 [emul-linux-x86-java-1.4.2]
4)      Sun 32bit JRE 1.5.0.08 [emul-linux-x86-java-1.5]
5)      Kaffe 1.1.7 [kaffe]
*)      Sun JDK 1.5.0.08 [sun-jdk-1.5]
</pre>

<p>
L'étoile <e>*</e> indique qu'il s'agit de la machine virtuelle en cours
d'utilisation (system-vm ou user-vm quand c'est indiqué). Le nom entre crochets
<path>[]</path> correspond au «&nbsp;label&nbsp;» ou à l'identifiant d'une
machine virtuelle spécifique. Vous devez utiliser le contenu de ces crochets ou
le numéro de <c>java-config --set-system-vm</c>. Voici un exemple de
configuration d'une machine virtuelle&nbsp;:
</p>

<pre caption="Réglage de la machine virtuelle du système">
<comment>(Avec le contenu (recommandé))</comment>
# <i>java-config --set-system-vm blackdown-jdk-1.4</i>
Now using blackdown-jdk-1.4 as your generation-2 system JVM
<comment>(Avec le numéro)</comment>
# <i>java-config --set-system-vm 6</i>
Now using sun-jdk-1.5 as your generation-2 system JVM
</pre>

<p>
En tant que simple utilisateur, vous pouvez exécuter la commande
<c>java-config --set-user-vm</c>.
</p>

<note>
Vous n'êtes plus obligé de faire un <c>source</c> du profil pour les mises à
jour des machines virtuelles faites par l'utilisateur/le système.
</note>

</body>
</section>
<section id="preferred-vm">
<title>Machines virtuelles préférées</title>
<body>

<p>
Pendant l'installation des paquets Java, la machine virtuelle peut être et sera
commutée selon les besoins.
</p>

<p>
En raison de la grande variété de machines virtuelles disponibles, nous n'avons
pas les ressources nécessaires pour tester et vérifier la façon dont chaque
paquet fonctionne pour chacune d'elles. Pour vous assurer que chaque paquet
s'installe normalement, nous avons établi une liste de <e>machines virtuelles
par défaut/supportées</e> par architecture. Vous pouvez les trouver dans le
fichier <path>/usr/share/java-config-2/config/jdk-defaults.conf</path>. Quand
vous compilez un paquet Java et qu'il détecte que l'une des machines virtuelles
présentes dans ce fichier est installée, il utilisera automatiquement cette
machine virtuelle, à la place de system-vm.
</p>

<p>
Le changement de machine virtuelle lors de l'installation est ainsi nécessaire
quand, par exemple, votre system-vm est réglé sur une machine virtuelle 1.4 et
que le paquet que vous êtes en train d'installer requiert la version 1.5.
Pendant l'installation cela utilisera la machine virtuelle 1.5 préférée,
laissant votre choix de system-vm intact.
</p>

<p>
Bien sûr, sur Gentoo tout est une question de choix, donc vous pouvez
outrepasser ces valeurs par défaut dans le fichier
<path>/etc/java-config-2/build/jdk.conf</path> afin d'avoir un contrôle total
sur les machines virtuelles qui seront utilisées. Voici quelques exemples&nbsp;:
</p>

<pre caption="Exemple de /etc/java-config-2/build/jdk.conf">
<comment>(Je veux toujours utiliser un sun-jdk, i.e. sun-jdk-1.4 pour la version 1.4, sun-jdk-1.5 pour la 1.5, etc)</comment>
*=sun-jdk
</pre>

<pre caption="Exemple de /etc/java-config-2/build/jdk.conf">
<comment>(Toujours utiliser sun-jdk-1.5 quand c'est possible, sauf si une machine virtuelle 1.4 ou 1.3 est requise)</comment>
*=sun-jdk-1.5
</pre>

<pre caption="Exemple de /etc/java-config-2/build/jdk.conf">
<comment># Pour les machines virtuelles 1.3 je préfère que ce soit sun-jdk 1.4 mais quand elle n'est pas disponible, je veux utiliser ibm-jdk-bin,
# Pour les machines 1.4, je veux utiliser blackdown-jdk, et pour les 1.5, je veux utiliser sun-jdk </comment>
1.3=sun-jdk-1.4 ibm-jdk-bin
1.4=blackdown-jdk
1.5=sun-jdk
</pre>

<warn>
Vous n'êtes pas obligé de modifier ce fichier. Si vous changez ces options pour
utiliser une machine virtuelle qui n'est pas supportée, les choses sont
susceptibles de mal se passer. Les bogues reportés avec une machine virtuelle
non supportée ne seront pas prioritaires tant qu'il y a des rapports de bogues
concernant des machines virtuelles supportées.
</warn>

</body>
</section>
</chapter>

<chapter>
<title>Compilateurs</title>
<section>
<body>

<p>
Le compilateur Java standard habituellement utilisé pour compiler est javac,
qui est fourni avec tous les JDK. En plus de configurer la machine virtuelle
utilisée au moment de la compilation, il est également possible de configurer
le compilateur que vous désirez employer. Il est essentiel que vous définissiez
une liste de vos préférences pour le compilateur à utiliser dans le fichier
<path>/etc/java-config-2/build/compilers.conf</path>.
</p>

<pre caption="/etc/java-config-2/build/compilers.conf">
# If the ebuild supports it
# it will check the COMPILERS var front to back and
# use the first compiler that is installed

COMPILERS="ecj-3.1 jikes javac"
</pre>

<p>
Certains compilateurs ne supportent pas tous les arguments -cible et -source
possibles. Par conséquent, chaque compilateur présent dans la liste est vérifié
pour s'assurer qu'il supporte les arguments -source/-cible désirés. javac
fonctionnera dans tous les cas, ainsi si aucun autre compilateur approprié
n'est trouvé, il sera utilisé à la place.
</p>

<p>
Voici davantage de détails sur chaque compilateur&nbsp;:
</p>

<table>
<tr>
  <th>Nom</th>
  <th>Exécutable</th>
  <th>Paquet</th>
  <th>Description</th>
</tr>
<tr>
  <ti>javac</ti>
  <ti>javac</ti>
  <ti>N/A</ti>
  <ti>
    C'est le compilateur par défaut qui est utilisé et qui est fourni avec
    chaque JDK.
  </ti>
</tr>
<tr>
  <ti>jikes</ti>
  <ti>jikes</ti>
  <ti>dev-java/jikes</ti>
  <ti>
    Jikes était à l'origine développé par IBM. Pour l'anecdote, il est
    généralement plus rapide que javac. Notez cependant qu'il est plus pédant
    et qu'il rencontre des échecs dans certaines circonstances où javac n'a
    aucun problème. De même, il ne supporte pas encore la syntaxe de Java 1.5.
  </ti>
</tr>
<tr>
  <ti>Compilateur Eclipse pour Java</ti>
  <ti>ecj-3.1</ti>
  <ti>=dev-java/eclipse-ecj-3.1*</ti>
  <ti>
    ECJ est le compilateur utilisé par la plateforme de développement logiciel
    Eclipse. Il est très complet et assez rapide. Il supporte la syntaxe de
    Java 1.5.
  </ti>
</tr>
</table>

</body>
</section>
</chapter>

<chapter>
<title>Paramétrage d'un CLASSPATH par défaut</title>
<section>
<body>

<warn>
Les options expliquées dans cette section devraient être considérées comme
obsolètes et seront probablement retirées dans l'avenir. Nous vous recommandons
fortement de ne pas les utiliser, car vos projets Java ou vos applications
devraient dans l'idéal gérer leurs propres CLASSPATH. Si vous décidez
d'indiquer un CLASSPATH par défaut, certaines applications peuvent avoir un
comportement imprévu parce que certaines classes inattendues pourraient alors
se trouver dans leur CLASSPATH.
</warn>

<p>
<c>java-config</c> peut également être utilisé pour définir un CLASSPATH par
défaut aussi bien au niveau système que pour un utilisateur spécifique.
</p>

<p>
Premièrement, vous devrez lister les librairies Java disponibles qui sont
installées sur votre système et qui pourraient être ajoutées dans votre
CLASSPATH. Voici un exemple de l'affichage&nbsp;:
</p>

<pre caption="Énumération des classes disponibles">
# <i>java-config --list-available-packages</i>
[xerces-2] The next generation of high performance, fully compliant XML parsers in the Apache Xerces family (/usr/share/xerces-2/package.env)
[junit] Simple framework to write repeatable tests (/usr/share/junit/package.env)
[bsh] BeanShell: A small embeddable Java source interpreter (/usr/share/bsh/package.env)
[bcel] The Byte Code Engineering Library: analyze, create, manipulate Java class files (/usr/share/bcel/package.env)
[log4j] A low-overhead robust logging package for Java (/usr/share/log4j/package.env)
...
</pre>

<p>
De nouveau, les noms entre crochets (<e>[]</e>) sont les identifiants que vous
devez passer à <c>java-config --set-system-classpath</c>. Voici un
exemple&nbsp;:
</p>

<pre caption="Paramétrage des CLASSPATH">
# <i>java-config --set-system-classpath log4j,xerces-2</i>
</pre>

<note>
Le répertoire courant (<path>.</path>) ne fera pas partie du CLASSPATH système,
ainsi il devra être ajouté dans votre profil de connexion au système.
</note>

<p>
Vous devrez mettre à jour votre environnement en vous déconnectant de votre
session puis en vous reconnectant ou en faisant un <c>source /etc/profile</c>.
</p>

<p>
Pour les utilisateurs, <c>java-config --set-user-classpath</c> va créer
<path>~/.gentoo/java-env-classpath</path> que vous devrez alors
«&nbsp;sourcer&nbsp;» depuis votre profil de ligne de commande.
</p>

<pre caption="Lier le CLASSPATH spécifique à l'utilisateur">
<i>if [[ -f "${HOME}/.gentoo/java-env-classpath" ]]; then
       source ${HOME}/.gentoo/java-env-classpath
fi</i>
</pre>

<p>
Si vous voulez vraiment un CLASSPATH par défaut au niveau système ou pour
l'utilisateur, vous pouvez ajouter quelque chose comme ce qui suit dans votre
profil de ligne de commande. Mais nous vous déconseillons cela.
</p>

<pre caption="Paramétrage du CLASSPATH">
# <i>export CLASSPATH="${CLASSPATH}:$(java-config --classpath log4j,xerces-2)"</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Extensions Java pour le navigateur</title>
<section>
<title>Installation d'une extension</title>
<body>

<p>
Vous pouvez installer une extension Java pour votre navigateur Internet en
compilant une machine virtuelle Java avec la variable USE <c>nsplugin</c>
active.
</p>

<note>
La variable USE <c>nsplugin</c> n'est pas disponible pour toutes les
architectures. Vérifiez les extensions disponibles pour votre architecture
avant d'essayer d'installer une machine virtuelle avec la commande
<c>emerge -pv &lt;java-vm&gt;</c>.
</note>

<p>
Portage vous permettra d'installer plusieurs versions des extensions Java, bien
qu'une seule puisse être utilisée par votre navigateur Internet. Vous pouvez
vérifier la liste des extensions disponibles en exécutant&nbsp;:
</p>

<pre caption="Vérification des extensions disponibles">
# <i>eselect java-nsplugin list</i>
   [1]   sun-jre-bin-1.5
   [2]   blackdown-jre-1.4.2
</pre>

<p>
Dans cet exemple, <c>sun-jre-bin</c> est l'extension sélectionnée pour le
navigateur.
</p>

<pre caption="Sélection d'une extension">
# <i>eselect java-nsplugin set sun-jre-bin-1.5</i>
</pre>

<p>
Vérifions que l'extension désirée est sélectionnée&nbsp;:
</p>

<pre caption="Vérification de l'extension désirée">
# <i>eselect java-nsplugin list</i>
   [1]   sun-jre-bin-1.5  current
   [2]   blackdown-jre-1.4.2
</pre>

<p>
Java.com fournit également un lien pour vérifier <uri
link="http://java.com/en/download/installed.jsp">votre extension
installée</uri>.  De plus, si vous utilisez un navigateur basé sur Mozilla,
vous pouvez vérifier votre extension Java en tapant <c>about:plugins</c> dans
la barre d'adresse.
</p>

</body>
</section>
<section>
<title>Extensions sur les systèmes multilib</title>
<body>

<p>
Si vous avez un système multilib 64&nbsp;bits ou 32&nbsp;bits (par exemple un
AMD64), vous pouvez avoir les deux extensions Java 64&nbsp;bits et 32&nbsp;bits
installées.
</p>

<p>
Pour utiliser l'extension 32&nbsp;bits, vous devez faire un <c>emerge
emul-linux-x86-java</c> avec la variable USE <c>nsplugin</c> activée.
</p>

<pre caption="Installation de l'extension 32&nbsp;bits">
# <i>echo "app-emulation/emul-linux-x86-java nsplugin" >> /etc/portage/package.use</i>
# <i>emerge emul-linux-x86-java</i>
</pre>

<p>
Ensuite, vérifiez quelles sont les extensions disponibles&nbsp;:
</p>

<pre caption="Vérification des extensions disponibles">
# <i>eselect java-nsplugin list</i>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.4.2
  [2]   emul-linux-x86-java-1.5
</pre>

<p>
Bien que vous deviez sélectionner un navigateur 32&nbsp;bits (tel que 
<c>mozilla-firefox-bin</c>) pour utiliser votre extension 32&nbsp;bits, la 
version 64&nbsp;bits de <c>konqueror</c> utilise la machine virtuelle Java
directement, ainsi il est possible d'utiliser la version 64&nbsp;bits de 
<c>blackdown</c> avec votre navigateur sans configuration supplémentaire
nécessaire.
</p>

<p>
À présent, sélectionnez la bonne extension pour votre navigateur
32&nbsp;bits&nbsp;:
</p>

<pre caption="Sélection des extensions">
# <i>eselect java-nsplugin set 32bit emul-linux-x86-java-1.5</i>
</pre>

<p>
Vérifions que les extensions désirées sont sélectionnées&nbsp;:
</p>

<pre caption="Vérification des extensions désirées">
# <i>eselect java-nsplugin list</i>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.4.2  current
  [2]   emul-linux-x86-java-1.5
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Paramètres USE pour l'utilisation de Java</title>
<section>
<title>Configurer les paramètres USE</title>
<body>

<p>
Pour plus d'informations concernant les paramètres USE, référez-vous au chapitre
portant sur les
<uri link="/doc/fr/handbook/handbook-x86.xml?part=2&amp;chap=2">paramètres
USE</uri> du Manuel Gentoo.
</p>

</body>
</section>
<section>
<title>Les paramètres</title>
<body>

<ul>
  <li>
    Le paramètre <b>java</b> ajoute le support de Java dans un bon nombre de
    programmes.
  </li>
  <li>
    Le paramètre <b>nsplugin</b> ajoute le support pour des navigateurs de type
    Mozilla (notamment Firefox). Vous aurez besoin de ce paramètre pour
    visualiser des applets Java dans votre navigateur de type Mozilla.
  </li>
  <li>
    Le paramètre <b>source</b> installe une archive zip du code source d'un
    paquet. Celui-ci est utilisé notamment pour les IDE (environnement de
    développement intégré) pour attacher le source aux bibliothèques que vous
    utilisez.
  </li>
  <li>
    Le paramètre <b>jce</b> ajoute le support du moteur de cryptographie Java
    (N.D.T.&nbsp;: Java Cryptography Engine).
  </li>
  <li>
    Pour les paquets Java, le paramètre <b>build</b> construira la
    documentation des API en utilisant Javadoc.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Documentation supplémentaire</title>
<section>
<title>Documentation hors-ligne</title>
<body>

<ul>
  <li>Les pages man de java-config.</li>
  <li><c>java-config --help</c>.</li>
</ul>

</body>
</section>

<section>
<title>Documentation en ligne</title>
<body>

<ul>
  <li>
    La <uri link="http://www.gentoo.org/proj/en/java/">page du projet
    Java</uri>.
  </li>
  <li>
    Les archives des listes de diffusion
    <uri link="http://news.gmane.org/gmane.linux.gentoo.java">gentoo-java</uri>,
    <uri link="http://news.gmane.org/gmane.linux.gentoo.devel">gentoo-dev</uri>
    et <uri
    link="http://news.gmane.org/gmane.linux.gentoo.user">gentoo-user</uri>.
  </li>
  <li>#gentoofr et #gentoo-java sur irc.freenode.net.</li>
  <li>
    <uri link="http://fr.wikipedia.org/wiki/Java_(langage)">Entrée Wikipedia
    pour le Java</uri>.
  </li>
  <li>
    Si vous avez des suggestions ou des questions au sujet de ce document,
    veuillez contacter l'équipe de Gentoo responsable de Java&nbsp;:
    <mail>java@gentoo.org</mail>.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
