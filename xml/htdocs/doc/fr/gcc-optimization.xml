<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/gcc-optimization.xml,v 1.8 2013/08/03 08:12:00 jaaf Exp $ -->

<guide disclaimer="obsolete" redirect="https://wiki.gentoo.org/wiki/GCC_optimization/fr">
<title>Guide d'optimisation de la compilation</title>

<author title="Auteur">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="Traducteur">
  <mail link="titefleur@gentoo.org">Marion Agé</mail>
</author>

<abstract>
Ce guide constitue une introduction à l'optimisation du code compilé en
utilisant des variables CFLAGS et CXXFLAGS sûres de manière sensée. Il décrit
également la théorie sur laquelle se base l'optimisation en général.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.12</version>
<date>2009-10-19</date>

<chapter>
<title>Introduction</title>
<section>
<title>Que sont les CFLAGS et les CXXFLAGS&nbsp;?</title>
<body>

<p>
Les CFLAGS et CXXFLAGS sont des variables d'environnement utilisées pour dire au
compilateur GNU Compiler Collection, <c>GCC</c>, quels genres de paramètres
utiliser quand il compile le code source. Les CFLAGS s'appliquent au code écrit
en C alors que les CXXFLAGS s'appliquent au code écrit en C++.
</p>

<p>
Ces variables peuvent permettre de diminuer le nombre de messages de débogage
d'un programme, d'augmenter les niveaux d'alertes d'erreurs et, bien sûr,
d'optimiser le code obtenu. Le <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.3.3/gcc/Invoking-GCC.html#Invoking-GCC">manuel
de GCC</uri> maintient une liste exhaustive des options disponibles et de leur
utilité.
</p>

</body>
</section>
<section>
<title>Comment sont-elles utilisées&nbsp;?</title>
<body>

<p>
Les CFLAGS et CXXFLAGS peuvent être utilisées de deux façons. La première est de
les définir pour chaque programme avec les fichiers Makefiles générés par
<c>automake</c>.
</p>

<p>
Toutefois, cette méthode ne doit pas être utilisée lors de l'installation de
paquets installés depuis l'arbre Portage. À la place de cela, réglez vos
variables CFLAGS et CXXFLAGS dans le fichier <path>/etc/make.conf</path>. De
cette façon, tous les paquets qui seront compilés utiliseront les options que
vous avez spécifiées.
</p>

<pre caption="Les CFLAGS dans le /etc/make.conf">
CFLAGS="-march=athlon64 -O2 -pipe"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
Comme vous pouvez le voir, la variable CXXFLAGS est paramétrée pour utiliser
toutes les options présentes dans la variable CFLAGS. Généralement, ceci vous
suffira et ne créera pas de problème. Vous ne devriez pas avoir besoin de
spécifier des options supplémentaires dans votre variable CXXFLAGS.
</p>

</body>
</section>
<section>
<title>Idées fausses</title>
<body>

<p>
Bien que les variables CFLAGS et CXXFLAGS peuvent se révéler très utiles pour
obtenir du code source plus léger et/ou des binaires plus rapides, elles peuvent
aussi détériorer les fonctionnalités de votre code, augmenter son poids,
ralentir son temps d'exécution, et même causer des erreurs de compilation&nbsp;!
</p>

<p>
Les CFLAGS ne sont pas magiques&nbsp;; elles ne vont pas rendre automatiquement
votre système plus rapide ou vos binaires plus légers. Le fait d'ajouter encore
et encore des options pour essayer d'optimiser votre système est le meilleur
moyen d'obtenir des erreurs. À partir d'un moment, vous serez confronté à la loi
des rendements décroissants.
</p>

<p>
Malgré les vantards que vous trouverez sur Internet, les CFLAGS et CXXFLAGS
aggressives sont de loin plus susceptibles de nuire à vos programmes que de les
améliorer. Gardez à l'esprit que ces options existent en premier lieu pour être
utilisées à des endroits spécifiques et à des fins spécifiques. Le fait qu'une
variable CFLAG particulière soit bonne pour un fragment de code ne signifie pas
qu'elle soit adaptée à la compilation de tout ce que vous aurez installé sur
votre machine&nbsp;!
</p>

</body>
</section>
<section>
<title>Prêt&nbsp;?</title>
<body>

<p>
Maintenant que vous êtes informé des risques encourus, jetons un coup d'œil à
quelques options sûres et raisonnables à utiliser pour l'optimisation de votre
ordinateur. Cela vous tiendra en bonne posture et vous fera aimer des
développeurs la prochaine fois que vous rapporterez un problème sur le <uri
link="http://bugs.gentoo.org">Bugzilla</uri>. (Les développeurs vont
généralement vous prier de bien vouloir recompiler un paquet avec un minimum de
CFLAGS afin de voir si le problème persiste. Souvenez-vous, les options
agressives peuvent ruiner le code.)
</p>

</body>
</section>
</chapter>
<chapter>
<title>Optimisation</title>
<section>
<title>Les bases</title>
<body>

<p>
Le but de l'utilisation des CFLAGS et CXXFLAGS est de créer un code conçu
spécialement pour votre système&nbsp;; celui-ci devrait fonctionner parfaitement
tout en étant léger et rapide, si possible. Quelques fois ces conditions sont
mutuellement exclusives, donc nous allons nous en tenir aux combinaisons connues
pour fonctionner correctement. Idéalement, ce sont les meilleures disponibles
quelque soit l'architecture du processeur. Nous expliquerons ce que sont les
options agressives plus tard ainsi vous saurez ce à quoi il faut faire
attention. Nous ne parlerons pas de chaque option listée dans le manuel de
<c>GCC</c> (il y en a des centaines), mais nous couvrirons les options
classiques, les plus courantes.
</p>

<note>
À tout moment si vous n'êtes pas sûr de l'utilité d'une option, référez-vous au
chapitre approprié du <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.3.3/gcc/Optimize-Options.html#Optimize-Options">manuel
de GCC</uri>. Si vous êtes toujours dubitatif, essayez Google ou jetez un œil
aux <uri link="http://gcc.gnu.org/lists.html">listes de diffusion</uri> de
<c>GCC</c>.
</note>

</body>
</section>
<section>
<title>-march</title>
<body>

<p>
La première et la plus importante des options est <c>-march</c>. Elle indique au
compilateur quel code il doit produire pour <uri
link="http://fr.wikipedia.org/wiki/Microarchitecture">l'architecture</uri> (ou
<e>arch</e>) de votre processeur&nbsp;: elle indique qu'il doit fournir un code
pour un certain type de processeur. Les différents processeurs ont des capacités
différentes, supportent des jeux d'instructions différents et exécutent le code
de façon différente. L'option <c>-march</c> va permettre de signaler au
compilateur quel code créer spécifiquement pour votre processeur, avec toutes
ses capacités, ses fonctionnalités, ses jeux d'instructions, ses gorges
(NdT&nbsp;: "quirks"), et ainsi de suite.
</p>

<p>
Même si la variable CHOST dans le <path>/etc/make.conf</path> spécifie
l'architecture générale utilisée, <c>-march</c> devrait toujours être renseignée
pour que les programmes puissent être optimisés pour votre processeur en
particulier. Les processeurs x86 et x86-64 (entre autres) doivent utiliser
l'option <c>-march</c>.
</p>

<p>
Quel type de processeur avez-vous&nbsp;? Pour le savoir, tapez ceci&nbsp;:
</p>

<pre caption="Information du CPU">
$ <i>cat /proc/cpuinfo</i>
</pre>

<p>
À présent, voyons l'option <c>-march</c> en action. Cet exemple est paramétré
pour un vieux processeur Pentium III&nbsp;:
</p>

<pre caption="/etc/make.conf: Pentium III">
CFLAGS="-march=pentium3"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
Voici un autre exemple pour un processeur AMD 64&nbsp;bits&nbsp;:
</p>

<pre caption="/etc/make.conf: AMD64">
CFLAGS="-march=athlon64"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
Si vous n'êtes pas sûr de votre type de processeur, utilisez juste
<c>-march=native</c>. Quand cette option est utilisée, GCC détecte votre
processeur et ajoute automatiquement les options appropriées. <brite>Cependant,
cette option ne doit pas être utilisée si vous avez l'intention de compiler des
paquets pour un autre processeur&nbsp;!</brite>
</p>

<p>
Donc, si vous compilez des paquets sur un ordinateur et que vous comptez les
exécuter sur un autre ordinateur (utiliser un ordinateur rapide pour y compiler
des paquets destinés à un vieil ordinateur lent), alors <e>n'utilisez pas</e>
<c>-march=native</c>. «&nbsp;Native&nbsp;» signifie que le code produit ne
fonctionnera <e>seulement</e> que sur un seul type de processeur. Par exemple,
les applications compilées avec l'option <c>-march=native</c> sur un processeur
AMD Athlon 64 ne pourront pas fonctionner sur un ancien processeur VIA C3.
</p>

<p>
Les options <c>-mtune</c> et <c>-mcpu</c> sont également disponibles. Elles ne
sont normalement utilisées que s'il n'y a pas d'option <c>-march</c> disponible
pour votre processeur&nbsp;; certaines architectures de processeurs peuvent
avoir besoin de <c>-mtune</c> ou même de <c>-mcpu</c>. Malheureusement, le
comportement de <c>GCC</c> n'est pas vraiment cohérent avec la façon dont chaque
option se comporte d'une architecture à l'autre.
</p>

<p>
Sur les processeurs x86 et x86-64, l'option <c>-march</c> va générer du code
spécifique à tous les processeurs en utilisant tous ses jeux d'instructions
disponibles et les bonnes interfaces d'applications binaires (NdT&nbsp;: ABI,
pour «&nbsp;Application Binary Interface&nbsp;»)&nbsp;; il n'y aura pas de
problème de compatibilité ascendante pour les processeurs plus vieux ou
différents. Si vous n'avez pas besoin d'exécuter du code sur d'autres systèmes
que celui sur lequel vous utilisez Gentoo, continuez d'utiliser <c>-march</c>.
Vous ne devriez prendre en considération <c>-mtune</c> que si vous devez générer
du code pour des vieux processeurs tels que les i386 et i486. L'option
<c>-mtune</c> produit du code plus générique que <c>-march</c>&nbsp;; même s'il
va harmoniser le code pour un processeur spécifique, il ne prendra pas compte
des jeux d'instructions disponibles et de l'ABI. N'utilisez pas <c>-mcpu</c> sur
les systèmes x86 ou x86-64, car c'est déconseillé pour ces architectures.
</p>

<p>
Seuls les processeurs non-x86/x86-64 (tels que Sparc, Alpha, et PowerPC) peuvent
avoir besoin de <c>-mtune</c> ou de <c>-mcpu</c> au lieu de <c>-march</c>. Sur
ces architectures, <c>-mtune</c>/<c>-mcpu</c> vont parfois se comporter
simplement comme <c>-march</c> (sur x86/x86-64)... mais avec un nom d'option
différent. De nouveau, le comportement de <c>GCC</c> et le nommage des options
ne sont pas homogènes selon les architectures, donc assurez-vous de bien lire le
<uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.3.4/gcc/Submodel-Options.html#Submodel-Options">manuel</uri>
de <c>GCC</c> pour déterminer celles que vous devez utiliser sur votre système.
</p>

<note>
Pour plus de suggestions de paramètres pour les options
<c>-march</c>/<c>-mtune</c>/<c>-mcpu</c>, veuillez lire le chapitre 5 du
<uri link="/doc/fr/handbook/">Manuel d'installation de Gentoo</uri> approprié à
votre architecture. De même, lisez la liste des <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.3.3/gcc/Submodel-Options.html#Submodel-Options">options
spécifiques</uri> aux architectures dans le manuel de <c>GCC</c>, qui détaillent
davantage les différences entre <c>-march</c>, <c>-mcpu</c>, et <c>-mtune</c>.
</note>

</body>
</section>
<section>
<title>-O</title>
<body>

<p>
La variable suivante est <c>-O</c>. Elle contrôle le niveau global
d'optimisation. Plus vous augmentrez le niveau d'optimisation, plus la
compilation du code prendra du temps et utilisera de la mémoire.
</p>

<p>
Il y a cinq paramètres <c>-O</c>&nbsp;: <c>-O0</c>, <c>-O1</c>, <c>-O2</c>,
<c>-O3</c>, et <c>-Os</c>. Vous ne devrez utiliser qu'un seul d'entre eux dans
le fichier <path>/etc/make.conf</path>.
</p>

<p>
À l'exception de <c>-O0</c>, les paramètres <c>-O</c> activent chacun plusieurs
options supplémentaires, donc assurez-vous de bien lire le chapitre sur les
<uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.3.3/gcc/Optimize-Options.html#Optimize-Options">options
d'optimisation</uri> du manuel de <c>GCC</c> pour savoir quelles options sont
activées à chaque niveau <c>-O</c>, ainsi que pour obtenir quelques explications
sur ce qu'elles font.
</p>

<p>
Examinons chaque niveau d'optimisation&nbsp;:
</p>

<ul>
  <li>
    <c>-O0</c>: Ce niveau (la lettre "O" suivie d'un zéro) désactive entièrement
    l'optimisation, c'est le niveau par défaut si aucun niveau <c>-O</c> n'est
    spécifié dans les variables CFLAGS ou CXXFLAGS. Votre code ne sera pas
    optimisé&nbsp;: ce n'est généralement pas ce qui est voulu.
  </li>
  <li>
    <c>-O1</c>: C'est le niveau le plus classique d'optimisation. Le compilateur
    va essayer de générer un code plus rapide et plus léger sans prendre plus de
    temps à compiler. C'est relativement classique, mais cela devrait
    fonctionner dans tous les cas.
    que le travail soit fait.
  </li>
  <li>
    <c>-O2</c>: Un étape au-dessus du <c>-O1</c>. C'est le niveau
    <e>recommandé</e> d'optimisation sauf si vous avez des besoins spécifiques.
    Le niveau <c>-O2</c> va activer quelques options en plus de celles du
    <c>-O1</c>. Avec le niveau <c>-O2</c>, le compilateur va tenter d'augmenter
    les performances du code sans faire de compromis sur la taille et sans
    prendre trop de temps à compiler.
  </li>
  <li>
    <c>-O3</c>: Il s'agit du plus haut niveau d'optimisation possible mais aussi
    du plus risqué. Le temps de compilation sera plus long avec cette option qui
    en fait ne <e>devrait pas être utilisée de façon globale avec <c>GCC</c>
    4.x</e>. Le comportement de <c>GCC</c> a changé de façon significative
    depuis la version 3.x. Dans la version 3.x, <c>-O3</c> a montré que son
    utilisation conduisait à des temps d'exécution marginaux plus rapides
    qu'avec <c>-O2</c>, mais ce n'est plus le cas avec <c>GCC</c> 4.x. Compiler
    tous vos paquets avec <c>-O3</c> <e>produira</e> des plus gros binaires qui
    demanderont plus de mémoire et va augmenter de façon significative les
    étranges erreurs de compilation ou provoquer des comportements inattendus
    pour les programmes (y compris des erreurs). Les inconvénients sont plus
    nombreux que les avantages&nbsp;; souvenez-vous du principe des rendements
    décroissants. <b>L'utilisation du niveau <c>-O3</c> n'est pas recommandé
    pour <c>GCC</c> 4.x.</b>
  </li>
  <li>
    <c>-Os</c>: Ce niveau va optimiser votre code en taille. Il active toutes
    les options du niveau <c>-O2</c> qui n'influent pas sur la taille du code
    généré. Il peut être utile pour les machines qui ont une taille très limitée
    d'espace libre sur le disque dur et/ou qui ont des processeurs avec une
    petite taille de cache. Toutefois, ce niveau peut tout à fait causer
    d'autres problèmes, c'est pourquoi il est filtré par beaucoup d'ebuilds dans
    l'arbre. L'utilisation de <c>-Os</c> n'est pas recommandé.
  </li>
</ul>

<p>
Comme mentionné précédemment, le niveau <c>-O2</c> est le niveau requis pour
l'optimisation. Si certains paquets créent des erreurs de compilation,
assurez-vous que vous n'utilisez pas <c>-O3</c>. Comme option de repli, essayez
de régler vos variables CFLAGS et CXXFLAGS a un niveau d'optimisation plus bas,
tel que <c>-O1</c> ou même <c>-O0 -g2 -ggdb</c> (pour les rapports d'erreurs et
la vérification des problèmes si possible) et recompilez le paquet.
</p>

</body>
</section>
<section>
<title>-pipe</title>
<body>

<p>
<c>-pipe</c> est une option assez répandue. Elle n'a, en fait, pas d'effet sur
le code généré, mais va accélerer le processus de compilation. Elle dit au
compilateur d'utiliser des tubes à la place des fichiers temporaires pendant
les différentes étapes de la compilation. L'utilisation de tubes va utiliser
plus de mémoire. Cette option est donc déconseillée sur les machines avec peu
de mémoire, car gcc pourrait en manquer et se faire tuer par le système.
</p>

</body>
</section>
<section>
<title>-fomit-frame-pointer</title>
<body>

<p>
C'est une option très commune créée dans le but de réduire la taille du code
généré. Elle est active pour tous les niveaux de <c>-O</c> (à l'exception de
<c>-O0</c>) sur les architectures pour lesquelles faire cela ne va pas pas
interférer avec le débogage (tels que les x86-64), mais vous pourriez avoir
besoin de l'activer vous-même en l'ajoutant à vos options. Bien que le manuel du
compilateur GNU <c>GCC</c> ne spécifie pas toutes les architectures sur
lesquelles elle est active en utilisant <c>-O</c>, vous aurez besoin de
l'activer explicitement sur les architectures x86. Toutefois, l'utilisation de
cette option rendra le débogage difficile, voire impossible.
</p>

<p>
En particulier, cela rend le débogage des applications écrites en Java beaucoup
plus difficile, bien que Java ne soit pas le seul code affecté par l'utilisation
de cette option. Donc même si cette option peut aider, elle rend le débogage
plus délicat&nbsp;: les traçages en particulier seront inutiles. Toutefois, si
vous n'avez pas l'intention de faire trop de débogage de logiciels et que vous
n'avez pas ajouté d'autres CFLAGS en relation avec le débogage telles que
<c>-ggdb</c>, alors vous pouvez essayer d'utiliser <c>-fomit-frame-pointer</c>.
</p>

<impo>
Ne combinez <e>pas</e> <c>-fomit-frame-pointer</c> avec l'option similaire
<c>-momit-leaf-frame-pointer</c>. L'utilisation de cette dernière est obsolète,
<c>-fomit-frame-pointer</c> fait déjà son travail comme il faut. De plus,
<c>-momit-leaf-frame-pointer</c> a montré des impacts négatifs sur les
performances du code.
<!--
source for this info:
http://www.coyotegulch.com/products/acovea/aco5p4gcc40.html
-->
</impo>

</body>
</section>
<section>
<title>-msse, -msse2, -msse3, -mmmx, -m3dnow</title>
<body>

<p>
Ces options activent les jeux d'instructions <uri
link="http://fr.wikipedia.org/wiki/Streaming_SIMD_Extensions">SSE</uri>, <uri
link="http://fr.wikipedia.org/wiki/SSE2">SSE2</uri>, <uri
link="http://fr.wikipedia.org/wiki/SSE3">SSE3</uri>, <uri
link="http://fr.wikipedia.org/wiki/MMX_%28processeur%29">MMX</uri>, et <uri
link="http://fr.wikipedia.org/wiki/3DNow%21">3DNow!</uri> pour les architectures
x86 et x86-64. Elles sont pratiques principalement pour le multimédia, le jeu et
d'autres tâches de calcul à virgule flottante, bien qu'elles contiennent
plusieurs autres améliorations mathématiques. Ces jeux d'instructions se
trouvent dans les CPU les plus modernes.
</p>

<impo>
Assurez-vous de vérifier que votre processeur supporte ces options en exécutant
la commande <c>cat /proc/cpuinfo</c>. La sortie va inclure quelques jeux
d'instruction supplémentaires supportés. Notez que <b>pni</b> n'est qu'un nom
différent pour SSE3.
</impo>

<p>
Normalement vous n'avez pas besoin d'ajouter ces options dans le fichier
<path>/etc/make.conf</path> si vous utilisez la bonne option <c>-march</c> (par
exemple, <c>-march=nocona</c> implique <c>-msse3</c>). Il y a quelques
exceptions notables pour les nouveaux processeurs VIA et AMD64 qui supportent
des instructeurs non implicites avec <c>-march</c> (tel que SSE3). Pour les
processeurs comme ceux-là, vous devrez activer les options supplémentaires où il
faut après avoir regardé la sortie de <c>cat /proc/cpuinfo</c>.
</p>

<note>
Vous devriez regarder la <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.3.3/gcc/i386-and-x86_002d64-Options.html#i386-and-x86_002d64-Options">liste</uri>
des options x86 et spécifiques aux x86-64 pour voir les jeux d'instructions qui
sont activés simplement par l'option du type de processeur. Si une instruction
est listée, alors vous n'avez pas besoin de la spécifier, elle sera activée en
utilisant le bon paramètre <c>-march</c>.
</note>

</body>
</section>
</chapter>
<chapter>
<title>Questions courantes sur l'optimisation</title>
<section>
<title>J'obtenais de meilleures performances avec -funroll-loops
-fomg-optimize&nbsp;!</title>
<body>

<p>
Non, vous <e>pensez</e> juste que c'était le cas parce que quelque vous a
persuadé que le fait de mettre plus d'options était une bonne chose. Les options
offensives vont seulement nuire à vos applications quand elles sont utilisées à
l'échelle du système. Même le <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.3.3/gcc/Optimize-Options.html#Optimize-Options">manuel</uri>
de <c>GCC</c> dit que le fait d'utiliser les options  <c>-funroll-loops</c> et
<c>-funroll-all-loops</c> provoque un alourdissement du code et le rend plus
lent à l'exécution. Pourtant, pour une raison quelconque, ces deux options,
ainsi que <c>-ffast-math</c>, <c>-fforce-mem</c>, <c>-fforce-addr</c>, et les
autres similaires, continuent à être très populaires chez les personnes qui
suivent une course à la vantardise.
</p>

<p>
La vérité sur ce sujet, c'est qu'il s'agit d'options dangereusement aggressives.
Jetez un œil sur les <uri link="http://forums.gentoo.org">forums de
Gentoo</uri> et au <uri link="http://bugs.gentoo.org">Bugzilla</uri> pour voir
ce que font ces options&nbsp;: rien de bon&nbsp;!
</p>

<p>
Vous n'avez pas besoin d'utiliser ces options de manière globale dans les
variables CFLAGS et CXXFLAGS. Elles ne feront que nuire à vos performances.
Elles peuvent vous faire croire que votre système est à la pointe et a de hautes
performances, mais elles ne feront rien d'autre que de gonfler votre code et
provoquer des bogues marqués INVALID ou WONTFIX.
</p>

<p>
Vous n'avez pas besoin d'options dangereuses telles que celles-ci. <b>Ne les
utilisez pas</b>. Collez aux options classiques&nbsp;: <c>-march</c>, <c>-O</c>,
et <c>-pipe</c>.
</p>

</body>
</section>
<section>
<title>Que dire au sujet des niveaux de l'option -O supérieurs à 3&nbsp;?</title>
<body>

<p>
Certains utilisateurs friment d'avoir de bien meilleures performances grâce à
l'utilisation de <c>-O4</c>, <c>-O9</c>, et plus encore, mais en réalité les
niveaux de l'option <c>-O</c> supérieurs à 3 n'ont aucun effet. Le compilateur
peut accepter des CFLAGS telles que <c>-O4</c>, mais en fait il ne va rien en
faire. Il n'optimise que pour <c>-O3</c>, rien de plus.
</p>

<p>
Besoin de plus de preuves&nbsp;? Regardez le <uri
link="http://gcc.gnu.org/viewcvs/trunk/gcc/opts.c?revision=124622&amp;view=markup">code
source</uri> de <c>GCC</c>&nbsp;:
</p>

<pre caption="Source code de -O">
if (optimize >= 3)
    {
      flag_inline_functions = 1;
      flag_unswitch_loops = 1;
      flag_gcse_after_reload = 1;
      /* Allow even more virtual operators.  */
      set_param_value ("max-aliased-vops", 1000);
      set_param_value ("avg-aliased-vops", 3);
    }
</pre>

<p>
Comme vous pouvez le voir, une valeur supérieure à 3 est tout simplement traitée
comme un <c>-O3</c>.
</p>

</body>
</section>
<section>
<title>Que dire au sujet des options redondantes&nbsp;?</title>
<body>

<p>
Souvent, les variables CFLAGS et CXXFLAGS qui sont mises à plusieurs niveaux de
<c>-O</c> sont spécifiées comme redondantes dans le fichier
<path>/etc/make.conf</path>. Parfois cela se fait par ignorance, mais c'est
également fait pour éviter le filtrage des options ou le remplacement des
options.
</p>

<p>
Le filtrage/remplacement des options est réalisé dans beaucoup d'ebuilds de
l'arbre Portage. Cela est habituellement dû au fait que les paquets n'arrivent
pas à compiler avec certains niveaux de <c>-O</c> ou que le code source est
trop facilement alteré avec d'autres options utilisées. L'ebuild va filtrer
certaines ou toutes les options CFLAGS et CXXFLAGS, ou alors il les remplacera
par un différent niveau <c>-O</c>.
</p>

<p>
Le <uri
link="http://devmanual.gentoo.org/ebuild-writing/functions/src_compile/build-environment/index.html">manuel
du développeur Gentoo</uri> explique où et comment le filtrage et le
remplacement des options fonctionnent.
</p>

<p>
Il est possible d'éviter le filtrage des <c>-O</c> par redondance en listant les
options pour un certain niveau, tel que <c>-O3</c>, en faisant quelque chose
comme cela&nbsp;:
</p>

<pre caption="Spécifier les CFLAGS redondantes">
CFLAGS="-O3 -finline-functions -funswitch-loops"
</pre>

<p>
Toutefois, <brite>ce n'est pas une chose intelligente à faire</brite>. Les
CFLAGS ont une bonne raison pour d'être filtrées&nbsp;! Si les options sont
filtrées, cela signifie qu'il n'est pas sûr de compiler un paquet avec ces
options. Il n'est clairement <e>pas</e> prudent de compiler votre système entier
avec <c>-O3</c> si certaines des options mises par ce niveau vont causer des
problèmes avec certains paquets. Ainsi, n'essayez pas d'être plus "fûté" que les
développeurs qui maintiennent ces paquets. <e>Faites confiance aux
développeurs</e>. Le filtrage des options et leur remplacement est fait dans
votre intérêt&nbsp;! Si un ebuild spécifie des options alternatives, n'essayez
donc pas de les contourner.
</p>

<p>
Vous allez sans doute continuer à rencontrer des difficultés lors de la
compilation d'un paquet avec des options inacceptables. Si vous rapportez vos
problèmes sur le Bugzilla, les options que vous utilisez dans le fichier
<path>/etc/make.conf</path> seront facilement visibles et il vous sera dit de
recompiler sans ces options. Épargnez-vous le problème de recompiler en
n'utilisant tout simplement pas les options redondantes&nbsp;! Ne prétendez
pas que vous êtes forcément meilleur que les développeurs.
</p>

</body>
</section>
<section>
<title>Que dire au sujet des LDFLAGS&nbsp;?</title>
<body>

<p>
Les développeurs Gentoo ont déjà mis des paramètres LDFLAGS fondamentaux et
sûrs dans les profils de base, vous n'avez donc pas besoin de les changer.
</p>

</body>
</section>
<section>
<title>Puis-je utiliser les paramètres définis par paquet&nbsp;?</title>
<body>

<p>
Il n'y a pas de méthode qui permettrait de définir des CFLAGS ou d'autres
variables par paquet, bien qu'il existe quelques <uri
link="http://forums.gentoo.org/viewtopic-p-3832057.html#3832057">moyens un peu
brutaux</uri> pour forcer Portage à le faire.
</p>

<p>
Vous <e>ne devriez pas</e> essayer de forcer Portage à utiliser des variables
par paquet, puisqu'il ne le supporte en aucune manière et que cela risque de
grandement compliquer les rapports de bogue. Renseignez juste vos variables dans
le fichier <path>/etc/make.conf</path> afin de les utiliser de manière globale
sur le système.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Ressources</title>
<section>
<body>

<p>
Les ressources suivantes sont d'une certaine utilité pour comprendre
l'optimisation&nbsp;:
</p>

<ul>
  <li>
    Le <uri link="http://gcc.gnu.org/onlinedocs/gcc-4.3.3/gcc/">manuel de GNU
    GCC</uri>
  </li>
  <li>
    Le chapitre 5 du <uri link="/doc/en/handbook/">Manuel d'installation de
    Gentoo</uri>
  </li>
  <li><c>man make.conf</c></li>
  <li><uri link="http://fr.wikipedia.org">Wikipedia</uri></li>
  <li>
    <uri link="http://www.coyotegulch.com/products/acovea/">Acovea</uri>, une
    suite de test et d'analyse comparative (NdT&nbsp;: "benchmarking") qui peut
    être utile pour déterminer de quelle façon les différentes options de
    compilation intéragissent et affectent le code généré, bien sûr ces
    suggestions de code ne sont pas appropriées pour une utilisation globale.
    Cette suite est disponible dans Portage&nbsp;: <c>emerge acovea</c>.
  </li>
  <li>Les <uri link="http://forums.gentoo.org">forums Gentoo</uri></li>
</ul>

</body>
</section>
</chapter>
</guide>
