<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/Attic/2.6-koutput-user.xml,v 1.3 2004/04/11 12:31:17 cam Exp $ -->

<guide link="/doc/fr/2.6-koutput-user.xml" lang="fr">

<title>Les Kernels 2.6 et «&nbsp;koutput&nbsp;»</title>
<author title="Développeur">
  <mail link="latexer@gentoo.org">Peter Johanson</mail>
</author>
<author title="Correcteur">
  <mail link="antifa@gentoo.org">Ken Nowack</mail>
</author>
<author title="Correcteur">
  <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>
<author title="Traducteur">
  <mail link="olivier.fisette@sympatico.ca">Olivier Fisette</mail>
</author>

<abstract>
Ce guide couvre l'utilisation de «&nbsp;koutput&nbsp;», la nouvelle 
méthode de Gentoo pour la gestion des noyaux 2.6 et de leurs modules.
</abstract>

<license/>

<version>1.1</version>
<date>26 mars 2004</date>

<chapter>
<title>Vue d'ensemble</title>
<section>
<body>

<p>
Les noyaux de la série 2.6 fournissent, entre autres choses, des améliorations 
au système de compilation du noyau (le système «&nbsp;kbuild&nbsp;»). Une des 
nouvelles fonctionnalités de ce système est la possibilité de créer tous les 
fichiers résultant de la compilation dans un répertoire séparé. Cela offre 
plusieurs avantages par rapport à l'ancienne méthode&nbsp;:
</p>

<ul>
  <li>
    N'importe quel utilisateur peut utiliser les mêmes sources pour contruire
    des noyaux, simplement en dirigeant les fichiers de sortie vers une
    destination quelconque dans son répertoire personnel.
  </li>
  <li>
    Des noyaux peuvent être compilés pour de multiples architectures, et les
    fichiers pour chaque architecture ne seront pas perdus.
  </li>
  <li>
    <path>/usr</path> peut être monté en lecture seulement tout en permettant
    la compilation, la reconfiguration et d'autres opérations relatives aux 
    noyaux.
  </li>
  <li>
    Les modules externes peuvent être compilés sans nécessiter l'accès en mode
    écriture à <path>/usr/src/linux</path>.
  </li>
</ul>

<p>
Ce dernier avantage est important, car Portage devait accéder temporairement en
mode écriture à un répertoire du système de fichiers réel afin de compiler les
modules externes en l'arbre des sources d'un noyau 2.6. Si vous choisissez de
<b>ne pas</b> utiliser koutput pour les noyaux 2.6, la compilation de la
plupart des modules du noyau échouera à cause de cette restriction. Afin de
permettre à Portage d'écrire dans <path>/usr/src/linux</path> pendant
l'exécution de emerge avec des modules du noyau, vous pouvez utiliser
config-kernel&nbsp;:
</p>

<note>
Toutes les fonctionnalités de config-kernel ne sont pas abordées dans ce guide.
Pour consulter l'information complète, faites&nbsp;: <b>man config-kernel</b>.
</note>

<pre caption="Permettre l'écriture dans /usr/src/linux">
# <i>config-kernel --allow-writable yes</i>
</pre>

<p>
Vous pouvez revenir sur votre décision à n'importe quel moment en utilisant à
nouveau config-kernel&nbsp;:
</p>

<pre caption="Retirer la permission d'écrire dans /usr/src/linux">
# <i>config-kernel --allow-writable no</i>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Avantages</title>
<section>
<body>

<p>
Vous vous demandez peut-être : «&nbsp;Pourquoi m'en soucierais-je&nbsp;?&nbsp;» 
La difficulté qui a inspiré cette fonctionnalité était un problème récurrent avec
des ebuilds tels que nvidia-kernel ou hostap-driver. Ces derniers avaient
besoin du système de compilation du noyau pour leur propre compilation, mais ce
processus de construction nécessitait la mise à jour de fichiers dans
<path>/usr/src/linux</path>, ce qui échouait à cause de violations de
l'environnement «&nbsp;bac à sable&nbsp;».
</p>

<note>
Le <b>bac à sable</b> Gentoo est un système qui empêche Portage d'écrire dans
le système de fichiers avant l'étape finale d'intégration qui termine
l'installation d'un paquet.
</note>

<p>
Pour prévenir ces problèmes, des solutions en plusieurs étapes peuvent être
utilisées. En résumé, les compilations du noyau doivent produire leurs fichiers
de sortie dans un emplacement différent de celui où la compilation a lieu.
Par la suite, les modules externes doivent avoir <b>le même comportement</b>,
mais ils placeront leurs fichiers de sortie dans un sous-répertoire de leur
emplacement temporaire de compilation. Ce faisant, les désagréables violations
du bac à sable sont évitées.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Activer koutput</title>
<section>
<body>

<p>
Les noyaux 2.6 déterminent où placer leurs fichiers de sortie sur la base des
valeurs de deux variables d'environnement&nbsp;: <c>KBUILD_OUTPUT</c> et
<c>O</c>. <c>KBUILD_OUTPUT</c> peut être paramétrée dans l'environnement, puis
remplacée par une nouvelle valeur donnée par <c>O</c> sur la ligne de commande.
Par exemple&nbsp;:
</p>

<pre caption="Paramétrer manuellement l'emplacement de sortie">
# <i>cd /usr/src/linux></i>
# <i>export KBUILD_OUTPUT="/var/tmp/kernel-output/2.6.4"</i>
# <i>mkdir /var/tmp/kernel-output/2.6.4</i>
<comment>Définit l'emplacement de sortie et vérifie que le répertoire existe.</comment>
# <i>make menuconfig</i>
<comment>Le fichier .config résultant sera dans /var/tmp/kernel-output/2.6.4.</comment>
# <i>make O=/home/joe/kernels/2.6.4 menuconfig</i>
<comment>Le fichier .config résultant sera maintenant dans /home/joe/kernels/2.6.4.</comment>
</pre>

<p>
L'outil Gentoo <b>config-kernel</b> fournit un mécanisme pour automatiser
partiellement ce processus. Avec <b>config-kernel</b>, vous pouvez définir un
préfixe pour l'emplacement des fichiers de sortie des noyaux installés par
Portage.
</p>

<pre caption="Préparer l'environnement avec config-kernel">
# <i>config-kernel --output-dir /home/joe/kernels</i>
</pre>

<p>
La commande ci-dessus fait de <path>/home/joe/kernels/KV</path> le chemin
d'accès par défaut où les nouveaux noyaux installeront leurs fichiers de
sortie (<b>KV</b> représente la version du noyau). Pour régler ce chemin à la
valeur par défaut de Gentoo qui est <path>/var/tmp/kernel-output/</path>,
faites&nbsp;:
</p>

<pre caption="Préparer l'environnement avec config-kernel">
# <i>config-kernel --output-dir default</i>
</pre>

<p>
Un utilisateur peut également configurer des sources de noyaux 2.6 déjà
installées pour qu'elles utilisent la nouvelle méthode config-kernel. Prenez
garde au fait que cela provoquera l'effacement de tous les fichiers
précédemment générés, car <c>make mrproper</c> doit être exécuté pendant ce
processus.
</p>

<pre caption="Convertir un noyau déjà installé">
# <i>config-kernel --make-koutput /usr/src/linux-2.6.3</i>
</pre>

<p>
La commande ci-dessus convertit les sources du noyau situées dans
<path>/usr/src/linux-2.6.3</path> afin qu'elles installent leurs fichiers de
sortie dans un répertoire différent. Si le répertoire de sortie a déjà été
paramétré avec <c>--output-dir /some/path</c>, cette valeur sera utilisée comme
préfixe. Sinon, la valeur par défaut de Gentoo, soit
<path>/var/tmp/kernel-output/KV</path>, sera utilisée.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Répercussions</title>
<section>
<body>

<p>
Une fois les sources configurées pour utiliser un répertoire de sortie
différent, les changements au système de compilation seront essentiellement
transparents lors de la configuration et de l'installation des noyaux.
Toutefois, vous devriez connaître les changements concernant l'emplacement de
quelques fichiers clés. Les principaux fichiers concernés sont .config et les
fichiers bzImage générés après la compilation d'un noyau. Le tableau ci-dessous
indique les anciens et nouveaux emplacements de ces fichiers clés. Ce tableau
correspond à un noyau 2.6.4 dont les fichiers de sortie seraient placés dans le
chemin par défaut de Gentoo&nbsp;: <path>/var/tmp/kernel-output/2.6.4</path>.
</p>

<table>
<tr>
  <th>Ancien emplacement du fichier</th>
  <th>Nouvel emplacement du fichier</th>
</tr>
<tr>
  <ti>/usr/src/linux/.config</ti>
  <ti>/var/tmp/kernel-output/2.6.4/.config</ti>
</tr>
<tr>
  <ti>/usr/src/linux/arch/i386/boot/bzImage</ti>
  <ti>/var/tmp/kernel-output/2.6.4/arch/i386/boot/bzImage</ti>
</tr>
</table>

<p>
Ce changement d'emplacement est important. Deux tâches sont grandement
affectées par les nouveaux emplacements, soit la copie de la configuration d'un
noyau à l'endroit approprié lors de la mise à jour des sources, et la copie
d'un fichier bzImage nouvellement compilé dans <path>/boot</path>. Vous devez 
porter une attention particulière lors de la copie de votre fichier .config, 
qui doit se faire du répertoire de sortie du noyau original vers le répertoire 
de sortie du nouveau noyau. Voici un exemple de mise à jour de 
vanilla-sources-2.6.4 à vanilla-sources-2.6.5 illustrant comment une mise à 
jour du noyau devrait se dérouler lorsque koutput est utilisé&nbsp;:
</p>

<note>
Nous supposons que le préfixe des répertoires de sortie est
<path>/var/tmp/kernel-output</path> et que les sources des deux noyaux sont
déjà installées.
</note>

<pre caption="Mise à jour du noyau avec koutput">
# <i>cp /var/tmp/kernel-output/2.6.4/.config /var/tmp/kernel-output/2.6.5/</i>
<comment>Copiez votre .config dans le nouveau répertoire de sortie.</comment>
# <i>config-kernel --set-symlink 2.6.5</i>
# <i>cd /usr/src/linux</i>
<comment>Placez-vous dans l'arbre des nouvelles sources.</comment>
# <i>make oldconfig</i>
# <i>make &amp;&amp; make modules_install</i>
<comment>Compilez votre nouveau noyau et ses modules.</comment>
# <i>mount /boot</i>
# <i>cp /var/tmp/kernel-output/2.6.5/arch/i386/boot/bzImage /boot/</i>
# <i>umount /boot</i>
<comment>Installez la nouvelle image du noyau.</comment>
</pre>

<p>
Les modules du noyau qui se compilent avec les sources du noyau et qui
utilisent le nouveau système ne demandent aucune intervention de votre part.
Installez simplement le paquet du module désiré comme d'habitude avec emerge.
Au moment où ces lignes sont écrites, certains modules doivent encore être
convertis au nouveau système, d'autres sont encore dans une phase de test. Si
la version stable d'un paquet d'un module du noyau ne fonctionne pas, essayez
d'abord d'installer la version <b>~arch</b>&nbsp;:
</p>

<pre>
# <i>ACCEPT_KEYWORDS='~x86' emerge foo</i>
<comment>La commande ci-dessus installe la version de test du paquet foo.</comment>
</pre>

<p>
Si l'installation échoue toujours, veuillez rapporter ce bogue sur <uri
link="http://bugs.gentoo.org">http://bugs.gentoo.org</uri>&nbsp;; le module du
noyau sera alors mis à jour aussi rapidement que possible pour utiliser le
nouveau système.
</p>

</body>
</section>
</chapter>
</guide>
