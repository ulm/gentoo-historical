<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/handbook/hb-install-filesystems.xml,v 1.4 2014/08/06 15:15:58 jaaf Exp $ -->
<!DOCTYPE included SYSTEM "/dtd/guide.dtd">

<included>
<version>13</version>
<date>2014-01-23</date>

<section id="filesystemsdesc">
<title>Les systèmes de fichiers</title>
<body>

<p test="contains('x86 Alpha',func:keyval('arch'))">
Le noyau Linux prend en charge de nombreux systèmes de fichiers.
Ci-dessous, nous décrirons brièvement ext2, ext3, ext4, ReiserFS, XFS et JFS, qui
sont les plus utilisés sur les systèmes Linux.
</p>

<p test="func:keyval('arch')='IA64'">
Le noyau Linux prend en charge de nombreux systèmes de fichiers.
Ci-dessous, nous décrirons brièvement VFAT, ext2, ext3, ext4, ReiserFS, XFS et JFS,
qui sont les plus utilisés sur les systèmes Linux.
</p>

<p test="func:keyval('arch')='AMD64'">
Plusieurs systèmes de fichiers sont disponibles. Certains d'entre eux sont
stables sur architecture amd64, d'autres non. Les systèmes de fichiers suivants
sont considérés stables : ext2, ext3, ext4 et XFS. JFS et ReiserFS fonctionnent
mais n'ont pas été intensivement testés. Si vous vous sentez l'âme aventureuse,
vous pouvez éventuellement tester les systèmes de fichiers non supportés.
</p>

<p test="func:keyval('arch')='arm'">
Plusieurs systèmes de fichiers sont disponibles. Certains d'entre eux sont
stables sur architecture arm, d'autres non. Les systèmes de fichiers suivants
sont considérés stables : ext2, ext3 et ext4. JFS, XFS et ReiserFS fonctionnent
mais n'ont pas été intensivement testés. Si vous vous sentez l'âme aventureuse,
vous pouvez éventuellement tester les systèmes de fichiers non supportés.
</p>

<p test="func:keyval('arch')='HPPA'">
Plusieurs systèmes de fichiers sont disponibles. Ext2, ext3, ext4, XFS et ReiserFS
sont considérés stables sur architecture HPPA. Les autres sont très
expérimentaux.
</p>

<p test="func:keyval('arch')='MIPS'">
Plusieurs systèmes de fichiers sont disponibles. Ext2, ext3, ext4 et ReiserFS sont
considérés stables sur architecture MIPS. Les autres sont très expérimentaux.
</p>

<p test="func:keyval('arch')='PPC'">
Plusieurs systèmes de fichiers sont disponibles sur PowerPC, notamment ext2,
ext3, ext4, XFS et ReiserFS, chacun avec leurs avantages et leurs inconvénients.
</p>

<note test="func:keyval('arch')='PPC64'">
Plusieurs systèmes de fichiers sont disponibles. Ext2, ext3 et ReiserFS sont
inclus dans les noyaux des CD d'installation. JFS et XFS sont disponibles en
tant que modules.
</note>

<p test="func:keyval('arch')='SPARC'">
Plusieurs systèmes de fichiers sont disponibles. Certains d'entre eux sont
stables sur architecture SPARC. Ext2, ext3 et ext4, par exemple, fonctionnent très
bien. Les autres ne fonctionnent pas forcément correctement.
</p>

<note test="func:keyval('arch')='Alpha'">
<c>aboot</c> ne supporte que les systèmes de fichiers <b>ext2</b> et
<b>ext3</b>.
</note>

</body>
<body>

<p test="func:keyval('arch')='IA64'">
<b>VFAT</b> est le système de fichiers de MS-DOS, mis à jour pour supporter les
noms de fichiers longs. Il est aussi le seul type de système de fichiers
lisible par le firmware EFI qui se trouve sur les systèmes IA64. La partition
de démarrage des systèmes IA64 doit donc forcément être en VFAT, mais vous
pouvez utiliser les autres systèmes de fichiers pour vos partitions de données.
</p>

<p>
<b>ext2</b> est le système de fichiers original de Linux mais n'a pas de
métadonnées journalisées, ce qui signifie que la routine de vérification du
système de fichiers ext2 au démarrage peut prendre beaucoup de temps. À
présent, vous avez le choix entre plusieurs systèmes de fichiers journalisés
qui peuvent être vérifiés très rapidement et sont généralement préférés à leurs
homologues non journalisés.  Les systèmes de fichiers journalisés évitent de
devoir attendre longtemps quand vous démarrez votre système et que vos systèmes
de fichiers sont dans un état incohérent.
</p>

<p>
<b>ext3</b> est la version journalisée du système de fichiers ext2, qui fournit
des métadonnées journalisées pour une récupération rapide en plus d'autres
modes journalisés comme la journalisation de données complètes et ordonnées.
Il utilise un index à base de HTree qui permet d'obtenir d'excellentes
performances dans pratiquement toutes les situations. En résumé, ext3 est un
système de fichiers très bon et très fiable. 
</p>

<p test="contains('x86 Alpha MIPS AMD64 arm IA64 SPARC HPPA PPC PPC64',func:keyval('arch'))">
<b>ext4</b> est un système de fichier dérivant de ext3 et y apportant de nouvelles fonctionnalités,
une amélioration des performances et la suppression de la taille limite, ceci moyennant des changements modérés au formatage du disque. Il peut couvrir des volumes allant jusqu'à 1 EB avec une taille maximum de fichier de 16 TB. À la place de la classique table d'allocation de blocs des systèmes ext2/3, ext4 utilise les
<uri link="http://en.wikipedia.org/wiki/Extent_%28file_systems%29">extents</uri>, ce qui améliore la performance des fichiers de grande taille et réduit la fragmentation. Ext4 offre également des algorythmes sophistiqués d'allocation de blocs (allocation retardée et allocation multi-blocs)  donnant ainsi au pilote du système de fichiers plus de moyens d'optimiser l'arrangement des données sur le disque. Le système de fichiers ext4 est un compromis entre la stabilité d'un code pour la production et le désir d'introduire des extensions dans un système de fichiers vieux de près de 10 ans.  Ext4 est le système de fichier recommandé pour les systèmes de fichiers non spécifiques sur toutes les architectures.
</p>
<p>
Si vous avez l'intention d'installer Gentoo sur une petite partition (inférieure à 8 GO), vous devez indiquer à ext2, ext3 ou ext4 (si disponibles) de réserver suffisamment d'inodes à la création du système de fichiers. L'application <c>mke2fs</c> utilise le paramètre "bytes-per-inodes" pour calculer combien d'inodes un système de fichiers doit avoir. En lançant 
<c>mke2fs -T small /dev/&lt;device&gt;</c> (ext2) ou <c>mke2fs -j -T small
/dev/&lt;device&gt;</c> (ext3/ext4) le nomble d'inodes sera généralement quadruple pour un système de fichiers donné lorsque son  "bytes-per-inode" passe de 
un tous les 16 kO à un tous les 4 kO. Vous pouvez peaufiner cela encore plus en utilisant 
<c>mke2fs -i &lt;ratio&gt; /dev/&lt;device&gt;</c> (ext2) ou <c>mke2fs -j
-i &lt;ratio&gt; /dev/&lt;device&gt;</c> (ext3/ext4).
</p>
</body>
<body test="not(func:keyval('arch')='SPARC')">

<p test="not(func:keyval('arch')='PPC')">
<b>JFS</b> est le système de fichiers journalisé à hautes performances d'IBM.
C'est un système de fichiers basé sur les B+tree léger, rapide et sûr avec de
bonnes performances dans diverses configurations.
</p>

<p>
<b>ReiserFS</b> est un système de fichiers journalisé basé sur les B+tree qui a
de très bonnes performances, spécialement dans le cas de petits fichiers au
prix d'une plus grande consommation de cycles CPU. ReiserFS est apparemment
moins maintenu que les autres systèmes de fichiers.
</p>

<p>
<b>XFS</b> est un système de fichiers avec des métadonnées journalisées qui
possède un ensemble de fonctionnalités robustes et qui est optimisé pour la
mise à l'échelle. XFS ne semble pas pardonner les éventuels problèmes de
matériel.
</p>

</body>
</section>
</included>
