<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/handbook/hb-working-variables.xml,v 1.4 2004/08/03 16:23:30 cam Exp $ -->

<sections>
<section>
<title>Variables d'environnement&nbsp;?</title>
<subsection>
<title>Que sont-elles&nbsp;?</title>
<body>

<p>
Une variable d'environnement est un objet nommé qui contient des informations
utilisées par une ou plusieurs applications. Beaucoup d'utilisateurs 
(particulièrement les nouveaux Linuxiens) trouvent que c'est un peu trop compliqué
et ingérable. C'est bien sûr faux&nbsp;: en utilisant des variables
d'environnement, on peut changer facilement la valeur d'une configuration pour
une ou plusieurs applications.
</p>

</body>
</subsection>
<subsection>
<title>Exemples importants</title>
<body>

<p>
Le tableau suivant liste un certain nombre de variables utilisées par le système
Linux et décrit leur utilisation. Des exemples de valeurs seront présentés après
le tableau.
</p>

<table>
<tr>
  <th>Variable</th>
  <th>Description</th>
</tr>
<tr>
  <ti>PATH</ti>
  <ti>
    Cette variable contient une liste de répertoires séparés par des deux-points
    dans lesquels le système cherche des fichiers exécutables. Si vous entrez le
    nom d'un exécutable (tel que <c>ls</c>, <c>rc-update</c> ou <c>emerge</c>),
    mais que cet exécutable n'est pas situé dans un des répertoires listés,
    votre système ne l'exécutera pas (tant que vous n'aurez pas spécifié le
    chemin complet en ligne de commande, tel que <c>/bin/ls</c>).
  </ti>
</tr>
<tr>
  <ti>ROOTPATH</ti>
  <ti>
    Cette variable a la même fonction que <c>PATH</c>, mais celle-ci liste les
    répertoires qui doivent être parcourus lorsque l'utilisateur root entre une
    commande.
  </ti>
</tr>
<tr>
  <ti>LDPATH</ti>
  <ti>
    Cette variable contient une liste de répertoires séparés par des deux-points
    dans lesquels l'éditeur de liens dynamique cherche les bibliothèques.
  </ti>
</tr>
<tr>
  <ti>MANPATH</ti>
  <ti>
    Cette variable contient une liste de répertoires séparés par des deux-points
    dans lesquels la commande <c>man</c> cherche les pages man.
  </ti>
</tr>
<tr>
  <ti>INFODIR</ti>
  <ti>
    Cette variable contient une liste de répertoires séparés par des deux-points
    dans lesquels la commande <c>info</c> cherche les pages info.
  </ti>
</tr>
<tr>
  <ti>PAGER</ti>
  <ti>
    Cette variable contient le chemin vers le programme utilisé pour lister le
    contenu des fichiers (tel que <c>less</c> ou <c>more</c>).
  </ti>
</tr>
<tr>
  <ti>EDITOR</ti>
  <ti>
    Cette variable contient le chemin vers le programme utilisé pour éditer le
    contenu des fichiers (tel que <c>nano</c> ou <c>vi</c>).
  </ti>
</tr>
<tr>
  <ti>KDEDIRS</ti>
  <ti>
    Cette variable contient une liste de répertoires séparés par des deux-points
    qui contiennent les éléments spécifiques à KDE.
  </ti>
</tr>
<tr>
  <ti>CLASSPATH</ti>
  <ti>
    Cette variable contient une liste de répertoires séparés par des deux-points
    qui contiennent les classes Java.
  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT</ti>
  <ti>
    Cette variable contient une liste de répertoires séparés par des
    <e>espaces</e> qui doivent être préservés par Portage pendant les mises à
    jour.
  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT_MASK</ti>
  <ti>
    Cette variable contient une liste de répertoires séparés par des
    <e>espaces</e> qui ne doivent pas être préservés par Portage pendant les
    mises à jour.
  </ti>
</tr>
</table>

<p>
Voici un exemple de définition de toutes ces variables&nbsp;:
</p>

<pre caption="Exemple de définitions">
PATH="/bin:/usr/bin:/usr/local/bin:/opt/bin:/usr/games/bin"
ROOTPATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
LDPATH="/lib:/usr/lib:/usr/local/lib:/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
MANPATH="/usr/share/man:/usr/local/share/man"
INFODIR="/usr/share/info:/usr/local/share/info"
PAGER="/usr/bin/less"
EDITOR="/usr/bin/vim"
KDEDIRS="/usr"
CLASSPATH="/opt/blackdown-jre-1.4.1/lib/rt.jar:."
CONFIG_PROTECT="/usr/X11R6/lib/X11/xkb /opt/tomcat/conf \
                /usr/kde/3.1/share/config /usr/share/texmf/tex/generic/config/ \
                /usr/share/texmf/tex/platex/config/ /usr/share/config"
CONFIG_PROTECT_MASK="/etc/gconf
</pre>

</body>
</subsection>
</section>
<section>
<title>Définir des variables globalement</title>
<subsection>
<title>Le répertoire /etc/env.d</title>
<body>

<p>
Pour centraliser les définitons de ces variables, la distribution Gentoo utilise le
répertoire <path>/etc/env.d</path>. Dans ce répertoire, vous trouverez un certain
nombre de fichiers tels que <path>00basic</path>, <path>05gcc</path>, etc. qui
contiennent les variables requises par les applications mentionnées dans leur
nom.
</p>

<p>
Par exemple, quand vous installez <c>gcc</c>, un fichier nommé
<path>05gcc</path> est créé par l'ebuild et contient les définitions des
variables suivantes&nbsp;:
</p>

<pre caption="/etc/env.d/05gcc">
PATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/info"
CC="gcc"
CXX="g++"
LDPATH="/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
</pre>

<p>
Les autres distributions vous disent de changer ou d'ajouter ces variables
d'environnement dans <path>/etc/profile</path> ou ailleurs. Par contre, Gentoo
vous facilite (et aide Portage) la maintenance et l'administration de ces
variables d'environnement, ce qui vous évite de vous soucier des nombreux
fichiers qui peuvent contenir ces variables d'environnement.
</p>

<p>
Par exemple, lorsque <c>gcc</c> est mis à jour, le fichier
<path>/etc/env.d/05gcc</path> est aussi mis à jour sans que l'utilisateur ne
fasse quoi que se soit.
</p>

<p>
Cela n'est pas uniquement profitable à Portage, mais aussi à vous, en tant
qu'utilisateur. Occasionnellement, vous serez amené à définir des variables
d'environnement pour tout le système. Par exemple, avec la variable
<c>http_proxy</c>. Au lieu de vous embêter avec <path>/etc/profile</path>,
vous devez juste créer un fichier (<path>/etc/env.d/99local</path>)
et y entrer vos définitions&nbsp;:
</p>

<pre caption="/etc/env.d/99local">
http_proxy="proxy.server.com:8080"
</pre>

<p>
En utilisant le même fichier pour toutes vos variables, vous avez une vue
d'ensemble aisée de toutes les variables que vous avez définies.
</p>

</body>
</subsection>
<subsection>
<title>Le script env-update</title>
<body>

<p>
Plusieurs fichiers dans <path>/etc/env.d</path> définissent la variable
<c>PATH</c>. Ce n'est pas une erreur&nbsp;: quand vous lancez <c>env-update</c>, celui-ci
listera les définitions avant de mettre à jour les variables d'environement,
ainsi il aide les paquets (et les utilisateurs) à ajouter leurs propres
variables d'environnement sans interférer avec les valeurs déjà définies.
</p>

<p>
Le script <c>env-update</c> liste les valeurs des fichiers de
<path>/etc/env.d</path> par ordre alphabétique. C'est pourquoi beaucoup de
fichiers dans <path>/etc/env.d</path> commencent par un nombre.
</p>

<pre caption="Ordre de mise à jour par env-update">
         00basic        99kde-env       99local
     +-------------+----------------+-------------+
PATH="/bin:/usr/bin:/usr/kde/3.2/bin:/usr/local/bin"
</pre>

<p>
Quand vous lancez <c>env-update</c>, le script crée toutes les variables
d'environnement et les place dans <path>/etc/profile.env</path> (qui est utilisé
par <path>/etc/profile</path>). Il extrait aussi les informations de la variable
<c>LDPATH</c> et les utilise pour créer <path>/etc/ld.so.conf</path>. Après
cela, il lance <c>ldconfig</c> pour créer le fichier
<path>/etc/ld.so.cache</path> utilisé par l'éditeur de liens dynamique.
</p>

<p>
Si vous voulez connaître le résultat de <c>env-update</c> immédiatement après
son exécution, lancez la commande suivante pour mettre votre système à jour.
Les utilisateurs qui ont installé Gentoo eux-même se souviendront sûrement
que cela se trouvait dans les instruction d'installation&nbsp;:
</p>

<pre caption="Mettre l'environnement à jour">
# <i>env-update &amp;&amp; source /etc/profile</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Définir des variables localement</title>
<subsection>
<title>Spécifiques à un utilisateur</title>
<body>

<p>
Vous n'avez pas toujours besoin de définir des variables d'environnement
globalement. Par exemple, vous pourriez avoir besoin d'ajouter
<path>/home/my_user/bin</path> à la variable <c>PATH</c>, mais vous ne voulez
pas que les autres utilisateurs de votre système l'aient aussi dans <c>PATH</c>.
Si vous voulez définir une variable d'environnement localement, vous devriez
utiliser <path>~/.bashrc</path> ou <path>~/.bash_profile</path>&nbsp;:
</p>

<pre caption="Étendre PATH pour un usage local avec ~/.bashrc">
PATH="${PATH}:/home/my_user/bin"
</pre>

<p>
Quand vous vous réidentifierez, votre variable <c>PATH</c> sera mise à jour.
</p>

</body>
</subsection>
<subsection>
<title>Spécifiques à une session</title>
<body>

<p>
Quelquefois, une définition plus spécifique est requise. Vous voudriez être
capable d'utiliser des binaires d'un répertoire temporaire que vous avez créé
sans utiliser le chemin complet ou éditer <path>~/.bashrc</path> qui vous
prendrait trop de temps.
</p>

<p>
Dans ce cas-ci, vous pouvez juste définir la variable <c>PATH</c> dans votre
session courante en utilisant la commande <c>export</c>. Tant que vous ne vous
serez pas déconnecté, la variable <c>PATH</c> utilisera la valeur temporaire.
</p>

<pre caption="Définir une variable d'environnement spécifique à une session">
# <i>export PATH="${PATH}:/home/my_user/tmp/usr/bin"</i>
</pre>

</body>
</subsection>
</section>
</sections>
