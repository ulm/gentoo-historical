<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- Le contenu de ce document est sous licence CC-BY-SA. -->
<!-- Voir http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/handbook/hb-net-functions.xml,v 1.8 2013/03/14 19:45:37 swift Exp $ -->

<sections>

<abstract>
Si vous vous sentez l'âme aventureuse, ajoutez vos propres fonctions de gestion
du réseau.
</abstract>

<version>9</version>
<date>2011-10-30</date>
<section>
<title>Fonctions accrochables standard</title>
<body>

<p>
Des points d'accroche sont prévus pour quatre fonctions, qui peuvent être définies par l'administrateur dans <path>/etc/conf.d/net</path>,  et sont appelées
lors du <c>démarrage/arrêt</c> du réseau. Ces fonctions sont appelées en
spécifiant le nom de l'interface en premier, afin de pouvoir contrôler plusieurs
interfaces avec un même script.
</p>

<p>
La valeur renvoyée par les fonctions <c>preup()</c> et <c>predown()</c> doit
être 0 (succès) pour que la configuration ou la déconfiguration de l'interface
puisse continuer. Si <c>preup()</c> renvoie autre chose que zéro, alors la
configuration de l'interface sera annulée. Si <c>predown()</c> renvoie autre
chose que zéro, alors l'interface ne sera pas autorisée à être désactivée.
</p>

<p>
La valeur renvoyée par les fonctions <c>postup()</c> et <c>postdown()</c> n'ont
pas d'importance car il n'y a rien à faire après.
</p>

<p>
La variable <c>${IFACE}</c> contient le nom de l'interface qui doit être activée
ou désactivée. La variable <c>${IFVAR}</c> contient une version utilisable dans
un nom de variable Bash du nom de l'interface.
</p>

<pre caption="exemples de fonctions  pre/post up/down">
preup() {
  <comment># On teste l'état du lien de l'interface avant de l'activer. Cela ne
  # fonctionne qu'avec certaines cartes réseaux et utilise le paquet ethtool.</comment>
  if ethtool ${IFACE} | grep -q 'Link detected: no'; then
    ewarn "No link on ${IFACE}, aborting configuration"
    return 1
  fi

  <comment># On n'oublie surtout pas de renvoyer 0 en cas de succès :</comment>
  return 0
}

predown() {
  <comment># La fonction predown par défaut vérifie que le système de fichiers / n'est
  # pas monté en NFS et bloque l'arrêt de l'interface si c'est le cas. Sachez
  # que si vous spécifiez votre fonction predown, ceci ne sera plus vérifié.
  # Voici la fonction, au cas où vous voudriez la voir...</comment>
  if is_net_fs /; then
    eerror "root filesystem is network mounted -- can't stop ${IFACE}"
    return 1
  fi

  <comment># On n'oublie surtout pas de renvoyer 0 en cas de succès :</comment>
  return 0
}

postup() {
  <comment># Cette fonction pourrait servir, par exemple, à activer une redirection DNS
  # dynamique ou bien à récupérer des mails une fois que l'interface est
  # activée.</comment>
       return 0
}

postdown() {
  <comment># Cette fonction est surtout présente pour faire un compte rond... Je n'ai pas
  # encore trouvé quelque chose d'intéressant à faire avec ;-)</comment> 
  return 0
}
</pre>

<note>
pour plus d'information sur la façon d'écrire vos propres fonctions accrochables, reportez-vous à 
<path>/usr/share/doc/openrc-*/net.example.bz2</path>.
</note>

</body>
</section>

<section>
<title>Fonction accrochables pour Wireless Tools</title>
<body>

<note>
cela ne marchera pas avec WPA Supplicant, mais les variables <c>${ESSID}</c> et
<c>${ESSIDVAR}</c> sont disponibles dans la fonction <c>postup()</c>.
</note>

<p>
Des points d'accroche sont prévus pour deux fonctions, définies dans <path>/etc/conf.d/net</path>, qui sont appelées avant et après la connexion à un point
d'accès et peuvent être personnalisées. Les fonctions sont appelées en spécifiant
le nom de l'interface en premier afin de pouvoir contrôler plusieurs interfaces
avec la même fonction.
</p>

<p>
La valeur renvoyée par la fonction <c>preassociate()</c> doit être 0 pour
indiquer que la configuration ou la déconfiguration de l'interface peut
continuer. Si <c>preassociate()</c> renvoie autre chose que zéro, alors la
configuration de l'interface sera annulée.
</p>

<p>
La valeur renvoyée par la fonction <c>postassociate()</c> est ignorée, car il
n'y a plus rien à faire après.
</p>

<p>
La variable <c>${ESSID}</c> contient le nom exact de l'ESSID du point d'accès
auquel on se connecte. <c>${ESSIDVAR}</c> contient ce même nom, mais transformé
afin qu'il puisse être utilisé dans le nom d'une variable Bash.
</p>

<pre caption="exemples de fonctions  pre/post association dans /etc/conf.d/net">
preassociate() {
  <comment># Le code ci-dessous ajoute deux variables de configuration leap_user_ESSID et
  # leap_pass_ESSID. Lorsqu'elles correspondent à l'ESSID auquel on se connecte,
  # on lance le script Cisco Leap.</comment>

  local user pass
  eval user=\"\$\{leap_user_${ESSIDVAR}\}\"
  eval pass=\"\$\{leap_pass_${ESSIDVAR}\}\"

  if [[ -n ${user} &amp;&amp; -n ${pass} ]]; then
    if [[ ! -x /opt/cisco/bin/leapscript ]]; then
      eend "For LEAP support, please emerge net-misc/cisco-aironet-client-utils"
      return 1
    fi
    einfo "Waiting for LEAP Authentication on \"${ESSID//\\\\//}\""
    if /opt/cisco/bin/leapscript ${user} ${pass} | grep -q 'Login incorrect'; then
      ewarn "Login Failed for ${user}"
      return 1
    fi
  fi

  return 0
}

postassociate() {
  <comment># Cette fonction est surtout présente pour faire un compte rond... Je n'ai pas
  # encore trouvé quelque chose d'intéressant à faire avec ;-)</comment> 

  return 0
}
</pre>

<note>
les variables <c>${ESSID}</c> et <c>${ESSIDVAR}</c> ne sont pas disponibles dans
les fonctions <c>predown()</c> et <c>postdown()</c>.
</note>
<note>
pour plus d'information sur la façon d'écrire vos propres fonctions, reportez-vous à 
<path>/usr/share/doc/openrc-*/net.example.bz2</path>.
</note>
</body>
</section>

</sections>
