<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/handbook/hb-install-mips-disk.xml,v 1.1 2004/04/03 01:18:03 neysx Exp $ -->

<sections>
<section>
<title>Introduction aux périphériques de bloc</title>
<subsection>
<title>Les périphériques de bloc</title>
<body>

<p>
Nous allons regarder de manière approfondie la question des disques sous Gentoo
Linux et sous Linux en général, y compris les systèmes de fichiers de Linux,
les partitions et les périphériques de bloc.  Ensuite, une fois que vous serez
familiarisé avec les entrées et sorties des disques et des systèmes de
fichiers, vous serez guidé pour réaliser la mise en place des partitions et des
systèmes de fichiers pour votre installation de Gentoo Linux.
</p>

<p>
Pour commencer, nous allons présenter les <e>périphériques de bloc</e>.  Le
plus célèbre étant certainement celui qui représente le premier disque dur SCSI
connu sous le nom <path>/dev/sda</path>.
</p>

<p>
Les périphériques de bloc cités ci-dessus représentent une interface abstraite
vers les disques. Les programmes utilisateur peuvent les utiliser pour
interagir avec votre disque sans devoir se tracasser si vos périphériques sont
IDE, SCSI ou autres.  Le programme peut simplement utiliser l'espace sur le
disque comme un groupe de blocs continus de 512 octets accessibles
aléatoirement.
</p>

</body>
</subsection>
<subsection>
<title>Partitions</title>
<body>

<p>
Bien qu'il soit théoriquement possible d'utiliser un disque complet pour héberger
votre système Linux, ceci n'est pratiquement jamais fait.  À la place, les 
périphériques de bloc sont divisés pour être plus petits et plus facilement 
gérables.  Ces subdivisions sont appelées <e>partitions</e>. 
</p>

</body>
</subsection>
</section>
<section>
<title>Concevoir un plan de partitionnement</title>
<subsection>
<title>Combien et de quelle taille&nbsp;?</title>
<body>

<p>
Le nombre de partitions dépend beaucoup de votre environnement.  Par exemple,
si vous avez beaucoup d'utilisateurs, vous désirerez essentiellement avoir
votre <path>/home</path> séparé afin d'améliorer la sécurité et de simplifier
les sauvegardes.  Si vous installez Gentoo comme serveur mail, votre
<path>/var</path> devrait être séparé étant donné que tous les mails sont
stockés dans <path>/var</path>.  Un bon choix de système de fichiers va vous
permettre d'améliorer les performances.  Les serveurs de jeu auront un
<path>/opt</path> séparé étant donné que la plupart des serveurs de jeux y sont
installés. La raison est la même que pour <path>/home</path>&nbsp;: sécurité et
sauvegarde.
</p>

<p>
Comme vous pouvez le voir, cela dépend beaucoup de ce que vous souhaitez faire.
Séparer les partitions ou volumes procure les avantages suivants&nbsp;: 
</p>

<ul>
<li>
  Vous pouvez choisir le système de fichiers le plus performant pour chaque partition
  ou volume.
</li>
<li>
  Votre système entier ne risque pas d'arriver à court d'espace disque libre si
  un outil défectueux sature l'espace disque d'une partition ou d'un volume.
</li>
<li>
  Si nécessaire, les vérifications des systèmes de fichiers durent moins longtemps, 
  vu que de multiples vérifications peuvent être faites en parallèle (quoique cet
  avantage est plus important avec plusieurs disques qu'avec plusieurs 
  partitions).
</li>
<li>
  La sécurité peut être améliorée en montant certaines partitions ou volumes
  en lecture seule, nosuid (les bits suid sont ignorés), noexec (les bits 
  exécutables sont ignorés), etc.
</li>
</ul>

<p>
Cependant, de multiples partitions ont un gros désavantage&nbsp;: si elles ne
sont pas configurées correctement, vous risquez d'obtenir un système avec
beaucoup d'espace libre sur une partition et plus du tout sur une autre.
</p>

</body>
</subsection>
</section>

<section>
<title>Partitionner votre disque avec fdisk</title>
<subsection>
<title>Creation d'un SGI Disk Label</title>
<body>

<p>
Tous les disques dans un système SGI nécessitent un <e>SGI Disk Label</e> qui 
est similaire aux disklabels Sun &amp; MS-DOS ("etiquette de
disque"). Les informations sur les partitions du disque y sont stockées.  Créer
un nouveau SGI Disk Label va créer deux partitions spéciales sur le disque&nbsp;:
</p>

<ul>
  <li>
    <e>SGI Volume Header</e> (9e partition)&nbsp;: cette partition est importante.
    C'est là que sera copiée l'image du noyau. Pour stocker les images de noyau,
    vous allez utiliser l'outil connu sous le nom de <c>dvhtool</c> pour copier
    les images de noyau sur cette partition.  Vous serez alors capable de démarrer
    des noyaux à partir de cette partition via le SGI PROM Monitor.
   </li>
  <li>
    <e>SGI Volume</e> (11e partition)&nbsp;: le but de cette partition est similaire 
    à la 3e partition "Whole Disk" (disque entier) du Sun Disklabel.  Cette 
    partition occupe le disque entier et doit rester telle qu'elle.  Elle n'a 
    pas d'autre but que d'assister la PROM dans certaines opérations non
    documentées (c'est utilisé par IRIX d'une manière ou d'une autre).
    </li>
</ul>

<warn>
Le SGI Volume Header (entête de volume SGI) <e>doit</e> commencer au cylindre 0.
Ne pas faire ceci signifie que vous ne pourrez pas démarrer à partir du disque.
</warn>

<p>
La suite est un exemple tiré d'une session <c>fdisk</c>.  Lisez et adaptez-la
à vos besoins.
</p>

<pre caption="Création d'un SGI Disklabel">
# <i>fdisk /dev/sda</i>

Command (m for help): <i>x</i>

Expert command (m for help): <i>m</i>
Command action
   b   move beginning of data in a partition
   c   change number of cylinders
   d   print the raw data in the partition table
   e   list extended partitions
   f   fix partition order
   g   create an IRIX (SGI) partition table
   h   change number of heads
   m   print this menu
   p   print the partition table
   q   quit without saving changes
   r   return to main menu
   s   change number of sectors/track
   v   verify the partition table
   w   write table to disk and exit

Expert command (m for help): <i>g</i>
Building a new SGI disklabel. Changes will remain in memory only,
until you decide to write them. After that, of course, the previous
content will be unrecoverably lost.

Expert command (m for help): <i>r</i>

Command (m for help): <i>p</i>

Disk /dev/sda (SGI disk label): 64 heads, 32 sectors, 17482 cylinders
Units = cylinders of 2048 * 512 bytes

----- partitions -----
Pt#     Device  Info     Start       End   Sectors  Id  System
 9:  /dev/sda1               0         4     10240   0  SGI volhdr
11:  /dev/sda2               0     17481  35803136   6  SGI volume
----- Bootinfo -----
Bootfile: /unix
----- Directory Entries -----

Command (m for help):
</pre>

<note>
Si votre disque a déjà un SGI Disklabel, fdisk ne vous autorisera pas
à créer un nouveau label.  Il y a deux moyens de s'en sortir.  Le premier est de
créer un label Sun ou MS-DOS, écrire les changements sur disque et relancer fdisk.
L'autre est d'écraser la table de partitions avec des données nulles avec la 
commande suivante&nbsp;: <c>dd if=/dev/zero of=/dev/sda bs=512 count=1</c>.
</note>

</body>
</subsection>
<subsection>
<title>Donner la bonne taille au SGI Volume Header</title>
<body>

<p>
Maintenant que le SGI Disklabel est créé, les partitions peuvent être définies.
Dans l'exemple précédent, il y a déjà deux partitions définies pour vous.  Ce
sont les partitions spéciales mentionnées plus haut et elles ne devraient
normalement pas être altérées.  Cependant, pour installer Gentoo, nous devons
charger plusieurs images de noyau directement dans le volume header puisqu'il
n'y a actuellement pas de chargeur de démarrage SGI supporté dans Portage. 
Le header de volume lui-même peut supporter jusqu'à <e>huit</e> images de 
n'importe quelle taille, avec pour chaque image un nom de maximum huit 
caractères.
</p>

<p>
Le processus pour rendre le header de volume plus grand n'est pas exactement
simple -- il y a pas mal de bidouillage.  On ne peut pas simplement supprimer
et rajouter le volume header à cause du comportement bizarre de fdisk.  Dans
l'exemple fourni ci-dessous, nous allons créer un header de volume de 50 Mo, et
une partition de démarrage de 50 Mo.  Le plan actuel de notre disque peut
varier, mais il ne s'agit ici que de propos illustratifs.
</p>

<pre caption="Redimensionner le SGI Volume Header correctement">
Command (m for help): <i>n</i>
Partition number (1-16): <i>1</i>
First cylinder (5-8682, default 5): <i>51</i>
 Last cylinder (51-8682, default 8682): <i>101</i>
<comment>(Notez que fdisk autorise seulement la partition #1 à être recréée avec 
un minimum du cylindre 5.)</comment>
<comment>(Si vous avez essayé de supprimer et recréer le SGI Volume Header de cette
manière, vous devez avoir rencontré le même problème.)</comment>
<comment>(Dans notre exemple, nous voulons que /boot fasse 50 Mo, c'est pourquoi 
nous commençons au cylindre 51 (souvenez-vous que le Volume Header doit commencer
au cylindre 0), et terminons au cylindre 101, ce qui fait plus ou moins 50 Mo 
,à 5 Mo près).</comment>

Command (m for help): <i>d</i>
Partition number (1-16): <i>9</i>
<comment>(Suppression de la partition #9 (SGI Volume Header))</comment>

Command (m for help): <i>n</i>
Partition number (1-16): <i>9</i>
First cylinder (0-50, default 0): <i>0</i>
 Last cylinder (0-50, default 50): <i>50</i>
<comment>(Recréation de la partition #9, se terminant juste avant la partition #1</comment>
</pre>

</body>
</subsection>
<subsection>
<title>Plan final de partitionnement</title>
<body>

<p>
Une fois que ceci est fait, vous êtes libre de créer le reste de vos partitions
comme bon vous semble.  Une fois que toutes vos partitions sont créées,
assurez-vous que vous avez mis le type de votre partition de swap à
<c>82</c>&nbsp;(type Linux Swap).  Par défaut, elle sera du type <c>83</c>,
Linux Native.
</p>

<p>
Maintenant que vos partitions sont créées, vous pouvez continuer avec 
<uri link="#filesystems">Création des sytèmes de fichiers</uri>.
</p>

</body>
</subsection>
</section>
<section id="filesystems">
<title>Création des sytèmes de fichiers</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Maintenant que vos partitions sont créées, il est temps d'y installer un
système de fichiers. Si vous ne vous souciez pas de quel système de fichiers
choisir et êtes satisfait de ceux que nous utilisons par défaut dans ce manuel,
continuez avec <uri link="#filesystems-apply">Application d'un système de
fichiers à une partition</uri>.  Sinon, continuez à lire pour en apprendre plus
sur les systèmes de fichiers disponibles.
</p>

</body>
</subsection>
<subsection>
<title>Systèmes de fichiers&nbsp;?</title>
<body>

<p>
De nombreux systèmes de fichiers sont disponibles. Ext2 et ext3 sont considérés
stables sur des machines MIPS, les autres systèmes de fichiers sont
expérimentaux. 
</p>

<p>
<b>ext2</b> est le système de fichiers original de Linux mais n'a pas de
metadonnées journalisées, ce qui signifie que la routine de vérification du
système de fichiers ext2 au démarrage peut prendre beaucoup de temps. À
présent, vous avez le choix entre plusieurs systèmes de fichiers journalisés
qui peuvent être vérifiés très rapidement et sont généralement préférés à leurs
homologues non journalisés.  Les systèmes de fichiers journalisés évitent de
devoir attendre longtemps quand vous démarrez votre système et que vos systèmes
de fichiers sont dans un état instable.
</p>

<p>
<b>ext3</b> est la version journalisée du système de fichiers ext2, qui fournit
des metadonnées journalisées pour une récupération rapide en plus d'autres
modes journalisés comme la journalisation de données complètes et ordonnées.
ext3 est un très bon système de fichiers fiable. Il offre généralement des
performances décentes dans la plupart des conditions. Il offre de bonnes
performances dans la plupart des cas grâce à un arbre balancé indexé par clé de
hachage. En résumé, ext3 est un excellent système de fichiers.
</p>

<p>
<b>ReiserFS</b> est un système de fichiers basé sur les B*-tree qui a de très
bonnes performances et qui surpasse ext2 et ext3 dans le cas de l'utilisation
de petits fichiers (fichiers de moins de 4 ko), souvent avec un facteur allant
de 10 à 15.  ReiserFS résiste aussi très bien à la montée en charge et a des
metadonnées journalisées.  Depuis le noyau 2.4.18+, ReiserFS est stable et peut
être utilisé aussi bien dans un système de fichiers destiné à une utilisation
générale et pour des cas extrêmes comme la création de grands systèmes de
fichiers et l'utilisation de nombreux petits fichiers ou de grands fichiers et
répertoires qui contiennent des dizaines de milliers de fichiers.
</p>

<p>
<b>XFS</b> est un système de fichiers avec des métadonnées journalisées qui est
entièrement supporté sous Gentoo Linux avec le noyau xfs-sources.  Il est
fourni avec un riche ensemble de fonctionnalités et est optimisé pour bien
résister à la montée en charge. Nous ne recommandons ce système de fichiers que
pour des systèmes équipés d'unités de stockage SCSI haut de gamme ou connectés
à des serveurs de stockage Fibre Channel, et munis d'un onduleur. Puisque XFS
utilise énormément le cache pour des données transitoires en RAM, les programmes
mal réalisés (ceux qui ne prennent pas les précautions suffisantes quand ils
écrivent les fichiers sur disque, et il y en a quelques uns) peuvent perdre
beaucoup de données si le système s'interrompt de manière inattendue.
</p>

<p>
<b>JFS</b> est un système de fichiers journalisé à hautes performances d'IBM.
Il a été récemment déclaré prêt pour un usage en production, mais il n'y a pas
encore suffisamment d'information pour commenter sa stabilité générale de
manière positive ou négative.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>Application d'un système de fichiers à une partition</title>
<body>

<p>
Pour créer un système de fichiers sur une partition ou un volume, chaque
système de fichiers fournit ses propres outils&nbsp;:
</p>

<table>
<tr>
  <th>Système de fichiers</th>
  <th>Commande de création</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
Par exemple, pour formater la partition de démarrage (<path>/dev/sda1</path>
dans notre exemple) en ext2 et la partition principale (<path>/dev/sda3</path>
dans notre exemple) en ext3, nous utiliserons&nbsp;:
</p>

<pre caption="Application d'un système de fichiers sur une partition">
# <i>mke2fs /dev/sda1</i>
# <i>mke2fs -j /dev/sda3</i>
</pre>

<p>
À présent, créons les systèmes de fichiers sur nos partitions fraîchement
créées.
</p>

</body>
</subsection>
<subsection>
<title>Activation de la partition de mémoire virtuelle</title>
<body>

<p>
<c>mkswap</c> est la commande utilisée pour initialiser la partition de mémoire
virtuelle&nbsp;:
</p>

<pre caption="Création d'une signature de swap">
# <i>mkswap /dev/sda2</i>
</pre>

<p>
Pour activer la partition de swap, utilisez <c>swapon</c>&nbsp;:
</p>

<pre caption="Activation de la partition de swap">
# <i>swapon /dev/sda2</i>
</pre>

<p>
Créez et activez la partition de swap maintenant.
</p>

</body>
</subsection>
</section>
<section>
<title>Monter les partitions</title>
<body>

<p>
Maintenant que nos partitions sont initialisées et contiennent un système de
fichiers, il est temps de les monter avec la commande <c>mount</c>.  N'oubliez
pas de créer les points de montage nécessaires pour toutes les partitions que
vous avez créées. Par exemple, pour monter les partitions de démarrage et
racine&nbsp;:
</p>

<pre caption="Monter les partitions">
# <i>mount /dev/sda3 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/sda1 /mnt/gentoo/boot</i>
</pre>

<note>
Si vous installez <path>/tmp</path> sur une partition séparée, n'oubliez pas de
définir les permissions nécessaires après avoir monté la partition. Utilisez la
commande <c>chmod 1777 /mnt/gentoo/tmp</c>. La même remarque s'applique à
<path>/var/tmp</path>.
</note>

<p>
Nous devons également monter le système de fichiers proc (une interface virtuelle
avec le noyau) sur <path>/proc</path>.  Nous allons d'abord créer le point de
montage <path>/mnt/gentoo/proc</path> et ensuite le monter&nbsp;:
</p>

<pre caption="Création du point de montage /mnt/gentoo/proc">
# <i>mkdir /mnt/gentoo/proc</i>
# <i>mount -t proc none /mnt/gentoo/proc</i>
</pre>

<p>
À présent, continuez avec <uri link="?part=1&amp;chap=5">Installer les fichiers
d'installation de Gentoo</uri>.
</p>

</body>
</section>
</sections>
