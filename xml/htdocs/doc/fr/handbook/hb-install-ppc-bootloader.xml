<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/handbook/hb-install-ppc-bootloader.xml,v 1.22 2014/08/21 16:28:16 jaaf Exp $ -->

<sections>
<abstract>
Il y a plusieurs chargeur de démarrage avec chacun leur configuration. Dans ce chapitre, nous décrirons toutes les possibilités qui s'offrent à vous et la manière de configurer un chargeur de démarrage répondant à vos besoins.
</abstract>
<version>13</version>
<date>2014-08-17</date>

<section>
<title>Choisir un chargeur de démarrage</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Maintenant que votre noyau a été configuré et compilé, et que les fichiers de configuration requis ont été correctement documentés, c'est le moment d'installer un programme qui lancera votre noyau au démarrage du système. Un tel progrmanne est appelé <e>chargeur de démarrage</e>.
</p>
<p>
Le chargeur de démarrage que vous utiliserez dépend du type de machine PPC que vous utilisez.
</p>

<p>
Si vous avez une machine NewWorld Apple ou IBM, vous devez utiliser <uri
link="#yaboot">Yaboot</uri>. Les machines de type OldWorld Apple ont deux
possibilités, <uri link="#bootx">BootX</uri> (recommandé) ou <uri
link="#quik">Quik</uri>. Les machines Pegasos n'ont pas besoin de chargeur de
démarrage, mais vous pouvez utiliser <uri link="#bootcreator">BootCreator</uri>
pour créer un menu de démarrage « SmartFirmware ».
</p>

</body>
</subsection>
</section>

<section id="yaboot">
<title>Par défaut : Yaboot</title>
<subsection>
<title>Introduction</title>
<body>

<impo>
yaboot n'est disponible que sur les systèmes NewWorld Apple ou IBM.
</impo>

<p>
Afin de trouver les périphériques démarrables, yaboot doit pouvoir accéder aux
fichiers de périphériques créés par udev et au système de fichiers sysfs. Ces
deux arborescences se trouvent respectivement dans <path>/dev</path> and
<path>/sys</path>. Le plus simple est de monter ces systèmes de fichiers depuis
le CD d'installation quelque part dans le chroot :
</p>

<pre caption="monter et lier /dev et /sys">
# <i>exit </i> # ceci vous fera quitter l'environnement chroot
# <i>mount --rbind /dev /mnt/gentoo/dev</i>
# <i>mount --rbind /sys /mnt/gentoo/sys</i>
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>/usr/sbin/env-update &amp;&amp; source /etc/profile </i>
</pre>

<p>
Vous pouvez utiliser le <c>yabootconfig</c> inclus pour configurer yaboot
automatiquement. Si vous installez Gentoo sur une machine G5 (où
<c>yabootconfig</c> ne fonctionne pas toujours) ou si vous comptez démarrer sur
USB ou Firewire, vous devrez configurer Yaboot manuellement.
</p>

<note>
vous devrez éditer le fichier  <path>yaboot.conf</path> si vous utilisez genkernel, même si
vous utilisez <c>yabootconfig</c>. La partie noyau du fichier <path>yaboot.conf</path> devrait être
modifiée de cette façon (en utilisant respectivement <path>vmlinux</path> et <path>initrd</path> pour le
nom du noyau et l'image <path>initrd</path> ) :
</note>

<pre caption="ajouter les arguments de démarrage à yaboot.conf">
<comment>###########################################################
## Cette section peut être dupliquée si vous avez plusieurs noyaux ou jeux
## d'options du noyau (remplacez l'image et l'initrd par les noms exacts de
## votre noyau et de votre image initrd).
###########################################################</comment>
image=/boot/<keyval id="genkernel-name"/>
  label=Linux
  root=/dev/ram0
  partition=3
  initrd=/boot/<keyval id="genkernel-initrd"/>
  <comment># Vous pouvez ajouter ici des arguments additionnels tels que
  # rootdelay=10 pour démarrer sur USB/Firewire</comment>
  append="real_root=/dev/sda3"  
  read-only
<comment>##########################################################</comment>
</pre>

<ul>
  <li>
    <uri link="#yabootconfig">Par défaut : utiliser yabootconfig</uri>
  </li>
  <li>
    <uri link="#manual_yaboot">Alternative : configuration manuelle de
    yaboot</uri>
  </li>
</ul>

</body>
</subsection>
<subsection id="#yabootconfig">
<title>Par défaut : utiliser yabootconfig</title>
<body>

<p>
<c>yabootconfig</c> détectera automatiquement vos partitions et créera une
configuration pour des machines à deux ou trois systèmes d'exploitation Linux,
Mac OS ou Max OS X.
</p>

<p>
Pour utiliser <c>yabootconfig</c>, votre disque doit avoir une partition de type
Apple_Bootstrap et le fichier <path>/etc/fstab</path> doit être configuré
correctement par rapport à vos partitions (notez que la partition de Bootstrap
<e>ne doit pas</e> être dans votre fstab). Cela devrait déjà avoir été fait plus
tôt, mais vérifiez <path>/etc/fstab</path> avant de continuer. Maintenant,
installez <c>yaboot</c>.
</p>

<pre caption="installer yaboot">
# <i>emerge yaboot</i>
</pre>

<p>
Maintenant, quittez l'environnement chroot et lancez la commande <c>yabootconfig
--chroot /mnt/gentoo</c>. Lors de son exécution, ce programme confirmera
l'endroit où se trouve la partition de démarrage. Si vous utilisez le
partitionnement de ce guide, cela devrait être /dev/sda2. Tapez <c>Y</c> pour
valider ; si vous n'êtes pas d'accord, vérifiez le fichier
<path>/etc/fstab</path>. Ensuite, <c>yabootconfig</c> utilisera vos fichiers de
configuration pour créer sa propre configuration dans le fichier
<path>/etc/yaboot.conf</path> et exécutera <c>mkofboot</c> pour vous. Ce dernier
est utilisé pour formater la partition de type Apple_Bootstrap et y installer
les fichiers de configuration de yaboot. Ensuite, revenez dans l'environnement
chroot.
</p>

<pre caption="retourner dans l'environnement chrooté">
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>/usr/sbin/env-update &amp;&amp; source /etc/profile</i>
</pre>

<p>
Vous devriez vérifier le contenu du fichier <path>/etc/yaboot.conf</path>. Si
vous le modifiez, par exemple pour changer le système d'exploitation par défaut,
vous devez relancer la commande <c>ybin -v</c> pour enregistrer vos
modifications dans la partition de type Apple_Bootstrap. Chaque fois que vous
modifiez le fichier yaboot.conf, par exemple pour tester un nouveau noyau,
rappelez vous toujours de relancer la commande <c>ybin -v</c> afin de mettre à
jour la partition d'amorçage.
</p>

<p>
Vous pouvez maintenant poursuivre avec le <uri link="#reboot">redémarrage du
système</uri>.
</p>

</body>
</subsection>
<subsection id="manual_yaboot">
<title>Alternative : Configuration manuelle de Yaboot</title>
<body>

<p>
Installez d'abord <c>yaboot</c> sur votre système :
</p>

<pre caption="installer Yaboot">
# <i>emerge yaboot</i>
</pre>

<p>
Vous trouverez un exemple complet du fichier de configuration
<path>yaboot.conf</path> ci-dessous. Adaptez-le à vos besoins. 
</p>

<pre caption = "fichier /etc/yaboot.conf">
<comment>## /etc/yaboot.conf
##
## Lisez « man yaboot.conf » pour plus de détails. Ne continuez pas avant de l'avoir fait !
## Consultez aussi : /usr/share/doc/yaboot/examples pour des exemples de configuration.
##
## Pour un menu « multiple-boot », ajoutez une ou plusieurs de ces options :
## bsd=/dev/sdaX, macos=/dev/sdaY, macosx=/dev/sdaZ

## La partition de démarrage :</comment>

boot=/dev/sda2

<comment>## ofboot indique la partition de démarrage selon Open Firmware.
## Sans cela, yaboot échoue sur un G5 et sur certains G4
## (à moins que vous ne passiez les arguments
## nécessaires au programme mkofboot/ybin).
## hd:X signifie /dev/sdaX.
##
## Pour un G5, décommentez la ligne suivante :

#ofboot=hd:2

## Pour ceux qui démarrent sur Firewire :
# ofboot=fw/node/sbp-2/disk@0:

## Pour ceux qui démarrent sur USB :
# ofboot=usb/disk@0:

## hd: correspond au premier disque trouvé par Openfirmware.</comment>
device=hd:

<comment>## Pour USB ou Firewire, il faut spécifier le nom complet du périphérique.
## On peut s'aider d'ofpath, inclu dans yaboot.

# device=fw/node@0001d200e00d0207/sbp-2@c000/disk@0:
</comment>

delay=5
defaultos=macosx
timeout=30
install=/usr/lib/yaboot/yaboot
magicboot=/usr/lib/yaboot/ofboot

<comment>############################################################
## Recopiez cette section si vous avez plusieurs noyaux ou plusieurs jeux
## d'options de démarrage. Remplacez la variable image par le nom de fichier
## exact de votre noyau.
###########################################################</comment>
image=/boot/<keyval id="kernel-name"/>
  label=Linux
  root=/dev/sda3
  partition=3
  <comment>#  append="rootdelay=10"  # requis pour démarrer sur USB/Firewire</comment>
  read-only
<comment>##################

## Pour un G5 et certains G4, utilisez les lignes ci-dessous
##   macos=hd:13/
##   macosx=hd:12
## au lieu des lignes suivantes :</comment>
macos=/dev/sda13
macosx=/dev/sda12
enablecdboot
enableofboot
</pre>

<p>
Après avoir modifé le fichier <path>yaboot.conf</path>, vous devez lancer la
commande <c>mkofboot -v</c> pour formater la partition Apple_bootstrap et
installer la configuration. Si vous modifiez la configuration après avoir créé
la partition Apple_bootstrap, vous pouvez la mettre à jour avec <c>ybin -v</c>.
</p>

<pre caption="créer la partition de démarrage">
# <i>mkofboot -v</i>
</pre>

<p>
Pour plus d'informations sur yaboot, veuillez consulter la <uri
link="http://penguinppc.org/bootloaders/yaboot">page du projet yaboot</uri>.
Vous pouvez maintenant poursuivre avec le <uri link="#reboot">redémarrage du
système</uri>.
</p>

</body>
</subsection>
</section>
<section id="bootx">
<title>Alternative : BootX</title>
<body>

<impo>
BootX n'est disponible que pour les systèmes OldWorld Apple à partir de Mac OS
9.
</impo>

<p>
Puisque BootX démarre Linux depuis MacOS, le noyau devra être copié
depuis une partition Linux sur la partition MacOS. Montez tout d'abord la
partition MacOS depuis l'extérieur du chroot. Utilisez <c>mac-fdisk -l</c> pour
trouver le numéro de la partition de MacOS, sda6 dans l'exemple. Une fois que
la partition est montée, nous allons copier le noyau sur le répertoire système
afin que BootX puisse le trouver.
</p>

<pre caption="copier le noyau sur la partition MacOS">
# <i>exit</i>
cdimage ~# <i>mkdir /mnt/mac</i>
cdimage ~# <i>mount /dev/sda6 /mnt/mac -t hfs</i>
cdimage ~# <i>cp /mnt/gentoo/usr/src/linux/vmlinux "/mnt/mac/System Folder/Linux Kernels/<keyval id="kernel-name"/>"</i>
</pre>

<p>
Si vous avez utilisé genkernel, le noyau et l'initrd seront placés dans la
partition MacOS.
</p>

<pre caption="copier le noyau et l'initrd de genkernel sur la partition MacOS">
# <i>exit</i>
cdimage ~# <i>mkdir /mnt/mac</i>
cdimage ~# <i>mount /dev/sda6 /mnt/mac -t hfs</i>
cdimage ~# <i>cp /mnt/gentoo/boot/<keyval id="genkernel-name"/> "/mnt/mac/System Folder/Linux Kernels"</i>
cdimage ~# <i>cp /mnt/gentoo/boot/<keyval id="genkernel-initrd"/> "/mnt/mac/System Folder"</i>
</pre>

<p>
Maintenant que le noyau est copié, vous devez redémarrer pour configurer BootX.
</p>

<pre caption="démonter les partitions et redémarrer la machine">
cdimage ~# <i>cd /</i>
cdimage ~# <i>umount -l /mnt/gentoo/dev{/pts,/shm,/proc,/sys,}</i>
cdimage ~# <i>umount -l /mnt/gentoo{/proc,/sys,}</i>
cdimage ~# <i>umount -l /mnt/mac</i>
cdimage ~# <i>reboot</i>
</pre>

<p>
Bien sûr n'oubliez pas d'enlever le CD d'installation du lecteur, pour ne pas
démarrer dessus à nouveau.
</p>

<p>
Maintenant que la machine a démarré MacOS, ouvrez le panneau de contrôle de
BootX. Si vous n'utilisez pas genkernel, sélectionnez <c>Options</c> puis
désactivez <c>Used specified RAM disk</c>. Sinon, vérifiez que l'initrd de
genkernel est sélectionné à la place de celui du CD d'installation.  Si vous
n'utilisez pas genkernel vous devez maintenant spécifier dans une option le
disque et la partition racine de Linux. Remplissez les champs voulus par la
valeur appropriée. Selon la configuration du noyau vous devrez probablement
appliquer quelques arguments de démarrage au noyau.
</p>

<p>
BootX peut être configuré pour démarrer Linux au démarrage. Si vous choisissez
cette option la machine démarrera sur MacOS et lors du démarrage, elle chargera
BootX qui à son tour démarrera Linux. Lisez la page Internet de <uri
link="http://penguinppc.org/bootloaders/bootx/">BootX</uri> pour plus
d'informations.
</p>

<impo>
vérifiez bien que le support pour les systèmes de fichiers HFS et HFS+ soit
activé dans le noyau, sinon vous ne pourrez pas mettre à jour ou modifier votre
noyau sur la partition MacOS.
</impo>

<p>
Une fois le système Gentoo démarré, concluez avec la <uri
link="?part=1&amp;chap=11">Finaliser votre installation</uri>.
</p>

</body>
</section>
<section id="quik">
<title>Alternative : Quik</title>
<body>

<p>
<c>Quik</c> permet aux Mac OldWorld de démarrer sans MacOS. Pourtant, il n'est pas bien
supporté et contient un certain nombre de problèmes. Si vous avez le choix, nous
vous recommandons d'utiliser BootX car il est beaucoup plus stable et facile à
installer que Quik.
</p>

<p>
D'abord, installer Quik :
</p>

<pre caption="installer Quik">
# <i>emerge quik</i>
</pre>

<p>
Ensuite, le configurer. Éditez <path>/etc/quik.conf</path> et définissez
l'image du noyau que vous avez copié précédemment.
</p>

<pre caption="configurer quik.conf">
# Exemple
init-message = "Gentoo Linux\n"
<comment># La partition /boot</comment>
partition = 2
root = /dev/sda4
timeout = 30
default = gentoo
<comment># Le noyau</comment>
image = /<keyval id="kernel-name"/>
  label = gentoo
</pre>

<p>
Votre quik.conf <e>doit</e> être sur le même disque que l'image de démarrage de
Quik, éventuellement sur une partition différente. Nous vous recommandons de le
mettre dans votre partition <path>/boot</path>.
</p>
<pre caption="déplacer quik.conf sur /boot">
# <i>mv /etc/quik.conf /boot/quik.conf</i>
</pre>
<p>
Pour que Quik soit lancé au démarrage, ajustez correctement les variables grâce
à <c>nvsetenv</c>. Les variables à modifier varient de machine en machine,
vérifiez dès maintenant quelles peuvent être les <uri
link="http://penguinppc.org/bootloaders/quik/quirks.php">problèmes</uri>
concernant la vôtre avant de commencer.
</p>

<pre caption="définir les variables de démarrage">
<comment># Mettez false si vous voulez rester dans l'OpenFirmware, tous les
# modèles ne peuvent pas afficher la sortie d'OpenFirmware</comment>
# <i>nvsetenv auto-boot true</i>

<comment># Vérifiez les problèmes sur la page citée précédemment pour cette
# commande.</comment>
# <i>nvsetenv output-device video</i>

# <i>nvsetenv input-device kbd</i>

<comment># Pour le SCSI</comment>
# <i>nvsetenv boot-device scsi/sd@1:0</i>

<comment># Pour l'ATA</comment>
# <i>nvsetenv boot-device ata/ata-disk@0:0</i>

<comment># D'abord le chemin vers le noyau, puis la partition racine.
# Vous pouvez ajouter des paramètres du noyau à la suite.</comment>
# <i>nvsetenv boot-file /boot/<keyval id="kernel-name"/> root=/dev/sda4</i>

<comment># Mettez bye pour MacOS ou boot pour Linux.</comment>
# <i>nvsetenv boot-command boot</i>
</pre>

<note>
Il est aussi possible de changer les variables depuis MacOS. Selon le modèle,
vous pouvez utiliser soit <uri
link="http://penguinppc.org/bootloaders/quik/BootVars.sit.hqx">bootvars</uri>,
soit <uri
link="ftp://ftp.apple.com/developer/macosxserver/utilities/SystemDisk2.3.1.smi.bin">Apple
System Disk</uri>. Lisez la page référençant les problèmes citée précédemment
pour plus d'informations.
</note>

<p>
Tout est maintenant configuré, nous allons vérifier que les images soient
installées correctement. Lancez la commande <c>quik -v -C /boot/quik.conf</c>,
qui devrait vous annoncer que le code de démarrage de Quik a bien été installé
dans le bloc de démarrage.
</p>

<note>
si quelque chose s'est mal passé, vous pouvez toujours remettre à zéro la PROM
en pressant les touches <c>Command + Option + p + r</c> avant d'allumer la
machine. Cela effacera les valeurs qui ont été définies avec nvsetenv et
devrait vous permettre d'utiliser une disquette de démarrage MacOS ou Linux.
</note>

<p>
Vous pouvez continuer avec le <uri link="#reboot">redémarrage du système</uri>.
</p>

</body>
</section>
<section id="bootcreator">
<title>Alternative : BootCreator</title>
<body>

<impo>
BootCreator vous installe un joli menu SmartFirmware écrit en Forth pour le
Pegasos.
</impo>

<p>
Avant tout, installez <c>bootcreator</c> :
</p>

<pre caption="installer bootcreator">
# <i>emerge bootcreator</i>
</pre>

<p>
Ensuite, copiez le fichier <path>/etc/bootmenu.example</path> dans
<path>/etc/bootmenu</path> et modifiez-le en fonction de vos besoins :
</p>

<pre caption="modifier la configuration de bootcreator">
# <i>cp /etc/bootmenu.example /etc/bootmenu</i>
# <i>nano -w /etc/bootmenu</i>
</pre>

<p>
Un exemple complet de fichier de configuration <path>/etc/bootmenu</path>
ressemble à ce qui suit. Veillez à remplacer vmlinuz et initrd par vos noms des
images de vos noyau et initrd.
</p>

<pre caption="fichier de configuration de bootcreator">
<comment>#
# Exemple de configuration pour bootcreator 1.1
#</comment>

[VERSION]
1

[TITLE]
Boot Menu

[SETTINGS]
AbortOnKey = false
Timeout    = 9
Default    = 1

[SECTION]
Local HD -> Morphos      (Normal)
ide:0 boot2.img ramdebug edebugflags="logkprintf"

[SECTION]
Local HD -> Linux (Normal)
ide:0 <keyval id="kernel-name"/> video=radeonfb:1024x768@70 root=/dev/sda3

[SECTION]
Local HD -> Genkernel (Normal)
ide:0 <keyval id="genkernel-name"/> root=/dev/ram0
real_root=/dev/sda3 initrd=<keyval id="genkernel-initrd"/>
</pre>

<p>
Ensuite, le fichier <path>bootmenu</path> doit être copié dans votre partition
de démarrage pour que SmartFirmware puisse le lire. On utilise l'outil
<c>bootcreator</c> :
</p>

<pre caption="installer le menu de démarrage">
# <i>bootcreator /etc/bootmenu /boot/menu</i>
</pre>

<note>
veuillez vérifier dans la configuration de SmartFirmware dès le redémarrage
suivant que le fichier <path>menu</path> est bien celui qui est utilisé par
défaut.
</note>

<p>
Veuillez poursuivre avec le <uri link="#reboot">redémarrage du système</uri>.
</p>

</body>
</section>
<section id="reboot">
<title>Redémarrage du système</title>
<subsection>
<body>

<p>
Sortez de l'environnement chroot et démontez toutes les partitions montées.
Ensuite, tapez la commande magique tant attendue : <c>reboot</c>.
</p>

<pre caption="sortie du chroot, démontage des partitions et redémarrage">
# <i>exit</i>
livecd ~# <i>umount -l /mnt/gentoo/dev{/pts,/shm,}</i>
livecd ~# <i>umount  /mnt/gentoo{/proc,/sys,}</i>
livecd ~# <i>reboot</i>
</pre>

<p>
Une fois le système Gentoo démarré, concluez avec la <uri
link="?part=1&amp;chap=11">Finaliser votre installation</uri>.
</p>

</body>
</subsection>
</section>
</sections>
