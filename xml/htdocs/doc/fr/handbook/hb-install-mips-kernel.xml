<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/handbook/hb-install-mips-kernel.xml,v 1.20 2007/03/30 20:38:26 cam Exp $ -->

<sections>

<version>7.1</version>
<date>2007-02-26</date>

<section>
<title>Fuseau horaire</title>
<body>

<p>
Vous devez maintenant choisir votre fuseau horaire afin que votre système sache
où il se trouve. Cherchez votre fuseau horaire dans
<path>/usr/share/zoneinfo</path>, puis copiez-le sur
<path>/etc/localtime</path>. Évitez les zones
<path>/usr/share/zoneinfo/Etc/GMT*</path>, car leur nom prête à confusion. En
effet, <path>GMT-8</path> signifie en fait GMT+8.
</p>

<pre caption="Définir l'information relative au fuseau horaire">
# <i>ls /usr/share/zoneinfo</i>
<comment>(En supposant que vous utilisiez l'heure de Paris :)</comment>
# <i>cp /usr/share/zoneinfo/Europe/Paris /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Installer les sources</title>
<subsection>
<title>Choisir un noyau</title>
<body>

<p>
Le cœur autour duquel sont bâties toutes les distributions est le noyau (en
anglais «&nbsp;kernel&nbsp;») Linux. Ce noyau est l'interface entre les
programmes utilisateur et le matériel. Gentoo offre un choix de plusieurs
noyaux à ses utilisateurs. Une liste complète, accompagnée de descriptions,
est disponible dans le <uri link="/doc/fr/gentoo-kernel.xml">Guide du noyau
Gentoo Linux</uri>.
</p>

<p>
Les seules sources de noyau Linux utilisables pour les systèmes MIPS sont
<c>mips-sources</c>. Elles contiennent un ensemble de correctifs spécifiques
aux architectures MIPS qui ne se trouvent pas dans les autres sources de noyau.
</p>

<pre caption="Installer les sources du noyau">
# <i>emerge mips-sources</i>
</pre>

<impo>
Sur les Origin 200/2000, Indigo2 Impact (R10000), Octane/Octane2 et O2, vous
devez impérativement démarrer sur un noyau 64&nbsp;bits. <c>emerge kgcc64</c>
vous installera le compilateur croisé nécessaire à la construction de ce type
de noyau.
</impo>

<pre caption="Installer kgcc64">
# <i>emerge kgcc64</i>
</pre>

<p>
Si vous examinez le contenu de <path>/usr/src</path>, vous devriez voir un lien
symbolique nommé <path>linux</path> pointant vers les sources de votre noyau.
L'exemple suivant pointe sur <c>mips-sources-2.6.13.4</c>, mais vous aurez sans
doute installé une autre version.
</p>

<pre caption="Examiner le lien symbolique vers le noyau">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx   1 root   root    12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.6.13.4
</pre>

<p>
Si le lien n'existe pas ou n'est pas correctement placé, modifiez-le avant de
continuer&nbsp;:
</p>

<pre caption="Changer la destination du lien /usr/src/linux">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.6.13.4 linux</i>
</pre>

<p>
Il est maintenant temps de configurer et de compiler votre noyau.
</p>

</body>
</subsection>
</section>
<section>
<title>Compilation et installation du noyau</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Ce guide effectuait auparavant une configuration manuelle des codes source du
noyau. Devant le nombre grandissant de systèmes supportés, ce n'est plus
possible. Cette section détaille plusieurs configurations de noyau pour vous
montrer au mieux comment procéder pour votre système.
</p>

</body>
</subsection>
<subsection>
<title>Utiliser les exemples de configurations du noyau</title>
<body>

<p>
Certains des systèmes supportés peuvent utiliser des fichiers de configurations exemples .config qui se cachent dans l'arborescence du noyau. Vous ne trouverez pas de fichier exemple pour tous les types de systèmes, mais ceux qui en possèdent peuvent alors être configurés comme mentionné dans le tableau suivant&nbsp;:
</p>

<table>
  <tr>
    <th>Système</th>
    <th>Commande pour le configurer</th>
  </tr>
  <tr>
    <ti>Cobalt Servers</ti>
    <ti><c>make cobalt_defconfig</c></ti>
  </tr>
  <tr>
    <ti>Indy, Indigo2 (R4k), Challenge S</ti>
    <ti><c>make ip22_defconfig</c></ti>
  </tr>
  <tr>
    <ti>Origin 200/2000</ti>
    <ti><c>make ip27_defconfig</c></ti>
  </tr>
  <tr>
    <ti>Indigo2 Impact (R10k)</ti>
    <ti>
      <c>make ip28_defconfig</c> (nécessite au moins
      <c>mips-sources-2.6.14.5</c>)
    </ti>
  </tr>
  <tr>
    <ti>O2</ti>
    <ti><c>make ip32_defconfig</c></ti>
  </tr>
</table>

</body>
</subsection>
<subsection>
<title>Reprendre la configuration noyau utilisée lors de l'installation</title>
<body>

<p>
Toutes les images d'installation Gentoo contiennent la configuration de leur
noyau, accessible par le pseudo-fichier <path>/proc/config.gz</path>. Dans la
plupart des cas, vous pouvez réutiliser cette configuration. Il vaut mieux
cependant que votre version de noyau soit le plus près possible de celle de
l'image. Pour l'extraire, utilisez simplement <c>zcat</c>&nbsp;:
</p>

<pre caption="Extraire .config depuis /proc/config.gz">
# <i>zcat /proc/config.gz > .config</i>
</pre>

<impo>
Cette configuration de noyau est faite pour démarrer par le réseau.
C'est-à-dire qu'elle s'attend à trouver un système de fichiers racine quelque
part, que ce soit un répertoire pour initramfs ou un fichier de périphérique
pour initrd. Lorsque vous ferez <c>make menuconfig</c> plus bas, n'oubliez pas
d'aller dans «&nbsp;General Setup&nbsp;» pour désactiver les options qui
concernent initramfs.
</impo>

</body>
</subsection>
<subsection>
<title>Base de compatibilité matérielle</title>
<body>

<p>
Afin d'aider les utilisateurs à trouver les réglages qui leur conviendront, une
base de compatibilité matérielle a été mise en place. Cette base de données
contient une liste de matériels MIPS supportés et permet aux utilisateurs d'y
contribuer leurs configurations qui marchent pour eux. L'adresse du site est
<uri>http://stuartl.longlandclan.hopto.org/gentoo/mips</uri>.
</p>

<p>
Si vous trouvez ce service utile, vous êtes encouragés à y laisser vos notes et
vos .config qui marchent pour que les autres puissent bénéficier de votre
expérience. Bien entendu, les informations que vous pourrez trouver sur ce site
ne sont aucunement garanties.
</p>

</body>
</subsection>
<subsection>
<title>Personnaliser la configuration aux petits ognons</title>
<body>

<p>
Une fois que vous avez trouvé la configuration qui vous convenait, téléchargez
le fichier et mettez-le dans le répertoire des codes source du noyau. Renommez
le fichier en <path>.config</path>. À partir de là, vous pouvez lancer la
commande <c>make oldconfig</c> pour tout mettre à jour et personnaliser un peu
plus la configuration avant de compiler le code.
</p>

<pre caption="Configurer le noyau">
# <i>cd /usr/src/linux</i>
# <i>cp /répertoire/vers/exemple-config .config</i>
# <i>make oldconfig</i>
<comment>(Appuyez simplement sur Entrée à chaque question pour accepter les valeurs
par défaut. Elles seront personnalisées plus tard.)</comment>
# <i>make menuconfig</i>
</pre>

<impo>
Dans la section «&nbsp;Kernel Hacking&nbsp;», vous trouverez une option nommée
«&nbsp;Are You Using A Cross Compiler?&nbsp;». Elle indique aux Makefile du
noyau d'ajouter <c>mips-linux-</c> (ou <c>mipsel-linux</c>, etc.) aux commandes
<c>gcc</c> et <c>as</c> lors de la compilation du noyau. Cette option doit être
désactivée, même si vous faites de la compilation croisée. À la place, si vous
devez utiliser un compilateur croisé, spécifiez le préfixe en utilisant la
variable <c>CROSS_COMPILE</c> comme expliqué dans la section suivante.
</impo>

<impo>
Il y a un problème connu avec JFS et ALSA sur les systèmes Octane, ALSA ne
fonctionne pas. Étant donné la nature expérimentale de JFS sur MIPS, nous vous
recommandons d'éviter JFS pour le moment.
</impo>

</body>
</subsection>
<subsection id="compiling">
<title>Compiler et installer</title>
<body>

<p>
Maintenant que votre noyau est configuré, il est temps de le compiler et de
l'installer. Quittez la configuration et lancez la compilation&nbsp;:
</p>

<note>
Sur les machines 64&nbsp;bits, vous devez spécifier
<c>CROSS_COMPILE=mips64-unknown-linux-gnu-</c> (ou <c>mips64el-...</c> sur les
systèmes little-endian) pour utiliser le compilateur 64&nbsp;bits.
</note>

<pre caption="Compiler le noyau">
<comment>(Pour les noyaux 2.4 uniquement)</comment>
# <i>make dep</i>

<comment>(Pour les noyaux 2.4 et 2.6 en compilation native)</comment>
# <i>make vmlinux modules modules_install</i>

<comment>(Pour les noyaux 2.4 et 2.6 en compilation croisée)</comment>
<comment>(Ajustez mips64-unknown-linux-gnu- en fonction.)</comment>
# <i>make vmlinux modules modules_install CROSS_COMPILE=mips64-unknown-linux-gnu-</i>

<comment>(En cas de compilation depuis une autre machine (x86 par exemple), utilisez les
commandes suivantes pour compiler le noyau et installer les modules dans un
répertoire spécifique à transférer vers la machine cible.)</comment>
# <i>make vmlinux modules CROSS_COMPILE=mips64-unknown-linux-gnu-</i>
# <i>make modules_install INSTALL_MOD_PATH=/quelquepart</i>
</pre>

<impo>
Si vous compilez un noyau 64&nbsp;bits pour Indy, Indigo2 (R4k), Challenge S ou
O2, utilisez la cible <c>vmlinux.32</c> plutôt que <c>vmlinux</c>. Car sinon,
votre machine ne démarrera pas à cause du PROM qui ne comprend pas le format
ELF64.
</impo>

<pre caption="Utiliser la cible vmlinux.32">
# <i>make vmlinux.32</i>
<comment>(Cela créera vmlinux.32, le noyau à utiliser.)</comment>
</pre>

<p>
Lorsque la compilation est terminée, copiez l'image du noyau dans
<path>/boot</path>.
</p>

<note>
Sur les serveurs Cobalt, le chargeur de démarrage s'attend à trouver une image
compressée. N'oubliez pas d'utiliser la commande <c>gzip -9</c> une fois le
noyau copié dans <path>/boot</path>.
</note>

<pre caption="Installer le noyau">
# <i>cp vmlinux /boot/kernel-2.6.13.4</i>

<comment>(Sur un Cobalt Server, compressez le noyau.)</comment>
# <i>gzip -9v /boot/kernel-2.6.13.4</i>
</pre>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Installer des modules du noyau individuels</title>
<subsection>
<title>Configurer les modules</title>
<body>

<p>
Vous devez mettre en place une liste des modules que vous souhaitez charger
automatiquement sur votre système. Cette liste doit se trouver dans l'un des
fichiers suivants. Vous pouvez aussi ajouter des options supplémentaires aux
modules si vous le jugez nécessaire.
</p>

<ul>
  <li><path>/etc/modules.autoload.d/kernel-2.4</path> - Noyaux 2.4</li>
  <li><path>/etc/modules.autoload.d/kernel-2.6</path> - Noyaux 2.6</li>
  <li><path>/etc/modules.autoload</path> - Tous les noyaux</li>
</ul>

<p>
Donc si vous avez un module du noyau que vous souhaitez charger qui est en
commun aux deux versions 2.4 et 2.6 du noyau vous devez le mettre dans
<path>/etc/modules.autoload</path>. Sinon, vous devez le placer dans le fichier
approprié.
</p>

<p>
Pour dresser la liste des modules disponibles, exécutez la commande
<c>find</c> telle qu'indiquée ci-dessous. N'oubliez pas de substituer &lt;kernel
version&gt; par la version du noyau que vous venez juste de compiler&nbsp;:
</p>

<pre caption="Consulter la liste des modules disponibles">
# <i>find /lib/modules/&lt;version du noyau&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Par exemple, pour charger automatiquement le module <c>3c59x.o</c>, spécifiez-le
dans le fichier approprié.
</p>

<pre caption="Modifier le fichier /etc/modules.autoload.d/kernel-2.4">
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="Exemple de fichier /etc/modules.autoload.d/kernel-2.4 ou kernel-2.6">
3c59x
</pre>

<p>
La même chose en une seule ligne&nbsp;:
</p>

<pre caption="Ajouter un module &mdash; la méthode en une ligne">
# <i>echo '3c59x' >> /etc/modules.autoload.d/kernel-2.4</i>
<comment>(ou kernel-2.6, ou /etc/modules.autoload...)</comment>
</pre>

<p>
Poursuivez l'installation avec <uri link="?part=1&amp;chap=8">Configurer
votre système</uri>.
</p>

</body>
</subsection>
</section>
</sections>
