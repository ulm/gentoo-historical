<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/handbook/hb-install-ppc-kernel.xml,v 1.33 2007/07/13 08:40:58 nightmorph Exp $ -->

<sections>

<version>7.5</version>
<date>2007-02-12</date>

<section>
<title>Fuseau horaire</title>
<body>

<p>
Vous devez maintenant choisir votre fuseau horaire afin que votre système sache
où il se trouve. Cherchez votre fuseau horaire dans
<path>/usr/share/zoneinfo</path>, puis copiez-le dans
<path>/etc/localtime</path>. Évitez les zones
<path>/usr/share/zoneinfo/Etc/GMT*</path>, car leur nom prête à confusion. En
effet, <path>GMT-8</path> signifie en fait GMT+8.
</p>

<pre caption="Définir l'information relative au fuseau horaire">
# <i>ls /usr/share/zoneinfo</i>
<comment>(En supposant que vous utilisiez l'heure de Paris)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Installer les sources</title>
<subsection>
<title>Choisir un noyau</title>
<body>

<p>
Le cœur autour duquel sont bâties toutes les distributions est le noyau (en
anglais «&nbsp;kernel&nbsp;») Linux. Ce noyau est l'interface entre les
programmes utilisateur et le matériel. Gentoo offre un choix de plusieurs
noyaux à ses utilisateurs. Une liste complète, accompagnée de descriptions,
est disponible dans le <uri link="/doc/fr/gentoo-kernel.xml">Guide du noyau
Gentoo Linux</uri>.
</p>

<p>
Nous vous recommandons d'utiliser <c>gentoo-sources</c> sur PPC, c'est un noyau
2.6.
</p>

<pre caption="Installer les sources du noyau">
# <i>emerge gentoo-sources</i>
</pre>


<p>
Si vous examinez le contenu de <path>/usr/src</path>, vous remarquerez la
présence d'un lien symbolique nommé <path>linux</path> qui pointe vers les
sources de votre noyau actuel. Dans notre cas, la redirection pointe vers
<c>gentoo-sources-2.6.15</c>. Gardez bien à l'esprit que votre version du noyau
peut être différente.
</p>

<pre caption="Examiner le lien symbolique vers le noyau">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root    root    22  Mar 18 16:23 /usr/src/linux -&gt; linux-2.6.15
</pre>

<p>
Il est maintenant temps de configurer et de compiler votre noyau. La commande
<c>genkernel</c> est disponible sur tous les systèmes. Cette commande
construira un noyau générique tel que celui utilisé par le LiveCD. Toutefois,
nous expliquerons d'abord la configuration «&nbsp;manuelle&nbsp;», puisque
c'est la meilleure façon d'optimiser votre environnement.
</p>

<p>
Pour compiler votre noyau manuellement, poursuivez votre lecture avec la <uri
link="#manual">Par défaut&nbsp;: Configuration manuelle</uri>.  Si vous
souhaitez utiliser <c>genkernel</c>, vous devriez plutôt lire <uri
link="#genkernel">Alternative&nbsp;: utiliser genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Par défaut : configuration manuelle</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Configurer un noyau est parfois considéré comme la tâche la plus ardue que les
utilisateurs de Linux doivent accomplir. Rien n'est moins vrai... Après avoir
configuré quelques noyaux, vous ne vous rappellerez même plus d'avoir trouvé
cela difficile.
</p>

<p>
Toutefois, une chose est vraie&nbsp;: vous devez connaitre votre système pour
configurer manuellement un noyau. La majeure partie de cette information peut
être obtenue en utilisant la commande <c>lspci</c> qui est dans le paquet
pciutils (<c>emerge pciutils</c>). Vous pourrez désormais utiliser
<c>lspci</c> depuis votre environnement en chroot. Vous pouvez ignorer les
avertissements <e>pcilib</e> (comme par exemple&nbsp;: pcilib: cannot open
/sys/bus/pci/devices) que vous obtiendrez avec <c>lspci</c>. Vous pouvez
également exécuter <c>lspci</c> depuis un environnement <e>non chrooté</e>. Le
résultat est le même. Vous pouvez également exécuter <c>lsmod</c> pour voir les
modules du noyau utilisés par le CD-ROM d'installation (ce qui peut vous donner
des indices sur les fonctionnalités nécessaires). Vous pouvez aussi chercher
des indices des composants à activer dans les logs issus d'une séquence de
démarrage qui a fonctionnée. Tapez <c>dmesg</c> pour voir les messages du noyau.
</p>

<p>
Maintenant, allez dans le dossier des sources du noyau, il est temps de
configurer votre noyau. Il est recommandé que vous appliquiez les paramètres par
défaut de votre configuration en exécutant la commande <c>make
pmac32_defconfig</c>. Ensuite, vous pourrez faire un <c>make menuconfig</c> qui
va lancer le menu de configuration basé sur ncurses.
</p>

<pre caption="Lancer menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make pmac32_defconfig</i>
# <i>make menuconfig</i>
</pre>

<p>
Plusieurs sections d'options de configuration s'afficheront. Nous allons
d'abord dresser la liste de certaines options que vous devez activer (sinon,
Gentoo ne fonctionnera pas ou, du moins, pas sans quelques réglages
additionnels).
</p>

</body>
</subsection>
<subsection>
<title>Activer les options requises</title>
<body>

<p>
Avant toute chose, activez l'utilisation du code et des pilotes en
développement ou expérimentaux. C'est absolument nécessaire&nbsp;; si vous ne
le faites pas, des options très importantes ne seront pas affichées.
</p>

<pre caption="Sélectionner le code et les pilotes expérimentaux">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Allez à la section <c>File Systems</c> et activez le support nécessaire pour
les systèmes de fichiers que vous utilisez. Ne les compilez <e>pas</e> sous
forme de modules, sinon votre système Gentoo ne pourra pas monter vos
partitions. Activez aussi <c>/proc file system</c> et <c>Virtual memory</c>. Le
support des partitions Amiga sera utile si vous utilisez un Pegasos ou les
partitions Macintosh si vous utilisez un Apple.
</p>

<pre caption="Activer le support pour les systèmes de fichiers">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)
  Partition Types ---&gt;
    [*] Amiga partition table support
    [*] Macintosh partition map support

 <comment>(Sélectionnez le(s) système(s) de fichiers dont vous avez besoin.)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Si vous utilisez PPPoE ou un modem classique pour vous connecter à Internet,
vous aurez besoin des options du noyau suivantes&nbsp;:
</p>

<pre caption="Sélection des pilotes PPPoE">
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Les deux options de compression ne vous feront pas de mal, mais ne sont pas
absolument nécessaires. L'option <c>PPP over Ethernet</c> n'est pas obligatoire
non plus, considérant qu'elle pourrait n'être utilisée que par <c>rp-pppoe</c>
lorsque ce dernier est configuré pour utiliser PPPoE en mode noyau.
</p>

<p>
Si vous en avez besoin, n'oubliez pas d'ajouter le support pour votre
carte Ethernet.
</p>

<p>
Les utilisateurs de machine NewWorld et OldWorld souhaiteront certainement
activer le support HFS. Les utilisateurs OldWorld en ont besoin pour copier les
noyaux compilés sur une partition MacOS. Les utilisateurs de machine NewWorld
en auront besoin pour configurer la partition spéciale qui accueillera le
Apple_Bootstrap&nbsp;:
</p>

<pre caption="Activer le support HFS">
File Systems ---&gt;
  [*] HFS Support
</pre>

<p>
Le noyau ne gère pas encore la préemption correctement sur des machines PPC.
L'activer peut entrainer des erreurs de compilation et des
«&nbsp;segfaults&nbsp;». Il est <e>très</e> recommandé de ne pas sélectionner
cette option.
</p>

<pre caption="Vérifier que la préemption n'est pas activée">
Kernel options ---&gt;
  Preemption Model (No Forced Preemption (Server))
</pre>

<p>
Si vous démarrez à partir d'un périphérique Firewire, vous aurez besoin
d'activer les options suivantes. Si vous ne voulez pas compiler le support en
dur dans le noyau, vous aurez besoin d'inclure ces modules et leurs dépendances
dans un initrd.
</p>

<pre caption="Activer le suppot Firewire au démarrage">
    Device Drivers ---&gt;
    IEEE 1394 (FireWire) support ---&gt;
    &lt;*&gt; IEEE 1394 (FireWire) support
    &lt;*&gt;   OHCI-1394 support
    &lt;*&gt;   SBP-2 support (Harddisks etc.)
</pre>

<p>
Si vous démarrez depuis un périphérique USB, vous devrez activer les options
suivantes. Si vous ne voulez pas compiler le support en dur dans le noyau, vous
aurez besoin d'inclure ces modules et leurs dépendances dans un initrd.
</p>

<pre caption="Activer le suppot USB au démarrage">
    Device Drivers ---&gt;
    USB support ---&gt;
    &lt;*&gt; Support for Host-side USB
    &lt;*&gt;   OHCI HCD support
    &lt;*&gt;   USB Mass Storage support
</pre>

<p>
Ne désactiver pas le support du framebuffer du noyau, car celui-ci est est
nécessaire pour démarrer la machine. Si vous utilisez une carte graphique
NVIDIA, vous devrez utiliser le framebuffer Open Firmware. Si vous utilisez une
carte graphique ATI, vous voudrez certainement activer le pilote du framebuffer
supporté par votre puce (Mach64, Rage128 ou Radeon).
</p>

<pre caption="Sélectionner un pilote framebuffer">
    Device Drivers ---&gt;
    Graphics support ---&gt;
    &lt;*&gt; Support for frame buffer devices
    [*] Open Firmware frame buffer device support
    &lt;*&gt; ATI Radeon display support
    &lt;*&gt; ATI Rage128 display support
    &lt;*&gt; ATI Mach64 display support
    Console display driver support ---&gt;
    &lt;*&gt; Framebuffer Console support
</pre>

<note>
Si vous selectionnez plus d'un framebuffer, il se peut que le système choisisse
par défaut un pilote qui ne sera pas le meilleur. N'utilisez qu'un seul
framebuffer, sinon précisez celui qui est à utiliser en entrant l'option
adéquate au noyau au moment du démarrage. Par exemple&nbsp;:
<c>video=radeonfb</c>.
</note>

<p>
Lorsque vous aurez terminé la configuration de votre noyau, poursuivez avec
la section <uri link="#compiling">Compiler et installer</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Compiler et installer</title>
<body>

<p>
Maintenant que votre noyau est configuré, il est temps de le compiler et de
l'installer. Quittez la configuration et exécutez les commandes pour compiler
le noyau&nbsp;:
</p>

<pre caption="Compiler le noyau">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Lorsque la compilation est terminée, copiez l'image du noyau dans
<path>/boot</path>. Sur un Pegasos, la partition qui héberge <path>/boot</path>
doit avoir été montée. Si vous utiliser BootX pour démarrer, nous ferons la
copie du noyau plus tard.
</p>

<p>
Yaboot et BootX utilisent un noyau non-compressé contrairement à beaucoup de
chargeurs de démarrage. Le noyau décompressé est appelé vmlinux. Une fois que
le noyau a fini de compiler, il est placé dans <path>/usr/src/linux</path>. Sur
un Pegasos, le Pegasos firmware nécessite un noyau compressé appelé
zImage.chrp. Il se trouve dans
<path>/usr/src/linux/arch/ppc/boot/images</path>.
</p>

<pre caption="Installer le noyau">
# <i>cd /usr/src/linux</i>
<comment>Remplacez &lt;kernel-version&gt; par votre version du noyau.</comment>
<comment>(Apple/IBM)</comment>
# <i>cp vmlinux /boot/&lt;kernel-version&gt;</i>
<comment>(Pegasos)</comment>
# <i>cp arch/ppc/boot/images/zImage.chrp /boot/&lt;kernel-version&gt;</i>
</pre>

<p>
Maintenant, poursuivez votre lecture avec <uri link="#kernel_modules">Installer
des modules du noyau individuels</uri>.
</p>

</body>
</subsection>
</section>

<section id="kernel_modules">
<title>Installer des modules du noyau individuels</title>
<subsection>
<title>Configurer les modules</title>
<body>

<p>
Vous devriez indiquer la liste des modules que vous souhaitez charger
automatiquement dans <path>/etc/modules.autoload.d/kernel-2.6</path>.  Vous
pouvez également ajouter des options aux modules si vous voulez.
</p>

<p>
Pour dresser la liste des modules disponibles, exécutez la commande <c>find</c>
telle qu'indiquée ci-dessous. N'oubliez pas de substituer &lt;kernel
version&gt; par la version du noyau que vous venez juste de compiler&nbsp;:
</p>

<pre caption="Consulter la liste des modules disponibles">
# <i>find /lib/modules/&lt;version du noyau&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Par exemple, pour charger automatiquement le module <c>3c59x.o</c>,
spécifiez-le dans le fichier <path>kernel-2.6</path>.
</p>

<pre caption="Modifier le fichier /etc/modules.autoload.d/kernel-2.6">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="Exemple de fichier /etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Poursuivez l'installation avec <uri link="?part=1&amp;chap=8">Configurer
votre système</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternative&nbsp;: utiliser genkernel</title>
<body>

<p>
Si vous lisez cette section, vous avez choisi d'utiliser le script
<c>genkernel</c> pour configurer votre noyau pour vous.
</p>

<p>
Maintenant que l'arbre des sources de votre noyau est installé, il est temps de
compiler ce noyau à l'aide du script <c>genkernel</c> qui construira
automatiquement un noyau dont la configuration sera presque identique à celle
du noyau du CD d'installation. Cela signifie que si vous utilisez
<c>genkernel</c> pour construire votre noyau, votre système détectera
généralement tout votre matériel au moment de l'amorçage, à la manière du CD
d'installation. Puisque genkernel ne requiert aucune configuration manuelle,
il s'agit d'une solution idéale pour l'utilisateur rebuté par l'idée de
compiler son propre noyau.
</p>

<p>
Maintenant, voyons comment utiliser genkernel. D'abord, installez genkernel
comme suit&nbsp;:
</p>

<pre caption="Installer genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Puis, copiez les fichiers de configuration utilisés par le CD d'installation
vers le répertoire qui sera utilisé par genkernel.
</p>

<pre caption="Copier la configuration du noyau du CD">
# <i>zcat /proc/config.gz &gt; /usr/share/genkernel/ppc/kernel-config-2.6</i>
</pre>

<p>
Si vous utiliser un périphérique firewire ou USB pour démarrer, vous aurez
besoin d'ajouter les modules au initrd. Pour le support firewire, ajoutez
<c>MODULES_FIREWIRE="ieee1394 ohci1394 sbp2"</c> dans
<path>/usr/share/genkernel/ppc/modules_load</path>. Pour le support USB
ajoutez <c>MODULES_USB="usbcore ohci-hcd ehci-hcd usb-storage"</c> dans
<path>/usr/share/genkernel/ppc/modules_load</path>.
</p>

<p>
Avant de compiler vos sources, le fstab a besoin d'un léger ajustement. Le
reste du fstab sera terminé plus tard dans le guide, ne vous inquiétez pas des
détails pour le moment. Si vous n'avez pas créé de partition de démarrage (il
s'agit de la partition /boot et NON PAS de la partition de bootstrap), retirez
la ligne qui référence /boot du fichier <path>/etc/fstab</path>. À faire sur la
plupart des ordinateurs Apple.
</p>

<pre caption="Retirer /boot du /etc/fstab sur les machines sans partition /boot">
# <i>nano -w /etc/fstab</i>
<comment>Enlever cette ligne.</comment>
/dev/BOOT               /boot           ext2            noauto,noatime  1 2
</pre>

<p>
Ensuite, compilez les sources du noyau en exécutant <c>genkernel --genzimage
all</c>.  Pour Pegasos, vous devrez utiliser une configuration différente et
créer un zImage à la place du noyau vmlinux utilisé sur les machines Apple.
Pensez bien que <c>genkernel</c> compile un noyau qui supporte presque tous les
matériels existant. Par conséquent, la compilation prend beaucoup de temps.
</p>

<p>
Notez que si votre partition de démarrage utilise un autre système de fichiers
qu'ext2 ou ext3, vous serez peut-être obligé de configurer manuellement votre
noyau en utilisant <c>genkernel --menuconfig all</c>. Il faudra ajouter le
support relatif aux systèmes de fichiers que vous utilisez <e>dans</e> le noyau
(c-à-d. <e>pas</e> en module). Les utilisateurs de EVMS2 ou LVM2 devront
probablement ajouter les arguments <c>--evms2</c> ou <c>--lvm2</c>.
</p>

<pre caption="Exécuter genkernel">
# <i>genkernel all</i>
</pre>

<pre caption="Exécuter genkernel sur Pegasos">
# <i>genkernel --genzimage --kernel-config=/usr/share/genkernel/ppc/Pegasos all</i>
</pre>

<p>
Lorsque <c>genkernel</c> aura fini son travail, un noyau, un ensemble complet
de modules et un «&nbsp;initial root disk&nbsp;» (initrd) auront été créés. Le
noyau et l'initrd seront utilisés plus tard lors de la configuration du
chargeur de démarrage. Notez bien les noms du noyau et du initrd puisque vous
devrez les spécifier lors de l'écriture du fichier de configuration du chargeur
de démarrage. L'initrd sera démarré immédiatement après l'amorçage afin de
réaliser l'autodétection du matériel (tout comme pour le CD d'installation)
avant que votre «&nbsp;véritable&nbsp;» système ne démarre. N'oubliez pas
d'indiquer les paramètres de démarrage requis sans quoi votre système ne
démarrera probablement pas.
</p>

<pre caption="Vérifier les noms de l'image du noyau et du fichier initrd">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

<p>
Pour que votre système réagissent aux évènements de connexions à chaud, vous
devez installer et configurer <c>hotplug</c>&nbsp;:
</p>

<pre caption="Installer et activer hotplug">
# <i>emerge hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>

<p>
Poursuivez l'installation avec <uri link="?part=1&amp;chap=8">Configurer
votre système</uri>.
</p>

</body>
</section>
</sections>
