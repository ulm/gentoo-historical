<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/handbook/hb-install-ppc-kernel.xml,v 1.40 2014/08/07 07:14:32 jaaf Exp $ -->

<sections>

<abstract>
Le noyau Linux est le cœur de toute distribution Linux. Ce chapitre vous explique comment le configurer.
</abstract>

<version>21</version>
<date>2014-05-11</date>


<section>
<title>Installer les sources du noyau</title>
<subsection>
<title>Choisir un noyau</title>
<body>

<p>
Le cœur autour duquel sont bâties toutes les distributions est le noyau (en
anglais « kernel ») Linux. Ce noyau est l'interface entre les
programmes utilisateur et le matériel. Gentoo offre un choix de plusieurs
noyaux à ses utilisateurs. Une liste complète, accompagnée de descriptions,
est disponible dans le <uri link="https://wiki.gentoo.org/wiki/Kernel/Overview">Guide du noyau
Gentoo Linux</uri>.
</p>

<p>
Nous vous recommandons d'utiliser <c>gentoo-sources</c> sur PPC, c'est un noyau
2.6 récent.
</p>

<pre caption="installer les sources du noyau">
# <i>emerge gentoo-sources</i>
</pre>

<p>
Si vous examinez le contenu de <path>/usr/src</path>, vous remarquerez la
présence d'un lien symbolique nommé <path>linux</path> qui pointe vers les
sources de votre noyau actuel. Dans notre cas, la redirection pointe vers
<c>gentoo-sources-<keyval id="kernel-version"/></c>. Gardez bien à l'esprit que
votre version du noyau peut être différente.
</p>

<pre caption="examiner le lien symbolique vers le noyau">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root   root    12 Oct 13 11:04 /usr/src/linux -&gt; linux-<keyval id="kernel-version"/>
</pre>

<p>
Il est maintenant temps de configurer et de compiler votre noyau. La commande
<c>genkernel</c> est disponible sur tous les systèmes. Cette commande
construira un noyau générique tel que celui utilisé par le LiveCD. Toutefois,
nous expliquerons d'abord la configuration « manuelle », car c'est le moyen le plus efficace pour optimiser votre environnement.
</p>

<p>
Pour compiler votre noyau manuellement, poursuivez votre lecture avec la <uri
link="#manual">Par défaut : Configuration manuelle</uri>.  Si vous
souhaitez utiliser <c>genkernel</c>, vous devriez plutôt lire <uri
link="#genkernel">Alternative : utiliser genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Par défaut : configuration manuelle</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Configurer un noyau est parfois considéré comme la tâche la plus ardue que les
utilisateurs de Linux doivent accomplir. Rien n'est moins vrai... Après avoir
configuré quelques noyaux, vous ne vous rappellerez même plus d'avoir trouvé
cela difficile.
</p>

<p>
Toutefois, une chose est vraie : vous devez connaitre votre système pour
configurer manuellement un noyau. La majeure partie de cette information peut
être obtenue en utilisant la commande <c>lspci</c> qui est dans le paquet
pciutils (<c>emerge pciutils</c>). Vous pourrez désormais utiliser
<c>lspci</c> depuis votre environnement en chroot. Vous pouvez ignorer les
avertissements <e>pcilib</e> (comme par exemple : pcilib: cannot open
/sys/bus/pci/devices) que vous obtiendrez avec <c>lspci</c>. Vous pouvez
également exécuter <c>lspci</c> depuis un environnement <e>non chrooté</e>. Le
résultat est le même. Vous pouvez également exécuter <c>lsmod</c> pour voir les
modules du noyau utilisés par le CD-ROM d'installation (ce qui peut vous donner
des indices sur les fonctionnalités nécessaires). 
</p>

<p>
Maintenant, allez dans le répertoire des sources du noyau, il est temps de
configurer votre noyau. Commencez par le préconfigurer afin qu'il puisse
démarrer sur la plupart des machines PowerPC 32 bits en exécutant la
commande <c>make pmac32_defconfig</c>. Ensuite, vous pourrez faire un <c>make
menuconfig</c> qui va lancer le menu de configuration basé sur ncurses.
</p>

<pre caption="lancer menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make pmac32_defconfig</i>
# <i>make menuconfig</i>
</pre>

<p>
Plusieurs sections d'options de configuration s'afficheront. Nous allons
d'abord dresser la liste de certaines options que vous devez activer (sinon,
Gentoo ne fonctionnera pas ou, du moins, pas sans quelques réglages
additionnels).Pour vous apporter une aide complémentaire, nous vous proposons également  <uri 
link="https://wiki.gentoo.org/wiki/Kernel/Gentoo_Kernel_Configuration_Guide/fr">Le guide de configuration du noyau de Gentoo
</uri> sur le wiki de Gentoo.
</p>

</body>
</subsection>
<subsection>
<title>Activer les options requises</title>
<body>




<p>
Allez à la section <c>File Systems</c> et activez le support nécessaire pour
les systèmes de fichiers que vous utilisez.  Ne  compilez <e>pas</e> le système de fichiers que vous utilisez en tant que système de fichier racine sous forme de
module,, sinon votre système Gentoo ne pourra pas monter vos
partitions. Activez aussi <c>/proc file system</c> et <c>Virtual memory</c>. Le
support des partitions Amiga sera nécessaire si vous utilisez un Pegasos ou les
partitions Macintosh si vous utilisez un Apple.
</p>

<pre caption="activer le support pour les systèmes de fichiers">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    <comment>(/proc sera peut-être forcé, auquel cas vous verrez ---.)</comment>
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)
  Partition Types ---&gt;
    [*] Advanced partition support
    [*] Amiga partition table support
    [*] Macintosh partition map support

 <comment>(Sélectionnez le(s) système(s) de fichiers dont vous avez besoin.)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Les utilisateurs de machines NewWorld ou OldWorld auront également besoin du
support HFS. Les utilisateurs d'OldWorld en auront besoin pour copier le noyau
compilé sur la partition MacOS. Les utilisateurs NewWorld en auront besoin pour
configurer la partition spéciale Apple_Bootstrap :
</p>

<pre caption="activer le support HFS">
File Systems ---&gt;
  Miscellaneous filesystems ---&gt;
    &lt;M&gt; Apple Macintosh file system support
    &lt;M&gt; Apple Extended HFS file system support
</pre>

<p>
Si vous utilisez PPPoE ou un modem classique pour vous connecter à Internet,
vous aurez besoin des options du noyau suivantes :
</p>

<pre caption="sélection des pilotes PPPoE">
Device Drivers ---&gt;
  Network device support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Les deux options de compression ne vous feront pas de mal, mais ne sont pas
toujours nécessaires. L'option <c>PPP over Ethernet</c> n'est pas obligatoire
non plus, considérant qu'elle pourrait n'être utilisée que par <c>ppp</c>
lorsque ce dernier est configuré pour utiliser PPPoE en mode noyau.
</p>

<p>
N'oubliez pas d'ajouter le support pour votre carte Ethernet. La plupart des
ordinateurs Apple récents utilisent le pilote Ethernet SunGEM. Les iMacs plus
vieux utilisent généralement le pilote BMAC.
</p>

<pre caption="sélectionner le pilote réseau">
Device Drivers ---&gt;
  Network device support ---&gt;
    Ethernet (10 or 100Mbit) ---&gt;
      [*] Ethernet (10 or 100Mbit)
      &lt;*&gt;   Generic Media Independent Interface device support
      &lt;*&gt;   MACE (Power Mac ethernet) support
      &lt;*&gt;   BMAC (G3 ethernet) support
      &lt;*&gt;   Sun GEM support
</pre>


<p>
Si vous démarrez à partir d'un périphérique Firewire, vous aurez besoin
d'activer les options suivantes. Si vous ne voulez pas compiler le support en
dur dans le noyau, vous aurez besoin d'inclure ces modules et leurs dépendances
dans un initrd.
</p>

<pre caption="activer le suppot Firewire au démarrage">
    Device Drivers ---&gt;
    IEEE 1394 (FireWire) support ---&gt;
    &lt;*&gt; IEEE 1394 (FireWire) support
    &lt;*&gt;   OHCI-1394 support
    &lt;*&gt;   SBP-2 support (Harddisks etc.)
</pre>

<p>
Si vous démarrez depuis un périphérique USB, vous devrez activer les options
suivantes. Si vous ne voulez pas compiler le support en dur dans le noyau, vous
aurez besoin d'inclure ces modules et leurs dépendances dans un initrd.
</p>

<pre caption="activer le suppot USB au démarrage">
    Device Drivers ---&gt;
    USB support ---&gt;
    &lt;*&gt; Support for Host-side USB
    &lt;*&gt;   OHCI HCD support
    &lt;*&gt;   USB Mass Storage support
</pre>

<p>
Ne désactiver pas le support du framebuffer du noyau, car celui-ci est est
nécessaire pour démarrer la machine. Si vous utilisez une carte graphique
nVidia, vous devrez utiliser le framebuffer Open Firmware. Si vous utilisez une
carte graphique ATI, vous devriez activer le pilote du framebuffer
supporté par votre puce (Mach64, Rage128 ou Radeon).
</p>

<pre caption="sélectionner un pilote framebuffer">
    Device Drivers ---&gt;
    Graphics support ---&gt;
    &lt;*&gt; Support for frame buffer devices
    [*] Open Firmware frame buffer device support
    &lt;*&gt; ATI Radeon display support
    &lt;*&gt; ATI Rage128 display support
    &lt;*&gt; ATI Mach64 display support
    Console display driver support ---&gt;
    &lt;*&gt; Framebuffer Console support
</pre>

<note>
si vous selectionnez plus d'un framebuffer, il se peut que le système choisisse
par défaut un pilote qui ne sera pas le meilleur. N'utilisez qu'un seul
framebuffer, sinon précisez celui qui est à utiliser en entrant l'option
adéquate au noyau au moment du démarrage. Par exemple :
<c>video=radeonfb</c>.
</note>
<p>
Ensuite sélectionnez  <e>Maintain a devtmpfs file system to mount at /dev</e> de façon que vos périphériques de fichiers critiques soient  disponibles très tôt dans le processus de démarrage. 
</p>

<pre caption="Activer la prise en charge de  devtmpfs ">
Device Drivers ---&gt;
  Generic Driver Options ---&gt;
    [*] Maintain a devtmpfs filesystem to mount at /dev
    [ ]   Automount devtmpfs at /dev, after the kernel mounted the rootfs
</pre>
<p>
Lorsque vous aurez terminé la configuration de votre noyau, poursuivez avec
la section <uri link="#compiling">Compiler et installer</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Compiler et installer</title>
<body>

<p>
Maintenant que votre noyau est configuré, il est temps de le compiler et de
l'installer. Quittez le menu de configuration et exécutez les commandes
suivantes :
</p>

<pre caption="compiler le noyau">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Lorsque la compilation est terminée, copiez l'image du noyau dans
<path>/boot</path>. Sur un Pegasos, la partition qui héberge <path>/boot</path>
doit avoir été montée. Si vous utiliser BootX pour démarrer, nous ferons la
copie du noyau plus tard.
</p>

<p>
Yaboot et BootX utilisent un noyau non-compressé contrairement à beaucoup de
chargeurs de démarrage. Le noyau décompressé est appelé vmlinux. Une fois que
le noyau a fini de compiler, il est placé dans <path>/usr/src/linux</path>. Sur
un Pegasos, le Pegasos firmware nécessite un noyau compressé appelé
zImage qui se trouve dans <path>/usr/src/linux/arch/powerpc/boot/images</path>.
</p>

<pre caption="installer le noyau">
# <i>cd /usr/src/linux</i>
<comment>Votre version de noyau peut être différente.</comment>
<comment>(Apple/IBM)</comment>
# <i>cp vmlinux /boot/<keyval id="kernel-name"/></i>
<comment>(Pegasos)</comment>
# <i>cp arch/powerpc/boot/images/zImage /boot/<keyval id="kernel-name"/></i>
</pre>

<p>
Maintenant, poursuivez votre lecture avec <uri link="#kernel_modules">Installer
des modules du noyau individuels</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternative: utiliser genkernel</title>
<body>

<p>
Maintenant que votre arbre des sources du noyau est en place, il est temps de compiler votre noyau en utilisant notr script  <c>genkernel</c> qui va compiler automatiquement un noyau pour vous. <c>genkernel</c> travaille en configurant un noyau presque identique à celui de votre CD d'installation. Ceci signifie que, quand vous utilisez 
<c>genkernel</c> pour compiler votre noyau, votre système va détecter votre matériel au moment du démarrage, comme le fait le CD d'installation. Comme genkernel ne requiert aucune configuration manuelle, c'est la solution idéale pour ceux qui ne sont pas très à l'aise avec la configuration et la compilation de leur propre noyau..
</p>

<p>
Tout d'abord, installez  genkernel :
</p>

<pre caption="installation de genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Si vous démarrer à partir d'un périphérique FireWire ou USB, vous devrez ajouter des modules à l'initrd. Éditez  <path>/usr/share/genkernel/arch/ppc/modules_load</path> et changez
<c>MODULES_FIREWIRE="ieee1394 ohci1394 sbp2"</c> pour la prise en charge de FireWire ou
<c>MODULES_USB="usbcore ohci-hcd ehci-hcd usb-storage"</c> pour la prise en charge de l'USB.
</p>

<p>
Avant de compiler vos sources, le fichier fstab doit être légèrement modifié. Le reste de ce fichier sera complété à une étape ultérieure, c'est pourquoi, il ne faut pas vous préoccuper des détails maintenant. Si vous n'avez pas créé de partition boot séparée,  (PAS bootstrap,
ce qui est différent), retirer la ligne faisant référence à  <path>/boot</path>  du fichier
<path>/etc/fstab</path>. Ceci doit être fait sur la plupart des ordinateurs Apple.
</p>

<pre caption="retirer /boot de /etc/fstab sur les machines sans partition boot">
# <i>nano -w /etc/fstab</i>
<comment>Retirer cette ligne</comment>
/dev/BOOT  /boot    ext2    noauto,noatime    0 2
</pre>

<p>
Maintenant compilez les sources du noyau avec <c>genkernel --genzimage all</c>.
Pour les machines Pegasos, il faut utiliser une configuration différente et créer une image zImage au lieu du noyau vmlinux utilisé sur les machines Apple. Soyez conscient que <c>genkernel</c>
compile un noyau qui prend en charge presque toutes les fonctionnalités matérielles et que cette compilation peut prendre un temps important ! 
</p>

<p>
Notez que, si la partition où le noyau devrait être placé n'utilise pas  un système de fichiers ext2
ou ext3, vous pourriez être forcé de configurer votre noyau à la main avec la commande 
<c>genkernel --menuconfig all</c> et ajouter la prise en charge de votre système de fichiers  <e>dans </e> le noyau (i.e. <e>pas</e> par un module). Les utilisateurs de  LVM2
voudrons certainement ajouter  <c>--lvm</c> comme argument aussi.
</p>

<pre caption="exécuter genkernel">
# <i>genkernel all</i>
</pre>

<pre caption="exécuter genkernel sur Pegasos">
# <i>genkernel --genzimage all</i>
</pre>

<p>
Dès que  <c>genkernel</c> a compilé un noyau, un jeux complet de modules et un <e>disque virtuel initial</e> (initramfs) sont créés. Vous utiliserez le noyau et initrd lors de la configuration du chargeur de démarrage plus loin dans ce document. Notez le nom du noyau  et celui de initrd car vous en aurez alors besoin. Le initrd sera démarré tout de suite après le démarrage pour assurer la détection automatique du matériel (comme le fait le CD d'installation) avant que votre système <e>réel</e> ne démarre. Assurez-vous de copier les arguments de démarrage aussi, car ils sont nécessaire à un démarrage réussi avec genkernel.
</p>

<pre caption="vérifier le nom de l'image noyau et du initrd créés">
<comment>Notez que la version de votre noyau peut être différente.</comment>
# <i>ls /boot/<keyval id="genkernel-name"/> /boot/<keyval id="genkernel-initrd"/></i>
</pre>

<p>
Maintenant continuez avec <uri link="#kernel_modules">Kernel Modules</uri>.
</p>

</body>
</section>
<section id="kernel_modules">
<title>Kernel Modules</title>

<subsection>
<include href="hb-install-kernelmodules.xml"/>
</subsection>

</section>
</sections>

