<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/handbook/hb-install-mips-bootloader.xml,v 1.11 2007/03/30 20:38:26 cam Exp $ -->

<sections>

<version>7.1</version>
<date>2007-02-08</date>

<section id="sgi">
<title>Configuration d'Arcload pour les machines Silicon Graphics</title>
<subsection>
<title>Arcload&nbsp;?</title>
<body>

<p>
Pour démarrer une machine SGI, nous utilisons maintenant le chargeur de
démarrage <c>arcload</c> qui remplace officiellement le déprécié
<c>arcboot</c> que nous utilisions auparavant pour installer Gentoo.
</p>

<note>
L'entête de volume SGI ne peut contenir que 16 fichiers, avec chacun 8
caractères maximum pour le nom du fichier.
</note>

</body>
</subsection>
<subsection>
<title>Installer arcload</title>
<body>

<p>
<c>arcload</c> a été écrit pour les machines qui nécessitent un noyau
64&nbsp;bits et qui ne peuvent donc pas utiliser <c>arcboot</c> (qui demande
beaucoup de travail pour qu'on puisse le compiler en tant que binaire
64&nbsp;bits). Il permet également de contourner certains problèmes qui
apparaissent lorsqu'on charge un noyau directement depuis l'entête de volume.
Passons donc à son installation&nbsp;:
</p>

<pre caption="Installer arcload et dvhtool">
# <i>emerge arcload dvhtool</i>
</pre>

<p>
Les binaires <c>arcload</c> ont dû être installés dans
<path>/usr/lib/arcload</path>&nbsp;:
</p>

<ul>
  <li>
    <c>sashARCS</c>&nbsp;: le binaire 32&nbsp;bits pour Indy, Indigo2 (R4k),
    Challenge S et O2.
  </li>
  <li>
    <c>sash64</c>&nbsp;: le binaire 64&nbsp;bits pour Octane/Octane2, Origin
    200/2000 et Indigo2 Impact.
  </li>
</ul>

<p>
Utilisez maintenant <c>dvhtool</c> pour installer le bon binaire dans l'entête
de volume&nbsp;:
</p>

<pre caption="Placer arcload dans l'entête de volume">
<comment>(Pour les Indy/Indigo2/Challenge S/O2.)</comment>
# <i>dvhtool --unix-to-vh /usr/lib/arcload/sashARCS sashARCS</i>

<comment>(Pour les Indigo2 Impact/Octane/Octane2/Origin 200/Origin 2000.)</comment>
# <i>dvhtool --unix-to-vh /usr/lib/arcload/sash64 sash64</i>
</pre>

<note>
Vous n'êtes pas obligé de garder les noms <c>sashARCS</c> ou <c>sash64</c>, à
moins que vous ne placiez les fichiers dans l'entête de volume d'un CD-ROM
amorçable. Le fichier peut porter le nom que vous voulez si c'est pour démarrer
sur disque dur.
</note>

<p>
Utilisez maintenant <c>dvhtool</c> pour vérifier que les fichiers sont
correctement installés.
</p>

<pre caption="Vérifier l'installation d'arcload dans l'entête de volume">
# <i>dvhtool --print-volume-directory</i>
----- directory entries -----
Entry #0, name "sash64", start 4, bytes 55859
</pre>

<p>
Le fichier de configuration, <c>arc.cf</c>, a une syntaxe à la C. Pour de
longues explications sur son utilisation, voyez la page sur <uri
link="http://www.linux-mips.org/wiki/Arcload">Arcload sur le wiki
Linux/MIPS</uri>. Pour faire court, vous définissez un certain nombre d'options
qui configureront le démarrage en utilisant la variable <c>OSLoadFilename</c>.
</p>

<pre caption="Un exemple de arc.cf">
<comment># Configuration d'Arcload</comment>

<comment># Quelques valeurs par défaut...</comment>
append  "root=/dev/sda3";
append  "ro";
append  "console=ttyS0,9600";

<comment># La définition principale, vous pouvez changer ip28 si vous voulez.</comment>
ip28 {
  <comment># Définition d'un noyau *fonctionnel*</comment>
  <comment># Sélectionnez-le avec OSLoadFilename="ip28(working)"</comment>
  working {
    description "SGI Indigo2 Impact R10000\n\r";
    image system "/working";
  }

  <comment># Définition d'un noyau en *test*</comment>
  <comment># Sélectionnez-le avec OSLoadFilename="ip28(new)"</comment>
  new {
    description "SGI Indigo2 Impact R10000 - Testing Kernel\n\r";
    image system "/new";
  }

  <comment># Pour déboguer un noyau</comment>
  <comment># Sélectionnez-le avec OSLoadFilename="ip28(working,debug)"</comment>
  <comment># ou OSLoadFilename="ip28(new,debug)"</comment>
  debug {
    description "Debug console";
    append "init=/bin/bash";
  }
}
</pre>

<p>
À partir d'<c>arcload-0.5</c>, <path>arc.cf</path> et les noyaux peuvent
résider dans l'entête de volume ou bien dans une partition ext2/3. Si cette
fonctionnalité vous intéresse, vous pouvez placer les fichiers directement dans
votre partition <path>/boot</path> (ou <path>/</path> si vous n'avez pas de
/boot séparé).
</p>

<pre caption="Placer arc.cf et le noyau dans l'entête de volume">
# <i>dvhtool --unix-to-vh arc.cf arc.cf</i>
# <i>dvhtool --unix-to-vh /usr/src/linux/vmlinux new</i>
</pre>

<p>
Ceci fait, tout ce qu'il reste à faire est de régler quelques options dans la
PROM. Voyez cela dans la section <uri link="#reboot">Redémarrer le
système</uri>.
</p>

</body>
</subsection>
</section>

<section id="cobalt">
<title>Configuration de CoLo pour les serveurs Cobalt</title>
<subsection>
<title>Installer CoLo</title>
<body>

<p>
Les capacités du firmware installé sur les cartes des serveurs Cobalt sont bien
plus limitées. Le BOOTROM de Cobalt est primitif en comparaison à la PROM SGI et
a un certain nombre de limitations critiques.
</p>

<ul>
  <li>
    Les noyaux sont limités à (environ) 675&nbsp;Ko. La taille actuelle de
    Linux 2.4 fait que c'est pratiquement impossible d'arriver à un noyau de
    cette taille. Pour les noyaux 2.6, ce n'est même pas la peine d'y penser.
  </li>
  <li>
    Les noyaux 64&nbsp;bits ne sont pas supportés par le firmware d'origine (en
    tout cas c'est au stade plus qu'expérimental sur les machines Cobalt
    actuellement).
  </li>
  <li>
    Le shell est franchement limité.
  </li>
</ul>

<p>
Pour s'affranchir de toutes ces limitations, un firmware alternatif nommé
<uri link="http://www.colonel-panic.org/cobalt-mips/">CoLo</uri> (Cobalt
Loader) a été développé. C'est une image BOOTROM qui peut au choix être
incorporée directement dans la carte du serveur Cobalt ou être chargée par le
firmware actuel.
</p>

<note>
Ce guide va vous indiquer comment installer CoLo afin qu'il soit chargé par le
firmware d'origine. C'est la seule méthode sure et recommandée d'installer CoLo.
</note>

<warn>
Si vous le souhaitez, vous pouvez tout aussi bien le «&nbsp;flasher&nbsp;» dans
votre serveur et remplacer le firmware originel. Cela dit, vous prenez vos
propres risques en faisant cela. Si quelque chose ne va pas, il vous faudra
supprimer physiquement le BOOTROM et le reprogrammer vous-même avec le firmware
d'origine. Si vous n'êtes pas sûr de la méthode, alors <e>NE TOUCHEZ À RIEN</e>.
Nous ne sommes pas responsable de ce que vous ferez si vous ignorez cet
avertissement.
</warn>

<p>
Bon, cela étant dit, nous pouvons procéder à l'installation de CoLo. Tout
d'abord commencez par installer le paquet.
</p>

<pre caption="Installation de colo">
# <i>emerge colo</i>
</pre>

<p>
Maintenant que c'est installé (j'espère que vous avez lu les messages) vous
devriez jeter un coup d'œil au répertoire <path>/usr/lib/colo</path> qui
contient deux fichiers&nbsp;: <path>colo-chain.elf</path>, qui est le
«&nbsp;noyau&nbsp;» à charger par le firmware d'origine, et
<path>colo-rom-image.bin</path>, qui est une image ROM pour remplacer son
BOOTROM. Commençons par monter <path>/boot</path> et y mettre une copie
compressée de <path>colo-chain.elf</path> là où le système s'attend à la
trouver.
</p>

<pre caption="Mettre CoLo à sa place">
# <i>gzip -9vc /usr/lib/colo/colo-chain.elf &gt; /boot/vmlinux.gz</i>
</pre>

</body>
</subsection>

<subsection>
<title>Configurer CoLo</title>
<body>

<p>
Maintenant, quand le système démarre pour la première fois, il chargera CoLo.
Celui-ci va afficher un menu sur votre LCD à l'arrière de la machine. La
première option (celle par défaut qui sera validée après 5 secondes) est de
démarrer sur le disque dur. Le système propose alors de monter la première
partition Linux qu'il trouvera et d'exécuter le script
<path>default.colo</path>. La syntaxe de ce fichier est très bien documentée
dans la documentation de CoLo (jetez un coup d'œil au fichier
<path>/usr/share/doc/colo-X.YY/README.shell.gz</path> &mdash; où X.YY est la
version de CoLo installée) et est très simple.
</p>

<note>
Astuce : gardez toujours deux noyaux, un <path>kernel.gz.working</path> dont
vous savez qu'il fonctionne et <path>kernel.gz.new</path>, celui que vous venez
de compiler. Ensuite, utilisez un lien symbolique vers l'un ou l'autre, ou
faites une copie de l'un d'eux.
</note>

<pre caption="Un fichier default.colo de base">
<comment>#:CoLo:#</comment>
mount hda1
load /kernel.gz.working
execute root=/dev/hda3 ro console=ttyS0,115200
</pre>

<note>
CoLo refusera de charger un script qui ne commence pas par la ligne
<c>#:CoLo:#</c>. Prenez-le comme une sorte d'équivalent à la ligne
<c>#!/bin/sh</c> dans un script shell.
</note>

<p>
Il est également possible de proposer un menu qui vous demanderait par exemple
quel noyau et configuration vous souhaiteriez charger. Le menu aurait un délai
de réponse par défaut. Dans cet exemple, le menu demande à l'utilisateur quel
noyau il souhaite utiliser, puis l'exécute. <path>vmlinux.gz.new</path> et
<path>vmlinux.gz.working</path> peuvent être des images de noyau ou bien
simplement des liens pointant vers les images sur le disque. L'argument
<c>50</c> de <c>select</c> signifie que CoLo démarrera la première option (ici
«&nbsp;Working&nbsp;») après 50 dixièmes de secondes.
</p>

<pre caption="Configuration avec menu">
<comment>#:CoLo:#</comment>

lcd "Monter hda1"
mount hda1
menu "Quel noyau ?" 50 Working New

goto {menu-option}
var image-name vmlinux.gz.working
goto 3f
@var image-name vmlinux.gz.working
goto 2f
@var image-name vmlinux.gz.new

@lcd "Chargement de Linux" {menu-option}
load / {image-name}
lcd "Démarrage..."
execute root=/dev/hda5 ro console=ttyS0,115200
boot
</pre>

<p>
Référez-vous à la documentation dans <path>/usr/share/doc/colo-VERSION</path>
pour plus de détails.
</p>

</body>
</subsection>
</section>

<section>
<title>Mise en place pour une console en série</title>
<subsection>
<body>

<p>
Bon, l'installation de Linux devrait désormais démarrer correctement, mais
suppose que vous allez vous connecter dessus depuis un terminal physique. Sur
les machines Cobalt, c'est particulièrement ennuyeux dans la mesure où les
terminaux physiques... n'existent pas.
</p>

<note>
Ceux qui ont le luxe d'avoir une carte graphique supportée peuvent sauter ce
chapitre s'ils le souhaitent.
</note>

<p>
Tout d'abord, ouvrez un éditeur et allez cherchez le fichier
<path>/etc/inittab</path>.  Dans celui-ci, vous devriez voir les lignes
suivantes&nbsp;:
</p>

<pre caption="Configuration de inittab">
<comment># SERIAL CONSOLE</comment>
<comment>#c0:12345:respawn:/sbin/agetty 9600 ttyS0 vt102</comment>

<comment># TERMINALS</comment>
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux

<comment># What to do at the "Three Finger Salute".</comment>
ca:12345:ctrlaltdel:/sbin/shutdown -r now
</pre>

<p>
Commencez par enlever le commentaire de la ligne <c>c0</c>. Par défaut il est
configuré pour utiliser un terminal ayant un taux de transfert de 9600bps. Sur
les serveurs Cobalt, vous pouvez changer la valeur à 115200 pour que cela
corresponde au taux de transfert décidé par le BOOTROM. Voici à quoi ressemble
cette section après avoir commenté les lignes pour les terminaux locaux
(<c>c1</c> à <c>c6</c>) dans la mesure où ceux-ci posent problème quand ils ne
peuvent pas ouvrir <path>/dev/ttyX</path>.
</p>

<pre caption="Extrait de la configuration de inittab">
<comment># SERIAL CONSOLE</comment>
c0:12345:respawn:/sbin/agetty 115200 ttyS0 vt102

<comment># TERMINALS -- These are useless on a headless qube</comment>
<comment>#c1:12345:respawn:/sbin/agetty 38400 tty1 linux</comment>
<comment>#c2:12345:respawn:/sbin/agetty 38400 tty2 linux</comment>
<comment>#c3:12345:respawn:/sbin/agetty 38400 tty3 linux</comment>
<comment>#c4:12345:respawn:/sbin/agetty 38400 tty4 linux</comment>
<comment>#c5:12345:respawn:/sbin/agetty 38400 tty5 linux</comment>
<comment>#c6:12345:respawn:/sbin/agetty 38400 tty6 linux</comment>
</pre>

<p>
Finalement, nous devons indiquer au système que le port série local peut être
considéré comme un terminal sûr. Le fichier qu'il vous faudra modifier est
<path>/etc/securetty</path>. Il contient une liste de terminaux que le système
peut utiliser. Il nous suffit d'ajouter deux lignes pour permettre au port série
d'être utilisé pour se connecter en tant que <c>root</c>.
</p>

<pre caption="Permettre la connexion de root sur la console en série">
<comment>(/dev/ttyS0, le nom traditionnel du premier port série)</comment>
# <i>echo 'ttyS0' >> /etc/securetty</i>

<comment>(Ensuite, Linux appelle également cela /dev/tts/0, donc nous
l'ajoutons aussi)</comment>
# <i>echo 'tts/0' >> /etc/securetty</i>
</pre>

</body>
</subsection>
</section>

<section id="#reboot">
<title>Redémarrage du système</title>
<subsection>
<body>

<p>
Sortez de l'environnement «&nbsp;chroot&nbsp;» et démontez toutes les partitions
montées. Ensuite, tapez la commande magique tant attendue&nbsp;: <c>reboot</c>.
</p>

<pre caption="Sortie du chroot, démontage des partitions et redémarrage">
# <i>exit</i>
cdimage ~# <i>cd</i>
cdimage ~# <i>umount /mnt/gentoo/boot /mnt/gentoo/dev /mnt/gentoo/proc /mnt/gentoo</i>
cdimage ~# <i>reboot</i>
</pre>

<note>
<e>Pour les utilisateurs de Cobalt&nbsp;:</e> la suite de ce chapitre concerne
la configuration de la PROM SGI afin qu'elle puisse démarrer <c>arcload</c>
et charger Linux. Ce n'est pas applicable à la configuration des serveurs
Cobalt. En fait, vous avez fini votre travail de configuration et pouvez
désormais démarrer sur votre système. Passez directement au chapitre&nbsp;:
<uri link="?part=1&amp;chap=11">Finaliser votre installation de Gentoo</uri>.
</note>

</body>
</subsection>
</section>
<section>
<title>Peaufiner la PROM SGI</title>
<subsection>
<title>Configuration générale de la PROM</title>
<body>

<p>
Maintenant que le chargeur de démarrage est installé, vous êtes prêt à
redémarrer la machine.
</p>

<pre caption="Redémarrer">
<comment>(Quitter l'environnement chroot.)</comment>
# <i>exit</i>

<comment>(Démonter les disques.)</comment>
# <i>umount /gentoo/boot</i>
# <i>umount /gentoo</i>

<comment>(Redémarrer.)</comment>
# <i>reboot</i>
</pre>

<p>
Lorsque vous avez redémarré, allez dans le menu <e>System Maintenance Menu</e>
et sélectionnez <e>Enter Command Monitor</e> (<c>5</c>) comme lorsque vous avez
démarré votre machine sur le réseau.
</p>

<pre caption="Configuration de la PROM pour démarrer Gentoo">
1) Start System
2) Install System Software
3) Run Diagnostics
4) Recover System
5) Enter Command Monitor

Option? <i>5</i>
Command Monitor.  Type "exit" to return to the menu.

<comment>(Quelques options pour arcload.)</comment>

<comment>(Situer l'entête de volume.)</comment>
&gt;&gt; <i>setenv SystemPartition scsi(0)disk(1)rdisk(0)partition(8)</i>

<comment>(Démarrer automatiquement Gentoo.)</comment>
&gt;&gt; <i>setenv AutoLoad Yes</i>

<comment>(Régler le fuseau horaire.)</comment>
&gt;&gt; <i>setenv TimeZone EST5EDT</i>

<comment>(Utiliser la console série : « g » au lieu de « d1 » pour les possesseurs de carte graphique.)</comment>
&gt;&gt; <i>setenv console d1</i>

<comment>(Régler la console série : de 9600 (par défaut) à 38400.)</comment>
&gt;&gt; <i>setenv dbaud 9600</i>
</pre>

<p>
Les réglages suivants dépendent de comment vous démarrez votre système.
</p>

</body>
</subsection>
<subsection>
<title>Réglages concernant le démarrage sur l'entête de volume</title>
<body>

<p>
Nous en partons uniquement dans un soucis d'exhaustivitvé, nous vous
recommandons plutôt d'utiliser <c>arcload</c> pour démarrer.
</p>

<note>
Ceci n'est valable que pour Indy, Indigo2 (R4k) et Challenge S.
</note>

<pre caption="Configuration de la PROM pour démarrer Gentoo depuis l'entête de volume">
<comment>(&lt;périphérique racine&gt; = la partition racine (root) Gentoo, /dev/sda3 par exemple</comment>
&gt;&gt; <i>setenv OSLoadPartition &lt;périphérique racine&gt;</i>

<comment>(Pour obtenir la liste des noyaux disponibles, tapez « ls ».)</comment>
&gt;&gt; <i>setenv OSLoader &lt;nom du noyau&gt;</i>
&gt;&gt; <i>setenv OSLoadFilename &lt;nom du noyau&gt;</i>

<comment>(Déclarez les paramètres du noyau à passer en argument.)</comment>
&gt;&gt; <i>setenv OSLoadOptions &lt;paramètres du noyau&gt;</i>
</pre>

<p>
Pour essayer un noyau directement, vous pouvez utiliser la commande PROM
<c>boot -f</c>&nbsp;:
</p>

<pre caption="Démarrer sans changer les variables d'environnement">
<comment>(Démarrer un noyau, « new », avec des paramètres supplémentaires.)</comment>
# <i>boot -f new root=/dev/sda3 ro</i>
</pre>

</body>
</subsection>
<subsection>
<title>Réglages pour arcload</title>
<body>

<p>
<c>arcload</c> utilise l'option <c>OSLoadFilename</c> pour indiquer quelles
options charger depuis <path>arc.cf</path>. Ce fichier est essentiellement un
script dont les blocs principaux définissent les images de démarrage des
différents systèmes et contiennent les options. Donc, l'option
<c>OSLoadFilename=mysys(serial)</c> ira chercher les réglages du bloc
<c>mysys</c> et applique les options supplémentaires de <c>serial</c>.
</p>

<p>
Dans l'exemple suivant, nous avons un bloc système de défini, <c>ip28</c>, avec
les options <c>working</c>, <c>new</c> et <c>debug</c>. Voici comment nous
définissons nos variables PROM&nbsp;:
</p>

<pre caption="Réglages PROM pour utiliser arcload">
<comment>(Choisir le chargeur de démarrage : sash64 ou sashARCS)</comment>
&gt;&gt; <i>setenv OSLoader sash64</i>

<comment>(Utilisation de l'image « working », définie dans la section « ip28 ».)</comment>
&gt;&gt; <i>setenv OSLoadFilename ip28(working)</i>
</pre>

<p>
À partir d'<c>arcload-0.5</c>, les fichiers n'ont plus besoin d'être chargés
dans l'entête de volume, ils peuvent simplement se trouver sur une partition
ext2/3. Pour dire à <c>arcload</c> où chercher ses fichiers de configuration et
ses noyaux, vous devez définir la variable PROM <c>OSLoadPartition</c>. La
valeur exacte dépendra d'où se situe votre disque sur le bus SCSI. Utilisez la
variable PROM <c>SystemPartition</c> pour vous guider, seul le numéro de
partition devrait changer.
</p>

<note>
Les partitions sont numérotées à partir de 0.
</note>

<pre caption="Indiquer à arcload où trouver arc.cf">
<comment>(Si vous souhaitez le charger depuis l'entête de volume, spécifiez la partition 8.)</comment>
&gt;&gt; <i>setenv OSLoadPartition scsi(0)disk(1)rdisk(0)partition(8)</i>

<comment>(Sinon, spécifiez le numéro et le type de partition.)</comment>
&gt;&gt; <i>setenv OSLoadPartition scsi(0)disk(1)rdisk(0)partition(0)[ext2]</i>
</pre>

</body>
</subsection>

<subsection>
<title>C'est fini</title>
<body>

<p>
Vous êtes maintenant fin prêt pour apprécier Gentoo&nbsp;! Démarrer votre
installation et concluez avec la <uri link="?part=1&amp;chap=11">finalisation
de l'installation</uri>.
</p>

</body>
</subsection>
</section>
</sections>
