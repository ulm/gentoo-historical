<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/genkernel.xml,v 1.12 2007/09/28 11:30:38 cam Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/fr/genkernel.xml" lang="fr" disclaimer="obsolete">
<title>Guide genkernel pour Gentoo Linux</title>

<author title="Auteur">
  <mail link="plasmaroo@gentoo.org">Tim Yamin</mail>
</author>
<!-- folajimi@speakeasy.net -->
<author title="Contributeur">
  Jimi Ayodele
</author>
<!-- thseiler@gmail.com -->
<author title="Support NFS">
  Thomas Seiler
</author>
<author title="Traducteur">
  <mail link="cam@gentoo.org">Camille Huot</mail>
</author>

<abstract>
Ce guide a pour but de constituer une documentation de référence
concernant toutes les fonctions de genkernel.
</abstract>

<license/>

<version>1.5</version>
<date>2007-06-20</date>

<chapter>
<title>Introduction</title>
<section>
<title>Motivation</title>
<body>

<p>
Destiné aux utilisateurs qui ne sont pas familiers avec la compilation de noyau,
genkernel est un outil qui automatise cette procédure. Il vous aidera à créer
une image de noyau telle que celles présentes sur les CD-ROM d'installation de
Gentoo, conçues pour détecter automatiquement la configuration matérielle de
votre système. Genkernel peut aussi être utilisé avec du matériel qui requiert
une initialisation ou bien juste pour créer un noyau fonctionnel avant le
premier démarrage de votre nouveau système. Puisque genkernel compile
automatiquement vos modules de noyau, vous pouvez utiliser du matériel qui
requiert que certains paramètres soient passés à certains modules pour
fonctionner.
</p>

</body>
</section>
<section>
<title>Public visé</title>
<body>

<p>
Si vous n'êtes pas sûr de la façon de faire pour compiler un noyau ou si vous ne
connaissez pas vraiment votre configuration matérielle, alors genkernel sera un
outil très pratique. Il a été conçu pour supprimer toutes les parties
compliquées du processus de compilation du noyau et pour supporter la majorité
du matériel disponible.
</p>

<p>
Si vous savez déjà de quels pilotes a besoin votre système pour fonctionner,
cela peut vous faire économiser un bon temps de compilation. En effet, vous
pouvez indiquer à genkernel de ne compiler que les pilotes requis pour votre
matériel. En principe, le nombre de ces pilotes sera inférieur au nombre de
pilotes de la configuration par défaut, ce qui explique la réduction de temps de
compilation.
</p>

</body>
</section>
<section>
<title>Installer genkernel</title>
<body>

<p>
Pour pouvoir utiliser genkernel, lancez la commande <c>emerge genkernel</c>. Si
vous utilisez la <uri
link="/doc/fr/handbook/2005.1/hb-install-about.xml#doc_chap2_sect1">plate-forme
de référence Gentoo</uri> (GRP), n'oubliez pas d'utiliser l'option <c>-k</c>
pour installer les paquets binaires. Comme les paquets GRP ont une version plus
ancienne de genkernel, les options diffèreront. Dans tous les cas, il vous est
recommandé de consulter <c>genkernel --help</c> pour savoir comment fonctionne
la version de genkernel que vous venez d'installer.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Travailler avec genkernel</title>
<section>
<title>Comment utiliser genkernel</title>
<body>

<p>
Bien qu'il y ait plusieurs façons de lancer genkernel, la plus simple reste
<c>genkernel all</c>. Une configuration générique qui marche correctement pour
tous les systèmes sera alors utilisée. Comme mentionné précédemment, cette
méthode n'est pas sans défaut. La plupart des modules compilés ne seront pas
utilisés et la compilation prendra beaucoup de temps. L'illustration suivante
montre une approche plus efficace, en passant certains paramètres à
genkernel&nbsp;:
</p>

<pre caption="Exécuter genkernel (avec des options)">
# <i>genkernel --bootsplash --no-install --no-clean --menuconfig all</i>
</pre>

<p>
Cette opération indique à genkernel de créer un noyau avec un écran de démarrage
(<c>--bootsplash</c>) qui devra être installé à la main (<c>--no-install</c>).
Dans la phase préparatoire de compilation, genkernel n'effacera pas les objets
déjà compilés (<c>--no-clean</c>). Enfin, un menu de configuration sera affiché,
permettant à l'utilisateur de choisir quels modules seront compilés
(<c>--menuconfig</c>).
</p>

<p>
D'autres paramètres peuvent modifier le comportement de genkernel. Par exemple,
remplacez <c>--no-install</c> par <c>--install</c> pour qu'il installe
automatiquement le nouveau noyau dans <path>/boot</path>. En utilisant le
paramètre <c>--mountboot</c>, la partition <path>/boot</path> sera monté par
genkernel automatiquement, si nécessaire.
</p>

<p>
Souvenez-vous que genkernel a été conçu pour simplifier la compilation du noyau
et pour soulager l'utilisateur. Pour cette raison, genkernel dispose de
paramètres pour faciliter l'ensemble du processus de compilation de noyau. Par
exemple, certaines options vont vous aider à configurer votre noyau, tandis que
d'autres concerneront la compilation en elle-même ou bien encore le débogage de
la compilation. Pour les personnes qui voudraient optimiser encore plus le
processus, il existe des paramètres qui concernent l'assemblage du noyau et même
son initialisation.
</p>

<p>
Le reste du chapitre détaille les diverses fonctionnalités des nombreux
paramètres et commandes de genkernel. Quelques-unes des options disponibles
fonctionnent comme un interrupteur, on place <b><c>no-</c></b> devant pour
désactiver l'option. L'effet produit dans ce cas est indiqué entre crochets [].
</p>

</body>
</section>
<section>
<title>Paramètres de configuration</title>
<body>

<p>
Les options de configuration listées ci-dessous sont là pour vous aider à
décider quelle fonctionnalité doit être activée ou pas dans le noyau, avant de
le compiler. Vous pouvez même choisir si le fichier de configuration ainsi
généré sera sauvegardé ou pas. Voici les options de configuration
principales&nbsp;:
</p>

<ul>
  <li>
    <b>--<c>no-</c>menuconfig</b>&nbsp;: Ceci lance <e>[ou ne lance pas]</e>
    la commande <c>make menuconfig</c> (ce qui démarre un outil de configuration
    en mode texte) avant de compiler votre noyau.
  </li>
  <li>
    <b>--gconfig</b>&nbsp;: Sélectionne la version GTK+ de l'outil de
    configuration du noyau. L'avantage de cette option est que la majorité des
    utilisateurs trouvent cette interface plus claire et facile à utiliser pour
    configurer le noyau, puisqu'elle utilise le système X-Window. Son
    inconvénient est que vous <b>devez</b> avoir X-Window pour l'utiliser, cela
    ne marchera pas dans une console en ligne de commande.
  </li>
  <li>
    <b>--xconfig</b>&nbsp;: Sélectionne la version Qt de l'outil de
    configuration du noyau. L'avantage de cette option est que la majorité des
    utilisateurs trouvent cette interface plus claire et facile à utiliser pour
    configurer le noyau, puisqu'elle utilise le système X-Window. Son
    inconvénient est que vous <b>devez</b> avoir X-Window pour l'utiliser, cela
    ne marchera pas dans une console en ligne de commande.
  </li>
  <li>
    <b>--<c>no-</c>save-config</b>&nbsp;: Sauve <e>[ou ne sauve pas]</e> la
    configuration du noyau dans un fichier situé dans le répertoire
    <path>/etc/kernels</path> pour une future utilisation.
  </li>
</ul>

</body>
</section>
<section>
<title>Options de compilation</title>
<body>

<p>
Les paramètres suivants seront généralement pris en compte pendant la
compilation&nbsp;:
</p>

<ul>
  <li>
    <b>--kerneldir=<path>/chemin/des/sources</path></b>&nbsp;: Pour spécifier
    l'endroit où se trouvent les sources du noyau, si ce n'est pas
    <path>/usr/src/linux</path>.
  </li>
  <li>
    <b>--kernel-config=<path>/chemin/vers/le/fichier/config</path></b>&nbsp;:
    Pour spécifier un autre fichier de configuration que
    <path>/chemin/des/sources/.config</path>.
  </li>
  <li>
    <b>--module-prefix=<path>/chemin/des/modules</path></b>&nbsp;: Pour
    spécifier un autre répertoire que <path>/lib/modules</path> pour y installer
    les modules du noyau.
  </li>
</ul>

<ul>
  <li>
    <b>--<c>no-</c>clean</b>&nbsp;: Ceci lance <e>[ou ne lance pas]</e>
    <c>make clean</c> avant de compiler le noyau, ce qui efface toutes les
    dépendances et fichiers objets déjà présents.
  </li>
  <li>
    <b>--<c>no-</c>mrproper</b>&nbsp;: Ceci lance <e>[ou ne lance pas]</e>
    <c>make mrproper</c> avant de compiler le noyau. Comme la commande <c>make
    clean</c>, <c>make mrproper</c> efface toutes les dépendances et fichiers
    objets de l'arborescence des sources du noyau, mais elle efface
    <b>également</b> les fichiers de configuration (tels que
    <path>/path/to/sources/.config</path> ou
    <path>/path/to/sources/.config.old</path>).
  </li>
  <li>
    <b>--oldconfig</b>&nbsp;: Lance la commande <c>make oldconfig</c>, qui
    essaira de collecter des informations de configuration pour votre
    architecture depuis un script générique situé dans
    <path>/usr/share/genkernel</path>. De plus, si <c>--oldconfig</c> est
    utilisé en même temps que <c>--clean</c>, cette dernière sera annulée, comme
    si on avait rajouté l'option <c>--no-clean</c>.
  </li>
</ul>

<ul>
  <li>
    <b>--callback="echo Hello"</b>&nbsp;: Cette routine effectue un appel à
    l'argument spécifié (ici, <c>echo Hello</c>) après que le noyau et les
    modules correspondants aient été construits, mais avant de créer l'image
    initrd. C'est utile lorsque vous souhaitez installer des modules externes
    dans l'initrd en passant la commande emerge en argument et redéfinir de ce
    fait un nouveau groupe de modules genkernel.
  </li>
</ul>

<ul>
  <li>
    <b>--<c>no-</c>install</b>&nbsp;: Lance <e>[ou ne lance pas]</e> la commande
    <c>make install</c>, ce qui installe votre nouveau noyau, le fichier de
    configuration, l'image initrd et le <path>System.map</path> sur votre
    partition monté de boot. Les modules compilés seront aussi installés.
  </li>
  <li>
    <b>--<c>no-</c>initrdmodules</b>&nbsp;: Empêche la copie des modules dans
    l'initrd généré par genkernel. Cette option en <c>no-</c> est une exception,
    il n'existe pas d'option opposée.
  </li>
  <li>
    <b>--genzimage</b>&nbsp;: Crée l'image initrd avant l'image du noyau. (Cette
    bidouille ne s'applique actuellement qu'aux systèmes PPC Pegasos.)
  </li>
</ul>

</body>
</section>
<section>
<title>Options du compilateur</title>
<body>

<p>
Les paramètres suivants sont supportés par genkernel et sont passés aux
applications concernées lorsque le noyau est en cours de construction. Ces
options affectent le <e>compilateur</e> utilisé dans le processus de compilation
du noyau, quoiqu'à un niveau bien plus bas.
</p>

<ul>
  <li>
    <b>--kernel-cc=<c>unCertainCompilateur</c></b>&nbsp;: Ceci spécifie un
    compilateur qui sera utilisé pour construire votre noyau.
  </li>
  <li>
    <b>--kernel-ld=<c>unCertainÉditeurDeLiens</c></b>&nbsp;: Ceci spécifie
    un éditeur de liens utilisé dans la construction de votre noyau.
  </li>
  <li>
    <b>--kernel-as=<c>unCertainAssembleur</c></b>&nbsp;: Ceci spécifie un
    assembleur qui sera utilisé pour construire votre noyau.
  </li>
  <li>
    <b>--kernel-make=<c>unCertainMake</c></b>&nbsp;: Ceci spécifie un
    utilitaire <e>GNU make</e> alternatif qui sera utilisé pour la construction
    de votre noyau.
  </li>
</ul>

<ul>
  <li>
    <b>--utils-cc=<c>unCertainCompilateur</c></b>&nbsp;: Ceci spécifie un
    compilateur qui sera utilisé pour construire les outils annexes.
  </li>
  <li>
    <b>--utils-ld=<c>unCertainÉditeurDeLiens</c></b>&nbsp;: Ceci spécifie
    un éditeur de liens utilisé dans la construction des outils annexes.
  </li>
  <li>
    <b>--utils-as=<c>unCertainAssembleur</c></b>&nbsp;: Ceci spécifie un
    assembleur qui sera utilisé pour construire les outils annexes.
  </li>
  <li>
    <b>--utils-make=<c>unCertainMake</c></b>&nbsp;: Ceci spécifie un
    utilitaire <e>GNU make</e> alternatif qui sera utilisé pour la construction
    des outils annexes.
  </li>
</ul>

<ul>
  <li>
    <b>--makeopts=<c>-jX</c></b>&nbsp;: Spécifie le nombre de fils d'exécution
    concurrents que make peut utiliser pendant la compilation du noyau et des
    outils. La variable «&nbsp;<b>X</b>&nbsp;» est un nombre obtenu en ajoutant
    un (1) au nombre de processeurs du système. Pour un système monoprocesseur,
    la valeur appropriée serait <c>-j2</c>. Un biprocesseur utiliserait
    <c>-j3</c> et ainsi de suite. <e>(Un système monoprocesseur qui supporte la
    technologie Hyper-Threading&trade; (ou «&nbsp;HT&nbsp;») peut utiliser la
    valeur <e><c>-j3</c></e>, en supposant que le support du SMP (Symmetric
    Multi-Processing) soit activé dans le noyau au moment de la
    compilation.)</e>
  </li>
</ul>

</body>
</section>
<section>
<title>Options de débogage</title>
<body>

<p>
L'utilisation d'options de débogage pendant la compilation du noyau contrôle le
nombre d'informations reportées, ainsi que la présentation de celles-ci.
</p>

<ul>
  <li>
    <b>--debuglevel=<c>NiveauVerbosité</c></b>&nbsp;: Contrôle le niveau de
    verbosité des informations fournies par genkernel. La variable
    <c>NiveauVerbosité</c> doit être un nombre entier compris entre 0 et 5. Le
    niveau «&nbsp;0&nbsp;» représentant le minimum d'information, tandis qu'une
    valeur de «&nbsp;5&nbsp;» fournira le plus d'informations possible sur le
    déroulement des opérations.
  </li>
  <li>
    <b>--debugfile=<path>/chemin/vers/fichier/de/log</path></b>&nbsp;: Ignore la
    valeur de <c>--debuglevel</c> et renvoie <b>toutes</b> les informations
    produites par genkernel vers le fichier spécifié, qui est
    <path>/var/log/genkernel.log</path> par défaut.
  </li>
  <li>
    <b>--<c>no-</c>color</b>&nbsp;: Active <e>[ou désactive]</e> la sortie
    colorée des informations de débogage (celles reportées par genkernel).
  </li>
</ul>

</body>
</section>
<section>
<title>Options d'initialisation</title>
<body>

<p>
Les options présentées ici sont utilisées pour créer certains effets lors du
démarrage du système. Certaines sont purement esthétiques, tandis que d'autres
sont nécessaires pour activer une fonctionnalité particulière.
</p>

<ul>
  <li>
    <b>--<c>no-</c>bootsplash</b>&nbsp;: Ajoute <e>[ou n'ajoute pas]</e> le
    support de <uri link="http://www.bootsplash.org/">bootsplash</uri> (l'écran
    de démarrage) à l'initrd que construit genkernel. Toutes les architectures
    n'offrent pas à l'heure actuelle le support de l'écran de démarrage&nbsp;;
    un noyau qui le supporte est également requis.
  </li>
  <li>
    <b>--<c>no-</c>gensplash</b>&nbsp;: Ajoute <e>[ou n'ajoute pas]</e> le
    support de <uri
    link="http://dev.gentoo.org/~spock/projects/gensplash/">gensplash</uri> à
    l'initrd que construit genkernel. L'outil gensplash est supposé remplacer
    bootsplash pour les noyaux 2.6. Pour écraser le thème par défaut utilisé par
    gensplash, utilisez <b>--gensplash=<c>MonTheme</c></b> (où <c>MonTheme</c>
    est le nom de l'un des répertoires situés dans <path>/etc/splash</path>.
  </li>
  <li>
    <b>--gensplash-res=<c>MaResolution</c></b>&nbsp;: Cette option vous permet
    de sélectionner les résolutions supportées par l'initrd au démarrage. Elle
    est utile pour deux raisons&nbsp;: d'abord, vous pouvez choisir quelles
    résolutions sont supportées spécifiquement par votre système, ensuite, vous
    réduisez la quantité d'espace occupée par l'initrd puisque ce dernier n'a
    plus à s'occuper des résolutions que vous n'utiliserez pas. Cependant, vous
    pouvez ignorer cette option si vous compilez un noyau pour un CD
    d'installation, ce qui permettra à gensplash de supporter toutes les
    résolutions possibles.
  </li>
  <li>
    <b>--do-keymap-auto</b>&nbsp;: Force la sélection du modèle de clavier lors
    du démarrage.
  </li>
  <li>
    <b>--lvm2</b>&nbsp;: Inclut le support des volumes gérés par <uri
    link="http://sources.redhat.com/lvm2/">LVM2</uri> grâce à des binaires
    <e>statiques</e>, s'ils sont disponibles. Les binaires (statiques) LVM2 en
    question sont compilés le cas échéant. Assurez-vous d'avoir installé le
    paquet lvm2 sur votre système avec <c>emerge lvm2</c> avant d'activer cette
    option et d'avoir lu le <uri link="/doc/fr/lvm2.xml">guide Gentoo
    LVM2</uri>.
  </li>
  <li>
    <b>--evms2</b>&nbsp;: Inclut le support des volumes gérés par <uri
    link="http://evms.sourceforge.net/">EVMS2</uri>, si disponible. Assurez-vous
    d'avoir installé le paquet evms sur votre système avec <c>USE=static emerge
    evms2</c> avant d'utiliser cette option genkernel. <e>(L'absence de l'option
    </e><c>USE=static</c><e> lors de l'installation du paquet empêchera la
    compilation des binaires statiques nécessaires.)</e>
  </li>
  <li>
    <b>--dmraid</b>&nbsp;: Inclut le support de <uri
    link="http://people.redhat.com/~heinzm/sw/dmraid/readme">DMRAID</uri>,
    l'outil qui crée des volumes RAID logiciels en utilisant le sous-système
    device-mapper du noyau. DMRAID découvre, active, désactive et affiche les
    propriétés des volumes RAID (ATARAID par exemple).
  </li>
  <li>
    <b>--luks</b>&nbsp;: Inclut le support de <uri
    link="http://luks.endorphin.org/">Linux Unified Key Setup</uri> (LUKS).
    Cela vous permettra d'utiliser un périphérique chiffré par LUKS pour placer
    votre système de fichiers racine (/). Spécifiez alors au chargeur de
    démarrage le nom de ce périphérique via la variable crypt_root (real_root
    doit être le nom du périphérique une fois déchiffré).
  </li>
  <li>
    <b>--linuxrc=<path>/chemin/vers/le/linuxrc</path></b>&nbsp;: Spécifie un
    <e>linuxrc</e> créé par l'utilisateur qui sera appelé lors de la phase de
    démarrage du noyau, avant le démarrage du système. (Un script linuxrc par
    défaut devrait se trouver dans <path>/usr/share/genkernel/</path>.) Ce
    script vous permet d'amorcer sur un petit noyau modulaire et de charger les
    pilotes requis (sous forme de modules) par le système avant le démarrage.
  </li>
  <li>
    <b>--cachedir=<path>/chemin/vers/autre/rep</path></b>&nbsp;: Remplace le
    chemin par défaut du cache utilisé pendant la compilation.
  </li>
  <li>
    <b>--tempdir=<path>/chemin/vers/autre/rep</path></b>&nbsp;: Spécifie le
    chemin du répertoire temporaire utilisé par genkernel lors de la compilation
    du noyau.
  </li>
  <li>
    <b>--unionfs</b>&nbsp;: Inclut le support <uri
    link="http://www.fsl.cs.sunysb.edu/project-unionfs.html">Unification File
    System</uri> dans l'initrd.
  </li>
</ul>

</body>
</section>
<section>
<title>Options diverses</title>
<body>

<p>
Les options suivantes n'ont pas pu être classées dans une autre catégorie&nbsp;:
</p>

<ul>
  <li>
    <b>--mountboot</b>&nbsp;: Détecte si le répertoire <path>/boot</path> a
    besoin d'être monté en lisant le <path>/etc/fstab</path>.
  </li>
  <li>
    <b>--kernname=<c>Nom</c></b>&nbsp;: Vous permet de nommer le noyau et
    l'initrd qui seront copiés dans <path>/boot</path>, de sorte que les
    fichiers produits soient kernel-<c>Nom</c>-version et
    initramfs-<c>Nom</c>-version.
  </li>
</ul>

</body>
</section>
<section>
<title>Actions possibles</title>
<body>

<p>
Une action indique à genkernel ce qu'il faut construire. Voici les actions
actuellement supportées&nbsp;:
</p>

<ul>
  <li><c>initrd</c>&nbsp;: Ne construit que l'initrd.</li>
  <li><c>bzImage</c>&nbsp;: Ne construit que le noyau.</li>
  <li><c>kernel</c>&nbsp;: Ne construit que le noyau et les modules.</li>
  <li><c>all</c>&nbsp;: Construit l'initrd, le noyau et les modules.</li>
</ul>

<p>
La dernière action, <c>all</c>, est recommandée car elle construit tout ce qui
est nécessaire pour obtenir un noyau fonctionnel. Rappelez-vous, une
<e>action</e> indique juste à genkernel ce qu'il faut <e>construire</e> et non
pas ce qu'il faut <e>installer</e>.
</p>

</body>
</section>
<section>
<title>Configuration du chargeur de démarrage</title>
<body>

<p>
Pour que genkernel puisse travailler avec votre chargeur de démarrage, vous
devez procéder à trois ou quatre modifications de la configuration de
celui-ci&nbsp;:
</p>

<ol>
  <li>
    Ajoutez <c>root=/dev/ram0</c> et <c>init=/linuxrc</c> aux options du noyau.
  </li>
  <li>
    Ajoutez <c>real_root=/dev/hda3</c>, par exemple, aux options du noyau, si
    <path>/dev/hda3</path> est votre partition racine.
  </li>
  <li>
    Si vous utilisez bootsplash, ajoutez une option telle que <c>vga=0x317</c>
    aux paramètres passés au noyau, ainsi que <c>splash=verbose</c> ou
    <c>splash=silent</c>, selon la verbosité désirée.
  </li>
  <li>
    Ajoutez l'instruction qui active l'utilisation d'une image initrd. Vous
    pouvez consulter le chapitre sur la <uri
    link="/doc/en/handbook/handbook-x86.xml?part=1&amp;chap=10">configuration du
    chargeur de démarrage</uri> du Manuel Gentoo pour plus de détails.
  </li>
</ol>

</body>
</section>
</chapter>

<chapter>
<title>Options de configuration</title>
<section>
<title>Modifier /etc/genkernel.conf</title>
<body>

<p>
La quantité d'options disponibles peut être encombrante si vous les utilisez
toutes en ligne de commande&nbsp;:
</p>

<pre caption="Exécution de genkernel (avec de nombreuses options)">
# <i>genkernel --debuglevel=5 --no-color --no-mrproper --clean --gensplash \
--kerneldir=/chemin/vers/sources --install --menuconfig \
--kernel-config=/chemin/vers/config --save-config --mountboot all</i>
</pre>

<p>
Heureusement, on peut placer la plupart des paramètres les plus utilisés dans un
fichier de configuration afin de pouvoir les régler ou les modifier plus
facilement. Voici une liste des options les plus significatives&nbsp;:
</p>

<ul>
  <li>
    <b>MENUCONFIG=<c>[yes|no]</c></b>&nbsp;: Cette option est équivalente au
    paramètre <c>--menuconfig</c> de genkernel, ce qui active l'utilisation de
    la commande <c>make menuconfig</c> pour lancer l'utilitaire de configuration
    du noyau en ligne de commande. Pour que l'utilitaire soit lancé
    automatiquement lors de la configuration du noyau, mettez la valeur
    «&nbsp;yes&nbsp;», sinon mettez «&nbsp;no&nbsp;».
  </li>
  <li>
    <b>CLEAN=<c>[yes|no]</c></b>&nbsp;: Mettre «&nbsp;yes&nbsp;» pour cette
    variable équivaut à utiliser l'option <c>--clean</c> de genkernel et lance
    la commande <c>make clean</c> pour effacer tous les fichiers objets et les
    dépendances de l'arborescence du noyau. Mettre «&nbsp;no&nbsp;» pour cette
    variable provoque l'effet domino d'activer l'option <c>--no-clean</c> de
    genkernel, qui désactive la commande <c>make clean</c>, ainsi que l'option
    <c>--no-mrproper</c>, qui désactive la commande <c>make mrproper</c>.
  </li>
  <li>
    <b>MRPROPER=<c>[yes|no]</c></b>&nbsp;: Mettez la valeur «&nbsp;yes&nbsp;»
    ici pour activer l'option <c>--mrproper</c> de genkernel et donc lancer la
    commande <c>make mrproper</c>, ce qui nettoie l'arborescence du noyau de
    tout fichier de configuration. Choisissez «&nbsp;no&nbsp;» pour provoquer
    l'effet inverse, c'est-à-dire l'option <c>--no-mrproper</c>, qui ne lance
    pas <c>make mrproper</c>.
  </li>
  <li>
    <b>MOUNTBOOT=<c>[yes|no]</c></b>&nbsp;: Mettre «&nbsp;yes&nbsp;» ici active
    l'option <c>--mountboot</c> de genkernel, qui montera automatiquement (si
    nécessaire) le répertoire <path>/boot</path> lors de la compilation. Si
    votre répertoire <path>/boot</path> est sur une partition séparée, nous vous
    recommandons d'activer ce paramètre, cela fera une chose de moins à se
    souvenir de faire.
  </li>
  <li>
    <b>SAVE_CONFIG=<c>[yes|no]</c></b>&nbsp;: Après avoir configuré le noyau,
    les options choisies sont sauvées dans le fichier <path>.config</path> à la
    racine de l'arborescence du noyau. Ce fichier peut se faire écraser lors
    d'une recompilation de noyau ou lors d'un nettoyage. En mettant
    «&nbsp;yes&nbsp;» ici, cela activera l'option <c>--save-config</c> de
    genkernel qui a pour effet de sauver ce fichier dans le répertoire
    <path>/etc/kernels</path>.
  </li>
  <li>
    <b>USECOLOR=<c>[yes|no]</c></b>&nbsp;: Mettez «&nbsp;yes&nbsp;» ici pour
    activer l'option <c>--color</c> de genkernel qui provoque l'affichage coloré
    des messages de genkernel, lorsque nécessaire.
  </li>
  <li>
    <b>DEBUGLEVEL=<c>[0|1|2|3|4|5]</c></b>&nbsp;: Cette option permet d'ajuster
    la verbosité des messages produits par genkernel. La valeur <c>0</c>
    supprimera complètement tous les messages de débogage tandis que <c>5</c>
    provoquera l'affichage de la totalité des informations disponibles.
  </li>
</ul>

<p>
En réglant les options appropriées directement dans
<path>/etc/genkernel.conf</path>, vous pouvez diviser par deux le nombre
d'arguments à placer sur la ligne de commande de genkernel&nbsp;:
</p>

<pre caption="Lancer genkernel après avoir renseigné genkernel.conf">
# <i>genkernel --gensplash --kerneldir=/chemin/vers/sources \
--kernel-config=/chemin/vers/config --install all</i>
</pre>

<p>
On obtient des résultats identiques avec les deux approches, pourtant la
majorité des options de la dernière sont rangées dans un fichier, ce qui permet
leur réutilisation et leur modification future.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Démarrer sur le réseau avec genkernel</title>
<section>
<title>Démarrer sur un CD-ROM d'installation Gentoo depuis le réseau</title>
<body>

<p>
L'outil genkernel peut fabriquer des images de noyaux et d'initrd qui permettent
de démarrer sur le réseau (<e>netboot</e>). Avec un peu de chance, vous devriez
pouvoir faire démarrer n'importe quel ordinateur récent par le réseau sur
l'environnement fourni par le CD-ROM d'installation de Gentoo.
</p>

<p>
La magie de la chose réside dans le script linuxrc de genkernel&nbsp;: il va
essayer de monter le CD-ROM d'installation par NFS via le réseau. Partant de là,
les <e>scripts d'initialisation</e> du CD-ROM d'installation seront utilisés
comme si le CD était présent en local.
</p>

</body>
</section>
<section>
<title>Construire un noyau et un initrd qui supportent le démarrage par le
réseau</title>
<body>

<p>
Pour activer le support du démarrage par le réseau, activez les options
suivantes lors de la configuration du noyau&nbsp;:
</p>

<warn>
Le support du démarrage par le réseau avec genkernel est expérimental et peut
contenir quelques bogues.
</warn>

<p>
Tout d'abord, l'image du noyau doit contenir les pilotes de votre carte réseau.
En principe, les pilotes pour ce genre de périphériques sont compilés en tant
que modules. Pourtant, il est impératif ici (pour pouvoir démarrer avec) que ces
pilotes soient intégrés dans le noyau et <b>pas</b> en modules.
</p>

<pre caption="Configurer un noyau 2.6 en activant la carte réseau">
Device Drivers --->
   Networking Support --->
      Ethernet (10 or 100Mbit)  ---> 
         [*] Ethernet (10 or 100Mbit)  
         &lt;*&gt;   le pilote de votre carte réseau ici
<comment>(Assurez-vous de choisir &lt;*&gt; et non &lt;M&gt;.)</comment>
</pre>

<p>
Ensuite, nous vous suggérons d'activer <c>IP: kernel level autoconfiguration</c>
et <c>IP: DHCP support</c>. Cela évitera une couche supplémentaire de complexité
si l'adresse IP et le chemin NFS du CD-ROM d'installation peuvent être spécifiés
par un serveur DHCP. Bien sûr, cela signifie que la ligne de commande d'appel du
noyau sera la même pour toutes les machines.
</p>

<pre caption="Configurer un noyau 2.6 pour qu'il supporte le DHCP">
Device Drivers --->
   Networking Support --->
      Networking options  
         [*] TCP/IP networking--->
         [*]   IP: kernel level autoconfiguration
         [*]     IP: DHCP support
<comment>(Ces options indiquent au noyau d'envoyer une requête DHCP au démarrage.</comment>
</pre>

<p>
De plus, vous devez activer SquashFS car la majorité des CD-ROM d'installation
récents de Gentoo l'utilisent. Le support de SquashFS n'est pas intégré aux
sources génériques de Linux, vous devrez appliquer les correctifs nécessaires ou
bien installer les <c>gentoo-sources</c>.
</p>

<pre caption="Configurer le noyau pour gérer SquashFS">
File systems---> 
   Miscellaneous filesystems --->
      [*] SquashFS 2.X - Squashed file system support
</pre>

<p>
Une fois que le processus de compilation est terminé, créez une archive
compressée (.tar.gz) qui contient les modules du noyau. Cette étape n'est
nécessaire que si la version de votre noyau ne correspond pas à la version de
l'image située sur le CD-ROM d'installation.
</p>

<pre caption="Créer une archive qui contient les modules du noyau">
# <i>cd /</i>
# <i> tar -cf /tmp/modules-X.Y.Z.tar.gz /lib/modules/X.Y.Z/</i>
</pre>

<p>
Selon votre méthode de démarrage par le réseau, vous devrez exécuter certaines
des étapes suivantes&nbsp;:
</p>

<pre caption="Créer une image de démarrage">
<comment>(Créer une image etherboot.)</comment>
# <i>emerge mknbi</i>
# <i>cd /boot</i>
# <i>mkelf-linux -params="root=/dev/ram0 init=/linuxrc ip=dhcp" kernel... initrd... > etherboot.img</i>

<comment>(Créer une image TFTP OpenBoot / SPARC64.)</comment>
# <i>emerge sparc-utils</i>
# <i>cd /boot</i>
# <i>elftoaout kernel... -o kernel.aout</i>
# <i>piggyback64 kernel.aout System.map-... initrd-...</i>
# <i>mv kernel.aout openboot.img</i> <comment>(C'est l'image de démarrage.)</comment>

<comment>(PXE ne requiert pas d'étape supplémentaire, le noyau et l'initrd
peuvent être utilisés tels quels.)</comment>
</pre>

<p>
Enfin, copiez ce noyau sur votre serveur TFTP. La manière de procéder dépend
complètement de votre architecture et dépasse les limites de ce guide. Veuillez
consulter la documentation de votre plate-forme.
</p>

</body>
</section>
<section>
<title>Configuration du NFS</title>
<body>

<p>
Pour mettre en place un partage NFS qui contient le CD-ROM d'installation,
utilisez un périphérique de bouclage (loop device) pour y monter l'image ISO et
copiez le contenu du CD dans le partage NFS. En bonus, le script initrd de
genkernel désarchivera tous les fichiers .tar.gz situés dans le répertoire
<path>/nfs/livecd/add</path>. Tout ce qu'il vous reste à faire est de copier
votre archive <c>modules-X.Y.Z.tar.gz</c> dans le répertoire
<path>/nfs/livecd/add</path>.
</p>

<pre caption="Préparation du partage NFS">
<comment>(En supposant que /nfs/livecd soit un partage NFS.)</comment>
# <i>mount /tmp/gentoo-livecd.iso /mnt/gentoo -o loop</i>
# <i>cp -p /mnt/cdrom /nfs/livecd</i>
# <i>umount /mnt/cdrom</i>

<comment>(Copiez modules.tar.gz dans /add.)</comment>
# <i>mkdir /nfs/livecd/add</i>
# <i>cp /tmp/modules-X.Y.Z.tar.gz /nfs/livecd/add</i>
</pre>

</body>
</section>
<section>
<title>Configuration du DHCP</title>
<body>

<p>
Les images netboot demanderont une adresse IP et un chemin NFS à votre serveur
DHCP. Ces informations peuvent être configurées individuellement en utilisant
l'adresse MAC pour identifier les machines&nbsp;:
</p>

<pre caption="Exemple de configuration dhcpd.conf">
...

host netbootableMachine {
         hardware ethernet 11:22:33:44:55:66;
         fixed-address 192.168.1.10;
         option root-path "192.168.1.2:/nfs/livecd";
}
<comment># Ici, 192.168.1.2 est le serveur NFS,
# tandis que 192.168.1.10 sera l'adresse IP du client.</comment>
...
</pre>

</body>
</section>
<section>
<title>Utilisation du démarrage par le réseau</title>
<body>

<p>
Le démarrage par le réseau est encore une fois très spécifique à la plate-forme
utilisée. Ce qui est important, c'est de spécifier les paramètres <c>ip=dhcp</c>
et <c>init=/linuxrc</c> sur la ligne de commande du noyau. Cela activera la
carte réseau et montera le CD-ROM d'installation via NFS. Voici quelques astuces
pour certaines plates-formes&nbsp;:
</p>

<pre caption="Comment démarrer par le réseau">
<comment># Etherboot : insérez le disque etherboot dans le lecteur et redémarrez.
# La ligne de commande du noyau a été spécifiée lors de la construction de
# l'image.</comment>

<comment># Sparc64 : Tapez Stop-A lors de l'invite de démarrage, puis :</comment>
ok boot net ip=dhcp init=/linuxrc

<comment># PXE : Configurez pxelinux (qui fait partie de syslinux),
# puis créez un fichier pxelinux.cfg/default qui contient ces lignes :</comment>

DEFAULT gentoo
TIMEOUT 40
PROMPT 1

LABEL gentoo
    KERNEL kernel-X.Y.Z
    APPEND initrd=initrd-X.Y.Z root=/dev/ram0 init=/linuxrc ip=dhcp
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Conclusion</title>
<section>
<title>Automatiser ou pas ?</title>
<body>

<p>
Le but de genkernel est de proposer une alternative plus simple pour la
compilation du noyau. Comme toujours, c'est vous qui décidez si vous voulez
automatiser le processus de compilation du noyau ou pas.
</p>

</body>
</section>
</chapter>
</guide>
