<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/mysql-upgrading.xml,v 1.7 2007/06/18 09:19:56 cam Exp $ -->

<guide link="/doc/fr/mysql-upgrading.xml" lang="fr">
<title>Guide de mise à jour pour MySQL 4.* ou 5.0.*</title>

<author title="Auteur">
  <mail link="citizen428@gentoo.org">Michael Kohl</mail>
</author>
<author title="Auteur">
  <mail link="vivo@gentoo.org">Francesco Riosa</mail>
</author>
<author title="Traducteur">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Traducteur">
  <mail link="pabou@swing.be">Patrice Bouvard</mail>
</author>

<abstract>
Les développeurs Gentoo qui s'occupent de MySQL sont heureux d'annoncer la
disponibilité prochaine de MySQL 5.0 dans la branche stable de Portage. Ce guide
décrit la procédure pour une mise à jour vers MySQL 4.* et vers 5.0.*.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.17</version>
<date>2007-06-04</date>

<chapter>
<title>Mise à jour directe suggérée pour une migration de 4.1 à 5.0</title>
<section>
<body>

<p>
Le moteur de tables myisam en version 4.1 était déjà suffisament mûr pour
permettre une mise à jour directe vers la prochaine version majeure de MySQL.
</p>

<note>
Ce n'est pas vrai pour les tables MERGE. Vous risquez probablement d'avoir des 
ennuis si vous essayez une mise à niveau directe pour ce type (rarement utilisé) 
de tables. Vous devriez vider et recréer ces tables et reconstituer leur contenu 
durant la mise à niveau. Si vous n'êtes pas sûr de vous, vous devriez commencer 
par lire comment <uri link="#doc_chap2">Mettre une ancienne version de MySQL à jour</uri>.
</note>

<p>
Pour cette étape, deux terminaux sont nécessaires parce que les verrous 
appartiennent à la session de MySQL.
</p>

<pre caption="Mise à jour directe de 4.1 vers 5.0.*">
# <i>quickpkg dev-db/mysql</i>
# <i>alias MYSQL="mysql --user=root --password=</i><comment>'votre_mot_de_passe'</comment><i>"</i>
# <i>DATADIR=$(MYSQL --batch --raw --silent --skip-column-names \
    --execute='SHOW variables LIKE "datadir";' \
    | sed -e 's|datadir[ \t]||')</i>

<comment>(L'étape suivante devra être faite dans le second terminal)</comment>
# <i>mysql --user=root --password=</i><comment>'votre_mot_de_passe'</comment>
mysql&gt; <i>FLUSH TABLES WITH READ LOCK;</i>

<comment>(Retour au premier terminal pour exécuter cette commande)</comment>
# <i>tar -cjpvf ~/mysql.$(date +%F"T"%H-%M).tar.bz2 \
    /etc/conf.d/mysql /etc/mysql/my.cnf "${DATADIR}"</i>

<comment>(Les commandes suivantes devront être exécutées dans le second terminal)</comment>
mysql&gt; <i>UNLOCK TABLES;</i>
mysql&gt; <i>quit</i>

<comment>(Retour au premier terminal pour le reste de la mise à niveau)</comment>
# <i>tar -tjvf ~/mysql.*.tar.bz2</i>
# <i>emerge -av "&gt;dev-db/mysql-5.0"</i>
# <i>dispatch-conf</i>
# <i>revdep-rebuild</i>
# <i>/etc/init.d/mysql restart</i>
# <i>mysql_upgrade_shell --user=root --password=</i><comment>'your_password'</comment><i> \
    --protocol=tcp --datadir="${DATADIR}"</i>
# <i>/etc/init.d/mysql restart</i>
# <i>unset DATADIR</i>
# <i>unalias MYSQL</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Mettre une ancienne version de MySQL à jour</title>
<section>
<body>

<p>
Pour mettre MySQL à jour depuis une ancienne version (&lt;4.0.24), il est
nécessaire de passer par la version 4.0.25. Si vous utilisez déjà une version
plus récente, vous pouvez passer à <uri link="#backup">l'étape suivante</uri>.
</p>

<pre caption="Mise à jour simple">
# <i>emerge -av --buildpkg "&lt;mysql-4.1"</i>
</pre>

</body>
</section>
</chapter>

<chapter id="backup">
<title>Créer une copie de vos données</title>
<section>
<body>

<impo>
Les valeurs dans les clés primaires sont gérées différemment dans les multiples
versions de MySQL, référez-vous au <uri
link="http://bugs.gentoo.org/108502">bogue #108502</uri> pour plus
d'informations. Il est vivement recommandé que vous scanniez vos tables pour
des valeurs de «&nbsp;0&nbsp;» (zéro) ou négatives et que vous les mettiez à
jour pour une valeur plus grande ou égale à «&nbsp;1&nbsp;».
</impo>

<p>
Une des tâches les plus importantes pour un administrateur de base de données
est la copie de sauvegarde. Procédons&nbsp;:
</p>

<pre caption="«&nbsp;Dump&nbsp;» de toutes les bases">
# <i>mysqldump \</i>
  <i>-uroot \</i>
  <i>--password=</i><comment>'mot_de_passe'</comment><i> \</i>
  <i>-hlocalhost \</i>
  <i>--all-databases \</i>
  <i>--opt \</i>
  <i>--allow-keywords \</i>
  <i>--flush-logs \</i>
  <i>--hex-blob \</i>
  <i>--master-data \</i>
  <i>--max_allowed_packet=16M \</i>
  <i>--quote-names \</i>
  <i>--result-file=BACKUP_MYSQL_4.0.SQL</i>
</pre>

<p>
Un fichier nommé <path>BACKUP_MYSQL_4.0.SQL</path> devrait avoir été créé.
Vous l'utiliserez pour recréer vos bases de données. Ce fichier est une suite
de commandes SQL.
</p>

<p>
Il est recommandé de vérifier que votre copie de sauvegarde pourra
effectivement être utilisée.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Mise à jour depuis une version récente de MySQL</title>
<section>
<body>

<p>
Si vous ne faites pas une mise à jour depuis une ancienne version, vous devez
faire une sauvegarde du logiciel que vous utilisez en ce moment.
</p>

<pre caption="Conserver un paquet binaire de la version actuelle de MySQL">
# <i>quickpkg dev-db/mysql</i>
</pre>

<p>
Ensuite, supprimez la version actuelle et toutes les données&nbsp;:
</p>

<pre caption="Enlever MySQL de votre système">
# <i>/etc/init.d/mysql stop</i>
# <i>emerge -C mysql</i>
# <i>tar cjpvf ~/mysql.$(date +%F"T"%H-%M).tar.bz2 /etc/mysql/my.cnf /var/lib/mysql/</i>
# <i>ls -l ~/mysql.*</i>
# <i>rm -rf /var/lib/mysql/ /var/log/mysql</i>
</pre>

<note>
Vous devriez maintenant avoir deux copies de sauvegarde. La première est
portable d'une version à l'autre de MySQL et la seconde vous permet de
redémarrer avec la version que vous venez de supprimer. Ce sujet est couvert
en détail plus loin dans cette documentation.
</note>

<p>
Maintenant que vous avez nettoyé votre installation de MySQL, vous pouvez
installer la nouvelle version. Remarquez que <c>revdep-rebuild</c> est utilisé
pour recompiler tous les paquets qui sont liés à MySQL.
</p>

<pre caption="Mise à jour du logiciel">
# <i>emerge -av "&gt;mysql-4.1"</i>
<comment>(Mise à jour de vos fichiers de configuration. Vous pouvez
également utiliser dispatch-conf)</comment>
# <i>etc-update</i>
# <i>revdep-rebuild</i>
</pre>

<p>
Ensuite, configurez la nouvelle installation et démarrez le serveur&nbsp;:
</p>

<pre caption="Configurer MySQL 4.1">
# <i>emerge --config =mysql-4.1.<comment>&lt;sous-version&gt;</comment></i>
# <i>/etc/init.d/mysql start</i>
</pre>

<p>
Ensuite, importez vos données.
</p>

<impo>
La configuration par défaut du fichier <path>/etc/mysql/my.cnf</path> active la
journalisation binaire (<c>log-bin</c>). Cette option provoque une
journalisation de toutes les transactions effectuées. Si votre base de données
est relativement grande (1 Go ou plus), les fichiers de journalisation peuvent
rapidement occuper tout l'espace disponible sur votre disque. Si l'espace
disque est relativement retreint, il est recommandé de désactiver cette option.
</impo>

<impo>
L'encodage par défaut défini dans MySQL 4.1 et supérieur est l'<c>utf8</c>. Si
les données contiennent des caractères <e>non</e>-ASCII, vous voudriez
probablement conserver l'encodage par défaut de la base de données en
remplacant toutes les occurences de <c>utf8</c> par <c>latin1</c> dans le
fichier de configuration <path>/etc/mysql/my.cnf</path>. Vous trouverez plus
d'informations dans le chapitre «&nbsp;<uri link="#On_charset_conversion">À
propos de la conversion d'encodage</uri>.&nbsp;»
</impo>

<impo>
La base de données administrative <c>mysql</c> qui contient les noms
d'utilisateurs et les mots de passe parmi d'autres choses, est et <b>doit</b>
être encodée en utf8.
</impo>

<p>
Des fonctionnalités plus anciennes de mysqldump peuvent exporter les tables 
dans un mauvais ordre si des clefs étrangères sont impliquées. Pour contourner 
ce problème, ajouter à la requête SQL les reports suivants&nbsp;:
</p>
 
<pre caption="Réparation du contrôle des clefs étrangères">
SET FOREIGN_KEY_CHECKS=0
SET FOREIGN_KEY_CHECKS=1
</pre>
         
<p>
Ensuite, importez les sauvegardes.
</p>

<pre caption="Importer les données sauvegardées">
# <i>cat BACKUP_MYSQL_4.0.SQL \
     | mysql \
     -uroot \
     --password=</i><comment>'mot_de_passe'</comment><i> \
     -hlocalhost \
     --max_allowed_packet=16M</i>

# <i>mysql_fix_privilege_tables \
     --defaults-file=/etc/mysql/my.cnf \
     --user=root \
     --password=</i><comment>'mot_de_passe'</comment><i></i>
</pre>

<p>
Si vous redémarrez le serveur MySQL et que tout fonctionne comme avant, vous
aurez terminé votre mise à jour.
</p>

<pre caption="Redémarrer le serveur MySQL">
# <i>/etc/init.d/mysql restart</i>
</pre>

<p>
Si vous avez rencontré des problèmes, n'hésitez pas à nous en faire part via
<uri link="https://bugs.gentoo.org">Bugzilla</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Récupérer votre ancienne installation de MySQL 4.0</title>
<section>
<body>

<p>
Si vous n'êtes pas satisfait de MySQL 4.1, il est possible de faire marche
arrière et de revenir à la version 4.0.
</p>

<pre caption="Retour à la version précédente">
# <i>/etc/init.d/mysql stop</i>
# <i>emerge -C mysql</i>
# <i>rm -rf /var/lib/mysql/ /var/log/mysql</i>
# <i>emerge --usepkgonly "&lt;mysql-4.1"</i>
<comment>(Remplacez le &lt;timestamp&gt; avec celui utilisé lors de la création
de la sauvegarde.)</comment>
# <i>tar -xjpvf mysql.&lt;timestamp&gt;.tar.bz2 -C /</i>
# <i>/etc/init.d/mysql start</i>
</pre>

<impo>
Si des paquets différents de <c>dev-db/mysql</c> ont été installés en suivant
ce guide, vous devez exécuter <c>revdep-rebuild</c> pour vous assurer que
chaque client utilise le bon objet mysqlclient partagé.
</impo>

</body>
</section>
</chapter>

<chapter id="On_charset_conversion">
<title>À propos de la conversion d'encodage</title>
<section>
<title>Introduction</title>
<body>

<p>
Ce chapitre ne se prétend pas être un guide exhaustif pour expliquer comment
faire de telles conversions, mais plutôt une courte liste d'astuces sur
lesquelles le lecteur peut élaborer.
</p>

<p>
Convertir une base de données peut être une tâche compliquée et la difficulté
augmente avec la diversité des données. Des choses comme les objets sérialisés
et les blobs sont un exemple où il est difficile de conserver les pièces
en un seul morceau.
</p>

</body>
</section>
<section>
<title>Les index</title>
<body>

<p>
Chaque caractère utf-8 est considéré comme étant long de 3 octets dans un
index. Les index dans MySQL peuvent aller jusqu'à 1000 octets de long (767
octets pour les tables InnoDB). Faites attention que la limite est mesurée en
octets alors que la taille d'une colonne est interpretée par un nombre de
caractères.
</p>

<p>
MySQL peut aussi créer des index sur des morceaux d'une colonne et ceci peut
nous aider. Voici quelques exemples&nbsp;:
</p>

<pre caption="Indexer en utilisant des préfixes">
$ <i>mysql -uroot -p'<comment>votre_mot_de_passe</comment>' test</i>

mysql> <i>SHOW variables LIKE "version" \G</i>
*************************** 1. row ***************************
Variable_name: version
    Value: <comment>5.0.24-log</comment>
1 row in set (0.00 sec)

mysql> <i>CREATE TABLE t1 (</i>
  ->   <i>c1 varchar(255) NOT NULL default '',</i>
  ->   <i>c2 varchar(255) NOT NULL default ''</i>
  ->   <i>) ENGINE=MyISAM DEFAULT CHARSET=utf8;</i>
Query OK, 0 rows affected (0.01 sec)

mysql> <i>ALTER TABLE t1</i>
  ->   <i>ADD INDEX idx1 ( c1 , c2 );</i>
<comment>ERROR 1071 (42000): Specified key was too long; max key length is 1000
bytes</comment>

mysql> <i>ALTER TABLE t1</i>
  ->   <i>ADD INDEX idx1 ( c1(165) , c2(165) );</i>
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> <i>CREATE TABLE t2 (</i>
  ->   <i>c1 varchar(255) NOT NULL default '',</i>
  ->   <i>c2 varchar(255) NOT NULL default ''</i>
  ->   <i>) ENGINE=MyISAM DEFAULT CHARSET=sjis;</i>
Query OK, 0 rows affected (0.00 sec)

mysql> <i>ALTER TABLE t2</i>
  ->   <i>ADD INDEX idx1 ( c1(250) , c2(250) );</i>
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> <i>CREATE TABLE t3 (</i>
  ->   <i>c1 varchar(255) NOT NULL default '',</i>
  ->   <i>c2 varchar(255) NOT NULL default ''</i>
  ->   <i>) ENGINE=MyISAM DEFAULT CHARSET=latin1;</i>
Query OK, 0 rows affected (0.00 sec)

mysql> <i>ALTER TABLE t3</i>
  ->   <i>ADD INDEX idx1 ( c1 , c2 );</i>
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0
</pre>

</body>
</section>
<section>
<title>Environnement</title>
<body>

<p>
Le système doit être configuré pour supporter la locale UTF-8. Vous trouverez
plus d'informations dans nos documents <uri
link="/doc/fr/utf-8.xml">Utiliser l'UTF-8 avec Gentoo</uri> et <uri
link="/doc/fr/guide-localization.xml">Guide de localisation de Gentoo
Linux</uri>.
</p>

<p>
Dans cet exemple, on définit quelques variables d'environnement du shell pour
utiliser la locale UTF-8 française dans <path>/etc/env.d/02locale</path>&nbsp;:
</p>

<pre caption="/etc/env.d/02locale">
LC_ALL=fr_FR.UTF-8
LANG=fr_FR.UTF-8
</pre>

<p>
Soyez sûr d'exécuter <c>env-update &amp;&amp; source /etc/profile</c>
après-ceci.
</p>

</body>
</section>
<section>
<title>iconv</title>
<body>

<p>
<c>iconv</c>, qui est livré avec <c>sys-libs/glibc</c>, est utilisé pour
convertir des fichiers texte d'un encodage vers un autre. Le paquet
<c>app-text/recode</c> peut également être utilisé.
</p>

<pre caption="Utiliser iconv">
<comment>(De latin1 vers l'utf8)</comment>
$ <i>iconv -f ISO-8859-15 -t UTF-8 file1.sql &gt; file2.sql</i>

<comment>(Du japonais vers l'utf8)</comment>
$ <i>iconv -f ISO2022JP -t UTF-8 file1.sql &gt; file2.sql</i>
</pre>

<p>
<c>iconv</c> peut être utilisé pour ré-encoder un dump sql même si
l'environnement n'est pas défini en utf8.
</p>

</body>
</section>
<section>
<title>Conversion avec SQL</title>
<body>

<p>
Il est possible d'utiliser les fonctions MySQL <c>CONVERT()</c> et
<c>CAST()</c> pour convertir des données dans vos scripts SQL.
</p>

</body>
</section>
<section>
<title>Apache (serveur web)</title>
<body>

<p>
Pour utiliser l'utf-8 avec apache, vous avez besoin de modifier les variables
suivantes dans <path>httpd.conf</path>&nbsp;: AddDefaultCharset,
CharsetDefault et CharsetSourceEnc. Si vos fichiers source html ne sont pas
encodés en utf-8, ils <b>doivent</b> être convertis avec <c>iconv</c> ou
<c>recode</c>.
</p>

</body>
</section>
</chapter>

</guide>
