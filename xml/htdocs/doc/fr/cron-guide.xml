<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/cron-guide.xml,v 1.8 2007/05/05 18:29:26 cam Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/fr/cron-guide.xml" lang="fr">
<title>Guide d'utilisation de Cron</title>

<author title="Auteur">
  <mail link="eric.brown@dnbrown.net">Eric Brown</mail>
</author>
<author title="Correcteur">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Traducteur">
  <mail link="cam@gentoo.org">Camille Huot</mail>
</author>

<abstract>
Ce guide explique comment installer et utiliser cron.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.8</version>
<date>2007-04-29</date>

<chapter>
<title>Cron, la base</title>
<section>
<title>À quoi sert cron&nbsp;?</title>
<body>

<p>
Cron est un démon qui lance des tâches qui ont été planifiées à l'aide de la
commande <c>crontab</c>. Pour cela, il se réveille à chaque minute pour vérifier
s'il n'y a pas une tâche à lancer en regardant les crontabs des utilisateurs.
</p>

<note>
Notez que <e>crontab</e> est à la fois le nom de la liste d'applications à
lancer et le nom de la commande qui permet d'éditer cette même liste.
</note>

</body>
</section>
<section>
<title>Plusieurs implémentations</title>
<body>

<p>
Il existe au moins trois implémentations de cron dans Portage, parmi lesquelles
vous devrez en choisir une à installer. Toutes les implémentations offrent une
interface similaire, appelée <c>crontab</c>. Il existe également un outil appelé
Anacron qui permet de travailler avec cron sur les systèmes qui ne sont pas
allumés en permanence.
</p>

<p>
Il est également important de noter que chacun des trois paquets cron dépendent
de <c>sys-process/cronbase</c>. Ce paquet n'est pas techniquement requis par les
implémentations de cron, mais apportent des fonctionnalités supplémentaires que
la plupart des utilisateurs apprécieront.
</p>

<p>
Avant de commencer à travailler avec cron, vous devez choisir quelle
implémentation vous voulez utiliser. Pour vous permettre de faire le choix
adéquat, le chapitre suivant contient des informations sur chacune d'entre
elles.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Quel est le meilleur cron pour vous&nbsp;?</title>
<section>
<title>Vixie Cron</title>
<body>

<p>
Vixie Cron est une implémentation complète de cron basée sur SysV cron. Chaque
utilisateur possède sa propre crontab et peut y spécifier des variables
d'environnement. À la différence des autres variantes de cron, il supporte
SELinux et PAM. Il supporte moins d'architectures que Dcron mais plus que Fcron.
</p>

<p>
Voici les fonctionnalités de <c>sys-process/vixie-cron</c>&nbsp;:
</p>

<ul>
  <li>Supporte SELinux.</li>
  <li>Supporte le fichier <path>/etc/security/limits.conf</path> de PAM.</li>
  <li>
    Chaque utilisateur peut avoir son propre crontab. L'accès est contrôlé par
    les fichiers <path>cron.allow</path> et <path>cron.deny</path>.
  </li>
</ul>

</body>
</section>
<section>
<title>Dillon's Cron</title>
<body>

<p>
Dcron est une implémentation simple, élégante et sûre de cron. Il ne permet pas
de spécifier des variables d'environnement dans les crontabs et toutes les
tâches sont lancées avec <path>/bin/sh</path>. Comme dans Vixie Cron, chaque
utilisateur possède son propre crontab.
</p>

<p>
Voici les fonctionnalités de <c>sys-process/dcron</c>&nbsp;:
</p>

<ul>
  <li>Rapide, simple et sans fonctionnalité superflue.</li>
  <li>
    L'accès à <c>crontab</c> est limité au groupe cron, il n'utilise aucune
    autre source externe pour les permissions.
  </li>
</ul>

</body>
</section>
<section>
<title>Fcron</title>
<body>

<p>
Le but de Fcron est de remplacer Vixie Cron et Anacron. Il est conçu pour
fonctionner sur des systèmes qui ne sont pas en marche en permanence et il
possède des fonctionnalités avancées. Il sait gérer les contraintes de démarrage
des tâches, les contrôles de mise en série des tâches, la possibilité de
spécifier des valeurs pour <c>nice</c> et la possibilité de lancer des tâches au
démarrage du système. Visitez le <uri link="http://fcron.free.fr/">site de
fcron</uri> pour plus d'informations.
</p>

<p>
Voici les fonctionnalités de <c>sys-process/fcron</c>&nbsp;:
</p>

<ul>
  <li>
    Conçu pour fonctionner sur les systèmes qui ne sont pas allumés en
    permanence, il peut lancer une tâche au démarrage si son heure est passée.
  </li>
  <li>
    Le crontab peut contenir des variables d'environnement ainsi que beaucoup
    d'autres options.
  </li>
  <li>
    Chaque utilisateur peut avoir son propre crontab. L'accès est contrôlé par
    les fichiers <path>cron.allow</path> et <path>cron.deny</path>.
  </li>
  <li>
    La syntaxe crontab est améliorée par de nombreuses nouvelles
    fonctionnalités supportées.
  </li>
</ul>

</body>
</section>

<section>
<title>Anacron</title>
<body>

<p>
Anacron n'est pas un démon cron. C'est un programme qui fonctionne en
collaboration avec l'un d'entre eux. Il exécute des commandes à des intervalles
spécifiés en jours et ne présume pas que le système fonctionne en permanence. Il
lancera les tâches qui ne l'ont pas été pendant que le système était éteint.
Anacron s'utilise en général avec un démon cron pour le lancer chaque jour.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Utilisation de cron</title>
<section>
<title>Installation</title>
<body>

<p>
Sélectionnez l'implémentation de cron que vous préférez, puis installez-la.
</p>

<pre caption="Installer cron">
# <i>emerge dcron</i>
# <i>/etc/init.d/dcron start</i>
# <i>rc-update add dcron default</i>
</pre>

<p>
Si vous n'avez pas installé Fcron, vous pouvez éventuellement installer Anacron.
</p>

<pre caption="Installer anacron">
# <i>emerge anacron</i>
# <i>/etc/init.d/anacron start</i>
# <i>rc-update add anacron default</i>
</pre>

</body>
</section>
<section id="systemtab">
<title>Le crontab du système</title>
<body>

<p>
À la fin de l'installation, certains des paquets cron vous demandent de lancer
la commande <c>crontab /etc/crontab</c>. Le fichier <path>/etc/crontab</path>
est le <e>crontab de votre système</e>. Une installation de cron peut l'utiliser
avec <c>sys-process/cronbase</c> pour lancer les scripts situés dans
<path>/etc/cron.{daily,hourly,weekly,monthly}</path>. Notez que seul Vixie Cron
planifie automatiquement les tâches situées dans <path>/etc/crontab</path>. Les
utilisateurs de Dcron et Fcron devront lancer <c>crontab /etc/crontab</c> à
chaque modification du fichier <path>/etc/crontab</path>.
</p>

<p>
Veuillez noter que les tâches planifiées dans le crontab système ne seront pas
forcément affichées dans la liste des tâches donnée par <c>crontab -l</c>.
</p>

<p>
Bien sûr, peut-être que vous ne voudrez pas utiliser de crontab système du tout.
Dans ce cas, si vous utilisez Dcron ou Fcron, <e>ne lancez pas</e> <c>crontab
/etc/crontab</c>. Si vous utilisez vixie-cron, vous devrez commenter toutes les
lignes du fichier <path>/etc/crontab</path>.
</p>

<pre caption="Commenter toutes les lignes de /etc/crontab">
# <i>sed -ie "s/^/#/" /etc/crontab</i>
</pre>

</body>
</section>
<section>
<title>Donner l'accès à cron aux utilisateurs autorisés</title>
<body>

<p>
Si vous voulez que d'autres utilisateurs que root aient accès au démon cron,
alors lisez cette section. Sinon, vous pouvez passer directement à la section
suivante, «&nbsp;<uri link="#scheduling">Planifier une tâche</uri>&nbsp;».
</p>

<note>
Donner à un utilisateur la permission d'avoir un crontab ne lui permet pas
d'exécuter des tâches en tant que root. Si vous voulez qu'un utilisateur puisse
éditer le crontab de root, vous devriez penser à utiliser <c>sudo</c>. Vous
trouverez plus de détails dans notre <uri link="/doc/fr/sudo-guide.xml">Guide
Sudo</uri>.
</note>

<p>
Quel que soit le paquet cron utilisé, si vous voulez permettre à un utilisateur
d'avoir un crontab, la première chose à faire est de l'intégrer au groupe cron.
Par exemple, si vous voulez ajouter l'utilisateur <e>wepy</e> au groupe cron,
vous taperez&nbsp;:
</p>

<pre caption="Ajouter un utilisateur au groupe cron">
# <i>gpasswd -a wepy cron</i>
</pre>

<note>
Après avoir ajouté un utilisateur à un groupe, l'utilisateur en question doit
se reconnecter pour que vos modifications soient prises en compte.
</note>

<p>
Si vous utilisez <b>Dcron</b>, c'était tout ce qu'il y avait à faire pour
permettre à un utilisateur d'avoir son crontab. Les utilisateurs de Dcron peuvent
maintenant passer à la section suivante «&nbsp;<uri link="#scheduling">Planifier
une tâche</uri>&nbsp;».
</p>

<p>
Si vous utilisez <b>Fcron</b>, vous devrez éditer les fichiers
<path>/etc/fcron/fcron.deny</path> et <path>/etc/fcron/fcron.allow</path>. La
manière la plus sûre est d'abord d'interdire tout le monde dans
<path>/etc/fcron/fcron.deny</path>, puis d'autoriser explicitement chaque
utilisateur dans <path>/etc/fcron/fcron.allow</path>.
</p>

<impo>
<b>Si ni le fichier <path>/etc/fcron/fcron.allow</path>, ni
<path>/etc/fcron/fcron.deny</path> n'existent, tous les utilisateurs du groupe
cron auront le droit d'utiliser crontab</b>. Le fichier
<path>fcron.allow</path> par défaut de fcron <b>permet à tous les
utilisateurs</b> du groupe cron d'accéder à fcrontab.
</impo>

<pre caption="Permissions dans fcron.deny">
all
</pre>

<p>
Maintenant, disons que l'utilisateur <e>wepy</e> devrait avoir le droit de
planifier ses propres tâches. Nous l'ajoutons au fichier
<path>/etc/fcron/fcron.allow</path> de la façon suivante&nbsp;:
</p>

<pre caption="Permissions dans fcron.allow">
wepy
</pre>

<p>
Si vous aviez choisi <b>Vixie cron</b>, vous pouvez vous contenter d'éditer le
fichier <path>/etc/cron.allow</path>.
</p>

<impo>
Il est important de noter que si seul le fichier <path>/etc/cron.allow</path>
existe, alors uniquement les utilisateurs du groupe cron qui sont listés dans ce
fichier auront le droit d'avoir un crontab. Par contre, si seul un fichier
<path>/etc/cron.deny</path> vide existe, alors tous les utilisateurs du groupe
cron y auront droit. <b>Ne laissez pas <path>/etc/cron.deny</path> vide si vous
n'avez pas de <path>/etc/cron.allow</path></b>.
</impo>

<p>
Par exemple, si vous voulez permettre l'accès à l'utilisateur <e>wepy</e>, vous
l'ajouterez au fichier <path>/etc/cron.allow</path> comme suit&nbsp;:
</p>

<pre caption="Permissions dans /etc/cron.allow">
wepy
</pre>

</body>
</section>
<section id="scheduling">
<title>Planifier une tâche</title>
<body>

<p>
La procédure d'édition du crontab diffère d'un paquet à l'autre, mais ils
supportent tous le même ensemble de commandes de base&nbsp;: ajouter et
remplacer des crontabs, éditer des crontabs, supprimer des crontabs et lister
les tâches des crontabs. La liste suivante vous montre comment procéder pour
chaque paquet.
</p>

<table>
<tr>
  <th>Version</th>
  <th>Éditer le crontab</th>
  <th>Supprimer le crontab</th>
  <th>Nouveau crontab</th>
  <th>Lister le crontab</th>
</tr>
<tr>
  <ti>dcron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -d <e>[user]</e></c></ti>
  <ti><c>crontab <e>fichier</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
<tr>
  <ti>fcron</ti>
  <ti><c>fcrontab -e</c></ti>
  <ti><c>fcrontab -r <e>[user]</e></c></ti>
  <ti><c>fcrontab <e>fichier</e></c></ti>
  <ti><c>fcrontab -l</c></ti>
</tr>
<tr>
  <ti>vixie-cron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -r <e>-u [utilisateur]</e></c></ti>
  <ti><c>crontab <e>fichier</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
</table>

<note>
Si vous ne spécifiez pas d'utilisateur pour supprimer le crontab, il supprimera
celle de l'utilisateur courant.
</note>

<note>
Fcron fait un lien symbolique de <c>crontab</c> vers <c>fcrontab</c>.
</note>

<p>
Avant de pouvoir utiliser ces commandes, vous devez d'abord comprendre comment
fonctionne le crontab elle-même. Chaque ligne d'une crontab doit spécifier cinq
champs temporels dans l'ordre suivant&nbsp;: les minutes (0-59), les jours du
mois (1-31), les mois (1-12) et les jours de la semaine (0-7, lundi étant 1 et
dimanche étant 0 ou 7). Les jours de la semaine et les mois peuvent être
spécifiés en utilisant leur abréviation anglaise&nbsp;: mon, tue, jan, feb,
etc. Chaque champ peut aussi contenir un intervalle de valeurs (par
exemple&nbsp;: 1-5 ou mon-fri), une liste de valeurs séparées par une virgule ou
un intervalle de valeurs avec un <e>pas</e> associé (par exemple 1-6/2 est
équivalent à 1,3,5).
</p>

<p>
Cela doit vous paraître un peu déroutant, mais, avec quelques exemples, vous
verrez que ce n'est pas si compliqué.
</p>

<pre caption="Exemples">
<comment># Lance /bin/false à chaque minute, toute l'année</comment>
*     *     *     *     *        /bin/false

<comment># Lance /bin/false du lundi au mercredi et le 4 de chaque mois, à 1h35</comment>
35    1     4     *     mon-wed  /bin/false

<comment># Lance /bin/true le 2 mars à 22h25</comment>
25    22    2     3     *        /bin/true

<comment># Lance /bin/false chaque lundi, mercredi et vendredi, à 2h</comment>
0     2     *     *     1-5/2    /bin/false
</pre>

<note>
Remarquez bien que vous devez spécifier les jours de la semaine et les jours du
mois pour qu'ils soient combinés. Si vous mettez * pour l'un des deux champs,
uniquement l'autre sera pris en compte. Enfin, si vous mettez * pour les deux,
la tâche sera exécutée tous les jours.
</note>

<p>
Pour tester tout ce que vous venez d'apprendre, franchissons le pas et ajoutons
quelques tâches planifiées. Premièrement, créez un fichier nommé
<path>crons.cron</path> et faites-le ressembler à ceci&nbsp;:
</p>

<pre caption="Éditer crons.cron">
# <i>nano crons.cron</i>
<comment>#Min.  Heures Jours  Mois    JourSemaine</comment>
10     3      1      1       *       /bin/echo "je n'aime pas vraiment cron"
30     16     *      1,2     *       /bin/echo "j'aime un peu cron"
*      *      *      1-12/2  *       /bin/echo "cron c'est de la balle !"
</pre>

<p>
Nous pouvons maintenant ajouter ce crontab au système grâce à la
«&nbsp;commande de création&nbsp;» que nous avons vue précédemment.
</p>

<pre caption="Un nouveau crontab">
# <i>crontab crons.cron</i>
</pre>

<note>
Vous ne verrez pas les sorties des «&nbsp;echo&nbsp;» que nous avons programmés
tant que vous n'utiliserez pas de redirection.
</note>

<p>
Pour vérifier que les tâches ont été correctement prises en compte, nous
utiliserons la «&nbsp;commande pour lister&nbsp;».
</p>

<pre caption="Lister les tâches planifiées">
# <i>crontab -l</i>
</pre>

<p>
Vous devriez voir quelque chose qui ressemble fortement au fichier
<path>crons.cron</path>. Si ce n'est pas le cas, vous avez peut-être utilisé une
mauvaise commande pour entrer les tâches.
</p>

<p>
Ce crontab doit afficher «&nbsp;cron c'est de la balle&nbsp;!&nbsp;» à chaque
minute de chaque heure de chaque jour de chaque mois impair. Évidemment, vous
n'avez à faire ceci que si vous aimez vraiment cron. Le crontab fera également
afficher «&nbsp;j'aime un peu cron&nbsp;» chaque jour de janvier et février à
16h30 et «&nbsp;je n'aime pas vraiment cron&nbsp;» le premier janvier à 3h10.
</p>

<p>
Si vous utilisez Anacron, continuez à lire cette section. Sinon, vous pouvez
passer à la section suivante, «&nbsp;<uri link="#editing">Éditer le
crontab</uri>&nbsp;».
</p>

<p>
Les utilisateurs d'Anacron doivent aussi éditer le fichier
<path>/etc/anacrontab</path>. Ce fichier possède quatre champs&nbsp;: le nombre
de jours entre chaque lancement, le délai en minutes à imposer après son
lancement, le nom de la tâche et la commande à lancer.
</p>

<p>
Par exemple, pour qu'il lance la commande <c>echo "j'aime anacron"</c> tous les
cinq jours, dix minutes après qu'Anacron soit démarré, vous mettriez&nbsp;:
</p>

<pre caption="/etc/anacrontab">
5 10 perte-de-temps /bin/echo "j'aime anacron"
</pre>

<p>
Anacron se termine une fois que toutes les tâches de l'anacrontab ont été
exécutées. Ainsi, si nous voulons qu'il vérifie les tâches à exécuter tous les
jours, nous devons utiliser cron. Les instructions à la fin de la section
suivante vous indiqueront comment faire.
</p>

</body>
</section>
<section id="editing">
<title>Éditer le crontab</title>
<body>

<p>
À présent, soyons un peu réalistes. Vous n'avez certainement pas besoin que
votre système vous rappelle chaque minute à quel point vous aimez cron. Afin
d'avancer, nous allons enlever ce crontab en utilisant la «&nbsp;commande de
suppression&nbsp;» vue précédemment et nous listerons ensuite les tâches pour
nous assurez que cela a marché.
</p>

<pre caption="Supprimer et lister le crontab">
# <i>crontab -d</i>
# <i>crontab -l</i>
</pre>

<p>
Vous ne devriez pas voir de tâche listée par <c>crontab -l</c>. Si ce n'est pas
le cas, c'est que nous n'avons pas réussi à retirer le crontab. Assurez-vous
d'avoir utilisé la bonne «&nbsp;commande de suppression&nbsp;» appropriée pour
votre paquet.
</p>

<p>
Maintenant que tout est propre, mettons quelque chose d'utile dans le crontab de
<b>root</b>. La plupart des gens voudraient lancer <c>updatedb</c>
hebdomadairement pour être s'assurer que <c>slocate</c> fonctionne correctement.
Pour ajouter ça à votre crontab, commencez par ouvrir le fichier
<path>crons.cron</path> et faites-le ressembler à ceci&nbsp;:
</p>

<pre caption="Un vrai crontab">
22 2 * * 1    /usr/bin/updatedb
</pre>

<p>
Cela aura pour effet de lancer <c>updatedb</c> tous les lundis matins à 2h22.
Insérons maintenant ce crontab avec la «&nbsp;commande de création&nbsp;» vue
précédemment et vérifions notre travail.
</p>

<pre caption="Lister les tâches cron">
# <i>crontab crons.cron</i>
# <i>crontab -l</i>
</pre>

<p>
Maintenant, disons que vous voulez aussi ajouter <c>emerge --sync</c> à la liste
de vos tâches quotidiennes. Vous pouvez faire cela en éditant
<path>crons.cron</path> puis en faisant <c>crontab crons.cron</c> comme nous
l'avons fait précédemment, mais vous pouvez également utiliser la
«&nbsp;commande d'édition&nbsp;» appropriée vue dans le tableau plus haut. Cela
vous donne la possibilité d'éditer le crontab de votre utilisateur sans devoir
utiliser un fichier externe comme <path>crons.cron</path>.
</p>

<pre caption="Éditer directement un crontab">
# <i>crontab -e</i>
</pre>

<p>
Cela devrait ouvrir votre crontab dans un éditeur de texte. Nous voulons lancer
<c>emerge --sync</c> tous les jours à 6h30 du matin&nbsp;; voici ce que cela
donnerait&nbsp;:
</p>

<pre caption="Une vraie crontab">
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
<comment>(Si vous utilisez anacron, ajoutez cette ligne :)</comment>
30 7 * * *    /usr/sbin/anacron -s
</pre>

<p>
Encore une fois, vérifiez la liste des tâches cron, comme nous l'avons fait dans
les exemples précédents, afin de vous assurer que tout est correct.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Utiliser cronbase</title>
<section>
<body>

<p>
Comme nous l'avons mentionné plus haut, tous les paquets cron disponibles
dépendent de <c>sys-process/cronbase</c>. Le paquet cronbase crée les fichiers
<path>/etc/cron.{hourly,daily,weekly,monthly}</path> ainsi qu'un script appelé
<c>run-crons</c>. Vous noterez que le crontab système par défaut
(<path>/etc/crontab</path>) contient ces lignes&nbsp;:
</p>

<pre caption="Crontab système par défaut">
*/15 * * * *     test -x /usr/sbin/run-crons &amp;&amp; /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
</pre>

<p>
Pour éviter de rentrer trop dans les détails, acceptons le fait que ces
commandes permettront l'exécution de vos scripts mensuels, hebdomadaires, etc.
Cette manière de planifier des tâches comporte certains avantages&nbsp;:
</p>

<ul>
  <li>
    Les tâches sont exécutées même si l'ordinateur était éteint lorsqu'elles
    auraient dues être lancées.
  </li>
  <li>
    La possibilité de mettre un script dans un tel endroit bien défini facilite
    la vie des mainteneurs d'applications.
  </li>
  <li>
    Vous savez exactement où sont placées vos tâches et vos crontab, ce qui
    facilite la sauvegarde du système.
  </li>
</ul>

<note>
Encore une fois, nous rappelons que Vixie Cron lit automatiquement
<path>/etc/crontab</path>, ce qui n'est pas le cas de dcron et fcron. Veuillez
vous reporter à la section «&nbsp;<uri link="#systemtab">Le crontab du
système</uri>&nbsp;» pour en lire plus à ce sujet.
</note>

</body>
</section>
</chapter>


<chapter>
<title>Pour finir</title>
<section>
<title>Problèmes</title>
<body>

<p>
Si vous avez du mal à faire marcher cron correctement, vous serez certainement
intéressé par cette liste de vérifications&nbsp;:
</p>

<ul>
<li>
  <b>Est-ce que cron tourne&nbsp;?</b><br/>
  Faites <c>ps ax | grep cron</c> et vérifiez qu'il soit présent.
</li>
<li>
  <b>Est-ce que cron marche&nbsp;?</b><br/>
  Essayez&nbsp;: «&nbsp;* * * * * /bin/echo "test" &gt;&gt; /tmp/crontest&nbsp;»
  et vérifiez que crontest est bien écrit.
</li>
<li>
  <b>Est-ce que votre commande fonctionne&nbsp;?</b><br/>
  Essayez&nbsp;: «&nbsp;* * * * * /bin/votre_commande &gt; /tmp/crontab.log
  2&gt;&amp;1&nbsp;» et cherchez-y des erreurs.
</li>
<li>
  <b>Est-ce que cron peut exécuter votre tâche&nbsp;?</b><br/>
  Cherchez des erreurs dans le journal de cron qui se trouve, en général, dans
  <path>/var/log/cron.log</path> ou <path>/var/log/messages</path>.
</li>
<li>
  <b>Y a-t-il des dead.letter&nbsp;?</b><br/>
  Cron envoie généralement un mail lorsqu'il y a un problème. Vérifiez votre
  messagerie ou cherchez dans le fichier <path>~/dead.letter</path>.
</li>
</ul>

<p>
Souvenez-vous que chaque paquet cron est différent et que les fonctionnalités
proposées varient énormément de l'un à l'autre. Assurez-vous d'avoir lu les
pages de manuel de crontab, fcrontab ou anacron, selon ce que vous utilisez.
</p>

<p>
Bonne chance&nbsp;!
</p>

</body>
</section>
</chapter>
</guide>
