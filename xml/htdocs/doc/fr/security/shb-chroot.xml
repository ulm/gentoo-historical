<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/security/shb-chroot.xml,v 1.3 2005/12/16 15:48:34 neysx Exp $ -->
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<sections>

<version>1.1</version>
<date>2005-12-15</date>

<section>
<title>Utiliser un environnement chroot</title>
<body>

<p>
«&nbsp;Chrooter&nbsp;» un service (ou un utilisateur) est une façon de limiter
son environnement afin qu'il n'accède qu'à l'essentiel sans pouvoir
obtenir un accès (ou des informations) qui pourraient mener aux privilèges
root. En démarrant un service par le biais d'un autre utilisateur que root
(nobody, apache, named), un attaquant ne peut accéder aux fichiers qu'avec les
permissions de cet utilisateur. Cela veut dire qu'un attaquant ne peut obtenir
un accès root même si les services ont une faille de sécurité.
</p>

<p>
Certains services comme pure-ftpd et bind ont des fonctionnalités permettant
d'utiliser chroot, mais pas tous. Si le service le supporte, profitez-en.
Sinon, il vous faudra trouver un moyen de créer le vôtre. Voyons à présent
comment créer un environnement chroot. Pour comprendre les bases, nous allons
expérimenter avec <c>bash</c>. (Ce qui est une façon aisée d'apprendre à
utiliser chroot.)
</p>

<p>
Créez le répertoire <path>/chroot</path> (<c>mkdir /chroot</c>) et cherchez
quelles sont les bibliothèques dynamiques avec lesquelles <c>bash</c> est
compilé (si la compilation a été faite avec le mode <c>-static</c>, ce n'est
pas nécessaire)&nbsp;:
</p>

<p>
La commande suivante va créer une liste des bibliothèques utilisées par
<c>bash</c>.
</p>

<pre caption="Obtenir la liste des bibliothèques utilisées">
# <i>ldd /bin/bash</i>
  libncurses.so.5 => /lib/libncurses.so.5 (0x4001b000)
  libdl.so.2 => /lib/libdl.so.2 (0x40060000)
  libc.so.6 => /lib/libc.so.6 (0x40063000)
  /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
</pre>

<p>
Créons à présent un environnement pour <c>bash</c>.
</p>

<pre caption="Création d'un environnement chroot pour bash">
# <i>mkdir /chroot/bash</i>
# <i>mkdir /chroot/bash/bin</i>
# <i>mkdir /chroot/bash/lib</i>
</pre>

<p>
Copiez ensuite les fichiers utilisés par <c>bash</c> (<path>/lib</path>) dans
le répertoire <path>lib</path> de l'environnement chroot et copiez la commande
bash dans le répertoire <path>bin</path> du chroot. Cela devrait suffire pour
recréer l'environnement, mais avec moins de fonctionnalités. Il ne vous reste
qu'à l'essayer&nbsp;: <c>chroot /chroot/bash /bin/bash</c>. Si vous obtenez une
invite vous donnant <path>/</path>, c'est gagné&nbsp;! Dans le cas contraire, il
devrait vous dire quel est le fichier manquant. Il se peut également que
certaines bibliothèques partagées dépendent d'autres bibliothèques.
</p>

<p>
Vous remarquerez assez vite que, dans le chroot, rien ne marche à part
<c>echo</c>. C'est parce que nous n'avons aucune autre commande dans notre
environnement que bash et qu'<c>echo</c> est une fonction intégrée.
</p>

<p>
La méthode est la même pour créer un service en chroot. La seule différence est
que les services se basent parfois sur des périphériques («&nbsp;devices&nbsp;»)
et des fichiers de configuration dans <path>/etc</path>. Copiez-les tout
simplement (des périphériques peuvent être copiés avec <c>cp -a</c>) vers
l'environnement chroot, éditez le script d'initialisation (init) pour qu'il
utilise chroot avant de s'exécuter.  Il peut être difficile de trouver quels
périphériques et fichiers de configuration sont nécessaires. C'est ici que la
commande <c>strace</c> devient utile. Démarrez le service avec
<c>/usr/bin/strace</c> et notez les fonctions suivantes&nbsp;: open, read, stat
et peut-être connect. Cela devrait vous donner une bonne idée des fichiers à
copier. Dans la plupart des cas, copiez juste le fichier passwd (retirez tous
les utilisateurs qui n'ont aucun rapport avec le service),
<path>/dev/zero</path>, <path>/dev/log</path> et <path>/dev/random</path>.
</p>

</body>
</section>
<section>
<title>Le mode utilisateur Linux («&nbsp;User Mode Linux&nbsp;»)</title>
<body>

<p>
Une autre façon de créer un environnement plus sécurisé est de faire fonctionner
une machine virtuelle. Une telle machine est, comme son nom l'indique, un
processus exécuté par votre véritable système d'exploitation, et qui fournit un
environnement matériel et un système d'exploitation qui donnent l'impression
d'être une machine en soit. Le bénéfice, en ce qui a trait à la sécurité, est
que si le serveur exécuté par la machine virtuelle est compromis, seul le
serveur virtuel est affecté, et non pas l'installation mère.
</p>

<p>
Pour plus d'informations au sujet de l'installation du mode utilisateur Linux,
consultez le <uri link="/doc/fr/uml.xml">User Mode Linux Guide</uri>.
</p>

</body>
</section>
</sections>
