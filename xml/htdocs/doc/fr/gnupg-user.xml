<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/gnupg-user.xml,v 1.17 2005/11/29 22:16:46 neysx Exp $ -->

<guide link="/doc/fr/gnupg-user.xml" lang="fr">
<title>Utiliser GnuPG sous Gentoo</title>

<author title="Auteur">
 <mail link="humpback@gentoo.org">Gustavo Felisberto</mail>
</author>
<author title="Correcteur">
 <!-- mail link="zhen@gentoo.org" -->John P. Davis
</author>
<author title="Correcteur">
 <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Traducteur">
 <mail link="cam@gentoo.org">Camille Huot</mail>
</author>
<author title="Traducteur">
 <mail link="clement@varaldi.org">Clément Varaldi</mail>
</author>

<abstract>
Ce guide vous apprendra les bases de l'utilisation de GnuPG, un utilitaire pour
sécuriser les communications.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.2</version>
<date>2005-11-29</date>

<chapter>
<title>Introduction</title>

<section>
<title>Ce que vous apportera ce guide</title>
<body>

<p>
Ce guide présume que vous êtes relativement familier avec la cryptographie à
clé publique, le chiffrement et les signatures numériques. Si ce n'est pas le
cas, sautez à la section <uri link="#doc_chap6">crytographie à clé
publique</uri> ou jetez un œil au <uri
link="http://www.gnupg.org/(fr)/documentation/guides.html">manuel GNU de la
confidentialité</uri> chapitre 2, puis reprenez votre lecture ici.
</p>

<p>
Ce guide vous apprendra comment installer GnuPG, comment créer votre paire de
clés, comment ajouter des clés à votre trousseau, comment soumettre votre
clé publique au serveur de clés et comment signer, chiffrer, vérifier ou
déchiffrer les messages que vous envoyez ou recevez. Vous apprendrez aussi
comment chiffrer des fichiers de votre système pour empêcher sa lecture par une
autre personne.
</p>

</body>
</section>

<section>
<title>Installation des logiciels requis</title>
<body>

<p>
Pour commencer, vous devez lancer <c>emerge gnupg</c>. De plus en plus
d'applications supportent gpg de nos jours, vous pouvez ajouter <e>crypt</e>
dans votre variable USE si vous le souhaitez. Si vous souhaitez utiliser gnupg
avec un logiciel de messagerie, vous pouvez utiliser pine (<c>emerge
pinepgp</c>), mutt (<c>emerge mutt</c>), Mozilla/Netscape Mail, evolution
(evolution est un clone GNOME de Microsoft Outlook) et KMail de KDE (KMail fait
partie du paquet kdepim).
</p>

<p>
<c>Kgpg</c> devrait vous intéresser si vous utilisez KDE. Ce petit programme
vous permet de générer des paires de clés, d'importer des clés à partir de
fichiers ASCII, de signer des clés, d'exporter des clés et plus encore.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Génération de votre clé et ajout de clés à votre trousseau</title>
<section>
<title>Création de votre clé</title>
<body>

<p>
Pour créer votre clé, il vous suffit de faire <c>gpg --gen-key</c>. La première
fois que vous la lancez, cette commande créera quelques répertoires. Lancez-la
à nouveau pour créer les clés&nbsp;:
</p>

<pre caption="Création de la clé">
$ <i>gpg --gen-key</i>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.

Please select what kind of key you want:
   (1) DSA and ElGamal (default)
   (2) DSA (sign only)
   (4) ElGamal (sign and encrypt)
   (5) RSA (sign only)
   Your selection? <i>1</i>
</pre>

<p>
Vous avez ici la possibilité de choisir le type de clé que vous voulez
utiliser. En général, les utilisateurs choisissent le défaut, DSA et ElGamal.
Ensuite, il faut choisir la taille de la clé. Sachez que plus elle est grande,
mieux c'est. Néanmoins, n'utilisez pas une taille supérieure à 2048 avec une
clé DSA/ElGamal, 1024 est largement suffisant pour une utilisation normale de
la messagerie.
</p>

<p>
Après la taille vient la date d'expiration. Ici, par contre, plus c'est petit,
mieux c'est, mais la plupart des utilisateurs peuvent choisir une clé qui
n'expire jamais ou bien dans deux ou trois ans.
</p>

<pre caption="Choisir la taille de la clé">
DSA keypair will have 1024 bits.
About to generate a new ELG-E keypair.
              minimum keysize is  768 bits
              default keysize is 1024 bits
    highest suggested keysize is 2048 bits
What keysize do you want? (1024) <i>2048</i>
Requested keysize is 2048 bits      
Please specify how long the key should be valid.
         0 = key does not expire
      &lt;n&gt;  = key expires in n days
      &lt;n&gt;w = key expires in n weeks
      &lt;n&gt;m = key expires in n months
      &lt;n&gt;y = key expires in n years
Key is valid for? (0) <i>0</i>
Key does not expire at all
</pre>

<p>
Vous devez maintenant entrer quelques informations personnelles. Si vous comptez
distribuer votre clé publique, mettez votre adresse de messagerie réelle.
</p>

<pre caption="Renseignements personnels">
Is this correct (y/n)? <i>y</i>
                       
You need a User-ID to identify your key; the software constructs the user id
from Real Name, Comment and Email Address in this form:
    "Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;"

Real name: <i>John Doe</i>
Email address: <i>john@nowhere.someplace.flick</i>
Comment: <i>The Real John Doe</i>
You selected this USER-ID:
    "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? <i>O</i>
You need a Passphrase to protect your secret key.   

Enter passphrase:
</pre>

<p>
Entrez maintenant votre mot de passe deux fois. Utilisez de préférence un mot
de passe robuste. En effet, si quelqu'un réussissait à s'emparer de votre clé
privée et à trouver votre mot de passe, il pourrait envoyer des messages signés
à votre nom, de telle sorte que quiconque pensera que c'est vous qui l'avez
envoyé.
</p>

<p>
Enfin, GnuPG vous génère votre clé. Vous pouvez déplacer la souris ou jouer
un MP3 pour accélérer le processus de création de la clé, car cela aide la
génération de valeurs aléatoires.
</p>

</body>
</section>

<section>
<title>Générer un certificat de révocation</title>
<body>

<impo>
Cette partie est très importante, faites-le <e>DE SUITE</e>.
</impo>

<p>
Après avoir créé vos clés, vous devez créer un certificat de révocation.
Il vous permettra d'annuler votre clé si quelque chose de fâcheux venait à se
produire (une personne l'a volée, par exemple).
</p>

<pre caption="Génération d'un certificat de révocation">
$ <i>gpg --list-keys</i>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;
sub  2048g/96D6CDAD 2002-12-08

$ <i>gpg --output revoke.asc --gen-revoke 75447B14</i>

sec  1024D/75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;

Create a revocation certificate for this key? <i>y</i>
Please select the reason for the revocation:  
  0 = No reason specified
  1 = Key has been compromised
  2 = Key is superseded
  3 = Key is no longer used
  Q = Cancel
(Probably you want to select 1 here)
Your decision? <i>1</i>
Enter an optional description; end it with an empty line:
&gt; <i>Someone cracked me and got my key and passphrase.</i>
&gt; <i>On m'a piraté et volé ma clé avec son mot de passe.</i>
&gt;
Reason for revocation: Key has been compromised
Someone cracked me and got my key and passphrase.
On m'a piraté et volé ma clé avec son mot de passe.
Is this okay? <i>y</i>

You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"
1024-bit DSA key, ID 75447B14, created 2002-12-08

ASCII armored output forced.
Revocation certificate created.

Please move it to a medium which you can hide away; if Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just in case
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!
</pre>

<p>
La commande <c>gpg --list-keys</c> liste les clés de votre trousseau de clés
publiques. Vous pouvez l'utiliser pour repérer l'ID de votre clé afin de créer
le certificat de révocation. Maintenant, il est sage de copier tout le
répertoire ~/.gnupg/ et le certificat de révocation (le fichier ASCII
revoke.asc) sur un support sécurisé (deux disquettes ou bien un CD-ROM stockés
dans un endroit sûr). Rappelez-vous bien que ce fichier <path>revoke.asc</path>
peut être utilisé pour annuler votre clé et la rendre inutilisable.
</p>

<note>
Si vous voulez utiliser plusieurs adresses de messagerie avec cette clé, vous
pouvez lancer <c>gpg --edit-key VOTRE_ID</c> et ensuite utiliser la commande
<c>adduid</c>. GnuPG vous demandera alors un nom, une adresse et un commentaire
pour ce deuxième ID.
</note>

</body>
</section>

<section>
<title>Exporter des clés</title>
<body>

<p>
Pour exporter votre clé, tapez <c>gpg --armor --output john.asc --export
john@nowhere.someplace.flick</c>. Vous pouvez pratiquement tout le
temps utiliser l'ID de la clé ou autre chose qui l'identifierait (ici nous
utilisons l'adresse de messagerie). John a maintenant un fichier
<path>john.asc</path> qu'il peut envoyer à ses amis ou publier sur une page web
pour permettre à qui le voudra de communiquer avec lui en toute sécurité.
</p>

</body>
</section>

<section>
<title>Importer des clés</title>
<body>

<p>
Pour ajouter une clé à votre trousseau de clés publiques, vous devez d'abord
l'importer, puis vérifier son empreinte numérique. Après avoir vérifié
l'empreinte, vous pourrez la valider.
</p>

<note>
Faites très attention au moment de vérifier les clés, car c'est un des points
faibles de la cryptographie à clé publique.
</note>

<p>
Nous allons maintenant ajouter la clé publique de Luis Pinto (un ami) à notre
trousseau. Après lui avoir passé un coup de fil pour lui demander l'empreinte
numérique de sa clé, je compare l'empreinte avec la sortie de la commande
<c>fpr</c>. La clé est authentique, je l'ajoute donc à mon trousseau. Dans ce
cas particulier, la clé de Luis ne sera plus valide à partir du 2003-12-01,
il m'est donc demandé si je veux que la signature expire à la même date.
</p>

<pre caption="Importation et signature d'une clé">
$ <i>gpg --import luis.asc</i>
gpg: key 462405BB: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
$ <i>gpg --list-keys</i>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;
sub  2048g/96D6CDAD 2002-12-08

pub  1024D/462405BB 2002-12-01 Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;
uid                            Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
sub  4096g/922175B3 2002-12-01 [expires: 2003-12-01]

$ <i>gpg --edit-key lmpinto@dei.uc.pt</i>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.


gpg: checking the trustdb
gpg: checking at depth 0 signed=0 ot(-/q/n/m/f/u)=0/0/0/0/0/1
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
sub  4096g/922175B3  created: 2002-12-01 expires: 2003-12-01
(1)  Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
(2). Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;

Command&gt; <i>fpr</i>
pub  1024D/462405BB 2002-12-01 Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
    
Command&gt; <i>sign</i>
Really sign all user IDs? <i>y</i>
                          
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB

             Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
             Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;

This key is due to expire on 2003-12-01.
Do you want your signature to expire at the same time? (Y/n) <i>Y</i>
How carefully have you verified the key you are about to sign actually belongs
to the person named above?  If you don't know what to answer, enter "0".

   (0) I will not answer. (default)
   (1) I have not checked at all.
   (2) I have done casual checking.
   (3) I have done very careful checking.

   Your selection? <i>3</i>
Are you really sure that you want to sign this key
with your key: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"

I have checked this key very carefully.

Really sign? <i>y</i>
             
You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"
1024-bit DSA key, ID 75447B14, created 2002-12-08

Command&gt; <i>check</i>
uid  Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhe
uid  Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhe
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Utilisation d'un serveur de clés</title>

<section>
<title>Publier des clés sur un serveur de clés</title>
<body>

<p>
Maintenant que vous avez votre clé, il s'agit de la distribuer à un serveur de
clés qui la rendra publique. Il y a de nombreux serveurs de clés dans le monde
et la plupart d'entre eux s'échangent les clés. Nous allons envoyer la clé de
Luis au serveur subkeys.pgp.net. Le protocole utilisé est HTTP, donc si vous avez
besoin d'un proxy il est temps de le définir (<c>export
http_proxy=http://proxy_host:port/</c>). La commande pour envoyer une clé
est&nbsp;: <c>gpg --keyserver subkeys.pgp.net --keyserver-options honor-http-proxy
--send-key 75447B14</c> où <c>75447B14</c> est l'ID de votre clé. Si vous n'avez
pas besoin du proxy, vous pouvez enlever la partie <e>--keyserver-options
honor-http-proxy</e>.
</p>

<p>
Vous pouvez aussi envoyer au serveur les clés d'autres personnes que
vous avez signées. Nous pourrions envoyer la clé de Luis Pinto. De cette
manière, une personne qui a confiance en vous pourra faire confiance en cette
clé pour Luis car vous l'avez signée.
</p>

</body>
</section>

<section>
<title>Récupérer des clés depuis un serveur de clés</title>
<body>

<p>
Nous allons maintenant chercher la clé de Gustavo Felisberto (votre serviteur)
et l'ajouter au trousseau de John Doe.
</p>

<pre caption="Chercher une clé sur le serveur de clés">
$ <i>gpg --keyserver subkeys.pgp.net --keyserver-options honor-http-proxy --search-keys humpback@felisberto.net</i>
gpg: searching for "humpback@felisberto.net" from HKP server subkeys.pgp.net
Keys 1-5 of 5 for "humpback@felisberto.net"
(1) Gustavo Felisberto (apt-get install anarchy) &lt;humpback@felisberto.net&gt; 1024
    created 2002-12-06, key B9F2D52A
(2) Gustavo Felisberto &lt;humpback@altavista.net&gt; 1024
    created 1999-08-03, key E97E0B46
(3) Gustavo A.S.R. Felisberto &lt;humpback@altavista.net&gt; 1024
    created 1998-12-10, key B59AB043
(4) Gustavo Adolfo Silva Ribeiro Felisberto &lt;humpback@altavista.net&gt; 1024
    created 1998-08-26, key 39EB133D
(5) Gustavo Adolfo Silva Ribeiro Felisberto &lt;humpback@altavista.net&gt; 1024
    created 1998-06-14, key AE02AF87
    Enter number(s), N)ext, or Q)uit &gt;<i>1</i>
gpg: requesting key B9F2D52A from HKP keyserver subkeys.pgp.net
gpg: key B9F2D52A: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>

<p>
Comme vous pouvez le constater, j'ai publié plusieurs clés sur le serveur,
pourtant, je n'utilise que <e>B9F2D52A</e>. John Doe peut maintenant la
récupérer et la signer s'il a confiance en elle.
</p>

</body>
</section>
</chapter>

<chapter id="gpg-agent">
<title>Utiliser un agent GPG</title>
<section>
<title>Qu'est-ce qu'un agent GPG ?</title>
<body>

<p>
Il arrive que vous utilisiez votre clé GPG très fréquemment lorsque vous
travaillez avec certaines applications. Dans ce cas, il vous faudrait taper
votre mot de passe très souvent. Pour résoudre ce problème, de nombreuses
applications utilisaient un mécanisme de mise en mémoire tampon pour faciliter
le travail des utilisateurs, mais cela ne permet pas un partage de cette mémoire
entre les applications (imaginez les problèmes de sécurité que cela
impliquerait) et les applications devaient réinventer la roue, encore et encore.
</p>

<p>
Un agent GPG est une application à part entière utilisée par GPG pour mettre en
cache le mot de passe de manière standard et sécurisée. Cela permet aux
applications d'utiliser GPG de manière concurrente&nbsp;: si vous entrez votre
mot de passe alors que vous utilisez déjà une application, la seconde pourra
travailler avec le GPG sans devoir demander de nouveau le mot de passe pour
libérer la clé, si l'agent GPG est configuré pour permettre cela, bien sûr.
</p>

<p>
Gentoo propose quelques applications d'agent GPG. <c>app-crypt/gpg-agent</c>
peut être considéré comme l'application de référence et est utilisée dans ce
document.
</p>

</body>
</section>
<section>
<title>Installation et configuration de gpg-agent et pinentry</title>
<body>

<p>
Vous devez évidemment installer <c>gpg-agent</c> ainsi que <c>pinentry</c> qui
est l'application d'aide utilisée par gpg-agent pour demander le mot de passe
dans une fenêtre graphique. Elle est proposée avec trois possibilités&nbsp;:
elle peut ouvrir une fenêtre en utilisant gtk+, Qt, ou un bibliothèque curses
(selon le paramètre USE utilisé lors de son installation).
</p>

<pre caption="Installer gpg-agent et pinentry">
# <i>emerge gpg-agent pinentry</i>
</pre>

<p>
Il vous faut maintenant créer un fichier <path>~/.gnupg/gpg-agent.conf</path>
et lui ajouter les lignes suivantes pour définir le temps d'expiration du mot
de passe (par exemple 30 minutes) et l'application à appeler lorsque le mot de
passe doit être tapé la première fois (par exemple, la version qt de pinentry).
</p>

<pre caption="Édition de ~/.gnupg/gpg-agent.conf">
pinentry-program /usr/bin/pinentry-qt
no-grab
default-cache-ttl 1800
</pre>

<p>
Ensuite, configurez GnuPG pour utiliser l'agent à bon escient. Éditez le
fichier <path>~/.gnupg/gpg.conf</path> et ajoutez la ligne suivante&nbsp;:
</p>

<pre caption="Configurer GnuPG pour utiliser un agent GPG">
use-agent
</pre>

<p>
Maintenant, votre système est (presque) prêt à l'utilisation de l'agent GPG.
</p>

</body>
</section>
<section>
<title>Démarrer automatiquement l'agent GPG</title>
<body>

<p>
Si vous utilisez KDE comme environnement graphique, éditez le fichier 
<path>/usr/kde/3.x/env/agent-startup.sh</path> (pour l'ensemble du système ) ou
<path>~/.kde/env/gpgagent.sh</path> (pour un utilisateur local) et ajoutez la
commande suivante pour que KDE démarre automatiquement l'agent GPG&nbsp;:
</p>

<pre caption="KDE démarrera automatiquement l'agent GPG">
eval "$(gpg-agent --daemon)"
</pre>

<p>
Si vous utilisez un environnement graphique différent, ajoutez la ligne citée
précédemment dans votre fichier <path>~/.xinitrc</path> (si vous utilisez
<c>startx</c>) ou <path>~/.xsession</path> (si vous utilisez XDM/GDM/KDM/...)
</p>

</body>
</section>
</chapter>

<chapter>
<title>Travailler avec des documents</title>
<section>
<title>Chiffrer et signer</title>
<body>

<p>
Disons que vous voulez envoyer un fichier à Luis. Vous pouvez le chiffrer, le
signer ou le chiffrer et le signer. Si vous le chiffrez, alors seul Luis pourra
le lire à l'aide de sa clé privée. La signature informera Luis que c'est
vraiment vous qui avez créé le fichier.
</p>

<p>
Voici les trois commandes qui correspondent à ces actions&nbsp;: chiffrer,
signer et chiffrer/signer.
</p>

<pre caption="Signer ou chiffrer un fichier">
$ <i>gpg --output doc.gpg --encrypt --recipient lmpinto@dei.uc.pt doc_à_chiffrer</i>
$ <i>gpg --output doc.gpg --sign --recipient lmpinto@dei.uc.pt doc_à_signer</i>
$ <i>gpg --output doc.gpg --encrypt --sign --recipient lmpinto@dei.uc.pt doc_à_chiffrer_et_signer</i>
</pre>

<p>
Les fichiers générés sont des binaires. Si vous voulez des fichiers ASCII,
ajoutez simplement l'option <c>--clearsign</c> au début de la commande.
</p>

</body>
</section>
<section>
<title>Déchiffrage et vérification des signatures</title>
<body>

<p>
Supposons maintenant que vous avez reçu un fichier chiffré qui vous est destiné.
La commande pour le déchiffrer est <c>gpg --output document --decrypt
encrypted_doc.gpg</c>. Cela déchiffrera le fichier et vérifiera sa signature
(s'il y en a une).
</p>

</body>
</section>

<section>
<title>Utilisation avancée</title>
<body>

<p>
GnuPG possède des fonctions avancées assez sympa. Pour les trouver, ouvrez le
fichier <path>~/.gnupg/gpg.conf</path>.
</p>

<pre caption="~/.gnupg/gpg.conf">
#keyserver x-hkp://subkeys.pgp.net
#keyserver-options auto-key-retrieve include-disabled include-revoked
</pre>

<p>
Cherchez ces deux lignes et décommentez-les. Maintenant, quand GnuPG voudra
vérifier une signature et ne trouvera pas la clé publique sur le trousseau
local, il contactera directement le serveur de clés <uri
link="http://subkeys.pgp.net::11371/">subkeys.pgp.net</uri> et essaiera de
récupérer la clé.
</p>

<p>
Une autre commande très utile est <c>gpg --refresh-keys</c>. Elle contacte le
serveur de clés défini dans le fichier d'options et met à jour les clés
publiques de votre trousseau local, cherche les clés révoquées, les nouveaux
identifiants et les nouvelles signatures des clés. Vous devriez lancer cette
commande de temps en temps, une ou deux fois par mois, pour être au courant si
une personne révoque sa clé.
</p>


</body>
</section>
</chapter>

<chapter>
<title>Interfaces avec GnuPG</title>

<section>
<title>Gestion des signatures des messages</title>
<body>

<p>
95% du temps, vous utiliserez GnuPG pour chiffrer ou signer un email et pour
lire des messages chiffrés ou signés. Il est donc normal que j'en parle en
premier.
</p>

<p>
Il y a deux façons de chiffrer/signer un message avec GnuPG, l'ancienne et la
nouvelle méthode :). Avec l'ancienne méthode, les messages apparaissent en texte
brut sans aucune possibilité de formatage ni de fichiers attachés qui seraient
chiffrés/signés. Voici un exemple de message signé avec l'ancienne
méthode&nbsp;:
</p>

<pre caption="Une signature comprise dans le texte">
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Test message

-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 6.5.8 for non-commercial use

iQA/AwUBP8461jMX0745gR7AEQIEOwCg011GbufXO3ED3FkLWXmfzg7xm1cAoJD0
0EU3Kd2EKNCqataEqM5qjpPs
=LchZ
-----END PGP SIGNATURE-----
</pre>

<p>
De tels messages ne sont plus acceptables de nos jours avec nos belles
interfaces graphiques et nos clients de messagerie qui comprennent le HTML.
</p>

<p>
Pour résoudre ce problème, une extension MIME (extensions multi-usages pour la
messagerie Internet) a été créée. Cette extension ajoute un champ au message qui
indique au client de messagerie que le contenu du message entier est
signé/chiffré. Le problème de cette extension est qu'elle n'est pas supportée
par tous les clients de messagerie, certains clients ignorent même le contenu du
message. Microsoft Outlook est bien connu pour ne pas fonctionner avec cette
méthode.
</p>

</body>
</section>
<section>
<title>Kgpg</title>
<body>

<p>
Kgpg est une belle interface vers GnuPG. Dans l'écran principal, vous pouvez
coller du texte à signer ou chiffrer, vous pouvez aussi coller le texte ASCII
blindé (N.D.T.&nbsp;: un texte «&nbsp;blindé&nbsp;», de l'anglais
«&nbsp;armored text&nbsp;», est un texte précédé et suivi de marqueurs PGP
indiquant qu'il est chiffré ou signé) à déchiffrer.
</p>

<figure link="/images/kgpg1.png" short="Fenêtre principale de kgpg"/>

<p>
Sur cette image, vous pouvez voir la fenêtre principale de Kgpg avec un texte
ASCII blindé chiffré à l'intérieur. À partir de là, vous pouvez le déchiffrer
(vous devez donner votre mot de passe), chiffrer d'autres fichiers,
copier/coller un texte à signer...
</p>

<figure link="/images/kgpg2.png" short="Fenêtre de gestion des clés de kgpg"/>

<p>
Vous voyez maintenant la fenêtre de gestion des clés. On peut y voir notre clé
pour John Doe, les deux clés de confiance pour Gustavo et Luis et la clé non
vérifiée de Daniel Robbins -- je ne l'ai toujours pas appelé pour lui
demander son empreinte :).
</p>

</body>
</section>
<section>
<title>Seahorse</title>
<body>

<p>
Seahorse est une interface graphique vers GnuPG pour l'environnement de bureau
GNOME. Ce logiciel a évolué rapidement, mais il lui manque des fonctionnalités
importantes qui se trouvent dans Kgpg ou en ligne de commande.
</p>

</body>
</section>

<section>
<title>Mozilla Enigmail</title>
<body>

<p>
Mozilla contient Enigmail depuis sa version 1.0. C'est une extension du client
de messagerie qui est très simple à configurer. Vous n'avez qu'à faire
Preferences &gt; Privacy &amp; Security -&gt; Enigmail, ensuite vous entrez
l'adresse de messagerie de votre clé et voilà.
</p>

<p>
Les messages qui arriveront avec une signature pgp ou gpg sans confiance seront
marqués avec un stylo cassé. Ceux qui auront une bonne signature auront un
stylo bien droit. Enigmail a même la possibilité de récupérer des clés à partir
d'un serveur de clés, mais, s'il rencontre un problème, il affichera des messages
très bizarres (de toute façon, vous vous rappeler comment utiliser la ligne de
commande, n'est-ce pas&nbsp;?).
</p>

</body>
</section>
<section>
<title>KMail</title>
<body>

<p>
Si vous utilisez le paramètre USE <c>crypt</c>, KMail sera compilé avec le
support gpg et sera capable de chiffrer et déchiffrer les courriers PGP
automatiquement. Il pourra également chiffrer les courriers avec OpenPGP/MIME.
Si vous voulez également pouvoir déchiffrer les courriers OpenPGP/MIME (ce qui
est probablement le cas), vous devrez disposer d'un agent GPG en cours
d'exécution (voir le chapitre <uri link="#gpg-agent">Utiliser un agent
GPG</uri>).
</p>

<p>
Vous pouvez vérifier si KMail est correctement configuré en allant dans
<c>Configurations</c>, <c>Configurer KMail</c>, <c>Sécurité</c>, <c>Crypto
Plugins</c>. Vous devriez voir un élément GpgME-based dans la liste. S'il n'est
pas grisé, cliquez sur <c>Rescan</c>. S'il n'est toujours pas grisé, KMail ne
fonctionne pas correctement.
</p>

</body>
</section>
<section>
<title>Sylpheed-Claws</title>
<body>

<p>
C'est mon client de messagerie préféré. Il est <e>très</e> rapide avec de
grosses boîtes, a toutes les fonctionnalités qu'une personne voudrait dans un
client de messagerie et marche vraiment bien avec gpg. Le seul problème est
qu'il ne marche pas avec les anciennes signatures PGP, donc quand vous recevrez
ce type de messages signés, vous devrez faire la vérification à la main.
</p>

<p>
Pour utiliser votre clé gpg avec Sylpheed-Claws, allez simplement dans la
configuration de votre compte et sélectionnez l'onglet Privacy. Enfin,
choisissez la clé à utiliser. En principe, vous pouvez utiliser la clé par
défaut.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Cryptographie à clé publique</title>
<section>
<title>Cryptographie à clé publique de base</title>
<body>

<p>
Le concept de la cryptographie à clé publique a été introduit par Whitfield
Diffie et Martin Hellman en 1976. Quand j'ai entendu pour la première fois les
mots «&nbsp;clé publique&nbsp;» et «&nbsp;cryptographie&nbsp;» dans la même
phrase en 1993, je me suis dit qu'il était impossible de faire une telle chose.
En ces temps-là, il n'y avait pas encore Internet (enfin si, mais pas pour moi),
je me suis rendu dans une bibliothèque et j'ai demandé des livres sur la
cryptographie. Je devais avoir seize ans à l'époque, alors le documentaliste
m'a regardé avec étonnement et m'a ramené un livre pour enfants sur les codages
à substitution (ceux qui consistent à échanger une lettre par une autre comme le
célèbre codage de César ou ROT-13&nbsp;: Tragbb p'rfg qr yn onyyr, znvf ibhf yr
fnirm qrwn, installez rotix si vous ne pouvez pas lire le texte précédent). Cela
m'a frustré et j'ai commencé à chercher plus d'informations. Ça aide d'avoir des
mathématiciens dans la famille, car dès que j'ai commencé à en parler avec l'un
d'entre eux, il m'a fait découvrir un monde nouveau.
</p>

<p>
Et maintenant un peu de maths&nbsp;:
</p>

<pre caption="Concepts mathématiques">
Définitions :

Un nombre premier est un nombre entier positif qui est divisible par 1 et par
lui-même (le reste de la division est 0).
Les huit premiers nombres premiers sont : 1, 2, 3, 5, 7, 11, 13, 17.

Théorème (pas de démonstration ici)&nbsp;:

Soit un nombre entier positif non-premier, il est possible de le décomposer
en un produit de nombres premiers et ce produit est unique.
4  = 2 x 2
6  = 2 x 3
8  = 2 x 4 = 2 x 2 x 2
10 = 2 x 5
12 = 2 x 6 = 2 x 2 x 3

« Faits » :
* Il est mathématiquement facile de multiplier deux grands nombres entiers.
* Il est difficile de trouver les facteurs premiers d'un entier positif donné.
</pre>

<p>
Si je vous donne le nombre 35 et je vous dis que ce nombre est le produit de
deux nombres premiers, c'est assez facile de voir que c'est 5 et 7. Mais si je
vous demande la même chose pour 1588522601, vous passerez un bon moment (un bon
nombre de cycles CPU) pour trouver que c'était 49811&nbsp;x&nbsp;31891. Et si ce
nombre était vraiment très très grand, cela serait «&nbsp;impossible&nbsp;».
Alors maintenant, si je donne à tout le monde mon grand nombre qui est le produit
de deux nombres premiers, je saurai quelque chose sur ce nombre que personne
d'autre ne connaît.
</p>

<p>
C'est la base des implémentations de cryptographie à clé publique (PKC, public
key cryptography) d'aujourd'hui. Pour illustrer son fonctionnement, je distribue
mon nombre et une personne pourra l'utiliser pour chiffrer un message à mon
intention. Ce n'est pas génant que n'importe qui puisse voir le message chiffré
puisque je suis le seul à connaître un moyen de le lire. Il faudrait que les
éventuels espions arrivent à décomposer ce grand nombre pour pouvoir lire le
message, ce qui a été montré comme impossible à faire dans un temps relativement
court (avec les méthodes et les moyens actuels, cela prendrait des milliers
d'années). Dans cette configuration, les deux grands nombres premiers
s'appellent la CLÉ PRIVÉE et le grand nombre non premier est la CLÉ PUBLIQUE.
</p>

<p>
En pratique, ce n'est pas exactement ça, mais c'est une bonne idée de la
réalité. Pour plus d'informations, consultez le site hack.gr à propos du
protocole <uri
link="http://www.hack.gr/users/dij/crypto/overview/diffie.html">Diffie-Hellman</uri>.
Pour encore plus d'informations, allez dans une bibliothèque et trouvez un
exemplaire du <uri link="http://www.cacr.math.uwaterloo.ca/hac/">manuel de
cryptographie appliquée (Handbook of Applied Cryptography)</uri> par Alfred J.
Menezes, Paul C. van Oorschot et Scott A. Vanstone. Cet ouvrage est disponible
en ligne sur le lien précédent.
</p>

<p>
Une des conséquences de cette technique est que si vous chiffrez un message à
mon intention et que vous perdez l'original, vous ne pourrez plus le récupérer à
partir de la version chiffrée.
</p>

</body>
</section>

<section>
<title>Signatures</title>
<body>

<p>
Nous avons déja vu comment une personne peut nous envoyer un message chiffré si
elle dispose de notre clé publique. Mais comment savoir si l'auteur du message
est vraiment celui qu'il prétend être&nbsp;? En d'autres termes&nbsp;: si je
reçois un message de votre part, comment puis-je savoir s'il vient vraiment de
vous et pas d'une personne qui se fait passer pour vous&nbsp;?
</p>

<p>
Vous vous souvenez que j'ai écrit ci-dessus que la PKC n'était pas aussi simple
que ce que je disais&nbsp;? L'idée est que lorsque vous chiffrez un message
pour moi, vous le signez avec votre clé privée de telle manière que, lorsque je
le reçois, je puisse d'abord utiliser votre clé publique pour vérifier votre
signature et ensuite utiliser ma clé privée pour déchiffrer le message. Comme
vous pouvez le constater, on ne peut pas faire cela avec la méthode que j'ai
décrite tout à l'heure.
</p>

<p>
Une remarque très importante&nbsp;: pour signer un message, vous n'avez pas
nécessairement besoin de le chiffrer avant. Comme cela, vous pouvez créer des
messages qui peuvent être lus par tout le monde et qui portent votre
«&nbsp;marque&nbsp;».
Et enfin, le moindre caractère modifié dans le message pourra (et sera) détecté.
</p>

</body>
</section>

<section>
<title>Serveurs de clés et clés signées</title>
<body>

<p>
Disons que je n'ai jamais eu de contact avec vous avant que vous ne m'ayez envoyé
un message, comment puis-je obtenir votre clé publique et comment m'assurer que
c'est bien la vôtre&nbsp;?
</p>

<p>
Pour résoudre ce problème, les serveurs de clés publiques ont été créés.
Lorsque vous créez votre paire de clés (privée et publique), vous envoyez votre
clé publique au serveur de clés. Ensuite, n'importe qui peut la récupérer.
Cela résoud le problème de comment trouver votre clé. Mais comment peut-on
s'assurer que c'est bien la bonne&nbsp;? Un autre concept a été introduit, la
signature de clé&nbsp;:
</p>

<p>
Si j'ai la clé publique d'une personne et que je sais <e>avec certitude</e> que
c'est vraiment la clé de cette personne (c'est un ami personnel, quelqu'un que
je connais de la vraie vie, etc.), je peux signer cette clé publique et la
renvoyer au serveur de clés, ce qui correspondrait à dire&nbsp;: «&nbsp;cette
clé appartient bien à la personne qui le prétend&nbsp;». De cette manière, les
personnes qui ont ma clé publique et qui me font confiance peuvent utiliser
cette confiance pour faire confiance en d'autres clés.
</p>

<p>
Cela peut encore être confus, alors passons de suite à un exemple.
</p>

<p>
Imaginons une situation avec trois personnes&nbsp;: John, Mary et Lisa. John est
un bon ami de Mary mais ne connaît pas Lisa&nbsp;; Lisa est une bonne amie de
Mary, mais ne connais pas John. Un jour, Lisa envoie un message signé à John. John
va récupérer la clé publique de Lisa sur le serveur de clés et tester le
message. Si tout se passe bien, il verra que la personne qui a écrit le message
a bien utilisé cette clé. Mais comment savoir si elle est vraiment la personne
qu'elle prétend être&nbsp;?
</p>

<p>
John vois ensuite que la clé était signée par Mary, ce qu'il peut vérifier car
il a déjà la clé de Mary et qu'il lui fait confiance. Avec ce cercle de
confiance, il peut conclure que le message qu'il a reçu a vraiment été écrit
par Lisa.
</p>

<p>
Vous êtes maintenant fin prêt à utiliser ce guide. Revenez au chapitre 1 et
apprenez à vous servir de gpg.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Mot de la fin et remerciements</title>
<section>
<title>Quelques problèmes</title>
<body>

<p>
J'ai eu des problèmes avec les photos dans les clés. Vérifiez la version que
vous utilisez, si c'est GnuPG 1.2.1-r1 ou au delà, ça devrait aller. Les
versions plus anciennes peuvent avoir des problèmes. La plupart des serveurs de
clés n'aiment pas les clés contenant des photos, il est donc préférable que
vous ne mettiez pas de photo dans votre clé.
</p>

<p>
Les dernières versions de gnupg semblent ne pas marcher avec la commande <c>gpg
--send-keys</c> qui est utilisée pour envoyer toutes les clés de votre
trousseau au serveur public.
</p>

</body>
</section>
<section>
<title>Non traité</title>
<body>

<p>
<c>gpg</c> est un outil très complexe, il vous permet de faire bien plus de
choses que ce dont j'ai parlé ici. Ce document est destiné à l'utilisateur
débutant avec GnuPG. Pour plus d'informations, veuillez consultez le <uri
link="http://www.gnupg.org">site de GnuPG</uri>.
</p>

<p>
Je n'ai rien écrit à propos d'autres outils tels que <c>pgp4pine</c>,
<c>gpgpine</c>, <c>evolution</c> et des outils Windows, mais il est probable que
je le fasse plus tard.
</p>

</body>
</section>
<section>
<title>Remerciements</title>
<body>

<p>
Le <uri link="http://www.gnupg.org">manuel GnuPG</uri> de John Michael Ashley
est un excellent ouvrage pour les débutants.
</p>

<p>
Merci à Swift (Sven Vermeulen) pour m'avoir poussé à récrire cet article.
</p>

<p>
Merci à tout le monde sur #gentoo-doc, vous êtes super les mecs.
</p>

<p>
Merci à Tiago Serra pour m'avoir ramené sur la piste de la confidentialité.
</p>

</body>
</section>
</chapter>
</guide>
