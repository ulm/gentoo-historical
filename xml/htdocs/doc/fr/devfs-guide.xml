<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide lang="fr" disclaimer="obsolete">
<title>Guide Devfs (Device File System, système de fichiers des périphériques)</title>
<author title="Auteur">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Relecteur">
  <mail link="seemant@gentoo.org">Seemant Kulleen</mail>
</author>
<author title="Traducteur">
  <mail link="djay@djayux.net">Gérald Fenoy</mail>
</author>

<abstract>
Grâce à ce document, vous saurez ce qu'est vraiment devfs et comment il
fonctionne.
</abstract>

<license/>

<version>0.8</version>
<date>2007-11-15</date>

<chapter>
<title>Qu'est-ce que devfs ?</title>
<section>
<title>Le (bon ?) vieux temps</title>
<body>

<warn>
devfs est <e>désuet</e> et a disparu du noyau 2.6 depuis la version 2.6.13. Si
vous utilisez un noyau 2.6, vous devriez passer à udev. Veuillez consulter
notre <uri link="/doc/fr/udev-guide.xml">Guide udev</uri> pour en savoir plus.
</warn>

<p>
Les implémentations traditionnelles de linux fournissent aux utilisateurs un
répertoire abstrait pour les périphériques, nommé <path>/dev</path>.
L'utilisateur y trouvera des <e>périphériques logiques</e> (nous utiliserons le
terme «&nbsp;fichiers de périphériques&nbsp;» dans la suite), des fichiers
spéciaux qui représentent les périphériques au sein du système de fichiers.
Par exemple, <path>/dev/hda</path> représente le premier périphérique IDE du
système. Ces fichiers de périphériques permettent aux utilisateurs d'écrire des
programmes qui interagissent avec le matériel comme si le périphérique était un
fichier comme les autres. Ils n'ont donc pas besoin de faire appel à la moindre
API spécifique.
</p>

<p>
Les fichiers de périphériques sont partagés en deux groupes, dits périphériques
en mode <e>caractère</e> et périphériques en mode <e>bloc</e>.  Le premier
groupe contient le matériel pour lequel les entrées/sorties se font sans
utilisation d'un cache. Dans le cas contraire, on dit que le périphérique a un
mode d'accès de type bloc (donc utilisant un cache).
</p>

<p>
Si vous jetez un coup d'œil à un fichier de périphérique, vous trouverez
quelque chose de ce genre&nbsp;:
</p>

<pre caption = "Obtenir des informations sur un fichier périphérique">
# <i>ls -l /dev/hda</i>
brw-rw----    1 root     disk       3,   0 Jul  5  2000 /dev/hda
</pre>

<p>
Dans cet exemple nous voyons que <path>/dev/hda</path> est un périphérique de
bloc («&nbsp;b&nbsp;»). Cependant, ce qui est encore plus important, c'est
qu'il a deux numéros spéciaux qui lui sont assignés&nbsp;: <b>3, 0</b>. Cette
paire est appelée la paire <e>majeur-mineur</e>. Elle est utilisée par le noyau
pour faire la correspondance entre le fichier périphérique et le matériel
physique. Le majeur correspond à un certain périphérique, le mineur à un
sous-périphérique. Cela semble confus&nbsp;? Ça ne l'est pas si l'on considère
l'exemple qui suit.
</p>

<p>
Prenons le cas de <path>/dev/hda4</path> et <path>/dev/tty5</path>. Le premier
périphérique correspond à la quatrième partition du premier périphérique IDE.
Sa paire majeur-mineur est <b>3, 4</b>. En d'autres termes, le mineur
correspond à la partition et le majeur correspond au disque dur IDE. Le second
exemple a <b>4, 5</b> comme paire majeur-mineur. Cette fois, le majeur
représente le pilote du terminal et le mineur le numéro du terminal (le
cinquième dans notre exemple).
</p>

</body>
</section>
<section>
<title>Les problèmes</title>
<body>

<p>
Si vous faites une analyse rapide du répertoire <path>/dev</path>, vous ne
trouverez pas seulement vos périphériques, mais <e>tous</e> les périphériques
possibles et imaginables. En d'autres termes, vous avez des fichiers
périphériques pour du matériel physique que vous ne possédez pas forcément.
Gérer un tel groupe de périphériques est pour le moins gênant. Imaginez devoir
changer les permissions de tous les fichiers de périphériques qui correspondent
à un périphérique de votre système et laisser le reste des fichiers tels qu'ils
sont.
</p>

<p>
Lorsque vous ajoutez un nouveau périphérique à votre système et que ce
périphérique n'avait pas auparavant de fichier spécial, vous devez le créer.
Les utilisateurs expérimentés savent que cette tâche peut être accomplie avec
la commande <c>./MAKEDEV</c> depuis la racine de l'arborescence
<path>/dev</path>, mais savez-vous facilement quel périphérique vous devez
créer&nbsp;?
</p>

<p>
Quand vos programmes interagissent avec un périphérique en utilisant un fichier
de périphérique, la partition racine ne peut pas être montée en mode lecture
seule alors qu'il n'est pas nécessaire de la monter en mode lecture/écriture.
Vous ne pouvez pas non plus avoir <path>/dev</path> sur une partition séparée
puisque <c>mount</c> a besoin de <path>/dev</path> pour monter les partitions.
</p>

</body>
</section>
<section>
<title>Les solutions</title>
<body>

<p>
Comme vous pouvez l'imaginer, les développeurs du noyau ont trouvé bon nombre
de solutions pour résoudre les problèmes mentionnés précédemment. Cependant,
certains d'entre eux ont une autre vision de la chose, comme décrit dans
<uri>http://www.atnf.csiro.au/people/rgooch/linux/docs/devfs.html#faq-why</uri>.
Nous ne parlerons pas ici de ces implémentations, mais nous nous concentrerons
sur celle qui est utilisée dans les sources officielles du noyau&nbsp;: devfs.
</p>

</body>
</section>
<section>
<title>devfs, le grand vainqueur&nbsp;?</title>
<body>

<p>
devfs aborde tous les problèmes énoncés. Il fournit simplement à l'utilisateur
les périphériques existants, ajoute les «&nbsp;i-nodes&nbsp;» lorsqu'un nouveau
périphérique est découvert, et rend possible le montage de la partition racine
en mode lecture seulement. Il aborde aussi des problèmes dont nous n'avons pas
discuté précédemment puisqu'ils sont moins intéressants pour l'utilisateur.
</p>

<p>
Par exemple, avec devfs, vous n'avez pas à vous occuper des paires
majeur/mineur. Elles sont aussi supportées (pour des raisons de compatibilité
avec le schéma existant), mais pas nécessaires. Cela donne la possibilité au
noyau linux de supporter plus de périphériques puisqu'il n'y a plus de limite
(les nombres ont toujours une limite :).
</p>

<p>
Pourtant, devfs n'est pas non plus sans problème&nbsp;; pour les utilisateurs,
les difficultés ne sont pas apparentes mais, pour les développeurs du noyau,
ces problèmes étaient si importants que devfs est aujourd'hui considéré
<e>obsolète</e>. Il est désormais remplacé par <uri
link="udev-guide.xml">udev</uri> qui est non seulement supporté par Gentoo,
mais aussi utilisé par défaut sur la plupart des architectures depuis
Gentoo/2005.0.
</p>

<p>
Pour savoir pourquoi devfs a été délaissé au profit de udev, vous pouvez
consulter la <uri
link="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev-FAQ">FAQ
udev</uri> et le document <uri
link="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev_vs_devfs">udev
versus devfs</uri> (tous deux en anglais).
</p>

</body>
</section>
</chapter>

<chapter>
<title>Parcourir l'arborescence dev</title>
<section>
<title>Répertoires</title>
<body>

<p>
Une des premières choses que vous devez savoir est que devfs utilise des
répertoires pour regrouper les périphériques. Cela augmente la lisibilité,
étant donné que maintenant tous les périphériques du même type sont dans un
répertoire commun.
</p>

<p>
Par exemple, tout périphérique IDE est dans le répertoire de périphériques
<path>/dev/ide/</path>, et les périphériques SCSI sont dans
<path>/dev/scsi/</path>. Les disques SCSI et IDE sont vus de la même façon,
c'est-à-dire qu'ils ont tous deux la même structure de sous-répertoires.
</p>

<p>
Les disques SCSI et IDE sont contrôlés par un adaptateur (sur la carte mère ou
sur une carte séparée), appelé l'<e>hôte</e> («&nbsp;host&nbsp;»). Chaque
adaptateur peut avoir différents canaux. Un canal est appelé un <e>bus</e>. Sur
chaque canal, vous pouvez avoir divers ID. De tels ID identifient un disque.
Cet identifiant est appelé la <e>cible</e> («&nbsp;target&nbsp;»). Certains
périphériques SCSI peuvent avoir divers LUN (<e>Numéro d'Unité Logique</e>), par
exemple les périphériques qui manipulent plusieurs médias simultanément (DAT).
Vous aurez généralement un seul lun, <path>lun0/</path>.
</p>

<p>
Donc, en considérant le <path>/dev/hda4</path> utilisé précedemment, nous avons
maintenant <path>/dev/ide/host0/bus0/target0/lun0/part4</path>. C'est bien plus
simple ainsi... non, ne polémiquez pas avec moi... c'<e>est</e> plus facile...
rha, peut importe&nbsp;! :)
</p>

<note>
Vous pouvez aussi utiliser des noms de fichiers de périphériques plus proches
des environnements de type Unix pour les disques durs, comme
<path>c0b0t0u0p2</path>. Ils peuvent se situer dans <path>/dev/ide/hd</path>,
<path>/dev/scsi/hd</path>, etc.
</note>

<p>
Pour vous donner une idée de l'arborescence, voilà une liste des répertoires
que j'ai sur mon ordinateur portable&nbsp;:
</p>

<pre caption="Répertoires dans /dev">
cdroms/     cpu/        discs/          floppy/
ide/        input/      loop/           misc/
netlink/    printers/   pts/            pty/
scsi/       sg/         shm/            sound/
sr/         usb/        vc/             vcc/
</pre>

</body>
</section>
<section>
<title>Compatibilité avec le schéma existant dans devfsd</title>
<body>

<p>
En utilisant ce nouveau schéma qui semble plus sympa, on se heurte aux divers
outils et programmes qui utilisent l'ancien schéma. Pour être sûr qu'aucun
système ne soit pénalisé, <c>devfsd</c> a été créé. Ce démon crée des liens
symboliques qui portent les anciens noms et qui pointent vers les nouveaux
fichiers de périphériques.
</p>

<pre caption="Liens symboliques créés">
$ <i>ls -l /dev/hda4</i>
lr-xr-xr-x    1 root   root      33 Aug 25 12:08 /dev/hda4 -> ide/host0/bus0/target0/lun0/part4
</pre>

<p>
Avec <c>devfsd</c>, vous pouvez aussi attribuer les permissions, créer de
nouveaux périphériques, définir des actions, etc. Tout ceci est décrit dans le
prochain chapitre.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Administrer l'arborescence des périphériques</title>
<section>
<title>Redémarrer devfsd</title>
<body>

<p>
Lorsque vous modifiez le fichier <path>/etc/devfsd.conf</path> et que vous
voulez que les modifications soient prises en compte dans votre système, vous
ne devez pas redémarrer votre machine. Suivant ce que vous voulez, vous pouvez
utiliser l'un des deux signaux suivants&nbsp;:
</p>

<p>
<b>SIGHUP</b> entraîne une relecture du fichier de configuration par
<c>devfsd</c>, un rechargement des objets partagés et la génération des
événements enregistrés pour chacun des «&nbsp;i-nodes&nbsp;» feuilles dans
l'arbre des périphériques.
</p>

<p>
<b>SIGUSR1</b> produira le même résultat, mais ne générera pas le
«&nbsp;REGISTER&nbsp;» d'événements.
</p>

<p>
Pour émettre un signal, utilisez simplement les commandes <c>kill</c> ou
<c>killall</c> de la façon suivante&nbsp;:
</p>

<pre caption="Envoyer le signal SIGHUP à devfsd">
# <i>kill -s SIGHUP `pidof devfsd`</i>
<comment>ou</comment>
# <i>killall -s SIGHUP devfsd</i>
</pre>

</body>
</section>
<section>
<title>Supprimer les liens symboliques de compatibilité</title>
<body>

<warn>
Actuellement, Gentoo ne peut être utilisé sans les liens symboliques de
compatibilité.
</warn>

<p>
Si vous ne voulez plus des liens de compatibilité du répertoire
<path>/dev</path> dans votre système Gentoo (qui sont activés par défaut),
éditez le fichier <path>/etc/devfsd.conf</path> et supprimez les deux lignes
suivantes&nbsp;:
</p>

<pre caption="/etc/devfsd.conf pour la compatibilité avec le schéma existant">
<comment># Commentez les deux lignes suivantes pour ne plus avoir les liens</comment>
<comment># symboliques de compatibilité avec l'ancien mode de fonctionnement.</comment>
REGISTER        .*  MKOLDCOMPAT
UNREGISTER      .*  RMOLDCOMPAT
</pre>

<p>
Vous devez redémarrer votre système pour que les modifications soient prises en
compte.
</p>

</body>
</section>
<section>
<title>Supprimer la fonctionnalité d'autochargement</title>
<body>

<p>
Lorsque que vous charger un module, devfs crée automatiquement les fichiers
périphériques. Si vous ne voulez pas ce type de comportement, supprimez la
ligne suivante de votre fichier <path>/etc/devfsd.conf</path>&nbsp;:
</p>

<pre caption="/etc/devfsd.conf et la fonction d'autochargement">
LOOKUP      .*  MODLOAD
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Entrées relatives aux permissions</title>
<section>
<title>Attribuer/modifier les permissions avec devfsd</title>
<body>

<impo>
Ces instructions sont valides à condition que pam_console soit désactivé dans
<path>/etc/pam.d/system-auth</path>. Si vous activez pam_console, PAM aura
alors le dernier mot concernant la gestion des permissions. Vous ne devriez
de toute façon pas utiliser pam_console, puisqu'il a été <uri
link="http://www.gentoo.org/proj/en/base/pam/upgrade-0.99.xml">retiré de l'arbre
Portage</uri>.
</impo>

<p>
Si vous voulez attribuer les permissions en utilisant le fichier 
<path>/etc/devfsd.conf</path>, utilisez la syntaxe présentée dans
l'exemple suivant&nbsp;:
</p>

<pre caption="Gestion des permissions dans /etc/devfsd.conf">
REGISTER    ^cdroms/.*  PERMISSIONS root.cdrom 0660
</pre>

<p>
Le second champ représente le groupe de périphériques, commençant par
<path>/dev</path>. C'est une expression rationnelle qui permet de sélectionner
différents fichiers de périphériques en une seule règle.
</p>

<p>
Le quatrième champ représente le propriétaire du fichier de périphérique et le
cinquième contient les permissions pour le fichier de périphérique.
</p>

</body>
</section>
<section>
<title>Établir les permissions manuellement et faire que devfs les enregistre</title>
<body>

<p>
Voilà le comportement par défaut d'un système Gentoo&nbsp;: si vous utilisez
les commandes <c>chown</c> («&nbsp;CHange OWNer&nbsp;») et <c>chmod</c>
(«&nbsp;CHange MODe&nbsp;») pour modifier les droits de certain fichiers de
périphériques, <c>devfsd</c> enregistrera immédiatement l'information afin 
qu'elle persiste lors des prochains redémarrages. Ceci vient du fait que le 
fichier <path>/etc/devfsd.conf</path> contient les lignes suivantes&nbsp;:
</p>

<pre caption="Permissions dans /etc/devfsd.conf">
REGISTER        ^pt[sy]/.*   IGNORE
CHANGE          ^pt[sy]/.*   IGNORE
CREATE          ^pt[sy]/.*   IGNORE
DELETE          ^pt[sy]      IGNORE
REGISTER        ^log         IGNORE
CHANGE          ^log         IGNORE
CREATE          ^log         IGNORE
DELETE          ^log         IGNORE
REGISTER        .*           COPY    /lib/dev-state/$devname $devpath
CHANGE          .*           COPY    $devpath /lib/dev-state/$devname
CREATE          .*           COPY    $devpath /lib/dev-state/$devname
DELETE          .*           CFUNCTION GLOBAL unlink
/lib/dev-state/$devname
RESTORE         /lib/dev-state
</pre>

<p>
En d'autres termes, les fichiers de périphériques modifiés sont copiés dans
<path>/lib/dev-state</path> dès que les modifications sont réalisées et sont
recopiés dans <path>/dev</path> lors du démarrage du système.
</p>

<p>
Une autre possibilité est de monter <path>/lib/dev-state</path> sur
<path>/dev</path> au démarrage. Pour faire ceci, vous devez être sûr que devfs
n'est pas monté automatiquement (vous devrez peut-être recompiler votre noyau
pour que cela ne soit pas le cas) et que <path>/dev/console</path> existe.
Ensuite, quelque part au début des scripts de démarrage de votre système, vous
placerez&nbsp;:
</p>

<pre caption="Monter /lib/dev-state sur /dev">
mount --bind /dev /lib/dev-state
mount -t devfs none /dev
devfsd /dev
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Sources d'information</title>
<section>
<body>

<p>
Pour plus d'informations sur devfs, voilà quelques liens utiles.
</p>

<p>
La page man de devfs.conf donne la syntaxe du fichier
<path>/etc/devfsd.conf</path>. Pour la voir, tapez <c>man devfsd.conf</c>.
</p>

<p>
La <uri link="http://www.atnf.csiro.au/people/rgooch/linux/docs/devfs.html">FAQ
devfs</uri> contient des informations au sujet du cœur de la structure de devfs
et explique comment les pilotes peuvent supporter devfs.
</p>

<p>
La revue <uri link="http://www.linuxjournal.com">LinuxJournal</uri> a publié un
article intéressant intitulé <uri
link="http://www.linuxjournal.com/article.php?sid=6035">devfs for Management
and Administration</uri>.
</p>

<p>
Daniel Robbins a écrit un ensemble d'articles pour le DeveloperWorks d'IBM à
propos des systèmes de fichiers avancés. Trois d'entre eux parlent de devfs,
voici leur titre&nbsp;:
</p>

<ul>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs4/">
    Introduction to devfs</uri>
  </li>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs5/">
    Setting up devfs</uri>
  </li>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs6/">
    Implementing devfs</uri>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
