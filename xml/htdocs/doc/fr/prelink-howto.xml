<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/prelink-howto.xml,v 1.13 2005/02/05 15:01:38 neysx Exp $ -->

<guide link="/doc/fr/prelink-howto.xml" lang="fr">
<title>Guide pour le Prelink sous Gentoo</title>
<author title="Auteur">
    <mail link="cretin@gentoo.org">Stefan Jones</mail>
</author>
<author title="Correcteur">
    <!-- zhen@gentoo.org -->John P. Davis
</author>
<author title="Correcteur">
    <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Correcteur">
    <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Traducteur">
    <mail link="arachne@frgentoo.net">Guillaume Morin</mail>
</author>
<author title="Traducteur">
    <mail link="cam@cameuh.net">Camille Huot</mail>
</author>

<abstract>
Ce guide explique comment utiliser le support prelink de portage 2.0.46 et
ultérieur.
</abstract>

<license/>

<version>1.9</version>
<date>2005-02-05</date>

<chapter>
<title>Introduction</title>
<section>
<title>Qu'est-ce que le prelink et en quoi peut-il m'être utile&nbsp;?</title>
<body>

<p>
La plupart des applications utilisent des bibliothèques partagées («&nbsp;shared
libraries&nbsp;»). Ces bibliothèques partagées ont besoin d'être chargées en
mémoire lors de l'exécution de l'application et les références aux différents
symboles doivent être résolues. Pour la plupart des petits programmes, cette
liaison dynamique est très rapide. Mais pour les programmes écrits en C++ qui
ont beaucoup de dépendances, la liaison dynamique peut prendre un temps
considérable.
</p>

<p>
Sur la plupart des systèmes, les bibliothèques ne changent pas souvent et
quand un programme est en cours d'exécution l'opération de liaison est
toujours la même. Le prelink utilise ceci à son avantage en évitant la liaison
et en l'enregistrant dans l'exécutable.
Comme pour la liaison, vous avez besoin de ld-linux.so dans la
glibc et, pour pouvoir utiliser le prelink, vous devez avoir une version de la
glibc &gt;=glibc-2.3.1-r2.
</p>

<p>
Le prelink peut raccourcir le temps de démarrage des applications. Par
exemple, le temps de chargement d'un programme KDE normal peut être réduit
de plus de 50%. La seule opération de maintenance nécessaire est de
ré-exécuter prelink chaque fois qu'une bibliothèque est mise à jour pour un
exécutable prelinké.
</p>

</body>
</section>
<section>
<title>Résumé</title>
<body>

<ul>
<li>Le prelink s'effectue via un programme appelé, de manière originale,
<path>prelink</path>. Il modifie le binaire afin de lui permettre de démarrer
plus rapidement.</li>
<li>Si une application prelinkée voit une de ses bibliothèques modifiée (mise à
jour), alors il faut relancer <path>prelink</path> sur l'application, dans le
cas contraire vous n'obtiendrez aucune amélioration de vitesse. En fait, à
chaque fois que vous mettez à jour via Portage un paquet qui met à jour des
bibliothèques, vous devez relancer <path>prelink</path> sur ces
bibliothèques.</li>
<li>Les modifications effectuées sur le binaire sont complètement réversibles.
Prelink a une fonction d'annulation.</li>
<li>Les versions récentes de Portage peuvent gérer, via <path>prelink</path>,
les changements de MD5sum et mtime des binaires.</li>
<li>Vous devez avoir installé glibc-2.3.1-r2 ou ultérieur et compilé vos
binaires avec binutils-2.13.90.0.xx ou ultérieur.</li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Mettre en place prelink</title>
<section>
<title>Installation des programmes</title>
<body>

<note>
Je considère que vous avez un système Gentoo 1.4 et qu'il a été compilé avec
gcc-3.2 ou ultérieur et binutils-2.13.90.0.xx ou ultérieur. Ceci est nécessaire
afin que vos binaires puissent être passés à <path>prelink</path>.
</note>

<p>
Mettez tout d'abord à jour votre arborescence de Portage, car beaucoup
d'applications nécessaires sont nouvelles et des corrections de bogues sont
constamment ajoutées.
</p>

<pre caption="Mise à jour de l'arborescence de Portage">
# <i>emerge --sync</i>
</pre>

<p>
Ensuite, assurez-vous de la présence de portage-2.0.46 ou ultérieur. Elle est
nécessaire afin que portage puisse reconnaître les binaires prelinkés et ainsi
les désinstaller correctement lorsque que c'est requis, car
<path>prelink</path> change le MD5sum des binaires.
</p>

<pre caption="Vérifier la version de Portage">
# <i>emerge ">=portage-2.0.46"</i>
</pre>

<p>
Vous pouvez maintenant installer le programme de prelink. Le processus d'emerge
vérifie automatiquement que votre système peut utiliser <path>prelink</path> en
toute sécurité.
</p>

<pre caption="Installer prelink">
# <i>emerge prelink</i>
</pre>

<p>
Un certain nombre de personnes ont obtenu des erreurs lors de l'installation
parce que des tests ont échoué. Ces tests ont été mis en place pour des raisons
de sécurité&nbsp;; le comportement de prelink est incertain si vous les
désactivez. Les erreurs d'emerge proviennent habituellement des paquets de
base&nbsp;: binutils, gcc et glibc. Essayez de réinstaller ces paquets dans cet
ordre.
</p>

<note>
Astuce&nbsp;: Si vous obtenez une erreur essayez de compiler et de tester
<c>prelink</c> vous-même (<c>./configure</c>&nbsp;; <c>make</c>&nbsp;; <c>make
test</c>).
En cas d'échec, vous pouvez consulter les fichiers *.log dans le répertoire
<path>testsuite</path>. Ils peuvent vous procurer quelques indices utiles.
</note>

<p>
Si vous avez repéré un ensemble d'étapes qui reproduisent une erreur d'emerge
même sur un autre système, envoyez-les s'il vous plaît à <mail
link="cretin@gentoo.org">Stefan Jones</mail>.
</p>

</body>
</section>

<section>
<title>Configuration</title>
<body>

<p>
Portage va générer automatiquement le fichier <path>/etc/prelink.conf</path>
qui indique à <path>prelink</path> quels répertoires doivent être parcourus.
</p>

<p>
Malheureusement vous ne pourrez pas passer à <path>prelink</path> les fichiers
qui ont été compilés par d'anciennes versions de binutils. La plupart de ces
applications proviennent de paquets binaires précompilés qui sont installés
dans <path>/opt</path>. Créer le fichier suivant indiquera à
<path>prelink</path> de ne pas essayer de les traiter.
</p>

<pre caption="/etc/env.d/60prelink">
PRELINK_PATH_MASK="/opt"
</pre>

<note>
Vous pouvez ajouter des répertoires dans la liste&nbsp;; séparez-les par
deux points «&nbsp;:&nbsp;».
</note>

</body>
</section>
</chapter>

<chapter>
<title>Le prelink</title>
<section>
<title>Utilisation de prelink</title>
<body>

<p>
J'utilise la commande suivante pour prelinker tous les binaires dans les
répertoires indiqués dans <path>/etc/prelink.conf</path>.
</p>

<pre caption="Lancement de prelink">
# <i>prelink -amR</i>
</pre>

<warn>
Si l'espace disque disponible est limité <path>prelink</path> risque de tronquer
vos binaires si vous traitez l'intégralité de votre système, ce qui rendra votre
système inutilisable. Utilisez les commandes «&nbsp;file&nbsp;» ou
«&nbsp;readelf&nbsp;» afin de vérifier l'état d'un fichier binaire. Vous pouvez
également vérifier l'espace libre de vos disques avant de lancer
<path>prelink</path> avec <c>df -h</c>.
</warn>

<table>
<tr>
 <th>Options</th>
 <th>Explications</th>
</tr>
<tr>
 <th>-a</th>
 <ti>Tous («&nbsp;<b>a</b>ll&nbsp;») les binaires sont passés à
 <path>prelink</path></ti>
</tr>

<tr>
 <th>-m</th>
 <ti>Conserve l'espace de <b>m</b>émoire virtuelle, nécessaire si vous avez
 beaucoup de bibliothèques qui ont besoin d'être traitées.
 </ti>
</tr>

<tr>
 <th>-R</th>
 <ti>Rend aléatoire («&nbsp;<b>r</b>andom&nbsp;») l'ordre d'adressage, ceci afin
 d'améliorer la sécurité contre les dépassements de capacité («&nbsp;buffer
 overflows&nbsp;»).
 </ti>
</tr>
</table>

<note>
Pour plus d'informations et d'options, consultez <c>man prelink</c>.
</note>

</body>
</section>
<section>
<title>Accélérer le chargement de KDE après le prelink</title>
<body>

<p>
Le temps de chargement de KDE peut être considérablement réduit après le
prelink. Si vous informez KDE qu'il a été prelinké, il désactivera le chargement
de <c>kdeinit</c> (car il n'est plus requis à présent) et cela accélérera KDE
encore plus.
</p>

<p>
Mettez <c>KDE_IS_PRELINKED="true"</c> dans <path>/etc/env.d/99kde-env</path>
pour informer KDE qu'il a été prélinké.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Problèmes connus et leurs corrections</title>
<section>
<title>«&nbsp;Cannot prelink against non-PIC shared library&nbsp;»</title>
<body>

<p>
La cause de ce problème provient de bibliothèques partagées qui ont été mal
compilées, sans l'option -fPIC de gcc pour tous leurs fichiers objets.
</p>

<p>
Voici une liste de bibliothèques à problèmes et les paquets à réinstaller
si vous avez l'erreur ci-dessus.
</p>

<pre caption="Corrections">
<codenote>Pour la bibliothèque ORBit /usr/lib/libIIOP.so.0.5.17</codenote>
# <i>emerge ">=sys-apps/tcp-wrappers-7.6-r4" ORBit</i>

<codenote>Pour la bibliothèque zlib usr/lib/libz.so.1.1.4</codenote>
# <i>emerge ">=sys-libs/zlib-1.1.4"</i>

<codenote>Pour svgalib, /usr/lib/libsvga.so.xx</codenote>
# <i>emerge ">=media-libs/svgalib-1.9.16"</i>

<codenote>Pour libpcap.so.0.6</codenote>
# <i>emerge ">=net-libs/libpcap-0.7.1-r2"</i>

<codenote>Pour la bibliothèque lcms, /usr/lib/liblcms.so.1</codenote>
# <i>emerge ">=media-libs/lcms-1.09"</i>
</pre>

<note>
Beaucoup de bibliothèques sont liées statiquement à zlib et/ou à tcp-wrappers.
Donc, essayez d'abord d'installer ces paquets puis de réinstaller les
bibliothèques à problèmes.
</note>

<p>
Voici les bibliothèques qui n'ont pas encore été corrigées ou qui ne peuvent
l'être&nbsp;:
</p>

<ul>
<li>Les bibliothèques du paquet wine, ainsi que winex. Le prelink
n'accélèrerait pas les exécutables MS Windows de toute manière.</li>
<li>La bibliothèque dans media-video/mjpegtools,
<path>/usr/lib/liblavfile-1.6.so.0</path>.</li>
</ul>

<p>
Si votre bibliothèque problématique n'est pas présente dans la liste, nous
vous prions de nous le rapporter avec, de préférence, un correctif pour ajouter
<b>-fPIC</b> au CFLAGS approprié.
</p>

</body>
</section>
<section>
<title>«&nbsp;&lt;file&gt;: error while loading shared libraries:
unexpected reloc type...&nbsp;»</title>
<body>

<p>
Ce bug a été corrigé dans sys-libs/glibc-2.3.1-r2 le 18/11/2002&nbsp;;
réinstallez glibc s'il est trop ancien.
</p>

<p>
Normalement, <c>prelink -u -a -m</c>&nbsp;; <c>prelink -a -m</c> est censé
améliorer les choses. Si tout échoue essayez juste <c>prelink -u
&lt;fichier&gt;</c>.
</p>

</body>
</section>

<section>
<title>Quand je traite mon système, quelques binaires statiques ne
fonctionnent plus.</title>
<body>

<p>
Dans le cas de la glibc, il n'y a pas de tels binaires 100% statiques. Si vous
compilez statiquement un binaire avec la glibc, il peut toujours rester
dépendant d'autres fichiers du système. Ci-dessous vous trouverez une
explication de Dick Howell&nbsp;:
</p>

<p>
«&nbsp;Je suppose que tout se trouve dans le fichier téléchargé, et donc que
rien ne dépendra des bibliothèques locales sur le système cible. Malheureusement
avec Linux, et, je pense, avec quoi que ce soit d'autre utilisant la GLIBC, ce
n'est plus tout à fait vrai. Prenons «&nbsp;libnss&nbsp;» («&nbsp;Sélecteur de
Service de Nom&nbsp;», certains semblent appeler ça «&nbsp;Système de Sécurité
Réseau&nbsp;») qui procure des fonctions permettant l'utilisation de diverses
bases de données pour l'authentification, les informations sur le réseau et
autres. C'est supposé rendre les programmes indépendants de l'environnement
réseau actuel de la machine, configuré séparément. Bonne idée, mais les
changements de la GLIBC peuvent entraîner des problèmes lors de son chargement.
Et vous ne pouvez pas lier statiquement «&nbsp;libnss&nbsp;», car elle est
configurée indépendamment pour chaque machine. Le problème provient, je pense,
principalement de la liaison statique des autres bibliothèques de la GLIBC,
notamment «&nbsp;libpthread&nbsp;», «&nbsp;libm&nbsp;» et «&nbsp;libc&nbsp;»
desquelles proviennent des appels aux fonctions de «&nbsp;libnss&nbsp;»
incompatibles.&nbsp;»
</p>

</body>
</section>

<section>
<title>Prelink échoue avec l'erreur «&nbsp;prelink: dso.c:306: fdopen_dso:
Assertion 'j == k' failed.&nbsp;»</title>
<body>

<p>
C'est un problème connu, diagnostiqué <uri
link="http://bugs.gentoo.org/show_bug.cgi?id=13878">ici</uri>. Prelink ne gère
pas les exécutables compressés avec UPX. Jusqu'à prelink-20021213, il n'existe
pas d'autre méthode que de cacher les exécutables concernés au moment
du prelink. Lisez la <uri link="#doc_chap2_sect2">section
Configuration</uri> ci-dessus pour savoir comment faire cela facilement.
</p>

</body>
</section>

<section>
<title>J'utilise grsecurity et il semble que le prelink ne fonctionne
pas</title>
<body>

<p>
Pour faire marcher <path>prelink</path> sur un système sous grsecurity qui
utilise une base mmap() aléatoire, il est nécessaire de désactiver
«&nbsp;randomized mmap() base&nbsp;» pour les fichiers
<path>/lib/ld-2.3.*.so</path>. Pour ce faire, vous devez utiliser l'utilitaire
<c>chpax</c>, mais vous devez le faire sans que le fichier ne soit utilisé (par
exemple démarrez sur un LiveCD).
</p>

</body>
</section>
</chapter>

<chapter>
<title>Conclusion</title>
<section>
<body>

<p>
Le prelink peut considérablement réduire le temps de démarrage d'un bon
nombre de grosses applications. Portage le gère très bien. C'est aussi
sans danger puisque vous pouvez annuler le prelink d'un
quelconque binaire si vous rencontrez un problème. Rappelez-vous juste qu'il
faut relancer <path>prelink</path> à chaque fois que vous mettez à jour la glib
ou une autre bibliothèque prelinkée. Pour faire court&nbsp;: Bonne chance&nbsp;!
</p>

</body>
</section>
</chapter>
</guide>
