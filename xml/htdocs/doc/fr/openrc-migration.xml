<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/openrc-migration.xml,v 1.9 2010/05/04 09:49:10 titefleur Exp $ -->

<guide link="/doc/fr/openrc-migration.xml" lang="fr">
<title>Guide de migration de Baselayout et OpenRC</title>

<author title="Auteur">
  <mail link="cardoe"/>
</author>
<author title="Auteur">
  <mail link="nightmorph"/>
</author>
<author title="Contributeur">
  <mail link="uberlord"/>
</author>
<author title="Traducteur">
  <mail link="titefleur"/>
</author>

<abstract>
Ce guide vous montre comment migrer depuis baselayout-1 vers baselayout-2 et
OpenRC.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.11</version>
<date>2009-11-29</date>

<chapter>
<title>Contexte</title>
<section>
<title>Qu'est-ce que baselayout&nbsp;?</title>
<body>

<p>
Baselayout fournit un ensemble de fichiers de base nécessaires au bon
fonctionnement de tout système, comme le fichier <path>/etc/hosts</path>. Il
fournit également le schéma du système de fichiers de base utilisé par
Gentoo (i.e. les répertoires <path>/etc</path>, <path>/var</path>,
<path>/usr</path> et <path>/home</path>).
</p>

</body>
</section>
<section>
<title>Qu'est-ce que OpenRC&nbsp;?</title>
<body>

<p>
OpenRC est un système rc basé sur les dépendances qui fonctionne quelque soit
l'init fourni par le système, habituellement /sbin/init. Toutefois, il ne
constitue <e>pas</e> un remplaçant de <path>/sbin/init</path>. L'init par défaut
utilisé par Gentoo Linux est <c>sys-apps/sysvinit</c>, tandis que Gentoo/FreeBSD
utilise l'init FreeBSD fourni par <c>sys-freebsd/freebsd-sbin</c>.
</p>

</body>
</section>
<section>
<title>Pourquoi migrer&nbsp;?</title>
<body>

<p>
À l'origine, le système rc de Gentoo était fait avec baselayout-1 et écrit
entièrement en bash. Cela a conduit à plusieurs limitations. Par exemple,
certains appels système ont besoin d'être accessibles durant le démarrage, ce
qui nécessite l'ajout de déclarations en C. Ces fonctions étaient donc liées
statiquement, rendant rc de plus en plus lourd.
</p>

<p>
De plus, avec le portage de Gentoo à d'autres plateformes telles que
Gentoo/FreeBSD et Gentoo Embedded, il devenait impossible de garder un système
rc basé sur bash. Cela a conduit au développement de baselayout-2, écrit en C et
ne nécessitant qu'un shell aux standards POSIX. Pendant le développement de
baselayout-2, il s'est révélé que le meilleur choix serait que baselayout ne
fournisse que les fichiers de base et le schéma de système de fichiers pour
Gentoo, et que le système rc soit séparé dans son propre paquet. Ce qui a
conduit à OpenRC.
</p>

<p>
OpenRC est développé principalement par <uri
link="http://roy.marples.name/openrc">Roy Marples</uri> et supporte toutes
les variations actuelles de Gentoo (i.e. Gentoo Linux, Gentoo/FreeBSD, Gentoo
Embedded, et Gentoo Vserver) et d'autres plateformes comme FreeBSD et NetBSD.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Migration vers OpenRC</title>
<section>
<body>

<p>
La migration vers OpenRC est assez simple&nbsp;; elle se fera dans le cadre de
vos mises à jour régulières par votre gestionnaire de paquets.  L'étape la plus
importante vient en réalité après l'installation des paquets du nouveau
<c>=sys-apps/baselayout-2</c> et de <c>sys-apps/openrc</c>. Il est
<e>indispensable</e> que vous exécutiez <c>dispatch-conf</c> et que vous vous
assuriez que le contenu de votre <path>/etc</path> est à jour avant de
redémarrer la machine. <brite>Si vous ne le faites pas, vous ne pourrez plus
démarrer votre ordinateur</brite>, ce qui vous obligera à utiliser un LiveCD
Gentoo pour effectuer les étapes ci-dessous afin de réparer votre système.
</p>

<p>
Une fois que vous avez fini de mettre à jour vos fichiers de configuration, il y
a quelques petites choses à vérifier avant de redémarrer.
</p>
	
</body>
</section>

<section id="rc_conf">
<title>/etc/conf.d/rc</title>
<body>

<p>
<path>/etc/conf.d/rc</path> est devenu obsolète et les paramètres que vous y
avez placés devront être migrés à l'endroit approprié dans le fichier
<path>/etc/rc.conf</path>. Veuillez donc examiner <path>/etc/rc.conf</path> et
<path>/etc/conf.d/rc</path> pour y placer correctement ces paramètres. Une fois
que cela est fait, supprimez <path>/etc/conf.d/rc</path>.
</p>

</body>
</section>
<section id="modules">
<title>Modules du noyau</title>
<body>

<p>
Habituellement, quand vous voulez que certains modules du noyau soient chargés
automatiquement au démarrage, vous les placez dans
<path>/etc/modules.autoload.d/kernel-2.6</path> avec les paramètres que vous
désirez leur passer. Avec baselayout-2, ce fichier n'est plus utilsé. À la place
de cela, les modules chargés automatiquement et leurs paramètres sont placés
dans un nouveau fichier, <path>/etc/conf.d/modules</path>, qu'importe la version
du noyau.
</p>

<p>
Voilà un exemple de l'ancien mode de configuration&nbsp;:
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
ivtv
cx88_dvb video_br=2
</pre>

<p>
Et voici sa conversion dans le nouveau mode&nbsp;:
</p>

<pre caption="/etc/conf.d/modules">
<comment># Modules chargés automatiquement au démarrage</comment>
modules_2_6="ivtv cx88_dvb"
<comment># Paramètres des modules</comment>
module_cx88_dvb_args_2_6="video_br=2"
</pre>

<p>
Dans les exemples ci-dessus, les modules et leurs paramètres seront seulement
utilisés avec les noyaux 2.6.x. La nouvelle configuration permet de contrôler
finement les modules et les paramètres selon la version du noyau.
</p>

<p>
Voici un exemple plus détaillé&nbsp;:
</p>

<pre caption="Exemple détaillé de /etc/conf.d/modules">
<comment># Toujours charger ochi1394 et ieee1394, qu'importe la version du noyau</comment>
modules="ohci1394 ieee1394"
<comment># Ne charger tun et usbserial que pour les noyaux 2.6.x</comment>
modules_2_6="tun usbserial"
<comment># Ne charger cx88_dvb que pour les noyaux 2.6.23</comment>
modules_2_6_23="cx88_dvb"
<comment># Ne charger ivtv que pour le noyau 2.6.23-gentoo-r5</comment>
modules_2_6_23_gentoo_r5="ivtv"

<comment># Pour le noyau 2.6.23-gentoo-r5, passer le paramètre video_br=2 à cx88_dvb</comment>
module_cx88_dvb_args_2_6_23_gentoo_r5="video_br=2"
<comment># Pour les noyaux 2.6.x, toujours passer les paramètres vendor et product</comment>
module_usbserial_args_2_6="vendor=0x1410 product=0x2110"
<comment># Toujours passer le paramètre debug à ieee1394</comment>
module_ieee1394_args="debug" 
</pre>

<note>
Notez la différence entre <b>module_</b> et <b>modules_</b>.
</note>

</body>
</section>
<section id="boot">
<title>Niveau de démarrage «&nbsp;boot&nbsp;»</title>
<body>

<p>
Le niveau de démarrage <c>boot</c> réalise quelques étapes importantes sur
chaque machine. Par exemple, il s'assure que votre système de fichiers racine
est monté en lecture/écriture, que votre système de fichiers est vérifié, que
vos points de montage sont disponibles et que votre pseudo-système de fichiers
<path>/proc</path> est lancé au démarrage.
</p>

<p>
Avec OpenRC, les services de gestion de disques pour vos périphériques de
stockage ne sont plus lancés automatiquement au démarrage. Cela inclut lvm,
raid, swap, device-mapper (dm), dm-crypt, evms, et similaires. Vous devez vous
assurer que les scripts d'initialisation appropriés pour ces services sont dans
le niveau de démarrage <c>boot</c>, sinon il est possible que votre système ne
démarre pas&nbsp;!
</p>

<p>
Même si l'ebuild d'OpenRC s'occupera de cette migration pour vous, vous devriez
vérifier qu'il migre tous les services de gestion de volumes correctement&nbsp;:
</p>

<pre caption="Affichage de tous les services du niveau de démarrage boot">
# <i>ls -l /etc/runlevels/boot/</i>
</pre>

<p>
Si vous ne voyez pas root, procfs, mtab, swap, et fsck dans cette liste, suivez
les étapes suivantes pour les ajouter au niveau de démarrage <c>boot</c>&nbsp;:
</p>

<pre caption="Ajout des services critiques au niveau de démarrage boot">
# <i>rc-update add root boot</i>
# <i>rc-update add procfs boot</i>
# <i>rc-update add mtab boot</i>
# <i>rc-update add fsck boot</i>
# <i>rc-update add swap boot</i>
</pre>

<p>
Si vous utilisez mdraid et lvm mais que vous ne les voyez pas dans la liste,
vous devez les ajouter de la même manière&nbsp;:
</p>

<pre caption="Ajout de mraid et lvm au niveau de démarrage boot">
# <i>rc-update add mraid boot</i>
# <i>rc-update add lvm boot</i>
</pre>

</body>
</section>
<section>
<title>Udev</title>
<body>

<p>
OpenRC ne démarre plus <c>udev</c> par défaut, mais celui-ci doit être présent
dans le niveau d'exécution <c>sysinit</c> pour être démarré. L'ebuild d'OpenRC
devrait normalement détecter si <c>udev</c> était auparavant activé et
l'ajouter au niveau d'exécution <c>sysinit</c>. Toutefois, pour plus de
précaution, vérifiez que c'est bien le cas&nbsp;:
</p>

<pre caption="Vérification d'udev">
# <i>ls -l /etc/runlevels/sysinit</i>
lrwxrwxrwx 1 root root 14 2009-01-29 08:00 /etc/runlevels/sysinit/udev -> \
/etc/init.d/udev
</pre>

<p>
Si <c>udev</c> n'est pas listé, alors ajoutez-le manuellement au bon niveau
d'exécution&nbsp;:
</p>

<pre caption="Ajout d'udev au niveau d'exécution sysinit">
# <i>rc-update add udev sysinit</i>
</pre>

</body>
</section>
<section>
<title>Réseau</title>
<body>

<p>
Avec la séparation de baselayout et de OpenRC en deux paquets différents, votre
script d'initialisation net.eth0 peut disparaître durant le processus de mise à
jour. Pour remplacer ce script, faites ceci&nbsp;:
</p>

<pre caption="Remettre le script manquant net.eth0">
# <i>cd /etc/init.d</i>
# <i>ln -s net.lo net.eth0</i>
</pre>

<p>
S'il vous manque d'autres scripts d'initialisation du réseau, suivez les mêmes
instructions pour les ajouter de nouveau. Remplacez simplement <c>eth0</c> par
le nom du périphérique de votre choix.
</p>

<p>
Le fichier <path>/etc/conf.d/net</path> n'utilise plus les tableaux de style
bash pour la configuration. Merci de consulter le fichier
<path>/usr/share/doc/openrc-&lt;version&gt;/net.example</path> pour les
instructions de configuration. La conversion devrait être assez simple, par
exemple l'affectation d'une adresse IP statique devra se faire ainsi&nbsp;:
</p>

<pre caption="Ancienne configuration de /etc/conf.d/net">
config_eth0=( "192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255" )
routes_eth0=( "default via 192.168.1.100" )
</pre> 

<pre caption="Nouvelle configuration de /etc/conf.d/net">
config_eth0="192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255"
routes_eth0="default via 192.168.1.100"
</pre>

</body>
</section>
<section>
<title>Horloge</title>
<body>

<p>
Les paramètres de l'horloge situés auparavant dans
<path>/etc/conf.d/clock</path> ont été placés dans l'outil natif de
configuration de l'horloge pour votre système. Cela signifie que pour Linux ce
sera dans le fichier <path>/etc/conf.d/hwclock</path> et pour FreeBSD ce sera
dans <path>/etc/conf.d/adjkerntz</path>. Les systèmes qui n'ont pas de puce
d'horloge temps réel (N.d.T&nbsp;: «&nbsp;Real time clock&nbsp;», RTC) doivent
utiliser <path>/etc/init.d/swclock</path> qui permet de paramétrer l'horloge
système grâce au mtime d'un fichier qui est créé lorsque le système s'éteint.
Les scripts d'initialisation dans <path>/etc/init.d/</path> ont également été
renommés selon ce schéma, donc assurez-vous que le script approprié pour votre
système appartient au niveau de démarrage «&nbsp;boot&nbsp;».
</p>

<p>
De plus, la variable <c>TIMEZONE</c> n'est plus utilisé dans ce fichier. Son
contenu est à présent placé dans le fichier <path>/etc/timezone</path>. S'il
n'existe pas, vous devrez bien sûr le créer avec votre fuseau horaire. Merci de
vérifier ces fichiers pour vous assurer de leur exactitude.
</p>

<p>
La valeur à mettre dans ce fichier correspond au chemin relatif de votre fuseau
horaire par rapport à <path>/usr/share/zoneinfo</path>. Par exemple, pour une
personne vivant à Paris en France, voici ce qui devrait être placé&nbsp;:
</p>

<pre caption="/etc/timezone">
Europe/Paris
</pre>

</body>
</section>
<section>
<title>XSESSION</title>
<body>

<p>
La variable XSESSION n'est plus située dans <path>/etc/rc.conf</path>. À la
place de cela, vous pouvez renseigner la variable XSESSION par utilisateur dans
le fichier <path>~/.bashrc</path> (ou équivalent), ou de façon globale dans le
fichier <path>/etc/env.d/</path>.
</p>

<p>
Voici un exemple de la définition de XSESSION de façon globale&nbsp;:
</p>

<pre caption="Définition de XSESSION de façon globale">
# <i>echo 'XSESSION="Xfce4"' > /etc/env.d/90xsession</i>
</pre>

<impo>
Vous devez lancer <c>env-update</c> après avoir créer un fichier dans
<path>/etc/env.d</path>, puis vous identifiez de nouveau pour que cela prenne
effet. Si vous avez renseigné la variable dans le fichier
<path>~/.bashrc</path> (ou équivalent), vous pouvez recharger le fichier avec
<c>source ~/.bashrc</c>.
</impo>

</body>
</section>
<section>
<title>Les variables EDITOR et PAGER</title>
<body>

<p>
La variable EDITOR n'est plus située dans <path>/etc/rc.conf</path>. Par défaut
les variables EDITOR et PAGER sont maintenant situées dans
<path>/etc/profile</path>. Vous pouvez modifier celles-ci selon vos besoins
avec votre fichier <path>~/.bashrc</path> (ou équivalent) ou bien créer le
fichier <path>/etc/env.d/99editor</path> pour placer le paramètre par défaut du
système.
</p>

<impo>
Vous devez lancer <c>env-update</c> après avoir créer un fichier dans
<path>/etc/env.d</path>, puis vous identifiez de nouveau pour que cela prenne
effet. Si vous placez une variable dans votre fichier <path>~/.bashrc</path>,
vous pouvez recharger le fichier avec <c>source ~/.bashrc</c>.
</impo>

</body>
</section>
<section>
<title>Journal de démarrage</title>
<body>

<p>
Auparavant, vous pouviez enregistrer les messages de démarrage en utilisant
<c>app-admin/showconsole</c>. Avec OpenRC, tout est géré en interne, ce n'est
donc pas la peine de bricoler avec <c>showconsole</c>. Vous pouvez sereinement
le désinstaller. Pour enregistrer les messages de démarrage, configurer les
variables appropriées dans <path>/etc/rc.conf</path>. Les messages seront
écrits dans <path>/var/log/rc.log</path>.
</p>

<pre caption="Activer le journal de démarrage dans /etc/rc.conf">
rc_logger="YES"
</pre>

</body>
</section>
<section>
<title>Pour finir</title>
<body>

<p>
Une fois que vous avez terminé la mise à jour de tous vos fichiers de
configuration et de vos scripts d'initialisation, la dernière chose à faire est
un <b>reboot</b>. Cela est nécessaire parce que l'état du système d'informations
n'est pas conservé durant la mise à niveau, donc vous aurez besoin de lui founir
par un nouveau démarrage.
</p>

</body>
</section>
</chapter>
</guide>
