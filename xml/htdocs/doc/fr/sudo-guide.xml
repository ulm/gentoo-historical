<?xml version='1.0' encoding="UTF-8"?>

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/sudo-guide.xml,v 1.4 2011/08/29 11:00:03 cam Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide lang="fr">
<title>Guide Gentoo pour les utilisateurs de sudo</title>

<author title="Auteur">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Traducteur">
   <mail link="nicocornu@netcourrier.com">Nicolas Cornu</mail>
</author>

<abstract>
Si vous voulez donner la possibilité à certaines personnes d'exécuter certaines
tâches administratives sur votre machine sans leur donner un accès root total,
sudo est fait pour vous. Sudo vous permet de contrôler qui peut faire quoi. Ce
guide vous offre une petite introduction à cet outil formidable.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.6</version>
<date>2006-07-14</date>

<chapter>
<title>À propos de sudo sous Gentoo Linux</title>
<section>
<title>Accorder des droits</title>
<body>

<p>
Le paquet <c>app-admin/sudo</c> autorise l'administrateur à accorder aux
utilisateurs le droit d'exécuter une ou plusieurs applications qui leur sont
interdites en temps normal. Sudo est différent de <e>l'uid</e>. Il permet
d'affiner les droits de l'utilisateur en lui autorisant d'exécuter une commande
spécifique au moment où on le désire.
</p>

<p>
Avec <c>sudo</c>, vous pouvez créer une liste claire de <e>qui</e> peut
exécuter quoi. Si vous utilisiez l'uid, n'importe quel utilisateur pourrait
utiliser telle ou telle application (ou tout utilisateur d'un certain groupe,
en fonction des permissions accordées). Vous pouvez (vous devriez même
l'obliger) demander que l'utilisateur utilise un mot de passe pour pouvoir
exécuter l'application pour laquelle vous lui avez accordé les droits. Vous
pouvez même affiner ses droits en fonction de sa localisation&nbsp;: connecté
en local ou via SSH.
</p>

</body>
</section>
<section>
<title>Traçabilité</title>
<body>

<p>
Un autre avantage de <c>sudo</c> est la possibilité d'enregistrer dans un
fichier log toute tentative (réussie ou non) d'utilisation d'une application.
Cela peut être très utile si jamais vous voulez savoir qui a commis une erreur
grave qui vous a pris dix heures de votre temps à résoudre.
</p>

</body>
</section>
<section>
<title>Configurer Sudo</title>
<body>

<p>
La configuration de <c>sudo</c> est gérée par le fichier
<path>/etc/sudoers</path>. Ce fichier ne devrait jamais être édité avec
<c>nano&nbsp;/etc/sudoers</c> ou <c>vim&nbsp;/etc/sudoers</c> ou n'importe quel
autre éditeur. Lorsque vous voulez modifier ce fichier, vous devriez utiliser
<c>visudo</c>.
</p>

<p>
Cet outil assure qu'il n'y a qu'un seul administrateur en train d'éditer ce
fichier. Il préserve les permissions du fichier et vérifie la syntaxe afin de
s'assurer qu'il n'y ait pas d'erreurs graves dans le fichier.
</p>

</body>
</section>
<section>
<title>À propos de ce guide</title>
<body>

<p>
Ce guide n'est qu'une rapide introduction. Le paquet <c>sudo</c> offre des
possibilités bien plus puissantes que ce qui est décrit dans ce guide. Il offre
des outils spéciaux qui permettent d'éditer des fichiers en tant qu'utilisateur
différent (<c>sudoedit</c>), être exécuté à partir d'un script (il peut donc,
en arrière-plan, lire le mot de passe d'une entrée standard au lieu du clavier,
...)
</p>

<p>
Vous pouvez lire le manuel de <c>sudo</c> et <c>sudoers</c> pour plus
d'information.
</p>

</body>
</section>
</chapter>

<chapter>
<title>La syntaxe de sudoers</title>
<section>
<title>Syntaxe de base</title>
<body>

<p>
La partie la plus difficile de <c>sudo</c> est la syntaxe du fichier
<path>/etc/sudoers</path>. La syntaxe de base ressemble à&nbsp;:
</p>

<pre caption="La syntaxe de base de /etc/sudoers">
utilisateur  machine = commandes
</pre>

<p>
Cette syntaxe explique à <c>sudo</c> que <e>l'utilisateur</e> qui est connecté
au travers de la <e>machine</e> peut exécuter n'importe quelle <e>commande</e>
en tant qu'utilisateur root. Prenons un exemple pour que cela soit plus
clair&nbsp;: on peut autoriser l'utilisateur <e>swift</e> à exécuter
<c>emerge</c> s'il est connecté en local (et non au travers d'SSH).
</p>

<pre caption="Exemple concret de /etc/sudoers ">
swift  localhost = /usr/bin/emerge
</pre>

<p>
Un <brite>avertissement très important</brite> s'impose&nbsp;: n'autorisez pas
à un utilisateur lancer une application qui permet d'augmenter ses privilèges.
Par exemple, autoriser les utilisateurs à exécuter <c>emerge</c> en tant que
root peut en fait leur donner l'accès root total de la machine, car
<c>emerge</c> peut être manipulé pour modifier le système de fichiers en cours
d'exécution à l'avantage de l'utilisateur. Si vous ne faites pas confiance à
vos utilisateurs <c>sudo</c>, ne leur accordez aucun droit.
</p>

<p>
Le nom de l'utilisateur peut être remplacé par le nom du groupe. Dans ce cas,
vous devriez ajouter un <c>%</c> devant le nom du groupe. Voici comment
autoriser n'importe quel membre du groupe <c>wheel</c> à exécuter
<c>emerge</c>&nbsp;:
</p>

<pre caption="Autoriser les membres du groupe wheel à exécuter emerge">
%wheel  localhost = /usr/bin/emerge
</pre>

<p>
Vous pouvez ajouter plusieurs commandes sur la même ligne (au lieu de faire une
entrée pour chaque commande). Voici comment autoriser un utilisateur à utiliser
<c>emerge</c>, mais aussi <c>ebuild</c> et <c>emerge-webrsync</c> en tant que
root&nbsp;:
</p>

<pre caption="Plusieurs commandes pour un seul utilisateur">
swift  localhost = /usr/bin/emerge, /usr/bin/ebuild, /usr/sbin/emerge-webrsync
</pre>

<p>
Vous pouvez spécifier une commande au lieu de l'outil lui-même. Cela peut être
assez utile de restreindre l'utilisation d'un outil en n'autorisant que
certaines commandes précises. L'outil <c>sudo</c> autorise aussi l'utilisation
des méta-caractères du shell (c-à-d. pas des expressions régulières) pour les
commandes et leurs paramètres dans le fichier <path>/etc/sudoers</path>.
</p>

<p>
Testons un peu tout cela&nbsp;:
</p>

<pre caption="Tentative de mise à jour du système en utilisant sudo">
$ <i>sudo emerge -uDN world</i>

Considérons que vous avez reçu le message habituel de l'administrateur
système. Il s'arrête généralement sur ces trois points :

    #1) Respecter la vie privée des autres
    #2) Réfléchir aux conséquences avant de taper une commande
    #3) À grand pouvoir, grande responsabilité

Mot de passe : <comment>(Entrer le mot de passe utilisateur, pas le mot de passe root !)</comment>
</pre>

<p>
<c>sudo</c> requiert le mot de passe de l'utilisateur. Ceci assure qu'aucun
terminal laissé ouvert par mégarde ne puisse être utilisé par des personnes
malveillantes.
</p>

<p>
Il est bon de savoir que <c>sudo</c> n'altère pas la variable
<c>${PATH}</c>&nbsp;: Toute commande utilisée après <c>sudo</c> est traitée à
partir de <e>votre</e> environement. Lorsque l'utilisateur utilisera un outil
se situant dans <path>/sbin</path>, il devra utiliser le chemin complet comme
montré ci-dessous&nbsp;:
</p>

<pre caption="Utiliser le chemin complet d'un outil">
$ <i>sudo /usr/sbin/emerge-webrsync</i>
</pre>

</body>
</section>
<section>
<title>Utiliser les alias</title>
<body>

<p>
Dans les environnements plus importants, entrer des utilisateurs encore et
encore (ou des machines, voire des commandes) peut être fastidieux. Pour
faciliter l'administration de <path>/etc/sudoers</path>, vous pouvez définir
des <e>alias</e>. Le format pour déclarer des alias est assez simple&nbsp;:
</p>

<pre caption="Déclarer des alias dans /etc/sudoers">
Host_Alias hostalias = hostname1, hostname2, ...
User_Alias useralias = user1, user2, ...
Cmnd_Alias cmndalias = command1, command2, ...
</pre>

<p>
Un alias qui fonctionne toujours, à n'importe quelle position, est l'alias
<c>ALL</c>. Pour mieux les distinguer, on écrit les alias en majuscule. Comme
vous l'avez sûrement deviné&nbsp;; l'alias <c>ALL</c> est un alias qui englobe
toutes les occurrences d'un paramètre.
</p>

<p>
Un exemple d'utilisation de l'alias <c>ALL</c> est d'autoriser <e>n'importe
quel</e> utilisateur à lancer la commande <c>shutdown</c> s'il est connecté en
local&nbsp;:
</p>

<pre caption="Autoriser n'importe quel utilisateur à exécuter shutdown">
ALL  localhost = /sbin/shutdown
</pre>

<p>
Un autre exemple est d'autoriser l'utilisateur <c>swift</c> à exécuter la
commande <c>emerge</c> en tant que root, sans se soucier de l'endroit où il se
connecte&nbsp;:
</p>

<pre caption="Autoriser un utilisateur à exécuter la commande emerge sans se soucier de son lieu de connexion">
swift   ALL = /usr/bin/emerge
</pre>

<p>
Cela peut être intéressant de définir des utilisateurs qui peuvent lancer des
applications administratives (comme <c>emerge</c> et <c>ebuild</c>) sur une
machine et un groupe d'administrateurs qui peuvent changer le mot de passe de
n'importe quel utilisateur, excepté root&nbsp;!
</p>

<pre caption="Utiliser les alias pour les utilisateurs et les commandes">
User_Alias  <i>SOFTWAREMAINTAINERS</i> = swift, john, danny
User_Alias  <i>PASSWORDMAINTAINERS</i> = swift, sysop
Cmnd_Alias  <i>SOFTWARECOMMANDS</i>    = /usr/bin/emerge, /usr/bin/ebuild
Cmnd_Alias  <i>PASSWORDCOMMANDS</i>    = /usr/bin/passwd [a-zA-Z0-9_-]*, !/usr/bin/passwd root

<i>SOFTWAREMAINTAINERS</i>  localhost = <i>SOFTWARECOMMANDS</i>
<i>PASSWORDMAINTAINERS</i>  localhost = <i>PASSWORDCOMMANDS</i>
</pre>

</body>
</section>
<section>
<title>Utiliser sudo pour un utilisateur autre que root</title>
<body>

<p>
Il est aussi possible qu'un utilisateur puisse lancer une application sous un
autre utilisateur que root. Cela peut être intéressant si vous exécutez des
applications utilisant un nom d'utilisateur spécifique (comme <c>apache</c>
pour le serveur web). Vous pouvez ainsi autoriser certains utilisateurs à
exécuter des tâches administratives en utilisant cet utilisateur spécifique
(comme tuer des processus zombies).
</p>

<p>
Dans <path>/etc/sudoers</path>, vous inscrivez le(s) utilisateur(s) entre
<c>(</c>&nbsp;et&nbsp;<c>)</c> avant d'inscrire la liste des commandes&nbsp;:
</p>

<pre caption="Syntaxe lorsqu'il s'agit d'un utilisateur autre que root">
users  hosts = (run-as) commands
</pre>

<p>
Voici comment autoriser <c>swift</c> à utiliser la commande <c>kill</c> en tant
qu'utilisateur <c>apache</c> ou <c>gorg</c>&nbsp;:
</p>

<pre caption="Exemple d'utilisation lorsque l'utilisateur sudo n'est pas root">
Cmnd_Alias KILL = /bin/kill, /usr/bin/pkill

swift   ALL = (apache, gorg) KILL
</pre>

<p>
Avec ce paramétrage, l'utilisateur peut lancer <c>sudo&nbsp;-u</c> et
sélectionner ensuite l'utilisateur qu'il veut pour lancer l'application&nbsp;:
</p>

<pre caption="Lancer pkill en tant qu'utilisateur apache">
$ <i>sudo -u apache pkill apache</i>
</pre>

<p>
Vous pouvez paramétrer un alias pour lancer une application utilisant la
directive <c>Runas_Alias</c>. Son utilisation est identique aux autres
directives <c>_Alias</c> que nous avons vues ce-dessus.
</p>

</body>
</section>
<section>
<title>Mots de passe et paramètres par défaut</title>
<body>

<p>
Par défaut, <c>sudo</c> demande à l'utilisateur de s'identifier en utilisant
son propre mot de passe. Une fois le mot de passe entré, <c>sudo</c> s'en
rappelle pendant cinq minutes, autorisant l'utilisateur à se concentrer sur ses
tâches et ne pas constamment entrer son mot de passe.
</p>

<p>
Bien sûr, ce temps peut être changé&nbsp;: vous pouvez paramétrer la
directive <c>Defaults:</c> dans <path>/etc/sudoers</path> pour changer
le temps par défaut par utilisateur.
</p>

<p>
On peut par exemple modifier les cinq minutes par défaut à 0 (ne jamais s'en
rappeler).
</p>

<pre caption="Modifier la valeur du timeout">
Defaults:swift  timestamp_timeout=0
</pre>

<p>
La valeur <c>-1</c> permet de rester identifié indéfiniment (jusqu'à ce que le
système redémarre).
</p>

<p>
Un autre paramètre permet de demander que l'utilisateur se connecte avec le mot
de passe root au lieu de son mot de passe personnel. Ceci est possible grâce à
<c>runaspw</c>. Dans cet exemple, nous avons aussi paramétré le nombres
d'essais (combien de fois l'utilisateur peut entrer à nouveau le mot de passe
avant que <c>sudo</c> n'échoue) à <c>2</c> au lieu de 3 qui est la valeur par
défaut&nbsp;:
</p>

<pre caption="Demander le mot de passe root au lieu du mot de passe utilisateur">
Defaults:john   runaspw, passwd_tries=2
</pre>

<p>
Il est aussi possible d'utiliser la variable <c>DISPLAY</c> afin que l'utilisateur
puisse exécuter des applications graphiques&nbsp;:
</p>

<pre caption="Paramétrer la variable DISPLAY">
Defaults:john env_keep=DISPLAY
</pre>

<p>
Vous pouvez changer une douzaine de paramètres par défaut en utilisant la
directive <c>Defaults</c>. Faites un <c>man sudo</c> et lancez une recherche
sur <c>Defaults</c> si cette partie vous intéresse.
</p>

<p>
Vous pouvez aussi autoriser l'accès sans mot de passe d'un utilisateur.
Vous devez pour cela commencer la commande avec <c>NOPASSWD:</c>, comme
montré ci-dessous&nbsp;:
</p>

<pre caption="Autoriser l'exécution d'emerge en root sans fournir de mot de passe">
swift     localhost = NOPASSWD: /usr/bin/emerge
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Utiliser sudo</title>
<section>
<title>S'informer de ses privilèges</title>
<body>

<p>
Pour savoir quels sont vos droits, exécutez <c>sudo&nbsp;-l</c>&nbsp;:
</p>

<pre caption="Les différents privilèges de swift">
$ <i>sudo -l</i>
User swift may run the following commands on this host:
    (root)   /usr/libexec/xfsm-shutdown-helper
    (root)   /usr/bin/emerge
    (root)   /usr/bin/passwd [a-zA-Z0-9_-]*
    (root)   !/usr/bin/passwd root
    (apache) /usr/bin/pkill
    (apache) /bin/kill
</pre>

<p>
Si vous avez des commandes dans <path>/etc/sudoers</path> qui ne requièrent pas
de mot de passe, sudo ne demandera pas de mot de passe non plus.
</p>

</body>
</section>
<section>
<title>Prolonger le timeout du mot de passe</title>
<body>

<p>
Par défaut, si un utilisateur a entré son mot de passe lui-même avec <c>sudo</c>,
il est authentifié pendant cinq minutes. Si l'utilisateur veut prolonger cette periode
d'authentification, il peut exécuter <c>sudo&nbsp;-v</c> pour rester cinq minutes de plus
sans que <c>sudo</c> ne demande de mot de passe une nouvelle fois.
</p>

<pre caption="Augmenter le timeout du mot de passe">
$ <i>sudo -v</i>
</pre>

<p>
On peut aussi supprimer ce temps avec <c>sudo&nbsp;-k</c>.
</p>

</body>
</section>
</chapter>
</guide>
