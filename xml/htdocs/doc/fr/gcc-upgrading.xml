<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/fr/gcc-upgrading.xml,v 1.12 2008/07/30 13:52:53 titefleur Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/fr/gcc-upgrading.xml" lang="fr">
<title>Guide de mise à jour de GCC pour Gentoo</title>

<author title="Auteur">
  <mail link="amne@gentoo.org">Wernfried Haas</mail>
</author>
<author title="Auteur">
  <mail link="jkt@gentoo.org">Jan Kundrát</mail>
</author>
<author title="Correcteur">
  <mail link="halcy0n"/>
</author>
<author title="Correcteur">
  <mail link="nightmorph"/>
</author>
<author title="Traducteur">
  <mail link="nicocornu@netcourrier.com">Nicolas Cornu</mail>
</author>

<abstract>
Ce document guidera les utilisateurs de Gentoo pour mettre GCC à jour.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>23</version>
<date>2008-07-19</date>

<chapter id="intro">
<title>Introduction</title>
<section>
<title>Mettre à jour GCC</title>
<body>

<p>
Pourquoi faudrait-il que vous mettiez GCC à jour&nbsp;? GCC ressemble fort aux
autres paquets de votre système, il est juste plus critique. Vous devriez mettre
GCC à jour au moment où une nouvelle version supprime un bogue qui vous ennuie,
une nouvelle fonctionnalité dont vous avez besoin a été ajoutée ou si vous
voulez simplement garder votre système à jour. Si les cas précédents ne vous
correspondent pas, vous pouvez retarder votre mise à jour sans crainte tant que
votre version de GCC est supportée par les développeurs de Gentoo.
</p>

<p>
Si vous installez une nouvelle version majeure de GCC (par exemple de 3.3.6 à
3.4.5), le système ne basculera pas automatiquement vers la nouvelle version.
Vous devrez exécuter des étapes supplémentaires durant la migration. Si vous
décidez de ne pas exécuter ces étapes, Portage continuera à utiliser la version
antérieure de votre compilateur jusqu'à ce que vous changiez d'avis ou
supprimiez l'ancien compilateur de votre système. Les mises à jour mineures
provoquent le basculement automatique vers la nouvelle version (par exemple de
3.4.5 vers 3.4.6).
</p>

<p>
Ce guide documente les étapes nécessaires pour mettre à jour en douceur le
compilateur utilisé par votre machine Gentoo. Une section spécifique est dédiée
à <uri link="#upgrade-3.3-to-3.4">la mise à jour de GCC depuis la version 3.3 à
la 3.4</uri> et aux problèmes liés à <c>libstdc++</c>. Une autre section
spécifique vise les utilisateurs qui <uri link="#first-install">installent
Gentoo</uri> à partir d'une image du stage3 après qu'une nouvelle version
majeure ou mineure de GCC soit sortie.
</p>

<warn>
Notez bien que la mise à jour de GCC-3.4 (ou 3.3) vers GCC-4.1 (ou plus)
nécessite de suivre les <uri link="#upgrade-general">instructions générales de
mise à jour</uri>, puisque GCC-3.4 et GCC-4.1 n'utilisent que des ABI très
légèrement différentes.
</warn>

</body>
</section>
</chapter>

<chapter id="upgrade-general">
<title>Instructions générales de mise à jour</title>
<section>
<title>Introduction</title>
<body>

<impo>
Si vous cherchez les instructions spécifiques pour la mise à jour de GCC 3.3
vers GCC 3.4, veuillez consulter la <uri link="#upgrade-3.3-to-3.4">section
dédiée</uri>.
</impo>

<impo>
Si vous cherchez les instructions spécifiques pour la mise à jour de GCC lors
d'une nouvelle installation, veuillez consulter la <uri
link="#first-install">section dédiée</uri>.
</impo>

<p>
En général, les mises à jour qui <e>corrigent des bogues</e>, comme de GCC 3.3.5
à 3.3.6, devraient se passer sans risque – il suffit d'installer la nouvelle
version, de modifier votre système afin d'utiliser le nouveau GCC et de
recompiler le seul paquet affecté, <c>libtool</c>. Cependant, quelques mises à
jour de GCC affectent la compatibilité des binaires&nbsp;; dans ces cas, une
recompilation des paquets concernés (ou même de la chaîne de compilation
complète et du système) pourrait être requise.
</p>

<p>
Souvenez-vous, nous avons dit que la mise à jour de GCC ne serait pas
automatique. Il y a tout de même une exception&nbsp;: les mises à jour qui
suppriment des bogues, comme de la version 3.3.5 à la 3.3.6, si vous n'utilisez
pas l'option USE «&nbsp;multislot&nbsp;» qui autorise les deux versions à
coexister sur un seul système. Multislot est désactivé par défaut, car il n'a
pas grand intérêt pour les utilisateurs.
</p>

<pre caption="Mise à jour de GCC">
# <i>emerge -uav gcc</i>

<comment>(Veuillez remplacer « i686-pc-linux-gnu-4.1.1 » par votre paramètre
CHOST et la version de GCC vers laquelle vous venez de mettre à jour.)</comment>
# <i>gcc-config i686-pc-linux-gnu-4.1.1</i>
# <i>env-update &amp;&amp; source /etc/profile</i>

<comment>(Si vous mettez à jour de gcc 3 vers gcc 4 (de 3.4.6 vers 4.1.1 dans
cet exemple), vous devrez lancer fix_libtool_files.sh à la main.)</comment>
<comment>(Remplacez $CHOST par votre véritable CHOST, situé dans le fichier
/etc/make.conf)</comment>
<comment>(Remplacez &lt;gcc-version&gt; par votre nouvelle version de GCC mise à
jour)</comment>
# <i>/usr/share/gcc-data/$CHOST/&lt;gcc-version&gt;/fix_libtool_files.sh 3.4.6</i>

<comment>(Recompilation de libtool.)</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
Pour être complètement sûr que votre système se trouve dans un état sain, vous
<e>devez</e> recompiler la chaîne de compilation, puis world, afin de s'assurer
que tous les paquets seront recompilés par le nouveau GCC.
</p>

<pre caption="Recompilation du système">
# <i>emerge -eav system</i>
# <i>emerge -eav world</i>
</pre>

<p>
Il est maintenant prudent de supprimer l'ancienne version de GCC. Si vous
préférez, vous pouvez spécifier la version à désinstaller (comme d'habitude,
remplacez <c>=sys-devel/gcc-3.4*</c> par la version à retirer)&nbsp;:
</p>

<pre caption="Désinstallation des anciennes versions de GCC">
# <i>emerge -aC =sys-devel/gcc-3.4*</i>
</pre>

<impo>
Notez bien que GCC 4.1 et plus ne peuvent compiler que les noyaux supérieurs à
2.4.34. Ne supprimez pas votre ancienne version de GCC si vous souhaitez
toujours utiliser un noyau inférieur à cette version.
</impo>

<impo>
Dans le cas où vous mettiez GCC à jour à partir de la version 3.3, vous devez
lancer un <c>emerge --oneshot sys-libs/libstdc++-v3</c> pour fournir la
compatibilité avec les anciennes applications binaires C++.
</impo>

</body>
</section>
</chapter>

<chapter id="upgrade-3.3-to-3.4">
<title>Mise à jour de la version 3.3 à la version 3.4</title>
<section>
<title>Introduction</title>
<body>

<p>
La mise à jour de GCC 3.3 à 3.4 n'est pas sans soucis, car l'ABI C++ a changé
entre les deux versions. Il faut également s'occuper d'un problème qui va
survenir avec la bibliothèque <c>libstdc++</c>.
</p>

</body>
</section>
<section id="upgrade-3.3-to-3.4-choices">
<title>Les choix disponibles</title>
<body>

<impo>
Si vous mettez à jour de GCC 3.4 vers GCC 4.1, veuillez utiliser les <uri
link="#upgrade-general">instructions générales de mise à jour</uri>.
</impo>

<impo>
Sur une machine SPARC, il est nécessaire d'effectuer une <uri
link="#upgrade-3.3-to-3.4-emerge-e">mise à jour complète</uri> à cause d'une
<uri link="http://gcc.gnu.org/gcc-3.4/sparc-abi.html">modification de
l'ABI</uri> concernant le passage des paramètres par GCC.
</impo>

<p>
Si vous mettez à jour de GCC 3.3 vers 3.4, vous avez le choix entre deux
possibilités. La <uri link="#upgrade-3.3-to-3.4-revdep-rebuild">première
méthode</uri> est la plus rapide et consiste en l'utilisation de l'outil
<c>revdep-rebuild</c> du paquet <c>gentoolkit</c>, alors que la <uri
link="#upgrade-3.3-to-3.4-emerge-e"> seconde</uri> recompile intégralement le
système. Le système utilisera ainsi les nouvelles fonctionnalités de GCC.  Le
choix entre ces deux possibilités vous appartient. Dans la plupart des cas, la
première méthode est suffisante.
</p>

<p>
Si vous mettez à jour de GCC 3.3 vers 4.1, n'utilisez pas la méthode basée sur
revdep-rebuild, mais faites plutôt une <uri
link="#upgrade-3.3-to-3.4-emerge-e">recompilation totale du système</uri>.
</p>

</body>
</section>
<section id="upgrade-3.3-to-3.4-revdep-rebuild">
<title>Utiliser revdep-rebuild</title>
<body>

<p>
Cette méthode requiert tout d'abord l'installation de <c>gentoolkit</c> si vous
ne l'avez pas déjà. Nous pourrons alors mettre GCC à jour et passer de l'ancien
au nouveau compilateur. Nous allons ensuite recompiler le paquet <c>libtool</c>
afin de s'assurer que la chaîne de compilation est en parfait état.
</p>

<pre caption="Installation de gentoolkit et mise à jour de GCC">
# <i>emerge -an gentoolkit</i>
# <i>emerge -uav gcc</i>

<comment>(Veuillez remplacer « i686-pc-linux-gnu-3.4.5 » par votre paramètre
CHOST et la version de GCC vers laquelle vous venez de mettre à jour.)</comment>
# <i>gcc-config i686-pc-linux-gnu-3.4.5</i>
# <i>source /etc/profile</i>

<comment>(Recompilation de libtool.)</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
Nous voulons maintenant voir quels paquets revdep-rebuild veut recompiler.
Nous demanderons ensuite à revdep-rebuild de réinstaller ces paquets. Cela peut
prendre du temps, soyez patient.
</p>

<pre caption="Utiliser revdep-rebuild">
# <i>revdep-rebuild --library libstdc++.so.5 -- -p -v</i>
# <i>revdep-rebuild --library libstdc++.so.5</i>
</pre>

<note>
Il est possible que vous rencontriez des problèmes avec des paquets dont la
version n'existe plus car ils sont dépassés ou masqués au moment où vous
mettez à jour. Si c'est le cas, vous pouvez utiliser l'option
<c>--package-names</c> de <c>revdep-rebuild</c>. Elle permet de recompiler
les paquets en se basant sur leur nom plutôt que leur désignation complète
composée du nom et de la version exacte.
</note>

<p>
Pour permettre la compatibilité avec les anciennes applications binaires C++,
<c>sys-libs/libstdc++-v3</c> doit être installé sur votre système.
</p>

<pre caption="Installation de libstdc++-v3 et désinstallation de l'ancienne version de GCC">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
# <i>emerge -aC =sys-devel/gcc-3.3*</i>
</pre>

</body>
</section>
<section id="upgrade-3.3-to-3.4-emerge-e">
<title>Utiliser emerge -e</title>
<body>

<p>
Cette méthode, bien que beaucoup plus longue, recompilera votre système
entièrement afin de s'assurer que tout aura été reconstruit avec votre nouveau
compilateur. C'est aussi une méthode moins risquée. En premier lieu, vous devrez
mettre GCC et libtool à jour et ensuite passer de l'ancienne version du
compilateur à la nouvelle.
</p>

<pre caption="Mise à jour de GCC">
# <i>emerge -uav gcc</i>

<comment>(Veuillez remplacer « i686-pc-linux-gnu-3.4.5 » par votre paramètre
CHOST et la version de GCC vers laquelle vous venez de mettre à jour.)</comment>
# <i>gcc-config i686-pc-linux-gnu-3.4.5</i>
# <i>source /etc/profile</i>

<comment>(Si vous mettez à jour de GCC 3 à 4 (de 3.3.6 à 4.1.1 dans notre
exemple), vous devez lancer fix_libtool_files.sh à la main.)</comment>
<comment>(Remplacez $CHOST par votre véritable CHOST, situé dans le fichier
/etc/make.conf)</comment>
<comment>(Remplacez &lt;gcc-version&gt; par votre nouvelle version de GCC mise à
jour)</comment>
# <i>/usr/share/gcc-data/$CHOST/&lt;gcc-version&gt;/fix_libtool_files.sh 3.3.6</i>

<comment>(Recompiler libtool.)</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
Pour permettre la compatibilité avec les anciennes applications binaires C++,
<c>sys-libs/libstdc++-v3</c> doit être installé sur votre système.
</p>

<pre caption="Installation de libstdc++-v3">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
</pre>

<p>
Nous allons d'abord recompiler le système, ensuite le «&nbsp;world&nbsp;».
Cela va prendre du temps en fonction du nombre de paquets que vous avez
installés, car votre chaîne de compilation entière et ses fichiers systèmes
seront recompilés, suivis de chaque paquet de votre système, notamment la chaîne
de compilation. Cela est nécessaire pour s'assurer que chaque paquet, y compris
ceux de la chaîne de compilation elle-même, auront été compilés avec la
nouvelle chaîne de compilation.
</p>

<pre caption="Recompilation de system et de world">
# <i>emerge -e system</i>
# <i>emerge -e world</i>
</pre>

<p>
Supprimez maintenant votre ancienne version de GCC sans crainte&nbsp;:
</p>

<pre caption="Désinstallation «&nbsp;propre&nbsp;» de l'ancien GCC">
# <i>emerge -aC =sys-devel/gcc-3.3*</i>
</pre>

</body>
</section>
</chapter>

<chapter id="first-install">
<title>Mise à jour de GCC à l'installation du système</title>
<section>
<title>Introduction</title>
<body>

<p>
La mise à jour de GCC sur un système après l'installation d'une image de stage3
est assez simple. Un des avantages qu'ont les utilisateurs qui installent un
nouveau système est qu'ils n'ont pas beaucoup de logiciels installés qui ont des
liens avec les anciennes versions de GCC. L'exemple suivant sert pour la mise à
jour de GCC 3.3 à 3.4. Certains passages seront différents si vous mettez à jour
depuis une autre version de GCC. Par exemple, les noms des bibliothèques
utilisées avec <c>revdep-rebuild</c> plus bas sont spécifiques à GCC 3.3, ainsi
que le besoin d'installer <c>libstdc++-v3</c>.
</p>

<p>
Si vous n'avez pas encore apporté de modification à votre système, il suffit de
quelques étapes pour le mettre à jour vers une nouvelle version de GCC. Comme
pour la mise à jour de GCC 3.3 vers 3.4, vous avez deux solutions. Cependant, il
y a peu de différences entre les deux solutions. La <uri
link="#first-install-revdep-rebuild">première méthode</uri> est plus rapide et
utilise l'outil <c>revdep-rebuild</c> du paquet <c>gentoolkit</c>, comme dans la
procédure précédente. L'utilisation de revdep-rebuild n'entraîne la
recompilation que pour les paquets qui ont un lien avec les bibliothèques de
GCC, tandis que <uri link="#first-install-emerge-e">la seconde méthode</uri>
entraîne la recompilation de tout le système et prend donc beaucoup plus de
temps. Cette seconde méthode n'est jamais utile et est seulement documentée à
des fins d'exhaustivité.
</p>

<p>
Les premières étapes sont communes aux deux méthodes et doivent être accomplies
dans tous les cas.
</p>

<pre caption="Mise à jour de GCC">
# <i>emerge -uav gcc</i>
<comment>(Veuillez remplacer « i686-pc-linux-gnu-3.4.5 » par votre paramètre
CHOST et la version de GCC vers laquelle vous venez de mettre à jour.)</comment>
# <i>gcc-config i686-pc-linux-gnu-3.4.5</i>
# <i>source /etc/profile</i>

<comment>(Recompilation de libtool.)</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
Pour permettre la compatibilité avec les anciennes applications binaires C++,
<c>sys-libs/libstdc++-v3</c> doit être installé sur votre système.
</p>

<pre caption="Installation de libstdc++-v3">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
</pre>

</body>
</section>
<section id="first-install-revdep-rebuild">
<title>Utilisation de revdep-rebuild</title>
<body>

<p>
Cette méthode nécessite que vous installiez d'abord <c>gentoolkit</c> si vous ne
l'avez pas déjà fait. Nous utiliserons <c>revdep-rebuild</c> pour rechercher les
paquets installés à recompiler et les réinstaller.
</p>

<pre caption="Installation de gentoolkit et utilisation de revdep-rebuild">
# <i>emerge -an gentoolkit</i>
# <i>revdep-rebuild --library libstdc++.so.5 -- -p -v</i>
# <i>revdep-rebuild --library libstdc++.so.5</i>
</pre>

<note>
Il est possible que vous rencontriez des problèmes avec des paquets dont la
version n'existe plus car ils sont dépassés ou masqués au moment où vous
mettez à jour. Si c'est le cas, vous pouvez utiliser l'option
<c>--package-names</c> de <c>revdep-rebuild</c>. Elle permet de recompiler les
paquets en se basant sur leur nom, plutôt que leur désignation complète
composée du nom et de la version exacte.
</note>

</body>
</section>
<section id="first-install-emerge-e">
<title>Utilisation de emerge -e</title>
<body>

<p>
Cette méthode, bien que plus lente, va recompiler tout le système pour
s'assurer que tout a bien été compilé avec votre nouveau compilateur. Ce n'est
pas nécessaire, mais c'est une solution valide si vous avez modifié les CFLAGS
ou d'autres variables de <path>/etc/make.conf</path> qui ont un effet sur la
compilation.
</p>

<p>
Puisque nous accomplissons la mise à jour après une installation initiale, il
est inutile de recompiler la cible <c>world</c> comme on devrait le faire pour
une mise à jour d'un système déjà installé. Cependant, vous pouvez choisir de
faire une mise à jour de world au lieu de seulement system, pour être certain
que tous les paquets soient mis à jour.
</p>

<pre caption="Recompilation de system">
# <i>emerge -e system</i>
</pre>

</body>
</section>
<section id="first-install-cleaning-up">
<title>Suppression des anciennes versions</title>
<body>

<p>
Désinstallez enfin les anciennes versions de GCC sans risque en remplaçant
<c>VOTRE-NOUVELLE-VERSION-DE-GCC</c> par la version que vous venez
d'installer&nbsp;:
</p>

<pre caption="Désinstallation des anciennes versions de GCC">
# <i>emerge -aC "&lt;sys-devel/gcc-VOTRE-NOUVELLE-VERSION-DE-GCC"</i>
</pre>

</body>
</section>
</chapter>

<chapter id="common-pitfalls">
<title>Pièges connus</title>
<section>
<body>

<p>
Il est important de désactiver <c>distcc</c> durant la mise à jour. Mélanger les
versions de compilateurs sur vos nœuds <e>provoquera</e> des problèmes au niveau
de la compilation. Vous pouvez garder ccache activé étant donné que les objets
en cache seront invalidés automatiquement.
</p>

<p>
Utilisez toujours la même version de GCC pour votre noyau et les modules
additionnels du noyau. Une fois votre «&nbsp;world&nbsp;» recompilé avec votre
nouveau GCC, les modules externes (comme <c>app-emulation/qemu-softmmu</c>)
échoueront lors de leur chargement. Il suffit de recompiler votre noyau pour
résoudre ce problème.
</p>

<p>
Si vous mettez à jour une machine SPARC, n'oubliez pas de relancer <c>silo
-f</c> après avoir recompilé world afin d'éviter d'éventuels problèmes.
</p>

</body>
</section>
<section>
<title>Messages d'erreurs fréquents</title>
<body>

<p>
Si vous recevez un message d'erreur du type <e>libtool: link:
`/usr/lib/gcc-lib/i686-pc-linux-gnu/3.3.6/libstdc++.la' is not a valid
libtool archive</e>, il faut alors exécuter
<c>/usr/share/gcc-data/$CHOST/&lt;gcc-version&gt;/fix_libtool_files.sh 3.3.6</c>
(remplacez «&nbsp;3.3.6&nbsp;» par le numéro de version mentionné dans le
message, $CHOST par votre véritable CHOST et gcc-version par votre version de
GCC).
</p>

<p>
Si vous avez l'erreur <e>error: /usr/bin/gcc-config: line 632:
/etc/env.d/gcc/i686-pc-linux-gnu-3.3.5: No such file or directory</e>, essayez
alors de supprimer <path>/etc/env.d/gcc/config-i686-pc-linux-gnu</path> et
lancez de nouveau <c>gcc-config</c>, suivi de <c>source /etc/profile</c>.  Ne
faites pas cela si vous utilisez la compilation croisée.
</p>

<p>
Si un paquet échoue durant <c>emerge -e system</c> ou <c>emerge -e world</c>,
vous pouvez relancer l'opération avec la commande <c>emerge --resume</c>. Si un
paquet continue d'échouer, passez au paquet suivant avec la commande <c>emerge
--resume --skipfirst</c>. Ne lancez aucun autre emerge entre-temps car cela
effacerait les informations qui permettent la reprise.
</p>

<p>
Si vous obtenez un message d'erreur du type <e>spec failure: unrecognized spec
option</e> alors que vous mettez votre compilateur à jour, tentez de repasser à
la version de GCC que vous utilisiez auparavant. Supprimez la variable
<c>GCC_SPECS</c> et relancez la mise à jour de GCC&nbsp;:
</p>

<pre caption="Restauration de la configuration d'origine">
# <i>gcc-config 1</i>
# <i>source /etc/profile</i>
# <i>unset GCC_SPECS</i>
# <i>emerge -uav gcc</i>
</pre>

</body>
</section>
</chapter>
</guide>
