<?xml version='1.0' encoding="iso-8859-1"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/gentoo-howto-fr.html">
    <title>HOWTO pour les développeurs Gentoo-Linux</title>
    <author title="Auteur"><mail link="woodchip@gentoo.org">Donny Davies</mail></author>
    <author title="Auteur"><mail link="drobbins@gentoo.org">Daniel Robbins</mail></author>
    <author title="Auteur"><mail link="pete@gentoo.org">Peter Gavin</mail></author>
    <author title="Traducteur"><mail link="pierre.habouzit@m4x.org">Pierre Habouzit</mail></author>
    <abstract>
	Ce document décrit le système Portage de Gentoo-Linux, comment créer de nouveaux paquets
	pour gentoo, et est censé définir une sorte de standard pour les développeurs Gentoo.
	C'est un travail en cours, et qui est constamment mis à jour et modifié. Il est donc par nature
	incomplet
    </abstract>
    <version>1.2</version>
    <date>24 Apr 2002</date>

    <!--

    Contents

    I. Introduction
    II. The Portage Tree
      A. What (Not) to Put in the Portage Tree
      B. Categories
      C. The files Directory
    III. .ebuild Files
      A. Naming .ebuild Files
      B. Contents of an .ebuild File
      C. Rules for Writing an .ebuild File
    IV. Filesystem Locations
      A. Introduction to the FHS
      B. How to Fit Your Packages into the Filesystem
    V. The Portage Scripts and Utilities
      A. Public Scripts
      B. Private Scripts
    VI. Package Dependencies
	
    -->

    <chapter>
	<title>L'arbre portage</title>
	<section>
	    <title>Introduction</title>
	    <body>
		<p>
		    L'arbre de Portage est typiquement trouvé à l'emplacement suivant : <path>/usr/portage</path>
		    et est organisé selon une hiérarchie simple : un répertoire par catégorie, puis un sous répertoire
		    pour les applications. Voici un exemple ; vous pouvez trouver l'ebuild <path>util-linux-2.11g.ebuild</path>
		    dans le répertoire <path>/usr/portage/sys-apps/util-linux</path>. Il peut y avoir plusieurs autres versions
		    de l'ebuild <path>util-linux</path> que celle données en exemple. C'est parce que <e>tous les ebuilds pour
			un même paquetage (hors considération de version)</e>, partagent le même répertoire <path>mycat/mypkg</path>
		    dans <path>/usr/portage</path>.
		</p>
	    </body>
	</section>

	<section>
	    <title>Que mettre (et ne pas mettre) dans l'arbre Portage</title>
	    <body>
		<p>
		    En général, l'arbre Portage ne doit être utilisé que pour stocker des fichiers <path>.ebuild</path>,
		    ainsi qu'un minimum de fichiers accompagnateurs, les plus petits possibles comme des rustines ou des
		    exemples de fichiers de configuration. Ces types de fichiers devraient être placés dans le répertoire
		    <path>/usr/portage/mycat/mypkg/files</path> pour garder le répertoire <path>mycat/mypkg</path> le plus
		    propre possible. De plus, en général, ça n'est pas une bonne idée d'ajouter des fichiers binaires (non-ASCII)
		    à la CVS. Tout de même, si cela est nécessaire (par exemple si vous devez ajouter une petite image png pour
		    n'importe quelle raison, soyez sûrs de l'ajouter à la CVS avec l'option <c>-kb</c>, de cette manière :
		</p>
<pre>
# <i>cvs add -kb myphoto.png</i>
</pre>
		<p>
		    L'option <c>-kb</c> signale à CVS que <path>myphoto.png</path> est un fichier binaire, et doit être traité différemment.
		    Par exemple, vous ne devriez pas avoir à fusionner les différences entre deux versions différentes de ce fichier,
		    pour des raisons assez évidentes. De plus, en parlant de fusionner des modifications, toute rustine que vous ajoutez
		    à l'arbre de Portage ne doit en général <e>pas</e> être compressé. Cela va permettre à CVS de fusionner les modifications
		    et d'informer correctement les développeurs des conflits.
		</p>
	    </body>
	</section>
	<!--
	<section>
	    <title>Catégories</title>
	    <body><p>The categories are defined as follows:</p>
		<table><tr><th>Category</th><th>Description</th></tr>
		    <tr><ti><path>app-admin</path></ti><ti>non-critical system administration utilities</ti></tr>
		    <tr><ti><path>app-arch</path></ti><ti>non-critical archival/compression utilities </ti></tr>
		    <tr><ti><path>app-cdr</path></ti><ti> CD recording utilities </ti></tr>
		    <tr><ti><path>app-crypt</path></ti><ti> Cryptography related apps </ti></tr>
		    <tr><ti><path>app-doc</path></ti><ti>application documentation </ti></tr>
		    <tr><ti><path>app-editors</path></ti><ti>non-critical text editors </ti></tr>
		    <tr><ti><path>app-emulation</path></ti><ti>packages for emulating other systems/OSes </ti></tr>
		    <tr><ti><path>app-games</path></ti><ti>Games!!! 'Nough said </ti></tr>
		    <tr><ti><path>app-misc</path></ti><ti>applications that don't fit anywhere else </ti></tr>
		    <tr><ti><path>app-office</path></ti><ti>office-type (word processing, spreadsheet, etc.) packages </ti></tr>
		    <tr><ti><path>app-shells</path></ti><ti>non-critical shells and command interpreters </ti></tr>
		    <tr><ti><path>app-text</path></ti><ti>text processing, spell checkers, and document formatting packages </ti></tr>
		    <tr><ti><path>dev-db</path></ti><ti>database libraries </ti></tr>
		    <tr><ti><path>dev-java</path></ti><ti>java classes/packages/etc.  </ti></tr>
		    <tr><ti><path>dev-lang</path></ti><ti>compilers and interpreters for different languages </ti></tr>
		    <tr><ti><path>dev-libs</path></ti><ti>miscellaneous developer's libraries </ti></tr>
		    <tr><ti><path>dev-perl</path></ti><ti>perl modules </ti></tr>
		    <tr><ti><path>dev-python</path></ti><ti>python modules </ti></tr>
		    <tr><ti><path>dev-ruby</path></ti><ti>ruby modules </ti></tr>
		    <tr><ti><path>dev-tcltk</path></ti><ti>Tcl-Tk modules </ti></tr>
		    <tr><ti><path>dev-util</path></ti><ti>various developers utilities </ti></tr>
		    <tr><ti><path>gnome-apps</path></ti><ti>applications for GNOME </ti></tr>
		    <tr><ti><path>gnome-base</path></ti><ti>base GNOME packages </ti></tr>
		    <tr><ti><path>gnome-libs</path></ti><ti>non-essential GNOME libraries </ti></tr>
		    <tr><ti><path>gnome-office</path></ti><ti>office packages for gnome </ti></tr>
		    <tr><ti><path>kde-base</path></ti><ti>main KDE distribution </ti></tr>
		    <tr><ti><path>kde-i18n</path></ti><ti>KDE internationalization packages </ti></tr>
		    <tr><ti><path>media-gfx</path></ti><ti>graphics-related programs </ti></tr>
		    <tr><ti><path>media-libs</path></ti><ti>  libraries for manipulating different media, 
			    including accessing multimedia peripherals of your computer (sound card, video card, etc.) </ti></tr>
		    <tr><ti><path>media-sound</path></ti><ti>programs related to sound, including cd-audio and sound encoding </ti></tr>
		    <tr><ti><path>media-video</path></ti><ti>programs related to video, including video codecs and players </ti></tr>
		    <tr><ti><path>net-analyzer</path></ti><ti>network usage statistics monitors/analyzers </ti></tr>
		    <tr><ti><path>net-dialup</path></ti><ti>network dialup clients and servers such as pppd </ti></tr>
		    <tr><ti><path>net-fs</path></ti><ti>network filesystems </ti></tr>
		    <tr><ti><path>net-ftp</path></ti><ti>ftp servers and clients </ti></tr>
		    <tr><ti><path>net-im</path></ti><ti>Instant Messaging servers and clients </ti></tr>
		    <tr><ti><path>net-irc</path></ti><ti>irc servers and clients </ti></tr>
		    <tr><ti><path>net-libs</path></ti><ti>networking-related libraries </ti></tr>
		    <tr><ti><path>net-mail</path></ti><ti>MTAs and MUAs </ti></tr>
		    <tr><ti><path>net-misc</path></ti><ti>miscellaneous servers, clients, firewalls, etc. </ti></tr>
		    <tr><ti><path>net-nds</path></ti><ti>NIS/NIS+ and other network directory services </ti></tr>
		    <tr><ti><path>net-news</path></ti><ti>Usenet servers and clients </ti></tr>
		    <tr><ti><path>net-print</path></ti><ti>print servers and clients </ti></tr>
		    <tr><ti><path>net-www</path></ti><ti>http/www servers and clients </ti></tr>
		    <tr><ti><path>sys-apps</path></ti><ti>system-critical applications and utilities </ti></tr>
		    <tr><ti><path>sys-devel</path></ti><ti>base development packages, such as gcc and make </ti></tr>
		    <tr><ti><path>sys-kernel</path></ti><ti>Linux kernels and kernel source packages </ti></tr>
		    <tr><ti><path>sys-libs</path></ti><ti>system-critical libraries such as glibc </ti></tr>
		    <tr><ti><path>x11-base</path></ti><ti>base X packages, such as XFree86 and drivers for various video cards </ti></tr>
		    <tr><ti><path>x11-libs</path></ti><ti>widget sets and other X-specific libraries</ti></tr>
		    <tr><ti><path>x11-terms</path></ti><ti>X-based terminal emulators </ti></tr>
		    <tr><ti><path>x11-wm</path></ti><ti>X window managers </ti></tr>
		</table>
		<note>If a new category is created (please get permission first!),
		    then the category needs to be added to <path>/usr/lib/python2.0/portage.py</path>.
		</note>
	    </body>
	</section>
	-->
	<section>
	    <title>Le répertoire "files"</title>
	    <body>
		<p>
		    Comme dit un peu plus tôt, dans le sous-répertoire de chaque paquet se trouve un répertoire <path>files</path>.
		    Toute rustine, tout fichier de configuration, ou tout autre fichier auxiliaire utile pour le paquetage doit être
		    ajoutée par vos soins dans ce répertoire. Il est préférable de nommer ces rustines avec un numéro de version
		    spécifique, comme <path>mypkg-1.0-gentoo.diff</path>. Ainsi, notez que l'extension <path>gentoo</path> informe
		    tout le monde que ce paquet a été créé par nous, les développeurs de Gentoo-linux, et non récupéré sur une
		    Mailing-list, ou n'importe où ailleurs. A nouveau, ne compressez jamais ces correctifs, parce que cvs ne gère
		    pas très bien les fichiers compressés.
		</p>
		<p>
		    Ajoutez un suffixe comme <path>mypkg-1.0</path> à la fin de chaque fichier du répertoire <path>files</path>,
		    de sorte que les fichiers utilisés pour des versions uniques de votre script ebuild soient distinguables
		    les uns des autres, et pour que les modifications d'une version à
            l'autre soient visibles. C'est en général plutôt une bonne idée. :)
            Vous pouvez bien sûr utiliser un suffixe différent si une précision plus grande est requise.
		</p>
		<p>
		    Si vous avez plusieurs fichiers qui doivent aller dans le répertoire <path>files</path>, pensez à créer des
		    sous répertoires appelés <path>files/mypkg-1.0</path> et mettez y les fichiers concernés dans le sous répertoire
		    adapté. Si vous utilisez cette méthode, vous n'avez pas besoin d'ajouter de suffixe, ce qui est bien plus pratique.
		</p>
	    </body>
	</section>
    </chapter>

    <chapter>
	<title>Les scripts d'ebuild</title>
	<section>
	    <title>Introduction</title>
	    <body>
		<p>
		    Les scripts d'ebuild sont la base de tout le système Portage. Ils contiennent toute l'information requise pour
		    télécharger, décompresser et installer une ensemble de sources, ainsi que pour réaliser toutes les éventuelles
		    opérations pré/post (dés-)installatoires, ou encore les fonctions de configuration. Comme la plus grande partie de
		    Portage est écrite en Python, les ebuilds eux mêmes sont écrits en bash, puisque utiliser bash nous permet d'appeler
		    des commandes comme nous le ferions depuis la ligne de commande. L'un des principes fondamentaux derrière les scripts
		    ebuild, est que les commandes des ebuilds doivent être analogues à celles utilisées en ligne de commande lors d'une
		    installation manuelle. Dans cette optique, la syntaxe bash est une
            bonne chose.
		</p>
		<p>
		    Les scripts ebuild sont interprétés par les commandes <c>ebuild</c> et <c>emerge</c>. Imaginez la commande <c>ebuild</c>
		    comme un outil de compilation de bas niveau. Il peut construire et installer un ebuild simple, mais rien de plus.
		    Il va vérifier si les dépendances sont satisfaites, mais il ne va pas les résoudre lui même. D'un autre côté, <c>emerge</c>
		    est une interface de haut niveau pour <c>ebuild</c>, et a la capacité d'installer automatiquement les dépendances
		    si c'est nécessaire, de réaliser un "emerge --pretend" pour que l'utilisateur sache quels ebuilds <e>pourraient</e> être
		    exécutés, et bien plus encore.            
		    Avec <c>ebuild</c>, vous pouvez réaliser une installation de paquetage pas à pas (récupération des sources,
		    décompression, compilation, installation, fusion). Pour les développeurs, c'est un outil de débogage inestimable,
		    parce qu'il permet d'isoler les problèmes d'un ebuild dans les portions spécifiques de chaque étape de la procédure
		    d'installation.
		</p>
	    </body>
	</section>

	<section>
	    <title>Noms des fichiers d'ebuild</title>
	    <body>
		<p>Les noms d'ebuilds se décomposent en quatre parties :</p>
		<p>
		    La première est le nom du paquetage, qui ne doit contenir que des minuscules, les chiffres 0-9, et un nombre indéfini
		    de tirets '-'. Quelques exemples : <c>util-linux</c>, <c>sysklogd</c> et <c>glibc</c>.
		</p>
		<p>
		    La deuxième partie est la version du paquetage, qui devrait normalement être la version du tarball de sources.
		    La version est normalement composée de deux ou trois nombres séparés par des points, comme  <c>1.2</c> ou <c>4.5.2</c>
		    (en fait toute séquence de nombre séparée par des points <e>est</e> supportée), et peuvent se terminer par un caractère
		    simple comme <c>1.4b</c> or <c>2.6h</c>. La version du paquet est ajoutée à la fin du nom du paquetage avec un tiret ;
		    par exemple : <c>foo-1.0</c>, <c>bar-2.4.6</c>, etc.
		</p>
		<impo>
		    Si vous voulez utiliser la lettre suivant votre numéro de version, notez bien qu'elle ne doit <e>pas</e> être utilisée
		    pour signifier le statut alpha ou bêta du paquetage, puisque les alpha et les bêtas sont des <e>pré-versions</e>
		    alors que les version avec une lettre sont de <e>nouvelles versions</e>. Ceci peut être vraiment important puisque
		    Portage utilise les numéros de version de l'ebuilds pour déterminer si il est plus récent ou plus ancien que les
		    autres paquets qui ont la même catégorie et le même nom. C'est vraiment important que les numéros de version des paquets
		    représentent exactement la version du paquetage, pour que Portage réalise ses vérifications de dépendances correctement.
		</impo>
		
		<p>
		    La troisième partie (optionnelle) contient un suffixe spécial; soit <c>_alpha</c>, soit  <c>_beta</c>, soit <c>_pre</c> 
		    ou encore <c>_rc</c>. Chacun de ces suffixes doit être immédiatement suivi d'un nombre, par exemple 
		    <c>linux-2.4.0_pre10</c> ; pour deux versions identiques, un paquet en <c>_alpha</c> est plus vieux qu'un autre en
		    <c>_beta</c>, lui même plus vieux qu'un <c>_pre</c>, et lui aussi plus vieux qu'un <c>_rc</c>.
		</p>

		<note>
		    Un paquetage en <c>_rc</c> est plus ancien qu'un autre sans partie avec un underscore (i.e. <c>linux-2.4.0</c>),
		    et <c>linux-2.4.0</c> est plus vieux que qu'un paquet avec une version se terminant par un caractère simple, comme
		    <c>linux-2.4.0b</c>. Et comme vous pouvez vous y attendre, <c>linux-2.4.0b</c> est considéré comme plus vieux que 
		    <c>linux-2.4.0c</c>. Encore une fois, les informations de version sont primordiales, puisque Portage l'utilise en 
		    interne pour déterminer si l'ebuild d'un paquet ou un autre est plus vieux ou plus récent qu'un autre pour la
		    même catégorie et le même nom.
		</note>
		<p>
		    La quatrième partie (elle aussi optionnelle) du nom de paquet, et spécifique à Gentoo-Linux, est le numéro de <e>révision</e>
		    qui est spécifié par le suffixe <c>-r#</c>, où <c>#</c> est un entier, par exemple <c>package-4.5.3-r3</c>. Ce numéro de révision
		    est indépendant de la version du paquet de sources, et est utilisé pour informer les gens qu'une version améliorée des scripts
		    est disponible, pour un paquet donné.
		</p>
		<p>
		    Si vous faites des modifications non triviales à un fichier ebuild existant, il est préférable de copier cet ebuild dans
		    un nouveau fichier, et d'incrémenter le numéro de révision de 1. Les versions originales n'ont habituellement pas de numéro
		    de révision, par exemple <path>package-4.5.3</path> et portage considère que leur numéro de révision est nul. Ce qui signifie
		    que l'ordre de décompte est le suivant : <c>1.0</c> (version initiale), <c>1.0-r1</c>, <c>1.0-r2</c>, etc...
		</p>
		<p>En plus, bien entendu, il reste une <e>cinquième</e> partie au nom de l'ebuild, à savoir l'extension <e>.ebuild</e> elle même.</p>
	    </body>
	</section>

	<section>
	    <title>Contenu d'un ebuild</title>
	    <body>
		<p>1. Initialisation des variables :</p>
		<p>La première partie de chaque ebuild comporte nombre d'initialisations de variables. Celle que vous pouvez initialiser par exemple, sont :</p>
		<table>
		    <tr><ti><c>P</c></ti>
			<ti>Le nom et la version du paquet ; normalement, c'est inutile d'y toucher, puisque c'est déterminé par le nom de l'ebuild</ti>
		    </tr>
		    <tr><ti><c>A</c></ti>
			<ti>Le nom (sans le chemin complet) de l'archive principale du paquetage</ti>
		    </tr>
		    <tr><ti><c>S</c></ti>
			<ti>Le répertoire de sources de votre paquetage ; normalement ${WORKDIR}/${P}</ti>
		    </tr>
		    <tr><ti><c>DESCRIPTION</c></ti>
			<ti>Une courte description d'une ligne du paquet</ti>
		    </tr>
		    <tr><ti><c>SRC_URI</c></ti>
			<ti>Les adresses internet de chaque fichier de source du paquet, séparé par des espaces ; en théorie, la première devrait être
			    &quot;ftp://ftp.company.com/pub/somepackage/${A}&quot;</ti>
		    </tr>
		    <tr><ti><c>HOMEPAGE</c></ti>
			<ti>La page principale du paquet</ti>
		    </tr>
		    <tr><ti><c>DEPEND</c></ti>
			<ti>Dépendances pour la construction ; se référer à la partie <uri link="#dependencies">Dépendance des paquets</uri></ti>
		    </tr>
		    <tr><ti><c>RDEPEND</c></ti>
			<ti>Dépendances à l'exécution ; se référer à la partie <uri link="#dependencies">Dépendance des paquets</uri></ti>
		    </tr>
		</table>
		
		<p>2. Fonctions des ebuild</p>
		<p>
		    Il y a nombre de fonctions différentes que vous pouvez définir dans un ebuild, fonctions qui contrôlent les procédures de construction et 
		    d'installation des paquets.
		</p>
		
		<table>
		    <tr><ti><c>pkg_setup</c></ti>
			<ti>
			    Utilisez cette fonction pour réaliser toutes les taches pré requises. Cela peut inclure la création d'un compte, ou vérifier l'existence
			    d'un fichier de configuration. Cette fonction doit retourner 0
                pour marquer sa réussite.
			</ti>
		    </tr>
		    <tr><ti><c>src_unpack</c></ti>
			<ti>
			    Utilisez cette fonction pour décompresser et patcher les sources, exécuter autoconf/automake/etc (si nécessaire).
			    Cette fonction décompresse les archives dans <c>${A}</c> par défaut, et applique <c>${PF}-gentoo.diff</c>.
			    Le répertoire de départ par défaut, est <c>${WORKDIR}</c>.
			</ti>
		    </tr>
		    <tr><ti><c>src_compile</c></ti>
			<ti>Utiliser cette fonction pour configurer et construire le paquet. Le répertoire de travail par défaut est <c>${S}</c>.</ti>
		    </tr>
		    <tr><ti><c>src_install</c></ti>
			<ti>
			    Utilisez cette fonction pour installer l'image du paquet dans <c>${D}</c>. SI votre paquet utilise automake, vous n'avez qu'à
			    faire <c>make DESTDIR=${D} install</c>. <e>faites bien attention
                que le paquet installe ses fichiers avec <c>${D}</c> comme
                racine!</e>.
			</ti>
		    </tr>
		    <tr><ti><c>pkg_preinst</c></ti>
			<ti>Les commandes de cette fonction sont exécutées juste avant d'avoir fusionné un paquet dans le système de fichier</ti>
		    </tr>
		    <tr><ti><c>pkg_postinst</c></ti>
			<ti>Les commandes de cette fonction sont exécutées juste après avoir fusionné un paquet dans le système de fichier</ti>
		    </tr>
		    <tr><ti><c>pkg_prerm</c></ti>
			<ti>Les commandes de cette fonction sont exécutées juste avant la suppression d'un paquet</ti>
		    </tr>
		    <tr><ti><c>pkg_postrm</c></ti>
			<ti>Les commandes de cette fonction sont exécutées juste après la suppression d'un paquet</ti>
		    </tr>
		    <tr><ti><c>pkg_config</c></ti>
			<ti>Utilisez cette fonction pour préparer la configuration initiale du paquet après son installation. Tous les chemins de cette fonction
			    doivent être préfixés par ${ROOT}. Cette fonction est <e>uniquement</e> exécutée si c'est l'utilisateur qui exécute
			    <c>ebuild /var/db/pkg/${CATEGORY}/${PF}/${PF}.ebuild config</c>.
			</ti>
		    </tr>
		</table>
	    </body>
	</section>

	<section>
	    <title>Règles pour écrire un ebuild</title>
	    <body>
		<p>
		    Pour le moment, les ebuilds ne sont que des scripts shell, le mode scripts shells de votre éditeur habituel vous suffira pour en écrire.
		    Utilisez une indentation propre, uniquement des tabulations, pas d'espaces. Mettez de plus vos arrêts de tabulation à 4 espaces. Faites
		    attention à toujours utiliser des accolades autour de vos variables d'environnement comme par exemple <c>${P}</c> au lieu de simplement <c>$P</c>.
		</p>
		<p>Les lignes trop longues doivent être scindées, en utilisant le caractère '\', de cette manière :</p>
<pre>
./configure \
	--prefix=/usr || die "configure failed"
</pre>
		<p>Pour plus de détails, se référer à <path>skel.ebuild</path> (normalement placé dans /usr/portage).</p>
		<p>
		    Si vous utilisez Vim, vous pouvez mettre les lignes de configurations suivantes à la fin de votre .vimrc pour être sur d'utiliser
		    la bonne présentation en éditant des fichiers Gentoo.
		</p>
<pre>
if (getcwd() =~ 'gentoo-x86\|gentoo-src\|portage')
	set tabstop=4 shiftwidth=4 noexpandtab
endif
</pre>
		<p>TODO: ajouter ce qu'il faut pour Emacs.</p>
	    </body>
	</section>

	<section>
	    <title>Les variables <c>USE</c></title>
	    <body>
		<p>
		    Le but des variables USE est de vous permettre de configurer portage pour activer ou désactiver globalement et automatiquement certaines fonctionnalités
		    par le biais des <e>options de compilation</e>. Un exemple : imaginons que vous êtes un fan de GNOME, et que vous voudriez que toutes les applications
		    soient compilées avec le support GNOME. Dans ce cas, il suffit d'ajouter <c>gnome</c> à votre variable <c>USE</c> dans <path>/etc/make.conf</path>,
		    et Portage va automatiquement ajouter les fonctionnalités GNOME optionnelles aux nouveaux paquets si c'est possible. De même, si la compatibilité
		    GNOME ne vous intéresse pas, et que vous désirez que les ebuilds ne l'utilisent pas, il suffit de simplement éditer <path>/etc/make.conf</path>
		    et de faire attention que <c>gnome</c> ne soit <e>pas</e> activé dans la variable <c>USE</c>. Gentoo-Linux comprend un nombre impressionnant
		    d'options pour <c>USE</c>, qui vous permettent de configurer votre
            machine exactement comme vous l'entendez.
		</p>
		<note>
		    Si vous désactivez une variable "USE" (par exemple, enlever <c>gnome</c> de <c>USE</c>), cela va dire à Portage de désactiver le support
		    GNOME <e>optionnel</e> à la compilation. Mais si vous faites un
            emerge sur une application qui <e>nécessite</e> GNOME, le paquet va
            évidemment
		    avoir le support GNOME, comme on peut s'y attendre. Cela signifie en particulier que GNOME sera installé automatiquement (en tant que dépendance)
		    s'il ne l'était pas déjà. C'est pour ça que c'est une bonne idée de faire un <c>emerge --pretend</c> avant de faire le "vrai" <c>emerge</c> ;
		    de cette manière, vous saurez toujours ce que vous installez.
		</note>
		<p>
		    Dans vos propres ebuilds, vous pouvez vérifier si une variable est incluse ou non en utilisant la commande <c>use &lt;variable&gt;</c>.
		    La commande <c>use</c> affiche le nom de chaque variable présente à la fois dans <c>USE</c> et sa ligne de commande. Vous utilisez en théorie
		    cette commande ainsi :
		</p>
		<p><c>if [ &quot;`use X`&quot; ]; then commands; fi</c></p>
		<p>
		    Les variables USE sont utilisées pour gérer les dépendances. Par exemple, vous pouvez dépendre d'un paquetage si et seulement si une certaine variable
		    du USE est activée. Ce qui se gère avec la commande <c>variable? ( mycat/mypackage-1.0-r1 )</c> dans la variable DEPEND de votre ebuild. Dans cet
		    exemple, <c>mycat/mypackage-1.0-r1</c> ne sera requis, que si
            <c>variable</c> est présent dans <c>USE</c>.
		</p>
		<p>
		    Il y a une astuce importante à connaître sur <c>USE</c>. La plupart du temps, un paquetage utilise un script <c>./configure</c> pour réaliser
		    sa configuration. En général, si votre ebuild utilise <c>./configure</c>, toute fonctionnalité est activée ou désactivée en passant les bonnes
		    arguments appropriés à la commande <c>./configure</c>. Voici le meilleur moyen pour le faire. En premier, regarder les options du <c>./configure</c>
		    que vous voulez supporter via <c>USE</c> sont activées ou non par défaut. Si elles sont <e>activées</e> par défaut, alors procéder ainsi:
		</p>
<pre>
DEPEND="gnome? ( &gt;=gnome-base/gnome-1.4 )
	mysql? ( &gt;=dev-db/mysql-3.23.49 )"

src_compile() {
	local myconf
	use gnome || myconf="--disable-gnome"
	use mysql || myconf="${myconf} --disable-mysql"

	./configure ${myconf} --prefix=/usr --host=${CHOST} || die
	emake || die
}
</pre>
		<p>
		    Ci dessus, nous ne vérifions que si <c>gnome</c> et <c>mysql</c> sont désactivés dans <c>USE</c>. La partie <c>use gnome || </c> teste si
		    <c>gnome</c> est dans la variable <c>USE</c>, et si ça n'est pas le cas, l'autre partie de la commande spécifie <c>myconf="--disable-gnome"</c>.
		    Il n'y a pas besoin de spécifier explicitement d'activer GNOME ou MySQL, puisque pour le paquetage concerné, le support est actif par défaut.
		    Si au contraire, la fonctionnalité est désactivée par défaut, on peut utiliser cette approche :
		</p>
<pre>
DEPEND="gnome? ( &gt;=gnome-base/gnome-1.4 )
	mysql? ( &gt;=dev-db/mysql-3.23.49 )"

src_compile() {
	local myconf
	use gnome &amp;&amp; myconf="--enable-gnome"
	use mysql &amp;&amp; myconf="${myconf} --enable-mysql"

	./configure ${myconf} --prefix=/usr --host=${CHOST} || die
	emake || die
}
</pre>
		<p>
		    Cette fois ci, nous n'explicitons d'activer le support GNOME et MySQL que si les variables correspondantes du <c>USE</c> sont activées.
		    La partie <c>use mysql &amp;&amp;</c> teste si <c>mysql</c> est dans <c>USE</c>, et dans ce cas, la fin de la commande ajoute 
		    <c>myconf="${myconf} --enable-mysql"</c>.
		</p>
		<p>Les variables de USE suivantes sont utilisées actuellement par Gentoo-Linux:</p>

		<table>
		    <tr><th>Variable</th><th>Description</th></tr>
		    
		    <tr><ti>3dfx</ti><ti>Ajoute le support pour les cartes 3dfx dans XFree86. cf. voodoo3</ti></tr>
		    <tr><ti>3dnow</ti><ti>Support pour les instructions multimédia 3dnow</ti></tr>
		    <tr><ti>aalib</ti><ti>Ajoute le support de media-libs/aalib
            (bibliothèque de graphisme ASCII)</ti></tr>
		    <tr><ti>acl</ti><ti>Ajoute le support de sys-apps/acl (utilitaires XFS)</ti></tr>
		    <tr><ti>afs</ti><ti>Ajoute le support OpenAFS (Système de fichier distribué)</ti></tr>
		    <tr><ti>alsa</ti><ti>Ajoute le support de media-libs/alsa-lib
            (Advanced Linux Sound Architecture)</ti></tr>
		    <tr><ti>apm</ti><ti>Ajoute le support APM (Advanced Power Management)</ti></tr>
		    <tr><ti>arts</ti><ti>Ajoute le support aRts : le serveur de son KDE</ti></tr>
		    <tr><ti>atlas</ti><ti>Ajoute le support atlas au lieu de blas dans dev-lang/</ti></tr>
		    <tr><ti>avi</ti><ti>Ajoute le support Win32 AVI et aussi le support avifile (bibliothèque avi)</ti></tr>
		    <tr><ti>berkdb</ti><ti>Ajoute le support sys-libs/db (Berkeley DB pour MySQL)</ti></tr>
		    <tr><ti>bonobo</ti><ti>Ajoute le support gnome-base/bonobo (interfaces Gnome CORBA)</ti></tr>
		    <tr><ti>crypt</ti><ti>Ajoute le support de l'encryption -- utilisant mcrypt et gpg lorsque c'est utilisable</ti></tr>
		    <tr><ti>cups</ti><ti>Ajoute le support CUPS (Common Unix Printing System</ti></tr>
		    <tr><ti>dga</ti><ti>Ajoute le support DGA (Xfree86) (DGA=Direct Graphic Access)</ti></tr>
		    <tr><ti>directfb</ti><ti>Ajoute le support DirectFB layer (bibliothèque pour les FrameBuffers)</ti></tr>
		    <tr><ti>doc</ti><ti>Ajoute les documentations supplémentaires, générées par exemple par gtk-doc</ti></tr>
		    <tr><ti>dvd</ti><ti>Ajoute le support des DVDs</ti></tr>
		    <tr><ti>encode</ti><ti>Ajoute le support de MEncoder ou LaME encoder, losque c'est applicable</ti></tr>
		    <tr><ti>esd</ti><ti>Ajoute le support media-sound/esound (Enlightened Sound Daemon)</ti></tr>
		    <tr><ti>evo</ti><ti>Ajoute le support pour evolution dans gnumeric</ti></tr>
		    <tr><ti>fbcon</ti><ti>Ajoute le support des framebuffer pour la console, via le noyau</ti></tr>
		    <tr><ti>flash</ti><ti>Ajoute le support pour créer des fichiers flash en utilisant Ming</ti></tr>
		    <tr><ti>gb</ti><ti>Ajoute le support de Gnome Basic à gnumeric</ti></tr>
		    <tr><ti>gd</ti><ti>Ajoute le support sys-libs/gdbm (bibliothèsques de base de données GNU)</ti></tr>
		    <tr><ti>gdbm</ti><ti>Ajoute le support sys-libs/gdbm (bibliothèsques de base de données GNU)</ti></tr>
		    <tr><ti>ggi</ti><ti>Ajoute le support media-libs/libggi (video api/drivers vidéo non-X)</ti></tr>
		    <tr><ti>ggz</ti><ti>Ajoute le support de Gnu Gaming Zone - http://ggz.sf.net</ti></tr>
		    <tr><ti>gif</ti><ti>Ajoute le suppor des images GIF</ti></tr>
		    <tr><ti>gnome</ti><ti>Ajoute le support GNOME</ti></tr>
		    <tr><ti>gphoto2</ti><ti>Ajoute le support des appareils photo numériques</ti></tr>
		    <tr><ti>gpm</ti><ti>Ajoute le support de sys-libs/gpm (pilote de souris pour les consoles)</ti></tr>
		    <tr><ti>gtk</ti><ti>Ajoute le support x11-libs/gtk+ (The GIMP Toolkit)</ti></tr>
		    <tr><ti>gtkhtml</ti><ti>Ajoute le support de gnome-extra/gtkhtml</ti></tr>
		    <tr><ti>guile</ti><ti>Ajoute le support de dev-util/guile (interpreteur pour Scheme)</ti></tr>
		    <tr><ti>icc</ti><ti>Utilise le compilateur Intel C++ si le paquet le supporte</ti></tr>
		    <tr><ti>icc-pgo</ti><ti>Active la génération de données PGO ou utiliser lorsque icc est utilisé.</ti></tr>
		    <tr><ti>imap</ti><ti>Ajoute le support IMAP</ti></tr>
		    <tr><ti>imlib</ti><ti>Ajoute le support media-libs/imlib (Image loading and rendering library)</ti></tr>
		    <tr><ti>innodb</ti><ti>Ajoute le support innodb pour mySQL (support de transaction)</ti></tr>
		    <tr><ti>ipv6</ti><ti>Ajoute le support pour IP version 6</ti></tr>
		    <tr><ti>java</ti><ti>Ajoute le support de Java</ti></tr>
		    <tr><ti>jpeg</ti><ti>Ajoute le support des images JPEG</ti></tr>
		    <tr><ti>kde</ti><ti>Ajoute le support de kde-base/kde (K Desktop Enviroment)</ti></tr>
		    <tr><ti>lcms</ti><ti>Ajoute le support lcms à media-gfx/imagemagick (gestion des couleurs)</ti></tr>
		    <tr><ti>ldap</ti><ti>Ajoute le support LDAP (Lightweight Directory Access Protocol)</ti></tr>
		    <tr><ti>libg++</ti><ti>Ajoute les modules C++ dans dev-db/postgresql (libpq++)</ti></tr>
		    <tr><ti>libgda</ti><ti>Ajoute le support "GNU Data Access" (wrapper CORBA) pour gnumeric</ti></tr>
		    <tr><ti>libwww</ti><ti>Ajoute le support libwww (API WEB générale)</ti></tr>
		    <tr><ti>matrox</ti><ti>Ajoute le support Matrox MGA à mplayer</ti></tr>
		    <tr><ti>mikmod</ti><ti>Ajoute le support libmikmod pour permettre de jouer des fichiers audio de type SoundTracker</ti></tr>
		    <tr><ti>mmx</ti><ti>Ajoute le support pour les optimisations pour
            les processeurs de type Pentium MMX et Athlon</ti></tr>
		    <tr><ti>motif</ti><ti>Ajoute le support motif (Open Motif)</ti></tr>
		    <tr><ti>mozaccess-builtin</ti><ti>Ajoute le support text-to-speech et eventuellement du braille pour mozilla</ti></tr>
		    <tr><ti>mozctl</ti><ti>Ajoute le module "Pango like" à mozilla (???)</ti></tr>
		    <tr><ti>mozilla</ti><ti>Ajoute le support mozilla</ti></tr>
		    <tr><ti>mozirc</ti><ti>Ajoute le module IRC (Internet Relay Chat) à mozilla</ti></tr>
		    <tr><ti>mozxmlterm</ti><ti>Ajoute le terminal type Xterm avec support XML à mozilla</ti></tr>
		    <tr><ti>mpeg</ti><ti>Ajoute le support libmpeg3 à de nombreux paquets</ti></tr>
		    <tr><ti>mysql</ti><ti>Ajoute le support mySQL</ti></tr>
		    <tr><ti>nas</ti><ti>Ajoute le support pour NAS (network audio sound)</ti></tr>
		    <tr><ti>ncurses</ti><ti>Ajoute le support ncurses (bibliothèque d'affichage sous console)</ti></tr>
		    <tr><ti>nls</ti><ti>Ajoute le support NLS (Native Language Support, en utilisant gettext et les locales GNU)</ti></tr>
		    <tr><ti>nocardbus</ti><ti>Désactive le support cardbus dans pcmcia-cs</ti></tr>
		    <tr><ti>odbc</ti><ti>Ajoute le support ODBC (Open DataBase Connectivity)</ti></tr>
		    <tr><ti>oggvorbis</ti><ti>Ajoute le support pour l'encodage audio en OggVorbis</ti></tr>
		    <tr><ti>opengl</ti><ti>Ajoute le support OpenGL</ti></tr>
		    <tr><ti>oss</ti><ti>Ajoute le support OSS (Open Sound System)</ti></tr>
		    <tr><ti>pam</ti><ti>Ajoute le support PAM (Pluggable Authentication Modules)</ti></tr>
		    <tr><ti>pcmcia</ti><ti>Ajoute le support pour les périphériques PCMCIA pour les ordinateurs portables</ti></tr>
		    <tr><ti>pda</ti><ti>Ajoute le support pour les ordinateurs de poche.</ti></tr>
		    <tr><ti>pdflib</ti><ti>Ajoute le support des PDF (Portable Document Format)</ti></tr>
		    <tr><ti>perl</ti><ti>Ajoute le support du langage Perl</ti></tr>
		    <tr><ti>pic</ti><ti>Ajoute le support PIC à gcc (???)</ti></tr>
		    <tr><ti>plotutils</ti><ti>Ajoute le support de plotutils à gnuplot (bibliothèque de graphisme vectoriel en 2-D)</ti></tr>
		    <tr><ti>png</ti><ti>Ajoute le support des images PNG</ti></tr>
		    <tr><ti>pnp</ti><ti>Ajoute le support de PNP dans pcmcia-cs (Plug-N-Play)</ti></tr>
		    <tr><ti>postgres</ti><ti>Ajoute le support des bases de données postgresql</ti></tr>
		    <tr><ti>python</ti><ti>Ajoute le support du langage Python</ti></tr>
		    <tr><ti>qt</ti><ti>Ajoute le support des bibliothèques Qt</ti></tr>
		    <tr><ti>qtmt</ti><ti>Ajoute le support des bibliothèques QT, en multithreadé</ti></tr>
		    <tr><ti>quicktime</ti><ti>Ajoute le support OpenQuickTime</ti></tr>
		    <tr><ti>readline</ti><ti>Active le support de libreadline, une bibliothèque GNU de "line-editing" que tout le monde devrait utiliser</ti></tr>
		    <tr><ti>ruby</ti><ti>Ajoute le support du langage Ruby</ti></tr>
		    <tr><ti>samba</ti><ti>Ajoute le support de SAMBA</ti></tr>
		    <tr><ti>sdl</ti><ti>Ajoute le support de SDL (une bibliothèque mutltimédia, Simple Direct Layer)</ti></tr>
		    <tr><ti>slang</ti><ti>Ajoute le support pour la bibliothèque d'affichage de texte slang (un peu comme ncurse, mais différent)</ti></tr>
		    <tr><ti>slp</ti><ti>Ajoute le support SLP à CUPS (Service Locator Protocol)</ti></tr>
		    <tr><ti>snmp</ti><ti>Ajoute le support SNMP si possible (Simple Network Management Protocol)</ti></tr>
		    <tr><ti>socks5</ti><ti>Ajoute le support des proxys socks5</ti></tr>
		    <tr><ti>spell</ti><ti>Ajoute le support du dictionnaire</ti></tr>
		    <tr><ti>sse</ti><ti>Optimisations de calcul en virgule flottante pour les processeurs de type Pentium</ti></tr>
		    <tr><ti>ssl</ti><ti>Ajoute le support SSL (Secure Socket Layer)</ti></tr>
		    <tr><ti>static</ti><ti>Compilation statique et non dynamique</ti></tr>
		    <tr><ti>svga</ti><ti>Ajoute le support SVGAlib (bibliothèque graphique)</ti></tr>
		    <tr><ti>tcltk</ti><ti>Support de Tcl/Tk</ti></tr>
		    <tr><ti>tcpd</ti><ti>Ajoute le support des TCP wrappers</ti></tr>
		    <tr><ti>tetex</ti><ti>Ajoute le support teTeX</ti></tr>
		    <tr><ti>tiff</ti><ti>Ajoute le support des images TIFF</ti></tr>
		    <tr><ti>truetype</ti><ti>Ajoute le support des fontes FreeType et/ou FreeType2</ti></tr>
		    <tr><ti>trusted</ti><ti>Construit des versions sûres des programmes pcmcia-cs</ti></tr>
		    <tr><ti>voodoo3</ti><ti>Ajoute le support pour le chipset vidéo Voodoo3 de 3Dfx, sinon, le support des Voodoo4/5 est activé par défaut</ti></tr>
		    <tr><ti>X</ti><ti>Ajoute le support de XFree86</ti></tr>
		    <tr><ti>xface</ti><ti>Ajoute le support des xface -- uniquement pour sylpheed etsylpheed-claws</ti></tr>
		    <tr><ti>xml</ti><ti>Ajoute le support de la bibliothèque XML (version 1)</ti></tr>
		    <tr><ti>xml2</ti><ti>Ajoute le support de la bibliothèque XML (version 2)</ti></tr>
		    <tr><ti>xmms</ti><ti>Ajoute le support du lecteur XMMS (X MultiMedia System)</ti></tr>
		    <tr><ti>xv</ti><ti>Ajoute le support des extenstions Xvideo (une API
            pour la lecture de vidéos sous X)</ti></tr>
		    <tr><ti>zeo</ti><ti>Ajoute le support de Zope Enterprise Objects</ti></tr>
		</table>
	    </body>
	</section>
    </chapter>

    <chapter>
	<title>Organisation du système de fichiers</title>

	<section>
	    <title>Introduction à FHS</title>
	    <body>
		<p>
		    L'organisation du système de fichiers standard utilisé dans Gentoo-Linux, suit rigoureusement la FHS (<e>Filesystem Hierarchy Standard</e>).
		    Une description simplifiée de ce standard est donné ici, pour quelque chose de plus détaillé, aller sur <uri>http://www.pathname.com/fhs/</uri>.
		</p>
		<note>
		    La hiérarchie de <path>/opt</path> est décrite dans la section 3.12 de la FHS. La section 4.4 traite du répertoire <path>/usr/X11R6</path>.
		    KDE et GNOME n'ont pas d'adresse spécifique, et ne sont en fait même pas mentionnés dans la version actuelle de la FHS.
		</note>
	    </body>
	</section>

	<section>
	    <title>Comment insérer des paquets dans le système de fichiers</title>
	    <body>
		<p>Habituellement, si le paquet utilise autoconf/automake, la destination d'installation par défaut est souvent correcte, avec quelques exceptions : </p>

		<ul>
		    <li>
			Si vous installez un programme dans <path>/bin</path>, <path>/sbin</path>, <path>/usr/bin</path> ou <path>/usr/sbin</path>, alors les pages
			de manuel correspondantes doivent êtres installées dans <path>/usr/share/man</path>. Ceci peut très souvent être accompli en spécifiant
			<c>./configure --mandir=/usr/share/man</c> dans l'ebuild.
		    </li>
		    <li>
			Les fichiers d'info GNU doivent toujours être installés dans <path>/usr/share/info</path>, <e>même pour les fichiers traitant de X11, GNOME, ou des
			    applications spécifiques KDE</e>. Notez bien que
                <path>/usr/share/info</path> est le <e>seul</e> emplacement officiel pour installer des info GNU.
			Pourtant, beaucoup de scripts <c>./configure</c> installent les fichiers d'info dans <c>/usr/info</c> par défaut, et il est souvent nécessaire
			d'appeler <c>./configure</c> avec l'argument <c>--infodir=/usr/share/info</c>.
		    </li>
		    <li>
			Les fichiers de documentation sont installés dans <path>/usr/share/doc</path>, dans un sous répertoire contenant le nom, la version et la révision
			du programme concerné. Ceci s'applique à tous les types programmes: GNOME, KDE, X11 ou console. Par contre, les programmes peuvent installer
			leur documentation dans un sous répertoire de <path>/usr/share</path>, avec leur propre hiérarchie.
		    </li>
		    <li>
			Les programmes et les bibliothèques spécifiques X11 sont toujours installées dans <path>/usr</path>, et non directement dans <path>/usr/X11R6</path>.
			Nous conservons l'arborescence de <path>/usr/X11R6</path> plutôt pour le système de fenêtres X, Version 11 Release 6 <e>lui même</e>. C'est peut être
			une interprétation plus radicale de la FHS que l'on fait certaines distributions.
		    </li>
		    <li>Les applications GNOME et KDE sont de même rangées dans <path>/usr</path>.</li>
		</ul>
		
		<impo> 
		    Certaines distributions choisissent d'installer GNOME et KDE dans <path>/opt</path>. Il n'y a pas de standard pour ces environnements de travail,
		    du moins en ce qui concerne le lieu d'installation de leurs fichiers. Dans un intérêt de simplicité et de logique, nous avons choisi d'installer
		    les paquets GNOME et KDE dans l'arborescence <path>/usr</path>.
		</impo>
		<p>
		    En général, les ebuilds installent leurs fichiers dans <path>/usr</path> directement. <e>Certains</e> programmes sont compilés et liés avec ou sans
		    les bibliothèques GNOME, KDE ou X11, ce qui peut créer du désordre. Notre solution est de tout installer dans <path>/usr</path> ce qui évite
		    des ambiguïtés et une complexité inutile pour les auteurs d'ebuilds.
            L'endroit où installer les fichiers d'un programme ne doit <e>pas</e> dépendre
		    de la présence ou de l'absence de certaines variables spécifiques de <c>USE</c>. C'est pourquoi les ebuilds de l'arborescence portage installent
		    <e>le plus souvent</e> les fichiers exclusivement dans <path>/usr</path>.
		</p>
		<note>
		    Le répertoire <path>/opt</path>, dans Gentoo-Linux, est réservé aux paquets binaires. Par exemple : mozilla-bin, acroread, netscape et realplayer.
		    Ces paquetages nécessitent en général un fichier <path>/etc/env.d/foo</path>. Ceci, dans le but d'inclure les chemins et les variables additionnelles
		    dans l'environnement.
		</note>
	    </body>
	</section>
    </chapter>

    <chapter>
	<title>Les scripts et outils de Portage</title>

	<section>
	    <title>Les scripts publics</title>
	    <body>
		<p>Ce sont des scripts utilisés par l'administrateur système pour
        installer ou retirer des paquetages, et maintenir la base de donnés des
        paquets.</p>
		<p>
		    <c>ebuild</c> est l'outil principal du système Portage ; il réalise
            toutes les tâches majeures telles que décompresser, compiler, installer, fusionner
		    et enlever des paquets. Il est appellé par la commande <c>ebuild chemin/vers/package.ebuild commande</c>. Les commandes disponibles sont :
		</p>
		<table>
		    <tr><th>Commande</th><th>Description</th><th>Fonction de l'ebuild lancée</th></tr>
		    <tr><ti>*<c>setup</c></ti><ti>Réalise toute commande préparatoire permettant à la suite de l'ebuild de bien se réaliser</ti><ti><c>pkg_setup</c></ti></tr>
		    <tr><ti><c>depend</c></ti><ti>Affiche les dépendances requises pour construire le paquet</ti><ti>n/a</ti></tr>
		    <tr><ti><c>check</c></ti><ti>Vérifie si les dépendances sont remplies</ti><ti>n/a</ti></tr>
		    <tr><ti><c>rcheck</c></ti><ti>Vérifie que les dépendances à l'exécution des paquets sont remplies</ti><ti>n/a</ti></tr>
		    <tr><ti><c>merge</c></ti><ti>Décompresse, compile, installe et fusionne le paquet dans le système de fichiers</ti><ti>n/a</ti></tr>
		    <tr><ti>*<c>qmerge</c></ti>
			<ti>Fusionne le paquets dans le système de fichier, en supposant que la décompression, la compilation et l'installation aient été réalisées</ti>
			<ti>n/a</ti>
		    </tr>
		    <tr><ti>*<c>unpack</c></ti><ti>Décompresse l'archive de sources dans le répertoire de travail</ti><ti><c>src_unpack</c></ti></tr>
		    <tr><ti>*<c>compile</c></ti><ti>Compile le paquet</ti><ti><c>src_compile</c></ti></tr>
		    <tr><ti><c>rpm</c></ti><ti>Crée un rpm depuis le paquetage</ti><ti>n/a</ti></tr>
		    <tr><ti><c>package</c></ti><ti>Crée un package Gentoo (<c>tbz2</c>)</ti><ti>n/a</ti></tr>
		    <tr><ti>*<c>prerm</c></ti><ti>Exécute la partie préparatoire de la suppression du paquetage</ti><ti><c>pkg_prerm</c></ti></tr>
		    <tr><ti>*<c>postrm</c></ti><ti>Exécute la partie post-suppression de la dés-installation du paquetage</ti><ti><c>pkg_postrm</c></ti></tr>
		    <tr><ti>*<c>preinst</c></ti><ti>Exécute la partie pré-installatoire du paquetage</ti><ti><c>pkg_preinst</c></ti></tr>
		    <tr><ti>*<c>postinst</c></ti><ti>Exécute la partie post-installatoire du paquetage</ti><ti><c>pkg_postinst</c></ti></tr>
		    <tr><ti><c>config</c></ti><ti>Génère une configuration par défaut, une fois que le paquet est fusionné</ti><ti><c>pkg_config</c></ti></tr>
		    <tr><ti>*<c>touch</c></ti><ti>Met à jour le "mtimes" pour chaque archive de sources du paquet</ti><ti>n/a</ti></tr>
		    <tr><ti>*<c>clean</c></ti><ti>Nettoie le répertoire de travail pour le paquet</ti><ti>n/a</ti></tr>
		    <tr><ti>*<c>fetch</c></ti><ti>Récupère les sources su paquet</ti><ti>n/a</ti></tr>
		    <tr><ti>*<c>digest</c></ti><ti>Crée un fichier de bilan pour le paquet</ti><ti>n/a</ti></tr>
		    <tr><ti>*<c>install</c></ti><ti>Installe le paquet dans le répertoire image</ti><ti><c>src_install</c></ti></tr>
		    <tr><ti><c>unmerge</c></ti><ti>Désinstalle un paquet du système de
            fichiers</ti><ti>n/a</ti></tr>
		</table>
		<p>Note : les commandes avec une astérisque (*) sont normalement
        utilisées uniquement par les développeurs</p>
		<p>
		    <c>emerge</c> fusionne récursivement les paquets et toutes leurs dépendances dans le système de fichiers. Cette commande
		    supporte de nombreuses options, dont la liste est accessible par un <c>emerge --help</c>.
		</p>
		<p>
		    <c>env-update</c> met à jour les fichiers de configuration (en particulier, mais pas uniquement, <path>/etc/ld.so.conf</path> et 
		    <path>/etc/profile.env</path>) pour prendre en compte les modifications faites par l'installation des paquets.
		</p>
	    </body>
	</section>

	<section>
	    <title>Scripts et commandes privées</title>
	    <body>
		<p>Ce sont des scripts que vous pouvez utiliser dans vos ebuilds pour
        réaliser des tâches courantes.</p>
		<p>Pour des instructions plus détaillées, consultez les scripts eux mêmes dans <path>/usr/lib/portage/bin</path>.</p>
		<table>
		    <tr><ti>into</ti>
			<ti>Initialise le préfixe cible (<path>DESTTREE</path>) pour <c>dobin</c>, <c>dolib</c>, <c>dolib.a</c>, <c>dolib.so</c>, <c>domo</c>, <c>dosbin</c></ti>
		    </tr>
		    <tr><ti>dobin</ti>
			<ti>Installe les binaires spécifiés dans <path>DESTTREE/bin</path></ti>
		    </tr>
		    <tr><ti>dodoc</ti>
			<ti>
			    Installe les fichiers spécifiés dans le répertoire de documentation du paquet (<path>/usr/share/doc/${PF}/DOCDESTTREE</path>)
			    où <path>DOCDESTREE</path> est inutilisable par <c>docinto</c>
			</ti>
		    </tr>
		    <tr><ti>doexe</ti>
			<ti>Installe les fichiers spécifiés avec le mode <e>EXEOPTIONS</e> dans <path>EXEDESTTREE</path>. 
			    <e>EXEOPTIONS</e> est par défaut initialisé à -m0755 et est modifiable via la commande <c>exeopts</c>.
			    <path>EXEDESTTREE</path> est modifiable via la commande <c>exeinto</c>.
			</ti>
		    </tr>
		    <tr><ti>dohard</ti><ti>Crée un lien hard, utilisant ${D} de manière transparente</ti></tr>
		    <tr><ti>dohtml</ti><ti>Installe les fichiers et répertoires spécifiés dans <path>/usr/share/doc/${PF}/html</path></ti></tr>
		    <tr><ti>doinfo</ti><ti>Installe les fichiers spécifiés dans <path>/usr/share/info</path>, et les compresse ensuite avec gzip</ti></tr>
		    <tr><ti>doins</ti>
			<ti>
			    Installe les fichiers spécifiés avec le mode <e>INSOPTIONS</e> dans <path>INSDESTTREE</path>.
			    <e>INSOPTIONS</e> est par défaut -m0644 et est modifiable via la commande <c>insopts</c>.
			    <path>INSDESTTREE</path> est modifiable via la commande <c>insinto</c>.
			</ti>
		    </tr>
		    <tr><ti>dolib</ti>
			<ti>
			    Installe les bibliothèques spécifiées avec le mode <e>LIBOPTIONS</e> dans <path>DESTTREE/lib</path>. 
			    <e>LIBOPTIONS</e> est par défaut égal à -m0644 et est modifiable via la commande <c>libopts</c>
			</ti>
		    </tr>
		    <tr><ti>dolib.a</ti><ti>Installe les bibliothèques spécifiées dans <path>DESTTREE/lib</path> avec le mode 0644</ti></tr>
		    <tr><ti>dolib.so</ti><ti>Installe les bibliothèques spécifiées dans <path>DESTTREE/lib</path> avec le mode 0755</ti></tr>
		    <tr><ti>doman</ti><ti>Installe les fichiers spécifiés dans <path>/usr/share/man/manX</path>, avec le suffixe X adapté</ti></tr>
		    <tr><ti>domo</ti><ti>Utilisé pour l'installation manuelle de fichiers .mo, qui sont utilisés pour stocker des chaînes de caractères internationales</ti></tr>
		    <tr><ti>donewins</ti>
			<ti>
			    Idem que <c>newins</c>; C'est même un lien symbolique vers <c>newins</c> actuellement.
			    Cette commande est "deprecated" et existe pour la compatibilité avec d'anciens ebuilds. Utilisez <c>newins</c> à la place
			</ti>
		    </tr>
		    <tr><ti>dosbin</ti><ti>Installe des binaires dans <path>DESTTREE/sbin</path>, en les rendant exécutables</ti></tr>
		    <tr><ti>dosed</ti><ti>Supprime toutes les occurrences de ${D} (Le préfixe du chemin d'installation) dans le fichiers spécifiés</ti></tr>
		    <tr><ti>dosym</ti><ti>Crée un lien symbolique, utilisant ${D} de manière transparente</ti></tr>
		    <tr><ti>emake</ti><ti>Lance un make parallèle. Certains projets ne peuvent pas être construits en parallèle, utiliser alors make</ti></tr>
		    <tr><ti>fowners</ti>
			<ti>Applique la propriété spécifiée (premier argument) au fichier spécifié (second argument) via la commande chown, gère ${D} de manière transparente</ti>
		    </tr>
		    <tr><ti>fperms</ti>
			<ti>
			    Applique les permissions spécifiées (premier argument) aux fichiers spécifiés (second argument) via la commande chmod, 
			    gère ${D} de manière transparente
			</ti>
		    </tr>
		    <tr><ti>newbin</ti>
			<ti>Encapsule <c>dobin</c> et installe le binaire spécifié (premier argument) dans <path>DESTTREE/bin</path>, le renommant en le second argument</ti>
		    </tr>
		    <tr><ti>newdoc</ti>
			<ti>
			    Encapsule <c>dodoc</c> et installe le fichier spécifié (premier
                argument) dans <path>/usr/share/doc/${PF}/DOCDESTTREE</path>, le
                renommant en le second argument.
			</ti>
		    </tr>
		    <tr><ti>newexe</ti>
			<ti>Encapsule <c>doexe</c> et installe le fichier spécifié avec le mode <e>EXEOPTIONS</e> dans <path>EXEDESTTREE</path>, 
			    le renommant en le second argument.
			</ti>
		    </tr>
		    <tr><ti>newins</ti>
			<ti>Encapsule <c>doins</c> et installe le fichier spécifié avec le mode <e>INSOPTIONS</e> dans <path>INSDESTTREE</path>, 
			    le renommant en le second argument.
			</ti>
		    </tr>
		    <tr><ti>newlib.a</ti>
			<ti>Encapsule <c>dolib.a</c> et installe la bibliothèque spécifiée dans <path>DESTTREE/lib</path>, la renommant en le second argument.</ti>
		    </tr>
		    <tr><ti>newlib.so</ti>
			<ti>Encapsule <c>dolib.so</c> et installe la bibliothèque spécifiée dans <path>DESTTREE/lib</path>, la renommant en le second argument.</ti>
		    </tr>
		    <tr><ti>newman</ti>
			<ti>Encapsule <c>doman</c> et installe le fichier spécifié dans <path>/usr/share/man/manX</path>, le renommant en le second argument.</ti>
		    </tr>
		    <tr><ti>newsbin</ti>
			<ti>Encapsule <c>dosbin</c> et installe le fichier spécifié dans <path>DESTTREE/sbin</path>, le renommant en le second argument.</ti></tr>
		    <tr><ti>pmake</ti><ti>deprecated, utiliser emake à la place</ti></tr>
		    <tr><ti>prepalldocs</ti><ti>gzip récursivement tous les fichiers de documentation dans <path>/usr/share/doc</path>, en gérant les liens symboliques</ti></tr>
		    <tr><ti>prepallinfo</ti><ti>gzips récursivement les fichiers d'info dans<path>/usr/share/info</path></ti></tr>
		    <tr><ti>prepallman</ti>
			<ti>
			    gzips récursivement toutes les pages de manuel dans <path>/opt/*/man/*</path>, <path>/usr/share/man/*</path>, 
			    <path>/usr/local/man/*</path>, <path>/usr/X11R6/share/man/*</path> en gérant les liens symboliques
			</ti>
		    </tr>
		    <tr><ti>prepall</ti>
			<ti>
			    Encapsule <c>prepallman</c>, <c>prepallinfo</c> et <c>prepallstrip</c>. S'assure que toutes les bibliothèques dans <path>/opt/*/lib</path>, 
			    <path>/lib</path>, <path>/usr/lib</path> et <path>/usr/X11R6/lib</path> soient exécutables. Et déplace toutes les macros aclocal dans
			    <path>/usr/share/aclocal</path>
			</ti>
		    </tr>
		    <tr><ti>try</ti><ti>deprecated. Utilisez la construction avec || die à la place.</ti></tr>
		</table>
	    </body>
	</section>
    </chapter>

    <chapter>
	<title>Les dépendances de paquets</title>

	<section>
	    <title>Pourquoi les dépendances sont importantes</title>
	    <body>
		<p>
		    Portage est un peu plus qu'un script pratique qui vous donne une méthode unifiée pour construire n'importe quel projet (programme, bibliothèque) depuis
		    les sources. Il va permettre de récupérer et d'installer toutes les dépendances nécessaires si vous faites bien attention de les spécifier dans l'ebuild.
		</p>
		<p>
		    Dans les ebuilds officiels, les dépendances ont déjà été spécifiées, ainsi, si vous faites un <c>emerge net-www/mozilla/mozilla-1.0</c>,
		    Portage va s'assurer que les bibliothèques nécessaires à la compilation et à l'exécution de mozilla sont bien installées, avant que Mozilla soit
		    lui-même construit.
		</p>
		<p>
		    Portage distingue distingue même les dépendances à la construction, et à l'exécution. (Remarque: pour le moment, Portage installe toutes les dépendances
		    et termine sans y toucher. Dans un futur proche, il sera possible de désinstaller les dépendances de compilation pure, et de n'installer que les
		    dépendances à l'exécution)
		</p>
	    </body>
	</section>

	<section>
	    <title>Comment spécifier des dépendances dans votre fichier d'ebuild</title>
	    <body>
		<p>
		    La variable <c>DEPEND</c> dans votre ebuild <path>foo-x.y.z.ebuild</path> spécifie à Portage quels paquets sont requis pour construire <path>foo</path>.
		    La variable <c>RDEPEND</c> spécifie quels paquets sont nécessaires
            pour que le paquet spécifié puisse s'exécuter. Exemple :
		</p>
<pre>
DEPEND="virtual/glibc
        sys-libs/zlib"
RDEPEND="virtual/glibc"
</pre>
		<p>
		    Cela spécifie à Portage que pour construire <path>foo-x.y.z</path>, les paquets <path>virtual/glibc</path> et <path>sys-libs/zlib</path> sont requis.
		    Cela ne dit rien sur les versions de la glibc ou de zlib qui sont requis, et signifie donc "n'importe lequel convient".
		</p>
		<p>
		    Ce "tout va bien" est un peu effrayant, et ne va pas fonctionner dans le cas général. Mais pour des bibliothèques importantes comme
		    la glibc, qui est particulièrement étudiée pour être toujours 100%
            compatible, cela fonctionne. Pour d'autre bibliothèques, on peut
		    bien sur spécifier la version dans la dépendance. Il y a de nombreux moyens de le faire :
		</p>
<pre>
&gt;=sys-apps/bar-1.2
=sys-apps/baz-1.0
</pre>
		<p>
		    &gt;= et = font ce à quoi on peut s'attendre; sys-apps/bar version 1.2 ou plus récent est bonne (ce qui signifie que sys-apps/bar-2.0 est acceptée), 
		    alors que la version 1.0 de sys-apps/baz est la seule acceptée.
		</p>
		<p>
		    Portage sait gérer les quatre suffixes des numéros de version : <c>-rX</c>, <c>-preX</c>, <c>-alphaX</c> et <c>-betaX</c>
		    où X est un nombre (autant de chiffres que l'on veut). A la règle <c>&gt;=sys-apps/foo-1.0</c> correpondent les fichiers:</p>
<pre>
sys-apps/frob-1.0-r1
sys-apps/frob-1.0
sys-apps/frob-1.0_pre1
sys-apps/frob-1.0_beta1
sys-apps/frob-1.0_alpha1
</pre>
		<p>
		    Portage va ordonner de manière interne la liste, et choisir le premier. Cela signifie que Portage va toujours choisir les paquets
		    <c>_beta</c> avant les <c>_alphaX</c>, les <c>_preX</c> avant les <c>_betaX</c>, les non-suffixés avant les <c>_preX</c> et les <c>-rX</c> 
		    avant les non-suffixés.
		</p>
		<p>Voici d'autres méthodes pour spécifier les dépendances:</p>
<pre>
~sys-apps/qux-1.0
=sys-apps/foo-1.2*
</pre>
		<p>~sys-apps/qux-1.0 va sélectionner la révision la plus récente de qux-1.0</p>
		<p>
		    =sys-apps/foo-1.2* va sélectionner le membre le plus récent de la branche 1.2, mais va ignorer les branches 1.3 et suivantes
		    C'est à dire que foo-1.2.3 et foo-1.2.0 sont tous les deux valides, mais que foo-1.3.3 et foo-1.3.0 ne le sont pas.
		</p>
	    </body>
	</section>
    </chapter>
</guide>
