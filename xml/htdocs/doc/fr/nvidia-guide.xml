<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: nvidia-guide.xml,v 1.34 2011/08/29 11:00:03 cam Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide lang="fr">

<title>Guide nVidia pour Linux Gentoo</title>

<author title="Auteur">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Auteur">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="Correcteur">
  <mail link="curtis119@gentoo.org">M Curtis Napier</mail>
</author>
<author title="Correcteur">
  <mail link="wolf31o2@gentoo.org">Chris Gianelloni</mail>
</author>
<author title="Traducteur">
  <mail link="cam@gentoo.org">Camille Huot</mail>
</author>
<author title="Traducteur">
  <mail link="koppatroopa@yahoo.fr">Bertrand Coppa</mail>
</author>
<author title="Traducteur">
  <mail link="nuage_oort@hotmail.com">Sophie Leroy</mail>
</author>
<author title="Traducteur">
  <mail link="koreth@acissi.net">Sébastien Baudru</mail>
</author>

<abstract>
De nombreux Gentooistes possèdent une carte nVidia dans leur système. nVidia
fournit des pilotes Linux spécifiques pour améliorer les performances de votre
carte. Ce guide vous explique comment installer et configurer ces pilotes.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://createivecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.39</version>
<date>2009-08-05</date>

<chapter>
<title>Introduction</title>
<section>
<body>

<p>
Les pilotes nVidia présents dans l'arbre sont fournis par nVidia et sont
compilés en fonction de votre noyau Linux. Ils contiennent un binaire qui
s'occupe de la communication avec la carte. Ces pilotes sont constitués de deux
parties&nbsp;: un module noyau et un pilote X11, qui sont tous deux contenus
dans un unique paquet. En raison de la façon qu'a nVidia de construire ses
pilotes, vous aurez quelques choix à faire avant d'installer ceux-ci.
</p>

<p>
Le paquet <c>nvidia-drivers</c> contient les pilotes fournis par nVidia, quelle
que soit votre carte graphique. En effet, il utilise une eclass afin de
détecter votre modèle de carte et ainsi de pouvoir télécharger la bonne version
du pilote.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Compatibilité</title>
<section>
<title>Version du pilote</title>
<body>

<p>
Le paquet <c>nvidia-drivers</c> supporte toute la gamme des cartes nVidia.
Plusieurs versions de pilote peuvent être disponibles, selon votre modèle de
carte.
</p>

<p>
Les cartes récentes, telles que les séries GeForce 9, 8, 7 et 6 doivent
utiliser les derniers pilotes.
</p>

<p>
Les cartes plus anciennes, comme les séries GeForce FX 5, devront utiliser les
pilotes 173.x tels que <c>nvidia-drivers-173.14.15</c>. Pour ces cartes, vous
devrez masquer <c>>=x11-drivers/nvidia-drivers-174.00</c> dans votre fichier
<path>/etc/portage/package.mask</path> afin d'éviter l'installation des
nouvelles versions des pilotes, incompatibles avec votre carte.
</p>

<p>
Les cartes anciennes, comme les séries 3 ou 4, nécessiteront les versions 96.x
des pilotes. Pour ces cartes, vous devrez ajouter
<c>&gt;=x11-drivers/nvidia-drivers-97.00</c> dans votre fichier
<path>/etc/portage/package.mask</path>.
</p>

<p>
Pour les plus anciennes cartes basées sur les NV2X (comme les TNT, TNT2,
GeForce et GeForce 2), vous aurez besoin des versions 71.x des pilotes (telle
que <c>nvidia-drivers-71.86.01</c>). Pour ces cartes, masquez
<c>>=x11-drivers/nvidia-drivers-87.00</c> dans le fichier
<path>/etc/portage/package.mask</path>.
</p>

<p>
Vérifiez le fichier LISEZ-MOI sur la <uri
link="http://www.nvidia.com/object/unix.html">page appropriée</uri> pour x86 ou
x86-64 pour savoir quel pilote utiliser avec votre carte.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Configuration de votre carte</title>
<section>
<title>Configuration du noyau</title>
<body>

<p>
Les pilotes nVidia dont on vient de parler sont installés et exécutés en
fonction de votre noyau courant. Puisque le pilote consiste en un module, votre
noyau doit, logiquement, supporter le chargement de modules. Si vous utilisez
<c>genkernel all</c> pour la configuration de votre noyau, les paramètres
appropriés ont déjà été choisis pour vous. Autrement, vérifiez vous-même votre
configuration pour vous assurer que les options appropriées sont
sélectionnées&nbsp;:
</p>

<pre caption="Activation du chargement des modules du noyau">
Loadable module support ---&gt;
  [*] Enable loadable module support
</pre>

<p>
Vous devez aussi activer l'option <e>Memory Type Range Register</e>&nbsp;:
</p>

<pre caption="Activer MTRR">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

<p>
Si vous disposez d'une carte graphique AGP, vous pouvez aussi, optionnellement,
activer le support d'<c>agpgart</c> dans le noyau, soit en dur, soit en module.
Si vous n'utilisez pas le agppart du noyau, les pilotes utiliseront leur propre
implémentation, appelée <c>NvAGP</c>. Sur certains systèmes, cette
implémentation est plus performante que le agppart du noyau, et sur d'autres
systèmes, elle l'est moins. Pour obtenir la performance maximale, vous devrez
évaluer l'une ou l'autre de ces option sur vote propre système. Si vous n'êtes
pas sûr, utiliser la version agppart du noyau&nbsp;:
</p>

<pre caption="Activer agpgart">
Device Drivers --->
Graphics Support --->
-*- /dev/agpgart (AGP Support) --->
</pre>

<note>
Sur les AMD64, la configuration de l'AGPGART est contrôlée par le IOMMU.
</note>

</body>
</section>
<section>
<title>Remarques concernant certaines architectures</title>
<body>

<impo>
Pour les processeurs x86 et AMD64, il y a conflit entre le pilote interne du
noyau et le pilote binaire fourni par nVidia. Si vous compilez votre noyau pour
ces processeurs, il faut retirer complètement le support pour le pilote
interne&nbsp;:
</impo>

<pre caption="Retirer le pilote interne">
Device Drivers --->
Graphics Support --->
&lt;*&gt; Support for frame buffer devices --->
</pre>

<p>
Le pilote <c>uvesafb</c> est un <uri
link="http://dev.gentoo.org/~spock/projects/uvesafb/">framebuffer alternatif
avancé</uri>. Notez que vous pouvez choisir de le compiler dans votre noyau
ou en tant que module. L'exemple suivant le compile dans le noyau.
</p>

<pre caption="Activation du support de uvesafb">
Device Drivers --->
Graphics Support --->
&lt;*&gt; Support for frame buffer devices --->
&lt;*&gt;   Userspace VESA VGA graphics support
</pre>

<p>
Sinon vous pouvez essayer <c>VESA</c>&nbsp;:
</p>

<pre caption="Activer le support de VESA">
Device Drivers --->
Graphics Support --->
&lt;*&gt; Support for frame buffer devices --->
[*]   VESA VGA graphics support
</pre>

<p>
Pour plus d'informations, vous pouvez lire la documentation relative au
framebuffer choisi dans <path>/usr/src/linux/Documentation/</path>.
</p>

</body>
</section>
<section>
<title>Poursuivre la configuration du noyau</title>
<body>

<p>
L'ebuild <c>nvidia-drivers</c> trouve automatiquement la version de votre noyau
grâce au lien symbolique <path>/usr/src/linux</path>. Assurez-vous que ce lien
pointe vers les bonnes sources et que votre noyau a été configuré correctement.
Référez-vous à la section «&nbsp;Configurer le noyau&nbsp;» du <uri
link="/doc/fr/handbook/">Manuel Gentoo Linux</uri> pour obtenir des
instructions détaillées sur la configuration de votre noyau.
</p>

<p>
Premièrement, installez <c>eselect</c> (si ce n'est déjà fait).  Si vous
utilisez <c>gentoo-sources-2.6.18-r4</c>, la liste de vos noyaux pourrait
ressembler à ce qui suit&nbsp;:
</p>

<pre caption="Vérifier le lien symbolique /usr/src/linux">
# <i>eselect kernel list</i>
Available kernel symlink targets:
  [1]   linux-2.6.18-gentoo-r4 *
  [2]   linux-2.6.20-gentoo-r7
  [3]   linux-2.6.20-gentoo-r8
<comment>(Vérifiez que le bon noyau soit marqué d'un astérisque.)</comment>
</pre>

<p>
Dans l'exemple ci-dessus, remarquez que le noyau <c>linux-2.6.18-gentoo-r4</c>
est marqué d'un astérisque (<b>*</b>), ce qui montre que le lien symbolique
pointe dessus.
</p>

<p>
Si le lien ne pointe pas vers les sources appropriées, vous devez le mettre à
jour en indiquant le numéro du noyau désiré, comme dans l'exemple ci-dessous.
</p>

<pre caption="Créer ou mettre à jour le lien symbolique /usr/src/linux">
<comment>(Sélectionner le bon noyau.)</comment>
# <i>eselect kernel set 1</i>
</pre>

</body>
</section>
<section>
<title>Installer les pilotes appropriés</title>
<body>

<p>
Il est maintenant temps d'installer les pilotes.
</p>

<pre caption="Installation des modules nVidia">
# <i>emerge nvidia-drivers</i>
</pre>

<note>
Les pilotes peuvent être installés avec le paramètre USE <c>gtk</c>, ce qui
installera <c>media-video/nvidia-settings</c>, un outil graphique pratique pour
surveiller et configurer certains aspects de votre carte nVidia.
</note>

<impo>
Chaque fois que vous <uri link="/doc/fr/kernel-upgrade.xml">compilez un nouveau
noyau</uri> ou que vous recompilez votre noyau courant, vous devez exécuter
<c>emerge nvidia-drivers</c> pour réinstaller les modules nVidia. Une méthode
plus simple pour reconstruire les modules installés par des ebuilds (tels que
<c>nvidia-drivers</c>) est d'utiliser <c>sys-kernel/module-rebuild</c>. Une
fois installé, lancez simplement <c>module-rebuild populate</c> pour construire
une base de données contenant les paquets à reconstruire. Ensuite, après avoir
recompil" votre noyau, lancez juste <c>module-rebuild rebuild</c> pour
reconstruire les pilotes adaptés à votre nouveau noyau.
</impo>

<p>
Lorsque l'installation est finie, lancez <c>modprobe nvidia</c> pour charger le
module du noyau en mémoire. S'il s'agit d'une mise à jour, vous devez
auparavant supprimer le module précédent.
</p>

<pre caption="Chargement du module du noyau">
# <i>lsmod | grep nvidia &amp;&amp; rmmod nvidia</i>
# <i>modprobe nvidia</i>
</pre>

<p>
Pour éviter d'avoir à charger le module à chaque démarrage, vous souhaiterez
sans doute automatiser ce processus. Pour ce faire, éditez le fichier
<path>/etc/modules.autoload.d/kernel-2.6</path> et ajoutez-y <c>nvidia</c>.
N'oubliez pas d'exécuter <c>update-modules</c> par la suite&nbsp;:
</p>

<impo>
Si vous avez compilé <c>agpgart</c> en module, vous devrez l'ajouter à
<path>/etc/modules.autoload.d/kernel-2.6</path>.
</impo>

<pre caption="Lancer update-modules">
# <i>update-modules</i>
</pre>

</body>
</section>
<section>
<title>Configuration du serveur X</title>
<body>

<p>
Une fois que les pilotes sont installés, vous devez configurer votre serveur X
pour qu'il utilise le pilote <c>nvidia</c> au lieu du pilote <c>nv</c> par
défaut.
</p>

<p>
Ouvrez <path>/etc/X11/xorg.conf</path> avec votre éditeur favori (<c>nano</c>
ou <c>vim</c> par exemple) et allez à la section <c>Device</c>. Dans cette
section, modifiez la ligne <c>Driver</c>&nbsp;:
</p>

<pre caption="Remplacement de nv par nvidia dans la configuration du serveur X">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>
  VideoRam   65536
EndSection
</pre>

<p>
Ensuite, allez à la section <c>Module</c> et assurez-vous que le module
<c>glx</c> se charge tandis que le module <c>dri</c> ne se charge pas&nbsp;:
</p>

<pre caption="Mise à jour de la section Module">
Section "Module"
  <comment>(...)</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>(...)</comment>
EndSection
</pre>

<p>
Puis, dans la section <c>Screen</c>, vérifiez que la directive
<c>DefaultDepth</c> indique 16 ou 24, ou qu'il n'y a pas de sous-section
<c>Display</c> avec des directives <c>Depth</c> qui valent autre chose que 16
ou 24. Si vous spécifiez d'autres profondeurs de couleurs que 16 ou 24, les
extensions nVidia GLX ne fonctionneront pas.
</p>

<pre caption="Mettre la section Screen à jour">
Section "Screen"
  <comment>(...)</comment>
  <i>DefaultDepth 16</i>
  Subsection "Display"
  <comment>(...)</comment>
EndSection
</pre>

<p>
Lancez <c>eselect</c> afin que le serveur X utilise les bibliothèques GLX
de nVidia&nbsp;:
</p>

<pre caption="Lancement de eselect">
# <i>eselect opengl set nvidia</i>
</pre>

</body>
</section>
<section>
<title>Ajouter des utilisateurs dans le groupe video</title>
<body>

<p>
Afin que vos utilisateurs puissent accéder aux fichiers de périphérique nVidia,
il faut les ajouter au groupe <c>video</c>&nbsp;:
</p>

<pre caption="Ajout d'un utilisateur au groupe video">
# <i>gpasswd -a nom_utilisateur video</i>
</pre>

<p>
Cela n'est pas forcément obligatoire si vous n'utilisez pas <c>udev</c> mais
cela ne vous fera pas de mal. De plus, votre système sera préparé pour
l'avenir.
</p>

</body>
</section>
<section>
<title>Test de la carte</title>
<body>

<p>
Pour tester votre carte nVidia, démarrez X et lancez <c>glxinfo</c> du paquet
<c>mesa-progs</c>. Cela devrait vous répondre que le rendu direct est
activé&nbsp;:
</p>

<pre caption="Vérification de l'état du rendu direct">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
Pour obtenir votre taux de FPS (images par seconde), lancez <c>glxgears</c>.
</p>

</body>
</section>
<section>
<title>Activer le support nVidia</title>
<body>

<p>
Certains paquets comme <c>mplayer</c> ou <c>xine-lib</c> ont une option USE
locale appelée <c>xvmc</c> qui active le support XvMCNVIDIA, utile notamment
pour visionner des films en haute résolution. Vous pouvez définir cette option
dans la variable USE de votre fichier <path>/etc/make.conf</path> ou bien
l'ajouter pour les paquets <c>media-video/mplayer</c> et/ou
<c>media-libs/xine-lib</c> dans le fichier
<path>/etc/portage/package.use</path>.
</p>

<p>
Certaines applications utilisent également le paramètre USE <c>nvidia</c>, que
vous pouvez donc également ajouter à votre <path>/etc/make.conf</path>.
</p>

<p>
Ensuite, exécutez <c>emerge -uD --newuse world</c> pour recompiler les
applications qui utilisent cette option.
</p>

</body>
</section>
<section>
<title>Utiliser les outils de configuration nVidia</title>
<body>

<p>
NVidia vous fournit également un outil de configuration qui vous permet de
modifier les réglages graphiques sans redémarrer le serveur X. Cet outil est
disponible dans Portage sous le nom de <c>media-video/nvidia-settings</c>.
Comme mentionné précédemment, il sera automatiquement installé si vous aviez
activé le paramètre USE <c>gtk</c> dans <path>/etc/make.conf</path> ou dans
<path>/etc/portage/package.use</path> avant d'installer les pilotes.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Problèmes</title>
<section>
<title>Faire fonctionner la carte en 2D sur des machines avec 4&nbsp;Go de mémoire ou plus</title>
<body>

<p>
Si vous avez des problèmes avec l'accélération 2D, il est probable que
l'origine soit un problème d'écriture avec MTRR. Veuillez vérifier le contenu
du fichier <path>/proc/mtrr</path>&nbsp;:
</p>

<pre caption="Vérifier si l'option « write-combining » est activée">
# <i>cat /proc/mtrr</i>
</pre>

<p>
Chaque ligne doit contenir soit «&nbsp;write-back&nbsp;», soit
«&nbsp;write-combining&nbsp;». Si une ligne avec «&nbsp;uncachable&nbsp;»
apparaît, vous devez modifier une option de votre BIOS pour résoudre le
problème.
</p>

<p>
Redémarrez votre machine et cherchez l'option MTRR, en général, dans un menu
«&nbsp;CPU Settings&nbsp;». Changez cette option de «&nbsp;continuous&nbsp;»
en «&nbsp;discrete&nbsp;» et redémarrez Linux. Vous ne devriez plus voir
«&nbsp;uncachable&nbsp;» dans <path>/proc/mtrr</path> et l'accélération 2D
devrait mieux fonctionner.
</p>

</body>
</section>

<section>
<title>Lorsque j'essaie de charger le module noyau, je reçois un «&nbsp;no such
device&nbsp;»</title>
<body>

<p>
Cela arrive en général lorsque vous n'avez pas de carte graphique qui
corresponde. Assurez-vous de bien avoir une carte graphique nVidia (vous pouvez
vérifier avec <c>lspci</c>).
</p>

<p>
Si vous êtes sûr d'avoir une carte graphique nVidia, vérifiez que la directive
<e>Assign IRQ to VGA</e> est bien activée dans votre BIOS.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Configuration experte</title>
<section>
<title>Documentation</title>
<body>

<p>
Le paquet logiciel du pilote nVidia contient une documentation exhaustive. Elle
est installée dans le répertoire <path>/usr/share/doc</path> et peut être
consultée avec la commande suivante&nbsp;:
</p>

<pre caption="Consulter la documentation de nVidia">
$ <i>less /usr/share/doc/nvidia-drivers-*/README.gz</i>
</pre>

</body>
</section>
<section>
<title>Paramètres du module du noyau</title>
<body>

<p>
Le module du noyau <c>nvidia</c> accepte un éventail de paramètres (options)
qui permettent d'ajuster le comportement du pilote. La plupart sont mentionnés
dans la documentation. Pour ajouter ou modifier ces paramètres, éditez le
fichier <path>/etc/modprobe.d/nvidia.conf</path>. Souvenez-vous d'exécuter
<c>update-modules</c> après ces modifications et gardez à l'esprit que vous
devrez recharger le module <c>nvidia</c> avant que ces modifications ne soient
prises en compte.
</p>

<pre caption="Ajuster la configuration nvidia">
<comment>(Éditez /etc/modprobe.d/nvidia.conf avec votre éditeur de texte favori.)</comment>
# <i>nano -w /etc/modprobe.d/nvidia.conf</i>
<comment>(Mettez à jour les fichiers des modules.)</comment>
# <i>update-modules</i>
<comment>Déchargez le module nvidia...)</comment>
# <i>modprobe -r nvidia</i>
<comment>(... et rechargez-le.)</comment>
# <i>modprobe nvidia</i>
</pre>

</body>
</section>
<section>
<title>Configuration avancée de X</title>
<body>

<p>
La couche logicielle GLX offre aussi une pléthore d'options de configuration.
Celles-ci contrôlent la sortie TV, l'utilisation simultanée de deux écrans, la
détection de la fréquence des moniteurs, etc. Ces options sont elles aussi
couvertes dans la documentation.
</p>

<p>
Si vous voulez utiliser certaines de ces options, vous devez les indiquer dans
la section Device appropriée de votre fichier de configuration de X
(habituellement <path>/etc/X11/xorg.conf</path>). Par exemple, supposons que
vous souhaitez désactiver le logo de démarrage&nbsp;:
</p>

<pre caption="Configuration avancée de nVidia dans X">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  <i>Option     "NoLogo" "true"</i>
  VideoRam   65536
EndSection
</pre>

</body>
</section>
</chapter>
</guide>
