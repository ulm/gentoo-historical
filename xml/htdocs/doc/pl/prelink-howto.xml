<?xml version='1.0' encoding="UTF-8"?>

<!-- Translator: krissn <krissn@op.pl> -->
<!-- Orig revision: 1.36 -->
<!-- Title: Wprowadzenie do Prelink w Gentoo -->
<!-- Status: Finished -->

<!-- $Id: prelink-howto.xml,v 1.3 2005/07/08 19:24:38 neysx Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="prelink-howto.xml" lang="pl">

<title>Wprowadzenie do Prelink w Gentoo</title>

<author title="Autor">
  <mail link="cretin@gentoo.org">Stefan Jones</mail>
</author>
<author title="Redaktor"><!-- zhen@gentoo.org -->
  John P. Davis
</author>
<author title="Redaktor">
  <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Redaktor">
  <mail link="swiyt@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Redaktor">
  <mail link="erwin@gentoo.org">Erwin</mail>
</author>
<author title="Tłumacz">
  Krzysztof Nowicki
</author>

<abstract>
Ten przewodnik informuje o możliwościach korzystania z programu prelink we
współpracy z Portage w wersji 2.0.46 i późniejszych.
</abstract>

<license/>

<version>1.12</version>
<date>2005-04-21</date>

<chapter>
<title>Wprowadzenie</title>
<section>
<title>Co to jest Prelink i do czego służy?</title>
<body>

<p>
Większość aplikacji korzysta ze współdzielonych bibliotek, które muszą zostać
załadowane do pamięci w czasie pracy programu, co za każdym razem wiąże się z
koniecznością dynamicznego połączenia programu z potrzebnymi mu bibliotekami.
W przypadku większości małych programów ten proces trwa bardzo krótko. Jednak w
przypadku programów napisanych w języku C++ lub posiadających wiele zależności
symbolicznych, proces dynamicznego łączenia może zająć sporo czasu.
</p>

<p>
W przeciętnym systemie biblioteki rzadko ulegają modyfikacjom, stąd kiedy
program jest uruchamiany, czynności wykonywane podczas dynamicznego łączenia są
zawsze jednakowe. Prelink wykorzystuje ten fakt i dokonuje dynamicznego łączenia
tylko raz, po czym zapisuje wyniki na stałe w pliku wykonywalnym programu.
</p>

<p>
Prelinkowanie może skrócić czas uruchamiania programów. Przykładowo czas
potrzebny do uruchomienia typowego programu dla środowiska KDE może zostać
skrócony nawet o 50%. Jedynym obowiązkiem użytkownika jest ponowne uruchomienie
polecenia prelink po każdej aktualizacji biblioteki, używanej przez
prelinkowany program.
</p>

</body>
</section>
<section>
<title>Podsumowanie</title>
<body>

<ul>
  <li>
    Prelinkowania dokonuje się przy użyciu programu o nazwie... <c>prelink</c>.
    Program ten modyfikuje plik wykonywalny tak, aby uruchamiał się szybciej.
  </li>
  <li>
    Jeżeli jedna z bibliotek wykorzystywanych przez prelinkowany program ulegnie
    modyfikacji, konieczne jest ponowne prelinkowanie programu. W przeciwnym
    wypadku utracony zostanie efekt przyśpieszonego uruchamiania. W skrócie: za
    każdym razem, kiedy poprzez portage aktualizowany jest pakiet, który
    aktualizuje jakieś biblioteki, wszystkie programy ich używające muszą
    zostać ponownie prelinkowane.
  </li>
  <li>
    Modyfikacje dokonane przez polecenie <c>prelink</c> są w pełni odwracalne.
    Polecenie posiada funkcję undo.
  </li>
  <li>
    Aktualne wersje Portage potrafią rozpoznać zmiany w sumach MD5 i znacznikach
    czasowych plików wykonywalnych, dokonane w wyniku użycia <c>prelink</c>.
  </li>
  <li>
    Nie ma potrzeby dopisywania <c>FEATURES="prelink"</c> do pliku
    <path>make.conf</path>. Portage automatycznie użyje prelinkowania, jeżeli
    znajdzie w systemie zainstalowane polecenie <c>prelink</c>.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Instalacja polecenia Prelink</title>
<section>
<title>Instalacja programu</title>
<body>

<p>
Aby rozpocząć, należy zainstalować program <c>prelink</c>. Podczas jego
instalacji wykonywana jest seria testów, które mają na celu określenie, czy
korzystanie z prelinkowania na danym systemie będzie w pełni bezpieczne.
</p>

<pre caption = "Instalacja polecenia Prelink">
# <i>emerge prelink</i>
</pre>

<p>
U części użytkowników emergowanie programu prelink kończy się błędem z powodu
niepowodzenia podczas testowania systemu. Owe testy zostały wprowadzone ze
względów bezpieczeństwa. Można je pominąć, jednak w takim przypadku zachowanie
polecenia prelink może być nieobliczalne. Przyczyną niepowodzenia testów jest
zwykle nieprawidłowa instalacja podstawowych pakietów systemowych, takich jak
binutils, gcc i glibc. Instalacja tych pakietów w podanej kolejności może
wpłynąć na poprawę sytuacji.
</p>

<note>
Wskazówka: W przypadku pojawienia się błędu można ręcznie zainstalować
polecenie <c>prelink</c> (<c>./configure</c> ; <c>make</c> ; <c>make check</c>
). Jeżeli wystąpił błąd, zawsze można przejrzeć pliki *.log w katalogu
zawierającym programy testujące. Z zawartości tych plików można wyłowić kilka
przydatnych wskazówek, pomocnych przy usuwaniu błędu.
</note>

<p>
Jeżeli istnieje określona sekwencja kroków, w wyniku której na innym systemie
również pojawia się identyczny błąd, proszę wysłać ich opis do <mail
link="cretin@gentoo.org">Stefana Jonesa</mail>.
</p>

</body>
</section>
<section>
<title>Przygotowanie systemu</title>
<body>

<p>
Następnie należy aktywować flagę "pic" w USE w pliku
<path>/etc/make.conf</path>, po czym konieczne jest przebudowanie całego systemu
poleceniem <c>emerge --update --deep --newuse world</c>, aby wszystkie
zainstalowane pakiety skorzystały z nowej flagi USE.
</p>

<p>
Należy również zwrócić uwagę, żeby wśród flag w zmiennych CFLAGS/CXXFLAGS
<e>nie</e> znajdowała się opcja -fPIC. W przeciwnym wypadku konieczne będzie jej
usunięcie i ponowne przebudowanie całego systemu.
</p>

</body>
</section>
<section>
<title>Konfiguracja</title>
<body>

<p>
Wywołanie <c>env-update</c> spowoduje wygenerowanie pliku
<path>/etc/prelink.conf</path>, w którym zawarta jest lista plików
przeznaczonych do prelinkowania.
</p>

<pre caption="Wywoływanie env-update">
# <i>env-update</i>
</pre>

<p>
Niestety nie jest możliwe prelinkowanie programów skompilowanych przy użyciu
starych wersji binutils. Większość z tych programów pochodzi z pakietów
aplikacji rozpowszechnianych wyłącznie w postaci binarnej, które instalowane są
zwykle w katalogu <path>/opt</path>. Utworzenie następującego pliku spowoduje,
że ww. programy zostaną pominięte podczas prelinkowania.
</p>

<pre caption="/etc/env.d/60prelink">
PRELINK_PATH_MASK="/opt"
</pre>

<note>
Można określić więcej katalogów do pominięcia poprzez oddzielenie ich
nazw dwukropkami.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Prelinkowanie</title>
<section>
<title>Użycie polecenia Prelink</title>
<body>

<p>
Do prelinkowania wszystkich programów w katalogach wymienionych w pliku
<path>/etc/prelink.conf</path> można użyć polecenia:
</p>

<pre caption = "Prelinkowanie wyszczególnionych programów">
# <i>prelink -amR</i>
</pre>

<warn>
Jeżeli na Twoim systemie jest mało miejsca na dysku, prelinkowanie całego
systemu może się skończyć obcięciem i tym samym zniszczeniem niektórych plików
wykonywalnych, czego efektem będzie pad systemu. Należy wtedy użyć polecenia
<c>file</c> albo <c>readelf</c>, aby szybko sprawdzić stan podejrzanego pliku.
Najlepiej jednak przed prelinkowaniem sprawdzić ilość wolnego miejsca na
dyskach, wywołując <c>df -h</c>.
</warn>

<table>
<tr>
  <th>Opis użytych parametrów:</th>
</tr>
<tr>
  <th>-a</th>
  <ti>"All": prelinkuje wszystkie programy.</ti>
</tr>
<tr>
  <th>-m</th>
  <ti>
    Oszczędzaj pamięć wirtualną. Przydatne w przypadku prelinkowania
    większej ilości bibliotek.
  </ti>
</tr>
<tr>
  <th>-R</th>
  <ti>
    Tryb losowy -- przyporządkowuje przypadkowe adresy co skutkuje
    wzrostem poziomu bezpieczeństwa poprzez zwiększenie odporności na
    ataki z wykorzystaniem przepełnienia bufora (buffer overflow).
  </ti>
</tr>
</table>

<note>
Więcej parametrów i szczegółów dotyczących ich użycia można odnaleźć na
stronie manuala: <c>man prelink</c>.
</note>

</body>
</section>
<section>
<title>Przyśpieszanie uruchamiania KDE po prelinkowaniu</title>
<body>

<p>
Czas uruchamiania KDE może zostać znacznie zredukowany w wyniku prelinkowania.
Aby dodatkowo skrócić czas uruchamiania KDE, można je skonfigurować tak, aby
przestało korzystać z programu <c>kdeinit</c>, który po prelinkowaniu nie jest
już potrzebny.
</p>

<p>
Aby tego dokonać, wystarczy umieścić wiersz
<c>KDE_IS_PRELINKED="true"</c> w pliku
<path>/etc/env.d/99kde-env</path>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Znane problemy i ich rozwiązania</title>
<section>
<title>"Cannot prelink against non-PIC shared library" (Nie można
prelinkować z biblioteką, skompilowaną bez opcji PIC)</title>
<body>

<p>
Przyczyną tego problemu jest niewłaściwie skompilowana biblioteka, podczas
kompilacji której nie podano parametru -fPIC.
</p>

<p>
Oto lista bibliotek, które nie zostały poprawione, lub których poprawienie nie
jest możliwe:
</p>

<ul>
  <li>
    Biblioteki w pakiecie wine i pochodnych (w tym winex). Prelinkowanie w tym
    wypadku i tak nie spowodowałoby przyśpieszenia programów systemu MS Windows.
  </li>
  <li>
    Biblioteka <path>/usr/lib/liblavfile-1.6.so.0</path> z pakietu
    media-video/mjpegtools.
  </li>
</ul>

<p>
Jeżeli sprawcą problemu jest biblioteka nie ujęta na tej liście, prosimy
zgłosić ten fakt, najlepiej wraz z łatą, dodającą flagę <c>-fPIC</c> do CFLAGS
we właściwych miejscach.
</p>

</body>
</section>
<section>
<title>Po prelinkowaniu systemu niektóre statyczne programy przestają
działać.</title>
<body>

<p>
W systemie opartym o glibc tak naprawdę nie istnieje coś takiego, jak w 100%
statyczny program. Skompilowanie programu statycznie w stosunku do glibc nie
oznacza, że program nie będzie posiadał innych zależności w stosunku do innych
plików systemowych. Oto, jak problem wyjaśnił Dick Howell:
</p>

<p>
"Pomysł ze statycznie skompilowanymi programami ma na celu uniezależnienie
ich od zainstalowanych w systemie bibliotek. Niestety w Linuxie oraz, jak
sądzę, w innych systemach opartych o GLIBC, nie jest to do końca możliwe. Jest
np. sprawa biblioteki "libnss" (Name Service Switch, przez niektórych
nie wiedzieć czemu, nazywana Network Security System), która udostępnia
interfejs dostępu do różnych baz danych uwierzytelniania, informacji sieciowych
i wielu innych rzeczy. Ma to na celu uniezależnienie aplikacji od konfiguracji
sieciowej konkretnego systemu. Pomysł jest niezły, jednak zmiany w GLIBC mogą
powodować problemy z jej załadowaniem. Nie można statycznie włączyć biblioteki
"libnss", ponieważ dla każdego systemu jest ona inaczej
skonfigurowana. Problem wydaje się leżeć w statycznym linkowaniu innych
bibliotek składowych GLIBC, np. "libpthread", "libm" oraz
"libc", w wyniku czego powstają niekompatybilne odwołania do funkcji
biblioteki "libnss"."
</p>

</body>
</section>
<section>
<title>Prelink kończy z błędem "prelink: dso.c:306: fdopen_dso: Assertion
`j == k' failed."</title>
<body>

<p>
Jest to znany problem, przystępnie opisany
<uri link="http://bugs.gentoo.org/show_bug.cgi?id=13878">tutaj</uri>.
Prelink nie radzi sobie z plikami wykonywalnymi, skompresowanymi programem UPX.
Począwszy od prelink w wersji 20021213 jedynym sposobem ominięcia problemu jest
nakazanie poleceniu prelink pominięcie takich programów. W rozdziale
<uri link="#doc_chap2_sect2">Konfiguracja</uri> opisano prosty sposób, w jaki
można tego dokonać.
</p>

</body>
</section>
<section>
<title>Używam grsecurity mam wrażenie, że prelinkowanie nie działa.</title>
<body>

<p>
Aby prelinkować programy w systemie używającym grsecurity, z opcją losowego
generowania adresów bazowych w funkcji mmap(), konieczne jest WYŁĄCZENIE tej
funkcji dla pliku <path>/lib/ld-2.3.*.so</path>. Można tego dokonać przy użyciu
polecenia <c>chpax</c>, jednak plik nie może być danym momencie używany przez
żaden program (najlepiej zrobić to uruchamiając system z płyty CD).
</p>

</body>
</section>
</chapter>

<chapter>
<title>Podsumowanie</title>
<section>
<body>

<p>
Prelinkowanie może drastycznie przyspieszyć uruchamianie wielu dużych
aplikacji. W dodatku jest ono wspierane przez Portage. Prelinkowanie jest
również bezpieczne, ponieważ zawsze można odwrócić ten proces dla dowolnego
pliku wykonywalnego, jeżeli sprawia on kłopoty. Wystarczy pamiętać, aby po
aktualizacji glibc lub innych bibliotek zawsze ponownie uruchomić
<path>prelink</path> w celu uaktualnienia wszystkich programów.
Powodzenia!
</p>

</body>
</section>
</chapter>
</guide>
