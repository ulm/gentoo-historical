<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/security/shb-firewalls.xml,v 1.2 2005/06/10 19:16:38 fox2mike Exp $ -->

<!-- Orig revision: 1.1 -->
<!-- Translator: rane <rane@gentoo.pl> -->
<!-- Title: Firewalle -->
<!-- Status: Release -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<sections>

<version>1.0</version>
<date>2005-05-31</date>

<section>
<title>Firewall</title>
<body>

<p>
Ludzie często sądzą, że firewall zapewnia pełną ochronę. Są w błędzie. W
większości przypadków źle skonfigurowany firewall zapewnia mniej ochrony niż
nie posiadanie firewalla w ogóle. Ponadto każdy firewall należy traktować jak
zwykły, podatny na błędy program.
</p>

<p>
Należy zatem poważnie przemyśleć jego używanie i dokładnie sprawdzić czy jest
nam potrzebny. Należy również spisać dokładnie jakiego typu ma to być firewall,
określić reguły jego działania oraz użytkowników jacy będą z niego korzystać.
</p>

<p>
Firewall jest przydatny z dwóch powodów:
</p>

<ul>
  <li>
    Nie wpuszcza części niepożądanych użytkowników (robaków/włamywaczy)
  </li>
  <li>
    Wpuszcza całą resztę (pracowników/dzieci)
  </li>
</ul>

<p>
Są trzy typy firewalli:
</p>

<ul>
  <li>
    Zajmujące się filtrowaniem pakietów.
  </li>
  <li>
    Kontrolujące połączenia sieciowe między systemami wewnętrznymi i zewnętrznymi
    (circuit relay).
  </li>
  <li>
    Bramy aplikacyjne.
  </li>
</ul>

<p>
Firewallem powinien być dedykowany komputer, na którym nie są uruchomione żadne
usługi (oprócz <c>sshd</c>, które może stanowić tu wyjątek) i który jest
zabezpieczony w sposób opisany w tym przewodniku.
</p>

</body>
</section>
<section>
<title>Filtrowanie pakietów</title>
<body>

<p>
Cały ruch sieciowy odbywa się za pomocą pakietów. Duże ilości danych są dzielone
na małe pakiety, przesyłane, a następnie składane w całość na komputerze
docelowym. W nagłówku każdego pakietu znajduje się informacja o tym w jaki
sposób i dokąd powinien on zostać dostarczony. Właśnie z tych informacji
korzysta filtr pakietów. Filtrowanie polega na:
</p>

<ul>
  <li>
    Dopuszczaniu lub odrzucaniu pakietów na podstawie ich źródłowego i
    docelowego adresu IP.
  </li>
  <li>
    Dopuszczaniu lub odrzucaniu pakietów na podstawie ich źródłowego i
    docelowego portu.
  </li>
  <li>
    Odrzucanie lub dopuszczanie na podstawie używanego protokołu.
  </li>
  <li>
    Odrzucaniu lub dopuszczaniu pakietów na podstawie ustawionych w nagłówku
    pakietu flag danego protokołu.
  </li>
</ul>

<p>
Innymi słowy filtrowanie pakietów opiera się na danych pochodzących z nagłówka
pakietu, a nie danych jakie on przenosi.
</p>

<p>
Słabości:
</p>

<ul>
  <li>
    Informacje o adresie wewnątrz pakietów mogą zostać sfałszowane (zespoofowane)
    przez nadawcę.
  </li>
  <li>
    Treść dopuszczonego pakietu może zawierać niechciane informacje, których
    włamywacz może użyć do złamania aplikacji znajdujących się za firewallem.
  </li>
<!--<li>Usually single point of failure</li>-->
</ul>

<p>
Mocne strony:
</p>

<ul>
  <li>
    Łatwość implementacji.
  </li>
  <li>
    Możliwość informowania o potencjalnych atakach zanim jeszcze się odbędą (np.
    poprzez wykrywanie skanowania portów).
  </li>
  <li>
    Doskonale nadaje się do zatrzymywania ataków typu SYN.
  </li>
</ul>

<p>
Przykładowe filtry pakietów na Linuksa:
</p>

<ul>
  <li>
    <uri link="http://www.iptables.org">Iptables</uri>
  </li>
  <li>
    <uri link="http://www.linuxdocs.org/HOWTOs/IPCHAINS-HOWTO.html">Ipchains</uri>
  </li>
  <li>
    <uri link="http://www.smoothwall.org">SmoothWall</uri>
  </li>
</ul>
<!--FIXME: should SmoothWall really be included, since it uses iptables?-->

<note>
Zaleca się używanie iptables. Ipchains to przeżytek.
</note>

</body>
</section>
<section>
<title>Circuit relay</title>
<body>

<p>
Jest to firewall, który zatwierdza połączenia zanim pozwoli na wymianę jakichś
danych. Oznacza to, że nie odrzuca i nie dopuszcza pakietów jedynie na podstawie
ich nagłówków, ale na podstawie skonfigurowanego zestawu reguł sprawdza czy
połączenie jest prawidłowe i dopiero kiedy to potwierdzi pozwala na wymianę
informacji. Filtrowanie może się odbywać poprzez kontrolę:
</p>

<ul>
  <li>Źródłowego i docelowego adresu IP.</li>
  <li>Źródłowego i docelowego portu.</li>
  <li>Okresu czasu.</li>
  <li>Protokołu.</li>
  <li>Użytkownika.</li>
  <li>Hasła.</li>
</ul>

<p>
Cały ruch jest zatwierdzany i monitorowany, ten niechciany jest po prostu
odrzucany.
</p>

<p>
Słabości:
</p>

<ul>
  <li>
    Działa na warstwie transportowej, przez co niektóre aplikacje mogą wymagać
    pewnych modyfikacji, aby mogły w normalny sposób spełniać swoje funkcje.
  </li>
</ul>

</body>
</section>
<section>
<title>Brama aplikacyjna (application gateway)</title>
<body>

<p>
Brama aplikacyjna to rodzaj proxy dla programów, które wymienia dane klientów ze
zdalnymi hostami w ich imieniu. Zwykle znajduje się poza widokiem publicznym i
poza strefą zdemilitaryzowaną (de-militarized zone, część prywatnej sieci, która
jest widoczna poprzez firewall) lub firewallem odrzucającym wszystkie
połączenia. Filtrowanie odbywa się na zasadzie:
</p>

<ul>
  <li>
    Odrzucania lub akceptowania na podstawie źródłowego i docelowego adresu IP.
  </li>
  <li>Zawartości pakietu.</li>
  <li>
    Limitowanym dostępie do plików opartym na ich typie i rozszerzeniu.
  </li>
</ul>

<p>
Korzyści:
</p>

<ul>
  <li>Pozwala na buforowanie (cache) plików, co zwiększa wydajność sieci.</li>
  <li>Dokładnie loguje wszystkie połączenia.</li>
  <li>Dobrze się skaluje (niektóre proxy mogą współdzielić buforowane dane)</li>
  <li>Uniemożliwia bezpośredni dostęp z zewnątrz.</li>
  <li>Może "w locie" zmieniać zawartość pakietu.</li>
</ul>

<p>
Wady:
</p>

<ul>
  <li>Skomplikowany proces konfiguracji.</li>
</ul>

<p>
Bramy aplikacyjne to najlepszy sposób zabezpieczania sieci, ponieważ nie muszą
być uruchamiane z przywilejami roota, oraz uniemożliwiają bezpośredni dostęp z
Internetu do komputerów w sieci.
</p>

<p>
Przykład darmowej bramy aplikacyjnej:
</p>

<ul>
<li><uri link="http://www.squid-cache.org/">Squid</uri></li>
</ul>

</body>
</section>
<section>
<title>Iptables</title>
<body>

<p>
Korzystanie z iptables jest możliwe tylko wtedy gdy włączy się ich obsługę w
jądrze. Zwykle całość kompiluje się jako moduły, a polecenie <c>iptables</c> w
razie potrzeby ładuje te z nich, które są mu potrzebne. Jeśli jednak zgodnie z
poprzednimi sugestiami zrezygnowano z włączania opcji Loadable Kernel Modules
można spokojnie wkompilować wszystko na stałe. Więcej informacji na temat tego
jak skonfigurować jądro przed użyciem iptables znajduje się w dokumencie <uri
link="http://iptables-tutorial.frozentux.net/chunkyhtml/kernelsetup.html">Iptables
Tutorial Chapter 2: Preparations</uri>. Po skompilowaniu jądra z odpowiednimi
opcjami (lub jeszcze w trakcie jego kompilowania) należy zainstalować program
iptables przy pomocy polecenia <c>emerge iptables</c>.
</p>

<p>
Test czy program działa prawidłowo wykonuje się wpisując polecenie <c>iptables
-L</c>. Jeśli się nie uda to znaczy, że coś poszło nie tak i należy sprawdzić
swoją konfigurację.
</p>

<p>
Iptables to filtr pakietów, który wprowadzono do jądra Linuksa w serii 2.4.x.
Jednym z głównych usprawnień w stosunku do poprzedniej wersji (ipchains), było
dodanie dynamicznego filtrowania pakietów (stateful packet filtering). Dzięki
dynamicznemu filtrowaniu pakietów możliwe jest śledzenie każdego nawiązanego
połączenia TCP.
</p>

<p>
Każde połączenie TCP składa się z serii pakietów zawierających informacje o
źródłowym i docelowym adresie IP, źródłowym i docelowym porcie oraz numerach
porządkowych, tak aby mogły być bez utraty danych sortowane po odebraniu. TCP
to protokół połączeniowy, w przeciwieństwie do np. protokołu UDP.
</p>

<p>
Dzięki analizie nagłówka pakietu TCP dynamiczny filtr pakietów jest w stanie
ustalić czy otrzymany pakiet TCP jest częścią już nawiązanego połączenia oraz
zdecydować jak z nim postąpić, czyli czy go zaakceptować, czy odrzucić.
</p>

<p>
Tradycyjny filtr pakietów można poprzez manipulowanie nagłówkami oszukać tak
żeby akceptował pakiety, które powinien upuścić. Można tego dokonać poprzez
manipulowanie flagami (zwłaszcza SYN) w nagłówkach pakietów TCP, tak by
stworzyć złudzenie, że sfałszowany pakiet jest częścią już nawiązanego
połączenia. Dzieje się tak ponieważ ten przestarzały sposób filtrowania nie daje
możliwości śledzenia połączeń. Filtrowanie dynamiczne daje możliwość wykrycia
takich pakietów i ich upuszczenia. Spowoduje ono również, że wszystkie
próby "niewidocznych" skanowań (stealth scans) będą nieudane. Niewidoczne
skanowanie to takie, które polega na wysłaniu przez skaner portów do
skanowanego komputera serii pakietów z tak ustawionymi flagami, że szansa na ich
zapisanie w logach jest mniejsza niż w przypadku zwykłych pakietów z flagą SYN.
</p>

<p>
Ponadto iptables posiada kilka innych bardzo użytecznych narzędzi, jak np. NAT
(Network Adress Translation) czy limitowanie prędkości transmisji. To drugie
jest szczególnie przydatne do zapobiegania atakom typu DoS (Denial of Service)
typu SYN flood.
</p>

<p>
Połączenie TCP jest nawiązywane przez tak zwane potrójne uściśnięcie ręki.
Podczas nawiązywania połączenia klient wysyła do serwera pakiet z ustawioną
flagą SYN. Kiedy serwer otrzyma taki pakiet odpowiada na niego wysłaniem pakietu
SYN+ACK. Kiedy ten pakiet dotrze do klienta odpowiada on trzecim pakietem, ACK,
którym potwierdza nawiązanie połączenia.
</p>

<p>
Atak typu SYN flood polega na wysłaniu pakietu typu SYN i nie odpowiadaniu na
pakiety SYN+ACK. Najczęściej wysyłane są pakiety ze sfałszowanym źródłowym
adresem IP, ponieważ atakujący i tak nie oczekuje na nie odpowiedzi. Serwer po
otrzymaniu każdego pakietu SYN dodaje odpowiedni wpis do kolejki pół-otwartych
połączeń i rozpoczyna oczekiwanie na pakiet ACK. Ponieważ ilość miejsc w kolejce
jest ograniczona możliwe jest jej przepełnienie i w konsekwencji uniemożliwienie
nawiązywania przez komputer zwykłych połączeń. Jeśli pakiet ACK nie przyjdzie po
określonym okresie czasu wpis zostaje automatycznie usunięty z kolejki. Ten
okres czasu zależy od atakowanego komputera, ale zwykle waha się pomiędzy 30 i
60 sekundami. Klient rozpoczyna atak przez wysłanie serii pakietów SYN z różnymi
źródłowymi adresami IP i wysyła kolejne tak szybko i często jak to tylko
możliwe, czym wypełnia kolejkę pół-otwartych połączeń i uniemożliwia innym
klientom nawiązania połączenia z atakowanym komputerem.
</p>

<p>
I tu właśnie przydaje się limitowanie prędkości transmisji. Dzięki opcjom <c>-m
limit --limit 1/s</c> można regulować ilość przyjmowanych pakietów
SYN. Dzięki temu możliwe jest ograniczenie ilości pakietów SYN przyjmowanych w
ciągu każdej sekundy co udaremnia wszystkie ataki typu SYN flood.
</p>

<note>
Inną metodą zapobiegania atakom typu SYN flood są <uri link
="http://cr.yp.to/syncookies.html">SYN cookies</uri>, które pozwalają
komputerowi na odpowiadanie na pakiety SYN bez zapełniania miejsca w kolejce
połączeń. SYN cookies są już częścią jądra Linux i można z nich korzystać
poprzez zaznaczenie w jego konfiguracji odpowiednich opcji, wciąż jest to jednak
mocno eksperymentalny projekt.
</note>

<p>
A teraz pora na odrobinę praktyki.
</p>

<p>
Kiedy iptables zostaną załadowane do jądra powstanie 5 "zaczepów", na których
można umieścić reguły. Ich nazwy to <c>INPUT</c>, <c>OUTPUT</c>, <c>FORWARD</c>,
<c>PREROUTING</c> i <c>POSTROUTING</c>. Każdy z nich nazywany jest łańcuchem i
składa się listy reguł. Każda z nich mówi o tym jak ma postępować firewall w
przypadku otrzymania pakietu z określonym nagłówkiem. Jeśli pakiet nie pasuje do
żadnej z reguł jest traktowany zgodnie z polityką określoną dla całego łańcucha,
do którego trafił.
</p>

<p>
Własne reguły można umieszczać bezpośrednio w jednym z 5 głównych łańcuchów,
bądź też dodać własne łańcuchy do któregoś z nich i dopiero w nich umieścić
określone reguły. Iptables posiadają następujące opcje:
</p>

<table>

<tr>
  <th>Opcja:</th>
  <th>Opis:</th>
</tr>
<tr>
  <ti>-A</ti>
  <ti>Dodaj</ti>
</tr>
<tr>
  <ti>-D</ti>
  <ti>Usuń</ti>
</tr>
<tr>
  <ti>-I</ti>
  <ti>Umieść w określonym miejscu</ti>
</tr>
<tr>
  <ti>-R</ti>
  <ti>Zamień</ti>
</tr>
<tr>
  <ti>-L</ti>
  <ti>Pokaż listę</ti>
</tr>
<tr>
  <ti>-F</ti>
  <ti>Usuń wszystkie reguły z łańcucha</ti>
</tr>
<tr>
  <ti>-Z</ti>
  <ti>Wyzeruj liczniki łańcucha</ti>
</tr>
<tr>
  <ti>-C</ti>
  <ti>Sprawdź pakiet w łańcuchu</ti>
</tr>
<tr>
  <ti>-N</ti>
  <ti>Utwórz nowy, zdefiniowany przez użytkownika łańcuch</ti>
</tr>
<tr>
  <ti>-X</ti>
  <ti>Usuń zdefiniowany przez użytkownika łańcuch</ti>
</tr>
<tr>
  <ti>-P</ti>
  <ti>Zmień politykę łańcucha</ti>
</tr>
<tr>
 <ti>-E</ti>
  <ti>Zmień nazwę łańcucha</ti>
</tr>
<tr>
  <ti>-p</ti>
  <ti>Protokół</ti>
</tr>
<tr>
  <ti>-s</ti>
  <ti>Źródłowy adres/maska</ti>
</tr>
<tr>
  <ti>-d</ti>
  <ti>Docelowy adres/maska</ti>
</tr>
<tr>
  <ti>-i</ti>
  <ti>Interfejs, na którym pakiet został przyjęty</ti>
</tr>
<tr>
  <ti>-o</ti>
  <ti>Interfejs, przez który pakiet zostanie wysłany</ti>
</tr>
<tr>
  <ti>-j</ti>
  <ti>Cel</ti>
</tr>
<tr>
  <ti>-m</ti>
  <ti>Rozszerzone dopasowanie, przez podanie tekstu</ti>
</tr>
<tr>
  <ti>-n</ti>
  <ti>Numeryczne wynikowe adresy i porty</ti>
</tr>
<tr>
  <ti>-t</ti>
  <ti>Tabela do manipulowania</ti>
</tr>
<tr>
  <ti>-v</ti>
  <ti>Tryb szczegółowy</ti>
</tr>
<tr>
  <ti>-x</ti>
  <ti>Rozszerzanie numerów (podaje dokładne wartości)</ti>
</tr>
<tr>
  <ti>-f</ti>
<ti>Dopasuj drugie i dalsze fragmenty</ti>
</tr>
<tr>
  <ti>-V</ti>
  <ti>Wersja pakietu</ti>
</tr>
<tr>
  <ti>--line-numbers</ti>
  <ti>Wyświetla numery linii na liście</ti>
</tr>
</table>

<p>
Zaczniemy od prostego przykładu upuszczania wszystkich pakietów ICMP
przychodzących do naszego komputera.
</p>

<pre caption="Upuszczanie pakietów ICMP">
# <i>iptables -A INPUT -p icmp -j DROP</i>
</pre>

<p>
Na pierwszym miejscu podajemy łańcuch, do którego chcemy dopisać regułę,
następnie protokół, do którego należą pakiety, a wreszcie cel. Celem może być
nazwa zdefiniowanego przez użytkownika łańcucha, lub jedno ze specjalnych
wyrażeń: <c>ACCEPT</c>, <c>DROP</c>, <c>REJECT</c>, <c>LOG</c>, <c>QUEUE</c>,
lub <c>MASQUERADE</c>.
</p>

<note>
Cel <c>LOG</c> nie jest celem ostatecznym. Pakiet pasujący do reguły z takim
celem zostanie również przetestowany pod kątem przynależności do innych reguł.
Umożliwia to jednoczesne logowanie i przetwarzanie pakietów.
</note>

<p>
Sprawdzimy teraz skutki naszych działań. Wpisujemy polecenie <c>ping
localhost</c> i czekamy na odpowiedź. Nie powinniśmy jej otrzymać
ponieważ wszystkie pakiety ICMP przychodzące do naszego komputera są upuszczane.
Uniemożliwiliśmy sobie również pingowanie innych komputerów, ponieważ także
pakiety ICMP z odpowiedziami na nasze zapytania będą przez nasz firewall
upuszczane. Wyczyśćmy teraz wszystkie regułki i pozwólmy na swobodny przepływ
pakietów ICMP.
</p>

<pre caption="Czyszczenie wszystkich reguł">
# <i>iptables -F</i>
</pre>

<p>
Przyjrzyjmy się dynamicznemu filtrowaniu pakietów w iptables. Jeśli chcemy
włączyć dynamiczny nadzór nad pakietami przychodzącymi na interfejs eth0 musimy
ustalić następującą regułę:
</p>

<pre caption="Akceptowanie pakietów należących do już nawiązanego połączenia">
# <i>iptables -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</i>
</pre>

<p>
Wprowadzenie takiej reguły skutkuje akceptowaniem wszystkich przychodzących
pakietów, które należą do już nawiązanych połączeń lub są z nimi
powiązane. Jeśli przed dodaniem tej reguły wpiszemy dodatkowo polecenie
<c>iptables
-A INPUT -i eth0 -m state --state INVALID -j DROP</c> załadujemy rozszerzenie
"state", dzięki któremu będziemy mieli możliwość upuszczania każdego pakietu,
którego brakuje w tabeli stanu. Aby umożliwić innym łączenie się z naszym
komputerem możemy użyć flagi <c>--state NEW</c>. Iptables zawiera całą serię
modułów o różnym przeznaczeniu, niektóre z nich to:
</p>

<table>
<tr>
  <th>Rozszerzenie/Test</th>
  <th>Opis</th>
  <th>Rozszerzone opcje</th>
</tr>
<tr>
  <ti>mac</ti>
  <ti>Test polegający na sprawdzaniu źródłowego adresu mac.</ti>
  <ti>--mac-source</ti>
</tr>
<tr>
  <ti>state</ti>
  <ti>Test stanu</ti>
  <ti>--state (stany to ESTABLISHED, RELATED, INVALID, NEW)</ti>
</tr>
<tr>
  <ti>limit</ti>
  <ti>Ograniczenie częstotliwości pasowania reguły</ti>
  <ti>--limit, --limit-burst</ti>
</tr>
<tr>
  <ti>owner</ti>
  <ti>Próba sprawdzenia pewnych charakterystyk twórcy pakietu</ti>
  <ti>
    --uid-owner userid --gid-owner groupid --pid-owner processid --sid-owner
    sessionid
  </ti>
</tr>
<tr>
  <ti>unclean</ti>
  <ti>Wykonuje różne losowe testy sprawdzające na pakiecie.</ti><ti></ti>
</tr>
</table>

<p>
Następne ćwiczenie będzie polegało na utworzeniu własnego łańcucha i przypisaniu
go do jednego z już instniejących głównych łańcuchów.
</p>

<pre caption="Definiowanie własnego łańcucha">
<comment>(Tworzymy nowy łańcuch z jedną regułą)</comment>
# <i>iptables -X mychain</i>
# <i>iptables -N mychain</i>
# <i>iptables -A mychain -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</i>
<comment>(Domyślna polityka polega na przepuszczaniu całego wychodzącego ruchu. Ruch przychodzący będzie upuszczany.</comment>
# <i>iptables -P OUTPUT ACCEPT</i>
# <i>iptables -P INPUT DROP</i>
<comment>(Cały przychodzący ruch przekierowujemy do naszego łańcucha)</comment>
# <i>iptables -A INPUT -j mychain</i>
</pre>

<p>
Dzięki dodaniu tych reguł zmienimy naszą politykę na następującą: wszystkie
wychodzące pakiety będą przepuszczane, a pakiety przychodzące upuszczane.
</p>

<p>
Więcej informacji można znaleźć w <uri
link="http://www.iptables.org/documentation/index.html#HOWTO">dokumentacji
netfilter/iptables</uri>.
</p>

<p>
Pora na pełnowartościowy przykład. W tym przypadku zasady budowy naszego
firewalla są następujące:
</p>

<ul>
<li>Do firewalla można łączyć się tylko przez SSH (port 22).</li>
<li>Lokalna sieć powinna mieć dostęp do HTTP, HTTPS i SSH (pozwalamy również na
korzystanie z DNS).</li>
<li>Część ruchu ICMP jest niepożądana, bo może posiadać niechcianą przez nas
zawartość.</li>
<li>Wszystkie skanowania portów powinny zostać wykryte i zalogowane.</li>
<li>Należy uniemożliwić ataki typu SYN.</li>
<li>Cała reszta niechcianych połączeń powinna być upuszczana i logowana.</li>
</ul>

<pre caption="/etc/init.d/firewall">
#!/sbin/runscript
IPTABLES=/sbin/iptables
IPTABLESSAVE=/sbin/iptables-save
IPTABLESRESTORE=/sbin/iptables-restore
FIREWALL=/etc/firewall.rules
DNS1=212.242.40.3
DNS2=212.242.40.51
#inside
IIP=10.0.0.2
IINTERFACE=eth0
LOCAL_NETWORK=10.0.0.0/24
#outside
OIP=217.157.156.144
OINTERFACE=eth1

opts="${opts} showstatus panic save restore showoptions rules"

depend() {
  need net
}

rules() {
  stop
  ebegin "Setting internal rules"

  einfo "Setting default rule to drop"
  $IPTABLES -P FORWARD DROP
  $IPTABLES -P INPUT   DROP
  $IPTABLES -P OUTPUT  DROP

  #default rule
  einfo "Creating states chain"
  $IPTABLES -N allowed-connection
  $IPTABLES -F allowed-connection
  $IPTABLES -A allowed-connection -m state --state ESTABLISHED,RELATED -j ACCEPT
  $IPTABLES -A allowed-connection -i $IINTERFACE -m limit -j LOG --log-prefix \ 
      "Bad packet from ${IINTERFACE}:"
  $IPTABLES -A allowed-connection -j DROP

  #ICMP traffic
  einfo "Creating icmp chain"
  $IPTABLES -N icmp_allowed
  $IPTABLES -F icmp_allowed
  $IPTABLES -A icmp_allowed -m state --state NEW -p icmp --icmp-type \ 
      time-exceeded -j ACCEPT
  $IPTABLES -A icmp_allowed -m state --state NEW -p icmp --icmp-type \ 
      destination-unreachable -j ACCEPT
  $IPTABLES -A icmp_allowed -p icmp -j LOG --log-prefix "Bad ICMP traffic:"
  $IPTABLES -A icmp_allowed -p icmp -j DROP

  #Incoming traffic
  einfo "Creating incoming ssh traffic chain"
  $IPTABLES -N allow-ssh-traffic-in
  $IPTABLES -F allow-ssh-traffic-in
  #Flood protection
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \ 
      ALL RST --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \ 
      ALL FIN --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \ 
      ALL SYN --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m state --state RELATED,ESTABLISHED -p tcp --dport ssh -j ACCEPT

  #outgoing traffic
  einfo "Creating outgoing ssh traffic chain"
  $IPTABLES -N allow-ssh-traffic-out
  $IPTABLES -F allow-ssh-traffic-out
  $IPTABLES -A allow-ssh-traffic-out -p tcp --dport ssh -j ACCEPT

  einfo "Creating outgoing dns traffic chain"
  $IPTABLES -N allow-dns-traffic-out
  $IPTABLES -F allow-dns-traffic-out
  $IPTABLES -A allow-dns-traffic-out -p udp -d $DNS1 --dport domain \ 
      -j ACCEPT
  $IPTABLES -A allow-dns-traffic-out -p udp -d $DNS2 --dport domain \ 
     -j ACCEPT

  einfo "Creating outgoing http/https traffic chain"
  $IPTABLES -N allow-www-traffic-out
  $IPTABLES -F allow-www-traffic-out
  $IPTABLES -A allow-www-traffic-out -p tcp --dport www -j ACCEPT
  $IPTABLES -A allow-www-traffic-out -p tcp --dport https -j ACCEPT

  #Catch portscanners
  einfo "Creating portscan detection chain"
  $IPTABLES -N check-flags
  $IPTABLES -F check-flags
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL FIN,URG,PSH -m limit \ 
      --limit 5/minute -j LOG --log-level alert --log-prefix "NMAP-XMAS:" 
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL ALL -m limit --limit \ 
      5/minute -j LOG --log-level 1 --log-prefix "XMAS:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL ALL -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG \ 
      -m limit --limit 5/minute -j LOG --log-level 1 --log-prefix "XMAS-PSH:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL NONE -m limit \ 
      --limit 5/minute -j LOG --log-level 1 --log-prefix "NULL_SCAN:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL NONE -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,RST SYN,RST -m limit \ 
      --limit 5/minute -j LOG --log-level 5 --log-prefix "SYN/RST:"
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit \ 
      --limit 5/minute -j LOG --log-level 5 --log-prefix "SYN/FIN:"
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

  # Apply and add invalid states to the chains
  einfo "Applying chains to INPUT"
  $IPTABLES -A INPUT -m state --state INVALID -j DROP
  $IPTABLES -A INPUT -j icmp_allowed 
  $IPTABLES -A INPUT -j check-flags
  $IPTABLES -A INPUT -i lo -j ACCEPT
  $IPTABLES -A INPUT -j allow-ssh-traffic-in
  $IPTABLES -A INPUT -j allowed-connection

  einfo "Applying chains to FORWARD"
  $IPTABLES -A FORWARD -m state --state INVALID -j DROP
  $IPTABLES -A FORWARD -j icmp_allowed 
  $IPTABLES -A FORWARD -j check-flags
  $IPTABLES -A FORWARD -o lo -j ACCEPT
  $IPTABLES -A FORWARD -j allow-ssh-traffic-in
  $IPTABLES -A FORWARD -j allow-www-traffic-out
  $IPTABLES -A FORWARD -j allowed-connection

  einfo "Applying chains to OUTPUT"
  $IPTABLES -A OUTPUT -m state --state INVALID -j DROP
  $IPTABLES -A OUTPUT -j icmp_allowed
  $IPTABLES -A OUTPUT -j check-flags
  $IPTABLES -A OUTPUT -o lo -j ACCEPT
  $IPTABLES -A OUTPUT -j allow-ssh-traffic-out
  $IPTABLES -A OUTPUT -j allow-dns-traffic-out
  $IPTABLES -A OUTPUT -j allow-www-traffic-out
  $IPTABLES -A OUTPUT -j allowed-connection

  #Allow client to route through via NAT (Network Address Translation)
  $IPTABLES -t nat -A POSTROUTING -o $IINTERFACE -j MASQUERADE 
  eend $?
}

start() {
  ebegin "Starting firewall"
  if [ -e "${FIREWALL}" ]; then
    restore
  else
    einfo "${FIREWALL} does not exists. Using default rules."
    rules
  fi
  eend $?
}

stop() {
  ebegin "Stopping firewall"
  $IPTABLES -F
  $IPTABLES -t nat -F
  $IPTABLES -X
  $IPTABLES -P FORWARD ACCEPT
  $IPTABLES -P INPUT   ACCEPT
  $IPTABLES -P OUTPUT  ACCEPT
  eend $?
}

showstatus() {
  ebegin "Status"
  $IPTABLES -L -n -v --line-numbers
  einfo "NAT status"
  $IPTABLES -L -n -v --line-numbers -t nat
  eend $?
}

panic() {
  ebegin "Setting panic rules"
  $IPTABLES -F
  $IPTABLES -X
  $IPTABLES -t nat -F
  $IPTABLES -P FORWARD DROP
  $IPTABLES -P INPUT   DROP
  $IPTABLES -P OUTPUT  DROP
  $IPTABLES -A INPUT -i lo -j ACCEPT
  $IPTABLES -A OUTPUT -o lo -j ACCEPT
  eend $?
}

save() {
  ebegin "Saving Firewall rules"
  $IPTABLESSAVE &gt; $FIREWALL
  eend $?
}

restore() {
  ebegin "Restoring Firewall rules"
  $IPTABLESRESTORE &lt; $FIREWALL
  eend $?
}

restart() {
  svc_stop; svc_start
}

showoptions() {
  echo "Usage: $0 {start|save|restore|panic|stop|restart|showstatus}"
  echo "start)      will restore setting if exists else force rules"
  echo "stop)       delete all rules and set all to accept"
  echo "rules)      force settings of new rules"
  echo "save)       will store settings in ${FIREWALL}"
  echo "restore)    will restore settings from ${FIREWALL}"
  echo "showstatus) Shows the status" 
}
</pre>

<p>
Kilka rad dotyczących tworzenia firewalli:
</p>

<ol>
<li>Warto spisać zasady firewalla zanim przystąpi się do ich implementowania.</li>
<li>Nie warto nadmiernie komplikować zestawu reguł.</li>
<li>Należy poznać podstawy pracy każdego z protokołów, np. poprzez przeczytanie
odpowiednich <uri link="http://www.ietf.org/">RFC</uri>.</li>
<li>Należy pamiętać, że firewall jest kolejnym programem uruchamianym z przywilejami
roota.</li>
<li>Warto przetestować firewall zanim na dobre zacznie się go używać.</li>
</ol>

<p>
W przypadku, gdy iptables wydają się zbyt skomplikowane aby je zrozumieć, lub
też ich skonfigurowanie zajmowałoby zbyt dużo czasu można skorzystać z programu
<uri link="http://www.shorewall.net">Shorewall</uri>. Jest to prosty w
konfiguracji firewall zabezpieczający komputer przy pomocy iptables.
</p>

</body>
</section>
<section>
<title>Squid</title>
<body>

<p>
Squid to doskonały serwer proxy, dzięki któremu możemy filtrować ruch sieciowy w
oparciu o czas, wyrażenia regularne, źródłowy lub docelowy adres IP, domenę,
przeglądarkę, uwierzytelniane konta użytkowników, typ MIME, oraz numer portu
(wraz z protokołem).
</p> 

<p>
W poniższym przykładzie opisuję odfiltrowywanie bannerów zamiast filtrowania
treści pornograficznych. Robię tak ponieważ chcę uniknąć sytuacji, że Gentoo.org
zostanie zaindeksowane jako strona zawierająca treści porno, a poza tym nie mam
czasu na szukanie dla was ciekawych stron.
</p>

<p>
Moja zasady wyglądają następująco:
</p>

<ul>
<li>Na surfowanie w Internecie (HTTP/HTTPS) zezwalamy jedynie w godzinach pracy
(poniedziałek-piątek 8-17, soboty 8-13). Jeśli pracownicy zostają po godzinach
powinni zajmować się pracą, a nie chodzeniem po Internecie.</li>
<li>Pobieranie plików nie jest dozwolone (żadych .exe, .com, .arj, .zip, .asf, .avi,
.mpg, .mpeg, etc)</li>
<li>Nie lubimy bannerów, więc będą one odfiltrowywane i zastępowane przezroczystym
gifem. (i to jest to miejsce, w którym trzeba uruchomić wyobraźnię...)</li>
<li>Wszystkie inne połączenie do i z Internetu są zabronione.</li>

</ul>

<p>
Proces implementowania tych reguł składa się z 4 <e>prostych</e> kroków.
</p>

<pre caption="/etc/squid/squid.conf">
# Bind to a ip and port
http_port 10.0.2.1:3128

# Standard configuration
hierarchy_stoplist cgi-bin ?
acl QUERY urlpath_regex cgi-bin \?
no_cache deny QUERY

# Add basic access control lists
acl all src 0.0.0.0/0.0.0.0
acl manager proto cache_object
acl localhost src 127.0.0.1/255.255.255.255

# Add who can access this proxy server
acl localnet src 10.0.0.0/255.255.0.0

# And ports
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 443
acl purge method PURGE

# Add access control list based on regular
# expressions within urls
acl archives urlpath_regex "/etc/squid/files.acl"
acl url_ads url_regex "/etc/squid/banner-ads.acl"

# Add access control list based on time and day
acl restricted_weekdays time MTWHF 8:00-17:00
acl restricted_weekends time A 8:00-13:00

acl CONNECT method CONNECT

#allow manager access from localhost
http_access allow manager localhost
http_access deny manager

# Only allow purge requests from localhost
http_access allow purge localhost
http_access deny purge

# Deny requests to unknown ports
http_access deny !Safe_ports

# Deny CONNECT to other than SSL ports
http_access deny CONNECT !SSL_ports

# My own rules

# Add a page do be displayed when
# a banner is removed
deny_info NOTE_ADS_FILTERED url_ads

# Then deny them
http_access deny url_ads

# Deny all archives
http_access deny archives

# Restrict access to work hours
http_access allow localnet restricted_weekdays
http_access allow localnet restricted_weekends

# Deny the rest
http_access deny all
</pre>

<p>
Następnie wypełniamy listę plików, na których pobieranie nie pozwalamy naszym
użytkownikom. Na liście są pliki zip, viv, exe, mp3, rar, ace, avi, mov, mpg,
mpeg, au, ra, arj, tar, gz i z.
</p>

<pre caption="/etc/squid/files.acl">
\.[Zz][Ii][pP]$
\.[Vv][Ii][Vv].*
\.[Ee][Xx][Ee]$
\.[Mm][Pp]3$
\.[Rr][Aa][Rr]$
\.[Aa][Cc][Ee]$
\.[Aa][Ss][Ff]$
\.[Aa][Vv][Ii]$
\.[Mm][Oo][Vv]$
\.[Mm][Pp][Gg]$
\.[Mm][Pp][Ee][Gg]$
\.[Aa][Uu]$
\.[Rr][Aa]$
\.[Aa][Rr][Jj]$
\.[Tt][Aa][Rr]$
\.[Gg][Zz]$
\.[Zz]$
</pre>

<note>
Warto zwrócić uwagę na nawiasy [] zawierające małą i dużą literę. Dzięki
temu nikt nie oszuka naszego filtra poprzez wpisanie rozszerzenia pliku w wersji
AvI zamiast avi.
</note>

<p>
Następnie dodamy wyrażenia regularne dzięki którym będziemy identyfikować
bannery. Spodziewam się, że okażecie się tu znacznie bardziej kreatywni niż ja.
</p>

<pre caption="/etc/squid/banner-ads.acl">
/adv/.*\.gif$
/[Aa]ds/.*\.gif$
/[Aa]d[Pp]ix/
/[Aa]d[Ss]erver
/[Aa][Dd]/.*\.[GgJj][IiPp][FfGg]$
/[Bb]annerads/
/adbanner.*\.[GgJj][IiPp][FfGg]$
/images/ad/
/reklame/
/RealMedia/ads/.*
^http://www\.submit-it.*
^http://www\.eads.*
^http://ads\.
^http://ad\.
^http://ads02\.
^http://adaver.*\.
^http://adforce\.
adbot\.com
/ads/.*\.gif.*
_ad\..*cgi
/Banners/
/SmartBanner/
/Ads/Media/Images/
^http://static\.wired\.com/advertising/
^http://*\.dejanews\.com/ads/
^http://adfu\.blockstackers\.com/
^http://ads2\.zdnet\.com/adverts
^http://www2\.burstnet\.com/gifs/
^http://www.\.valueclick\.com/cgi-bin/cycle
^http://www\.altavista\.com/av/gifs/ie_horiz\.gif
</pre>

<p>
Ostatnią częścią całego procesu konfigurowania serwera proxy jest przygotowanie
pliku, który będzie wyświetlany zamiast usuniętego bannera. Jest to prosty plik
html zawierający plik gif o rozmiarach 4x4.
</p>

<pre caption="/etc/squid/errors/NOTE_ADS_FILTERED">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META HTTP-EQUIV="REFRESH" CONTENT="0; URL=http://localhost/images/4x4.gif"&gt;
&lt;TITLE>ERROR: The requested URL could not be retrieved&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Add filtered!&lt;/H1&gt;
</pre>

<note>
Nie należy zamykać tagów &lt;HTML&gt; &lt;BODY&gt;. Squid zrobi to za nas.
</note>

<p>
Jak widać Squid posiada bardzo szerokie możliwości i jest bardzo efektywny
zarówno jako filtr treści jak i serwer proxy. W dużych sieciach może z
łatwością współpracować z innymi serwerami proxy. Moja konfiguracja najlepiej
funkcjonuje w małych sieciach, składających się z góra 20 użytkowników.
</p>

<p>
Polecam używanie filtra pakietów (iptables) wraz z bramą aplikacyjną (Squid)
nawet jeśli serwer proxy znajduje się w bezpiecznym miejscu i nikt z zewnątrz
nie ma do niego dostępu. Zawsze istnieje możliwość ataku od wewnątrz.
</p>

<p>
Ostatnia kwestia to odpowiednie skonfigurowanie przeglądarek użytkowników, tak
aby korzystały z naszego serwera proxy. Brama uniemożliwi użytkownikom
jakikolwiek kontakt ze światem zewnętrzym sposobami innymi niż przez serwer
proxy.
</p>

<note>
W Mozilli dokonuje się tego w menu Edit->Preferences->Advanced->Proxies.
</note>

<p>
Można to również robić w sposób niewidoczny dla użytkownika (transparentny)
poprzez przekazanie przy pomocy iptables całego wychodzącego ruchu do serwera
proxy. Można tego dokonać poprzez dodanie do łańcuchów forwarding/prerouting
następującej reguły:
</p>

<pre caption="Konfigurowanie przekazywania portów do serwera proxy">
# <i>iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to proxyhost:3128</i>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to proxyhost:3128</i>
</pre>

<note>
Jeśli proxy działa na tym samym komputerze co filtr pakietów (nie polecamy
takiego rozwiązania, ale czasem z braku dodatkowych komputerów jest to
konieczne)
należy użyć celu <c>REDIRECT</c> zamiast <c>DNAT</c> (<c>REDIRECT</c> kieruje
ruch na localhost).
</note>

</body>
</section>
<section>
<title>Czego się nauczyliśmy?</title>
<body>

<p>
Nauczyliśmy się, że:
</p>

<ol>
<li>Zaimplementowanie firewalla może się wiązać z pewnym ryzykiem. Posiadanie źle
skonfigurowanego firewalla jest gorsze niż nie posiadanie go w ogóle.</li>
<li>Nauczyliśmy się konfigurowania transparentnego proxy.</li>
<li>Dowiedzieliśmy się, że warunkiem budowy solidnego firewalla jest dobra znajomość
protokołów sieciowych.</li>
<li>Wiemy, że ruch IP nie zawsze zawiera pożądane dane, np. pakiety ICMP mogą
zawierać szkodliwe informacje.</li>
<li>Umiemy zapobiegać atakom typu SYN.</li>
<li>Wiemy jak filtrować ruch HTTP, tak aby uniemożliwić pobieranie wirusów i
niestosownych treści.</li>
<li>Umiemy połączyć filtr pakietów z bramą aplikacyjną co zapewnia nam lepszą
kontrolę nad naszą siecią.</li>
</ol>

<p>
Teraz, pod warunkiem, że jest to<e>naprawdę</e> niezbędne, należy przystąpić do
konfigurowania własnego, dostosowanego do indywidualnych potrzeb firewalla.
</p>

</body>
</section>

</sections>
