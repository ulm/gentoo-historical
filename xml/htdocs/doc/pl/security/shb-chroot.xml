<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/security/shb-chroot.xml,v 1.3 2005/06/27 10:08:28 neysx Exp $ -->

<!-- Orig revision: 1.1 -->
<!-- Translator: rane <rane@gentoo.pl> -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<sections>

<version>1.0</version>
<date>2005-05-31</date>

<section>
<title>Chrootowanie</title>
<body>

<p>
Zamknięcie usługi (użytkownika) w chroocie uniemożliwi dostęp do plików
i informacji, do których dostępu mieć nie powinna oraz zamknie wiele z
możliwości uzyskania dostępu do konta roota tą drogą. Ponadto uruchomienie
usługi z konta użytkownika innego niż root (np. <c>nobody</c>, <c>apache</c>,
<c>named</c>) ograniczy włamywaczom dostęp, pozostawiając im do dyspozycji tylko
pliki przypisane do tych kont. Takie postępowanie uniemożliwi także
nieautoryzowany dostęp do konta w przypadku błędu związanego z bezpieczeństwem w
którejś z usług.
</p>

<p>
Niektóre usługi, takie jak np. <c>pure-ftpd</c> i <c>bind</c> posiadają
wbudowane możliwości zamykania się w chroocie. Jeśli jednak nie ma
takiej możliwości należy dokonać tego ręcznie. Oto prosty przykład tworzenia
środowiska chroot. Dla uproszczenia przetestujemy je przy pomocy <c>basha</c>.
</p>

<p>
Na początek tworzymy katalog <path>/chroot</path> przy pomocy polecenia <c>mkdir
chroot</c> oraz wyszukujemy wszystkie biblioteki, z którymi bash jest
dynamicznie zlinkowany (jeśli skompilowano go z opcją <c>-static</c> można
pominąć ten krok).
</p>

<p>
Listę bibliotek używanych przez <c>bash</c> uzyskamy dzięki poleceniu:
</p>

<pre caption="Uzyskiwanie listy używanych bibliotek">
# <i>ldd /bin/bash</i>
  libncurses.so.5 => /lib/libncurses.so.5 (0x4001b000)
  libdl.so.2 => /lib/libdl.so.2 (0x40060000)
  libc.so.6 => /lib/libc.so.6 (0x40063000)
  /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
</pre>

<p>
Następnie tworzymy środowisko dla <c>basha</c>.
</p>

<pre caption="Tworzenie środowiska chroot dla basha">
# <i>mkdir /chroot/bash</i>
# <i>mkdir /chroot/bash/bin</i>
# <i>mkdir /chroot/bash/lib</i>
</pre>

<p>
Później kopiujemy pliki używane przez <c>bash</c> (<path>/lib</path>) do
katalogu <path>lib</path> w chroocie oraz plik binarny bash do nowego
<path>bin</path>. Spowoduje to utworzenie kopii naszego środowiska, posiadającej
jednak nieco mniej możliwości. Po utworzeniu warto je wypróbować poleceniem
<c>chroot /chroot/bash /bin/bash</c>. Jeśli pokaże się znak zachęty w postaci
<path>/</path> to znaczy, że wszystko działa prawidłowo. W przeciwnym wypadku
zostaniemy poinformowani o braku pewnych plików. Niektóre współdzielone
biblioteki są wzajemnie od siebie zależne.
</p>

<p>
Łatwo zauważyć, że wewnątrz chroota nie działa nic poza <c>echo</c>.
Spowodowane jest to tym, że w naszym nowym środowisku jedynym dostępnym
poleceniem jest bash, a echo jest jego wbudowaną funkcją.
</p>

<p>
Zamykanie usług w chroocie wygląda bardzo podobnie. Jedyną różnicą jest
to, że usługom potrzebne są czasem urządzenia i pliki konfiguracyjne z
<path>/etc</path>. Należy je więc po prostu skopiować do nowego środowiska
(urządzenia kopiuje się poleceniem <c>cp -a</c>), należy również odpowiednio
edytować skrypt startowy zanim skorzysta się z nowego środowiska. Czasem ciężko
znaleźć wszystkie urządzenia i pliki jakich wymaga dana usługa, wtedy bardzo
przydatny jest program <c>strace</c>. Uruchamiamy usługę poprzez
<c>/usr/bin/strace</c> i szukamy wszystkich odwołań open, read, stat i connect.
Zwykle naprowadza to na ślad wszystkich plików i urządzeń, które należy
skopiować. W większości przypadków wystarczy skopiowanie pliku passwd (należy z
niego usunąć wszystkie linie dotyczące użytkowników nie mających nic wspólnego z
usługą), oraz <path>/dev/zero</path>, <path>/dev/log</path> i
<path>/dev/random</path>.
</p>

</body>
</section>
<section>
<title>User Mode Linux</title>
<body>

<p>
Kolejnym dobrym sposobem zabezpieczenia środowiska pracy jest uruchomienie
wirtualnej maszyny. Taka maszyna to proces działający jako nakładka na właściwy
system operacyjny, na który składa się drugi OS i pewna konfiguracja
urządzeń, tworząca złudzenie, że jest właściwym komputerem. Korzyści z punktu
widzenia zabezpieczeń systemu są takie, że w przypadku włamania zostanie
pokonana tylko wirtualna maszyna, a właściwy system operacyjny pozostanie
nienaruszony.
</p>

<p>
Więcej informacji o konfigurowaniu User Mode Linux znajduje się w <uri
link="/doc/pl/uml.xml">User Mode Linux
Guide</uri>.
</p>

</body>
</section>

</sections>
