<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/security/shb-intrusion.xml,v 1.2 2005/06/10 19:16:38 fox2mike Exp $ -->

<!-- Orig revision: 1.1 -->
<!-- Translator: rane <rane@gentoo.pl> -->
<!-- Title: Wykrywanie włamań -->
<!-- Status: Finished -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<sections>

<version>1.0</version>
<date>2005-05-31</date>

<section>
<title>AIDE (Advanced Intrusion Detection Environment)</title>
<body>

<p>
AIDE jest systemem wykrywania włamań będącym darmową alternatywą dla Tripwire
(osoby dobrze znające Tripwire nie powinny mieć żadnych problemów z konfiguracją
AIDE). Systemów HID używa się do wykrywania zmian w ważnych systemowych plikach
konfiguracyjnych i binarnych. Dokonuje się tego poprzez utworzenie i
zachowanie unikalnych hashy każdego z tych plików. Co jakiś czas, zwykle
codziennie, przechowywane w bezpiecznym miejscu hashe są porównywane z nowo
utworzonymi hashami odpowiednich plików, co umożliwia wykrycie dokonanych w
nich zmian. HIDS jest więc doskonałym sposobem wykrywania wszelkiej niepożądanej
aktywności w naszym systemie, a jego jedyną wadą jest to, że odpowiednie
zaimplementowanie takiego systemu wymaga trochę pracy.
</p>

<p>
Plik konfiguracyjny jest oparty na wyrażeniach regularnych, makrach i regułach
dla plików oraz katalogów. Mamy do dyspozycji następujące makra:
</p>

<table>
<tr>
  <th>Makro</th>
  <th>Opis</th>
  <th>Składnia</th>
</tr>
<tr>
  <ti>ifdef</ti>
  <ti>"Jeśli zdefiniowano"</ti>
  <ti>@@ifdef "nazwa"</ti>
</tr>
<tr>
  <ti>ifndef</ti>
  <ti>"Jeśli nie zdefiniowano..."</ti>
  <ti>@@ifndef "nazwa"</ti>
</tr>
<tr>
  <ti>define</ti>
  <ti>Definiuje zmienną</ti>
  <ti>@@define "zmienna" "wartość"</ti>
</tr>
<tr>
  <ti>undef</ti>
  <ti>Usuwa zmienną</ti>
  <ti>@@undef "nazwa"</ti>
</tr>
<tr>
  <ti>ifhost</ti>
  <ti>Jeśli "nazwa hosta"...</ti>
  <ti>@@ifhost "nazwa hosta"</ti>
</tr>
<tr>
  <ti>ifnhost</ti>
  <ti>Jeśli nazwa hosta różna od "nazwa hosta"...</ti>
  <ti>@@ifnhost "nazwa hosta"</ti>
</tr>
<tr>
  <ti>endif</ti>
<ti>
Endif używa się po każdym z powyżyszych makr, poza define i undef.
</ti>
<ti>@@endif</ti>
</tr>
</table>

<p>
Makra te są bardzo pomocne kiedy administruje się więcej niż jednym komputerem z
Gentoo i chce się używać AIDE na każdym z nich. Należy jednak zwrócić uwagę, że
nie wszystkie komputery posiadają te same usługi i identyczne konta
użytkowników.
</p>

<p>
Kolejny zestaw wyrażeń to flagi dla plików i katalogów, czyli kombinacja praw
dostępu, właściwości plików i hashy (sum kontrolnych).
</p>


<table>
<tr>
  <th>Flaga</th>
  <th>Opis</th>
</tr>
<tr>
  <ti>p</ti>
  <ti>prawa dostępu</ti>
</tr>
<tr>
  <ti>i</ti>
  <ti>inoda</ti>
</tr>
<tr>
  <ti>n</ti>
  <ti>liczba połączeń</ti>
</tr>
<tr>
  <ti>u</ti>
  <ti>użytkownik</ti>
</tr>
<tr>
  <ti>g</ti>
  <ti>grupa</ti>
</tr>
<tr>
  <ti>s</ti>
  <ti>rozmiar</ti>
</tr>
<tr>
  <ti>b</ti>
  <ti>ilość bloków</ti>
</tr>
<tr>
  <ti>m</ti>
  <ti>mtime</ti>
</tr>
<tr>
  <ti>a</ti>
  <ti>atime</ti>
</tr>
<tr>
  <ti>c</ti>
  <ti>ctime</ti>
</tr>
<tr>
  <ti>S</ti>
  <ti>sprawdza przyrost rozmiaru</ti>
</tr>
<tr>
  <ti>md5</ti>
  <ti>suma kontrolna md5</ti>
</tr>
<tr>
  <ti>sha1</ti>
  <ti>suma kontrolna sha1</ti>
</tr>
<tr>
  <ti>rmd160</ti>
  <ti>suma kontrolna rmd160</ti>
</tr>
<tr>
  <ti>tiger</ti>
  <ti>suma kontrolna tiger</ti>
</tr>
<tr>
  <ti>R</ti>
  <ti>p+i+n+u+g+s+m+c+md5</ti>
</tr>
<tr>
  <ti>L</ti>
  <ti>p+i+n+u+g</ti>
</tr>
<tr>
  <ti>E</ti>
  <ti>Pusta grupa</ti>
</tr>
<tr>
  <ti>&gt;</ti>
  <ti>Rosnący plik z logami p+u+g+i+n+S</ti>
</tr>
</table>

<p>
Ponadto jeśli AIDE zostanie skompilowane ze wsparciem dla mhash dostępne będą
dodatkowo takie opcje:
</p>

<table>
<tr>
<th>Flaga</th>
<th>Opis</th>
</tr>
<tr>
<ti>haval</ti>
<ti>suma kontrolna haval</ti>
</tr>
<tr>
<ti>gost</ti>
<ti>suma kontrolna gost</ti>
</tr>
<tr>
<ti>crc32</ti>
<ti>suma kontrolna crc32</ti>
</tr>
</table>


<p>
Przy użyciu powyższych flag można stworzyć własny zestaw reguł. Na przykład:
</p>

<pre caption="Zbór reguł dla AIDE">
All=R+a+sha1+rmd160
Norm=s+n+b+md5+sha1+rmd160
</pre>

<p>
Ostatnią rzeczą jaką trzeba dopisać do pliku konfiguracyjnego są zasady obsługi
plików i katalogów. Regułę dodajemy poprzez dopisanie nazwy pliku bądź katalogu
wraz z odpowiednim zestawem flag. AIDE doda wszystkie możliwe pliki rekursywnie
o ile nie nakażemy inaczej.
</p>

<table>
<tr>
<th>Flaga</th>
<th>Opis</th>
</tr>
<tr>
<ti>!</ti>
<ti>Nie dodawać tego pliku bądź katalogu.</ti>
</tr>
<tr>
<ti>=</ti>
<ti>Dodaj ten katalog, ale nie rekursywnie.</ti>
</tr>
</table>

<p>
A oto przykładowy końcowy efekt:
</p>

<pre caption="/etc/aide/aide.conf">
@@ifndef TOPDIR 
@@define TOPDIR /
@@endif

@@ifndef AIDEDIR 
@@define AIDEDIR /etc/aide
@@endif

@@ifhost smbserv
@@define smbactive
@@endif

# The location of the database to be read.
database=file:@@{AIDEDIR}/aide.db

# The location of the database to be written.
database_out=file:aide.db.new

verbose=20
report_url=stdout

# Rule definition
All=R+a+sha1+rmd160
Norm=s+n+b+md5+sha1+rmd160

@@{TOPDIR} Norm
!@@{TOPDIR}etc/aide
!@@{TOPDIR}dev
!@@{TOPDIR}proc
!@@{TOPDIR}root
!@@{TOPDIR}tmp
!@@{TOPDIR}var/log
!@@{TOPDIR}var/run
!@@{TOPDIR}usr/portage
@@ifdef smbactive
!@@{TOPDIR}etc/smb/private/secrets.tdb
@@endif
=@@{TOPDIR}home Norm
</pre>

<p>
W powyższym przykładzie definiujemy poprzez makra katalog główny oraz miejsce
gdzie zainstalowano AIDE. AIDE sprawdza plik <path>/etc/aide/aide.db</path> przy
kontrolowaniu integralności plików, ale podczas uaktualniania lub tworzenia
nowej bazy wszystkie informacje zapisuje do pliku
<path>/etc/aide/aide.db.new</path>. Robimy tak, aby zapobiec automatycznemu
nadpisaniu starego pliku z bazą danych. Opcja <c>report_URL</c> nie została
jeszcze zaimplementowana, autor zamierza dzięki niej umożliwić programowi
wysyłanie e-maili oraz wykonywanie skryptów.
</p>

<p>
Po zakończeniu etapu konfigurowania programu należy jeszcze utworzyć plik z bazą
danych - przy pomocy polecenia <c>aide -i</c> i skopiować plik
<path>/etc/aide/aide.db.new</path> na miejsce <path>/etc/aide/aide.db</path> oraz
dodać odpowiedni wpis do crona, przy użyciu polecenia <c>crontab -e</c> z konta
roota.
</p>

<note>
Zadanie to może zająć trochę czasu, w zależności od sprzętu i użytych flag.
</note>

<pre caption="Planowanie aide jako zadania dla crona">
0 3 * * * /usr/bin/aide -u
</pre>

<note>
Jeśli zapomni się o ustawieniu aliasu pocztowego, który będzie przekierowywał
całą pocztę roota na prywatne konto administratora to nigdy nie urjrzy się
żadnego z raportów AIDE.
</note>

<p>
W naszym przypadku test będzie uruchamiany co 24 godziny, o 3 w nocy. Postępujemy
tak, gdyż nie chcemy przeszkadzać użytkownikom w codziennej pracy. Warto zwrócić
uwagę na użycie opcji <c>-u</c> (uaktualnienie) zamiast <c>-C</c> (sprawdzanie).
Dzięki temu przy uaktualnianiu bazy danych nie zostanie nadpisany oryginalny jej
plik i jedynym co trzeba zrobić po wykryciu zmian będzie skopiowanie
jednego pliku na drugi. Zanim jednak to się zrobi należy się upewnić, że to my
dokonaliśmy wykrytej zmiany, a nie włamywacz. :]
</p>

<p>
Przechowywanie plików bazy danych na tym samym systemie, na którym dokonujemy
testów wiąże się z pewnym ryzykiem. Jeśli włamywacz będzie świadom tego, że
używamy AIDE zwykle spróbuje zmienić plik bazy danych, uaktualnić go po
wprowadzeniu zmian lub nawet zmodyfikować plik <path>/usr/bin/aide</path>. W
związku z tym warto rozważyć nagrywanie każdej kolejnej wersji pliku z bazą oraz
plików binarnych AIDE na płyty CD.
</p>

<p>
Więcej informacji znajduje się na stronach projektu <uri
link="http://www.cs.tut.fi/~rammer/aide.html">AIDE</uri>.
</p>

</body>
</section>
<section>
<title>Snort</title>
<body>

<p>
Snort jest to sieciowy system wykrywania włamań (NIDS - Network Intrusion
Detection System). Aby go zainstalować i skonfigurować należy wykonać
następujące czynności:
</p>

<pre caption="Dodawanie użytkownika snort do systemu">
# useradd snort -d /var/log/snort -s /dev/null
# chown -R snort /var/log/snort
</pre>

<pre caption="/etc/snort/snort.conf">
PIDFILE=/var/run/snort_eth0.pid
MODE="full"
NETWORK="10.0.0.0/24"
LOGDIR="/var/log/snort"
CONF=/etc/snort/snort.conf
SNORT_OPTS="-D -s -u snort -dev -l $LOGDIR -h $NETWORK -c $CONF"
</pre>

<pre caption="/etc/snort/snort.conf">
<comment>(Krok 1)</comment>
var HOME_NET 10.0.0.0/24
var EXTERNAL_NET any
var SMTP $HOME_NET
var HTTP_SERVERS $HOME_NET
var SQL_SERVERS $HOME_NET
var DNS_SERVERS [10.0.0.2/32,212.242.40.51/32]
var RULE_PATH ./

<comment>(Krok 2)</comment>
preprocessor frag2
preprocessor stream4: detect_scans detect_state_problems detect_scans disable_evasion_alerts
preprocessor stream4_reassemble: ports all
preprocessor http_decode: 80 8080 unicode iis_alt_unicode double_encode iis_flip_slash full_whitespace
preprocessor rpc_decode: 111 32771
preprocessor bo: -nobrute
preprocessor telnet_decode

<comment>(Krok 3)</comment>
include classification.config

<comment>(Krok 4)</comment>
include $RULE_PATH/bad-traffic.rules
include $RULE_PATH/exploit.rules
include $RULE_PATH/scan.rules
include $RULE_PATH/finger.rules
include $RULE_PATH/ftp.rules
include $RULE_PATH/telnet.rules
include $RULE_PATH/smtp.rules
include $RULE_PATH/rpc.rules
include $RULE_PATH/rservices.rules
include $RULE_PATH/dos.rules
include $RULE_PATH/ddos.rules
include $RULE_PATH/dns.rules
include $RULE_PATH/tftp.rules
include $RULE_PATH/web-cgi.rules
include $RULE_PATH/web-coldfusion.rules
include $RULE_PATH/web-iis.rules
include $RULE_PATH/web-frontpage.rules
include $RULE_PATH/web-misc.rules
include $RULE_PATH/web-attacks.rules
include $RULE_PATH/sql.rules
include $RULE_PATH/x11.rules
include $RULE_PATH/icmp.rules
include $RULE_PATH/netbios.rules
include $RULE_PATH/misc.rules
include $RULE_PATH/attack-responses.rules
include $RULE_PATH/backdoor.rules
include $RULE_PATH/shellcode.rules
include $RULE_PATH/policy.rules
include $RULE_PATH/porn.rules
include $RULE_PATH/info.rules
include $RULE_PATH/icmp-info.rules
include $RULE_PATH/virus.rules
# include $RULE_PATH/experimental.rules
include $RULE_PATH/local.rules
</pre>

<pre caption="/etc/snort/classification.config">
config classification: not-suspicious,Not Suspicious Traffic,3
config classification: unknown,Unknown Traffic,3
config classification: bad-unknown,Potentially Bad Traffic, 2
config classification: attempted-recon,Attempted Information Leak,2
config classification: successful-recon-limited,Information Leak,2
config classification: successful-recon-largescale,Large Scale Information Leak,2
config classification: attempted-dos,Attempted Denial of Service,2
config classification: successful-dos,Denial of Service,2
config classification: attempted-user,Attempted User Privilege Gain,1
config classification: unsuccessful-user,Unsuccessful User Privilege Gain,1
config classification: successful-user,Successful User Privilege Gain,1
config classification: attempted-admin,Attempted Administrator Privilege Gain,1
config classification: successful-admin,Successful Administrator Privilege Gain,1

# NEW CLASSIFICATIONS
config classification: rpc-portmap-decode,Decode of an RPC Query,2
config classification: shellcode-detect,Executable code was detected,1
config classification: string-detect,A suspicious string was detected,3
config classification: suspicious-filename-detect,A suspicious filename was detected,2
config classification: suspicious-login,An attempted login using a suspicious username was detected,2
config classification: system-call-detect,A system call was detected,2
config classification: tcp-connection,A TCP connection was detected,4
config classification: trojan-activity,A Network Trojan was detected, 1
config classification: unusual-client-port-connection,A client was using an unusual port,2
config classification: network-scan,Detection of a Network Scan,3
config classification: denial-of-service,Detection of a Denial of Service Attack,2
config classification: non-standard-protocol,Detection of a non-standard protocol or event,2
config classification: protocol-command-decode,Generic Protocol Command Decode,3
config classification: web-application-activity,access to a potentially vulnerable web application,2
config classification: web-application-attack,Web Application Attack,1
config classification: misc-activity,Misc activity,3
config classification: misc-attack,Misc Attack,2
config classification: icmp-event,Generic ICMP event,3
config classification: kickass-porn,SCORE! Get the lotion!,1
</pre>

<p>
Więcej informacji znajduje się na stronie projektu <uri
link="http://www.snort.org">Snort</uri>.
</p>

</body>
</section>

<section>
<title>Wykrywanie nieprawidłowości przy pomocy chkrootkit.</title>
<body>

<p>
HIDS taki jak AIDE to świetny sposób wykrywania niepożądanych zmian w
systemie. Warto jednak mieć też drugą linię obrony. <c>chkrootkit</c> to program
skanujący najważniejszy pliki systemowe pod kątem obecności rootkitów, czyli
programów pisanych, aby ukryć obecność włamywacza i pozwolić mu na zachowanie
dostępu do komputera. Program skanuje również system w poszukiwaniu śladów
loggerów klawiszy i innych niepożądanych programów. Jest to bardzo użyteczne
narzędzie, posiadające zresztą kilka podobnie działających alternatyw (jak
<c>rkhunter</c>). Mimo wszystko należy pamiętać, że żaden z nich nie gwarantuje
bezpieczeństwa systemu.
</p>

<p>
Najwygodniejszym sposobem korzystania z <c>chkrootkit</c> jako metody wykrywania
włamań jest uruchamianie go przy pomocy <c>crona</c>. Przede wszystkim trzeba go
jednak zainstalować - poleceniem emerge <c>app-admin/chkrootkit</c>.
<c>chkrootkit</c> może być uruchamiany z linii poleceń przy pomocy komendy o tej
samej nazwie, lub poprzez taki wpis w <c>cronie</c>:
</p>

<pre caption="Planownie chkrootkit jako zadania dla crona">
0 3 * * * /usr/sbin/chkrootkit
</pre>

</body>
</section>
</sections>
