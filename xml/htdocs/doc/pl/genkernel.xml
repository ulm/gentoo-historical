<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/genkernel.xml,v 1.11 2005/12/18 01:01:48 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<guide link="/doc/pl/genkernel.xml" lang="pl" >
<title>Konfiguracja jądra genkernel</title>

<author title="Autor">
  <mail link="plasmaroo@gentoo.org">Tim Yamin</mail>
</author>
<!-- folajimi@speakeasy.net -->
<author title="Contributor">
  Jimi Ayodele
</author>
<!-- thseiler@gmail.com -->
<author title="NFS Support">
  Thomas Seiler
</author>
<author title="Tłumaczenie">
  <mail link="edi15ta@gazeta.pl">Mateusz Kotyrba</mail>
</author>

<abstract>
Dokładny opis wszystkich funkcji genkernela.
</abstract>

<license/>

<version>1.4.3</version>
<date>2005-12-16</date>

<chapter>
<title>Wstęp</title>
<section>
<title>Rationale</title>
<body>

<p>
Dla użytkowników, którzy nie są jeszcze zaznajomieni z ręczną konfiguracją jądra
powstał program automatyzujący ten proces - genkernel. Pomoże on stworzyć obraz
jądra podobny do tych jakie znajdują się na płytach instalacyjnych Gentoo i są
tak zaprojektowane, aby same wykrywały całą konfigurację sprzętową naszego
systemu.  Niektórzy użytkownicy mogą być również zainteresowani używaniem
genkernela do inicjalizacji sprzętu oraz obsługi działającego jądra, przed
załadowaniem systemu. Ponieważ genkernel automatycznie kompiluje moduły jądra,
możemy używać sprzętu, który do poprawnego funkcjonowania wymaga załadowania
pewnych parametrów modułu.
</p>

</body>
</section>
<section>
<title>Grupa docelowa</title>
<body>

<p>
Jeśli jesteśmy niepewni jak skompilować jądro lub po prostu nie znamy
konfiguracji naszego sprzętu, wtedy genkernel jest przydatnym narzędziem. Jest
on stworzony do odciążenia użytkownika z ręcznej kompilacji jądra oraz domyślnie
wspiera większość urządzeń dostępnych na rynku.
</p>

<p>
Jednakże, jeśli wiemy jakie sterowniki są wymagane przez system, możemy skrócić
czas kompilacji jądra. Jest to możliwe ponieważ możemy wskazać genkernelowi, aby
skompilował tylko niezbędne sterowniki. Często liczba sterowników wymaganych
przez nasz system będzie znacznie mniejsza (co skróci czas kompilacji jądra) niż
ta, którą domyślnie będzie chciał zainstalować genkernel.
</p>

</body>
</section>
<section>
<title>Instalowanie genkernela</title>
<body>

<p>
Aby zainstalować genkernel, wykonujemy polecenie <c>emerge genkernel</c>. Jeśli
używamy <uri
link="/doc/pl/handbook/2005.1/hb-install-about.xml#doc_chap2_sect1">Gentoo 
Reference Platform</uri> (GRP), musimy pamiętać, aby zainstalować pakiety
binarne przez dodanie opcji <c>-k</c> do polecenia emerge. Ponieważ GRP jest
dodatkiem do starszej wersji genkernela, więc flagi mogą być inne. W takim
przypadku należy przeczytać <c>genkernel --help</c> i dowiedzieć się jak używać
wersji genkernela zainstalowanej w systemie.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Praca z genkernelem</title>
<section>
<title>Jak używać genkernela</title>
<body>

<p>
Pomimo, że istnieje kilka sposobów uruchomienia genkernela, to
najbardziej niepożądaną jest <c>genkernel all</c>. Tu jest użyta ogólna
konfiguracja, która działa dobrze na większości systemów. Jednak posiada ona
wady: większość stworzonych modułów jest bezużytecznych dla szarego
użytkownika, a czas kompilacji jest bardzo długi. Poniżej znajduje się
przykład bardziej wydajnego podejścia, które uzyskujemy dopisując, jako root,
pewne flagi:
</p>

<pre caption="Uruchamianie genkernela (z flagami)">
# <i>genkernel --bootsplash --no-install --no-clean --menuconfig all</i>
</pre>

<p>
Powyższa operacja zmusza genkernel do stworzenia jądra z załączoną opcją
bootsplash (<c>--bootsplash</c>), który będzie musiał być ręcznie zainstalowany
(<c>--no-install</c>). Podczas przygotowywania źródła drzewa jądra, genkernel
powstrzyma się od czyszczenia jakichkolwiek obecnych plików obiektowych z drzewa
źródła (<c>--no-clean</c>). Zostanie również wyświetlone narzędzie
konfiguracyjne, które pozwoli użytkownikowi wybrać, które moduły zostaną
zbudowane (<c>--menuconfig</c>).
</p>

<p>
Istnieją również inne flagi, które zmieniają wynik kompilacji genkernela.
Przykładowo, jeśli zamienimy flagę <c>--no-install</c> na <c>--install</c>,
wtedy genkernel automatycznie zainstaluje nowe jądro w katalogu
<path>/boot</path>. Użycie flagi <c>--mountboot</c> zezwoli genkernelowi
na automatyczne montowanie partycji <path>/boot</path>, jeśli to będzie
konieczne.
</p>

<p>
Należy pamiętać, że genkernel jest stworzony, aby uprościć kompilację jądra oraz
uczynić ją bezstresową. Z tego powodu genkernel obsługuje wiele flag
ułatwiających kompilację jądra. Przykładowo, istnieją flagi, które pomagają przy
konfiguracji, zaś inne mają wpływ na proces kompilacji. Niektóre flagi pomagają
nawet usunąć błędy kompilacyjne. Dla zainteresowanych, istnieją jeszcze flagi,
które wpływają na złożenie, pakowanie, a nawet ładowanie jądra.
</p>

<p>
Reszta tego rozdziału podaje dostępne flagi wraz z ich opisem działania.
Niektóre flagi mogą wykonać operację w drugą stronę. Operacje w drugą stronę
mogą być uzyskane za pomocą przedrostka <b><c>no-</c></b>, a ich opis działania
zawarty jest w nawiasach kwadratowych, [].
</p>

</body>
</section>
<section>
<title>Flagi konfiguracyjne</title>
<body>

<p>
Flagi konfiguracyjne wypisane poniżej są po to, aby pomóc zdecydować jakie
funkcje mają być włączone lub wyłączone w jądrze przed jego kompilacją. Możemy
nawet wybrać czy stworzony plik konfiguracyjny ma być zachowany. Poniżej
znajdują się główne flagi konfiguracyjne:
</p>

<ul>
   <li>
      <b>--<c>no-</c>menuconfig</b>: Uruchamia [lub nie uruchamia] polecenie
      <c>make menuconfig</c> (wywołuje interaktywne narzędzie konfiguracyjne)
      przed kompilacją jądra.
   </li>
   <li>
     <b>--gconfig</b>: Dostarcza narzędzia konfiguracji jądra, które zależy od
     bibliotek GTK+.  Zaletą tej opcji jest to, że większości użytkowników
     łatwiej się konfiguruje jądro, ponieważ to narzędzie jest oparte o
     środowisko X. Wada jest taka, że <b>wymagane</b> jest środowisko X, więc
     nie będzie ono pracować w wierszu poleceń.
   </li>
   <li>
     <b>--xconfig</b>: Dostarcza narzędzia konfiguracji jądra, które zależy od
     bibliotek QT. Zaletą tej opcji jest to, że większości użytkowników łatwiej
     się konfiguruje jądro, ponieważ to narzędzie jest oparte o środowisko X.
     Wada jest taka, że <b>wymagane</b> jest środowisko X, więc nie będzie ono
     pracować w wierszu poleceń.
   </li>
   <li>
      <b>--<c>no-</c>save-config</b>: Zachowuje <e>[lub nie zachowuje]</e>
      konfigurację jądra, do pliku znajdującego się w katalogu
      <path>/etc/kernels/</path>, dla późniejszego użytku.
   </li>
</ul>

</body>
</section>
<section>
<title>Flagi kompilacyjne</title>
<body>

<p>
Następujące flagi zaczynają działać podczas kompilacji:
</p>

<ul>
  <li>
    <b>--kerneldir=<path>/ścieżka/do/źródeł</path></b>: To określa
    alternatywną lokalizację dla źródeł jądra, zamiast domyślnej lokalizacji
    <path>/usr/src/linux</path>.
  </li>
  <li>
    <b>--kernel-config=<path>/ścieżka/do/pliku_z_konfiguracją</path></b>:
    To określa plik z konfiguracją, jaki ma zostać użyty zamiast
    <path>/ścieżka/do/źródeł/.config</path>.
  </li>
  <li>
    <b>--module-prefix=<path>/ścieżka/do/katalogu/przedrostka/</path></b>:
    Określa przedrostek do katalogu gdzie moduły jądra zostaną zainstalowane
    (domyślną ścieżką jest katalog <path>/lib/modules/</path>).
  </li>
</ul>

<ul>
  <li>
    <b>--<c>no-</c>clean</b>: To uruchomi <e>[lub nie uruchomi]</e> 
    <c>make clean</c> przed kompilacją jądra, powodując, że wszystkie pliki
    obiektów i zależności z drzewa jądra zostaną usunięte.
  </li>
  <li>
    <b>--<c>no-</c>mrproper</b>: To uruchomi <e>[lub nie uruchomi]</e> <c>make
    mrproper</c> przed kompilacją jądra. Podobnie jak polecenie <c>make
    clean</c>, <c>make mrproper</c> usuwa wszystkie pliki obiektów i zależności.
    Jednakże jakiekolwiek wcześniejsze pliki konfiguracyjne (w
    <path>/ścieżka/do/źródeł/.config</path> lub
    <path>/ścieżka/do/źródeł/.config.old</path>) zostaną <b>również</b> usunięte
    z drzewa jądra.
  </li>
  <li>
    <b>--oldconfig</b>: Wykonuje polecenie <c>make oldconfig</c>, które próbuje
    zebrać informacje konfiguracyjne dla architektury systemowej z podstawowego
    skryptu w <path>/usr/share/genkernel/</path>. To nie jest proces
    interaktywny, użytkownik nic nie musi wprowadzać. Jeśli flaga
    <c>--oldconfig</c> zostanie użyta wraz z flagą <c>--clean</c>, wtedy druga
    flaga zostanie zanegowana, co spowoduje zamienienie jej na flagę
    <c>--no-clean</c>.
  </li>
</ul>

<ul>
  <li>
    <b>--callback="<c>echo Witaj</c>"</b>: To polecenie wywołuje podane
    polecenia (w tym przypadku <c>echo Witaj</c>), po tym jak jądro i powiązane
    z nim moduły zostaną zbudowane, ale jeszcze przed utworzeniem obrazu initrd.
    Jest to użyteczne jeśli trzeba załadować zewnętrzne moduły do initrd przez
    zemergowanie stosownych rzeczy wraz z funkcją callback, a wtedy ponownie
    jest definiowana grupa modułów genkernela.
   </li>
</ul>

<ul>
   <li>
     <b>--<c>no-</c>install</b>: Wykonuje <e>[lub nie wykonuje]</e> polecenie
     <c>make install</c>, które zainstaluje nowy obraz jądra, plik
     konfiguracyjny, obraz initrd oraz odwzorowanie systemu (ang. system map) do
     zamontowanej partycji rozruchowej. Jakiekolwiek skompilowane moduły również
     zostaną zainstalowane.
   </li>
   <li>
     <b>--no-initrdmodules</b>: Zabrania dodawania modułów do tworzonego initrd.
     Ta flaga jest wyjątkiem do reguły o przedrostku <c>no-</c>, ominięcie
     przedrostka stworzy błędną flagę genkernela.
   </li>
   <li>
     <b>--genzimage</b>: Tworzy obraz initrd, przed obrazem jądra.  (Ta
     przeróbka obecnie stosuje się tylko do systemów PPC Pegasos)
  </li>
</ul>

</body>
</section>

<section>
<title>Flagi kompilatora</title>
<body>

<p>
Następujące flagi są wspierane przez genkernel oraz są przekazywane niezbędnym
aplikacjom podczas kompilacji jądra. Te flagi wpływają na <e>kompilator</e>
użyty do procesu kompilacji, aczkolwiek na znacznie niższym poziomie.
</p>

<ul>
  <li>
    <b>--kernel-as=<c>Assembler</c></b>: Określa język programowania niskiego
    poziomu, który zostanie użyty do kompilacji jądra.
  </li>
  <li>
    <b>--kernel-cc=<c>Kompilator</c></b>: Określa kompilator, który zostanie
    użyty do kompilacji jądra.
  </li>
  <li>
    <b>--kernel-ld=<c>Konsolidator</c></b>: Określa program łączący, który
    zostanie użyty do kompilacji jądra.
  </li>
  <li>
    <b>--kernel-make=<c>Make</c></b>: Określa narzędzie <e>GNU make</e>, które
    zostanie użyte do kompilacji jądra.
  </li>
</ul>

<ul>
  <li>
    <b>--utils-as=<c>Assembler</c></b>: Określa język programowania niskiego
    poziomu, który zostanie użyty do kompilacji dodatkowych narzędzi.
  </li>
  <li>
    <b>--utils-cc=<c>Kompilator</c></b>: Określa kompilator, który zostanie
    użyty do kompilacji dodatkowych narzędzi.
  </li>
  <li>
    <b>--utils-ld=<c>Konsolidator</c></b>: Określa program łączący, który
    zostanie użyty do kompilacji dodatkowych narzędzi.
  </li>
  <li>
    <b>--utils-make=<c>Make</c></b>: Określa narzędzie <e>GNU make</e>, które
    zostanie użyte do kompilacji dodatkowych narzędzi.
  </li>
</ul>

<ul>
  <li>
    <b>--makeopts=<c>-jX</c></b>: Określa ilość równoległych wątków, w których
    może być wdrożone narzędzie make podczas kompilacji jądra (oraz narzędzi).
    Zmienna <b>'X'</b> jest liczbą otrzymaną przez dodanie jedynki do liczby
    procesorów znajdujących się w systemie. Więc dla komputerów z 1 procesorem,
    odpowiednią flagą jest <c>-j2</c>, system z dwoma CPU użyje <c>-j3</c> itd.
    <e>(System z 1 procesorem, który wspiera Hyper-Threading&#8482; (HT)
    Technology może użyć flagi </e><c>-j3</c><e>, pod warunkiem, że wsparcie dla
    Symmetric Multi-Processing (SMP) zostało załączone w jądrze).</e>
  </li>
</ul>

</body>
</section>
<section>
<title>Flagi diagnostyczne</title>
<body>

<p>
Flag diagnostyczne podczas kompilacji jądra kontrolują ilość wyświetlanych
informacji.
</p>

<ul>
  <li>
    <b>--debuglevel=<c>verblevel</c></b>: Kontroluje poziom rozwlekłości
    wyświetlanych informacji przez genkernel. Zmienna <c>verblevel</c> jest
    liczbą całkowitą z przedziału od 0 do 5. Poziom '0' reprezentuje minimalną
    ilość wyświetlanych informacji, a '5' dostarcza tak dużo informacji, o
    czynnościach genkernela podczas kompilacji jądra, jak to możliwe.
  </li>
  <li>
    <b>--debugfile=<path>/ścieżka/do/pliku_wyjścia</path></b>: Ignoruje wartość
    ustawioną przez flagę <c>--debuglevel</c> i wysyła <b>wszystkie</b> dane
    diagnostyczne stworzone przez genkernel do pliku, który domyślnie znajduje
    się w <path>/var/log/genkernel.log</path>.
  </li>
  <li>
    <b>--no-color</b>: Włącza <e>[lub nie włącza]</e> kolorowe wyjście
    informacji diagnostycznych (raportowanych przez genkernel) używając ciągów
    escape.
  </li>
</ul>

</body>
</section>
<section>
<title>Flagi startowe</title>
<body>

<p>
Poniższe flagi są używane do stworzenia pewnych efektów podczas ładowania
systemu. Niektóre z nich są tylko estetyczne, lecz inne mogą być niezbędne do
włączenia pewnych funkcji w systemie.
</p>

<ul>
  <li>
    <b>--<c>no-</c>bootsplash</b>: Włącza <e>[lub wyłącza]</e> wsparcie dla <uri
    link="http://www.bootsplash.org/">bootsplasha</uri> w obrazie initrd
    zbudowanym przez genkernel. Funkcja bootsplash jest wspierana na
    ograniczonej liczbie architektur, a wymagane jest także jądro, które wspiera
    tę funkcję.
  </li>
  <li>
     <b>--<c>no-</c>gensplash</b>: Włącza <e>[lub wyłącza]</e> wsparcie dla <uri
     link="http://dev.gentoo.org/~spock/projects/gensplash/">gensplasha</uri> w
     obrazie initrd zbudowanym przez genkernel. Narzędzie gensplash w
     zamierzeniu jest następcą bootsplasha i jest stworzone do współpracy z
     jądrami serii 2.6.x. Aby zastąpić domyślny motyw graficzny używany przez
     gensplash, wpisujemy <b>--gensplash=<c>PreferowanyMotyw</c></b> (gdzie
     <c>PreferowanyMotyw</c> jest nazwą jednego z katalogów w
     <path>/etc/splash/</path>.
  </li>
  <li>
    <b>--gensplash-res=<c>PreferowanaRozdzielczość</c></b>: Ta flaga pozwala na
    wybranie rozdzielczości jaka będzie wspierana w naszym initrd podczas startu
    systemu. Jest to użyteczne z dwóch powodów: po pierwsze mamy możliwość
    wybrania tylko tej rozdzielczości, która pasuje dla naszego systemu, po
    drugie, zmniejszamy tym samym wielkość obrazu initrd (ponieważ initrd nie
    będzie posiadać wsparcia dla rozdzielczości, których nie potrzebujemy).
    Jednakże, możemy pominąć tę flagę jeśli jądro jest kompilowane dla płyty
    instalacyjnej, to pozwoli gensplashowi na wsparcie wszystkich
    rozdzielczości.
  </li>
  <li>
    <b>--do-keymap-auto</b>: Wymuszamy wybór mapy klawiszy podczas ładowania
    systemu.
  </li>
  <li>
    <b>--lvm2</b>: Włącza wsparcie dla przechowywania danych za pomocą <uri
    link="http://sources.redhat.com/lvm2/">Logical Volume Management</uri>
    (LVM2) ze <e>statycznych</e> plików binarnych, jeśli są dostępne w systemie.
    Niezbędne (statyczne) pliki binarne LVM2 zostaną skompilowane, jeśli są
    niedostępne. Przed włączeniem tej flagi należy się upewnić, że mamy
    zainstalowany w systemie pakiet lvm2 za pomocą polecenia <c>emerge lvm2</c>
    oraz należy przeglądnąć przewodnik <uri link="/doc/pl/lvm2.xml">Instalacja
    LVM2 w Gentoo</uri>.
  </li>
  <li>
    <b>--evms2</b>: Włącza wsparcie dla przechowywania danych za pomocą <uri
    link="http://evms.sourceforge.net/">Enterprise Volume Management
    System</uri> (EVMS2), jeśli go posiadamy. Przed użyciem tej flagi należy się
    upewnić, że mamy zainstalowany pakiet evms za pomocą polecenia <c>USE=static
    emerge evms2</c>. <e>(Pominięcie flagi </e><c>USE=static</c> <e> podczas
    instalacji pakietu spowoduje nie dołączenie do pakietu niezbędnych
    statycznych plików binarnych).</e>
  </li>
  <li>
    <b>--dmraid</b>: Włącza wsparcie dla <uri
    link="http://people.redhat.com/~heinzm/sw/dmraid/readme">DMRAID</uri>.  Jest
    to narzędzie, które tworzy odwzorowania RAID-u za pomocą podsystemu jądra
    device-mapper. DMRAID odkrywa, włącza, wyłącza oraz wyświetla właściwości
    ustawień programowych RAID-u (przykładowo, ATARAID) oraz zawartych partycji
    DOS.
  </li>
  <li>
    <b>--linuxrc=/ścieżka/do/linuxrc</b>: Określa ścieżkę do stworzonego przez
    użytkownika pliku <e>linuxrc</e> &mdash;, który jest skryptem, który jest
    uruchamiany podczas załączania jądra, przed rozpoczęciem ładowania systemu
    (domyślnie skrypt linuxrc znajduje się w katalogu
    <path>/usr/share/genkernel/</path>). Ten skrypt pozwala na uruchomienie
    małego jądra z modułami oraz załadowanie sterowników, które są potrzebne
    (jako moduły) przez system.
  </li>
  <li>
    <b>--cachedir=/ścieżka/do/katalogu/cache/</b>: Zastępuje domyślną
    lokalizacją katalogu cache podczas kompilacji jądra.
  </li>
  <li>
    <b>--tempdir=/ścieżka/do/nowego/katalogu/tymczasowego/</b>: Określa
    lokalizację katalogu tymczasowego używanego przez genkernel podczas
    kompilacji jądra.
  </li>
  <li>
    <b>--unionfs</b>: Załącza wsparcie dla <uri
    link="http://www.fsl.cs.sunysb.edu/project-unionfs.html">Unification File
    System</uri> w obrazie initrd.
  </li>
</ul>

</body>
</section>
<section>
<title>Pozostałe flagi</title>
<body>

<p>
Poniższe flagi są wspierane przez genkernel, ale nie pasują do żadnej z
powyższych kategorii:
</p>

<ul>
  <li>
    <b>--mountboot</b>: Rozpoznaje czy katalog <path>/boot/</path> trzeba
    montować jako osobną partycję. Sprawdzi również, jeśli to będzie potrzebne,
    skrypt <path>/etc/fstab</path> w poszukiwaniu instrukcji jak zamontować
    partycję rozruchową.
  </li>
  <li>
     <b>--kernname=<c>Nazwa</c></b>: Pozwala na zmianę nazwy obrazów jądra oraz
     initrd w katalogu <path>/boot/</path>. Po zmianie pliki te będą się
     nazywały odpowiednio kernel-<c>Nazwa</c>-wersja oraz
     initramfs-<c>Nazwa</c>-wersja.
  </li>
</ul>

</body>
</section>
<section>
<title>Możliwe tryby</title>
<body>

<p>
Tryb mówi genkernelowi co ma skompilować. W obecnej chwili obsługiwane są
poniższe tryby:
</p>

<ul>
  <li><c>initrd</c>: Buduje jedynie obraz initrd.</li>
  <li><c>bzImage</c>: Buduje jedynie obraz jądra systemu.</li>
  <li><c>kernel</c>: Buduje obraz jądra systemu i moduły.</li>
  <li><c>all</c>: Buduje wszystko &mdash; initrd, obraz jądra i moduły.</li>
</ul>

<p>
Ostatni tryb, <c>all</c>, jest zalecany dla większości użytkowników, ponieważ
wtedy zostanie zbudowane w pełni działające jądro. Należy pamiętać, że
<e>tryb</e> po prostu mówi genkernelowi co <e>budować</e>, nie
<e>instalować</e>.
</p>

</body>
</section>
<section>
<title>Konfiguracja bootloadera</title>
<body>

<p>
Aby genkernel poprawnie współpracował z programem ładującym należy dokonać
czterech zmian.
</p>

<ol>
  <li>
    Należy dodać <c>root=/dev/ram0</c> oraz <c>init=/linuxrc</c> do parametrów
    jądra przekazanych do obrazu jądra.
  </li>
  <li>
    Należy dodać, np. <c>real_root=/dev/hda3</c> do parametrów jądra
    przekazywanych do obrazu jądra, gdzie <path>/dev/hda3</path> to ścieżka do
    partycji rozruchowej.
  </li>
  <li>
    Jeśli używamy bootsplasha, należy dodać właściwą rozdzielczość jak np.
    <c>vga=0x317</c> do parametrów przekazywanych do jądra oraz dodać
    <c>splash=verbose</c> lub <c>splash=silent</c> w zależności od żądanego
    stopnia szczegółowości wyświetlanych informacji. 
  </li>
  <li>
    Informacje o initrd muszą zostać dodane zgodnie z wymaganiami programu
    ładującego. <uri
    link="/doc/pl/handbook/handbook-x86.xml?part=1&amp;chap=10">Podręcznik
    Gentoo</uri> zawiera tego dokładny opis.
  </li>
</ol>

</body>
</section>
</chapter>

<chapter>
<title>Opcje konfiguracyjne</title>
<section>
<title>Edytowanie /etc/genkernel.conf</title>
<body>

<p>
Podawanie flag genkernelowi z linii poleceń może być czasochłonne, szczególnie
jeśli mamy dużo flag:
</p>

<pre caption="Uruchamianie genkernela (przeładowany flagami)">
# <i>genkernel --debuglevel=5 --no-color --no-mrproper --clean --gensplash\
--kerneldir=/path/to/alternate/kernel/sources --install --menuconfig --udev\
--kernel-config=/path/to/preferred/configfile --save-config --mountboot all</i>
</pre>

<p>
Na szczęście istnieje plik konfiguracyjny gdzie większość podstawowych opcji
może być ustawionych (lub zmienionych). Spójrzmy na ważniejsze opcje:
</p>

<ul>
  <li>
    <b>MENUCONFIG=<c>[yes|no]</c></b>: Ta opcja jest równoważna fladze
    <c>--menuconfig</c> używanej przez genkernel, której włączenie powoduje
    wykonanie polecenia <c>make menuconfig</c>, co wywołuje narzędzie
    konfiguracji jądra. Aby wywoływać to narzędzie automatycznie, podczas
    konfiguracji jądra, za pomocą tego skryptu, wtedy należy ustawić tę opcję na
    'yes'; w przeciwnym wypadku wybieramy 'no'.
   </li>
   <li>
     <b>CLEAN=<c>[yes|no]</c></b>: Ustawienie tej opcji na 'yes' jest równoważne
     fladze <c>--clean</c> używanej przez genkernel, która wywołuje polecenie
     <c>make clean</c>, aby usunąć wszystkie pliki obiektowe wraz z
     zależnościami z drzewa jądra. Ustawienie tej opcji na 'no' tworzy efekt
     kaskadowy &mdash; jest to równoważne fladze <c>--no-clean</c>, która
     wyłącza polecenie <c>make clean</c> oraz sugeruje flagę
     <c>--no-mrproper</c> &mdash; jednocześnie anulując polecenie <c>make
     mrproper</c>.
   </li>
   <li>
     <b>MRPROPER=<c>[yes|no]</c></b>: Ustawienie tej opcji na 'yes' jest
     równoważne fladze <c>--mrproper</c> używanej przez genkernel, która
     wywołuje polecenie <c>make mrproper</c>, które usuwa z drzewa jądra
     wszystkie pliki konfiguracyjne. Wybranie 'no' jest równoważne z flagą
     <c>--no-mrproper</c>, która wyłącza polecenie <c>make mrproper</c>.
   </li>
   <li>
     <b>MOUNTBOOT=<c>[yes|no]</c></b>: Ustawienie tej opcji na 'yes' jest
     równoważne fladze <c>--mountboot</c> używanej przez genkernel, która jeśli
     jest to wymagane, na czas kompilacji, montuje automatycznie katalog
     <path>/boot/</path>. Jeśli katalog <path>/boot/</path> znajduje się na
     osobnej partycji, należy rozważyć załączenie tej opcji; za jej pomocą nie
     będziemy musieli później pamiętać o jednym istotnym kroku.
   </li>
   <li>
     <b>SAVE_CONFIG=<c>[yes|no]</c></b>: Po skonfigurowaniu jądra wybrane opcje
     zostaną zapisane w pliku <path>.config</path> w drzewie jądra. Ten skrypt
     może być nadpisany lub nawet usunięty podczas następnej kompilacji jądra.
     Wybranie 'yes' jest równoznaczne z flagą <c>--save-config</c> używanej
     przez genkernel oraz zachowuje wybrane ustawienia jądra jako skrypt w
     katalogu <path>/etc/kernels/</path>. Wybranie 'no' zachowuje <e>status
     quo</e>.
   </li>
   <li>
     <b>USECOLOR=<c>[yes|no]</c></b>: Ustawienie tej opcji na 'yes' jest
     równoważne fladze <c>--color</c> używanej przez genkernel, która koloruje
     wyjście genkernela, w celu ułatwienia diagnostyki (jeśli konieczne).
   </li>
   <li>
     <b>DEBUGLEVEL=<c>[0|1|2|3|4|5]</c></b>: Ta opcja zmienia rozwlekłość
     wyjścia produkowanego przez genkernel &mdash; ustawienie tej opcji na '0',
     jest równoważne z <c>--debuglevel=0</c>, wstrzyma całe wyjście
     wyprodukowane przez genkernel do minimum; ustawienie tej opcji na '5', jest
     równoważne z <c>--debuglevel=5</c>, dostarcza użytkownikowi całe wyjście
     wyprodukowane przez genkernel.
   </li>
</ul>

<p>
Poprzez wybranie odpowiednich opcji w <path>/etc/genkernel.conf</path>,
możemy zmniejszyć o połowę liczbę flag, które podajemy genkernelowi z wiersza
poleceń:
</p>

<pre caption="Uruchamianie genkernela (z flagami), po edycji genkernel.conf">
# <i>genkernel --gensplash --kerneldir=/path/to/alternate/kernel/sources --udev\
--kernel-config=/path/to/preferred/configfile --install all</i>
</pre>

<p>
Identyczne rezultaty mogą być uzyskane przy pomocy obydwu podejść jednak to
drugie umożliwia zachowanie ustawień w skrypcie, który może być później
zmieniony.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Network-Booting z genkernelem</title>
<section>
<title>Network Booting z płyty instalacyjnej</title>
<body>

<p>
Narzędzie genkernel może zbudować obrazy jądra oraz initrd, które będą wspierały
network booting lub <e>netboot</e>ing. Jeśli mamy szczęście to powinniśmy już
być w stanie netboot dowolny komputer w środowisko dostarczone przez płytę
instalacyjną.
</p>

<p>
Magia leży w skrypcie genkernela linuxrc: próbuje on <e>netmount</e> płytę
instalacyjną używając NFS. Odtąd <e>skrypty startowe</e> płyty instalacyjnej
widzą płytę tak jakby była obecna lokalnie.
</p>

</body>
</section>
<section>
<title>Budowanie obrazów jądra oraz initrd ze wsparciem dla netbooting</title>
<body>

<p>
Aby załączyć wsparcie dla netbooting, włączamy w jądrze następujące opcje:
</p>

<warn>
Wsparcie dla netbooting w genkernelu jest eksperymentalne, więc może ono
zawierać błędy.
</warn>

<p>
Po pierwsze, obraz jądra musi zawierać sterowniki dla naszej karty sieciowej.
Normalnie sterowniki dla takich urządzeń będą skompilowane jako moduły.
Jednakże, jest to konieczne, aby (dla netbooting) te sterowniki posiadać
wkompilowane w obraz jądra, a <b>nie</b> jako moduły.
</p>

<pre caption="Konfiguracja wsparcia dla naszej karty sieciowej w jądrach serii 2.6.x">
Device Drivers --->
   Networking Support --->
      Ethernet (10 or 100Mbit)  --->
         [*] Ethernet (10 or 100Mbit)
         &lt;*&gt;   the driver for your network card
<comment>(Należy się upewnić, że wybraliśmy &lt;*&gt; a nie
&lt;M&gt;)</comment>
</pre>

<p>
Po drugie, zalecamy włączenie opcji <c>IP: kernel level autoconfiguration</c>
oraz <c>IP: DHCP support</c>. Tym samym ominiemy niepotrzebną złożoność
warstwy, ponieważ adres IP oraz ścieżka NFS do płyty instalacyjnej mogą być
skonfigurowane na serwerze DHCP. Oczywiście, znaczy to tyle, że wiersz
polecenia jądra pozostanie taki sam na dowolnej maszynie &mdash; co jest
bardzo ważne dla <e>etherbooting</e>.
</p>

<pre caption="Konfiguracja wsparcia dla DHCP w jądrach serii 2.6.x">
Device Drivers --->
   Networking Support --->
      Networking options
         [*] TCP/IP networking--->
         [*]   IP: kernel level autoconfiguration
         [*]     IP: DHCP support
<comment>(Te opcje mówią jądru, aby wysłał żądanie do serwera DHCP podczas
startu systemu)</comment>
</pre>

<p>
Dodatkowo należy włączyć wsparcie dla SquashFS, ponieważ większość
nowoczesnych płyt instalacyjnych Gentoo tego wymaga. Wsparcie dla SquashFS
nie jest zawarte w zwykłym drzewie źródła jądra. Aby włączyć SquashFS,
nakładamy odpowiednie łatki na jądro lub instalujemy <c>gentoo-sources</c>.
</p>

<pre caption="Konfiguracja wsparcia dla SquashFS w jądrze">
File systems--->
   Miscellaneous filesystems --->
      [*] SquashFS 2.X - Squashed file system support
</pre>

<p>
Po zakończeniu procesu kompilacji, tworzymy skompresowany <e>tarball</e>
(tar.gz), który zawiera moduły jądra. Ten krok jest konieczny, jeśli wersja
jądra nie jest taka sama jak wersja obrazu jądra na płycie instalacyjnej.
</p>

<pre caption="Tworzenie skompresowanego tarballa zawierającego moduły jądra">
<comment>(Tworzymy plik tar.gz zawierający wszystkie moduły)</comment>
# <i>cd /</i>
# <i>tar -cf /tmp/modules-X.Y.Z.tar.gz /lib/modules/X.Y.Z/</i>
</pre>

<p>
Zależnie od mechanizmu uruchamiania sieciowego, będziemy potrzebowali następujących
kroków:
</p>

<pre caption="Tworzenie obrazu startowego">
<comment>(Tworzenie obrazu etherboot)</comment>
# <i>emerge mknbi</i>
# <i>cd /boot</i>
# <i>mkelf-linux -params="root=/dev/ram0 init=/linuxrc ip=dhcp" kernel... initrd...
> etherboot.img</i>

<comment>(Tworzenie obrazu OpenBoot/SPARC64 TFTP)</comment>
# <i>emerge sparc-utils</i>
# <i>cd /boot</i>
# <i>elftoaout kernel... -o kernel.aout</i>
# <i>piggyback64 kernel.aout System.map-... initrd-...</i>
# <i>mv kernel.aout openboot.img</i> <comment>(To jest obraz startowy)</comment>

<comment>(PXE nie wymaga większej ilości kroków, jądro oraz initrd mogą być
używane tak jak są.)</comment>
</pre>

<p>
W końcu, kopiujemy to jądro na serwer TFTP. Szczegóły zależą od używanej
architektury i wykraczają poza ten przewodnik. Po więcej informacji proszę
spojrzeć do dokumentacji odpowiedniej platformy.
</p>

</body>
</section>

<section>
<title>Ustawianie NFS</title>
<body>

<p>
Aby ustawić zasoby współdzielone NFS, które zawierają płytę instalacyjną,
używamy urządzenia pseudo sieci (ang. loop device), aby zamontować obraz ISO,
po czym kopiujemy zawartość płyty na udostępnione zasoby NFS. Ponieważ
wszystkie pliki tar.gz, które znajdują się w katalogu
<path>/nfs/livecd/add/</path>, zostaną wypakowane przez skrypty genkernela,
więc jedyne co nam pozostało to skopiować plik <c>modules-X.Y.Z.tar.gz</c> do
katalogu <path>/nfs/livecd/add/</path>.
</p>

<pre caption="Przygotowywanie zasobów współdzielonych NFS">
<comment>(Tu zakładamy, że /nfs/livecd jest wyeksportowanym zasobem
współdzielonym NFS)</comment>
# <i>mount /tmp/gentoo-livecd.iso /mnt/cdrom -o loop</i>
# <i>cp -p /mnt/cdrom /nfs/livecd</i>
# <i>umount /mnt/cdrom</i>

<comment>(Kopiujemy modules.tar.gz do /add)</comment>
# <i>mkdir /nfs/livecd/add</i>
# <i>cp /tmp/modules-X.Y.Z.tar.gz /nfs/livecd/add</i>
</pre>

</body>
</section>

<section>
<title>Ustawianie DHCP</title>
<body>

<p>
Obrazy netboot zażądają od serwera DHCP adresu IP oraz parametru root-path.
Obydwa mogą być określone za pomocą adresu MAC, służącego do identyfikacji
maszyn:
</p>

<pre caption="Przykładowe ustawienie pliku dhcpd.conf na kliencie">
...

host netbootableMachine {
         hardware ethernet 11:22:33:44:55:66;
         fixed-address 192.168.1.10;
         option root-path "192.168.1.2:/nfs/livecd";
}
<comment>(Tu 192.168.1.2 jest serwerem NFS, podczas gdy 192.168.1.10 jest
adresem IP od maszyny netbooted)</comment>
...
</pre>

</body>
</section>

<section>
<title>Rozkazy Netbooting</title>
<body>

<p>
Samo Netbooting jest bardzo specyficzne w zależności od platformy. Ważną częścią
jest określenie parametrów <c>ip=dhcp</c> oraz <c>init=/linuxrc</c> w wierszu
polecenia jądra, ponieważ załączą one interfejs sieciowy oraz powiedzą skryptom
initrd, aby zamontowały płytę instalacyjną poprzez NFS.  Poniżej znajdują się
wskazówki dla konkretnych platform:
</p>

<pre caption="Rozkazy Netbooting">
<comment># Etherboot - wkładamy dyskietkę etherboot po czym uruchamiamy
ponownie komputer. Wiersz polecenia jądra został określony podczas
budowania obrazu.)</comment>

<comment># Sparc64 - Wciskamy kombinację klawiszy Stop-A, w wierszu polecenia
boot wpisujemy)</comment>
ok boot net ip=dhcp init=/linuxrc

<comment># PXE - Ustawiamy pxelinux (część syslinux), następnie tworzymy
pxelinux.cfg (domyślnie), który będzie zawierać:</comment>

DEFAULT gentoo
TIMEOUT 40
PROMPT 1

LABEL gentoo
        KERNEL kernel-X.Y.Z
        APPEND initrd=initrd-X.Y.Z root=/dev/ram0 init=/linuxrc ip=dhcp
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Zakończenie</title>

<section>
<title>Automatyzować czy nie?</title>
<body>

<p>
Celem genkernela jest dostarczenie (łatwiejszej) alternatywnej metody
kompilacji jądra. Jak zwykle mamy wolność wyboru czy chcemy czy nie chcemy
automatyzować proces kompilacji jądra.
</p>

</body>
</section>
</chapter>
</guide>
