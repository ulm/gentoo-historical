<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/genkernel.xml,v 1.1 2005/06/30 13:18:51 smithj Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- Orig revision: 1.16 -->
<!-- Translator: Krzysztof Korościk <soltys@ucz.tme.szczecin.pl> -->
    <!-- Title: Konfiguracja jądra genkernel -->
<!-- Status: Finished -->

<!-- $Id: genkernel.xml,v 1.1 2005/06/30 13:18:51 smithj Exp $ -->

<guide link="/doc/pl/genkernel.xml" lang="pl" >
<title>Konfiguracja jądra genkernel</title>

<author title="Autor">
  <mail link="plasmaroo@gentoo.org">Tim Yamin</mail>
</author>
<author title="Tłumacz">
    Krzysztof Korościk
</author>

<abstract>
Dokładny opis wszystkich funkcji programu genkernel.
</abstract>

<license/>

<version>1.1.2.3</version>
<date>2005-06-26</date>

<chapter>
<title>Wstęp</title>
<section>
<title>Wprowadzenie</title>
<body>

<p>
Genkernel został stworzony w celu umożliwenia użytkownikom, którzy nie mają
doświadczenia z samodzielnym kompilowaniem kernela korzystania z podobnej
konfiguracji jak ta użyta na płytach instalacyjnych Gentoo, gdzie cały
sprzęt jest wykrywany automatycznie.
</p>

<p>
Genkernel umożliwia korzystanie ze sprzętu, który wymaga wcześniejszego
załadowania odpowiednich sterowników. W związku z tym, że znajdują się w nim
wszystkie dostępne moduły, również częste zmiany konfiguracji nie zmuszają
użytkowników do ponownej kompilacji jądra. 
</p>

</body>
</section>
<section>
<title>Dla kogo jest genkernel?</title>
<body>

<p>
Genkernel to dobry wybór dla osób, które nie mają zbyt wielkiego doświadczenia
z samodzielną kompilacją jądra oraz dla tych, którzy nie znają dokładnie swojej
konfiguracji sprzętowej. 
</p>

<p>
Założeniem genkernel jest to, aby było to rozwiązanie bardzo uniwersalne,
dlatego używa on bardzo kompleksowej konfiguracji, włączającej niemal wszystkie
dostępne moduły i sterowniki. W związku z tym to jądra konfigurowane
samodzielnie i pod określony sprzęt są znacznie szybsze, gdyż nie zawierają
wielu nadmiarowych sterowników. 
</p>

<p>
Genkernel obecnie nie daje możliwości uruchamiania systemu z partycji
typu LVM2/EVMS2. W chwili obecnej zalecane dla ich użytkowników jest korzystanie
kernela skompilowanego samodzielnie.
</p>

</body>
</section>
<section>
<title>Instalowanie genkernela</title>
<body>

<p>
Do instalacji genkernela wystarczy wpisanie polecenia <c>emerge genkernel</c>.
Jeśli korzystamy w tym celu z prekompilowanego pakietu, np. z GRP, to musimy
również podać do tego polecenia paramter <c>-k</c>. W związku z tym, że w GRP
znajdują się znacznie starsze wersje pakietów niż ta na podstawie której pisany
jest ten tekst należy zapoznać się z odpowiednią częścią <uri
link="/doc/en/handbook/handbook-x86.xml?part=1&amp;chap=10">Podręcznika
Gentoo</uri> oraz z wynikiem polecenia <path>genkernel --help</path> w celu
dobrania odpowiednich opcji.
</p>

</body>
</section>
<section>
<title>Obsługiwane platformy</title>
<body>

<p>
Genkernel w wersji 3.0.2 działa na następujących platformach: alpha,
amd64, parisc, parisc64, ppc, ppc64, sparc, sparc64, oraz x86.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Używanie genkernela</title>
<section>
<title>Wprowadzenie</title>
<body>

<p>
Genkernel jest zaprojektowany do pracy w trzech trybach:
</p>

<ul>
  <li>tryb "all": tworzy bzImage oraz initrd</li>
  <li>tryb "kernel": tworzy tylko bzImage</li>
  <li>tryb "initrd": tworzy tylko initrd</li>
</ul>

<p>
Większość użytkowników będzie używać trybu  "all", który uruchamia tryb "kernel"
i tryb "initrd". Warto <b>zauważyć</b>, że  "kernel" i "initrd" to obecnie tylko
aliasy dla trybu "all", więc ich użycie nie przyniesie żadnych poważnych zmian.
</p>

<p>
Pomimo tego, że genkernel został zaprojektowany z myślą o maksymalnym ułatwieniu
życia użytkownikom, zawiera również wiele opcjonalnych flag, dzięki którym można
go na wiele sposobów konfigurować.
</p>

</body>
</section>
<section>
<title>Flagi genkernela</title>
<body>

<p>
Genkernel posiada następujące opcjonalne flagi:
</p>

<ul>
  <li>
    <b>--kernel-as=<c>Assembler</c></b>: Określa assembler, który 
    zostanie użyty do kompilacji kernela.
  </li>
  <li>
    <b>--kernel-cc=<c>Kompilator</c></b>: Określa kompilator, który 
    zostanie użyty do kompilacji kernela.
  </li>
  <li>
    <b>--kernel-ld=<c>Konsolidator</c></b>: Określa program łączący, który
    zostanie użyty do kompilacji kernela.
  </li>
  <li>
    <b>--kernel-make=<c>Make</c></b>: Określa program GNU make, który
    zostanie użyty do kompilacji kernela.
  </li>
</ul>

<ul>
  <li>
    <b>--utils-as=<c>Assembler</c></b>: Określa assembler, który 
    zostanie użyty do kompilacji dodatkowych narzędzi.
  </li>
  <li>
    <b>--utils-cc=<c>Kompilator</c></b>: Określa kompilator, który 
    zostanie użyty do kompilacji dodatkowych narzędzi.
  </li>
  <li>
    <b>--utils-ld=<c>Konsolidator</c></b>: Określa program łączący, który
    zostanie użyty do kompilacji dodatkowych narzędzi.
  </li>
  <li>
    <b>--utils-make=<c>Make</c></b>: Określa program GNU make,  
    który zostanie użyty do kompilacji dodatkowych narzędzi.
  </li>
</ul>

<ul>
  <li>
    <b>--makeopts=<c>-Prace</c></b>: Określa flagi, które zostaną 
    przekazane do GNU make, kiedy kernel i narzędzia będą kompilowane.
  </li>
</ul>

</body>
</section>
<section>
<title>Flagi jądra genkernel</title>
<body>

<p>
Poniżej znajduje się lista dostępnych flag, część z nich można również podać z
w postaci ekwiwalentów z parametrem <c>--no-<b>opcja</b></c>.
</p>

<ul>
  <li>
    <b>--callback="echo Witaj"</b>: To polecenie wywołuje podane polecenia
    po tym jak kernel i powiązane z nim moduły zostaną zbudowane, ale jeszcze
    przed utworzeniem initrd. Jest to użyteczne jeśli trzeba załadować
    zewnętrzne moduły do initrd przez zemergowanie stosownych rzeczy.
  </li>
  <li>
    <b>--<c>no-</c>clean</b>: To uruchomi <e>lub nie uruchomi</e>
    <c>make clean</c> przed kompilacją kernela, powodując, 
    że wszystkie pliki obiektów i zależności zostaną usunięte.
  </li>
  <li>
    <b>--<c>no-</c>mrproper</b>: To uruchomi <e>lub nie uruchomi</e>
     <c>make mrproper</c> przed kompilacją kernela, powodując,
    że wszystkie pliki obiektów i zależności <b>oraz
    konfiguracja</b> zostaną usunięte.
  </li>
</ul>

<ul>
  <li>
    <b>--kerneldir=<path>/ścieżka/do/źródeł</path></b>: To określa 
    alternatywna lokalizacje dla żródeł kernela, zamiast domyślnej lokalizacji 
    <path>/usr/src/linux</path>.
  </li>
  <li>
    <b>--kernel-config=<path>/ścieżka/do/pliku_z_konfiguracją</path></b>: 
    To określa alternatywny plik z konfiguracją, jaki ma zostać użyty;
    rzadziej stosowane niż <path>/ścieżka/do/źródeł/.config</path> czyli
    domyślnej lokalizacji tego pliku.
  </li>
</ul>

<ul>
  <li>
   <b>--<c>no-</c>bootsplash</b>: Dodaje <e>lub nie dodaje</e> obsługi
   bootsplasha  w initrd budowanym przez genkernel. Nie wszystkie
   architektury wspierają obecnie bootsplasha, kernel ze wsparciem dla
   bootsplasha jest również wymagany.
  </li>
  <li>
    <b>--<c>no-</c>menuconfig</b>: Uruchamia <e>lub nie uruchamia</e>
    konfiguracji kernela  opartej na ncurses przed budową kernela, po<c>make 
    oldconfig</c>.
  </li>
</ul>

<ul>
  <li>
    <b>--no-initrdmodules</b>: Zabrania dodawania modułów do tworzonego initrd.
  </li>
  <li>
    <b>--<c>no-</c>install</b>: Instaluje <e>lub nie instaluje</e> kernela,
    modułów oraz initrd po zakończeniu kompilacji.
  </li>
</ul>

</body>
</section>
<section>
<title>Genkernel - flagi wszechstronne</title>
<body>

<p>
Oto flagi nie pasujące do pozostałych dwóch kategorii:
</p>

<ul>
  <li>
    <b>--arch-override=<c>Architektura</c></b>: Ta flaga może zostać użyta
    do określenia genkernelowi dla jakiej architektury ma zbudować kernel.
    Jeżeli mechanizm automatycznego wykrywania zawiedzie (Powiadomcie nas    
    jeśli tak się stanie!) lub jeśli zechcemy skompilować jądro na inną
    platformę.
  </li>
</ul>

<ul>
  <li>
    <b>--busybox-config=<path>/ścieżka/do/konfiguracji_busybox</path></b>:    
    Zastępuje standardową konfigurację busyboxa podanym plikiem
  </li>
  <li>
    <b>--busybox-bin=<path>/ścieżka/do/busybox-binary.tar.bz2</path></b>:
    Opcja ta oznacza, że busybox nie zostanie skompilowany, a zamiaste tego
    zostanie zainstalowany podany prekompilowany pakiet. Należy pamiętać, że
    busybox <e>MUSI</e> być kompilowany statycznie!
  </li>
</ul>

<ul>
  <li>
    <b>--minkernpackage=<path>/ścieżka/do/pliku_wyjścia/kernel.tar.bz2</path></b>:
    Ta flaga tworzy tarball z kernelem o nazwie <path>kernel</path>, oraz 
    initrd o nazwie <path>initrd</path> w podanym miejscu. Żadne informacje 
    o ścieżkach lub modułach nie zostaną zawarte w tarballach.
  </li>
</ul>

</body>
</section>
<section>
<title>Uruchamianie genkernela</title>
<body>

<p>
Do uruchomienia genkernela wystarczy wpisanie polecenia o tej samej nazwie z
odpowiednimi flagami i z konta roota.
</p>

<pre caption="Uruchamianie genkernela">
# genkernel --menuconfig --no-clean --no-install --bootsplash all
<comment>(Zbuduje kernel, pytając jak skonfigurować go do
wlasnych potrzeb i pozostawi skompilowane pliki, włączając
bootsplasha, ale niczego nie instalując)</comment>
</pre>

<p>
Aby genkernel zainstalował jądro, trzeba sie upewnić, że partycja
<path>/boot</path> jest zamontowana - nowsze wersje genkernela automatycznie
spróbują to zrobić jeśli zmienna MOUNTBOOT w pliku
<path>/etc/genkernel.conf</path> ma wartość "yes".
</p>

<pre caption="Ręcznie montowanie /boot">
<comment>(Jeżeli /boot ma poprawny wpis w /etc/fstab)</comment>
# mount /boot
<comment>(... w przeciwnym wypadku, dla dysków IDE:)</comment>
# mount /dev/hda1 /boot
<comment>(... a dla dysków SCSI:)</comment>
# mount /dev/sda1 /boot
</pre>

</body>
</section>
<section>
<title>Konfigurowanie genkernela tak, aby współpracował z programem
ładującym</title>
<body>

<p>
Aby genkernel poprawnie współpracował z programem ładującym należy dokonać
czterech zmian.
</p>

<ol>
  <li>
    Należy dodać <c>root=/dev/ram0</c> oraz <c>init=/linuxrc</c> do  
    parametrów kernela przekazanych do initrd.
  </li>
  <li>
    Należy dodać <c>real_root=/dev/hda3</c>, na przykład do parametrów kernela  
    przekazywanych do initrd, gdzie <path>/dev/hda3</path> to ściezka do
    partycji głównej ("/").
  </li>
  <li>
    Jeśli używamy bootsplasha, dodać właściwą rozdzielczość jak np. 
    <c>vga=0x317</c> do parametrów przekazywanych przez kernel oraz dodać
    <c>splash=verbose</c> lub <c>splash=silent</c> w zależności od
    żądanego stopnia szczegółowości wyświetlanych informacji.
  </li>
  <li>
    Initrd musi zostać dodany zgodnie z wymaganiami programu ładującego: <uri 
    link="/doc/pl/handbook/handbook-x86.xml?part=1&amp;chap=10">Podręcznik 
    Gentoo</uri> zawiera dokładny tego opis.
  </li>
</ol>

</body>
</section>
<section>
<title>Pliki konfiguracyjne kernela</title>
<body>

<p>
Genkernel zapisuje konfigurację jądra w pliku <path>/etc/kernels</path> i używa
go przy ponownym użyciu <c>genkernel</c>. Jesli chcemy uruchomić genkernel
ponownie z domyślnymi ustawieniami, należy zmienić nazwę pliku w
<path>/etc/kernels</path>. Genkernel użyje wtedy pliku konfiguracyjnego
umieszczonego w <path>/usr/share/genkernel/&lt;arch&gt;</path>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Przeniesienie genkernela</title>
<section>
<title>Wprowadzenie</title>
<body>

<p>
 Jeśli na daną architekturę są dostępne wszystkie wymagane przez
genkernel biblioteki i narzędzia, czyli jądro Linux, kompilator, GNU make i
busybox, to można przystąpić do pracy.
</p>

<p>
Każda z architektur posiada własny plik konfiguracyjny genkernela,
<path>/usr/share/genkernel/$nazwa_architektury</path>.
</p>

</body>
</section>
<section>
<title>Uruchamianie systemu</title>
<body>

<ol>
  <li>
    Program ładuje obraz genkernela zbudowany ze specifikacjami plików 
    konfiguracyjnych w katalogach genkernel oraz plik initrd również
    przygotowany wcześniej przez genkernel.
  </li>
  <li>
    Kernel uruchamia się, przydzielając małą ilość pamięci RAM, w której
    uruchamia się busybox przeszukujący system w poszukiwaniu modułów z listy
   modules_load danej architektury.
  </li>
  <li>
    Na koniec, uruchamia się właściwy system zakładając oczywiście, że parametr
   <c>real_root</c>, czyli nazwa urządzenia, na którym znajduje się główna
   partycja jest podany prawidłowo.
  </li>
</ol>

</body>
</section>
<section>
<title>Pliki konfiguracyjne</title>
<body>

<ul>
  <li>
    <path>busy-config</path>: Ta opcja pozwala na skonfigurowanie busyboxa dla
    danej architektury.
  </li>
  <li>
    <path>config.sh</path>: Ten skrypt służy do ustawiania zmiennych 
    genkernela.
  </li>
  <li>
    <path>modules_load</path>: Ten plik zawiera listę wyznaczonych modułów
    ładowanych dla urządzeń SCSI, FireWire, ATA RAID oraz PCMCIA. 
    Jeżeli żadne z nich nie jest dostępne, nie należy nic w nim dopisywać.
  </li>
</ul>

<ul>
  <li>
    <path>kernel-config</path>: Standardowa konfiguracja kernela używana dla 
    każdej wersji.
  </li>
  <li>
    <path>kernel-config-2.4</path>: Standardowa konfiguracja kernela używana dla
    jąder z serii 2.4 . 
  </li>
  <li>
    <path>kernel-config-2.6</path>: Standardowa konfiguracja kernela używana dla
     kerneli z serii 2.6. 
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
