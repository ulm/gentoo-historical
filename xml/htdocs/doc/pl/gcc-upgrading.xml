<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/gcc-upgrading.xml,v 1.7 2006/09/07 11:04:53 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/gcc-upgrading.xml" lang="pl">
<title>Aktualizacja GCC w Gentoo</title>

<author title="Autor">
  <mail link="amne@gentoo.org">Wernfried Haas</mail>
</author>
<author title="Autor">
  <mail link="jkt@gentoo.org">Jan Kundrát</mail>
</author>
<author title="Redaktor">
  <mail link="mark@halc0n.com">Mark Loeser</mail>
</author>
<author title="Tłumaczenie">
  <mail link="prizman@o2.pl">Artur Czepiel</mail>
</author>

<abstract>
Ten przewodnik ma za zadanie przeprowadzić użytkownika przez proces
uaktualniania GCC w Gentoo Linux.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>17</version>
<date>2006-09-06</date>

<chapter id="intro">
<title>Wstęp</title>
<section>
<title>Uaktualnienie GCC</title>
<body>

<p>
Dlaczego należy uaktualniać GCC? Kompilator jest podobny do innych pakietów
zainstalowanych w systemie, jest tylko trochę ważniejszy od reszty. Powinniśmy
zatem aktualizować GCC jeżeli tylko pojawi się nowsza wersja, która naprawia
część błędów poprzedniej lub posiada nowe, ważne dla nas funkcje. Jeżeli jednak
mimo wszystko chcemy mieć stare GCC możemy odkładać uaktualnienie dopóki ta
wersja GCC będzie w pełni wspierana przez Gentoo.
</p>

<p>
Jeżeli chcemy zainstalować nowszą wersję GCC, nasz system nie zacznie jej
używać dopóki go odpowiednio nie skonfigurujemy. Zmiana nie może zostać
przeprowadzona automatycznie i bez udziału użytkownika, ponieważ wymaga od
niego podjęcia dodatkowych czynności. Jeżeli zdecydujemy jednak, aby nie
dokonywać zmiany, Portage będzie dalej pracowało ze starszą wersją kompilatora,
dopóki nie zmienimy jej na nowszą lub dopóki nie usuniemy z systemu starszej
wersji GCC.
</p>

<p>
Ten poradnik opisuje najważniejsze kroki potrzebne do przygotowania
bezproblemowej aktualizacji kompilatora w Gentoo. Specjalna część jest
dedykowana <uri link="#upgrade-3.3-to-3.4">aktualizacji GCC 3.3 do GCC 3.4
</uri> oraz problemom związanym z <c>libstdc++</c>. Druga specjalna część
skierowana jest do użytkowników, którzy <uri link="#first-install">po raz
pierwszy instalują Gentoo</uri> ze stage3, gdy wydano w międzyczasie nową dużą
wersję GCC.
</p>

<warn>
Aktualizacja GCC-3.4 do GCC-4.1 i nowszych wymaga wykonania serii <uri
link="#upgrade-general">specyficznych kroków</uri>, gdyż ich ABI różnią się
między sobą.
</warn>

</body>
</section>
</chapter>

<chapter id="upgrade-general">
<title>Ogólne wskazówki dotyczące aktualizacji</title>
<section>
<title>Wstęp</title>
<body>

<impo>
Jeżeli jest to zmiana z GCC-3.3 na GCC-3.4, szczegółowy opis znajduje się pod
<uri link="#upgrade-3.3-to-3.4">tym adresem</uri>.
</impo>

<impo>
Informacje na temat aktualizacji GCC tuż po świeżej instalacji Gentoo znajdują
się <uri link="#first-install">w osobnej sekcji</uri>.
</impo>

<p>
Generalnie mówiąc, uaktualnienia w zakresie jednej wersji, poprawiające tylko
drobne błędy (np. z 3.3.5 do 3.3.6) powinny być bezpieczne. Zwykle wystarcza
wtedy instalacja nowej wersji i przekonfigurowanie systemu tak, aby jej używał
oraz przebudowanie jedynego pakietu, który w takich wypadkach przebudowania
wymaga, <c>libtool</c>. Niektóre aktualizacje GCC łamią kompatybilność
skompilowanych programów. W takich przypadkach może być wymagana przebudowa
także innych pakietów, czasem całego toolchaina, a w ekstremalnych przypadkach
nawet całego systemu.
</p>

<p>
Kiedy mówiliśmy o potrzebie zmiany kompilatora na nowszą wersję, wspominaliśmy,
że nie odbywa się to automatycznie.  Wyjątkiem są tu uaktualnienia w zakresie
tej samej wersji (np. z 3.3.5 do 3.3.6) - w takim przypadku nie używa się kilku
slotów z wersjami, ponieważ GCC jest automatycznie przestawiane na nowszą
wersję. Instalowanie w takim wypadku nowego GCC na inny slot nie miało sensu,
gdyż niewielu użytkowników tego potrzebowało.
</p>

<pre caption="Aktualizacja GCC">
# <i>emerge -uav gcc</i>

<comment>(Należy zmienić "i686-pc-linux-gnu-4.1.1" na odpowiednią wersję GCC oraz ustawienie zmiennej CHOST)</comment>
# <i>gcc-config i686-pc-linux-gnu-4.1.1</i>
# <i>source /etc/profile</i>

<comment>Jeżeli aktualizacja odbywała się z gcc 3 do 4 (np. z wersji 3.4.6 do 4.1.1) należy uruchomić fix_libtool_files.sh ręcznie</comment>
# <i>fix_libtool_files.sh 3.4.6</i>

<comment>(Przebudowanie pakietu libtool)</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
Aby być w zupełności pewnym, że system jest w pełni zdrowy, <e>należy</e>
przebudować podstawowe składniki systemu czyli tzw. toolchain oraz resztę
pakietów z grup system i world. W ten sposób zrobimy użytek z naszego nowego
kompilatora.
</p>

<pre caption="Przekompilowanie systemu">
# <i>emerge -eav system</i>
# <i>emerge -eav world</i>
</pre>

<p>
Teraz możemy bezpiecznie usunąć stare GCC z systemu. (Zastępujemy
<c>=sys-devel/gcc-3.4*</c> odpowiednią wersją GCC)
</p>

<pre caption="Usuwanie starszej wersji GCC">
# <i>emerge -aC =sys-devel/gcc-3.4*</i>
</pre>

<impo>
GCC 4 i nowsze nie jest w stanie skompilować jądra 2.4. Jeśli chce się zatem
korzystać ze starszych jąder, nie należy usuwać starego kompilatora.
</impo>

</body>
</section>
</chapter>

<chapter id="upgrade-3.3-to-3.4">
<title>Aktualizacja z GCC-3.3 do 3.4 i nowszych</title>
<section>
<title>Wstęp</title>
<body>

<p>
Aktualizacja GCC 3.3 do wersji 3.4 i nowszych jest trochę bardziej
skomplikowana, ponieważ mogą wystąpić pewne problemy z biblioteką
<c>libstdc++</c>.
</p>


</body>
</section>
<section id="upgrade-3.3-to-3.4-choices">
<title>Wybór metody aktualizacji</title>
<body>

<impo>
Jeżeli aktualizacja odbywa się z gcc 3.4 do 4.1, należy postępować według <uri
link="#upgrade-general">ogólnych wskazówek</uri> dotyczących aktualizacji.
</impo>

<impo>
Jeśli aktualizacja odbywa się na komputerze SPARC, potrzebne będzie <uri
link="#upgrade-3.3-to-3.4-emerge-e">całkowite przebudowanie systemu</uri> w
związku z pewnymi wewnętrznymi <uri
link="http://gcc.gnu.org/gcc-3.4/sparc-abi.html">zmianami ABI</uri> w sposobie
w jaki GCC przekazuje parametry.
</impo>

<p>
Jeżeli aktualizacja odbywa się z gcc 3.3 do 3.4, to wtedy mamy dwie możliwości
aktualizacji naszego systemu. <uri
link="#upgrade-3.3-to-3.4-revdep-rebuild">Pierwsza metoda</uri> jest szybsza i
wymaga użycia programu <c>revdep-rebuild</c> wchodzącego w skład pakietu
<c>gentoolkit</c>, podczas gdy <uri link="#upgrade-3.3-to-3.4-emerge-e">druga
metoda</uri> przebudowuje wszystkie pakiety naszego systemu. Wybór metody
pozostawiamy użytkownikowi. W większości przypadków wystarcza pierwsza metoda.
</p>

<p>
Jeżeli aktualizacja odbywa się z gcc 3.3 do 4.1, to nie należy używać metody
opartej na revdep-rebuild, ale wykonać <uri
link="#upgrade-3.3-to-3.4-emerge-e"> kompletną przebudowę systemu</uri>.
</p>

</body>
</section>
<section id="upgrade-3.3-to-3.4-revdep-rebuild">
<title>Użycie revdep-rebuild</title>
<body>

<p>
Ta metoda wymaga zainstalowania pakietu <c>gentoolkit</c>. Zainstalujemy
najnowsze GCC oraz skonfigurujemy system tak, aby go używał. Przebudujemy
również pakiet <c>libtool</c>, aby upewnić się, że toolchain będzie w dobrej
formie.
</p>

<pre caption="Instalacja gentoolkit oraz aktualizacja GCC">
# <i>emerge -an gentoolkit</i>
# <i>emerge -uav gcc</i>
<comment>(Należy zastąpić i686-pc-linux-gnu-3.4.5 odpowiednią wersją GCC i nazwą CHOST)</comment>
# <i>gcc-config i686-pc-linux-gnu-3.4.5</i>
# <i>source /etc/profile</i>

<comment>(Przebudowanie pakietu libtool)</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
Najpierw sprawdzimy, które pakiety chce przebudować revdep-rebuild, później
każemy mu to zrobić. Może to zająć trochę czasu.
</p>

<pre caption="Użycie revdep-rebuild">
# <i>revdep-rebuild --library libstdc++.so.5 -- -p -v</i>
# <i>revdep-rebuild --library libstdc++.so.5</i>
</pre>

<note>
Mogą pojawić się problemy z nieistniejącymi wersjami pakietów, ponieważ mogły
się one przedawnić lub zostać zamaskowane. W takim przypadku może zajść
potrzeba uruchomienia <c>revdep-rebuild</c> z opcją <c>--package-names</c>.
Sprawia ona, że <c>revdep-rebuild</c> instaluje pakiety w najnowszej wersji,
nieważne jaka wersja jest obecnie zainstalowana w systemie.
</note>

<p>
Aby zadbać o kompatybilność już skompilowanych aplikacji napisanych w C++ oraz
wszelkich pakietów jakie revdep-rebuild mógłby opuścić,
<c>sys-libs/libstdc++-v3</c> musi zostać przebudowane przed odinstalowaniem GCC
3.3 z systemu.
</p>

<pre caption="Instalacja libstdc++-v3 oraz oczyszczanie systemu">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
# <i>emerge -aC =sys-devel/gcc-3.3*</i>
</pre>

</body>
</section>
<section id="upgrade-3.3-to-3.4-emerge-e">
<title>Użycie emerge -e</title>
<body>

<p>
Ta metoda zajmuje znacznie więcej czasu, zakłada bowiem przekompilowanie całego
systemu. Najpierw uaktualnimy GCC i skonfigurujemy system tak, aby z niego
korzystał.
</p>

<pre caption="Aktualizacja GCC">
# <i>emerge -uav gcc</i>
<comment>(Należy zastąpić i686-pc-linux-gnu-3.4.5 odpowiednią wersją GCC i nazwą CHOST)</comment>
# <i>gcc-config i686-pc-linux-gnu-3.4.5</i>
# <i>source /etc/profile</i>

<comment>Jeżeli aktualizacja odbywała się z gcc 3 do 4 (np. z wersji 3.3.6 do 4.1.1) należy uruchomić fix_libtool_files.sh ręcznie</comment>
#<i>fix_libtool_files.sh 3.3.6</i>

<comment>(Przebudowanie pakietu libtool)</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
<c>sys-libs/libstdc++-v3</c> musi zostać przebudowane przed odinstalowaniem GCC
3.3 z systemu, co zapewni kompatybilność już skompilowanych aplikacji
napisanych w C++.
</p>

<pre caption="Instalacja libstdc++-v3">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
</pre>

<p>
Najpierw przekompilujemy pakiety z grupy system, a następnie pakiety z grupy
world. Może to zająć trochę czasu, zależnie od ilości zainstalowanych pakietów,
Przekompilowane zostaną podstawowe składniki systemu (jak np. binutils, glibc
czyli tak zwany toolchain) oraz podstawowe pliki systemowe. Następnie,
wykorzystując nowy toolchain, zostanie przekompilowana reszta plików, wliczając
w to sam toolchain.
</p>

<pre caption="Przekompilowanie grup system i world">
# <i>emerge -e system</i>
# <i>emerge -e world</i>
</pre>

<p>
W tym momencie możemy bezpiecznie usunąć stare GCC z systemu.
</p>

<pre caption="Oczyszczanie systemu">
# <i>emerge -aC =sys-devel/gcc-3.3*</i>
</pre>

</body>
</section>
</chapter>

<chapter id="first-install">
<title>Aktualizacja GCC tuż po pierwszej instalacji</title>
<section>
<title>Wprowadzenie</title>
<body>

<p>
Aktualizacja GCC po instalacji systemu za pomocą archiwum stage3 to prosta
sprawa. Użytkownicy, którzy dopiero co zainstalowali system zwykle nie mają
zbyt wielu pakietów zlinkowanych ze starą wersją GCC. Poniższy przykład dotyczy
aktualizacji z GCC 3.3 do GCC 3.4 i nowszych. Niektóre polecenia mogą być inne
w przypadku, gdy aktualizuje się pomiędzy innymi niż przykładowe wersjami GCC.
Na przykład nazwy bibliotek używane poniżej dla <c>revdep-rebuild</c> są
specyficzne dla GCC 3.3, podobnie jak potrzeba instalowania
<c>libstdc++-v3</c>.
</p>

<p>
Jeśli użytkownik nie dokona do tego momentu żadnych zmian w swoim systemie,
aktualizacja GCC nie będzie stanowiła dużego problemu. Podobnie jak przy
zwykłej aktualizacji można wybrać tu jedną ze ścieżek, z tym że tutaj
aktualizacje nie będzie tak problematyczna. <uri
link="#first-install-revdep-rebuild">Pierwsza metoda</uri> jest szybsza gdyż
wykorzystuje narzędzie <c>revdep-rebuild</c> z pakietu <c>gentoolkit</c>, który
przebudowuje tylko te pakiety, które są zlinkowane ze starymi bibliotekami.
<uri link="#first-install-emerge-e">Druga metoda</uri> to przebudowanie całego
systemu za pomocą nowego GCC. Cały proces zajmuje znacznie więcej czasu. Taka
przebudowa zwykle nie jest konieczna, a opisujemy ją tutaj tylko po to, aby
opis był kompletny.
</p>

<p>
Pierwsze kroki są takie same dla obu metod.
</p>

<pre caption="Aktualizacja GCC">
# <i>emerge -uav gcc</i>
<comment>(Należy zastąpić "i686-pc-linux-gnu-3.4.5" odpowiednią wersją GCC i nazwą CHOST)</comment>
# <i>gcc-config i686-pc-linux-gnu-3.4.5</i>
# <i>source /etc/profile</i>

<comment>(Ponowna kompilacja libtool)</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
Aby zapewnić kompatybilność ze starszymi programami pisanymi w C++, należy
zainstalować <c>sys-libs/libstdc++-v3</c>.
</p>

<pre caption="Instalowanie libstdc++-v3">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
</pre>

</body>
</section>

<section id="first-install-revdep-rebuild">
<title>Użycie revdep-rebuild</title>
<body>

<p>
Ta metoda wymaga zainstalowania pakietu <c>gentoolkit</c>. Następnie uruchomimy
polecenie <c>revdep-rebuild</c> i przeskanujemy zainstalowane pakiety w
poszukiwaniu tych, które trzeba będzie przebudować, a następnie je
przebudujemy.
</p>

<pre caption="Instalowanie gentoolkit i uruchamianie revdep-rebuild">
# <i>emerge -an gentoolkit</i>
# <i>revdep-rebuild --library libstdc++.so.5 -- -p -v</i>
# <i>revdep-rebuild --library libstdc++.so.5</i>
</pre>

<note>
Mogą pojawić się problemy związane z nieistniejącymi wersjami niektórych
pakietów, w związku z tym, że część z nich będzie zamaskowana lub nieaktualna.
W takim wypadku należy skorzystać z opcji <c>--package-names</c> przy
uruchamianiu <c>revdep-rebuild</c>. Spowoduje to, że pakiety będą
przebudowywane na podstawie tylko ich nazwy, a nie nazwy i numeru wersji.
</note>

</body>
</section>
<section id="first-install-emerge-e">
<title>Użycie emerge -e</title>
<body>

<p>
Druga metoda jest znacznie wolniejsza od pierwszej. Polega na przebudowaniu
całego całego systemu. Nie jest to konieczne, ale może być całkiem sensowne gdy
jednocześnie zmieni się na przykład ustawienia CFLAGS lub inne zmienne w pliku
make.conf.
</p>

<p>
W związku z tym, że wszystkie te czynności są wykonywane tuż po świeżej
instalacji systemu, nie trzeba przebudowywać całej kategorii <c>world</c>,
ponieważ jego przebudowa zostanie dokonana przy okazji aktualizacji systemu.
Część użytkowników mimo wszystko woli przebudować cały world zamiast tylko
systemu, aby upewnić się, że zostaną przebudowane wszystkie pakiety bez
wyjątku.
</p>

<pre caption="Przebudowa systemu">
# <i>emerge -e system</i>
</pre>

</body>
</section>
<section id="first-install-cleaning-up">
<title>Porządkowanie systemu</title>
<body>

<p>
W tym momencie można już bezpiecznie usunąć stare wersje GCC. W przykładach
należy zastąpić wpis <c>YOUR-NEW-GCC-VERSION</c> wersją GCC do której
aktualizowano system.
</p>

<pre caption="Porządkowanie systemu">
# <i>emerge -aC "&lt;sys-devel/gcc-YOUR-NEW-GCC-VERSION"</i>
</pre>

</body>
</section>
</chapter>

<chapter id="common-pitfalls">
<title>Częste problemy</title>
<section>
<body>

<p>
Przed aktualizacją (nieważne którą metodą) należy wyłączyć <c>distcc</c> (jeśli
się go używa). Mieszanie wersji kompilatorów może spowodować <e>problemy z
kompilacją</e>. Nie jest to wymagane w przypadku ccache, ponieważ obiekty z
ccache zostaną i tak unieważnione.
</p>

<p>
Moduły jądra systemu (np. <c>app-emulation/qemu-softmmu</c>) przekompilowane
przy pomocy GCC 4.1 nie będą działać ze starym kernelem. Przekompilowanie jądra
za pomocą GCC 4.1 rozwiązuje ten problem.
</p>

<p>
Jeśli aktualizacja odbywa się na komputerze SPARC, należy wpisać <c>silo -f</c>
po każdej przebudowie systemu.
</p>

</body>
</section>
<section>
<title>Najczęstsze problemy</title>
<body>

<p>
Jeżeli pojawi się błąd: <e>libtool: link: `
/usr/lib/gcc-lib/i686-pc-linux-gnu/3.3.6/libstdc++.la' is not a valid libtool
archive</e>, należy uruchomić <c>/sbin/fix_libtool_files.sh 3.3.6</c>
(zastępując 3.3.6 odpowiednią wersją).
</p>

<p>
Jeżeli pojawi się błąd: <e>/usr/bin/gcc-config: line 632:
/etc/env.d/gcc/i686-pc-linux-gnu-3.3.5: No such file or directory</e> należy
usunąć <path>/etc/env.d/gcc/config-i686-pc-linux-gnu</path> oraz uruchomić
<c>gcc-config</c> jeszcze raz, a następnie wpisać <c>source /etc/profile</c>.
Można to robić jednak tylko wtedy jeżeli nie zostały ustawione żadne
kompilatory skrośne.
</p>

<p>
Jeżeli kompilacja jakiegoś pakietu podczas wykonywania <c>emerge -e system</c>
lub <c>emerge -e world</c> nie powiedzie się, można wznowić ją poleceniem
<c>emerge --resume</c>. Jeżeli za każdym razem kompilacja nie wychodzi, można
ominąć pakiet używając <c>emerge --resume --skipfirst</c>. W międzyczasie nie
wolno uruchamiać emerge w innym celu. W przeciwnym wypadku nastąpi utrata
informacji potrzebnych do wznowienia kompilacji grup system lub world i trzeba
będzie zaczynać te kompilacje od początku.
</p>

<p>
Jeżeli pojawia się błąd: <e>spec failure: unrecognized spec option</e> podczas
aktualizacji kompilatora, należy z powrotem zmienić domyślny kompilator,
wyzerować opcję <c>GCC_SPECS</c> i ponownie zaktualizować GCC:
</p>

<pre caption="Odzyskiwanie początkowych ustawień">
# <i>gcc-config 1</i>
# <i>source /etc/profile</i>
# <i>unset GCC_SPECS</i>
# <i>emerge -uav gcc</i>
</pre>

</body>
</section>
</chapter>
</guide>
