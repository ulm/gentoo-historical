<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/vserver-howto.xml,v 1.6 2005/08/21 00:43:04 rane Exp $ -->

<guide link="/doc/pl/vserver-howto.xml" lang="pl">
<title>Opis technologii Gentoo Linux-VServer</title>

<author title="Autor">
  <mail link="hollow@gentoo.org">Benedikt Boehm</mail>
</author>
<author title="Edytor">
  <mail link="fox2mike@gentoo.org">Shyam Mani</mail>
</author>
<author title="Tłumacz">
   Paweł Kwiatkowski
</author>

<abstract>
W poradniku nauczymy się konfigurować podstawowy wirtualny serwer, wykorzystując
do tego technologię Linux-VServer.
</abstract>

<license/>

<version>1.0</version>
<date>2005-06-17</date>

<chapter>
<title>Wprowadzenie</title>
<section>
<title>Idea technologii Linux-VServer</title>
<body>

<p>
U podstaw rozwiązania Linux-VServer leży pomysł rozdzielenia przestrzeni
użytkownika na osobne jednostki (zwane czasem Wirtualnymi Serwerami Prywatnymi
[ang. VPS]), w taki sposób, aby dla procesów uruchomionych w obrębie VPS,
wyglądały i zachowywały się jak prawdziwe serwery,
</p>

</body>
</section>
<section>
<title>Terminologia stosowana w poradniku</title>
<body>

<table>
<tr>
  <th>Zwrot</th>
  <th>Opis</th>
</tr>
<tr>
  <th>Linux-VServer, VServer</th>
  <ti>Linux-VServer to oficjalna nazwa projektu i jest używana w poradniku
  właśnie w tym znaczeniu</ti>
</tr>
<tr>
  <th>wirtualny serwer, vserver</th>
  <ti>stosowane wymiennie, odnoszą się pojedynczej instancji serwera (tj.
    jednego serwera wirtualnego)</ti>
</tr>
<tr>
  <th>komputer host, host</th>
  <ti>fizyczna maszyna, na której zainstalowane jest Gentoo i na której
  będą znajdować się wszystkie wirtualne serwery</ti>
</tr>
<tr>
  <th>util-vserver</th>
  <ti>pakiet <c>util-vserver</c> zawiera programy niezbędne do zarządzania
  naszymi serwerami wirtualnymi</ti>
</tr>
</table>

</body>
</section>
</chapter>

<chapter>
<title>Tworzenie szablonu VServera</title>
<section>
<title>Instalacja kernela wspierającego VServer</title>
<body>

<pre caption="Instalacja kernela obsługującego VServer - vserver-sources">
# <i>emerge vserver-sources</i>
</pre>

<p>
Po tym jak źródła vserver-sources zostały zainstalowane, musimy je skonfigurować
wpisując polecenie <c>make menuconfig</c>.
</p>

<pre caption="Konfiguracja kernela vserver-sources">
# <i>cd /usr/src/linux-&lt;KERNELVERSION&gt;-vserver-&lt;VSERVERVERSION&gt;</i>
# <i>make menuconfig</i>

Linux VServer ---&gt;
<comment>(Potrzebna dla bieżących narzędzi)</comment>
  [*] Enable Legacy Kernel API
<comment>(Nie ustawiamy!)</comment>
  [ ] Disable Legacy Networking Kernel API
<comment>(Zalecane)</comment>
  [*] Enable Proc Security
  [ ] Enable Hard CPU Limits
  Persistent Inode Context Tagging (UID24/GID24)  ---&gt;
  [ ] Tag NFSD User Auth and Files
  [ ] Compile Debugging Code
</pre>

<p>
Po zbudowaniu jądra należy uaktualnić konfigurację programu ładującego, a
następnie ponownie uruchomić system i sprawdzić czy kernel startuje poprawnie.
</p>

<pre caption="Instalacja kernela">
<comment>(Budowanie kernela)</comment>
# <i>make</i>
<comment>(Instalacja)</comment>
# <i>make modules_install</i>
# <i>cp arch/i386/boot/bzImage /boot/kernel-&lt;KERNELVERSION&gt;-vs&lt;VSERVERVERSION&gt;</i>
<comment>(Jeśli to potrzebne, to edytujemy plik konfiguracyjny bootloadera i uruchamiamy ponownie system)</comment>
# <i>reboot</i>
</pre>

</body>
</section>
<section>
<title>Konfiguracja środowiska na maszynie host</title>
<body>

<p>
Do zarządzania serwerami wirtualnymi potrzebujemy pakietu util-vserver, który
zawiera wszystkie potrzebne do tego programy.
</p>

<pre caption="Instalacja pakietu util-vserver">
# <i>emerge util-vserver</i>
</pre>

<p>
Jeśli używamy Proc Security, to musimy "odtajnić" pewne pliki z naszego katalogu
<path>/proc</path> tak, aby były widoczne dla wirtualnych serwerów.
W katalogu <path>/usr/lib/util-vserver</path> znajduje się skrypt o nazwie
<c>vprocunhide</c>, który "odtajnia" pliki wyszczególnione w
<path>/usr/lib/util-vserver/defaults/vprocunhide-files</path>. Wraz z pakietem util-vserver
został zainstalowany skrypt startowy, który korzysta z polecenia <c>vprocunhide</c>.
Dodajemy go do naszego poziomu uruchamiania:
</p>

<pre caption="Skrypt startowy vprocunhide">
# <i>rc-update add vprocunhide default</i>
# <i>/etc/init.d/vprocunhide start</i>
</pre>

<p>
Skrypt vshelper używany jest do prawidłowego zatrzymywania i ponownego
uruchamiania wirtualnych serwerów. Musimy wskazać kernelowi lokalizację, w
której znajduje się ów skrypt:
</p>

<pre caption="Konfiguracja vshelper">
# <i>echo 'kernel.vshelper = /usr/lib/util-vserver/vshelper' &gt;&gt; /etc/sysctl.conf</i>
# <i>sysctl -p</i>
</pre>

</body>
</section>
<section>
<title>Prosty szkielet konfiguracji</title>
<body>

<p>
By uruchomić nasz wirtualny serwer musimy stworzyć kilka plików
i katalogów konfiguracyjnych. W tym celu posłużymy się trybem
budowania szkieletu konfiguracji, udostępniony przez pakiet
util-vserver.
</p>

<p>
Pakiet util-server standardowo przechowuje wszystkie wirtualne serwery
w katalogu <path>/vservers</path>. Możemy zmienić tę lokalizację poprzez
dodanie parametru <c>--rootdir=/path/to/vserver/root</c> do komendy
budującej konfigurację.
</p>

<p>
W portage znajduje się ebuild dla nowego pakietu baselayout-vserver, który
wspiera zwykłe skrypty startowe, tj. nie musimy używać skryptów startowych,
charakterystycznych dla Gentoo. Zwykłe skrypty startowe używają do zarządzania
poziomami uruchamiania <c>init</c> i <path>/etc/inittab</path> (uważane za
bardziej stabilne i są obecnie standardem).
</p>

<p>
Dla naszego vservera musimy wybrać identyfikator kontekstowy
(odradzamy używania dynamicznych identyfikatorów), a także
ustawić potrzebne parametry urządzenia sieciowego (w tym przykładzie jest to
interfejs eth0, skonfigurowany dla 192.168.1.254/24 oraz identyfikator
kontekstowy, który powstał z dwóch ostatnich części adresu IP wirtualnego serwera).
</p>

<pre caption="Podstawowa konfiguracja">
# <i>vserver gentoo build -m skeleton \</i>
  <i>--hostname gentoo \</i>
  <i>--initstyle plain \</i>
  <i>--context 1253</i>
  <i>--interface gentoo=eth0:192.168.1.253/24</i>
</pre>

<impo>
Standardowo wirtualny serwer ma możliwość samodzielnego ustawienia swojej nazwy.
Pamiętajmy jednak o zmianie zawartości <path>/etc/conf.d/hostname</path>,
w obrębie wirtualnego serwera, tak by nazwa hosta odpowiadała tej wymienionej wyżej.
</impo>

</body>
</section>
<section>
<title>Instalacja plików instalacyjnych Gentoo</title>
<body>

<p>
Tworzymy szablon Gentoo, który możemy później kopiować, by łatwo
otrzymać wiele wirtualnych serwerów. Skrypt budujący vserver stworzył
kilka podstawowych katalogów w lokalizacji <path>/vservers/gentoo</path>,
które są również instalowane poprzez plik etapu (ang. stage file), więc
je usuniemy.
</p>

<pre caption="Usuwanie plików szkieletowych">
# <i>rm -rf /vservers/gentoo/*</i>
</pre>

<p>
Musimy teraz przeprowadzić standardową instalację Gentoo. Możemy postępować
zgodnie z opisem zawartym w podręczniku Gentoo, ale pamiętajmy o pewnych
różnicach i ograniczeniach:
</p>

<ul>
  <li>Zamieniamy <path>/mnt/gentoo</path> na
    <path>/vservers/gentoo</path>
  </li>
  <li>W <uri
          link="/doc/pl/handbook/handbook-x86.xml?part=1&amp;chap=6#doc_chap1_sect6">rozdziale
    6.a</uri>
       wybieramy profil <path>vserver/x86</path>.
  </li>
  <li>Używamy pliku vserver stage, który jest dostępny
  <uri link="http://dev.gentoo.org/~hollow/vserver/stages/">tu</uri>.
  </li>
</ul>

<p>
Postępujemy zgodnie z podręcznikiem Gentoo, od <uri
link="/doc/pl/handbook/handbook-x86.xml?part=1&amp;chap=5#doc_chap2">
rozdziału 5.b</uri> do rozdziału 7.a oraz od <uri
link="/doc/pl/handbook/handbook-x86.xml?part=1&amp;chap=8#doc_chap3">
rozdziału 8.c</uri> do rozdziału 9.c.
</p>

<note>
By odzwierciedlić konfigurację sieci, powinniśmy dostosować do naszych potrzeb pliki
<path>/etc/conf.d/hostname</path>, <path>/etc/conf.d/domainname</path>
i <path>/etc/hosts</path>. Szczegóły znajdują się w <uri
link="/doc/pl/handbook/handbook-x86.xml?part=1&amp;chap=8#doc_chap2_sect1">
rozdziale 8.b.1</uri> oraz <uri
link="/doc/pl/handbook/handbook-x86.xml?part=1&amp;chap=8#doc_chap2_sect4">
rozdziale 8.b.4</uri>. Pozostała część konfiguracji sieci dla wirtualnych
serwerów zostanie przeprowadzona na maszynie host.
</note>
</body>
</section>

<section>
<title>Niezbędne zmiany w pliku konfiguracyjnym</title>
<body>

<p>
Zmieniamy wpis w pliku <path>/etc/syslog-ng/syslog-ng.conf</path>, gdyż ze
względów bezpieczeństwa nie mamy praw do odczytu <path>/proc/kmsg</path>.
Usuwamy także wpis dla konsoli.
</p>

<pre caption="Edycja /etc/syslog-ng/syslog-ng.conf">
<comment>(Zmieniamy wpis)</comment>
source src { unix-stream("/dev/log"); internal(); pipe("/proc/kmsg"); };
<comment>(Na to)</comment>
source src { unix-stream("/dev/log"); internal(); };

<comment>(Usuwamy te linie)</comment>
# Standardowo logi generowane są na konsoli tty12...
destination console_all { file("/dev/tty12"); };
# ...jeśli chcemy używać /dev/console, dla programów w rodzaju xconsole
# możemy wykomentować powyższą linię odnoszącą się do /dev/tty12
# i odkomentować poniższą linię
#destination console_all { file("/dev/console"); };

log { source(src); destination(console_all); };
</pre>

</body>
</section>
<section>
<title>Opuszczanie środowiska chroot</title>
<body>

<p>
Nasz system powinien być gotowy. Opuszczamy środowisko chroot i montujemy
system plików proc.
</p>

<pre caption="Wyjście ze środowiska chroot">
# <i>exit</i>
# <i>umount /vservers/gentoo/proc/</i>
</pre>

</body>
</section>
<section>
<title>Testowanie wirtualnego serwera</title>
<body>

<p>
Powinniśmy mieć możliwość uruchomienia wirtualnego serwera, a następnie
przejścia do niego przy pomocy poniższych poleceń. Jeśli brakuje komend takich jak
<c>mount</c> lub <c>dmesg</c> należy zainstalować pakiet util-linux, wydając w
obrębie serwera wirtualnego polecenie <c>emerge util-linux</c>. Standardowo
profil wirtualnego serwera nie zawiera wspomnianego pakietu.
</p>

<pre caption="Testowanie wirtualnego serwera">
# <i>vserver gentoo start</i>
# <i>vserver-stat</i>
CTX   PROC    VSZ    RSS  userTIME   sysTIME    UPTIME NAME
0       90   1.4G 153.4K  14m00s11   6m45s17   2h59m59 root server
1253     2     3M   286    0m00s45   0m00s42   0m02s91 gentoo
# <i>vserver gentoo enter</i>
# <i>ps ax</i>
PID   TTY      STAT   TIME COMMAND
    1 ?        S      0:00 init [3]
22887 ?        Ss     0:00 /usr/sbin/syslog-ng
20496 pts/0    S      0:00 /bin/bash -login
20508 pts/0    R+     0:00 ps ax
# <i>halt</i>
Killed
</pre>

</body>
</section>
<section>
<title>Kontakt</title>
<body>

<p>
W przypadku problemów można kontaktować się z autorem tekstu lub zgłosić
problem do <uri link="http://bugs.gentoo.org">Bugzilli</uri>.
</p>

</body>
</section>
</chapter>
</guide>
