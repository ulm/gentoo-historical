<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/cron-guide.xml,v 1.6 2006/01/23 13:10:16 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/cron-guide.xml" lang="pl">
<title>Konfiguracja demona cron w Gentoo</title>

<author title="Autor">
  <mail link="airuike@gmail.com">Eric Brown</mail>
</author>
<author title="Redaktor">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Tłumaczenie">
  Paweł Kwiatkowski
</author>

<abstract>Konfiguracja demona cron w Gentoo</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.6</version>
<date>2006-01-14</date>

<chapter>
<title>Cron - podstawy</title>
<section>
<title>Co robi cron?</title>
<body>

<p>
Cron jest demonem, który uruchamia zaplanowane zadania w oparciu o dane
przekazane przez polecenie <c>crontab</c>. Program wykonuje swoją pracę
sprawdzając co minutę czy w plikach crontab użytkowników znajdują się jakieś
zadania do zrealizowania.
</p>

<note>
Określenia <e>crontab</e> używamy zarówno jako nazwy listy zadań do wykonania,
jak i nazwy polecenia służącego do edycji tej listy.
</note>

</body>
</section>
<section>
<title>Cron w praktyce</title>
<body>

<p>
W Portage znajdują się co najmniej trzy implementacje crona, spośród których
można wybierać. Wszystkie posiadają podobny interfejs. Mianowicie, używają
komendy <c>crontab</c> lub podobnej. Istnieje także pokrewne narzędzie zwane
Anacron, którego przeznaczeniem jest współpraca z cronem na systemach, które
nie działają w sposób ciągły.
</p>

<p>
Zależnością każdego z tych trzech cronów jest pakiet
<c>sys-process/cronbase</c>. Może on wystarczyć do podstawowych zastosowań
crona. 
</p>

<p>
Zanim zaczniemy pracę z cronem, musimy wybrać jedną z wersji tego programu. Dla
wygody przedstawiamy poniżej informacje o dostępnych implementacjach.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Który cron spełni nasze potrzeby?</title>
<section>
<title>Vixie cron</title>
<body>

<p>
Vixie cron jest wersją posiadającą wiele możliwości i opartą na cronie z SysV.
Każdy użytkownik posiada własny plik crontab oraz ma możliwość używania
zmiennych środowiskowych w obrębie tego pliku. W przeciwieństwie do innych
odmian crona, oferuje wsparcie dla SELinux i PAM. Wspiera mniej architektur niż
DCron, ale więcej niż Fcron.
</p>

<p>
Cechy programu <c>sys-process/vixie-cron</c>:
</p>

<ul>
<li>
  Wsparcie dla SELinux
</li>
<li>
  Wsparcie dla PAM <path>/etc/security/limits.conf</path>
</li>
<li>
  Ustawianie zmiennych środowiskowych w plikach crontab (PATH, SHELL, HOME,
  itp.)
</li>
<li>
  Każdy użytkownik może posiadać własny crontab, do którego dostęp kontrolowany
  jest za pomocą cron.allow i cron.deny
</li>
</ul>

</body>
</section>
<section>
<title>Cron Dillona</title>
<body>

<p>
Dcron w zamierzeniach ma być prostą, elegancką i bezpieczną implementacją
crona. Nie pozwala na wykorzystanie zmiennych środowiskowych w plikach crontab,
zaś wszystkie zadania są uruchamiane z <path>/bin/sh</path>. Podobnie jak w
Vixie cron, każdy użytkownik posiada własny plik crontab.
</p>

<p>
Cechy programu <c>sys-process/dcron</c>:
</p>

<ul>
<li>
  Szybki, prosty i wolny od zbędnych dodatków
</li>
<li>
  Dostęp do <c>crontab</c> jest ograniczony do grupy cron, tzn. nie polega na
  zewnętrznych zasobach
</li>
</ul>

</body>
</section>
<section>
<title>Fcron</title>
<body>

<p>
Fcron w zamierzeniach ma zastąpić programy Vixie cron i Anacron. Został
zaprojektowany do pracy na systemach, które nie działają w sposób ciągły.
Ponadto zawiera dodatkowe możliwości takie jak: uruchamianie zadań w
zależności od tego czy spełnione są określone warunki, zdolność przypisywania
priorytetów zadaniom, możliwość przypisania zadania do uruchomienia przy starcie
systemu.
Więcej informacji można znaleźć na <uri link="http://fcron.free.fr/">stronie
domowej Fcrona</uri>.
</p>

<p>
Cechy programu <c>sys-process/fcron</c>: </p>

<ul>
<li>
  Zaprojektowany do pracy na systemach, które nie działają w sposób ciągły, np.
  może rozpocząć zadanie po ponownym uruchomienia systemu
</li>
<li>
  Ustawianie zmiennych środowiskowych i wielu innych opcji dla plików crontab
</li>
<li>
  Każdy użytkownik może posiadać własny crontab, do którego dostęp kontrolowany
  jest za pomocą cron.allow i cron.deny
</li>
<li>
  Rozszerzona składnia polecenia crontab, zawierająca obsługę wielu nowych
  możliwości
</li>
</ul>

</body>
</section>
<section>
<title>Anacron</title>
<body>

<p>
Anacron nie jest demonem crona. Zazwyczaj pracuje w połączeniu z cronem.
Wykonuje polecenia w odstępach czasu podawanych w dniach oraz nie czyni założeń
o ciągłym działaniu systemu. Uruchamia zadania, które nie zostały wywołane
podczas wyłączeń systemu. Anacron przeważnie jest uruchamiany przez demona cron
raz dziennie.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Korzystanie z crona</title>
<section>
<title>Instalacja</title>
<body>

<p>
Wybieramy tę wersję crona, która nam najbardziej odpowiada i emergujemy ją.
</p>

<pre caption="Instalacja crona">
# <i>emerge dcron</i>
# <i>rc-update add dcron default</i>
# <i>/etc/init.d/dcron start</i>
</pre>

<p>
Jeśli nie zainstalowaliśmy Fcrona, to opcjonalnie możemy zainstalować Anacrona.
</p>

<pre caption="Instalacja anacrona">
# <i>emerge anacron</i>
# <i>rc-update add anacron default</i>
# <i>/etc/init.d/anacron start</i>
</pre>

</body>
</section>
<section id="systemtab">
<title>Plik crontab dla systemu</title>
<body>

<p>
Poinstalacyjne komunikaty z niektórych wersji crona informują o konieczności
uruchomienia polecenia <c>crontab /etc/crontab</c>. Plik
<path>/etc/crontab</path> jest plikiem <e>crontab dla systemu</e>. Demon cron
dzięki <c>sys-process/cronbase</c> może uruchamiać skrypty z plików
<path>/etc/cron.{daily,hourly,weekly,monthly}</path>. Należy wspomnieć, że
tylko vixie-cron automatycznie planuje zadania w <path>/etc/crontab</path>.
Użytkownicy programów Dcron i Fcron muszą uruchomić crontab
<path>/etc/crontab</path>, każdorazowo po wprowadzeniu zmian w
<path>/etc/crontab</path>.
</p>

<p>
Warto zauważyć, że zadania zaplanowane w systemowym pliku crontab, nie zostaną
wyświetlone na liście zaplanowanych zadań, tj. po wydaniu komendy <c>crontab
-l</c>.
</p>

<p>
Oczywiście nie musimy używać żadnego z programów cron. Jeśli zdecydujemy się na
Dcrona lub Fcrona, to <e>NIE</e> uruchamiamy <c>crontab /etc/crontab</c>. Jeśli
wybierzemy vixie-crona, to powinniśmy zakomentować wszystkie linie w pliku
<path>/etc/crontab</path>.
</p>

<pre caption="Wykomentowanie wszystkich linii w pliku /etc/crontab">
# <i>sed -i -e "s/^/#/" /etc/crontab</i>
</pre>

</body>
</section>
<section>
<title>Nadawanie zaufanym użytkownikom dostępu do crona</title>
<body>

<p>
Jeśli chcemy, by użytkownicy inni niż root mieli dostęp do demona cron, to
sugerujemy przeczytanie tego akapitu. W przeciwnym przypadku można przejść do
następnej sekcji, tj. <uri link="#scheduling">planowania zadań</uri>.
</p>

<note>
Nadanie innemu użytkownikowi dostępu do crona nie powoduje, że będzie on mógł
uruchamiać zaplanowane zadania jako root. Jeśli chcemy, by użytkownik miał
możliwość edycji pliku crontab roota, to należy zapoznać się <c>sudo</c>.
</note>

<p>
Jeśli chcemy nadać użytkownikowi prawo do korzystania z plików crontab, to
niezależnie,  który pakiet wybierzemy, musimy go najpierw dodać do grupy cron.
Dla przykładu, jeśli chcemy dodać użytkownika <e>yarel</e> do grupy cron, to
wpisujemy:
</p>

<pre caption="Dodawanie użytkownika do grupy cron">
# <i>gpasswd -a yarel cron</i>
</pre>

<p>
Jeśli używamy <b>Dcrona</b>, to jest to wszystko co musimy zrobić, by nadać
użytkownikowi prawo do korzystania z crontab. Użytkownicy Dcrona mogą przejść
do następnej sekcji, tj. <uri link="#scheduling">planowanie zadań</uri>.
Pozostali czytają dalej.
</p>

<p>
Jeśli korzystamy z <b>Fcrona</b>, to musimy zmienić pliki
<path>/etc/fcron/fcron.deny</path> oraz <path>/etc/fcron/fcron.allow</path>.
Najbezpieczniejszy sposób to odmówienie dostępu wszystkimi (all), w pliku
<path>/etc/fcron/fcron.deny</path>, a następnie wymienienie w pliku
<path>/etc/fcron/fcron.allow</path> użytkowników, którzy mają mieć dostęp.
</p>

<impo>
<b>Jeśli nie istnieje żaden z plików:  <path>/etc/fcron/fcron.allow</path> i
<path>/etc/fcron/fcron.deny</path>, to wszyscy użytkownicy z grupy cron będą
mieli możliwość użycia polecenia crontab</b>. fcron instalowany jest ze
standardowym plikiem <path>fcron.allow</path>, który <b>pozwala wszystkim
użytkownikom</b> z grupy cron, na korzystanie z fcrontab.
</impo>

<pre caption="Uprawnienia w pliku fcron.deny">
all
</pre>

<p>
Przypuśćmy, że mamy użytkownika <e>yarel</e>, który powinien mieć możliwość
planowania własnych zadań. Dodajemy go do pliku
<path>/etc/fcron/fcron.allow</path> w następujący sposób:
</p>

<pre caption="Uprawnienia w pliku fcron.allow">
yarel
</pre>

<p>
Wybierając <b>Vixie crona</b>, będziemy chcieli wyedytować plik
<path>/etc/cron.allow</path>.
</p>

<impo>
Warto wspomnieć, że jeśli istnieje plik <path>/etc/cron.allow</path>, to tylko
wymienieni w nim użytkownicy z grupy cron, będą mieli dostęp do crona. Ale
jeśli istnieje pusty plik <path>/etc/cron.deny</path>, to wszyscy użytkownicy z
grupy cron będą posiadali prawo dostępu! <b>Nie zostawiamy pustego pliku
<path>/etc/cron.deny</path>, jeśli nie posiadamy pliku
<path>/etc/cron.allow</path>.</b>
</impo>

<p>
Przykładowo, jeśli chcemy nadać użytkownikowi <e>yarel</e> prawo dostępu do
crona, to umieszczamy go w pliku <path>/etc/cron.allow</path> następująco:
</p>

<pre caption="Uprawnienia w pliku /etc/cron.allow">
yarel
</pre>

</body>
</section>

<section id="scheduling">
<title>Planowanie zadań</title>
<body>

<p>
W każdym pakiecie proces edycji plików crontab wygląda inaczej, ale wszystkie
wersje obsługują podstawowy zestaw poleceń: dodawanie i zastępowanie pliku
crontab, edycja i usuwanie oraz wyświetlanie listy zadań z plików crontab.
Następujące zestawienie pokazuje jak używać komend w poszczególnych pakietach.
</p>

<table>
<tr>
  <th>Wersja</th>
  <th>Edycja crontab</th>
  <th>Usuwanie crontab</th>
  <th>Nowy crontab</th>
  <th>Lista prac crona</th>
</tr>
<tr>
  <ti>dcron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -d <e>[użytkownik]</e></c></ti>
  <ti><c>crontab <e>plik</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
<tr>
  <ti>fcron</ti>
  <ti><c>fcrontab -e</c></ti>
  <ti><c>fcrontab -r <e>[użytkownik]</e></c></ti>
  <ti><c>fcrontab <e>plik</e></c></ti>
  <ti><c>fcrontab -l</c></ti>
</tr>
<tr>
  <ti>vixie-cron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -r <e>-u [użytkownik]</e></c></ti>
  <ti><c>crontab <e>plik</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
</table>

<note>
Jeśli nie podamy parametru polecenia "usuń", zostanie usunięty aktualny crontab
danego użytkownika
</note>

<note>
Fcron tworzy także dowiązanie symboliczne do <c>crontaba</c>.
</note>

<p>
Zanim zaczniemy używać tych komend, musimy zrozumieć strukturę pliku crontab.
Każda linia takiego pliku wymaga podania pięciu pól określających czas. W
kolejności są to: minuty (0-59), godziny (0-23), dni miesiąca (1-31), miesiące
(1-12) oraz dni tygodnia (0-7, 1 to poniedziałek, 0 i 7 to niedziela). Dni
tygodni i miesiące mogą być określane za pomocą trzyliterowych angielskich
skrótów, takich jak: mon, tue, jan, feb, itp.  Każde pole może także zawierać
zakres wartości (np. 1-5 dla poniedziałek-piątek), listę wartości rozdzieloną
przecinkiem (np. 1,2,3 albo mon,tue,wed) lub zakres wartości z określonym
<e>krokiem</e> (np. 1-6/2 dla 1,3,5).
</p>

<p>
Może to wyglądać na zagmatwane, ale kilka przykładów powinno rozwiać
wątpliwości.
</p>

<pre caption="Przykłady">
<comment>
# Uruchamia /bin/false co minutę przez cały rok
</comment>
*     *     *     *     *        /bin/false

<comment>
# Uruchamia /bin/false o 1:35 w pon, wt, śrd i 4-tego każdego miesiąca
</comment>
35    1     4     *     mon-wed  /bin/false

<comment># Uruchamia /bin/true o 22:25 2. marca</comment>
25    22    2     3     *        /bin/true

<comment>
# Uruchamia/bin/false o 2:00 w każdy poniedziałek, środę i piątek
</comment>
0     2     *     *     1-5/2    /bin/false
</pre>

<note>
Zauważmy jak należy określać pola dotyczące dni tygodnia i dni miesiąca, zanim
zaczną odnosić się do tego samego dnia. Jeśli wprowadzimy * dla jednego z nich,
drugie będzie miało wyższy priorytet. Wpisanie * dla obydwu pól oznacza po
prostu każdy dzień.
</note>

<p>
Przećwiczymy to, czego się właśnie nauczyliśmy. Wykonamy kolejne kroki
tworzenia nowych zaplanowanych zadań. Na początku tworzymy plik o nazwie
<path>crons.cron</path> i wypełniamy go tak, by wyglądał następująco:
</p>

<pre caption="Edycja pliku crons.cron">
$ <i>nano crons.cron</i>
<comment># Minuty  Godziny  Dni   Miesiące  Dni tygodnia</comment>
10     3      1      1       *       /bin/echo "nie lubię crona"
30     16     *      1,2     *       /bin/echo "trochę lubię crona"
*      *      *      1-12/2  *       /bin/echo "naprawdę lubię crona"
</pre>

<p>
Teraz możemy dodać plik crontab do systemu używając komendy "nowy wpis" z tabeli
powyżej.
</p>

<pre caption="Nowy plik crontab">
# <i>crontab crons.cron</i>
</pre>

<note>
Tak naprawdę to nie zobaczymy wyniku działania powyższych komend echo, chyba że
użyjemy przekierowania.
</note>

<p>
Weryfikację zaplanowanych zadań możemy przeprowadzić z użyciem odpowiedniej
komendy <e>listowania</e> z tabeli powyżej.
</p>

<pre caption="Lista zaplanowanych zadań">
# <i>crontab -l</i>
</pre>

<p>
Powinna pojawić się lista przypominająca zawartość pliku
<path>crons.cron</path>. Jeśli tak nie jest, to możliwe że zostało użyte
niewłaściwe polecenie, by dodać nowy plik crontab.
</p>

<p>
Zgodnie z powyższym plikiem crontab, co minutę każdej godziny, każdego dnia
innego miesiąca, wykonane będzie polecenie echo "naprawdę lubię crona".
Oczywiście robimy to, jeśli naprawdę lubimy crona. Każdego dnia stycznia oraz
lutego o godzinie 16:30 zostanie wykonana komenda echo "trochę lubię crona".
Pierwszego stycznia o 3:10 zostanie wykonana komenda echo "nie lubię crona".
</p>

<p>
Użytkownicy Anacrona powinni czytać dalej, natomiast pozostali mogą przejść do
następnego akapitu, tj. <uri link="#editing">edycji plików crontab</uri>.
</p>

<p>
Użytkownicy Anacrona będą modyfikować zawartość pliku
<path>/etc/anacrontab</path>. W pliku tym znajdują się cztery pola: liczba dni
między kolejnymi uruchomieniami, opóźnienie w minutach, po którym zadanie jest
uruchamiane, nazwa zadania oraz komenda, która będzie uruchamiana.
</p>

<p>
Przykładowo, by wywoływać co 5 dni, 10 minut po uruchomieniu Anacrona polecenie
<c>echo "lubię anacrona"</c> wpisujemy:
</p>

<pre caption="/etc/anacrontab">
5 10 wasting-time /bin/echo "lubię anacrona"
</pre>

<p>
Program Anacron kończy działanie po tym, gdy wszystkie zadania wymienione w
pliku anacrontab, zostaną wykonane. Jeśli chcemy sprawdzać te zadania
codziennie, to musimy użyć crona. Instrukcja pod koniec następnego akapitu,
wyjaśnia jak to osiągnąć.
</p>

</body>
</section>
<section id="editing">
<title>Edycja plików crontab</title>
<body>

<p>
Bądźmy poważni, nie chcemy, by system co minutę mówił nam jak bardzo lubimy
crona. Kolejny krok w poznawaniu tego programu, to usunięcie pliku crontab przy
użyciu odpowiedniej komendy do <e>usuwania</e> z wymienionej powyżej tabeli. Po
usunięciu pliku wylistujemy zaplanowane zadania, by upewnić się, że komenda do
usuwania zadziałała.
</p>

<pre caption="Usuwanie pliku crontab">
# <i>crontab -d</i>
# <i>crontab -l</i>
</pre>

<p>
Po wydaniu polecenia <c>crontab -l</c> nie powinna wyświetlać się lista
zaplanowanych zadań. Jeśli pojawiają się wpisy, oznacza to, że polecenie do
usuwania zadań nie zadziałało. Należy upewnić się, że została użyta <e>komenda
usuwania</e>, właściwa dla naszej wersji crona.
</p>

<p>
Teraz, gdy mamy wyklarowaną sytuację, umieśćmy coś użytecznego w pliku crontab
użytkownika <b>root</b>.  Większość ludzi zechce uruchamiać <c>updatedb</c> w
odstępach tygodniowych, by zapewnić prawidłowe działanie <c>slocate</c>.
Ponownie modyfikujemy plik <path>crons.cron</path>, by wyglądał następująco:
</p>

<pre caption="Plik crontab z życia wzięty">
22 2 * * 1    /usr/bin/updatedb
</pre>

<p>
Powyższe sprawi, że cron będzie uruchamiał updatedb każdego tygodnia, w
poniedziałek o 2:22 nad ranem. Powinniśmy teraz dodać plik crontab
wykorzystując komendę <e>nowy wpis</e>, zawartą w tabeli powyżej, a następnie
ponownie sprawdzić listę zadań.
</p>

<pre caption="Listowanie zaplanowanych zadań">
# <i>crontab crons.cron</i>
# <i>crontab -l</i>
</pre>

<p>
Przypuśćmy, że chcemy także dodać <c>emerge --sync</c> do listy zadań
wykonywanych codziennie. Możemy to wykonać przez modyfikację pliku
<path>crons.cron</path>, a następnie przez użycie odpowiedniej <e>komendy do
edycji</e>. Poniższe daje nam możliwość modyfikacji pliku crontab użytkownika w
miejscu, bez polegania na zewnętrznych plikach, takich jak
<path>crons.cron</path>.
</p>

<pre caption="Edycja w miejscu pliku crontab">
# <i>crontab -e</i>
</pre>

<p>
Polecenie powinno otworzyć plik crontab użytkownika w edytorze. Chcemy, by
<c>emerge --sync</c> uruchamiało się codziennie o 6:30 rano, więc zmieniamy
zawartość pliku, by wyglądało to mniej więcej tak:
</p>

<pre caption="Plik crontab z życia wzięty">
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
<comment>(jeśli korzystamy z anacrona, dodajemy następującą linię)</comment>
30 7 * * *    /usr/sbin/anacron -s
</pre>

<p>
Ponownie sprawdzamy listę zadań zaplanowanych do wykonania, tak jak to
czyniliśmy w poprzednim przykładzie. Upewniamy się że zadanie zostało
zaplanowane. Jeśli tak jest, to mamy wszystko gotowe.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Korzystaie z cronbase</title>
<section>
<body>

<p>
Tak jak wspominaliśmy wcześniej, wszystkie trzy pakiety crona są zależne od
<c>sys-process/cronbase</c>. Pakiet cronbase tworzy pliki
<path>/etc/cron.{hourly,daily,weekly,monthly}</path> i skrypt o nazwie
<c>run-crons</c>. W domyślnym pliku <path>/etc/crontab</path> znajdują się
takie wpisy:
</p>

<pre caption="Domyślny crontab">
*/15 * * * *     test -x /usr/sbin/run-crons &amp;&amp; /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
</pre>

<p>
Nie będziemy wdawać się w zbytnie szczegóły, opowiemy pokrótce jak uruchamiać
poszczególne skrypty co godzinę, co jeden dzień, co tydzień i co miesiąc. Takie
ustawienie ma kilka zalet:
</p>

<ul>
  <li>
    Zostaną uruchomione nawet jeśli komputer był wyłączony w czasie, na który
    zaplanowano ich wykonanie
  </li>
  <li>
    Ułatwia to umieszczanie skryptów przez osoby opiekujące się poszczególnymi
    pakietami
  </li>
  <li>
    Od razu wiadomo gdzie znajdują się wszystkie zadania, ułatwia to tworzenie
    kopii zapasowych i odtwarzanie części systemu.
  </li>
</ul>

<note>
Po raz kolejny przypominamy, że Vixie cron automatycznie czyta
<path>/etc/crontab</path>, podczas gdy dcron i fcron tego nie robią. Więcej
szczegółów na ten temat znajduje się w akapacie o <uri
link="#systemtab">crontab dla systemu</uri>.
</note>

</body>
</section>
</chapter>
<chapter>
<title>Uwagi końcowe</title>
<section>
<title>W razie problemów</title>
<body>

<p>
Jeśli występują problemy z prawidłową pracą crona, to można sprawdzić kolejne
punkty z poniższej listy.
</p>

<ul>
<li>
  <b>Czy cron jest uruchomiony?</b><br/>
  Upewniamy się wpisując <c>ps ax | grep cron</c> i oczekując, że cron pojawi
  się na liście!
</li>
<li>
  <b>Czy cron pracuje prawidłowo?</b><br/>
  Próbujemy: * * * * * /bin/echo "foobar" &gt;&gt; /nasz_plik, a następnie
  upewniamy się że cron działa
</li>
<li>
  <b>Czy zadanie uruchamia się poprawnie?</b><br/>
  Próbujemy: * * * * * /bin/foobar &gt; /nasz_plik 2&gt;&amp;1, szukamy
  błędów w pliku /nasz_plik
</li>
<li>
  <b>Czy cron uruchamia zaplanowane zadania?</b><br/>
  Sprawdzamy logi crona w poszukiwaniu błędów, przeważnie jest to plik
  <path>/var/log/cron.log</path> lub <path>/var/log/messages</path>
</li>
<li>
  <b>Czy jest jakiś plik dead.letter?</b><br/>
    Zazwyczaj, gdy wystąpi problem, cron wysyła maila. Sprawdzamy pocztę, a
    także plik ~/dead.letter
</li>
</ul>

<p>
Musimy pamiętać, że każdy pakiet crona jest inny, a zakres funkcjonalny może
się znacznie różnić między poszczególnymi wersjami. W zależności od tego, z
której wersji korzystamy, warto zapoznać się ze stronami podręcznika dla
crontaba, fcrontaba lub anacrontaba.
</p>

<p>
Powodzenia!
</p>

</body>
</section>
</chapter>
</guide>
