<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/hb-working-variables.xml,v 1.10 2005/09/13 23:05:51 rane Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>1.12</version>
<date>2005-08-01</date>

<section>
<title>Zmienne środowiskowe</title>
<subsection>
<title>Czym są zmienne środowiskowe?</title>
<body>

<p>
Zmienne środowiskowe to nazwa obiektów zawierających informacje, które używane
są przez jeden lub wiele programów w systemie operacyjnym. Wielu użytkowników
(zwłaszcza mających styczność z Linuksem od niedawna) traktuje je jako coś nie
do ogarnięcia. Nic bardziej mylnego! Dzięki zmiennym środowiskowym zmiana
konfiguracji jednego lub kilku programów jest banalnie prosta.
</p>

</body>
</subsection>
<subsection>
<title>Przykłady ważniejszych zmiennych środowiskowych</title>
<body>

<p>
Poniższa tabela przedstawia listę ważniejszych zmiennych używanych przez system Linux,
wraz z krótkim opisem. Przykładowe ich wartości znajdują się pod tabelą.
</p>

<table>
<tr>
  <th>Zmienna</th>
  <th>Opis</th>
</tr>
<tr>
  <ti>PATH</ti>
  <ti>
  Ta zmienna zawiera oddzieloną dwukropkami listę katalogów, w których system
  operacyjny szuka plików z prawami do uruchomienia. Jeśli w konsoli wpiszesz
  nazwę programu mającego prawa do uruchamiania (np. <c>ls</c>,
  <c>rc-update</c> lub <c>emerge</c>) lecz program ten nie znajduje się w
  jednym z katalogów zdefiniowanych w zmiennej <c>PATH</c>, system nie wykona
  tego programu (chyba, że wpiszesz pełną ścieżkę do miejsca gdzie znajduje się
  ten program, np. <c>/bin/ls</c>).
  </ti>
</tr>
<tr>
  <ti>ROOTPATH</ti>
  <ti>
  Ta zmienna spełnia prawie taką samą funkcję jak <c>PATH</c>, z tą tylko
  różnicą, że zawiera informacje o katalogach które są sprawdzane w
  poszukiwaniu programów dla superużytkownika (czyli root'a).
  </ti>
</tr>
<tr>
  <ti>LDPATH</ti>
  <ti>
  Zmienna zawiera podzieloną dwukropkami listę katalogów, które konsolidator przeszukuje
  w celu odnalezienia bibliotek.
  </ti>
</tr>
<tr>
  <ti>MANPATH</ti>
  <ti>
  Zmienna, podobnie jak inne zawiera listę katalogów oddzielonych dwukropkiem, w których <c>man</c> szukał
  będzie dokumentów w odpowiednim dla siebie formacie.
  </ti>
</tr>
<tr>
  <ti>INFODIR</ti>
  <ti>
  Zmienna ta, to lista katalogów oddzielona znakiem dwukropka, które przeszukiwane są przez program <c>info</c>
  w celu odnalezienia dokumentacji w odpowiednim dla niego formacie.
  </ti>
</tr>
<tr>
  <ti>PAGER</ti>
  <ti>
  Zwinna zawiera ścieżkę do programu, który służy do prezentacji zawartości plików (przykładowo <c>less</c>
  lub <c>more</c>)

  </ti>
</tr>
<tr>
  <ti>EDITOR</ti>
  <ti>
  Zmienna zawiera ścieżkę do programu używanego do edycji pilków (przykładowo
  <c>nano</c> lub <c>vi</c>) </ti>
</tr>
<tr>
  <ti>KDEDIRS</ti>
  <ti>
  Zmienna zawiera listę oddzielonych znakiem dwukropka katalogów, w których
  mieszczą się materiały związane z środowiskiem graficznym KDE.
  </ti>
</tr>
<tr>
  <ti>CLASSPATH</ti>
  <ti>
  Zmienna zawiera listę katalogów oddzielonych znakiem dwukropka, w których
  znajdują się klasy języka Java.  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT</ti>
  <ti>
  Zmienna ta zawiera listę oddzielonych znakiem <e>spacji</e> katalogów, które
  mają być zabezpieczone przez Portage w trakcie dokonywania uaktualnień
  oprogramowania.
  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT_MASK</ti>
  <ti>
  Zmienna zawiera listę oddzielonych znakiem <e>spacji</e> katalogów, które nie
  mają być zabezpieczane przez Portage podczas dokonywania uaktualnienia
  oprogramowania.
  </ti>
</tr>
</table>

<p>
Poniżej znajdują się przykładowe wartości omówionych zmiennych środowiskowych:
</p>

<pre caption="Przykładowe wartości zmiennych">
PATH="/bin:/usr/bin:/usr/local/bin:/opt/bin:/usr/games/bin"
ROOTPATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
LDPATH="/lib:/usr/lib:/usr/local/lib:/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
MANPATH="/usr/share/man:/usr/local/share/man"
INFODIR="/usr/share/info:/usr/local/share/info"
PAGER="/usr/bin/less"
EDITOR="/usr/bin/vim"
KDEDIRS="/usr"
CLASSPATH="/opt/blackdown-jre-1.4.1/lib/rt.jar:."
CONFIG_PROTECT="/usr/X11R6/lib/X11/xkb /opt/tomcat/conf \
                /usr/kde/3.1/share/config /usr/share/texmf/tex/generic/config/ \
                /usr/share/texmf/tex/platex/config/ /usr/share/config"
CONFIG_PROTECT_MASK="/etc/gconf
</pre>

</body>
</subsection>
</section>
<section>
<title>Definiowanie zmiennych globalnych</title>
<subsection>
<title>Katalog /etc/env.d</title>
<body>

<p>
Aby skupić w jednym miejscu definicje zmiennych, w Gentoo wprowadzono katalog
<path>/etc/env.d</path>.  W katalogu tym odnaleźć można pliki takie jak
<path>00basic</path>, <path>05gcc</path> i inne. Zawierają one zmienne
potrzebne do działania programów, których nazwy najczęściej są takie jak nazwy
plików znajdujących się w katalogu <path>/etc/env.d</path>.
</p>

<p>
Na przykład po zainstalowaniu <c>gcc</c>, w katalogu <path>/etc/env.d</path>
tworzony jest plik o nazwie <path>05gcc</path>, który zawiera definicje
następujących zmiennych:
</p>

<pre caption="/etc/env.d/05gcc">
PATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/info"
CC="gcc"
CXX="g++"
LDPATH="/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
</pre>

<p>
W innych dystrybucjach trzeba by zmienić lub dodać definicje powyższych
zmiennych systemowych do pliku <path>/etc/profile</path> lub w innym miejscu. W
Gentoo jest to znacznie prostsze i nie wymaga w zasadzie igerencji użytkownika.
</p>

<p>
W przypadku, kiedy <c>gcc</c> jest uaktualniane, uaktualniany jest także plik
<path>/etc/env.d/05gcc</path>.  Dzieje się to bez udziału użytkownika.
</p>

<p>
Rozwiązanie to przynosi korzyści nie tylko dla systemu Portage, ale także dla
użytkownika. Sporadycznie użytkownik może być zapytany o to, jaką wartość ma
mieć pewna zmienna środowiskowa. Może to mieć miejsce w przypadku zmiennej
<c>http_proxy</c>. Zamiast zamiast ingerować w plik <path>/etc/profile</path>,
można utworzyć plik (<path>/etc/env.d/99local</path>) i wpisać tam definicje
swoich zmiennych. Na przykład:
</p>

<pre caption="/etc/env.d/99local">
http_proxy="proxy.server.com:8080"
</pre>

<p>
Dzięki takiemu sposobowi definiowania zmiennych środowiskowych masz szybki wgląd
na w te zmienne, które zdefiniowałeś samodzielnie.
</p>

</body>
</subsection>
<subsection>
<title>Skrypt env-update</title>
<body>

<p>
Kilka plików w katalogu <path>/etc/env.d</path> definiuje zmienną <c>PATH</c>.
Nie jest to błędem.  Kiedy wykonane zostanie <c>env-update</c>, to skrypt ten
doda do siebie wszystkie definicje tej samej zmiennej, uaktualniając na koniec
zmienne środowiskowe w systemie. Daje to możliwość dodawania własnych zmiennych
środowiskowych bez obawy przed tym, że zmodyfikowana zostanie już istniejąca
zmienna (pozbawiając ją dotychczasowej wartości).
</p>

<p>
Skrypt <c>env-update</c> dodaje wartości zmiennych w kolejności alfabetycznej.
Tłumaczy to fakt dlaczego nazwy plików w katalogu <path>/etc/env.d</path>
zaczynają się od liczb.
</p>

<pre caption="Kolejność w jakiej env-update uaktualnia zmienne">
         00basic        99kde-env       99local
     +-------------+----------------+-------------+
PATH="/bin:/usr/bin:/usr/kde/3.2/bin:/usr/local/bin"
</pre>

<p>
Tylko wartości niektórych zmiennych są ze sobą łączone, należą do nich:
<c>KDEDIRS</c>, <c>PATH</c>, <c>CLASSPATH</c>, <c>LDPATH</c>, <c>MANPATH</c>,
<c>INFODIR</c>, <c>INFOPATH</c>, <c>ROOTPATH</c>, <c>CONFIG_PROTECT</c>,
<c>CONFIG_PROTECT_MASK</c>, <c>PRELINK_PATH</c> i <c>PRELINK_PATH_MASK</c>. Dla
wszystkich pozostałych zmiennych ważna jest ostatnia zdefiniowana wartość
(pliki w kolejności alfabetycznej w katalogu <path>/etc/env.d</path>).
</p>

<p>
Uruchomienie skryptu <c>env-update</c> powoduje utworzenie zmiennych
systemowych i umieszczenie ich w pliku <path>/etc/profile.env</path> (z którego
korzysta <path>/etc/profile</path>). Skrypt ten pobiera także informacje z
(opisanej wcześniej) zmiennej <c>LDPATH</c> i używa ich do utworzenia pliku
<path>/etc/ld.so.conf</path>.  Po wykonaniu tej czynności uruchamia polecenie
<c>ldconfig</c> w celu odbudowania wspomnianego pliku
<path>/etc/ld.so.cache</path>, który jest używany przez konsolidator.
</p>

<p>
Jeśli chcemy zaobserwować efekt, jaki przynosi wykonanie polecenia
<c>env-update</c>, należy uruchomić następujące polecenia w celu uaktualnienia
zmiennych środowiskowych.  Użytkownicy mający już pierwszą instalację Gentoo za
sobą pewnie pamiętają polecenie:
</p>

<pre caption="Uaktualnianie zmiennych środowiskowych">
# <i>env-update &amp;&amp; source /etc/profile</i>
</pre>

<note>
Powyższe polecenie uaktualnia zmienne tylko na terminalu, na którym zostało
uruchomione i jego terminalach potomnych. W związku z tym jeśli pracuje się w
X11 należy albo wpisywać <c>source /etc/profile</c> w każdym terminalu, który
się otwiera albo zrestartować serwer X tak żeby wszystkie nowe terminale
posiadały nowe zmienne. Użytkownicy menedżerów logowania powinni przełączyć się
na konto roota i wpisać <c>/etc/init.d/xdm restart</c>. Jeśli się tego nie zrobi
to konieczne będzie przelogowanie się w X by uruchamiać terminale potomne z
nowymi zmiennymi.
</note>

</body>
</subsection>
</section>
<section>
<title>Definiowanie zmiennych lokalnych</title>
<subsection>
<title>Zmienne użytkownika</title>
<body>

<p>
Nie zawsze użytkownik chce aby zdefiniowane przez niego zmienne miały charakter
globalny (były dostępne dla innych użytkowników w systemie). Na przykład może
zechcieć dodać katalog <path>/home/moj_uzytkownik/bin</path> i katalog, w
którym obecnie się znajduje do zmiennej <c>PATH</c>, lecz nie chce aby była ona
dostępna dla pozostałych.  Aby zdefiniować taką zmienną środowiskową lokalną,
do pliku <path>~/.bashrc</path> lub <path>~/.bash_profile</path> należy dodać
następującą linię:
</p>

<pre caption="Definicja lokalnej zmiennej PATH w pliku ~/.bashrc">
<comment>Dwukropek na końcu zmiennej oznacza, że wejdzie do niej także katalog, w którym będzie przebywał użytkownik</comment>
PATH="${PATH}:/home/my_user/bin:"
</pre>

<p>
Po wylogowaniu się i ponownym zalogowaniu, wartość zmiennej <c>PATH</c> będzie
uaktualniona.
</p>

</body>
</subsection>
<subsection>
<title>Zmienne bieżącej sesji</title>
<body>

<p>
W niektórych przypadkach przydatna jest możliwość definiowania zmiennych,
które używane są tylko w trakcie trwania bieżącej sesji. Na przykład może
pojawić się potrzeba używania programów z katalogu tymczasowego, który nie
jest ujęty standardowo w zmiennej <c>PATH</c>.
</p>

<p>
W tym przypadku można po prostu zdefiniować wartość tej zmiennej za pomocą
polecenia <c>export</c>. Tak zdefiniowana zmienna będzie miała swoją wartość do
momentu wylogowania się.
</p>

<pre caption="Definiowanie zmiennych środowiskowych dla bieżącej sesji">
# <i>export PATH="${PATH}:/home/my_user/tmp/usr/bin"</i>
</pre>

</body>
</subsection>
</section>
</sections>
