<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/hb-install-mips-stage.xml,v 1.9 2008/04/01 17:16:23 shadow Exp $ -->

<sections>

<version>9.0</version>
<date>2008-04-01</date>

<section>
<title>Instalacja tarballa stage</title>
<subsection>
<title>Ustawianie prawidłowej daty i czasu</title>
<body>

<p>
Zanim przejdziemy do kolejnego etapu, musimy sprawdzić ustawienia czasu i daty w
naszym systemie. Nieprawidłowe ustawienia mogą spowodować dziwne rezultaty w
przyszłości.
</p>

<p>
Sprawdzamy czas i datę przy pomocy polecenia <c>date</c>:
</p>

<pre caption="Weryfikacja czasu i daty">
# <i>date</i>
Fri Mar 29 16:21:18 CEST 2005
</pre>

<p>
Jeżeli wyświetlane data i czas są złe, musimy je uaktualnić poleceniem <c>date
MMDDggmmRRRR</c> (<b>M</b>iesiąc, <b>D</b>zień, <b>g</b>odzina, <b>m</b>inuta,
i <b>R</b>ok). Na przykład, aby ustawić datę 29 marca 2005 roku, 16:21:
</p>

<pre caption="Ustawianie czasu i daty">
# <i>date 032916212005</i>
</pre>

</body>
</subsection>
<subsection>
<title>Podejmowanie decyzji</title>
<body>

<p>
Kolejnym krokiem, jaki musimy wykonać, jest instalacja wybranego pliku etapu,
tzw. tarballa <e>stage</e>.
</p>

</body>
</subsection>
</section>
<section>
<title>Pobieranie tarballa stage</title>
<subsection>
<body>

<p>
Na początku przechodzimy do punktu montowania naszego nowego Gentoo (zazwyczaj
jest to <path>/mnt/gentoo</path>):
</p>

<pre caption="Przechodzenie do punktu montowania Gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
Poniższa tabela przedstawia jakiego pliku stage powinniśmy użyć w zależności od
posiadanego sprzętu. Tarballe stage można pobrać z <uri
link="/main/en/mirrors.xml">serwerów lustrzanych Gentoo</uri>. Znajdują się one
w katalogu <path>releases/mips/current</path>.
</p>

<table>
<tr>
  <th>Porządek bitów (endiana)</th>
  <th>Procesor</th>
  <th>Tarball stage</th>
</tr>
<tr>
  <ti>
    Duża Endiana (najpierw starszy)<br />
    <e>(użytkownicy SGI)</e>
  </ti>
  <ti>
    R4000<br />
    R4400<br />
    R4600
  </ti>
  <ti><c>mips3/stage#-mips3-RELEASE.tar.bz2</c></ti>
</tr>
<tr>
  <ti>
    Duża Endiana (najpierw starszy)<br />
    <e>(użytkownicy SGI)</e>
  </ti>
  <ti>
    R5000<br />
    RM5200<br />
    RM7000<br />
    R10000<br />
    R12000<br />
    R14000
  </ti>
  <ti><c>mips4/stage#-mips4-RELEASE.tar.bz2</c></ti>
</tr>
<tr>
  <ti>
    Mała Endiana (najpierw młodszy)<br />
    <e>(użytkownicy Cobalt)</e>
  </ti>
  <ti>
    RM5230<br />
    RM5231
  </ti>
  <ti><c>cobalt/stage#-mipsel4-RELEASE.tar.bz2</c></ti>
</tr>
<tr>
  <ti>
    Little Endian<br />
    <e>(Pozostałe)</e>
  </ti>
  <ti>
    Wszystkie typowe procesory
  </ti>
  <ti><c>cobalt/stage#-mipsel1-RELEASE.tar.bz2</c></ti>
</tr>
</table>

<warn>
Wprawdzie tworzymy pliki stage dla MIPS1 ale wspieramy tylko systemy oparte na
Cobalt. Pliki te są dla osób, które lubią poeksperymentować z Gentoo na
niewspieranych architekturach.
</warn>

<p>
Jeśli korzystamy z proxy, konieczne jest wyeksportowanie zmiennych
środowiskowych <c>http_proxy</c> i <c>ftp_proxy</c>:
</p>

<pre caption="Ustawianie informacji o proxy dla programu wget">
# <i>export http_proxy="http://proxy.server.com:port"</i>
# <i>export ftp_proxy="http://proxy.server.com:port"</i>
</pre>

<p>
Obraz netboot Gentoo/MIPS zawiera program <c>wget</c>, który służy do pobierania
plików. Ze względu na ograniczoną przestrzeń nie jest możliwe dostarczenie
innych tego typu aplikacji. Użytkownicy korzystający z LiveCD mogą użyć programu
<c>elinks</c>.
</p>

<pre caption="Pobieranie tarballa stage przy pomocy programu wget">
# <i>wget -c http://distfiles.gentoo.org/releases/mips/mips4/stage3-mips4-2008.0.tar.bz2</i>
</pre>

<p>
Aby sprawdzić integralność pobranego tarballa stage, używamy programu
<c>md5sum</c> i porównujemy wynik jego działania z sumami MD5 znajdującymi się
na serwerze. Przykładowo, aby sprawdzić poprawność tarballa stage mips4,
wykonamy polecenie:
</p>

<pre caption="Sprawdzanie integralności tarballa stage">
# <i>md5sum -c stage3-mips4-2008.0.tar.bz2.DIGESTS</i>
stage3-mips4-2008.0.tar.bz2: OK
# <i>sha1sum -c stage3-mips4-2008.0.tar.bz2.DIGESTS</i>
stage3-mips4-2008.0.tar.bz2: OK
</pre>

</body>
</subsection>
<subsection>
<title>Rozpakowywanie tarballa stage</title>
<body>

<p>
Wypakowujemy pobrany tarball stage. Używamy do tego programu GNU <c>tar</c>:
</p>

<pre caption="Rozpakowywanie tarballa stage">
# <i>tar -xjpf stage?-*.tar.bz2</i>
</pre>

<p>
Należy użyć dokładnie tych samych parametrów (<c>-xjpf</c>). <c>x</c> oznacza
<e>wypakowywanie</e>, <c>j</c> to <e>dekompresja archiwum bzip2</e>, <c>p</c>
nakazuje <e>zachowanie uprawnień</e>, a <c>f</c> wskazuje,
że chcemy rozpakować to, co czytamy z pliku, a nie ze standardowego wejścia.
</p>

<p>
Kolejny krok to <uri link="#installing_portage">Instalacja Portage</uri>.
</p>

</body>
</subsection>
</section>
<section id="installing_portage">
<title>Instalacja Portage</title>
<subsection>
<title>Rozpakowywanie snapshota Portage</title>
<body>

<p>
W tym rozdziale omówimy proces instalacji snapshota Portage - kolekcji plików,
które informują Portage jakie programy można zainstalować, które profile są
dostępne itp.
</p>

</body>
</subsection>
<subsection id="installing_from_Internet">
<title>Ściąganie i instalowanie snapshota Portage</title>
<body>

<p>
Przechodzimy do miejsca gdzie zamontowaliśmy system plików (zwykle
<path>/mnt/gentoo</path>):
</p>

<pre caption="Przechodzenie do punktu montowania Gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
Pobieramy snapshot Portage z jednego z <uri
link="/main/en/mirrors.xml">serwerów lustrzanych</uri>. Snapshoty znajdują się w
katalogu <path>snapshots/</path>. Pobrany plik wypakowujemy w budowanym
systemie tak, jak zrobiliśmy to w przypadku tarballa stage.
</p>

<pre caption="Wypakowywanie snapshota Portage">
# <i>tar -xjf portage-*.tar.bz2 -C /mnt/gentoo/usr</i>
</pre>

</body>
</subsection>
</section>

<section id="compile_options">
<title>Konfigurowanie opcji kompilacji</title>
<subsection>
<title>Wprowadzenie</title>
<body>

<p>
Jest wiele możliwych do skonfigurowania zmiennych wpływających na zachowanie
Gentoo. Możemy je wprowadzać jako zmienne środowiskowe (poprzez <c>export</c>),
ale wtedy nie zostaną zapisane na stałe. Zamiast tego Portage do utrzymywania
konfiguracji używa pliku <path>/etc/make.conf</path>. Pora wziąć się za jego
edycję.
</p>

<note>
Opatrzona komentarzami lista wszystkich możliwych zmiennych znajduje się w pliku
<path>/mnt/gentoo/etc/make.conf.example</path>. Do szczęśliwego ukończenia
instalacji wystarczy wyedytowanie tylko kilku z nich, tych, których listę
przedstawiamy poniżej.
</note>

<p>
Uruchamiamy ulubiony edytor, który posłuży nam do wprowadzenia omawianych opcji
optymalizacji. Dostępne są dwa programy tego typu: <c>vi</c> (stanowiący część
Busybox) i <c>nano</c>. W przykładach konsekwentnie korzystamy z <c>nano</c>.
</p>

<pre caption="Otwieranie do edycji pliku /etc/make.conf">
# <i>nano -w /mnt/gentoo/etc/make.conf</i>
</pre>

<p>
Plik <path>make.conf.example</path> ma charakterystyczną strukturę: linie z
komentarzami rozpoczynają się od znaku "#", linie zawierające zmienne używają
składni <c>ZMIENNA="zawartość"</c>. Takiej samej składni używa także plik
<path>make.conf</path>. Kilka z tych zmiennych zostało przedyskutowanych
poniżej.
</p>

</body>
</subsection>
<subsection>
<title>CFLAGS i CXXFLAGS</title>
<body>



<p>
Zmienne <c>CFLAGS</c> i <c>CXXFLAGS</c> definiują flagi optymalizujące
używane odpowiednio przez kompilator <c>gcc</c> C i C++. Choć generalnie
określamy ich wartości tutaj, maksimum wydajności osiągniemy dopasowując
je do każdego programu z osobna. Jest tak dlatego że programy znacząco różnią
się między sobą.
</p>

<p>
W <path>make.conf</path> należy zdefiniować flagi optymalizacji, co do
których jesteśmy przekonani, że <e>w głównej mierze</e> poprawią czas reakcji
systemu. Nie przypisujmy pod tę zmienną ustawień eksperymentalnych; przesada
w optymalizacji może spowodować, że programy zaczną źle funkcjonować
(nagle przerywać działanie lub nawet gorzej - wcale nie działać).
</p>

<p>
Nie będziemy tłumaczyć znaczenia wszystkich możliwych opcji optymalizacji.
Wszystkie są wymienione w <uri link="http://gcc.gnu.org/onlinedocs/">Podręczniku
Online GNU </uri> i stronie info <c>gcc</c> (<c>info gcc</c> - działa tylko na
systemach linuksowych). Plik <path>make.conf.example</path> sam zawiera dużo
informacji i przykładów - należy go uważnie przeczytać.
</p>

<p>
Pierwszą flagą jaką się zajmiemy będzie <c>-march=</c>. Określa ona docelową
architekturę, na którą kompilowane będą programy. Możliwe jej wartości są
opisane jako komentarze w pliku <path>make.conf.example</path>. Przykłady
odejmują zarówno modele procesorów (<c>r4400</c>, <c>r4600</c> itd.), jak
również różne zestawy instrukcji procesorów (od <c>mips1</c> do
<c>mips4</c>). Aby sprecyzować wyłącznie zestaw instrukcji procesora, wystarczy
dodać flagę <c>-mips3</c> zamiast <c>-march=mips3</c>.
</p>

<pre caption="Ustawienia -march i -mips# dla GCC">
<comment>(Dla procesorów R4600...)</comment>
-march=r4600

<comment>(Dowolny procesor klasy MIPS4...)</comment>
-march=mips4

<comment>(Określenie wyłącznie zestawu instrukcji procesora...)</comment>
-mips4
</pre>

<p>
Zwróćmy teraz uwagę na flagę <c>-O</c> (jest to duża litera O, a nie cyfra
zero), która określa klasę optymalizacji <c>gcc</c>. Dostępne klasy to <c>s</c>
(optymalizacja rozmiaru), <c>0</c> (cyfra zero - brak optymalizacji), <c>1</c>,
<c>2</c> lub <c>3</c> - coraz silniej optymalizujące (każda z nich używa tych
samych flag, co poprzednia oraz dodaje własne). W przykładzie użyjemy klasy
optymalizacji 2:
</p>

<pre caption="Ustawienia optymalizacji">
-O2
</pre>

<p>
W świecie MIPS bardzo ważną flagą jest <c>-mabi=</c>. MIPS posiada trzy typy
ABI: <c>32</c> (czysty 32-bitowy, określany jako <c>o32</c>), <c>64</c> (pełny
64-bitowy, nazywany <c>n64</c>) i <c>n32</c>
(połączenie 32-bitowych struktur danych z 64-bitowymi instrukcjami). Flaga
<c>-mabi=</c> określa, który z powyższych typów chcemy wykorzystać. Pamiętajmy,
że dla wybranego typu, potrzebujemy odpowiednich bibliotek. Innymi słowy,
oznacza to, że np. nie możemy użyć flagi <c>-mabi=64</c> w 32-bitowym środowisku
(nie możemy jej użyć nawet w środowisku <c>n32</c>).
</p>

<p>
Inną popularną flagą optymalizującą jest <c>-pipe</c> (gcc używa potoków zamiast
plików tymczasowych w komunikacji między różnymi etapami kompilacji).
</p>

<p>
Pamiętajmy, że użycie flagi <c>-fomit-frame-pointer</c> (która sprawi, że w
rejestrach nie będą przechowywane wskaźniki ramki dla funkcji, które ich nie
wymagają), może spowodować poważne problemy podczas debugowania kodu!
</p>

<p>
Podczas definiowania <c>CFLAGS</c> i <c>CXXFLAGS</c> można łączyć kilka
flag optymalizacji, na przykład w ten sposób:
</p>

<pre caption="Definiowanie zmiennych CFLAGS i CXXFLAGS">
CFLAGS="-mabi=32 -mips4 -pipe -O2"
CXXFLAGS="${CFLAGS}"                  <comment># Użycie tych samych ustawień dla obu zmiennych</comment>
</pre>

</body>
</subsection>
<subsection>
<title>MAKEOPTS</title>
<body>

<p>
Za pomocą <c>MAKEOPTS</c> definiujemy jak wiele równoległych kompilacji będzie
przeprowadzanych podczas przygotowywania pakietu do instalacji. Sugerowaną
liczbą jest ilość procesorów w systemie powiększona o jeden, nie jest to jednak
zawsze najlepsze wyjście.
</p>

<pre caption="MAKEOPTS dla przeciętnego systemu jednoprocesorowego">
MAKEOPTS="-j2"
</pre>

</body>
</subsection>
<subsection>
<title>Gotowi, do biegu, start!</title>
<body>

<p>
Edytujemy plik <path>/mnt/gentoo/etc/make.conf</path> zgodnie z naszymi
preferencjami i zapisujemy zmiany (użytkownicy <c>nano</c> zrobią to za pomocą
skrótu klawiszowego <c>Ctrl-X</c>). Możemy kontynuować instalację zgodnie z
rozdziałem <uri link="?part=1&amp;chap=6">Instalacja systemu podstawowego</uri>.
</p>

</body>
</subsection>
</section>
</sections>
