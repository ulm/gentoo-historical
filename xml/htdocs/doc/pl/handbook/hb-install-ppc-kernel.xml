<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/hb-install-ppc-kernel.xml,v 1.2 2004/12/31 17:14:15 swift Exp $ -->

<sections>

<version>1.12</version>
<date>2004-12-12</date>

<section>
<title>Strefa czasowa.</title>
<body>

<p>
Aby system wiedział gdzie się znajduje powinieneś najpierw wybrać swoją
strefę czasową. Odszukaj ją w <path>/usr/share/zoneinfo</path>, a następnie
za pomocą <c>ln</c> utwórz do niej symlinka <path>/etc/localtime</path>.
</p>

<pre caption="Konfiguracja strefy czasowej">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Zakładając, że chcesz Poland)</comment>
# <i>ln -sf /usr/share/zoneinfo/Poland /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Instalacja źródeł.</title>
<subsection>
<title>Wybór jądra.</title>
<body>

<p>
Sercem każdej dystrybucji jest jądro Linux. Stanowi ono interfejs pomiędzy
programami i sprzętem. Gentoo dostarcza użytkownikom
różne źródła kerneli. Pełna lista wraz z opisami znajduje się w
<uri link="/doc/en/gentoo-kernel.xml">Przewodniku jąder Gentoo</uri>.
</p>

<p>
Dla architektury PPC mamy do wyboru jądra <c>development-sources</c> i
<c>gentoo-dev-sources</c> (oba serii 2.6). Te drugie są dostępne w instalacji
bez dostępu do sieci. Dla maszyn Pegasos oferujemy <c>pegasos-dev-sources</c>,
jądro serii 2.6 z nałożonym specjalnym zestawem poprawek dla tego sprzętu.
Wybierzmy sobie któreś i zainstalujmy:
</p>

<pre caption="Instalowanie źródeł jądra">
# <i>emerge gentoo-dev-sources</i>
</pre>

<p>
W katalogu <path>/usr/src</path> powinieneś mieć mniej więcej taki symlink, o
nazwie <path>linux</path>, wskazujący na źródła Twojego aktualnego kernela:
</p>

<pre caption="Podgląd symlinka do źródeł kernela">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Jul 10 10:55 /usr/src/linux -&gt; linux-2.6.9
</pre>

<p>
Jeśli informacje z symlinka nie pokrywają się z rzeczywistością (np. wskazuje na
inne niż Twoje źródła kernela) to będziesz musiał go poprawić zanim przejdziesz
do dalszych części tego dokumentu.
</p>

<pre caption="Zmiana dowiązania symbolicznego do źródeł jądra">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.6.9 linux</i>
</pre>

<p>
Pora na skonfigurowanie i skompilowanie źródeł jądra. Możesz użyć do tego
programu <c>genkernel</c>, który zbuduje uniwersalne jądro, takie jak np.
to używane przez LiveCD. Możesz też przeprowadzić cały proces ręcznie i lepiej
dostostosować kernel do swoich potrzeb. Zaczniemy od omówienia tej drugiej,
znacznie lepszej metody.
</p>

<p>
Przejdź do paragrafu <uri link="#manual">Ręczna konfiguracja.</uri>
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Ręczna konfiguracja.</title>
<subsection>
<title>Wprowadzenie.</title>
<body>

<p>
Ręczna konfiguracja kernela jest często postrzegana jako najtrudniejsza czynność
jaką użytkownicy Linuksa muszą wykonywać. Nie jest to prawdą, po skompilowaniu
kilku kerneli zapomnicie, że kiedykowiek uważaliście to za trudne zadanie.
</p>

<p>
Nie sposób jednak zaprzeczyć, że należy dobrze znać swój komputer, aby móc
prawidłowo skonfigurować kernel. Większość informacji o maszynie znajdziemy
przeglądając zawartość <path>/proc/pci</path> (lub przy użyciu polecenia
<c>lspci</c> - jeśli działa). Dodatkowe informacje o tym co warto włączyć w swój
kernel można uzyskać dzięki poleceniu <c>lsmod</c>, które pokaże listę
modułów jakie załadowało LiveCD.
</p>

<p>
Kiedy już zbierzemy wszystkie informacje przechodzimy do katalogu ze
źródłami i wpisujemy polecenie <c>make menuconfig</c>. Uruchomi się menu
konfiguracyjne oparte na ncurses.
</p>

<pre caption="Uruchamianie menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Zobaczymy okienko z listą sekcji, na które podzielono cały proces konfiguracji.
Zaczniemy od omówienia opcji, które musisz aktywować, aby zapewnić prawidłowe
działanie Gentoo.
</p>

</body>
</subsection>
<subsection>
<title>Zaznaczanie wymaganych ustawień.</title>
<body>

<p>
Po pierwsze włącz możliwość korzystania z rozwojowych i eksperymentalnych
fragmentów kodu jądra. Jeśli tego nie zrobisz to nawet nie zobaczysz kilku
bardzo ważnych opcji.
</p>

<pre caption="Wybieranie opcji experimental code/drivers">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Następnie przejdź do <c>File Systems</c> i wybierz wsparcie dla systemów plików,
których zamierzasz używać. Jeśli tego zaniedbasz Gentoo nie będzie w stanie
zamontować partycji, a czasem nawet się nie uruchomi. Pamiętaj również, aby
włączać te sterowniki na stałe do jądra, broń Boże nie kompiluj ich jako
modułów. Przy okazji zaznacz też <c>Virtual memory</c> i <c>/proc file
system</c>.
</p>

<pre caption="Wybór potrzebnych systemów plików">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [ ] /dev file system support (OBSOLETE)
    [ ]   Automatically mount at boot
    [*] Virtual memory file system support (former shm fs)

<comment>(Wybierz jedną lub kilka z tych opcji zależnie od używanych systemów plików.)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Jeśli używasz PPPoE do łączenia się z Internetem, lub gdy używasz modemu dial-up
będziesz musiał włączyć następujące opcje:
</p>

<pre caption="Sterowniki niezbędne dla użytkowników PPPoE">
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Obie opcje dotyczące kompresji nie są wprawdzie wymagane, ale również nie
zaszkodzą naszemu systemowi, podobnie zresztą jak opcja <c>PPP over
Ethernet</c>, która jest przydatna tylko gdy skonfigurujesz <c>rp-pppoe</c> do
pracy w trybie jądra PPPoE.
</p>

<p>
Nie zapomnij wkompilować sterownika dla swojej karty sieciowej.
</p>

<p>
Wyłącz ADB raw keycodes:
</p>

<pre caption="Wyłączanie ADB raw keycodes">
Macintosh Device Drivers ---&gt;
  [ ] Support for ADB raw keycodes
</pre>

<p>
Wybierz także właściwe wsparcie dla RTC (<e>wyłącz</e> opcję <c>Enhanced RTC</c>.
</p>

<pre caption="Aktywowanie właściwego wsparcia dla RTC">
Character devices ---&gt;
  [ ] Enhanced RTC

General setup ---&gt;
  [*] Support for /dev/rtc
</pre>

<p>
Użytkownicy maszyn OldWorld będą potrzebowali wsparcia dla HFS, aby skopiować
skompilowane jądro na partycję MacOS.
</p>

<pre caption="Aktywowanie wsparcia dla HFS">
File Systems ---&gt;
  [*] HFS Support
</pre>

<p>
Kiedy skończysz konfigurować swój kernel przejdź do paragrafu
<uri link="#compiling">Kompilacja i instalacja</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilacja i instalacja.</title>
<body>

<p>
Po skonfigurowaniu kernela przyszła pora na jego skompilowanie i
instalację. Opuść program konfiguracyjny i wpisz następujące polecenia:
</p>

<pre caption="Kompilowanie kernela.">
# <i>make all &amp;&amp; make modules_install</i>
</pre>

<p>
Kiedy jądro skończy się kompilować przekopiuj jego obraz do katalogu
<path>/boot</path>.
</p>

<pre caption="Instalowanie kernela">
<comment>Zastąp 2.6.9 wersją swojego jądra</comment>
(Apple/IBM)  # <i>cp vmlinux /boot/kernel-2.6.9</i>
(Pegasos)    # <i>cp arch/ppc/boot/images/zImage.chrp /boot/kernel-2.6.9</i>
</pre>

<p>
Nie zapomnij o skopiowaniu pliku System.map:
</p>

<pre caption="Kopiowanie System.map">
# <i>cp System.map /boot/System.map-2.6.9</i>
</pre>

<p>
Zwykle mądrą decyzją jest skopiowanie tam również pliku konfiguracyjnego, który
posłużył do zbudowania jądra.
</p>

<pre caption="Tworzenie kopii zapasowej konfiguracji jądra">
# <i>cp .config /boot/config-2.6.9</i>
</pre>

<p>
Kiedy skończysz przejdź do paragrafu <uri link="#kernel_modules">Instalacja
osobnych modułów jądra</uri>.
</p>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Instalacja osobnych modułów jądra.</title>
<subsection>
<title>Konfigurowanie modułów.</title>
<body>

<p>
ista modułów, które chcesz aby były automatycznie ładowane przy starcie systemu
powinna znajdować się w pliku <path>/etc/modules.autoload.d/kernel-2.4</path>
(lub <path>kernel-2.6</path>). Czasem jeśli chcesz możesz dodać kilka opcji dla
modułów.
</p>

<p>
Żeby przejrzeć listę wszystkich dostępnych użyj komendy <c>find</c>. Oczywiście
powinieneś zastąpić słowa "&lt;wersja jądra&gt;" numerem świeżo skompilowanego
kernela.
</p>

<pre caption="Znajdowanie dostępnych modułów">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Na przykład aby automatycznie ładować do pamięci moduł <c>3c59x.o</c> wyedytuj
plik <path>kernel-2.4</path> lub <path>kernel-2.6</path> i wprowadź do niego
nazwę tego modułu.
</p>

<pre caption="Edycja /etc/modules.autoload.d/kernel-2.4">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Następnie uruchom <c>modules-update</c>, aby potwierdzić wprowadzone do pliku
<path>/etc/modules.conf</path> zmiany:
</p>

<pre caption="Uruchamianie modules-update">
# <i>modules-update</i>
</pre>

<p>
Od wersji 2004.3 zalecamy używanie udev zamiast devfs. Żeby Twój system działał
musisz zatem emergować udev:
</p>

<pre caption="Emerging udev">
# <i>emerge udev</i>
</pre>

<p>
Kiedy skończysz przejdź do rozdziału <uri link="?part=1&amp;chap=8">Konfiguracja
systemu</uri>.
</p>

</body>
</subsection>
</section>
</sections>
