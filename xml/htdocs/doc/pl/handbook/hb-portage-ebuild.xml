<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- Orig revision: 1.6 -->
<!-- Translator: rane <rane@gentoo.org> -->
<!-- Status: Release -->
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/Attic/hb-portage-ebuild.xml,v 1.9 2005/08/21 00:53:06 rane Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Id: hb-portage-ebuild.xml,v 1.9 2005/08/21 00:53:06 rane Exp $ -->

<sections>

<version>1.3</version>
<date>2004-10-24</date>

<section>
<title>Emerge, a ebuild.</title>
<body>

<p>
Aplikacja <c>ebuild</c> jest niskopoziomowym interfejsem systemu Portage. Przy
pomocy tej aplikacji można wykonywać konkretne akcje w danych plikach ebuild. Na
przykład można samodzielnie wykonać poszczególne etapy emergowania któregoś z
pakietów.
</p>

<p>
Aplikacji <c>ebuild</c> zwykle używają developerzy; więcej informacji o niej
znajdziesz w <uri link="/proj/en/devrel/handbook/handbook.xml">Podręczniku
developerów</uri>. Mimo wszystko postaramy się wyjaśnić te funkcje aplikacji
<c>ebuild</c>,
które są wykorzystywane w trakcie procesu emergowania pakietów, oraz możliwe do
przeprowadzenia działania konfiguracyjne jakie można na ebuildach przeprowadzić.
</p>

</body>
</section>
<section>
<title>Ręczna intalacja oprogramowania.</title>
<subsection>
<title>Pobieranie źródeł i sprawdzanie sum kontrolnych.</title>
<body>

<p>
Za każdym razem gdy uruchomiasz aplikację <c>ebuild</c> na pliku ebuild wszystkie
związane z nim sumy kontrolne są porównywane z sumami zapisanymi w plikach
<path>Manifest</path> lub
<path>files/digest-&lt;nazwa&gt;-&lt;wersja&gt;</path>. Operacja ta jest
przeprowadzana tuż po ukończeniu pobierania źródeł programu.
</p>

<p>
Aby pobrać źródła pakietu przy pomocy programy <c>ebuild</c> wpisz:
</p>

<pre caption="Pobieranie źródeł">
# <i>ebuild ścieżka/do/pliku/z/ebuildem fetch</i>
</pre>

<p>
Jeśli suma kontrolna pliku ebuild nie zgadza się z sumą kontrolną zapisaną w
pliku <path>Manifest</path>, lub gdy suma kontrolna jednego z pobranych plików
jest niezgodna z wartością zapisaną w pliku
<path>files/digest-&lt;pakiet&gt;</path> otrzymasz następujący błąd:
</p>

<pre caption="Błąd sumy kontrolnej">
!!! File is corrupt or incomplete. (Digests do not match)
>>> our recorded digest: db20421ce35e8e54346e3ef19e60e4ee
>>>  your file's digest: f10392b7c0b2bbc463ad09642606a7d6
</pre>

<p>
W kolejnym wierszu zostanie podana nazwa pliku, który spowodował błąd.
</p>

<p>
Jeśli jesteś pewien, że pobrane źródła oraz plik ebuild są poprawne możesz
od nowa wygenerować pliki <path>Manifest</path> i
<path>digest-&lt;pakiet&gt;</path> przy pomocy funkcji digest aplikacji
<c>ebuild</c>:
functionality:
</p>

<pre caption="Regenerowanie Manifestu i pliku digest">
# <i>ebuild /ścieżka/do/pliku/z/ebuildem digest</i>
</pre>

</body>
</subsection>
<subsection>
<title>Rozpakowywanie źródeł.</title>
<body>

<p>
Aby rozpakować źródła do <path>/var/tmp/portage</path> (lub dowolnego innego
katalogu wyznaczonego do tych celów w <path>/etc/make.conf</path>) użyj funkcji
unpack aplikacji <c>ebuild</c>:
</p>

<pre caption="Rozpakowywanie źródeł">
# <i>ebuild ścieżka/do/pliku/z/ebuildem unpack</i>
</pre>

<p>
Powyższe polecenie wykona funcję src_unpack() zapisaną w ebuildzie (która
sprowadza się do zwykłego rozpakowania plików, gdy funkcja ta nie jest
dokładniej zdefiniowana). W tym kroku są również aplikowane wszystkie niezbędne
patche.
</p>

</body>
</subsection>
<subsection>
<title>Kompilowanie źródeł.</title>
<body>

<p>
Następnym krokiem w procesie emergowania pakietów jest kompilacja źródeł.
Zajmuje się tym kolejna funkcja aplikacji <c>ebuild</c> - compile, która po
kolei wykonuje instrukcje zapisane w sekcji src_compile() pliku ebuild. Proces
ten obejmuje również wszystkie działania związane z konfiguracją pakietu.
</p>

<pre caption="Kompilowanie źródeł.">
# <i>ebuild ścieżka/do/pliku/z/ebuildem compile</i>
</pre>

<p>
Polecamy zmienić sekcję src_compile() pliku ebuild, gdy chcesz zmienić opcje
kompilacji. Ponadto możesz nabrać Portage, tak aby wierzyło, że aplikacja
<c>ebuild</c> ukończyła wszystkie etapy kompilacji. Aby to uczynić samodzielnie wykonaj
wszystkie etapy kompilacji, a następnie utwórz w katalogu roboczym pusty plik
<path>.compiled</path>:
</p>

<pre caption="Informowanie Portage o ukończonych zadaniach kompilacji">
# <i>touch .compiled</i>
</pre>

</body>
</subsection>
<subsection>
<title>Instalowanie plików do katalogu tymczasowego.</title>
<body>

<p>
Kolejnym krokiem wykonywanym przez Portage jest instalacja wszystkich
potrzebnych plików do katalogu tymczasowego. Katalog ten będzie zawierał
wszystkie pliki, które muszą zostać zemergowane do systemu. Dokonasz tego
używając kolejnej z funkcji aplikacji <c>ebuild</c> - install, która wykonuje
komendy zawarte w sekcji src_install() pliku ebuild.
</p>

<pre caption="Instalowanie plików">
# <i>ebuild ścieżka/do/pliku/z/ebuildem install</i>
</pre>

</body>
</subsection>
<subsection>
<title>Emergowanie plików do bieżącego systemu.</title>
<body>

<p>
Ostatnią czynnością wykonywaną w procesie instalacji jest wgrywaanie plików do
systemu i rejestrowanie ich w Portage Backend. W języku aplikacji
<c>ebuild</c> krok ten nazywa się "qmerge" i składa się z następujących etapów:
</p>

<ul>
  <li>Uruchomienie funkcji pkg_preinst() jeśli jest zdefiniowana.</li>
  <li>Skopiowanie wszystkich plików do systemu.</li>
  <li>Zarejestrowanie plików w Portage backend.</li>
  <li>Uruchomienie funkcji pkg_postinst() jeśli jest zdefiniowana.</li>
</ul>

<p>
Żeby wykonać wszystkie te czynności użyj funkcji qmerge aplikacji <c>ebuild</c>.
</p>

<pre caption="Emergowanie plików do systemu.">
# <i>ebuild ścieżka/do/pliku/z/ebuildem qmerge</i>
</pre>

</body>
</subsection>
<subsection>
<title>Czyszczenie katalogu tymczasowego.</title>
<body>

<p>
Na koniec można jeszcze wyczyścić tymczasowy katalog, za co odpowiedzialna jest
funkcja clean aplikacji <c>ebuild</c>.
</p>

<pre caption="Czyszczenie katalogu tymczasowego.">
# <i>ebuild ścieżka/do/pliku/z/ebuildem clean</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Inne funkcje aplikacji ebuild.</title>
<subsection>
<title>Uruchamianie wszystkich komend związanych z emergowaniem.</title>
<body>

<p>
Przy pomocy funkcji merge aplikacji <c>ebuild</c> możesz wykonać naraz wszystkie
prezentowane wcześniej polecenia: fetch, unpack, compile, install i qmerge:
</p>

<pre caption="Instalacja oprogramowania">
# <i>ebuild ścieżka/do/pliku/z/ebuildem merge</i>
</pre>

</body>
</subsection>
<subsection>
<title>Konfigurowanie.</title>
<body>

<p>
Niektóre aplikacje zawierają instrukcje, które pomagają skonfigurować dany
pakiet na potrzeby konkretnego systemu. Te instrukcje zwykle są interaktywne i
nie mogą zostać wykonane automatycznie. Aby wykonać te wymienione w sekcji
config() każdego ebuildu czynności konfiguracyjne użyj funkcji config aplikacji
ebuild.
</p>

<pre caption="Konfigurowanie pakietu.">
# <i>ebuild ścieżka/do/pliku/z/ebuildem config</i>
</pre>

</body>
</subsection>
<subsection>
<title>Budowanie pakietów RPM.</title>
<body>

<p>
Możesz nakazać Portage budowę binarnego pakietu, lub nawet pakietu RPM.
Potrzebna do tego jest jedna z dalszych funkcji aplikacji <c>ebuild</c>: funkcja
package lub funkcja rpm. Istnieje między nimi kilka różnic:
</p>

<ul>
  <li>
Funkcja package bardzo przypomina funkcję merge, gdyż wykonuje wszystkie niezbędne
kroki (fetch, unpack, compile, install) przed utworzeniem paczki.
  </li>
  <li>
Funkcja rpm tworzy pakiet RPM z pliku utworzonych po wykonaniu funkcji install
aplikacji <c>ebuild</c>.
  </li>
</ul>

<pre caption="Tworzenie paczek">
<comment>(format kompatybilny z Portage)</comment>
# <i>ebuild ścieżka/do/pliku/z/ebuildem package</i>

<comment>(dla pakietów RPM)</comment>
# <i>ebuild ścieżka/do/pliku/z/ebuildem rpm</i>
</pre>

<p>
Utworzony w ten sposób pakiet RPM nie zawiera informacji na temat zależności.
</p>

</body>
</subsection>
</section>
<section>
<title>Więcej informacji.</title>
<subsection>
<body>

<p>
Aby uzyskać więcej informacji na temat Portage, aplikacji, oraz plików ebuild
zapoznaj się z następującymi stronami man:
</p>

<pre caption="Manuale">
$ <i>man portage</i>    <comment>(Portage)</comment>
$ <i>man emerge</i>     <comment>(Polecenie emerge)</comment>
$ <i>man ebuild</i>     <comment>(Polecenie ebuild)</comment>
$ <i>man 5 ebuild</i>   <comment>(Składnia pliku ebuild)</comment>
</pre>

<p>
Innych informacji związanych z pracą developera szukaj w <uri
link="/proj/en/devrel/handbook/handbook.xml">Podręczniku developera</uri>
</p>

</body>
</subsection>
</section>
</sections>
