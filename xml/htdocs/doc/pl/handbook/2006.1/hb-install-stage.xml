<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/2006.1/hb-install-stage.xml,v 1.5 2007/02/01 16:05:32 shadoww Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>7.1</version>
<date>2006-10-31</date>

<section>
<title>Instalowanie tarballa stage</title>
<subsection>
<title>Ustawienie poprawnej daty i czasu</title>
<body>

<p>
Na samym początku całego procesu instalacji należy sprawdzić datę/czas i
ewentualnie je zaktualizować. Niezsychronizowany zegar może być przyczyną
dziwnych błędów w przyszłości!
</p>

<p>
Aby zweryfikować aktualną datę/czas, uruchamiamy <c>date</c>:
</p>

<pre caption="Sprawdzenie daty/czasu">
# <i>date</i>
nie sie 21 01:56:26 UTC 2005
</pre>

<p>
Jeżeli wyświetlane data i czas są złe, musimy je uaktualnić poleceniem <c>date
MMDDggmmRRRR</c> (<b>M</b>iesiąc, <b>D</b>zień, <b>g</b>odzina, <b>m</b>inuta i
<b>R</b>ok). Na tym etapie powinniśmy korzystać z czasu UTC. W późniejszym
czasie będziemy mogli zdefiniować naszą strefę czasową. Na przykład, aby ustawić
datę 29 marca 2005 roku, 16:21:
</p>

<pre caption="Ustawienie daty/czasu UTC">
# <i>date 032916212005</i>
</pre>

</body>
</subsection>
<subsection>
<title>Lokalizowanie pliku Stage3</title>
<body>

<p>
Jeżeli skonfigurowaliśmy sieć, potrzebną do ściągnięcia pliku stage3 na naszą
architekturę, przechodzimy do działu <uri link="#download">Alternatywnie:
Użycie Stage3 z Internetu</uri>. W przeciwnym wypadku należy zapoznać się z
działem <uri link="#available">Domyślnie: Użycie Stage3 z płyty
instalacyjnej</uri>.
</p>

</body>
</subsection>
</section>

<section id="available">
<title>Domyślnie: Użycie Stage z płyty instalacyjnej</title>
<subsection>
<title>Rozpakowywanie archiwum Stage</title>
<body>

<p>
Pliki stage znajdują się na płycie CD w katalogu
<path>/mnt/cdrom/stages</path>. Aby zobaczyć listę dostępnych plików używamy
polecenia <c>ls</c>:
</p>

<pre caption="Lista dostępnych plików stage">
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
Jeżeli po wykonaniu polecenia otrzymamy błąd, może być potrzebne zamontowanie
napędu CD-ROM:
</p>

<pre caption="Montowanie napędzu CD-ROM">
# <i>ls /mnt/cdrom/stages</i>
ls: /mnt/cdrom/stages: No such file or directory
# <i>mount /dev/cdroms/cdrom0 /mnt/cdrom</i>
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
Następnie należy przejść do punktu montowania Gentoo (najcześciej
<path>/mnt/gentoo</path>):
</p>

<pre caption="Zmiana katalogu na /mnt/gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
Należy wypakować wybrany przez nas plik stage. Służy do tego narzędzie
<c>tar</c>. Należy upewnić się, ze podajemy takie same opcje (<c>xvjpf</c>)!
Opcja <c>x</c> opowiada za <e>rozpakowanie</e>, <c>v</c> jest skrótem od
<e>Verbose</e>, aby zobaczyć co się dzieje podczas procesu rozpakowywania
(opcja ta jest opcjonalna), <c>j</c> odpowiada za <e>dekopresję przy pomocy
bzip2</e>, <c>p</c> <e>zachowuje zezwolenia</e> natomiast opcja <c>f</c>
informuje o tym, że chcemy rozpakować plik, a nie standardowe wyjście. W
przykładzie posłużymy się plikiem stage
<path>stage3-&lt;subarch&gt;-2006.1.tar.bz2</path>. Należy pamiętać o tym, aby
zastąpić nazwę archiwum, wpisem odpowiednim do posiadanego przez nas stage.
</p>

<pre caption="Rozpakowywanie archiwum stage">
# <i>tar xvjpf /mnt/cdrom/stages/stage3-&lt;subarch&gt;-2006.1.tar.bz2</i>
</pre>

<p>
Kiedy już zainstalujemy stage, przechodzimy do <uri
link="#installing_portage">Instalacji drzewa Portage</uri>.
</p>

</body>
</subsection>
</section>

<section id="download">
<title>Alternatywnie: Użycie stage z Internetu</title>
<subsection>
<title>Pobieranie tarballa stage</title>
<body>

<p>
Na początku przechodzimy do punktu montowania systemu plików Gentoo
(zwykle jest to <path>/mnt/gentoo</path>):
</p>

<pre caption="Przechodzenie do punktu montowania systemu plików Gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
W zależności od medium instalacyjnego mamy do dyspozycji kilka narzędzi, za
pomocą których możemy pobrać plik stage. Jeżeli mamy program <c>links</c>
możemy wejść bezpośrednio na <uri link="/main/en/mirrors.xml">listę serwerów
lustrzanych Gentoo</uri> i wybrać serwer, który znajduje się najbliżej.
</p>

<p>
Jeżeli nie mamy programu <c>links</c>, musimy skorzystać z przeglądarki
<c>lynx</c> do tego celu. Aby używać serwera proxy musimy również
wyeksportować zmienne <c>http_proxy</c> i <c>ftp_proxy</c>:
</p>

<pre caption="Ustawienie informacji o proxy dla lynxa">
# <i>export http_proxy="http://proxy.server.com:port"</i>
# <i>export ftp_proxy="http://proxy.server.com:port"</i>
</pre>

<p>
W dalszej części zakładamy, że do swojej dyspozycji mamy przeglądarkę
<c>links</c>.
</p>

<p>
Przechodzimy do <path>releases/</path>, a następnie do katalogu odpowiedniej
architektury (np. <path>x86/</path>) oraz wersji Gentoo (<path>2006.1/</path>)
i na koniec do <path>stages/</path>. Znajdują się tam pliki stage dla wybranej
architektury (czasem mogą być umieszczone w podkatalogach dla różnych
podarchitektur). Wybieramy jeden i naciskamy <c>D</c>, aby go ściągnąć. Kiedy
pobieranie dobiegnie końca wciskamy <c>Q</c>, aby wyjść z przeglądarki.
</p>

<pre caption="Przeglądanie listy serwerów lustrzanych za pomocą links">
# <i>links http://www.gentoo.org/main/en/mirrors.xml</i>

<comment>(Jeżeli potrzebne jest proxy w links:)</comment>
# <i>links -http-proxy serwer.proxy.com:8080 http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

<p>
Należy się upewnić, że posiadamy archiwum ze stage 3. Instalacje z użyciem
stage 1 lub stage 2 nie są już wspierane.
</p>

<p>
Jeśli chcemy zweryfikować poprawność pobranych archiwów stage, musimy porównać
wynik polecenia <c>md5sum</c> z sumami MD5 udostępnianymi na serwerze. Np.
aby sprawdzić poprawność tarballa stage dla architektury x86:
</p>

<pre caption="Sprawdzanie integralności tarballa stage">
# <i>md5sum -c stage1-x86-2006.1.tar.bz2.md5</i>
stage1-x86-2006.1.tar.bz2: OK
</pre>

</body>
</subsection>
<subsection>
<title>Rozpakowywanie tarballa Stage</title>
<body>

<p>
Wypakowujemy pobrany plik stage przy pomocy <c>tar</c>:
</p>

<pre caption="Wypakowanie stage">
# <i>tage3-*.tar.bz2</i>
</pre>

<p>
Należy użyć dokładnie tych samych przełączników (<c>xvjpf</c>). Opcja <c>x</c>
oznacza <e>wypakuj</e>, <c>v</c> to <e>wyświetl</e>, aby widzieć co się dzieje
podczas wypakowywania (ok, to jest opcjonalne), <c>j</c> służy do
<e>dekompresji  archiwum bzip2</e>, <c>p</c> to <e>zachowuj uprawnienia</e>,
natomiast <c>f</c> podkreśla, że chcemy rozpakować to, co czytamy z pliku, a nie
ze standardowego wejścia.
</p>

<p>
Gdy stage jest już zainstalowany, pora przejść do <uri
link="#installing_portage">Instalacji Portage</uri>.
</p>

</body>
</subsection>
</section>
<section id="installing_portage">
<title>Instalacja Portage</title>
<subsection>
<title>Wypakowanie snapshota Portage</title>
<body>

<p>
W tym rozdziale omówimy proces instalacji snapshota Portage, kolekcji plików,
które informują Portage jakie programy można zainstalować, które profile są
dostępne itp.
</p>

</body>
</subsection>
<subsection id="installing_from_InstallCD">
<title>Rozpakowywanie snapshota Portage z płyty CD</title>
<body>

<p>
Aby zainstalować snapshota, należy przejrzeć dostępne pliki w katalogu
<path>/mnt/cdrom/snapshots</path>:
</p>

<pre caption="Sprawdzanie zawartości katalogu /mnt/cdrom/snapshots">
# <i>ls /mnt/cdrom/snapshots</i>
</pre>

<p>
Następnie należy rozpakować plik używając odpowiedniego polecenia. Ponownie
musimy się upewnić, że używamy poprawnych opcji dla narzędzia <c>tar</c>.
Należy zwrócić uwagę, że opcja <c>-C</c> jest pisana z dużej litery <c>C</c>, a
nie z małej <c>c</c>. W przykładzie używamy pliku
<path>portage-&lt;date&gt;.tar.bz2</path>. Oczywiście nazwę modyfikujemy do
porządanej przez nas wartości.
</p>

<pre caption="Rozpakowywanie snapshota Portage">
# <i>tar xvjf /mnt/cdrom/snapshots/portage-&lt;date&gt;.tar.bz2 -C /mnt/gentoo/usr</i>
</pre>

</body>
</subsection>
<subsection id="copysources">
<title>Kopiowanie archiwów z kodami źródłowymi</title>
<body>

<p>
Powinniśmy również skopiować pliki z kodami źródłowymi z uniwersalnej płyty
instalacyjnej.
</p>

<pre caption="Kopiowanie kodów źródłowych">
# <i>mkdir /mnt/gentoo/usr/portage/distfiles</i>
# <i>cp /mnt/cdrom/distfiles/* /mnt/gentoo/usr/portage/distfiles/</i>
</pre>

</body>
</subsection>
</section>
<section id="compile_options">
<title>Konfigurowanie opcji kompilacji</title>
<subsection>
<title>Wprowadzenie</title>
<body>

<p>
Jest wiele możliwych do skonfigurowania zmiennych wpływających na zachowanie
Gentoo. Możemy je wprowadzać jako zmienne środowiskowe (poprzez <c>export</c>),
ale wtedy nie zostaną zapisane na stałe. Zamiast tego Portage do zachowywania
konfiguracji używa pliku konfiguracyjnego <path>/etc/make.conf</path>. Pora
wziąć się za jego edycję.
</p>

<note>
Opatrzona komentarzami lista wszystkich możliwych zmiennych znajduje się
w pliku <path>/mnt/gentoo/etc/make.conf.example</path>. Do szczęśliwego
ukończenia instalacji wystarczy wyedytowanie tylko kilku z nich, tych, których
listę przedstawiamy poniżej.
</note>

<p>
Uruchamiamy ulubiony edytor (w przykładach używamy <c>nano</c>),
którym wprowadzimy omawiane nieco dalej opcje optymalizacji.
</p>

<pre caption="Edytowanie /etc/make.conf">
# <i>nano -w /mnt/gentoo/etc/make.conf</i>
</pre>

<p>
Plik <path>make.conf.example</path> ma charakterystyczną strukturę: linie z
komentarzem rozpoczynają się od znaku "#", linie zawierające zmienne używają
składni <c>ZMIENNA="zawartość"</c>. Takiej samej składni używa także plik
<path>/etc/make.conf</path>. Kilka z tych zmiennych zostało przedyskutowanych
poniżej.
</p>

<warn>
Nie należy zmieniać flag USE jeśli używame pliku stage3 wraz z instalacją GRP.
Zmienne USE możemy dostosować do naszych potrzeb po zakończeniu instalacji
pakietów. Gremliny zaatakują twój komputer jeśli zignorujesz to ostrzeżenie!
</warn>

</body>
</subsection>
<subsection>
<title>CHOST</title>
<body>

<p>
Zmienna <c>CHOST</c> definuje docelowo architekturę naszego systemu. Zmienna ta
powinna być już poprawnie ustawiona. <brite>Nie należy jej edytować</brite>,
ponieważ może to prowadzić do uszkodzenia systemu. Jeżeli zmienna <c>CHOST</c>
nie wygląda poprawnie, przyczyną może być użycie przez nas złego pliku Stage3.
</p>

</body>
</subsection>
<subsection>
<title>CFLAGS i CXXFLAGS</title>
<body>

<p>
Zmienne <c>CFLAGS</c> i <c>CXXFLAGS</c> definiują flagi optymalizujące
używane odpowiednio przez kompilator <c>gcc</c> C i C++. Choć generalnie
określamy ich wartości tutaj, maksimum wydajności osiągniemy dopasowując
je do każdego programu z osobna. Jest tak dlatego, że programy znacząco
różnią się między sobą.
</p>

<p>
W <path>make.conf</path> należy zdefiniować flagi optymalizacji co do
których jesteśmy przekonani, że <e>w głównej mierze</e> poprawią czas reakcji
systemu. Nie przypisujemy pod tę zmienną ustawień eksperymentalnych; przesada
w optymalizacji może spowodować, że programy zaczną źle funkcjonować
(nagle przerywać działanie, lub nawet gorzej, wcale nie działać).
</p>

<p>
Nie będziemy tłumaczyć znaczenia wszystkich możliwych opcji optymalizacji.
Wszystkie są wymienione w <uri link="http://gcc.gnu.org/onlinedocs/">Podręczniku
Online GNU </uri> lub stronę info <c>gcc</c> (<c>info gcc</c> -- działa tylko na
systemach linuksowych). Dla najczęsciej spotykanych flag optymalizacji należy
zajrzeć do pliku <path>/etc/make.conf.example</path>. Znajduje się tam również
wiele innych przykładów dotyczących prawiłowego ustawienia procesu instalacji i
kompilacji pakietów.
</p>

<p>
Tak samo jak w przykładzie, na architekturze x86, będziemy chcieli ustawić
flagę -march= tak jak pokazano to poniżej (w tym wypadku dla procesora Athlon
XP):
</p>

<pre caption="Ustawienie GCC march">
-march=athlon-xp
</pre>

<p>
Drugim jest flaga <c>-O</c> (to jest duże O, nie zero), która określa
klasę optymalizacji <c>gcc</c>. Dostępne klasy to <c>s</c> (optymalizacja
rozmiaru), <c>0</c> (brak optymalizacji), <c>1</c>, <c>2</c> lub <c>3</c> -
coraz silniej optymalizujące (każda z nich używa tych samych flag, co
poprzednia oraz dodaje własne). Jako przykład posłuży nam klasa optymalizacji
2:
</p>

<pre caption="Ustawienia optymalizacji poprzez GCC">
-O2
</pre>

<p>
Inną popularną flagą optymalizacyjną jest <c>-pipe</c> (gcc używa potoków
zamiast plików tymczasowych w komunikacji między różnymi etapami kompilacji).
</p>

<p>
Być może zechcemy użyć flagi <c>-fomit-frame-pointer</c> (w rejestrach nie będą
przechowywane wskaźniki ramki dla funkcji, które ich nie wymagają), jednak
używanie jej może powodować poważne problemy podczas debugowania kodu!
</p>

<p>
Podczas definiowania <c>CFLAGS</c> i <c>CXXFLAGS</c> można łączyć kilka
flag optymalizacji, na przykład w ten sposób:
</p>

<pre caption="Definiowanie zmiennych CFLAGS i CXXFLAGS">
CFLAGS="-march=athlon-xp -pipe -O2"   

CXXFLAGS="${CFLAGS}"                  <comment># Użycie tych samych ustawień dla obu zmiennych</comment>
</pre>

</body>
</subsection>
<subsection>
<title>MAKEOPTS</title>
<body>

<p>
Za pomocą <c>MAKEOPTS</c> definiujemy jak wiele równoległych kompilacji będzie
przeprowadzanych podczas przygotowywania pakietu do instalacji. Sugerowaną
liczbą jest ilość procesorów w systemie powiększona o jeden, nie jest to jednak
zawsze najlepsze wyjście.
</p>

<pre caption="MAKEOPTS dla przeciętnego systemu jednoprocesorowego">
MAKEOPTS="-j2"
</pre>

</body>
</subsection>
<subsection>
<title>Gotowi, do biegu, start!</title>
<body>

<p>
Na koniec poprawiamy jeszcze odrobinę <path>/mnt/gentoo/etc/make.conf</path> i
zapisujemy wyniki naszych prac (w <c>nano</c> za pomocą <c>Ctrl-X</c>).
Teraz jesteśmy przygotowani na <uri link="?part=1&amp;chap=6"> Instalację
systemu podstawowego </uri>.
</p>

</body>
</subsection>
</section>
</sections>
