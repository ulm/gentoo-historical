<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/hb-install-ppc64-kernel.xml,v 1.18 2005/12/30 19:40:22 rane Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>2.9</version>
<date>2005-11-24</date>

<section>
<title>Strefa czasowa</title>
<body>

<p>
Aby system wiedział gdzie się znajduje należy najpierw wybrać swoją strefę
czasową. Odszukujemy ją w <path>/usr/share/zoneinfo</path>, a następnie
kopiujemy do <path>/etc/localtime</path>. Należy unikać stref czasowych o
nazwie <path>/usr/share/zoneinfo/Etc/GMT*</path>, ponieważ ich nazwy mogą być
mylące, na przykład <path>GMT-8</path> jest w rzeczywistości GMT+8.
</p>

<pre caption="Konfiguracja strefy czasowej">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Zakładając, że chcemy Poland)</comment>
# <i>cp /usr/share/zoneinfo/Poland /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Instalacja źródeł</title>
<subsection>
<title>Wybór jądra</title>
<body>

<p>
Sercem każdej dystrybucji jest jądro Linux. Stanowi ono interfejs pomiędzy
programami i sprzętem. Gentoo dostarcza użytkownikom
różne źródła kerneli. Pełna lista wraz z opisami znajduje się w
<uri link="/doc/pl/gentoo-kernel.xml">Przewodniku jąder Gentoo</uri>.
</p>

<p>
Dla architektury PPC64 należy użyć <c>gentoo-sources</c>. Zaczniemy od
ich instalacji przy pomocy polecenia <c>emerge</c>. Flaga <c>USE="-doc"</c>
zapobiegnie instalacji zbędnych na tym etapie zależności, takich jak np.
xorg-x11.
</p>

<pre caption="Instalowanie źródeł kernela">
# <i>USE="-doc" emerge gentoo-sources</i>
</pre>

<p>
W katalogu <path>/usr/src</path> powinieneś mieć mniej więcej taki symlink, o
nazwie <path>linux</path>, wskazujący na źródła Twojego aktualnego kernela:
</p>

<pre caption="Podgląd symlinka do źródeł kernela">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx   1 root   root      12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.6.12-gentoo-r10
</pre>

<p>
Jeśli informacje z symlinka nie pokrywają się z rzeczywistością (np. wskazuje na
inne niż źródła kernela) to trzeba będzie go poprawić zanim przejdziemy do
dalszych części tego dokumentu.  
</p>

<pre caption="Changing the kernel source symlink">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.6.12-gentoo-r10 linux</i>
</pre>

<p>
Pora na skonfigurowanie i skompilowanie źródeł jądra. Trzeba zrobić to ręcznie,
ponieważ genkernel na PPC64 nie jest na razie sprawny.
</p>

<p>
Przechodzimy następnie do paragrafu <uri link="#manual">Ręczna
konfiguracja</uri>.  
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Ręczna konfiguracja</title>
<subsection>
<title>Wprowadzenie</title>
<body>

<p>
Ręczna konfiguracja kernela jest często postrzegana jako najtrudniejsza czynność
jaką użytkownicy Linuksa muszą wykonywać. Nie jest to prawdą, po skompilowaniu
kilku kerneli zapomnimy, że kiedykolwiek uważaliśmy to za trudne zadanie.
</p>

<p>
Nie sposób jednak zaprzeczyć, że należy dobrze znać swój komputer, aby móc
prawidłowo skonfigurować jądro. Większość informacji można zdobyć poprzez
zemergowanie pakietu pciutils (<c>emerge pciutils</c>) zawierającego program
<c>lspci</c>. Dzięki temu będzie możliwe używanie <c>lspci</c> wewnątrz
chrootowanego środowiska. Podczas pracy z tym programem możne bezpiecznie
zignorować wszelkie ostrzeżenia związane z <e>pcilib</e> (jak np.  "pcilib:
cannot open /sys/bus/pci/devices). Ponadto można również uruchomić <c>lspci</c>
poza środowiskiem chroot. Powinno dać to taki sam efekt. Dodatkowe informacje o
sterownikach, które należy włączyć do jądra można uzyskać dzięki poleceniu
<c>lsmod</c>, które pokaże listę modułów jakie załadował system płyty
instalacyjnej.
</p>

<p>
Kiedy już zbierzemy wszystkie informacje przechodzimy do katalogu ze
źródłami i wpisujemy polecenie <c>make menuconfig</c>. Uruchomi się menu
konfiguracyjne oparte na ncurses.
</p>

<pre caption="Uruchamianie menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Zobaczymy okienko z listą sekcji, na które podzielono cały proces konfiguracji.
Zaczniemy od omówienia opcji, które trzeba będzie aktywować, aby zapewnić
prawidłowe działanie Gentoo.
</p>

</body>
</subsection>
<subsection>
<title>Zaznaczanie wymaganych ustawień</title>
<body>

<p>
Po pierwsze włączymy możliwość korzystania z rozwojowych i eksperymentalnych
fragmentów kodu jądra. Jeśli tego nie zrobimy, nawet nie zobaczymy kilku
bardzo ważnych opcji.
</p>

<pre caption="Wybieranie opcji experimental code/drivers oraz innych generalnych
ustawień">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
General setup --->
  [*] Support for hot-pluggable devices
</pre>

<p>
Następnie przechodzimy do <c>File Systems</c> i wybieramy wsparcie dla systemów
plików, których zamierzamy używać. Jeśli zostanie to zaniedbane Gentoo nie
będzie w stanie zamontować partycji, a czasem nawet się nie uruchomi. Pamiętajmy
również, aby włączać te sterowniki na stałe do jądra, w żadnym wypadku nie
kompilujemy ich jako moduły. Przy okazji zaznaczamy również <c>Virtual
memory</c>, <c>/proc file system</c>.  <c>/dev file system</c> +
<c>Automatically mount at boot</c> i <c>/dev/pts file system for Unix98
PTYs</c>:
</p>

<pre caption="Wybór potrzebnych systemów plików">
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot
  [*] /dev/pts file system for Unix98 PTYs

<comment>(Wybieramy jedną lub kilka z tych opcji zależnie od używanych systemów
plików.)</comment> &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<note>
Niektóre z podanych opcji znajdują się w sekcji <c>Pseudo filesystems</c>, która
jest podsekcją <c>File systems</c>.  
</note>

<p>
Jeśli używamy PPPoE do łączenia się z Internetem, lub gdy używamy modemu dial-up
będzie trzeba włączyć następujące się w menu <c>Networking support</c>
(podsekcji <c>Device Drivers</c>), opcje:
</p>

<pre caption="Sterowniki niezbędne dla użytkowników PPPoE">
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Obie opcje dotyczące kompresji nie są wprawdzie wymagane, ale również nie
zaszkodzą naszemu systemowi, podobnie zresztą jak opcja <c>PPP over
Ethernet</c>, która jest przydatna tylko gdy skonfigurujemy <c>rp-pppoe</c> do
pracy w trybie jądra PPPoE.
</p>

<p>
Nie zapomnijmy wkompilować sterownika dla karty sieciowej.
</p>

<p>
Wyłączamy <c>ADB raw keycodes</c>:
</p>

<pre caption="Wyłączanie ADB raw keycodes">
Macintosh Device Drivers ---&gt;
  [ ] Support for ADB raw keycodes
</pre>

<p>
Gdy zakończona zostanie konfiguracja kernela, przechodzimy do paragrafu
<uri link="#compiling">Kompilacja i instalacja</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilacja i instalacja</title>
<body>

<p>
Po skonfigurowaniu kernela przyszła pora na jego skompilowanie i
instalację. Opuszczamy program konfiguracyjny i rozpoczynamy proces kompilacji:
</p>

<pre caption="Kompilowanie kernela">
(Apple/IBM)  # <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Kiedy jądro skończy się kompilować kopiujemy jego obraz do katalogu
<path>/boot</path>.
</p>

<pre caption="Instalowanie kernela">
(Apple/IBM)  # <i>cp vmlinux /boot/kernel-2.6.12-gentoo-r10</i>
</pre>

<p>
Zwykle mądrą decyzją jest skopiowanie tam również pliku konfiguracyjnego, który
posłużył do zbudowania jądra.
</p>

<pre caption="Tworzenie kopii zapasowej konfiguracji jądra">
# <i>cp .config /boot/config-2.6.12-gentoo-r10</i>
</pre>

<p>
Następnie przechodzimy do paragrafu <uri link="#kernel_modules">Konfigurowanie modułów jądra</uri>.
</p>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Konfigurowanie modułów jądra</title>
<body>

<p>
Lista modułów, które chcemy aby były automatycznie ładowane przy starcie systemu
powinna znajdować się w pliku <path>/etc/modules.autoload.d/kernel-2.4</path>
(lub <path>kernel-2.6</path>). Jeśli trzeba, można dodać kilka opcji dla modułów.
</p>

<p>
Żeby przejrzeć listę wszystkich dostępnych użyjemy komendy <c>find</c>.
Oczywiście należy zastąpić słowa "&lt;wersja jądra&gt;" numerem świeżo
skompilowanego kernela.
</p>

<pre caption="Znajdowanie dostępnych modułów">
# <i>find /lib/modules/&lt;wersja jądra&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Na przykład aby automatycznie ładować do pamięci moduł <c>3c59x.o</c> edytujemy
plik <path>kernel-2.4</path> lub <path>kernel-2.6</path> i wprowadzamy do niego
nazwę tego modułu.
</p>

<pre caption="Edycja /etc/modules.autoload.d/kernel-2.4">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Następnie przechodzimy do rozdziału <uri link="?part=1&amp;chap=8">Konfiguracja
systemu</uri>.
</p>

</body>
</section>
</sections>

