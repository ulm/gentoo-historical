<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/hb-install-ia64-kernel.xml,v 1.11 2008/07/19 14:33:22 shadow Exp $ -->

<sections>

<version>9.2</version>
<date>2008-06-21</date>

<section>
<title>Strefa czasowa</title>
<body>

<p>
Aby system wiedział gdzie się znajduje należy najpierw wybrać strefę czasową.
Odszukujemy ją w <path>/usr/share/zoneinfo</path>, a następnie kopiujemy ją do
pliku <path>/etc/localtime</path>. Należy unikać stref czasowych o nazwie
<path>/usr/share/zoneinfo/Etc/GMT*</path>, ponieważ ich nazwy mogą być mylące,
na przykład <path>GMT-8</path> jest w rzeczywistości GMT+8.
</p>

<pre caption="Konfiguracja strefy czasowej">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Przykład dla Warszawy)</comment>
# <i>cp /usr/share/zoneinfo/Europe/Warsaw /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Instalowanie źródeł</title>
<subsection>
<title>Wybór jądra</title>
<body>

<p>
Jądro Linux jest sercem każdej dystrybucji i stanowi interfejs pomiędzy
programami użytkownika, a sprzętem. Gentoo pozwala użytkownikom na wybranie
spośród kilku różnych jego źródeł. Pełna ich lista wraz z opisami znajduje się w
dokumencie <uri link="/doc/pl/gentoo-kernel.xml">Gentoo Linux Kernel
Guide</uri>.
</p>

<p>
Dla systemów IA64 użyjemy <c>gentoo-sources</c> (zawiera dodatkowe patche
dodające nowe funkcje).
</p>

<p>
Wybrane źródła instaluje się przy pomocy polecenia <c>emerge</c>.
</p>

<pre caption="Instalowanie źródeł jądra">
# <i>emerge gentoo-sources</i>
</pre>

<p>
W katalogu <path>/usr/src</path>, pod nazwą <path>linux</path>, powinno
znajdować się mniej więcej takie dowiązanie symboliczne wskazujące na aktualne
źródła. W tym wypadku wskazuje na źródła gentoo-sources-2.6.12-r10.  W
komputerze użytkownika może być to inna wersja, dlatego należy mieć to na
uwadze.
</p>

<pre caption="Podgląd dowiązania symbolicznego do źródeł jądra">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root   root    12 Oct 13 11:04 /usr/src/linux -&gt; linux-<keyval id="kernel-version"/>
</pre>

<p>
Pora na skonfigurowanie i skompilowanie źródeł jądra. Można użyć do tego
programu <c>genkernel</c>, który zbuduje uniwersalne jądro, takie jak to
znajdujące się na płytach instalacyjnych. Można również przeprowadzić cały
proces "ręcznie", co pozwoli na lepsze dostosowanie jądra do indywidualnych
potrzeb użytkownika. Najpierw omówimy tę drugą, znacznie lepszą metodę.
</p>

<p>
Proces ręcznej konfiguracji jądra został opisany w paragrafie <uri
link="#manual">Domyślnie: ręczna konfiguracja</uri>. Opis użycia
<c>genkernela</c> znajduje się w części <uri link="#genkernel">Alternatywnie:
użycie genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Domyślnie: Ręczna konfiguracja</title>
<subsection>
<title>Wprowadzenie</title>
<body>

<p>
Ręczna konfiguracja jądra to zwykle najtrudniejsze zadanie przed jakim musi
stanąć każdy początkujący użytkownik Linuksa. Zwykle po skompilowaniu kilku
zapomina się, że kiedykolwiek uważało się to za trudną czynność. :-)
</p>

<p>
Nie sposób jednak zaprzeczyć, że należy dobrze znać swój komputer, aby móc
prawidłowo skonfigurować jądro. Większość informacji można zdobyć poprzez
instalację pakietu pciutils (<c>emerge pciutils</c>) zawierającego program
<c>lspci</c>. Dzięki temu będzie możliwe używanie <c>lspci</c> wewnątrz
chrootowanego środowiska. Podczas pracy z tym programem można bezpiecznie
zignorować wszelkie ostrzeżenia związane z <e>pcilib</e> (jak np. "pcilib:
cannot open /sys/bus/pci/devices)". Ponadto można również uruchomić <c>lspci</c>
poza środowiskiem chroot. Powinno dać to taki sam efekt. Dodatkowe informacje o
sterownikach, które należy włączyć do jądra można uzyskać dzięki poleceniu
<c>lsmod</c>, które pokaże listę modułów jakie załadował system płyty
instalacyjnej.
</p>

<p>
Kiedy już zbierzemy wszystkie informacje przechodzimy do katalogu ze źródłami i
wpisujemy polecenie <c>make menuconfig</c>. Uruchomi się menu konfiguracyjne
oparte na bibliotekach graficznych ncurses.
</p>

<pre caption="Wywoływanie menu konfiguracyjnego">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Cała konfiguracja została podzielona na kilka sekcji, co znacznie ułatwia
odnalezienie i wybranie odpowiednich sterowników. Poniżej wymieniamy wszystkie
opcje, które należy włączyć, aby Gentoo mogło prawidłowo funkcjonować.
</p>

</body>
</subsection>
<subsection>
<title>Zaznaczanie wymaganych ustawień</title>
<body>

<p>
Wszystkie sterowniki potrzebne do wystartowania systemu (takie jak kontroler
SCSI) muszą być wkompilowane na stałe w jądro - nie należy ich dodawać w formie
modułów.
</p>

<p>
Teraz wybieramy poprawny typ systemu i procesora. Jeżeli nie ma pewności co do
systemu IA64, jaki posiadamy, <c>DIG-compliant</c> powinien być dobrym domyślnym
wyborem. Jeżeli instalujemy na systemie SGI należy się upewnić, że wybrany
został system plików SGI, w przeciwnym razie kernel może odmówić uruchomienia.
</p>

<pre caption="Wybór właściwego typu systemu">
System type ---&gt;
  <comment>(Change according to your system)</comment>
  <i>DIG-compliant</i>
Processor type ---&gt;
  <comment>(Change according to your system)</comment>
  <i>Itanium 2</i>
</pre>

<p>
Następnie przechodzimy do File Systems i wybieramy obsługę systemów plików, z
których zamierzamy używać. Sterowniki te również powinny być wkompilowane w
jądro na stałe, nie należy ich dodawać w modułach, ponieważ system nie będzie w
stanie ich zamontować. Oprócz tego zaznaczamy opcje <c>Virtual memory</c> i
<c>/proc file system</c>.
</p>

<pre caption="Wybór niezbędnego systemu plików">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)

<comment>(Należy wybrać jedną lub więcej poniższych opcji w zależności od wymogów systemu)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support

<comment>(Upewnijmy się, że jest aktywne wsparcie VFAT dla partycji EFI)</comment>
DOS/FAT/NT Filesystems  --->
  &lt;*&gt; VFAT (Windows-95) fs support
</pre>

<p>
Użytkownicy łączący się z Internetem za pomocą PPPoE i połączeń dial-up powinni
zaznaczyć również:
</p>

<pre caption="Sterowniki niezbędne dla użytkowników PPPoE">
Device Drivers ---&gt;
  Networking Support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Obie opcje dotyczące kompresji nie są wprawdzie wymagane, ale również nie
zaszkodzą naszemu systemowi, podobnie zresztą jak opcja <c>PPP over
Ethernet</c>, która jest przydatna tylko gdy skonfiguruje się <c>ppp</c> do
pracy w trybie PPPoE jądra (kernel mode PPPoE).
</p>

<p>
Należy wkompilować odpowiednie sterowniki dla wszystkich posiadanych kart
sieciowych.
</p>

<p>
Jeżeli używany jest procesora Intela wspierającego HyperThreading (tm) lub
wykorzystywany jest system wieloprocesorowy, należy uaktywnić" Symmetric
multi-processing support":
</p>

<pre caption="Aktywowanie wsparcia dla SMP">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
Jeśli posiadamy urządzenia wejściowe USB (np. klawiaturę lub myszkę) dodajmy
sterowniki również dla nich:
</p>

<pre caption="Aktywowanie wsparcia dla urządzeń wejścia używających USB">
Device Drivers ---&gt;
  [*] HID Devices  ---&gt;
    &lt;*&gt;   USB Human Interface Device (full HID) support
</pre>

<p>
Po skonfigurowaniu kernela przechodzimy do <uri link="#compiling">Kompilacji i
instalacji</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilowanie i instalowanie</title>
<body>

<p>
Po skonfigurowaniu kernela przyszła pora na jego skompilowanie i instalację.
Opuszczamy program konfiguracyjny i rozpoczynamy proces kompilacji:
</p>

<pre caption="Kompilacja jądra">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Kiedy jądro skończy się kompilować należy przekopiować jego obraz do katalogu
<path>/boot</path>. Wybieramy dowolną nazwę dla naszego jądra jednak należy
pamiętać jaka to nazwa, gdyż będziemy jej potrzebowali w późniejszym czasie w
trakcie konfiguracji bootloadera. Należy pamiętać o zastąpieniu części wpisu
<c><keyval id="kernel-name"/></c> swoją nazwą i wersją kernela.
</p>

<pre caption="Instalowanie jądra">
# <i>cp vmlinux.gz /boot/<keyval id="kernel-name"/></i>
</pre>

<p>
Następnie przechodzimy do akapitu dotyczącego <uri
link="#kernel_modules">modułów</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternatywnie: użycie genkernela</title>
<body>

<p>
Ten paragraf jest przeznaczony dla użytkowników, którzy zdecydowali się użyć
programu <c>genkernel</c> do skonfigurowania jądra.
</p>

<p>
Po zainstalowaniu źródeł należy je skonfigurować. Zrobimy to automatycznie przy
pomocy programu <c>genkernel</c>, który wykonuje cały proces dokładnie w ten sam
sposób w jaki jest konfigurowane jądro na płycie instalacyjnej.  Konsekwencją
wyboru <c>genkernela</c> jest to, że system będzie zmuszony do wykrywania
dostępnego sprzętu przy każdym uruchomieniu komputera. W związku z tym, że
genkernel nie wymaga od użytkownika żadnych ręcznych poprawek w konfiguracji,
jest doskonałym rozwiązaniem dla tych wszystkich, którzy nie są najmocniejsi w
samodzielnym kompilowaniu jądra.
</p>

<p>
Zanim jednak zdradzimy jak używa się tego cudownego programu musimy wytłumaczyć
jak go zainstalować:
</p>

<pre caption="Instalowanie genkernela">
# <i>emerge genkernel</i>
</pre>

<p>
Źródła skompilujemy przy pomocy polecenia <c>genkernel --udev all</c>.
Kompilowanie zajmie mnóstwo czasu, ponieważ <c>genkernel</c> zawiera niemal
wszystkie dostępne sterowniki.
</p>

<note>
Użytkownicy EVMS2 lub LVM2 powinni dodać również <c>--evms2</c> lub
<c>--lvm2</c> do komendy genkernel.
</note>

<pre caption="Uruchamianie genkernela">
# <i>genkernel --udev all</i>
</pre>

<p>
W toku tego procesu powstanie właściwy plik jądra, <e>initrd (initial root
disk)</e> oraz ogromna rzesza modułów. Nazwy plików jądra i initrd będą
potrzebne przy konfiguracji bootloadera do prawidłowego wypełnienia jego pliku
konfiguracyjnego, więc warto je sobie zapisać. Przy następnym uruchomieniu
komputera zostanie najpierw wykonany plik initrd, który wykryje cały dostępny
sprzęt i wczyta odpowiednie moduły, a następnie uruchomi się "właściwy" system.
</p>

<pre caption="Sprawdzanie nazw utworzonych plików jądra">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>Moduły jądra</title>
<subsection>
<include href="hb-install-kernelmodules.xml"/>
</subsection>
</section>
</sections>
