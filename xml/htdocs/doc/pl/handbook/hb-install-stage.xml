<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/hb-install-stage.xml,v 1.2 2004/12/31 17:14:15 swift Exp $ -->

<sections>

<version>1.71</version>
<date>2004-12-18</date>

<section>
<title>Instalowanie tarballa stage.</title>
<subsection>
<title>Ustawienie poprawnej daty i czasu.</title>
<body>
   
<p>
Na samym początku całego procesu instalacji musisz sprawdzić swoją datę/czas i
i ewentualnie je zaktualizować. Niezsychronizowany zegar może być przyczyną
dziwnych błędów w przyszłości!
</p>
	     
<p>
Aby zwerfikować aktualną datę/czas, uruchom <c>date</c>:
</p>
		         
<pre caption="Sprawdzenie daty/czasu">
# <i>date</i>
Fri Oct 29 16:21:18 CEST 2004
</pre>
				         
<p>
Jeżeli wyświetlana data/czas są złe, uaktualij je używając <c>date MMDDggmmWWRR</c>
(<b>M</b>iesiąc, <b>D</b>zień, <b>g</b>odzina, <b>m</b>inuta, <b>W</b>iek i <b>R</b>ok).
Na przykład, aby ustawić datę 29 Października 2004 r, 16:21:
</p>
							         
<pre caption="Ustawienie daty/czasu">
# <i>date 102916212004</i>
</pre>
	     
</body>
</subsection>
<subsection>
<title>Podejmowanie decyzji.</title>
<body>

<p>
W następnym kroku powinieneś wykonać instalację wybranego tarballa <e>stage</e>.
Możesz go pobrać z Internetu lub, jeśli działasz z którejś płytki 
Gentoo Universal LiveCD, przekopiować z CD. Jeżeli masz Universal CD i na płycie znajduje się
stage którego chcesz używać ściąganie go z Internetu jest tylko niepotrzebną
stratą czasu, gdyż pliki stage są takie same.
</p>

<ul>
<li><uri link="#doc_chap2">Domyślnie: Użycie stage z Internetu</uri>.</li>
<li><uri link="#doc_chap3">Alternatywnie: Wykorzystanie stage z LiveCD</uri>.</li>
</ul>

</body>
</subsection>
</section>
<section>
<title>Domyślnie: Użycie stage z Internetu.</title>
<subsection>
<title>Pobieranie tarballa stage.</title>
<body>

<p>
Najpierw przejdź do punktu montowania systemu plików Gentoo
(prawdopodobnie <path>/mnt/gentoo</path>):
</p>

<pre caption="Przechodzenie do punktu montowania systemu plików Gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
W zależności od medium instalacyjnego masz do dyspozycji kilka narzędzi,
za pomocą których możesz ściągnąć stage. Jeżeli masz program <c>links2</c>
możesz wejść bezpośrednio na <uri link="/main/en/mirrors.xml">listę serwerów lustrzanych Gentoo</uri> 
i wybrać serwer, który znajduje się najbliżej Ciebie. Jeżeli nie masz programu <c>links2</c>, użyj
<c>lynx</c> do tego celu. W tym przypadku podmień wszystkie wystąpenia <c>links2</c> na <c>lynx</c>.
</p>

<p>
Wejdź do <path>releases/</path>, a następnie do katalogu Twojej architektury (np. <path>x86/</path>)
oraz wersji Gentoo (<path>2004.3/</path>) i na koniec do <path>stages/</path>.
Powinieneś zobaczyć dostępne pliki stage dla Twojej architektury (czasem mogą być umieszczone w
podkatalogach dla różnych podarchitektur). Wybierz jeden i naciśnij <c>D</c> aby go ściągnąć.
Kiedy skończysz ściąganie naciśnij <c>Q</c> aby wyjść z przeglądarki.
</p>

<pre caption="Przeglądanie listy serwerów lustrzanych za pomocą links2">
<comment>(Bez proxy)</comment>   # <i>links2 http://www.gentoo.org/main/en/mirrors.xml</i>
<comment>(Z proxy)</comment>      # <i>links2 -http-proxy serwer.proxy.com:8080 http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

<p>
Jeśli chcesz zweryfikować integralność pobranych archiwów stage, porównaj
wynik polecenia <c>md5sum</c> z sumami MD5 udostępnianymi na serwerze. Np.
sprawdźmy poprawność tarballa stage dla architektury x86:
</p>

<pre caption="Sprawdzanie integralności tarballa stage">
# <i>md5sum -c stage1-x86-2004.3.tar.bz2.md5</i>
stage1-x86-2004.3.tar.bz2: OK
</pre>

</body>
</subsection>
<subsection>
<title>Rozpakowywanie tarballa Stage.</title>
<body>

<p>
Wypakuj pobrany plik stage przy pomocy GNU <c>tar</c>:
</p>

<pre caption="Wypakowanie stage">
# <i>tar -xvjpf stage3-&lt;subarch&gt;-2004.3.tar.bz2</i>
</pre>        

<p>
Użyj dokładnie tych samych przełączników (<c>-xvjpf</c>). Opcja <c>x</c> oznacza
<e>wypakuj</e>, <c>v</c> to <e>wyświetl</e> (no dobra, to jest opcjonalne),
<c>j</c> służy do <e>dekompresji archiwum bzip2</e>, <c>p</c> to <e>zachowuj
uprawnienia</e>, natomiast <c>f</c> podkreśla, że chcemy rozpakować to, co czytamy z pliku, a nie
ze standardowego wejścia.
</p>

<p>
Gdy stage jest już zainstalowany, możesz przejść do
<uri link="#installing_portage">Instalacji Portage</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>Alternatywnie: Wykorzystanie stage z LiveCD.</title>
<subsection>
<title>Rozpakowanie tarballa stage.</title>
<body>

<p>
Pliki stage umieszczone są na CD w katalogu <path>/mnt/cdrom/stages</path>.
Aby obejrzeć ich spis użyj polecenia <c>ls</c>:
</p>

<pre caption="Lista dostępnych wersji stage">
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
Jeśli system zgłasza błąd to możliwe, że musisz wpierw zamontować CD-ROM:
</p>

<pre caption="Montowanie CD-ROM">
# <i>ls /mnt/cdrom/stages</i>
ls: /mnt/cdrom/stages: No such file or directory
# <i>mount /dev/cdroms/cdrom0 /mnt/cdrom</i>
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
Teraz przejdź do punktu montowania Gentoo (zwykle <path>/mnt/gentoo</path>):
</p>

<pre caption="Zmiana katalogu na /mnt/gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
Następnie wypakujemy wybrany tarball. Użyjemy do tego celu GNU <c>tar</c>.
Upewnij się, że używasz takich samych przełączników (<c>-xvjpf</c>)!
W kolejnym przykładzie wykorzystujemy plik  <path>stage3-&lt;subarch&gt;-20040412.tar.bz2</path>.
Odpowiednio zmień jego nazwę we wszystkich poleceniach.
</p>

<pre caption="Wypakowanie tarballa stage">
# <i>tar -xvjpf /mnt/cdrom/stages/stage3-&lt;subarch&gt;-20040412.tar.bz2</i>
</pre>
 
<note>
Możesz zignorować jakiekolwiek ostrzeżenia  "No such file or directory" dotyczące ./proc oraz 
informacje o "Error exit delayed from previous errors".
</note>

<p>
Gdy stage zostanie zainstalowany, przejdź do 
<uri link="#installing_portage">Instalacji Portage</uri>.
</p>
 
</body>
</subsection>
</section>
<section id="installing_portage">
<title>Instalacja Portage.</title>
<subsection>
<title>Z siecią czy bez sieci?</title>
<body>
 
<p>
Jeśli nie masz działającego połączenia internetowego, będziesz musiał 
zainstalować dostarczony na LiveCD snapshot portage.
Oznacza to, że będziesz musiał instalować Gentoo ze <e>stage3</e> (gdyż tylko ten
stage pozwala na instalacje bez połączenia z Internetem).
Jeżeli chcesz później używać prekompilowanych paczek by przyspieszyć 
instalację, <e>musisz</e> użyć snapshotu dostępnego na LiveCD. 
Pozostali użytkownicy pobiorą w pełni aktualne drzewo Portage dzięki 
<c>emerge</c> w następnym rozdziale.
</p>
 
<p>
Przejdź do jednego z następujących paragrafów:
</p>
 
<ul>
<li>
<uri link="#installing_from_LiveCD">Instalacja snapshota Portage i kodu 
źródłowego z LiveCD</uri> (dla instalacji bez użycia sieci lub 
z wykorzystaniem GRP).
</li>
<li>
<uri link="#compile_options">Konfigurowanie opcji kompilacji</uri>
(wszystkie pozostałe metody instalacji).
</li>
</ul>
 
</body>
</subsection>
<subsection id="installing_from_LiveCD">
<title>Instalowanie snapshota Portage i kodu źródłowego z LiveCD.</title>
<body>

<p>
Na płytkach Universal LiveCD znajduje się snapshot Portage. W tekście
zakładamy, że używasz właśnie tej  płyty. 
Przejrzyj katalog <path>/mnt/cdrom/snapshots/</path> i zobacz,
co tam dla Ciebie przygotowaliśmy:
</p>

<pre caption="Sprawdzanie zawartości /mnt/cdrom/snapshots">
# <i>ls /mnt/cdrom/snapshots</i>
</pre>

<p>
Teraz wypakuj snapshot używając polecenia o niżej podanej składni. Kolejny raz
upewnij się, że przekazujesz właściwe opcje do programu <c>tar</c>. Zwróć uwagę,
że <c>-C</c> występuje z wielką literą <c>C</c>, a nie <c>c</c>. W tym przykładzie nasz plik
nazywa się <path>portage-20041022.tar.bz2</path>. Odpowiedno zmień wszystkie
polecenia, tak aby pasowały do Twojej sytuacji i nazewnictwa plików.
</p>

<pre caption="Rozpakowanie snapshot Portage">
# <i>tar -xvjf /mnt/cdrom/snapshots/portage-20041022.tar.bz2 -C /mnt/gentoo/usr</i>
</pre>

<p>
Musisz także skopiować źródła programów dostępne na płycie:
</p>

<pre caption="Kopiowanie kodu źródłowego">
# <i>mkdir /mnt/gentoo/usr/portage/distfiles</i>
# <i>cp /mnt/cdrom/distfiles/* /mnt/gentoo/usr/portage/distfiles/</i>
</pre>

<p>
Gdy snapshot Portage zostanie zainstalowany przejdź do <uri
link="#compile_options">Konfigurowanie opcji kompilacji</uri>.
</p>

</body>
</subsection>
</section>

<section id="compile_options">
<title>Konfigurowanie opcji kompilacji.</title>
<subsection>
<title>Wprowadzenie.</title>
<body>

<p>
Jest wiele możliwych do skonfigurowania zmiennych wpływających na zachowanie
Gentoo. Możesz je wprowadzać jako zmienne środowiskowe (poprzez <c>export</c>),
ale wtedy nie zostaną zapisane na stałe. Zamiast tego Portage do zachowywania
konfiguracji używa pliku konfiguracyjnego <path>/etc/make.conf</path>. Pora
wziąć się za jego edycję.
</p>

<note>
Opatrzona komentarzami lista wszystkich możliwych zmiennych znajduje się
w pliku <path>/mnt/gentoo/etc/make.conf.example</path>. Do szczęśliwego
ukończenia instalacji wystarczy wyedytowanie tylko kilku z nich, tych, których
listę przedstawiamy poniżej.
</note>

<p>
Uruchom swój ulubiony edytor (w przykładach używamy <c>nano</c>),
którym wprowadzisz omawiane nieco dalej opcje optymalizacji.
</p>

<pre caption="Edytowanie /etc/make.conf">
# <i>nano -w /mnt/gentoo/etc/make.conf</i>
</pre>

<p>
Jak już zapewne zauważyłeś plik <path>make.conf.example</path> ma
charakterystyczną strukturę: linie z komentarzem rozpoczyna "#", linie
zawierające zmienne używają składni <c>ZMIENNA="zawartość"</c>. Takiej samej
składni używa także plik <path>/etc/make.conf</path>. Kilka z tych zmiennych
zostało przedyskutowanych poniżej.
</p>

<warn>
Nie wprowadzaj zmian w zmiennej USE jeżeli korzystasz ze stage3 z instalacją GRP.
Będziesz mógł zmienić zmienną USE po instalacji pakietów. Twój system zostanie
zatakowany przez gremliny, jeżeli zignorujesz to ostrzeżenie!
</warn>

</body>
</subsection>
<subsection>
<title>CHOST.</title>
<body>

<warn>
Mimo, iż może to kusić tych, którzy nie korzystają ze stage1, <e>nie</e>
powinni oni zmieniać ustawienia <c>CHOST</c> w <path>make.conf</path>. Dokonanie
tego może zepsuć cały system. Powtarzamy: tę zmienną 
modyfikuj tylko, gdy instalujesz używając <e>stage1</e>.
</warn>

<p>
Zmienna <c>CHOST</c> definiuje architekturę, pod którą za pomocą <c>gcc</c> będą
kompilowane programy. Możliwe jej wartości:
</p>

<table>
<tr>
  <th>Architektura</th>
  <th>Podarchitektura</th>
  <th>Ustawienia CHOST</th>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i386</ti>
  <ti>i386-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i486</ti>
  <ti>i486-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i586</ti>
  <ti>i586-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i686 i wyżej (także athlon)</ti>
  <ti>i686-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>alpha</ti>
  <ti></ti>
  <ti>alpha-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>ppc</ti>
  <ti></ti>
  <ti>powerpc-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>ppc64</ti>
  <ti></ti>
  <ti>powerpc64-unknown-linux-gnu</ti>
</tr>
      
<tr>
  <ti>sparc</ti>
  <ti></ti>
  <ti>sparc-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>(uniwersalne)</ti>
  <ti>hppa-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>pa7000</ti>
  <ti>hppa1.1-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>pa8000 i wyżej</ti>
  <ti>hppa2.0-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>mips</ti>
  <ti></ti>
  <ti>mips-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>amd64</ti>
  <ti></ti>
  <ti>x86_64-pc-linux-gnu</ti>
</tr>
</table>

</body>
</subsection>
<subsection>
<title>CFLAGS i CXXFLAGS.</title>
<body>

<p>
Zmienne <c>CFLAGS</c> i <c>CXXFLAGS</c> definiują flagi optymalizujące
używane odpowiednio przez kompilator <c>gcc</c> C i C++. Choć generalnie
określamy ich wartości tutaj, maksimum wydajności osiągniesz dopasowując
je do każdego programu z osobna. Jest tak dlatego, że programy znacząco
różnią się między sobą.
</p>

<p>
W <path>make.conf</path> powinieneś zdefiniować flagi optymalizacji co do
których jesteś przekonany, że <e>w głównej mierze</e> poprawią czas reakcji
systemu. Nie przypisuj pod tę zmienną ustawień eksperymentalnych; przesada
w optymalizacji może spowodować, że programy zaczną źle funkcjonować
(nagle przerywać działanie, lub nawet gorzej, wcale nie działać).
</p>

<p>
Nie będziemy tłumaczyć znaczenia wszystkich możliwych opcji optymalizacji.
Jeśli chcesz je poznać, przeczytaj
<uri link="http://gcc.gnu.org/onlinedocs/">Podręcznik Online GNU
</uri> lub stronę info <c>gcc</c> (<c>info gcc</c> -- działa tylko na systemach
linuksowych). Plik <path>make.conf.example</path> sam zawiera dużo informacji i przykładów
 - nie zapomnij przeczytać także i jego.
</p>

<p>
Pierwszym ustawieniem jakim się tu zajmiemy jest flaga <c>-march=</c> która określa docelową
architekturę. Możliwe jej wartości są opisane jako komentarze w
<path>make.conf.example</path>. Na przykład dla architektury x86 Athlon XP
będzie to:
</p>

<pre caption="Ustawienie GCC march">
<comment># Użytkownicy AMD64, którzy chcą mieć natywny system 64bit nie powinni używać athlon-xp</comment>
-march=athlon-xp
</pre>

<p>
Prosimy, upewnijcie się, że macie <e>poprawnie</e> ustawiony CHOST. Na przykład
ustawienie CHOST dla sparc64 to <c>sparc-unknown-linux-gnu</c>, a nie
<c>sparc64-unknown-linux-gnu</c>!
</p>

<p>
Drugim jest flaga <c>-O</c> (to jest duże O, nie zero), która określa 
klasę optymalizacji <c>gcc</c>. Dostępne klasy to <c>s</c> (optymalizacja rozmiaru),
<c>0</c> (brak optymalizacji), <c>1</c>, <c>2</c> lub <c>3</c> - coraz
silniej optymalizujące (każda z nich używa tych samych flag, co poprzednia
oraz dodaje własne). Jako przykład posłuży nam klasa optymalizacji 2:
</p>

<pre caption="Ustawienia optymalizacji poprzez GCC">
-O2
</pre>

<p>
Inne popularne flagi optymalizujące to <c>-pipe</c> (gcc używa potoków zamiast
plików tymczasowych w komunikacji między różnymi etapami kompilacji) oraz
<c>-fomit-frame-pointer</c> (w rejestrach nie będą przechowywane wskażniki
ramki dla funkcji, które ich nie wymagają).
</p>

<p>
Zauważ, że używanie flagi <c>-fomit-frame-pointer</c> może powodować poważne 
problemy podczas debugowania kodu!
</p>

<p>
Kiedy definiujesz <c>CFLAGS</c> i <c>CXXFLAGS</c>, powinieneś łączyć kilka
flag optymalizacji, jak w następującym przykładzie:
</p>

<pre caption="Definiowanie zmiennych CFLAGS i CXXFLAGS">
CFLAGS="-march=athlon-xp -pipe -O2"   <comment># Użytkownicy AMD64 nie powinni używać athlon-xp</comment>
CXXFLAGS="${CFLAGS}"                  <comment># Użycie tych samych ustawień dla obu zmiennych</comment>
</pre>

</body>
</subsection>
<subsection>
<title>MAKEOPTS.</title>
<body>

<p>
Za pomocą <c>MAKEOPTS</c> definiujesz ile system może przeprowadzać równoleglych
kompilacji podczas przygotowywania pakietu do instalacji. Sugerowaną liczbą jest ilość
procesorów w systemie plus jeden, nie jest to jednak zawsze najlepsze wyjście.
</p>

<pre caption="MAKEOPTS dla przeciętnego systemu jednoprocesorowego">
MAKEOPTS="-j2"
</pre>

</body>
</subsection>
<subsection>
<title>Gotowi, do biegu, start!</title>
<body>

<p>
Popraw wedle życzenia <path>/mnt/gentoo/etc/make.conf</path> i zapisz go
(użytkownicy <c>nano</c> powinni nacisnąć <c>Ctrl-X</c>).
Teraz jesteś przygotowany na <uri link="?part=1&amp;chap=6">
Instalację systemu podstawowego </uri>.
</p>

</body>
</subsection>
</section>
</sections>
