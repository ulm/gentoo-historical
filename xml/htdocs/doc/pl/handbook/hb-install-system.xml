<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- Orig revision: 1.81 -->
<!-- Translator: veng <veng@gentoo.pl> -->
<!-- Title: Instalacja systemu podstawowego -->
<!-- Status: Release -->
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/hb-install-system.xml,v 1.7 2005/07/04 20:29:02 smithj Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Id: hb-install-system.xml,v 1.7 2005/07/04 20:29:02 smithj Exp $ -->

<sections>

<version>2.8</version>
<date>2005-06-28</date>

<section>
<title>Praca w chroot</title>
<subsection>
<title>Opcjonalnie: Wybieranie serwerów lustrzanych.</title>
<body>

<p>
Aby móc szybko ściągać źródła programów musisz wybrać szybki serwer lustrzany.
Portage używa serwerów zawartych w zmiennej GENTOO_MIRRORS, która znajduje się 
w pliku <path>make.conf</path>. Aby zobaczyć listę serwerów, które znajdują się
niedaleko ciebie możesz wejść na strone <uri link="/main/en/mirrors.xml">
mirror list</uri> lub użyć sympatycznego narzędzia <c>mirrorselect</c>, który
udostępnia prosty sposób wyboru serwerów lustrzanych
</p>

<pre caption="Sposób użycia programu mirrorselect">
# <i>mirrorselect -i -o &gt;&gt; /mnt/gentoo/etc/make.conf</i>
</pre>

<warn>
Nie wybieraj żadnych serwerów IPv6. Nasze pliki stage aktualnie nie wspierają
IPv6.
</warn>

<p>
Następną ważną sprawą jest ustawienie zmiennej SYNC w pliku <path>make.conf</path>.
Zmienna ta wskazuje na serwer rsync'a, z którego będzie uaktualniane drzewo
Portage (kolekcje ebuildów, czyli skryptów które zawierają wszystkie informacje 
potrzebne do ściągnięcia i zainstalowania programów). Możesz ręcznie wpisać serwer, 
którego chcesz używać lub skorzystać z programu <c>mirrorselect</c>:
</p>

<pre caption="Wybór serwera rsync'a za pomocą programu mirrorselect">
# <i>mirrorselect -i -r -o &gt;&gt; /mnt/gentoo/etc/make.conf</i>
</pre>

<p>
Po konfiguracji plików za pomocą programu <c>mirrorselect</c> zaleca się podwójne
sprawdzenie ustawień w pliku <path>/mnt/gentoo/etc/make.conf</path> !
</p>

</body>
</subsection>
<subsection>
<title>Kopiowanie informacji o DNS.</title>
<body>

<p>
Zanim zmienimy środowisko pracy musimy wykonać pewną bardzo ważną czynność. Jest nią
przekopiowanie ustawień DNS z pliku <path>/etc/resolv.conf</path> do nowego
środowiska. Jest to konieczne, by sieć działała także tam.
Plik <path>/etc/resolv.conf</path> określa jakie serwery nazw będą używane dla
sieci.
</p>

<pre caption="Kopiowanie informacji o DNS">
<comment>(Opcja "-L" jest konieczna, sprawia, że nie zostanie skopiowane dowiązanie symboliczne)</comment>
# <i>cp -L /etc/resolv.conf /mnt/gentoo/etc/resolv.conf</i>
</pre>

</body>
</subsection>
<subsection>
<title>Montowanie systemu plików proc.</title>
<body>
        
<p>
Następnie przemontowujemy system plików <path>/proc</path> do
<path>/mnt/gentoo/proc</path>, aby umożliwić systemowi korzystanie z informacji
dostarczanych przez jądro także w środowisku chrootowanym. 
</p>

<pre caption="Montowanie /proc">
 # <i>mount -t proc none /mnt/gentoo/proc</i>
</pre>
                
</body>
</subsection>
<subsection>
<title>Zmiana środowiska.</title>
<body>

<p>
Teraz, gdy wszystkie partycje są już założone, a podstawowe środowisko
zainstalowane, nadszedł czas wkroczenia w nie
poprzez <e>chroot</e>. Oznacza to przejście
z systemu źródła instalacyjnego (livecd lub innego)
do systemu instalowanego (czyli na założone partycje).
</p>

<p>
Przechodzenie odbywa sie w trzech etapach. Najpierw zamieniamy katalog
z <path>/</path> (na medium instalacyjnym) na <path>/mnt/gentoo</path>
(na założonych partycjach) poleceniem <c>chroot</c>. Następnie tworzymy nowe środowisko
przy pomocy polecenia <c>env-update</c>, które wyeksportuje nowe zmienne środowiskowe.
Ostatecznie wczytujemy te zmienne do pamięci poleceniem <c>source</c>.
</p>

<pre caption = "Zmiana środowiska poprzez chroot">
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>env-update</i>
* Caching service dependencies...
# <i>source /etc/profile</i>
</pre>

<p>
Gratulacje! Znajdujesz się wewnątrz nowego systemu Gentoo Linux.
Oczywiście do końca jeszcze daleko i to jest powód, dla którego zostało
jeszcze kilka rozdziałów Podręcznika. :]
</p>

</body>
</subsection>
<subsection>
<title>Opcjonalnie: Aktualizacja drzewa Portage.</title>
<body>

<p>
Należy teraz uaktualnić drzewo Portage. Dokonujemy tego poleceniem 
<c>emerge --sync</c>. 
</p>

<pre caption="Aktualizowanie drzewa Portage">
# <i>emerge --sync</i>
<comment>(Dla wolnych terminali, takich jak konsola bufora ramki, należy dodać parametr --quiet dla przyspieszenia całego procesu) </comment>  
# <i>emerge --sync --quiet</i>
</pre>

<p>
Portage używa protokołu RSYNC do uaktualniania drzewa pakietów. Jeżeli powyższe
polecenie zakończy się niepowodzeniem (np. z winy firewalla) używamy polecenia
<c>emerge-webrsync</c>, które ściąga i instaluje snapshot drzewa Portage przy
za pomocą protokołu HTTP.
</p>

<pre caption="Aktualizacja drzewa Portage poprzez emerge-webrsync">
# <i>emerge-webrsync</i>
</pre>

<p>
Jeśli otrzymamy ostrzeżenie, że dostępna jest nowa wersja programu Portage i
należy dokonać jego aktualizacji, możemy je zignorować. Portage zostanie
zaktualizowane nieco później.
</p>

</body>
</subsection>
<subsection>
<title>Wybór odpowiedniego profilu</title>
<body>

<p>
Najpierw mała definicja.
</p>

<p>
Profil jest cegiełką budującą system Gentoo. Nie tylko określa domyślne
wartości dla CHOST, CFLAGS i innych ważnych zmiennych, ale również ogranicza
wersje pakietów jakie mogą zostać zainstalowane w systemie.  Wszystkie te
informacje są utrzymywane przez developerów Gentoo.
</p>

<p>
Dawniej, użytkownik w bardzo małym stopniu miał wpływ na profil. Jednakże
ostatnio użytkownicy architektur x86, hppa i alpha mogą wybierać między
dwoma profilami, jednym dla jąder serii 2.4 i drugim dla jąder serii 2.6.
Wymaganie takie wynikło z potrzeby lepszej integracji jąder serii 2.6.
</p>

<p>
Aktualnie używany profil można sprawdził za pomocą poniższego polecenia:
</p>

<pre caption="Sprawdzanie profilu systemowego.">
# <i>ls -l /etc/make.profile</i>
lrwxrwxrwx 1 root root 48 Mar 7 11:55 /etc/make.profile ->
../usr/portage/profiles/default-linux/x86/2005.0
</pre>

<p>
W przypadku jednej z trzech wspomnianych wcześniej architektur zostanie
wyświetlony dodatkowy profil w dowiązaniu symbolicznym
<path>make.profile</path>.
</p>

<pre caption="Sprawdzanie, czy istnieje dodatkowy profil.">
# <i>ls -F /etc/make.profile/</i>
2.4/ packages parent virtuals
</pre>

<p>
Jak można zobaczyć w powyższym przykładzie, istnieje podkatalog 2.4.
Oznacza to, iż aktualnie używanym profilem jest 2.6; aby uzyskać system
oparty o jądro serii 2.4 należy utworzyć ponownie dowiązanie symboliczne
<path>make.profile</path>.
</p>
<pre caption="Ponowne tworzenie dowiązania symbolicznego dla profilu.">
# <i>ln -snf /usr/portage/profiles/default-linux/x86/2005.0/2.4
/etc/make.profile</i>
</pre>

</body>
</subsection>
<subsection id="configure_USE">
<title>Konfiguracja zmiennych USE.</title>
<body>

<p>
<c>USE</c> to jedna z najważniejszych zmiennych w Gentoo. Niektóre programy mogą
być kompilowane z dodatkową obsługi niektórych funkcji lub bez niej. Na przykład
możliwe jest budowanie różnych programów ze wsparciem dla bibliotek gtk lub qt.
Inne pakiety możemy z kolei wyposażyć w obsługę SSL, bądź też jej pozbawić. Jeszcze
inne mogą być kompilowane ze wsparciem bufora ramki (svgalib) zamiast X11
(serwera X).
</p>

<p>
Większość dystrybucji kompiluje swoje pakiety ze wsparciem dla tak wielu elementów,
jak to tylko możliwe, powiększając rozmiar programów i czas ich uruchamiania,
nie wspominając o olbrzymiej liczbie zależności. W Gentoo możesz
zdecydować, z którymi opcjami dany pakiet powinien być budowany. I to właśnie
jest moment, kiedy <c>USE</c> wkracza do gry.
</p>

<p>
W zmiennych <c>USE</c> definiujesz słowa kluczowe zamieniane następnie na
opcje kompilowania. Na przykład dodanie do zmiennej <e>ssl</e> włączy obsługę SSL w programach,
które go wykorzystują. <e>-X</e> usunie wsparcie dla serwera X (zwróć uwagę na znak
minusa z przodu). Ustawienie <e>gnome gtk -kde -qt</e> zaowocuje wsparciem dla GNOME
(oraz gtk), ale nie dla KDE (i związanym z nim ściśle qt), znakomicie
przygotowując grunt
pod GNOME.
</p>

<p>
Domyślny zestaw flag <c>USE</c> znajduje się w pliku <path>make.defaults</path>
wybranego profilu. Wszystkie pliki <path>make.defaults</path> znajdują się w katalogu
wskazywanym przez dowiązanie <path>/etc/make.profile</path> oraz w katalogach
nadrzędnych. Aktualna konfiguracja <c>USE</c> jest zawsze sumą
wszystkich flag ustawionych w plikach <path>make.defaults</path>. Wszystko co
umieścimy w pliku <path>/etc/make.conf</path> zostanie dodane do tej zmiennej,
jeśli natomiast chcemy coś z niej usunąć wpisujemy wybraną flagę ze znakiem
minus na początku.
</p>

<p>
Pełny opis <c>USE</c> znajduje się w drugiej części Podręcznika
Gentoo, w rozdziale <uri link="?part=2&amp;chap=2">Flagi USE</uri>.
Kompletną charakterystykę dostępnych flag USE znajdziesz w pliku
<path>/usr/portage/profiles/use.desc</path>.
</p>

<pre caption="Przegląd dostępnych flag USE">
# <i>less /usr/portage/profiles/use.desc</i>
<comment>(Użyj strzałek aby przewijać plik. Aby wyjść naciśnij 'q')</comment>
</pre>

<p>
Jako przykład przedstawimy flagi <c>USE</c> dla systemu bazującego na KDE ze wsparciem
dla DVD, ALSA i nagrywania CD:
</p>

<pre caption="Edytowanie /etc/make.conf">
# <i>nano -w /etc/make.conf</i>
</pre>

<pre caption="Ustawienia USE">
USE="-gtk -gnome qt kde dvd alsa cdr"
</pre>

</body>
</subsection>
<subsection>
<title>Opcjonalnie: Lokalizacje GLIBC</title>
<body>

<p>
Zwykle w systemie używa się tylko jednej, góra dwóch lokalizacji.
Po skompilowaniu <c>glibc</c> dostępne są wszystkie jakie kiedykolwiek zostały stworzone.
Możemy aktywować flagę USE <c>userlocales</c> i zdecydować w pliku
<path>/etc/locales.build</path>, których lokali będziemy potrzebować. Należy
robić to tylko wtedy, gdy ma się dokładną wiedzę na temat tego co należy
wybrać! Nowe ustawiania nie zadziałają podczas bootstrapu, będą aktywne dopiero
po ponownym skompilowaniu glibc.
</p>

<pre caption="Aktywacja flagi userlocales dla glibc">
# <i>mkdir /etc/portage</i>
# <i>echo "sys-libs/glibc userlocales" >> /etc/portage/package.use</i>
</pre>

<p>
Następnie decydujemy, których lokali zamierzamy używać:
</p>

<p>
Poniższy przykład to lokalizacje polskie oraz angielskie (Ameryka)z obsługą
kodowania znaków (jak UTF-8).
</p>

<pre caption="nano -w /etc/locales.build">
en_US/ISO-8859-1
en_US.UTF-8/UTF-8
pl_PL/ISO-8859-2
pl_PL.UTF-8/UTF-8
</pre>

</body>
</subsection>
</section>
<section>
<title>Różnice między Stage1, Stage2 i Stage3.</title>
<body>

<p>
Usiądźmy teraz wygodnie i przemyślmy poprzednie czynności. Prosiliśmy
o wybranie <e>stage1</e>, <e>stage2</e> lub <e>stage3</e> i ostrzegaliśmy,
że ten wybór zadecyduje o dalszym przebiegu instalacji. W tym miejscu po raz pierwszy
ma on wpływ na nasze działania.
</p>

<ul>
<li>
  Jeśli wybrałeś <e>stage1</e> musisz wykonać <e>obydwa</e> kroki opisane w tym
  rozdziale (zaczynając od <uri link="#doc_chap3">Przechodzenia ze Stage1
  do Stage2</uri>).
</li>
<li>
  Gdy za początek instalacji obrałeś <e>stage2</e> możesz pominąć pierwszy krok
  i od razu przejść do drugiego (<uri link="#doc_chap4">Przechodzenie
  ze Stage2 do Stage3</uri>).
</li>
<li>
  Instalacja z etapu trzeciego (<e>stage3</e>) wymaga  <uri
link="#upgrade-baselayout">aktualizacji pakietu
baselayout</uri>.
</li>
<!-- KEEP THIS FOR 2005.1
    <li>
  Jeżeli zaczynasz od <e>stage3</e>, możesz pominąć
  obydwa kroki i przejść do następnego rozdziału, czyli
  <uri link="?part=1&amp;chap=7">Konfiguracji jądra</uri>.
</li>
-->

</ul>

</body>
</section>
<section>
<title>Przechodzenie ze Stage1 do Stage2.</title>
<subsection>
<title>Wprowadzenie do procesu bootstrap.</title>
<body>

<p>
Widzę, że masz ochotę kompilować wszystko od podstaw? Nie ma sprawy :-)
</p>

<p>
W tym etapie wykonamy <e>bootstrap</e> Gentoo. Potrwa to
stosunkowo długo, ale utworzony system będzie zoptymalizowany i dostosowany
dla sprzętu i specyficznych wymagań użytkownika.
</p>

<p>
<e>Proces bootstrap</e> to budowanie biblioteki GNU C, zestawu
kompilatorów GNU i kilku innych niezbędnych do budowy systemu programów.
</p>

<p>
Zanim rozpoczniemy bootstrap, wymienimy kilka opcji, które można wybrać
lub odrzucić. Jeśli nie jesteś tym zainteresowany od razu przejdź do paragrafu <uri
link="#bootstrap">Bootstrap systemu</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Opcjonalnie: Wcześniejsze pobranie źródeł.</title>
<body>

<p>
Jeśli wcześniej nie przekopiowano kodu źródłowego skrypt bootstrap
pobierze wszystkie potrzebne pliki. Jeśli zamierzamy najpierw ściągnąć 
źródła, a dopiero potem wykonać bootstrap systemu (np. dlatego,
że nie chcemy mieć otwartego połączenia z Internetem podczas kompilowania)
używamy przełącznika <e>-f</e> skryptu bootstrap, co spowoduje pobranie
wszystkich niezbędnych plików.
</p>

<pre caption = "Pobieranie niezbędnych źródeł">
# <i>cd /usr/portage</i>
# <i>scripts/bootstrap.sh -f</i>
</pre>

</body>
</subsection>
<subsection id="bootstrap">
<title>Bootstrap systemu.</title>
<body>

<p>
W porządku, zatem chwytamy klawiaturę i wpisujemy kilka kolejnych poleceń -
zaczynamy
bootstrap.  Następnie możemy poszukać rozrywki przy czymś innym, ponieważ
ukończeniu tego etapu zajmie mnóstwo czasu.
</p>

<pre caption="Bootstrap systemu">
# <i>cd /usr/portage</i>
# <i>scripts/bootstrap.sh</i>
</pre>

<p>
Pora na kolejny etap, <uri link="#doc_chap4">Przechodzenie ze Stage2
do Stage3</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>Przechodzenie ze Stage2 do Stage3.</title>
<subsection>
<title>Wprowadzenie.</title>
<body>

<p>
Czytasz ten paragraf, bo wykonałeś bootstrap (ręcznie lub dzięki <e>stage2</e>).
Teraz nadeszła pora na zbudowanie pakietów należących do systemu.
</p>

<p>
Czy budujemy wszystkie pakiety systemowe? Nie, nie wszystkie.
W tym etapie budujemy tylko te paczki, co do których nie mamy wyboru.
Niektóre z nich mają kilka alternatyw (choćby programy logujące).
W Gentoo o wszystkim możesz decydować samodzielnie, my tylko pomożemy w
dokonaniu wyboru krótko omawiając każdą z możliwości.
</p>

</body>
</subsection>
<subsection>
<title>Opcjonalnie: Przeglądanie zadań do wykonania.</title>
<body>

<p>
Aby dowiedzieć się jakie pakiety zostaną zainstalowane należy wykonać polecenie
<c>emerge --pretend --emptytree system</c>. Otrzymamy spis wszystkich programów
jakie zostaną zbudowane. Ponieważ ta lista jest całkiem spora, powinno się użyć
programu stronicującego w rodzaju <c>less</c> lub <c>more</c>, pozwalającego
poruszać się w górę i w dół listy.
</p>

<pre caption="Co zainstaluje emerge system?">
# <i>emerge --pretend  --emptytree system | less</i>
</pre>

<p>  
Warto zauważyć, że jeśli nie zmieniano ustawień CFLAGS i CXXFLAGS wystarczy
użycie <c>emerge --pretend --newuse system</c>. Polecenie to przebuduje
wszystkie pakiety, którym zmieniono ustawienia flag USE (w porównaniu z tymi
użytymi podczas budowy stage2). Jeśli i flagi USE nie były zmieniane to znaczy,
że instalacja z etapu drugiego była zwykłą stratą czasu.
</p>

</body>
</subsection>
<subsection>
<title>Opcjonalnie: Pobieranie źródeł.</title>
<body>

<p>
Aby <c>emerge</c> pobrał źródła przed rozpoczęciem całego
(na przykład dlatego, że nie chcesz mieć otwartego połączenia z Internetem
podczas budowania wszystkich pakietów) używamy opcji
<e>--fetchonly</e> programu <c>emerge</c> - co spowoduje uprzednie ściągnięcie
potrzebnych plików.
</p>

<pre caption = "Pobieranie źródeł">
# <i>emerge --fetchonly --emptytree system</i>
</pre>

</body>
</subsection>
<subsection>
<title>Budowanie systemu.</title>
<body>

<p>
Aby rozpocząć budowanie systemu wpisujemy polecenie <c>emerge  --emptytree
system</c>. A potem mamy dużo czasu dla siebie: możemy odrobić lekcje, poczytać
książkę, możemy też posprzątać pokój - cały ten proces zajmie mnóstwo czasu.
</p>

<pre caption = "Budowanie systemu">
# <i>emerge  --emptytree system</i>
</pre>

<p>
Po raz kolejny przypominamy, że jeśli nie zmieniano ustawień CFLAGS i CXXFLAGS
to wystarczy tu parametr --newuse
</p>

<p>
Na typ etapie można jeszcze bezpiecznie zignorować ostrzeżenia o
nowszych wersjach plików konfiguracyjnych (i potrzebie uruchomienia
<c>etc-update</c>). W przyszłości, kiedy Gentoo zostanie już zainstalowane i
uruchomione polecamy przeczytanie naszej dokumentacji dotyczącej <uri
link="?part=3&amp;chap=2#doc_chap3">Ochrony plików konfiguracyjnych</uri>.
</p>

</body>
</subsection>
</section>
<section id="upgrade-baselayout">
<title>Uaktualnianie pakietu baselayout</title>
<subsection>
<body>

<p>
Pakiet <c>baselayout</c> znacząco zmienił się od czasu wydania Gentoo 2005.0.
Niektóre pliki konfiguracyjne używają zupełnie innej składni, inne zmieniły
miejsce rezydowania w systemie. W Podręczniku omawiamy proces instalacji na
podstawie nowych plików konfiguracyjnych, dlatego zaleca się zaktualizowanie
<c>baselayout</c> przed przejściem do dalszych etapów instalacji.
</p>

<pre caption="Uaktualnianie baselayout">
# <i>rm /etc/conf.d/net</i>
# <i>CONFIG_PROTECT="-*" emerge baselayout</i>
</pre>

<p>
Kolejny etap instalacji to <uri link="?part=1&amp;chap=7">Konfiguracja
jądra</uri>
</p>

</body>
</subsection>
</section>
</sections>
