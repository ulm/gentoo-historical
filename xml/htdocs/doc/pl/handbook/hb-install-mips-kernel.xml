<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/hb-install-mips-kernel.xml,v 1.14 2005/10/06 23:21:20 rane Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>1.13</version>
<date>2005-10-06</date>

<section>
<title>Strefa czasowa</title>
<body>

<p>
Aby system wiedział gdzie się znajduje należy najpierw wybrać strefę czasową.
Odszukujemy ją w <path>/usr/share/zoneinfo</path>, a następnie za pomocą
<c>ln</c> tworzymy do niej symlinka <path>/etc/localtime</path>. Należy unikać
stref czasowych o nazwie <path>/usr/share/zoneinfo/Etc/GMT*</path>, ponieważ ich
nazwy mogą być mylące, na przykład <path>GMT-8</path> jest w rzeczywistości
GMT+8.
</p>

<pre caption="Konfiguracja strefy czasowej dla Polski">
# <i>ln -sf /usr/share/zoneinfo/Poland /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Instalacja źródeł</title>
<subsection>
<title>Wybór jądra</title>
<body>

<p>
Sercem każdej dystrybucji jest jądro Linux. Stanowi ono interfejs pomiędzy
programami i sprzętem. Gentoo dostarcza użytkownikom różne źródła kerneli. Pełna
lista wraz z opisami znajduje się w <uri
link="/doc/pl/gentoo-kernel.xml">Przewodniku jąder Gentoo</uri>.  
</p>

<p>
Dla systemów MIPS udostępniamy następujące źródła: <c>mips-sources</c> (domyślny
kernel dla architektury MIPS) oraz <c>mips-prepatch-sources</c> (rozwojowa
wersja tego jądra).
</p>

<p>
Wybierzmy któreś z dostępnych źródeł i zainstalujmy je przy pomocy
<c>emerge</c>: 
</p>

<note>
Serwery Cobalt wymagają specjalnych łatek, aby jądro działalo na nich.
Należy włączyć flagę USE <c>cobalt</c>, aby ściągnąć źródła jądra wraz z
odpowiednimi łatkami.
</note>


<pre caption="Instalacja źródeł kernela">
<comment>(Dla maszyn SGI)</comment>
# <i>emerge mips-sources</i>

<comment>(Dla maszyn Cobalt)</comment>
# <i>mkdir -p /etc/portage</i>
# <i>echo "sys-kernel/mips-sources cobalt" &gt;&gt; /etc/portage/package.use</i>
# <i>emerge mips-sources</i>
</pre>

<p>
W katalogu <path>/usr/src</path> powinien znajdować się mniej więcej taki
symlink, o nazwie <path>linux</path>, wskazujący na źródła aktualnego kernela:
</p>

<pre caption="Podgląd symlinka do źródeł kernela">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.4.24
</pre>

<p>
Jeśli informacje z symlinka nie pokrywają się z rzeczywistością (np. wskazuje na
inne niż źródła kernela), będzie trzeba go poprawić zanim przejdziemy do
dalszych części tego dokumentu.  
</p>

<pre caption="Zmiana dowiązania symbolicznego do źródeł jądra">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.4.24 linux</i>
</pre>

<p>
Gdy skończymy, można przystąpić do konfiguracji i kompilacji źródeł kernela.
</p>

</body>
</subsection>
</section>
<section>
<title>Kompilacja i konfiguracja jądra</title>
<subsection>
<title>Wprowadzenie</title>
<body>

<p>
Kiedyś przechodziliśmy przez ręczną konfiguracje całego jądra. Teraz jednak
proponujemy skorzystanie z przykładowych konfiguracji, na których można oprzeć
własną konfiguracje. Po prostu klikamy na opcje, która najbardziej przypomina
nasz komputer i wersje jądra. Więcej przykładów można znależć pod adresem
przedstawionym poniżej.
</p>

<table>
  <tr>
    <th>System</th>
    <th>Wersja jądra</th>
  </tr>
  <tr>
    <ti>SGI IP22 (Indy, Indigo 2, Challenge S)</ti>
    <ti> <uri link="http://www.longlandclan.hopto.org/~stuartl/mips-linux/sgi/ip22/config/2.4.29-mipscvs-20050130.gz">2.4.29</uri>
    </ti>
   </tr>
   <tr>
     <ti>Cobalt Qube/Raq 2800</ti>
     <ti>
    <uri link="http://dev.gentoo.org/~kumba/mips/cobalt/kernel/cobalt-2605.config">2.6.5</uri>
    <uri link="http://dev.gentoo.org/~kumba/mips/cobalt/kernel/cobalt-2606.config">2.6.6</uri>
    <uri link="http://dev.gentoo.org/~kumba/mips/cobalt/kernel/cobalt-config-2609">2.6.9</uri>
     </ti>
   </tr>
</table>

<ul>
  <li>
    Konfiguracje IP22 (Indy, Indigo2, Challenge S):
    <uri link="http://www.longlandclan.hopto.org/~stuartl/mips-linux/sgi/ip22/config">
    http://www.longlandclan.hopto.org/~stuartl/mips-linux/sgi/ip22/config</uri>
  </li>
  <li>
     Konfiguracje Serwerów Cobalt:
     <uri link="http://dev.gentoo.org/~kumba/mips">
     http://dev.gentoo.org/~kumba/mips</uri>
  </li>
</ul>

<note>
Więcej przykładów konfiguracji dla Gentoo/MIPS znajduje się pod adresem
<uri>http://stuartl.longlandclan.hopto.org/gentoo/mips</uri>.
</note>

<p>
Kiedy już wybierzemy najbardziej odpowiadającą konfigurację, ściągamy ją do
miejsca gdzie rozpakowane są źródła jądra i zmieniamy jego nazwe na
<path>.config></path>. Można teraz uruchomić <c>make oldconfig</c>, aby
wszystko uaktualnić i pozwolić na dostosowanie konfiguracji jądra przed jej
kompilacją.
</p>

<pre caption="Konfigurowanie jądra">
# <i>cd /usr/src/linux</i>
# <i>cp /ścieżka/do/przykładowej-konfiguracji .config</i>
# <i>make oldconfig</i>
<comment>(Po prostu naćiskamy Enter przy każdym pytaniu, aby wybrać wartości
domyśle... dostosujemy je później)</comment>
</pre>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilacja i instalacja</title>
<body>

<p>
Po skonfigurowaniu kernela przyszła pora na jego skompilowanie i instalację.
Opuszczamy program konfiguracyjny i rozpoczynamy proces kompilacji: </p>

<pre caption="Kompilowanie kernela">
<comment>(dla kerneli 2.4)</comment>
# <i>make dep &amp;&amp; make vmlinux modules modules_install</i>

<comment>(dla kerneli 2.6)</comment>
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Kiedy jądro skończy się kompilować kopiujemy jego obraz do katalogu
<path>/boot</path>.
</p>

<note>
Na serwerach Cobalt bootloader zakłada, że obraz jądra został skompresowany.
Należy więc pamiętać o użyciu polecenia <c>gzip -9</c> i skompresowaniu przy
jego pomocy odpowiedniego pliku w <path>/boot</path>.
</note>

<pre caption="Instalowanie jądra">
# <i>cp vmlinux /boot/kernel-2.4.24</i>
<comment>(Serwery Cobalt - kompresowanie obrazu jądra)</comment>
# <i>gzip -9v /boot/kernel-2.4.24</i>
</pre>

<p>
Zwykle mądrą decyzją jest skopiowanie tam również pliku konfiguracyjnego, który
posłużył do zbudowania jądra.
</p>

<pre caption="Tworzenie kopii zapasowej konfiguracji jądra">
# <i>cp .config /boot/config-2.4.24</i>
</pre>

<!--
<p>
Jeśli Twoja maszyna nie uruchamia się z kerneli w formacie ELF skompiluj jądro
przy pomocy polecenia <c>make vmlinux.ecoff</c> zamiast <c>make vmlinux</c>.
Obraz jądra zostanie zapisany jako <path>arch/mips/boot/vmlinux.ecoff</path>
zamiast <path>vmlinux</path>.
</p>
-->
</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Instalacja osobnych modułów jądra</title>
<subsection>
<title>Konfigurowanie modułów</title>
<body>

<p>
Do jednego z plików przedstawionych poniżej należy wpisać moduły, które chcemy
aby były ładowane automatycznie. Można również dodać kilka dodatkowych opcji do
modułów.  
</p>

<ul>
  <li><path>/etc/modules.autoload.d/kernel-2.4</path> - Dla jąder z serii 2.4</li>
  <li><path>/etc/modules.autoload.d/kernel-2.6</path> - Dla jąder z serii 2.6</li>
  <li><path>/etc/modules.autoload</path> - Wszystkie jądra</li>
</ul>

<p>
Zatem, jeżeli chcemy aby moduł jądra, który jest wspólny dla jąder 2.4 i 2.6,
był ładowany automatycznie, umieszamy wpis w <path>/etc/modules.autoload</path>.
W innym wypadku umieszczamy go we właściwym pliku.
</p>

<p>
Żeby przejrzeć listę wszystkich dostępnych użyjemy komendy <c>find</c>.
Oczywiście należy zastąpić słowa "&lt;wersja jądra&gt;" numerem wersji świeżo
skompilowanego kernela.
</p>

<pre caption="Znajdowanie dostępnych modułów">
# <i>find /lib/modules/&lt;wersja jądra&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Na przykład aby automatycznie ładować do pamięci moduł <c>3c59x.o</c> edytujemy
plik <path>kernel-2.4</path> lub <path>kernel-2.6</path> i wprowadzamy do niego
nazwę tego modułu.
</p>

<pre caption="Edycja /etc/modules.autoload.d/kernel-2.4">
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4 lub kernel-2.6">
3c59x
</pre>

<p>
Może to być załatwione jedną linijką polecenia:
</p>

<pre caption="Dodawanie modułu -- metoda jednolinijkowa">
# <i>echo '3c59x' >> /etc/modules.autoload.d/kernel-2.4</i>
<comment>(albo kernel-2.6 lub /etc/modules.autoload...)</comment>
</pre>

<p>
Następny rozdział to <uri link="?part=1&amp;chap=8">Konfiguracja systemu</uri>.
</p>

</body>
</subsection>
</section>
</sections>
