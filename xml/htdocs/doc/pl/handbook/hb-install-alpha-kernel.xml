<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/hb-install-alpha-kernel.xml,v 1.12 2005/08/21 22:53:21 rane Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>2.8</version>
<date>2005-08-21</date>

<section>
<title>Strefa czasowa</title>
<body>

<p>
Aby system wiedział gdzie się znajduje powinieneś najpierw wybrać swoją
strefę czasową. Odszukaj ją w <path>/usr/share/zoneinfo</path>, a następnie
za pomocą <c>ln</c> utwórz do niej symlinka <path>/etc/localtime</path>. Należy
unikać stref czasowych o nazwie <path>/usr/share/zoneinfo/Etc/GMT*</path>,
ponieważ ich nazwy mogą być mylące, na przykład <path>GMT-8</path> jest w
rzeczywistości GMT+8.
</p>

<pre caption="Konfiguracja strefy czasowej">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Jeśli chcesz wybrać Poland)</comment>
# <i>ln -sf /usr/share/zoneinfo/Poland /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Instalacja źródeł.</title>
<subsection>
<title>Wybór jądra.</title>
<body>

<p>
Sercem każdej dystrybucji jest jądro Linux. Stanowi ono interfejs pomiędzy
programami i sprzętem. Gentoo dostarcza użytkownikom
różne źródła kerneli. Pełna lista wraz z opisami znajduje się w
<uri link="/doc/pl/gentoo-kernel.xml">Przewodniku jąder Gentoo</uri>.
</p>

<p>
Dla systemów Alpha udostępniamy następujące źródła: <c>vanilla-sources</c>
(domyślne jądro serii 2.6)
</p>

<p>
Wybierzmy któreś z dostępnych źródeł i zainstalujmy je przy pomocy
<c>emerge</c>:
</p>

<p>
W przykładzie posłużymy się źródłami <c>vanilla-sources</c>. Jeśli wybierzesz
inny kernel odpowiednio zmień wszystkie polecenia.
</p>

<pre caption="Instalacja źródeł kernela">
# <i>emerge vanilla-sources</i>
</pre>

<p>
W katalogu <path>/usr/src</path> powinieneś mieć mniej więcej taki symlink, o
nazwie
<path>linux</path>, wskazujący na źródła Twojego aktualnego kernela:
</p>

<pre caption="Podgląd symlinka do źródeł kernela">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux-&gt; linux-2.6.11.2
</pre>

<p>
Jeśli informacje z symlinka nie pokrywają się z rzeczywistością (np. wskazuje na
inne niż Twoje źródła kernela) to będziesz musiał go poprawić zanim przejdziesz
do dalszych części tego dokumentu.
</p>

<pre caption="Zmiana dowiązania symbolicznego do źródeł jądra">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.6.11.2 linux</i>
</pre>

<p>
Pora na skonfigurowanie i skompilowanie źródeł jądra. Możesz użyć do tego
programu <c>genkernel</c>, który zbuduje uniwersalne jądro, takie jak np.
to używane przez płytę instalacyjną. Możesz też przeprowadzić cały proces ręcznie i lepiej
dostostosować kernel do swoich potrzeb. Zaczniemy od omówienia tej drugiej,
znacznie lepszej metody.
</p>

<p>
Jeśli zdecydowałeś się na ręczną konfigurację kernela przejdź do paragrafu <uri
link="#manual">Domyślnie: Ręczna konfiguracja</uri>. Jeżeli natomiast zdecydowałeś się
złożyć swoją przyszłą w ręce programu <c>genkernel</c> powinieneś przeczytać
<uri link="#genkernel">Alternatywnie: Genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Domyślnie: Ręczna konfiguracja.</title>
<subsection>
<title>Wprowadzenie.</title>
<body>

<p>
Ręczna konfiguracja kernela jest często postrzegana jako najtrudniejsza czynność
jaką użytkownicy Linuksa muszą wykonywać. Nie jest to prawdą, po skompilowaniu
kilku kerneli zapomnicie, że kiedykowiek uważaliście to za trudne zadanie.
</p>

<p>
Nie sposób jednak zaprzeczyć, że należy dobrze znać swój komputer, aby móc
prawidłowo skonfigurować jądro. Większość informacji można zdobyć poprzez
zemergowanie pakietu pciutils (<c>emerge pciutils</c>) zawierającego program
<c>lspci</c>. Dzięki temu będzie możliwe używanie <c>lspci</c> wewnątrz
chrootowanego środowiska. Podczas pracy z tym programem możne bezpieczenie
zignorować wszelkie ostrzeżenia związane z <e>pcilib</e> (jak np.
"pcilib: cannot open /sys/bus/pci/devices). Ponadto można również uruchomić
<c>lspci</c> poza środowiskiem chroot. Powinno dać to taki sam efekt. Dodatkowe
informacje o sterownikach, które należy włączyć do jądra można uzyskać dzięki
poleceniu <c>lsmod</c>, które pokaże listę modułów jakie załadował system płyty
instalacyjnej.
</p>

<p>
Kiedy już zbierzemy wszystkie informacje przechodzimy do katalogu ze
źródłami i wpisujemy polecenie <c>make menuconfig</c>. Uruchomi się menu konfiguracyjne
oparte na ncurses.
</p>

<pre caption="Uruchamianie menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Zobaczymy okienko z listą sekcji, na które podzielono cały proces konfiguracji.
Zaczniemy od omówienia opcji, które musisz aktywować, aby zapewnić prawidłowe
działanie Gentoo.
</p>

</body>
</subsection>
<subsection>
<title>Zaznaczanie wymaganych ustawień.</title>
<body>

<p>
Po pierwsze włącz możliwość korzystania z rozwojowych i eksperymentalnych
fragmentów kodu jądra. Jeśli tego nie zrobisz to nawet nie zobaczysz kilku bardzo
ważnych opcji.
</p>

<pre caption="Wybieranie opcji experimental code/drivers i główna konfiguracja">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
General setup ---&gt;
  [*] Support for hot-pluggable devices
</pre>

<p>
Następnie przejdź do <c>File Systems</c> i wybierz wsparcie dla systemów plików,
których zamierzasz używać. Jeśli tego zaniedbasz Gentoo nie będzie w stanie
zamontować partycji, a czasem nawet się nie uruchomi. Pamiętaj również, aby
włączać te sterowniki na stałe do jądra, broń Boże nie kompiluj ich jako
modułów. Przy okazji zaznacz też <c>Virtual memory</c> i <c>/proc file
system</c>. Użytkownicy jąder 2.4 muszą skorzystać z opcji <c>/dev file
system</c> oraz wybrać <c>Automatically mount at boot</c>, a następnie
zemergować <c>devfsd</c>.
</p>

<pre caption="Wybór potrzebnych systemów plików">
<comment>(dla kernela 2.4.x)</comment>
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*]   Automatically mount at boot
  [*] /dev file system support (EXPERIMENTAL)
  [ ] /dev/pts file system for Unix98 PTYs

<comment>(dla kernela 2.6.x)</comment>
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [ ] /dev file system support (OBSOLETE)
    [*] Virtual memory file system support (former shm fs)

<comment>(Wybierz jedną lub kilka z tych opcji zależnie od używanych systemów
plików.)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Jeśli używasz PPPoE do łączenia się z Internetem, lub gdy używasz modemu dial-up
będziesz musiał włączyć następujące opcje:
</p>

<pre caption="Sterowniki niezbędne dla użytkowników PPPoE">
<comment>(dla kerneli 2.4.x)</comment>
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports

<comment>(dla kerneli 2.6.x)</comment>
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Obie opcje dotyczące kompresji nie są wprawdzie wymagane, ale również nie
zaszkodzą naszemu systemowi, podobnie zresztą jak opcja <c>PPP over
Ethernet</c>, która jest przydatna tylko gdy skonfigurujesz <c>rp-pppoe</c> do
pracy w trybie jądra PPPoE.
</p>

<p>
Nie zapomnij wkompilować sterownika dla swojej karty sieciowej.
</p>

<p>
Wypada też zaznaczyć wszystkie opcje dotyczące Alpha.
</p>

<pre caption="Zalecane opcje dla Alpha">
General setup ---&gt;
  &lt;*&gt; SRM environment through procfs
  &lt;*&gt; Configure uac policy via sysctl

Plug and Play configuration ---&gt;
  &lt;*&gt; Plug and Play support
  &lt;M&gt;   ISA Plug and Play support

SCSI support ---&gt;
  SCSI low-level drivers ---&gt;
    &lt;*&gt; SYM53C8XX Version 2 SCSI support (NEW)
    &lt;*&gt; Qlogic ISP SCSI support

Network device support ---&gt;
  Ethernet (10 or 100 Mbit) ---&gt;
    &lt;M&gt; DECchip Tulip (dc21x4x) PCI support
    &lt;M&gt; Generic DECchip &amp; DIGITAL EtherWORKS PCI/EISA
    &lt;M&gt; EtherExpressPro/100 support (eepro100)
    &lt;M&gt; EtherExpressPro/100 support (e100)
  Ethernet (1000 Mbit) ---&gt;
    &lt;M&gt; Alteon AceNIC
      [*] Omit support for old Tigon I
    &lt;M&gt; Broadcom Tigon3
  [*] FDDI driver support
  &lt;M&gt; Digital DEFEA and DEFPA
  &lt;*&gt; PPP support
    &lt;*&gt; PPP Deflate compression

Character devices ---&gt;
  [*] Support for console on serial port
  [*] Direct Rendering Manager

File systems ---&gt;
  &lt;*&gt; Kernel automounter version 4 support
  Network File Systems ---&gt;
    &lt;*&gt; NFS
      [*] NFSv3 client
      &lt;*&gt; NFS server
      [*] NFSv3 server
  Partition Types ---&gt;
    [*] Advanced partition selection
    [*] Alpha OSF partition support
  Native Language Support
    &lt;*&gt; NLS ISO 8859-1

Sound ---&gt;
  &lt;M&gt; Sound card support
    &lt;M&gt; OSS sound modules
      [*] Verbose initialisation
      [*] Persistent DMA buffers
      &lt;M&gt; 100% Sound Blaster compatibles
</pre>

<p>
Kiedy skończysz konfigurować swój kernel przejdź do paragrafu
<uri link="#compiling">Kompilacja i instalacja</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilacja i instalacja.</title>
<body>

<p>
Po skonfigurowaniu kernela przyszła pora na jego skompilowanie i
instalację. Opuść program konfiguracyjny i rozpocznij proces kompilacji:
</p>

<pre caption="Kompilowanie kernela">
<comment>(dla kerneli 2.4.x)</comment>
# <i>make dep &amp;&amp; make vmlinux modules modules_install</i>

<comment>(dla kerneli 2.6.x)</comment>
# <i>make &amp;&amp; make modules_install</i>

<comment>(dla wszystkich kerneli)</comment>
# <i>make boot</i>
</pre>

<p>
Kiedy jądro skończy się kompilować przekopiuj jego obraz do katalogu
<path>/boot</path>. W przykładzie zakładamy, że właśnie zostały skompilowane
źródła <c>vanilla-sources-2.6.11.2</c>; w nowszych kernelach obraz nazywa się
<path>vmlinux</path> zamiast <path>vmlinux.gz</path>.
</p>

<pre caption="Instalowanie kernela">
# <i>cp arch/alpha/boot/vmlinux.gz /boot/</i>
# <i>cp System.map /boot/System.map-2.6.11.2</i>
</pre>

<p>
Zwykle mądrą decyzją jest skopiowanie tam również pliku konfiguracyjnego, który
posłużył do zbudowania jądra.
</p>

<pre caption="Tworzenie kopii zapasowej konfiguracji jądra">
# <i>cp .config /boot/config-2.6.11.2</i>
</pre>

<p>
Kiedy skończysz przejdź do paragrafu <uri link="#kernel_modules">Instalacja
osobnych modułów jądra</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternatywnie: Użycie genkernel.</title>
<body>

<p>
Paragraf jest przeznaczony dla użytkowników, którzy zdecydowali się użyć
programu <c>genkernel</c> do skonfigurowania jądra.
</p>

<p>
Po zainstalowaniu źródeł wypada je skonfigurować. Zrobimy to automatycznie przy pomocy
programu <c>genkernel</c>. <c>genkernel</c> robi to dokładnie w ten sam sposób w
jaki jest konfigurowany kernel płyty instalacyjnej. Oznacza to, że kiedy użyjesz
<c>genkernel</c> do budowy jądra Twój system będzie musiał wykrywać dostępny
sprzęt przy każdym uruchomieniu komputera, tak jak na płycie instalacyjnej. Ponieważ genkernel
nie wymaga od użytkownika żadnych ręcznych poprawek w konfiguracji jest
doskonałym rozwiązaniem dla tych wszystkich, którzy nie są najmocniejsi w
samodzielnym kompilowaniu jądra.
</p>

<p>
Zanim jednak zdradzimy jak używa się tego cudownego programu musimy wytłumaczyć jak go
zainstalować:
</p>

<pre caption="Emergowanie genkernela">
# <i>emerge genkernel</i>
</pre>

<p>
Źródła skompilujemy przy użyciu polecenia <c>genkernel all</c>. Kompilacja
zajmie całe wieki, ponieważ <c>genkernel</c> tworzy uniwersalne jądro,
zawierające wsparcie dla niemal całego dostępnego sprzętu.
</p>

<p>
Jeśli na partycji boot założyłeś system plików inny niż ext2 i ext3 będziesz
musiał dodatkowo wprowadzić kilka ręcznych poprawek do konfiguracji genkernela.
Dokonuje się tego wydając najpierw polecenie <c>genkernel --menuconfig all</c>,
a następnie dopisując wsparcie dla sterowników <e>w</e> kernelu (na stałe, nie
jako moduły).
</p>

<pre caption="Uruchamianie genkernela">
# <i>genkernel all</i>
GenKernel v3.0.1_beta10
* ARCH: Alpha
* KERNEL VER: 2.6.11.2
* kernel: configuring source
* kernel: running mrproper
<comment>(Output removed to increase readability)</comment>
* Kernel compiled successfully!
* Required Kernel Params:
*   : root=/dev/ram0 init=/linuxrc real_root=/dev/$ROOT
*     where $ROOT is the devicenode for your root partition as
*     you should have specified in /etc/fstab
*
* You MUST tell your bootloader to use the generated initrd
*
* Recommended Kernel Params:
*   : vga=0x317 splash=verbose
*
* Do NOT report kernel bugs (configs included) as genkernel bugs.
* Make sure you have the latest genkernel before reporting bugs
*
* For more info see /usr/share/genkernel/README
</pre>

<p>
W toku tego procesu powstanie właściwy plik jądra, zwany dalej obrazem,
ogromna rzesza modułów oraz plik initrd. Nazwy plików kernela i initrd będą
potrzebne przy konfiguracji bootloadera do prawidłowego wypełnienia jego pliku
konfiguracyjnego, więc warto je sobie zapisać. Przy następnym uruchumieniu
komputera zostanie najpierw wykonany plik initrd, który wykryje cały dostępny
sprzęt i wczyta odpowiednie moduły, a następnie uruchomi się właściwy system.
</p>

<pre caption="Sprawdzanie nazwy utworzonych obrazów kernela i initrd">
# <i>ls /boot/kernel* /boot/initramfs-*</i>
</pre>

<p>
Następna czynność jeszcze bardziej upodobni nasz system do tego dostępnego na
płycie instalacyjnej, zemergujemy sobie <c>coldplug</c>. Podczas gdy initrd automatycznie
wykrywa sprzęt, co jest niezbędne do uruchomienia systemu, <c>coldplug</c>
będzie wykrywał wszystko inne. Aby zemergować i uaktywnić <c>coldplug</c> wpisz:
</p>

<pre caption="Emergowanie i uruchamianie coldplug">
# <i>emerge coldplug</i>
# <i>rc-update add coldplug default</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>Instalacja osobnych modułów jądra.</title>
<subsection>
<title>Dodatkowe moduły.</title>
<body>

<p>
Ponadto powinieneś zemergować również wszystkie związane ze swoim sprzętem
ebuildy. Oto lista wszystkich dostępnych modułów:
</p>

<table>
<tcolumn width="1in"/>
<tcolumn width="4in"/>
<tcolumn width="2in"/>
<tr>
  <th>Ebuild</th>
  <th>Powód</th>
  <th>Polecenie</th>
</tr>
<tr>
  <ti>x11-drm</ti>
  <ti>
    Zestaw sterowników dla kart ATI Radeon 9200, Rage128, Matrox, Voodoo i wielu innych
    dla xorg-x11. Aby dowiedzieć się co należy wpisać w pole "moja_karta"
    sprawdzamy zmienną <c>IUSE_VIDEO_CARDS</c> w jednym z plików ebuild z katalogu
     <path>/usr/portage/x11-base/x11-drm</path>. W wydaniu 2004.3 zmieniono nazwę ebuildu
     xfree-drm na x11-drm.
  </ti>
  <ti><c>VIDEO_CARDS="moja_karta" emerge x11-drm</c></ti>
</tr>
</table>

<p>
Zainstalowanie któregoś z tych pakietów może wiązać się z potrzebą wgrania
sporej ilości jego zależności. Aby dowiedzieć się jakie pakiety zostaną
zainstalowane jako zależności wybranego ebuildu użyj <c>emerge --pretend</c>. Na
przykład dla pakietu <c>x11-drm</c> będzie to:
</p>

<pre caption="Pełna lista pakietów do zainstalowania">
# <i>emerge --pretend x11-drm</i>
</pre>

</body>
</subsection>
<subsection>
<title>Konfigurowanie modułów.</title>
<body>

<p>
Lista modułów, które chcesz aby były automatycznie ładowane przy starcie systemu
powinna znajdować się w pliku <path>/etc/modules.autoload.d/kernel-2.4</path>
(lub <path>kernel-2.6</path>). Czasem jeśli chcesz możesz dodać kilka opcji dla
modułów.
</p>

<p>
Żeby przejrzeć listę wszystkich dostępnych użyj komendy <c>find</c>. Oczywiście
powinieneś zastąpić słowa "&lt;wersja jądra&gt;" numerem świeżo skompilowanego
kernela.
</p>

<pre caption="Znajdowanie dostępnych modułów">
# <i>find /lib/modules/&lt;wersja jądra&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Na przykład aby automatycznie ładować do pamięci moduł <c>3c59x.o</c> wyedytuj
plik <path>kernel-2.4</path> lub <path>kernel-2.6</path> i wprowadź do niego
nazwę tego modułu.
</p>

<pre caption="Edycja /etc/modules.autoload.d/kernel-2.4">
<comment>(przykład dla kerneli 2.4)</comment>
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4 lub kernel-2.6">
3c59x
</pre>

<p>
Kiedy skończysz przejdź do rozdziału <uri link="?part=1&amp;chap=8">Konfiguracja
systemu</uri>.
</p>

</body>
</subsection>
</section>
</sections>
