<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/hb-working-portage.xml,v 1.18 2007/01/31 14:10:46 shadoww Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<abstract>
Wszystko to, co trzeba wiedzieć na temat Portage, aby móc przy jego pomocy
skutecznie zarządzać systemem.
</abstract>

<version>1.55</version>
<date>2006-11-12</date>

<section>
<title>Witamy w Portage</title>
<body>

<p>
Portage to najlepszy istniejący program do zarządzania oprogramowaniem. Żadna
inna dystrybucja Linuksa nie może się pochwalić równie kompleksowym,
konfigurowalnym i użytecznym narzędziem jak to napisane przez deweloperów
Gentoo.
</p>

<p>
Portage zostało napisane w dwóch językach skryptowych, <uri
link="http://www.python.org">Pythonie</uri> i <uri
link="http://www.gnu.org/software/bash">Bashu</uri>, dzięki czemu sposób jego
działania jest bardzo przejrzysty nawet dla niezbyt biegłych w programowaniu
użytkowników.
</p>

<p>
Większość użytkowników pracuje z Portage przy pomocy narzędzia <c>emerge</c>.
Aby uzyskać więcej informacji na temat tego programu, wystarczy wpisać:
</p>

<pre caption="Czytanie man emerge">
$ <i>man emerge</i>
</pre>

</body>
</section>
<section>
<title>Drzewo Portage</title>
<subsection>
<title>Ebuildy</title>
<body>

<p>
Kiedy mówimy o pakietach to tak naprawdę mamy na myśli programy dostępne dla
użytkowników Gentoo w drzewie Portage. Drzewo to jest zbiorem <e>ebuildów</e>,
czyli plików zawierających wszelkie informacje, które są niezbędne do
zarządzania oprogramowaniem (instalacja, wyszukiwanie, inne zapytania...).
Domyślnie kolekcja ebuildów znajduje się w katalogu <path>/usr/portage</path>.
</p>

<p>
Za każdym razem gdy zażądamy od Portage wykonania jakiegoś zadania związanego z
naszym oprogramowaniem użyje ono jako podstawy swojego działania informacji
zawartych w kolekcji ebuildów. Stąd też warto w miarę często uaktualniać swoje
drzewo Portage tak, aby system wiedział o nowych wersjach programów, poprawkach
do nich, etc.
</p>

</body>
</subsection>
<subsection>
<title>Uaktualnianie drzewa Portage</title>
<body>

<p>
Drzewo Portage uaktualniamy zazwyczaj za pomocą narzędzia <uri
link="http://rsync.gentoo.org">rsync</uri>. Uaktualnienie to wykonuje się w
stosunkowo prosty sposób dzięki jednemu z parametrów polecenia emerge, dzięki
któremu komenda ta zadziała jak nakładka na rsync:
</p>

<pre caption="Uaktualnianie drzewa Portage">
# <i>emerge --sync</i>
</pre>

<p>
Jeśli nie jest możliwe użycie rsync w wyniku jakichś ograniczeń narzuconych
przez różnego rodzaju firewalle to możliwa jest aktualizacja drzewa Portage
przy użyciu jednego z generowanych codziennie snapshotów. Program
<c>emerge-webrsync</c> automatycznie pobierze odpowiednie pliki i zainstaluje
je w systemie.
</p>

<pre caption="Uruchamianie emerge-webrsync">
# <i>emerge-webrsync</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Zarządzanie oprogramowaniem</title>
<subsection>
<title>Wyszukiwanie oprogramowania</title>
<body>

<p>
Do wyszukiwania w drzewie Portage konkretnych programów można użyć funkcji
wbudowanych w program emerge. Domyślnie <c>emerge --search</c> wypisze
wszystkie zawierające dane wyrażenie nazwy pakietów.
</p>

<p>
Na przykład poszukajmy wszystkich pakietów zawierających literki "pdf" w
nazwie:
</p>

<pre caption="Wyszukiwane pakietów z pdf w nazwie">
$ <i>emerge --search pdf</i>
</pre>

<p>
By przeszukiwać pakiety również po opisie pakietu, nie tylko po jego nazwie
należy dopisać dodatkowo parametr <c>--searchdesc</c> (lub krócej <c>-S</c>).
</p>

<pre caption="Wyszukiwanie wszystkich związanych z pdf paczek">
$ <i>emerge --searchdesc pdf</i>
</pre>

<p>
Kiedy przyjrzymy się wynikowi tego polecenia zauważymy, że dostarcza on wielu
ciekawych informacji. Zawartość i opisy poszczególnych pól są dość przejrzyste
i nie powinny przysporzyć nikomu problemów. Z tego względu nie będziemy ich tu
szerzej omawiać.
</p>

<pre caption="Przykładowy wynik polecenia emerge --search">
*  net-print/cups-pdf
      Latest version available: 1.5.2
      Latest version installed: [ Not Installed ]
      Size of downloaded files: 15 kB
      Homepage:    http://cip.physik.uni-wuerzburg.de/~vrbehr/cups-pdf/
      Description: Provides a virtual printer for CUPS to produce PDF files.
      License:     GPL-2
</pre>

</body>
</subsection>
<subsection>
<title>Instalowanie oprogramowania</title>
<body>

<p>
Instalacja znalezionych w ten sposób w Portage programów jest prosta i
sprowadza się do dodania do polecenia <c>emerge</c> nazwy programu do
zainstalowania. Dla przykładu zainstalujemy sobie gnumeric:
</p>

<pre caption="Instalacja gnumeric">
# <i>emerge gnumeric</i>
</pre>

<p>
W związku z tym, że wiele aplikacji do prawidłowego działania potrzebuje innych
programów, instalacja którejś paczki może nieść ze sobą potrzebę zainstalowania
także jej zależności. Nie ma powodu do zmartwień, to nie RPM-y - Portage
doskonale radzi sobie z zależnościami. By dowiedzieć się, jakie zależności
zostaną zainstalowane z danym programem należy dodać przełącznik
<c>--pretend</c> do zwykłej komendy instalującej program. Na przykład:
</p>

<pre caption="Udajemy, że chcemy zainstalować gnumeric">
# <i>emerge --pretend gnumeric</i>
</pre>

<p>
Kiedy zostanie wydane polecenie dla Portage by zainstalowało jakiś program, z
Internetu zostaną pobrane wszystkie niezbędne, nieznajdujące się na dysku pliki
zawierające kod źródłowy. Domyślnie są one przechowywane w katalogu
<path>/usr/portage/distfiles</path>. Następnie program zostanie rozpakowany,
skompilowany i zainstalowany. Aby Portage jedynie pobrało potrzebne pliki,
należy dodać opcję <c>--fetchonly</c> do komendy emerge:
</p>

<pre caption="Pobieranie kodu źródłowego gnumeric">
# <i>emerge --fetchonly gnumeric</i>
</pre>

</body>
</subsection>
<subsection>
<title>Wyszukiwanie dokumentacji do zainstalowanych pakietów</title>
<body>

<p>
Wiele pakietów jest publikowanych jest wraz z dokumentacją. Czasem flaga USE
<c>doc</c> określa, czy dokumentacja dla danego pakietu zostanie zainstalowana
czy nie. Informację o tym, czy dany pakiet korzysta z flagi <c>doc</c> można
uzyskać za pomocą następującego polecenia: <c>emerge -vp &lt;nazwa
pakietu&gt;</c>.
</p>

<pre caption="Sprawdzenie czy pakiet używa flagi doc.">
<comment>(Oczywiście alsa-lib to tylko przykład)</comment>
# <i>emerge -vp alsa-lib</i>
[ebuild N ] media-libs/alsa-lib-1.0.9_rc3 +doc -jack 674 kB
</pre>

<p>
Flagę <c>doc</c> można włączyć bądź wyłączyć globalnie w pliku
<path>/etc/make.conf</path> lub dla poszczególnych pakietów w pliku
<path>/etc/portage/package.use</path>. Możemy również stworzyć katalog
<path>/etc/portage/package.use</path> gdzie umieszczamy pliki z flagami USE.
Rozdział <uri link="?part=2&amp;chap=2">Flagi USE</uri> omawia ten temat
szczegółowo.
</p>

<p>
Dokumentacja do zainstalowanego już pakietu na ogół znajduje się w podkatalogu
o nazwie takiej samej jak pakiet, w katalogu <path>/usr/share/doc</path>. Można
wyświetlić listę wszystkich zainstalowanych plików za pomocą narzędzia
<c>equery</c>, które jest częścią <uri
link="/doc/pl/gentoolkit.xml">pakietu</uri> <c>app-portage/gentoolkit</c>.
</p>

<pre caption="Lokalizowanie dokumentacji pakietu">
# <i>ls -l /usr/share/doc/alsa-lib-1.0.9_rc3</i>
total 28
-rw-r--r-- 1 root root 669 May 17 21:54 ChangeLog.gz
-rw-r--r-- 1 root root 9373 May 17 21:54 COPYING.gz
drwxr-xr-x 2 root root 8560 May 17 21:54 html
-rw-r--r-- 1 root root 196 May 17 21:54 TODO.gz

<comment>(Można też użyć equery do zlokalizowania plików dokumentacji)</comment>
# <i>equery files alsa-lib | less</i>
media-libs/alsa-lib-1.0.9_rc3
* Contents of media-libs/alsa-lib-1.0.9_rc3:
/usr
/usr/bin
/usr/bin/alsalisp
<comment>(Wyjście programu zostało skrócone)</comment>
</pre>

</body>
</subsection>
<subsection>
<title>Usuwanie oprogramowania</title>
<body>

<p>
Do usuwania zainstalowanych programów służy polecenie <c>emerge --unmerge</c>.
Nakaże ono Portage usunięcie wszystkich plików dodanych w procesie instalacji
programu, <c>z pominięciem</c> jednak tych plików, które od instalacji programu
zostały zmienione. Najczęściej chodzi tu o pliki konfiguracyjne, a
pozostawienie ich na dysku umożliwia łatwe wznowienie pracy z programem w
przypadku, gdy w przyszłości program zostanie ponownie zainstalowany.
</p>

<p>
W tym dość przejrzystym procesie kryje się pewna pułapka: Portage <e>nie</e>
sprawdza, czy pakiet, który ma być usunięty nie jest zależnością innego
zainstalowanego programu. Jeśli jednak jest to program niezbędny dla
prawidłowego działania systemu, pojawi się ostrzeżenie.
</p>

<pre caption="Usuwanie gnumeric z systemu">
# <i>emerge --unmerge gnumeric</i>
</pre>

<p>
Gdy program zostanie usunięty, jego zależności nie są usuwane razem z nim, ale
pozostają na dysku. Aby odszukać i usunąć niepotrzebne w systemie zależności
używamy polecenia <c>emerge --depclean</c>. Omówimy je dokładniej nieco
później.
</p>

</body>
</subsection>
<subsection>
<title>Uaktualnianie systemu</title>
<body>

<p>
Aby utrzymać swój system w dobrej kondycji (nie wspominając już o instalacji
najnowszych poprawek związanych z bezpieczeństwem), należy dość często go
uaktualniać. W związku z tym, że w tym procesie Portage porównuje zainstalowane
oprogramowanie z ebuildami z drzewa Portage, należy najpierw pobrać jego
aktualną wersję. Kiedy już je zaktualizujemy przychodzi czas na właściwe
uaktualnienie systemu. Dokonujemy tego poleceniem <c>emerge --update world</c>.
W poniższym przykładzie skorzystamy także z opcji <c>--ask</c>, która spowoduje
wyświetlenie listy pakietów do aktualizacji, a następnie pytania czy na pewno
chcemy je zaktualizować.
</p>

<pre caption="Uaktualnianie systemu">
# <i>emerge --update --ask world</i>
</pre>

<p>
Portage znajdzie wszystkie <e>bezpośrednio</e> zainstalowane przez użytkownika
aplikacje (znajdują się ona na liście w pliku
<path>/var/lib/portage/world</path>), ale pominie uaktualnienia ich zależności.
Aby uaktualnić <e>całe oprogramowanie wraz z zależnościami</e>, należy dodać
jeszcze argument <c>--deep</c>:
</p>

<pre caption="Uaktualnienie całego systemu">
# <i>emerge --update --deep world</i>
</pre>

<p>
W związku z tym, że poprawki związane z bezpieczeństwem zdarzają się nie tylko
w programach zainstalowanych bezpośrednio, ale również w ich zależnościach
zalecamy częste uruchamianie tego polecenia.
</p>

<p>
Jeżeli ostatnio zmieniane były <uri link="?part=2&amp;chap=2">flagi USE</uri>,
polecamy również dodanie do całej tej linii poleceń argumentu <c>--newuse</c>.
Portage sprawdzi wtedy czy zmiany we flagach USE niosą ze sobą potrzebę
przekompilowania i przeinstalowania którychś z zainstalowanych programów:
</p>

<pre caption="Przeprowadzenie pełnego uaktualnienia">
# <i>emerge --update --deep --newuse world</i>
</pre>

</body>
</subsection>
<subsection>
<title>Metapakiety</title>
<body>

<p>
Niektóre z pakietów w drzewie Portage nie mają żadnej zawartości, ale służą do
instalacji całych kolekcji innych pakietów. Doskonałym przykładem takiego
zestawu jest pakiet <c>KDE</c>, który służy do instalowania kompletnego
środowiska graficznego. Możemy dzięki jego istnieniu przy pomocy jednego
polecenia dodać do systemu wszystkie programy, biblioteki oraz zależności
związane z KDE.
</p>

<p>
Jeśli kiedykolwiek zdarzy nam się posiadać taki pakiety zainstalowany w
systemie, będziemy mieli pewien problem z jego odinstalowaniem. Zwykłe wpisanie
<c>emerge --unmerge</c> poczyni stosunkowo małe spustoszenie w niepotrzebnych
nam już plikach, ponieważ ogromna ilość zależności pozostanie w systemie.
</p>

<p>
Portage jest w stanie poradzić sobie z tego typu "osieroconymi" zależnościami,
ale najpierw należy w pełni uaktualnić swój system, uwzględniając przy tym
również zmiany we flagach USE. Następnie uruchamiamy wspomniane już wcześniej
polecenie <c>emerge --depclean</c>, aby usunąć "osierocone" zależności, a
kiedy już skończymy je odinstalowywać przebudowujemy wszystkie programy, które
wcześniej były dynamicznie z nimi zlinkowane, a teraz już ich nie potrzebują.
</p>

<p>
Cały proces sprowadza się do wpisania trzech prostych poleceń:
</p>

<pre caption="Usuwanie osieroconych zeleżności">
# <i>emerge --update --deep --newuse world</i>
# <i>emerge --depclean</i>
# <i>revdep-rebuild</i>
</pre>

<p>
Program <c>revdep-rebuild</c> znajduje się w pakiecie <c>gentoolkit</c> wraz z
kilkoma innymi bardzo przydatnymi programami. Aby używać programu, należy
oczywiście najpierw zainstalować ten pakiet.
</p>

<pre caption="Instalacja pakietu gentoolkit">
# <i>emerge gentoolkit</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Kiedy Portage narzeka</title>
<subsection>
<title>...na sloty, virtuale, gałęzie, architektury i profile</title>
<body>

<p>
Jak już wcześniej zaznaczaliśmy, Portage jest potężnym narzędziem i posiada
możliwości jakich nie ma żaden inny program do zarządzania oprogramowaniem.
Postaramy się teraz w skrócie przedstawić kilka aspektów pracy z Portage.
</p>

<p>
W Portage możliwe jest posiadanie kilku różnych wersji jednego programu.
Podczas gdy inne dystrybucje obchodzą problem nadając po prostu takim pakietom
różne numery porządkowe, jak np. <c>freetype</c> i <c>freetype2</c> Portage
wykorzystuje tu technologię tzw. <e>slotów</e>. Każdy ebuild posiada osobny
slot dla wersji programu, którą reprezentuje, więc ebuildy różnych wersji
programu mogą koegzystować w jednym systemie. Na przykład paczka
<c>freetype</c> posiada ebuildy z ustawionymi wartościami <c>SLOT="1"</c> i
<c>SLOT="2"</c>.
</p>

<p>
Są również pakiety, które wykonują te same czynności, ale w różny sposób.
Doskonałym przykładem takiego programu są loggery systemowe: <c>metalogd</c>,
<c>sysklogd</c> i <c>syslog-ng</c>. Aplikacje, które do prawidłowego działania
potrzebują loggera systemowego nie mogą posiadać w zależnościach jedynie np.
<c>metalogd</c>, ponieważ pozostałe programy z tej grupy również są w stanie
spełnić tę zależność. Do tego właśnie służą Virtuale. Każdy z loggerów
systemowych dostarcza po prostu <c>virtual/syslog</c>, który jest jednocześnie
zależnością dla innych programów.
</p>

<p>
Oprogramowanie znajdujące się w drzewie Portage jest podzielone na gałęzie.
Domyślnie używana jest gałąź stabilna dla danej architektury. Nowe i
nieprzetestowane programy są dodawane do gałęzi niestabilnej, czyli testowej.
Dopóki ich niezawodność nie zostanie potwierdzona i nie zostaną przeniesione do
gałęzi stabilnej, Portage nie zainstaluje ich, chociaż ebuildy nowszych wersji
będą się znajdowały w drzewie.
</p>

<p>
Niektóre programy są dostępne tylko dla określonych architektur. Czasem na
innych wcale nie działają, czasem potrzebują jeszcze nieco testów, może się też
zdarzyć, że deweloper danego programu nie ma po prostu czasu lub możliwości,
aby przetestować taki pakiet na różnych architekturach.
</p>

<p>
Każdej instalacji Gentoo przypisany jest określony <c>profil</c>, który zawiera
między innymi listę pakietów, które są niezbędne do prawidłowego działania
systemu.
</p>

</body>
</subsection>
<subsection id="blocked">
<title>Zablokowane pakiety</title>
<body>

<pre caption="Ostrzeżenie przed blokadą pakietu w Portage (z opcją --pretend)">
[blocks B     ] mail-mta/ssmtp (is blocking mail-mta/postfix-2.2.2-r1)
</pre>

<pre caption="Ostrzeżenie Portage przed blokadą pakietu (bez opcji --pretend)">
!!! Error: the mail-mta/postfix package conflicts with another package.
!!!        both can't be installed on the same system together.
!!!        Please use 'emerge --pretend' to determine blockers.
</pre>

<p>
W ebuildach znajdują się określone pola, które informują Portage na temat
zależności danego programu. Są dwa rodzaje takich zależności: Zależności
niezbędne do zbudowania programu - deklarowane przez <c>DEPEND</c> oraz
zależności niezbędne do jego uruchomienia - deklarowane jako <c>RDEPEND</c>.
Kiedy któraś z tych zależności jest niekompatybilna z jakimś virtualem lub
pakietem, jest włączana blokada.
</p>

<p>
Są dwie możliwości na pozbycie się blokady: Nie instalować programu lub usunąć
pakiet, który go blokuje. W podanym powyżej przykładzie mogliśmy wybrać
pomiędzy rezygnacją z instalacji <c>postfix</c> lub usunięciem <c>ssmtp</c>.
</p>

<p>
Może również się zdarzyć, że blokują się pakiety, które nie są jeszcze
zainstalowane. W takim rzadkim przypadku należy się dokładnie zastanowić czemu
oba mają być zainstalowane. Zwykle można sobie poradzić tylko z jednym z tych
pakietów. Jeśli nie jest to możliwe prosimy o <uri
link="http://bugs.gentoo.org">zgłoszenie błędu</uri>.
</p>

</body>
</subsection>
<subsection id="masked">
<title>Zamaskowane pakiety</title>
<body>

<pre caption="Ostrzeżenie Portage o zamaskowanych pakietach">
!!! all ebuilds that could satisfy "bootsplash" have been masked.
</pre>

<pre caption="Ostrzeżenie Portage o zamaskowanych pakietach - z podaniem przyczyny">
!!! possible candidates are:

- gnome-base/gnome-2.8.0_pre1 (masked by: <i>~x86 keyword</i>)
- lm-sensors/lm-sensors-2.8.7 (masked by: <i>-sparc keyword</i>)
- sys-libs/glibc-2.3.4.20040808 (masked by: <i>-* keyword</i>)
- dev-util/cvsd-1.0.2 (masked by: <i>missing keyword</i>)
- media-video/ati-gatos-4.3.0 (masked by: <i>package.mask</i>)
- sys-libs/glibc-2.3.2-r11 (masked by: <i>profile</i>)
</pre>

<p>
Jeśli zechcemy zainstalować paczkę, która nie jest dostępna dla naszego systemu
dostaniemy właśnie taki komunikat. Możemy wtedy zainstalować inny spełniający
te same funkcje, ale dostępny dla naszego systemu program lub poczekać aż
pakiet zostanie odmaskowany. Maskowanie pakietów nie odbywa się bez przyczyny:
</p>

<ul>
  <li>
    Słowo kluczowe <b>~arch</b> oznacza, że aplikacja nie została jeszcze
    dostatecznie sprawdzona na naszej architekturze, aby znaleźć się w gałęzi
    stabilnej. Zwykle w takim przypadku wystarczy poczekać kilka dni (rzadziej
    tygodni) i spróbować ponownej jej instalacji.
  </li>
  <li>
    Słowo kluczowe <b>-arch</b> lub <b>-*</b> oznacza, że program nie działa na
    naszej architekturze. Jeśli jednak aplikacja działa i są dowody na poparcie
    tej tezy prosimy o zgłoszenie tego na naszą <uri
    link="http://bugs.gentoo.org">Bugzillę</uri>.
  </li>
  <li>
    Komunikat <b>missing keyword</b> oznacza, że aplikacja nie została jeszcze
    przetestowana na tej architekturze. W takim przypadku należy poprosić
    któregoś z developerów zajmujących się tymi sprawami o przetestowanie
    pakietu lub uczynić to własnoręcznie i zgłosić wyniki swoich badań na <uri
    link="http://bugs.gentoo.org">Bugzillę</uri>.
  </li>
  <li>
    Komunikat <b>package.mask</b> oznacza, że pakiet jest uszkodzony,
    niestabilny lub co gorsza w ogóle nie nadaje się do użytku.
  </li>
  <li>
    Komunikat z tekstem <b>profile</b> oznacza, że pakiet nie pasuje do naszego
    profilu systemowego i gdybyśmy go zainstalowali mógłby zepsuć nasz system.
  </li>
</ul>

</body>
</subsection>
<subsection id="missingdependencies">
<title>Brakujące zależności</title>
<body>

<pre caption="Komunikat Portage o brakujących zależnościach">
emerge: there are no ebuilds to satisfy "&gt;=sys-devel/gcc-3.4.2-r4".

!!! Problem with ebuild sys-devel/gcc-3.4.2-r2
!!! Possibly a DEPEND/*DEPEND problem.
</pre>

<p>
Aplikacja, którą próbujemy zainstalować jest zależna od pakietu, który nie jest
dostępny dla danej architektury. Należy sprawdzić na <uri
link="http://bugs.gentoo.org">Bugzilli</uri> czy problem został już zgłoszony i
ewentualnie go zgłosić, jeśli nie zrobił tego ktoś inny. Jeśli nie są mieszane
różne typów gałęzi Portage w jednym systemie to problem ten nie powinien
wystąpić i zwykle oznacza błąd w drzewie.
</p>

</body>
</subsection>
<subsection id="ambiguousebuild">
<title>Niejasna nazwa pakietu</title>
<body>

<pre caption="Ostrzeżenie Portage dotyczące niejasnych nazw pakietów">
!!! The short ebuild name "aterm" is ambiguous.  Please specify
!!! one of the following fully-qualified ebuild names instead:

    dev-libs/aterm
    x11-terms/aterm
</pre>

<p>
Program, który próbujemy zainstalować ma nazwę, którą posiada więcej niż jeden
pakiet. Aby rozwiązać ten problem wystarczy dokładniej sprecyzować co chcemy
zainstalować dodając przed nazwę programu kategorię, do której on należy.
</p>

</body>
</subsection>
<subsection id="circulardependencies">
<title>Wzajemnie od siebie zależne pakiety</title>
<body>

<pre caption="Ostrzeżenie Portage na temat wzajemnie od siebie zależnych pakietów">
!!! Error: circular dependencies:

ebuild / net-print/cups-1.1.15-r2 depends on ebuild / app-text/ghostscript-7.05.3-r1
ebuild / app-text/ghostscript-7.05.3-r1 depends on ebuild / net-print/cups-1.1.15-r2
</pre>

<p>
Sprawa jest prosta. Dwa pakiety (lub więcej), które próbujemy zainstalować są
od siebie wzajemnie zależne i w związku z tym nie mogą zostać zainstalowane.
Oznacza to błąd w drzewie Portage, który zostanie usunięty możliwie najszybciej
od momentu jak pierwszy użytkownik zgłosi ten problem na <uri
link="http://bugs.gentoo.org">Bugzillę</uri>.
</p>

</body>
</subsection>
<subsection id="fetchfailed">
<title>Nieudane pobieranie</title>
<body>

<pre caption="Komunikat Portage o nieudanym pobieraniu">
!!! Fetch failed for sys-libs/ncurses-5.4-r5, continuing...
<comment>(...)</comment>
!!! Some fetch errors were encountered.  Please see above for details.
</pre>

<p>
Oznacza to, że Portage nie było w stanie pobrać źródeł żądanej aplikacji, w
związku z czym zostało zmuszone do zrezygnowania z jej instalacji i będzie
instalowało kolejne programy z listy. Błąd najczęściej jest spowodowany
wstawieniem złego adresu serwera w ebuildzie programu lub dlatego, że serwer
lustrzany nie zdążył jeszcze się zsynchronizować. Możliwa jest również
sytuacja, że serwer, na którym znajdują się źródła, z jakichś względów jest
nieczynny.
</p>

<p>
Należy odczekać około godziny i spróbować ponownie zainstalować program.
</p>

</body>
</subsection>
<subsection id="profileprotect">
<title>Ochrona profilu systemu</title>
<body>

<pre caption="Ostrzeżenie Portage dotyczące pakietu chronionego profilem systemowym">
!!! Trying to unmerge package(s) in system profile. 'sys-apps/portage'
!!! This could be damaging to your system.
</pre>

<p>
Taki komunikat oznacza, że pakiet, który próbujemy usunąć jest kluczowy dla
działania systemu. Znajduje się on na liście profilu systemowego jako niezbędny
i w związku z tym nie zostanie usunięty.
</p>

</body>
</subsection>
<subsection id="digesterror">
<title>Błędy przy sprawdzaniu plików z sumami kontrolnymi</title>
<body>

<p>
Czasami, przy instalacji pakietu, zdarza się nam zobaczyć taki błąd:
</p>

<pre caption="Błąd sprawdzania sumy kontrolnej">
&gt;&gt;&gt; checking ebuild checksums
!!! Digest verification failed:
</pre>

<p>
Jest to znak nieprawidłowego działania Portage jednak częściej przyczyną jest
pomyłka dewelopera, który popełnił błąd przy dodawaniu pakietu do drzewa.
</p>

<p>
Kiedy zobaczymy taki błąd <e>nie</e> należy samemu tworzyć nowych sum
kontrolnych. Wydanie polecenia <c>ebuild foo digest</c> nie sprawi, ze
naprawimy problem, możemy go nawet pogłębić!
</p>

<p>
Zamiast tego powinniśmy odczekać godzinę lub dwie, aż ktoś naprawi uszkodzony
plik. Jest wielce prawdopodobne, że błąd został już zgłoszony jednak musi
upłynąć kilka chwil, zanim prawidłowy plik pojawi się w drzewie Portage. W 
czasie gdy będziemy czekać na rozwiązanie, powinniśmy sprawdzić <uri
link="http://bugs.gentoo.org">Bugzille</uri> czy ktokolwiek już zgłosił problem
z danym pakietem. Jeżeli nie, powinniśmy sami wypełnić i wysłać raport.
</p>

<p>
Po rozwiązaniu problemu, należy ponownie przeprowadzić aktualizację drzewa
Portage, aby pobrać naprawiony plik z sumami kontrolnymi.
</p>

<impo>
<e>Nie</e> znaczy to, że aktualizację trzeba przeprowadzać kilka razy! Zgodnie
z zapisem w polityce serwerów rsync (w czasie gdy uruchamiamy polecenie
<c>emerge --sync</c>) użytkownik, który zbyt często aktualizuje drzewo zostanie
zbanowany! Lepiej jest poczekać do następnej zaplanowanej aktualizacji niż
niepotrzebnie obciążać serwery rsync.
</impo>

</body>
</subsection>
</section>
</sections>
