<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/2008.0/hb-install-ppc-kernel.xml,v 1.1 2008/03/06 14:16:58 shadow Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>8.5</version>
<date>2008-01-12</date>

<section>
<title>Strefa czasowa</title>
<body>

<p>
Aby system wiedział gdzie się znajduje należy najpierw wybrać strefę czasową.
Odszukujemy ją w <path>/usr/share/zoneinfo</path>, a następnie kopiujemy ją do
pliku <path>/etc/localtime</path>. Należy unikać stref czasowych o nazwie
<path>/usr/share/zoneinfo/Etc/GMT*</path>, ponieważ ich nazwy mogą być mylące,
na przykład <path>GMT-8</path> jest w rzeczywistości GMT+8.
</p>

<pre caption="Konfiguracja strefy czasowej">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Przykład dla Warszawy)</comment>
# <i>cp /usr/share/zoneinfo/Europe/Warsaw /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Instalacja źródeł kernela</title>
<subsection>
<title>Wybór jądra</title>
<body>

<p>
Sercem każdej dystrybucji jest jądro Linux. Stanowi ono interfejs pomiędzy
programami i sprzętem. Gentoo dostarcza użytkownikom różne źródła kerneli. Pełna
lista wraz z opisami znajduje się w <uri
link="/doc/pl/gentoo-kernel.xml">Przewodniku jąder Gentoo</uri>.
</p>

<p>
Dla architektury PPC polecamy jądro <c>gentoo-sources</c> (seria 2.6).
</p>

<pre caption="Instalowanie źródeł jądra">
# <i>emerge --usepkg gentoo-sources</i>
</pre>

<p>
W katalogu <path>/usr/src</path> powinien być mniej więcej taki jak poniższy
symlink, o nazwie <path>linux</path>, wskazujący na źródła jądra. W przykładzie
zakładamy, że źródła jądra zostały zainstalowane jako <c>gentoo-sources-<keyval
id="kernel-version"/></c>. W komputerze użytkownika może być to inna wersja,
dlatego należy mieć to na uwadze.
</p>

<pre caption="Podgląd symlinka do źródeł kernela">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           22  Mar 18 16:23 /usr/src/linux -&gt; linux-<keyval id="kernel-gentoo"/>
</pre>

<p>
Pora na skonfigurowanie i skompilowanie źródeł jądra. Można użyć do tego celu
program <c>genkernel</c>, który zbuduje uniwersalne jądro, takie jak np.
to używane przez płyty instalacyjne. Można też przeprowadzić cały proces
ręcznie i lepiej dostosować kernel do własnych potrzeb. Zaczniemy od
omówienia tej drugiej, znacznie lepszej metody.
</p>

<p>
Aby ręcznie skonfigurować jądro należy przejść do paragrafu <uri
link="#manual">Ręczna konfiguracja</uri>, opis pracy z  <c>genkernelem</c>
opisaliśmy w paragrafie <uri link="#genkernel">Alternatywnie: użycie
genkernel</uri>
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Ręczna konfiguracja</title>
<subsection>
<title>Wprowadzenie</title>
<body>

<p>
Ręczna konfiguracja kernela jest często postrzegana jako najtrudniejsza czynność
jaką użytkownicy Linuksa muszą wykonywać. Nie jest to prawdą, po skompilowaniu
kilku kerneli nie będziemy pamiętać, że kiedykolwiek uważaliśmy to za trudne
zadanie.
</p>

<p>
Nie sposób jednak zaprzeczyć, że należy dobrze znać swój komputer, aby móc
prawidłowo skonfigurować jądro. Większość informacji można zdobyć poprzez
zainstalowanie pakietu pciutils (<c>emerge --usepkg pciutils</c>) zawierającego
program <c>lspci</c>. Dzięki temu będzie możliwe używanie <c>lspci</c> wewnątrz
chrootowanego środowiska. Podczas pracy z tym programem można bezpiecznie
zignorować wszelkie ostrzeżenia związane z <e>pcilib</e> (jak np.
"pcilib: cannot open /sys/bus/pci/devices). Ponadto można również uruchomić
<c>lspci</c> poza środowiskiem chroot. Powinno dać to taki sam efekt. Dodatkowe
informacje o sterownikach, które należy włączyć do jądra można uzyskać dzięki
poleceniu <c>lsmod</c>, które pokaże listę modułów jakie załadował system płyty
instalacyjnej. Informacje zapisane podczas uruchamiania jądra również mogą
okazać się cennym źródłem informacji. Do ich wyświetlania służy polecenie
<c>dmesg</c>.
</p>

<p>
Teraz pora na przeniesienie się do katalogu ze źródłami kernel, a następnie
jego konfiguracja. Zaczynamy od konfiguracji kernela, który uruchomi się na
większości 32-bitowych komputerów PowerPC poprzez wydanie polecenia <c>make
pmac32_defconfig</c>. Po wygenerowaniu domyślnej konfiguracji pora na wydanie
polecenia <c>make menuconfig</c>, po którym uruchomi się menu konfiguracyjne
oparte na ncurses.
</p>

<pre caption="Uruchamianie menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make pmac32_defconfig</i>
# <i>make menuconfig</i>
</pre>

<p>
Zobaczymy okienko z listą sekcji, na które podzielono cały proces konfiguracji.
Zaczniemy od omówienia opcji, które należy aktywować, aby zapewnić prawidłowe
działanie Gentoo.
</p>

</body>
</subsection>
<subsection>
<title>Zaznaczanie wymaganych ustawień</title>
<body>

<p>
Po pierwsze włączamy możliwość korzystania z rozwojowych i eksperymentalnych
fragmentów kodu jądra. Jeśli tego nie zrobimy, nawet nie zobaczymy kilku
bardzo ważnych opcji.
</p>

<pre caption="Wybieranie opcji experimental code/drivers">
General setup ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Następnie przechodzimy do <c>File Systems</c> i wybierz wsparcie dla systemów
plików, których zamierzamy używać. Jeśli o to nie zadbamy, Gentoo nie będzie w
stanie zamontować partycji, a czasem nawet się nie uruchomi. Przy okazji
zaznaczamy też <c>Virtual memory</c> i <c>/proc file system</c>.
</p>

<pre caption="Wybór potrzebnych systemów plików">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
<comment>(System plików /proc może być już wymuszony przez konfigurację naszego komputera. Jeżeli tak jest zobaczymy znaki -- zamiast poniższego widoku).</comment>
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)
  Partition Types ---&gt;
    [*] Advanced partition support
    [*] Amiga partition table support
    [*] Macintosh partition map support

<comment>(Wybieramy jedną lub kilka z tych opcji zależnie od używanych systemów plików.)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Użytkownicy komputerów NewWorld i OldWorld będą potrzebowali wsparcia dla
systemu plików HFS. Na komputerach OldWorld potrzebne jest do kopiowania
skompilowanego kernela na partycję MacOS, natomiast na komputerach NewWorld
umożliwia konfigurację partycji Apple_Bootstrap:
</p>

<pre caption="Aktywowanie wsparcia dla HFS">
File Systems ---&gt;
  File Systems ---&gt;
    &lt;M&gt; Apple Macintosh file system support
    &lt;M&gt; Apple Extended HFS file system support
</pre>

<p>
Jeśli używany jest PPPoE do łączenia się z Internetem lub gdy używamy modemu
dial-up będzie trzeba włączyć następujące opcje:
</p>

<pre caption="Sterowniki niezbędne dla użytkowników PPPoE">
Device Drivers ---&gt;
  Network device support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Obie opcje dotyczące kompresji nie są wprawdzie wymagane, ale również nie
zaszkodzą naszemu systemowi. Opcja <c>PPP over Ethernet</c>, może okazać się
przydatna dla <c>ppp</c> tylko gdy skonfigurujemy jądro do trybu PPPoE.
</p>

<p>
Nie należy zapomnieć o wkompilowaniu wsparcie dla naszej karty sieciowej do
jądra! Większość nowych komputerów Apple używa sterownika SunGEM. Starsze
wersje używają sterownika BMAC.
</p>

<pre caption="Wybieranie sterownika karty sieciowej">
Device Drivers ---&gt;
  Network device support ---&gt;
    Ethernet (10 or 100Mbit) ---&gt;
      [*] Ethernet (10 or 100Mbit)
      &lt;*&gt;   Generic Media Independent Interface device support
      &lt;*&gt;   Generic Media Independent Interface device support
      &lt;*&gt;   BMAC (G3 ethernet) support
      &lt;*&gt; Sun GEM support
</pre>

<p>
Wywłaszczanie w jądrze wciąż działa niestabilnie na platformie PPC i może
spowodować błędy przy kompilacji czy naruszenia ochrony pamięci. <e>Nie
radzimy</e> korzystać z tej opcji. Obie opcję, <e>Voluntary Preemption</e> oraz
<e>No Forced Preemption</e> nie powinny stwarzać problemów.
</p>

<pre caption="Upewnianie się, że wyłączono wywłaszczanie">
Kernel options ---&gt;
<comment>(Wybieramy jeden)</comment>
  Preemption Model
    (X) No Forced Preemption (Server)
    (X) Voluntary Kernel Preemption (Desktop)
</pre>

<p>
Jeśli komputer uruchamiany jest poprzez Firewire, potrzebne będzie włączenie
poniższych opcji. Można użyć w tym celu modułów.
</p>

<pre caption="Włączenie wsparcia dla urzadzeń firewire podczas bootowania">
   Device Drivers ---&gt;
     IEEE 1394 (FireWire) support ---&gt;
       &lt;*&gt; IEEE 1394 (FireWire) support
       &lt;*&gt;   OHCI-1394 support
       &lt;*&gt;   SBP-2 support (Harddisks etc.)
</pre>

<p>
Jeśli komputer uruchamiany jest poprzez USB potrzebne będzie włączenie
poniższych opcji. Można użyć w tym celu modułów.
</p>

<pre caption="Włączenie wsparcia dla urządzeń USB podczas bootowania">
   Device Drivers ---&gt;
      USB support ---&gt;
        &lt;*&gt; Support for Host-side USB
        &lt;*&gt;   OHCI HCD support
        &lt;*&gt;   USB Mass Storage support
</pre>

<p>
Nie wolno wyłączać wsparcia dla framebuffera, jest on wymagany do udanego
uruchomienia systemu. Jeśli jest to karta NVIDIA, należy użyć framebuffera
Open Firmware. Dla kart ATI należy wybrać odpowiedni bufor ramki w zależności od
posiadanego chipsetu karty (Mach64, Rage128 or Radeon).
</p>

<pre caption="Wybieranie sterownika bufora ramki">
   Device Drivers ---&gt;
     Graphics support ---&gt;
       &lt;*&gt; Support for frame buffer devices
       [*] Open Firmware frame buffer device support
       &lt;*&gt; ATI Radeon display support
       &lt;*&gt; ATI Rage128 display support
       &lt;*&gt; ATI Mach64 display support
       Console display driver support ---&gt;
         &lt;*&gt; Framebuffer Console support
</pre>

<note>
Jeśli włączy się więcej niż jeden sterownik to przy uruchamianiu może zostać
wybrany niewłaściwy z nich. Należy zatem powstrzymać się od wybierania większej
ilości urządzeń bufora ramki lub wybrać to najbardziej pożądane za pomocą opcji
video <c>video=radeonfb</c> podczas rozruchu systemu.
</note>

<p>
Po ukończeniu konfigurowania jądra należy przejść do paragrafu
<uri link="#compiling">Kompilacja i instalacja</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilacja i instalacja</title>
<body>

<p>
Po skonfigurowaniu kernela przyszła pora na jego skompilowanie i
instalację. Opuszczamy program konfiguracyjny i wpisujemy następujące polecenia:
</p>

<pre caption="Kompilowanie kernela.">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Kiedy jądro skończy się kompilować kopiujemy jego obraz do katalogu
<path>/boot</path> w opisany poniżej sposób. Jeżeli posiadamy oddzielną
partycję boot, tak jak komputery Pegasos należy się upewnić, że jest ona
prawidłowo zamontowana. W przypadku używania BootX do uruchamiania systemu,
skopiujemy jądro w późniejszym czasie.
</p>

<p>
Yaboot i BootX używają nieskompresowanych jąder w odróżnieniu do innych tego
typu programów. Nieskompresowane jądra posiada nazwę vmlinux, a jego obraz po
skompilowaniu znajduje się w katalogu <path>/usr/src/linux</path>. Jeżeli
używamy komputera Pegasos jego oprogramowania wewnętrzne wymaga jądra
skompresowanego, które po skompilowaniu posiada nazwę zImage i znajduje się
w katalogu <path>/usr/src/linux/arch/ppc/boot/images</path>.
</p>

<pre caption="Instalowanie kernela">
# <i>cd /usr/src/linux</i>
<comment>Należy mieć na uwadzę, że wersja naszego jądra może być inna</comment>
<comment>(Apple/IBM)</comment>
# <i>cp vmlinux /boot/<keyval id="kernel-name"/></i>
<comment>(Pegasos)</comment>
# <i>cp arch/powerpc/boot/images/zImage /boot/<keyval id="kernel-name"/></i>
</pre>

<p>
Następnie przechodzimy do paragrafu <uri link="#kernel_modules">Instalacja
osobnych modułów jądra</uri>.
</p>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Instalacja osobnych modułów jądra</title>
<subsection>
<title>Konfigurowanie modułów</title>
<body>

<p>
Lista modułów, które chcemy by były automatycznie ładowane przy starcie systemu
powinna znajdować się w pliku <path>/etc/modules.autoload.d/kernel-2.6</path>.
Jeśli jest to potrzebne, można dodać kilka opcji dla modułów.
</p>

<p>
Żeby przejrzeć listę wszystkich dostępnych użyjemy komendy <c>find</c>. Należy
zastąpić wpis "wersja" wersją używanego jądra.
</p>

<pre caption="Znajdowanie dostępnych modułów">
# <i>find /lib/modules/&lt;wersja&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Na przykład, aby automatycznie ładować do pamięci moduł <c>3c59x.o</c> edytujemy
plik <path>kernel-2.6</path> i wprowadzamy do niego nazwę tego modułu.
</p>

<pre caption="Edycja /etc/modules.autoload.d/kernel-2.6">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Następnie przechodzimy do rozdziału <uri link="?part=1&amp;chap=8">Konfiguracja
systemu</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternatywnie: użycie genkernel</title>
<body>

<p>
Po zainstalowaniu źródeł należy je skonfigurować. Zrobimy to automatycznie przy
pomocy programu <c>genkernel</c>, który wykonuje cały proces dokładnie w ten sam
sposób w jaki jest konfigurowane jądro na płycie instalacyjnej. Konsekwencją
wyboru genkernela jest to, że system będzie zmuszony do wykrywania dostępnego
sprzętu przy każdym uruchomieniu komputera. W związku z tym, że genkernel nie
wymaga od użytkownika żadnych ręcznych poprawek w konfiguracji, jest doskonałym
rozwiązaniem dla tych wszystkich, którzy nie są najmocniejsi w samodzielnym
kompilowaniu jądra.
</p>

<p>
Zanim jednak zdradzimy jak używa się tego programu musimy wytłumaczyć jak go
zainstalować:
</p>

<pre caption="Emergowanie genkernela">
# <i>emerge --usepkg genkernel</i>
</pre>

<p>
Następnie kopiujemy konfigurację jądra z płyty instalacyjnej do miejsca, w
którym znajdzie ją i wykorzysta genkernel:
</p>

<pre caption="Kopiowanie konfiguracji jądra z płyty instalacyjnej">
# <i>zcat /proc/config.gz > /usr/share/genkernel/ppc/kernel-config-2.6</i>
</pre>

<p>
Jeśli do uruchamiania wykorzystuje się Firewire lub USB, trzeba dodać moduły do
initrd.  W tym celu edytujemy <path>/usr/share/genkernel/ppc/modules_load</path>
i dodajemy <c>MODULES_FIREWIRE="ieee1394 ohci1394 sbp2"</c> dla Firewire lub
<c>MODULES_USB="usbcore ohci-hcd ehci-hcd usb-storage"</c> dla USB.
</p>

<p>
Przed kompilacją źródeł, musimy dokonać paru poprawek w fstab. Pozostała część
tego pliku zostanie uzupełniona później więc nie należy się teraz tym
przejmować. Jeżeli nie stworzyliśmy oddzielnej partycji boot (NIE bootstrap,
jest to zupełnie co innego), należy usunąć wpis odnoszący się do
<path>/boot</path> z <path>/etc/fstab</path>. Krok ten będziemy musieli wykonać
na większości komputerów.
</p>

<pre caption="Usuwanie wpisu /boot z /etc/fstab na komputerach bez partycji boot">
# <i>nano -w /etc/fstab</i>
<comment>Należy usunąć poniższą linię</comment>
/dev/BOOT               /boot           ext2            noauto,noatime  1 2
</pre>

<p>
Źródła skompilujemy przy pomocy polecenia <c>genkernel --genzimage all</c>. Na
Pegasosie należy inaczej skonfigurować jądro i zbudować je w formacie zImage
zamiast vmlinux, z którego korzysta się na komputerach Apple.  Kompilowanie
zajmie mnóstwo czasu, ponieważ <c>genkernel</c> zawiera niemal wszystkie
dostępne sterowniki.
</p>

<p>
Jeśli partycja rozruchowa została sformatowana w innym niż ext2 lub ext3
systemie plików należy ręcznie dodać potrzebne dla nich sterowniki, wybiera się
je przy pomocy menu <c>genkernel --menuconfig all</c>. Sterowniki te muszą być
wkompilowane w jądro <e>na stałe</e>, nie można dodawać ich w postaci modułów.
Użytkownicy EVMS2 lub LVM2 powinni dodać również <c>--evms2</c> lub
<c>--lvm2</c> do listy argumentów.
</p>

<pre caption="Uruchamianie genkernel">
# <i>genkernel all</i>
</pre>

<pre caption="Na Pegasosach">
# <i>genkernel --genzimage --kernel-config=/usr/share/genkernel/ppc/Pegasos all</i>
</pre>

<p>
W wyniku tego procesu powstanie właściwy plik jądra, initrd (initial root disk)
oraz ogromna ilość modułów. Nazwy plików jądra i initrd będą potrzebne przy
konfiguracji bootloadera do prawidłowego wypełnienia jego pliku
konfiguracyjnego, więc warto je sobie zapisać. Przy następnym uruchomieniu
komputera zostanie najpierw wykonany plik initrd, który wykryje cały dostępny
sprzęt i wczyta odpowiednie moduły, a następnie uruchomi się właściwy system.
Należy się upewnić, że zapisaliśmy poprawnie wymagane argumenty do załadowania
systemu, bez nich system się nie uruchomi.
</p>

<pre caption="Sprawdzanie nazw utworzonych plików jądra">
<comment>(Należy mieć na uwadzę, że nasza wersją jądra może być inna)</comment>
# <i>ls /boot/kernel-genkernel-ppc-<keyval id="kernel-gentoo"/> /boot/initramfs-genkernel-ppc-<keyval id="kernel-gentoo"/></i>
</pre>

<p>
Kolejny etap instalacji to <uri link="?part=1&amp;chap=8">Konfigurowanie
systemu</uri>.
</p>

</body>
</section>
</sections>
