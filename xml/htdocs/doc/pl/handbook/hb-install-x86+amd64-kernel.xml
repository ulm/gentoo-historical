<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/hb-install-x86+amd64-kernel.xml,v 1.19 2008/01/14 03:26:13 rane Exp $ -->

<sections>

<abstract>
Jądro Linux jest rdzeniem każdej dystrybucji. W tym rozdziale wytłumaczymy jak
je skonfigurować.
</abstract>

<version>5.8</version>
<date>2008-01-14</date>

<section>
<title>Strefa czasowa</title>
<body>

<p>
Aby system wiedział gdzie się znajduje, należy najpierw wybrać strefę czasową.
Odszukujemy ją w <path>/usr/share/zoneinfo</path>, a następnie kopiujemy ją do
pliku <path>/etc/localtime</path>. Należy unikać stref czasowych o nazwie
<path>/usr/share/zoneinfo/Etc/GMT*</path>, ponieważ ich nazwy mogą być mylące,
na przykład <path>GMT-8</path> jest w rzeczywistości GMT+8.
</p>

<pre caption="Konfiguracja strefy czasowej">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Przykład dla Warszawy)</comment>
# <i>cp /usr/share/zoneinfo/Europe/Warsaw /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Instalowanie źródeł</title>
<subsection>
<title>Wybór jądra</title>
<body>

<p>
Jądro Linux jest sercem każdej dystrybucji i stanowi interfejs pomiędzy
programami użytkownika, a sprzętem. Gentoo pozwala użytkownikom na wybranie
spośród kilku różnych jego źródeł. Pełna ich lista wraz z opisami znajduje się w
dokumencie zatytułowanym <uri link="/doc/pl/gentoo-kernel.xml">Omówienie źródeł
jądra dostępnych w Gentoo</uri>.
</p>

<p test="func:keyval('arch')='x86'">
Dla architektury x86 dostępne jest jądro <c>gentoo-sources</c> (źródła z
poprawkami dodającymi nowe funkcje).
</p>

<p test="func:keyval('arch')='AMD64'">
Dla architektury AMD64 udostępniamy źródła <c>gentoo-sources</c> (kernel 2.6 z
nałożonymi specjalnymi poprawkami dla amd64, które dodają nowe funkcje).
</p>

<p>
Wybrane źródła instaluje się przy pomocy polecenia <c>emerge</c>.
</p>

<pre caption="Instalowanie źródeł jądra">
# <i>emerge gentoo-sources</i>
</pre>

<p>
W katalogu <path>/usr/src</path>, pod nazwą <c>linux</c>, powinno znajdować się
mniej więcej takie dowiązanie symboliczne wskazujące na aktualne źródła. W tym
przykładzie wskazuje na źródła <c>gentoo-sources-2.6.12-r10</c>.
</p>

<pre caption="Podgląd dowiązania symbolicznego do źródeł jądra">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root   root    12 Oct 13 11:04 /usr/src/linux -&gt; linux-<keyval id="kernel-version"/>
</pre>

<p>
Pora na skonfigurowanie i skompilowanie źródeł jądra. Można użyć do tego
programu <c>genkernel</c>, który zbuduje uniwersalne jądro, takie jak to
znajdujące się na płytach instalacyjnych. Można również przeprowadzić cały
proces ręcznie, co pozwoli na lepsze dostosowanie jądra do indywidualnych
potrzeb użytkownika. Najpierw omówimy tę drugą, znacznie lepszą metodę.
</p>

<p>
Proces ręcznej konfiguracji jądra został opisany w paragrafie <uri
link="#manual">Domyślnie: ręczna konfiguracja</uri>. Opis użycia
<c>genkernela</c> znajduje się w części <uri link="#genkernel">Alternatywnie:
użycie genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Domyślnie: Ręczna konfiguracja</title>
<subsection>
<title>Wprowadzenie</title>
<body>

<p>
Ręczna konfiguracja jądra to zwykle najtrudniejsze zadanie przed jakim musi
stanąć każdy początkujący użytkownik Linuksa. Zwykle po skompilowaniu kilku
zapomina się, że kiedykolwiek uważało się to za trudną czynność.
</p>

<p>
Nie sposób jednak zaprzeczyć, że należy dobrze znać swój komputer, aby móc
prawidłowo skonfigurować jądro. Większość informacji można zdobyć poprzez
instalację pakietu pciutils (<c>emerge pciutils</c>) zawierającego program
<c>lspci</c>. Dzięki temu będzie możliwe używanie <c>lspci</c> wewnątrz
chrootowanego środowiska. Podczas pracy z tym programem można bezpiecznie
zignorować wszelkie ostrzeżenia związane z <e>pcilib</e> (jak np. "pcilib:
cannot open /sys/bus/pci/devices)". Ponadto można również uruchomić <c>lspci</c>
poza środowiskiem chroot. Powinno dać to taki sam efekt. Dodatkowe informacje o
sterownikach, które należy włączyć do jądra, można uzyskać dzięki poleceniu
<c>lsmod</c>, które pokaże listę modułów jakie załadował system płyty
instalacyjnej.
</p>

<p>
Kiedy już zbierzemy wszystkie informacje, przechodzimy do katalogu ze źródłami i
wpisujemy polecenie <c>make menuconfig</c>. Uruchomi się menu konfiguracyjne
oparte na bibliotekach graficznych ncurses.
</p>

<pre caption="Wywoływanie menu konfiguracyjnego">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Cała konfiguracja została podzielona na kilka sekcji, co znacznie ułatwia
odnalezienie i wybranie odpowiednich sterowników. Poniżej wymieniamy wszystkie
opcje, które należy włączyć, aby Gentoo mogło prawidłowo funkcjonować.
</p>

</body>
</subsection>
<subsection>
<title>Zaznaczanie wymaganych ustawień</title>
<body>

<p>
Przede wszystkim należy zapewnić sobie możliwość korzystania z rozwojowych i
eksperymentalnych fragmentów kodu jądra. Jeśli się z tego zrezygnuje, zniknie
kilka bardzo ważnych ustawień.
</p>

<pre caption="Wybieranie opcji experimental code/drivers">
General setup ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Wszystkie sterowniki potrzebne do wystartowania systemu (takie jak kontroler
SCSI) muszą być <e>wkompilowane na stałe</e> w jądro - nie należy ich dodawać w
formie modułów.
</p>

</body>
<body test="func:keyval('arch')='AMD64'">

<p>
Trzeba również wybrać konkretny typ procesora. Osoby opiekujące się jądrem
x86_64 polecają włączenie obsługi MCE, dzięki czemu użytkownik będzie
powiadamiany o problemach ze sprzętem. Informacje te pojawią się nie w dmesg,
ale w <path>/dev/mcelog</path>. Konieczne będzie również zainstalowanie pakietu
<c>app-admin/mcelog</c>. Należy się upewnić, że zaznaczyliśmy opcję IA32
Emulation jeśli chcemy uruchamiać programy 32-bitowe. Gentoo domyślnie
instaluje system multilib, więc najprawdopodobniej będziemy chcieli zaznaczyć
tę opcję.
</p>

<pre caption="Wybór rodziny procesorów">
Processor type and features  --->
   [ ] Intel MCE Features
   [ ] AMD MCE Features
  Processor family (AMD-Opteron/Athlon64)  --->
    ( ) AMD-Opteron/Athlon64
    ( ) Intel EM64T
    ( ) Generic-x86-64
Executable file formats / Emulations  --->
   [*] IA32 Emulation
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
Na samym początku należy wybrać odpowiednią dla posiadanego sprzętu rodzinę
procesorów:
</p>

<pre caption="Wybór rodziny procesorów">
Processor type and features ---&gt;
  <comment>(Należy zmienić wybór w zależności od konfiguracji sprzętowej komputera)</comment>
  (<i>Athlon/Duron/K7</i>) Processor family
</pre>

</body>
<body>

<p>
Następnie przechodzimy do <c>File Systems</c> i wybieramy obsługę systemów
plików, z których zamierzamy używać. Jeśli pominiemy ten krok, Gentoo nie
będzie w stanie zamontować niektórych partycji lub nawet się nie uruchomi.
Sterowniki te również powinny być wkompilowane w jądro na stałe, nie należy ich
dodawać w modułach. Oprócz tego zaznaczamy opcje <c>Virtual memory</c> i
<c>/proc file system</c>. Użytkownicy jąder 2.4 wciąż muszą korzystać z
<c>/dev file system</c>, ponieważ jądra te nie obsługują <c>udev</c>.
</p>

</body>
<body test="func:keyval('arch')='x86'">

<pre caption="Wybór potrzebnych systemów plików">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)

<comment>(Zaznaczamy opcje odpowiednie dla używanych systemów plików)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

</body>
<body test="func:keyval('arch')='AMD64'">

<pre caption="Wybór potrzebnych systemów plików">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)

<comment>(Zaznaczamy opcje odpowiednie dla używanych systemów plików)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

</body>
<body>

<p>
Nie zapominajmy o włączeniu DMA dla dysków:
</p>

<pre caption="Włączanie obsługi DMA">
Device Drivers ---&gt;
  ATA/ATAPI/MFM/RLL support ---&gt;
    [*] Generic PCI bus-master DMA support
</pre>

<p>
Użytkownicy łączący się z Internetem za pomocą PPPoE i połączeń dial-up powinni
zaznaczyć również:
</p>

<pre caption="Sterowniki niezbędne dla użytkowników PPPoE">
Device Drivers ---&gt;
  Networking Support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<pre caption="Sterowniki niezbędne dla użytkowników PPPoE cd." test="func:keyval('arch')='x86'">
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Obie opcje dotyczące kompresji nie są wprawdzie wymagane, ale również nie
zaszkodzą naszemu systemowi, podobnie zresztą jak opcja <c>PPP over
Ethernet</c>, która jest przydatna tylko gdy skonfiguruje się <c>ppp</c> do
pracy w trybie PPPoE jądra (kernel mode PPPoE).
</p>

<p>
Należy wkompilować odpowiednie sterowniki dla wszystkich posiadanych kart
sieciowych.
</p>

<p test="func:keyval('arch')='x86'">
Posiadacze procesorów Intela z technologią HyperThreading (tm) lub systemów
wieloprocesorowych powinni zaznaczyć opcję "Symmetric multi-processing support":
</p>

<p test="func:keyval('arch')='AMD64'">
Posiadacze Opteronów lub procesorów wielordzeniowych (jak AMD64 X2) powinni
zaznaczyć opcję "Symmetric multi-processing support":
</p>

<pre caption="Włączanie SMP">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<note>
W systemach wielordzeniowych, każdy z rdzeni widziany jest jako osobny procesor.
</note>

<p>
Jeśli posiadamy urządzenia wejściowe USB (np. klawiaturę lub myszkę) dodajemy
sterowniki również dla nich:
</p>

<pre caption="Aktywowanie wsparcia dla urządzeń wejścia używających USB">
Device Drivers ---&gt;
  HID Devices --->
    &lt;*&gt;   USB Human Interface Device (full HID) support
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
Posiadacze laptopów z PCMCIA powinni włączyć wsparcie dla swoich kart.
</p>

<pre caption="Włączanie obsługi PCMCIA">
Bus options (PCI, PCMCIA, EISA, MCA, ISA)  ---&gt;
  PCCARD (PCMCIA/CardBus) support  ---&gt;
    &lt;*&gt; PCCard (PCMCIA/CardBus) support
<comment>(Starsze karty wymagają tu opcji 16 bit - zapewne większość użytkowników zechce włączyć tą opcję)</comment>
    &lt;*&gt;   16-bit PCMCIA support
    [*]   32-bit CardBus support
<comment>(Wybieramy odpowiednie mostki)</comment>
    --- PC-card bridges
    &lt;*&gt; CardBus yenta-compatible bridge support (NEW)
    &lt;*&gt; Cirrus PD6729 compatible bridge support (NEW)
    &lt;*&gt; i82092 compatible bridge support (NEW)
    &lt;*&gt; i82365 compatible bridge support (NEW)
    &lt;*&gt; Databook TCIC host bridge support (NEW)
</pre>

<p>
Po zakończeniu konfigurowania jądra przechodzimy do paragrafu <uri
link="#compiling">kompilowanie i instalowanie</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilowanie i instalowanie</title>
<body>

<p>
Po skonfigurowaniu kernela przyszła pora na jego skompilowanie i instalację.
Opuszczamy program konfiguracyjny i rozpoczynamy proces kompilacji:
</p>

<pre caption="Kompilowanie kernela">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Kiedy jądro skończy się kompilować należy przekopiować jego obraz do katalogu
<path>/boot</path>. Wybieramy dowolną nazwę dla naszego jądra jednak należy
pamiętać jaka to nazwa, gdyż będziemy jej potrzebowali w późniejszym czasie w
trakcie konfiguracji bootloadera. Należy pamiętać o zastąpieniu części wpisu
<c><keyval id="kernel-name"/></c> swoją nazwą i wersją kernela.
</p>

<pre caption="Instalowanie jądra">
# <i>cp arch/<keyval id="arch-sub"/>/boot/bzImage /boot/<keyval id="kernel-name"/></i>
</pre>

<p>
Następnie przechodzimy do akapitu dotyczącego <uri
link="#kernel_modules">modułów</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternatywnie: użycie genkernela</title>
<body>

<p>
Ten paragraf jest przeznaczony dla użytkowników, którzy zdecydowali się użyć
programu <c>genkernel</c> do skonfigurowania jądra.
</p>

<p>
Po zainstalowaniu źródeł, należy je skonfigurować. Zrobimy to automatycznie,
przy pomocy programu <c>genkernel</c>, który wykonuje cały proces dokładnie w
ten sam sposób w jaki jest konfigurowane jądro na płycie instalacyjnej.
Konsekwencją wyboru genkernela jest to, że system będzie zmuszony do wykrywania
dostępnego sprzętu przy każdym uruchomieniu komputera. W związku z tym, że
genkernel nie wymaga od użytkownika żadnych ręcznych poprawek w konfiguracji,
jest doskonałym rozwiązaniem dla tych wszystkich, którzy nie są najmocniejsi w
samodzielnym kompilowaniu jądra.
</p>

<p>
Zanim jednak zdradzimy jak używa się tego cudownego programu, musimy wytłumaczyć
jak go zainstalować:
</p>

<pre caption="Instalowanie genkernela">
# <i>emerge genkernel</i>
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
Użytkownicy jąder serii 2.6 mogą od razu skopiować konfigurację z płyty
instalacyjnej do miejsca skąd będzie mógł odczytać ją genkernel.
</p>

<pre caption="Kopiowanie konfiguracji genkernela z płyty instalacyjnej">
<comment>(Wyłącznie dla użytkowników jąder serii 2.6)</comment>
# <i>zcat /proc/config.gz &gt; /usr/share/genkernel/x86/kernel-config-2.6</i>
</pre>

</body>
<body>

<p>
Źródła skompilujemy przy pomocy polecenia <c>genkernel all</c>. Kompilowanie
zajmie mnóstwo czasu, ponieważ <c>genkernel</c> zawiera niemal wszystkie
dostępne sterowniki.
</p>

<p>
Jeśli na partycji rozruchowej został stworzony inny system plików niż ext2 lub
ext3, konieczne będzie dodanie potrzebnych sterowników, które można wybrać za
pomocą menu wywołanego poleceniem <c>genkernel --menuconfig all</c>. Sterowniki
te muszą być wkompilowane w jądro <e>na stałe</e>, nie można dodawać ich w
postaci modułów. Użytkownicy EVMS2 lub LVM2 powinni dodać również
<c>--evms2</c>.
</p>

<pre caption="Uruchamianie genkernela">
# <i>genkernel all</i>
</pre>

<p>
W toku tego procesu powstanie właściwy plik jądra, initrd (initial root disk)
oraz ogromna rzesza modułów. Nazwy plików jądra i initrd będą potrzebne przy
konfiguracji bootloadera do prawidłowego wypełnienia jego pliku
konfiguracyjnego, więc warto je sobie zapisać. Przy następnym uruchomieniu
komputera zostanie najpierw wykonany plik initrd, który wykryje cały dostępny
sprzęt i wczyta odpowiednie moduły, a następnie uruchomi się właściwy system.
</p>

<pre caption="Sprawdzanie nazw utworzonych plików jądra">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>Moduły jądra</title>
<subsection>
<title>Konfigurowanie modułów</title>
<body>

<p>
Moduły ładowane w czasie startu systemu muszą zostać dopisane do pliku
<path>/etc/modules.autoload.d/kernel-2.6</path>. Można tu również dodać
dodatkowe opcje ich ładowania.
</p>

<p>
Żeby przejrzeć listę wszystkich dostępnych modułów, użyjemy polecenia
<c>find</c>. Należy zastąpić wpis "wersja" wersją używanego jądra.
</p>

<pre caption="Znajdowanie dostępnych modułów">
# <i>find /lib/modules/&lt;wersja&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Dla przykładu, aby załadować moduł <c>3c59x.o</c>, należy edytować plik
<path>kernel-2.4</path> lub <path>kernel-2.6</path> i dodać tam jego nazwę.
</p>

<pre caption="Edytowanie /etc/modules.autoload.d/kernel-2.4">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Kolejny etap instalacji to <uri link="?part=1&amp;chap=8">Konfigurowanie
systemu</uri>.
</p>

</body>
</subsection>
</section>
</sections>
