<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/handbook/2006.0/hb-install-ppc-disk.xml,v 1.3 2006/07/27 19:36:56 shadoww Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>6.1</version>
<date>2006-07-25</date>

<section>
<title>Wprowadzenie do urządzeń blokowych</title>
<subsection>
<title>Urządzenia blokowe</title>
<body>

<p>
Rzućmy okiem na aspekty Gentoo Linux, oraz ogólnie Linuksa związane z dyskami.
Omówimy systemy plików, partycje oraz urządzenia blokowe. Następnie wspólnie
przejdziemy przez proces podziału twardego dysku, aby jak najlepiej
wykorzystać dostępne miejsce.
</p>

<p>
Zaczniemy od omówienia <e>urządzeń blokowych</e>. Najpopularniejszym z nich
prawdopodobnie jest <path>/dev/hda</path>, reprezentujący w Linuksie pierwszy
napęd IDE. Jeśli w komputerze znajdują się urządzenia SCSI, FireWWire, USB lub
SATA, pierwszym takim dyskiem jest <path>/dev/sda</path>.
</p>

<p>
Urządzenia blokowe stanowią abstrakcyjny interfejs dysków. Programy
użytkownika mogą z nich korzystać nie martwiąc się czy napędy są typu IDE, SCSI,
czy nawet jakiegoś jeszcze innego. Przechowywane dane adresuje się jako ciąg
512-bajtowych bloków.
</p>

</body>
</subsection>
<subsection>
<title>Partycje</title>
<body>

<p>
Teoretycznie możliwe jest przeznaczenie na system całego dysku, zazwyczaj nie
jest to jednak rozwiązanie zbyt praktyczne. Zamiast tego dzielimy napęd na
mniejsze, łatwiejsze w zarządzaniu urządzenia blokowe. Na większości platform
nazywane są one <e>partycjami</e>.
</p>

</body>
</subsection>
</section>
<section>
<title>Projektowanie schematu podziału</title>
<subsection>
<title>Domyślny schemat podziału</title>
<body>

<p>
Jeśli nie mamy ochoty samodzielnie rozrysowywać schematu podziału dysku,
możemy
skorzystać z domyślnego, z którego korzystamy w podręczniku:
</p>

<note>
Jeżeli używamy komputera OldWorld, będziemy cały czas potrzebowali MacOS. W
poniższym schemacie, założyliśmy, że MacOS zainstalowant jest na oddzielnej
pratycji.
</note>

<table>
<tr>
  <th>Partycja NewWorld</th>
  <th>Partycja OldWorld</th>
  <th>Partycja Pegasos</th>
  <th>Partycja RS/6000</th>
  <th>Syestem plików</th>
  <th>Rozmiar</th>
  <th>Opis</th>
</tr>
<tr>
  <ti><path>/dev/hda1</path></ti>
  <ti><path>/dev/hda1</path></ti>
  <ti>(Nie wymagana)</ti>
  <ti>(Nie wymagana)</ti>
  <ti>(Mapa partycji)</ti>
  <ti>32k</ti>
  <ti>Apple_partition_map</ti>
</tr>
<tr>
  <ti><path>/dev/hda2</path></ti>
  <ti>(Niepotrzebne)</ti>
  <ti>(Nie wymagana)</ti>
  <ti>(Nie wymagana)</ti>
  <ti>(bootstrap)</ti>
  <ti>800k</ti>
  <ti>Apple_Bootstrap</ti>
</tr>
<tr>
  <ti>(Nie wymagana)</ti>
  <ti>(Nie wymagana)</ti>
  <ti>(Nie wymagana)</ti>
  <ti><path>/dev/sda1</path></ti>
  <ti>(PReP Boot)</ti>
  <ti>800k</ti>
  <ti>Typ 0x41</ti>
</tr>
<tr>
  <ti>(Nie wymagana)</ti>
  <ti>(<path>/dev/hda2</path> (Dla quik)</ti>
  <ti><path>/dev/hda1</path></ti>
  <ti>(Nie wymagana)</ti>
  <ti>ext2</ti>
  <ti>32MB</ti>
  <ti>Partycja rozruchowa</ti>
</tr>
<tr>
  <ti><path>/dev/hda3</path></ti>
  <ti><path>/dev/hda2</path>(<path>/dev/hda3</path> dla quik)</ti>
  <ti><path>/dev/hda2</path></ti>
  <ti><path>/dev/sda2</path></ti>
  <ti>(swap)</ti>
  <ti>512M</ti>
  <ti>Partycja wymiany, typ 0x82</ti>
</tr>
<tr>
  <ti><path>/dev/hda4</path></ti>
  <ti><path>/dev/hda3</path><path>/dev/hda3</path> (<path>/dev/hda4</path> dla
quik)</ti>
  <ti><path>/dev/hda3</path></ti>
  <ti><path>/dev/sda3</path></ti>
  <ti>ext3, xfs</ti>
  <ti>Reszta dysku</ti>
  <ti>Partycja główna, typ 0x83</ti>
</tr>

</table>

<note>
Są też partycje o nazwach: <path>Apple_Driver63, Apple_Driver_ATA,
Apple_FWDriver, Apple_Driver_IOKit, Apple_Patches</path>. Jeśli nie zamierza,u
używać MacOS 9 można je usunąć, ponieważ ani MacOS X, ani Linux ich nie
potrzebują. Do ich usunięcia należy korzystać z programu parted, ponieważ
mac-fdisk nie jest na razie w stanie ich skasować.
</note>

<warn>
Program <c>parted</c> ma możliwość zmiany rozmiaru partycji, również HFS+.
Niestety wiąże się to z dużym ryzykiem w przypadku partycji HFS+ używających
księgowania. Należy wyłączyć księgowanie w Mac OS X, przed zmianą rozmiaru
partycji. Wszystkie próby zmiany rozmiaru partycji przy pomocy parted to spore
ryzyko, należy więc wykonać najpierw kopie zapasowe danych!
</warn>

<p>
Jeśli nasze rady dotyczące rozmiarów partycji oraz ich ilości, wydaja się
interesujące, proponujemy kontynuowanie lektury. W przeciwnym wypadku
proponujemy przejść od razu do paragrafu <uri link="#mac-fdisk">Domyślnie:
Użycie mac-fdisk</uri> lub <uri
link="#parted">Alternatywnie: Użycie parted (zwłaszcza dla Pegasosa)</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Jak dużo i jak wielkich?</title>
<body>

<p>
Ilość partycji ściśle zależy od naszego środowiska. Na przykład jeśli
administrujemy systemem mającym wielu użytkowników prawdopodobnie uznamy za
stosowne oddzielenie <path>/home</path>, co poprawi bezpieczeństwo i uprości
proces tworzenia kopii zapasowych. Jeżeli docelowym zastosowaniem
instalowanego
systemu jest serwer pocztowy to na osobnej partycji należy umieścić
<path>/var</path> gdzie przechowywane są listy. Dobry wybór systemu plików
może
tu znacznie zwiększyć wydajność. Za to oddzielenie <path>/opt</path> jest
dobrym
rozwiązaniem na serwerach gier, gdyż większość używanego oprogramowania będzie
instalowana właśnie tam. Powodami przyjęcia takiego rozwiązania są również
bezpieczeństwo i łatwość tworzenia kopii zapasowych. Warto upewnić się, że
partycja <path>/usr</path> będzie wystarczająco duża ponieważ będą tam
znajdowały się nie tylko dane wszystkich aplikacji, ale również ważące 500 MB
drzewo Portage.
</p>

<p>
Jak widać, wiele zależy od oczekiwanego rezultatu. Wydzielenie partycji lub
woluminów ma wiele zalet:
</p>

<ul>
<li>
Mamy możliwość dostosowania jak najwydajniejszego w danym zastosowaniu systemu
plików dla poszczególnych partycji lub woluminów.
</li>
<li>
Zapełnienie całego wolnego miejsca na partycji przez wadliwie działające
narzędzie nie ma szkodliwego wpływu na całość systemu.
</li>
<li>
Jeśli to konieczne, można skrócić czas kontroli systemów plików, dzięki
możliwości jednoczesnego dokonywania jej na kilku partycjach (ma to znaczenie
zwłaszcza na sprzęcie z wieloma dyskami).
</li>
<li>
Montując część partycji lub woluminów z opcjami read-only (tylko do odczytu),
nosuid (ignorowane są bity setuid), noexec (ignorowane są bity wykonywalności)
itd. można znacznie poprawić bezpieczeństwo.
</li>
</ul>

<p>
Niestety zbyt rozbudowany podział niesie z sobą spore niebezpieczeństwo: źle
zaplanowany zaowocuje pustkami na zbyt dużych i ciasnotą na zbyt małych
partycjach. Ponadto dla dysków opartych na interfejsach SCSI jest limit
maksymalnie 15 partycji.
</p>

</body>
</subsection>
</section>
<section id="mac-fdisk">
<title>Domyślnie: Partycjonowanie dysku za pomocą mac-fdisk</title>
<body>

<p>
Aby utworzyć partycje skorzystamy z programu <c>mac-fdisk</c>:
</p>

<pre caption="Uruchamianie mac-fdisk">
# <i>mac-fdisk /dev/hda</i>
</pre>

<p>
Zaczniemy od pozbycia się starych partycji, aby zrobić miejsce na nowy system.
Skorzystamy w tym celu z polecenia <c>d</c>. Zapyta ono o numer kasowanych
partycji. Zwykle pierwsza partycja na komputerach NewWorld
(Apple_partition_map) nie może zostać skasowana.
</p>

<p>
Następnie zakładamy partycję <e>Apple_bootstrap</e> za pomocą <c>b</c>.
Zostaniemy zapytani o początkowy blok. Jeśli poprzednio wybraliśmy na ten cel
trzecią partycję, wpiszemy <c>3p</c>.
</p>

<note>
To <e>nie</e> jest partycja "boot". Nie jest nawet używana przez Linuksa; nie
potrzeba na niej miejsca do założenia systemu plików, nie powinieno jej nawet
montować. Użytkownicy Apple nie potrzebują osobnej partycji rozruchowej.
</note>

<p>
Teraz stworzymy partycję wymiany za pomocą <c>c</c>. Program <c>mac-fdisk</c>
ponownie zapyta o blok początkowy. Jako, że wcześniej skorzystaliśmy z
<c>3</c>,
teraz wpiszemy <c>4p</c>. Gdy zostaniemy zapytani o rozmiar wpisujemy
<c>512M</c> (lub inny na jaki się zdecydowaliśmy - 512MB to zalecane minimum).
Następnie na pytanie o nazwę wpisujemy <c>swap</c> (koniecznie).
</p>

<p>
Żeby założyć partycję root, wpiszemy <c>c</c>, następnie <c>5p</c>, aby wybrać
blok od którego ma się zaczynać. Na pytanie o rozmiar ponownie wpiszemy
<c>5p</c>, <c>mac-fdisk</c> przydzieli jej całą pozostałą wolną przestrzeń
Należy koniecznie nadać jej nazwę <c>root</c>.
</p>

<p>
Na zakończenie zachowujemy zmiany i opuszczamy <c>mac-fdisk</c> poleceniami
<c>w</c> oraz <c>q</c>.
</p>

<note>
Aby się upewnić, że wszystko zostało poprawnie wykonane, należy uruchomić
<c>mac-fdisk</c> jeszcze raz i sprawdzić czy są tam wszystkie nowo utworzone
partycje. Jeśli nie widać żadnych partycji, lub też nie ma zmian, które przed
chwilą wprowadziliśmy, należy ponownie wprowadzić zmiany, przy pomocy klawisza
<c>i</c>. Należy zwrócić uwagę, że polecenie to usuwa wszystkie obecne
partycje
i zastępuje je tymi odtworzonymi.
</note>

<p>
Następnie przechodzimy do paragrafu <uri link="#filesystems">Zakładanie
systemów plików</uri>.
</p>

</body>
</section>
<section id="parted">
<title>Alternatywnie: Partycjonowanie dysku przy pomocy parted (zwłaszcza
Pegasos)</title>
<body>

<p>
Program <c>parted</c>, czyli Partition Editor, jest w stanie obsłużyć partycje
HFS+ używane przez Mac OS i Mac OS X. Dzięki niemu można zmienić rozmiar
obecnych partycji, aby zrobić miejsce na partycje dla Linuksa. W przykładzie
poniżej opiszemy jednak partycjonowanie dysku jedynie dla maszyn Pegasos.
</p>

<p>
Zacznijmy od uruchomienia programu <c>parted</c>:
</p>

<pre caption="Uruchamianie parted">
# <i>parted /dev/hda</i>
</pre>

<p>
Jeśli dysk nie jest jeszcze podzielony na partycje, uruchamiamy <c>mklabel
amiga</c>, aby utworzyć nową etykietę dla tego napędu.
</p>

<p>
Zawsze można wpisać polecenie <c>print</c>, aby wyświetlić aktualną tabelę
partycji. Zmiany jakie wprowadzimy nie zostaną zapisane aż do czasu wyjścia z
aplikacji. Przez cały czas można anulować omyłkowo wprowadzone zmiany przy
pomocy kombinacji klawiszy <c>Ctrl-C</c>, która przerwie działanie programu.
</p>

<p>
Jeśli zamierzamy na swojej maszynie zainstalować również MorphOS musimy
utworzyć system plików affs1, o nazwie "BI0" (BI zero) na początku napędu. Do
zainstalowania kernela MorphOS'a wystarczy 32MB miejsca. Jeśli mamy Pegasos
lub
chcemy używać reiserfs, bądź xfs będzie trzeba ponadto trzymać na tej partycji
kernel Linuksa (Pegasos II może zostać zabootowany z partycji ext2/ext3 lub
affs1). Aby utworzyć partycję wpiszemy polecenie <c>mkpart primary affs1 START
END</c>, gdzie <c>START</c> i <c>END</c> to obszar w megabajtach (np. <c>0
32</c> tworzy partycję o rozmiarze 32MB, zaczynającą się na 0 i kończącą na
32MB).
</p>

<p>
Musimy utworzyć dwie partycje dla Linuksa, jedną root, która będzie zawierała
programy itp. i drugą, która będzie partycją wymiany (swap). Przed utworzeniem
partycji root należy wybrać system plików jakiego będziemy używać. Mamy do
wyboru ext2, ext3, reiserfs i xfs. Jeśli nie jesteśmy pewni co wybrać,
polecamy
użycie ext3. Wpisujemy polecenie <c>mkpart primary ext3 START END</c> aby
utworzyć partycję ext3. Również tutaj zamieniamy <c>START</c> i <c>END</c>
obszarem w MB, na którym chcemy utworzyć partycję.
</p>

<p>
Partycja swap powinna w większości przypadków mieć rozmiar równy ilości
pamięci
RAM w komputerze pomnożonej przez dwa. Jeśli nie będziemy uruchamiać
jednocześnie ogromnej ilości programów, powinna wystarczyć ilość swap równa
ilości RAM (jednak nie mniejsza niż zalecane 512MB). Aby stworzyć partycję
wymiany wpiszemy polecenie <c>mkpart primary linux-swap START END</c>.
</p>

<p>
Wpisujemy polecenie <c>print</c>, a następnie wynotowujemy numery partycji,
ponieważ będziemy ich potrzebować w dalszej instalacji.
</p>

<p>
Kiedy skończymy pracę w parted wyłączamy go wpisując po prostu <c>quit</c>.
</p>

</body>
</section>
<section id="filesystems">
<title>Tworzenie systemów plików</title>
<subsection>
<title>Wprowadzenie</title>
<body>

<p>
Po utworzeniu partycji nadszedł czas na założenie na nich systemów plików.
Jeśli
jest to obojętne jakie zostaną wybrane lub odpowiadają nam domyślne ustawienia
w
podręczniku, przejdźmy do paragrafu <uri link="#fsza partycja została
zaznaczona
ilesystems-apply">Zakładania systemów plików na partycjach</uri>. W przeciwnym
wypadku polecamy dalszą lekturę aby dowiedzieć się więcej na ich temat.
</p>

</body>
</subsection>
<subsection>
<title>Systemy plików?</title>
<body>

<p>
Mamy do dyspozycji następujące systemy plików: ext2, ext3, XFS i ReiserFS.
Wszystkie działają stabilnie na architekturze PPC.
</p>

<p>
<b>Ext2</b> to sprawdzony i popularny linuksowy system plików, którego główną
wadą jest to, że nie posiada księgowania. Powoduje to, iż jego regularne
kontrole przy starcie systemu bywają długotrwałe. Obecnie istnieją nowoczesne
systemy plików z księgowaniem, które można szybko sprawdzić i to właśnie te
polecamy naszym użytkownikom. Księgowanie zapobiega długotrwałym kontrolom
podczas uruchamiania systemu oraz ewentualnym błędom spójności danych.
</p>

<p>
<b>Ext3</b> to odpowiednik ext2 posiadający księgowanie w trybach
full oraz ordered, dzięki czemu w razie awarii dane odzyskiwane są
błyskawicznie. Jest on bardzo dobrym i niezawodnym rozwiązaniem.
Posiada ukrytą opcję korzystania z drzewa b, co znacznie poprawia
wydajność niemal we wszystkich sytuacjach. W celu włączenia księgowania należy
dodać parametr <c>-O dir_index</c> do linii poleceń programu
<c>mke2fs</c>.Krótko mówiąc ext3 jest świetny.
</p>

<p>
<b>ReiserFS</b> to system plików oparty na drzewie B*, oferujący
dużą wydajność. Przy wielu małych plikach (poniżej 4k) może
być szybszy od ext3 nawet piętnastokrotnie. ReiserFS jest
wysoce skalowalny i posiada księgowanie, a począwszy od jądra 2.4.18,
charakteryzuje go niezawodność i użyteczność zarówno na partycjach ogólnego
przeznaczenia jak i w ekstremalnych przypadkach, takich jak ogromne
partycje, operacje na wielu bardzo małych, lub bardzo dużych plikach czy też
operacje na katalogach zawierających dziesiątki tysięcy plików.
</p>

<p>
<b>XFS</b> to system plików z księgowaniem, w pełni wspierany w Gentoo Linux
przez jądro xfs-sources. Jest bardzo funkcjonalny i zoptymalizowany do
skalowalności. Zalecamy go wyłącznie do systemów z nowoczesnymi dyskami SCSI
i/lub ciągłego zapisu danych z nieprzerwanym dostępem zasilania. Ponieważ
XFS przechowuje dużo danych w pamięci RAM, źle zaprojektowane programy
(te, które nie zachowują odpowiednich środków ostrożności podczas zapisywania
plików na dysk, których niestety jest sporo) mogą doprowadzić w razie awarii
systemu do utraty danych.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>Zakładanie systemów plików na partycjach</title>
<body>

<p>
Aby założyć na woluminie lub partycji system plików należy skorzystać z
odpowiednich narzędzi:
</p>

<table>
<tr>
<th>System plików</th>
<th>Program do zakładania</th>
</tr>
<tr>
<ti>ext2</ti>
<ti><c>mkfs.ext2</c></ti>
</tr>
<tr>
<ti>ext3</ti>
<ti><c>mkfs.ext3</c></ti>
</tr>
<tr>
<ti>reiserfs</ti>
<ti><c>mkfs.reiserfs</c></ti>
</tr>
<tr>
<ti>xfs</ti>
<ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
<ti>jfs</ti>
<ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
Na przykład, aby założyć ext3 na partycji boot (w naszym przypadku
<path>/dev/hda4</path>), należy wykonać następujące polecenia:
</p>

<pre caption="Zakładanie systemu plików na partycji">
# <i>mkfs.ext3 /dev/hda4</i>
</pre>

<note>
Na maszynach Pegasos II kernel musi znajdować się na systemach plików ext2 lub
ext3. Maszyny NewWorld można uruchomić z  ext2, ext3, ReiserFS, a nawet z
HFS/HFS+.
</note>

</body>
</subsection>
<subsection>
<title>Aktywacja partycji wymiany</title>
<body>

<p>
Aby utworzyć partycję wymiany skorzystamy z programu <c>mkswap</c>.
</p>

<pre caption="Tworzenie partycji wymiany">
# <i>mkswap /dev/hda2</i>
</pre>

<p>
Aby ją aktywować skorzystamy z polecenia <c>swapon</c>:
</p>

<pre caption="Aktywacja partycji wymiany">
# <i>swapon /dev/hda2</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Montowanie</title>
<body>

<p>
Po założeniu partycji i utworzeniu systemów plików nadszedł czas na ich
zamontowanie. Służy do tego program <c>mount</c>. Nie zapominamy również
utworzyć odpowiednich katalogów dla każdego z nich. Pokażemy to na przykładzie
partycji boot oraz root:
</p>

<pre caption="Montowanie partycji">
# <i>mkdir /mnt/gentoo</i>
# <i>mount /dev/hda4 /mnt/gentoo</i>
</pre>

<note>
Jeżeli chcemy przenieść <path>/tmp</path> na oddzielną partycję,
nie można zapomnieć po zamontowaniu odpowiednio poprawić praw dostępu:
<c>chmod
1777 /mnt/gentoo/tmp</c>. Dotyczy to również <path>/var/tmp</path>.
</note>

<p>
Będziemy musieli zamontować system plików proc (wirtualny interfejs jądra)
w <path>/proc</path>. Najpierw jednak nagramy trochę plików na nasze partycje.
</p>

<p>
Następnie przechodzimy do rozdziału <uri
link="?part=1&amp;chap=5">Wypakowywanie
plików instalacyjnych</uri>.
</p>

</body>
</section>
</sections>
