<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/keychain-guide.xml,v 1.6 2005/12/15 12:24:20 rane Exp $ -->

<guide link="/doc/pl/keychain-guide.xml" lang="pl">
<title>Keychain w Gentoo</title>

<author title="Autor">
  <mail link="airuike@gmail.com">Eric Brown</mail>
</author>
<author title="Tłumacz">
  Tomasz Jankowski
</author>

<abstract>
Dokument opisuje używanie współdzielonych kluczy SSH za pomocą programu
keychain. Zawiera również podstawową wiedzę na temat kryptografii.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.1</version>
<date>2004-12-02</date>

<chapter>
<title>Podstawy</title>
<section>
<title>Przedstawienie problemu</title>
<body>

<p>
Jeśli wszystkie komputery działają pod kontrolą Gentoo i każdy z nich ma
uruchomionego demona SSH, to trochę kłopotliwe wydaje się bieganie między nimi
i podawanie na każdym hasła. Możliwe, że posiadamy jakiś skrypt albo, że
ustawiliśmy zadanie w cronie, które ładnie łączy się przez SSH. Jest też inne
rozwiązanie tego problemu, polegające na uwierzytelnianiu za pomocą kluczy
publicznych.  
</p>

</body>
</section>
<section>
<title>Jak działa uwierzytelnianie za pomocą kluczy publicznych?</title>
<body>

<p>
Załóżmy, że mamy klienta próbującego połączyć się z serwerem. Klient generuje
parę kluczy i wysyła jeden z nich (klucz publiczny) serwerowi. Następnie serwer
odsyła wezwanie zaszyfrowane za pomocą owego klucza publicznego klientowi,
który próbuje sie połączyć. Jedynie posiadacz prywatnego klucza (klient) jest w
stanie odszyfrować wezwanie, poprawna odpowiedź prowadzi do udanego
uwierzytelnienia.
</p>

</body>
</section>
</chapter>
<chapter>
<title>W jaki sposób używać uwierzytelniania za pomocą klucza publicznego?</title>
<section>
<title>Generowanie pary kluczy</title>
<body>

<p>
Pierwszym krokiem jest wygenerowanie pary kluczy, wykorzystamy do tego
komendę <c>ssh-keygen</c>:
</p>

<pre caption="Generowanie pary kluczy">
$ <i>ssh-keygen -t dsa</i>
<comment>(Należy zaakceptować domyślne wartości i podać długie hasło)</comment>
</pre>

<warn>
Należy wybrać złożone hasła, zwłaszcza dla konta root.
</warn>

<p>
Nowo utworzony klucz prywatny będzie znajdował się w pliku
<path>~/.ssh/id_dsa</path>, a publiczny w <path>~/.ssh/id_dsa.pub</path>. Teraz
jesteśmy gotowi skopiować klucz publiczny na serwer.
</p>

</body>
</section>
<section>
<title>Operacje na serwerze</title>
<body>

<p>
Skopiujemy nasz plik <path>~/.ssh/id_dsa.pub</path> na serwer, na którym działa
sshd i tam dodamy go do pliku <path>~/.ssh/authorized_keys</path>
zawierającego użytkowników łączących się z serwerem. Oto mały przykład jak to
zrobić (należy mieć dostęp do tego serwera poprzez ssh!).
</p>

<pre caption="Koipiowanie klucza publicznego na serwer">
$ <i>scp ~/.ssh/id_dsa.pub uzytkownik_serwera@serwer:~/moj_komputer.pub</i>
$ <i>ssh uzytkownik_serwera@serwer "cat ~/moj_komputer.pub >> ~/.ssh/authorized_keys"</i>
$ <i>ssh uzytkownik_serwera@serwer "cat ~/.ssh/authorized_keys"</i>
</pre>

<p>
Ostatnie polecenie umieści klucz w pliku <path>~/.ssh/authorized_keys</path>.
Należy się upewnić, że wpis jest prawidłowy.
</p>

</body>
</section>
<section>
<title>Testowanie ustawień</title>
<body>

<p>
Teoretycznie, jeżeli wszystko poszło jak należy, a serwerowy demon SSH pozwoli
na to, łączenie z serwerem powinno odbywać się już bez podawania hasła. Nadal
będziemy musieli odszyfrowywać klucz prywatny z hasłem, ale nie powinno się to
mieszać z hasłem użytkownika na serwerze.
</p>

<pre caption="Sprawdzanie kluczy">
$ <i>ssh uzytkownik_serwera@serwer</i>
</pre>

<p>
Powinno pojawić się zapytanie o hasło do klucza id_dsa, po którego podaniu
zostaniemy zalogowani na serwer (o ile hasło zostanie podane prawidłowo). Jeżeli
tak się nie stanie należy zalogować się na konto użytkownik_serwera@serwer i
jeszcze raz sprawdzić poprawność danych w <path>~/.ssh/authorized_keys</path>
(warto upewnić się, że każdy wpis znajduje się w osobnej linii). Warto też
zerknąć, czy demon SSH może dokonywać uwierzytelniania za pomocą kluczy
publicznych.
</p>

<p>
Wiele osób w tym momencie myśli: "Bez sensu, po prostu jedno hasło zostało
zastąpione drugim". Spokojnie, dalsza część tekstu pokazuje kolejny sposób na
zaoszczędzenie cennego czasu.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Upraszczanie autoryzacji za pomocą kluczy publicznych</title>
<section>
<title>Typowe zarządzanie kluczami za pomocą ssh-agent</title>
<body>

<p>
Na pewno fajnie by było raz odszyfrować klucz(e) i uzyskać swobodny dostęp
do wszystkich kont, bez żadnych haseł... No i da się to zrobić! Właśnie do tego
służy program <c>ssh-agent</c>.
</p>

<p>
Program <c>ssh-agent</c> zwykle uruchamia się wraz z sesją serwera X
albo podczas wywołania skryptu powłoki, takiego jak  <path>~/.bash_profile</path>.
<c>ssh-agent</c> tworzy gniazdo UNIX-owe oraz rejestruje kilka zmiennych środowiskowych
tak, że wszystkie późniejsze aplikacje mogą korzystać z tej usługi łącząc się z
gniazdem. Dlatego sensowne jest jego uruchamianie jako nadrzędnego procesu dla
sesji X-ów jeżeli chcemy pominąć deszyfrowanie kluczy publicznych podczas uruchamiania
programów z graficznym GUI.
</p>

<pre caption="Przygotowywanie programu ssh-agent">
$ <i>ssh-agent</i>
</pre>

<note>
To sprawi, że ssh-agent będzie trzymał odszyfrowane klucze aż do zakończenia działania
swojego działania. Jeżeli zajdzie taka potrzeba można ustawić długość życia
kluczy za pomocą opcji -t opisanej w <c>man ssh-agent</c>.
</note>

<p>
Podczas uruchamiania ssh-agent pojawi się informacja o jego numerze PID.
Ponadto ssh-agent ustawia takie zmienne środowiskowe jak <c>SSH_AUTH_SOCK</c> i
<c>SSH_AGENT_PID</c>. Jeżeli plik <path>~/.ssh/id_dsa</path> jeszcze nie istnieje,
zostanie on utworzony podczas pierwszego uruchomienia; pojawi się prośba o hasło.
Jeśli posiadamy inne klucze prywatne możemy je dodać do działającego ssh-agenta
za pomocą polecenia <c>ssh-add</c>, tak, jak pokazano poniżej:
</p>

<pre caption="Dodawanie dodatkowych kluczy do ssh-agent">
$ <i>ssh-add jakis_klucz</i>
</pre>

<p>
Czary-mary. Od tej pory na podstawie klucza można dostać się na każdy z serwerów
bez podawania hasła.
</p>

<pre caption="SSH bez haseł">
$ <i>ssh serwer</i>
</pre>

<p>
Bardzo cenna może okazać się informacja o tym jak zabić ssh-agent w razie
jakiejś nagłej konieczności, prawda?
</p>

<pre caption="Zatrzymywanie ssh-agent">
$ <i>ssh-agent -k</i>
</pre>

<note>
Jeśli pojawią się problemy z zatrzymaniem ssh-agent zawsze można go zabić tak
jak wszystkie inne procesy - poprzez <c>killall ssh-agent</c>.
</note>

<p>
Można jeszcze bardziej uprościć korzystanie z ssh-agent, opowiemy o tym w
następnym akapicie. Przed przejściem do niego należy jednak jeszcze raz się
upewnić, że ssh-agent jest uruchomiony i działa prawidłowo.
</p>

</body>
</section>
<section>
<title>Ostatni poziom uproszczenia obsługi ssh-agent</title>
<body>

<p>
Keychain pozwala wielokrotnie używać ssh-agent pomiędzy logowaniami.
Opcjonalnie może prosić o hasło podczas każdego poszczególnego logowania.
Zanim jednak przejdziemy dalej, musimy go zainstalować.
</p>

<pre caption="Emergowanie keychaina">
# <i>emerge keychain</i>
</pre>

<p>
Możemy już uruchomić keychaina, zakładając, że wszystko poszło pomyślnie.
Poniższą linijkę dodajemy do <path>~/.bash_profile</path> by go uruchomić:
</p>

<pre caption="Włączanie keychaina w bash_profile">
keychain ~/.ssh/id_dsa
. ~/.keychain/$HOSTNAME-sh
</pre>

<note>
Jeśli chcemy, możemy dodać więcej prywatnych kluczy do trybu linii poleceń.
Ponadto jeżeli chcemy każdorazowo być pytani o hasło, dodajemy opcję --clear.
</note>

<note>
W przypadku, gdy nie korzysta się z basha, należy przejrzeć akapit
<b>EXAMPLES</b> w manualu keychaina (<c>man keychain</c>) by dowiedzieć jak go
używać w innych powłokach. Założeniem jest wydawanie tych poleceń za każdym
razem gdy używamy powłoki.
</note>

<p>
Sprawdźmy jak to działa. Na początku upewniamy się, że ssh-agent opisany w
poprzedniej sekcji na pewno jest wyłączony, potem logujemy się do nowej powłoki
lub po prostu włączamy nowy terminal. Powinno pojawić się zapytanie o hasło
do każdego klucza określonego w linii komend. Powłoki uruchomione po tej
będą używać ssh-agent'a, pozwalając ci nawiązywać połączenia bez podawania haseł
SSH.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Podsumowujące uwagi</title>
<section>
<title>Wątek bezpieczeństwa</title>
<body>

<p>
Oczywiście użycie ssh-agent niesie ze sobą pewne niebezpieczeństwo. Przypadkowy
użytkownik może zalogować się do wszystkich serwerów za pomocą powłoki, podczas
gdy właściciel konta np. jest w łazience. Niesie to również pewne
niebezpieczeństwo dla serwerów z którymi się łączymy, więc należy zachować
podstawowe reguły bezpieczeństwa. Jeśli już decydujemy się tak znacznie osłabić
bezpieczeństwo serwerów warto uważnie pilnować bezpieczeństwa każdej z sesji
ssh-agent.
</p>

</body>
</section>
<section>
<title>Rozwiązywanie problemów</title>
<body>

<p>
Czynności opisane w tym dokumencie nie należą do skomplikowanych i nie powinny
przysparzać problemów. Jeśli jednak wystąpią jakieś błędy warto:
</p>

<ul>
  <li>
    Jeśli nie można nawiązać połączenia bez ssh-agent należy połączyć sie
    przez SSH z opcją -vvv by znaleźć problem. Niektóre serwery są tak skonfigurowane,
    że nie mogą używać kluczy publicznych, a inne zawsze muszą pytać o lokalne hasło
    dostępu! W tym wypadku można użyć opcji SSH wraz z parametrem -o lub zmienić
    ustawienia serwerowego demona SSH.
  </li>
  <li>
    Kłopoty związane z ssh-agent i keychainem mogą też wynikać z tego, że
    używana jest powłoka, która nie rozumie poleceń jakie one wywołują. Więcej
    informacji na ten temat współpracy z innymi powłokami można znaleźć w manualach
    ssh-agent i keychain.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
