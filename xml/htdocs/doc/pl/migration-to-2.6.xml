<?xml version='1.0' encoding="UTF-8"?> <!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header:
/var/www/www.gentoo.org/raw_cvs/gentoo/xml/htdocs/doc/pl/migration-to-2.6.xml,v
1.21 2005/08/15 13:58:29 rane Exp $ -->

<guide link="/doc/pl/migration-to-2.6.xml" lang="pl">

<title>Migracja na Gentoo Linux 2.6</title>

<author title="Autor">
  <mail link="dsd@gentoo.org">Daniel Drake</mail>
</author>
<author title="Współpracownik">
  <mail link="sergey_zlodey@mail.ru">Sergey Galkin</mail>
</author>
<author title="Współpracownik">
  <mail link="svyatogor@gentoo.org">Sergey Kuleshov</mail>
</author>
<author title="Redaktor">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Redaktor">
  <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>
<author title="Tłumaczenie">
  <mail link="edi15ta@gazeta.pl">Mateusz Kotyrba</mail>
</author>

<abstract>
Ten dokument pomaga podczas migracji z Linuksa 2.4 na Linuksa 2.6, z devfs na
udev, z OSS na ALSA i z LVM na LVM2.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.2.9</version>
<date>2005-09-08</date>

<chapter>
<title>Wprowadzenie</title>

<section>
<title>Co nowego w Linuksie 2.6?</title>
<body>

<p>
To nie jest łatwe pytanie. Linux 2.6 jest rezultatem ponad 2-letniego rozwoju i
stabilizacji kilku cech. Architektonicznie także różni się nieco od swojego
odpowiednika, Linuksa 2.4. Niektóre z głównych zmian są wyszczególnione poniżej:
</p>

<ul>
  <li>
    Polepszenie interaktywności schedulera procesów: Linux 2.6 pracuje bardzo
    płynnie na desktopach oraz radzi sobie znacznie lepiej pod obciążeniem niż
    2.4.
</li>
  <li>
    Skalowalność: Linux skaluje się znacznie lepiej na małych urządzeniach
    osadzonych (ang. embedded devices) jak i na systemach wieloprocesorowych.
  </li>
  <li>Wydajność: Szybkość popularnych aplikacji wzrosła.</li>
  <li>
    Wsparcie sprzętowe: Żaden inny system operacyjny nie wspiera tylu
    architektur oraz urządzeń sprzętowych co Linux.
</li>
</ul>

<p>
Joseph Pranevich napisał bardzo szczegółowy dokument, <uri
link="http://www.kniggit.net/wwol26.html">The Wonderful World Of Linux
2.6</uri>, który warto przeczytać. Jeśli jesteśmy zainteresowani szczegółami
technicznymi, możemy spojrzeć do <uri
link="http://www.codemonkey.org.uk/docs/post-halloween-2.6.txt">The
post-halloween document</uri> - lecz należy pamiętać, że w pewnym sensie ten
dokument jest już przestarzały.
</p>
</body>
</section>

<section>
<title>Gentoo i 2.6</title>
<body>

<p>
Od wydania Gentoo 2005.0, domyślnym jądrem jest najnowsze jądro serii 2.6.
Domyślny profil jest brany z <path>/etc/make.profiles</path>, który od 2005.0
lub wyżej powinien być dowiązaniem symbolicznym do
<path>/usr/portage/profiles/default-linux/x86/2005.0</path> gdzie znajdują się
różne ważne ustawienia systemowe.
</p>

<p>
Jeśli używamy profilu 2.4, wtedy proszę zmienić profil na taki, który wspiera
jądro 2.6, za pomocą:
</p>

<pre caption="Zmiana profilu">
# <i>rm -f /etc/make.profile</i>
# <i>ln -snf /usr/portage/profiles/default-linux/x86/2005.1 
/etc/make.profile</i>
</pre>

</body>
</section>

<section>
<title>Co to jest udev?</title>
<body>

<p>
W przeszłości Gentoo zmuszało użytkowników do używania <e>devfs</e> w celu
zarządzania katalogiem <path>/dev</path>, który zawiera szereg interfejsów
urządzeń, które umożliwiają aplikacjom systemowym komunikację (poprzez jądro) ze
sprzętem.
</p>

<p>
<e>devfs</e> jest dobrym modelem, jednakże zawiera pewne wewnętrzne problemy,
więc został usunięty głównego stabilnego drzewa (2.6.13).
</p>

<p>
<e>udev</e> jest nowym sposobem zarządzania węzłami urządzeń. Rozwiązuje
problemy poprzedniego menedżera urządzeń.
</p>

<p>
Powyższe zdania mogą nie brzmieć zbyt zrozumiale, ale bez obaw, ciężko pracujący
deweloperzy Gentoo położyli ogromny nacisk na to, aby odejście od devfs było
naprawdę łatwe. Po więcej informacji proszę zajrzeć do dokumentu <uri 
link="/doc/pl/udev-guide.xml">Praca z udev w Gentoo</uri>.
</p>

</body>
</section>
<section>
<title>Co to jest ALSA?</title>
<body>

<p>
Istnieje bardzo duże prawdopodobieństwo, że w jądrach serii 2.4 do obsługi karty
dźwiękowej używaliśmy sterowników OSS (Open Sound System). Obecnie OSS jest
zastępowane przez lepszy zbiór sterowników: ALSA.
</p>

<p>
ALSA (Advanced Linux Sound Architecture) jest nowym zbiorem sterowników kart
dźwiękowych z nowym i ulepszonym interfejsem API, obecnym w jądrze 2.6. ALSA
jest zgodna wstecz z aplikacjami OSS, pod warunkiem, że odpowiednio
skonfigurujemy jądro!
</p>

<note>
Jeśli nie posiadamy jakichkolwiek urządzeń dźwiękowych, to możemy bezpiecznie
ominąć wszelkie polecenia związane z ALSA.
</note>

</body>
</section>
<section>
<title>Co to jest LVM?</title>
<body>

<p>
<e>Logical Volume Management</e> (LVM) jest zestawem narzędzi pozwalających na
zarządzanie pamięcią dyskową w bardzo elastyczny sposób. Pośród innych rzeczy,
pozwala nam ono na rozbudowaną kontrolę nad partycjami (np. zmiana rozmiaru bez
konieczności ponownego uruchamiania komputera) oraz wykonywanie operacji, takich
jak przełączanie urządzeń, w bardzo prosty sposób. LVM działa jako alternatywa
dla standardowego, opartego na podziale dysku na partycje zarządzania dysku.
</p>

<p>
Wsparcie dla LVM historycznie zostało wdrożone w Linuksie 2.4. Linuksa 2.6
cechuje nowa wersja LVM, nazwana <e>LVM2</e>. Proces przejścia na LVM2 wymaga
instalacji nowych wersji narzędzi, których można używać z poziomu użytkownika
(co omówione zostanie w dalszej części dokumentu) bez straty danych!
</p>

<p>
<e>Jeśli w chwili obecnej nie używamy LVM, wtedy przejście na LVM2 nie stosuje
się dla nas.</e> W takim wypadku bezpiecznie możemy zignorować każdą część tego
dokumentu odwołującą się do LVM lub LVM2. Uaktualnienie do Linuksa 2.6
<e>nie</e> wymaga przechowywania danych na partycjach LVM - możemy trzymać dane
tak jak zawsze na normalnych partycjach.
</p>

<p>
Jeśli nie używamy LVM, ale uważamy, że pomysł LVM2 brzmi świetnie, wtedy możemy
przekształcić dyski później, według wskazówek zawartych w dokumencie <uri
link="/doc/pl/lvm2.xml">Instalacja LVM2 w Gentoo</uri>.  Obecnie skoncentrujmy
się tylko na płynnym przejściu na Linuksa 2.6.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Przygotowania</title>
<section>
<title>Aktualizacja systemu</title>
<body>

<p>
Niektóre zmiany wprowadzone wraz z Linuksem 2.6 wymagały również zmian w
podstawowych aplikacjach systemowych. Przed kontynuacją należy upewnić się, że
system jest aktualny. Aby być tego w 100% pewnym należy tam gdzie to możliwe
uaktualnić wszystkie pakiety systemowe oraz world.
</p>

<p>
W szczególności należy się upewnić, że mamy najnowsze stabilne wersje pakietów:
</p>

<ul>
  <li><c>sys-apps/baselayout</c></li>
  <li><c>sys-apps/util-linux</c></li>
  <li>
    <c>sys-kernel/genkernel</c> (tylko w przypadku jeśli chcemy używać
    genkernela)
  </li>
</ul>

<pre caption="Aktualizacja wszytkich pakietów world">
# <i>emerge --sync</i>
# <i>emerge -ua world</i>
</pre>

</body>
</section>
<section>
<title>modutils a module-init-tools</title>
<body>

<p>
<c>sys-apps/modutils</c> jest pakietem, który dostarcza narzędzi takich jak
<c>modprobe</c>, <c>rmmod</c> i <c>insmod</c> dla Linuksa 2.4.
</p>

<p>
Linux 2.6 wprowadza nowy format modułów, a zatem wymaga nowych narzędzi do
obsługi tych modułów. Są one zebrane w pakiecie
<c>sys-apps/module-init-tools</c>.
</p>

<p>
Powinniśmy teraz usunąć modutils i zainstalować module-init-tools:
</p>

<pre caption="Przełączanie z modutils do module-init-tools">
# <i>emerge --unmerge sys-apps/modutils</i>
# <i>emerge module-init-tools</i>
</pre>

<note>
Bez obaw - pomimo, że usunęliśmy modutils, module-init-tools zapewniają zgodność
wstecz z Linuksem 2.4, więc nadal będziemy mogli załadować system Linux 2.4 i
zarządzać modułami dla tego jądra.
</note>

<note>
Z tego powodu jeśli module-init-tools są już zainstalowane wraz z istniejącym
jądrem Linux 2.4, to w takim wypadku nie należy się martwić - system już jest
gotowy do obsługi modułów Linuksa 2.6.
</note>

</body>
</section>
<section>
<title>Instalowanie udev</title>
<body>

<p>
Niczego nie musimy konfigurować. Po prostu, aby zainstalować udev, używamy
polecenia <c>emerge</c>:
</p>

<pre caption="Instalowanie udev">
# <i>emerge -a udev</i>
</pre>

<p>
Następnie, aby dowiedzieć się o różnicach pomiędzy udev a devfs, powinniśmy
przeczytać <uri link="/doc/pl/udev-guide.xml">Praca z udev w Gentoo</uri>.
</p>

</body>
</section>
<section>
<title>Sprawdzanie niezbędnych węzłów urządzeń</title>
<body>

<p>
Podczas uruchamiania komputera, system wymaga niektórych niezbędnych węzłów
urządzeń. Jako, że udev nie jest zawarty w jądrze, więc nie jest on uruchamiany
natychmiastowo. Aby to obejść należy się upewnić, że posiadamy niezbędne węzły
urządzeń na dysku.
</p>

<p>
Pliki "stage" powinny stworzyć wymagane urządzenia podczas wstępnej instalacji.
Jednakże niektórzy użytkownicy powiadomili nas o tym, że nie w tym rzecz.
Skorzystamy z okazji, aby sprawdzić czy odpowiednie pliki urządzeń istnieją,
stworzymy je jeśli nie będą istnieć.
</p>

<p>
Ponieważ istniejący menedżer urządzeń zostanie zamontowany w <path>/dev</path>,
więc nie mamy do niego bezpośredniego dostępu. Zamontujemy więc partycję
głównego systemu plików w innej lokalizacji i stamtąd dostaniemy się do katalogu
<path>/dev</path>.
</p>

<pre caption="Montowanie głównego systemu plików i wyświetlanie urządzeń statycznych">
# <i>mkdir -p /mnt/temp</i>
# <i>mount -o bind / /mnt/temp</i>
# <i>cd /mnt/temp/dev</i>
# <i>ls -l console null</i>
</pre>

<p>
Jeśli powyższe polecenie <e>ls</e> wyświetliło, że <c>console</c> lub
<c>null</c> nie istnieją, wtedy należy je stworzyć tak jak pokazano poniżej.
</p>

<pre caption="Tworzenie brakujących węzłów 'console' i 'null'">
# <i>mknod -m 660 console c 5 1</i>
# <i>mknod -m 660 null c 1 3</i>
</pre>

<p>
Teraz powinniśmy odmontować przed chwilą zamontowaną partycję głównego systemu
plików, nawet jeśli nie musieliśmy tworzyć tych urządzeń:
</p>

<pre caption="Odmontowywanie partycji głównego systemu plików">
# <i>cd</i>
# <i>umount /mnt/temp</i>
# <i>rmdir /mnt/temp</i>
</pre>

</body>
</section>
<section>
<title>Instalowanie narzędzi ALSA</title>
<body>

<p>
ALSA wymaga zainstalowania pewnych pakietów, aby aplikacje mogły używać
interfejsu API ALSA. Te pakiety pozwalają także na sterowanie poziomami
głośności miksera. Instalujemy następujące narzędzia:
</p>

<pre caption="Instalowanie narzędzi i bibliotek ALSA">
# <i>emerge -a alsa-lib alsa-utils alsa-tools alsa-headers alsa-oss</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Instalowanie źródeł Linux 2.6</title>
<section>
<title>Wybór oraz instalacja jądra</title>
<body>

<p>
Po pierwsze należy zainstalować wybrane źródła jądra 2.6. Dwoma jądrami 2.6
wspieranymi przez Gentoo są obecnie <e>gentoo-sources</e> (dla desktopów) oraz
<e>hardened-sources</e> (dla serwerów). Istnieją jeszcze inne, których
szczegółowy opis znajduje się w dokumencie <uri
link="/doc/pl/gentoo-kernel.xml">Omówienie źródeł jądra dostępnych w
Gentoo</uri>.
</p>

<p>
W tym przewodniku używamy jako przykładu <c>gentoo-sources</c>. Instalujemy
wybrane źródła jądra przy pomocy narzędzia <c>emerge</c>:
</p>

<pre caption="Instalowanie gentoo-sources">
# <i>emerge -a gentoo-sources</i>
These are the packages that I would merge, in order:
Calculating dependencies ...done!
[ebuild  NS   ] sys-kernel/gentoo-sources-2.6.10-r4

Do you want me to merge these packages? [Yes/No] <i>y</i>
</pre>

<p>
Podczas wykonywania powyższego polecenia, jeśli <c>emerge</c> zwróci nam, że
chce zainstalować wersję 2.4 gentoo-sources (np.  <c>gentoo-sources-2.4.26</c>),
wtedy znaczy to tyle, że używamy złego profilu.  Aby przełączyć się na profil
oparty na jądrze 2.6 należy posłużyć się <uri
link="/doc/pl/gentoo-upgrading.xml">Przewodnikiem po aktualizacji Gentoo</uri>.
</p>

</body>
</section>
<section>
<title>Aktualizacja dowiązania symbolicznego /usr/src/linux</title>
<body>

<p>
Różne komponenty Gentoo bazują na (lub chcą się skompilować z)
<path>/usr/src/linux</path>, będącym dowiązaniem symbolicznym do źródeł jądra,
którego obecnie używamy.
</p>

<p>
Następnie uaktualnimy dowiązanie <path>/usr/src/linux</path> do miejsca w którym
znajdują się nowo zainstalowane źródła jądra. Kontynuując:
</p>

<pre caption="Aktualizacja dowiązania /usr/src/linux">
# <i>cd /usr/src</i>
# <i>ln -sfn linux-2.6.10-gentoo-r4 linux</i>
</pre>

</body>
</section>
</chapter>

<chapter id="pitfalls">
<title>Znane pułapki podczas przesiadki na Linuksa 2.6</title>
<section>
<body>

<p>
Przed przystąpieniem do konfiguracji jądra, spróbujemy wyszczególnić najczęstsze
błędy podczas przesiadki na Linuksa 2.6, gdyż niektóre z tych punktów będą miały
wpływ na sposób konfiguracji jądra.
</p>

<note>
Nie wszystkie punkty są niezbędne na tym etapie, ale wyszczególnimy je wszystkie
w jednym miejsu, po to abyśmy mogli się odnieść do nich później.
</note>

</body>
</section>
<section>
<title>Nie należy używać polecenia "make oldconfig" z plikiem konfiguracyjnym
'.config' jądra 2.4</title>
<body>

<note>
Jeśli nie wiemy co to znaczy nie należy się tym przejmować, gdyż nie zrobimy
tego błędu, jeśli podążymy poprawnie za pozostałą częścią tego przewodnika.
</note>

<p>
Będziemy musieli odpowiedzieć na wiele pytań, ponieważ istnieje ogromna ilość
zmian. Wielu użytkowników próbujących wykonać polecenie <c>make oldconfig</c> z
plikiem konfiguracyjnym jądra 2.4 kończy na stworzeniu niedziałającego jądra
(np. brak wyjścia na monitorze, brak wejścia z klawiatury, itd.). Proszę
oszczędzić sobie kłopotu i użyć tradycyjnej metody konfiguracji -
<c>menuconfig</c>.
</p>

</body>
</section>
<section>
<title>Nie należy używać ide-scsi w celu nagrania na CD lub DVD</title>
<body>

<p>
W Linuksie 2.4, jedynym sposobem, aby otrzymać dobre rezultaty nagrania CD lub
DVD należało załączyć (raczej brzydką) emulację <c>ide-scsi</c>. Na szczęście
warstwa IDE w Linuksie 2.6 została rozszerzona tak, aby lepiej wspierała
nagrywarki CD/DVD.
</p>

<p>
Aby uaktywnić nagrywanie CD nie trzeba załączać żadnych dodatkowych opcji.
Wystarczy <e>nie</e> załączać <c>ide-scsi</c> jak dawniej.
</p>

</body>
</section>
<section>
<title>PC Speaker jest teraz konfigurowalną opcją</title>
<body>

<p>
Nie otrzymamy żadnych sygnałów dźwiękowych z konsoli (lub żadnej innej
odpowiedzi z PC speakera) jeśli nie załączymy nowej opcji PC speaker
(<c>CONFIG_INPUT_PCSPKR</c>):
</p>

<pre caption="Miejsce opcji PC speaker">
Device Drivers  ---&gt;
 Input device support  ---&gt;
  [*] Misc
   &lt;*&gt;   PC Speaker support
</pre>

<note>
Poprzez "PC speaker", odnosimy się do analogowego głośnika, który brzęczy
podczas startu systemu, nie odnosimy się do standardowych urządzeń dźwiękowych
grających muzykę, itd.
</note>

</body>
</section>
<section>
<title>Nowy sterownik urządzeń blokowych USB Storage sprawia czasem problemy</title>
<body>

<p>
Niedawno nowy sterownik urządzeń USB storage został dodany do jądra. Podczas
pisania tego tekstu, ten sterownik ("ub") jest nadal we wczesnym stadium rozwoju
i niektórzy użytkownicy uważają, że jest nierzetelny. Jeśli mamy problemy z
dostępem do dysku twardego, czytnika kart, aparatu cyfrowego lub dysku flash
podpiętych do USB wtedy powinniśmy powrócić do starszego sterownika typu SCSI:
</p>

<pre caption="Wyłączanie ub">
Device Drivers  ---&gt;
 Block devices  ---&gt;
  &lt; &gt; Low Performance USB Block driver
</pre>

<note>
Starszy sterownik typu SCSI (USB Mass Storage support) jest domyślnie załączony.
Sterownik ten może być znaleziony w "Device Drivers --&gt; USB support", lecz
nie zadziała on pod obecność sterownika ub wkompilowanego w jądro.
</note>

</body>
</section>
<section>
<title>usbdevfs przemianowany na usbfs</title>
<body>

<p>
Jeśli w pliku <path>/etc/fstab</path> mamy wpis, który montuje system plików
urządzenia USB, to należy zmienić w tym wpisie system plików z <e>usbdevfs</e>
na <e>usbfs</e>.
</p>

<note>
Ostatnie jądra 2.4 pozwalają na używanie "usbfs" oraz "usbdevfs", więc
zmieniając system plików będziemy zgodni z poprzednimi wersjami.
</note>

</body>
</section>
<section>
<title>Nie należy zmieniać poziomu uprzejmości (ang. renice) środowiska
X</title> <body>

<p>
Użytkownicy desktopów 2.4 bardzo często przerabiają system tak, aby środowisko X
było uruchamiane z wyższym priorytetem, gdyż w niektórych przypadkach prowadzi
to do poprawy wydajności desktopu.
</p>

<p>
W 2.6 scheduler został gruntownie przebudowany co zmieniło jego zachowanie.
Jeśli nadal chcielibyśmy uruchamiać środowisko X na wyższym priorytecie, wtedy
zarządca wykona to co do niego należy (uruchomi <e>display server</e> na bardzo
wysokim priorytecie), a my zauważymy konsekwencje w postaci jąkających się i
wolno ładujących się aplikacji, ponieważ procesor będzie poświęcał za dużo mocy
obliczeniowej tylko i wyłącznie na X-y.
</p>

<p>
W Linuksie 2.6, aby uzyskać dobrą interaktywność nie trzeba już zmieniać
poziomu "uprzejmości" aplikacji desktopowych. Proszę usunąć przeróbki z
"niceness"!
</p>

</body>
</section>
<section>
<title>Plik konfiguracyjny X11 powinien używać /dev/input/mice dla myszy PS/2 i USB</title>
<body>

<p>
Jedną z domyślnych zmian, którą wprowadza udev jest inna struktura węzłów
urządzeń myszy. Poprzednio używaliśmy <path>/dev/psaux</path> i
<path>/dev/mouse</path>. Teraz będziemy mieli węzły takie jak
<path>/dev/input/mouse0</path>, <path>/dev/input/mouse1</path>, i zbiorczy węzeł
<path>/dev/input/mice</path>, który łączy ruchy wszystkich myszy.
</p>

<p>
Ponieważ stare konfiguracje X-ów typowo odnoszą się do <path>/dev/mouse</path>
lub <path>/dev/psaux</path>, podczas uruchamiania X11 może zostać wyświetlony
błąd podobny do poniższego:
</p>

<pre caption="Częsty błąd podczas uruchamiania po raz pierwszy X-ów na systemie
udev"> 
(EE) xf86OpenSerial: Cannot open device /dev/mouse
        No such file or directory.
(EE) Mouse0: cannot open input device
(EE) PreInit failed for input device "Mouse0"
No core pointer
</pre>

<p>
Aby to naprawić należy otworzyć plik konfiguracyjny X11 w ulubionym edytorze i
zaktualizować wpis dla myszki <e>InputDevice</e>, tak aby używać urządzenia
<path>/dev/input/mice</path>. Przykład znajduje się poniżej:
</p>

<pre caption="Otwieranie pliku konfiguracyjnego X11">
# <i>nano -w /etc/X11/xorg.conf</i>
</pre>

<note>
Jeśli nadal używamy XFree86, naszym plikiem konfiguracyjnym będzie
<path>/etc/X11/XF86Config</path>.
</note>

<pre caption="Przykładowa część InputDevice myszy">
Section "InputDevice"
        Identifier  "Mouse0"
        Driver      "mouse"
        Option      "Protocol" "auto"
        Option      "Device" "/dev/input/mice"
EndSection
</pre>

<note>
Jeśli używamy myszy podłączonej do portu szeregowego, to nazwą nowego urządzenia
będzie <path>/dev/tts/0</path> zamiast <path>/dev/ttyS0</path>.
</note>

</body>
</section>
<section>
<title>Nowe sterowniki Serial-ATA (SATA) nazywają inaczej urządzenia</title>
<body>

<p>
Jeśli pod Linuksem 2.4 używaliśmy oryginalnych sterowników Serial ATA, wtedy
prawdopododnie zauważyliśmy, że urządzenia SATA nazywały się chociażby
<path>/dev/hde</path>.
</p>

<p>
Linux 2.6 wprowadza nowe sterowniki SATA (libata), które bazują na podsystemie
SCSI. Jako, że sterowniki są oparte na SCSI, więc dyski SATA pojawią się teraz
jako urządzenia SCSI. Pierwszy dysk SATA zostanie nazwany <c>/dev/sda</c>.
Należy więc uaktualnić plik <path>/etc/fstab</path> oraz pamiętać o tym 
podczas wybierania parametrów ładowania jądra root i real_root.
</p>

<note>
libata został zawarty w ostatnich wersjach Linuksa 2.4, więc nowe nazewnictwo
może być już znane.
</note>

</body>
</section>
<section>
<title>bootsplash nie jest już rozwijany</title>
<body>

<p>
Jeśli używaliśmy jądra <c>gentoo-sources-2.4</c>, mogliśmy korzystać z zespołu
funkcji <e>bootsplash</e> w celu otrzymania kolorowego bufora ramki konsoli.
</p>

<p>
Wygląda na to, że deweloper bootsplasha stracił zainteresowanie tym projektem,
tłumacząc się problemami z projektowaniem. Jednakże deweloper Gentoo <e>Michał
Januszewski</e> stworzył następcę bootsplasha, <c>gensplash</c>, który jest
zawarty w jądrze gentoo-sources-2.6. W celu zapoznania się z instalacją oraz
konfiguracją gensplasha należy posłużyć się dokumentem <uri
link="http://dev.gentoo.org/~spock/projects/gensplash/archive/gensplash-in-5-
easy-steps.txt">Gensplash in 5 easy steps</uri>.
</p>

</body>
</section>
<section>
<title>Sterowniki I2C są zawarte w jądrze</title>
<body>

<p>
Jeśli używamy <c>lm-sensors</c>, aby monitorować temperatury systemu i poziom
baterii, to poprzednio, w celu dostarczenia wsparcia sprzętowego, musieliśmy
zainstalować pakiet <c>i2c</c>.
</p>

<p>
Sterowniki sprzętu I2C są zawarte w jądrze Linux 2.6, więc żaden zewnętrzny
pakiet i2c nie jest wymagany. Należy pamiętać o wkompilowaniu w jądro
specyficznych urządzeń I2C. Wtedy będziemy mogli korzystać z <c>lm-sensors</c>
jak zwykle.
</p>

</body>
</section>
</chapter>

<chapter id="conf">
<title>Konfiguracja, kompilacja i instalacja jądra</title>
<section>
<body>

<p>
Tak jak w Linuksie 2.4, z kompilacją jądra możemy sobie poradzić na 2 sposoby.
</p>

<ol>
  <li>
    Domyślną metodą jest ręczna konfiguracja jądra. Może to brzmieć
    zniechęcająco, ale to jest preferowana metoda pod warunkiem, że znamy nasz
    system. Jeśli chcemy skonfigurować jądro ręcznie, to należy przejść do <uri
    link="#manual">następego rozdziału</uri>.
  </li>
  <li>
    Alternatywnie można użyć narzędzia <c>genkernel</c>, aby on automatycznie
    skonfigurował, skompilował i zainstalował jądro. Jeśli chcemy użyć
    <c>genkernela</c>, wtedy należy opuścić następny rozdział i przejść do
    rozdziału <uri link="#genkernel">Używanie genkernela</uri>.
  </li>
</ol>

</body>
</section>
</chapter>

<chapter id="manual">
<title>Domyślnie: Ręczna konfiguracja</title>
<section>
<title>Konfiguracja jądra</title>
<body>

<p>
Zajmiemy się teraz konfiguracją jądra. Otwieramy menuconfig:
</p>

<pre caption="Wywoływanie menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Prawdopodobnie zapoznaliśmy się już z menuconfig podczas konfiguracji jąder 2.4.
Na szczęście wizerunek nie zmienił się prawie wcale, lecz można zaobserwować
znacznie lepszą organizację opcji jądra oraz <e>dużo</e> nowych opcji, których
nie było w 2.4.
</p>

<p>
Należy się upewnić, że mamy załączone następujące opcje jądra:
</p>

<pre caption="Wymagana opcje jądra">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)

<comment>(wymagane dla wsparcia udev):</comment>
General setup  ---&gt;
 [*] Support for hot-pluggable devices

<comment>(wymagane dla wsparcia ALSA):</comment>
Device Drivers  ---&gt;
 Sound  ---&gt;
  &lt;*&gt; Sound card support
  Advanced Linux Sound Architecture  ---&gt;
   &lt;M&gt; Advanced Linux Sound Architecture
   &lt;M&gt; Sequencer support
   &lt;M&gt; OSS Mixer API
   [*] OSS Sequencer API
<comment>   (nie należy zapomnieć o wyborze karty dźwiękowej z
podmenu!)</comment>

<comment>(wymagane jeśli używamy LVM do zarządzania dyskami):</comment>
Device Drivers  ---&gt;
 Multi-device support (RAID and LVM)  ---&gt;
  [*] Multiple devices driver support (RAID and LVM)
   &lt;*&gt;   Device mapper support
</pre>

<warn>
Poprzednio mogliśmy załączać wsparcie dla systemu plików <path>/dev</path>
(teraz oznaczone jako OBSOLETE). Nie należy załączać wsparcia devfs.
Zainstalowaliśmy udev, którego będziemy używać zamiast devfs.
</warn>

<p>
Należy także pamiętać o włączeniu wsparcia dla systemów plików, których
używamy i dla sprzętu obecnego w komputerze. Jeśli chcemy korzystać z DMA,
należy się upewnić, że załączyliśmy wsparcie dla kontrolera IDE naszej płyty
głównej. Po więcej informacji należy spojrzeć do rozdziału <uri
link="/doc/pl/handbook/handbook-x86.xml?part=1&amp;chap=7"> Konfiguracja
jądra</uri> z <uri link="/doc/pl/handbook/index.xml">Podręcznika Gentoo</uri>.
</p>

</body>
</section>
<section>
<title>Kompilacja jądra</title>
<body>

<p>
Po skonfigurowaniu przystępujemy do kompilacji jądra:
</p>

<pre caption="Kompilacja źródeł jądra">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<note>
Podczas kompilacji Linuksa 2.4 powinno się jeszcze wykonać polecenie <c>make
dep</c> czego z Linuksem 2.6 już nie trzeba robić.
</note>

<p>
Czekamy na zakończenie kompilacji jądra (obserwując bardziej czytelne wyjście
kompilacji).
</p>

</body>
</section>
<section>
<title>Instalowanie jądra</title>
<body>

<p>
Następnym krokiem jest zamontowanie partycji <path>/boot</path> i skopiowanie
obrazu jądra. Konfigurację bootloadera musimy zaktualizować ręcznie.
</p>

<pre caption="Instalowanie jądra">
# <i>mount /boot</i>
# <i>cp arch/i386/boot/bzImage /boot/bzImage-2.6.10-gentoo-r4</i>
# <i>cp System.map /boot/System.map-2.6.10-gentoo-r4</i>
</pre>

<p>
Należy zauważyć, że powyższe polecenia są tylko przykładowe, powinno się wykonać
zwykłe polecenia aktualizacji jądra poprzez polecenia z <uri
link="/doc/pl/handbook/index.xml">Podręcznika Gentoo</uri> (rozdział <uri
link="/doc/pl/handbook/handbook-x86.xml?part=1&amp;chap=7"> Konfiguracja
jądra</uri>).
</p>

<p>
Podczas aktualizacji konfiguracji bootloadera nie należy usuwać starego wpisu
wskazującego na jądro 2.4. Tym sposobem łatwo będziemy mogli przełączać się
pomiędzy nimi dwoma jeśli coś nie zadziała.
</p>

<p>
Następnie przechodzimy do rozdziału <uri link="#modules">Konfiguracja
modułów</uri>.
</p>

</body>
</section>
</chapter>

<chapter id="genkernel">
<title>Alternatywnie: Używanie genkernela</title>
<section>
<body>

<p>
Jeśli preferujemy użycie skryptu genkernel zamiast ręcznej kompilacji jądra,
zapewne uszczęśliwi nas fakt, że proces tworzenia jądra 2.6 przez skrypt
genkernel jest bardzo podobny do procesu tworzenia jądra 2.4.
</p>

<p>
Wywołujemy genkernela jak pokazano poniżej:
</p>

<pre caption="Wywoływanie genkernela z niektórymi popularnymi argumentami">
# <i>genkernel --udev --menuconfig --bootloader=grub all</i>
</pre>

<p>
W powyższym przykładzie korzystamy z możliwości otwarcia menuconfig, co pozwoli
nam dostosować konfigurację jądra (jeśli sobie tego życzymy) i umożliwi, po
kompilacji, uaktualnienie konfiguracji bootloadera Grub.
</p>

<p>
Powinniśmy wybrać odpowiadające nam argumenty genkernela, ale nie należy
zapomnieć o argumencie <c>--udev</c>! Po dodatkowe informacje należy spojrzeć do
<uri link="/doc/pl/genkernel.xml">Konfiguracji jądra genkernel</uri> oraz
rozdziału <uri link="/doc/pl/handbook/handbook-x86.xml?part=1&amp;chap=7">
Konfiguracja jądra</uri> z <uri link="/doc/pl/handbook/index.xml">Podręcznika
Gentoo</uri>.
</p>

<p>
Jeśli wybierzemy ręczne uaktualnienie bootloadera, wtedy musimy pamiętać o
dodaniu parametru jądra <c>udev</c>. Przykładowa część pliku konfiguracyjnego
<e>Gruba</e> jest pokazana poniżej, ale należy tak dobrać parametr
<e>real_root</e>, aby pasował do naszego systemu.
</p>

<pre caption="Przykładowy plik konfiguracyjny Gruba dla genkernela + udev">
title=Gentoo Linux (2.6 kernel)
root (hd0,0)
kernel /kernel-2.6.10-gentoo-r4 <i>udev</i> root=/dev/ram0 init=/linuxrc ramdisk=8192 real_root=/dev/hda3
initrd /initrd-2.6.10-gentoo-r4
</pre>

</body>
</section>
</chapter>

<chapter id="modules">
<title>Konfiguracja modułów</title>
<section>
<title>Instalowanie zewnętrznych modułów</title>
<body>

<p>
Wielu użytkowników dodatkowo jest uzależniona od modułów jądra, które są
skompilowane na zewnątrz drzewa jądra. Typowymi przykładami są binarne
sterowniki graficzne ATI oraz Nvidia. Teraz należy zainstalować te moduły,
zostaną ona skompilowane ze źródłami 2.6 znalezionymi w
<path>/usr/src/linux</path>. Dla wszystkich zewnętrznych modułów używanych wraz
z jądrem 2.4 zwykle wystarcza <c>emerge nazwa_pakietu</c>.
</p>

<p>
Po więcej informacji sięgamy do rozdziału <uri
link="/doc/pl/handbook/handbook-x86.xml?part=1&amp;chap=7"> Konfiguracja
jądra</uri> z <uri link="/doc/pl/handbook/index.xml">Podręcznika Gentoo</uri>.
</p>

</body>
</section>
<section>
<title>Automatyczne ładowanie modułów</title>
<body>

<p>
Niektóre komponenty możemy mieć skompilowane jako moduły (w przeciwieństwie do
tych wkompilowanych w jądro) i chcielibyśmy, tak jak w 2.4, je automatycznie
ładować podczas startu systemu. Jeśli zainstalowaliśmy zewnętrzne moduły z
drzewa Portage (jak opisane powyżej) prawdopododnie również będziemy chcieli je
ładować automatycznie podczas startu systemu.
</p>

<p>
Podobnie jak w przypadku 2.4 otwieramy plik
<path>/etc/modules.autoload.d/kernel-2.6</path> w ulubionym edytorze i wpisujemy
nazwy modułów, które mają się automatycznie ładować.
</p>

<pre caption="Otwieranie listy automatycznego ładowania modułów w nano">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="Przykładowa lista automatycznego ładowania modułów 3c59x i nvidia">
# /etc/modules.autoload.d/kernel-2.6:  kernel modules to load when system
# boots.
#
# Note that this file is for 2.6 kernels.
#
# Add the names of modules that you'd like to load when the system
# starts into this file, one per line.  Comments begin with # and
# are ignored.  Read man modules.autoload for additional details.

3c59x
nvidia
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Przesiadka z LVM na LVM2</title>
<section>
<title>Aktualizacja do narzędzi LVM2</title>
<body>

<note>
Jeśli nie używamy LVM do zarządzania pamięciową dyskową, wtedy możemy
bezpiecznie opuścić ten fragment i przejść do następnego rozdziału.
</note>

<p>
Na szczęście aktualizacja z narzędzi użyktownika LVM1 do wersji LVM2 jest bardzo
prosta:
</p>

<pre caption="Aktualizacja narzędzi użytkownika z LVM1 do LVM2">
# <i>emerge --unmerge lvm-user</i>
# <i>emerge lvm2</i>
</pre>

<note>
Narzędzia LVM2 są w pełni zgodne wstecz z LVM1. Dane na dysku pozostaną więc
nietknięte. W ten sposób nie łamiemy żadnej wstecznej zgodności, nadal będziemy
mogli uruchamiać jądro 2.4 jak zwykle.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Uruchamianie systemu Linux 2.6</title>
<section>
<body>

<p>
Nadszedł czas, aby uruchomić Linuksa 2.6. Zamykamy wszystkie aplikacje i
uruchamiamy ponownie:
</p>

<pre caption="Uruchamianie ponowne">
# <i>umount /boot</i>
# <i>reboot</i>
</pre>

<p>
Podczas ładowania systemu, jeśli prawidłowo podążaliśmy według instrukcji tego
dokumentu, w bootlaoderze powinniśmy otrzymać do wyboru opcję uruchomienia
systemu Linux 2.4 lub Linux 2.6. Wybieramy Linux 2.6.
</p>

<p>
Po uruchomieniu systemu należy sprawdzić czy wszystko działa. Jeśli popełniliśmy
błąd podczas konfiguracji jądra, nie należy się tym przejmować można wrócić do
rozdziału <uri link="#conf">Konfiguracja, kompilacja i instalacja jądra</uri>,
wykonać zmianę, ponownie skompilować i zainstalować jądro, po czym uruchamić
ponownie system!
</p>

</body>
</section>
<section>
<title>Konfiguracja i regulacja głośności ALSA</title>
<body>

<p>
Zakończymy teraz konfigurację ALSA i zwiększymy głośność kanałów audio.  Pakiety
ALSA dostarczają użytecznego narzędzia, który sprawia, że proces ten jest
całkiem prosty:
</p>

<pre caption="Wywoływanie narzędzia automatycznej konfiguracji ALSA">
# <i>alsaconf</i>
</pre>

<p>
Cały proces jest bardzo łatwy: pozwalamy na automatyczną aktualizację pliku
<e>/etc/modules.d/alsa</e> i na ponowne załadowanie modułów ALSA. alsaconf wtedy
zakończy działanie, jednakże jeśli posiadamy kilka urzadzeń dźwiękowych
zainstalowanych w systemie, należy uruchmić alsaconf kilka razy.
</p>

<p>
Następnie dodajemy <c>alsasound</c> do poziomu uruchamiania o nazwie 'boot', po
to, aby poziomy głośności zostały zapamiętane przy wyłączaniu komputera i
zostały odzyskane podczas ładowania systemu:
</p>

<pre caption="Dodawanie alsasound do poziomu uruchamiania o nazwie 'boot'">
# <i>rc-update add alsasound boot</i>
</pre>

<note>
Narzędzie <c>alsaconf</c> wybiera dla naszych urządzeń wstępne poziomy dźwięku.
Jeśli będą one niepoprawne, można je w każdej chwili zmienić za pomocą
narzędzia <c>alsamixer</c>.
</note>

</body>
</section>
<section>
<title>Jakieś nagłe problemy?</title>
<body>

<p>
Na tym etapie powinniśmy wrócić do rozdziału <uri link="#pitfalls">Znane pułapki
podczas przesiadki na Linuksa 2.6</uri>, która może być użyteczna jeśli wystapią
jakiekolwiek nagłe problemy.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Pliki nagłówka i NPTL</title>
<section>
<body>

<p>
Udało się uruchomić Linuksa 2.6 i miejmy nadzieję, że wszystkie nasze problemy
są już rozwiązane. Teraz zaktualizujemy pliki nagłówków jądra Linuksa i ponownie
zemergujemy glibc, po to aby aplikacje z obszaru użytkownika skorzystały z
nowych funkcji jądra 2.6.
</p>

<pre caption="Aktualizacja pakietu linux-headers">
# <i>emerge -u linux-headers</i>
</pre>

<p>
Po aktualizacji pakietu z nagłówkami, powinniśmy ponownie zemergować glibc.
Możemy być zainteresowani nową funkcją - NPTL. NPTL jest nowym modelem wątkowym
(ang. threading model) obecnym w Linuksie 2.6, który charakteryzuje się znacznie
szybszymi czasami tworzenia i niszczenia wątków. Nie zrobi to różnicy na
większości systemów, ale można to załączyć podczas przesiadki! Aby załączyć NPTL
edytujemy <path>/etc/make.conf</path>, dodając <e>nptl</e> do zmiennych USE.
</p>

<warn>
Jeśli załączymy flagę "nptlonly", należy być świadomym, że nie będziemy już
mogli załadować jądra 2.4.
</warn>

<p>
Teraz emergujemy ponownie glibc (wykonujemy to nawet jeśli nie załączyliśmy
NPTL).
</p>

<pre caption="Ponowna instalacja glibc z nowymi nagłówkami jądra">
# <i>emerge -a glibc</i>
</pre>

<p>
Jeśli załączyliśmy NPTL, to istniejące pliki binarne nie będą go używać dopóki
nie skompilujemy ich ponownie. Jednakże od tej pory jakiekolwiek skompilowane
pliki binarne <e>będą</e> używać NPTL. Jeśli chcemy ponownie skompilować
wszystkie pakiety to wykonujemy:
</p>

<pre caption="Ponowna kompilacja wszytkich pakietów w systemie">
# <i>emerge -e world</i>
</pre>

<p>
Alternatywnie możemy pozwolić naszemu systemowi "naturalnie" przekonwertować się
na NPTL, po prostu podczas aktualizacji do nowszych wersji pakietów.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Uwagi końcowe</title>
<section>
<title>Problemy?</title>
<body>

<p>
Wykonaliśmy ogromną pracę, aby przesiąść się na Linuksa 2.6, czasem jest to
nieuniknione, że rzeczy które przedtem sprawnie działały, dłużej nie będą
funkcjonować tak jak oczekujemy.
</p>

<p>
Jeśli mamy jakiekolwiek problemy z jądrem 2.6, a problem ten nie występuje z
Linuksem 2.4, wtedy proszę wysłać błąd na <uri
link="http://bugs.gentoo.org">Bugzillę</uri>. Zbadamy sprawę i jeśli dojdziemy
do wniosku, że problemem jest jądro, wtedy możemy wysłać prośbę o zraportowanie
tego błędu do centralnej Bugzilli jądra.
</p>

</body>
</section>
<section>
<title>Zakończenie</title>
<body>

<p>
Mamy nadzieję, że migracja została zakończone pomyślnie i że jądro 2.6 działa
bez problemów.
</p>

<p>
Chcielibyśmy złożyć podziękowania wielu użytkownikom, którzy efektywnie
'testowali' ten dokument, gdy był we wczesnym stadium rozwoju i dostarczyli
opinii o tym jak przebiegł proces przesiadki. Przepraszamy za brak odpowiedzi na
niektóre e-maile (a było ich naprawdę wiele). Wszystkie zostały przeczytane co
pozwoliło na odpowiednie udoskonalenie tego dokumentu. A teraz delektujmy się
naszym systemem wzbogaconym o jądro 2.6. :)
</p>

</body>
</section>
<section>
<title>Usuwanie Linuksa 2.4 z systemu</title>
<body>

<p>
Pracując przez jakiś czas na 2.6, możemy zdecydować się na usunięcie Linuksa
2.4. Odpowiednie kroki znajdują się poniżej. <e>Należy kierować się tymi
wskazówkami tylko w przypadku gdy jesteśmy pewni, że nie chcemy lub nie
potrzebujemy używać ponownie jądra 2.4!</e>
</p>

<p>
Kod źródłowy jądra 2.4 usuwamy za pomocą narzędzia emerge. Przykładowo
zakładając, że używamy wersji 2.4 jąder vanilla-sources oraz gentoo-sources
możemy posłużyć sie następującym poleceniem w celu ich usunięcia oraz
pozostawienia wersji 2.6 nietkniętej:
</p>

<pre caption="Przykład: Usuwanie źródeł Linuksa 2.4">
# <i>emerge --unmerge =vanilla-sources-2.4.* =gentoo-sources-2.4.*</i>
</pre>

<p>
Portage nie wyczyści całkowcie źrodeł jądra 2.4, ponieważ podczas kompilacji
tworzone są niektóre pliki tymczasowe. Bezpiecznie jest usunąć te pozostałości
ręcznie następującym poleceniem:
</p>

<pre caption="Usuwanie pozostałych plików tymczasowych">
# <i>rm -rf /usr/src/linux-2.4.*</i>
</pre>

<p>
Możemy dodatkowo usunąć moduły i pliki informacyjne odnoszące sie do starej
instalacji jądra 2.4, gdyż już nie są potrzebne.
</p>

<pre caption="Usuwanie poprzednio zainstalowanych modułów 2.4">
# <i>rm -rf /lib/modules/2.4.*</i>
</pre>

<p>
Pliki binarne jądra 2.4 używane do ładowania systemu również mogą być usunięte.
Należy zamontować partycję <c>/boot</c> i usunąć te obrazy.  Powinniśmy również
uaktualnić konfigurację bootloadera, po to aby więcej nie odwoływał się do
usuniętych obrazów jądra.
</p>

<p>
Niektórzy użytkownicy Linuksa 2.4 uprzednio zainstalowali pakiet
<c>alsa-driver</c>, aby korzystać z nowych możliwości dźwiękowych zawartych w
Linuksie 2.6. Jeśli jesteśmy jednym z nich i postąpiliśmy według wcześniejszej
wskazówki, żeby wkompilować ALSA w źródła jądra 2.6 (w przeciwieństwie do
pakietu <c>alsa-driver</c>), wtedy możemy bezpiecznie usunąć ten pakiet, aby
zapobiec konfliktom.
</p>

<p>
Dodatkowo użytkownicy <c>lm-sensors</c>, którzy poprzednio używali pakietu
<c>i2c</c>. Jak wcześniej zostało wspomniane sterowniki I2C są już zawarte w
jądrze, więc ten pakiet może być usunięty w celu zapobieżenia konfliktom w
przyszłości.
</p>

<p>
Demon zarządzający devfs, <c>devfsd</c>, należy również usunąć, gdyż teraz do
zarządzania urządzeniami używamy <c>udev</c>.
</p>

<pre caption="Usuwanie alsa-driver, i2c i devfsd">
# <i>emerge --unmerge alsa-driver i2c devfsd</i>
</pre>

<p>
Jeśli używamy LVM1, to możemy zechcieć przekształcić nasze dane na format LVM2 w
celu skorzystania z funkji jakie niesie ze sobą LVM2. Jednkaże ta operacja
uniemożliwi dostęp do danych znajdujących się na partycji LVM z jądra 2.4. Jeśli
nadal chcemy przekszałcić partycję (to jest zupełnie dobrowolne!), wtedy należy
przestudiować stronę man narzędzia <c>vgconvert</c>, aby się dowiedzieć jak taką
operację przeprowadzić. Przykład jest podany poniżej, gdzie <c>main</c> jest
nazwą woluminu grupy.
</p>

<pre caption="Przekształcenie woluminu LVM1 na format LVM2">
# <i>vgconvert -M2 main</i>
</pre>

</body>
</section>
</chapter>
</guide>
