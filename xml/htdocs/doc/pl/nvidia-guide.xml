<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/nvidia-guide.xml,v 1.36 2009/02/15 07:31:00 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/nvidia-guide.xml" lang="pl">
<title>Konfiguracja kart nVidia w Gentoo</title>

<author title="Autor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Autor">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="Redaktor">
  <mail link="curtis119@gentoo.org">M Curtis Napier</mail>
</author>
<author>
  <mail link="wolf31o2@gentoo.org">Chris Gianelloni</mail>
</author>
<author title="Tłumacz">
   Robert Sebastian Gerus
</author>
<author title="Tłumacz">
  Piotr Chmyłkowski
</author>
<author title="Tłumacz">
  <mail link="cla@gentoo.org">Dawid Węgliński</mail>
</author>

<abstract>
Wielu użytkowników Gentoo posiada karty nVidia. nVidia wypuszcza specjalne
sterowniki dla Linuksa, które poważnie zwiększają wydajność  kart tej firmy. Ten
tekst pokazuje jak zainstalować i skonfigurować te sterowniki.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<license/>

<version>1.38</version>
<date>2009-01-26</date>

<chapter>
<title>Wprowadzenie</title>
<section>
<body>

<p>
Dostępne w drzewie Portage sterowniki nVidia, wydane przez nVidia są budowane
niezależnie od sterowników dostarczanych z jądrem Linux. Zawierają zamknięty
kod, który poprawnie działa z kartami. Są dwa rodzaje sterowników: moduły jądra
lub te z xorg-x11. Obie części są dostępne w jednym pakiecie. Ponieważ nVidia
pakowała swoje sterowniki, konieczne będzie dokonanie pewnego wyboru przed
instalacją.
</p>

<p>
Pakiet <c>nvidia-driver</c> zawiera najnowsze sterowniki do <e>wszystkich</e>
kart firmy nVidia. W zależności od tego jak bardzo stara jest nasza karta,
możemy wybierać spośród kilku dostępnych wersji. Do wykrycia karty i
zainstalowania odpowiednich sterowników pakiet ten używa pliku eclass.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Zgodność sterowników</title>
<section>
<title>Która wersja?</title>
<body>

<p>
Pakiet <c>nvidia-drivers</c> wspiera cały wachlarz dostępnych kart spod znaku
nVidia. Zależnie od posiadanej karty, dostępne są różne wersje.
</p>

<p>
Nowsze karty, takie jak GeForce w serii 9, 8, 7 i 6, korzystają z najnowszych
sterowników.
</p>

<p>
Karty GeForce FX5 powinny działać na sterownikach serii 173.x takich jak na
przykład <c>nvidia-drivers-173.14.15</c>. Dlatego dla tych kart należy
zamaskować <c>>=x11-drivers/nvidia-drivers-174.00</c> w pliku
<path>/etc/portage/package.mask</path>. Zapobiegnie to instalacji nowszych i
niekompatybilnych z kartą wersji sterowników.
</p>

<p>
Starsze karty jak serie GeForce 3 lub GeForce 4 wymagają sterowników 96.x. Dla
tych kart należy zamaskować <c>>=x11-drivers/nvidia-drivers-1.0.97.00</c> w
pliku <path>/etc/portage/package.mask</path>.
</p>

<p>
Stare karty bazowane na NV2x (takie jak TNT, TNT2, GeForce oraz GeForce 2)
wymagają starszego sterownika 71.x (takiego jak <c>nvidia-drivers-71.86.01</c>).
Dla tych kart należy zamaskować <c>>=nvidia-drivers-1.0.8700</c> w pliku
<path>/etc/portage/package.mask</path>.
</p>

<p>
Kompatybilność sterownika z używaną kartą można sprawdzić w pliku README dla
<uri link="http://www.nvidia.com/object/unix.html">konkretnego wydania</uri> i
architektury sterowników.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja karty</title>
<section>
<title>Konfiguracja jądra</title>
<body>

<p>
Tak jak wspominaliśmy wcześniej sterowniki nVidii zawierają moduły jądra, które
musimy włączyć do jądra. By tego dokonać jądro musi obsługiwać ładowanie
modułów. Jeśli użyto <c>genkernel all</c>, aby skonfigurować jądro wszystko
powinno być odpowiednio ustawione. Jeśli nie, należy sprawdzić dwa razy
konfigurację jądra i upewnić się, że mamy to włączone:
</p>

<pre caption="Włączanie obsługi ładowania modułów jądra">
Loadable module support ---&gt;
  [*] Enable loadable module support
</pre>

<p>
Musimy także włączyć obsługę <e>Memory Type Range Register</e>:
</p>

<pre caption="Włączanie MTRR">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

<p>
Opcjonalnie, jeśli posiadana karta jest AGP, można włączyć <c>agpgart</c> w
jądrze (wkompilowane na stałe lub jako moduł). Możliwe jest też użycie
implementacji <c>agpgart</c>, nazwanej <c>NvAGP</c>. Na niektórych systemach
działa on lepiej niż ten wbudowany w kernel, na innych gorzej. Należy samemu się
przekonać i dokonać wyboru. W razie wszelkich niepewności najbezpieczniej jest
użyć wersji wbudowanej w kernel.
</p>

<pre caption="Włączanie agpgart">
Device Drivers --->
Graphics Support --->
-*- /dev/agpgart (AGP Support) --->
</pre>

<note>
Na systemach z architekturą amd64, IOMMU kontroluje ustawienia agpgart.
</note>

</body>
</section>
<section>
<title>Uwagi do architektur</title>
<body>
<impo>
Dla procesorów x86 oraz AMD64, sterownik dostarczany przez jądro konfliktuje z
binarnym sterownikiem dostarczanym przez producenta. Podczas kompilacji dla tych
architektur należy całkowicie usunąć wsparcie dla sterowników dostarczanych
przez jądro, tak jak to pokazano poniżej:
</impo>

<pre caption="Usunięcie sterownika z jądra">
Device Drivers --->
Graphics Support --->
&lt;*&gt; Support for frame buffer devices --->
&lt; &gt;   nVidia Framebuffer Support
&lt; &gt;   nVidia Riva support
</pre>

<p>
Alternawym buforem ramki jest <c>uvesafb</c>, <uri
link="http://dev.gentoo.org/~spock/projects/uvesafb/">zaawansowany bufor
ramki</uri>. Można wkompilować go na stałe w jądro lub dodać jako moduł. Oto
przykład dla pierwszej z tych opcji:
</p>

<pre caption="Włączanie obsługi uvesafb">
Device Drivers --->
Graphics Support --->
&lt;*&gt; Support for frame buffer devices --->
&lt;*&gt;   Userspace VESA VGA graphics support
</pre>

<p>
Możemy również wypróbować <c>VESA</c>:
</p>

<pre caption="Włączanie VESA">
Device Drivers --->
Graphics Support --->
&lt;*&gt; Support for frame buffer devices --->
[*]   VESA VGA graphics support
</pre>

<p>
Więcej informacji można znaleźć w odpowiednim dla wybranego bufora ramki pliku w
katalogu <path>/usr/src/linux/Documentation/fb/</path>.
</p>

</body>
</section>
<section>
<title>Kontynuowanie konfiguracji jądra</title>
<body>

<p>
Ebuild <c>nvidia-drivers</c> automatycznie rozpoznają wersję używanego kernela
w oparciu o dowiązanie symboliczne <path>/usr/src/linux/</path>. Z tego powodu
należy się upewnić, że dowiązanie to wskazuje na prawidłowe źródła jądra.
Szczegóły dotyczące konfiguracji jądra znajdują się w dokumencie <uri
link="/doc/pl/handbook">Podręcznik Gentoo</uri>.
</p>

<p>
Jeśli <c>eselect</c> nie jest zainstalowany, należy tego dokonać poprzez
polecenie emerge. W przypadku gdy w użyciu jest <c>gentoo-sources-2.6.18-r4</c>,
lista konfiguracji może wyglądać tak:
</p>

<pre caption="Sprawdzanie dowiązania do źródeł jądra">
# <i>eselect kernel list</i>
Available kernel symlinks targets:
 [1]   linux-2.6.18-gentoo-r4 *
 [2]   linux-2.6.20-gentoo-r7
 [3]   linux-2.6.20-gentoo-r8
<comment>(Należy się upewnić czy prawidłowa wersja kernela jest oznaczona przez gwiazdkę)</comment>
</pre>

<p>
W powyższym przykładzie widać, że gwiazdką (<b>*</b>) jest oznaczona wersja
<c>linux-2.6.18-gentoo-r4</c>, co wskazuje na cel dowiązania symbolicznego
/usr/src/linux.
</p>

<p>
Jeśli dowiązanie nie jest prawidłowe to należy je poprawić poprzez podanie
numeru pożądanej wersji źródeł kernela.
</p>

<pre caption="Tworzenie lub uaktualnianie dowiązania symbolicznego /usr/src/linux">
<comment>(Należy podać numer odpowiedniej wersji kernela)</comment>
# <i>eselect kernel set 1</i>
</pre>

</body>
</section>
<section>
<title>Instalacja sterowników</title>
<body>

<p>
Teraz jest odpowiednia chwila na instalację sterowników.
</p>

<pre caption="Instalacja sterowników nVidii">
# <i>emerge nvidia-drivers</i>
</pre>

<note>
Nowsze sterowniki mogą być zainstalowane z flagą USE <c>gtk</c>. Zainstaluje to
<c>media-video/nvidia-settings</c> - poręczne narzędzie do monitorowania i
konfigurowania kilkunastu funkcji związanych z używaną kartą.
</note>

<impo>
Za każdym razem gdy <uri link="/doc/pl/kernel-upgrade.xml">kompilujemy</uri>
jądro musimy ponownie uruchomić polecenie <c>emerge nvidia-drivers</c> w celu
ponownego zainstalowania modułów. Lepszą opcją aby trzymać moduły instalowane
przez zewnętrzne pakiety (takie jak <c>nvidia-drivers</c>), jest zainstalowanie
<c>sys-kernel/module-rebuild</c>. Jeśli pakiet ten jest już zainstalowany,
wystarczy uruchomić polecenie <c>module-rebuild populate</c> aby stworzyć listę
pakietów, które wymagają przebudowy. Kiedy to nastąpi, można wykonać polecenie
<c>module-rebuild rebuild</c> aby przebudować moduły dla nowego jądra.
</impo>

<p>
Gdy instalacja się zakończy wpisujemy <c>modprobe nvidia</c>, aby załadować
moduł jądra do pamięci. Jeśli jest to aktualizacja do nowszej wersji, należy
najpierw wyładować moduł.
</p>

<pre caption="Ładowanie modułu jądra">
# <i>lsmod | grep nvidia &amp;&amp; rmmod nvidia</i>
# <i>modprobe nvidia</i>
</pre>

<p>
Dobrym pomysłem i wygodnym rozwiązaniem jest aby działo się to automatycznie
przy każdym uruchomieniu systemu. Aby to osiągnąć wystarczy dodać linijkę
<c>nvidia</c> do pliku <path>/etc/modules.autoload.d/kernel-2.6</path> (lub
<path>kernel-2.4</path>). Później należy wykonać polecenie
<c>update-modules</c>.
</p>

<impo>
Jeśli <c>agpgart</c> zostało skompilowane jako moduł, będzie trzeba dodać je do
<path>/etc/modules.autoload.d/kernel-2.6</path>.
</impo>

<pre caption="Uruchamianie update-modules">
# <i>update-modules</i>
</pre>

</body>
</section>
<section>
<title>Konfiguracja Serwera X</title>
<body>

<p>
Po instalacji odpowiednich sterowników należy skonfigurować serwer X, aby
używał sterownika <c>nvidia</c> zamiast domyślnego <c>nv</c>.
</p>

<p>
Otwieramy <path>/etc/X11/xorg.conf</path> ulubionym edytorem (np. <c>nano</c>
lub <c>vim</c>) i przechodzimy do sekcji <c>Device</c>. Należy tam odpowiednio
zmienić linię <c>Driver</c>:
</p>

<pre caption="Zamiana nv na nvidia w konfiguracji serwera X">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>
  VideoRam   65536
EndSection
</pre>

<p>
W sekcji <c>Module</c> należy upewnić się, że moduł <c>glx</c> będzie ładowany i
że moduł <c>dri</c> nie będzie wczytywany:
</p>

<pre caption="Uaktualnianie sekcji Module">
Section "Module"
  <comment>(...)</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>(...)</comment>
EndSection
</pre>

<p>
Następnie w sekcji <c>Screen</c> należy upewnić się, że dyrektywa
<c>DefaultDepth</c> jest ustawiona na 16 lub 24 lub w podsekcjach
<c>Display</c> mamy <c>Depth</c> ustawione tylko i wyłącznie na 16 lub 24.
Bez tego rozszerzenia nVidia GLX nie zostaną uruchomione.
</p>

<pre caption="Uaktualnianie sekcji Screen">
Section "Screen"
        <comment>(...)</comment>
        <i>DefaultDepth 16</i>
        Subsection "Display"
        <comment>(...)</comment>
EndSection
</pre>

<p>
Na koniec uruchamiamy polecenie <c>eselect</c>, co sprawi, że serwer X będzie
używał bibliotek GLX nVidii:
</p>

<pre caption="Uruchamianie opengl-update">
# <i>eselect opengl set nvidia</i>
</pre>

</body>
</section>

<section>
<title>Dodawanie użytkownika do grupy video</title>
<body>

<p>
Należy dodać odpowiednich użytkowników do grupy, która ma dostęp do plików
urządzenia nVidia:
</p>

<pre caption="Dodawanie użytkownika do grupy video">
# <i>gpasswd -a username video</i>
</pre>

<p>
Może to nie być potrzebne, jeśli używa się <c>udev</c>a, ale nie zaszkodzi to
również, a pewność pozostanie.
</p>

</body>
</section>

<section>
<title>Sprawdzanie karty</title>
<body>

<p>
Aby sprawdzić kartę nVidia, należy uruchomić serwer X i wpisać polecenie
<c>glxinfo</c>. Powinna pokazać się informacja, że bezpośrednie
renderowanie (ang. direct rendering) jest włączone:
</p>

<pre caption="Sprawdzanie statusu bezpośredniego renderowania">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
Do sprawdzania ilości FPS korzystamy z programu <c>glxgears</c>.
</p>

</body>
</section>

<section>
<title>Włączanie obsługi nvidia</title>
<body>

<p>
Niektóre programy, takie jak np. <c>mplayer</c> czy <c>xine-lib</c>
wykorzystują flagę USE o nazwie <c>xvmc</c>, która włącza XvMCNVIDIA,
przydatną podczas oglądania filmów w bardzo dużej rozdzielczości. Aby
ją uaktywnić należy dodać wpis <c>xvmc</c> do zmiennej USE  w pliku
<path>/etc/make.conf</path> lub dodać jako flagę wyłącznie dla
<c>media-video/mplayer</c> lub <c>media-libs/xine-lib</c> w pliku
<path>/etc/portage/package.use</path>.
</p>

<p>
Jest również kilka pakietów, które używają flagi <c>nvidia</c>, więc dobrym
pomysłem jest dodanie jej do <path>/etc/make.conf</path>.
</p>

<p>
Na koniec należy wpisać polecenie <c>emerge -uD --newuse world</c>,
które przebuduje wszystkie programy, tak by mogły korzystać z nowych
ustawień flag USE.
</p>

</body>
</section>
<section>
<title>Korzystanie z narzędzi do konfiguracji NVidia</title>
<body>

<p>
nVidia dostarcza również narzędzie do konfiguracji. Aplikacja ta monitoruje i
zmienia ustawienia graficzne bez konieczności restartowania serwera X. Jest
dostępna w drzewie Portage jako <c>media-video/nvidia-settings</c>. Jak już
wspomniano, będzie on zainstalowany automatycznie przy instalacji sterowników z
flagą <c>gtk</c> dodaną do <path>/etc/make.conf</path> lub
<path>/etc/portage/package.use</path>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Rozwiązywanie problemów</title>
<section>
<title>
Co zrobić, aby działała grafika 2D na komputerach z 4GB (lub więcej) pamięci
</title>
<body>

<p>
Jeśli pojawią się problemy z przyspieszeniem grafiki 2D prawdopodobnie nie
można zestawić zakresu kombinacji zapisu (ang. write-combining ranges) z MTRR.
Aby się upewnić, należy sprawdzić zawartość <path>/proc/mtrr</path>:
</p>

<pre caption="Sprawdzanie czy mamy włączone kombinacje zapisu">
# <i>cat /proc/mtrr</i>
</pre>

<p>
W liniach powinno być napisane "write-back" lub "write-combining". Jeśli
tak nie jest to trzeba przestawić ustawienie w BIOS-ie aby to naprawić.
</p>

<p>
Uruchamiamy ponownie komputer i wchodzimy do BIOS-u, znajdujemy tam ustawienia
MTRR (prawdopodobnie w "Ustawieniach CPU") i zmieniamy ustawienie z "ciągłe"
(ang. continuous) na "dyskretne" (ang. discrete), a następnie zapisujemy i
uruchamiamy Linuksa. Zniknie wpis "uncachable", a przyspieszenie 2D zacznie
działać bez zarzutu.
</p>

</body>
</section>
<section>
<title>
Kiedy ładuję moduł dostaję ostrzeżenie, że nie ma takiego urządzenia ("no such
device").
</title>
<body>

<p>
Z reguły zdarza się to w sytuacji gdy nie mamy odpowiedniej karty
graficznej. Należy się upewnić, że posiadamy kartę graficzną opartą o GPU
NVidia (możemy tego dokonać przy użyciu polecenia <c>lspci</c>).
</p>

<p>
Jeśli jesteśmy pewni, że posiadamy kartę graficzną NVidia, należy sprawdzić
ustawienia BIOS-u i upewnić się, że pozycja <e>Assign IRQ to VGA</e> jest
poprawnie ustawiona.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja dla ekspertów</title>
<section>
<title>Dokumentacja</title>
<body>

<p>
Pakiet sterownika nvidia zawiera mnóstwo użytecznej dokumentacji, która jest
instalowana do katalogu <c>/usr/share/doc</c> i może być odczytana przy pomocy
następującego polecenia:
</p>

<pre caption="Przeglądanie dokumentacji NVIDIA">
$ <i>less /usr/share/doc/nvidia-drivers-*/README.txt.gz</i>
</pre>

</body>
</section>
<section>
<title>Parametry modułów jądra</title>
<body>

<p>
Moduł <c>nvidia</c> można uruchomić z jedną z kilku opcji, które pozwalają
dostosować jego zachowanie do naszych potrzeb. Aby dodać lub usunąć te opcje
należy wyedytować plik <c>/etc/modules.d/nvidia</c>. Po wprowadzeniu zmian
należy uruchomić polecenie <c>update-modules</c> i przeładować moduł.
</p>

<pre caption="Dostosowywanie ustawień">
<comment>(Otwieramy /etc/modules.d/nvidia ulubionym edytorem)</comment>
# <i>nano -w /etc/modules.d/nvidia</i>
<comment>(Aktualizujemy informacje o sterwnikach)</comment>
# <i>update-modules</i>
<comment>(Usuwamy moduł z pamięci...)</comment>
# <i>modprobe -r nvidia</i>
<comment>(...i ładujemy go na nowo)</comment>
# <i>modprobe nvidia</i>
</pre>

</body>
</section>
<section>
<title>Zaawansowana konfiguracja X-ów</title>
<body>

<p>
Nakładka GLX również posiada wiele opcji, które można dostosować do własnych
potrzeb. Za ich pomocą można np. zmienić zachowanie wyjścia TV, wykrywanie
częstotliwości monitora itp. Po raz kolejny dostępne opcje są opisane w
szczegółowej dokumentacji.
</p>

<p>
Aby używać którejś z tych opcji należy dopisać ją w odpowiednim miejscu w pliku
konfiguracyjnym serwera X (zwykle jest to <c>/etc/X11/xorg.conf</c>). Na
przykład, aby wyłączyć wyświetlanie logo nvidii przy każdym starcie serwera X
należy wpisać:
</p>

<pre caption="Dodatkowe opcje konfiguracyjne">
Section "Device"
Identifier "nVidia Inc. GeForce2"
Driver     "nvidia"
<i>Option     "NoLogo" "true"</i>
VideoRam   65536
EndSection
</pre>

</body>
</section>
</chapter>
</guide>

