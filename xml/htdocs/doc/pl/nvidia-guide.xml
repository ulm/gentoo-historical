<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/nvidia-guide.xml,v 1.9 2005/09/17 00:09:33 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/nvidia-guide.xml" lang="pl">

<title>Konfiguracja kart nVidia w Gentoo</title>

<author title="Autor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Redaktor">
  <mail link="curtis119@gentoo.org">M Curtis Napier</mail>
</author>
<author title="Tłumacz">
   Robert Sebastian Gerus
</author>

<abstract>
Wielu użytkowników Gentoo posiada karty nVidia. nVidia wypuszcza specjalne
sterowniki dla Linuksa, które poważnie zwiększają wydajność  kart tej firmy. Ten
tekst pokazuje jak zainstalować i skonfigurować te sterowniki.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<license/>

<version>1.13</version>
<date>2005-09-11</date>

<chapter>
<title>Wprowadzenie</title>
<section>
<body>

<p>
nVidia dostarcza sterowników poprawiających wydajność i zapewniających pełne
wsparcie dla akceleracji 3D. Sterowniki te w Gentoo zostały podzielone na dwa
pakiety: <c>nvidia-kernel</c> i <c>nvidia-glx</c>.
</p>

<p>
<c>nvidia-kernel</c> to sterownik jądra, który zapewnia niskopoziomową
komunikację ze sprzętem video. Instaluje moduł jądra o nazwie <c>nvidia</c>,
który tą obsługą się zajmuje i musi być załadowany za każdym razem kiedy
zechcemy skorzystać ze sterowników nvidia.
</p>

<p>
Razem ze sterownikiem jądra muszą zostać zainstalowane biblioteki zawarte w
pakiecie <c>nvidia-glx</c>. Są one wykorzystywane przez serwer X do
renderowania grafiki, podczas gdy oryginalny sterownik (<c>nvidia-kernel</c>)
jest wykorzystywany do komunikacji ze sprzętem.
</p>

</body>
 </section>
</chapter>
<chapter>
<title>Konfiguracja karty</title>
<section>
<title>Instalacja sterowników</title>
<body>

<p>
Tak jak wspominaliśmy wcześniej sterowniki nVidii zawierają moduły jądra, które
musimy włączyć do jądra. By tego dokonać jądro musi obsługiwać ładowanie
modułów. Jeśli użyto <c>genkernel</c>, aby skonfigurować jądro wszystko powinno
być odpowiednio ustawione. Jeśli nie, należy sprawdzić dwa razy konfigurację
jądra i upewnić się, że mamy to włączone:
</p>

<pre caption="Włączanie obsługi ładowania modułów jądra">
Loadable module support ---&gt;
  [*] Enable loadable module support
</pre>

<p>
Musimy także włączyć obsługę <e>Memory Type Range Register</e>:
</p>

<pre caption="Włączanie MTRR">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

<p>
Moduły i biblioteki nVidii to dwa pakiety  <c>nvidia-glx</c>
i <c>nvidia-kernel</c>. Pierwszy to biblioteki GLX dla X11, a drugi to moduły
jądra. Ponieważ <c>nvidia-glx</c> jest zależna od <c>nvidia-kernel</c> wystarczy
instalacja <c>nvidia-glx</c>:
</p>


<p>
Ebuild nvidia-kernel automatycznie wykrywa wersję używanego jądra w oparciu o
plik <path>/usr/src/linux</path>. W związku z tym należy się upewnić, że jest
on prawidłowym dowiązaniem symbolicznym do źródeł używanego jądra. Szczegóły
dotyczące konfiguracji jądra znajdują się w dokumencie <uri
link="/doc/pl/handbook/">Podręczniku Gentoo</uri>.
</p>

<p>
Jeśli korzysta się z jądra gentoo-sources-2.6.11-r6, to katalog /usr/src
powinien wyglądać tak:
</p>

<pre caption="Sprawdzanie dowiązania do źródeł jądra">
  # <i>cd /usr/src</i>
  # <i>ls -l</i>
  <comment>(Sprawdzanie czy dowiązanie o nazwie linux wskazuje
właściwy katalog)</comment>
  lrwxrwxrwx   1 root root   22 Apr 23 18:33 linux -&gt;
linux-2.6.11-gentoo-r6
  drwxr-xr-x   4 root root  120 Apr  8 18:56 linux-2.4.26-gentoo-r4
  drwxr-xr-x  18 root root  664 Dec 31 16:09 linux-2.6.10
  drwxr-xr-x  18 root root  632 Mar  3 12:27 linux-2.6.11
  drwxr-xr-x  19 root root 4096 Mar 16 22:00 linux-2.6.11-gentoo-r6
</pre>

<p>
W powyższym przykładzie widać, że dowiązanie o nazwie <c>linux</c> wskazuje na
jądro <c>linux-2.6.11-gentoo-r6</c>
</p>

<p>
Jeśli dowiązanie nie jest prawidłowe to należy je poprawić w następujący sposób:
</p>

<pre caption="Tworzenie lub uaktualnianie dowiązania symbolicznego /usr/src/linux">
# <i>cd /usr/src</i>
# <i>ln -snf linux-2.6.11-gentoo-r6 linux</i>
</pre>

<p>
Następnie pora zainstalować pakiety <c>nvidia-kernel</c> i <c>nvidia-glx</c>.
W związku z tym, że <c>nvidia-kernel</c> jest zależnością <c>nvidia-glx</c>
wystarczy zainstalować tylko ten drugi pakiet.
</p>

<pre caption="Instalacja modułów nVidii">
# <i>emerge nvidia-glx</i>
</pre>

<impo>
Za każdym razem gdy <uri link="/doc/pl/kernel-upgrade.xml">kompilujemy</uri>
jądro musimy ponownie uruchomić polecenie <c>emerge nvidia-kernel</c> w celu
ponownego zainstalowania modułów. Zmiany jądra nie mają wpływu na pakiet
nvidia-glx.
 </impo>

<p>
Gdy instalacja się zakończy wpisujemy <c>modprobe nvidia</c>, aby załadować
moduł jądra do pamięci:
</p>

<pre caption="Ładowanie modułu jądra">
# <i>modprobe nvidia</i>
</pre>

<p>
Dobrym pomysłem i wygodnym rozwiązaniem jest, aby działo się to automatycznie
przy każdym uruchomieniu systemu. Aby to osiągnąć wystarczy dodać linijkę
<c>nvidia</c> do pliku <path>/etc/modules.autoload.d/kernel-2.6</path> (lub
<path>kernel-2.4</path>). Później należy wykonać polecenie
<c>modules-update</c>.
</p>

<pre caption="Uruchamianie modules-update">
# <i>modules-update</i>
</pre>

</body>
</section>
<section>
<title>Konfiguracja Serwera X</title>
<body>

<p>
Po instalacji odpowiednich sterowników należy skonfigurować serwer X (XFree86
lub Xorg), aby używał sterownika <c>nvidia</c> zamiast domyślnego <c>nv</c>.
</p>

<p>
Otwieramy <path>/etc/X11/xorg.conf</path> ulubionym edytorem (np. <c>nano</c>
lub <c>vim</c>) i przechodzimy do sekcji <c>Device</c>. Należy tam odpowiednio
zmienić linię <c>Driver</c>:
</p>

<pre caption="Zamiana nv na nvidia w konfiguracji serwera X">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>
  VideoRam   65536
EndSection
</pre>

<p>
W sekcji <c>Module</c> należy upewnić się, że moduł <c>glx</c> będzie ładowany i
że moduł <c>dri</c> nie będzie wczytywany:
</p>

<pre caption="Uaktualnianie sekcji Module">
Section "Module"
  <comment>(...)</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>(...)</comment>
EndSection
</pre>

<p>
Następnie w sekcji <c>Screen</c> należy upewnić się, że dyrektywa
<c>DefaultDepth</c> jest ustawiona na 16 lub 24 lub w podsekcjach
<c>Display</c> mamy <c>Depth</c> ustawione tylko i wyłącznie na 16 lub 24.
Bez tego rozszerzenia nvidia-glx nie zostaną uruchomione.
</p>

<pre caption="Uaktualnianie sekcji Screen">
Section "Screen"
        <comment>(...)</comment>
        <i>DefaultDepth 16</i>
        Subsection "Display"
        <comment>(...)</comment>
EndSection
</pre>

<p>
Na koniec uruchamiamy polecenie <c>opengl-update</c>, co sprawi, że
serwer X będzie używał bibliotek GLX nVidii:
</p>

<pre caption="Uruchamianie opengl-update">
# <i>opengl-update nvidia</i>
</pre>

</body>
</section>
<section>
<title>Sprawdzanie karty</title>
<body>

<p>
Aby sprawdzić kartę nVidia,  należy uruchomić serwer X i wpisać polecenie
<c>glxinfo | grep direct</c>. Powinna pokazać się informacja, że bezpośrednie
renderowanie (ang. direct rendering) jest włączone:
</p>

<pre caption="Sprawdzanie statusu bezpośredniego renderowania">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
Do sprawdzania ilości FPS korzystamy z programu <c>glxgears</c>.
</p>

</body>
</section>
<section>
<title>Włączanie obsługi nvidia</title>
<body>

<p>
Niektóre programy, takie jak np. <c>mplayer</c> czy <c>xine-lib</c>
wykorzystują flagę USE o nazwie "nvidia", która włącza XvMCNVIDIA,
przydatną podczas oglądania filmów w bardzo dużej rozdzielczości. Aby
ją uaktywnić należy dodać wpis "nvidia" do listy zmiennych w pliku
<path>/etc/make.conf</path> lub dodać jako flagę wyłącznie dla
<c>media-video/mplayer</c> lub <c>media-libs/xine-lib</c> w pliku
<path>/etc/portage/package.use</path>.
</p>

<p>
Na koniec należy wpisać polecenie <c>emerge -uD --newuse world</c>,
które przebuduje wszystkie programy, tak by mogły korzystać z nowych
ustawień flag USE.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Rozwiązywanie problemów</title>
<section>
<title>Co zrobić, aby działała grafika 2D na komputerach z 4GB (lub więcej) pamięci</title>
<body>

<p>
Jeśli pojawią się problemy z przyspieszeniem grafiki 2D prawdopodobnie nie
można zestawić zakresu kombinacji zapisu (ang. write-combining ranges) z MTRR.
Aby się upewnić, należy sprawdzić zawartość <path>/proc/mtrr</path>:
</p>

<pre caption="Sprawdzanie, czy mamy włączone kombinacje zapisu">
# <i>cat /proc/mtrr</i>
</pre>

<p>
W liniach powinno być napisane "write-back" lub "write-combining". Jeśli
tak nie jest to trzeba przestawić ustawienie w BIOS-ie aby to naprawić.
</p>

<p>
Uruchamiamy ponownie komputer i wchodzimy do BIOS-u, znajdujemy tam ustawienia
MTRR (prawdopodobnie w "Ustawieniach CPU") i zmieniamy ustawienie z "ciągłe"
(ang. continuous) na "dyskretne" (ang. discrete), a następnie zapisujemy i
uruchamiamy Linuksa. Zniknie wpis "uncachable", a przyspieszenie 2D zacznie
działać bez zarzutu.
</p>

</body>
</section>
<section>
<title>Otrzymuję ostrzeżenia o nieobsługiwanym rozmiarze stosu (4K)</title>
<body>

<p>
Pakiety <c>nvidia-kernel</c> w wersji starszej od 1.0.6106 nie posiadają obsługi
stosów mniejszych niż o rozmiarze 8K. Nowsze jądra (wersje 2.6.6 i nowsze)
posiadają także obsługę 4K rozmiaru stosu. Nie należy zaznaczać 4K rozmiaru
stosu w konfiguracji jądra jeśli używamy starszej wersji pakietu
<c>nvidia-kernel</c>. Opcję tą można znaleźć w sekcji <c>Kernel Hacking</c>.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Konfiguracja dla ekspertów</title>
<section>
<title>Dokumentacja</title>
<body>

<p>
Pakiet sterownika nvidia zawiera mnóstwo użytecznej dokumentacji, która jest
instalowana do katalogu <c>/usr/share/doc</c> i może być odczytana przy pomocy
następującego polecenia:
</p>

<pre caption="Przeglądanie dokumentacji NVIDIA">
# <i>less /usr/share/doc/nvidia-glx-*/README.txt.gz</i>
</pre>

</body>
</section>
<section>
<title>Parametry modułów jądra</title>
<body>

<p>
Moduł <c>nvidia</c> można uruchomić z jedną z kilku opcji, które pozwalają
dostosować jego zachowanie do naszych potrzeb. Aby dodać lub usunąć te opcje
należy wyedytować plik <c>/etc/modules.d/nvidia</c>. Po wprowadzeniu zmian
należy uruchomić polecenie <c>modules-update</c> i przeładować moduł.
</p>

<pre caption="Dostosowywanie ustawień">
<comment>(Otwieramy /etc/modules.d/nvidia ulubionym edytorem)</comment>
# <i>nano -w /etc/modules.d/nvidia</i>
<comment>(Aktualizujemy informacje o sterwnikach)</comment>
# <i>modules-update</i>
<comment>(Usuwamy moduł z pamięci...)</comment>
# <i>modprobe -r nvidia</i>
<comment>(...i ładujemy go na nowo)</comment>
# <i>modprobe nvidia</i>
</pre>

</body>
</section>
<section>
<title>Zaawansowana konfiguracja X-ów</title>
<body>

<p>
Nakładka GLX również posiada wiele opcji, które można dostosować do własnych
potrzeb. Za ich pomocą można np. zmienić zachowanie wyjścia TV, wykrywanie
częstotliwości monitora itp. Po raz kolejny dostępne opcje są opisane w
szczegółowej dokumentacji.
</p>

<p>
Aby używać którejś z tych opcji należy dopisać ją w odpowiednim miejscu w pliku
konfiguracyjnym serwera X (zwykle jest to <c>/etc/X11/xorg.conf</c>). Na
przykład, aby wyłączyć wyświetlanie logo nvidii przy każdym starcie serwera X
należy wpisać:
</p>

<pre caption="Dodatkowe opcje konfiguracyjne">
Section "Device"
Identifier "nVidia Inc. GeForce2"
Driver     "nvidia"
<i>Option     "NoLogo" "true"</i>
VideoRam   65536
EndSection
</pre>

</body>
</section>
</chapter>
</guide>

