<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/nvidia-guide.xml,v 1.23 2007/03/11 21:22:45 shadoww Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/nvidia-guide.xml" lang="pl">

<title>Konfiguracja kart nVidia w Gentoo</title>

<author title="Autor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Redaktor">
  <mail link="curtis119@gentoo.org">M Curtis Napier</mail>
</author>
<author title="Redaktor">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="Tłumacz">
   Robert Sebastian Gerus
</author>
<author title="Tłumacz">
  Piotr Chmyłkowski
</author>

<abstract>
Wielu użytkowników Gentoo posiada karty nVidia. nVidia wypuszcza specjalne
sterowniki dla Linuksa, które poważnie zwiększają wydajność  kart tej firmy. Ten
tekst pokazuje jak zainstalować i skonfigurować te sterowniki.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<license/>

<version>1.26</version>
<date>2006-07-25</date>

<chapter>
<title>Wprowadzenie</title>
<section>
<body>

<p>
nVidia dostarcza sterowników poprawiających wydajność i zapewniających pełne
wsparcie dla akceleracji 3D. Sterowniki te w Gentoo zostały podzielone na dwa
pakiety: <c>nvidia-kernel</c> i <c>nvidia-glx</c>.
</p>

<p>
<c>nvidia-kernel</c> to sterownik jądra, który zapewnia niskopoziomową
komunikację ze sprzętem video. Instaluje moduł jądra o nazwie <c>nvidia</c>,
który tą obsługą się zajmuje i musi być załadowany za każdym razem kiedy
zechcemy skorzystać ze sterowników nvidia.
</p>

<p>
Razem ze sterownikiem jądra muszą zostać zainstalowane biblioteki zawarte w
pakiecie <c>nvidia-glx</c>. Są one wykorzystywane przez serwer X do
renderowania grafiki, podczas gdy oryginalny sterownik (<c>nvidia-kernel</c>)
jest wykorzystywany do komunikacji ze sprzętem.
</p>

</body>
 </section>
</chapter>
<chapter>
<title>Konfiguracja karty</title>
<section>
<title>Konfiguracja jądra</title>
<body>

<p>
Tak jak wspominaliśmy wcześniej sterowniki nVidii zawierają moduły jądra, które
musimy włączyć do jądra. By tego dokonać jądro musi obsługiwać ładowanie
modułów. Jeśli użyto <c>genkernel</c>, aby skonfigurować jądro wszystko powinno
być odpowiednio ustawione. Jeśli nie, należy sprawdzić dwa razy konfigurację
jądra i upewnić się, że mamy to włączone:
</p>

<pre caption="Włączanie obsługi ładowania modułów jądra">
Loadable module support ---&gt;
  [*] Enable loadable module support
</pre>

<p>
Musimy także włączyć obsługę <e>Memory Type Range Register</e>:
</p>

<pre caption="Włączanie MTRR">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

<p>
Potrzebne będzie także dodanie wsparcia dla <c>agpgart</c> przez wkompilowanie
bezpośrednio w jądro, lub jako moduł:
</p>

<pre caption="Włączanie agpgart">
Device Drivers ---&gt;
Character devices ---&gt;
&lt;*&gt; /dev/agpgart (AGP Support)
</pre>

</body>
</section>
<section>
<title>Uwagi do architektur</title>
<body>
<impo>
Dla procesorów x86 oraz AMD64, sterownik dostarczany przez jądro konfliktuje z
binarnym sterownikiem dostarczanym przez producenta. Podczas kompilacji dla tych
architektur należy całkowicie usunąć wsparcie dla sterowników dostarczanych
przez jądro, tak jak to pokazano poniżej:
</impo>

<pre caption="Usunięcie sterownika z jądra">
Device Drivers ---&gt;
Graphics Support ---&gt;
&lt; &gt;   nVidia Framebuffer Support
&lt; &gt;   nVidia Riva support
</pre>

<p>
Dobrą alternatywą dla ramki bufora jest <c>VESA</c>:
</p>

<pre caption="Włączenie wsparcia dla VESA">
Device Drivers ---&gt;
Graphics Support ---&gt;
&lt;*&gt;   VESA VGA graphics support
</pre>

<p>
Następnie, w sekcji "VESA driver type" należy wybrać typ sterownika:
<c>vesafb</c> lub <c>vesafb-tng</c>:
(vesafb-tng nie jest dostępny dla posiadaczy procesorów AMD64, przyp. tłum.)
</p>

<pre caption="Wybór typu ramki bufora">
( ) vesafb
(X) vesafb-tng
</pre>

<p>
Więcej informacji można znaleźć w
<path>/usr/src/linux/Documentation/fb/vesafb.txt</path> w przypadku korzystania
z vesafb lub w dokumentacji dla konkretnej ramki bufora w katalogu
<path>/usr/src/linux/Documentation/fb/</path>.
</p>

</body>
</section>
<section>
<title>Kontynuowanie konfiguracji jądra</title>
<body>

<p>
Moduły i biblioteki nVidii to dwa pakiety  <c>nvidia-glx</c>
i <c>nvidia-kernel</c>. Pierwszy to biblioteki GLX dla X11, a drugi to moduły
jądra.
</p>

<p>
Ebuild nvidia-kernel automatycznie wykrywa wersję używanego jądra w oparciu o
plik <path>/usr/src/linux</path>. W związku z tym należy się upewnić, że jest
on prawidłowym dowiązaniem symbolicznym do źródeł używanego jądra. Szczegóły
dotyczące konfiguracji jądra znajdują się w dokumencie <uri
link="/doc/pl/handbook/">Podręczniku Gentoo</uri>.
</p>

<p>
Jeśli korzysta się z jądra gentoo-sources-2.6.11-r6, to katalog
<path>/usr/src</path> powinien wyglądać tak:
</p>

<pre caption="Sprawdzanie dowiązania do źródeł jądra">
# <i>cd /usr/src</i>
# <i>ls -l</i>
<comment>(Sprawdzanie czy dowiązanie o nazwie linux wskazuje właściwy katalog)</comment>
lrwxrwxrwx   1 root root   22 Apr 23 18:33 linux -&gt; linux-2.6.11-gentoo-r6
drwxr-xr-x   4 root root  120 Apr  8 18:56 linux-2.4.26-gentoo-r4
drwxr-xr-x  18 root root  664 Dec 31 16:09 linux-2.6.10
drwxr-xr-x  18 root root  632 Mar  3 12:27 linux-2.6.11
drwxr-xr-x  19 root root 4096 Mar 16 22:00 linux-2.6.11-gentoo-r6
</pre>

<p>
W powyższym przykładzie widać, że dowiązanie o nazwie <c>linux</c> wskazuje na
jądro <c>linux-2.6.11-gentoo-r6</c>
</p>

<p>
Jeśli dowiązanie nie jest prawidłowe to należy je poprawić w następujący sposób:
</p>

<pre caption="Tworzenie lub uaktualnianie dowiązania symbolicznego /usr/src/linux">
# <i>cd /usr/src</i>
# <i>ln -snf linux-2.6.11-gentoo-r6 linux</i>
</pre>

</body>
</section>
<section>
<title>Opcjonalnie: Sprawdzanie wsparcia dla karty</title>
<body>

<note>
Niestety, niektóre stare karty graficzne nie są dłużej wspierane przez nowe
wersje <c>nvidia-glx</c> i <c>nvidia-kernel</c>. nVidia dostarcza <uri
link="http://www.nvidia.com/object/IO_18897.html">listę wpieranych kart</uri>.
Proszę sprawdzić tę listę przed instalacją sterowników.
</note>

<p>
Poniżej znajduje się lista starych <b>niewspieranych</b> już kart graficznych:
</p>

<pre caption="Niewspierane dłużej karty">
TNT2
TNT2 Pro
TNT2 Ultra
TNT2 Model 64 (M64)
TNT2 Model 64 (M64) Pro
Vanta
Vanta LT
GeForce 256
GeForce DDR
GeForce2 GTS
GeForce2 Pro
GeForce2 Ti
GeForce2 Ultra
GeForce2 MX Integrated graphics
Quadro
Quadro2 Pro
Quadro2 EX
</pre>

<p>
Jeśli jest się posiadaczem jednej z powyższych kart, należy zamaskować nowszą
wersję sterowników nVidia i zainstalować starszą.
</p>

<pre caption="Maskowanie nowszych sterowników">
# <i>echo "&gt;media-video/nvidia-kernel-1.0.6629-r5" &gt;&gt; /etc/portage/package.mask</i>
# <i>echo "&gt;media-video/nvidia-glx-1.0.6629-r7" &gt;&gt; /etc/portage/package.mask</i>
</pre>

</body>
</section>
<section>
<title>Instalacja sterowników</title>
<body>

<p>
Następnie pora zainstalować pakiety <c>nvidia-kernel</c> i <c>nvidia-glx</c>.
W związku z tym, że <c>nvidia-kernel</c> jest zależnością <c>nvidia-glx</c>
wystarczy zainstalować tylko ten drugi pakiet.
</p>

<pre caption="Instalacja modułów nVidii">
# <i>emerge nvidia-glx</i>
</pre>

<impo>
Za każdym razem gdy <uri link="/doc/pl/kernel-upgrade.xml">kompilujemy</uri>
jądro musimy ponownie uruchomić polecenie <c>emerge nvidia-kernel</c> w celu
ponownego zainstalowania modułów. Zmiany jądra nie mają wpływu na pakiet
nvidia-glx.
</impo>

<p>
Gdy instalacja się zakończy wpisujemy <c>modprobe nvidia</c>, aby załadować
moduł jądra do pamięci:
</p>

<pre caption="Ładowanie modułu jądra">
# <i>modprobe nvidia</i>
</pre>

<p>
Dobrym pomysłem i wygodnym rozwiązaniem jest, aby działo się to automatycznie
przy każdym uruchomieniu systemu. Aby to osiągnąć wystarczy dodać linijkę
<c>nvidia</c> do pliku <path>/etc/modules.autoload.d/kernel-2.6</path> (lub
<path>kernel-2.4</path>). Później należy wykonać polecenie
<c>modules-update</c>.
</p>

<impo>
Jeśli <c>agpgart</c> zostało skompilowane jako moduł, będzie trzeba dodać je do
<path>/etc/modules.autoload.d/kernel-2.6</path> (lub do
<path>kernel-2.4</path>, w zależności od wersji jądra).
</impo>

<pre caption="Uruchamianie modules-update">
# <i>modules-update</i>
</pre>

</body>
</section>
<section>
<title>Konfiguracja Serwera X</title>
<body>

<p>
Po instalacji odpowiednich sterowników należy skonfigurować serwer X (XFree86
lub Xorg), aby używał sterownika <c>nvidia</c> zamiast domyślnego <c>nv</c>.
</p>

<p>
Otwieramy <path>/etc/X11/xorg.conf</path> ulubionym edytorem (np. <c>nano</c>
lub <c>vim</c>) i przechodzimy do sekcji <c>Device</c>. Należy tam odpowiednio
zmienić linię <c>Driver</c>:
</p>

<pre caption="Zamiana nv na nvidia w konfiguracji serwera X">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>
  VideoRam   65536
EndSection
</pre>

<p>
W sekcji <c>Module</c> należy upewnić się, że moduł <c>glx</c> będzie ładowany i
że moduł <c>dri</c> nie będzie wczytywany:
</p>

<pre caption="Uaktualnianie sekcji Module">
Section "Module"
  <comment>(...)</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>(...)</comment>
EndSection
</pre>

<p>
Następnie w sekcji <c>Screen</c> należy upewnić się, że dyrektywa
<c>DefaultDepth</c> jest ustawiona na 16 lub 24 lub w podsekcjach
<c>Display</c> mamy <c>Depth</c> ustawione tylko i wyłącznie na 16 lub 24.
Bez tego rozszerzenia nvidia-glx nie zostaną uruchomione.
</p>

<pre caption="Uaktualnianie sekcji Screen">
Section "Screen"
        <comment>(...)</comment>
        <i>DefaultDepth 16</i>
        Subsection "Display"
        <comment>(...)</comment>
EndSection
</pre>

<p>
Na koniec uruchamiamy polecenie <c>eselect</c>, co sprawi, że serwer X będzie
używał bibliotek GLX nVidii:
</p>

<pre caption="Uruchamianie opengl-update">
# <i>eselect opengl set nvidia</i>
</pre>

</body>
</section>
<section>
<title>Sprawdzanie karty</title>
<body>

<p>
Aby sprawdzić kartę nVidia,  należy uruchomić serwer X i wpisać polecenie
<c>glxinfo | grep direct</c>. Powinna pokazać się informacja, że bezpośrednie
renderowanie (ang. direct rendering) jest włączone:
</p>

<pre caption="Sprawdzanie statusu bezpośredniego renderowania">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
Do sprawdzania ilości FPS korzystamy z programu <c>glxgears</c>.
</p>

</body>
</section>
<section>
<title>Sprawdzanie karty</title>
<body>

<p>
W celu sprawdzenia czy sterowniki zostały zainstalowane prawidłowo, należy
wpisać polecenie <c>glxinfo | grep direct</c>. Powinno ono poinformować o tym,
że działa bezpośrednie generowanie grafiki:
</p>

<pre caption="Sprawdzanie karty">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
W celu sprawdzenia ilości FPS należy uruchomić <c>glxgears</c>.
</p>

</body>
</section>
<section>
<title>Włączanie obsługi nvidia</title>
<body>

<p>
Niektóre programy, takie jak np. <c>mplayer</c> czy <c>xine-lib</c>
wykorzystują flagę USE o nazwie "nvidia", która włącza XvMCNVIDIA,
przydatną podczas oglądania filmów w bardzo dużej rozdzielczości. Aby
ją uaktywnić należy dodać wpis "nvidia" do listy zmiennych w pliku
<path>/etc/make.conf</path> lub dodać jako flagę wyłącznie dla
<c>media-video/mplayer</c> lub <c>media-libs/xine-lib</c> w pliku
<path>/etc/portage/package.use</path>.
</p>

<p>
Na koniec należy wpisać polecenie <c>emerge -uD --newuse world</c>,
które przebuduje wszystkie programy, tak by mogły korzystać z nowych
ustawień flag USE.
</p>

</body>
</section>
<section>
<title>Korzystanie z narzędzi do konfiguracji NVidia</title>
<body>

<p>
Od wydania przez NVidię wersji 1.0.6106, sterowniki dostarczane są z narzędziem
konfiguracyjnym. Narzędzie to pozwala nam na zmianę ustawień graficznych bez
potrzeby restartowania serwera X. Dostępne są one w Portage jako
<c>media-video/nvidia-settings</c>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Rozwiązywanie problemów</title>
<section>
<title>
Co zrobić, aby działała grafika 2D na komputerach z 4GB (lub więcej) pamięci
</title>
<body>

<p>
Jeśli pojawią się problemy z przyspieszeniem grafiki 2D prawdopodobnie nie
można zestawić zakresu kombinacji zapisu (ang. write-combining ranges) z MTRR.
Aby się upewnić, należy sprawdzić zawartość <path>/proc/mtrr</path>:
</p>

<pre caption="Sprawdzanie, czy mamy włączone kombinacje zapisu">
# <i>cat /proc/mtrr</i>
</pre>

<p>
W liniach powinno być napisane "write-back" lub "write-combining". Jeśli
tak nie jest to trzeba przestawić ustawienie w BIOS-ie aby to naprawić.
</p>

<p>
Uruchamiamy ponownie komputer i wchodzimy do BIOS-u, znajdujemy tam ustawienia
MTRR (prawdopodobnie w "Ustawieniach CPU") i zmieniamy ustawienie z "ciągłe"
(ang. continuous) na "dyskretne" (ang. discrete), a następnie zapisujemy i
uruchamiamy Linuksa. Zniknie wpis "uncachable", a przyspieszenie 2D zacznie
działać bez zarzutu.
</p>

</body>
</section>
<section>
<title>Otrzymuję ostrzeżenia o nieobsługiwanym rozmiarze stosu (4K)</title>
<body>

<p>
Pakiety <c>nvidia-kernel</c> w wersji starszej od 1.0.6106 nie posiadają obsługi
stosów mniejszych niż o rozmiarze 8K. Nowsze jądra (wersje 2.6.6 i nowsze)
posiadają także obsługę 4K rozmiaru stosu. Nie należy zaznaczać 4K rozmiaru
stosu w konfiguracji jądra jeśli używamy starszej wersji pakietu
<c>nvidia-kernel</c>. Opcję tą można znaleźć w sekcji <c>Kernel Hacking</c>.
</p>

</body>
</section>
<section>
<title>
Kiedy ładuję moduł dostaję ostrzeżenie, że nie ma takiego urządzenia ("no such
device").
</title>
<body>

<p>
Z reguły zdarza się to w sytuacji gdy nie mamy odpowiedniej karty
graficznej. Należy się upewnić, że posiadamy kartę graficzną opartą o GPU
NVidia (możemy tego dokonać przy użyciu polecenia <c>lspci</c>).
</p>

<p>
Jeśli jesteśmy pewni, że posiadamy kartę graficzną NVidia, należy sprawdzić
ustawienia BIOS-u i upewnić się, że pozycja <e>Assign IRQ to VGA</e> jest
poprawnie ustawiona.
</p>

</body>
</section>
<section>
<title>
Pojawia się błąd "no screens found", a w logach komunikat "Failed to initialize
the NVIDIA kernel module!"
</title>
<body>

<p>
Zapewne brakuje plików urządzeń <path>/dev/nvidia*</path>. Tworzy się je za
pomocą skryptu <c>NVmakedevices.sh</c>:
</p>

<pre caption="Tworzenie brakujących plików urządzeń">
# <i>/sbin/NVmakedevices.sh</i>
</pre>

<p>
Jeśli brak urządzenia <path>/dev/nvidia*</path> powtarza się po każdym ponownym
uruchomieniu komputera, najprawdopodobniej system udev nie tworzy odpowiednich
odpowiednich plików urządzeń. Można to naprawić ponownie uruchamiając
<c>NVmakedevices.sh</c>, a nastepnie wyedytować plik <path>/etc/conf.d/rc</path>
i ustawić:
</p>

<pre caption="Edytowanie /etc/conf.d/rc">
RC_DEVICE_TARBALL="yes"
</pre>

<p>
To spowoduje zachowanie plików <path>/dev/nvidia*</path> nawet po restarcie
komputera.
</p>

<note>
Można również spróbować zainstalować najnowsze pakiety <c>nvidia-kernel</c> oraz
<c>nvidia-glx</c> z serii 8xxx. W chwili pisania tego artykułu oba są
zamaskowane flagami ~arch. Te sterowniki niepolegają już na udev i hotplug, wiec
nie ma potrzeby uruchamiania <c>NVmakedevices.sh</c>. W zamiast sam sterownik X
utworzy plik urządzenia <path>/dev/nvidia*</path> podczas startu X-ów. Jednakże
to wymaga używania nowych wersji jądra (2.6.14 lub nowszych).
</note>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja dla ekspertów</title>
<section>
<title>Dokumentacja</title>
<body>

<p>
Pakiet sterownika nvidia zawiera mnóstwo użytecznej dokumentacji, która jest
instalowana do katalogu <c>/usr/share/doc</c> i może być odczytana przy pomocy
następującego polecenia:
</p>

<pre caption="Przeglądanie dokumentacji NVIDIA">
# <i>less /usr/share/doc/nvidia-glx-*/README.txt.gz</i>
</pre>

</body>
</section>
<section>
<title>Parametry modułów jądra</title>
<body>

<p>
Moduł <c>nvidia</c> można uruchomić z jedną z kilku opcji, które pozwalają
dostosować jego zachowanie do naszych potrzeb. Aby dodać lub usunąć te opcje
należy wyedytować plik <c>/etc/modules.d/nvidia</c>. Po wprowadzeniu zmian
należy uruchomić polecenie <c>modules-update</c> i przeładować moduł.
</p>

<pre caption="Dostosowywanie ustawień">
<comment>(Otwieramy /etc/modules.d/nvidia ulubionym edytorem)</comment>
# <i>nano -w /etc/modules.d/nvidia</i>
<comment>(Aktualizujemy informacje o sterwnikach)</comment>
# <i>modules-update</i>
<comment>(Usuwamy moduł z pamięci...)</comment>
# <i>modprobe -r nvidia</i>
<comment>(...i ładujemy go na nowo)</comment>
# <i>modprobe nvidia</i>
</pre>

</body>
</section>
<section>
<title>Zaawansowana konfiguracja X-ów</title>
<body>

<p>
Nakładka GLX również posiada wiele opcji, które można dostosować do własnych
potrzeb. Za ich pomocą można np. zmienić zachowanie wyjścia TV, wykrywanie
częstotliwości monitora itp. Po raz kolejny dostępne opcje są opisane w
szczegółowej dokumentacji.
</p>

<p>
Aby używać którejś z tych opcji należy dopisać ją w odpowiednim miejscu w pliku
konfiguracyjnym serwera X (zwykle jest to <c>/etc/X11/xorg.conf</c>). Na
przykład, aby wyłączyć wyświetlanie logo nvidii przy każdym starcie serwera X
należy wpisać:
</p>

<pre caption="Dodatkowe opcje konfiguracyjne">
Section "Device"
Identifier "nVidia Inc. GeForce2"
Driver     "nvidia"
<i>Option     "NoLogo" "true"</i>
VideoRam   65536
EndSection
</pre>

</body>
</section>
</chapter>
</guide>

