<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/gnupg-user.xml,v 1.3 2005/09/29 01:14:30 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Id: gnupg-user.xml,v 1.3 2005/09/29 01:14:30 rane Exp $ -->
<!-- Orig revision: 1.28 -->
<!-- Status: Finished -->
<!-- Translator: Wojciech Baran <voytas@kolos.math.uni.lodz.pl> -->

<guide link="/doc/pl/gnupg-user.xml" lang="pl">

<title>GnuPG w Gentoo</title>

<author title="Autor">
  <mail link="humpback@gentoo.org">Gustavo Felisberto</mail>
</author>
<author title="Redaktor">
  <mail link="zhen@gentoo.org">John P. Davis</mail>
</author>
<author title="Redaktor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Tłumaczenie">
  Wojciech Baran
</author>

<abstract>
Ten mały przewodnik nauczy podstaw obsługi GnuPG, narzędzia do bezpiecznej komunikacji.
</abstract>

<license/>

<version>1.0.13</version>
<date>2005-05-04</date>

<chapter>
<title>Wprowadzenie</title>
<section>
<title>Czego się można dowiedzieć z tego przewodnika</title>
<body>

<p>
Przed przeczytaniem tego tekstu należy się zapoznać z podstawami szyfrowania
przy użyciu klucza publicznego oraz pojęciem cyfrowego podpisu. Informacje na
ten temat znajdują się w części zatytułowanej <uri link="#doc_chap6">Szyfrowanie
kluczem publicznym</uri> i w drugim rozdziale <uri
link="http://www.gnupg.org/(en)/documentation/guides.html">Podręcznika
GnuPG</uri>. Po zapoznaniu się z podstawami można wrócić do tego tekstu.
</p>

<p>
Ten przewodnik pokaże jak zainstalować GnuPG, jak utworzyć parę kluczy, jak
dodawać klucze do bazy, jak wysłać klucz publiczny na serwer kluczy i jak
podpisywać, szyfrować, weryfikować lub deszyfrować otrzymywane lub wysyłane
wiadomości. Dodatkowo wytłumaczymy jak należy szyfrować pliki na własnym
komputerze by uniemożliwić innym odczyt ich zawartości.
</p>

</body>
</section>
<section>
<title>Instalacja wymaganego oprogramowania</title>
<body>

<p>
Na sam początek należy zainstalować GnuPG za pomocą polecenia <c>emerge
gnupg</c>. Wiele programów ma obecnie pewnego rodzaju wsparcie dla gpg, tak więc
posiadanie flagi <e>crypt</e> w zmiennej USE jest bardzo zalecane. Warto mieć
program do obsługi poczty elektronicznej pozwalający na korzystanie z gnupg.
Można w tym celu zainstalować pine (<c>emerge pinepgp</c>), mutt (<c>emerge
mutt</c>), Kuriera Poczty z pakietu Mozilla/Netscape, evolution (evolution jest
wchodzącym w skład GNOME odpowiednikiem Microsoft Outlook) lub klienta poczty z
KDE - KMail (KMail jest częścią pakietu kdepim).
</p>

<p>
Osoby korzystające z KDE może zainteresować <c>Kgpg</c>. Ten mały program
umożliwia generowanie kluczy, importowanie kluczy z plików ASCII, podpisywanie
zaimportowanych kluczy, eksportowanie kluczy oraz wiele innych rzeczy.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Generowanie i dodawanie kluczy do publicznej bazy kluczy</title>
<section>
<title>Generowanie klucza</title>
<body>

<p>
Aby wygenerować klucz, wpisujemy <c>gpg --gen-key</c>. Przy pierwszym
uruchomieniu, zostanie stworzonych kilka katalogów. Aby wygenerować klucze
należy ponownie wykonać polecenie:
</p>

<pre caption="przebieg generowania klucza">
$ <i>gpg --gen-key</i> gpg (GnuPG)
1.2.6; Copyright (C) 2004 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.

Please select what kind of key you want:
   (1) DSA and ElGamal (default)
   (2) DSA (sign only)
   (4) ElGamal (sign and encrypt)
   (5) RSA (sign only)
   Your selection? <i>1</i>
</pre>

<p>
Tutaj można wybrać rodzaj klucza którego chcemy używać. Większość użytkowników
wybierze domyślne DSA i ElGamal. Następnie wybieramy długość klucza - należy
pamiętać, że im dłuższy klucz tym lepszy, ale nie powinno się używać kluczy DSA
i ElGamal dłuższych niź 2048. Generalnie 1024 to więcej niż potrzeba do
normalnej poczty.
</p>

<p>
Po długości klucza pora na datę wygaśnięcia. Tutaj im mniej tym lepiej, jednakże
większość użytkowników może wybrać 0 (klucz nigdy nie wygasa) lub jakieś 2 lub 3
lata.
</p>

<pre caption="Wybór długości klucza" >
DSA keypair will have 1024 bits.
About to generate a new ELG-E keypair.
              minimum keysize is  768 bits
              default keysize is 1024 bits
    highest suggested keysize is 2048 bitszwi
    What keysize do you want? (1024) <i>2048</i>
Requested keysize is 2048 bits
Please specify how long the key should be valid.
         0 = key does not expire
 &lt;n&gt;= key expires in n days
 &lt;n&gt;w = key expires in n weeks
 &lt;n&gt;m = key expires in n months
 &lt;n&gt;y = key expires in n years
 Key is valid for? (0) <i>0</i>
Key does not expire at all
</pre>

<p>
Teraz pora na podanie danych osobowych użytkownika. Jeśli klucz ma być później
wysłany do innych osób, należy podać prawdziwy adres email.
</p>

<pre caption="Wprowadzanie danych osobowych" >
Is this correct (y/n)? <i>y</i>

You need a User-ID to identify your key; the software constructs the user id
from Real Name, Comment and Email Address in this form:
"Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;"

Real name: <i>John Doe</i>
Email address: <i>john@nowhere.someplace.flick</i>
Comment: <i>The Real John Doe</i>
You selected this USER-ID:
"John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? <i>O</i>
You need a Passphrase to protect your secret key.

Enter passphrase:
</pre>

<p>
Należy dwukrotnie podać hasło. Zalecane jest użycie mocnego hasła. Jeśli
ktokolwiek kiedykolwiek zdobędzie klucz prywatny i złamie to hasło, będzie mógł
wysyłać wiadomości podpisane przez "nas" sprawiając że wszyscy będą wierzyć, że
poczta jest od nas.
</p>

<p>
Teraz GnuPG wygeneruje klucz. Poruszanie myszką lub odtwarzanie w tle pliku mp3
pomoże przyśpieszyć ten proces, ponieważ generuje on losowe dane.
</p>

</body>
</section>
<section>
<title>Generowanie certyfikatu unieważnienia</title>
<body>

<impo>
Ta część jest bardzo ważna i musi być wykonana <e>TERAZ</e>.
</impo>

<p>
Po utworzeniu kluczy należy utworzyć certyfikat unieważnienia. Pozwoli to
unieważnić klucz w przypadku gdy coś złego się z nim stanie (ktoś zdobędzie nasz
klucz/hasło).
</p>

<pre caption="Generowanie certyfikatu unieważnienia">
$ <i>gpg --list-keys</i>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;
sub  2048g/96D6CDAD 2002-12-08

$ <i>gpg --output revoke.asc --gen-revoke 75447B14</i>

sec  1024D/75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;

Create a revocation certificate for this key? <i>y</i>
Please select the reason for the revocation:
  0 = No reason specified
  1 = Key has been compromised
  2 = Key is superseded
  3 = Key is no longer used
  Q = Cancel
(Probably you want to select 1 here)
Your decision? <i>1</i>
Enter an optional description; end it with an empty line:
&gt; <i>Someone cracked me and got my key and passphrase</i>
&gt;
Reason for revocation: Key has been compromised
Someone cracked me and got my key and passphrase
Is this okay? <i>y</i>

You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"
1024-bit DSA key, ID 75447B14, created 2002-12-08

ASCII armored output forced.
Revocation certificate created.

Please move it to a medium which you can hide away; if Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just in case
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!
</pre>

<p>
Polecenie <c>gpg --list-keys</c> wypisuje klucze należące do naszej bazy kluczy.
Można dzięki niemu sprawdzić ID klucza co pozwoli na wygenerowanie certyfikatu
unieważnienia. Teraz dobrym pomysłem będzie skopiowanie całego katalogu .gnupg
oraz certyfikatu unieważniającego (w formacie ASCII - <path>revoke.asc</path>)
na jakiś bezpieczny nośnik (dwie dyskietki lub płyta CD-R przechowywane w
bezpiecznym miejscu). Trzeba pamiętać, że plik <path>revoke.asc</path> może być
użyty do unieważnienia naszych kluczy, co sprawi, że staną się bezużyteczne.
</p>

<note>
Jeśli z tym kluczem ma być używanych kilka adresów poczty elektronicznej, można
wykonać polecenie <c>gpg --edit-key NASZE_ID</c> i użyć komendy <c>adduid</c>.
Program zapyta o nazwę, adres email i numer kolejnego ID które będzie używane.
</note>

</body>
</section>
<section>
<title>Eksport kluczy</title>
<body>

<p>
Aby wyeksportować klucz, należy wpisać <c>gpg --armor --output john.asc --export
john@nowhere.someplace.flick</c>. Zawsze można użyć ID klucza lub czegokolwiek
co go zidentyfikuje (tutaj użyliśmy adresu email). Teraz John posiada plik
<path>john.asc</path>, który można wysłać znajomym lub umieścić na stronie
internetowej tak, aby inni mogli się z nami bezpiecznie komunikować.
</p>

</body>
</section>
<section>
<title>Importowanie kluczy</title>
<body>

<p>
Aby dodać pliki do naszej bazy kluczy, należy je najpierw zaimportować, a
następnie sprawdzić odcisk klucza. Po zweryfikowaniu odcisku klucza należy go
potwierdzić.
</p>

<note>
Należy być ostrożnym przy weryfikacji kluczy. To jest jeden ze słabych punktów
tego systemu.
</note>

<p>
Teraz dodamy klucz Luisa Pinto (naszego przyjaciela) do naszej bazy kluczy. Po
zadzwonieniu do niego i zapytaniu o odcisk jego klucza (fingerprint), porównałem
go z wynikiem polecenia <c>fpr</c>. Ponieważ klucz jest prawdziwy, dodałem go do
publicznej bazy kluczy. W tym szczególnym przypadku klucz Luisa wygaśnie
2003-12-01, więc zostałem zapytany czy chcę by mój podpis jego klucza wygasła w
tym samym czasie.
</p>

<pre caption="Importowanie i podpisywanie kluczy">
$ <i>gpg --import luis.asc</i>
gpg: key 462405BB: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
$ <i>gpg --list-keys</i>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;
sub  2048g/96D6CDAD 2002-12-08

pub  1024D/462405BB 2002-12-01 Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;
uid                            Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
sub  4096g/922175B3 2002-12-01 [expires: 2003-12-01]

$ <i>gpg --edit-key lmpinto@dei.uc.pt</i>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.


gpg: checking the trustdb
gpg: checking at depth 0 signed=0 ot(-/q/n/m/f/u)=0/0/0/0/0/1
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
sub  4096g/922175B3  created: 2002-12-01 expires: 2003-12-01
(1)  Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
(2). Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;

Command> <i>fpr</i>
pub  1024D/462405BB 2002-12-01 Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
     Command> <i>sign</i>
Really sign all user IDs? <i>y</i>

pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB

     Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
     Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;

This key is due to expire on 2003-12-01.
Do you want your signature to expire at the same time? (Y/n) <i>Y</i>
How carefully have you verified the key you are about to sign actually belongs
to the person named above?  If you don't know what to answer, enter "0".

   (0) I will not answer. (default)
   (1) I have not checked at all.
   (2) I have done casual checking.
   (3) I have done very careful checking.

   Your selection? <i>3</i>
Are you really sure that you want to sign this key
with your key: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"

I have checked this key very carefully.

Really sign? <i>y</i>

You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"
1024-bit DSA key, ID 75447B14, created 2002-12-08

Command> <i>check</i>
uid  Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhe
uid  Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhe
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Wymiana kluczy z serwerami kluczy</title>
<section>
<title>Wysyłanie kluczy do serwerów kluczy</title>
<body>

<p>
Teraz, kiedy mamy już nasz klucz, dobrym pomysłem będzie wysłanie go do
ogólnodostępnego serwera kluczy. Na świecie jest wiele serwerów i większość z
nich wymienia klucze między sobą. My wyślemy klucz Luisa do serwera pgp.mit.edu.
Użyjemy protokołu HTTP, więc jeśli używany jest serwer proxy dla ruchu HTTP
należy pamiętać o jego konfiguracji (<c>export
http_proxy=http://proxy_host:port/</c>). Polecenie do wysyłania klucza to:
<c>gpg --keyserver pgp.mit.edu --keyserver-options honor-http-proxy --send-key
75447B14</c> gdzie <c>75447B14</c> to ID klucza. Jeśli nie jest używany serwer
proxy można usunąć opcję <e>--keyserver-options honor-http-proxy</e>.
</p>

<p>
Na serwer można także wysłać podpisane przez nas klucze innych osób. Moglibyśmy
wysłać klucz Luisa Pinto. W ten sposób ktoś kto nam ufa, może użyć naszego
podpisu by zaufać kluczowi Luisa.
</p>

</body>
</section>
<section>
<title>Pobieranie kluczy z serwerów</title>
<body>

<p>
Poszukamy klucza Gustavo Felisberto i dodamy do bazy kluczy Johna Doe.
</p>

<pre caption="Szukanie kluczy na serwerach">
$ <i>gpg --keyserver pgp.mit.edu --keyserver-options honor-http-proxy --search-keys humpback@felisberto.net</i>
gpg: searching for "humpback@felisberto.net" from HKP server pgp.mit.edu
Keys 1-5 of 5 for "humpback@felisberto.net"
(1)Gustavo Felisberto (apt-get install anarchy) &lt;humpback@felisberto.net&gt; 1024
  created 2002-12-06, key B9F2D52A
(2)Gustavo Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1999-08-03, key E97E0B46
(3)Gustavo A.S.R. Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1998-12-10, key B59AB043
(4)Gustavo Adolfo Silva Ribeiro Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1998-08-26, key 39EB133D
(5)Gustavo Adolfo Silva Ribeiro Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1998-06-14, key AE02AF87
  Enter number(s), N)ext, or Q)uit &gt;<i>1</i>
gpg: requesting key B9F2D52A from HKP keyserver pgp.mit.edu
gpg: key B9F2D52A: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>

<p>
Jak widać z odpowiedzi serwera, jest na nim kilka naszych kluczy, ale aktualnie
używamy tylko <e>B9F2D52A</e>. Teraz John Doe może go pobrać i podpisać jeśli mu
ufa.
</p>

</body>
</section>
</chapter>

<chapter id="gpg-agent">
<title>Używanie agenta GPG</title>
<section>
<title>Co to jest agent GPG?</title>
<body>

<p>
Pracując z pewnymi aplikacjami z użyciem swojego klucza GPG dosyć często trzeba
wpisywać wiele razy swoje hasło. Niektóre aplikacje pamiętają raz wpisane hasło
by ułatwić życie użytkownikowi, co jednak nie pozwala na dzielenie tego
zapamiętanego hasła z innymi aplikacjami.
</p>

<p>
Agent GPG jest osobnym programem używanym przez GPG to zapamiętywania wpisanych
haseł w ustandardyzowany i bezpieczny sposób. Pozwala on aplikacjom używać GPG
równolegle: jeśli podamy hasło pracując z jakąś aplikacją, inne mogą używać GPG
bez ponawiania prośby o wpisanie hasła - oczywiście jeśli agent jest tak
skonfigurowany by na to pozwalać.
</p>

<p>
Gentoo udostępnia kilka aplikacji agenta GPG. <c>app-crypt/gpg-agent</c> może
być uważany za tego zalecanego i właśnie z niego będziemy korzystać w tym
dokumencie.
</p>

</body>
</section>
<section>
<title>Instalacja i konfiguracja programów gpg-agent oraz pinentry</title>
<body>

<p>
Należy oczywiście zainstalować pakiet <c>gpg-agent</c> oraz <c>pinentry</c>,
który jest pomocniczą aplikacją używaną przez agenta do zapytania o hasło w
graficznym okienku. Posiada on trzy tryby pracy: może wyświetlić okienko
używając biblioteki gtk+, Qt lub curses (w zależności od flagi USE podczas
instalacji).
</p>

<pre caption="Instalacja gpg-agent oraz pinentry">
# <i>emerge gpg-agent pinentry</i>
</pre>

<p>
Następnie należy utworzyć plik <path>~/.gnupg/gpg-agent.conf</path> i wstawić
następujące linie, które zdefiniują domyślny czas życia wpisanego hasła (np. 30
minut) oraz aplikację, której należy użyć w celu pobrania hasła za pierwszym
razem (np. wersję Qt programu pineentry).
</p>

<pre caption="Edycja ~/.gnupg/gpg-agent.conf">
pinentry-program /usr/bin/pinentry-qt
no-grab
default-cache-ttl 1800
</pre>

<p>
Teraz skonfigurujemy program GnuPG by używał agenta gdy zajdzie taka potrzeba.
Należy otworzyć w edytorze plik <path>~/.gnupg/gpg.conf</path> i dodać do niego
następującą linię:
</p>

<pre caption="Konfiguracja GnuPG z agentem GPG">
use-agent
</pre>

<p>
Teraz system jest już (prawie) gotowy do użycia agenta GPG.
</p>

</body>
</section>
<section>
<title>Automatyczne uruchamianie agenta GPG</title>
<body>

<p>
Jeśli jako środowisko graficzne używane jest KDE, trzeba otworzyć plik
<path>/usr/kde/3.x/env/agent-startup.sh</path> (ustawienia globalne systemu) lub
<path>~/.kde/env/gpgagent.sh</path> (ustawienia użytkownika) i dodać następujące
polecenie by KDE automatycznie uruchomiło agenta przy starcie:
</p>

<pre caption="Sprawianie by KDE automatycznie uruchamiało agenta GPG">
eval "$(gpg-agent --daemon)"
</pre>

<p>
Jeśli używane jest inne środowisko graficzne, trzeba dodać taką samą linię do
<path>~/.xinitrc</path> (jeśli używane jest polecenie <c>startx</c>) lub
<path>~/.xsession</path> (jeśli używany jest XDM/GDM/KDM/...).
</p>

</body>
</section>
</chapter>

<chapter>
<title>Praca z dokumentami</title>
<section>
<title>Szyfrowanie i podpisywanie</title>
<body>

<p>
Powiedzmy, że mamy plik, który chcemy wysłać Luisowi. Można go zaszyfrować,
podpisać lub zaszyfrować i podpisać. Szyfrowanie oznacza, że tylko Luis będzie
mógł go otworzyć. Podpis zapewni Luisa że to naprawdę my stworzyliśmy plik.
</p>

<p>
Kolejne trzy polecenia zaszyfrują i podpiszą plik.
</p>

<pre caption="Szyfrowanie i podpisywanie plików">
$ <i>gpg --output doc.gpg --encrypt --recipient lmpinto@dei.uc.pt doc_to_encrypt</i>
$ <i>gpg --output doc.gpg --sign --recipient lmpinto@dei.uc.pt doc_to_sign</i>
$ <i>gpg --output doc.gpg --encrypt --sign --recipient lmpinto@dei.uc.pt doc_to_encrypt_and_sign</i>
</pre>

<p>
Utworzone zostaną pliki binarne. Aby utworzyć pliki ASCII, trzeba dodać
<c>--clearsign</c> na początku polecenia.
</p>

</body>
</section>
<section>
<title>Deszyfrowanie i weryfikacja podpisów</title>
<body>

<p>
Załóżmy że dostaliśmy plik, który jest zaszyfrowany. Polecenie do deszyfracji to
<c>gpg --output document --decrypt encrypted_doc.gpg</c>. Rozszyfruje ono
dokument i sprawdzi podpis (jeśli istnieje).
</p>

</body>
</section>
<section>
<title>Zaawansowana funkcjonalność</title>
<body>

<p>
GnuPG ma kilka przyjemnych zaawansowanych funkcji. Aby je odnaleźć, należy
otworzyć plik <path>~/.gnupg/gpg.conf</path>.
</p>

<pre caption="~/.gnupg/gpg.conf">
#keyserver x-hkp://pgp.mit.edu
#keyserver-options auto-key-retrieve include-disabled include-revoked
</pre>

<p>
Jeśli dwie powyższe linie zostaną odkomentowane, za każdym razem gdy GnuPG
będzie musiał sprawdzić podpis a nie będzie mógł go znaleźć w lokalnej bazie
kluczy skontaktuje się z serwerem <uri
link="http://pgp.mit.edu">pgp.mit.edu</uri> i spróbuje go stamtąd pobrać.
</p>

<p>
Kolejne przyjemne polecenie to <c>gpg --refresh-keys</c>. Skontaktuje się ono z
serwerem zdefiniowanym w pliku konfiguracyjnym i odświeży klucze publiczne z
lokalnej bazy kluczy, szukając unieważnionych kluczy, nowych ID i nowych
podpisów. To polecenie powinno być uruchamiane dwa razy w miesiącu tak aby być
powiadomionym gdy ktoś unieważni swój klucz.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Interfejsy do GnuPG</title>
<section>
<title>O podpisach w poczcie elektronicznej</title>
<body>

<p>
W 95% GnuPG używany jest wraz z pocztą elektroniczną, podpisywania i szyfrowania
wychodzącej poczty lub czytania podpisanych i zaszyfrowanych wiadomości. Tak
więc napiszę o tym na samym początku.
</p>

<p>
Są dwa sposoby na podpisanie, czy szyfrowanie poczty przy użyciu GnuPG, stary i
nowy. W starym stylu wiadomości pojawiłyby się jako zwykły tekst, bez możliwości
formatowania, a załączone pliki nie byłyby podpisane/szyfrowane. Oto przykład
wiadomości podpisanej starym sposobem:
</p>

<pre caption="Podpis zwykłego niesformatowanego tekstu">
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Test message

-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 6.5.8 for non-commercial use

iQA/AwUBP8461jMX0745gR7AEQIEOwCg011GbufXO3ED3FkLWXmfzg7xm1cAoJD0
0EU3Kd2EKNCqataEqM5qjpPs
=LchZ
-----END PGP SIGNATURE-----
</pre>

<p>
Wiadomości tego rodzaju nie są dobre w dzisiejszym świecie, gdzie mamy ładne
graficzne interfejsy i programy pocztowe akceptujące HTML.
</p>

<p>
Aby rozwiązać ten problem stworzono dodatek do MIME (Multipurpose Internet Mail
Extensions). Dodaje on do wiadomości pole mówiące programowi pocztowemu, że cała
zawartość wiadomości jest podpisana i/lub zaszyfrowana. Jedyny problem w takim
rozwiązaniu to fakt, że nie wszystkie programy pocztowe je obsługują. Niektóre
nawet zmieniają zawartość wiadomości, znanym przykładem programu nie
współpracującego z tym rozwiązaniem jest Microsoft Outlook.
</p>

</body>
</section>
<section>
<title>Kgpg</title>
<body>

<p>
Kgpg to przyjemny interfejs do GnuPG. W głownym oknie można wklejać tekst, który
ma byś podpisany lub szyfrowany, a także można wkleić tekst w formacie ASCII,
który ma być rozszyfrowany.
</p>

<figure link="/images/kgpg1.png" short="Główne okno kgpg"/>

<p>
Na obrazku widać główne okno Kgpg z wklejonym zaszyfrowanym tekstem. Stąd można
go rozszyfrować (trzeba będzie podać hasło), szyfrować inne pliki, wkleić nowy
tekst do podpisania...
</p>

<figure link="/images/kgpg2.png" short="Okno zarządzania kluczami"/>

<p>
Tak wygląda okno zarządzania kluczami. Widać w nim znany nam klucz Johna Doe.
Dwa zaufane klucze Gustavo i Luisa i niezaufany klucz Daniela Robbinsa (nadal
nie zadzwoniłem do niego by sprawdzić jego odcisk :) ).
</p>

</body>
</section>
<section>
<title>Seahorse</title>
<body>

<p>
Seahorse ma być docelowo interfejsem do GnuPG przeznaczonym dla środowiska
Gnome. To oprogramowanie rozwija się bardzo szybko, jednakże nadal brakuje mu
wielu ważnych funkcji, które można znaleźć w Kgpg lub wersji uruchamianej z
wiersza poleceń.
</p>

</body>
</section>
<section>
<title>Mozilla Enigmail</title>
<body>

<p>
Mozilla od wersji 1.0 wzwyż zawiera Enigmail, wtyczkę do klienta poczty, która
jest bardzo łatwa w konfiguracji. Wystarczy otworzyć Preferencje -&gt;
Prywatność i Zabezpieczenia -&gt; Enigmail. Następnie jedyne co trzeba zrobić,
to podać określony klucz i adres email.
</p>

<p>
Przychodzące wiadomości które zawierają inny niż zaufany podpis będą oznaczone
złapanym piórem. Pozostałe z zaufanym podpisem będą oznaczone ładnym prostym
piórem. Enigmail potrafi także pobierać klucze z serwerów, jednak jeśli napotka
jakieś problemy wypisuje bardzo dziwne komunikaty (ale nadal pamiętamy jak użyć
narzędzia z wiersza polecenia, zgadza się?).
</p>

</body>
</section>
<section>
<title>KMail</title>
<body>

<p>
Jeśli zmienna USE zawiera flagę <c>crypt</c>, KMail będzie skompilowane ze
wsparciem dla gpg i będzie miał możliwość automatycznego szyfrowania i
deszyfrowania wiadomości w starym formacie PGP, a także szyfrowania wiadomości w
formacie OpenPGP/MIME. Jeśli program ma deszyfrować wiadomości OpenPGP/MIME
(czego zapewne chcemy) należy użyć agenta GPG (<uri link="#gpg-agent">Używanie
agenta GPG</uri>).
</p>

<p>
Można sprawdzić czy KMail jest poprawnie skonfigurowany wchodząc w
<c>Settings</c>, <c>Configure KMail</c>, <c>Security</c>, <c>Crypto
Backends</c>. Na liście powinien znajdować się wpis GpgME-based i możliwość
zaznaczenia pola OpenPGP. Jeśli wpis znajduje się na liście, ale pole jest
nieaktywne, należy kliknąć przycisk <c>Rescan</c>. Jeśli GpgME-based nadal jest
nieaktywne, oznacza to, że KMail nie działa poprawnie.
</p>

</body>
</section>
<section>
<title>Sylpheed-Claws</title>
<body>

<p>
To jest program pocztowy, który jest dla mnie najlepszym wyborem. Jest
<e>bardzo</e> szybki przy pracy z dużymi skrzynkami, posiada wszystkie fajne
funkcje, których można wymagać od programu pocztowego i całkiem dobrze
współpracuje z gpg. Jedyny problem, to fakt, że nie współpracuje z podpisami PGP
starego typu, tak więc jeśli się otrzyma taką wiadomość trzeba samemu sprawdzać
jej podpis.
</p>

<p>
Aby użyć gpg z programem Sylpheed-Claws wystarczy wejść w konfigurację konta i
wybrać zakładkę prywatność. Po czym należy wybrać klucz, który będzie używany.
Prawdopodobnie większość użytkowników zostawi domyślnie wybrany klucz.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Kryptografia przy użyciu klucza publicznego</title>
<section>
<title>Podstawy szyfrowania przy użyciu klucza publicznego</title>
<body>

<p>
Pomysł szyfrowania przy użyciu klucza publicznego został wymyślony przez
Whitfielda Diffie i Martina Hellmana w 1976 roku. Kiedy po raz pierwszy
usłyszałem słowa "klucz publiczny" i "kryptografia" w tym samym zdaniu w roku
1993 pomyślałem, że niemożliwe by coś takiego dało się zrobić. W tamtych czasach
nie było Internetu (właściwie to już był, ale nie dla mnie), więc udałem się do
publicznej biblioteki i zapytałem o książki poświęcone kryptografii. Muszę
przyznać, że miałem wtedy 16 lat, więc bibliotekarz spojrzał na mnie ze
zdumieniem i przyniósł mi książkę dla dzieci o szyfrowaniu przez podstawianie
(to takie, w których zamienia się literę na jakąś inną jak w znanym Szyfrze
Cezara lub ROT-13 (Tragbb emnqmv, mncenfmnzl qb qnyfmrw yrxghel grtb grxfgh.
Gnx, mnfmlsebjnyvfzl gb cbabjavr bq abjn ceml gyhznpmravh, pb cbgjvreqmn anfmn
pubebor cflpuvpman).  (program rotix pomoże w odszyfrowaniu powyższej
wiadomości). Byłem bardzo zawiedziony i zacząłem szukać szerszych informacji.  W
takich wypadkach dobrze jest mieć w rodzinie matematyka, po rozmowie z nim
szybko otworzył się przede mną nowy, fascynujący świat.
</p>

<p>
A teraz troszkę matematyki:
</p>

<pre caption="Pojęcia matematyczne">
Definicje:

1- Liczba pierwsza to dodatnia liczba całkowita która jest podzielna tylko przez
1 i samą siebie (reszta z dzielenia wynosi 0).
Pierwszych 8 liczb pierwszych to 1,2,3,5,7,11,13,17

Twierdzenie (bez dowodu)
1- Każdą dodatnią liczbę złożoną (czyli taką, która nie jest liczbą pierwszą)
można rozbić na iloczyn liczb pierwszych i ten iloczyn jest unikalny.
4=2*2
6=2*3
8=2*4=2*2*2
10=2*5
12=2*6=2*2*3

"Fakty":
1- Z matematycznego punkty widzenia łatwo jest pomnożyć dwie duże liczby
całkowite.
2- Ciężko jest znaleźć czynniki pierwsze danej liczby całkowitej.
</pre>

<p>
Jeśli wezmę liczbę 35 i powiem, że ta liczba jest iloczynem dwóch liczb
pierwszych, łatwo zgadnąć, że te liczby to 5 i 7. Ale jeśli powiem to samo o
liczbie 1588522601, trzeba poświęcić dużo czasu (lub cykli procesora) by
odgadnąć że to 49811*31891. Jeśli ta liczba jest bardzo duża to zadanie staje
się "niewykonalne". Tak więc jeśli dam światu moją wielką liczbę, która jest
iloczynem dwóch liczb pierwszych, wiem coś o tej liczbie, czego nikt inny nie
wie.
</p>

<p>
To jest podstawą dzisiejszych implementacji kryptografii przy użyciu Klucza
Publicznego. Jako przykład, dam komuś swoją liczbę której będzie używał do
szyfrowania wiadomości do mnie. Każdy może zobaczyć zaszyfrowaną wiadomość, ale
tylko ja znam skrót do jej przeczytania, pozostali musieliby najpierw "rozbić"
tę wielką liczbę by móc przeczytać wiadomość, a faktem jest, że tego się nie da
zrobić w krótkim czasie (dzisiejsze metody i najszybsze komputery na świecie do
wykonania tego potrzebują tysiące lat). W tej konfiguracji dwie wielkie liczby
pierwsze byłyby nazwane KLUCZEM PRYWATNYM, a wielka liczba złożona jest KLUCZEM
PUBLICZNYM.
</p>

<p>
W praktyce to nie jest w 100% zgodne z rzeczywistością, ale daje dobre
wyobrażenie dla nowicjusza. Więcej informacji można znaleźć na hack.gr w artykule
<uri
link="http://www.hack.gr/users/dij/crypto/overview/diffie.html">Diffie-Hellmana</uri>.
Jeszcze więcej informacji można znaleźć w publicznej bibliotece w książce <uri
link="http://www.cacr.math.uwaterloo.ca/hac/">"Podręcznik Kryptografii
Stosowanej"</uri> Alfreda J. Menezesa, Paula C. van Oorschota i Scotta A.
Vanstone'a, ta książka jest także dostępna on-line na wyżej podanej stronie.
</p>

<p>
Konsekwencją powyższego jest to, że jeśli się szyfruje dla kogoś wiadomość i
zgubi się oryginalny tekst, nie ma możliwości odzyskania go z zaszyfrowanej
wersji.
</p>

</body>
</section>
<section>
<title>Podpisy</title>
<body>

<p>
Już się dowiedzieliśmy w jaki sposób ktoś może wysłać nam zaszyfrowaną wiadomość
jeśli ma nasz klucz publiczny. Ale jak możemy sprawdzić że autor wiadomości jest
rzeczywiście tym za kogo się podaje? Innymi słowy: Jeśli otrzymam od kogoś
wiadomość skąd naprawdę mogę wiedzieć że jest od niego, a nie kogoś innego?
</p>

<p>
Pamiętacie jak powiedziałem że Kryptografia Kluczem Publicznym nie jest taka
prosta jak mówię? Pomysł jest taki, że kiedy się szyfruje wiadomość podpisuje
się ją swoim kluczem prywatnym, tak że kiedy ktoś ją dostanie najpierw używa
naszego publicznego klucza do sprawdzenia podpisu, a następnie swojego
prywatnego klucza do rozszyfrowania wiadomości. Jak widać nie da się tego zrobić
w konfiguracji jaką wcześniej opisałem.
</p>

<p>
Kolejną ważną rzeczą jest to, że nie trzeba szyfrować wiadomości którą chcemy
podpisać. Tak więc można tworzyć "podpisane" wiadomości które każdy będzie mógł
przeczytać. Co więcej jeśli jakakolwiek litera zostanie zmieniona możliwe będzie
natychmiastowe wykrycie tego faktu.
</p>

</body>
</section>
<section>
<title>Serwery kluczy i podpisane klucze</title>
<body>

<p>
Powiedzmy że nigdy wcześniej nie kontakowałem się z kimś kto mi wysyła
wiadomość, skąd mam wziąć jego klucz publiczny, i skąd mam wiedzieć że należy on
napewno do niego?
</p>

<p>
Aby rozwiązać ten problem stworzone zostały Serwery Kluczy. Gdy się tworzy swoją
parę kluczy (Publiczny i Prywatny) wysyła  się swój klucz publiczny do serwera.
Od tego momentu każdy może stamtąd otrzymać nasz klucz. To rozwiązuje problem
znalezienia czyjegoś klucza. Ale skąd mam napewno wiedzieć że klucz jest kluczem
autora? Do tego musi powstać kolejne rozwiązanie i to jest właśnie podpisywanie
kluczy:
</p>

<p>
Podpisywanie kluczy oznacza to że jeśli sie posiada klucz publiczny innej osoby,
taki że ma się <e>pewność</e> że to jest jej klucz (przyjaciel lub ktoś kogo się
zna itd.) można podpisać ten publiczny klucz i wysłać go do serwera, w ten
sposób mówi się światu: "Ten klucz naprawdę należy do osoby która tak
twierdzi.". Tym sposobem osoby posiadające mój publiczny klucz i ufające mi mogą
użyć tego zaufania by zaufać innym kluczom.
</p>

<p>
To może być czasami mylące więc zobaczmy jak to działa w prawdziwym świecie
</p>

<p>
Wyobraźmy sobie 3 osoby: Johna, Mary i Lisę. John jest dobrym przyjacielem Mary,
ale nie zna Lisy; Lisa jest dobrą przyjaciółką Mary, ale nie zna Johna. Pewnego
dnia Lisa wysyła Johnowi podpisaną wiadomość. John pobierze klucz Lisy z
publicznego serwera i sprawdzi wiadomość. Jeśli wszystko dobrze pójdzie zobaczy
on, że ktokolwiek podpisał wiadomość, także wygenerował ten klucz. Ale skąd
wiedzieć, że to na pewno jest osobą, za którą się podaje?
</p>

<p>
Wtedy John widzi że ten klucz jest podpisany przez Mary, którą może sprawdzić
ponieważ posiada jej klucz i mu ufa. Z tego kręgu zaufania wyciąga wniosek że ta
wiadomość napewno została napisana przez Lisę.
</p>

<p>
Teraz jesteśmy gotowi do przeczytania tego przewodnika, można wrócić do
pierwszego rozdziału i nauczyć się korzystać z gpg.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Końcowe przemyślenia i podziękowania</title>
<section>
<title>Pewne problemy</title>
<body>

<p>
Miałem problemy ze zdjęciami w kluczach. Należy sprawdzić wersję której się
używa. Jeśli używane jest GnuPG 1.2.1-r1 wszystko prawdopodobnie jest w
porządku, ze starszymi wersjami mogły być problemy. Także większość serwerów nie
lubi kluczy ze zdjęciami, więc lepiej ich jednak nie dodawać.
</p>

<p>
Najnowsze wersje gpg zdają się nie działać z poleceniem <c>gpg --send-keys</c>,
które było użyte do wysłania wszystkich posiadanych kluczy do serwera.
</p>

</body>
</section>
<section>
<title>Czego brakuje w tym tekście</title>
<body>

<p>
<c>gpg</c> to bardzo rozbudowane narzędzie, pozwala zrobić dużo więcej niż tu
napisałem. Ten przewodnik jest dla nowych użytkowników GnuPG. Po więcej informacji
należy wejść na <uri link="http://www.gnupg.org">stronę domową GnuPG</uri>.
</p>

<p>
Nie pisałem o innych narzędziach niż <c>pgp4pine</c>, <c>gpgpine</c>,
<c>evolution</c> i być może programach dla Windows, ale prawdopodobnie rozszerzę
ten dokument w przyszłości.
</p>

</body>
</section>
<section>
<title>Podziękowania</title>
<body>

<p>
Dla Johna Michaela Ashleya za <uri link="http://www.gnupg.org">Podręcznik
GnuPG</uri>, który jest bardzo dobrą pozycją dla początkujących.
</p>

<p>
Dla Swifta (Svena Vermeulena) za zmuszenie mnie do przepisania tego tekstu.
</p>

<p>
Wszystkim z ekipy #gentoo-doc - chłopaki, rządzicie!
</p>

<p>
Dla Tiago Serra za wprowadzenie mnie w tematy dotyczące prywatności.
</p>

</body>
</section>
</chapter>
</guide>
