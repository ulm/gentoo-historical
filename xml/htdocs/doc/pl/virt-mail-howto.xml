<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- Orig revision: 1.45 -->
<!-- Translator: aleander <aleander@gmail.com> -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/virt-mail-howto.xml,v 1.2 2005/07/04 23:24:50 neysx Exp $ -->

<guide link="/doc/pl/virt-mail-howto.xml" lang="pl">
<title>Wirtualny system pocztowy oparty o Postfix</title>

<author title="Autor">
  <mail link="antifa@gentoo.org">Ken Nowack</mail>
</author>
<author title="Autor">
  <mail link="ezra@revoltltd.org">Ezra Gorman</mail>
</author>
<author title="Redaktor">
  <mail link="klasikahl@gentoo.org">Zack Gilburd</mail>
</author>
<author title="Redaktor">
  <mail link="seather@scygro.za.net">Scygro</mail>
</author>
<author title="Tłumacz">
  Aleksander Modzelewski
</author>

<abstract>
Ten dokument opisuje budowę systemu wirtualnego hostingu poczty opartego o
Postfix, mysql, courier-IMAP oraz cyrus-sasl.
</abstract>

<version>1.0.22</version>
<date>2005-05-29</date>

<!--
Contents

I. Introduction
II. Postfix Basics
III. Courier-IMAP
IV. Cyrus-sasl
V. SSL Certificates for Postfix and Apache
VI. Adding SSL and SASL support to Postfix
VII. MySQL
VIII. Apache and phpMyAdmin
IX. The vmail user
X. Configuring MySQL Authentication and vhosts
XI. Squirrelmail
XII. Mailman
XIII. Content Filtering and Anti-Virus
XIV. Wrap Up
XV. Troubleshooting
-->

<!--
I. Wprowadzenie
II. Podstawy Postfiksa
III. Courier-IMAP
IV. Cyrus-sasl
V. Certyfikaty SSL dla Postfiksa oraz Apache
VI. Dodawanie obsługi SSL oraz SASL do Postfiksa
VII. MySQL
VIII. Apache i phpMyAdmin
IX. Użytkownik vmail
X. Konfiguracja autentykacji MySQL oraz vhostów
XI. Squirrelmail
XII. Mailman
XIV. Zakończenie
XV. Rozwiązywanie problemów

-->

<chapter>
<title>Wprowadzenie</title>
<section>
<body>

<!-- [EDIT] w oryginale autor napisał "gentoo" z małej litery. Why? :> -->
<p>
Związane z pocztą elektroniczną potrzeby większości użytkowników Gentoo
może całkowicie zaspokajać prosty program kliencki oraz fetchmail. Do obsługi
całej domeny potrzebny jednak będzie kompletny MTA (ang. Mail Transfer Agent -
Agent Transferu Poczty). Natomiast jeśli istnieje potrzeba obsługi wielu domen,
do przesyłania całej poczty zdecydowanie potrzebne będzie coś bardziej wydajnego.
Ten system został opracowany jako eleganckie rozwiązanie tego problemu.
</p>

<p>
System poczty wirtualnej musi być zdolny do obsługi poczty wielu domen z
wieloma użytkownikami korzystającymi z różnych interfejsów. To stwarza pewne
problemy - na przykład, co zrobić kiedy dwóch użytkowników z różnych
domen chce mieć taki sam login? Jeżeli udostępniany jest IMAP oraz SMTP-AUTH,
jak połączyć zróżnicowane systemy uwierzytelniania w jedną usługę? Jak zapewnić
bezpieczeństwo dla licznych komponentów z których zbudowany jest system? Jak
zarządzać całością?
</p>

<!-- [EDIT] zmieniłem skróty na duże litery. W razie czego - sed -->
<p>
Ten podręcznik pokaże jak zbudować system do obsługi tylu domen, z iloma jest w
stanie sobie poradzić sprzęt obsługujący wirtualnych użytkowników, dla których
nie są niezbędne konta shellowe (z dostępem do powłoki), pozwala na powtarzanie
się loginów w różnych domenach, może uwierzytelniać klientów WWW, IMAP, SMTP i
POP3 z pojedynczej bazy danych, wykorzystuje SSL dla bezpieczeństwa warstwy
transportu, ma interfejs WWW, obsługuje listy dystrybucyjne dla wszystkich domen
na serwerze oraz jest kotrolowany ze zgrabnej, scentralizowanej i łatwej w
obsłudze bazy MySQL.
</p>

<p>
System wirtualnego mailhostingu można zbudować na wiele sposobów. Przy tak wielu
możliwościach inne rozwiązanie może okazać się w konkretnym przypadku lepsze.
Warto zapoznać się zatem z projektami opisanymi na stronach
<uri>http://www.qmail.org/</uri> oraz <uri>http://www.exim.org/</uri>.
</p>

<p>
W tym rozwiązaniu wykorzystane będą następujące pakiety: apache, courier-IMAP,
courier-authlib, postfix, mod_php, phpmyadmin, squirrelmail, cyrus-sasl, mysql, php
oraz mailman.
</p>

<p>
Należy się upewnić, że przed kompilacją zostały włączone następujące flagi USE
<path>/etc/make.conf</path>: <c>USE="mysql imap libwww maildir sasl
ssl"</c>. W przeciwnym wypadku konieczna może okazać się rekompilacja w celu
uzyskania obsługi wszystkich protokołów. Warto też wyłączyć pozostałe opcje
poczty oraz sieci - na przykład ipv6.
</p>

<impo>
Ten podręcznik został napisany dla Postfiksa w wersji 2.0.x. Jeśli w użyciu jest
wersja starsza, część zmiennych opisanych w tym dokumencie musi zostać
skorygowana. Zalecana jest aktualizacja. Niektóre z pozostałych wymienionych w
tym dokumencie pakietów jest również zależna od wersji. Sugerowane jest
przeczytanie dokumentacji załączonej do pakietów w razie napotkania problemów.
</impo>

<impo>
W tym dokumencie założono wykorzystanie Apache w wersji 1.3.x. Wprawdzie w
Portage Apache w wersji 2 zostało oznaczone jako stabilne, lecz nadal występują
problemy z integracją PHP. Dopóki obsługa PHP w Apache 2 nie zostanie oznaczona
jako stabilna ten podręcznik będzie nadal zakładał wykorzystanie wersji 1.3.x.
</impo>

<impo>
Do budowy publicznego serwera poczty niezbędna jest domena, a przynajmniej
rekord MX dla niej. Najlepiej byłoby kontrolować co najmniej dwie domeny w celu
wykorzystania nowych możliwości domen wirtualnych.
</impo>

<impo>
Należy upewnić się, że <path>/etc/hostname</path> jest ustawione na właściwą
nazwę hosta dla serwera poczty. Należy sprawdzić czy nazwa jest właściwie
skonfigurowana przy użyciu <c>hostname</c>. Należy też sprawdzić, czy nie ma
sprzecznych wpisów w <path>/etc/hosts</path>
</impo>

<note>
Zalecane jest przeczytanie całego dokumentu i zapoznanie się z wszystkimi
krokami przed podjęciem instalacji. Jeżeli w trakcie wykonywania któregokolwiek
z etapów wystąpią problemy, należy skonsultować się ze znajdującym się na końcu
podręcznika rozdziałem poświęconym rozwiązywaniu problemów. Dodatkowo nie
wszystkie pakiety są niezbędne, system jest bardzo elastyczny. Na przykład,
jeżeli nie jest potrzebny interfejs WWW, można bez obaw zignorować rozdział
poświęcony Squirrelmail.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Podstawy Postfiksa</title>
<section>
<body>

<pre caption="Instalacja Postfiksa">
# <i>emerge postfix</i>
</pre>

<warn>
Należy upewnić się, że nie jest zainstalowany żaden inny MTA (np. ssmtp, exim
albo qmail) albo z pewnością wystąpią DUŻE problemy.
</warn>

<p>
Po instalacji Postfiksa należy go skonfigurować. Następujące opcje w
<path>/etc/postfix/main.cf</path> powinny zostać zmienione:
</p>

<pre caption="/etc/postfix/main.cf">
myhostname = $host.domain.name
mydomain = $domain.name
inet_interfaces = all
mydestination = $myhostname, localhost.$mydomain $mydomain
mynetworks = numer.mojej.sieci.ip/24, 127.0.0.0/8
home_mailbox = .maildir/
local_destination_concurrency_limit = 2
default_destination_concurrency_limit = 10
</pre>
<!-- [EDIT] s/my.ip.net.work/numer.mojej.sieci.ip/. Dobrze? -->

<p>
Następnie należy zmienić <path>/etc/postfix/master.cf</path>. To spowoduje
zwiększenie ilości komunikatów, co ułatwi znajdowanie błędów.
</p>

<pre caption="/etc/postfix/master.cf">
# service type  private unpriv  chroot  wakeup  maxproc command + args
#               (yes)   (yes)   (yes)   (never) (50)
#
==========================================================================
<comment>(wystarcza dodać -v w następnym wierszu)</comment>
smtp      inet  n       -       n       -       -       smtpd -v
</pre>

<p>
Do pliku <path>/etc/mail/aliases</path> trzeba dodać lokalne aliasy. Musi być co
najmniej jeden wpis dla użytkownika root, taki jak <c>root: twój@adres.email</c>
</p>
<!-- [EDIT] Tutaj naprawdę ciężko ominąć słowo "twój" nie korzystając z foo -->

<pre caption="Pierwsze uruchomienie Postfiksa">
# <i>/usr/bin/newaliases</i>
<comment>(To spowoduje zainstalowanie nowych aliasów. Trzeba to robić tylko po
aktualizacji lub dodaniu aliasów.</comment>

# <i>/etc/init.d/postfix start</i>
</pre>

<p>
Teraz, gdy Postfix działa, należy wysłać do siebie wiadomość testową przy użyciu
wybranego klienta poczty. Autor tego dokumentu pod konsolą do całej poczty używa
programu <c>mutt</c>. Należy sprawdzić, czy poczta dociera do lokalnych
użytkowników, następnie można przejść do następnego kroku.
</p>

<note>
Jest bardzo zalecane, aby zweryfikować czy Postfix działa poprawnie przed
przejściem do czynności opisanych w dalszej części tekstu.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Courier-IMAP</title>
<section>
<body>

<pre caption="Emergowanie courier-imap i courier-authlib">
# <i>emerge courier-imap courier-authlib</i>
</pre>

<pre caption="Konfiguracja Courier-IMAP">
# <i>cd /etc/courier-IMAP</i>
<comment>(Jeśli potrzebne są możliwości ssl courier-IMAP lub pop3, należy
założyć w tym celu certyfikaty.  Ten krok jest zalecany. Jeżeli ssl nie jest
potrzebne, można go jednak zignorować)</comment>

# <i>nano -w pop3d.cnf</i>
# <i>nano -w IMAPd.cnf</i>
<comment>(Pola C, ST, L, CN oraz email muszą być zmodyfikowane tak, aby pasowały
do serwera)</comment>

# <i>mkpop3dcert</i>
# <i>mkIMAPdcert</i>
</pre>

<pre caption="Uruchomienie usług Courier IMAP">
# <i>/etc/init.d/courier-IMAPd start</i>
# <i>/etc/init.d/courier-IMAPd-ssl start</i>
# <i>/etc/init.d/courier-pop3d start</i>
# <i>/etc/init.d/courier-pop3d-ssl start</i>
</pre>

<p>
Teraz należy uruchomić klienta poczty i upewnić się, że wszystkie uruchomione
połączenia działają przy odbiorze i wysyłaniu poczty. Teraz, gdy podstawowe
komponenty działają, można zrobić jednocześnie kilka rzeczy i uruchomić resztę
systemu. Ponownie, prosimy o upewnienie się, że zainstalowane komponenty
działają przed kontynuacją.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Cyrus-sasl</title>
<section>
<body>

<p>
Następnie zainstalowany zostanie cyrus-sasl. SASL służy do przekazywania
parametrów uwierzytelniających do courier-auth, który z kolei przekaże je do MySQL w celu
uwierzytelnienia użytkowników SMTP. W tym podręczniku nawet nie spróbujemy
sprawdzić czy SASL działa przed instalacją MySQL oraz założeniem testowego konta
użytkownika. Nie stanowi to problemu, bo w ostateczności autoryzacja
będzie i tak
następowała za pośrednictwem MySQL.
</p>

<pre caption="Konfiguracja oraz instalacja Cyrus-sasl">
# <i>emerge cyrus-sasl</i>
</pre>

<p>
Następnie należy zmodyfikować <path>/etc/sasl2/smtpd.conf</path>.
</p>

<pre caption="Uruchamianie SASL">
# <i>nano -w /etc/sasl2/smtpd.conf</i>
mech_list: PLAIN LOGIN
pwcheck_method: saslauthd
# <i>nano -w /etc/conf.d/saslauthd</i>
SASLAUTHD_OPTS="${SASLAUTH_MECH} pam -r"
# <i>/etc/init.d/saslauthd start</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Certyfikaty SSL dla Postfiksa i Apache</title>
<section>
<body>

<p>
Następnie założymy zestaw certyfikatów ssl dla Postfiksa i Apache.
</p>

<pre caption="Tworzenie certyfikatów SSL">
# <i>cd /etc/ssl/</i>
# <i>nano -w openssl.cnf</i>

<comment>Zmodyfikuj następujące pola dla Swojej domeny:</comment>
countryName_default
stateOrProvinceName_default
localityName_default
0.organizationName_default
commonName_default
emailAddress_default.

<comment>(Jeśli zmiennych jeszcze nie ma, po prostu dodaj je we właściwym
miejscu)</comment>

# <i>cd misc</i>
# <i>nano -w CA.pl</i>
<comment> (Przy tworzeniu certyfikatu niezbędna jest opcja -nmodes aby nowe
certyfikaty ssl mogłby być ładowane bez użycia hasła. W przeciwnym wypadku przy
restarcie certyfikaty nie byłyby dostępne.)</comment>

# create a certificate
system ("$REQ -new -nodes -x509 -keyout newreq.pem -out newreq.pem $DAYS");

# create a certificate request
system ("$REQ -new -nodes -keyout newreq.pem -out newreq.pem $DAYS");

# <i>./CA.pl -newca</i>
# <i>./CA.pl -newreq</i>
# <i>./CA.pl -sign</i>
# <i>cp newcert.pem /etc/postfix</i>
# <i>cp newreq.pem /etc/postfix</i>
# <i>cp demoCA/cacert.pem /etc/postfix</i>
<comment>(Następnie to samo dla apache)</comment>

# <i>openssl req -new > new.cert.csr</i>
# <i>openssl rsa -in privkey.pem -out new.cert.key</i>
# <i>openssl x509 -in new.cert.csr -out new.cert.cert -req -signkey new.cert.key -days 365</i>
<comment>(Na razie pozostawmy certyfikaty tam, gdzie są. Zainstalujemy je po
instalacji Apache.)</comment>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Dodawanie obsługi SSL oraz SASL do Postfiksa</title>
<section>
<body>

<p>
Konieczna jest też modyfikacja konfiguracji Postfiksa tak, aby uczynić go
świadomym obecności SASL oraz SSL. W tym celu dodajemy następujące wpisy na
końcu pliku, gdzie będzie łatwo je potem odnaleźć:
</p>

<pre caption="/etc/postfix/main.cf">
# <i>nano -w /etc/postfix/main.cf</i>

smtpd_sasl_auth_enable = yes
smtpd_sasl2_auth_enable = yes
smtpd_sasl_security_options = noanonymous
broken_sasl_auth_clients = yes
smtpd_sasl_local_domain =

<comment>(Opcja broken_sasl_auth_clients oraz metoda autentykacji login są
przeznaczone wyłącznie dla programów Outlook oraz Outlook Express. Opcje te
są nieudokumentowane. smtpd_sasl_local_domain dodaje nazwę domeny do nazw
klientów korzystających z SMTP-AUTH. Należy się upewnić, że zmienna ta jest
pusta, w przeciwnym wypadku bowiem nazwy będą modyfikowane i Postfiks nie
będzie w stanie ich autentykować.)</comment>

smtpd_recipient_restrictions =
  permit_sasl_authenticated,
  permit_mynetworks,
  reject_unauth_destination

smtpd_use_tls = yes
#smtpd_tls_auth_only = yes
smtpd_tls_key_file = /etc/postfix/newreq.pem
smtpd_tls_cert_file = /etc/postfix/newcert.pem
smtpd_tls_CAfile = /etc/postfix/cacert.pem
smtpd_tls_loglevel = 3
smtpd_tls_received_header = yes
smtpd_tls_session_cache_timeout = 3600s
tls_random_source = dev:/dev/urandom

<comment>(smtpd_tls_auth_only zostało wykomentowane aby ułatwić testowanie
systemu. Jeżeli jest potrzebne, może zostać w przyszłości przywrócone.)</comment>

# <i>postfix reload</i>
</pre>

<p>
Teraz zweryfikujemy, czy nasza konfiguracja została przyjęta przez
Postfiksa.
</p>

<pre caption="Weryfikacja wsparcia dla SASL oraz TLS">
# <i>telnet localhost 25</i>

Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 mail.domain.com ESMTP Postfix
<i>EHLO domain.com</i>
250-mail.domain.com
250-PIPELINING
250-SIZE 10240000
250-VRFY
250-ETRN
250-STARTTLS
250-AUTH LOGIN PLAIN
250-AUTH=LOGIN PLAIN
250-XVERP
250 8BITMIME
<i>^]</i>
telnet> <i>quit</i>
</pre>

<p>
Należy upewnić się, że w powyższym występują linie AUTH oraz STARTTLS. Jak
zostało wcześniej napisane, w tej chwili AUTH nie będzie działać. Jest tak
ponieważ SASL będzie nie będzie próbował uwierzytelniać względem pliku
shadow tylko sasldb, który z pewnych przyczyn nie został skonfigurowany. W
takim razie musimy skonfigurować MySQL aby ten utrzymywał wszystkie
informacje związane z autentykacją oraz wirtualnymi domenami.
</p>

</body>
</section>
</chapter>

<chapter>
<title>MySQL</title>
<section>
<body>

<p>
Następnie zainstalujemy oraz skonfigurujemy MySQL. W tym kroku niezbędny będzie
plik <uri link="/doc/en/files/genericmailsql.sql">genericmailsql.sql</uri>
</p>

<pre caption="Instalacja oraz konfiguracja MySQL">
# <i>emerge mysql</i>

# <i>/usr/bin/mysql_install_db</i>
<comment>(Po zakończeniu wykonania tego polecenia należy postępować zgodnie
z poleceniami na ekranie aby dodać hasło roota dla mysql, nie mysqladmin, w
przeciwnym wypadku baza danych będzie otwarta na świat.)</comment>

# <i>/etc/init.d/mysql start</i>
# <i>mysqladmin -u root -p create mailsql</i>
# <i>mysql -u root -p mailsql &lt; genericmailsql.sql</i>

# <i>mysql -u root -p mysql</i>
mysql> <i>GRANT SELECT,INSERT,UPDATE,DELETE</i>
  ->     <i>ON mailsql.*</i>
  ->     <i>TO mailsql@localhost</i>
  ->     <i>IDENTIFIED BY '$password';</i>

  ->     <i>quit</i>
<comment>(Należy upewnić się, że użytkownik mailsql może połączyć się z
serwerem.)</comment>

# <i>mysql -u mailsql -p mailsql</i>
</pre>

<p>
Nowa baza danych ma zdefiniowane domyślne wartości i tablice dla dwóch
domen. Założone zostają następujące tabele:
</p>

<ul>
  <li>alias - lokalne aliasy email oraz informacje o aliasach Mailmana.</li>
  <li>relocated - adresy przeniesionych użytkowników oraz mapy adresów.</li>
  <li>
    transport - informacja o domyślnych transportach pocztowych dla
    wszystkich domen które są utrzymywane na serwerze.
  </li>
  <li>users - informacja o kontach użytkowników.</li>
  <li>virtual - mapy aliasów dla domen wirtualnych.</li>
</ul>

<pre caption="Przykładowa tabela aliasów">
id   alias    destination
1    root     foo@bar.com
2  postmaster foo@bar.com
</pre>

<pre caption="Przykładowa tabela użytkowników">
<comment>(Wiersze zostały zawinięte dla przejrzystości.)</comment>
id email            clear     name     uid     gid     homedir     \
  maildir                                quota  postfix
10 foo@virt-bar.org $password realname virtid  virtid  /home/vmail \
  /home/vmail/virt-bar.org/foo/.maildir/        y
13 foo@bar.com      $password realname localid localid /home/foo   \
  /home/foo/.maildir/                           y
</pre>

<p>
Wartość <c>virtid</c> w polach uid oraz gid powinny zostać zastąpione
odpowiednimi wartościami dla użytkownika vmail.
</p>

<pre caption="Przykładowa tabela transportów">
id   domain       destination
1    bar.com      local:
2    virt-bar.org virtual:
</pre>

<pre caption="Przykładowa tabela virtual">
id   email            destination
3   root@virt-bar.org other@email.address
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Apache oraz phpMyAdmin</title>
<section>
<body>

<p>
Teraz skonfigurujemy Apache oraz dodamy interfejs ułatwiający współpracę z bazą
danych.
</p>

<pre caption="Instalacja Apache oraz phpMyAdmin">
# <i>emerge apache mod_php phpmyadmin</i>
</pre>

<p>
Opisów konfiguracji PHP dla Apache jest wiele, na przykład
<uri>http://www.linuxguruz.org/z.php?id=31</uri>. Jest także wiele postów na
<uri>http://forums.gentoo.org</uri> opisujących jak rozwiązać problemy z
instalacją (wyszukiwanie 'apache php'). W związku z tym proces ten nie będzie
tutaj opisany. Należy skonfigurować Apache oraz PHP, następnie powrócić do tego
podręcznika. Dobra rada: powinno się zabezpieczyć katalog z phpMyAdmin plikiem
.htaccess. Jeśli się tego nie zrobi, automaty przeszukujące sieć WWW odnajdą go
i zindeksują, po czym każdy użytkownik będzie w stanie odnaleźć go oraz
rzystać do dowolnego modyfikowania bazy - co jest <e>ZŁE</e>! Jest wiele
podręczników opisujących jak tego uniknąć, na przykład
<uri>http://www.csoft.net/docs/micro/htaccess.html.en</uri>.
</p>

<p>
Teraz można zainstalować certyfikaty Apache, które wcześniej przygotowaliśmy.
Dyrektywy Apache-SSL których należy użyć są następujące:
</p>

<ul>
  <li>SSLCertificateFile /ścieżka/do/certyfikatów/new.cert.cert</li>
  <li>SSLCertificateKeyFile /ścieżka/do/certyfikatów/new.cert.key</li>
</ul>

<pre caption="Instalacja certyfikatów SSL dla Apache">
# <i>cp /etc/ssl/misc/new.cert.cert /etc/apache/conf/ssl/</i>
# <i>cp /etc/ssl/misc/new.cert.key /etc/apache/conf/ssl/</i>
# <i>nano -w /etc/apache/conf/vhosts/ssl.default-vhost.conf</i>

<comment>(Należy zmodyfikować następujące parametry):</comment>

ServerName host.domain.name
ServerAdmin your@email.address
SSLCertificateFile /etc/apache/conf/ssl/new.cert.cert
SSLCertificateKeyFile /etc/apache/conf/ssl/new.cert.key

# <i>/etc/init.d/apache restart</i>
</pre>

<note>
Jeśli Apache był już zainstalowany, prawdopodobnie konieczny będzie jego pełen
restart w celu instalacji certyfikatów. W logach można sprawdzić, czy Apache
zrestartował się prawidłowo.
</note>

<p>
Teraz konfigurujemy phpMyAdmin.
</p>

<pre caption="Konfiguracja phpMyAdmin">
# <i>nano -w /var/www/localhost/htdocs/phpmyadmin/config.inc.php</i>
<comment>(Zmień następujące opcje:)</comment>

$cfg['Servers'][$i]['host'] = 'localhost';          // Nazwa serwera MySQL
$cfg['Servers'][$i]['controluser'] = 'mailsql';     // Użytkownik kontroli MySQL
                                                    // (ten użytkownik musi mieć
$cfg['Servers'][$i]['controlpass'] = '$password';   // dostęp tylko-do-odczytu
                                                    // do bazy i tabel "mysql/db")
$cfg['Servers'][$i]['user'] = 'mailsql';            // Użytkownik MySQL
$cfg['Servers'][$i]['password'] = '$password';      // Hasło  MySQL
</pre>

<p>
Teraz przejdziemy na stronę phpMyAdmin, aby przeglądać tabele. Można tu dodać
lokalna aliasy, edytować tablicę użytkowników aby dodać użytkownika testowego
oraz zmienić tabelę transportów aby dodać właściwe domeny. Domyślne wpisy
dostarczone razem z wstępnym plikiem powinny być wystarczającą podpowiedzią co
do tego gdzie co należy. Należy się upewnić, że informacja umieszczona w bazie
danych jest dokładna, na przykład że katalogi domowe istnieją oraz że wartości
uid/gid są poprawne. Katalogi maildir powinny zostać założone automatycznie
przez Postfiksa gdy użytkownik otrzyma swojego pierwszego emaila. W praktyce
dobrze jest wysłać email powitalny do każdego nowego użytkownika, aby upewnić się,
że katalog .maildir zostanie założony.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Użytkownik vmail</title>
<section>
<body>

<p>
Oczywiście nadal nie wiadomo jaki katalog i użytkownik jest właściwy dla
użytkowników wirtualnych - teraz właśnie tym się zajmiemy.
</p>

<pre caption="Tworzenie użytkownika vmail">
# <i>adduser -d /home/vmail -s /bin/false vmail</i>
# <i>uid=`cat /etc/passwd | grep vmail | cut -f 3 -d :`</i>
# <i>groupadd -g $uid vmail</i>
# <i>mkdir /home/vmail</i>
# <i>chown vmail: /home/vmail</i>
</pre>

<p>
Konfigurując konta wirtualne należy używać uida, gida oraz pliku domowego
użytkownika vmail. Kiedy konfigurowane są konta lokalne należy używać
odpowiadających im gid, uid oraz katalogu domowego. Zamierzaliśmy stworzyć
stronę php rozwiązującą ten problem, ale jak dotąd nikt się tym nie zajął -
głównie dlatego, że phpMyAdmin działa zadowalająco.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja vhostów oraz uwierzytelniania MySQL</title>
<section>
<body>

<p>
Zmienimy konfigurację uwierzytelniania tak, aby korzystała z bazy danych
mailsql dla Courier-IMAP oraz Postfiksa. W następującym przykładzie należy
zamienić <c>$password</c> hasłem użytkownika mailsql.
</p>

<pre caption="Konfiguracja autentykacji">
# <i>emerge pam_mysql</i>
# <i>nano -w /etc/pam.d/smtp</i>
<comment>(Wykomentuj wszystkie już istniejące wpisy auth oraz dodaj
następujące</comment>

#auth    required        /lib/security/pam_stack.so service=system-auth
#account required        /lib/security/pam_stack.so service=system-auth

auth     optional       pam_mysql.so host=localhost db=mailsql user=mailsql \
  passwd=$password table=users usercolumn=email passwdcolumn=clear crypt=0
account  required       pam_mysql.so host=localhost db=mailsql user=mailsql \
  passwd=$password table=users usercolumn=email passwdcolumn=clear crypt=0
</pre>

<p>
Następnie niezbędne jest zmodyfikowanie konfiguracji uwierzytelniania Couriera.
</p>

<pre caption="Konfiguracja uwierzytelniania">
# <i>nano -w /etc/courier-IMAP/authdaemonrc</i>
authmodulelist="authmysql authpam"

# <i>nano -w /etc/courier-IMAP/authdaemond.conf</i>
AUTHDAEMOND="authdaemond.mysql"

# <i>nano -w /etc/courier-IMAP/authmysqlrc</i>
MYSQL_SERVER            localhost
MYSQL_USERNAME       mailsql
MYSQL_PASSWORD      $password
MYSQL_DATABASE          mailsql
MYSQL_USER_TABLE        users
<comment>(Należy się upewnić, że następujące wiersze są zakomentowane ponieważ
przechowujemy hasła w czystym tekście)</comment>
#MYSQL_CRYPT_PWFIELD    crypt
MYSQL_CLEAR_PWFIELD     clear
MYSQL_UID_FIELD         uid
MYSQL_GID_FIELD         gid
MYSQL_LOGIN_FIELD       email
MYSQL_HOME_FIELD        homedir
MYSQL_NAME_FIELD        name
MYSQL_MAILDIR_FIELD     maildir

# <i>/etc/init.d/courier-authlib restart</i>
# <i>/etc/init.d/saslauthd restart</i>
</pre>

<p>
Wszystko jest prawie gotowe. Teraz trzeba jeszcze skonfigurować resztę Postfiksa
do współpracy z bazą danych dla wszystkich potrzeb transportowych.
</p>

<pre caption="/etc/postfix/mysql-aliases.cf">
# <i>nano -w /etc/postfix/mysql-aliases.cf</i>
# mysql-aliases.cf

user           = mailsql
password       = $password
dbname         = mailsql
table          = alias
select_field   = destination
where_field    = alias
hosts          = unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-relocated.cf">
# <i>nano -w /etc/postfix/mysql-relocated.cf</i>
# mysql-relocated.cf

user           = mailsql
password       = $password
dbname         = mailsql
table          = relocated
select_field   = destination
where_field    = email
hosts          = unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-transport.cf (opcjonalnie)">
# <i>nano -w /etc/postfix/mysql-transport.cf</i>
# mysql-transport.cf

user           = mailsql
password       = $password
dbname         = mailsql
table          = transport
select_field   = destination
where_field    = domain
hosts          = unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-virtual-gid.cf (opcjonalnie)">
# <i>nano -w /etc/postfix/mysql-virtual-gid.cf</i>
#myql-virtual-gid.cf

user           = mailsql
password       = $password
dbname         = mailsql
table          = users
select_field   = gid
where_field    = email
additional_conditions = and postfix = 'y'
hosts          = unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-virtual-maps.cf">
# <i>nano -w /etc/postfix/mysql-virtual-maps.cf</i>
#myql-virtual-maps.cf

user          = mailsql
password      = $password
dbname        = mailsql
table         = users
select_field  = maildir
where_field   = email
additional_conditions = and postfix = 'y'
hosts           = unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-virtual-uid.cf (opcjonalnie)">
# <i>nano -w /etc/postfix/mysql-virtual-uid.cf</i>
# mysql-virtual-uid.cf

user            = mailsql
password        = $password
dbname          = mailsql
table           = users
select_field    = uid
where_field     = email
additional_conditions = and postfix = 'y'
hosts           = unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-virtual.cf">
# <i>nano -w /etc/postfix/mysql-virtual.cf</i>
# mysql-virtual.cf

user         = mailsql
password     = $password
dbname       = mailsql
table        = virtual
select_field = destination
where_field  = email
hosts        = unix:/var/run/mysqld/mysqld.sock
</pre>

<p>
Na koniec edytujemy jeszcze raz <path>/etc/postfix/main.cf</path>.
</p>

<pre caption="/etc/postfix/main.cf">
# <i>nano -w /etc/postfix/main.cf</i>
alias_maps = mysql:/etc/postfix/mysql-aliases.cf
relocated_maps = mysql:/etc/postfix/mysql-relocated.cf

local_transport = local
local_recipient_maps = $alias_maps $virtual_mailbox_maps unix:passwd.byname

virtual_transport = virtual
virtual_mailbox_domains =
  virt-bar.com,
  $inna-domena-wirtualna.com

virtual_minimum_uid = 1000
virtual_gid_maps = static:$vmail-gid
virtual_mailbox_maps = mysql:/etc/postfix/mysql-virtual-maps.cf
virtual_alias_maps = mysql:/etc/postfix/mysql-virtual.cf
virtual_uid_maps = static:$vmail-uid
virtual_mailbox_base = /
#virtual_mailbox_limit =
</pre>

<p>
Ze względów bezpieczeństwa należy zmodyfikować uprawnienia plików
<path>/etc/mail/mysql-*.cf</path>:
</p>

<pre caption="Modyfikacja uprawnień">
# <i>chmod 640 /etc/postfix/mysql-*.cf</i>
# <i>chgrp postfix /etc/postfix/mysql-*.cf</i>
</pre>

<p>
Pomiędzy wersjami Postfiksa 2.0.x oraz 1.1.x wystąpiło kilka istotnych zmian. W
szczególności tablice transport, virtual-gid oraz virtual-uid nie są już
niezbędne. Nadal są one dostępne, na wypadek, gdyby okazały się przydatne.
</p>

<note>
Zalecane jest przeczytanie pliku VIRTUAL_README dołączonego do dokumentacji
Postfiksa w celu uzyskania dalszych informacji.
</note>

<pre caption="Niech Postfix przeładuje swoje tablice">
# <i>postfix reload</i>
</pre>

<p>
Jeśli wszystko się powiodło malhost powinien już działać. Użytkownicy powinni
być w stanie uwierzytelniać się dla POP3, IMAP oraz SMTP. Zalecane jest
sprawdzenie, czy w tej chwili wszystko działa. Jeżeli pojawią się jakie kolwiek
problemy(przy tak licznych elementach systemu jest to dość prawdopodobne) należy
skonsultować się z rozdziałem poświęconym rozwiązywaniu problemów.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Squirrelmail</title>
<section>
<body>

<pre caption="Instalacja Squirrelmail">
# <i>emerge squirrelmail</i>
<comment>(Instalacja Squirrelmail dla localhost tak, aby był on dostępny pod
adresem http://localhost/mail)
(1.4.3a-r2 należy zastąpić używaną wersją)</comment>

# <i>webapp-config -I -h localhost -d /mail squirrelmail 1.4.3a-r2</i>
# <i>cd /var/www/localhost/htdocs/mail/config</i>
# <i>perl ./conf.pl</i>
<comment>(Zmodyfikuj pola Organization, Server oraz Folder dla Squirrelmail.
Teraz powinno być możliwe zalogowanie się do Squirrelmail - pełnym adresem email
- oraz użycie nowego Webmaila.)</comment>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Mailman</title>
<section>
<body>

<p>
Krok ostatni: mailman. Najnowsza wersja Mailmana ma bardzo przyjemne wsparcie
dla domen wirtualnych, co jest przyczyną dla której autor z niego korzysta - nie
wspominając o tym, że jest to świetny pakiet. Aby zainstalować oraz prawidłowo
skonfigurować go dla domen wirtualnych potrzebne będzie nieco hackerstwa.
Zdecydowanie zalecane jest przeczytanie całej dokumentacji mailmana, w
szczególności plik README.POSTFIX.gz, aby zrozumieć, co teraz zostanie zrobione.
</p>

<p>
Dodatkowa uwaga: aktualne wersje mailmana instalowane są do katalogu
/usr/local/mailman. Instalacja w innym miejscu jest możliwe przez modyfikację
pliku ebuild oraz zmodyfikowanie zmiennej INSTALLDIR.
</p>

<pre caption="/usr/portage/net-mail/mailman/mailman-$ver.ebuild">
# <i>nano -w /usr/portage/net-mail/mailman/mailman-$ver.ebuild</i>
MAILGID="280"
<comment>(Modyfikacja MAILGID na grupę mailman w przeciwieństwie do nobody. Jest
to konieczne dla współpracy z Postfiksem.)</comment>
</pre>

<pre caption="Instalacja mailmana">
# <i>emerge mailman</i>
<comment>(Ten pakiet jest aktualnie zamaskowany
więc należy go odmaskować albo podać emerge dokładną ścieżkę do pliku ebuild. Po
instalacji należy postępować zgodnie z zaleceniami znajdującymi się w
README.gentoo.gz *poza* dodaniem aliasów do /etc/mail/aliases. Za miast tego
przyłączymy całą bazę aliasów do Postfiksa.)</comment>

# <i>zless /usr/share/doc/mailman-$ver/README.gentoo.gz</i>
</pre>

<pre caption="Konfigurowanie wartości domyślnych: Mailman/Defaults.py">
# <i> nano -w /var/mailman/Mailman/Defaults.py</i>
<comment>(Następujące wartości powinny zostać zmodyfikowane tak, aby odpowiadały
głównej domenie. Domeny wirtualne zostaną skonfigurowane w przyszłości.)</comment>
DEFAULT_EMAIL_HOST = 'domain.com'
DEFAULT_URL_HOST = 'www.domain.com'
</pre>

<pre caption="Konfiguracja mailmana: mm_cfg.py">
# <i>nano -w /var/mailman/Mailman/mm_cfg.py</i>
MTA = "Postfix"
POSTFIX_STYLE_VIRTUAL_DOMAINS = ['virt-domain.com', 'virt.domain2.com']
add_virtualhost('www.virt.domain.com', 'virt.domain.com')
add_virtualhost('www.virt.domain2.com', 'virt.domain2.com')
<comment>(Jest to konieczne dla działania domen wirtualnych.)</comment>
</pre>

<pre caption="Na koniec...">
<comment>(Teraz można dodać pierwszą listę)</comment>

# <i>su mailman</i>
# <i>cd ~</i>
# <i>bin/newlist test</i>
Enter the email of the person running the list: <i>Twój@adres.email</i>
Initial test password:
Hit enter to continue with test owner notification...
<comment>(Listy dla domen wirtualnych mogą być podane w stylu lista@domena.com
</comment>
# <i>bin/genaliases</i>
<comment>(Teraz, gdy aliasy zostały dodane można zweryfikować, czy zostało to
wykonane skutecznie)</comment>

# <i>nano -w data/aliases</i>
# STANZA START: test
# CREATED:
test:             "|/var/mailman/mail/mailman post test"
test-admin:       "|/var/mailman/mail/mailman admin test"
test-bounces:     "|/var/mailman/mail/mailman bounces test"
test-confirm:     "|/var/mailman/mail/mailman confirm test"
test-join:        "|/var/mailman/mail/mailman join test"
test-leave:       "|/var/mailman/mail/mailman leave test"
test-owner:       "|/var/mailman/mail/mailman owner test"
test-request:     "|/var/mailman/mail/mailman request test"
test-subscribe:   "|/var/mailman/mail/mailman subscribe test"
test-unsubscribe: "|/var/mailman/mail/mailman unsubscribe test"
# STANZA END: test

# <i>/etc/init.d/mailman start</i>
# <i>rc-update add mailman default</i>
<comment>(Aby mailman startował natychmiast po ponownym uruchomieniu komputera)</comment>
</pre>

<pre caption="Dodawanie wsparcia dla aliasów mailmana do Postfiksa">
# <i>nano -w /etc/postfix/main.cf</i>
owner_request_special = no
recipient_delimiter = +
<comment>(W pliku README.POSTFIX.gz znajdują się dalsze szczegóły)</comment>

alias_maps     =
  hash:/var/mailman/data/aliases,
  mysql:/etc/postfix/mysql-aliases.cf

virtual_alias_maps =
  hash:/var/mailman/data/virtual-mailman,
  mysql:/etc/postfix/mysql-virtual.cf
<comment>(W ten sposób dodaje się wsparcie Mailmana do Postfiksa. Oczywiście
można w tym celu wykorzystać tabele MySQL, ale autor naprawdę nie lubi robienia
tego ręcznie. Poza tym jeżeli domeny wirtualne nie są wykorzystane, dodawanie
map aliasów wirtualnych może wywołać problemy)</comment>
</pre>

<p>
Listy dystrybucyjne powinny już działać na wszystkich domenach obsługiwanych
przez serwer. Należy uważać, aby wszystkie polecenia dla Mailmana wydawać jako
użytkownik mailman (<c>su mailman</c>) - w przeciwnym wypadku uprawnienia będą
nieprawidłowe i konieczna będzie korekta. W dokumentacji Mailmana można znaleźć
więcej informacji na temat jego konfiguracji i zarządzania.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Filtrowanie zawartości oraz obrona antywirusowa</title>
<section>
<body>

<p>
Dla filtrowania zawartości oraz obrony antywirusowej należy skonsultować się z
naszym <uri link="/doc/en/mailfilter-guide.xml">opisem konfiguracji bramy
filtrującej pocztę</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Zakończenie</title>
<section>
<body>

<p>
Teraz, gdy wszystko jest gotowe, należy zmodyfikować
<path>/etc/postfix/master.cf</path> oraz wyłączyć szczegółowe informowanie o
przebiegu procesu (verbose). Prawdopodobnie będzie również potrzebne dodanie
usług do procesu standardowego. Należy upewnić się, że dodane są wszystkie
wykorzystane usługi - apache, mysql, saslauthd, postfix, courier-imapd,
courier-imapd-ssl, courier-pop3d oraz courier-pop3d-ssl. U autora wszystkie te
usługi są zazwyczaj uruchomione.
</p>

<pre caption="Wykończenie">
# <i>postfix reload</i>
# <i>rc-update add $service default</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Rozwiązywanie problemów</title>
<section>
<title>Wprowadzenie</title>
<body>

<p>
Rozwiązywanie problemów: to jest krótki przewodnik rozwiązywania problemów które
mogą wystąpić podczas instalacji systemu tutaj opisanego. Nie jest on
wyczerpujący - jest pomyślany raczej jako miejsce, gdzie można rozpocząć
wyszukiwanie rozwiązań problemów. Dla skomplikowanego systemu taki jak ten
bardzo istotne jest, aby zawęzić poszukiwania do konkretnego komponentu który
nie funkcjonuje prawidłowo. Zwykle robi się to w kilku krokach. Rozpoczyna się
od podstawy systemu i kontynuuje "do góry", wyłączając z poszukiwania
komponenty, które działają prawidłowo, aż do momentu odnalezienia komponentu,
który sprawia problemy.
</p>

</body>
</section>
<section>
<title>Krok 1: Sprawdzenie plików konfiguracyjnych</title>
<body>

<p>
Literówki są poważnym problemem, szczególnie w przypadku systemów autentykacji.
Należy teraz przejrzeć konfigurację oraz bazę mailsql w poszukiwaniu tego
rodzaju błędów. Debugować można dowolnie długo, ale jeżeli system ne otrzymuje
właściwej informacji to nie będzie on działał. Po zmianie konfiguracji należy
pamiętać o przeładowaniu usługi tak, aby zmiany zostały przyjęte.
</p>

<pre caption="Przeładowanie usługi">
# <i>/etc/init.d/service restart</i>
</pre>

</body>
</section>
<section>
<title>Krok 2: Czy wszystkie potrzebne usługi działają?</title>
<body>

<p>
Jeżeli któraś z usług nie działa - należy ją uruchomić. Naprawdę trudno jest
debugować usługę która nie jest włączona. Czasem niektóre usługi zachowują się
tak, jakby działały, ale jednak nie funkcjonują. Czasem, gdy konfiguracje jest
błędna albo któryś z komponentów otrzyma nieprawidłową transmisję usługa
zawiesi się i zablokuje port, uniemożliwiając ponowne jej uruchomienie. Często
można to wykryć przy użyciu netstata. Ewentualnie można zwyczajnie zrestartować
system - usunie to wszystkie zawieszone usługi.
</p>

<pre caption="Sprawdzanie stanu usług:">
# <i>/etc/init.d/$usługa status</i>
# <i>netstat -a | grep $usługa (lub $port)</i>
</pre>

</body>
</section>
<section>
<title>Krok 3: Czy wszystkie usługi korzystają z aktualnej konfiguracji?</title>
<body>

<p>
Jeżeli plik konfiguracyjny był modyfikowany to restartujemy usługę, której on
dotyczył, aby upewnić się, że wykorzystuje ona aktualną jego wersję. Niektóre
usługi potrafią pokazać swoją aktualną konfigurację - na przykład Postfix.
</p>

<pre caption="Niektóre usługi potrafią pokazać swoją konfigurację">
# <i>apachectl fullstatus</i> (niezbędny jest Lynx)
# <i>apachectl configtest</i> (weryfikuje poprawność konfiguracji)
# <i>postconf -n</i> (pokazuje dokładną konfigurację Postfiksa)
# <i>/etc/init.d/$service restart</i>
</pre>

</body>
</section>
<section>
<title>Krok 4: Logi</title>
<body>

<p>
Następnym krokiem powinno być przeczytanie logów. Czasem praktycznie jest
ponowić nieudaną operację i następnie sprawdzić logi - wtedy komunikat błędu
jest dokładnie na dole (albo na górze, zależnie od loggera) w przeciwieństwie do
znajdowania się gdzieś w głębi pliku. Należy sprawdzić czy w logach znajduje się
jakakolwiek informacja przydatna w diagnostyce błędu, albo przynajmniej w
określeniu, który komponent sprawia kłopoty.
</p>

<pre caption="Sprawdzanie logów:">
# <i>kill -USR1 `ps -C metalog -o pid=`</i>(aby wyłączyć buforowanie metaloga)
# <i>nano -w /var/log/mail/current</i>
# <i>cat /var/log/mysql/mysql.log</i>
# <i>tail /var/log/apache/error_log</i>
</pre>

<p>
Warto też sprawdzić parametr debug_peer w pliku main.cf. Ustawienie go zwiększy
ilość danych wysyłanych do loga.
</p>

<pre caption="Dodawanie wsparcia  dla debug_peeer">
# <i>nano -w /etc/postfix/main.cf</i>
debug_peer_level = 5
debug_peer_list = $host.domain.name
<comment>(Należy też odkomentować jedno z sugerowanych poleceń debuggera.)
</comment>
</pre>

</body>
</section>
<section>
<title>Krok 5: Rozmowa z usługą</title>
<body>

<p>
SMTP, IMAP oraz POP3 odpowiadają na połączenia za pomocą telnetu - co było
zademonstrowane podczas weryfikacji konfiguracji Postfiksa. Czasem warto jest
otworzyć sesję do usługi i zobaczyć, co się dzieje.
</p>

<pre caption="Połączenie telnetowe z usługą">
# <i>telnet localhost $port</i>
<comment>(SMTP to 25, IMAP to 143, POP3 to 110. Powinno się otrzymać
przynajmniej łańcuch OK, potwierdzający, że usługa działa i jest gotowa do
odpowiadania na żądania.)</comment>

Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
* OK Courier-IMAP ready. Copyright 1998-2002 Double Precision, Inc.
</pre>

</body>
</section>
<section>
<title>Krok 6: Wytaczamy artylerię: strace</title>
<body>

<p>
Zawsze warto mieć ten program na podorędziu. Jest to nieocenione narzędzie do
debugowania oprogramowania. Można dzięki niemu uruchamiać programy z linii
poleceń i obserwować wszystkie wywołania systemowe, które one wykonują. Często
zrzuca on ogromne ilości danych, więc konieczne będzie albo obserwowanie go w
czasie wykonywania testów, albo zrzucenie danych do pliku na później.
</p>

<pre caption="Użycie strace">
# <i>emerge strace</i>
# <i>strace $command</i>
# <i>strace -p `ps -C $service -o pid=`</i>
</pre>

</body>
</section>
<section>
<title>Krok 7: Badania</title>
<body>

<p>
Dość często zebrane do tej pory informacje okażą się  wystarczające do diagnozy
oraz korekty problemu. W przeciwnym wypadku potrzebne może się okazać będzie
przeszukanie sieci w poszukiwaniu dalszych danych. Poniżej znajduje się lista
stron, które warto odwiedzić w trakcie tego procesu. Jest tu również bardzo
dobry podręcznik opisujący konfigurację SMTP-AUTH, zawierający kilka świetnych
pomysłow na znajdowanie błędów.
</p>

<ul>
  <li><uri>http://forums.gentoo.org/</uri> - Fora użytkowników Gentoo.</li>
  <li>
    <uri>http://bugs.gentoo.org/</uri> - Baza błędów Gentoo - świetne miejsce
    na wyszukiwanie konkretnych określonych problemów.
  </li>
  <li><uri>http://postfix.state-of-mind.de/</uri> - podręcznik SMTP-AUTH</li>
  <li>
    <uri>http://marc.theaimsgroup.com/?l=postfix-users</uri> - Archiwum listy
    dystrybucyjnej Postfiksa (przeszukiwalne)
  </li>
  <li>
    <uri>http://sourceforge.net/mailarchive/forum.php?forum_id=6705</uri> -
    Nieprzeszukiwalne archiwum listy Courier-IMAP-a.
  </li>
  <li>
    <uri>http://www.google.com/</uri> - Jeśli wszystko inne zawiedzie, zawsze
    pozostaje Google.
  </li>
  <li>
    Autor wersji oryginalnej spędza wiele czasu na kanale #gentoo, w sieci
    irc.freenode.net. IRC jest świetnym miejscem do poszukiwania wsparcia.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
