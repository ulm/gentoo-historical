<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/xen-guide.xml,v 1.3 2008/06/18 19:34:05 rane Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/doc/pl/xen-guide.xml" lang="pl" >

<title>Konfiguracja Xen w Gentoo</title>

<author title="Autor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Tłumaczenie">
  <mail link="artur.smet@gmail.com">Artur Smęt</mail>
</author>
<author title="Tłumaczenie">
  <mail link="shpaq@polter.pl">Michał Laszuk</mail>
</author>

<abstract>
Opis użycia technologii Xen w systemie Gentoo Linux.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.3</version>
<date>2008-04-10</date>

<chapter>
<title>Wprowadzenie</title>
<section>
<body>

<p>
<uri link="http://www.xensource.com/">Xen</uri> umożliwia uruchamianie kilku
systemów operacyjnych na jednym fizycznym systemie, zarządza zużyciem zasobów i
przenosi domeny będące wirtualnymi środowiskami, w których uruchomiony jest
system-gość z jednego systemu opartego na Xen do innego. Xen wymaga, by system
bazowy wspierał technologię Xen (w przypadku Linuksa należy wkompilować obsługę
Xen w jądro systemu), system-gość nie potrzebuje żadnych modyfikacji
<e>jeśli</e> posiadany sprzęt wspiera Intel Virtualization Technology (VT-x) lub
AMD Virtualization Technology (SVM). W przeciwnym razie system-gość również musi
wspierać technologię Xen.
</p>

<p>
Ten artykuł omawia krok po kroku kolejne etapy konfiguracji Xen do pracy w
systemie Gentoo Linux. Nie będzie tu omawiana technologia Xen sama w sobie
(projekt Xen ma bowiem dość <uri
link="http://www.cl.cam.ac.uk/research/srg/netos/xen/readmes/user">obszerną
dokumentację</uri>). Najpierw należy zająć się ustawieniami, które mogą być
bardzo interesujące dla poszczególnych instalacji Xen, ale niekoniecznie
związane z samym Xen (np. eksportowanie Portage przez protokół NFS,
uruchamianie Linuksa przy pomocy PXE, itp.).
</p>

</body>
</section>
</chapter>
<chapter>
<title>Przygotowywanie Domeny0</title>
<section>
<title>Wprowadzenie</title>
<body>

<p>
<e>Domena0</e> jest główną domeną pod Xen, system operacyjny hosta zarządza
wszystkimi innymi domenami. W tym rozdziale omówione zostanie przygotowanie
istniejącej instalacji Gentoo do pełnienia roli systemu-hosta w tej domenie i
zbudowane jądro oparte na Xen. Po tych zmianach Gentoo będzie gotowe do
hostowania innych domen Xen.
</p>

</body>
</section>
<section>
<title>Przebudowywanie instalacji Gentoo</title>
<body>

<p>
Ważną i zwykle konieczną zmianą jest przebudowanie całego Gentoo z innymi
ustawieniami <c>CFLAGS</c>. W przeciwnym wypadku systemy uruchamiane pod
kontrolą Xen mogą mieć bardzo słabą wydajność. W przypadku gdy chodzi jedynie o
przetestowanie platformy Xen można pominąć ten krok. W tym przypadku strata
wydajności będzie odczuwalna, ale Xen będzie działać poprawnie.
</p>

<impo>
GCC w wersji niższej niż 4 z ustawioną flagą <c>-Os</c> może produkować zepsuty
kod.
</impo>

<pre caption="Edycja CFLAGS i przebudowa Gentoo">
~# <i>nano -w /etc/make.conf</i>
<comment>(Dodać -mno-tls-direct-seg-refs)</comment>
CFLAGS="-O2 -march=pentium4 -pipe <i>-mno-tls-direct-seg-refs</i>"

~# <i>emerge -e world</i>
</pre>

<p>
Jeśli system jest uruchamiany z użyciem wewnętrznego ramdysku (initrd), należy
też przebudować initrd. Najlepiej zrobić to przechodząc wszystkie kroki związane
z przebudową jądra systemu.
</p>

</body>
</section>
<section>
<title>Instalacja Xen</title>
<body>

<p>
Xen zawiera sporo składników, będzie więc potrzebna instalacja kilku pakietów.
Ponieważ Xen jest wciąż <uri
link="/doc/pl/handbook/handbook-x86.xml?part=3&amp;chap=3#doc_chap2">~zamaskowany</uri>
należy dodać odpowiednie wpisy do <path>/etc/portage/package.keywords</path> i
dopiero potem zainstalować pakiety.
</p>

<pre caption="Odmaskowywanie i instalacja Xen">
~# <i>nano -w /etc/portage/package.keywords</i>
app-emulation/xen
app-emulation/xen-tools
sys-kernel/xen-sources

~# <i>emerge xen xen-tools xen-sources</i>
</pre>

</body>
</section>
<section>
<title>Budowanie jądra</title>
<body>

<p>
Następnie należy zbudować jądro Linuksa wspierające Xen. To jądro, którego
źródła są dostępne w <path>/usr/src/linux-2.6.x.z-xen</path> będzie głównym
jądrem obsługującym domenę0. W sekcji <c>XEN</c> znajdują się sterowniki dla
różnego rodzaju urządzeń wejścia/wyjścia. Każdy sterownik ma dostępne dwa
rodzaje implementacji: backend i frontend. Dla jądra domeny0 niezbędna jest
implementacja sterowników typu <e>backend</e>: są one używane przez inne domeny
(używające sterowników typu <e>frontend</e>) do bezpośredniej komunikacji ze
sprzętem.
</p>

<p>
Oczywiście nie można zapomnieć o wybraniu <c>Xen-compatible</c> w sekcji
<c>Processor type and features</c>. Jeśli chodzi o sieć to każdy interfejs w
domenie jest bezpośrednio połączony z interfejsem domeny0 (nazywa się
<path>vifX.Y</path> gdzie X oznacza numer domeny, a Y kolejny numer interfejsu w
domenie). Sieć można skonfigurować wg uznania (mostkowanie, NAT, itp.)
</p>

<pre caption="Włączanie wsparcia dla Xen w jądrach i386">
Processor type and features  ---&gt;
      Subarchitecture Type (Xen-compatible)
</pre>

<pre caption="Włączanie wsparcia Xen w jądrach x86_64">
Processor type and features  ---&gt;
      Subarchitecture Type (PC-compatible)
  [*] Enable Xen compatible kernel
</pre>

<pre caption="Domena-0 Konfiguracja jądra">
Bus options (PCI etc.)  ---&gt;
  [*] PCI support
  [ ]   Xen PCI Frontend Debugging

Networking  ---&gt;
  Networking options  ---&gt;
    &lt;*&gt; 802.1d Ethernet Bridging
    <comment>Wyłącznie dla sieci wykorzystujących mostki</comment>

XEN  ---&gt;
  [*] Privileged Guest (domain 0)
  &lt;*&gt; Backend driver support
  &lt;*&gt;   Block-device backend driver
  &lt;*&gt;   Network-device backend driver
  &lt;*&gt;   PCI-device backend driver
           PCI Backend Mode (Virtual PCI) ---&gt;
  [*] Scrub memory before freeing it to Xen
  [*] Disable serial port drivers
      Xen version compatibility (3.0.4 and later)
</pre>

<pre caption="Domena-U Konfiguracja jądra">
Bus options (PCI etc.)  ---&gt;
  [ ] PCI support

Device Drivers  ---&gt;
  SCSI device support  ---&gt;
    &lt; &gt; SCSI device support
    <comment>Wyłączenie obsługi SCSI uwalnia nazwy urządzeń /dev/sd* i umożliwia
    ich wykorzystanie przez wirtualne urządzenia blokowe Xen</comment>

XEN  ---&gt;
  [ ] Privileged Guest (domain 0)
  &lt;*&gt; Block-device frontend driver
  &lt;*&gt; Network-device frontend driver
  [*] Scrub memory before freeing it to Xen
  [*] Disable serial port drivers
      Xen version compatibility (3.0.4 and later)
</pre>

<p>
Ciekawą opcją jest zmuszenie jądra systemu do przechowywania akcesoryjnych
plików obiektowych w innym miejscu. Możliwe jest wtedy użycie tego samego drzewa
jądra do zbudowania różnych konfiguracji:
</p>

<pre caption="Budowanie jądra">
~# <i>mkdir -p ~/build/dom0 ~/build/domU</i>
~# <i>make O=~/build/dom0 menuconfig</i>
<comment>(Konfigurowanie jądra)</comment>
~# <i>make O=~/build/dom0 &amp;&amp; make O=~/build/dom0 modules_install</i>
</pre>

<p>
Kiedy jądro zostanie zbudowane, jego obraz znajdzie się natychmiast w katalogu
ze źródłami (nie w <path>arch/</path> ani żadnym innym podkatalogu) pod nazwą
<path>vmlinuz</path>. Należy skopiować ten plik do katalogu <path>/boot</path>
oraz skonfigurować bootloader do współpracy z Xen hypervisor (jednym z
poprzednio zainstalowanych pakietów) zapisanym jako <path>/boot/xen.gz</path>. W
konfiguracji bootloadera należy dodać nowo zbudowane jądro. Dla programu GRUB:
</p>

<pre caption="Konfiguracja GRUB-a dla Xen">
title Xen 3.0 / Gentoo Linux 2.6.x.y
root (hd0,0)
kernel /boot/xen.gz
module /boot/kernel-2.6.x.y-xen0 root=/dev/hda3
</pre>

<p>
Teraz należy ponownie uruchomić komputer. Przy każdym uruchomieniu należy
załadować usługę Xen:
</p>

<pre caption="Ładowanie usługi Xen">
~# <i>/etc/init.d/xend start</i>
</pre>

<p>
Należy sprawdzić czy możliwe jest wszystko to co na normalnym systemie. Jeśli
tak to można ustawić bootloader, by uruchamiał Xen domyślnie oraz dodać usługę
Xen do uruchamiania podczas startu systemu.
</p>

<note>
Jeśli chcemy by domeny-goście startowały automatycznie z systemem należy dodać
<c>xendomains</c> do domyślnego poziomu uruchomieniowego oraz utworzyć
dowiązanie symboliczne w <path>/etc/xen/auto/</path> do plików konfiguracyjnych
domen Xen, które mają zostać uruchomione.
</note>

</body>
</section>
</chapter>
<chapter>
<title>Tworzenie nieuprzywilejowanej domeny</title>
<section>
<title>Budowanie jądra</title>
<body>

<p>
Należy przejść do katalogu ze źródłami jądra Xen i zaktualizować konfigurację.
Dobrym pomysłem jest skonfigurowanie wszystkiego tak jak w głównym jądrze i
jedynie dokonanie zmiany implementacji sterowników z <c>backend</c> na
<c>frontend</c>. Następnie należy zbudować jądro i umieścić otrzymany plik
<path>vmlinuz</path> w odpowiednim miejscu (może to być
<path>/mnt/data/xen/kernel</path>):
</p>

<pre caption="Budowanie jądra systemu-gościa">
~# <i>make O=~/build/domU</i>
~# <i>cp ~/build/domU/vmlinuz /mnt/data/xen/kernel/kernel-2.6.x.y-xen</i>
</pre>

<p>
Możliwe jest również zbudowanie pojedynczego jądra zarówno dla domeny
administracyjnej jak i dla domeny nieuprzywilejowanej. Więcej informacji na ten
temat można znaleźć w manualu Xen.
</p>

</body>
</section>
<section>
<title>Creating the Domain Disks</title>
<body>

<p>
By osiągnąć najlepsze wyniki, doskonałym rozwiązaniem jest przeznaczenie całej
partycji (bądź woluminu logiczny) na domenę zamiast systemu plików opartego na
pojedynczym pliku. Jeśli jednak Xen ma być używany głównie jako platforma
testowa, system plików oparty na pojedynczym pliku ma pewne zalety (głównie w
kwestii podtrzymywania).
</p>

<p>
System plików oparty na pliku można utworzyć używając <c>dd</c> i <c>mke2fs</c>
(lub innego dowolnego narzędzia do tworzenia systemu plików). Na przykład, by
utworzyć plik o rozmiarze 2GB zawierający system plików ext3:
</p>

<pre caption="Tworzenie systemu plików opartego na pliku">
~# <i>dd if=/dev/zero of=/mnt/data/xen/disks/ext3root.img bs=1M count=2048</i>
~# <i>mke2fs -j /mnt/data/xen/disks/ext3root.img</i>
</pre>

</body>
</section>
<section>
<title>Konfigurowanie domeny</title>
<body>

<p>
Następnie należy utworzyć plik konfiguracyjny dla domeny. Można je przechowywać
w dowolnym miejscu, przykładowo w <path>/mnt/data/xen/configs</path>. Jako
przykład zostanie utworzony plik konfiguracyjny dla małego środowiska opartego
na Gentoo korzystającego z uprzednio stworzonego obrazu dysku:
</p>

<pre caption="Tworzenie pliku konfiguracyjnego dla domeny">
~# <i>nano -w /mnt/data/xen/configs/gentoo</i>

kernel = "/mnt/data/xen/kernel/kernel-2.6.x.y-xen"
memory = 512
name   = "gentoo"
<comment>(Mapowanie obrazu dysku do wirtualnego /dev/sda1)</comment>
disk   = ['file:/mnt/data/xen/disks/ext3root.img,sda1,w']
root   = "/dev/sda1 ro"
</pre>

<p>
Jeśli w użyciu jest urządzenia blokowe (woluminu LVM lub zwykłej partycji) jako
dysk należy wpisać 'phy:' zamiast 'file:' oraz opuścić /dev/. Na przykład:
</p>

<pre caption="Używanie urządzenia blokowego">
<comment>(Wolumin LVM)</comment>
disk = [ 'phy:lvm/xen-guest-root,sda1,w' ]

<comment>(Fizyczna partycja)</comment>
disk = [ 'phy:sdb6,sda1,w' ]
</pre>

<p>
Przykładowe pliki konfiguracyjne znajdują się w <path>/etc/xen</path>.
</p>

</body>
</section>
<section>
<title>Uruchamianie nowej domeny</title>
<body>

<p>
Możliwe jest teraz uruchomienie nowej domeny. Jeśli obraz dysku zawiera system
operacyjny, możemy utworzyć domenę używając polecenia <c>xm</c> (Xen manager):
</p>

<pre caption="Tworzenie i uruchamianie nowej domeny">
~# <i>xm create /mnt/data/xen/configs/gentoo -c</i>
</pre>

<p>
Domena zostanie uruchomiona w terminalu, w którym uruchomiono odpowiednie
polecenie. W opisywanym przypadku, obraz dysku jest jednak pusty, więc domena
się nie uruchomi. Słowem, jest bezużyteczna. Żeby to naprawić, należy zamontować
obraz i zainstalować Gentoo.
</p>

<p>
Aby rozłączyć się od domeny wystarczy nacisnąć kombinację klawiszy
<path>Ctrl+]</path>. Zawsze można jednak połączyć się ponownie z domeną przez
konsolę korzystając z polecenia <c>xm console gentoo</c>. Dostępna jest jednak
tylko jedna konsola na domenę. Należy używać jej tylko wtedy, gdy niemożliwe
jest inne połączenie (na przykład przez protokół SSH).
</p>

</body>
</section>
</chapter>
<chapter>
<title>Sieć w nieuprzywilejowanych domenach</title>
<section>
<title>Wprowadzenie</title>
<body>

<p>
Xen wspiera dwa typy konfiguracji wirtualnych sieci: <e>routowanie</e> oraz
<e>mostkowanie</e>.
</p>

<p>
Jeśli zostanie wybrane <e>routowanie</e> interfejs domeny nieuprzywilejowanej
będzie podłączony do wirtualnego interfejsu domeny administracyjnej (domeny0), w
której wirtualny interfejs jest połączony z <path>eth0</path>. Interfejs domeny
nieuprzywilejowanej powinien mieć adres IP z tej samej sieci co domena
administracyjna. Jeśli nie zostaną ustawione odpowiednie zasady routingu,
pakiety do tego adresu IP trafią tylko do domeny administracyjnej.
</p>

<p>
W wypadku, gdy zostanie wybrane <e>mostkowanie</e>, domyślny interfejs w domenie
administracyjnej stanie się mostkiem akceptującym połączenia do domen
wirtualnych, także do adresu IP domeny administracyjnej.
</p>

</body>
</section>
<section>
<title>Regularne interfejsy routowane</title>
<body>

<p>
Przed ustawieniem interfejsu domeny nieuprzywilejowanej, należy się upewnić czy
sterowniki <path>netloop</path> i <path>netbk</path> są załadowane. Wskazówka:
jeśli <path>netloop</path> jest skompilowany jako moduł, należy go załadować z
opcją <c>nloopbacks=0</c>, co sprawi, że Xen nie będzie tworzył zbędnych
interfejsów dla urządzenia loopback. Następnie trzeba wyedytować plik
konfiguracyjny domeny i dodać do niego instrukcję <c>vif</c>.
</p>

<pre caption="Konfiguracja wirtualnego interfejsu">
~# <i>nano -w /mnt/data/xen/configs/gentoo</i>

<comment>(Dodanie instrukcji vif)</comment>
vif    = [ 'ip=192.168.1.101, vifname=veth1' ]
</pre>

<p>
W powyższym przykładzie interfejs jest tworzony dla domeny nieuprzywilejowanej.
Będzie się on nazywać <path>eth0</path>) i Xen upewni się czy adres
192.168.1.101 jest osiągalny z domeny administracyjnej za pomocą interfejsu
<path>veth1</path>.
</p>

<p>
To jednak nie znaczy, że wirtualnemu interfejsowi <path>eth0</path> IP
192.168.1.101 zostanie nadane automatycznie, ale raczej, jeśli nie zostanie mu
ono podane, wirtualny interfejs nie połączy się z domeną administracyjną.
</p>

<p>
Teraz należy wyedytować <path>/etc/xen/xend-config.xsp</path> tak jak poniżej,
aby wybrać sieć routowaną:
</p>

<pre caption="Edycja xend-config.xsp">
~# <i>nano -w /etc/xen/xend-config.xsp</i>

<comment>(Należy zakomentować poniższe linie)</comment>
<i>#</i>(network-script network-bridge)
<i>#</i>(vif-script vif-bridge)

<comment>(Włączyć: )</comment>
(network-script network-route)
(vif-script vif-route)
</pre>

</body>
</section>
<section>
<title>Interfejsy mostkowane</title>
<body>

<p>
W odróżnieniu od interfejsów routowanych należy teraz załadować sterownik
<path>netloop</path> z <c>nloopbacks=1</c> (lub wyższym) jako dodatkowe
urządzenie do stworzenia mostka. Dla innych modułów nadal niezbędny jest moduł
<path>netbk</path> jako funkcji mostka (moduł <path>bridge</path> powinien być
zbudowany).
</p>

<p>
Teraz należy wyedytować wirtualną domenę i dodać <c>vif</c>:
</p>

<pre caption="Konfiguracja wirtualnego interfejsu">
~# <i>nano -w /mnt/data/xen/configs/gentoo</i>

<comment>(Dodanie instrukcji vif)</comment>
vif    = [ 'ip=192.168.1.101, vifname=veth0' ]
</pre>

<p>
Następnie należy wyedytować plik <path>/etc/xen/xend-config.xsp</path>, by
wyglądał tak jak poniżej, by wybrać mostkowaną konfigurację sieci:
</p>

<pre caption="Edycja xend-config.xsp">
~# <i>nano -w /etc/xen/xend-config.xsp</i>

<comment>(Usunięcie komentarza sprzed linii:)</comment>
(network-script network-bridge)
(vif-script vif-bridge)

<comment>(Zakomentowanie:)</comment>
<i>#</i> (network-script network-route)
<i>#</i> (vif-script vif-route)
</pre>

<p>
Domyślnie mostek zawiera tylko interfejs, który został skonfigurowany jako
domyślny (ten który jest wymieniony jako domyślny przez <c>ip route list</c>).
Aby zmienić to zachowanie, należy wyedytować <path>xend-config.xsp</path> jak
poniżej:
</p>

<pre caption="Edycja xend-config.xsp w celu zmiany konfiguracji mostu">
~# <i>nano -w /etc/xen/xend-config.xsp</i>

<comment>(Edycja linii network-script)</comment>
(network-script <i>'</i>network-bridge <i>netdev=eth0 bridge=xenbr0 vifnum=0'</i>)
</pre>

<p>
Kiedy konfiguracja jest gotowa, należy jeszcze raz uruchomić skrypt <c>xend</c>
aby zbudować mostek sieciowy:
</p>

<pre caption="Restartowanie usługi xend">
~# <i>/etc/init.d/xend restart</i>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Inne źródła</title>
<section>
<title>Dokumentacja Xen</title>
<body>

<ul>
  <li>
    <uri
    link="http://tx.downloads.xensource.com/downloads/docs/user/">Instrukcja
    użytkownika Xen</uri>
  </li>
  <li>
    <uri link="http://xen.xensource.com/documentation.html">Dokumentacja
    Xen</uri>
  </li>
  <li>
    <uri link="http://wiki.xensource.com/xenwiki/">Xen Wiki</uri>
  </li>
</ul>

</body>
</section>
<section>
<title>Narzędzia Xen</title>
<body>

<ul>
  <li>
    <uri
    link="http://virt-manager.et.redhat.com/">app-emulation/virt-manager</uri>
    Narzędzie graficzne do zarządzania wirtualnymi maszynami.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
