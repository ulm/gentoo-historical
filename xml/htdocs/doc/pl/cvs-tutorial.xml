<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/cvs-tutorial.xml,v 1.1 2005/07/22 16:03:28 neysx Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/cvs-tutorial.xml" lang="pl">

<title>Praca z CVS w Gentoo</title>

<!-- Orig revision: 1.18 -->
<!-- Translator: Bartosz Bielecki <red.13@data.pl> -->
<!-- Status: Do Finished -->

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Redaktor">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Tłumaczenie">
  Bartosz Bielecki
</author>

<abstract>
Ten dokument ma na celu zapoznanie użytkowników z systemem kontroli wersji jakim
jest CVS (ang. Concurrent Versions System), który jest wykorzystywany przez
deweloperów na całym świecie. Pozwala on na wygodną pracę nad projektem, w który
zaangażowanych jest kilka osób. Tekst ten przeznaczony jest dla tych, którzy
dopiero zaczynają swoją pracę z CVS. Za sprawą tego dokumentu zarówno zwykli
użytkownicy, jak i deweloperzy będą w stanie bardzo szybko zacząć używać tego
narzędzia do własnych celów. Obie grupy użytkowników znajdą tutaj potrzebne im
informacje.
</abstract>

<version>1.8</version>
<date>2005-05-23</date>

<chapter>
<title>Wprowadzenie</title>
<section>
<title>Układ tekstu</title>
<body>

<p>
Tekst składa się z dwóch części. Pierwsza pokazuje jak używać CVS nie będąc
deweloperem, tj. jak pobierać źródła z serwera CVS i sprawić żeby cały czas były
aktualne. Druga część wprowadza w świat CVS widziany oczami dewelopera,
wyjaśniając jak modyfikować, dodawać lub usuwać pliki w CVS i wykonywać inne
deweloperskie operacje. Jeśli CVS jest dla kogoś zupełnie obcy, zalecane jest by
zacząć czytać ten dokument od pierwszej części, a dopiero potem przystąpić do
drugiej; jeśli natomiast posiadamy podstawową wiedzę na temat CVS, a
chcielibyśmy zacząć używać go jak deweloperzy, to wszystko co powinniśmy
wiedzieć znajdziemy w części drugiej. Można także przeczytać część wcześniejszą
by odświeżyć swoją wiedzę.
</p>

</body>
</section>
<section>
<title>Czym jest i co może CVS?</title>
<body>

<p>
CVS jest systemem bazującym na zasadzie klient-serwer pozwalającym deweloperom
przechowywać ich dokumenty w wybranym miejscu, nazywanym repozytorium. Za pomocą
narzędzi oferowanych przez klienta CVS, deweloperzy mogą wprowadzać zmiany w
zasobach repozytorium. Z kolei repozytorium CVS śledzi każdą zmianę dokonanę
na jakimkolwiem pliku, tworząc historię niejako danego projektu. Deweloperzy
mogą pobierać starsze wersje wybranego pliku źródłowego, przeglądąć dziennik
zmian i wykonywać inne potrzebne operacje.
</p>

</body>
</section>
<section>
<title>CVS - najbardziej aktualne deweloperskie źródła</title>
<body>

<p>
Kiedy deweloperzy zdecydują, że ich projekt (na przykład po dodaniu nowych
funkcji lub wprowadzeniu poprawek) osiągnął odpowiedni poziom, wypuszczają go w
formie tar.gz. będącej kompilacją ich pracy zawartej w repozytorium; jest to
zarazem kolejna oficjalna wersja programu. Niestety, często zdarza się, że
ostatnie oficjalne wersje nie są zbyt aktualne z wielu różnych przyczyn. W
pierwszej części tego tekstu wyjaśnione zostanie jak wykorzystać CVS by sprostał
temu zadaniu - poobierając najnowsze i najlepsze deweloperskie wersje plików
źródłowych na własny użytek.
</p>

</body>
</section>
<section>
<title>Instalowanie CVS</title>
<body>

<p>
Aby zainstalować CVS, wystarczy wpisać polecenie <c>emerge cvs</c>:
</p>

<pre caption="Instalowanie CVS">
# <i>emerge cvs</i>
</pre>

</body>
</section>
<section>
<title>CVSROOT</title>
<body>

<p>
Zanim zaczniemy podróż po cudownym świecie CVS, ważne jest by poznać podstawy.
Pierwszą rzeczą, którą każdy początkujący musi wiedzieć jest to, że aby
połączyć się z repozytorium musimy znać jego ścieżkę nazywaną "CVSROOT". CVSROOT
jest ciągiem znaków, tak jak URL, który mówi poleceniu CVS gdzie znajduje się
zdalne repozytorium i jak chcielibyśmy się do niego podłączyć. Sprawa robi się
jeszcze bardziej interesująca, gdyż faktem jest, że w CVS wyróżnia się kilka
różnych formatów CVSROOT, zależnie od tego czy repozytorium znajduje się na
naszym czy obcym komputerze, oraz w jaki sposób zamierzamy połączyć się z danym
repozytorium. Teraz wymienimy kilka przykładów CVSROOT razem z
objaśnieniami.
</p>

</body>
</section>
<section>
<title>Lokalny CVSROOT</title>
<body>

<pre caption="CVSROOT">
CVSROOT=/var/cvsroot
</pre>

<p>
To jest przykład lokalnej ścieżki CVSROOT. Tę ścieżkę stosuje się gdy zamierzamy
podłączyć się do lokalnego repozytorium istniejącego pod adresem
<path>/var/cvsroot;</path> albo gdy repozytorium zamontowane zostało za pomocą
NFS pod tym samym adresem.
</p>

</body>
</section>
<section>
<title>Zdalny serwer CVSROOT używający protokołu password</title>
<body>

<pre caption="CVSROOT wraz z uwierzytelnianiem">
CVSROOT=:pserver:cvs@foo.bar.com:/var/cvsroot
</pre>

<p>
Oto przykład CVSROOT dla zdalnego repozytorium znajdującego się na komputerze o
adresie foo.bar.com i ezgzystującego w katalogu <path>/var/cvsroot</path> na tej
stacji roboczej. Pierwsza część (":pserver:") mówi naszemu klientowi, aby
podłączył się do zdalnego komputera używającego protokołu haseł serwera CVS,
który wbudowany jest w CVS. Zazwyczaj publiczne repozytoria CVS używają
protokołu haseł, aby umożliwić dostęp użytkownikom anonimowym.
</p>

</body>
</section>
<section>
<title>CVSROOT wraz z szyfrowaniem RSH/SSH</title>
<body>

<pre caption="CVSROOT z RSH/SSH">
CVSROOT=drobbins@foo.bar.com:/data/cvs
</pre>

<p>
Ten przykład pokazuje CVSROOT korzystający z protokołu RSH/SSH. W tym przyładzie
serwer CVS będzie próbował nawiązać połączenie z repozytorium foo.bar.com
używając konta drobbins. Jeśli zmienna środowiskowa CVS_RSH ma wartość "ssh" to
nasz klient będzie się starał użyć ssh do nawiązania połączenia. W innym
przypadku użyje RSH. Łączenie się za pomocą SSH jest popularne wśród osób, które
dbają o swoje bezpieczeństwo; jednakże żaden z tych protokołów nie umożliwia
pobierania źródeł przez klienta anonimowego. Zatem, aby użyć tych protokołów
musimy posiadać konto na foo.bar.com.
</p>

</body>
</section>
<section>
<title>Jeszcze kilka drobiazgów...</title>
<body>

<p>
Oprócz CVSROOT będziemy musieli poznać nazwę modułu (kolekcji źródeł),
który chcielibyśmy zobaczyć, a także hasło użytkownika anonimowego, jeśli chcemy
połączyć się z serwerem używającym protokołu haseł CVS. Inaczej niż w przypadku
anonimowego serwera ftp, nie ma standardowego formatu hasła dla użytkownika
anonimowego, dlatego też potrzebne będzie pobranie danego hasła ze strony
deweloperskiej. Jeśli mamy w posiadaniu te informacje, możemy przystąpić do
odkrywania kolejnych sekretów CVS.
</p>

</body>
</section>
<section>
<title>Praca z CVS, część 1</title>
<body>

<p>
Pobieranie źródeł to proces dwuetapowy. Na początku logujemy się do serwera
haseł. Następnie pobieramy zasoby używając komendy <c>checkout</c>. Oto
przykładowy zestaw poleceń, które mogą być wykorzystane do sprawdzenia
najnowszych zasobów Samby, popularnego projektu, którego celem jest integracja
środowisk Unix i Windows:
</p>


<pre caption="CVSROOT">
# <i>export CVSROOT=:pserver:cvs@pserver.samba.org:/cvsroot</i>
</pre>

<p>
Pierwsza komenda ustawia zmienną środowiskową CVSROOT. Jeżeli nie ustawimy tej
zmiennej, poniższe dwa polecenia będą wymagały dodatkowo dopisania<c>-d
:pserver:cvs@pserver.samba.org:/cvsroot</c> po komendzie <c>cvs</c>.
Eksportowanie zmiennej CVSROOT oszczędza nam wiele pisania.
</p>

</body>
</section>
<section>
<title>Praca z CVS, część 2</title>
<body>

<p>
Te komendy pozwalają pobrać aktualną kopię źrodeł deweloperskich. Jeśli mamy
ochotę, możemy skoczyć do przodu, do nowej sekcji, by przeczytać wyjaśnienie
tych poleceń, a następnie wrócić tu ponownie:
</p>

<pre caption="Sprawdzanie zasobów">
# <i>cvs login</i>
(Logowanie do cvs@pserver.samba.org)
CVS password: <comment>(tutaj wpisujemy hasło)</comment>

# <i>cvs -z5 co samba</i>
U samba/COPYING
U samba/Manifest
U samba/README
U samba/Read-Manifest-Now
U samba/Roadmap
U samba/WHATSNEW.txt
<comment>(jest to tylko fragment całego wyjścia)</comment>
</pre>

</body>
</section>
<section>
<title>Praca z CVS - wyjaśnienie</title>
<body>

<p>
Pierwsza komenda (powyżej) loguje nas do pserver, a kolejna mówi naszemu
klientowi CVS by wypożyczyć (ang. check out; komenda: "co") moduł samby używając
kompresji gzip na poziomie 5 ("-z5"), aby przyspieszyć transfer przy wolnym
łączu. Dla każdego nowego pliku, który jest tworzony lokalnie, cvs wypisuje "U
[ścieżka]" informując, że ten określony plik został zaktualizowany na naszym
dysku.
</p>

</body>
</section>
<section>
<title>Sprawdzanie zakończone</title>
<body>

<p>
Kiedy komenda wypożyczenia ("co") wykona swoje zadanie, ujrzymy katalog "samba"
w katalogu, w którym obecnie się znajdujemy; przechowywane będą tam najnowsze
zasoby. Zauważyć można, że wszystkie katalogi mają dodatkowy katalog CVS
znadujący się wewnątrz nich - w ten właśnie sposób CVS przechowuje informacje
dotyczące konta używkownika. Owe katalogi można spokojnie pominąć i zapomnieć o
nich. Odtąd nie będziemy musieli się martwić ustawianiem zmiennej CVSROOT, czy
też przymusem wpisywania wartości CVSROOT w lini poleceń. Dzieje się to dlatego,
że te dane są zapisane właśnie we wcześniej wspomnianych katalogach. Ustawienie
zmiennej CVSROOT jest wymagane tylko przy początkowej incicjalizacji oraz
wykonywaniu polecienia "co".
</p>

</body>
</section>
<section>
<title>Aktualizowanie zasobów</title>
<body>

<p>
A oto nasze najnowsze źródła! Gdy już je posiadamy, możemy je skompilować i
zainstalować, obejrzeć albo zrobić z nimi co tylko nam się podoba.
</p>

<p>
Co jakiś czas prawdopodobnie będziemy chcieli zsynchronizować nasze źródła z
tymi na serwerze CVS. Aby wykonać tą operację nie musimy ponownie logować się do
pserver - te informacje (dane uwierzytelniające) są już przechowywane w
katalogach o których wcześniej wspominaliśmy. Na początku otwórzmy główny
katalog, w którym dokonaliśmy operacji wypożyczenia (w naszym przypadku "samba")
i napiszmy:
</p>

<pre caption="Aktualizacja zasobów">
# <i>cvs update -dP</i>
</pre>

</body>
</section>
<section>
<title>"cvs update", część 1</title>
<body>

<p>
Jeśli na serwerze znajdują się jakieś nowe pliki, cvs zasygnalizuje to
wypisując jednen wiersz "U [ścieżka]" dla każdego wystąpienia nowego pliku.
Jeśli kompilowaliśmy źródła, zapewne zauważymy dużo wierszy typu
"? [path]"; są to pliki obiektowe, które cvs definuje jako te, które nie
odpowiadają żadnym plikom w repozytorium.
</p>

</body>
</section>
<section>
<title>"cvs update", część 2</title>
<body>

<p>
Zauważmy również dwie opcje lini poleceń które użyliśmy w "cvs update".
"-d" mówi cvs, abyt ten stworzył nowe katalogi, jeśli te wystąpiły w
repozytorium (nie dzieje się to domyślnie), a "-P" informuje iż cvs powinien
usunąć puste katalogi z lokalnie wypożyczonych kopii plików. Używanie "-P"
to naprawdę dobry pomysł ponieważ cvs ma skłonność do tworzenia dużej
liczby pustych (użytych raz, a następnie porzuconych) gałęzi drzewa.
</p>

<p>
Jeśli chodzi o proste pobieranie najnowszych zasobów, to wszystko co trzeba
wiedzieć. Teraz przyjrzyjmy się pracy z CVS jako deweloper.
</p>

</body>
</section>
</chapter>

<chapter>
<title>CVS dla deweloperów</title>
<section>
<title>Modyfikowanie plików</title>
<body>

<p>
Bycie deweloperem wymaga od nas modyfikacji plików znajdujących się na serwerze
CVS. Aby dokonać tych zmian wystarczy wprowadzić je w plikach obecnych w naszej
lokalnej kopii repozytorium. Zmiany w zasobach nie zostaną naniesione do plików
w zdalnym repozytorium dopóki nie polecimy CVS, aby zatwierdził (ang. commit)
zmiany. Kiedy sprawdzimy zmiany przez nas dokonane i będziemy mieli pewność, że
możemy wprowadzić zmiany w repozytorium, musimy przejść przez dwufazowy proces.
Na początku zaktualizujemy zasoby poprzez wypisanie poniższych komend w głównym
katalogu źródłowym:
</p>

<pre caption="Aktualizacja zasobów i katalogów">
# <i>cvs update -dP</i>
</pre>

</body>
</section>
<section>
<title>CVS scala zmiany wprowadzone przez innych</title>
<body>

<p>
Jak zauważyliśmy wcześniej, "cvs update" sprawi, że nasze zasoby będą w pełni
aktualne z wersją obecną w repozytorium - ale co się stanie ze zmianami, które
sami wprowadziliśmy? Nie należy się obawiać - nie zostaną one odrzucone. Jeśli
inny deweloper wprowadzi zmiany do pliku, którego nie edytowaliśmy, nasz plik
lokalny będzie dokładnym odzwierciedleniem pliku zawartego w repozytorium.
</p>

<p>
Jeśli zmodyfikowaliśmy wiersze 1-10 pliku lokalnego, a inny deweloper usunął
wiersze 40-50 i dodał 12 nowych wierszy na końcu pliku, zmodyfikował wiersze
30-40, a potem zatwierdził zmiany w repozytorium zanim to nam udało się je
wprowadzić, cvs inteligentnie scala te zmiany w twoim lokalnym pliku, tak że
żadna ze zmian wprowadzonych przez ciebie nie zostanie utracona. To pozwala
dwóm lub większej liczbie deweloperów pracować na różnych częściach jednego
pliku w tym samym czasie.
</p>

</body>
</section>
<section>
<title>Scalanie nie jest doskonałe</title>
<body>

<p>
Jednakże kiedy dwóch lub więcej deweloperów wprowadziło zmiany do <e>tego samego
obszaru w jednym pliku</e>, sprawy robią się trochę bardziej skomplikowane.
Jeśli to się zdarzy, cvs poinformuje nas, że zaistaniał konflikt. Żadna praca
nie zostanie utracona, ale będzie wymagana własnoręczna edycja, ponieważ cvs
wymaga od nas by to właśnie użytkownik "pokazał" programowi jak ma scalać te
dwie zmiany.
</p>

</body>
</section>
<section>
<title>Scalanie</title>
<body>

<p>
Za chwilę przyjrzymy się sposobom rozwiązywania konfliktów, a teraz załóżmy, że
konflikty nie występują i wpisaliśmy "cvs update -dP". Warto wspomnieć, że w
większości przypadków takie problemy nie występują. Bez konfliktów nasze pliki
są zaktualizowane i jesteśmy gotowi do zatwierdzenia zmian, więc wystarczy, że
wpiszemy następujące polecenia (musimy być w głównym katalogu źródłowym):
</p>

<pre caption="Zatwierdzanie zmian">
# <i>cvs commit</i>
</pre>

</body>
</section>
<section>
<title>Co robi commit?</title>
<body>

<p>
"cvs commit" <e>nie tylko</e> zatwierdza nasze zmiany w repozytorium, ale zanim
prześle je do zdalnego repozytorium, cvs uruchomi domyślny edytor i pozwoli na
krótkie opisanie modyfikacji, które wprowadzamy. Po wprowadzeniu komentarzy,
zapisaniu pliku i wyjściu z edytora, nasze zmiany zostaną wprowadzone w zdalnym
repozytorium i będą dostępne dla wszystkich deweloperów w zespole.
</p>

</body>
</section>
<section>
<title>Przeglądanie dziennika</title>
<body>

<p>
Stosunkowo łatwe jest przeglądanie całościowej historii określonego pliku wraz z
komentarzami wprowadzonymi przez deweloperów (włączając w to nas), które mogli
wpisać podczas wprowadzania zmian. W celu przeglądnięcia tych informacji piszemy:
</p>

<pre caption="Przeglądanie informacji z dziennika">
# <i>cvs log myfile.c</i>
</pre>

<p>
Komenda "cvs log" jest rekursywna, co oznacza, że jeżeli zajdzie potrzeba
przeglądnięcia dziennika dla całego drzewa katalogów, wystarczy otworzyć
dany katalog i wpisać:
</p>

<pre caption="Przeglądanie informacji z dziennika przy pomocy programu stronnicowania">
# <i>cvs log | less</i>
</pre>

</body>
</section>
<section>
<title>Opcje przy zatwierdzaniu</title>
<body>

<p>
Gdy domyślny edytor wybrany przez cvs nie odpowiada użytkownikowi instnieje
możliwość samodzielnego doboru edytora przy wprowadzaniu komentarzy po
wykonaniu komend "cvs commit". W takim wypadku należy ustawić zmienną
środowiskową EDITOR na nazwę edytora, który akurat nam odpowiada. Wprowadzenie
takiego ustawienia w pliku <path>~/.bashrc</path> będzie dobrym pomysłem:
</p>

<pre caption="Ustawianie edytora">
export EDITOR=vim
</pre>

<p>
Alternatywanie można określić wiadomość dziennika jako opcję linii komend tak,
aby cvs nie musiał ładować edytora na pierwszym miejscu:
</p>

<pre caption="Zatwierdzanie zmian wraz z niewielką informacją dziennikiem">
# <i>cvs commit -m 'Pozbyłem się paru pomniejszych błędów w portage.py'</i>
</pre>

</body>
</section>
<section>
<title>Plik .cvsrc</title>
<body>

<p>
Przed opisaniem kolejnych komend cvs, zalecane jest ustawienie pliku
<path>~/.cvsrc</path>. Poprzez stworzenie pliku <path>.cvsrc</path> w katalogu
domowym można przekazać do cvs wybrane opcje linii poleceń i ustawienie ich jako
domyślnych, co pozwala uniknąć przymusu pamiętania tych opcji i wpisywaniu ich
za każdym razem. Oto proponowany domyślny plik <path>.cvsrc</path>:
</p>

<pre caption="Zalecane wartości domyślne">
cvs -q
diff -u -b -B
checkout -P
update -d -P
</pre>

</body>
</section>
<section>
<title>Plik .cvsrc - kontynuacja</title>
<body>

<p>
Oprócz ustawienia kilku pomocnych opcji dla komend cvs, pierwsza linia
<path>.cvsrc</path> wprowadza cvs w stan milczenia, co ma znacząco pozytywny
wpływ na wyjście <c>cvs update</c>, które staje się w ten sposób bardziej zwarte
i przejżyste. Po zmodyfikowaniu .cvsrc, możemy napisać <c>cvs update</c> zamiast
<c>cvs update -dP</c>.
</p>

</body>
</section>
<section>
<title>Dodawanie pliku do repozytorium</title>
<body>

<p>
Jest naprawdę łatwo dodać plik źródłowy do CVS. Na początku, tworzymy plik za
pomocą ulubionego edytora. Następnie napiszmy to co poniżej:
</p>

<pre caption="Dodawanie pliku">
# <i>cvs add myfile.c</i>
cvs server: użyj 'cvs commit', aby dodać ten plik na stałe
</pre>

<p>
To nakaże cvs dodanie pliku do repozytorium następnym razem gdy użyjemy komendy
<c>cvs commit</c>. Dopiero teraz inni deweloperzy będą mogli zobaczyć ten plik.
</p>

</body>
</section>
<section>
<title>Dodawanie katalogu do repozytorium</title>
<body>

<p>
Proces dodawania katalogu do repozytorium jest podobny:
</p>

<pre caption="Dodawanie katalogu">
# <i>mkdir foo</i>
# <i>cvs add foo</i>
Katalog /var/cvsroot/mycode/foo dodany do repozytorium
</pre>

<p>
Inaczej niż w przypadku dodawania pliku, katalog pojawia się w repozytorium od
razu. Nie jest potrzebny cvs commit. Kiedy już dodamy lokalny katalog do cvs,
wewnątrz niego zostanie utworzony kolejny katalog, tym razem o nazwie "CVS",
służący do przechowywania danych o koncie użytkownika. W ten sposób wystarczy
spojrzeć do określonego katalogu, a w nim znaleźć CVS by wiedzieć, że ten
katalog został dodany do repozytorium.
</p>

</body>
</section>
<section>
<title>"cvs add" - informacje dodatkowe</title>
<body>

<p>
Można więc zgadnąć, że zanim dodamy plik z katalogu do repozytorium, musimy być
pewni, że katalog nadrzędny został już dodany do CVS. W innym wypadku program
zwróci taki oto komunikat:
</p>

<pre caption="Dodawanie pliku, ale napotkano błąd">
# <i>cvs add myfile.c</i>
cvs add: nie można otworzyć CVS/Entries do odczytu: Brak pliku lub katalogu
cvs [add aborted]: brak repozytorium
</pre>

</body>
</section>
<section>
<title>Zaznajamianie się z "cvs update", część 1</title>
<body>

<p>
Zanim dowiemy się jak rozwiązywać konflikty, zaznajomimy się z wyjściem komendy
"cvs update". Jeśli stworzymy plik ~/.cvsrc, który zawiera linię "cvs -q"
zauważymy, że czytanie wyjścia "cvs update" jest o wiele przyjemniejsze. "cvs
update" informuje o tym co widzi i co robi poprzez wypisanie pojedyńczego znaku,
znaku spacji i nazwy pliku; tak jak w przykładzie:
</p>


<pre caption="Aktualizowanie CVS">
# <i>cvs update -dP</i>
? distfiles
? packages
? profiles
</pre>

</body>
</section>
<section>
<title>Zaznajamianie się z "cvs update", część 2</title>
<body>

<p>
"cvs update" używa znaku "?" (znaku zapytania), aby przekazać, że nic nie wie o
określonych plikach znajdujących się w lokalnej kopi twojego repozytorium. Nie
są oficjalną częścią repozytorium ani nie zostaną dodane w przyszłości (nie
znadują się na liście plików do dodania). Oto lista wszystkich innych
jednoznakowych wiadomości informacyjnych, których używa CVS:
</p>

<pre caption="Znak: U">
U [ścieżka]
</pre>

<p>
Kiedy nowy plik zostanie utworzony w lokalym repozytorium, albo nie
zmieniany plik zostanie zaktualizowany.
</p>

<pre caption="Znak: A">
A [ścieżka]
</pre>

<p>
Ten plik planowany jest do dodania i będzie oficjalnie dodany do repozytorium
po wykonaniu komendy <c>cvs commit</c>.
</p>

</body>
</section>
<section>
<title>Zaznajamianie się z "cvs update", część 3</title>
<body>

<pre caption="Znak: R">
R [ścieżka]
</pre>

<p>
"R" pokazuje, że ten plik jest planowany do usunięcia. Plik zostanie usunięty z
repozytorium jak tylko zastosujemy <c>cvs commit</c>.
</p>

<pre caption="Znak: M">
M [ścieżka]
</pre>

<p>
Oznacza to, że ten plik został zmodyfikowany. Dodatkowo, jest możliwe, ze nowe
zmiany z repozytorium zostały scalone z tym dokumentem poprawnie.
</p>

<pre caption="Znak: C">
C [ścieżka]
</pre>

<p>
Znak "C" oznacza, że ten plik powoduje konflikt i wymaga ręcznej edycji zanim
będziemy mogli zatwierdzić wprowadzone zmiany.
</p>

</body>
</section>
<section>
<title>Wprowadzenie do rozwiązywania konfliktów</title>
<body>

<p>
Spójrzmy teraz jak rozwiązywać konflikt. Jestem zaangażowany w projekt Gentoo
Linux, nasza grupa posiada własny serwer cvs pod adresem cvs.gentoo.org. My
deweloperzy spędzamy większość czasu przeglądając źródła wewnątrz modułu
"gentoo-x86". W tym oto module mamy plik nazwany "ChangeLog" (tłum.: Dziennik
zmian), który przechowuje opisy większych zmian wprowadzany do plików w
repozytorium.
</p>

</body>
</section>
<section>
<title>Przykładowy konflikt</title>
<body>

<p>
Ponieważ ten plik jest modyfikowany za każdym razem gdy deweloper wprowadza
zmiany w CVS, jest on zarazem podstawowym źródłem konfliktów - to przykładowy
konflikt. Przypuśćmy, że dodam następujące linie na początku ChangeLog:
</p>

<pre caption="Wpis w ChangeLog-u">
date 25 Feb 2001

To jest część, którą dodałem sam
</pre>

<p>
Ale, powiedzmy, że zanim jestem w stanie zatwierdzić zmiany w tych trzech
liniach, inny deweloper dodaje następujące linie na początku ChangeLog i
zatwierdza zmiany:
</p>

<pre caption="Wpis w Changelog #2">
date 25 Feb 2001

To jest część dodana przez innego dewelopera
</pre>

</body>
</section>
<section>
<title>Przykładowy konflikt, kontynuacja</title>
<body>

<p>
Teraz kiedy uruchomię <c>cvs update</c> (co powinniśmy robić przed każdym
zatwierdzeniem zmian), cvs nie będzie w stanie scalać tych zmian w mojej
lokalnej kopii ChangeLog ponieważ dodaliśmy linie do tej samej części pliku.
Skąd cvs ma wiedzieć, którą wersję użyć? Tak oto otrzymujemy błąd CVS:
</p>

<pre caption="Błąd CVS">
RCS file: /var/cvsroot/gentoo-x86/ChangeLog,v
retrieving revision 1.362
retrieving revision 1.363
Scalanie różnic z plików wersji 1.362 and 1.363 do ChangeLog-u
rcsmerge: ostrzeżenie: konflikt podczas scalania
cvs server: dostrzeżono konflikt w ChangLog-u
C ChangeLog
</pre>

</body>
</section>
<section>
<title>Rozwiązywanie konfliktu, część 1</title>
<body>

<p>
Aaa - konflikt! Na szczęście, naprawianie konfliktu jest stosunkowo łatwe.
Jeśli uruchomię mój ulubiony edytor tekstu, zobaczę następujący tekst na
początku ChangeLog:
</p>

<pre caption="Konflikt w Changelog">
&lt;&lt;&lt;&lt;&lt;&lt;&lt; ChangeLog
date 25 Feb 2001

To jest część, którą dodałem sam

=======
date 25 Feb 2001

To jest część dodana przez innego dewelopera

&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1.363
</pre>

</body>
</section>
<section>
<title>>Rozwiązywanie konfliktu, część 2</title>
<body>

<p>
Zamiast wybierania właściwej wersji zamiast drugiej, cvs dodał obydwie do
pliku ChangeLog, i otoczył je specjalnymi seperatorami by jasno pokazać
źródło problemu. Teraz to ode mnie zależy, którą wersję pliku wybiorę,
czyli tą, która <e>powinna</e> pojawić się w ChangeLog. W tym wypadku tekst
zastępujący jest raczej kombinacją dwóch wpisów:
</p>

<pre caption="Wpis w Changelog">
date 25 Feb 2001

To jest część, którą dodałem sam

To jest część dodana przez innego dewelopera
</pre>

<p>
Teraz kiedy zastąpiłem konfliktowy rejon odpowiednią wersją tekstu (i usunąłem
markery typu "======="), mogę teraz zatwierdzić moje zmiany do cvs bez dalszych
problemów.
</p>

</body>
</section>
<section>
<title>Porady przy rozwiązywaniu konfliktów</title>
<body>

<p>
Gdy przychodzi do edytowania pliku w którym występuje konflikt, miejmy pewność,
że przeglądniemy cały plik i wyłapiemy wszelkie różnice; jeśli tego nie zrobimy
cvs nie pozwoli nam zatwierdzić zmian! Jest oczywiście bardzo istotne by usunąć
specjalne znaczniki dodane przez cvs do pliku z konfliktami. Kolejna wskazówka -
jeśli przez przypadek zrobimy błąd podczas usuwania konfliktu, a potem ("O nie")
zapiszemy zmiany, możemy odnaleźć oryginalną kopię pliku w pliku
".#nazwa_pliku.nr._wersji".
</p>

</body>
</section>
<section>
<title>Usuwanie pliku</title>
<body>

<p>
Teraz przyszła pora na naukę naszej ostaniej umiejętności w CVS - usuwania
plików z repozytorium. Usuwanie pliku jest procesem dwufazowym. Na początku
usuwamy plik z lokalnych zasobów, a potem wykonujemy odpowiednią komendę <c>cvs
remove</c>:
</p>

<pre caption="Usuwanie pliku">
# <i>rm myoldfile.c</i>
# <i>cvs remove myoldfile.c</i>
</pre>

</body>
</section>
<section>
<title>Usuwanie pliku, kontunuacja</title>
<body>

<p>
Ten plik zostanie zaplanowany do usunięcia z repozytorium następnym razem gdy
zatwierdzimy zmiany. Kiedy zatwierdzimy plik, zostanie on oficjalnie usunięty z
lokalej wersji repozytorium. Chociaż cvs nie usunie tego pliku i będzie
przechowywał całkowity stan jego zawartości i historii, jeśli pojawi się
potrzeba jego przejrzenia później. Jest to jeden ze sposobów w których cvs
chroni wartościowy kod źródłowy.
</p>

<p>
<c>cvs remove</c> jest komendą rekursywną, co oznacza, że możemy usunąć kilka
plików, a potem zastosować <c>cvs remove</c> (komendę) bez żadnych argumentów z
macierzystego katalogu. Czyniąc to sprawimy, że wszystkie usunięte pliki będą
oznaczone jako usunięte, co zostanie wykonane przy następnym zatwierdzeniu
zmian.
</p>

</body>
</section>
<section>
<title>Usuwanie całego katalogu</title>
<body>

<p>
Jeśli chcemy usunąć cały katalog, zalecam następujący proces. Po pierwsze,
fizycznie usuńmy wszystkie pliki z tego katalogu i zatwierdźmy poleceniem <c>cvs
remove</c>:
</p>

<pre caption="Usuwanie katalogu">
# <i>rm *.c</i>
# <i>cvs remove</i>
</pre>

</body>
</section>
<section>
<title>Usuwanie całego katalogu, kontynuacja</title>
<body>

<p>
Potem zatwierdźmy zmiany:
</p>

<pre caption="Zatwierdzanie zmian">
# <i>cvs commit</i>
</pre>

<p>
Teraz czas na sztuczkę. Postępujemy wg. poniższych kroków by usunąć katalog:
</p>

<pre caption="Usuwanie katalogu">
# <i>cd ..</i>
# <i>cvs remove mydir</i>
# <i>rm -rf mydir</i>
</pre>

<p>
Zauważmy, że usuwając katalog nie musimy zatwierdzać zmian - katalogi są dodawane
i usuwane z repozytorium w czasie rzeczywistym.
</p>

</body>
</section>
<section>
<title>Koniec!</title>
<body>

<p>
To koniec wprowadzenia do CVS. Mam nadzieję, że ten tekst był pomocny. Jest
wiele więcej możliwości w CVS, któych nie udało mi sie zawrzeć w tym
wprowadzającym samouczku, ale dzieki Bogu istnieje wiele świetnych źródeł
informacji o CVS, które pozwalają rozwinąć wiedzę o tym systemie kontroli
wersji:
</p>

<ul>
  <li>
    <uri>http://www.cvshome.org</uri> jest miejscem rozwoju CVS, zawiera kilka
    dokumentacji o CVS, razem z oficjalą <uri
    link="http://www.cvshome.org/docs/manual">dokumetacją CVS</uri>
  </li>
  <li>
    <uri link="http://www.durak.org/cvswebsites/">Witryna projektów stron
    internetowych</uri> posiada dobre informacje dotyczące pracy z CVS przy
    rozwijaniu stron sieciowych.
  </li>
  <li>
    Karl Fogel napisał książkę pod tytułem <uri
    link="http://cvsbook.red-bean.com">Rozwijanie Open Source przy pomocy
    CVS</uri>. Kilka rozdziałów jest dostępnych za darmo z tej strony.
  </li>
  <li>
    <uri link="http://www.freebsd.org/projects/cvsweb.html">cvsweb</uri>
    jest świetnym skryptem CGI, który dodaje interfejs sieciowy do naszego
    repozytorium CVS; doskonale sprawdza się do do przeglądania swoich zasobów.
  </li>
  <li>
    Strona
    <uri link="http://www.loria.fr/~molli/cvs-index.html">CVS Bubbles</uri>
    ma duży zasób dobrych materiałów właczając w to CVS FAQ-o-matic.
  </li>
</ul>

</body>
</section>
<section>
<title>O tym dokumencie</title>
<body>

<p>
Oryginalna wersja tego atrykułu została opublikowana na IMB developerWorks i
jest własnością Westtech Information Services. Ten dokument jest zaktualizowaną
wersją oryinału i zawiera różnorakie ulepszenia dodane przez zespół
odpowiadający za dokumentację w Gentoo Linux.
</p>

</body>
</section>
</chapter>
</guide>
