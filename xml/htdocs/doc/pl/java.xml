<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/java.xml,v 1.19 2008/01/20 19:38:02 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/java.xml" lang="pl">
<title>Java w Gentoo</title>

<author title="Autor">
  <mail link="nichoj@gentoo.org">Joshua Nichols</mail>
</author>
<author title="Redaktor">
  <mail link="karltk@gentoo.org">Karl Trygve Kalleberg</mail>
</author>
<author title="Redaktor">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="Tłumacz">
  <mail link="muchar@gentoo.org">Robert Muchacki</mail>
</author>

<abstract>
Tekst o konfiguracji i pracy z Javą w Gentoo.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.16</version>
<date>2008-01-01</date>

<chapter>
<title>Co to jest Java?</title>
<section>
<title>Ogólny przegląd</title>
<body>

<p>
Java to język programowania opracowany przez inżynierów z laboratoriów Sun
Microsystems. Jest to zorientowany obiektowo język, który może być uruchamiany
na wielu platformach bez konieczności rekompilacji kodu dla każdej z platform
osobno. Pomimo że Java może być kompilowana do zwykłego programu, to jej
największą popularność powoduje fakt, że jest bardzo przenośna oraz
posiada możliwość łatwego pozbywania się śmieci z kodu. Aby osiągnąć taki
stopień przenośności kompilatory Java kompilują kod do postaci "Java bytecode",
który można uruchomić w JRE (Java Runtime Envirnoment - środowisko
uruchomieniowe Java) a nie bezpośrednio w systemie operacyjnym.
</p>

<p>
Aby uruchomić program napisany w Javie, należy mieć zainstalowany JRE (Java
Runtime Environment - środowisko uruchomieniowe Java). JRE instaluje główne
biblioteki, maszynę wirtualną Java, wtyczki do przeglądarek, etc. JDK (Java
Development Kit) dodaje narzędzia programistyczne, jak na przykład kompilator
kodu Java czy debugger.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Wprowadzenie</title>
<section>
<title>Istniejące instalacje</title>
<body>

<p>
Dla istniejących instalacji, bez względu na to czy mieliśmy zainstalowane
jakiekolwiek pakiety związane z Javą, powinniśmy się upewnić, że postępowaliśmy
zgodnie z dokumentem <uri link="/proj/pl/java/java-upgrade.xml">Aktualizacja
Javy</uri>.
</p>

</body>
</section>
<section>
<title>Nowe instalacje</title>
<body>

<p>
W przypadku nowej instalacji nie musimy wykonywać żadnych dodatkowych
czynności.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Instalacja wirtualnej maszyny</title>
<section>
<title>Wybory</title>
<body>

<p>
W Gentoo dostępne jest kilka rodzajów zarówno JRE (Runtime Enviroment)  jak i
JDK (Development Kit).
</p>

<table>
 <tr>
   <th>Twórcy</th>
   <th>JDK</th>
   <th>JRE</th>
 </tr>
 <tr>
   <ti>The Blackdown Java Kit</ti>
   <ti>dev-java/blackdown-jdk</ti>
   <ti>dev-java/blackdown-jre</ti>
 </tr>
 <tr>
   <ti>Sun's Java Kit</ti>
   <ti>dev-java/sun-jdk</ti>
   <ti>dev-java/sun-jre-bin</ti>
 </tr>
 <tr>
   <ti>The IBM Java Kit</ti>
   <ti>dev-java/ibm-jdk-bin</ti>
   <ti>dev-java/ibm-jre-bin</ti>
 </tr>
 <tr>
   <ti>BEA WebLogic's J2SE Development Kit</ti>
  <ti>dev-java/jrockit-jdk-bin</ti>
 </tr>
</table>

<!--
TODO: list free implmentations?
note about not drop-in replacemenets
kaffe/sablevm/gcj/jamvm
-->

<p>
Domyślnym wyborem jest wersji 1.4 Blackdown JRE/JDK, ponieważ jest ona darmowa
i dostępna bez przeprowadzania zbędnej rejstracji.
</p>

<p>
Zarówno Sun jak i IBM są zdecydowanie szybsze, niemniej jednak, zdobycie ich
wymaga nieco więcej pracy, gdyż należy przeczytać i zaakceptować ich licencję
przed pobraniem plików z sieci (IBM dodatkowo wymaga rejestracji).
</p>

</body>
</section>

<section>
<title>Instalowanie JRE/JDK</title>
<body>

<p>
Aby zainstalować domyślne dla wykorzystywanego profilu JDK, należy uruchomić
<c>emerge virtual/jdk</c>, natomiast by zainstalować domyślne JRE - <c>emerge
virtual/jre</c>.
</p>

<p>
Aktualnie Sun zmienił licencję na swoje pakiety JDK i JRE na bardziej przyjazne
dla dystrybucji Linuksa. W wyniku tego od wersji 1.5, mogą one być pobierane za
darmo, bez niepotrzebnego zawracania głowy.
</p>

<note>
JDK zawiera w sobie JRE, więc jeżeli zainstalujemy JDK, nie powinniśmy
dodatkowo instalować JRE.
</note>

</body>
</section>
<section>
<title>Instalacja maszyn wirtualnych pobieranych ręcznie</title>
<body>

<p>
Jak wcześniej wspomnieliśmy, niektóre z pakietów JDK lub JRE wymagają podjęcia
kilku kroków przed ich instalacją. Uruchamiamy emerge tak jakbyśby normlanie
instalowali te pakiety. Po wydaniu tego polecenia zostaniemy poinformowania co
i skąd mamy pobrać.
</p>

<p>
Wszystkie wskazane pliki należy umieścić w katalogu
<path>/usr/portage/distfiles</path>. Dopiero potem można ponownie uruchomić
polecenie emerge, aby dane JRE/JDK zostały poprawnie zainstalowane.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja wirtualnej maszyny</title>
<section>
<title>Przegląd</title>
<body>

<p>
Gentoo posiada możliwość bezkonfliktowego zainstalowania wielu JDK oraz JRE
równocześnie.
</p>

<p>
Używając z konta roota narzędzia <c>java-config</c>, można ustawić domyślne
środowisko dla całego systemu. Użytkownicy mogą użyć <c>java-config</c>, aby
ustawić własne domyślne środowisko, które może być inne niż to określone w
systemie.
</p>

<note>
Środowisko dla systemu oraz maszynę wirtualną możemy zmienić również używajac
narzędzia <e>eselect</e>. Polecenie <c>eselect java-vm help</c> wyświetli
więcej informacji na ten temat.
</note>

</body>
</section>
<section>
<title>Ustawianie domyślnego środowiska wirtualnej maszyny</title>
<body>

<p>
Uruchamiając polecenie <c>java-config --list-available-vms</c>, wyświetlona
zostanie lista dostępnych JRE oraz JDK na danym systemie. Poniżej przedstawiamy
przykład takiej listy:
</p>

<pre caption="Wyświetlanie dostępnych maszyn wirtualnych">
# <i>java-config --list-available-vms</i>
1)      Blackdown JDK 1.4.2.03 [blackdown-jdk-1.4.2]
2)      Blackdown JRE 1.4.2.03 [blackdown-jre-1.4.2]
3)      Blackdown 32bit JRE 1.4.2.03 [emul-linux-x86-java-1.4.2]
4)      Sun 32bit JRE 1.5.0.08 [emul-linux-x86-java-1.5]
5)      Kaffe 1.1.7 [kaffe]
*)      Sun JDK 1.5.0.08 [sun-jdk-1.5]
</pre>

<p>
Znak <e>*</e> (gwiazdka) informuje nas o aktualnie aktywnej maszynie wirtualnej
(systemowej lub wybranej przez użytkownika, jeżeli taka jest). Nazwy w
nawiasach (<path>"[]"</path>) to wskaźnik lub identyfikator dla konkretnej
maszyny wirtualnej. Przekazując tę wartość (lub numer) do <c>java-config
--set-system-vm</c> ustawia się wskazaną maszynę wirtualną jako domyślną.
Poniżej znajduje się przykład takiej czynności:
</p>

<pre caption="Ustawianie domyślnej maszyny wirtualnej dla systemu">
<comment>(Poprzez wartość z nawiasów (zalecane))</comment>
# <i>java-config --set-system-vm blackdown-jdk-1.4</i>
Now using blackdown-jdk-1.4 as your generation-2 system JVM
<comment>(Poprzez numer maszyny)</comment>
# <i>java-config --set-system-vm 2</i>
Now using sun-jdk-1.5 as your generation-2 system JVM
</pre>

<p>
Jako zwykły użytkownik możemy użyć <c>java-config --set-user-vm</c>
</p>

<note>
Nie musimy wykonywać <c>source</c> profilu w celu aktualizacji maszyny
wirtualnej systemowej lub użytkownika.
</note>

</body>
</section>
<section id="preferred-vm">
<title>Preferowana maszyna wirtualna</title>
<body>

<p>
Podczas instalowania pakietów Javy, wirtualna maszyna może być - i będzie
zmieniona - w razie potrzeby.
</p>

<p>
Ponieważ istnieje dużo różnych wirtualnych maszyn Javy, nie jesteśmy w stanie
przetestować działania każdego pakietu na każdej z nich. Aby się upewnić, że
każdy z nich został zainstalowany poprawnie, wybraliśmy listę
<e>domyślnych/wspieranych maszyn wirtualnych</e> dla każdej architektury.
Możemy znaleźć je w
<path>/usr/share/java-config-2/config/jdk-defaults.conf</path>. Kiedy
instalujemy pakiety w Javie, a w systemie zostanie wykryta chociaż jedna maszyna
zgodna z tym plikiem, zostanie ona automatycznie użyta zamiast maszyny
systemowej.
</p>

<p>
Zmiana maszyny wirtualnej podczas instalacji jest potrzebna również w przypadku,
gdy maszyna systemowa ma wersję 1.4 natomiast instalowany pakiet wymaga wersji
1.5. Podczas instalacji zostanie ona zmieniona na 1.5, pozostawiając maszynę
systemową nietkniętą.
</p>

<p>
Oczywiście, w Gentoo wszystko zależy od nas, więc możemy ominąć te domyślne
ustawienia w <path>/etc/java-config-2/build/jdk.conf</path> i mieć pełną
kontrolę nad tym jaka maszyna wirtualna jest używana w naszym systemie.
Kilka przykładów:
</p>

<pre caption="Przykład /etc/java-config-2/build/jdk.conf">
<comment>(Zawsze będzie korzystać z sun-jdk, np. sun-jdk-1.4 for 1.4, sun-jdk-1.5 for 1.5, etc)</comment>
*=sun-jdk
</pre>

<pre caption="Przykład /etc/java-config-2/build/jdk.conf">
<comment>(Będzie korzystać sun-jdk-1.5 kiedy tylko jest to możliwe, poza przypadkami gdzie użycie 1.3 lub 1.4 jest konieczne)</comment>
*=sun-jdk-1.5
</pre>

<pre caption="Przykład /etc/java-config-2/build/jdk.conf">
<comment># Dla 1.3 preferujemy sun-jdk 1.4, a gdy niedostępne ibm-jdk-bin,
# Dla 1.4 użyjemy blackdown-jdk, a dla 1.5 sun-jdk</comment>
1.3=sun-jdk-1.4 ibm-jdk-bin
1.4=blackdown-jdk
1.5=sun-jdk
</pre>

<warn>
Nie musimy edytować tego pliku. Jeżeli chcemy zmienić te opcje w celu użycia
nie wspieranej maszyny wirtualnej, prawdopodobnie zakończy się to błędem.
Zgłoszone błędy z użyciem niewspieranych maszyn wirtualnych będą miały niższy
priorytet niż te ze wspieranymi.
</warn>

</body>
</section>
</chapter>

<chapter>
<title>Kompilatory</title>
<section>
<body>

<p>
Standardowym kompilatorem Java używanym do budowania jest javac, który wchodzi w
skład każdego JDK. Podobnie jak wybieraliśmy maszynę wirtualną, możemy również
wybrać, którego kompilatora chcemy użyć. W pliku
<path>/etc/java-config-2/build/compilers.conf</path> zdefiniujemy listę
ustawień, w których zdecydujemy jakiego kompilatora chcemy użyć.
</p>

<pre caption="/etc/java-config-2/build/compilers.conf">
# If the ebuild supports it
# it will chceck the COMPILERS var front to back and
# use the first compiler that is installed

COMPILERS="ecj-3.1 jikes javac"
</pre>

<p>
Niektóre kompilatory nie wspierają wszystkich argumentów -target i -source.
Dlatego każdy kompilator z powyższej listy jest sprawdzany pod kątem wspierania
danego -source/-target. javac będzie działać we wszystkich przypadkach, więc
jeżeli żaden kompilator z listy nie będzie spełniał wymagań, zostanie użyty
javac.
</p>

<p>
Więcej informacji n/t kompilatorów znajdziemy poniżej:
</p>

<table>
 <tr>
   <th>Nazwa</th>
   <th>Identyfikator</th>
   <th>Pakiet</th>
   <th>Opis</th>
 </tr>
 <tr>
   <ti>javac</ti>
   <ti>javac</ti>
   <ti>N/A</ti>
   <ti>
     Jest to domyślny kompilator, wchodzący w skład wszystkich JDK.
   </ti>
 </tr>
 <tr>
   <ti>jikes</ti>
   <ti>jikes</ti>
   <ti>dev-java/jikes</ti>
   <ti>
    Jikes był początkowo tworzony przez IBM. Najśmieszniejsze jest to, że
    jest on ogólnie szybszy od javac. Należy jednak zauważyć, że jest on
    bardziej pedantyczny i będzie wyświetlał błędy w przypadkach, w których
    javac nie ma problemów. Dodatkowo, jikes nie wspiera Javy w wersji 1.5
  </ti>
 </tr>
 <tr>
   <ti>Eclipse Compiler dla Java</ti>
   <ti>ecj-3.1</ti>
   <ti>=dev-java/eclipse-ecj-3.1*</ti>
   <ti>
     ECJ jest kompilatorem używanym przez środowisko Eclipse. Zawiera on bardzo
     dużo udogodnień i jest w miarę szybki. Wspiera składnię Java 1.5
   </ti>
 </tr>
</table>

</body>
</section>
</chapter>

<chapter>
<title>Ustawianie domyślnej CLASSPATH</title>
<section>
<body>

<warn>
Opcje objaśnione w tym akapicie, nie powinny zostać stosowane pochopnie i być
może zostaną usunięte w przyszłości. Nie polecamy ich używania, chociażby ze
względu na to, że nasze projekty lub aplikacje w Java mogą dosokonale zarządzać
swoimi zmiennymi CLASSPATH. Jeżeli zdecydujemy się na ustawienie domyślnej
wartości CLASSPATH, niektóre aplikacje mogą zachowywać się w nieprzewidziany
sposób, ponieważ natrafią na znajdujące się w CLASSPATH nieznane klasy.
</warn>

<p>
<c>java-config</c> możemy użyć zarówno do ustawienia systemowej CLASSPATH, jak i
oddzielnej dla każdego użytkownika
</p>

<p>
Po pierwsze powinniśmy wylistować dostępne biblioteki Java zainstalowane w
naszym systemie, które możemy włożyć do CLASSPATH. Poniżej znajduje się
przykładowe wyjście programu:
</p>

<pre caption="Lista klas">
# <i>java-config --list-available-packages</i>
[xerces-2] The next generation of high performance, fully compliant XML parsers in the Apache Xerces family (/usr/share/xerces-2/package.env)
[junit] Simple framework to write repeatable tests (/usr/share/junit/package.env)
[bsh] BeanShell: A small embeddable Java source interpreter (/usr/share/bsh/package.env)
[bcel] The Byte Code Engineering Library: analyze, create, manipulate Java class files (/usr/share/bcel/package.env)
[log4j] A low-overhead robust logging package for Java (/usr/share/log4j/package.env)
...
</pre>

<p>
Znów, nazwy w nawiasach (<e>[]</e>) są identyfikatorem, który musimy wpisać w
<c>java-config --set-system-classpath</c> tak jak pokazano poniżej:
</p>

<pre caption="Ustawianie ścieżek dla klas">
# <i>java-config --set-system-classpath log4j,xerces-2</i>
</pre>

<note>
Obecny katalog (<path>.</path>) nie będzie należał do systemowego classpath,
katalog ten powinien zostać dodany przez systemowy profil logowania.
</note>

<p>
Teraz powinniśmy zauktualizować nasze środowisko, poprzez przelogowanie lub
wykonanie polecenia <e>source /etc/profile</e>.
</p>

<p>
Jeśli chodzi o użytkowników, <c>java-config --set-user-classpath</c> stworzy
<path>~/.gentoo/java-env-classpath</path>, który powinien być teraz wczytywany
przez plik konfiguracyjny powłoki.
</p>

<pre caption="Wczytywanie własnych classpath">
<i>if [[ -f "${HOME}/.gentoo/java-env-classpath" ]]; then
       source ${HOME}/.gentoo/java-env-classpath
   fi</i>
</pre>

<p>
Jeżeli bardzo chcemy zmienić systemową, lub domyślną dla użytkownika classpath,
możemy dodać coś takiego do pliku konfiguracyjnego powłoki (jednak dalej nie
polecamy tego rozwiązania):
</p>

<pre caption="Ustawianie classpath">
# <i>export CLASSPATH="${CLASSPATH}:$(java-config --classpath log4j,xerces-2)"</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Wtyczki Java dla przeglądarek</title>
<section>
<title>Instalacja wtyczki</title>
<body>

<p>
Wtyczkę Java dla naszej przeglądarki możemy zainstalować instalując wirtualną
maszynę z flagą USE <c>nsplugin</c>.
</p>

<note>
Flaga <c>nsplugin</c> nie jest dostępna dla wszystkich architektur. Dostępność
wtyczki sprawdzamy przed instalacją przez wydanie polecenia <c>emerge -pv
&lt;java-vm&gt;</c>.
</note>

<p>
Portage pozwala na instalację kilku wersji wtyczki Java, jednak używana będzie
tylko jedna, przeznaczona dla naszej przeglądarki. Listę dostępnych wtyczek
możemy przejrzeć po wydaniu komendy:
</p>

<pre caption="Wyświetlanie listy dostępnych wtyczek">
# <i>eselect java-nsplugin list</i>
  [1]   sun-jre-bin-1.5
  [2]   blackdown-jre-1.4.2
</pre>

<p>
W tym przykładzie, za wtyczkę dla przeglądarki wybieramy <c>sun-jre-bin</c>.
</p>

<pre caption="Wybieranie wtyczki">
# <i>eselect java-nsplugin set sun-jre-bin-1.5</i>
</pre>

<p>
Musimy zweryfikować czy wybrana została prawidłowa wtyczka.
</p>

<pre caption="Weryfikacja wtyczki">
# <i>eselect java-nsplugin list</i>
  [1]   sun-jre-bin-1.5  current
  [2]   blackdown-jre-1.4.2
</pre>

<p>
W stronie Java.com możemy znaleźć również strone <uri
link="http://java.com/en/download/installed.jsp">weryfikującą zainstalowaną
wtyczkę</uri>. Dodatkowo, gdy używamy przelądarki bazującej na rozwiązaniach
Mozilli, weryfikację możemy przeprowadzić poprzez wpisanie <c>about:plugins</c>
w pasku adresu.
</p>

</body>
</section>
<section>
<title>Wtyczki na komputerach z multilib</title>
<body>

<p>
Jeśli używamy systemu zarówno z 64 jak i 32-bitowymi bibliotekami (dla
przykładu, na architekturze AMD64), możemy użyć tylko 32-bitowej wersji wtyczki.
</p>

<p>
Aby używać 32-bitowej wtyczki należy zainstalować <c>emul-linux-x86-java</c> z
aktywną flagą USE <c>nsplugin</c>.
</p>

<pre caption="Instalacja 32-bitowej wtyczki">
# <i>echo "app-emulation/emul-linux-x86-java nsplugin" >> /etc/portage/package.use</i>
# <i>emerge emul-linux-x86-java</i>
</pre>

<p>
Następnie sprawdzamy, które wtyczki są dostępne:
</p>

<pre caption="Wyświetlanie listy dostępnych wtyczek">
# <i>eselect java-nsplugin list</i>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.4.2
  [2]   emul-linux-x86-java-1.5
</pre>

<p>
Pomimo że należy wybrać przeglądarkę 32-bitową (jak na przykład
<c>mozilla-firefox-bin</c>,) aby współdziałała z naszą 32-bitową wtyczką, wersja
64-bitowa przeglądarki <c>konqueror</c> używa JVM bezpośrednio więc możliwym
jest korzystanie z wersji 64-bitowej <c>blackdown</c> z tą przeglądarką; dalsza
konfiguracja nie jest konieczna.
</p>

<p>
Teraz wybierzmy odpowiednią wtyczkę dla naszej 32-bitowej przeglądarki.
</p>

<pre caption="Wybieranie wtyczek">
# <i>eselect java-nsplugin set 32bit emul-linux-x86-java-1.5</i>
</pre>

<p>
Powinniśmy zweryfikować czy zostały wybrane odpowiednie wtyczki:
</p>

<pre caption="Weryfikacja wtyczek">
# <i>eselect java-nsplugin list</i>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.4.2
  [2]   emul-linux-x86-java-1.5  current
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Flagi USE których można użyć z Javą</title>
<section>
<title>Ustawianie flag USE</title>
<body>

<p>
Aby uzyskać więcej informacji dotyczących flag USE, należy odwołać sie do
rozdziału opisującego <uri
link="/doc/pl/handbook/handbook-x86.xml?part=2&amp;chap=2">flagi USE</uri> w
Podręczniku Gentoo.
</p>

</body>
</section>
<section>
<title>Flagi</title>
<body>

<ul>
  <li>Flaga <b>java</b> dodaje obsługę dla Javy w wielu programach</li>
  <li>
    Flaga <b>nsplugin</b> dodaje obsługę java dla przeglądarek z rodziny
    Mozilli (włączając w to Firefox). Flaga ta jest niezbędna gdy zechcemy
    przeglądać aplikacje java w przeglądarce z tej rodziny.
  </li>
  <li>
    Flaga <b>source</b> zainstaluje spakowane wersje kodów źródłowych pakietów.
    Jest to najczęściej używane w IDE do dołączenia kodów źródłowych do
    bibliotek, których używamy.
  </li>
  <li>Flaga <b>jce</b> dodaje wsparcie dla silnika szyfrującego Java.</li>
  <li>
    Dla pakietów Java, flaga <b>doc</b> instaluje po prostu dokumentację dla
    API używając javadoc.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Dodatkowe zasoby</title>
<section>
<title>Zasoby poza siecią</title>
<body>

<ul>
  <li>Strona man java-config</li>
  <li><c>java-config --help</c></li>
</ul>

</body>
</section>
<section>
<title>Zasoby w sieci</title>
<body>

<ul>
  <li>
    Strona <uri link="http://www.gentoo.org/proj/en/java/">Gentoo Java
    Project</uri>
  </li>
  <li>
    Archiwa list <uri
    link="http://news.gmane.org/gmane.linux.gentoo.java">gentoo-java</uri>,
    <uri link="http://news.gmane.org/gmane.linux.gentoo.devel">gentoo-dev</uri>
    i <uri
    link="http://news.gmane.org/gmane.linux.gentoo.user">gentoo-user</uri>
  </li>
  <li>Kanały #gentoo oraz #gentoo-java w sieci irc.freenode.net</li>
  <li>
    <uri link="http://en.wikipedia.org/wiki/Java_programming_language">Strona
    Wikipedii o Java</uri>
  </li>
  <li>
    Jeśli zauważymy jakiś błąd lub chcemy przekazać sugestie dotyczące tego
    dokumenty prosimy o kontakt z zespołem Gentoo Java:
    <mail>java@gentoo.org</mail>.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
