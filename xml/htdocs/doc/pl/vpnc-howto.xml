<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/vpnc-howto.xml,v 1.4 2008/01/17 19:32:27 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/vpnc-howto.xml" lang="pl">

<title>vpnc w Gentoo</title>

<author title="Autor">
  <mail link="dhaskew@earthlink.net">David H. Askew</mail>
</author>
<author title="Redaktor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Redaktor">
  <mail link="opfer@gentoo.org">Christian Faulhammer</mail>
</author>
<author title="Redaktor">
  <mail link="fischer@unix-ag.uni-kl.de">Thomas Fischer</mail>
</author>
<author title="Tłumacz">
  <mail link="shadow@gentoo.org">Damian Kuras</mail>
</author>

<abstract>
W przewodniku tym opisano sposób łączenia stacji roboczej z koncentratorem
CISCO VPN przy wykorzystaniu vpnc do zarządzania połączeniem.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.4</version>
<date>2008-01-14</date>

<chapter>
<title>Wprowadzenie</title>
<section>
<body>

<p>
Jeżeli czytamy ten dokument zapewne chcemy podłaczyć się do sieci w naszym
biurze z domu czy w trakcie podróży. Wiele firm wykorzystuje koncentratory
Cisco 3000 VPN do takich celów i jestem gotów się założyć, że wielu
początkujących użytkowników Linuksa myśli, że są skazani na używanie systemu
operacyjnego Windows, aby móc się łączyć z tymi urządzeniami. Dokument ten ma
za zadanie zmienić ten pogląd i pokazać w jaki sposób stworzyć i skonfigurować
działający tunel przy pomocy stacji roboczej Gentoo lub laptopa.
</p>

</body>
</section>
<section>
<title>Co znajduje się w tym opracowaniu</title>
<body>

<ul>
  <li>Przedownik po podstawach działania <c>vpnc</c></li>
  <li>
    Dyskusje na temat problemów związanych z DNS oraz routingiem w VPN-ach
  </li>
  <li>Przykłady zarządzania sesjami VPN</li>
  <li>Przydatne sztuczki i kruczki</li>
</ul>

</body>
</section>
<section>
<title>Czego nie zawiera to opracowanie</title>
<body>

<ul>
  <li>Zaawansowanego przewodnika po technologiach VPN oraz szyfrowania</li>
  <li>Opisu każdej z funkcji <c>vpnc</c></li>
</ul>

</body>
</section>
<section>
<title>Założenia</title>
<body>

<p>
W tym punkcie musimy przyjąć pewne założenia:
</p>

<ul>
  <li>Posiadamy zainstalowany system Gentoo</li>
  <li>Posiadamy dostęp do sieci Internet</li>
  <li>Chcemy się połączyć z koncenratorem Cisco 3000 VPN</li>
  <li>Potrafimy konfigurować, budować i instalować nowe jądro</li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja jądra</title>
<section>
<body>

<p>
Aby Linux mógł utworzyć połączenie VPN należy uaktywnić wsparcie <e>Universal
TUN/TAP device driver support</e> w jądrze. Co to jest i dlaczego potrzebujemy
tej opcji? Poniżej znajduje się dość proste wyjaśnienie tej opcji pochodzące z
menu konfiguracyjnego jądra:
</p>

<pre caption="CONFIG_TUN">
TUN/TAP provides packet reception and transmission for user space
programs. It can be viewed as a simple Point-to-Point or Ethernet
device, which instead of receiving packets from a physical media,
receives them from user space program and instead of sending packets
via physical media writes them to the user space program.

When a program opens /dev/net/tun, driver creates and registers
corresponding net device tunX or tapX. After a program closed above
devices, driver will automatically delete tunXX or tapXX device and
all routes corresponding to it.
</pre>

<p>
Zaczynając od wersji 0.4.0-r1, ebuild programu <c>vpnc</c> sprawdza czy mamy
aktywne wsparcie dla TUN/TAP. Jeżeli nie włączyliśmy tej opcji, należy zrobić
to teraz. Nie ma znaczenia czy wbudujemy obsługę na stałe czy jako moduł.
Następnie kompilujemy jądro i ponownie uruchamiamy system.
</p>

<p>
Możemy sami sprawdzić czy jądro, którego używamy, posiada wsparcie dla
TUN/TAP poprzez następujące polecenie:
</p>

<pre caption="Weryfikacja konfiguracji jądra">
# <i> grep "TUN" /usr/src/linux/.config</i>
CONFIG_INET_TUNNEL=m
# CONFIG_INET6_TUNNEL is not set
# CONFIG_IPV6_TUNNEL is not set
<comment>(TUN/TAP jest uaktywnione jako moduł)</comment>
CONFIG_TUN=m
# CONFIG_8139TOO_TUNE_TWISTER is not set
</pre>

<p>
Jak widzimy powyżej, opcja <c>CONFIG_TUN=m</c> skompilowana jest jako moduł.
Jeżeli nie mamy wsparcia, musimy go uaktywnić w jądrze, przebudować,
zainstalować, ponownie uruchomić komputer, a następnie wracamy do tego
przewodnika, aby kontynuować pracę.
</p>

<pre caption="Lokalizacji konfiguracji w menu konfiguracji jądra">
Device Drivers  ---&gt;
  Networking support  ---&gt;
    [*] Universal TUN/TAP device driver support
</pre>

<p>
Jeżeli wbudowaliśmy wsparcie TUN/TAP bezpośrednio do jądra, po wydaniu
polecenia <c>dmesg</c> powinniśmy zobaczyć następujący wynik:
</p>

<pre caption="Sprawdzanie wyniku polecenia dmesh">
# <i>dmesg | grep TUN</i>
Universal TUN/TAP device driver 1.5 (C)1999-2002 Maxim Krasnyansky
</pre>

<p>
Jeżeli zbudowaliśmy wsparcie dla TUN/TAP jako moduł, najpierw powinniśmy
załadować moduł <c>tun</c>:
</p>

<pre caption="Ładowanie modułu tun">
# <i>modprobe tun</i>
# <i>lsmod</i>
Module                  Size  Used by
tun                     7296  0
</pre>

<p>
Teraz, kiedy już załadowaliśmy moduł <c>tun</c> należy sprawdzić rezultat
polecenia <c>dmesg</c>. Powinniśmy zobaczyć następujący wynik:
</p>

<pre caption="Sprawdzanie wyniku polecenia dmesg">
# <i>dmesg | grep TUN</i>
Universal TUN/TAP device driver 1.5 (C)1999-2002 Maxim Krasnyansky
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Instalacja potrzebnego oprogramowania</title>
<section>
<body>

<p>
Po skonfigurowaniu jądra, należy zainstalować program <c>net-misc/vpnc</c>:
</p>

<pre caption="Instalacja vpnc">
# <i>emerge -av net-misc/vpnc</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Przykładowa konfiguracja</title>
<section>
<body>

<p>
Aby ułatwić pracę można skorzystać z przykładowej konfiguracji. Dla potrzeb
tego ćwiczenia, zakładamy, że posiadamy domową sieć składającą się z kilku
komputerów. Wszystkie posiadają adresy sieci 192.168.0.0 / 255.255.255.0. Sieć
zarządzana jest przez komputer z systemem Gentoo oraz firewallem iptables,
DHCP, serwerem DNS itp. Dodatkowo na komputerze znajduje się maskarada.
Posiadamy również stację roboczą w obrębie naszej sieci, z której chcemy się
łączyć poprzez tunel VPN do komputera w naszym biurze.
</p>

<p>
Przykładowa konfiguracja stacji roboczej wygląda następująco:
</p>

<pre caption="Konfiguracja stacji roboczej">
<comment>(Konfiguracja serwera nazw)</comment>
# <i>cat /etc/resolv.conf</i>
nameserver      192.168.0.1

<comment>(Konfiguracja sieci)</comment>
# <i>cat /etc/hosts</i>
127.0.0.1       desktop localhost
192.168.0.1     router
192.168.2.2     mediacenter

<comment>(Konfiguracja interfejsów)</comment>
# <i>ifconfig -a</i>
eth0      Link encap:Ethernet  HWaddr 00:11:2F:8D:08:08
          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::211:2fff:fe8d:808/64 Scope:Link
          UP BROADCAST NOTRAILERS RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:3657889 errors:0 dropped:0 overruns:0 frame:0
          TX packets:2305893 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:2193722103 (2092.0 Mb)  TX bytes:1415104432 (1349.5 Mb)
          Interrupt:185 Memory:fac00000-0

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:35510 errors:0 dropped:0 overruns:0 frame:0
          TX packets:35510 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:16023838 (15.2 Mb)  TX bytes:16023838 (15.2 Mb)

<comment>(Tablica routingu)</comment>
# <i>netstat -r</i>
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
192.168.0.0     *               255.255.255.0   U         0 0          0 eth0
loopback        desktop         255.0.0.0       UG        0 0          0 lo
default         router          0.0.0.0         UG        0 0          0 eth0
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja vpnc</title>
<section>
<body>

<p>
Gdy posiadamy zainstalowany już program <c>vpnc</c> oraz przykładową
konfigurację, z której możemy czerpać natchnienie możemy poznać podstawowe
ustawienia <c>vpnc</c>. Plik konfiguracyjny <c>vpnc</c> dla ustawienia
parametrów połączeń może znajdować się w kilku miejscach, w zależności od tego
jak dużo profili chcemy stworzyć. Domyślnie <c>vpnc</c> szuka na początku pliku
<path>/etc/vpnc/default.conf</path>. Jeśli nie znajdzie tego pliku, szuka
konfiguracji w pliku <path>/etc/vpnc.conf</path>. W poniższym przykładzie
posłużymy się jedynie przykładem z pojedynczym profilem, przez co potrzebować
będziemy pliku konfiguracyjnego znajdującego się w <path>/etc/vpnc.conf</path>.
Należy upewnić się, że nie posiadamy pliku <path>/etc/vpnc/default.conf</path>.
</p>

<pre caption="Przykładowy plik /etc/vpnc.conf">
IPSec gateway vpngateway.domain.org
IPSec ID group_id
IPSec secret group_password
Xauth username network_signon
Xauth password network_password
</pre>

<p>
Przykładowy plik konfiguracyjny zaprezentowany powyżej powinien zostać
zmodyfikowany tak, aby argumenty dla danych zmiennych były odpowiednie do
naszych potrzeb. W opcji gateway zamiast <c>vpngateway.domain.org</c> podać
możemy nazwę domeny lub adres IP. Odpowiednie wartości dla opcji ID oraz secret
powinniśmy dostać od administratora naszej sieci. Jeśli nie uzyskamy tych
informacji, a posiadamy działającą konfigurację na komputerze z systemem
Windows i oficjalnym klientem VPN Cisco, jedyne co musimy zrobić to
wyeksportować nasz profil. Opcje username oraz password są wartościami, których
używamy do logowania się do sieci, takich jak np. domena Windows NT.
</p>

<p>
Jeśli jesteśmy zmuszeni wyeksportować nasz profil z komputera z systemem
Windows, będziemy w posiadaniu pliku zakończonego rozszerzeniem
<path>.pcf</path>. W pliku tym znajdziemy wszystkie potrzebne nam informacje.
Poniżej znajduje się przykładowy plik tego typu:
</p>

<pre caption="Example profile.pcf file">
[main]
Description=
Host=VPNGATEWAY.DOMAIN.ORG
AuthType=1
GroupName=group_id
GroupPwd=
enc_GroupPwd=F3256220AA200A1D532556024F4F314B0388D48B0FBF2DB12
EnableISPConnect=0
ISPConnectType=0
ISPConnect=FOOBAR
ISPCommand=
Username=
SaveUserPassword=0
UserPassword=
enc_UserPassword=
NTDomain=
EnableBackup=0
BackupServer=
EnableMSLogon=1
MSLogonType=0
EnableNat=1
TunnelingMode=0
TcpTunnelingPort=10000
CertStore=0
CertName=
CertPath=
CertSubjectName=
CertSerialHash=00000000000000000000000000000000
SendCertChain=0
VerifyCertDN=
DHGroup=2
ForceKeepAlives=0
PeerTimeout=90
EnableLocalLAN=0
EnableSplitDNS=1
ForceNetLogin=0
</pre>

<p>
W powyższym przykładzie widać wpisy dla <c>Host</c>, <c>GroupName</c> oraz
<c>enc_GroupPwd</c>. Opcje <c>Username</c> i <c>UserPassword</c> w zależności
od ustawień mogą, ale nie muszą zostać wyeksportowane. Aby wygenerować
działającą konfigurację vpnc z pliku pcf powinniśmy użyć programu
<c>pcf2vpnc</c>, który dostarczany jest z vpnc.
</p>

<note>
Zaszyfrowane hasło możemy odczytać przy pomocy aplikacji <c>cisco-decrypt</c>,
który dostarczany jest z najnowszym vpnc.
</note>

</body>
</section>
<section>
<title>Testowanie konfiguracji</title>
<body>

<p>
Gdy wszystko skonfigurujemy już poprawnie, pora na przetestowanie naszych
ustawień. Aby uruchomić <c>vpnc</c> należy wykonać następujące czynności:
</p>

<pre caption="Przykładowe użycie vpnc">
# <i>vpnc</i>
Enter password for username@vpngateway.domain.org:
VPNC started in background (pid: 14788)...
</pre>

<p>
Jak widać w powyższym przykładzie po wpisaniu polecenia <c>vpnc</c> (jako root)
jesteśmy poproszeni o wpisanie naszego hasła. Po zatwierdzeniu hasła, co
odbędzie się bez żadnej odpowiedzi, proces <c>vpnc</c> zostanie przeniesiony
automatycznie w tło.
</p>

<note>
Jeśli wpisaliśmy hasło dla opcji <c>Xauth password</c> w naszej konfiguracji
<c>vpnc</c> nie będziemy musieli podawać hasła przy uruchomieniu <c>vpnc</c>.
Dodatkowo, jeśli <c>vpnc</c> potrzebuje jakiś dodatkowych opcji, których nie
zawarliśmy w pliku konfiguracyjnym, nie należy się martwić, zostaniemy o nie
poproszeni przy uruchamianiu <c>vpnc</c>.
</note>

<pre caption="Przykładowe zmiany w interfejsie dokonane przez vpnc">
# <i> ifconfig -a</i>
eth1      Link encap:Ethernet  HWaddr 00:11:2F:8D:08:08
          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::211:2fff:fe8d:808/64 Scope:Link
          UP BROADCAST NOTRAILERS RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:2101119 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1577559 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:1757862627 (1676.4 Mb)  TX bytes:732200131 (698.2 Mb)
          Interrupt:177 Memory:faa00000-0

sit0      Link encap:IPv6-in-IPv4
          NOARP  MTU:1480  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)

tun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00
          inet addr:192.168.160.42  P-t-P:192.168.160.42  Mask:255.255.255.255
          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1412  Metric:1
          RX packets:1 errors:0 dropped:0 overruns:0 frame:0
          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:500
          RX bytes:60 (60.0 b)  TX bytes:616 (616.0 b)

</pre>

<pre caption="Przykładowe modyfikacje wykonane przez vpnc w tablicy routingu">
# <i>netstat -r</i>
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
vpn01.domain.or router          255.255.255.255 UGH    1500 0          0 eth1
192.168.0.0     *               255.255.255.0   U         0 0          0 eth1
loopback        desktop         255.0.0.0       UG        0 0          0 lo
default         *               0.0.0.0         U         0 0          0 tun0
</pre>

<p>
Jak widzimy wyżej, <c>vpnc</c> dokonał następujących zmian:
</p>

<ul>
  <li>
    Stworzony został wirtualny interfejs sieciowy tun0, który przekazuje ruch
    przez tunel VPN
  </li>
  <li>Uzyskano adres IP dla urządzenia tun0 od dostawcy VPN</li>
  <li>Ustawiono domyślną bramę na VPN</li>
</ul>

<p>
W tym momencie, nasza stacja robocza powinna być zdolna do komunikacji poprzez
VPN jednak tylko przy użyciu adresu IP. Jak niektórzy zauważyli, <c>vpnc</c>
nie zmodyfikował pliku <path>/etc/resolv.conf</path>, dlatego też nie ustanowił
DNS-ów dla wirtualnego połączenia. Dodatkowo, ponieważ <c>vpnc</c> ustawia
domyślną bramę na bramę VPN, cały ruch będzie kierowany przez VPN, nawet w
przypadku gdy pochodzi on z Internetu lub z każdego innego miejsca nie
określonego przez dodatkowe tablice routingu. Dla części użytkowników tak
skonfigurowane podstawowe połączenie może wystarczyć, jednak większość
podejmnie dodatkowe kroki.
</p>

<p>
Dodatkowe rzeczy, które mogą okazać się przydatne:
</p>

<ul>
  <li>DNS dla VPN</li>
  <li>
    Ustawienie tablicy routingu, które kierować będą ruch VPN przez wirtualny
    tunel. W ten sposób możemy przeglądać Internet, będąc jednocześnie
    połączonymi z VPN, bez obaw o wyciek naszych danych do tunelu.
  </li>
  <li>
    Skrypt zarządzający wszystkimi funkcjami, ponieważ <c>vpnc</c> nie robi
    tego wystarczająco dobrze w domyślnej konfiguracji.
  </li>
</ul>

<p>
Gdy chcemy zakończyć sesję VPN, należy wydać polecenie <c>vpnc-disconnect</c>.
Przykład użycia pokazano poniżej.
</p>

<note>
Nie rozłączajmy się jeszcze, ponieważ jest kilka dodatkowych rzeczy do
przetestowania. Poniższy przykład podano jedynie w celach informacyjnych.
</note>

<pre caption="vpnc-disconnect">
# <i>vpnc-disconnect</i>
Terminating vpnc daemon (pid: 26250)
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja DNS</title>
<section>
<body>

<p>
Niestety, <c>vpnc</c> nie radzi sobie z konfiguracją i zarządzaniem DNS dla
nowo utworzonego tunelu. Sposób w jaki powinno się to odbywać wybiera
użytkownik. Możemy po prostu nadpisać plik <path>/etc/resolv.conf</path> kiedy
zostaniemy połączeni, jednak w ten sposób spowodujemy, że wszystkie dane, nie
ważne czy przeznaczone dla naszego tunelu VPN czy nie, będą używały DNS dla
VPN. Jest to bardzo funkcjonalne rozwiązanie i jeśli potrzebujemy się jedynie
łączyć z tunelem, aby wykonać konkretną pracę, a następnie rozłączamy się, nie
musimy czytać dalszej części tego rozdziału. Jednak, jeśli będziemy chcieli
pozostawiać połączenie z naszym tunelem aktywne na długie okresy czasu, a nie
życzymy sobie, aby robocze serwery DNS przechwytywały nasz lokalny ruch
powinniśmy kontynuować lekturę.
</p>

<p>
Idealna konfiguracja pozwoli nam rozdzielić zapytania DNS na dwie grupy:
związane z VPN oraz pozostały ruch. W takiej konfiguracji wszystkie zapytania
DNS dotyczące VPN będą odbierane przez serwery DNS zlokalizowane na drugim
końcu tunelu VPN. Wszystkie pozostałe zapytania będą przesyłane dalej do
lokalnego serwera DNS lub do serwera DNS dostarczanego przez ISP. Konfiguracja
taka zostanie zaprezentowana poniżej.
</p>

<note>
Założymy, że zapytania DNS związane z VPN należeć będą do domeny example.org,
jak na przykład host1.example.org czy server1.example.org.
</note>

<p>
W jaki więc sposób skonfigurować wszystko tak, aby tylko zapytania skierowane
do komputerów znajdujących się w domenie example.org kierowane były serwerów
DNS dostarczonych z tunelem VPN? Przede wszystkim należy zainstalować lokalny
serwer DNS. Nie należy jednak się przejmować tym, jest to zdecydowanie prostsze
niż wydaje się na pierwszy rzut oka. W drzewie znajduje sie kilka pakietów,
których możemy użyć. W poniższym przykładzie użyjemy programu <c>dnsmasq</c>.
Należy go teraz zainstalować:
</p>

<note>
Serwer ten nie będzie dostępny w sieci. Jedynym jego zadaniem będzie
odpowiadanie na zapytania z lokalnego hosta, <c>127.0.0.1</c>.
</note>

<pre caption="Instalacja dnsmasq">
# <i> emerge dnsmasq</i>
</pre>

<p>
Następnie musimy dodać opcję do komendy startowej <c>dnsmasq</c>. Należy
edytować poniższy przykład, aby dopasować go naszych potrzeb. Powinniśmy
zastąpić .example.org odpowiednią nazwą domeny. Adresem IP będzie adres
odpowiedniego serwera DNS, który należy do tunelu VPN.
</p>

<pre caption="/etc/conf.d/dnsmasq">
Config file for /etc/init.d/dnsmasq

# See the dnsmasq(8) man page for possible options to put here.
DNSMASQ_OPTS="-S /.example.org/192.168.125.10"
</pre>

<p>
Następnie należy się upewnić, że pierwszym wpisem w pliku
<path>/etc/resolv.conf</path> będzie wpis definiujący nasz lokalny komputer
<c>127.0.0.1</c>. Po tym wpisie powinna znajdować się lokalizacja zapasowego
serwer DNS, który powinien przejąć ruch w przypadku nieudanego uruchomienia
programu dnsmasq lub gdy będzie musiał on przekazać ruch w przypadku braku
odpowiednich danych we własnej pamięci podręcznej. Przykładowy plik
<path>/etc/resolv.conf</path> znajduje się poniżej.
</p>

<pre caption="/etc/resolv.conf">
nameserver 127.0.0.1
nameserver 192.168.0.1
</pre>

<p>
Po skonfigurowaniu reguł dla naszego tunelu VPN, powinniśmy uruchomić
<c>dnsmasq</c>.
</p>

<pre caption="Uruchamianie dnsmasq">
# <i>/etc/init.d/dnsmasq start</i>
# <i>rc-update add dnsmasq default</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja tabeli routingu</title>
<section>
<body>

<p>
Doskonałym przypadkiem będzie sytuacja, w której przez połączenie przesyłany
jest wyłącznie ruch związany z VPN, chyba że dodamy dodatkowe trasy. Aby móc
rozwiązać tę sytuację, musimy wiedzieć jakie sieci dostępne są dla naszego
VPN. Najprostszym sposobem na uzyskanie tych danych będzie zasięgnięcie
informacji u administratora sieci. Jednak czasami są oni niechętni do
odpowiadania na tego typu pytania. W przypadku gdy nie dostaniemy tych danych,
potrzeba będzie użyć metody prób i błędów.
</p>

<p>
Gdy uruchomiliśmy tunel VPN, <c>vpnc</c> ustawiło domyślną bramę. Musimy więc
przywrócić wartość domyślną, aby wszystko działało tak jak tego oczekujemy.
</p>

<pre caption="Ponowane ustawianie domyślne bramy">
# <i>route add default gw 192.168.0.1</i>
</pre>

<p>
Wcześniej, gdy konfigurowaliśmy usługę DNS dla tunelu VPN, wpisaliśmy serwer
DNS, który ma zajmować się domeną example.org. Musimy dodać trasę do podsieci
192.168.125.0 tak, aby zapytania DNS funkcjonowały poprawnie.
</p>

<pre caption="Dodawanie trasy dla dns">
# <i>route add -net 192.168.125.0 netmask 255.255.255.0 dev tun0</i>
</pre>

<p>
W tym momencie powinniśmy dodać wszystkie dodatkowe trasy dla znanych sieci
(takie jak podsieć 192.168.160.0, w którym zawiera się adres otrzymany przez
wirtualne urządzenie TUN/TAP). Jeśli dostaliśmy potrzebne nam informację od
administratora sieci, świetnie. W przeciwnym wypadku, będziemy musieli
spingować komputery do których będziemy się łączyć, aby mieć jakiekolwiek
pojęcie o wyglądzie naszej tablicy routingu.
</p>

<note>
Z powodu naszej konfiguracji, w czasie gdy będziemy używać usług sieciowych VPN
po nazwach, będziemy musieli wpisać pełne nazwy domen, na przykład:
webserver1.example.org.
</note>

<pre caption="Przykład użycia polecenia ping">
# <i>ping intranet1.example.org</i>
PING intranet1.example.org (172.25.230.29) 56(84) bytes of data.


--- intranet1.example.org ping statistics ---
18 packets transmitted, 0 received, 100% packet loss, time 16997ms
</pre>

<p>
Jak widać z powyższego przykładu, polecenie ping do adresu
<c>intranet1.example.org</c> nie powiodło się. Więc powinniśmy dodać trasę do
tej podsieci.
</p>

<pre caption="Kolejna przykładowa komenda dodawnia trasy">
# <i>route add -net 172.25.230.0 netmask 255.255.255.0 dev tun0</i>
</pre>

<p>
Kilka poleceń ping dalej, powinniśmy być na dobrej drodze do stworzenia
odpowiedniej tablicy routingu.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Zarządzanie połączeniem</title>
<section>
<title>Wywoływanie vpnc w razie potrzeby</title>
<body>

<p>
Kolejnym przykładem jest skrypt do zarządzania połączeniem VPN. Powinniśmy go
uruchamiać (jako root) przy pomocy xterm, aby wystartować połączenie z naszym
tunelem VPN. Wtedy jedyną czynnością potrzebną do rozłączenia się będzie
wciśnięcie enter. Oczywiście skrypt ten musimy dostosować do naszych potrzeb,
pamiętając o dodaniu dodatkowych tras do podsieci.
</p>

<pre caption="Przykładowy skrypt zarządzania sesją">
#!/bin/bash

source /sbin/functions.sh

ebegin "Connecting to the VPN"
vpnc
eend

ebegin "Modifying the routing table"
route add default gw 192.168.0.1
route add -net 172.25.230.0 netmask 255.255.255.0 dev tun0
route add -net 192.168.160.0 netmask 255.255.255.0 dev tun0
route add -net 192.168.125.0 netmask 255.255.255.0 dev tun0
eend

einfo "Press any key to disconnect ..."

read $disconnect

ebegin "Disconnecting from the VPN"
vpnc-disconnect
eend
ebegin "Reconfiguring the default routing table"
route add default gw 192.168.0.1
eend

einfo "VPN should now be disconnected"
</pre>

</body>
</section>
<section>
<title>Uruchamianie vpnc przy startowaniu systemu</title>
<body>

<p>
Z wersją 0.4.0-r1 programu vpnc dostarczany jest plik init dla
Gentoo(<path>/etc/init.d/vpnc</path>), który radzi sobie nawet z obsługą
wielu konfiguracji. Domyślny plik przygotowany jest dla pliku konfiguracyjnego
<path>/etc/vpnc/vpnc.conf</path>. Przed i po zatrzymaniu i uruchomieniu skrypty
napisane przez nas mogą być wykonane w połączeniu z odpowiadającymi im
skryptami inir (od wersji 0.5.1-r1). Nazwy takich plików kończą się na
<path>-preup.sh</path>, <path>-postup.sh</path>, <path>-predown.sh</path> i
<path>-postdown.sh</path>. Przechowujemy je w katalogu
<path>/etc/init.d/scripts.d/</path>. Ogólną zasadę nazewnictwa przedstawiono w
poniższej tabeli.
</p>

<table>
  <tr>
    <th>nazwa pliku ze skryptem init</th>
    <th>wymagany plik konfiguracyjny</th>
    <th>nazwa skryptu preup</th>
  </tr>
  <tr>
    <ti>/etc/init.d/vpnc</ti>
    <ti>/etc/vpnc/vpnc.conf</ti>
    <ti>/etc/vpnc/scripts.d/vpnc-preup.sh</ti>
  </tr>
  <tr>
    <ti>/etc/init.d/vpnc.work</ti>
    <ti>/etc/vpnc/work.conf</ti>
    <ti>/etc/vpnc/scripts.d/work-preup.sh</ti>
  </tr>
</table>

<p>
Dodajemy vpnc do domyślnego poziomu uruchomieniowego z odpowiednimi poleceniami
(w tym wypadku dla standardowej konfiguracji). Należy pamiętać o dodaniu modułu
tun (jeśli zbudowaliśmy go w ten sposób) do mechanizmu ładowania modułów jądra
przy uruchamianiu systemu.
</p>

<pre caption="Dodawanie vpnc do skryptów startowych">
# <i>rc-update add vpnc default</i>
</pre>

<p>
Jeśli nie chcemy zapisywać hasła w pliku konfiguracyjnym, możemy pozwolić
skryptowi init pokazywać wszelkie komendy i informacje na standardowym wyjściu,
poprzez edycję pliku <path>/etc/conf.d/vpnc</path>. Ustawiamy zmienną
<c>VPNCOUTPUT</c> na wartość yes lub no, gdzie wartością domyślną jest wartość
no.
</p>

<note>
Skrypty init nie zajmują się oddzielaniem DNS, ale można skorzystać z ich
poprawionych w tym celu wersji. Opis znajduje się <uri
link="#tipsscript">poniżej</uri>.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Dodatki</title>
<section>
<title>Zdalny graficzny dostęp</title>
<body>

<p>
Program <c>grdesktop</c> to wspierająca protokół RDP nakładka graficzna napisana
w języku Gtk, więc dobrze wpasowująca się w ogólny styl Gnome, jednak nie jest
od niego zależna. Jeżeli nie chcemy korzystać z nakładki graficznej grdesktop,
zainstalujmy jedynie <c>rdesktop</c>, na którego grdesktop jest nakładką.
</p>

<p>
W KDE dobrym wyborem będzie <c>kvpnc</c>. Jest to dopracowana i dojrzała
nakładka graficzna do zarządzania VPN.
</p>

<p>
W przypadku gdy zechcemy połączyć się z komputerem, na którym zainstalowano
system Windows, dla którego nie dodaliśmy wpisu DNS, a znamy adres dostępnego
serwera WINS, możemy użyć programu <c>nmblookup</c>. Polecenie to pomoże nam
odpytać serwer WINS o adres komputer, którego chcemy się połączyć. Niestety,
aby było ono dostępne należy zainstalować sambę. Jednak w przypadku gdy chcemy
pracować z komputerami z systemem Windows być może będziemy chcieli zainstalować
program samba, który zawiera kilka przydatnych narzędzi.
</p>

<pre caption="Instalacja samby">
# <i>emerge -av samba</i>
</pre>

<p>
Kiedy samba jest już zainstalowana, powinniśmy przetestować polecenie
<c>nmblookup</c> odwołując się do serwer WINS znajdującego się pod adresem
192.168.125.11 o komputer nazwany wintelbox1.
</p>

<pre caption="Przykład użycia nmblookup">
# <i>nmblookup -U 192.168.125.11 -R 'wintelbox1'</i>
querying wintelbox1 on 192.168.125.11
172.25.230.76 wintelbox1
</pre>

</body>
</section>
<section id="tipsscript">
<title>Inne skrypty startowe</title>
<body>

<p>
Dzięki własnym skryptom init.d można dokładnie dopasować typ routowania do
danego połączenia. Podane niżej przykłady pokazują jak skonfigurować tabelę
routingu tak, że tylko połączenia 123.234.x.x będą przekierowywane przez VPN a
wszystkie pozostałe będą korzystać z domyślnej bramy. W przykładzie wykorzystamy
skrypt work-preup.sh w celu zapisania domyślnej bramy przed startem vpnc. Po
uruchomieniu vpnc skrypt work-postup.sh kasuje nową domyślną stworzoną przez VPN
bramę i zastępuje ją tą zapisaną przez pierwszy skrypt oraz przekierowuje przez
nią wszystkie połączenia poza 123.234.x.x (które są przesyłane przez vpnc).
</p>

<pre caption="/etc/vpnc/scripts.d/work-preup.sh">
#!/bin/sh
route -n | grep -E '^0.0.0.0 ' | cut -c 17-32 >/var/tmp/defaultgw
</pre>

<pre caption="/etc/vpnc/scripts.d/work-postup.sh">
#!/bin/sh
route del -net 0.0.0.0 netmask 0.0.0.0 dev tun1
route add default gw $(cat /var/tmp/defaultgw)
route add -net 123.234.0.0 netmask 255.255.0.0 dev tun1
</pre>

<p>
W przykładach zakładamy, że połączenie vpnc korzysta z urządzenia tun1. Można to
ustawić w pliku konfiguracyjnym danego połączenia.
</p>

<pre caption="/etc/vpnc/work.conf">
Interface name tun1
IPSec gateway vpn.mywork.com
Pidfile /var/run/vpnc.work.pid
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Przydatne linki</title>
<section>
<body>

<ul>
  <li>
    <uri link="http://www.unix-ag.uni-kl.de/~massar/vpnc/">Strona domowa
    vpnc</uri>
  </li>
  <li>
    <uri link="http://home.gna.org/kvpnc/en/index.html">Strona domowa
    kvpnc</uri>
  </li>
  <li>
    <uri link="http://www.nongnu.org/grdesktop/">Strona domowa
    grdesktop</uri>
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Ostatnie uwagi</title>
<section>
<body>

<p>
W tym momencie powinniśmy być w stanie połączyć się z naszym tunelem VPN, a
praca z nim będzie bezproblemowa. Gdy znajdziemy błąd w powyższym dokumencie
lub gdy zechcemy dopisać dodatkowe informacje można wysłać raport na <uri
link="http://bugs.gentoo.org">bugs.gentoo.org</uri>.
</p>

</body>
</section>
</chapter>
</guide>
