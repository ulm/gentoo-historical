<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header -->
<guide link="/doc/pl/openmosix-howto.xml" lang="pl">

<title>Klastry openMosix w Gentoo</title>

<author title="Autor">
  <mail link="tantive@gentoo.org">Michael Imhof</mail>
</author>
<author title="Autor">
  <mail link="ma53@drexel.edu">Michael Andrews</mail>
</author>
<author title="Korekta">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Korekta">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Tłumacz">
  Aleksander Modzelewski
</author>

<abstract>
Ten podręcznik ma za zadanie pomóc w tworzeniu klastrów openMosix przy
użyciu Gentoo.
</abstract>

<license/>

<version>1.3</version>
<date>2003-11-20</date>

<chapter>
<title>Wstęp</title>
<section>
<title>O tym podręczniku</title>
<body>

<p>
Ten podręcznik opisuje proces budowy klastra openMosix. Jest on
oparty na dystrybucji Gentoo. Mamy nadzieję uczynić go tak przyjaznym
dla początkującego użytkownika jak tylko jest to możliwe. Podczas
gdy osoba doświadczona może z łatwością powiązać ze sobą rozliczne
podręczniki opisujące openMosix-a, węzły bezdyskowe oraz budowę sieci,
my mamy nadzieję przybliżyć ten proces osobom mniej doświadczonym.
</p>

<note>
Jeśli klaster ma zostać zbudowany z wykorzystaniem węzłów
bezdyskowych, należy przeczytać rozdział poświęcony kompilacji jądra z
obsługą openMosix-a, następnie
<uri link="/doc/pl/diskless-howto.xml">diskless HOWTO</uri>
i wrócić tu, aby kontynuować właściwą instalację klastra.
</note>

</body>
</section>
<section>
<title>Czym jest openMosix?</title>
<body>

<p>
OpenMosix jest łatką na jądro Linuksa która pozwala wielu komputerom
działać jako pojedynczy obraz systemu (SSI, ang. Single System Image).
Dzięki temu wiele komputerów <e>wygląda</e> jak jedna duża,
wieloprocesorowa maszyna. W czasie pisania tego dokumentu najnowszą
wersją łaty openMosix była 2.4.22, a narzędzi openMosix - 0.3.4.
Istnieje szeroki wybór informacji o openMosix-ie na stronie
<uri>http://openmosix.sourceforge.net</uri>. Trudno jest połączyć ze
sobą kilka różnych wersji załatanych wersji jądra, na dodatek
odkryliśmy, że większość łat nie jest kompatybilna wstecz. OpenMosix
przenosi duże procesy podczas wykonywania programów a.out lub ELF oraz
kiedy duży proces ulega rozgałęzieniu. Nie przenosi natomiast lekkich
procesów (takich jak wątki POSIX) oraz dużych procesów korzystających z
pamięci dzielonej.
</p>

<p>
Więcej informacji o openMosix-ie można uzyskać na jego
<uri link="http://openmosix.sourceforge.net">stronie domowej</uri>.
</p>

</body>
</section>
<section>
<title>O klastrze</title>
<body>

<p>
Docelowy klaster będzie składał się z oddzielnych maszyn (węzłów)
współdzielących zasoby obliczeniowe w celu zwiększenia mocy
obliczeniowej wszystkich węzłów. Węzły mogą być oparte na różnych
architekturach sprzętowych, ale jednorodność ułatwia proces budowy
klastra.
</p>

</body>
</section>
<section>
<title>Przygotowania</title>
<body>

<p>
Na komputerach przeznaczonych na klaster powinno być zainstalowany
Gentoo. Dodatkowo należy zaopatrzyć się w źródła kernela openMosix,
które zostały dogodnie załatane przez Gentoo.
</p>

<p>
Aby uzyskać źródła wystarczy użyć <c>emerge</c>:
</p>

<pre caption="Uzyskiwanie załatanych źródeł jądra">
# <i>emerge openMosix-sources</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja jądra</title>
<section>
<title>O jądrach systemu</title>
<body>

<p>
Jądro jest programem który pośredniczy pomiędzy sprzętem a resztą
oprogramowania jakie jest zainstalowane na komputerze - w zasadzie
jest sercem systemu operacyjnego. Kiedy komputer jest uruchamiany,
BIOS wykonuje polecenia znajdujące się w zarezerwowanej przestrzeni
startowej dysku twardego. Te instrukcje to z reguły bootloader, który
uruchamia jądro systemu. Po załadowaniu jądra wszystkie procesy są
przez nie obsługiwane.
</p>

<p>
Więcej informacji o jądrach i ich konfiguracji można uzyskać w
<uri link="http://www.tldp.org/HOWTO/Kernel-HOWTO.html">kernel HOWTO</uri>.
</p>

</body>
</section>
<section>
<title>Konfiguracja jądra</title>
<body>

<p>
Jądro może być niemal dowolnie rozbudowane, ale kilka opcji musi być
wybranych:
</p>

<impo>
Jest bardzo istotnym, aby utworzyć dowiązanie od
<path>/usr/src/linux</path> do openmosix-sources, tak, jak jest to
pokazane poniżej.
</impo>

<pre caption="Dowiązanie /usr/src/linux to openmosix">
# <i>cd /usr/src</i>
# <i>rm linux</i>
# <i>ln -s linux-2.4.22-openmosix linux</i>
</pre>

<p>
Następnie należy przejść do konfiguracji jądra
</p>

<pre caption="Modyfikowanie konfiguracji jądra">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Powinien ukazać się szaro-niebieski interfejs użytkownika oferujący
bezpieczną alternatywę dla ręcznego modyfikowania pliku
<path>/usr/src/linux/.config</path>. Jeśli jądro funkcjonuje
prawidłowo warto zachować jego aktualny plik konfiguracyjny:
</p>

<pre caption="Tworzenie kopii zapasowej konfiguracji jądra">
# <i>cp .config .config_working</i>
</pre>

<p>
Najwyżej położoną pozycją menu powinno być <c>openMosix ---&gt;</c>.
Jeśli tak nie jest, musimy emergować źródła jądra z łatką openMosix
(opis w części <uri link="#doc_chap1_sect4">Przygotowania</uri>). Następnie
przechodzimy do następujących pod-menu i upewnij się, że następujące opcje są
zaznaczone jako włączone do jądra statycznie (a <e>NIE</e> jako moduły):
</p>

<pre caption="Opcje Menuconfig">
openMosix ---&gt;
    [*] openMosix process migration support
    [ ] Support clusters with a complex network topology
    [*] Stricter security on openMosix ports
    (1) Level of process-identity disclosure (0-3)
    [*] openMosix File-System
    [ ] Poll/Select exceptions on pipes
    [ ] Disable OOM Killer
    [ ] Load Limit

Code maturity level options  ---&gt;
    [*] Prompt for development and/or incomplete code/drivers

Networking options ---&gt;
    &lt;*&gt; Packet socket
    [ ]   Packet socket: mmapped IO
    &lt; &gt; Netlink device emulation
    [ ] Network packet filtering (replaces ipchains)
    [ ] Socket Filtering
    &lt;*&gt; Unix domain sockets
    [*] TCP/IP networking
    [*]   IP: multicasting

File systems ---&gt;
    [*] /proc file system support
    [*] /dev file system support (EXPERIMENTAL)
    [*]   Automatically mount at boot
</pre>

<note>
Powyższe ustawienia jądra należy <e>dodać</e> do własnych opcji konfiguracyjnych,
na pewno nie jest to pełna lista wymaganych dla sprzętu sterowników.
</note>

<p>
Po przekonfigurowaniu jądra należy je ponownie skompilować:
</p>

<pre caption="Kompilowanie jądra i modułów">
# <i>make dep</i>
# <i>make clean bzImage modules modules_install</i>
<comment>(/boot musi być zamontowane przed kopiowaniem do niego
czegokolwiek)</comment>
# <i>cp arch/i386/boot/bzImage /boot/bzImage-openmosix</i>
</pre>

<p>
Następnie należy dodać wpis opisujący nowe jądro do
<path>lilo.conf</path> lub <path>grub.conf</path> (zależnie od tego,
który bootloader jest używany w systemie) i uczynić nowe jądro
domyślnym. Teraz, gdy nowy <path>bzImage</path> został umieszczony w
katalogu <path>/boot</path> wystarczy ponownie uruchomić system.
</p>

</body>
</section>
<section>
<title>Brakujące opcje</title>
<body>

<p>
Jeżeli w jądrze niedostępne są jakieś opcje, należy się upewnić, że zaznaczono:
</p>

<ul>
<li>Code maturity level options ---&gt;
<ul>
<li>Prompt for development and/or incomplete code/drivers</li>
</ul>
</li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja węzłów openMosix</title>
<section>
<title>Instalacja narzędzi openMosix</title>
<body>

<p>
Aby umożliwić klastrowi przeniesienie procesu należy doinstalować
kilka narzędzi pracujących w przestrzeni użytkownika. Dodatkowo serwer
openMosix musi być uruchomiony, tak aby węzeł dołączył do klastra i w pełni
wykorzystywał możliwości openMosix-a. Do zainstalowania potrzebnych programów
wykorzystamy polecenie <c>emerge</c>:
</p>

<pre caption="Instalacja narzędzi przestrzeni użytkownika openMosix">
# <i>emerge openmosix-user</i>
</pre>

</body>
</section>
<section>
<title>Konfiguracja węzłów openMosix</title>
<body>

<p>
Edycja lub tworzenie <path>/etc/openmosix.map</path> nie jest już
konieczna. Nowe wersje narzędzi wykorzystują autodiscovery daemon
który automatycznie wykrywa wszystkie węzły w sieci.
</p>

<p>
Na każdym węźle należy założyć katalog <path>/mfs</path> oraz zamontować
go, jeśli ma być wykorzystany system plików openMosix (wysoce zalecane)
który pozwala na dostęp do wszystkich węzłów.
</p>

<pre caption="mkdir /mfs">
# <i>mkdir /mfs</i>
</pre>

<pre caption="Przykładowy wpis w /etc/fstab">
none                    /mfs            mfs             noauto,dfsa=1          0 0
</pre>


<note>
Nie wszystkie węzły muszą funkcjonować, aby openMosix działał prawidłowo.
</note>

</body>
</section>
<section>
<title>Uruchamianie openMosix-a</title>
<body>

<p>
Uruchamianie openMosix-a jest naprawdę łatwe. Poniższe polecenie
uruchomi obsługę openMosix w jądrze i wystartuje autodiscovery daemon,
który utrzymuje listę wszystkich dostępnych węzłów.
</p>

<pre caption="Uruchamianie openMosix-a">
# <i>/etc/init.d/openmosix start</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Narzędzia przestrzeni użytkownika</title>
<section>
<title>Narzędzia linii poleceń</title>
<body>

<p>
openMosix-user instaluje kilka przydatnych narzędzi. Kilka z nich to:
</p>

<ul>
<li>
<c>mosmon</c> - monitor openMosix-a. Pozwala na zobaczenie stanu wszystkich
węzłów, włączając w to stopień wykorzystania procesora, zainstalowaną
pamięć, wykorzystaną pamięć i temu podobne.
</li>
<li>
<c>mtop</c> - Rozszerzona wersja programu top która pokazuje na którym węźle
działa dany proces.
</li>
<li><c>mps</c> - Rozszerzona wersja programu ps. Także pokazuje numer
węzła.</li>
<li>
<c>mosctl whois</c> - To narzędzie jest bardzo przydatne, ponieważ mosmon i
inne narzędzia podają jedynie numer węzła. Przy użyciu <c>mosctl whois
numer-węzła</c> można odnaleźć numer ip albo nazwę danego węzła.
</li>
</ul>

<p>
Test obciążeniowy openMosix-a może wykazać czy wszystko w klastrze działa
tak, jak powinno oraz jak zachowuje się on pod obciążeniem. Pakiet ten
nazywa się <c>openmosixtest</c>
</p>

<pre caption="Emergowanie openmosixtest">
# <i>emerge openmosixtest</i>
</pre>

<p>
Ebuild powinien poinformować jak uruchomić test.
</p>

</body>
</section>
<section>
<title>Narzędzia graficzne</title>
<body>

<p>
Aby uzyskać graficzny przegląd klastra oraz zobaczyć jak procesy są
przenoszone można użyć <c>openmosixview</c>.
</p>

<pre caption="Emerguj openmosixview">
# <i>emerge openmosixview</i>
</pre>

<p>
Aby uruchomić tę wspaniałą aplikację starcza napisać <c>openmosixview</c>:
</p>

<pre caption="Uruchamianie openmosixview">
# <i>openmosixview</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Zasoby</title>
<section>
<title>openMosix</title>
<body>

<ul>
<li><uri>http://openmosix.sf.net</uri></li>
</ul>

</body>
</section>
<section>
<title>Dodatki do openMosix-a (dostępne są ebuildy)</title>
<body>

<ul>
<li><uri link="http://www.openmosixview.com">openMosixview</uri></li>
<li>
<uri link="http://www.openmosixview.com/omtest">test obciążeniowy openMosix</uri>
</li>
<li>
<uri link="http://www.nongnu.org/gomd/">uniwersalny demon openMosixa</uri>
</li>
</ul>

</body>
</section>
</chapter>
</guide>
