<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/articles/l-awk1.xml,v 1.5 2005/09/10 22:55:35 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/articles/l-awk1.xml" lang="pl">

<title>Awk w przykładach, część pierwsza</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Tłumaczenie">
  <mail link="aleander@gmail.com">Aleksander Kamil Modzelewski</mail>
</author>

<abstract>
Awk jest bardzo udanym językiem o bardzo dziwnej nazwie. W tym artykule Daniel
Robbins pomaga szybko rozwinąć umiejętności programowania w Awk. W dalszych
ciągu trzyczęściowej serii rozwinięte zostaną tematy bardziej zaawansowane, aż w
końcu podany zostanie przykład realistycznego zastosowania Awk.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.0</version>
<date>2005-07-15</date>

<chapter>
<title>Wprowadzenie do wspaniałego języka o dziwnej nazwie</title>
<section>
<title>W obronie awk</title>
<body>

<note>
Oryginalna wersja tego dokumentu została wydana przez IBM developerWorks i jest
własnością Wesstech Information Services. To wydanie jest jego aktualizacją i
zawiera rozliczne poprawki dokonane przez zespół dokumentacji Gentoo Linux.
</note>

<p>
W tej serii artykułów czytelnik nauczy się wydajnie programować w Awk. Język ten
nie ma szczególnie ładnej lub "modnej" nazwy, a nazwa jego wersji GNU, gawk,
brzmi wprost dziwacznie. Osoby niezaznajomione z Awk mogą z tego powodu kojarzyć
go z chaosem kodu dość przestarzałego, aby nawet najbardziej doświadczonego guru
Uniksa doprowadzić na skraj szaleństwa (zmuszając go do ciągłego wykrzykiwania
"kill -9!" w biegu do ekspresu do kawy).
</p>

<p>
Jasne, Awk nie ma zbyt dobrej nazwy.  Ale to wspaniały język. Jego nazwa oznacza
"Aho, Weinberger, Kernighan" - trzech spośród najsławniejszych informatyków.
Został wyspecjalizowany do przetwarzania tekstu i przygotowania raportów, jednak
zawiera wiele dobrze zaprojektowanych cech które umożliwiają poważne
programowanie. Dodatkowo, w przeciwieństwie do niektórych innych języków,
składnia Awk jest znajoma, zapożycza najlepsze cechy języków takich jak C,
python i bash (aczkolwiek w zasadzie Awk powstało zarówno przed Pythonem jak i
bashem). Awk jest jednym z tych języków, które po opanowaniu stają się kluczowym
elementem każdego arsenału programistycznego.
</p>

</body>
</section>
<section>
<title>Pierwszy awk</title>
<body>

<pre caption="Pierwszy awk">
$ <i>awk '{ print }' /etc/passwd</i>
</pre>

<p>
Powinna się teraz ukazać zawartość pliku <path>/etc/passwd</path>.  Teraz
wyjaśnię, co uczynił Awk. Kiedy wywołaliśmy Awk, podaliśmy
<path>/etc/passwd</path> jako jego wejście. Polecenie wykonało rozkaz print dla
każdego wiersza <path>/etc/passwd</path> po kolei, a całe wyjście zostało
przekazane na standardowe wyjście - co doprowadziło do wyniku identycznego z
wykonaniem cat dla <path>/etc/passwd</path>.
</p>

<p>
Teraz z kolei nastąpi opis bloku { print }. W Awk, nawiasy klamrowe są
wykorzystywane do wiązania ze sobą bloków kodu - podobnie jak w C. Wewnątrz
takiego bloku mamy pojedyncze polecenie print. Występując samodzielnie powoduje
ono wypisanie całego aktualnego wiersza.
</p>

<pre caption="Wypisywanie aktualnego wiersza; Wypisywanie pustych linii">
$ <i>awk '{ print $0 }' /etc/passwd</i>
$ <i>awk '{ print "" }' /etc/passwd</i>
</pre>

<p>
W Awk zmienna $0 reprezentuje cały aktualny wiesz, więc print oraz print $0
robią dokładnie to samo.
</p>

<pre caption="Wypełnianie ekranu odrobiną tekstu">
$ <i>awk '{ print "hiya" }' /etc/passwd</i>
</pre>

</body>
</section>
<section>
<title>Przykłady demonstrujące selekcyjne wypisywanie pól</title>
<body>

<pre caption="Wypisanie pierwszego i trzeciego pola dla separatora ':'">
$ <i>awk -F":" '{ print $1 $3 }' /etc/passwd</i>
halt7
operator11
root0
shutdown6
sync5
bin1
<comment>....itd.</comment>
</pre>

<pre caption="Wypisanie pierwszego i trzeciego pola oddzielonych znakiem spacji">
$ <i>awk -F":" '{ print $1 " " $3 }' /etc/passwd</i>
</pre>

<pre caption="Wypisanie formatowanych wierszy">
$ <i>awk -F":" '{ print "username: " $1 "\t\tuid:" $3 }' /etc/passwd</i>
username: halt          uid:7
username: operator      uid:11
username: root          uid:0
username: shutdown      uid:6
username: sync          uid:5
username: bin           uid:1
<comment>....itd.</comment>
</pre>

</body>
</section>
<section>
<title>Skrypty zewnętrzne</title>
<body>

<pre caption="Przykładowy skrypt">
BEGIN { FS=":" }
{ print $1 }
</pre>

<pre caption="Wykonywanie przykładowego skryptu">
$ <i>awk -f script.awk /etc/passwd</i>
</pre>

<p>
Różnicą pomiędzy tym i poprzednim rozwiązaniem jest to, jak oznaczyliśmy
separator pól. W tym skrypcie separator został wybrany w samym kodzie (przez
ustawienie zmiennej FS), podczas gdy w poprzednim przypadku FS zostało ustawione
za pomocą opcji wiersza poleceń -F":". W ogólnym przypadku najlepiej jest
wybierać separator wewnątrz skryptu, głównie dlatego, że dzięki temu nie trzeba
pamiętać o argumencie dla polecenia. Zmienna FS zostanie dokładniej opisana
dalej w tym artykule.
</p>

</body>
</section>
<section>
<title>Bloki BEGIN oraz END</title>
<body>

<p>
Zwykle awk wykonuje każdy blok danego skryptu raz dla każdego wiersza na
wejściu. Podczas programowania występuje jednak wiele sytuacji, kiedy potrzebna
jest inicjalizacja zanim Awk zacznie przetwarzać tekst. Ze względu na takie
przypadki Awk pozwala na zdefiniowanie bloku BEGIN. Użyliśmy go w poprzednim
przykładzie. Ponieważ blok ten jest wykonywany zanim Awk zacznie przetwarzać
plik wejściowy to jest on świetnym miejscem na inicjalizację zmiennej FS (field
separator - separator pól), wypisanie nagłówka lub zdefiniowanie innych
zmiennych globalnych które wykorzystane będą w dalszej części programu.
</p>

<p>
Awk pozwala również na istnienie innego specjalnego bloku, nazywanego END. Awk
wykonuje go po przetworzeniu wszystkich wierszy wejścia. W typowym przypadku
blok END jest wykorzystywany do wykonania końcowych obliczeń lub wypisania
podsumowania, które powinno pokazać się na końcu wyjścia.
</p>

</body>
</section>
<section>
<title>Wyrażenia regularne</title>
<body>

<pre caption="Wypisane zostaną tylko wiersze zgodne z wyrażeniem regularnym">
/foo/ { print }
/[0-9]+\.[0-9]*/ { print }
</pre>

</body>
</section>
<section>
<title>Operatory</title>
<body>

<pre caption="Jeżeli pierwsze pole jest równe...">
$1 == "fred" { print $3 }
</pre>

<pre caption="Jeżeli piąte pole spełnia wyrażenie regularne, wypisz trzecie">
$5 ~ /root/ { print $3 }
</pre>

</body>
</section>
<section>
<title>Instrukcje warunkowe</title>
<body>

<pre caption="Powyższy przykład z zastosowaniem instrukcji warunkowej if">
{ 
    if ( $5 ~ /root/ ) { 
        print $3 
    }
}
</pre>

<p>
Obydwa skrypty działają tak samo. W pierwszym przykładzie wyrażenie warunkowe
zostało umieszczone na zewnątrz bloku, natomiast w drugim blok jest wykonywany
dla każdego wiersza ale dzięki instrukcji if wykonuje polecenie print tylko w
niektórych przypadkach. Obydwa sposoby są dostępne i można wybrać ten, który
najlepiej pasuje do innych części skryptu.
</p>

<pre caption="Zagnieżdżanie instrukcji if">
{
    if ( $1 == "foo" ) {
        if ( $2 == "foo" ) {
            print "uno"
        } else {
            print "one"
        }
    } else if ($1 == "bar" ) {
        print "two"
    } else {
        print "three"
    }
}
</pre>

<pre caption="Wypisz, jeżeli wyrażenie regularne nie pasuje do wiersza">
! /matchme/ { print $1 $3 $4 }
</pre>

<pre caption="Powyższy przykład z wykorzystaniem instrukcji warunkowej if">
{
    if ( $0 !~ /matchme/ ) {
        print $1 $3 $4
    }
}
</pre>

<p>
Obydwa skrypty wypiszą tylko te wiersze, które nie zawierają sekwencji matchme.
Ponownie, obydwa sposoby dają taki sam efekt i można wybrać dowolny.
</p>

<pre caption="Wypisanie wierszy zawierających pola pasujące do foo oraz bar">
( $1 == "foo" ) &amp;&amp; ( $2 == "bar" ) { print } 
</pre>

<p>
Ten przykład wypisze tylko te wiersze, w których pole pierwsze jest równe foo, a
pole drugie jest równe bar.
</p>

</body>
</section>
<section>
<title>Zmienne liczbowe!</title>
<body>

<pre caption="Zmienne liczbowe!">
BEGIN { x = 0 }
/^$/ { x = x + 1 }
END { print x }
</pre>

<p>
W bloku BEGIN inicjalizujemy zmienną x jako zero. Następnie, za każdym razem,
gdy Awk napotka pusty wiersz, wykona instrukcję x=x+1, zwiększając x. Po
przetworzeniu wszystkich wierszy zostanie wykonany blok END, wypisując liczbę
napotkanych pustych wierszy.
</p>

</body>
</section>
<section>
<title>Zmienne łańcuchowe</title>
<body>

<pre caption="Przykładowe pole">
2,01
</pre>

<pre caption="Przykład wyrażenia arytmetycznego">
{ print ($1^2)+1 }
</pre>

<p>
Po kilku eksperymentach można odkryć, że jeżeli dana zmienna nie zawiera
prawidłowej liczby, to podczas wyliczania wyrażeń matematycznych Awk będzie ją
traktował jako zero. Dla podanego przykładu otrzymamy wynik (2,01^2)+1 = 5,0401.
</p>

</body>
</section>
<section>
<title>Mnóstwo operatorów</title>
<body>

<p>
Kolejną zaletą Awk jest to, że zawiera pełen zestaw operatorów matematycznych.
Poza standardowym dodawaniem, odejmowaniem, mnożeniem i dzieleniem, Awk pozwala
na wykorzystanie zademonstrowanej już potęgi "^", operatora modulo (reszty) "%"
oraz kilku przydatnych operatorów przypisania zapożyczonych z C.
</p>

<p>
Dostępne mamy także operatory dekrementacji i inkrementacji (w wersjach zarówno
pre jak i post): i++, --foo, oraz operatory przypisania z operacją na przykład
dodawania czy mnożenia ( a+=3, b*=2, c/=2.2, d-=6.2, a^=2, b%=4 ).
</p>

</body>
</section>
<section>
<title>Separatory pól</title>
<body>

<p>
Awk ma również własny zestaw zmiennych specjalnych. Część z nich pozwala na
dopasowania sposobu, w jaki działa Awk, natomiast inne pozwalają uzyskać cenne
informacje o wejściu. Jedną z tych zmiennych, FS, już wykorzystaliśmy. Jak już
było powiedziane, pozwala ona określić jakiej sekwencji znaków Awk powinien
oczekiwać pomiędzy polami. Kiedy wejściem było <path>/etc/passwd</path> FS było
ustawione na ":". Wprawdzie to załatwiło sprawę, ale FS pozwala na nawet większą
elastyczność.
</p>

<pre caption="Inny separator pól">
FS="\t+"
</pre>

<p>
Powyżej wykorzystaliśmy znak specjalny dla wyrażeń regularnych, "+", który
oznacza "jeden lub więcej poprzednich znaków".
</p>

<pre caption="Ustawianie FS na spację">
FS="[[:space:]+]"
</pre>

<p>
To wprawdzie załatwia sprawę, ale jest niepotrzebne. Dlaczego? Bo domyślnie FS
jest ustawione na pojedynczą spację, co Awk interpretuje jako "jedna lub więcej
spacji". W tym konkretnym przypadku domyślne ustawienie FS jest dokładnie tym,
co było potrzebne.
</p>

<pre caption="Przykładowy separator pól">
FS="foo[0-9][0-9][0-9]"
</pre>

</body>
</section>
<section>
<title>Wskaźnik liczby pól</title>
<body>

<pre caption="Jeżeli liczba pól większa od dwóch...">
{
    if ( NF > 2 ) {
        print $1 " " $2 ":" $3 
    }
}
</pre>

</body>
</section>
<section>
<title>Wskaźnik numeru wiersza</title>
<body>

<pre caption="Dla wierszy począwszy od 11...">
{
    if ( NR > 10 ) {
        print "ok, now for the real information!"
    }
}
</pre>

<p>
Awk dostarcza dodatkowych zmiennych, które mogą zostać wykorzystane do wielu
celów. Więcej z nich zostanie opisane w dalszych artykułach.
</p>

<p>
To już koniec wstępnego omówienia Awk. W dalszym ciągu serii poznamy bardziej
zaawansowane cechy Awk, natomiast na koniec zbudujemy praktyczną aplikację Awk.
W międzyczasie można skorzystać z wypisanych poniżej zasobów.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Zasoby</title>
<section>
<title>Przydatne linki</title>
<body>

<ul>
  <li>
    Inne artykuły o Awk autorstwa Daniela na developerWorks: Common threads: Awk
    by example, <uri link="/doc/en/articles/l-awk2.xml">Cześć druga</uri>
    oraz <uri link="/doc/en/articles/l-awk3.xml">Część trzecia</uri>.
  </li>
  <li>
    Książka O'Reilly <uri link="http://www.oreilly.com/catalog/sed2/">sed &amp;
    awk, 2nd Edition</uri> jest doskonałym wyborem dla tych, którzy wolą papier.
  </li>
  <li>
    Konieczne należy odwiedzić <uri
    link="http://www.faqs.org/faqs/computer-lang/awk/faq/">FAQ grupy
    comp.lang.awk</uri>. Zawiera ono również mnóstwo dodatkowych linków
    związanych z Awk.
  </li>
  <li>
    <uri link="http://sparky.rice.edu/~hartigan/awk.html">Samouczek AWK</uri>
    Patricka Hartigana zawiera wiele przydatnych skryptów</li>
<!-- FIXME 404 - i looked around google for it, no success
  <li>
    <uri link="http://www.teleport.com/~thompson">Thompson's TAWK Compiler</uri>
    compiles awk scripts into fast binary executables. Versions are available
    for Windows, OS/2, DOS, and UNIX.
  </li>-->
  <li>
    <uri link="http://www.gnu.org/software/gawk/manual/gawk.html">Podręcznik
    użytkownika GNU Awk</uri> zawiera mnóstwo użytecznych informacji.
  </li>
</ul>

</body>
</section>
</chapter>

</guide>
