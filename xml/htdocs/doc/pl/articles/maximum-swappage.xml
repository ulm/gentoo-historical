<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/articles/maximum-swappage.xml,v 1.1 2005/09/28 13:12:55 rane Exp $ -->

<guide link="/doc/pl/articles/maximum-swappage.xml" lang="pl">
<title>Maksymalna wydajność swapa</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Redaktor">
  <mail link="jackdark@gmail.com">Joshua Saddler</mail>
</author>
<author title="Tłumaczenie">
  <mail link="edi15ta@gazeta.pl">Mateusz Kotyrba</mail>
</author>

<abstract>
Nauczymy się jak zwiększyć wydajność partycji wymiany na Linuksowym serwerze o
kilka rzędów wielkości. Autor Daniel Robbins w tej krótkiej wskazówce wyciśnie
z naszego serwera ostatnie poty.
</abstract>

<!-- The original version of this article was first published on IBM
developerWorks, and is property of Westtech Information Services. This
document is an updated version of the original article, and contains
various improvements made by the Gentoo Linux Documentation team -->

<version>1.1</version>
<date>2005-08-18</date>

<chapter>
<title>Uzyskiwanie prędkości z partycji wymiany (swapa)</title>
<section>
<body>

<note>
Oryginalna wersja tego artykułu była najpierw opublikowana na IBM
developerWorks i jest własnością Westtech Information Services. Ten dokument
jest zaktualizowaną wersją oryginalnego artykułu i zawiera różne ulepszenia
wykonane przez zespół dokumentacji Gentoo.
</note>

<p>
Czy kiedy konfigurujemy nowy serwer oparty na Linuksie i tworzymy pojedynczą
partycję wymiany o rozmiarze 128 MB to zdajemy sobie sprawę, że w ten sposób
znacznie zmniejszamy jego wydajność? Chcielibyśmy zwiększyć wydajność partycji
wymiany o kilka rzędów wielkości i stworzyć partycje swap większe niż 1GB? Jest
to możliwe, bez łatania jądra lub specjalnego sprzętu, jest to czysta wiedza
geeka!
</p>

<p>
Niektórzy nie troszczą się o swap. Jak wiadomo systemy Linux są zwykle bardzo
wydajne w wykorzystywaniu pamięci i swap rzadko kiedy jest tknięty. Jest to
często prawdą na systemach biurkowych, jednak serwery to zupełnie inna
historia. Ponieważ mogą one być poddawane nieoczekiwanym naprężeniom, takim
jak niekontrolowany proces, atak DoS lub nawet efekt Slashdot, muszą posiadać
odpowiednio szybki swap, żeby nie zatrzymywały się kiedy cała pamięć fizyczna
zostanie wyczerpana.
</p>

<p>
Nadal nie jesteście przekonani, że to dobry interes? Pokażę jak łatwo zawiesić
serwer poprzez załączenie ogromnej ilości nowych procesów.
</p>

<warn>
Prób należy dokonywać na maszynach innych niż produkcyjne.
</warn>

<p>
Powiedzmy, że mamy dwa zindywidualizowane polecenia <c>grep</c> w
<path>/usr/bin</path>, nazwane <c>bobgrep</c> i <c>jimgrep</c>. Teraz załóżmy,
że <c>bobgrep</c> jest po prostu skryptem powłoki, który wywołuje plik
wykonywalny ELF <c>jimgrep</c>, następująco:
</p>

<pre caption="Skrypt bobgrep">
#!/bin/bash
jimgrep -r $*
</pre>

<p>
Jak na razie wszystko wygląda dobrze, ale co się stanie jeśli <c>jimgrep</c>
przez przypadek zostanie zastąpione przez dowiązanie symboliczne do
<c>bobgrep</c>? W tym przypadku, wywołanie <c>bobgrep</c> lub <c>jimgrep</c>
spowoduje nieskończoną pętlę, wywołującą setki procesów basha w ułamki sekund.
Zdarzyło mi się to raz i uwierzcie, bolało!
</p>

<p>
Jeśli serwer nie posiada odpowiedniego swapa, powyższa sytuacja może zawiesić
maszynę w czasie znacznie krótszym niż minuta. Jak rozwiązać taki problem?
Jednym rozwiązaniem jest zwiększenie rozmiaru swapa powyżej 128 MB. Na
szczęście dla nas, 128MB nie jest granicą wielkości swapa pod jądrami 2.2.x+ i
nowszymi, jak to miało miejsce w przeszłości. Obecne limity wynoszą około
2 GB na systemach x86, PowerPC i MC680x0, 512 MB na systemach MIPS, 128 GB na
Alpha i przytłaczające 3 terabajty na platformach UltraSparc!
</p>

<pre caption="Ograniczenia wielkości partycji swap pod ostatnimi jądrami Linuksa">
x86                 2 Gigabytes
PowerPC             2 Gigabytes
Motorola 680x0      2 Gigabytes
Sparc               1 Gigabyte
MIPS                512 Megabytes
Alpha               128 Gigabytes
UltraSparc          3 Terabytes
</pre>

<p>
Dobrze, ale co z tego, że możemy zwiększyć wielkość partycji swap. Co ze
zwiększeniem wydajności? W idealnej sytuacji możemy utworzyć macierz RAID 0 z
partycji swap, żeby odczyt i zapis były równo rozłożone na wszystkie partycje.
Jeśli te partycje znajdują się na osobnych urządzeniach i/lub kontrolerach, to
znacznie zwiększy wydajność pliku swap, pozwalając serwerom na radzenie sobie
z tymczasowymi, gwałtownymi skokami użycia pamięci bez znacznego spowolnienia
działania systemu.
</p>

<p>
Zaskakujące jest to, że obecnie wszystkie jądra Linuksa, domyślnie (bez
specjalnych opcji lub łatek) pozwalają na urównoleglenie swapa, tak jak
macierz RAID 0. Używając opcji <c>pri</c> w <path>/etc/fstab</path>, ustawiamy
kilka partycji swap na ten sam priorytet, w ten sposób mówimy Linuksowi, aby
używał ich równolegle:
</p>

<pre caption="Ustawianie kilku partycji swap na ten sam priorytet">
/dev/sda2       none    swap    sw,pri=3        0       0
/dev/sdb2       none    swap    sw,pri=3        0       0
/dev/sdc2       none    swap    sw,pri=3        0       0
/dev/sdd2       none    swap    sw,pri=1        0       0
</pre>

<p>
W powyższym przykładzie Linux będzie używał partycji swap sda2, sdb2 i sdc2
równolegle. Ponieważ te partycje znajdują się na różnych dyskach możliwe, że
nawet na innych kontrolerach SCSI, odczyt i zapis niemal się potroi. Czwarta
partycja swap, sdd2, będzie używana tylko wtedy gdy wszystkie trzy partycje
zostaną zapełnione.
</p>

<p>
Opcja <c>pri</c> jest łatwa w użyciu. Priorytet musi być liczbą z przedziału
pomiędzy 0 a 32767, z 32767 będącym najwyższym priorytetem. Partycje swap będą
używane od tej z najwyższym priorytetem do tej z najniższym, innymi słowy
partycja z priorytetem x zostanie użyta tylko jeśli wszystkie partycje z
priorytetem większym niż x są już pełne. Jeśli kilka partycji ma ten sam
priorytet, wtedy Linux automatycznie urównolegli dostęp pomiędzy nimi. To
pozwala na urównoleglenie nie tylko swapu, ale także na wyznaczenie
priorytetów dostępu tak, aby partycje na szybszych dyskach (lub obszarach
dysków) były używane najpierw. Więc można ustawić awaryjną partycję swap na
starym, wolniejszym dysku, która zostanie użyta tylko wtedy, gdy cały szybki
swap zostanie wykorzystany.
</p>

<p>
Teraz nadszedł czas, aby naszą wiedzę o swapie wprowadzić w życie. Parafrazując
pana Miyagi znanego z Karate Kid: "Swap on, swap off, geek-san!"
</p>

</body>
</section>
<section>
<title>Zasoby</title>
<body>

<ul>
  <li>
    W <uri link="/doc/pl/articles/partitioning-p1.xml">Dzielenie dysku na
    partycje, przenosiny /home</uri>, pokazuję krok po kroku jak przenieść
    katalog <path>/home</path> na nową partycję.
  </li>
  <li>
    W <uri link="/doc/pl/articles/partitioning-p2.xml">Dzielenie dysku na
    partycje, przenosiny /var i /tmp</uri>, pokażę jak krok po kroku przenieść
    <path>/var</path> i <path>/tmp</path> na nową partycję.
  </li>
  <li>
    W mojej drugiej wskazówce, <uri
    link="/doc/pl/articles/partition-planning-tips.xml">Wskazówki dotyczące
    podziału dysku na partycje</uri>, dzielę się kilkoma możliwościami
    wydajnego rozmieszczenia partycji na dysku.
  </li>
  <li>
    <uri link="http://www.redhat.com/mirrors/LDP/LDP/sag/index.html">Przewodnik
    administratora systemu Linux</uri> na stronie domowej Red Hata.
  </li>
  <li>
    Dobry <uri link="http://www.gwdg.de/gs-2.0/chapter2_6.html">przegląd
    administracji systemem Linux</uri>.
  </li>
  <li>
    Aby uzyskać więcej informacji na temat optymalizacji wydajności systemu
    plików, należy spojrzeć na stronę Linasa Vepstasa <uri
    link="http://www.tldp.org">Linux Software RAID HOWTO</uri>. Ponieważ
    większość kodu oprogramowania RAID zostało dołączone do jąder serii 2.3,
    więc jest to realna alternatywa dla późniejszego zwiększania wydajności w
    Linuksie.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
