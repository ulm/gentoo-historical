<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/articles/bash-by-example-p3.xml,v 1.1 2005/09/20 19:28:38 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/articles/bash-by-example-p3.xml" lang="pl">
<title>Bash w przykładach - część trzecia</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Tłumacz">
  <mail link="stawrul@boo.pl">Waldemar Korłub</mail>
</author>

<abstract>
W trzecim z serii artykułów o bashu Daniel Robbins opisuje system ebuildów
Linuksa Gentoo, który stanowi świetny przykład możliwości powłoki bash. Krok po
kroku opisuje on jak system ebuildów został zaimplementowany i pokazuje wiele
przydatnych technik i strategii projektowych. Po przeczytaniu tego artykułu
czytelnik będzie miał przejrzysty pogląd na to, co składa się na tworzenie
dobrej aplikacji w bashu i będzie mógł zacząć kodowanie własnego systemu na
kształt systemu ebuildów w Gentoo.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.2</version>
<date>2005-08-03</date>

<chapter>
<title>Poznawanie systemu ebuildów</title>
<section>
<title>Wkraczanie do systemu ebuildów</title>
<body>

<note>
Oryginalna wersja tego artykułu została opublikowana w IBM developerWorks i jest
własnością Westtech Information Services. Poniższy dokument jest zaktualizowaną
wersją oryginalnego artykułu i zawiera rozmaite dodatki wprowadzone przez
członków projektu Gentoo Linux Documentation.
</note>

<p>
Po zapoznaniu się z podstawami programowania w bashu poprzez <uri
link="/doc/pl/articles/bash-by-example-p1.xml">pierwszą</uri> i <uri
link="/doc/pl/articles/bash-by-example-p2.xml">drugą</uri> część cyklu <e>Bash w
przykładach</e>, możemy zagłębić się w bardziej zaawansowane zagadnienia, jak
strategie projektowy, czy programowanie prawdziwych aplikacji. W tym artykule
otrzymamy słuszną dawkę praktycznych doświadczeń projektowych. Będą one
przedstawione w oparciu o opis projektu, nad którym autor tego artykułu spędził
wiele godzin, kodując go i ulepszająć. Projektem tym jest system ebuildów
Linuksa Gentoo.
</p>

<p>
Autor artykułu jest głównym architektem Linuksa Gentoo - systemu operacyjnego
nowej generacji. Jednym z jego głównych zadań jest zapewnienie, aby wszystkie
binarne pakiety (podobne do pamietów RPM) były poprawnie tworzone i mogły
właściwie ze sobą współpracować. Jak prawdopodobnie wiemy, standardowe systemy
Linuksowe nie składają się z pojedynczego jednolitego drzewa źródłowego (jak
BSD), lecz budowane są z ponad 25 pakietów, które pracując razem tworzą rdzeń
systemu. Oto niektóre z tych pakietów:
</p>

<table>
  <tr>
    <th>Pakiet</th>
    <th>Opis</th>
  </tr>
  <tr>
    <ti>linux</ti>
    <ti>Jądro systemu</ti>
  </tr>
  <tr>
    <ti>util-linux</ti>
    <ti>Kolekcja różnorodnych programów poziązanych z Linuksem</ti>
  </tr>
  <tr>
    <ti>e2fsprogs</ti>
    <ti>Kolekcja programów powiązanych z systemem plików ext2</ti>
  </tr>
  <tr>
    <ti>glibc</ti>
    <ti>Biblioteka GNU C</ti>
  </tr>
</table>

<p>
Każdy pakiet znajduje się w oddzielnym tarballu i jest utrzymywany przez
niezależnych deweloperów lub ich grupy. Zbudowanie systemu polega na pobraniu
wszystkich pakietów, ich kompilacji i połączeniu w systemie. Za każdym razem gdy
pakiet musi zostać naprawiony, zaktualizowany lub ulepszony, konieczne jest
powtórzenie kompilacji i łączenia (a zdarza się to naprawdę często). Aby
wyeliminować konieczność powtarzania tych samych kroków w celu budowania i
tworzenia systemu, powstał system ebuildów. Został on napisany niemal
całkowicie w bashu. Aby zwiększyć naszą wiedzę o bashu, przyjrzymy się jak krok
po kroku zostały zaimplementowane funkcje odpowiedzialne za rozpakowywanie
archiwów i kompilowanie źródeł. Wyjaśniając każdy etap, omówimy dlaczego podjęte
zostały pewne decyzje projektowe. Po przeczytaniu tego artykułu nie tylko
poznamy techniki programowania na dużą skalę, ale również zaimplementujemy spory
fragment kompletnego systemu automatycznej kompilacji.
</p>

</body>
</section>
<section>
<title>Dlaczego bash?</title>
<body>

<p>
Bash stanowi podstawę systemu ebuildów Linuksa Gentoo. Został on wybrany ze
względu na wiele jego przydatnych cech. Po pierwsze, posiada on nieskomplikowaną
i intuicyjną składnię, która szczególnie dobrze nadaje się do wywoływania
zewnętrznych programów. System automatycznej kompilacji w głównej mierze
wywołuje inne aplikacje, więc bash nadaje się doskonale do jego implementacji.
Po drugie, obsługa funkcji pozwoliła na stworzenie modularnego i łatwego w
czytaniu kodu. Po trzecie, system ebuildów wykorzystuje obsługę zmiennych
środowiskowych w bashu, co pozwala konserwatorom i deweloperom na łatwe
konfigurowanie pakietów "w locie".
</p>

</body>
</section>
<section>
<title>Przegląd procesu instalacji programu</title>
<body>

<p>
Zanim zagłębimy się w system ebuildów, zastanówmy się jakie działania składają
się na kompilację i instalację pakietów. Jako przykład wykorzystamy pakiet
programu sed - standardowego narzędzia strumieniowej edycji tekstu, będącego
częścią wszystkich dystrybucji Linuksa. Pierwszym krokiem jest pobranie tarballa
ze źródłami (<path>sed-3.02.tar.gz</path>, link w dziale <uri
link="#resources">Źródła informacji</uri>). Umieścimy to archiwum w katalogu
<path>/usr/src/distfiles</path>, który jest wskazywany przez zmienną
środowiskową <c>$DISTDIR</c>. W tym katalogu przechowywane są wszystkie nasze
tarballe ze źródłami; jest to swoisty magazyn źródeł.
</p>

<p>
Kolejny etap to stworzenie tymczasowego katalogu o nazwie <path>work</path>, w
którym umieścimy rozpakowane źródła. Będziemy odwoływać się do tego katalogu
przy użyciu zmiennej środowiskowej <c>$WORKDIR</c>. Aby tego dokonać przejdźmy
do katalogu, w którym mamy prawo do zapisu i wykonajmy polecenia:
</p>

<pre caption="Rozpakowanie źródeł programy sed do tymczasowego katalogu">
$ <i>mkdir work</i>
$ <i>cd work</i>
$ <i>tar xzf /usr/src/distfiles/sed-3.02.tar.gz</i>
</pre>

<p>
Źródła z tarballa zostaną rozpakowane do katalogu <path>sed-3.02</path>.
Będziemy się do niego odwoływać poprzez zmienną środowiskową <c>$SRCDIR</c>. Aby
skompilować program wykonajmy komendy:
</p>

<pre caption="Kompilacja programu sed">
$ <i>cd sed-3.02</i>
$ <i>./configure --prefix=/usr</i>
<comment>(autoconf generuje właściwy plik make; może to zająć trochę czasu)</comment>
$ <i>make</i>
<comment>(kompilacja źródeł - również może zająć trochę czasu)</comment>
</pre>

<p>
Nie uwzględniamy tutaj komendy <c>make install</c>, ponieważ artykuł ten dotyczy
wyłącznie rozpakowywania i kompilacji. Gdybyśmy napisali skrypt basha, który
wykonałby wszystkie dotychczasowe kroki, wyglądałby on mniej więcej tak:
</p>

<pre caption="Przykładowy skrypt wykonujący rozpakowywanie i kompilację programu">
#!/usr/bin/env bash

if [ -d work ]
then
<comment># usunięcie starego katalogu work, jeśli taki istnieje</comment>
      rm -rf work
fi
mkdir work
cd work
tar xzf /usr/src/distfiles/sed-3.02.tar.gz
cd sed-3.02
./configure --prefix=/usr
make
</pre>

</body>
</section>
<section>
<title>Generalizacja kodu</title>
<body>

<p>
Chociaż powyższy skrypt działa poprawnie, nie jest on zbyt przydatny ze względu
na małą elastyczność. Zasadniczo zawiera on jedynie listę komend jakie
wpisywaliśmy w linii poleceń. Rozwiązanie jest poprawne, jednak lepiej byłoby
stworzyć bardziej ogólny skrypt, który można łatwo skonfigurować do
rozpakowania i kompilacji dowolnego pakietu poprzez zmianę kilku jego linijek.
W ten sposób konserwator pakietu może znacznie szybciej i prościej dodać nową
wersję do dystrybucji. Pierwszym krokiem ku temu jest wykorzystanie kilku
zmiennych środowiskowych do przedstawienia danych zależnych od programu, co
sprawi że skrypt będzie bardziej zgeneralizowany:
</p>

<pre caption="Bardziej zgeneralizowana wersja skryptu">
#!/usr/bin/env bash

<comment># P jest nazwą pakietu</comment>

P=sed-3.02

<comment># A to nazwa archiwum</comment>

A=${P}.tar.gz

export ORIGDIR=`pwd`
export WORKDIR=${ORIGDIR}/work
export SRCDIR=${WORKDIR}/${P}

if [ -z "$DISTDIR" ]
then
<comment># ustawiamy DISTDIR jako /usr/src/distfiles jeśli nie zostało to
zrobione wcześniej</comment>
        DISTDIR=/usr/src/distfiles
fi
export DISTDIR

if [ -d ${WORKDIR} ]
then    
<comment># usuwamy stary katalog work jeśli istnieje</comment>
        rm -rf ${WORKDIR}
fi

mkdir ${WORKDIR}
cd ${WORKDIR}
tar xzf ${DISTDIR}/${A}
cd ${SRCDIR}
./configure --prefix=/usr
make
</pre>

<p>
Dodaliśmy sporo zmiennych środowiskowych do skryptu, jednak generalnie wciąż
wykonuje on te same zadania. Natomiast teraz, aby skompilować jakiś program 
oparty o autoconf wystarczy skopiować powyższy skrypt do nowego pliku (o
właściwej nazwie, która będzie nawiązywała do pakietu jakie instalujemy) i
zmienić wartości zmiennych <c>$A</c> i <c>$P</c>. Wszystkie inne zmienne
środowiskowe automatycznie dopasują się do nowych wartości i skrypt zadziała
zgodnie z oczekiwaniami. Jest to bardzo poręczne, jednak można jeszcze bardziej
ulepszyć nasz skrypt. Obecnie kod jest znacznie dłuższy od jego początkowej
wersji. Jednym z głównym celów każdego projektu programistycznego powinna być
redukcja nadmiernej złożoności kodu. Dobrze byłoby więc odchudzić skrypt lub
przynajmniej lepiej do zorganizować. Możemy tego dokonać poprzez pewien zgrabny
wybieg - rozdzielimy kod na dwa pliki. Poniższy fragment zapiszmy jako
<path>sed-3.02.ebuild</path>:
</p>

<pre caption="sed-3.02.ebuild">
<comment># plik ebuild programu sed - niezwykle prosty!</comment>
P=sed-3.02
A=${P}.tar.gz
</pre>

<p>
Pierwszy plik jest trywialny i zawiera tylko dwie zmienne, jakie muszą być
modyfikowane dla różnych pakietów. Poniżej znajduje się drugi plik, zawierający
zasadniczą część operacji. Zapiszmy go pod nazwą <path>ebuild</path> i nadajmy
mu prawa do wykonywania:
</p>

<pre caption="Skrypt ebuild">
#!/usr/bin/env bash


if [ $# -ne 1 ]
then
        echo "Oczekiwano jednego argumentu."
        exit 1
fi

if [ -e "$1" ]
then
        source $1
else
        echo "Plik ebuild $1 nie został odnaleziony."
        exit 1
fi

export ORIGDIR=`pwd`
export WORKDIR=${ORIGDIR}/work
export SRCDIR=${WORKDIR}/${P}

if [ -z "$DISTDIR" ]
then
        <comment># ustawiamy DISTDIR jako /usr/src/distfiles jeśli nie zostało to wcześniej zrobione</comment>a
        DISTDIR=/usr/src/distfiles
fi
export DISTDIR

if [ -d ${WORKDIR} ]
then    
        # usuwamy stary katalog work jeśli istnieje 
        rm -rf ${WORKDIR}
fi

mkdir ${WORKDIR}
cd ${WORKDIR}
tar xzf ${DISTDIR}/${A}
cd ${SRCDIR}
./configure --prefix=/usr
make
</pre>

<p>
W ten sposób podzieliliśmy nasz skrypt na dwie części. Jak on teraz działa? Aby
skompilować program sed należy wykonać komendę:
</p>

<pre caption="Testowanie powyższego skryptu">
$ <i>./ebuild sed-3.02.ebuild</i>
</pre>

<p>
Gdy wykonujemy skrypt, próbuje ona wykonać polecenie <c>source</c> z parametrem
<c>$1</c>. Co to oznacza? Zgodnie z wcześniejszymi artykułami o bashu, zmienna
<c>$1</c> odwołuje się do pierwszego argumentu wywołania skryptu - w tym
przypadku do łańcucha <path>sed-3.02.ebuild</path>. Komenda <c>source</c> czyta
zawartość tego pliku i wykonuje ją tak, jakby pojawiła się w miejscu wywołania
<c>source</c>, więc <c>source ${1}</c> spowoduje wykonanie zawartości pliku
<path>sed-3.02.ebuild</path>, czyli zainicjowanie zmiennych <c>$P</c> i
<c>$A</c>. Jest to bardzo przydatne, gdyż jeśli będziemy chcieli
skompilować inny program zamiast sed, wystarczy, że stworzymy nowy plik
<path>.ebuild</path> i przekażemy jego nazwę jako argument do skryptu ebuild.
Dzięki temu pliki <path>.ebuild</path> są bardzo proste, a wszystkie operacje
wykonywane są w innym miejscu - w skrypcie ebuild. W ten sposób możemy
aktualizować i rozbudowywać system ebuildów poprzez edytowanie skryptu ebuild,
utrzymując cały czas szczegóły implementacji poza plikiem <path>.ebuild</path>.
Oto przykładowy plik <path>.ebuild</path> dla programu <c>gzip</c>:
</p>

<pre caption="gzip-1.2.4a.ebuild">
<comment>#kolejny niezwykle prosty skrypt ebuild!</comment>
P=gzip-1.2.4a
A=${P}.tar.gz
</pre>

</body>
</section>
<section>
<title>Zwiększanie funkcjonalności</title>
<body>

<p>
Zrobiliśmy już spory postęp, jednak jest kilka dodatkowych funkcjonalności,
które warto byłoby dodać. Jedną z takich funkcjonalności jest obsługa drugiego
parametru wywołania, który może przyjmować wartość <c>compile</c>, <c>unpack</c>
lub <c>all</c>. Będzie on decydował, które etapy procesu mają zostać
przeprowadzone. Dzięki temu będziemu mogli nakazać skryptowi aby rozpakował
archiwum, ale nie kompilował źródeł (gdybyś chcieli przejrzeć kod przed jego
kompilacją). Dodamy tą funkcję wykorzystując konstrukcję case, która sprawdzi
wartość zmiennej <c>$2</c> i wykonana różne czynności w zależności od jej
wartości. Obecnie kod ma postać:
</p>

<pre caption="ebuild, wersja druga">
#!/usr/bin/env bash

if [ $# -ne 2 ]
then
        echo "Proszę podać dwa argumenty - nazwę pliku .ebuild oraz unpack, compile lub all"
        exit 1
fi


if [ -z "$DISTDIR" ]
then
<comment> # ustawiamy DISTDIR jako /usr/src/distfiles</comment>
        DISTDIR=/usr/src/distfiles
fi
export DISTDIR

ebuild_unpack() {
        <comment> #upewnijmy się, że jesteśmy we właściwym katalogu</comment>
        cd ${ORIGDIR}
        
        if [ -d ${WORKDIR} ]
        then    
                rm -rf ${WORKDIR}
        fi

        mkdir ${WORKDIR}
        cd ${WORKDIR}
        if [ ! -e ${DISTDIR}/${A} ]
        then
            echo "${DISTDIR}/${A} nie istnieje. Najpierw pobierz ten plik."
            exit 1
        fi    
        tar xzf ${DISTDIR}/${A}
        echo "Rozpakowany ${DISTDIR}/${A}."
        #źródła zostały rozpakowane
}


ebuild_compile() {
        
        <comment> #upewniamy się, że jesteśmy we właściwym katalogu</comment>
        cd ${SRCDIR}
        if [ ! -d "${SRCDIR}" ]
        then
                echo "${SRCDIR} nie istnieje - najpierw rozpakuj źródła."
                exit 1
        fi
        ./configure --prefix=/usr
        make     
}

export ORIGDIR=`pwd`
export WORKDIR=${ORIGDIR}/work

if [ -e "$1" ]
then
        source $1
else
        echo "Plik ebuild $1 nie istnieje."
        exit 1
fi

export SRCDIR=${WORKDIR}/${P}

case "${2}" in
        unpack)
                ebuild_unpack
                ;;
        compile)
                ebuild_compile
                ;;
        all)
                ebuild_unpack
                ebuild_compile
                ;;
        *)
                echo "Użyj unpack, compile lub all jako drugiego argumentu."
                exit 1
                ;;
esac
</pre>

<p>
Wprowadziliśmy wiele zmien - przyjrzymy się im dokładnie. Po pierwsze, etapy
rozpakowywania i kompilacji znajdują się teraz w oddzielnych funkcjach o nazwach
<c>ebuild_compile()</c> i<c>ebuild_unpack()</c>. Jest to dobry krok, ponieważ kod
robi się coraz bardziej skomplikowany, a funkcje dają modularność pomocną w
organizacji programu. W pierwszej linii każdej funkcji wykonujemy komendę
<c>cd</c> z parametrem w postaci katalogu, w którym chcemy operować. Warto jest
zastosować ten element, ponieważ im bardziej kod jest modularny i
zgeneralizowany, tym łatwiej jest pomylić się w czasie jego wywoływania i zrobić
to z innego miejsca niż powinniśmy. Komenda <c>cd</c> przenosi nas dokładnie
tam, gdzie powinniśmy być i chroni tym samym przed kolejnymi błędami. Jest to
bardzo ważne, szczególnie jeśli w przyszłości dodamy do funkcji komendy
usuwające pliki.
</p>

<p>
Na początku funkcji <c>ebuild_compile()</c> dodaliśmy również warunek
sprawdzający, czy istnieje katalog <c>$SRCDIR</c>, a jeśli nie istnieje
drukujący komunikat o błędzie i kończący wykonanie skryptu. Jeśli chcemy możemy
zmienić to zachowanie na przykład tak, aby skrypt automatycznie wypakowywał
źródła, jeśli nie zostało to zrobione wcześniej. Zrobimy to zastępując aktualną
wersję funkcji <c>ebuild_compile()</c> poniższym kodem:
</p>

<pre caption="Alternatywna wersja funkcji ebuild_compile()">
ebuild_compile() {
        <comment>#upewniamy się, że jesteśmy we właściwym katalogu</comment>
        if [ ! -d "${SRCDIR}" ]
        then
                ebuild_unpack
        fi
        cd ${SRCDIR}
        ./configure --prefix=/usr
        make     
}
</pre>

<p>
Główną zmianą dla przebiegu skryptu jest pojawianie się konstrukcji case na
końcu kodu. Sprawdza ona wartość drugiego argumentu wywołania i wykonuje dalsze
operacje odpowiednio do jego wartości. Spróbujmy wykonać komendę:
</p>

<pre caption="Wywołanie skryptu bez drugiego argumentu">
$ <i>ebuild sed-3.02.ebuild</i>
</pre>

<p>
Powinniśmy otrzymać komunikat o błędzie. Skrypt ebuild wymaga teraz drugiego
argumentu, wskazującego jakie akcje ma podjąć:
</p>

<pre caption="Rozpakowywanie">
$ <i>ebuild sed-3.02.ebuild unpack</i>
</pre>

<p>
lub:
</p>

<pre caption="Kompilacja">
$ <i>ebuild sed-3.02.ebuild compile</i>
</pre>

<p>
lub:
</p>

<pre caption="Rozpakowywanie i kompilacja">
$ <i>ebuild sed-3.02.ebuild all</i>
</pre>

<impo>
Podanie dla drugiego argumentu innej wartości niż w przykładach powyżej
spowoduje wypisanie komunikatu o błędzie i zakończenie skryptu. Odpowiada za to
wzorzec <c>*</c> w konstrukcji case.
</impo>

</body>
</section>
<section>
<title>Dzielenie kodu na moduły</title>
<body>

<p>
Teraz, gdy kod jest już całkiem zaawansowany i cechuje się pewną
funkcjonalnością, możemy stworzyć więcej plików <path>.ebuild</path> do
instalacji innych programów. Jednak jeśli tak zrobimy, wcześniej czy później
natrafimy na aplikacje, które nie korzystają z autoconf (<c>./configure</c>),
lub na inne, cechujące się niestandardowym procesem instalacji. Konieczne jest
wprowadzenie dodatkowych zmian do systemu ebuildów aby zapewnić obsługę również
dla tych aplikacji. Jednak zanim zaczniemy kodować, zastanówmy się jak
zrealizować ten cel.
</p>

<p>
Zaletą umieszczenia w skrypcie kodu <c>./configure --prefix=/usr; make</c> jest
to, że zazwyczaj daje on oczekiwany efekt. Musimy jednak przystosować nasz
system do obsługi źródeł, które nie korzystają z autoconf, lecz ze zwykłych
plików make. Aby rozwiązać ten problem, ustalmy, że skrypt ebuild domyślnie
będzie postępował w następujący sposób:
</p>

<ol>
  <li>
    Jeśli w katalogu <c>${SRCDIR}</c> istnieje skrypt configure, wykonujemu go:
   <c>./configure --prefix=/usr</c>. Jeśli nie - pomijamy ten krok.
  </li>
  <li>Wykonujemy komendę make</li>
</ol>

<p>
Skrypt ebuild wykona polecenie <c>./configure</c> tylko jeśli istnieje
odpowiedni skrypt. Dzięki temu automatycznie dostosowujemy się do programów,
które nie korzystają z autoconf i posiadają pliki make. Co jednak zrobić, jeśli
sama komenda <c>make</c> nie wystarczy do zainstalowania aplikacji?
Musimy zastąpić wtedy nasz domyślny kod pewnymi specyficznymi poleceniami, które
pozwolą na instalację tych programów. W tym celu rozbijemy funkcję
<c>ebuild_compile()</c> na dwie inne. Pierwsza z nich, którą można nazwać
"rodzicem", wciąż będzie nazywać się <c>ebuild_compile()</c>. Drugą natomiast
nazwiemy <c>user_compile()</c> i umieścimy w niej domyślne zachowanie naszego
skryptu:
</p>

<pre caption="Funkcja ebuild_compile() rozbita na dwie części">
user_compile() {
        <comment>#jesteśmy już w katalogu ${SRCDIR}</comment>
        if [ -e configure ]
        then
                #uruchamiany sktypt configure, jeśli istnieje
                ./configure --prefix=/usr
        fi
        #uruchamiamy make
        make
}              

ebuild_compile() {
        if [ ! -d "${SRCDIR}" ]
        then
                echo "${SRCDIR} nie istnieje - najpierw rozpakuj źródła."
                exit 1
        fi
        <comment>#upewniamy się, że jesteśmy we właściwym katalogu</comment>
        cd ${SRCDIR}
        user_compile
}
</pre>

<p>
Możliwe, że nie jest w tym momencie do końca jasne dlaczego dokonaliśmy takiego
podziału, ale zaraz wszystko zostanie opisane. Podczas gdy powyższy kod działa
niemal identycznie jak w poprzedniej wersji, teraz możemy zrobić coś, czego nie
byliśmy w stanie zrobić wcześniej - możemy nadpisać funkcję <c>user_compile</c>,
tworząc jej nową wersję w pliku <path>sed-3.02.ebuild</path>. Więc jeśli
domyślne działania nie odpowiadają potrzebom danego programu, możemy zdefiniować
nową w pliku <path>.ebuild</path>, która będzie zawierać komendy potrzebne do
instalacji danej aplikacji. Poniżej znajduje się przykładowy plik ebuild dla
programu <c>e2fsprogs-1.18</c>, który wymaga nieco innego wywołania skryptu
<c>./configure</c>:
</p>

<pre caption="e2fsprogs-1.18.ebuild">
<comment>#ten plik nadpisze funkcję user_compile() w skrypcie ebuild</comment>
P=e2fsprogs-1.18
A=${P}.tar.gz
 
user_compile() {
       ./configure --enable-elf-shlibs
       make
}
</pre>

<p>
Teraz <c>e2fsprogs</c> zostanie skompilowany dokładnie tak jak powinien.
Dla większości pakietów pominiemy umieszczanie funkcji
<c>user_compile()</c> w pliku <path>.ebuild</path> i wykorzystana zosatnie
standardowa funkcja w skrypcie ebuild.
</p>

<p>
Skąd dokładnie skrypt ebuild wie którą wersję funkcji <c>user_compile()</c> ma
wykorzystać? Jest to całkiem proste. W skrypcie ebuild domyślna funkcja
<c>user_compile</c> jest zdefiniowana przez dołączeniem pliku
<path>e2fsprogs-1.18.ebuild</path>. Jeśli w pliku
<path>e2fsprogs-1.18.ebuild</path> znajduje się inna wersja funkcji
<c>user_compile</c>, to nadpisuje ona wcześniej zdefiniowaną. Jeśli nie -
domyślna funkcja jest jedyną jaka może zostać wykorzystana.
</p>

<p>
Podnieśliśmy znacznie elstyczność skryptu bez konieczności wprowadzania żadnego
skomplikowanego kodu. Choć nie zostanie to tutaj opisane, możliwe jest
wprowadzenie podobnych modyfikacji w funkcji <c>ebuild_unpack()</c>, co
pozwoliłoby na zmianę standardowego sposobu rozpakowywania źródeł. Będzie to
przydatne jeśli źródła jakiegoś programu znajdują się w kilku archwiach, a także
w wielu innych sytuacjach. Dobrym pomysłem jest również taka modyfikacja kodu
rozpakowującego, aby automatycznie rozpoznawał archiwa bzip2.
</p>

</body>
</section>
<section>
<title>Pliki konfiguracyjne</title>
<body>

<p>
Poznaliśmy już wiele przemyślnych technik programowania w bashu, a teraz
zapoznamy się z jeszcze jedną. Często przydatne jest aby program posiadał globalny
plik konfiguracyjny, rezydujący w katalogu <path>/etc</path>. Na szczęście łatwo
jest zrobić to korzystając z basha. Po prostu stwórzmy następujący plik i
zapiszmy go jako <path>/etc/ebuild.conf</path>:
</p>

<pre caption="/ect/ebuild.conf">
<comment># /etc/ebuild.conf: ogólnosystemowe ustawienia konfiguracyjne</comment>

<comment># MAKEOPTS zawiera opcje przekazywane jako parametry do make</comment>
MAKEOPTS="-j2"
</pre>

<p>
W powyższym przykładzie ujęliśmy tylko jedną opcję konfiguracyjną, ale możemya
dodać ich znacznie więcej. Wspaniają cechą basha jest to, że plik konfiguracyjny
może zostać wykorzystany poprzez zwykłe dołączenie go komendą <c>source</c> do
skryptu. Jest to wybieg, który działa w większości interpretowanych języków. Gdy
dołączymy plik <path>/etc/ebuild.conf</path> zmienna <c>$MAKEOPTS</c> zostanie
zdefiniowana wewnątrz skryptu ebuild. Będziemy ją wykorzystywać, aby pozwolić
użytkownikom na przekazywanie parametrów dla make. Zazwyczaj powyższa
przykładowa opcja jest przekazywana aby zezwolić na wykonywanie równoległych
wywołań make. Zostało to wyjaśnione poniżej.
</p>

<note>
<b>Czym są równoległe wywołania make?</b> Aby przyspieszyć kompilację na
wieloprocesorowych komputerach, make dopuszcza równoległe kompilacje programu.
Oznacza to, że zamiast kompilować jeden plik źródłowy na raz, make kompiluje
ilość plików określoną przez użytkownika (dzięki czemu wykorzystywany jest
potencjał wieloprocesorowych maszyn). Kompilacje równoległe są możliwe poprzez
przekazanie opcji <c>-j #</c> do make, na przykład: <c>make -j4 MAKE="make
-j4"</c>. Ten kod umożliwi kompilację czterech plików źródłowych równocześnie.
Argument <c>MAKE="make -j4"</c> nakazuje przekazywanie argumentu <c>-j4</c> do
wszystkich podrzędnych wywołań make.
</note>

<p>
Oto ostateczna wersja skryptu ebuild:
</p>

<pre caption="Skrypt ebuild - wersja ostateczna">
#!/usr/bin/env bash

if [ $# -ne 2 ]
then
        echo "Podaj nazwę pliku .ebuild oraz unpack, compile lub all"
        exit 1
fi

source /etc/ebuild.conf

if [ -z "$DISTDIR" ]
then
        <comment># ustawiamy DISTDIR jako /usr/src/distfiles jeśli nie zostało to zrobione wcześniej</comment>
        DISTDIR=/usr/src/distfiles
fi
export DISTDIR

ebuild_unpack() {
        <comment>#upewniamy się, że jesteśmy we właściwym katalogu</comment>
        cd ${ORIGDIR}
        
        if [ -d ${WORKDIR} ]
        then    
                rm -rf ${WORKDIR}
        fi

        mkdir ${WORKDIR}
        cd ${WORKDIR}
        if [ ! -e ${DISTDIR}/${A} ]
        then
                echo "${DISTDIR}/${A} nie istnieje. Najpierw pobierz źródła."
                exit 1
        fi
        tar xzf ${DISTDIR}/${A}
        echo "Wypakowano ${DISTDIR}/${A}."
        <comment>#źródła zostały wypakowane</comment>
}

user_compile() {
        <comment>#jesteśmy już w ${SRCDIR}</comment>
        if [ -e configure ]
        then
                <comment>#uruchamiamy skrypt configure, jeśli istnieje</comment>
                ./configure --prefix=/usr
        fi
        <comment>#uruchamiamy make</comment>
        make $MAKEOPTS MAKE="make $MAKEOPTS"  
} 

ebuild_compile() {
        if [ ! -d "${SRCDIR}" ]
        then
                echo "${SRCDIR} nie istnieje - najpierw rozpakuj źródła."
                exit 1
        fi
        <comment>#upewniamy się, że jesteśmy we właściwym katalogu</comment>
        cd ${SRCDIR}
        user_compile
}

export ORIGDIR=`pwd`
export WORKDIR=${ORIGDIR}/work

if [ -e "$1" ]
then
        source $1
else
        echo "Plik ebuild $1 nie istnieje."
        exit 1
fi

export SRCDIR=${WORKDIR}/${P}

case "${2}" in
        unpack)
                ebuild_unpack
                ;;
        compile)
                ebuild_compile
                ;;
        all)
                ebuild_unpack
                ebuild_compile
                ;;
        *)
                echo "Podaj unpack, compile lub all jako drugi argument."
                exit 1
                ;;
esac
</pre>

<p>
Zwróćmy uwagę na fakt, że plik <path>/etc/ebuild.conf</path> jest dołączany na
początku skryptu. Zważmy również, iż używamy zmiennej <c>$MAKEOPTS</c> w
naszej domyślnej funkcji <c>user_compile()</c>. Być może nie jest do końca jasne
w jaki sposób to działa - w gruncie rzeczy odwołujemy się do <c>$MAKEOPTS</c>
przed dołączeniem pliku <path>/etc/ebuild.conf</path>, w którym zmienna ta jest
definiowana. Szczęśliwie dla nas, działa to poprawnie, ponieważ ekspansja
zmiennych zostaje przeprowadzona tylko kiedy wywołujemy funkcję
<c>user_compile()</c>. Gdy dokonujmy wywołania tej funkcji plik
<path>/etc/ebuild.conf</path> jest już dołączony i zmienna <c>$MAKEOPTS</c>
posiada prawidłowe wartości.
</p>

</body>
</section>
<section>
<title>Potrafimy coraz więcej</title>
<body>

<p>
Poznaliśmy w tym artykule wiele technik programowania w bashy, jednak w istocie
dotkneliśmy jedynie podstaw. Dla przykładu system ebuildów Gentoo poza
rozpakowywaniem i kompilowaniem programów potrafi również:
</p>

<ul>
  <li>
  Pobierać źródła jeśli nie ma ich w katalogu <c>$DISTDIR</c>.
  </li>
  <li>
  Weryfikować poprawność źródeł przy użyciu sum MD5.
  </li>
  <li>
     Jeśli jest to wymagane, zapamiętywać wszystkie pliki instalowane w
     systemie, w celu ich łatwej deinstalacji.
  </li>
  <li>
     Jeśli jest to wymagane, pakować skompilowane aplikacje do tarball
     (skomperowane tak, jak tego chcemy), co umożliwia ich późniejszą instalację
     na innym komputerze lub w czasie instalacji systemu.
  </li>
</ul>

<p>
Dodatkowo posiada on wiele innych globalnych opcji konfiguracji, pozwalających
użytkownikowi na wybór flag optymalizacyjnych wykorzystywanych w czasie
instalacji i możliwości wsparcia dla innych programów - na przykład dla GNOME.
</p>

<p>
Oczywiste jest, że bash posiada znacznie bogatsze możliwości niż te, które
poznaliśmy w tej krótkiej serii artykułów. Nauczyliśmy się całkiem sporo,
więc korzystajmy niesamowitego narzędzia jakim jest bash, aby
przyspieszyć naszą codzienną pracę i usprawnić nasze projekty.
</p>

</body>
</section>
</chapter>

<chapter id="resources">
<title>Źródła informacji</title>
<section>
<title>Przydatne linki</title>
<body>

<ul>
  <li>
     Tarball ze źródłami (<path>sed-3.02.tar.gz</path>) -
     <uri>ftp://ftp.gnu.org/pub/gnu/sed</uri>
  </li>
  <li>
    <uri link="/doc/pl/articles/bash-by-example-p1.xml">Bash w przykładach -
    cześć pierwsza</uri>. 
  </li>
  <li>
    <uri link="/doc/pl/articles/bash-by-example-p2.xml">Bash w przykładach -
    część druga</uri>.
  </li>
  <li>
    <uri link="http://gentoo.org">Strona główna projektu Gentoo</uri>
  </li>
  <li>
    <uri link="http://www.gnu.org/software/bash/manual/bash.html">Internetowy
    manual basha</uri>.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>

