<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/articles/bash-by-example-p1.xml,v 1.3 2005/09/10 22:55:35 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/articles/bash-by-example-p1.xml" lang="pl">
<title>Bash w przykładach - część pierwsza</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Tłumacz">
  <mail link="stawrul@boo.pl">Waldemar Korłub</mail>
</author>

<abstract>
Poprzez naukę języka skryptowego bash nasza codzienna praca z Linuksem stanie
się przyjemniejsza i bardziej produktywna. Będziemy mogli zbudować na podstawie 
standardowych UNIX-owych konstrukcji (jak strumienie i przekierowania) wiele
przydatnych skryptów. W tym trzyczęściowym kursie Daniel Robbins uczy
programowania w bashu na przykładach. Przedstawia on absolutne podstawy (dzięki
czemu jest to świetny poradnik dla początkujących), a także bardziej
zaawansowane możliwości basha.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.1</version>
<date>2005-07-12</date>

<chapter>
<title>Podstawy programowania w Bourne again shell (bash)</title>
<section>
<title>Wprowadzenie</title>
<body>

<note>
Oryginalna wersja tego artykułu została opublikowana w IBM developerWorks i jest
własnością Westtech Information Services. Poniższy dokument jest zaktualizowaną
wersją oryginalnego artykułu i zawiera rozmaite dodatki wprowadzone przez
członków projektu Gentoo Linux Documentation.
</note>

<p>
Dlaczego powinniśmy uczyć się programowania w bashu? Poniżej znajduje się kilka
powodów:
</p>

</body>
</section>
<section>
<title>Bash już działa w naszym systemie</title>
<body>

<p>
Gdybyśmy to sprawdzili, prawdopodobnie okazałoby się, że w tym momencie bash
działa w naszym systemie. Nawet jeśli zmieniliśmy domyślną powłokę, bash
prawdopodobnie i tak działa, ponieważ jest to standardowy shell Linuksa i system
używa go do rozmaitych działań. W związku z tym, że bash już działa, wszystkie
dodatkowe skrypty, jakie uruchomimy nie będą właściwie zajmowały dodatkowej
pamięci, gdyż dzialą one pamięć z działającymi już procesami basha. Po co więc
ładować inny interpreter, jeśli już działa w naszym systemie coś, co
wykona pracę i w dodatku zrobi to dobrze?
</p>

</body>
</section>
<section>
<title>Już korzystamy z basha</title>
<body>

<p>
Nie tylko bash działa w naszym systemie. Każdego dnia używamy go. Bash
zawsze nam towarzyszy, więc warto nauczyć się wykorzystywać jego pełny
potencjał. Dzięki temu korzystanie z systemu będzie przyjemniejsze i bardziej
produktywne. Dlaczego jednak uczyć się programowania w bashu? To proste - już
myślimy w kategoriach wykonywania komend, kopiowania plików, tworzenia strumieni i
przekierowań. Warto jest uczyć się języka, który umożliwia wykorzystanie znanych
nam już potężnych i pozwalających na oszczędzenie czasu narzędzi. Powłoki
udostępniają nam potencjał systemu UNIX, a bash jest powłoką Linuksa. Jest
wysokopoziomowym pośrednikiem pomiędzy nami i komputerem. Poszerzając wiedzę o
bashu zwiększamy produktywność naszej pracy w systemach Linux i UNIX.
</p>

</body>
</section>
<section>
<title>Pozorny nieład basha</title>
<body>

<p>
Nauka basha w niewłaściwy sposób może wywołać wrażenie pozornego nieładu w jego
strukturach. Wielu początkujących użytkowników wpisuje <c>man bash</c> w celu
wyświetlenia strony man basha. Jednak tam znajdują się lakoniczne i bardzo
techniczne opisy jego funkcjonalności. Inni używają <c>info bash</c>, co daje
efekt w postaci wyświetlenia strony man, lub tylko odrobinę bardziej przyjaznej
dokumentacji.
</p>

<p>
Choć początkujący użytkownicy mogą czuć się zawiedzeni, trzeba pamiętać, że
dokumentacja basha nie może być "wszystkim dla wszystkich" i jest skierowana do
osób, które są już zaznajomione z programowaniem powłoki. Z całą pewnością strona
man basha zawiera wiele przydatnych informacji technicznych, jednak dla
początkującego użytkownika, są one niemal bezużyteczne.
</p>

<p>
Ta krótka seria jest przeznaczona właśnie dla początkujących, którzy chcą
nauczyć się stosowania podstawowych konstrukcji basha do budowy własnych
skryptów. Zamiast technicznych opisów można tu znaleźć wyjaśnienia w przystępnym
języku, dzięki czemu nie tylko będziemy wiedzieli co robi dany element, ale
także w jakich sytuacjach powinniśmy go stosować. Po przebrnięciu przez ten
kurs, będziemy w stanie pisać własne złożone skrypty - osiągniemy poziom na
którym korzystanie z basha stanie się dla nas komfortowe. Ponadto będziemy
mogli dalej rozwijać swoje umiejętności poprzez czytanie (i rozumienie)
standardowej dokumentacji basha. Zaczynajmy.
</p>

</body>
</section>
<section>
<title>Zmienne środowiskowe</title>
<body>

<p>
Korzystając z basha (i prawie wszystkich innych powłok), użytkownik może
definiować zmienne środowiskowe, które tworzone są wewnętrznie jako łańcuchy
znaków ASCII. Jedną z najbardziej przydatnych właściwości zmiennych
środowiskowych jest to, że są one standardową częścią modelu działania UNIX-a.
Oznacza to, że zmienne środowiskowe są dostępne nie tylko dla skryptów shella,
ale również mogą zostać wykorzystane przez skompilowane programy. Gdy
wyeksportujemy zmienną środowiskową, każdy uruchomiony program będzie mógł
odczytać nasze ustawienia, niezależnie od tego czy jest to skrypt shella czy
nie. Dobrym przykładem jest tu użycie komendy <c>vipw</c>, która pozwala
użytkownikowi root edycję plików systemowych z hasłami. Poprzez ustawienie w
zmiennej środowiskowej <c>EDITOR</c> nazwy ulubionego edytora, możemy
skonfigurować <c>vipw</c>, aby korzystało w niego zamiast z vi. Jest to
przydatne jeśli nie lubimy vi lub wolimy używać innego edytora.
</p>

<p>
Standardowym sposobem zdefiniowania zmiennej środowiskowej w bashu jest wpisanie
komendy:
</p>

<pre caption="Definiowanie zmiennej środowiskowej">
$ <i>myvar='To moja zmienna środowiskowa!'</i>
</pre>

<p>
Powyższa komenda definiuje zmienną środowiskową o nazwie "myvar", zawierającą
łańcuch "To moja zmienna środowiskowa!". Należy zwrócić uwagę na kilka kwestii:
po pierwsze, nie ma żadnych białych znaków (spacja, znak tabulacji) po obu
stronach znaku <c>=</c>; jakakolwiek przewra spowoduje błąd. Druga sprawa to
możliwość pominięcia znaków cudzysłowu w sytuacji, gdy przypisujemy zmiennej
jako wartość jedno słowo (ciąg niezawierający białych znaków). Cudzysłów jest
konieczny, jeśli wartość zmiennej zawiera więcej niż jedno słowo.
</p>

<note>
Aby uzyskać bardziej szczegółowe informacje o użyciu znaków cudzysłowu w bashu,
należy zapoznać się z sekcją "QUOTING" na stronie man basha. Istnienie
specjalnych sekwencji znaków, które bash zastępuje przez inne wartości,
komplikuje obsługę łańcuchów. W tej serii artykułów przedstawimy tylko
najczęściej używane fonkcjonalności znaków cudzysłowu.
</note>

<p>
Po trzecie, o ile zazwyczaj możemy używać podwójnych znaków cudzysłowu zamiast
pojedynczych, próba dokonania tego w powyższym przykładzie spowoduje błąd.
Dlaczego? Ponieważ podwójne znaki cudzysłowu umożliwiają bashowi dokonanie
ekspansji, podczas której specjalne znaki i sekwencje znaków zostają zastąpione
odpowiednimi wartościami. Na rzykład znak "!" jest symbolem ekspansji historii
basha i zazwyczaj zostaje zastąpiony ostatnio wpisaną komendą (w tej serii
artykułów nie opiszemy możliwości ekspansji historii, ponieważ nie jest to
często wykorzytywana właściwość basha; więcej informacji na ten temat można
uzyskać w sekcji "HISTORY EXPANSION" na stronie man basha). Funkcje te (nazywane
funkcjami macro) mogą być bardzo pomocne, jednak w tym momencie zależy nam na
umieszczeniu prostego literału na końcu zmiennej środowiskowej.
</p>

<p>
Teraz zobaczmy w jaki sposób można korzystać ze zmiennych środowiskowych. Oto
przykład:
</p>

<pre caption="Używanie zmiennych środowiskowych">
$ <i>echo $myvar</i>
To moja zmienna środowiskowa!
</pre>

<p>
Poprzez poprzedzenie nazwy zmiennej środowiskowej znakiem $, nakazujemy powłoce
bash zastąpienie tego wywołania wartością zmiennej. W terminologii basha
nazywane jest to ekspansją zmiennych. Jednak co się stanie jeśli spróbujemy
wykonać komendę:
</p>

<pre caption="Próba użycia ekspansji zmiennych">
$ <i>echo foo$myvarbar</i>
foo
</pre>

<p>
Chcieliśmy uzyskać na wyjściu napis "fooTo moja zmienna środowiskowa!bar",
jednak polecenie nie powiodło się. Co poszło źle? Ekspansja zmiennych nie była w
stanie poprawnie zadziałać. Nie było możliwe określenie czy chcemy dokonać
ekspansji zmiennej $,m ,$my, $myvar, $myvrbar czy jeszcze jakiejś innej. Musimy
bardziej precyzyjnie określić o jaką zmienną nam chodzi. Spróbujmy wykonać
polecenie:
</p>

<pre caption="Prawidłowe użycie ekspansji zmiennych">
$ <i>echo foo${myvar}bar</i>
fooTo moja zmienna środowiskowa!bar
</pre>

<p>
Jak widać, możemy objąć nazwę zmiennej środowiskowej nawiasami klamrowymi, gdy
nie jest ona oddzielona od otaczającego ją tekstu w inny sposób. Podczas gdy
"$myvar" jest szybsze do wpisania i będzie poprawnie działać w większości
przypadków, "${myvar}" zostanie właściwie zinterpretowane w prawie każdej
sytuacji. Obie formy dają taki sam efekt i obie będą wykorzystywane w dalszej
części artykułu. Należy zapamiętać, że gdy nazwa zmiennej środowiskowej nie jest
oddzielona od otaczającego tekstu białymi znakami, należy ująć ją w nawiasy
klamrowe.
</p>

<p>
Wspomnieliśmy wcześniej, że możliwe jest wyeksportowanie zmiennych. Gdy tego
dokonujemy, zmienna staje się automatycznie dostępna dla wszystkich działających
programów i skryptów. Te drugie mogą uzyskać dostęp do zmiennych środowiskowych
poprzez ich obsługę wbudowaną w powłokę. Natomiast programy w języku C mogą
skorzystać z funkcji getenv(). Poniżej znajduje się przykładowy kod źródłowy,
który warto przekopiować do pliku i skompilować - pozwala on na zrozumienie
zagadnienia zmiennych środowiskowych z perspektywy języka C.
</p>

<pre caption="myvar.c - prosty program w języku C korzystający ze zmiennej
środowiskowej">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
  char *myenvvar=getenv("EDITOR");
  printf("Zmienna środowiskowa EDITOR posiada wartość %s\n",myenvvar);
}
</pre>

<p>
Zapiszmy powyższy kod źródłowy w pliku o nazwie <path>myenv.c</path> i
skompilujmy do przy użyciu komendy:
</p>

<pre caption="Kompilacja powyższego programu">
$ <i>gcc myenv.c -o myenv</i>
</pre>

<p>
Teraz w aktualnym katalogu znajduje się program, który po uruchomieniu wyświetli
wartość zmiennej środowiskowej <c>EDITOR</c>, jeśli została ona określona. Na
moim komputerze daje to efekt:
</p>

<pre caption="Uruchomienie powyższego programu">
$ <i>./myenv</i>
Zmienna środowiskowa EDITOR posiada wartość (null)
</pre>

<p>
Ponieważ wartość zmiennej środowiskowej <c>EDITOR</c> nie została określona,
program otrzymuje pusty łańcuch. Spróbujmy ustawić wartość dla zmiennej
<c>EDITOR</c> i jeszcze raz uruchomić program:
</p>

<pre caption="Próba z określoną zmienną środowiskową">
$ <i>EDITOR=xemacs</i>
$ <i>./myenv</i>
Zmienna środowiskowa EDITOR posiada wartość (null)
</pre>

<p>
Choć mogło wydawać się, że program wypisze wartość "xemacs", ponownie zwrócił on
wartość pustą. Stało się tak, ponieważ nie wyeksportowaliśmy zmiennej
<c>EDITOR</c>. Tym razem powinno się udać:
</p>

<pre caption="Wywołanie programu po wyeksportowaniu zmiennej">
$ <i>export EDITOR</i>
$ <i>./myenv</i>
Zmienna środowiskowa EDITOR posiada wartość xemacs
</pre>

<p>
Na tym przykładzie widzimy, że inne procesy (w tym przypadku nasz program w
języku C) nie widzą zmiennych środowiskowych nim nie zostaną one wyeksportowane.
Zdefiniowania i wyeksportowania zmiennej środowiskowej można dokonać przy użyciu
jednej komendy:
</p>

<pre caption="Zdefiniowanie i wyeksportowanie zmiennej środowiskowej w jednej
komendzie">
$ <i>export EDITOR=xemacs</i>
</pre>

<p>
Działa to identycznie jak dwie oddzielne komendy. Przyszedł czas na
przedstawienie sposoby na usunięcie wartości zmiennej środowiskowej przy użyciu
polecenia <c>unset</c>:
</p>

<pre caption="Usuwanie wartości zmiennej">
$ <i>unset EDITOR</i>
$ <i>./myenv</i>
Zmienna środowiskowa EDITOR posiada wartość (null)
</pre>

</body>
</section>
<section>
<title>Przegląd sposobów rozrywania łańcuchów</title>
<body>

<p>
Rozrywanie łańcuchów - dzielenie ich na mniejsze, oddzielne fragmenty - jest
jednym z tych zadań, które jest wykonywane każdego dnia przez skrypty powłoki.
Wiele razy sprypt pobiera pełną ścieżkę, aby określić nazwę wykonywanego pliku
lub katalogu, w którym się on znajduje. Podczas gdy jest możliwe (i przyjemne!)
napisanie tego w bashu, standardowa komenda UNIX-a <c>basename</c> radzi sobie
w tej sytuacji idealnie:
</p>

<pre caption="Używanie basename">
$ <i>basename /usr/local/share/doc/foo/foo.txt</i>
foo.txt
$ <i>basename /usr/home/drobbins</i>
drobbins
</pre>

<p>
<c>basename</c> jest bardzo przydatnym narzędziem do dzielenia łańcuchów. Jego
przeciwieństwo, czyli <c>dirname</c> zwraca pozostałą część ściżki, którą
odrzuca <c>basename</c>:
</p>

<pre caption="Używanie dirname">
$ <i>dirname /usr/local/share/doc/foo/foo.txt</i>
/usr/local/share/doc/foo
$ <i>dirname /usr/home/drobbins/</i>
/usr/home
</pre>

<note>
Zarówno działanie <c>dirname</c> jak i <c>basename</c> nie odnosi się do żadnych
istniejących (lub nie) katalogów i plików na dysku. Polecenia te wyłącznie
manipulują łańcuchami, jakie otrzymają w postaci argumentu.
</note>

</body>
</section>
<section>
<title>Podstawianie komend</title>
<body>

<p>
Inną bardzo przydatną umiejętnością jest przekazanie rezultatu wykonania komendy
do zmiennej środowiskowej. Jest to bardzo proste do zrobienia:
</p>

<pre caption="Tworzenie zmiennej środowiskowej zawierającej wynik działania
komendy">
$ <i>MYDIR=`dirname /usr/local/share/doc/foo/foo.txt`</i>
$ <i>echo $MYDIR</i>
/usr/local/share/doc/foo
</pre>

<p>
To co zrobiliśmy powyżej nazywane jest podstawianiem komend. Warto zwrócić tutaj
uwagę na kilka rzeczy. W pierwszej linii objeliśmy podstawianą komendę
odwróconymi apostrofami. Nie jest to zwykły pojedynczy cudzysłów, ale symbol,
który na klawiaturze znajduje się zazwyczaj na przyciskiem tabulacji (na tym
samym klawiszu co tylda). Możemy wykonać dokładnie to samo działanie przy użyciu
alternatywnej składni podstawiania poleceń basha:
</p>

<pre caption="Alternatywna składnia podstawiania poleceń">
$ <i>MYDIR=$(dirname /usr/local/share/doc/foo/foo.txt)</i>
$ <i>echo $MYDIR</i>
/usr/local/share/doc/foo
</pre>

<p>
Jak widać bash dostarcza wielu sposobów na wykonanie dokładnie tych samych
działań. Używając podstawiania komend możemy umieścić dowolną komendę lub
strumień komend pomiędzy znakami <e>` `</e> lub <e>$( )</e> i przypisać dzięki
temu ich wynik do zmiennej środowiskowej. To bardzo przydatna właściwość!
Poniżej znajduje się przykład wykorzystania podstawiania komend w odniesieniu
do strumieni:
</p>

<pre caption="Podstawianie strumienia komend">
$ <i>MYFILES=$(ls /etc | grep pa)</i>
$ <i>echo $MYFILES</i>
pam.d passwd
</pre>

</body>
</section>
<section>
<title>Zaawansowane rozrywanie łańcuchów</title>
<body>

<p>
<c>basename</c> i <c>dirname</c> to bardzo przydatne narzędzia, jednak może
zdarzyć się tak, że będziemy potrzebować bardziej zaawansowanych funkcji
dzielenia łańchuchów, niż zwykłe manipulacje na ścieżkach. W takiej sytuacji
możemy skorzystać z zaawansowanych możliwości basha w dziedzinie ekspansji
zmiennych. Używaliśmy już standardowego sposobu ekspansji zmiennych, który ma
postać <c>${MYVAR}</c>. Bash oferuje jednak kilka przydatnych spsobów rozrywania
zmiennych poddawanych ekspansji. Popatrzmy na następujące przykłady:
</p>

<pre caption="Przykłady rozrywania łańcuchów">
$ <i>MYVAR=foodforthought.jpg</i>
$ <i>echo ${MYVAR##*fo}</i>
rthought.jpg
$ <i>echo ${MYVAR#*fo}</i>
odforthought.jpg
</pre>

<p>
W pierwszym przykładzie nakazaliśmy wyświetlenie efektu działnia ekspansji
zdefiniowanej jako <c>${MYVAR##*fo}</c>. Co dokładnie oznacza tego typu
ekspansja zmiennej? Wewnątrz ${ } wpisaliśmy nazwę zmiennej środowiskowej, znaki
<c>##</c> i wyrażenie <c>*fo</c>. Bash odnalazł w zmiennej <c>MYVAR</c>
najdłuższy ciąg znaków pasujący do wyrażenia <c>*fo</c> i usunął go z początku
łańcucha. Jest to nieco trudne do zrozumienia za pierwszym razem, więc aby
poznać działanie znaków <c>##</c> przyjrzyjmy się w jaki sposób bash
przeprowadził tą ekspansję. Zaczął on sprawdzać od początku łańcuch
"foodforthought.jpg" w poszukiwaniu fragmentów, które pasują do wyrażenia
<c>.*fo</c>. Oto kolejne etapy sprawdzania zmiennej środowiskowej:
</p>

<pre caption="Sprawdzanie łańcucha">
f       
fo              ODPOWIADA *fo
foo     
food
foodf           
foodfo          ODPOWIADA *fo
foodfor
foodfort        
foodforth
foodfortho      
foodforthou
foodforthoug
foodforthought
foodforthought.j
foodforthought.jp
foodforthought.jpg
</pre>

<p>
Jak widać, bash znalazł dwa fragmenty odpowiadające naszemu wyrażeniu.
Wykorzystanie znaków <c>##</c> podczas ekspansji zmiennej nakazuje wybranie
najdłuższego z pasujących ciągów. Gdy został on prawidłowo zidentyfikowany, bash
usunął go z początku zmiennej i zwrócił pozostałą część.
</p>

<p>
Drugi przykład ekspansji zmiennej jest taki sam jak pierwszy poza wykorzystaniem
pojedynczego znaku <c>#</c>, zamiast dwóch takich znaków w pierwszym przypadku. Bash
przeprowadza tutaj niemal identyczny proces. Sprawdzane są te same fragmenty
łańcucha co poprzednio, jednak z początku zmiennej usunięty zostaje najkrótszy
ciąg pasujący do wyrażenia <c>*fo</c>. Więc gdy tylko bash sprawdzi fragment "fo",
usuwa go i zwraca "odforthought.jpg".
</p>

<p>
Początkowo trudnym do zapamiętania może wydawać się kiedy korzystamy z <c>#</c>, a
kiedy z <c>##</c>. Istnieje prosty sposób aby to przyswoić. Szukając
najdłuższego fragmentu łańcuch, używamy <c>##</c>, bo jest dłuższe niż <c>#</c>.
Analogicznie najkrótszy fragment odnajdziemy przy użyciu <c>#</c>. Jednak w jaki
sposób zapamiętać, że <c>#</c> usunie znaki z początku zmiennej? Bardzo prosto -
na klawiaturach typu us wciśnięcie shift+4 daje znak $, symbolizyjący
ekspansję zmiennych. Na lewo od tego znaku na klawiaturze znajduje się znak #.
Widać że # jest "na początku" $, więc służy on do usuwania znaków z początku
zmiennej. Jeśli zastanawiamy się w jaki sposób usunąć znaki z końca łańcucha
wystarczy spojrzeć na prawo od znaku $ na klawiaturze - służy do tego znak
<c>%</c>. Poniżej kilka przykładów jego wykorzystania:
</p>

<pre caption="Inny sposób dzielenia łańcuchów">
$ <i>MYFOO="chickensoup.tar.gz"</i>
$ <i>echo ${MYFOO%%.*}</i>
chickensoup
$ <i>echo ${MYFOO%.*}</i>
chickensoup.tar
</pre>

<p>
Jak widać, opcje ekspansji zmiennych <c>%</c> i <c>%%</c> działają tak, jak
<c>#</c> oraz <c>##</c>, jednak usuwają pasujący do podanego wyrażenia fragment
zmiennej z jej końca. Należy przy tym pamiętać, że nie jest konieczne użycie
znaku <c>*</c>, jeśli chcemy usunąć ściśle określony fragment zmiennej.
</p>

<pre caption="Usuwanie znaków z końca łańcucha">
<i>MYFOOD="chickensoup"</i>
$ <i>echo ${MYFOOD%%soup}</i>
chicken
</pre>

<p>
W tym przypadku nie ma znaczenia czy użyjemy <c>%%</c> czy <c>%</c>, gdyż tylko
jeden fragment odpowiada podanemy wyrażeniu. Jeśli nie będziemy pamiętali czy
powinniśmy użyć <c>#</c> czy <c>%</c>, można spojrzeć na klawisze 3, 4, 5 -
układ znaków symbolicznie odpowiada funkcjom przez nie pełnionym. 
</p>

<p>
Ekspansja zmiennych pozwala także na pobranie określonego przez nas fragmentu
łańcucha, na podstawie indeksu pierwszego znaku jaki ma znaleźć się w wycinku i
jego długości. Spróbujmy wprowadzić następujące komendy:
</p>

<pre caption="Wybór fragmentu łańcucha">
$ <i>EXCLAIM=cowabunga</i>
$ <i>echo ${EXCLAIM:0:3}</i>
cow
$ <i>echo ${EXCLAIM:3:7}</i>
abunga
</pre>

<p>
Ten sposób dzielenia łańcuchów może okazać się bardzo przydatny. Wystarczy podać
indeks znaku od którego zacznie się tworzenie wycinka (pierwszy znak ma indeks
0 - jak w pierwszym przykładzie) i ilość znaków jaką ma on zawierać (wszystkie
informacje rozdzielone dwukropkami).
</p>

</body>
</section>
<section>
<title>Implementacja rozrywania łańcuchów</title>
<body>

<p>
Gdy poznaliśmy sposoby rozrywania łańcuchów, napiszmy prosty skrypt. Nasz skrypt
będzie przyjmował jeden argument w postaci nazwy pliku i wyświetlał informacje
czy jest to tarball, czy też nie. Plik jest tarballem, jeśli na końcu jego nazwy
znajduje się ciąg ".tar". Oto skrypt:
</p>

<pre caption="mytar.sh - przykładowy skrypt">
#!/bin/bash

if [ "${1##*.}" = "tar" ]
then
       echo Plik jest tarballem.
else
       echo Na pierwszy rzut oka plik nie wygląda na tarballa.
fi
</pre>

<p>
Aby wykonać skrypt, należy skopiwać jego kod do pliku <path>mytar.sh</path> i
wykonać komendę <c>chmod 755 mytar.sh</c>, co nada mu prawo do wykonywania.
Następnie wykonujemy skrypt jak poniżej:
</p>

<pre caption="Wypróbowanie skryptu">
$ <i>./mytar.sh thisfile.tar</i>
Plik jest tarballem.
$ <i>./mytar.sh thatfile.gz</i>
Na pierwszy rzut oka plik nie wygląda na tarballa.
</pre>

<p>
Skrypt działa, jednak nie jest zbyt funkcjonalny. Zanim sprawimy, że stanie się
on bardziej przydatny, przyjrzyjmy się konstrukcji if w kodzie skryptu. Znajduje
się w niej wyrażenie typu boolean. W bashu operator porównania <c>=</c>
sprawdza, czy łańcuchy po obu jego stronach są takie same. Wszystkie wyrażenia
typu boolean należy umieszczać w nawiasach kwadratowych. Co dokładnie jest
obiektem wyrażenia typu boolean? Popatrzmy na jego lewą stronę. Zgodnie z tym
czego się do tej pory nauczyliśmy, konstrukcja <c>${1##*.}</c> usunie z początku
łańcucha, znajdującego się w zmiennej środowiskowej 1, najdłuższy fragment
pasujący do wzorca <c>*.</c> i zwróci pozostałą jego część. Otrzymamy w ten sposób
znaki snajdujące się po ostatniej kropce. Oczywiste jest, że jeśli nazwa pliku
kończy się ciągiem ".tar", wynikiem tej operacji będzie ciąg "tar", który w
porównaniu z p-wartością (wartością po prawej stronie operatora porównania) da
wynik całego wyrażenia w postaci prawdy.
</p>

<p>
Być może nie jest do końca jasne czym tak naprawdę jest zmienna środowiskowa o
nazwie <c>1</c>. To bardzo proste - $1 to pierwszy argument skryptu podany w wierszu
poleceń, $2 to drugi argument itd. Przeanalizowaliśmy już wyrażenie typu
boolean, jakie pojawiło się z naszym skrypcie. Przyjrzyjmy się teraz bliżej
konstrukcji if.
</p>

</body>
</section>
<section>
<title>Konstrukcja if</title>
<body>

<p>
Jak większość języków, bash ma swoje własne konstrukcje warunkowe. Podczas ich
używania należy trzymać się formatu jaki pokazano w przykładzie powyżej:
<c>if</c> oraz <c>then</c> muszą znajdować się w oddzielnych liniach, ponadto te
słowa kluczowe oraz <c>else</c> i <c>fi</c> (które <e>musi</e> znaleźć się na
końcu każdej konstrukcji warunkowej), należy wyrównać w ten sam sposób. Czyni to
kod łatwiejszym do czytania i debugowania. Poza podstawową formą "if,else",
konstrukcja warunkowa może przyjmować bardziej złożone postacie.
</p>

<pre caption="Podstawowa forma konstrukcji if">
if      [ warunek ]
then
        akcja
fi
</pre>

<p>
Konstrukcja if w takiej formie wykona jakąś akcję tylko jeśli warunek jest
prawdziwy, w przeciwnym razie nie zostaną podjęte żadne czynności i wykonanie
skryptu będzie kontynuowane w liniach po kończącym <c>fi</c>.
</p>

<pre caption="Sprawdzanie dodatkowych warunków">
if [ warunek ]
then 
        akcja
elif [ warunek2 ]
then
        akcja2
.
.
.
elif [ warunek3 ]
then
        akcja3
else
        akcjax
fi
</pre>

<p>
Zastosowana powyżej formuła <c>elif</c> będzie sprawdzać kolejne warunki i
wykona akcje odpowiadające pierwszemu warunkowi, który zostanie określony jako
prawdziwy. Gdy żaden z warunków nie będzie prawdziwy, wykonane zostaną akcje z
sekcji<c>else</c>, jeśli taka występuje (w powyższym przykadzie występuje). Po
tych czynościach wykonanie skryptu będzie kontynuowane w liniach znajdujących
się po całej konstrukcji "if,elif,else".
</p>

</body>
</section>
<section>
<title>Kolejna część kursu</title>
<body>

<p>
Kiedy poznaliśmy już podstawowe funkcjonalności basha, czas podnieść poprzeczkę
i przygotować się do pisania prawdziwych skryptów. W drugim artykule z tej serii
przedstawimy pętle, funkcje, przestrzenie nazw i inne fundamentalne zagadnienia.
Dzięki temu będziemy gotowi do pisania bardziej złożonych skryptów. Trzeci (i
zarazem ostatni) artykuł tego kursu skupia się niemal wyłącznie na
skomplikowanych skryptach i funkcjach, a także na opisie kilku strategii
projektowych.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Zasoby informacji</title>
<section>
<title>Przydatne linki</title>
<body>

<ul>
  <li>
    <uri
    link="/doc/pl/articles/bash-by-example-p2.xml">Bash w
    przykładach - część druga</uri>.
  </li>
  <li>
    <uri
    link="/doc/en/articles/bash-by-example-p3.xml">Bash w
    przykładach - część trzecia</uri>.
  </li>
  <li>
    <uri link="http://www.gnu.org/software/bash/bash.html">Strona GNU bash</uri>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>

