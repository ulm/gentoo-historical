<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/articles/l-sed2.xml,v 1.4 2005/10/09 21:43:23 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/articles/l-sed2.xml" lang="pl" disclaimer="articles"> 
<title>Sed w przykładach, część druga</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Tłumaczenie">
  <mail link="jbozanowski@gmail.com">Kuba Bożanowski</mail>
</author>

<abstract>
Sed jest rozbudowanym i podręcznym edytorem strumieni tekstowych. W tym
artykule, który jest drugim z kolei, Daniel pokaże nam jak użyć seda do
podstawiania łańcuchów tekstowych, tworzyć większe skrypty, a także używać
komend dołącz, wstaw oraz zmień linię.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.2</version>
<date>2005-10-09</date>

<chapter>
<title>Jak jeszcze lepiej wykorzystać edytor tekstowy systemu UNIX</title>
<section>
<title>Podstawianie!</title>
<body>

<p>
Przyjrzyjmy się jednej z najbardziej przydatnych komend edytora sed,
podstawieniu. Przy jej pomocy możemy zastąpić określony ciąg znaków lub
dopasowane wyrażenie regularne innym ciągiem znaków. Oto przykład najbardziej
elementarnego zastosowania tej komendy:
</p>

<pre caption="Najbardziej elementarne zastosowanie komendy podstawienia">
$ <i>sed -e 's/cos/cosinnego/' mojplik.txt</i>
</pre>

<p>
Powyższe polecenie wypisze zawartość pliku mojplik.txt na standardowe 
wyjście, zastępując w każdej linii pierwsze wystąpienie napisu "cos" 
(o ile w ogóle wystąpi) napisem "cosinnego". Zauważmy, że napisałem o pierwszym
wystąpieniu w każdej linii, pomimo iż zwykle nie o to nam chodzi. Najczęściej
gdy wykonujemy podstawienie napisu, chcemy tego dokonać globalnie. Oznacza to, że
chcę zastąpić wszystkie wystąpienia napisu w każdej linii, w ten sposób:
</p>

<pre caption="Zamiana wszystkich wystąpień w każdej linii">
$ <i>sed -e 's/cos/cosinnego/g' mojplik.txt</i>
</pre>

<p>
Dodatkowa opcja 'g' po ostatnim ukośniku mówi sedowi, aby wykonał globalne
podstawienie.
</p>

<p>
Powinniśmy wiedzieć jeszcze kilka rzeczy o komendzie <c>s///</c>. Po pierwsze,
mówiliśmy wyłącznie o komendzie; w powyższych przykładach nie podawaliśmy
adresów. Oznacza to, że możemy użyć polecenia <c>s///</c> wraz z adresem, aby
kontrolować, do których wierszy będzie ona zastosowana. Robimy to w następujący
sposób:
</p>

<pre caption="Określanie wierszy, do których komenda zostanie zastosowana">
$ <i>sed -e '1,10s/zaczarowanie/zablokowanie/g' mojplik2.txt</i>
</pre>

<p>
Powyższy przykład sprawi, że wszystkie wystąpienia wyrazu "zaczarowanie" zostaną
zastąpione wyrazem "zablokowanie", ale tylko w wierszach od pierwszego do
dziesiątego włącznie.
</p>

<pre caption="Podawanie dalszych opcji">
$ <i>sed -e '/^$/,/^END/s/wzgórza/góry/g' mojplik3.txt</i>
</pre>

<p>
W tym przykładzie wyraz "wzgórza" zostanie zastąpiony wyrazem "góry", ale
tylko w tych blokach tekstu, które zaczynają się pustą linią, a kończą linią
zaczynającą się od liter "END" włącznie. 
</p>

<p>
Kolejną miłą rzeczą dotyczącą komendy <c>s///</c> jest mnogość opcji dotyczących
separatorów <c>/</c>. Jeśli chcemy dokonać podstawienia napisów i wyrażenie
regularnie lub napis, który chcemy zmienić zawiera wiele ukośników, możemy
zmienić separator, podając inny znak po literze "s". Zilustrujmy to przykładem,
w którym zamienimy wszystkie wystąpienia <path>/usr/local</path> na 
<path>/usr</path>:
</p>

<pre caption="Zamiana wszystkich wystąpień napisu innym napisem">
$ <i>sed -e 's:/usr/local:/usr:g' mojalista.txt</i>
</pre>

<note>
W powyższym przykładzie użyliśmy dwukropka jako separatora. Jeśli musielibyśmy 
użyć znaku separatora w wyrażeniu regularnym, należałoby poprzedzić go 
odwrotnym ukośnikiem. 
</note>

</body>
</section>
<section>
<title>Pułapki wyrażeń regularnych</title>
<body>

<p>
Do tej pory wykonywaliśmy jedynie podstawienia zwykłych napisów. Mimo iż często
się to przydaje, to jednak możemy zrobić to samo dla wyrażeń regularnych.
Poniższa komenda znajdzie frazę rozpoczynającą się znakiem "&lt;" i kończącą się
znakiem "&gt;", posiadającą dowolną ilość znaków pomiędzy nimi. Fraza ta
zostanie skasowana (zastąpiona pustym napisem):
</p>

<pre caption="Kasowanie podanej frazy">
$ <i>sed -e 's/&lt;.*&gt;//g' mojplik.html</i>
</pre>

<p>
Jest to dobry początek skryptu, który usunie tagi języka HTML z pliku, jednakże
nie zadziała dobrze ze względu na pewną właściwość wyrażeń regularnych.
Mianowicie gdy sed szuka wyrażenia regularnego w linii, znajduje najdłuższe
możliwe dopasowanie w tej linii. Nie było to problemem w poprzednim artykule o
sedzie, ponieważ używaliśmy komend <c>d</c> i <c>p</c>, które tak czy inaczej
skasują lub wypiszą całą linię. W przypadku komendy <c>s///</c> nie odpowiada
nam to, ponieważ cały dopasowany fragment tekstu zostanie zastąpiony przez
docelowy napis, a w tym przypadku skasowany. Oznacza to, że powyższy przykład
zamieni następującą linię:
</p>

<pre caption="Przykładowy kod HTML">
&lt;b&gt;Właśnie&lt;/b&gt; o to &lt;b&gt;mi&lt;/b&gt; chodziło.
</pre>

<p>
W tę:
</p>

<pre caption="Niepożądany wynik">
chodziło.
</pre>

<p>
Zamiast w poniższą, czyli w to, co chcieliśmy osiągnąć:
</p>

<pre caption="Pożądany wynik">
Właśnie o to mi chodziło.
</pre>

<p>
Na szczęście da się temu zaradzić. Zamiast wyrażenia regularnego, które znajdzie
"dowolną ilość znaków, poprzedzoną znakiem '&lt;' i zakończoną znakiem '&gt;'"
musimy użyć takiego, które odnajdzie "dowolną ilość znaków różnych od znaku
'&gt;', poprzedzoną znakiem '&lt;' i zakończoną znakiem '&gt;'". W ten sposób
znajdziemy najkrótsze możliwe dopasowanie, zamiast najdłuższego. Nowe polecenie
powinno wyglądać tak:
</p>

<pre caption="">
$ <i>sed -e 's/&lt;[^&gt;]*&gt;//g' mojplik.html</i>
</pre>

<p>
W powyższym przykładzie wyrażenie "[^&gt;]" oznacza "znak różny od '&gt;'", 
a symbol "*" uzupełnia je o znaczenie "zero lub więcej znaków różnych od
'&gt;'". Warto wypróbować to polecenie na kilku przykładowych plikach html,
przeglądając wyniki za pomocą programu more.
</p>

</body>
</section>
<section>
<title>Dopasowanie większej ilości znaków</title>
<body>

<p>
Składnia wyrażenia regularnego "[ ]" oferuje jeszcze kilka możliwości. Możemy 
określić zakres znaków za pomocą symbolu "-", o ile nie znajduje się on na
pierwszym lub ostatnim miejscu:
</p>

<pre caption="Podawanie zakresu znaków">
'[a-x]*'
</pre>

<p>
W ten sposób wyszukamy zero lub więcej znaków, dopóki wszystkie należeć będą do
zbioru "a","b","c"..."v","w","x". Oprócz tego dysponujemy klasą znakową
"[:space:]" do znajdywania odstępu. Poniżej znajduje się prawie kompletna lista
dostępnych klas znakowych. 
</p>

<table>
  <tr>
    <th>Klasa znakowa</th>
    <th>Opis</th>
  </tr>
  <tr>
    <ti>[:alnum:]</ti>
    <ti>Znaki alfanumeryczne [a-z A-Z 0-9]</ti>
  </tr>
  <tr>
    <ti>[:alpha:]</ti>
    <ti>Znaki alfabetyczne [a-z A-Z]</ti>
  </tr>
  <tr>
    <ti>[:blank:]</ti>
    <ti>Spacje lub tabulatory</ti>
  </tr>
  <tr>
    <ti>[:cntrl:]</ti>
    <ti>Dowolny znak kontrolny</ti>
  </tr>
  <tr>
    <ti>[:digit:]</ti>
    <ti>Cyfry [0-9]</ti>
  </tr>
  <tr>
    <ti>[:graph:]</ti>
    <ti>Znaki drukowalne (bez odstępów)</ti>
  </tr>
  <tr>
    <ti>[:lower:]</ti>
    <ti>Małe litery [a-z]</ti>
  </tr>
  <tr>
    <ti>[:print:]</ti>
    <ti>Znaki drukowalne z odstępami</ti>
  </tr>
  <tr>
    <ti>[:punct:]</ti>
    <ti>Znaki drukowalne za wyjątkiem odstępów, liter i cyfr</ti>
  </tr>
  <tr>
    <ti>[:space:]</ti>
    <ti>Wszystkie znaki odstępu</ti>
  </tr>
  <tr>
    <ti>[:upper:]</ti>
    <ti>Duże litery [A-Z]</ti>
  </tr>
  <tr>
    <ti>[:xdigit:]</ti>
    <ti>Cyfry w systemie szesnastkowym [0-9 a-f A-F]</ti>
  </tr>
</table>

<p>
Używanie klas znakowych wszędzie tam, gdzie to możliwe jest wysoce pożądane, 
ponieważ znakomicie dopasowują się one do innych niż angielskie zestawów 
znaków (uwzględniając znaki akcentowane, itd).
</p>

</body>
</section>
<section>
<title>Zaawansowane podstawianie</title>
<body>

<p>
Do tej pory przyjrzeliśmy się prostym i w miarę złożonym podstawieniom, ale sed
potrafi jeszcze więcej. Możemy odnosić się do dowolnej części lub całości
tekstu odnalezionego przez wyrażenie regularne i użyć jej do stworzenia
podstawianego napisu. Przykładowo, załóżmy że chcemy odpowiedzieć na wiadomość.
Poniższa komenda poprzedzi każdą linię wyrażeniem "ralph powiedział: ":
</p>

<pre caption="Poprzedzanie każdej linii określonym napisem">
$ <i>sed -e 's/.*/ralph powiedział: &amp;/' oryginalnawiadomosc.txt</i>
</pre>

<p>
Oto wynik jej działania:
</p>

<pre caption="Efekt działania powyższej komendy">
ralph powiedział: Cześć Jim,
ralph powiedział:
ralph powiedział: Bardzo podoba mi się ta lekcja seda!
ralph powiedział:
</pre>

<p>
W powyższym przykładzie wykorzystaliśmy znak "&amp;" w podstawianym napisie.
Mówi on sedowi, aby wstawić w tym miejscu cały tekst znaleziony przez wyrażenie
regularne. Tak więc cokolwiek zostało znalezione przez ".*" (największa grupa
zera lub więcej znaków w linii lub cała linia) może zostać podstawione w
dowolnym miejscu podstawianego tekstu nawet kilka razy. Całkiem nieźle, ale sed
potrafi jeszcze więcej.
</p>

</body>
</section>
<section>
<title>Dyskretny urok nawiasów poprzedzonych odwrotnymi ukośnikami</title>
<body>

<p>
Komenda <c>s///</c> pozwala nam na definiowanie regionów w wyrażeniu regularnym,
do których możemy się następnie odwoływać w podstawianym tekście. W ramach
przykładu przyjrzyjmy się następującemu tekstowi:
</p>

<pre caption="Przykładowy tekst">
bla ble bli
ele mele dudki
ala ma kota
kot ma alę
</pre>

<p>
Załóżmy teraz, że chcemy napisać skrypt w sedzie, który zamieni "ele mele dudki"
na "Victor ele-mele Von dudki", i tak dalej. Aby tego dokonać najpierw
powinniśmy napisać wyrażenie regularne, które odnajdzie nasze trzy wyrazy
oddzielone spacjami:
</p>

<pre caption="Odpowiednie wyrażenie regularne">
'.* .* .*'
</pre>

<p>
Właśnie tak. Następnie zdefiniujmy regiony, umieszczając wokół każdego
interesującego nas miejsca nawiasy poprzedzone wstecznym ukośnikiem:
</p>

<pre caption="Definiowanie regionów">
'\(.*\) \(.*\) \(.*\)'
</pre>

<p>
Powyższe wyrażenie regularne zadziała indentycznie jak pierwsze. Jedyną różnicą
będzie fakt, iż definiuje ono trzy logiczne regiony, do których będziemy mogli
odnieść się w naszym podstawianym napisie. Oto ostateczny skrypt:
</p>

<pre caption="Ukończony skrypt">
$ <i>sed -e 's/\(.*\) \(.*\) \(.*\)/Victor \1-\2 Von \3/' mojplik.txt</i>
</pre>

<p>
Jak widać, odnosimy się do każdego obszaru ograniczonego nawiasami za pomocą
wyrażenia "\x", gdzie x jest numerem regionu, zaczynając od jedynki. Efekt 
działania skryptu będzie następujący:
</p>

<pre caption="Wynik działania powyższej komendy">
Victor bla-ble Von bli
Victor ele-mele Von dudki
Victor ala-ma Von kota
Victor kot-ma Von alę
</pre>

<p>
W miarę jak poznajemy seda coraz bliżej, możliwe staje się dokonywanie 
skomplikowanych operacji na tekście przy minimum wysiłku. Warto zastanowić 
się nad rozwiązaniem powyższego problemu za pomocą dowolnego języka 
skryptowego -- czy udałoby nam się równie łatwo zmieścić rozwiązanie 
w jednej linijce?
</p>

</body>
</section>
<section>
<title>Zamieszanie w komendach</title>
<body>

<p>
Gdy zaczynamy tworzyć bardziej złożone skrypty, potrzebujemy możliwości
wpisywania więcej niż jednej komendy na raz. Można tego dokonać na kilka
sposobów. Po pierwsze, możemy rozdzielić komendy średnikami. Na przykład ten
zestaw poleceń używa komendy "=", która każe sedowi wypisać numer linii, oraz
komendy <c>p</c>, która specjalnie instruuje seda, aby wypisał linię (ponieważ
pracujemy w trybie "-n"):
</p>

<pre caption="Pierwszy sposób, średniki">
$ <i>sed -n -e '=;p' mojplik.txt</i>
</pre>

<p>
Gdy podajemy dwie lub więcej komend, każda z nich jest zastosowana (po kolei) do
każdej linii pliku. W powyższym przykładzie na pierwszej linii zostanie użyta 
komenda "=", a następnie <c>p</c>. Sed wówczas przechodzi do drugiej linii i
proces powtarza się. Pomimo iż średnik okazał się być przydatny, w niektórych
sytuacjach nie zadziała. Alternatywą będzie użycie dwóch parametrów -e w celu
podania dwóch osobnych komend:
</p>

<pre caption="Drugi sposób, wiele parametrów -e">
$ <i>sed -n -e '=' -e 'p' mojplik.txt</i>
</pre>

<p>
Jednak gdy tylko dojdziemy do bardziej złożonych poleceń dodawania i wstawiania,
nawet wiele parametrów "-e" nam nie pomoże. Wówczas najlepiej zrobimy zapisując
wszystkie komendy w osobnym pliku, a następnie wywołując go parametrem -f:
</p>

<pre caption="Trzeci sposób, zewnętrzny plik zawierający komendy">
$ <i>sed -n -f mojekomendy.sed mojplik.txt</i>
</pre>

<p>
Ten sposób, choć mniej wygodny, nigdy nas nie zawiedzie.
</p>

</body>
</section>
<section>
<title>Wiele komend wykonanych na jednym adresie</title>
<body>

<p>
Czasem zajdzie potrzeba wykonania kilku poleceń na jednym przedziale.
Szczególnie jest to przydatne gdy chcemy wykonać wiele komend <c>s///</c> w celu
przekształcenia wyrazów lub składni w pliku źródłowym. Aby wykonać wiele komend
na jednym adresie zapiszmy je w pliku i użyjmy znaków "{ }" do pogrupowania ich:
</p>

<pre caption="Podawanie wielu komend dla jednego adresu">
1,20{
        s/[Ll]inux/GNU\/Linux/g
        s/samba/Samba/g
        s/posix/POSIX/g
}
</pre>

<p>
Powyższe polecenia zastosują trzy podstawienia w liniach od pierwszej do
dwudziestej włącznie. Jako adresów moglibyśmy również użyć wyrażenia regularnego
lub połączyć jedno z drugim:
</p>

<pre caption="Połączenie obu sposobów">
1,/^END/{
        s/[Ll]inux/GNU\/Linux/g 
        s/samba/Samba/g 
        s/posix/POSIX/g 
        p
}
</pre>

<p>
W powyższym przykładzie wszystkie komendy między znakami "{ }" zostaną
użyte na tekście od pierwszej linii aż po linię, która zaczyna się literami
"END" lub, w przypadku braku takowej, aż po koniec pliku.
</p>

</body>
</section>
<section>
<title>Dołączanie, wstawianie i zmienianie linii</title>
<body>

<p>
Teraz gdy już piszemy skrypty seda w osobnych plikach, możemy wykorzystać
polecenia dołączania, wstawiania i zmiany linii. Polecenia te wstawią wiersz 
po aktualnej linii, przed aktualną linią, lub zastąpią ją. Można ich także
używać do wstawiania wielu wierszy jednocześnie. Komendy wstawiania używa się w
następujący sposób:
</p>

<pre caption="Użycie komendy wstawiania wiersza">
i\
Ten wiersz zostanie wstawiony przed każdą linią
</pre>

<p>
Jeśli nie podamy adresu dla tej komendy, zostanie ona zastosowana do każdej
linii, a wynik jej działania będzie podobny do poniższego:
</p>

<pre caption="Efekt działania powyższego polecenia">
Ten wiersz zostanie wstawiony przed każdą linią
oto linia 1
Ten wiersz zostanie wstawiony przed każdą linią
oto linia 2
Ten wiersz zostanie wstawiony przed każdą linią
oto linia 3
Ten wiersz zostanie wstawiony przed każdą linią
oto linia 4
</pre>

<p>
Jeśli zechcemy wstawić więcej niż jeden wiersz przed aktualną linią, wystarczy
że dopiszmy je, dodając odwrotny ukośnik na końcu każdego poprzedniego wiersza:
</p>

<pre caption="Wstawianie wielu wierszy przed aktualną linią">
i\
wstaw ten wiersz\
i ten\
i ten\
o, nie zapomnijmy tez o tym.
</pre>

<p>
Komenda dołączania działa podobnie, tylko dołącza wiersz lub wiersze po
aktualnej linii. Oto przykład:
</p>

<pre caption="Dołączanie wiersza po aktualnej linii">
a\
proszę wstawić ten wiersz po każdej linii. Z góry dziękuję! :)
</pre>

<p>
Z kolei polecenie "zmień linię" podmieni ją na nową. 
</p>

<p>
Ze względu na to, iż komendy dołączania, wstawiania i zamiany linii muszą być
podawane w kilku wierszach, należy wpisywać je w plikach tekstowych i podawać
sedowi za pomocą parametru "-f". Pozostałe metody wpisywania komend zaowocują
problemami.
</p>

</body>
</section>
<section>
<title>W następnym odcinku</title>
<body>

<p>
W następnym artykule, który będzie już ostatnim na temat seda, ukazane zostaną
znakomite przykłady z życia wzięte na zastosowanie seda do wielu różnych zadań.
Nie tylko dowiemy się co skrypty robią, ale też w jaki sposób działają. 
Z pewnością zaowocuje to wieloma pomysłami na zastosowanie seda w rozmaitych 
projektach. Do zobaczenia w następnym odcinku!
</p>

</body>
</section>
</chapter>

<chapter>
<title>Zasoby</title>
<section>
<title>Przydatne odnośniki</title>
<body>

<ul>
  <li>
    Warto przeczytać pozostałe artykuły Daniela na temat seda, napisane dla 
    develperWorks: Sed w przykładach, <uri 
    link="/doc/pl/articles/l-sed1.xml">Część pierwsza</uri> i <uri
    link="/doc/en/articles/l-sed3.xml">Część trzecia</uri>.
  </li>
  <li>
     Eric Pement napisał znakomity dokument <uri
     link="http://www.student.northpark.edu/pemente/sed/sedfaq.html">FAQ na
     temat seda</uri>.
  </li>
  <li>
     Źródła seda można znaleźć pod adresem
     <uri>ftp://ftp.gnu.org/pub/gnu/sed</uri>.
  </li>
  <li>
     Najnowsza wersja dostępna jest na stronie <uri>ftp://alpha.gnu.org</uri>.
  </li>
  <li>
    Na stronie Erica Pementa można znaleźć również przydatny zestaw <uri
    link="http://www.student.northpark.edu/pemente/sed/sed1line.txt">jednolinijkowych
    skryptów w sedzie</uri>, którymi powinien zainteresować się każdy, kto
    chciałby zostać autorytetem w dziedzinie tego języka.
  </li>
  <li>
    Dla tych, którzy preferują klasyczne książki znakomitym wyborem będzie <uri
    link="http://www.oreilly.com/catalog/sed2/">"sed i awk" z wydawnictwa
    O'Reilly</uri>.
  </li>
<!-- FIXME BOTH DEAD and no other locations, sorry
 <li>
    Maybe you'd like to read <uri
    link="http://www.softlab.ntua.gr/unix/docs/sed.txt">7th edition UNIX's sed
    man page</uri> (circa 1978!).
  </li>
  <li>
    Take Felix von Leitner's short <uri
    link="http://www.math.fu-berlin.de/~leitner/sed/tutorial.html">sed
    tutorial</uri>.
  </li>
-->
    <li>
    Dzięki darmowemu samouczkowi napisanemu specjalnie dla developerWorks możemy
    podszkolić się w <uri
    link="http://vision.eng.shu.ac.uk/C++/misc/regexp/">używaniu wyrażeń
    regularnych</uri>, aby łatwiej znajdywać i modyfikować wzorce w tekście.
  </li>
</ul>

</body>
</section>
</chapter>

</guide>
