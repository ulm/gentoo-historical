<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/articles/openssh-key-management-p3.xml,v 1.4 2008/03/06 01:21:47 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/articles/openssh-key-management-p3.xml" disclaimer="articles" lang="pl">
<title>Zarządzanie kluczem OpenSSH, część trzecia</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Tłumaczenie">
  <mail link="claudiush@gmail.com">Dawid Węgliński</mail>
</author>

<abstract>
W trzeciej części Daniel Robbins pokaże jak użyć agenta OpenSSH, w celu
poprawienia bezpieczeństwa. Podzieli sie również ostatnimi nowościami i
ulepszeniami w skrypcie keychain.
</abstract>

<!-- Oryginalna wersja tego artykułu została pierwszy raz opublikowana na
stronach IBM developerWorks i jest własnością Westtech Information Services.
Tu znajduje się zaktualizowana wersja oryginalnego artykułu, zawierająca
różnorakie unowocześnienia, wykonane przez zespół ds. dokumentacji Gentoo. -->

<version>1.2</version>
<date>2005-10-21</date>

<chapter>
<title>Poprawki w ssh-agent i keychain</title>
<section>
<body>

<p>
Wielu z nas używa OpenSSH jako bezpiecznej, szyfrowanej alternatywy dla
sędziwych już narzędzi telnet i rsh. Jedną z ciekawszych opcji OpenSSH jest
jego zdolność do autoryzacji użytkownika używającego protokołów RSA i DSA,
które są bazowane na parach depełniających się "kluczy" numerycznych. Jednym z
głównych uroków autoryzacji RSA i DSA jest zdolność do ustanawiania połączenia
ze zdalnymi systemami bez dostarczania hasła. Aby lepiej to zrozumieć, należy
zajrzeć do poprzednich części tej serii, które stanowią odpowiednio <uri
link="/doc/pl/articles/openssh-key-management-p1.xml">uwierzytelnianie RSA/DSA
</uri> (część pierwsza) oraz ssh-agent i <uri
link="/doc/pl/articles/openssh-key-management-p2.xml">keychain</uri> (część
druga).
</p>

<p>
Od września 2001, kiedy to  druga część została opublikowana na stronach
developerWorks, a następnie wzmiankowana na Slashdot i Freshmeat (w dziale <uri
link="#resources">Źródła</uri> są odnośniki do tych artykułów) wielu
użytkowników zaczęło używać keychain, a on sam uległ wielu zmianom. Dostałem
około dwudziestu wysokiej jakości łatek od deweloperów z całego świata. Wiele z
tych łatek włączyłem do źródeł keychaina, który jest dostępny obecnie w wersji
1.8 (spójrz do działu <uri link="#resources">Źródła</uri>). Wysłałem wiele
szczerych podziękowań do wszystkich, którzy przysłali łatki, zgłosili błędy,
żądane opcje oraz notki z uznaniem.
</p>

</body>
</section>
<section>
<title>Zaostrzenie bezpieczeństwa ssh</title>
<body>

<p>
W moim <uri link="/doc/pl/articles/openssh-key-management-p2.xml">ostatnim
artykule</uri>, poświęciłem sporo czasu na duskusję o wadach i zaletach
wynikających z używania ssh-agent. Kilka dni później drugi artykuł pojawił się
na developerWorks, a ja otrzymałem e-mail od Charlesa Kerneya z Sarnoff
Corporation, w którym autor grzecznie poinformował mnie o nowych możliwościach
przykazywania autoryzacji agenta OpenSSH. W uzupełnieniu Charles podkreślił, że
używanie ssh-agent na niezaufanych maszynach jest odrobinę niebezpieczne: jeśli
ktoś zdoła zdobyć dostęp superużytkownika, wtedy rozszyfrowany klucz może
zostać "wyciągnięty" z ssh-agent. Nawet jeśli wyciągnięcie kluczy będzie w
pewien sposób trudne, jest to w obrębie umiejętności profesjonalnych
włamywaczy. A kradzież klucza prywatnego powinna zmotywować nas do
przedsięwzięcia kroków w celu zabezpieczenia się przed podobnymi zdarzeniami.
</p>

<p>
Aby określić strategię ochrony naszych prywatnych kluczy, przede wszystkim
musimy zaklasyfikować maszyny, do których mamy dostęp, do jednej z dwóch
kategorii. Jeśli dany host jest dobrze zabezpieczony, powinien zostać uważany
za zaufany. Jeśli maszyna jest używana przez wielu użytkowników albo mamy
jakiekolwiek inne wątpliwości dotyczące jej zabezpieczeń, wtedy powinna zostać
uważana jako niezaufana. Chroniąc nasze klucze prywatne, nigdy nie powinniśmy
uruchamiać ssh-agent oraz keychain na niezaufanych maszynach.
</p>

<p>
Jednakże tworzy to pewne problemy. Jeśli nie można uruchomić ssh-agent na
niezaufanych hostach, jak założyć bezpieczne, pozbawione hasła połączenie ssh z
tych systemów? Odpowiedź jest tylko jedna: użyć ssh-agent i keychain na
zaufanych hostach lub wykorzystać nowe możliwości uwierzytelniania OpenSSH,
rozszerzając pozbawione hasła uwierzytelnianie do tych niezaufanych.
Uwierzytelnianie działa dzięki zezwoleniu zdalnej sesji ssh do kontaktu z
ssh-agent na zaufanych systemach.
</p>

</body>
</section>
<section>
<title>Agent przesyłający uwierzytelnianie</title>
<body>

<p>
Aby zrozumieć ideę działania przesyłu uwierzytelniania, spójrzmy na hipotetyczną
sytuację, w której użytkownik drobbins posiada zaufany laptop zwany lappy,
zaufany serwer zwany trustbox oraz dwa inne, niezaufane systemy, do których
musi mieć dostęp, zwane odpowiednio nottrust1 i nottrust2. Obecnie używa on
ssh-agent wraz z keychain na każdej z czterech maszyn, jak jest to pokazane
poniżej:
</p>

<figure link="/images/docs/l-ssh-3.jpg" caption="ssh-agent używany na zaufanych
i niezaufanych maszynach"/>

<p>
Problem pojawia się w momencie, w którym ktoś zyska dostęp superużytkownika na
nottrust1 lub nottrust2. Wtedy osoba ta ma możliwość wyciągnięcia kluczy z
procesów ssh-agent. Aby naprawić to, drobbins zatrzymuje ssh-agent i keychain
na nottrust1 i nottrust2. Aby być jeszcze bardziej ostrożnym, drobbins decyduje
się używać tych programów jedynie na laptopie. Limituje to ujawnienie jego
rozszyfrowanych kluczy, chroniąc go przed ich kradzieżą.
</p>

<figure link="/images/docs/l-ssh-4.jpg" caption="ssh-agent uruchomiony jedynie
na laptopie; bardziej bezpieczna konfiguracja"/>

<p>
Oczywiście problem w tym, że drobbins może teraz ustanawiać pozbawione hasła
połączenia jedynie z laptopa. Spójrzmy jak umożliwić przesyłanie
uwierzytelniania i obejść ten problem.
</p>

<p>
Zakładając, że wszystkie boxy mają uruchomione najświeższe wersje OpenSSH, nie
możemy użyć przekazania uwierzytelniania. Pozwala ono zdalnemu procesowi ssh na
kontakt z ssh-agent, który jest uruchomiony na lokalnym, zaufanym hoscie --
raczej jak wymaganie wersji ssh-agent'a, który jest uruchomiony na tej samej
maszynie, z której wychodzi połączenie. Zazwyczaj pozwala to na uruchomienie
naszego zespołu (ssh-agent i keychain) na zwykłym hoscie i znaczy, że wszystkie
połączenia ssh, które pochodzą (bezpośrednio lub pośrednio) z tej maszyny, będą
korzystały z lokalnego ssh-agent.
</p>

<p>
Aby umożliwić przesyłanie uwierzytelniania, dodamy poniższą linię do pliku
<path>/etc/ssh/ssh_config</path>, zarówno w lappy jak i trustbox. Zauważ, że
jest to plik konfiguracyjny ssh (<path>ssh_config</path>), nie demona sshd
(<path>sshd_config</path>):
</p>

<pre caption="Dodajemy poniższą linię do /etc/ssh/ssh_config">
ForwardAgent Yes
</pre>

<p>
Teraz, drobbins spokojnie może połączyć się ze swojego laptopa do trustbox, a
wtedy do nottrust1, już bez wpisania hasła. Oba procesy ssh łączą się z
ssh-agent uruchomionym na lappy:
</p>

<pre caption="Tapping lappy">
$ <i>ssh drobbins@trustbox</i>
Last login: Wed Sep 26 13:42:08 2001 from lappy

Welcome to trustbox!
$ <i>ssh drobbins@notrust1</i>
Last login: Tue Sep 25 12:03:40 2001 from trustbox

Welcome to notrust1!
$
</pre>

<p>
Jeśli wypróbujesz podobną konfigurację i zauważysz, że przekazywanie nie działa
jak należy, spróbuj <c>ssh -A</c> zamiast ssh, aby wyraźnie umożliwić
przekazanie autoryzacji. Poniżej jest diagram ukazujący drogę naszego logowania
się do trustbox oraz nottrust1 używając przekazywanie uwierzytelniania:
</p>

<figure link="/images/docs/l-ssh-5.jpg" caption="Agent w akcji"/>

<p>
Jak można słusznie zauważyć połączenie ssh do trustbox utrzymuje połączenie z
ssh-agent uruchomionym na lappy. Kiedy połączenie ssh zostało ustanowione z
trustbox do nottrust1, ssh utrzymało uwierzytelnione połączenie, skutecznie
rozszerzając łańcuch (chain). To czy łańcuch autoryzacji może zostać
rozszerzony poza nottrust1 zależy od tego, jak <path>/etc/ssh/ssh_config</path>
jest skonfigurowany. Tak długo, jak ssh-agent jest uruchomiony na zaufanym
lappy, każda część łańcucha będzie zdolna do uwierzytelnienia.
</p>

</body>
</section>
<section>
<title>Korzyści z połączeń przekierowanych</title>
<body>

<p>
Przekierowanie uwierzytelniania oferuje wiele korzyści nie omawianych w tym
artykule. Aby przekonać mnie do ważności agenta przekierowania, Charles Karney
podzielił się ze mną informacją o tych trzech korzyściach:
</p>

<ol>
  <li>
    Klucz prywatny jest przechowywany jedynie na zaufanej maszynie. Chroni to
    przed złośliwymi użytkownikami, którzy zbierają zaszyfrowane klucze, a
    następnie próbują złamać szyfr.
  </li>
  <li>
    Ssh-agent jest uruchomiony na zaufanym systemie. To z kolei chroni przed
    intruzami, którzy robią zrzut pamięci procesu agenta i wyciągają z niego
    odszyfrowany klucz prywatny.
  </li>
  <li>
    Odkąd jedynym wymogiem jest wpisanie hasła na zaufanym hoście, można
    wykluczyć logowanie naciśnięć klawiszy i uzyskania tego hasła przez osoby
    niepowołane.
  </li>
</ol>

<p>
Jedynym minusem tego rozwiązania jest to, że nie rozwiązuje ono
problemu z wykonaniem prac cron'a. Jedynym wyjściem wtedy jest wymuszenie od
wszystkich prac uwierzytelnienia. Jeśli to konieczne, prace te mogą użyć ssh aby
na zdalnym systemie stworzyć kopie zapasowe, zsynchronizować wszystkie pliki i
tym podobne.
</p>

<p>
Teraz, skoro poznaliśmy już agenta przesyłającego uwierzytelnienie połączenia,
wróćmy do ostatnich unowocześnień w samym skrypcie keychain.
</p>

</body>
</section>
<section>
<title>Unowocześnienia skryptu keychain i jego funkcjonalność</title>
<body>

<p>
Dzięki łatkom nadesłanym przez użytkowników, zostało wprowadzonych wiele
znaczących zmian. Kilka łatek znalazło powiązania z funkcjami. Dla przykładu:
przypomnijmy sobie, że keychain tworzył plik <path>~/.ssh-agent</path>;
nazwa tego pliku została zmieniona na <path>~/.ssh-agent-[hostname]</path>,
przez co keychain działa z NFS, zamontowanym w katalogach domowych, dzięki czemu
dostęp do niego możliwy jest z wielu hostów. W dodatku, plik
<path>~/.ssh-agent-[hostname]</path> jest teraz plikiem
<path>~/.ssh-agent-csh-[hostname]</path>, przez co może zostać wykorzystany
przez kompatybilne z csh powłoki. Została również dodana nowa opcja
<c>--nocolor</c>, dzięki czemu w razie potrzeby kolorowanie może zostać
wyłączone
</p>

</body>
</section>
<section>
<title>Poprawa kompatybilności z powłokami</title>
<body>

<p>
Podczas gdy funkcjonalność unowocześnień została poprawiona, głównym
problemem stał się brak współpracy z powłokami. Wiemy, że keychain w
wersji 1.0 wymagał powłoki bash. Jego późniejsze wersje zostały zmienione
tak, aby były kompatybilne z wszystkimi rodzajami powłok. Ta zmiana
zezwoliła keychain pracować "poza maszyną" na każdym systemie Uniksowym,
włączając Linux, BSD, Solaris, IRIX oraz AIX. Przejście na sh i generalnie
współpraca z UNIX była nie lada wyzwaniem i olbrzymim doświadczeniem.
Stworzenie zwykłego skryptu, który może zostać
wykonany na każdej z tych platworm było dosyć skomplikowane. Przede wszystkim
dlatego, że nie mam dostępu do tych wszystkich systemów. Na szczęście jednak,
cała masa użytkowników na całym globie ma, a wielu z nich udzieliło wspaniałego
wsparcia w rozwiązywaniu problemów.
</p>

<p>
Były dwa rodzaje probemów kompatybilności, które musiały zostać naprawione.
Przede wszystkim, musiałem być pewny, że keychain używa jedynie wbudowanych w
siebie wyrażeń i operatorów, które są w pełni wspierane przez wszystkie powłoki,
włączając popularne darmowe i komercjalne UNIX sh, zsh oraz bash w wersjach 1 i
2. Tu jest kilka wprowadzonych przez użytkowników poprawek, które włączyliśmy do
kodu keychain:
</p>

<p>
W starszych wersjach powłok nie można użyć ~ w odniesieniu do katalogu domowego.
Dlatego zamiast tego został wprowadzony <c>$HOME</c>:
</p>

<pre caption="Tworzenie $HOME">
hostname=`uname -n`
pidf=${HOME}/.ssh-agent-${hostname}
cshpidf=${HOME}/.ssh-agent-csh-${hostname}
</pre>

<p>
Następnie wszystkie wzmianki o source zostały zmienione na . aby mieć pewność,
że będzie współpracował z /bin/sh w NetBSD:
</p>

<pre caption="Współpraca z NetBSD">
if [ -f $pidf ]
then
    . $pidf
else
SSH_AGENT_PID="NULL"
fi
</pre>

<p>
Z czasem zastosowałem również kilka innych  poprawek. Jeden bystry autor
skryptów poinformował mnie, że zamiast tworzenia plików poprzez "touch", można
go stworzyć wpisując samą jego nazwę:
</p>

<pre caption="Tworzenie plików">
> <i>foo</i>
</pre>

<p>
Polegając na składni powłoki bardziej niż na postaci binarnej, unikamy funkcji
fork(), więc skrypty stają się odrobinę bardziej wydajne. Polecenie > foo
powinno działać z każdą powłoką. Wygląda jednak na to, że nie jest wspierane
przez ash. Nie powinno to jednak stanowić problemu dla większości użytkowników
odkąd ash jest używany bardziej w sytuacjach awaryjnych jak w codziennej pracy.
</p>

</body>
</section>
<section>
<title>Problemy wykonywalności platform</title>
<body>

<p>
Stworzenie skryptu działającego na różnorakich, unikso-podobnych systemach,
wymaga więcej niż jedynie zastosowanie ubogiej składni sh. Należy pamiętać, że
większość skryptów wywołuje zewnętrzne polecenia, takie jak grep, awk, ps i
inne. Komendy te muszą być wywołane w zgodny z wszelkimi standardami sposób. Dla
przykładu, polecenie echo w większości systemów z rodziny UNIX rozpoznaje opcję
<c>-e</c>, podczas gdy Solaris jej nie rozpoznaje -- drukuje ją tak, jak zwykły
tekst. Zatem, aby keychain współpracował w tym wypadku z Solaris'em, potrzeba:
</p>

<pre caption="Przechytrzanie Solaris'a">
if [ -z "`echo -e`" ]
then
    E="-e"
fi
</pre>

<p>
Według powyższego skryptu, zmienna E jest równa <c>-e</c>, jeśli opcja -e jest
wspierana. Wtedy polecenie echo może być wywołane w następujący sposób:
</p>

<pre caption="Lepsze echo">
echo $E Usage: ${CYAN}${0}${OFF} [ ${GREEN}options${OFF} ] ${CYAN}sshkey${OFF} ...
</pre>

<p>
Używając <c>echo $E</c> zamiast <c>echo -e</c>, jest możliwe wyłączenie opcji
-e w razie potrzeby.
</p>

</body>
</section>
<section>
<title>pidof, ps</title>
<body>

<p>
Prawdopodobnie najbardziej znaczącą poprawką w kompatybilności keychain była
zmiana, dzięki której program wykrywa proces uruchomionego ssh-agent. Wcześniej
używałem do tego celu komendy pidof, którą musiałem zastąpić, ponieważ na wielu
systemach nie jest dostępna. Szczerze mówiąc, pidof nie jest najlepszym
roziązaniem, ponieważ wyświetla wszystkie uruchomione w systemie procesy
ssh-agent, podczas gdy my jesteśmy zainteresowani procesami przypisanymi do
danego użytkownika.
</p>

<p>
Zatem zamiast posługiwać się komendą pidof, przefiltrowaliśmy wyjście polecenia
ps, przez grep i awk. Była to jedna z opcji zgłoszonych przez użytkowników:
</p>

<pre caption="Potok lepszy niż pidof">
mypids=`ps uxw | grep ssh-agent | grep -v grep | awk '{print $2}'`
</pre>

<p>
Powyższy potok przyrówna zmienną mypids do wartości każdego procesu ssh-agent,
którego właścicielem jest dany użytkownik. Komenda grep -v grep jest użyta, by
proces naszego potoku nie stał się częścią listy PID.
</p>

<p>
Metoda ta jest dobra w zamyśle. W praktyce nie wygląda to dokładnie w ten
sposób. Dla przykładu: polecenie ps uxw działa na systemie Linux, ale już nie
działa na systemie IRIX, a polecenie <c>ps -u username -f</c> działa pod
Linuksem, IRIX-em i Solaris'em, lecz nie pod BSD. Aby obejść tego typu problem,
keychain, zanim wykona potok, sam wykrywa czy systemowe ps działa ze składnią
BSD lub SysV:
</p>

<pre caption="Wykrycie BSD lub System V">
psopts="FAIL"
ps uxw >/dev/null 2>&amp;1
if [ $? -eq 0 ]
then
psopts="uxw"
else
ps -u `whoami` -f >/dev/null 2>&amp;1
if [ $? -eq 0 ]
then
psopts="-u `whoami` -f"
fi
fi
if [ "$psopts" = "FAIL" ]
then
echo $0: unable to use \"ps\" to scan for ssh-agent processes.
Report KeyChain version and echo system configuration to drobbins@gentoo.org.
exit 1
fi

mypids=`ps $psopts 2>/dev/null | grep "[s]sh-agent" | awk '{print $2}'` > /dev/null 2>&amp;1
</pre>

<p>
Aby upewnić się, że pracujemy z należącą do BSD lub System V składnią polecenia
ps, skrypt wykonuje "przebieg próbny": sprawdza dane wyjściowe ps uxw. Jeśli kod
błędu jest równy zero, wiemy, że ps uxw działa, a my możemy odpowiednio ustawić
opcje komendy ps. Natomiast, jeśli ps uxw zwróci kod błędu różny od zera
(wskazując na pracę z opcjami rodem BSD), wykonujemy następny przebieg próbny
poleceniem <c>ps -u `whoami` -f</c>; kolejny raz uzyskujemy dane wyjściowe. W
tym momencie znaleźliśmy jeden z dwóch wariantów opcji dla ps. Jeśli staje się
inaczej, widzimy błąd, a praca zostaje zakończona. Jednak jest wysoce
prawdopodobne, że jedna z dwóch komend zadziała, a zatem wykonamy powyższy
fragment kodu -- potok ps.
</p>

<p>
Potok zawiera również "perełkę", którą uprzejmie nadesłał do mnie Hans Peter
Verne. Należy zauważyć, że człon <c>grep -v grep</c> nie jest już częścią
potoku; został on usunięty, a <c>grep "ssh-agent"</c> został nadpisany przez
grep <c>"[s]sh-agent"</c>. Ta prosta komenda kończy swoją pracę w tym samym
punkcie,
co <c>grep ssh-agent | grep -v grep</c>.
</p>

<pre caption="Doskonała sztuczka z grep">
mypids=`ps $psopts 2>/dev/null | grep "[s]sh-agent" | awk '{print $2}'` > /dev/null 2>&amp;1
</pre>

<p>
Nie prawda, że zdumiewające? Jeśli stwierdzasz, że <c>grep "ssh-agent"</c>
oraz <c>grep "[s]sh-agent"</c> zwrócą identyczne dane wyjściowe, masz rację.
Ale dlaczego generują różne wyniki? Oto jak to działa: używając grep
"[s]sh-agent" zmienia się wynik polecenia grep w liście procesów wyświetlonych
po ps. Ponieważ ciąg "[s]sh-agent" nie jest równoznaczny z wyrażeniem regularnym
"[s]sh-agent", grep nie zwraca własnego procesu. Jeśli wciąż nie potrafisz
zrozumieć zasady działania, pobaw się jakiś czas programem grep. Jestem pewien,
że do tego dojdziesz szybko.
</p>

</body>
</section>
<section>
<title>Wniosek</title>
<body>

<p>
Ta kolumna kończy moje sprawozdanie o OpenSSH. Dowiedziałeś się sporo, więc
możesz zacząć używać OpenSSH do zabezpieczenia swojego systemu. W następnych
miesiącach, podobny wątek zostanie kontunuowany serią "Przewodnik po
zaawansowanych narzędziach systemów plików"
</p>

</body>
</section>
</chapter>

<chapter id="resources">
<title>Źródła</title>
<section>
<body>

<ul>
  <li>
    Przeczytaj dwa poprzednie artykuły Daniela z tej serii, <uri
    link="/doc/pl/articles/openssh-key-management-p1.xml">Zarządzanie kluczem
    OpenSSH, Część 1</uri> oraz <uri
    link="/doc/pl/articles/openssh-key-management-p2.xml">Zarządzanie kluczem
    Openssh, Część 2</uri>
  </li>
  <li>
    Najświeższa wersja keychain dostępna jest na <uri
    link="http://www.gentoo.org/proj/en/keychain/index.xml">Stronie Domowej
    Keychain</uri>
  </li>
  <li>
    Obowiązkowo odwiedź również <uri link="http://www.openssh.com/">stronę
    domową projektu OpenSSH</uri> oraz <uri
    link="http://www.openssh.com/faq.html">FAQ poświęcony OpenSSH</uri>
  </li>
  <li>
    <uri link="http://www.chiark.greenend.org.uk/~sgtatham/putty/">PuTTY</uri>
    jesŧ wspaniałym klientem ssh dla systemów operacyjnych Windows
  </li>
  <li>
    Pomocna może się okazać książka "SSH, The Secure Shell: The Definitive
    Guide" (O'Reilly &amp; Associates, 2001). A tu <uri
    link="http://www.snailbook.com/">strona autora</uri> zawierająca informacje
    na temat woluminu, FAQ, nowości oraz aktualnościcontains.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
