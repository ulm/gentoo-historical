<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/articles/openssh-key-management-p1.xml,v 1.2 2006/06/25 13:50:09 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/articles/openssh-key-management-p1.xml" disclaimer="articles" lang="pl">
<title>Zarządzanie kluczami OpenSSH, Część 1</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Tłumacz">
  <mail link="lucass@gentoo.org">Łukasz Strzygowski</mail>
</author>
<!-- xmlified by Max Lorenz (anarchyisgoodforthee@gmail.com) -->

<abstract>
Seria artykułów Daniela Robbinsa przedstawia autoryzację za pomocą protokołów
RSA oraz DSA. W pierwszej części Daniel opisuje podstawy ich działania oraz
konfiguracji.
</abstract>

<!-- The original version of this article was first published on IBM
developerWorks, and is property of Westtech Information Services. This
document is an updated version of the original article, and contains
various improvements made by the Gentoo Linux Documentation team -->

<version>1.1</version>
<date>2005-10-09</date>

<chapter>
<title>Autoryzacja RSA/DSA</title>
<section>
<body>

<p>
OpenSSH (patrz <uri link="#resources">Zasoby</uri>) to bezpieczny, szyfrowany
zamiennik znanych programów <c>telnet</c> oraz <c>rsh</c>.  Do jego najbardziej
fascynujących zalet należy możliwość autoryzacji użytkowników za pomocą
protokołów DSA oraz RSA, opartych o parę uzupełniających się liczbowych kluczy.
DSA i RSA pozwalają nawiązywać połączenia ze zdalnymi systemami <e>bez
podawania hasła</e>. Jakkolwiek brzmi to zachęcająco, wielu początkujących
użytkowników konfiguruje OpenSSH na szybko i otwiera poważną lukę w
bezpieczeństwie całego procesu logowania.
</p>

</body>
</section>
<section>
<title>Na czym polega autoryzacja RSA/DSA?</title>
<body>

<p>
SSH, a konkretnie OpenSSH (czyli wolna implementacja SSH) to niesamowite
narzędzie. Podobnie jak <c>telnet</c> i <c>rsh</c>, klient ssh pozwala
zalogować się na zdalnej maszynie. Wymaga to jedynie uruchomienia na niej
<c>sshd</c>, czyli serwera <c>ssh</c>.  W przeciwieństwie do <c>telnetu</c>,
protokół ssh jest bardzo bezpieczny. Za pomocą specjalnych algorytmów szyfruje
strumień danych, zapewnia jego integralność, a ponadto w bezpieczny sposób
przeprowadza autoryzację.
</p>

<p>
Pewien aspekt <c>ssh</c> jest często ignorowany, niebezpiecznie nadużywany lub
zwyczajnie niezrozumiany. Aspekt ten to system autoryzacji za pomocą par kluczy
RSA/DSA, alternatywny dla standardowego logowania z użyciem haseł, którego
OpenSSH używa domyślnie.
</p>

<p>
Uwierzytelnianie RSA i DSA w OpenSSH jest oparte na parze specjalnie
wygenerowanych kluczy, nazywanych <e>kluczem prywatnym</e> i <e>kluczem
publicznym</e>. Plusem korzystania z autoryzacji opartej na kluczach jest fakt,
że w wielu przypadkach możliwe jest nawiązanie połączenia bez podawania hasła.
</p>

<p>
Podczas gdy autoryzacja oparta na kluczach jest względnie bezpieczna, problem
pojawia się gdy użytkownicy ułatwiają sobie pewnymi skrótami proces logowania,
nie rozumiejąc w pełni wpływu tych ułatwień na bezpieczeństwo.  Niniejszy
artykuł pokazuje jak poprawnie używać RSA i DSA do logowania bez wystawiania
się na niepotrzebne ryzyko. W kolejnym pokażę jak korzystać z <c>ssh-agent</c>
oraz przedstawię <c>keychain</c>, nakładkę na <c>ssh-agent</c> oferującą wiele
ułatwień i nie narażającą przy tym bezpieczeństwa.
</p>

</body>
</section>
<section>
<title>Jak działają klucze RSA/DSA</title>
<body>

<p>
Oto krótkie wprowadzenie do kluczy RSA/DSA. Załóżmy, że chcemy za pomocą RSA
umożliwić logowanie się z lokalnej maszyny z zainstalowanym Linuksem
(<e>localbox</e>) do zdalnej powłoki na <e>remotebox</e>, komputerze naszego
ISP. Obecnie, gdy próbujemy się połączyć z <e>remotebox</e> klientem
<c>ssh</c>, widzimy następujący komunikat:
</p>

<pre caption="Łączenie z remotebox">
$ <i>ssh drobbins@remotebox</i>
drobbins@remotebox's password:
</pre>

<p>
Jest to przykład <e>domyślnego</e> sposobu autoryzacji <c>ssh</c>.  <c>ssh</c>
po prostu pyta o hasło do konta <e>drobbins</e> na <e>remotebox</e>.  Jeśli je
podamy, <c>ssh</c> skorzysta ze swojego bezpiecznego protokołu autoryzacji i
prześle je do weryfikacji na <e>remotebox</e>.  Jednakże, w przeciwieństwie do
<c>telneta</c>, tutaj nasze hasło podlega wcześniej szyfrowaniu, zatem nie może
zostać przechwycone przez nikogo podsłuchującego nasze połączenie. Kiedy
<e>remotebox</e> porówna podane hasło ze swoją bazą haseł i uzna je za
poprawne, zostaniemy zalogowani i zobaczymy znak zachęty powłoki na
<e>remotebox</e>. Jakkolwiek metoda ta jest dosyć bezpieczna, RSA i DSA
oferują nieco więcej możliwości.
</p>

<p>
W przeciwieństwie do logowania za pomocą hasła, autoryzacja RSA wymaga wstępnej
konfiguracji. Wystarczy ją przeprowadzić raz.  Później, logowanie pomiędzy
<e>localbox</e> i <e>remotebox</e> odbywać się będzie zupełnie bezboleśnie.
Konfigurację rozpoczynamy od wygenerowania pary kluczy, prywatnego oraz
publicznego.  Klucze te mają pewne ciekawe właściwości. Klucz publiczny służy
do szyfrowania wiadomości, którą odszyfrować może jedynie posiadacz klucza
prywatnego. Tak więc klucza publicznego używamy wyłącznie do
<e>szyfrowania</e>, natomiast prywatnego do <e>rozszyfrowywania</e> wiadomości.
Protokół RSA (a także DSA) wykorzystuje te możliwości do przeprowadzania
bezpiecznej autoryzacji bez konieczności przesyłania przez sieć jakichkolwiek
poufnych informacji.
</p>

<p>
Następny jednorazowy krok konfiguracji polega na skopiowaniu <e>klucza
publicznego</e> na <e>remotebox</e>. Na klucz ten mówimy "publiczny" nie bez
powodu. Ponieważ służy on jedynie do <e>szyfrowania</e> wiadomości dla nas, nie
musimy się obawiać, że wpadnie w niepowołane ręce. Następnie na
<e>remotebox</e> należy go umieścić w specjalnym pliku
<path>~/.ssh/authorized_keys</path>, aby <c>sshd</c> mógł go odnaleźć. Teraz
jesteśmy gotowi do logowania za pomocą RSA.
</p>

<p>
W tym celu wystarczy jak zwykle wpisać na <e>localbox</e> polecenie <c>ssh
drobbins@remotebox</c>. Tym razem jednak, <c>ssh</c> informuje <c>sshd</c> na
<e>remotebox</e>, że chce skorzystać z RSA. Interesujące jest to co następuje
później. <c>sshd</c> z <e>remotebox</e> generuje losową liczbę i szyfruje ją za
pośrednictwem naszego klucza publicznego, który wcześniej tam umieściliśmy.
Następnie wysyła ją z powrotem do <c>ssh</c> na <e>localbox</e>, który ją
odszyfrowuje i przesyła ponownie do <e>remotebox</e>. Przekazuje w ten sposób
wiadomość "Widzisz, <e>naprawdę</e> posiadam odpowiedni klucz prywatny; Udało
mi się odszyfrować twoją wiadomość!". W końcu <c>sshd</c> uznaje, że może
pozwolić się zalogować. Do autoryzacji wystarcza zatem sam fakt posiadania
odpowiedniego klucza prywatnego.
</p>

</body>
</section>
<section>
<title>Dwa spostrzeżenia</title>
<body>

<p>
Warto zauważyć dwie rzeczy. Po pierwsze, wystarcza wygenerować jedną parę
kluczy. Klucz publiczny możemy umieścić na wszystkich maszynach, na których
chcemy się logować i wszystkim wystarczy nasz jeden klucz prywatny. Innymi
słowy, nie potrzebujemy osobnej pary kluczy dla <e>każdego</e> systemu.
</p>

<p>
Po drugie, <e>nasz klucz prywatny nie powinien dostać się w niepowołane
ręce</e>. Każdy, który go posiada ma dokładnie takie same uprawnienia dostępu
jak my. Podobnie jak nie chcielibyśmy, żeby ktoś obcy miał klucze do naszego
domu, powinniśmy chronić klucz prywatny. W świecie bitów i bajtów oznacza to,
że nikt inny nie powinien mieć uprawnień do jego odczytu oraz kopiowania.
</p>

<p>
Deweloperzy <c>ssh</c> oczywiście zdają sobie sprawę z ważności kluczy
prywatnych. Wbudowali w <c>ssh</c> i <c>ssh-keygen</c> kilka zabezpieczeń, żeby
ochronić je przed nadużyciami. Przede wszystkim, <c>ssh</c> wyświetla duże
ostrzeżenie jeśli nasz klucz posiada uprawnienia pozwalające komukolwiek oprócz
nas go odczytać. Ponadto, kiedy tworzymy parę kluczy, <c>ssh-keygen</c> zapyta
o passphrase. Jeśli je podamy, klucz prywatny zostanie zaszyfrowany z jego
użyciem, zatem nawet gdy zostanie skradziony, pozostanie bez niego
bezużyteczny. Uzbrojeni w tę wiedzę, spójrzmy jak skonfigurować <c>ssh</c> aby
używało protokołów RSA i DSA.
</p>

</body>
</section>
<section>
<title>Program ssh-keygen</title>
<body>

<p>
Pierwszym krokiem w konfiguracji autoryzacji RSA jest wygenerowanie pary
kluczy. Autoryzacja RSA to pierwotna wersja autoryzacji za pomocą kluczy w
<c>ssh</c>, zatem będzie działać z każdą wersją OpenSSH. Oczywiście zalecana
jeset instalacja możliwie najnowszej dostępnej wersji. W czasie powstania tego
artykułu było to openssh-2.9_p2. Wygenerowanie pary kluczy wygląda następująco:
</p>

<pre caption="Generowanie pary kluczy">
$ <i>ssh-keygen</i>
Generating public/private rsa1 key pair.
Enter file in which to save the key (/home/drobbins/.ssh/identity): <comment>(wciśnij enter)</comment>
Enter passphrase (empty for no passphrase): <comment>(podaj passphrase)</comment>
Enter same passphrase again: <comment>(podaj je ponownie)</comment>
Your identification has been saved in /home/drobbins/.ssh/identity.
Your public key has been saved in /home/drobbins/.ssh/identity.pub.
The key fingerprint is:
a4:e7:f2:39:a7:eb:fd:f8:39:f1:f1:7b:fe:48:a1:09 drobbins@localbox
</pre>

<p>
Na pytanie o domyślne położenie kluczy wybieramy domyślną opcję, czyli
<path>/home/drobbins/.ssh/identity</path>. <c>ssh-keygen</c> zapisze w tym
pliku klucz prywatny, natomiast publiczny w pliku o nazwie identity.pub.
</p>

<p>
Zapytani o passphrase, wybieramy bezpieczne (siedem lub więcej trudnych do
odgadnięcia znaków). <c>ssh-keygen</c> zaszyfruje przy jego użyciu klucz
prywatny (<path>~/.ssh/identity</path>), dzięki czemu dla kogoś kto go nie zna,
pozostanie on bezużyteczny.
</p>

</body>
</section>
<section>
<title>Szybki kompromis</title>
<body>

<p>
Podanie passphrase pozwala zabezpieczyć klucz prywatny przed nadużyciami,
jednakże powoduje pewną niewygodę. Teraz przy każdym połączeniu z kontem
<e>drobbins@remotebox</e>, <c>ssh</c> zapyta o to passphrase.  Zatem zamiast
podawania hasła do konta <e>drobbins</e>, będziemy musieli podać passphrase do
klucza prywatnego. Kiedy zostanie odszyfrowany, <c>ssh</c> zajmie się resztą
procesu. Podczas gdy mechanizm logowania stanie się zupełnie inny, w praktyce
wciąż musimy podać jakieś hasło.
</p>

<pre caption="Logowanie z passphrase">
$ <i>ssh drobbins@remotebox</i>
Enter passphrase for key '/home/drobbins/.ssh/identity': <comment>(podaj passphrase)</comment>
Last login: Thu Jun 28 20:28:47 2001 from localbox.gentoo.org

Welcome to remotebox!

$
</pre>

<p>
Chociaż może się to wydać zachęcające, nie należy tworzyć niezaszyfrowanych
kluczy bez pełnego zrozumienia ich wpływu na bezpieczeństwo. Każdy, kto włamie
się na <e>localbox</e> automatycznie uzyska dostęp do <e>remotebox</e> i
wszystkich innych systemów z umieszczonym odpowiednim kluczem publicznym.
</p>

<p>
Okazuje się, że <e>istnieje lepszy sposób</e>! Pokażę jak skorzystać z wygód
bezhasłowej autoryzacji bez narażania bezpieczeństwa.  Wykorzystamy w tym celu
<c>ssh-agent</c> (o którym więcej napiszę w kolejnym artykule). Oto instrukcje
krok po kroku.
</p>

</body>
</section>
<section>
<title>Generowanie pary kluczy RSA</title>
<body>

<p>
Aby skonfigurować autoryzację RSA, należy wygenerować parę kluczy. W tym celu
wystarczy wpisać:
</p>

<pre caption="Generowanie kluczy...">
$ <i>ssh-keygen</i>
</pre>

<p>
Akceptujemy domyślne położenie kluczy (zazwyczaj <path>~/.ssh/identity</path>
oraz <path>~/.ssh/identity.pub</path>) i podajemy bezpieczne passphrase.
</p>

</body>
</section>
<section>
<title>Instalacja klucza publicznego RSA</title>
<body>

<p>
Następnie musimy skonfigurować zdalne systemy z <c>sshd</c> aby mogły
wykorzystać do autoryzacji nasz klucz publiczny. Zazwyczaj wystarczy go
skopiować następującym poleceniem:
</p>

<pre caption="Kopiowanie klucza publicznego">
$ <i>scp ~/.ssh/identity.pub drobbins@remotebox:</i>
</pre>

<p>
Ponieważ autoryzacja RSA nie została jeszcze w pełni skonfigurowana, zostaniemy
zapytani o hasło. Następnie musimy się zalogować na <e>remotebox</e> i dopisać
nasz klucz do pliku <path>~/.ssh/authorized_keys</path>:
</p>

<pre caption="Instalacja klucza publicznego">
$ <i>ssh drobbins@remotebox</i>
drobbins@remotebox's password: <comment>(podaj hasło)</comment>
Last login: Thu Jun 28 20:28:47 2001 from localbox.gentoo.org

Welcome to remotebox!

$ <i>cat identity.pub >> ~/.ssh/authorized_keys</i>
$ <i>exit</i>
</pre>

<p>
Przy kolejnych próbach logowania z <e>remotebox</e>, <c>ssh</c> powinno już nie
pytać o <e>hasło</e>, a o <e>passphrase</e>.
</p>

<pre caption="Logowanie za pomocą klucza RSA">
$ <i>ssh drobbins@remotebox</i>
Enter passphrase for key '/home/drobbins/.ssh/identity':
</pre>

<p>
Hurra, konfiguracja RSA gotowa! Jeśli ssh wciąż nie pyta o passphrase, mamy
kilka możliwości. Po pierwsze, można spróbować się zalogować poleceniem <c>ssh
-1 drobbins@remotebox</c>, które każe ssh korzystać jedynie z wersji 1
protokołu ssh i może być potrzebne, jeśli zdalny system domyślnie oczekuje
autoryzacji DSA. Gdy to nie pomoże, należy upewnić się, że w pliku
<path>/etc/ssh/ssh_config</path> nie ma linii <e>RSAAuthentication no</e>.
Jeżeli jest, wystarczy ją odkomentować, wstawiając na początku znak "#". Jeśli
i to nie pomoże, należy skontaktować się z administratorem <e>remotebox</e> i
upewnić, że odpowiednio skonfigurował RSA w <path>/etc/ssh/sshd_config</path>.
</p>

</body>
</section>
<section>
<title>Generowanie kluczy DSA</title>
<body>

<p>
Podczas gdy klucze RSA są używane przez wersję 1 protokołu <c>ssh</c>,
zaktualizowana wersja 2 korzysta z kluczy DSA. Każda w miarę aktualna wersja
OpenSSH powinna obsługiwać oba rodzaje kluczy. Wygenerowanie kluczy DSA
programem <c>ssh-keygen</c> wygląda podobnie do generowania kluczy RSA:
</p>

<pre caption="Generowanie kluczy DSA">
$ <i>ssh-keygen -t dsa</i>
</pre>

<p>
Tutaj również zostaniemy zapytani o passphrase. Warto wybrać bezpieczne.
Ponadto zostaniemy zapytani o położenie nowych kluczy. Opcja domyślna,
zazwyczaj <path>~/.ssh/id_dsa</path> oraz <path>~/.ssh/id_dsa.pub</path>,
powinna wystarczyć. Po ukończeniu jednorazowej generacji, klucz publiczny
trzeba umieścić na zdalnych systemach.
</p>

</body>
</section>
<section>
<title>Instalacja klucza publicznego DSA</title>
<body>

<p>
Instalacja klucza publicznego DSA wygląda niemal identycznie jak w przypadku
RSA. Należy skopiować plik <path>~/.ssh/id_dsa.pub</path> na <e>remotebox</e> i
umieścić go tam w <path>~/.ssh/authorized_keys2</path>. Tym razem plik ten ma
inną nazwę niż dla RSA. Po zainstalowaniu klucza, do zalogowania na
<e>remotebox</e> zamiast hasła, trzeba podać passphrase.
</p>

<note>
Obecnie należy używać wyłącznie wersji 2 protokołu ssh, gdyż jest
bezpieczniejsza.
</note>

</body>
</section>
<section>
<title>W następnej części</title>
<body>

<p>
Teraz autoryzacja RSA lub DSA powinna być skonfigurowana, jednakże wciąż
musimy podawać passphrase przy każdym połączeniu. W kolejnym artykule pokażę
jak korzystać z <c>ssh-agent</c>, wygodnego systemu umożliwiającego
nawiązywanie połączeń <e>bez</e> podawania hasła, jednocześnie wykorzystując
zaszyfrowane klucze prywatne. Ponadto zaprezentuję <c>keychain</c>, bardzo
użyteczną nakładkę na <c>ssh-agent</c>, która dodatkowo zwiększa bezpieczeństwo
oraz wygodę. Tymczasem warto przejrzeć poniższe zasoby.
</p>

</body>
</section>
</chapter>
<chapter id="resources">
<title>Zasoby</title>
<section>
<body>

<ul>
  <li>
    Kolejne artykuły Daniela w serii: <uri
    link="/doc/pl/articles/openssh-key-management-p2.xml">Zarządzanie kluczami
    OpenSSH, część druga</uri> oraz <uri
    link="/doc/en/articles/openssh-key-management-p3.xml">Zarządzanie kluczami
    OpenSSH, część trzecia</uri>
  </li>
  <li>
    Strona domowa <uri link="http://www.openssh.com">OpenSSH</uri>
  </li>
  <li>
    <uri link="http://www.openssh.com/faq.html">OpenSSH FAQ</uri>.
  </li>
  <li>
    <uri link="http://www.chiark.greenend.org.uk/~sgtatham/putty/">PuTTY</uri>
    to świetny klient <c>ssh</c> dla Windows
  </li>
  <li>
    Książka wydawnictwa O'Reilly <e>SSH, The Secure Shell: The Definitive
    Guide</e>. <uri link="http://www.snailbook.com/">Strona autorów</uri>
    zawiera informacje o książce, FAQ, aktualności oraz uaktualnienia.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
