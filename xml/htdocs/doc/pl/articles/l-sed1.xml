<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/www/www.gentoo.org/raw_cvs/gentoo/xml/htdocs/doc/en/articles/l-sed1.xml,v 1.
2 2005/08/15 21:00:31 cam Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/articles/l-sed1.xml" lang="pl" disclaimer="articles">
<title>Sed w przykładach, część pierwsza</title>

<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Tłumaczenie">
  <mail link="keidii@gmail.com">Tomasz Bukowski</mail>
</author>

<abstract>
W tej serii artykułów Daniel Robbins pokaże, jak używać porządnego (choć często
zapominanego) UNIX-owego edytora strumieniowego - sed. Sed jest doskonałym
narzędziem do edycji plików, którego można wykorzystać w konsoli oraz
wszelkiego rodzaju skryptach.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.3</version>
<date>2005-10-09</date>

<chapter>
<title>Poznać porządny UNIX-owy edytor</title>
<section>
<title>Wybierz edytor...</title>
<body>

<p>
W świecie UNIX-ów mamy spory wybór jeżeli chodzi o edycję plików. Jest vi,
emacs, jed i masa innych. Każdy ma swój ulubiony edytor. Z jego pomocą z
łatwością poradzi sobie z zadaniami jakie czekają podczas programowania, czy
administracji UNIX-em.
</p>

<p>
Edytory interaktywne są świetne, ale mają pewne ograniczenia. Ich główna cecha
- oddziaływanie przez użytkownika podczas edycji - może okazać się ich
słabością. Szczególnie w sytuacji, gdy potrzebujemy wprowadzić małe zmiany w
pewnej grupie plików. Wypada wtedy za każdym razem odpalać nasz edytorek,
wprowadzić żądane zmiany - wszystko ręcznie. Ale istnieje lepsze rozwiązanie
...
</p>

</body>
</section>
<section>
<title>Przedstawienie Seda</title>
<body>

<p>
Było by miło, gdyby można było zautomatyzować proces edycji istniejących plików
przez polecenie w konsoli lub napisanie prostego skryptu. Na szczęście w takich
sytuacjach istnieje lepsza droga niż ręczna edycja - sed.
</p>

<p>
sed jest małym edytorem strumieniowym, który można znaleźć we wszelkiej maści
UNIX-ach (czyli także w Linuksie). Sed ma wiele przydatnych funkcji. Po
pierwsze zajmuje naprawdę niewiele. Po drugie jest to edytor strumieniowy,
dzięki czemu można przeprowadzać edycję na danych otrzymanych z stdin (takich
jak pipe). Nie jest konieczne, aby te dane były zapisywane na dysku. Ponieważ
dane można łatwo "wpuścić" przez strumień wejścia do seda, łatwe staje się
używanie seda pod konsolą lub skryptach. Spróbuj zrobić to samo ze swoim
ulubionym edytorem...
</p>

</body>
</section>
<section>
<title>GNU sed</title>
<body>

<p>
Dobrą wiadomością dla użytkowników Linuksa jest to, że jedna z lepszych wersji
seda wydana jest jako GNU sed. Każda dystrybucja Linuksa zawiera seda (lub
chociaż powinna). Na popularność GNU seda wpływa nie tylko jego otwarty
charakter, ale również fakt, że zawiera wiele rozszerzeń które oszczędzają
sporo czasu. GNU sed jest także pozbawiony wielu ograniczeń, które miała
wcześniejsza i główna wersja (np: limit długości wiersza - GNU sed poradzi
sobie z linią każdej długości. ;)
</p>

</body>
</section>
<section>
<title>Najnowszy GNU sed</title>
<body>

<p>
Podczas pisania tego artykułu zauważyłem, że niektóre serwisy internetowe
odwołują się do wersji 3.02a GNU seda. Co dziwne - nie mogłem znaleźć jej na
<uri>ftp://ftp.gnu.org</uri> (patrz <uri link="#materiały">materiały</uri>).
Szukając w innych źródłach, znalazłem tę wersję na
<uri>ftp://alpha.gnu.org</uri> w <path>/pub/sed</path>. Szczęśliwy ściągnąłem,
skompilowałem i zainstalowałem tą wersję. Jak okazało się tylko po to, aby za
parę minut okazało się, że najnowszą wersją seda jest 3.02.80. Można ją znaleźć
tuż obok 3.02a na <uri>ftp://alpha.gnu.org</uri>. W końcu po zainstalowaniu
wersji 3.02.80 byłem gotowy do pracy.
</p>

</body>
</section>
<section>
<title>Praca z sedem na całego</title>
<body>

<p>
W tej serii artykułów będziemy używać GNU sed 3.02.80. Niektóre z przykładów
mogą nie działać poprawnie na starszych wersjach GNU sed. W przypadku używania
nie-GNU seda można napotkać spore utrudnienia. Wystarczy poświęcić trochę czasu
na zainstalowanie najnowszej wersji GNU seda. ;) Można zyskać nie tylko pewność,
że zadziałają wszystkie przykłady, ale i dostać do użytku najlepszą wersję
wspaniałego edytora tekstu.
</p>

</body>
</section>
<section>
<title>Przykłady użycia seda</title>
<body>

<p>
Sed działa poprzez poddawanie edycji danych wejściowych w sposób jaki zażąda
tego użytkownik. Komendy i akcje w sedzie podejmowane są dla każdego wiersza po
kolei. Wyrzuca on rezultat pracy na standardowe wyjście (stdout), nie
modyfikując oryginalnych plików wejściowych.
</p>

<p>
Rzućmy okiem na parę przykładów. W pierwszym przykładzie pokażę po prostu jak
działa sed. Na początku ważne jest zrozumienie sposobu działania seda, później
przyjdzie czas na jego efektywne wykorzystanie. Oto pierwszy przykład:
</p>

<pre caption="Przykład użycia seda">
$ <i>sed -e 'd' /etc/services</i>
</pre>

<p>
Jeżeli wykonamy to polecenie, nie otrzymamy nic na wyjściu. Dlaczego?  W tym
przykładzie wywołaliśmy seda z jednym z poleceń edycyjnych - <c>d</c> Sed
otworzy plik <path>/etc/services</path>, wczyta wiersz do bufora, wykona
wskazane operacje (u nas "d" - usuń wiersz), i wypisze zawartość bufora (w
naszym przykładzie bufor będzie pusty!). Takie czynności będą powtarzane
dla każdego kolejnego wiersza. Nie otrzymamy nic na wyjściu, ponieważ za pomocą
polecenia <c>d</c> usunęliśmy każdy wiersz!
</p>

<p>
Jest jeszcze parę spraw do omówienia w tym przykładzie. Po pierwsze - plik
<path>/etc/services</path> nie został tak naprawdę zmodyfikowany. Stało się
tak, ponieważ sed tylko czyta z pliku - używa go jako wejścia danych nie
próbując go modyfikować. Drugą sprawą jest fakt, że sed jest zorientowany
wierszowo.  Polecenie <c>d</c> nie oznaczało po prostu usunięcie wszystkiego
naraz - sed wczytywał linijkę po linijce do bufora (zwanego buforem wzorca), a
następnie wykonywał polecenie <c>d</c> i wypisywał zawartość bufora (u nas
nic). Później dowiemy się w jaki sposób używać adresowania zakresów aby móc
kontrolować dla których wierszy zostanie wykonane polecenie <c>d</c>.
</p>

<p>
Trzecią rzeczą o której należy wspomnieć, jest zamknięcie polecenia <c>d</c> w
pojedynczych apostrofach. Takie zamykanie poleceń w sedzie jest dobrym
zwyczajem i nie powoduje kolizji z poleceniami konsolowymi.
</p>

</body>
</section>
<section>
<title>Inny przykład zastosowania seda</title>
<body>

<p>
Oto przykład użycia seda do usunięcia pierwszej linii z pliku
<path>/etc/services</path>:
</p>

<pre caption="Inny przykład zastosowania seda">
$ <i>sed -e '1d' /etc/services | more</i>
</pre>

<p>
Jak łatwo zauważyć, polecenie to jest bardzo podobne do użytego wcześniej
<c>d</c> z wyjątkiem tego, że zawiera ono teraz <c>1</c>.  Tym razem użyliśmy
polecenia <c>d</c> poprzedzonego adresem. Poprzez użycie adresowania możemy
przeprowadzić edycję tylko wybranych linii.
</p>

</body>
</section>
<section>
<title>Adresowanie</title>
<body>

<p>
Spróbujmy teraz przyjrzeć się w jaki sposób zaadresować pewien zakres. W tym
przykładzie użyjemy seda do usunięcia linijek od 1 do 10 :
</p>

<pre caption="Adresowane zakresu">
$ <i>sed -e '1,10d' /etc/services | more</i>
</pre>

<p>
Kiedy oddzielamy dwa adresy przecinkiem sed traktuje to jako zakres na którym
przeprowadzi żądane operacje. Zakres rozpoczyna się od pierwszego adresu,
kończy na drugim. W przykładzie polecenie <c>d</c> zostało zastosowane dla
wierszy od 1 do 10 włącznie. Inne wiersze zostały pominięte.
</p>

</body>
</section>
<section>
<title>Adresowanie z pomocą wyrażeń regularnych</title>
<body>

<p>
Nadszedł czas na bardziej zaawansowany przykład. Powiedzmy, że chcemy obejrzeć
plik <path>/etc/services</path>, ale nie jesteśmy zainteresowani oglądaniem
komentarzy. Jak wiadomo komentarze w pliku <path>/etc/services</path>, to linie
zaczynające się od znaku '#'. Aby pominąć komentarze wystarczy usunąć każdą
linijkę zaczynającą się od znaku '#'. Można to zrobić tak :
</p>

<pre caption="Usuwanie linii zaczynających się od #">
$ <i>sed -e '/^#/d' /etc/services | more</i>
</pre>

<p>
Odpalmy ten przykład i zobaczmy co otrzymamy. Zauważymy, że sed wykonał swoje
zadanie poprawnie.
</p>

<p>
Aby zrozumieć składnię '/^#/d' podzielmy to polecenie na kawałki.  Najpierw
usuńmy 'd' --  tak jak było to powiedziane wcześniej, jest to kasowanie
wiersza. Zostaje nam '/^#/' - jest to nowy rodzaj adresowania z użyciem wyrażeń
regularnych. Takie wyrażenie jest zawsze zamknięte między '/'.  Definiuje ono
wzorzec, a do wszystkich pasujących linii zostanie zastosowane polecenie
znajdujące się za nim (u nas 'd' - usunięcie)
</p>

<p>
Więc '/^#/' jest wyrażeniem regularnym. Ale co to robi? To chyba jest
odpowiedni moment, aby opowiedzieć szerzej o wyrażeniach regularnych.
</p>

</body>
</section>
<section>
<title>Odświezenie wiadomości o wyrażeniach regularnych</title>
<body>

<p>
Można użyć wyrażeń regularnych, aby określić wzorzec, który chcemy znaleźć w
tekście. Jeżeli ktoś używał znaku '*' w konsoli - używał czegoś co jest podobne
do wyrażeń regularnych. Poniżej znajduje się lista specjalnych znaków, które
mogą zostać użyte w wyrażeniach.
</p>

<table>
  <tr>
    <th>Znaki</th>
    <th>Opis</th>
  </tr>
  <tr>
    <ti>^</ti>
    <ti>Oznacza początek wiersza</ti>
  </tr>
  <tr>
    <ti>$</ti>
    <ti>Oznacza koniec wiersza</ti>
  </tr>
  <tr>
    <ti>.</ti>
    <ti>Oznacza pojedynczy znak</ti>
  </tr>
  <tr>
    <ti>*</ti>
    <ti>Oznacza zero lub więcej wystąpień poprzedniego znaku</ti>
  </tr>
  <tr>
    <ti>[ ]</ti>
    <ti>Wszystkie znaki pomiędzy [ i ]</ti>
  </tr>
</table>

<p>
Chyba najlepszym sposobem na sprawne wejście w świat wyrażeń regularnych jest
zobaczenie kilku przykładów w akcji. Wszystkie będą zaakceptowane przez seda jako
poprawny sposób adresowania. Oto kilka przykładów:
</p>

<table>
  <tr>
    <th>Wyrażenie regularne</th>
    <th>Opis</th>
  </tr>
  <tr>
    <ti>/./</ti>
    <ti>Oznacza wiersz, który zawiera co najmniej jeden znak</ti>
  </tr>
  <tr>
    <ti>/../</ti>
    <ti>Oznacza wiersz zawierający przynajmniej dwa znaki</ti>
  </tr>
  <tr>
    <ti>/^#/</ti>
    <ti>Oznacza wiersz zaczynający sie od '#'</ti>
  </tr>
  <tr>
    <ti>/^$/</ti>
    <ti>Oznacza wiersz pusty</ti>
  </tr>
  <tr>
    <ti>/}^/</ti>
    <ti>Oznacza wiersz, który kończy się '}' (bez spacji)</ti>
  </tr>
  <tr>
    <ti>/} *^/</ti>
    <ti>Oznacza wiersz kończący się '}' po której występuje zero lub więcej
    spacji</ti>
  </tr>
  <tr>
    <ti>/[abc]/</ti>
    <ti>Oznacza wiersz zawierający 'a', 'b' lub  'c'</ti>
  </tr>
  <tr>
    <ti>/^[abc]/</ti>
    <ti>Oznacza wiersz, która zaczyna ię od 'a', 'b' lub 'c'</ti>
  </tr>
</table>

<p>
Zachęcam do wypróbowania kilku przykładów na własnej skórze. Potrzeba trochę
czasu na oswojenie się z wyrażeniami regularnymi. A oto sposób ich poprawnego
użycia:
</p>

<pre caption="Poprawne użycie wyrażenia regularnego">
$ <i>sed -e '/regexp/d' /sciezka/do/mojego/testowego/pliku | more</i>
</pre>

<p>
To spowoduje, że sed usunie każdy wiersz pasujący do wzorca. Jednak łatwiej było
by wypisać pasujące wiersze, a te nie pasujące usunąć. Można tego dokonać
poleceniem:
</p>

<pre caption="Wypisywanie pasujących wierszy">
$ <i>sed -n -e '/regexp/p' /sciezka/do/mojego/pliku | more</i>
</pre>

<p>
Zwróćmy uwagę na nową opcję, '-n', która nakazuje sedowi nie wypisywać wzorca,
dopóki nie zostanie wydane odpowiednie polecenie. Łatwo także zauważyć, że
zastąpiliśmy <c>d</c> poleceniem <c>p</c>, które to nakazuje sedowi wypisanie
wiersza pasującego do wzorca.
</p>

</body>
</section>
<section>
<title>Więcej o adresowaniu</title>
<body>

<p>
Na razie powiedzieliśmy parę słów o adresowaniu wierszy, adresowaniu zakresów i
wykorzystaniu wyrażeń regularnych do adresowania, ale możliwości jest więcej.
Można zdefiniować dwa wyrażenia regularne oddzielone przecinkiem, a sed edytuje
wszystkie wiersze znajdujące się między pierwszym a drugim wyrażeniem włącznie.
Na przykład następujące polecenie wyświetli blok tekstu zaczynający się od
wiersza zawierającego "POCZATEK", a skończywszy na wierszu zawierającym
"KONIEC":
</p>

<pre caption="Wyświetlenie opisanego bloku tekstu">
$ <i>sed -n -e '/POCZATEK/,/KONIEC/p' /moj/plik | more</i>
</pre>

<p>
Jeżeli "POCZATEK" nie zostanie odnaleziony nic nie zostanie wyświetlone.
Natomiast jeżeli sed odnajdzie "POCZATEK", ale nie odnajdzie "KONIEC",
otrzymamy wszystkie wiersze od miejsca odnalezienia do końca. Dzieje się tak,
ponieważ sed jest zorientowany strumieniowo - więc nigdy nie wie kiedy nastąpi
"KONIEC".
</p>

</body>
</section>
<section>
<title>Przykład ze źródłami C</title>
<body>

<p>
Jeżeli ktoś chciałby zobaczyć jedynie zawartość funkcji main() w pliku
źródłowym C, może napisać:
</p>

<pre caption="Podgląd funkcji main() z pliku źródłowego C">
$ <i>sed -n -e '/main[[:space:]]*(/,/^}/p' zlodlo.c | more</i>
</pre>

<p>
Polecenie zawiera dwa wyrażenia regularne '/main[[:space:]]*(/' i '/^}/' oraz
polecenie <c>p</c>. Pierwsze wyrażenie regularne oznacza, że sed będzie szukał
ciągu znaków "main" po którym może wystąpić dowolna ilość spacji i tabulatorów
oraz otwarty nawias "(". To powinno nam pozwolić na znalezienie deklaracji
funkcji main() zgodnie z ANSI C.
</p>

<p>
W tym wyrażeniu regularnym wystąpiła klasa znaków '[[:space:]]'.  Jest to po
prostu specjalne słowo-klucz które mówi sedowi aby brał pod uwagę TAB lub
spacje. Zamiast pisać '[[:space:]]' można napisać '[', CTRL+V, tabulator i ']',
ale chyba bardziej czytelna jest klasa znaków '[[:space:]]'.
</p>

<p>
Przejdźmy teraz do drugiego wyrażenia :'/^}/'. Sed będzie szukał znaku '}' na
początku wiersza. Jeżeli plik źródłowy jest poprawnie sformatowany, sed
powinien znaleźć zamykający nawias '}' funkcji main(). Jeżeli nie znajdzie -
będzie wypisywał wszystko aż do końca pliku - taki jego urok.
</p>

<p>
Polecenie <c>p</c> robi to co zawsze - nakazuje sedowi wypisać linijkę (od
kiedy mamy tryb "cichy" -n). Polecam wypróbowanie tego przykładu na kilku
plikach C - powinniśmy dostać zawartość funkcji main() z "mian()" i "}"
włącznie.
</p>

</body>
</section>
<section>
<title>W następnym odcinku</title>
<body>

<p>
Na razie przedstawiłem tylko podstawy seda. Temat ten rozwinę w dwóch
następnych. Polecam również lekturę materiałów na temat seda i wyrażeń
regularnych, których lista znajduje się poniżej.
</p>

</body>
</section>
</chapter>

<chapter id="materiały">
<title>Materiały</title>
<section>
<title>Linki:</title>
<body>

<ul>
  <li>
    Warto przeczytać pozostałe artykuły Daniela na temat seda, napisane dla
    develperWorks: Sed w przykładach, <uri
    link="/doc/pl/articles/l-sed2.xml">Część druga</uri> i <uri
    link="/doc/en/articles/l-sed3.xml">Część trzecia</uri>.
  </li>
  <li>
    Eric Pement napisał znakomity dokument <uri
    link="http://www.student.northpark.edu/pemente/sed/sedfaq.html">FAQ na
    temat seda</uri>.
  </li>
  <li>
    Tu można znaleźć źródła seda: <uri>ftp://ftp.gnu.org/pub/gnu/sed</uri>.
  </li>
  <li>
    Najnowsza wersja dostępna jest na stronie <uri>ftp://alpha.gnu.org</uri>.
  </li>
  <li>
    Na stronie Erica Pementa można znaleźć również przydatny zestaw <uri
    link="http://www.student.northpark.edu/pemente/sed/sed1line.txt">jednolinijkowych
    skryptów w sedzie</uri>, którymi powinien zainteresować się każdy, kto
    chciałby zostać autorytetem w dziedzinie tego języka.
  </li>
  <li>
    Dla tych, którzy preferują klasyczne książki znakomitym wyborem będzie <uri
    link="http://www.oreilly.com/catalog/sed2/">"sed i awk" z wydawnictwa
    O'Reilly</uri>.
  </li>
<!-- FIXME BOTH DEAD and not possible to find other locations, sorry
 <li>
    Maybe you'd like to read <uri
    link="http://www.softlab.ntua.gr/unix/docs/sed.txt">7th edition UNIX's sed
    man page</uri> (circa 1978!).
  </li>
  <li>
    Take Felix von Leitner's short <uri
    link="http://www.math.fu-berlin.de/~leitner/sed/tutorial.html">sed
    tutorial</uri>.
  </li>
-->
  <li>
    Artykuł Davida Mertza na temat <uri
    link="http://www-106.ibm.com/developerworks/linux/library/l-python5.html">
    przetwarzania tekstu w Pythonie</uri>.
  </li>
  <li>
    <uri link="http://vision.eng.shu.ac.uk/C++/misc/regexp/">Używanie wyrażeń
    regularnych</uri> w tekście - darmowy samouczek.
  </li>
  <li>
    <uri link="http://www.python.org/doc/howto/regex/regex.html">How-to</uri>
    na temat wyrażeń regularnych z <uri
    link="http://python.org">Python.org</uri>.
  </li>
  <li>
    Przydatny <uri
    link="http://www.uky.edu/ArtsSciences/Classics/regex.html">przegląd
    wyrażeń regularnych</uri> na Uniwersytecie w Kentucky.
  </li>
</ul>

</body>
</section>
</chapter>

</guide>
