<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- Orig revision: 1.10 -->
<!-- Translator: Jerzy Pawelec <niegdysiejszy.blondyn@interia.pl> -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/devfs-guide.xml,v 1.3 2005/07/04 12:42:35 neysx Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license-->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<guide link="/doc/pl/devfs-guide.xml" lang="pl">

<title>System plików urządzeń (Device File System)</title>

<author title="Author">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>

<author title="Reviewer">
  <mail link="seemant@gentoo.org">Seemant Kulleen</mail>
</author>

<author title="Tłumacz">
  Jerzy Pawelec
</author>

<abstract>
Z tego dokumentu dowiemy się co to jest devfs i jak z nim pracować.
</abstract>

<license/>

<version>0.4</version>
<date>2005-06-20</date>

<chapter>
<title>Co to jest devfs?</title>
<section>
<title>Stare (dobre?) czasy</title>
<body>

<warn>
devfs jest <e>przestarzały</e> i zostanie wkrótce usunięty ze źródeł kernela
serii 2.6. Użytkownicy jąder 2.6 powinni przemigrować na system udev. Informacje
o nim można znaleźć w <uri link="/doc/pl/udev-guide.xml">udev guide</uri>.
</warn>


<p>
Tradycyjne implementacje Linuxa dostarczają użytkownikom abstrakcyjną ścieżkę
urządzeń nazwaną <path>/dev</path>. Wewnątrz tej ścieżki użytkownik znajdzie
<e>device nodes</e>, specjalne pliki, które reprezentują urządzenia w systemie.
Na przykład, <path>/dev/hda</path> reprezentuje pierwsze urządzenie
IDE w systemie. Dzięki udostępnieniu plików urządzeń użytkownikom, można zamiast
tworzyć specjalne API, tworzyć programy, które współdziałają z hardwarem tak, jakby
urządzenia były zwykłymi plikami.
</p>

<p>
Pliki urządzeń podzielone są na dwie grupy, nazwane urządzeniami <e>znakowymi</e>
i urządzeniami <e>blokowymi</e>. Pierwsza grupa składa się z urządzeń, do
których czytanie/pisanie nie jest buforowane. Naturalnie, druga grupa składa się
z urządzeń, do których czytanie/pisanie jest buforowane. Z obu urządzeń można
czytać dane w blokach lub znak po znaku. Dlatego też, ich nazwy mogą wprowadzać w
błąd i istocie są złe.
</p>

<p>
Jeśli zajrzysz do jakiegoś pliku urządzenia, znajdziesz w nim coś takiego:
</p>
<pre caption = "Sprawdzenie informacji w pliku urządzenia">
# <i>ls -l /dev/hda</i>
brw-rw----    1 root     disk       3,   0 Jul  5  2000 /dev/hda
</pre>

<p>
W poprzednim przykładzie dowiedzieliśmy się, że <path>/dev/hda</path> jest urządzeniem
blokowym. Ważniejsze jednak jest, że są do niego przypisane dwie specjalne
liczby: <path>3, 0</path>. Para ta nazywana jest parą <e>major-minor</e>.
Używana jest przez jądro, do przypisania pliku urządzenia do urządzenia
rzeczywistego. Major odpowiada pewnemu urządzeniu, minor urządzeniu podrzędnemu.
Dziwne? Wcale nie.
</p>

<p>
Przykładami niech będą <path>/dev/hda4</path> i <path>/dev/tty5</path>. Pierwszy
plik odpowiada czwartej partycji na pierwszym urządzeniu IDE. Jego
parą major-minor jest <path>3, 4</path>. Innymi słowy, minor odpowiada partycji,
a major odpowiada urządzeniu. Drugi przykład ma <path>4, 5</path>, jako parę
major-minor. W tym przypadku major odpowiada driverowi terminala, a minor
odpowiada numerowi terminala (w tym przypadku piąty terminal).
</p>

</body>
</section>
<section>
<title>Problemy</title>
<body>

<p>
Jeśli rzucisz okiem na katalog <path>/dev</path>, zobaczysz, że są tam nie tylko
wszystkie twoje urządzenia, ale <e>wszystkie</e> możliwe urządzenia, jakie
możesz sobie wyobrazić. Innymi słowy, znajdziesz tam pliki dla urządzeń, których
w ogóle nie masz. Administrowanie taką grupą urządzeń jest co najmniej niezręczne.
Wyobraź sobie, że masz zmienić prawa dostępu do wszystkich plików urządzeń, które
mają odpowiadające im urządzenia w systemie, a resztę plików zostawić, jakimi
są.
</p>

<p>
Jeśli dodajesz nowy sprzęt do swojego systemu, a nie miał on wcześniej pliku
urządzenia, musisz go utworzyć. Zaawansowani użytkownicy wiedzą, że zadanie to
można wykonać  przy pomocy <c>./MAKEDEV</c> w drzewie <path>/dev</path>, ale czy
od razu wiesz, jakie urządzenie utworzyć?
</p>

<p>
Jeśli masz programy współdziałające ze sprzętem używającym plików urządzeń, nie
możesz zamontować partycji głównej tylko to odczytu, chcąc zamontować ją później
do odczytu i zapisu. Nie możesz mieć też <path>/dev</path> na oddzielnej
partycji, bo <c>mount</c> potrzebuje <path>/dev</path> do zamontowania partycji.
</p>

</body>
</section>
<section>
<title>Rozwiązania</title>
<body>

<p>
Jak możesz sobie wyobrazić, hakerzy znaleźli sporo rozwiązań powyższych
problemów. Jednak wiele z nich ma inne usterki, co opisano w
<uri>http://www.atnf.csiro.au/people/rgooch/linux/docs/devfs.html#faq-why</uri>.
Nie chcemy rozprawiać o tych implementacjach, ale wskazać na jedną z nich, która
znajduje się w oficjalnych źródłach jądra: devfs.
</p>

</body>
</section>
<section>
<title>devfs zwycięzca wszechwag?</title>
<body>

<p>
devfs rozwiązuje wszystkie opisane problemy. Dostarcza użytkownikowi tylko
istniejące urządzenia, dodaje nowe węzły, jeśli znaleziono nowe urządzenia i
umożliwia zamontowanie głównego systemu plików tylko do odczytu. Rozwiązuje jeszcze wiele
problemów, o których nie mówiliśmy wcześniej, bo są mniej interesujące dla
użytkowników...
</p>

<p>
Na przykład, z devfs, nie musisz się martwić o pary major/minor.
Dalej są obsługiwane (dla zgodności wstecz), ale nie są wymagane.
Umożliwia to Linuksowi obsługę jeszcze większej ilości urządzeń,
ponieważ nie ma już ograniczeń (liczby zawsze mają granice :)
</p>

<p>
Choć devfs ma swoje własne problemy; dla użytkowników końcowych nie są one w
istocie widoczne, ale dla programiści jądra uznali te problemy za wystarczająco
duże, aby oznaczyć devfs jako <e>obsolete</e> na korzyść <uri
link="udev-guide.xml">udev</uri> (które Gentoo też obsługuje) i który jest
domyślny na większości architektur dla jądra 2.6, począwszy od wydania 2005.0.
</p>

<p>
Więcej informacji, dlaczego devfs jest oznaczone jako przestarzałe, przeczytaj w <uri
link="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev-FAQ">udev
FAQ</uri> and <uri
link="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev_vs_devfs">udev
versus devfs document</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Nawigacja w drzewie urządzeń</title>
<section>
<title>Katalogi</title>
<body>

<p>
Jedną z pierwszych rzeczy jakie możesz zauważyć jest, że devfs używa katalogów
do grupowania urządzeń. Zwiększa to czytelność, ponieważ wszystkie związane ze sobą
urządzenia są wewnątrz wspólnego katalogu.
</p>

<p>
Na przykład, wszystkie związane poprzez IDE urządzenia są w katalogu
<path>/dev/ide/</path>, a urządzenia SCSI są w <path>/dev/scsi/</path>.
Dyski SCSI i IDE są widziane w ten sam sposób, co oznacza, że mają takie
same struktury podkatalogów.
</p>

<p>
Dyskami IDE i SCSI zarządza adapter (na płycie albo oddzielnej karcie),
nazywany <e>hostem</e>. Każdy adapter może mieć kilka kanałów.
Kanał nazywany jest <e>bus</e>. Na każdym kanale możesz być kilka ID. Takie ID identyfikuje dysk. ID nazywane jest <e>target</e>.
Niektóre urządzenia SCSI mogą mieć wielokrotne luns (<e>Logical Unit
Numbers - Numer logiczny jednostki</e>), na przykład  urządzenia obsługujące jednocześnie madia
wielokrotne (hi-end tapedrives). Najczęściej masz tylko pojedynczy lun, <path>lun0/</path>.
</p>

<p>
Poprzednio używaliśmy <path>/dev/hda4</path>, a teraz mamy
<path>/dev/ide/host0/bus0/target0/lun0/part4</path>. To jest daleko prostsze...
nie, nie kłóć się ze mną... to <e>jest</e> łatwiejsze... jednak!
:)
</p>

<note>
Możesz też używać dla dysków nazewnictwa bardziej Unixo-podobnego, takiego jak
<path>c0b0t0u0p2</path>. Mogą być one znalezione w <path>/dev/ide/hd</path>,
<path>/dev/scsi/hd</path> etc.
</note>

<p>
Aby dać ci pojęcie o katalogach, pokażę ci listing katalogów na moim laptopie:
</p>

<pre caption = "Katalogi w /dev">
cdroms/     cpu/        discs/          floppy/
ide/        input/      loop/           misc/
netlink/    printers/   pts/            pty/
scsi/       sg/         shm/            sound/
sr/         usb/        vc/             vcc/
</pre>

</body>
</section>
<section>
<title>Zgodność wstecz, przy użyciu devfs</title>
<body>

<p>
Używanie nowego schematu wygląda dziwnie, ale część narzędzi i programów używa
poprzedniego, starego schematu. Aby zapewnić, że żaden system nie padnie,
stworzony został program <c>devfsd</c>. Demon ten tworzy dowiązania symboliczne ze
starymi nazwami, wskazujące na nowe plików urządzeń.
</p>

<pre caption="Utworzone dowiązania symboliczne">
$ <i>ls -l /dev/hda4</i>
lr-xr-xr-x    1 root     root           33 Aug 25 12:08 /dev/hda4 -> ide/host0/bus0/target0/lun0/part4
</pre>

<p>
Przy pomocy <c>devfsd</c>, możesz również ustawić prawa dostępu, utworzyć pliki
nowych urządzeń, określić działania, itd. To wszystko zostanie opisane w następnym rozdziale.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Administrowanie drzewem urządzeń</title>
<section>
<title>Ponowne uruchomienie devfsd</title>
<body>

<p>
Gdy zmieniasz plik <path>/etc/devfsd.conf</path> i chcesz, aby zmiany zostały
przekazane do systemu, nie musisz go uruchamiać ponownie.
Zależnie od tego, czego oczekujesz, możesz użyć jednego z dwóch następujących
sygnałów:
</p>

<p>
<b>SIGHUP</b> ponownie przeczyta pliki konfiguracji <c>devfsd</c>, załaduje
ponownie obiekty dzielone i wygeneruje zdarzenia REGISTER dla każdego wierzchołka w drzewie
urządzeń.
</p>

<p>
<b>SIGUSR1</b> zrobi to samo, ale nie wygeneruje zdarzeń REGISTER.
</p>

<p>
Aby wysłać sygnał, użyj po prostu <c>kill</c> albo <c>killall</c>:
</p>

<pre caption = "Wysyłanie sygnału SIGHUP do devfsd">
# <i>kill -s SIGHUP `pidof devfsd`</i>
<comment>albo</comment>
# <i>killall -s SIGHUP devfsd</i>
</pre>

</body>
</section>
<section>
<title>Usuwanie dowiązań dla zgodności</title>
<body>
<warn>
Aktualnie, Gentoo nie może istnieć bez dowiązań symbolicznych dla zgodności.
</warn>

<p>
Jeśli chcesz usunąć dowiązania symboliczne dla zgodności, które zaśmiecają twój
system <path>/dev</path> (Gentoo uruchamia je domyślnie), wejdź do pliku
<path>/etc/devfsd.conf</path> i usuń następujące dwie linie:
</p>

<pre caption = "/etc/devfsd.conf dla zgodności wstecz">
<comment># Wstaw znak komentarza na początku każdego z tych wierszy, aby usunąć dowiązania symboliczne</comment>
REGISTER        .*  MKOLDCOMPAT
UNREGISTER      .*  RMOLDCOMPAT
</pre>

<p>
Musisz ponownie załadować system, aby zmiany przyniosły efekt.
</p>

</body>
</section>
<section>
<title>Usuwanie funkcjonalności automatycznego ładowania</title>
<body>

<p>
Kiedy ładujesz moduł, devfs automatycznie utworzy pliki urządzeń.
Jeśli takiego zwyczaju nie chcesz, usuń następującą linię z <path>/etc/devfsd.conf</path>:
</p>

<pre caption = "Funkcjonalność /etc/devfsd.conf, przy automatycznym ładowaniu">
LOOKUP      .*  MODLOAD
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Elementy związane z uprawnieniami</title>
<section>
<title>Ustawianie/zmiana uprawnień w devfsd</title>
<body>

<note>
Poniższe instrukcje mają zastosowanie tylko wtedy gdy wyłączona jest pam_console
w pliku <path>/etc/pam.d/system-auth</path>. Jeśli pam_console zostanie tam
włączone to za prawa dostępu będzie odpowiadała PAM.
</note>

<p>
Jeśli jednak chcemy przydzielić uprawnienia przy pomocy
<path>/etc/devfsd.conf</path>, używamy składni użytej w następujacym
przykładzie:
</p>

<pre caption = "Uprawnienia w /etc/devfsd.conf">
REGISTER    ^cdroms/.*  PERMISSIONS root.cdrom 0660
</pre>

<p>
Drugie pole, to grupa urządzeń zaczynajaca się od <path>/dev</path>.
Jest to wyrażenie regularne, można więc podać kilka plików urządzeń w jednej
regule.
</p>

<p>
Czwarte pole określa właściciela pliku urządzeń.
</p>

<p>
Piąte pole zawiera prawa dostępu do pliku urządzenia.
</p>

</body>
</section>
<section>
<title>Ręczne ustawianie uprawnień, żeby devfsd je zachowało</title>
<body>

<p>
Domyślnym zwyczajem w Gentoo jest: Jeśli wykonujesz <c>chown</c> (CHange
OWNer - zmień właściciela) albo <c>chmod</c> (CHange MODe - zmień uprawnienia)
jakichś plików urządzeń, <c>devfsd</c> zachowa te informacje, gdy zamkniesz
system. Zachowa, ponieważ plik <path>/etc/devfsd.conf</path> zawiera następujące
wiersze:
</p>

<pre caption = "/etc/devfsd.conf zapamiętuje uprawnienia">
REGISTER        ^pt[sy]/.*   IGNORE
CHANGE          ^pt[sy]/.*   IGNORE
CREATE          ^pt[sy]/.*   IGNORE
DELETE          ^pt[sy]      IGNORE
REGISTER        ^log         IGNORE
CHANGE          ^log         IGNORE
CREATE          ^log         IGNORE
DELETE          ^log         IGNORE
REGISTER        .*           COPY    /lib/dev-state/$devname $devpath
CHANGE          .*           COPY    $devpath /lib/dev-state/$devname
CREATE          .*           COPY    $devpath /lib/dev-state/$devname
DELETE          .*           CFUNCTION GLOBAL unlink
/lib/dev-state/$devname
RESTORE         /lib/dev-state
</pre>

<p>
Innymi słowy zmienione pliki urządzeń są kopiowane do
<path>/lib/dev-state</path> zaraz po dokonaniu zmian i kopiowane z powrotem
do <path>/dev</path> przy ładowaniu systemu.
</p>

<p>
Inną możliwością jest zamontowanie <path>/lib/dev-state</path> na
<path>/dev</path> w czasie ładowania systemu. Aby to zrobić, musisz upewnić się,
że devfs nie jest montowane automatycznie (jeżeli tak konieczne
jest przekompilowanie jądra) i że <path>/dev/console</path> istnieje. Wtedy, gdzieś na początku
skryptu ładowania systemu, umieść:
</p>

<pre caption = "Montowanie /lib/dev-state na /dev">
mount --bind /dev /lib/dev-state
mount -t devfs none /dev
devfsd /dev
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Źródła</title>
<section>
<body>

<p>
Więcej informacji o devfs, znajdziesz w nastepujacych źródłach.
</p>

<p>
Strona man devfsd.conf wyjaśnia składnię pliku <path>/etc/devfsd.conf</path>.
Aby ją obejrzeć, napisz <c>man devfsd.conf</c>.
</p>

<p>
Strona <uri
link="http://www.atnf.csiro.au/people/rgooch/linux/docs/devfs.html">devfs
FAQ</uri> wyjaśnia wszystko o devfs. Zawiera również informacje o wewnętrznej
strukturze devfs i w jaki sposób sterowniki mogą obsługiwać devfs.
</p>

<p>
Na stronie <uri link="http://www.linuxjournal.com">LinuxJournal</uri> jest
interesujący artykuł o <uri
link="http://www.linuxjournal.com/article.php?sid=6035">devfs w Zarządzaniu i
Administracji</uri>.
</p>

<p>
Daniel Robbins napisał cykl artykułów dla IBM's DeveloperWorks
o Zawansowanych systemach plików. Trzy z nich dotyczą devfs:
</p>

<ul>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs4/">
    Wstęp do devfs</uri>
  </li>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs5/">
    Ustawianie devfs</uri>
  </li>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs6/">
    Implementacja devfs</uri>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
