<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "http://www.gentoo.org/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/mysql-howto.xml,v 1.2 2005/12/20 23:22:39 rane Exp $ -->

<guide link="/doc/pl/articles/mysql.xml" lang="pl">
<title>Wprowadzenie do systemu zarządzania bazą danych MySQL</title>

<author title="Autor">
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>
<author title="Tłumaczenie">
  <mail link="volt3r@gmail.com">Robert Frączek</mail>
</author>

<abstract>
Dokument ten jest wprowadzeniem do serwera baz danych jakim jest MySQL. Pokazuje
podstawy konfiguracji takiego serwera: instalację, pracę z bazami danych,
tabelami oraz jego użytkownikami.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.3</version>
<date>2005-12-15</date>

<chapter>
<title>Rozpoczynamy pracę z MySQL</title>
<section>
<title>Wprowadzenie</title>
<body>

<p>
MySQL jest jednym z najpopularniejszych serwerów baz danych. Do komunikacji z
innymi programami używa standardowego języku zapytań (SQL) wraz z własnymi
rozszerzonymi jego funkcjami. W tym tekście omówiona zostanie wstępna instalacja
serwera MySQL, tworzenie baz danych i tabel oraz dodawanie nowych użytkowników
bazy. Zacznijmy od wstępnej instalacji.
</p>

</body>
</section>
<section>
<title>Instalacja MySQL</title>
<body>

<p>
Po pierwsze należy się upewnić, że w systemie jest już zainstalowany serwer
MySQL. Jeżeli nie, należy wykonać prostą komendę:
</p>

<pre caption="Instalacja MySQL">
# <i>emerge mysql</i>
</pre>

<note>
Jeżeli istnieje potrzeba specyficznej funkcjonalności MySQL, można obejrzeć
dostępne flagi USE poprzez dodanie <c>-v</c> do komendy emerge. Pozwolą one na
dostosowanie instalacji do własnych potrzeb.
</note>

<p>
Po zakończonej instalacji zostanie wyświetlona następująca uwaga:
</p>

<!--<pre caption="MySQL einfo message">-->
<pre caption="Informacja o konfiguracji serwera MySQL">
You might want to run:
"emerge --config =dev-db/mysql-[version]"
if this is a new install.
</pre>

<p>
Zgodnie z zaleceniami należy wykonać powyższe polecenie, oczywiście tylko
wówczas, jeżeli przeprowadzamy instalację pierwszy raz.
</p>

<pre caption="Konfiguracja MySQL">
# <i>ebuild /var/db/pkg/dev-db/mysql-[version]/mysql-[version].ebuild config</i>
 * MySQL DATADIR is /var/lib/mysql
 * Press ENTER to create the mysql database and set proper
 * permissions on it, or Control-C to abort now...

   Preparing db table
   Preparing host table
   Preparing user table
   Preparing func table
   Preparing tables_priv table
   Preparing columns_priv table
   Installing all prepared tables

   To start mysqld at boot time you have to copy support-files/mysql.server
   to the right place for your system

   PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
   To do so, issue the following commands to start the server
   and change the applicable passwords:
   /etc/init.d/mysql start
   /usr/bin/mysqladmin -u root -h pegasos password 'new-password'
   /usr/bin/mysqladmin -u root password 'new-password'
   Depending on your configuration, a -p option may be needed
   in the last command. See the manual for more details.

<comment>Usunąłem tutaj część zbędnych komunikatów, aby ten dokument pozostał tak zwięzły jak to tylko możliwe.</comment>

   * For security reasons you should set your MySQL root
   * password as soon as possible.	   
</pre>

<impo>
Od wersji mysql-4.0.24-r2 hasła są wpisywane podczas fazy konfiguracji bazy, co
sprawia że konto root serwera bazy danych jest bezpieczniejsze.
</impo>

<p>
Wciskając klawisz <c>ENTER</c> podczas konfiguracji bazy MySQL sprawiamy, że
uruchomiony zostaje proces, w którym tworzona jest główna baza MySQL i
wypełniana początkowymi danymi. Zawiera ona informacje o dostępnych bazach
danych, tabelach, użytkownikach, prawach dostępu i wiele innych ciekawych
informacji. Konfiguracja zaleca zmianę hasła użytkownika root tak szybko jak 
to tylko możliwe. Zrobimy to teraz ponieważ w przeciwnym wypadku, ktoś może
zmienić naszą domyślną konfigurację serwera MySQL. Jesteśmy na etapie
konfiguracji, która umożliwia nam łatwe ustawienie tego hasła, zatem zróbmy to
teraz:
</p>

<pre caption="Ustawianie hasła dostępu do serwera MySQL dla użytkownika root">
# <i>/etc/init.d/mysql start</i>
 * Re-caching dependency info (mtimes differ)...
 * Starting mysqld (/etc/mysql/my.cnf) ...
 * [ ok ] 
$ <i>/usr/bin/mysqladmin -u root -h localhost password 'nowe-hasło'</i>
</pre>

<p>
Możemy teraz sprawdzić czy hasło zostało poprawnie zapisane próbując zalogować
się do serwera MySQL:
</p>

<pre caption="Logowanie do serwera MySQL">
$ <i>mysql -u root -h localhost -p</i>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 4 to server version: 4.0.25

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt;
</pre>

<p>
Argument <c>-u</c> to konto na którym chcemy pracować, argument <c>-h</c> to
komputer na którym pracuje nasz serwer baz danych. Zwykle będzie to
<c>localhost</c>, chyba że konfigurujemy serwer zdalnie. W końcu <c>-p</c> mówi,
że będziemy chcieli uwierzytelnić się za pomocą hasła. Powinniśmy ujrzeć teraz
zachętę <c>mysql&gt;</c>. Jest to miejsce, gdzie będziemy wpisywali wszystkie
komendy. Teraz kiedy już jesteśmy zalogowani jako użytkownik root, możemy
rozpocząć konfigurację naszej bazy danych.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja bazy danych</title>
<section>
<title>Tworzenie nowej bazy danych</title>
<body>

<p>
Zacznijmy od obejrzenia wszystkich dostępnych baz danych jakie posiadamy. Aby
tego dokonać wydajemy polecenie <c>SHOW DATABASES</c> jak poniżej:
</p>

<pre caption="Wyświetlenie dostępnych baz danych">
mysql&gt; <i>SHOW DATABASES;</i>
+----------+
| Database |
+----------+
| mysql    |
| test     |
+----------+
2 rows in set (0.09 sec)
</pre>

<impo>
Należy pamiętać, że komendy MySQL muszą być zakończone średnikiem!
</impo>

<p>
Pomimo tego że baza danych test jest już utworzona, utworzymy sobie własną dla
bardziej kompletnego przewodnika. Tworzenie baz danych odbywa się za pomocą
polecenia <c>CREATE DATABASE</c>. Utwórzmy zatem bazę danych i nazwijmy ją
gentoo:
</p>

<pre caption="Tworzenie bazy danych">
mysql&gt; <i>CREATE DATABASE gentoo;</i>
Query OK, 1 row affected (0.08 sec)
</pre>

<p>
Odpowiedź serwera pozwala nam stwierdzić, że polecenie zostało wykonane
poprawnie. W tym przypadku jeden wiersz został zmodyfikowany. Jest to
odniesienie do głównej bazy danych "mysql", która przechowuje listę wszystkich
baz danych. Nie musimy się jednak martwić o szczegóły. Ostatnią liczbą jest czas
w jakim zapytanie do bazy zostało wykonane. Możemy teraz sprawdzić, że
faktycznie baza danych została utworzona wydając komendę <c>SHOW DATABASES</c>
po raz kolejny:
</p>

<pre caption="Sprawdzamy czy baza danych została utworzona">
mysql&gt; <i>SHOW DATABASES;</i>
+----------+
| Database |
+----------+
| gentoo   |
| mysql    |
| test     |
+----------+
3 rows in set (0.00 sec)
</pre>

<p>
Rzeczywiście nasza baza danych została utworzona. Teraz będziemy chcieli utworzyć
w naszej bazie tabelę, jednak zanim to uczynimy musimy wybrać bazę na której
będziemy pracowali. Aby tego dokonać używamy komendy <c>USE</c>. Przyjmuje ona
jako argument nazwę bazy danych na której chcemy pracować. Bazę danych możemy
także wybrać już przy łączeniu się z serwerem podając jej nazwę po argumencie
<c>-D</c>. Wybierzmy zatem teraz bazę którą utworzyliśmy przed chwilą:
</p>

<pre caption="Wybór bazy danych">
mysql&gt; <i>USE gentoo;</i>
Database changed
</pre>

<p>
Aktualną bazą danych jest teraz ta, którą przed chwilą utworzyliśmy. Jeżeli już
została wybrana jako aktywna, możemy przejść do utworzenia w niej przykładowej
tabeli i wypełnienia jej informacjami.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Praca z tabelami w MySQL</title>
<section>
<title>Tworzenie nowej tabeli</title>
<body>

<p>
Strukturę MySQL tworzą: bazy danych, tabele, rekordy i pola. Bazy danych
zawierają tabele, tabele zawierają rekordy, rekordy zawierają pola, w których to
zapisane są informacje. Struktura ta pozwala użytkownikom uporządkowanie swoich
informacji. Do tej pory zajmowaliśmy się bazami danych, teraz przyszła
pora na pracę z tabelami. Po pierwsze, dostępne tabele możemy przeglądać
podobnie jak bazy danych, używając komendy <c>SHOW TABLES</c>. W tej chwili nie
ma żadnych tabel w naszej bazie gentoo:
</p>

<pre caption="Pusta baza gentoo">
mysql&gt; <i>SHOW TABLES;</i>
Empty set (0.00 sec)
</pre>

<p>
Stwórzmy więc przykładową tabelę. Aby tego dokonać, użyjemy komendy <c>CREATE
TABLE</c> Jednak komenda ta jest całkiem inna od prostego <c>CREATE
DATABASE</c>.  Przyjmuje ona listę argumentów, którą musimy podać:
</p>

<pre caption="Składnia polecenia CREATE TABLE">
CREATE TABLE [nazwa_tabeli] ([nazwa_pola] [typ_pola]([rozmiar]));
</pre>

<p>
nazwa_tabeli jest nazwą jaką chcemy nadać tworzonej tabeli. W tym przykładzie
nazwijmy ją <c>developers</c>. Tabela ta będzie zawierała imię i nazwisko
dewelopera, email i to czym się ma zajmować. Co z typami tych pól? Typ pola
zawiera informacje o tym jakie dane będą w nim przechowywane. Wszystkie dostępne
typy można znaleźć na <uri
link="http://dev.mysql.com/doc/mysql/en/column-types.html">tej stronie</uri>.
Dla naszych celów użyjemy typu danych <c>VARCHAR</c> dla wszystkich pól.
<c>VARCHAR</c> jest jednym z najprostszych typów danych, jeżeli chodzi o pracę z
łańcuchami znakowymi. Rozmiar oznacza ile takich typów danych stworzymy. W tym
przykładzie użyjemy pól o wielkości 128. Będzie to oznaczało, że możemy umieścić
w tym polu 128 typów danych <c>VARCHAR</c>. Można spokojnie uważać to pole
po prostu jako 128 znaków, chociaż istnieje bardziej techniczne wytłumaczenie,
dostępne na podanej wcześniej stronie. Teraz, kiedy już wiemy jak tworzyć
tabele, zróbmy to:
</p>

<pre caption="Tworzenie naszej tabeli">
mysql&gt; <i>CREATE TABLE developers ( name VARCHAR(128), email VARCHAR(128), job VARCHAR(128));</i>
Query OK, 0 rows affected (0.11 sec)
</pre>

<p>
Wygląda na to, że wszystko przebiegło poprawnie. Sprawdźmy zatem wynik komendy
<c>SHOW TABLES</c>:
</p>

<pre caption="Sprawdzamy czy nasza tabela została utworzona">
mysql&gt; <i>SHOW TABLES;</i>
+------------------+
| Tables_in_gentoo |
+------------------+
| developers       |
+------------------+
1 row in set (0.00 sec)
</pre>

<p>
Tak, oto i nasza tabela. Jednak nie wygląda na to żeby pokazały się informacje
o typach pól jakie ustaliliśmy. Aby je uzyskać użyjemy komendy <c>DESCRIBE</c>,
która pobiera jako argument nazwę tabeli. Zobaczmy zatem co zwróci nam to
polecenie w odniesieniu do tabeli developers:
</p>

<pre caption="Opis tabeli developers">
mysql&gt; <i>DESCRIBE developers;</i>
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| name  | varchar(128) | YES  |     | NULL    |       |
| email | varchar(128) | YES  |     | NULL    |       |
| job   | varchar(128) | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
3 rows in set (0.00 sec)
</pre>

<note>
Można także używać krótszej formy <c>DESC</c>.
</note>

<p>
Pokazała się nam tabela z polami oraz ich typami. Widzimy także kilka
dodatkowych atrybutów, które są jednak poza zasięgiem tego dokumentu. Ich opisy
są dostępne w dokumentacji MySQL. Mamy w tej chwili tabelę z którą możemy
pracować. Wprowadźmy zatem do niej przykładowe dane.
</p>

</body>
</section>
<section>
<title>Umieszczanie informacji w bazie danych</title>
<body>

<p>
Teraz kiedy już mamy własną tabelę, włóżmy do niej jakieś informacje. Służy do
tego polecenie <c>INSERT</c>. Tak jak <c>CREATE TABLE</c>, ono także ma
specyficzną formę:
</p>

<pre caption="Składnia polecenia INSERT">
INSERT INTO [nazwa_tabeli] VALUES('wartość1', 'wartość2', ...);
</pre>

<p>
Komenda ta służy do dodawania rekordów do tabeli. nazwa_tabeli to po prostu
tabela MySQL, do której zamierzamy wprowadzić informacje. <c>VALUES()</c> zawiera
informacje, które chcemy umieścić w tabeli. W tym przypadku chcemy dodać
informacje do tabeli developers. Zatem dodajmy przykładowy rekord z danymi 'Joe
Smith', 'joesmith@gentoo.org', 'toolchain'. Postępujemy następująco:
</p>

<pre caption="Umieszczanie danych w tabeli developers">
mysql&gt; <i>INSERT INTO developers VALUES('Joe Smith', 'joesmith@gentoo.org', 'toolchain');</i>
Query OK, 1 row affected (0.06 sec)
</pre>

<p>
Wygląda na to, że rekord został dodany poprawnie. Co jeśli byśmy chcieli dodać
więcej niż jeden rekord? Inną wygodną komendą jest <c>LOAD DATA</c>. Służy ona
do ładowania oddzielonych tabulacjami informacji z pliku. Spróbujmy zatem
stworzyć w naszym katalogu domowym plik z przykładowymi danymi. Nazwijmy go
<path>records.txt</path>. Na przykład:
</p>

<pre caption="~/records.txt">
John Doe	johndoe@gentoo.org	portage
Chris White	chriswhite@gentoo.org	documentation
Sam Smith	samsmith@gentoo.org	amd64
</pre>

<impo>
Warto upewnić się z jakimi danymi ma się do czynienia! Używanie komendy LOAD
DATA może być bardzo niebezpieczne jeżeli nie jesteśmy pewni jaka jest zawartość
używanego pliku.
</impo>

<p>
Komenda <c>LOAD DATA</c> posiada nieco przydługawą definicję, jednak my użyjemy
najprostszej jej formy:
</p>

<pre caption="Składnia polecenia LOAD DATA">
LOAD DATA LOCAL INFILE '/ścieżka/do/pliku' INTO TABLE tabela;
</pre>

<p>
<path>/ścieżka/do/pliku</path> jest po prostu katalogiem i plikiem, którego
zamierzamy użyć. tabela jest nazwą tabeli. W naszym przypadku plikiem
jest <path>~/records.txt</path>, a tabelą developers:
</p>

<pre caption="Wczytywanie informacji z pliku:">
mysql&gt; <i>LOAD DATA LOCAL INFILE '~/records.txt' INTO TABLE developers;</i>
Query OK, 3 rows affected (0.00 sec)
Records: 3  Deleted: 0  Skipped: 0  Warnings: 0
</pre>

<impo>
Napotkawszy na jakieś dziwne zachowania komendy <c>LOAD DATA</c>, należy się
upewnić, że kolejne informacje oddzielone są tabulatorem! Jeżeli informacje
zostały wklejone do pliku z innego źródła, tabulacje mogły zostać zamienione na
znaki spacji.
</impo>

<p>
Komenda ta jedynie umieszcza rekordy w tabeli i nie daje żadnej kontroli nad
serwerem MySQL. Wiele aplikacji internetowych używa skryptów sql do szybkiej i
prostej konfiguracji serwera MySQL. Jeżeli zechcemy użyć takiego skryptu,
będziemy musieli uruchomić MySQL w trybie wsadowym lub użyć polecenia
<c>source</c>. Oto przykład uruchamiania mysql w trybie wsadowym:
</p>

<pre caption="MySQL w trybie wsadowym">
$ <i>mysql -u root -h localhost -p &lt; plik_sql</i>
</pre>

<p>
Tak jak przy poleceniu <c>LOAD DATA</c>, tak i tutaj należy być pewnym co taki
skrypt zawiera. <e>Użycie pliku nieznanego pochodzenia może spowodować
naruszenie ochrony bazy danych!</e> Inną metodą załadowania takiego skryptu
jest użycie polecenia <c>source</c>. Uruchomi ono komendy zapisane w skrypcie z
poziomu trybu interaktywnego mysql. A oto i przykład użycia komendy
<c>source</c>:
</p>

<pre caption="Składnia polecenia source">
mysql&gt; <i>source plik_sql;</i>
</pre>

<p>
Jeżeli napotkamy na aplikację internetową oczekującą na uruchomienie pliku sql,
wtedy dwie powyższe komendy mogą zostać użyte. Mamy zatem wypełnioną naszą
tabelę. Jak teraz sprawdzić co zawierają nasze pola? Dokonamy tego przez
przeszukiwanie naszej tabeli za pomocą zapytań.
</p>

</body>
</section>
<section>
<title>Przeglądanie tabel MySQL za pomocą zapytań</title>
<body>

<p>
Zapytania są jedną z głównych możliwości jakie oferuje każda baza danych SQL. To
one pomagają nam interpretować informacje pochodzące z naszych tabel jako coś
przydatnego. Większość zapytań realizowana jest przez komendę <c>SELECT</c>.
Potrafi ona być bardzo skomplikowana, my jednak pokażemy w tym dokumencie tylko
trzy główne jej formy:
</p>

<pre caption="Składnia polecenia SELECT">
<comment>Wybranie wszystkich informacji z tabeli</comment>
SELECT * FROM tabela;
<comment>Wybranie konkretnych informacji z tabeli</comment>
SELECT * FROM tabela WHERE pole=wartość;
<comment>Wybranie konkretnych pól</comment>
SELECT pole1,pole2,pole3 FROM tabela [WHERE pole=wartość];
</pre>

<p>
Przyjrzyjmy się teraz pierwszej formie. Jest ona całkiem prosta i daje w wyniku
ogólny wgląd w tabelę. Zobaczmy zatem jakie dane zawiera nasza tabela do tej
pory:
</p>

<pre caption="Przeglądanie danych z tabeli">
mysql&gt; <i>SELECT * FROM developers;</i>
+-------------+-----------------------+---------------+
| name        | email                 | job           |
+-------------+-----------------------+---------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain     |
| John Doe    | johndoe@gentoo.org    | portage       |
| Chris White | chriswhite@gentoo.org | documentation |
| Sam Smith   | samsmith@gentoo.org   | amd64         |
+-------------+-----------------------+---------------+
4 rows in set (0.00 sec)
</pre>

<p>
Widzimy tutaj zarówno dane wprowadzone za pomocą polecenia <c>INSERT</c> jak i
te wprowadzone poprzez <c>LOAD DATA</c>. A teraz, powiedzmy że chcemy zobaczyć
tylko rekord dewelopera o nazwisku Chris White. Możemy to zrobić używając
drugiej formy zapytania:
</p>

<pre caption="Wybieranie specyficznych rekordów przy pomocy polecenia SELECT">
mysql&gt; <i>SELECT * FROM developers WHERE name = 'Chris White';</i>
+-------------+-----------------------+---------------+
| name        | email                 | job           |
+-------------+-----------------------+---------------+
| Chris White | chriswhite@gentoo.org | documentation |
+-------------+-----------------------+---------------+
1 row in set (0.08 sec)
</pre>

<p>
Tak jak się spodziewaliśmy, wybrany przez nas deweloper został wyświetlony. A
teraz, powiedzmy że chcemy znać tylko zadania i adres email pewnej osoby, ale
nie potrzebne nam jej nazwisko. Użyjmy do tego zadania trzeciej formy polecenia
<c>SELECT</c>:
</p>

<pre caption="Wybieranie specyficznego rekordu i pól przy pomocy polecenia SELECT">
mysql> <i>SELECT email,job FROM developers WHERE name = 'Chris White';</i>
+-----------------------+---------------+
| email                 | job           |
+-----------------------+---------------+
| chriswhite@gentoo.org | documentation |
+-----------------------+---------------+
1 row in set (0.04 sec)
</pre>

<p>
Będąc zalogowanym w bazie MySQL jako użytkownik root, mamy nieograniczone prawa
do wszystkiego czego możemy sobie zażyczyć. W środowisku serwera, użytkownik z
takimi przywilejami może być nieco problematyczny. Aby kontrolować kto i co robi
z bazami danych przyznamy teraz odpowiednim użytkownikom odpowiednie przywileje.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Przywileje MySQL</title>
<section>
<title>Przyznawanie uprawnień za pomocą polecenia GRANT</title>
<body>

<p>
Uprawnienia określają jaki rodzaj dostępu do baz danych, tabel, itd. posiadają
użytkownicy MySQL. W tej chwili na przykład jedynym użytkownikiem mającym
dostęp do niedawno stworzonej bazy gentoo jest root. Stwórzmy teraz zatem
jeszcze dwóch użytkowników, guest oraz admin, którzy będą mieli dostęp do bazy
gentoo i informacji w niej zawartych. Sprawimy, że użytkownik guest będzie miał
bardzo ograniczone prawa, pozwolimy mu tylko i wyłącznie na pobieranie
informacji z bazy. admin będzie posiadał dokładnie takie same uprawnienia jak
root, jednak tylko w stosunku do bazy gentoo, nie będzie miał żadnej możliwości
ingerencji w inne bazy, a w szczególności w bazę mysql. Zanim rozpoczniemy,
przyjrzyjmy się bliżej nieco uproszczonej formie polecenia <c>GRANT</c>:
</p>

<pre caption="Składnia polecenia GRANT">
GRANT [przywilej] ON baza_danych.* TO '[użytkownik]'@'[host]' IDENTIFIED BY '[hasło]';
</pre>

<note>
Polecenie <c>GRANT</c> można uważać za polecenie służące do dodawania nowych
użytkowników do systemu MySQL. Pomimo, że ostatnie wersje (od 5.0.2) posiadają
funkcje <c>CREATE USER</c>, preferowane jest używanie polecenia <c>GRANT</c>.
</note>

<p>
Pierwszym argumentem jaki będziemy musieli podać są przywileje jakie chcemy
nadać użytkownikowi. Poniżej została podana lista możliwych do nadania uprawnień
uwzględniająca to czego się do tej pory nauczyliśmy:
</p>

<ul>
  <li><c>ALL</c> - Użytkownik otrzymuje wszystkie przywileje za wyjątkiem GRANT OPTION</li>
  <li><c>CREATE</c> - Pozwala użytkownikowi na tworzenie tabel</li>
  <li><c>SELECT</c> - Pozwala na przeszukiwanie tabel</li>
  <li><c>INSERT</c> - Pozwala dodawać nowe informacje do tabel</li>
  <li><c>SHOW DATABASES</c> - Pozwala użytkownikowi na przeglądanie listy dostępnych baz danych</li>
  <li><c>USAGE</c> - Służy do tworzenia użytkownika bez uprawnień.</li>
  <li><c>GRANT OPTION</c> - Pozwala użytkownikowi nadawać uprawnienia.</li>
</ul>

<note>
Jeżeli używamy serwera MySQL do wymiany informacji z aplikacją internetową,
wtedy: <c>CREATE</c>, <c>SELECT</c>, <c>INSERT</c> (kwestia dyskusyjna),
<c>DELETE</c> oraz <c>UPDATE</c> <uri
link="http://dev.mysql.com/doc/mysql/en/grant.html">(patrz dokumentacja MySQL)
</uri> będą jedynymi uprawnieniami jakie będą potrzebne. Wielu ludzi popełnia
błąd nadając wszystkie uprawnienia użytkownikowi bazy, kiedy tak naprawdę nie
jest to potrzebne. 
</note>

<p>
Zatem użytkownikowi admin nadamy uprawnienia <c>ALL</c>. Dla użytkownika guest
<c>SELECT</c> będzie wystarczające do dostępu tylko do odczytu. baza_danych jest
bazą danych do której chcemy, aby użytkownik miał uprawnienia. W naszym
przykładzie, gentoo będzie właśnie tą bazą. Kolejne dwa znaki .* oznaczają
wszystkie tabele w naszej bazie. Jeżeli zajdzie taka potrzeba można w miejsce *
zdefiniować dostęp tylko do określonych tabel w bazie. użytkownik jest nazwą
użytkownika, natomiast host to nazwa komputera z którego użytkownik będzie miał
dostęp. W większości przypadków będzie to po prostu localhost. Wreszcie hasło
jest hasłem jakim użytkownik będzie się musiał uwierzytelnić. Kiedy już
skończymy nadawanie uprawnień, będziemy musieli wykonać polecenie <c>FLUSH
PRIVILEGES</c>. Spowoduje ono aktualizację uprawnień bez konieczności ponownego
uruchomienia serwera MySQL.  Wszystko mamy zaplanowane, przejdźmy zatem do
stworzenia nowych użytkowników:
</p>

<pre caption="Dodawanie użytkowników admin oraz guest">
<comment>admin</comment>
mysql&gt; <i>GRANT ALL ON gentoo.* TO 'admin'@'localhost' IDENTIFIED BY 'hasło';</i>
<comment>guest</comment>
mysql&gt; <i>GRANT SELECT ON gentoo.* TO 'guest'@'localhost' IDENTIFIED BY 'hasło';</i>
</pre>

<p>
Teraz, kiedy nowi użytkownicy zostali dodani, przetestujmy ich konta. Opuśćmy
teraz konsolę MySQL wpisując <c>quit</c> w wierszu poleceń.	
</p>

<pre caption="Opuszczanie MySQL">
mysql&gt; <i>quit</i>
</pre>

<p>
Jesteśmy teraz w konsoli systemu. Mając utworzonych nowych użytkowników
sprawdźmy do czego tak naprawdę mają dostęp.	
</p>

</body>
</section>
<section>
<title>Testowanie uprawnień użytkowników</title>
<body>

<p>
Ponieważ wróciliśmy do konsoli systemowej, spróbujemy zalogować się teraz na
konto guest. W tej chwili, użytkownik guest powinien posiadać przywilej tylko do
polecenia <c>SELECT</c>. Sprowadza się to do możliwości przeszukiwania bazy i
niczego więcej. Zalogujmy się więc jako użytkownik guest:
</p>

<pre caption="Logowanie jako użytkownik guest">
$ <i>mysql -u guest -h localhost -p</i>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 6 to server version: 4.0.25

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt;
</pre>

<p>
Przetestujmy czy faktycznie nasz użytkownik ma nałożone odpowiednie restrykcje.
Najpierw przekażemy systemowi, że chcemy pracować na bazie gentoo:
</p>

<pre caption="Przełączamy się na bazę gentoo">
mysql&gt; <i>USE gentoo;</i>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
</pre>

<p>
Sprawdzimy teraz coś do czego nie powinniśmy mieć uprawnień. Spróbujemy
stworzyć tabelę:
</p>

<pre caption="Próba stworzenia tabeli przez użytkownika guest">
mysql&gt; <i>CREATE TABLE test (test VARCHAR(20), foobar VARCHAR(2));</i>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>

<p>
Polecenie zakończyło się niepowodzeniem, ponieważ użytkownik nie posiada
odpowiednich uprawnień. Jak pamiętamy, nadaliśmy użytkownikowi guest prawo do
polecenia <c>SELECT</c>. Sprawdźmy je teraz:
</p>

<pre caption="Próba wykonania polecenia SELECT">
mysql&gt; <i>SELECT * FROM developers;</i>
+-------------+-----------------------+---------------+
| name        | email                 | job           |
+-------------+-----------------------+---------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain     |
| John Doe    | johndoe@gentoo.org    | portage       |
| Chris White | chriswhite@gentoo.org | documentation |
| Sam Smith   | samsmith@gentoo.org   | amd64         |
+-------------+-----------------------+---------------+
4 rows in set (0.01 sec)
</pre>

<p>
Zgodnie z oczekiwaniami polecenie zostało wykonane poprawnie. Oprócz konta
guest, stworzyliśmy także konto admin. Stworzyliśmy je, aby pokazać, że nawet
konto z przywilejem ALL ciągle posiada swoje ograniczenia. Opuśćmy zatem konsolę
MySQL i zalogujmy się jako użytkownik admin:
</p>

<pre caption="Logowanie jako użytkownik admin">
mysql&gt; <i>quit</i>
Bye
$ <i>mysql -u admin -h localhost -p</i>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
 Your MySQL connection id is 7 to server version: 4.0.25

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt;
</pre>

<p>
Na początku spróbujemy stworzyć nową bazę danych. Nasz użytkownik, admin,
posiada bardzo podobne uprawnienia do konta root, zatem może wykonywać dowolne
zmiany w bazie gentoo. Pamiętamy jednak, że nadaliśmy użytkownikowi admin
uprawnienia tylko do jednej konkretnej bazy. Sprawdźmy zatem czy tak jest w
rzeczywistości:
</p>

<pre caption="Próba stworzenia nowej bazy danych">
mysql&gt; <i>CREATE DATABASE gentoo2;</i>
ERROR 1044: Access denied for user: 'admin@localhost' to database 'gentoo2'
</pre>

<p>
Rzeczywiście, użytkownik admin nie może tworzyć nowych baz danych, pomimo tylu
uprawnień w bazie gentoo. Jednak możemy ciągle użyć konta admin do modyfikacji
bazy gentoo, jak zostało to pokazane na poniższym przykładzie:
</p>

<pre caption="Uprawnienia konta admin w bazie gentoo">
mysql&gt; <i>USE gentoo;</i>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; <i>INSERT INTO developers VALUES('Bob Simmons', 'bobsimmons@gentoo.org', 'python');</i>
Query OK, 1 row affected (0.08 sec)
</pre>

<p>
Istotnie użytkownik admin może swobodnie modyfikować bazę gentoo, jeśli tylko
zechce. Czasami zachodzi potrzeba odebrania użytkownikom uprawnień, powodem może
być zarówno problematyczny użytkownik jak i pracownik na emeryturze. Zobaczmy
jak można odbierać uprawnienia za pomocą polecenia <c>REVOKE</c>.
</p>

</body>
</section>
<section>
<title>Odbieranie uprawnień za pomocą komendy REVOKE</title>
<body>

<p>
Komenda <c>REVOKE</c> pozwala na odbieranie uprawnień użytkownikom. Możliwe jest
zarówno odebranie jakiegoś konkretnego uprawnienia, jak i wszystkich możliwych.
Składnia polecenia <c>REVOKE</c> jest bardzo podobna do polecenia <c>GRANT</c>:
</p>

<pre caption="Składnia polecenia REVOKE">
REVOKE [przywilej] ON baza_danych.* FROM '[użytkownik]'@'[host]';
</pre>

<p>
Argumenty tego polecenia zostały już omówione w sekcji dotyczącej polecenia
<c>GRANT</c>. Tutaj natomiast zostanie przedstawiony proces odbierania
wszystkich uprawnień. Powiedzmy, że dowiadujemy się o pewnych nadużyciach
związanych z bezpieczeństwem ze strony użytkownika guest. Decydujemy się na
odebranie mu wszystkich uprawnień. Należy zatem opuścić obecną sesję mysql i
zalogować się na konto root:
</p>

<pre caption="Logowanie na konto użytkownika root">
mysql&gt; <i>quit</i>
Bye
$ <i>mysql -u root -h localhost -p</i>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 9 to server version: 4.0.25

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt;
</pre>

<p>
Należy teraz odebrać odpowiedniemu użytkownikowi uprawnienia:
</p>

<pre caption="Odbieranie uprawnień użytkownikowi">
mysql&gt; <i>REVOKE ALL ON gentoo.* FROM 'guest'@'localhost';</i>
Query OK, 0 rows affected (0.00 sec)
</pre>

<note>
W przykładach pokazanych w tym dokumencie prawa dostępu są bardzo proste, więc
odebranie uprawnień do konkretnej bazy nie stanowi problemu. Jednak w przypadku
większych baz danych, należałoby raczej użyć *.* zamiast gentoo.*, aby odebrać
użytkownikowi prawa do wszystkich baz danych jakie istnieją w systemie.
</note>

<p>
Opuścimy teraz konto root i zalogujemy się jako guest:
</p>

<pre caption="Próba zalogowania się jako użytkownik guest">
$ <i>mysql -u guest -h localhost -p</i>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 9 to server version: 4.0.24-debug

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt;
</pre>

<p>
Jak się okazuje, użytkownik dalej jest w stanie zalogować się do
systemu. Jednak jego prawa dostępu do bazy gentoo już nie istnieją:
</p>

<pre caption="Odmowa dostępu do bazy gentoo">
mysql&gt; <i>USE gentoo;</i>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>

<p>
W ten sposób użytkownik sprawiający problemy nie ma już dostępu do bazy gentoo.
Należy jednak zauważyć, że ciągle jest on w stanie zalogować się do serwera baz
danych. Dzieje się tak, ponieważ pozostaje on ciągle wpisany do głównej
bazy MySQL. Zobaczymy teraz jak można całkowicie usunąć konto użytkownika z
systemu za pomocą polecenia <c>DELETE</c> oraz głównej tabeli MySQL.
</p>

</body>
</section>
<section>
<title>Całkowite usuwanie kont za pomocą polecenia DELETE i tabeli user głównej bazy MySQL.
</title>
<body>

<p>
Tabela user głównej bazy MySQL zawiera listę wszystkich użytkowników systemu
oraz informacje o nich. Zalogujmy się po raz kolejny na konto root:
</p>

<pre caption="Logowanie na konto root">
mysql&gt; <i>quit</i>
Bye
$ <i>mysql -u root -h localhost -p</i>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 14 to server version: 4.0.24-debug

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
mysql&gt;
</pre>

<p>
Przełączmy się na główną bazę MySQL:
</p>

<pre caption="Przełączanie na główną bazę mysql">
mysql&gt; <i>USE mysql;</i>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt;
</pre>

<p>
Zobaczmy jakie tabele zawiera baza mysql:	
</p>

<pre caption="Lista tabel bazy mysql">
mysql&gt; <i>SHOW TABLES;</i>
+-----------------+
| Tables_in_mysql |
+-----------------+
| columns_priv    |
| db              |
| func            |
| host            |
| tables_priv     |
| user            |
+-----------------+
6 rows in set (0.00 sec)
</pre>

<p>
Tabela user jest tą o którą nam chodziło. Jednak zawiera ona 30 różnych pól, co
czyni ją trudną w przeglądaniu. Do wyświetlenia danych z tej tabeli w przystępnej i
czytelnej formie posłuży tutaj trzecia forma polecenia <c>SELECT</c>. Pola które
chcielibyśmy zobaczyć to Host oraz User.
</p>

<pre caption="Wybieranie użytkownika guest z tabeli user">
mysql&gt; <i>SELECT Host,User FROM user WHERE User = 'guest';</i>
+-----------+-------+
| Host      | User  |
+-----------+-------+
| localhost | guest |
+-----------+-------+
1 row in set (0.00 sec)
</pre>

<p>
Po odnalezieniu użytkownika, można w końcu usunąć go całkowicie z systemu. Służy
do tego polecenie <c>DELETE</c>, którego składnia przedstawiona została poniżej:
</p>

<pre caption="Składnia polecenia DELETE">
DELETE FROM tabela WHERE pole='wartość';
</pre>

<p>
Można zauważyć, że składnia polecenia <c>DELETE</c> jest niejako podobna do
polecenia <c>SELECT</c>. W tym przypadku pole będzie równe User natomiast
wartość guest. Tak skonstruowane polecenie usunie z tabeli rekord, w którym pole
User jest równe guest, usuwając w ten sposób definitywnie konto guest z systemu:
</p>

<pre caption="Usuwanie konta guest">
mysql&gt; <i>DELETE FROM user WHERE User='guest';</i>
Query OK, 1 row affected (0.07 sec)
<comment>Polecenie FLUSH PRIVILEGES jest konieczne, aby zmiany w uprawnieniach
odniosły skutek</comment>
mysql&gt; <i>FLUSH PRIVILEGES;</i>
Query OK, 0 rows affected (0.00 sec)
</pre>

<p>
Można teraz sprawdzić, czy zmiany odniosły oczekiwany skutek poprzez próbę
zalogowania się jako użytkownik guest:	
</p>

<pre caption="Próba zalogowania się na konto użytkownika guest">
mysql&gt; <i>quit</i>
Bye
$ <i>mysql -u guest -h localhost -p</i>
Enter password:
ERROR 1045: Access denied for user: 'guest@localhost' (Using password: YES)
</pre>

<p>
Użytkownik został całkowicie usunięty z bazy!
</p>

</body>
</section>
<section>
<title>Podsumowanie</title>
<body>

<p>
Chociaż przewodnik ten był nastawiony na konfigurację MySQL z linii komend,
istnieje kilka alternatyw z interfejsem graficznym:
</p>

<ul>
  <li>phpMyAdmin - Popularne narzędzie do administrowania serwerem MySQL
  zbudowane w technologii php</li>
  <li>mysqltool - Kolejny interfejs internetowy do administracji serwerem MySQL</li>
  <li>mysqlnavigator - Graficzna nakładka na MySQL oparta o bibliotekę QT</li>
  <li>gmyclient - Klient MySQL oparty o środowisko GNOME</li>
  <li>knoda - Klient MySQL oparty o środowisko KDE</li>
</ul>

<p>
Istnieje także więcej zamaskowanych nakładek:
</p>

<ul>
  <li>mysqlcc - Graficzny klient stworzony przez zespół deweloperów MySQL</li>
  <li>xmysqladmin - Graficzna nakładka na MySQL oparta o Xforms</li>
</ul>

<p>
W ten sposób dotarliśmy do końca tego krótkiego wprowadzenia do MySQL. Mam
nadzieję, że było ono pomocne w zrozumieniu jednego z najpopularniejszych dziś
serwerów baz danych. Jeżeli masz jakiekolwiek uwagi na temat tego dokumentu nie
wahaj się napisać <mail link="chriswhite@gentoo.org">do mnie</mail>.
</p>

</body>
</section>
</chapter>
</guide>
