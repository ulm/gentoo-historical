<?xml version='1.0' encoding="UTF-8"?>

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/sudo-guide.xml,v 1.6 2005/12/06 19:04:10 rane Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/sudo-guide.xml" lang="pl">
<title>Sudo i sudoers w Gentoo</title>

<author title="Autor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Tłumaczenie">
  <mail link="antoni@chopin.edu.pl">Antoni Grzymała</mail>
</author>

<abstract>
Aby umożliwić wybranym użytkownikom wykonywanie pewnych czynności
administracyjnych bez dawania im pełnego dostępu superużytkownika 
najelastyczniej jest posłużyć się pakietem sudo. Za jego pomocą można
precyzyjnie określić jakie czynności dany użytkownik będzie mógł wykonywać. Ten
tekst jest skromnym wprowadzeniem w świat tego wspaniałego narzędzia.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.4</version>
<date>2005-10-21</date>

<chapter>
<title>Czym jest sudo?</title>
<section>
<title>Nadawanie uprawnień</title>
<body>

<p>
Pakiet <c>app-admin/sudo</c> pozwala administratorowi systemu nadać zwykłym
użytkownikom uprawnienia do uruchamiania programów, do których normalnie nie
mieliby dostępu. W odróżnieniu od ustawiania bitu <e>setuid</e> na tych
programach w celu umożliwienia uruchomienia ich z uprawnieniami
administratora, <c>sudo</c> pozwala precyzyjnie określić <e>kto</e> może
wykonać daną komendę i <e>kiedy</e>.
</p>

<p>
Za pomocą <c>sudo</c> administrator może utworzyć listę <e>osób</e>, które mogą
uruchamiać pewne programy. W przypadku, jeśli na programie zostałby ustawiony
jedynie bit <e>setuid</e>, dowolny użytkownik mógłby uruchomić dany program
(ewentualnie dowolny użytkownik z pewnej grupy, zależnie od ustawionych na
pliku uprawnień). Używając <c>sudo</c>, można (i jest dobrą praktyką)
wymagać od użytkownika podania hasła do uruchomienia danego programu; można
nawet określić dokładnie uprawnienia na podstawie lokalizacji, z której
użytkownik się loguje (np. czy jest zalogowany lokalnie, czy poprzez zdalną
sesję SSH).
</p>

</body>
</section>
<section>
<title>Logowanie czynności</title>
<body>

<p>
Dodatkową zaletą stosowania <c>sudo</c> jest jego możliwość logowania każdej
próby (udanej bądź nie) uruchomienia programu. Okazuje się to bardzo
przydatne, jeśli istnieje potrzeba sprawdzenia, kto popełnił ten fatalny błąd,
którego skutków usuwanie trwało dziesięć godzin. :)
</p>

</body>
</section>
<section>
<title>Konfiguracja sudo</title>
<body>

<p>
Konfiguracja <c>sudo</c> znajduje się w pliku <path>/etc/sudoers</path>.
Nie należy tego pliku edytować za pomocą komendy <c>nano&nbsp;/etc/sudoers</c>,
<c>vim&nbsp;/etc/sudoers</c> ani żadnym innym ulubionym edytorem. Jeśli istnieje
potrzeba zmiany tego pliku, należy posłużyć się komendą <c>visudo</c>.
</p>

<p>
Jest to narzędzie, które gwarantuje, że dwóch administratorów systemu nie będzie
edytować tego pliku w tym samym momencie, zapewnia zachowanie odpowiednich bitów
uprawnień na edytowanym pliku i sprawdza w podstawowym stopniu składnię,
gwarantując, że w pliku nie powstaną fatalne w skutkach błędy. W praktyce
uruchamia ono edytor zdefiniowany w zmiennej środowiskowej EDITOR, która w
Gentoo domyślnie jest definiowana w pliku <path>/etc/rc.conf</path>.
</p>

</body>
</section>
<section>
<title>O tym tekście</title>
<body>

<p>
Ten tekst jest pomyślany jako krótkie wprowadzenie w tematykę <c>sudo</c>.
Pakiet ten ma znacznie większe możliwości niż te, które są tutaj opisane.
Pozwala m. in. edytować pliki z uprawnieniami innego użytkownika
(<c>sudoedit</c>), uruchamiać programy ze skryptów w taki sposób, żeby mogły
przejść do tła, odczytać hasło ze standardowego wejścia zamiast klawiatury
itd...
</p>

<p>
Więcej informacji na temat sudo i sudoers znajduje się na ich stronach man.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Składnia pliku sudoers</title>
<section>
<title>Podstawowa składnia</title>
<body>

<p>
Zwykle najtrudniejszym zadaniem w poznaniu <c>sudo</c> jest przyzwyczajenie się
do składni pliku <path>/etc/sudoers</path>. W najprostszym wydaniu wygląda ona w
ten sposób:
</p>

<pre caption="Podstawowa składnia /etc/sudoers">
użytkownik komputer = komenda
</pre>

<p>
Taka składnia instruuje <c>sudo</c>, że użytkownik określony przez wpis
<e>użytkownik</e> zalogowany z maszyny <e>komputer</e> może wykonywać
<e>komendę</e> z uprawnieniami superużytkownika. Konkretny przykład pokaże to
lepiej: pozwólmy użytkownikowi <e>antoni</e> wykonać komendę <e>emerge</e> tylko
jeśli jest zalogowany lokalnie (nie poprzez SSH):
</p>

<pre caption="Realny przykład /etc/sudoers">
antoni localhost = /usr/bin/emerge
</pre>

<p>
<brite>Ostrzegamy</brite>, że nie należy pozwalać użytkownikom na wykonywanie
programów, które pozwalają na zwiększenie ich przywilejów w systemie. Na
przykład użytkownik mający prawo do wykonanie <c>emerge</c> z prawami
superużytkownika, może je wykorzystać do zdobycia pełnej kontroli nad systemem.
Użytkownikom, którym się nie ufa nie należy nadawać żadnych przywilejów poprzez
<c>sudo</c>.
</p>

<!--
  Wrappers are no real advantage here either, see #71750
-->

<p>
Nazwę użytkownika można zastąpić nazwą grupy. W takim przypadku nazwę grupy
należy poprzedzić znakiem <c>%</c>. W przykładzie poniżej pozwolimy na
korzystanie z <c>emerge</c> wszystkim członkom grupy <c>wheel</c>:
</p>

<pre caption="Udzielanie członkom grupy wheel prawa do wykonywania polecenia emerge">
%wheel  localhost = /usr/bin/emerge
</pre>

<p>
Można rozszerzyć pojedynczy wpis o wiele komend (zamiast tworzyć oddzielne wpisy
dla każdej komendy). Na przykład, żeby pozwolić przykładowemu użytkownikowi
uruchamiać nie tylko <c>emerge</c>, ale również polecenia <c>ebuild</c> i
<c>emerge-webrsync</c> jako superużytkownik, należy wpisać:
</p>

<pre caption="Zezwolenie na wykonanie wielu komend">
antoni localhost = /usr/bin/emerge, /usr/bin/ebuild, /usr/sbin/emerge-webrsync
</pre>

<p>
Można również określić całą komendę z jej parametrami, a nie tylko samą ścieżkę
pliku wykonywalnego. Jest to przydatne, jeżeli istnieje potrzeba ograniczenia
wykonywania komendy tylko do pewnych opcji. W <c>sudo</c> jest również możliwość
użycia wyrażeń regularnych w opisie komendy.
</p>

<p>
Spróbujmy:
</p>

<pre caption="Próba uaktualnienia systemu poprzez sudo">
$ <i>sudo emerge -uDN world</i>

We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.

Password: <comment>(należy wpisać własne hasło, nie superużytkownika)</comment>
</pre>

<p>
Hasło, którego wymaga <c>sudo</c> jest domyślnie własnym hasłem użytkownika.
Upewni nas to, że pozostawiony przypadkowo bez opieki terminal nie zostanie
wykorzystany przez nikogo do złych celów.
</p>

<p>
Należy mieć na uwadze, że <c>sudo</c> nie zmienia zawartości zmiennej
środowiskowej <c>${PATH</c>. Dowolna polecenie umieszczone po <c>sudo</c> jest
uruchamiane w środowisku użytkownika. Jeśli użytkownik musi uruchomić jakieś
polecenie, np. z katalogu <path>/sbin</path>, powinien sudo podać pełną ścieżkę
(chyba, że ma już <path>/sbin</path> we własnej zmiennej <c>${PATH}</c>):
</p>

<pre caption="Użycie pełnej ścieżki do programu">
$ <i>sudo /usr/sbin/emerge-webrsync</i>
</pre>

</body>
</section>
<section>
<title>Posługiwanie się aliasami</title>
<body>

<p>
W większych systemach potrzeba wprowadzania wszystkich użytkowników ze
wszystkimi kombinacjami komend i komputerów może być nieco przerażającym
zajęciem. Aby ułatwić administrację pliku <path>/etc/sudoers</path> można
definiować <e>aliasy</e>. Sposób deklaracji aliasów jest prosty:
</p>

<pre caption="Deklaracja aliasów w /etc/sudoers">
Host_Alias hostalias = hostname1, hostname2, ... <comment>Aliasy komputerów</comment>
User_Alias useralias = user1, user2, ...         <comment>Aliasy użytkowników</comment>
Cmnd_Alias cmndalias = command1, command2, ...   <comment>Aliasy komend</comment>
</pre>

<p>
Aliasem, który jest zawsze zdefiniowany, dla dowolnej kategorii jest alias
<c>ALL</c> (aby ułatwić rozróżnienie pomiędzy aliasami i nie-aliasami dobrą
praktyką jest używać wielkich liter w nazwach aliasów). Jak nietrudno zgadnąć,
alias <c>ALL</c> jest aliasem wszystkich możliwych wartości.
</p>

<p>
Dobrym przykładem użycia aliasu <c>ALL</c> jest zezwolenie <e>dowolnemu</e>
użytkownikowi na użycie komendy <c>shutdown</c>, pod warunkiem, że użytkownik
jest zalogowany lokalnie:
</p>

<pre caption="Zezwolenie na wykonanie komendy shutdown">
ALL localhost = /sbin/shutdown
</pre>

<p>
Innym przykładem mogłoby być zezwolenie użytkownikowi <c>antoni</c> na
wykonywanie komendy <c>emerge</c>, niezależnie od tego z jakiej maszyny jest
zalogowany:
</p>

<pre caption="Zezwolenie na wykonywanie programu niezależnie od lokalizacji">
antoni ALL = /usr/bin/emerge
</pre>

<p>
Bardziej interesującym przykładem jest zdefiniowanie grupy użytkowników, którzy
mogą uruchamiać programy administracyjne (takie jak <c>emerge</c> i
<c>ebuild</c>) i grupy administratorów, którzy mogą zmieniać hasła użytkownikom
- ale nie superużytkownikowi!
</p>

<pre caption="Użycie aliasów dla użytkowników i komend">
User_Alias  <i>SOFTWAREMAINTAINERS</i> = antoni, john, danny
User_Alias  <i>PASSWORDMAINTAINERS</i> = antoni, sysop
Cmnd_Alias  <i>SOFTWARECOMMANDS</i>    = /usr/bin/emerge, /usr/bin/ebuild
Cmnd_Alias  <i>PASSWORDCOMMANDS</i>    = /usr/bin/passwd [a-zA-Z]*, !/usr/bin/passwd root

<i>SOFTWAREMAINTAINERS</i>  localhost = <i>SOFTWARECOMMANDS</i>
<i>PASSWORDMAINTAINERS</i>  localhost = <i>PASSWORDCOMMANDS</i>
</pre>

</body>
</section>
<section>
<title>Uruchamianie komend z uprawnieniami innego zwykłego użytkownika</title>
<body>

<p>
Użytkownicy mają również możliwość wykonywania komend z uprawnieniami innych
zwykłych użytkowników (nie superużytkownika). Może to być bardzo przydatne,
jeśli są w systemie uruchomione programy z uprawnieniami pewnego użytkownika
(np. <c>apache</c> dla serwera WWW) i istnieje potrzeba wykonywania przy tych
programach czynności administracyjnych przez pewnych użytkowników (np. zabicie
procesów zombie).
</p>

<p>
Wewnątrz pliku <path>/etc/sudoers</path> umieszcza się użytkownika
(użytkowników) pomiędzy <c>(</c>&nbsp;i&nbsp;<c>)</c> przed listą komend:
</p>

<pre caption="Wykonywanie jako ktoś inny niż superużytkownik">
użytkownik komputer = (uruchom-jako) komendy
</pre>

<p>
Na przykład, żeby umożliwić użytkownikowi <c>antoni</c> wykonanie komendy
<c>kill</c> jako użytkownik <c>apache</c> albo <c>rane</c>:
</p>

<pre caption="Przykład zezwolenia na wykonywanie jako nie-superużytkownik">
Cmnd_Alias KILL = /bin/kill, /usr/bin/pkill

antoni ALL = (apache, rane) KILL
</pre>

<p>
Z takim ustawieniem, użytkownik może wybrać, z uprawnieniami jakiego użytkownika
uruchomi komendę <c>sudo&nbsp;-u</c>:
</p>

<pre caption="Wykonanie pkill jako użytkownik apache">
$ <i>sudo -u apache pkill apache</i>
</pre>

<p>
Można stworzyć alias definiujący użytkowników, z których uprawnieniami będzie
można uruchamiać programy używając dyrektywy <c>Runas_Alias</c>. Jej użycie jest
identyczne jak pozostałych aliasów omówionych wcześniej.
</p>

</body>
</section>
<section>
<title>Hasła i ustawienia domyślne</title>
<body>

<p>
Domyślnie <c>sudo</c> prosi użytkownika o podanie jego własnego hasła w celu
identyfikacji. Po jednorazowym podaniu hasła <c>sudo</c> pamięta je przez pięć
minut, pozwalając użytkownikowi skupić się na swojej pracy raczej niż na
ciągłym wprowadzaniu hasła.
</p>

<p>
To zachowanie może być oczywiście zmienione. Używając dyrektywy
<c>Defaults:</c> w pliku <path>/etc/sudoers</path> można zdefiniować domyślne
zachowanie dla danego użytkownika.
</p>

<p>
Na przykład, żeby zmienić domyślne pięć minut na zero (nigdy nie zapamiętuj
hasła):
</p>

<pre caption="Zmiana czasu ważności hasła">
Defaults:antoni timestamp_timeout=0
</pre>

<p>
Wartość <c>-1</c> powodowałaby bezterminowe zapamiętanie hasła (do czasu
restartu systemu).
</p>

<p>
Można też zdefiniować ustawienie wymagające podania hasła użytkownika, z którego
uprawnieniami komenda ma być uruchomiona, a nie własnego hasła. Osiąga się to
przez użycie opcji <c>runaspw</c>. W poniższym przykładzie ustalamy również
ilość dozwolonych pomyłek we wprowadzaniu hasła (czyli ilość razy z jaką hasło
może być wprowadzana zanim <c>sudo</c> zakończy swe działanie z błędem), zamiast
domyślnych trzech:
</p>

<pre caption="Wymóg podania hasła użytkownika, zamiast własnego">
Defaults:john runaspw, passwd_tries=2
</pre>

<p>
Kolejną interesującą cechą jest możliwość utrzymywania zmiennej <c>DISPLAY</c>
ustawionej tak, abyśmy mogli uruchamiać narzędzia graficzne:
</p>

<pre caption="Utrzymywanie zmiennej DISPLAY">
Defaults:john env_keep=DISPLAY
</pre>

<p>
Za pomocą dyrektywy <c>Defaults:</c> można zmienić całe tuziny domyślnych
ustawień. Więcej informacji można znaleźć w <c>man sudoers</c> - szukając wpisu
dotyczącego <c>Defaults</c>.
</p>

<p>
Jeśli natomiast istnieje potrzeba zezwolenia użytkownikowi na wykonywanie komend
bez podawania jakiegokolwiek hasła, należy te komendy poprzedzić opcją
<c>NOPASSWD:</c>, w taki sposób:
</p>

<pre caption="Zezwolenie na uruchamianie emerge bez monitowania o hasło">
antoni localhost = NOPASSWD: /usr/bin/emerge
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Użytkowanie sudo</title>
<section>
<title>Sprawdzanie uprawnień</title>
<body>

<p>
Aby dowiedzieć się, jakie posiada się uprawnienia, należy uruchomić
<c>sudo&nbsp;-l</c>:
</p>

<pre caption="Sprawdzanie uprawnień">
$ <i>sudo -l</i>
User antoni may run the following commands on this host:
    (root)   /usr/libexec/xfsm-shutdown-helper
    (root)   /usr/bin/emerge
    (root)   /usr/bin/passwd [a-zA-Z]*
    (root)   !/usr/bin/passwd root
    (apache) /usr/bin/pkill
    (apache) /bin/kill
<comment>Oznacza to, że użytkownik antoni może wykonać powyższe komendy z
uprawnieniami użytkowników podanych w nawiasie</comment>
</pre>

<p>
Jeśli w <path>/etc/sudoers</path> są zdefiniowane komendy nie wymagające
podawania żadnego hasła, ich wylistowanie też nie będzie wymagało hasła. W innym
przypadku użytkownik zostanie poproszony o podanie hasła, jeśli nie jest ono
zapamiętane przez <c>sudo</c>.
</p>

</body>
</section>
<section>
<title>Wydłużanie czasu ważności hasła</title>
<body>

<p>
Domyślnie, jeśli użytkownik podał swoje hasło w celu uwierzytelnienia się przed
<c>sudo</c>, jest ono pamiętane przez pięć minut. Jeśli użytkownik chce wydłużyć
ten czas, może uruchomić <c>sudo&nbsp;-v</c>, żeby wyzerować licznik czasu
ważności hasła. W takim przypadku minie kolejne pięć minut, zanim <c>sudo</c>
znów poprosi o hasło.
</p>

<pre caption="Wydłużanie czasu ważności hasła">
$ <i>sudo -v</i>
</pre>

<p>
Odwrotny skutek odniesie <c>sudo&nbsp;-k</c>: hasło zostanie zapomniane
natychmiast.
</p>

</body>
</section>
</chapter>
</guide>

