<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/openrc-migration.xml,v 1.5 2009/02/15 07:57:59 rane Exp $ -->

<guide link="/doc/pl/openrc-migration.xml" lang="pl">
<title>Migracja na Baselayout-2 i OpenRC</title>

<author title="Autor">
  <mail link="cardoe"/>
</author>
<author title="Autor">
  <mail link="nightmorph"/>
</author>
<author title="Ofiarodawca">
  <mail link="uberlord"/>
</author>
<author title="Tłumacz">
  <mail link="shpaq@puszkin.org">Michał Laszuk</mail>
</author>

<abstract>
Przewodnik ten pokazuje jak dokonać migracji z baselayout-1 na baselayout-2 i
OpenRC.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.8</version>
<date>2009-02-11</date>

<chapter>
<title>Tło</title>
<section>
<title>Czym jest baselayout?</title>
<body>

<p>
Baselayout dostarcza podstawowego zestawu plików takich jak
<path>/etc/hosts</path>, niezbędnych do prawidłowej pracy wszystkich
systemów. Dostarcza również podstawowego układu systemu plików używanego
przez Gentoo (na przykład katalogi <path>/etc</path>, <path>/var</path>,
<path>/usr</path>, <path>/home</path>).
</p>

</body>
</section>
<section>
<title>Czym jest OpenRC?</title>
<body>

<p>
OpenRC jest bazującym na zależnościach systemem uruchomieniowym, który może
działać z dowolnym init dostarczanym przez system, zazwyczaj
<path>/sbin/init</path>. Nie jest on jednak zastępstwem dla
<path>/sbin/init</path>. Standardowy init używany w Gentoo Linux to
<c>sys-apps/sysvinit</c>, natomiast Gentoo/FreeBSD korzysta z init FreeBSD
zawartego w pakiecie <c>sys-freebsd/freebsd-sbin</c>.
</p>
</body>
</section>
<section>
<title>Po co więc migrować?</title>
<body>

<p>
Pierwotnie system uruchomieniowy Gentoo był wbudowany w baselayout 1 i w
całości napisany w bashu. Doprowadziło to do kilku ograniczeń. Na
przykład, pewne wywołania systemowe muszą być dostępne podczas
uruchamiania systemu, a to wymagało dodania wywołań opartych na języku C.
Wywołania te były dowiązane statycznie i stale zmuszały system
uruchomieniowy do nadawania wspomnianego dostępu.
</p>

<p>
Dodatkowo, gdy Gentoo rozszerzyło się na inne platformy, takie jak
Gentoo/FreeBSD czy Gentoo Embedded stało się niemożliwym, by wymagać systemu
uruchomieniowego bazującego na bashu. Doprowadziło to do powstania baselayout 2,
który napisany został w C i wymaga jedynie powłoki zgodnej z POSIX. Podczas
rozwoju baselayout 2 ustalono, że najlepiej będzie, jeśli baselayout po
prostu dostarczy podstawowych plików i układu systemu plików dla Gentoo, a
system uruchomieniowy zostanie przeniesiony do osobnego pakietu. Tak powstał
OpenRC.
</p>

<p>
OpenRC jest rozwijane głównie przez <uri link="http://roy.marples.name/openrc">
Roya Marples'a</uri> i wspiera wszystkie istniejące obecnie wariacje Gentoo
(na przykład Gentoo Linux Gentoo/FreeBSD, Gentoo Embedded i Gentoo Vserver) oraz
inne platformy takie jak FreeBSD i NetBSD.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Migracja na OpenRC</title>
<section>
<body>

<p>
Migracja do OpenRC jest całkiem prosta; będzie ona umieszczona jako część
zwyczajowych aktualizacji systemu dokonywanych za pomocą menadżera pakietów.
Właściwie najważniejszy krok ma miejsce już po zainstalowaniu nowych pakietów
<c>>=sys-apps/baselayout-2</c> i <c>sys-apps/openrc</c>. Przed ponownym
uruchomieniem komputera, <e>krytycznym</e> krokiem jest wykonanie
<c>dispatch-conf</c> i upewnienie się, że pliki w <path>/etc</path> zostały
zaktualizowane. <brite>Pominięcie tego może doprowadzić do nieuruchamiającego
się systemu</brite> i wymagać będzie użycia Gentoo LiveCD, w celu
przeprowadzenia poniższych kroków, które naprawią niedziałający system.
</p>

<p>
Gdy już wszystkie pliki konfiguracyjne zostaną zaktualizowane, zostanie jeszcze
kilka rzeczy, które koniecznie należy sprawdzić przed ponownym uruchomieniem
komputera.
</p>

</body>
</section>

<section id="rc_conf">
<title>/etc/conf.d/rc</title>
<body>

<p>
Plik <path>/etc/conf.d/rc</path> jest przestarzały i wszystkie ustawienia w nim
zapisane muszą zostać przeniesione do odpowiadających ustawień w
<path>/etc/rc.conf</path>. Należy przeczytać oba pliki <path>/etc/rc.conf</path>
i <path>/etc/conf.d/rc</path>, a następnie przenieść ustawienia. Po wykonaniu
migracji należy skasować plik <path>/etc/conf.d/rc</path>.
</p>

</body>
</section>

<section id="modules">
<title>Moduły jądra</title>
<body>

<p>
Zazwyczaj gdy istniała potrzeba załadowania pewnych modułów automatycznie
podczas uruchamiania systemu, były one umieszczone w
<path>/etc/modules.autoload.d/kernel-2.6</path> razem z wybranymi parametrami. W
baselayout-2 plik ten nie jest już używany. Zamiast niego wszystkie dodatkowe
moduły ładowane podczas startu i ich parametry, niezależnie od wersji jądra,
zostały umieszczone w pliku <path>/etc/conf.d/modules</path>.
</p>

<p>
Przykładem starego stylu konfiguracji będzie:
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
ivtv
cx88_dvb video_br=2
</pre>

<p>
Konwersja powyższego skutkować będzie poniższym:
</p>

<pre caption="/etc/conf.d/modules">
<comment># Moduły ładowane automatycznie podczas uruchamiania</comment>
modules_2_6="ivtv cx88_dvb"
<comment># Parametry modułów</comment>
module_cx88_dvb_args_2_6="video_br=2"
</pre>

<p>
W powyższych przykładach moduły i ich parametry będą działać jedynie na jądrach
z serii 2.6. Nowy sposób konfiguracji pozwala na łatwą kontrolę nad modułami i
ich parametrami bazującą na wersji jądra.
</p>

<p>
Bardziej szczegółowy przykład:
</p>

<pre caption="Szczegółowy przykład /etc/conf.d/modules">
<comment># Always load ochi1394 and ieee1394, no matter the kernel
version</comment>
modules="ohci1394 ieee1394"
<comment># Only load tun and usbserial for 2.6.x series kernels</comment>
modules_2_6="tun usbserial"
<comment># Only load cx88_dvb for 2.6.23 kernels</comment>
modules_2_6_23="cx88_dvb"
<comment># Only load ivtv for 2.6.23-gentoo-r5</comment>
modules_2_6_23_gentoo_r5="ivtv"

<comment># For 2.6.23-gentoo-r5, pass video_br=2 to cx88_dvb</comment>
module_cx88_dvb_args_2_6_23_gentoo_r5="video_br=2"
<comment># For 2.6.x series kernels, always pass vendor and product</comment>
module_usbserial_args_2_6="vendor=0x1410 product=0x2110"
<comment># Always pass debug to ieee1394</comment>
module_ieee1394_args="debug"
</pre>

<note>
Należy zwrócić uwagę na różnicę pomiędzy <b>module_</b> a <b>modules_</b>.
</note>

</body>
</section>
<section id="boot">
<title>Poziom uruchomieniowy boot</title>
<body>

<p>
Poziom uruchomieniowy <c>boot</c> dokonuje kilku ważnych kroków dla każdego
komputera. Sprawdza na przykład, czy główny system plików jest zamontowany w
trybie zapisu i odczytu, czy partycje zostały sprawdzone i nie zawierają błędów,
czy punkty montowania są dostępne i czy system plików <path>/proc</path> został
uruchomiony podczas startu.
</p>

<p>
W OpenRC usługi zarządzające woluminami urządzeń blokowych nie są teraz
uruchamiane standardowo podczas startu systemu. Zaliczają się do nich usługi
takie jak: lvm, raid, swap, device-mapper (dm), dm-crypt, evms i podobne. Należy
upewnić się, że skrypty init odpowiednie dla powyższych usług umieszczone są w
poziomie uruchomieniowym <c>boot</c>. W przeciwnym wypadku, możliwym jest, że
system nie będzie w stanie się uruchomić!
</p>

<p>
Podczas gdy ebuild OpenRC będzie usiłował dokonać migracji ustawień
automatycznie, konieczne będzie sprawdzenie czy wszystko przebiegło prawidłowo:
</p>

<pre caption="Sprawdzenie wszystkich usług poziomu uruchomieniowego boot">
# <i>ls -l /etc/runlevels/boot/</i>
</pre>

<p>
Jeżeli wynik powyższego polecenia nie pokaże root, procfs, mtab, swap i fsck,
należy wykonać poniższe polecenia, aby dodać je do poziomu uruchomieniowego
<c>boot</c>:
</p>

<pre caption="Dodawanie krytycznych usług do poziomu uruchomieniowego boot">
# <i>rc-update add root boot</i>
# <i>rc-update add procfs boot</i>
# <i>rc-update add mtab boot</i>
# <i>rc-update add fsck boot</i>
# <i>rc-update add swap boot</i>
</pre>

<p>
W przypadku gdy użytkownik korzysta z mdraid bądź lvm, a nie widnieją one na
powyższej liście, konieczne będzie wykonanie poniższych poleceń, by dodać te
usługi do poziomu uruchomieniowego <c>boot</c>:
</p>

<pre caption="Dodawanie brakujących usług zarządzania woluminami do poziomu uruchomieniowego boot">
# <i>rc-update add raid boot</i>
# <i>rc-update add lvm boot</i>
</pre>

</body>
</section>
<section>
<title>Udev</title>
<body>

<p>
OpenRC nie uruchamia <c>udev</c> domyślnie, obecnie musi on być dodany na poziom
uruchomieniowy <c>sysinit</c>. Ebuild OpenRC powinien wykryć czy <c>udev</c> był
wcześniej używany i doda go do <c>sysinit</c> automatycznie. Dla pewności jednak
warto sprawdzić czy to się naprawdę wydarzyło i czy <c>udev</c> tam się naprawdę
znajduje.
</p>

<pre caption="Sprawdzanie czy udev jest uruchamiany">
# <i>ls -l /etc/runlevels/sysinit</i>
lrwxrwxrwx 1 root root 14 2009-01-29 08:00 /etc/runlevels/sysinit/udev -> \
/etc/init.d/udev
</pre>

<p>
Jeśli <c>udev</c> nie ma na liście, dodajemy go tam:
</p>

<pre caption="Dodawanie udev na poziom uruchomieniowy sysinit">
# <i>rc-update add udev sysinit</i>
</pre>

</body>
</section>
<section>
<title>Sieć</title>
<body>

<p>
Z powodu rozdzielenia baselayout i OpenRC na dwa różne pakiety, skrypt startowy
net.eth0 może zostać usunięty podczas procesu aktualizacji. Aby zastąpić ten
skrypt init należy wykonać poniższe:
</p>

<pre caption="Ponowne tworzenie brakującego skryptu net.eth0">
# <i>cd /etc/init.d</i>
# <i>ln -s net.lo net.eth0</i>
</pre>

<p>
W przypadku, gdy brakuje jakichkolwiek innych skryptów startowych sieci, należy
dodać je ponownie, zwyczajnie zastępując <c>eth0</c> nazwą brakującego
urządzenia sieciowego.
</p>

<p>
Także, <path>/etc/conf.d/net</path> nie korzysta już ze składni znanej z basha.
Należy więc przyjrzeć się plikowi
<path>/usr/share/doc/openrc/net.example</path>, w którym podano instrukcje
dotyczące konfiguracji. Konwersja powinna być stosunkowo nieskomplikowana. Dla
przykładu konfiguracja statycznie przypisanego IP powinna zostać zmieniona jak
niżej:
</p>

<pre caption="Stary styl konfiguracji /etc/conf.d/net">
config_eth0=( "192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255" )
routes_eth0=( "default via 192.168.1.100" )
</pre>

<pre caption="Nowy styl konfiguracji /etc/conf.d/net">
config_eth0="192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255"
routes_eth0="default via 192.168.1.100"
</pre>

</body>
</section>
<section>
<title>Zegar</title>
<body>

<p>
Ustawienia zegara zmieniły nazwę z <path>/etc/conf.d/clock</path> na natywne
narzędzie systemowe regulujące zegar. Oznacza to, że w Linuksie będzie to
<path>/etc/conf.d/hwclock</path>, natomiast we FreeBSD będzie to
<path>/etc/conf.d/adjkerntz</path>. Nazwa skryptu init umieszczonego w
<path>/etc/init.d/</path> także została zmieniona na odpowiednią dla danego
systemu. Należy się więc upewnić, że jest umieszczona w odpowiednim poziomie
uruchomieniowym.
</p>

<p>
Dodatkowo, zmienna <c>TIMEZONE</c> nie jest już obecna w wymienionym pliku.
Można ją teraz znaleźć w pliku <path>/etc/timezone</path>. Jeśli plik ten
nie istnieje, oczywiście należy go utworzyć umieszczając w nim swoją strefę
czasową. Należy więc jeszcze raz przyjrzeć się obydwu plikom aby być pewnym ich
poprawności.
</p>

<p>
Właściwa wartość dla tego pliku jest odpowiadająca strefie czasowej
użytkownika ścieżka z <path>/usr/share/zoneinfo</path>. Na przykład, osoba
mieszkająca na wschodnim wybrzeżu Stanów Zjednoczonych Ameryki powinna użyć
ustawienia:
</p>

<pre caption="/etc/timezone">
America/New_York
</pre>

</body>
</section>

<section>
<title>XSESSION</title>
<body>

<p>
Zmienna XSESSION nie jest już obecna w <path>/etc/rc.conf</path>. Pakiet
<c>x11-apps/xinit</c> dostarcza teraz plik <path>/etc/env.d/90xsession</path>,
który może zostać użyty do ustawienia zmiennej XSESSION.
</p>

<p>
Zmienna ta <b>NIE</b> zostanie przeniesiona automatycznie, konieczna więc będzie
edycja pliku <path>/etc/env.d/90xsession</path>.
</p>

<impo>
Po utworzeniu pliku w <path>/etc/env.d</path> koniecznym jest wykonanie
<c>env-update</c>. Aby nowe ustawienia odniosły skutek należy wylogować się i
zalogować ponownie.
</impo>

</body>
</section>
<section>
<title>EDITOR / PAGER</title>
<body>

<p>
Zmienna EDITOR nie jest już obecna w <path>/etc/rc.conf</path>. Obydwie zmienne
EDITOR i PAGER ustawione są domyślnie w <path>/etc/profile</path>. Namawia się
użytkowników do ustawienia ich samodzielnie wedle potrzeb w pliku
<path>~/.bashrc</path> (lub odpowiedniku) bądź utworzenia pliku
<path>/etc/env.d/99editor</path> i ustawienie tam zmiennych.
</p>

<impo>
Po utworzeniu pliku w <path>/etc/env.d</path>, koniecznym jest, aby wykonać
<c>env-update</c>. Aby nowe ustawienia odniosły skutek należy wylogować się i
zalogować ponownie. W przypadku gdy zmienna została ustawiona w
<path>~/.bashrc</path>, można wczytać nowe ustawienia wykonując <c>source
~/.bashrc</c>.
</impo>

</body>
</section>
<section>
<title>Logowanie uruchomienia systemu</title>
<body>

<p>
Poprzednio, aby logować proces uruchamiania systemu musieliśmy użyć pakietu
<c>app-admin/showconsole</c>. Obecnie jednak, OpenRC posiada wewnętrzny system
logowania. Nie musimy więc stosować sztuczek jakich używa <c>showconsole</c>.
Aby logować informacje z uruchamiania systemu wystarczy ustawić odpowiednią
zmienną w pliku <path>/etc/rc.conf</path>. Logi pojawią się w pliku
<path>/var/log/rc.log</path>.
</p>

<pre caption="Uaktywnienia logowania w pliku /etc/rc.conf">
rc_logger="YES"
</pre>

</body>
</section>
<section>
<title>Zakończenie</title>
<body>

<p>
W momencie gdy wszystkie pliki konfiguracyjne i skrypty rozruchowe zostaną
zaktualizowane, ostatnią rzeczą którą należy zrobić jest ponowne uruchomienie
komputera. Jest to konieczne, ponieważ informacje o stanie systemu nie są
zachowywane podczas aktualizacji. Należy więc dostarczyć ich poprzez ponowne
uruchomienie.
</p>

</body>
</section>
</chapter>
</guide>
