<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: 
/home/cvs/cvsroot/docs/translated_docs/handbook/hb-install-config.xml,v 1.2 
2004/02/15 06:21:14 ccpz Exp $ -->

<!-- rev 1.29 by Benny -->

<sections>
<section>
<title>檔案系統資訊</title>
<subsection>
<title>什麼是 fstab？</title>
<body>

<p>
在 Linux 中，所有在系統中被使用的分割區要被列在 <path>/etc/fstab</path> 之中。在
這個檔案之中包含了這些分割區的掛載點(他們在檔案系統中哪裡被存取)，他們如何掛載(
一些特別的參數)，以及何時掛載(要不要自動掛載，一般使用者可不可以掛載等)。
</p>

</body>
</subsection>
<subsection>
<title>建立 /etc/fstab</title>
<body>

<p>
<path>/etc/fstab</path> 
使用特別的語法。每一列包含六個欄位，以空格(一個以上)、tab或兩者同時用來分隔。每
一個欄位有他自己的定義：
</p>

<ul>
<li>
  第一個欄位設定<b>分割區</b>的位置(裝置的路徑)
</li>
<li>
  第二個欄位設定分割區要在哪個<b>掛載點</b>被掛載
</li>
<li>
  第三個欄位設定分割區的<b>檔案系統</b>
</li>
<li>
  第四個欄位設定 <c>mount</c> 要掛載時所使用的<b>掛載參數</b>。
  因為不同的檔案系統有不同的參數，你要去查詢 manpage (<c>man mount</c>) 來取得完
  整的參數列表。這些參數之間以逗號分隔。
</li>
<li>
  第五個欄位被 <c>dump</c> 用來決定這個分割區需不需要被傾印。一般而言你可以設成
  <c>0</c>(零)
</li>
<li>
  第六個欄位讓 <c>fsck</c> 決定當系統不正常的關機時，檔案系統<b>檢查</b>的順序。
  根目錄要被設成 <c>1</c> 而其他則要設成 <c>2</c>，如果檔案系統不需要被檢查的
  話，則設成 <c>0</c>。 
</li>
</ul>

<p>
接下來啟動 <c>nano</c> (或你慣用的編輯器)來建立<path>/etc/fstab</path>：
</p>

<pre caption="開啟 /etc/fstab">
# <i>nano -w /etc/fstab</i>
</pre>

<p>
接著來看看我們如何設定 <path>/boot</path> 分割區。這只是一個範例，所以如果你的
系統不需要 <path>/boot</path> 分割區（如：PPC），不要直接複製它。
</p>

<p>
在我們的 x86 分割範例中 <path>/boot</path> 是位於 <path>/dev/hda1</path> 分割區
中，而且使用 <c>ext2</c> 檔案系統。他不應該在開機時自動掛載 (<c>noauto</c>)，但
是需要被檢查，所以我們會像這樣設定：
</p>

<pre caption="/etc/fstab 中 /boot 設定範例">
/dev/hda1   /boot     ext2    noauto        1 2
</pre>

<p>
為了增進效能，大部分使用者都會在要掛載的分割區掛載參數中設定 <c>noatime</c>，
因為這會讓系統不更新上次檔案的存取時間(一般來說你並不需要這個功能)，因此可以加快
速度：
</p>

<pre caption=" etc/fstab 中改進過的 /boot 設定範例">
/dev/hda1   /boot     ext2    noauto,noatime    1 2
</pre>

<p>
接下來，我們繼續完成下面這幾行，包括 <path>/boot</path>，<path>/</path> 還有置換
區：
</p>

<pre caption="/etc/fstab 中三行設定">
/dev/hda1   /boot     ext2    noauto,noatime    1 2
/dev/hda2   none      swap    sw                0 0
/dev/hda3   /         ext3    noatime           0 1
</pre>

<p>
最後，你要加入 <path>/proc</path>，<c>tmpfs</c> (必要)，以及CD-ROM。如果你還有其
他的裝置，也加到檔案中：
</p>

<pre caption="完整的 /etc/fstab">
/dev/hda1   /boot     ext2    noauto,noatime    1 2
/dev/hda2   none      swap    sw                0 0
/dev/hda3   /         ext3    noatime           0 1

none        /proc     proc    defaults          0 0
none        /dev/shm  tmpfs   defaults          0 0

/dev/cdroms/cdrom0    /mnt/cdrom    auto      noauto,user    0 0
</pre>

<p>
檔案系統設定 <c>auto</c> 讓 <c>mount</c> 猜測使用哪個檔案系統(建議在可卸除的裝置
使用，因為他們可能有多種檔案系統)，而 <c>user</c> 參數讓一般使用者也能掛載 CD。
</p>

<p>
如果你使用 SPARC 的話,你也要將下面這一行加入 <path>/etc/fstab</path> 中：
</p>

<pre caption="在 /etc/fstab 加入 openprom 檔案系統">
none        /proc/openprom  openpromfs    defaults      0 0
</pre>

<p>
如果你要需要 <c>usbfs</c>，加入下面這一行：
</p>

<pre caption="在 /etc/fstab 加入 usbfs 檔案系統">
none        /proc/bus/usb   usbfs         defaults      0 0
</pre>

<p>
重新檢查一次 <path>/etc/fstab</path>，儲存離開後進行下面的步驟。
</p>

</body>
</subsection>
</section>
<section>
<title>網路資訊</title>
<subsection>
<title>主機名稱，領域名稱等</title>
<body>

<p>
接下來的步驟其中之一就是給你的電腦一個名稱。這步驟相當簡單，但是<e>許多</e>人很
難找到一個合適的名稱，記得你設定的名字在之後還是可以改變的，這可以讓你快一點完成
。一般而言，你可以設定電腦名稱為 <c>tux</c> 而領域名稱為 <c>homenetwork</c>。
</p>

<p>
我們會使用這些設定來當做範例。首先設定主機名稱：
</p>

<pre caption="設定主機名稱">
# <i>echo tux &gt; /etc/hostname</i>
</pre>

<p>
其次設定領域名稱：
</p>

<pre caption="設定領域名稱">
# <i>echo homenetwork &gt; /etc/dnsdomainname</i>
</pre>

<p>
如果你有 NIS 領域名稱的話(你不知道這是什麼的話，那你就不用設定它)，你也需要去設
定它：
</p>

<pre caption="設定 NIS 領域名稱">
# <i>echo nis.homenetwork &gt; /etc/nisdomainname</i>
</pre>

<p>
現在加入 <c>domainname</c> script 到預設的 runlevel 中：
</p>

<pre caption="將 domainname 加到預設 runlevel">
# <i>rc-update add domainname default</i>
</pre>

</body>
</subsection>
<subsection>
<title>設定網路</title>
<body>

<p>
在你覺得 "嗯，我現在已經弄好了" 之前，你要記得在你剛開始安裝 Gentoo 時設定的網路
只是在安裝過程中使用。現在你要為你的 Gentoo 系統設定網路。
</p>

<p>
所有的網路設定都集合在 <path>/etc/conf.d/net</path>。如果你不知道如何設定的話，你
會覺得這些語法相當不直觀，但不用擔心，我們會解釋每樣事情的 :)
</p>

<p>
首先用你慣用的編輯器開啟 <path>/etc/conf.d/net</path> (這個範例中使用 
<c>nano</c>)：
</p>

<pre caption="開啟 /etc/conf.d/net 來編輯">
# <i>nano -w /etc/conf.d/net</i>
</pre>

<p>
你會看到的第一個變數是 <c>iface_eth0</c>。他的語法如下：
</p>

<pre caption="iface_eth0 語法">
iface_eth0="<i>&lt;你的 IP&gt;</i> broadcast <i>&lt;你的廣播位址&gt;</i> netmask 
<i>&lt;網路遮罩&gt;</i>"
</pre>

<p>
如果你使用 DHCP (自動取得 IP)，你只要設定 <c>iface_eth0</c> 為 <c>dhcp</c>。
如果你使用 rp-pppoe (例如 ADSL)，則設定為 <c>up</c>。如果你要手動設定但是對上
面的一些專有名詞不了解的話，請閱讀
<uri link="?part=1&amp;chap=3#doc_chap4_sect3">了解網路專有名詞</uri>這一部分。
</p>

<p>
接這我們給你三個例子；第一個使用 DHCP，第二個設定靜態 IP (192.168.0.2) 以及網路遮
罩 255.255.255.0，廣播位址 192.168.0.255 還有閘道 192.168.1.1，第三個則是適合 
rp-pppoe 的設定：
</p>

<pre caption="Examples for /etc/conf.d/net">
<comment>(適用 DHCP)</comment>
iface_eth0="dhcp"

<comment>(適用靜態 IP)</comment>
iface_eth0="192.168.0.2 broadcast 192.168.0.255 netmask 255.255.255.0"
gateway="eth0/192.168.0.1"

<comment>(適用 rp-pppoe)</comment> 
iface_eth0="up" 
</pre>

<p>
如果你有數個網路介面，新增額外的 <c>iface_eth</c> 變數，例如 <c>iface_eth1</c>，
<c>iface_eth2</c> 等。而 <c>gateway</c> 變數在你只有一個閘道時並不用增加。
</p>

<p>
現在儲存設定然後離開，繼續下面的步驟。
</p>

</body>
</subsection>
<subsection>
<title>開機時自動啟動網路</title>
<body>

<p>
讓你的網路介面開機時自動啟動，你要罷底下這些加入預設的 runlevel 中。如果你使用
 PCMCIA 介面則跳過這一步驟，PCMCIA 是由 PCMCIA 啟動 script 來啟動。
</p>

<pre caption="加入 net.eth0 到預設的 runlevel">
# <i>rc-update add net.eth0 default</i>
</pre>

<p>
如果你有數個網路介面，你要建立對應的 <path>net.eth1</path>，<path>net.eth2</path> 等。
你可以使用 <c>ln</c> 來完成：
</p>

<pre caption="建立額外的 initscripts">
# <i>cd /etc/init.d</i>
# <i>ln -s net.eth0 net.eth1</i>
# <i>rc-update add net.eth1 default</i>
</pre>

</body>
</subsection>
<subsection>
<title>寫入網路資訊</title>
<body>

<p>
你需要告訴 Linux 關於你的網路的資訊。這在 <path>/etc/hosts</path> 中定義幫助你將
名稱伺服器上查不到的主機名稱反解為 IP。例如你的網路中有三台電腦，分別叫做 
<c>jenny</c> (192.168.0.5)，<c>benny</c> (192.168.0.6) 和 <c>tux</c> 
(192.168.0.7 - 這台電腦)，你要開啟 <path>/etc/hosts</path> 然後填入這些設定：
</p>

<pre caption="開啟 /etc/hosts">
# <i>nano -w /etc/hosts</i>
</pre>

<pre caption="填入網路資訊">
127.0.0.1     localhost
192.168.0.5   jenny.homenetwork jenny
192.168.0.6   benny.homenetwork benny
192.168.0.7   tux.homenetwork tux
</pre>

<p>
如果你的電腦是唯一的一部，或是名稱伺服器有全部的反解，底下這一行已經足夠了：
</p>

<pre caption="適合單一電腦或是有完整反解的電腦的 /etc/hosts">
127.0.0.1     localhost
</pre>

<p>
儲存設定然後離開，繼續下面的步驟。
</p>

<p>
如果你沒有 PCMCIA，你可以繼續進行 <uri link="#doc_chap3">系統資訊</uri>。
PCMCIA 使用者繼續下面的主題。
</p>

</body>
</subsection>
<subsection>
<title>非必要：讓 PCMCIA 工作</title>
<body>

<p>
PCMCIA 使用者首先要安裝 <c>pcmcia-cs</c> 封裝：
</p>

<pre caption="安裝 pcmcia-cs">
# <i>emerge pcmcia-cs</i>
</pre>

<p>
當 <c>pcmcia-cs</c> 安奘好以後，新增 <c>pcmcia</c> 到<e>預設</e> runlevel：
</p>

<pre caption="新增 pcmcia 到預設 runlevel">
# <i>rc-update add pcmcia default</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>系統資訊</title>
<body>

<p>
Gentoo 使用 <path>/etc/rc.conf</path> 來設定整個系統的一般設定。
開啟 <path>/etc/rc.conf</path> 然後享受裡面完善的注解 :)
</p>

<pre caption="開啟 /etc/rc.conf">
# <i>nano -w /etc/rc.conf</i>
</pre>

<p>
就如同你所看到的，這個檔案有完善的注解讓你設定必要的參數。特別要注意 
<c>KEYMAP</c> 變數，如果你設定錯誤的 <c>KEYMAP</c> 當你再用鍵盤輸入時會得到錯誤
的結果。
</p>

<note>
以 USB 為主的 SPARC 系統或相容的系統可能要選擇 i386 keymap (例如 "us") 而不是 
"sunkeymap"。
</note>

<p>
PPC 在大部份的系統上使用 x86 的 keymaps。想要使用 ADB keymaps 的使用者將需要在開
機時啟用核心內的 ADB keycode sendings 然後在 <path>rc.conf</path> 內設定一個
mac/ppc keymap。
</p>

<p>
設定好 <path>/etc/rc.conf</path> 以後，存檔然後離開。接下來繼續
<uri link="?part=1&amp;chap=9">設定開機管理員</uri>
</p>

</body>
</section>
</sections>
