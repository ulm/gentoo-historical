<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/tw/handbook/Attic/hb-working-behaviour.xml,v 1.12 2004/09/01 01:00:21 ccpz Exp $ -->

<!-- rev 1.17 by ccpz -->

<sections>
<section>
<title>設定檔案保護</title>
<subsection>
<title>保護？</title>
<body>

<p>
Portage 知道 "保護檔案" 的道理。這代表著，當您更新軟體時，它不會即刻的將老舊的設
定檔覆蓋，但是會通知您有更新的版本。這即將成為設定檔的好用工具（檔案都放在
<path>/etc</path>）。
</p>

<p>
雖然它不會覆蓋這些設定檔，但是它將會建立新的檔案命名為 
<path>._cfg000_&lt;name&gt;</path> <path>&lt;name&gt;</path> 為本來的檔名。然後
將會隨著使用者比較和更改。您可以使用 <c>etc-update</c> 指令來讓您的更新動作更加
便利。我們將再稍後講解 <c>etc-update</c>。
</p>

</body>
</subsection>
<subsection>
<title>定義 CONFIG_PROTECT</title>
<body>

<p>
Portage 不能以個別檔案的方式保護。但是他可以保護整個目錄。 <c>CONFIG_PROTECT</c>
的變數將會是儲存這些目錄的變數，包括保護目錄以下的子目錄。<c>CONFIG_PROTECT</c>
變數是在 <path>/etc/make.globals</path> 的檔案內定義，但是如果您想要更改它，您應
該定義 <path>/etc/make.conf</path> （為了確保統一性，所有的 Portage 設定都會在
<path>/etc/make.conf</path> 的檔案內）。
</p>

<pre caption="設定 CONFIG_PROTECT 範例">
CONFIG_PROTECT="/etc /usr/share/config /usr/kde/3.1/share/config"
</pre>

<p>
如果您想要保護某個目錄，但是不是所有的子目錄，您可以定義 
<c>CONFIG_PROTECT_MASK</c> 的變數來 "反保護" 這些。當 
<path>/etc/make.globals</path> 將定義為預設的變數，您應該從 
<path>/etc/make.conf</path> 內進行更改：
</p>

<pre caption="設定 CONFIG_PROTECT_MASK 範例">
CONFIG_PROTECT_MASK="/etc/init.d"
</pre>

<p>
關於更多的檔案保護可以在 <c>emerge</c> 的現在說明找到：
</p>

<pre caption="索取更多關於檔案報戶的說明">
# <i>emerge --help config</i>
</pre>

</body>
</subsection>
<subsection>
<title>etc-update</title>
<body>

<p>
<c>etc-update</c> 是一個用來融合 <path>._cfg0000_&lt;name&gt;</path> 設定檔。它
提供的是互動性的設定然後可以自動融入設定檔更變。
</p>

<p>
執行 <c>etc-update</c> 是非常直接的：
</p>

<pre caption="執行 etc-update">
# <i>etc-update</i>
</pre>

<p>
當要融入一些更變時，您將會看到一個等待更新保護檔案的列表畫面。以下您將會看到一些
可能的選項：
</p>

<pre caption="etc-update 選項">
Please select a file to edit by entering the corresponding number.
              (-1 to exit) (-3 to auto merge all remaining files)
                           (-5 to auto-merge AND not use 'mv -i'): 
</pre>

<p>
當您輸入 <c>-1</c>，<c>etc-update</c> 將不會採取任何動作然後離開。如果您輸入
<c>-3</c> 或是 <c>-5</c>，<e>所有</e> 被列出的設定檔將會被覆蓋到新的版本。但是更
重要的是您之前所設定的設定檔將不會被自動更新。要查看更變很簡單，只要輸入那個檔案
左邊的編號。
</p>

<p>
我們將選擇 <path>/etc/pear.conf</path> 為講解範例：
</p>

<pre caption="更新相關設定檔">
Beginning of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
<comment>[...]</comment>
End of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
1) Replace original with update
2) Delete update, keeping original as is
3) Interactively merge original with update
4) Show differences again
</pre>

<p>
您將可以查看兩個檔案之間的差別。如果您認為可以沒有問題的直接更新設定檔，輸入
<c>1</c>。如果您認為更新的設定檔不必要，輸入 <c>2</c>。如果您想要互動式的更新您目
前的設定檔，輸入 <c>3</c>。
</p>

<p>
雖然講解互動式的融入很重要。但是為了完整，我們將會列出以下您可以使用的指令進行
互動式的融入兩個檔案。您將會看到兩行字（一個為原來的，另一個為更新的）然後輸入
指令進入畫面：
</p>

<pre caption="互動式融入指令">
ed:     編輯兩個版本，並且使用一個 header。
eb:     編輯然後使用兩個版本。
el:     編輯然後使用左邊的版本。
er:     編輯然後使用右邊的版本。
e:      編輯新的版本。
l:      使用左邊的版本。
r:      使用右邊的版本
s:      安靜的包含常使用的行數。
v:      詳細的顯示包含長使用的行數。
q:      離開。
</pre>

<p>
當您完成重要的設定檔更新時，您現在可以自動更新其他的設定檔了。<c>etc-update</c>
將會關閉，因為他找不到更多可更新的設定檔了。
</p>

</body>
</subsection>
</section>
<section>
<title>網路選項</title>
<subsection>
<title>全球對映站</title>
<body>

<p>
當 Gentoo 正成為受歡迎的版本，選擇的對映站也是相當必要的。Portage 使用三個變數
來執行更新的工作：一個是 rsync 對映（用來同步您的 Portage），一個是 distfile
（用來下載原始碼）另一個則是已編譯的套件對映。
</p>

<p>
所有可用的 distfiles 對映站將可以到 <uri link="/main/en/mirrors.xml">Gentoo
對應站網頁</uri> 找到。您也可以使用 <c>mirrorselect</c> 方便您設定。但是讓我們先
看看這些個別的變數﹍
</p>

<p>
<c>SYNC</c> 變數包含著您所想使用的 rsync 對映清單。舉例來說，要選擇使用
<uri>rsync://rsync.namerica.gentoo.org/gentoo-portage</uri>，您將需要按照以下方
式在 <path>/etc/make.conf</path> 定義：
</p>

<pre caption="在 /etc/make.conf 定義 SYNC">
SYNC="rsync://rsync.namerica.gentoo.org/gentoo-portage"
</pre>

<p>
<c>GENTOO_MIRRORS</c> 變數將包含著您所想使用的 distfiles 對映清單。舉例來說，
<uri>ftp://ibiblio.org/pub/Linux/distributions/gentoo</uri> 為第一選擇，而
<uri>http://www.gtlib.cc.gatech.edu/pub/gentoo</uri> 為第二，
您將需要按照以下方式在 <path>/etc/make.conf</path> 定義：
</p>

<pre caption="在 /etc/make.conf 定義 GENTOO_MIRRORS">
GENTOO_MIRRORS="ftp://ibiblio.org/pub/Linux/distributions/gentoo
                http://www.gtlib.cc.gatech.edu/pub/gentoo"
</pre>


<p>
<c>PORTAGE_BINHOST</c> 變數將包含著您所想使用的已編譯套件對映清單。舉例來說，
要使用 <uri>ftp://login:pass@grp.mirror.site/pub/grp/i686/athlon-xp</uri>，
您將需要按照以下方式在 <path>/etc/make.conf</path> 定義：
</p>

<pre caption="在 /etc/make.conf 定義 PORTAGE_BINHOST">
PORTAGE_BINHOST="ftp://login:pass@grp.mirror.site/pub/grp/i686/athlon-xp"
</pre>

</body>
</subsection>
<subsection>
<title>套件鏡像</title> 
<body> 
    
<p> 
許多套件有包含 "mirror://" 的 SRC 變數。這種套件在許多主機上有他的原始碼
(就像 sourceforge，gnu，...)。當 Portage 遇到這種的 SRC 變數，他會從
<path>/etc/portage/mirrors</path> 中找出真正的鏡像站，而如果沒找到的話，就在
<path>/usr/portage/profiles/thirdpartymirrors</path> 之中找。
</p> 
    
<p> 
你可以在 <path>/etc/portage/mirrors</path> 中宣告你最常用的鏡像站。例如說，你希
望套件需要從 sourceforge 下載時使用 <uri>http://keihanna.dl.sourceforge.net</uri>
，你可以輸入：
</p> 
    
<pre caption="/etc/portage/mirrors 範例"> 
sourceforge http://keihanna.dl.sourceforge.net 
</pre> 
    
<p> 
你也可以宣告特殊的 <c>local</c> 鏡像，這個鏡像<e>總是</e>會被先檢查，即使是他本
身的 SRC 變數沒有 "mirror://" 或是他已經宣告他不應該被鏡像。
</p> 
    
</body> 
</subsection> 
<subsection> 
<title>Mirrorselect</title>
<body>

<p>
如果您想使用 <c>mirrorselect</c>，先安裝它（如果您還沒安裝）。
</p>

<pre caption="安裝 mirrorselect">
# <i>emerge mirrorselect</i>
</pre>

<p>
現在您可以使用 <c>mirrorselect</c> 自動選擇最適合您的對映站，或是手動的從清單內
選取。關於更多的 <c>mirrorselect</c> 說明，從文字模式執行 <c>mirrorselect</c>，
您將會看到 <c>mirrorselect</c> 的介紹。
</p>

<pre caption="執行 mirrorselect">
# <i>mirrorselect</i>
</pre>

</body>
</subsection>
<subsection>
<title>下載</title>
<body>

<p>
Portage 使用 <c>FETCHCOMMAND</c> 和 <c>RESUMECOMMAND</c> 的變數來下載檔案。您將
可以在 <path>/etc/make.conf</path> 和 <c>/etc/make.globals</c> 看到。Portage
將使用 <c>wget</c> 為預設：
</p>

<pre caption="預設的 FETCHCOMMAND &amp; RESUMECOMMAND">
FETCHCOMMAND="/usr/bin/wget -t 5 --passive-ftp -P \${DISTDIR} \${URI}"
RESUMECOMMAND="/usr/bin/wget -c -t 5 --passive-ftp -P \${DISTDIR} \${URI}"
</pre>

<p>
<c>{DISTDIR}</c> 的變數是所以下載的檔案的儲存目錄（
<path>/usr/portage/distfiles</path>），而 <c>${URI}</c> 的變數為 Portage
需要下載檔案。
</p>

<p>
當 Portage 使用預設的 <c>wget</c>，您可以利用定義 <c>http_proxy</c> 和
<c>ftp_proxy</c>（全部小寫）的方式開啟 <c>wget</c> 的代理伺服器設定。雖然您也可
以在 <path>/etc/make.conf</path> 裡面設定，但是我們建議您將 <c>http_proxy</c>
和 <c>ftp_proxy</c> 定義成環境變數。請參考 <uri link="?part=2&amp;chap=6">環境
變數</uri> 解釋如何定義系統的環境變數。
</p>

</body>
</subsection>
<subsection>
<title>設定 rsync</title>
<body>

<p>
<c>rsync</c> 是用來在 <c>emerge sync</c> 的時候更新 Portage 用。Portage 的
<c>rsync</c> 使用著三個變數，它們分別是 <c>RSYNC_EXCLUDEFROM</c>，
<c>RSYNC_RETIRES</c>和<c>RSYNC_TIMEOUT</c>。
</p>

<p>
一個防止在 <c>emerge sync</c> 時"保護"安裝程序被更新或是移除的方法就是使用
<c>RSYNC_EXLUDEFROM</c> 變數。他可以在 <path>/etc/portage/rsync_excludes</path>
內設定一個 <c>rsync</c> 的檔案保護。雖然我們不建議您使用這個方法，因為您如果不小
心的話會破壞系統的相依性。我們將在稍後講解建議使用的方式， <c>PORTDIR_OVERLAY</c>
。
</p>

<pre caption="RSYNC_EXCLUDEFROM 變數">
RSYNC_EXCLUDEFROM="/etc/portage/rsync_excludes"
</pre>

<p>
當 <c>rsync</c> 失敗的時候，他將會按照所設定次數去重複嘗試。這個可以在
<c>RSYNC_RETRIES</c> 裡面設定，預設為 <c>3</c>：
</p>

<pre caption="RSYNC_RETRIES 變數">
RSYNC_RETRIES="3"
</pre>

<p>
如果您正在使用的 rsync 伺服器非常的慢，<c>rsync</c> 可以設定停止接收的時間設定。
這將是在還沒等到回應前的等待秒數。這將使用 <c>RSYNC_TIMEOUT</c> 變數，預設為
<c>180</c>：
</p>

<pre caption="RSYNC_TIMEOUT 變數">
RSYNC_TIMEOUT="180"
</pre>

</body>
</subsection>
</section>
<section>
<title>目錄位置</title>
<subsection>
<title>介紹</title>
<body>

<p>
關於 Portage 的所有東西都是可設定的，包括所有 Portage 需要存放檔案的目錄。要更改
<path>/etc/make.globals</path> 預設的目錄，您需要正確的在 
<path>/etc/make.conf</path> 內進行更改。
</p>

<warn>
如果您需要更改到別的目錄，記得目錄的最後不可以是 <path>/</path>！
</warn>

</body>
</subsection>
<subsection>
<title>Portage Tree</title>
<body>

<p>
Portage tree 是定義在 <c>PORTDIR</c> 的變數。預設為 <path>/usr/portage</path>：
</p>

<pre caption="PORTDIR 變數">
PORTDIR="/usr/portage"
</pre>

<p>
如果您想要在官方的 Portage 旁邊放置一個本地 Portage tree，您需要定義
<c>PORTDIR_OVERLAY</c> 變數。這些定義在這個變數內的目錄將不會在 
<c>emerge sync</c> 時被影響：放在本地的目錄內將不會被更新或是移除，是您自己的
Portage tree。
</p>

<pre caption="PORTDIR_OVERLAY 變數">
PORTDIR_OVERLAY="/usr/local/portage"
</pre>

</body>
</subsection>
<subsection>
<title>Distfiles</title>
<body>

<p>
下載原始碼的目錄（叫做 distfiles）是由 <c>DISTDIR</c> 的變數所定義。它的預設為
<path>#{PORTDIR}/distfiles</path>：
</p>

<pre caption="DISTDIR 變數">
DISTDIR="${PORTDIR}/distfiles"
</pre>

</body>
</subsection>
<subsection>
<title>套件和 RPM</title>
<body>

<p>
已經編譯完成的套件是由 <c>PKGDIR</c> 的變數定義的。預設是放在 <path>
${PORTDIR}/packages</path>：
</p>

<pre caption="PKGDIR 變數">
PKGDIR="${PORTDIR}/packages"
</pre>

<p>
RPM 的位置（沒錯，有些套件被提供為 RPM）是定義在 <c>RPMDIR</c> 的變數。它的預設
是放在 <path>${PORTDIR}/rpm</path>：
</p>

<pre caption="The RPMDIR variable">
RPMDIR="${PORTDIR}/rpm"
</pre>

</body>
</subsection>
<subsection>
<title>暫時性的 Portage 檔案</title>
<body>

<p>
Portage 使用暫時性的位址來存放編譯時需要的檔案。這個位置是定義在
<c>PORTAGE_TMPDIR</c> 的變數。它的預設是放在 <path>/var/tmp</path>：
</p>

<pre caption="PORTAGE_TMPDIR 變數">
PORTAGE_TMPDIR="/var/tmp"
</pre>

<p>
以預設來說，Portage 將會建立一個 <path>portage</path> 的目錄在 
<c>PORTAGE_TMPDIR</c> 內。這將可以在 <c>BUILD_PREFIX</c> 的變數內定義：
</p>

<pre caption="BUILD_PREFIX 變數">
BUILD_PREFIX="${PORTAGE_TMPDIR}/portage"
</pre>

<p>
如果您打算要更改位置，記得確認您的暫時性目錄有足夠的剩餘空間：當編譯大的軟體套件
時，這個目錄有可能會增加到 2Gb 或是更多！
</p>

</body>
</subsection>
<subsection>
<title>紀錄</title>
<body>

<p>
<c>PORT_LOGDIR</c> 是一個特別的變數。預設將關閉它。當您定義它時，Porage
將會針對每個套件建立紀錄檔並且放在這個目錄下：
</p>

<pre caption="PORT_LOGDIR 變數">
PORT_LOGDIR="/var/log/portage"
</pre>

</body>
</subsection>
</section>
<section>
<title>其他 Portage 選項</title>
<subsection>
<title>Nice Value</title>
<body>

<p>
Portage 提供的編譯 nice-value（編譯套件的優先度）。如果您想要將編譯放在比較優先
的位置，您將需要在 <c>PORTAGE_NICENESS</c> 的變數定義一個正值的號碼：
</p>

<pre caption="PORTAGE_NICENESS 變數">
PORTAGE_NICENESS="3"
</pre>

</body>
</subsection>
<subsection>
<title>SLOT 套件和自動清除</title>
<body>

<p>
在多數的情況下，您需要多個不同版版的套件可用於您的系統。Portage 讓您可以定義
<c>SLOT</c> 變數來支援。身為一個使用者，您不需要知道他是如何工作，但是您必須知道
它的存在。
</p>

<p>
如果您正在安裝一個更新版本的套件，Portage將會檢查 <c>SLOT</c> 變數是否針對此套件
定義。如果是真的，那麼 <c>SLOT</c> 變數就會將這個套件區分長兩個不同的套件（新版
及舊版），Portage 將不會影響到舊的套件。
</p>

<p>
但是，如果 <c>SLOT</c> 的變數一樣（大部份都是這樣），那麼舊的套件將會被一除掉。
如果使用者需要干涉此項移除動作，Portage 將會在移除動作前進行倒數。這個倒數的變數
是定義於 <c>CLEAN_DELAY</c> 變數，預設為 <c>5</c> 秒：
</p>

<pre caption="CLEAN_DELAY 變數">
CLEAN_DELAY="5"
</pre>

<p>
如果您不想要 Portage 自動移除舊的版本（叫做"清除"），您可以將 <c>AUTOCLEAN</c>
的變數設為 <c>no</c>：
</p>

<pre caption="AUTOCLEAN 變數">
AUTOCLEAN="no"
</pre>

</body>
</subsection>
<subsection>
<title>編譯相關變數</title>
<body>

<p>
我們已經了解了不少變數，但是還沒結束。安裝過 Gentoo 的使用者一定都知道 
<c>CHOST</c>，<c>CFLAGS</c> 和 <c>CXXFLAGS</c> 變數，這些是被來使用於編譯器來針
對自訂和效能化套件。
</p>

<p>
關於更多這些的變數可以在 <c>gcc</c> 說明頁或是線上的 <uri
link="http://gcc.gnu.org/onlinedocs/">GCC 線上說明</uri> 內找到。
</p>

<pre caption="索取關於CHOST，CFLAGS 和 CXXFLAGS 的資訊">
# <i>info gcc</i>
<comment>（選擇 "Invoking gcc"）</comment>
<comment>（選擇 "Optimize options"）</comment>
</pre>

<p>
如果 <c>DEBUGBUILD</c> 被定義了，Portage 將會為了讓除臭更簡易而不編譯二進位檔案。
這將會拖慢您的系統並且增加您的磁碟空間。
</p>

<pre caption="DEBUGBUILD 變數">
<comment># 不要將這個設為 "false"; 直接移除調這個變數。Portage</comment>
<comment># 不會檢查它的數值，只檢查它是否存在。</comment>
DEBUGBUILD="true"
</pre>

<p>
<c>MAKEOPTS</c> 變數是在執行 <c>make</c> 時所使用，這個工具能在編譯時減少許多複
雜的步驟。定義時，通常是為了要可以在同時執行多個編譯工作（特別是您有多個 CPU，
或是正在使用 <c>distcc</c>）。
</p>

<p>
要讓 <c>make</c> 可以同時執行三個編譯，將 <c>MAKEOPTS</c> 變數設為 <c>-j3</c>：
</p>

<pre caption="MAKEOPTS 變數">
MAKEOPTS="-j3"
</pre>

<p>
<path>/etc/make.conf</path> 內的 <c>ROOT</c> 變數不應該被定義。但是 Portage
將會檢查這個不太算環境變數的變數然後看套件應該被安裝到那裡。當然預設的目錄為
<path>/</path>。就和您當初所看到的 <c>gnumeric</c> 範例裡面看到的
<path>/mnt/gentoo</path> 一樣。而不是在您安裝時所執行的系統上：
</p>

<pre caption="ROOT 變數">
# <i>ROOT="/mnt/gentoo" emerge gnumeric</i>
</pre>

</body>
</subsection>
<subsection>
<title>輸出格式</title>
<body>

<p>
By default, Portage colors its output to improve readability. If you do not want
this, set the <c>NOCOLOR</c> variable to <c>true</c>:
預設的 Portage 將會輸出顏色來增加閱讀時的簡便性。如果您不想要這個功能，將
<c>NOCOLOR</c> 的變數設為 <c>true</c>：
</p>

<pre caption="NOCOLOR 變數">
NOCOLOR="true"
</pre>

</body>
</subsection>
</section>
<section>
<title>資源</title>
<subsection>
<title>說明文件</title>
<body>

<p>
如果您需要一個快速的可參考變數清單，請參考 <c>make.conf</c> 的說明文件：
</p>

<pre caption="查看 make.conf 的說明文件">
# <i>man make.conf</i>
</pre>

</body>
</subsection>
<subsection>
<title>註解的範例</title>
<body>

<p>
<path>/etc/make.conf</path> 檔案包含著很多註解，包括您會感興趣的範例。但是，很
多使用者不會互動式的更新他們的 <path>/etc/make.conf</path>，您可以在
<uri
link="http://www.gentoo.org/cgi-bin/viewcvs.cgi/*checkout*/portage/cnf/make.conf?rev=HEAD&amp;cvsroot=gentoo-src&amp;content-type=text/plain">Online 
ViewCVS Repository</uri> 查看線上最新的 <path>/etc/make.conf</path> 檔案
</p>

</body>
</subsection>
</section>
</sections>
