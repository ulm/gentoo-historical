<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/tw/handbook/Attic/hb-install-kernel.xml,v 1.11 2004/03/28 02:31:29 bennyc Exp $ -->

<!-- rev 1.44 by Benny -->

<sections>
<section>
<title>時區</title>
<body>

<p>
為了讓你的系統知道它的位置在那裡，你將需要設定你的系統時區。到
<path>/usr/share/zoneinfo</path> 尋找你的時區，然後使用 <c>ln</c> 建立一個連接到
<path>/etc/localtime</path>。
</p>

<pre caption="設定時區資訊">
# <i>ls /usr/share/zoneinfo</i>
<comment>（假設你要使用 GMT）</comment>
# <i>ln -sf /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>安裝核心原始碼</title>
<subsection>
<title>選擇一個核心</title>
<body>

<p>
Linux 的核心是所有版本的最中心，也是最重要的。他位於使用者程式和系統硬體之間。
Gentoo 提供使用者很多可用的核心原始碼。你可以到 <uri
link="/doc/tw/gentoo-kernel.xml">Gentoo 核心 指南</uri> 查看我們所提供的核心。
</p>

<p>
使用 x86 系統的使用者，我們提供著 <c>vanilla-sources</c>（常常被其他 Linux 核心
開發者用來開發成其他核心的基礎版本），<c>gentoo-sources</c>（針對效能調整過的
核心），<c>gentoo-dev-sources</c>（核心 2.6 針對效能，穩定度所調整過的核心），
<c>xfs-sources</c>（使用最新的 XFS 支援），<c>gs-sources</c> （針對伺服器功能調
整），<c>gaming-sources</c>（針對遊戲玩家調整），<c>development-sources</c>（
2.6 vanilla 核心原始碼）﹍
</p>

<p>
使用 alpha 系統的使用者，我們提供著 <c>vanilla-source</c> （常常被其他 Linux
核心開發者用來開發成其他的基礎版本），<c>alpha-sources</c>（針對 alpha 的使用者
所調整過的核心原始碼）和 <c>compaq-sources</c> （使用 Redhat Alpha 的核心，由
Compaq 維護）。
</p>

<p>
使用 sparc 系統的使用者，我們提供著 <c>vanilla-source</c> （常常被其他 Linux
開發者用來開發成其他核心的基礎版本），<c>development-sources</c>（預設的 2.6
核心原始碼）和 <c>sparc-sources</c> （針對 sparc 的使用者所調整過的原始碼）。
</p>

<p>
使用 MIPS 系統的使用者可以選擇 <c>mips-sources</c> （適用於 MIPS 架構的預設核心
）和 <c>mips-prepatch-sources</c> （prerelease kernel tree）。
</p>

<p>
使用 AMD64 系統的使用者，我們提供著 <c>gentoo-dev-sources</c> （v2.6 核心，針對
amd64 相關修正穩定度，效能，和硬體支援）。
</p>

<p>
其他架構的使用著應該使用特別調整過的架構如： <c>hppa-sources</c> （HPPA） 或是
<c>ppc-sources</c>（PowerPC）。
</p>

<p>
如果你正在使用無網路的安裝，你則只能選擇我們提供的少數核心。以下的列表將列出一些
無網路安裝狀態下的核心。
</p>
 
<table>
  <tr>
    <th>架構</th>
    <th>可用的核心原始碼</th>
  </tr>
  <tr>
    <ti>x86</ti>
    <ti>vanilla-sources-2.4.24</ti>
  </tr>
  <tr>
    <ti>ppc</ti>
    <ti>ppc-sources-2.4.24-r2，ppc-development-sources-2.6.3-r2</ti>
  </tr>
  <tr>
    <ti>sparc</ti>
    <ti>sparc-sources</ti>
  </tr>
  <tr>
    <ti>amd64</ti>
    <ti>gentoo-dev-sources-2.6.3-r2</ti>
  </tr>
</table>

<p>
選擇適合你的核心原始檔然後使用 <c>emerge</c> 安裝。
</p>

<p>
下面的例子我們將安裝 <c>vanilla-sources-2.4.24</c>（因為這個核心原始碼適合無網路
狀態的安裝）。當然，請更換為你想要安裝的核心：
</p>

<pre caption="安裝核心原始碼">
# <i>emerge =vanilla-sources-2.4.24</i>
</pre>

<p>
當你查看 <path>/usr/src</path> 你將會看到一個 <path>linux</path> 的連接連到
你所選的核心：
</p>

<pre caption="觀看核心原始碼目錄連接">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt;linux-2.4.24
</pre>

<p>
如果你碰到的不是這樣（例：連接連到其他的核心目錄）你將需要在繼續往下之前更改連接
：
</p>

<pre caption="更改核心連接目錄">
# <i>rm /usr/src/linux &amp;&amp; ln -s /usr/src/linux-2.4.24 /usr/src/linux</i>
</pre>

<p>
現在我們該設定以及編譯你的核心了。所有架構的使用者都可以使用 <c>genkernel</c> 完
成此項步驟，並且將會以和 LiveCD 一樣的通用的方式進行編譯。我們將先解釋如何手動編
譯因為這是自訂你的環境的最佳方法。
</p>

<p>
如果你想要手動編譯你的核心，請從 <uri link="#doc_chap3">預設：手動設定</uri> 
繼續。如果你想要使用 <c>genkernel</c> 請從 <uri 
link="#doc_chap4">其他選擇：使用 genkernel</uri> 繼續。
</p>

</body>
</subsection>
</section>
<section>
<title>預設：手動設定</title>
<subsection>
<title>介紹</title>
<body>

<p>
手動設定核心常常被 Linux 使用者認為最難完成的步驟。雖然不假 -- 但是當你手動編譯
幾次核心後，你應該不會覺得它有多難 ;)
</p>

<p>
但是，<e>唯一</e> 的重點就是：你必須要了解你的系統才可以開始手動編譯。系統上多數
的資料可以從 <path>/proc/pci</path> （如果可以的話使用 <c>lspci</c>）查看。你也
可以執行 <c>lsmod</c> 看看 LiveCD 使用那些核心模組（這是一個不錯的暗示，教你該
開啟那個選項）。
</p>

<p>
現在到你的核心原始碼目錄然後執行 <c>make menuconfig</c>。這將會啟動一個
ncurses 的設定選單。
</p>

<pre caption="開始 menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
你將會看到一大串的設定部份。我們將列出一些你一定要啟用的選項（不然 Gentoo 無法
完善的工作）。
</p>

</body>
</subsection>
<subsection>
<title>必須開啟的選項</title>
<body>

<p>
首先，開啟 development and experimental code/drivers。你將需要這個，不然
你將無法看見一些其他重要的程式碼或是驅動程式。
</p>

<pre caption="選擇 experimental code/drivers">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
現在到 <c>File Systems</c> 然後選擇要支援的檔案系統。記得<e>不要</e>將它們編成模
組。還有 <c>Virtual memory</c>，<c>/proc file system</c>，<c>/dev file 
system</c> + <c>Automatically munt at boot</c>：
</p>

<pre caption="選擇相關檔案系統">
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot

<comment>（除非你是用 2.6 的核心，記得不要選取這個功能：）</comment>
  [ ] /dev/pts file system for Unix98 PTYs

<comment>（按照你系統所需要的檔案系統開啟以下選項）</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<note>
2.6 核心的使用者可以在 <c>File systems</c> 的子部份 <c>Pseudo filesystems</c> 
下內找到上面所談到的選項。
</note>

<p>
如果你需要透過 PPPoE 連線到網路或是數據機撥接，你將需要以下的核心選項：
</p>

<pre caption="選擇 PPPoE 相關驅動程式">
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports
</pre>

<note>
2.6 核心的使用者可以在 <c>Device Drivers</c> 的子部份 <c>Networking support</c>
找到上面所談到的選項。
</note>

<p>
雖然 <c>PPP over Ethernet</c> 選項只是有在 <c>rp-pppoe</c> 設定為核心 PPPoE
時需要，但是這兩個壓縮的選項不會造成錯誤。
</p>

<note>
2.6 核心的使用者可以在 <c>Device Drivers</c> 下找到上面所談到的選項。
</note>

<p>
如果你需要，不要忘了為你的網路卡加入核心的支援。
</p>

<p>
現在，依照你的架構，你應該需要開啟其他更多的選項：
</p>

<ul>
<li><uri link="#doc_chap3_sect3">建議啟用的 x86 選項</uri></li>
<li><uri link="#doc_chap3_sect4">建議啟用的 Alpha 選項</uri></li>
<li><uri link="#doc_chap3_sect5">建議啟用的 HPPA 選項</uri></li>
<li><uri link="#doc_chap3_sect6">建議啟用的 PPC 選項</uri></li>
<li><uri link="#doc_chap3_sect7">建議啟用的 SPARC 選項</uri></li>
<li><uri link="#doc_chap3_sect8">建議啟用的 MIPS 選項</uri></li>
<li><uri link="#doc_chap3_sect9">建議啟用的 AMD64 選項</uri></li>
</ul>

</body>
</subsection>
<subsection>
<title>建議啟用的 x86 選項</title>
<body>

<p>
如果你有一個支援 HyperThreading(tm) 的 Intel CPU，或是有多個 CPU，你應該啟用
"Symmetric multi-processing support"：
</p>

<pre caption="啟用 SMP 支援">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
當你完成核心設定時，請從 <uri link="#compiling">編譯和安裝</uri> 繼續。
</p>

</body>
</subsection>
<subsection>
<title>建議啟用的 Alpha 選項</title>
<body>

<p>
以下為我們建議為 Alpha 使用者所建議的選項：
</p>

<pre caption="Alpha 相關選項">
General setup ---&gt;
  &lt;*&gt; SRM environment through procfs
  &lt;*&gt; Configure uac policy via sysctl

Plug and Play configuration ---&gt;
  &lt;*&gt; Plug and Play support
  &lt;M&gt;   ISA Plug and Play support

SCSI support ---&gt;
  SCSI low-level drivers ---&gt;
    &lt;*&gt; SYM53C8XX Version 2 SCSI support (NEW)
    &lt;*&gt; Qlogic ISP SCSI support

Network device support ---&gt;
  Ethernet (10 or 100 Mbit) ---&gt;
    &lt;M&gt; DECchip Tulip (dc21x4x) PCI support
    &lt;M&gt; Generic DECchip &amp; DIGITAL EtherWORKS PCI/EISA
    &lt;M&gt; EtherExpressPro/100 support (eepro100)
    &lt;M&gt; EtherExpressPro/100 support (e100)
  Ethernet (1000 Mbit) ---&gt;
    &lt;M&gt; Alteon AceNIC
      [*] Omit support for old Tigon I
    &lt;M&gt; Broadcom Tigon3
  [*] FDDI driver support
  &lt;M&gt; Digital DEFEA and DEFPA
  &lt;*&gt; PPP support
    &lt;*&gt; PPP Deflate compression

Character devices ---&gt;
  [*] Support for console on serial port
  [*] Direct Rendering Manager

File systems ---&gt;
  &lt;*&gt; Kernel automounter version 4 support
  Network File Systems ---&gt;
    &lt;*&gt; NFS
      [*] NFSv3 client
      &lt;*&gt; NFS server
      [*] NFSv3 server
  Partition Types ---&gt;
    [*] Advanced partition selection
    [*] Alpha OSF partition support
  Native Language Support
    &lt;*&gt; NLS ISO 8859-1

Sound ---&gt;
  &lt;M&gt; Sound card support
    &lt;M&gt; OSS sound modules
      [*] Verbose initialisation
      [*] Persistent DMA buffers
      &lt;M&gt; 100% Sound Blaster compatibles
</pre>

<p>
當你完成核心設定時，請從 <uri link="#compiling">編譯和安裝</uri> 繼續。
</p>

</body>
</subsection>
<subsection>
<title>建議啟用的 HPPA 選項</title>
<body>

<p>
如果你有一個 HIl 滑鼠或是鍵盤，不要忘了編入核心的支援。
</p>

<pre caption="啟用 HIL 支援">
Input core support ---&gt;
  [*] Keyboard support
  [*] Mouse support
  [*] Event interface support
</pre>

<p>
再加上顯示驅動程式的支援：
</p>

<pre caption="顯示驅動程式的支援">
Graphics support ---&gt;
  [*] Support for frame buffer devices
      [*] HP STI frame buffer device support
  Console display driver support ---&gt;
      [*] STI text console
</pre>

<p>
如果你的 HIL port 沒有滑鼠，只需要開啟基礎的支援：
</p>

<pre caption="基礎 HIL 支援">
HIL support ---&gt;
  [*] HIL Keyboard (basic) support
</pre>

<p>
如果你想要開啟 <e>全部</e> 的 HIL 支援，開啟以下參數：
</p>

<pre caption="全部 HIL 支援">
HIL support ---&gt;
  [*] HP System Device Controller i8042 Support
  [*] HIL MLC Support
  [*] HIL Keyboard (full) support
  [*] HIL Mouse &amp; Pointer support
</pre>

<p>
當你完成核心設定時，請從 <uri link="#compiling">編譯和安裝</uri> 繼續。
</p>

</body>
</subsection>
<subsection>
<title>建議啟用的 PPC 選項</title>
<body>

<p>
首先，關閉 ADB raw keycodes：
</p>

<pre caption="關閉 ADB raw keycodes">
Macintosh Device Drivers ---&gt;
  [ ] Support for ADB raw keycodes
</pre>

<p>
然後選擇正確的 RTC 支援（<e>關閉</e> <c>Enhanced RTC</c> 選項）：
</p>

<pre caption="啟用正確的 RTC 選項">
Character devices ---&gt;
  [ ] Enhanced RTC

General setup ---&gt;
  [*] Support for /dev/rtc
</pre>

<p>
OldWord 的使用者將需要 HFS 支援來讓他們可以複製編譯好的核心到 MacOS 分割區。
</p>

<pre caption="啟用 HFS 支援">
File Systems ---&gt;
  [*] HFS Support
</pre>

<p>
當你完成核心設定時，請從 <uri link="#compiling">編譯和安裝</uri> 繼續。
</p>

</body>
</subsection>
<subsection>
<title>啟用建議的 SPARC 選項</title>
<body>

<p>
首先啟用正確的 bus 支援：
</p>

<pre caption="啟用 SBUS/UPA">
Console drivers ---&gt;
  Frame-buffer support ---&gt;
    [*] SBUS and UPA framebuffers             
      [*] Creator/Creator3D support     <comment>（只是用於多個 Ultras 的 UPA slot 介面卡）</comment>
    [*] CGsix (GX,TurboGX) support      <comment>(Only for SBUS slot adapter used in many SPARCStations)</comment>
</pre>

<p>
當然你也會要 OBP 的支援：
</p>

<pre caption="啟用 OBP 支援">
Misc Linux/SPARC drivers ---&gt;
  [*]  /dev/openprom device support
</pre>

<p>
你也需要 SCSI 相關的支援：
</p>

<pre caption="Activating SCSI-specific support">
SCSI support ---&gt;
  SCSI low-level drivers ---&gt;
    &lt;*&gt; Sparc ESP Scsi Driver             <comment>（只適用於 SPARC ESP 版上的 SCSI 介面卡）</comment>
    &lt;*&gt; PTI Qlogic, ISP Driver            <comment>（只適用於 PTI 或是 QLogic 上的 SBUS SCSI 控制卡）</comment>
    &lt;*&gt; SYM53C8XX Version 2 SCSI support  <comment>（只適用於 Ultra 60 版上的 SCSI 介面卡）</comment>
</pre>

<p>
要支援你的網路卡，選擇以下其中一個：
</p>

<pre caption="啟用網路卡支援">
Network device support ---&gt;
  Ethernet (10 or 100Mbit) ---&gt;
    &lt;*&gt; Sun LANCE support                   <comment>（只適用於 SPARCStation，老就一點的 Ultra 系統，和 Sbus 選項）</comment>
    &lt;*&gt; Sun Happy Meal 10/100baseT support  <comment>（只適用於 Ultra；也支援著在 PCI 和 Sbus 上的 "qfe" quad-ethernet）</comment>
</pre>

<p>
當你完成核心設定時，請從 <uri link="#compiling">編譯和安裝</uri>。完成編譯時請
檢察核心的檔案大小：
</p>

<pre caption="檢查核心的檔案大小">
# <i>ls -lh vmlinux</i>
-rw-r--r--    1 root     root         2.4M Oct 25 14:38 vmlinux
</pre>

<p>
如果（未壓縮的）檔案大小大於 2.5MB （Sparc32）或是 2.5Mb （Sparc64），你將需要
重新編譯你的核心直到檔案大小不會超過這些限制。其中的方法就是將其他非開機相關的選項
編為模組。
</p>

<p>
如果你的核心 tad 太大，你可以嘗試使用 <c>strip</c> 指令：
</p>

<pre caption="Strip 核心">
# <i>strip -R .comment -R .note vmlinux</i>
</pre>

</body>
</subsection>
<subsection>
<title>啟用建議的 MIPS 選項</title>
<body>

<p>
如果你使用的是 Indy/Indigo2 系統，你需要開啟相關的核心支援。
</p>

<pre caption="啟用 SGI IP22">
Machine selection ---&gt;
  [*] Support for SGI IP22 (Indy/Indigo2)
</pre>

<p>
如果你要執行 Irix 二進位檔案，開啟以下選項：
</p>

<pre caption="開啟 IRIX 二進位支援">
General setup ---&gt;
  [*] Include IRIX binary compatibility
</pre>

<p>
如果你的 SGI Indogo 有 ISA/EISA 卡，開啟支援的選項：
</p>

<pre caption="啟用 SGI Indigo2 的 IPs/EISA 支援">
General setup ---&gt;
  [*] Indigo-2 (IP22) EISA bus support
  [*]   ISA bus support
</pre>

<p>
如果你有 SGI 的 parallel port，你可以開啟核心支援的選項。如果你有 ISA parallel
port 你應該選擇 "PC-style hardware"。
</p>

<pre caption="啟用 SGI Parallel Port 支援">
Parallel port support  ---&gt;
  &lt;*&gt; Parallel port support
  &lt;*&gt;   SGI Indy/Indigo2 hardware (EXPERIMENTAL) (NEW)
  &lt;*&gt;   IEEE 1284 transfer modes (NEW)
</pre>

<p>
如果你要啟用 Indigo2 ISA slot，啟用 plug and play 支援。
</p>

<pre caption="啟用 ISA 的 PnP 支援">
Plug and Play configuration  ---&gt;
  &lt;*&gt; Plug and Play support
  &lt;*&gt;   ISA Plug and Play support
</pre>

<p>
不要忘了啟用 SCSI 支援，然後使用 SGI WD93C93 的驅動程式：
</p>

<pre caption="啟動 WD93C93 的驅動程式支援">
SCSI low-level drivers  ---&gt;
  &lt;*&gt; SGI WD93C93 SCSI Driver
</pre>

<p>
對於網路卡，你或許需要開啟 SGI Seeq ethernet controller 的支援：
</p>

<pre caption="開啟 SGI Seeq Support">
Network device support  ---&gt;
  Ethernet (10 or 100Mbit)  ---&gt;
    [*] Ethernet (10 or 100Mbit)
    [*]   SGI Seeq ethernet controller support
</pre>

<p>
不要忘了開啟 serial console 支援和 SGI Zilog85C30 支援：
</p>

<pre caption="開啟 SGI Zilog85C30 支援">
Character devices ---&gt;
  [*] Non-standard serial port support
  [*]   SGI Zilog85C30 serial support
</pre>

<p>
也不要忘了開啟 Indy/I2 Watchdog 支援和 SGI DS1286 RTC 支援：
</p>

<pre caption="開啟 Watchdog 和 RTC 支援">
Character Devices ---&gt;
  [*] SGI DS1286 RTC support
  Watchdog Cards  ---&gt;
    [*] Watchdog Timer Support
    &lt;*&gt;   Indy/I2 Hardware Watchdog
</pre>

<p>
你應該要開啟 SGI 分割區的支援 :)
</p>

<pre caption="開啟 SGI 分割區的支援">
File Systems ---&gt;
  Partition Types ---&gt;
    [*] Advanced partition selection
    [*]   SGI partition support
</pre>

<p>
如果你有一個 SGI Newport （XL Gfx）卡並且想要使用它，那你就需要開啟相關的支援：
</p>

<pre caption="開啟 SGI Newport 卡的支援">
Console drivers  ---&gt;
  &lt;*&gt; SGI Newport Console support (NEW)
</pre>

<p>
如果你要開啟 Indy/Indigo2 的音效支援：
</p>

<pre caption="開啟 SGI HAL2 支援">
Sound  ---&gt;
  &lt;*&gt; Sound card support
  &lt;*&gt;   SGI HAL2 sound (EXPERIMENTAL)
</pre>

<p>
當你完成核心設定時，請從 <uri link="#compiling">編譯和安裝</uri> 繼續。
</p>

</body>
</subsection>
<subsection>
<title>啟用建議的 MIPS 選項</title>
<body>

<p>
如果你的系統有多個 CPU，你應該啟用 "Symmetric multi-processing support"：
</p>

<pre caption="啟用 SMP 支援">
Processor type and features ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
當你完成核心設定時，請從 <uri link="#compiling">編譯和安裝</uri> 繼續。
</p>

</body>
</subsection>
<subsection id="compiling">
<title>編譯和安裝</title>
<body>

<p>
現在你的核心已經設定完成了，我們該來編譯然後安裝它。離開核心設定，然後執行
<c>make dep &amp;&amp; make bzImage modules modules_install</c>：
</p>

<pre caption="編譯核心">
<comment>（針對 x86 架構，核心 2.4）</comment>
# <i>make dep &amp;&amp; make bzImage modules modules_install</i>

<comment>（其他架構，核心 2.4）</comment>
# <i>make dep &amp;&amp; make vmlinux modules modules_install</i>

<comment>（其他核心 2.6）</comment>
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
當核心完成編譯時，將核心映像檔複製到 <path>/boot</path>。以下的範例，我們將假設
你使用 <c>vanilla-sources-2.4.24</c> 編譯然後安裝（當然跟你的不一樣！）：
</p>

<pre caption="安裝核心">
<comment>（x86 架構）</comment>
# <i>cp arch/i386/boot/bzImage /boot/kernel-2.4.24</i>
# <i>cp System.map /boot/System.map-2.4.24</i>

<comment>（amd64 架構）</comment>
# <i>cp arch/x86_64/boot/bzImage /boot/kernel-2.4.24</i>

<comment>（其他架構）</comment>
# <i>cp vmlinux /boot/kernel-2.4.24</i>
# <i>cp System.map /boot/System.map-2.4.24</i>
</pre>

<p>
你也可以將你的核心設定檔備份到 <path>/boot</path>，以防萬一 :)
</p>

<pre caption="備份你的核心設定檔">
# <i>cp .config /boot/config-2.4.24</i>
</pre>

<p>
如果你是 MIPS 的使用者，你的系統無法開啟 ELF 核心，使用 <c>make 
vmlinux.ecoff</c> 而不是 <c>make vmlinux</c> 編譯核心。核心的映像檔將會被儲存在
<path>arch/mips/boot/vmlinux.ecoff</path> 而不是 <path>vmlinux</path>。
</p>

<p>
現在請從 <uri link="#doc_chap4">安裝分開的核心模組</uri>。
</p>

</body>
</subsection>
</section>
<section>
<title>其他選擇：使用 genkernel</title>
<body>

<warn>
Gnetoo/SPARC 不支援 genkernel。
</warn>

<p>
如果你正在讀這個部份，那你應該是選擇使用我們的 <c>genkernel</c> 程序來為你設定
核心。
</p>

<p>
現在你的核心原始碼已經安裝了，我們該使用 <c>genkernel</c> 程序來自動幫你編譯
核心。<c>genkernel</c> 是利用類似 LiveCD 的核心設定來進行工作的。這代表著當你
使用 <c>genkernel</c> 編譯你的核心，你的系統大致上會在開機時偵測所有的硬體，
就和我們的 LiveCD 一樣。因為 genkernel 不需要手動核心設定，所以適合不會編譯
核心的使用者。
</p>

<p>
現在讓我們來看看如何使用 genkernel。首先，安裝 genkernel：
</p>

<pre caption="安裝 genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
現在，編譯你的核心原始碼。如果你是透過 grp 安裝 <c>genkerenl</c>，直接執行
<c>genkernel all</c>。請注意，當 <c>genkernel</c> 正在編譯所有硬體支援時，等待的
時間會有點久！
</p>

<p>
如果你的開機分割區沒有使用 ext2 或是 ext3 為檔案系統，你將需要使用 <c>genkernel
--menuconfig all</c> 手動設定，然後在核心內加入你所使用的檔案系統支援（
<e>不能</e> 編成模組）。
</p>

<pre caption="執行 genkernel">
# <i>genkernel all</i>
GenKernel v3.0.1_beta10
* ARCH: x86    
* KERNEL VER: 2.4.24
* kernel: configuring source
* kernel: running mrproper
<comment>(Output removed to increase readability)</comment>
* Kernel compiled successfully!
* Required Kernel Params:
*   : root=/dev/ram0 init=/linuxrc real_root=/dev/$ROOT
*     where $ROOT is the devicenode for your root partition as
*     you should have specified in /etc/fstab
*     d initrd
*              
* Recommended Kernel Params:
*   : vga=0x317 splash=verbose
*              
* Do NOT report kernel bugs (configs included) as genkernel bugs.
* Make sure you have the latest genkernel before reporting bugs
*              
* For more info see /usr/share/genkernel/README
</pre>

<p>
當 <c>genkernel</c> 完成的時候，一個核心映像檔，一套模組和一個 <e>initial root
disk</e> （initrd）將會被建立。我們將在稍後設定開機程式時使用核心映像檔和
initrd。寫下核心和 initrd 的檔名方便你稍後設定開機程式。initrd 將會在開起到"真正
的"系統之前馬上偵測硬體支援（就和 LiveCD 一樣）。
</p>

<pre caption="查看已建立的核心映像檔名和 initrd">
# <i>ls /boot/kernel* /boot/initrd*</i>
</pre>

<p>
現在，為了要讓我們的系統更像 LiveCD，我們需要安裝 <c>hotplug</c>。當 initrd 自動
偵測硬體時，<c>hotplug</c>將會自動偵測其他的硬體。要安裝然後開啟 <c>hotplug</c>
，請按照以下輸入：
</p>

<pre caption="安裝和開啟 hotplug">
# <i>emerge hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>

</body>
</section>
<section>
<title>安裝分開的核心映像檔和模組</title>
<subsection>
<title>安裝多個模組</title>
<body>

<p>
如果適當，你應該要安裝系統上的硬體所需要的安裝程序。以下為一些你有可能用到的核心
相關的安裝程序：
</p>

<table>
<tcolumn width="1in"/>
<tcolumn width="4in"/>
<tcolumn width="2in"/>
<tr>
  <th>安裝程序（Ebuild）</th>
  <th>用意</th>
  <th>指令</th>
</tr>
<tr>
  <ti>nvidia-kernel</ti>
  <ti>針對 NVIDIA 加速 XFree86</ti>
  <ti><c>emerge nvidia-kernel</c></ti>
</tr>
<tr>
  <ti>nforce-net</ti>
  <ti>NVIDIA NForce(2) 主機板上的內建網路控制卡</ti>
  <ti><c>emerge nforce-net</c></ti>
</tr>
<tr>
  <ti>nforce-audio</ti>
  <ti>NVIDIA NForce(2) 主機板的內建音效卡</ti>
  <ti><c>emerge nforce-audio</c></ti>
</tr>
<tr>
  <ti>e100</ti>
  <ti>Intel e100 Fast Ethernet 網路卡</ti>
  <ti><c>emerge e100</c></ti>
</tr>
<tr>
  <ti>e1000</ti>
  <ti>Intel e1000 Gigabit Ethernet 網路卡</ti>
  <ti><c>emerge e1000</c></ti>
</tr>
<tr>
  <ti>emu10k1</ti>
  <ti>Creative Sound Blaster Live!/Audigy 支援</ti>
  <ti><c>emerge emu10k1</c></ti>
</tr>
<tr>
  <ti>ati-drivers</ti>
  <ti>適用於 XFree86 的 加速Accelerated ATI Radeon 8500+/FireG</ti>
  <ti><c>emerge ati-drivers</c></ti>
</tr>
<tr>
  <ti>ati-drivers-extra</ti>
  <ti>Graphical ATI 工具</ti>
  <ti><c>emerge ati-drivers-extra</c></ti>
</tr>
<tr>
  <ti>xfree-drm</ti>
  <ti>
    XFree86 支援的 ATI Radeon 到 9200，Rage128，Matrox，Voodoo和其他顯示卡。請查
    看 <path>/usr/portage/x11-base/xfree-drm</path> 內的 <c>ISUE_VIDEO_CARDS</c> 
    變數查看你需要填入那種 <c>適用於你的顯示卡</c>。
  </ti>
  <ti><c>VIDEO_CARDS="適用於你的顯示卡" emerge xfree-drm</c></ti>
</tr>
</table>

<p>
如果你收到關於 <c>masked by: -keyword</c> 或是 <c>masked by: ~keyword</c>
的錯誤訊息，那這就代表著這個你想安裝的核心模組還不是這個架構的穩定版本。
</p>

<p>
請注意，有些安裝程序會碰到很多相依性的問題。要確定你會安裝到那些套件，使用
<c>emerge --pretend</c>。舉例來說，<c>emu10k1</c> 套件：
</p>

<pre caption="查看完整的安裝套件列表">
# <i>emerge --pretend emu10k1</i>
</pre>

<p>
如果你不喜歡它要安裝的套件，使用 <c>emerge --pretend --verbose</c> 查看個依賴的
套件需要用到什麼的 USE 參數：
</p>

<pre caption="查看使用的 USE 參數">
# <i>emerge --pretend --verbose emu10k1</i>
<comment>...</comment>
[ebuild  N    ] media-sound/aumix-2.8  +gpm +nls +gtk +gnome +alsa -gtk2
</pre>

<p>
以上的範例將可以看到 <c>emu10k1</c> 的相依性（<c>aumix</c>）必須依賴著 
<c>gtk</c> 和 <c>gnome</c> 的 USE 參數，而 gtk （依賴著 Xfree）將會被一起編譯。
</p>

<p>
如果你不要編譯全部，拿掉所有的 USE 參數，如：
</p>

<pre caption="關閉所有的 USE 參數安裝 emu10k1">
# <i>USE="-gpm -nls -gtk -gnome -alsa" emerge --pretend emu10k1</i>
</pre>

<p>
當你滿意時，移除掉 <c>--pretend</c> 開始安裝 <c>emu10k1</c>。
</p>

</body>
</subsection>
<subsection>
<title>設定模組</title>
<body>

<p>
你將需要將想要開機時自動載入的模組放到
<path>/etc/modules.autoload.d/kernel-2.4</path> （或是
<path>kernel-2.6</path>）。你也可以加上模組的選項。
</p>

<p>
要查看所有可用的模組，執行 <c>find</c> 指令。不要忘了將 "&lt;kernel
version&gt;"更改為你剛剛編譯的版本：
</p>

<pre caption="查看所有可用的版本">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
舉例來說，要自動載入 <c>3c59x.o</c> 模組，編輯 <path>kernel-2.4</path> 或是 
<path>kernel-2.6</path>：
</p>

<pre caption="編輯 /etc/modules.autoload.d/kernel-2.4">
<comment>（2.4核心的範例）</comment>
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4 或是 kernel-2.6">
3c59x
</pre>

<p>
現在執行 <c>modules-update</c> 來套用你的變更到 <path>/etc/modules.conf</path>：
</p>

<pre caption="執行 modules-update">
# <i>modules-update</i>
</pre>

<p>
現在請從 <uri link="?part=1&amp;chap=8">設定你的系統</uri> 繼續安裝。
</p>

</body>
</subsection>
</section>
</sections>
