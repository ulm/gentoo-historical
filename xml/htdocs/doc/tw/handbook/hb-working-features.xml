<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/tw/handbook/Attic/hb-working-features.xml,v 1.5 2004/06/23 08:41:03 bennyc Exp $ -->

<!-- rev 1.11 by ccpz -->

<sections>
<section>
<title>DistCC</title>
<subsection>
<title>什麼是 DistCC？</title>
<body>

<p>
<c>distcc</c> 是一個讓您可以在多台，不一定同一類型的電腦經由網路分別編譯。
<c>distcc</c> 客戶端傳送給伺服器(執行 <c>distccd</c>)必要的資訊讓它可以幫客戶端
編譯原始碼的一部份。這會幫您加快編譯時間。
</p>

<p>
您可以在 <uri link="/doc/tw/distcc.xml">Gentoo Distcc 文件</uri>中找到關於
 <c>distcc</c> 更詳細的資訊(包括他如何在 Gentoo 上工作)。
</p>

</body>
</subsection>
<subsection>
<title>安裝 DistCC</title>
<body>

<p>
Diskcc 提供一個圖形化的監視程式讓您監視您的電腦送出去的編譯工作。如果您使用
 Gnome 的話，在 <c>USE</c> 設定中加入 'gnome'。然而，如果您不是使用 Gnome 但您
想使用它的話，您應該在 <c>USE</c> 設定中加入 'gtk'。
</p>

<p>
安裝 distcc 就和其他在 Gentoo Portage 中的軟體一樣，是相當容易的。
</p>

<note>
從現在開始，因為您已經知道如何用已經編譯好的套件來安裝，我們會在接下來的手冊中省
略 <c>--usepkg</c> 選項。
</note>

<pre caption="安裝 Distcc">
# <i>emerge distcc</i>
</pre>

</body>
</subsection>
<subsection>
<title>啟動 Portage 的支援</title>
<body>

<p>
嗯，如果安裝過程很簡單的話，其餘的部分應該也很簡單 :) 所以讓我們很快的啟動
 Portage 的 <c>distcc</c> 支援。
</p>

<p>
首先，開啟 <path>/etc/make.conf</path> 然後編輯 <c>FEATURES</c> 變數加入
 <c>distcc</c> 關鍵字。然後編輯 <c>MAKEOPTS</c> 變數加入 <c>-jX</c>，這裡的
 <c>X</c> 代表所有執行 <c>distccd</c> 的電腦 CPU 數加一的總和：
</p>

<pre caption="/etc/make.conf 中可能的 MAKEOPTS 設定">
<comment># 假設您有兩台單 CPU 的主機(不包括自己的電腦)執行 distccd</comment>
MAKEOPTS="-j4"
</pre>

<p>
現在，一樣在 <path>/etc/make.conf</path> 中，移除 <c>PORTAGE_TMPDIR</c> 的註解
然後在檔案結尾加入下面這幾行：
</p>

<pre caption="在 /etc/make.conf 加入額外的 distcc 特殊變數">
<comment># 不要忘記移除 PORTAGE_TMPDIR 變數的註解</comment>
DISTCC_DIR=${PORTAGE_TMPDIR}/portage/.distcc
</pre>

<p>
現在執行 <c>distcc-config</c> 然後輸入可用的 DistCC 伺服器列表。我們將會舉一個簡
單的例子假設可用的伺服器包括 <c>192.168.1.102</c> (目前的電腦)，<c>192.168.1.103</c> 和 
<c>192.168.1.104</c> (兩台"遠端"電腦):
</p>

<pre caption="設定 distcc 使用三台可用的 DistCC 伺服器">
# <i>distcc-config --set-hosts "192.168.1.102 192.168.1.103 192.168.1.104"</i>
</pre>

<p>
當然，不要忘記啟動 <c>distccd</c> 伺服器程式：
</p>

<pre caption="啟動 distcc 伺服器程式">
# <i>/etc/init.d/distccd start</i>
</pre>

<p>
恭喜，您的電腦現在使用分開的編譯！如果您要關於 DistCC 和 Gentoo 更深入的資訊，
請閱讀<uri link="/doc/en/distcc.xml">Gentoo DistCC 文件</uri>。
</p>

</body>
</subsection>
</section>
<section>
<title>ccache</title>
<subsection>
<title>什麼是 ccache ？</title>
<body>

<p>
<c>ccache</c> 是一個快速的編譯器快取。當您編譯程式時，他會立即快取結果，因此當
您重新編譯時，編譯的時間減少相當多。在一般的狀況可以加快 5 到 10 倍的編譯時間。
</p>

<p>
如果您對 <c>ccache</c> 的詳細內容有興趣，請瀏覽
 <uri link="http://ccache.samba.org">ccache 首頁</uri>。
</p>

</body>
</subsection>
<subsection>
<title>安裝 ccache</title>
<body>

<p>
在 Gentoo 安裝 <c>ccache</c> 是輕而易舉的。只要 emerge 然後就完成了 :)
</p>

<pre caption="安裝 ccache">
# <i>emerge ccache</i>
</pre>

</body>
</subsection>
<subsection>
<title>啟動 Portage 支援</title>
<body>

<p>
首先，編輯 <path>/etc/make.conf</path> 修改 <c>FEATURES</c> 變數讓它包含
 <c>ccache</c> 關鍵字：
</p>

<pre caption="編輯 /etc/make.conf 中的 FEATURES">
FEATURES="ccache"
</pre>

<p>
接下來，編輯(或建立) <c>CCACHE_SIZE</c> 變數(一樣在 <path>/etc/make.conf</path> 
中)包含您要保留給 <c>ccache</c> 的磁碟空間：
</p>

<pre caption="編輯 /etc/make.conf 中的 CCACHE_SIZE">
CCACHE_SIZE="2G"
</pre>

<p>
現在，Portage 使用 <c>ccache</c> 來盡可能加速編譯過程。如果您不確定
 <c>ccache</c> 是否在工作，您可以執行 <c>ccache -s</c> 查看 <c>ccache</c> 的狀態：
</p>

<pre caption="查看 ccache 狀態">
# <i>ccache -s</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>編譯好的程式套件</title>
<subsection>
<title>建立編譯好的程式套件</title>
<body>

<p>
我們已經討論過如何使用預先編譯好的套件，但是要如何建立您自己編譯好的套件？
</p>

<p>
如果套件已經安裝好了，您可以執行 <c>quickpkg</c> 指令把已安裝好的程式建立 tar 檔
。這對於備份相當有用！
</p>

<pre caption="使用 quickpkg">
# <i>quickpkg gnumeric</i>
</pre>

<p>
如果套件還沒安裝，您可以在使用 <c>emerge</c> 時告訴他同時建立編譯好的套件，像這
樣使用 <c>--buildpkg</c> 參數 (或縮寫 <c>-b</c>)：
</p>

<pre caption="安裝 gnumeric 並且建立編譯好的套件">
# <i>emerge --buildpkg gnumeric</i>
</pre>

<p>
如果您希望 Portage 每次都這樣做，您可以在 <path>/etc/make.conf</path> 中的
 <c>FEATURES</c> 變數設定關鍵字 <c>buildpkg</c>。
</p>

<pre caption="自動建立編譯好的套件">
FEATURES="buildpkg"
</pre>

<p>
如果您不想安裝軟體，只要建立編譯好的套件，使用 <c>--buildpkgonly</c> 參數 
(縮寫成<c>-B</c>)：
</p>

<pre caption="建立編譯好的 gnumeric 套件">
# <i>emerge --buildpkgonly gnumeric</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>安全相關功能</title>
<subsection>
<title>Sandbox</title>
<body>

<p>
當編譯和安裝軟體套件時，Portage 使用 <e>sandbox</e> 保護目前的系統。也就是說，
只要軟體還沒裝好，他就不能接觸 sandbox 之外的檔案。這確保 Portage 知道套件建立
或修改哪些檔案。
</p>

<p>
當套件編譯完之後，Portage 會"預先安裝"在 sandbox 中，紀錄哪些檔案放在哪裡。然後
會從 sandbox 移動到您的系統中。
</p>

</body>
</subsection>
<subsection>
<title>使用者權限</title>
<body>

<p>
Portage 也支援讓一般使用者安裝套件(更精確的說，使用者 "portage"，群組 "portage")
。這加強安裝時的安全性。您可以選擇使用者權限包含或不包含 sandbox。當然，使用
 sandbox 是比較好的方法 :)
</p>

</body>
</subsection>
<subsection>
<title>啟動 sandbox 而且/或 userpriv</title>
<body>

<p>
Portage 預設使用 <c>sandbox</c>。如果您要用 <c>userpriv</c>，您要在 
<c>FEATURES</c> 變數中加入他。注意啟動 <c>userpriv</c> 會移除  <c>sandbox</c> 
支援，除非您也加入 <c>usersandbox</c>：
</p>

<pre caption="啟動 userpriv 以及 usersandbox">
FEATURES="userpriv usersandbox"
</pre>

<warn>
<e>不要</e>從 <c>FEATURES</c> 變數中移除 <c>sandbox</c>！
</warn>

</body>
</subsection>
<subsection>
<title>嚴格的檢查</title>
<body>

<p>
Portage 可以被要求對可能的危險情況反應很強(例如遺失或不正確的 Manifest 檔)。在
 <c>FEATURES</c> 中加入 <c>strict</c> 關鍵字來啟動：
</p>

<pre caption="啟動嚴格的檢查">
FEATURES="strict"
</pre>

</body>
</subsection>
<subsection>
<title>聰明的檔案系統權限</title>
<body>

<p>
Portage 可以自動處理潛在的危險檔案權限，可能導致安全上的危機。他移除 setuid 
檔案的群組成員和其他人的檔案讀取權限，以及在安裝前的過程移除 setgid 檔案其他人
的讀取權限。在 <c>FEATURES</c> 變數中加入 <c>sfperms</c> 關鍵字來起動：
</p>

<pre caption="啟動聰明的檔案系統權限">
FEATURES="sfperms"
</pre>

</body>
</subsection>
</section>
<section>
<title>其他功能</title>
<subsection>
<title>Portage 求助</title>
<body>

<p>
這裡還有其他您可以放在 <c>FEATURES</c> 變數中的關鍵字。他們大部分是針對發展者，而
一般的使用者對他們並不會感到興趣。如果您對學習其他功能(或 Portage)有興趣，不要忘
了閱讀我們提供的 <path>make.conf</path> 手冊頁。
</p>

<pre caption="更多 Portage 相關資訊">
# <i>man make.conf</i>
</pre>

</body>
</subsection>
</section>
</sections>
