<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/tw/handbook/Attic/hb-install-bootloader.xml,v 1.3 2004/03/01 02:13:51 bennyc Exp $ -->

<!-- en rev 1.27 by Benny -->

<sections>
<section>
<title>決定你的選擇</title>
<subsection>
<title>介紹</title>
<body>

<p>
現在你的核心已經設定和已經編譯好相關的系統設定檔了，是時候該安裝一個程式來驅動
開機時所需要的核心。這個程式叫做 <e>開機程式</e>。但是在你開始動作前，請仔細考
慮你可用的選項﹍
</p>

<p>
Linux 有提供多個可用的開機程式。但是，這些開機程式址能使用在一些少數的電腦架構
上。所以你一定要在選擇支援你的電腦架構的開機程式。
</p>

<p>
以下的列表將提供一些不同電腦架構所支援的開機程式。請按照你的電腦架構選擇一個。
舉例來說，如果你有一台 Pentium IV，那麼你的電腦架構則是 <e>x86</e>。你將要在
GRUB （建議） 和 LILO 內決定。
</p>

<table>
<tr>
  <th>電腦架構</th>
  <th>建議</th>
  <th>替代</th>
</tr>
<tr>
  <th>x86</th>
  <ti><uri link="#doc_chap2">GRUB</uri></ti>
  <ti><uri link="#doc_chap3">LILO</uri></ti>
</tr>
<tr>
  <th>alpha</th>
  <ti><uri link="#doc_chap4">aBoot</uri></ti>
  <ti><uri link="#doc_chap5">MILO</uri></ti>
</tr>
<tr>
  <th>sparc</th>
  <ti><uri link="#doc_chap6">SILO</uri></ti>
  <ti></ti>
</tr>
<tr>
  <th>ppc</th>
  <ti>
    <uri link="#doc_chap8">yaBoot</uri> (NewWorld), 
    <uri link="#doc_chap9">BootX</uri> (OldWorld)
  </ti>
  <ti></ti>
</tr>
<tr>
  <th>hppa</th>
  <ti><uri link="#doc_chap7">PALO</uri></ti>
  <ti></ti>
</tr>
<tr>
  <th>mips</th>
  <ti><uri link="#doc_chap10">MIPS PROM</uri></ti>
  <ti></ti>
</tr>
<tr>
  <th>amd64</th>
  <ti><uri link="#doc_chap2">GRUB</uri></ti>
  <ti></ti>
</tr>
</table>

</body>
</subsection>
<subsection>
<title>選擇性: Framebuffer</title>
<body>

<note>
這個部份只適用於在核心內有設定 framebuffer 支援的 x86，AMD74 和 PPC 的使用者。
這也包括了 <c>genkernel</c> 的使用者。
</note>

<p>
<e>如果</e> 你的核心有設定 framebuffer 的支援，你可以在你的開機程式設定檔內加入
<c>vga</c> 相關的設定。以下的列表將會是一些可用的 <c>vga</c> 參數。範例的設定檔
將使用 <e>800x600 @ 16bpp</e>， 所以是 <e>768</e>。
</p>

<table>
<tr>
  <ti></ti><th>640x480</th><th>800x600</th><th>1024x768</th><th>1280x1024</th>
</tr>
<tr>
  <th>8 bpp</th><ti>769</ti><ti>771</ti><ti>773</ti><ti>775</ti>
</tr>
<tr>
  <th>16 bpp</th><ti>785</ti><ti>788</ti><ti>791</ti><ti>794</ti>
</tr>
<tr>
  <th>32 bpp</th><ti>786</ti><ti>789</ti><ti>792</ti><ti>795</ti>
</tr>
</table>

<p>
請記得（或是寫下）你適用的數值；你稍後將需要到它。
</p>

<p>
現在請按照上面所提供的列表選擇你的開機程式。
</p>

</body>
</subsection>
</section>
<section>
<title>預設: 使用 GRUB</title>
<subsection>
<title>了解 GRUB 的意義</title>
<body>

<impo>
GRUB 只能使用於 x86 和 AMD64 的系統！
</impo>

<p>
了解 GRUB 的關鍵就是必須了解 GRUB 如何看待相關的硬碟和分割區。你的 Linux 分割區
<path>/dev/hda1</path> 將會被 GRUB 解釋為 <path>(hd0,0)</path>。請注意
<path>hd0,0</path> 外面的括號 － 它們是不可或缺的。
</p>

<p>
硬碟的計算是從 0 而不是 "a" 開始。請特別注意硬碟，GRUB 將不會計算 atapi-ide 光
碟機和燒錄機等裝置。（在正常的情況來說，除了特別從 bios 設定的 SCSI 次得以外，
它們將取得比 ide 磁碟更高的號碼。
</p>

<p>
假如你有一個在 <path>/dev/hda</path> 的硬碟，在 <path>/dev/hdb</path> 的光碟機
，在 <path>/dev/hdc</path> 的燒錄機，第二棵硬碟在 <path>/dev/hdd</path> 和沒有
任何 SCSI 裝置。 <path>/dev/hdd7</path> 將會被翻譯成 <path>(hd1,6)</path>。
這或許聽起來有點詭異，但是我們將可以利用 GRUB 提供的 tab 完成結構（tab 
complete mechanism）讓你設定許多硬碟和分割區時方便許多。
</p>

<p>
差點忘記了，我們現在該安裝 GRUB 了。
</p>

</body>
</subsection>
<subsection>
<title>安裝 GRUB</title>
<body>

<p>
要安裝 GRUB，我們將需要進行 emerge 的動作。x86 架構的使用者將要使用
<c>grub</c>， AMD64 的使用者將需要使用 <c>grub-static</c>：
</p>

<pre caption = "安裝 GRUB">
<comment>（適合 x86 架構：）</comment>
# <i>emerge --usepkg grub</i>

<comment>（適合 AMD64 架構：）</comment>
# <i>emerge --usepkg grub-static</i>
# <i>cp -Rpv /usr/share/grub/i386-pc/* /boot/grub</i>
</pre>

<p>
要開始設定 GRUB，你將要輸入 <c>grub</c>。你將會被帶領到 <path>grub&gt;</path>
的文字介面。現在你需要輸入正確的指令將 GRUB 的開機紀錄安裝到你的硬碟上。
</p>

<pre caption = "開始 GRUB 文字介面">
# <i>grub</i>
</pre>

<note>
如果你的系統上沒有任何軟碟，將 <c>--no-floppy</c> 的選項加到以上指令的後面，
如此一來 grub 就不會在開始時尋找軟碟機了。
</note>

<p>
在範例的設定檔內，我們要安裝 GRUB，所以它才能從開機分割區
<path>/dev/hda1</path> 內讀 GRUB 的取相關資料，然後將 GRUB 開機紀律安裝到硬碟的
MBR （master boot record），如此一來我們一開機就會碰到 GRUB 的畫面。當然，如果
你沒有按照範例設定，請依照你的設定做更改。
</p>

<p>
GRUB 的 tab 完成架構 (tab completion mecanism）適用於 GRUB內。舉例來說，如果你
輸入 "<c>root(</c>" 然後按下 TAB 鍵，你將會看到 GRUB 顯示出所有可用的裝置（如
<path>hd0</path>）。如果你輸入 "<c>root (hd0,</c>" 然後按下 TAB 鍵，你將會看到
GRUB 顯示出所有可選的分割區清單（如 <path>hd0,0</path>）。
</p>

<p>
By using the tab completion, setting up GRUB should be not that hard.
Now go on, configure GRUB, shall we? :-)
GRUB 的 tab 鍵完成架構應該可以在 GRUB 的設定上簡單一點。
現在我們將要開始設定 GRUB。
</p>

<pre caption = "將 GRUB 安裝到 MBR">
grub&gt; <i>root (hd0,0)</i>          <comment>（定義你的開機分割區所在的地方）</comment>
grub&gt; <i>setup (hd0)</i>           <comment>（將 GRUB 安裝到 MBR）</comment>
grub&gt; <i>quit</i>                  <comment>（離開 GRUB）</comment>
</pre>

<note>
如果你不打算將 GRUB 安裝到 MBR 而是其他分割區上，你將要小心的將 <c>setup</c>
指令指向正確的分割區。舉例來說，如果你要把 GRUB 安裝到 <path>/dev/hda3</path>，
那麼你將需要用的的指令就會試 <c>setup (hd0,2)</c>。只有少數的使用者會這麼做。
</note>

<p>
雖然 GRUB 已安裝完成，我們還需要為它編寫一個設定檔，如此一來 GRUB 將自動的開啟
到你新建立的系統核心。使用 <c>nano</c> （或是其他的編輯器）建立一個
<path>/boot/grub/grub.conf</path>檔案：
</p>

<pre caption = "建立 /boot/grub/grub.conf">
# <i>nano -w /boot/grub/grub.conf</i>
</pre>

<p>
現在我們將要開始編寫<path>grub.conf</path>。你將會在下面找到三個按照我們的範例所
使用的 <path>grub.conf</path> 設定檔，使用的是核心 <path>kernel-2.4.22</path>。
我們只會在第一個 <path>grub.conf</path> 內進行註解。
</p>

<ul>
  <li>
    第一個 <path>grub.conf</path> 適用於沒有使用 <c>genkernel</c> 編譯核心的使
    用者
  </li>
  <li>
    第二個 <path>grub.conf</path> 適用於從 LiveCD 安裝 <c>genkernel</c> 的使用者
    （例：從 GRP 套件安裝的 <c>genkernel</c>）
  </li>
  <li>
    第三個 <path>grub.conf</path> 適用於網路下載的 <c>genkernel</c>
  </li>
</ul>

<pre caption = "未使用 genkernel 的 grub.conf">
<comment># 將為開機預設。0為第一，1為第二，以此類推。</comment>
default 0
<comment># 使用預設前等待的開機秒數。</comment>
timeout 30
<comment># 將漂亮又肥大的 splash-image 開啟：）</comment>
splashimage=(hd0,0)/grub/splash.xpm.gz

title=Gentoo Linux 2.4.22
<comment># 儲存核心檔的分割區（或是作業系統）</comment>
root (hd0,0)
kernel (hd0,0)/kernel-2.4.22 root=/dev/hda3

<comment># 以下三行為 Windows 系統適合的雙重開機。</comment>
<comment># 在我們的例子，Windows是放在 /dev/hda6</comment>
title=Windows XP
root (hd0,5)
chainloader +1
</pre>

<pre caption = "GRP genkernel 使用者適用的 grub.conf">
default 0
timeout 30
splashimage=(hd0,0)/grub/splash.xpm.gz

title=Gentoo Linux 2.4.22
root (hd0,0)
kernel (hd0,0)/kernel-2.4.22 root=/dev/hda3
initrd (hd0,0)/initrd-2.4.22

<comment># 如果你想要雙重系統開機的話</comment>
title=Windows XP
root (hd0,5)
chainloader +1
</pre>

<pre caption = "非 GRP genkernel 使用者適用的 grub.conf">
default 0
timeout 30
splashimage=(hd0,0)/grub/splash.xpm.gz

title=Gentoo Linux 2.4.22
root (hd0,0)
kernel (hd0,0)/kernel-2.4.22 root=/dev/ram0 init=/linuxrc real_root=/dev/hda3
initrd (hd0,0)/initrd-2.4.22

<comment># 如果你想要雙重系統開機的話</comment>
title=Windows XP
root (hd0,5)
chainloader +1
</pre>


<note>
如果你使用不同的分割設定或是核心檔案，請依個人的設定更改。但是請確認所有 GRUB 
相關的裝置（如<path>(hd0,0)</path>）和掛載點有相連的，而非 root。換句話說，
<path>(hd0,0)/grub/splash.xpm.gz</path> 實際上是放在 
<path>/boot/grub/splash.xpm.gz</path> 因為 <path>(hd0,0)</path> 是 
<path>/boot</path>。
</note>

<p>
如果你需要自行輸入任何參數給核心，只要將他們放在 kernel 的指令後面。我們已經傳送
了一個（<c>root=/dev/hda3</c> 或是 <c>real_root=/dev/hda3</c>），但是你也可以傳送
其他的指令。舉例來說，我們使用 <c>vga</c> 來設定之前提過的 framebuffer：
</p>

<pre caption = "將 vga 加入為核心參數">
title=Gentoo Linux
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.22 root=/dev/hda3 vga=788
</pre>

<p>
<c>genkernel</c> 使用者應該要知道他們的新使用的和 LiveCD 一樣。舉例來說，如果你
有 SCSI 裝置，你應該在核心選項後面加入 <c>doscsi</c>。
</p>

<p>
現在儲存 <path>grub.conf</path> 檔案然後離開。目前為止， GURB 已經被完善的設定
，你將可以繼續到 <uri link="?part=1&amp;chap=10">安裝系統所需工具</uri>。
</p>

</body>
</subsection>
</section>
<section>
<title>其他選擇： 使用 LILO</title>
<subsection>
<title>安裝 LILO</title>
<body>

<impo>
LILO 只適用於 x86 的系統！
</impo>

<p>
LILO，LInuxLOader 是 Linux 開機程式中最穩定的一個。但是，它缺少一些 GRUB 所有的
功能（這就是為什麼 GRUB 越來越受歡迎）。原因是 LILO 目前只用在 GRUB 無法使用的
系統上，GRUB 不能但是 LILO 能。當然，也是有熟悉 LILO 的使用者繼續愛用著。不論那
個， Gentoo 都支援，看到這邊有代表著你有興趣要安裝 LILO。
</p>

<p>
安裝 LILO 很簡單；只需要使用 <c>emerge</c>。
</p>

<pre caption = "安裝 LILO">
# <i>emerge --usepkg lilo</i>
</pre>

</body>
</subsection>
<subsection>
<title>設定 LILO</title>
<body>

<p>
要設定 LILO，你一定要建立 <path>/etc/lilo.conf</path>。開啟你最喜歡的編輯器（在
手冊內我們使用 <c>nano</c> 確保所有文件的一慣性）然後建立此檔。
</p>

<pre caption = "建立 /etc/lilo.conf">
# <i>nano -w /etc/lilo.conf</i>
</pre>

<p>
不久之前，我們已經請你記住你所建立的核心檔案名稱。以下的 <path>lilo.conf</path>
範例，我們將假設核心名稱為 <path>kernel-2.4.22</path>。我們也使用範例內的分割設
定為範例。共有三個部份：
</p>

<ul>
  <li>
    一個適用於沒有使用 <c>genkernel</c> 編譯核心的使用者
  </li>
  <li>
    一個適用於使用 GRP <c>genkernel</c> 編譯核心的使用者
  </li>
  <li>
    一個適用於最近（下載的） <c>genkernel</c> 編譯核心的使用者
  </li>
</ul>

<pre caption = "/etc/lilo.conf 範例">
boot=/dev/hda             <comment># 將 LILO 安裝到 MBR</comment>
prompt                    <comment># 給予使用者選擇系統的畫面</comment>
delay=50                <comment># 開啟預設選項前等待五秒
</comment>
default=gentoo            <comment># 當 timeout 所設定的時間超過時，自行開啟 "gentoo"</comment>
<comment>如果你沒有使用 framebuffer，請移除以下這行：</comment>
vga=788                   <comment># Framebuffer 設定。 請自行調整。</comment>

<comment># 非 genkernel 使用者</comment>
image=/boot/kernel-2.4.22
  label=gentoo            <comment># 這個部份的名稱</comment>
  read-only               <comment># 以唯讀的方式開啟 root</comment>
  root=/dev/hda3          <comment># 根（╱）系統的位置</comment>

<comment># 使用 GRP genkernel 的使用者</comment>
image=/boot/kernel-2.4.22
  label=gentoo
  read-only
  root=/dev/hda3
  initrd=/boot/initrd-2.4.22

<comment># 使用最近期的 genkernel 使用者</comment>
image=/boot/kernel-2.4.22
  label=gentoo
  read-only
  root=/dev/ram0
  append="init=/linuxrc real_root=/dev/hda3"
  initrd=/boot/initrd-2.4.22

<comment># 以下兩行只使用於多重開機到 Windows 系統。</comment>
<comment># 在我們的例子裡，Windows 是放在 /dev/hda6.</comment>
other=/dev/hda6
  label=windows
</pre>

<note>
如果你使用不同的分割方式或是核心檔案，請自行更改。
</note>

<p>
如果你需要重送其他參數給核心，請加入 <c>append</c> 的語句。舉例來說，我們將加入
<c>acpi=off</c> 的語句關閉 ACPI 支援：
</p>

<pre caption = "使用 append 加入核心參數">
image=/boot/kernel-2.4.22
  label=gentoo
  read-only
  root=/dev/hda3
  <i>append="acpi=off"</i>
</pre>

<p>
<c>genkernel</c> users should know that their kernels use the same boot options
as is used for the LiveCD. For instance, if you have SCSI devices, you should
add <c>doscsi</c> as kernel option.
<c>genkernel</c> 使用者應該要知道他們的新使用的和 LiveCD 一樣。舉例來說，如果你
有 SCSI 裝置，你應該在核心選項後面加入 <c>doscsi</c>。
</p>


<p>
現在儲存檔案然後離開。要完成動作，你需要執行 <c>/sbin/lilo</c> 放 LILO 可以套用
<path>/etc/lilo.conf</path> 到系統上（安裝到磁碟上）。
</p>

<pre caption = "完成 LILO 安裝">
# <i>/sbin/lilo</i>
</pre>

<p>
接下來請到 <uri link="?part=1&amp;chap=10">安裝系統所需工具</uri>。
</p>

</body>
</subsection>
</section>
<section>
<title>其他選擇：使用 aboot</title>
<body>

<impo>
aboot 只適用於 alpha 相關系統！
</impo>

<p>
我們先要把 aboot 安裝到系統上。所以我們將使用 <c>emerge</c>：
</p>

<pre caption = "安裝 aboot">
# <i>emerge --usepkg aboot</i>
</pre>

<p>
接下來的步驟是讓我們的開機片可開機。這將會在開機時啟動 <c>aboot</c>。我們將使用
<c>aboot</c> 開機程式建立我們的開機騙來啟動磁碟。
</p>

<pre caption = "讓你的開機片可開機">
# <i>swriteboot -f3 /dev/sda /boot/bootlx</i> 
# <i>abootconf /dev/sda 2</i>
</pre>

<note>
如果你使用的分割區設定和我們的不同，請將需要依照你的設定作更改。請查看一些相關
說明（<c>man 8 swriteboot</c> 和 <c>man 8 abootconf</c>）。
</note>

<p>
另外，你可以以編寫 aboot 設定檔和 SRM boot_osflags 變數讓  Gentoo 的開機過程更為
簡單。你將需要確保 bootdef_dev 已經完善的設定完成（在文字模式下比較簡單）。
</p>

<pre caption = "改善 Gentoo 開機">
# <i>echo '0:2/boot/vmlinux.gz root=/dev/sda2' &gt; /etc/aboot.conf</i>
# <i>echo -n 0 &gt; /proc/srm_environment/named_variables/boot_osflags</i>
# <i>echo -n '' &gt; /proc/srm_environment/named_variables/boot_file</i>
</pre>

<p>
如果你正在使用 serial console 安裝，別忘了要在 <path>aboot.conf</path> 內包含著
serial consol 的開機參數。關於更多請參考 <path>/etc/aboot.conf.example</path>。
另外，你將需要開啟 serial port 的登入選項：
</p>

<pre caption = "開啟 serial port 登入">
# <i>echo tts/0 &gt;&gt; /etc/securetty</i>
# <i>echo 's0:12345:respawn:/sbin/agetty 9600 tts/0 vt100' &gt;&gt; /etc/inittab</i>
</pre>

<p>
Aboot 現在已經設定完成了，請繼續到 <uri
link="?part=1&amp;chap=10">安裝系統所需工具</uri>.
</p>

</body>
</section>
<section>
<title>其他選擇： 使用 MILO</title>
<body>

<impo>
MILO 只適用於 alpah 相關的架構！
</impo>

<p>
在我們繼續之前，你將需要決定如何使用 MILO。在這個段落，我們將假設你要建立 MILO
開機磁片。如果你有打算從 MS-DOS 的分割區開機，你應該要完善的設定所需的指令。
</p>

<p>
要安裝 MILO，我們使用 <c>emerge</c>。
</p>

<pre caption = "安裝 MILO">
# <i>emerge --usepkg milo</i>
</pre>

<p>
MILO 安裝完成後， MILO 的檔案應該會被放在 <path>/opt/milo</path>。 以下為建立開
機磁片的指令。記得要使用正確的 Alpha 系統的映像檔。
</p>

<pre caption = "將 MILO 安裝至磁片">
<comment>（放入空白磁片）</comment>
# <i>fdformat /dev/fd0</i>
# <i>mformat a:</i>
# <i>mcopy /opt/milo/milo-2.2-18-gentoo-ruffian a:\milo</i>
# <i>mcopy /opt/milo/linload.exe a:\lilnload.exe</i>
<comment>(如果你有 Ruffian：</comment>     
  # <i>mcopy /opt/milo/ldmilo.exe a:\ldmilo.exe</i>
<comment>)</comment>
# <i>echo -ne '\125\252' | dd of=/dev/fd0 bs=1 seek=510 count=2</i>
</pre>

<p>
你的 MILO 開機片現在已經建立完成了。你將需要設定在你的 ARCS Firmware 一些環境變
數才可讓 MILO 啟動；
<uri link="http://tldp.org/HOWTO/MILO-HOWTO">MILO-HOWTO</uri> 將可以為你解釋一些
相關指令‵系統以及設定範例。
</p>

<p>
我們<e>強烈</e>建議你閱讀 
<uri link="http://tldp.org/HOWTO/MILO-HOWTO/">MILO-HOWTO</uri>
。
</p>

<p>
接下來請到 <uri link="?part=1&amp;chap=10">安裝系統所需工具</uri>。
</p>

</body>
</section>
<section>
<title>其他選擇：使用 SILO</title>
<body>

<p>
現在是安裝和設定 <uri link="http://www.sparc-boot.org">SILO</uri> 的時候了，
全名為 Sparc Imporved boot LOader。
</p>

<pre caption = "安裝 SILO">
# <i>emerge --usepkg silo</i>
</pre>

<p>
現在開啟你最喜歡的編輯器（我們將使用 <c>nano</c> 為範例）然後建立
<path>/etc/silo.conf</path>。
</p>

<pre caption = "建立 /etc/silo.conf">
# <i>nano -w /etc/silo.conf</i>
</pre>

<p>
在下面你將會看到 <path>silo.conf</path> 的範例檔。它使用的是手冊內預設的分割設定
和 <path>kernel-2.4.22</path> 為核心映像檔。
</p>

<pre caption = "/etc/silo.conf 範例">
partition = 1         <comment># 開機分割區（Boot）</comment>
root = /dev/hda4      <comment># 根分割區（Root）</comment>
timeout = 15          <comment># 開啟預設設定前等待15秒
</comment>

image = /boot/kernel-2.4.22
  label = linux
</pre>

<p>
如果你使用 Portage 內的 <path>silo.conf</path> 範例，請確定你將不需要的註解掉。
</p>

<p>
如果你的 <path>/boot</path> 分割區是和其他分開的，請將設定檔複製到
<path>/boot</path> 裡面然後執行 <c>/sbin/silo</c>：
</p>

<pre caption = "只適用於 /boot 分割區和其他分割區分開">
# <i>cp /etc/silo.conf /boot</i>
# <i>/sbin/silo -C /boot/silo.conf</i>
/boot/silo.conf appears to be valid
</pre>

<p>
如果你的 <path>/boot</path> 目錄是在你的根分割區內，只需要執行 
<c>/sbin/silo</c>：
</p>

<pre caption = "執行 silo">
# <i>/sbin/silo</i>
/etc/silo.conf appears to be valid
</pre>

<p>
接下來請到 <uri link="?part=1&amp;chap=10">安裝系統所需工具</uri>。
</p>

</body>
</section>
<section>
<title>其他選擇：執行 PALO</title>
<body>

<impo>
PALO 只是適用於 HPPA 的架構！
</impo>

<p>
在 PA-RISC 的平台，開機程式叫做 palo。你可以在 <path>/etc/palo.conf</path> 找到
設定檔。以下為設定檔範例：
</p>

<pre caption = "/etc/palo.conf 範例">
--commandline=2/vmlinux root=/dev/sdb2 HOME=/
--recoverykernel=/vmlinux.old
--init-partitioned=/dev/sdb
</pre>

<p>
第一行將告訴 palo 核心的位置和使用的相關開機參數。<c>2/vmlinux</c> 代表著在第二
個分割區內的核心檔。請注意，核心的路另和分割區有密切的光系而不是你的根分割區。
</p>

<p>
第二行將告訴 palo 使用哪一個復原核心。如果這是你第一次的核心安裝，並且沒有恢復核
心，請註解掉這行。第三和則是告訴 palo 所在的分割區。
</p>

<p>
當設定完成時，只需要執行 <c>palo</c>。
</p>

<pre caption = "套用 PALO 設定">
# <i>palo</i>
</pre>

<p>
接下來請到 <uri link="?part=1&amp;chap=10">安裝系統所需工具</uri>。
</p>

</body>
</section>
<section>
<title>其他選擇：使用 yaBoot</title>
<subsection>
<title>介紹</title>
<body>

<impo>
yaBoot 只適用於 NewWorld 的 PPC 架構！
</impo>

<p>
設定 yaBoot 有兩個方法。你可以使用新的改善過的 <c>yabootconfig</c> 包含著
<path>yaboot-1.3.8-r1</path> 然後自動設定 yaboot。如果因為某種原因你無法執行
<c>yabootconfig</c> 自動設定 <path>/etc/yaboot.conf</path>，你可以編輯已經在你的
系統裡面的範例檔。
</p>

<ul>
  <li><uri link="#doc_chap8_sect2">預設：使用 yabootconfig</uri></li>
  <li>
    <uri link="#doc_chap8_sect3">其他選擇：手動 yaBoot 設定</uri>
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>預設：使用 yabootconfig</title>
<body>

<p>
<c>yabootconfig</c> 將會自動偵測你的系統上的分割區然後設定 Linux, Mac OS 和 
Mac OS X 3的組合。
</p>

<p>
要使用 <c>yabootconfig</c>，你的磁碟一定要有一個 bootstrap 的分割區。
<path>/etc/fstab</path> 一定要依照你的 Linux 分割區設定。這兩個步驟一定要在少面
的步驟完成。要開始前，請確認你有最新版本的 yaboot 輸入 <c>emerge --update
yaboot</c>。這將會將 Portage 內的 yaboot 更新為最新，stage 檔案內的或許已經老就
。
</p>

<pre caption = "安裝 yaboot">
# <i>emerge --usepkg --update yaboot</i>
</pre>

<p>
現在執行 <c>yabootconfig</c>。這個程式將會執行然後確認 bootstrap 分割區。
如果正確，輸入 <c>Y</c>。如果錯誤，請檢查你的 <path>/etc/fstab</path>。
yabootconfig 將會掃描你的系統設定然後建立 <path>/etc/yaboot.conf</path>，然後
自動執行 <c>mkofboot</c>。<c>mkofboot</c> 是用來格式化你的 bootstrap 分割區，
然後將 yaboot 設定檔安裝到裡面。
</p>

<p>
你應該要確定 <path>/etc/yaboot.conf</path> 的內容。如果你更改 
<path>/etc/yaboot.conf</path> 的設定（像是更改預設開機），完成時確定要執行
<c>ybin -v</c> 套用相關更變。
</p>

<p>
接下來請到 <uri link="?part=1&amp;chap=10">安裝系統所需工具</uri>。
</p>

</body>
</subsection>
<subsection>
<title>其他選擇：手動設定 yaBoot</title>
<body>

<p>
請先確認你有最新版本的 <c>yaboot</c> 安裝到你的系統：
</p>

<pre caption = "安裝 yaboot">
# <i>emerge --usepkg --update yaboot</i>
</pre>

<p>
以下你將可以看到完整的 <path>yaboot.conf</path> 檔案：
</p>

<pre caption = "/etc/yaboot.conf">
<comment>## /etc/yaboot.conf
##
## run: "man yaboot.conf" for details. Do not make changes until you have!!
## see also: /usr/share/doc/yaboot/examples for example configurations.
##
## For a dual-boot menu, add one or more of:
## bsd=/dev/hdaX, macos=/dev/hdaY, macosx=/dev/hdaZ

## our bootstrap partition:</comment>

boot=/dev/hda9

<comment>##hd: is open firmware speak for hda</comment>
device=hd:
partition=11

root=/dev/hda11
delay=5
defaultos=macosx
timeout=30
install=/usr/lib/yaboot/yaboot
magicboot=/usr/lib/yaboot/ofboot

<comment>#################
## This section can be duplicated if you have more than one kernel or set of
## boot options
#################</comment>
image=/boot/vmlinux
  label=Linux
  sysmap=/boot/System.map
  read-only
<comment>##################</comment>

macos=/dev/hda13
macosx=/dev/hda12
enablecdboot
enableofboot
</pre>

<p>
當你完成 <path>yaboot.conf</path> 的設定時，你需要執行 <c>mkofboot -v</c> 來安裝
設定到 bootstrap 分割區。<e>請不要忘記！</e> 如果一切順利，你的設定檔和上面的一
樣，下次重開機時你將會看到一個簡單，五個選項的開機清單。如果你更新了你的 yaboot
設定檔，你只需要執行 <c>ybin -v</c> 更新 bootstrap 分割區 － <c>mkofboot</c>
只適用於第一次的設定。
</p>

<p>
關於更多相關 yaboot 的資料，請參考 <uri 
link="http://penguinppc.org/projects/yaboot">yaboot 計畫</uri>。
接下來請到 <uri link="?part=1&amp;chap=10">安裝系統所需工具</uri>。
</p>

</body>
</subsection>
</section>
<section>
<title>其他選擇：BootX</title>
<body>

<impo>
BootX 只適用於 OldWorld 的 PPC 架構！
</impo>

<p>
如果你想要使用 BootX，在這個階段你將不需要作任何事。但是重開機後，你將需要在
BootX 控制台內（MacOS 內）進行設定。我們將在 Gentoo 安裝完成時為你講解。
</p>

<p>
接下來請到 <uri link="?part=1&amp;chap=10">安裝系統所需工具</uri>。
</p>

</body>
</section>
<section>
<title>其他選擇： MIPS PROM</title>
<subsection>
<body>

<p>
MIPS 不需要你安裝開機程式。 MIPS ROM 將會負責開機，但是你需要將你的核心安裝為一
個選項。
</p>

<p>
首先，安裝 <c>dvhtool</c>，需要將核心複製到 SGI Volume Header。
</p>

<pre caption="安裝 dvhtool">
# <i>emerge dvhtool</i>
</pre>

<p>
現在將核心複製到 SGI Volume Header。<c>dvhtool </c> 將假設 SGI Volume Header
事放在 <path>/dev/sda</path>。如果這樣不正確（IRIS事安裝在<path>/dev/sda</path>
。Gentoo/MIPS 是在 <path>/dev/sdb</path>）你將需要使用 <c>-d &lt;device&gt;</c>
告訴 <c>dvhtool</c>。
</p>

<pre caption="複製核心到 SGI Volume Header">
# <i>dvhtool --unix-to-vh &lt;kernel name in /boot&gt; &lt;volume header 內的名字&gt;</i>
</pre>

<p>
如果你想要查看所有的可使用目錄，使用
<c>--print-volume-directory</c>:
</p>

<pre caption="查看所有可用的目錄">
# <i>dvhtool --print-volume-directory</i>
</pre>

<p>
要設定你的系統開啟至 Gentoo/MIPS 你將需要調整一些 MIPS PROM 的設定。我們將在
Gentoo 安裝完成時討論。
</p>

<p>
接下來請到 <uri link="?part=1&amp;chap=10">安裝系統所需工具</uri>。
</p>

</body>
</subsection>
</section>
</sections>
