<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/tw/Attic/cvs-tutorial.xml,v 1.10 2004/08/28 11:29:06 bennyc Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link = "/doc/tw/cvs-tutorial.xml">
<title>Gentoo Linux CVS 教學</title>
<author title="Chief Architect">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Translator">
  <mail link="ccpz@gentoo.org.tw">ccpz</mail>
</author>
<author title="Reviewer,Translator">
  <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>

<!-- rev 1.15 by Benny -->

<abstract>
這分文件教導使用者使用 CVS(the Concurrent Versions System，版本協調系統)，讓全世
界程式發展者可以以共同合作的方式來開發軟體。對 CVS 的新手來說，這分教學可以讓一
般使用者或是發展者很快就上手。不管您是想用來取得某個軟體的最新的原始碼，或是您想
成為資深的發展者，這分文件對您都很合適。
</abstract>

<version>1.7</version>
<date>六月 9, 2004</date>

<chapter>
<title>簡介</title>
<section>
<title>教學大綱</title>
<body>

<p>
這分文件包含兩個部份。首先是一般使用者如使用 CVS。例如如何透過 CVS 取得最新的原
始碼，並且更新到最近的檔案。另一部份就是如何用 CVS 來共同開發程式，包括修改、新
增、移除 CVS 上的檔案。建議您先閱讀第一部份，然後再接著讀第二部份。如果您之前已
經有一些 CVS 的使用經驗，但是您第一次以 CVS 來開發程式，您可以在第二部份找到所有
的資料，但或許您可以看看的一部份來複習。
</p>

</body>
</section>
<section>
<title>CVS是什麼？他是作什麼用的？</title>
<body>

<p>
CVS 是一個主從架構的系統，讓發展者可以藉它存放他們的專案在叫做儲藏庫(repository)
的地方。發展者可以藉著 CVS 客戶端工具來修改儲藏庫內的檔案，CVS 會追蹤每個檔案的
改變，並且建立這個專案完整的發展過程。發展者可以取得專案中某個檔案的較舊的版本，
看修改紀錄，或是作其他有用的工作。
</p>

</body>
</section>
<section>
<title>CVS 的作用</title>
<body>

<p>
許多的自由軟體有他們自己的 CVS 伺服器，當作程式發展者主要儲存的地方。發展者常常
會每天對程式作一些改進，而且他們通常是散佈在世界各地，因此 CVS 提供一個讓所有人
聯繫起來的機制。CVS 建立一種團隊的聯繫讓開發人員改進程式碼而不會蓋掉其他人的修改
，也不會遺失重要的資料或是重要的更新。
</p>

</body>
</section>
<section>
<title>CVS -- 最新的原始碼</title>
<body>

<p>
當程式發展差不多的時候，他們就會把 CVS 上目前的檔案壓縮成 .tar.gz 然後以新的版本
發表。然而，因為各種原因，最近的發表版本未必是最新的檔案。在這分教學的第一部份將
會教您如何用 CVS 取得最新的程式碼來使用。
</p>

</body>
</section>
<section>
<title>CVS -- 您裝了嗎?</title>
<body>

<p>
在您使用 CVS 之前，您需要先安裝它。確認您的系統裝了 CVS 的最簡單方法是：
</p>

<pre caption="執行 CVS">
# <i>cvs</i>
</pre>

<p>
如果有找到 cvs 指令，那您就可以開始使用了。不然的話，您必須要安裝符合您的 Linux 
 版本的執行檔，或是從原始碼來安裝。從原始碼安裝 CVS 相當的容易，我接下來就要示範
如何用原始碼安裝。
</p>

</body>
</section>
<section>
<title>從原始碼安裝 CVS</title>
<body>

<p>
從原始碼安裝 CVS 相當容易。首先，先從 
<uri>ftp://ftp.cvshome.org/pub/cvs-1.11/cvs-1.11.tar.gz</uri>
取得 cvs-1.11.tar.gz 壓縮檔(如果在<uri link="ftp://ftp.cvshome.org/pub/">這裡
</uri>有新的版本，您最好是抓新的版本)，然後執行下面的步驟(執行的結果為了簡潔而省
略)：
</p>

<pre caption="使用 tarball 安裝 CVS">
# <i>tar xzvf cvs-1.11.tar.gz</i>
# <i>cd cvs-1.11</i>
# <i>./configure</i>
# <i>make</i>
# <i>make install</i>
</pre>

<p>
現在您已經安裝好了。
</p>

</body>
</section>
<section>
<title>從套件管理系統安裝 CVS</title>
<body>

<p>
許多版本都有提供簡單的安裝方法。舉例來說，Gentoo 提供 
<c>emerge</c> 的指令。要安裝 CVS，只需要輸入 
<c>emerge cvs</c>。
</p>

<pre caption="使用 emerge 安裝 CVS">
# <i>emerge cvs</i>
</pre>

</body>
</section>
<section>
<title>CVSROOT 環境變數</title>
<body>

<p>
在開始之前，有一些 CVS 的基礎您必須要先知道。首先，為了和 CVS 連接，您必須要先知
道一個叫 "CVSROOT" 的路徑。CVSROOT 是一個類似網址的字串，告訴cvs程式遠端的伺服器
儲藏庫位置以及連線方式。根據位置在本機或遠端，以及您連線的方式，為了讓生活精彩點
，CVSROOT 有許多不同的格式。底下是各種格式的範例以及它的說明。
</p>

</body>
</section>
<section>
<title>本機的 CVSROOT</title>
<body>

<pre>
CVSROOT=/var/cvsroot
</pre>

<p>
這是一個本機的 CVSROOT 路徑範例，您可能會用像這樣的路徑連到本機上位於
 /var/cvsroot 的儲藏庫，或是經由 NFS 掛上 /var/cvsroot 的儲藏庫。
</p>

</body>
</section>
<section>
<title>遠端密碼伺服器的 CVSROOT</title>
<body>

<pre>
CVSROOT=:pserver:cvs@foo.bar.com:/var/cvsroot
</pre>

<p>
這是一個連接到 foo.bar.com 上位於 /var/cvsroot 儲藏庫的例子。開頭的 ":pserver:"
告訴程式使用包含在 CVS 內的 CVS 密碼伺服器協定連接。一般而言，公開的 CVS 使用這
種協定讓匿名使用者存取。
</p>

</body>
</section>
<section>
<title>遠端的 rsh/ssh CVSROOT</title>
<body>

<pre>
CVSROOT=drobbins@foo.bar.com:/data/cvs
</pre>

<p>
這是一個使用 RSH 或 SSH 協定連接的例子，在這個範例中，CVS伺服器嘗試用
 drobbins 帳號來存取放在 foo.bar.com 上的儲藏庫。如果 CVS_RSH 環境變數設定成
  "ssh"，cvs客戶端將會以 ssh 來連線，否則就使用 rsh。ssh連線方法在注重安全時相當
受歡迎。RSH 或 SSH 也可以讓匿名使用者存取。如果想使用這種方法，您必須在 
foo.bar.com 有一個登入帳號。
</p>

</body>
</section>
<section>
<title>一些其他的事情</title>
<body>

<p>
除了 CVSROOT 之外，您必須要知道您要您要下載軟您的模組(程式碼的集合)名稱，就算您
以匿名的密碼伺服器方式連接時也是一樣。不像匿名的 FTP，匿名使用者的密碼並沒有一定
的格式，所以您必須要從軟體的網站或發展者那得到密碼。一但您知道這些資訊以後，就可
以準備開始了。
</p>

</body>
</section>
<section>
<title>使用 CVS，第一部份</title>
<body>

<p>
取得原始碼包括兩階段的過程。首先，先登入密碼伺服器。然後再以 <c>checkout</c> 指
令取得原始碼。底下是一個取得最新的 Samba 原始碼範例：
</p>

<pre caption="設定 CVSROOT">
# <i>export CVSROOT=:pserver:cvs@pserver.samba.org:/cvsroot</i>
</pre>

<p>
第一行的指令設定 CVSROOT 環境變數。如果您沒有設定的話，您必須要在 <c>cvs</c>
指令後加上 <c>-d:pserver:cvs@pserver.samba.org:/cvsroot</c>，設定 CVSROOT
可以減少需多打字的時間。
</p>

</body>
</section>
<section>
<title>使用 CVS，第二部份</title>
<body>

<p>
接下來是取得最新的原始碼。您或許需要跳到下一部份取得這些指令的說明，
然後再回頭看：
</p>

<pre caption="下載原始碼">
# <i>cvs login</i>
(登入 to cvs@pserver.samba.org)
CVS password: <comment>(在這裡輸入密碼)</comment>

# <i>cvs -z5 co samba</i>
U samba/COPYING
U samba/Manifest
U samba/README
U samba/Read-Manifest-Now
U samba/Roadmap
U samba/WHATSNEW.txt
<comment>(這只是 cvs co 輸出的片段)</comment>
</pre>

</body>
</section>
<section>
<title>連接 CVS -- 說明</title>
<body>

<p>
上方的第一行指令登入 CVS，然後第二行告訴cvs客戶端下載 (check out，co) samba模組
，並且用 gzip 第五級的壓縮 ("-z5") 來加速下載。任何會在本機建立的新檔案，cvs 標
示"U [path]" 表示本機上的檔案已經被更新了。
</p>

</body>
</section>
<section>
<title>下載完畢</title>
<body>

<p>
一旦 checkout 命令完成之後，您會在您目前的目錄下看到包含最新原始碼的 "samba" 目
錄。您也會注意到每個目錄底下都有一個名為 "CVS" 的目錄，這個目錄被用來存放一些 
CVS 的資料，您可以安全的忽略他。接下來，您並不用擔心是否設定了 CVSROOT 環境變數
，因為這些資訊已經被紀錄在 "CVS" 目錄中。記得：您只需要在第一次登入及下載時指定 
CVSROOT。
</p>

</body>
</section>
<section>
<title>更新原始碼</title>
<body>

<p>
好了，現在您就有最新的程式碼了！現在您可以去編譯、安裝、觀看原始碼、或是作任何您
想作的事情。
</p>

<p>
有時候，您也許要更新到 CVS 上最新的原始碼。首先，您要先登入到伺服器，您的所有認
證資料都存在 "CVS" 目錄中，先進入要下載的目錄中(這個例子中為 samba)，接著打：
</p>

<pre caption="更新原始碼">
# <i>cvs update -dP</i>
</pre>

</body>
</section>
<section>
<title>"cvs update" 說明，第一部份</title>
<body>

<p>
如果有任何新的檔案，cvs 會在那一個項目顯示 "U [path]"。而且，如果您已經編譯過的
話，您可能會看到 "? [path]"，因為編譯時產生的目的檔 cvs 並不能從遠端找到。
</p>

</body>
</section>
<section>
<title>"cvs update" 說明，第二部份</title>
<body>

<p>
然後注意到我們在命令列加在 "cvs update" 的參數，"-d" 告訴 cvs 建立任何遠端儲藏庫
新增的目錄(他預設不這麼作)，"-P" 則是移除本機原始碼中任何空的目錄，因為 cvs 頃向
保留任何曾經使用過，但是現在不再被使用的目錄。
</p>

<p>
當您輕鬆的取得最新的原始碼以後，您就完成了。接下來看如何以 CVS 協助開發程式。
</p>

</body>
</section>
</chapter>
<chapter>
<title>以 CVS 協助開發程式</title>
<section>
<title>修改檔案</title>
<body>

<p>
身為一個發展者，您常常會需要修改 CVS 上的檔案。修改時，您只需要修改本機上從儲藏
庫下載的檔案。您在檔案上做的改變並不會加到遠端的檔案，直到您告訴 cvs 去"提交
(commit)"修改。當您確認過您的修改沒有問題後，作底下兩個步驟。首先，在原始碼的目
錄中輸入下列指令更新原始碼：
</p>

<pre caption="更新原始碼及目錄">
# <i>cvs update -dP</i>
</pre>

</body>
</section>
<section>
<title>CVS 合併其他的改變</title>
<body>

<p>
如同我們之前所看到的，"cvs update" 將會更新您的原始碼到最新的狀態--但是我作的修
改呢？不用擔心，他們並沒有被覆蓋。如果另一位開發者在本機上不存在的檔案作修改，本
機上的檔案將會被更新到儲藏庫中的版本。
</p>

<p>
此外，如果您修改了本機檔案的 1-10 行，而另一位開發者刪除了 40-50 行，在檔案結尾
新增 20 行，修改 30-40 行，而且在您之前就提交了他的修改，cvs 會聰明的在本機上的
檔案加入這些改變，而且您的所有修改並不會遺失。這讓兩個以上的發展者可以同時修改同
一個檔案。
</p>

</body>
</section>
<section>
<title>合併並不完美</title>
<body>

<p>
然而，如果有多個發展者在修改<e>檔案中同一部份</e>，那事情就變得有點複雜。
當他發生時，cvs 會告訴您有衝突發生。之前作的改變並不會遺失，但是
當 cvs 要求您做一些調整時，您必須要手動作一些修改。
</p>

</body>
</section>
<section>
<title>提交</title>
<body>

<p>
我們將會稍微看一下衝突如何解決，但是現在我們假設在您輸入 "cvs update -dP" 時，
並沒有衝突發生。您的程式碼目前已經是最新的，接下來就在目錄中輸入下列的指令來
提交您的修改：
</p>

<pre caption="提交修改">
# <i>cvs commit</i>
</pre>

</body>
</section>
<section>
<title>提交時做了什麼？</title>
<body>

<p>
"cvs commit" 不<e>僅僅</e>是讓儲藏庫中的檔案接受您的修改，cvs 會啟動預設的編輯器
讓您輸入一些針對修改的說明。一但您輸入指令，儲存檔案並且離開編輯器，您的改變(包
括說明)會被加入遠端的儲藏庫中，並且可以讓團隊中的其他人看到。
</p>

</body>
</section>
<section>
<title>檢視紀錄</title>
<body>

<p>
要看特定檔案(包括所有人作改變時加入的說明)的完整紀錄相當的容易，要查看這些資訊，
輸入：
</p>

<pre caption="檢視紀錄">
# <i>cvs log myfile.c</i>
</pre>

<p>
"cvs log" 是遞迴的，所以您只要輸入下列的指令就可以看所有檔案的紀錄：
</p>

<pre caption="一頁頁的檢視紀錄">
# <i>cvs log | less</i>
</pre>

</body>
</section>
<section>
<title>提交選項</title>
<body>

<p>
您或許會想在輸入 "cvs commit" 時使用其他的編輯器。只要設定 EDITOR 環境變數為您要
用的編輯器名稱，在您的 ~/.bashrc 中放入下面這一行會是一個好點子：
</p>

<pre caption="設定編輯器">
export EDITOR=jpico
</pre>

<p>
除此之外，您也可以在命令列中直接以參數加入說明，如此 cvs 就不用載入任何的編輯器
：
</p>

<pre caption="提交時送出小幅度的紀錄">
# <i>cvs commit -m 'I fixed a few silly bugs in portage.py'</i>
</pre>

</body>
</section>
<section>
<title>.cvsrc 檔案</title>
<body>

<p>
在繼續介紹更多的指令之前，我建議先設定 <path>~/.cvsrc</path>。在您的家目錄中設
定這個檔案之後，可以告訴 cvs 預設的指令參數，而不用去記得每次都要輸入他。底下建
議一個 <path>.cvsrc</path> 的設定：
</p>

<pre caption="建議設定">
cvs -q
diff -u -b -B
checkout -P
update -d -P
</pre>

</body>
</section>
<section>
<title>.cvsrc 檔案，續</title>
<body>

<p>
除了設定一系列 cvs 命令有用的參數，<path>.cvsrc</path> 第一行的指令讓 cvs 進入
安靜模式，這會讓 <c>cvs update</c> 輸出比較一致且容易閱讀的文字，而且當您設定
了 <path>.cvsrc</path> 之後，可以只打 <c>cvs update</c> 取代 
<c>cvs update -dP</c>。
</p>

</body>
</section>
<section>
<title>在儲藏庫中新增檔案</title>
<body>

<p>
首先，用您喜歡的編輯器新增檔案，然後輸入下列的文字：
</p>

<pre caption="新增檔案">
# <i>cvs add myfile.c</i>
cvs server: use 'cvs commit' to add this file permanently
</pre>

<p>
這會告訴 cvs 在下一次執行 <c>cvs commit</c> 時新增這個檔案。在那之前，其他的發
展者並不會看到。
</p>

</body>
</section>
<section>
<title>在儲藏庫中新增檔案</title>
<body>

<p>
加入目錄的過程也很類似：
</p>

<pre caption="新增目錄">
# <i>mkdir foo</i>
# <i>cvs add foo</i>
Directory /var/cvsroot/mycode/foo added to the repository
</pre>

<p>
不像新增檔案，當您加入一個目錄後他會立即在儲藏庫中顯示出來，一旦您將本機的目錄加
入 cvs 後，您會發現 "CVS" 目錄會在那個目錄內產生來儲存 cvs 的資料。因此，您可以
靠看裡面有沒有 "CVS" 目錄來判斷這個目錄是否加入 CVS 了。
</p>

</body>
</section>
<section>
<title>"cvs add" 註解</title>
<body>

<p>
對了，跟您猜的一樣，在把目錄或當案加入儲藏庫前，您要確定他的上層目錄已經加到 CVS
 中。否則，您會得到像這樣的錯誤：
</p>

<pre caption="新增檔案，但傳回了錯誤">
# <i>cvs add myfile.c</i>
cvs add: cannot open CVS/Entries for reading: No such file or directory
cvs [add aborted]: no repository
</pre>

</body>
</section>
<section>
<title>熟悉 "cvs update"，第一部份</title>
<body>

<p>
在了解如何處理衝突之前，先來了解 "cvs update" 輸出內容。如果您的 ~/.cvsrc 中有 "
cvs -q" 您會發現 "cvs update" 的輸出結果很容易閱讀，"cvs update" 靠輸出一個字母
，空白，或是檔名來告訴您他作什麼以及觀察到什麼，如同底下的例子：
</p>

<pre  caption="更新 CVS">
# <i>cvs update -dP</i>
? distfiles
? packages
? profiles
</pre>

</body>
</section>
<section>
<title>熟悉 "cvs update"，第二部份</title>
<body>

<p>
"cvs update" 用 "?" 告訴您關於那個檔案他並不知道任何事，那並不是在儲藏庫中的檔案
，也尚未被安排加到儲藏庫中，底下是所有 CVS 所使用的單一字元的列表：
</p>

<pre caption="訊息: U">
U [path]
</pre>

<p>
當有一個檔案在本機上的儲藏庫被建立，或是一個您尚未建立的檔案被更新時使用這個字元
。
</p>

<pre caption="訊息: A">
A [path]
</pre>

<p>
這個檔案已經被安排要加入並且將會在執行 <c>cvs commit</c> 時被加入。
</p>

</body>
</section>
<section>
<title>熟悉 "cvs update"，第三部份</title>
<body>

<pre caption="訊息: R">
R [path]
</pre>

<p>
這個跟 "A" 差不多，"R" 告訴您這個檔案已經被安排要刪除了，當您執行 
<c>cvs commit</c> 時，這個檔案將會從儲藏庫中移除。
</p>

<pre caption="訊息: M">
M [path]
</pre>

<p>
這代表這個檔案已經被您修改過。此外，這也可能是儲藏庫中作的改變已經成功的加到這個
檔案。
</p>

<pre caption="訊息: C">
C [path]
</pre>

<p>
"C" 字元指出這個檔案有衝突，而且您必須要在您作 "cvs commit" 之前手動作一些調整。
</p>

</body>
</section>
<section>
<title>衝突解決介紹</title>
<body>

<p>
現在我們來看看如何解決衝突。我參與 Gentoo Linux 計畫，而我們在 cvs.gentoo.org
 設立我們自己的 cvs 伺服器，發展者花了大部份的時間修改 "gentoo-x86" 模組裡面的原
始碼。在這個模組裡面，有一個叫做 "ChangeLog" 的檔案(您大概猜到)存放在這個儲藏庫
裡面所有檔案的修改說明。
</p>

</body>
</section>
<section>
<title>衝突的範例</title>
<body>

<p>
因為幾乎每位發展者在 CVS 上做修改時都會去修改這個檔案，這是主要的衝突來源。
底下是一個衝突的範例，假設我在 ChangeLog 的頂端加入下面幾行：
</p>

<pre caption="更新紀錄">
date 25 Feb 2001

這是我自己加入的東西
</pre>

<p>
然而，假設在我可以提交之前，另一位發展者在 ChangeLog 的頂端加入下面幾行並且提交
了他的修改：
</p>

<pre caption="更新紀錄 2">
date 25 Feb 2001

這是另一位發展者加入的部份
</pre>

</body>
</section>
<section>
<title>衝突的範例，續</title>
<body>

<p>
現在當我執行 <c>cvs update -dP</c> (提交前您應該都做這個動作)，cvs 並不能夠把他
的修改合併到我的檔案當中，因為我們都加在這的檔案的相同部份 -- cvs 如何判斷使用
那一個版本？所以，我得的了底下的錯誤：
</p>

<pre caption="CVS 錯誤">
RCS file: /var/cvsroot/gentoo-x86/ChangeLog,v
retrieving revision 1.362
retrieving revision 1.363
Merging differences between 1.362 and 1.363 into ChangeLog
rcsmerge: warning: conflicts during merge
cvs server: conflicts found in ChangeLog
C ChangeLog
</pre>

</body>
</section>
<section>
<title>解決衝突，第一部份</title>
<body>

<p>
唉--有衝突！幸好這很容易修正。如果我用編輯器打開這個檔案，我在檔案頂端看到下列的
文字：
</p>

<pre caption="更新紀錄衝突">
&lt;&lt;&lt;&lt;&lt;&lt;&lt; ChangeLog
date 25 Feb 2001

這是我自己加入的東西

=======
date 25 Feb 2001

這是另一位發展者加入的部份
 
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1.363
</pre>

</body>
</section>
<section>
<title>解決衝突，第二部份</title>
<body>

<p>
cvs 不是以一個版本蓋掉另一個版本，而是在 ChangeLog 檔案中加入兩個版本，並且以特
殊的分隔符號清楚的標記衝突的地方。現在，由您決定在這部份<e>應該</e>出現的內容，
在這個範例中，取代後的文字並不是兩個版本中的一個，而是合併兩者：
</p>

<pre caption="更新紀錄">
date 25 Feb 2001

這是我自己加入的東西

這是另一位發展者加入的部份
</pre>

<p>
現在我已經用上列的文字取代衝突的部份(並且移除了 "=======" 之類的標記)，我現在可
以毫無問題的提交我的修改。
</p>

</body>
</section>
<section>
<title>解決衝突的技巧</title>
<body>

<p>
當您需要去編輯衝突的檔案時，確認您已經看過整個檔案來找到所有的衝突，如果有衝突您
忘了修改，cvs 在您修改前並不允許您提交。移除 cvs 加到檔案中的標記也相當重要。還
有另一個技巧，如果您在修正時犯了錯誤並且意外的儲存了，您可以在 
".#filename.version" 檔案中找到原始的備份版本。
</p>

</body>
</section>
<section>
<title>移除檔案</title>
<body>

<p>
現在是學習 CVS 技能最後一項--移除儲藏庫中的檔案。移除檔案是兩階段的過程。首先，
刪除在本機上的檔案，然後執行 <c>cvs remove</c> 指令：
</p>

<pre caption="移除檔案">
# <i>rm myoldfile.c</i>
# <i>cvs remove myoldfile.c</i>
</pre>

</body>
</section>
<section>
<title>移除檔案，續</title>
<body>

<p>
這個檔案會被預定在下一次提交時從儲藏庫中刪除。一旦提交之後，檔案將會儲藏庫中移除
，但是 cvs 不會把他丟棄，而會保存完整的內容及修改紀錄，以便未來當您需要時可以找
到。這是 cvs 保護您的原始碼的其中一個方法。
</p>

<p>
<c>cvs remove</c> 是遞迴的，這代表您可以刪除一系列的檔案，然後執行 
<c>cvs remove</c> 而不需要外加其他的參數。這樣的話會讓所有被刪除的檔案在下次提
交時刪除。
</p>

</body>
</section>
<section>
<title>移除目錄</title>
<body>

<p>
如果您想要移除整個目錄，我建議您依照下列的步驟。首先，刪除在這個目錄中的所有檔案
：
</p>

<pre caption="移除目錄">
# <i>rm *.c</i>
# <i>cvs remove</i>
</pre>

</body>
</section>
<section>
<title>移除目錄，續</title>
<body>

<p>
然後，執行提交：
</p>

<pre  caption="提交改變">
# cvs commit
</pre>

<p>
這裡有一個技巧。執行下列的步驟刪除目錄：
</p>

<pre caption="刪除目錄">
# <i>cd ..</i>
# <i>cvs remove mydir</i>
# <i>rm -rf mydir</i>
</pre>

<p>
注意這裡移除目錄並不用執行提交，目錄立即從儲藏庫中移除。
</p>

</body>
</section>

<section>
<title>完成！</title>
<body>

<p>
CVS 的介紹已經完畢了，我希望這份教學很有用。有更多關於 CVS 的資料我可以加到這篇
教學中，但是感謝這裡有許多很棒的 CVS 資源讓您可以獲得更多 CVS 的知識：
</p>

<ul>
  <li>
    <uri>http://www.cvshome.org</uri> CVS 計畫的網站,並且提供許多 CVS 文件，包括
    <uri link="http://www.cvshome.org/docs/manual">線上官方文件</uri>。
  </li>
  <li>
    <uri link="http://www.durak.org/cvswebsites/">CVS Version Control for Web 
    Site Projects site</uri> 對於如何使用 CVS發展網站有詳細的資訊。
  </li>
  <li>
    Karl Fogel 寫了一本書叫做 <uri link="http://cvsbook.red-bean.com/">Open 
    Source Development with CVS</uri>。大部份的內容可以在網站上免費閱讀。
  </li>
  <li>
    <uri link="http://freebsd.org/projects/cvsweb.html">cvsweb</uri>
    是一個相當棒的 CGI script ，提供一個 CVS 的網頁介面，瀏覽起來非常棒。
  </li>
  <li>
    <uri link="http://www.loria.fr/~molli/cvs-index.html">CVS Bubbles</uri> 這個
    網站有許多有用的資源，包括常見問題集。
  </li>	
</ul>

</body>
</section>
<section>
<title>關於這分文件</title>
<body>

<p>
這分文件的原始版本是發表在 IBM developerWorks，所有權屬於 Westtech Information 
Services。這分文件是從他的原始版本修改而來，並且包含許多 Gentoo Linux 文件團隊做
的改進。
</p>

</body>
</section>
</chapter>
</guide>	
