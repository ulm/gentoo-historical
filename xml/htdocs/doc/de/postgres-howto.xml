<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/postgres-howto.xml,v 1.3 2012/04/18 18:30:18 swift Exp $ -->

<!-- English CVS Version: 1.4 -->

<guide lang="de">
<title>PostgreSQL Leitfaden</title>

<author title="Autor">
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>
<author title="Bearbeiter">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Übersetzer">
  <mail link="her@gmx.de">Rolf Herzog</mail>
</author>
<author title="Korrektor">
  <mail link="keytoaster@gentoo.org">Tobias Heinlein</mail>
</author>

<abstract>
Dieser Leitfaden soll die grundlegende Einrichtung von PostgreSQL erläutern.
Das Setup, das hier beschrieben wird, sollte für einfache Web-Applikationen
sowie für jedes andere Programm, das PostgreSQL-Unterstützung anbietet,
ausreichen.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.2</version>
<date>2007-04-25</date>

<chapter>
<title>Einleitung</title>
<section>
<title>Einführung in PostgreSQL</title>
<body>

<p>
Wenn man mit Entwicklern über unterschiedliche Datenbanklösungen spricht,
wird die Antwort üblicherweise zwei große Datenbanken umfassen. Die eine würde
<c>MySQL</c> sein und die andere wäre das, worauf sich dieser Text bezieht:
<c>PostreSQL</c>. Die Vorteile der einen gegenüber der anderen sind eine mehr
oder weniger langwierige Debatte, aber man kann sagen, dass <c>PostgreSQL</c>
eine stärkere Fokussierung auf relationale Datenbank-Strukturen hat als
<c>MySQL.</c> Die meisten Standard-Fähigkeiten wie <b>FOREIGN KEY</b> wurden
erst in MySQL 5 hinzugefügt. Jedoch geht dieses Dokument davon aus, dass Sie
PostgreSQL als Datenbank gewählt haben. Der erste Schritt mit dem wir
beginnen, ist der <c>emerge</c> Prozess. Im nächsten Abschnitt wird der
Installationsprozess mit "emerge" sowie die grundlegende Konfiguration
beschrieben.
</p>

</body>
</section>
<section>
<title>PostgreSQL Installation</title>
<body>

<p>
Um anzufangen, müssen wir zunächst ein <c>emerge</c> des PostgreSQL-Paketes
durchführen. Führen Sie dazu den folgenden Code aus, um sicherzustellen, dass
die Optionen des Paketes richtig gesetzt sind:
</p>

<pre caption="Überprüfung der PostgreSQL Build-Optionen">
# <i>emerge -pv postgresql</i>

These are the packages that I would merge, in order:

Calculating dependencies ...done!
[ebuild  N    ] dev-db/postgresql-8.0.4  -doc -kerberos +libg++ +nls +pam +perl -pg-intdatetime +python +readline (-selinux) +ssl -tcl +xml +zlib 0 kB
</pre>

<p>
Hier ist eine Liste der unterschiedlichen Build-Optionen:
</p>

<table>
<tr>
  <th>USE-Flag</th>
  <th>Bedeutung</th>
</tr>
<tr>
  <ti>doc</ti>
  <ti>
    Dieses USE-Flag steuert die Installation von Dokumentation ausserhalb der
    normalen Handbuchseiten (man pages). Wenn der Speicherplatz knapp ist, oder
    wenn Sie alternative Methoden benutzen, um die Dokumentation einzusehen
    (online z.B.), können Sie dieses Flag deaktivieren.
  </ti>
</tr>
<tr>
  <ti>kerberos</ti>
  <ti>
    Wenn diese Option aktiv ist, hat der Administrator während des
    Verbindungsaufbaus zur Datenbank die Möglichkeit <c>kerberos</c> zur
    Authentifizierung seiner Benutzer/Dienste zu verwenden.
  </ti>
</tr>
<tr>
  <ti>nls</ti>
  <ti>
    Wenn diese Option aktiv ist, kann PostgreSQL übersetzte Meldungen für
    Benutzer, die nicht Englisch sprechen, verwenden.
  </ti>
</tr>
<tr>
  <ti>pam</ti>
  <ti>
    Wenn diese Option aktiv ist und der Administrator PostgreSQL entsprechend
    konfiguriert hat, können sich Benutzer/Dienste über <c>PAM</c> (Pluggable
    Authentication Module) zu einer Datenbank verbinden.
  </ti>
</tr>
<tr>
  <ti>perl</ti>
  <ti>
    Wenn diese Option aktiviert ist, wird die Unterstützung für <c>Perl</c> in
    PostgreSQL eingebaut.
  </ti>
</tr>
<tr>
  <ti>pg-intdatetime</ti>
  <ti>
    Wenn diese Option aktiviert ist, unterstützt PostgreSQL 64-Bit-Integer
    Datumstypen.
  </ti>
</tr>
<tr>
  <ti>python</ti>
  <ti>
    Wenn diese Option aktiviert ist, wird die Unterstützung für <c>Python</c> in
    PostgreSQL eingebaut.
  </ti>
</tr>
<tr>
  <ti>readline</ti>
  <ti>
    Wenn diese Option aktiviert ist, unterstützt PostgreSQL das Bearbeiten von
    Kommandozeilen mit <c>readline</c>. Das beinhaltet eine Kommando-Historie
    und isearch.
  </ti>
</tr>
<tr>
  <ti>selinux</ti>
  <ti>
    Wenn diese Option aktiviert ist, wird eine Policy für <c>selinux</c> zur
    Unterstützung von PostgreSQL installiert.
  </ti>
</tr>
<tr>
  <ti>ssl</ti>
  <ti>
    Wenn diese Option aktiviert ist, kann PostgreSQL <c>OpenSSL</c> benutzen um
    den Datenverkehr zwischen Client und Server zu verschlüsseln.
  </ti>
</tr>
<tr>
  <ti>tcl</ti>
  <ti>
    Wenn diese Option aktiviert ist, wird die Unterstützung für <c>Tcl/Tk</c> in
    PostgreSQL eingebaut.
  </ti>
</tr>
<tr>
  <ti>xml</ti>
  <ti>
    Wenn diese Option aktiviert ist, wird XML-Unterstützung im <c>XPATH</c>-Stil
    eingebaut. Mehr Infomationen zur Benutzung der XML-Unterstützung in
    PostgrSQL gibt es bei:
    <uri link="http://www.throwingbeans.org/postgresql_and_xml.html">
    PostgreSQL and XML</uri>.
  </ti>
</tr>
<tr>
  <ti>zlib</ti>
  <ti>
    Diese Option ist nicht für PostgreSQL selbst, sondern für <c>pg_dump</c> um
    seine Ausgabe zu komprimieren.
  </ti>
</tr>
</table>

<p>
Wenn Sie PostgreSQL entsprechend Ihren Wünschen angepasst haben, starten Sie
die Installation mit <c>emerge</c>:
</p>

<pre caption="Emerge-ing PostgreSQL">
# <i>emerge postgresql</i>
<comment>(Output shortened)</comment>
>>> /usr/lib/libecpg.so.5 -> libecpg.so.5.0
>>> /usr/bin/postmaster -> postgres
 * Make sure the postgres user in /etc/passwd has an account setup with /bin/bash as the shell
 *
 * Execute the following command
 * emerge --config =postgresql-8.0.4
 * to setup the initial database environment.
 *
>>> Regenerating /etc/ld.so.cache...
>>> dev-db/postgresql-8.0.4 merged.
</pre>

<p>
Wie in der Ausgabe von einfo gezeigt, sind noch einige Einstellungen zu machen.
Das nächste Kapitel wird einen Blick auf die Konfiguration von PostgreSQL
werfen.
</p>

</body>
</section>
</chapter>
<chapter>
<title>PostgreSQL Konfiguration</title>
<section>
<title>Initialisieren der Datenbank-Umgebung</title>
<body>

<p>
Wie bereits in der Ausgabe von <c>emerge</c> erwähnt, muss zunächst die
Datenbank-Umgebung initialisiert werden. Aber bevor dies geschieht, muss eine
Sache beachtet werden: Anders als etwa MySQL ist das "root" Passwort von
PostgreSQL das Passwort des aktuellen Benutzers. Das Ebuild erzeugt aber nur den
Benutzer und <e>nicht</e> das Passwort. Deshalb muss, bevor wir anfangen, das
Passwort des Benutzers "postgres" gesetzt werden:
</p>

<pre caption="Setzen des Passworts">
# <i>passwd postgres</i>
New UNIX password:
Retype new UNIX password:
passwd: password updated successfully
</pre>

<p>
Nachdem dies eingerichtet ist, kann die Initialisierung der Datenbank-Umgebung
erfolgen:
</p>

<pre caption="Konfiguration der Datenbank-Umgebung mit emerge --config">
# <i>emerge --config =postgresql-8.0.4</i>


Configuring pkg...

 * Creating the data directory ...
 * Initializing the database ...
The files belonging to this database system will be owned by user "postgres".
This user must also own the server process.

The database cluster will be initialized with locale C.

fixing permissions on existing directory /var/lib/postgresql/data ... ok
creating directory /var/lib/postgresql/data/global ... ok
creating directory /var/lib/postgresql/data/pg_xlog ... ok
creating directory /var/lib/postgresql/data/pg_xlog/archive_status ... ok
creating directory /var/lib/postgresql/data/pg_clog ... ok
creating directory /var/lib/postgresql/data/pg_subtrans ... ok
creating directory /var/lib/postgresql/data/base ... ok
creating directory /var/lib/postgresql/data/base/1 ... ok
creating directory /var/lib/postgresql/data/pg_tblspc ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 1000
creating configuration files ... ok
creating template1 database in /var/lib/postgresql/data/base/1 ... ok
initializing pg_shadow ... ok
enabling unlimited row size for system tables ... ok
initializing pg_depend ... ok
creating system views ... ok
loading pg_description ... ok
creating conversions ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok

WARNING: enabling "trust" authentication for local connections
You can change this by editing pg_hba.conf or using the -A option the
next time you run initdb.

Success. You can now start the database server using:

    /usr/bin/postmaster -D /var/lib/postgresql/data
or
    /usr/bin/pg_ctl -D /var/lib/postgresql/data -l logfile start

 *
 * You can use /etc/init.d/postgresql script to run PostgreSQL instead of pg_ctl.
 *
</pre>

<p>
Nun ist die initiale Datenbank-Umgebung eingerichtet. Der nächste Abschnitt
wird die Überprüfung der Installation und die Einrichtung von
Benutzern für den Zugriff auf die Datenbank erläutern.
</p>

</body>
</section>
<section>
<title>Einrichtung der PostgreSQL-Datenbank</title>
<body>

<p>
Nachdem PostgreSQL nun eingerichtet wurde, ist es eine gute Idee, die
Installation an diesem Punkt zu überprüfen. Stellen Sie zunächst sicher, dass
der Dienst korrekt startet:
</p>

<pre caption="Start des PostgreSQL-Dienstes">
# <i>/etc/init.d/postgresql start</i>
* Starting PostgreSQL ...                                          [ ok ]
</pre>

<p>
Nachdem überprüft wurde, dass dies Funktioniert, ist es eine weitere gute
Idee, den Dienst zum Runlevel "default" hinzuzufügen, so dass PostgreSQL beim
Hochfahren des Rechners startet:

</p>

<pre caption="Hinzufügen des Dienstes zum Runlevel &quot;default&quot;">
# <i>rc-update add postgresql default</i>
* postgresql added to runlevel default
</pre>

<p>
Nachdem der Dienst nun gestartet wurde, ist es Zeit zu versuchen eine
Test-Datenbank einzurichten. Lassen Sie uns für den Anfang eine Test-Datenbank
mit dem Kommando <c>createdb</c> anlegen. Wir übergeben die Option <c>-U</c> um
den Benutzer zu setzen (ansonsten wird als Voreinstellung der aktuelle
Benutzername verwendet) und außerdem die Option <c>-W</c> um das Passwort
anzufordern, das wir oben erzeugt haben. Schließlich übergeben wir dem Kommando
den Namen der Datenbank, die wir erstellen wollen:
</p>

<pre caption="Anlegen einer Datenbank mit createdb">
$ <i>createdb -U postgres -W test</i>
Password:
CREATE DATABASE
</pre>

<p>
Die Datenbank wurde erfolgreich angelegt und wir können nun überprüfen, ob
sie einfache Aufgaben durchführen kann. Wir machen dann weiter und löschen diese
Datenbank mit dem Kommando <c>dropdb</c>.
</p>

<pre caption="Löschen einer Datenbank mit dropdb">
$ <i>dropdb -U postgres -W test</i>
Password:
DROP DATABASE
</pre>

<p>
Im Moment kann nur der Benutzer &quot;postgres&quot; Befehle ausführen. Das
ist offentlichtlich nicht die Art von Setup wie man es sich für eine
Mehrbenutzer-Umgebung wünscht. Der nächste Abschnitt wird einen Blick auf das
Arbeiten mit Benutzer-Accounts werfen.
</p>

</body>
</section>
<section>
<title>Einrichtung von Benutzer-Accounts für Datenbanken</title>
<body>

<p>
Wie bereits erwähnt ist es in einer Mehrbenutzer-Umgebung nicht gerade
wünschenswert sich jedesmal mit dem Benutzer &quot;postgres&quot; einloggen zu
müssen. In den meisten Fällen wird es mehrere Benutzer und Dienste geben, die
auf den Server zugreifen, und jeder hat unterschiedliche Anforderungen an die
Zugriffsrechte. Um das zu bewältigen, kann der Befehl <c>createuser</c>
benutzt werden. Dieses Kommando ist eine Alternative zum Starten mehrer
SQL-Abfragen und ist vom Standpunkt des Administrators aus eine ganzes Stück
flexibler. Wir fahren damit fort, zwei Benutzer anzulegen. Ein 'superuser', der
andere Benutzer hinzufügen und die Datenbank administrieren kann, und einen
Standard-Benutzer.
</p>

<pre caption="Erstellen des Superusers">
<comment>(Ersetzen Sie chris mit einem Benutzernamen Ihrer Wahl)</comment>
$ <i>createuser -a -d -P -E -U postgres -W chris</i>
Enter password for new user:
Enter it again:
Password:
CREATE USER
</pre>

<p>
Nun haben wir den Superuser erzeugt. Die Kommandozeilen-Option <c>-a</c> gibt
an, dass der Benutzer andere Benutzer hinzufügen kann. <c>-d</c> bedeutet, dass
dieser Benutzer Datenbanken erstellen kann. <c>-P</c> erlaubt Ihnen das Passwort
des Benutzers einzugeben und <c>-E</c> verschlüsselt es aus Gründen der
Sicherheit. Wir testen jetzt die Berechtigungen des neuen Benutzers, indem wir
den Standard-Benutzer erstellen:
</p>

<pre caption="Erstellen des Standard-Benutzers">
<comment>(Ersetzen Sie chris mit dem Benutzernamen, den Sie eben angelegt haben)</comment>
$ <i>createuser -A -D -P -E -U chris -W testuser</i>
Enter password for new user:
Enter it again:
Password:
CREATE USER
</pre>

<p>
Erfolg! Unser neuer Benutzer wurde mit dem kürzlich erzeugten Superuser
erstellt. Die Optionen <c>-A</c> und <c>-D</c> bewirken das Gegenteil von
<c>-a</c> und <c>-d</c> und verwehren dem Benutzer die Erstellung anderer
Benutzer und Datenbanken. Da nun Benutzer vorhanden sind, mit denen gearbeitet
werden kann, wird das nächste Kapitel zeigen wie die neue Datenbank benutzt
werden kann.
</p>

</body>
</section>
</chapter>
<chapter>
<title>PostgreSQL Benutzen</title>
<section>
<title>Einstellung von Berechtigungen</title>
<body>

<p>
In unserer neuen Datenbank-Umgebung haben wir nun einen Benutzer, der
Datenbanken und andere Benutzer anlegen kann, und den Hauptbenutzer 'postgres',
der alles tun kann. Der Benutzer, der vorhin erstellt wurde, kann sich im Moment
nur in den Server einloggen, und mehr nicht. In der Regel müssen Benutzer in der
Lage sein Daten einzugeben und auszulesen und machmal auch jede Menge anderer
Aufgaben erledigen zu können. Damit der neue Benutzer also irgendetwas tun kann,
müssen wir eine Datenbank entsprechend einrichten. Das kann man ganz einfach
durch die Übergabe des Parameters <c>-O</c> an <c>createdb</c> erreichen. Wir
beginnen damit, mit unserem Superuser eine neue Datenbank, <b>MyDB</b>, zu
erstellen, die dem kürzlich erstellen 'testuser' gehören soll:
</p>

<pre caption="Erstellung der MyDB Datenbank">
$ <i>createdb -O testuser -U chris -W MyDB</i>
Password:
CREATE DATABASE
</pre>

<p>
In Ordnung, jetzt haben wir eine neue Datenbank "MyDB" und ein "testuser"
kann darauf zugreifen. Um dies zu überprüfen, loggen wir uns als Benutzer
"testuser" in die neue Datenbank "MyDB" ein. Dazu verwenden wird das Programm
<c>psql</c>. Dieses Programm wird dazu benutzt sich mit einer
PostgreSQL-Datenbank von der Kommandozeile aus zu verbinden. Verbinden Sie sich
nun zu der neuen Datenbank wie folgt:
</p>

<pre caption="Einloggen in die MyDB Datenbank als Benutzer testuser">
$ <i>psql -U testuser -W MyDB</i>
Password:
Welcome to psql 8.0.4, the PostgreSQL interactive terminal.

Type:  \copyright for distribution terms
       \h for help with SQL commands
       \? for help with psql commands
       \g or terminate with semicolon to execute query
       \q to quit

MyDB=&gt;
</pre>

<p>
So, der Benutzer ist jetzt in die Datenbank eingeloggt und kann ein paar
Befehle starten. Um ein Gefühl für die Benutzung von PostgreSQL zu bekommen,
wird der nächste Abschnitt einen Blick auf einige grundlegende Kommandos werfen,
um in <c>psql</c> zu navigieren.
</p>

</body>
</section>
<section>
<title>Grundlegende PostgreSQL Befehle und das Erstellen einer Tabelle</title>
<body>

<p>
Für jemanden, der MySQL gewohnt ist, ist dies hier quasi Pflichtlektüre.
PostgreSQL ist hier etwas sonderbar, wenn es um das Ausführen von Befehlen
geht. Für den Anfang folgt hier eine Liste einiger Befehle, die später noch
diskutiert werden:
</p>

<table>
<tr>
  <th>Befehl</th>
  <th>Verwendung</th>
  <th>MySQL Äquivalent</th>
</tr>
<tr>
  <ti>\c[onnect] [DBNAME|- [USER]]</ti>
  <ti>Verbindet zu einer anderen Datenbank</ti>
  <ti>USE DATABASE</ti>
</tr>
<tr>
  <ti>\q</ti>
  <ti>Beendet <c>psql</c></ti>
  <ti>quit</ti>
</tr>
<tr>
  <ti>\i FILE</ti>
  <ti>Befehle aus der Datei <c>FILE</c> ausführen</ti>
  <ti>source FILE</ti>
</tr>
<tr>
  <ti>\o [FILE]</ti>
  <ti>Sende das Resultat einer Abfrage nach <c>FILE</c></ti>
  <ti>INTO OUTFILE, gibt alles aus (nicht nur SELECTS)</ti>
</tr>
<tr>
  <ti>\d [NAME]</ti>
  <ti>Beschreibt eine Datenbank oder Tabelle (sowie andere Dinge)</ti>
  <ti>DESC(RIBE)</ti>
</tr>
<tr>
  <ti>\db [PATTERN]</ti>
  <ti>
    Zeigt verfügbare Tabellen an, auf die das Muster <c>PATTERN</c>
    zutrifft (oder alle wenn kein Muster angegeben wird)
  </ti>
  <ti>SHOW TABLES</ti>
</tr>
</table>

<p>
Mit der Ausnahme von <c>\c[onnect]</c> werden alle Kommandos in diesem
Abschnitt benutzt. Im Augenblick ist die Datenbank noch leer. Wir müssen also
noch ein paar Daten einfügen. Der erste Schritt um Daten einzugeben ist,
sie in eine Tabelle zu schreiben. Im Augenblick haben wir noch keine Tabellen in
der Datenbank, also müssen wir eine erzeugen. Das geschieht mit dem Befehl
<c>CREATE TABLE</c>. Wir erstellen eine Tabelle mit Artikeln. Sie enthält eine
Artikelnummer, eine Beschreibung und den Preis:
</p>

<pre caption="Erstellung einer Artikel-Tabelle">
MyDB=> CREATE TABLE products (
MyDB(&gt;   product_id SERIAL,
MyDB(&gt;   description TEXT,
MyDB(&gt;   price DECIMAL
MyDB(&gt; );
NOTICE:  CREATE TABLE will create implicit sequence "products_product_id_seq"
for serial column "products.product_id"
CREATE TABLE
</pre>

<p>
Sie können die Ausgabe "NOTICE" ignorieren, sie ist harmlos. Wenn man die
letzte Zeile der Ausgabe betrachtet, scheint <c>CREATE TABLE</c> erfolgreich
verlaufen zu sein. Aber lassen Sie uns trotzdem mit dem Kommando
<c>\d</c>überprüfen, ob die Tabelle wirklich korrekt angelegt wurde: </p>

<pre caption="Betrachten der neu erstellen Tabelle">
MyDB=&gt; <i>\d products</i>
                                 Table "public.products"
   Column    |  Type   |                            Modifiers
-------------+---------+------------------------------------------------------------------
 product_id  | integer | not null default nextval('public.products_product_id_seq'::text)
 description | text    |
 price       | numeric |
</pre>

<p>
Die Tabelle wurde tatsächlich erfolgreich erzeugt. Da nun eine Tabelle erstellt
wurde, muss sie mit Daten gefüllt werden. Im nächsten Abschnitt werden wir
betrachten, wie man eine Datenbank mit Daten füllt.
</p>

</body>
</section>
<section>
<title>Eingabe von Daten in die Datenbank</title>
<body>

<p>
Dieser Abschnitt wird zwei Methoden, eine neu erstellte Tabelle mit Daten zu
füllen, betrachten. Lassen Sie uns zunächst das grundlegendste Kommando
<c>INSERT</c> betrachten:
</p>

<pre caption="Syntax von INSERT">
INSERT INTO [Tabellenname] (spalte1,spalte2,spalte3) VALUES(wert1,wert2,wert3)
</pre>

<p>
<c>Tabellenname</c> enthält den Namen der Tabelle in die Daten eingefügt
werden sollen. Der Ausdruck (spalte1,spalte2,spalte3) gibt spezifische Spalten
an, in die Werte eingegeben werden sollen. VALUES(wert1,wert2,wert3) ist die
Auflistung der Daten. Die Werte werden in der gleichen Reichenfolge wie die
Spalten eingefügt (spalte1 erhält wert1, spalte2 erhält wert2, spalte3 erhält
wert3). Die Anzahl <e>muss</e> jeweils identisch sein. Lassen Sie uns fortfahren
und einen Artikel in die Datenbank einfügen:
</p>

<impo>
Nachdem ich lange Zeit mit Datenbanken gearbeitet habe, empfehle ich
selbst, <c>INSERT</c>-Ausdrücke exakt wie oben anzugeben. Entwickler machen oft
den Fehler, <c>INSERT INTO</c> ohne Angabe von Spalten zu benutzen. Das ist
unproduktiv, weil es einen Fehler verursacht wenn neue Spalten zur Datenbank
hinzugefügt werden und die Anzahl der Spalten und Werte nicht mehr dieselbe ist.
Sie sollten <e>immer</e> die Spalten angeben, es sei denn, Sie sind zu 300%
sicher, dass Sie niemals eine Spalte hinzufügen werden.
</impo>

<pre caption="Einfügen von Daten in die Tabelle">
MyDB=&gt; <i>INSERT INTO products (description,price) VALUES('A test product', 12.00);</i>
INSERT 17273 1
</pre>

<p>
Die letzte Zeile muss näher erläutert werden. Die Rückgabe eines
Insert-Kommandos ist eine OID (Object Identifier) und die Anzahl der
hinzugefügten Zeilen. OIDs gehen etwas über den Rahmen dieses Leitfadens hinaus.
Die Adresse <uri
link="http://www.postgresql.org/docs/8.1/static/datatype-oid.html">PostgreSQL
manual</uri> hat einige gute Informationen dazu. Nun, für den Fall, dass Sie
20.000 Produkte haben, könnten dieser Insert-Befehl etwas mühselig werden.
Aber noch ist nicht alles verloren: Das Kommando <c>COPY</c> kann dazu benutzt
werden, um Daten aus einer Datei oder von stdin in eine Tabelle einzufügen.
Lassen Sie uns in diesem Beispiel anehmen, Sie haben eine CSV-Datei (comma
separated values) mit Artikelnummer, Beschreibung und Preis. Diese Datei sieht
wie folgt aus:
</p>

<pre caption="products.csv">
2,meat,6.79
3,soup,0.69
4,soda,1.79
</pre>

<p>
Jetzt werden wir das Kommando <c>COPY</c> benutzen, um unsere Daten einzufügen:
</p>

<impo>
Der Befehl <c>COPY FROM STDIN</c> wird benutzt, weil nur der Benutzer 'postgres'
Daten aus einer Datei einfügen kann (aus offensichtlichen Sicherheitsgründen).
</impo>

<pre caption="Verwendung von COPY um die Tabelle &quot;products&quot; zu füllen">
MyDB=&gt; <i>COPY products FROM STDIN WITH DELIMITER AS ',';</i>
Enter data to be copied followed by a newline.
End with a backslash and a period on a line by itself.
>> <i>2,meat,6.79</i>
>> <i>3,soup,0.69</i>
>> <i>4,soda,1.79</i>
>> <i>\.</i>
</pre>

<p>
Leider gibt dieser Befehl nicht die gleichen Status-Informationen zurück wie das
Kommando <c>INSERT INTO</c>. Woher wissen wir, dass die Daten eingefügt wurden?
Im nächsten Abschnitt werden wir uns Abfragen ansehen, mit denen wir unsere
Daten überprüfen können.
</p>

</body>
</section>
<section>
<title>Verwendung von PostgreSQL Abfragen</title>
<body>

<p>
Dieser Abschnitt wird die Benutzung des Kommandos <c>SELECT</c> betrachten, um
Daten in unseren Tabellen anzusehen. Das grundlegende Format von <c>SELECT</c>
sieht folgendermaßen aus:
</p>

<pre caption="SELECT syntax">
SELECT (spalte1,spalte2|*) FROM (tabelle) [WHERE (konditionen)]
</pre>

<p>
Es gibt zwei Arten Spalten auszuwählen. Die erste ist die Verwendung von
<c>*</c> um alle Spalten anzugeben, und die zweite ist die Angabe einer Liste
der Spalten, die Sie sehen wollen. Die zweite Methode ist praktisch, wenn Sie
eine spezifische Spalte aus einer großen Liste finden wollen. Lassen Sie uns mit
der Benutzung von <c>*</c> beginnen, um alle Spalten anzugeben:
</p>

<pre caption="Betrachten der Tabelle &quot;products&quot;">
MyDB=&gt; <i>SELECT * FROM products;</i>
 product_id |  description   | price
------------+----------------+-------
          1 | A test product | 12.00
          2 | meat           |  6.79
          3 | soup           |  0.69
          4 | soda           |  1.79
(4 rows)
</pre>

<p>
Wie Sie sehen, sind alle Daten die wir oben einfügt haben tatsächlich in der
Tabelle. Nun lassen Sie uns annehmen, wir wollten nur die Beschreibung und den
Preis sehen und legten keinen Wert auf die Artikelnummer. In dem Falle würden
wir die spaltenspezifische Variante von <c>SELECT</c> verwenden:
</p>

<pre caption="Betrachten betimmter Spalten aus der Tabelle &quot;products&quot;">
MyDB=&gt; <i>SELECT description,price FROM products;</i>
  description   | price
----------------+-------
 A test product | 12.00
 meat           |  6.79
 soup           |  0.69
 soda           |  1.79
(4 rows)
</pre>

<p>
Nun wird nur das Produkt und der Preis angezeigt, so dass wir uns nur auf die
wichtigen Daten konzentrieren können. Nehmen wir an, wir wollten jetzt nur die
Artikel sehen, die teurer als 2 Dollar sind. Hier ist eine praktische
<c>WHERE</c>-Klausel, dazu:
</p>

<pre caption="Betrachten bestimmter Zeilen aus der Tabelle &quot;products&quot;">
MyDB=&gt; <i>SELECT description,price FROM products WHERE price > 2.00;</i>
  description   | price
----------------+-------
 A test product | 12.00
 meat           |  6.79
(2 rows)
</pre>

<p>
Nun wird eine Liste der Produkte über 2.00 Dollar angezeigt, was die Daten noch
stärker konzentriert. Diese Art der Abfrage von Informationen ist sehr mächtig
und hilft, überaus nützliche Berichte zu erstellen.
</p>

</body>
</section>
<section>
<title>Fazit</title>
<body>

<p>
Dies schließt den PostgreSQL-Leitfaden ab. Ein großes Dankeschön geht an
Masatomo Nakano, den früheren PostgreSQL-Maintainer von Gentoo, für seine Hilfe
durch die Beantwortung meiner Fragen. Verbesserungsvorschläge zu diesem
Leitfaden können an <mail>chriswhite@gentoo.org</mail> gesendet werden. Für
weiterführende Informationen beachten Sie bitte die <uri
link="http://www.postgresql.org">PostgreSQL Website</uri>.
</p>

</body>
</section>
</chapter>
</guide>
