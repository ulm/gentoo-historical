<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/devfs-guide.xml,v 1.11 2005/07/29 17:55:03 grahl Exp $ -->

<!-- English CVS Version: 1.12 -->

<guide link="/doc/de/devfs-guide.xml">
<title>Device File System Anleitung</title>
<author title="Autor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Korrektor">
  <mail link="seemant@gentoo.org">Seemant Kulleen</mail>
</author>
<author title="Übersetzer">
  <mail link="fabian@schnitz-online.de">Fabian Stietzel</mail>
</author>
<author title="Korrektor">
  <mail link="grahl@gentoo.org">Jan Hendrik Grahl</mail>
</author>

<abstract>
In diesem Tutorial wird erklärt, was das devfs ist und wie man mit ihm
arbeitet.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.6</version>
<date>2005-07-21</date>

<chapter>
<title>Was ist das devfs?</title>
<section>
<title>Die (guten?) alten Zeiten</title>
<body>

<warn>
devfs ist <e>veraltet</e> und wurde aus dem stabilen 2.6 Kernelbaum mit dem 
Release 2.6.13 entfernt. Benutzer von 2.6 Kernelen wird hiermit empfohlen auf 
udev zu wechseln. Für weitere Informationen zu udev, lesen Sie bitte den <uri
link="/doc/de/udev-guide.xml">Gentoo udev Leitfaden</uri>..
</warn>

<p>
Traditionelle Linux Distributionen bieten ihren Benutzern einen abstrakten
Pfad zu den Geräten. Das ist <path>/dev</path>. In diesem Verzeichnis findet
der Benutzer sogenannte <e>Device Nodes</e>. Das sind spezielle Dateien, die
das entsprechende Gerät repräsentieren. Zum Beispiel repräsentiert
<path>/dev/hda</path> das erste IDE Gerät im System. Durch das Bereitstellen
von Gerätedateien kann der Benutzer Programme erstellen, die mit der Hardware
wie mit einer regulären Datei interagieren, anstatt spezielle APIs zu benutzen.
</p>

<p>
Die Gerätedateien sind in 2 Gruppen unterteilt. Die erste Gruppe,
<e>Character</e> Devices genannt, besteht aus Hardware, deren Schreib- und
Lesevorgänge nicht gepuffert sind. Die zweite Gruppe nennt sich <e>Block</e>
Devices und enthält natürlich die Hardware, deren Schreib- und Lesevorgänge
gepuffert sind. Beide Gerätearten können zeichenweise oder in Blöcken
ausgelesen werden. Die Namensgebung kann deswegen verwirrend klingen und ist
in der Tat falsch.
</p>

<p>
Wenn Sie einen Blick auf eine Gerätedatei werfen, werden Sie etwas ähnliches
wie das hier finden:
</p>

<pre caption = "Die Informationen über eine Gerätedatei abfragen">
# <i>ls -l /dev/hda</i>
brw-rw----    1 root     disk       3,   0 Jul  5  2000 /dev/hda
</pre>

<p>
In dem vorangehenden Beispiel sehen wir, dass <path>/dev/hda</path> ein Block
Device ist. Wichtiger sind jedoch die Zahlen, die ihm zugewiesen sind:
<b>3, 0</b>. Dieses Paar wird <e>Major-Minor</e> Paar genannt. Es wird
vom Kernel dazu verwendet eine Gerätedatei dem echten Gerät zuzuweisen. Die
erste Zahl verweißt auf ein bestimtes Gerät, die Zweite verweißt auf ein
dem Ersten untergeordnetes Gerät.
Das ist verwirrend? Ist es nicht.
</p>

<p>
Hier zwei Beispiele: <path>/dev/hda4</path> und <path>/dev/tty5</path>. Die
erste Gerätedatei verweißt auf die vierte Partition des ersten IDE Geräts. Ihr
Major-Minor Paar ist <b>3, 4</b>. Mit anderen Worten, die erste Zahl
verweißt auf das Gerät und die zweite auf die entsprechende Partition. Die
zweite Gerätedatei hat <b>4, 5</b> als Major-Minor Paar. In diesem Fall
verweist die erste Zahl auf den Terminal Treiber und die Zweite auf die
Terminal Nummer (hier das fünfte Terminal).
</p>

</body>
</section>
<section>
<title>Probleme</title>
<body>

<p>
Wenn Sie in solch einem <path>/dev</path> Verzeichnis einen schnellen Check
machen werden Sie bemerken, dass nicht nur alle ihre Geräte, sondern
<e>alle</e> möglichen denkbaren Geräte aufgeführt sind. Mit anderen Worten,
Sie haben Gerätedateien für Geräte die Sie nicht haben. Solch eine Gruppe von
Gerätedateien zu pflegen ist, gelinde gesagt, lästig. Stellen Sie sich vor, Sie
müssen die Berechtigungen aller Gerätedateien ändern, welche auf ein Gerät in
ihrem System verweisen, aber den Rest der Gerätedateien lassen wie er ist.
</p>

<p>
Wenn Sie neue Hardware in ihr System integrieren und diese vorher noch keine
Gerätedatei hatte, werden Sie eine erstellen müssen. Erfahrene Benutzer wissen,
dass diese Aufgabe mit <c>./MAKEDEV</c> im <path>/dev</path> Verzeichnis
erledigt werden kann. Aber wissen Sie sofort welche Gerätedatei Sie erstellen
müssen?
</p>

<p>
Wenn Sie Programme laufen haben die Hardware benutzen die Gerätedateien
verwendet, können Sie ihre Root Partition nicht ohne Schreibzugriff mounten.
Selbst wenn es keinen anderen Grund gibt sie mit Schreibzugriff gemountet zu
haben. Sie können <path>/dev</path> nicht auf einer seperaten Partition haben,
weil mount <path>/dev</path> benötigt, um Partitionen zu mounten.
</p>

</body>
</section>
<section>
<title>Lösungen</title>
<body>

<p>
Wie Sie sich sicher vorstellen können, haben die Kernel Hacker mehrere Wege
gefunden die vorher genannten Probleme zu lösen. Jedoch hatten viele von ihnen
andere Lösungen, die in diesem
<uri link="http://www.atnf.csiro.au/people/rgooch/linux/docs/devfs.html#faq-why">Dokument</uri>
beschrieben sind. Wir werden diese Implementierungen nicht beachten, sondern
uns auf die Eine konzentrieren, die es in die offiziellen Kernel Sourcen
geschafft hat: devfs.
</p>

</body>
</section>
<section>
<title>devfs als Sieger in allen Klassen?</title>
<body>

<p>
devfs bewältigt alle angeführten Probleme. Es stellt dem Benutzer nur
vorhandene Geräte zur Verfügung, erstellt neue Gerätedateien wenn neue Geräte
gefunden werden und ermöglicht es, die Root Partition ohne Schreibzugriff zu
mounten. Zusätzlich beseitigt devfs noch mehr Probleme, die vorher nicht
berücksichtigt wurden, weil sie für den Benutzer weniger interessant sind...
</p>

<p>
Zum Beispiel müssen Sie sich mit devfs keine Gedanken über Major-Minor Paare
machen. Major-Minor Paare werden noch unterstützt (der Abwärtskompatibilität
halber), aber sie werden nicht mehr gebraucht. Dies ermöglicht es Linux noch
mehr Geräte zu unterstützen, seitdem es keine Grenzen mehr gibt (Zahlen haben
immer Grenzen :)).
</p>

<p>
devfs kommt mit seinen eigenen Problemen, für den Anwender sind diese Probleme
nicht wirklich sichtbar, aber für Kernel Maintainer sind diese Probleme gross
genug, um devfs als <e>obsolet</e> zu kennzeichnen.<uri
link="http://www.gentoo.org/doc/en/udev-guide.xml">udev</uri> ist der 
Nachfolger, welcher von Gentoo unterstützt wird und seit der Version 2005.0 
der Standard ist auf den meisten Architekturen, wenn ein 2.6 Kernel verwendet 
wird.
</p>

<p>
Für weitere Informationen, warum devfs überholt gekennzeichnet ist lesen Sie
bitte die <uri link="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev-FAQ">udev
FAQ</uri> und das <uri link="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev_vs_devfs">udev
versus devfs</uri> Dokument.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Navigieren in der /dev/ Verzeichnisstruktur</title>
<section>
<title>Verzeichnisse</title>
<body>

<p>
Als erstes werden Sie bemerken, dass devfs Verzeichnisse benutzt um die Geräte
zu gruppieren. Diese Vorgehensweise verbessert die Lesbarkeit, weil sich alle
verwandten Geräte in einem Unterverzeichnis befinden.
</p>

<p>
Zum Beispiel befinden sich alle IDE Geräte im Unterverzeichnis
<path>/dev/ide/</path> und alle SCSI Geräte in <path>/dev/scsi/</path>. SCSI
und IDE Festplatten werden gleich behandelt, d. h. sie haben die selbe
Verzeichnisstruktur im jeweiligen Unterverzeichnis. 
</p>

<p>
IDE und SCSI sind an einem IDE/SCSI Controller (Onboard oder eine extra PCI
Karte) angeschlossen, den man <e>host</e> nennt. Jeder Controller kann mehrere
Kanäle haben, die <e>Bus</e> gennant werden. In jedem Kanal können Sie mehrere
IDs haben. Die ID, welche <e>Target</e> gennant wird, kennzeichnet eine
Festplatte. Manche SCSI Geräte haben mehrere luns (<e>Logical Unit Numbers</e>).
Zum Beispiel Geräte wie Hi-End Streamer, die mehrere Bänder auf einmal
verwalten. Meistens gibt es aber nur eine lun, nämlich <path>lun0/</path>.
</p>

<p>
Wo wir vorher <path>/dev/hda4</path> benutzt haben, haben wir nun
<path>/dev/ide/host0/bus0/target0/lun0/part4</path>. Das ist viel einfacher...
Nein, streiten Sie nicht mit mir... es <e>ist</e> einfacher... ach,
wie auch immer! :)
</p>

<note>
Sie können für Festplatten auch Unix ähnliche Namen für die Gerätedateien
verwenden, wie zum Beispiel <path>c0b0t0u0p2</path>. Sie finden sich in
<path>/dev/ide/hd</path>, <path>/dev/scsi/hd</path>, usw.
</note>

<p>
Um Ihnen eine Vorstellung zu verschaffen, hier die Liste der
Verzeichnisse in /dev/ auf meinem Laptop:
</p>

<pre caption = "Verzeichnisse in /dev">
cdroms/     cpu/        discs/          floppy/
ide/        input/      loop/           misc/
netlink/    printers/   pts/            pty/
scsi/       sg/         shm/            sound/
sr/         usb/        vc/             vcc/
</pre>

</body>
</section>
<section>
<title>Abwärtskompatibilität bei der Verwendung von devfs</title>
<body>

<p>
Mit diesem Schema zu arbeiten klingt gut, aber einige Programme nutzen das 
alte Schema. Um sicherzustellen, das alles im System intakt bleibt, wurde 
<c>devfsd</c> geschrieben. Dieser Daemon erstellt Symlinks mit den alten 
Namen, die auf die neuen Gerätedateien zeigen.
</p>

<pre caption = "Erstellte Symlinks">
$ <i>ls -l /dev/hda4</i>
lr-xr-xr-x    1 root     root           33 Aug 25 12:08 /dev/hda4 -> ide/host0/bus0/target0/lun0/part4
</pre>

<p>
Mit <c>devfsd</c> können Sie auch Berechtigungen setzen, neue Gerätedateien
erstellen, Aktionen definieren, usw. Das alles wird im nächsten Kapitel 
erklärt.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Administrieren von /dev/</title>
<section>
<title>devfsd neustarten</title>
<body>

<p>
Wenn Sie etwas in <path>/etc/devfsd.conf</path> ändern und wollen, dass Ihre 
Änderungen auf das System übertragen werden, müssen Sie nicht neustarten. 
Je nachdem was Sie wollen, können Sie eines der folgenden Signale nutzen:
</p>

<p>
<b>SIGHUP</b> bringt den <c>devfsd</c> dazu, die Konfigurationsdatei neu
zu lesen, die mehrfach genutzten Objektdateien neu zu laden und die
Aktionen zum Registrieren der Gerätedateien auszuführen.
</p>

<p>
<b>SIGUSR1</b> bewirkt das Gleiche, aber es werden keine Registrierungen
vorgenommen.
</p>

<p>
Um solch ein Signal zu senden, benutzen Sie <c>kill</c> oder <c>killall</c>:
</p>

<pre caption = "Das SIGHUP Signal an den devfsd senden">
# <i>kill -s SIGHUP `pid von devfsd`</i>
<comment>oder</comment>
# <i>killall -s SIGHUP devfsd</i>
</pre>

</body>
</section>
<section>
<title>Symlinks für die Abwärtskompatibilität entfernen</title>
<body>

<warn>
Zur Zeit ist Gentoo ohne diese Symlinks nicht funktionsfähig.
</warn>

<p>
Wenn Sie die Symlinks, die <path>/dev/</path> vollstopfen, aus ihrem Gentoo
System entfernen wollen (sie sind standardmäßig aktiviert), editieren Sie
<path>/etc/devfsd.conf</path> und entfernen Sie die folgenden zwei Zeilen:
</p>

<pre caption = "Einträge zur Abwärtskompatibilität in /etc/devfsd.conf">
<comment># Kommentieren Sie die folgenden zwei Zeilen aus um die Symlinks zu entfernen</comment>
REGISTER        .*  MKOLDCOMPAT
UNREGISTER      .*  RMOLDCOMPAT
</pre>

<p>
Um diese Änderungen zu übernehmen, müssen Sie ihr System neustarten.
</p>

</body>
</section>
<section>
<title>Deaktivieren der Autoload Funktionalität</title>
<body>

<p>
Wenn Sie ein Modul laden erstellt devfs automatisch die zugehörigen
Gerätedateien. Wenn Sie das nicht wollen, entfernen sie die folgende Zeile aus
ihrer <path>/etc/devfsd.conf</path>:
</p>

<pre caption = "/etc/devfsd.conf, Autoload Funktionalität">
LOOKUP      .*  MODLOAD
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Berechtigungen</title>
<section>
<title>Setzen/Ändern von Berechtigungen mit devfsd</title>
<body>

<note>
Diese Instruktionen sind gültig so lange wie pam_console nicht 
aktiviert wurde in <path>/etc/pam.d/system-auth</path>. Wenn Sie 
pam_console dort aktivieren ist PAM die letzte Instanz was Berechtigungen 
betrifft.
</note>

<p>
Wenn Sie die Berechtigungen mittels <path>/etc/devfsd.conf</path>
setzen wollen, nutzen Sie bitte die Syntax aus dem folgendem Beispiel:
</p>

<pre caption = "Berechtigungen in /etc/devfsd.conf">
REGISTER    ^cdroms/.*  PERMISSIONS root.cdrom 0660
</pre>

<p>
Im zweiten Feld wird die Gerätegruppe angegeben, beginnend in
<path>/dev</path>. Hier werden reguläre Ausdrücke verwendet, Sie können also
mehrere Gerätedateien auf einmal auswählen.
</p>

<p>
Im vierten Feld wird der Owner (mit Gruppe) angegeben und das fünfte Feld 
enthält die Berechtigungen für die Gerätedatei.
</p>

</body>
</section>
<section>
<title>Berechtigungen von Hand setzen und mit devfsd speichern</title>
<body>

<p>
Hier die normale Vorgehensweise bei Gentoo Installationen: Wenn Sie mit
<c>chown</c> (CHangeOWNer) und <c>chmod</c> (CHange MODe) einige Gerätedateien
verändern, speichert <c>devfsd</c> die Informationen damit diese über das 
Neustarten hinweg erhalten bleiben. Das passiert weil 
<path>/etc/devfsd.conf</path> folgendes enthält:
</p>

<pre caption = "/etc/devfsd.conf zum Speichern von Berechtigungen">
REGISTER        ^pt[sy]/.*   IGNORE
CHANGE          ^pt[sy]/.*   IGNORE
CREATE          ^pt[sy]/.*   IGNORE
DELETE          ^pt[sy]      IGNORE
REGISTER        ^log         IGNORE
CHANGE          ^log         IGNORE
CREATE          ^log         IGNORE
DELETE          ^log         IGNORE
REGISTER        .*           COPY    /lib/dev-state/$devname $devpath
CHANGE          .*           COPY    $devpath /lib/dev-state/$devname
CREATE          .*           COPY    $devpath /lib/dev-state/$devname
DELETE          .*           CFUNCTION GLOBAL unlink
/lib/dev-state/$devname
RESTORE         /lib/dev-state
</pre>

<p>
Genauer erklärt, geänderte Gerätedateien werden sowie die Änderung erfolgt 
nach <path>/lib/dev-state</path> kopiert und beim Hochfahren wieder nach 
<path>/dev</path> zurückkopiert.
</p>

<p>
Eine andere Möglichkeit besteht darin während des Bootvorgangs
<path>/lib/dev-state</path> nach <path>/dev</path> zu mounten. Allerdings
müssen Sie sicherstellen, dass devfs nicht automatisch beim Starten gemountet
wird (Sie müssen dazu ihren Kernel neu kompilieren) und das
<path>/dev/console</path> existiert. Dann platzieren Sie irgendwo am Anfang
ihrer Startscripte folgendes:
</p>

<pre caption = "Mounten von /lib/dev-state nach /dev">
mount --bind /dev /lib/dev-state
mount -t devfs none /dev
devfsd /dev
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Quellen</title>
<section>
<body>

<p>
Für mehr Informationen über devfs, hier noch ein paar Quellen:
</p>

<p>
Die devfsd.conf Manpage erläutert die Syntax von <path>/etc/devfsd.conf</path>.
Um sie anzusehen führen Sie <c>man devfsd.conf</c> aus.
</p>

<p>
Die <uri
link="http://www.atnf.csiro.au/people/rgooch/linux/docs/devfs.html">devfs
FAQ</uri> erklärt alles rund um devfs. Sie enthält auch Informationen über
die interne devfs Struktur und wie Treiber devfs unterstützen können.
</p>

<p>
Im <uri link="http://www.linuxjournal.com">LinuxJournal</uri> ist ein
informativer Artikel über <uri
link="http://www.linuxjournal.com/article.php?sid=6035">devfs zum
Managen und Administrieren</uri>.
</p>

<p>
Daniel Robbins schrieb einige Artikel für IBMs DeveloperWorks über erweiterte
Dateisysteme. Drei behandeln devfs:
</p>

<ul>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs4/">
    Introduction to devfs</uri>
  </li>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs5/">
    Setting up devfs</uri>
  </li>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs6/">
    Implementing devfs</uri>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
