<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/keychain-guide.xml,v 1.1 2005/01/11 19:30:16 dertobi123 Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/keychain-guide.xml">
<title>Gentoo-Linux Keychain-Guide</title>

<author title="Author">
  <mail link="airuike@gmail.com">Eric Brown</mail>
</author>

<author>
  <mail link="gentoo at thomasgier dot de">Thomas Gier</mail>
</author>

<abstract>
Dieses Dokument beschreibt die Verwendung von gemeinsamen SSH-Schlüsseln in
Verbindung mit dem keychain-Programm. Es setzt elementare Kenntnisse über
Public-Key-Kryptografie voraus. 
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.0 -->
<license/>

<version>1.1</version>
<date>02. Dezember 2004</date>

<chapter>
<title>Hintergrund</title>
<section>
<title>Das aktuelle Problem</title>
<body>

<p>
Sie haben also all diese hübschen Gentoo-Maschinen, auf denen sshd läuft, es ist
jedoch etwas unbefriedigend, immer diese Login-Passwörter tippen zu müssen,
nicht wahr? Oder vielleicht haben Sie ein Skript oder einen Cron-Job, die einen
bequemen Weg suchen, eine SSH-Verbindung zu nutzen zu. So oder so, es gibt eine
Lösung für dieses Problem und diese beginnt mit Authentifizierung über
öffentliche Schlüssel.  
</p>

</body>
</section>
<section>
<title>Wie funktioniert Authentifizierung über öffentliche Schlüssel?</title>
<body>

<p>
Angenommen, wir haben einen Client, der sich mit dem sshd auf einem Server
verbinden möchte. Der Client erzeugt zunächst ein Schlüssel-Paar und übergibt
den öffentliche Schlüssel an den Server. Danach sendet der Server jedes Mal,
wenn dieser Client eine Verbindung versucht, eine mit diesem öffentlichen
Schlüssel verschlüsselte Aufgabe. Nur der Besitzer des passenden privaten
Schlüssels ist in der Lage diese zu entschlüsseln, so dass, wie Sie sicher
vermutet haben, die korrekte Antwort zu einer erfolgreichen Authentifizierung
führt. 
</p>

</body>
</section>
</chapter>

<chapter>
<title>Verwendung der Authentifizierung über öffentliche Schlüssel</title>
<section>
<title>Das Schlüssel-Paar erzeugen</title>
<body>

<p>
Der erste Schritt ist das Erzeugen Ihres Schlüssel-Paares. Um dies zu tun,
verwenden wir den Befehl <c>ssh-keygen</c> wie folgt: 
</p>

<pre caption="Erzeugen des Schlüssel-Paares">
$ <i>ssh-keygen -t dsa</i>
<comment>(Übernehmen Sie einfach die Voreinstellungen und stellen Sie sicher,
dass Sie eine stabile Passphrase eingeben)</comment>
</pre>

<warn>
Stellen Sie unbedingt sicher, dass Sie eine stabile Passphrase wählen,
insbesondere, wenn dieser Schlüssel für Root-Anmeldungen verwendet wird!
</warn>

<p>
Es sollte nun ein privater Schlüssel in <path>~/.ssh/id_dsa</path> und ein
öffentlicher Schlüssel in <path>~/.ssh/id_dsa.pub</path> existieren. Nun sind
wir soweit, den öffentlichen Schlüssel auf den entfernten Rechner zu kopieren.
</p>

</body>
</section>
<section>
<title>Den Server vorbereiten</title>
<body>

<p>
Wir werden die Datei <path>~/.sshid_dsa.pub</path> auf den Server übertragen,
auf dem sshd betrieben wird. Wir werden unseren öffentlichen Schlüssel weiterhin
der Datei <path>~/.ssh/authorized_keys</path> hinzufügen, die dem verbindenden
User auf diesem Server gehört. Hier ist ein Beispiel, wie dies gemacht wird,
wenn Sie bereits ssh-Zugang zum Server haben. 
</p>

<pre caption="Öffentlichen Schlüssel auf den Server kopieren">
$ <i>scp ~/.ssh/id_dsa.pub server_user@server:~/myhost.pub</i>
$ <i>ssh server_user@server "cat ~/myhost.pub >> ~/.ssh/authorized_keys"</i>
$ <i>ssh server_user@server "cat ~/.ssh/authorized_keys"</i>
</pre>

<p>
Die Ausgabe der letzten Zeile sollte den Inhalt der Datei
<path>~/.ssh/authorizes_keys</path> anzeigen. Stellen Sie sicher, dass die
Ausgabe korrekt ist.
</p>

</body>
</section>
<section>
<title>Testen der Einrichtung</title>
<body>

<p>
Theoretisch, wenn alles gut gegangen ist und der ssh-Daemon auf dem Server es
erlaubt, sollten wir nun in der Lage sein, einen ssh-Zugang ohne die Eingabe
eines Passworts zu erhalten. Wir müssen zwar immer noch den privaten Schlüssel
auf dem Client entschlüsseln, dies sollte jedoch nicht mit der Passphrase des
User-Kontos auf dem Server verwechselt werden.
</p>

<pre caption="Testen der Schlüssel">
$ <i>ssh server_user@server</i>
</pre>

<p>
Hoffentlich fragt man Sie nach der Passphrase für id_dsa und Sie waren in der
Lage, ssh-Zugang als Server-User auf dem Server zu erhalten. Falls nicht, melden
Sie sich als Server-User an und prüfen Sie den Inhalt der Datei
<path>~/.ssh/authorized_keys</path> um sicherzustellen, dass jeder Eintrag in
einer eigenen Zeile steht. Sie möchten vielleicht auch die Konfiguration des
ssh-Daemons prüfen, um sicherzustellen, das dieser Authentifizierung über
öffentliche Schlüssel bevorzugt, falls vorhanden.  
</p>

<p>
An dieser Stelle mögen Sie vielleicht denken, "Warum das alles? Ich hab doch nur
ein Passwort durch ein anderes ersetzt?!". Entspannen Sie sich, der nächste
Abschnitt wird Ihnen genau zeigen, wie wir das alles dazu nutzen können,
wertvolle Zeit zu sparen.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Authentifizierung per öffentlichen Schlüssel komfortabel machen</title>
<section>
<title>Typisches Schlüssel-Management mit ssh-agent</title>
<body>

<p>
Falls Sie bis hierher gefolgt sind, denken Sie vielleicht, dass es großartig
wäre, irgendwie unsere(n) private(n) Schlüssel nur einmal entschlüsseln zu
müssen und anschließend in der Lage zu sein, ssh ohne irgendwelche Passwörter
frei benutzen könnten. Sie haben Glück, das ist genau das, wozu das Programm
<c>ssh-agent</c> dient. 
</p>

<p>
Das Programm <c>ssh-agent</c> wird üblicherweise zusammen mit Ihrer X-Sitzung
oder durch ein Shell-Startup-Skript wie zum Beispiel
<path>~/.bash_profile</path> gestartet. Es arbeitet, indem es einen 
Unix-Socket erzeugt und die entsprechenden Umgebungs-Variablen registriert, so
dass sich alle nachfolgenden Applikationen seine Dienste durch Verbinden mit
diesem Socket zu Nutze machen können. Das Programm im Eltern-Prozess Ihrer
X-Sitzung zu starten, macht eindeutig nur dann Sinn, wenn Sie den Satz der
entschlüsselten privaten Schlüssel mit allen nachfolgenden Applikationen nutzen
wollen.      
</p>

<pre caption="ssh-agent vorbereiten">
$ <i>ssh-agent</i>
</pre>

<note>
Das Programm ssh-agent bewahrt entschlüsselte Schlüssel nur solange auf, bis
es beendet wird. Falls Sie eine Lebensspanne für die Schlüssel setzen möchten,
verwenden Sie das Argument -t wie in <c>man ssh-agent</c> beschrieben.
</note>

<p>
Wenn Sie ssh-agent starten sollte es Ihnen die PID des laufenden
ssh-agent-Programms mitteilen und einige Umgebungs-Variablen setzen, als da sind
<c>SSH_AUTH_SOCK</c> und <c>SSH_AGENT_PID</c>. Es sollte weiterhin
<path>~/.ssh/id_dsa</path> automatisch zu seiner Sammlung hinzufügen und Sie
nach der entsprechenden Passphrase fragen. Wenn Sie weitere private Schlüssel
haben, die Sie einem laufenden ssh-agent hinzufügen möchten, können Sie den
Befehl <c>ssh-add</c> wie folgt verwenden:
</p>

<pre caption="Weitere Schlüssel zu ssh-agent hinzufügen">
$ <i>ssh-add somekeyfile</i>
</pre>

<p>
Jetzt zur Magie. Da Ihr privater Schlüssel nun entschlüsselt vorliegt, sollten
Sie in der Lage sein, eine ssh-Verbindung zum Server aufzubauen, ohne ein
Passwort eingeben zu müssen. 
</p>

<pre caption="Ssh ohne Passwörter">
$ <i>ssh server</i>
</pre>

<p>
Es wäre doch schön zu wissen, wie man ssh-agent falls nötig beendet, oder?  
</p>

<pre caption="ssh-agent beenden">
$ <i>ssh-agent -k</i>
</pre>

<note>
Falls Sie Probleme hatten, ssh-agent zum Funktionieren zu bringen, könnte eine
Instanz immer noch laufen. Sie können ein Beenden wie bei jedem anderen Prozess
durch <c>killall ssh-agent</c> erzwingen.
</note>

<p>
Falls Sie noch mehr Komfort von ssh-agent möchten, machen Sie mit dem nächsten
Abschnitt über die Verwendung von keychain weiter. Falls Sie weiter machen,
stellen Sie sicher, dass der laufende ssh-agent wie im Beispiel oben beendet
wird. 
</p>

</body>
</section>
<section>
<title>Den letzten Tropfen Komfort aus ssh-agent quetschen</title>
<body>

<p>
Keychain erlaubt es, einen ssh-agent zwischen verschiedenen Logins
wiederzuverwenden und optional jedes Mal, wenn der User sich einloggt, nach den
Passphrasen zu fragen. Bevor wir uns jedoch selbst überflügeln, lassen Sie es uns
erst einmal emergen.
</p>

<pre caption="Keychain installieren">
# <i>emerge keychain</i>
</pre>

<p>
Angenommen, das war erfolgreich, dann können wir nun keychain ungehindert
verwenden. Fügen sie Folgendes zu Ihrer <path>~/.bash_profile</path> hinzu, um
keychain zu aktivieren: 
</p>

<pre caption="keychain in .bash_profile aktivieren">
keychain ~/.ssh/id_dsa
. ~/.keychain/$HOSTNAME-sh
</pre>

<note>
Sie können wie Sie möchten weitere private Schlüssel zu dieser Befehlszeile
hinzufügen. Weiterhin können Sie die Option --clear hinzufügen, wenn Sie bei
jeder Erzeugung einer neuen Shell nach Passphrasen gefragt werden möchten.  
</note>

<note>
Falls Sie nicht bash verwenden, schauen Sie sich die Beispiele für die
Verwendung mit anderen Shells im Abschnitt <b>EXAMPLES</b> von <c>man
keychain</c> an. Die Idee ist, diese Kommandos jedes Mal, wenn Sie eine Shell
verwenden, auszuführen.
</note>

<p>
Lassen Sie es uns testen. Zunächst stellen wir sicher, dass wir den ssh-agent
aus dem vorigen Abschnitt beendet haben, anschließend starten wir eine Shell,
meistens durch schlichtes Einloggen oder Starten eines neuen Terminals. Es
sollte nach dem Passwort für jeden Schlüssel, den Sie angegeben haben, gefragt
werden. Alle Shells, die danach geöffnet werden, sollten den ssh-agent
wiederverwenden, wodurch Sie immer wieder ssh-Verbindungen ohne Passwort
aufbauen können. 
</p>

</body>
</section>
</chapter>

<chapter>
<title>Abschließende Bemerkungen</title>
<section>
<title>Sicherheitserwägungen</title>
<body>

<p>
Sicherlich fügt die Verwendung von ssh-agent Ihrem System etwas Unsicherheit
zu. Würde ein anderer User Ihre Shell verwenden während Sie auf der Toilette
sind, könnte er sich auf allen Ihren Servern ohne Passwort anmelden. Demzufolge
ist es ein Risiko für die Server, mit denen Sie sich verbinden und Sie sollten
sicherlich in den geltenden Sicherheitsbestimmungen nachschlagen. Wenn Sie
ssh-agent verwenden, treffen Sie angemessenen Maßnahmen, um die Sicherheit Ihrer
Sitzungen zu gewährleisten. 
</p>

</body>
</section>
<section>
<title>Fehlerbehebung</title>
<body>

<p>
Das Meiste hier sollte ziemlich gut laufen, aber wenn Sie auf Probleme stoßen,
möchten Sie sicher einige nützliche Dinge wissen. 
</p>

<ul>
  <li>
	  Falls es nicht möglich ist, sich ohne ssh-agent zu verbinden, ziehen Sie die
	  Verwendung von ssh mit den Argumenten -vvv in Erwägung, um herauszufinden
	  was passiert. Manchmal ist der Server nicht entsprechen konfiguriert, um
	  Authentifizierung über öffentliche Schlüssel zu verwenden, manchmal sind
	  Server so konfiguriert, dass Sie immer nach einem lokalen Passwort
	  fragen. In diesem Fall sollten Sie auch die Option -o mit ssh verwenden oder
	  die sshd_config des Servers ändern.
	</li>
  <li>
	  Falls Sie Probleme mit ssh-agent oder keychain haben, verwenden Sie
	  möglicherweise eine Shell, die die von ihnen verwendeten Befehle nicht
	  versteht. Schlagen Sie in den Man-Pages von ssh-agent und keychain die
	  Details über die Verwendung anderer Shells nach.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
