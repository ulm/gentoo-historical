<?xml version='1.0' encoding="utf-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/java.xml,v 1.21 2010/01/15 12:33:53 keytoaster Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- English CVS Version: 1.47 -->

<guide link="/doc/de/java.xml" lang="de">

<title>Gentoo Java Anleitung</title>

<author title="Autor">
  <mail link="nichoj@gentoo.org">Joshua Nichols</mail>
</author>
<author title="Autor">
  <mail link="karltk@gentoo.org">Karl Trygve Kalleberg</mail>
</author>
<author title="Bearbeiter">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="Übersetzer">
  <mail link="kontakt@hendrik-brandt.de">Hendrik Brandt</mail>
</author>
<author title="Korrektor">
  <mail link="pylon@gentoo.org">Lars Weiler</mail>
</author>
<author title="Übersetzer">
  <mail link="grahl@gentoo.org">Jan Hendrik Grahl</mail>
</author>
<author title="Übersetzer">
  <mail link="gentoo-doc-de@plicht.de">Ekki Plicht</mail>
</author>
<author title="Übersetzer">
  <mail link="keytoaster@gentoo.org">Tobias Heinlein</mail>
</author>

<abstract>
Dieser Leitfaden wird Ihnen Java vorstellen und erklären wie man Java mit Gentoo
Linux zusammen verwendet.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.22</version>
<date>2009-12-23</date>

<chapter>
<title>Was ist Java?</title>
<section>
<title>Überblick</title>
<body>

<p>
Java ist eine Programmiersprache, die von den Ingenieuren von Sun Microsystems
entwickelt wurde. Die Sprache ist objektorientert und dafür entwickelt worden
auf mehreren Plattformen ausführbar zu sein, ohne dass Code erneut kompiliert
werden muss. Auch wenn Java als ein natives Programm kompiliert werden kann,
verdankt es einen großen Teil seiner Beliebheit, neben anderen Funktionen wie
Garbage-Collection, der Portabilität. Um die Plattformunabhängigkeit zu
erreichen übersetzt der Java-Compiler den Java-Quelltext in ein Zwischenprodukt,
den "Java-Bytecode". Dieser Bytecode wird dann von der JRE (Java Runtime
Environment) ausgeführt, also nicht vom Betriebssystem direkt.
</p>

<p>
Um Java-Bytecode ausführen zu können, muss man eine JRE (Java Runtime
Environment) installiert haben. Eine JRE liefert unter anderem die
Kernbibliotheken, eine plattformabhängige virtuelle Maschine und Plugins für
Browser. Ein JDK (Java Development Kit) fügt Programmiertools, wie z.B. einen
Bytecode Compiler und einen Debugger hinzu.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Bevor Sie anfangen</title>
<section>
<title>Bestehende Installation</title>
<body>

<p>
Für bestehende Installationen, egal was Sie an Java vorher installiert hatten,
folgen Sie bitte dem <uri link="/proj/de/java/java-upgrade.xml">Java Upgrade
Guide</uri>.
</p>

</body>
</section>
<section>
<title>Neue Installation</title>
<body>

<p>
Neue Installationen sollten keine weiteren Vorbereitungen benötigen.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Installation einer Virtual Machine</title>
<section>
<title>Die Auswahlmöglichkeiten</title>
<body>

<p>
Gentoo stellt eine Vielzahl von Laufzeitumgebungen (JREs) und
Entwicklungsbaukästen (JDKs) bereit. Unter den momentanen Alternativen gibt es:
</p>
<table>
<tr>
  <th>Anbieter</th>
  <th>JDK</th>
  <th>JRE</th>
</tr>
<tr>
  <ti>Suns Java-Kit</ti>
  <ti>dev-java/sun-jdk</ti>
  <ti>dev-java/sun-jre-bin</ti>
</tr>
<tr>
  <ti>Das IBM Java-Kit</ti>
  <ti>dev-java/ibm-jdk-bin</ti>
  <ti>dev-java/ibm-jre-bin</ti>
</tr>
<tr>
  <ti>BEA WebLogics J2SE Development-Kit</ti>
  <ti>dev-java/jrockit-jdk-bin</ti>
</tr>
</table>

<!--
TODO: list free implementations?
note about not drop-in replacements
kaffe/sablevm/gcj/jamvm
-->
</body>
</section>
<section>
<title>Installation einer/s JRE/JDK</title>
<body>

<p>
Um das in Ihrem Profil definierte Standard-JDK zu installieren, reicht ein
<c>emerge virtual/jdk</c>. Oder für die Standard-JRE des Profils:
<c>emerge virtual/jre</c>.
</p>

<p>
Kürzlich hat Sun sein JDK und JRE unter eine andere Lizenz gestellt, die
freundlicher für Linux-Distributionen ist. Dadurch kann Suns Java ab Version
1.5 ohne weiteres Getue installiert werden.
</p>

<note>
Ein JDK enthält ebenfalls eine JRE. Wenn Sie also ein JDK installieren, brauchen
Sie keine JRE mehr zu installieren.
</note>

</body>
</section>
<section>
<title>Installation von nicht frei ladbaren VMs</title>
<body>

<p>
Einige JDKs und JREs verlangen zusätzliche Anstrengungen bevor man sie
installieren kann. Nutzen Sie einfach emerge um diese Pakete wie gewohnt zu
installieren. Die Ebuilds werden Ihnen dann mitteilen, wo und was Sie
herunterladen müssen.
</p>

<p>
Sie müssen die notwendigen Dateien in das Verzeichnis
<path>/usr/portage/distfiles</path> herunterladen. Sobald dies erledigt ist,
müssen Sie erneut den emerge-Befehl ausführen, damit das JRE/JDK installiert
wird.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguration der Virtual Machine</title>
<section>
<title>Überblick</title>
<body>

<p>
Gentoo Linux bietet die Möglichkeit verschiedene JDKs und JREs parallel
zu installieren, ohne dass sie Konflikte verursachen.
</p>

<p>
Mit Hilfe von <c>java-config</c> können sie als root die systemweiten
Java-Vorgaben festlegen. Außerdem hat jeder Nutzer die Möglichkeit durch
<c>java-config</c> seine eigenen Vorgaben einzustellen.
</p>

<note>
Um die Einstellungen der System- und User-VM zu verändern, kann man auch
<e>eselect</e> verwenden. Lesen Sie dazu <c>eselect java-vm help</c>.
</note>

</body>
</section>
<section>
<title>Eine Standard Virtual Machine festlegen</title>
<body>

<p>
Durch den Befehl <c>java-config --list-available-vms</c> wird eine Liste
aller auf Ihrem System verfügbaren JREs und JDKs ausgegeben. Hier ist ein
Beispiel einer solchen Ausgabe:
</p>

<pre caption="Auflisten vorhandener VMs">
# <i>java-config --list-available-vms</i>
The following VMs are available for generation-2:
1)      IcedTea6-bin 1.4.1 [icedtea6-bin]
2)      Sun JDK 1.5.0.20 [sun-jdk-1.5] <comment>(Nur bauen)</comment>
*)      Sun JDK 1.6.0.16 [sun-jdk-1.6]
</pre>

<note>
VMs, die als Nur bauen gekennzeichnet sind, können Sicherheitsverwundbarkeiten
enthalten und/oder das Ende ihres Lebenszyklus erreicht haben. Gentoo empfiehlt,
diese VMs nicht als System- oder Benutzer-VM zu setzen. Bitte lesen Sie
<uri link="java.xml#build-only">Nur bauen-VM</uri> für weitere Informationen.
</note>

<p>
Das <e>*</e> zeigt die momentan aktive VM an (System-VM oder User-VM, wenn
gesetzt). Der Text in eckigen Klammern <e>[]</e> ist der Name oder die ID für
die jeweilige VM. Sie müssen diese Angaben (Name oder Nummer)
mit <c>java-config --set-system-vm</c> wie folgt verwenden, um zum Beispiel die
VM des Systems zu setzen:
</p>

<pre caption="Setzen der System-VM">
<comment>(Über den Namen (die bessere Methode))</comment>
# <i>java-config --set-system-vm sun-jdk-1.6</i>
Now using sun-jdk-1.6 as your generation-2 system JVM
<comment>(Über die Nummer)</comment>
# <i>java-config --set-system-vm 3</i>
Now using sun-jdk-1.6 as your generation-2 system JVM
</pre>

<p>
Als einfacher Benutzer können Sie <c>java-config --set-user-vm</c> ausführen.
</p>

<note>
Es ist nicht länger nötig das Profil zu <c>source</c>n, um Updates an der User-
oder System-VM zu aktivieren.
</note>

</body>
</section>
<section id="build-only">
<title>Nur bauen-VM</title>
<body>

<p>
Einige virtuelle Maschinen sind als Nur bauen gekennzeichnet, da sie
Sicherheitsverwundbarkeiten enthalten und/oder das Ende ihres Lebenszyklus
erreicht haben. Diese virtuellen Maschinen werden von Gentoo nicht automatisch
zum Ausführen von Anwendungen via Gentoo-Launchers verwendet, aber sind
weiterhin für Gentoos Bauumgebung verfügbar, da einige Pakete sie zum Bauen
benötigen. Wir raten dringend davon ab, diese VMs als virtuelle Maschinen für
Ihr System oder für Ihren Benutzer zu setzen, da sie ansonsten auch für das
Ausführen der Dateien <path>/usr/bin/{java,javac,...}</path> verwendet würden
und daher auch von Paketen genutzt würden, die nicht Gentoos Launcher-Skripte
verwenden.
</p>

</body>
</section>
<section id="preferred-vm">
<title>Bevorzugte VM</title>
<body>

<p>
Während der Installation von Java-Paketen kann und wird die VM je nach
Notwendigkeit umgeschaltet.
</p>

<p>
Aufgrund der Vielzahl der zur Verfügung stehenden VMs haben wir nicht die
Ressourcen jedes Paket mit jeder VM zu testen und zu verifizieren. Um dennoch
sicherzustellen, dass jedes Paket sauber installiert werden kann, haben wir eine
Liste von <e>standardmäßigen/unterstützten VMs</e> je Architektur definiert. Sie
finden diese Liste in
<path>/usr/share/java-config-2/config/jdk-defaults.conf</path>. Wenn Sie also
ein Java-Paket installieren und dieses feststellt, dass eine der VMs aus dieser
Datei installiert ist, dann wird automatisch diese VM anstatt der System-VM
verwendet.
</p>

<p>
Das Umschalten der VM zum Installationszeitpunkt wird auch dann benötigt, wenn
Ihre System-VM zum Beispiel auf eine 1.4 VM eingestellt ist, die Installation
aber eine 1.5 VM benötigt. Während des Mergens wird dann die bevorzugte 1.5 VM
verwendet, die Einstellung der System-VM bleibt intakt.
</p>


<p>
Gentoo wäre nicht Gentoo wenn man diese Vorgabeeinstellungen nicht ändern
könnte. Über die Datei <path>/etc/java-config-2/build/jdk.conf</path> haben Sie
die volle Kontrolle darüber, welche VM verwendet wird. Einige Beispiele:
</p>

<pre caption="Beispiel /etc/java-config-2/build/jdk.conf">
<comment>(Es soll immer ein sun-jdk verwendet werden, also sun-jdk-1.4 für 1.4,
sun-jdk-1.5 für 1.5 usw.)</comment>
*=sun-jdk
</pre>

<pre caption="Beispiel /etc/java-config-2/build/jdk.conf">
<comment>(Verwende wann immer möglich sun-jdk-1.5, außer wenn eine 1.4 oder 1.3
VM explizit verlangt wird)</comment>
*=sun-jdk-1.5
</pre>

<pre caption="Beispiel /etc/java-config-2/build/jdk.conf">
<comment># Für 1.3 bevorzuge ich sun-jdk 1.4, aber wenn diese nicht vorhanden ist, benutze ibm-jdk-bin,
# Für 1.5 verwende sun-jdk</comment>
1.3=sun-jdk-1.4 ibm-jdk-bin
1.5=sun-jdk
</pre>

<warn>
Sie <e>müssen</e> diese Datei nicht editieren. Falls Sie diese Optionen
verändern, um eine nicht unterstützte VM zu verwenden, kann einiges schief
gehen. Fehler, die mit einer nicht unterstützten VM berichtet werden, werden
nicht so hoch prioritisiert wie Fehler innerhalb einer der unterstützten VMs.
</warn>

</body>
</section>
</chapter>

<chapter>
<title>Compiler</title>
<section>
<body>

<p>
Der Standard Java-Compiler zum Erstellen der Anwendungen ist javac, welcher in
jedem JDK enthalten ist. Zusätzlich zu der Konfigurationsmöglichkeit, welche VM
verwendet werden soll, kann man auch den Compiler festlegen. Im Wesentlichen
legt man einfach eine Liste der bevorzugten Einstellungen in der Datei
<path>/etc/java-config-2/build/compilers.conf</path> an.
</p>

<pre caption="/etc/java-config-2/build/compilers.conf">
# Falls das ebuild es unterstützt
# wird die Variable COMPILERS von vorne nach hinten durchgegangen
# und der erste Compiler, der installiert ist, verwendet

COMPILERS="ecj-X.Y jikes javac"
</pre>

<p>
Nicht alle Compiler unterstützen alle möglichen -target und -source Argumente.
Daher wird jeder Compiler in der Liste überprüft, ob er das gewünschte
-source/-target unterstützt. Javac wird in jedem Fall funktionieren, daher wird
dieser verwendet, falls kein anderer passender Compiler gefunden wird.
</p>

<p>
Nachfolgend einige weitere Informationen zu den Compilern:
</p>

<table>
<tr>
  <th>Name</th>
  <th>Kennung</th>
  <th>Paket</th>
  <th>Beschreibung</th>
</tr>
<tr>
  <ti>javac</ti>
  <ti>javac</ti>
  <ti>N/A</ti>
  <ti>
    Dies ist der Standardcompiler, der verwendet wird; ist in jedem JDK
    enthalten.
  </ti>
</tr>
<tr>
  <ti>jikes</ti>
  <ti>jikes</ti>
  <ti>dev-java/jikes</ti>
  <ti>
    Jikes wurde ursprünglich von IBM entwickelt. Gerüchten zufolge ist er
    schneller als javac. Man muss allerdings beachten, dass Jikes etwas
    pedantischer ist und unter einigen wenigen Umständen versagt, bei denen
    Javac keine Probleme hat. Außerdem wird die Java 1.5 Syntax bisher nicht
    unterstützt.
  </ti>
</tr>
<tr>
  <ti>Eclipse Compiler für Java</ti>
  <ti>ecj</ti>
  <ti>dev-java/eclipse-ecj</ti>
  <ti>
    ECJ ist der Compiler, der von der Eclipse Entwicklungsumgebung verwendet
    wird. Der Compiler bietet sehr viele Funktionen und ist ziemlich schnell.
    Er unterstützt die Java 1.5 Syntax.
  </ti>
</tr>
</table>

</body>
</section>
</chapter>

<chapter>
<title>Einen Vorgabe-CLASSPATH einrichten</title>
<section>
<body>

<warn>
Die Optionen, die in diesem Abschnitt erläutert werden, sollten als veraltet
betrachtet werden und werden voraussichtlich in Zukunft entfallen. Wir raten
dringend davon ab, diese Optionen zu verwenden, da Ihre Java-Projekte bzw.
-Anwendungen am besten ihren eigenen CLASSPATH verwalten sollten. Falls Sie
einen Vorgabe-CLASSPATH einrichten, können sich einige Anwendungen
unvorhersehbar verhalten, weil im CLASSPATH unerwartete Klassen vorgefunden
würden.
</warn>

<p>
Einen systemweiten als auch einen Benutzer-spezifischen CLASSPATH kann man auch
mit <c>java-config</c> setzen.
</p>

<p>
Zunächst sollten Sie sich alle vorhandenen Java-Bibliotheken, die auf Ihrem
System installiert sind und die man in den CLASSPATH aufnehmen könnte, anzeigen
lassen. Hier ist ein Beispiel der Ausgabe:
</p>

<pre caption="Auflistung der Klassen">
# <i>java-config --list-available-packages</i>
[xerces-2] The next generation of high performance, fully compliant XML parsers in the Apache Xerces family (/usr/share/xerces-2/package.env)
[junit] Simple framework to write repeatable tests (/usr/share/junit/package.env)
[bsh] BeanShell: A small embeddable Java source interpreter (/usr/share/bsh/package.env)
[bcel] The Byte Code Engineering Library: analyze, create, manipulate Java class files (/usr/share/bcel/package.env)
[log4j] A low-overhead robust logging package for Java (/usr/share/log4j/package.env)
...
</pre>

<p>
Auch hier sind die Namen in eckigen Klammer (<e>[]</e>) die IDs, die man dem
Befehl <c>java-config --set-system-classpath</c> übergeben muss. Hier ist ein
Beispiel:
</p>

<pre caption="Setzen des CLASSPATHs">
# <i>java-config --set-system-classpath log4j,xerces-2</i>
</pre>

<note>
Das aktuelle Verzeichnis (<path>.</path>) wird nicht Bestandteil des
System-Classpath; dies sollte in Ihrem System-Loginprofil hinzugefügt werden.
</note>

<p>
Sie müssen Ihre Umgebung aktualisieren, indem Sie sich aus- und wieder
einloggen oder indem Sie <path>/etc/profile</path> sourcen.
</p>

<p>
Für Anwender richtet der Befehl <c>java-config --set-user-classpath</c> die
Datei <path>~/.gentoo/java-env-classpath</path> ein, die dann vom Shellprofil
geladen werden sollte.
</p>

<pre caption="Laden des benutzerspezifischen Classpath">
<i>if [[ -f "${HOME}/.gentoo/java-env-classpath" ]]; then
    source ${HOME}/.gentoo/java-env-classpath
fi</i>
</pre>

<p>
Falls Sie wirklich einen systemweiten Classpath oder eine Vorgabe für alle
Anwender einrichten wollen, dann können Sie so etwas wie das folgende Beispiel
zum Shellprofil hinzufügen. Aber wie gesagt, wir raten davon ab.
</p>

<pre caption="Setzen des classpath">
# <i>export CLASSPATH="${CLASSPATH}:$(java-config --classpath log4j,xerces-2)"</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Java Browser Plugins</title>
<section>
<title>Ein Plugin installieren</title>
<body>

<p>
Sie können ein Java-Plugin für Ihren Browser installieren, indem Sie eine
Java-VM emergen, wobei das <c>nsplugin</c> Use-Flag gesetzt ist.
</p>

<note>
<c>nsplugin</c> steht nicht für alle Architekturen zur Verfügung. Überprüfen Sie
verfügbare Plugins für Ihre Architektur indem Sie den Befehl <c>emerge -pv
&lt;java-vm&gt;</c> ausführen.
</note>

<p>
Portage erlaubt es mehrere Versionen von Java-Plugins zu installieren,
allerdings wird nur eines davon von Ihrem Browser verwendet. Sie können die
Liste aller zur Verfügung stehenden Plugins mit dem folgenden Befehl
überprüfen:
</p>

<pre caption="Anzeigen der verfügbaren Plugins">
# <i>eselect java-nsplugin list</i>
  [1]   sun-jre-bin-1.6
  [2]   icedtea6-bin
</pre>

<p>
Im folgenden Beispiel wird <c>sun-jre-bin</c> als Browser-Plugin ausgewählt.
</p>

<pre caption="Auswahl eines Plugins">
# <i>eselect java-nsplugin set sun-jre-bin-1.6</i>
</pre>

<p>
Überprüfen Sie, dass das richtige Plugin ausgewählt wurde.
</p>

<pre caption="Überprüfen des richtigen Plug-Ins">
# <i>eselect java-nsplugin list</i>
  [1]   sun-jre-bin-1.6  current
  [2]   icedtea6-bin
</pre>

<p>
Auf java.com wird ein Link angeboten, <uri
link="http://java.com/en/download/installed.jsp"> um das installierte
Plugin herauszufinden</uri>. Darüberhinaus können Sie mit einem
Mozilla-basierenden Browser über die Eingabe von <c>about:plugins</c> in der
Adresszeile die installierten Plugins überprüfen.
</p>

</body>
</section>
<section>
<title>Plugins auf Multilib-Systemen</title>
<body>

<p>
Falls Sie eine gemischte 64-Bit und 32-Bit Multilib-Umgebung verwenden (zum
Beispiel auf einem AMD64) können Sie sowohl 64-Bit als auch 32-Bit Java-Plugins
verwenden. Sofern Sie nicht unbedingt 32-Bit Java-Anwendungen starten müssen,
empfehlen wir Ihnen, 64-Bit Plugins in 64-Bit Webbrowsern zu verwenden.
</p>

<p>
Es sind einige native 64-Bit Browser-Plugins verfügbar. Das standardmäßige
JDK/JRE-Paar, <c>sun-jdk</c> und <c>sun-jre-bin</c>, beinhaltet Browser-Plugins.
Installieren Sie einfach eines dieser mit aktiviertem <c>nsplugin</c> USE-Flag.
</p>

<pre caption="Installation eines 64-Bit Plugins">
# <i>echo "dev-java/sun-jre-bin nsplugin" >> /etc/portage/package.use</i>
# <i>emerge sun-jre-bin</i>
</pre>

<p>
Um ein 32-Bit Plugin in einem 32-bit Browser zu verwenden, müssen Sie
<c>emul-linux-x86-java</c> mit aktiviertem <c>nsplugin</c> USE-Flag emergen.
</p>

<pre caption="Installation eines 32-Bit Plugins">
# <i>echo "app-emulation/emul-linux-x86-java nsplugin" >> /etc/portage/package.use</i>
# <i>emerge emul-linux-x86-java</i>
</pre>

<p>
Überprüfen Sie als nächstes welche Plugins zur Verfügung stehen:
</p>

<pre caption="Anzeige der verfügbaren Plugins">
# <i>eselect java-nsplugin list</i>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6
Available 64-bit Java browser plugins
  [1]   icedtea6-bin
  [2]   sun-jre-bin-1.6
</pre>

<p>
Wählen Sie nun das richtige Plugin für Ihre Browser:
</p>

<pre caption="Auswahl der Plugins">
<comment>(Wählen Sie die Plugins für 32-Bit und 64-Bit Browser)</comment>
# <i>eselect java-nsplugin set 32bit emul-linux-x86-java-1.6</i>
# <i>eselect java-nsplugin set 64bit sun-jre-bin-1.6</i>
</pre>

<p>
Überprüfen Sie, ob das richtige Plugin ausgewählt wurde:
</p>

<pre caption="Überprüfen des richtigen Plugins">
# <i>eselect java-nsplugin list</i>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6  current
Available 64-bit Java browser plugins
  [1]   icedtea6-bin
  [2]   sun-jre-bin-1.6  current
</pre>

</body>
</section>
</chapter>

<chapter>
<title>USE-Flags in Verwendung mit Java</title>
<section>
<title>USE-Flags setzen</title>
<body>

<p>
Für weitere Informationen zu USE-Flags, lesen Sie bitte das <uri
link="/doc/de/handbook/handbook-x86.xml?part=2&amp;chap=2">USE-Flags</uri>
Kapitel des Gentoo Handbuchs.
</p>

</body>
</section>
<section>
<title>Die Flags</title>
<body>

<ul>
  <li>
    Das Flag <b>java</b>  fügt Java-Unterstützung zu einer Vielzahl von
    Programmen hinzu.
  </li>
  <li>
    Das Flag <b>nsplugin</b> aktiviert die Unterstützung für Mozilla-basierende
    Browser (inklusive Firefox). Sie benötigen dieses Flag, um Java-Applets in
    Ihrem Mozilla-basierenden Browser auszuführen.
  </li>
  <li>
    Das Flag <b>source</b> bewirkt, dass eine Zip-Datei des Quellcodes eines
    Paketes installiert wird. Dies wird üblicherweise von IDEs verwendet, um den
    Quellcode an eine verwendete Bibliothek anzuhängen.
  </li>
  <li>
    Das Flag <b>jce</b> fügt Unterstützung für die Java Cryptography Engine
    hinzu.
  </li>
  <li>
    Das Flag <b>doc</b> bewirkt, dass für Javapakete mit Hilfe von javadoc eine
    API-Dokumentation installiert wird.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Weiterführende Quellen</title>
<section>
<title>Offline-Quellen</title>
<body>

<ul>
  <li>java-config man page</li>
  <li><c>java-config --help</c></li>
</ul>

</body>
</section>
<section>
<title>Online-Quellen</title>
<body>

<ul>
  <li>
    Die <uri link="http://www.gentoo.org/proj/en/java/">Gentoo Java
    Projektseite</uri>
  </li>
  <li>
    Die <uri
    link="http://news.gmane.org/gmane.linux.gentoo.java">gentoo-java</uri>, <uri
    link="http://news.gmane.org/gmane.linux.gentoo.user">gentoo-user</uri> und
    <uri
    link="http://news.gmane.org/gmane.linux.gentoo.devel">gentoo-dev</uri>
    Mailinglisten-Archive
  </li>
  <li>
    <uri link="irc://irc.gentoo.org/gentoo">#gentoo</uri> und <uri
    link="irc://irc.gentoo.org/gentoo-java">#gentoo-java</uri> im IRC
  </li>
  <li>
    <uri
    link="http://en.wikipedia.org/wiki/Java_programming_language">Wikipedias
    Eintrag zu Java</uri>
  </li>
  <li>
    Falls Sie Vorschläge oder Fragen bezüglich dieses Dokumentes haben,
    schreiben Sie bitte eine Email an das Gentoo Java Team:
    <mail>java@gentoo.org</mail>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
