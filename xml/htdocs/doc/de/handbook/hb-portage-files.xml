<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.0 -->

<!-- English CVS Version: 1.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/hb-portage-files.xml,v 1.3 2004/11/14 09:19:23 dertobi123 Exp $ -->

<sections>

<version>1.4</version>
<date>23. Oktober 2004</date>

<section>
<title>Portage Dateien</title>
<subsection>
<title>Konfigurationsrichtlinien</title>
<body>

<p>
Portage kommt mit einer Standardkonfiguration gespeichert in
<path>/etc/make.globals</path> daher. Wenn Sie einen Blick auf die Datei werfen,
werden Sie feststellen, dass sämtliche Portage Konfiguration durch Variablen
durchgeführt wird. Welche Variablen Portage kennt und was diese bedeuten
beschreiben wir später.
</p>

<p>
Da viele Konfigurationsanweisungen sich zwischen verschiedenen Architekturen
unterscheiden gibt es eine Konfigurationsdatei mit weiteren Standardvariablen in
Ihrem Profil: <path>/etc/make.profile/make.defaults</path>. Wir erklären später mehr
über Profiles und das <path>/etc/make.profile</path> Verzeichnis.
</p>

<p>
Wenn Sie planen Änderungen an Konfigurationsvariablen vorzunehmen verändern Sie
<e>nicht</e> <path>/etc/make.globals</path> oder <path>/etc/make.profile/make.defaults</path>.
Anstelle dessen benutzen Sie <path>/etc/make.conf</path>, welche eine
Vorrangstellung gegenüber den vorher genannten Dateien hat. Sie finden ebenfalls
eine <path>/etc/make.conf.example</path>. Wie der Name impliziert ist dies eine
Beispieldatei, Portage greift nicht auf diese Datei zu.
</p>

<p>
Sie können eine Portage Konfigurationsvariable auch als Umgebungsvariable
deklarieren, wir empfehlen dies jedoch nicht.
</p>

</body>
</subsection>
<subsection>
<title>Profile spezifische Informationen</title>
<body>

<p>
Wir sind bereits einem <path>/etc/make.profile</path> Verzeichnis über den Weg
gelaufen. Gut, dies ist nicht wirklich ein Verzeichnis, aber ein symbolischer
Link zu einem Profile, standardmäßig eines innerhalb von von
<path>/usr/portage/profiles</path>. Sie können Profile selbst erstellen und
diese auch ablegen wo Sie mögen, Sie müssen lediglich den Symlink anpassen.
</p>

<p>
Ein Profile beinhaltet Architektur-spezifische Informationen für Portage, wie
eine Liste aller Pakete die zum System gehören, eine Liste von Paketen die in
diesem Profil nicht funktionieren (oder maskiert sind).
</p>

</body>
</subsection>
<subsection>
<title>Benutzerspezifische Konfiguration</title>
<body>

<p>
Wenn Sie das Verhalten von Portage bezüglich der Installation von Software
beeinflussen wollen, führt kein Weg am Editieren von Dateien in
<path>/etc/portage</path> vorbei. Es wird Ihnen <e>wärmstens</e> empfohlen die
Dateien in <path>/etc/portage</path> zu benutzen und es ist <e>wärmstens</e>
empfohlen das Verhalten von Portage nicht durch Umgebungsvariablen zu
beeinflussen!
</p>

<p>
Innerhalb von <path>/etc/portage</path> können Sie die folgenden Dateien
erstellen:
</p>

<ul>
  <li>
    <path>package.mask</path> listet alle Pakete auf, die Sie niemals
    installieren wollen
  </li>
  <li>
    <path>package.unmask</path> listet alle Pakete, die Sie installieren wollen,
    obwohl Gentoo Entwickler aus guten Gründen davon abraten
  </li>
  <li>
    <path>package.keywords</path> listet alle Pakete, die Sie installieren
    möchten, obwohl dieses Paket (noch) nicht für Ihre Architektur freigegeben
    wurde
  </li>
  <li>
    <path>package.use</path> listet alle USE Flags, die Sie für ein bestimmtes
    Paket und nur für dieses eine Paket verwenden möchten
  </li>
</ul>

<p>
Weitere Informationen über das <path>/etc/portage</path> Verzeichnis und eine
vollständige Liste von möglichen Dateien, die Sie erstellen können finden Sie in
der Portage Manpage:
</p>

<pre caption="Lesen der Portage Manpage">
$ <i>man portage</i>
</pre>

</body>
</subsection>
<subsection>
<title>Ändern von Portage Datei- &amp; Verzeichnisorten</title>
<body>

<p>
Die zuvor erwähnten Konfigurationsdateien können nicht irgendwo anders abgelegt
werden, Portage wird nach diesen Dateien immer an diesen genauen Stellen suchen.
Portage benutzt jedoch zahlreiche weitere Orte für zahlreiche verschiedene
Zwecke: Build-Verzeichnis, Source Code Ablage, Portage Tree, ...
</p>

<p>
Alle diese Zwecke haben bekannte Standardorte, diese können jedoch nach Ihrem
persönlichen Geschmack in <path>/etc/make.conf</path> verändert werden. Der Rest
dieses Kapitels erklärt Ihnen welche speziellen Orte Portage benutzt und wie Sie
den Ort abändern können.
</p>

<p>
Dieses Dokument ist dennoch nicht als Referenz gedacht. Wenn Sie eine Datei
suchen, die alles umfasst konsultieren Sie die <path>make.conf</path> Manpages:
</p>

<pre caption="Lesen der portage und make.conf Manpages">
$ <i>man portage</i>
$ <i>man make.conf</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Ablegen von Dateien</title>
<subsection>
<title>Der Portage Tree</title>
<body>

<p>
Der Portage Tree befindet sich standardmäßig in <path>/usr/portage</path>. Dies
wird durch die PORTDIR Variable definiert. Wenn Sie den Portage Tree irgendwo
anders (durch Anpassen der PORTDIR Variable) ablegen, vergessen Sie nicht den
<path>/etc/make.profile</path> Symlink anzupassen.
</p>

<p>
Wenn Sie die PORTDIR Variable anpassen, möchten Sie vermutlich auch die folgenden
Variablen (PKGDIR, DISTDIR, RPMDIR) anpassen, da diese den PORTDIR Wechsel
nicht beachten.
</p>

</body>
</subsection>
<subsection>
<title>Vorkompilierte Pakete</title>
<body>

<p>
Auch wenn Portage vorkompilierte Binärpakete nicht per default nutzt gibt es
eine hervorragende Unterstützung für diese. Wenn Sie Portage anweisen
Binärpakete zu erstellen werden diese in <path>/usr/portage/packages</path>
abgelegt. Dieser Ort wird durch die PKGDIR Variable definiert.
</p>

</body>
</subsection>
<subsection>
<title>Source Code</title>
<body>

<p>
Quellcode von Anwendungen wird in <path>/usr/portage/distfiles</path> abgelegt.
Dieser Ort wird durch die DISTDIR Variable festgeelgt.
</p>

</body>
</subsection>
<subsection>
<title>RPM Dateien</title>
<body>

<p>
Auch wenn Portage mit RPM Archiven nichts anfangen kann, Portage kann diese
durch das <c>ebuild</c> Kommando erstellen (sehen Sie <uri
link="?part=3&amp;chap=6">Die ebuild Anwendung</uri>). Standardmäßig werden RPM
Archive in <path>/usr/portage/rpm</path> abgelegt. Dieses Verhalten wird durch
die RPMDIR Variable bestimmt.
</p>

</body>
</subsection>
</section>
<section>
<title>Software übersetzen</title>
<subsection>
<title>Temporäre Portage Dateien</title>
<body>

<p>
Portage lagert seine temporären Dateien in <path>/var/tmp</path>. Dies wird
durch die PORTAGE_TMPDIR Variable deklariert.
</p>

<p>
Wenn Sie die PORTAGE_TMPDIR Variable ändern, möchten Sie vermutlich auch die
folgenden Variablen ändern, da diese die Änderung an der PORTAGE_TMPDIR Variable
nicht übernehmen: BUILD_PREFIX.
</p>

</body>
</subsection>
<subsection>
<title>Build Verzeichnis</title>
<body>

<p>
Portage erstellt spezifische Build Verzeichnisse für jedes Paket, dass
installiert wird in <path>/var/tmp/portage</path>. Dieser Ort wird durch die
BUILD_PREFIX Variable definiert.
</p>

</body>
</subsection>
<subsection>
<title>Live-Dateisystem Ort</title>
<body>

<p>
Per default installiert Portage alle Dateien in das aktuelle Dateisystem
(<path>/</path>), Sie können dies jedoch durch das setzen der ROOT
Umgebungsvariable ändern. Dies ist nützlich, wenn Sie neue Build-Images
erstellen wollen.
</p>

</body>
</subsection>
</section>
<section>
<title>Log Features</title>
<subsection>
<title>Ebuild Logging</title>
<body>

<p>
Portage kann für jedes Ebuild ein Logfile anlegen, falls die PORT_LOGDIR
Variable auf ein Verzeichnis zeigt, in dem der portage Benutzer Schreibrechte
hat. Standardmässig ist diese Variable nicht gesetzt.
</p>

</body>
</subsection>
</section>
</sections>
