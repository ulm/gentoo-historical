<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- English CVS Version: 1.37 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/hb-working-rcscripts.xml,v 1.22 2012/08/26 21:47:06 keytoaster Exp $ -->

<sections>

<abstract>
Gentoo benutzt ein spezielles Initskriptformat, welches, neben weiteren
Funktionen, abhängigkeitsbezogene Entscheidungen und virtuelle Initskripte
ermöglicht. Dieses Kapitel erklärt diese Aspekte und erklärt, wie Sie mit diesen
Skripten umgehen.
</abstract>

<version>6</version>
<date>2012-07-24</date>

<section>
<title>Runlevel</title>
<subsection>
<title>Der Startvorgang</title>
<body>

<p>
Wenn Sie Ihr System booten, werden Sie sehr viel Text auf dem Bildschirm
vorbeifließen sehen. Genauer betrachtet, ist es immer derselbe Text nach einem
Neustart. Diese Auflistung aller Aktionen beim Startvorgang wird
<e>Bootsequenz</e> genannt und ist (mehr oder weniger) fest vorgeschrieben.
</p>

<p>
Zuerst lädt Ihr Bootloader das Kernel-Image, welches Sie in der
Konfigurationsdatei Ihres Bootloaders angegeben haben, in den Arbeitsspeicher.
Dann teilt er der CPU mit, den Kernel zu starten. Wenn dieser geladen ist und
läuft, initialisiert er alle kernel-spezifischen Strukturen und Aufgaben. Dann
wird der <c>init</c> Prozess gestartet.
</p>

<p>
Dieser Prozess stellt sicher, dass auch alle Dateisysteme (die in
<path>/etc/fstab</path> angegeben wurden) gemounted und benutzt
werden können. Dann führt er mehrere Skripte in <path>/etc/init.d</path>
aus, welche die verschiedenen Dienste starten, die Sie für einen
erfolgreichen Bootvorgang benötigen.
</p>

<p>
Schließlich, wenn alle Skripte ausgeführt wurden, aktiviert <c>init</c> die
Terminals (in den meisten Fällen virtuelle Konsolen, die hinter <c>Alt-F1</c>,
<c>Alt-F2</c>, etc. versteckt sind) mit einem speziellen Prozess namens
<c>getty</c>. Dieser Prozess stellt dann sicher, dass Sie sich über diese
Terminals mit dem Befehl <c>login</c> einloggen können.
</p>

</body>
</subsection>
<subsection>
<title>Initskripte</title>
<body>

<p>
<c>init</c> führt die Skripte in <path>/etc/init.d</path> aber nicht willkürlich
aus. Nur die Skripte aus <path>/etc/init.d</path>, die es ausführen soll,
werden auch ausgeführt. Welche das sind, steht in
<path>/etc/runlevels</path>.
</p>

<p>
Zuerst werden alle Skripte aus <path>/etc/init.d</path>, die einen symbolischen
Link in <path>/etc/runlevels/boot</path> besitzen, von <c>init</c> gestartet.
Normalerweise geschieht dies in alphabetischer Reihenfolge, aber einige
Skripte müssen zunächst Abhängigkeiten auflösen, so dass erst andere
Skripte gestaret sein müssen, bevor es selbst ausgeführt werden kann.
</p>

<p>
Wenn alle Skripte aus <path>/etc/runlevels/boot</path> ausgeführt wurden,
startet <c>init</c> diejenigen Skripte, die einen symbolischen Link in
<path>/etc/runlevels/default</path> besitzen. Auch hier wird zunächst die
alphabetische Reihenfolge beachtet, es sei denn, dass auch hier wieder
Abhängigkeiten aufgelöst werden müssen, damit eine erfolgreiche Startsequenz
gewährleistet ist.
</p>

</body>
</subsection>
<subsection>
<title>Wie Init arbeitet</title>
<body>

<p>
Natürlich entscheidet <c>init</c> das alles nicht alleine. Es benötigt eine
Konfigurationsdatei, die enthält, welche Aktion ausgeführt werden soll. Diese
Datei heißt <path>/etc/inittab</path>.
</p>

<p>
Wenn Sie sich an die Bootsequenz erinnern, die wir Ihnen eben erklärt
hatten, werden Sie sich daran erinnern, dass die erste Aktion von <c>init</c>
das Mounten aller Dateisysteme war. Dies ist in der folgenden Zeile aus
<path>/etc/inittab</path> ersichtlich:
</p>

<pre caption="Zeile zur Systeminitialisierung in /etc/inittab">
si::sysinit:/sbin/rc sysinit
</pre>

<p>
Diese Zeile teilt <c>init</c> mit, dass es <c>/sbin/rc sysinit</c> ausführen
muss, um das System zu initialisieren. Das <path>/sbin/rc</path> Skript stellt
dann die Initialisierung sicher. Sie könnten nun sagen, dass <c>init</c> ja
eigentlich nicht viel macht -- es delegiert die Aufgabe der
Systeminitialisierung an einen anderen Prozess.
</p>

<p>
Dann führt <c>init</c> alle Skripte, die einen symbolischen Link in
<path>/etc/runlevels/boot</path> haben aus. Dies wird in folgender Zeile
ersichtlich:
</p>

<pre caption="Systeminitialisierung, Fortsetzung">
rc::bootwait:/sbin/rc boot
</pre>

<p>
Wieder übernimmt das <c>rc</c> Skript die notwendigen Aufgaben. Beachten Sie,
dass die Option, die <c>rc</c> (<e>boot</e>) übergeben wird, denselben Namen
besitzt, wie das verwendete Unterverzeichnis in <path>/etc/runlevels</path>.
</p>

<p>
Nun überprüft <c>init</c> seine Konfigurationsdatei, um zu sehen, welchen
<e>Runlevel</e> es ausführen sollte. Um dies zu entscheiden, ließt es die
folgende Zeile aus <path>/etc/inittab</path>:
</p>

<pre caption="Die initdefault Zeile">
id:3:initdefault:
</pre>

<p>
In diesem Fall (welchen die meisten Gentoo-User nutzen werden) ist die
<c>runlevel</c> ID 3. Mit Hilfe dieser Information überprüft <c>init</c>, was
alles zum Start von <e>Runlevel 3</e> ausgeführt werden muss:
</p>

<pre caption="Runlevel Definitionen">
l0:0:wait:/sbin/rc shutdown
l1:S1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
</pre>

<p>
Die Zeilen, die den Level 3 definieren, werden wiederum vom <c>rc</c> Skript
verwendet, um die Dienste (nun mit dem Argument <e>default</e>) zu starten.
Beachten Sie auch hier, dass das Argument von <c>rc</c> wieder denselben
Namen wie das verwendete Unterverzeichnis von <path>/etc/runlevels</path>
hat.
</p>

<p>
Wenn <c>rc</c> fertig ist, entscheidet <c>init</c>, welche Konsole es
aktivieren sollte und welche Befehle auf jeder Konsole benutzt werden
müssen:
</p>

<pre caption="Die Definition der virtuellen Konsolen">
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
</pre>

</body>
</subsection>
<subsection>
<title>Was ist ein Runlevel?</title>
<body>

<p>
Sie haben gesehen, dass <c>init</c> ein Nummernschema benutzt, um zu
entscheiden, welchen <e>Runlevel</e> es aktivieren soll. Ein <e>Runlevel</e>
ist ein bestimmter Zustand, in dem sich Ihr System befindet und der eine
Ansammlung von Skripten (Runlevel-Skripte oder <e>Initskripte</e>)
besitzt, die beim Betreten oder Verlassen eines Runlevels ausgeführt
werden müssen.
</p>

<p>
In Gentoo sind sieben Runlevel definiert: drei interne Runlevel und vier, die
der Benutzer definieren kann. Die internen Runlevel sind <e>sysinit</e>,
<e>shutdown</e> und <e>reboot</e> und machen genau das, was die
Namen vermuten lassen: initialisieren das System, fahren es herunter und
führen einen Reboot durch.
</p>

<p>
Die benutzerdefinierten Runlevel sind diejenigen, mit einem Unterverzeichnis
in <path>/etc/runlevels</path>: <path>boot</path>, <path>default</path>,
<path>nonetwork</path> und <path>single</path>. Der <path>boot</path>
Runlevel startet alle notwendigen Dienste, die die anderen Runlevel benötigen.
Die verbleibenden drei Runlevel unterscheiden sich in den Diensten, die sie
starten: <path>default</path> wird genutzt, um die täglichen Operationen zu
erledigen, <path>nonetwork</path> nur im Falle, das keine Netzwerkverbindung
gebraucht wird und <path>single</path>, wenn das System repariert werden
muss.
</p>

</body>
</subsection>
<subsection>
<title>Mit den Initskripten arbeiten</title>
<body>

<p>
Die Skripte, die den <c>rc</c> Prozess starten, werden <e>Initskripte</e>
genannt. Jedes Skript in <path>/etc/init.d</path> kann mit den Argumenten
<e>start</e>, <e>stop</e>, <e>restart</e>, <e>pause</e>, <e>zap</e>,
<e>status</e>, <e>ineed</e>, <e>iuse</e>, <e>needsme</e>, <e>usesme</e>
oder <e>broken</e> ausgeführt werden.
</p>

<p>
Um einen Dienst zu starten oder zu stoppen (und die davon abhängigen Dienste),
sollte <c>start</c>, <c>stop</c> und <c>restart</c> benutzt werden:
</p>

<pre caption="Postfix starten">
# <i>/etc/init.d/postfix start</i>
</pre>

<note>
Nur Dienste, die den gegebenen Dienst <e>benötigen</e> werden gestoppt oder
neu gestartet. Alle anderen abhängigen Dienste (die den Dienst <e>nutzen</e>,
aber nicht benötigen) werden nicht berührt.
</note>

<p>
Falls Sie einen Dienst stoppen wollen, aber nicht die davon abhängigen Dienste,
können Sie das <c>pause</c> Argument nutzen:
</p>

<pre caption="Postfix stoppen, ohne die davon abhängigen Dienste zu berühren">
# <i>/etc/init.d/postfix pause</i>
</pre>

<p>
Falls Sie den Status eines Dienstes (started, stopped, paused, ...) sehen
möchten, können Sie das <c>status</c> Argument nutzen:
</p>

<pre caption="Statusinformationen über Postfix">
# <i>/etc/init.d/postfix status</i>
</pre>

<p>
Falls die Statusinformation Ihnen mitteilt, dass der Dienst gestartet wurde,
Sie aber wissen, dass dies nicht der Fall ist, können Sie die Statusinformation
mit dem <c>zap</c> Argument zu "stopped" zurücksetzen:
</p>

<pre caption="Statusinformation von Postfix zurücksetzen">
# <i>/etc/init.d/postfix zap</i>
</pre>

<p>
Um auch nachzufragen, was von dem Dienst alles abhängt, können sie die
Argumente <c>iuse</c> oder <c>ineed</c> nutzen. Mit <c>ineed</c> wird alles
angezeigt, was zum ordnungsgemäßen Funktionieren des Dienstes nötig ist.
<c>iuse</c> andererseits zeigt alle Dienste an, die von diesem Dienst benutzt
werden können, aber nicht notwendig zur ordnungsgemäßen Funktion des
Dienstes sind.
</p>

<pre caption="Anforderung einer Liste der notwendigen Dienste, von denen Postfix abhängt">
# <i>/etc/init.d/postfix ineed</i>
</pre>

<p>
Ähnlich ist die Vorgehensweise, wenn Sie nach allen Diensten fragen wollen, die
einen bestimmten Dienst benötigen (<c>needsme</c>) oder ihn benutzen
(<c>usesme</c>):
</p>

<pre caption="Anforderung einer Liste aller Dienste, die Postfix benötigen">
# <i>/etc/init.d/postfix needsme</i>
</pre>

<p>
Schließlich können Sie noch nachfragen, welche Abhängigkeiten der Dienst
benötigt, die aber noch fehlen:
</p>

<pre caption="Anforderung einer Liste aller fehlenden Abhängigkeiten für Postfix">
# <i>/etc/init.d/postfix broken</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Mit rc-update arbeiten</title>
<subsection>
<title>Was ist rc-update?</title>
<body>

<p>
Das Init-System von Gentoo benutzt einen Abhängigkeitsbaum um zu
entscheiden, welcher Dienst zuerst gestartet werden muss. Da dies eine
ermüdende Aufgabe ist, die wir unseren Usern nicht unbedingt zumuten wollten
"von Hand" auszuführen, haben wir einige Tools erstellt, die die Administration
der Runlevel und Initskripte erleichtert.
</p>

<p>
Mit <c>rc-update</c> können Sie Initskripte zu einem Runlevel hinzufügen
und wieder entfernen. Das <c>rc-update</c> Tool wird dann das <c>depscan.sh</c>
Skript automatisch dazu veranlassen, den Abhängigkeitsbaum anzupassen.
</p>

</body>
</subsection>
<subsection>
<title>Hinzufügen und Entfernen von Diensten</title>
<body>

<p>
Sie haben bereits während der Installation von Gentoo Initskripte zum
"default" Runlevel hinzugefügt. Zu diesem Zeitpunkt hatten Sie  aber
wahrscheinlich noch keine Ahnung, für was "default" steht, nun sollten Sie
es aber wissen. Das <c>rc-update</c> Skript benötigt ein zweites Argument,
welches eine "Aktion" definiert: <e>add</e>, <e>del</e> oder <e>show</e>.
</p>

<p>
Um ein Initskript hinzuzufügen oder zu entfernen, übergeben Sie
<c>rc-update</c> einfach <c>add</c> oder <c>del</c> als Argument,
gefolgt von dem Initskript und dem Runlevel. Zum Beispiel:
</p>

<pre caption="Entfernen von Postfix aus dem Runlevel default">
# <i>rc-update del postfix default</i>
</pre>

<p>
Der Befehl <c>rc-update -v show</c> wird Ihnen alle verfügbaren
Initskripte und Runlevel, in denen diese ausgeführt werden, zeigen:
</p>

<pre caption="Informationen über Initskripte erhalten">
# <i>rc-update -v show</i>
</pre>

<p>
Sie können auch <c>rc-update show</c> ausführen (ohne <c>-v</c>) um nur die
aktivierten Initskripte und ihre Runlevel anzuzeigen.
</p>

</body>
</subsection>
</section>
<section>
<title>Dienste konfigurieren</title>
<subsection>
<title>Warum zusätzliche Konfigurationen?</title>
<body>

<p>
Initskripte können recht komplex sein. Es ist daher nicht unbedingt von
Vorteil, wenn User Initskripte direkt bearbeiten könnten, da es die Sache
nur fehleranfälliger machen würde. Es ist aber auch wichtig, dass
Konfigurationen gemacht werden können. Zum Beispiel, wenn Sie einem
Dienst mehrere Optionen mitgeben wollten:
</p>

<p>
Ein zweiter Grund, diese Konfiguration außerhalb der Initskripte zu haben
ist, ein Update eines Initskriptes durchführen zu können, ohne zu
befürchten, die Konfigurationen dabei rückgängig zu machen.
</p>

</body>
</subsection>
<subsection>
<title>Das /etc/conf.d Verzeichnis</title>
<body>

<p>
Gentoo stellt einen einfachen Weg zur Konfiguration eines solchen
Services zur Verfügung: Jedes Initskript, das konfiguriert werden kann, hat
eine Datei in <path>/etc/conf.d</path>. Zum Beispiel hat das Apache2
Initskript (<path>/etc/init.d/apache2</path> genannt) eine Konfigurationsdatei
namens <path>/etc/conf.d/apache2</path>, die die Optionen enthalten kann,
die Sie dem Apache 2 Server beim Start mitgeben wollen:
</p>

<pre caption="Variablen, definiert in /etc/conf.d/apache2">
APACHE2_OPTS="-D PHP5"
</pre>

<p>
Solch eine Konfigurationsdatei enthält nur Variablen (genau wie in
<path>/etc/portage/make.conf</path>), was die Konfiguration eines Dienstes
sehr vereinfacht. Es erlaubt uns auch, mehr Informationen (als Kommentare)
über die Variablen zu geben.
</p>

</body>
</subsection>
</section>
<section>
<title>Initskripte schreiben</title>
<subsection>
<title>Muss ich das?</title>
<body>

<p>
Nein. Ein Initskript zu schreiben ist normalerweise nicht notwendig, da
Gentoo fertige Initskripte für alle bereitgestellten Dienste liefert. Wie dem
auch sei, haben Sie vielleicht einen Dienst, ohne Portage zu nutzen
installiert. In diesem Fall müssen sie wahrscheinlich ein eigenes Initskript
schreiben.
</p>

<p>
Benutzen Sie das von einem Dienst bereitgestellte Initskript nicht, es sei
denn, es ist ausdrücklich für Gentoo geschrieben: Die Initskripte von
Gentoo sind nicht mit den Initskripten anderer Distributionen kompatibel!
</p>

</body>
</subsection>
<subsection>
<title>Layout</title>
<body>

<p>
Das grundlegende Layout eines Initskriptes ist wie folgt beschrieben.
</p>

<pre caption="Grundlegendes Layout eines Initskriptes">
#!/sbin/runscript

depend() {
  <comment>(Informationen zu Abhängigkeiten)</comment>
}

start() {
  <comment>(Befehle, notwendig zum Starten eines Dienstes)</comment>
}

stop() {
  <comment>(Befehle, notwendig zum Stoppen eines Dienstes)</comment>
}
</pre>

<p>
Jedes Initskript <e>muss</e> eine <c>start</c> Funktion definieren. Alle
anderen Abschnitte sind optional.
</p>

</body>
</subsection>
<subsection>
<title>Abhängigkeiten</title>
<body>

<p>
Es gibt zwei Abhängigkeits-artige Einstellungen, die Sie definieren können, die
das Starten und die Reihenfolge der Init-Skripte beeinflussen: <c>use</c> und
<c>need</c>. Von diesen abgesehen gibt es noch zwei Methoden, die die
Reihenfolge beeinflussen: <c>before</c> und <c>after</c>. Diese letzten beiden
sind keine eigentlichen Abhängigkeiten - durch sie schlägt das Init-Skript nicht
fehl, falls das angegebene Init-Skript nicht zum Starten vorgesehen ist (oder es
Probleme mit dem Starten gibt).
</p>

<ul>
  <li>
    Die Angabe <c>use</c> informiert das Init-System, dass das Init-Skript
    Funktionalität des angegebenen Skripts <e>nutzt</e>, aber nicht direkt davon
    abhängt. Gute Beispiele sind <c>use logger</c> und <c>use dns</c>. Wenn
    diese Dienste verfügbar sind, können sie für einen guten Zweck verwendet
    werden, aber auch wenn Sie keinen Logger oder DNS-Server haben, wird der
    Dienst trotzdem funktionieren. Falls die angegebenen Dienste existieren,
    werden sie vor dem Skript, das sie be<c>nutzt</c>, gestartet.
  </li>
  <li>
    Die Angabe <c>need</c> ist eine harte Abhängigkeit. Sie bedeutet, dass das
    Skript, das ein anderes Skript <c>benötigt</c>, nicht startet, bevor das
    andere Skript erfolgreich gestartet hat. Ferner wird dieses Skript
    neu gestartet, wenn das andere Skript neu gestartet wird.
  </li>
  <li>
    Wenn <c>before</c> genutzt wird, wird das Skript vor dem angegebenen Skript
    gestartet, <e>falls</e> das angegebene Teil des Init-Levels ist.
    Beispielsweise wird ein Init-Skript namens <path>xdm</path>, das <c>before
    alsasound</c> definiert, vor dem Skript <path>alsasound</path> starten,
    aber nur, wenn <path>alsasound</path> auch im gleichen Init-Level zum
    Starten vorgemerkt ist. Falls <path>alsasound</path> nicht zum Starten
    vorgemerkt ist, dann hat diese Einstellung keine Auswirkungen und
    <path>xdm</path> wird gestartet, wann auch immer das Init-System es für am
    sinnvollsten hält.
  </li>
  <li>
    Genauso informiert <c>after</c> das Init-System darüber, dass das gegebene
    Skript nach dem angegebenen Skript gestartet werden soll, <e>falls</e> das
    angegebene Skript Teil des Init-Levels ist. Falls nicht, hat die Einstellung
    keine Auswirkungen und das Skript wird gestartet, wann auch immer das
    Init-System es für am sinnvollsten hält.
  </li>
</ul>

<p>
Aus diesen Erklärungen sollte hervorgehen, dass <c>need</c> die einzige "wahre"
Abhängigkeitseinstellung ist, da sie bestimmt, ob das Skript gestartet wird oder
nicht. Alle anderen sind lediglich Hinweise für das Init-System, in welcher
Reihenfolge die Skripte gestartet werden können bzw. sollen.
</p>

<p>
Wenn Sie sich nun einige von Gentoos vielen Init-Skripten anschauen, werden Sie
merken, dass einige Abhängigkeiten auf Dinge haben, die keine Init-Skripte sind.
Diese "Dinge" nennen wir <e>Virtuals</e>.
</p>

<p>
Eine <c>virtual</c> Abhängigkeit stellt eine Abhängigkeit dar, die nicht nur
von diesem Dienst zur Verfügung gestellt wird. Ihr Initskript kann von einem
System-Protokollierdienst abhängen, aber es gibt ja bekanntlich mehrere davon
(metalogd, syslog-ng, sysklogd, ...). Da Sie ja nicht jeden einzelnen von
diesen <c>brauchen</c> (ein vernünftige System hat nicht jeden dieser
Protokollierer installiert und gestartet), stellen wir sicher, dass all diese
Dienste eine virtuelle Abhängigkeit <c>bereitstellen</c>.
</p>

<p>
Lassen Sie uns einen Blick auf die Abhängigkeitsinformationen des
Postfix-Dienstes werfen.
</p>

<pre caption="Abhängigkeitsinformationen zu Postfix">
depend() {
  need net
  use logger dns
  provide mta
}
</pre>

<p>
Wie Sie sehen können, der Postfix-Dienst:
</p>

<ul>
  <li>
    benötigt die (virtual) <c>net</c> Abhängigkeit (die z.B. von
    <path>/etc/init.d/net.eth0</path> bereitgestellt wird)
  </li>
  <li>
    nutzt die (virtual) <c>logger</c> Abhängigkeit (die z.B. von
    <path>/etc/init.d/syslog-ng</path> bereitgestellt wird)
  </li>
  <li>
    nutzt die (virtual) <c>dns</c> Abhängigkeit (die z.B. von
  <path>/etc/init.d/named</path> bereitgestellt wird)
  </li>
  <li>
    stellt die (virtual) <c>mta</c> Abhängigkeit (die allen Mail-Servern
    gemein ist) zur Verfügung
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>Reihenfolge kontrollieren</title>
<body>

<p>
Wie im vorherigen Abschnitt beschrieben, können Sie dem Init-System sagen, in
welcher Reihenfolge die Skripte gestartet (oder gestoppt) werden sollen. Diese
Reihenfolge wird durch die Abhängigkeitsangaben <c>use</c> und <c>need</c>
beeinflusst, aber auch durch die Reihenfolgenangaben <c>before</c> und
<c>after</c>. Da wir diese Angaben bereits erklärt haben, schauen wir uns
beispielhaft das Init-Skript des Dienstes Portmap an.
</p>

<pre caption="Die depend() Funktion im Portmap-Dienst">
depend() {
  need net
  before inetd
  before xinetd
}
</pre>

<p>
Sie können auch den "*" Ausdruck benutzen, um alle Dienste im selben Runlevel
zu erwischen, obwohl das nicht sehr ratsam ist.
</p>

<pre caption="Ein Initskript als erstes in einem Runlevel starten">
depend() {
  before *
}
</pre>

<p>
Wenn Ihr Dienst auf lokale Festplatten schreiben muss, wird er wahrscheinlich
<c>localmount</c> benötigen. Wenn er etwas in <path>/var/run</path> platziert,
wie ein Pidfile, dann sollte er nach <c>bootmisc</c> gestartet werden.
</p>

<pre caption="Beispiel der depend() Funktion">
depend() {
  need localmount
  after bootmisc
}
</pre>

</body>
</subsection>
<subsection>
<title>Standardfunktionen</title>
<body>

<p>
Neben der <c>depend()</c> Funktionalität benötigen Sie vielleicht auch
die <c>start</c> Funktion. Diese enthält alle Befehle, die zum Starten Ihres
Dienstes notwendig sind. Es ist ratsam, die <c>ebegin</c> und <c>eend</c>
Funktionen zu nutzen, um dem User mitzuteilen, was passiert:
</p>

<pre caption="Beispiel der start() Funktion">
start() {
  if [ "${RC_CMD}" = "restart" ];
  then
    <comment># Befehle, falls ein Restart mehr erfordert als stop, start</comment>
  fi

  ebegin "Starten meines Dienstes"
  start-stop-daemon --start --exec /pfad/zu/meinem_dienst \
   --pidfile /pfad/zu/meinem_pidfile
  eend $?
}
</pre>

<p>
Sowohl <c>--exec</c> als auch <c>--pidfile</c> sollten in den Start- und
Stopp-Funktionen verwendet werden. Falls der der Dienst kein Pidfile erstellt
sollten Sie, wenn möglich, <c>--make-pidfile</c> verwenden. Sie sollten dies
aber testen um sicher zu sein. Verwenden Sie ansonsten kein Pidfile. Sie können
zudem <c>--quiet</c> zu den <c>start-stop-daemon</c> Optionen hinzufügen; dies
wird aber nicht empfohlen, solange der Dienst nicht extrem detailliert
berichtet. Die Verwendung von <c>--quiet</c> kann die Fehlersuche behindern,
wenn der Dienst nicht erfolgreich gestartet werden kann.
</p>

<p>
Eine weitere zu bemerkende Einstellung in obigem Beispiel ist das Prüfen des
Inhalts der Variable <c>RC_CMD</c>. Im Gegensatz zum alten Init-System
unterstützt das neuere System <c>openrc</c> keine Skript-spezifische
Restart-Funktionalität. Stattdessen muss das Skript den Inhalt der Variable
<c>RC_CMD</c> prüfen, um zu sehen, ob eine Funktion (sei es <c>start()</c> oder
<c>stop()</c>) als Teil eines Restarts aufgerufen wird oder nicht.
</p>

<note>
Stellen Sie sicher, dass <c>--exec</c> wirklich einen Dienst aufruft und nicht
nur ein Shell-Skript, welches den Dienst startet und dann beendet. Das ist die
Aufgabe des Initskripts.
</note>

<p>
Wenn Sie weitere Beispiele der <c>start()</c> Funktion benötigen, lesen Sie
bitte den Quellcode der verfügbaren Initskripte in Ihrem
<path>/etc/init.d</path> Verzeichnis.
</p>

<p>
Eine weitere Funktion, die Sie definieren können, ist <c>stop()</c>. Sie sind
nicht verpflichtet, diese Funktion zu erstellen! Unser Init-System ist
intelligent genug, diese selbst auszufüllen, sofern Sie den
<c>start-stop-daemon</c> nutzen.
</p>

<p>
Hier ist ein Beispiel einer <c>stop()</c> Funktion:
</p>

<pre caption="Beispiel der stop() Funktion">
stop() {
  ebegin "Stoppen meines Dienstes"
  start-stop-daemon --stop --exec /pfad/zu/meinem_dienst \
    --pidfile /pfad/zu/meinem_pidfile
  eend $?
}
</pre>

<p>
Wenn Ihr Dienst ein anderes Skript ausführt (zum Beipsiel Bash, Python oder
Perl) und das Script später den Namen ändert (zum Beispiel von <c>foo.py</c> auf
<c>foo</c>) werden Sie <c>--name</c> zum <c>start-stop-daemon</c> hinzufügen
müssen. Sie müssen den Namen angeben, auf den Ihr Skript geändert wird. In
diesem Beispiel startet ein Dienst <c>foo.py</c>, welches seinen Namen auf
<c>foo</c> ändert:
</p>

<pre caption="Ein Dienst, der das Skript foo startet">
start() {
  ebegin "Starten meines Skripts"
  start-stop-daemon --start --exec /pfad/zu/meinem_skript \
    --pidfile /pfad/zu/meinem_pidfile --name foo
  eend $?
}
</pre>

<p>
Für den <c>start-stop-daemon</c> existiert auch eine exzellente
man-Seite, falls Sie weitere Informationen benötigen.
</p>

<pre caption="Aufrufen der man-Seite des start-stop-daemon">
$ <i>man start-stop-daemon</i>
</pre>

<p>
Die Syntax von Gentoo für Initskripte basiert auf der Bourne Again Shell
(bash). Es steht Ihnen also frei, bash-kompatible Konstrukte innerhalb Ihrer
Initskripte zu verwenden. Jedoch ist es ratsam, Ihre Init-Skripte so zu
schreiben, dass sie POSIX-konform sind. Zukünftige Init-Systeme erlauben es
möglicherweise, <path>/bin/sh</path> auf andere Shells als bash zu symlinken.
Init-Skripte, die dann auf Features zurückgreifen, die nur bash unterstützt,
werden dann nicht funktionieren.
</p>

</body>
</subsection>
<subsection>
<title>Eigene Optionen hinzufügen</title>
<body>

<p>
Falls Sie wollen, dass Ihr Initskript mehr Optionen besitzt, als wir bisher
aufgeführt haben, sollten Sie Ihre Option zur <c>extra_commands</c> Variable
hinzufügen und eine Funktion mit demselben Namen wie die Option erstellen.
Zum Beispiel, um eine Funktion namens <c>restartdelay</c> zu unterstützen:
</p>

<pre caption="Unterstützung der restartdelay Option">
extra_commands="restartdelay"

restartdelay() {
  stop
  sleep 3    <comment># Warte 3 Sekunden vor dem Neustart</comment>
  start
}
</pre>

<impo>
Die Funktion <c>restart()</c> kann in openrc nicht überschrieben werden!
</impo>

</body>
</subsection>
<subsection>
<title>Variablen zur Dienstkonfiguration</title>
<body>

<p>
Sie müssen nichts machen, um eine Konfigurationsdatei in
<path>/etc/conf.d</path> zu unterstützen: Wenn Ihr Initskript ausgeführt
wird, wird folgendes automatisch zu Grunde gelegt (d.h. diese Variablen
können benutzt werden):
</p>

<ul>
  <li><path>/etc/conf.d/&lt;Ihr Initskript&gt;</path></li>
  <li><path>/etc/conf.d/basic</path></li>
  <li><path>/etc/rc.conf</path></li>
</ul>

<p>
Falls Ihr Initskript eine virtuelle Abhängigkeit (wie <c>net</c>) bereitstellt,
wird dazu die Datei, die mit dieser Abhängigkeit in Verbindung gebracht wird
(wie <path>/etc/conf.d/net</path>), auch zu Grunde gelegt.
</p>

</body>
</subsection>
</section>
 <section>
<title>Ändern des standardmäßigen Runlevel-Verhaltens</title>
<subsection>
<title>Wer kann hiervon profitieren?</title>
<body>

<p>
Viele Laptop-Benutzer kennen die Situation: Daheim müssen Sie <c>net.eth0</c>
starten, wenn Sie unterwegs sind möchten sie <c>net.eth0</c> nicht starten (weil
grade kein Netzwerk verfügbar ist). Mit Gentoo können Sie das Runlevel Verhalten
nach Ihren eigenen Vorstellungen anpassen.
</p>

<p>
Zum Beispiel können Sie ein zweites Runlevel "default" anlegen, dass Sie booten
können mit anderen Initskripten die diesem Runlevel zugeordnet sind. Sie können
während des Booten wählen, welches default Runlevel Sie benutzen möchten.
</p>

</body>
</subsection>
<subsection>
<title>softlevel benutzen</title>
<body>

<p>
Zunächst erstellen Sie das Runlevel Verzeichnis für Ihr zweites "default"
Runlevel. Als Beispiel werden wir das <path>offline</path> Runlevel erstellen:
</p>

<pre caption="Erstellen eines Runlevel-Verzeichnisses">
# <i>mkdir /etc/runlevels/offline</i>
</pre>

<p>
Fügen Sie die notwendigen Initskripte in das neu erstelle Runlevel. Wenn Sie
zum Bespiel eine exakte Kopie Ihres aktuellen <c>default</c> Runlevels anlegen
möchten, lediglich ohne <c>net.eth0</c>:
</p>

<pre caption="Hinzufügen der notwendigen Initskripte">
<comment>(Kopieren Sie alle Dienste vom default zum offline Runlevel)</comment>
# <i>cd /etc/runlevels/default</i>
# <i>for service in *; do rc-update add $service offline; done</i>
<comment>(Entfernen unerwünschter Dienste vom offline Runlevel)</comment>
# <i>rc-update del net.eth0 offline</i>
<comment>(Anzeigen aktivierter Dienste für das offline Runlevel)</comment>
# <i>rc-update show offline</i>
<comment>(Verkürzte Beispielsausgabe)</comment>
               acpid | offline
          domainname | offline
               local | offline
            net.eth0 |
</pre>

<p>
Obwohl <c>net.eth0</c> aus dem Runlevel offline entfernt wurde, könnte
<c>udev</c> trotzdem versuchen jegliche Geräte, die es findet, zu starten und
die passenden Dienste aufzurufen. Diese Funktionalität nennt sich
<e>Hotplugging</e>. Standardmäßig verwendet Gentoo kein Hotplugging.
</p>

<p>
Falls Sie Hotplugging verwenden wollen, aber nur für eine ausgewählte Menge an
Skripten, verwenden Sie die <c>rc_hotplug</c> Variable in
<path>/etc/rc.conf</path>:
</p>

<pre caption="Deaktivierung der von Geräten gestarteten Dienste in /etc/rc.conf">
<comment># Hotplugging erlauben für net.wlan sowie alle anderen Dienste, die nicht auf net.* matchen</comment>

rc_hotplug="net.wlan !net.*"
</pre>

<note>
Für weitere Informationen zu Diensten, die von Geräten gestartet werden, schauen
Sie sich bitte die Kommentare in <path>/etc/rc.conf</path> an.
</note>


<p>
Editieren Sie nun die Bootloader-Konfiguration und fügen einen neuen Eintrag für
das Runlevel <c>offline</c> hinzu. Zum Beispiel in
<path>/boot/grub/grub.conf</path>:
</p>

<pre caption="Einen zusätzlichen Eintrag für das Runlevel offline hinzufügen">
title Gentoo Linux Offline Usage
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3 <i>softlevel=offline</i>
</pre>

<p>
Voilà, Sie sind soweit. Wenn Sie Ihr System booten und die neu hinzugefügte
Option auswählen wird das System das Runlevel <c>offline</c> anstelle des
Runlevels <c>default</c> starten.
</p>

</body>
</subsection>
<subsection>
<title>Bootlevel benutzen</title>
<body>

<p>
Die Nutzung von <c>bootlevel</c> ist komplett analog zu <c>softlevel</c>. Der
einzige Unterschied ist, dass Sie hier ein zweites "boot" Runlevel anstelle
eines zweiten "default" Runlevel definieren können.
</p>

</body>
</subsection>
</section>
</sections>
