<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/hb-install-x86+amd64-kernel.xml,v 1.24 2013/02/23 21:02:27 keytoaster Exp $ -->

<sections>

<abstract>
Der Linux-Kernel ist der Kern einer jeden Distribution. Dieses Kapitel
erläutert, wie man den Kernel konfiguriert.
</abstract>

<version>19</version>
<date>2012-11-12</date>

<section>
<title>Setzen der Zeitzone des Systems</title>
<body>

<p>
Zuerst müssen Sie Ihrem System mitteilen, in welcher Zeitzone es sich befindet.
Suchen Sie Ihre Zeitzone in <path>/usr/share/zoneinfo</path> und kopieren Sie
sie nach <path>/etc/localtime</path>.Bitte vermeiden Sie die
<path>/usr/share/zoneinfo/Etc/GMT*</path> Zeitzonen, denn deren Namen verweisen
nicht auf die erwarteten Zonen. Zum Beispiel ist <path>GMT-8</path> in
Wirklichkeit GMT+8.
</p>

<pre caption="Setzen der Zeitzone">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Beispiel: Europe/Brussels)</comment>
# <i>cp /usr/share/zoneinfo/Europe/Brussels /etc/localtime</i>
<comment>(Nun die Zeitzone setzen)</comment>
# <i>echo "Europe/Brussels" &gt; /etc/timezone</i>
</pre>

</body>
</section>
<section>
<title>Installieren der Quellen</title>
<subsection>
<title>Auswählen eines Kernels</title>
<body>

<p>
Der Kern um den herum alle Distributionen gebaut sind ist der Linux-Kernel. Er
bildet die Ebene zwischen den Benutzerprogrammen und der Systemhardware. Gentoo
bietet seinen Benutzern verschiedene mögliche Kernelquellen. Eine komplette
Liste mit Beschreibungen finden Sie im <uri link="/doc/de/gentoo-kernel.xml">
Gentoo Kernel Guide</uri>.
</p>

<p>
Für <keyval id="arch"/>-basierende Systeme haben wir <c>gentoo-sources</c>
(Kernelquellen modifiziert für zusätzliche Funktionen).
</p>

<p>
Wählen Sie Ihre Kernelquellen aus und installieren Sie diese mit <c>emerge</c>.
</p>

<pre caption="Installieren von Kernelquellen">
# <i>emerge gentoo-sources</i>
</pre>

<p>
Wenn Sie einen Blick in <path>/usr/src</path> werfen, sollten Sie einen
symbolischen Link mit Namen <path>linux</path>sehen , der auf Ihre
Kernelquellen verweist. In diesem Fall verweisen die installierten
Kernelquellen auf <c>gentoo-sources-<keyval id="kernel-version"/></c>. Beachten
Sie, dass Ihre Version davon abweichen kann.
</p>

<pre caption="Anzeigen des symbolischen Kernelquellen-Links">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root   root    12 Oct 13 11:04 /usr/src/linux -&gt; linux-<keyval id="kernel-version"/>
</pre>

<p>
Nun ist es Zeit Ihre Kernelquellen zu konfigurieren und zu kompilieren. Alle
Architekturen können <c>genkernel</c> verwenden, welches einen generischen
Kernel erstellt, wie er von der Installations-CD verwendet wird. Wir erklären
die "manuelle" Konfiguration jedoch zuerst, denn es ist der beste Weg Ihre
Umgebung zu optimieren.
</p>

<p>
Wenn Sie Ihren Kernel manuell konfigurieren wollen, fahren Sie nun mit <uri
link="#manual">Standard: Manuelle Konfiguration</uri> fort. Wenn
Sie <c>genkernel</c> benutzen wollen, sollten Sie stattdessen
<uri link="#genkernel">Alternativ: Benutzung von Genkernel</uri> lesen.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Standard: Manuelle Konfiguration</title>
<subsection>
<title>Einführung</title>
<body>

<p>
Einen Kernel manuell zu konfigurieren wird oft als der schwierigste Teil
gesehen, den jeder Linux Benutzer insgesamt meistern muss. Nichts ist weiter von
der Wahrheit entfernt -- nach der Konfiguration von einigen Kerneln werden Sie
sich gar nicht daran erinnern, dass es schwer war.
</p>

<p>
Eine Sache jedoch <e>ist</e> wahr: Sie müssen Ihr System kennen, wenn Sie
beginnen einen Kernel manuell zu konfigurieren. Die meisten Informationen über
vorhandene Hardware können gesammelt werden, indem Sie sich pciutils
installieren (<c>emerge pciutils</c>), welches <c>lspci</c> enthält. Sie haben
nun die Möglichkeit <c>lspci</c> innerhalb der chroot-Umgebung zu verwenden.
Sie können ohne Sorge jegliche <e>pcilib</e>-Warnungen (wie pcilib: cannot open
/sys/bus/pci/devices), die <c>lspci</c> ausgibt, ignorieren. Alternativ können
Sie <c>lspci</c> aus einer <e>nicht-chroot</e>-Umgebung ausführen. Das Resultat
ist dasselbe. Sie können auch <c>lsmod</c> ausführen, um zu sehen welche
Kernelmodule die Installations-CD verwendet (es kann ihnen einen guten Hinweis
darauf geben was zu aktivieren ist).
</p>

<p>
Gehen Sie nun in Ihr Kernelquellverzeichnis und führen Sie <c>make
menuconfig</c> aus. Dies startet ein ncurses-basierentes Konfigurationsmenü.
</p>

<pre caption="Menuconfig starten">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Ihnen werden verschiedene Konfigurationssektionen präsentiert. Wir listen
zunächst einige Optionen auf, die sie aktivieren müssen (ansonsten wird Gentoo
nicht funktionieren, oder ohne zusätzliche Veränderungen nicht richtig
funktionieren).
</p>

</body>
</subsection>
<subsection>
<title>Aktivieren der benötigten Optionen</title>
<body>

<p>
Stellen Sie sicher, dass alle Treiber, die notwendig sind um Ihr System zu
booten (wie zum Beispiel Treiber für einen SCSI-Controller) <e>in</e> den Kernel
und nicht als Modul kompiliert werden, da Ihr System andernfalls nicht
vollständig booten kann.
</p>

</body>
<body test="func:keyval('arch')='AMD64'">

<p>
Als nächstes wird der exakte Prozessortyp ausgewählt. Vom x86_64
Kernel-Maintainer wird dringend empfohlen die MCE-Funktionen zu aktivieren,
damit Sie bei jeglichen Hardwareproblemen benachrichtigt werden können. Auf
x86_64 werden diese Fehler nicht bei <c>dmesg</c>, wie auf anderen
Architekturen, ausgegeben, sondern auf <path>/dev/mcelog</path>. Dies benötigt
das <c>app-admin/mcelog</c> Paket. Stellen Sie sicher dass Sie IA32 Emulation
ausgewählt haben, wenn Sie in der Lage sein wollen 32-Bit-Programme auszuführen.
Gentoo wird standardmäßig ein Multilib-System installieren (gemischte
32-Bit/64-Bit-Verarbeitung), daher ist diese Option erforderlich.
</p>

<note>
Wenn Sie vorhaben, ein non-multilib-Profil (für ein reines 64-bit-System) zu
verwenden, dann müssen Sie IA32 Emulation nicht auswählen. Sie müssen aber auch
die <uri link="?part=1&amp;chap=6#doc_chap2_sect2">Anweisungen</uri> zum Wechsel
auf ein <uri link="/doc/de/gentoo-amd64-faq.xml">non-multilib-Profil</uri>
befolgen und einen korrekten <uri
link="?part=1&amp;chap=10#doc_chap2_sect2">Bootloader</uri> auswählen.
</note>

<pre caption="Auswahl des Prozessortyps und dessen Funktionen">
Processor type and features  --->
   [ ] Machine Check / overheating reporting
   [ ] Intel MCE Features
   [ ] AMD MCE Features
  Processor family (AMD-Opteron/Athlon64)  --->
    ( ) Opteron/Athlon64/Hammer/K8
    ( ) Intel P4 / older Netburst based Xeon
    ( ) Core 2/newer Xeon
    ( ) Intel Atom
    ( ) Generic-x86-64
Executable file formats / Emulations  --->
   [*] IA32 Emulation
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
Wählen Sie nun die korrekte Prozessorfamilie:
</p>

<pre caption="Auswahl der richtigen Prozessorfamilie">
Processor type and features ---&gt;
  <comment>(Passen Sie dies an Ihr System an)</comment>
  (<i>Athlon/Duron/K7</i>) Processor family
</pre>

</body>
<body>

<p>
Wählen Sie nun <e>Maintain a devtmpfs file system to mount at /dev</e> aus, so
dass kritische Gerätedateien schon früh während des Boot-Prozesses verfügbar
sind.
</p>

<pre caption="Aktivieren von devtmpfs Unterstützung">
Device Drivers ---&gt;
  Generic Driver Options ---&gt;
    [*] Maintain a devtmpfs filesystem to mount at /dev
    [ ]   Automount devtmpfs at /dev, after the kernel mounted the rootfs
</pre>

<p>
Gehen Sie nun in <c>File Systems</c> und selektieren Sie Unterstützung für die
Dateisysteme die Sie benutzen. Kompilieren Sie diese <e>nicht</e> als Module,
ansonsten wird ihr Gentoo System nicht fähig sein, Ihre Partitionen beim Booten
zu mounten. Selektieren Sie auch <c>Virtual memory</c>,
<c>/proc file system</c>.
</p>

<pre caption="Auswählen der benötigten Dateisysteme">
File systems ---&gt;
<comment>(Wählen Sie eine oder mehrere der folgenden Optionen, wie von Ihrem System benötigt, aus.)</comment>
  &lt;*&gt; Second extended fs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; The Extended 4 (ext4) filesystem
  &lt;*&gt; Reiserfs support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; XFS filesystem support
  ...
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)

<comment>(Aktivieren Sie GPT-Partitions-Label-Unterstützung, falls Sie das vorhin verwendet haben)</comment>
-*- Enable the block layer ---&gt;
    ...
    Partition Types ---&gt;
      [*] Advanced partition selection
      ...
      [*] EFI GUID Partition support
</pre>

<p>
Wenn Sie PPPoE oder ein Modem benutzen um sich ins Internet einzuwählen brauchen
Sie folgende Optionen im Kernel:
</p>

<pre caption="Auswählen von Treibern, notwendig für PPPoE">
Device Drivers ---&gt;
  Network device support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Die zwei Komprimierungsoptionen werden nicht schaden, aber werden auch nicht
definitiv gebraucht, ebenso die <c>PPP over Ethernet</c> Option, die
möglicherweise nur von <c>ppp</c> verwendet wird, wenn es dazu konfiguriert ist
Kernelmodus-PPPoE zu verwenden.
</p>

<p>
Wenn Sie diese benötigen, vergessen Sie nicht Ünterstützung für Ihre
Netzwerkkarte in Ihren Kernel einzubinden.
</p>

<p test="func:keyval('arch')='x86'">
Wenn Sie eine Intel-CPU, die HyperThreading (tm) unterstützt, oder ein
Mehrprozessorsystem haben, sollten Sie "Symmetric multi-processing support"
aktivieren:
</p>

<p test="func:keyval('arch')='AMD64'">
Wenn Sie einen Multi-CPU-Opteron oder ein Multi-Core-System (z.B. AMD64 X2)
haben sollten Sie "Symmetric multi-processing support" aktivieren:
</p>

<pre caption="Aktivieren der SMP-Unterstützung">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<note>
Auf Multi-Core Systemen zählt jeder Kern als ein Prozessor.
</note>

<p test="func:keyval('arch')='x86'">
Wenn Sie mehr als 4GB RAM haben müssen Sie "High Memory Support (64G)"
aktivieren.
</p>

<p>
Wenn Sie USB-Eingabegeräte wie eine Tastatur oder Maus nutzen möchten, vergessen
Sie Unterstützung für diese ebenfalls nicht:
</p>

<pre caption="Aktivieren der USB-Unterstützung für Eingabegeräte">
Device Drivers ---&gt;
  [*] HID Devices  ---&gt;
    &lt;*&gt;   USB Human Interface Device (full HID) support
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
Wenn sie PCMCIA-Unterstützung für Ihren Laptop benötigen, vergessen Sie nicht
die Unterstütztung für die PCMCIA-Card-Bridge, die sich in Ihrem System
befindet, zu aktivieren.
</p>

<pre caption="Aktivieren von PCMCIA-Unterstützung">
Bus options (PCI etc.) ---&gt;
  PCCARD (PCMCIA/CardBus) support  ---&gt;
    &lt;*&gt; PCCard (PCMCIA/CardBus) support
<comment>(Wählen Sie 16-Bit Unterstützung, wenn Sie planen ältere Karten einzusetzen.)</comment>
    &lt;*&gt;   16-bit PCMCIA support
    [*]   32-bit CardBus support
<comment>(Wählen Sie die relevanten Treiber)</comment>
    *** PC-card bridges ***
    &lt;*&gt; CardBus yenta-compatible bridge support (NEW)
    &lt;*&gt; Cirrus PD6729 compatible bridge support (NEW)
    &lt;*&gt; i82092 compatible bridge support (NEW)
</pre>

<p>
Wenn Sie die Konfiguration des Kernel beendet haben, fahren Sie mit <uri
link="#compiling">Kompilieren und Installieren</uri> fort.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilieren und Installieren</title>
<body>

<p>
Nun da Ihr Kernel konfiguriert ist, ist es Zeit ihn zu kompilieren und zu
installieren. Verlassen Sie die Konfiguration und beginnen Sie mit dem
Kompilierungsvorgang:
</p>

<pre caption="Kompilieren des Kernels">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Wenn der Kernel fertig kompiliert ist, kopieren Sie das Kernel-Image nach
<path>/boot</path>. Verwenden Sie jeglichen Namen, den Sie für Ihren Kernel
passend finden und merken Sie ihn sich, da Sie ihn später benötigen werden,
wenn Sie Ihren Bootloader konfigurieren. Denken Sie daran
<c><keyval id="kernel-name"/></c> durch den Namen und die Version Ihres
Kernels zu ersetzen.
</p>

<pre caption="Installieren des Kernels">
  # <i>cp arch/<keyval id="arch-sub"/>/boot/bzImage /boot/<keyval id="kernel-name"/></i>
</pre>

</body>
</subsection>
<subsection>
<include href="hb-install-initramfs.xml"/>
</subsection>
</section>
<section id="genkernel">
<title>Alternativ: Benutzung von Genkernel</title>
<body>

<p>
Wenn Sie diesen Abschnitt lesen, haben Sie sich entschieden unser
<c>genkernel</c> Skript zu benutzen, um sich Ihren Kernel automatisch
konfigurieren zu lassen.
</p>

<p>
Nun da Ihr Kernelquellbaum installiert ist, ist es an der Zeit Ihren Kernel
automatisch durch das <c>genkernel</c> Skript erstellen zu lassen.
<c>genkernel</c> arbeitet so, dass es einen Kernel konfiguriert, der fast
identisch ist zu denen auf unser Installations-CD. Dies bedeutet, dass wenn
Sie <c>genkernel</c> benutzen um Ihren Kernel zu erstellen, Ihr System generell
alle Hardware beim Booten erkennt, genau wie es unsere Installations-CD tut.
Weil <c>genkernel</c> keine manuelle Kernelkonfiguration erfordert ist es eine
ideale Lösung für die Benutzer, denen bei der Kompilierung eines eigenen
Kernels unwohl ist.
</p>

<p>
Nun lassen Sie uns sehen wie man Genkernel benutzt. Zuerst installieren Sie
<c>genkernel</c>:
</p>

<pre caption="Genkernel emergen">
# <i>emerge genkernel</i>
</pre>

<p>
Kompilieren Sie nun Ihre Kernelquellen mit <c>genkernel all</c>. Seien Sie sich
aber bewusst, dass <c>genkernel</c> einen Kernel kompiliert, der fast alle
Hardware unterstützt, was bedeutet, dass das Kompilieren durchaus eine ganze
Weile dauern kann!
</p>

<p>
Beachten Sie, dass, wenn Ihre Boot-Partition weder ext2 noch ext3 als
Dateisystem benutzt, Sie Ihren Kernel selber mit <c>genkernel --menuconfig
all</c> konfigurieren und Unterstützung für Ihr Dateisystem <c>im</c> Kernel
aktivieren müssen (<e>nicht</e> als Modul). Benutzer von LVM2 möchten vermutlich
das Argument <c>--lvm2</c> hinzufügen.
</p>

<pre caption="Ausführen von Genkernel">
# <i>genkernel all</i>
</pre>

<p>
Sobald <c>genkernel</c> beendet ist, werden ein Kernel, ein voller Satz Module
und eine <e>initial ram disk</e> (initramfs) erstellt sein. Wir werden den
Kernel und initrd benutzen wenn wir später in diesem Handbuch einen Bootloader
konfigurieren. Schreiben Sie den Namen des Kernels und den Ihrer initrd auf, da
Sie diese brauchen werden, wenn Sie die den Bootloader konfigurieren. Die initrd
wird direkt nach dem Booten gestartet um die Hardware Autoerkennung zu starten
(genau wie auf der Installations-CD) bevor Ihr "echtes" System startet.
</p>

<pre caption="Kontrollieren der Namen von Kernel-Image und initrd">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>Kernelmodule</title>

<subsection>
<include href="hb-install-kernelmodules.xml"/>
</subsection>

</section>
</sections>
