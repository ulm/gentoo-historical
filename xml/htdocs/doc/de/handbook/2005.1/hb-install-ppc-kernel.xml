<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- English CVS Version: 1.6 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/2005.1/hb-install-ppc-kernel.xml,v 1.3 2005/09/05 15:47:11 grahl Exp $ -->

<sections>

<version>5.2</version>
<date>2005-08-21</date>

<section>
<title>Setzen der Zeitzone des Systems</title>
<body>

<p>
Zuerst müssen Sie dem System sagen, in welcher Zeitzone es sich befindet.
Suchen Sie Ihre Zeitzone in<path>/usr/share/zoneinfo/</path> und erstellen
Sie dann einen symbolischen Link zu <path>/etc/localtime</path> mit <c>ln</c>.
Bitte vermeiden Sie die <path>/usr/share/zoneinfo/Etc/GMT*</path> Zeitzonen,
denn deren Namen verweisen nicht auf die erwarteten Zonen. Zum Beispiel ist
<path>GMT-8</path> in Wirklichkeit GMT+8.
</p>

<pre caption="Setzen der Zeitzone">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Beispiel: GMT)</comment>
# <i>ln -sf /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Installieren der Quellen</title>
<subsection>
<title>Auswählen eines Kernels</title>
<body>

<p>
Der Kern um den herum alle Distributionen gebaut sind ist der Linux Kernel. Es
ist die Ebene zwischen den Benutzerprogrammen und der Systemhardware. Gentoo
bietet seinen Benutzern verschiedene mögliche Kernelquellen. Eine komplette
Liste mit Beschreibungen finden Sie im <uri link="http://www.gentoo.org/doc/de/gentoo-kernel.xml">
Gentoo Kernel Guide</uri>.
</p>

<p>
Wir empfehlen die Verwendung von <c>vanilla-sources</c> oder 
<c>gentoo-sources</c> unter PPC, beide sind 2.6 Kernel. Der letztgenannte
ist für netzwerklose Installationen verfügbar. Fahren wir mit dem 
Installieren der Kernel Sourcen fort:
</p>

<pre caption="Installieren einer Kernelquelle">
# <i>emerge gentoo-sources</i>
</pre>

<note>
Die Quellen, welche zum Zeitpunkt des 2005.1 Release verfügbar waren, sind 
<c>gentoo-sources-2.6.12-r6</c> und <c>vanilla-sources-2.6.12.2</c>.
</note>

<p>
Wenn Sie einen Blick in <path>/usr/src</path> werfen, sollten Sie einen Symlink
namens <path>linux</path> sehen, der auf Ihre momentane Kernelquelle verweist. 
Wir werden davon ausgehen, dass Ihre installierte Kernelquelle
<c>gentoo-sources-2.6.12-r6</c> ist:
</p>

<pre caption="Anzeigen des Kernelquellen Symlinks">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           22  Mar 18 16:23 /usr/src/linux -&gt; linux-2.6.12-gentoo-r6
</pre>

<p>
Wenn der symbolische Link nicht auf die von Ihnen gewünschte Kernelquelle 
verweist (denken Sie daran, dass <c>linux-2.6.12-gentoo-r6</c> nur ein 
Beispiel ist), dann sollten Sie ihn für den richtigen Kernel anpassen:
</p>

<pre caption="Ändern des Kernelquellen Symlinks">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.6.12-gentoo-r6 linux</i>
</pre>

<p>
Nun ist es Zeit Ihre Kernelquelle zu konfigurieren und zu kompilieren. Sie 
können <c>genkernel</c> verwenden, welches einen generischen
Kernel erstellt, wie er von der Installations-CD verwendet wird. Wir erklären die
"manuelle" Konfiguration jedoch zuerst, denn es ist der beste Weg Ihre Umgebung
zu optimieren.
</p>

<p>
Wenn Sie Ihren Kernel manuell konfigurieren wollen fahren Sie nun mit <uri
link="#manual">Standard: Manuelle Konfiguration</uri> fort. Wenn Sie
<c>genkernel</c> verwenden möchten, dann sollten Sie stattdessen <uri
link="#genkernel">Alternative: Verwendung von genkernel</uri> lesen.
</p>

</body>
</subsection>
</section>
<section id="#manual">
<title>Standard: Manuelle Konfiguration</title>
<subsection>
<title>Einleitung</title>
<body>

<p>
Einen Kernel manuell zu konfigurieren wird oft als der schwierigste Teil
gesehen, den jeder Linux Benutzer meistern muss. Nichts ist weiter von
der Wahrheit entfernt -- nach der Konfiguration von einigen Kerneln werden Sie
sich gar nicht daran erinnern, dass es schwer war ;-)
</p>

<p>
Jedoch, eine Sache <e>ist</e> wahr: Sie müssen Ihr System kennen, wenn Sie
beginnen einen Kernel manuell zu konfigurieren. Die meisten Informationen
können gesammelt werden, indem Sie sich pciutils installieren (<c>emerge 
pciutils</c>), welches <c>lspci</c> enthält. Sie haben nun die Möglichkeit 
<c>lspci</c> innerhalb der chroot Umgebung zu verwenden. Sie können ohne Sorge 
jegliche <e>pcilib</e> Warnungen (wie pcilib: cannot open 
/sys/bus/pci/devices), die <c>lspci</c> auswirft, ignorieren. Alternativ 
können Sie <c>lspci</c> aus einer <e>nicht-chroot</e> Umgebung ausführen. Das 
Resultat ist dasselbe. Sie können auch <c>lsmod</c> ausführen um zu sehen 
welche Kernelmodule die Installations CD verwendet (es kann ihnen einen netten 
Hinweis darauf geben was zu aktivieren ist). Ein weiterer Ort an dem man nach
Hinweisen suchen kann, um festzustellen welche Komponenten aktiviert werden 
sollten, sind die Nachrichtenprotokolle des Kernels vom bisherigen 
erfolgreichen Boot. Tippen Sie <c>dmesg</c> ein um die Kernelnachrichten zu 
betrachten.
</p>

<p>
Gehen Sie nun in Ihr Kernelquellverzeichnis und führen Sie <c>make menuconfig</c>
aus. Dies startet ein ncurses-basierendes Konfigurationsmenü.
</p>

<pre caption="Menuconfig starten">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Ihnen werden verschiedene Konfigurationssektionen präsentiert. Wir listen
zunächst einige Optionen auf, die sie aktivieren müssen (ansonsten wird Gentoo
nicht funktionieren, oder ohne zusätzliche Veränderungen nicht richtig
funktionieren).
</p>

</body>
</subsection>
<subsection>
<title>Aktivieren der benötigten Optionen</title>
<body>

<p>
Zunächst aktivieren Sie die Benutzung von entwicklungs- und experiementellem/n
Code/Treiber(n). Sie brauchen dies, denn ansonsten werden einige wichtige
Codeabschnitte/Treiber nicht erscheinen.
</p>

<pre caption="Selektieren experimenteller/n Codes/Treiber, generelle Einstellungen">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
General setup --->
  [*] Support for hot-pluggable devices
</pre>

<p>
Gehen Sie nun in <c>File Systems</c> und selektieren Sie Unterstützung für die
Dateisysteme die Sie benutzen. Kompilieren Sie diese <e>nicht</e> als Module,
ansonsten wird ihr Gentoo System nicht fähig sein, Ihre Partitionen zu mounten.
Wählen Sie auch <c>/proc file system</c> und <c>Virtual memory</c>. 
Selektieren Sie <e>nicht</e> <c>/dev file system</c>.
</p>

<pre caption="Selektieren notwendiger Dateisysteme">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [ ] /dev file system support (OBSOLETE)
    [*] Virtual memory file system support (former shm fs)

<comment>(Selektieren Sie eine oder mehrere der folgenden Optionen, wie benötigt
von Ihrem System)
</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Wenn Sie PPPoE benutzen um sich ins Internet einzuwählen oder Sie benutzen
ein Einwahl-Modem, brauchen Sie folgende Optionen im Kernel:
</p>

<pre caption="Auswählen PPPoE notwendiger Treiber">
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Die zwei Komprimierungsoptionen werden nicht schaden, aber werden auch nicht
definitiv gebraucht, ebenso die <c>PPP over Ethernet</c> Option, die vielleicht
nur von <c>rp-pppoe</c> verwendet wird, wenn der Kernelmodus PPPoE benutzt wird.
</p>

<p>
Wenn Sie es benötigen, vergessen Sie nicht Unterstützung für Ihre Netzwerkkarte
in Ihren Kernel einzubinden.
</p>

<p>
Benutzer von NewWorld und OldWorld Rechnern werden auch HSF Unterstützung 
haben wollen. OldWorld Benutzer benötigen es um kompilierte Kernel auf die 
MacOS Partition zu kopieren. NewWorld Benutzer benötigen es für die 
Konfiguration der speziellen Apple_Bootstrap Partition.
</p>

<pre caption="Aktivieren von HFS Unterstützung">
File Systems ---&gt;
  [*] HFS Support
</pre>

<p>
Zu diesem Zeitpunkt ist Kernel-Preemption noch instabil unter PPC und kann
Fehler bei der Kompilierung sowie zufällige Segmentierungsfehler hervorrufen.
Es wird Ihnen <e>dringend</e> empfohlen, dass Sie diese Funktion nicht 
verwenden. diese FunktioNachdruck  davon ab diese Funktion zu verwenden.
</p>

<pre caption="Sicherstellen, dass die Preemptible Kerneloption aus ist">
Platform options ---&gt;
  [ ] Preemptible Kernel
</pre>

<p>
Wenn Sie von Firewire starten, dann werden Sie auch diese Optionen aktivieren 
müssen. Wenn Sie Unterstützung einkompilieren wollen, dann müssen Sie diese 
Module und die dazugehörigen Abhängigkeiten zu einem initrd hinzufügen.
</p>

<pre caption="Unterstützung für Firewire Geräte beim Boot aktivieren">
Device Drivers ---&gt;
  IEEE 1394 (FireWire) support ---&gt;
    &lt;*&gt; IEEE 1394 (FireWire) support
    &lt;*&gt;   OHCI-1394 support
    &lt;*&gt;   SBP-2 support (Harddisks etc.)
</pre>

<p>
Wenn Sie von USB starten, dann werden Sie auch diese Optionen aktivieren
müssen. Wenn Sie Unterstützung einkompilieren wollen, dann müssen Sie diese 
Module und die dazugehörigen Abhängigkeiten zu einem initrd hinzufügen.
</p>

<pre caption="Unterstützung für USB Geräte beim Boot aktivieren">
Device Drivers ---&gt;
  USB support ---&gt;
    &lt;*&gt; Support for Host-side USB
    &lt;*&gt;   OHCI HCD support
    &lt;*&gt;   USB Mass Storage support
</pre>

<p>
Deaktivieren Sie Kernel Framebufferunterstützung nicht, da es für einen 
erfolgreichen Start benötigt wird. Wenn Sie einen NVIDIA basierenden 
Chipsatz verwenden, sollten Sie den OpenFirmware Framebuffer verwenden. Wenn
sie einen ATI basierenden Chipsatz verwenden, sollten Sie den Framebuffer 
nach Ihrem Chipsatz wählen (Mach64, Rage128 oder Radeon).
</p>

<pre caption="Einen Framebuffer-Treiber auswählen">
Device Drivers ---&gt;
  Graphics support ---&gt;
    &lt;*&gt; Support for frame buffer devices
    [*] Open Firmware frame buffer device support
    &lt;*&gt; ATI Radeon display support
    &lt;*&gt; ATI Rage128 display support
    &lt;*&gt; ATI Mach64 display support
    Console display driver support ---&gt;
      &lt;*&gt; Framebuffer Console support
</pre>

<note>
If you select more than one framebuffer device, it may default to a less than
optimal driver.  Either use only one framebuffer device or specify which
to use by passing the driver to use to the kernel on boot such as 
<c>video=radeonfb</c>.
</note>

<p>
Wenn Sie die Konfiguration des Kernel beendet haben fahren Sie mit <uri
link="#compiling">Kompilieren und Installieren</uri> fort.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilieren und Installieren</title>
<body>

<p>
Nun da Ihr Kernel konfiguriert ist, ist es Zeit ihn zu kompilieren und zu
installieren. Verlassen Sie die Konfiguration und führen Sie die Kommandos zum
kompilieren des Kernel aus:
</p>

<pre caption="Kompilieren des Kernels">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Wenn der Kernel fertig ist mit der Kompilierung, kopieren Sie das Kernel-Image
nach <path>/boot</path> (stellen Sie sicher, dass es ordnungsgemäß auf dem 
Pegasos eingebunden ist).
</p>

<pre caption="Installieren des Kernels">
<comment>Ersetzen Sie 2.6.12 mit Ihrer Kernelversion</comment>
(Apple/IBM)  # <i>cp vmlinux /boot/kernel-2.6.12</i>
(Pegasos)    # <i>cp arch/ppc/boot/images/zImage.chrp /boot/kernel-2.6.12</i>
</pre>

<p>
Es ist auch weise Ihre Kernelkonfiguration nach <path>/boot</path> zu kopieren,
nur für alle Fälle :)
</p>

<pre caption="Erstellen eines Backups der Kernelkonfiguration ">
# <i>cp .config /boot/config-2.6.12-gentoo-r6</i>
</pre>

<p>
Fahren Sie nun mit dem <uri link="#kernel_modules">Installieren separater
Kernelmodule</uri> fort.
</p>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Installieren separater Kernelmodule</title>
<subsection>
<title>Konfiguration der Module</title>
<body>

<p>
Sie sollten alle Module, die automatisch geladen werden sollen, in
<path>/etc/modules.autoload.d/kernel-2.6</path>
eintragen. Wenn Sie möchten können Sie auch zusätzliche Optionen anhängen.
</p>

<p>
Um alle verfügbaren Module anzuzeigen führen Sie das folgende <c>find</c>
Kommando aus. Vergessen Sie nicht  "&lt;kernel version&gt;" mit der Version
Ihres Kernel zu ersetzen, den Sie gerade kompiliert haben:
</p>

<pre caption="Listen aller verfügbarer Module">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Um zum Beispiel das <c>3c59x.o</c> Modul automatisch zu laden editieren Sie die
<path>kernel-2.6</path> Datei und tragen den Modulnamen ein.
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Fahren Sie nun mit der <uri link="?part=1&amp;chap=8">Konfiguration des
System</uri> fort.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternative: Verwenden von genkernel</title>
<body>

<p>
Wenn Sie diesen Abschnitt lesen, haben Sie sich entschieden unser
<c>genkernel</c> Skript zu benutzen, um sich Ihren Kernel konfigurieren zu
lassen.
</p>

<p>
Nun da Ihr Kernelquellbaum installiert ist, ist es an der Zeit Ihren Kernel
automatisch durch das <c>genkernel</c> Skript erstellen zu lassen. <c>genkernel</c>
arbeitet so, dass es einen Kernel konfiguriert, der fast identisch ist zu denen
auf unser Installations CD. Dies bedeutet, dass wenn Sie <c>genkernel</c> benutzen um
Ihren Kernel zu erstellen, Ihr System generell alle Hardware beim Booten erkennt,
genau wie es unsere Installations CD tut. Weil <c>genkernel</c> keine manuelle
Kernelkonfiguration erfordert ist es eine ideale Lösung für die Benutzer, denen
Unwohl bei der Kompilierung eines eigenen Kernel ist.
</p>

<p>
Nun lassen Sie uns sehen wie man Genkernel benutzt. Zuerst installieren Sie
<c>genkernel</c>:
</p>

<pre caption="genkerne mit emerge installierenl">
# <i>emerge genkernel</i>
</pre>

<p>
Kopieren Sie nun die Kernelkonfiguration, die von der Installations-CD verwendet
wird, an den Platz wo genkernel die Standard Kernelkonfiguration erwartet:
</p>

<pre caption="Kopieren der Kernelkonfiguration der Installations-CD">
# <i>zcat /proc/config.gz > /usr/share/genkernel/ppc/kernel-config-2.6</i>
</pre>

<p>
Wenn Sie Firewire oder USB verwenden um zu booten, müssen Sie Module zum 
initrd hinzufügen. Editieren Sie 
<path>/usr/share/genkernel/ppc/modules_load</path> und ändern Sie 
<c>MODULES_FIREWIRE="ieee1394 ohci1394 sbp2"</c> für Firewire Unterstützung 
oder <c>MODULES_USB="usbcore ohci-hcd ehci-hcd usb-storage"</c> für USB 
Unterstützung.
</p>



<p>
Kompilieren Sie nun Ihre Kernelquellen indem Sie 
<c>genkernel --genzimage all</c> Für Pegasos muss eine andere Konfiguration
verwendet werden und es muss ein zImage anstatt des vmlinux Kernels, der auf
Apple Maschinen verwendet wird, erstellt werden. ausführen. Beachten Sie 
jedoch, dass <c>genkernel</c> einen Kernel kompiliert, der fast jede Hardware
unterstützt, daher wird diese Kompilierung einen relativ langen Zeitraum in
Anspruch nehmen.
</p>

<p>
Beachten Sie, dass wenn Ihre Parititon auf der sich der Kernel befindet nicht 
ext2 oder ext3 als Dateisystem verwendet, Sie möglicherweise manuell Ihren 
Kernel konfigurieren müssen mit <c>genkernel --menuconfig --genzimage all</c>
und Unterstützung für das Dateisystem <e>im</e> Kernel (also <e>nicht</e> als 
Modul) hinzufügen müssen. Benutzer von EVMS2 oder LVM2 werden wahrscheinlich 
die Argumente <c>--evms2</c> oder <c>--lvm2</c> ebenfalls hinzufügen wollen.
</p>

<pre caption="Ausführen von genkernel">
# <i>genkernel --genzimage all</i>
</pre>

<pre caption="Ausführen von genkernel unter Pegasos">
# <i>genkernel --genzimage --kernel-config=/usr/share/genkernel/ppc/Pegasos all</i>
</pre>

<p>
Sowie <c>genkernel</c> abgeschlossen wurde, ist ein Kernel, ein voller Satz 
Module und eine <e>initiale root disk</e> (initrd) erstellt worden. Wir werden 
den Kernel und das initrd verwenden wenn wir einen Bootloader, später in 
diesem Handbuch, konfigurieren. Schreiben Sie sich die Namen des Kernels und 
des initrd auf, denn Sie werden diese benötigen, wenn Sie die 
Konfigurationsdatei für Ihren Bootloader schreiben. Das initrd wird direkt 
nach dem booten gestartet, um Hardware Autoerkennung durchzuführen (genau 
wie die Installations-CD), bevor ein "richtiges" System hochfährt. Stellen Sie
sicher, dass Sie eine Notiz von den benötigten Bootargumenten gemacht haben,
diese sind notwendig für einen erfolgreichen Boot mit genkernel.
</p>

<pre caption="Überprüfen der Namen des erstellten Kernel-Image und initrd">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

<p>
Lassen Sie uns nun einen weiteren Schritt durchführen um das System weiter 
der Installations-CD anzugleichen. Installieren Sie mit emerge <c>coldplug</c>.
Während initrd dafür zuständig ist, die Hardware zu erkennen die 
benötigt wird um Ihr System zu starten, erkennt <c>coldplug</c> automatisch
weitere Hardware. <c>coldplug</c> wird als Paket auf einer der Package CDs
mitgeliefert.
</p>

<pre caption="Installieren und aktivieren von coldplug">
<comment>(Führen Sie dies später während der Installation der GRP Pakete aus)</comment>
# <i>emerge -k coldplug</i>
# <i>rc-update add coldplug boot</i>
</pre>

<p>
Wenn Sie wünschen, dass Ihr System auf Hotplug-Ereignisse reagiert, dann müssen
Sie <c>hotplug</c> installieren und auch einrichten:
</p>

<pre caption="Installieren und aktivieren von hotplug">
# <i>emerge hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>

<p>
Fahren Sie nun mit der <uri link="?part=1&amp;chap=8">Konfiguration des
System</uri> fort.
</p>

</body>
</section>

</sections>
