<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- English CVS Version: 1.24 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/hb-working-portage.xml,v 1.6 2004/05/16 20:23:48 dertobi123 Exp $ -->

<sections>
<section>
<title>Erhalten von Paketinformationen</title>
<subsection>
<title>Der Herr der Hilfsmittel: emerge</title>
<body>

<p>
Das Haupthilfsmittel von Portage, das die meisten User benutzen, ist
<c>emerge</c>. Wir benutzten es schon während der Gentoo Installation und im
vorherigen Kapitel, aber erklärten nur kurz, wie man es benutzt. Dieses Kapitel
geht nun näher auf <c>emerge</c> ein und erklärt Ihnen, wie Sie <c>emerge</c>
für Ihre softwarebezogenen Wünsche einsetzen.
</p>

<p>
<c>emerge</c> ist das Kommando um Softwarepakete zu installieren, zu entfernen,
zu suchen und zu warten. Es ist ein Frontend für <c>ebuild</c>. Wenn Sie Gentoo
Profi werden wollen, werden Sie später noch lernen, wie Sie <c>ebuild</c>
benutzen. Momentan wollen wir uns auf <c>emerge</c> konzentrieren, da es
Funktionen bietet, die <c>ebuild</c> nicht besitzt (Auflösen von
Abhängigkeiten, Durchsuchen des Portage Baumes, etc.).
</p>

<p>
<c>emerge</c>, als das bedeutenste Hilfsmittel für Gentoo Benutzer, hat eine
umfangreiche Manpage, die Sie sich mit <c>man emerge</c> durchlesen können.
Weiter können Sie sich die Optionen schnell mittels <c>emerge --help</c>
anschauen.
</p>

<pre caption="Hilfen zu emerge">
# <i>man emerge</i>
# <i>emerge --help</i>
</pre>

</body>
</subsection>
<subsection>
<title>Der Portage Baum</title>
<body>

<p>
Bevor wir <c>emerge</c> erklären, schauen wir uns zuerst den Portage Baum (oder
engl. Tree) an. Wechseln Sie zu <path>/usr/portage</path> und schauen Sie sich
die vorhandenen Unterverzeichnisse an. Wir benutzen <c>ls --classify</c>, damit
die Verzeichnisse mit einem "/" am Ende angezeigt werden.
</p>

<pre caption="Betrachten des Portage Baums">
# <i>cd /usr/portage; ls --classify</i>
app-admin/       dev-ml/            gnome-libs/     net-print/
app-arch/        dev-perl/          gnome-office/   net-wireless/
app-benchmarks/  dev-php/           header.txt      net-www/
app-cdr/         dev-python/        incoming/       net-zope/
app-crypt/       dev-ruby/          jython/         packages/
app-dicts/       dev-tcltk/         kde-apps/       profiles/
app-doc/         dev-tex/           kde-base/       releases/
app-editors/     dev-util/          kde-i18n/       scripts/
app-emacs/       distfiles/         kde-libs/       sec-policy/
app-emulation/   eclass/            licenses/       skel.ChangeLog
app-games/       experimental/      media-fonts/    skel.ebuild
app-gnustep/     files/             media-gfx/      skel.metadata.xml
app-i18n/        fresco-base/       media-libs/     snapshots/
app-misc/        games-action/      media-plugins/  sys-apps/
app-office/      games-arcade/      media-radio/    sys-build/
app-pda/         games-board/       media-sound/    sys-cluster/
app-portage/     games-emulation/   media-tv/       sys-devel/
app-sci/         games-engines/     media-video/    sys-fs/
app-shells/      games-fps/         metadata/       sys-kernel/
app-text/        games-kids/        net-analyzer/   sys-kmods/
app-vim/         games-misc/        net-apache/     sys-libs/
app-xemacs/      games-mud/         net-dialup/     unix2tcp/
berlin-base/     games-puzzle/      net-dns/        x11-base/
dev-ada/         games-roguelike/   net-firewall/   x11-libs/
dev-cpp/         games-rpg/         net-fs/         x11-misc/
dev-db/          games-server/      net-ftp/        x11-plugins/
dev-dotnet/      games-simulation/  net-im/         x11-terms/
dev-embedded/    games-sports/      net-irc/        x11-themes/lea
dev-games/       games-strategy/    net-libs/       x11-wm/
dev-haskell/     games-util/        net-mail/       xfce-base/
dev-java/        glep/              net-misc/       xfce-extra/
dev-lang/        gnome-apps/        net-nds/
dev-libs/        gnome-base/        net-news/
dev-lisp/        gnome-extra/       net-p2p/
</pre>

<p>
Wie Sie sehen, hat der Portage Baum etliche Unterverzeichnisse. Die meisten
entsprechen den <e>Kategorien</e> in denen die Gentoo Pakete, genannt
<e>ebuilds</e>, residieren. Schauen wir uns nun z. B. <path>app-office</path>
genauer an:
</p>

<pre caption="Betrachten einer Kategorie">
# <i>cd app-office; ls --classify</i>
abiword/     gnotime/   kmymoney2/  ooodi/              plan/     timestamp.x
dia/         gnucash/   koffice/    oooqs/              qhacc/
dia2code/    gnumeric/  lxbank/     openoffice/         sc/
facturalux/  ical/      lyx/        openoffice-bin/     scribus/
gaby/        kbudget/   mdbtools/   openoffice-ximian/  siag/
gnofin/      khacc/     mrproject/  phprojekt/          texmacs/
</pre>

<p>
Innerhalb einer Kategorie sehen Sie die Pakete, die zu dieser Kategorie
gehören, je ein Verzeichnis für jedes Paket. Nun schauen wir uns das
<c>openoffice</c> Paket genauer an:
</p>

<pre caption="Betrachten eines Paketes">
# <i>cd openoffice; ls --classify</i>
ChangeLog  files/        openoffice-1.0.3-r1.ebuild  openoffice-1.1.0-r2.ebuild
Manifest   metadata.xml  openoffice-1.1.0-r1.ebuild  openoffice-1.1.0.ebuild
</pre>

<p>
Sie erinnern sich, dass wir die Gentoo Pakete Ebuilds nannten? In diesem
ausgewählten Verzeichnis sind vier Ebuilds gespeichert. Ihre Namen
unterscheiden sich nur in den Versionsnummern, ansonsten sind sie gleich. Sie
können sich auch den Inhalte eines solchen Ebuils anschauen: Es sind reine
Textskripte. Dies werden wir an dieser Stelle nicht tiefer behandeln, da es für
die Benutzung von Gentoo nicht so wichtig ist.
</p>

<p>
Die weiteren Dateien sind <path>ChangeLog</path> (diese enthält eine
Aufstellung aller Änderungen an den Ebuilds), <path>Manifest</path> (diese
enthält die Prüfsummen und Größen aller Dateien in dem Verzeichnis) und
<path>metadata.xml</path> (diese enthält weitere Informationen über das Paket,
wie die verantwortliche Entwicklergruppen -- genannt <e>herd</e> (dt. Herde) --
und eine umfangreichere Beschreibung).
</p>

<p>
Im Verzeichnis <path>files</path> finden Sie weitere Dateien, die Portage
benötigt: digests (Prüfsummen und Größen der Dateien, die von einer speziellen
Ebuildversion benötigt werden), Patches, Beispielkonfigurationen, etc.
</p>

<pre caption="Betrachten der weiteren Dateien">
# <i>cd files; ls --classify</i>
1.0.3/  digest-openoffice-1.0.3-r1  digest-openoffice-1.1.0-r1
1.1.0/  digest-openoffice-1.1.0     digest-openoffice-1.1.0-r2
# <i>cd 1.1.0; ls --classify</i>
fixed-gcc.patch      ooffice-wrapper-1.3
newstlportfix.patch  openoffice-1.1.0-linux-2.6-fix.patch
no-mozab.patch       openoffice-1.1.0-sparc64-fix.patch
nptl.patch
</pre>

<p>
Wenn wir nun zurück zur Wurzel des Portage Baumes gehen
(<path>/usr/portage</path>), können Sie dort noch weitere nicht zu Kategorien
gehörende Verzeichnisse sehen. Diese werden wir später in diesem Kapitel
besprechen.
</p>

</body>
</subsection>
<subsection>
<title>Suche nach einem Paket</title>
<body>

<p>
Wenn Linux oder Gentoo neu für Sie ist, wissen Sie wahrscheinlich noch nicht,
welches Hilsmittel Sie bei der jeweiligen Arbeit unterstützen kann. Um Sie bei
der Suche zu unterstützen, bietet Ihnen <c>emerge</c> die Möglichkeit das
passende Paket zu suchen. Es gibt zwei Wege um Pakete zu suchen: nach dem
<e>Namen</e> oder nach <e>Namen</e> und <e>Beschreibung</e>
</p>

<p>
Um den Portage Baum nach einem Namen zu durchsuchen, benutzen Sie
<c>emerge search</c>. Zum Beispiel um mehr zu <c>mozilla</c> zu finden:
</p>

<pre caption="Suche in den Namen nach mozilla">
# <i>emerge search mozilla</i>
Searching...   
[ Results for search key : mozilla ]
[ Applications found : 5 ]
<comment>(Um die Lesbarkeit zu wahren, wurde die Ausgabe ein wenig gekürzt)</comment>
*  net-www/mozilla
      Latest version available: 1.5-r1
      Latest version installed: 1.4-r3
      Size of downloaded files: 29,153 kB
      Homepage:    http://www.mozilla.org
      Description: The Mozilla Web Browser

*  net-www/mozilla-firebird
      Latest version available: 0.7
      Latest version installed: [ Not Installed ]
      Size of downloaded files: 37,850 kB
      Homepage:    http://www.mozilla.org/projects/firebird/
      Description: The Mozilla Firebird Web Browser
<comment>(...)</comment>
</pre>

<p>
Falls sie auch die Beschreibungen durchsuchen wollen, benutzen Sie das
<c>--searchdesc</c> Argument:
</p>

<pre caption="Suche auch in den Beschreibungen nach mozilla">
# <i>emerge --searchdesc mozilla</i>
Searching...   
[ Results for search key : mozilla ]
[ Applications found : 10 ]
<comment>(Um die Lesbarkeit zu wahren, wurde ein wenig Ausgabe entfernt)</comment>
*  dev-libs/nss-3.8
      Latest version available: 3.8
      Latest version installed: 3.8
      Size of downloaded files:  2,782 kB
      Homepage:    http://www.mozilla.org/projects/security/pki/nss/
      Description: Mozilla's Netscape Security Services Library that implements PKI support
</pre>

<p>
Wie Sie sehen können, listet Ihnen die Ausgabe von <c>emerge</c> die Kategorie
und den Namen des Paketes, die neueste und die aktuell installierte Version,
die Größe der herunterzuladenden Dateien, die zugehörige Homepage und eine
kurze Beschreibung auf.
</p>

<p>
Sie wollen wissen, wofür die Größe der herunterzuladenden Dateien steht?
Wenn Sie Portage sagen, dass Sie ein Paket installieren wollen, so muss es
natürlich die benötigten Quelldateien (oder vorkompilierte Pakete) haben.
Dafür wird der Inhalt von <path>/usr/portage/distfiles</path> (für die
Quelldateien) oder <path>/usr/portage/packages/All</path> (für vorkompilierte
Pakete) durchsucht, ob die notwendigen Dateien schon vorhanden sind. Ist dies
nicht der Fall, werden die benötigten Dateien heruntergeladen und in den
genannten Verzeichnissen gespeichert.
</p>

<!--
<note>
Die Suche im Portage Baum, besonders wenn <c>- -searchdesc</c> benutzt wird, ist
sehr zeitraubend. Aus diesem Grund gibt es performantere Hilfsmittel. Diese
werden in einem späteren Kapitel <uri link="?part=2&amp;chap=7">Gentoolkit und
weitere Tools</uri> beschrieben.
</note>
-->

</body>
</subsection>
<subsection>
<title>Betrachten des ChangeLogs</title>
<body>

<p>
Als wir den Portage Baum betrachteten, sahen wir, dass für jedes Paket eine
ChangeLog Datei existiert. Sie können sich aus dem ChangeLog die Änderungen
zwischen der verfügbaren und der installierten Version mit <c>emerge</c>
anzeigen lassen. Benutzen Sie die <c>--pretend --changelog</c> (oder kurz
<c>-pl</c>). Zum Illustrieren betrachten wir den ChangeLog von <c>gnumeric</c>:
</p>

<pre caption="Betrachten der ChangeLog Einträge von gnumeric">
# <i>emerge --pretend --changelog gnumeric</i>
<comment>(Um die Lesbarkeit zu wahren, wurde die Ausgabe ein wenig gekürzt)</comment>
*gnumeric-1.2.2

27 Nov 2003; foser &lt;foser@gentoo.org&gt; gnumeric-1.2.2.ebuild :
New release, requested in #34492
updated deps

12 Nov 2003; Jason Wever &lt;weeve@gentoo.org&gt; gnumeric-1.2.0.ebuild:
Marked stable on sparc, fixes bug #32405.

14 Oct 2003; Jason Wever &lt;weeve@gentoo.org&gt; gnumeric-1.0.8.ebuild:
Added ~sparc keyword.  Fixes bug #31150.
</pre>

</body>
</subsection>
</section>
<section>
<title>Aktualisieren von Portage</title>
<subsection>
<title>Einführung</title>
<body>

<p>
Den Portage Baum zu durchsuchen, ist nett, aber wenn Sie ihn nicht regelmäßig
aktualisieren, sitzen Sie fest mit den auf Ihrem System vorhandenen Paketen und
Versionen. Dies bedeutet, dass Ihr System mit der Zeit veraltet, dass Sie
Fehlerbereinigungen und Heilmittel für mögliche Sicherheitslücken verpassen.
</p>

<p>
Es gibt verschiedene Wege den Portage Baum zu aktualisieren. Am verbreitesten
ist der Weg über einen unserer <uri link="http://www.gentoo.org/main/en/mirrors.xml">
rsync Mirror</uri>. Der Alternativweg führt über einen Portage Schnappschuss
(notwendig, falls Sie keinen rsync Mirror erreichen können, möglicherweise
wegen einer Firewall oder weil der Rechner keinen Netzzugang hat.)
</p>

</body>
</subsection>
<subsection>
<title>Auswahl eines Mirrors für rsync</title>
<body>

<p>
Wir raten Ihnen als erstes einen schnellen und nahegelegenen
<uri link="http://www.gentoo.org/main/en/mirrors.xml">Mirror</uri> auszuwählen.
Dies können Sie manuell (über das Setzen der <c>SYNC</c> Variable in
<path>/etc/make.conf</path>) oder auch automatisch mit <c>mirrorselect</c>
machen. Da die <c>SYNC</c> Variable später behandelt wird, werden wir uns nun
mit <c>mirrorselect</c> befassen. Zuerst installieren wir <c>mirrorselect</c>
mit emerge:
</p>

<pre caption="Installieren von mirrorselect">
# <i>emerge --usepkg mirrorselect</i>
</pre>

<p>
Nun starten Sie <c>mirrorselect</c> um automatisch einen Mirror zu wählen.
(Es wird nebenbei auch ein Mirror für die Quelldateien eingerichtet.)
</p>

<pre caption="Aufrufen von mirrorselect">
# <i>mirrorselect -a -s3</i>
</pre>

</body>
</subsection>
<subsection>
<title>Aktualisieren von Portage</title>
<body>

<p>
Um Portage mittels rsync zu aktualisieren, rufen Sie einfach <c>emerge sync</c>
auf:
</p>

<pre caption="Aktualisieren von Portage mittels emerge sync">
# <i>emerge sync</i>
</pre>

<p>
Falls dies fehlschlägt (wegen Netzwerkproblemen oder einer Firewall), können
Sie <c>emerge-webrsync</c> versuchen, dabei wird ein Schnappschuss des Portage
Baumes mit <c>wget</c> heruntergeladen. Dies bedeutet auch, dass Sie einen
Proxy benutzen können, falls Sie es wünschen. Die Einstellungen dazu besprachen
wir schon während der Gentoo Installation.
</p>

<pre caption="Aktualisieren von Portage mittels emerge-webrsync">
# <i>emerge-webrsync</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Wartung von Software</title>
<subsection>
<title>Selbstgebaut oder Vorkompiliert?</title>
<body>

<p>
Gentoo bietet Ebuilds, die Gentoo Pakete wenn Sie wollen. Wenn Sie ein Ebuild
installieren wollen, können Sie zwischen <e>selbstgebauten</e> und
<e>vorkompilierten</e> Paketen wählen. Was sind nun die Vor- und Nachteile
dieser beiden Ansätze, und können sie nebeneinander benutzt werden?
</p>

<p>
Wie sie bestimmt schon erwartet haben, benötigt das Selberbauen von Paketen
sehr viel Zeit (besonders wenn Sie große Pakete, wie
<uri link="http://www.kde.org">KDE</uri>,
<uri link="http://www.openoffice.org">OpenOffice.org</uri>, usw.
auf kleinen Rechnern bauen wollen). Wenn Sie selbst kompilieren, können Sie
mittels der <c>USE</c> Einstellungen das Paket an Ihre Bedürfnisse anpassen.
Natürlich können Sie auch die Optimiereinstellungen (in den <c>CFLAGS</c>
und <c>CXXFLAGS</c> Variablen) anpassen.
</p>

<p>
Vorkompilierte Pakete beschleunigen die Installationszeit (da keine Zeit mehr
zum Übersetzen benötigt wird), dafür verlieren Sie aber die Vorteile, die Ihnen
die <c>USE</c> Einstellungen und die <c>CFLAGS</c> &amp; <c>CXXFLAGS</c>
Variablen bieten.
</p>

<p>
Wie vorher schon erwähnt, werden die vorkompilierten Pakete im Verzeichnis
<path>/usr/portage/packages/All</path> gespeichert, während der Quellcode
im Verzeichnis <path>/usr/portage/distfiles</path> liegt. Wenn Sie mit der
Installation eines Paketes abgeschlossen haben, können Sie das Paket oder den
Quelltext aus dem genannten Verzeichnis wieder löschen. Trotzdem kann es sein,
dass Sie es aufbewahren wollen, um das Paket gegebenenfalls neu installieren zu
können (sonst müssten Sie es noch einmal herunterladen).
</p>

</body>
</subsection>
<subsection>
<title>Installation der Software aus den Quellen</title>
<body>

<p>
Okay, genug geredet, kommen wir zur Sache:
Um ein Paket zu installieren benutzen wir das <c>emerge</c> Kommando. Falls
Sie keine vorkompilierten Pakete benutzen wollen, können Sie einfach
<c>emerge &lt;Paketname&gt;</c> oder
<c>emerge &lt;Kategorie&gt;/&lt;Packetname&gt;</c> benutzen. Beispielsweise
installieren wir <c>gnumeric</c>:
</p>

<pre caption="Emergen von gnumeric">
# <i>emerge gnumeric</i>
</pre>

<p>
Dies lädt und entpackt den Quellcode, übersetzt das Paket und installiert es
auf Ihrem System. Vorher werden alle benötigten Pakete erstellt. Wenn Sie sehen
möchten, welche Pakete dies sind, benutzen Sie die <c>--pretend</c> Option
(oder kurz <c>-p</c>):
</p>

<pre caption="Vorgetäuschtes Erstellen von gnumeric">
# <i>emerge --pretend gnumeric</i>
</pre>

<p>
Wenn Sie den Quellcode des Paketes und alle benötigten Pakete herunterladen,
das Paket aber nicht erstellen möchten, benutzen Sie die <c>--fetchonly</c>
Option (oder kurz <c>-f</c>):
</p>

<pre caption="Herunterladen der Quellen für gnumeric">
# <i>emerge --fetchonly gnumeric</i>
</pre>

<p>
Wenn Sie sehen möchten, woher <c>emerge</c> die Quellen lädt, kombinieren Sie
die <c>--fetchonly</c> und die <c>--pretend</c> Optionen:
</p>

<pre caption="Anzeige der URLs der Quellen für gnumeric">
# <i>emerge --fetchonly --pretend gnumeric</i>
</pre>

<p>
Sie können auch eine spezielle Version eines Paketes zum Installieren
auswählen. Wenn Sie (aus welchem Grund auch immer :) zum Beispiel eine
gnumeric Version älter als 1.2 installieren möchten, tippen Sie:
</p>

<pre caption="Installieren einer speziellen gnumeric Version">
# <i>emerge "&lt;gnumeric-1.2"</i>
</pre>

<p>
Selbstverständlich funktionieren auch "&gt;" (neuere Version) und "="
(genau die Version).
</p>

</body>
</subsection>
<subsection>
<title>Installieren von vorgefertigten Paketen</title>
<body>

<p>
Wenn Sie ein vorkompiliertes Paket installieren möchten, benutzen Sie die
<c>--usepkg</c> Option (oder kurz <c>-k</c>). Damit werden die verfügbaren
Binärpakete in <path>/usr/portage/packages/All</path> benutzt, <e>wenn</e>
die Version des Paketes und die der zu installierenden Anwendung
übereinstimmen.
</p>

<pre caption="Installieren eines vorkompilierten gnumeric Paketes">
# <i>emerge --usepkg gnumeric</i>
</pre>

<p>
Falls Sie das Binärpaket auch benutzen möchten, wenn die Versionen nicht
übereinstimmen, benutzen Sie die Option <c>--usepkgonly</c> (oder kurz
<c>-K</c>).
</p>

<pre caption="Installieren des vorkompilierten gnumeric Paketes">
# <i>emerge --usepkgonly gnumeric</i>
</pre>

<p>
Wenn das vorkompilierte Paket noch nicht auf Ihrem Rechner ist, können Sie es
mit <c>emerge</c> von dem Mirror heruntergeladen, der in der Variable
<c>PORTAGE_BINHOST</c> in <path>/etc/make.conf</path> definiert ist.
</p>

<p>
Falls das Binärpaket auf Ihrem Rechner noch nicht existiert, können Sie es mit
<c>--getbinpkg</c> (oder kurz <c>-g</c>) herunterzuladen.
</p>

<pre caption="Herunterladen und Installieren eines vorkompilierten gnumeric Paketes">
# <i>emerge --getbinpkg gnumeric</i>
</pre>

<p>
Dies wird das Paket und paketrelevante Informationen herunterladen und
installieren; es werden auch die benötigten Pakete beachtet. Um zu sehen,
welche vorausgesetzten Pakete installiert werden, benutzen Sie die
<c>--pretend</c> Option (oder kurz <c>-p</c>):
</p>

<pre caption="Vorgetäuschtes Herunterladen des vorkompilierten gnumeric Paketes">
# <i>emerge --getbinpkg --pretend gnumeric</i>
</pre>

<p>
Sie können auch bestimmen, dass ein vorkompiliertes Paket (und die
paketrelevanten Informationen) heruntergeladen wird, <e>ohne</e> die
Informationen über Ihr System zu prüfen und <e>ohne</e> (eventuell) schon
vorhandene vorkompilierte Pakete auf Ihrem System zu benutzen, dazu benutzen
Sie die <c>--getbinpkgonly</c> Option (oder kurz <c>-G</c>):
</p>

<pre caption="Installieren eines vorkompilierten Paketes ohne Berücksichtigung lokaler Informationen">
# <i>emerge --getbinpkgonly gnumeric</i>
</pre>

<p>
Sie können sich auch für eine bestimmt Version eines Paketes entscheiden. Wenn
Sie zum Beispiel eine gnumeric Version älter als 1.2 (warum auch immer :)
installieren möchten, tippen Sie:
</p>

<pre caption="Installieren einer bestimmten gnumeric Version">
# <i>emerge --usepkg "&lt;gnumeric-1.2"</i>
</pre>

<p>
Selbstverständlich funktionieren auch "&gt;" (neuere Version) und "=" (die
genaue Version).
</p>


</body>
</subsection>
<subsection>
<title>Mit Abhängigkeiten umgehen</title>
<body>

<p>
Portage biete eine weitgehende Unterstützung um mit Abhängigkeiten fertig zu
werden. Obwohl Sie im Allgemeinen gar nicht darüber nachdenken müssen (da
Abhängigkeiten von Portage automatisch aufgelöst werden), möchten vielleicht
doch einige Benutzer wissen, wie sie mit <c>emerge</c> und Abhängigkeiten
umgehen können.
</p>

<p>
Wenn Sie Portage zum Beispiel glauben machen wollen, dass noch keine der
Abhängigkeiten eines Paketes installiert sind, können Sie <c>--emptytree</c>
(oder kurz <c>-e</c>) benutzen. Dies ist zusammen mit <c>--pretend</c> sinnvoll
um sich den kompletten Baum von Abhängigkeiten für ein bestimmtes Paket
anzeigen zu lassen. Ohne <c>--pretend</c> wird <c>emerge</c> jedes einzelne
Paket (neu)kompilieren.
</p>

<pre caption="Anzeigen aller Abhängigkeiten von gnumeric">
# <i>emerge --emptytree --pretend gnumeric</i>
</pre>

<p>
Eine weitere Option ist <c>--nodeps</c>. Portage wird dann versuchen das
gegebene Paket zu installieren ohne auf vorausgesetzte Pakete zu achten. Klar
ist, dass dies zu Fehlern führen kann.
</p>

<pre caption="Installieren von gnumeric ohne auf Abhängigkeiten zu achten">
# <i>emerge --nodeps gnumeric</i>
</pre>

<p>
Das Gegenteil von <c>--nodeps</c> ist <c>--onlydeps</c>. Damit wird Portage
alle vorausgesetzen Pakete installieren -- das Paket selber jedoch nicht.
</p>

<pre caption="Installieren der vorausgestzten Pakete von gnumeric">
# <i>emerge --onlydeps gnumeric</i>
</pre>

</body>
</subsection>
<subsection>
<title>Updaten Ihres Systems</title>
<body>

<p>
Portage kennt zwei besondere und mit Namen versehene Mengen von
Softwarepaketen: <e>system</e> und <e>world</e>. Die erste lernten Sie schon
während der Installation kennen, falls Sie keine <e>stage3</e> Installation
vorgenommen haben. Zu Erinnerung: <e>system</e> ist die Sammlung von
<e>core</e> Paketen, die notwendig für ein arbeitsfähiges Gentoosystem sind.
</p>

<p>
In <e>world</e> ist die Software zusammengefasst, die Sie selbst auf Ihrem
System installiert haben zuzüglich den <e>system</e> Paketen. Mit anderen
Worten: jedes Mal, wenn Sie ein Paket mit <c>emerge &lt;Paketname&gt;</c>
installieren, wird der <c>&lt;Paketname&gt;</c> in der <e>world</e> Datei
(<path>/var/cache/edb/world</path>) gespeichert. Dabei installierte
vorausgesetzte Pakete werden nicht in der <e>world</e> Datei gespeichert, aber
dazu kommen wir später.
</p>

<p>
Wenn Sie die system Pakete updaten wollen, benutzen Sie die <c>--update</c>
Option (oder kurz <c>-u</c>):
</p>

<pre caption="Updaten der system Pakete">
# <i>emerge --update system</i>
</pre>

<p>
Ein gleicher Ansatz kann auch für die world Pakete benutzt werden:
</p>

<pre caption="Updaten Ihres gesamten Systems">
# <i>emerge --update world</i>
</pre>

<p>
Wieder gilt: Wenn Sie sich zuerst ansehen wollen, was <c>emerge</c>
updaten wird, benutzen Sie die <c>--pretend</c> Option zusammen mit der
<c>--update</c> Option:
</p>

<pre caption="Vorgetäuschtes Updaten Ihres gesamten Systems">
# <i>emerge --pretend --update world</i>
<comment>(Um die Lesbarkeit zu wahren, wurde ein wenig Ausgabe entfernt)</comment>
[ebuild     U ] net-misc/wget-1.9-r1 [1.9]
[ebuild     UD] media-video/dvdauthor-0.5.0 [0.5.3]
[ebuild     U ] net-analyzer/ethereal-0.9.16 [0.9.14]
</pre>

<p>
Rechts neben dem Wort "ebuild" sehen Sie einen Buchstabe (oder mehere
Buchstaben). Diese geben weiter Informationen über das Paket:
</p>

<ul>
  <li>
    <e>B</e> (blocks) Das Paket links blockiert die Installation
    des rechten Paketes
  </li>
  <li>
    <e>N</e> (new) Das Paket ist neu für Ihr System und wird zum ersten
    Mal installiert
  </li>
  <li>
    <e>R</e> (reemerge) Das Paket ist nicht neu, muss aber nochmal emerged
    werden
  </li>
  <li>
    <e>F</e> (fetch) Das Paket erfordert, dass Sie den Quellcode manuell
    herunterladen müssen (zum Beispiel aus Lizenzgründen)
  </li>
  <li>
    <e>U</e> (update) Das Paket existiert schon auf Ihrem System und wird
    aktualisiert
  </li>
  <li>
    <e>UD</e> (downgrade) Das Paket existiert schon auf Ihrem System und es
    wird eine Vorgängerversion installiert
  </li>
  <li>
    <e>U-</e> (slot warning) Von dem geslotteten Paket auf Ihrem System ist
    bekannt, dass es mit einer bestimmten anderen Version nicht koexistieren
    kann. Das Update wird installiert und die ältere Version wird entfernt.
  </li>
</ul>

<p>
In bestimmten Fällen kann ein Update auch ein Downgrade (das heißt eine
ältere Version ersetzt eine neuere) bedeuten. Falls Sie nicht möchten, dass so
etwas passiert, können Sie die <c>--upgradeonly</c> Option (oder kurz
<c>-U</c>) benutzen:
</p>

<pre caption="Upgraden Ihres gesamten Systems">
# <i>emerge --update --upgradeonly world</i>
</pre>

<p>
Auch wenn wir hier gerade über <e>system</e> und <e>world</e> reden, so gelten
dieses Aussagen auch für einzelne Softwarepakete.
</p>

</body>
</subsection>
<subsection>
<title>Entfernen von Software</title>
<body>

<p>
Wenn Sie Software von Ihrem System entfernen wollen, können Sie dazu die
<c>unmerge</c> Option (oder kurz <c>-C</c> - ein großes C) benutzen:
</p>

<pre caption="Deinstallieren von Software">
# <i>emerge unmerge gnumeric</i>
</pre>

<p>
Falls Sie nur testen wollen, welche Software entfernt wird, können Sie wieder
<c>--pretend</c> benutzen:
</p>

<pre caption="Vorgetäuschtes Entfernen von Software">
# <i>emerge --pretend unmerge gnumeric</i>
</pre>

<warn>
Portage überprüft nicht, ob ein Paket Voraussetzung für ein anderes
installiertes Paket ist. Desweiteren warnt Portage Sie nicht, wenn das Paket
zu <e>system</e> gehört, also überlebenswichtig für Ihr System sein kann!
</warn>

<p>
Während des unmergens, werden Sie eine lange Liste von Dateinamen sehen, die zu
dem Paket gehören. Einige dieser Dateien werden links vom Dateinamen eine
Markierung tragen. Die Markierungen <c>!mtime</c>, <c>!empty</c>, und
<c>cfgpro</c> stehen für verschiedene Gründe, weshalb die Datei oder der
Ordner nicht entfernt werden. Dateien ohne eine dieser Markierungen wurden
erfolgreich gelöscht. Die drei Markierungen erscheinen aus den folgenden
Gründen:
</p>

<ul>
  <li>
    <c>!mtime</c> : Die angegeben Datei wurde nach der Installation entweder
    von Ihnen oder von einem Programm geändert
  </li>
  <li>
    <c>!empty</c> : Das Verzeichnis ist nicht leer
  </li>
  <li>
    <c>cfgpro</c> : Ein weiteres Paket erhebt Anspruch auf diese Datei 
  </li>
</ul>

</body>
</subsection>
</section>
<section>
<title>Software Verfügbarkeit</title>
<subsection>
<title>ARCH oder nicht?</title>
<body>

<p>
Gentoo unterscheidet Pakete in zwei verschiedene Stadien <e>ARCH</e> und
<e>~ARCH</e>. Nehmen Sie das nicht wörtlich: Die Stadien hängen von Ihrer
Architektur ab. Mit anderen Worten: Sie verwenden für ein x86-basiertes
System <e>x86</e> und <e>~x86</e>, für ein ppc-basiertes System <e>ppc</e>
und <e>~ppc</e> usw.
</p>

<p>
Das <e>~ARCH</e> Stadium bedeutet, dass das Paket beim verantwortlichen
Entwickler arbeitet, es aber noch nicht ausreichend getestet wurde um in
<e>ARCH</e> plaziert zu werden. <e>~ARCH</e> Pakete wechseln gewöhnlich zu
<e>ARCH</e> wenn sie für einen gewissen Zeitraum fehlerfrei sind.
</p>

<p>
Ihr System ist voreingestellt auf <e>ARCH</e> Pakete. Wenn Sie jedoch immer die
neuesten Pakete haben möchten und auch nicht davor zurück schrecken, dass diese
hin und wieder mal nicht funktionieren, wissen, wie mit einem zerstörten System
umzugehen ist, gerne Fehlerberichte über <uri link="http://bugs.gentoo.org">
bugs.gentoo.org</uri> schicken, können Sie sich für <e>~ARCH</e> Pakete
entscheiden. Um Ihr System zu einem <e>~ARCH</e>-System zu machen, setzen Sie
die <c>ACCEPT_KEYWORDS</c> Variable in <path>/etc/make.conf</path> auf
<e>~ARCH</e> (also z.B. für x86-basierte Systeme: <e>~x86</e>, etc.).
</p>

<p>
Beachten Sie jedoch, dass es nicht trivial (vielleicht sogar unmöglich) sein
kann, von <e>ARCH</e> zu <e>~ARCH</e> und wieder zurück zu wechseln.
</p>

<p>
Wenn Sie nun Ihr System updaten, werden Sie feststellen, dass <e>sehr
viele</e> Pakete aktualisiert werden wollen!
</p>

</body>
</subsection>
<subsection>
<title>Maskierte Pakete</title>
<body>

<p>
Wenn Sie ein Paket installieren wollen, kann es passieren, dass folgende
Nachricht erscheint:
</p>

<pre caption="Mitteilung über maskierte Pakete">
Calculating dependencies
!!! <comment>all ebuilds that could satisfy </comment>&lt;Ihr Paket&gt;<comment> have been masked.</comment>
</pre>

<p>
Ein Paket kann aus den folgenden 2 Gründen maskiert sein:
</p>

<ol>
  <li>Das Paket ist in <e>~ARCH</e>, Sie haben aber <e>ARCH</e> eingestellt</li>
  <li>Das Paket ist ausdrücklich hart-maskiert</li>
</ol>

<p>
Wenn ein Paket aus dem ersten Grund maskiert ist, Sie es aber <e>unbedingt</e>
installieren möchten (wissen, da <e>sind</e> Gründe, weshalb es nicht in
<e>ARCH</e> ist), so können sie kurzzeitig <e>~ARCH</e> Pakete akzeptieren:
</p>

<pre caption="Kurzzeitiges Akzeptiern von ~ARCH Paketen">
# <i>ACCEPT_KEYWORDS="~x86" emerge gnumeric</i>
</pre>

<p>
Ein Paket wird als hart-maskiert bezeichnet, wenn es in
<path>/usr/portage/profiles/package.mask</path> eingetragen ist. Wenn Sie diese
Datei lesen, können Sie auch den Grund erfahren, warum das Paket hart-maskiert
wurde (gewöhnlich gibt es einen Kommentar zu jedem Paket). Wenn Sie ein solches
Paket trotzdem installieren möchten (ungeachtet aller Warnung von uns bezüglich
"zerstörten Systemen", "beeinträchtigen anderen Paketen", "frühen Versionen"),
erstellen Sie die Datei <path>/etc/portage/package.unmask</path> und fügen Sie
das Paket dieser Datei hinzu (benutzen Sie dazu das gleiche Format wie es in
<path>/usr/portage/profiles/package.mask</path> benutzt wird).
</p>

<p>
Verändern Sie <e>nicht</e> <path>/usr/portage/profiles/package.mask</path>, da
alle Änderungen von der nächsten Aktualisierung Ihres Portage Baumes
rückgängig gemacht werden würden. Wenn Sie selbst ein Paket hart-maskieren
möchten, dann erstellen Sie die Datei <path>/etc/portage/package.mask</path>
und fügen das betreffende Paket dieser hinzu (benutzen Sie dazu das gleiche
Format wie oben).
</p>

<!--
<p>
Ein weiterer Trick zum Umgehen des "maskierte Pakete" Problems ist das Paket
über seinen gesamten Pfad zu installieren. Dies ignoriert sowohl die
<c>ACCEPT_KEYWORD</c> Einstellungen als auch die <path>package.mask</path>
Liste.
</p>

<pre caption="Installieren eines Paketes ohne Check des Stadiums / der Maskierung">
# <i>emerge /usr/portage/app-office/gnumeric/gnumeric-1.2.0.ebuild</i>
</pre>
-->

</body>
</subsection>
<subsection>
<title>Blockierende Pakete</title>
<body>

<p>
Sie kommen in eine Situation, wo Sie die folgende Fehlermeldung sehen:
</p>

<pre caption="Blockierende Pakete">
[blocks B     ] gnome-base/bonobo-activation (from pkg gnome-base/libbonobo-2.4.0)
</pre>

<p>
Im obigen Beispiel blockiert das Paket <c>bonobo-activation</c> das Emergen
von <c>libbonobo</c>. Um dies aufzulösen, entfernen Sie einfach das
<c>bonobo-activation</c> Paket und fahren dann fort:
</p>

<pre caption="Auflösen einer Blockade">
# <i>emerge unmerge bonobo-activation</i>
</pre>

</body>
</subsection>
</section>
</sections>
