<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/hb-install-mips-kernel.xml,v 1.12 2008/08/04 16:55:23 grahl Exp $ -->

<sections>

<version>9.0</version>
<date>2008-04-01</date>

<section>
<title>Setzen der Zeitzone des Systems</title>
<body>

<p>
Zuerst müssen Sie dem System sagen, in welcher Zeitzone es sich befindet.
Suchen Sie Ihre Zeitzone in <path>/usr/share/zoneinfo</path> und kopieren Sie
diese nach <path>/etc/localtime</path>. Bitte vermeiden Sie die
<path>/usr/share/zoneinfo/Etc/GMT*</path> Zeitzonen, denn deren Namen verweisen
nicht auf die erwarteten Zonen. Zum Beispiel ist <path>GMT-8</path> in
Wirklichkeit GMT+8.
</p>

<pre caption="Setzen der Zeitzone auf GMT">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Wenn Sie zum Beispiel GMT verwenden wollen)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>

<section>
<title>Installieren der Quellen</title>
<subsection>
<title>Auswählen eines Kernels</title>
<body>

<p>
Der Kern um den herum alle Distributionen gebaut sind ist der Linux Kernel. Es
ist die Ebene zwischen den Benutzerprogrammen und der Systemhardware. Gentoo
bietet seinen Benutzern verschiedene mögliche Kernelquellen. Eine komplette
Liste mit Beschreibungen finden Sie im <uri
link="/doc/de/gentoo-kernel.xml">Gentoo Kernel Guide</uri>.
</p>

<p>
Für MIPS basierende Systeme stehen nur die Kernelquellen <c>mips-sources</c>
zur Verfügung. Dieser Satz von Patches unterscheidet sich von dem welcher für
andere Architekturen verfügbar ist insofern dass er viele Patches spezifisch
für die MIPS-Architektur enthält.
</p>

<pre caption="Emergen der Kernelquellen">
# <i>emerge mips-sources</i>
</pre>

<impo>
Auf dem Origin 200/2000, Indigo2 Impact (R10000), Octane/Octane2 und O2 wird ein
64Bit-Kernel benötigt. Für diese Rechner sollten Sie <c>emerge kgcc64</c>
ausführenum einen Cross-Compiler zu erstellen für die Übersetzung eines
64Bit-Kernels.
</impo>

<pre caption="Installation von kgcc64">
# <i>emerge kgcc64</i>
</pre>

<p>
Wenn Sie einen Blick in <path>/usr/src</path> werfen, sollten Sie einen Symlink
sehen, genannt <path>linux</path>, der auf Ihre Kernelquelle verweist. In
diesem Fall verweist die Kernelquelle auf <c>mips-sources-<keyval
id="kernel-version"/></c>. Beachten Sie, dass Ihre Version davon abweichen kann.
</p>

<pre caption="Anzeigen des Kernelquellen Symlinks">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-<keyval id="kernel-version"/>
</pre>

<p>
Nun ist es Zeit Ihre Kernelquelle zu konfigurieren und zu kompilieren.
</p>

</body>
</subsection>
</section>
<section>
<title>Kompilierung &amp; Installation des Kernels</title>
<subsection>
<title>Einführung</title>
<body>

<p>
Bisher wurde an diesem Punkt eine manuelle Konfiguration für das Aufsetzen
eines Kernels behandelt. Dies wurde unmöglich durch die Anzahl der Systeme
die wir nun unterstützen. Dieser Abschnitt beschreibt verschiedene Quellen
für Beispiele zur Kernelkonfiguration.
</p>

</body>
</subsection>
<subsection>
<title>Verwendung von Beispielkonfigurationen in den Kernelquellen</title>
<body>

<p>
Für viele der Systeme gibt es .config Beispiele, versteckt in den Kernelquellen.
Auf diese Weise werden nicht für alle Systeme Konfigurationen geliefert. Solche
für die es zutrifft können mit den Befehlen in der folgenden Tabelle
konfiguriert werden.
</p>

<table>
<tr>
  <th>System</th>
  <th>Konfigurationsbefehl</th>
</tr>
<tr>
  <ti>Cobalt Server</ti>
  <ti><c>make cobalt_defconfig</c></ti>
</tr>
<tr>
  <ti>Indy, Indigo2 (R4k), Challenge S</ti>
  <ti><c>make ip22_defconfig</c></ti>
</tr>
<tr>
  <ti>Origin 200/2000</ti>
  <ti><c>make ip27_defconfig</c></ti>
</tr>
<tr>
  <ti>Indigo2 Impact (R10k)</ti>
  <ti>
    <c>make ip28_defconfig</c>
  </ti>
</tr>
<tr>
  <ti>O2</ti>
  <ti><c>make ip32_defconfig</c></ti>
</tr>
</table>

</body>
</subsection>

<subsection>
<title>
Verwendung der laufenden Kernelkonfiguration von
Installationsmedium
</title>
<body>

<p>
Alle Images zur Installation von Gentoo enthalten eine Option zur
Kernelkonfiguration als Teil des Image selbst, verfügbar als
<path>/proc/config.gz</path>. Dies kann in vielen Fällen verwendet werden. Es
funktioniert am Besten wenn Ihre Kernelquellen sehr ähnlich sind zu denen des
Kernels der momentan ausgeführt wird. Um diese Konfiguration zu extrahieren
lassen Sie es einfach wie folgt durch <c>zcat</c> laufen.
</p>

<pre caption="Entpacken von .config aus /proc/config.gz">
# <i>zcat /proc/config.gz > .config</i>
</pre>

<impo>
Diese Kernelkonfiguration wurde für ein Netboot-Image erstellt. Das bedeutet
es wird erwarten ein root-Dateisystem in der Nähe zu finden, entweder als ein
Verzeichnis für initramfs oder ein Loopback-Gerät für initrd. Wenn Sie
wie folgt <c>make menuconfig</c> ausführen sollten Sie nicht vergessen in
General Setup die Option für initramfs zu deaktivieren.
</impo>

</body>
</subsection>

<subsection>
<title>Die Datenbank zur Hardwarekompatibilität</title>
<body>

<p>
Als Hilfe für die Benutzer beim Aufspüren der notwendigen Einstellungen wurde
eine Datenbank zur Hardwarekompatibilität eingerichtet. Diese Datenbank listet
Unterstützung für zahlreiche MIPS-Geräte auf und erlaubt Benutzern als
funktionstüchtig bekannte Kernelkonfigurationen beizusteuern. Die Adresse
für diese Seite ist
<uri>http://stuartl.longlandclan.hopto.org/gentoo/mips</uri>.
</p>

<p>
Wenn Sie diesen Dienst hilfreich finden sind Sie dazu eingeladen Ihre Notizen
und .config Dateien dazu beizutragen sodass andere von Ihrer Erfahrung
profitieren können. Es sollte jedoch angemerkt werden dass es keine Garantie
dafür gibt dass die Konfigurationsdateien die Sie von dieser Seite herunterladen
auch funktionieren werden.
</p>

</body>
</subsection>

<subsection>
<title>Anpassung der Konfiguration an Ihre Anforderungen</title>
<body>

<p>
Sowie Sie eine Konfiguration gefunden haben, müssen Sie diese herunterladen und
in Ihr Kernerlquellverzeichnis verschieben. Benennen Sie diese um in
<path>.config</path>. Nun können Sie <c>make oldconfig</c> ausführen um alles
auf den neuesten Stand zu bringen und weitere Veränderungen an der
Konfiguration vorzunehmen bevor die Kompilierung beginnt.
</p>

<pre caption="Konfigurieren des Kernels">
# <i>cd /usr/src/linux</i>
# <i>cp /pfad/zur/beispielskonfiguration .config</i>
# <i>make oldconfig</i>
<comment>(Drücken Sie einfach EINGABE bei jeder Anfrage und die Standardeinstellungen zu akzeptieren. Anpassungen kommen später)</comment>
# <i>make menuconfig</i>
</pre>

<impo>
In der Kernel Hacking Sektion gibt es eine Option mit Namen "Are You Using A
Cross Compiler?" Dies teilt den Makefiles des Kernel "<c>mips-linux-</c>" (oder
<c>mipsel-linux</c> ... etc) vorne an die Befehle <c>gcc</c> und <c>as</c>
anzuhängen wenn der Kernel kompiliert wird. Dies sollte ausgeschaltet sein
selbst wenn Sie Cross-Kompilieren. Stattdessen sollten Sie wenn Sie einen
Cross-Compiler aufrufen müssen das Prefix mit der <c>CROSS_COMPILE</c>
Variable, wie im folgenden Beispiel, angeben.
</impo>


<impo>
Es gibt bekanntes Problem mit JFS und ALSA auf Octane-Systemen auf denen ALSA
nicht funktioniert. Wegen dem experimentellen Stand von JFS auf MIPS wird
Benutzern geraten JFS momentan zu meiden.
</impo>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilieren und Installieren</title>
<body>

<p>
Nun da Ihr Kernel konfiguriert ist, ist es Zeit ihn zu kompilieren und zu
installieren. Verlassen Sie die Konfiguration und starten Sie die Kompilierung:
</p>

<note>
AUf 64Bit-Rechnern müssen Sie <c>CROSS_COMPILE=mips64-unknown-linux-gnu-</c>
(oder <c>mips64el-...</c> wenn Sie sich auf einem Little-Endian System befinden)
angeben um den 64Bit-Compiler zu verwenden.
</note>

<pre caption="Kompilieren des Kernels">
<comment>(Nativ kompilieren)</comment>
# <i>make vmlinux modules modules_install</i>

<comment>(Cross-Kompilierung auf dem Zielrechner)</comment>
<comment>(Passend Sie das mips64-unknown-linux-gnu- entsprechend an)</comment>
# <i>make vmlinux modules modules_install CROSS_COMPILE=mips64-unknown-linux-gnu-</i>

<comment>(Wenn Sie auf einem anderen Rechner kompilieren, wie einem)</comment>
<comment>(x86-Rechner, verwenden Sie die folgenden Befehle zur Kompilierung)</comment>
<comment>(des Kernels &amp; installieren die Module in ein spezifisches</comment>
<comment>(Verzeichnis für den Transfer auf den Zielrechner.)</comment>
# <i>make vmlinux modules CROSS_COMPILE=mips64-unknown-linux-gnu-</i>
# <i>make modules_install INSTALL_MOD_PATH=/somewhere</i>
</pre>

<impo>
Wenn Sie einen 64Bit-Kernel für die Indy, Indigo2 (R4k), Challenge S und O2
kompilieren verwenden Sie das Ziel <c>vmlinux.32</c> anstatt von <c>vmlinux</c>.
Ansonsten wird Ihr Rechner nicht in der Lage sein zu starten. Dies ist eine
Abhilfe dazu dass der PROM das ELF64-Format nicht versteht.
</impo>

<pre caption="Das vmlinux.32 Ziel verwenden">
# <i>make vmlinux.32</i>
<comment>(Dies erstellt vmlinux.32, welches Ihr endgültiger Kernel ist.)</comment>
</pre>

<p>
Wenn der Kernel fertig ist mit der Kompilierung, kopieren Sie das Kernel-Image
nach <path>/boot</path>.
</p>

<note>
Bei Cobalt Servern erwartet der Bootloader ein komprimiertes Kernel-Image.
Denken Sie daran <c>gzip -9</c> auf die Datei anzuwenden sobald diese in
<path>/boot</path> ist.
</note>

<pre caption="Installation des Kernels">
# <i>cp vmlinux /boot/kernel-<keyval id="kernel-version"/></i>

<comment>(Cobalt Server -- Komprimierung des Kernel-Image)</comment>
# <i>gzip -9v /boot/kernel-<keyval id="kernel-version"/></i>
</pre>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Kernelmodule</title>

<subsection>
<include href="hb-install-kernelmodules.xml"/>
</subsection>

</section>
</sections>
