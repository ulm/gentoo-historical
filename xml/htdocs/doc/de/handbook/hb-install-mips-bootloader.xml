<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/hb-install-mips-bootloader.xml,v 1.14 2011/09/10 18:04:22 keytoaster Exp $ -->

<sections>

<abstract>
Sowohl auf den Silicon Graphics Rechnern als auch auf Cobalt-Servern, wird ein
Bootloader benötigt, um den Kernel zu laden. Dieses Kapitel erklärt die
Einrichtung von arcboot/arcload (für SGI-Maschinen) und colo für Cobalt-Server.
</abstract>

<version>11</version>
<date>2011-05-09</date>

<section id="sgi">
<title>Silicon Graphics Computer -- Einrichtung von arcload</title>
<subsection>
<title>Welches nehmen wir?</title>
<body>

<p>
Auf SGI-Computern benutzen wir den Bootloader <c>arcload</c>. In früheren
Veröffentlichungen gab es außerdem <c>arcboot</c>, der aber offiziell für
überholt erklärt wurde. Darum erhält <c>arcload</c> nun den Vorzug.
</p>

<note>
Die Dateinamen im SGI Volume Header sind auf 8 Zeichen limitiert, und es können
sich nicht mehr als 16 Dateien in einem einzigen Volume Header befinden.
</note>

</body>
</subsection>

<subsection>
<title>Installation von arcload</title>
<body>

<p>
<c>arcload</c> wurde für Computer geschrieben, die einen 64-Bit-Kernel
benötigen. <c>arcboot</c> kann deshalb nicht verwendet werden, da dieses nicht
so einfach als 64-Bit-Binärdatei kompiliert werden kann. Außerdem beseitigt
<c>arcload</c> einige Eigenheiten, die auftreten können, wenn der Kernel direkt
aus dem Volume Header geladen wird. Nun, da Sie wissen, worum es hier geht,
können wir mit der Installation beginnen:
</p>

<pre caption="Installation von arcload und dvhtool">
# <i>emerge arcload dvhtool</i>
</pre>

<p>
Wenn das fertig ist, sollten Sie die <c>arcload</c>-Binärdateien unter
<path>/usr/lib/arcload</path> finden. Zwei Dateien sollten vorhanden sein:
</p>

<ul>
  <li>
    <c>sashARCS</c>: Die 32-Bit-Binärdatei für Indy, Indigo2 (R4k), Challenge S
    und O2 Systeme
  </li>
  <li>
    <c>sash64</c>: Die 64-Bit-Binärdatei für Octane/Octane2, Origin 200/2000 und
    Indigo2 Impact Systeme
  </li>
</ul>

<p>
Benutzen Sie <c>dvhtool</c>, um die richtige Binärdatei für Ihr System im Volume
Header zu installieren:
</p>

<pre caption="Installation von arcload im Volume Header">
<comment>(Für Indy/Indigo2/Challenge S/O2 Benutzer)</comment>
# <i>dvhtool --unix-to-vh /usr/lib/arcload/sashARCS sashARCS</i>

<comment>(Für Indigo2 Impact/Octane/Octane2/Origin 200/Origin 2000 Benutzer)</comment>
# <i>dvhtool --unix-to-vh /usr/lib/arcload/sash64 sash64</i>
</pre>

<note>
Sie müssen <c>sashARCS</c> oder <c>sash64</c> benutzen, solange Sie
<c>arcload</c> in den Volume Header einer bootbaren CD installieren. Für eine
Festplatte können Sie die Namen frei wählen, falls Sie möchten.
</note>

<p>
Überprüfen Sie mit <c>dvhtool</c>, ob die Dateien im Volume Header sind.
</p>

<pre caption="Überprüfen, ob arcload im Volume Header vorhanden ist">
# <i>dvhtool --print-volume-directory</i>
----- directory entries -----
Entry #0, name "sash64", start 4, bytes 55859
#
</pre>

<p>
Jetzt zur <c>arc.cf</c> Datei. Diese besitzt eine C-artige Syntax. Eine genaue
Anleitung zur Konfiguration kann auf der <uri
link="http://www.linux-mips.org/wiki/Arcload">arcload Seite des Linux/MIPS
Wikis</uri> eingesehen werden. Kurz, Sie definieren eine Anzahl an Optionen, die
Sie beim Booten mit Hilfe der <c>OSLoadFilename</c>-Variable an- oder abschalten
können.
</p>

<pre caption="Ein Beispiel für arc.cf">
<comment># ARCLoad Konfiguration</comment>

<comment># Einige Standardeinstellungen ...</comment>
append  "root=/dev/sda3";
append  "ro";
append  "console=ttyS0,9600";

<comment># Unsere Hauptdefinition, ip28 kann geändert werden falls gewünscht.</comment>
ip28 {
        <comment># Definition für einen "working" Kernel</comment>
        <comment># Wählen Sie das folgende durch OSLoadFilename="ip28(working)" aus</comment>
        working {
                description     "SGI Indigo2 Impact R10000\n\r";
                image system    "/working";
        }

        <comment># Definition für einen "new" Kernel</comment>
        <comment># Wählen Sie das folgende durch OSLoadFilename="ip28(new)" aus</comment>
        new {
                description     "SGI Indigo2 Impact R10000 - Testing Kernel\n\r";
                image system    "/new";
        }

        <comment># Für das Debuggen eines Kernels</comment>
        <comment># Wählen Sie das folgende durch OSLoadFilename="ip28(working,debug)"</comment>
        <comment># oder OSLoadFilename="ip28(new,debug)" aus</comment>
        debug {
                description     "Debug console";
                append          "init=/bin/bash";
        }
}
</pre>

<p>
Beginnend mit <c>arcload-0.5</c> können sich <path>arc.cf</path> und die Kernel
entweder im Volume Header oder in einer Partition befinden. Wenn Sie dieses
aktuellere Feature (Partition) nutzen wollen, können Sie die Dateien in Ihrer
<path>/boot</path>-Partition (oder in <path>/</path>, falls Sie keine separate
Bootpartition haben) platzieren. <c>arcload</c> benutzt den Code des
Dateisystemtreibers vom populären <c>Grub</c>-Bootloader, daher unterstüzt es
die gleichen Dateisysteme.
</p>

<pre caption="Installieren von arc.cf und Kernel im Volume Header">
# <i>dvhtool --unix-to-vh arc.cf arc.cf</i>
# <i>dvhtool --unix-to-vh /usr/src/linux/vmlinux new</i>
</pre>

<p>
Danach bleibt nur noch das Setzen von einigen Optionen im PROM. Lesen Sie dazu
den Abschnitt über <uri link="#reboot">Neustart des Systems</uri>.
</p>

</body>
</subsection>

</section>

<section id="cobalt">
<title>Cobalt MicroServers -- Einrichten von CoLo</title>
<subsection>
<title>Installation von CoLo</title>
<body>

<p>
Cobalt-Server haben auf ihrem Chip eine wesentlich leistungsschwächere Firmware.
Das Cobalt-BOOTROM ist primitiv, verglichen mit dem SGI-PROM, und hat einige
große Beschränkungen.
</p>

<ul>
  <li>
    Es gibt ein (ungefähr) 675kB Limit für Kernel. Die aktuelle Größe von Linux
    2.4 macht es fast unmöglich, einen Kernel mit dieser Größe zu erstellen.
    Linux 2.6 braucht gar nicht erst in Erwägung gezogen zu werden.
  </li>
  <li>
    64-Bit-Kernel werden von der mitgelieferten Firmware nicht unterstützt
    (obwohl diese derzeit hoch experimentell auf Cobalt Computern ist)
  </li>
  <li>
    Die Shell ist bestenfalls grundlegend
  </li>
</ul>

<p>
Um diese Beschränkungen zu überwinden, wurde eine alternative Firmware, <uri
link="http://www.colonel-panic.org/cobalt-mips/">CoLo</uri> (Cobalt Loader),
entwickelt. CoLo ist ein BOOTROM Abbild, das entweder auf den Chip im Cobalt
Server installiert ("flashed") oder von der existierenden Firmware geladen
werden kann.
</p>

<note>
Dieser Leitfaden führt Sie durch die Installation und Einrichtung von CoLo, so
dass diese durch die mitgelieferte Firmware geladen wird. Dies ist der einzig
wirklich sichere und empfohlene Weg der Einrichtung.
</note>

<warn>
Sie können CoLo jedoch auch auf den Chip im Server installieren und damit die
mitgelieferte Firmware komplett überschreiben -- danach sind Sie aber auf sich
allein gestellt. Sollte irgend etwas schief laufen, müssen Sie den BOOTROM-Chip
physisch entfernen und mit der Originalfirmware neu programmieren. Wenn Sie sich
nicht sicher sind, wie das geht -- dann flashen Sie Ihren Chip <e>AUF KEINEN
FALL</e>. Wir übernehmen keine Verantwortung für was auch immer passiert, wenn
Sie diesen Ratschlag ignorieren.
</warn>

<p>
Okay, genug der Warnungen, installieren wir nun CoLo. Zuerst emergen wir das
Paket.
</p>

<pre caption="Emergen von CoLo">
# <i>emerge colo</i>
</pre>

<p>
Nachdem es installiert ist (wir hoffen, Sie haben die Ausgaben gelesen ;-),
sollten Sie unter <path>/usr/lib/colo</path> zwei Dateien finden. Einmal
<path>colo-chain.elf</path>, der "Kernel", der von der mitgelieferten Firmware
geladen wird, und <path>colo-rom-image.bin</path>, ein ROM-Abbild, das in das
BOOTROM installiert werden kann. Nachdem wir /boot gemountet haben, speichern
wir dort eine komprimierte Kopie von <path>colo-chain.elf</path>, wo das System
es erwartet.
</p>

<pre caption="CoLo an den richtigen Ort kopieren">
# <i>gzip -9vc /usr/lib/colo/colo-chain.elf &gt; /boot/vmlinux.gz</i>
</pre>

</body>
</subsection>

<subsection>
<title>Konfiguration von CoLo</title>

<body>

<p>
Wenn das System nun bootet sollte CoLo geladen werden, was wiederum ein Menü auf
dem rückwärtigen LCD ausgibt. Die erste Option (und gleichzeitig der Standard,
der nach ca. 5 Sekunden automatisch gewählt wird) ist das Booten von der
Festplatte. Das System versucht dann, die erste Linuxpartition, die es findet,
zu mounten. Danach führt es das Skript <path>default.colo</path> aus. Die Syntax
ist vollständig in der CoLo-Dokumentation beschrieben (zu finden unter
<path>/usr/share/doc/colo-X.YY/README.shell.gz</path>, wobei X.YY für die
installierte Version steht), und sie ist sehr einfach.
</p>

<note>
Noch ein Tipp: Bei der Installation der Kernel kann es hilfreich sein, zwei
Kernelabbilder zu erstellen,
<path>kernel.gz.working</path> -- ein Kernel, von dem man weiß, dass er läuft,
und
<path>kernel.gz.new</path> -- ein Kernel, den man gerade erst kompiliert hat.
Sie können entweder Symlinks benutzen, um auf die momentanen "new" und "working"
Kernel zu verweisen, oder einfach die Kernelabbilder umbenennen.
</note>

<pre caption="Ein Beispiel einer default.colo">
<comment>#:CoLo:#</comment>
mount hda1
load /kernel.gz.working
execute root=/dev/sda3 ro console=ttyS0,115200
</pre>

<note>
CoLo wird kein Skript laden, das nicht mit <c>#:CoLo:#</c> in der ersten Zeile
beginnt, entsprechend dem <c>#!/bin/sh</c> in Shellskripten.
</note>

<p>
Außerdem ist es möglich, vor dem Booten eine Kernelkonfiguration auszuwählen,
die gestartet werden soll. Die folgende Konfiguration macht genau das: Den
Benutzer fragen, welchen Kernel er booten will, und dann das entsprechende
Abbild laden. Ansonsten wird nach einem Timeout der Standardkernel geladen.
<path>vmlinux.gz.new</path> und <path>vmlinux.gz.working</path> können entweder
die richtigen Abbilder sein oder einfach nur Symlinks auf die Abbilder auf der
Festplatte. Das Argument <c>50</c> hinter <c>select</c> legt den Timeout fest
(50/10tel einer Sekunde, also 5 Sekunden), nachdem die erste Option ("Working")
gebootet wird.
</p>

<pre caption="Menü-basierte Konfiguration">
<comment>#:CoLo:#</comment>

lcd "Mounting hda1"
mount hda1
select "Welcher Kernel?" 50 Working New

goto {menu-option}
var image-name vmlinux.gz.working
goto 3f
@var image-name vmlinux.gz.working
goto 2f
@var image-name vmlinux.gz.new

@lcd "Lade Linux" {image-name}
load /{image-name}
lcd "Boote..."
execute root=/dev/sda5 ro console=ttyS0,115200
boot
</pre>

<p>
Mehr Details entnehmen Sie der Dokumentation unter
<path>/usr/share/doc/colo-VERSION</path>.
</p>

</body>

</subsection>
</section>

<section>
<title>Einrichtung der seriellen Konsole</title>

<subsection>
<body>

<p>
Die Linux-Installation würde so, wie sie jetzt ist, zwar booten, aber es setzt
voraus, dass Sie sich an einem physischen Terminal anmelden. Auf
Cobalt-Computern wäre das schlecht -- es gibt kein physisches Terminal.
</p>

<note>
Diejenigen von Ihnen, die den Luxus eines unterstützten Video-Chipsatzes
genießen dürfen, können diesen Abschnitt überspringen, wenn sie möchten.
</note>

<p>
Zuerst öffnen Sie mit einem Editor die Datei <path>/etc/inittab</path>. Weiter
unten in der Datei finden sie etwas, das in etwa wie folgendes aussieht:
</p>

<pre caption="inittab Konfiguration">
<comment># SERIAL CONSOLE</comment>
<comment>#c0:12345:respawn:/sbin/agetty 9600 ttyS0 vt102</comment>

<comment># TERMINALS</comment>
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux

<comment># What to do at the "Three Finger Salute".</comment>
ca:12345:ctrlaltdel:/sbin/shutdown -r now
</pre>

<p>
Entkommentieren Sie zunächst die Zeile <c>c0</c>. Standardmäßig ist sie auf eine
Terminal-Baudrate von 9600 bps eingestellt. Auf Cobalt Servern ändern Sie den
Wert auf 115200, um die gleiche Baudrate wie vom BOOTROM vorgesehen
einzustellen. So sieht die Sektion auf dem Cobalt-Server des Autors aus. Auf
Computern ohne grafische Ausgabe (z.B. Cobalt-Servern) empfehle ich außerdem,
die Zeilen für die lokalen Terminals zu entkommentieren (<c>c1</c> bis
<c>c6</c>), da die Computer einen Hang zu merkwürdigem Verhalten haben, wenn sie
<path>/dev/ttyX</path> nicht öffnen können.
</p>

<pre caption="Beispielauszug aus inittab">
<comment># SERIAL CONSOLE</comment>
c0:12345:respawn:/sbin/agetty 115200 ttyS0 vt102

<comment># TERMINALS -- These are useless on a headless qube</comment>
<comment>#c1:12345:respawn:/sbin/agetty 38400 tty1 linux</comment>
<comment>#c2:12345:respawn:/sbin/agetty 38400 tty2 linux</comment>
<comment>#c3:12345:respawn:/sbin/agetty 38400 tty3 linux</comment>
<comment>#c4:12345:respawn:/sbin/agetty 38400 tty4 linux</comment>
<comment>#c5:12345:respawn:/sbin/agetty 38400 tty5 linux</comment>
<comment>#c6:12345:respawn:/sbin/agetty 38400 tty6 linux</comment>
</pre>

<p>
Zum Schluss müssen wir dem System mitteilen, dass dem lokalen seriellen Port als
ein sicheres Terminal vertraut werden darf. Dazu müssen wir
<path>/etc/securetty</path> editieren. Es enthält eine Liste von Terminalen, die
das System als sicher erachtet. Wir fügen nun zwei Zeilen hinzu, damit wir uns
über den seriellen Anschluss als <c>root</c> anmelden können.
</p>

<pre caption="Erlaube root Logins an der seriellen Konsole">
<comment>(/dev/ttyS0 -- der traditionelle Name für den ersten seriellen Port)</comment>
# <i>echo 'ttyS0' >> /etc/securetty</i>

<comment>(Seit kurzem benutzt Linux außerdem /dev/tts/0 -- also fügen wir auch das hinzu)</comment>
# <i>echo 'tts/0' >> /etc/securetty</i>
</pre>

</body>
</subsection>
</section>

<section id="reboot">
<title>Neustart des Systems</title>
<subsection>
<body>

<p>
Verlassen Sie die chroot-Umgebung und entfernen Sie alle gemounteten
Partitionen. Dann können Sie das eine magische Kommando schreiben, auf das Sie
so lange gewartet haben: <c>reboot</c>.
</p>

<pre caption="Verlassen der chroot-Umgebung, entfernen aller gemounteten Partitionen und neustart">
# <i>exit</i>
cdimage ~# <i>cd</i>
cdimage ~# <i>umount -l /mnt/gentoo/dev{/shm,/pts,}</i>
cdimage ~# <i>umount -l /mnt/gentoo{/boot,/proc,}</i>
cdimage ~# <i>reboot</i>
</pre>

<note>
<e>Cobalt-Benutzer:</e> Der Rest dieses Abschnittes behandelt das Einrichten des
SGI-PROM, damit es <c>arcload</c> von der Festplatte booten und Linux laden
kann.
Cobalt-Server betrifft das nicht. Tatsächlich ist hier Ihre Arbeit getan -- für
den ersten Start wird keine weitere Konfiguration benötigt. Sie können zum
nächsten Abschnitt springen: <uri link="?part=1&amp;chap=11">Fertigstellen Ihrer
Gentoo Installation</uri>
</note>

</body>
</subsection>
</section>
<section>
<title>Anpassungen des SGI-PROM</title>
<subsection>
<title>Setzen von allgemeinen PROM-Einstellungen</title>
<body>

<p>
Nachdem Sie nun den Bootloader installiert haben, können Sie den Computer neu
starten.
</p>

<pre caption="Neustart">
<comment>(Verlassen der chroot-Umgebung)</comment>
# <i>exit</i>

<comment>(Entfernen der gemounteten Partitionen)</comment>
cdimage ~# <i>umount -l /mnt/gentoo/dev{/shm,/pts,}</i>
cdimage ~# <i>umount -l /mnt/gentoo{/boot,/proc,}</i>

<comment>(Neustart)</comment>
# <i>reboot</i>
</pre>

<p>
Sobald der Computer neu startet, begeben Sie sich in das <e>System Maintenance
Menu</e> und wählen dort <e>Enter Command Monitor</e> (<c>5</c>) genauso wie bei
der Auswahl zum Netboot.
</p>

<pre caption="Konfiguration des PROM für Gentoo">
1) Start System
2) Install System Software
3) Run Diagnostics
4) Recover System
5) Enter Command Monitor

Option? <i>5</i>
Command Monitor. Type "exit" to return to the menu.

<comment>(Setzen einiger Optionen für arcload)</comment>

<comment>(Einstellen des Orts des Volume Headers)</comment>
&gt;&gt; <i>setenv SystemPartition scsi(0)disk(1)rdisk(0)partition(8)</i>

<comment>(Starte Gentoo automatisch)</comment>
&gt;&gt; <i>setenv AutoLoad Yes</i>

<comment>(Setzen der Zeitzone)</comment>
&gt;&gt; <i>setenv TimeZone EST5EDT</i>

<comment>(Benutze die serielle Konsole - Grafikkartenbenutzer sollten hier ein "g" anstatt eines "d1" (eins) haben)</comment>
&gt;&gt; <i>setenv console d1</i>

<comment>(Setzen der Baudrate für die serielle Konsole. Die Rate ist optional, 9600 ist der )
(Standardwert, Sie können aber auch Raten bis zu 38400 benutzen, falls gewünscht.  )</comment>
&gt;&gt; <i>setenv dbaud 9600</i>
</pre>

<p>
Die nächsten Einstellungen hängen davon ab, wie Sie Ihr System starten.
</p>

</body>
</subsection>

<subsection>
<title>Einstellungen für das direkte Starten vom Volume Header</title>
<body>

<p>
Der Vollständigkeit halber wird es hier behandelt. Es wird jedoch empfohlen,
anstelle dessen <c>arcload</c> zu installieren.
</p>

<note>
Das Folgende funktioniert nur auf Indy, Indigo2 (R4k) und Challenge S.
</note>

<pre caption="PROM-Einstellungen zum Booten vom Volume Header">
<comment>(&lt;Rootpartition&gt; = Rootpartition von Gentoo, z.B. /dev/sda3)</comment>
&gt;&gt; <i>setenv OSLoadPartition &lt;Rootpartition&gt;</i>

<comment>(Um alle verfügbaren Kernel aufzulisten, tippen Sie "ls")</comment>
&gt;&gt; <i>setenv OSLoader &lt;kernel name&gt;</i>
&gt;&gt; <i>setenv OSLoadFilename &lt;kernel name&gt;</i>

<comment>(Einstellen der Kernelparameter, die Sie übergeben möchten)</comment>
&gt;&gt; <i>setenv OSLoadOptions &lt;Kernelparameter&gt;</i>
</pre>

<p>
Wenn Sie einen Kernel ausprobieren möchten, ohne sich mit den Kernelparametern
zu beschäftigen, können Sie das einfach mit dem PROM-Befehl <c>boot -f</c> tun.
</p>

<pre caption="Booten, ohne die Umgebungsvariablen zu verändern">
<comment>(Booten des Kernels, "new", mit zusätzlichen Optionen)</comment>
# <i>boot -f new root=/dev/sda3 ro</i>
</pre>

</body>
</subsection>

<subsection>
<title>Einstellungen für arcload</title>
<body>

<p>
<c>arcload</c> benutzt die <c>OSLoadFilename</c>-Option, um die Einstellungen
aus <path>arc.cf</path> zu verwenden. Die Konfigurationsdatei ist eigentlich ein
Skript, wobei mit den Hauptblöcken die Bootabbilder für verschiedene Systeme
definiert werden; innerhalb dieser Blöcke dann optionale Einstellungen. Bspw.
würde das Benutzen von <c>OSLoadFilename=mysys(serial)</c> die Einstellungen für
den <c>mysys</c>-Block laden, danach würden erweiterte Optionen geladen, die in
<c>serial</c> überschrieben werden.
</p>

<p>
In der obigen Beispieldatei haben wir einen Systemblock definiert, <c>ip28</c>,
mit <c>working</c>-, <c>new</c>- und <c>debug</c>-Optionen. Demzufolge
definieren wir unsere PROM-Variablen wie folgt:
</p>

<pre caption="PROM-Einstellungen für das Benutzen von arcload">
<comment>(Wähle arcload als den Bootloader aus:- sash64 or sashARCS)</comment>
&gt;&gt; <i>setenv OSLoader sash64</i>

<comment>(Benutze das "working" Kernelabbild, definiert in der "ip28" Sektion von arc.cf)</comment>
&gt;&gt; <i>setenv OSLoadFilename ip28(working)</i>
</pre>

<p>
Beginnend mit <c>arcload-0.5</c> brauchen Dateien nicht mehr im Volume Header
plaziert zu werden -- sie können alternativ auf Partitionen platziert werden.
Damit <c>arcload</c> weiß, wo es nach seinen Konfigurationsdateien und den
Kerneln suchen soll, muss man die Variable <c>OSLoadPartition</c> im PROM
setzen. Der exakte Werte dieser Variable hängt davon ab, an welcher Stelle die
Festplatte auf dem SCSI-Bus liegt. Benutzen Sie bitte die <c>SystemPartition</c>
PROM-Variable als Hilfe -- nur die Partitionsnummer sollte sich ändern.
</p>

<note>
Die Nummerierung der Partitionen startet bei 0, nicht bei 1 wie in Linux.
</note>

<pre caption="arcload mitteilen, wo es arc.cf findet">
<comment>(Wenn Sie wünschen, vom Volume Header zu booten -- benutze Partition 8)</comment>
&gt;&gt; <i>setenv OSLoadPartition scsi(0)disk(1)rdisk(0)partition(8)</i>

<comment>(Anderenfalls spezifizieren Sie die Partition und das Dateisystem)</comment>
&gt;&gt; <i>setenv OSLoadPartition scsi(0)disk(1)rdisk(0)partition(0)[ext2]</i>
</pre>

</body>
</subsection>

<subsection>
<title>Fertig</title>
<body>

<p>
Jetzt ist alles bereit, damit Sie Gentoo genießen können! Booten Sie Gentoo und
schließen Sie Ihre Gentoo-Installation mit dem Kapitel <uri
link="?part=1&amp;chap=11">Finalisierung Ihrer Gentoo Installation</uri> ab.
</p>

</body>
</subsection>
</section>
</sections>
