<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- English CVS Version: 1.3 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/draft/Attic/hb-install-bootloader.xml,v 1.2 2004/02/27 16:51:49 dertobi123 Exp $ -->

<sections>
<section>
<title>Eine Wahl treffen</title>
<subsection>
<title>Einleitung</title>
<body>

<p>
Nun, da Ihr Kernel konfiguriert und kompiliert ist und die notwendigen
Systemkonfigurationsdateien richtig konfiguriert sind, ist es Zeit ein Programm
zu installieren, dass Ihren Kernel lädt wenn Sie Ihr System starten. Solch ein
Programm nennt man einen <e>Bootloader</e>. Jedoch bevor sie anfangen,
betrachten sie ihre Wahlmöglichkeiten...
</p>

<p>
Für Linux existieren verschiedene Bootloader, jedoch funktionieren diese nur
auf einem kleinen Bereich von Architekturen. Daher müssen Sie zwischen den
Bootloadern wählen, die Ihre Architektur unterstützen.
</p>

<p>
Die nächste Tabelle listet die Architekturen und die unterstützten Bootloader
auf. Wählen Sie einen Bootloader basierend auf Ihrer Architektur; z.B. wenn Sie
einen Pentium 4 haben, dann ist Ihre Architektur <e>x86</e>. Sie haben also die
Wahl zwischen GRUB (empfohlen) und LILO.
</p>

<table>
<tr>
  <th>Architektur</th>
  <th>Empfohlen</th>
  <th>Alternativen</th>
</tr>
<tr>
  <th>x86</th>
  <ti><uri link="#doc_chap2">>GRUB</uri></ti>
  <ti><uri link="#doc_chap3">>LILO</uri></ti>
</tr>
<tr>
  <th>alpha</th>
  <ti><uri link="#doc_chap4">aBoot</uri></ti>
  <ti><uri link="#doc_chap5">MILO</uri></ti>
</tr>
<tr>
  <th>sparc</th>
  <ti><uri link="#doc_chap6">SILO</uri></ti>
  <ti></ti>
</tr>
<tr>
  <th>ppc</th>
  <ti><uri link="#doc_chap8">yaBoot</uri> (NewWorld)</ti>
  <ti><uri link="#doc_chap9">BootX</uri> (OldWorld)</ti>
</tr>
<tr>
  <th>hppa</th>
  <ti><uri link="#doc_chap7">PALO</uri></ti>
  <ti></ti>
</tr>
<tr>
  <th>mips</th>
  <ti><uri link="#doc_chap10">MIPS PROM</uri></ti>
  <ti></ti>
</tr>
	 <tr>
  	   <th>amd64</th>
  	   <ti><uri link="#doc_chap2">GRUB</uri></ti>
  	   <ti></ti>
  	 </tr>
</table>

</body>
</subsection>
<subsection>
<title>Optional: Framebuffer</title>
<body>

<note>
Dieser Abschnitt ist nur relevant für x86, AMD64 und PPC Benutzer, die Framebuffer
Unterstützung in ihrem Kernel konfiguriert haben.
Dies schließt <c>genkernel</c> Benutzer ein.
</note>

<p>
<e>Wenn</e> Sie Ihren Kernel mit Framebuffer Unterstützung konfiguriert haben,
müssen Sie das <c>vga</c> Statement zu Ihrer Bootloaderkonfigurationsdatei
hinzufügen, wenn sie Framebuffer benötigen. Die nächste Tabelle listet die
verfügbaren <c>vga</c> Werte auf, die Sie benutzen können. In den
Beispielkonfigurationsdateien benutzen wir <e>800x600 @ 16bpp</e>,
daher <e>788</e>.
</p>

<table>
<tr>
  <ti></ti><th>640x480</th><th>800x600</th><th>1024x768</th><th>1280x1024</th>
</tr>
<tr>
  <th>8 bpp</th><ti>769</ti><ti>771</ti><ti>773</ti><ti>775</ti>
</tr>
<tr>
  <th>16 bpp</th><ti>785</ti><ti>788</ti><ti>791</ti><ti>794</ti>
</tr>
<tr>
  <th>32 bpp</th><ti>786</ti><ti>789</ti><ti>792</ti><ti>795</ti>
</tr>
</table>

<p>
Merken Sie sich diesen Wert (oder schreiben Sie ihn auf), Sie werden ihn wenig
später brauchen.
</p>

<p>
Wählen Sie nun einen Bootloader aus der obigen Tabelle aus.
</p>

</body>
</subsection>
</section>
<section>
<title>Standard: Die Benutzung von GRUB
</title>
<subsection>
<title>Das Verstehen von GRUBs Terminologie</title>
<body>

<impo>
GRUB kann nur auf x86 und AMD64-basierenden Systemen verwendet werden!
</impo>

<p>
Der wichtigste Teil beim Verstehen von GRUB ist, sich mit der Art vertraut zu
machen, in der GRUB Festplatten und Partitionen benennt. Ihre Linux Partition
<path>/dev/hda1</path> wird <path>(hd0,0)</path> unter GRUB genannt. Beachten
Sie die Klammern um das <path>hd0,0</path>, denn diese sind Pflicht.
</p>

<p>
Festplatten zählen von Null anstatt von "a" und Partitionen starten bei Null
anstatt bei 1. Beachten Sie bitte auch, dass mit den hd-Geräten nur Festplatten
gezählt werden, keine ATAPI-IDE Geräte wie CD-ROM Player oder Brenner.
Dasselbe Modell wird auch bei SCSI Laufwerken verwendet. (Normalerweise
erhalten sie höhere Nummern als IDE Laufwerke, außer wenn das BIOS konfiguriert
ist von SCSI zu booten.)
</p>

<p>
Vorausgesetzt Sie haben eine Festplatte an <path>/dev/hda</path>, einen CD-ROM
Player an <path>/dev/hdb</path>, einen Brenner an <path>/dev/hdc</path>, eine
zweite Festplatte an <path>/dev/hdd</path> und keine SCSI Festplatte, dann wird
<path>/dev/hdd7</path> übersetzt in <path>(hd1,6)</path>. Es mag schwierig
klingen und das ist es in der Tat auch, aber wie wir werden sehen, bietet GRUB
einen Tab-Komplettierungsmechanismus an, der hilfreich ist für diejenigen von
Ihnen die viele Festplatten und Partitionen haben und sich ein wenig verloren
fühlen mit dem Nummerierungssystem von GRUB.
</p>

<p>
Nachdem man dafür jetzt ein Gefühl erlangt hat, ist es nun Zeit GRUB zu
installieren.
</p>

</body>
</subsection>
<subsection>
<title>Installieren von GRUB</title>
<body>

<p>Um GRUB zu installieren, führen Sie ein emerge aus. x86 Benutzer 
müssen  <c>grub</c> verwenden, während AMD64 Benutzer <c>grub-static</c>
emergen müssen:</p>

<pre caption = "Installieren von GRUB">
 <comment>(Für x86 Architektur)</comment>
# <i>emerge grub</i>
<comment>(Für AMD64 Architektur)</comment>
# <i>emerge grub-static</i>
# <i>cp -Rpv /usr/share/grub/i386-pc/* /boot/grub</i>
</pre>

<p>
Um mit der Konfiguration von GRUB zu beginnen, tippen Sie <c>grub</c>. Ihnen
wird die <path>grub&gt;</path> GRUB Kommdandozeile präsentiert. Nun müssen Sie
die richtigen Befehle eintippen um den GRUB Boot Record auf Ihrer Festplatte zu
installieren.
</p>

<pre caption = "Starten der GRUB Shell">
# <i>grub</i>
</pre>

<note>
Wenn das System kein Diskettenlaufwerk hat, fügen Sie die <c>--no-floppy</c>
Option an das obige Kommando an, damit grub nicht nach nicht-existierenden
Diskettenlaufwerken sucht.
</note>

<p>
In der Beispielskonfiguration wollen wir GRUB so installieren, dass es alle
Informationen von der Boot Partition <path>/dev/hda1</path> liest und den GRUB
Boot Record auf dem MBR (Master Boot Record) der Festplatte installiert, damit
das Erste was wir sehen, wenn wir den Computer einschalten die GRUB
Eingabeaufforderung ist. Natürlich müssen Sie die Befehle entsprechend ändern,
wenn Sie von der Beispielkonfiguration während der Installation abgewichen
sind.
</p>

<p>
Der Tab-Komplettierungsmechanismus von GRUB kann innerhalb von GRUB benutzt
werden. Zum Beispiel, wenn Sie "<c>root (</c>" eintippen, gefolgt von einem
TAB, wird Ihnen eine Liste von Geräten gegeben (solche wie <path>hd0</path>).
Wenn Sie "<c>root (hd0,</c>" eintippen, gefolgt von einem TAB, wird Ihnen eine
Liste von verfügbaren Partitionen angezeigt, unter denen Sie auswählen können
(solche wie <path>hd0,0</path>).
</p>

<p>
Durch Benutzung der Tab-Komplettierung sollte das Einrichten von GRUB nicht
allzu schwer sein. Also weiter in der Konfiguration von GRUB!
</p>

<pre caption = "Installieren von GRUB im MBR">
grub&gt; <i>root (hd0,0)</i>          <comment>(Angabe wo sich Ihre /boot Partition befindet)</comment>
grub&gt; <i>setup (hd0)</i>           <comment>(Installiere GRUB im MBR)</comment>
grub&gt; <i>quit</i>                  <comment>(Verlasse die GRUB Shell)</comment>
</pre>

<note>
Wenn Sie GRUB lieber in einer bestimmten Partition anstatt des MBR installieren
wollen, müssen Sie das <c>setup</c> so verändern, dass es auf die
richtige Partition verweist. Zum Beispiel, wenn Sie GRUB in 
<path>/dev/hda3</path> installieren wollen, dann wird der Befehl zu
<c>setup (hd0,2)</c>.
Diese Option wird in der Regel nur von wenigen Benutzern genutzt.
</note>

<p>
Obwohl GRUB nun installiert ist, müssen Sie trotzdem noch eine
Konfigurationsdatei dafür schreiben, damit GRUB automatisch Ihren neu
erstellten Kernel bootet. Erstellen Sie <path>/boot/grub/grub.conf</path> mit
<c>nano</c> (oder wenn gewünscht einem anderen Editor):
</p>

<pre caption = "Erstellen von /boot/grub/grub.conf">
# <i>nano -w /boot/grub/grub.conf</i>
</pre>

<p>
Nun wollen wir eine <path>grub.conf</path> schreiben. Folgend finden Sie zwei
mögliche <path>grub.conf</path> für das Partitionierungsbeispiel, das wir in
diesem Leitfaden verwendet haben mit dem Kernel-Image <path>kernel-2.4.25</path>.
Wir werden nur die erste <path>grub.conf</path> ausführlich erläutern.
</p>

<ul>
  <li>
    Die erste <path>grub.conf</path> für Leute, die nicht <c>genkernel</c>
    benutzt haben
  </li>
  <li>
    Die zweite <path>grub.conf</path> ist für Leute, die <c>genkernel</c>
    benutzt haben
  </li>
</ul>

<pre caption = "grub.conf für Nich-genkernel Benutzer">
<comment># Welcher Eintrag standardmäßig gebootet werden soll. 0 ist der Erste, 1 ist der Zweite usw.</comment>
default 0
<comment># Wieviele Sekunden gewartet werden soll, bevor der Standardeintrag gebootet wird.</comment>
timeout 30
<comment># Eine nettes, fettes Hintergrundbild um die ganze Sache ein wenig zu würzen :)</comment>
splashimage=(hd0,0)/grub/splash.xpm.gz

title=Gentoo Linux 2.4.25
<comment># Partition in der das Kernel-Image (oder das Betriebssystem) vorhanden ist</comment>
root (hd0,0)
kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3

<comment># Die nächsten drei Zeilen werden nur benötigt wenn Sie einen Dualboot mit einem Windows System einrichten wollen.</comment>
<comment># Hier in diesem Fall liegt Windows auf /dev/hda6.</comment>
title=Windows XP
root (hd0,5)
chainloader +1
</pre>

<pre caption = "grub.conf für Nicht-GRP genkernel Benutzer">
default 0
timeout 30
splashimage=(hd0,0)/grub/splash.xpm.gz

title=Gentoo Linux 2.4.25
root (hd0,0)
kernel (hd0,0)/kernel-2.4.25 root=/dev/ram0 init=/linuxrc real_root=/dev/hda3
initrd (hd0,0)/initrd-2.4.25

<comment># Nur wenn Sie einen Dual-Boot einrichten möchten</comment>
title=Windows XP
root (hd0,5)
chainloader +1
</pre>

<note>
Wenn Sie ein anderes Partitionierungschema verwenden und/oder Kernel-Image,
passen Sie Ihre Konfiguration entsprechend an. Stellen Sie jedoch sicher, dass
alles was einem GRUB-Device folgt (wie z.B. <path>(hd0,0)</path>) relativ zum
Mountpoint ist, nicht dem Root. Mit anderen Worten,
<path>(hd0,0)/grub/splash.xpm.gz</path> ist in Wirklichkeit
<path>/boot/grub/splash.xpm.gz</path> denn <path>(hd0,0)</path> ist
<path>/boot</path>.
</note>

<p>
Wenn Sie noch zusätzliche Optionen an den Kernel übergeben müssen, fügen Sie
diese einfach zum Ende des Kernelbefehls hinzu. Eine Option übermitteln wir
schon (<c>root=/dev/hda3</c> oder <c>real_root=/dev/hda3</c>), aber Sie können
auch weitere übermittlen. Als Beispiel benutzen wir das <c>vga</c> Statement
für Framebuffer, das wir schon besprochen haben:
</p>

<pre caption = "Hinzufügen des vga Statements als eine Kerneloption">
title=Gentoo Linux
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3 vga=788
</pre>

<p>
<c>Genkernel</c> Benutzer sollten wissen, dass Ihr Kernel die selben
Bootoptionen benutzt wie der auf der LiveCD. Zum Beispiel, wenn Sie SCSI Geräte
haben, sollten Sie <c>doscsi</c> als Kerneloption hinzufügen.
</p>

<p>
Speichern Sie nun die <path>grub.conf</path> Datei und verlassen Sie den
Editor. Von jetzt an ist GRUB vollständig konfiguriert und Sie können mit der
<uri link="?part=1&amp;chap=10">Installation von benötigten Systemtools</uri>
fortfahren.
</p>

</body>
</subsection>
</section>
<section>
<title>Alternativ: Benutzung von LILO</title>
<subsection>
<title>Installieren von LILO</title>
<body>

<impo>
LILO kann nur auf x86-basierenden System verwendet werden!
</impo>

<p>
LILO, der LInuxLOader, ist das bewährte und wahre Arbeitstier der Linux
Bootloader. Jedoch hat es eine Fähigkeiten nicht die GRUB hat (was auch der
Grund dafür ist, dass GRUB momentan an Popularität gewinnt). Der Grund warum
LILO noch benutzt wird ist, dass GRUB auf einigen System nicht funktioniert und
LILO es tut. Natürlich gibt es auch den Grund, dass einige Leute mit LILO
bereits vertraut sind und es daher behalten wollen. In jedem Fall: Gentoo
unterstützt beide und anscheinend haben Sie sich für LILO entschieden.
</p>

<p>Installieren von LILO ist ein Klacks, benutzen Sie einfach <c>emerge</c>.</p>

<pre caption = "Installieren von LILO">
# <i>emerge lilo</i>
</pre>

</body>
</subsection>
<subsection>
<title>Konfigurieren von LILO</title>
<body>

<p>
Um LILO zu konfigurieren, müssen Sie <path>/etc/lilo.conf</path> erstellen.
Starten Sie Ihren Lieblingseditor (in diesem Handbuch benutzen wir <c>nano</c>)
und erstellen die Datei.
</p>

<pre caption = "Erstellen von /etc/lilo.conf">
# <i>nano -w /etc/lilo.conf</i>
</pre>

<p>
Vor einigen Abschnitten baten wir Sie, sich den Namen des Kernel-Images zu
merken, welches Sie erstellt haben. In der folgenden <path>lilo.conf</path>
Beispielsdatei nehmen wir an, dass der Imagename <path>kernel-2.4.25</path>
ist. Wir benutzen zudem das Beispielpartitionsschema in diesem Beispiel, es gibt
zwei verschiedene Teile:
</p>

<ul>
  <li>
    Einen für diejenigen, die <c>genkernel</c> nicht benutzt haben um den Kernel
    zu bauen
  </li>
  <li>
    Einen für diejenigen, die ein <c>genkernel</c> zum bauen des Kernel benutzt haben.
  </li>
</ul>

<pre caption = "Example /etc/lilo.conf">
boot=/dev/hda             <comment># Installieren von LILO im MBR</comment>
prompt                    <comment># Gib dem Benutzer die Möglichkeit eine andere Sektion auszuwählen</comment>
delay=50                <comment># Warte 5 (fünf) Sekunden bevor die Standardsektion gebootet wird</comment>
default=gentoo            <comment># Wenn das Timeout verstrichen ist, dann boote die "gentoo" Sektion</comment>
<comment># Nur wenn Sie Framebuffer verwenden, ansonsten entfernen Sie die folgende Zeile:</comment>
vga=788                   <comment># Die Framebuffereinstellung: Passen Sie diese nach Ihrem Willen an.</comment>

<comment># Nur für Nicht-GRP Benutzer</comment>
image=/boot/kernel-2.4.25
  label=gentoo            <comment># Der Name den wir der Sektion geben</comment>
  read-only               <comment># Starte mit einem nur-lesen Root. Nicht ändern!</comment>
  root=/dev/hda3          <comment># Ort des Root Dateisystems</comment>
<comment># Für genkernel Benutzer</comment>
image=/boot/kernel-2.4.25
  label=gentoo
  read-only
  root=/dev/ram0
  append="init=/linuxrc real_root=/dev/hda3"
  initrd=/boot/initrd-2.4.25
<comment># Die nächsten zwei Zeilen werden nur benötigt, wenn Sie Dualboot mit einem Windowssystem einrichten wollen.</comment>
<comment># In diesem Fall liegt Windows auf /dev/hda6.</comment>
other=/dev/hda6
  label=windows
</pre>

<note>
Wenn Sie ein anderes Partitionierungsschema verwenden, passen Sie die
Konfiguration entsprechend an.
</note>

<p>
Wenn Sie weitere Optionen an den Kernel übermitteln müssen, fügen Sie ein
<c>append</c> Statement zu der Sektion hinzu. Als Beispiel fügen wir das
<c>acpi=off</c> Statement hinzu um ACPI Unterstützung zu deaktivieren:
</p>

<pre caption = "Benutzung von append um Kerneloptionen hinzuzufügen">
image=/boot/kernel-2.4.25
  label=gentoo
  read-only
  root=/dev/hda3
  <i>append="acpi=off"</i>
</pre>

<p>
<c>Genkernel</c> Benutzer sollten wissen, dass Ihr Kernel dieselben
Bootoptionen benutzt wie der auf der LiveCD. Zum Beispiel, wenn Sie SCSI Geräte
haben, sollten Sie <c>doscsi</c> als Kerneloption hinzufügen
</p>

<p>
Speichern Sie nun die Datei und verlassen Sie den Editor. Zum Schluss müssen
Sie <c>/sbin/lilo</c> ausführen, damit LILO die <path>/etc/lilo.conf</path> auf
Ihr System anwenden kann (also sich selbst auf der Platte installiert).
</p>

<pre caption = "Fertigstellen der LILO Installation">
# <i>/sbin/lilo</i>
</pre>

<p>
Fahren Sie nun mit der <uri
link="?part=1&amp;chap=10">Installation von benötigten Systemtools</uri>
fort.
</p>

</body>
</subsection>
</section>
<section>
<title>Alternativ: Benutzung von aboot</title>
<body>

<impo>
aboot kann nur auf Alpha-basierenden System verwendet werden!
</impo>

<p>
Zunächst installieren wir aboot auf unserem System. Natürlich benutzen wir
<c>emerge</c> dazu:
</p>

<pre caption = "Installieren von aboot">
# <i>emerge aboot</i>
</pre>

<p>
Im nächsten Schritt machen wir unsere Bootdiskette bootbar. Diese wird
<c>aboot</c> starten, wenn Sie Ihr System booten. Wir machen unsere
Bootdiskette bootbar durch das Schreiben des <c>aboot</c> Bootloaders auf den
Anfang der Diskette.
</p>

<pre caption = "Die Bootdiskette bootbar machen">
# <i>swriteboot -f3 /dev/sda /boot/bootlx</i>
# <i>abootconf /dev/sda 2</i>
</pre>

<note>
Wenn Sie ein anderes Partitionierungschema verwenden als das, welches wir in
diesem Kapitel verwendet haben, müssen Sie ihre Befehle dementsprechend ändern.
Bitte lesen Sie die entsprechenden Manualseiten (<c>man 8 swriteboot</c> und
<c>man 8 abootconf</c>).
</note>

<p>
Zusätzlich können Sie dafür dafür sorgen, dass Gentoo einfacher bootet indem
Sie die aboot Konfigurationsdatei und die SRM boot_osflags Variable einrichten.
Sie müssen sicherstellen, dass die bootdef_dev auch entsprechend gesetzt ist
(an der Konsole einfacher als von Linux aus).
</p>

<pre caption = "Das Booten von Gentoo verbessern">
# <i>echo '0:2/boot/vmlinux.gz root=/dev/sda2' &gt; /etc/aboot.conf</i>
# <i>echo -n 0 &gt; /proc/srm_environment/named_variables/boot_osflags</i>
# <i>echo -n '' &gt; /proc/srm_environment/named_variables/boot_file</i>
</pre>

<p>
Wenn Sie unter Benutzung einer seriellen Konsole installieren, vergessen Sie
nicht das Flag für das booten serieller Konsolen (serial console boot flag) in
<path>aboot.conf</path> einzubinden.  In <path>/etc/aboot.conf.example</path>
finden Sie weitere Informationen.
Zusätzlichen müssen Sie noch das Einloggen am seriellen Anschluss erlauben:
</p>

<pre caption = "Erlauben des Logins am seriellen Anschluss">
# <i>echo tts/0 &gt;&gt; /etc/securetty</i>
# <i>echo 's0:12345:respawn:/sbin/agetty 9600 tts/0 vt100' &gt;&gt; /etc/inittab</i>
</pre>

<p>
Fahren Sie nun mit der <uri
link="?part=1&amp;chap=10">Installation von benötigten Systemtools</uri>
fort.
</p>

</body>
</section>
<section>
<title>Alternativ: Benutzung von MILO</title>
<body>

<impo>
MILO kann nur auf Alpha-basierenden Systemen verwendet werden!
</impo>

<p>
Bevor Sie fortfahren, sollten Sie sich entscheiden, wie Sie MILO benutzen
wollen. In diesem Abschnitt werden wir annehmen, dass Sie eine MILO
Bootdiskette erstellen wollen. Wenn Sie von einer MS-DOS Partition auf Ihrer
Festplatte starten wollen, sollten sie die Befehle entsprechend erweitern.
</p>

<p>
Um MILO zu installieren benutzen wir <c>emerge</c>.
</p>

<pre caption = "Installieren von MILO">
# <i>emerge milo</i>
</pre>

<p>
Nachdem MILO installiert wurde, sollten die MILO-Images in
<path>/opt/milo</path> sein. Die untenstehenden Befehle erstellen eine
Bootdiskette zur Benutzung für MILO. Denken Sie daran das richtige Image für
Ihr Alpha-System zu verwenden.
</p>

<pre caption = "Installieren von MILO auf einer Diskette">
<comment>(Schieben Sie zunächst eine leere Diskette ein)</comment>
# <i>fdformat /dev/fd0</i>
# <i>mformat a:</i>
# <i>mcopy /opt/milo/milo-2.2-18-gentoo-ruffian a:\milo</i>
# <i>mcopy /opt/milo/linload.exe a:\lilnload.exe</i>
<comment>(Nur wenn sie Ruffian haben:</comment>
  # <i>mcopy /opt/milo/ldmilo.exe a:\ldmilo.exe</i>
<comment>)</comment>
# <i>echo -ne '\125\252' | dd of=/dev/fd0 bs=1 seek=510 count=2</i>
</pre>

<p>
Ihre MILO Bootdiskette ist nun bereit um Gentoo Linux zu booten. Sie müssen
vielleicht noch Umgebungsvariablen in Ihrem ARCS Firmware setzen um MILO zum
starten zu kriegen; dies wird alles in dem <uri
link="http://tldp.org/HOWTO/MILO-HOWTO/">MILO-HOWTO</uri> erklärt mit einigen
Beispielen für gängige Systeme und Beispiele der Kommandos für den Gebrauch im
interaktiven Modus.
</p>

<p>
Das <uri link="http://tldp.org/HOWTO/MILO-HOWTO/">MILO-HOWTO</uri> nicht zu
lesen ist eine <e>schlechte</e> Idee.
</p>

<p>
Fahren Sie nun mit der <uri
link="?part=1&amp;chap=10">Installation von benötigten Systemtools</uri>
fort.
</p>

</body>
</section>
<section>
<title>Alternativ: Benutzung von SILO</title>
<body>

<p>
Es ist nun Zeit für die Installation und Konfiguration von <uri
link="http://www.sparc-boot.org">SILO</uri>, dem Sparc Improved boot LOader.
</p>

<pre caption = "Installieren von SILO">
# <i>emerge silo</i>
</pre>

<p>
Öffnen Sie nun Ihren bevorzugten Editor (wir benutzen <c>nano</c> als Beispiel)
und erstellen Sie <path>/etc/silo.conf</path>.
</p>

<pre caption = "Erstellen von /etc/silo.conf">
# <i>nano -w /etc/silo.conf</i>
</pre>

<p>
Nachfolgend finden Sie ein Beispiel: <path>/etc/silo.conf</path>. Es wird das
Partitionierungsschema benutzt, das wir in diesem Buch verwenden, sowie
<path>kernel-2.4.25</path> als Kernel-Image.
</p>

<pre caption = "Beispiels /etc/silo.conf">
partition = 1         <comment># Boot Partition</comment>
root = /dev/hda4      <comment># Root Partition</comment>
timeout = 15          <comment># Warte 15 Sekunden bevor die Standardsektion gebootet wird</comment>

image = /boot/kernel-2.4.25
  label = linux
</pre>

<p>
Wenn Sie die Beispiel <path>silo.conf</path> verwenden, die von Portage
geliefert wurde, dann vergewissern Sie sich, dass Sie <e>alle</e> Zeilen
auskommentieren, die Sie nicht benötigen.
</p>

<p>
Wenn Sie eine separate <path>/boot</path> Partition haben, kopieren Sie die
Konfigurationsdatei nach <path>/boot</path> und führen Sie <c>/sbin/silo</c>
aus:
</p>

<pre caption = "Nur wenn Sie /boot auf einer separaten Partition haben">
# <i>cp /etc/silo.conf /boot</i>
# <i>/sbin/silo -C /boot/silo.conf</i>
/boot/silo.conf appears to be valid
</pre>

<p>Wenn Ihr <path>/boot</path> Verzeichnis auf Ihrer Root Partition liegt,
führen Sie einfach <c>/sbin/silo</c> aus:
</p>

<pre caption = "Ausführen von SILO">
# <i>/sbin/silo</i>
/etc/silo.conf appears to be valid
</pre>

<p>
Fahren Sie nun mit der <uri
link="?part=1&amp;chap=10">Installation von benötigten Systemtools</uri>
fort.
</p>

</body>
</section>
<section>
<title>Alternativ: Benutzung von PALO</title>
<body>

<impo>
PALO kann nur auf HPPA-basierenden Systemen verwendet werden!
</impo>

<p>
Auf der PA-RISC Plattform wird der Bootloader Palo genannt. Sie können die
Konfigurationsdatei in <path>/etc/palo.conf</path> finden. Hier ist eine
Beispielkonfiguration:
</p>

<pre caption = "/etc/palo.conf Beispiel">
--commandline=2/vmlinux root=/dev/sdb2 HOME=/
--recoverykernel=/vmlinux.old
--init-partitioned=/dev/sdb
</pre>

<p>
Die erste Zeile nennt Palo den Ort des Kernels und welche Bootparameter
verwendet werden müssen. <c>2/vmlinux</c> bedeutet, dass der Kernel
<c>vmlinux</c> auf der zweiten Partition liegt. Achtung: Der Pfad zum Kernel
ist relativ zur Partition, nicht zum Root des Dateisystems.
</p>

<p>
Die zweite Zeile gibt an, welcher Wiederherstellungskernel benutzt werden soll.
Es ist Ihre erste Installation und Sie haben keinen Wiederherstellungskernel,
daher kommentieren Sie dieses bitte aus. Die dritte Zeile gibt an, auf welcher
Festplatte Palo sich befindet.
</p>

<p>
Wenn die Konfiguration beendet ist, führen Sie einfach <c>palo</c> aus.
</p>

<pre caption = "Anwenden der PALO Konfiguration">
# <i>palo</i>
</pre>

<p>
Fahren Sie nun mit der <uri
link="?part=1&amp;chap=10">Installation von benötigten Systemtools</uri>
fort.
</p>

</body>
</section>
<section>
<title>Alternativ: Die Benutzung von yaBoot</title>
<subsection>
<title>Einleitung</title>
<body>

<impo>
yaBoot kann nur auf NewWorld PPC-basierenden Systemen verwendet werden!
</impo>

<p>
Es gibt zwei Wege yaBoot für Ihr System zu konfigurieren. Sie können das neue
und verbesserte <c>yabootconfig</c> (vorhanden in <path>yaboot-1.3.8-r1</path>
und später) verwenden, um Yaboot automatisch zu konfigurieren. Wenn Sie aus
irgendeinem Grund nicht <c>yabootconfig</c> verwenden wollen um
<path>/etc/yaboot.conf</path> automatisch einzurichten, editieren Sie einfach
die schon installierte Beispieldatei auf Ihrem System.
</p>

<ul>
  <li><uri link="#doc_chap8_sect2">Standard: Benutzen von yabootconfig</uri></li>
  <li>
    <uri link="#doc_chap8_sect3">Alternativ: yaBoot manuell konfigurieren</uri>
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>Standard: Die Benutzung von yabootconfig</title>
<body>

<p>
<c>yabootconfig</c> wird die Partitionen auf Ihrem System automatisch erkennen
und wird Dual- und Dreifachbootkombinationen mit Linux, Mac OS und Mac OS X
einrichten.
</p>

<p>
Um  <c>yabootconfig</c> benutzen zu können, muss Ihr Laufwerk eine Bootstrap
Partition haben und <path>/etc/fstab</path> muss konfiguriert sein.
Beides sollte durch die vorangegangen Schritte schon geschehen sein. Stellen
Sie zuerst durch das Ausführen von <c>emerge --update yaboot</c> sicher, dass
Sie die neueste Version von yaBoot installiert haben. Dies ist notwendig, weil
die neueste Version über Portage verfügbar sein wird, aber vielleicht noch
nicht in den Stage Dateien vorhanden ist.
</p>

<pre caption = "Installieren von yaBoot">
# <i>emerge --update yaboot</i>
</pre>

<p>
Führen Sie nun <c>yabootconfig</c> aus. Das Programm wird ablaufen und den
Pfad der Bootstrap Partition bestätigen. Tippen Sie <c>Y</c> wenn dies korrekt
ist. Wenn nicht, überprüfen Sie erneut <path>/etc/fstab</path>. Yabootconfig
wird dann Ihre Systemkonfiguration überprüfen, <path>/etc/yaboot.conf</path>
erstellen und <c>mkofboot</c>für Sie ausführen. <c>mkofboot</c>wird gebraucht
um die Bootstrap Partition zu formatieren und dorthinein die yaBoot
Konfigurationsdatei zu installieren.
</p>

<p>
Sie sollten den Inhalt von <path>/etc/yaboot.conf</path> überprüfen. Wenn Sie
Veränderungen an <path>/etc/yaboot.conf</path> vornehmen (wie die
Standard-/Boot OS Einstellung zu setzen) stellen Sie sicher, dass Sie
<c>ybin -v</c> erneut ausführen um die Veränderungen auf die Bootstrap
Partition anzuwenden.
</p>

<p>
Fahren Sie nun mit der <uri
link="?part=1&amp;chap=10">Installation von benötigten Systemtools</uri>
fort.
</p>

</body>
</subsection>
<subsection>
<title>Alternativ: Die manuelle yaBoot Konfiguration</title>
<body>

<p>
Stellen Sie zuerst sicher, dass die neueste Version von <c>yaboot</c> auf Ihrem
System installiert ist:
</p>

<pre caption = "Installieren von yaBoot">
# <i>emerge --update yaboot</i>
</pre>

<p>
Nachfolgend finden Sie eine vollständige <path>yaboot.conf</path> Datei. Ändern Sie
diese nach Belieben:
</p>

<pre caption = "/etc/yaboot.conf">
<comment>## /etc/yaboot.conf
##
## Führen Sie: "man yaboot.conf" für Details aus. Machen Sie keine
## Änderungen bevor Sie das nicht getan haben!
## Siehe auch: /usr/share/doc/yaboot/examples für Beispielkonfigurationen
##
## Für ein Dualbootmenü fügen Sie eine oder mehrere dieser hinzu:
## bsd=/dev/hdaX, macos=/dev/hdaY, macosx=/dev/hdaZ

## unsere Bootstrap Partition:</comment>

boot=/dev/hda9

<comment>##hd: ist offene Firmwaresprache für hda</comment>
device=hd:
partition=11

root=/dev/hda11
delay=5
defaultos=macosx
timeout=30
install=/usr/lib/yaboot/yaboot
magicboot=/usr/lib/yaboot/ofboot

<comment>#################
## Dieser Abschnitt kann doppelt verwendet werden, wenn Sie mehr als einen Kernel
## oder Satz von Bootoptionen haben.
#################</comment>
image=/boot/vmlinux
  label=Linux
  sysmap=/boot/System.map
  read-only
<comment>##################</comment>

macos=/dev/hda13
macosx=/dev/hda12
enablecdboot
enableofboot
</pre>

<p>
Sobald <path>yaboot.conf</path> so eingerichtet ist, wie Sie es wünschen,
führen Sie <c>mkofboot -v</c> aus um die Einstellungen in der Bootstrap
Partition zu installieren. <e>Vergessen Sie dies nicht!</e> Wenn alles gut geht
und Sie dieselben Optionen haben wie wir im obigen Beispiel, gibt Ihnen der
nächste Neustart ein simples Bootmenü mit fünf Einträgen. Wenn Sie später Ihre
yaBoot Konfiguration erneuern, müssen Sie einfach <c>ybin -v</c> ausführen um
Ihre Bootstrap Partition auf den neuesten Stand zu bringen - <c>mkofboot</c>
wird nur für die erstmalige Einrichtung benötigt.
</p>

<p>
Für weitere Informationen über Yaboot werfen Sie einen Blick auf das<uri
link="http://penguinppc.org/projects/yaboot">yaboot Projekt</uri>. Fahren
Sie nun mit der <uri
link="?part=1&amp;chap=10">Installation von benötigten Systemtools</uri>
fort.
</p>

</body>
</subsection>
</section>
<section>
<title>Alternativ: BootX</title>
<body>

<impo>
BootX kann nur auf OldWorld PPC-basierenden Systemen verwendet werden!
</impo>

<p>
Wenn Sie BootX verwenden wollen, müssen Sie an dieser Stelle nichts tun. Nach
dem Neustart müssen Sie jedoch einige Einstellungen im BootX Control Panel
(innerhalb von MacOS) vornehmen. Wir behandeln dies später in der Installation.
</p>

<p>
Fahren Sie nun mit der <uri
link="?part=1&amp;chap=10">Installation von benötigten Systemtools</uri>
fort.
</p>

</body>
</section>
<section>
<title>Alternativ: MIPS PROM</title>
<subsection>
<body>

<p>
MIPS benötigt keinen zusätzlich installierten Bootloader. Das MIPS PROM sorgt
für das Booten, Sie müssen nur für eine funktionsfähige Installation des Kernel
sorgen.
</p>

<p>
Zuerst installieren Sie <c>dvhtool</c>. Dieses wird zum kopieren des Kernel auf
den SGI Volume Header benötigt.
</p>

<pre caption="dvhtool installieren">
# <i>emerge dvhtool</i>
</pre>

<p>
Kopieren Sie den Kernel nun in den SGI Volume Header. Standardmäßig geht
<c>dvhtool</c> davon aus, dass der SGI Volume Header auf <path>/dev/sda</path>
liegt. Wenn das nicht der Fall ist (wenn z.B. IRIX auf <path>/dev/sda</path>
installiert ist), dann müssen Sie <c>dvhtool</c> dieses durch die Option
<c>-d &lt;device&gt;</c> mitteilen.
</p>

<pre caption="Einen Kernel in den SGI Volume Header kopieren">
# <i>dvhtool --unix-to-vh &lt;kernel name in /boot&gt; &lt;name you want to give in volume header&gt;</i>
</pre>

<p>
Um alle verfügbaren Einträge im Volume zu sehen, benutzen Sie
<c>--print-volume-directory</c>:
</p>

<pre caption="Ansicht aller verfügbarer Einträge im Volume">
# <i>dvhtool --print-volume-directory</i>
</pre>

<p>
Um Ihr System so einzurichten, dass es Gentoo/MIPS booten kann, müssen Sie noch
ein paar Einstellungen im MIPS PROM vornehmen. Wir werden das später
beschreiben, wenn Sie die Installation abgeschlossen haben.
</p>

<p>
Fahren Sie nun mit der <uri link="?part=1&amp;chap=10">Installation von
benötigten Systemtools</uri> fort.
</p>

</body>
</subsection>
</section>
</sections>
