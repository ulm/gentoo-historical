<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- English CVS Version: 1.15 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/hb-install-hppa-disk.xml,v 1.8 2005/06/17 23:53:49 dertobi123 Exp $ -->

<sections>

<version>1.11</version>
<date>2005-06-10</date>

<section>
<title>Einführung in Block Devices</title>
<subsection>
<title>Block Devices</title>
<body>

<p>
Wir werden einen guten Einblick in die Festplatten bezogenen Aspekte von Gentoo
Linux und Linux im allgemeinen, inklusive Linux Dateisystemen, Partitionen und
Block Devices erhalten.
Dann, sobald Sie mit den Vor- und Nachteilen von Festplatten und Dateisystemen
vertraut sind, werden Sie durch den Prozess des Partitionierens und der
Dateisystemerstellung für Ihre Gentoo Linux Installation geführt.
</p>

<p>
Zu Beginn werden wir Ihnen <e>Block Devices</e> vorstellen. Das berühmteste
Block Device is warscheinlich das, welches das erste SCSI Laufwerk in einem
Linux System repräsentiert, namentlich <path>/dev/sda</path>.
</p>

<p>
Das obige Block Device repräsentiert ein abstraktes Interface zur Festplatte.
Benutzerprogramme können diese Block Device benutzen, um Ihre Festplatte
anzusprechen, ohne sich darum zu kümmern, ob Ihre Festplatten IDE, SCSI oder
irgendwas anderes sind. Das Programm kann den Speicherplatz auf der Festplatte
einfach als eine Anhäufung von zusammenhängenden, beliebig zugreifbaren
512-Byte Blöcken ansprechen.
</p>

</body>
</subsection>
<subsection>
<title>Partitionen</title>
<body>

<p>
Obwohl es theoretisch möglich ist eine ganze Festplatte zu nutzen, um Ihr Linux
System zu beherbergen, wird dies in der Praxis so gut wie nie gemacht.
Stattdessen werden komplette Festplatten Block Devices in kleinere, besser
verwaltbare Block Devices unterteilt. Sie werden <e>Partitionen</e> genant.
Andere Architekturen nutzen eine ähnliche Technik, dort werden Sie <e>Slices</e>
genannt.
</p>

</body>
</subsection>
</section>
<section>
<title>Erstellung eines Partitionsschemas</title>
<subsection>
<title>Wie viele und wie groß?</title>
<body>

<p>
Die Anzahl an Partitionen hängt von Ihrer Umgebung ab.
Wenn Sie z.B. eine Menge User haben, wollen Sie
höchst wahrscheinlich Ihr <path>/home</path> separat halten, da es die
Sicherheit erhöht und Backups einfacher macht. Wenn Sie Gentoo installieren um
als Mailserver zu fungieren, sollten Sie <path>/var</path> separat halten, da
alle Mails in <path>/var</path> gespeichert werden. Eine gute Wahl des
Dateisystems maximiert dann zusätzlich die Performance. Gameserver sollten ein
separates <path>/opt</path> haben, da die meisten Game Server dort installiert
werden. Der Grund ist ähnlich wie bei <path>/home</path>:
Sicherheit und Backups. Es liegt definitiv in Ihrem Interesse 
<path>/usr</path> groß zu behalten: es wird nicht nur die Mehrheit der 
Programme enthalten; der Portage Baum allein belegt etwa 500Mbyte, ohne die 
verschiedensten Quellen die darin gespeichert sind mitzurechnen.
</p>

<p>
Wie Sie sehen können, hängt es sehr stark davon ab, was Sie erreichen wollen.
Separate Partitionen oder Volumes haben folgende Vorteile:
</p>

<ul>
<li>
  Sie können das Filesystem mit der höchsten Performance für jede Partition oder
  jedes Volume auswählen
</li>
<li>
  Ihr System behält noch freien Speicherplatz, selbst wenn ein defektes Tool
  ununterbrochen Dateien auf eine Partition oder ein Volume schreibt
</li>
<li>
  Falls nötig können Dateisystem Checks zeitlich verkürzt werden, in dem
  mehrere Checks parallel durchgeführt werden können (obwohl dieser Vorteil eher
  mit mehreren Festplatten als mit mehreren Partitionen zum Tragen kommt)
</li>
<li>
  Die Sicherheit kann erhöht werden, indem Sie einige Partitionen oder Volumes
  read-only, nosuid (setuid bits werden ignoriert), noexec (executable bits
  werden ignoriert) etc mounten.
</li>
</ul>

<p>
Wie dem auch sei, mehrere Partitionen haben einen großen Nachteil: wenn sie nicht
ordentlich konfiguriert werden, könnte das Resultat ein System sein, welches viel
Speicherplatz auf der einen Partition und keinen auf einer anderen frei hat.
Weiterhin gibt es ein 15 Partitionen Limit bei SCSI und SATA.
</p>

</body>
</subsection>
</section>
<section id="fdisk">
<title>Benutzung von fdisk auf HPPA zur Partitionerung der Festplatte</title>
<body>

<p>
Erstellen Sie die gewünschten Partitionen mit <c>fdisk</c>:
</p>

<pre caption="Partitionierung der Festplatte">
# <i>fdisk /dev/sda</i>
</pre>

<p>
HPPA Maschinene benutzen PC Standard DOS Partitionstabellen. Um eine neu DOS
Partitionstabelle zu erstellen geben Sie einfach <c>o</c> ein.
</p>

<pre caption="Erstellen einer DOS Partitionstabelle">
# <i>fdisk /dev/sda</i>

Command (m for help): <i>o</i>
Building a new DOS disklabel.
</pre>

<p>
PALO benötigt eine spezielle Partitionierung. Sie müssen eine Partition mit
einer Größe von mindestens 16MB am Beginn der Festplatte anlegen. Der
Partitionstyp muss <e>f0</e> sein (Linux/PA-RISC boot).
</p>

<impo>
Wenn Sie dies ignorieren und ohne spezielle PALO Partition fortfahren, wird Ihr
System aufhören Sie zu lieben und nicht mehr Starten. Wenn Ihre Festplatte größer
als 2GB ist, stellen Sie sicher, dass die Boot Partition innerhalb der ersten 2GB
Ihrer Festplatte liegt. PALO kann keinen Kernel hinter der 2GB Grenze lesen.
</impo>

<pre caption="Ein einfaches Standard Partitionsschema">
# <i>cat /etc/fstab</i>
/dev/sda2    /boot   ext3    noauto,noatime   1 1
/dev/sda3    none    swap    sw               0 0
/dev/sda4    /       ext3    noatime          0 0

# <i>fdisk /dev/sda</i>

Command (m for help): <i>p</i>

Disk /dev/sda: 4294 MB, 4294816768 bytes
133 heads, 62 sectors/track, 1017 cylinders
Units = cylinders of 8246 * 512 = 4221952 bytes

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1               1           8       32953   f0  Linux/PA-RISC boot
/dev/sda2               9          20       49476   83  Linux
/dev/sda3              21          70      206150   82  Linux swap
/dev/sda4              71        1017     3904481   83  Linux
</pre>

<p>
Nachdem Ihre Partitionen nun erstellt sind, können Sie mit dem
<uri link="#filesystems">Erstellen der Dateisysteme</uri> fortfahren
</p>

</body>
</section>
<section id="filesystems">
<title>Erstellen der Dateisysteme</title>
<subsection>
<title>Einleitung</title>
<body>

<p>
Jetzt sind Ihre Partitionen erstellt, so dass es nun an der Zeit ist
Dateisysteme anzulegen. Wenn Sie mit dem zufrieden sind, was wir Ihnen
vorschlagen, dann fahren Sie mit <uri link="#filesystems-apply">Dateisystem
auf einer Partition anlegen</uri> fort. Wenn nicht, lesen Sie weiter, um
ein wenig mehr über Dateisysteme zu lernen ...
</p>

</body>
</subsection>
<subsection>
<title>Dateisysteme?</title>
<body>

<p>
Verschiedene Dateisysteme sind verfügbar. Für die HPPA Architektur sind ext2,
ext3, XFS und reiserfs als stabil bekannt. Die anderen sind sehr experimentell.
</p>

<p>
<b>ext2</b> ist das erprobte und wahre Linux Dateisystem, unterstützt aber kein
Metadata Journaling, was bedeutet, dass routinemäßige Dateisystem Checks beim
Booten sehr zeitaufwändig sein können. Es gibt mittlerweile eine Auswahl an
journalisierenden Dateisystemen neuerer Generation, die die Konsistenzchecks sehr
schnell erledigen und dadurch im Vergleich mit den nicht-journalisierenden
Gegenstücken vorzuziehen sind. Jounalisierende Dateisysteme verhindern lange
Verzögerungen beim Booten, wenn sich das Dateisystem in einem inkonsistenten
Zustand befindet.
</p>

<p>
<b>ext3</b> ist die journalisierende Version des ext2 Dateisystem, die Metadata
Journaling für schnelle Wiederherstellung sowie andere verbesserte Journaling
Modi wie "full data" und "ordered data" Jornaling unterstützt. ext3 ist ein sehr
gutes und verlässliches Dateisystem. Es hat eine zusätzliche b-tree Indexing
Option die in fast allen Situationen hohe Performance ermöglicht. Kurz gesagt:
ext3 ist ein excellentes Dateisystem.
</p>

<p>
<b>ReiserFS</b> ist ein B*-tree basierendes Dateisystem mit einer guten
Performance und überholt sowohl ext2 und ext3 im Umgang mit kleinen Dateien
(Dateien kleiner als 4k) oftmals mit einem Faktor von 10x-15x. ReiserFS skaliert
extrem gut und hat Metadata Journaling. Seit Kernel 2.4.18+ ist ReiserFS
stabil und sowohl als Dateisystem für generelle Anwendungen, als auch für
extreme Fälle wie große Dateisysteme, den Gebrauch mit vielen kleinen Dateien,
den Gebrauch mit sehr großen Dateien und Verzeichnissen mit tausenden von
Dateien brauchbar.
</p>

<p>
<b>XFS</b> ist ein Dateisytem mit metadata journaling, das mit einem robusten
Feature-Set kommt und auf Skalierbarkeit ausgelegt ist. Wir empfehlen den Einsatz
dieses Dateisystems nur auf Linux Systemen mit High-End SCSI und/oder Fibre Channel
Storage und einer redundaten Stromversorgung. Da XFS agressiv vom RAM gebraucht
macht, können unsachgemäß designte Programme (solche die keine
Vorsichtsmaßnahmen treffen, wenn Sie auf die Festplatte schreiben und davon
gibt es einige) dazu führen, dass eine ganze Menge Daten verloren gehen, wenn
das System unerwartet ausfällt.
</p>

<p>
<b>JFS</b> ist IBMs Hochleistungs Journaling Dateisystem. Es ist vor kurzem
einsatzbereit geworden und es gibt noch keine ausreichende Spur, so dass seine
allgemeine Stabilität an diesem Punkt weder positiv noch negativ kommentiert
werden kann.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>Eine Partition mit einem Dateisystem formatieren</title>
<body>

<p>
Um ein Dateisystem auf einer Partition oder einem Volume zu erstellen, gibt es
für jedes Dateisystem Tools:
</p>

<table>
<tr>
  <th>Dateisystem</th>
  <th>Kommando</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
Um die Boot Partition (<path>/dev/sda1</path> in unserem Beispiel) als ext2 und
die Root Partition (<path>/dev/sda3</path> in unserem Beispiel) als ext3 (wie in
unserem Beispiel) zu formatieren, führen Sie folgende Kommandos aus:
</p>

<pre caption="Eine Partition mit einem Dateisystem formatieren">
# <i>mke2fs /dev/sda2</i>
# <i>mke2fs -j /dev/sda4</i>
</pre>

<p>
Erstellen Sie nun die Dateisysteme auf Ihren neu erstellten Partionen (oder
logischen Volumes).
</p>

</body>
</subsection>
<subsection>
<title>Aktivieren der Swap Partition</title>
<body>

<p>
<c>mkswap</c> ist das Kommando, mit dem Sie die Swap Partition initialisieren:
</p>

<pre caption="Erstellen der Swap Signatur">
# <i>mkswap /dev/sda3</i>
</pre>

<p>
Um die Swap Partition zu aktivieren, benutzen Sie <c>swapon</c>:
</p>

<pre caption="Aktivieren der Swap Partition">
# <i>swapon /dev/sda3</i>
</pre>

<p>
Erstellen und aktivieren Sie jetzt Ihre Swap Partition mit den soeben 
erläuterten Befehlen.
</p>

</body>
</subsection>
</section>
<section>
<title>Mounten</title>
<body>

<p>
Nachdem Ihre Partitionen nun initialisiert sind und ein Dateisystem beinhalten,
ist es an der Zeit diese Partitionen zu mounten. Benutzen Sie das <c>mount</c>
Kommando. Vergessen Sie nicht die notwendigen Mount Verzeichnisse für jede
erstellte Partition anzulegen. Als Beispiel mounten wir die root und boot
Partition:
</p>

<pre caption="Mounten von Partitionen">
# <i>mount /dev/sda4 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/sda2 /mnt/gentoo/boot</i>
</pre>

<note>
Wenn Sie <path>/tmp</path> auf eine separate Partition legen möchten, stellen
Sie sicher, dass Sie die Berechtigungen nach dem mounten ändern:
<c>chmod 1777 /mnt/gentoo/tmp</c>. Dies gilt auch für <path>/var/tmp</path>.
</note>

<p>
Sie müssen auch noch das proc Dateisystem (ein virtuelles Interface zum Kernel)
auf <path>/proc</path> mounten. Zunächst müssen wir jedoch alle Dateien auf der
Partition ablegen.
</p>

<p>
Fahren Sie mit der <uri link="?part=1&amp;chap=5">Installation der Gentoo
Installations Dateien </uri> fort.
</p>

</body>
</section>
</sections>
