<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- English CVS Version: 1.1 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/2005.0/hb-install-sparc-kernel.xml,v 1.3 2005/08/14 01:14:42 grahl Exp $ -->

<sections>

<version>1.8</version>
<date>2004-09-01</date>

<section>
<title>Setzen der Zeitzone des Systems</title>
<body>

<p>
Zuerst müssen Sie dem System sagen, in welcher Zeitzone es sich befindet. Dazu
suchen Sie sich unter <path>/usr/share/zoneinfo</path> die entsprechende
Zeitzone aus und verlinken sie mit <c>ln</c> nach <path>/etc/localtime</path>:
</p>

<pre caption="Setzen der Zeitzone">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Beispiel: GMT)</comment>
# <i>ln -sf /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Installieren der Quellen</title>
<subsection>
<title>Auswählen eines Kernels</title>
<body>

<p>
Der Kern um den herum alle Distributionen gebaut sind ist der Linux Kernel. Es
ist die Ebene zwischen den Benutzerprogrammen und der Systemhardware. Gentoo
bietet seinen Benutzern verschiedene mögliche Kernelquellen. Eine komplette
Liste mit Beschreibungen finden Sie im <uri link="http://www.gentoo.org/doc/de/gentoo-kernel.xml">
Gentoo Kernel Guide</uri>.
</p>

<p>
Für Sparc-basierenden Systeme haben wir die <c>vanilla-sources</c> (die
Standardkernelquelle wie entwickelt von den Linux-Kernel Entwicklern), die
<c>development-sources</c> (die Standard 2.6 Kernelquellen) und die
<c>sparc-sources</c> (Kernelquelle optimiert für SPARC Benutzer). Wenn Sie
Gentoo ohne funktionierende Internetverbindung installieren ist Ihre Auswahl auf
<c>vanilla-sources</c> oder <c>sparc-sources</c> beschränkt.
</p>

<p>
Wählen Sie Ihre Kernelquelle aus und installieren Sie diese mit <c>emerge</c>.
</p>

<p>
Im nächsten Beispiel installieren wir die <c>vanilla-sources</c> (da dies
die verfügbaren Sourcen für eine Netzwerklose Installation sind). Natürlich
müssen Sie nun die Quelle verwenden, die Sie gewählt haben; dies ist nur ein
Beispiel. Beachten Sie, dass Sie nur <e>eine</e> Kernelquelle installieren
sollten.
</p>

<pre caption="Installieren einer Kernelquelle">
<comment>(Wenn Sie eine netzwerklose Installation durchführen</comment>
# <i>emerge vanilla-sources</i>
</pre>

<p>
Wenn Sie einen Blick in <path>/usr/src</path> werfen, sollten Sie einen Symlink
sehen, genannt <path>linux</path>, der auf Ihre Kernelquelle verweist.
</p>

<pre caption="Anzeigen des Kernelquellen Symlinks">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux-&gt;linux-2.4.26
</pre>

<p>
Wenn das nicht der Fall ist (also der Symlink auf eine andere Kernelquelle
verweist) ändern Sie den Symlink bevor sie weitermachen:
</p>

<pre caption="Ändern des Kernelquellen Symlinks">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.4.26 linux</i>
</pre>

<p>
Nun ist es Zeit Ihre Kernelquelle zu konfigurieren und zu kompilieren
</p>

</body>
</subsection>
</section>
<section>
<title>Manuelle Konfiguration</title>
<subsection>
<title>Einführung</title>
<body>

<p>
Einen Kernel manuell zu konfigurieren wird oft als der schwierigste Teil
gesehen, den jeder Linux Benutzer insgesamt meistern muss. Nichts ist weiter von
der Wahrheit entfernt -- nach der Konfiguration von einigen Kerneln werden Sie
sich gar nicht daran erinnern, dass es schwer war ;-)
</p>

<p>
Jedoch eine Sache <e>ist</e> wahr: Sie müssen Ihr System kennen, wenn Sie
beginnen einen Kernel manuell zu konfigurieren. Die meisten Informationen
können gesammelt werden, indem Sie sich <path>/proc/pci</path> ansehen (oder
durch <c>lspci</c> benutzen, wenn vorhanden). Sie können auch
<c>lsmod</c> ausführen um zu sehen welche Kernelmodule die Installations CD 
verwendet (es kann ihnen einen netten Hinweis darauf geben was zu aktivieren 
ist).
</p>

<p>
Gehen Sie nun in Ihr Kernelquellverzeichnis und führen Sie <c>make menuconfig</c>
aus. Dies startet ein ncurses-basierendes Konfigurationsmenü.
</p>

<pre caption="Menuconfig starten">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Ihnen werden verschiedene Konfigurationssektionen präsentiert. Wir listen
zunächst einige Optionen auf, die sie aktivieren müssen (ansonsten wird Gentoo
nicht funktionieren, oder ohne zusätzliche Veränderungen nicht richtig
funktionieren).
</p>

</body>
</subsection>
<subsection>
<title>Aktivieren der benötigten Optionen</title>
<body>

<p>
Zunächst aktivieren Sie die Benutzung von Entwicklungs- und Experiementellem/n
Code/Treiber(n). Sie brauchen dies, denn ansonsten werden einige wichtige
Codeabschnitte/Treiber nicht erscheinen.
</p>

<pre caption="Selektieren experimenteller/n Codes/Treiber">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Gehen Sie nun in <c>File Systems</c> und selektieren Sie Unterstützung für die
Dateisysteme die Sie benutzen. Kompilieren Sie diese <e>nicht</e> als Module,
ansonsten wird ihr Gentoo System nicht fähig sein, Ihre Partitionen zu mounten.
Selektieren Sie auch <c>Virtual memory</c>, <c>/proc file system</c>, <c>/dev
file system</c> + <c>Automatically mount at boot</c>:
</p>

<pre caption="Selektieren notwendiger Dateisysteme">
<comment>(Mit einem 2.4.x Kernel)</comment>
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot
  [ ] /dev/pts file system for Unix98 PTYs

<comment>(Mit einem 2.6.x Kernel)</comment>
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] /dev file system support (OBSOLETE)
    [*]   Automatically mount at boot
    [*] Virtual memory file system support (former shm fs)

<comment>(Selektieren Sie eine oder mehrere der folgenden Optionen, wie benötigt
von Ihrem System)
</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Wenn Sie PPPoE benutzen um sich ins Internet einzuwählen oder Sie benutzen
ein Einwahl Modem, brauchen Sie folgende Optionen im Kernel:
</p>

<pre caption="Auswählen PPPoE notwendiger Treiber">
<comment>Mit einem 2.4.x Kernel)</comment>
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports
<comment>(Mit einem 2.6.x Kernel)</comment>
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Die zwei Komprimierungsoptionen werden nicht schaden, aber werden auch nicht
definitiv gebraucht, ebenso die <c>PPP over Ethernet</c> Option, die vielleicht
nur von <c>rp-pppoe</c> verwendet wird, wenn der Kernelmodus PPPoE benutzt wird.
</p>

<p>
Wenn Sie es benötigen, vergessen Sie nicht Ünterstützung für Ihre Netzwerkkarte
in Ihren Kernel einzubinden.
</p>

<p>
Aktivieren Sie zuerst die korrekte Bus-Unterstützung:
</p>

<pre caption="Aktivieren von SBUS/UPA">
Console drivers ---&gt;
  Frame-buffer support ---&gt;
    [*] SBUS and UPA framebuffers
      [*] Creator/Creator3D support     <comment>(Nur für UPA Slot-Adapter, verwendet in vielen Ultras))</comment>
    [*] CGsix (GX,TurboGX) support      <comment>(Nur für SBUS Slot-Adapter, verwendet in vielen SPARCStations)</comment>
</pre>

<p>
Natürlich wollen Sie Unterstützung für die OBP:
</p>

<pre caption="Aktivieren von OBP Unterstützung">
Misc Linux/SPARC drivers ---&gt;
  [*]  /dev/openprom device support
</pre>

<p>
Sie werden auch SCSI-spezifische Unterstützung benötigen:
</p>

<pre caption="Aktivieren von SCSI-spezifischer Unterstützung">
SCSI support ---&gt;
  SCSI low-level drivers ---&gt;
    &lt;*&gt; Sparc ESP Scsi Driver             <comment>(Nur für SPARC ESP On-Board SCSI Adapter)</comment>
    &lt;*&gt; PTI Qlogic, ISP Driver            <comment>(Nur für SBUS SCSI Controller von PTI und QLogic)</comment>
    &lt;*&gt; SYM53C8XX Version 2 SCSI support  <comment>(Nur für Ultra 60 On-Board SCSI Adapter</comment>
</pre>

<p>
Um Ihre Netzwerkkarte zu unterstützen, wählen Sie eines der folgenden:
</p>

<pre caption="Aktivieren von Neztwerkunterstützung">
Network device support ---&gt;
  Ethernet (10 or 100Mbit) ---&gt;
    &lt;*&gt; Sun LANCE support                   <comment>(Nur für SPARCStation, ältere Ultra Systeme und als Sbus Option)</comment>
    &lt;*&gt; Sun Happy Meal 10/100baseT support  <comment>(Nur für Ultra; unterstützt auch "qfe" Quad-Ethernet auf PCI und Sbus)
</comment>
</pre>

<p>
Wenn Sie die Konfiguration des Kernel beendet haben fahren Sie mit <uri
link="#compiling">Kompilieren und Installieren</uri> fort.
Überprüfen Sie aber nach dem kompilieren des Kernels seine Größe:
</p>

<pre caption="Überprüfen der Kernelgröße">
# <i>ls -lh vmlinux</i>
-rw-r--r--    1 root     root         2.4M Oct 25 14:38 vmlinux
</pre>

<p>
Wenn die (unkomprimierte) Größe größer ist als 2.5MB (für Sparc32) oder 3.5MB
(für Sparc64), dann konfigurieren Sie den Kernel solange erneut, bis der Kernel
diese Grenzen nicht mehr überschreitet. Ein Weg dies zu erledigen ist die
Kompilation der meisten Kernel Treiber als Module. Ignoriert man dies, kann es
dazu führen dass der Kernel nicht bootet.
</p>

<note>
Wenn Sie einen 2.6.3 oder neueren Kernel benutzen, können sparc64 Kernel bis zu
7.5 MB gross sein.
</note>

<p>
Wenn ihr Kernel nur ein bisschen zu groß ist, können Sie im mit dem <c>strip</c>
Kommando strippen:
</p>

<pre caption="Strippen des Kernel">
# <i>strip -R .comment -R .note vmlinux</i>
</pre>

<p>
Wenn Sie die Konfiguration des Kernel beendet haben fahren Sie mit <uri
link="#compiling">Kompilieren und Installieren</uri> fort.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilieren und Installieren</title>
<body>

<p>
Nun da Ihr Kernel konfiguriert ist, ist es Zeit ihn zu kompilieren und zu
installieren. Verlassen Sie die Konfiguration und führen Sie <c>make dep
&amp;&amp; make vmlinux modules modules_install</c> aus:
</p>

<pre caption="Kompilieren des Kernels">
<comment>(Für 2.4 Kernel, sparc32)</comment>
# <i>make dep &amp;&amp; make clean vmlinux modules modules_install</i>

<comment>(Für 2.4 Kernel, sparc64)</comment>
# <i>make dep &amp;&amp; make clean vmlinux image modules modules_install</i>

<comment>(Für 2.6 Kernel, sparc32)</comment>
# <i>make &amp;&amp; make modules_install</i>

<comment>(Für 2.6 Kernel, sparc64)</comment>
# <i>make &amp;&amp; make image modules_install</i>
</pre>

<p>
Wenn der Kernel fertig ist mit der Kompilierung, kopieren Sie das Kernel-Image
nach <path>/boot</path>.
</p>

<pre caption="Installieren des Kernels">
<comment>(Für 2.4 Kernel, sparc32)</comment>
# <i>cp vmlinux /boot/kernel-2.4.26</i>

<comment>(Für 2.4 Kernel, sparc64)</comment>
# <i>cp arch/sparc64/boot/image /boot/kernel-2.4.26</i>

<comment>(Für 2.6 Kernel, sparc32)</comment>
# <i>cp arch/sparc/boot/image /boot/kernel-2.6.5</i>

<comment>(Für 2.6 Kernel, sparc64)</comment>
# <i>cp arch/sparc64/boot/image /boot/kernel-2.6.5</i>

<comment>(Vergessen Sie nicht das System.map File zu kopieren)</comment>
# <i>cp System.map /boot</i>
</pre>

<p>
Es ist auch Weise Ihre Kernelkonfiguration nach <path>/boot</path> zu kopieren,
nur für alle Fälle :)
</p>

<pre caption="Erstellen eines Backups der Kernelkonfiguration ">
# <i>cp .config /boot/config-2.4.26</i>
</pre>

<p>Fahren sie nun mit dem <uri link="#kernel_modules">Installieren separater
Kernelmodule</uri> fort.
</p>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Installieren separater Kernelmodule</title>
<subsection>
<title>Konfiguration der Module</title>
<body>

<p>
Sie sollten alle Module, die automatisch geladen werden sollen, in
<path>/etc/modules.autoload.d/kernel-2.4</path> (oder <path>kernel-2.6</path>)
eintragen. Wenn Sie möchten können Sie auch zusätzliche Optionen anhängen.
</p>

<p>
Um alle verfügbaren Module anzuzeigen führen Sie das folgende <c>find</c>
Kommando aus. Vergessen Sie nicht  "&lt;kernel version&gt;" mit der Version
Ihres Kernel zu ersetzen, den Sie gerade kompiliert haben:
</p>

<pre caption="Listen aller verfügbarer Module">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Um zum Beispiel das <c>3c59x.o</c> Modul automatisch zu laden editieren Sie die
entweder <path>kernel2-.4</path> oder das <path>kernel-2.6</path> Datei und
tragen das Modul ein.
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.4">
<comment>(Beispiel für 2.4 kernels)</comment>
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4 oder kernel-2.6">
3c59x
</pre>

<p>
Führen Sie nun <c>modules-update</c> aus um Ihre Änderungen zur
<path>/etc/modules.conf</path> Datei hinzuzufügen:
</p>

<pre caption="Ausführen von modules-update">
# <i>modules-update</i>
</pre>

<p>
Fahren Sie nun mit der <uri link="?part=1&amp;chap=8">Konfiguration des
System</uri> fort.
</p>

</body>
</subsection>
</section>
</sections>
