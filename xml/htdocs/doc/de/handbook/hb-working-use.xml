<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- English CVS Version: 1.44 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/hb-working-use.xml,v 1.27 2007/02/12 04:08:44 grahl Exp $ -->

<sections>

<abstract>
USE-Flags sind ein sehr wichtiger Aspekt von Gentoo. In diesem Kapitel erfahren
Sie wie man mit USE-Flags arbeitet und wie USE-Flags mit Ihrem System
interagieren.
</abstract>

<version>1.35</version>
<date>2006-10-08</date>

<section>
<title>Was sind USE-Flags?</title>
<subsection>
<title>Die Idee welche hinter USE-Flags steckt</title>
<body>

<p>
Wenn Sie Gentoo installieren (oder irgendeine andere Distribution, oder sogar
ein anderes Betriebssystem) treffen Sie Entscheidungen abhängig von der Umgebung
in der Sie arbeiten. Die Einrichtung eines Server unterscheidet sich von der
Einrichtung einer Workstation. Eine Spiele-Workstation unterscheidet sich von
einer Workstation für 3D-Rendering.
</p>

<p>
Dies trifft nicht nur bei der Auswahl der Pakete die Sie installieren wollen zu,
sondern auch welche Funktionen ein Paket unterstützen soll. Wenn Sie OpenGL
nicht benötigen, warum sollten Sie sich die Mühe machen OpenGL zu installieren
und OpenGL-Unterstützung in die meisten Ihrer Pakete einzubauen? Wenn Sie KDE
nicht benutzen wollen, warum sollten Sie sich die Mühe machen Pakete mit
KDE-Unterstützung zu kompilieren, wenn diese Pakete auch ohne einwandfrei
funktionieren?
</p>

<p>
Um den Benutzern bei der Entscheidung zu helfen, was installiert/aktiviert
werden soll und was nicht, wollen wir, dass der Benutzer seine Umgebung auf
eine einfache Weise spezifiziert. Dies zwingt den Benutzer dazu zu entscheiden,
was er wirklich will und vereinfachtt den Prozess für Portage, unser
Paketmanagementsystem, sinnvolle Entscheidungen zu treffen.
</p>

</body>
</subsection>
<subsection>
<title>Definition eines USE-Flag</title>
<body>

<p>
Geben Sie die USE-Flags ein. Solch ein Flag ist ein Schlüsselwort das
Unterstützungs- und Abhängigkeitsinformationen für ein bestimmtes Konzept
beinhaltet. Wenn Sie ein bestimmtes USE-Flag definieren wird Portage wissen,
dass Sie Unterstützung für das gewählte Schlüsselwort wollen. Natürlich
verändert dies auch die Abhängigkeitsinformationen für ein Paket.
</p>

<p>
Schauen wir uns ein spezifisches Beispiel an: das <c>kde</c> Schlüsselwort.
Wenn Sie dieses Schlüsselwort nicht in Ihrer <c>USE</c> Variable haben, werden
alle Pakte die <e>optionale</e> KDE Unterstützung haben <e>ohne</e> KDE
Unterstützung kompiliert. Alle Pakete die eine <e>optionale</e> KDE Abhängigkeit
haben werden installiert, <e>ohne</e> dass die KDE Bibliotheken (als
Abhängigkeit) installiert werden. Wenn Sie das <c>kde</c>  Schlüsselwort
verwendet haben, dann <e>werden</e> diese Pakete mit KDE Unterstützung
kompiliert und die KDE Bibliotheken werden als Abhängigkeit installiert.
</p>

<p>
Dadurch, dass Sie das Schlüsselwort korrekt definieren, erhalten Sie ein System
spezifisch an Ihre Bedürfnisse angepasst.
</p>

</body>
</subsection>
<subsection>
<title>Welche USE-Flags gibt es?</title>
<body>

<p>
Es gibt zwei Arten von USE-Flags: <e>globale</e> und <e>lokale</e> USE-Flags.
</p>

<ul>
  <li>
    Ein <e>globales</e> USE-Flag wird von vielen Paketen systemweit benutzt.
    Dies ist was die meisten Menschen als ein USE-Flag ansehen.
  </li>
  <li>
    Ein <e>lokales</e> USE-Flag wird von einem einzelnen Paket verwendet um
    Entscheidungen spezifisch für ein Paket zu treffen.
  </li>
</ul>

<p>
Eine Liste von allen verfügbaren globalen USE-Flags findet man <uri
link="http://www.gentoo.org/dyn/use-index.xml">Online</uri> oder lokal in
<path>/usr/portage/profiles/use.desc</path>.
</p>

<p>
Eine Liste verfügbarer lokaler USE-Flags finden Sie lokal in
<path>/usr/portage/profiles/use.local.desc</path>.
</p>

</body>
</subsection>
</section>
<section>
<title>Benutzung von USE-Flags</title>
<subsection>
<title>Deklarieren von ständigen USE-Flags</title>
<body>

<p>
In der Hoffnung, dass Sie überzeugt sind von der Wichtigkeit von USE-Flags,
werden wir Sie nun informieren wie man USE-Flags deklariert.
</p>

<p>
Wie vorher erwähnt, werden alle USE-Flags innerhalb der <c>USE</c> Variable
deklariert. Um es für die Benutzer einfach zu machen USE-Flags zu suchen und
auszuwählen, geben wir schon eine <e>Standardeinstellung</e> für USE vor. Diese
Einstellung ist eine Sammlung von USE-Flags, von denen wir glauben, dass sie
häufig von Gentoo Benutzern verwendet werden. Diese Standardeinstellung ist
deklariert in der <path>make.defaults</path> Dateien die Teil Ihres Profils
sind.
</p>

<p>
Das Profil auf das Ihr System hört wird ausgewiesen vom
<path>/etc/make.profile</path> symlink. Jedes Profil funktioniert aufbauend auf
einem anderen, größeren Profil. Das Endergebnis ist daher die Summe aller
Profile. Das Hauptprofil ist das <c>base</c> Profil
(<path>/usr/portage/profiles/base</path>).
</p>

<p>
Lassen Sie uns einen Blick auf die Standardeinstellung für das 2004.3 Profil
werfen:
</p>

<pre caption="Kulmulative make.defaults USE-Variable für das 2004.3 Profil">
<comment>(Dieses Beispiel ist die Summe der Einstellungen in base,
  default-linux, default-linux/x86 und default-linux/x86/2004.3)</comment>
USE="x86 oss apm arts avi berkdb bitmap-fonts crypt cups encode fortran f77
     foomaticdb gdbm gif gpm gtk imlib jpeg kde gnome libg++ libwww mad
     mikmod motif mpeg ncurses nls oggvorbis opengl pam pdflib png python qt
     quicktime readline sdl spell ssl svga tcpd truetype X xml2 xmms xv zlib"
</pre>

<p>
Wie Sie sehen können, enthält diese Variable schon eine ziemlich große Anzahl
von Schlüsselwörtern. Verändern Sie jegliche <path>make.defaults</path> Dateien
<b>nicht</b> um die <c>USE</c> Variable an Ihre Bedürfnisse anzupassen:
Veränderungen in dieser Datei werden überschrieben wenn Sie ein Update von
Portage durchführen!
</p>

<p>
Sie ändern diese Standardeinstellung durch Hinzufügen oder Entfernen von
Schlüsselwörtern zur USE-Variable. Dies geschieht global durch die Definierung
der <c>USE</c> Variable in <path>/etc/make.conf</path>. In dieser Variable
fügen Sie die zusätzlichen USE-Flags hinzu, die Sie benötigen oder entfernen
die USE-Flags, die Sie nicht wollen. Das Letztere geschieht durch das Vorsetzen
eines Minuszeichens ("-") vor das Schlüsselwort.
</p>

<p>
Zum Beispiel wenn Unterstützung für KDE und QT entfernt werden soll aber
Unterstützung für ldap hinzugefügt werden soll, kann <c>USE</c> wie folgt in
<path>/etc/make.conf</path> definiert werden:
</p>

<pre caption="Eine Beispielseinstellung für USE in /etc/make.conf">
USE="-kde -qt3 -qt4 ldap"
</pre>

</body>
</subsection>
<subsection>
<title>Deklarieren von USE-Flags für einzelne Pakete</title>
<body>

<p>
Machmal möchten Sie ein bestimmtes USE-Flag für ein (oder einige) Anwendungen
deklarieren, aber nicht systemweit. Um dies zu ermöglichen müssen Sie zunächst
das <path>/etc/portage</path> Verzeichnis erstellen (sofern es noch nicht
existiert) und die Datei <path>/etc/portage/package.use</path> editieren.
</p>

<p>
Wenn Sie zum Beispiel <c>berkdb</c> Unterstützung nicht global, aber für
<c>mysql</c> möchten fügen Sie folgendes ein:
</p>

<pre caption="/etc/portage/package.use Beispiel 1">
dev-db/mysql berkdb
</pre>

<p>
Sie können natürlich ein USE-Flag für ein Ebuild explizit <e>deaktivieren</e>.
Wenn Sie zum Beispiel keine <c>java</c> Unterstützung in PHP benötigen:
</p>

<pre caption="/etc/portage/package.use Beispiel 2">
dev-php/php -java
</pre>

</body>
</subsection>
<subsection>
<title>Deklarieren von temporären USE-Flags</title>
<body>

<p>
Manchmal wollen Sie eine bestimmte USE-Einstellung nur einmal benutzen. Anstatt
das <path>/etc/make.conf</path> zweimal editiert wird (um die Veränderungen in
USE anzuwenden und wieder zu entfernen) können Sie einfach die USE-Variable als
Umgebungsvariable definieren. Behalten Sie im Gedächtnis, dass wenn Sie die
jeweilige Anwendung re-kompilieren oder aktualisieren (entweder explizit oder
als Teil eines Systemupdate) diese Änderung verloren geht.
</p>

<p>
Als ein Beispiel werden wir, während der Installation von Mozilla, temporär
Java von den USE-Einstellungen entfernen.
</p>

<pre caption="USE als Umgebungsvariable verwenden">
# <i>USE="-java" emerge mozilla</i>
</pre>

</body>
</subsection>
<subsection>
<title>Reihenfolge</title>
<body>

<p>
Natürlich gibt es eine gewisse Präzedenz darüber welche Einstellung Priorität
hat über die USE-Einstellungen. Sie wollen schließlich nicht
<c>USE="-java"</c> deklarieren nur um zu sehen, dass <c>java</c> weiterhin
verwendet wird wegen einer Einstellung, die eine höhere Priorität hat.
Präferenz für die USE-Einstellung ist nach Priorität geordnet (die Erste hat
die niedrigste Priorität):
</p>

<ol>
  <li>
    Standardeinstellung für USE deklariert in den <path>make.defaults</path>
    Dateien, die Teil Ihres Profils sind.
  </li>
  <li>
    Benutzerdefinierte USE-Einstellungen in <path>/etc/make.conf</path>
  </li>
  <li>
    Benutzerdefinierte USE-Einstellungen in
    <path>/etc/portage/package.use</path>
  </li>
  <li>
    Benutzerdefinierte USE-Einstellungen definiert als Umgebungsvariable
  </li>
</ol>

<p>
Um die endgültige <c>USE</c> Einstellungen zu sehen, so wie sie von Portage
gesehen wird, führen Sie <c>emerge --info</c> aus. Dies listet alle relevanten
Variablen (inklusive der <c>USE</c> Variable) mit dem von Portage verwendeten
Inhalt auf.
</p>

<pre caption="Ausführen von emerge --info">
# <i>emerge --info</i>
</pre>

</body>
</subsection>
<subsection>
<title>Das gesamte System an neue USE-Flags anpassen</title>
<body>

<p>
Wenn Sie Ihre USE-Flags geändert haben und nun Ihr gesamtes System dazu bringen
möchten die neuen USE-Flags zu nutzen, benutzen Sie die <c>--newuse</c> Option
von <c>emerge</c>:
</p>

<pre caption="Neuerstellung Ihres gesamten System">
# <i>emerge --update --newuse world</i>
</pre>

<p>
Führen Sie nun Portages depclean aus, um Abhängigkeiten aus Ihrem alten System,
die nun durch andere USE-Flags ersetzt wurden, zu löschen.
</p>

<warn>
Das Ausführen von <c>emerge depclean</c> ist eine gefährliche Operation und
sollte mit dementsprechender Vorsicht vorgenommen werden. Kontrollieren Sie die
angezeigte Liste mit zu löschenden Paketen lieber zweimal um so sicherzustellen,
dass keine notwendigen Pakete gelöscht werden. Im folgenden Beispiel fügen wir
den <c>-p</c> Switch hinzu, um nur eine Liste unbenötigter Pakete angezeigt zu
bekommen, ohne diese jedoch gleichzeitig auch zu entfernen.
</warn>

<pre caption="Entfernen unbenötigter Pakete">
# <i>emerge -p --depclean</i>
</pre>

<p>
Wenn depclean beendet ist, führen Sie <c>revdep-rebuild</c> aus, um Anwendungen
die dynamisch gegen Share Objects der deinstallierten Anwendungen gelinkt sind
neu zu kompilieren. <c>revdev-rebuild</c> ist TEil des <c>gentoolkit</c>
Paketes, vergessen Sie nicht dieses zuvor zu installieren.
</p>

<pre caption="Ausführen von revdep-rebuild">
# <i>revdep-rebuild</i>
</pre>

<p>
Nachdem Sie dies alles ausgeführt haben, benutzt Ihr System die neuen USE-Flag
Einstellungen.
</p>

</body>
</subsection>
</section>
<section>
<title>Paket spezifische USE-Flags</title>
<subsection>
<title>Betrachten vorhandener USE-Flags</title>
<body>

<p>
Nehmen wir als Beispiel <c>mozilla</c>: Auf welche USE-Flags hört es? Um dies
herauszufinden benutzen wir <c>emerge</c> mit der <c>--pretend</c> und der
<c>--verbose</c> Option:
</p>

<pre caption="Betrachten der benutzten USE-Flags">
# <i>emerge --pretend --verbose mozilla</i>
These are the packages that I would merge, in order:

Calculating dependencies ...done!
[ebuild   R   ] www-client/mozilla-1.7.12-r2  USE="crypt gnome java mozsvg ssl
truetype xprint -debug -ipv6 -ldap -mozcalendar -mozdevelop -moznocompose
-moznoirc -moznomail -moznoxft -postgres -xinerama" 0 kB
</pre>

<p>
<c>emerge</c> ist nicht das einzige Hifsmittel für diesen Job. In der Tat haben
wir ein Werkzeug, ausgelegt auf Paketinformationen, genannt <c>equery</c>,
welches im <c>gentoolkit</c> Paket enthalten ist. Installieren Sie zunächst
<c>gentoolkit</c>:
</p>

<pre caption="Installieren von gentoolkit">
# <i>emerge gentoolkit</i>
</pre>

<p>
Führen Sie nun <c>equery</c> mit dem <c>uses</c> Argument aus um die USE-Flags
eines bestimmten Paketes zu betrachten. Zum Beispiel für das <c>gnumeric</c>
Paket:
</p>

<pre caption="Benutzung von equery zur Betrachtung verwendeter USE-Flags">
# <i>equery uses =gnumeric-1.6.3 -a</i>
[ Searching for packages matching =gnumeric-1.6.3... ]
[ Colour Code : <comment>set</comment> <i>unset</i> ]
[ Legend        : Left column  (U) - USE flags from make.conf  ]
[               : Right column (I) - USE flags packages was installed with ]
[ Found these USE variables for app-office/gnumeric-1.6.3 ]
 U I
- - <i>debug</i>   : Tells configure and the makefiles to build for debugging.
                     Effects vary across packages, but generally it will at
                     least add -g to CFLAGS.  Remember to set FEATURES=nostrip too
- - <i>gnome</i>   : Adds GNOME support
+ + <comment>python</comment>   : Adds support/bindings for the Python language
- - <i>static</i>   : !!do not set this during bootstrap!! Causes binaries to be
                     statically linked instead of dynamically
</pre>

</body>
</subsection>
</section>
</sections>
