<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- English CVS Version: 1.3 -->

<sections>

<version>6.1</version>
<date>2006-07-18</date>

<section>
<title>Zeitzone</title>
<body>

<p>
Zuerst müssen Sie Ihre Zeitzone auswählen, damit das System weiß wo es sich
befindet. Suchen Sie Ihre Zeitzone in <path>/usr/share/zoneinfo</path> und
kopieren Sie diese dann nach <path>/etc/localtime</path>. Bitte vermeiden Sie
die <path>/usr/share/zoneinfo/Etc/GMT*</path> Zeitzonen, denn deren Namen
verweisen nicht auf die erwarteten Zonen. Zum Beispiel ist <path>GMT-8</path>
in Wirklichkeit GMT+8.
</p>

<pre caption="Setzen der Zeitzonen Information">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Angenommen Sie möchten GMT benutzen)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Installieren der Quellen</title>
<subsection>
<title>Auswählen eines Kernels</title>
<body>

<p>
Der Kern um den herum alle Distributionen gebaut sind, ist der Linux Kernel. Es
ist die Ebene zwischen den Benutzerprogrammen und der Systemhardware. Gentoo
bietet seinen Benutzern verschiedene mögliche Kernelquellen. Eine komplette
Auflistung mit Beschreibungen finden Sie im <uri
link="/doc/de/gentoo-kernel.xml">Gentoo Kernel Guide</uri>.
</p>

<p>
Für PPC64 sollten Sie die <c>gentoo-sources</c> verwenden. Fahren wir also mit 
dem <c>emerge</c>n der Kernelquellen fort. Das <c>USE="-doc"</c> ist notwendig
um zu verhindern, dass xorg-x11 oder andere Abhängigkeiten zu diesem Zeitpunkt
installiert werden. <c>USE="symlink"</c> ist nicht zwingend bei einer
Neuinstallation, stellt aber sicher, dass der <path>/usr/src/linux</path>
Symlink korrekt erstellt wird.
</p>

<pre caption="Installieren einer Kernelquelle">
# <i>USE="-doc symlink" emerge gentoo-sources</i>
</pre>

<p>
Wenn Sie einen Blick in <path>/usr/src</path> werfen, sollten Sie einen Symlink
namens <path>linux</path> sehen, der auf Ihre Kernelquelle verweist. In diesem
Fall verweisen die installierten Kernelquellen auf
<c>gentoo-sources-2.6.12-r10</c>. Denken Sie daran, dass Ihre Version eine
andere sein kann.
</p>

<pre caption="Anzeigen des Kernelquellen Symlinks">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root    root       12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.6.12-gentoo-r10
</pre>

<p>
Nun ist es Zeit Ihre Kernelquelle zu konfigurieren und zu kompilieren. Es gibt 
die Möglichkeit "genkernel" zu verwenden, welches einen generischen Kernel 
erstellt wie er auf den Installations-CDs verwendet wird, aber dieser ist im
Moment für PPC64 nicht voll funktionstüchtig.
</p>

<p>
Fahren Sie nun mit <uri link="#manual">Manuelle Konfiguration</uri> fort.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Manuelle Konfiguration</title>
<subsection>
<title>Einleitung</title>
<body>

<p>
Einen Kernel manuell zu konfigurieren wird oft als der schwierigste Teil
gesehen, den ein Linux Benutzer meistern muss. Nichts ist weiter von der 
Wahrheit entfernt -- Nach der Konfiguration von ein paar Kerneln werden Sie
sich gar nicht daran erinnern, dass es schwer war ;)
</p>

<p>
Wie auch immer, eine Sache <e>ist</e> wahr: Sie müssen Ihr System kennen wenn
Sie einen Kernel manuell konfigurieren. Die meisten Informationen können 
gesammelt werden indem Sie pciutils installieren (<c>emerge pciutils</c>), 
welches <c>lspci</c> enthält. Sie haben nun die Möglichkeit <c>lspci</c> 
innerhalb der chroot Umgebung zu verwenden. Sie können ohne Sorge jegliche 
<e>pcilib</e> Warnungen (wie pcilib: cannot open /sys/bus/pci/devices), die 
<c>lspci</c> auswirft, ignorieren. Alternativ können Sie <c>lspci</c> in einer
<e>nicht-chroot</e> Umgebung ausführen. Die Resultate sind dieselben. Sie
können auch <c>lsmod</c> ausführen um zu sehen welche Kernelmodule die
Installations-CD verwendet (es kann ihnen einen guten Hinweis darauf geben was
zu aktivieren ist).
</p>

<pre caption="menuconfig aufrufen">
# <i>cd /usr/src/linux</i>
<comment>Wichtig: Wenn Sie in einem 32Bit-Userland sind müssen Sie das Makefile
des obersten Levels in /usr/src/linux anpassen und die CROSS_COMPILE Option zu
CROSS_COMPILE ?= powerpc64-unknown-linux-gnu- ändern. Sie müssen dies tun bevor
Sie make menuconfig ausführen. Ansonsten kann es in Problemen bei der
Kompilierung des Kernels resultieren.</comment>
# <i>make menuconfig</i>
</pre>

<p>
Ihnen werden verschiedene Konfigurationssektionen präsentiert. Wir listen
zunächst einige Optionen auf, die sie aktivieren müssen (ansonsten wird Gentoo
nicht funktionieren oder ohne zusätzliche Veränderungen nicht richtig 
funktionieren).
</p>

</body>
</subsection>
<subsection>
<title>Aktivieren der benötigten Optionen</title>
<body>

<p>
Zunächst aktivieren Sie die Benutzung von Entwicklungs- und Experiementellem/n
Code/Treibern. Sie brauchen dies, denn ansonsten werden einige wichtige
Codeabschnitte/Treiber nicht erscheinen:
</p>

<pre caption="Selektieren experimentellem/n Code/Treibern; generelle Einstellungen">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
General setup ---&gt;
  [*] Support for hot-pluggable devices
</pre>

<p>
Gehen Sie nun in <c>File Systems</c> und selektieren Sie Unterstützung für die
Dateisysteme die Sie benutzen. Kompilieren Sie diese <e>nicht</e> als Module,
ansonsten wird ihr Gentoo System nicht fähig sein Ihre Partitionen zu mounten.
Selektieren Sie auch <c>Virtual memory</c>, <c>/proc file system</c>, <c>/dev 
file system</c> + <c>Automatically mount at boot</c> und <c>/dev/pts file system
for Unix98 PTYs</c>:
</p>

<pre caption="Selektieren notwendiger Dateisysteme">
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev/pts file system for Unix98 PTYs

<comment>(Selektieren Sie eine oder mehrere der folgenden Optionen, wie von Ihrem System benötigt)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<note>
Sie werden einige der erwähnten Optionen unter <c>Pseudo filesystems</c> finden,
welches ein Unterpunkt von <c>File systems</c> ist.
</note>

<p>
Wenn Sie PPPoE benutzen um sich ins Internet einzuwählen oder Sie ein 
Einwahlmodem benutzen, brauchen Sie folgende Optionen im Kernel (Sie werden die
erwähnten Optionen unter <c>Networking support</c> finden, welches ein Unterpunkt von
<c>Device Drivers</c> ist):
</p>

<pre caption="Auswählen der für PPPoE notwendigen Treiber">
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Die zwei Komprimierungsoptionen werden nicht schaden, aber werden auch nicht
unbedingt gebraucht, ebensowenig wie die <c>PPP over Ethernet</c> Option, die 
wohl nur von <c>rp-pppoe</c> verwendet wird, wenn es konfiguriert ist den PPPoE
Kernelmodus zu benutzen.
</p>

<p>
Wenn Sie es benötigen, vergessen Sie nicht die Unterstützung für Ihre 
Ethernetkarte in den Kernel einzubinden.
</p>

<p>
Deaktivieren Sie die ADB raw keycodes:
</p>

<pre caption="ADB raw keycodes deaktivieren">
Macintosh Device Drivers ---&gt;
  [ ] Support for ADB raw keycodes
</pre>

<p>
Wenn Sie mit der Konfiguration des Kernels fertig sind, fahren Sie mit dem <uri
link="#compiling">Kompilieren und Installieren</uri> fort.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilieren und Installieren</title>
<body>

<p>
Nun da Ihr Kernel konfiguriert ist, ist es Zeit ihn zu kompilieren und zu
installieren. Verlassen Sie die Konfiguration und starten Sie den 
Kompilationsprozess:
</p>

<pre caption="Kompilieren des Kernels">
# <i>make vmlinux &amp;&amp; make modules_install</i>
</pre>

<p>
Wenn der Kernel fertig ist mit der Kompilierung, kopieren Sie das Kernelimage
nach <path>/boot</path>. Denken Sie daran <path>&lt;Kernelversion&gt;</path>
durch den Namen und die Version Ihres Kernels zu ersetzten.
</p>

<pre caption="Installieren des Kernels">
# <i>cp vmlinux /boot/&lt;Kernelversion&gt;</i>
</pre>

<p>
Fahren Sie nun mit der <uri 
link="#kernel_modules">Konfiguration der Module</uri> fort.
</p>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Konfiguration der Module</title>
<body>

<p>
Sie sollten alle Module, die automatisch geladen werden sollen, in
<path>/etc/modules.autoload.d/kernel-2.6</path> aufführen. 
Sie können den Modulen weitere Optionen mitgeben, wenn Sie wollen.
</p>

<p>
Um alle verfügbaren Module anzuzeigen, führen Sie folgenden <c>find</c> Befehl 
aus. Vergessen Sie nicht "&lt;kernel version&gt;" mit der Version des Kernels zu
ersetzen, den Sie gerade kompiliert haben:
</p>

<pre caption="Anzeigen aller verfügbarer Module">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Um zum Beispiel das <c>3c59x.o</c> Modul automatisch zu laden editieren Sie die
<path>kernel-2.6</path> Datei und tragen den Modulnamen ein.
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.6 bearbeiten">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Setzten Sie die Installation mit der <uri 
link="?part=1&amp;chap=8">Konfiguration des Systems</uri> fort.
</p>

</body>
</section>
</sections>
