<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- English CVS Version: 1.23 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/hb-install-ia64-kernel.xml,v 1.2 2011/09/10 23:45:00 keytoaster Exp $ -->

<sections>

<version>13</version>
<date>2011-09-03</date>

<section>
<title>Setzen der Zeitzone des Systems</title>
<body>

<p>
Zuerst müssen Sie dem System sagen, in welcher Zeitzone es sich befindet.
Suchen Sie Ihre Zeitzone in<path>/usr/share/zoneinfo/</path> und kopieren Sie
diese dann nach <path>/etc/localtime</path>. Bitte vermeiden Sie die
<path>/usr/share/zoneinfo/Etc/GMT*</path> Zeitzonen, denn deren Namen verweisen
nicht auf die erwarteten Zonen. Zum Beispiel ist <path>GMT-8</path> in
Wirklichkeit GMT+8.
</p>

<pre caption="Setzen der Zeitzone">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Beispiel: GMT)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Installieren der Quellen</title>
<subsection>
<title>Auswählen eines Kernels</title>
<body>

<p>
Der Kern um den herum alle Distributionen gebaut sind ist der Linux Kernel. Es
ist die Ebene zwischen den Benutzerprogrammen und der Systemhardware. Gentoo
bietet seinen Benutzern verschiedene mögliche Kernelquellen. Eine komplette
Liste mit Beschreibungen finden Sie im <uri
link="/doc/de/gentoo-kernel.xml">Gentoo Kernel-Leitfaden</uri>.
</p>

<p>
Für <keyval id="arch"/>-basierende Systeme haben wir <c>gentoo-sources</c>
(Kernelquellen modifiziert für zusätzliche Funktionen).
</p>

<p>
Installieren Sie diese nun mit <c>emerge</c>.
</p>

<pre caption="Installieren der Kernelquellen">
# <i>emerge gentoo-sources</i>
</pre>

<p>
Wenn Sie einen Blick in <path>/usr/src</path> werfen, sollten Sie einen Symlink
sehen, genannt <path>linux</path>, der auf Ihre Kernelquelle verweist. In
diesem Fall verweisen die installierten Kernelquellen auf
<c>gentoo-sources-<keyval id="kernel-version"/></c>. Beachten Sie, dass Ihre
Version davon abweichen kann.
</p>

<pre caption="Anzeigen des Kernelquellen Symlinks">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root   root    12 Oct 13 11:04 /usr/src/linux -&gt; linux-<keyval id="kernel-version"/>
</pre>

<p>
Nun ist es Zeit Ihre Kernelquelle zu konfigurieren und zu kompilieren. Alle
Architekturen können <c>genkernel</c> verwenden, welches einen generischen
Kernel erstellt, wie er von der Installations-CD verwendet wird. Wir erklären
die "manuelle" Konfiguration jedoch zuerst, denn es ist der beste Weg Ihre
Umgebung zu optimieren.
</p>

<p>
Wenn Sie Ihren Kernel manuell konfigurieren wollen fahren Sie nun mit <uri
link="#manual">Standard: Manuelle Konfiguration</uri> fort. Wenn
Sie <c>genkernel</c> benutzen wollen, sollten Sie stattdessen
<uri link="#genkernel">Alternativ: Benutzung von Genkernel</uri> lesen.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Standard: Manuelle Konfiguration</title>
<subsection>
<title>Einführung</title>
<body>

<p>
Einen Kernel manuell zu konfigurieren wird oft als der schwierigste Teil
gesehen, den jeder Linux Benutzer insgesamt meistern muss. Nichts ist weiter
von der Wahrheit entfernt -- nach der Konfiguration von einigen Kerneln werden
Sie sich gar nicht daran erinnern, dass es schwer war ;-)
</p>

<p>
Jedoch eine Sache <e>ist</e> wahr: Sie müssen Ihr System kennen, wenn Sie
beginnen einen Kernel manuell zu konfigurieren. Die meisten Informationen
können gesammelt werden, indem Sie sich pciutils installieren (<c>emerge
pciutils</c>), welches <c>lspci</c> enthält. Sie haben nun die Möglichkeit
<c>lspci</c> innerhalb der chroot Umgebung zu verwenden. Sie können ohne Sorge
jegliche <e>pcilib</e> Warnungen (wie pcilib: cannot open
/sys/bus/pci/devices), die <c>lspci</c> auswirft, ignorieren. Alternativ
können Sie <c>lspci</c> aus einer <e>nicht-chroot</e> Umgebung ausführen. Das
Resultat ist dasselbe. Sie können auch <c>lsmod</c> ausführen um zu sehen
welche Kernelmodule die Installations-CD verwendet (es kann ihnen einen netten
Hinweis darauf geben was zu aktivieren ist).
</p>

<p>
Gehen Sie nun in Ihr Kernelquellverzeichnis und führen Sie <c>make
menuconfig</c> aus. Dies startet ein ncurses-basierendes Konfigurationsmenü.
</p>

<pre caption="Menuconfig starten">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Ihnen werden verschiedene Konfigurationssektionen präsentiert. Wir listen
zunächst einige Optionen auf, die Sie aktivieren müssen (ansonsten wird Gentoo
nicht funktionieren, oder ohne zusätzliche Veränderungen nicht richtig
funktionieren).
</p>

</body>
</subsection>
<subsection>
<title>Aktivieren der benötigten Optionen</title>
<body>

<p>
Stellen Sie sicher, dass alle Treiber, die für das Booten ihres Systems wichtig
sind (wie z.B. SCSI controller, ...), <e>in</e> den Kernel und nicht als Module
kompiliert werden, anderenfalls wird ihr System nicht in der Lage sein
vollständig zu booten.
</p>

<p>
Selektieren Sie nun den korrekten System- und Prozessortyp. Sollten Sie nicht
wissen welche Art IA64 sie besitzen, ist <c>DIG-compliant</c> eine gute
Standartauswahl. Wenn Sie Gentoo auf einem SGI-System installieren, müssen Sie
diesen Typ auswählen, da der Kernel sonst nicht booten wird.
</p>

<pre caption="Selektieren des korrekten Systemtyps">
System type ---&gt;
  <comment>(Change according to your system)</comment>
  <i>DIG-compliant</i>
Processor type ---&gt;
  <comment>(Change according to your system)</comment>
  <i>Itanium 2</i>
</pre>

<p>
Gehen Sie nun in <c>File Systems</c> und selektieren Sie Unterstützung für die
Dateisysteme die Sie benutzen. Kompilieren Sie diese <e>nicht</e> als Module,
ansonsten wird ihr Gentoo System nicht fähig sein, Ihre Partitionen zu mounten.
Selektieren Sie auch <c>Virtual memory</c> und <c>/proc file system</c>:
</p>

<pre caption="Selektieren notwendiger Dateisysteme">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)

<comment>(Selektieren Sie eine oder mehrere der folgenden Optionen, wie benötigt
von Ihrem System</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support

<comment>(Stellen Sie sicher, dass VFAT support für die EFI-Partition ausgewählt
ist)</comment>
DOS/FAT/NT Filesystems  --->
  &lt;*&gt; VFAT (Windows-95) fs support
</pre>

<p>
Wenn Sie PPPoE benutzen um sich ins Internet einzuwählen oder Sie benutzen
ein Einwahl Modem, brauchen Sie folgende Optionen im Kernel:
</p>

<pre caption="Auswählen von notwendigen Treibern für PPPoE">
Device Drivers ---&gt;
  Networking Support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Die zwei Komprimierungsoptionen werden nicht schaden, aber werden auch nicht
definitiv gebraucht, ebenso die <c>PPP over Ethernet</c> Option, die vielleicht
nur von <c>ppp</c> verwendet wird, wenn der Kernelmodus PPPoE benutzt wird.
</p>

<p>
Wenn Sie es benötigen, vergessen Sie nicht Ünterstützung für Ihre Netzwerkkarte
in Ihren Kernel einzubinden.
</p>

<p>
Wenn Sie eine Intel CPU mit HyperThreading (tm) oder ein Multi-CPU System
besitzen, sollten Sie "Symmetric multi-processing support" aktivieren:
</p>

<pre caption="Aktivierung von SMP-Unterstützung">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
Wenn Sie USB-Eingabegeräte (wie Tastatur oder Maus) besitzen, vergessen Sie
nicht dies ebenso zu aktivieren:
</p>

<pre caption="Aktivierung der USB-Unterstützung für Eingabegeräte">
Device Drivers ---&gt;
  [*] HID Devices ---&gt;
    &lt;*&gt;   USB Human Interface Device (full HID) support
</pre>

<p>
Wenn Sie die Konfiguration des Kernel beendet haben fahren Sie mit <uri
link="#compiling">Kompilieren und Installieren</uri> fort.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilieren und Installieren</title>
<body>

<p>
Nun da Ihr Kernel konfiguriert ist, ist es Zeit ihn zu kompilieren und zu
installieren. Verlassen Sie die Konfiguration und starten Sie den
Kompilierungsvorgang:
</p>

<pre caption="Kompilieren des Kernels">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Wenn der Kernel fertig kompiliert ist, kopieren Sie das Kernel-Image nach
<path>/boot</path>. Verwenden Sie jeglichen Namen, den Sie für Ihren Kernel
passend finden und merken Sie ihn sich, da Sie ihn später benötigen werden,
wenn Sie Ihren Bootloader konfigurieren. Denken Sie daran
<path>&lt;Kernelversion&gt;</path> durch den Namen und die Version Ihres
Kernels zu ersetzen.
</p>

<pre caption="Installieren des Kernels">
# <i>cp vmlinux.gz /boot/<keyval id="kernel-name"/></i>
</pre>

<p>
Fahren Sie nun mit dem <uri link="#kernel_modules">Installieren separater
Kernelmodule</uri> fort.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternativ: Benutzung von Genkernel</title>
<body>

<p>
Wenn Sie diesen Abschnitt lesen, haben Sie sich entschieden unser
<c>genkernel</c> Skript zu benutzen, um sich Ihren Kernel konfigurieren zu
lassen.
</p>

<p>
Nun da Ihr Kernelquellbaum installiert ist, ist es an der Zeit Ihren Kernel
automatisch durch das <c>genkernel</c> Skript erstellen zu lassen.
<c>genkernel</c> arbeitet so, dass es einen Kernel konfiguriert, der fast
identisch ist zu denen auf unser Installations-CD. Dies bedeutet, dass wenn Sie
<c>genkernel</c> benutzen um Ihren Kernel zu erstellen, Ihr System generell
alle Hardware beim Booten erkennt, genau wie es unsere Installations-CD tut.
Weil <c>genkernel</c> keine manuelle Kernelkonfiguration erfordert ist es eine
ideale Lösung für die Benutzer, denen unwohl bei der Kompilierung eines eigenen
Kernel ist.
</p>

<p>
Nun lassen Sie uns sehen wie man Genkernel benutzt. Zuerst installieren Sie
<c>genkernel</c>:
</p>

<pre caption="Mit emerge genkernel installieren">
# <i>emerge genkernel</i>
</pre>

<p>
Kompilieren Sie nun Ihre Kernelquellen durch <c>genkernel all</c>.
Seien Sie sich aber bewusst, dass <c>genkernel</c> einen Kernel kompiliert,
der fast alle Hardware unterstützt, was bedeutet dass das Kompilieren durchaus
eine ganze Weile dauern kann!
</p>

<note>
Benutzer von LVM2 sollten <c>--lvm2</c> an die genkernel Kommandozeile anfügen.
</note>

<pre caption="Ausführen von genkernel">
# <i>genkernel all</i>
</pre>

<p>
Sobald <c>genkernel</c> beendet ist werden ein Kernel, ein voller Satz Module
und eine <e>initial ram disk</e> (initramfs) erstellt sein. Wir werden den
Kernel und die initrd benutzen wenn wir später in diesem Handbuch einen
Bootloader konfigurieren. Schreiben Sie den Namen des Kernels und den Ihrer
initrd auf, da Sie diese brauchen werden, wenn Sie die Konfigurationsdatei des
Bootloaders schreiben. Die initrd wird direkt nach dem Booten gestartet um die
Hardware Autoerkennung zu starten (genau wie auf der Installations-CD) bevor ihr
"wahres" System startet.
</p>

<pre caption="Überprüfen der Namen von Kernel-Image und initrd">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>Kernelmodule</title>

<subsection>
<include href="hb-install-kernelmodules.xml"/>
</subsection>

</section>
</sections>