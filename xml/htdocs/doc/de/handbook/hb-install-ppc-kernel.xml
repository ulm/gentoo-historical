<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- English CVS Version: 1.57 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/hb-install-ppc-kernel.xml,v 1.32 2008/02/15 04:55:58 grahl Exp $ -->

<sections>

<version>8.5</version>
<date>2008-01-12</date>

<section>
<title>Setzen der Zeitzone des Systems</title>
<body>

<p>
Zuerst müssen Sie dem System sagen, in welcher Zeitzone es sich befindet.
Suchen Sie Ihre Zeitzone in<path>/usr/share/zoneinfo/</path> und kopieren Sie
diese nach <path>/etc/localtime</path>. Bitte vermeiden Sie die
<path>/usr/share/zoneinfo/Etc/GMT*</path> Zeitzonen, denn deren Namen verweisen
nicht auf die erwarteten Zonen. Zum Beispiel ist <path>GMT-8</path> in
Wirklichkeit GMT+8.
</p>

<pre caption="Setzen der Zeitzone">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Beispiel: GMT)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Installieren der Kernelquellen</title>
<subsection>
<title>Auswählen eines Kernels</title>
<body>

<p>
Der Kern um den herum alle Distributionen gebaut sind ist der Linux Kernel. Es
ist die Ebene zwischen den Benutzerprogrammen und der Systemhardware. Gentoo
bietet seinen Benutzern verschiedene mögliche Kernelquellen. Eine komplette
Liste mit Beschreibungen finden Sie im <uri
link="/doc/de/gentoo-kernel.xml">Gentoo Kernel Guide</uri>.
</p>

<p>
Wir empfehlen die Verwendung der <c>gentoo-sources</c> unter PPC,
es ist ein aktueller 2.6 Kernel.
</p>

<pre caption="Installation der Kernelquellen">
# <i>emerge gentoo-sources</i>
</pre>

<p>
Wenn Sie einen Blick in <path>/usr/src</path> werfen, sollten Sie einen Symlink
namens <path>linux</path> sehen, der auf Ihre momentane Kernelquelle verweist.
In diesem Fall verweisen die Kernequellen auf <c>gentoo-sources-<keyval
id="kernel-version"/></c>. Beachten Sie, dass Ihre Version davon abweichen kann.
</p>

<pre caption="Anzeigen des Kernelquellen-Symlinks">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           22  Mar 18 16:23 /usr/src/linux -&gt; linux-<keyval id="kernel-gentoo"/>
</pre>

<p>
Nun ist es Zeit Ihre Kernelquelle zu konfigurieren und zu kompilieren. Sie
können <c>genkernel</c> verwenden, welches einen generischen
Kernel erstellt, wie er von der Installations-CD verwendet wird. Wir erklären
allerdings zuerst die "manuelle" Konfiguration, da es eine effizientere
Konfiguration ist.
</p>

<p>
Wenn Sie Ihren Kernel manuell konfigurieren wollen fahren Sie fort mit <uri
link="#manual">Standard: Manuelle Konfiguration</uri>. Wenn Sie
<c>genkernel</c> verwenden möchten, dann sollten Sie stattdessen <uri
link="#genkernel">Alternative: Verwendung von genkernel</uri> lesen.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Standard: Manuelle Konfiguration</title>
<subsection>
<title>Einleitung</title>
<body>

<p>
Einen Kernel manuell zu konfigurieren wird oft als der schwierigste Teil
gesehen, den jeder Linux Benutzer insgesamt meistern muss. Nichts ist weiter von
der Wahrheit entfernt. Nach der Konfiguration von einigen Kerneln werden Sie
sich gar nicht daran erinnern, dass es schwer war ;-)
</p>

<p>
Eine Sache jedoch <e>ist</e> wahr: Sie müssen Ihr System kennen, wenn Sie
beginnen einen Kernel manuell zu konfigurieren. Die meisten Informationen über
vorhandene Hardware können gesammelt werden, indem Sie sich pciutils
installieren (<c>emerge pciutils</c>), welches <c>lspci</c> enthält. Sie haben
nun die Möglichkeit <c>lspci</c> innerhalb der chroot Umgebung zu verwenden. Sie
können ohne Sorge jegliche <e>pcilib</e> Warnungen (wie pcilib: cannot open
/sys/bus/pci/devices), die <c>lspci</c> auswirft, ignorieren. Alternativ können
Sie <c>lspci</c> aus einer <e>nicht-chroot</e> Umgebung ausführen. Das Resultat
ist dasselbe. Sie können auch <c>lsmod</c> ausführen um zu sehen welche
Kernelmodule die Installations-CD verwendet (es kann ihnen einen guten Hinweis
darauf geben was zu aktivieren ist). Ein weiterer Ort an dem man nach Hinweisen
suchen kann, um festzustellen welche Komponenten aktiviert werden sollten, sind
die Nachrichtenprotokolle des Kernels vom bisherigen erfolgreichen Boot. Tippen
Sie <c>dmesg</c> ein um diese Kernelnachrichten zu betrachten.
</p>

<p>
Gehen Sie nun in Ihr Kernelquellverzeichnis, es ist nun Zeit Ihren Kernel zu
konfigurieren. Beginnen Sie mit der Konfiguration eines Kernels, der auf den
meisten 32Bit-PowerPC-Rechnern booten wird, indem Sie zuerst
<c>make pmac32_defconfig</c> ausführen. Nachdem die Standardkonfiguration
generiert wurde, führen Sie <c>make menuconfig</c> aus um ein
ncurses-basierendes Konfigurationsmenü zu starten.
</p>

<pre caption="menuconfig starten">
# <i>cd /usr/src/linux</i>
# <i>make pmac32_defconfig</i>
# <i>make menuconfig</i>
</pre>

<p>
Ihnen werden verschiedene Konfigurationssektionen präsentiert. Wir listen
zunächst einige Optionen auf, die sie aktivieren müssen (ansonsten wird Gentoo
nicht funktionieren, oder ohne zusätzliche Veränderungen nicht richtig
funktionieren).
</p>

</body>
</subsection>
<subsection>
<title>Aktivieren der benötigten Optionen</title>
<body>

<p>
Zunächst aktivieren Sie die Benutzung von Entwicklungs- und Experiementellem/n
Code/Treiber(n). Sie brauchen dies, denn ansonsten werden einige wichtige
Codeabschnitte/Treiber nicht erscheinen.
</p>

<pre caption="Auswahl von experimentellem/n Code/Treibern">
General setup ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Gehen Sie nun in <c>File Systems</c> und selektieren Sie Unterstützung für die
Dateisysteme die Sie benutzen. Kompilieren Sie diese <e>nicht</e> als Module,
ansonsten wird ihr Gentoo System nicht fähig sein, Ihre Partitionen zu mounten.
Selektieren Sie auch <c>/proc file system</c> und <c>Virtual memory</c>.
Falls Sie ein 'Pegasos' System verwenden, aktivieren Sie die Option für Amiga-
Partitionen. Falls Sie ein Apple System verwenden, aktivieren Sie die Option
für Macintosh-Partitionen.
</p>

<pre caption="Selektieren notwendiger Dateisysteme">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
<comment>(/proc kann durch Ihre Konfiguration auch zwingend sein, es wird dann stattdessen --- angezeigt)</comment>
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)
  Partition Types
    [*] Advanced partition support
    [*] Amiga partition table support
    [*] Macintosh partition table support
<comment>(Selektieren Sie eine oder mehrere der folgenden Optionen, wie benötigt
von Ihrem System)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Benutzer von NewWorld- und OldWorld-Rechnern werden auch HFS-Unterstützung
aktivieren wollen. OldWorld-Benutzer benötigen es um kompilierte Kernel auf die
MacOS-Partition zu kopieren. NewWorld-Benutzer benötigen es um die spezielle
Apple_Bootstrap-Partition konfigurieren zu können:
</p>

<pre caption="Aktivierung der HFS-Unterstützung">
File Systems ---&gt;
  Miscellaneous filesystems ---&gt;
    &lt;M&gt; Apple Macintosh file system support
    &lt;M&gt; Apple Extended HFS file system support
</pre>

<p>
Wenn Sie PPPoE benutzen um sich ins Internet einzuwählen oder Sie benutzen
ein Einwahl Modem, brauchen Sie folgende Optionen im Kernel:
</p>

<pre caption="Auswählen notwendiger Treiber für PPPoE">
Device Drivers ---&gt;
  Network device support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Die zwei Komprimierungsoptionen werden nicht schaden, aber werden auch nicht
definitiv gebraucht, ebenso die Option <c>PPP over Ethernet</c>, die vielleicht
nur von <c>ppp</c> verwendet wird, wenn es dazu konfiguriert wurde das
Kernelmodus-PPPoE zu benutzen.
</p>

<p>
Vergessen Sie nicht Unterstützung für Ihre Netzwerkkarte im Kernel zu
aufzunehmen. Die meisten neueren Apple-Rechner verwenden den Ethernet-Treiber
SunGEM. Ältere iMacs verwenden häufig den BMAC-Treiber.
</p>

<pre caption="Auswählen der Netzwerktreiber">
Device Drivers ---&gt;
  Network device support ---&gt;
    Ethernet (10 or 100Mbit) ---&gt;
      [*] Ethernet (10 or 100Mbit)
      &lt;*&gt;   Generic Media Independent Interface device support
      &lt;*&gt;   MACE (Power Mac ethernet) support
      &lt;*&gt;   BMAC (G3 ethernet) support
      &lt;*&gt;   Sun GEM support
</pre>

<p>
Zum jetzigen Zeitpunkt kann volles Kernel-Preemption noch instabil sein unter
PPC und kann Kompilierungsfehler und wahllose Segfaults verursachen. Es wird
<e>dringend</e> empfohlen, dass Sie diese Funktion nicht verwenden. Sowohl
<e>Voluntary Preemption</e> wie auch <e>No Forced Preemption</e> sollten sicher
sein.
</p>

<pre caption="Sicherstellen, dass die Preemptible Kernel Option AUS ist">
Kernel options ---&gt;
<comment>(Wählen Sie eins)</comment>
  Preemption Model
    (X) No Forced Preemption (Server)
    (X) Voluntary Kernel Preemption (Desktop)
</pre>

<p>
Wenn Sie von Firewire starten, dann werden Sie auch diese Optionen aktivieren
müssen. Wenn Sie Unterstützung einkompilieren wollen, dann müssen Sie diese
Module und die dazugehörigen Abhängigkeiten zu einem initrd hinzufügen.
</p>

<pre caption="Unterstützung für Firewire-Geräte beim Boot aktivieren">
Device Drivers ---&gt;
  IEEE 1394 (FireWire) support ---&gt;
    &lt;*&gt; IEEE 1394 (FireWire) support
    &lt;*&gt;   OHCI-1394 support
    &lt;*&gt;   SBP-2 support (Harddisks etc.)
</pre>

<p>
Wenn Sie von USB starten, dann werden Sie auch diese Optionen aktivieren
müssen. Wenn Sie Unterstützung einkompilieren wollen, dann müssen Sie diese
Module und die dazugehörigen Abhängigkeiten zu einem initrd hinzufügen.
</p>

<pre caption="Unterstützung für USB-Geräte beim Boot aktivieren">
Device Drivers ---&gt;
  USB support ---&gt;
    &lt;*&gt; Support for Host-side USB
    &lt;*&gt;   OHCI HCD support
    &lt;*&gt;   USB Mass Storage support
</pre>


<p>
Deaktivieren Sie die Framebuffer-Unterstützung des Kernels nicht, denn es wird
für einen erfolgreichen Start benötigt. Wenn Sie einen NVIDIA basierenden
Chipsatz verwenden, sollten Sie den Open Firmware Framebuffer verwenden. Wenn
Sie einen ATI basierenden Chipsatz verwenden, sollten Sie den
Framebuffer-Treiber wählen auf dem Ihr Chipsatz basiert (Mach64, Rage128 oder
Radeon).
</p>

<pre caption="Einen Framebuffer-Treiber auswählen">
Device Drivers ---&gt;
  Graphics support ---&gt;
    &lt;*&gt; Support for frame buffer devices
    [*] Open Firmware frame buffer device support
    &lt;*&gt; ATI Radeon display support
    &lt;*&gt; ATI Rage128 display support
    &lt;*&gt; ATI Mach64 display support
    Console display driver support ---&gt;
      &lt;*&gt; Framebuffer Console support
</pre>

<note>
Wenn Sie mehr als ein Framebuffer Gerät auswählen, kann es unter Umständen
auf einen weniger optimalen Treiber zurückfallen. Entweder verwenden Sie
nur ein Framebuffer Gerät oder Sie spezifizieren welches verwendet werden soll
indem Sie den Treiber der verwendet werden soll beim Boot an den Kernel
übergeben, durch anhängen einer Video-Zeile wie z.B. <c>video=radeonfb</c>.
</note>

<p>
Wenn Sie die Konfiguration des Kernel beendet haben fahren Sie mit <uri
link="#compiling">Kompilieren und Installieren</uri> fort.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilieren und Installieren</title>
<body>

<p>
Nun da Ihr Kernel konfiguriert ist, ist es Zeit ihn zu kompilieren und zu
installieren. Verlassen Sie das Konfigurationsmenü und führen Sie die folgenden
Befehle aus:
</p>

<pre caption="Kompilieren des Kernels">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Wenn der Kernel fertig ist mit der Kompilierung, kopieren Sie das Kernel-Image
nach <path>/boot</path>, wie weiter unten gezeigt. Wenn Sie eine separate
Boot-Partition haben, wie bei Pegasos-Rechnern, müssen Sie sicherstellen, dass
diese korrekt eingebunden ist. Wenn Sie BootX zum booten verwenden wird der
Kernel später kopiert.
</p>

<p>
Yaboot und BootX erwarten einen nicht-komprimierten Kernel, anders als viele
andere Bootloader. Der nicht-komprimierte Kernel heißt vmlinux und ist in
<path>/usr/src/linux</path> platziert, nachdem der Kernel die Kompilierung
beendet hat. Wenn Sie einen Pegasos-Rechner verwenden benötigt das
Pegasos-Firmware einen komprimierten Kernel mit Namen zImage, welchen man
in <path>/usr/src/linux/arch/powerpc/boot/images</path> findet.
</p>

<pre caption="Installieren des Kernels">
# <i>cd /usr/src/linux</i>
<comment>Beachten Sie, Ihre Kernelversion kann anders sein</comment>
<comment>(Apple/IBM)</comment>
# <i>cp vmlinux /boot/<keyval id="kernel-name"/></i>
<comment>(Pegasos)</comment>
# <i>cp arch/powerpc/boot/images/zImage /boot/&lt;kernel-version&gt;</i>
</pre>

<p>
Fahren Sie nun mit dem <uri link="#kernel_modules">Installieren separater
Kernelmodule</uri> fort.
</p>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Installieren separater Kernelmodule</title>
<subsection>
<title>Konfiguration der Module</title>
<body>

<p>
Sie sollten alle Module, die automatisch geladen werden sollen, in
<path>/etc/modules.autoload.d/kernel-2.6</path> eintragen. Sie können
zusätzliche Optionen an die Module anhängen, wenn nötig.
</p>

<p>
Um alle verfügbaren Module anzuzeigen führen Sie das folgende <c>find</c>
Kommando aus. Vergessen Sie nicht  "&lt;kernel version&gt;" mit der Version
Ihres Kernel zu ersetzen, den Sie gerade kompiliert haben:
</p>

<pre caption="Listen aller verfügbarer Module">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Um zum Beispiel das Modul <c>3c59x</c> automatisch zu laden, editieren Sie die
Datei <path>kernel-2.6</path> und tragen das Modul ein.
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Fahren Sie nun mit der <uri link="?part=1&amp;chap=8">Konfiguration des
System</uri> fort.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternative: Verwenden von genkernel</title>
<body>

<p>
Nun da Ihr Kernelquellbaum installiert ist, ist es an der Zeit Ihren Kernel
automatisch durch das <c>genkernel</c> Skript erstellen zu lassen.
<c>genkernel</c> arbeitet so, dass es einen Kernel konfiguriert, der fast
identisch ist zu denen auf unser Installations-CD. Dies bedeutet, dass wenn
Sie <c>genkernel</c> benutzen um Ihren Kernel zu erstellen, Ihr System generell
alle Hardware beim Booten erkennt, genau wie es unsere Installations-CD tut.
Weil <c>genkernel</c> keine manuelle Kernelkonfiguration erfordert ist es eine
ideale Lösung für die Benutzer, denen Unwohl bei der Kompilierung eines eigenen
Kernels ist.
</p>

<p>
Nun lassen Sie uns sehen wie man Genkernel benutzt. Zuerst installieren Sie
<c>genkernel</c>:
</p>

<pre caption="genkernel mit emerge installieren">
# <i>emerge genkernel</i>
</pre>

<p>
Kopieren Sie nun die Kernelkonfiguration die von der Installations-CD
verwendet wird an den Platz wo genkernel die Standard Kernelkonfiguration
erwartet:
</p>

<pre caption="Kopieren der Kernelkonfiguration der Installations-CD">
# <i>zcat /proc/config.gz > /usr/share/genkernel/ppc/kernel-config-2.6</i>
</pre>

<p>
Wenn Sie Firewire oder USB verwenden um zu booten, müssen Sie Module zum initrd
hinzufügen. Editieren Sie <path>/usr/share/genkernel/ppc/modules_load</path>
und ändern Sie <c>MODULES_FIREWIRE="ieee1394 ohci1394 sbp2"</c> für Firewire
Unterstützung oder <c>MODULES_USB="usbcore ohci-hcd ehci-hcd usb-storage"</c>
für USB Unterstützung.
</p>

<p>
Bevor Sie nun die Quellen kompilieren benötigen wir noch eine kleine
Anpassung in der fstab. Der Rest der fstab wird in einem späteren
Schritt vervollständigt, machen Sie sich daher jetzt bitte keine Gedanken
um die Details.
Falls Sie keine separate Boot-Partition angelegt haben (<e>nicht</e>
/bootstrap, das ist etwas Anderes), entfernen Sie die Zeile die
<path>/boot</path> enthält aus der Datei <path>/etc/fstab</path>. Das wird bei
den meisten Apple-Computern nötig sein.
</p>

<pre caption="Entfernen von /boot aus /etc/fstab bei Rechnern ohne Boot-Partition">
# <i>nano -w /etc/fstab</i>
<comment>Entfernen Sie die folgende Zeile</comment>
/dev/BOOT               /boot           ext2        noauto,noatime  1 2
</pre>


<p>
Kompilieren Sie nun Ihre Kernelquellen indem Sie <c>genkernel --genzimage
all</c> ausführen. Für Pegasos muss eine andere Konfiguration verwendet werden
und es muss ein zImage anstatt des vmlinux Kernels, der auf Apple Maschinen
verwendet wird, erstellt werden. ausführen. Beachten Sie jedoch, dass
<c>genkernel</c> einen Kernel kompiliert, der fast jede Hardware unterstützt,
daher wird diese Kompilierung einen relativ langen Zeitraum in Anspruch nehmen.
</p>

<p>
Beachten Sie, dass wenn Ihre Parititon auf der sich der Kernel befindet nicht
ext2 oder ext3 als Dateisystem verwendet, Sie möglicherweise manuell Ihren
Kernel konfigurieren müssen mit <c>genkernel --menuconfig all</c> und
Unterstützung für das Dateisystem <e>im</e> Kernel (also <e>nicht</e> als
Modul) hinzufügen müssen. Benutzer von EVMS2 oder LVM2 werden wahrscheinlich
die Argumente <c>--evms2</c> oder <c>--lvm2</c> ebenfalls hinzufügen wollen.
</p>

<pre caption="Ausführen von genkernel">
# <i>genkernel all</i>
</pre>

<pre caption="Ausführen von genkernel auf dem Pegasos">
# <i>genkernel --genzimage --kernel-config=/usr/share/genkernel/ppc/Pegasos all</i>
</pre>

<p>
Sowie <c>genkernel</c> abgeschlossen wurde ist ein Kernel, ein voller Satz
Module und eine <e>initiale root disk</e> (initrd) erstellt worden. Wir werden
den Kernel und das initrd verwenden wenn wir einen Bootloader, später in
diesem Handbuch, konfigurieren. Schreiben Sie sich die Namen des Kernels und
des initrd auf, denn Sie werden diese benötigen, wenn Sie die
Konfigurationsdatei für Ihren Bootloader schreiben. Das initrd wird direkt
nach dem booten gestartet um Hardware Autoerkennung durchzuführen (genau
wie die Installations-CD), bevor ein "richtiges" System hochfährt. Stellen
Sie sicher, dass Sie eine Notiz von den benötigten Bootargumenten machen.
Diese werden für einen erfolgreichen Boot mit genkernel benötigt.
</p>

<pre caption="Überprüfen der Namen des erstellten Kernel-Image und initrd">
<comment>Beachten Sie, Ihre Kernelversion kann anders sein</comment>
# <i>ls /boot/kernel-genkernel-ppc-<keyval id="kernel-gentoo"/> /boot/initramfs-genkernel-ppc-<keyval id="kernel-gentoo"/></i>
</pre>

<p>
Fahren Sie nun mit der <uri link="?part=1&amp;chap=8">Konfiguration des
System</uri> fort.
</p>

</body>
</section>
</sections>
