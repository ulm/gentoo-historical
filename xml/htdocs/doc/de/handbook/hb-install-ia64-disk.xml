<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- English CVS Version: 1.6 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/handbook/hb-install-ia64-disk.xml,v 1.1 2008/03/08 21:52:30 grahl Exp $ -->

<sections>

<version>3.2</version>
<date>2007-06-26</date>

<section>
<title>Einführung in Blockorientierte Geräte</title>
<subsection>
<title>Blockorientierte Geräte</title>
<body>

<p>
Wir werden einen guten Einblick in die festplattenbezogenen Aspekte von Gentoo
Linux und Linux im Allgemeinen erhalten, inklusive Linux Dateisysteme,
Partitionen und Block Devices. Dann, sobald Sie mit den Vor- und Nachteilen
von Festplatten und Dateisystemen vertraut sind, werden Sie durch den Prozess
des Partitionierens und der Dateisystemerstellung für Ihre Gentoo Linux
Installation geführt.
</p>

<p>
Zu Beginn werden wir Ihnen <e>Block Devices</e> vorstellen. Das berühmteste
Block Device is warscheinlich das, welches das erste SCSI Laufwerk in einem
Linux System repräsentiert, namentlich <path>/dev/sda</path>.
</p>

<p>
Das obige Block Device repräsentiert ein abstraktes Interface zur Festplatte.
Benutzerprogramme können diese Block Device benutzen, um Ihre Festplatte
anzusprechen, ohne sich darum zu kümmern, ob Ihre Festplatten IDE, SCSI oder
irgendwas anderes sind. Das Programm kann den Speicherplatz auf der Festplatte
einfach als eine Anhäufung von zusammenhängenden, beliebig zugreifbaren
512-Byte Blöcken ansprechen.
</p>

</body>
</subsection>

<subsection>
<title>Partitionen</title>
<body>

<p>
Obwohl es theoretisch möglich ist eine ganze Festplatte zu nutzen, um Ihr Linux
System zu beherbergen, wird dies in der Praxis so gut wie nie gemacht.
Stattdessen werden komplette Festplatten Block Devices in kleinere, besser
verwaltbare Block Devices unterteilt. Sie werden <e>Partitionen</e> genannt.
</p>

<p>
Itanium-Systeme benutzen zum booten EFI, das Extensible Firmware Interface.
Das Partitionstabellen-Format das EFI verwendet nennt sich GPT, oder
GUID-Partitions-Tabelle. Das Partitionierungs-Programm, das GPT versteht nennt
sich "parted". Dieses Tool werden wir also im folgenden benutzen. Zusätzlich
ist EFI in der Lage FAT-Dateisysteme zu lesen. Dies wird das Format sein,
welches wir für unsere boot-Partition benutzen werden, also wo durch "elilo"
der Kernel installiert wird.
</p>

</body>
</subsection>
<subsection>
<title>Erweiterte Speicherung</title>
<body>

<p>
Die <keyval id="arch"/>-Installations-CDs unterstützen EVMS und LVM2. EVMS und
LVM2 erhöhen die Flexibilität ihrer Partitionierung. Während der Installations-
Anweisungen richten wir unser Augenmerk auf "normale" Partitionen, es ist aber
gut EVMS und LVM2 im Hinterkopf zu behalten.
</p>

</body>
</subsection>
</section>
<section>
<title>Erstellen eines Partitionsschemas</title>
<subsection>
<title>Default-Partitions-Schema</title>
<body>

<p>
Wenn Sie kein eigenes Partitions-Schema für ihr System aufstellen möchten,
können Sie folgenden Vorschlag benutzen:
</p>

<table>
<tr>
  <th>Partition</th>
  <th>Dateisystem</th>
  <th>Größe</th>
  <th>Beschreibung</th>
</tr>
<tr>
  <ti><path>/dev/sda1</path></ti>
  <ti>vfat</ti>
  <ti>32M</ti>
  <ti>EFI Boot Partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda2</path></ti>
  <ti>(swap)</ti>
  <ti>512M</ti>
  <ti>Swap Partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda3</path></ti>
  <ti>ext3</ti>
  <ti>Rest der Festplatte</ti>
  <ti>Root Partition</ti>
</tr>
</table>

<p>
Wenn Sie wissen möchten wie groß eine Partition sein sollte, oder sogar wie
viele Partitionen Sie brauchen, lesen Sie weiter. Anderenfalls fahren Sie mit
dem Partitionieren Ihrer Festplatte unter dem Abschnitt <uri link="#parted">
Benutzen von parted zum Partitionieren ihrer Festplatte</uri> fort.
</p>

</body>
</subsection>
<subsection>
<title>Wie viele und wie groß?</title>
<body>

<p>
Die Anzahl an Partitionen hängt von Ihrer Umgebung ab. Wenn Sie z.B. eine Menge
User haben, wollen Sie höchst wahrscheinlich Ihr <path>/home</path> separat
halten, da es die Sicherheit erhöht und Backups einfacher macht. Wenn Sie
Gentoo installieren um als Mailserver zu fungieren, sollten Sie
<path>/var</path> separat halten, da alle Mails in <path>/var</path>
gespeichert werden. Eine gute Wahl des Dateisystems maximiert dann zusätzlich
die Performance. Gameserver sollten ein separates <path>/opt</path> haben, da
die meisten Game Server dort installiert werden. Der Grund ist ähnlich wie bei
<path>/home</path>: Sicherheit und Backups. Es liegt definitiv in Ihrem
Interesse <path>/usr</path> groß zu behalten: es wird nicht nur die Mehrheit
der Programme enthalten; der Portage Baum allein belegt etwa 500Mbyte, ohne die
verschiedensten Quellen die darin gespeichert sind mitzurechnen.
</p>

<p>
Wie Sie sehen können, hängt es sehr stark davon ab, was Sie erreichen wollen.
Separate Partitionen oder Volumes haben folgende Vorteile:
</p>

<ul>
<li>
  Sie können das Filesystem mit der höchsten Performance für jede Partition
  oder jedes Volume auswählen
</li>
<li>
  Ihr System behält noch freien Speicherplatz, selbst wenn ein defektes Tool
  ununterbrochen Dateien auf eine Partition oder ein Volume schreibt
</li>
<li>
  Falls nötig können Dateisystem Checks zeitlich verkürzt werden, in dem
  mehrere Checks parallel durchgeführt werden können (obwohl dieser Vorteil
  eher mit mehreren Festplatten als mit mehreren Partitionen zum Tragen kommt)
</li>
<li>
  Die Sicherheit kann erhöht werden, indem Sie einige Partitionen oder Volumes
  read-only, nosuid (setuid bits werden ignoriert), noexec (executable bits
  werden ignoriert) etc mounten.
</li>
</ul>

<p>
Wie dem auch sei, mehrere Partitionen haben einen großen Nachteil: wenn sie
nicht ordentlich konfiguriert werden, könnte das Resultat ein System sein,
welches viel Speicherplatz auf der einen Partition und keinen auf einer anderen
frei hat. Weiterhin gibt es ein 15 Partitionen Limit bei SCSI und SATA.
</p>

<p>
Wir zeigen Ihnen eine Beispiel-Partitionierung anhand einer 20GB-Festplatte,
eingebaut in einen Demonstrations-Laptop (mit Webserver, Mailserver, Gnome...):
</p>

<pre caption="Beispiel einer Partitionierung">
$ <i>df -h</i>
Filesystem    Type    Size  Used Avail Use% Mounted on
/dev/hda5     ext3    509M  132M  351M  28% /
/dev/hda2     ext3    5.0G  3.0G  1.8G  63% /home
/dev/hda7     ext3    7.9G  6.2G  1.3G  83% /usr
/dev/hda8     ext3   1011M  483M  477M  51% /opt
/dev/hda9     ext3    2.0G  607M  1.3G  32% /var
/dev/hda1     ext2     51M   17M   31M  36% /boot
/dev/hda6     swap    516M   12M  504M   2% &lt;not mounted&gt;
<comment>(Unpartitionierter Platz für zukünftige Verwendung: 2 GB)</comment>
</pre>

<p>
<path>/usr</path> ist in diesem Beispiel nahezu voll (83% benutzt), aber wenn
einmal sämtliche Software insatlliert ist, wächst der Speicherplatzverbrauch in
<path>/usr</path> nicht mehr allzu sehr. Der recht groß bemessene Platz von
<path>/var</path> scheint etwas übertrieben, doch bedenken Sie, daß diese
Partition standartmäßig von Portage genutzt wird um Pakete zu kompilieren. Wenn
Sie <path>/var</path> kleiner halten wollen, etwa 1GB, müssen Sie ihre
<c>PORTAGE_TMPDIR</c>-Variable in <path>/etc/make.conf</path> ändern. Sie muß
auf eine Partition mit genug Speicherplatz verweisen, um auch extrem große
Pakete wie z.B. OpenOffice kompilieren zu können.
</p>

</body>
</subsection>
</section>
<section id="parted">
<title>Benutzen von parted zum Partitionieren ihrer Festplatte</title>
<subsection>
<body>

<p>
Im folgenden wird erklärt wie sie das zuvor beschriebene Beispiel einer
Partitionierung umsetzen:
</p>

<table>
<tr>
  <th>Partition</th>
  <th>Beschreibung</th>
</tr>
<tr>
  <ti><path>/dev/sda1</path></ti>
  <ti>EFI Boot Partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda2</path></ti>
  <ti>Swap Partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda3</path></ti>
  <ti>Root Partition</ti>
</tr>
</table>

<p>
Passen Sie das Partitions-Layout Ihren eigenen Vorstellungen entsprechend an.
</p>

</body>
</subsection>
<subsection>
<title>Das aktuelle Partitions-Layout ansehen</title>
<body>

<p>
<c>parted</c> ist der GNU-Partitions-Editor. Starten Sie <c>parted</c> auf
Ihrer Festplatte (in unserem Beispiel verwenden wir <path>/dev/sda</path>):
</p>

<pre caption="Parted starten">
#
<i>parted /dev/sda</i>
</pre>

<p>
Einmal gestartet, wird Sie <c>parted</c> mit einer Eingabeaufforderung wie
dieser begrüßen:
</p>

<pre caption="Parted Eingabeaufforderung">
GNU Parted 1.6.22
Copyright (C) 1998 - 2005 Free Software Foundation, Inc.
This program is free software, covered by the GNU General Public License.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

Using /dev/sda
(parted)
</pre>

<p>
Tippen Sie <c>help</c> um alle verfügbaren Kommandos angezeigt zu bekommen.
Ein weiteres Kommando ist <c>print</c>, welches Sie als nächstes eingeben
sollten um Ihre derzeitige Konfiguration anzeigen zu lassen:
</p>

<pre caption="Eine Beispielkonfiguration">
(parted) <i>print</i>
Disk geometry for /dev/sda: 0.000-34732.890 megabytes
Disk label type: gpt
Minor    Start       End     Filesystem  Name                  Flags
1          0.017    203.938  fat32                             boot
2        203.938   4243.468  linux-swap
3       4243.469  34724.281  ext3
</pre>

<p>
Diese Konfiguration ähnelt sehr unserer Empfehlung weiter oben. Achten Sie
darauf, daß der Dateisystem-Typ in der zweiten Zeile GPT ist. Wenn dies davon
abweicht, wird Ihr IA64-System nicht in der Lage sein von dieser Festplatte zu
booten. Um die Arbeitsweise zu demonstrieren, werden wir die
Beispielpartitionen löschen und neu erstellen.
</p>

</body>
</subsection>
<subsection>
<title>Alle Partitionen löschen</title>
<body>

<note>
Im Gegensatz zu anderen Partitionierungsprogrammen, wie z.B. fdisk, werden
parted-Kommandos leider sofort wirksam. Das heißt, daß, wenn Sie einmal
begonnen haben Partitionen zu löschen oder hinzuzufügen, Sie nicht einfach ohne
die Festplatte zu beschreiben abbrechen können.
</note>

<p>
Der einfache Weg alle Partitionen zu entfernen ist eine neue Partitionstabelle
zu schreiben. Dies garantiert, daß wir den korrekten Partitionstyp benutzen.
Nachdem Sie das getan haben, haben Sie eine leere GPT-Partitionstabelle.
</p>

<pre caption="Eine neue Partitions-Tabelle erstellen">
(parted) <i>mklabel gpt</i>
(parted) <i>print</i>
Disk geometry for /dev/sda: 0.000-34732.890 megabytes
Disk label type: gpt
Minor    Start       End     Filesystem  Name                  Flags
</pre>

<p>
Jetzt, da die Partitionstabelle leer ist, können wir Partitionen erstellen. Wir
benutzen hier das bereits oben besprochene Partitionsschema.
</p>

</body>
</subsection>
<subsection>
<title>Die EFI-Boot-Partition erstellen</title>
<body>

<p>
Als erstes erstellen wir eine kleine EFI-Boot-Partition. Diese muß vom Typ FAT
sein, damit die IA64-Firmware sie lesen kann. In unserem Beispiel hat diese
Partition die Größe von 32 MB, was ausreichend ist um Kernel und die elilo-
Konfiguration zu speichern. Jeder IA64-Kernel wird etwa 5 MB groß sein, diese
Konfiguration läßt Ihnen also genug Platz zum Experimentieren.
</p>

<pre caption="Die Boot-Partition erstellen">
(parted) <i>mkpart primary fat32 0 32</i>
(parted) <i>print</i>
Disk geometry for /dev/sda: 0.000-34732.890 megabytes
Disk label type: gpt
Minor    Start       End     Filesystem  Name                  Flags
1          0.017     32.000  fat32
</pre>

</body>
</subsection>
<subsection>
<title>Die Swap-Partition erstellen</title>
<body>

<p>
Jetzt erstellen wir die Swap-Partition. Die klassische Größe für den Swap ist
doppelt so groß wie der eingebaute RAM. In modernen Systemen ist so viel Platz
nicht mehr nötig, 512 MB sind auf den meisten Desktop-PCs ausreichend. Für
einen Server sollten Sie etwas mehr einplanen, da diese etwas anspruchsvoller
sind.
</p>

<pre caption="Die Swap-Partition erstellen">
(parted) <i>mkpart primary linux-swap 32 544</i>
(parted) <i>print</i>
Disk geometry for /dev/sda: 0.000-34732.890 megabytes
Disk label type: gpt
Minor    Start       End     Filesystem  Name                  Flags
1          0.017     32.000  fat32
2         32.000    544.000
</pre>

</body>
</subsection>
<subsection>
<title>Die Root-Partition erstellen</title>
<body>

<p>
Zum Schluß erstellen wir noch die Root-Partition. In unserem Beispiel nimmt
diese den gesamten restlichen Platz der Festplatte ein, der noch zur Verfügung
steht. Wir nutzen ext3, Sie können aber außerdem noch zwischen ext2, JFS,
ReiserFS oder XFS wählen, ganz nach Ihrem Geschmack. Das eigentliche
Dateisystem wird in diesem Schritt noch nicht erstellt, es wird nur festgelegt
welche Arten von Dateisystemen auf jeder Partition Platz finden werden.
</p>

<pre caption="Die Root-Partition erstellen">
(parted) <i>mkpart primary ext3 544 34732.890</i>
(parted) <i>print</i>
Disk geometry for /dev/sda: 0.000-34732.890 megabytes
Disk label type: gpt
Minor    Start       End     Filesystem  Name                  Flags
1          0.017     32.000  fat32
2         32.000    544.000
3        544.000  34732.874
</pre>

</body>
</subsection>
<subsection>
<title>Parted beenden</title>
<body>

<p>
Um Parted zu beenden, tippen Sie einfach <c>quit</c>. Es ist nicht nötig das
Partitions-Layout in einem separaten Schritt auf die Festplatte zu schreiben.
Wenn Sie parted verlassen erinnert es Sie nocheinmal daran Ihre
<c>/etc/fstab</c> anzupassen, was wir später auch tun werden.
</p>

<pre caption="Parted beenden">
(parted) <i>quit</i>
Information: Don't forget to update /etc/fstab, if necessary.
</pre>

<p>
Jetzt, da Sie die Partitionen erstellt haben, können Sie mit dem
<uri link="#filesystems">Erstellen von Dateisystemen</uri> fortfahren.
</p>

</body>
</subsection>
</section>
<section id="filesystems">
<title>Erstellen von Dateisystemen</title>
<subsection>
<title>Einführung</title>
<body>

<p>
Nun ist es Zeit die Dateisysteme auf den Partitionen einzurichten. Wenn es
Ihnen egal ist, welches Dateisystem Sie benutzen und Sie mit unserer Wahl
glücklich sind, fahren Sie mit dem Schritt <uri link="#filesystems-apply">
Das Dateisystem auf die Partition schreiben</uri> fort. Anderenfalls lesen Sie
weiter um etwas über Dateisysteme zu lernen...
</p>

</body>
</subsection>
<subsection>
<title>Dateisysteme?</title>
<body>

<p>
Der Linux-Kernel unterstützt eine Reihe von Dateisystemen. Wir werden Ihnen
VFAT, ext2, ext3, ReiserFS, XFS und JFS vorstellen, da dies die
gebräuchlichsten auf Linux-Systemen sind.
</p>

<p>
<b>VFAT</b> ist das MS-DOS Dateisystem, erweitert um lange Dateinamen. Das ist
auch das einzige Dateisystem das die EFI-Firmware auf IA64-Systemen versteht.
Die Boot-Partition auf IA64 sollte immer VFAT sein, für ihre Daten sollten Sie
jedoch eines der anderen, unten aufgelisteten Dateisysteme wählen.
</p>

<p>
<b>ext2</b> ist das erprobte und wahre Linux Dateisystem, unterstützt aber kein
Metadata Journaling, was bedeutet, dass routinemäßige Dateisystem Checks beim
Booten ziemlich zeitaufwändig sein können. Es gibt mittlerweile eine Auswahl an
journalisierenden Dateisystemen neuerer Generation, die die Konsistenzchecks
sehr schnell erledigen und dadurch im Vergleich mit den nicht-journalisierenden
Gegenstücken vorzuziehen sind. Jounalisierende Dateisysteme verhindern lange
Verzögerungen beim Booten, wenn sich das Dateisystem in einem inkonsistenten
Zustand befindet.
</p>

<p>
<b>ext3</b> ist die journalbasierte Version des ext2-Dateisystem, das
Metadaten-Journalisierung für schnelle Wiederherstellung, sowie andere
verbesserte Journalisierungs-Modi wie "Full Data"- und "Ordered
Data"-Journalisierung, unterstützt. Es verwendet einen HTree-Index der
in fast allen Situation zu einer hohen Performance führt. Kurz, ext3 ist ein
sehr gutes und verlässliches Dateisystem.
</p>

<p>
<b>ReiserFS</b> ist ein B+-Tree basierendes Dateisystem mit einer sehr guten
allgemeinen Performance und überholt sowohl ext2 und ext3 im Umgang mit kleinen
Dateien (Dateien kleiner als 4k) oftmals mit einem Faktor von 10x-15x. ReiserFS
skaliert ausserdem extrem gut und hat Metadata Journaling. ReiserFS ist
stabil und sowohl als Dateisystem für generelle Anwendungen, als auch für
extreme Fälle wie große Dateisysteme, den Gebrauch von sehr großen Dateien und
Verzeichnissen mit zehntausenden von kleinen Dateien brauchbar.
</p>

<p>
<b>XFS</b> ist ein Dateisystem mit Metadaten Journaling, dass unter dem Gentoo
Linux xfs-sources Kernel voll unterstüzt wird. Es beinhaltet ein robustes
Feature-Set und ist auf Skalierbarkeit optimiert. Wir empfehlen den Einsatz
dieses Dateisystems nur auf Linux Systemen mit High-End SCSI und/oder Fibre
Channel Storage und einer unterbrechungsfreien Stromversorgung. Da XFS agressiv
in-transit Daten im RAM puffert, können unsachgemäß designte Programme (solche
die keine Vorsichtsmaßnahmen treffen, wenn Sie auf die Festplatte schreiben und
davon gibt es einige) dazu führen, dass eine ganze Menge Daten verloren gehen,
wenn das System unerwartet ausfällt.
</p>

<p>
<b>JFS</b> ist IBMs hochgeschwindigkeits journalisierendes Dateisystem. Es ist
kürzlich bereit für den Produktionseinsatz geworden.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>Dateisystem auf einer Partition anlegen</title>
<body>

<p>
Um ein Dateisystem auf einer Partition oder einem Volume zu erstellen, gibt es
für jedes mögliche Dateisystem entsprechende Programme:
</p>

<table>
<tr>
  <th>Dateisystem</th>
  <th>Kommando zur Erstellung</th>
</tr>
<tr>
  <ti>vfat</ti>
  <ti><c>mkdosfs</c></ti>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
Zum Beispiel, um die Boot-Partition (<path>/dev/sda1</path> in unserem
Beispiel) als VFAT und die Root-Partition (<path>/dev/sda3</path> in unserem
Beispiel) als ext3 zu formatieren, würden Sie folgendes benutzen:
</p>

<pre caption="Dateisystem auf einer Partition anlegen">
# <i>mkdosfs /dev/sda1</i>
# <i>mke2fs -j /dev/sda3</i>
</pre>

</body>
</subsection>
<subsection>
<title>Aktivieren der Swap Partition</title>
<body>

<p>
<c>mkswap</c> ist das Kommando zur Initialisierung von Swap-Partitionen:
</p>

<pre caption="Erstellen einer Swap Signatur">
# <i>mkswap /dev/sda2</i>
</pre>

<p>
Um Swap-Partitionen zu aktivieren, nutzen Sie <c>swapon</c>:
</p>

<pre caption="Aktivieren der Swap-Partition">
# <i>swapon /dev/sda2</i>
</pre>

<p>
Erstellen und aktivieren Sie jetzt den Swap mit den oben erwähnten Befehlen.
</p>

</body>
</subsection>
</section>
<section>
<title>Mounting</title>
<body>

<p>Nachdem Ihre Partitionen nun initialisiert sind und ein Dateisystem
beinhalten, ist es an der Zeit diese Partitionen zu mounten. Benutzen Sie den
<c>mount</c> Befehl. Vergessen Sie nicht die notwendigen Mount-Verzeichnisse
für jede erstellte Partition anzulegen. Als Beispiel erstellen wir einen
Mountpunkt und mounten die Root-Partition:
</p>

<pre caption="Mounten von Partition">
# <i>mount /dev/sda3 /mnt/gentoo</i>
</pre>

<note>
Leider wird, im Gegensatz zu anderen Architekturen die Gentoo unterstützt,
<path>/boot</path> auf IA64-Systemen nicht gemountet. Der Grund dafür ist, daß
die EFI-Boot-Partition jedsmal wenn Sie elilo aufrufen automatisch gemountet
und geschrieben wird. Dies hat zur Folge, daß /boot auf dem Root-Filesystem
liegt und Sie dort Ihre Kernel ablegen, welche in der elilo-Konfiguration
angegeben sind.
</note>

<note>
Wenn Sie Ihr <path>/tmp</path> auf eine separate Partition legen möchten,
stellen Sie sicher, dass Sie die Berechtigungen nach dem Mounten ändern:
<c>chmod 1777 /mnt/gentoo/tmp</c>. Dies gilt auch für <path>/var/tmp</path>.
</note>

<p>
Außerdem müssen wir noch das proc-Dateisystem (eine virtuelle Schnittstelle zum
Kernel) auf <path>/proc</path> mounten. Vorher ist es jedoch nötig, daß wir
unsere Daten auf die Partitionen schreiben.
</p>

<p>
Fahren Sie mit der <uri link="?part=1&amp;chap=5">Installation der Gentoo
Installationsdateien</uri> fort.
</p>

</body>
</section>
</sections>
