<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/gentoolkit.xml,v 1.1 2003/12/11 19:22:14 dertobi123 Exp $ -->

<!-- English CVS Version: 1.7 -->

<guide link = "/doc/de/gentoolkit.xml">

<title>Gentoolkit</title>
<author title="Author">
  <mail link="mbutcher@aleph-null.tv"> Matt Butcher</mail>
</author>
<author title="Editor">
  <!-- zhen@gentoo.org -->John P. Davis
</author>
<author title="Editor">
  <mail link="erwin@gentoo.org">Erwin</mail>
</author>
<author title="Übersetzer">
  <mail link="dl@ibwag.com">David Leder</mail>
</author>

<!-- Licensed under GFDL -->

<abstract>
Gentoolkit ist eine Zusammenfassung von Werkzeugen für das einfache
Administrieren eines Gentoo Systems. Dieses Dokument deckt die Basis einiger
Werkzeuge des aktuellen Gentoolkits ab.
</abstract>

<version>1.0</version>
<date>December 8, 2003</date>

<chapter>
<title>Einleitung</title>
<section>
<title>Was ist Gentoolkit?</title>
<body>

<p>
Gentoo ist eine einzigartige Distribution und hat einige Komplexitäten,
die in anderen Distributionen gar nicht vorhanden sind. Als Gentoo
Entwickler und Mitarbeiter ein paar dieser Komplexitäten entdeckten,
schrieben sie Werkzeuge um den Benutzern und Administratoren zu
helfen. Viele dieser Werkzeuge befinden sich im Gentoo Projekt
und sind im Paket <path>app-portage/gentoolkit</path>.
</p>

<p>
Gentoolkit beinhaltet eine ganze Menge von nützlichen Werkzeugen, um
Portage und die ebuild Architektur zu managen. Die meisten
Benutzer -- vor allem diejenigen die ihr System oft updaten --
werden einen Nutzen aus dem installierten Gentoolkit ziehen.
</p>
</body>
</section>
<section>
<title>Installation</title>
<body>

<p>
Einfach wie mit allen Gentoo Paketen, besteht die Installation
nur durch emerge.
</p>

<pre>
<i>emerge gentoolkit </i>
</pre>

<note>
Viele der der Tools im Gentoolkit enthüllen wichtige Informationen
über das System oder erfordern root Berechtigungen. Darum können
einige Programme, (oder damit sie richtig funktionieren) nur als
Benutzer mit root Berechtigungen ausgeführt werden.
</note>

</body>
</section>
<section>
<title>Dokumentationen finden</title>
<body>

<p>
Zur Zeit als dies geschrieben wurde, waren nicht alle Programme
in gentoolkit gut dokumentiert. Einige haben Man-Pages, aber nicht
alle. Die komplette Dokumentation, zu einem Programm befindet sich
in <path>/usr/doc/gentoolkit-[Version]/[Programm-Name]/</path>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Paketdaten mit qpkg abfragen</title>
<section>
<title>Einleitung</title>
<body>

<p>
<c>qpkg</c> ist ein flexibles Werkzeug um Informationen über ebuilds zu ermitteln,
ob sie installiert sind, oder auch nicht. Es kann Informationen über Dateien,
und zu welchen ebuilds sie gehören, anzeigen. Sogar mehrere Versionen des selben
Pakets, die installiert sind, und was ein einzelnes ebuild tut.
</p>

<p>
Der Aufruf von <c>qpkg</c> ohne Argumenten schreibt eine Liste aller ebuilds,
mit Sternen
(*) neben den Paketen, welche auf dem System installiert sind.
</p>

<note>
Standardmässig schreibt <c>qpkg</c> in Farbe. um dies auszuschalten,
benutzen Sie <c>--no-color</c> oder <c>-nc</c>
</note>

</body>
</section>
<section>
<title>Abfrage von Paketinformationen</title>
<body>

<p>
Eine der viel genutzten Funktionen von <c>qpkg</c> ist die Möglichkeit herauszufinden, was ein
gewisses Paket ist. Einmal, als ich <path>net-misc</path> durchschaute, sah
ich ein Paket, dass <path>neon</path> heisst, hatte aber keine Ahnung, was
es war, also startete ich qpkg.
</p>

<pre>
hebron root # <i>qpkg -i net-misc/neon
net-misc/neon-0.15.3-r1
       HTTP and WebDAV client library [ http://www.webdav.org/neon ]
net-misc/neon-0.18.5
       HTTP and WebDAV client library [ http://www.webdav.org/neon ]
net-misc/neon-0.19.2
       HTTP and WebDAV client library [ http://www.webdav.org/neon ]
net-misc/neon-0.19.2-r1
       HTTP and WebDAV client library [ http://www.webdav.org/neon ]
net-misc/neon-0.21.1
       HTTP and WebDAV client library [ http://www.webdav.org/neon ] </i>
</pre>

<p>
<c>qpkg</c> las sich durch die ebuild Dateien für die fünf <path>net-misc/neon</path>
ebuilds und schrieb die Informationen DESCRIPTION und HOMEPAGE auf den Bildschirm.
</p>

</body>
</section>
<section>
<title>Dateien auflisten, die zu einem ebuild gehören.</title>
<body>

<p>
<c>qpkg</c> kann auch die Dateien auflisten, welche zu einem installierten
ebuild gehören. Ich weiss, das gentoolkit einige Werkzeuge installiert hat,
aber ich weiss nicht, welche genau. Um dies herauszufinden kann ich
<c>qpkg -l</c> eingeben.
</p>

<pre>
hebron portage # <i>qpkg -l app-portage/gentoolkit
app-portage/gentoolkit-0.1.14-r1 *
CONTENTS:
/usr
/usr/share
/usr/share/gentoolkit
/usr/share/gentoolkit/histogram.awk
/usr/share/doc
/usr/share/doc/gentoolkit-0.1.14-r1
/usr/share/doc/gentoolkit-0.1.14-r1/gentool
/usr/share/doc/gentoolkit-0.1.14-r1/gentool/ChangeLog.gz
/usr/share/doc/gentoolkit-0.1.14-r1/lintool
/usr/share/doc/gentoolkit-0.1.14-r1/lintool/checklist-for-ebuilds.gz
/usr/share/doc/gentoolkit-0.1.14-r1/lintool/ChangeLog.gz
/usr/share/doc/gentoolkit-0.1.14-r1/etc-update
/usr/share/doc/gentoolkit-0.1.14-r1/etc-update/ChangeLog.gz
/usr/share/man
/usr/share/man/man1
/usr/share/man/man1/qpkg.1.gz
/usr/share/man/man1/lintool.1.gz
/usr/share/man/man1/etc-update.1.gz
/usr/bin
/usr/bin/gentool-bump-revision
/usr/bin/gentool-total-coverage
/usr/bin/gentool-author-coverage
/usr/bin/gentool-package-count
/usr/bin/qpkg
/usr/bin/pkg-size
/usr/bin/lintool
/usr/sbin
/usr/sbin/pkg-clean
/usr/sbin/mkebuild
/usr/sbin/emerge-webrsync
/usr/sbin/epm
/usr/sbin/etc-update
/etc
/etc/etc-update.conf </i>
</pre>

</body>
</section>
<section>
<title>Das Paket finden, woher eine Datei stammt</title>
<body>

<p>
Um das Paket zu finden, von welchem eine Datei stammt, benutzt man den
<c>-f</c> oder <c>--find-file</c> Parameter.
</p>

<pre>
hebron portage # <i>qpkg -f net-www/mozilla * </i>
</pre>

</body>
</section>
<section>
<title>Doppelte Pakete auflisten</title>
<body>
<p>
Manchmal können mehrere Versionen des selben Pakets existieren. <c>qpkg --dup</c>
wird eine Liste von doppelt vorkommenden Paketen ausgeben. Die Existenz eines
doppelten Pakets muss nicht heissen, dass die ältere Version entfernt werden
kann. Die Versionen könnten verschiedene Lücken  füllen. Um Duplikate für
den selben Zweck zu finden benutze ich <c>qpkg --dups --slot</c>. Ich habe nur
KDE von 3.0 auf 3.0.2 geupdated und habe nun Duplikate für denselben Zweck.
</p>

<pre>
hebron portage # <i>qpkg --dups --slot 
app-portage/gentoolkit
kde-base/kdeaddons
kde-base/kdeadmin
kde-base/kdeartwork
kde-base/kdebase
kde-base/kdegames
kde-base/kdelibs
kde-base/kdemultimedia
kde-base/kdenetwork
kde-base/kdetoys
kde-base/kdeutils
media-libs/freetype
x11-libs/qt </i>
</pre>

</body>
</section>
<section>
<title>Paketintegrität überprüfen</title>
<body>

<p>
Manchmal ist es hilfreich, die Integrität eines Pakets zu überprüfen, um
zu wissen, dass Dateien nicht ersetzt wurden seit sie installiert wurden.
<c>qpkg</c> kann md5 Summen überprüfen, genau wie Installationszeiten, um
herauszufinden, ob Dateien für ein Paket wirklich nicht korrupt, ersetzt
oder entfernt wurden.
</p>

<p>
Um beiden - mtimes und md5 Summen zu überprüfen, benutzen Sie den <c>-c</c> Parameter.
</p>

<pre>
hebron portage # <i>qpkg gnupg -c -v    
app-crypt/gnupg-1.0.6 *
/usr/lib/gnupg/rndunix !md5! !mtime!
/usr/lib/gnupg/rndegd !md5! !mtime!
/usr/lib/gnupg/tiger !md5! !mtime!
/usr/bin/gpg !md5! !mtime!
/usr/bin/gpgv !md5! !mtime!
/usr/share/gnupg/options.skel !md5! !mtime!
/usr/share/gnupg/FAQ !md5! !mtime!
/usr/share/gnupg/faq.html !md5! !mtime!
/usr/share/locale/da/LC_MESSAGES/gnupg.mo !md5! !mtime!
/usr/share/locale/de/LC_MESSAGES/gnupg.mo !md5! !mtime!
/usr/share/locale/eo/LC_MESSAGES/gnupg.mo !md5! !mtime!
/usr/share/locale/et/LC_MESSAGES/gnupg.mo !md5! !mtime!
/usr/share/locale/fr/LC_MESSAGES/gnupg.mo !md5! !mtime!
/usr/share/locale/id/LC_MESSAGES/gnupg.mo !md5! !mtime!
/usr/share/locale/it/LC_MESSAGES/gnupg.mo !md5! !mtime!
/usr/share/locale/ja/LC_MESSAGES/gnupg.mo !md5! !mtime!
/usr/share/locale/nl/LC_MESSAGES/gnupg.mo !md5! !mtime!
/usr/share/locale/pl/LC_MESSAGES/gnupg.mo !md5! !mtime!
/usr/share/locale/pt_BR/LC_MESSAGES/gnupg.mo !md5! !mtime!
/usr/share/locale/sv/LC_MESSAGES/gnupg.mo !md5! !mtime!
/usr/share/locale/tr/LC_MESSAGES/gnupg.mo !md5! !mtime!
/usr/share/info/gpgv.info.gz !md5! !mtime!
/usr/share/man/man1/gpg.1.gz !md5! !mtime!
/usr/share/man/man1/gpgv.1.gz !md5! !mtime!
24/92

app-crypt/gnupg-1.0.7 *
0/101 </i>
</pre>

<p>
Wie Sie sehen können, habe ich mehr denn eine Version von GnuPG installiert.
<c>qpkg</c> meldet, dass viele der Dateien von der älteren Version geändert
wurden seit ich es installiert habe. Diese Pakete wurden sehr wahrscheinlich
abgeändert als ich von <path>gnupg-1.0.6</path> nach <path>gnupg-1.0.7</path>
geupdated habe. Merken Sie sich, dass die letzten zwei Zeilen anzeigen, dass 0 von 101
Dateien von <path>gnupg-1.0.7</path> geändert wurden seit ich es installierte.
Das ist gut. Wenn irgend eines davon verändert sein würde, wäre ich verwundert.
</p>

</body>
</section>
<section>
<title>Warten Sie ... da ist noch mehr</title>
<body>

<p>
<c>qpkg</c> kann gebraucht werden, um andere Abfragen zu machen, aber ich werde
hier nicht weiter darauf eingehen. Es gibt eine sehr ausführliche Man-Page für
<c>qpkg</c>. Schlagen Sie dort für weitere Informationen nach.
</p>

</body>
</section>
</chapter>

<chapter>
<title>lintool</title>
<section>
<title>Einleitung</title>
<body>

<p>
<c>lintool</c> ist ein Programm dass ebuild Skripte nach Standardkonformität und
Voraussetzungen überprüft. Es ist wichtig für ebuild Entwicker, <c>lintool</c>
zu benutzen. Dadurch können Sie sicher stellen, dass Sie die Dinge richtig machen und nicht
das Core-Team beanspruchen zu müssen, das ohnehin viel damit zu tun hat, die ebuilds
ins Gentoo Repository einzubinden.
</p>

</body>
</section>
<section>
<title>Benützung</title>
<body>

<p>
<c>lintool</c> produziert eine schön gestaltete Liste von Tests und Resultaten nach
der Ausführung:
</p>

<pre>
hebron portage # <i>lintool app-crypt/gnupg/gnupg-1.0.7.ebuild 
app-crypt/gnupg/gnupg-1.0.7.ebuild                                     : Not OK

-------------------------------------------------------------------------------
 Summary for all 1 ebuild(s) checked                             # errors/warns
 -------------------------------------------------------------------------------
 Testing for illegal space characters, weird backslash formatting  : 0 / 0
 Testing for malformed headers                                     : 0 / 1
 Testing for occurence of deprecated try                           : 0 / 0
 Testing for superfluous A=${P}.tar.gz                             : 0 / 0
 Testing for empty DEPEND                                          : 0 / 0
 Testing for empty HOMEPAGE                                        : 0 / 0
 Testing for empty DESCRIPTION                                     : 0 / 0
 Testing for presence of env vars                                  : 1 / 1
 Testing for sane USE flag usage                                   : 0 / 0

 Total number of ebuilds with errors                               : 1 (100%)
 Total number of ebuilds with warnings                             : 1 (100%)
</i>
</pre>

<p>
Die erste Zeile fasst zusammen, ob das ebuild OK ist oder nicht. Im Falle von
<c>gnupg-1.0.7.ebuild</c> ist es nicht OK. Wenn man sich durch die Liste der
checks liest, können wir sehen, dass eine Warnung für schlecht geformte Headers
und einen Fehler bei einer Umgebungsvariable gibt.
</p>

<p>
Bei einem Blick auf das ebuild, sehe ich, dass ein paar benötigte
Umgebungsvariablen (LICENSE und RDEPEND) fehlen. Wenn man diese beiden
hinzufügt, ist der Fehler behoben. Aber es gibt immer noch zwei Warnungen --
eine für schlecht geformte Headers und eine für die Umgebungsvariablen.
Um mir zu helfen kann ich <c>lintool</c> noch einmal mit <c>--show-details</c>
durchlaufen lassen.
</p>

<pre>
hebron gnupg # <i>lintool --show-details ./gnupg-1.0.7.ebuild 
                                
-------------------------------------------------------------------------------
# Some data cut for brevity....

 Status for ./gnupg-1.0.7.ebuild
* Testing for malformed headers                                         : passed
- (W) Has illegal or suspect headers:
 |Suspect copyright year: # Copyright 1999-2000 Gentoo Technologies, Inc.
 * Testing for occurence of deprecated try                               : passed
 * Testing for superfluous A=${P}.tar.gz                                 : passed
 * Testing for empty DEPEND                                              : passed
 * Testing for empty HOMEPAGE                                            : passed
 * Testing for empty DESCRIPTION                                         : passed
 * Testing for presence of env vars                                      : passed
 - (W) Missing SLOT=
 * Testing for sane USE flag usage                                       : passed

 -------------------------------------------------------------------------------
  Summary for all 1 ebuild(s) checked                             # errors/warns
  -------------------------------------------------------------------------------
  Testing for illegal space characters, weird backslash formatting  : 0 / 0
  Testing for malformed headers                                     : 0 / 1
  Testing for occurence of deprecated try                           : 0 / 0
  Testing for superfluous A=${P}.tar.gz                             : 0 / 0
  Testing for empty DEPEND                                          : 0 / 0
  Testing for empty HOMEPAGE                                        : 0 / 0
  Testing for empty DESCRIPTION                                     : 0 / 0
  Testing for presence of env vars                                  : 0 / 1
  Testing for sane USE flag usage                                   : 0 / 0

  Total number of ebuilds with errors                               : 0 (0%)
  Total number of ebuilds with warnings                             : 1 (100%)
</i>
</pre>

<p>
Jetzt kann ich sehen, dass das Jahr im ebuild vielleicht falsch ist, und die
SLOT Variable fehlt. Nach einer Korrektur sollten alle Warnungen elimiert sein..
</p>

</body>
</section>
</chapter>

<chapter>
<title>epm</title>
<section>
<title>Einleitung</title>
<body>

<p>
<c>epm</c> ist ein Paket Management Werkzeug, dass die Kommandos von Red Hat's
RPM klont. Im jetzigen Stand unterstützt es nicht alle Features von RPM, aber es
unterstützt einige der mächtigeren RPM Abfrageoptionen.
</p>

<p>
Es behandelt auch das Entfernen von Paketen, welches hier nicht beschrieben wird.
Benutzen Sie <c>epm --help</c> um mehr über das Löschen von Paketen mit <c>epm</c> zu
erfahren.
</p>

</body>
</section>
<section>
<title>Paketabfragen mit epm</title>
<body>

<p>
<c>epm</c> funktioniert mit den selben Kommandozeilen Funktionen wie Red Hat's
RPM. <c>emp -qa</c> listet alle installierten Pakete auf. <c>epm -ql</c> listet
alle Dateien von einem spezifischen ebuild auf.
</p>

<pre>
hebron etc # <i>epm -ql ethereal
/usr/lib/ethereal/plugins/0.8.20/gryphon.so
/usr/lib/ethereal/plugins/0.8.20/gryphon.la
/usr/lib/ethereal/plugins/0.8.20/gryphon.a
/usr/lib/ethereal/plugins/0.8.20/mgcp.so
/usr/lib/ethereal/plugins/0.8.20/mgcp.la
/usr/lib/ethereal/plugins/0.8.20/mgcp.a
/usr/lib/ethereal/plugins/0.8.20/cosnaming.so
/usr/lib/ethereal/plugins/0.8.20/cosnaming.la
/usr/lib/ethereal/plugins/0.8.20/cosnaming.a
/usr/lib/ethereal/plugins/0.8.20/coseventcomm.so
/usr/lib/ethereal/plugins/0.8.20/coseventcomm.la
/usr/lib/ethereal/plugins/0.8.20/coseventcomm.a
/usr/bin/ethereal
/usr/bin/editcap
/usr/bin/mergecap
/usr/bin/tethereal
/usr/bin/text2pcap
/usr/bin/idl2eth
/usr/share/man/man1/idl2eth.1.gz
/usr/share/man/man1/tethereal.1.gz
/usr/share/man/man1/text2pcap.1.gz
/usr/share/man/man1/editcap.1.gz
/usr/share/man/man1/ethereal.1.gz
/usr/share/man/man1/mergecap.1.gz
/usr/share/doc/ethereal-0.8.20/AUTHORS.gz
/usr/share/doc/ethereal-0.8.20/COPYING.gz
/usr/share/doc/ethereal-0.8.20/NEWS.gz
/usr/share/doc/ethereal-0.8.20/ChangeLog.gz
/usr/share/doc/ethereal-0.8.20/README.gz
/usr/share/doc/ethereal-0.8.20/INSTALL.configure.gz
/usr/share/doc/ethereal-0.8.20/TODO.gz
/usr/share/doc/ethereal-0.8.20/README.aix.gz
/usr/share/doc/ethereal-0.8.20/README.bsd.gz
/usr/share/doc/ethereal-0.8.20/README.hpux.gz
/usr/share/doc/ethereal-0.8.20/README.irix.gz
/usr/share/doc/ethereal-0.8.20/README.linux.gz
/usr/share/doc/ethereal-0.8.20/README.tru64.gz
/usr/share/doc/ethereal-0.8.20/README.win32.gz
/usr/share/doc/ethereal-0.8.20/README.vmware.gz
/etc/ethereal/manuf </i>
</pre>

<p>
<c>epm</c> stellt einige erweiterte Abfrageoptionen zur Verfügung welche in
<c>qpkg</c> nicht vorhanden sind, als dieses Dokument geschrieben wurde. Auf jeden
Fall kann es auch nur nach Konfigurations- oder Dokumentationsdateien suchen.
</p>

<pre>
hebron etc # <i>epm -qc ethereal
/etc/ethereal/manuf

hebron etc # epm -qd ethereal
/usr/share/man/man1/idl2eth.1.gz
/usr/share/man/man1/tethereal.1.gz
/usr/share/man/man1/text2pcap.1.gz
/usr/share/man/man1/editcap.1.gz
/usr/share/man/man1/ethereal.1.gz
/usr/share/man/man1/mergecap.1.gz
/usr/share/doc/ethereal-0.8.20/AUTHORS.gz
/usr/share/doc/ethereal-0.8.20/COPYING.gz
/usr/share/doc/ethereal-0.8.20/NEWS.gz
/usr/share/doc/ethereal-0.8.20/ChangeLog.gz
/usr/share/doc/ethereal-0.8.20/README.gz
/usr/share/doc/ethereal-0.8.20/INSTALL.configure.gz
/usr/share/doc/ethereal-0.8.20/TODO.gz
/usr/share/doc/ethereal-0.8.20/README.aix.gz
/usr/share/doc/ethereal-0.8.20/README.bsd.gz
/usr/share/doc/ethereal-0.8.20/README.hpux.gz
/usr/share/doc/ethereal-0.8.20/README.irix.gz
/usr/share/doc/ethereal-0.8.20/README.linux.gz
/usr/share/doc/ethereal-0.8.20/README.tru64.gz
/usr/share/doc/ethereal-0.8.20/README.win32.gz
/usr/share/doc/ethereal-0.8.20/README.vmware.gz
</i>
</pre>

<note>
<c>emp --help</c> listet alle Optionen auf, die von epm <e>schliesslich</e> zur Verfügung
gestellt werden. Jedoch sind Optionen, die mit Sternen (*) markiert sind, noch nicht implementiert.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Anderes</title>
<section>
<title>etc-update</title>
<body>
<!--
Feel free to add more to this. It probably deserves its own chapter, but I don't 
use it, so I can't really write much about it.
-->
<p>
<c>etc-update</c> bietet eine angenehme Alternative zum Updaten der Konfigurationsdateien
von Hand. Nach dem Durchlaufen eines emerge, welches Konfigurationsdateien
ändert, können Sie etc-update ausführen um schnell alle gänderten Konfigurationsdateien
aktualisieren.
</p>

<p>
Dies erfolgt durch eine Menu-basierte Benutzerschnittstelle und hält Möglichkeiten,
die Konfigurationsdateien anzuschauen und zusammenzuführen bereit - und lässt den
Benutzer selbst enscheiden, welche er aktualisieren möchte.
</p>

</body>
</section>
<section>
<title>gentool</title>
<body>

<p>
gentool ist eine kollektiver Name für einige kleine Skripte, die ebuild Statistiken
analysieren.
Beispiel: gentoo-total-coverage schreibt eine Liste von E-Mail Adressen und die Anzahl
an ebuilds im Portage Verzeichnisbaum aus.
</p>

</body>
</section>
<section>
<title>pkg-size</title>
<body>

<p>
<c>pkg-size</c> gibt die Grösse der Installierten Dateien in einem gewissen Paket an.
</p>

<pre>
hebron portage # <i>pkg-size nmap   
net-analyzer/nmap-2.54_beta24-r1 897024 (876KB) </i>
</pre>

</body>
</section>
<section>
<title>mkebuild</title>
<body>

<p>
<c>mkebuild</c> vereinfacht das Erstellen von neuen ebuilds und automatisiert so
viel wie möglich. Die Datei sollte irgend ein Paketformat haben. Wenn es nicht funktioniert
gibt es Tipps zurück, was man machen müsste/könnnte, um ein gültiges ebuild zu erhalten.
</p>

</body>
</section>
<section>
<title>emerge-webrsync</title>
<body>
<!-- Can't find any documentation on this anywhere... not even a comment in the code. -->

<p>
Downloaded einen täglichen Schnappschuss per HTTP mit wget und synchronisiert es
mit Portage, falls dies erwünscht ist.
</p>

</body>
</section>
</chapter>
</guide>

