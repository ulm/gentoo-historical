<?xml version="1.0" encoding="UTF-8"?>
<!-- English CVS Version: 1.27 -->
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/nvidia-guide.xml,v 1.15 2006/04/03 03:06:52 grahl Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/de/nvidia-guide.xml" lang="de">
<title>Gentoo Linux nVidia Guide</title>

<author title="Autor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Bearbeiter">
  <mail link="curtis119@gentoo.org">M Curtis Napier</mail>
</author>
<author title="Bearbeiter"> 
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="Übersetzer">
  <mail link="tevers@onlinehome.de">Torsten Evers</mail>
</author>
<author title="Übersetzer">
  <mail link="gentoodoc@itsnotmy.name">Sebastian Westermayer</mail>
</author>


<abstract>
Viele Gentoo-Nutzer haben einen nVidia-Chipsatz in ihrem System. NVidia bietet
spezielle Linuxtreiber um die Geschwindigkeit Ihrer Karte zu erhöhen. Dieser 
Text informiert Sie, wie die Treiber zu installieren und zu konfigurieren sind.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.23</version>
<date>2006-03-28</date>

<chapter>
<title>Einführung</title>
<section>
<body>

<p>
NVidia gibt seine eigenen Linux-Treiber heraus, die eine hohe Leistung und volle
3D-Beschleunigung bieten. Die Treiber sind in in zwei Teile gespalten:
<c>nvidia-kernel</c> und <c>nvidia-glx</c>
</p>

<p>
<c>nvidia-kernel</c> ist ein Kerneltreiber der die systemnahe Kommunikation mit
Ihrer Videohardware handhabt. Es ist einfach ein Kernelmodul namens 
<c>nvidia</c>, dass Abhängig zu Ihren Kernelquellen installiert wird und jedes 
Mal geladen werden muss, wenn Sie die nVidia-Treiber benutzen wollen.
</p>

<p>
Neben dem Kerneltreiber müssen Sie auch den X11 GLX Layer installieren
(<c>nvidia-glx</c>). Dieser wird von X genutzt um Grafiken zu rendern, welcher
intern den Kerneltreiber <c>nvidia-kernel</c> verwendet um mit der Hardware zu
interagieren.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Konfigurieren Ihrer Karte</title>
<section>
<title>Kernelkonfiguration</title>
<body>

<p>
Wie oben erwähnt, installiert und läuft der nVidia-Kerneltreiber anhängig von
Ihrem aktuellen Kernel. Er wird als Modul erstellt, also macht es Sinn, dass Ihr
Kernel das Laden von Kernel-Modulen unterstützt. Wenn Sie <c>genkernel</c> 
verwendet haben, um Ihren Kernel zu konfigurieren, ist dies bereits geschehen. 
Wenn nicht, überprüfen Sie die Konfiguration Ihres Kernels noch einmal genau um 
sicherzustellen, dass die Unterstützung dafür aktiviert ist:
</p>

<pre caption="Laden von Kernel-Modulen erlauben">
Loadable module support ---&gt;
  [*] Enable loadable module support
</pre>

<p>
Sie müssen außerdem <e>Memory Type Range Register</e> in Ihrem Kernel 
aktivieren:
</p>

<pre caption="MTRR aktivieren">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

</body>
</section>
<section>
<title>Architektur-spezifische Bemerkungen</title>
<body>

<impo>
Bei x86 und AMD64 Prozessoren erzeugt der kernelinterne Treiber einen Konflikt
mit dem Binärtreiber von nVidia. Wollen Sie Ihren Kernel für diese CPUs
kompilieren, müssen Sie die kernelinterne Treiberunterstützung wie hier gezeigt
komplett entfernen:
</impo>

<pre caption="Den kernelintern Treiber entfernen">
Device Drivers ---&gt;
Graphics Support ---&gt;
&lt; &gt;   nVidia Framebuffer Support
&lt; &gt;   nVidia Riva support
</pre>

<p>
Eine gute Framebufferalternative ist <c>VESA</c>:
</p>

<pre caption="VESA-Unterstützung aktivieren">
Device Drivers ---&gt; 
Graphics Support ---&gt;
&lt;*&gt;   VESA VGA graphics support
</pre>

<p>
Dann wählen Sie unter "VESA driver type" entweder <c>vesafb</c> oder 
<c>vesafb-tng</c> aus:
</p>

<pre caption="Framebuffertyp auswählen">
( ) vesafb
(X) vesafb-tng
</pre>

<p>
Wenn Sie <c>vesafb</c> benutzen, können Sie für weitere Inforamtionen die
<path>/usr/src/linux/Documentation/fb/vesafb.txt</path> lesen oder Sie
schauen nach Ihrer Frambufferdokumentation unter
<path>/usr/src/linux/Documentation/fb/</path>.
</p>

</body>
</section>
<section>
<title>Weiter mit der Kernelkonfiguration</title>
<body>

<p>
NVidias Module und Bibliotheken sind in zwei Paketen zusammengefasst:
<c>nvidia-glx</c> und <c>nvidia-kernel</c>. Ersteres sind die X11 GLX 
Bibliotheken, während zweiteres die Kernelmodule sind. 
</p>

<p>
Basierend auf dem <path>/usr/src/linux</path> Symlink findet das nvidia-kernel 
Ebuild findet die Kernelversion automatisch heraus. Bitte stellen Sie sicher, 
dass dieser Symlink auf die richtigen Quellen verweist und dass der Kernel
richtig konfiguriert ist. Bitte beziehen Sie sich auf den Abschnitt  
Konfiguration des Kernels im <uri link="/doc/de/handbook/">Installations 
Handbuch</uri> für Details zur Kernelkonfiguration.
</p>

<p>
Wenn Sie gentoo-sources-2.6.11-r6 benutzen, könnte Ihr <path>/usr/src</path>
Verzeichnis etwa so ähnlich aussehen:
</p>

<pre caption="Überprüfen Sie Ihren /usr/src/linux Symlink">
# <i>cd /usr/src</i>
# <i>ls -l</i>
<comment>(Überprüfen Sie ob linux auf das richtige Verzeichnis verweist)</comment>
lrwxrwxrwx   1 root root   22 Apr 23 18:33 linux -&gt; linux-2.6.11-gentoo-r6
drwxr-xr-x   4 root root  120 Apr  8 18:56 linux-2.4.26-gentoo-r4
drwxr-xr-x  18 root root  664 Dec 31 16:09 linux-2.6.10
drwxr-xr-x  18 root root  632 Mar  3 12:27 linux-2.6.11
drwxr-xr-x  19 root root 4096 Mar 16 22:00 linux-2.6.11-gentoo-r6
</pre>

<p>
In der Ausgabe oben sehen Sie, dass der <c>linux</c> Symlink auf den
<c>linux-2.6.11-gentoo-r6</c> Kernel verweist.
</p>

<p>
Wenn der Symlink nicht auf die richtigen Quellen verweist, müssen Sie den Link
wie folgt aktualisieren:
</p>

<pre caption="Erstellen/Aktualisieren des /usr/src/linux Symlink">
# <i>cd /usr/src</i>
# <i>ln -snf linux-2.6.11-gentoo-r6 linux</i>
</pre>

</body>
</section>
<section>
<title>Optional: Unterstützung für alte Karten überprüfen</title>
<body>

<note>
Unglücklicherweise werden bestimmte alte Videokarten nicht von den neueren
Versionen von <c>nvidia-glx</c> und <c>nvidia-kernel</c> unterstützt. nVidia
stellt eine <uri link="http://www.nvidia.com/object/IO_18897.html">Liste mit
unterstützten Karten</uri> zur Verfügung. Bitte gehen Sie diese Liste durch,
bevor Sie die Treiber installieren.
</note>

<p>
Das Folgende ist eine Liste mit <b>nicht unterstützten</b> alten Videokarten:
</p>

<pre caption="Nicht unterstützte Karten">
TNT2
TNT2 Pro
TNT2 Ultra
TNT2 Model 64 (M64)
TNT2 Model 64 (M64) Pro
Vanta
Vanta LT
GeForce 256
GeForce DDR
GeForce2 GTS
GeForce2 Pro
GeForce2 Ti
GeForce2 Ultra
GeForce2 MX Integrated graphics
Quadro
Quadro2 Pro
Quadro2 EX
</pre>

<p>
Wenn Sie eine dieser Karten besitzen, müssen Sie die neueren Versionen der
nVidiatreiber maskieren und eine ältere Version installieren:
</p>

<pre caption="Maskieren neuerer Treiber">
# <i>echo "&gt;media-video/nvidia-kernel-1.0.6629-r5" &gt;&gt; /etc/portage/package.mask</i>
# <i>echo "&gt;media-video/nvidia-glx-1.0.6629-r7" &gt;&gt; /etc/portage/package.mask</i>
</pre>

</body>
</section>
<section>
<title>Installation der richtigen Treiber</title>
<body>

<p>
Jetzt ist es an der Zeit <c>nvidia-kernel</c> und <c>nvidia-glx</c> zu 
installieren. Da <c>nvidia-glx</c> von <c>nvidia-kernel</c> abhängt, reicht es 
<c>nvidia-glx</c> zu installieren.
</p>

<pre caption="Installieren der nVidia-Module">
# <i>emerge nvidia-glx</i>
</pre>

<impo>
Jedes mal wenn Sie <uri link="/doc/de/kernel-upgrade.xml">einen neuen Kernel
kompilieren</uri> oder den aktuellen neu kompilieren, müssen Sie
<c>emerge nvidia-kernel</c> ausführen um die nVidia-Module neu zu installieren.
<c>nvidia-glx</c> ist nicht von einem Kernelwechsel betroffen und muss nichtmal
neu erstellt werden wenn Sie X neu kompilieren oder updaten.
</impo>

<p>
Wenn die Installion beendet ist, führen Sie <c>modprobe nvidia</c> aus, um das
Kernel-Modul in den Speicher zu laden.
</p>

<pre caption="Laden des Kernelmoduls">
# <i>modprobe nvidia</i>
</pre>

<p>
Um zu verhindern, dass Sie das Modul bei jedem Systemstart manuell laden müssen,
möchten Sie vielleicht, dass dies automatisch beim Booten Ihres Systems
geschieht. Editieren sie dazu <path>/etc/modules.autoload.d/kernel-2.6</path>
(oder <path>kernel-2.4</path> abhängig davon welche Kernelversion Sie benutzen)
und fügen Sie <c>nvidia</c> hinzu. Vergessen Sie nicht, danach 
<c>modules-update</c> auszuführen.
</p>

<pre caption="Ausführen von modules-update">
# <i>modules-update</i>
</pre>

</body>
</section>
<section>
<title>Den X-Server konfigurieren</title>
<body>

<p>
Wenn die passenden Treiber einmal installiert sind, müssen Sie Ihren X-Server 
(XFree86 oder Xorg) konfigurieren, damit er den <c>nvidia</c> Treiber verwendet,
anstatt des standard <c>nv</c> Treibers.
</p>

<p>
Öffnen Sie <path>/etc/X11/xorg.conf</path> (oder 
<path>/etc/X11/XF86Config</path> wenn Sie immer noch die ältere Position der
Konfigurationsdatei benutzen) mit Ihrem Lieblingseditor (wie <c>nano</c> oder 
<c>vim</c>) und gehen Sie zum <c>Device</c> Abschnitt. In diesem Abschnitt 
ändern Sie die <c>Driver</c> Zeile:
</p>

<pre caption="Ändern von nv zu nvidia in der X-Server Konfiguration">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>
  VideoRam   65536
EndSection
</pre>

<p>
Dann gehen Sie zum <c>Module</c> Abschnitt und stellen sicher, dass das 
<c>glx</c> Modul geladen wird, während das <c>dri</c> Modul nicht geladen wird:
</p>

<pre caption="Aktualisieren des Modul Abschnitts">
Section "Module"
  <comment>(...)</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>(...)</comment>
EndSection
</pre>

<p>
Stellen Sie danach sicher, dass im Abschnitt <c>Screen</c> die 
<c>DefaultDepth</c> Einstellung auf 16 oder 24 gesetzt ist, oder dass Sie nur 
<c>Display</c> Unterabschnitte haben, dessen <c>Depth</c> auf 16 oder 24 
gesetzt ist. Ohne dies werden die nvidia-glx Erweiterungen nicht starten.
</p>

<pre caption="Aktualisieren des Screen Abschnitts">
  Section "Screen"
  <comment>(...)</comment>
  <i>DefaultDepth 16</i>
  Subsection "Display"
  <comment>(...)</comment>
  EndSection
</pre>

<p>
Führen Sie <c>opengl-update</c> aus, damit der X-Server die GLX-Bibliotheken 
von nVidia verwendet:
</p>

<pre caption="Ausführen von opengl-update">
# <i>opengl-update nvidia</i>
</pre>

</body>
</section>
<section>
<title>Hinzufügen von Benutzern zur video Gruppe</title>
<body>

<p>
Sie müssen Ihren Benutzer zur <c>video</c> Gruppe hinzufügen, damit er Zugriff
auf die nVidia-Gerätedateien hat:
</p>

<pre caption="Hinzufügen Ihres Benutzers zur video Gruppe">
# <i>gpasswd -a Ihr_User video</i>
</pre>

<p>
Es mag nicht absolut notwendig sein, wenn Sie kein <c>udev</c> verwenden aber
es kann auch nicht schaden und macht Ihr System zukunftssicher :)
</p>

</body>
</section>
<section>
<title>Testen Ihrer Karte</title>
<body>

<p>
Um Ihre nvidia Karte zu testen, starten Sie X und führen Sie den Befehl 
<c>glxinfo | grep direct</c> aus. Er sollte ausgeben, dass direct rendering 
aktiviert ist:
</p>

<pre caption="Testen des Status von direct rendering">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
Um Ihre FPS anzuzeigen, führen Sie <c>glxgears</c> aus.
</p>

</body>
</section>
<section>
<title>NVidia-Unterstützung aktivieren</title>
<body>

<p>
Einige Tools, wie <c>mplayer</c> und <c>xine-lib</c>, verwenden ein lokales
USE Flag, das "nvidia" heißt. Es aktiviert die Unterstützung für XvMCNVIDIA,
hilfreich beim Abspielen von hochaufgelösten Videos. Fügen Sie "nvidia" zu Ihrer
USE Variable in <path>/etc/make.conf</path> hinzu oder als USE Flag zu 
<c>media-video/mplayer</c> und/oder <c>media-libs/xine-lib</c> in 
<path>/etc/portage/package.use</path> hinzu.
</p>

<p>
Dann führen Sie <c>emerge -uD --newuse world</c> aus, um die Anwendungen neu zu 
bauen, die von der Änderung des USE Flags profitieren würden.
</p>

</body>
</section>
<section>
<title>Das NVidia Settings Tool verwenden</title>
<body>

<p>
Seit NVidia Version 1.0.6106 herausbrachte, wird auch ein Tool für
Einstellungen mitgeliefert. Dieses Tool erlaubt es Ihnen Grafikeinstellungen
zu ändern, ohne den X Server neu zu starten und ist durch
<c>media-video/nvidia-settings</c> in Portage verfügbar.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Fehlerbehebung</title>
<section>
<title>2D auf Maschinen mit 4GB Speicher oder mehr zum Laufen bekommen</title>
<body>

<p>
Wenn Sie Probleme mit der nVidia Beschleunigung von 2D-Anwendungen haben, ist es
wahrscheinlich, dass Sie nicht in der Lage sind, einen Bereich für 
write-combining mittels MTRR zu einzurichten. Um das zu überprüfen, sehen Sie 
sich den Inhalt von <path>/proc/mtrr</path> an:
</p>

<pre caption="Überprüfen, ob write-combining aktiviert ist">
# <i>cat /proc/mtrr</i>
</pre>

<p>
Jede Zeile sollte "write-back" oder "write-combining" enthalten. Wenn Sie eine
Zeile  mit "unreachable" darin sehen, müssen Sie eine Einstellung im BIOS 
ändern, um das zu beheben.
</p>

<p>
Booten Sie neu und gehen Sie ins BIOS. Suchen Sie dann die MTRR-Einstellungen
(evtl. unter "CPU Settings"). Ändern Sie diese Einstellung von "continuous" zu
"discrete" und booten Sie wieder Linux. Sie werden nun keine "uncachable" 
Einträge mehr finden und die 2D Beschleunigung sollte ohne Probleme 
funktionieren.
</p>

</body>
</section>
<section>
<title>Ich erhalte Warnmeldungen über "unsupported 4K stack sizes"</title>
<body>

<p>
<c>nvidia-kernel</c> Pakete älter als 1.0.6106 unterstützen nur Kernel, die 
Stack-Größen von 8K verwenden. Neuere Kernel (2.6.6 und höher) unterstützen
auch 4K Stack-Größen. Wählen Sie keine Stack-Größe von 4K aus, wenn Sie eines
dieser <c>nvidia-kernel</c> Pakete verwenden. Sie können diese Option in dem
Abschnitt <c>Kernel Hacking</c> finden. 
</p>

</body>
</section>
<section>
<title>
Wenn ich versuche das Kernelmodul zu laden, erhalte ich ein "no such device"
</title>
<body>

<p>
Dies tritt normalerweise auf, wenn Sie keine passende Grafikkarte haben.
Stellen Sie sicher, dass Sie eine nVidia-basierte Grafikkarte haben. Sie können
dies mit <c>lspci</c> überprüfen.
</p>

<p>
Wenn Sie sicher sind, dass Sie eine nVidia-Karte besitzen, sollten Sie Ihr
BIOS überprüfen und schauen ob die Anweisung <e>Assign IRQ to VGA</e> gesetzt
ist.
</p>

</body>
</section>
<section>
<title>
Ich erhalte "no screens found" und die Protokolle zeigen "Failed to initialize
the NVIDIA kernel module!"
</title>
<body>

<p>
Ihnen fehlen höchstwahrscheinlich die <path>/dev/nvidia*</path> Gerätedateien.
Erstellen Sie diese mit <c>NVmakedevices.sh</c>:
</p>

<pre caption="Erstellen der nvidia Device-Nodes">
# <i>/sbin/NVmakedevices.sh</i>
</pre>

<p>
Wenn Ihre <path>/dev/nvidia</path> Geräte immer noch nach jedem Neustart
fehlen, dann liegt es höchstwahrscheinlich daran, dass udev die richtigen
Device-Nodes nicht automatisch erstellt. Dies können Sie beheben indem Sie
<c>NVmakedevices.sh</c> nochmal laufen lassen und dann die
<path>/etc/conf.d/rc</path> wie gezeigt bearbeiten:
</p>

<pre caption="/etc/conf.d/rc bearbeiten">
RC_DEVICE_TARBALL="yes"
</pre>

<p>
Das wird Ihre <path>/dev/nvidia</path> Nodes beibehalten, auch wenn Sie
neustarten.
</p>

<note>
Alternativ könnten Sie versuchen den neusten <c>nvidia-kernel</c> und
<c>nvidia-glx</c> der 8xxx Serie zu emergen. Während dies hier geschrieben
wird, sind beide noch mit ~arch markiert. Diese Treiber benötigen kein
hotplug oder udev mehr um die richtigen Device-Nodes zu erstellen, also müssen
Sie auch nicht mehr <c>NVmakedevices.sh</c> ausführen. Stattdessen wird der
X-Treiber Ihre <path>/dev/nvidia</path> Dateien eigenständig anlegen sobald Sie
X starten. Allerdings setzt dass einen aktuellen Kernel (2.6.14 und höher)
voraus.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Expertenkonfiguration</title>
<section>
<title>Dokumentation</title>
<body>

<p>
Das nVidia Treiberpaket kommt auch mit einer umfassenden Dokumentation. Diese ist 
unter <c>/usr/share/doc</c> installiert und kann mit folgendem Befehl angeschaut
werden:
</p>

<pre caption="Anschauen der NVIDIA Dokumentation">
# <i>less /usr/share/doc/nvidia-glx-*/README.txt.gz</i>
</pre>

</body>
</section>
<section>
<title>Kernel Modul Parameter</title>
<body>

<p>
Das <c>nvidia</c> Kernel Modul akzeptiert eine Reihe von Parametern (Optionen)
die Sie nutzen können um das Verhalten des Treibers zu optimieren. Die meisten
sind in der Dokumentation aufgeführt. Um die Werte dieser Parameter hinzuzufügen
oder zu verändern bearbeiten Sie die Datei <c>/etc/modules.d/nvidia</c>. 
Vergessen Sie nicht <c>modules-update</c> nach Veränderungen an dieser Datei
auszuführen und bedenken Sie, dass Sie die <c>nvidia</c> Module neu laden müssen
bevor die neuen Einstellungen ziehen.
</p>

<pre caption="Einstellgen der nvidia Optionen">
<comment>(Bearbeiten Sie /etc/modules.d/nvidia in Ihrem Lieblingseditor)</comment>
# <i>nano -w /etc/modules.d/nvidia</i>
<comment>(Aktualisierung der Modul-Informationen)</comment>
# <i>modules-update</i>
<comment>(Entladen des nvidia Moduls...)</comment>
# <i>modprobe -r nvidia</i>
<comment>(...und es wieder laden)</comment>
# <i>modprobe nvidia</i>
</pre>

</body>
</section>
<section>
<title>Erweiterte X Konfiguration</title>
<body>

<p>
Der GLX Layer hat eine Fülle von Optionen die konfiguriert werden können. Diese
kontrollieren die Einstellungen des TV Ausgang, Dual Display, Monitor Frequenz
Erkennung, usw. Wie erwähnt, alle verfügbaren Optionen sind detailiert in der
Dokumentation.
</p>

<p>
Wenn Sie wünschen eine dieser Optionen zu nutzen, müssen Sie sie in dem 
entsprechenden Device Abschnitt Ihrer X Konfigurationsdatei eintragen 
(normalerweise <c>/etc/X11/xorg.conf</c>). Zum Beispiel, angenommen man möchte
das Splash Logo deaktivieren:
</p>

<pre caption="Erweiterte nVidia Konfiguration in der X Konfiguration">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  <i>Option     "NoLogo" "true"</i>
  VideoRam   65536
EndSection
</pre>

</body>
</section>
</chapter>

</guide>
