<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/Attic/env.d-howto.xml,v 1.3 2004/01/02 21:01:51 dertobi123 Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- English CVS Version: 1.20 -->

<guide link="/doc/de/env.d-howto.xml">

<title>Env.d HOWTO</title>

<author title="Author">
  <!-- zhen@gentoo.org -->John P. Davis
</author>

<author title="Übersetzung">
  <mail link="daniel@imp.uni-erlangen.de">Daniel Schäfer</mail>
</author>

<abstract>
  Dieses HOWTO erklärt die Bedeutung und Verwendung des
  /etc/env.d Verzeichnisses und dessen Inhalts.
</abstract>

<license/>

<version>1.8</version>
<date>31. Dezember 2003</date>

<chapter>
  <title>Einführung in <c>env.d</c> und Generische Variablen</title>
  <section>
    <title>Die Wichtigsten Gentoo Umgebungsvariablen</title>
    <body>

    <p>
      Eine der verbreitesten Fragen von Gentoo-Nutzern ist: "Wo sind meine
      Umgebungsvariablen definiert, und was ist deren Inhalt?".
      Um diese Frage zu verstehen, ist es erst einmal notwendig zu wissen,
      was eine Umgebungsvariable eigentlich ist. Eine Umgebungsvariable wird
      immer dann gesetzt, wenn der <c>export</c> Befehl ausgeführt wird.
      Nehmen wir beispielsweise an, Sie führen <c>export
      EDITOR="/usr/bin/vim"</c> aus; dabei setzen Sie eine
      Umgebungsvariable, die Ihrem System mitteilt, dass Ihr Standardeditor
      vim ist. Es gibt viele verschiedene Arten von Umgebungsvariablen, die
      Sie in Ihrem Gentoo-System setzen können. Im Folgenden einige Beispiele
      hierzu:
    </p>

    <note>
      <c>export</c> setzt eine Umgebungsvariable innerhalb Ihrer Shell
      <e>und</e> in allen Kindprozessen. Sollten Sie nur die Variable
      setzen wollen, ohne dabei eventuelle Kindprozesse zu beeinflussen,
      führen sie etwas wie <i>FOO="bar"</i> aus, d.h. lassen Sie das
      <c>export</c> Kommando weg.
    </note>

    <note>
      Ihre <i>00basic</i> Datei mag anders aussehen. Dies ist kein Problem,
      da diese Variablen nur die Gentoo-Voreinstellungen wider spiegeln.
    </note>

    <note>
      Sie finden diese Beispiele in <path>/etc/env.d/00basic</path>.
    </note>

    <table>
    <tr>
      <th>Variable</th>
      <th>Funktion</th>
    </tr>
    <tr>
      <ti>PATH</ti>
      <ti>
      Dies setzt den Standardpfad, in dem nach Programmen gesucht wird.
      Trennzeichen ist ':'. Eine Pfadangabe sähe ungefähr so aus:
      <c>PATH=/usr/local/bin:/opt/bin</c>.
      </ti>
    </tr>
    <tr>
      <ti>ROOTPATH</ti>
      <ti>
      Diese Variable entspricht der oben genannten Variable, nur wird hier
      der Standardpfad für den <c>root</c> Benutzer gesetzt. Ein Beispiel
      hierfür wäre etwas wie <c>ROOTPATH=/usr/local/bin:/opt/bin</c>.
    </ti>
    </tr>
    <tr>
      <ti>LDPATH</ti>
      <ti>
      Diese Variable spezifiziert den Suchpfad des Linkers für Bibliotheken.
      Auch diese Variable benutzt den ':' als Trennzeichen.
      </ti>
    </tr>
    <tr>
      <ti>MANPATH</ti>
      <ti>
      Dies gibt an, wo auf Ihrer Maschine die Manpages liegen; genau wie
      <i>PATH</i>, nur für Manpages anstatt Programmen. Ein Beispiel hierfür
      wäre <c>MANPATH=/usr/share/man:/usr/local/share/man</c>.
      </ti>
    </tr>
    <tr>
      <ti>INFODIR</ti>
      <ti>
      Dies gibt an, wo die Info-Dateien abgelegt sind. Ein Beispiel wäre
      <c>INFODIR=/usr/share/info</c>.
      </ti>
    </tr>
    <tr>
      <ti>PAGER</ti>
      <ti>
      Dies gibt an welcher Pager zu benutzen ist. Ein Beispiel wäre
      <c>PAGER=/usr/bin/less</c>.
      </ti>
    </tr>
    <tr>
      <ti>EDITOR</ti>
      <ti>
      Dies gibt den Standardeditor in Ihrem System an. Eine Angäbe sähe
      ungefähr so aus: <c>EDITOR=/usr/bin/vim</c>.
      </ti>
    </tr>
    </table>

    <p>
      Dies ist ein Beispiel einer <i>00basic</i> Datei. Es soll Ihnen eine
      Vorstellung davon vermitteln, wie eine solche Datei aussieht. Sollte
      einmal Ihre <i>00basic</i> Datei zerstört werden, so können Sie diese
      hier benutzen!
    </p>

    <pre caption="00basic">
# /etc/env.d/00basic:
# $Header: /home/cvsroot/gentoo-src/rc-scripts/etc/env.d/00basic \
           ,v 1.11 2003/02/17 02:48:39 azarah Exp &#36;

PATH="/usr/local/bin:/opt/bin"
ROOTPATH="/usr/local/bin:/opt/bin"
LDPATH="/usr/local/lib"
MANPATH="/usr/share/man:/usr/local/share/man"
INFODIR="/usr/share/info"
INFOPATH="/usr/share/info"
CVS_RSH="ssh"
PAGER="/usr/bin/less"
LESSOPEN="|lesspipe.sh %s"
    </pre>
    </body>
  </section>

  <section>
    <title>env.d Formatierung</title>
    <body>

      <p>
        Die Dateien in <c>env.d</c> sind in einer logischen Reihenfolge
        angeordnet, so dass wenn <c>env-update</c> ausgeführt wird, die
        Variablen richtig angeordnet werden. Die Ziffern am Anfang des
        Dateinamens geben die Reihenfolge an, in denen diese durchlaufen
        werden. Folglich wird <i>00basic</i> als erstes durchlaufen,
        daraufhin <i>01irgendetwas</i> und so weiter. Auch der Inhalt der
        Dateien hat ein besonderes Format:
      </p>

      <pre caption="Dateiformat">
<comment># Dies ist ein Kommentar, genauso wie in der BASH</comment>
<i>VARIABLE1=/Pfad/auf/irgendetwas</i>
<comment># Einige der Variablen können durch : getrennte Argumente besitzen.</comment>
<i>VAR1A=/Pfad/auf/etwas:/Pfad/auf/nochein/etwas</i>
<i>VARIABLE2=irgendein_Name</i>
      </pre>
    </body>
  </section>
</chapter>

<chapter>
  <title>Spezielle Variablen und Wie Alles Zusammenpasst</title>
  <section>
    <title>Spezielle Variablen</title>
      <body>

      <p>
        Es gibt einige spezielle Variablen, die in <c>env.d</c> aufgeführt
        sind. Dies sind: <i>KDEDIRS, PATH, CLASSPATH, LDPATH, MANPATH,
        INFODIR, ROOTPATH, CONFIG_PROTECT, CONFIG_PROTECT_MASK</i>. Diese
        Variablen sind insofern speziell, als sie in einer besonderen Art
        und Weise verarbeitet und in spezielle Dateien geschrieben werden,
        die Ich später erklären werde.
      </p>

      <note>
        Einige der unten stehenden Variablen sind oben schon in
        <i>00basic</i> aufgeführt worden. Dies stellt kein Problem dar, da
        diese Variablen mehr als einmal verwendet werden können, allerdings
        nur in verschiedenen Dateien.
      </note>

      <table>
      <tr>
        <th>Variable</th>
        <th>Funktion</th>
      </tr>
      <tr>
        <ti>KDEDIRS</ti>
        <ti>
        Dies ist der Pfad für alle zum KDE gehörenden Dateien
        </ti>
      </tr>
      <tr>
        <ti>PATH</ti>
        <ti>
        Schon zuvor aufgeführt, durch ':' getrennt
        </ti>
      </tr>
      <tr>
        <ti>CLASSPATH</ti>
        <ti>
        Setzt den Pfad zu den Java Klassen, durch ':' getrennt
        </ti>
      </tr>
      <tr>
        <ti>LDPATH</ti>
        <ti>
        Schon zuvor erwähnt (s.o.)
        </ti>
      </tr>
      <tr>
        <ti>MANPATH</ti>
        <ti>
        Schon zuvor erwähnt (s.o.), durch ':' getrennt
        </ti>
      </tr>
      <tr>
        <ti>INFODIR</ti>
        <ti>
        Schon zuvor erwähnt (s.o.), durch ':' getrennt
        </ti>
      </tr>
      <tr>
        <ti>ROOTPATH</ti>
        <ti>
        Schon zuvor erwähnt (s.o.), durch ':' getrennt
        </ti>
      </tr>
      <tr>
        <ti>CONFIG_PROTECT</ti>
        <ti>
        Dies gibt an welche Konfigurationsdateien in <path>/etc</path> von
        Änderungen durch neue Ebuilds geschützt werden sollen. Die
        Argumente werden durch Freizeichen ' ' getrennt.
        </ti>
      </tr>
      <tr>
        <ti>CONFIG_PROTECT_MASK</ti>
        <ti>
        Dies ist im Grunde das Inverse zu CONFIG_PROTECT, die angegebenen
        Dateien unter <path>/etc</path> werden freigegeben, sie werden beim
        Emerge-Prozess automatisch geändert.
        </ti>
      </tr>
      </table>
    </body>
  </section>

  <section>
    <title>Wie Dies Alles Zusammenpasst</title>
    <body>

      <p>
        So, nun da ich alles definiert habe, wundern Sie sich wahrscheinlich
        was um alles in der Welt dies mit Ihnen und Ihrer Gentoo Maschine zu
        tun hat. Die Macht von <i>env.d</i> liegt darin alle diese Variablen
        Ihren speziellen Bedürfnissen anpassen zu können. Mit den oben
        angegebenen Definitionen können sie dies durchführen, hoffe ich.
      </p>

      <p>
        Da wir mittlerweile ein wenig Halt gefunden haben, ist es an der Zeit zu
        erklären, was mit diesen Variablen geschieht. Wenn <c>env-update</c>
        aufgerufen wird, linkt es alle diese Dateien in ihrer Reihenfolge.
        Erinnern Sie sich noch, dass ich gesagt habe es wäre in Ordnung eine
        Variable mehrfach zu definieren, so lange sich die Definitionen in
        unterschiedlichen Dateien befinden? Dies liegt daran, dass
        <c>env-update</c> sequenziell die Dateien durchgeht und all die
        Pfadangaben zusammenaddiert. Hätten Sie zum Beispiel eine <i>PATH</i>
        Variable für KDE, GNOME, X und Ihren Standardpfad, würde
        <c>env-update</c> all diese aneinander hängen, so dass ihr Standardwert
        für <i>PATH</i> die Summe all jener Einzelpfade annehmen wird.
        Nett, nicht wahr?
      </p>

      <p>
        Nun da diese Variablen zusammengefügt wurden, ist es noch wichtig zu
        wissen, wo sie gespeichert werden.
      </p>

      <note>
        Die unten aufgeführten Dateien werden bei einem Lauf von
        <c>env-update</c> erzeugt.
      </note>

      <pre caption="Dateien, die bei der Addition aller Dateien aus env.d
      erzeugt werden">
<i>LDPATH ----&gt; /etc/ld.so.conf</i>
<i>CONFIG_PROTECT und CONFIG_PROTECT_MASK ----&gt; /etc/profile.env (als exportierte Variablen)</i>
<i>Spezielle und Andere ----&gt; /etc/profile.env</i>
      </pre>

      <p>
        Wenn Sie sich die Datei <path>/etc/ld.so.conf</path> einmal ansehen,
        können sie eindeutig erkennen, dass das Verzeichnis <i>env.d</i> deren
        Quelle war.
      </p>

      <pre caption="/etc/ld.so.conf">
# ld.so.conf autogenerated by env-update; make all changes to
# contents of /etc/env.d directory
/usr/local/lib
/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3
/usr/lib/opengl/xfree/lib
/usr/lib/mozilla
/usr/X11R6/lib
/opt/blackdown-jdk-1.4.1/jre/lib/i386/
/opt/blackdown-jdk-1.4.1/jre/lib/i386/native_threads/
/opt/blackdown-jdk-1.4.1/jre/lib/i386/classic/
/usr/qt/3/lib
/usr/kde/3.1/lib
      </pre>

      <p>
        Es ist wichtig zu beachten, dass <path>/etc/profile.env</path> von Ihrer
        Shell gesourced wird. Dies ist natürlich sinnvoll, denn so können Sie
        all Ihre neu definierten Variablen benutzen, sobald Sie sich das nächste
        mal einloggen.
      </p>

      <pre caption="Reihenfolge beim Ablauf von env-update">
<i>/etc/env.d Einstellungen ---&gt; env-update ---&gt; /etc/profile.env
---&gt; /etc/profile ---&gt; bash ---&gt; all Ihre Programme</i>
      </pre>

      <p>
        Nun, da Sie ein neues <i>profile.env</i> erzeugt haben, sollte es im
        Groben so aussehen:
      </p>

      <pre caption="/etc/profile.env">
<comment>(Um die Lesbarkeit zu erhöhen, in diesem Beispiel gekürzt und umgebrochen)</comment>
# THIS FILE IS AUTOMATICALLY GENERATED BY env-update.
# DO NOT EDIT THIS FILE. CHANGES TO STARTUP PROFILES
# GO INTO /etc/profile NOT /etc/profile.env
export KDEDIRS='/usr'
export INFODIR='/usr/share/info:/usr/X11R6/info'
export INFOPATH='/usr/share/info:/usr/share/gcc-data/i686-pc-linux-gnu/3.2/
info'
export CONFIG_PROTECT_MASK='/etc/gconf'
export CLASSPATH='/opt/blackdown-jdk-1.4.1/jre/lib/rt.jar:.:.'
export ROOTPATH='/usr/local/bin:/opt/bin:/usr/i686-pc-linux-gnu/gcc-bin/3.2:/
usr/X11R6/bin:usr/qt/3/bin:/usr/kde/3.1/sbin:/usr/kde/3.1/bin'
export CONFIG_PROTECT='/usr/X11R6/lib/X11/xkb /usr/kde/3.1/share/config /usr/
share/texmf/tex/generic/config/ /usr/share/texmf/tex/platex/config/ /usr/
share/config'
export MANPATH='/usr/share/man:/usr/local/share/man:/usr/share/gcc-data/i686-
pc-linux-gnu/3.2/man:/usr/X11R6/man:/usr/qt/3/doc/man'
export PATH='/usr/local/bin:/opt/bin:/usr/i686-pc-linux-gnu/gcc-bin/3.2:/usr/
X11R6/bin:/usr/qt/3/bin:/usr/kde/3.1/bin'
export KDEDIR='/usr/kde/3.1'
export JDK_HOME='/opt/blackdown-jdk-1.4.1'
export JAVAC='/opt/blackdown-jdk-1.4.1/bin/javac'
export LESS='-R'
export CC='gcc'
export PAGER='/usr/bin/less'
export HOSTNAME='fabula'
export G_BROKEN_FILENAMES='1'
export QMAKESPEC='linux-g++'
export LESSOPEN='|lesspipe.sh %s'
export CXX='g++'
export CVS_RSH='ssh'
export QTDIR='/usr/qt/3'
export JAVA_HOME='/opt/blackdown-jdk-1.4.1'
export XINITRC='/etc/X11/xinit/xinitrc'
export GDK_USE_XFT='1'
export MOZILLA_FIVE_HOME='/usr/lib/mozilla'
      </pre>

      <p>
        Nun, das war was ich zu sagen hatte, also auf und viel Spaß; nur
        zerstören Sie sich bitte nicht allzu viel.
      </p>

    </body>

  </section>
</chapter>
</guide>
