<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/cron-guide.xml,v 1.4 2006/02/27 01:24:07 grahl Exp $ -->
<!-- English CVS Version: 1.13 -->

<guide link="/doc/de/cron-guide.xml" lang="de">
<title>Gentoo Linux Cron Guide</title>

<author title="Autor">
  <mail link="airuike@gmail.com">Eric Brown</mail>
</author>
<author title="Bearbeiter">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Übersetzer">
  <mail link="mbuerger@edu.uni-klu.ac.at">Martin Bürger</mail>
</author>
<author title="Korrektor">
  <mail link="grahl@gentoo.org">Jan Hendrik Grahl</mail>
</author>

<abstract>
Dieser Leitfaden beschreibt die Installtion, Konfiguration und Verwendung von
Cron.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.7</version>
<date>2006-02-20</date>

<chapter>
<title>Cron Grundlagen</title>
<section>
<title>Was ist Cron</title>
<body>

<p>
Cron läuft als Daemon, der Prozesse zu festgelegten Zeitpunkten startet, die 
mit Hilfe des <c>crontab</c> Befehls eingegeben werden können. Cron überprüft 
jede Minute ob es Cron-Jobs, die ausgeführt werden müssen, in irgendeiner der
Benutzer crontabs gibt.
</p>

<note>
<e>crontab</e> ist sowohl der Name einer Liste von Cron-Jobs als auch
der Name des Kommandos zum Aufruf zum Editieren dieser Liste.
</note>

</body>
</section>
<section>
<title>Cron in der Praxis</title>
<body>

<p>
Es gibt zumindest drei Implementierung von Cron in Portage, die man zum Einsatz
im eigenen System wählen kann. Im Allgemeinen bieten alle ein ähnliches 
Interface, sprich die Verwendung von <c>crontab</c> oder eines ähnlichen 
Befehls. Für Systeme, die nicht 24/7 laufen (Laptop, Desktop), gibt es ein
weiteres Tool, das mit Hilfe von Cron arbeitet und dafür sorgt, dass Aufgaben 
in vorgegebenen Intervallen ausgeführt werden - Anacron.
</p>

<p>
Es ist auch erwähnenswert, dass alle drei verfügbaren Cron Pakete von
<c>sys-process/cronbase</c> abhängig sind. Zwischen diesem Paket und den Cron
Paketen existiert technisch gesehen keine Abhängigkeit, aber es bietet eine
cron-ähnliche Funktionalität, welche die meisten Nutzer zu schätzen wissen.
</p>

<p>
Zunächst muss man sich entscheiden welche Cron Implementierung man verwenden
möchte. Folgender Überblick soll die Entscheidung erleichtern:
</p>

</body>
</section>
</chapter>

<chapter>
<title>Welcher Cron darf es sein?</title>
<section>
<title>Vixie Cron</title>
<body>

<p>
Vixie Cron basiert auf SysV Cron und bietet dem Benutzer eine Vielfalt an
Einstellungsmöglichkeiten. Jeder Benutzer hat seine eigene crontab und hat die
Möglichkeit Umgebungsvariablen in dieser crontab festzulegen. Im Gegensatz zu
anderen Cron Varianten unterstützt Vixie Cron auch SELinux und PAM. Es
unterstützt weniger Architektueren als Dcron, aber mehr als Fcron.
</p>

<p>
Features von <c>sys-process/vixie-cron</c>:
</p>

<ul>
<li>
  Unterstützung von SELinux
</li>
<li>
  Unterstützung von PAM <path>/etc/security/limits.conf</path>
</li>
<li>
  Festlegen von Umgebungsvariablen in crontabs (PATH, SHELL, HOME, etc.)
</li>
<li>
  Jeder Benutzer kann seine eigene crontab verwenden, was durch cron.allow
  und cron.deny festgelegt wird
</li>
</ul>

</body>
</section>
<section>
<title>Dillons Cron</title>
<body>

<p>
Dcron bietet eine einfache, elegante und sichere Implementierung von Cron. Es
erlaubt keine eigenen Umgebungsvariablen in crontabs und alle Cron-Jobs werden
von <path>/bin/sh</path> aus aufgerufen. Es bietet auch wie Vixie Cron jedem
Benutzer seine eigne crontab.
</p>

<p>
Features von <c>sys-process/dcron</c>:
</p>

<ul>
<li>
  Schnell, einfach und frei von unnötigen Features
</li>
<li>
  Der Zugriff auf <c>crontab</c> ist auf die Cron Gruppe beschränkt, d.h. es
  bietet keine Anbindung zu anderen Schnittstellen.
</li>
</ul>

</body>
</section>
<section>
<title>Fcron</title>
<body>

<p>
Fcron ist eine möglicher Ersatz für Vixie Cron und Anacron. Es ist mit weiteren
Features ausgestatten und dafür entwickelt, auf Systemen zu rennen, die sich
nicht im Dauerbetrieb befinden. Es unterstützt das Festlegen von
Startbedingungen von Jobs und bietet Kontrolle zur Serialisierung von Jobs.
Außerdem gibt es einem die Möglichkeit Jobs nice-Werte zuzuweisen und auch Jobs
bei Systemstart ausführen zu lassen. Weitere Informationen findet man auf <uri
link="http://fcron.free.fr/">fcron's home page</uri>.
</p>

<p>
Features von <c>sys-process/fcron</c>:
</p>

<ul>
<li>
  Entwickelt, um auf Systemen zu laufen, die sich nicht im Dauerbetrieb
  befinden, d.h. es kann einen Job nach einem Neustart ausführen als ob er
  vergessen worden wäre
</li>
<li>
  Einstellen von Umgebungsvariablen und vielen weiteren Optionen in crontabs
</li>
<li>
  Jeder Benutzer kann seine eigene crontab verwenden, der Zugriff ist durch
  cron.allow und cron.deny festgelegt
</li>
<li>
  Verbesserte crontab Syntax mit Unterstützung von vielen neuen Features
</li>
</ul>

</body>
</section>

<section>
<title>Anacron</title>
<body>

<p>
Anacron ist kein Cron Daemon, sondern etwas, das für gewöhnlich in Verbindung
mit eines solchen arbeitet. Es führt Befehle in festgelegten Intervallen in
Tagen aus und geht nicht davon aus, dass das System 24/7 läuft. Es führt Jobs
aus, die ausgelassen wurden, weil z.B. das System gerade nicht in Betrieb war.
Anacron benötigt einen Cron Daemon um regelmäßig ausgeführt werden zu können.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Verwendung von Cron</title>
<section>
<title>Installation</title>
<body>

<p>
Wählen einer Cron Variante und sie emergen.
</p>

<pre caption="Installation von dcron">
# <i>emerge dcron</i>
# <i>/etc/init.d/dcron start</i>
# <i>rc-update add dcron default</i>
</pre>

<p>
Sollte man sich nicht für fcron entschieden haben, könnte man zusätzlich auch Anacron
installieren.
</p>

<pre caption="Installation von Anacron">
# <i>emerge anacron</i>
# <i>/etc/init.d/anacron start</i>
# <i>rc-update add anacron default</i>
</pre>

</body>
</section>
<section id="systemtab">
<title>System crontab</title>
<body>

<p>
Die Hinweise nach der Installation von gewissen Cron Paketen raten an 
zuallererst <c>crontab /etc/crontab</c> auszuführen. Die Datei
<path>/etc/crontab</path> ist die <e>System crontab</e>. Eine Cron Installation
in Verbindung mit <c>sys-process/cronbase</c> verwendet sie dazu, um Skripte in
<path>/etc/cron.{daily,hourly,weekly,monthly}</path> auszuführen. Man beachte,
dass Vixie Cron neue Jobs automatisch in <path>/etc/crontab</path>
berücksichtigt. Bei Dcron und Fcron müssen Benutzer nach jeder Änderung von
<path>/etc/crontab</path> <c>crontab /etc/crontab</c> ausführen.
</p>

<p>
Beachten Sie, dass Jobs, die in der System crontab eingetragen sind, von
<c>crontab -l</c> nicht angezeigt werden müssen.
</p>

<p>
Natürlich kann man auch ganz ohne System crontab arbeiten. Wenn man Dcron oder
Fcron verwendet, reicht es <c>crontab /etc/crontab</c> <e>nicht</e> auszuführen
und Vixie-Cron Benutzer sollten alle Zeilen in
<path>/etc/crontab</path> auskommentieren.
</p>

<pre caption="Auskommentieren aller Zeilen in /etc/crontab">
# <i>sed -i -e "s/^/#/" /etc/crontab</i>
</pre>

</body>
</section>
<section>
<title>Zugriff auf Cron für andere Benutzer</title>
<body>

<p>
Wenn Sie auch anderen Benutzer als root Zugriff auf den Cron Daemon geben 
wollen, sollten Sie sich folgenden Abschnitt durchlesen. Ansonsten können Sie
einfach zum nächsten Abschnitt <uri link="#scheduling">Zeitlicher Ablauf von
Cron-Jobs</uri> übergehen.
</p>

<note>
Einem Benutzer Zugriff auf die crontab zu geben, erlaubt es ihm nicht Cron-Jobs
als root auszuführen. Möchte man auch Benutzern erlauben, die root crontab zu
ändern, sollte man sich mit <c>sudo</c> auseinandersetzen. Bitte
berücksichtigen Sie für weitere Einzelheiten unsere <uri
link="/doc/de/sudo-guide.xml">Gentoo Sudo(ers) Anleitung</uri>.
</note>

<p>
Egal welches Cron Paket man verwendet, möchte man einem Benutzer Zugriff auf
die crontab geben, muss er in der Cron Gruppe sein. Wenn man z.B. den Benutzer
<e>wepy</e> zur Cron Gruppe hinzufügen möchte:
</p>

<pre caption="Hinzufügen eines Benutzers zur Cron Gruppe">
# <i>gpasswd -a wepy cron</i>
</pre>

<note>
Wenn Sie einen Benutzer der Cron Gruppe hinzufügen, vergewisseren Sie sich,
dass sich der Benutzer ab- und wieder anmeldet, damit diese Änderung der
Gruppenzugehörigkeit auch wirksam wird.
</note>

<p>
Wenn man <b>Dcron</b> verwendet, ist das alles, was man tun muss, um einem 
Benutzer Zugriff auf die crontab zu geben. Dcron Benutzer können mit dem 
nächsten Abschnitt <uri link="#scheduling">Zeitlicher Ablauf von Cron 
Jobs</uri> fortfahren, alle anderen sollten hier weiterlesen.
</p>

<p>
Wenn man nun <b>Fcron</b> verwendet, muss man die Dateien
<path>/etc/fcron/fcron.deny</path> und <path>/etc/fcron/fcron.allow</path>
editieren. Am sichersten ist es, zuerst jedem den Zugriff in
<path>/etc/fcron/fcron.deny</path> zu verweigern und dann einzelnen Benutzern
explizit den Zugriff erlauben <path>/etc/fcron/fcron.allow</path>.
</p>

<impo>
<b>Sollten weder <path>/etc/fcron/fcron.allow</path> noch
<path>/etc/fcron/fcron.deny</path> vorhanden sein, ist es allen Benutzern in 
der Cron Gruppe erlaubt die crontab zu verwenden</b>. Fcron wird mit einer 
Standard <path>fcron.allow</path>, die <b>allen Benutzern</b> in der Cron 
Gruppe den Zugriff auf die fcrontab erlaubt, installiert.
</impo>

<pre caption="Rechte in fcron.deny">
all
</pre>

<p>
Z.B. soll es dem Benutzer <e>wepy</e> erlaubt sein, seine eigenen Cron-Jobs zu
erstellen. Dazu muss er wie folgt in <path>/etc/fcron/fcron.allow</path>
eingetragen sein:
</p>

<pre caption="Rechte in fcron.allow">
wepy
</pre>

<p>
Wer nun <b>Vixie Cron</b> als Cron Daemon gewählt hat, braucht nur
<path>/etc/cron.allow</path> anpassen.
</p>

<impo>
Man sollte unbedingt beachten, dass, wenn nur <path>/etc/cron.allow</path> 
vorhanden ist, dann nur die dort aufgezählten Benutzer der Cron Gruppe Zugriff 
haben, aber wenn eine leere <path>/etc/cron.deny</path> angelegt ist, dann 
haben alle Benutzer der Cron Gruppe Zugriff! <b>Also sollte es nie eine leere
<path>/etc/cron.deny</path> geben, wenn es dazu keine
<path>/etc/cron.allow</path> gibt.</b> 
</impo>

<p>
Möchte man dem Benutzer <e>wepy</e> den Zugriff erlauben, fügt man ihn wie
folgt zu <path>/etc/cron.allow</path> hinzu:
</p>

<pre caption="Rechte in /etc/cron.allow">
wepy
</pre>

</body>
</section>

<section id="Scheduling">
<title>Zeitlicher Ablauf von Cron-Jobs</title>
<body>

<p>
Wie man nun die crontabs editiert, ist vom jeweiligen Paket abhängig, aber alle
unterstützen dieselbe Menge an Basisbefehlen: Hinzufügen, Ersetzen, Editieren,
Löschen und Auflisten von Cron-Jobs in crontabs. Die folgende Tabelle zeigt wie
diese Befehle mit dem jeweiligen Paket auszusehen haben.
</p>

<table>
<tr>
  <th>Version</th>
  <th>crontab editieren</th>
  <th>crontab löschen</th>
  <th>crontab hinzufügen</th>
  <th>cronjobs auflisten</th>
</tr>
<tr>
  <ti>Dcron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -d <e>[Benutzer]</e></c></ti>
  <ti><c>crontab <e>Datei</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
<tr>
  <ti>Fcron</ti>
  <ti><c>fcrontab -e</c></ti>
  <ti><c>fcrontab -r <e>[Benutzer]</e></c></ti>
  <ti><c>fcrontab <e>Datei</e></c></ti>
  <ti><c>fcrontab -l</c></ti>
</tr>
<tr>
  <ti>Vixie-cron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -r <e>-u [Benutzer]</e></c></ti>
  <ti><c>crontab <e>Datei</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
</table>

<note>
Wenn man das Kommando zum Entfernen verwendent und diesem kein Argumente
übergeben werden, wird die crontab vom aktuellen Benutzer gelöscht.
</note>

<note>
Fcron hat auch einen Symlink von <c>crontab</c> zu <c>fcrontab</c>.
</note>

<p>
Bevor man nun einen dieser Befehle verwenden kann, muss man zuerst den Aufbau
der crontab selbst verstehen. Jede Zeile in einer crontab muss fünf Zeitfelder
in folgender Reihenfolge beinhalten: Minuten (0-59), Stunden (0-23), Tage des
Monats (1-31), Monate (1-12), und Tage der Woche (0-7, Montag ist 1, Sonntag
ist 0 und 7). Tage der Woche und Monate Monats können durch Abkürzungen
wie mon, tue, jan, feb, u.s.w. angegenben werden. Jedes Feld kann durch einen
Wertebereich (z.B. 1-5 oder mon-fri), eine durch Komma getrennte Werteliste
(z.B. 1,2,3 oder mon,tue,wed) oder einen Wertebereich in <e>Schritten</e> (z.B.
1-6/2 anstatt 1,3,5) ersetzt werden.
</p>

<p>
Das mag anfangs etwas verwirrend aussehen, aber mit ein paar Beispielen kann
man die Syntax leichter verstehen.
</p>

<pre caption="Beispiele">
<comment># Starte /bin/false jede Minute</comment>
*     *     *     *     *        /bin/false  

<comment># Starte /bin/false um 1:35 am Monatag, Dienstag, Mittwoch und am 4. jedes Monats</comment>
35    1     4     *     mon-wed  /bin/false

<comment># Starte /bin/true um 22:25 am 2. März</comment>
25    22    2     3     *        /bin/true

<comment># Start /bin/false um 2:00 jeden Montag, Mittwoch und Freitag</comment>
0     2     *     *     1-5/2    /bin/false
</pre>

<note>
Man beachte wie man konkrete Tage der Woche bzw. Tage des Monats bestimmt bevor
sie kombiniert werden. Wenn man für einen der beiden * verwendet, dann wird der
andere zuerst für die Auswertung in Betracht gezogen, wobei * in beide Felder
"täglich" bedeutet.
</note>

<p>
Um auszuprobieren, was soeben erklärt wurde, erstellt man ein paar Cron
Jobs. Zuerst erstellt man wie folgt eine Datei <path>crons.cron</path>:
</p>

<pre caption="Editieren von crons.cron">
$ <i>nano crons.cron</i>
<comment>#Minuten  Stunden  Tage   Monate  Tage der Woche</comment>
10     3      1      1       *       /bin/echo "Ich mag Cron nicht"
30     16     *      1,2     *       /bin/echo "Ich mag Cron ein wenig"
*      *      *      1-12/2  *       /bin/echo "Ich mag Cron wirklich gerne"
</pre>

<p>
Jetzt kann man diesen crontab mit dem "Hinzufügen" Befehl von der Tabelle oben
zum System hinzufügen.
</p>

<pre caption="Eine neue crontab">
# <i>crontab crons.cron</i>
</pre>

<note>
Wenn man nicht die Ausgabe dieser echo Befehle umleitet, sieht man diese Ausgabe
auch nicht wirklich.
</note>

<p>
Um sicherzugehen, dass die Cron-Jobs aufgenommen wurden, verwendet man den
passenden Befehl <e>Auflisten</e> von der Tabelle oben.
</p>

<pre caption="Auflisten der Cron-Jobs">
# <i>crontab -l</i>
</pre>

<p>
Nun sollte man eine ähnlich Liste wie in <path>crons.cron</path> sehen. Wenn
nicht, muss wohl beim Hinzufügen ein falscher Befehl verwendet worden sein.
</p>

<p>
Diese crontab gibt jede Minute an ungeraden Monaten "Ich mag Cron wirklich
gerne" aus. Offensichtlich macht man das nur, wenn man Cron wirklich mag. Die
crontab wird auch "Ich mag Cron ein wenig" um 16:30 jeden Tag im Januar und
Februar ausgeben. Und schließich wird sie auch "Ich mag Cron nicht" um 3:10 am
1. Januar ausgeben.
</p>

<p>
Wenn man Anacron verwendet, sollte man hier weiterlesen. Ansonsten kann man mit
dem nächsten Abschnitt weitermachen <uri link="#editing">Editieren von crontabs</uri>.
</p>

<p>
Benutzer die Anacron verwenden, müssen <path>/etc/anacrontab</path>
editieren. Diese Datei hat vier Felder: Anzahl der Tage zwischen jeden Aufrufs,
die Verzögerung in Minuten bis zur eigentlichen Ausführung, der Name des Jobs
und der Befehl, der ausgeführt werden soll.
</p>

<p>
Wenn man z.B. möchte, dass alle fünf Tage, zehn Minuten nachdem Anacron
gestartet wurde <c>echo "Ich mag Anacron"</c> ausgeführt werden soll, sollte
dies so aussehen:
</p>

<pre caption="/etc/anacrontab">
5 10 Zeitvertreib /bin/echo "Ich mag Anacron"
</pre>

<p>
Anacron läuft auch nachdem alle Jobs der anacrontab ausgeführt wurden. Soll nun
Anacron täglich diese Jobs überprüfen, muss man Cron dazu verwenden. Wie man
dies nun realisiert, wird im nächsten Abschnitt beschrieben.
</p>

</body>
</section>
<section id="editing">
<title>Editieren von crontabs</title>
<body>

<p>
Natürlich wird man die crontab im Alltag nicht mit Jobs belasten, die einem
sagen, wie gern man Cron hat. Diese überflüssigen Jobs entfernt man mit dem
dazugehörigen Befehl <e>Löschen</e> aus der Tabelle weiter oben. Anschließend
gibt man die Cron Jobliste nochmals aus, um sicher zu gehen, dass alles
funktioniert hat.
</p>

<pre caption="Löschen einer crontab">
# <i>crontab -d</i>
# <i>crontab -l</i>
</pre>

<p>
Jetzt sollten keine Cron-Jobs mehr in der Ausgabe von <c>crontab -l</c> zu
sehen sein. Sollten doch noch Jobs aufgelistet werden, bedeutet das, dass das
Entfernen des crontabs fehlschlug und sie sicherstellen sollten, dass Sie
den korrekten <e>Entfernen-Befehl</e> Ihres Cron-Pakets verwendet haben.
</p>

<p>
Nun haben wir einen sauberen Zustand, und man kann etwas Nützlicheres in die
<b>root</b> crontab eintragen. Dass der Befehl <c>updatedb</c> einmal pro
Woche ausgeführt werden soll, damit <c>slocate</c> auch korrekte Ergebnisse
liefert, erscheint doch sinnvoll. Um dies der crontab hinzuzufügen, muss
zuerst <path>crons.cron</path> wie folgt angepasst werden:
</p>

<pre caption="Eine echte crontab">
22 2 * * 1    /usr/bin/updatedb
</pre>

<p>
Das veranlasst Cron updatedb um 2:22 am Montag morgen wöchentlich aufzurufen.
Die neue crontab muss noch mit dem Befehl <e>Hinzufügen</e> von der Tabelle
oben eingefügt werden und die Liste der Cron-Jobs sollte auch nochmals
überprüft werden.
</p>

<pre caption="Auflisten der Cron-Jobs">
# <i>crontab crons.cron</i>
# <i>crontab -l</i>
</pre>

<p>
Angenommen man will <c>emerge --sync</c> auch zur Liste der Befehle, die
täglich ausgeführt werden sollen, hinzufügen. Eine Möglichkeit wäre
<path>crons.cron</path> anzupassen und <c>crontab crons.cron</c> aufzurufen.
Oder man erledigt das mit dem <e>Editieren</e> Befehl von der Tabelle oben.
Dies ermöglicht, die crontab eines Benutzers direkt zu editieren ohne externe
Dateien wie <path>crons.cron</path> anpassen zu müssen.
</p>

<pre caption="Direktes Editieren der crontab">
# <i>crontab -e</i>
</pre>

<p>
Das öffnet die crontab des Benutzers in einem Editor. <c>emerge --sync</c> soll
jeden Tag um 6:30 ausgeführt werden, also muss das wie folgt eingetragen werden:
</p>

<pre caption="Eine echte crontab">
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
<comment>(wenn man Anacron verwendet, diese Zeile einfügen)</comment>
30 7 * * *    /usr/sbin/anacron -s
</pre>

<p>
Man sollte erneut die Liste der Cron-Jobs überprüfen, wie auch im vorigen 
Beispiel um  sicherzustellen, dass alle Jobs geplant sind. Wenn alle vorhanden 
sind, ist alles erledigt.
</p>

</body>
</section>
</chapter>

<chapter>
<title>cronbase verwenden</title>
<section>
<body>

<p>
Wie bereites erwähnt wurde, hängen alle drei Cron Pakete von
<c>sys-process/cronbase</c> ab. Das cronbase Paket erstellt
<path>/etc/cron.{hourly,daily,weekly,monthly}</path> und ein Skript
<c>run-crons</c>. Sie dürften auch bemerkt haben, dass
<path>/etc/crontab</path> folgendes enthält:
</p>

<pre caption="Standard System crontab">
*/15 * * * *     test -x /usr/sbin/run-crons &amp;&amp; /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
</pre>

<p>
Um nicht zu weit ins Detail zu gehen, können wir einfach annehmen, dass die
Kommandos ihre Skripte stündlich, täglich, wöchentlich und monatlich ausführen.
Diese Methode Cron-Jobs zeitlich einzuplanen hat einige wichtige Vorteile.
</p>

<ul>
  <li>
    Sie werden ausgeführt auch wenn Ihr Computer zu dem geplanten
    Ausführungszeitpunkt ausgeschaltet war
  </li>
  <li>
    Es ist für Paketverwalter einfacher ihre Skripte an diese bekannten Stellen
    einzufügen
  </li>
  <li>
    Sie wissen genau wo Ihre Cron-Jobs und Ihre crontab gespeichert ist, was es
    Ihnen auch erleichtert, diesen Teil Ihres Systems zu sichern
  </li>
</ul>

<note>
Nochmals ist es wichtig zu erwähnen, dass Vixie Cron <path>/etc/crontab</path>
automatisch ausliest, währenddessen Dcron und Fcron das nicht tun. Bitte lesen
Sie den Abschnitt <uri link="#systemtab">System Crontab</uri>, um mehr darüber
zu erfahren.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Anmerkungen</title>
<section>
<title>Fehlersuche</title>
<body>

<p>
Sollte Cron nicht wie gewünscht die Jobs aufrufen, gibt es hier eine
Checkliste, die man durchgehen kann.
</p>

<ul>
<li>
  <b>Läuft Cron?</b><br/>
  Sicherstellen, dass Cron hier erscheint <c>ps ax | grep cron</c>!
</li>
<li>
  <b>Arbeitet Cron die Jobs ab?</b><br/>
  Folgendes ausprobieren: * * * * * /bin/echo "foobar" &gt;&gt;
  /beschreibbare_Datei, und überprüfen ob in die Datei minütlich foobar
  geschrieben wird.
</li>
<li>
  <b>Funktioniert der Befehl im Cron Job?</b><br/>
  Folgendes ausprobieren: * * * * * /bin/foobar &gt; /beschreibbare_Datei
  2&gt;&amp;1, nach Fehlern in der Datei /beschreibbare_Datei suchen
</li>
<li>
  <b>Kann Cron den Befehl ausführen?</b><br/>
  Die Protokolldatei von Cron, für gewöhnlich <path>/var/log/cron.log</path>
  oder <path>/var/log/messages</path>, auf Fehler überprüfen.
</li>
<li>
  <b>Gibt es dead.letter(s)?</b><br/>
    Sollte es ein Problem geben, sendet Cron normalerweise eine Email. Also
    Emails überprüfen und - falls vorhanden - die Datei
    <path>~/dead.letter</path> überprüfen.
</li>
</ul>

<p>
Man sollte unbedingt berücksichtigen, dass sich die einzelnen Cron Pakete
deutlich unterscheiden, was schon alleine die unterschiedliche Anzahl an
Features der Pakete bestätigt. Es ist auch immer von Vorteil, die man pages für
crontab, fcrontab oder anacrontab aufzurufen - je nach dem, was man verwendet.
</p>

<p>
Viel Glück!
</p>

</body>
</section>
</chapter>

</guide>
