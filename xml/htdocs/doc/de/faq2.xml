<?xml version='1.0' encoding="UTF-8"?>


<guide link="/doc/faq.html">

<title>Gentoo Linux Frequently Asked Questions 2</title>
<author title="Verfasser"><mail link="gentoo-deutsch-dev@lists.berlios.de">Das gentoo.de Team</mail></author>
<abstract>Diese FAQ ist eine Sammlung von Fragen und Antworten gesammelt, die noch nicht
in der offiziellen Gentoo FAQ auftauchen.</abstract>

<version>1.2.1-de</version>
<date>August 2002</date>


<chapter>
	<title>Installation</title>

	<section>
		<title>Installation mit Stage 1 über ein Proxy funktioniert nicht.</title>
		<body>
		<p>
		Stellen Sie sicher, dass in der /etc/make.conf der RSYNC_PROXY angegeben ist.
		Erlaubt der Proxy nur Verbindungen über die Ports 80, so sollte dies mit:
		<pre>
        	export http_proxy=123.123.123.123:8080

        	export ftp_proxy=123.123.123.123:8080

		</pre>
		eingestellt werden.
		</p>
		</body>
	</section>

	<section>
		<title>Wie installiere ich eine USB Maus unter Gentoo?</title>

		<body>
		<p>Stellen Sie sicher, dass im Kernel USB Unterstützung aktiviert ist.
		Folgende Optionen sollten direkt in den Kernel (X) oder als Modul (M) einkompiliert werden:
		<pre>
  		Input Core Support
		(M)  Input Core Support
		(M)  Mouse Support

        	USB support
		(X) Support for USB
		(X) Preliminary USB device filesystem
		(M) UHCI (Intel PIIX4, VIA, ...) support oder "UHCI Alternate Driver (JE) Support je nach Chipsatz
		(M) USB Human Interface Device (full HID) support
		(X) HID input layer support
		</pre>
		Dies erstellt die Module usb-uhci.o (oder:uhci.o), hid.o, input.o, mousedev.o
		Diese werden dann in /etc/modules.autoload noch eingetragen, damit sie auch beim Start
		verfügbar sind:
		<pre>
		input
		mousedev
		hid
		usb-uhci (oder uhci)
		</pre>
		Nun muss dies in /etc/X11/XFConfig noch eingetragen werden:
		<pre>
    		Option "Device"      "/dev/input/mice"
		</pre>
		und die USB Maus sollte funktionieren.
		</p>
		</body>
	</section>

	<section>
		<title>Wie installiere ich Gentoo auf einem Motherboard mit dem nforce Chipsatz?</title>
		<body>
			<p>Für den Onboard Netzwerkcontroller ist ein spezieller Treiber ist auf der nVidia
			<uri link="http://download.nvidia.com/XFree86_40/nforce/1.0-0236/NVIDIA_nforce-1.0-0236.tar.gz">Webseite</uri>,
			zu haben. Falls Sie keine externe Netzwerkkarte während der Installation zur Hand haben, kopieren
			Sie diesen Treiber einfach auf ein Medium und verfahren Sie wie bei einer Stage 3 Installation bis zu der Stelle,
			nach dem Sie den Kernel kompiliert haben.
			Dann entpacken Sie das tar Archiv und wechseln Sie in das Unterverzeichnis nforce/nvnet/ und führen
			Sie folgendes aus:
			<pre>
			# make clean
			# make
			# make install
			</pre>
			Dies muss bei jeder Kernel Neukompilierung erneut ausgeführt werden.
			Dann sollte noch in die /etc/modules.conf um folgende Zeilen erweitert werden:
			<pre>
			alias eth0 nvnet
			</pre>
			Anschliessend sollte wie gewohnt nach der Installationsanleitung weiter verfahren werden.
			<warning> ASUS Motherboards mit dem nforce Chipsatz besitzen ein modifizierten Netwerkcontroller.
			Der Realtek 8139TOO ist hier die richtige Wahl.
			</warning>
			</p>
        </body>
	</section>
</chapter>

<chapter>
	<title>Laufendes System</title>

	<section>
	<title>
		Was genau hat es mit ACCEPT_KEYWORDS auf sich ?
	</title>
	<body>
		<p>
		Es gibt einen Portage-Tree mit allen nur erdenklichen Paketen. Welche Pakete für Ihren
		Rechner bestimmt sind, wird durch ein Schlüsselwort festgelegt. Für jede Architektur gibt
		es im Portage-Tree stabile Pakete und Pakete, die noch im Testbetrieb sind. Die Schlüsselwörter
		sind <c>arch</c> für stabile Ebuilds und <c>~arch</c> für Pakete im Testbetrieb (wobei arch hier mit
		einem gültigen Wert zu besetzen ist z.B. x86 oder ~x86. Nähere Informationen in <c>/etc/make.conf</c>).</p>
		<p>
		Um nun ein noch im Testbetrieb befindliches Paket (also ein mit ~x86 maskiertes) zu installieren kann man auf zwei
		Weisen vorgehen. Zum einen können Sie die Variable nur für das aktuelle Paket setzen:
		<pre>
		ACCEPT_KEYWORDS="~x86" emerge testingpaket
		</pre>
		oder Sie können die Konfigurationsvariable global in <c>/etc/make.conf</c> setzen. In dieser Datei finden Sie
		auch weitere Erklärungen zur Maskierung.</p>
	</body>
	</section>


	<section>
		<title>Wenn ich meinen Kernel aktualisiere, habe ich keinen Sound mehr. Ausserdem
		bekomme ich Fehlermeldungen beim booten, dass die Module der Soundkarte nicht gefunden werden.</title>
		<body><p>Wenn ALSA Sound verwendet wird, muss nach jeder Kernel-Neukompilation auch die ALSA
		Treiber neu kompiliert werden. Stellen Sie sicher, dass /usr/src/linux auf die richtigen
		Quelldateien verweist und dann starten sie:
		<pre>
		# emerge alsa-driver
		</pre>
		Eine ausführliche ALSA-Installationsanleitung finden Sie im Desktop-Guide.
		</p></body>
	</section>
	<section>
		<title>Wie kann ich aus meiner NVIDIA Karte noch mehr Leistung herausquetschen?</title>
		<body><p>Die Zauberwörter heisen hier SBA (Side Band Adressing) und AFW (AGP Fast Writes).
		Als erstes, sollte man schauen ob die NVIDIA Karte dies überhaupt unterstützt:
		<pre>
		 cat /proc/driver/nvidia/agp/card
		Fast Writes:	Supported
		SBA:		Supported
		AGP Rates:     	4x 2x 1x
		Registers:     	0x1f000217:0x1f000314
		</pre>
		Nun muss evtl. im BIOS des Motherboards "Fast Writes" aktiviert werden und wir kontrollieren
		ob das Motherboard hier mitspielt:
		<pre>
		$ cat /proc/driver/nvidia/agp/status
		Status:     	Enabled
		Driver:     	AGPGART
		AGP Rate:	4x
		Fast Writes:	Disabled
		SBA:	        Disabled
		</pre>
		Nun editieren wir /etc/modules.d/nvidia um folgende Zeilen:
		<pre>
		alias char-major-195 NVdriver
		options NVdriver NVreg_EnableAGPSBA=1 NVreg_EnableAGPFW=1
		</pre>
		und rebooten unser System. Nun sollte es aktiviert sein:
		<pre>
		$ cat /proc/driver/nvidia/agp/status
		Status:     Enabled
		Driver:     AGPGART
		AGP Rate:     4x
		Fast Writes:     Enabled
		SBA:        Enabled
		</pre>
		und alle EGO Shooter noch etwas flüssiger laufen.
		</p></body>
		</section>
</chapter>
<chapter>
        <title>Netzwerk</title>

        <section>
                <title>Das Mounten von NFS Verzeichnissen dauert sehr lange (teilweise bis zu fünf Minuten). Auch der
                Bootvorgang ist davon betroffen.</title>
                <body>
                <p>
                F&#252;r das Mounten eines Verzeichnisses via NFS braucht das System bis zu fünf Minuten. Beim Einbinden
                der NFS Verzeichnisse aus der <path>/etc/fstab</path> beim Booten bleibt der Bootvorgang beim Punkt
                NFS Verzeichnisse stehen und wird, wenn überhaupt, erst nach Minuten fortgesetzt. Die Erklärung ist
                simpel, zum Zeitpunkt des Mountens fehlt Portmap. Wenn Sie regelmäßig mit NFS arbeiten, empfiehlt es sich,
                portmap zum standard Runlevel zu ergänzen:
                <pre>
                # rc-update add portmap default
                </pre>
                </p>
                </body>
        </section>
        </chapter>
<chapter>
	<title>gentoo.de</title>
	<section>
		<title>Wie benutze ich die gentoo.de Ebuilds von BerliOS?</title>
		<body><p>
		Seit Portage Version 2.0.21 existiert eine einfache Möglichkeit "inoffizielle" Ebuilds zu benutzen.
		Dies geschieht indem man die Environmentvariable <i>PORTDIR_OVERLAY</i> entsprechend setzt.
		Z.B. in <path>/etc/profile</path> durch
		<pre>
		export PORTDIR_OVERLAY=/usr/local/ebuilds
		</pre>
		Um die Ebuilds von BerliOS dort abzulegen einfach folgende Befehle (als root) ausführen:
		<pre>
		# cd /usr/local
		# cvs -d:pserver:anonymous:@cvs.gentoo-deutsch.berlios.de:/cvsroot/gentoo-deutsch login
		# cvs -z3 -d:pserver:anonymous@cvs.gentoo-deutsch.berlios.de:/cvsroot/gentoo-deutsch co ebuilds
		</pre>
		Fertig. Diese Befehle m&#252;ssen nur einmal ausgeführt werden. Zum Aktualisieren der
		Ebuilds ist später nur noch folgendes (wiederum als root) nötig:
		<pre>
		# cd /usr/local/ebuilds
		# cvs update -Pd
		</pre>
		</p></body>
	</section>
	<section>
		<title>Wie wandle ich meine &#252;bersetzten XML Dokumente in HTML um?</title>
		<body><p>
		Dazu braucht man xsltproc, welches mit emerge libxslt installiert werden kann.
		Nun wechselt man lokal in das Verzeichnis www-xml und wandelt die Datei wie folgt um:
		<pre>
		"xsltproc ../www-xsl/guide-main-german.xsl datei.xml >
		../www-berlios/htmlfromxsl/datei.html"
		</pre>
		Gar nicht so schwer, oder?
		</p></body>

	</section>
</chapter>
</guide>
 
