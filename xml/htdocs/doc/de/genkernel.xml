<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/genkernel.xml,v 1.14 2007/07/23 21:56:08 grahl Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- English CVS Version: 1.29 -->

<guide link="/doc/de/genkernel.xml" lang="de">
<title>Gentoo Linux Genkernel Leitfaden</title>

<author title="Autor">
  <mail link="plasmaroo@gentoo.org">Tim Yamin</mail>
</author>

<!-- folajimi@speakeasy.net -->
<author title="Mitarbeiter">
  Jimi Ayodele
</author>

<!-- thseiler@gmail.com -->
<author title="NFS Support">
  Thomas Seiler
</author>

<author title="Übersetzer">
  <mail link="grahl@gentoo.org">Jan Hendrik Grahl</mail>
</author>
<author title="Übersetzer">
  <mail link="keytoaster@gentoo.org">Tobias Heinlein</mail>
</author>

<abstract>
Dieser Leitfaden versucht eine Referenz für alle Funktionen, die von
genkernel unterstützt werden, zu liefern.
</abstract>

<license/>

<version>1.5</version>
<date>2007-06-20</date>

<chapter>
<title>Einleitung</title>
<section>
<title>Grundprinzip</title>
<body>

<p>
Genkernel ist ein Hilfsprogramm, welches Benutzern, die sich nicht mit der
Kompilierung eines Kernels auskennen, hilft, indem es diesen Prozess
automatisiert. Es kann Ihnen helfen einen Kernel zu erstellen, der ähnlich
denen auf der Gentoo Installations-CD ist, welche dafür vorgesehen sind, die
Hardware-Konfiguration Ihres Systems automatisch zu erkennen. Einige Benutzer
könnten auch daran interessiert sein, genkernel für Hardware, welche
Initalisierung und einen funktionierenden Kernel benötigt, bevor das System
hochfährt, zu benutzen. Da genkernel automatisch Ihre Kernelmodule kompiliert,
können Sie Hardware benutzen, welche bestimmte Modulparameter benötigt, um
ordnungsgemäß zu funktionieren.
</p>

</body>
</section>
<section>
<title>Zielgruppe</title>
<body>

<p>
Wenn Sie sich nicht mit der Kompilierung eines Kernels auskennen oder einfach
Ihre Hardware-Konfiguration nicht kennen, ist genkernel ein sehr nützliches
Werkzeug. Es wurde hergestellt, um Ihnen die Qual der Kernelkompilierung
abzunehmen, und unterstützt standardmäßig die meiste Hardware.
</p>

<p>
Wenn Sie jedoch wissen, welche Treiber Ihr System benötigt, können Sie weiterhin
die Zeit, die für die Kernelkompilation benötigt wird, reduzieren. Dies ist
möglich, da Sie genkernel anweisen können, nur Treiber, die für Ihre Hardware
relevant sind, zu erstellen. In den meisten Fällen ist die Anzahl der
erforderlichen Treiber kleiner (ebenso die Zeit zur Kompilation des Kernels)
als die, die die standardmäßige Konfiguration anbietet.
</p>

</body>
</section>
<section>
<title>Genkernel installieren</title>
<body>

<p>
Um genkernel zu erhalten, führen Sie <c>emerge genkernel</c> auf einer
Kommandozeile aus. Falls Sie die <uri
link="/doc/de/handbook/2005.1/hb-install-about.xml#doc_chap2_sect1">Gentoo
Reference Platform</uri> (GRP) benutzen, vergessen Sie nicht binäre Pakete
durch Übergabe des <c>-k</c> Parameters an emerge zu installieren. Da die
GRP eine ältere Version von genkernel besitzt, können die Flags unterschiedlich
sein. Konsultieren Sie <c>genkernel --help</c> in diesem Falle, um Hilfe zu
erhalten, wie die Version von genkernel auf Ihrem System zu benutzen ist.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Mit genkernel arbeiten</title>
<section>
<title>Wie genkernel zu benutzen ist</title>
<body>

<p>
Obwohl es mehrere Wege gibt, genkernel auszuführen, wird die einfachste Methode
durch <c>genkernel all</c>. Hier wird eine generelle Konfiguration, welche für
für die meisten Systeme gut funktioniert, verwendet. Wie bereits erwähnt ist
diese Methode nicht ohne Nachteile; die meisten Module, die erstellt werden,
sind für den durchschnittlichen Benutzer nutzlos und erhöhen die Kompilierzeit.
Es folgt ein effizienterer Ansatz, der durch das Überreichen bestimmter Flags
and genkernel als root zu erhalten ist:
</p>

<pre caption="Ausführen von genkernel (mit Flags)">
# <i>genkernel --bootsplash --no-install --no-clean --menuconfig all</i>
</pre>

<p>
Der obige Befehl bewirkt, dass genkernel einen Kernel mit aktiviertem Bootsplash
(<c>--bootsplash</c>), der manuell installiert werden muss
(<c>--no-install</c>), erzeugt. Während der Kernel-Quellbaum vorbereitet wird,
wird genkernel es unterlassen, jegliche bereits bestehende Objektdateien im
Quellbaum zu entfernen (<c>--no-clean</c>). Ein menü-betriebenes
Konfigurationswerkzeug wird dargestellt, welches dem Benutzer ermöglicht, die
Module auszuwählen, welche für das System gebaut werden sollen
(<c>--menuconfig</c>).
</p>

<p>
Es gibt noch andere Flags, welche das Verhalten von genkernel beeinflussen.
Zum Beispiel bewirkt das Ersetzen von <c>--no-install</c> durch <c>--install</c>
eine automatische Installation des Kernels im <path>/boot</path> Verzeichnis.
Durch Benutzen des <c>--mountboot</c> Flags wird es genkernel erlaubt, die
<path>/boot</path> Partition automatisch zu mounten, falls dies erforderlich
ist.
</p>

<p>
Nicht vergessen, genkernel wurde erstellt, um die Kernelkompilation leicht und
stressfrei zu machen. Aus diesem Grund bietet genkernel einige Flags an, welche
diesen Vorgang erleichtern. Zum Beispiel gibt es Flags, welche bei der
Kernelkonfiguration helfen, während andere die eigentliche Kompilation
beeinflussen. Einige Flags helfen sogar den Kompilationsprozess zu debuggen.
Für diejenigen, die an weiterer Optimierung interessiert sind, gibt es Flags,
welche das Zusammenbauen, Verpacken und sogar die Kernel-Initialisierung
betreffen.
</p>

<p>
Der Rest dieses Kapitels untersucht die Funktionalität verschiedener Flags und
vorhandener Aktionen für genkernel. Einige der Flags haben Varianten, welche
die gegenteilige Operation durchführen. Diese tragen das Prefix
<b><c>no-</c></b> und deren Effekte stehen in eckigen Klammern, [].
</p>

</body>
</section>
<section>
<title>Konfigurationsflags</title>
<body>

<p>
Die folgenden Konfigurationsflags helfen Ihnen vor der Kompilation zu
entscheiden, welche Funktionen im Kernel aktiviert oder deaktiviert werden
sollen. Sie können sogar entscheiden, ob die Konfigurationsdatei, die während
dieses Prozesses erstellt wird, gespeichert werden soll oder nicht. Dies sind
die primären Konfigurationsflags:
</p>

<ul>
  <li>
    <b>--<c>no-</c>menuconfig</b>: Aktiviert <e>[oder deaktiviert]</e> den
    Befehl <c>make menuconfig</c> (welcher ein interaktives, menübasiertes
    Kernelkonfigurationswerkzeug aufruft) bevor der Kernel gebaut wird.
  </li>
  <li>
    <b>--gconfig</b>: Stellt ein Kernelkonfigurationswerkzeug bereit, welches
    von den GTK+ Bibliotheken abhängt. Der Vorteil dieser Option ist der, dass
    die meisten Benutzer es einfacher und klarer finden, den Kernel mit diesem
    Werkzeug zu konfigurieren, da es auf dem X-windowing-System beruht. Der
    Nachteil dieser Option ist der, dass Sie das X-windowing-System
    <b>benötigen</b>, um sie zu benutzen. Sie wird nicht auf der Kommandozeile
    funktionieren.
  </li>
  <li>
    <b>--xconfig</b>: Stellt ein Kernelkonfigurationswerkzeug bereit, welches
    von den QT-Bibliotheken abhängt. Der Vorteil dieser Option ist der, dass
    die meisten Benutzer es einfacher und klarer finden, den Kernel mit diesem
    Werkzeug zu konfigurieren, da es auf dem X-windowing-System beruht. Der
    Nachteil dieser Option ist der, dass Sie das X-windowing-System
    <b>benötigen</b>, um sie zu benutzen. Sie wird nicht auf der Kommandozeile
    funktionieren.
  </li>
  <li>
    <b>--<c>no-</c>save-config</b>: Speichert die Kernelkonfiguration
    <e>[nicht]</e> in eine Datei im Verzeichnis <path>/etc/kernels/</path> für
    späteren Gebrauch.
  </li>
</ul>

</body>
</section>
<section>
<title>Kompilationsflags</title>
<body>

<p>
Die folgenden Flags beeinflussen die eigentliche Kompilation:
</p>

<ul>
  <li>
    <b>--kerneldir=<path>/pfad/zu/quellen/</path></b>: Gibt einen alternativen
    Pfad zu den Kernelquellen an. Dieser ist standardmäßig
    <path>/usr/src/linux/</path>.
  </li>
  <li>
    <b>--kernel-config=<path>/pfad/zu/konfigurationsdatei</path></b>: Gibt
    eine alternative Konfigurationsdatei an. Diese ist standardmäßig
    <path>/pfad/zu/quellen/.config</path>.
  </li>
  <li>
    <b>--module-prefix=<path>/pfad/zu/verzeichnis-preifx/</path></b>: Gibt ein
    Prefix zu dem Verzeichnis an, in dem die Kernelmodule installiert werden.
    Dieser ist standardmäßig <path>/lib/modules/</path>.
  </li>
</ul>

<ul>
  <li>
    <b>--<c>no-</c>clean</b>: Aktiviert <e>[oder deaktivert]</e> den Befehl
    <c>make clean</c> bevor der Kernel kompiliert wird. Der <c>make clean</c>
    Befehl entfernt alle Objektdateien und Abhängigkeiten vom Kernel-Quellbaum.
  </li>
  <li>
    <b>--<c>no-</c>mrproper</b>: Aktiviert <e>[oder deaktiviert]</e> den Befehl
    <c>make mrproper</c> bevor der Kernel kompiliert wird. <c>make mrproper</c>
    entfernt, wie <c>make clean</c>, alle Objektdateien und Abhängigkeiten vom
    Kernel-Quellbaum. Jedoch werden <b>auch</b> alle bereits bestehenden
    Konfigurationsdateien (in <path>/pfad/zu/quellen/.config</path> oder
    <path>/pfad/zu/quellen/.config.old</path>) vom Kernel-Quellbaum entfernt.
  </li>
  <li>
    <b>--oldconfig</b>: Führt den Befehl <c>make oldconfig</c> aus, welcher
    versucht, Konfigurationsinformationen für die Systemarchitektur von einem
    generischen Skript in <path>/usr/share/genkernel/</path> zu sammeln. Dies
    ist ein nicht-interaktives Skript; es werden keine Benutzereingaben
    erwartet. Wenn <c>--oldconfig</c> in Verbindung mit <c>--clean</c> benutzt
    wird, wird das letztere Flag negiert. Dies resultiert in der Aktivierung
    des <c>--no-clean</c> Flags.
  </li>
</ul>

<ul>
  <li>
    <b>--callback="<c>echo hello</c>"</b>: Ruft die angegebenen Argumente
    (in diesem Fall <c>echo hello</c>) auf, nachdem der Kernel und die
    relevanten Module gebaut worden sind, aber bevor das initrd-Abbild erstellt
    wird. Dies kann nützlich sein, wenn Sie ein externes Modul in das
    initrd-Abbild einfügen wollen, indem Sie die relevanten Objekte mit Hilfe
    der Callback-Funktion emergen und dann eine Modulgruppe genkernel neu
    definieren.
  </li>
</ul>

<ul>
  <li>
    <b>--<c>no-</c>install</b>: Aktiviert <e>[oder deaktiviert]</e> den Befehl
    <c>make install</c>, welcher Ihren neuen Kernel, die Konfigurationsdatei,
    das initrd-Abbild und die Systemmap auf Ihre gemountete Boot-Partition
    installieren wird. Jegliche kompilierte Module werden ebenfalls installiert.
  </li>
  <li>
    <b>--<c>no-</c>initrdmodules</b>: Unterlässt es jegliche Module in das
    von genkernel erstellte initrd-Abbild zu kopieren. Dieses Flag ist eine
    Aussnahme bezüglich des <c>no-</c> Präfixes; das Weglassen dieses Präfixes
    erstellt ein ungültiges genkernel-Flag.
  </li>
  <li>
    <b>--genzimage</b>: Erstellt das initrd-Abbild vor dem Kernel-Abbild.
    (Dieser Hack gilt momentan nur für PPC Pegasos Systeme.)
  </li>
</ul>

</body>
</section>
<section>
<title>Compiler-Flags</title>
<body>

<p>
Die folgenden Flags werden von genkernel unterstützt und werden während der
Kernel gebaut wird an die passenden Applikationen übergeben. Diese Flags
betreffen den <e>Compiler</e>, der für den Kernelkompilationsprozess genutzt
wird, wenn auch auf einer viel tieferen Ebene.
</p>

<ul>
  <li>
    <b>--kernel-cc=<c>someCompiler</c></b>: Dies spezifiziert den Compiler,
    welcher während des Kernelkompilationsprozesses tätig ist.
  </li>
  <li>
    <b>--kernel-ld=<c>someLinker</c></b>: Dies spezifiziert den Linker, welcher
    während des Kernelkompilationsprozesses tätig ist.
  </li>
  <li>
    <b>--kernel-as=<c>someAssembler</c></b>: Dies spezifiziert den Assembler,
    welcher während des Kernelkompilationsprozesses tätig ist.
  </li>
  <li>
    <b>--kernel-make=<c>someMake</c></b>: Dies spezifiziert eine Alternative
    zum Werkzeug <e>GNU make</e>, welche während des Kernelkompilationsprozesses
    tätig ist.
  </li>
</ul>

<ul>
  <li>
    <b>--utils-cc=<c>someCompiler</c></b>: Dies spezifiziert den Compiler,
    welcher während des Kernelkompilationsprozesses tätig ist.
  </li>
  <li>
    <b>--utils-ld=<c>someLinker</c></b>: Dies spezifiziert den Linker, welcher
    während des Kernelkompilationsprozesses tätig ist.
  </li>
  <li>
    <b>--utils-as=<c>someAssembler</c></b>: Dies spezifiziert den Assembler,
    welcher während des Kernelkompilationsprozesses tätig ist.
  </li>
  <li>
    <b>--utils-make=<c>someMake</c></b>: Dies spezifiziert eine Alternative
    zum Werkzeug <e>GNU make</e>, welche während des Kernelkompilationsprozesses
    tätig ist.
  </li>
</ul>

<ul>
  <li>
    <b>--makeopts=<c>-jX</c></b>: Gibt die Anzahl gleichzeitiger Prozesse an,
    die das Werkzeug make implementieren kann, während der Kernel (und andere
    Dinge) kompiliert werden. Die Variable <b>'X</b> ist eine Zahl, die man
    durch Addition von 1 zur Anzahl der vom System verwendeten CPUs erhält.
    Für ein System mit einer CPU ist das entsprechende Flag <c>-j2</c>; ein
    System mit zwei CPUs verwendet <c>-j3</c> und so weiter. <e>(Ein System mit
    einem Prozessor, welcher die Hyper-Threading&trade; (HT) Technologie
    unterstützt, kann das Flag </e><c>-j3</c><e> verwenden, sofern Unterstützung
    für Symmetric Multi-Processing (SMP) im Kernel aktiviert ist.)</e>
  </li>
</ul>

</body>
</section>
<section>
<title>Flags zur Fehlersuche</title>
<body>

<p>
Die Benutzung von Flags zur Fehlersuche während des Kernelkompilationsprozesses
kontrolliert die Menge der Informationen, die ausgegeben werden, als auch die
Präsentation dieser Daten.
</p>

<ul>
  <li>
    <b>--debuglevel=<c>verblevel</c></b>: Kontrolliert die Intensität der
    Informationen, die vom Kernel geliefert werden. Die Variable
    <c>verblevel</c> ist eine Zahl zwischen 0 und 5. Eine '0' bedeutet minimale
    Ausgabe, während '5' so viel Informationen über genkernels Aktivitäten
    wie möglich anbietet.
  </li>
  <li>
    <b>--debugfile=<path>/pfad/zu/ausgabedatei</path></b>: Ignoriert den Wert,
    der durch das Argument <c>--debuglevel</c> gesetzt wurde, und schickt
    <b>alle</b> von genkernel produzierten Daten zur Fehlersuche an die
    angegebene Ausgabedatei, welche standardmäßig unter
    <path>/var/log/genkernel.log</path> zu finden ist.
  </li>
  <li>
    <b>--no-color</b>: Aktiviert <e>[oder deaktiviert]</e> die gefärbte Ausgabe
    der Informationen, indem es Escapesequenzen verwendet.
  </li>
</ul>

</body>
</section>

<section>
<title>Initialisierungsflags</title>
<body>

<p>
Die folgenden Flags werden benutzt, um bestimmte Effekte während des Hochfahrens
des Systems zu erreichen. Einige dieser Flags sind vor allem für kunstvolle
Leute, während andere erforderlich sind, um bestimmte Funktionen auf dem System
zu aktivieren.
</p>

<ul>
  <li>
    <b>--<c>no-</c>bootsplash</b>: Aktiviert <e>[oder deaktiviert]</e>
    <uri link="http://www.bootsplash.org/">Bootsplash</uri> Unterstützung im
    initrd-Abbild, welches genkernel erstellt. Nicht alle Architekturen
    unterstützen dies momentan und ein Kernel, der Bootsplash unterstützt,
    wird auch benötigt.
  </li>
  <li>
    <b>--<c>no-</c>gensplash</b>: Aktiviert <e>[oder deaktiviert]</e>
    Unterstützung für <uri
    link="http://dev.gentoo.org/~spock/projects/gensplash/">gensplash</uri>
    im initrd-Abbild. Das Werkzeug gensplash ist ein Ersatz für bootsplash und
    wurde für die Benutzung mit Kerneln der 2.6.x Reihe entworfen. Um den
    standardmäßigen Theme, der von gensplash benutzt wird, zu überschreiben,
    verwenden Sie <b>--gensplash=<c>BevorzugterTheme</c></b> (wobei
    <c>BevorzugterTheme</c> der Titel eines Verzeichnisses innerhalb von
    <path>/etc/splash/</path> ist).
  </li>
  <li>
    <b>--gensplash-res=<c>BevorzugteAuflösung</c></b>: Dieses Flag erlaubt Ihnen
    auszuwählen, welche Auflösungen des Splash-Screens in der initrd während
    des Hochfahrens des Systems unterstützt werden. Dies ist aus zwei Gründen
    nützlich: Zum einen können Sie nur die Auflösung(en), die für Ihr System
    relevant sind, auswählen. Zum anderen vermeiden Sie eine unnötige Erhöhung
    des Festplattenplatzes, der von der initrd benötigt wird (da die initrd
    die Auflösungen, die für Ihr System nicht relevant sind, nicht unterstützen
    muss). Jedoch kann es sein, dass Sie dieses Flag weglassen wollen, falls der
    Kernel für eine Installations-CD kompiliert wird; dies erlaubt gensplash
    Unterstützung für alle möglichen Auflösungen.
  </li>
  <li>
    <b>--do-keymap-auto</b>: Erzwingen der Auswahl der Keymap während der
    Boot-Sequenz.
  </li>
  <li>
    <b>--lvm2</b>: Fügt Unterstützung für <uri
    link="http://sources.redhat.com/lvm2/">Logical Volume Management</uri>
    (LVM2) aus <e>statischen</e> Binärdateien hinzu, falls dies für das System
    verfügbar ist. Relevante (statische) LVM2-Binärdateien werden kompiliert,
    wenn Sie nicht verfügbar sind. Stellen Sie sicher, dass Sie das Paket lvm2
    mit <c>emerge lvm2</c> installieren, bevor Sie dieses Flag aktivieren.
    Schauen Sie sich außerdem noch einmal die <uri
    link="/doc/de/lvm2.xml">Gentoo LVM2 Installation</uri> an.
  </li>
  <li>
    <b>--evms2</b>: Fügt Unterstützung für <uri
    link="http://evms.sourceforge.net/">Enterprise Volume Management System
    </uri> (EVMS2) hinzu, falls dies für das System verfügbar ist. Stellen Sie
    sicher, dass Sie das Paket evms2 mit <c>USE=static emerge evms2</c>
    installieren, bevor Sie dieses (genkernel-)Flag aktivieren. <e>(Das
    Weglassen des </e><c>USE=static</c><e> Flags während der Installation des
    Paketes wird fehlschlagen die benötigten statischen Binärdateien
    einzubinden.)</e>
  </li>
  <li>
    <b>--dmraid</b>: Fügt Unterstützung für <uri
    link="http://people.redhat.com/~heinzm/sw/dmraid/readme">DMRAID</uri> hinzu;
    das Werkzeug, welches RAID-Mapping durch Benutzung des device-mapper
    Subsystems des Kernel erstellt. DMRAID entdeckt, aktiviert, deaktiviert und
    stellt Eigenschaften von Software-RAID-Sets (z.B. ATARAID) und enthaltenen
    DOS-Partitionen dar.
  </li>
  <li>
    <b>--luks</b>: Fügt Unterstützung für <uri
    link="http://luks.endorphin.org/">Linux Unified Key Setup</uri>, oder kurz
    LUKS, hinzu. Dies ermöglicht Ihnen, ein durch LUKS verschlüsseltes Gerät zu
    benutzen, welches das Root-Dateisystem enthält. Am Bootloader setzen Sie
    dann das verschlüsselte Gerät als Wert von crypt_root (und real_root soll
    das unverschlüsselte Gerät sein, welches LUKS erstellt).
  </li>
  <li>
    <b>--linuxrc=/pfad/zu/Ihrer/linuxrc</b>: Gibt eine vom Benutzer erstellte
    <e>linuxrc</e> an &mdash; ein Skript, welches während des Hochfahrens des
    Kernels und vor dem eigentlichen Boot-Prozess initialisiert wird. (Ein
    standardmäßiges Skript linuxrc sollte im Verzeichnis
    <path>/usr/share/genkernel/</path> zu finden sein.) Dieses Skript erlaubt
    Ihnen, einen kleinen, modularisierten Kernel zu booten und die Treiber, die
    vom System (als Module) benötigt werden, zu laden.
  </li>
  <li>
    <b>--cachedir=/pfad/zu/alt/verzeichnis/</b>: Überschreibt den
    standardmäßigen Ort des Caches, der während des Kompilierens des Kernels
    genutzt wird.
  </li>
  <li>
    <b>--tempdir=/pfad/zu/neuem/tempverzeichnis/</b>: Gibt den Ort des
    temporären Verzeichnisses an, das von genkernel während des Kompilierens
    des Kernels genutzt wird.
  </li>
  <li>
    <b>--unionfs</b>: Fügt Unterstützung für das <uri
    link="http://www.fsl.cs.sunysb.edu/project-unionfs.html">Unification File
    System</uri> zum initrd-Abbild hinzu.
  </li>
</ul>

</body>
</section>
<section>
<title>Verschiedene Flags</title>
<body>

<p>
Die folgenden Flags werden von genkernel unterstützt, passen allerdings in
keine der anderen Kategorien:
</p>

<ul>
  <li>
    <b>--mountboot</b>: Erkennt, ob das Verzeichnis <path>/boot</path> auf
    einer separaten Partition gemountet werden muss. Es durchsucht das Skript
    <path>/etc/fstab</path> nach Anweisungen, wie die Boot-Partition in ein
    Dateisystem (falls nötig) gemountet wird.
  </li>
  <li>
    <b>--kernname=<c>NickName</c></b>: Erlaubt Ihnen, den Namen des Kernel-
    und initrd-Abbilds in <path>/boot/</path> zu modifizieren, so dass die
    erstellten Abbilder kernel-<c>NickName</c>-version und
    initramfs-<c>NickName</c>-version heißen.
  </li>
</ul>

</body>
</section>
<section>
<title>Mögliche Aktionen</title>
<body>

<p>
Eine Aktion weist genkernel an, was es bauen soll. Zurzeit werden die folgenden
Aktionen unterstützt:
</p>

<ul>
  <li><c>initrd</c>: Nur das initrd-Abbild erzeugen</li>
  <li><c>bzImage</c>: Nur das Kernel-Abbild erzeugen</li>
  <li><c>kernel</c>: Nur das Kernel-Abbild und die Module erzeugen</li>
  <li>
    <c>all</c>: Erzeugt alles &mdash; das initrd-Abbild, das Kernel-Abbild und
    die Module.
  </li>
</ul>

<p>
Die letzte aktion, <c>all</c>, wird für die meisten Benutzer empfohlen, da sie
alles, was für einen funktionieren Kernel benötigt wird, erstellt. Denken Sie
dran, eine <e>Aktion</e> sagt genkernel nur, was es zu <e>erstellen</e> hat,
nicht was es <e>installieren</e> soll.
</p>

</body>
</section>
<section>
<title>Bootloader Konfiguration</title>
<body>

<p>
Drei oder vier Veränderungen an Ihrer Bootloaderkonfigurationen sollten
angewandt werden, damit genkernel mit Ihrem Bootloader funktioniert.
</p>

<ol>
  <li>
    Fügen Sie <c>root=/dev/ram0</c> und <c>init=/linuxrc</c> zu den
    Kernelparametern, die an das Kernelabbild übergegeben werden, hinzu.
  </li>
  <li>
    Fügen Sie zum Beispiel <c>real_root=/dev/hda3</c> zu den Kernelparametern,
    welche an das Kernelimage übergeben werden, hinzu, wenn
    <path>/dev/hda3</path> Ihre Root Partition enthält.
  </li>
  <li>
    Wenn Sie Bootsplash verwenden, fügen Sie eine passende Moduszeile wie
    <c>vga=0x317</c> zu den Kernelparametern, die an das Kernelimage übergeben
    werden, hinzu. Außerdem noch <c>splash=verbose</c> oder
    <c>splash=silent</c> abhängig von der Detailreiche die Sie von Ihrem
    Bootloader benötigen.
  </li>
  <li>
    Fügen Sie die Informationen zum initrd-Abbild hinzu, so wie Ihr Bootloader
    sie benötigt. Betrachten Sie das Kapitel über die <uri
    link="/doc/de/handbook/handbook-x86.xml?part=1&amp;chap=10">Bootloader
    Konfiguration</uri> des Gentoo-Handbuchs für Detail, wie Sie Ihren
    Bootloader über die initrd in Kenntnis setzen.
  </li>
</ol>

</body>
</section>
</chapter>

<chapter>
<title>Konfigurationsoptionen</title>
<section>
<title>Bearbeiten von /etc/genkernel.conf</title>
<body>

<p>
Das Überreichen von Flags an genkernel über die Kommandozeile kann mühsam sein,
vor allem wenn Sie ein Dutzend Flags haben:
</p>

<pre caption="Ausführen von genkernel (überladen mit Flags)">
# <i>genkernel --debuglevel=5 --no-color --no-mrproper --clean --gensplash \
--kerneldir=/path/to/alternate/kernel/sources --install --menuconfig \
--kernel-config=/path/to/preferred/configfile --save-config --mountboot all</i>
</pre>

<p>
Zum Glück gibt es eine Konfigurationsdatei, in welcher die meisten grundlegenden
Optionen gegebenenfalls gesetzt (oder geändert) werden können. Es folgt eine
Auflistung der bedeutendsten Optionen:
</p>

<ul>
  <li>
    <b>MENUCONFIG=<c>[yes|no]</c></b>: Diese Option entspricht dem von genkernel
    genutzten Flag <c>--menuconfig</c>, welches den Befehl <c>make
    menuconfig</c> anwendet, um ein kommandozeilenbasierendes
    Konfigurationswerkzeug aufzurufen. Um dieses Werkzeug automatisch während
    der Kernelkonfiguration über dieses Skript aufzurufen, setzen Sie diese
    Option auf 'yes', ansonsten wählen Sie 'nein'.
  </li>
  <li>
    <b>CLEAN=<c>[yes|no]</c></b>: Diese Option auf 'yes' zu setzen ist
    gleichwertig zur Benutzung des Flags <c>--clean</c> und ruft den Befehl
    <c>make clean</c> auf, um Objektdateien und Abhängigkeiten aus dem
    Kernelquellbaum zu entfernen. Diese Option auf 'no' zu setzen, bewirkt das
    Gegenteil &#8212; es entspricht dem Flag <c>--no-clean</c>, welches den
    Befehl <c>make clean</c> deaktiviert und das Flag <c>--no-mrproper</c>
    impliziert &mdash; also den Befehl <c>make mrproper</c> aufhebt.
  </li>
  <li>
    <b>MRPROPER=<c>[yes|no]</c></b>: Diese Option auf 'yes' zu setzen ist
    gleichwertig zur Benutzung des Flags <c>--mrproper</c> und ruft den Befehl
    <c>make mrproper</c> auf, welcher den Kernelquellbaum von jeglichen
    Konfigurationsdateien befreit. 'no' zu wählen bewirkt das gleiche wie
    wie Benutzung von genkernels Flag <c>--no-mrproper</c>, welches den
    Befehl <c>make mrproper</c> deaktiviert.
  </li>
  <li>
    <b>MOUNTBOOT=<c>[yes|no]</c></b>: Diese Option auf 'yes' zu setzen ist
    gleichwertig zum Flag <c>--mountboot</c> und mountet (falls nötig) das
    Verzeichnis <path>/boot/</path> zur Kompilierzeit automatisch. Falls
    das Verzeichnis <path>/boot/</path> auf einer separaten Partition liegt,
    ziehen Sie es in Erwägung, diese Option zu aktivieren; so müssen Sie sich
    später einen (notwendigen) Schritt weniger merken.
  </li>
  <li>
    <b>SAVE_CONFIG=<c>[yes|no]</c></b>: Nachdem der Kernel konfiguriert worden
    ist, werden die ausgewählten Optionen als <path>.config</path> im
    Kernelquellbaum gespeichert. Dieses Skript kann während der nächsten
    Kernelkompilation überschrieben oder sogar aus dem Kernelquellbaum gelöscht
    werden. Hier 'yes' auszuwählen ist gleichwertig zur Benutzung des
    Flags <c>--save-config</c> und speichert alle während der
    Kernelkonfiguration gewählten Optionen als Skript in das Verzeichnis
    <path>/etc/kernels/</path>. 'no' behält den <e>status quo</e> bei.
  </li>
  <li>
    <b>USECOLOR=<c>[yes|no]</c></b>: Diese Option auf 'yes' zu setzen ist
    gleichwertig zum Flag <c>--color</c>, welches die Ausgabe von genkernel
    färbt, um die Fehlersuche (falls erforderlich) zu erleichtern.
  </li>
  <li>
    <b>DEBUGLEVEL=<c>[0|1|2|3|4|5]</c></b>: Durch diese Option lässt sich die
    Detailreiche der von genkernel erstellten Ausgabe regeln &mdash; diese
    Option mit <c>--debuglevel=0</c> auf '0' zu setzen, unterdrückt jegliche
    Ausgabe von genkernel; <c>--debuglevel=5</c> stellt dem Benutzer die
    vollständige Ausgabe von genkernel zur Verfügung.
  </li>
</ul>

<p>
Durch eine angemessene Auswahl der Flags in <path>/etc/genkernel.conf</path>
können Sie die Anzahl der Flags, die Sie genkernel über die Kommandozeile
übergeben, halbieren.
</p>

<pre caption="Ausführen von genkernel (mit Flags), nach Bearbeitung von genkernel.conf">
# <i>genkernel --gensplash --kerneldir=/pfad/zu/alternativen/kernel/quellen \
--kernel-config=/pfad/zu/bevorzugter/konfigurationsdatei --install all</i>
</pre>

<p>
Beide Vorgehensweisen erzeugen dasselbe Ergebnis, allerdings speichert die
letztere die meisten Optionen in einem Skript, das zu einem späteren Zeitpunkt
bearbeitet werden kann.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Booten über das Netzwerk mit genkernel</title>
<section>
<title>Booten über das Netzwerk von einer Installations-CD</title>
<body>

<p>
Das Werkzeug genkernel kann Kernel- und initrd-Abbilder erzeugen, die die
Unterstützung für das Booten über ein Netzwerk (im folgenden <e>netboot</e>ing
genannt) unterstützen. Mit etwas Glück sollten Sie in der Lage sein, irgendeinen
Computer in die von der Installations-CD bereitgestellte Umgebung netbooten zu
können.
</p>

<p>
Der Trick liegt in genkernels Skript linuxrc: Es wird versuchen die
Installations-CD mit Hilfe von NFS zu <e>netmount</e>en. Ab dann können <e>die
Init-Skripte</e> der Installations-CD übernehmen, als wäre die CD lokal
verfügbar.
</p>

</body>
</section>
<section>
<title>Erstellen von Kernel und Initrd-Abbildern mit Unterstützung für Netbooting</title>
<body>

<p>
Um die Unterstützung für Netbooting zu aktivieren, binden Sie die folgenden
Optionen während der Kernelkonfiguration ein:
</p>

<warn>
Die Unterstützung für Netbooting mit genkernel ist experimentell und kann Fehler
enthalten.
</warn>

<p>
Zuerst muss der Kernel die Treiber für Ihre Netzwerkkarte (NIC) enthalten.
Normalerweise werden die Treiber für solche Geräte als Module kompiliert. Für
Netbooting müssen solche Treiber jedoch direkt in den Kernel einkompiliert
(also <b>nicht</b> als Module) sein.
</p>

<pre caption="Konfigurieren eines 2.6.x Kernels um den NIC-Treiber zu unterstützen">
Device Drivers --->
  Networking Support --->
  Ethernet (10 or 100Mbit)  --->
  [*] Ethernet (10 or 100Mbit)
  &lt;*&gt;   der Treiber für Ihre Netzwerkkarte
<comment>(Stellen Sie sicher &lt;*&gt; und nicht &lt;M&gt; auszuwählen)</comment>
</pre>

<p>
Als nächstes schlagen wir vor, dass Sie die Optionen <c>IP: kernel level
autoconfiguration</c> und <c>IP: DHCP support</c> aktivieren. Dies vermeidet
einen nicht erforderlichen zusätzlichen Aufwand, da die IP-Adresse und der
NFS-Pfad zu der Installations-CD auf einem DHCP-Server konfiguriert werden
können. Dies bedeutet natürlich, dass die Kernelkommandozeile für jede
Maschine konstant bleibt &mdash; was sehr wichtig für <e>etherbooting</e> ist.
</p>

<pre caption="Konfigurieren eines 2.6.x Kernels um DHCP zu unterstützen">
Device Drivers --->
  Networking Support --->
    Networking options
      [*] TCP/IP networking--->
      [*]   IP: kernel level autoconfiguration
      [*]     IP: DHCP support
<comment>(Diese Optionen weisen den Kernel an, eine DHCP-Anfrage beim Hochfahren zu senden.)</comment>
</pre>

<p>
Zusätzlich sollten sie noch SquashFS aktivieren, da die meisten modernen
Gentoo-Installations-CDs dies benötigen. Die Unterstützung für SquashFS ist
in den "normalen" Kernelquellbaum nicht eingebunden. Um SquashFS zu aktivieren,
wenden Sie die benötigen Patche auf den "normalen" Kernelquellbaum an oder
installieren Sie <c>gentoo-sources</c>.
</p>

<pre caption="Konfigurieren des Kernels um SquashFS zu unterstützen">
File systems--->
  Miscellaneous filesystems --->
    [*] SquashFS 2.X - Squashed file system support
</pre>

<p>
Sobald der Kompilationsprozess abgeschlossen ist, erstellen Sie einen
komprimierten <e>Tarball</e> (tar.gz), der die Kernelmodule enthält. Dieser
Schrittt ist nur erforderlich, wenn die Version Ihres Kernels nicht der Version
des Kernel-Abbilds auf der Installations-CD entspricht.
</p>

<pre caption="Erstellen eines komprimierten Tarballs, der die Kernelmodule enthält">
<comment>(Erstellen einer tar.gz, die alle Module enthält)</comment>
# <i>cd</i>
# <i>tar -cf /tmp/modules-X.Y.Z.tar.gz /lib/modules/X.Y.Z/</i>
</pre>

<p>
Abhängig von Ihrem Bootmechanismus über das Netzwerk müssen Sie nun einige
der folgenden Schritte durchführen:
</p>

<pre caption="Erstellen eines Boot-Abbilds">
<comment>(Erstellen eines etherboot-Abbilds)</comment>
# <i>emerge mknbi</i>
# <i>cd /boot</i>
# <i>mkelf-linux -params="root=/dev/ram0 init=/linuxrc ip=dhcp" kernel... initrd... > etherboot.img</i>

<comment>(Erstellen eines OpenBoot / SPARC64 TFTP Abbilds)</comment>
# <i>emerge sparc-utils</i>
# <i>cd /boot</i>
# <i>elftoaout kernel... -o kernel.aout</i>
# <i>piggyback64 kernel.aout System.map-... initrd-...</i>
# <i>mv kernel.aout openboot.img</i> <comment>(Dies ist das boot-Abbild)</comment>

<comment>(PXE benötigt keine weiteren Schritte, der Kernel und die initrd können so wie sie sind benutzt werden)</comment>
</pre>

<p>
Endlich können sie diesen Kernel auf ihren TFTP-Server kopieren. Die Details
dazu sind von der Architektur abhängig und würden den Rahmen dieses Leitfadens
sprengen. Ziehen Sie hierzu die Dokumentation zu Ihrer Plattform zu Rate.
</p>

</body>
</section>
<section>
<title>NFS Setup</title>
<body>

<p>
Um einen NFS-Share aufzusetzen, der die Installations-CD enthält, benutzen Sie
das loop-Gerät, um das ISO-Abbild zu mounten und dann die Inhalte der CD in den
NFS-Share zu kopieren. Als nettes Extra extrahieren genkernels initrd-Skripte
alle tar.gz Dateien im Verzeichnis <path>/nfs/livecd/add/</path>. Alles, was Sie
hier tun müssen, ist das Archiv <c>modules-X.Y.Z.tar.gz</c> in das Verzeichnis
<path>/nfs/livecd/add/</path> zu kopieren.
</p>

<pre caption="Vorbereiten des NFS-Shares">
<comment>(Dies nimmt an, dass /nfs/livecd ein exportierter NFS Share ist)</comment>
# <i>mount /tmp/gentoo-livecd.iso /mnt/cdrom -o loop</i>
# <i>cp -p /mnt/cdrom /nfs/livecd</i>
# <i>umount /mnt/cdrom</i>

<comment>(Kopieren von modules.tar.gz nach /add)</comment>
# <i>mkdir /nfs/livecd/add</i>
# <i>cp /tmp/modules-X.Y.Z.tar.gz /nfs/livecd/add</i>
</pre>

</body>
</section>
<section>
<title>DHCP Setup</title>
<body>

<p>
Die netboot-Abbilder werden Ihren DHCP-Server sowohl nach einer IP als auch
nach einem root-path fragen. Beide können pro Host angegeben werden, indem man
eine MAC-Adresse benutzt, um die Maschinen zu identifizieren:
</p>

<pre caption="Beispiel-Setup einer dhcpd.conf auf Client-Seite">
...

host netbootableMachine {
hardware ethernet 11:22:33:44:55:66;
fixed-address 192.168.1.10;
option root-path "192.168.1.2:/nfs/livecd";
}
<comment># 192.168.1.2 ist der NFS-Server
# Während 192.168.1.10 die IP-Adresse der netbooted Maschine sein wird</comment>
...
</pre>

</body>
</section>
<section>
<title>Netbooting Anweisungen</title>
<body>

<p>
Netbooting selbst ist sehr plattform-spezifisch. Der wichtigste Teil ist die
Parameter <c>ip=dhcp</c> und <c>init=/linuxrc</c> auf der Kernelkommandozeile
anzugeben, da diese die Netzwerkschnittstelle aktivieren und das initrd-Skript
anweisen, die Installations-CD über NFS zu mounten. Hier sind einige
plattform-spezifische Tipps:
</p>

<pre caption="Netbooting Anweisungen">
<comment># Etherboot - legen Sie die etherboot-Disk in das Gerät ein und rebooten Sie
# Die Kernelkommandozeile wurde angegeben, während das Abbild erstellt wurde</comment>

<comment># Sparc64 - Tippen Sie Stop-A am Boot-Prompt</comment>
ok boot net ip=dhcp init=/linuxrc

<comment># PXE - Setzen Sie pxelinux (Teil von syslinux) auf,
erstellen Sie dann eine pxelinux.cfg/default mit den Zeilen:</comment>

DEFAULT gentoo
TIMEOUT 40
PROMPT 1

LABEL gentoo
KERNEL kernel-X.Y.Z
APPEND initrd=initrd-X.Y.Z root=/dev/ram0 init=/linuxrc ip=dhcp
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Fazit</title>
<section>
<title>Automatisieren oder nicht automatisieren?</title>
<body>

<p>
Der Sinn von genkernel ist es, einen (einfacheren) alternativen Weg zu der
zeitaufwendigen Kernelkompilation anzubieten. Wie immer haben Sie die freie
Wahl, ob Sie den Kernelkompilationsprozess automatisieren wollen oder nicht.
</p>

</body>
</section>
</chapter>

</guide>
