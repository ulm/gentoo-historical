<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/genkernel.xml,v 1.4 2005/05/24 19:45:27 dertobi123 Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- English CVS Version: 1.13 -->

<guide link="/doc/de/genkernel.xml">
<title>Gentoo Linux genkernel Leitfaden</title>

<author title="Autor">
  <mail link="plasmaroo@gentoo.org">Tim Yamin</mail>
</author>
<author title="Übersetzer">
  <mail link="hendrik@grahli.net">Jan Hendrik Grahl</mail>
</author>
  
<abstract>
Dieser Leitfaden versucht eine Referenz zu liefern für alle Funktionen die von 
genkernel unterstützt werden.
</abstract>

 <license/>

<version>1.1.2</version>
<date>2004-11-05</date>

<chapter>
<title>Einleitung</title>
<section>
<title>Einleitung</title>
<body>

<p>
Genkernel wurde entwickelt um Benutzern, welche bisher nicht daran gewöhnt 
waren einen Kernel zu kompilieren, die Möglichkeit zu geben ein ähnliches 
Setup zu verwenden zu dem, welches auf den Gentoo LiveCDs verwendet wird, 
welches Ihre Hardware automatisch erkennt.
</p>

<p>
Einige Benutzer könnten auch daran interessiert sein genkernel zu benutzen für 
Hardware welche Initialisierung benötigt und einen funktionierenden Kernel 
bevor sie gebootet werden kann. Da genkernel auch automatisch Ihre 
Kernelmodule kompiliert und daher auch die Benutzung von Hardware welche mit 
Modulparametern geladen werden muss ermöglicht.
</p>

</body>
</section>
<section>
<title>Ist genkernel das Richtige für mich?</title>
<body>

<p>
Genkernel ist oft eine gute Wahl für diejenigen, welche nicht geübt sind mit 
der Kompilierung ihres eigenen Kernels oder jene welche sich nicht sicher sind 
über ihre Hardwarekonfiguration.
</p>

<p>
Da genkernel entwickelt wurde eine Standardkonfiguration zu verwenden sollte 
es in der Lage sein alle Ihre Hardware zu unterstützten, jedoch da alle 
Treiber und Module kompiliert werden müssen ist das Kompilieren eines Kernels 
per Hand oft viel schneller vorausgesetzt Sie wissen was Sie benötigen.
</p>

<p>
Genkernel unterstützt jedoch momentan nicht das Booten von LVM2/EVMS2 
Partitionen. Benutzern wird empfohlen momentan einen manuell kompilierten 
Kernel zu verwenden.
</p>

</body>
</section>
<section>
<title>Wie kriege ich genkernel</title>
<body>

<p>
Sie können Gernkernel erhalten indem Sie einfach <c>emerge genkernel</c> 
ausführen. Vergessen Sie nicht das <c>-k</c> Flag für emerge wenn Sie binäre 
Pakete verwenden, d.h. GRP. Da GRP Pakete eine ältere Version von genkernel 
haben sind die Flags unterschiedlich. Deswegen sollten Sie das <uri 
link="doc/de/handbook/handbook-x86.xml?part=1&amp;chap=10">
Gentoo Handbuch</uri> und <path>genkernel --help</path> 
konsultieren.
</p>

</body>
</section>
<section>
<title>Unterstützte Plattformen</title>
<body>

<p>
Seit genkernel 3.0.2 sollten folgende Plattformen unterstützt sein: alpha, 
amd64, parisc, parisc64, ppc, ppc64, sparc, sparc64, und x86. Wenn sie denken, 
dass es einen Fehler im Unterstützungscode und nicht in genkernel gib, dann 
reichen Sie bitte ein Bug im <uri 
link="http://bugs.gentoo.org">Gentoo Bugzilla</uri> ein.
</p>

</body>
</section>
</chapter>

<chapter>
<title>genkernel Benutzung</title>
<section>
<title>Einleitung</title>
<body>

<p>
Genkernel wurde entwickelt um in drei Modi zu funktionieren:
</p>

<ul>
  <li>"all" Modus: dies erstellt den Kernel und das initrd</li>
  <li>"kernel" Modus: dies erstellt nur das Kernel Image</li>
  <li>"initrd" Modus: dies erstellt nur das initrd</li>
</ul>

<p>
Die meisten Benutzer wollen nur den "all" Modus, welcher den "kernel" Modus 
und den "initrd" Modus für Sie ausführt. <b>Beachten</b> Sie, dass momentan 
der "kernel" und "initrd" Modus nur Synonyme für den "all" Modus sind und Sie 
daher momentan keinen besonderen Effekt haben.
</p>

<p>
Obwohl genkernel hauptsächlich ein Befehl ist um Ihnen das Leben einfacher 
zu machen, wenn Sie einen Kernel kompilieren müssen, ist genkernel auch 
vollgestopft mit verschiedenen Flags die es Ihnen ermöglichen Anpassungen 
daran vorzunehmen wie Ihr Kernel kompiliert oder konfiguriert wird.
</p>

</body>
</section>
<section>
<title>genkernel Compiler Flags</title>
<body>

<p>
Genkernel unterstützt die folgenden Flags welche übergeben werden an 
die passenden Anwendungen wenn Ihr Kernel zusammengestellt wird:
</p>

<ul>
  <li>
    <b>--kernel-as=<c>someAssembler</c></b>: Dies spezifiziert einen Assembler 
    der für die Kompilierung des Kernels verwendet werden würde.
  </li>
  <li>
    <b>--kernel-cc=<c>someCompiler</c></b>: Dies spezifiziert einen Compiler 
    welcher für die Kompilierung des Kernels verwendet werden würde.
  </li>
  <li>
    <b>--kernel-ld=<c>someLinker</c></b>: Dies spezifiziert einen Linker 
    welcher für die Kompilierung des Kernels verwendet werden würde.
  </li>
  <li>
    <b>--kernel-make=<c>someMake</c></b>: Dies spezifiziert ein alternatives 
    GNU make welches für die Kompilierung des Kernels verwendet werden würde.
  </li>
</ul>

<ul>
  <li>
    <b>--utils-as=<c>someAssembler</c></b>: Dies spezifiziert einen Assembler 
    der für die Kompilierung der Support Programme verwendet werden würde.
  </li>
  <li>
    <b>--utils-cc=<c>someCompiler</c></b>: Dies spezifiziert einen Compiler 
    der für die Kompilierung der Support Programme verwendet werden würde.
  </li>
  <li>
    <b>--utils-ld=<c>someLinker</c></b>: Dies spezifiziert einen Linker der 
    für die Kompilierung der Support Programme verwendet werden würde.
  </li>
  <li>
    <b>--utils-make=<c>someMake</c></b>: Dies spezifiziert ein alternatives 
    GNU make welches für die Kompilierung der Support Programme verwendet 
    werden würden.
  </li>
</ul>

<ul>
  <li>
    <b>--makeopts=<c>-jJobs</c></b>: Dies spezifiziert die Flags die an GNU 
    make übergeben werden würden wenn der Kernel und die Utilities kompiliert 
    werden.
  </li>
</ul>

</body>
</section>
<section>
<title>genkernel Kernel Flags</title>
<body>

<p>
Genkernel unterstützt die folgenden Flags, einige von ihnen haben 
<c>--<b>no-</b>option</c> Equivalente die die Kernelerstellung beeinflussen:
</p>

<ul>
  <li>
    <b>--callback="echo Hello"</b>: Diese Routine ruft das spezifizierte 
    Argument auf, nachdem der Kernel und die relevanten Module erstellt 
    wurden; jedoch bevor initrd erstellt wurde. Dies ist hilfreich, wenn Sie 
    externe Module im initrd installieren wollen indem Sie die relevanten 
    Gegenstände mit der Callback Funktion emergen und eine genkernel 
    Modulgruppe neu definieren.
  </li>
  <li>
    <b>--<c>no-</c>clean</b>: Dies führt <e>oder führt nicht</e> ein
    <c>make clean</c> vor der Kompilierung Ihres Kernels durch. Hierbei 
    werden alle Objektdateien und Abhängigkeiten entfernt.
  </li>
  <li>
    <b>--<c>no-</c>mrproper</b>: Dies führt <e>oder führt nicht</e> ein 
    <c>make mrporper</c> vor der Kompilierung Ihres Kernels durch. 
    Hierbei werden alle Objektdateien, Abhängigkeiten <e>und Ihre 
    Konfiguration</e> entfernt.
  </li>
</ul>

<ul>
  <li>
    <b>--kerneldir=<path>/pfad/zu/den/quellen</path></b>: Dies spezifiziert 
    einen alternativen Ort für Kernelquellen anstatt des Standardortes 
    <path>/usr/src/linux</path>.
  </li>
  <li>
    <b>--kernel-config=<path>/pfad/zur/konfiguartionsdatei</path></b>: Dies 
    spezifiziert eine alternative Kernelkonfiguration statt der gängigen 
    <path>/pfad/zu/den/quellen/.config</path> welche normalerweise verwendet 
    wird.
  </li>
</ul>

<ul>
  <li>
    <b>--<c>no-</c>bootsplash</b>: Dies fügt <e>oder fügt nicht</e> Bootsplash 
    Unterstützung dem initrd hinzu, welches genkernel erstellt. Nicht alle 
    Architekturen unterstützen momentan Bootsplash und ein Kernel der 
    Bootsplash unterstützt wird auch benötigt.
  </li>
  <li>
    <b>--<c>no-</c>menuconfig</b>: Dies führt <e>oder führt nicht</e> den 
    menü-basierenden Kernelkonfigurator vor der Erstellung des Kernels, 
    nachdem <c>make oldconfig</c> ausgeführt wurde, aus.
  </li>
</ul>

<ul>
  <li>
    <b>--no-initrdmodules</b>: Dies kopiert keine Module in das initrd welches 
    genkernel erstellt.
  </li>
  <li>
    <b>--<c>no-</c>install</b>: Dies installiert <e>oder installiert nicht</e> 
    Ihren Kernel, die Module und das initrd sobald die Kompilierung 
    fertiggestellt wurde.
  </li>
</ul>

</body>
</section>
<section>
<title>Sonstige genkernel Flags</title>
<body>

<p>
Genkernel unterstützt auch einige weitere Flags die in keine der beiden 
anderen Kategorien passen:
</p>

<ul>
  <li>
    <b>--arch-override=<c>someArch</c></b>: Dieses Flag kann verwendet werden 
    um zu überschreiben welche Architektur genkernel verwenden soll, 
    wenn der Auto-Erkennungsmechanismus fehlschlägt (bitte reichen Sie ein Bug 
    ein, wenn es passiert!) oder wenn Sie wünschen ein Cross-Compile für einen 
    Kernel durchzuführen.
  </li>
</ul>

<ul>
  <li>
    <b>--busybox-config=<path>/pfad/zur/busyboxkonfiguration</path></b>: Dies 
    überschreibt die Standardbusyboxkonfiguration mit der spezifzierten Datei.
  </li>
  <li>
    <b>--busybox-bin=<path>/pfad/zu/busybox-binary.tar.bz2</path></b>: 
    Verwendet man diese Option bedeutet dies, dass eine Busybox Binärdatei 
    nicht kompiliert wird und der spezifizierte Tarball benutzt werden würde. 
    Beachten Sie, dass Busybox statisch kompiliert werden <e>muss</e>!
  </li>
</ul>

<ul>
  <li>
    <b>--minkernpackage=<path>/pfad/zu/ihremkernel.tar.bz2</path></b>: Dieses 
    Flag gibt einen Tarball des Kernels, benannt als <path>kernel</path> und 
    das initrd benannt als <path>initrd</path>, zur spezifzierten Datei aus. 
    Keine Pfadinformation oder Module werden im Tarball eingeschlossen sein. 
  </li>
</ul>

</body>
</section>
<section>
<title>Ausführen von genkernel</title>
<body>

<p>
Alles was benötigt wird ist einfach genkernel mit den 
notwendigen Flags als Root auszuführen. Zum Beispiel:
</p>

<pre caption="Ausführen von genkernel">
# genkernel --menuconfig --no-clean --no-install --bootsplash all
<comment>(Würde einen Kernel produzieren, Sie fragen was wie nach Ihren 
Wünschen konfiguriert werden sollte, jegliche kompilierten Objektdateien 
in Ruhe lassen, Bootsplash Unterstützung aktivieren, aber nichts installieren.)
</comment>
</pre>

<p>
Wenn Sie wollen, dass genkernel Ihren Kernel auch installiert, müssen 
Sie sicherstellen, dass Ihre <path>/boot</path> Partition eingebunden ist - 
neuere genkernel werden versuchen dies automatisch für Sie zu erledigen, wenn 
MOUNTBOOT auf "yes" gesetzt wird in <path>/etc/genkernel.conf</path>.
</p>

<pre caption="Manuelles einbinden von /boot">
<comment>(Wenn /boot ein gültiger Eintrag in /etc/fstab ist:)</comment>
# mount /boot
<comment>(...ansonsten für IDE Festplatten:)</comment>
# mount /dev/hda1 /boot
<comment>(...und für SCSI Festplatten:)</comment>
# mount /dev/sda1 /boot
</pre>

</body>
</section>
<section>
<title>genkernel so einstellen, dass es mit Ihren Bootloader funktioniert</title>
<body>

<p>
Drei oder vier Veränderungen an Ihrer Bootloaderkonfigurationen werden 
benötigt, damit genkernel mit Ihrem Bootloader funktioniert. 
</p>

<ol>
  <li>
    Fügen Sie <c>root=/dev/ram0</c> und <c>init=/linuxrc</c> zu den 
    Kernelparametern, die an das Kernelimage übergegeben werden, hinzu.
  </li>
  <li>
    Fügen Sie zum Beispiel <c>real_root=/dev/hda3</c> zu den Kernelparametern, 
    welche an das Kernelimage übergeben werden, hinzu, wenn 
    <path>/dev/hda3</path> Ihre Root Partition enthält.
  </li>
  <li>
    Wenn Sie Bootsplash verwenden, fügen Sie eine passende Moduszeile wie 
    <c>vga=0x317</c> zu den Kernelparametern, die an das Kernelimage übergeben 
    werden, hinzu. Außerdem noch <c>splash=verbose</c> oder 
    <c>splash=silent</c> abhängig von der Detailreiche die Sie von Ihrem 
    Bootsplash benötigen.
  </li>
  <li>
    Fügen Sie das initrd hinzu so wie Ihr Bootloader es benötigt. Betrachten 
    Sie das <uri 
    link="/doc/de/handbook/handbook-x86.xml?part=1&amp;chap=10">
    Gentoo Handbuch</uri> für Details wie Sie dies bei Ihrem Bootloader tun 
    würden.
  </li>
</ol>

</body>
</section>
<section>
<title>Kernel Konfigurationsdateien</title>
<body>
<p>
Genkernel wird Ihre Kernelkonfiguration in <path>/etc/kernels</path> speichern 
und diese jedes mal verwenden, wenn Sie <c>genkernel</c> ausführen. Wenn Sie 
wieder mit den Standardeinstellungen starten wollen, benennen Sie einfach die 
Datei in <path>/etc/kernels</path> um. Genkernel wird dann die 
Kernelkonfiguration in <path>/usr/share/genkernel/&lt;arch&gt;</path> 
stattdessem benutzen.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Portieren von genkernel</title>
<section>
<title>Einleitung</title>
<body>

<p>
Vorausgesetzt Ihre Architektur hat alle benötigten Bibliotheken und Utilities 
welche genkernel benötigt, dies beinhaltet, ist aber nicht begrenzt auf, einen 
funktionierenden Kernel für Ihre Architektur, eine funktionierende 
Compiler-Suite, GNU make und eine funktionierende Busybox Distribution, dann 
kann es losgehen!
</p>

<p>
Für jede Architektur verwendet genkernel 
<path>/usr/share/genkernel/$archName</path> für Konfigurationsdateien für 
diese Architektur.
</p>

</body>
</section>
<section>
<title>Wie das Bootstrapping des Systems funktioniert</title>
<body>

<ol>
  <li>
    Der Bootloader lädt das genkernel Image, erstellt nach den Spezifikationen 
    der Konfigurationsdateien in den genkernel Verzeichnissen sowie das 
    initrd, welches von genkernel vorbereitet wird.
  </li>
  <li>
    Der Kernel bootet, belegt einen kleinen Bereich von RAM in dem Busybox 
    initialisert wird, welches das System auskundschaftet mit den Modulen in 
    der modules_load Liste für die Architektur.
  </li>
  <li>
   Einmal fertiggestellt und vorausgesetzt, dass der <c>real_root</c> 
   Parameter welcher das Root Boot Gerät ist, soweit es Busybox betrifft, 
   gefunden worden ist, wird das System von dem Gerät gebootet.
  </li>
</ol>

</body>
</section>
<section>
<title>Die Konfigurationsdateien</title>
<body>

<ul>
  <li>
    <path>busy-config</path>: Dies ist die Konfiguration welche benutzt wird 
    um Busybox für Ihre Architektur zu erstellen.
  </li>
  <li>
    <path>config.sh</path>: Dies ist ein Shell Script, welches zahlreiche 
    interne genkernel Variablen setzt. Betrachten Sie eine der 
    <path>config.sh</path> Dateien für ein Beispiel.
  </li>
  <li>
    <path>modules_load</path>: Dies ist eine Datei welche eine Liste ohne 
    Leerzeichen enthält von Modulen welche für SCSI, FireWire, ATARAID und 
    PCMCIA Unterstützung geladen werden. Wenn keine vorhanden sind für Ihre 
    Plattform, lassen Sie die Felder leer. Betrachten Sie eine der 
    <path>modules_load</path> Dateien für ein Beispiel.
  </li>
</ul>

<ul>
  <li>
    <path>kernel-config</path>: Eine Standardkernelkonfiguration für jede 
    Kernelversion
  </li>
  <li>
    <path>kernel-config-2.4</path>: Eine Standardkernelkonfiguration für die 
    2.4 Kernelserie
  </li>
  <li>
    <path>kernel-config-2.6</path>: Eine Standardkernelkonfiguration für die 
    2.6 Kernelserie
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
