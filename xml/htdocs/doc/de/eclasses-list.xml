<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/Attic/eclasses-list.xml,v 1.3 2004/10/16 19:45:14 vapier Exp $ -->

<!-- English CVS Version 1.4 -->

<guide link = "/doc/de/eclasses-list.xml">
<title>Liste der Eclasses in Gentoo</title>
<author title="Author">
  <mail link="zhware@gentoo.org">Stoyan Zhekov</mail>
</author>
<author title="Translator">
  <mail link="SirSeoman@gentoo.org">Tobias Matzat</mail>
</author>

<abstract>
Diese Anleitung beschreibt die im Gentoo Portage enthaltenen Eclasses.
</abstract>

<version>1.1</version>
<date>26. Oktober 2003</date>

<chapter>
<title>aspell-dict.eclass</title>
<section>
<body>

<p>
Die aspell-dict.eclass wurde erstellt, um die Entwicklung von Ebuilds für
die neuen aspell Wörterbücher (von <uri>http://www.gnu.org/</uri>) zu
vereinheitlichen.
</p>

</body>
</section>
</chapter>

<chapter>
<title>autotools.eclass</title>
<section>
<body>

<p>
Die autotools.eclass gestattet die Entwicklung von Programmen, die die
neuesten Versionen von autconf/automake benötigen.
</p>

<note>
Diese Eclass wurde erstellt, um Inkompatibilitätsprobleme zwischen
autoconf-2.13 und autoconf-2.5x auf der einen Seite und automake-1.4x
und automake-1.5x auf der anderen Seite zu überbrücken. Die meisten
Pakete benötigen autoconf-2.13 und automake-1.4x, können aber wegen
der Inkompatibilitäten nicht mit den neuesten Versionen dieser Pakete
arbeiten. Folglich haben wir ein Prolem, wenn ein Paket die neuesten
Versionen von automake und autoconf braucht.
</note>

<p>
Kommentiertes Beispiel:
</p>

<pre>
   # Copyright 1999-2004 Gentoo Foundation
   # Distributed under the terms of the GNU General Public License v2
   # Maintainer:  John Doe &lt;john@foo.com&gt;
   # $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/Attic/eclasses-list.xml,v 1.3 2004/10/16 19:45:14 vapier Exp $
#
   # Sollten Sie von hier abweichende Versionen setzen wollen, *muss* dies getan
   # werden, bevor inherit.eclass gesourced wird
   #ACONFVER=2.52f
   #AMAKEVER=1.5b
#
   # Source inherit.eclass und inherit AutoTools
   . /usr/portage/eclass/inherit.eclass
   inherit autotools
#
   # Das ist alles Standard.
   S=${WORKDIR}/${P}
   DESCRIPTION="My Application"
#
   # Hier *müssen* Sie $SRC_URI als Quell-URL haben um automake und autoconf
   # Quellcode-Tarballs mit einzubeziehen
   SRC_URI="${SRC_URI}
            http://download.foo.com/files/${P}.tar.gz"
#
   HOMEPAGE="http://www.foo.com/"
#
   # Hier *müssen* Sie "$DEPEND" als Abhängigkeit haben, um alle
   # Abhängigkeiten von automake und autoconf mit einzubeziehen.
   DEPEND="${DEPEND}
           foo-libs/libfoo"
#
   src_compile() {
#
       # Dies wird automake und autoconf in einem temporären Verzeichnis
       # installieren und die Umgebung einrichten. Vergessen Sie das nicht!!!!!!!
       install_autotools
#
       # Nun ganz normal
       ./configure --host=${CHOST} \
                   --prefix=/usr || die
       emake || die
   }
#
   src_install() {
#
       # Immer noch alles Standard, genau wie Sie es normalerweise machen
       make DESTDIR=${D} install || die
       dodoc AUTHORS COPYING ChangeLog INSTALL NEWS README TODO
   }
</pre>

</body>
</section>
</chapter>

<chapter>
<title>base.eclass</title>
<section>
<body>

<p>
Die base.eclass definiert einige Standardfunktionen und -variablen. Fast alle
anderen erben von hier.
</p>

</body>
</section>
</chapter>

<chapter>
<title>commonbox.eclass</title>
<section>
<body>

<p>
Die commonbox.eclass wurde dazu konstruiert, um einfachere Installationen
von Box Window-Managern wie blackbox, fluxbox oder commonbox zu
ermöglichen. Die Standard-Utilities dieser Window-Manager werden in der
Commonbox-Utils Abhängigkeit installiert und die Standardstile in der
Commonbox-Style Utility. Sie alle teilen sich nun das
<path>/usr/share/commonbox</path> Verzeichnis.
</p>

</body>
</section>
</chapter>

<chapter>
<title>cvs.eclass</title>
<section>
<body>

<p>
Dieses Eclass stellt die allgemeinen CVS-Funktionen zum "Abholen" zur
Verfügung.
</p>

</body>
</section>
</chapter>

<chapter>
<title>debug.eclass</title>
<section>
<body>

<p>
Eine allgemeine DEBUG Eclass, um die Einbeziehung von Debug-Informationen
zu vereinfachen und "schlechte" USE-Flags von <c>CFLAGS</c> zu entfernen.
</p>

</body>
</section>
</chapter>

<chapter>
<title>distutils.eclass</title>
<section>
<body>

<p>
Das distutils.eclass wurde dazu konstruiert, um eine einfachere Installation von
auf distutils-basierenden Python-Modulen und deren Eingliederung in das
Gentoo Linux-System zu ermöglichen.
</p>

</body>
</section>
</chapter>

<chapter>
<title>ebook.eclass</title>
<section>
<body>

<p>
Die ebook.eclass definiert einige Standardfunktionen und -variablen um
Ebooks zu installieren.
</p>

</body>
</section>
</chapter>

<chapter>
<title>elisp.eclass</title>
<section>
<body>

<p>
Diese Eclass setzt das "site-lisp"-Verzeichnis für Pakete, die mit dem
Emacs-Paket verbunden sind.
</p>

</body>
</section>
</chapter>

<chapter>
<title>eutils.eclass</title>
<section>
<body>

<p>
Diese Eclass ist für allgemeine Funktionen, die die meisten Ebuilds zu
implementieren haben.
</p>

</body>
</section>
</chapter>

<chapter>
<title>flag-o-matic.eclass</title>
<section>
<body>
</body>
</section>
</chapter>

<chapter>
<title>games.eclass</title>
<section>
<body>

<p>
Das ist das Games-Ebuild, um die Installation von Spielen zu standardisieren...
Sie haben besser einen *guten* Grund, die games.eclass nicht in einem Ebuild
in app-games zu nutzen.
</p>

</body>
</section>
</chapter>

<chapter>
<title>gcc.eclass</title>
<section>
<body>

<p>
Diese Eclass enthält (oder sollte enthalten) Funktionen um allgemeine
Informationen über den gcc zu bekommen.
</p>

</body>
</section>
</chapter>

<chapter>
<title>gnome.org.eclass</title>
<section>
<body>

<p>
Gnome Eclass. Hauptsächlich <c>SRC_URI</c> Einstellungen.
</p>

</body>
</section>
</chapter>

<chapter>
<title>gnome2.eclass</title>
<section>
<body>
</body>
</section>
</chapter>

<chapter>
<title>gnuconfig.eclass</title>
<section>
<body>

<p>
Diese Eclass aktualisiert config.guess und config.sub. Das ist hilfreich, falls
das Konfigurieren wegen eines falschen Systemnamens (<c>CHOST</c>)
fehlschlägt.
</p>

</body>
</section>
</chapter>

<chapter>
<title>gtk-engines.eclass</title>
<section>
<body>

<p>
Das gtk-engines.eclass wird von allen gtk-engines-* Ebuilds geerbt.
</p>

</body>
</section>
</chapter>

<chapter>
<title>inherit.eclass</title>
<section>
<body>

<note>
Diese Eclass muss existieren, da ohne es ältere installierte Pakete, die
die alte Vererbungsmethode nutzen, nicht mehr deinstalliert werden können.
Wie dem auch sei, es muss keine Codezeilen enthalten :-)
</note>

</body>
</section>
</chapter>

<chapter>
<title>java.eclass</title>
<section>
<body>
</body>
</section>
</chapter>

<chapter>
<title>kde-base.eclass</title>
<section>
<body>

<p>
Dies ist das KDE-Ebuild für Standard KDE-abhängige Programme, die
<c>configure/make/make install</c> Prozeduren folgen und einige
Standardkonfigurationsoptionen besitzen.
</p>

</body>
</section>
</chapter>

<chapter>
<title>kde-dist.eclass</title>
<section>
<body>

<p>
Dies ist die kde-dist.eclass für >=2.2.1 kde-basierende Pakete. Trotzdem nicht
für kdelibs nutzen :-)
</p>

<warn>
Benutzen Sie sie nicht für z.B. kdevelop oder koffice, wegen deren getrennten
Versionsplänen.
</warn>

</body>
</section>
</chapter>

<chapter>
<title>kde-functions.eclass</title>
<section>
<body>

<p>
Dieses enthält alles, bis auf Dinge, die Ebuild-Variablen oder -Funktionen
ändern (e.g. <c>$P</c>, <c>src_compile()</c> etc.).
</p>

</body>
</section>
</chapter>

<chapter>
<title>kde-i18n.eclass</title>
<section>
<body>
</body>
</section>
</chapter>

<chapter>
<title>kde-patch.eclass</title>
<section>
<body>

<p>
Dieses wendet selbstgemachte Patches vom Tarball auf ein zu spezifizierendes
Ziel an.
</p>

</body>
</section>
</chapter>

<chapter>
<title>kde-pre.eclass</title>
<section>
<body>

<p>
Dies ist für KDE-Vorveröffentlichungen (alpha, beta etc.), die einen
_(Unterstrich) in ihrem Portage Ebuild Namen haben, aber nicht in
ihrem Quellverzeichnissen und - archiven. Wird vererbt, nachdem
<c>SRC_URI</c> und <c>WORKDIR</c> gesetzt wurde.
</p>

</body>
</section>
</chapter>

<chapter>
<title>kde-source.eclass</title>
<section>
<body>

<p>
Diese ist für kde-base cvs Ebuilds. Lesen Sie die Kommentare über
Einstellungen. Sie benutzt <c>$S</c> und setzt <c>$SRC_URI</c>,
also "erben" Sie es so spät wie möglich (auf jeden Fall nach jedem anderen
Eclass). Schauen Sie unter
<uri>http://www.gentoo.org/~danarmak/kde-cvs.html</uri>
nach! Die wirkliche Funktonalität liegt in <c>cvs.eclass</c>;
Diese hier fügt lediglich einige triviale kde-spezifische Dinge hinzu.
</p>

</body>
</section>
</chapter>

<chapter>
<title>kde.eclass</title>
<section>
<body>

<p>
Das kde.eclass wird von allen kde-* Eclasses geerbt. Wenige Ebuilds
erben direkt von hier.
</p>

</body>
</section>
</chapter>

<chapter>
<title>kde.org.eclass</title>
<section>
<body>

<p>
Enthält die Seiten der <uri>ftp://ftp.kde.org/</uri> Pakete und deren Mirrors.
</p>

</body>
</section>
</chapter>

<chapter>
<title>kernel.eclass</title>
<section>
<body>

<p>
Diese Eclass enthält allgemeine Funktionen, die von allen auf lostlogic
basierenden Kernel-Ebuilds benutzt werden können.
</p>

</body>
</section>
</chapter>

<chapter>
<title>kmod.eclass</title>
<section>
<body>

<p>
Die Basis-Eclass definiert einige Standardfunktionen und -variablen.
Fast alle anderen erben von hier.
</p>

</body>
</section>
</chapter>

<chapter>
<title>koffice-i18n.eclass</title>
<section>
<body>
</body>
</section>
</chapter>

<chapter>
<title>latex-package.eclass</title>
<section>
<body>

<p>
Diese Eclass wurde zur einfachen Benutzung und Implementierung erstellt.
Die weite Mehrheit von LaTeX Paketen muss nur <c>SRC_URI</c> (und
manchmal <c>$S</c>) definieren, um erfolgreich installiert zu werden.
Falls Fonts benötigt werden, muss auch die Variable <c>SUPPLIER</c>
definiert werden.

Wie dem auch sei, die Pakete, die Unterverzeichnisse enthalten, müssen jedes
Unterverzeichnis separat bearbeiten. Z.B. ein Paket, welches die
Verzeichnisse <path>DIR1</path> und <path>DIR2</path> enthält, muss
<c>latex-package_src_compile()</c> und <c>latex-package_src_install()</c>
in jedem Verzeichnis aufrufen, wie hier zu sehen:
</p>

<pre>
src_compile() {
   cd ${S}
   cd DIR1
   latex-package_src_compile
   cd ..
   cd DIR2
   latex-package_src_compile
}

src_install() {
   cd ${S}
   cd DIR1
   latex-package_src_install
   cd ..
   cd DIR2
   latex-package_src_install
}
</pre>

<p>
Das Eclass übernimmt nach einer Installation oder Deinstallation automatisch
das Rehashing des Tex-Caches (ls-lR), genauso wie es die endgültige
Dokumentation der Tex-Dateien erstellt, die mit dem Quelltext kommen.
Beachten Sie bitte, dass wir Tex Layout-Standards nicht beachten, indem wir
die Dokumentation in <path>/usr/share/doc/${PN}</path> speichern.

Für Beispiele von einfachen Installationen, sehen Sie bitte unter
<c>app-text/latex-aastex</c> und <c>app-text/latex-leaflet</c> nach.
</p>

<note>
Die CTAN "verzeichnis-greif" Funktion erstellt JEDES MAL Dateien mit
verschiedenen MD5-Signaturen. Aus diesem Grund, falls Sie etwas von CTAN
wollen, müssen Sie entweder jede Datei einzeln greifen oder einen Mirror finden,
wo Sie ein Archiv erstellen können. (iBiblio)
</note>

</body>
</section>
</chapter>

<chapter>
<title>libtool.eclass</title>
<section>
<body>

<p>
Diese Eclass patched <c>ltmain.sh</c>, die mit libtoolized Paketen verteilt wird,
mit dem Relink- und Portage-Patch.
</p>

</body>
</section>
</chapter>

<chapter>
<title>makeedit.eclass</title>
<section>
<body>

<p>
Das makeedit.eclass entfernt <c>-Wreturn-type</c> und <c>-Wall</c> von der
Kompilierung; dies soll den Verbrauch an Arbeitsspeicher verringern.
</p>

</body>
</section>
</chapter>

<chapter>
<title>mount-boot.eclass</title>
<section>
<body>
</body>
</section>
</chapter>

<chapter>
<title>nsplugins.eclass</title>
<section>
<body>

<p>
Nur einige wiederverwendbare Funktionen für das Teilen von netscape/moz Plugins.
</p>

</body>
</section>
</chapter>

<chapter>
<title>perl-module.eclass</title>
<section>
<body>

<p>
Das perl-module.eclass wurde erstellt, um einfachere Installationen von
Perl-Modulen und deren Integration in das Gentoo Linux-System zu
ermöglichen.
</p>

</body>
</section>
</chapter>

<chapter>
<title>perl-post.eclass</title>
<section>
<body>

<p>
Das perl-post.eclass wurde erstellt, um die
<path>${installarchdir}/perllocal.pod</path>
Datei sauber upzudaten nachdem Perl und/ oder Perl-Module installiert oder
deiinstalliert wurden.
</p>

</body>
</section>
</chapter>

<chapter>
<title>vim.eclass</title>
<section>
<body>

<p>
Genommen von den vim Ebuilds. src_compile und install sollten irgendwo
integriert werden.
</p>

</body>
</section>
</chapter>

<chapter>
<title>virtualx.eclass</title>
<section>
<body>

<p>
Diese Eclass kann von Paketen genutzt werden, die eine laufende X-Umgebung
zum Erstellen benötigen.
</p>

</body>
</section>
</chapter>
</guide>
