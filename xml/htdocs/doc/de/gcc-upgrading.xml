<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/gcc-upgrading.xml,v 1.9 2013/02/25 20:35:25 keytoaster Exp $ -->
<!-- English CVS Version: 1.29 -->
<!-- On updating: Update to 1.30; rename with 1.31 to gcc-upgrading-upto-4.1.xml; see history -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide lang="de">
<title>Gentoo GCC-Aktualisierungsanleitung</title>

<author title="Autor">
  <mail link="amne@gentoo.org">Wernfried Haas</mail>
</author>
<author title="Autor">
  <mail link="jkt@gentoo.org">Jan Kundrát</mail>
</author>
<author title="Bearbeiter">
  <mail link="halcy0n" />
</author>
<author title="Bearbeiter">
  <mail link="nightmorph" />
</author>
<author title="Übersetzer">
  <mail link="stefansusenet@nurfuerspam.de">Stefan Kienzl</mail>
</author>
<author title="Übersetzer">
  <mail link="keytoaster@gentoo.org">Tobias Heinlein</mail>
</author>

<abstract>
Dieses Dokument führt den Benutzer durch den Prozess einer GCC-Aktualisierung.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>23</version>
<date>2008-07-19</date>

<chapter id="intro">
<title>Einführung</title>
<section>
<title>Aktualisierung von GCC</title>
<body>

<p>
Wieso sollten Sie aktualisieren? Nun ja, GCC ist jedem anderen Paket auf Ihrem
System sehr ähnlich, nur etwas kritischer. Wann immer eine neue Version Fehler
beseitigt, die Sie stören, neue Funktionen, die Sie benötigen bereitstellt oder
Sie einfach nur aktuell bleiben möchten, sollten Sie GCC aktualisieren. Sollte
keiner dieser Fälle auf Sie zutreffen, können Sie die Aktualisierung so lange
aufschieben, solange Ihre GCC-Version von den Gentoo Entwicklern unterstützt
wird.
</p>

<p>
Wenn Sie eine neue Hauptversion von GCC installieren (wie von 3.3.6 auf 3.4.5),
wird das System diese nicht automatischen benutzen. Sie müssen den Wechsel
selbst veranlassen, da die Umstellung einige weitere Schritte benötigen kann.
Falls Sie sich dazu entscheiden, nicht zu wechseln, wird Portage weiterhin die
alte Version verwenden, außer Sie entscheiden sich zu wechseln oder löschen den
alten Compiler von Ihrem System. Bei Aktualisierungen von Unterversionen von
GCC (wie von 3.4.5 auf 3.4.6) wird automatisch für Sie gewechselt.
</p>

<p>
Diese Anleitung beschreibt die nötigen Schritte um eine nahtlose Aktualisierung
des von Gentoo benutzten Compilers durchzuführen. Ein Abschnitt widmet sich der
<uri link="#upgrade-3.3-to-3.4">Aktualisierung von GCC 3.3 auf 3.4</uri> und
Problemen mit <c>libstdc++</c>. Ein weiterer Abschnitt ist spezifisch für
Benutzer einer <uri link="#first-install">Gentoo Erstinstallation</uri> mit
einem stage3-Tarball, nachdem eine neue GCC-Version veröffentlicht wurde.
</p>

<warn>
Beachten Sie, dass das Aktualisieren von GCC-3.4 (oder 3.3) auf GCC-4.1 oder
höher nach wie vor die <uri link="#upgrade-general">generellen
Aktualisierensanweisung</uri> benötigt, da GCC-3.4 und GCC-4.1 leicht
unterschiedliche ABIs verwenden.
</warn>

</body>
</section>
</chapter>

<chapter id="upgrade-general">
<title>Generelle Aktualisierungsanleitung</title>
<section>
<title>Einführung</title>
<body>

<impo>
Falls Sie nach Anweisungen speziell für das Aktualisieren von GCC-3.3 auf
GCC-3.4 suchen, konsultieren Sie bitte <uri link="#upgrade-3.3-to-3.4">diesen
Abschnitt</uri>.
</impo>

<impo>
Falls Sie nach Anweisungen speziell für das Aktualisieren von GCC bei einer
neuen Installation suchen, konsultieren Sie bitte <uri
link="#first-install">diesen Abschnitt</uri>.
</impo>

<p>
Generell gesagt, Aktualisieren auf <e>Bug-Fix-Releases</e> wie zum Beispiel von
3.3.5 auf 3.3.6 sollte sicher sein -- emergen Sie einfach die neue Version,
wechseln auf diese und erstellen Sie das einzig betroffene Paket,
<c>libtool</c>, neu. Allerdings brechen einige Aktualisierungen von GCC binäre
Kompatibilität; in solchen Fällen kann ein erneutes Erstellen der betroffenen
Pakete (oder sogar der gesamten Toolchain und des Systems) erforderlich sein.
</p>

<p>
Als wir über die Notwendigkeit des Wechsels auf den neuen Compiler von Hand
gesprochen haben, haben wir gesagt, das wird nicht automatisch erfolgen.
Allerdings gibt es eine Ausnahme -- Upgrades auf Bug-Fix-Releases, wie von
3.3.5 auf 3.3.6 für den Fall, dass Sie das "multislot" Feature, das es beiden
Versionen erlaubt auf einem System zu existieren, nicht verwenden. Multislot
ist standardmäßig deaktiviert und die Mehrheit der Benutzer werden keinen
Vorteil von dieser Funktion haben.
</p>

<pre caption="GCC aktualisieren">
# <i>emerge -uav gcc</i>

<comment>(Bitte ersetzen Sie "i686-pc-linux-gnu-4.1.1" mit der GCC-Version und
den CHOST-Einstellungen auf die Sie aktualisiert haben:) </comment>
# <i>gcc-config i686-pc-linux-gnu-4.1.1</i>
# <i>env-update &amp;&amp; source /etc/profile</i>

<comment>Falls Sie von gcc 3 auf 4 aktualisiert haben (z.B. von 3.4.6 auf 4.1.1
in diesem Beispiel) müssen Sie fix_libtool_files.sh manuell ausführen</comment>
<comment>(Ersetzen Sie $CHOST mit Ihrem eigentlichen CHOST, welcher in der
/etc/make.conf zu finden ist)</comment>
<comment>(Ersetzen Sie &lt;gcc-version&gt; mit Ihrer neuen, aktualisierten
GCC-Version)</comment>
# <i>/usr/share/gcc-data/$CHOST/&lt;gcc-version&gt;/fix_libtool_files.sh 3.4.6</i>

<comment>(libtool neu erstellen)</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
Um sicherzugehen, dass das System in einem gesunden Zustand ist, <e>müssen</e>
Sie die Toolchain und danach world neu bauen um den neuen Compiler zu nutzen.
</p>

<pre caption="System neu erstellen">
# <i>emerge -eav system</i>
# <i>emerge -eav world</i>
</pre>

<p>
Ab diesem Zeitpunkt ist es sicher, die alte GCC-Version zu löschen. Falls Sie
das Bedürfnis haben, führen Sie bitte den folgenden Befehl aus (ersetzen Sie
wie üblich <c>=sys-devel/gcc-3.4*</c> durch die Version die Sie löschen
möchten):
</p>

<pre caption="Alte GCC-Version löschen">
# <i>emerge -aC =sys-devel/gcc-3.4*</i>
</pre>

<impo>
Beachten Sie bitte, dass GCC-4.1 und neuer nur Kernel neuer als 2.4.34
kompilieren kann. Entfernen Sie Ihre alte GCC-Version nicht, wenn Sie
einen älteren Kernel verwenden wollen.
</impo>

<impo> <!-- FIXME: do we really want to keep it here? -->
Für den Fall, dass Sie von GCC-3.3 aktualisieren, sollten Sie <c>emerge
--oneshot sys-libs/libstdc++-v3</c> ausführen um Kompatibilität mit älteren
binären C++ Anwendungen zu gewährleisten.
</impo>
</body>
</section>
</chapter>

<chapter id="upgrade-3.3-to-3.4">
<title>Aktualisieren von GCC-3.3 auf -3.4</title>
<section>
<title>Einführung</title>
<body>

<p>
Die Aktualisierung von GCC-3.3 auf -3.4 ist nicht so nahtlos, da sich die C++
ABI zwischen diesen beiden Versionen geändert hat. Außerdem gibt es ein Problem
mit der <c>libstdc++</c> Bibliothek auf das ebenfalls Rücksicht genommen werden
muss.
</p>

</body>
</section>
<section id="upgrade-3.3-to-3.4-choices">
<title>Die Möglichkeiten</title>
<body>

<impo>
Falls Sie von gcc-3.4 auf -4.1 aktualisieren, konsultieren Sie bitte die <uri
link="#upgrade-general">generelle Aktualisierungsanleitung</uri>.
</impo>

<impo>
Falls Sie auf einem SPARC-Rechner aktualisieren, müssen Sie den Weg des <uri
link="#upgrade-3.3-to-3.4-emerge-e">kompletten Systemneubaus</uri> aufgrund von
internen <uri link="http://gcc.gnu.org/gcc-3.4/sparc-abi.html">ABI
Änderungen</uri> beim Analysieren von GCC Parametern, gehen.
</impo>

<p>
Falls Sie von gcc-3.3 auf -3.4 aktualisieren, haben Sie zwei Möglichkeiten Ihr
System zu aktualisieren. Die <uri
link="#upgrade-3.3-to-3.4-revdep-rebuild">erste Methode</uri> ist schneller und
benötigt die Verwendung des <c>revdep-rebuild</c> Tools des <c>gentoolkit</c>
Pakets während die <uri link="#upgrade-3.3-to-3.4-emerge-e">zweite
Methode</uri> das komplette System von Grund auf neu baut um die neuen
Funktionen von GCC zu verwenden. Es bleibt Ihnen überlassen, für welche der
beiden Varianten Sie sich entscheiden. In den meisten Fällen ist die erste
Methode ausreichend.
</p>

<p>
Falls Sie von gcc 3.3-auf -4.1 aktualisieren, sollten Sie nicht die Methode,
die auf revdep-rebuild basiert benutzen, sondern machen Sie einen kompletten
<uri link="#upgrade-3.3-to-3.4-emerge-e">Neubau des System</uri>.
</p>



</body>
</section>
<section id="upgrade-3.3-to-3.4-revdep-rebuild">
<title>revdep-rebuild verwenden</title>
<body>

<p>
Die erste Methode verlangt, dass Sie zuerst <c>gentoolkit</c> installieren,
sollten Sie das nicht schon getan haben. Danach werden wir GCC aktualisieren
und zur neuen Version wechseln. Wir werden auch das <c>libtool</c> Paket neu
bauen, um sicher zu gehen, dass die Toolchain in einem ordentlichen Zustand
ist.
</p>

<pre caption="Installation von gentoolkit und Aktualisierung von GCC">
# <i>emerge -an gentoolkit</i>
# <i>emerge -uav gcc</i>
<comment>(Bitte ersetzen Sie "i686-pc-linux-gnu-3.4.5" mit der GCC-Version
und den CHOST-Einstellungen auf die Sie aktualisieren:)</comment>
# <i>gcc-config i686-pc-linux-gnu-3.4.5</i>
# <i>source /etc/profile</i>

<comment>(libtool neu bauen)</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
Jetzt wollen wir sehen, welche Pakete revdep-rebuild neu bauen will. Danach
werden wir revdep-rebuild sagen, dass es diese Pakete neu bauen soll. Das wird
eine Weile dauern, also haben Sie etwas Geduld.
</p>

<pre caption="Verwendung von revdep-rebuild">
# <i>revdep-rebuild --library libstdc++.so.5 -- -p -v</i>
# <i>revdep-rebuild --library libstdc++.so.5</i>
</pre>

<note>
Es ist möglich, dass Sie Probleme mit nicht existierenden Paketversionen haben,
da diese eventuell veraltet oder maskiert sind. Sollte das der Fall sein,
verwenden Sie die <c>--package-names</c> Option von <c>revdep-rebuild</c>. Das
veranlasst, dass die Pakete basierend auf dem Paketnamen, anstatt des genauen
Namens und der Version, neu gebaut werden.
</note>

<p>
Um die Kompatibilität zu älteren C++ Binärapplikationen und Paketen die
revdep-rebuild ausgelassen hat zu erhalten, muss <c>sys-libs/libstdc++-v3</c>
emerged werden, bevor Sie GCC-3.3 von Ihrem System entfernen.
</p>

<pre caption="libstdc++-v3 installieren und aufräumen">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
# <i>emerge -aC =sys-devel/gcc-3.3*</i>
</pre>

</body>
</section>
<section id="upgrade-3.3-to-3.4-emerge-e">
<title>emerge -e verwenden</title>
<body>

<p>
Diese Methode, obwohl um einiges langsamer, wird Ihr gesamtes System neu bauen,
um sicherzustellen, dass Alles mit Ihrem neuen Compiler neu gebaut wurde und ist
daher viel sicherer. Zuerst aktualisieren Sie GCC und libtool und wechseln zu
Ihrem neuen Compiler.
</p>

<pre caption="GCC aktualisieren">
# <i>emerge -uav gcc</i>
<comment>(Bitte ersetzen Sie "i686-pc-linux-gnu-3.4.5" mit der GCC-Version und
den CHOST-Einstellungen auf die Sie aktualisiert haben:)</comment>
# <i>gcc-config i686-pc-linux-gnu-3.4.5</i>
# <i>source /etc/profile</i>

<comment>Falls Sie von gcc 3 auf 4 aktualisiert haben (z.B. von 3.4.6 auf 4.1.1
in diesem Beispiel) müssen Sie fix_libtool_files.sh manuell ausführen</comment>
<comment>(Ersetzen Sie $CHOST mit Ihrem eigentlichen CHOST, welcher in der
/etc/make.conf zu finden ist)</comment>
<comment>(Ersetzen Sie &lt;gcc-version&gt; mit Ihrer neuen, aktualisierten
GCC-Version)</comment>
# <i>/usr/share/gcc-data/$CHOST/&lt;gcc-version&gt;/fix_libtool_files.sh 3.3.6</i>

<comment>(libtool neu bauen)</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
Um die Kompatibilität mit älteren C++ Binärapplikationen zu gewährleisten, muss
<c>sys-libs/libstdc++-v3</c> auf Ihrem System installiert werden.
</p>

<pre caption="libstdc++-v3 installieren">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
</pre>

<p>
Jetzt werden wir dazu übergehen, zuerst das system-Ziel und dann das world-Ziel
neu zu bauen. Das wird sehr lange dauern, abhängig von der Anzahl der Pakete die
Sie installiert haben, da es Ihre komplette Toolchain und unterstützenden
Systemdateien neu erstellen wird, gefolgt von jedem Paket auf Ihrem System,
inklusive der Toolchain. Das ist nötig, um sicher zu stellen, dass alle Pakete
mit dem neuen Compiler gebaut wurden, inklusive der Toolchain selbst.
</p>

<pre caption="system und world neu bauen">
# <i>emerge -e system</i>
# <i>emerge -e world</i>
</pre>

<p>
Ab diesem Zeitpunkt ist es sicher, alte GCC-Versionen zu entfernen:
</p>

<pre caption="Aufräumen">
# <i>emerge -aC =sys-devel/gcc-3.3*</i>
</pre>

</body>
</section>
</chapter>

<chapter id="first-install">
<title>Aktualisieren von GCC bei einer Erstinstallation</title>
<section>
<title>Einführung</title>
<body>

<p>
Eine GCC-Aktualisierung auf einem System nach einer stage3-Tarball-Installation
ist eine einfache Angelegenheit. Ein Vorteil die Benutzer einer neuen
Installation haben, ist, dass diese nicht massenhaft Software installiert
haben, die gegen die alte Version von GCC gelinkt ist. Das folgende Beispiel
ist für eine GCC-3.3 auf -3.4 Aktualisierung. Einige Abschnitte sind eventuell
unterschiedlich falls Sie von anderen Versionen aktualisieren. Zum Beispiel die
benutzten Bibliothekennamen von <c>revdep-rebuild</c> unter GCC-3.3 im
speziellen, sowie der Bedarf <c>libstdc++-v3</c> zu installieren.
</p>

<p>
Wenn ein Benutzer an seinem System noch keine Änderungen vorgenommen hat, sind
es nur einige wenige Schritte um das System auf eine neue GCC Version zu
aktualisieren. Wie bei der GCC-3.3 auf -3.4 Aktualisierung hat der Benutzer
einige Möglichkeiten. Allerdings ist die Aktualisierung von GCC-3.4 auf -3.4
weniger kompliziert, da es hier geringere Unterschiede zwischen den Methoden
gibt. Die <uri link="#first-install-revdep-rebuild">erste Methode</uri> ist
schneller und benutzt das <c>revdep-rebuild</c> Werkzeug von <c>gentoolkit</c>,
gleich wie das obige Verfahren. Die Benutzung von revdep-rebuild bewirkt nur
das neu Bauen von Paketen die gegen GCC-Bibliotheken gelinkt sind, während die
<uri link="#first-install-emerge-e">zweite Methode</uri> Ihre ganze neue
Installation mit der neuen GCC-Version neu kompiliert und dauert daher viel
länger. Die zweite Methode ist nie notwendig und ist nur der Vollständigkeit
halber dokumentiert.
</p>

<p>
Diese ersten Schritte haben beide Methoden gemeinsam und sollten von jedem
durchgeführt werden.
</p>

<pre caption="GCC aktualisieren">
# <i>emerge -uav gcc</i>
<comment>(Bitte ersetzen Sie "i686-pc-linux-gnu-3.4.5" mit der GCC-Version und
den CHOST-Einstellungen auf die Sie aktualisiert haben:)</comment>
# <i>gcc-config i686-pc-linux-gnu-3.4.5</i>
# <i>source /etc/profile</i>

<comment>(libtool neu bauen)</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
Um die Kompatibilität zu älteren C++ Binärprogrammen zu gewährleisten, muss
<c>sys-libs/libstdc++-v3</c> auf Ihrem System installiert werden.
</p>

<pre caption="libstdc++-v3 installieren">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
</pre>

</body>
</section>

<section id="first-install-revdep-rebuild">
<title>Verwendung von revdep-rebuild</title>
<body>

<p>
Diese Methode verlangt, dass Sie zuerst <c>gentoolkit</c> installieren, sollten
Sie das nicht bereits getan haben. Wir führen <c>revdep-rebuild</c> aus, um die
installierten Pakete nach jenen zu durchsuchen, die neu gebaut werden müssen,
danach werden diese neu gebaut.
</p>

<pre caption="Installation von gentoolkit und Aktualisierung von GCC">
# <i>emerge -an gentoolkit</i>
# <i>revdep-rebuild --library libstdc++.so.5 -- -p -v</i>
# <i>revdep-rebuild --library libstdc++.so.5</i>
</pre>

<note>
Es ist möglich, dass Sie Probleme mit nicht existierenden Paketversionen haben,
da diese eventuell veraltet oder maskiert sind. Sollte das der Fall sein,
verwenden Sie die <c>--package-names</c> Option von <c>revdep-rebuild</c>. Das
veranlasst, dass die Pakete basierend auf dem Paketnamen, anstatt des genauen
Namens und der Version, neu gebaut werden.
</note>

</body>
</section>
<section id="first-install-emerge-e">
<title>Verwendung von emerge -e</title>
<body>

<p>
Diese Methode ist viel langsamer, baut aber das ganze System neu, um
sicherzustellen, dass alles mit Ihrem aktualisierten Compiler neu gebaut wurde.
Das ist nicht nötig, aber zuverlässig falls Sie auch Ihre CFLAGS oder andere
make.conf Variablen, die den Kompiliervorgang beinflussen, ändern.
</p>

<p>
Da wir diese Aktionen nach einer Erstinstallation durchführen, müssen wir das
<c>world</c> Ziel nicht neu bauen, wie wir es bei einer Aktualisierung eines
bereits installierten Systems tun würden. Es steht Ihnen jedoch frei eine
Aktualisierung von world anstatt von system durchführen, um sicherzustellen,
dass alle Pakete aktualisiert wurden.
</p>

<pre caption="System neu bauen">
# <i>emerge -e system</i>
</pre>

</body>
</section>
<section id="first-install-cleaning-up">
<title>Aufräumen</title>
<body>

<p>
Ab diesem Zeitpunkt ist es sicher, die alte GCC-Version zu löschen. Bitte
ersetzen Sie <c>IHRE-NEUE-GCC-VERSION</c> mit der Version auf die Sie
aktualisiert haben:
</p>

<pre caption="Aufräumen">
# <i>emerge -aC "&lt;sys-devel/gcc-IHRE-NEUE-GCC-VERSION"</i>
</pre>

</body>
</section>
</chapter>

<chapter id="common-pitfalls">
<title>Bekannte Stolpersteine</title>
<section>
<body>

<p>
Es ist wichtig, <c>distcc</c> während der Aktualisierung zu deaktivieren.
Compilerversionen auf Ihrem Host zu mischen, <e>wird</e> Probleme beim Bauen
verursachen. Für ccache ist das nicht nötig, da die Cache Objekte ohnehin
ungültig werden.
</p>

<p>
Benutzen Sie immer dieselbe GCC-Version für Ihre Kernel und zusätzliche
Kernelmodule. Nachdem Sie Ihr world mit dem GCC neu gebaut haben, werden sich
externe Module (wie <c>app-emulation/qemu-softmu</c>) nicht mehr laden lassen.
Bitte bauen Sie Ihren Kernel mit dem aktualisierten GCC neu, um das Problem zu
beheben.
</p>

<p>
Falls Sie auf einem SPARC-Rechner aktualisieren, stellen Sie sicher,
<c>silo -f</c> nach dem Neubauen von world auszuführen, um mögliche Probleme
zu vermeiden.
</p>

</body>
</section>
<section>
<title>Häufige Fehlermeldungen</title>
<body>

<p>
Falls sich Ihr System über etwas wie <e>libtool: link:
`/usr/lib/gcc-lib/i686-pc-linux-gnu/3.3.6/libstdc++.la' is not a valid libtool
archive</e> beschwert, führen Sie bitte
<c>/usr/share/gcc-data/$CHOST/&lt;gcc-version&gt;/fix_libtool_files.sh 3.3.6</c>
aus (ersetzen Sie "3.3.6" durch die Versionsnummer aus der Fehlermeldung, und
$CHOST und &lt;gcc-version&gt; mit Ihrem eigentlichen CHOST und Ihrer
GCC-Version).
</p>

<p>
Falls Sie <e>error: /usr/bin/gcc-config: line 632:
/etc/env.d/gcc/i686-pc-linux-gnu-3.3.5: No such file or directory</e> sehen,
versuchen Sie <path>/etc/env.d/gcc/config-i686-pc-linux-gnu</path> zu löschen
und <c>gcc-config</c> gefolgt von <c>source /etc/profile</c> erneut
auszuführen. Tun Sie dies jedoch nur, wenn Sie keinen Cross-Compiler
eingerichtet haben.
</p>

<p>
Falls ein Paket während <c>emerge -e system</c> oder <c>emerge -e world</c>
fehlschlägt, können Sie die Operation mit <c>emerge --resume</c> fortsetzen.
Falls ein Paket wiederholt fehlschlägt, überspringen Sie es mit <c>emerge
--resume --skipfirst</c>. Führen Sie inzwischen keine weitere Instanz von emerge
aus, da Sie sonst die resume Informationen verlieren.
</p>

<p>
Falls Sie eine Fehlermeldung <e>spec failure: unrecognized spec option</e>
während der Aktualisierung Ihres Compilers bekommen, versuchen Sie auf Ihren
Standardcompiler zurück zu wechseln, entfernen Sie die <c>GCC_SPECS</c> Variable
und aktualisieren Sie GCC erneut:
</p>

<pre caption="Primärspezifikationen wiederherstellen">
# <i>gcc-config 1</i>
# <i>source /etc/profile</i>
# <i>unset GCC_SPECS</i>
# <i>emerge -uav gcc</i>
</pre>

</body>
</section>
</chapter>
</guide>
