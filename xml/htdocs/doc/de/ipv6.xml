<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/ipv6.xml,v 1.4 2004/05/08 16:25:03 dertobi123 Exp $ -->

<!-- English CVS Version: 1.9 -->

<guide link="/doc/de/ipv6.xml">
<title>IPv6 Leitfaden</title>
<author title="Autor">
    <mail link="latexer@gentoo.org">Peter Johanson</mail>
</author>
<author title="Editor">
    <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Editor, Reviewer">
    <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Übersetzung">
    <mail link="moixa@users.berlios.de">Tobias Sager</mail>
</author>

<abstract>
Dieser Leitfaden erklärt wie man auf einem Gentoo System IPv6-Unterstützung
einrichtet. Dies beinhaltet die Herstellung eines Tunnels mit einem Tunnel
Broker, grundlegende DNS-Konfiguration und die Konfiguration von Clients zur
Nutzung von IPv6-Adressen.
</abstract>

<license/>

<version>1.0.4</version>
<date>1. Mai 2004</date>

<chapter>
<title>Kernel einrichten</title>
<section>
<title>Grundlegende Kernel-Konfiguration</title>
<body>

<p>
Jeder der erhältlichen 2.4-Kernel von Gentoo unterstützt IPv6 ohne Probleme.
Zusätzlich haben <c>sys-kernel/gentoo-sources</c> und
<c>sys-kernel/pfeifer-sources</c> die USAGI-Patches eingespielt. Dieses
Patchset ist nicht obligatorisch, aber es wird laufend weiterentwickelt und
implementiert viele Elemente von IPv6, die sonst nicht im Kernel enthalten
sind.
</p>

<pre caption="Einen Kernel emergen">
# <i>emerge gentoo-sources</i>
<comment>oder</comment>
# <i>emerge pfeifer-sources</i>
</pre>

<p>
Jetzt sind wir bereit, um im Kernel-Quellenverzeichnis mit der
eigentlichen Konfiguration zu beginnen.
</p>

<pre caption="Den Linux-Kernel konfigurieren">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<note>
Dieser Befehl setzt voraus, dass der Symlink <path>/usr/src/linux</path>
auf den Kernel-Quellcode zeigt, den Sie benutzen wollen.
</note>

<note>
Stellen Sie sicher, dass <path>Prompt for development and/or incomplete
code/drivers</path> in der Kernel-Konfiguration aktiviert ist.
</note>

<pre caption = "'make menuconfig' Einstellungen">
Networking options ---&gt;
   &lt;*&gt; IP: tunneling
   ...
   &lt;*&gt; The IPv6 protocol (EXPERIMENTAL) ---&gt;

<codenote>Die IPv6-Optionen unter diesem Punkt können für manche</codenote>
<codenote>Applikationen nützlich sein, sie werden jedoch für die</codenote>
<codenote>Einrichtung nicht grundsätzlich benötigt.</codenote>

Network device support ---&gt;
   &lt;*&gt; Universal TUN/TAP device driver support
<codenote>Diese Option wird nur benötigt, wenn Sie ptrtd für 6to4-Umwandlung</codenote>
<codenote>benutzen wollen.</codenote>
</pre>

</body>
</section>
<section>
<title>IPv6-Unterstützung testen</title>
<body>

<p>
Nachdem Sie die empfohlenen Optionen aktiviert haben, kompilieren Sie
den Kernel neu und starten das System mit dem neuen IPv6-Kernel. Wenn
IPv6 funktioniert, sollte die loopback-Schnittstelle eine IPv6-Adresse
anzeigen.
</p>

<pre caption = "Die loopback-Schnittstelle überprüfen">
# <i>ifconfig lo</i>
lo    Protokoll:Lokale Schleife
      inet Adresse:127.0.0.1  Maske:255.0.0.0
      inet6 Adresse: ::1/128 Gültigkeitsbereich:Maschine
      <codenote>Die Linie oberhalb zeigt, dass es funktioniert</codenote>
      UP LOOPBACK RUNNING  MTU:16436  Metric:1
      RX packets:4 errors:0 dropped:0 overruns:0 frame:0
      TX packets:4 errors:0 dropped:0 overruns:0 carrier:0
      Kollisionen:0 Sendewarteschlangenlänge:0 
      RX bytes:200 (200.0 b)  TX bytes:200 (200.0 b)
</pre>

<p>
Bevor wir nun weiterfahren, stellen Sie bitte sicher, dass Sie "ipv6" in Ihrer
make.conf in die Liste von USE-Flags eingetragen haben. Zukünftige Pakete
werden dann bei der Installation IPv6-Unterstützung automatisch einbinden.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Tunnel-Konfiguration</title>
<section>
<title>Grundlegende Konfiguration</title>
<body>

<p>
Die meisten ISPs bieten immer noch keine native IPv6-Verbindungen an. Um
diese Einschränkung zu umgehen, gibt es rund um die Welt sogenannte "tunnel
broker", welche gratis IPv6-Tunnel zur Verfügung stellen. Dies erlaubt es
Ihnen, alle IPv6-Verbindungen durch eine IPv4-Verbindung zu "tunneln".
</p>

<table>
<tr><th>Broker</th> <th>Ort</th></tr>
<tr>
  <ti><uri link="http://tunnelbroker.net">Hurricane Electric</uri></ti>
  <ti>US/Kanada</ti>
</tr>
<tr>
  <ti><uri link="http://www.freenet6.net">Freenet6</uri></ti>
  <ti>US</ti>
</tr>
<tr>
  <ti><uri link="http://www.sixxs.net">Sixxs</uri></ti>
  <ti>Europa</ti>
</tr>
<tr>
  <ti><uri link="http://tunnel-broker.singnet.com.sg">Singnet</uri></ti>
  <ti>Singapur</ti>
</tr>
<tr>
  <ti><uri link="http://broker.aarnet.net.au">Aarnet</uri></ti>
  <ti>Australien/Südpazifik</ti>
</tr>
</table>

<p>
Unten folgen Beispiele, um einen Tunnel mit zwei bekannten
nordamerikanischen Brokern, Hurricane Electric und Freenet6, einzurichen.
</p>

</body>
</section>
<section>
<title>Hurricane Electric</title>
<body>

<p>
Hurricane Electric (kurz HE) bietet gratis IPv6-Tunnel an und reserviert
einen /64-Block von Adressen für Sie. Zudem können Sie reversible DNS-
Einträge konfigurieren. Einen Tunnel von HE zu bekommen ist einfach: Gehen
Sie auf <uri>http://www.tunnelbroker.net</uri> und füllen Sie das einseitige
Formular aus.
</p>

<note>
Die Registration erfordert die Angabe von Informationen wie Ihre Adresse
und Telefonnummer.
</note>

<warn>
Tunnel von HE brauchen 24 Stunden bis sie aktiviert sind. Dies wird gemacht,
um einen Missbrauch des Angebotes zu verhindern.
</warn>

<p>
Nachdem Sie einen Tunnel zugewiesen und einen /64-er Block bekommen haben,
können Sie ihre Gentoo-Maschine konfigurieren. HE bietet auch
Konfigurations-Beispiele basierend auf ifconfig und iproute. Die nächsten
zwei Beispiele gehen davon aus, dass Sie die folgende Konfiguration haben:
</p>

<table>
<tr><ti>Lokale IPv4 Adresse</ti><ti>68.36.91.195</ti></tr>
<tr><ti>HE IPv4 Adresse</ti><ti>64.71.128.82</ti></tr>
<tr><ti>Lokale IPv6 Tunnel-Adresse</ti><ti>2001:470:1F00:FFFF::189</ti></tr>
<tr><ti>IPv6 Block</ti><ti>2001:470:1F00:296::/64</ti></tr>
</table>

<p>
Mit net-tools und dem Befehl <c>ifconfig</c> würden Sie folgendes machen:
</p>

<pre caption="Konfiguration mit ifconfig">
# <i>ifconfig sit0 up</i>
# <i>ifconfig sit0 inet6 tunnel ::64.71.128.82 </i>
<codenote>Einen Tunnel zur HE IPv4-Adresse hinzufügen</codenote>
# <i>ifconfig sit1 up</i>
# <i>ifconfig sit1 inet6 add 2001:470:1F00:FFFF::189/127</i>
# <i>route -A inet6 add ::/0 dev sit1</i>
<codenote>Allen IPv6-Verkehr über die 'sit1'-Schnittstelle leiten</codenote>
</pre>

<p>
Mit dem iproute-Paket und dem <c>ip</c> Befehl würden Sie das Folgende
machen:
</p>

<pre caption="Konfiguration mit ip">
# <i>ip tunnel add sixbone mode sit remote 64.71.128.82 local 68.36.91.195 ttl 255</i>
<codenote>Einen Tunnel zwischen der lokalen IPv4 und HE's IPv4-Adresse herstellen</codenote>
# <i>ip link set sixbone up</i>
# <i>ip addr add 2001:470:1F00:FFFF::189/127 dev sixbone</i>
<codenote>Den Tunnel aufschalten und eine IPv6-Adresse zuweisen</codenote>
# <i>ip route add ::/0 dev sixbone</i>
<codenote>Alle IPv6-Adressen durch unsere 'sixbone'-Tunnelschnittstelle führen</codenote>
</pre>

</body>
</section>
<section>
<title>Freenet6</title>
<body>

<p>
<uri link="http://www.freenet6.net">Freenet6</uri> ist ein anderer
Gratis-Tunnel-Broker. Die Registration erfordert nur einen Benutzernamen und
eine gültige eMail-Adresse. Freenet6 hat sich entschieden, das
Tunnel-Management an eine Server/Client-Architektur zu delegieren und
hierfür <c>tspc</c> entwickelt. Das Programm ist in Portage erhalten.
Um es zu installieren, machen Sie folgendes:
</p>

<pre>
# <i>emerge freenet6</i>
</pre>

<p>
Nun müssen Sie Freenet6 durch das Editieren von
<path>/etc/freenet6/tspc.conf</path> einrichten. Sie sollten nur die Felder
<path>userid</path> und <path>passwd</path> an die von Freenet6 zugewiesenen
Einstellungen anpassen müssen. Unten ist eine komplette
Beispiel-Konfiguration.
</p>

<pre caption="tspc.conf Beispiel">
tsp_version=1.0.1
tsp_dir=/etc/freenet6
auth_method=any
client_v4=auto
<i>userid=IHRE_USERID</i>
<i>passwd=IHR_PASSWORT</i>
template=gentoo
server=tsps1.freenet6.net
retry_delay=0
if_tunnel=sit3
</pre>

</body>
</section>
<section>
<title>Ihre Verbindung testen</title>
<body>

<p>
Nachdem nun Ihr Tunnel konfiguriert ist, können Sie die Verbindung testen.
Der einfachste Weg dafür ist, das <c>ping6</c> Kommando zu benutzen und
zu versuchen, einen IPv6 Rechner zu pingen.
</p>

<pre caption = "Die Verbindung testen">
# <i>emerge iputils</i>
# <i>ping6 www.kame.net</i>
PING www.kame.net(orange.kame.net) 56 data bytes
64 bytes from orange.kame.net: icmp_seq=1 ttl=52 time=290 ms
64 bytes from orange.kame.net: icmp_seq=2 ttl=52 time=277 ms
64 bytes from orange.kame.net: icmp_seq=3 ttl=52 time=280 ms
64 bytes from orange.kame.net: icmp_seq=4 ttl=52 time=279 ms
64 bytes from orange.kame.net: icmp_seq=5 ttl=52 time=277 ms

--- www.kame.net ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4038ms
rtt min/avg/max/mdev = 277.040/281.041/290.046/4.699 ms
</pre>

<p>
Es wird momentan daran gearbeitet, bessere IPv6-Unterstützung zu den
init-scripts hinzuzufügen. Wenn Sie den Status dieses Projektes wissen
möchten und/oder mithelfen wollen, schreiben sie eine eMail an
<mail link="latexer@gentoo.org">latexer@gentoo.org</mail> (in Englisch).
</p>

</body>
</section>
</chapter>

<chapter>
<title>IPv6-Unterstützung in Applikationen</title>
<section>
<title>Pakete neu emergen</title>
<body>

<p>
Wenn Sie USE="ipv6" nicht schon vorher in ihrer <path>/etc/make.conf</path>
hatten, müssen Sie möglicherweise einige Pakete neu kompilieren, um diese
IPv6-tauglich zu machen. Um eine Liste aller installierter Pakete zu erhalten,
welche die 'ipv6' USE-Variable benutzen, führen Sie das untenstehende
Kommando aus.
</p>

<pre caption="Kandidaten für eine neu-Installation">
# <i>emerge -epv world | grep ipv6 | sed "s:^.*\] ::; s:-[0-9]\+.*::" | cut -d' ' -f1</i>
</pre>

<p>
Um ausgewählte Pakete neu zu installieren, machen Sie folgendes:
</p>

<pre caption="Kandidaten für eine neu-Installation">
# <i>emerge -epv world | grep ipv6 | sed "s:^.*\] ::; s:-[0-9]\+.*::" | \</i>
&gt; <i>cut -d' ' -f1 > packages</i>
</pre>

<p>
Als nächstes editieren Sie die Datei <path>packages</path> und entfernen
alle Pakete, welche Sie zum jetzigen Zeitpunkt nicht neu kompilieren wollen.
Danach führen Sie einfach folgendes aus:
</p>

<pre>
# <i>emerge `cat packages`</i>
</pre>

</body>
</section>
<section>
<title>Spezielle IPv6-Pakete</title>
<body>

<p>
Es gibt ein paar Pakete, die speziell für IPv6 konzipiert wurden. Die
meisten finden Sie in <path>/usr/portage/net-misc</path>.
</p>

<table>
<tr><th>Paket</th><th>Beschreibung</th></tr>
<tr>
  <ti>net-misc/ipv6calc</ti>
  <ti>Wandelt eine IPv6-Adresse in ein komprimiertes Format um</ti>
</tr>
<tr>
  <ti>net-misc/nc6</ti>
  <ti>Version von netcat, welche IPv6 und IPv4 unterstützt</ti>
</tr>
<tr>
  <ti>dev-perl/Socket6</ti>
  <ti>C socket.h Definitionen und Struktur-Manipulatoren für IPv6</ti>
</tr>
</table>

</body>
</section>
</chapter>

<chapter>
<title>DNS einrichten</title>
<section>
<title>IPv6 und DNS</title>
<body>

<p>
Äquivalent zu A-Einträgen für IPv4, benutzt IPv6 AAAA-Einträge im
DNS-System. (Dies weil der IPv4-Adressraum 2^32 gross ist, während IPv6
einen Adressraum von 2^128 hat). Für reverse DNS ist der INT-Standard
der am besten unterstützte. ARPA ist das neuste Format, es ist jedoch nicht
sehr verbreitet. Hier wird die Unterstützung für das INT-Format beschrieben.
</p>

</body>
</section>
<section>
<title>BIND Konfiguration</title>
<body>

<p>
Neuste Versionen von BIND haben ausgezeichnete IPv6-Unterstützung. Dieser
Abschnitt nimmt an, dass Sie grundsätzliche Kenntnisse über Konfiguration
und Nutzung von BIND haben. Wir gehen davon aus, dass Sie BIND nicht in
einem chroot laufen lassen. Wenn Sie chroot benutzen, müssen Sie den
folgenden Pfaden einfach Ihren chroot-Prefix voranstellen.
</p>

<p>
Als erstes müssen Sie Einträge für forward und reverse DNS-Zonen in
<path>/etc/bind/named.conf</path> eintragen.
</p>

<pre caption="named.conf Einträge">
zone "ipv6-rules.com" IN {
  type master;
  file "pri/ipv6-rules.com";
};
<codenote>Dies erzeugt die forward DNS für die Domäne 'ipv6-rules.com'</codenote>
zone "6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.int" {
  type master;
  file "pri/rev-ipv6-rules.com.int";
};
<codenote>Dieses Format für reverse DNS ist "bitweise". Es wird erzeugt, indem man den</codenote>
<codenote>IPv6-Prefix nimmt, die Reihenfolge der Zahlen umkehrt und zwischen jede</codenote>
<codenote>Zahl einen Punkt setzt.</codenote>
</pre>

<p>
Nun müssen wir die Zone-Dateien erstellen und Einträge für alle vier
Hosts erzeugen.
</p>

<pre caption="pri/ipv6-rules.com">
$TTL    2h
@       IN      SOA     ipv6-rules.com. webmaster.ipv6-rules.com.  (
                                2003052501 ; Seriennummer (serial)
        28800      ; Erneuerung (refresh)
        14400      ; Wiederholung (retry)
        3600000    ; Ablauf (expire)
        86400 )    ; Minimum (minimum)
      NS      ns1.ipv6-rules.com

      IN  AAAA  2001:470:1f00:296::1 ; Adresse für ipv6-rules.com
host1 IN  AAAA  2001:470:1f00:296::2 ; Adresse für host1.ipv6-rules.com
host2 IN  AAAA  2001:470:1f00:296::3:3 ; Adresse für host2.ipv6-rules.com
</pre>

<pre caption="pri/rev-ipv6-rules.com.int">
$TTL 3d ; Default TTL (bind 8 braucht dies, bind 9 ignoriert es)
@       IN SOA ipv6-rules.com. webmaster.ipv6-rules.com. (
                        2003052501      ; Seriennummer (YYYYMMdd)
      24h             ; Erneuerungsdauer
      30m             ; Wiederholungsdauer
      2d              ; Ablaufszeit
      3d )            ; Default TTL
  IN      NS     ns1.ipv6-rules.com.
; IPv6 PTR Einträge 
$ORIGIN 6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.int.

1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     ipv6-rules.com.
2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     host1.ipv6-rules.com.
3.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     host2.ipv6-rules.com.
</pre>

</body>
</section>
<section>
<title>DJBDNS Konfiguration</title>
<body>

<p>
Es gibt Patches von Drittanbietern, welche DJBDNS erlauben, einen IPv6
Namensserver zu betreiben. Die Patches finden Sie unter
<uri link="http://www.fefe.de/dns/">http://www.fefe.de/dns/</uri>. Bei
der Installation von DJBDNS mit "ipv6" in Ihrer USE-Variable werden diese
auch automatisch integriert.
</p>

<warn>
Nicht alle DNS-Einträge werden von diesen Patches unterstützt. Speziell
NS- und MX-Einträge sind noch nicht unterstützt.
</warn>

<pre>
# <i>USE="ipv6" emerge djbdns</i>
</pre>

<p>
Nachdem DJBDNS installiert wurde, können Sie die Konfiguration mit
<c>tinydns-setup</c> vornehmen. Dabei müssen Sie einige Fragen bezüglich
der IP-Adresse des Daemons, dem Installationsort, etc. beantworten.
</p>

<pre caption = "Konfiguration von tinydns">
# <i>tinydns-setup</i>
</pre>

<p>
Wir gehen davon aus, dass <c>tinydns</c> nach <path>/var/tinydns</path>
installiert wurde und editieren nun die Datei
<path>/var/tinydns/root/data</path>. Diese Datei enthält alle
Informationen, die tinydns benötigt, um IPv6-Verbindungen zu handhaben.
</p>

<pre caption="data Beispiel">
.ipv6-rules.com:192.168.0.1:a:259200
<codenote>*.ipv6-rules.com wird übergeordnet betreut von 192.168.0.1</codenote>
.6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.int:192.168.0.1:a
<codenote>Massgebende reverse DNS für 2001:470:1f00:296::/64</codenote>
6host1.ipv6-rules.com:200104701f0002960000000000000001:86400
6host2.ipv6-rules.com:200104701f0002960000000000000002:86400
<codenote>Die IP-Adressen für host1 und host2 spezifizieren</codenote>
3www.ipv6-rules.com:200104701f0002960000000000000002:86400
<codenote>www zeigt auf host1</codenote>
</pre>

<p>
Linien mit einer vorangestellten <c>6</c> werden sowohl einen AAAA- als auch
einen PTR-Eintrag haben. Jene mit einer <c>3</c> zu Beginn werden nur einen
AAAA-Eintrag haben. Neben der manuellen Konfiguration der Datei
<path>data</path>, können Sie auch die Skripts <c>add-host6</c> und
<c>add-alias6</c> benutzen, um neue Einträge hinzuzufügen. Nachdem Sie
Änderungen an <path>data</path> vorgenommen haben, müssen Sie <c>make</c>
in <path>/var/tinydns/root</path> ausführen. Dies erzeugt die Datei
<path>/var/tinydns/root/data.cfb</path>, welche von tinydns als Quelle
für die DNS-Daten genutzt wird.
</p>

</body>
</section>
</chapter>

<chapter>
<title>IPv6 Router</title>
<section>
<title>Das Routing konfigurieren</title>
<body>

<p>
Wenn wir unser System als Router für andere Computer benutzen und diese
mit IPv6 zur Aussenwelt Kontakt haben wollen, müssen wir die Weiterleitung
von IPv6-Paketen aktivieren. Man kann dies auf zwei verschiedenen Wegen
machen.
</p>

<pre caption="Weiterleitung aktivieren">
# <i>echo 1 > /proc/sys/net/ipv6/conf/all/forwarding</i>
oder
# <i>sysctl -w net.ipv6.conf.all.forwarding=1</i>
</pre>

<warn>
Das radvd Init-Skript aktiviert Weiterleitung bereits, der nächste Schritt
muss dann nicht vorgenommen werden.
</warn>

<p>
Um die Weiterleitung beim Booten zu aktivieren, müssen Sie
<path>/etc/sysctl.conf</path> editieren und folgende Linie hinzufügen.
</p>

<pre caption="Zusätzlicher sysctl.conf-Eintrag">
net.ipv6.conf.default.forwarding=1
</pre>

<p>
Der Verkehr sollte nun von diesem Computer durch den Tunnel an den
von uns konfigurierten Broker weitergeleitet werden.
</p>

<p>
Um Clients IPv6-Adressen zuzuweisen, erlaubt die IPv6-Spezifikation sowohl
statuslose (stateless) und statusbezogene (stateful) IP-Zuweisung. Statuslose
Zuweisung nutzt einen Methode namens "Router Bekanntmachung" (Router
Advertisment) und erlaubt Clients, eine IP und eine Route durch simples
Hochfahren einer Schnittstelle zu erhalten. Es wird "statuslos" genannt, weil
über die vergebenen IP-Adressen und den zugeordneten Hosts kein Protokoll
geführt wird. Statusbezogene Zuweisung wird von DHCPv6 betreut. Sie heisst
"statusbezogen", weil der Server den Status der Clients, die eine IP
bezogen haben, speichert.
</p>

</body>
</section>
<section>
<title>Statuslose (stateless) Konfiguration</title>
<body>

<p>
Statuslose Konfiguration ist mit dem Router Advertisment Daemon, kurz radvd,
folgendermassen zu realisieren.
</p>

<pre caption="radvd konfigurieren">
# <i>emerge radvd</i>
</pre>

<p>
Nachdem radvd emerged ist, müssen wir die Datei
<path>/etc/radvd/radvd.conf</path> erstellen, welche Informationen darüber
enthält, aus welchem IP-Block die IPs zu vergeben sind. Hier sehen Sie
eine Beispiel-<path>radvd.conf</path>. Sie nutzt den Prefix, den wir
vom Tunnel-Broker zugewiesen bekommen haben.
</p>

<pre caption="Beispiel radvd.conf">
interface eth0
{
        AdvSendAdvert on;
<codenote>Schicke Bekanntmachungen (advertisments) an andere hosts</codenote>
  AdvLinkMTU 1280;
  MaxRtrAdvInterval 300;
  prefix 2001:470:1F00:296::/64
<codenote>Die Gruppe von IPs, welche wir benutzen können.</codenote>
  {
    AdvOnLink on;
    AdvAutonomous on;
  };
};
</pre>

<p>
Weitere Informationen sind in <c>man radvd.conf</c> enthalten. Wir können
nun radvd starten und ihn zusätzlich jeweils beim Booten starten lassen.
</p>

<pre caption = "radvd starten">
# <i>/etc/init.d/radvd start</i>
# <i>rc-update add radvd default</i>
</pre>

</body>
</section>
<section>
<title>Statusbezogene (stateful) Konfiguration</title>
<body>

<p>
Wenn Sie eine statusbezogene Konfiguration möchten, müssen Sie DHCPv6
installieren und konfigurieren.
</p>

<pre caption = "dhcpv6 installieren">
# <i>emerge dhcpv6</i>
</pre>

<p>
Als nächstes konfigurieren wir den DHCPv6-Server indem wir
<path>/etc/dhcp6s.conf</path> editieren.
</p>

<pre caption="Beispiel dhcp6s.conf">
prefer-life-time 10000;
valid-life-time 20000;
renew-time 5000;
rebind-time 8000;
interface eth1 {
  link AAA {
    allow unicast;
    send unicast;
    allow rapid-commit;
    send server-preference 5;
    renew-time 1000;
    rebind-time 2400;
    prefer-life-time 2000;
    valid-life-time 3000;
                pool{
                        range 2001:470:1f00:296::10 to 2001:470:1f00:296::110/64;
                        prefix 2001:470:1f00:296::/64;
                };
  };
};
</pre>

<p>
Nun können wir dhcp6s starten und so einrichten, dass er beim Booten
automatisch gestartet wird.
</p>

<pre caption = "dhcp6s starten">
# <i>/etc/init.d/dhcp6s start</i>
# <i>rc-update add dhcp6s default</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>IPv6 Clients</title>
<section>
<title>Mittels radvd</title>
<body>

<p>
Clients hinter dem Router sollten die Möglichkeit haben, Verbindungen
zum Rest des Netzes mit IPv6 herzustellen. Wenn Sie radvd benutzen, sollte
die Host-Konfiguration so einfach sein wie eine Schnittstelle hochzufahren.
(Dies wird möglicherweise schon durch ein net.ethX Init-Skript erledigt).
</p>

<pre caption = "Verbinden über IPv6">
# <i>ifconfig eth0 up</i>
# <i>ifconfig eth0</i>
eth0      Protokoll:Ethernet  Hardware Adresse 00:09:6B:06:B7:B4
          inet6 Adresse: fe80::209:6bff:fe06:b7b4/64 Gültigkeitsbereich:Verbindung
          inet6 Adresse: 2001:470:1f00:296:209:6bff:fe06:b7b4 Scope:Global
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:4 errors:0 dropped:0 overruns:0 carrier:0 
          Kollisionen:0 Sendewarteschlangenlänge:100
          RX bytes:0 (0.0 b)  TX bytes:828 (828.0 b)
          Interrupt:11 Basisadresse:0x8400 Memory:d0204000-d0204038
</pre>

</body>
</section>

<section>
<title>Mittels DHCPv6</title>
<body>

<p>
Wenn Ihr Router mit DHCPv6 konfiguriert ist, müssen die Clients das dhcpv6
Paket ebenfalls installiert haben. Nachdem dies erledigt ist, müssen Sie
die Clients konfigurieren indem sie die Datei <path>/etc/dhcp6c.conf</path>
anpassen.
</p>

<pre caption="Beispiel dhcp6c.conf">
interface eth0 {
  send rapid-commit;
  request prefix-delegation;
  request domain-name-servers;
  request temp-address;
  iaid 11111;
  renew-time 11000;
  rebind-time 21000;
};
</pre>

</body>
</section>
</chapter>

<chapter>
<title>6to4-Umwandlung benutzen</title>
<section>
<title>Funktionsweise</title>
<body>

<p>
6to4-Umwandlung kann benutzt werden, wenn Sie Hosts haben, welche
mit IPv4-Computern über eine reine IPv6-Verbindung kommunizieren wollen.
Mit anderen Worten: Sie haben ein reines internes IPv6-Netzwerk und einen
Computer, welcher IPv4/IPv6-Verbindungen zur Aussenwelt herstellt.
</p>

</body>
</section>
<section>
<title>DNS-Konfiguration</title>
<body>

<p>
Um die 6to4-Umwandlung zum Laufen zu bringen, müssen Sie den DNS-Proxy
<c>totd</c> konfigurieren, welcher AAAA-Einträge für Seiten erstellt,
falls diese nur A-Einträge haben. Die gefälschten AAAA-Einträge zeigen
dann auf IPv6-Adressen, die nicht wirklich existieren, aber dann durch
den 6to4-Proxy geroutet werden. <c>totd</c> ist immer noch <c>~x86</c>
maskiert, da er noch getestet wird.
</p>

<pre caption = "totd installieren">
# <i>ACCEPT_KEYWORDS="~x86" emerge totd</i>
</pre>

<p>
Als nächstes müssen wir <path>/etc/totd.conf</path> mit einigen
Basis-Informationen versehen.
</p>

<pre caption="Beispiel /etc/totd.conf">
forwarder 192.168.0.2 port 53
<codenote>Zeigt auf einen richtigen DNS-Server</codenote>
prefix 3ffe:abcd:1234:9876::
<codenote>Prefix für gefälschte AAAA-Einträge</codenote>
port 5005
<codenote>An welchem Port totd laufen soll</codenote>
pidfile /var/run/totd.pid
<codenote>Welche PID-Datei benutzt werden soll</codenote>
stf
<codenote>Stichwort, um 6to4-Umwandlung einzuschalten</codenote>
</pre>

<note>
<c>totd</c> muss auf einem anderen Port als 53 laufen, wenn ein anderer
Namensserver auf derselben Maschine läuft.
</note>

</body>
</section>

<section>
<title>6to4-Proxy</title>
<body>

<p>
Wir benutzen <c>ptrtd</c> als 6to4-Proxy, welcher die Verbindungen zwischen
internen IPv6-Hosts und externen IPv4-Hosts herstellt.
</p>

<pre caption = "ptrtd installieren">
# <i>ACCEPT_KEYWORDS="~x86" emerge ptrtd</i>
</pre>

<p>
Wir müssen nun <c>ptrtd</c> konfigurieren und ihm sagen, für welchen Prefix
er Proxy-Verbindungen erstellen soll. Editieren Sie
<path>/etc/conf.d/ptrtd</path> und setzen Sie den <c>IPV6_PREFIX</c>. Dies
sollte derselbe Prefix sein wie jener in der <c>totd</c>-Konfiguration.
</p>

<pre caption="Beispiel /etc/ptrtd.conf">
IPV6_PREFIX="3ffe:abcd:1234:9876::"
</pre>

<p>
Sie können nun totd starten und aktivieren, dass er beim Booten jeweils
gestartet wird.
</p>

<pre caption = "totd starten">
# <i>/etc/init.d/totd start</i>
# <i>rc-update add totd default</i>
</pre>

</body>
</section>
<section>
<title>Clients konfigurieren und testen</title>
<body>

<p>
Nun können die Clients konfiguriert werden, damit diese sowohl zu IPv4- als
auch zu IPv6-Hosts Verbindungen über eine IPv6-Verbindung herstellen
können. Wir gehen davon aus, dass die Clients schon eine IP-Adresse von
radvd erhalten haben. Jetzt können wir einfach einen neuen DNS-Eintrag
und die default-Route für die "falschen Adressen" erstellen. Zuerst
fügen Sie zuoberst in die <path>/etc/resolv.conf</path> einen Eintrag
ein, welcher auf die Maschine zeigt auf der <c>totd</c> läuft.
</p>

<pre caption="Beispiel /etc/resolv.conf">
nameserver 2001:470:1f00:296::1
<codenote>Der Server auf dem totd läuft</codenote>
</pre>

<p>
Um die Namensauflösung zu testen, fordern Sie einen AAAA-Eintrag für
eine Seite an, welche nur IPv4 kann.
</p>

<pre caption = "Namensauflösung testen">
# <i>host -t aaaa google.com</i>
google.com has AAAA address 3ffe:abcd:1234:9876::d8ef:3364
google.com has AAAA address 3ffe:abcd:1234:9876::d8ef:3564
</pre>

<p>
Nun fügen wir eine default-Route für alle Adressen mit unserem 
falschen Prefix hinzu.
</p>

<pre caption="Benutzen des route-Werkzeugs">
# <i>route -A inet6 add 3ffe:abcd:1234:9876::/64 gw 2001:470:1f00:296::1</i>
</pre>

<pre caption="Benutzen von iproute">
# <i>ip route add 3ffe:abcd:1234:9876::/64 via 2001:470:1f00:296::1 dev eth0</i>
</pre>

<p>
Schliesslich können Sie nun <c>ping6</c> benutzen, um google.com am
gefälschten IPv6-Ort anzupingen.
</p>

<pre caption="6to4 testen">
# <i>ping6 -c 2 google.com</i>
PING 3ffe:abcd:1234:9876::d8ef:3364(3ffe:abcd:1234:9876::d8ef:3364) 56 data bytes
64 bytes from 3ffe:abcd:1234:9876::d8ef:3364: icmp_seq=1 ttl=255 time=0.106 ms
64 bytes from 3ffe:abcd:1234:9876::d8ef:3364: icmp_seq=2 ttl=255 time=0.090 ms

--- 3ffe:abcd:1234:9876::d8ef:3364 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 0.090/0.098/0.106/0.008 ms
</pre>

<note>
Eigentlich antwortet der Router auf dem <c>ptrtd</c> installiert wurde, aber
die Antwort sagt uns wenigstens, dass die Dinge richtig laufen.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Weitere Dokumentationen</title>
<section>
<body>

<p>
Es gibt viele ausgezeichnete Online-Resourcen, die sich mit IPv6 beschäftigen.
</p>

<table>
<tr><th>Website</th><th>Beschreibung</th></tr>
<tr>
  <ti><uri link="http://www.ipv6.org/">www.ipv6.org</uri></ti>
  <ti>Generelle IPv6-Informationen</ti>
</tr>
<tr>
  <ti><uri link="http://www.linux-ipv6.org/">www.linux-ipv6.org/</uri></ti>
  <ti>USAGI Projekt</ti>
</tr>
<tr>
  <ti><uri link="http://www.deepspace6.net/">www.deepspace6.net</uri></ti>
  <ti>Linux/IPv6-Seite</ti>
</tr>
<tr>
  <ti><uri link="http://www.hs247.com/">www.hs247.com</uri></ti>
  <ti>Alle Dinge sind IPv6</ti>
</tr>
<tr>
  <ti><uri link="http://www.ipv6-net.org/">www.ipv6-net.org</uri></ti>
  <ti>Deutsche IPv6-Seite</ti>
</tr>
<tr>
  <ti><uri link="http://www.kame.net/">www.kame.net</uri></ti>
  <ti>*BSD Implementation</ti>
</tr>
</table>

<p>
Im IRC, können Sie <c>#gentoo-ipv6</c> oder <c>#ipv6</c> im 
<uri link="http://www.freenode.net">Freenode</uri>-Netzwerk probieren.
Sie können mit einem IPv6-fähigen Client zu den Freenode-Servern auch 
unter <b>irc.ipv6.freenode.net</b> verbinden.
</p>

</body>
</section>
</chapter>
</guide>
