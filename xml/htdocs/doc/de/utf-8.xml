<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/utf-8.xml,v 1.13 2008/11/11 19:54:52 keytoaster Exp $ -->
<!-- English CVS Version: 1.50 -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/de/utf-8.xml" lang="de">
<title>UTF-8 unter Gentoo</title>

<author title="Autor">
  <mail link="slarti@gentoo.org">Thomas Martin</mail>
</author>
<author title="Mitarbeiter">
  <mail link="devil@gentoo.org.ua">Alexander Simonov</mail>
</author>
<author title="Bearbeiter">
  <mail link="fox2mike@gentoo.org">Shyam Mani</mail>
</author>
<author title="Übersetzer">
  <mail link="saw@zcat.de">Norman Golisz</mail>
</author>
<author title="Übersetzer">
  <mail link="grahl@gentoo.org">Jan Hendrik Grahl</mail>
</author>
<author title="Übersetzer">
  <mail link="keytoaster@gentoo.org">Tobias Heinlein</mail>
</author>
<author title="Übersetzer">
  <mail link="martin_winkler@gmx.de">Martin Winkler</mail>
</author>

<abstract>
Dieser Leitfaden zeigt Ihnen, nachdem die Vorzüge von Unicode und genauer
UTF-8 erläutert wurden, wie Sie den UTF-8 Unicode Zeichensatz auf Ihrem Gentoo
Linux System einrichten und verwenden.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license />

<version>2.27</version>
<date>2008-10-10</date>

<chapter>
<title>Zeichensätze</title>
<section>
<title>Was ist ein Zeichensatz?</title>
<body>

<p>
Computer verstehen den Text nicht als solches, stattdessen wird jedes Zeichen
durch eine Zahl repräsentiert. Traditionell war die Zeichentabelle mit den
entsprechenden Zuordnungen aufgrund technischer Begrenzungen in ihrer Größe
beschränkt.
</p>

</body>
</section>
<section>
<title>Die Geschichte der Zeichensätze</title>
<body>

<p>
Der verbreitetste (oder der zumindest weitgehend meist akzeptierte) Zeichensatz
ist <b>ASCII</b> (American Standard Code for Information Interchange). Er wird
weitesgehend als erfolgreichster Softwarestandard überhaupt anerkannt. Modernes
ASCII wurde 1986 vom American National Standards Institute standardisiert
(ANSI X3.4, RFC 20, ISO/IEC 646:1991, ECMA-6).
</p>

<p>
ASCII nutzt strikt Bitmuster mit sieben Binärziffern, welche einen
Dezimalzahlenraum von 0 bis 127 zulassen. Darunter befinden sich 32 unsichtbare
Steuerzeichen, die meisten zwischen 0 und 31, mit dem letzten Steuerzeichen DEL
bzw. Entf bei 127. Die Zeichen von 32 bis 126 sind sichtbare Zeichen: darunter
ein Leerzeichen, Satzzeichen, lateinische Buchstaben und Zahlen.
</p>

<p>
Das achte Bit in ASCII wurde ursprünglich als Prüfbit genutzt. Falls dies nicht
gewünscht ist, wird es mit einer 0 belegt. Das bedeutet, dass jedes Zeichen in
ASCII durch ein einzelnes Byte repräsentiert wird.
</p>

<p>
ASCII reichte zur Kommunikation im modernen Englisch aus, in anderen
europäischen Sprachen jedoch, die weitere Zeichen nutzen, wurde es schwierig.
Aus diesem Umstand wurden die ISO-8859-Standards entwickelt, welche zum einen
abwärtskompatibel zu ASCII sind, zum anderen das achte Bit für weitere 127
Zeichen nutzen. Die Begrenzungen von ISO-8859 wurden schnell ersichtlich,
mittlerweile gibt es 15 Varianten des ISO-8859-Standards (8859-1 bis 8859-15).
Um die Interoperabilität zwischen den Zeichensätzen weiter zu erschweren, wurde
in einigen Microsoft Windows-Versionen Windows-1252 für westeuropäische
Sprachen eingesetzt, eine Obermenge von ISO-8859-1, jedoch unterscheidet diese
sich in vielerlei Hinsicht. All diese Zeichensätze behalten dennoch
ASCII-Kompatibilität.
</p>

<p>
Die benötigte Entwicklung von komplett verschiedenen Single-Byte-Zeichensätzen
für nicht-lateinische Alphabete, wie EUC (Extended Unix Coding) für Japanisch
und Koreanisch (und in geringerem Maße Chinesisch) stiftete noch mehr
Verwirrung, während andere Betriebssysteme weiterhin andere Zeichensätze für
die gleichen Sprachen nutzten, beispielsweise Shift-JIS und ISO-2022-JP.
Benutzer, die die Darstellung von kyrillischen Zeichen wünschten, hatten die
Wahl zwischen KOI8-R für Russisch und Bulgarisch, oder KOI8-U für Ukrainisch
und anderen kyrillischen Zeichensätzen wie z.B. der nicht erfolgreiche
ISO-8859-5- und der gebräuchliche Windows-1251-Satz. Alle diese Zeichensätze
sind größtenteils nicht ASCII-kompatibel (obwohl KOI8 Kodierungen die
kyrilischen Zeichen in lateinischer Reihenfolge plazieren, so dass wenn das
achte Bit entfernt wird der Text auf einem ASCII-Terminal noch durch
Buchstaben-verdrehte Transkription zu entzifferen ist).
</p>

<p>
Dies führte zu Verwirrungen und beinahe zur Unfähigkeit mehrsprachiger
Kommunikation, besonders zwischen verschiedenen Alphabeten. Nun kommt Unicode.
</p>

</body>
</section>
<section>
<title>Was ist Unicode?</title>
<body>

<p>
Unicode durchbricht die traditionelle Single-Byte-Grenze der Zeichensätze. Der
Zeichensatz nutzt 17 Ebenen von 65.536 Code Points und ermöglicht ein Maximum
von 1.114.112 Zeichen. Die erste Ebene wird "Basic Multilingual Plane" oder BMP
bezeichnet und beinhaltet fast alles was Sie je brauchen werden. Viele nahmen
fälschlicherweise an, dass Unicode ein 16-Bit-Zeichensatz sei.
</p>

<p>
Unicode wurde auf verschiedene Weise abgebildet, aber die meist verbreitetsten
sind <b>UTF</b> (Unicode Transformation Format) und <b>UCS</b> (Universal
Character Set). Eine Nummer hinter UTF gibt die Zahl der Bits in einer Einheit
an, während die Nummer hinter UCS die Zahl der Bytes anigbt. Aufgrund der
sauberen 8-Bit-Basis von UTF-8, ist es die weitverbreitetste Konvention zum
Austausch von Unicode-Text geworden und ist daher Thema dieses Dokuments.
</p>

</body>
</section>
<section>
<title>UTF-8</title>
<body>

<p>
UTF-8 ist ein variabellanger Zeichensatz, was in diesem Beispiel bedeutet,
dass er 1 bis 4 Byte pro Symbol nutzt. So wird das erste UTF-8-Byte zur
ASCII-Kodierung genutzt, dies ermöglicht volle Abwärtskompatibilität zu ASCII.
UTF-8 bedeutet, dass ASCII- und lateinische Zeichen austauschbar sind, mit
einem relativ geringen Anstieg der Datengröße, da nur das erste Bit genutzt
wird. Benutzer der östlichen Alphabete wie die Japaner, welche einen höheren
Zahlenbereich zugeschrieben bekamen, dürften hingegen über die 50% zusätzliche
Datenredundanz unglücklich sein.
</p>

</body>
</section>
<section>
<title>Was UTF-8 für Sie tun kann</title>
<body>

<p>
UTF-8 erlaubt ihnen in einer standardkonformen und international akzeptierten,
mehrsprachigen Umgebung zu arbeiten, mit einer vergleichsweise geringen
Datenredundanz. UTF-8 ist der bevorzugte Weg nicht-ASCII-Zeichen über das
Internet, Email, IRC und nahezu jedem anderen Medium zu übertragen. Trotzdessen
stehen einige Menschen UTF-8 in der Online-Kommunikation schmähend gegenüber.
Es ist daher immer ratsam sich der Haltung in Channels, Mailinglisten, oder
Usenet-Gruppen gegenüber UTF-8 bewusst zu sein, bevor man <e>nicht-ASCII</e>
UTF-8 verwendet.
</p>

</body>
</section>
</chapter>

<chapter>
<title>UTF-8 unter Gentoo Linux einrichten</title>
<section>
<title>Finden oder Erstellen von UTF-8 Locales</title>
<body>

<p>
Jetzt, wo Sie die Hintergründe zu Unicode verstanden haben, sind Sie bereit auf
ihrem System UTF-8 zu benutzen.
</p>

<p>
Die Grundvorraussetzung UTF-8 nutzen zu können, ist eine installierte Version
von glibc mit National Language Support. Dazu brauchen Sie die
<path>/etc/locale.gen</path> Datei. Es geht jedoch über den Rahmen dieses
Dokuments hinaus, die Benutzung dieser Datei zu erklären. Es wird in der <uri
link="/doc/de/guide-localization.xml#doc_chap3_sect3">Gentoo Anleitung zur
Lokalisierung</uri> erläutert.
</p>

<p>
Nun werden wir überprüfen, ob schon UTF-8-Locales installiert sind, oder ob wir
sie erst erstellen müssen.
</p>

<pre caption="Überprüfen ob eine UTF-8-Locale existiert">
<comment>(Ersetzen Sie "en_GB" mit der gewünschten Locale-Einstellung)</comment>
# <i>locale -a | grep 'en_GB'</i>
en_GB
en_GB.UTF-8
</pre>

<p>
In der Ausgabe muss das Resultat mit einem Suffix wie <c>.UTF-8</c> vorkommen,
andernfalls müssen wir eine UTF-8-kompatible Locale erstellen.
</p>

<note>
Führen Sie die nachfolgenden Befehle nur aus, wenn Sie keine UTF-8-kompatible
Locale für ihre Sprache zur Verfügung haben.
</note>

<pre caption="Eine UTF-8-Locale erstellen">
<comment>(Ersetzen Sie "en_GB" mit der gewünschten Locale-Einstellung)</comment>
# <i>localedef -i en_GB -f UTF-8 en_GB.UTF-8</i>
</pre>

<p>
Ein weiterer Weg eine UTF-8-Locale zu erstellen, ist diese der
<path>/etc/locale.gen</path> Datei hinzuzufügen und die nötigen Locales mit dem
<c>locale-gen</c> Befehl zu erstellen.
</p>

<pre caption="Zeile in /etc/locale.gen">
en_GB.UTF-8 UTF-8
</pre>

</body>
</section>
<section>
<title>Setzen der Locale</title>
<body>

<p>
Es muss eine Umgebungsvariable gesetzt werden, damit die neuen UTF-8-Locales
genutzt werden können: <c>LC_CTYPE</c> (oder optional <c>LANG</c>, falls Sie
auch die Systemsprache ändern wollen).
Es gibt hier wieder einige Möglichkeiten
sie zu setzen. Manche Menschen bevorzugen es die Einstellung nur für bestimmte
Nutzer zu übernehmen; in diesem Fall muss sie entweder in
<path>~/.profile</path> (wenn Sie <c>/bin/sh</c> verwenden) bzw. in
<path>~/.bash_profile</path> oder <path>~/.bashrc</path> (wenn Sie
<c>/bin/bash</c> verwenden) gesetzt werden.
(Weitere Details und bewährte Vorgehensweisen finden Sie in unserer
<uri link="/doc/de/guide-localization.xml">Anleitung zur Lokalisierung</uri>.
</p>

<p>
Andere bevorzugen die Locale global zu setzen. Dies empfiehlt der Autor
besonders, wenn <path>/etc/init.d/xdm</path> genutzt wird, da das Initskript
den Displaymanager und den Desktop startet, bevor irgendwelche zuvor erwähnten
Shell-Startup-Dateien gelesen werden.
</p>

<p>
Um die Einstellung global zu übernehmen, muss
<path>/etc/env.d/02locale</path> bearbeitet werden. Die Datei sollte wie folgt
aussehen:
</p>

<pre caption="Demonstrations /etc/env.d/02locale">
<comment>(Wie immer "en_GB.UTF-8" auf Ihre Locale ändern)</comment>
LANG="en_GB.UTF-8"
</pre>

<note>
Sie können auch <c>LC_CTYPE</c> anstelle von <c>LANG</c> verwenden.
Für weitere Informationen zu den Kategorien, welche von <c>LC_CTYPE</c>
betroffen sind, lesen Sie bitte die <uri
link="http://www.gnu.org/software/libc/manual/html_node/Locale-Categories.
html#Locale-Categories">GNU Locale Seite</uri>.
</note>

<p>
Als Nächstes muss die Umgebung mit den Änderungen aktualisiert werden.
</p>

<pre caption="Aktualisierung der Umgebung">
# <i>env-update</i>
>>> Regenerating /etc/ld.so.cache...
 * Caching service dependencies ...
# <i>source /etc/profile</i>
</pre>

<p>
Nun führen Sie <c>locale</c> ohne Argumente aus, um zu sehen, ob wir die
korrekten Variablen in unserer Umgebung haben.
</p>

<pre caption="Überprüfen ob unsere neue Locale in der Umgebung ist">
# <i>locale</i>
LANG=en_GB.UTF-8
LC_CTYPE="en_GB.UTF-8"
LC_NUMERIC="en_GB.UTF-8"
LC_TIME="en_GB.UTF-8"
LC_COLLATE="en_GB.UTF-8"
LC_MONETARY="en_GB.UTF-8"
LC_MESSAGES="en_GB.UTF-8"
LC_PAPER="en_GB.UTF-8"
LC_NAME="en_GB.UTF-8"
LC_ADDRESS="en_GB.UTF-8"
LC_TELEPHONE="en_GB.UTF-8"
LC_MEASUREMENT="en_GB.UTF-8"
LC_IDENTIFICATION="en_GB.UTF-8"
LC_ALL=
</pre>

<p>
Das ist alles. Sie nutzen jetzt UTF-8-Locales. Die nächste Hürde ist die
Konfiguration der Programme, die Sie täglich nutzen.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Programmunterstützung</title>
<section>
<body>

<p>
Als Unicode anfing in der Softwarewelt Bedeutung zu erlangen, waren
Multi-Byte-Zeichensätze unpassend zu Sprachen wie C, in welcher viele der
heutigen Programme geschrieben sind. Auch heute noch, sind einige Programme
nicht in der Lage, mit UTF-8 entsprechend umzugehen. Glücklicherweise sind es
die wenigsten.
</p>

</body>
</section>
<section>
<title>Dateinamen, NTFS und FAT</title>
<body>

<p>
Es existieren mehrere NLS-Optionen im Linux-Kernelkonfigurationsmenü, aber es
ist wichtig sich nicht beirren zu lassen. Für den größten Teil müssen Sie nur
die UTF-8-NLS-Unterstützung in den Kernel einbauen und die NLS-Standardoption
nach utf8 abändern.
</p>

<pre caption="Kernelkonfigurationsschritte für UTF-8-NLS">
File Systems --&gt;
  Native Language Support --&gt;
    (utf8) Default NLS Option
    &lt;*&gt; NLS UTF8
    <comment>(Setzen Sie auch &lt;*&gt; für alle Zeichensätze die Sie in ihren
    FAT-Dateisystemen, oder Joilet-CD-ROMs nutzen.)</comment>
</pre>

<p>
Falls Sie vorhaben, NTFS-Partitionen zu mounten, müssen Sie unter Umständen
eine <c>nls=</c>-Option mit mount spezifizieren. Falls Sie FAT-Partitionen
mounten wollen, muss unter Umständen die <c>codepage</c>-Option angegeben
werden. Optional können Sie eine Standard-Codepage für FAT in der
Linux-Kernelkonfiguration definieren. Bedenken Sie, dass die
<c>codepage</c>-Option welche Sie mit mount angeben, die Standardeinstellung
des Kernels überschreibt.
</p>

<pre caption="FAT-Einstellungen in der Kernelkonfiguration">
File Systems --&gt;
  DOS/FAT/NT Filesystems  --&gt;
    (437) Default codepage for fat
</pre>

<p>
Sie sollten es vermeiden, <c>Default iocharset for fat</c> auf UTF-8 zu setzen,
da es nicht empfohlen wird. Stattdessen sollten Sie die Option utf8=true
übergeben, wenn Sie FAT-Partitionen mounten. Für weitere Informationen, lesen
Sie die Manpage zu mount (<c>man mount</c>) und die Kerneldokumentation in
<path>/usr/src/linux/Documentation/filesystems/vfat.txt</path>.
</p>

<p>
Zur Änderung der Kodierung der Dateinamen, kann <c>app-text/convmv</c>
genutzt werden.
</p>

<pre caption="Beispiel zur Nutzung von convmv">
# <i>emerge --ask app-text/convmv</i>
<comment>(Befehlsformat)</comment>
# <i>convmv -f &lt;current-encoding&gt; -t utf-8 &lt;Dateiname&gt;</i>
<comment>(Ersetzen Sie iso-8859-1 durch dem Zeichensatz von dem aus konvertiert wird)</comment>
# <i>convmv -f iso-8859-1 -t utf-8 filename</i>
</pre>

<p>
Um den <e>Inhalt</e> von Dateien zu ändern, nutzen Sie das <c>iconv</c>
Programm, welches mit <c>glibc</c> installiert wird:
</p>

<pre caption="Beispiel zur Nutzung von iconv">
<comment>(Ersetzen Sie iso-8859-1 durch den Zeichensatz von dem aus konvertiert wird)</comment>
<comment>(Überprüfen Sie, ob die Ausgabe in Ordnung ist)</comment>
# <i>iconv -f iso-8859-1 -t utf-8 filename</i>
<comment>(Zur Konvertierung einer Datei müssen Sie eine neue Datei erstellen)</comment>
# <i>iconv -f iso-8859-1 -t utf-8 filename > newfile</i>
</pre>

<p>
<c>app-text/recode</c> kann für diesen Zweck ebenso genutzt werden.
</p>

</body>
</section>
<section>
<title>Die Systemkonsole</title>
<body>

<impo>
Sie brauchen >=sys-apps/baselayout-1.11.9 für Unicode in der Konsole.
</impo>

<p>
Um UTF-8 in der Konsole zu aktivieren, müssen Sie <path>/etc/rc.conf</path>
editieren und <c>UNICODE="yes"</c> setzen, zudem sollten Sie die Kommentare
in dieser Datei lesen -- es ist wichtig, eine Schriftart zu finden, welche
einen möglichst großen Zeichenvorrat hat, wenn Sie das Potential von Unicode
ausschöpfen möchten. Damit dies funktioniert, müssen Sie sicher sein, dass Sie,
wie in <uri link="#doc_chap1">Kapitel 1</uri> beschrieben, eine Unicode-Locale
korrekt erstellt haben.
</p>

<p>
Die <c>KEYMAP</c>-Variable, welche in <path>/etc/conf.d/keymaps</path> gesetzt
wird, sollte ein Unicode-Layout spezifizieren.
</p>

<pre caption="Beispielsauszug aus /etc/conf.d/keymaps">
<comment>(Ändern Sie "uk" auf Ihr lokales Layout)</comment>
KEYMAP="uk"
</pre>

</body>
</section>
<section>
<title>Ncurses und Slang</title>
<body>

<note>
Ignorieren Sie alle Erwähnungen von Slang in diesem Abschnitt, wenn Sie es
nicht installiert haben, oder nicht nutzen.
</note>

<p>
Es ist ratsam <c>unicode</c> zu ihren globalen USE-Flags in
<path>/etc/make.conf</path> hinzuzufügen und die Pakete <c>sys-libs/ncurses</c>
und, sofern installiert, <c>sys-libs/slang</c> erneut zu installieren. Dies
erledigt Portage automatisch, wenn Sie ihr System aktualisieren:
</p>

<pre caption="Aktualisieren des Systems">
# <i>emerge --update --deep --newuse world</i>
</pre>

<p>
Nachdem die USE-Flags geändert wurden, müssen alle Pakete erneut gebaut
werden, welche auf Ncurses oder Slang verlinken. Das Tool das wir dafür
verwenden (<c>revdep-rebuild</c>) ist Teil des <c>gentoolkit</c> Pakets.
</p>

<pre caption="Neukompilieren der Programme, welche von Ncurses oder Slang abhängen">
# <i>revdep-rebuild --soname libncurses.so.5</i>
# <i>revdep-rebuild --soname libslang.so.1</i>
</pre>

</body>
</section>
<section>
<title>KDE, GNOME und Xfce</title>
<body>

<p>
Alle großen Desktopumgebungen bieten volle Unicode-Unterstützung und benötigen
keine weiteren Einstellungen, welche nicht schon in diesem Guide behandelt
wurden. Der Grund dafür ist, dass die eingesetzten grafischen Toolkits (Qt oder
GTK+2) UTF-8-gerüstet sind. Folglich sollte jede Anwendung, die auf einer
dieser Toolkits aufbaut, UTF-8-gerüstet sein.
</p>

<p>
Ausnahmen bilden Xlib und GTK+1. GTK+1 erfordert eine ISO-10646-1 FontSpec in
~/.gtkrc, zum Beispiel <c>-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1</c>.
Des Weiteren benötigen Anwendungen, welche Xlib oder Xaw nutzen, eine ähnliche
FontSpec, andernfalls verweigern sie ihren Dienst.
</p>

<note>
Falls Sie noch eine Version vom Gnome-Kontrollzenter 1 haben, nutzen Sie diese
stattdessen. Wählen Sie von dort irgendeine ISO-10646-1 Schriftart.
</note>

<pre caption="Beispiel ~/.gtkrc (für GTK+1) das eine Unicode-kompatible Schrift definiert">
style "user-font"
{
    fontset="-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1"
}
widget_class "*" style "user-font"
</pre>

<p>
Sollte eine Anwendung Unterstützung für sowohl Qt, als auch GTK+2 bieten, wird
die GTK+2-GUI allgemein bessere Ergebnisse mit Unicode liefern.
</p>

</body>
</section>
<section>
<title>X11 und Schriftarten</title>
<body>

<impo>
<c>x11-base/xorg-x11</c> hat eine weit bessere Unterstützung für Unicode als
XFree86 und wird <e>wärmstens</e> empfohlen.
</impo>

<p>
TrueType-Schriften bieten Unterstützung für Unicode und die meisten mit Xorg
mitgelieferten Schriften haben eine beeindruckende Zeichenunterstützung, wenn
auch offensichtlich nicht jedes einzelne für Unicode existierende Zeichen für
jede Schrift verfügbar ist. Um Schriften zu erstellen (einschließlich des
Bitstream Vera-Satzes), welche Unterstützung für ostasiatische Buchstaben
bieten, müssen Sie <c>cjk</c> zu ihren USE-Flags hinzufügen. Einige andere
Anwendungen nutzen dieses Flag, daher kann es von Vorteil sein es permanent
als USE-Flag hinzuzufügen.
</p>

<p>
Auch sind mehrere Schriftpakete in Portage Unicode-gerüstet.
</p>

<pre caption="Optional: Installation weiterer Unicode-gerüsteten Schriften">
# <i>emerge terminus-font intlfonts freefonts cronyx-fonts corefonts</i>
</pre>

</body>
</section>
<section>
<title>Window-Manager und Terminal-Emulatoren</title>
<body>

<p>
Window-Manager, welche nicht auf GTK oder Qt basieren, haben allgemein eine
sehr gute Unicode-Unterstützung, da sie zum Handhaben der Schriften oft die
Xft-Bibliothek nutzen. Falls ihr Window-Manager kein Xft nutzt, bleibt Ihnen
immer noch die im vorherigen Abschnitt erwähnte FontSpec als Unicode-Schrift.
</p>

<p>
Terminal-Emulatoren, welche Xft nutzen und Unicode unterstützen, sind
schwieriger zu bekommen. Abgesehen von Konsole und gnome-terminal, sind die
besten Optionen in Portage <c>x11-terms/rxvt-unicode</c>,
<c>xfce-extra/terminal</c>, <c>gnustep-apps/terminal</c>,
<c>x11-terms/mlterm</c>, oder das simple <c>x11-terms/xterm</c>, sofern es
mit dem <c>unicode</c>-USE-Flag kompiliert wurde und mit <c>uxterm</c>
aufgerufen wird. <c>app-misc/screen</c> unterstützt ebenfalls UTF-8, dazu muss
es mit <c>screen -U</c> aufgerufen werden, oder das Folgende wird zur
<path>~/.screenrc</path> hinzugefügt:
</p>

<pre caption="~/.screenrc für UTF-8">
defutf8 on
</pre>

</body>
</section>
<section>
<title>Vim, Emacs, Xemacs und Nano</title>
<body>

<p>
Vim bietet volle UTF-8-Unterstützung und hat eine eingebaute
UTF-8-Dateierkennung. Für weitere Informationen rufen Sie in Vim <c>:help
mbyte.txt</c> auf.
</p>

<p>
Emacs 22.x und höher haben ebenfalls volle UTF-8-Unterstützung. Xemacs 22.x
bietet noch keine Unterstützung für das Kombinieren von Zeichen.
</p>

<p>
Ältere Versionen des Emacs und/oder Xemacs können eine Installation von
<c>app-emacs/mule-ucs</c> und/oder <c>app-xemacs/mule-ucs</c> erfordern.
Fügen Sie folgenden Code zu ihrer <path>~/.emacs</path> hinzu, um
Unterstützung für CJK-Sprachen in UTF-8 zu haben.
</p>

<pre caption="Emacs CJK UTF-8-Unterstützung">
(require 'un-define)
(require 'jisx0213)
(set-language-environment "Japanese")
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
</pre>

<p>
Nano hat volle Unterstützung für UTF-8 seit Version 1.3.6.
</p>

</body>
</section>
<section>
<title>Shells</title>
<body>

<p>
Zurzeit bietet die <c>bash</c> volle Unicode-Unterstützung durch die GNU
Readline Library. Z-Shell (<c>zsh</c>) bietet Unicode-Unterstützung mit dem
<c>unicode</c> USE-Flag an.
</p>

<p>
Die C-Shell, <c>tcsh</c> und <c>ksh</c> unterstützen kein UTF-8.
</p>

</body>
</section>
<section>
<title>Irssi</title>
<body>

<p>
Irssi bietet UTF-8-Unterstützung, auch wenn es einer zusätzlichen Einstellung
bedarf.
</p>

<pre caption="Aktivieren von UTF-8 in Irssi">
/set term_charset UTF-8
</pre>

<p>
Für Channels, in denen nicht-ASCII-Zeichen durch nicht-UTF-8-Zeichen
ausgewechselt werden, kann der Befehl <c>/recode</c> verwendet werden, um diese
Zeichen umzuwandeln. Tippen Sie <c>/help recode</c> ein, für mehr
Informationen.
</p>

</body>
</section>
<section>
<title>Mutt</title>
<body>

<p>
Der Mutt MUA (Mail User Agent) hat sehr gute Unicode-Unterstützung. Um UTF-8
mit Mutt zu nutzen, müssen Sie nichts zu Ihren Konfigurationsdateien
hinzufügen. Mutt wird unter Unicode-Umgebungen ohne Anpassung funktionieren,
wenn alle Konfigurationsdateien (einschließlich der Signatur) in UTF-8
kodiert sind.
</p>

<note>
Es kann vorkommen, dass Sie weiterhin ein '?' sehen, wenn Sie Mails mit Mutt
lesen. Das ist ein Ergebnis aus falschen Einstellungen des Mailclients, den
der Sender benutzt. Sie können da nicht viel tun, außer das Sie die betreffende
Person bitten, den Client so einzustellen, dass der korrekte Zeichensatz
spezifiziert wird.
</note>

<p>
Weitere Informationen sind im <uri
link="http://wiki.mutt.org/index.cgi?MuttFaq/Charset">Mutt Wiki</uri>
verfügbar.
</p>

</body>
</section>
<section>
<title>Man</title>
<body>

<p>
Manpages sind integraler Bestandteil eines jeden Linuxsystems. Um
sicherzustellen, dass Unicode in ihren Manpages korrekt dargestellt wird,
editieren Sie <path>/etc/man.conf</path> und ersetzen eine Zeile wie unten
gezeigt.
</p>

<pre caption="man.conf Änderungen für Unicode-Unterstützung">
<comment>(Dies ist die alte Zeile)</comment>
NROFF           /usr/bin/nroff -Tascii -c -mandoc
<comment>(Ersetzen Sie die obige Ziele hiermit)</comment>
NROFF           /usr/bin/nroff -mandoc -c
</pre>

</body>
</section>
<section>
<title>elinks und links</title>
<body>

<p>
Dies sind oft genutzte Textbrowser und wir sollten zeigen, wie Sie deren
UTF-8-Unterstützung aktivieren. Für <c>elinks</c> und <c>links</c>
gibt es zwei Wege, um dies zu realisieren. Einer besteht darin, die
Setup-Option des Browsers zu nutzen, der andere darin, die Konfigurationsdatei
zu editieren. Um die Option durch den Browser zu setzen, öffnen Sie eine Seite
mit <c>elinks</c> oder <c>links</c> und drücken <c>Alt+S</c>, um das Setup-Menü
aufzurufen. Dann wählen Sie Terminal Options, oder drücken <c>T</c>. Scrollen
Sie runter und wählen Sie die letzte Option <c>UTF-8 I/O</c> durch drücken der
Enter-Taste. Speichern Sie und verlassen Sie das Menü. Bei <c>links</c> müssen
Sie <c>Alt+S</c> wiederholt drücken und anschließend <c>S</c> um zu speichern.
Die Methode mit der Konfigurationsdatei wird unten gezeigt.
</p>

<pre caption="UTF-8 für elinks/links aktivieren">
<comment>(Für elinks, editieren Sie /etc/elinks/elinks.conf oder
~/.elinks/elinks.conf und fügen die folgende Zeile hinzu)</comment>
set terminal.linux.utf_8_io = 1

<comment>(Für links, editieren Sie ~/.links/links.cfg und fügen die folgende
Zeile hinzu)</comment>
terminal "xterm" 0 1 0 us-ascii utf-8
</pre>

</body>
</section>
<section>
<title>Samba</title>
<body>

<p>
Samba ist ein Softwarepaket, dass das SMB-Protokoll (Server Message Block)
für UNIX-Systeme wie Macs, Linux und FreeBSD implementiert. Das Protokoll wird
manchmal auch als Common Internet File System (CIFS) bezeichnet. Samba
beinhaltet außerdem das NetBIOS-System; verwendet für den Dateiaustausch unter
Windows-Netzwerken.
</p>

<pre caption="Aktivieren von UTF-8 für Samba">
<comment>(Editieren Sie /etc/samba/smb.conf und fügen Sie den folgenden [global] Abschnitt hinzu)</comment>
dos charset = 1255
unix charset = UTF-8
display charset = UTF-8
</pre>

</body>
</section>
<section>
<title>Es alles austesten</title>
<body>

<p>
Es gibt eine Vielzahl an UTF-8-Testseiten. <c>net-www/w3m</c>,
<c>net-www/links</c>, <c>net-www/elinks</c>, <c>net-www/lynx</c> und alle
Mozilla-basierenden Browser (einschließlich Firefox) unterstützen UTF-8.
Konqueror und Opera bieten ebenfalls volle UTF-8-Unterstützung.
</p>

<p>
Wenn Sie einen der textbasierten Web-Browser verwenden, stellen Sie sicher,
dass das Terminal, das Sie einsetzen, Unicode-gerüstet ist.
</p>

<p>
Falls Sie einige Zeichen als Boxen mit Buchstaben, oder Zahlen dargestellt
bekommen, bedeutet das, dass die eingesetze Schrift kein geeignetes Zeichen
für das Symbol zur Verfügung hat. Stattdessen wird eine Box mit dem zum
UTF-8-Symbol gehörenden Hex-Code angezeigt.
</p>

<ul>
  <li>
    <uri link="http://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html">Eine W3C
    UTF-8 Testseite</uri>
  </li>
  <li>
    <uri
    link="http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm">Eine
    UTF-8 Testseite von der Universität Frankfurt</uri>
  </li>
</ul>

</body>
</section>
<section>
<title>Eingabemethoden</title>
<body>

<p>
<e>Dead Keys</e> werden genutzt, um in X Zeichen einzugeben, welche nicht auf
Ihrer Tastatur vorhanden sind. Das funktioniert, wenn Sie die rechte Alt-Taste
(in einigen Ländern AltGr) und eine weitere Taste aus dem nicht-alphabetischen
Teil der Tastatur links von der Eingabe-Taste einmal drücken, loslassen und
dann einen Buchstaben drücken. Der <e>Dead Key</e> sollte ihn modifizieren.
Eingaben können des Weiteren durch gleichzeitiges Drücken der Shift-Taste
zusammen mit dem AltGr und dem Modifier beeinflusst werden.
</p>

<p>
Um Dead Keys in X zu aktivieren, brauchen Sie ein Layout, welches diese
unterstützt. Die meisten europäischen Layouts haben bereits Dead Keys in der
Standardausführung. Dies trifft jedoch nicht auf nordamerikanische Layouts zu.
Auch wenn es einen gewissen Grad an Unbeständigkeit zwischen den Layouts gibt,
scheint der einfachste Weg zu sein, beispielsweise ein Layout der Form "en_US"
statt "us" zu nutzen. Das Layout wird in <path>/etc/X11/xorg.conf</path>
bestimmt, zum Beispiel so:
</p>

<pre caption="/etc/X11/xorg.conf Auszug">
Section "InputDevice"
    Identifier "Keyboard0"
    Driver     "kbd"
    Option     "XkbLayout" "en_US" <comment># Statt einfach nur "us"</comment>
    <comment>(Weitere Xkb-Optionen hier)</comment>
EndSection
</pre>

<note>
Die obigen Änderungen müssen Sie nur durchführen, wenn Sie ein
nordamerikanisches Layout nutzen, oder ein anderes Layout, bei welchem die Dead
Keys nicht funktionieren. Europäische Nutzer sollten funktionierende Dead Keys
haben, ohne etwas zu ändern.
</note>

<p>
Diese Änderung wird erst nach einem Neustart des X-Servers wirksam. Um sie
sofort durchzusetzen, nutzen Sie das Tool <c>setxkbmap</c>, zum Beispiel so:
<c>setxkbmap en_US</c>.
</p>

<p>
Es ist vermutlich einfacher Dead Keys anhand von Beispielen zu beschreiben.
Auch wenn die Ergebnisse von der Locale abhängig sind, sollten die Konzepte,
unabhängig von der Locale, die gleichen sein. Die Beispiele beinhalten UTF-8,
um sie darzustellen müssen Sie ihrem Browser entweder mitteilen, die Seite als
UTF-8 anzuzeigen, oder aber Sie haben bereits UTF-8-Locales konfiguriert.
</p>

<p>
Wenn ich AltGr und einmal [ drücke, loslasse und dann a drücke, erhalte ich
'ä'. Wenn ich AltGr und einmal [ drücke und dann e, erhalte ich 'ë'. Wenn ich
einmal AltGr und ; drücke, erhalte ich 'á' und wenn ich AltGr und ; drücke,
dann loslasse, erhalte ich 'é'.
</p>

<p>
Durch gleichzeitiges Drücken von AltGr, Shift und [, dann loslasse und a
drücke, erhalte ich ein skandinavisches 'å'. Wenn ich AltGr, Shift und [ drücke
und <e>nur</e> [ loslasse, dann nochmals drücke, erhalte ich '˚'. Auch
wenn es aussieht wie eines, dieses (U+02DA) ist nicht das gleiche wie ein
Grad-Symbol (U+00B0). Das funktioniert für andere Akzente, welche mit Dead Keys
produziert werden - AltGr und [, nur [ loslassen, dann nochmals drücken,
produziert '¨'.
</p>

<p>
AltGr kann allein mit alphabetischen Tasten benutzt werden. Beispielsweise wird
durch Drücken von AltGr und m ein kleines griechisches mu produziert: 'µ'.
AltGr und s produzieren ein scharfes s oder Esszet: 'ß'. Wie einige europäische
Nutzer erwarten würden (weil es auf ihren Tastaturen aufgedruckt ist),
produziert AltGr und 4 (oder E, abhängig vom Tastaturlayout) ein Eurozeichen,
'€'.
</p>

</body>
</section>
<section>
<title>Ressourcen</title>
<body>

<ul>
  <li>
    <uri link="http://en.wikipedia.org/wiki/Unicode">Der Wikipedia Eintrag für
    Unicode</uri>
  </li>
  <li>
    <uri link="http://en.wikipedia.org/wiki/UTF-8">Der Wikipedia Eintrag für
    UTF-8</uri>
  </li>
  <li><uri link="http://www.unicode.org">Unicode.org</uri></li>
  <li><uri link="http://www.utf-8.com">UTF-8.com</uri></li>
  <li><uri link="http://www.ietf.org/rfc/rfc3629.txt">RFC 3629</uri></li>
  <li><uri link="http://www.ietf.org/rfc/rfc2277.txt">RFC 2277</uri></li>
  <li>
    <uri
    link="http://www.tbray.org/ongoing/When/200x/2003/04/26/UTF">Characters vs.
    Bytes</uri>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
