<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- English CVS Version: 1.18 -->

<guide link = "/doc/de/portage-manual.xml">
  <title>Portage Handbuch</title>

  <author title="Author and Editor"><mail link="blocke@shivan.org">Bruce A. Locke</mail></author>
  <author title="Editor"><mail link="carl@gentoo.org">Carl Anderson</mail></author>
  <author title="Editor"><mail link="swift@gentoo.org">Sven Vermeulen</mail></author>
  <author title="Editor"><mail link="peesh@gentoo.org">Jorge Paulo</mail></author>
  <author title="Übersetzung"><mail link="sebastian@beneke-it.de">Sebastian Beneke</mail></author>
  <author title="Übersetzung"><mail link="jazz_rabbit@berlios.de">Erwin Hengl</mail></author>
  <author title="Übersetzung"><mail link="kontakt@hendrik-brandt.de">Hendrik Brandt</mail></author>
  <author title="Korrektur"><mail link="pylon@gentoo.org">Lars Weiler</mail></author>

  <abstract>Dieses Handbuch liefert einen generellen Überblick über Portage,
  detaillierte Informationen, sowie eine Anleitung zur Installation und
  Pflege von Paketen des Portage Systems.</abstract>

  <version>0.9.8</version>
  <date>15. September 2003</date>

  <chapter>
    <title>Portage: Ein Überblick</title>
    <section>
      <title>Überblick</title>
      <body>

        <p>Portage ist ein sehr mächtiges und fortgeschrittenes
        Paket-Management-System.  Seine Flexibilität und Fähigkeit als einfaches
        Werkzeug zum Kompilieren von Software oder als Herzstück einer
        brandaktuellen Linux Distribution zu dienen, ist nahezu einzigartig. Die
        Gentoo Linux Distribution wurde um Portage herum entwickelt.</p>

        <p>Gentoo Linux wird oftmals als "Meta-Distribution" bezeichnet. Gentoo
        besteht aus Portage und über 4000 Anleitungen zum Kompilieren von
        Paketen, sogenannten <i>ebuilds</i>. Diese <i>ebuilds</i> geben Portage
        die Anweisungen wie ein bestimmtes Softwarepaket kompiliert und
        installiert werden soll. Durch die Benutzung von <i>Profilen</i> und dem
        Kommandozeilen Programm <i>emerge</i> können Benutzer und Entwickler
        Portage dazu nutzen um die Pakete zu installieren und zu pflegen, die
        die Grundlage des Betriebssystems und der darauf laufenden Anwendungen
        darstellen.</p>

        <p>Ein Gentoo Linux wird "on-the-fly" kompiliert, d.h. direkt auf den
        entsprechenden Rechner angepasst und erstellt. Der Installationsprozess
        umfasst das Erstellen eines funktionierenden Compilers sowie einer
        minimalen Umgebung, in der Portage Quellcode aus dem Internet laden
        kann, um den Rest des "Systemkerns" und etwaige Anwendungen zu
        installieren. Auch wenn Portage die Benutzung von vorkompilierten
        Anwendungen unterstützt, stellt diese nur einen Kompromiss dar und wird
        nur zur Installation auf langsamen Maschinen bzw. von Entwicklern die
        schnell ein bestimmtes Paket wiederherstellen wollen verwendet.
        Desweiteren gibt es einem die Möglichkeit, Pakete auf einer schnellen
        Maschine zu kompilieren, um sie dann auf einem langsamen Rechner zu
        installieren.</p>

        <p>Durch das "on-the-fly" Kompilieren und die starke Konfigurierbarkeit
        von Portage, sind nur sehr wenige Gentoo Installationen gleich. Im
        Grunde wird bei der Installation von Gentoo Linux eine angepasste Linux
        Distribution erstellt, die sich an den Optionen, wie sie in der Portage
        Konfiguration und den ebuilds selber definiert sind, orientiert.</p>

        <p>Auf den ersten Blick mag die Idee hinter Portage ähnlich dem BSD
        Ports System sein.  Beide kompilieren Pakete aus den Sourcen und
        erlauben dem Benutzer Software sicher zu installieren bzw. zu
        deinstallieren.  Und beide lösen Abhängigkeiten automatisch auf.  Viele
        Ideen von Portage wurden beim BSD Ports System ausgeliehen, jedoch
        handelt es sich bei Portage definitiv nicht um eine weitere
        "Ports-Kopie".</p>

        <p>Das Portage System ist eine Verbindung aus einem auf Python
        basierenden Kern und auf Bash Scripten basierten <i>ebuilds</i>.
        Anstatt mit Makefiles und dem <i>make</i> Kommando zu hantieren,
        verbindet Portage die Möglichkeiten von Python und das einfach zu
        handhabende Shellscripting mit einigen objektbasierten Eigenschaften, um
        ein einzigartig mächtiges System zu erstellen. Dieses setzt Portage an
        die Spitze aller aktuellen Ports Systeme.</p>

        <p>Einige der von Portage angebotenen erweiterten Funktionen sind die
        Möglichkeit verschiedene Versionen und Überarbeitungen des gleichen
        Pakets zu halten, Auflösung der entsprechenden Abhängigkeiten,
        feinstrukturiertes Paketmanagement, sichere Installation via Sandbox,
        Schutz von bestehenden Konfigurationsdateien, Profile und vieles mehr.
        Viele dieser Funktionen werden noch im Laufe dieses Handbuches genauer
        erläutert.</p>

      </body>
    </section>

    <section>
      <title>Umgebungsabhängige Auflösung von Abhängigkeiten und Unterstützung
      von Features</title>
      <body>

        <p>Das Portage System ist im Hinblick auf die dem Benutzer gebotene
        Flexibilität einzigartig. Traditionelle BSD Ports Systeme tendieren dazu
        nur jeweils eine Version eines Paketes zu installieren.  Portage hat
        diese Begrenzungen nicht. Es können mehrere Versionen eines Paketes
        installiert werden. Paketabhängigkeiten (Pakete, die zum Kompilieren
        andere Pakete nötig sind) können entweder mit ihrem Namen oder mittels
        zusätzlich angehangener Versionsnummer definiert werden. Das ermöglicht
        mehrere Versionen eines Paketes zeitgleich zu pflegen.</p>

        <p>Das Abhängigkeits-System unterstützt ebenfalls umgebungbedingte
        Abhängigkeiten.  Portage hat dafür ein leistungsstarkes Konzept, die
        sogenannten <i>USE Settings</i>.  Durch ändern einer
        Konfigurations-Variablen in einer Portage Konfiguration, ist es möglich
        bestimmte Unterstützung für Funktionen oder Bibliotheken während des
        Kompilierens zu aktivieren bzw. abzuschalten. Dies ist ein sehr
        flexibles und leistungsstarkes System, welchem wir uns im nächsten
        Kapitel widmen werden.</p>

        <p>Zusätzlich unterstützt Portage Konzept der <i>SLOTs</i>. Während der
        Entwicklung von Gentoo Linux wurde klar, dass wir öfters mehrere
        Versionen bestimmter Pakete (wie z.B. Bibliotheken) benötigen, um die
        Ansprüche andere Pakete zu erfüllen. Der traditionelle Weg um dieses
        Problem zu lösen war, verschiedene Versionen eines Paketes als
        unterschiedliche Pakete mit leicht abweichenden Namen zu behandeln.</p>

        <p>Anstatt verschiedene Versionen als eigene Pakete zu behandeln,
        brachten die Entwickler Portage bei, wie mehrere Versionen eines Paketes
        gleichzeitig durch Benutztung von <i>SLOTs</i> zu handhaben sind. Als
        Beispiel sei hier die gängige Freetype Bibliothek genannt. Die 1.x Reihe
        von Freetype ist mit der 2.x Reihe inkompatibel, jedoch sind oftmals
        beide Versionen nötig, um die Abhängigkeiten verschiedener Pakete zu
        erfüllen.  Die meisten Distributionen und Ports Systeme tendieren dazu,
        ein "freetype" Paket für Freetype 1.x und ein "freetype2" Paket für
        Freetype 2.x anzubieten. Dies betrachten wir als beinahe komplett
        beschädigtes Paketmanagement System. Wir ergänzen einfach die
        <i>SLOT</i> Nummer 1 zur ersten und Nummer 2 zur zweiten Version. Mit
        dieser Information ist Portage in der Lage beide Zweige zu pflegen und,
        falls nötig, beide auf höhere Versionen zu updaten.</p>

      </body>
    </section>

    <section>
      <title>Profile</title>
      <body>

        <p>Portage unterstützt ein weiteres Konzept, sogenannte <i>Profile</i>.
        Ein Profil enthält eine Liste von Paketnamen und Versionen mit
        Anweisungen und einigen Standardoptionen, welche von Portage benutzt
        werden sollen. Ein Profil enthält Informationen welche Pakete und welche
        Versionen jeweils erlaubt bzw. verboten oder als zwingend notwendig
        behandelt werden sollen. Der Benutzer kann zwischen verschiedenen
        Profilen wechseln in dem er einfach einen Symlink ändert
        (<path>/etc/make.profile</path>).  Dieses erscheint einfach, aber es
        erlaubt Portage den Kern einer Distribution anzupassen und als
        hochwertiges Build System zu dienen.</p>

        <p>Der gesamte Aufwand, der bei der Entwicklung von Gentoo Linux
        betrieben wurde, resultiert in einer Sammlung von <i>ebuilds</i> und
        einem Profil. Dieses Profil beschreibt welche Pakete als Kernpakete für
        den Betrieb des Systems wichtig sind.  Das Profil erlaubt darüber hinaus
        den Entwicklern bestimmte Pakete zu blockieren bzw. freizuschalten.
        Dies ist auch nützlich, um defekte Pakete temporär zu deaktivieren.  Die
        <i>ebuild</i> Dateien definieren einfach nur wie bestimmte Pakete von
        Portage kompiliert und installiert werden sollen, die durch das Profil
        verlangt bzw. erlaubt werden.</p>

      </body>
    </section>
  </chapter>

  <chapter>
    <title>Portage konfigurieren</title>

    <section>
      <title>Überblick</title>
      <body>

        <p>Dieses Kapitel soll verschiedene Aspekte der Konfiguration von
        Portage abdecken, die für Benutzer wie Entwickler wichtig sind.  Portage
        ist ein sehr flexibles System und Sie müssen verstehen, wie man Portage
        richtig konfiguriert, um Ihr System genau auf Ihre Bedürfnisse abstimmen
        zu können.</p>

        <p>Bitte beachten Sie, dass in diesem Dokument der Begriff "Benutzer"
        Personen mit administrativen Rechten definiert. Um die Portage
        Konfiguration zu ändern und neue Pakete zu installieren bzw. zu
        entfernen benötigen Sie Root-Rechte.</p>

      </body>
    </section>

    <section>
      <title>Portage Konfigurations Dateien</title>
      <body>

        <p>Fast alle Konfigurations-Optionen, die weiter unten erklärt werden,
        befinden sich in den Dateien <path>/etc/make.conf</path>
        <path>/etc/make.profile/make.defaults</path> und
        <path>/etc/make.globals</path>.  <path>/etc/make.conf</path> enthält
        einige Optionen, die von Portage benutzt werden.  Portage wird erst
        aktuell gesetzte Umgebungsvariablen für jegliche Optionen überprüfen.
        Werden keine Umgebungsvariablen gefunden, wird die Datei
        <path>/etc/make.conf</path> überprüft.  Können dort auch keine Optionen
        gefunden werden, wird <path>/etc/make.profile/make.defaults</path>
        überprüft.  Ist dort ebenso keine Option vorhanden, werden die
        Standardwerte aus der <path>/etc/make.globals</path> verwendet.
        Beachten Sie, dass alle Optionen, die in <path>/etc/make.conf</path>
        definiert sind, von den Optionen, die in <path>/etc/make.globals</path>
        gemacht wurden, fast immer überschrieben werden.  Alle Optionen in
        <path>/etc/make.conf</path> und <path>/etc/make.globals</path> können
        systemweit als global betrachtet werden, solang es Portage betrifft.</p>

        <p>Wenn Sie überprüfen wollen, ob eine Option bereits definiert wurde,
        ist es zu empfehlen, dass Sie zuerst <path>/etc/make.conf</path>
        überprüfen und erst dannach <path>/etc/make.globals</path>. Sofern nicht
        anders angegeben, werden Optionen, die in <path>/etc/make.globals</path>
        definiert wurden, von den Optionen in <path>/etc/make.conf</path>
        überschrieben.</p>

      </body>
    </section>

    <section>
      <title>USE Einstellungen</title>
      <body>

        <p>Das USE-System ist eine flexible Möglichkeit, um sämtliche Features,
        direkt beim Kompilierprozess von Gentoo Linux oder später für einzelne
        Pakete ein- bzw. auszuschalten.  Dies erlaubt eine Administrierbarkeit,
        wie die Pakete in Verbindung mit den angegebenen Features in der
        USE-Variable, kompiliert werden.  Zum Beispiel, wenn ein Paket
        Unterstützung für GNOME bietet, können Sie diese abschalten, indem Sie
        in der USE-Variable <i>-gnome</i> angeben.  Wenn Sie jedoch die
        GNOME-Unterstützung für das Paket aktivieren wollen, dann setzen Sie in
        der USE-Variable <i>gnome</i> ein.</p>

        <p>Der Effekt der USE Flags auf Pakete ist abhängig davon, ob die
        Software und das ebuild Paket selbst, das jeweils gesetzte USE Flag
        unterstützten. Wenn dem nicht so ist, so bewirkt auch das jeweilige USE
        Flag nichts an der Software. Auch werden einige Paketabhängigkeiten bei
        mancher Software nicht als optional angesehen, dadurch haben gesetzte
        USE Flags keine Auswirkung auf diese vorgeschriebenen Abhängigkeiten.
        Eine Liste der USE Flags, die von einem Paket benutzt werden, kann durch
        <c>emerge --verbose --pretend ebuild</c> herausgefunden werden.</p>

        <p>Eine Liste der USE Flags, die von Gentoo Linux benutzt werden, können
        Sie aus der Datei <path>/usr/portage/profiles/use.desc</path> beziehen.
        Jedes USE Flag ist jeweils in einer Zeile mit einer zusätzlichen
        Beschreibung erklärt, welches Feature es aktiviert.</p>

        <p>Portage bestimmt, welche USE Flags ein- bzw. ausgeschaltet sind
        aufgrund einer Überprüfung von bis zu vier verschiedenen Stellen, wo USE
        definiert sein kann. Diese Stellen bewirken, dass die USE Flags, die
        dort definiert sind, "aufgestapelt" werden.  Es durchforstet jede
        einzelne Stelle und merkt sich jedes USE Flag der früheren Stellen, ob
        sie ein- bzw. ausgeschaltet sind und fügt neu gefundene Features hinzu,
        so dass es eine lange USE Variable ergibt.  Wird zum Beispiel ein
        Feature an einer früheren Stelle abgeschaltet und an der aktuellen
        Stelle, die Portage durchforstet, eingeschaltet, so wird das Feature
        trotz Abschaltens an der früheren Stelle wieder eingeschaltet.</p>

        <p>Portage überprüft die Stellen in denen USE Flags definiert werden in
        der Reihenfolge, wie sie in der Variable <i>USE_ORDER</i> in
        <path>/etc/make.globals</path> angegeben ist. Möchten Sie eine Stelle
        ausschalten, dann entfernen Sie diese einfach in <i>USE_ORDER</i>.</p>

        <p>Die folgenden Absätze beschreiben jeden Ort, der in <i>USE_ORDER</i>
        mit der Portage Standard Konfiguration definiert wurde.</p>

        <p><b>Defaults</b></p>

        <p>Portage Profile können einen Satz von standard USE Flags beinhalten.
        Diese standard Features sind bei jedem Profil dabei und werden in der
        Datei <path>make.defaults</path> angegeben. Da
        <path>/etc/make.profile</path> als eine Verknüpfung zum aktuell
        benutzten Portage Profil fungiert, ist der Satz an standard USE Flags
        des aktuellen Profils die Datei
        <path>/etc/make.profile/make.defaults</path>. Es ist nicht zu empfehlen
        Änderungen in dieser Datei vorzunehmen, da zukünftige Profiländerungen
        sie wieder überschreiben würden.</p>

        <p><b>Auto</b></p>

        <p>Diese Pakete sind in der Datei <path>use.defaults</path> im Portage
        Profil (<path>/etc/make.profile/use.defaults</path>) definiert. Jeder
        Eintrag beinhaltet eine USE Flag Bezeichnung und das dazugehörende
        Paket.  Wenn das für ein USE Flag angegebene Paket installiert ist,
        wird das Feature als eingeschaltet betrachtet.  Wenn Sie zum Beispiel
        das Paket <i>x11-base/xfree</i> installieren und das USE Flag <i>X</i>
        nicht abschalten, so wird diese solange global eingeschaltet, wie das
        Paket installiert ist.  Es ist nicht zu empfehlen, diese Datei zu
        bearbeiten da zukünftige Profiländerungen, diese überschreiben
        würden.</p>

        <p><b>Conf</b></p>

        <p>Wenn eine USE Variable in <path>/etc/make.conf</path> definiert ist,
        werden die USE Flags, die in jener Variable angegeben wurden, verwendet.
        Wenn es keine USE Variable in <path>make.conf</path> gibt, dann wird
        <path>/etc/make.globals</path> überprüft. Solch ein Eintrag könnte wie
        folgt aussehen:</p>

        <pre caption="Beispielhafte USE Variable">
USE="slang readline gpm berkdb gdbm tcpd pam libwww ssl gb tk
     lm_sensors lvm ldap tex bonobo sdl gtk xfs evo pda ldap
     mmx mitshm perl python guile ruby postgres dvd 3dnow tcl
     lcms gif sdl vorbis ogg oss libg++ directfb decss snmp
     gnome X opengl mozilla pdflib gpg -nls gd xface jpilot
     -kde -qt -esd -motif -alsa oggvorbis"
        </pre>

        <p>USE Flags werden eingeschaltet, indem Sie einfach in der USE Variable
        angegeben werden. USE Flags können jedoch auch mittels Negation durch
        ein <i>-</i> (Minus) vor dem Feature-Namen deaktiviert werden.  Zum
        Beispiel schaltet <i>gnome</i> GNOME Support ein, während <i>-motif</i>
        den MOTIF Support abschaltet.</p>

        <p>Die USE Variable in <path>/etc/make.conf</path> ist der empfohlene
        Ort, wo Sie USE Flags ein- bzw. ausschalten. Diese Datei wird nicht
        automatisch von Portage überschrieben. Es wird empfohlen, dass Sie hier
        die USE Flags eintragen, die nicht von den vorangehenden Stellen ein
        bzw. ausgeschaltet werden sollen.</p>

        <p><b>Env</b></p>

        <p>Die USE Flags kann man von Hand aus mit seiner eigenen Shell
        Umgebungsvariable überschreiben.</p>

        <pre caption="USE Flags temporär setzen">
# <i>export USE="-gnome"</i>
# <i>emerge net-im/gaim</i>

<comment>oder</comment>

# <i>USE="-gnome" emerge net-im/gaim</i>
        </pre>

        <p>Dies erlaubt die Benutzung von speziellen USE Flags für ein oder
        mehrere Pakete.  Diese von Ihnen per Hand definierten USE Flags bleiben
        bestehen, solange Sie in jener Shell Umgebung damit arbeiten.  Verlassen
        Sie Ihre Umgebung ("exit"), ist auch das von Hand gesetzte USE Flag
        weg.</p>

        <note>Auch wenn Portage die aktuellen USE Flags zum Zeitpunkt der
        Installation des Pakets speichert, so sind diese Einstellungen nicht
        dauerhaft gespeichert. Sollte dieses Paket in der Zukunft erneut
        installiert bzw. aktualisiert werden, werden nur die aktuell im System
        definierten USE Flags verwendet und keinesfalls die zum Zeitpunkt der
        Erstinstallation geltenden.</note>

      </body>
    </section>

    <section>
      <title>Compiler Optionen</title>
      <body>

        <p>Die Compiler Optionen, welche von Portage zum kompilieren von Paketen
        genutzt werden, können in <path>/etc/make.conf</path> gesetzt werden
        indem <i>CHOST</i>, <i>CFLAGS</i> und <i>CXXFLAGS</i> editiert werden.
        Die <i>CHOST</i> Einstellung gibt an, auf welcher Plattform Sie
        kompilieren.  <i>CFLAGS</i> und <i>CXXFLAGS</i> geben Compiler
        Einstellungen für C bzw. C++ an.</p>

        <p>Es werden Ihnen einige kommentierte Standard Einstellungen für
        unterschiedliche Plattformen angeboten. Diese Einstellungen können als
        getestet und stabil angesehen werden. Diese zu ändern, könnte zu Fehlern
        in der Software und dem Compiler führen. Bitte seien Sie beim Ändern der
        Standard Einstellung vorsichtig, da sie zu einem unbenutzbaren bzw.
        beschädigten System führen können.</p>

        <p>Benutzer eines Multiprozessor Systems können einige Vorteile
        erhalten, indem sie in <path>/etc/make.globals</path> die Option
        <i>MAKEOPTS</i> editieren. Diese Option wird während des
        Kompilierungsvorganges an <i>make</i> übergeben um mehrere <c>gcc</c>
        Instanzen zu aktivieren.</p>

      </body>
    </section>

    <section>
      <title>Lage der Verzeichnisse</title>
      <body>

        <p>Portage erlaubt es Ihnen zu bestimmen in welchen Verzeichnissen
        Pakete kompiliert und verschiedene Dateien gespeichert werden sollen.
        Die meisten Benutzer werden diese Optionen nicht benötigen. Folgende
        Optionen können genutzt werden:</p>

        <ul>
          <li><i>PORTDIR</i> - Position des Portage Trees</li>
          <li><i>DISTDIR</i> - Lokaler Cache der runtergeladenen Pakete</li>
          <li><i>PKGDIR</i> - Ort der lokal erzeugten tbz2 Pakete</li>
          <li><i>RPMDIR</i> - Ort der lokal erzeugten RPM Pakete</li>
          <li><i>PORTAGE_TMPDIR</i> - Temporärer Platz zum Kompilieren der Pakete</li>
          <li><i>BUILD_PREFIX</i> - Gehört zu PORTAGE_TMPDIR</li>
          <li><i>PKG_TMPDIR</i> - Gehört zu PKGDIR</li>
        </ul>

      </body>
    </section>

    <section>
      <title>Schutz der Konfigurationsdateien</title>
      <body>

        <p>Portage erlaubt den Schutz aller Konfigurationsdateien in bestimmten
        Verzeichnissen. Portage wird in geschützten Verzeichnissen keine Dateien
        überschreiben. Wenn ein Paket versucht, bereits existierende Dateien zu
        überschreiben, wird die neue Datei nach dem Muster
        <path>._cfg0000_name</path> umbenannt. Dies geschieht damit der Benutzer
        später die neue Datei einsehen kann, um die Unterschiede manuell
        einzufügen.</p>

        <p>Geschützte Verzeichnisse können über <i>CONFIG_PROTECT</i> entweder
        in <path>/etc/make.conf</path> oder <path>/etc/make.globals</path>
        definiert werden. Bestimmte Dateien und Unterverzeichnisse unterhalb
        geschützter Verzeichnisse können durch <i>CONFIG_PROTECT_MASK</i> vom
        Schutz ausgenommen werden.</p>

        <p>Das Folgende ist nur ein Beispiel und sollte nicht blind kopiert
        werden:</p>

        <pre caption="Beispielhafte Angabe zum Schutz von Konfigurationsdateien">
CONFIG_PROTECT="/etc /usr/share/config /usr/kde/2/share/config"
CONFIG_PROTECT_MASK="/etc/gconf /etc/init.d /etc/pam.d"
        </pre>

        <p>Benutzer können mehr Informationen über den Schutz von
        Konfigurationsdateien erhalten, indem sie folgendes in ihrer Shell
        eingeben:</p>

        <pre caption="Hilfe zum Schutz von Konfigurationsdateien aufrufen">
# <i>emerge --help config</i>
        </pre>

      </body>
    </section>

    <section>
      <title>FEATURES</title>
      <body>

        <p>Portage bietet eine ganze Menge Optionen, die auf Entwickler
        abzielen, welche regeln wollen wie sich Portage verhält und nach der
        Installation verschiedener Paketstufen aufräumt. Diese Optionen sollten
        nur für Entwickler interessant sein. Bei Benutzern könnten sie Probleme
        verursachen.</p>

        <p>Eine Liste einzuschaltender Funktionen kann unter <i>FEATURES</i>
        entweder in <path>/etc/make.conf</path> oder
        <path>/etc/make.globals</path> gesetzt. Hier eine Liste
        der verfügbaren Funktionen:</p>

        <ul>
          <li><i>digest</i> : Erstellt automatisch einen Digest für neue Ebuilds.</li>
          <li><i>cvs</i> : Ergänzt neue Ebuild Digests automatisch ins CVS.</li>
          <li><i>sandbox</i> : Aktiviert das Sandboxverfahren.</li>
          <li><i>noclean</i> : Portage räumt nach dem kompilieren nicht auf.</li>
          <li><i>noauto</i> : Führt keine wichtigen Ebuild Schritte automatisch aus.</li>
          <li><i>distcc</i> : Benutzt das verteilte Kompilieren mit distcc.</li>
          <li><i>ccache</i> : Behält kompilierte Objektdateien, sodass eine erneute Kompilierung weniger Zeit benötigt.</li>
          <li><i>buildpkg</i> : Erstellt Binärpakete für jedes Paket, das Sie emergen.</li>
          <li><i>userpriv</i> : Kompiliert nicht mit root-Privilegien.</li>
          <li><i>usersandbox</i> : Benutzt eine Sandbox, wenn <i>userpriv</i> aktiviert ist.</li>
          <li><i>keeptemp</i> : Entfernt nicht die temporären Dateien (${T}) nach dem mergen.</li>
        </ul>

        <p>Einige dieser Funktionen können durch Setzen der folgenden Variablen
        angepasst werden:</p>

        <ul>
          <li><i>CCACHE_SIZE</i> : Damit wird festgelegt, wie viel Platz <c>ccache</c> benutzen kann.  Standard sind 2GB.</li>
          <li><i>DISTCC_HOSTS</i> : Legt fest, welche Rechner Teil des verteilten Kompilierens mit <c>distcc</c> sind.  Alle diese Rechner müssen den <c>distccd</c> Daemon laufen haben.</li>
        </ul>

      </body>
    </section>

    <section>
      <title>Portage SYNC Einstellungen</title>
      <body>

        <p>Portage bietet die Möglichkeit den Portage Tree mittels<c>rsync</c>
        aufzufrischen.  Finden Sie einen anderen Weg, können Sie angeben, welche
        Methode Portage verwenden soll, indem Sie ihn in der <i>SYNC</i> Option
        in der <path>/etc/make.conf</path> angeben.</p>

        <p><b>RSYNC</b></p>

        <p><c>rsync</c> ist der gewöhnliche Weg Ihren Portage Tree aktuell zu
        halten.  Die rsync Methode wird in der <path>/etc/make.conf</path>
        gesetzt:</p>

        <pre caption="Den Portage Tree mittels rsync aktuell halten">
SYNC="rsync://rsync.gentoo.org/gentoo-portage"
        </pre>

        <note>Die rsync-Methode überschreibt blind alle Veränderungen, die an
        Ihrem lokalen Portage Tree vorgenommen wurden. Falls Sie lokale
        Änderungen behalten möchten, müssen Sie
        PORTDIR_OVERLAY="/ein/verzeichnis/fuer/Ihre/Aenderungen" setzen.</note>

        <p><b>Entwickler CVS</b></p>

        <p>Entwickler mit vollem Zugang zum CVS können auch per <i>emerge</i>
        den lokalen Tree mit dem CVS abgleichen lassen, welches sie mittels SSH
        erreichen können.</p>

        <p>Laden Sie einfach den CVS Tree mittels Ihres Accounts herunter
        ("checkout"), verschieben Sie diesen nach <path>/usr/portage</path> und
        benutzen Sie folgende <i>SYNC</i> Option:</p>

        <pre caption="Den Portage Tree mittels Entwickler-CVS aktuell halten">
SYNC="cvs://Ihr_account@cvs.gentoo.org:/home/cvsroot"
        </pre>

      </body>
    </section>

    <section>
      <title>Spiegelungen (Mirrors)</title>
      <body>

        <p>Das Gentoo Projekt bietet eine lokale Spiegelung von allen
        Quellpaketen, die in ebuilds im Portage Tree angegeben sind. Meistens
        werden Source Tar-Archive usw. auf langsamen Servern gespeichert, die
        ziemlich oft ausfallen können. Auch Entwickler entfernen regelmässig
        alte Versionen Ihrer Software von FTP-Servern, wenn neue Versionen
        herausgegeben werden. Um das Leben von Benutzer, die die Gentoo
        Distribution nutzen, zu erleichtern, spiegeln wir diese Dateien. Das
        erlaubt ein schnelleres und sicheres Herunterladen der Archivdateien von
        Spiegel-Servern, die näher an Ihrem Standort liegen.</p>

        <p>Wann auch immer Sie ein Paket mergen und dazu das Quellpaket
        benötigen, versucht Portage zu allererst unseren Spiegel-Server für die
        angeforderten Dateien zu erreichen. Wenn sich auf diesem Server die
        benötigten Dateien nicht befinden, versucht Portage den jeweiligen HTTP-
        oder FTP-Server, der im ebuild angegeben ist.</p>

        <p>Die Angabe des Spiegel-Server, den Portage benutzt, erfolgt in der
        <i>GENTOO_MIRRORS</i> Option, die sich in der Datei
        <path>/etc/make.conf</path> befindet.  Das Folgende ist die standard
        Einstellung:</p>

        <pre caption="Download-Mirrors angeben">
GENTOO_MIRRORS="http://www.ibiblio.org/gentoo"
        </pre>

        <p>Für einen Gentoo-Spiegel-Server in Ihrer Nähe, besuchen Sie die
        Gentoo Webseite oder fragen Sie in der lokalen Mailingliste nach einem
        für Sie günstigeren Server.  Das Programm <c>mirrorselect</c> überprüft
        anhand von pings, welcher der für Sie am schnellsten erreichbare Server
        ist und fügt optional eine Liste von Servern in die GENTOO_MIRRORS
        Option in der <path>/etc/make.conf</path> ein.  Schauen Sie in die <uri
        link="gentoo-x86-install.xml">Installationsanleitung</uri> für die
        Benutzung von <c>mirrorselect</c>.</p>

      </body>
    </section>

    <section>
      <title>Download-Programm</title>
      <body>

        <p>Das Programm, das Portage zum Download der benötigten Dateien
        verwendet, kann durch die Optionen <i>FETCHCOMMAND</i> und
        <i>RESUMECOMMAND</i> angegeben werden. Einige Beispiele werden in
        <path>/etc/make.conf</path> und <path>/etc/make.globals</path> gezeigt.
        Als Standardprogramm verwendet Portage <c>wget</c>, welches den meisten
        Anforderungen genügen sollte.</p>

        <note>Portage gibt Informationen über HTTP und FTP Proxies an das
        jeweilige Download-Programm weiter, die in den HTTP_PROXY und FTP_PROXY
        Optionen definiert sind.</note>

      </body>
    </section>

    <section>
      <title>Proxies</title>
      <body>

        <p>Portage kann angewiesen werden, zum Download HTTP oder FTP Proxies zu
        nutzen. Die Proxies können bei den Optionen <i>HTTP_PROXY</i> und
        <i>FTP_PROXY</i> entweder in <path>/etc/make.conf</path> oder in
        <path>/etc/make.globals</path> angegeben werden. Auch hier sollten die
        Einstellungen vorzugsweise in <path>/etc/make.conf</path> erfolgen. Wenn
        HTTP und FTP über den gleichen Proxy erfolgen soll, können Sie auch
        einfach die Option <i>PROXY</i> nutzen.</p>

        <p>Im Folgenden ein Beispiel:</p>

        <pre caption="HTTP- und FTP-Proxies setzen">
HTTP_PROXY="http://192.168.1.1:8080"
FTP_PROXY="http://192.168.1.1:8080"

oder

PROXY="http://192.168.1.1:8080"
        </pre>

        <p>Portage kann zusätzlich angewiesen werden einen HTTP Proxy zur
        Verwendung von rsync zu nutzen. Dies kann durch die Option
        <i>RSYNC_PROXY</i> in <path>/etc/make.conf</path> oder als
        Umgebungsvariable aktiviert werden.</p>

        <p>Im Folgenden ein Beispiel:</p>

        <pre caption="RSYNC-Proxy setzen">
RSYNC_PROXY="192.168.1.1:8080"
        </pre>

        <note>Sollten Sie hinter einer Firewall sitzen und rsync scheint Ihren
        HTTP Proxy nicht nutzen zu können, können Sie Ihren Portage Tree durch
        einen Snapshot Tar-Archiv updaten.  Schauen Sie in unsere <uri
        link="/doc/en/faq.xml#doc_chap4_sect10">FAQ</uri> für weitere
        Informationen.</note>

      </body>
    </section>

    <section>
      <title>Verschiedene Optionen</title>
      <body>

        <p>Die folgenden Optionen können für einige Nutzer sinnvoll sein:</p>

      <ul>
        <li><i>NOCOLOR</i> : Erlaubt es dem Benutzer, das Verwenden von Farben
        bei Ausgaben von emerge zu deaktivieren.</li> 
        <li><i>CLEAN_DELAY</i> : Dadurch verzögert Portage das Entfernen von
        Paketen, um Nutzern die Möglichkeit zum Abbruch zu geben. Diese Zeit
        kann hier angegeben werden. Zum Abschalten der Verzögerung setzen Sie
        den Wert auf "0".</li>
      </ul>

      </body>
    </section>
  </chapter>

  <chapter>
    <title>Paketmanagement</title>

    <section>
      <title>Updaten des Portage Trees</title>
      <body>

        <p>Der Portage Tree, der in <path>/usr/portage</path> liegt, enthält die
        Bibliothek der "Bauanleitungen" für verschiedene Pakete (sogenannte
        <i>ebuilds</i>). Darüber hinaus enthält der Tree auch noch Informationen
        zu dem Profil und der <path>package.mask</path>, die wichtig sind, um
        das System aktuell zu halten. Um immer die aktuellsten Versionen und
        neuesten Bugfixes zu haben, ist es wichtig den Tree regelmäßig mit dem
        offiziellen Tree abzugleichen. Sie können den Portage Tree mittels
        folgendem Kommando updaten:</p>

        <pre caption="Den Portage-Tree updaten">
# <i>emerge sync</i>
        </pre>

        <p>Die von Portage genutzte Methode, kann geändert werden.  Schauen Sie
        unter <i>Portage SYNC Einstellungen</i> im Kapitel <i>Portage
        konfigurieren</i> nach, um weitere Informationen zu erhalten.</p>

      </body>
    </section>

    <section>
      <title>Pakete installieren (mergen)</title>
      <body>

        <p>Der Vorgang des Kompilierens und Installierens eines Paketes durch
        Portage wird als <i>mergen</i> bezeichnet. Portage kompiliert Pakete und
        installiert diese temporär in ein "Abbild-Verzeichnis", in dem es die zu
        installierenden Dateien aufzeichnet. Diese Dateien werden dann aus dem
        "Abbild-Verzeichnis" ins Root (/) Dateisystem integriert (gemerged).</p>

        <p>Das <i>emerge</i> Kommando dient als Front-End des Portage Systems.
        Das Installieren und Entfernen von Paketen wird durch dieses Kommando
        und seine diversen Argumente kontrolliert.</p>

        <p>Um die neueste, unmaskierte Version eines Paketes zu installieren,
        geben Sie einfach den Paketnamen, wie folgt ein (Beispiel):</p>

        <pre caption="Ein Paket installieren">
# <i>emerge galeon</i>
        </pre>

        <p>Dieses Kommando wird zunächst alle benötigten Abhängigkeiten (unter
        Berücksichtigung der USE Flags) und dann die neueste und unmaskierte
        Version von Galeon kompilieren und installieren. Galeon könnte auch mit
        vollem Namen inklusive Kategorie angegeben werden:
        <i>net-www/galeon</i></p>

        <p>Das <i>emerge</i> Kommando akzeptiert auch die direkte Angabe von
        ebuilds.  Dies erlaubt dem Benutzer auch ältere Versionen eines
        bestimmten Paketes oder ebuilds von Drittanbietern zu installieren.  Das
        Folgende ist ein Beispiel:</p>

        <pre caption="Ein Paket unter Angabe der Version installieren">
# <i>emerge /usr/portage/net-www/galeon/galeon-1.2.0-r3.ebuild</i>
        </pre>

        <p>Zusätzlich zur Angabe des Paketnamen oder ebuild, unterstützt
        <i>emerge</i> verschiedene weitere Argumente. Eines dieser Argumente ist
        <i>--pretend</i>, vielleicht eines der nützlichsten. Durch dieses
        Argument wird das geplante Vorgehen nicht durchgeführt.  Stattdessen
        gibt Portage eine Liste aller zu installierenden Pakete aus.  Das
        Folgende zeigt eine Auflistung der Pakete, die während der Installation
        der neuesten Version des Kdevelop Paketes installiert würden:</p>

        <pre caption="Darstellung der zu installierenden/aufzufrischenden Pakete">
# <i>emerge --pretend kdevelop</i>

These are the packages that I would merge, in order.

Calculating dependencies ...done!
[ebuild  N   ] kde-base/kdelibs-2.2.2-r4 to /
[ebuild  N   ] dev-util/kdbg-1.2.2 to /
[ebuild   U  ] app-text/psutils-1.17 to /
[ebuild   U  ] app-text/a2ps-4.13b-r3 to /
[ebuild   U  ] app-text/jadetex-2.20 to /
[ebuild  N   ] app-text/sgmltools-lite-3.0.3-r2 to /
[ebuild  N   ] kde-base/kdoc-2.2.2-r1 to /
[ebuild  N   ] net-www/htdig-3.1.5-r2 to /
[ebuild  N   ] app-text/enscript-1.6.3-r1 to /
[ebuild  N   ] kde-base/kdebase-2.2.2-r2 to /
[ebuild  N   ] app-doc/qt-docs-2.3.1 to /
[ebuild  N   ] dev-util/kdevelop-2.0.2 to /
        </pre>

        <p>Mit <i>N</i> gekennzeichnete Pakete sind noch nicht auf ihrem Rechner
        installiert, würden aber durch die angegebene Aktion eingespielt werden.
        Pakete, die mit einem <i>U</i> gekennzeichnet sind, befinden sich
        bereits in einer älteren Version auf Ihrem System und werden durch diese
        Aktion aktualisiert.</p>

        <p>Folgende Parameter sind ausserdem Verfügbar:</p>

        <p><i>--fetchonly</i> : Lädt alle benötigten Dateien herunter, die für
        das Kompilieren notwendig sind, sowie alle Abhängigkeiten, die dadurch
        entstehen.</p>

        <p><i>--emptytree</i> : Diese Option lässt Portage vortäuschen, dass
        keine der Abhängigkeiten oder Pakete, auf denen das zu installierende
        Paket beruht, installiert sind.  Dies lässt sich sehr gut mit der Option
        <i>--pretend</i> verbinden, um eine komplette Liste der Abhängigkeiten
        für jedes einzelne Paket anzeigen zu lassen. Alle Abhängigkeiten mit
        Ausnahme von <c>glibc</c> werden dargestellt.</p>

        <p><i>--nodeps</i> : Mit dieser Option versucht Portage nur die
        angegebene Pakete zu "mergen" und ignoriert sämtliche Abhängigkeiten.
        Bitte beachten Sie, dass diese Option zu Problemen führen kann, wenn Sie
        die Pakete, von denen das jeweilige Paket abhängig ist, nicht bereits
        installiert haben.</p>

        <p><i>--onlydeps</i> : Mit dieser Option ist es möglich, nur die
        Abhängigkeiten des jeweiligen Paketes zu "mergen", jedoch <e>nicht</e>
        das ausgewählte Paket selbst.</p>

        <p><i>--noreplace</i> : Wenn Sie Pakete zum "mergen" angeben, die
        bereits installiert sind, Sie jene aber nicht durch neue ersetzen
        wollen, hilft Ihnen diese Option weiter.</p>

        <p><i>--usepkg</i> : Anstatt das angegebene Paket zu kompilieren,
        versucht Portage mit dieser Option ein vorkompiliertes tbz2 Paket von
        einer angegebenen Stelle zu installieren . Jene Stelle ist in der PKGDIR
        Shellumgebungsvariable anzugeben.</p>

        <p><i>--debug</i> : Um eine noch detailiertere Ausgabe zu bekommen, was
        während der Aktion mit Portage passiert, benutzen Sie diese Option.
        Normalerweise werden Ausgaben "menschlich lesbarer" dargestellt. So
        haben Sie zum Beispiel als Entwickler die Möglichkeit, syntaktische
        Fehler in den Bash Script basierten ebuild Dateien zu finden.</p>

        <p><i>--autoclean</i> : Zwingt <i>emerge</i> zum totalen Bereinigen von
        paketspezifischen temporären Verzeichnissen für Kompiliervorgänge, bevor
        das Paket kompiliert wird. Portage erledigt dies bei der standard
        Konfiguration von selbst, dadurch ist diese Option nur für Entwickler
        interessant, die dieses Verhalten abgeschaltet haben.</p>

        <p><i>--verbose</i> : Sagt <i>emerge</i>, dass es im ausführlichen Modus
        laufen soll.  Zusammen mit <i>--pretend</i> werden die möglichen USE
        Flags ausgegeben.</p>

      </body>
    </section>

    <section>
      <title>"Unmergen" (Deinstallieren) von Paketen</title>
      <body>

        <p> Der Vorgang des "unmergens" ist, dass die Dateien, die mit einem
        installierten Paket verbunden sind, gelöscht werden. Damit ist die
        Software vom System entfernt und kann nicht mehr benutzt werden, bis Sie
        jenes Paket wieder "mergen".</p>

        <p>Pakete werden mittels des <i>emerge</i> Befehls und dem Parameter
        <i>unmerge</i>, gefolgt vom Namen des Paketes entfernt. Das folgende
        Beispiel beseitigt alle installierten Versionen vom <i>ltrace</i>
        Paket.</p>

        <pre caption="Ein Paket deinstallieren">
# <i>emerge unmerge ltrace</i>

<comment>oder</comment>

# <i>emerge unmerge dev-util/ltrace</i>
        </pre>

        <p>Portage erlaubt ausserdem das "unmergen" von spezifischen Versionen
        eines Paketes.  Bereiche werden durch <i>=</i> (exakte version),
        <i>&lt;</i> (kleiner als), <i>&gt;</i> (größer als),
        <i>&lt;=</i>(kleiner als oder gleich), und <i>&gt;=</i> (größer als oder
        gleich) dargestellt.  Das folgende Beispiel würde alle Versionen, die
        gleich und älter des Paketes ltrace in der Version 0.3.15 sind,
        "unmergen".</p>

        <pre caption="Bestimmte Versionen eines Pakets deinstallieren">
# <i>emerge unmerge \&lt;=dev-utils/ltrace-0.3.15</i>
        </pre>

        <p>Wenn Sie Bereiche für Pakete benutzen, so stellen Sie sicher, das Sie
        jeweils für die Zeichen <i>&gt;</i> und <i>&lt;</i> ein Backslash
        davorsetzen, sodass Ihre Shell in diesem Fall dies nicht falsch
        interpretiert.  Ausserdem ist es von Nöten, die Kategorie des Paketes,
        wie im Beispiel gezeigt, anzugeben. Für andere Beispielausdrücke zu
        Bereichen, führen Sie den Befehl <i>emerge --help</i> aus.</p>

        <warn>Das "unmergen" von Paketen kann gefährlich sein.  Wenn Sie ein
        Paket des Grundsystems entfernen, verliert Ihr System an Funktionalität
        und bei entfernten Bibliotheken droht funktionsuntüchtige Software.
        <b>Portage warnt Sie nicht, wenn Sie Pakete des Grundsystems oder gar
        Abhängigkeiten anderer Pakete entfernen.</b></warn>

        <p>Wenn das zu entfernende Paket tatsächlich installiert ist, wird das
        Programm emerge exakt anzeigen, welche Pakete entfernt werden und wartet
        eine gewisse Anzahl an Sekunden ab, um den Benutzer die Möglichkeit zu
        geben, den Vorgang mittels der Tastenkombination Control-C
        abbzubrechen.</p>

        <p>Beginnt erstmal der Vorgang des "unmergens", sehen Sie eine lange
        Liste von Dateinamen, die mit dem Paket verbunden sind.  Manche dieser
        Dateinamen haben ein Merkmal (flag), das an der linken Seite der Datei
        angezeigt wird. Die Merkmale <i>!mtime</i>, <i>!empty</i>, und
        <i>cfgpro</i> verdeutlichen, weshalb einige Dateien nicht entfernt worden
        sind, als das Paket "unmerged" wurde.  Dateien ohne jegliche Merkmale
        wurden erfolgreich vom System entfernt.</p>

        <p>Das Merkmal <i>!mtime</i> sagt aus, dass die Datei nach der
        Installation des Pakets geändert wurde.  Das bedeutet, dass jemand nach
        dem "mergen" des Paketes diese Datei bearbeitet hat oder zu einem
        späteren Zeitpunkt andere Pakete sie überschrieben haben.  Dies erlaubt
        es, dass Pakete aktualisiert werden können, ohne die Gefahr, dass
        wichtige Dateien entfernt werden.</p>

        <p>Das Merkmal <i>!empty</i> weist auf Verzeichnisse hin, welche Portage
        verbietet zu entfernen, da sie nicht leer sind (mehrere Pakete teilen
        sich oft das selbe Verzeichnis, welches das Paket, was "unmerged" wird,
        entweder selbst gehört oder ebenfalls benutzt).  Der Konfigurationsdatei
        Schutz-Mechanismus tritt dann ein, wenn Sie das <i>cfgpro</i> Merkmal
        sehen. Das bedeutet, ein neueres Paket, was installiert wird, übernimmt
        den Besitz jener Konfigurationsdateien und Portage verweigert die
        Entfernung dieser Dateien.</p>

        <warn>Dateien werden immer dem letzten installierten Paket zugeordnet.
        Dies ist abhängig von der Reihenfolge der Installation und unabhängig
        von der aktuellen Versions- oder Revisionsnummer der Pakete, die
        installiert sind. Wenn ein Paket eine Datei besitzt, wird diese immer
        mit deinstalliert, auch wenn eine ältere Version eines Paketes diese
        Datei installiert hat, solange der Nutzer diese Datei nicht manuell
        geändert hat.</warn>

      </body>
    </section>

    <section>
      <title>System Update</title>
      <body>

        <p>Portage unterstützt die Möglichkeit installierte Pakete mit einem
        einzigen Befehl zu aktualisieren. Das System-Update-Feature ermöglicht
        es Ihnen, die Kernpakete ihres Systems zu Versionen zu aktualisieren,
        die von den Gentoo-Entwicklern empfohlen werden und zum einwandfreien
        Betrieb von Gentoo Linux notwendig sind. Ein System-Update aktualisiert
        nur Pakete, die als essentiell angesehen werden.  Also nur die Pakete,
        die im Portage Profil angegeben sind, werden als absolut wichtig für den
        Betrieb und die Aktualität des Systems erachtet.</p>

        <p>Um ein System-Update zu starten, geben sie den folgenden Befehl
        ein:</p>

        <pre caption="Das Kernsystem aktualisieren">
# <i>emerge --update system</i>
        </pre>

        <p>Portage wird nun, abhängig von den Versionen und Paketen, welche sie
        derzeit installiert haben, die Updates kompilieren und installieren, die
        vom aktuellen Portage-Profil empfohlen werden. Sie haben die Möglichkeit
        sich mit der Option <i>--pretend</i> eine Liste mit den Paketen die
        installiert bzw. aktualisiert werden, ausgeben zu lassen, wenn das oben
        gezeigte Beispiel ausgeführt würde.</p>

        <note>Wie sie aus der Gentoo-Installationsanleitung erfahren können, ist
        einer der ersten Schritte der Befehl <i>emerge system</i>, um das
        Grundsystem zu installieren. Mit <i>emerge --update system</i> werden
        diese Basispakete auf den aktuellsten Stand gebracht.</note>

      </body>
    </section>

    <section>
      <title>World Update</title>
      <body>

        <p>Portage unterstützt außerdem die Möglichkeit, alle nicht-essentiellen
        Pakete mit einem einzigen Befehl zu aktualisieren. Das Portage-System
        besitzt dafür einen gewissen Grad an "Intelligenz", die es ermöglicht,
        ein System mit verschiedene Versionen von Paketen, die in Konflikt
        zueinander stehen, sicher zu aktualisieren .</p>

        <p>Das world-update-Feature von Portage überprüft das Systemprofil, die
        Liste der blockierten Pakete (<path>package.mask</path>), das
        world-Profil und die Abhängigkeiten (inkl. Versionkontrolle) von
        Paketen, die im world-Profil stehen. Dadurch findet es heraus, welche
        Pakete aktualisiert werden müssen. Ein Paket wird nur aktualisiert, wenn
        es eine neue Version gibt und das Paket im world-Profil aufgeführt wird
        oder ein anderes Paket, das im world-Profil steht von ihm abhängt.
        Selbstverständlich darf das Paket oder eine spezielle Version dessen
        nicht durch das Systemprofil oder die <path>package.mask</path>
        blockiert sein.</p>

        <p>Portage versucht nun alle Pakete, die im world-Profil aufgeführt sind
        auf die neuste verfügbare und unblockierte Version zu aktualisieren.
        Desweiteren überprüft Portage auch die Abhängigkeiten von jedem Paket im
        world-Profil und wird versuchen diese auf die neuste Version zu
        aktualisieren. Dabei wird eine Versionkontrolle durchgeführt, sodass die
        Versionhierachie bestehen bleibt. Außerdem dürfen diese Pakete weder
        durch das Systemprofil noch durch <path>package.mask</path> blockiert
        sein.  Schließlich werden die <i>SLOTs</i> überprüft, die in einem
        vorangegangenen Kapitel besprochen wurden.</p>

        <p>Benutzer, die andere Distributionen und ihre Paket-Management-Systeme
        neben Portage kennen, sind vielleicht etwas darüber irritiert, dass
        Portage nicht nur ein blindes Aktualisieren der Pakete vornimmt, einfach
        nur anhand der Versionsnummern (Wie es bis Gentoo 1.0 gehandhabt
        wurde).</p>

        <p>Viele der Pakete, die in Gentoos Portage-Tree sind, stehen in
        verschiedenen Versionen zur Verfügung. Eine ältere oder neuere Version
        eines Paketes kann mit der Software, die auf sie aufbaut inkompatibel
        sein. Blindes Aktualisieren von Bibliotheken und Programmen, ohne
        Rücksicht darauf, dass sie von anderen Paketen gebraucht werden, kann
        schnell zu vielen schwerwiegenden Problemen führen. Um dies zu
        verhindern lässt Portage beim Aktualisieren Vorsicht walten und bezieht
        die Abhängigkeiten aller Pakete, basierend auf den Angaben in den
        einzelnen ebuilds, mit ein.</p>

        <p>Das Herz von Portages-World-Update ist das World-Profil. Anders als
        das System-Profil, welches nur von den Entwicklern gewartet wird und
        nie vom Benutzer verändert werden sollte, wird das World-Update-Profil
        indirekt mit der Zeit durch Aktionen des Benutzers erstellt. Das
        world-Profil funktioniert in etwa wie eine "Favoriten-Liste". Pakete die
        vom Benutzer manuell mit Hilfe von <c>emerge</c> installiert werden,
        werden in der Datei <i>world</i> aufgezeichnet. Diese Datei findet sich
        unter <path>/var/cache/edb/world</path>. Portage macht dies, da sie ihm
        mitgeteilt haben es zu installieren (per emerge) und es annimmt, dass
        sie ein Interesse daran haben, das Paket immer auf dem aktuellsten Stand
        zu halten.</p>

        <p>Die <i>world</i> Datei besteht aus einem Paketnamen mit Kategorie pro
        Zeile und sollte in etwa wie folgt aussehen:</p>

        <pre caption="Inhalt einer world Datei">
net-im/gaim
net-www/skipstone
net-www/galeon
app-editors/vim
app-text/ispell
net-mail/evolution
dev-util/ltrace
sys-fs/xfsprogs
=net-www/mozilla-0.9.8-r3
sys-apps/attr
sys-apps/dmapi
sys-kernel/linux-sources
sys-apps/acl
app-office/gnucash
app-cdr/xcdroast
        </pre>

        <p>Nahezu alle Einträge in diesem Beispiel wurden von Portage
        automatisch hinzugefügt, als der Benutzer eines der Pakete manuell
        "ein-merge-te". Diese Pakete werden aktualisiert, wenn eine neuere
        Version verfügbar ist.</p>

        <note>Um Zeit zu sparen und sicher zu stellen, dass alle Ihre
        bevorzugten Pakete aktuell gehalten werden, können Sie die <i>world</i>
        Datei selbst bearbeiten und so Einträge für diese Pakete hinzufügen.
        Wenn Sie eine älteren Version von Portage aktualisieren, müssen sie das
        world-Profil erstellen und dem System bekannt machen. Bei aktuellen
        Installationen von Gentoo und Portage sollte das world-Profil während
        der Installation erzeugt werden.</note>

        <p>Ein interessanter Eintrag ist der für das Mozilla-Paket
        (<i>=net-www/mozilla-0.9.8-r3</i>). Dieser Eintrag wurde von Hand
        hinzugefügt, um eine exakte Version festzulegen. Paketeinschränkungen,
        wie sie im Abschnitt "Unmergen (Deinstallieren) von Paketen" in diesem
        Handbuch besprochen wurden, können dazu verwendet werden, Portage zu
        zwingen nur spezielle Versionen beim Aktualisieren von Paketen zu
        verwenden. Der obige Eintrag hat z.B. den Effekt, dass Portage auf das
        Paket mozilla-0.9.8-r3 als einzig verfügbare Version festgelegt ist.
        Somit wird dieses Paket im Verlaufe eines World-Update nie aktualisiert
        werden.</p>

        <p>World-Updates werden durch den folgenden Befehl gestartet:</p>

        <pre caption="World Update ausführen">
# <i>emerge --update world</i>
        </pre>

        <p>Portage wird nun versuchen alle Pakete die in der <i>world</i> Datei
        stehen und (wenn nötig) deren Abhängigkeiten aktualisieren.
        Abhängigkeiten werden auf die neueste verfügbare Version, die vom zu
        aktualisierenden Paket gebraucht wird, gebracht. Pakete die nicht in der
        <i>world</i> Datei aufgeführt sind und keine Abhängigkeiten von den
        voher genannten Paketen sind, werden nicht aktualisiert.</p>

        <warn>Portage wird keine Dateien in Verzeichnissen überschreiben, die
        durch die "Configuration File Protection" (Schutz von
        Konfigurationsdateien) geschützt sind. Es ist notwendig, dass Sie selbst
        die Unterschiede zwischen Ihren bestehenden und den neuen Dateien, die
        von Portage generiert wurden, ausgleichen. Wenn Sie Ihre
        Konfigurationsdateien nicht aktualisieren, werden verschiedene Programme
        nicht mehr funktionieren. Bitte schauen sie für weitere Informationen
        unter "Schutz der Konfigurationsdateien" im Kapitel "Portage
        konfigurieren" nach oder benutzen sie den Befehl <c>emerge --help
        config</c>.</warn>

        <p>Um eine Liste mit den Paketen zu sehen, die von einem World-Update
        betroffen sind, können Sie das Argument <i>--pretend</i> verwenden, so
        wie es bereits in einem vorangegangen Abschnitt in diesem Kapitel
        besprochen wurde.</p>

        <note>Durch ein World-Update wird gleichzeitig auch ein System-Update
        durchgeführt. Außerdem können Kernpakete nicht auf bestimmte Versionen
        in der <i>world</i> Datei festgelegt werden, da sie vom aktuellen
        Portage-Profil immer überschrieben werden!</note>

        <p>Ein praktischer Nebeneffekt der Art wie World-Update arbeitet, ist
        für Benutzer interessant, die ein komplettes neu-Kompilieren aller
        installierten Pakete auf einem System wünschen. Da World-Update alle
        Pakete und deren Abhängigkeiten, die in der Datei <i>world</i> stehen
        aktualisiert, gibt einem die Option <i>--emptytree</i> die Möglichkeit
        eine neu-Kompilierung sämtlicher Pakete und aller Abhängigkeiten - mit
        Ausnahme der glibc - zu erzwingen. Das ist z.B. für Leute nützlich, die
        ihre Compiler-Optionen oder ihre USE Variable geändert haben und
        wollen, dass diese Veränderungen von der gesamten Software die sie
        benutzen verwendet wird - ohne dass sie nun jedes Paket selbst erneut
        "mergen" müssen. Dazu müssen sie einfach die Datei <i>world</i> mit
        allen Paketen, die sie verwenden auffüllen und den folgenden Befehl
        verwenden:</p>

        <pre caption="Das System komplett neu kompilieren">
# <i>emerge --update world --emptytree</i>
        </pre>

        <p>Sie können die Option <i>--pretend</i> mit diesem Befehl verwenden,
        um eine Liste mit den Paketen, welche neu-Kompiliert werden, zu
        bekommen.</p>

      </body>
    </section>

    <section>
      <title>System aufräumen</title>
      <body>

        <p>Portage hat die Fähigkeit verschiedene Versionen eines Paketes
        parallel zu installieren. Es gibt einige Pakete in Gentoos Portage-Tree
        die diese Funktion nutzen (z.B. zur Kompatibilitätssicherung, wenn
        ältere Programme mit neueren Versionen inkompatibel sind).</p>

        <p>Denken Sie daran, dass wenn eine neuere Version eines Paketes
        installiert wird, in den meisten Fällen ein Großteil des älteren Paketes
        überschrieben wird und alles was zurückbleibt sind einige
        Dokumentationsdateien und andere für das System unwichtige. Mit der Zeit
        können diese "Dateileichen" sehr viel Festplattenplatz verschwenden.</p>

        <p>Um dies zu verhindern bietet Portage einen einfachen Weg an,
        Rückstände veralteter Dateiversionen vom Benutzersystem zu entfernen.
        Diese Funktionalität ergibt sich aus der emerge-Option <i>clean</i> und
        kann folgendermaßen benutzt werden:</p>

        <pre caption="Das System aufräumen">
# <i>emerge clean</i>
        </pre>

        <p><i>emerge</i> wird nun eine Liste mit Paketversionen und -revisionen
        ausgeben die entfernt werden und die Versionen die erhalten bleiben.
        Außerdem gibt es dem Benutzer Zeit, die Aktion mit Control+C
        abzubrechen.  Auf einem normalen System werden nun eine Vielzahl von
        Aktionen durchgeführt, die eine lange Listen mit Dateien, die entweder
        gelöscht oder erhalten wurden, ausgibt.</p>

        <p>Naheliegenderweise wird Portage die Aufräumaktion auf die
        <i>world</i> Datei (alle installierten Pakete) anwenden. Sie können den
        Umfang der Säuberung durch Optionen wie <i>world</i>, <i>system</i>,
        eine Liste von Paketnamen oder eine Einschränkung auf Paketversionen,
        wie es im Abschnitt "Unmerge" in diesem Kapitel besprochen wurde,
        beeinflussen.</p>

        <p>Beim Herausfinden, welche Paketversionen entfernt werden sollen,
        überprüft Portage die verschiedenen Profile, die Beziehungen zu anderen
        Paketen und den SLOT eines Paketes. Vorausgesetzt dass alle
        Paketabhängigkeiten für alle Pakete richtig definiert sind, wird
        <c>emerge clean</c> nur veraltet Pakete vom System entfernen und nicht
        solche, deren Entfernung die Funktionalität des Systems beeinträchtigen
        würde.</p>

      </body>
    </section>

    <section>
      <title>Pakete säubern</title>
      <body>

        <p>Portage bietet außerdem die Funktion ein Paket zu säubern (engl.
        <i>prune</i>). <i>prune</i> ist eine unsichere Variante von
        <i>clean</i>. Es entfernt alle Versionen aller Pakete, ausgenommen der
        zuletzt installierten Version. Es führt nur wenige Überprüfung aus, die
        <i>clean</i> durchführt und kann grundlegende Abhängigkeiten von Ihrem
        System entfernen! Wenn Sie diese Option nutzen, können sie sehr schnell
        ihr System unbrauchbar machen. Somit wird diese Variante nicht empfohlen
        und sollte nur in wenigen Ausnahmenfällen verwendet werden.</p>

        <p>Die Aktion <i>prune</i> akzeptiert die selben Optionen wie die Aktion
        <i>clean</i> und kann wie folgt angewendet werden:</p>

        <pre caption="Pakete säubern">
# <i>emerge prune</i>
        </pre>

      </body>
    </section>

    <section>
      <title>Den Portage-Tree durchsuchen</title>
      <body>

        <p>Portage-Trees, wie jener der das Herzstück von Gentoo Linux bildet,
        können sehr groß sein. Der Befehl <i>emerge</i> bietet eine Suchfunktion
        an, die Suchanfragen in Form eines regulären Ausdrucks, dieser muss
        von Anführungszeichen eingeschlossen sein, akzeptiert. Reguläre
        Ausdrücke sind sehr komplizierte Biester und Anwendern die sich dafür
        interessieren, sei ein gutes Buch zum Thema empfohlen.</p>

        <p>Die meisten einfachen Suchen könne ohne Wissen, wie ein regulärer
        Ausdruck zu bilden ist durchgeführt werden. Das folgende ist ein
        Beispiel für eine einfache Suche nach einem Paket, das "gcc" heisst oder
        "gcc" im Namen hat:</p>

        <pre caption="Nach ebuilds suchen">
# <i>emerge search gcc</i>
        </pre>

        <p>Für jeden Treffer gibt der Befehl den Paketnamen, die neuste Version,
        die neuste installierte Version, seine Homepage und eine Beschreibung
        über die Software im Paket aus.</p>

      </body>
    </section>

    <section>
      <title>Hilfe erhalten</title>
      <body>

        <p>Mehr Informationen über die zahlreichen Optionen und Aktionen die
        <i>emerge</i> unterstützt, erhalten Sie durch die Eingabe von:</p>

        <pre caption="Hilfe zu emerge aufrufen">
# <i>emerge --help</i>
        </pre>

      </body>
    </section>

    <section>
      <title>Nützliche Werkzeuge</title>
      <body>

        <p> Verschiedenste Werkzeuge wurden von Gentoo-Benutzern erstellt, um
        das Arbeiten mit <i>emerge</i> zu erleichtern. Diese Werkzeuge sind im
        Paket <i>app-admin/gentoolkit</i> im Gentoo-Portage-Tree zu finden.</p>

        <ul>
          <li><i>etc-update</i> : Shell-Skripte für <i>vim</i>, die dabei helfen die Dateien in <path>/etc</path> abzugleichen (eine falsche Benutzung kann gefährlich sein!)</li>
          <li><i>qpkg</i> : Werkzeug für Datenbankanfragen</li>
          <li><i>epm</i> : ein weiteres Anfragewerkzeug für die Datenbank mit RPM-ähnlicher Syntax</li>
          <li><i>etcat</i> : zeigt und erläutert die USE Flags für ein Paket</li>
        </ul>

      </body>
    </section>
  </chapter>

  <chapter>
    <title>Was sind maskierte Pakete (masked packages)?</title>
    <section>
      <body>

        <p>Viele Leute sind verwundert, warum ein neu erschienenes Paket nicht
        bei einem <c>emerge -u world</c> enthalten ist.  Eine gutes Beispiel ist
        xfree-4.3.0 (die Version zur Zeit des Schreibens).  Wenn Sie <c>emerge
        sync</c> gefolgt von einem <c>emerge -u world</c> ausführen, werden Sie
        kein Update zu xfree in der Liste sehen.  Warum?</p>

        <p>Der Grund ist, dass bestimmte Pakete als "masked" markiert sind.  Das
        Paket wird nicht automatisch auf eine neuere Version gebracht oder
        installiert, solange Sie nicht selbst Hand anlegen.  Für eine
        Beschreibung, wie Sie die Installation von maskierten Paketen
        durchführen, möchten Wir Sie auf die <uri
        link="http://forums.gentoo.org/viewtopic.php?t=33534">Masked Packages
        FAQ</uri> in unserem <uri link="http://forums.gentoo.org/">Gentoo
        Forum</uri> verweisen.</p>

      </body>
    </section>
  </chapter>
</guide>
