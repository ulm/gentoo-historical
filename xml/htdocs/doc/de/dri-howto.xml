<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/dri-howto.xml,v 1.5 2003/12/29 11:27:13 dertobi123 Exp $ -->

<!-- Original English CVS Version 1.9 -->

<guide link="/doc/de/dri-howto.xml">
<title>Anleitung für Hardware 3D-Beschleunigung</title>
<author title="Autor">
  <mail link="spyderous@gentoo.org">Donnie Berkholz</mail>
</author>
<author title="Editor">
  <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Übersetzer">
  <mail link="js@ameds.de">Jens Schittenhelm</mail>
</author>

<abstract>
Dieses Dokument zeigt, wie man 3D Beschleunigung mit XFree-DRM 
und XFree86 in  Gentoo Linux einrichtet.
</abstract>

<version>1.0.2</version>
<date>20. Dezember 2003</date>

<chapter>
<title>Einführung</title>
<section>
<title>Was ist 3D Hardware-Beschleunigung und wofür brauche ich es?</title>
<body>

<p>
Mit 3D Hardware-Beschleunigung wird dreidimensionales Rendern
vom Prozessor der Grafikkarte übernommen, anstatt wertvolle
Rechenleistung der CPU für das Darstellen von 3D Bildern abzuzweigen.
Dies wird auch als "Hardware-Beschleunigung" bezeichnet,
im Gegensatz zur  "Software Beschleunigung", wo die CPU mit Hilfe
der Mesa Software Bibliotheken das Zeichnen übernimmt. Während
XFree in der Regel 2D Hardware-Beschleunigung unterstützt, gibt es
bei der 3D-Beschleunigung einige Lücken. Spiele, 3D-CAD und
Modellierungen kommen in der Regel nicht ohne 3D
Hardware-Beschleunigung aus.
</p>

</body>
</section>
<section>
<title>Wie erhalte ich 3D Hardware-Beschleunigung?</title>
<body>

<p>
In den meisten Fällen existieren sowohl binäre als auch Open-Source
Treiber. Letztere sind zu bevorzugen, da wir nun einmal Linux verwenden
und Open Source eines unserer Hauptprinzipien ist. In machen Fällen
sind binäre Treiber oft die einzige Möglichkeit, wie zum Beispiel mit den
nVidia Karten. Binäre Treiber in Portage sind media-video/nvidia-kernel und
media-video/nvidia-glx für nVidia, media-video/mgavideo für
Matrox und media-video/ati-drivers für ATI Karten. Open-Source
Projekte sind media-video/kyro-kernel für Kyro II Karten
und media-video/ati-gatos mit speziellen Augenmerk auf die
Video-Möglichkeiten der ATI Grafikkarten.
</p>

</body>
</section>
<section>
<title>Was ist DRI?</title>
<body>

<p>
Die Direct Rendering Infrastructure (<uri link="http://dri.sourceforge.net">
dri.sourceforge.net</uri>), besser bekannt unter dem Kürzel DRI ist eine
effiziente Schnittstelle, die direkten und dennoch sicheren Zugang zur
Grafikhardware ermöglicht. Sie beinhaltet Änderungen am X Server,
verschiedenen Client-Bibliotheken und dem Kernel selbst.
Hauptverwendungszweck für DRI sind schnelle OpenGL
Implementierungen.
</p>

</body>
</section>
<section>
<title>Was ist XFree-DRM und was verbindet es mit dem normalen XFree86?</title>
<body>

<p>
XFree-DRM ist eine <i>Erweiterung</i> zu XFree86, die 3D
Hardware-Beschleunigung für bestimmte Karten bereitstellt, 
indem es die entsprechenden Kernelmodule für direct rendering
beinhaltet.
</p>

</body>
</section>
<section>
<title>Zweck dieser Dokumentation?</title>
<body>

<p>
Diese Dokumentation richtet sich an alle, die Direct Rendering in der XFree
Standardumgebung nicht zum Laufen bekommen. XFree-DRM funktioniert für 3dfx, 
gamma, i8x0, matrox, rage128, radeon, mach64 (ab Version xfree-drm-4.3.0-r7)  
und sis300 Treiber. Benutzer einer 2.4. Kernel Reihe benötigen das xfree-drm Paket, 
da der Direct Rendering Manager XFree Version 4.3 nicht unterstützt. Dagegen besitzen 
2.6. Kernel Nutzer bereits die Unterstützung für XFree 4.3. Leider funktioniert das 
Gentoo XFree-DRM Paket noch nicht mit den 2.6 Kernel. Weitere Informationen erhält 
man auf der <uri link="http://dri.sourceforge.net">DRI Homepage</uri>. 
</p>

</body>
</section>
 
<section>
<title>Feedback</title><body>

<p>
Weitere Vorschläge, Fragen oder Mails können an <mail 
link="spyderous@gentoo.org">Donnie Berkholz</mail> gerichtet werden.
</p>
  	 
 </body> 
</section>
</chapter>

<chapter>
<title>Installation von XFree86 und Kernel Konfiguration</title>
<section>
<title>Installation von XFree86</title>
<body>

<pre caption="Installation von XFree86">
# <i>emerge x11-base/xfree</i>
</pre>

</body>
</section>
<section>
<title>Kernel Konfiguration</title>
<body>

<p>
Zunächst sollte der Chipsatz sondiert werden und die Unterstützung
für diesen aktiviert werden.
</p>

<pre caption="Prüfen des AGP Chipsatzes">
# <i>emerge pciutils; lspci | grep AGP</i>
# <i>00:01.0 PCI bridge: Intel Corp. 440BX/ZX/DX - 82443BX/ZX/DX AGP bridge (rev 03)</i>
<codenote>Je nach entsprechender Hardware kann dies anders aussehen.</codenote>
</pre>

<p>
Dies sollte mit allen Kerneln funktionieren. In diesem Fall erfolgte
die Konfiguration unter gentoo-sources-2.4.20-r5.
</p>

<pre caption="Konfigurieren des Kernels">
# <i>ls -l /usr/src/linux </i>
lrwxrwxrwx    1 root     root           22 May 29 18:20 /usr/src/linux -> linux-2.4.20-gentoo-r5
<codenote>Stellen Sie sicher, dass /usr/src/linux auf Ihren aktuellen Kernel zeigt!</codenote>
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<pre caption="Optionen in make menuconfig">
Processor type and features ---&lt;
  &gt;*&lt; MTRR (Memory Type Range Register) support
Character devices ---&lt;
  &gt;*&lt; /dev/agpgart (AGP Support)
  [M] Intel 440LX/BX/GX and I815/I820/I830M/I830MP/I840/I845/I850/I860 support
// Natürlich sollten Sie die Auswahl an Ihren Chipsatz anpassen!
  [ ] Direct Rendering Manager (XFree86 DRI support)
</pre>

<p>
Stellen Sie sicher, dass die Unterstützung für DRM <i>abgeschaltet</i>ist.
Das XFree-DRM Paket stellt seine eigene Kernel-Unterstützung bereit. Die
Kernel-Version ist für XFree 4.2 gedacht.
</p>

</body>
</section>
<section>
<title>Den Kernel kompilieren und installieren</title>
<body>

<p>
<pre caption="Kompilieren des Kernels">
# <i>make dep &amp;&amp; make clean bzImage modules modules_install</i>
# <i>mount /boot</i>
# <i>cp arch/i386/boot/bzImage /boot</i>
</pre>
</p>

<p>
Wenn der Kernel einen anderen Namen erhalten soll als bzImage, sollten
Sie stattdessen nach boot/neuer_name kopieren. Nicht vergessen
grub.conf oder lilo.conf entsprechend anzupassen,
und als LILO-Benutzer /sbin/lilo ausführen.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Installation von XFree-DRM und Konfiguration von Direct Rendering</title>
<section>
<title>Installation von XFree-DRM </title>
<body>

<pre>
# <i>ACCEPT_KEYWORDS="~x86" emerge xfree-drm</i>
</pre>

</body>
</section>
<section>
<title>Konfiguration von XF86Config</title>
<body>

<p>
Öffnen Sie /etc/X11/XF86Config mit Ihrem Lieblingseditor und fügen Sie
die Funktionen für DRI und GLX hinzu.
</p>

<pre caption="XF86Config">
...
Section "Module"
     Load "dri"
     Load "glx"
     ...
EndSection
...
Section "Device"
     Driver "radeon"
     ...
EndSection
...
Section "dri"
     Mode 0666
EndSection
</pre>

<p>
Sollten Sie einen anderen Treiber verwenden, müssen Sie radeon durch den
entsprechenden Treiber ersetzen
</p>

</body>
</section>
</chapter>

<chapter>
<title>3D Beschleunigung testen</title>
<section>
<title>Neustart mit dem neuen Kernel</title>
<body>

<p>
Nachdem Sie ihren Computer neu gestartet haben, wollen wir schauen,
ob Direct Rendering aktiviert wurde und wie gut es funktioniert.
</p>

<pre caption="Rendering testen">
# <i>startx</i>
<codenote>Es ist nicht notwendig den Treiber oder APGART zu laden, auch wenn sie als Modul kompiliert wurden.</codenote>
<codenote>Sie werden automatisch geladen.</codenote>
# <i>glxinfo | grep rendering</i>
direct rendering: Yes
<codenote>Kommt hier "No", dann ist die Installation von Direct Rendering fehlgeschlagen</codenote>
# <i>glxgears</i>
<codenote>Prüft die Framerate pro Sekunde (FPS) im Standardfenster. Diese sollte sollte nun 
deutlich höher sein, als vor der Installation von XFree-DRM. Den Test am besten durchgeführen, 
wenn die CPU nicht beschäftigt ist.</codenote>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Verwenden der CVS Sourcen</title>
<section>
<body>

<warn>
Sollte die obige Anleitung erfolgreich gewesen sein, ist die
Installation der CVS Sourcen nicht notwendig!
</warn>

<note>
CVS Quellcode wechselt mit der Zeit. Ihre Konfiguration kann
völlig anders aussehen, als hier beschrieben.
</note>

</body>
</section>
<section>
<title>Wird CVS benötigt?</title>
<body>

<p>
Probieren Sie zuerst das xfree-drm Paket aus. Sollte es nicht 
funktionieren, und Sie haben eine sehr neue Grafikkarte, dann sind die 
CVS Sourcen ein  Versuch wert. Möchten Sie nicht die kompletten 
CVS Sourcen selber bauen, können Sie auch die täglichen 
Snapshots herunterladen.
</p>

</body>
</section>
<section>
<title>Wird Ihre Karte von den CVS Sourcen unterstützt?</title>
<body>

<p>
Schauen Sie, ob Ihre Karte auf der
<uri link="http://dri.sourceforge.net/dri_status.phtml">
Liste</uri> der unsterstützten Karten steht. Sollte Ihre Karte nicht
dabei sein, aber eine ähnliche Karte darunter sein, ist damit ein
Versuch wert.
</p>

<warn>
Linux 2.4. unterstützt derzeit kein AGP 8x. Versuchen
Sie im BIOS auf AGP 4x herunterzuschalten. Sollte das nicht
möglich sein, müssen Sie einen
<uri link="http://www.ussg.iu.edu/hypermail/linux/kernel/0302.2/att-1618/01-agp3.diff.bz2">Patch</uri>
auf den Vanilla Kernel anwenden.
</warn>

</body>
</section>
<section>
<title>Installation der CVS Sourcen</title>
<body>

<p>
Folgen Sie der Anleitung unter "Kompilieren und Installation des Kernels".
Dann springen Sie zu Punkt 6 dieser Anleitung und folgen Sie bis zu Punkt 8.3.
</p>

</body>
</section>
<section>
<title>Herunterladen der CVS Sourcen</title>
<body>

<p>
Legen Sie ein Verzeichnis für die CVS Dateien an:
</p>

<pre caption="Anlegen eines Verzeichnis für CVS">
# <i>cd ~</i>
# <i>mkdir DRI-CVS</i>
</pre>

<p>
Nun werden die CVS Sourcen ausgecheckt:
</p>

<pre caption="Auschecken der CVS Sourcen">
# <i>cd ~/DRI-CVS</i>
# <i>cvs -d:pserver:anonymous@cvs.dri.sourceforge.net:/cvsroot/dri login</i>
<codenote> ENTER drücken, wenn ein Passwort verlangt wird)</codenote>
# <i>cvs -z3 -d:pserver:anonymous@cvs.dri.sourceforge.net:/cvsroot/dri co xc</i>
<codenote>Mit der -z3 werden die Daten komprimiert, wass eine kürzere Downloadzeit zur Folge hat.</codenote>
</pre>

</body>
</section>
<section>
<title>Aktualisierung der CVS Sourcen</title>
<body>

<p>
Um in Zukunft ab und zu den DRI Quellcode mit den neuesten Änderungen
zu erhalten, muss ein Update ausgeführt werden:
</p>

<pre caption="Lokale CVS Kopie aktualisieren">
# cd ~/DRI-CVS
# cvs -z3 update -dA xc
<codenote>Durch das -d Flag werden neue Unterverzeichnisse erstellt..</codenote>
<codenote>Durch das -A Flag werden die aktuellsten Sourcen und nicht die Sourcen eines Branch heruntergeladen.</codenote>
</pre>

</body>
</section>
<section>
<title>Erstellen eines build Verzeichnisbaumes</title>
<body>

<p>
Anstatt Objektdateien und Bibliotheken direkt in den
Quellcode-Verzeichnisbaum zu legen, können diese in einen parallelen
<i>build</i> Verzeichnisbaum abgelegt werden. Dieser wird mit
dem <i>lndir</i> Befehl erzeugt.
</p>

<pre caption="Anlegen eines parallelen Build-Verzeichnisbaum">
# <i>cd ~/DRI-CVS</i>
# <i>ln -s xc XFree40</i>
# <i>mkdir build; cd build</i>
# <i>lndir -silent -ignorelinks ../XFree40</i>
</pre>

<p>
Dadurch werden im build Verzeichnisbaum symbolische Links angelegt,
welche auf den CVS  Verzeichnisbaum verweisen. Fortgeschrittene
Benutzer haben oft verschiedene build Verzeichnisbäume zum Kompilieren und
Testen der verschiedenen Optionen.
</p>

</body>
</section>
<section>
<title>Anpassung der host.def Datei</title>
<body>

<p>
Die Datei ~/DRI-CVS/build/xc/config/cf/host.def dient der Steuerung der 
XFree86 Kompilierung. Diese kann natürlich den eigenen Wünschen oder 
Systemkonfigurationen angepasst werden. Standardmässig sieht die 
Datei etwa so aus:
</p>

<pre caption=" ~/DRI-CVS/build/xc/config/cf/host.def">
            #define DefaultCCOptions -Wall
<codenote>Für i386:</codenote>
            #define DefaultGcc2i386Opt -O2
<codenote>Für Alpha:</codenote>
            #define DefaultGcc2AxpOpt -O2 -mcpu=ev6 (or similar)
<codenote>Für alle anderen Architekturen</codenote>
            #define LibraryCDebugFlags -O2
            #define BuildServersOnly YES
            #define XF86CardDrivers vga tdfx mga ati i810
            #define LinuxDistribution LinuxRedHat
            #define DefaultCCOptions -ansi GccWarningOptions -pipe
            #define BuildXF86DRI YES
            /* Optionally turn these on for debugging */
            /* #define GlxBuiltInTdfx YES */
            /* #define GlxBuiltInMga YES */
            /* #define GlxBuiltInR128 YES */
            /* #define GlxBuiltInRadeon YES */
            /* #define DoLoadableServer NO */
            #define SharedLibFont NO
</pre>

<p>
Mit der Variable ProjectRoot kann die Installation der XFree86
Dateien angepasst werden. Wir empehlen die Installation der
DRI Dateien in die bestehende XFree86 Installation - dies ist in der
Regel sicherer und weniger störanfällig, auch wenn wir in anderen
Richtlinien nicht so verfahren.
</p>

<p>
Sollte XFree86 4.x nicht in  /usr/X11R6/ installiert sein, muss
folgende Zeile zur host.def hinzugefügt werden:
</p>

<pre caption=" ~/DRI-CVS/build/xc/config/cf/host.def">
#define ProjectRoot pathToYourXFree86installation
<codenote>Beachten Sie die XF86CardDrivers Zeile um sicher zu stellen, dass ihr Treiber aufgelistet ist.</codenote>
<codenote>Zur Verwendung von 3DNow! Optimierungen in Mesa und DRI Treibern:</codenote>
#define MesaUse3DNow YES
<codenote>Für diese Option ist kein AMD Prozessor erforderlich.</codenote>
<codenote>Der DRI Treiber wird beim Start nach 3DNow! schauen, und bei Bedarf anwenden.</codenote>
</pre>

<p>
Für die Verwendung von SSE Optimierungen in Mesa und DRI
muss mindestens ein 2.4.x Kernel vorhanden sein. Mesa überprüft
selbstständig, ob SSE sowohl vom Prozessor als auch vom
Betriebssystem unterstützt wird. Um Mesa in den DRI Treibern
kompilieren zu können, müssen die 2.4.x Kernel Header in
/usr/src/linux befinden. Sollten Sie SSE für eine ältere
Kernelversion in /usr/src/linux aktivieren, wird die Kompilation
von Mesa fehlschlagen. Sagen Sie nicht, wir hätten Sie gewarnt!
Als 2.4.x Kernel Benutzer können Sie folgendes hinzufügen:
</p>

<pre>
#define MesaUseKatmai YES
</pre> 

</body>
</section>
<section>
<title>Kompilieren des XFree86/DRI Verzeichnisbaumes</title>
<body>

<p>
Zum Kompilieren genügt folgendes:
</p>

<pre>
# <i>cd ~/DRI-CVS/build/xc/</i>
# <i>make World >&amp; world.log</i>
</pre>

<p>
Manchmal scheint es notwendig zu sein, zusätzlich folgendes 
auszuführen:
</p>

<pre caption="Kompilieren des DRI Verzeichnisbaumes">
# <i>cd ~/DRI-CVS/build/xc/programs/Xserver/hw/xfree86/os-support/linux/drm/kernel</i>
# <i>make -f Makefile.linux radeon.o</i>
<codenote>Ersetzen Sie radeon.o durch Ihren eigenen Treiber</codenote>
</pre>

<p>
Es ist normal, dass während der Kompilierung Warnungen auftreten. Da
dies eine Weile dauern wird, empfehlen wir solange das Lesen Ihrer Mails
oder einen Besuch bei slashdot.
</p>

<warn>
Die make Option -j sollte nicht verwendet werden. Dies funktioniert 
nicht unter XFree86/DRI.
</warn>

<p>
Mit Ihrem Text Editor können Sie die Log-Datei nach Fehlern durchsuchen,
die in der Regel mit * * * beginnen.
</p>

</body>
</section>
<section>
<title>Installation des Treibers</title>
<body>

<p>
Überprüfen Sie, ob die DRI Kernelmodule erfolgreich erstellt wurden:
</p>

<pre caption="Überprüfung">
# <i>cd ~/DRI-CVS/build/xc/programs/Xserver/hw/xfree86/os-support/linux/drm/kernel; ls</i>
</pre>

<p>
Für einen 3dfx Voodoo Treiber sollten Sie tdfx.o sehen. Für Matrox
G200/G400 ist dies mga.o, für ATI Rage128 r128.o, für Intel i810 ein i810.o,
für ATI Radeon ist dies radeon.o. Sollte die Kompilation der DRI Module
fehlgeschlagen sein, sollten Sie die Linux Kernel Version überprüfen. Auch
werden nicht immer die allerneuesten Kernel unterstützt.
</p>

<p>
Nun kopieren wir alle Treiberdateien in die XFree86 Installation. Bei Bedarf
können die zu überschreibenden Dateien vorher gesichert werden.
</p>

<pre caption="Back-up von XFree">
# <i>quickpkg xfree</i>
<codenote>Dies sichert Ihr XFree86 Paket.</codenote>
# <i>make install</i>
</pre>

<p>
Dann folgen Sie den Anweisungen in Kapitel 3, Abschnitt "Konfiguration
von XF86Config".
</p>

<p>
Um das entsprechende DRM Modul in den laufenden Kernel zu laden,
sollte das Kernel Modul nach /lib/modules/ kopiert werden und mit
uname -r`/kernel/drivers/char/drm/ ausgeführt werden.
Anschliessend <i>modules-update</i> und den X Server neu starten.
Sollten Sie den Treiber nicht für den aktuell benutzten Kernel erstellt haben,
muss uname -r an den zu verwendenden Kernel angepasst werden.
</p>

<warn>
Stellen Sie sicher, dass ältere DRI Module vorher entladen werden.
Manche DRM Module erwarten das apgart vorher geladen wird.
</warn>

</body>
</section>
</chapter>

<chapter>
<title>Performance Tuning</title>
<section>
<title>Das Meiste aus Direct Rendering herausholen</title>
<body>

<p>
Einige Optionen können die Performance um mehr als 30% steigern. 
Diese können in /etc/X11/XF86Config gesetzt werden:
</p>

<pre caption=" XF86Config">
Section "Device"
     Option     "AGPMode" "4"
<codenote>Dies steigerte meine FPS von 609 zu 618.</codenote>
     Option     "AGPFastWrite" "True"
<codenote>Dies hatte keinen messbaren Effekt, kann aber die Instabilität des Computers erhöhen.</codenote>
<codenote>Eventuell muss es im BIOS zusätzlich aktiviert werden.</codenote>
     Option     "EnablePageFlip" "True"
<codenote>Dies steigerte FPS von 618 zu 702. Angeblich soll es riskant sein, aber wenige Leute hatten Probleme.</codenote>
     ...
EndSection
</pre>

<p>
Für weitere Tuning Optionen sollte die
<uri link="http://dri.sourceforge.net/doc/dri_driver_features.phtml">
DRI Infoseite</uri> konsultiert werden.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Problembehebung</title>
<section>
<title>Es funktioniert nicht mehr. Ich habe kürzlich meinen Kernel
neu kompiliert oder einen neuen Kernel installiert.</title>
<body>
  	 
<p>
Jedes Mal, wenn Sie Ihren Kernel neu kompilieren, oder einen anderen
KErnel installieren, müssen Sie Ihre Kernel-Module neu kompilieren.
Sie müssen xfree nicht neu emergen, aber Sie müssen xfree-drm
auf jeden Fall neu emergen.
</p>
  	 
</body>
</section>
  	 
<section>
<title>Es funktioniert einfach nicht. Ich habe kein Rendering und ich weiss
nicht warum.</title>
<body>

<p>
Versuchen Sie ein <c>insmod radeon</c> vor dem Starten des X Servers.
Versuchen Sie ausserdem apgart als Modul zu erstellen, statt direkt in den
Kernel zu kompilieren.
</p>

</body>
</section>
<section>
<title>Beim Ausführen von <c>startx</c> erhalte ich folgenden Fehler:
"[drm] failed to load kernel module agpgart"</title>
<body>

<p>
Dies erscheint immer, wenn apgart direkt in den Kernel einkompiliert wird.
Sie können dies getrost ignorieren.
</p>

</body>
</section>
<section>
<title>Direct Rendering funktioniert nicht und in <path>/var/log/XFree86.0.log</path>
erhalte ich eine Fehlermeldung, das die Treiberversion falsch ist.</title>
<body>

<p>
Sie benutzen nicht den xfree-drm Treiber. Sind Sie sicher, dass DRM und der Treiber
in den richtigen Kernel kompiliert wurde?
</p>

</body>
</section>
<section>
<title>Ich besitze eine Radeon und möchte TV-Out nutzen</title>
<body>

<p>
Dafür gibt es die ati-gatos Treiber. <c>emerge -s gatos</c>
</p>

</body>
</section>
<section>
<title>Es funktioniert immer noch nicht. Meine Karte ist so neu und
megaobercool, dass sie nicht unterstützt wird.</title>
<body>

<p>Probieren Sie die binären Treiber aus. Sollte es für Ihre Karte noch keine
Treiber geben, probieren Sie VESA. Es ist langsam, funktioniert aber. Halten
Sie nach neuen Treibern Ausschau.
</p>

</body>
</section>
<section>

<title>Ich habe eine PCI Karte, die nicht arbeiten will. Hilfe!</title>
<body>

<p>
Im Abschnitt "Device" muss ForcePCIMode eingetragen sein.
</p>
<pre>
Option "ForcePCIMode" "True"
</pre>


</body>
</section>
</chapter>

<chapter>
<title>Danksagungen</title>
<section>
<body>
  	 
<ol>
<li>
Christopher Webber für seinen Vorschlag, in den FAQ den Kernel neu zu kompilieren.
 </li>
 <li>
Steve für seinen Vorschlag, die Konsistenz zwischen dri und DRI in der
XF86Config
 </li>
 </ol>
  	 
 </body>
 </section>
 </chapter>

<chapter>
<title>Referenzen</title>
<section>
<body>

<p>
<ol>
   <li>http://forums.gentoo.org/viewtopic.php?t=46681</li>
   <li>http://forums.gentoo.org/viewtopic.php?t=29264</li>
   <li>http://dri.sourceforge.net/</li>
   <li>http://www.retinalburn.net/linux/dri_status.html</li>
</ol>
</p>

</body>
</section>
</chapter>
</guide>
