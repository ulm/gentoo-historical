<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/zsh.xml,v 1.1 2011/12/26 00:47:01 keytoaster Exp $ -->

<guide lang="de">
<title>zsh Konfigurations- und Installationsleitfaden</title>

<author title="Autor">
  <mail link="hekonsek@gmail.com">Henryk Konsek</mail>
</author>
<author title="Autor">
  <mail link="morritt.andrew@gmail.com">Andrew Morritt</mail>
</author>
<author title="Bearbeiter">
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>
<author title="Bearbeiter">
  <mail link="welp@gentoo.org">Peter Weller</mail>
</author>
<author title="Übersetzer">
  <mail link="geblerc@gmail.com">Christian Gebler</mail>
</author>

<abstract>
Dieser Leitfaden zeigt Ihnen, wie man zsh schnell installiert und konfiguriert.
Wenn Sie diesen Leitfaden gelesen haben, werden Sie in der Lage sein, viele
zsh-Funktionen, wie z.B. die Erweiterte Tab-Autovervollständigung,
Kommandokorrektu und Konfiguration der Eingabeaufforderung, zu nutzen.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>2</version>
<date>2006-10-18</date>

<chapter>
<title>Installation</title>
<section>
<title>zsh installieren</title>
<body>

<p>
Um zsh unter Gentoo zu installieren werden die Pakete <c>app-shells/zsh</c>
(zsh an sich) und <c>app-shells/zsh-completion</c> (zsh
Autovervollständigungs-Scripts) benötigt.
</p>

<pre caption="zsh mit emerge installieren">
# <i>emerge zsh zsh-completion</i>
</pre>

</body>
</section>
<section>
<title>zsh starten</title>
<body>

<p>
Wenn Sie zsh das erste mal starten, werden Sie folgende Meldung bekommen.
Sie können diese Anweisung überspringen, da wir später eine Init-Datei erstellen
werden.
</p>

<pre caption="Anfangskonfiguration überspringen">
$ <i>zsh</i>
This is the Z Shell configuration function for new users, zsh-newuser-install.
You are seeing this message because you have no zsh startup files
(the files .zshenv, .zprofile, .zshrc, .zlogin in the directory
~).  This function can help you with a few settings that should
make your use of the shell easier.

You can:

(q)  Quit and do nothing.  The function will be run again next time.

(0)  Exit, creating the file ~/.zshrc containing just a comment.
     That will prevent this function being run again.

(1)  Continue to the main menu.

--- Type one of the keys in parentheses --- <i>q</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguration</title>
<section>
<title>Einführung</title>
<body>

<p>
Um zsh für eine einzelne Sitzung zu starten, führen sie <c>zsh</c> aus. Für eine
dauerhafte Lösung springen Sie zum Kapitel <uri link="#savingsettings">
Konfiguration speichern</uri>. Nach der installation hinterlässt <c>zsh</c>
einen sehr einfachen und eher limitierten Eindruck der Funktionalitäten.
Um dies zu ändern, sind ein paar Änderungen an der Konfiguration nötig.
</p>

</body>
</section>
<section>
<title>Erweiterte Tabulator-Vervollständigung</title>
<body>

<p>
Um das beliebte <c>zsh</c> Tab-Vervollständigungssystem zu aktivieren, führen
Sie die folgenden Befehle aus:
</p>

<pre caption="Vervollständigung aktivieren">
% <i>autoload -U compinit</i>
% <i>compinit</i>
</pre>

<p>
Das normale Aussehen der Vervollständigung ist einfach gehalten und nicht sehr
schön. Um das Erscheinungsbild aufzubessern, geben Sie die folgenden Befehle
ein:
</p>

<pre caption="Erscheinungsbild aufbessern">
% <i>zstyle ':completion:*:descriptions' format '%U%B%d%b%u'</i>
% <i>zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'</i>
</pre>

</body>
</section>
<section>
<title>Befehlskorrektur</title>
<body>

<p>
Es ist außerdem eine gute Idee, die Autokorrektur der getippten Befehle zu
aktivieren:
</p>

<pre caption="Befehlskorrektur aktivieren">
% <i>setopt correctall</i>
</pre>

</body>
</section>
<section>
<title>Eingabeaufforderung</title>
<body>

<p>
Die Eingabeaufforderung sieht trotz allem noch etwas langweilig aus, dies kann
aber in wenigen Schritten geändert werden. Zuerst werden wir die erweiterte
Eingabeaufforderung aktivieren:
</p>

<pre caption="Erweiterte Eingabeaufforderung aktivieren">
% <i>autoload -U promptinit</i>
% <i>promptinit</i>
</pre>

<p>
Wählbare Beispiele für das Aussehen der Eingabeaufforderung erhält man durch
den Befehl <c>prompt -p</c>. Wir können nun unseren Favoriten aktivieren:
</p>

<pre caption="Aussehen der Eingabeaufforderung wählen">
<comment>(Ersetzen Sie gentoo mit der Eingabeaufforderung Ihrer Wahl)</comment>
% <i>prompt gentoo</i>
</pre>

<note>
Wenn Sie die verschiedenen Eingabeaufforderungen testen und nicht von jedem ein
Beispiel sehen möchten, lassen Sie sich mit dem Befehl <c>prompt -l</c> die
zur Wahl stehenden Eingabeaufforderungen auflisten.
</note>

<p>
Eine andere Möglichkeit ist es, eine eigene Eingabeaufforderung zu erstellen.
Dazu muss die PS1-Umgebungsvariable gesetzt werden.
</p>

<pre caption="Eigene Eingabeaufforderung erstellen">
% <i>export PS1="[Test Prompt] > "</i>
[Test Prompt] >
</pre>

<p>
Neben der nützlichen Funktion zum kreieren eigener Eingabeaufforderungen,
unterstützt zsh zusätzlich viele Escape-Sequenzen, um Systeminformationen in
die Eingabeaufforderung zu implementieren. Beispiele dieser Escape-Sequenzen
sehen Sie hier:
</p>

<table>
<tr>
  <th>Sequenz</th>
  <th>Darstellung</th>
</tr>
<tr>
  <ti>%T</ti>
  <ti>Systemzeit (HH:MM)</ti>
</tr>
<tr>
  <ti>%*</ti>
  <ti>Systemzeit (HH:MM:SS)</ti>
</tr>
<tr>
  <ti>%D</ti>
  <ti>Systemzeit (YY-MM-DD)</ti>
</tr>
<tr>
  <ti>%n</ti>
  <ti>Ihr Benutzername</ti>
</tr>
<tr>
  <ti>%B - %b</ti>
  <ti>Beginn - Ende Fettschrift</ti>
</tr>
<tr>
  <ti>%U - %u</ti>
  <ti>Beginn - Ende unterstrichen</ti>
</tr>
<tr>
  <ti>%d</ti>
  <ti>Ihr aktuelles Arbeitsverzeichnis</ti>
</tr>
<tr>
  <ti>%~</ti>
  <ti>Ihr aktuelles Arbeitsverzeichnis, relativ zu ~</ti>
</tr>
<tr>
  <ti>%M</ti>
  <ti>Hostname des Computers</ti>
</tr>
<tr>
  <ti>%m</ti>
  <ti>Hostname des Computers (vor dem ersten Punkt abgeschnitten)</ti>
</tr>
<tr>
  <ti>%l</ti>
  <ti>Ihr aktuelles Terminal</ti>
</tr>
</table>

<p>
Diese Escape-Sequenzen werden einfach zu Ihrer PS1-Variable hinzugefügt und
automatisch von zsh ausgewertet.
</p>

<pre caption="Eine komplexe Eingabeaufforderung">
% <i>export PS1="[%* - %D] %d %% "</i>
[08:44:23 - 06-02-18] /home/username %
</pre>

</body>
</section>
<section>
<title>History</title>
<body>

<p>

Unglücklicherweise enthält die standard zsh-Konfiguration keine Befehls-History.
Das Arbeiten mit einer Shell kann ohne History sehr frustrierend sein, deshalb
sollten Sie die folgenden Befehle ausführen:
</p>

<pre caption="Grundlegende History-Konfiguration">
% <i>export HISTSIZE=2000</i>
% <i>export HISTFILE="$HOME/.history"</i>

<comment>(Die History wird ohne folgenden Befehl nicht gespeichert)</comment>
% <i>export SAVEHIST=$HISTSIZE</i>
</pre>

<!-- does not work
<p>
It is very comfortable to search commands in history using the up/down arrow
keys, especially after typing the few first letters of the desired command.
</p>

<p>
To enable this feature, enter the following commands:
</p>

<pre caption="Setting context searching">
% <i>bindkey `tput kcuu1` history-beginning-search-backward >/dev/null 2>&amp;1</i>
% <i>bindkey `tput kcud1` history-beginning-search-forward >/dev/null 2>&amp;1 </i>
</pre>

<p>
To try the above feature, try the following commands:
</p>

TODO: use commands that *are* in the history, i.e. commands from above samples

<pre caption="History searching based on the first letters of the commands">
<comment>(Do not press Enter after typing)</comment>
% <i>vim /etc/</i>
<comment>(Now press up arrow key)</comment>
% <i>vim /etc/fstab</i>
<comment>(Press up arrow key once again)</comment>
% <i>vim /etc/X11/xorg.conf</i>
</pre>
-->

<p>
Um das Speichern von doppelten Einträgen in der History zu verhindern (zum
Beispiel Befehle wie <c>ls -l</c>, die sehr oft während einer Sitzung eingegeben
werden), kann man die Option <c>hist_ignore_all_dups</c> aktivieren:
</p>

<pre caption="Option um doppelte Einträge zu verhindern">
% <i>setopt hist_ignore_all_dups</i>
</pre>

<p>
Ein nützlicher Trick ist es, einzelnen Befehlen ein Leerzeichen voranzustellen,
um zu verhindern, dass dieser nicht in der History gespeichert wird.
</p>

<pre caption="Verhindern, dass bestimmte Befehle nicht gespeichert werden">
% <i>setopt hist_ignore_space</i>

<comment>(Dieser Befehl wird nicht gespeichert. Beachten Sie das zusätzliche
Leerzeichen vor dem Befehl)</comment>
% <i> cat /proc/cpuinfo</i>
</pre>

</body>
</section>
<section>
<title>Sonstige Einstellungen</title>
<body>

<p>
Sie können die Option <c>autocd</c> setzen, wenn Sie das lästige Schreiben des
<c>cd</c> Befehls beim Wechsel des Verzeichnisses (zum Beispiel <c>/etc</c>
instead of <c>cd /etc</c>) vermeiden möchten.
</p>

<pre caption="Aktivieren der Option autocd">
% <i>setopt autocd</i>
</pre>

<p>
Wenn Ihnen die normalen bash-ähnlichen Platzhalter nicht ausreichen, können Sie
die Option <c>extendedglob</c> benutzen, um erweiterte Platzhalter zu
aktivieren (ähnlich den regulären Ausdrücken).
</p>

<pre caption="Erweiterte Platzhalter aktivieren">
% <i>setopt extendedglob</i>
</pre>

<p>
Wenn die oben genannte Option gesetzt ist, können Sie erweiterte Platzhalter
verwenden, zum Beispiel <c>cp ^*.(tar|bz2|gz)</c>.
</p>

</body>
</section>
</chapter>

<chapter id="savingsettings">
<title>Konfiguration speichern</title>
<section>
<title>zsh Einstellungen speichern</title>
<body>

<p>
Wenn Sie die zsh wie gewünscht angepasst haben, ist es eine gute Idee, die
Konfiguration als den <c>zsh</c> Standard für Ihr System zu speichern. Eine
Möglichkeit besteht darin, die Einstellungen in das Script
<path>/etc/zsh/zshrc</path> zu speichern. Als Alternative können Sie die Datei
<path>~/.zshrc</path> bearbeiten, um die Einstellungen als Standard nur für
Ihren Account zu definieren.
</p>

<pre caption="Ein Beispiel der zshrc">
#!/bin/zsh

# completion
autoload -U compinit
compinit

# correction
setopt correctall

# prompt
autoload -U promptinit
promptinit
prompt gentoo
</pre>

</body>
</section>
</chapter>

<chapter>
<title>zsh als Standard-Shell festlegen</title>
<section>
<title>Variante für Benutzer mit root-Rechten</title>
<body>

<p>
Sie können die Shell für Benutzer mit dem <c>usermod</c> Befehl ändern.
</p>

<pre caption="Dauerhaft zur zsh wechseln mit usermod">
# <i>usermod -s /bin/zsh userlogin</i>
</pre>

</body>
</section>
<section>
<title>Alternative für Benutzer ohne root-Rechte</title>
<body>

<p>
Wenn Ihr Systemadministrator die Nutzung von zsh verbietet (was eine gewagte
Behauptung wäre), können Sie die <c>bash</c> verwenden, um <c>zsh</c> am
Systemstart auszuführen. Alles was Sie dafür tun müssen, ist eine kleine
Modifizierung der <path>~/.bashrc</path>.
</p>

<pre caption="Beispiel ~/.bashrc">
<comment>(Fügen Sie folgende Zeile der ~/.bashrc hinzu)</comment>
exec zsh
</pre>

<p>
Eine andere Methode zum Wechseln der Shell ist die Nutzung des Befehls
<c>chsh</c> (ein Befehl um die Login-Shell eines Benutzers zu ändern). Ein
normaler Benutzer ändert dadurch die Login-Shell des eigenen Kontos. Als root
können Sie die Shell von jedem Benutzer ändern.
</p>

<pre caption="Dauerhaft zur zsh wechseln mit chsh">
<comment>(Ersetzen Sie "Benutzer" durch Ihren eigenen Benutzernamen)</comment>
$ <i>chsh -s /bin/zsh Benutzer</i>
</pre>

</body>
</section>
</chapter>
</guide>
