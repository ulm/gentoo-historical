<?xml version='1.0' encoding='UTF-8'?>

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/gcc-optimization.xml,v 1.16 2012/06/30 19:10:29 keytoaster Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- English CVS Version: 1.18 -->

<guide lang="de">
<title>Kompilations-Optimierungs-Leitfaden</title>

<author title="Author">
  <mail link="nightmorph"/>
</author>
<author title="Übersetzer">
  <mail link="keytoaster"/>
</author>

<abstract>
Dieser Leitfaden stellt eine Einführung zur Optimierung von kompiliertem Code
mit Benutzung von sicheren und gescheiten CFLAGS und CXXFLAGs dar. Er beschreibt
ebenfalls die Theorie hinter der Optimierung im Allgemeinen.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>2</version>
<date>2010-07-26</date>

<chapter>
<title>Einleitung</title>
<section>
<title>Was sind CFLAGS und CXXFLAGS?</title>
<body>

<p>
CFLAGS und CXXFLAGS sind Umgebungsvariablen, die dazu benutzt werden, um der
GNU Compiler Collection, <c>gcc</c>, mitzuteilen, welche Optionen es während
der Kompilation von Quellcode benutzen soll. CFLAGS sind für Code, der in C
geschrieben ist, während CXXFLAGS für Code in C++ gedacht ist.
</p>

<p>
Sie können benutzt werden, um die Menge von Debug-Nachrichten für ein Programm
zu verringern, um Level für Fehlerwarnungen zu erhöhen, und, natürlich, um
den produzierten Code zu optimieren. Das <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Invoking-GCC.html#Invoking-GCC">GNU
GCC Handbuch</uri> beinhaltet eine komplette Liste aller verfügbaren Optionen
und deren Zwecke.
</p>

</body>
</section>
<section>
<title>Wie werden sie benutzt?</title>
<body>

<p>
CFLAGS und CXXFLAGS können auf zwei Wege benutzt werden. Einerseits können sie
pro-Programm mit Makefiles, die von automake generiert werden, benutzt werden.
</p>

<p>
Jedoch sollte dies nicht getan werden, wenn man Pakete installiert, die sich im
Portage-Baum finden. Setzen Sie Ihre CFLAGS und CXXFLAGS stattdessen in
<path>/etc/make.conf</path>. Auf diese Weise werden alle Pakete mit den
angegebenen Optionen kompiliert.
</p>

<pre caption="CFLAGS in /etc/make.conf">
CFLAGS="-march=athlon64 -O2 -pipe"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
Wie Sie sehen können, wurde CXXFLAGS darauf gesetzt, alle Optionen, die CFLAGS
enthält, zu benutzen. Dies ist meistens die beste Wahl. Sie sollten niemals
zusätzliche Optionen in CXXFLAGS setzen müssen.
</p>

</body>
</section>
<section>
<title>Missverständnisse</title>
<body>

<p>
Auch wenn CFLAGS und CXXFLAGS sehr effektive Wege sind, um aus Quellcode
kleinere und/oder schnellere Binärdateien zu bekommen, können Sie ebenfalls die
Funktionalität Ihres Codes beeinflussen und verschlechtern, dessen Größe
erhöhen, die Ausführungszeit verlangsamen oder sogar zu Kompilationsfehlern
führen!
</p>

<p>
CFLAGS sind keine Wundermittel; sie machen Ihr System nicht automatisch
schneller oder lassen Ihre Binärdateien weniger Platz auf der Festplatte
belegen. Mehr und mehr Flags hinzuzufügen, im Versuch das System zu optimieren
(oder zu "rice"n), ist ein sicheres Rezept, um Fehler zu erhalten. Es gibt einen
Punkt, den Sie erreichen werden, an dem der Nutzen abnimmt.
</p>

<p>
Trotz der großen Prahlerei, die Sie im Internet finden werden, schädigen
aggressive CFLAGS und CXXFLAGS Ihre Programme eher, als dass sie ihnen gut tun.
Denken Sie immer daran, dass der Grund, warum die Flags existieren, an erster
Stelle der ist, dass sie nur an bestimmten Stellen aus bestimmten Gründen
benutzt werden sollen. Nur weil ein bestimmtes CFLAG für einen Codeabschnitt
gut ist, heißt das nicht, dass es auch alles andere, was Sie jemals auf Ihrem
Rechner installieren werden, kompiliert!
</p>

</body>
</section>
<section>
<title>Bereit?</title>
<body>

<p>
Da Sie nun über die Gefahren Bescheid wissen, lassen Sie uns einige sichere und
gescheite Optimierungen für Ihren Computer anschauen. Diese halten sie in einer
guten Stellung und werden Sie bei den Entwicklern beliebt machen, wenn Sie das
nächste Mal ein Problem im <uri link="http://bugs.gentoo.org/">Bugzilla</uri>
melden. (Die Entwickler bitten Sie normalerweise ein Paket mit minimalen CFLAGS
neu zu kompilieren, um zu schauen, ob das Problem bestehen bleibt. Denken Sie
dran: aggressive Flags können den Code ruinieren.)
</p>

</body>
</section>
</chapter>

<chapter>
<title>Optimieren</title>
<section>
<title>Die Grundlagen</title>
<body>

<p>
Das Ziel hinter der Benutzung von CFLAGS und CXXFLAGS ist es, maßgeschneiderten
Code für Ihr System zu erstellen; er sollte sowohl perfekt funktionieren als
auch möglichst klein und schnell sein. Manchmal schließen sich diese Bedingungen
gegenseitig aus, deshalb bleiben wir bei Kombinationen, die als gut
funktionierend bekannt sind. Idealerweise sind sie die besten, die für jede
CPU-Architektur zur Verfügung stehen.  Später werden wir die aggressiven Flags
erwähnen, so dass Sie wissen, wonach Sie Ausschau halten müssen. Wir werden
nicht jede einzelne Option, die im <c>gcc</c> Handbuch gelistet ist, besprechen
(es gibt Hunderte), aber die grundlegenden und meist bekannten Flags werden
behandelt.
</p>

<note>
Wann immer Sie sich nicht sicher sind, was ein Flag eigentlich tut, schauen Sie
sich das entsprechende Kapitel des <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Optimize-Options.html#Optimize-Options">gcc
Handbuchs</uri>s an. Wenn Sie weiterhin ratlos sind, versuchen Sie Google oder
die <c>gcc</c> Mailingliste.
</note>

</body>
</section>
<section>
<title>-march</title>
<body>

<p>
Die erste und wichtigste Option ist <c>-march</c>. Diese sagt dem Compiler,
welchen Code es für Ihre Prozessor-<uri
link="http://en.wikipedia.org/wiki/Microarchitecture">Architektur</uri> (oder
<e>arch</e>) erstellen soll; es bedeutet, dass er Code für eine bestimmte Art
von CPU produzieren soll. Verschiedene CPUs haben verschiedene Fähigkeiten,
unterstützen verschiedene Befehlssätze und haben verschiedene Wege, Code
auszuführen. Das <c>-march</c> Flag weist den Compiler an, speziellen Code für
Ihre CPU zu erstellen - mit allen Fähigkeiten, Merkmalen, Eigenheiten und so
weiter.
</p>

<p>
Obwohl die Variable CHOST in <path>/etc/make.conf</path> die generell zu
nutzende Architektur spezifiziert, sollte <c>-march</c> trotzdem benutzt werden,
so dass Programme für Ihren spezifischen Prozessor optimiert werden können. x86
und x86-64 CPUs (unter anderem) sollten vom Flag <c>-march</c> Gebrauch machen.
</p>

<p>
Was für eine CPU haben Sie? Um dies herauszufinden, führen Sie den folgenden
Befehl aus:
</p>

<pre caption="CPU-Informationen untersuchen">
$ <i>cat /proc/cpuinfo</i>
</pre>

<p>
Schauen wir uns <c>-march</c> einmal in Aktion an. Dieses Beispiel ist für einen
älteren Pentium III Chip:
</p>

<pre caption="/etc/make.conf: Pentium III">
CFLAGS="-march=pentium3"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
Hier ist ein weiteres Beispiel für eine 64-Bit-AMD-CPU:
</p>

<pre caption="/etc/make.conf: AMD64">
CFLAGS="-march=athlon64"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
Wenn Sie sich immer noch nicht sicher sind, was für eine Art von CPU Sie haben,
können Sie auch einfach <c>-march=native</c> verwenden. Wenn dieses Flag
genutzt wird, erkennt GCC Ihren Prozessor und setzt automatisch die
entsprechenden Flags für ihn. <brite>Dies sollte jedoch nicht benutzt werden,
wenn Sie vorhaben, Pakete für eine andere CPU zu kompilieren!</brite>
</p>

<p>
Wenn Sie also Pakete auf einem Computer kompilieren, aber vorhaben, sie auf
einem anderen auszuführen (z.B. beim Verwenden eines schnellen Computers zum
Bauen für einen älteren, langsameren), dann benutzen Sie <e>nicht</e>
<c>-march=native</c>. "Native" bedeutet, dass der produzierte Code <e>nur</e>
auf diesem Typ von CPUs laufen wird. Anwendungen, die mit <c>-march=native</c>
auf einer AMD Athlon 64 CPU gebaut wurden, laufen nicht auf einer alten VIA C3
CPU.
</p>

<p>
Es gibt auch die Flags <c>-mtune</c> und <c>-mcpu</c>. Diese sollten
normalerweise nur benutzt werden, wenn es keine vorhandene <c>-march</c> Option
gibt; bestimmte Prozessor-Architekturen benötigen möglicherweise <c>-mtune</c>
oder sogar <c>-mcpu</c>. Leider verhält sich gcc nicht gerade einheitlich, wenn
man betrachtet, wie sich ein Flag auf verschiedenen Architekturen verhält.
</p>

<p>
Auf x86 und x86-64 CPUs erstellt <c>-march</c> speziellen Code für die CPU unter
Benutzung aller Befehlssätze und der korrekten ABI; der Code wird keine
Abwärtskompatibilität für ältere/andere CPUs enthalten. Wenn Sie den Code nicht
auf anderen Systemen als dem, auf dem Sie Gentoo benutzen, ausführen müssen,
verwenden Sie weiterhin <c>-march</c>. Sie sollten die Benutzung von
<c>-mtune</c> nur in Erwägung ziehen, wenn Sie Code für ältere CPUs wie i386 und
i486 generieren müssen. <c>-mtune</c> produziert generischeren Code als
<c>-march</c>; obwohl es den Code für eine bestimmte CPU anpassen wird, achtet
es nicht auf vorhandene Befehlssätze und die ABI. Benutzen Sie <c>-mcpu</c>
nicht auf x86- oder x86-64-Systemen, da es auf diesen Architekturen als
"abgelehnt" betrachtet wird.
</p>

<p>
Nur nicht-x86/x86-64 CPUs (wie Sparc, Alpha und PowerPC) benötigen <c>-mtune</c>
oder <c>-mcpu</c> anstelle von <c>-march</c>. Auf diesen Architekturen verhält
sich <c>-mtune</c>/<c>-mcpu</c> manchmal wie <c>-march</c> (auf x86/x86-64) . .
. aber mit einem anderen Flag-Namen. Wie bereits gesagt, <c>gcc</c>s Verhalten
und Flag-Benennung ist einfach nicht auf allen Architekturen einheitlich.
Schauen Sie sich also auf jeden Fall das <c>gcc</c> <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Submodel-Options.html#Submodel-Options">Handbuch</uri>
an, um zu bestimmen, welches Flag Sie auf Ihrem System verwenden sollten.
</p>

<note>
Für weitere vorgeschlagene <c>-march</c>/<c>-mtune</c>/<c>-mcpu</c>
Einstellungen, lesen Sie bitte Kapitel 5 des entsprechenden <uri
link="/doc/de/handbook/">Gentoo Installationshandbuchs</uri> für Ihre
Architektur. Lesen Sie ebenfalls sowohl die Liste der <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Submodel-Options.html#Submodel-Options">architekturspezifischen
Optionen</uri> des <c>gcc</c> Handbuchs, als auch detailliertere Erklärungen zu
den Unterschieden zwischen <c>-march</c>, <c>-mcpu</c> und <c>-mtune</c>.
</note>

</body>
</section>
<section>
<title>-O</title>
<body>

<p>
Das Nächste ist die Variable <c>-O</c>. Diese kontrolliert das allumfassende
Level der Optimierung. Durch diese Variable erhöht sich die Zeit zum Kompilieren
und es wird eventuell mehr Speicher benötigt, insbesondere wenn Sie das
Optimierungslevel erhöhen.
</p>

<p>
Es gibt fünf <c>-O</c> Einstellungen: <c>-O0</c>, <c>-O1</c>, <c>-O2</c>,
<c>-O3</c> und <c>-Os</c>. Sie sollten nur eine davon in
<path>/etc/make.conf</path> benutzen.
</p>

<p>
Bis auf <c>-O0</c> aktivieren alle <c>-O</c> Einstellungen einige zusätzliche
Flags; lesen Sie also das Kapitel über die <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Optimize-Options.html#Optimize-Options">Optimierungs-Optionen</uri>,
um zu erfahren, welche Flags auf welchem <c>-O</c> Level aktiviert werden, und
um Erklärungen zu diesen zu erhalten.
</p>

<p>
Lassen Sie uns jeden Optimierungslevel untersuchen:
</p>

<ul>
  <li>
    <c>-O0</c>: Dieser Level (es ist der Buchstabe "O" gefolgt von einer Null)
    schaltet die Optimierung komplett aus und ist Standard, wenn kein <c>-O</c>
    Level in CFLAGS oder CXXFLAGS angegeben wird. Ihr Code wird nicht optimiert;
    dies ist normalerweise nicht gewünscht.
  </li>
  <li>
    <c>-O1</c>: Dies ist der grundlegendste Optimierungslevel. Der Compiler wird
    versuchen, schnelleren und kleineren Code zu produzieren, ohne zu viel
    Kompilationszeit zu benötigen. Es ist ziemlich simpel, aber sollte in jedem
    Fall funktionieren.
  </li>
  <li>
    <c>-O2</c>: Ein Schritt weiter als <c>-O1</c>. Dies ist der
    <e>empfohlene</e> Level der Optimierung, sofern Sie keine besonderen
    Anforderungen haben. <c>-O2</c> wird einige weitere Flags zusätzlich zu
    denen, die von <c>-O1</c> aktiviert werden, einschalten. Mit <c>-O2</c> wird
    der Compiler versuchen, die Performanz des Codes zu erhöhen, ohne auf die
    Größe zu achten und ohne zu viel Kompilationszeit zu benötigen.
  </li>
  <li>
    <c>-O3</c>: Dies ist nicht nur der höchstmögliche Optimierungslevel, sondern
    auch der riskanteste. Es wird mehr Zeit benötigt werden, um den Code mit
    dieser Option zu kompilieren, und <e>sollte nicht systemweit mit <c>gcc</c>
    4.x</e> benutzt werden. Das Verhalten von <c>gcc</c> hat sich seit Version
    3.x maßgeblich geändert. In 3.x waren die Ausführungszeiten mit <c>-O3</c>
    geringfügig schneller gegenüber <c>-O2</c>, aber dies ist mit <c>gcc</c>
    4.x nicht länger der Fall. Das Kompilieren aller Pakete mit <c>-O3</c>
    <e>wird</e> in größeren Binärdateien, die mehr Speicher benötigen,
    resultieren, und wird die Wahrscheinlichkeit auf Kompilationsfehler und
    unerwartetes Programmverhalten (inklusive Fehler) erhöhen. Die Nachteile
    überwiegen die Vorteil; das Prinzip des abnehmenden Nutzens zeigt sich.
    <b>Das Benutzen von <c>-O3</c> ist für <c>gcc</c> 4.x nicht empfohlen.</b>
  </li>
  <li>
    <c>-Os</c>: Dieser Level wird Ihren Code zur Größe hin optimieren. Er
    aktiviert alle <c>-O2</c> Optionen, die nicht die Größe des generierten
    Codes vergrößern. Er kann für Maschinen mit extrem limitiertem
    Festplattenplatz und/oder mit CPUs mit kleinen Cache-Größen nützlich sein.
    Jedoch kann dieser Level einige Probleme bereiten, weshalb er von vielen
    Ebuilds im Portage-Baum herausgefiltert wird. Die Benutzung von <c>-Os</c>
    ist nicht empfohlen.
  </li>
</ul>

<p>
Wie bereits erwähnt, ist <c>-O2</c> das empfohlene Optimierungslevel. Wenn
Paketkompilationen fehlschlagen, stellen Sie sicher, dass Sie <c>-O3</c> nicht
verwenden. Zum Testen und zur Sicherheit können Sie versuchen, Ihre CFLAGS und
CXXFLAGS auf ein niedrigeres Optimierungslevel zu setzen, z.B. <c>-O1</c> oder
sogar <c>-O0 -g2 -ggdb</c> (für Fehlerberichte und zum Prüfen auf mögliche
Probleme), und das Paket neu zu kompilieren.
</p>

</body>
</section>
<section>
<title>-pipe</title>
<body>

<p>
Ein bekanntes Flag ist <c>-pipe</c>. Dieses Flag hat eigentlich keinen Effekt
auf den generierten Code, aber es macht den Kompilationsprozess schneller. Es
weist den Compiler an, Pipes anstatt temporärer Dateien während der
verschiedenen Stufen der Kompilation zu verwenden, was mehr Speicher
beansprucht. Auf Systemen mit wenig Speicher könnte gcc gekillt wird. In diesem
Fall sollten Sie dieses Flag nicht verwenden.
</p>

</body>
</section>
<section>
<title>-fomit-frame-pointer</title>
<body>

<p>
Dies ist ein gebräuchliches Flag, um die Größe des generierten Codes zu
reduzieren. Es wird auf allen <c>-O</c> Leveln (außer <c>-O0</c>) auf
Architekturen, auf denen es das Debuggen nicht stört (z.B. x86-64), aktiviert,
aber möglicherweise müssen Sie es selbst aktivieren, indem Sie es zu Ihren
Flags hinzufügen. Obwohl das GNU <c>gcc</c> Handbuch nicht alle Architekturen,
auf denen es durch <c>-O</c> aktiviert wird, spezifiziert, werden Sie es
explizit  für x86 aktivieren müssen. Jedoch wird das Debuggen durch die
Benutzung dieses Flags hart bis unmöglich gemacht.
</p>

<p>
Um genau zu sein, macht es die Fehlersuche in Anwendungen, die in Java
geschrieben sind, um einiges schwieriger, auch wenn Java nicht der einzige Code
ist, der von diesem Flag betroffen ist. Während das Flag also helfen kann, macht
es das Debuggen schwieriger; bestimmte Backtraces werden nutzlos sein. Wenn Sie
jedoch nicht planen, viel Software-Debugging durchzuführen und kein weiteres
debugging-verwandtes CFLAGS wie <c>-ggdb</c> hinzugefügt haben, dann können Sie
versuchen <c>-fomit-frame-pointer</c> zu benutzen.
</p>

<impo>
Kombinieren Sie <c>-fomit-frame-pointer</c> <e>nicht</e> mit dem ähnlichen Flag
<c>-momit-leaf-frame-pointer</c>. Die Benutzung des letzteren Flags ist
nicht empfohlen, da <c>-fomit-frame-pointer</c> den Job bereits richtig
erledigt. Weiterhin wurde bewiesen, dass <c>-momit-leaf-frame-pointer</c> die
Performanz des Codes negativ beeinflusst.
<!--
Quelle dieser Info:
http://www.coyotegulch.com/products/acovea/aco5p4gcc40.html
-->
</impo>

</body>
</section>
<section>
<title>-msse, -msse2, -msse3, -mmmx, -md3now</title>
<body>

<p>
Diese Flags aktivieren die Befehlssätze <uri
link="http://de.wikipedia.org/wiki/Streaming_SIMD_Extensions">SSE</uri>, <uri
link="http://de.wikipedia.org/wiki/SSE2">SSE2</uri>, <uri
link="http://de.wikipedia.org/wiki/SSSE3">SSE3</uri>, <uri
link="http://de.wikipedia.org/wiki/MMX">MMX</uri> und <uri
link="http://de.wikipedia.org/wiki/3dnow">3DNow!</uri> für die Architekturen x86
und x86-64. Diese sind in erster Linie für Multimedia-, Spiele- und intensive
Gleitpunktzahl-Berechnungen und -Anwendungen nützlich, auch wenn sie einige
weitere mathematische Verbesserungen enthalten. Diese Befehlssätze finden sich
in moderneren CPUs.
</p>

<impo>
Stellen Sie sicher, dass Ihre CPU diese unterstützt, indem Sie <c>cat
/proc/cpuinfo</c> ausführen. Die Ausgabe wird alle zusätzlich unterstützten
Befehlssätze enthalten. Beachten Sie, dass <b>pni</b> einfach ein anderer Name
für SSE3 ist.
</impo>

<p>
Normalerweise müssen Sie keines dieser Flags zu <path>/etc/make.conf</path>
hinzufügen, so lange Sie die korrekte <c>-march</c> benutzen (z.B.
<c>-march=nocona</c> impliziert <c>-msse3</c>). Einige erwähnenswerte Ausnahmen
sind neuere VIA und AMD64 CPUs, welche Befehle unterstützen, die nicht von
<c>-march</c> impliziert werden (z.B. SSE3). Für solche CPUs müssen Sie diese
zusätzlichen Flags, falls nötig, hinzufügen, nachdem Sie die Ausgabe von
<c>cat /proc/cpuinfo</c> kontrolliert haben.
</p>

<note>
Sie sollten die <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/i386-and-x86_002d64-Options.html#i386-and-x86_002d64-Options">Liste</uri>
der x86 und x86-64 spezifischen Flags anschauen, um zu erfahren, welche
Befehlssätze durch das richtige CPU-Typ-Flag aktiviert werden. Wenn ein Befehl
aufgelistet ist, müssen Sie ihn nicht angeben; er wird durch die richtige
<c>-march</c> Einstellung eingeschaltet.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Optimierungs-FAQ</title>
<section>
<title>Aber ich bekomme bessere Performanz mit -funroll-loops -fomg-optimize!</title>
<body>

<p>
Nein, Sie <e>glauben</e> nur, dass Sie bessere Performanz bekommen, weil Sie
jemand überzeugt hat, dass mehrere Flags besser sind. Aggressive Flags werden
Ihren Anwendungen nicht gut tun, wenn sie systemweit genutzt werden. Sogar das
<c>gcc</c> <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Optimize-Options.html#Optimize-Options">Handbuch</uri>
sagt, dass die Benutzung von <c>-funroll-loops</c> und <c>-funroll-all-loops</c>
den Code größer und langsamer macht. Trotzdem sind diese beiden Flags, neben
<c>-ffast-math</c>, <c>-fforce-mem</c>, <c>-fforce-addr</c> und ähnlichen Flags,
weiterhin sehr beliebt unter den Ricern, welche die größten Rechte zum Prahlen
haben wollen.
</p>

<p>
Die Wahrheit ist, dass dies sehr gefährliche und aggressive Flags sind. Schauen
Sie sich in den <uri link="http://forums.gentoo.org">Gentoo Foren</uri> und
im <uri link="http://bugs.gentoo.org">Bugzilla</uri> um, um zu sehen, was diese
Flags tun: nichts Gutes!
</p>

<p>
Sie brauchen diese Flags nicht global in CFLAGS oder CXXFLAGS zu verwenden. Sie
werden Ihre Performanz einschränken. Sie hören sich vielleicht danach an, als
hätten sie ein hochperformantes, innovatives und hochaktuelles System, aber sie
tun nichts, außer Ihren Code zuzumüllen und Ihre Bugs als INVALID oder WONTFIX
schließen zu lassen.
</p>

<p>
Sie brauchen solche gefährlichen Flags nicht. <b>Benutzen Sie sie nicht</b>.
Bleiben Sie bei den Grundlagen: <c>-march</c>, <c>-O</c> und <c>-pipe</c>.
</p>

</body>
</section>
<section>
<title>Wie sieht es mit -O Leveln höher als 3 aus?</title>
<body>

<p>
Einige Benutzer prahlen über noch bessere Performanz, die sie durch Benutzung
von <c>-O4</c>, <c>-O9</c> und so weiter erhalten, aber die Wahrheit ist, dass
<c>-O</c> Level größer als 3 keinen Effekt haben. Der Compiler akzeptiert zwar
CFLAGS wie <c>-O4</c>, aber eigentlich tut er nichts mit ihnen. Er führt nur
die Optimierungen für <c>-O3</c> aus, mehr nicht.
</p>

<p>
Sie brauchen mehr Beweise? Untersuchen Sie den <c>gcc</c> <uri
link="http://gcc.gnu.org/viewcvs/trunk/gcc/opts.c?revision=124622&amp;view=markup">Quelltext</uri>:
</p>

<pre caption="-O Quelltext">
if (optimize >= 3)
    {
      flag_inline_functions = 1;
      flag_unswitch_loops = 1;
      flag_gcse_after_reload = 1;
      /* Allow even more virtual operators.  */
      set_param_value ("max-aliased-vops", 1000);
      set_param_value ("avg-aliased-vops", 3);
    }
</pre>

<p>
Wie Sie sehen können, wird jeder Wert größer als 3 einfach so behandelt wie
<c>-O3</c>.
</p>

</body>
</section>
<section>
<title>Wie sieht es mit überflüssigen Flags aus?</title>
<body>

<p>
Oft werden CFLAGS und CXXFLAGS, welche durch verschiedene <c>-O</c> Level
eingeschaltet werden, erneut in <path>/etc/make.conf</path> gesetzt. Manchmal
geschieht dies durch Ignoranz, aber es wird auch getan, um das Filtern oder
Ersetzen von Flags zu vermeiden.
</p>

<p>
Filtern oder Ersetzen von Flags wird in vielen der Ebuilds im Portage-Baum
durchgeführt. Dies geschieht gewöhnlich, da die Pakete mit bestimmten <c>-O</c>
Leveln nicht kompilieren oder wenn der Quelltext zu sensibel für zusätzliche
Flags ist. Das Ebuild filtert entweder alle CFLAGS und CXXFLAGS heraus oder
ersetzt <c>-O</c> mit einem anderem Level.
</p>

<p>
Das <uri
link="http://devmanual.gentoo.org/ebuild-writing/functions/src_compile/build-environment/index.html">Gentoo
Entwickler Handbuch</uri> beschreibt, wo und wie das Filtern/Ersetzen von Flags
funktioniert.
</p>

<p>
Es ist möglich das Filtern von <c>-O</c> zu umgehen, indem Sie jedes Flag für
ein bestimmtes Level, z.B. <c>-O3</c>, erneut auflisten:
</p>

<pre caption="Redundante CFLAGS angeben">
CFLAGS="-O3 -finline-functions -funswitch-loops"
</pre>

<p>
Dies ist jedoch <brite>keine kluge Sachen, zu tun</brite>. Das Filter von CFLAGS
hat einen Grund! Wenn Flags gefiltert werden, bedeutet dies, dass es unsicher
ist, ein Paket mit diesen Flags zu bauen. Es ist <e>nicht</e> sicher ein
komplettes Syste mit <c>-O3</c> zu kompilieren, falls einige Flags, die auf
diesem Level aktiviert werden, Probleme für bestimmte Pakete bereiten. Aus
diesem Grunde sollten Sie die Entwickler, die diese Pakete verwalten, nicht
"austricksen". <e>Vertrauen Sie den Entwicklern</e>. Das Filtern und Ersetzen
von Flags geschieht zu Ihrem Gunsten! Wenn ein Ebuild alternative Flags
angibt, versuchen Sie nicht, dies zu umgehen.
</p>

<p>
Sie werden höchstwahrscheinlich weiterhin Probleme bekommen, wenn sie Pakete
mit inakzeptablen Flags bauen. Wenn Sie Ihre Probleme im Bugzilla berichten,
werden die Flags, die Sie in <path>/etc/make.conf</path> benutzen, lesbar sein
und Ihnen wird gesagt, dass Sie versuchen sollen, ohne diese Flags erneut zu
kompilieren. Sparen Sie sich diese Probleme, indem Sie redundante Flags nicht
benutzen! Nehmen Sie nicht automatisch an, dass Sie es besser wissen, als die
Entwickler.
</p>

</body>
</section>
<section>
<title>Was ist mit LDFLAGS?</title>
<body>

<p>
Die Gentoo-Entwickler haben in den base-Profilen bereits grundlegende, sichere
LDFLAGS gesetzt, daher müssen Sie diese nicht ändern.
</p>

</body>
</section>
<section>
<title>Kann ich pro-Paket Flags benutzen?</title>
<body>

<p>
Es gibt keine unterstützte Methode, um CFLAGS oder andere Variablen auf einer
pro-Paket-Basis zu verwenden, auch wenn es einige <uri
link="http://forums.gentoo.org/viewtopic-p-3832057.html#3832057">ziemlich
missbrauchende</uri> Wege gibt, Portage zu diesem Verhalten zu zwingen.
</p>

<warn>
Sie <e>sollten nicht</e> versuchen, Portage zu zwingen, pro-Paket-Flags zu
verwenden, da dies in keinster Weise unterstützt wird und Bug-Reports erheblich
erschwert. Setzen Sie Ihre Flags einfach in <path>/etc/make.conf</path>, so dass
sie systemweit genutzt werden.
</warn>

</body>
</section>
</chapter>
<chapter>
<title>Ressourcen</title>
<section>
<body>

<p>
Die folgenden Ressourcen können Ihnen helfen, wenn Sie die Optimierung genauer
verstehen wollen:
</p>

<ul>
  <li>
    Das <uri link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/">GNU gcc
      Handbuch</uri>
  </li>
  <li>
    Kapitel 5 des <uri link="/doc/de/handbook/">Gentoo
    Installationshandbuchs</uri>
  </li>
  <li><c>man make.conf</c></li>
  <li><uri link="http://en.wikipedia.org">Wikipedia</uri></li>
  <li>
    <uri link="http://www.coyotegulch.com/products/acovea/">Acovea</uri>, ein
    Benchmarking- und Testpaket, welches Ihnen helfen kann zu bestimmen, wie
    unterschiedliche Compilerflags interagieren und den generierten Code
    betreffen, auch wenn die Vorschläge nicht für systemweite Benutzung
    angemessen sind. Es ist in Portage verfügbar: <c>emerge acovea</c>.
  </li>
  <li>Die <uri link="http://forums.gentoo.org/">Gentoo Foren</uri></li>
</ul>

</body>
</section>
</chapter>
</guide>
