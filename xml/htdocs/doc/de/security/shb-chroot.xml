<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/security/shb-chroot.xml,v 1.3 2006/09/30 07:03:01 grahl Exp $ -->
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- English CVS Version: 1.3 -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<sections>

<version>1.1</version>
<date>2005-12-15</date>

<section>
<title>Chrooten</title>
<body>

<p>
Einen Dienst zu chrooten stellt eine Möglichkeit dar einen Dienst (oder
Benutzer) auf für ihn vorgesehene Ressourcen zu beschränken und zu verhindern,
dass er Zugang zu Bereichen (oder Informationen) erlangt, die zu einem
unberechtigten Besitz von root-Rechten führen könnte. Indem man einen Dienst als
ein anderer Benutzer als <c>root</c> laufen lässt (<c>nobody</c>, <c>apache</c>,
<c>named</c>) kann ein Angreifer nur auf Dateien, mit den Berechtigungen des 
Benutzers, zugreifen. Dies bedeutet, dass ein Angreifer nie <c>root</c>
Zugang erlangen kann, selbst wenn der entsprechende Dienst eine
Sicherheitslücke hätte.
</p>

<p>
Einige Dienste wie zum Beispiel <c>pure-ftpd</c> und <c>bind</c> haben
eingebaute Fähigkeiten für chroot, andere Dienste bieten dies nicht.
Wenn der Dienst es anbietet, dann benutzen Sie es, andernfalls müssen Sie in
die Materie einsteigen und einen eigenen Benutzer erstellen. Lassen Sie es uns
nun versuchen und eine eigene chroot-Umgebung aufbauen. Um einen Einstieg zu
finden und zu sehen wie chroot arbeitet versuchen wir es zuerst mit <c>bash</c>
(als einfachen Einstieg ins Lernen).
</p>

<p>
Erstellen Sie das <path>/chroot</path> Verzeichnis mittels
<c>mkdir /chroot</c>. Nun müssen wir herausfinden, mit welche dynamischen
Bibliotheken <c>bash</c> kompiliert wurde (wenn es mit <c>-static</c>
kompiliert wurde, dann ist dieser Schritt nicht nötig).
</p>

<p>
Der folgende Befehl wird eine Liste der von <c>bash</c> benutzten Bibliotheken
ausgeben.
</p>

<pre caption="Benutzte Bibliotheken auflisten">
# <i>ldd /bin/bash</i>
  libncurses.so.5 => /lib/libncurses.so.5 (0x4001b000)
  libdl.so.2 => /lib/libdl.so.2 (0x40060000)
  libc.so.6 => /lib/libc.so.6 (0x40063000)
  /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
</pre>

<p>
Nun erstellen wir die Umgebung für <c>bash</c>.
</p>

<pre caption="chroot-Umgebung für Bash erstellen">
# <i>mkdir /chroot/bash</i>
# <i>mkdir /chroot/bash/bin</i>
# <i>mkdir /chroot/bash/lib</i>
</pre>

<p>
Nun kopieren wir die von <c>bash</c> benutzten Dateien (<path>/lib</path>) in
das chrootete <path>lib</path> und kopieren den bash Befehl n das Verzeichnis
<path>/bin</path> im chroot. Dies wird dieselbe Umgebung erstellen - nur
eben mit weniger Funktionalität. Versuchen Sie nach dem kopieren:
<c>chroot /chroot/bash /bin/bash</c>.  Wenn Sie ein Prompt bekommen, dass als
aktuelles Verzeichnis <c>/</c> angibt, dann hat alles funktioniert. Wenn
nicht, wird ordnungsgemäß eine Fehlermeldung erscheinen, welche die fehlende
Datei angibt.  Manche dynamischen Bibliotheken bauen aufeinander auf.
</p>

<p>
Sie werden feststellen, dass innerhalb der chroot-Umgebung nichts anderes als
<c>echo</c> funktioniert. Dies ist deshalb so, weil wir keine anderen Befehle
in unserer chroot-Umgebung haben und <c>echo</c> ein in bash eingebauter Befehl
ist.
</p>

<p>
Dies ist in etwa der Weg den Sie gehen würden, um einen "ge-chrooteten" Dienst
zu erstellen. Der einzige Unterschied ist, dass Dienste manchmal auf Geräten
und Konfigurationsdateien in <path>/etc</path> basieren.  Kopieren Sie diese
einfach in die chroot-Umgebung (Geräte können mit cp -a kopiert werden) und
editieren Sie das Init-Skript so dass es die chroot-Umgebung vor der Ausführung
verwendet. Es kann schwierig sein herauszufinden, welche Konfigurationsdateien
und Geräte ein Dienst benutzt. Dies ist der Punkt, an dem <c>strace</c>
nützlich wird. Starten Sie den Dienst mit <path>/usr/bin/strace</path> bash und
suchen Sie nach open, read, stat und vielleicht noch connect. Dies wird Ihnen
Aufschluss darüber geben, welche Dateien Sie kopieren müssen. Aber in den
meisten Fällen kopieren Sie einfach die passwd-datei (editieren sie die Kopie
und entfernen Sie die Benutzer, die mit dem Dienst nichts zu tun haben),
<path>/dev/zero</path>, <path>/dev/log</path> und <path>/dev/random</path>.
</p>

</body>
</section>
<section>
<title>User Mode Linux</title>
<body>

<p>
Ein weiterer Weg eine besser gesicherte Umgebung zu erstellen besteht darin,
eine virtuelle Maschine zu verwenden. Eine virtuelle Maschine ist, wie der
Name schon sagt, ein Prozess der auf dem wirklichen Betriebssystem läuft und
eine Hardware- und Betriebssystemumgebung vorspiegelt, welche eine eigene
Maschine zu sein scheint. Der Sicherheitsgewinn hierbei ist, dass bei einer
Kompromittierung der virtuellen Maschine lediglich diese betroffen ist und
nicht die übergeordnete Installation.
</p>

<p>
Für weitere Informationen zum Aufsetzen von User Mode Linux können Sie den <uri
link="/doc/en/uml.xml">User Mode Linux Guide</uri>
(englisch) zu Rate ziehen.
<!-- FIXME: UML noch nicht übersetzt -->
</p>

</body>
</section>

</sections>
