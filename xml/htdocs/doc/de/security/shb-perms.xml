<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/security/shb-perms.xml,v 1.3 2007/03/10 21:44:19 grahl Exp $ -->
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- English CVS Version: 1.4 -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<sections>

<version>1.1</version>
<date>2006-09-16</date>

<section>
<title>Welt-lesbar</title>
<body>

<p>
Normale Benutzer sollten zu Konfigurationsdateien oder Passwörtern keinen Zugang
haben. Ein Angreifer kann Passwörter aus einer Datenbank oder von einer Webseite
stehlen und verunstalten oder noch schlimmer: Daten löschen. Deswegen ist es
notwendig, dass die Berechtigungen korrekt gesetzt sind. Wenn Sie sicher sind,
dass eine Datei nur von root benutzt wird, geben Sie dieser die Berechtigung
<c>0600</c> und ordnen Sie diese mit <c>chown</c> dem richtigen Benutzer zu.
</p>

</body>
</section>
<section>
<title>Welt/Gruppen-schreibbar</title>
<body>

<pre caption="Auffinden von Dateien und Verzeichnissen, die Welt-schreibbar sind">
# <i>find / -type f \( -perm -2 -o -perm -20 \) -exec ls -lg {} \; 2>/dev/null >writable.txt</i>
# <i>find / -type d \( -perm -2 -o -perm -20 \) -exec ls -ldg {} \; 2>/dev/null >>writable.txt</i>
</pre>

<p>
Dies schafft eine riesige Datei mit Berechtigungen von allen Dateien, die
entweder Schreibberechtigungen für alle oder eine Gruppe haben. Überprüfen Sie
die Berechtigungen und eliminieren Sie die für alle schreibbaren Dateien durch
das Ausführen von <path>/bin/chmod o-w</path> für die Dateien.
</p>

</body>
</section>
<section>
<title>SUID/SGID Dateien</title>
<body>

<p>
Dateien bei denen das SUID oder SGID Bit gesetzt ist, werden mit den Rechten des
Benutzers bzw. der Gruppe ausgeführt, der diese Datei <e>gehört</e>.
Normalerweise werden diese Bits bei Dateien verwendet, die als root ausgeführt
werden müssen um ihren Zweck zu erfüllen. Diese Dateien können zu lokalen root
Einbrüchen führen (falls Sie Sicherheitslücken enthalten).  Dieses ist
gefährlich, daher sollten Dateien mit gesetztem SUID/SGID Bit auf jeden Fall
vermieden werden. Sollten Sie diese Dateien nicht verwenden, dann wenden Sie
<c>chmod 0</c> auf diese an oder unmergen das Paket welches diese Dateien
mitgebracht hat (das zugehörige Paket können Sie mit <c>equery</c> finden;
sollte es noch nicht installiert sein, dann geben Sie einfach <c>emerge
gentoolkit</c> ein). Ansonsten schalten Sie das SUID Bit einfach mit
<c>chmod -s</c> aus.
</p>

<pre caption="Auffinden von setuid Dateien">
# <i>find / -type f \( -perm -004000 -o -perm -002000 \) -exec ls -lg {} \; 2>/dev/null >suidfiles.txt</i>
</pre>

<p>
Dies erzeugt eine Datei mit einer Liste aller SUID/SGID Dateien.
</p>

<pre caption="Liste der setuid binären Dateien">
/bin/su
/bin/ping
/bin/mount
/bin/umount
/var/qmail/bin/qmail-queue
/usr/bin/chfn
/usr/bin/chsh
/usr/bin/crontab
/usr/bin/chage
/usr/bin/expiry
/usr/bin/sperl5.6.1
/usr/bin/newgrp
/usr/bin/passwd
/usr/bin/gpasswd
/usr/bin/procmail
/usr/bin/suidperl
/usr/lib/misc/pt_chown
/usr/sbin/unix_chkpwd
/usr/sbin/traceroute
/usr/sbin/pwdb_chkpwd
</pre>

<p>
Standardmäßig hat Gentoo Linux nicht viele SUID Dateien (allerdings hängt es
davon ab, was Sie installiert haben), aber Sie könnten eine Liste wie die obige
erhalten. Viele dieser Befehle sollten nicht von normalen Benutzern benutzt
werden, sondern nur von root. Schalten Sie das suid bit bei <c>ping</c>,
<c>mount</c>, <c>umount</c>, <c>umount</c>, <c>chfn</c>, <c>chsh</c>,
<c>newgrp</c>, <c>suidperl</c>, <c>pt_chown</c> und <c>traceroute</c> aus. Sie
tun dies mit dem Befehl <c>chmod -s</c> bei jeder einzelnen Datei. Entfernen
Sie das Bit nicht von <c>su</c>, <c>qmail-queue</c> oder <c>unix_chkpwd</c>.
Dies würde dazu führen, dass Sie nicht mehr <c>su</c> benutzen könnten und
keine Mail empfangen würden. Durch Entfernen des Bits (wenn es sicher ist, dies
zu tun) beseitigen Sie die Möglichkeit, dass ein normaler User (oder Angreifer)
root-Zugriff durch eine dieser Dateien erlangen kann.
</p>

<p>
Die einzigen SUID Dateien die ich auf meinem System habe sind <c>su</c>,
<c>passwd</c>, <c>gpasswd</c>, <c>qmail-queue</c>, <c>unix_chkpwd</c> und
<c>pwdb_chkpwd</c>. Aber wenn Sie X benutzen, könnten Sie einige mehr haben,
denn X benötigt diesen erweiterten Zugriff via SUID.
</p>

</body>
</section>
<section>
<title>SUID/SGID Binärdateien und Hardlinks</title>
<body>

<p>
Eine Datei wird nur als gelöscht angesehen, falls keine Links mehr auf sie
zeigen.  Dies mag nach einem merkwürdigen Konzept klingen, aber bedenken Sie,
dass ein Dateiname wie <path>/usr/bin/perl</path> eigentlich nur ein Link auf
einen Inode ist, wo die Daten gespeichert sind. Eine beliebige Zahl von Links
kann auf eine Datei verweisen und solange noch einer existiert, existiert auch
die Datei.
</p>

<p>
Wenn Ihre Benutzer Zugang zu einer Partition haben, die nicht mit <c>nosuid</c>
oder <c>noexec</c> eingebunden sind (z. B. falls <path>/tmp</path>,
<path>/home</path>, oder <path>/var/tmp</path> nicht auf unterschiedlichen
Partitionen liegen), sollten Sie darauf achten, dass Benutzer keine Hardlinks
auf SUID oder SGID Binaries erstellen, so dass Sie nach einem Update durch
Portage immer noch Zugang zu alten Versionen haben.
</p>

<warn>
Wenn Portage eine Warnung über verbliebene Hardlinks ausgegeben hat und Benutzer
Schreibrechte auf einer Partition haben, welche die Ausführung von SUID/SGID
Dateien erlaubt, dann sollten Sie diesen Abschnitt aufmerksam lesen.  Einer der
Benutzer könnte versuchen das Update zu umgehen indem er eine alte Version eines
Programmes behält. Falls Benutzer keine eigenen SUID Dateien erstellen können
oder falls Sie Programme nur über den dynamischen Loader ausführen können
(Partitionen mit <c>noexec</c> eingebunden), dann brauchen Sie sich keine Sorgen
zu machen.
</warn>

<note>
Benutzer brauchen keinen Lesezugriff auf eine Datei um einen Link zu ihr zu
erstellen; es werden lediglich Leserechte für das Verzeichnis benötigt in dem
diese sich befindet.
</note>

<p>
Um herauszufinden wie viele Links eine Datei hat, kann der <c>stat</c> Befehl
verwendet werden.
</p>

<pre caption="Stat Befehl">
$ stat /bin/su
  File: `/bin/su'
  Size: 29350           Blocks: 64         IO Block: 131072 regular file
Device: 900h/2304d      Inode: 2057419     Links: 1
Access: (4711/-rws--x--x)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2005-02-07 01:59:35.000000000 +0000
Modify: 2004-11-04 01:46:17.000000000 +0000
Change: 2004-11-04 01:46:17.000000000 +0000
</pre>

<p>
Um SUID und GUID Dateien mit mehreren Links zu finden, kann <c>find</c>
verwendet werden.
</p>

<pre caption="Finden von mehrfach verlinkten SUID/SGID Binärdateien">
$ find / -type f \( -perm -004000 -o -perm -002000 \) -links +1 -ls
</pre>

</body>
</section>
</sections>
