<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/security/shb-logging.xml,v 1.6 2007/03/10 21:44:19 grahl Exp $ -->
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- English CVS Version: 1.5 -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<sections>

<version>1.2</version>
<date>2005-11-25</date>

<section>
<title>Einleitung</title>
<body>
<p>
Zusätzliche Protokollierung sollte hinzugefügt werden, um Warnungen oder Fehler
aufzuspüren, die auf einen momentanen oder bereits durchgeführten Angriff
hinweisen könnten. Angreifer beobachten ein Netzwerk oder durchsuchen dies oft,
bevor sie angreifen.
</p>

<p>
Es ist auch unersetzlich, dass die Protokolldateien einfach zu lesen und zu
verwalten sind. Gentoo Linux gibt ihnen die Möglichkeit bei der Installation
zwischen drei verschiedenen Protokollierungsprogrammen zu wählen.
</p>

</body>
</section>
<section>
<title>Loggen: Syslogd</title>
<body>

<p>
Syslogd ist das gängigste Protokollierungsprogramm für Linux und Unix. Es
beinhaltet ein wenig Protokollrotation aber die Verwendung von
<path>/usr/sbin/logrotate</path> in einem Cron Job (logrotate wird in
<path>/etc/logrotate.conf</path> konfiguriert) könnte sich als
leistungsfähiger heraustellen, denn <c>logrotate</c> hat viele Funktionen. Wie
oft die Protokollrotation stattfinden sollte hängt von der Systembelastung ab.
</p>

<p>
Hierunter sehen Sie die Standard Konfiguration <path>/syslog.conf</path> mit
einigen zusätzlichen Features. Wir haben die <c>cron</c> und <c>tty</c> Zeilen
entkommentiert und einen Remote Logging Server hinzugefügt. Um die Sicherheit
weiter zu erhöhen, können Sie Logs an zwei Orten schreiben lassen.
</p>

<pre caption="/etc/syslog.conf">
#  /etc/syslog.conf      Configuration file for syslogd.
#
#                       For more information see syslog.conf(5)
#                       manpage.
#                       This is from Debian, we are using it for now
#                       Daniel Robbins, 5/15/99

#
# Zuerst einige Standardprotokolldateien.
# Protokollierung nach Einrichtung.
#

auth,authpriv.*                 /var/log/auth.log
*.*;auth,authpriv.none          -/var/log/syslog
cron.*                         /var/log/cron.log
daemon.*                        -/var/log/daemon.log
kern.*                          -/var/log/kern.log
lpr.*                           -/var/log/lpr.log
mail.*                          /var/log/mail.log
user.*                          -/var/log/user.log
uucp.*                          -/var/log/uucp.log
local6.debug                    /var/log/imapd.log

#
# Protokollierung für das Mailsystem. Trennung erfolgt so,
# dass es einfach ist Skripte, zum parsen dieser Dateien, zu schreiben.
#
mail.info                       -/var/log/mail.info
mail.warn                       -/var/log/mail.warn
mail.err                        /var/log/mail.err

# Protokollierung für INN News Systeme
#
news.crit                       /var/log/news/news.crit
news.err                        /var/log/news/news.err
news.notice                     -/var/log/news/news.notice

#
# Einige `catch-all' Protokolldateien
#
*.=debug;\
        auth,authpriv.none;\
        news.none;mail.none     -/var/log/debug
*.=info;*.=notice;*.=warn;\
        auth,authpriv.none;\
        cron,daemon.none;\
        mail,news.none          -/var/log/messages

#
# Notfälle und Warnungen werden an alle eingeloggten Benutzer geschickt.
#
*.emerg                         *
*.=alert                        *

#
# Ich bevorzuge es Nachrichten auf der Konsole angezeigt zu bekommen, jedoch
# nur auf einer virtuellen Konsole die normalerweise ungenutzt ist.
#
daemon,mail.*;\
       news.=crit;news.=err;news.=notice;\
       *.=debug;*.=info;\
       *.=notice;*.=warn       /dev/tty8

#Einrichten eines entfernten Protokollierungsservers
*.*                        @logserver

# Die genannte Pipe /dev/xconsole ist für das `xconsole' Programm. Um es zu
# verwenden müssen Sie `xconsole' mit der `-file' Option aufrufen:
#
#    $ xconsole -file /dev/xconsole [...]
#
# Anmerkung: passen Sie die folgende Liste an oder Sie werden wahnsinning,
# sofern ihre Seite eine gewisse Größe hat...
#
#daemon.*,mail.*;\
#       news.crit;news.err;news.notice;\
#       *.=debug;*.=info;\
#       *.=notice;*.=warn       |/dev/xconsole

local2.*                --/var/log/ppp.log
</pre>

<p>
Der Angreifer wird höchstwahrscheinlich versuchen seine Spuren zu verwischen,
indem er Protokolldateien bearbeitet oder löscht. Sie können es für den
Angreifer schwerer machen indem Sie das Protokoll an einen oder mehrere
Protokollserver auf verschiedenen Maschinen schicken. Mehr Informationen über
syslogd finden Sie durch Aufruf von <c>man syslog</c>.
</p>

</body>
</section>
<section>
<title>Metalog</title>
<body>

<p>
<uri link="http://metalog.sourceforge.net">Metalog</uri> von Frank Dennis
bietet nicht die Möglichkeit Protokolle an einen entfernten (remote) Server zu
senden, aber es hat Vorteile im  Bereich der Performance und der
Protokollierungsflexibilität. Es kann nach Programmnamen, Dringlichkeit oder
nach Einrichtung protokollieren (wie syslogd) und beinhaltet reguläre
Ausdrucksübereinstimmung und die Möglichkeit Befehle auszuführen. Es ist sehr
gut um Handeln zu können, wenn nötig.
</p>

<p>
Die Standard Konfiguration ist meistens ausreichend. Wenn Sie benachrichtigt
werden wollen, wenn z.B. ein Anmeldevorgang fehlschlägt benutzen Sie eines der
folgenden Skripte.
</p>

<p>
Für postfix:
</p>

<pre caption="/usr/local/sbin/mail_pwd_failures.sh für postfix">
#! /bin/sh
echo "$3" | mail -s "Warning (program : $2)" root
</pre>

<p>
Für netqmail:
</p>

<pre caption="/usr/local/sbin/mail_pwd_failures.sh für netqmail">
#!/bin/sh
echo "To: root
Subject:Failure (Warning: $2)
$3
" | /var/qmail/bin/qmail-inject -f root
</pre>

<p>
Denken Sie daran das Skript mit <c>/bin/chmod +x
/usr/local/sbin/mail_pwd_failures.sh</c> ausführbar zu machen.
</p>

<p>
Kommentieren Sie dann die Zeile unter "Password failures" in
<path>/etc/metalog/metalog.conf</path> wie folgt aus:
</p>

<pre caption="/etc/metalog/metalog.conf">
command  = "/usr/local/sbin/mail_pwd_failures.sh"
</pre>

</body>
</section>
<section>
<title>Syslog-ng</title>
<body>

<p>
Syslog-ng enthält einige derselben Funktionen wie Syslog und Metalog mit einem
kleinen Unterschied. Es ermöglicht die Filterung von Nachrichten basierend auf
Level und Inhalt (wie Metalog), bietet entferntes Protokollieren (wie syslog),
kann Protokolle von syslogd verarbeiten (sogar Streams von Solaris), auf ein
TTY ausgeben, Programme ausführen und auch als Protokollierungsserver dienen.
Grundlegend ist dies das Beste aus beiden Protokollierern kombiniert mit einer
erweiterten Konfiguration.
</p>

<p>
Eine klassische, leicht modifizierte Konfigurationsdatei:
</p>

<pre caption="/etc/syslog-ng/syslog-ng.conf">
options { chain_hostnames(off); sync(0); };

#Quelle von der das Log gelesen werden soll
source src { unix-stream("/dev/log"); internal(); };
source kernsrc { file("/proc/kmsg"); };

#Ziele festlegen
destination authlog { file("/var/log/auth.log"); };
destination syslog { file("/var/log/syslog"); };
destination cron { file("/var/log/cron.log"); };
destination daemon { file("/var/log/daemon.log"); };
destination kern { file("/var/log/kern.log"); };
destination lpr { file("/var/log/lpr.log"); };
destination user { file("/var/log/user.log"); };
destination mail { file("/var/log/mail.log"); };

destination mailinfo { file("/var/log/mail.info"); };
destination mailwarn { file("/var/log/mail.warn"); };
destination mailerr { file("/var/log/mail.err"); };

destination newscrit { file("/var/log/news/news.crit"); };
destination newserr { file("/var/log/news/news.err"); };
destination newsnotice { file("/var/log/news/news.notice"); };

destination debug { file("/var/log/debug"); };
destination messages { file("/var/log/messages"); };
destination console { usertty("root"); };
destination console_all { file("/dev/tty12"); };
destination xconsole { pipe("/dev/xconsole"); };

#Filter erstellen
filter f_authpriv { facility(auth, authpriv); };
filter f_syslog { not facility(authpriv, mail); };
filter f_cron { facility(cron); };
filter f_daemon { facility(daemon); };
filter f_kern { facility(kern); };
filter f_lpr { facility(lpr); };
filter f_mail { facility(mail); };
filter f_user { facility(user); };
filter f_debug { not facility(auth, authpriv, news, mail); };
filter f_messages { level(info..warn)
        and not facility(auth, authpriv, mail, news); };
filter f_emergency { level(emerg); };

filter f_info { level(info); };
filter f_notice { level(notice); };
filter f_warn { level(warn); };
filter f_crit { level(crit); };
filter f_err { level(err); };
filter f_failed { match("failed"); };
filter f_denied { match("denied"); };

#Filter und Ziele verbinden
log { source(src); filter(f_authpriv); destination(authlog); };
log { source(src); filter(f_syslog); destination(syslog); };
log { source(src); filter(f_cron); destination(cron); };
log { source(src); filter(f_daemon); destination(daemon); };
log { source(kernsrc); filter(f_kern); destination(kern); };
log { source(src); filter(f_lpr); destination(lpr); };
log { source(src); filter(f_mail); destination(mail); };
log { source(src); filter(f_user); destination(user); };
log { source(src); filter(f_mail); filter(f_info); destination(mailinfo); };
log { source(src); filter(f_mail); filter(f_warn); destination(mailwarn); };
log { source(src); filter(f_mail); filter(f_err); destination(mailerr); };

log { source(src); filter(f_debug); destination(debug); };
log { source(src); filter(f_messages); destination(messages); };
log { source(src); filter(f_emergency); destination(console); };

#Standard-Protokoll
log { source(src); destination(console_all); };
</pre>

<p>
Syslog-ng ist sehr einfach zu konfigurieren, aber es ist auch sehr einfach
etwas zu übersehen, da die Konfigurationsdatei riesig ist. Der Autor verspricht
zudem noch einige zusätzliche Funktionen wie Verschlüsselung,
Authentifizierung, Komprimierung und MAC (Mandatory Access Control) Kontrolle.
Mit diesen Optionen wird es perfekt sein für Netzwerkprotokollierung, da der
Angreifer die Protokolle nicht ausspionieren kann.
</p>

<p>
Syslog-ng hat auch noch einen anderen Vorteile - es muss nicht als root laufen!
</p>

</body>
</section>

<section>
<title>Protokollanalyse mit Logcheck</title>
<body>

<p>
Natürlich ist das Erstellen von Protokollen nur die halbe Miete. Ein Programm
wie Logcheck kann die regelmäßige Analyse von Protokollen sehr vereinfachen.
Logcheck ist ein Skript, zusammen mit einem Binary namens <c>logtail</c>,
welches vom Cron aufgerufen wird und die Protokolle regelmäßig mit einer Liste
verdächtiger Aktivitäten vergleicht; dann versendet es die Ausgabe per Mail an
root.
</p>

<p>
Logcheck und logtail sind Teil des <c>app-admin/logsentry</c> Pakets.
</p>

<p>
Logcheck verwendet vier Dateien um wichtige Einträge von den unwichtigen zu
filtern. Diese Dateien sind <path>logcheck.hacking</path>, welche Nachrichten
bekannter Hackerangriffe enthält, <path>logcheck.violations</path>, mit den
Signaturen von Sicherheitsverletzungen,
<path>logcheck.violations.ignore</path>, welche Schlüsselwörter enthält, die
vermutlich durch die violations Datei erkannt würden, so dass normale Einträge
ignoriert werden können und <path>logcheck.ignore</path>, mit Einträgen, die
ingnoriert werden sollen.
</p>

<warn>
Lassen Sie <path>logcheck.violations.ignore</path> nicht leer, da Logcheck
<c>grep</c> zum Durchsuchen der Protokolle einsetzt und einige Versionen
hiervon interpretieren eine leere Datei als Platzhalter, was dazu führen
könnte, dass alle Einträge in der violations Datei ignoriert werden.
</warn>
<!-- FIXME: Might want to add more details on logcheck here...I have to install
it on Gentoo to figure out how it's configured! -->
</body>
</section>

</sections>
