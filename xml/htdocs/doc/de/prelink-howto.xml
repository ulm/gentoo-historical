<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/prelink-howto.xml,v 1.7 2005/04/06 09:45:38 neysx Exp $ -->

<!-- English CVS Version: 1.34 -->

<guide link="/doc/de/prelink-howto.xml">
<title>Gentoo Linux Prelink Einführung</title>

<author title="Autor">
  <mail link="cretin@gentoo.org">Stefan Jones</mail>
</author>
<author title="Bearbeiter"><!-- zhen@gentoo.org -->
  John P. Davis
</author>
<author title="Bearbeiter">
  <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Bearbeiter">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Bearbeiter">
  <mail link="erwin@gentoo.org">Erwin</mail>
</author>
<author title="Übersetzer">
  <mail link="tevers@onlinehome.de">Torsten Evers</mail>
</author>
<author title="Korrektor">
  <mail link="jhgz1@ufl.edu">Jan Hendrik Grahl</mail>
</author>

<abstract>
Diese Einführung informiert darüber, wie man die prelink Unterstützung
in der Portage 2.0.46 und später verwendet.
</abstract>

<license/>

<version>1.11</version>
<date>2005-03-25</date>


<chapter>
<title>Einleitung</title>
<section>
<title>Was ist Prelink, und wie kann es mir helfen ?</title>
<body>

<p>
Die meisten, gebräuchlichen Programme verwenden shared libraries. Diese
shared libraries müssen während der Laufzeit in den Speicher geladen
und vielfältige Symbolreferenzen aufgelöst werden. Fr die meisten, kleineren
Anwendungen geschieht dies sehr schnell. Für Programme die in C++ geschrieben
worden sind und die zudem viele Bibliotheks-Abhängigkeiten haben, kann das
Linken eine nicht unerhebliche Zeit in Anspruch nehmen.
</p>

<p>
Auf den meisten Systemen werden Bibliotheken nicht sehr oft gewechselt. Daher
sind die Operationen, die zum Linken des Programms ausgeführt werden, immer
dieselben. Prelink nutzt diesen Umstand aus, indem es das Linken durchführt
und in der Programmdatei abspeichert, es also eigentlich bereits vor dem
Ausführen linkt (daher <c>prelink</c>).
</p>

<p>
Prelinking kann die Startzeit von Anwendungen stark verkürzen. Zum Beispiel 
kann die Ladezeit für ein typisches KDE-Programm um bis zu 50% verkürzt werden.
Lediglich beim Ersetzen von Bibliotheken muss durch erneutes Ausführen von 
Prelink eine neue Programmdatei erzeugt werden.
</p>

</body>
</section>
<section>
<title>Zusammenfassung</title>
<body>

<ul>
  <li>
    Prelinking wird mit einem Programm durchgeführt, das, wie unerwartet,
    <c>prelink</c> heißt. Es verändert die Programmdatei, um sie schneller
    starten zu lassen. 
  </li>
  <li>
    Wenn Sie Bibliotheken verändern, die in mit Prelink beschleunigten 
    Anwendungen verwendet werden, so müssen Sie diese nochmals mit Prelink
    bearbeiten. Andernfalls verlieren Sie den Geschwindigkeitsvorteil.
    Das heißt, jedesmal wenn Sie ein Paket mittels der Portage updaten, 
    müssen Sie diese erneut mit Prelink bearbeiten.
  </li>
  <li>
    Die Veränderung an der Programmdatei kann vollständig wieder rückgängig
    gemacht werden. <c>prelink</c> besitzt eine Wiederherstellungsoption.
  </li>
  <li>
    Aktuelle Versionen von Portage können mittels <c>prelink</c>  die sich
    verändernden MD5-Summen und mtimes der Programmdateien bearbeiten.
  </li>
  <li>
    Sie müssen nicht <c>FEATURES="prelink"</c> in ihrer <path>make.conf</path> 
    Datei setzen. Portage wird prelink autmoatisch unterstützten wenn es die 
    Binärdatei von prelink finden kann.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Prelink einrichten</title>
<section>
<title>Installation des Programms</title>
<body>

<p>
Zuerst müssen Sie das <c>prelink</c> Hilfsprogramm installieren. Der emerge 
Vorgang überprüft automatisch dass Ihr System prelink auf sichere Art und 
Weise verwenden kann.
</p>

<pre caption = "Installation von Prelink">
# <i>emerge prelink</i>
</pre>

<p>
Einige Benutzer erhalten Fehlermeldungen beim emergen von Prelink, weil diese
Tests fehlschlagen. Diese Tests wurden aus Sicherheitsgründen hinzugefügt. 
Prelink's Verhalten ist nicht definiert, wenn Sie sie ausschalten. Die Fehler
beim Ausführen von emerge hängen gewöhnlich von den Kern-Paketen binutils, gcc
und glibc ab. Versuchen Sie, diese Pakete in der angegebenen Reihenfolge zu
emergen.
</p>

<note>
Tipp: Wenn Sie einen Fehler erhalten, versuchen Sie <c>Prelink</c> selbst
zu compilieren (<c>./configure</c> ; <c>make</c> ; <c>make check</c>). Bei
einem Fehler sehen Sie sich bitte die *.log Dateien im testsuite-Verzeichnis
an, sie können wertvolle Hinweise enthalten.
</note>

<p>
Wenn Sie eine bestimmte, zu einem Fehler führende Vorgehensweise anhand von
einzelnen Schritten beschreiben können, schicken Sie diese bitte per Email
an <mail link="cretin@gentoo.org">Stefan Jones</mail>.
</p>

</body>
</section>
<section>
<title>Vorbereiten Ihres Systems</title>
<body>

<p>
Als nächstes sollten Sie das "pic" USE Flag in <path>/etc/make.conf</path> 
aktivieren. Vergessen Sie nicht <c>emerge --update --deep --newuse world</c> 
auszuführen, so dass die Änderung der USE Flags in Ihr System eingearbeitet 
werden können.
</p>

<p>
Stellen Sie auch sicher, dass Sie -fPIC in Ihren  CFLAGS/CXXFLAGS <e>nicht</e> 
gesetzt haben. Wenn Sie dies haben, werden Sie Ihr gesamtes System ohne neu 
erstellen müssen.
</p>

</body>
</section>
<section>
<title>Konfiguration</title>
<body>

<p>
Ausführen von <c>env-update</c> wird die <path>/etc/prelink.conf</path> Datei 
generieren, die <path>Prelink</path> anweist, welche Dateien zu bearbeiten sind.
</p>

<pre caption="Ausführen von env-update">
# <i>env-update</i>
</pre>

<p>
Unglücklicherweise kann man Dateien, die mit alten Versionen der binutils
compiliert wurden, nicht mit Prelink bearbeiten. Die meisten dieser Dateien
stammen aus Programmen, die nur als fertig gelinkte Versionen geliefert werden,
die unter <path>/opt</path> installiert werden.  Durch das Erstellen folgender
Dateien weisen Sie Prelink an, nicht zu versuchen, diese Dateien zu bearbeiten.
</p>

<pre caption="/etc/env.d/60prelink">
PRELINK_PATH_MASK="/opt"
</pre>

<note>
Sie können ein oder mehrere Verzeichnisse zu der durch Doppelpunkt getrennten
Liste hinzufügen.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Prelinking</title>
<section>
<title>Verwendung von Prelink</title>
<body>

<p>
Ich verwende das folgende Kommando um alle Programmdateien in den in 
<path>/etc/prelink.conf</path> angegebenen Verzeichnissen zu bearbeiten.
</p>

<pre caption = "Angegebene Dateien mit Prelink bearbeiten">
# <i>prelink -amR</i>
</pre>

<warn>
Es ist beobachtet worden, dass wenn Sie nicht mehr viel Festplattenplatz zur
Verfügung haben und Sie das ganze System mit Prelink bearbeiten, Programmdateien
verstümmelt werden können.Das Ergebnis ist ein zerstörtes System. Verwenden Sie
<c>file</c> oder <c>readelf</c> Kommando um den Zustand der Programmdateien zu 
überprüfen. Alternativ können Sie die Menge an freiem Speicher auf Ihrer 
Festplatte mit <c>df -h</c> überprüfen.
</warn>

<table>
<tr>
  <th>Erläuterung der Optionen:</th>
</tr>
<tr>
  <th>-a</th>
  <ti>"All": bearbeitet alle Programmdateien mit Prelink</ti>
</tr>
<tr>
  <th>-m</th>
  <ti>
    Beibehalten des virtuellen Speicherbereichs. Dies ist notwendig,
    wenn Sie eine größere Menge an Bibliotheken haben, die mit Prelink
    bearbeitet werden sollen.
  </ti>
</tr>
<tr>
  <th>-R</th>
  <ti>
    Zufall -- zufällige Anordnung der Adressen, dies erhöht die Sicherheit
    gegen Pufferüberläufe.
  </ti>
</tr>
</table>

<note>
Für weitere Optionen und Details siehe <c>man prelink</c>.
</note>

</body>
</section>
<section>
<title>KDE beschleunigen nach Prelink</title>
<body>
<p>
KDEs Ladezeit kann enorm reduziert werden nach Prelink. Wenn Sie KDE 
davon informieren, dass Sie Prelink ausgeführt haben, dann wird es das Laden 
von <c>kdeinit</c> deaktivieren (da es nun nicht mehr benötigt wird), was KDE 
noch schneller macht.
</p>

<p>
Setzen Sie <c>KDE_IS_PRELINKED="true"</c> in <path>/etc/env.d/99kde-env</path> 
um KDE über Prelink zu informieren.
</p>

</body> 
</section>
</chapter>

<chapter>
<title>Bekannte Probleme und Bereinigungen</title>
<section>
<title>&quot;Prelink gegen non-PIC shared library nicht möglich&quot;</title>
<body>

<p>
Der Grund für dieses Problem sind fehlerhaft compilierte shared libraries,
die ohne die -fPIC Option für alle Objekt-Dateien erstellt wurden.
</p>

<p>
Die folgende Liste enthält Bibliotheken, die diesesProblem verursachen. 
Wiederholen Sie emerge dieser Pakete, wenn Sie den obigen Fehler erhalten.
</p>

<pre caption = "Bereinigungen:">
<comment>(Für die ORBit Bibliothek /usr/lib/libIIOP.so.0.5.17)</comment>
# <i>emerge ">=sys-apps/tcp-wrappers-7.6-r4" ORBit</i>

<comment>(Für die zlib Bibliothek usr/lib/libz.so.1.1.4)</comment>
# <i>emerge ">=sys-libs/zlib-1.1.4"</i>

<comment>(Für die svgalib, /usr/lib/libsvga.so.xx)</comment>
# <i>emerge ">=media-libs/svgalib-1.9.16"</i>

<comment>(Für die libpcap.so.0.6)</comment>
# <i>emerge ">=net-libs/libpcap-0.7.1-r2"</i>

<comment>(Für die lcms Bibliothek, /usr/lib/liblcms.so.1)</comment>
# <i>emerge ">=media-libs/lcms-1.09"</i>
</pre>

<note>
Viele Bibliotheken linken statisch auf die zlib und/oder die tcp-wrappers,
also versuchen Sie bitte zuerst diese erneut zu emergen.
</note>

<p>
Hier ist eine Liste von Bibliotheken, die nicht korrigiert wurden oder nicht
korrigierbar sind:
</p>

<ul>
  <li>
    Die Bibliotheken im Wine-Paket, inklusive WineX. Die Verwendung von
    Prelink würde MS Windows Programme sowieso nicht beschleunigen.
  </li>
  <li>
    Die Bibliothek in media-video/mjpegtools,
    <path>/usr/lib/liblavfile-1.6.so.0</path>.
  </li>
</ul>

<p>
Wenn Ihre, Probleme verursachende Bibliothek hier nicht aufgeführt wurde,
benachrichtigen Sie uns bitte, Vorzugsweise mit einem Patch, der das 
<c>-fPIC</c> zu den relevanten CFLAGS hinzufügt.
</p>

</body>
</section>
<section>
<title>&quot;&lt;file&gt;: error while loading shared libraries: unexpected
reloc type...&quot;</title>
<body>

<p>
Dies wurde in <c>sys-libs/glibc-2.3.1-r2</c> am 18.11.2002 korrigiert.
Wenn Ihre glibc älter ist, emergen Sie sie erneut.
</p>

<p>
Auch die Durchführung von <c>prelink -u -a -m</c> ; <c>prelink -a -m</c>
hat sich in vielen Fällen als hilfreich erwiesen. Wenn alles fehlschlägt,
versuchen Sie einfach <c>prelink -u &lt;file&gt;</c>.
</p>

</body>
</section>
<section>
<title>Wenn ich mein System mit Prelink bearbeite, funktionieren statische 
Programmdateien nicht mehr.</title>
<body>

<p>
Soweit es die glibc angeht, gibt es kein 100% statisches Programm. Wenn Sie
ein Programm statisch mit der glibc compilen, können immer noch Abhänigkeiten
zu anderen Systemdateien bestehen. Unten finden Sie eine Erläuterung von Dick
Howell,
</p>

<p>
&quot;Ich vermute die dahinter stehende Idee ist, daß Alles in der
heruntergeladenen Datei enthalten ist und somit keine Abhängigkeiten von den
lokalen Bibliotheken des Zielsystems vorhanden sein sollen. Unglücklicherweise
ist dies bei Linux, und ich vermute bei jedem anderen System, welches die 
GLIBC verwendet, nicht korrekt. Da ist die "libnss" (name service switch, manche
Leute nennen sie network security system), welche Funktionen zum Zugriff auf
diverse Datenbanken mit Authentifikations- und Netzwerk-Informationen, sowie
anderen Informationen. Sie ist dafür gedacht, Anwendungen unabhängig vom
getrennt davon konfigurierten Netzwerk zu machen. Eine gute Idee, jedoch können
Änderungen an der GLIBC zu Problemen beim Laden dieser Bibliothek führen. 
Zudem kann man die "libnss" nicht statisch linken, da sie für jede Maschine 
individuell konfiguriert wird. Das Problem rührt meiner Meinung nach 
hauptsächlich daher, daß andere GLIBC Bibliotheken, insbesondere "libpthread",
"libm" and libc", statisch gelinkt werden, was zu inkompatiblen Aufrufen von 
Funktionen der "libnss" führt.&quot;
</p>

</body>
</section>
<section>
<title>Prelink bricht mit &quot;prelink: dso.c:306: fdopen_dso: Assertion
`j == k' failed.&quot; ab</title>
<body>

<p>
Dies ist ein bekanntes Problem, freundlicherweise  <uri
link="http://bugs.gentoo.org/show_bug.cgi?id=13878">hier</uri> diagnostiziert.
Prelink kann nicht mit UPX-komprimierten Programmdateien umgehen. 
Seit prelink-20021213 ist ein Fix erhältlich, der die ausführbaren
Dateien versteckt, während Prelink läuft. Siehe hierzu in die 
<uri link="#doc_chap2_sect2">Kapitel Konfiguration</uri> bezüglich eines
einfachen Wegs, dies zu tun.
</p>

</body>
</section>
<section>
<title>Ich verwende grsecurity und es hat den Anschein, daß Prelink nicht
funktioniert.</title>
<body>

<p>
Um auf einem System mit grsecurity Prelink benutzen zu können, welches
eine zufällige mmap() Basis verwendet, muss man die "randomized mmap() base"
für <path>/lib/ld-2.3.*.so</path> ausschalten. Dies kann man mit dem 
<c>chpax</c> Tool bewerkstelligen .Es muß jedoch verwendet werden, wenn
die Dateien nicht in Benutzung sind (z.B. von einer Rettungs-CD aus).
</p>

</body>
</section>    
</chapter>

<chapter>
<title>Zusammenfassung</title>
<section>
<body>

<p>
Die Verwendung von Prelink kann die Startzeiten von großen Anwendungen drastisch
verkürzen. Die Unterstützung dafür ist in Portage enthalten. Es ist also sicher,
da man die Änderungen jederzeit rückgängig machen kann, wenn Probleme auftreten.
Sie müssen lediglich darauf achten, daß Sie die Programmdateien neu mit Prelink
bearbeiten müssen, wenn Sie die glibc oder andere Bibliotheken mit denen Sie 
Prelink verwendet haben, updaten.  Dazu müssen Sie <path>prelink</path> erneut
starten !
Kurz: Viel Glück !
</p>

</body>
</section>
</chapter>
</guide>
