<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/de/mysql-upgrading.xml,v 1.5 2007/05/17 23:29:35 keytoaster Exp $ -->
<!-- English CVS Version: 1.19 -->

<guide link="/doc/de/mysql-upgrading.xml" lang="de">
<title>Upgrade Leitfaden zu MySQL 4.* oder 5.0.*</title>

<author title="Autor">
  <mail link="citizen428@gentoo.org">Michael Kohl</mail>
</author>
<author title="Autor">
  <mail link="vivo@gentoo.org">Francesco Riosa</mail>
</author>
<author title="Übersetzer">
  <mail link="Thesan@thaor.net">Stefan Becker</mail>
</author>
<author title="Übersetzer">
  <mail link="tjosten@gmail.com">Timo Josten</mail>
</author>

<abstract>
Das MySQL-Team ist stolz ankündigen zu können, dass MySQL 5.0 bald im Gentoo
stable-Zweig verfügbar sein wird. Dieses Dokument erklärt, wie man auf MySQL 4.*
und 5.0.* aktualisiert.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.16</version>
<date>2007-01-06</date>

<chapter>
<title>Direktes Upgrade, empfohlen für den Wechsel von 4.1 =&gt; auf 5.0</title>
<section>
<body>

<p>
Die "Myisam storage engine" in Version 4.1 war bereits ausgereift genug, um ein
direktes Upgrade auf die nächste Major-Version von MySQL zu erlauben.
</p>

<note>
Das gilt nicht für MERGE-Tables. Sie werden wahrscheinlich in Probleme geraten,
wenn Sie ein direktes Upgrade für diesen selten genutzen Tabellen-Typen
versuchen. Sie sollten diese Tabellen sichern und neu erstellen und ihren Inhalt
im Upgradeprozess wiederherstellen. Wenn Sie unsicher sind, sollten sie mit
<uri link="#doc_chap2">Von einer alten MySQL-Version upgraden</uri> beginnen.
</note>

<p>
Für diesen Schritt werden 2 Shells benötigt, da eine während des
Upgrade-Prozesses gesperrt wird.
</p>

<pre caption="Direktes Upgrade von 4.1 auf 5.0.*">
# <i>quickpkg dev-db/mysql</i>
# <i>alias MYSQL="mysql --user=root --password=</i><comment>'Ihr_Passwort'</comment><i>"</i>
# <i>DATADIR=$(MYSQL --batch --raw --silent --skip-column-names \</i>
  <i>--execute='SHOW variables LIKE "datadir";' \</i>
  <i>| sed -e 's|datadir[ \t]||')</i>

<comment>(Der nächste Schritt sollte in der zweiten Shell ausgeführt werden.)</comment>
# <i>mysql --user=root --password=</i><comment>'Ihr_Passwort'</comment><i>"</i>
mysql&gt; <i>FLUSH TABLES WITH READ LOCK;</i>

<comment>(Kehren Sie zur ersten Shell zurück, um diesen Befehl auszuführen.)</comment>
# <i>tar -cjpvf ~/mysql.$(date +%F"T"%H-%M).tar.bz2 \</i>
  <i>/etc/conf.d/mysql /etc/mysql/my.cnf "${DATADIR}"</i>

<comment>(Die folgenden Befehle sollten wieder in der zweiten Shell ausgeführt werden.)</comment>
mysql&gt; <i>UNLOCK TABLES;</i>
mysql&gt; <i>quit</i>

<comment>(Kehren Sie für den Rest des Upgrades zur ersten Shell zurück.)</comment>
# <i>tar -tjvf ~/mysql.*.tar.bz2</i>i
# <i>emerge -av "&gt;dev-db/mysql-5.0"</i>
# <i>dispatch-conf</i>
# <i>revdep-rebuild</i>
# <i>/etc/init.d/mysql restart</i>
# <i>mysql_upgrade_shell --user=root --password=</i><comment>'Ihr_Passwort'</comment><i> \</i>
    <i>--protocol=tcp --datadir="${DATADIR}"</i>
# <i>/etc/init.d/mysql restart</i>
# <i>unset DATADIR</i>
# <i>unalias MYSQL</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Von einer alten MySQL-Version upgraden</title>
<section>
<body>

<p>
Benutzer die von einer alten Version (&lt;4.0.24) von MySQL aus upgraden, müssen
zuerst MySQL 4.0.25 installieren. Wenn Sie bereits eine aktuellere Version
einsetzen, können Sie diesen Abschnitt überspringen und mit dem
<uri link="#backup">nächsten</uri> fortfahren.
</p>

<pre caption="Einfaches Upgrade">
# <i>emerge -av --buildpkg "&lt;mysql-4.1"</i>
</pre>

</body>
</section>
</chapter>

<chapter id="backup">
<title>Ein Backup Ihrer aktuellen Daten anlegen</title>
<section>
<body>

<impo>
Werte in Primärschlüsseln werden unterschiedlich von den verschiedenen
MySQL-Versionen gehandhabt. Mehrere Informationen finden Sie unter
<uri link="http://bugs.gentoo.org/108502">Bug #108502</uri>.
Es wird strengstens empfohlen, dass Sie ihre Tabellen nach Werten von "0" (Null)
oder weniger durchsuchen und Sie auf einen Wert größer oder gleich "1" setzen.
</impo>

<p>
Eine der wichtigsten Aufgaben die jeder Datenbank-Administrator durchführen muss
ist die Sicherung von Daten. Fangen wir an:
</p>

<pre caption="Dump aller Datenbanken">
# <i>mysqldump \</i>
  <i>-uroot \</i>
  <i>--password=</i><comment>'Ihr_Passwort'</comment><i> \</i>
  <i>-hlocalhost \</i>
  <i>--all-databases \</i>
  <i>--opt \</i>
  <i>--allow-keywords \</i>
  <i>--flush-logs \</i>
  <i>--hex-blob \</i>
  <i>--master-data \</i>
  <i>--max_allowed_packet=16M \</i>
  <i>--quote-names \</i>
  <i>--result-file=BACKUP_MYSQL_4.0.SQL</i>
</pre>

<p>
Es sollte nun eine Datei mit dem Namen <path>BACKUP_MYSQL_4.0.SQL</path>
existieren, die später genutzt werden kann, um Ihre Daten wiederherzustellen.
Die Daten sind im MySQL-Dialekt der SQL (Structured Query Language) beschrieben.
</p>

<p>
Jetzt ist auch ein guter Zeitpunkt zu überprüfen, ob das Backup, das Sie gerade
erstellt haben, funktioniert.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Von einer aktuelleren MySQL-Version upgraden</title>
<section>
<body>

<p>
Wenn Sie Schritt #1 übersprungen haben, sollten Sie jetzt ein Backup-Paket (des
Servers, nicht der Daten) der installierten Version erstellen:
</p>

<pre caption="Backup des Binär-Pakets">
# <i>quickpkg dev-db/mysql</i>
</pre>

<p>
Jetzt ist es an der Zeit die aktuelle Installation mit allen seinen Daten zu
löschen:
</p>

<pre caption="Deinstallieren von MySQL">
# <i>/etc/init.d/mysql stop</i>
# <i>emerge -C mysql</i>
# <i>tar cjpvf ~/mysql.$(date +%F"T"%H-%M).tar.bz2 /etc/mysql/my.cnf /var/lib/mysql/</i>
# <i>ls -l ~/mysql.*</i>
# <i>rm -rf /var/lib/mysql/ /var/log/mysql</i>
</pre>

<note>
Nun sollte es zwei Backups geben: Das SQL-Backup, welches zwischen den
verschiedenen MySQL-Versionen portabel ist, und das andere, welches Ihnen
erlaubt, Ihre Datenbank schnell wiederherzustellen. Dies wird später noch
genauer erklärt.
</note>

<p>
Nachdem Sie Ihre alte MySQL-Installation losgeworden sind, können Sie die neue
Version installieren. Beachten Sie, dass es notwendig ist <c>revdep-rebuild</c>
zu verwenden, um Pakete erneut zu kompilieren, die gegen MySQL gelinkt sind.
</p>

<pre caption="Aktualisieren der Programmdateien">
# <i>emerge -av "&gt;mysql-4.1"</i>
<comment>(Aktualisieren Sie Ihre Konfigurationsdateien, eventuell wollen Sie dispatch-conf verwenden.</comment>
# <i>etc-update</i>
# <i>revdep-rebuild</i>
</pre>

<p>
Konfigurieren Sie nun die neu installierte MySQL-Version und starten Sie den
Daemon neu:
</p>

<pre caption="Basiskonfiguration von MySQL 4.1">
# <i>emerge --config =mysql-4.1.<comment>&lt;micro_version&gt;</comment></i>
# <i>/etc/init.d/mysql start</i>
</pre>

<p>
Abschließend können Sie die Daten aus dem Backup, das Sie in Schritt #2
erstellt haben, importieren.
</p>

<impo>
Die Standarddatei <path>/etc/mysql/my.cnf</path> setzt standardmäßig das binäre
Protokollieren (<c>log-bin</c>). Dies wird jede einzelne Transaktion, welche
Daten verändert, aufzeichnen. Wenn Sie eine sehr große Datenbank (1GB oder mehr)
betreiben, könnte dies extrem große Dateien schaffen, welche ziemlich schnell
Festplattenspeicher belegen. Wenn Ihnen wenig Speicher zur Verfügung steht,
kann es hilfreich sein, binäres Protokollieren zu deaktivieren.
</impo>

<impo>
Der Standardzeichensatz in MySQL 4.1 und höher ist <c>utf8</c>. Wenn Ihre Daten
<e>nicht</e>-ASCII-Zeichen enthalten, möchten Sie vielleicht den
Standardzeichensatz Ihrer Datenbank beibehalten und sollten deshalb alle
Vorkommen von <c>utf8</c> mit <c>latin1</c> in der Datei
<path>/etc/mysql/my.cnf</path> ersetzen. Weitere Informationen zu diesem Thema
finden Sie im Kapitel
<uri link="#On_charset_conversion">Charakterset-Konvertierung</uri>.
</impo>

<impo>
Die administrative <c>mysql</c> Datenbank, welche u.a. Benutzernamen und
Passwörter enthält, ist und <b>muss</b> in utf8 kodiert sein.
</impo>

<p>
Ältere mysqldump-Werkzeuge werden ihre Tabellen eventuell in der falschen
Reihenfolge exportieren, wenn "foreign keys" einbezogen werden.
Um dieses Problem zu umgehen, schreiben Sie folgende Befehle in ihr SQL:
</p>

<pre caption="Überprüfungen der foreign keys umgehen">
 SET FOREIGN_KEY_CHECKS=0
 SET FOREIGN_KEY_CHECKS=1
</pre>

<p>
Als nächstes importieren Sie das Backup.
</p>

<pre caption="Importieren des SQL-Backups">
# <i>cat BACKUP_MYSQL_4.0.SQL \</i>
     <i>| mysql \</i>
     <i>-uroot \</i>
     <i>--password=</i><comment>'Ihr_Passwort'</comment><i> \</i>
     <i>-hlocalhost \</i>
     <i>--max_allowed_packet=16M</i>

# <i>mysql_fix_privilege_tables \</i>
     <i>--defaults-file=/etc/mysql/my.cnf \</i>
     <i>--user=root \</i>
     <i>--password=</i><comment>'Ihr_Passwort'</comment><i/>
</pre>

<p>
Wenn Sie Ihren MySQL-Daemon nun neustarten und alles wie erwartet verläuft,
haben Sie eine voll funktionsfähige Version 4.1.x.
</p>

<pre caption="Den MySQL-Daemon neustarten">
# <i>/etc/init.d/mysql restart</i>
</pre>

<p>
Wenn Sie irgendwelche Probleme während des Upgrade-Vorgangs hatten, schreiben
Sie bitte einen Bugreport in unserem
<uri link="https://bugs.gentoo.org">Bugzilla</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Ihre alte MySQL 4.0 Installation wiederherstellen</title>
<section>
<body>

<p>
Wenn Sie mit MySQL 4.1 nicht glücklich sind, ist es möglich Ihre MySQL 4.0
Installation wiederherzustellen.
</p>

<pre caption="Zu einer älteren Version zurückkehren">
# <i>/etc/init.d/mysql stop</i>
# <i>emerge -C mysql</i>
# <i>rm -rf /var/lib/mysql/ /var/log/mysql</i>
# <i>emerge --usepkgonly "&lt;mysql-4.1"</i>
<comment>(Ersetzen Sie &lt;timestamp&gt; mit dem, der genutzt wurde, als der Tarball erstellt wurde.)</comment>
# <i>tar -xjpvf mysql.&lt;timestamp&gt;.tar.bz2 -C /</i>
# <i>/etc/init.d/mysql start</i>
</pre>

<impo>
Wenn Pakete ungleich <c>dev-db/mysql</c> installiert wurden, müssen Sie
<c>revdep-rebuild</c> ausführen, um zu gewährleisten, dass jeder Client das
richtige mysqlclient Shared-Object benutzt.
</impo>

</body>
</section>
</chapter>

<chapter id="On_charset_conversion">
<title>Zeichensatz Konvertierung</title>
<section>
<title>Einleitung</title>
<body>

<p>
Dieses Kapitel ist nicht als ein ausgiebiger Leitfaden zum Konvertieren von
Zeichensätzen bestimmt, sondern eher als eine kurze Liste von Tipps, die der
Leser ausarbeiten kann.
</p>

<p>
Eine Datenbank zu konvertieren kann eine komplizierte Aufgabe sein, deren
Schwierigkeit sich mit zunehmenden Datenvarianten erhöht. Dinge wie Serialized
Objects und Blobs sind ein Beispiel für die Schwierigkeit, Teile beisammen zu
halten.
</p>

</body>
</section>
<section>
<title>Indexe</title>
<body>

<p>
Jedes UTF-8 Zeichen ist genauer betrachtet 3 Bytes lang. Indexe in MySQL können
bis zu 1000 Byte lang sein (767 Byte bei InnoDB-Tabellen). Beachten Sie, dass
die Grenzen in Byte gemessen werden, im Gegensatz zu der Länge einer Spalte, die
in Anzahl von Zeichen interpretiert wird.
</p>

<p>
MySQL kann außerdem Indexe auf Teile von Spalten erstellen. Dies kann eventuell
eine Hilfe darstellen. Folgend ein paar Beispiele:
</p>

<pre caption="Benutzung von Indexen">
$ <i>mysql -uroot -p'<comment>Ihr_Passwort</comment>' test</i>

mysql&gt; <i>SHOW variables LIKE "version \G</i>
******************** 1. row ********************
Variable_name: version
   Value: <comment>5.0.24-log</comment>
1 row in set (0.00 sec)

mysql> <i>CREATE TABLE t1 (</i>
  ->   <i>c1 varchar(255) NOT NULL default '',</i>
  ->   <i>c2 varchar(255) NOT NULL default ''</i>
  ->   <i>) ENGINE=MyISAM DEFAULT CHARSET=utf8;</i>
Query OK, 0 rows affected (0.01 sec)

mysql> <i>ALTER TABLE t1</i>
  ->   <i>ADD INDEX idx1 ( c1 , c2 );</i>
<comment>ERROR 1071 (42000): Specified key was too long; max key length is 1000 bytes</comment>

mysql> <i>ALTER TABLE t1</i>
  ->   <i>ADD INDEX idx1 ( c1(165) , c2(165) );</i>
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> <i>CREATE TABLE t2 (</i>
  ->   <i>c1 varchar(255) NOT NULL default '',</i>
  ->   <i>c2 varchar(255) NOT NULL default ''</i>
  ->   <i>) ENGINE=MyISAM DEFAULT CHARSET=sjis;</i>
Query OK, 0 rows affected (0.00 sec)

mysql> <i>ALTER TABLE t2</i>
  ->   <i>ADD INDEX idx1 ( c1(250) , c2(250) );</i>
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> <i>CREATE TABLE t3 (</i>
  ->   <i>c1 varchar(255) NOT NULL default '',</i>
  ->   <i>c2 varchar(255) NOT NULL default ''</i>
  ->   <i>) ENGINE=MyISAM DEFAULT CHARSET=latin1;</i>
Query OK, 0 rows affected (0.00 sec)

mysql> <i>ALTER TABLE t3</i>
  ->   <i>ADD INDEX idx1 ( c1 , c2 );</i>
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0
</pre>

</body>
</section>

<section>
<title>Umgebung</title>
<body>

<p>
Das System muss so konfiguriert werden, dass es die UTF-8 Locale unterstützt.
Weitere Informationen hierzu finden Sie in unseren Dokumenten <uri
link="/doc/de/utf-8.xml">UTF-8 unter Gentoo</uri> und <uri
link="/doc/de/guide-localization.xml">Anleitung zur Lokalisierung</uri>.
</p>

<p>
In diesem Beispiel verändern und setzen wir einige Umgebungsvariablen in
<path>/etc/env.d/02locale</path>, um die englische UTF-8 Locale zu benutzen.
</p>

<pre caption="/etc/env.d/02locale">
LC_ALL=en_US.UTF-8
LANG=en_US.UTF-8
</pre>

<p>
Stellen Sie sicher, dass Sie <c>env-update &amp;&amp; source /etc/profile</c>
nach dem obrigen Schritt ausführen!
</p>

</body>
</section>
<section>
<title>iconv</title>
<body>

<p>
<c>iconv</c>, enthalten in <c>sys-libs/glibc</c>, wird benutzt um Textdateien
von einem Zeichensatz in ein anderes zu konvertieren. Das Paket
<c>app-text/recode</c> kann dazu ebenfalls benutzt werden.
</p>

<pre caption="Using iconv">
<comment>(Von latin1 auf utf8)</comment>
$ <i>iconv -f ISO-8859-15 -t UTF-8 file1.sql &gt; file2.sql</i>

<comment>(Von Japanisch auf utf8)</comment>
$ <i>iconv -f ISO2022JP -t UTF-8 file1.sql &gt; file2.sql</i>
</pre>

<p>
<c>iconv</c> kann auch benutzt werden, um ein SQL-Dump neu zu schreiben, sogar
wenn die Umgebung nicht auf utf8 eingestellt ist.
</p>

</body>
</section>

<section>
<title>SQL Methode</title>
<body>

<p>
Es ist möglich, die MySQL-Funktionen <c>CONVERT()</c> und <c>CAST()</c> zu
benutzen, um Daten innerhalb ihrer SQL-Skripte zu konvertieren.
</p>

</body>
</section>
<section>
<title>Apache (Webserver)</title>
<body>

<p>
Wenn Sie utf-8 mit Apache benutzen möchten, müssen Sie die folgenden Variablen
in Ihrer <path>httpd.conf</path> anpassen: AddDefaultCharset, CharsetDefault,
CharsetSourceEnc. Wenn Ihre HTML-Quelldateien nicht in utf8 kodiert sind,
<b>müssen</b> Sie mit <c>iconv</c> oder <c>recode</c> konvertiert werden.
</p>

</body>
</section>
</chapter>

</guide>
