<?xml version='1.0' encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>

<guide link="/doc/ja/gentoo-release-policy.xml">

<author title = "Author">
<mail link = "drobbins@gentoo.org">Daniel Robbins</mail></author>
<author title = "Editor">
<mail link = "zhen@gentoo.org">John P. Davis</mail></author>
<author title = "翻訳">
<mail link = "konno.katsuyuki@nifty.com">今野勝之</mail></author>

<version>1.1.1</version>
<date>03 Jun 2003</date>
<!-- Original revision: 1.5 -->

<abstract>Gentoo Linux公式リリースポリシー</abstract>

	<chapter>
		<title>最初の関心事、疑問</title>
		<section>
			<title>Gentoo Linuxのリリースプロセスとは何ですか？</title>
			<body>
			<p>Gentoo Linuxのリリースプロセスとは、新しいrelease candidate、または Gentoo Linuxの新しい公式リリースを作るために開発チームが使用する、明確に定義され、文書化された手順です。実際には、開発チームのメンバが関わるような、チームベースの共同作業が重要とされます。
			</p>
			</body>
		</section>

		<section>
			<title>誰がGentoo Linuxのリリースプロセスの「責任者」ですか？</title>
			<body>
			<p>リリースプロセスはリリースコーディネータ（avenj）が調整し、開発マネージャ（seemant）、チーフアーキテクト（drobbins）によって監修されているのですが、
リリースプロセス自身はチームの取り組みとなります。
      作業のすべて、大部分にでさえ責任を持つ人はいません。リリースコーディネータの責任は、ステージのtarball、GRPパッケージのビルドといった管理や品質評価テストの実施に合わせたリリースプロセスにおいて、現行のリリースの進行状況に遅れが出ないよう全体を管理するために、-core メーリングリストに定期的なアップデートを流すといったようなことを行うことでチーム全体が関わるようにすることです。
			</p>
			</body>
		</section>

		<section>
			<title>Gentoo Linuxのリリースプロセスの目標</title>
			<body>
			<ul>
			<li>release candidate、Gentoo Linuxのフルバージョンの予定どおりのリリース</li>

			<li>新しいリリースの厳密な品質評価テスト</li>

			<li>安定した変更点をリリースに取り入れる機会</li>

			<li>リリースプロセスを*チーム*プロセスとすること</li>

			<li>Gentoo Linuxの新しい公式バージョンが公開できる準備ができていることを保証する</li>
			</ul>
			</body>
		</section>
	</chapter>
	
	<chapter>
		<title>Gentoo Linuxのリリースプロセスはどのように取り組むのですか？</title>
		<section>
			<title>最初の決定</title>
			<body>
			<p>リリースプロセスは、新しいGentoo Linuxリリースの公式決定で始まります。この決定はチーフアーキテクト、開発マネージャ、リリースコーディネータによって行われ、彼らはその後以下の事柄を提示します。
			</p>
		        
			<ul>
			<li>全てのマイルストーン、デッドラインを含めた明確なリリースプロセス用のスケジュール</li> 

			<li>このリリースの明確な目標リスト（任意）</li>
			</ul>
		
			<p>
			リリースマネージャはその後リリースプロセスの案内をし、必要なリリース基盤が整っているか、結合して機能しているかの確認をします。その後リリースマネージャは、全ての開発者に対し、次フェーズの開始を知らせます。次フェーズはすぐに始まります。			</p>
			</body>
		</section>

		<section>
			<title>パッケージアップグレードフェーズ</title>
			<body>
			<p>すぐにその後14日間、Gentoo Linux開発チームは、新しい「安定した」パッケージが本当に安定しているのか、また置き換えるパッケージよりも改善しているのかを確認するといったステップを踏みながら、「安定していない」（「~」でマスクされている）状態から「安定した」（何もマスクされていない）状態へ移行するよう促されます。もしこのリリースが、以前のrelease candidateをベースとするなら、このフェーズは8日間に短くできます。
			</p>

			<p>開発者は全ての未解決のバグを綿密にチェックし、それらのバグを適切な関係者に割り当てるか、または自分たちで解決します。このフェーズの間中、可能な限り多くのバグフィックスを安定したリリースに取り込めるよう努力します。
			</p>

			<p>このステージの目標は、最終的な公式リリースでユーザが恩恵を受けることができるように、パッケージを改良、または修正することです。このリリースの「パッケージアップグレード」フェーズは、2週間という期間で（「Jan 8 2003, 23:59 MST」のように明確に日にちが定義されています）終了します。この日にちで「パッケージアップグレード」フェーズが終了し（ポリシーの問題から全ての新規パッケージは、一度「~」にマスクされ、バグフィックスのみが安定したebuildに入れられることを許されます）、Portage treeはGENTOO_x.y_SNAP_YYYYMMDDAB（AB は整数で、一日に複数のスナップショットを可能とするため00から始まる）と名前をつけられたCVSになり、次のフェーズが始まります。
			</p>
			</body>
		</section>

		<section>
			<title>ビルドとテスト</title>
			<body>
			<p>「パッケージアップグレード」フェーズの真ん中、通常リリースであれば7日目、迅速に対応するためのrelease candidateをベースとしたものであれば4日目に、ビルドとテストフェーズが始まります。このフェーズでは、アーキテクチャごとに割り当てられたビルダが、現行のPortageのスナップショットを用いて「汎用CPU」のステージのtarballをビルドし、ビルドに関係したバグを修正するため、バグのレポート／修正／創出をします。加えて、最初の品質を確認するテスタは、これらのステージを使い、実行中に見つかったバグをレポートします。
			</p>

			<p>そのステージのtarballで新しいバグが見つかり修正されると、そのステージのtarballのリリースは、ビルドコーディネータ（jhhudo）によって集められます。ビルドコーディネータ、リリースコーディネータらによってスカウトされたユーザ、開発者、または品質評価の調整にアサインされた開発者がテストを開始できるように、これらのステージのtarballはみんながアクセス可能なWebサイトに掲載されます。
			</p>

			<p>ステージ２（「パッケージアップグレード」フェーズ）が終了すると、この「ビルドとテスト」フェーズは、*現行*のCVSの使用からCVS treeの公式スナップショットGENTOO_x.y_SNAP_YYYYMMDDABの使用に切り換わります。未解決のビルド／ランタイムの問題を解決するように力を注ぎます。バグフィックスされると新しいGENTOO_x.y_SNAP_YYYYMMDDAB (新しい日付で)が作成され、バグフィックスされたステージのtarballを作成するために、これらの新しいスナップショットが使用されます。
			</p>

			<p>「ビルドとテスト」フェーズの開始後10日間に、次のリリースが公式リリースになるのか、それともrelease candidateになるのかについて決断されます。それぞれのアーキテクチャの開発リーダ、リリースコーディネータ、開発マネージャ、およびチーフアーキテクト全員、この問題について満場一致での決定となります。
			</p>

			<p>もしクオリティが満足いくものでない場合、次のリリースはrelease candidateとなります。もしクオリティがよかったら、リリースの目標が達成され、際立った問題は解決済み、または適当な期間内に解決可能なものであり、その後次期リリースは公式リリースとなります。	</p>

			<p>あるアーキテクチャでは「公式」リリース、別のアーキテクチャではrelease candidateということもあります。完成させるのにもっと時間が必要なとき、こうすることによって、new／experimentalという２つのアーキテクチャがリリースプロセス全体を停滞させることを防ぎます。また、リリースの目標は、あるアーキテクチャでは緩和されることもあります。			</p>

			<p>最新のスナップショットGENTOO_x.y_SNAP_YYYYMMDDABは、このリリースで使われます。このスナップショットから作成された一般的なステージのtarballを使って、次のフェーズが始まります。
			</p>
			</body>
		</section>

		<section>
			<title>リリースビルドとテスト</title>
			<body>

			<p>すぐに、GRPパッケージセットを含めた完全な新しいGentoo Linuxリリース、またはrelease candidateをビルドするために、大規模な分散共同作業での取り組みが始まります。release candidateの場合、（たとえばi686やもしかすると1つ以上のx86と言った）システムの小さなサブセットが、状況によっては「フル」ビルドの代わりに選ばれるかもしれません。このビルドプロセスの間、タイムリミット寸前のどんな言い逃れも取り除かれます。インストールドキュメントは、新規リリース用に修正されます。リリースアナウンスが書かれますが、まだ公開はされません。また、最終リリースバイナリの非公開の品質評価テストが、コンパイル終了と同時に始まります。これはリリース前の最終的な品質検査です。
			</p>

			<p>liveCD作成やibiblioへのアップロードを含むこのフェーズ全体が、4日間かからずに終了します。</p>
			</body>
		</section>

		<section>
			<title>リリース</title>
			<body>
			
			<p>Gentoo Linuxのrelease candidate、または新しいバージョンがリリースされます。</p>

			<p>この計画に基づいて、私たちは「公式」リリースのための以下のスケジュールを使います。2003年1月初めにリリースの仮の日にちを使っています。
			</p>

			<table>
			<tr>
				<th>日にち</th>
				<th>作業説明</th>
			</tr>
			<tr>
				<ti>Jan 1</ti>
				<ti>ステージ1 -- リリースの意向</ti>
			</tr>
			<tr>	
				
				<ti>Jan 1</ti>
				<ti>ステージ2 -- 「パッケージアップデート」フェーズの開始</ti>
			</tr>
			<tr>
				<ti>Jan 4</ti>
				<ti>ステージ3 -- 「ビルドとテスト」フェーズの開始</ti>
			</tr>
			<tr>
				<ti>Jan 8</ti>
				<ti>ステージ2 -- 「パッケージアップデート」フェーズの終了</ti>
			</tr>
			<tr>
				<ti>Jan 10</ti>
				<ti>ステージ3 -- ステージ3（「ビルドとテスト」）の評価</ti>
			</tr>
			<tr>
				<ti>Jan 10</ti>
				<ti>ステージ4 -- ステージ4（「リリースビルドとテスト」）の開始</ti>
			</tr>
			<tr>
				<ti>Jan 14</ti>
				<ti>ステージ4        -- ステージ4の終了</ti>
			</tr>
			<tr>
				<ti>Jan 14</ti>
				<ti>ステージ5        -- リリース！ ：） </ti>
			</tr>
			</table>
			</body>
		</section>
	</chapter>
</guide>
