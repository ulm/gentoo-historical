<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/migration-to-2.6.xml,v 1.2 2004/12/13 18:20:28 nakano Exp $ -->

<guide link="/doc/ja/migration-to-2.6.xml">

<title>Gentoo Linux 2.6完全移行ガイド</title>

<author title="Author">
	<mail link="dsd@gentoo.org">Daniel Drake</mail>
</author>
<author title="Contributor">
	<mail link="sergey_zlodey@mail.ru">Sergey Galkin</mail>
</author>
<author title="Contributor">
	<mail link="svyatogor@gentoo.org">Sergey Kuleshov</mail>
</author>
<author title="Editor">
	<mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Editor">
	<mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>
<author title="翻訳">
  <mail link="solidsneak@hyper.cx">小林弘樹</mail>
</author>


<abstract>
このドキュメントはLinux 2.4からLinux 2.6、devfsからudev、OSSからALSAへの移行をお手伝いします。
</abstract>

<version>0.1.4</version>
<date>2004-11-28</date>

<!-- Original revision: 1.6 -->

<chapter>
<title>はじめに</title>

<section>
<title>このドキュメントの状態</title>
<body>

<p>
この文書で述べられた移行処理はマイナーチェンジではありません。
この文書は初期段階の中にあり、いくつかの詳細が漏れているかもしれませんが、主要な部分はカバーしていると思います。
もし移行を試したなら、私たちがこのガイドを改良できるようにあなたが遭遇したどんな問題も<uri link="http://bugs.gentoo.org">報告</uri>してください。
</p>

<p>
私たちは2005.0が(いくらかのアーキテクチャで)リリースされるときに、Linux 2.6をデフォルトにするつもりです。
そしてリリースと同時に、多くのGentooがまだ2.4で稼働しているままなので私たちはこれらのアーキテクチャのユーザー全員にLinux 2.6へのアップグレードを推奨することになるでしょう。
その時が来た(2005.0リリース)時に、集団移行に関してドキュメントが信頼できる状態となるように、このドキュメントへのあなたのフィードバックは高く評価されます。
</p>

</body>
</section>

<section>
<title>Linux 2.6で何が新しくなるの？</title>
<body>

<p>
これは答えにくい質問です。
Linux 2.6は２年以上の急速な開発と新機能安定化の成果であり、その構造は2.4とはかなり異なっています。
主要な変更点のいくつかを以下に挙げます。
</p>

<ul>
  <li>
    スケジューラ/即応性の改良: デスクトップシステムにおいて高負荷時にLinuxは2.4よりもずっとスムーズに感じます
</li>
  <li>
    スケーラビリティ: Linuxはこれで両端(小さな埋め込みデバイスから多くのプロセッサ上で動くシステムまで)をよりカバーします
  </li>
  <li>パフォーマンス: 一般的なアプリケーションからのスループットがより改良されました</li>
  <li>
    ハードウェアサポート: Linuxは他のOSよりも多くの独創的なアーキテクチャやコンピュータ以外のハードウェアデバイスをサポートします
</li>
</ul>

<p>
Joseph Pranevichは、あなたがざっと見てみたくなる、とても詳細な<uri link="http://www.kniggit.net/wwol26.html">The Wonderful World Of Linux 2.6</uri>(訳注：すばらしいLinux 2.6の世界)を書きました。
もしもっと技術的詳細に興味があるのなら、<uri
link="http://www.linux.org.uk/~davej/docs/post-halloween-2.6.txt">The post-halloween document</uri>を参照することができます。
ですがこれはやや時代遅れであるということを心にとめておいてください。
</p>

</body>
</section>
<section>
<title>udevって何？</title>
<body>

<p>
従来、Gentooはユーザーに/devディレクトリを管理するために<e>devfs</e>を使うよう指示していました。
それは(カーネルを通して)システムアプリケーションがハードウェアと通信できるために一連のデバイスインタフェースを含んでいます。
</p>

<p>
<e>devfs</e>は良い概念ですが、いくらかの内在的な問題があり、そのためLinux 2.6では開発が終息しました。
</p>

<p>
<e>udev</e>はデバイスノードを管理する新しい方法です。
それは以前のデバイスマネージャーの問題に対処し、そしてその他の問題も解決しようと試みています。
</p>

<p>
上記は、あなたにとって十分な情報ではないかもしれませんが、心配する必要はありません。精力的に開発を進めているGentoo開発者達はdevfsからの移行をとても簡単にすることに力を注いでいます。
</p>

</body>
</section>
<section>
<title>ALSAとは何ですか？</title>
<body>

<p>
Linux 2.4では、サウンドカードを動作させるためにおそらくOSS(open sound system)ドライバーを使っていたことでしょう。
OSSは新しい、そしてより良いサウンドドライバーに置き換えられました。それがALSAです。
</p>

<p>
ALSA(Advanced Linux Sound Architecture)は、Linux 2.6カーネルが提供する新しい改良されたAPIを使う新しいサウンドドライバーです。
適切なカーネル設定を行うことでOSSアプリケーションとの下位互換性を実現します。
</p>

<note>
もしサウンド/オーディオハードウェアを持っていないなら、このドキュメントのALSA関連の説明は飛ばしてしまって差し支えありません。
</note>

</body>
</section>
</chapter>

<chapter>
<title>準備</title>
<section>
<title>システムをアップデートする</title>
<body>

<p>
Linux 2.6に取り込まれたいくらかの変更にはベースシステムアプリケーションの更新が要求されます。
続行する前に、最新にアップデート可能なworldとシステムパッケージを全て更新するべきです。
</p>

<p>
特に、以下のパッケージは最新のstableバージョンを使うようにしてください。
</p>

<ul>
  <li><c>sys-apps/baselayout</c></li>
  <li><c>sys-apps/util-linux</c></li>
  <li>
    <c>sys-kernel/genkernel</c> (手動設定ではなくgenkernelを使いたい時のみ)
</li>
</ul>

<pre caption="全てのworldパッケージを更新">
# <i>emerge sync</i>
# <i>emerge -ua world</i>
</pre>

</body>
</section>
<section>
<title>modutils vs module-init-tools</title>
<body>

<p>
<c>sys-apps/modutils</c>は、Linux 2.4に<c>modprobe</c>、<c>rmmod</c>、そして<c>insmod</c>の様なツールを提供するパッケージです。
</p>

<p>
Linux 2.6は新しいモジュールフォーマットを取り入れたため、モジュールを扱う新しいツールが必要になります。
これらは<c>sys-apps/module-init-tools</c>パッケージに束ねられています。
</p>

<p>
今modutilsを削除し、module-init-toolsをインストールしましょう。
</p>

<pre caption="modutilsからmodule-init-toolsへ切り替え">
# <i>emerge unmerge sys-apps/modutils</i>
# <i>emerge module-init-tools</i>
</pre>

<note>
ご心配なく - modutilsをunmergeしても、module-init-toolsがLinux 2.4向けに下位互換を提供するので、以前と同様にLinux 2.4を起動してカーネルのモジュールを扱うことができいます。
</note>

<note>
上記の利用で、あなたのLinux 2.4カーネルでmodule-init-toolsが既にインストールされ実行しているかもしれません。
この場合、この段階について心配する必要はありません。
あなたのシステムは既にLinux 2.6モジュールを扱う準備ができているのです。
</note>

</body>
</section>
<section>
<title>udevのインストール</title>
<body>

<p>
ここで必要とされる設定は何もありません。単に<c>emerge</c>を使ってudevをインストールします。
</p>

<pre caption="udevのインストール">
# <i>emerge -a udev</i>
</pre>

</body>
</section>
<section>
<title>必要なデバイスノードの確認</title>
<body>

<p>
システムが起動する時、システムはいくつかの必要なデバイスノードを要求します。
udevはカーネルに組み込まれていないため、すぐには有効になりません。
これに対処するためには、ディスクに必要なデバイスノードを確実に持っていなければなりません。
</p>

<p>
インストールstageファイルは最初のインストール中に必要なデバイスを作成します。
しかし、これは事実と違うと報告するユーザもいます。
この機会にデバイスファイルが存在するかチェックをし、もしなければ作成しましょう。
</p>

<p>
現在のデバイスマネージャが/devにマウントされているので、直接アクセスすることができません。
そのためrootパーティションを別の位置にbindマウントし、そこから/devディレクトリにアクセスしましょう。
</p>

<pre caption="rootパーティションをbindマウントし、静的デバイスを表示">
# <i>mkdir -p /mnt/temp</i>
# <i>mount -o bind / /mnt/temp</i>
# <i>cd /mnt/temp/dev</i>
# <i>ls -l console null</i>
</pre>

<p>
上記の<e>ls</e>コマンドが<c>console</c>か<c>null</c>のどちらかが存在しないと返したなら、以下のようにして自分で作成しなければなりません。
</p>

<pre caption="存在しないconsoleとnullノードを作成">
# <i>mknod -m 660 console c 5 1</i>
# <i>mknod -m 660 null c 1 3</i>
</pre>

<p>
これらのデバイスを作成しなくても、マウントしたrootパーティションをマウント解除しましょう。
</p>

<pre caption="まとめてマウントしたrootをマウント解除">
# <i>umount /mnt/temp</i>
# <i>rmdir /mnt/temp</i>
</pre>

</body>
</section>
<section>
<title>ALSAユーティリティのインストール</title>
<body>

<p>
ALSAはいくらかのパッケージがインストールされていることが必要なため、アプリケーションはALSA APIを利用することができます。
これらのパッケージはmixerとボリュームレベルを制御できるようにします。
以下のようにして必要なユーティリティをインストールしましょう。
</p>

<pre caption="ALSAユーティリティとライブラリのインストール">
# <i>emerge -a alsa-lib alsa-utils alsa-tools alsa-headers alsa-oss</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Linux 2.6ソースのインストール</title>

<section>
<title>カーネルの選択とインストール</title>
<body>

<p>
まず最初にするべきことはあなたの選んだ2.6カーネルのソースをインストールすることです。
Gentooがサポートする2つの2.6カーネルは現在<e>gentoo-dev-sources</e>(デスクトップ用)と<e>hardened-dev-sources</e>(サーバ用)です。
その他の物も利用可能です。
より多くの選択のために<uri link="/doc/en/gentoo-kernel.xml">Gentoo Linux Kernel Guide</uri><uri link="/doc/ja/gentoo-kernel.xml">(日本語訳)</uri>を見てください。
</p>

<p>
このガイドでは、例として<c>gentoo-dev-sources</c>を利用します。
<c>emerge</c>ユーティリティを使ってあなたが選んだカーネルのソースをインストールします。
</p>

<pre caption="gentoo-dev-sourcesのインストール">
# <i>emerge -a gentoo-dev-sources</i>
These are the packages that I would merge, in order:
Calculating dependencies ...done!
[ebuild  N    ] sys-kernel/gentoo-dev-sources-2.6.9-r2

Do you want me to merge these packages? [Yes/No] <i>y</i>
</pre>

</body>
</section>
<section>
<title>/usr/src/linuxシンボリックリンクの更新</title>
<body>

<p>
Gentooユーティリティの様々なコンポーネントが実行中(または、コンパイルをしようと考えている)のカーネルソースへのシンボリックリンクである/usr/src/linuxに依存しています。
</p>

<p>
では先ほどインストールしたカーネルを示すように/usr/src/linuxを更新しましょう。
例に続いてください。
</p>

<pre caption="/usr/src/linuxへのソフトリンクの更新">
# <i>cd /usr/src</i>
# <i>ln -sfn linux-2.6.9-gentoo-r2 linux</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Linux 2.6移行の既知の落とし穴</title>
<section>
<body>

<p>
カーネルの設定で行き詰まる前に、新しいカーネルを設定する方法に影響を及ぼすかもしれない、Linux 2.6に移行する際陥りやすい最も一般的な間違いを詳しく説明しましょう。
</p>

<note>
これらの全てがこの段階に関連があるわけではありませんが、それら全てを一度に説明することで、後で、あなたが暇な時に見直すことができます。
</note>

</body>
</section>
<section>
<title>2.4の.configで"make oldconfig"を使ってはいけません</title>
<body>

<note>
これが何を意味するか理解できなくても、心配しないでください。
このガイドに正しく従えばこの間違いは起こさないでしょう。
</note>

<p>
多くの変更があるので、あなたは本当にたくさんの質問を聞かれることでしょう。
2.4のconfigで<c>make oldconfig</c>を試した多くの人は起動しないカーネル(例えばスクリーンに何も映らない、キーボードからの入力を受け付けないなど)を作成することでしょう。
問題からあなた自身を守るために、この一度だけは伝統的な<c>menuconfig</c>設定方法を使ってください。
</p>

</body>
</section>
<section>
<title>CD/DVDの書き込みにide-scsiを使ってはいけません</title>
<body>

<p>
Linux 2.4では、良いCD/DVDの書き込み結果を得る唯一の方法は、(かなり醜悪な実装である)<c>ide-scsi</c>エミュレーションを有効にすることでした。
ありがたいことに、Linux 2.6のIDEレイヤーはCD/DVDの書き込みをより良くサポートするために拡張されました。
</p>

<p>
CDの書き込みのためによけいなオプションを有効にする必要はありません。
以前のように<c>ide-scsi</c>を有効に<e>しない</e>ようにしてください。
</p>

</body>
</section>
<section>
<title>PCスピーカーは今や設定可能なオプションです</title>
<body>

<p>
新しいPCスピーカーオプション(<c>CONFIG_INPUT_PCSPKR</c>)を特に設定しない限りは、普通のコンソールビープ(もしくはその他の全てのPCスピーカーからの反応)を得ることはできません。
</p>

<pre caption="PCスピーカーオプションの位置">
Device Drivers  ---&gt;
 Input device support  ---&gt;
  [*] Misc
   &lt;*&gt;   PC Speaker support
</pre>

<note>
"PCスピーカー"とは、システム起動時に一度鳴るアナログスピーカーを言っているのであり、音楽を演奏したりするために使われる普通のサウンドハードウェアのことを言っているのではありません。
</note>

</body>
</section>
<section>
<title>新しいUSBストレージブロックデバイスドライバーは時々不安定です</title>
<body>

<p>
ごく最近、新しいUSBストレージブロックデバイスドライバーがカーネルに追加されました。
これを書いている時には、このドライバー("ub")は未だ早い段階にあり、何人かのユーザーはそれが頼りにならないと指摘しています。
USBハードディスク、USBフラッシュディスク、USBカードリーダー、もしくはUSBデジタルカメラへのアクセスに問題があるなら、古いSCSIスタイルのドライバーに戻してみてください:
</p>

<pre caption="ubを無効にする">
Device Drivers  ---&gt;
 Block devices  ---&gt;
  &lt; &gt; Low Performance USB Block driver
</pre>

<note>
古いSCSIスタイルのドライバー(USB Mass Storage support)はデフォルトで有効になっています。
それは"Device Drivers --&gt; USB support"で見つけることができますが、ubが存在している時には動作しないでしょう。
</note>

</body>
</section>
<section>
<title>usbdevfsはusbfsに改名されました</title>
<body>

<p>
USBデバイスファイルシステムがマウントされるように<path>/etc/fstab</path>ファイルを編集しているなら、ファイルシステムタイプを<e>usbdevfs</e>から<e>usbfs</e>へと変更する必要があります。
</p>

<note>
最近の2.4カーネルは"usbdevfs"と同様に"usbfs"の利用も許可していますので、これを行うことによって互換性が失われることはありません。
</note>

</body>
</section>
<section>
<title>Xをreniceしてはいけません</title>
<body>

<p>
もしあなたがデスクトップ2.4ユーザーなら、より良いデスクトップパフォーマンスを提供するようにXを優先的に動作するようシステムをハックしているかもしれません。
</p>

<p>
2.6ではこの振る舞いを変更する多くのスケジューラの変更があります。
もしXを優先的に動作させ続けたいなら、(<e>ディスプレイサーバ</e>をとても高い優先度で実行するのに)何が必要かはっきりさせておきます。そしてCPUがとても長い時間Xに費やされたり、Xのためだけに費やされたりするので音がずれたりアプリケーションの起動が遅くなったりする結果になるということを注意してください。
</p>

<p>
Linux 2.6では、応答性をよくするためにデスクトップアプリケーションをrenaiceする必要はこれ以上ありません。
あなたの"niceness"ハックを削除してください！
</p>

</body>
</section>
<section>
<title>X11設定ファイルはこれから/dev/input/miceを使います</title>
<body>

<p>
デフォルトのudev設定を導入した場合の変更点の1つは、異なったマウスデバイスノードの配置です。
以前は、<path>/dev/psaux</path>や<path>/dev/mouse</path>といったノードを使っていたでしょう。
これからは<path>/dev/input/mouse0</path>、<path>/dev/input/mouse1</path>、そして全てのマウスの動作を結合させた共同の<path>/dev/input/mice</path>といったノードを使います。
</p>

<p>
古いXの設定は典型的に<path>/dev/mouse</path>か<path>/dev/psaux</path>を参照しているので、X11を起動しようとした時に以下のようなエラーが表示されるでしょう。
</p>

<pre caption="udevシステムでXを初めて起動した時に起きる一般的なエラー">
(EE) xf86OpenSerial: Cannot open device /dev/mouse
	No such file or directory.
(EE) Mouse0: cannot open input device
(EE) PreInit failed for input device "Mouse0"
No core pointer
</pre>

<p>
これを訂正するには、X11設定をテキストエディタで開き、マウスの<e>InputDevice</e>セクションで<path>/dev/input/mice</path>を使うように更新してください。
以下がその例です。
</p>

<pre caption="Opening your X11設定ファイルを開く">
# <i>nano -w /etc/X11/xorg.conf</i>
</pre>

<note>
まだXFree86を使っているなら、設定ファイルは<path>/etc/X11/XF86Config</path>です。
</note>

<pre caption="マウスのInputDeviceセクションの例">
Section "InputDevice"
	Identifier  "Mouse0"
	Driver      "mouse"
	Option      "Protocol" "auto"
	Option      "Device" "/dev/input/mice"
EndSection
</pre>

</body>
</section>
</chapter>

<chapter id="conf">
<title>カーネルの設定、ビルド、インストール</title>
<section>
<body>

<p>
Linux 2.4なら、新規カーネルビルドを行うには２つの選択肢がありました。
</p>

<ol>
  <li>
    デフォルトの方法は手動でカーネルを設定することです。
    これはひるんでしまうかもしれませんが、システムを知っている限りは好ましい選択です。
    手動でカーネルを設定したいなら、<uri link="#manual">次の章</uri>へと進んでください。
  </li>
  <li>
    もう一つの選択はカーネルを自動的に設定、コンパイル、そしてインストールまで行ってくれる<c>genkernel</c>ユーティリティを使うことです。
    <c>genkernel</c>を使いたいのなら、次の章は飛ばして<uri link="#genkernel">genkernelを使う</uri>まで進んでください。
  </li>
</ol>

</body>
</section>
</chapter>

<chapter id="manual">
<title>一般的な選択: 手動設定</title>
<section>
<title>カーネルの設定</title>
<body>

<p>
ではカーネルを設定しましょう。いつもの通りmenuconfigを開きます。
</p>

<pre caption="menuconfigを呼び出す">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
もしかすると2.4カーネルの設定からmenuconfigに精通しているかもしれません。
幸運にも、操作性はほとんど変わっていません。ですが、カーネルオプションがより体系化され、それに加え2.4にはなかった<e>たくさん</e>の新しいオプションが追加されたことに気付くでしょう。
</p>

<p>
以下の重要なカーネルオプションを有効にしてください。
</p>

<pre caption="必要なカーネルオプション">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)
    
<comment>(以下はudevで必要です)</comment>
General setup  ---&gt;
 [*] Support for hot-pluggable devices

Device Drivers  ---&gt;
 Block devices  ---&gt;
  &lt;*&gt; RAM disk support
  
<comment>(以下はALSAで必要です)</comment>
Device Drivers  ---&gt;
 Sound  ---&gt;
  &lt;*&gt; Sound card support
  Advanced Linux Sound Architecture  ---&gt;
   &lt;M&gt; Advanced Linux Sound Architecture
   &lt;M&gt; Sequencer support
   &lt;M&gt; OSS Mixer API
   [*] OSS Sequencer API
<comment>   (そしてサブメニューからあなたのサウンドカードを忘れずに選んでください)</comment>
</pre>

<warn>
以前は<path>/dev</path>ファイルシステムのサポート(今は"廃れている"とマークされています)を含めていたかもしれません。
devfsをインストールしてはいけません。私たちは、これからdevfsの代わりになるudevをインストールしていきます。
</warn>

<p>
また、あなたが利用するファイルシステムと、システムに存在するハードウェアのサポートを忘れずに有効にしてください。
高速DMAディスクアクセスに役立つマザーボードのIDEコントローラーサポートを有効にしてください。
詳細な内容は<uri link="/doc/en/handbook/index.xml">Gentoo Handbook</uri><uri link="/doc/ja/handbook/index.xml">(日本語訳)</uri>の<uri link="/doc/en/handbook/handbook-x86.xml?part=1&amp;chap=7">Configuring the Kernel</uri><uri link="/doc/ja/handbook/handbook-x86.xml?part=1&amp;chap=7">(日本語訳)</uri>セクションを参照してください。
</p>

</body>
</section>
<section>
<title>カーネルのビルド</title>
<body>

<p>
カーネルの設定を行ったので、コンパイル処理を始めることができます。
</p>

<pre caption="カーネルソースのコンパイル">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<note>
Linux 2.4ソースでの<c>make dep</c>の実行を思い出すかもしれません。
これはもはや必要とされていません。
</note>

<p>
カーネルのコンパイルが完了するまで(読みやすいコンパイル出力を眺めながら)待っていてください。
</p>

</body>
</section>
<section>
<title>カーネルのインストール</title>
<body>

<p>
次のステップでは<path>/boot</path>パーティションをマウントしてカーネルイメージを上書きします。
その後ブートローダーの設定を手動で更新しなければなりません
</p>

<pre caption="カーネルのインストール">
# <i>mount /boot</i>
# <i>cp arch/i386/boot/bzImage /boot/bzImage-2.6.9-gentoo-r2</i>
# <i>cp System.map /boot/System.map-2.6.9-gentoo-r2</i>
</pre>

<p>
上記の説明は例に過ぎず、<uri link="/doc/en/handbook/index.xml">Gentoo Handbook</uri><uri link="/doc/ja/handbook/index.xml">(日本語訳)</uri>(<uri link="/doc/en/handbook/handbook-x86.xml?part=1&amp;chap=7">Configuring the Kernel</uri><uri link="/doc/ja/handbook/handbook-x86.xml?part=1&amp;chap=7">(日本語訳)</uri>の章を見てください)の説明に従った更新手続きを行うべきです。
</p>

<p>
ブートローダーの設定を更新する時、2.4カーネルを示す古いエントリーは削除してはいけません。
これは、もし何かが動作しなかった時に、２つを簡単に切り替えられるようにするためです。
</p>

<p>
では<uri link="#modules">モジュールの設定</uri>章へ進んでください。
</p>

</body>
</section>
</chapter>

<chapter id="genkernel">
<title>もう一つの選択: genkernelを使う</title>
<section>
<body>

<p>
もしカーネルを手動設定する代わりにgenkernelを使いたいなら、嬉しい知らせがあります。
genkernelを使って2.6カーネルを作成する方法は、以前の2.4カーネルとほとんど同じです。
</p>

<p>
以下のようにしてgenkernelを呼び出します。
</p>

<pre caption="一般的な引数でgenkernelを呼び出す">
# <i>genkernel --udev --menuconfig --bootloader=grub all</i>
</pre>

<p>
上の例では、menuconfigを開いて(望むなら)カーネルの設定を調整できるようにし、コンパイル後にgrubブートローダーの設定を更新するgenkernelの機能も利用します。
</p>

<p>
あなたに合ったgenkernel引数を選ぶべきですが、<c>--udev</c>引数を含めることを忘れないでください。
追加の情報は<uri link="/doc/en/genkernel.xml">Gentoo Linux Genkernel Guide</uri><uri link="/doc/ja/genkernel.xml">(日本語訳)</uri>と<uri link="/doc/en/handbook/index.xml">Gentoo Handbook</uri><uri link="/doc/ja/handbook/index.xml">(日本語訳)</uri>の<uri link="/doc/en/handbook/handbook-x86.xml?part=1&amp;chap=7">Configuring the Kernel</uri><uri link="/doc/ja/handbook/handbook-x86.xml?part=1&amp;chap=7">(日本語訳)</uri>の章を参照してください。
</p>

</body>
</section>
</chapter>

<chapter id="modules">
<title>モジュールの設定</title>

<section>
<title>外部モジュールのインストール</title>
<body>

<p>
多くのユーザーはカーネルツリー外でビルドされたカーネルモジュールにさらに依存しています。
一般的な例ではATIもしくはNvidiaのバイナリグラフィックドライバーです。
<path>/usr/src/linux</path>にある2.6ソース向けにコンパイルしたモジュールをインストールする必要があります。
これは2.4で慣れている外部モジュールのための<c>emerge packagename</c>というよくあるケースです。
</p>

<p>
詳しい情報は<uri link="/doc/en/handbook/index.xml">Gentoo Handbook</uri><uri link="/doc/ja/handbook/index.xml">(日本語訳)</uri>の<uri link="/doc/en/handbook/handbook-x86.xml?part=1&amp;chap=7">Configuring the Kernel</uri><uri link="/doc/ja/handbook/handbook-x86.xml?part=1&amp;chap=7">(日本語訳)</uri>の章を参照してください
</p>

</body>
</section>
<section>
<title>自動的に読み込まれるモジュール</title>
<body>

<p>
いくらかのカーネルコンポーネントをモジュールとして(カーネル組み込みとは対照的に)コンパイルすると決め、2.4でしたように起動時に自動的に読み込まれて欲しいでしょう。
また、外部モジュールをportageツリーからインストールした(上で記述したように)ならそれらも自動的に読み込まれて欲しいと思うかもしれません。
</p>

<p>
2.4でやったことと同じようにすることでこれを成し遂げることができます。
単に<path>/etc/modules.autoload.d/kernel-2.6</path>をテキストエディターで開いて自動的に読み込まれて欲しいモジュールの名前を記述するだけです。
</p>

<pre caption="nanoで自動的に読み込まれるモジュールの一覧を開く">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="3c59xとnvidiaモジュールを自動的に読み込む例">
# /etc/modules.autoload.d/kernel-2.6:  kernel modules to load when system boots.
#
# Note that this file is for 2.6 kernels.
#
# Add the names of modules that you'd like to load when the system
# starts into this file, one per line.  Comments begin with # and
# are ignored.  Read man modules.autoload for additional details.

3c59x
nvidia
</pre>

</body>
</section>
<section>
<title>ALSAモジュールの設定</title>
<body>

<p>
ALSAをモジュールとしてコンパイルすることを選んだことに気付いたでしょう。
これでALSAの振る舞いを簡単に設定できます。
しかし、どのモジュールを読み込むかの設定が必要です。
<path>/etc/modules.d/alsa</path>をテキストエディターで開きます。
</p>

<pre caption="Opening /etc/modules.d/alsa in nano">
# <i>nano -w /etc/modules.d/alsa</i>
</pre>

<p>
では<e>IMPORTANT</e>と印が付けられた章を見てみましょう。
たいていの場合、snd-card-0とsnd-slot-0エイリアスのコメントを外して修正するだけです。
</p>

<pre caption="/etc/modules.d/alsaの例">
## IMPORTANT:
## You need to customise this section for your specific sound card(s)
## and then run `update-modules' command.
## Read alsa-driver's INSTALL file in /usr/share/doc for more info.
##
##  ALSA portion

#   My laptop uses the snd-maestro3 driver
alias snd-card-0 snd-maestro3

##  OSS/Free portion

# Generally all you need to do is uncomment this line:
alias sound-slot-0 snd-card-0
</pre>

<p>
使用するドライバー名についての詳しい情報は、<uri link="/doc/en/alsa-guide.xml">Gentoo Linux ALSA Guide</uri><uri link="/doc/ja/alsa-guide.xml">(日本語訳)</uri>を調べてください。
このファイルでは前に<e>snd-</e>と置くことを覚えておいてください。
</p>

<p>
最後に、<c>alsasound</c> initスクリプトが起動時に実行されるように設定してください。
</p>

<pre caption="alsasoundをデフォルト実行レベルに追加">
# <i>rc-update add alsasound boot</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Linux 2.6を起動</title>
<section>
<body>

<p>
Linux 2.6を起動させる時です。全てのアプリケーションを閉じてリブートしてください。
</p>

<pre caption="リブート">
# <i>modules-update</i>
# <i>umount /boot</i>
# <i>reboot</i>
</pre>

<p>
リブート時、もしここまでこのドキュメントに従ってきたなら、ブートローダーにLinux 2.4かLinux 2.6のどちらで起動するかの選択肢を与えられるでしょう。
Linux 2.6を選択します。
</p>

<p>
いったんシステムが起動したら、動作しているか確認してください。
カーネル設定でミスをしたのなら、ご心配なく、<uri link="#conf">カーネルの設定、ビルド、インストール</uri>の章まで戻って、変更を加え、再コンパイルし、新しいカーネルイメージをインストールして、再起動、そしてその後再度試してみてください。
</p>

</body>
</section>
<section>
<title>ALSAチャンネルのミュート解除</title>
<body>

<p>
デフォルトでは、ALSAチャンネルはミュートに設定されているので、音楽を再生しても何も聞こえてこないはずです。
これからミュートを解除する必要があります。
コンソールから<c>alsamixer</c>プログラムを実行し、矢印キーを使ってボリュームを合わせ、Mキーでミュートと解除を行います。
より完全なドキュメントとその他の方法については<uri link="/doc/en/alsa-guide.xml">Gentoo Linux ALSA Guide</uri><uri link="/doc/ja/alsa-guide.xml">(日本語訳)</uri>を読んでください。
</p>

<note>
デフォルト実行レベルに設定したalsasound initスクリプトはシャットダウン時にmixerのレベルを保存し、起動時に復元します。
起動するたびにこれらの設定を行う必要はありません
</note>

</body>
</section>
</chapter>

<chapter>
<title>ヘッダファイルとNPTL</title>
<section>
<body>

<p>
これまでに、できれば全ての問題を解決して、Linux 2.6を稼働し続けています。
ではユーザースペースアプリケーションが新しいLinux 2.6の機能を利用するように、Linuxカーネルヘッダファイルとglibcの再マージをしましょう。
</p>

<pre caption="linux26ヘッダへの更新">
# <i>emerge linux26-headers</i>
# <i>emerge unmerge linux-headers</i>
</pre>

<p>
ヘッダパッケージを更新した後は、概してglibcを再マージするべきです。
NPTLに興味があるなら新しい機能があります。
NPTLとは、より高速なスレッドの作成と破壊の機能を持った、Linux 2.6で提供される新しいスレッドモデルです。
これは多くのシステムでは大きな変化を起こしませんが、この移行過程中に有効にしたいと思ったはずです。
NPTLを有効にするには、<path>/etc/make.conf</path>を編集し、USE変数に<e>nptl</e>を追加します。
</p>

<warn>
現座のstableなglibcのebuildでは、USE="nptl"でglibcをコンパイルした後は2.4カーネルで起動することができなくなります。
注意してください！
</warn>

<p>
ではglibcを再マージしましょう(NPTLを有効にしていなくてもこれをするべきです)。
</p>

<pre caption="新しいカーネルヘッダ向けにglibcを再インストール">
# <i>emerge -a glibc</i>
</pre>

<p>
NPTLを有効にしたなら、再コンパイルされるまで、今あるバイナリは利用しない方がいいでしょう。
とにかく、この時点より前にコンパイルされたバイナリはNPTLを使う<e>でしょう</e>
今すぐ、全てのバイナリを再コンパイルしたいならば、例えば以下のようにします。
</p>

<pre caption="システムの全てのパッケージを再コンパイル">
# <i>emerge -e world</i>
</pre>

<p>
もう一つの選択肢として、ちょうどシステムを"自然に"NPTLへ切り替えさせることができます。これは、新しいバージョンのパッケージがリリースされた時点でアップデートする方法です。
</p>

</body>
</section>
</chapter>

<chapter>
<title>備考</title>
<section>
<title>問題ですか？</title>
<body>

<p>
Linux 2.6への移行における、信じられないほどたくさんの作業量で、以前にうまく動作した機能が、予想通りに機能しないことは、ときどき避けられないことです
</p>

<p>
2.6カーネルについて何か問題があり、そしてその問題がLinux 2.4では起こらないと確認したなら、<uri link="http://bugs.gentoo.org">Bugzilla</uri>でバグを公開してください。
私たちが問題を調査し、カーネルに問題を見つけたなら、あなたに本家カーネルbugzillaへレポートを提出するようお願いするかもしれません。
</p>

</body>
</section>
<section>
<title>結論</title>
<body>

<p>
幸運にも移行がスムーズに完了し、2.4よりも有用なLinux 2.6を楽しんでいることでしょう。
最初に記述したように、私たちはこのドキュメントについてのフィードバック(それがたとえ移行が完全にスムースに完了したという内容でも)を探しています。
2005.0がやってくるまでにこのドキュメントを完全にまとめるためにも、フィードバックを<mail link="dsd@gentoo.org">私にメールしてください</mail>。
ありがとうございます！
</p>

</body>
</section>
</chapter>
</guide>
