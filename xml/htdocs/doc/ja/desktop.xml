<?xml version='1.0' encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/desktop.html">
	<title>Gentoo Linux デスクトップ構築ガイド</title>
		<author title="Author"><mail link="zhen@gentoo.org">John P. Davis</mail></author>
		<author title="Author"><mail link="g2boojum@gentoo.org">Grant Goodyear</mail></author>
		<author title="翻訳"><mail ink="k0d4m4@lapis.plala.or.jp">小玉 博和</mail></author>

	<abstract>
		このガイドは、全目的デスクトップシステムとして、Gentoo Linuxの設定を行うためのものです。特にインストールとX、KDE、GNOME、OSS（サウンド）、Postfix（電子メール）、そして Samba（Unix/Windows相互運用）の環境設定をざっと一通り行います。
	</abstract>

	<version>1.4.2</version>
	<date>25 Feburary 2003</date>
  <!-- Original revision: 1.17 -->

	<chapter>
		<title>序文</title>
			<section>
				<body>
			
				<p>言うまでもありませんが、まず最初にGentoo Linuxをインストールする必要があります(<uri>http://www.gentoo.org/doc/en/build.xml</uri>)。楽しい作業が終わったら、こんどは<e>Portage</e>ツリーをダウンロードしましょう。あわせて、Portageユーザーガイド(<uri>http://www.gentoo.org/doc/en/portage-user.xml</uri>)も読んでください。でも、もしお急ぎならば以下のようにタイプしてください:
				</p>

				<pre caption = "最新ツリーの取得">
# <i>emerge sync</i>
				</pre>

				<p>重要なことは、ここで論じるために私が選択したパッケージの順番です。Gentoo Linux には簡単にインストールできる豊富なウィンドウマネージャーや MTA などがあります。私が選んだ特定のパッケージは Gentoo Linux で推奨されているわけではありません。それらは単に著者の好みで、その上設定方法を知っているというだけです。別の言い方をすれば、著者自身のデスクトップで使われているパッケージです。
				</p>

				<impo>あなたがインストールするデスクトップによっては、<path>/etc/make.conf</path> にある使わないデスクトップのサポートを無効にしたいと思うかもしれません。もしあなたが KDEを使うつもりなら <i>USE</i> セクションで <e>-gnome -gtk</e> を加え、GNOME を使いたいのなら <e>-kde -qt</e> を書き加えてください。
				</impo>

				<warn>もし、これらのパッケージのバグに遭遇したら、<uri>http://bugs.gentoo.org/</uri> にレポートしてください。<e>決して</e>パッケージのメンテナー（すなわちKDE）に直接送らないでください。もし必要ならば、Gentoo の開発者が上流に送ります。
				</warn>

			</body>
		</section>
	</chapter>

	<chapter>
	<title>XFree86 のインストール</title>
		<section>
			<title>インストール</title>
			
			<body>

			<p>X の emerge およびインストールのプロセスは、高速なシステムでもしばらくの時間がかかります。X システムはとても大きいので、本でも読むか、うたた寝でもする準備をしておいてください。
				</p>
			
				<p>X を emerge するためには、こうタイプするだけです:
				</p>

				<pre caption = "XFree86 の emerge">
# <c>emerge xfree</c>
				</pre>

			<p>この長いプロセスの終了後、設定作業がはじまります。
			</p>
			</body>
		</section>

		<section>
			<title>X の設定</title>
			<body>

			<p>私は X の設定にコンソールベースの <c>xf86config</c> を好んで使います。しかしながら生成される <path>/etc/X11/XF86Config</path> ファイルはあまり洗練されたものではありません。より完全な X の設定を行うために、<uri link="http://www-105.ibm.com/developerworks/education.nsf/linux-onlinecourse-bytitle/3100FF4795B3F31F86256AF70056FDB3?OpenDocument">このチュートリアル</uri>をご覧ください。X の設定を行う前に、お持ちのモニターの水平・垂直同期（私の viewsonic G773 は水平:30-69KHz、垂直:55-90KHz）、ビデオカードのタイプ（私の場合は32768KB のGeForce カード）と搭載RAM（キロバイトで）、マウスのタイプ（私の場合 PS/2 ポート<path>/dev/psaux</path> に接続されたインテリマウス）などを知っておく必要があります。
			</p>

			<pre caption = "xf86config を実行する">	
# <c>/usr/X11R6/bin/xf86config</c>
			</pre>


			<p>私は3ボタンマウスを所有しているため、3ボタンエミュレーションを有効にはしません。もしあなたが国際化キーボードか多言語対応が必要ならば、XKB サポートも有効にすることも忘れないでください。お好みの画面の解像度と色も考える必要があります。私は viewsonic ディスプレイで1280x1024ドット、24ビットカラーがたまたま気に入りましたが、それは単にそれ以上の高解像度でうまく行かなかったからです。もしこれらの作業が終わっていなかったら、<c>xf86config</c> を複数回実行してやっと終了することに驚かないでください。
			</p>

			<note>もしあなたのモニターのリフレッシュレートを知らなければ、お持ちのモニターのメーカーと型番をGoogle<uri>http://www.google.com/</uri>で検索してみてください。リフレッシュレートは一般的にモニター仕様の一部として記述されています。</note>

			<p>もしあなたが X の設定のベテランならば、マウス機器のシンボリックリンクを <path>/dev/mouse</path> に作っているかもしれません。そのようなシンボリックリンクは devfs で問題になっており、再起動後にどこかに消えてしまうことがありました。Gentoo Linux は今では <path>/dev</path> にあるシンボリックリンクを正しく扱えます。ただ単に <c>ln -s</c> を使って <path>/dev/mouse</path> のシンボリックリンクを作るだけで、再起動後にもそれは維持されている<e>でしょう</e>。
			</p>
			<p>もし、XFS（X フォントサーバー）を使うことを選択したのなら、下記の適切な説明に従ってください。フォントの設定が<e>非常に</e>簡単になるため、XFS を使うことを強くお勧めします。XFS に関しては、<uri link = "http://www.redhat.com/docs/manuals/linux/RHL-7.3-Manual/ref-guide/s1-x-fonts.html">レッドハット</uri> の記事を参照してください。
			</p>

			<pre caption = "設定のテスト">	
# <c>rc-update add xfs default</c>
# <c>/etc/init.d/xfs start</c>
# <c>startx</c>
			</pre>			

			<p>正確に X を設定できたなら <c>startx</c> を実行することで、驚くほど醜い X ウィンドウマネージャー（具体的には twm）が起動します。もし X が起動すれば、次に行ってもいいでしょう。X サーバーを終了させるために、<c>&lt;ctrl&gt;&lt;alt&gt;&lt;backspace&gt;</c> を押してください。
			</p>

			<p><c>xf86config</c> は、標準の設定オプションセットを作成します。NVIDIA カードや USB マウス、そしてその他の多くのオプションは手動でセットしなくてはなりません。後でこれらのオプションを探索しますが、私は <i>XF86Config</i> をご覧になることをお勧めします。それは謎めいたものではなく、いくつかの興味深い設定を微調整することが可能になります。微調整のための情報を読み始めるには <uri link = "http://www.tldp.org/HOWTO/mini/FDU/">ここ</uri>がいいでしょう。
			</p>
			
			</body>
		</section>
			
			<section>
				<title>PS/2 マウスの設定</title>
				
				<body>
				
				<p>もしあなたがホイールマウスをお持ちなら、XF86Config ファイルを手動で編集したくなるかもしれません：
				</p>

				<pre caption = "XF86Config の編集">
# <i>cp /etc/X11/XF86Config /etc/X11/XF86Config.working</i>
# <i>vim /etc/X11/XF86Config</i>
				</pre>

				<pre caption="XF86Config の ポインターセクション">
Section "InputDevice"

# Identifier and driver

    Identifier	"Mouse1"
    Driver	"mouse"
    <i>Option "Protocol"    "IMPS/2" </i>
    Option "Device"      "/dev/psaux"
    <i>Option "ZAxisMapping"	"4 5"</i>

				</pre>
				
				<p>私はインテリマウスを持っているので、"Protocol" を "PS/2" から "IMPS/2" に変更しました。ホイールでスクロールさせるためには、'Option "ZAxisMapping" "4 5"' の一行を加えることが必要です。'4' と '5' はマウスホイールの上下に相当します。
				</p>

				<note>Netscape 4.x はデフォルトではホイールでスクロールできません； 最初に .Xdefaults ファイルを作る必要があるでしょう。<uri link="http://www-sop.inria.fr/koala/colas/mouse-wheel-scroll/">ここ</uri>に行き、指示に従ってください。それよりもいいのは、<c>Konqueror</c>、<c>Opera</c>、<c>Mozilla</c>、<c>Galeon</c>もしくはその他の本物のブラウザを使うことです。
				</note>

				<p>X がまだ立ち上がるかを確認するために<c>startx</c> を再度実行してください。
				</p>
			</body>
		</section>
		
		<section>
			<title>USB マウス設定</title>
			
			<body>

			<p>USB マウスは高解像度画面の友です。カーネルが縮尺の面倒をみてくれるので、あなたは画面を横切るのにマウスパッド上でマウスを5回横切る必要はありません。
			</p>

			<p>最初にやるべきことは、カーネルモジュールのインストールです。USB マウスを動作させるために必要なモジュールは、<i>usbmouse</i>、<i>mousedev</i>、<i>hid</i>、<i>usbcore</i>、<i>usb-uhci</i>と、<i>input</i> です。必要なカーネルの構築が終了したら、それらのモジュールを <i>insmod</i> してください。
			</p>
			<note><i>usbmouse</i> <b>もしくは</b> <i>hid</i> のどちらか一つを使ってください。もし両方インストールすれば、マウスは止まってしまうでしょう。</note>

			<note>マウスの Input Core Support の設定のとき、X で使用する予定の画面解像度を入力することに気をつけてください。これにより、見事に、そして正しくスケーリングを行います。
			</note>

			<p>さあ、マウスの端子を抜いて、また接続してみてください。そして、こんな風にメッセージを出しているか、カーネルログを確認してみてください。
			</p>

			<pre caption = "カーネルメッセージ">
hub.c: USB new device connect on bus1/1, assigned device number 2
input0,hiddev0: USB HID v1.00 Mouse [Microsoft Microsoft IntelliMouse Optical] on usb1:2.0
			</pre>

			<p>これでマウスが検出されました。マウスが存在し、動作しているか確認するために、<path>/dev/input</path> をチェックしてください。
			</p>

			<pre caption = "USB マウスの確認">	
# <c>cd /dev/input</c>
# <c>cat mice</c>
<comment>デバイスを <i>cat</i> している時にマウスを動かしてみてください。画面にごちゃごちゃのデータが現れるでしょう。</comment>
			</pre>

			<p>一旦マウスが正しく認識され、インストールされたら、今度は X にUSB マウスを使うことを伝えなければなりません。必要なのは、X がマウスのためにどのデバイスを使用するかということを、ほんのちょっと変更することだけです。
			</p>

			<pre caption = "XF86Config の編集">
# <c>cp /etc/X11/XF86Config /etc/X11/XF86Config.working</c>
# <c>vim /etc/X11/XF86Config</c>
			</pre>

			<pre caption="XF86Config のポインターセクション">
Section "InputDevice"

# Identifier and driver

Identifier	"Mouse1"
Driver	"mouse"
<i>Option "Protocol"    "IMPS/2" </i>
Option "Device"      "/dev/input/mice"
<i>Option "ZAxisMapping"	"4 5"</i>

			</pre>

			<p>これでOK 。 X をリスタートしてください。マウスが動いているはずです！
			</p>
			<p>マウスをが使用するモジュールを、<i>modules.autoload</i> に加えるのも忘れずに。
			</p>

			<pre caption = "modules.autoload にエントリーを加える">
# <c>echo $'/n'mousedev $'/n'hid #'/n'usbcore $'/n'input >> /etc/modules.autoload</c>
			</pre>

			</body>
		</section>

		<section>
			<title>NVIDIA カードの設定</title>

			<body>
			<p>もしたまたま NVIDIA カードをお持ちなら、そろそろ NVIDIA アクセラレーションドライバをインストールするいい頃合です。
			</p>
			
			<note>もしあなたがカーネルをリコンパイルするのなら、<i>nvidia-kernel</i> もリコンパイルしてください。なぜなら、新しいカーネルのビルドを行うと、nvidiaモジュールを削除してしまうからです。</note>
			
			<pre caption="NVIDIA オーナーのみ">
# <c>emerge nvidia-glx</c>
# <c>emerge nvidia-kernel</c>
# <c>nano -w /etc/X11/XF86Config</c>
# <c>echo "NVdriver" >> /etc/modules.autoload</c>
# <c>modprobe NVdriver</c>

			</pre>
			<pre caption="/etc/X11/XF86Config で GLX を有効にする">
Section "Module"

# This loads the GLX module
#    Load       "glx" <comment>(Uncomment this line)</comment>
			</pre>

			<pre caption="/etc/X11/XF86Config にて NVIDIA ドライバーを使用することを X に伝える">
Section "Device"
    Identifier  "NVIDIA GeForce"
    #Driver      "nv"
    Driver      "nvidia"
    #VideoRam    32768
    # Insert Clocks lines here if appropriate
EndSection
			</pre>

			<p>X がまだ起動するかどうか確認するために、<c>startx</c> をもう一度実行してください（もし nvidia ドライバーをインストールしていれば、今回は NVIDIA のスプラッシュ画面とともに起動します）。
			</p>

			</body>
		</section>
	</chapter>

	<chapter>	
		<title>ウィンドウマネージャー</title>

		<section>
		
		<title>序論</title>
			<body>

			<p>一般的に、X のインストール後最初に行うことは、よいウィンドウマネージャーをインストールすることでしょう。もちろん、本当に醜い（機能的にという意味ですが）ウィンドウマネージャーが希望なら、twm のままでいることも可能です。
			</p>

			<p>あなたが選ぶことの出来るウィンドウマネージャーはたくさんあります。それらには、KDE や GNOME、Flushbox、Blackbox、その他の*box、Windowmaker、Sawfish などが含まれます。おわかりのように、Gentoo Linux には利用可能なウィンドウマネージャーの良い選択肢があります。
			</p>
		
			</body>
		</section>
	
		<section>
			<title>KDE</title>
			<body>
		
			<p>このセクションを読んでいるあなたは、当然 KDE をインストールしようとしていると思います。KDE は Gentoo Linux でフルサポートされていますが、KDE を emerge する前に、いくつか確認しておきたいことがあります。
			</p>
			
			<li>"qt" と "kde" が <i> make.conf</i> の USE 変数に記述されているかを確認してください。
			</li>
			<li>"-gnome" と "-gtk" が <i> make.conf</i> の USE 変数に記述されているかを確認してください（オプション）。
			</li>
			
			<p>上記のステップの両方は、 <path>/etc/make.conf</path> をこのように編集することで行われます。
			</p>

			<pre caption = "make.conf の編集">
# <c>vim /etc/make.conf </c>
<comment>Inside of <i>make.conf</i></comment>

USE="qt kde -gnome -gtk"
			</pre>
			
			<p>USE 変数についてもっと知りたい場合は、<uri link="http://www.gentoo.org/doc/en/use-howto.xml">USE HOWTO</uri> を参照してください。
			</p>
	
			<p>
			<c>emerge</c> の前に <c>--pretend</c> フラグを使うことはとても有用です。インストールする際の依存関係を教えてくれますし、依存関係は大抵とても多いのです。
			</p>
					
			<pre caption = "KDE パッケージと依存パッケージを見る">
# <c>emerge --pretend kde</c>
# <c>emerge kde</c>
			</pre>
			
			<note>
			<i>emerge kde-base</i> を行うときは注意してください。これはKDE のベースパッケージのみインストールし、KDE のヘルパーアプリケーションの類はインストールしません。
			</note>

			<note>
			もし 印刷のために CUPS を使うつもりなら、KDE の emerge を行う前に、<path>/etc/make.conf</path> の USE 変数に "cups" と記述してください。また、コマンドラインから <i>USE="cups" emerge kde</i> と打っても同じことを行えます。完全な CUPS のインストールに関する説明は、Gentoo Print Guide を参照してください。
			</note>

			<p>では、おやすみなさい!</p>

			<note>
			もしあなたが Gentoo Linux のバイナリ CD をお持ちなら、CDから直接インストールすることができます。
			</note>

			<pre caption="CDからのバイナリパッケージ直接インストール">

# <c>export PKGDIR=/mnt/cdrom/gentoo/packages</c>
<comment>通常 Portage は usr/portage/packages にパッケージがあることを期待します。
</comment>
# <c>emerge --usepkg /mnt/cdrom/gentoo/packages/All/kdebase-x.y.z.tbz2</c>
<comment>ここで指定している<c>--usepkg</c> フラグは（可能であれば）依存関係にバイナリパッケージが使われているかを確認します。
</comment>
			</pre>
			</body>
		</section>
		
		<section>
			<title>KDM の設定</title>
			<body>

			<p>KDE のインストール後、良いログインマネージャー、特に KDE ログインマネージャー、または KDM を使うのが望ましいかもしれません。KDM は KDEパッケージに付属しており、動作させるためにやることはこれだけです:
			</p>

			<pre caption = "KDM を実行する">
# <c>kdm</c>
			</pre>
			
			<p>あなたは KDE にログインし、正常に動作しているのを見ることができるはずです。もちろん、サウンドはまだ機能していないので、KDE のうるさいスタートアップサウンドを聞き逃すでしょうが、それもすぐに直しましょう。konsole を開いて、<c>ls /usr/bin</c>（もしくは konsole のウィンドウを埋め尽くせる他のコマンド）をタイプしてください。それから、konsole のウィンドウ上でマウスホイールを不語化し、上下にスクロールできるか試してみてください。それは本当に動いているのです！
			</p>

			<note>
			もし、<c>kdm</c> を起動したときに、"command not found" と返ってきたら、<c>source<path> /etc/profile</path></c> として、そのターミナルの ＄PATH を更新する必要があります。
			</note>

			<p>残っているのは、Gentoo のブート時に X が起動するかを確かめることだけです。<path>/etc/rc.conf</path> を <e>DISPLAYMANAGER="kdm"</e>  と編集しましょう。
			</p>
			
			<pre caption = "/etc/rc.conf の編集">
# <c>vim /etc/rc.conf</c>
			</pre>
			
			<pre caption="/etc/rc.conf -- DISPLAYMANAGER のセット">
# What display manager do you use ?  [ xdm | gdm | kdm ]
DISPLAYMANAGER=kdm
			</pre>
			
			<p>さあこれで、<e>xdm</e> スタートアップスクリプトがブート時にちゃんと読み込まれるようにするだけです。
			</p>

			<pre caption = "デフォルトのランレベルに XDM スクリプトを加える">
# <c>rc-update add xdm default</c>
			</pre>

			<p>再起動して、X と KDE が起動するか見てください！
			</p>

			<impo><c>rc-update</c> コマンドは、Gentoo Linuxが持つ、初期化スクリプトを管理する、尊敬すべき<c>chkconfig</c> コマンドの進化バージョンです。オプションを一覧表示するために、<c>rc-update</c> とタイプしてください。
			</impo>

			</body>
		</section>
	</chapter>

	<chapter>
		<title>GNOME</title>

		<section>
			<title>インストール</title>
			<body>

			<p>
GNOME パッケージをインストールする前に、USE 変数を編集したくなるかもしれません。これを行うと、GNOME をサポートしたアプリケーションのコンパイル時に、GNOME サポートを有効にすることができます。
			</p>


			<li>"gtk" と "gnome" が <i>make.conf</i> の USE 変数にあることを確認してください。</li>
			<li>また（オプションですが）、"-kde" と "-qt" が <i>make.conf</i> の USE 変数に記述されていることを確認してください。</li>
			<p>以上のステップは、<path>/etc/make.conf</path> をこのように編集することで実現されます:
			</p>

			<pre caption = "make.conf の編集">
# <c>vim /etc/make.conf </c>
<comment><i>make.conf</i> の中</comment>

USE="gnome gtk -kde -qt"
				
			</pre>

			<p>USE 変数についてもっと知りたい場合は、<uri link="http://www.gentoo.org/doc/en/use-howto.xml">USE HOWTO</uri> を参照してください。
			</p>

			<p>さあ、 GNOME に必要なパッケージをインストールしましょう
			</p>


			<pre caption = "GNOME パッケージのインストール">
# <c>emerge --pretend gnome</c>
# <c>emerge gnome</c>
			</pre>

			<p>この作業には、何かをするのにちょうどいい時間がかかりますので、映画でも見ていましょう。著者のおすすめは、パルプ・フィクションです。
			</p>

			<p>GNOME の設定は、基本的に先ほどの KDE と同じです。GNOME 特有の設定はありませんが、セットアップすべき GDM - GNOME ログインマネージャーがあります。
			</p>
			
			</body>
		</section>
		
		<section>
			<title>GDM の設定</title>
			<body>

			<p>GNOME のインストール後は、良いログインマネージャー、特に GNOME ログインマネージャー（または GDM）を使うのが望ましいかもしれません。GDMはGDEパッケージに付属しており、動作させるためにすることはこれだけです:
			</p>
			
			<pre caption = "GDM を実行する">
# <c>gdm</c>
			</pre>
			
			<p>あなたは GNOIME にログインし、正しく動作していることを見ることができるはずです。もちろん、サウンドはまだ機能しませんので、やかましい GNOME のスタートアップサウンドは聞き逃すでしょう。でもそれもすぐに直します。コンソールを開いて、ls /usr/bin/（またはコンソールウィンドウを埋め尽くす他のディレクトリ）とタイプしてください。そしてコンソールウィンドウでマウスホイールを上下にスクロールしてみてください。それは本当に動作しているのです！
			</p>
			
			<note>もし <c>gdm</c> を起動する際に "command not found" と帰ってきたら、ターミナルから <c>source <path>/etc/profile</path></c> として ＄PATH をアップデートする必要があります。
			</note>

			<p>残っているのは、Gentoo のブート時に X が起動するかを確かめることだけです。<path>/etc/rc.conf</path> に <e>DISPLAYMANAGER="gdm"</e> と編集しましょう。
			</p>
			
			<pre caption = "/etc/rc.conf の編集">
# <c>vim /etc/rc.conf</c>
			</pre>
			
			<pre caption="/etc/rc.conf -- DISPLAYMANAGER のセット">
# What display manager do you use ?  [ xdm | gdm | kdm ]
DISPLAYMANAGER=gdm
			</pre>
			
			<p>さあこれで、<e>xdm</e> 起動スクリプトがブート時に読み込まれるかを確認するだけです。
			</p>
			
			<pre caption = "デフォルトのランレベルに XDM スクリプトを加える">
# <c>rc-update add xdm default</c>
			</pre>
			
			<p>再起動して、X と GNOME が起動するか見てください！
			</p>
			
			<impo><c>rc-update</c> コマンドは、Gentoo Linuxが備える、初期化スクリプトを管理する、尊敬すべき<c>chkconfig</c> コマンドの進化バージョンです。オプションを一覧表示するために、<c>rc-update</c> とタイプしてください。
			</impo>
	
			</body>
		</section>
	</chapter>

	<chapter>

		<title>サウンド設定</title>
			<section>
				<title>Alsa</title>
				<body>

				<p>ALSA をインストールするには、Gentoo Linux Alsa セットアップガイドを参照してください。<uri link = "http://www.gentoo.org/doc/alsa-guide.html">ここです</uri>
				</p>

				</body>
			</section>
			
			<section>
				<title>KDE と Sound</title>
				<body>

				<p>KDE には KDE サウンドミキサーの <c>kmix</c> などの良いサウンドユーティリティがいくつかあります。
				</p>
				
				<note>もし、kmix がミキサーを見つけられなければ、多分サウンドがサポートされていないでしょう。ログアウトして、<path>~/.kde/share/config/kmixrc</path> と <path>~/.kde/share/config/kmix:*</path> を削除してください。そして再度ログインしてみてください。今度はサウンドミキサーを正しく見つけられるはずです。
				</note>
				
				</body>
			</section>

			<section>
				<title>GNOME とサウンド</title>
				<body>

				<p>次のリビジョンで記述される予定です。
				</p>

				</body>
			</section>
	</chapter>

	<chapter>
		<title>メール</title>
			<section>
				<title>Postfix -- インストールと設定</title>
				<body>

				<p>
私はたまたま <c>Postfix</c> メールシステムが好きになりました。なぜなら、悪夢のような <c>Sendmail</c> の設定作業なしに<c>Sendmail</c> をエミュレートしてくれるからです。その際、メールリーダーである <c>Mutt</c> も一緒にインストールします。そのため <c>Postfix</c> の設定もテストすることができます。
				</p>
				
				<pre caption = "Postfix と Mutt の emerge">
# <c>emerge postfix mutt</c>
				</pre>
				
				<p>もしあなたがメールを送るためだけにメールサーバーを使うつもりなら、Postfixはすでにセットアップされています。さもなければ、<path>/etc/postfix/main.cf</path> を編集したくなるかもしれません。<path>main.cf</path> ファイルは適度に文書化されており、デフォルト設定はスタンドアローンのマシンに適切です。もしあなたのワークステーションがインターネットに直接つながっているのなら（すなわち、自分自身のプライベートでない IP アドレスと DNS ネームを持っているなら）、Postfix がメールを受信できるようにする必要があるだけでしょう。
				</p>

				<pre caption="main.cfにおけるメール受信のチューニング">
# RECEIVING MAIL

# The inet_interfaces parameter specifies the network interface
# addresses that this mail system receives mail on.  By default,
# the software claims all active interfaces on the machine. The
# parameter also controls delivery of mail to user@[ip.address].
#
#inet_interfaces = all
#inet_interfaces = $myhostname
#inet_interfaces = $myhostname, localhost
<i>inet_interfaces = $myhostname, localhost</i>
<i>mydestination = $myhostname, localhost.$mydomain</i>
				</pre>

				</body>
			</section>

			<section>
				<title>Postfixのテスト(Mutt使用)</title>
				<body>
				<p>さぁ、動くかどうか見てみましょう。
				</p>

				<pre caption = "Postfix のテスト">
# <c>postfix check</c>
# <c>newaliases</c>
# <c>postfix start</c>
postfix-script: starting the Postfix mail system
# <c>mutt -x root</c>
/root/.maildir does not exist. Create it? ([y]/n): <comment>[y と答える]</comment>
To:  &lt;root&gt;
Subject: test
(End message with a . on a line by itself)
test
.

# <c>mutt</c>
<comment>[あなたのメッセージが見えるはずです]</comment>
				</pre>
				
				<p><c>postfix check</c> を使うことにより、<path>main.cf</path> が適正にパースされ、たくさんの重要なディレクトリが作成されているかを確認できます。<c>newaliases</c> を実行すると、システムメールエイリアスをセットアップし、<c>postfix start</c> を実行するとメーラーをスタートします。私は、<c>Mutt</c>、<c>mailx</c>、（もしくは旧式の <c>mail</c> モードで）をローカルマシン上で自分自身にメールを送るために使っていました。その途中で、<c>Mutt</c> はユーザー（この場合は root ）のメールスプールディレクトリ <path>~/.maildir</path> を作成します。<c>mutt</c> をフルインタラクティブモードで実行すると、私のメッセージを表示します。これで、少なくともローカル送信と配信は動作していることがわかりました。私はそれからローカルにないEメールアドレス（上の例には表示されていません）にメールを送り、確かにそこに着いたことを確認しました。
				</p>

				<warn>もしあなたが、プライベートネットワーク上のマシンからデフォルトの <path>main.cf</path> を使ったアカウントにメールを送った場合、二度とそのメールを見ることはないかもしれません。多くのメールサーバーは逆引き DNS によって到達することのできない送信元からのメールを自動的に拒否します。
				</warn>

				<p>全てがうまく行っていると仮定して、次はブート時に Postfix が起動するようにセットアップします。
				</p>
				
				<pre caption = "Postfix をブート時にスタートさせる設定">
# <c>postfix stop</c>
postfix-script: starting the Postfix mail system
# <c>rc-update add postfix default</c>
 * postfix added to runlevel default...
 * Caching service dependencies...          [ ok ] 
 * rc-update complete.
# <c>/etc/init.d/postfix start</c>
Starting postfix......     [  ok  ]
				</pre>

				<impo>老練な <c>Sendmail</c> や <c>Postfix</c> 中毒者は、ユーザーディレクトリーの中に置く代わりに <path>/var/spool/mail</path> にメールをためたいかもしれません。その場合、それらのメールは <e>Maildir</e> フォーマットではなく<e>mbox</e>フォーマットで保存されます。上の例のようにする代わりに <c>Postfix</c> と <c>Mutt</c> を Unix のスタンダードメールボックス形式である(<e>mbox</e>)フォーマットを使うように再設定することはそれほど難しいことではありません。<path>/etc/postfix/main.cf</path> の <i>home_mailbox</i> をコメントアウトし、<i>mail_spool_directory = /var/spool/mail</i> のコメントを外すよう編集してください。<c>mkdir -p /var/spool/mail</c>でメールスプールディレクトリを作成し、<c>Postfix</c>をリスタートします。例えば <c>Mutt</c> の場合は <e>mbox</e> を使うために <path>/etc/mutt/Muttrc</path> を <i>set mbox_type = mbox</i> と編集し、<path>/var/spool/mail</path> ディレクトリを <i>set spoolfile=/var/spool/mail</i>と編集すれば、メーラーの方もうまく対応できるでしょう。
				</impo>

				<p>もしあなたが GUI メールクライアントを好むなら、このガイドの後ろの方で web ベースのメールサーバーである、Squirrelmail をインストールします。代わりに、Daniel Robbins は IMAP（Squirrelmail に必須のソフトウェアとして後でインストールします）と KDE の <c>kmail</c> の組み合わせを強くお勧めしています。kmail プログラムは <path>kde-base/kdenetwork</path> の一部として含まれています：
				</p>
				
				<p>また、下記で Ximian の <e>Evolution</e> を、Palm Pilot を完全にサポートした PIM ソフトウェアとしてインストールします。それはまた、すばらしいメールクライアントを提供することもできます。
				</p>
			
			</body>
		</section>
	</chapter>

	<chapter>
		<title>Samba</title>
			<section>
				<title>Samba のインストール/設定</title>
				<body>

				<p>Samba は Linux ボックスに MS Windows マシンとのファイル/プリンタ共有を提供する、注目すべきパッケージです。さらなる詳細に関しては、Daniel Robbins が書いた Samba の記事 <uri>http://www.ibm.com/developerworks</uri>  を読んでみてください。
				</p>

				<pre caption = "Samba のインストール">
# <c>emerge samba</c>
# <c>rc-update add samba default</c>
# <c>cd /etc/samba</c>
# <c>cp smb.conf.example smb.conf</c>
# <c>nano -w smb.conf</c>
				</pre>
				
				<pre caption="smb.conf -- ワークグループ">
# workgroup = NT-Domain-Name or Workgroup-Name, eg: REDHAT4
   workgroup = MYGROUP <comment>[あなたのワークグループ名に合うよう変更してください]</comment>
				</pre>
				
				<pre caption="smb.conf -- cupsを使ったプリント">
# It should not be necessary to specify the print system type unless
# it is non-standard. Currently supported print systems include:
# bsd, sysv, plp, lprng, aix, hpux, qnx
;   printing = bsd
    printing = cups
				</pre>
				
				<pre caption="smb.conf -- 暗号化">
# You may wish to use password encryption. Please read
# ENCRYPTION.txt, Win95.txt and WinNT.txt in the Samba documentation.
# Do not enable this option unless you have read those documents
  encrypt passwords = yes
				</pre>

				<p>私には Samba の必要性はほとんどありません。ただ、Linux マシンと Windows マシン間でのファイル共有をしたいのと、Linux マシンをプリントサーバー（<c>cups</c> を使って）として使いたいと思っています。インストール後は、<path>/etc/samba/smb.conf</path> ファイルを少し編集するだけで大丈夫です。具体的に言うと、<e>workgroup</e> 変数は Windows ネットワークのワークグループ（私はいつも "OLYMPUS" を使っていますが、私の記憶が確かなら、"WORKGROUP" が Windows のデフォルトだったと思います）と合わせる必要があり、<e>printing</e> には <e>bsd</e> ではなく<e>cups</e> にする必要があるでしょう。そして、<e>encrypt passwords = yes</e> 行はコメントをはずす必要があります。Windows マシンは暗号化パスワードをデフォルトで使用しますので、最後の変更はとても重要です。もしあなたが全ての Windows マシンのレジストリをハックしたいのでなければ<comment>[おすすめしません]</comment>。あいにく、Linux よりも Windows の方が、パスワード用にいくつかの異なった暗号化方法を使用しています。ですので、samba 用に異なるパスワードファイルを持つ必要があります。
				</p>

				<pre caption = "Samba にユーザーを追加する">
# <c>smbpasswd -a grant</c> <comment>["grant"をあなたのユーザー名に変更して下さい]</comment>
New SMB password:
Retype new SMB password:
Added user grant.
				</pre>
				
				<note>Samba のパスワードリストにユーザーを追加する前に、そのユーザーは <path>/etc/passwd</path> に登録されていなければなりません。
				</note>

				<p>Windows マシンから Samba を使用可能にしたいと思っているユーザー用に、<c>smbpasswd</c> コマンドを実行する必要があります。Samba は<path>/etc/samba/private/smbpasswd</path> にパスワードを保存しています。それは、<c>smbpasswd</c> コマンドを最初に実行した時に作成されます。
				</p>
				
				<pre caption = "Samba を起動する">
# <c>/etc/init.d/samba start</c>
Starting samba...        [  ok  ]
				</pre>

				<p>Samba をスタートさせれば、Windows マシンから、Gentoo Linux マシンに接続することができます。そして、どんなユーザーで接続してもホームディレクトリが見えるでしょう。セットアップしたプリンターも全部見えるようになっていると思います。もし接続できないのなら、追加情報として、<path>/usr/share/doc/samba-2.2.5-r1/full_docs/textdocs/DIAGNOSIS.txt.gz</path> を見てください。
				</p>
				
				</body>
			</section>
		</chapter>

		<chapter>
			<title>Apache と Squirrelmail Web メール</title>
			<section>
			<title>SSL と PHP を使用した Apache</title>

			<body>
			<p>あなたがもし、固定 IP アドレス（もしくはダイナミック IP アドレスを持つ dyndns のようなサービスを利用しているかもしれませんが）を持っているとしたら、外出した時に E メールをチェックするのに有効な方法が欲しいかもしれません。私が選んだソリューションは、Web メールサーバーである、Squirrelmail をセットアップすることです。それは Web ブラウザを使って、リモートからのアクセスを可能にします。
			</p>
				
			<p>最初のステップは Web サーバーのインストールです。世界中のほとんどで Apache が使われています; 私たちもそうします。また同時に、PHP（実際は PHP4 ）もインストールします。Squirrelmail は PHP プログラムです。下記の Code listing 中のバージョンは、あなたがこの文書を読んだ時と変わっているかもしれません。適宜置き換えてください。くれぐれもターミナルにそのままコピー＆ペーストしないでください。
			</p>
				
			<pre caption = "Apache のインストールと設定">
# <c>emerge apache php mod_php mod_ssl</c>
# <c>ebuild /var/db/pkg/dev-php/mod_php-4.2.2-r1/mod_php-4.2.2-r1.ebuild config</c>
# <c>ebuild /var/db/pkg/net-www/mod_ssl-2.8.10/mod_ssl-2.8.10.ebuild config</c>
			</pre>
				
			<impo>もしあなたが Apache で SSL を使いたい場合、ちゃんと mod_ssl がインストールされたかどうかを確かめるべきです。もしパスワードが暗号化されずにインターネットを流れてしまうことを避けつつ、リモートから E メールをチェックしたいのであれば、<e>必ず</e> SSL を使ってください！
			</impo>
				
			<p>Apache はとても多様なカスタマイズができるため、<path>/etc/apache/conf/apache.conf</path> をぜひとも見てください。デフォルトでは、Apache のドキュメントルート（http://www.servername.foo や http://localhost に接続したときに最初に見える html ファイルの置き場所です）は <path>/home/httpd/htdocs</path> です。お好みのパスに自由に変更してください。
			</p>
				
			<pre caption="/etc/apache/conf/apache.conf">
# Do NOT add a slash at the end of the directory path.
#
DocumentRoot "/home/httpd/htdocs" <comment>(パスを変更したい場合この行を編集してください)</comment>

			</pre>

			<pre caption = "Apache をブート時にスタートさせる">
# <c>rc-update add apache default</c>
 * apache added to runlevel default...
 * Caching service dependencies...               [ ok ]
 * rc-update complete.
# <c>vim /etc/conf.d/apache</c>
			</pre>
				
			<p>Apache をデフォルトのランレベルに加えるために <c>rc-update</c> を使ってください。そして、<path>/etc/conf.d/apache</path> を以下のように編集してください。Apache は起動時に自動的に SSL と PHP モジュールをロードします。
			</p>
				
			<pre caption="/etc/conf.d/apache">
APACHE_OPTS="-D SSL -D PHP4"
			</pre>

			<pre caption = "Restarting Apache">
# <c>/etc/init.d/apache start</c>
 * Starting Apache...                            [ OK ]
# <c>lynx localhost</c>
			</pre>
				
			<p>Web ブラウザからlocalhost に接続することにより、Apache Web サーバーが動作しているかを確認できます。SSL サポートが機能しているかを確かめるには、ブラウザで <uri>http<comment>s</comment>://localhost</uri> として接続してみてください。冒頭の <c>https</c> は SSL を使ってサーバーとセキュア接続をすることをブラウザに伝えます。グラフィカルなブラウザでは、どこかにセキュア接続を示す鍵のアイコンが出てくるでしょう。
			</p>
				
			<note>サーバーとセキュア接続ができれば、たいていは、サイトのセキュリティ証明書が承認されていない旨のワーニングが出るでしょう。mod_ssl の ebuild は自己署名証明書をインストールします。それはテスト目的のためだけに使われるよう意図されてます。<c>mod_ssl</c> のマニュアルを見てください。<path>/usr/share/doc/mod_ssl-2.8.10</path> 個人使用においては、自己署名証明書で十分でしょう。
			</note>

			<p>次に PHP が正しく動作しているかを確認する必要があります。最初のステップは、簡単な PHP ファイルを作り、それを Apache のドキュメントルートディレクトリに置くことです。
			</p>
				
			<pre caption = "PHP のテスト">
# <C>echo "&lt;? phpinfo(); ?&gt;" > /home/httpd/htdocs/test.php</C>
# <C>lynx http://localhost/test.php</C>
			</pre>
			
			<pre caption="Apache + PHP の動作">
                                                           phpinfo() (p1 of 26)
                                  PHP Logo
 
                             PHP Version 4.0.6
 
     System Linux my.server.edu 2.4.10 #1 Tue Oct 9 16:33:50 Local
           time zone must be set--see zic manuali686 i686 unknown
                           Build Date Oct 16 2001
			</pre>
				
			<p>もし上記のようなものが現れたら、Apache は正しく PHP コードを実行しています。
			</p>
			
			<warn>もし、上記の全てを見たら、<path>test.php</path> スクリプトがあなたのシステムに関する<e>たくさんの</e>情報を表示することに気づくかもしれません。PHP が動作していることがわかったら、おそらくそのスクリプトを取り除くべきです（または、ただ <c>mv test.php test.phps</c> としてください）。Apache は <path>test.phps</path> を実行せずに、ただの PHP ソースファイルとして表示するでしょう。
			</warn>
			
			</body>
		</section>
		
		<section>
			<title>Courier IMAP</title>
			<body>

			<p>Squirrelmail PHP アプリケーションですが、Web サーバーと E メール間の仲介役として IMAP サーバーに依存しています。Gentoo Linux はデフォルトで Mairdir メールフォルダを使っているため、Courier IMAP がいい選択と言えるでしょう。
			</p>

			<pre caption = "Courier-imap の emerge/テスト">
# <c>emerge courier-imap</c>
# <c>rc-update add courier-imapd default</c>
 * courier-imapd added to runlevel default...
 * Caching service dependencies...                        [ ok ]
 * rc-update complete.
# <c>vim /etc/courier-imap/authdaemonrc</c>
# <c>/etc/init.d/courier-imapd start</c>
# <c>telnet localhost 143</c>
Trying 127.0.0.1...
Connected to localhost.localdomain.
Escape character is '^]'.
* OK Courier-IMAP ready. Copyright 1998-2001 Double Precision, Inc.  
See COPYING for distribution information.
1 LOGIN grant passwd <comment>(&lt;-- "grant" をあなたのユーザー名と置き換えてください。
そして "passwd" ではあなたのパスワードを入れてください。)</comment>
1 OK LOGIN OK
<comment>(&lt;ctrl&gt;-"]" を押して、終了するために "quit" とタイプしてください。)</comment>
			</pre>

			<pre caption="/etc/courier-imap/authdaemonrc での適切な認証の設定をする">
##NAME: authmodulelist:0
#
# The authentication modules that are linked into authdaemond.  The
# default list is installed.  You may selectively disable modules simply
# by removing them from the following list.  The available modules you
# can use are: authcustom authcram authuserdb authpam

#authmodulelist="authcustom authcram authuserdb authpam"
authmodulelist="authpam"
			</pre>
			<impo>Courier IMAP は通常、ユーザーの Maildir 形式のinboxディレクトリ名に接続します。それは、rc 起動スクリプト <path>/usr/lib/courier-imap/imapd.rc</path> 内で使われ、<path>$HOME/Maildir</path> となります。しかしながら Gentoo Linux はその代わりに $HOME/.maildir を使うので、courier-imap の ebuild は<path>imapd.rc</path> スクリプトで <e>$MAILDIR</e> を使うように修正します。それは Gentoo の起動スクリプト <path>/etc/init.d/courier-imap</path> から取得できます。もし /home のユーザーディレクトリで、<path>.maildir</path> 以外のメールボックスを使いたい場合、courier-imap の起動スクリプト中の <e>MAILDIR=.maildir</e> エントリを修正する必要があるでしょう。
			</impo>
			<p>もし、Courir IMAP で SSL サポートが欲しい場合、IMAP SSL 証明書を作るだけです（そして、courier-imap にその場所を教えます）。
			</p>

			<pre>
# <i>/usr/sbin/mkimapdcert</i> 
			</pre>
			<p>そして、imap-ssl をスタートさせます。
			</p>
			<pre caption = "Courier IMAP をデフォルトに加える">
# <c>rc-update add courier-imapd-ssl default</c>
# <c>/etc/init.d/courier-imapd-ssl start</c>
			</pre>
			<p>Netscape や kmail、Mutt のような IMAP プロトコルを利用可能なメールクライアントを使って、imap が動作しているかを確認できます。
			</p>
			<pre caption = "IMAP サーバーのチェック">
# <c>mutt -f imap://localhost</c>
			</pre>
			<pre caption = "SSL IMAP サーバーのチェック">
# <c>mutt -f imaps://localhost</c>
			</pre>
			</body>
		</section>
		<section>
			<title>Squirrelmail</title>
			<body>
			<p>幸いにも、すべてのコンポーネントを適切な場所に置けば、Squirrelmail のインストールと設定は複雑ではありません。
			</p>
			<pre caption = "Squirrelmail の emerge">
# <c>emerge squirrelmail</c>
# <c>cd /home/httpd/htdocs</c>
# <c>cd squirrelmail</c>
# <c>./configure</c>
			</pre>
			<note>もし、Apache のドキュメントルートが <path>/home/httpd/htdocs</path> でない場合、そこを指すように <path>net-mail/squirrelmail</path> ebuild を編集したくなるでしょう。
			</note>
			<p>Squirrelmai を正しく動作させるためには、全てのファイルのオーナーが Apache（squirrelmail の ebuild は apache がユーザーと仮定します）の実行ユーザーである必要があります。<c>./configure</c> を実行して、オプション2を選択してください。
			</p>
			<pre caption="Squirrelmail の設定 -- サーバー設定">
SquirrelMail Configuration : Read: config.php
---------------------------------------------------------
Server Settings
1.  Domain               : my.server.edu
2.  IMAP Server          : localhost
3.  IMAP Port            : 143
4.  Use Sendmail/SMTP    : SMTP
6.    SMTP Server        : localhost
7.    SMTP Port          : 25
8.    Authenticated SMTP : false
9.  Server               : courier
10. Invert Time          : false
11. Delimiter            : detect
 
R   Return to Main Menu
C.  Turn color off
S   Save data
Q   Quit
 
Command >>
			</pre>
			<p><e>Server</e> が <e>courier</e> になっているかを確認してください。メインメニューに戻り、General Options のオプション<e>4</e>を選択します。
			</p>
			<pre caption="Squirrelmail の設定 -- General options">
SquirrelMail Configuration : Read: config.php
---------------------------------------------------------
General Options
1.  Default Charset        : iso-8859-1
2.  Data Directory         : ../data/
3.  Attachment Directory   : /tmp/
4.  Default Left Size      : 150
5.  Usernames in Lowercase : false
 
R   Return to Main Menu
C.  Turn color off
S   Save data
Q   Quit
 
Command >>
			</pre>
			<p>私はパッケージのままの data ディレクトリを使いますが、Apache のドキュメントツリーの外を使ったほうがセキュリティ上好ましいでしょう。私はまた、<path>/tmp</path> を添付ファイルを置くためのディレクトリとして使います。
			</p>

			<p>あとは Apache を再起動させるだけです。そうすれば、準備は完了です！
			</p>

			<pre caption = "Apache の再起動">
# <c>/etc/init.d/apache restart</c>
			</pre>

			<p>これで<uri>https://localhost/squirrelmail/src/login.php</uri>をブラウズできるようになりました。ちゃんと動いてるはずです！
			</p>

			<pre caption = "Squirrelmail のテスト">
# <c>lynx https://localhost/squirrelmail/</c>
			</pre>

			<pre caption="Squirrelmail ログインページ">
                                           SquirrelMail - Login
                               [sm_logo.jpg]
 
                      SquirrelMail version 1.2.0 [rc2]
                    By the SquirrelMail Development Team
 
                             SquirrelMail Login
 
       Name: ____________________
   Password: ____________________
 
                                   Login
			</pre>
			<p>(私は本当に Squirrelmail と lynx を一緒に使うことを提案しているわけではありません。でも、できましたよね！)
			</p>
			</body>
		</section>
	</chapter>

	<chapter>
		<title>個人情報管理</title>
		<section>
			<title>Palm サポート付きの Evolution</title>
			<body>
			<p>Evolution は、Palm Pilot とうまく同期を取れる、非常に素晴らしい個人情報管理（PIM）ツールです。最初のステップは、Evolution を emerge することです。もし Evolution と Palm Pilot を一緒に使うつもりなら、Evolution の emerge を行う前に、<path>/etc/make.conf</path> の USE 変数に "pda" があるか確認してください。
			</p>

			<pre caption = "Evolution の emerge">
# <c>emerge --pretend evolution</c>
# <c>emerge evolution</c> 
			</pre>

			<p>残念ながら Evolution のビルドはものすごく時間がかかります（注意： <c>Mozilla</c> が依存関係にあります！); 待ってる間に数リットルのコーヒー/紅茶でも飲みましょう。
			</p>

			<p><c>Evolution</c> のビルド時には Palm Pilot tool がビルドされていることが必須です。標準のユーザーが Pilot を HotSync できるかを確かめるためには、シリアルポートのパーミッションを2、3個変更する必要があります。私はあなたの Palm クレイドルが1番目のシリアルポート(/dev/ttyS0、"devfs" の表記では /dev/tts/0)に接続されていると仮定します。
			</p>

			<pre>
# <c>groupadd serial</c>
# <c>chown root.serial /dev/tts/0</c>
# <c>chmod g+rw /dev/tts/0</c>
# <c>ls -l /dev/tts/0</c>
crw-rw----    1 root     serial     4,  64 Dec 31  1969 /dev/tts/0
# <c>ln -s /dev/tts/0 /dev/pilot</c>
# <c>vim /etc/group</c> <comment>(serial グループに適切なユーザーを追加してください)</comment>
			</pre>

			<p>システムに "serial" グループを追加しました。そして、シリアルポートを使いたいユーザー（どの Palm pilot ユーザーでも）を serial グループに追加します。serial グループに対し、<path>/dev/tts/0</path> へ "rw" パーミッションを渡しました。そして将来の参考用に、<path>/dev/tts/0</path> のシンボリックリンクである <path>/dev/pilot</path> を作っておきました。Gentoo における最近の devfs の取り扱いの変更のおかげで、再起動後にも変更点はそのまま持続します。
			</p>

			<note>pre-rc6 から r13 のユーザーは <path>sys-apps/baselayout</path> と <path>sys-apps/devfsd</path> をアップグレードするか（そしてその結果 <path>/etc</path> にあるいくつかの "._cfg*" ファイルをマージしてください）、<path>/etc/devfsd.conf</path> に適切なパーミッションとシンボリックリンクを加えてください。
			</note>

			<p>ユーザーは、Gnome Pilot ソフトウェアのセットアップの為に、Evolutio の <path>tools/Pilot settings</path> メニューオプションを使いたくなるでしょう。"Pilot Conduits" を Gnome コントロールセンターの"Pilot Link" と同じようにセットアップするのを忘れないでください。
			</p>

			</body>
		</section>
	</chapter>
</guide>
