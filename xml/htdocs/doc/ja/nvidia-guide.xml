<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/nvidia-guide.xml,v 1.13 2006/05/03 06:31:17 idani Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/ja/nvidia-guide.xml" lang="ja">
<title>Gentoo Linux nVidiaガイド</title>

<author title="Author">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Editor">
  <mail link="curtis119@gentoo.org">M Curtis Napier</mail>
</author>
<author title="Editor">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="翻訳">
  <mail link="solidsneak@hyper.cx">小林弘樹</mail>
</author>

<abstract>
多くのGentooユーザは、nVidiaのチップセットが組み込まれたシステムを使用しています。
nVidiaはカードのパフォーマンスを向上させる特定のLinuxドライバを提供しています。
このガイドではどのようにしてこれらのドライバをインストールし、設定するかを説明します。
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.24</version>
<date>2006-05-02</date>

<!-- Original revision: 1.28 -->

<chapter>
<title>はじめに</title>
<section>
<body>

<p>
nVidiaは素晴らしいパフォーマンスと完全な3Dアクセラレーションを提供するLinux向けのドライバを公開しています。
ドライバは、<c>nvidia-kernel</c>と<c>nvidia-glx</c>の2つに分かれて公開されています。
</p>

<p>
<c>nvidia-kernel</c>は、ビデオハードウェアとローレベルな情報伝達を扱うカーネルドライバです。
これは単なる<c>nvidia</c>と名付けられたカーネルモジュールで、カーネルソースとは別にインストールされ、nvidiaドライバを使用したいときにはいつでもロードされていなければなりません。
</p>

<p>
カーネルドライバと同様に、X11 GLXレイヤ(<c>nvidia-glx</c>)もインストールする必要があります。
これはXがグラフィックを描画するのに使われ、ハードウェアとの通信に<c>nvidia-kernel</c>が内部的に使用されています。
</p>

</body>
</section>
</chapter>

<chapter>
<title>カードの設定</title>
<section>
<title>カーネルの設定</title>
<body>

<p>
上記の通り、nVidiaカーネルは現在のカーネルと別にインストールし、実行されます。
このドライバはモジュールとしてビルドされるので、カーネルがモジュールの読み込みをサポートしていなければなりません。
もしカーネルの設定に<c>genkernel</c>を使用したなら、準備は整っています。
そうでなければ、このサポートが有効になっているかカーネルの設定をもう一度確認してください。
</p>

<pre caption="カーネルモジュールの読み込みを有効化">
Loadable module support ---&gt;
  [*] Enable loadable module support
</pre>

<p>
<e>Memory Type Range Register</e>も有効にする必要があります。
</p>

<pre caption="MTRRを有効化">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

</body>
</section>
<section>
<title>アーキテクチャ特有の注意</title>
<body>

<impo>
x86とAMD64プロセッサでは、カーネル内部のドライバはnVidiaが提供するバイナリドライバと競合します。
これらのCPUでカーネルをコンパイルするのなら、以下のようにカーネル内部のドライバのサポートを完全に削除しなければなりません。
</impo>

<pre caption="カーネル内部のドライバを削除">
Device Drivers ---&gt;
Graphics Support ---&gt;
&lt; &gt;   nVidia Framebuffer Support
&lt; &gt;   nVidia Riva support
</pre>

<p>
適したフレームバッファの選択は<c>VESA</c>です。
</p>

<pre caption="VESAサポートを有効化">
Device Drivers ---&gt;
Graphics Support ---&gt;
&lt;*&gt;   VESA VGA graphics support
</pre>

<p>
その後、"VESA driver type"で<c>vesafb</c>か<c>vesafb-tng</c>のどちらかを選択します。
</p>

<pre caption="フレームバッファの種類を選択">
( ) vesafb
(X) vesafb-tng
</pre>

<p>
詳しい情報は、<c>vesafb</c>を使っているのなら<path>/usr/src/linux/Documentation/fb/vesafb.txt</path>を読んでください。
もしくは、<path>/usr/src/linux/Documentation/fb/</path>でフレームバッファのドキュメントを探してください。
</p>

</body>
</section>
<section>
<title>カーネル設定の継続</title>
<body>

<p>
nVidiaのモジュールとライブラリは2つのパッケージから構成されています。<c>nvidia-glx</c>と<c>nvidia-kernel</c>です。
前者はX11 GLXライブラリで、後者はカーネルモジュールです。
</p>

<p>
nvidia-kernel ebuildは<path>/usr/src/linux</path>のシンボリックリンクに基づき、カーネルのバージョンを自動判別します。シンボリックリンクが正しいソースをさしていて、カーネルが正しく設定されているかを確認してください。
カーネルの設定についての詳細は<uri link="/doc/en/handbook/">ハンドブック</uri>（<uri link="/doc/ja/handbook/">日本語訳</uri>）のカーネル設定の章を参照してください。
</p>

<p>
gentoo-sources-2.6.11-r6を使用しているのなら、<path>/usr/src</path>ディレクトリはこの様になっているはずです。
</p>

<pre caption="/usr/src/linuxシンボリックリンクの確認">
# <i>cd /usr/src</i>
# <i>ls -l</i>
<comment>(linuxが正しいディレクトリをさしているか確認)</comment>
lrwxrwxrwx   1 root root   22 Apr 23 18:33 linux -&gt; linux-2.6.11-gentoo-r6
drwxr-xr-x   4 root root  120 Apr  8 18:56 linux-2.4.26-gentoo-r4
drwxr-xr-x  18 root root  664 Dec 31 16:09 linux-2.6.10
drwxr-xr-x  18 root root  632 Mar  3 12:27 linux-2.6.11
drwxr-xr-x  19 root root 4096 Mar 16 22:00 linux-2.6.11-gentoo-r6
</pre>

<p>
上記出力では、<c>linux</c>シンボリックリンクが<c>linux-2.6.11-gentoo-r6</c>カーネルを指していることが分かるでしょう。
</p>

<p>
シンボリックリンクが正しいソースを指していなければ、以下のようにしてリンクを更新しなければなりません。
</p>

<pre caption="/usr/src/linuxシンボリックリンクの作成または更新">
# <i>cd /usr/src</i>
# <i>ln -snf linux-2.6.11-gentoo-r6 linux</i>
</pre>

</body>
</section>
<section>
<title>自由選択: レガシーカードサポートを確認</title>
<body>

<note>
不幸にも、いくつかのレガシービデオカードは新しいバージョンの<c>nvidia-glx</c>と<c>nvidia-kernel</c>ではサポートされていません。
nVidiaは<uri link="http://www.nvidia.com/object/IO_18897.html">サポートするカードの一覧</uri>を提供しています。
ドライバをインストールする前に一覧を確認してください。
</note>

<p>
以下は<b>サポートされていない</b>レガシービデオカードの一覧です。
</p>

<pre caption="サポートされていないカード">
TNT2
TNT2 Pro
TNT2 Ultra
TNT2 Model 64 (M64)
TNT2 Model 64 (M64) Pro
Vanta
Vanta LT
GeForce 256
GeForce DDR
GeForce2 GTS
GeForce2 Pro
GeForce2 Ti
GeForce2 Ultra
GeForce2 MX Integrated graphics
Quadro
Quadro2 Pro
Quadro2 EX
</pre>

<p>
これらのカードを使用しているのなら、nVidiaドライバの新しいバージョンをマスクし、古いバージョンをインストールします。
</p>

<pre caption="新しいドライバをマスク">
# <i>echo "&gt;media-video/nvidia-kernel-1.0.6629-r5" &gt;&gt; /etc/portage/package.mask</i>
# <i>echo "&gt;media-video/nvidia-glx-1.0.6629-r7" &gt;&gt; /etc/portage/package.mask</i>
</pre>

</body>
</section>
<section>
<title>適切ななドライバのインストール</title>
<body>

<p>
では<c>nvidia-kernel</c>と<c>nvidia-glx</c>をインストールしましょう。
<c>nvidia-glx</c>は<c>nvidia-kernel</c>に依存しているため、<c>nvidia-glx</c>をインストールするだけで十分です。
</p>

<pre caption="nVidiaモジュールのインストール">
# <i>emerge nvidia-glx</i>
</pre>

<impo>
<uri link="/doc/en/kernel-upgrade.xml">新しいカーネルをコンパイル</uri>（<uri link="/doc/ja/kernel-upgrade.xml">日本語訳</uri>）したり、または現在のカーネルを再コンパイルする度に、<c>emerge nvidia-kernel</c>を実行し、nVidiaモジュールを再インストールする必要があります。
<c>nvidia-glx</c>はカーネルの変更に影響されず、Xの再コンパイルや更新時でさえも再構築する必要はありません。
</impo>

<p>
インストールが完了したら、<c>modprobe nvidia</c>を実行してカーネルモジュールをメモリに読み込みます。
</p>

<pre caption="カーネルモジュールの読み込み">
# <i>modprobe nvidia</i>
</pre>

<p>
起動する度にモジュールを手動で読み込む手間を省くために、自動で行って欲しいと思うでしょう。
それならば、<path>/etc/modules.autoload.d/kernel-2.6</path>（もしくは<path>kernel-2.4</path>）を編集して<c>nvidia</c>を追加してください。
その後に<c>modules-update</c>を実行することを忘れないでください。
</p>

<pre caption="modules-updateの実行">
# <i>modules-update</i>
</pre>

</body>
</section>
<section>
<title>Xサーバの設定</title>
<body>

<p>
適切なドライバがインストールされたなら、デフォルトの<c>nv</c>ドライバの代わりに<c>nvidia</c>ドライバを使用するように、Xサーバ（XFree86かXorg）の設定をする必要があります。
</p>

<p>
<path>/etc/X11/xorg.conf</path>（まだ古い設定ファイルを使い続けているのなら<path>/etc/X11/XF86Config</path>）を（<c>nano</c> や<c>vim</c>の様な）お気に入りのエディタで開いて、<c>Device</c>セクションに進んでください。
このセクションの<c>Driver</c>行を以下のように変更します。
</p>

<pre caption="Xサーバ設定のnvをnvidiaに変更">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>
  VideoRam   65536
EndSection
</pre>

<p>
そして<c>Module</c>セクションに行き、<c>glx</c>モジュールが読み込まれ、<c>dri</c>モジュールが読み込まれないようにしてください。
</p>

<pre caption="Moduleセクションを更新">
Section "Module"
  <comment>(...)</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>(...)</comment>
EndSection
</pre>

<p>
次の<c>Screen</c>セクションでは、<c>DefaultDepth</c>を16か24のどちらかに設定するか、<c>Display</c>サブセクションの<c>Depth</c>を16か24に設定します。
そうしなければ、nvidia-glxの拡張は起動しないでしょう。
</p>

<pre caption="Screenセクションを更新">
Section "Screen"
  <comment>(...)</comment>
  <i>DefaultDepth 16</i>
  Subsection "Display"
  <comment>(...)</comment>
EndSection
</pre>

<p>
<c>eselect</c>を実行してXサーバがnVidia GLXを使うようにします。
</p>

<pre caption="eselectを実行">
# <i>eselect opengl set nvidia</i>
</pre>

</body>
</section>
<section>
<title>ユーザをvideoグループに追加</title>
<body>

<p>
ユーザがnvidiaデバイスファイルにアクセスできるように<c>video</c>グループに追加する必要があります。
</p>

<pre caption="ユーザをvideoグループに追加">
# <i>gpasswd -a youruser video</i>
</pre>

<p>
これは<c>udev</c>を使用していなければ全く必要ありませんし、損害も与えません。そして、システムに未来の保証を付けます :)
</p>

</body>
</section>
<section>
<title>カードのテスト</title>
<body>

<p>
nVidiaカードをテストするには、Xを起動して<c>glxinfo | grep direct</c>コマンドを実行します。
それはダイレクトレンダリングが有効であると伝えるでしょう。
</p>

<pre caption="ダイレクトレンダリングの状態を確認">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
FPSを評価するために、<c>glxgears</c>を実行します。
</p>

</body>
</section>
<section> 
<title>nvidiaサポートを有効にする</title>
<body>

<p>
<c>mplayer</c>や<c>xine-lib</c>といったいくつかのツールは、高解像度の動画を鑑賞するときに役立つXvMCNVIDIAのサポートを有効にする、"nvidia"というローカルUSEフラグを使用します。
<path>/etc/make.conf</path>ファイルのUSE変数に"nvidia"を追加するか、<path>/etc/portage/package.use</path>ファイルで<c>media-video/mplayer</c>や<c>media-libs/xine-lib</c>に"nvidia"をUSEフラグとして追加します。
</p>

<p>
その後、USEフラグの変更を反映するために、<c>emerge -uD --newuse world</c>を実行してアプリケーションを再度ビルドします。
</p>

</body>
</section>
<section>
<title>NVidia設定ツールを使う</title>
<body>

<p>
NVidiaがバージョン1.0.6106をリリースしてから、設定ツールも配布されるようになりました。
このツールを使えば、Xサーバを再起動することなくグラフィカル設定の変更を行うことができます。
これはPortageの<c>media-video/nvidia-settings</c>で利用することができます。
</p>

</body>
</section>
</chapter>

<chapter>
<title>トラブルシューティング</title>
<section>
<title>4Gb以上のメモリを搭載したマシンで2Dを動作させる</title>
<body>

<p>
もしnVidia 2Dアクセラレーションに関して問題があるなら、たぶんMTRRにwrite-combining幅を設定できないと言うことでしょう。
確認するには、<path>/proc/mtrr</path>の内容を確認します。
</p>

<pre caption="write-combiningが有効か確認">
# <i>cat /proc/mtrr</i>
</pre>

<p>
各行に"write-back"か"write-combining"が含まれているでしょう。
もし"uncachable"と書かれた行があるなら、BIOSの設定を変更する必要があるでしょう。
</p>

<p>
再起動してBIOSに入り、MTRR設定（もしかすると"CPU Settings"設定項目の中かもしれません）を探してください。
設定を"continuous"から"discrete"へと変更し、再びLinuxを起動させます。
これで"uncachable"が無くなり、2Dアクセラレーションが動作することでしょう。
</p>

</body>
</section>
<section>
<title>サポートされていない4Kスタックサイズに関する警告を受けました</title>
<body>

<p>
1.0.6106以前の<c>nvidia-kernel</c>パッケージは8Kスタックサイズを使用するカーネルのみサポートしています。
最近のカーネル（2.6.6以上）は4Kスタックサイズをサポートしています。
この様な<c>nvidia-kernel</c>パッケージを使用しているなら、カーネル設定で4Kスタックサイズを選択しないでください。
このオプションは<c>Kernel Hacking</c>に有ります。
</p>

</body>
</section>
<section>
<title>
カーネルモジュールをロードしようとしたら"no such device"というメッセージが表示されました
</title>
<body>

<p>
これはたいてい適応するビデオカードを使用していないときに起こります。
nVidiaのグラフィックカードを使用しているか確認してください。（<c>lspci</c>を使って再確認することができます）
</p>

<p>
nVidiaのカードを使用していると確信があるのなら、BIOSを確認して<e>Assign IRQ to VGA</e>の命令が設定されているか確認してください。
</p>

</body>
</section>
<section>
<title>
"no screens found"と表示され、ログには"Failed to initialize the NVIDIA kernel module!"と書かれていました
</title>
<body>

<p>
おそらく<path>/dev/nvidia*</path>デバイスファイルがありません。
<c>NVmakedevices.sh</c>を使用して作成してください。
</p>

<pre caption="nvidiaデバイスノードの作成">
# <i>/sbin/NVmakedevices.sh</i>
</pre>

<p>
再起動する度に<path>/dev/nvidia</path>デバイスが消失するのであれば、もしかするとudevが適切なデバイスノードを自動的に作成していないのが原因かもしれません。
<c>NVmakedevices.sh</c>を再実行することでこのバグを修正できたなら、<path>/etc/conf.d/rc</path>を以下のように編集することでこれを修正することが出来ます。
</p>

<pre caption="/etc/conf.d/rcの編集">
RC_DEVICE_TARBALL="yes"
</pre>

<p>
これは、再起動時でも<path>/dev/nvidia</path>ノードを保存します。
</p>

<note>
そのほかに、8xxxシリーズの最新の<c>nvidia-kernel</c>と<c>nvidia-glx</c>のemergeを試してみたいかもしれません。
これを書いている時点では、どちらも~archになっています。
これらのドライバは適切なノードの作成にhotplugやudevにはもはや頼っていないので、<c>NVmakedevices.sh</c>を実行する必要はないでしょう。
その代わり、Xの起動時にXドライバ自身が<path>/dev/nvidia</path>ファイルを作成します。
ですが、これには最近のカーネル(2.6.14以降)の使用が必要です。
</note>

</body>
</section>
</chapter>

<chapter>
<title>上級者向け設定</title>
<section>
<title>ドキュメント</title>
<body>

<p>
nVidiaドライバパッケージには包括的なドキュメントも含まれます。
これは<c>/usr/share/doc</c>にインストールされ、以下のコマンドで閲覧することが出来ます。
</p>

<pre caption="NVIDIAドキュメントの閲覧">
# <i>less /usr/share/doc/nvidia-glx-*/README.txt.gz</i>
</pre>

</body>
</section>
<section>
<title>カーネルモジュールのパラメータ</title>
<body>

<p>
<c>nvidia</c>カーネルモジュールは、ドライバの振る舞いを調整するためのいくつかのパラメータを受け付けます。
これらのほとんどはドキュメントに記載されています。
これらパラメータを追加したり、値を変更するには、<c>/etc/modules.d/nvidia</c>ファイルを編集します。
このファイルを編集した後は<c>modules-update</c>を忘れずに実行してください。
また、新しい設定を有効にするには<c>nvidia</c>モジュールを再読込する必要があると言うことを心に留めておいてください
</p>

<pre caption="nvidiaオプションの調整">
<comment>(/etc/modules.d/nvidiaをお気に入りにのエディタで開きます)</comment>
# <i>nano -w /etc/modules.d/nvidia</i>
<comment>(モジュール情報の更新)</comment>
# <i>modules-update</i>
<comment>(nvidiaモジュールの更新)</comment>
# <i>modprobe -r nvidia</i>
<comment>(そして再読込)</comment>
# <i>modprobe nvidia</i>
</pre>

</body>
</section>
<section>
<title>高度なXの設定</title>
<body>

<p>
GLXレイヤには設定可能な多くのオプションがあります。
これらはTV出力、デュアルディスプレイ、モニタ周波数の検知などの設定を制御します。
繰り返しますが、利用可能なオプションの全てはドキュメントで詳細に記されています。
</p>

<p>
これらのオプションを使いたいのなら、X設定ファイル(たいていは<c>/etc/X11/xorg.conf</c>)の適切なDeviceの章へ記述する必要があります。
例えば、スプラッシュロゴを無効にしたいのならば、この様にします。
</p>

<pre caption="X設定での高度なnvidia設定">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  <i>Option     "NoLogo" "true"</i>
  VideoRam   65536
EndSection
</pre>

</body>
</section>
</chapter>

</guide>
