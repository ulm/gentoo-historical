<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/utf-8.xml,v 1.1 2005/04/09 15:45:37 nakano Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/ja/utf-8.xml">
<title>GentooでのUTF-8の使用方法</title>

<author title="Author">
  <mail link="slarti@gentoo.org">Thomas Martin</mail>
</author>
<author title="Contributor">
  <mail link="devil@gentoo.org.ua">Alexander Simonov</mail>
</author>
<author title="翻訳">
  <mail link="nakano@gentoo.org">中野 正智</mail>
</author>

<abstract>
このガイドでは、Unicode(特にUTF-8)の利点を解説した後で、
Gentoo LinuxシステムでのUTF-8 Unicodeの設定方法と使い方について説明します。
</abstract>

<license />

<version>1.7</version>
<date>2005-03-25</date>
<!-- Original revision: 1.8 -->

<chapter>
<title>文字コード</title>
<section>
<title>文字コードとは</title>
<body>

<p>
コンピュータはテキストそれ自体を理解することができません。
その代わりに、数字を用いてすべての文字を表します。
伝統的に、それぞれのセットで使用できるアルファベットや文字(コーディングシステム、エンコーディングまたはキャラクタセットのこと)の数は、
コンピュータハードウェアの能力により限界がありました。
</p>

</body>
</section>
<section>
<title>文字コードの歴史</title>
<body>

<p>
最も一般的な(少なくとも、最も広く受け入れられている)キャラクタセットは<b>ASCII</b>
(American Standard Code for Information Interchange)です。
ASCIIが今までで最も成功したソフトウェア標準であるということは、広く支持されていることです。
現在のASCIIは1986年American National Standards Institute(米国規格協会)によって制定されました(ANSI X3.4, RFC 20, ISO/IEC 646:1991, ECMA-6)。
</p>

<p>
ASCIIは7ビットに制限されています。これは7桁のバイナリで表されるビットパターンを使用するというです。
十進数で言うと、0から127の範囲を使用可能ということになります。
この範囲には、32の目に見えないコントロール文字が含まれています。
大部分が0から31の間に、また最後のコントロール文字は、DELまたはdeleteで、127番目のところににあります。
32から126には、目に見える文字、つまりスペース、句読点、ラテン文字、数字が入ります。
</p>

<p>
ASCIIの8番目のビットはもともとは、エラーチェックのためのパリティビットとして使われていました。
しかし、これが必要ではない場面では、0としておきます。
これは、ASCIIでは、各文字はシングルバイトで表すことを意味します。
</p>

<p>
近代の英語で、コミュニケーションをするためにはASCIIで十分でしたが、
他のアクセント記号を含む他のヨーロッパ言語では、ことは簡単に行きませんでした。
ISO 8859規格は、このニーズを満たすために誕生しました。
これはASCIIへの互換性を残したまま、
8番目のビットに空白にしておくのではなく、
それぞれのエンコーディングごとに他の127文字を持たせるために使用しました。
ISO 8859の限界はすぐに露見しましたが、
現在15種類のISO 8859規格(8859-1から8859-15)が存在しています。
これらの文字セットではASCII互換ではない部分で、
しばしば文字の衝突が発生しました。
Windows-1252がマイクロソフトウィンドウズで西ヨーロッパ言語として使用されたことは、
文字エンコード間の透過性をさらに複雑化させることになりました。
これは、ISO 8859-1の上位集合なのですが、いくつかの手法が異なっています。
しかしながら、これらすべてのセットはASCIIとしての互換性は保持されています。
</p>

<p>
日本語や韓国語(また少ない範囲での中国語)で使用されているEUC(Extended Unix Coding)のような、
ラテン言語ではない文字のシングルバイトエンコーディングの開発はさらなる混乱を生みました。
一方、他のOSでは、それでもやはり同じ言語で違う文字セット(例えばShift-JISとISO-2022-JP)を使用していました。
キリル文字を表示させたいユーザーは、ロシア語やブルガリア語ではKOI8-Rを、
ウクライナ語ではKOI8-U、
または他のキリル文字のエンコード(うまくいっていないISO 8859-5またはWindows-1251セットなど)から選択する必要がありました。

これらのキャラクタセットはASCIIとの互換性を持ちません。
(KOI8エンコーディングはキリル文字をラテンの文字順に格納しますが、
この場合8ビット目は省かれるので、
テキストは大文字小文字が反転した形でASCII端末に表示され判読は可能です。)
</p>

<p>
これは混乱を起こし、複数言語でのコミュニケーションをほぼ不可能にします。
そしてUnicodeの出番です。
</p>

</body>
</section>
<section>
<title>Unicodeとは</title>
<body>

<p>
Unicodeは、昔ながらの文字セットのシングルバイト制限を取り払い、
1文字に2バイトを割り当てます。これにより最大65,536文字を使用可能にします。
これは、7ビット、8ビットのエンコーディングと比較すると明らかに多い数字ですが、
研究者が使用するような記号や文字、数学者やその他特定のフィールドで使用される文字セットを使用したいとなると不十分な量です。
</p>

<p>
Unicodeはたくさんの違った方法で文字が割り当てられています。
その中で、<b>UTF</b> (Unicode Transformation Format)と<b>UCS</b> (Universal Character
Set)が最も一般的です。
UTFの後の数字は一単位で何ビットかを表します。
また、UCSの後の数字は、バイト数を表します。
UTF-8は、その8ビットクリーンな特性から、Unicodeで文章のやりとりをする目的では、
最も広まりました。
そして、UTF-8がこのドキュメントの主題です。
</p>

</body>
</section>
<section>
<title>UTF-8</title>
<body>

<p>
UTF-8は、1バイトから4バイトを使用する可変長の文字コードです
これが意味するところは、ASCIIとラテン文字についてはわずかなデータ量の増加で相互変換可能だということです。
なぜなら、これらの文字セットでは最初の1バイトしか使われないからです。
日本語のような東洋の言語利用者はより多くのバイトを割り当てられ、あまり幸せではありません。
結果として、最大50%のデータ冗長性が発生するからです。
</p>

</body>
</section>
<section>
<title>UTF-8でできること</title>
<body>

<p>
UTF-8は、標準的で国際的に受け入れられた多言語対応環境を比較的データの冗長をおさえて提供します。
また、UTF-8はインターネット上で、メール、IRC、その他多くのメディアを通じて、ASCII以外の文字を送信する際に好まれています。
この一方で、多くの人々はネットワークコミュニケーションにおいて、UTF-8には弊害があると考えています。
<e>ASCII以外</e>のUTF-8を使用する前には、必ずそのメーリングリストやUsenetでのUTF-8の扱いを意識してください。
</p>

</body>
</section>
</chapter>

<chapter>
<title>Gentoo LinuxでのUTF-8のセットアップ</title>
<section>
<title>UTF-8ロケールの発見、または作成</title>
<body>

<p>
ここまでで、Unicodeの背景にある理念を説明してきました。
さて、次にUTF-8を使い始める準備をします。
</p>

<p>
UTF-8を使用するためには事前に、国際化言語サポートされたglibcがインストールされている必要があります。
これは、<path>/etc/locales.build</path>ファイルと<c>userlocales</c> USEフラグが必要なことを意味します。
このファイルのことを説明するのは、このドキュメントの範疇を越えてしまいますが、
幸いなことに、そのファイルには使い方が豊富なコメントとしてされています。
また、<uri
link="/doc/ja/guide-localization.xml#doc_chap3_sect3">Gentoo Linux ローカライズガイド</uri>でも説明されています。
</p>

<p>
次に、どのUTF-8ロケールを使用するか、または新しく作成する必要があるのかを判断する必要があります。
</p>

<pre caption="既存のUTF-8ロケールを調べる">
<comment>("en_GB"はあなたの望ましいロケールに置換してください。訳注：日本語ならja_JPでいいでしょう)</comment>
# <i>locale -a | grep 'en_GB'</i>
en_GB
en_GB.utf8
</pre>

<p>
このコマンドの出力結果から、<c>.utf8</c>のような拡張子のついたファイルがあるかどうか確認します。
もし<c>.utf8</c>のような出力が得られなかった場合には、UTF-8互換のロケールを作成する必要があります。
</p>

<note>
もしあなたの言語用にUTF-8ロケールが存在しなかった場合には下記コマンドを実行します。
</note>

<pre caption="UTF-8ロケールの作成">
<comment>("en_GB"をあなたの望むロケールに変更してください)</comment>
# <i>localedef -i en_GB -f UTF-8 en_GB.utf8</i>
</pre>

<p>
またUTF-8ロケールをインストールする他の方法として、<path>/etc/locales.build</path>ファイルにロケールを追加し、さらに<c>glibc</c>を<c>userlocales</c>USEフラグで再構築する方法があります。
</p>
  
<pre caption="/etc/locales.buildの該当行">
en_GB.UTF-8/UTF-8
</pre>

</body>
</section>
<section>
<title>ロケールの指定</title>
<body>

<p>
もしかするとUTF-8をシステム全体で使いたいと思うかもしれませんが、
筆者はrootユーザーでUTF-8を使用しないことをお薦めします。
システム全体で設定するかわりに、各ユーザーの<path>~/.profile</path>(または、
Cシェルを使用しているなら、<path>~/.login</path>)にロケールをセットするのがベストな方法です。
</p>

<note>
もしどのファイルを使うのかわからない場合には、<path>~/.profile</path>を使用してください。
また、以下のどのコードを使ったらいいかわからない場合には、Bourneシェルバージョンを使ってください。
</note>

<pre caption="ロケールの環境変数を設定(Bourneシェルバージョン)">
export LANG="en_GB.utf8"
export LC_ALL="en_GB.utf8"
</pre>

<pre caption="ロケールの環境変数を設定(Cシェルバージョン)">
setenv LANG "en_GB.utf8"
setenv LC_ALL "en_GB.utf8"
</pre>

<p>
さて、ログアウトしてから再度ログインして、この変更を適用してください。
全体の環境でこの設定を有効にしたいので、ログアウト、ログインするのが最適な方法です。
もしくは、少なくとも、<path>~/.profile</path>または<path>~/.login</path>を、
他のプロセスをスタートさせているコンソールで読み込んでください。
</p>

</body>
</section>
</chapter>

<chapter>
<title>アプリケーションのサポート</title>
<section>
<body>

<p>
Unicodeがソフトウェア界で勢いがついてきたころ、
プログラマーが日々使用していたC言語などでは、マルチバイトの文字セットは適していませんでした。
今日でさえ、UTF-8を正しく扱うことのできないプログラムがあります。
しかし、幸いなことに多くのプログラムはUTF-8を扱えるようになっています!
</p>

</body>
</section>
<section>
<title>NTFSやFATでのファイル名</title>
<body>

<p>
Linuxカーネルの設定メニューにはいくつかのNLSオプションがあります。
しかし大事なことは混乱しないことです！
おそらく、必要なことはUTF-8 NLSをカーネルに組み込むことと、デフォルトのNLSオプションをutf8にするだけです。
</p>

<pre caption="UTF-8 NLSのためのカーネル設定">
File Systems --&gt;
  Native Language Support --&gt;
    (utf8) Default NLS Option
    &lt;*&gt; NLS UTF8
    <comment>(お使いのFATファイルシステムやJoilet CD-ROMで使用している文字コードにも&lt;*&gt;を設定してください。)</comment>
</pre>

<p>
NTFSパーティションをマウントする予定があるなら、<c>nls=</c>オプションをマウント時に指定する必要があります。
詳しくは<c>man mount</c>を見てください。
</p>

<p>
ファイル名のエンコーディングを変更するには、<c>app-text/convmv</c>が便利です。
</p>

<pre caption="convmvの使用例">
# <i>emerge --ask app-text/convmv</i>
# <i>convmv -f current-encoding -t utf-8 filename</i>
</pre>

<p>
ファイルの<e>中身</e>を変更したい場合には、<c>glibc</c>に添付されている<c>iconv</c>を使用してください。
</p>

<pre caption="iconvの使用例">
<comment>(iso-8859-1を変換元の文字コードで置換してください)</comment>
<comment>(出力結果が正しいかどうか確認してください)</comment>
# <i>iconv -f iso-8859-1 -t utf-8 filename</i> 
<comment>(ファイルのコンバートを行うには、他のファイルを作成する必要があります)</comment>
# <i>iconv -f iso-8859-1 -t utf-8 filename > newfile</i>
</pre>

<p>
<c>app-text/recode</c>もまたこの目的で使うことができます。
</p>

</body>
</section>
<section>
<title>システムコンソールでの使用</title>
<body>

<impo>
コンソールでUnicodeを使うためには>=sys-apps/baselayout-1.11.9が必要です
</impo>

<p>
UTF-8をコンソールで有効にするために、<path>/etc/rc.conf</path>を編集し<c>UNICODE="yes"</c>とセットします。
そして、そのファイルのコメントを読むことも忘れないでください。
Unicodeをできるだけ利用する計画があるなら、十分な文字コードの範囲を持ったフォントを持つことが重要です。
</p>

<p>
<path>/etc/conf.d/keymaps</path>ファイルの中で定義されている<c>KEYMAP</c>変数にUnicodeキーマップを指定する必要があります。
これをするためには、単純に既に指定されているキーマップの先頭に-uを追加してください。 
</p>

<pre caption="/etc/conf.d/keymapsの設定例">
<comment>(ukをあなたのロケールに変更してください。)</comment>
KEYMAP="-u uk"
</pre>

</body>
</section>
<section>
<title>ncursesとSlang</title>
<body>

<note>
Slangをインストールしていない、または使用していない方は、この章を飛ばしてください。
</note>

<p>
<c>unicode</c>を<path>/etc/make.conf</path>にグローバルUSEフラグとして追加するのはよい方法です。
そして、<c>sys-libs/ncurses</c>と<c>sys-libs/slang</c>を必要なら再度mergeしてください。
</p>

<pre caption="ncursesとslangのemerge">
<comment>(worldファイルにこのライブラリが追加されるのを避けるために--oneshotオプションを使用します)</comment>
# <i>emerge --oneshot --verbose --ask sys-libs/ncurses sys-libs/slang</i>
</pre>

<p>
また、これらのライブラリにリンクされいてるパッケージを、このUSEの変更を有効にするために再度ビルドする必要があります。
このために使う<c>revdep-rebuild</c>ツールは、<c>gentoolkit</c>パッケージに含まれています。
</p>

<pre caption="ncursesまたはslangにリンクされているプログラムの再ビルド">
# <i>revdep-rebuild --soname libncurses.so.5</i>
# <i>revdep-rebuild --soname libslang.so.1</i>
</pre>

</body>
</section>
<section>
<title>KDEとGNOMEとXfce</title>
<body>

<p>
この３つのメジャなデスクトップ環境は完全にUnicodeをサポートしています。
また、このドキュメントで紹介した以上の設定も必要ありません。
これはグラフィックツールキット(QtまたはGTK+2)がUTF-8に対応しているからです。
また、これらのツールキット上で動くすべてのアプリケーションがUTF-8対応するはずです。
</p>

<p>
例外は、XlibとGTK+1です。GTK+1は、iso-10646-1 FontSpecが~/.gtkrcに書かれている必要があります(例えば<c>-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1</c>)。
また、XlibまたはXawを使用するアプリケーションに、FontSpecのようなものを与える必要があります。そうしないと動きません。
</p>

<note>
gnome1コントールセンターを使用していれば代わりに使うことができます。
どれかiso10646-1フォントをそこから選択してください。
</note>

<pre caption="~/.gtkrc(GTK+1用)を編集して、Unicode互換フォントを設定する">
style "user-font"
{
    fontset="-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1"
}
widget_class "*" style "user-font"
</pre>

<p>
アプリケーションがQTとGTK+2の両方のGUIをサポートしている場合、
Unicodeに関してはGTK+2の方が一般的に良いです。
</p>

</body>
</section>
<section>
<title>X11とフォント</title>
<body>

<impo>
<c>x11-base/xorg-x11</c>は、XFree86よりもUnicodeのサポートが良く、
<e>かなり</e>推奨されています。
</impo>

<p>
TrueTypeフォントはUnicodeをサポートしています。
また、Xorgに添付されて配布されているフォントの大部分には、文字に関するすばらしいサポートがあります。
しかし、明らかに、Unicodeに存在するすべての文字がそのフォント用に作成されたものではありません。
フォント(Bitstream Veraフォントセットを含む)をX用に東アジア文字を含めてビルドするためには、
<c>cjk</c>USEフラグがセットされているか確認する必要があります。
他の多くのアプリケーションも<c>cjk</c>USEフラグを使用しますので、
恒久的なUSEフラグとしてセットしておくといいかもしれません。
</p>

<p>
また、いくつかのUnicodeに対応したフォントパッケージがPortageにはあります。
</p>

<pre caption="任意選択: Unicode対応フォントのインストール">
# <i>emerge terminus-font intlfonts freefonts cronyx-fonts corefonts</i>
</pre>

</body>
</section>
<section>
<title>ウインドウマネージャとターミナルエミュレータ</title>
<body>

<p>
GTKまたはQtを使用していないウインドウマネージャは、フォントを扱うためにXftを使用していることが多いので、
Unicodeを非常にうまく使うことができます。

あなたが使用中のウインドウマネージャがXftを使用していない場合には、
前章で紹介したFontSpecをUnicodeフォントとして使用することができます。
</p>

<p>
Xftを使用し、Unicodeをサポートしているターミナルエミュレータを見つけるのはもっと大変です。
Konsoleとgnome-terminalは別として、Portageでの最良の選択肢は、
<c>x11-terms/rxvt-unicode</c>、 <c>xfce-extra/terminal</c>、
<c>gnustep-apps/terminal</c>、 <c>x11-terms/mlterm</c>、 <c>x11-terms/mrxvt</c>、
または、<c>unicode</c> USEフラグ付きでビルドされ、<c>uxterm</c>として起動された<c>x11-terms/xterm</c>があります。
また、<c>app-misc/screen</c>もUTF-8をサポートしてますが、<c>screen -u</c>で起動するか、または以下の行を<path>~/.screenrc</path>に追加する必要があります。
</p>

<pre caption="UTF-8のための~/.screenrc">
defutf8 on
</pre>

</body>
</section>
<section>
<title>Vim、Emacs、Xemacs、Nano</title>
<body>

<p>
Vim、Emacs、Xemacsは完全にUTF-8をサポートしています。
また、UTF-8ファイルの自動認識機能も組み込まれています。
Vimでの、さらに詳しい情報は<c>:help mbyte.txt</c>を使用してください。
</p>

<p>
Nanoは現在のところUTF-8をサポートしていませんが、長い間計画はあがっています。
幸運にも、これは将来的には変わるでしょう。
この執筆時点で、NanoのCVSではUTF-8がサポートされていて、次のリリースには含まれるはずです。
</p>

</body>
</section>
<section>
<title>シェル</title>
<body>

<p>
現在のところ、<c>bash</c>はGUN readlineライブラリを使用して、Unicodeをサポートしています。
zshユーザーには問題があります。zshでは、Unicodeがサポートされているところがありません。
しかし、マルチバイト文字セットのサポートを加えるための取り組みもあります。
</p>

<p>
csh、<c>tcsh</c>、<c>ksh</c>ではまったくUTF-8をサポートしていません。
</p>

</body>
</section>
<section>
<title>Irssi</title>
<body>

<p>
バージョン0.8.10から完全なUTF-8サポートがありますが、オプションをユーザーがセットする必要があります。
</p>

<pre caption="IrssiでUTF-8を使用する">
/set term_charset UTF-8
</pre>

<p>
ASCII文字以外のチャンネルではしばしばUTF-8以外の文字が使用されています。
その場合には、<c>/recode</c>コマンドによって、変換することができるかもしれません。
<c>/help recode</c>でさらなる情報を取得できます。
</p>

</body>
</section>
<section>
<title>Mutt</title>
<body>

<p>
MuttメールエージェントはUnicodeをサポートしています。
UTF-8をMuttで使用するためには、以下の行を<path>~/.muttrc</path>に追加してください。
</p>

<pre caption="UTF-8のための~/.muttrc">
set send_charset="utf8" <comment>(outgoing character set)</comment>
set charset="utf8"      <comment>(display character set)</comment>
</pre>

<note>
それでもまだ'?'がMuttにてメールの中に現れるかもしれません。
これは、そのユーザーが使用しているメールクライアントが、使用している文字セットを通知していないためです。
そのユーザーにメールクライアントを正しく設定してもらうようにお願いする以外に、解決の方法はありません。
</note>

<p>
さらなる情報は<uri
link="http://wiki.mutt.org/index.cgi?MuttFaq/Charset">Mutt WikiWiki</uri>にあります。
</p>

</body>
</section>
<section>
<title>テストする</title>
<body>

<p>
多くのUTF-8をテストするためのWebサイトがあります。

<c>net-www/w3m</c>、<c>net-www/links</c>、 <c>net-www/elinks</c>、 <c>net-www/lynx</c>や、
すべてのMozillaベースのブラウザ(Firefoxを含む)はUTF-8をサポートしています。
また、KonquerorとOperaもUTF-8をサポートしています。
</p>

<p>
テキストのみのブラウザを使用する場合には、Unicode対応のターミナルを使用してるかを必ず確認してください。
</p>

<p>
UTF-8で使用する記号または文字が使用中のフォントに含まれていないときには、
四角の中に文字または数字が入っているような文字が現れます。
UTF-8の文字の16進数コードが四角と一緒に表示されることもあります。
</p>

<ul>
  <li>
    <uri link="http://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html">W3C UTF-8テストページ</uri>
  </li>
  <li>
    <uri link="http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm">
    フランクフルト大学によるUTF-8テストページ</uri>
  </li>
</ul>

</body>
</section>
<section>
<title>入力方法</title>
<body>

<p>
<e>dead key</e>をキーボードにない文字を入力するために使用するできるかもしれません。
これは、右のAltキー(国によっては、AltGrキー)と、
リターンキーの左側にあるアルファベットではない部分のオプションキーを同時に押し、その後両方のボタンを離し、さらに文字を押すことにより行うことができます。
dead keyを使用すうことにより、文字を変更することができます。
また、AltGrキーともう一つのキーと同時にシフトキーを押すことによって、入力をさらに変化させることができます。
</p>

<p>
dead keyをXで有効にするには、それをサポートしているレイアウトが必要です。
多くのヨーロッパ仕様のレイアウトでは、デフォルトの働きを持ったdead keyが既に設置されています。
しかし、北米仕様のレイアウトではそうではありません。
レイアウトにより違いはありますが、一番簡単な解決方法は、例えば"us"ではなく、"en_US"をレイアウトとして使うことです。
レイアウトは次のように<path>/etc/X11/xorg.conf</path>で定義されています。
</p>

<pre caption="/etc/X11/xorg.confの一部分">
Section "InputDevice"
    Identifier "Keyboard0"
    Driver     "kbd"
    Option     "XkbLayout" "en_US" <comment>"us"ではなく</comment>
    <comment>(その他のXkbオプションがここに続きます )</comment>
EndSection
</pre>

<note>
この変更は北米仕様のレイアウトや他のdead keyが動作していないようなレイアウトを使用している場合にのみ適用が必要です。
ヨーロッパのユーザーは、そのままでdead keyが使えるはずです。
</note>

<p>
この変更はXサーバーをリスタートしたときに有効になります。
瞬時に変更を有効にするためには、<c>setxkbmap</c>ツールが使用できます。
例えば、<c>setxkbmap en_US</c>としてください。
</p>

<p>
おそらく、サンプル付きでdead keyについて説明するのが一番簡単な方法でしょう。
結果はロケールに依存しますが、考え方はロケールによらずに同一です。
この例はUTF-8を含んでいます。そのため参照するためには、
UTF-8としてこのページをブラウザで開き直すか、
UTF-8ロケールが既に設定されている必要があります。
</p>

<p>
AltGrと[を同時に押し、そして離します。その後でaを押すと'ä' が現れます。
AltGrと[を同時に押し、そして離します。その後でeを押すと'ë' が現れます。
AltGrと;を同時に押し、そして離します。その後でaを押すと'á' が現れます。
AltGrと;を同時に押し、そして離します。その後でeを押すと'á' が現れます。
</p>

<p>
AltGrとシフトと[を同時に押し、話します。そしてaを押すとスカンジナビアの'å' が現れます。
AltGrとシフトと[を同時に押し、[<e>だけ</e>をもう一度押すと、'˚'が現れます。
これはあるものに見えますが、これ(U+02DA)は角度記号(U+00B0)とは別のものです。
これはdead keyを使用して他のアクセントを表示させる働きです。
AltGrと[を押し、[だけを一度離してから、もう一度押します。
すると'¨' が現れます。
</p>

<p>
AltGrは、アルファベットキーだけと使用することもできます。
例えば、AltGrとmは、ギリシア文字の小文字muである'µ' を生成します。
</p>

</body>
</section>
<section>
<title>参考資料</title>
<body>

<ul>
  <li>
    <uri link="http://www.wikipedia.com/wiki/Unicode">WikipediaのUnicodeの項</uri>
  </li>
  <li>
    <uri link="http://www.wikipedia.com/wiki/UTF-8">WikipediaのUTF-8の項</uri>
  </li>
  <li><uri link="http://www.unicode.org">Unicode.org</uri></li>
  <li><uri link="http://www.utf-8.com">UTF-8.com</uri></li>
  <li><uri link="http://www.ietf.org/rfc/rfc3629.txt">RFC 3629</uri></li>
  <li><uri link="http://www.ietf.org/rfc/rfc2277.txt">RFC 2277</uri></li>
</ul>

</body>
</section>
</chapter>
</guide>
