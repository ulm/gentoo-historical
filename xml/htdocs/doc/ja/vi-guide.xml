<?xml version="1.0" encoding="UTF-8"?>

<guide link = "/doc/ja/vi-guide.xml">
<title>Learning vi -- the "cheatsheet" technique</title>
<author title="Author"><mail link="drobbins@gentoo.org">Daniel Robbins</mail></author>
<author title="Author"><mail link="stocke2@gentoo.org">Eric Stockbridge</mail></author>
<author title="翻訳"><mail link="a_murata@a2-design.jp">村田顕光</mail></author>
<abstract>このガイドは、学習過程を加速するカンニングペーパーを使用して、viの使い方をあなたに教えるでしょう。これは初心者の要求に応ずるviのための最初のガイドになるでしょう。</abstract>
<version>1.1</version>
<date>21 Apr 2003</date>
<!-- Original revision: 1.5 -->

<chapter>
<title>始めよう</title>
<section>
<title>イントロダクション</title>
<body>
<p>
このチュートリアルは強力なビジュアルエディターのひとつである、viの使用方法を紹介します。
特別に高速な"カンニングペーパー"テクニックを使って莫大な時間をかけずに
あなたを熟練のviユーザにするようにこのチュートリアルはデザインされています。
このチュートリアルで、あなたは、動き回る方法、テキストの編集方法、挿入モードの使用方法、
テキストのコピー、ペースト方法、またビジュアルモードやマルチウインドウ編集のような
重要なvimの拡張機能の使い方を学習していきます。
</p>
<p>
あなたがviをまったく知らないか、快適に使えていないのならば、このチュートリアルを使って
最も人気で強力なLinux/UNIXビジュアルエディタのプログラムを素早く修得しなければなりません。
</p>
        
</body>
</section>
<section>
<title>このガイドについて</title>
<title>viの速習</title>
<body>
<p>
特にviの修得を困難にさせることのひとつは、viに多くのコマンドがあることです。
viを効果的に使う為に、あなたはかなり多くのコマンドを記憶する必要があります。
これには非常に時間がかかりますが、このチュートリアルの目標の一つは多くの時間をかけない事です。
そう、まず、いかに正確にあなたを短期間で多くのコマンドを記憶させるか？が私たちの挑戦です。
</p>
<p>
この問題を解決する為に、このチュートリアルを通して、私たちは少しずつviの"カンニングペーパー"に
書き込んでいきます。このペーパーは重要なviのコマンドを全て含んでいます。
このチュートリアルが終了して、特定のコマンドを忘れたとしても、あなたはこのカンニングペーパーを
参照できるでしょう。時間が経つにつれ、あなたはコマンドを記憶し、
徐々にこのカンニングペーパーを必要としなくなるでしょう。
このカンニングペーパーテクニックで、あなたは以前より遥かに速くviの修得ができるでしょう。！</p>
</body>
</section>
<section>
<title>学習プロセス</title>
<body>

<p>このガイドの中で、私はあなたの学習のためにいくつかテクニックを使うつもりです。
あなたが推測するように、まず、特定のコマンドがどのように動くのか記述していきます。
それから、私はあなたにそのコマンドをviで（練習のために）試しに使ってみることを求めます。
そして、私はあなたにそのコマンドを（後から参照できるように）カンニングペーパーに書き写すことを求めます。
もしあなたがviを急速に学習したいのであれば、これらの全ての段階を踏むことは重要なことです。
viでコマンドを試し、そのコマンドをカンニングペーパーに書き写すことは、
あなたがそのコマンドを記憶することに役立つでしょう。</p>
</body>
</section>
<section>
<title>vimの紹介</title>
<body>

<p>viのヴァージョンは多数存在し、今回私はあなたに「vim」と呼ばれるバージョンのviの使用法を
紹介していきます。vimはとても人気があり、大変素晴らしい多くの拡張機能があります。
（私はいつでもvimの特別なコマンドを紹介できます。私はその素晴らしさを伝えられます。）
もし、vimをインストールする必要があれば、<uri href="http://www.vim.org">http://www.vim.org</uri>から取得できます。
さらに強力なコマンドラインのvi、vimまたはgvimは、素晴らしいgtk+guiのライブラリを
使って設定された素晴らしいグラフィカルなエディタです。これは私のシステムのスクリーンショットのgvimです。:</p>

<figure link="http://www.ibiblio.org/pub/Linux/distributions/gentoo/images/vishot.png" short="screenshot" caption="VIM screenshot"/>

<p>もしあなたがviの初心者なら、あなたのシステムでgvimを実行してみてください。
guiでviを使うことは初心者に対し少し簡単になります。</p>

</body>
</section>
</chapter>
<chapter>
<title>第一段階</title>
<section>
<title>ファイルを扱う</title>
<body>
<p>viでファイルの編集をする前にあなたはviでファイルの中の動き回る方法を知る必要があります。
viは多くの動作のコマンドがあり、それらの多くを紹介します。チュートリアルのこの部分の間、
重要でないテキストファイルを見つけ、以下のようにタイプしてviを起動します。:</p>
<pre>$ vi myfile.txt</pre>
<p>
もしあなたがvimをインストールしたのであれば、"vim myfile.txt"とタイプしてください。
gvimを使いたいならば、"gvim myfile.txt"とタイプします。myfile.txtはあなたのシステムのテキストファイルの
名前のことです。</p>
</body>
</section>

<section>
<title>viの内部</title>
<body>

<p>viの起動後、あなたは画面上に起動したテキストファイルの1部を目にするでしょう。おめでとう！、
あなたはviを使っています。多くのエディタと違ってviを起動した時、「コマンドモード」と呼ばれる
特別なモードになります。これはもし、キーの「I」を押してもファイルの現在のカーソル位置に
「I」が挿入される代わりに、カーソルが右に一文字分動くことを意味します。コマンドモードでは
キーボードの文字列は文章に文字を挿入するよりもむしろ、viに対しコマンドを送ることに使われます。
コマンドの多くの不可欠な形のひとつは動作コマンドです。さぁ、いくつか見てみましょう。</p>

</body>
</section>
</chapter>
<chapter>
<title>動き回る</title>
<section>
<title>viでの移動その１</title>
<body>

<p>コマンドモードでは<c>h</c>,<c>j</c>,<c>k</c>と<c>l</c> キーを使ってカーソルの左、下、上と右を移動します。
もしviの最新バージョンを使っているなら矢印キーを使うことも可能です。<c>h</c>,<c>j</c>,<c>k</c>と<c>l</c>
キーは快適なので手元で、キーボードのホームポジションから指を移動することなくファイルの中を動き回ることができます。
<c>h</c>,<c>j</c>,<c>k</c>と<c>l</c>(そして矢印キー)を使ってテキストファイルを動き回ってみましょう。
<c>h</c>を使うまでは最初の行にいます。viは<c>h</c>キーをタイプして前の行を"wrap　around"しないこと、
最初の文字にいる間は注意してください。行の最後にいても<c>l</c>キーで次の行に"wrap around"できないことも同様です。
</p>

</body>
</section>
<section>
<title>viでの移動その２</title>
<body>

<p>viには現在行の開始位置か最後にジャンプするショートカットがあります。
<c>0</c>(zero)キーを押すと行の先頭にジャンプでき、そして<c>$</c>キーで行の最後にジャンプできます。
実際にやってみてください。viはとても多くのハンディな移動コマンドがあるので、
（moreやlessコマンドのような）巨大な"pager"になります。
viを"pager"のように使うことであなたはとても素早く移動コマンドを習得するでしょう。</p>

<p>あなたは<c>&lt;CTR&gt;F</c>と<c>&lt;CTR&gt;B</c>で一度にページの前と後ろに移動することもできます。
最近のバージョンのvi（vimも含む）は「PGUP」と「PGDOWN]キーを使って同じことができます。</p>

</body>
</section>
<section>
<title>単語の移動その１</title>
<body>
<p>viはまた単語のインクリメントによる左右の移動もできます。次の単語の<i>先頭</i>の文字に移動するには
<c>w</c>を押します。次の単語の<i>最後</i>の文字に移動するには、<c>e</c>を押します。
<i>前の</i>単語の先頭に移動するには、<c>b</c>を押します。実践してみましょう。</p>
</body>
</section>

<section>
<title>単語の移動その２</title>
<body>
<p>単語の移動コマンドで遊んだ後、viは"foo-bar-oni"のような単語を５つの離れた単語として扱うことに
気が付いたことでしょう。これはデフォルトでviが空白<i>または</i>punctuationによって制限しないためです。
foo-bar-oniはそこで"foo","-","bar","-","oni"という５つの単語であるとみなされます。</p>
<p>時々、このことはあなたの要求に応えるでしょうし、また要求に合わないでしょう。
幸運にもviには大きい単語の概念があります。viは<i>空白や新しい行だけ</i>による大きい単語制限はしません。
これはつまりfoo-bar-oniがviの５つの単語であるとみなされる時に、ひとつのviの大きな単語であるとみなされます。</p>

</body>
</section>
<section>
<title>単語の移動その３</title>
<body>
<p>次の前の大きい単語を飛び回る為に、あなたは<i>大文字</i>の単語移動コマンドが使用できます。
次の単語の最初の文字にジャンプするには<c>W</c>を使い、次の大単語の最後にジャンプするには<c>E</c>を使い、
そして前の大単語の先頭にジャンプするには<c>B</c>を使います。やってみてください、そして、
それらの違いを理解するまで、単語のマッチングや、大単語の移動コマンドを比較しなさい。</p>
</body>
</section>
<section>
<title>もっと大きく移動</title>
<body>
<p>私たちは、カンニングペーパーに書き込む前にもう少し、コマンドを覚えましょう。
あなたは前や次のセンテンスの先頭に移動するために<c>(</c>と<c>)</c>の文字を使用できます。
さらに現在のパラグラフの先頭や次のパラグラフの先頭にジャンプするのに <c>{</c>や<c>}</c>を使うことができます。
それらを試してみましょう。</p>

</body>
</section>
</chapter>
<chapter>
<title>終了</title>
<section>
<title>終了</title>
<body>
<p>私たちは基本的な移動コマンドを学習しましたが、まだ覚える必要があるいくつかのコマンドがあります。
<c>:q</c>とタイプするとviを終了できます。もし終了できない場合には、何らかの方法でファイルを修正したと
思われます。viを終了する場合、変更を破棄するなら<c>:q!</c>とタイプします。コマンドプロンプトで今やって見ましょう。
</p>

<p>viでは":" で開始する全てのコマンドは<i>ex-mode</i>のコマンドです。なぜなら、viは<e>ex</e>と呼ばれる非ビジュアルエディタを埋め込んでいるからです。それはsedに似た行ベースの編集に使います。さらに先程のように終了する為に使います。コマンドモード中に<c>Q</c>キーをタイプした場合、exモードに変更されます。
この場合、この : プロンプトに続けてエンターキーをタイプすると画面の上にスクロールします。
viモードに戻るには単にviとタイプしてエンターキーを押します。</p>

</body>
</section>
</chapter>
<chapter>
<title>カンニングペーパー</title>
<section>
<title>カンニングペーパーの開始</title>
<body>
<p>私たちはたくさんのコマンドを学習してきました、さぁ、カンニングペーパーにそれらを書き込みましょう。
カンニングペーパーにはUSの便箋かA4サイズの用紙を用意して下さい。（私たちはそこにたくさんの情報を詰め込みます。）
私たちが今まで学習してきた全てのコマンドを書き写したカンニングペーパーの画像がここにあります。
一枚の紙に全て収まるようにできるだけ私のレイアウト通りに書き写して下さい。</p>

<figure link="http://www.ibiblio.org/pub/Linux/distributions/gentoo/images/vicheat-first.png" short="First part of the cheat sheet" caption="Cheat Sheet"/>

</body>

</section>
<section>
<title>vi関連諸々</title>

<body>
<p>私たちの急速なコマンド学習ペースを続けましょう。コマンドモードで<c>G</c>をタイプすることにより、
指定した行にジャンプできます。ファイルの先頭行にジャンプするには、<c>1G</c>とタイプします。
<c>G</c>は大文字であることに注意しなさい。</p>
<p>次の指定した文字のパターンの場所にジャンプするには、<c>/&lt;regexp&gt;</c>とタイプして<c>enter</c>を押します。
&lt;regexp&gt;をあなたの検索したい正規表現に置き換えてください。正規表現の使い方がわからなくても
焦らないでください・・・<c>/foo</c>とタイプすると、次の<i>foo</i>の場所に移動します。
注意しなければならないことは、<i>^</i>、<i>.</i>、<i>$</i>、や<i>\</i>の文字についてです。
これらの文字の前にはバックスラッシュ(<i>\</i>)を付けて、セットしてみて下さい。
例えば、<c>/foo\.gif</c>は次の"<i>foo.gif</i>"の場所を検索します。</p>
<p>次の検索を繰り返すには<c>n</c>をタイプして下さい。戻る検索を繰り返すには<c>N</c>をタイプします。
常にこれらのコマンドの動作を自分のviエディタで確認してください。<c>//</c>とタイプすると最後まで検索を繰り返します。</p>

</body>
</section>
</chapter>
<chapter>
<title>保存、編集する</title>
<section>
<title>保存、名前を付けて保存する</title>
<body>
<p>私たちはviを終了するのに<i>ex</i>コマンドである<c>:q</c>を使うことを学習しました。
変更（修正）を保存したい場合は<c>:w</c>とタイプします。
修正を別のファイルで保存するときは<c>:w filename.txt</c>とタイプすると、<e>filename.txt</e>として保存されます。
保存して終了するときは<c>:x</c>か<c>:wq</c>とタイプします。</p>
<p>vim（そして他の進化したelvisのようなviエディタ）では、<c>:w</c>は複数のバッファを一度に開くことができます。
新しいウインドウにファイルを開くには<c>:sp filename.txt</c>とタイプします。
<e>filename.txt</e>は新しく分割されたウインドウに編集用に開かれます。 
ウインドウ同士を切り換えるには<c>&lt;CTR&gt;w&lt;CTR&gt;w</c>を２回押します。
<c>:q</c>、<c>:q!</c>、<c>:w</c>と<c>:x</c>は現在アクティブなウインドウに反映されます。</p>
</body>
</section>

<section>
<title>単純な編集</title>
<body>
<p>今こそ単純なコマンドのいくつかを学習する時です。私たちがここで学習するコマンドは
コマンドモードですので"簡単"です。より複雑な編集コマンドはあなたをキーボードから文字の入力を
許可する挿入モードに自動的にします。私たちはそれらについて少しだけ学習します。</p>
<p>今度はいくつかの文字の上を動き<c>x</c>を繰り返しタイプしてください。
<c>x</c>がカーソルの下の現在の文字を削除するのが見えるでしょう。
今度はテキストファイルの中のどこかの段落の中に移動し、大文字の<c>J</c>をタイプして下さい。
あなたは<c>J</c>コマンドが現在の行を前の行の後ろに結合しているのを見るでしょう。
今度は、文字の上の移動し、<c>r</c>を押し、そしてそして新しい文字をタイプします。
あなたは元の文字が置き換えられるのが見えるでしょう。 最後は、ファイルの中のどこかの行に移動し、
<c>dd</c>とタイプします。<c>dd</c>がテキストの現在行を削除します。</p>

</body>
</section>
<section>
<title>繰り返す、削除する</title>
<body>
<p>どんな編集コマンドも<c>.</c>キーをタイプすると繰り返すことができます。慣れてくると
<c>dd...</c>が４行削除し、<c>J......</c>は４行結合するでしょう。
大抵、viはハンディなショートカットがあります。
</p>
<p>テキストを削除するのに<c>d</c>コマンドと他のどんな移動コマンドとも組み合わせて使用できます。
例えば、<c>dw</c>は現在の位置から次の単語の最初まで削除します。<c>d)</c>は次のセンテンスの最後まで削除し、
そして<c>d}</c>はパラグラフの残りを削除します。快適に使えるようになるまで
<c>d</c>コマンドと他の編集コマンドの組み合わせに慣れてください。</p>
</body>
</section>
<section>
<title>やり直す!</title>
<body>
<p>さぁ、削除になれてきましたので、どんな修正をもやり直す方法を学習する丁度いい時期です。
<c>u</c>をタイプするとオリジナルバージョンのviは最後の変更だけやり直すことができます。
しかし、vimのような最近のバージョンのviは<c>u</c>を繰り返しタイプしてファイルの変更のやり直し
を何度も続けてできます。<c>d</c>や<c>u</c>コマンドを組み合わせて結合してみましょう。</p>
</body>
</section>

<section>
<title>カンニングペーパーの更新</title>
<body>
<p>カンニングペーパーを更新する時間です。今まで学習してきたすべてのコマンドを追加するとこのようになります。
:</p>

<figure link="http://www.ibiblio.org/pub/Linux/distributions/gentoo/images/vicheat-edit.png" short="Cheat sheet" caption="Cheat sheet with editing commands"/>

</body>
</section>
</chapter>
<chapter>
<title>挿入モード</title>
<section>
<title>挿入モード</title>

<body>
<p>今まで私たちはviの中での移動、ファイルの入出力、基本的な編集操作方法を学習してきました。
しかし、まだフリーフォームテキストに実際にタイプする方法は教えていません。これは敢えてしませんでした。
なぜならviの挿入モードは最初は少し複雑だからです。しかし、挿入モードに慣れた後、
その複雑さと柔軟性は長所になるでしょう。</p>
<p>viの挿入モードは他の多くのヴィジュアルエディタのように直接画面に入力できます。
修正モードになっても、エスケープキーでコマンドモードに戻ることができます。
<c>i</c>か<c>a</c>を押して挿入モードにできます。<c>i</c>を押すと現在のカーソルの前に<e>挿入</e>され、
<c>a</c>を押すと現在のカーソルの後に<e>追加</e>されます。テキスト入力が終わり、
<c>&lt;ESC&gt;</c>キーを押すとコマンドモードに戻ることはお忘れなく。</p></body>
</section>
<section>
<title>挿入モードの利点</title>
<body>
<p>次に<c>a</c>や<c>i</c>を使ってみよう。<c>a</c>か<c>i</c>のどちらかを押し、何か文章をタイプして、
それからESCを押しコマンドモードに戻ってみましょう。<c>a</c>や<c>i</c>を押した後、
<c>&lt;ENTER&gt;</c>を押して何が起きるか見てみましょう。矢印キーや<c>&lt;DEL&gt;</c>を使うことで
挿入モードを繰り返し切り換えることなく編集できます。</p>
</body>
</section>
<section>
<title>挿入オプション</title>
<body>
<p>他にもいくつか挿入モードに切り換える方法があります。大文字の<c>A</c>を押すと
現在の行の<e>最後</e>の位置に追加できます。 同じように大文字の<c>I</c>では現在行の<e>先頭</e>に追加できます。
<c>o</c>を押すと現在行の下に新しい空白行を追加し、大文字の<c>O</c>を押すと現在行をの上に新しい行を追加します。
現在行の全部を新しい行に置き換えるには<c>cc</c>を押します。行の現在地から最後まで全てを置き換えるには
<c>c$</c>をタイプします。行の現在地から先頭まで全てを置き換えるには<c>c0</c>を押します。</p>
<p>さらに、特別な操作をする為に、これらのコマンドはそれぞれ、挿入モードになります。
テキストのタイプ後、<c>&lt;ESC&gt;</c>でコマンドモードに戻ります。</p>

</body>
</section>
<section>
<title>テキストを修正する</title>
<body>
<p>私たちは今まで<c>cc</c>、<c>c0</c>や<c>c$</c>などの<c>c</c>(変更)コマンドを少しだけ使ってきました。
<c>cc</c>は<c>dd</c>に似て特別な修正コマンドの形式です。<c>c0</c>と<c>c$</c>は移動コマンドとの
コンビネーションとして修正コマンドを使う例です。このように<c>c</c>は<c>d</c>と似たような動きをします、
挿入モードから切り換えない限りあなたはテキストを削除したところと置き換えることができます。
いくつかの移動コマンドと<c>c</c>を組み合わせてみましょう。そしてあなたのファイルで試してみましょう。
(ヒント: <c>cW</c>、<c>ce</c>、<c>c(</c>。)
</p>

</body>
</section>
</chapter>
<chapter>
<title>コンパウンドコマンド</title>
<section>
<title>コンパウンドコマンド</title>
<body>
<p>viはあなたが<c>d{</c>や<c>cw</c>のような組み合わせ("combo")コマンドを使い始めたとき、
<e>本当に</e>強力になります。これらのコマンドはさらに、あなたは<c>3w</c>のように
どんな移動コマンドにも数字と組み合わせることができます。（viは３つの単語をジャンプします。）
いくつかの"combo"コマンドの例があります: <c>12b</c>、<c>4j</c>。</p>
<p>viは、さらに(数字)(移動コマンド)の組み合わせもできます 、また <c>d</c>や<c>c</c>も
数字や移動コマンドと組合わせることができます。つまり、<c>d3w</c>は次の３つの単語を削除し
<c>d2j</c>はは現在行と次の２行を削除します。いくつか<c>c</c>と<c>d</c>の組み合わせで、
viの編集がどれほど強力で簡潔か実感してみましょう。 一旦これらのコマンドに慣れると、
目覚しい速さでファイル編集ができるようになるでしょう。</p>

</body>
</section>
<section>
<title>カンニングペーパーの更新</title>
<body>
<p>再び、カンニングペーパーの更新をする時間です。今まで学習してきたことがここにあります。:</p>
<p>
	<figure link="http://www.ibiblio.org/pub/Linux/distributions/gentoo/images/vicheat-compound.png" short="Cheat Sheet" caption="Cheat sheet with compound commands"/>

</p>
</body>
</section>
<section>
<title>生産性の特徴</title>

<body>
<p>今まで私たちはとのように移動するか、保存、終了するか、単純な編集や削除ができるか、
そして挿入モードについて学習してきました。今までカンニングペーパーに表示されている全てで、
あなたはほとんどの作業をviでこなせるでしょう。</p>
<p>しかし、viはさらに強力なコマンドがあります。この段落では、<e>切り取り</e>、
<e>コピー</e>そして<e>貼り付け</e>, <e>検索</e> and <e>置換</e>, and use <e>オートインデント</e>
の特徴についてを学習するでしょう。これらのコマンドはviをより楽しく生産的にします。</p>

</body>
</section>
<section>
<title>ビジュアルモード</title>
<body>
<p>切り取りや貼り付けの1番最善の方法はvimやelvisのようなviの最近のバージョンに追加された
特別なモードのビジュアルモードを使うことです。あなたはビジュアルモードを「反転テキスト」モード
のように考えることができます。一旦反転されたテキストはコピー、削除、貼り付けが可能です。
もしあなたがgvimを使っているのならば特定の場所でマウスの左ボタンで単にドラッグするだけで反転できます。:</p>
<p>
<figure link="http://www.ibiblio.org/pub/Linux/distributions/gentoo/images/vihighlight.png" short="Highlighted text" caption="VIM with highlighted text"/>

</p>
</body>
</section>
<section>
<title></title>
<body>

<p>さらに、<c>v</c>をタイプしてビジュアルモードになります。(これはコンソールからviを使っているときだけの
オプションかもしれません)次に移動コマンドでカーソルを移動し（矢印キー）、あなたはテキストのエリアを
反転できます。 反転されたら、私たちはテキストの切り取りやコピーの準備ができています。
</p>

<p>もし、テキストをコピーするなら、<c>y</c>タイプします (ｙは"yank"の意)。もしテキストを切り取るなら、
<c>d</c>をタイプします。あなたはコマンドモードに戻るでしょう。これであなたが、切り取りや、
コピーしたテキストを挿入したい位置に移動し<c>P</c>を押してカーソルの後に挿入し、
<c>p</c>を押してカーソルの前に挿入できます。これで、切り取り、コピー、貼り付けができました。
次の章に進む前にいくつかのコピー切り取り貼り付けの操作を試してみましょう。
</p>

</body>
</section>
<section>
<title>テキストを置換える</title>
<body>
<p>テキストを置き換えるには<e>ex</e>モードを使用します。もし、現在行で出現する最初のパターンを
置き換えたい場合はtype <c>:s/&lt;regexp&gt;/&lt;replacement&gt;/</c> をタイプし、<c>&lt;ENTER&gt;</c>を押します。
&lt;regexp&gt;はマッチさせるパターンで、&lt;replacement&gt;は置き換える文字です。
現在行のすべてのマッチするものを置換えるには<c>:s/&lt;regexp&gt;/&lt;replacement&gt;/g</c>とタイプし
エンターを押します。ファイルの全てを置き換えるには(たいていあなたがやりたいでしょう)、
<c>:%s/&lt;regexp&gt;/&lt;replacement&gt;/g</c>とします。もし、全部の置換でそれぞれの変更を確認したい場合は、
<c>:%s/&lt;regexp&gt;/&lt;replacement&gt;/gc</c>(comformの意)とし、<c>&lt;ENTER&gt;</c>を押します。</p>

</body>
</section>
<section>
<title>インデント</title>
<body>
<p>viにはあなたがソースコードを編集する時のためにオートインデント機能があります。
vimのような最近のバージョンのviの多くは、あなたがソースファイルで編集しているとき
オートインデントモードに自動で有効になります。（例えば.ｃファイルです）
オートインデントが有効の時、あなたは<c>&lt;CTR&gt;d</c> (control-d)で左にインデント移動でき、
<c>&lt;CTR&gt;t</c> (control-t)で右にインデントできます。
もし、オートインデント機能が自動で有効にならなかった場合、あなたはコマンドの<e>ex</e><c>:set</c>を
タイプして手動で有効にできます。あなたはまた、<c>:set tabstop</c>コマンドでタブサイズを
好みの設定に変更できます。;<c>:set tabstop=4</c>がとても人気です。</p>

</body>
</section>
<section>
<title>私たちの最後のカンニングペーパー</title>
<body>
<p>さぁ、私たちはviのチュートリアルの最後になりました。
あなたのカンニングペーパーにすべての進化した編集コマンドを追加するとこのようになるでしょう。:</p>
<p>
<figure link="http://www.ibiblio.org/pub/Linux/distributions/gentoo/images/vicheat-final.png" short="Cheat Sheet" caption="Final cheet sheet"/>

</p>

<p>カンニングペーパーを常に持ち、viでファイルの編集やメールの作成を始めましょう。
必要なときにカンニングペーパーを参照しなさい。あなたは1週間以内にほぼ全てのコマンドを記憶し、
viの生産性は抜群にあがることに気が付くでしょう。</p>

</body>
</section>
<section>
<title>参考資料</title>
<body>
<p>ここにあなたが、さらにviについて学習を続けていくのに役立ついくつかの資料があります。:</p>
<ul>
<li><uri link="http://www.thomer.com/thomer/vi/vi.html">The vi Lovers Home Page</uri>、
素晴らしい全てのviについてのの資料</li>
<li><uri link="http://www.vim.org">The vim homepage</uri> はあなたのvimに必要なものがすべてあります。</li>
<li>もしあなたがお勧めの本を探しているのなら<uri link="http://www.oreilly.com/catalog/vi6/">
Learning the vi Editor, 6th Edition</uri> は良い選択になるはずです。viとviのクローンの使い方を含んでいます。</li>
</ul>
</body>
</section>
</chapter>
</guide>

