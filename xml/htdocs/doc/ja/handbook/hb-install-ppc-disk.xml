<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/handbook/hb-install-ppc-disk.xml,v 1.1 2005/03/28 16:55:28 idani Exp $ -->

<!-- Translator: Yuta SATOH -->
<!-- Original revision: 1.27 -->

<sections>

<version>1.22</version>
<date>2005-02-20</date>

<section>
<title>ブロックデバイス入門</title>
<subsection>
<title>ブロックデバイス</title>
<body>

<p>
Linuxファイルシステム、パーティション、ブロックデバイスを含めて、Gentoo LinuxとLinux全般でのディスクに適している側面を詳しく見て行きましょう。そして、ディスクとパーティションの一部始終を理解してもらった上で、Gentoo Linuxのインストールの為にパーティションとファイルシステムのセットアップの手順を案内します。
</p>

<p>
初めに、<e>ブロックデバイス</e>を紹介します。おそらく最も有名なブロックデバイスはLinux上では1番目のIDEドライブ、すなわち<path>/dev/hda</path>を指しているものでしょう。もし、あなたのシステムがSCSIドライブを使っているなら, 1番目のハードディスクは<path>/dev/sda</path>になるでしょう。
</p>

<p>
上記のブロックデバイスはディスクへの抽象的インターフェイスを表しています。ユーザープログラムはドライブがIDEやSCSIもしくは他のどんなものかどうかを気にする事無くディスクにアクセスできます。プログラムは簡単にディスク上の記憶領域をランダムアクセス可能な512バイト毎の連続した束としてアドレッシングできます。
</p>

</body>
</subsection>
<subsection>
<title>パーティションとスライス</title>
<body>

<p>
Linuxシステムを格納するのにディスクの全体を使用する事は理論上可能ですが、実際にはほとんどそうはされません。代わりにディスク全体のブロックデバイスはもっと扱いやすいブロックデバイスにより小さく分割されます。ほとんどのシステムではこれら分割されたものを<e>パーティション</e>と呼びます。別のアーキテクチャーは同様の手法を使い、<e>スライス</e>と呼びます。
</p>

</body>
</subsection>
</section>
<section>
<title>パーティション構成を計画する</title>
<subsection>
<title>通常のパーティション構成</title>
<body>

<p>
もしシステムのパーティション構成を編集するのに興味が無ければ、このハンドブックを通して使っているパーティション構成を使用できます。
</p>

<table>
<tr>
  <th>NewWorldの場合のパーティション</th>
  <th>OldWorldの場合のパーティション</th>
  <th>Pegasosの場合のパーティション</th>
  <th>ファイルシステム</th>
  <th>サイズ</th>
  <th>種別</th>
</tr>
<tr>
  <ti><path>/dev/hda1</path></ti>
  <ti>/dev/hda1</ti>
  <ti>(当てはまりません</ti>
  <ti>(Partition Map)</ti>
  <ti>32k</ti>
  <ti>Apple_partition_map</ti>
</tr>
<tr>
  <ti><path>/dev/hda2</path></ti>
  <ti>(必要ありません)</ti>
  <ti>(当てはまりません)</ti>
  <ti>(bootstrap)</ti>
  <ti>800k</ti>
  <ti>Apple_Bootstrap</ti>
</tr>
<tr>
  <ti><path>/dev/hda3</path></ti>
  <ti><path>/dev/hda2</path></ti>
  <ti><path>/dev/hda1</path></ti>
  <ti>(swap)</ti>
  <ti>512M</ti>
  <ti>スワップパーティション</ti>
</tr>
<tr>
  <ti><path>/dev/hda4</path></ti>
  <ti><path>/dev/hda3</path></ti>
  <ti><path>/dev/hda2</path></ti>
  <ti>ext3</ti>
  <ti>残りのディスク領域</ti>
  <ti>ルートパーティション</ti>
</tr>
</table>

<note>
次のように命名されたいくつかのパーティションがあります。<path>Apple_Driver43、Apple_Driver_ATA、Apple_FWDriver、Apple_Driver_IOKit、Apple_Patches</path>。もしMacOS 9を使用するつもりでなければ、MacOS XとLinuxはこれらを必要としないため削除することができます。まだmac-fdiskではこれらのパーティションを削除することができないので、これらを削除するためにpartedを使う必要があるかもしれません。
</note>

<p>
もしパーティションがどれぐらいのサイズにすればいいのか、どれだけの数のパーティションかにすべきかを知りたいのならば読み進んでください。そうでなければ、今から<uri link="#fdisk">一般的な選択: パーティション作成にmac-fdiskを使う (Apple/IBM)</uri>または<uri link="#parted">もう一つの選択: パーティション作成にpartedを使う (特にPegasosにおいて)</uri>に進んでください。
</p>

</body>
</subsection>
<subsection>
<title>パーティション数とその大きさ</title>
<body>

<p>
パーティションの数は環境に大きく依存します。例えば、多数のユーザーがいるのならセキュリティを強めバックアップを容易にする為に多分<path>/home</path>を別にしたいでしょう。もしメールサーバーとして稼働させる為にGentooをインストールしようとしているのなら、全てのメールは<path>/var</path>内に保存されるので<path>/var</path>は別にすべきでしょう。ファイルシステムの良い選択はパフォーマンスを最大限にするでしょう。ゲームサーバーではほとんどのゲームサーバーパッケージが<path>/opt</path>にインストールされるので、そこは別にされます。理由は<path>/home</path>をセキュリティとバックアップの為に別にするのと同じようなものです。
</p>

<p>
こういったように、どういうシステムにしたいのかにかなり依存します。分割されたパーティションまたはボリュームには以下の利点があります。
</p>

<ul>
<li>
  それぞれのパーティションまたはボリュームに最適なパフォーマンスを上げるファイルシステムを選択できます。
</li>
<li>
  パーティションを分けておくと、あるゾンビプロセスがパーティションまたはボリュームにデータを書き込み続けてシステム全体の空き容量を使い果たすのを防ぐ事が出来ます。
</li>
<li>
  必要ならば、並行した複数のチェックを行えるのでファイルシステムのチェック時間を減らせます。(この利点は複数のパーティションでよりも複数のディスクでより有効ですが)。
</li>
<li>
  セキュリティは読込専用、nosuid(setuidビットは無視されます)、noexec(実行ビットは無視されます)等でいくつかのパーティションをマウントする事で増大します。
</li>
</ul>

<p>
しかし、複数のパーティションには一つ大きな欠点があります。正しく設定しないと、空き容量がかなりあるパーティションと空き容量の無いパーティションのあるシステムになってしまうでしょう。また、SCSIとSATAでは15個迄というパーティション数の制限があります。
</p>

</body>
</subsection>
</section>
<section id="fdisk">
<title>一般的な選択: パーティション作成にmac-fdiskを使う (Apple/IBM)</title>
<body>

<p>
現時点では、パーティション作成に<c>mac-fdisk</c>を使います。
</p>

<pre caption="mac-fdiskの開始">
# <i>mac-fdisk /dev/hda</i>
</pre>

<p>
最初に、Linuxパーティションに場所を空けるため以前に作成したパーティションを削除してください。パーティションを削除するためにはmac-fdiskの中でdを使用してください。それは、削除するパーティション番号を尋ねます。通常、NewWorldマシンの最初のパーティション(Apple_partition_map)は削除することができません。
</p>

<p>
次に、bを使って<e>Apple_Bootstrap</e>を作成してください。それは、どのブロックから始めるか尋ねます。先に空いているパーティション番号を入力し、その後に続けてpを入力します。例えば、これは<c>2p</c>です。
</p>

<note>
このパーティションは「ブート」パーティションでは<e>ありません</e>。これはLinuxによって全く使用されません。つまり、どんなファイルシステムも配置する必要はありませんし、これをマウントするべきではありません。PPCユーザーは<path>/boot</path>のための余分のパーティションを必要としません。
</note>

<p>
それから、cを押してスワップパーティションを作成してください。再び、<c>mac-fdisk</c>はどのブロックからこのパーティションを始めるか尋ねます。以前に私たちがApple_Bootstrapを作成するために<c>2</c>を使用したので、今は<c>3p</c>を入力する必要があります。サイズを尋ねられた時は、<c>512M</c>(または望んでいるどんなサイズでも -- 512MBを推奨しますが)を入力してください。名前を尋ねられた時は、<c>swap</c>(必須です)を入力してください。
</p>

<p>
ルートパーティションを作成するためには、ルートパーティションがどのブロックから始まるべきであるかを選ぶために、<c>c</c>を入力した後に続けて<c>4p</c>を入力してください。サイズを尋ねられた時は、再び<c>4p</c>を入力してください。<c>mac-fdisk</c>はこれを「使用可能なスペースを全て使用してください」と解釈するでしょう。名前を尋ねられた時は、<c>root</c>(必須です)を入力してください。
</p>

<p>
完了するためには、<c>w</c>を使ってパーティションをディスクに書き、<c>q</c>を使って<c>mac-fdisk</c>を終了してください。
</p>

<note>
全く問題がないことを確かめるために、もう一度mac-fdiskを実行し、すべてのパーティションがそこにあるかどうかを調べるべきです。もし、作成したパーティションまたは行った変更のいずれかを見ないならば、mac-fdiskにおいて「i」を押してパーティションの再初期化をするべきです。これがパーティションマップを再作成し、それからすべてのパーティションを取り去るということに注意してください。
</note>

<p>
これでパーティションが作成されましたので、<uri link="#filesystems">ファイルシステムの作成</uri>に進む事ができます。
</p>

</body>
</section>
<section id="parted">
<title>もう一つの選択: パーティション作成にpartedを使う (特にPegasosにおいて)</title>
<body>

<p>
パーティションエディタである<c>parted</c>は現在、Mac OSやMac OS Xで使われるHFS+パーティションを処理することができます。このツールであなたのMacパーティションを縮小し、Linuxパーティションのためのスペースを作成することができます。Macについての説明ばかりをしましたが、以下の例はPegasosマシン向けのみのパーティションの作成についての説明になります。
</p>

<p>
さあ<c>parted</c>を実行しましょう。
</p>

<pre caption="partedを起動する">
# <i>parted /dev/hda</i>
</pre>

<p>
もしドライブが区切られていなければ、<c>mklabel amiga</c>を実行して新しいディスクラベルをドライブに作成してください。
</p>

<p>
現在のパーティションテーブルを表示するために、いつでも<c>print</c>をpartedでの操作中に入力することができます。あなたがアプリケーションを終了するまで変更は保存されません。もしあなたの気が変わるかミスをしたら、いつでも<c>Ctrl-c</c>を押してpartedを中止させることができます。
</p>

<p>
もし、あなたがMorphOSも同様にPegasosへインストールするつもりなら、ドライブの最初に"BI0"(BI ゼロ)という名前のaffs1ファイルシステムを作成します。MorphOSカーネルを入れるために50MBもあれば十分です。もし、Pegasos Iを持っているか、reiserfsまたはxfsを使うつもりなら、同様にLinuxカーネルをこのパーティションに入れなければならないでしょう(Pegasos IIはext2およびext3ドライブからブートすることができます)。パーティションを作成するために<c>mkpart primary affs1 開始 終了</c>を実行します。コマンドの内、<c>開始</c>と<c>終了</c>はメガバイトによる範囲で置き換えられるべきです(例えば<c>5 55</c>は5MBから始まって55MBで終わる50MBのパーティションを作成します)。
</p>

<p>
あなたはLinuxのために2つのパーティションを作成する必要があります。全てのプログラムファイルなどのためのルートファイルシステムを1つと、スワップパーティションが1つです。ルートファイルシステムを作成するために、あなたは最初にどのファイルシステムを使うか決める必要があります。可能なオプションはext2、ext3、reiserfs、そしてxfsです。どれにしたらいいか分からなければ、ext3を使ってください。ext3パーティションを作るために<c>mkpart primary ext3 開始 終了</c>を実行してください。繰り返しになりますが、<c>開始</c>と<c>終了</c>をメガバイトによる開始点と終了点に置き換えてください。
</p>

<p>
スワップパーティションをコンピュータのRAMの2倍のサイズで作成することは一般的に勧められています。同時にたくさんのアプリケーションを実行するつもりでなければ、恐らくより小さいスワップパーティションで大丈夫でしょう(少なくとも512MBを推奨しますが)。スワップパーティションを作成するために、<c>mkpart primary linux-swap 開始 終了</c>を実行してください。
</p>

<p>
インストール過程でパーティションのマイナー番号が必要になるので書き留めてください。マイナー番号を表示するには<c>print</c>を実行します。あなたのドライブはXがパーティションのマイナー番号に置き換えられた<path>/dev/hdaX</path>としてアクセスされます。
</p>

<p>
partedでの作業が終わったら、単に<c>quit</c>を実行してください。
</p>

</body>
</section>
<section id="filesystems">
<title>ファイルシステムを作成する</title>
<subsection>
<title>はじめに</title>
<body>

<p>
さてパーティションが作成されましたので、それぞれにファイルシステムを作成するときが来ました。 
もしファイルシステムを選ぶことに興味がなくて、このハンドブックのデフォルトのものを使うことで満足ならば、<uri link="#filesystems-apply">パーティションにファイルシステムを適用する</uri>に進んでください。そうでなければ利用可能なファイルシステムに関して知るために読み進めてください．．．。
</p>

</body>
</subsection>
<subsection>
<title>ファイルシステムとは</title>
<body>

<p>
いくつかのファイルシステムが利用可能です。ext2、ext3、およびXFSがPPCアーキテクチャーで安定していることが分かっています。jfsはサポートされません。そして、ReiserFSはまだppc上でいくつかの問題を持っているので、まだサポートされていません。
</p>

<p>
<b>ext2</b>は実証済みで真のLinuxファイルシステムですがメタデータジャーナリングを持ちません。これは起動時の定期のext2ファイルシステムのチェックにかなりの時間が掛かることもあるということです。現在、整合性のチェックをとても早く終わらせることのできる次世代のジャーナリングファイルシステムの選択肢があります。そのために一般的には非ジャーナリングファイルシステムより好まれています。ジャーナリングファイルシステムはファイルシステムの不整合状態の発生やシステム起動時の大幅な遅延を防ぎます。
</p>

<p>
<b>ext3</b>はfull data及びordered dataジャーナリングの様に他の優れたジャーナリングモードに加えて素早い回復のためのメタデータジャーナルを提供するext2ファイルシステムのジャーナル化バージョンです。ext3はとても信頼できる良いファイルシステムです。ほとんど全ての状況下で高いパフォーマンスを上げることができるハッシュ化されたb-treeインデックスの追加オプションがあります。要するにext3は素晴らしいファイルシステムということです。
</p>

<p>
<b>ReiserFS</b>は全般的にとても良い性能であり、小さいファイル(4k以下のファイル)を扱うときはext2やext3よりもとてもときには10-15倍の高い性能を発揮するB*-ツリーベースのファイルシステムです。またReiserFSはとても良くできていて、メタデータジャーナリングを持ちます。カーネル2.4.18以降では、 ReiserFSは一般的な目的と大規模ファイルシステムの作成、たくさんの小さいファイルの利用、とても大きいファイルや大多数のファイルが含まれるディレクトリなどを扱う極端なケースにも堅実で使用に適しています。あいにく、ReiserFSはまだppc上でいくつかの問題を持っています。私達は、このファイルシステムを使うことを奨励しません。
</p>

<p>
<b>XFS</b>は強健な特徴を持ち、拡張性に最適化されたメタデータジャーナリングを持つファイルシステムです。Linuxでのこのファイルシステムの使用はSCSI/ファイバーチャンネル記憶装置と無停電電源供給をもつ高機能なシステム以外はお勧めしません。XFSは積極的にRAM上に処理中のデータをキャッシュするので、 不適切な設計のプログラム(ディスクにファイルを書き込むときに適切な注意を取らないもの。そういったものは非常に少ないですが)では、不意ににシステムがダウンしたとき、かなりのデータを失う可能性があります。
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>パーティションにファイルシステムを適用する</title>
<body>

<p>
パーティションやボリュームにファイルシステムを作成するには、それぞれのファイルシステムに合った利用可能なツールがあります。
</p>

<table>
<tr>
  <th>ファイルシステム</th>
  <th>作成コマンド</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
</table>

<p>
例えば、ルートパーティション(この例では<path>/dev/hda4</path>)をext3(今回の例として)にするには、以下の様にします。
</p>

<pre caption="パーティションにファイルシステムを適用する">
# <i>mke2fs -j /dev/hda4</i>
</pre>

<p>
さあ新しく作成されたパーティション(もしくは論理ボリューム)にファイルシステムを作成しましょう。
</p>

<note>
OldWorldマシンとPegasosIIでは、カーネルを入れるパーティションはext2またはext3でなければなりません。NewWorldマシンはext2、ext3、XFS、ReiserFS、そしてHFS/HFS+ファイルシステムからでも起動することができます。
</note>

</body>
</subsection>
<subsection>
<title>スワップパーティションを有効にする</title>
<body>

<p>
<c>mkswap</c>はスワップパーティションを初期化するのに使うコマンドです。
</p>

<pre caption="スワップパーティションを初期化する">
# <i>mkswap /dev/hda3</i>
</pre>

<p>
スワップパーティションを有効にするには<c>swapon</c>を使用します。
</p>

<pre caption="スワップパーティションを有効にする">
# <i>swapon /dev/hda3</i>
</pre>

<p>
上に記載されたコマンドでスワップを作成し、有効にしてください。
</p>

</body>
</subsection>
</section>
<section>
<title>マウント</title>
<body>

<p>
さてパーティションが初期化されてファイルシステムが収まったので、それらのパーティションをマウントするときが来ました。<c>mount</c>というコマンドを使います。作成したそれぞれのパーティション用にマウントに必要なディレクトリを作成するのを忘れないでください。例ではルートパーティションをマウントします。
</p>

<pre caption="パーティションをマウントする">
# <i>mkdir /mnt/gentoo</i>
# <i>mount /dev/hda4 /mnt/gentoo</i>
</pre>

<note>
もし<path>/tmp</path>を別のパーティションとして置きたいのであれば、マウント後に <c>chmod 1777 /mnt/gentoo/tmp</c>という風にパーミッションを変更するのを忘れないでください。これは<path>/var/tmp</path>も同様です。
</note>


<p>
procファイルシステム(カーネルとの仮想インターフェイス)も<path>/proc</path>にマウントする必要があります。しかし、最初にパーティション上に色々なファイルを置く必要があります。
</p>

<p>
<uri link="?part=1&amp;chap=5">Gentooインストールファイルをインストールする</uri>に進みましょう。
</p>

</body>
</section>
</sections>
