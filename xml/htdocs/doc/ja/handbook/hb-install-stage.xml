<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/handbook/hb-install-stage.xml,v 1.22 2011/08/24 21:29:57 naota Exp $ -->
<!-- Original revision: 1.123 -->
<!-- Translator: takeda,nakano,matsuba,naota -->

<sections>

<abstract>
Gentooのインストールはstage3のアーカイブで行います。
この章ではどのようにstage3アーカイブを展開して、Portageを設定するかを説明します。
</abstract>

<version>11</version>
<date>2011-08-03</date>

<section>
<title>stage tarballのインストール</title>
<subsection>
<title>日時を正確に設定する</title>
<body>

<p>
先に進める前に、日時をチェックして、更新しておく必要があります。
狂った時計は後でおかしな結果が起きる元になります。
</p>

<p>
現在の日時を確認するには、<c>date</c>を実行してください。
</p>

<pre caption="日時を確認する">
# <i>date</i>
Fri Mar 29 16:21:18 UTC 2005
</pre>

<p>
もし表示された日時が間違っていたら、<c>date MMDDhhmmYYYY</c>を使って更新してください。
構文としては、(<b>M</b>onth(月)、<b>D</b>ay(日)、<b>h</b>our(時)、<b>m</b>inute(分)、<b>Y</b>ear(年)を表しています)。現在のところ、UTC時間を使用すべきです。自分のタイムゾーンに、後で設定することができます。例えば、2005年3月29日 16:21を設定したい場合には以下のように実行します。
</p>

<pre caption="UTC日時の設定">
# <i>date 032916212005</i>
</pre>

</body>
</subsection>
<subsection>
<title>stageの選択</title>
<body>

<p>
次のステップとして、<e>stage3</e>tarballをシステムにインストールする必要があります。
必要なtarballをインターネットからダウンロードするか、一般的なGentoo UniversalCDから起動しているなら、ディスクからコピーすることができます。
多くの場合、どのstageファイルをダウンロードすればいいのかを判断するのには、<c>uname -m</c>コマンドの結果が役に立つでしょう。
</p>

<p>
Minimal CDや LiveDVD はstage3アーカイブを含みません。
</p>


<ul test="not(contains('AMD64 x86', func:keyval('arch')))">
<li><uri link="#doc_chap2">一般的な選択: インターネットからダウンロードしたstageを使う</uri></li>
<li><uri link="#doc_chap3">もう一つの選択: Universal CDのstageを使う</uri></li>
</ul>

</body>
</subsection>
</section>
<section>
<title>一般的な選択: インターネットからダウンロードしたstageを使う</title>
<subsection>
<title>stagetarballのダウンロード</title>
<body>

<p>
Gentooをインストールしようとしているファイルシステムのマウントポイントに移動してください。
(大概は、次の場所です。<path>/mnt/gentoo</path>)
</p>

<pre caption="インストール先のマウントポイントに移動">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
インストールに使用している媒体によりますが、stageをダウンロードするツールが2、3用意されています。
もし<c>links</c>が使用可能なら、すぐにでも<uri link="/main/en/mirrors.xml">the Gentoo mirrorlist</uri>にアクセスして、最寄のミラーを選択することができます。
<c>links http://www.gentoo.org/main/en/mirrors.xml</c>と入力してエンターを押してください。
</p>

<p>
もし<c>links</c>が使えない場合には、<c>lynx</c>を一時的に使用できるでしょう。
proxyを使う必要がある場合には、<c>http_proxy</c>と<c>ftp_proxy</c>を設定してください。
</p>
 
<pre caption="lynxでのproxy情報の設定">
# <i>export http_proxy="http://proxy.server.com:port"</i>
# <i>export ftp_proxy="http://proxy.server.com:port"</i>
</pre>
  
<p>
ここから先は<c>links</c>が使用できると仮定して説明してきます。
</p>

<p>
お近くのミラーを選んでください。通常はHTTPのミラーで十分ですが、他のプロトコルのミラーもあります。
<path><keyval id="release-dir"/></path>ディレクトリにアクセスしてください。あなたのアーキテクチャ(もしかしたら、それらは個別のサブアーキテクチャ名のディレクトリ配下に置かれているかもしれません)
ひとつを選んで、<c>D</c>をおしてダウンロードしましょう。ダウンロードが完了したら、<c>Q</c>を押してブラウザを終了させます。
</p>

<p test="'x86'=func:keyval('arch')">
ほとんどのPCユーザは<b><keyval id="stage3"/></b>stage3アーカイブを使うでしょう。
最近のPCはすべてi686と見なされます。もし古いマシンを使っているなら、
WikiPediaの<uri link="http://en.wikipedia.org/wiki/I686">i686互換のプロセッサー一覧</uri>でチェックできます。
Pentium、K5、K6やVia C3のような古いプロセッサーはさらに一般的な<b>x86</b> stage3が必要です。
<b>i486</b>より古いプロセッサーはサポートされていません。
</p>

<pre caption="linksでミラーリストを見る">
# <i>links http://www.gentoo.org/main/en/mirrors.xml</i>
<comment>(linkでproxyが必要な場合)</comment>
# <i>links -http-proxy proxy.server.com:8080 http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

<p>
<b>stage3</b>のtarballをダウンロードするようにして下さい。今後stage1またはstage2を用いたインストールはサポートされません。
</p>

<p>
ダウンロードしたstage tarballの正当性を評価したいなら、
<c>md5sum</c>を使って、その出力とミラーで配布されているMD5チェックサムを比較してください。
</p>

<pre caption="stage tarballの正当性のチェック">
# <i>md5sum -c <keyval id="stage3"/>.DIGESTS</i>
<keyval id="stage3"/>: OK
</pre>

</body>
</subsection>
<subsection>
<title>stage tarballの展開</title>
<body>

<p>
さぁ、それではダウンロードしたstageをシステムに展開しましょう。
もっとも簡単な方法として、<c>tar</c>を使います。
</p>

<pre caption="stageの展開">
# <i>tar xvjpf stage3-*.tar.bz2</i>
</pre>

<p>
上記と同様のオプション(<c>xvjpf</c>)を必ず使うようにしてください。<c>x</c>は<e>アーカイブの展開</e>、
<c>v</c>は<e>展開中に何が起こっているのかを表示</e>(これは、任意です)、<c>j</c>は<e>bzip2の解凍</e>、
<c>p</c>は<e>パーミッションの保存</e>、そして<c>f</c>は、標準入力からではなく、ファイルから展開することを表しています。
</p>

<!-- MIPS は専用のhb-install-stage.xmlを使用、他のarchは?
<note>
いくつかのアーキテクチャ(例えばMIPS)では、
インストールCDとbootイメージはBusyBoxに組み込まれたtarを使用します。
このtarは現在のところ<c>v</c>オプションをサポートしてません。
代わりに<c>xjpf</c>オプションを使用して下さい。
</note>
-->

<p>
これでstageはインストールされました。<uri
link="#installing_portage">Portageのインストール</uri>へ進みましょう。
</p>

</body>
</subsection>
</section>
<section test="not(contains('AMD64 x86', func:keyval('arch')))">
<title>もう一つの選択: インストールCDのstageを使う</title>
<subsection>
<title>stage tarballの展開</title>
<body>

<p>
stageは、CD内の<path>/mnt/cdrom/stages</path>ディレクトリにあります。
どんなstageがあるかは、<c>ls</c>コマンドを使って見ることができます。
</p>

<pre caption="どんなstageがあるか調べる">
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
もし、システムがエラーを返してきたら、CD-ROMを先にマウントする必要があるかもしれません。
</p>

<pre caption="CD-ROMをマウントする">
# <i>ls /mnt/cdrom/stages</i>
ls: /mnt/cdrom/stages: No such file or directory
# <i>mount /dev/cdroms/cdrom0 /mnt/cdrom</i>
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
それでは、Gentooのマウントポイントに移動しましょう(通常は<path>/mnt/gentoo</path>です)。
</p>

<pre caption="/mnt/gentooにディレクトリを移動する">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
あなたが選択したstage tarballを展開します。
これには <c>tar</c>を使います。次の例と同様のオプション(<c>xvjpf</c>)を必ず使うようにしてください。
<c>v</c>オプションは任意ですし、使用する<c>tar</c>のバージョンによってはサポートされていません。
次の例では、stage taballとして<path>stage3-&lt;subarch&gt;-&lt;release&gt;.tar.bz2</path>を展開しています。
あなたが選んだstage tarballのファイル名に適宜読み替えてください。
</p>

<pre caption="stage tarballの展開">
# <i>tar xvjpf /mnt/cdrom/stages/stage3-&lt;subarch&gt;-&lt;release&gt;.tar.bz2</i>
</pre>

<p>
これでstageがインストールされました。<uri
link="#installing_portage">Portageのインストール</uri>へ進みましょう。
</p>

</body>
</subsection>
</section>
<section id="installing_portage">
<title>Portageのインストール</title>
<subsection>
<title>Portageスナップショットの展開</title>
<body>

<p>
ここでPortageスナップショット(これは、どのようなソフトウェアをインストールできるか、またどのようなprofileがあるのか、と言った情報が入った複数のファイルのことです)をインストールする必要があります。
</p>

</body>
</subsection>
<subsection id="installing_from_Internet">
<title>Portageスナップショットをダウンロードし、インストール</title>
<body>

<p>
あなたのファイルシステムにマウントした場所へ行ってください(多くの場合<path>/mnt/gentoo</path>)。
</p>

<pre caption="マウントポイントへ移動">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
<c>links</c>(または<c>lynx</c>)を起動し、
<uri link="/main/en/mirrors.xml">Gentoo mirror list</uri>へ行ってください。
そしてあなたのいる場所に近いミラーを選択してから、<path>snapshots/</path>ディレクトリを開いてください。
そこで、最新のPortageスナップショット(<path>portage-latest.tar.bz2</path>)を選択して、<c>D</c>キーを押してダウンロードしてください。
</p>

<pre caption="Gentooミラーリストの参照">
# <i>links http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

<p>
次に、<c>Q</c>キーを押してブラウザを終了させます。
これで、Portageスナップショットが<path>/mnt/gentoo</path>に保存されているでしょう。
</p>

<p>
ダウンロードしたスナップショットの完全性を確認したい時は、<c>md5sum</c>を使用し、
その出力と、ミラーから提供されているMD5チェックサムとを比較します。
</p>

<pre caption="Portageスナップショットの完全性の確認">
# <i>md5sum -c portage-latest.tar.bz2.md5sum</i>
portage-latest.tar.bz2: OK
</pre>

<p>
次にこのPortageスナップショットをあなたのファイルシステム上で展開します。
次のコマンドを実行する際には、最後のオプションが小文字の<c>c</c>ではなくて、
大文字の<c>C</c>であることに注意してください。
</p>

<pre caption="Portageスナップショットの展開">
# <i>tar xvjf /mnt/gentoo/portage-latest.tar.bz2 -C /mnt/gentoo/usr</i>
</pre>

</body>

</subsection>
</section>

<section id="compile_options">
<title>コンパイルオプションの設定</title>
<subsection>
<title>はじめに</title>
<body>

<p>
Gentooを最適化するために、Portageの振る舞いに影響を与えるいくつかの変数を設定することができます。
これらの変数は、すべて(<c>export</c>を使用して)環境変数として設定することも可能ですが、
環境変数は永続的なものではありません。設定を保存しておくために、Portageの設定ファイル<path>/etc/make.conf</path>があります。
これが今から編集するファイルです。
</p>

<note>
設定可能なすべての変数は、<path>/mnt/gentoo/usr/share/portage/config/make.conf.example</path>にコメント付きで列挙されています。
Gentooのインストールを成功させるには、次に挙げられている変数を設定するだけでよいです。
</note>

<p>
あとで話題にする最適化のための変数を編集するために、
好みのエディタを立ち上げてください(このガイドでは<c>nano</c>を使います)。
</p>

<pre caption="/etc/make.confを開く">
# <i>nano -w /mnt/gentoo/etc/make.conf</i>
</pre>

<p>
おそらく気づいていると思いますが、<path>make.conf.example</path>ファイルは、
他の設定ファイル同様の構造をしています(訳注:bashスクリプトと同じ作法です)。
"#"で始まる行はコメントで、その他の行には、<c>VARIABLE="content"</c>という構文で変数を定義します。
いくつかの変数については、次の節で話題にします。
</p>

</body>
</subsection>
<subsection>
<title>CFLAGSとCXXFLAGS</title>
<body>

<p>
<c>CFLAGS</c>と<c>CXXFLAGS</c>変数には、それぞれ、CおよびC++コンパイラである<c>gcc</c>に対する最適化のためのフラグを定義します。
ここでは、一般的なものを定義しますが、それぞれのプログラムごとに最適なフラグを使うことで、
最高のパフォーマンスを出すことが可能となります。
これは、それぞれのプログラムが異なっていることによります(訳注:プログラムごと、
アーキテクチャごとにパフォーマンスへの考慮や設計が異なり、フラグによってどれだけ最適化されるかということは、プログラムによって異なると言うこと。)
</p>

<p>
<path>make.conf</path>には、<e>一般的には</e>システム全体の動作を損なわない範囲で最善の最適化フラグを定義すべきです。
この変数に、実験的な設定をしないでください。
過剰な最適化はプログラムの動作をおかしくします(クラッシュや誤動作の元です)。
</p>

<p>
すべての最適化オプションを説明はしません。
そのすべてを知りたいなら、<uri link="http://gcc.gnu.org/onlinedocs/">GNU
Online Manual(s)</uri>や<c>gcc</c>のinfo(<c>info gcc</c> -- このコマンドは既に稼動しているLinuxシステムでのみ動作します)を読んでください。
<path>make.conf.example</path>ファイルにもたくさんの例や情報が含まれています。
こちらも忘れずに読んでください。
</p>

<p test="not(contains('AMD64 x86', func:keyval('arch')))">
始めに<c>-march=</c>か<c>-mtune=</c>フラグを設定してください。
これには、ターゲットとするアーキテクチャの名前を指定します。
どんなオプションを設定できるかは、<path>make.conf.example</path>ファイルに(コメントとして)書かれています。
</p>

<p test="contains('AMD64 x86',func:keyval('arch'))">
始めに<c>-march=</c>か<c>-mtune=</c>フラグを設定してください。
これには、ターゲットとするアーキテクチャの名前を指定します。
どんなオプションを設定できるかは、<path>make.conf.example</path>ファイルに(コメントとして)書かれています。
</p>

<p>
次に、<c>-O</c>フラグ(これは、大文字のOで、ゼロではありません)を設定します。
これは、<c>gcc</c>の最適化クラスのフラグです。
<c>s</c>(サイズの最適化)、<c>0</c>(最適化なし)、そして、スピードの最適化フラグ<c>1</c>、<c>2</c>、さらに<c>3</c>までが指定できます(各クラスは、この順番により強い最適化を行います。より強い最適化をするクラスは、弱い最適化クラスと同様の効果を持ちつつ、追加の最適化を行います)。
<c>-O2</c> が推奨されたデフォルト指定です。<c>-O3</c>をシステム全体で使用した場合には、問題が発生することが分かっていますので、<c>-O2</c>にとどめておくことをお勧めします。
</p>

<p>
他の人気がある最適化フラグとして<c>-pipe</c>(コンパイル時の様々な段階間の情報のやり取りに、テンポラリファイルではなくパイプを使うようにします)があります。
これは生成されるコードには影響しませんが、より多くのメモリが使われます。メモリが少ないシステムでは、gccが終了してしまうかもしれません。
そういった場合には、このフラグを使わないでください。
</p>

<p>
<c>-fomit-frame-pointer</c>(必要ない関数に対するレジスタ内のフレームポインタを保持しません)を使うと、
アプリケーションのデバッグが非常に困難になります。
</p>

<p>
<c>CFLAGS</c>と<c>CXXFLAGS</c>を定義するとき、
それぞれの最適化オプションは同じものを使うべきです。
展開したstage3アーカイブに含まれるデフォルトの設定は十分に最適化されています。
下記の例は、あくまで例です。
</p>

<pre test="not(contains('AMD64 arm',func:keyval('arch')))" caption="CFLAGS変数とCXXFLAGS変数の設定">
CFLAGS="<keyval id="CFLAGS"/>"
<comment># 両方の変数に同じ値を使います</comment>
CXXFLAGS="${CFLAGS}"
</pre>

<pre test="func:keyval('arch')='AMD64'" caption="CFLAGS変数とCXXFLAGS変数の設定">
CFLAGS="<keyval id="CFLAGS"/>"   <comment># Intel EM64Tユーザーは-march=core2を使用します</comment>
<comment># 両方の変数に同じ値を使います</comment>
CXXFLAGS="${CFLAGS}"
</pre>

<pre test="func:keyval('arch')='arm'" caption="CFLAGS変数とCXXFLAGS変数の設定">
CFLAGS="<keyval id="CFLAGS"/>   <comment># -marchをCPUの種類にあわせて必ず変更してください</comment>
<comment># 両方の変数に同じ値を使います</comment>
CXXFLAGS="${CFLAGS}"
</pre>

<note>
様々なコンパイルオプションがどのようにシステムに影響を及ぼしうるかしるために、<uri>link="/doc/en/gcc-optimization.xml">Compilation Optimization Guide</uri>（未訳）を見てみるのもよいでしょう。
</note>

</body>
</subsection>
<subsection>
<title>MAKEOPTS</title>
<body>

<p>
<c>MAKEOPTS</c>には、パッケージをインストールするときに、
いくつ平行してコンパイルを走らせるかを定義します。
あなたのシステムのCPU数(またはCPUコア数)に1を加えた数を指定するのが賢明ですが、これは目安であり常にそれが最善であるというわけではありません。
</p>

<pre caption="一般的な、CPUが1個のシステムに対するMAKEOPTSの設定">
MAKEOPTS="-j2"
</pre>

</body>
</subsection>
<subsection>
<title>さぁ準備ができました。次へ進みましょう!</title>
<body>

<p>
<path>/mnt/gentoo/etc/make.conf</path>をあなたの好みに応じて編集し、保存してください。
(<c>nano</c>ユーザは、<c>Ctrl-X</c>を押します)
それでは、<uri link="?part=1&amp;chap=6">Gentooベースシステムのインストール</uri>へ進んでください。
</p>

</body>
</subsection>
</section>
</sections>
