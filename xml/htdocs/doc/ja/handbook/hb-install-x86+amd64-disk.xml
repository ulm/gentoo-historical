<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/handbook/hb-install-x86+amd64-disk.xml,v 1.6 2011/10/26 11:21:00 naota Exp $ -->

<!-- Original revision: 1.18 -->
<!-- Translator: Infonomad -->
<sections>

<abstract>
Gentooをインストールするためには、必要なパーティションを作らなくてはなりません。
この章では、これから使用できるようにディスクをパーティションで区切る方法を説明します。
</abstract>

<version>11</version>
<date>2011-10-17</date>

<section>
<title>ブロックデバイス入門</title>
<subsection>
<include href="hb-install-blockdevices.xml"/>
</subsection>
<subsection>
<title>パーティション</title>
<body>

<p>
Linuxシステムを格納するのにディスクの全体を使用することは理論上可能ですが、実際にはほとんどそうはされません。代わりにディスク全体のブロックデバイスはもっと扱いやすいブロックデバイスにより小さく分割されます。<keyval id="arch"/>システムではこれら分割されたものを<e>パーティション</e>と呼びます。
</p>

<p>
パーティションは以下の3つのタイプに分けられます。
<e>基本</e>、 <e>拡張</e>そして<e>論理</e>です。
</p>

<p>
<e>基本</e>パーティションはMBR(マスターブートレコード)にその情報が格納されているパーティションです。MBRはとても小さい(512バイト)ので、4つの基本パーティションだけが定義できます。(例えば、<path>/dev/sda1</path>から<path>/dev/sda4</path>)です。
</p>

<p>
<e>拡張</e>パーティションはより多くのパーティションが含まれた特殊な基本パーティションです。(これは拡張パーティションは4つの基本パーティションの1つで無ければならないということです)。こういったパーティションは元々あった訳ではありません。しかし4つのパーティションでは少なすぎるので、下位互換性を損なうこと無く構成仕様を拡張する為に生まれたものです。
</p>

<p>
<e>論理</e>パーティションは拡張パーティション内のパーティションです。これらの定義はMBRの中ではなく、拡張パーティション内で宣言されています。
</p>

</body>
</subsection>
<subsection>
<title>高度な記憶領域</title>
<body>

<p>
<keyval id="arch"/>のインストールCDではLVM2のサポートを提供します。LVM2ではパーティション設定の柔軟性が増します。このインストールハンドブックでは、"通常"のパーティションに焦点を当てますが、LVM2もサポートされていることを知っておくのも良いことです。
</p>

</body>
</subsection>
</section>
<section>
<title>パーティション構成を計画する</title>
<subsection>
<title>通常のパーティション構成</title>
<body>

<p>
もしシステムのパーティション構成を編集するのに興味が無ければ、このハンドブックを通して使っているパーティション構成を使用できます。
</p>

<table>
<tr>
  <th>パーティション</th>
  <th>ファイルシステム</th>
  <th>サイズ</th>
  <th>種別</th>
</tr>
<tr>
  <ti><path>/dev/sda1</path></ti>
  <ti>ext2</ti>
  <ti>32M</ti>
  <ti>ブートパーティション</ti>
</tr>
<tr>
  <ti><path>/dev/sda2</path></ti>
  <ti>(swap)</ti>
  <ti>512M</ti>
  <ti>スワップパーティション</ti>
</tr>
<tr>
  <ti><path>/dev/sda3</path></ti>
  <ti>ext3</ti>
  <ti>残りのディスク領域</ti>
  <ti>ルートパーティション</ti>
</tr>
</table>

<p>
もしパーティション(もしくは論理ボリューム)がどれぐらいのサイズにすればいいのか、どれだけの数のパーティション(もしくはボリューム)かにすべきかを知りたいのならば読み進んでください。そうでなければ、今から<uri link="#fdisk">パーティション作成にfdiskを使う</uri>または<uri link="#parted">パーティション作成にpartedを使う</uri>を読みながら、ディスクのパーティション作成作業を進めてください。(どちらもパーティション編集ソフトです。<c>fdisk</c>は有名で安定しています。<c>parted</c>は少し最近のソフトですが2TB以上のサイズのパーティションもサポートしています。)
</p>

</body>
</subsection>
<subsection>
<title>パーティション数とその大きさ</title>
<body>

<p>
パーティションの数は環境に大きく依存します。例えば、多数のユーザーがいるのならセキュリテイを強めバックアップを容易にする為に多分<path>/home</path>を別にしたいでしょう。もしメールサーバーとして稼働させる為にGentooをインストールしようとしているのなら、全てのメールは <path>/var</path>内に保存されるので<path>/var</path>は別にすべきでしょう。ファイルシステムの良い選択はパフォーマンスを最大限にするでしょう。ゲームサーバーではほとんどのゲームサーバーパッケージが<path>/opt</path>にインストールされるので、そこは別にされます。理由は<path>/home</path>をセキュリティとバックアップの為に別にするのと同じようなものです。<path>/usr</path>は絶対に大きく取らなければならないです。大部分のアプリケーションが含まれるだけでなく、Portageツリーだけで、保存されるソースは別にしても500MB程度は取られます。
</p>

<p>
こういったように、どういうシステムにしたいのかにかなり依存します。分割されたパーティションまたはボリュームには以下の利点があります。
</p>

<ul>
<li>
  それぞれのパーティションまたはボリュームに最適なパフォーマンスを上げるファイルシステムを選択できます。
</li>
<li>
  パーティションを分けておくと、あるゾンビプロセスがパーティションまたはボリュームにデータを書き込み続けてシステム全体の空き容量を使い果たすのを防ぐことができます。
</li>
<li>
  必要ならば、並行した複数のチェックを行えるのでファイルシステムのチェック時間を減らせます。(この利点は複数のパーティションでよりも複数のディスクでより有効ですが)。
</li>
<li>
 セキュリティは読込専用、nosuid(setuidビットは無視されます)、noexec(実行ビットは無視されます)等でいくつかのパーティションをマウントすることで増大します。
</li>
</ul>

<p>
しかし、複数のパーティションにもいくつか欠点があります。
正しく設定しないと、空き容量がかなりあるパーティションと空き容量の無いパーティションのあるシステムになってしまうでしょう。
もうひとつやっかいなのはパーティション(特に<path>/usr</path>や<path>/var</path>といった大切なもの)が分かれていると、
initramfsを使ってブートスクリプトが実行される前に、パーティションをマウントするように設定しなければいけない、ということもあります。
とはいえ、これはどんな環境でも問題になるというわけではありません。
</p>

<p>
また、SCSIとSATAではGPTラベルを使わなければ15個迄というパーティション数の制限があります。
</p>

<p>
パーティション設定例として、ラップトップのデモ機(ウェブサーバー、メールサーバー、gnome等を含む)として使われている20GBのディスクを見ていただききましょう。
</p>

<pre caption="ファイルシステム使用例">
$ <i>df -h</i>
Filesystem    Type    Size  Used Avail Use% Mounted on
/dev/sda5     ext3    509M  132M  351M  28% /
/dev/sda2     ext3    5.0G  3.0G  1.8G  63% /home
/dev/sda7     ext3    7.9G  6.2G  1.3G  83% /usr
/dev/sda8     ext3   1011M  483M  477M  51% /opt
/dev/sda9     ext3    2.0G  607M  1.3G  32% /var
/dev/sda1     ext2     51M   17M   31M  36% /boot
/dev/sda6     swap    516M   12M  504M   2% &lt;not mounted&gt;
<comment>(将来使用のための未パーティション領域: 2 GB)</comment>
</pre>

<p>
<path>/usr</path>はここでかなりの量(83%使用)を占めていますが、一旦全てのソフトがインストールされると <path>/usr</path>はそんなに増えて行きません。<path>/var</path>に数ギガバイトのディスク容量を割り当てるのは多過ぎる様に思われますが、Portageシステムではパッケージをコンパイルするのに、標準でこのパーティションを使用する事を心に留めておいて下さい。もし<path>/var</path>を1GBのようなもっと適当なサイズにしておきたい場合は、OpenOfficeのような巨大なパッケージをコンパイルするのに十分な空き容量のあるパーティションを指すように、<path>/etc/make.conf</path>の<c>PORTAGE_TMPDIR</c>の値を変える必要があります。
</p>

</body>
</subsection>
</section>
<section id="fdisk">
<title>パーティション作成にfdiskを使う</title>
<subsection>
<body>

<impo>
2TB以上のパーティションを扱うようなシステムであれば、fdiskではなく<uri link="#parted">パーティション作成にpartedを使う</uri>の方法を使ってください。
<c>fdisk</c>は大きなパーティションを扱うことができません。
</impo>

<p>
以下の部分では<c>fdisk</c>を利用したパーティション設定の作成方法を説明します。
先に説明した通りのパーティションレイアウトを用います。
</p>

<table>
<tr>
  <th>パーティション</th>
  <th>種別</th>
</tr>
<tr>
  <ti><path>/dev/sda1</path></ti>
  <ti>ブートパーティション</ti>
</tr>
<tr>
  <ti><path>/dev/sda2</path></ti>
  <ti>スワップパーティション</ti>
</tr>
<tr>
  <ti><path>/dev/sda3</path></ti>
  <ti>ルートパーティション</ti>
</tr>
</table>

<p>
パーティションの割当てを自分の望むように変更してください。
</p>

</body>
</subsection>
<subsection>
<title>現在のパーティションの割当てを見る</title>
<body>

<p>
<c>fdisk</c>はディスクをパーティションに分割するのに高機能かつ普及しているツールです。
さあ<c>fdisk</c>を実行しましょう。(例では<path>/dev/sda</path>を使っています)。
</p>

<pre caption="fdiskを起動する">
# <i>fdisk /dev/sda</i>
</pre>

<p>
<c>fdisk</c>を起動すると、下記の様なプロンプトが出ます。
</p>

<pre caption="fdiskプロンプト">
Command (m for help): 
</pre>

<p>
現在のディスクのパーティション情報を表示するには<c>p</c>を入力します。
</p>

<pre caption="パーティション情報例">
Command (m for help): <i>p</i>

Disk /dev/sda: 240 heads, 63 sectors, 2184 cylinders
Units = cylinders of 15120 * 512 bytes

   Device Boot    Start       End    Blocks   Id  System
/dev/sda1   *         1        14    105808+  83  Linux
/dev/sda2            15        49    264600   82  Linux swap
/dev/sda3            50        70    158760   83  Linux
/dev/sda4            71      2184  15981840    5  Extended
/dev/sda5            71       209   1050808+  83  Linux
/dev/sda6           210       348   1050808+  83  Linux
/dev/sda7           349       626   2101648+  83  Linux
/dev/sda8           627       904   2101648+  83  Linux
/dev/sda9           905      2184   9676768+  83  Linux

Command (m for help): 
</pre>

<p>
このディスクの例では7つのLinuxファイルシステム("Linux"と表示されてた各パーテイション)とスワップ("Linux swap"と表示されたパーテイション)で構成するように設定されています。 
</p>

</body>
</subsection>
<subsection>
<title>全てのパーティションを削除する</title>
<body>

<p>
最初に現在の全てのパーティションをディスクから削除します。<c>d</c>を入力するとパーティションを削除します。例えば、現在の<path>/dev/sda1</path>を削除するには、以下のようにします。
</p>

<pre caption="パーティションを削除する">
Command (m for help): <i>d</i>
Partition number (1-4): <i>1</i>
</pre>

<p>
パーティションの削除準備ができました。これで<c>p</c>と入力してもパーティションは表示されませんが、変更が保存されるまで実際には削除されません。もし間違えてしまって変更を保存せずに取消たいときはすぐに<c>q</c>と入力し、エンターキーを押してください。これでパーティションは削除されません。
</p>

<p>
さあ、これでシステム上の全パーティションを削除したい！と思っているでしょう？パーティションを表示するのに<c>p</c>を、 削除するのに<c>d</c>とパーティション番号を繰り返し入力してください。最後にパーティションテーブルに何も無くなれば終了です。
</p>

<pre caption="空のパーティションテーブル">
Disk /dev/sda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System

Command (m for help):
</pre>

<p>
さて今はメモリー上のパーティション構成は空になりました。パーティションを作成する準備が整いました。先程検討したように、通常のパーティション構成を使うことにしましょう。同じパーティション構成にしたくなければ、当然ですがこのハンドブックの例の通りにしてはいけません。もちろん同じパーティション構成にしたくなければ、厳密に案内にならわないでください。
</p>

</body>
</subsection>
<subsection>
<title>ブートパーティションを作成する</title>
<body>

<p>
最初に小さなブートパーティションを作成します。新しいパーティションを作成するには<c>n</c>と入力します。そして基本パーティションを選択するのに<c>p</c>と入力するのに続き、1番目の基本パーティションを選択するのに<c>1</c>と入力します。最初のシリンダーが表示されると、エンターキーを押してください。最後のシリンダーが表示されたら、32Mバイトサイズののパーティションを作成するのに<c>+32M</c>と入力し、ブート可能(bootable)フラグをセットしてください。
</p>

<pre caption="ブートパーティションを作成する">
Command (m for help): <i>n</i>
Command action
  e   extended
  p   primary partition (1-4)
<i>p</i>
Partition number (1-4): <i>1</i>
First cylinder (1-3876, default 1): <comment>(エンターキーを押す)</comment>
Using default value 1
Last cylinder or +size or +sizeM or +sizeK (1-3876, default 3876): <i>+32M</i>
</pre>

<p>
さて、<c>p</c>と入力すれば以下のパーティションテーブル表示が見られるはずです。
</p>

<pre caption="作成されたブートパーティション">
Command (m for help): <i>p</i>

Disk /dev/sda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

   Device Boot    Start       End    Blocks   Id  System
/dev/sda1          1        14    105808+  83  Linux
</pre>

<p>
このパーティションをブート可能にする必要があります。このパーティションにブート可能フラグを付加するには<c>a</c>と入力します。もう一度<c>p</c>を入力すると、"Boot"欄に<path>*</path>が付いているのがわかるでしょう。
</p>

</body>
</subsection>
<subsection>
<title>スワップパーティションを作成する</title>
<body>

<p>
さあスワップパーティションを作成しましょう。この作業のためには、新規パーティションを作成するのに<c>n</c>、基本パーティションを選択するのに<c>p</c>を入力します. そして2番目の基本パーティション、この例では<path>/dev/sda2</path>を作成するのに<c>2</c>と入力します。最初のシリンダーが表示されると、エンターキーを押してください。最後のシリンダーが表示されたら、512Mバイトサイズののパーティションを作成するのに<c>+512M</c>と入力してください。この作業の後、パーティションタイプを設定するのに<c>t</c>と入力します。先程作成したパーティションを選択するのに<c>2</c>と入力して、このパーティションタイプを"Linux Swap"にする為に<c>82</c>と入力します。これらの手順が完了後、<c>p</c>を入力すれば下記のようなパーティションテーブルが表示されるはずです。
</p>

<pre caption="スワップパーティション作成後のパーティションテーブル">
Command (m for help): <i>p</i>

Disk /dev/sda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

   Device Boot    Start       End    Blocks   Id  System
/dev/sda1 *        1        14    105808+  83  Linux
/dev/sda2         15        81    506520   82  Linux swap
</pre>

</body>
</subsection>
<subsection>
<title>ルートパーティションを作成する</title>
<body>

<p>
最後にルートパーティションを作成しましょう。この作業のためには、新規パーティションを作成するのに<c>n</c>、基本パーティションを選択するのに<c>p</c>を入力します. そして3番目の基本パーティション、この例では<path>/dev/sda3</path>を作成するのに<c>3</c>と入力します。最初のシリンダーが表示されると、エンターキーを押してください。最後のシリンダーが表示されたら、ディスクの残りの空き容量を確保する為にエンターキーを押します。これらの手順が完了後、<c>p</c>を入力すれば下記のようなパーティションテーブルが表示されるはずです。
</p>

<pre caption="ルートパーティション作成後のパーティションテーブル">
Command (m for help): <i>p</i>

Disk /dev/sda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

   Device Boot    Start       End    Blocks   Id  System
/dev/sda1 *        1        14    105808+  83  Linux
/dev/sda2         15        81    506520   82  Linux swap
/dev/sda3         82      3876  28690200   83  Linux
</pre>


</body>
</subsection>
<subsection>
<title>パーティションの割当てを保存する</title>
<body>

<p>
パーティションの割当てを保存して、<c>fdisk</c>を終了するには<c>w</c>を入力します。
</p>

<pre caption="保存してfdiskを終了する">
Command (m for help): <i>w</i>
</pre>

<p>
これでパーティションが作成されましたので、<uri link="#filesystems">ファイルシステムの作成</uri>に進むことができます。
</p>

</body>
</subsection>
</section>
<section id="parted">
<title>パーティション作成にpartedを使う</title>
<subsection>
<body>

<p>
ここでは先に例にあげたようなレイアウトでパーティションを作成する方法について説明します。
前の章とは違い、この章では<c>parted</c>を使います。<c>parted</c>も<c>fdisk</c>もどちらもパーティションを作成するためのものですから、
すでに<c>fdisk</c>でパーティションを作成できているのであればこの部分を飛ばして<uri link="#filesystems">ファイルシステムの作成</uri>に進むことができます。
</p>

<p>
例として用いられるパーティションレイアウトは以下のようになっています。
</p>

<table>
<tr>
  <th>パーティション</th>
  <th>種別</th>
</tr>
<tr>
  <ti><path>/dev/sda1</path></ti>
  <ti>ブートパーティション</ti>
</tr>
<tr>
  <ti><path>/dev/sda2</path></ti>
  <ti>スワップパーティション</ti>
</tr>
<tr>
  <ti><path>/dev/sda3</path></ti>
  <ti>ルートパーティション</ti>
</tr>
</table>

<p>
パーティションの割当てを自分の望むように変更してください。
</p>

</body>
</subsection>
<subsection>
<title>現在のパーティションの割当てを見る</title>
<body>

<p>
<c>parted</c>は<c>fdisk</c>をいくらか新しくモダンにしたようなものです。
ディスクのパーティション設定を行なう簡潔なメニューを持ち、
非常に大きなパーティション(2TB以上)をサポートしています。
では、<c>parted</c>を起動してディスクのパーティションを設定しましょう。
(この例では<path>/dev/sda</path>を使います。)
</p>

<pre caption="partedの起動">
# <i>parted /dev/sda</i>
GNU Parted 2.3
Using /dev/vda
Welcome to GNU Parted! Type 'help' to view a list of commands.
</pre>

<p>
<c>parted</c>の全てのオプションを見るには<c>help</c>と入力してリターンキーを押してください。
とりあえずいまは<c>print</c>コマンドを使って、
選択したディスクの使用中のパーティションを表示します。
</p>

<pre caption="サンプルのパーティション設定のpartedによる表示">
(parted) <i>print</i>
Model: SCSI Block Device
Disk /dev/sda: 21.5GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos

Number  Start   End     Size    Type     File system     Flags
1      512B    2148MB  2148MB  primary  ext4
2      2148MB  3222MB  1074MB  primary  linux-swap(v1)
3      3222MB  21.5GB  18.3GB  primary                  lvm
</pre>

</body>
</subsection>
<subsection>
<title>自由選択: GPTラベルの設定</title>
<body>

<p>
x86/amd64のマシン上のほとんどのディスクはあらかじめ<e>msdos</e>ラベルを使ってパーティションされています。
しかし、大きなパーティション(2TB以上)を作ろうとしているのであれば、
<e>gpt</e>ラベル(<e>GUIDパーティションタイプ</e>)を使わなければいけません。
<c>parted</c>では<c>mklabel gpt</c>とすることでgptラベルを使うことができます。
</p>

<warn>
パーティションタイプを変更すると全てのパーティションがディスクから削除されます。
ディスク上の全てのデータが失われます。
</warn>

<pre caption="GPTラベルの設定">
(parted) <i>mklabel gpt</i>
</pre>

</body>
</subsection>
<subsection>
<title>全てのパーティションを削除する</title>
<body>

<p>
まだパーティションが(たとえば<c>mklabel</c>を事前にやっていたり、
ディスクが新しく一からフォーマットされたものであるなどによって)全て削除されていなければ、
最初に現在の全てのパーティションをディスクから削除します。
<c>rm &lt;number&gt;</c>とします。&lt;number&gt;は削除したいパーティションの番号です。
</p>

<pre caption="パーティションを削除する">
(parted) <i>rm 2</i>
</pre>

<p>
同様にして必要ない全てのパーティションを削除してください。しかし、ミスをしないように気をつけてください!
<c>parted</c>は変更をただちにディスクに反映します。(変更内容だけを記憶し、実際に保存したり終了したりする前に変更内容を「戻す」ことができる<c>fdisk</c>とは違う、というわけです)
</p>

</body>
</subsection>
<subsection>
<title>パーティションを作成する</title>
<body>

<p>
それでは先ほど述べたパーティションを作成していきましょう。
<c>parted</c>でのパーティション作成はそんなに難しくはありません。
以下の項目を<c>parted</c>に教えるだけです。
</p>

<ul>
  <li>
    使用する<e>パーティションの種類</e>。5つ以上のパーティションを作らない
    (そして<e>msdos</e>パーティションラベルを使う)場合は通常<e>プライマリ</e>になります。
    そうでない場合、4つ目のパーティションを残りのディスク領域を占める<e>拡張</e>パーティションとして作り、
    その中に<e>論理</e>パーティションを作ります。<e>gpt</e>ラベルのパーティションを使う場合、
    プライマリパーティションの数に制限はありません。
  </li>
  <li>
    使用する<e>ファイルシステムの種類</e>。<c>parted</c>はほとんどの有名なファイルシステムをサポートしており、
    パーティションにどんなパーティションIDを設定すればよいかも知っています。
    とはいえ、<c>parted</c>がファイルシステムを作成してくれるわけでは<e>ありません</e>。
    (<c>mkpartfs</c>を使ってファイルシステムを作成することもできますが、
    ここでは通常の<c>mkfs.*f</c>コマンドを使用します。) 
    このパーティションIDは自動検出するツールがどんなことをパーティションに行なえばよいのかを判断するのに使われます。
  </li>
  <li>
    パーティションの開始位置(MBまたはGBで指定できます)
  </li>
  <li>
    パーティションの終了位置(MBまたはGBで指定できます)
  </li>
</ul>

<p>
<c>parted</c>には、次の例でしめすように、パーティションのサイズを指定するだけで自動的に、
パーティションの開始位置と終了位置を計算してくれるという利点があります。
</p>

<pre caption="パーティションを作成する">
<comment># 32 mbyteの/bootパーティションを作成します</comment>
(parted) <i>mkpart primary ext2 0 32mb</i>
Warning: The resulting partition is not properly aligned for best performance.
Ignore/Cancel? <i>i</i>

<comment># 512 mbyteのswapパーティションを作成します</comment>
(parted) <i>mkpart primary linux-swap 32mb 542mb</i>

<comment># ディスクの残り全てを使うパーティションを作成します
# -1s (マイナス1 s)がディスクの終わりを意味しています</comment>
(parted) <i>mkpart primary ext4 542mb -1s</i>
Warning: You requested a partition from 542MB to 21.5GB.
The closest location we can manage is 542MB to 21.5GB.
Is this still acceptable to you?
Yes/No? <i>y</i>
</pre>

<p>
さて、これで<c>print</c>コマンドを再度実行してパーティションが全て思った通りに設定されているかどうかを確認できます。
うまくパーティションが設定されていれば、<c>quit</c>コマンドで<c>parted</c>を終了しましょう。
</p>

</body>
</subsection>
</section>
<section id="filesystems">
<title>ファイルシステムを作成する</title>
<subsection>
<title>はじめに</title>
<body>

<p>
さてパーティションが作成されましたので、それぞれにファイルシステムを作成するときが来ました。 
もしファイルシステムを選ぶことに興味がなくて、このハンドブックのデフォルトのものを使うことで満足ならば、<uri link="#filesystems-apply">パーティションにファイルシステムを適用する</uri>に進んでください。そうでなければ利用可能なファイルシステムに関して知るために読み進めてください．．．。
</p>

</body>
</subsection>
<subsection>
<include href="hb-install-filesystems.xml"/>
</subsection>
<subsection id="filesystems-apply">
<title>パーティションにファイルシステムを適用する</title>
<body>

<p>
パーティションやボリュームにファイルシステムを作成するには、それぞれのファイルシステムに合った利用可能なツールがあります。
</p>

<table>
<tr>
  <th>ファイルシステム</th>
  <th>作成コマンド</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mkfs.ext2</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mkfs.ext3</c></ti>
</tr>
<tr>
  <ti>ext4</ti>
  <ti><c>mkfs.ext4</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
例えば、 ブートパーティション(この例では<path>/dev/sda1</path>)をext2に、ルートパーティション(この例では<path>/dev/sda3</path>)をext3(今回の例として)にするには、以下の様にします。
</p>

<pre caption="パーティションにファイルシステムを適用する">
# <i>mkfs.ext2 /dev/sda1</i>
# <i>mkfs.ext3 /dev/sda3</i>
</pre>

<p>
さあ新しく作成されたパーティション(もしくは論理ボリューム)にファイルシステムを作成しましょう。
</p>

</body>
</subsection>
<subsection>
<title>スワップパーティションを有効にする</title>
<body>

<p>
<c>mkswap</c>はスワップパーティションを初期化するのに使うコマンドです。
</p>

<pre caption="スワップパーティションを初期化する">
# <i>mkswap /dev/sda2</i>
</pre>

<p>
スワップパーティションを有効にするには<c>swapon</c>を使用します。
</p>

<pre caption="スワップパーティションを有効にする">
# <i>swapon /dev/sda2</i>
</pre>

<p>
上記のコマンドでスワップを作成して有効にしましょう。
</p>

</body>
</subsection>
</section>
<section>
<title>マウント</title>
<body>

<p>
さてパーティションが初期化されてファイルシステムが収まったので、それらのパーティションをマウントするときが来ました。<c>mount</c>というコマンドを使います。作成したそれぞれのパーティション用にマウントに必要なディレクトリを作成するのを忘れないでください。例ではルートとブートパーティションをマウントします。
</p>

<pre caption="パーティションをマウントする">
# <i>mount /dev/sda3 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/sda1 /mnt/gentoo/boot</i>
</pre>

<note>
もし<path>/tmp</path>を別のパーティションとして置きたいのであれば、マウント後にパーミッションを変更するのを忘れないでください。: <c>chmod 1777 /mnt/gentoo/tmp</c>。これは<path>/var/tmp</path>も同様です。
</note>

<p>
procファイルシステム(カーネルとの仮想インターフェイス)も<path>/proc</path>にマウントする必要があります。しかし、最初にパーティション上に色々なファイルを置く必要があります。
</p>

<p>
<uri link="?part=1&amp;chap=5">Gentooインストールファイルをインストールする</uri>に進みましょう。
</p>

</body>
</section>
</sections>
