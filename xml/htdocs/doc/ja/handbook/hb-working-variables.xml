<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/handbook/hb-working-variables.xml,v 1.9 2008/06/24 23:33:36 shindo Exp $ -->

<!-- Translator: Matsuba -->
<!-- Original revision: 1.22 -->
<sections>

<abstract>
Gentooではあなたのシステムに関する環境変数を簡単に管理できます。
この章ではどのように行うか説明し、よく使われる変数について述べます。
</abstract>

<version>1.16</version>
<date>2007-05-18</date>

<section>
<title>環境変数とは</title>
<subsection>
<title>環境変数とは何か</title>
<body>

<p>
環境変数とは、さまざまなアプリケーションから使用される情報を保持した名前付きオブジェクトです。
という説明をされても、多くのユーザー(特にあまりLinuxに慣れていない人)にとっては、
意味不明だったり、使いどころがないように思われるかもしれません。でも、それは違います。
環境変数を使うことで、さまざまなアプリケーションの設定を簡単に変更することができるのです。
</p>

</body>
</subsection>
<subsection>
<title>例(重要)</title>
<body>

<p>
以下の表は、Linuxシステムで使用されるいろいろな環境変数とその説明です。
具体的な環境変数の値については表の後でお見せします。
</p>

<table>
<tr>
  <th>変数名</th>
  <th>説明</th>
</tr>
<tr>
  <ti>PATH</ti>
  <ti>
    この変数には、システムが実行ファイルを検索する際に用いられるディレクトリがコロン区切りで格納されています。
    入力した実行ファイル名(たとえば<c>ls</c>、<c>rc-update</c>、<c>emerge</c>など)がこの変数で設定された場所に見つからない場合、
    そのファイルを実行することはできません(ただし、
    たとえば<c>/bin/ls</c>のようにコマンドをフルパスで入力した場合はその限りではありません)。
  </ti>
</tr>
<tr>
  <ti>ROOTPATH</ti>
  <ti>
    機能としては<c>PATH</c>とほぼ同じですが、この変数の場合、
    rootユーザーがコマンドを入力するときのみ調べる必要があるディレクトリだけがリストされています。
  </ti>
</tr>
<tr>
  <ti>LDPATH</ti>
  <ti>
    この変数には、ダイナミックリンカがライブラリを検索する際に使用するディレクトリが、
    コロン区切りで格納されています。
  </ti>
</tr>
<tr>
  <ti>MANPATH</ti>
  <ti>
    この変数には、<c>man</c>コマンドがマニュアルページを検索する際に使用するディレクトリが、
    コロン区切りで格納されています。
  </ti>
</tr>
<tr>
  <ti>INFODIR</ti>
  <ti>
    この変数には、<c>info</c>コマンドがinfoページを検索する際に使用するディレクトリが、
    コロン区切りで格納されています。
  </ti>
</tr>
<tr>
  <ti>PAGER</ti>
  <ti>
    この変数には、ファイルの内容を表示するときに使うプログラム(たとえば<c>less</c>や<c>more</c>)のパスが格納されています。
  </ti>
</tr>
<tr>
  <ti>EDITOR</ti>
  <ti>
    この変数には、ファイルの内容を編集する際に使われるプログラム(たとえば<c>nano</c>や<c>vi</c>)のパスが格納されています。
  </ti>
</tr>
<tr>
  <ti>KDEDIRS</ti>
  <ti>
    この変数には、KDEに特化したファイルを収めたディレクトリが、
    コロン区切りで格納されています。
  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT</ti>
  <ti>
    この変数には、Portageがパッケージのアップデートを行う際に保護する必要のあるディレクトリが、
    <e>スペース</e>区切りで格納されています。
  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT_MASK</ti>
  <ti>
    この変数には、Portageがパッケージのアップデートを行う際に保護してはいけないディレクトリが、
    <e>スペース</e>区切りで格納されています。
  </ti>
</tr>
</table>

<p>
以下、これまでに説明したすべての変数の定義例を示します。
</p>

<pre caption="定義例">
PATH="/bin:/usr/bin:/usr/local/bin:/opt/bin:/usr/games/bin"
ROOTPATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
LDPATH="/lib:/usr/lib:/usr/local/lib:/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
MANPATH="/usr/share/man:/usr/local/share/man"
INFODIR="/usr/share/info:/usr/local/share/info"
PAGER="/usr/bin/less"
EDITOR="/usr/bin/vim"
KDEDIRS="/usr"
CONFIG_PROTECT="/usr/X11R6/lib/X11/xkb /opt/tomcat/conf \
                /usr/kde/3.1/share/config /usr/share/texmf/tex/generic/config/ \
                /usr/share/texmf/tex/platex/config/ /usr/share/config"
CONFIG_PROTECT_MASK="/etc/gconf"
</pre>

</body>
</subsection>
</section>
<section>
<title>グローバルな環境変数を設定する</title>
<subsection>
<title>/etc/env.dディレクトリ</title>
<body>

<p>
各環境変数を一ヶ所で定義できるようにするため、Gentooは<path>/etc/env.d</path>ディレクトリを導入しました。
このディレクトリの中には、たとえば<path>00basic</path>や<path>05gcc</path>など、
いろいろなファイルが入っていると思います。それぞれのファイルには、
そのファイル名が表すアプリケーションに必要な環境変数が格納されています。
</p>

<p>
たとえば<c>gcc</c>をインストールすると、
<path>05gcc</path>という以下のような変数を定義したファイルが、
ebuildにより生成されます。
</p>

<pre caption="/etc/env.d/05gcc">
PATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/info"
CC="gcc"
CXX="g++"
LDPATH="/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
</pre>

<p>
他のディストリビューションの場合は、<path>/etc/profile</path>などのファイルに書かれた環境変数を変更したり新たに環境変数を定義したり、といったことを求められます。
Gentooの場合、環境変数の維持や管理がユーザーにとって(そしてPortageにとっても)簡単に行えるようになっており、
環境変数が格納される可能性のあるいくつものファイルそれぞれに、
注意を払う必要がありません。
</p>

<p>
たとえば<path>gcc</path>が更新された場合は、
ユーザーが指一本動かすことなく、<path>/etc/env.d/05gcc</path>も同時に更新されます。
</p>

<p>
これはPortageにとって便利であるばかりでなく、ユーザーであるあなたにとっても便利です。
場合によっては、システム全体に特定の環境変数を設定する必要に迫られることがあるでしょう。
たとえば<c>http_proxy</c>を例に取りましょうか。
<path>/etc/profile</path>をぐちゃぐちゃにしてしまう代わりに、
以下のように独自の定義を用意したファイル(<path>/etc/env.d/99local</path>)を作成すれば良いだけなのです。
</p>

<pre caption="/etc/env.d/99local">
http_proxy="proxy.server.com:8080"
</pre>

<p>
このファイルを使って自分用の環境変数を設定するようにしておけば、
独自に設定した環境変数も一目瞭然です。
</p>

</body>
</subsection>
<subsection>
<title>env-updateスクリプト</title>
<body>

<p>
<path>/etc/env.d</path>には、<c>PATH</c>変数を定義した複数のファイルが存在します。
これは間違いではありません。<c>env-update</c>を実行すると環境変数が更新される前にそれぞれの定義が順番に追加されます。
このためパッケージは(そしてユーザーも)既存の変数に影響を与えることなく、
自分自身の環境変数を簡単に追加できるのです。
</p>

<p>
<c>env-update</c>スクリプトは<path>/etc/env.d</path>以下のファイルをアルファベット順に並べ、
その中で定義された変数をつなげていきます。ファイル名は、2つの数字で始まる必要があります。
</p>

<pre caption="env-updateが変数を並べる順番">
         00basic        99kde-env       99local
     +-------------+----------------+-------------+
PATH="/bin:/usr/bin:/usr/kde/3.2/bin:/usr/local/bin"
</pre>

<p>
環境変数の連結はいつも起こるわけではなく、以下の環境変数のみで発生します。
<c>KDEDIRS</c>、<c>PATH</c>、<c>LDPATH</c>、
<c>MANPATH</c>、<c>INFODIR</c>、<c>INFOPATH</c>、<c>ROOTPATH</c>、
<c>CONFIG_PROTECT</c>、<c>CONFIG_PROTECT_MASK</c>、<c>PRELINK_PATH</c>そして
<c>PRELINK_PATH_MASK</c>
他の全ての環境変数は、最後に指定された値が(<path>/etc/env.d</path>内のファイルのアルファベット順で)
使用されます。
</p>

<p>
<c>env-update</c>を実行すると、
このスクリプトは全環境変数を生成し<path>/etc/profile.env</path>に記録します(このファイルは<path>/etc/profile</path>から利用されます)。
また同時に<c>LDPATH</c>から情報を抽出し、その情報を用いて<path>/etc/ld.so.conf</path>を生成します。
それから<c>ldconfig</c>を呼び出し、
ダイナミックリンカが使用する<path>/etc/ld.so.cache</path>を再生成します。
</p>

<p>
<c>env-update</c>実行後すぐにその効果を確認したい場合は、
以下のコマンドで環境を更新します。
自分でGentooをインストールした方は、
インストールガイドでも以下のコマンドが紹介されていたことを覚えているかもしれません。
</p>

<pre caption="環境を更新">
# <i>env-update &amp;&amp; source /etc/profile</i>
</pre>

<note>
上記のコマンドは現在使用中のターミナル、<e>新しい</e> コンソールやそれらから起動されたプロセス上の環境変数のみを更新します。
ですので、もしX11上で作業する場合は、全ての新しく開くターミナル上で <c>source /etc/profile</c> を実行する必要があります。
もしくは X を再起動し、全ての新しいターミナルが新たな環境変数に基づくようにします。
もし、ログインマネージャーを使用している場合は、root になり、<c>/etc/init.d/xdm restart</c> を実行します。
ログインマネージャを使用していない場合は、、ログアウトし、X が新しい環境変数でプロセスを起動できるように、ログインし直す必要があります。
</note>

<impo>
他の変数を定義しているときにシェル変数は使うことができません。
つまり、<c>FOO="$BAR"</c> (ここで <c>$BAR</c> は他の変数)というようにはできないということです。
</impo>


</body>
</subsection>
</section>
<section>
<title>ローカルな環境変数を設定する</title>
<subsection>
<title>ユーザー限定の設定</title>
<body>

<p>
グローバルな形で環境変数を設定したくない場合もあります。
たとえば、<path>/home/my_user/bin</path>と、
現在の作業ディレクトリ(現在あなたがいるディレクトリ)を<c>PATH</c>変数に設定したいけれども、
同じシステムにいる他のユーザーの<c>PATH</c>には追加させたくない、
という場合です。
このように環境変数をローカルに定義したい場合は、
<path>~/.bashrc</path>や<path>~/.bash_profile</path>を編集してください。
</p>

<pre caption="ローカルな利用のために~/.bashrcのPATHを拡張">
 <comment>(コロンの後にディレクトリを指定しない場合は、現在の作業ディレクトリとして扱われます。)</comment>
PATH="${PATH}:/home/my_user/bin:"
</pre>

<p>
ログインすると<c>PATH</c>が更新されているはずです。
</p>

</body>
</subsection>
<subsection>
<title>セッション限定の設定</title>
<body>

<p>
時には、もっと限定された形で環境変数を使いたい場合もあります。
たとえばテンポラリディレクトリにバイナリを作成したのだけど、
フルパスを入力するのも面倒だし、
ちょっとの間そのバイナリを使うためだけのために<path>~/.bashrc</path>を編集したりしたくない、
というような場合です。
</p>

<p>
このような場合は、<c>export</c>コマンドを使って現在のセッションのみ有効な<c>PATH</c>変数を設定することができます。
ログアウトしない限り<c>PATH</c>変数に設定した仮の定義が有効になります。
</p>

<pre caption="セッション限定の環境変数を設定">
# <i>export PATH="${PATH}:/home/my_user/tmp/usr/bin"</i>
</pre>

</body>
</subsection>
</section>
</sections>
