<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/handbook/hb-install-amd64-disk.xml,v 1.4 2006/02/04 07:03:34 idani Exp $ -->

<sections>

<version>2.5</version>
<date>2006-01-01</date>
<!-- Original revision: 1.23 -->
<!-- Translater  Fujinaka -->

<section>
<title>ブロックデバイス入門</title>
<subsection>
<title>ブロックデバイス</title>
<body>

<p>
Linuxファイルシステム、パーティション、ブロックデバイスを含めて、Gentoo LinuxとLinux全般でのディスクに適している側面を詳しく見て行きましょう。
そして、ディスクとパーティションの一部始終を理解してもらった上で、Gentoo Linuxのインストールの為にパーティションとファイルシステムのセットアップの手順を案内します。
</p>

<p>
初めに、<e>ブロックデバイス</e>を紹介します。おそらく最も有名なブロックデバイスはLinux上では1番目のIDEドライブ、すなわち<path>/dev/hda</path>を指しているものでしょう。もし、あなたのシステムがSCSIドライブを使っているなら, 1番目のハードディスクは<path>/dev/sda</path>になるでしょう。
</p>

<p>
上記のブロックデバイスはディスクへの抽象的インターフェイスを表しています。
ユーザープログラムはドライブがIDEやSCSIもしくは他のどんなものかどうかを気にすること無くディスクにアクセスできます。
プログラムは簡単にディスク上の記憶領域をランダムアクセス可能な512バイト毎の連続した束としてアドレッシングできます。
</p>

</body>
</subsection>
<subsection>
<title>パーティションとスライス</title>
<body>

<p>
Linuxシステムを格納するのにディスクの全体を使用することは理論上可能ですが、実際にはほとんどそうはされません。
代わりにディスク全体のブロックデバイスはもっと扱いやすいブロックデバイスにより小さく分割されます。
amd64システムではこれら分割されたものを<e>パーティション</e>と呼びます。
</p>

</body>
</subsection>
<subsection>
<title>パーティション</title>
<body>

<p>
パーティションは以下の3つのタイプに分けられます。
<e>基本</e>、 <e>拡張</e>そして<e>論理</e>です。
</p>

<p>
<e>基本</e>パーティションはMBR(マスターブートレコード)にその情報が格納されているパーティションです。
MBRはとても小さい(512バイト)ので、4つの基本パーティションだけが定義できます。
(例えば、<path>/dev/hda1</path>から<path>/dev/hda4</path>)です。
</p>

<p>
<e>拡張</e>パーティションはより多くのパーティションが含まれた特殊な基本パーティションです。
(これは拡張パーティションは4つの基本パーティションの1つで無ければならないということです)。
こういったパーティションは元々あった訳ではありません。
しかし4つのパーティションでは少なすぎるので、下位互換性を損なうこと無く構成仕様を拡張する為に生まれたものです。
</p>

<p>
<e>論理</e>パーティションは拡張パーティション内のパーティションです。
これらの定義はMBRの中ではなく、拡張パーティション内で宣言されています。
</p>

</body>
</subsection>
</section>
<section>
<title>パーティション構成を計画する</title>
<subsection>
<title>通常のパーティション構成</title>
<body>

<p>
もしシステムのパーティション構成を編集するのに興味が無ければ、このハンドブックを通して使っているパーティション構成を使用できます。
</p>

<table>
<tr>
  <th>パーティション</th>
  <th>ファイルシステム</th>
  <th>サイズ</th>
  <th>種別</th>
</tr>
<tr>
  <ti><path>/dev/hda1</path></ti>
  <ti>ext2</ti>
  <ti>32M</ti>
  <ti>ブートパーティション</ti>
</tr>
<tr>
  <ti><path>/dev/hda2</path></ti>
  <ti>(swap)</ti>
  <ti>512M</ti>
  <ti>スワップパーティション</ti>
</tr>
<tr>
  <ti><path>/dev/hda3</path></ti>
  <ti>ext3</ti>
  <ti>残りのディスク領域</ti>
  <ti>ルートパーティション</ti>
</tr>
</table>

<p>
もしパーティション(もしくは論理ボリューム)がどれぐらいのサイズにすればいいのか、どれだけの数のパーティション(もしくはボリューム)かにすべきかを知りたいのならば読み進んでください。そうでなければ、今から<uri link="#fdisk">パーティション作成にfdiskを使う</uri>を読みながら、ディスクのパーティション作成作業を進めてください。
</p>

</body>
</subsection>
<subsection>
<title>パーティション数とその大きさ</title>
<body>

<p>
パーティションの数は環境に大きく依存します。
例えば、多数のユーザーがいるのならセキュリテイを強めバックアップを容易にする為に多分<path>/home</path>を別にしたいでしょう。
もしメールサーバーとして稼働させる為にGentooをインストールしようとしているのなら、全てのメールは <path>/var</path>内に保存されるので<path>/var</path>は別にすべきでしょう。
ファイルシステムの良い選択はパフォーマンスを最大限にするでしょう。ゲームサーバーではほとんどのゲームサーバーパッケージが<path>/opt</path>にインストールされるので、そこは別にされます。
理由は<path>/home</path>をセキュリティとバックアップの為に別にするのと同じようなものです。
<path>/usr</path>は、確実に大きくしたいはずです。
主なアプリケーションを有しているだけでなく、保存される多数のソースを除いたPortageツリー、一つだけでも500Mbyteほどあるからです。
</p>

<p>
こういったように、どういうシステムにしたいのかにかなり依存します。
分割されたパーティションまたはボリュームには以下の利点があります。
</p>

<ul>
<li>
  それぞれのパーティションまたはボリュームに最適なパフォーマンスを上げるファイルシステムを選択できます。
</li>
<li>
  パーティションを分けておくと、あるゾンビプロセスがパーティションまたはボリュームにデータを書き込み続けてシステム全体の空き容量を使い果たすのを防ぐことができます。
</li>
<li>
  必要ならば、並行した複数のチェックを行えるのでファイルシステムのチェック時間を減らせます。
  (この利点は複数のパーティションでよりも複数のディスクでより有効ですが)。
</li>
<li>
  セキュリティは読込専用、nosuid(setuidビットは無視されます)、noexec(実行ビットは無視されます)等でいくつかのパーティションをマウントすることで増大します。
</li>
</ul>

<p>
しかし、複数のパーティションには一つ大きな欠点があります。
正しく設定しないと、空き容量がかなりあるパーティションと空き容量の無いパーティションのあるシステムになってしまうでしょう。
また、SCSIとSATAでは15個迄というパーティション数の制限があります。
</p>

<p>
パーティション設定例として、ラップトップのデモ機(ウェブサーバー、メールサーバー、gnome等を含む)として使われている20GBのディスクを見ていただききましょう。
</p>

<pre caption="ファイルシステム使用例">
$ <i>df -h</i>
Filesystem    Type    Size  Used Avail Use% Mounted on
/dev/hda5     ext3    509M  132M  351M  28% /
/dev/hda2     ext3    5.0G  3.0G  1.8G  63% /home
/dev/hda7     ext3    7.9G  6.2G  1.3G  83% /usr
/dev/hda8     ext3   1011M  483M  477M  51% /opt
/dev/hda9     ext3    2.0G  607M  1.3G  32% /var
/dev/hda1     ext2     51M   17M   31M  36% /boot
/dev/hda6     swap    516M   12M  504M   2% &lt;not mounted&gt;
<comment>(将来使用のための未パーティション領域: 2 GB)</comment>
</pre>

<p>
<path>/usr</path>はここでかなりの量(83%使用)を占めていますが、一旦全てのソフトがインストールされると <path>/usr</path>はそんなに増えて行きません。
しかしながら、<path>/var</path>に2-3GBものディスク容量を割り当てるのは多すぎると思うかもしれません、ただPortageはデフォルトでは、このパーティションを使用してパッケージのコンパイルを行うことを覚えておいてください。
もし、あなたが<path>/var</path>を1GB程度の適度なサイズに抑えておきたい場合、あなたはOpenOfficeのような大きなパッケージをコンパイルするために必要な十分に大きなパーティションを差し示すように、あなたの<path>/etc/make.conf</path>内の、<c>PORTAGE_TMPDIR</c>変数を変更する必要があります。
</p>

</body>
</subsection>
</section>
<section id="fdisk">
<title>パーティション作成にfdiskを使う</title>
<subsection>
<body>

<p>
以下の部分では先に紹介した例のパーティション設定の作成方法を説明します。
</p>

<table>
<tr>
  <th>パーティション</th>
  <th>種別</th>
</tr>
<tr>
  <ti><path>/dev/hda1</path></ti>
  <ti>ブートパーティション</ti>
</tr>
<tr>
  <ti><path>/dev/hda2</path></ti>
  <ti>スワップパーティション</ti>
</tr>
<tr>
  <ti><path>/dev/hda3</path></ti>
  <ti>ルートパーティション</ti>
</tr>
</table>

<p>
パーティションの割当てを自分の望むように変更してください。
</p>

</body>
</subsection>
<subsection>
<title>現在のパーティションの割当てを見る</title>
<body>

<p>
<c>fdisk</c>はディスクをパーティションに分割するのに高機能かつ普及しているツールです。
さあ<c>fdisk</c>を実行しましょう(例では<path>/dev/hda</path>を使っています)。
</p>

<pre caption="fdiskを起動する">
# <i>fdisk /dev/hda</i>
</pre>

<p>
<c>fdisk</c>を起動すると、下記の様なプロンプトが出ます。
</p>

<pre caption="fdiskプロンプト">
Command (m for help): 
</pre>

<p>
現在のディスクのパーティション情報を表示するには<c>p</c>を入力します。
</p>

<pre caption="パーティション情報例">
Command (m for help): <i>p</i>

Disk /dev/hda: 240 heads, 63 sectors, 2184 cylinders
Units = cylinders of 15120 * 512 bytes

Device Boot    Start       End    Blocks   Id  System
/dev/hda1             1        14    105808+  83  Linux
/dev/hda2            15        49    264600   82  Linux swap
/dev/hda3            50        70    158760   83  Linux
/dev/hda4            71      2184  15981840    5  Extended
/dev/hda5            71       209   1050808+  83  Linux
/dev/hda6           210       348   1050808+  83  Linux
/dev/hda7           349       626   2101648+  83  Linux
/dev/hda8           627       904   2101648+  83  Linux
/dev/hda9           905      2184   9676768+  83  Linux

Command (m for help): 
</pre>

<p>
このディスクの例では7つのLinuxファイルシステム("Linux"と表示されている)とスワップパーティション("Linux swap"と表示)で構成するように設定されています。
</p>

</body>
</subsection>
<subsection>
<title>全てのパーティションを削除する</title>
<body>

<p>
最初に現在の全てのパーティションをディスクから削除します。<c>d</c>を入力するとパーティションを削除します。
例えば、現在の<path>/dev/hda1</path>を削除するには、以下のようにします。
</p>

<pre caption="パーティションを削除する">
Command (m for help): <i>d</i>
Partition number (1-4): <i>1</i>
</pre>

<p>
パーティションの削除準備ができました。これで<c>p</c>と入力してもパーティションは表示されませんが、変更が保存されるまで実際には削除されません。
もし間違えてしまって変更を保存せずに取消たいときはすぐに<c>q</c>と入力し、エンターキーを押してください。これでパーティションは削除されません。
</p>

<p>
さあ、これでシステム上の全パーティションを削除したい！と思っているでしょう？
パーティションを表示するのに<c>p</c>を、 削除するのに<c>d</c>とパーティション番号を繰り返し入力してください。
最後にパーティションテーブルに何も無くなれば終了です。
</p>

<pre caption="空のパーティションテーブル">
Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System

Command (m for help):
</pre>

<p>
さて今はメモリー上のパーティション構成は空になりました。パーティションを作成する準備が整いました。
先程検討したように、通常のパーティション構成を使うことにしましょう。
もちろん同じパーティション構成にしたくなければ、厳密に案内にならわないでください。
</p>

</body>
</subsection>
<subsection>
<title>ブートパーティションを作成する</title>
<body>

<p>
最初に小さなブートパーティションを作成します。新しいパーティションを作成するには<c>n</c>と入力します。
そして基本パーティションを選択するのに<c>p</c>と入力するのに続き、1番目の基本パーティションを選択するのに<c>1</c>と入力します。
最初のシリンダーが表示されたら、そのままエンターキーを押してください。
最後のシリンダーが表示されたら、32Mバイトサイズののパーティションを作成するのに<c>+32M</c>と入力してください。
</p>

<pre caption="ブートパーティションを作成する">
Command (m for help): <i>n</i>
Command action
  e   extended
  p   primary partition (1-4)
<i>p</i>
Partition number (1-4): <i>1</i>
First cylinder (1-3876, default 1): <comment>(エンターキーを押す)</comment>
Using default value 1
Last cylinder or +size or +sizeM or +sizeK (1-3876, default 3876): <i>+32M</i>
</pre>

<p>
さて、<c>p</c>と入力すれば以下のパーティションテーブル表示が見られるはずです。
</p>

<pre caption="作成されたブートパーティション">
Command (m for help): <i>p</i>

Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System
/dev/hda1          1        14    105808+  83  Linux
</pre>

<p>
このパーティションをブート可能にする必要があります。このパーティションにブート可能フラグを付加するには<c>a</c>と入力します。
もう一度<c>p</c>を入力すると、"Boot"欄に<path>*</path>が付いているのがわかるでしょう。
</p>

</body>
</subsection>
<subsection>
<title>スワップパーティションを作成する</title>
<body>

<p>
さあスワップパーティションを作成しましょう。
この作業のためには、新規パーティションを作成するのに<c>n</c>、基本パーティションを選択するのに<c>p</c>を入力します. 
そして2番目の基本パーティション、この例では<path>/dev/hda2</path>を作成するのに<c>2</c>と入力します。
最初のシリンダーが表示されたら、そのままエンターキーを押してください。
最後のシリンダーが表示されたら、512Mバイトサイズののパーティションを作成するのに<c>+512M</c>と入力してください。
この作業の後、パーティションタイプを設定するのに<c>t</c>と入力します。
先程作成したパーティションを選択するのに<c>2</c>と入力して、このパーティションタイプを"Linux Swap"にする為に<c>82</c>と入力します。
これらの手順が完了後、<c>p</c>を入力すれば下記のようなパーティションテーブルが表示されるはずです。
</p>

<pre caption="スワップパーティション作成後のパーティションテーブル">
Command (m for help): <i>p</i>

Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System
/dev/hda1 *        1        14    105808+  83  Linux
/dev/hda2         15        81    506520   82  Linux swap
</pre>

</body>
</subsection>
<subsection>
<title>ルートパーティションを作成する</title>
<body>

<p>
最後にルートパーティションを作成しましょう。
この作業のためには、新規パーティションを作成するのに<c>n</c>、基本パーティションを選択するのに<c>p</c>を入力します. 
そして3番目の基本パーティション、この例では<path>/dev/hda3</path>を作成するのに<c>3</c>と入力します。
最初のシリンダーが表示されたら、そのままエンターキーを押してください。
最後のシリンダーが表示されたら、ディスクの残りの空き容量を確保する為にエンターキーを押します。
これらの手順が完了後、<c>p</c>を入力すれば下記のようなパーティションテーブルが表示されるはずです。
</p>

<pre caption="ルートパーティション作成後のパーティションテーブル">
Command (m for help): <i>p</i>

Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System
/dev/hda1 *        1        14    105808+  83  Linux
/dev/hda2         15        81    506520   82  Linux swap
/dev/hda3         82      3876  28690200   83  Linux
</pre>


</body>
</subsection>
<subsection>
<title>パーティションの割当てを保存する</title>
<body>

<p>
パーティションの割当てを保存して、<c>fdisk</c>を終了するには<c>w</c>を入力します。
</p>

<pre caption="保存してfdiskを終了する">
Command (m for help): <i>w</i>
</pre>

<p>
これでパーティションが作成されましたので、<uri link="#filesystems">ファイルシステムの作成</uri>に進むことができます。
</p>

</body>
</subsection>
</section>
<section id="filesystems">
<title>ファイルシステムを作成する</title>
<subsection>
<title>はじめに</title>
<body>

<p>
さてパーティションが作成されましたので、それぞれにファイルシステムを作成するときが来ました。 
もしファイルシステムを選ぶことに興味がなくて、このハンドブックのデフォルトのものを使うことで満足ならば、<uri link="#filesystems-apply">パーティションにファイルシステムを適用する</uri>に進んでください。
そうでなければ利用可能なファイルシステムに関して知るために読み進めてください．．．。
</p>

</body>
</subsection>
<subsection>
<title>ファイルシステムとは</title>
<body>

<p>
Linuxカーネルでは様々なファイルシステムをサポートしています。
いくつかのファイルシステムはamd64アーキテクチャで安定していますが、不安定なファイルシステムもあります。
ext2、ext3は安定しています。
jfsとreiserfsは動作するものの、さらに評価が必要です。
もし人柱希望であれば、サポートされていないファイルシステムに挑戦してみるのも良いかも知れません。
</p>

<p>
<b>ext2</b>は実証済みで真のLinuxファイルシステムですがメタデータジャーナリングを持ちません。
これは起動時の定期のext2ファイルシステムのチェックにかなりの時間が掛かることもあるということです。
現在、整合性のチェックをとても早く終わらせることのできる次世代のジャーナリングファイルシステムの選択肢があります。
そのために一般的には非ジャーナリングファイルシステムより好まれています。
ジャーナリングファイルシステムはファイルシステムの不整合状態の発生やシステム起動時の大幅な遅延を防ぎます。
</p>

<p>
<b>ext3</b>はfull data及びordered dataジャーナリングの様に他の優れたジャーナリングモードに加えて素早い回復のためのメタデータジャーナルを提供するext2ファイルシステムのジャーナル化バージョンです。ext3はとても信頼できる良いファイルシステムです。
ほとんど全ての状況下で高いパフォーマンスを上げることができるハッシュ化されたb-treeインデックスの追加オプションがあります。
Indexingを有効化するには、<c>mke2fs</c>コマンドに、<c>-O dir_index</c>を追加してください。
要するにext3は素晴らしいファイルシステムということです。
</p>

<p>
<b>ReiserFS</b>は全般的にとても良い性能であり、小さいファイル(4k以下のファイル)を扱うときはext2やext3よりもとてもときには10-15倍の高い性能を発揮するB*-ツリーベースのファイルシステムです。
またReiserFSはとても良くできていて、メタデータジャーナリングを持ちます。
カーネル2.4.18以降では、 ReiserFSは一般的な目的と大規模ファイルシステムの作成、たくさんの小さいファイルの利用、とても大きいファイルや大多数のファイルが含まれるディレクトリなどを扱う極端なケースにも堅実で使用に適しています。
</p>

<p>
<b>XFS</b>は強健な特徴を持ち、拡張性に最適化されたメタデータジャーナリングを持つファイルシステムです。
Linuxでのこのファイルシステムの使用はSCSI/ファイバーチャンネル記憶装置と無停電電源供給をもつ高機能なシステム以外はお勧めしません。
XFSは積極的にRAM上に処理中のデータをキャッシュするので、 不適切な設計のプログラム(ディスクにファイルを書き込むときに適切な注意を取らないもの。
そういったものは非常に少ないですが)では、不意にシステムがダウンしたとき、かなりのデータを失う可能性があります。
</p>

<p>
<b>JFS</b>はIBMの高性能なジャーナリングファイルシステムです。
最近あともう少しで製品という所まで来てますが現時点では一般的な安定性において肯定的か否定的かを述べるのに十分な実績がありません。
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>パーティションにファイルシステムを適用する</title>
<body>

<p>
パーティションやボリュームにファイルシステムを作成するには、それぞれのファイルシステムに合った利用可能なツールがあります。
</p>

<table>
<tr>
  <th>ファイルシステム</th>
  <th>作成コマンド</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
例えば、 ブートパーティション(この例では<path>/dev/hda1</path>)をext2に、ルートパーティション(この例では<path>/dev/hda3</path>)をext3(今回の例として)にするには、以下の様にします。
</p>

<pre caption="パーティションにファイルシステムを適用する">
# <i>mke2fs /dev/hda1</i>
# <i>mke2fs -j /dev/hda3</i>
</pre>

<p>
さあ新しく作成されたパーティションにファイルシステムを作成しましょう。
</p>

</body>
</subsection>
<subsection>
<title>スワップパーティションを有効にする</title>
<body>

<p>
<c>mkswap</c>はスワップパーティションを初期化するのに使うコマンドです。
</p>

<pre caption="スワップパーティションを初期化する">
# <i>mkswap /dev/hda2</i>
</pre>

<p>
スワップパーティションを有効にするには<c>swapon</c>を使用します。
</p>

<pre caption="スワップパーティションを有効にする">
# <i>swapon /dev/hda2</i>
</pre>

<p>
上記のコマンドでスワップを作成して有効にしましょう。
</p>

</body>
</subsection>
</section>
<section>
<title>マウント</title>
<body>

<p>
さてパーティションが初期化されてファイルシステムが収まったので、それらのパーティションをマウントするときが来ました。
<c>mount</c>というコマンドを使います。
作成したそれぞれのパーティション用にマウントに必要なディレクトリを作成するのを忘れないでください。
例ではルートとブートパーティションをマウントします。
</p>

<pre caption="パーティションをマウントする">
# <i>mount /dev/hda3 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/hda1 /mnt/gentoo/boot</i>
</pre>

<note>
もし<path>/tmp</path>を別のパーティションとして置きたいのであれば、マウント後にパーミッションを変更するのを忘れないでください。: <c>chmod 1777 /mnt/gentoo/tmp</c>。これは<path>/var/tmp</path>も同様です。
</note>

<p>
procファイルシステム(カーネルとの仮想インターフェイス)も<path>/proc</path>にマウントする必要があります。
しかし、最初にパーティション上に色々なファイルを置く必要があります。
</p>

<p>
<uri link="?part=1&amp;chap=5">Gentooインストールファイルをインストールする</uri>に進みましょう。
</p>

</body>
</section>
</sections>
