<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/handbook/2004.3/hb-portage-tools.xml,v 1.1 2005/01/30 04:54:03 nakano Exp $ -->

<!-- Original revision: 1.6 -->

<sections>

<version>1.3</version>
<date>2004-10-24</date>

<section>
<title>etc-update</title>
<body>

<p>
<c>etc-update</c>は<path>._cfg0000_&lt;name&gt;</path>ファイルのマージを手助けしてくれるツールです。
それは対話式のマージセットアップを提供しますし、普通の変更を自動的にマージすることもできます。

<path>._cfg0000_&lt;name&gt;</path>ファイルは、PortageがCONFIG_PROTECT変数に保護されているディレクトリにファイルを保存するときに作成されます。 
</p>

<p>
<c>etc-update</c>を実行するには何も付けずにこうします。
</p>

<pre caption="etc-updateを実行">
# <i>etc-update</i>
</pre>

<p>
分かり易い変更点をマージした後、更新を待っている保護されたファイルのリストが表示されるでしょう。
その下には利用可能なオプションが表示されています。
</p>

<pre caption="etc-updateオプション">
Please select a file to edit by entering the corresponding number.
              (-1 to exit) (-3 to auto merge all remaining files)
                           (-5 to auto-merge AND not use 'mv -i'):
</pre>

<p>
<c>-1</c>を入力すると、<c>etc-update</c>は何の変更も行わずに終了します。
<c>-3</c>か<c>-5</c>を入力すると、表示された<e>全ての</e>設定ファイルが新しいものに置き換えられます。
ゆえに、まず自動的に更新されるべきでない設定ファイルを選択することがとても重要です。
これは設定ファイルの左に常時されている数字を入力することによって簡単に行えます。
</p>

<p>
例えば、<path>/etc/pear.conf</path>という設定ファイルを選択します。
</p>

<pre caption="特定の設定ファイルを更新">
Beginning of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
<comment>[...]</comment>
End of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
1) Replace original with update
2) Delete update, keeping original as is
3) Interactively merge original with update
4) Show differences again
</pre>

<p>
今あなたは２つのファイルの違いを見ています。
もし設定ファイルの更新が問題なく行えると信じるならば、<c>1</c>を入力します。
更新された設定ファイルが必要でない、もしくは新しい有用なものを何も提供してくれないと思うなら、<c>2</c>を入力します。
現在の設定ファイルを相互的に更新したいのなら、<c>3</c>を入力します。
</p>

<p>
相互マージについてのより詳しい情報をここで記述することには意味がありません。
完全にするためには、２つのファイルを相互マージしているときに利用できるコマンドのリストを提示します。
２行(オリジナルと、推奨される新しいもの)と以下のコマンドのうち１つを入力することができるプロンプトが表示されています。
</p>

<pre caption="相互マージで利用可能なコマンド">
ed:     両方のバージョンをヘッダーで装飾して利用して編集
eb:     両方のバージョンを利用して編集
el:     左のバーションを利用して編集
er:     右のバーションを利用して編集
e:      新しいバージョンを編集
l:      左のバージョンを利用
r:      右のバージョンを利用
s:      結果を表示せず共通の行を含む
v:      結果を表示して共通の行を含む
q:      終了
</pre>

<p>
重量な設定ファイルの更新が終了したら、その他の設定ファイルを自動更新します。
更新できる設定ファイルが見つからないときには<c>etc-update</c>は終了します。
</p>

</body>
</section>
<section>
<title>dispatch-conf</title>
<body>

<p>
<c>dispatch-conf</c>を使うと、変更に跡を残しながら設定ファイルを更新することができます。
<c>dispatch-conf</c>はパッチやRCS改訂システムを使ったように設定ファイルの違いを保管します。
</p>

<p>
<c>etc-update</c>の様に、設定ファイルをそのままにしておく、新しい設定ファイルを使う、現在のものを編集するか相互的に変更すると言った指示を出すことができます。
しかし、<c>dispatch-conf</c>にはいくらかのすばらしい追加の機能があります。
</p>

<ul>
  <li>
    変更点をコメントにして含めるだけの自動ファイル更新
  </li>
  <li>
    ホワイトスペースの総計の相違だけの自動ファイル更新
  </li>
</ul>

<p>
まず<path>/etc/dispatch-conf.conf</path>を編集して、archive-dir変数で参照されるディレクトリを作成してください。
</p>

<p>
より詳しい情報は、<c>dispatch-conf</c>のmanページを確認してください。
</p>

<pre caption="dispatch-conf manページを読む">
$ <i>man dispatch-conf</i>
</pre>

</body>
</section>
<section>
<title>quickpkg</title>
<body>

<p>
<c>quickpkg</c>を使えばシステムに既にマージされたパッケージのアーカイブを作成することができます。
これらのアーカイブは既にビルドされたパッケージとして利用できます。
<c>quickpkg</c>の実行は簡単です: アーカイブにしたいパッケージ名を追加するだけです。
</p>

<p>
例えば、<c>curl</c>、<c>arts</c>そして<c>procps</c>をアーカイブするならこうします。
</p>

<pre caption="quickpkg利用例">
# <i>quickpkg curl arts procps</i>
</pre>

<p>
ビルドされたパッケージは<path>/usr/portage/packages/All</path>に保管されます。
これらパッケージへのシンボリックリンクは<path>/usr/portage/packages/&lt;category&gt;</path>にあります。
</p>

</body>
</section>
</sections>
