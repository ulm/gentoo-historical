<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/handbook/2004.3/hb-install-x86-kernel.xml,v 1.1 2005/01/30 04:54:03 nakano Exp $ -->

<!-- Original revision: 1.29 -->
<sections>

<version>1.25</version>
<date>2004-12-02</date>

<section>
<title>タイムゾーン</title>
<body>

<p>
最初にタイムゾーンを選択する必要があります。そうするとシステムがどの地域に置かれているかがわかります。自分のタイムゾーンを<path>/usr/share/zoneinfo</path>から探して、<c>ln</c>を使って<path>/etc/localtime</path>にリンクを張ってください。
</p>

<pre caption="タイムゾーン情報を設定する">
# <i>ls /usr/share/zoneinfo</i>
<comment>(GMTを使うとして)</comment>
# <i>ln -sf /usr/share/zoneinfo/GMT /etc/localtime</i>
<comment>(訳注：JST(日本時間)を使う例)</comment>
# <i>ln -sf /usr/share/zoneinfo/Japan /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>ソースをインストールする</title>
<subsection>
<title>カーネルを選択する</title>
<body>

<p>
全ディストリビューションの構成の核をなすのは、Linuxカーネルです。カーネルはユーザープログラムとシステムハードウェアの間の階層です。Gentooではユーザーに選択できる色々なカーネルソースを提供しています。説明付の全リストは<uri link="/doc/en/gentoo-kernel.xml">Gentoo Kernel Guide</uri><uri link="/doc/jp/gentoo-kernel.xml">(日本語訳)</uri>で見られます。
</p>

<p>
x86ベースのシステムではいろいろなカーネルの中で<c>vanilla-sources</c>(Linuxカーネル開発者によって開発された標準のカーネルソース)、<c>gentoo-sources</c>(パフォーマンス強化が特徴のパッチが当てられたカーネルソース)、 <c>gentoo-dev-sources</c>(パフォーマンス強化が特徴のパッチが当てられたカーネルv2.6ソース)、<c>development-sources</c> (vanillaの2.6カーネルソース)、．．．があります。
</p>

<p>
もしネットワーク無しのインストールをしているのなら、カーネルの選択はCDが提供するものだけに限られて来ます。2004.3リリースでは以下が選択できます。
</p>

<ul>
  <li>gentoo-sources</li>
  <li>vanilla-sources</li>
  <li>gentoo-dev-sources</li>
  <li>development-sources</li>
</ul>

<p>
カーネルソースを選んで、<c>emerge</c>を使ってインストールしてください。 
</p>

<pre caption="カーネルソースをインストールする">
# <i>emerge gentoo-sources</i>
</pre>

<p>
<path>/usr/src</path>の中を見ると、選択したカーネルソースを指す<path>linux</path>と呼ばれるシンボリックリンクが見られるでしょう。インストールされたカーネルソースは<c>gentoo-sources-2.4.26-r6</c>と仮定します。
</p>

<pre caption="カーネルソースへのシンボリックリンクを見る">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.4.26-gentoo-r6
</pre>

<p>
もしシンボリックリンクが選択したカーネルソースを指していなければ(<c>linux-2.4.26-gentoo-r6</c>が単に例であることに注意してください)、正しいカーネルソースにシンボリックリンクを変更しなければなりません。
</p>

<pre caption="カーネルソースへのシンボリックリンクを変更する">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s /usr/src/linux-2.4.26-gentoo-r6 linux</i>
</pre>

<p>
さあカーネルソースを設定して、コンパイルするときが来ました。この作業には<c>genkernel</c>が使えます。このツールはLiveCDで使われている一般的なカーネルを構築します。最初に"手動設定"を説明します。これがあなたの環境を最適化する一番良い方法ですから。
</p>

<p>
もし自分のカーネルを手動で設定したいなら、すぐに<uri link="#manual">一般的な選択: 手動設定</uri>へ進んでください。もし<c>genkernel</c>を使いたいなら、代わりに<uri link="#genkernel">もう一つの選択: genkernelを使う</uri>を読んでください。
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>一般的な選択: 手動設定</title>
<subsection>
<title>はじめに</title>
<body>

<p>
カーネルの手動設定はLinuxユーザがこれまでに実行しなければならない手続きの中で最も難しい手続きとしばしば見なされています。何もそれほど真実ではありません。2、3のカーネル設定の後では、難しかったことすら思い出せないでしょう。;)
</p>

<p>
しかし、一つだけは<e>本当</e>です。手動でカーネルの設定を始めるときに自分のシステムを判ってなければなりません。ほとんどの情報は<path>/proc/pci</path>の内容を見ることで集められます(もしくは有効であれば<c>lspci</c>を使って)。LiveCDではどんなカーネルモジュールを使っているかを見るために<c>lsmod</c>を実行することもできます(これはどんが機能が利用可能かの良いヒントを与えてくれるかも知れません)。
</p>

<p>
それではカーネルソースのディレクトリに行って、<c>make menuconfig</c>を実行しましょう。これでncursesベースの設定メニューが立ち上がります。
</p>

<pre caption="menuconfigを実行する">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
いくつかの設定項目が出てきます。最初に有効にしなければならないいくつかのオプションをリストアップしましょう(そうしなければGentooは機能しないか、特別な調整無しではうまく機能しないでしょう)。
</p>

</body>
</subsection>
<subsection>
<title>必要なオプションを有効にする</title>
<body>

<p>
まず最初に開発中や試験的なコード/ドライバーの使用を有効にします。必ず有効にください。そうしないといくつかのとても重要なコード/ドライバーが表示されません。
</p>

<pre caption="試験的なコード/ドライバを選択する">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
正しいプロセッサファミリーでカーネルをコンパイルしてるか確認してください。
</p>

<pre caption="正しいプロセッサファミリーを選択する">
Processor type and features ---&gt;
  <comment>(Change according to your system)</comment>
  (<i>Athlon/Duron/K7</i>) Processor family
</pre>

<p>
さて<c>File Systems</c>に行き、使用するファイルシステムの項目を選択してください。
それらをモジュールとしてコンパイル<e>しないで</e>ください。さもないとGentooシステムはパーティションをマウントすることができないでしょう。<c>Virtual memory</c>、 <c>/proc file system</c>、<c>/dev file system</c>そして<c>Automatically mount at boot</c>も選択してください。
</p>

<pre caption="必要なファイルシステムを選択する">
<comment>(2.4.xカーネル用)</comment>
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot
  [ ] /dev/pts file system for Unix98 PTYs

<comment>(2.6カーネル用)</comment>
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] /dev file system support (OBSOLETE)
    [*]   Automatically mount at boot
    [*] Virtual memory file system support (former shm fs)

<comment>(下記のオプションで、システムに必要なものを1つ以上選択 訳注:ルートパーティションで選択したファイルシステムは必ず有効にする必要があります)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
もしBIOSが大容量のハードディスクに未対応で上限サイズを知らせるようハードディスクドライブをジャンパーしていれば、ハードディスクの全領域にアクセスできるように次のオプションを有効にしなければなりません。
</p>

<pre caption="autogeometry resizing supportを選択する">
<comment>(2.4.xカーネルのみ)</comment>
ATA/IDE/MFM/RLL support ---&gt;
  IDE, ATA and ATAPI Block devices ---&gt;
    &lt;*&gt;   Include IDE/ATA-2 DISK support
    [ ]     Use multi-mode by default
    [*]     Auto-Geometry Resizing support
</pre>

<p>
もしインターネット接続にPPPoEを使っていたり、モデムでダイアルアップしているなら、カーネル内の以下のオプションが必要になります。
</p>

<pre caption="PPPoEに必要なドライバーを選択する">
<comment>(2.4.xカーネル用)</comment>
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports

<comment>(2.6.xカーネル用)</comment>
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
2つの圧縮オプションは差し支えは無いけれども、絶対に必要でもありません。<c>PPP over Ethernet</c>オプションもそうです。これはカーネルモードのPPPoEをするために設定されたときだけに<c>rp-pppoe</c>に使用されるものです。
</p>

<p>
もしPPPoEを使用する必要があるなら、カーネルにイーサネットカード用のサポートを含めることを忘れないでください。
</p>

<p>
もしハイパースレッディング(tm)に対応したインテルCPUか、マルチCPUのシステムがあるなら、"Symmetric multi-processing support"を有効にしなければなりません。
</p>

<pre caption="SMPサポートを有効にする">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
もしUSBの入力デバイス(キーボードやマウスなど)を使用するなら、以下も有効にするのを忘れないでください。
</p>

<pre caption="入力デバイスのUSB Supportを有効にする">
USB Support ---&gt;
  &lt;*&gt;   USB Human Interface Device (full HID) support
</pre>

<p>
PCMCIAサポートを必要とするノートPCユーザは、2.4カーネルを使用する場合にカーネル付属のPCMCIAドライバーを利用すべきでは<e>ありません</e>。より最新のドライバは後程インストールされる<c>pcmcia-cs</c>パッケージによって使用可能になります。しかし、2.6カーネルのユーザーはカーネルのPCMCIAドライバを使う方が良いでしょう。
</p>

<p>
カーネルの設定が終れば、<uri link="#compiling">コンパイルとインストール</uri>に進んでください。
</p>

</body>
</subsection>
<subsection id="compiling">
<title>コンパイルとインストール</title>
<body>

<p>
これでカーネルの設定がされたので、コンパイルとインストールするときが来ました。設定を抜けて、<c>make dep &amp;&amp; make bzImage modules modules_install</c>を実行してください。
</p>

<pre caption="カーネルをコンパイルする">
<comment>(2.4カーネル用)</comment>
# <i>make dep &amp;&amp; make bzImage modules modules_install</i>

<comment>(2.6カーネル用)</comment>
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
カーネルのコンパイルが終れば、カーネルイメージを<path>/boot</path>にコピーしてください。ここから先はインストールしたカーネルは<c>gentoo-sources</c>の2.4.26バージョンと仮定します。自分が選択したカーネルに適していると感じる名前を好きなように付けてください。また、ブートローダーの設定をするときに、その名前が必要になるので覚えておいてください。
</p>

<pre caption="カーネルをインストールする">
# <i>cp arch/i386/boot/bzImage /boot/kernel-2.4.26-gentoo-r6</i>
# <i>cp System.map /boot/System.map-2.4.26-gentoo-r6</i>
</pre>

<p>
万が一のためにカーネルの設定ファイルも<path>/boot</path>にコピーしておくのも賢明です。:)
</p>

<pre caption="カーネル設定をバックアップする">
# <i>cp .config /boot/config-2.4.26-gentoo-r6</i>
</pre>

<p>
それでは<uri link="#kernel_modules">個別のカーネルモジュールのインストール</uri>に進みましょう。
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>もう一つの選択: genkernelを使う</title>
<body>

<p>
もしこのセクションを読んでいるなら、自分のカーネル設定に<c>genkernel</c>スクリプトを使うのを選んだということです。
</p>

<p>
さてカーネルのソースツリーはインストールされました。自動的にカーネルを構築するのに<c>genkernel</c>スクリプトを使ってカーネルをコンパイルするときがやって来ました。<c>genkernel</c>はLiveCDのカーネルが設定されるのとほとんど同じ方法でカーネル設定するように動作します。カーネルを構築するのに<c>genkernel</c>を使うときは、通常はシステムはLiveCDがするように起動時にすべてのハードウェアを検出します。genkernelではどんな手動のカーネル設定も要求されないので、カーネルをコンパイルするのが苦手だなあという人には理想的な解決策です。
</p>

<p>
それではgenkernelの使い方を見てみましょう。始めにgenkernelのebuildをemergeします。
</p>

<pre caption="genkernelをemergeする">
# <i>emerge genkernel</i>
</pre>

<p>
さあ<c>genkernel all</c>を実行して、カーネルソースをコンパイルしましょう。
しかし<c>genkernel</c>はほとんどすべてのハードウェアサポートを含むカーネルをコンパイルするので、コンパイルが終了するまでにはかなりの時間を要することを覚えておいてください。
</p>

<p>
もし、ブートパーティションのファイルシステムにext2かext3以外(訳注:ReiserFS、JFS、XFSなど)を使用する場合は、<c>genkernel --menuconfig all</c>を使って手動でカーネルを設定し、カーネルの<e>中</e>にそのファイルシステムを組み込む必要があることに気を付けてください(つまり、モジュールとしてでは<e>無く</e>)。
</p>

<pre caption="genkernelを実行する">
# <i>genkernel all</i>
</pre>

<p>
一旦<c>genkernel</c>が完了すると、カーネル、すべてのモジュールそして<e>イニシャルルートディスク</e>(initrd)が作成されます。このハンドブックで後程ブートローダを設定するときにカーネルとinitrdを使います。ブートローダの設定ファイルを書くときに必要になるので、カーネルとinitrdの名前を書き留めておきましょう。"実際"のシステムが稼働し始める前に、(Live CDでのように)initrdは起動後すぐにハードウェアの自動検出を始めます。
</p>

<pre caption="作成されたカーネルイメージとinitrdの名前を確認する">
# <i>ls /boot/kernel* /boot/initrd*</i>
</pre>

<p>
さあ、システムがよりLive CDのようにするために、もう1つのステップを実行しましょう。<c>hotplug</c>をemergeしましょう。initrdはシステムを起動するのに必要なハードウェアを検出しますが、<c>hotplug</c>は他のすべてのハードウェアを検出します。
<c>hotplug</c>をemergeして有効にするには、以下のように入力してください。
</p>

<pre caption="hotplugをemergeして有効にする">
# <i>emerge hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>個別のカーネルモジュールをインストールする</title>
<subsection>
<title>追加のモジュールをインストールする</title>
<body>

<p>
もし必要なら、システムにある特別なハードウェア用のebuildをemergeしなければなりません。以下がemerge可能なカーネル関連のebuildの表です。
</p>

<table>
<tcolumn width="1in"/>
<tcolumn width="4in"/>
<tcolumn width="2in"/>
<tr>
  <th>Ebuild</th>
  <th>目的</th>
  <th>コマンド</th>
</tr>
<tr>
  <ti>nvidia-kernel</ti>
  <ti>xorg-x11用の高速化されたNVIDIAグラフィック</ti>
  <ti><c>emerge nvidia-kernel</c></ti>
</tr>
<tr>
  <ti>nforce-audio</ti>
  <ti>NVIDIA NForce(2)マザーボードのオンボードオーディオ</ti>
  <ti><c>emerge nforce-audio</c></ti>
</tr>
<tr>
  <ti>e100</ti>
  <ti>インテルのe100ファーストイーサネットアダプタ</ti>
  <ti><c>emerge e100</c></ti>
</tr>
<tr>
  <ti>e1000</ti>
  <ti>インテルのe1000ギガビットイーサネットアダプタ</ti>
  <ti><c>emerge e1000</c></ti>
</tr>
<tr>
  <ti>emu10k1</ti>
  <ti>Creative Sound Blaster Live!/Audigyのサポート(2.4カーネル用のみ)</ti>
  <ti><c>emerge emu10k1</c></ti>
</tr>
<tr>
  <ti>ati-drivers</ti>
  <ti>xorg-x11用の高速化されたATI Radeon 8500+/FireGLグラフィック</ti>
  <ti><c>emerge ati-drivers</c></ti>
</tr>
</table>

<p>
しかし、これらのebuildの内いくつかはかなりの依存関係があるかも知れないことに注意してください。ebuildをemergeしたらどのパッケージがインストールされるかを検証するには、<c>emerge --pretend</c>を使ってください。例えば、<c>emu10k1</c>パッケージでは
</p>

<pre caption="インストールされるすべてのパッケージのリストを見る">
# <i>emerge --pretend emu10k1</i>
</pre>

<p>
もしインストールに必要なパッケージが嫌なら、<c>emerge --pretend --verbose</c>を使って、依存を決めるのにどのUSEフラグが記されているかを見てください。
</p>

<pre caption="USEフラグの使い方を見る">
# <i>emerge --pretend --verbose emu10k1</i>
<comment>...</comment>
[ebuild  N    ] media-sound/aumix-2.8  +gpm +nls +gtk +gnome +alsa -gtk2
</pre>

<p>
前の例では、<c>emu10k1</c>の依存の内1つ(<c>aumix</c>)が<c>gtk</c>と<c>gnome</c>のUSEフラグを使っているのがわかります。gtk(org-x11に依存する)のUSEフラグがあれば、それも一緒にコンパイルされるということです。
</p>

<p>
もしこのどれもインストールしたくなければ、例えばすべてのUSEフラグを除外してください。
</p>

<pre caption="emu10k1のemergeですべてのUSEフラグを除外する">
# <i>USE="-gpm -nls -gtk -gnome -alsa" emerge --pretend emu10k1</i>
</pre>

<p>
結果に満足なら、<c>--pretend</c>を外して、<c>emu10k1</c>のインストールを始めてください。
</p>

</body>
</subsection>
<subsection>
<title>モジュールを設定する</title>
<body>

<p>
自動的にロードさせたいモジュールを<path>/etc/modules.autoload.d/kernel-2.4</path>(もしくは<path>kernel-2.6</path>)に記入してください。もし望むなら、モジュールに追加オプションを加えることもできます。
</p>

<p>
すべての利用可能なモジュールを見るには、次の<c>find</c>コマンドを実行してください。"&lt;kernel version&gt;"に今コンパイルしたカーネルのバージョンを入れてください。
</p>

<pre caption="すべての利用可能なモジュールを見る">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
例えば、<c>3c59x.o</c>モジュールを自動でロードするなら、<path>kernel-2.4</path>か<path>kernel-2.6</path>ファイルを開いて、モジュール名をそこに記入してください。
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.4を編集する">
<comment>(2.4カーネル用の例)</comment>
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4もしくはkernel-2.6">
3c59x
</pre>

<p>
さあ、変更を<path>/etc/modules.conf</path>ファイルに書き込むために<c>modules-update</c>を実行してください。
</p>

<pre caption="modules-updateを実行する">
# <i>modules-update</i>
</pre>

<p>
<uri link="?part=1&amp;chap=8">システムの設定</uri>に進んで、インストールを続けてください。
</p>

</body>
</subsection>
</section>
</sections>
