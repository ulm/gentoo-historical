<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/handbook/hb-install-x86-kernel.xml,v 1.22 2006/06/09 18:00:52 idani Exp $ -->

<!-- Original revision: 1.61 -->
<!-- Translator: Infonomad -->

<sections>

<version>3.12</version>
<date>2006-05-28</date>

<section>
<title>タイムゾーン</title>
<body>

<p>
最初にタイムゾーンを選択する必要があります。そうするとシステムがどの地域に置かれているかがわかります。自分のタイムゾーンを<path>/usr/share/zoneinfo</path>から探して、<path>/etc/localtime</path>にコピーしてください。それぞれの名前が実際のタイムゾーンを指していないので、<path>/usr/share/zoneinfo/Etc/GMT*</path>のタイムゾーンは避けてください。例えば <path>GMT-8</path>は実際にはGMT+8を指します。
</p>

<pre caption="タイムゾーン情報を設定する">
# <i>ls /usr/share/zoneinfo</i>
<comment>(GMTを使うとして)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
<comment>(訳注：JST(日本時間)を使う例)</comment>
# <i>cp /usr/share/zoneinfo/Japan /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>ソースをインストールする</title>
<subsection>
<title>カーネルを選択する</title>
<body>

<p>
全ディストリビューションの構成の核をなすのは、Linuxカーネルです。カーネルはユーザープログラムとシステムハードウェアの間の階層です。Gentooではユーザーに選択できる色々なカーネルソースを提供しています。説明付の全リストは<uri link="/doc/en/gentoo-kernel.xml">Gentoo Kernel Guide</uri><uri link="/doc/ja/gentoo-kernel.xml">(日本語訳)</uri>で見られます。
</p>

<p>
x86ベースのシステムではいろいろなカーネルの中で<c>vanilla-sources</c>(Linuxカーネル開発者によって開発された標準のカーネルソース)、<c>gentoo-sources</c>(パフォーマンス強化が特徴のパッチが当てられたカーネルソース)、．．．があります。
</p>

<p>
カーネルソースを選んで、<c>emerge</c>を使ってインストールしてください。この時点でxorg-x11や他の依存関連をインストールするのを避けるのには<c>USE="-doc"</c>が必要になります。<c>USE="symlink"</c>は新しいインストールには必要ありませんが、<path>/usr/src/linux</path>のシンボリックリンクの正しい作成を確かにするのには必要です。 
</p>

<pre caption="カーネルソースをインストールする">
# <i>USE="-doc symlink" emerge gentoo-sources</i>
</pre>

<p>
<path>/usr/src</path>の中を見ると、選択したカーネルソースを指す<path>linux</path>と呼ばれるシンボリックリンクが見られるでしょう。この場合、インストールされたカーネルソースは<c>gentoo-sources-2.6.12-r10</c>を指しています。自分のバージョンは違うかもしれない事は心に留めておいてください。
</p>

<pre caption="カーネルソースへのシンボリックリンクを見る">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.6.12-gentoo-r10
</pre>

<p>
さあカーネルソースを設定して、コンパイルするときが来ました。この作業には<c>genkernel</c>が使えます。このツールはインストールCDで使われている一般的なカーネルを構築します。最初に"手動設定"を説明します。これがあなたの環境を最適化する一番良い方法ですから。
</p>

<p>
もし自分のカーネルを手動で設定したいなら、すぐに<uri link="#manual">一般的な選択: 手動設定</uri>へ進んでください。もし<c>genkernel</c>を使いたいなら、代わりに<uri link="#genkernel">もう一つの選択: genkernelを使う</uri>を読んでください。
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>一般的な選択: 手動設定</title>
<subsection>
<title>はじめに</title>
<body>

<p>
カーネルの手動設定はLinuxユーザがこれまでに実行しなければならない手続きの中で最も難しい手続きとしばしば見なされています。何もそれほど真実ではありません。2、3のカーネル設定の後では、難しかったことすら思い出せないでしょう。;)
</p>

<p>
しかし、一つだけは<e>本当</e>です。手動でカーネルの設定を始めるときに自分のシステムを判ってなければなりません。ほとんどの情報は<c>lspci</c>を含むpciutilsをemergeする事で収集できます(<c>emerge pciutils</c>)。これでchrootされた環境下で<c>lspci</c>を使用できます。<c>lspci</c>が出すいろんな<e>pcilib</e>の警告(pcilib: cannot open  /sys/bus/pci/devicesのような)を無視しても差し支えないでしょう。一方で、<e>chrootされていない</e>環境からも<c>lspci</c>を実行できます。結果は同じです。インストールCDではどんなカーネルモジュールを使っているかを見るために<c>lsmod</c>を実行することもできます(これはどんが機能が利用可能かの良いヒントを与えてくれるかも知れません)。
</p>

<p>
それではカーネルソースのディレクトリに行って、<c>make menuconfig</c>を実行しましょう。これでncursesベースの設定メニューが立ち上がります。
</p>

<pre caption="menuconfigを実行する">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
いくつかの設定項目が出てきます。最初に有効にしなければならないいくつかのオプションをリストアップしましょう(そうしなければGentooは機能しないか、特別な調整無しではうまく機能しないでしょう)。
</p>

</body>
</subsection>
<subsection>
<title>必要なオプションを有効にする</title>
<body>

<p>
まず最初に開発中や試験的なコード/ドライバーの使用を有効にします。必ず有効にください。そうしないといくつかのとても重要なコード/ドライバーが表示されません。
</p>

<pre caption="General Setupで試験的なコード/ドライバを選択する">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
General setup  ---&gt;
  [*] Support for hot-pluggable devices
</pre>

<p>
システムの起動に不可欠な全てのドライバー(SCSIコントローラのような)をモジュールとしてではなく、カーネル<e>内部</e>にコンパイルされているかを確認してください。内部にでないときちんと起動できなくなる可能性があります。
</p>

<p>
では、正しいプロセッサファミリを選択しましょう。
</p>

<pre caption="正しいプロセッサファミリーを選択する">
Processor type and features ---&gt;
  <comment>(Change according to your system)</comment>
  (<i>Athlon/Duron/K7</i>) Processor family
</pre>

<p>
さて<c>File Systems</c>に行き、使用するファイルシステムの項目を選択してください。
それらをモジュールとしてコンパイル<e>しないで</e>ください。さもないとGentooシステムはパーティションをマウントすることができないでしょう。<c>Virtual memory</c>、 <c>/proc file system</c>も選択してください。もし2.4カーネルを使っているなら、2.4カーネルでは<c>udev</c>をサポートしていないので、<c>/dev file system</c>を選択する必要があります。
</p>

<pre caption="必要なファイルシステムを選択する">
<comment>(2.4.xカーネル用)</comment>
File systems ---&gt;
  Pseudo Filesystems ---&gt;
   [*] /proc file system support
     
   [*] Virtual memory file system support (former shm fs)

<comment>(2.6カーネル用)</comment>
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [ ] /dev file system support (OBSOLETE)

    [*] Virtual memory file system support (former shm fs)

<comment>(下記のオプションで、システムに必要なものを1つ以上選択 訳注:ルートパーティションで選択したファイルシステムは必ず有効にする必要があります)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
もしBIOSが大容量のハードディスクに未対応で上限サイズを知らせるようハードディスクドライブをジャンパーしていれば、ハードディスクの全領域にアクセスできるように次のオプションを有効にしなければなりません。
</p>

<pre caption="autogeometry resizing supportを選択する">
<comment>(2.4.xカーネルのみ)</comment>
ATA/IDE/MFM/RLL support ---&gt;
  IDE, ATA and ATAPI Block devices ---&gt;
    &lt;*&gt;   Include IDE/ATA-2 DISK support
    [ ]     Use multi-mode by default
    [*]     Auto-Geometry Resizing support
</pre>

<p>
ドライブのDMAを有効にするのを忘れないでください。
</p>
    
<pre caption="DMAを有効にする">
Device Drivers ---&gt;
  ATA/ATAPI/MFM/RLL support ---&gt;
    [*] Generic PCI bus-master DMA support
    [*]   Use PCI DMA by default when available
</pre>
		     
<p>
もしインターネット接続にPPPoEを使っていたり、モデムでダイアルアップしているなら、カーネル内の以下のオプションが必要になります。
</p>

<pre caption="PPPoEに必要なドライバーを選択する">
<comment>(2.4.xカーネル用)</comment>
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports

<comment>(2.6.xカーネル用)</comment>
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
2つの圧縮オプションは差し支えは無いけれども、絶対に必要でもありません。<c>PPP over Ethernet</c>オプションもそうです。これはカーネルモードのPPPoEをするために設定されたときだけに<c>rp-pppoe</c>に使用されるものです。
</p>

<p>
もしPPPoEを使用する必要があるなら、カーネルにイーサネットカード用のサポートを含めることを忘れないでください。
</p>

<p>
もしハイパースレッディング(tm)に対応したインテルCPUか、マルチCPUのシステムがあるなら、"Symmetric multi-processing support"を有効にしなければなりません。
</p>

<pre caption="SMPサポートを有効にする">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<note>
マルチコアシステムでは、それぞれのコアを1個のプロセッサとして数えます。
</note>

<p>
もしUSBの入力デバイス(キーボードやマウスなど)を使用するなら、以下も有効にするのを忘れないでください。
</p>

<pre caption="入力デバイスのUSB Supportを有効にする">
USB Support ---&gt;
  &lt;*&gt;   USB Human Interface Device (full HID) support
</pre>

<p>
PCMCIAサポートを必要とするノートPCユーザは、2.4カーネルを使用する場合にカーネル付属のPCMCIAドライバーを利用すべきでは<e>ありません</e>。より最新のドライバは後程インストールされる<c>pcmcia-cs</c>パッケージによって使用可能になります。しかし、2.6カーネルのユーザーはカーネルのPCMCIAドライバを使う方が良いでしょう。
</p>

<p>
2.6カーネルでPCMCIAサポートをコンパイルするのに加えて、現在システムにあるPCMCIAカードブリッジのサポートを有効にするのを忘れないでください。
</p>
   
<pre caption="2.6カーネルでPCMCIAサポートを有効にする">
Bus options (PCI, PCMCIA, EISA, MCA, ISA)  ---&gt;
  PCCARD (PCMCIA/CardBus) support  ---&gt;
    &lt;*&gt; PCCard (PCMCIA/CardBus) support
<comment>(古いPCMCIAカードのサポートが必要なら16bitを選択してください。ほとんどの人は要るでしょう。)</comment>
    &lt;*&gt;   16-bit PCMCIA support
    [*]   32-bit CardBus support
<comment>(下記にある適切なブリッジを選択してください)</comment>
    --- PC-card bridges
    &lt;*&gt; CardBus yenta-compatible bridge support (NEW)
    &lt;*&gt; Cirrus PD6729 compatible bridge support (NEW)
    &lt;*&gt; i82092 compatible bridge support (NEW)
    &lt;*&gt; i82365 compatible bridge support (NEW)
    &lt;*&gt; Databook TCIC host bridge support (NEW)
</pre>

<p>
カーネルの設定が終れば、<uri link="#compiling">コンパイルとインストール</uri>に進んでください。
</p>

</body>
</subsection>
<subsection id="compiling">
<title>コンパイルとインストール</title>
<body>

<p>
これでカーネルの設定がされたので、コンパイルとインストールするときが来ました。設定を終了して、コンパイルの過程を始めてください。
</p>

<pre caption="カーネルをコンパイルする">
<comment>(2.4カーネル用)</comment>
# <i>make dep &amp;&amp; make bzImage modules modules_install</i>

<comment>(2.6カーネル用)</comment>
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
カーネルのコンパイルが終れば、カーネルイメージを<path>/boot</path>にコピーしてください。自分が選んだカーネルにふさわしいと感じるどんな名前でも使って良いですが、その名前は後程ブートローダーを設定する時に必要なので覚えておいてください。<path>&lt;kernel-version&gt;</path>を自分が付けた名前と自分のバージョンに置き換えるのを忘れないでください。
</p>

<pre caption="カーネルをインストールする">
# <i>cp arch/i386/boot/bzImage /boot/&lt;kernel-version&gt;</i>
</pre>

<p>
それでは<uri link="#kernel_modules">カーネルモジュール</uri>に進みましょう。
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>もう一つの選択: genkernelを使う</title>
<body>

<p>
もしこのセクションを読んでいるなら、自分のカーネル設定に<c>genkernel</c>スクリプトを使うのを選んだということです。
</p>

<p>
さてカーネルのソースツリーはインストールされました。自動的にカーネルを構築するのに<c>genkernel</c>スクリプトを使ってカーネルをコンパイルするときがやって来ました。<c>genkernel</c>はインストールCDのカーネルが設定されるのとほとんど同じ方法でカーネル設定するように動作します。カーネルを構築するのに<c>genkernel</c>を使うときは、通常はシステムはインストールCDがするように起動時にすべてのハードウェアを検出します。genkernelではどんな手動のカーネル設定も要求されないので、カーネルをコンパイルするのが苦手だなあという人には理想的な解決策です。
</p>

<p>
それではgenkernelの使い方を見てみましょう。始めにgenkernelのebuildをemergeします。
</p>

<pre caption="genkernelをemergeする">
# <i>emerge genkernel</i>
</pre>

<p>
次に、もし2.6カーネルを設定しようとしているなら、インストールCDで使ったカーネルの設定ファイルをgenkernelが標準のカーネル設定を検索する場所に上書きコピーします。
</p>

<pre caption="インストールCDのカーネル設定を上書きコピーする">
<comment>(2.6カーネルを設定しようとしているときのみこれをしてください。)</comment>
# <i>zcat /proc/config.gz &gt; /usr/share/genkernel/x86/kernel-config-2.6</i>
</pre>

<p>
さあ<c>genkernel all</c>を実行して、カーネルソースをコンパイルしましょう。
しかし<c>genkernel</c>はほとんどすべてのハードウェアサポートを含むカーネルをコンパイルするので、コンパイルが終了するまでにはかなりの時間を要することを覚えておいてください。
</p>

<p>
もし、ブートパーティションのファイルシステムにext2かext3以外(訳注:ReiserFS、JFS、XFSなど)を使用する場合は、<c>genkernel --menuconfig all</c>を使って手動でカーネルを設定し、カーネルの<e>中</e>にそのファイルシステムを組み込む必要があることに気を付けてください(つまり、モジュールとしてでは<e>無く</e>)。EVMS2またはLVM2のユーザーは引数に<c>--evms2</c>または<c>--lvm2</c>も必要になるでしょう。
</p>

<pre caption="genkernelを実行する">
# <i>genkernel all</i>
</pre>

<p>
一旦<c>genkernel</c>が完了すると、カーネル、すべてのモジュールそして<e>イニシャルルートディスク</e>(initrd)が作成されます。このハンドブックで後程ブートローダを設定するときにカーネルとinitrdを使います。ブートローダの設定ファイルを書くときに必要になるので、カーネルとinitrdの名前を書き留めておきましょう。"実際"のシステムが稼働し始める前に、(インストールCDでのように)initrdは起動後すぐにハードウェアの自動検出を始めます。
</p>

<pre caption="作成されたカーネルイメージとinitrdの名前を確認する">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

<p>
さあ、システムがよりインストールCDのようにするために、もう1つのステップを実行しましょう。<c>coldplug</c>をemergeしましょう。initrdはシステムを起動するのに必要なハードウェアを検出しますが、<c>coldplug</c>は他のすべてのハードウェアを検出します。
<c>coldplug</c>をemergeして有効にするには、以下のように入力してください。
</p>

<pre caption="coldplugをemergeして有効にする">
# <i>emerge coldplug</i>
# <i>rc-update add coldplug boot</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>カーネルモジュール</title>

<subsection>
<title>モジュールを設定する</title>
<body>

<p>
自動的にロードさせたいモジュールを<path>/etc/modules.autoload.d/kernel-2.4</path>(もしくは<path>kernel-2.6</path>)に記入してください。もし望むなら、モジュールに追加オプションを加えることもできます。
</p>

<p>
すべての利用可能なモジュールを見るには、次の<c>find</c>コマンドを実行してください。"&lt;kernel version&gt;"に今コンパイルしたカーネルのバージョンを入れてください。
</p>

<pre caption="すべての利用可能なモジュールを見る">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
例えば、<c>3c59x.o</c>モジュールを自動でロードするなら、<path>kernel-2.4</path>か<path>kernel-2.6</path>ファイルを開いて、モジュール名をそこに記入してください。
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.4を編集する">
<comment>(2.4カーネル用の例)</comment>
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4もしくはkernel-2.6">
3c59x
</pre>

<p>
<uri link="?part=1&amp;chap=8">システムの設定</uri>に進んで、インストールを続けてください。
</p>

</body>
</subsection>
</section>
</sections>
