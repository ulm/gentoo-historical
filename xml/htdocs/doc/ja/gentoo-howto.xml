<?xml version='1.0' encoding='euc-jp'?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/gentoo-howto.html">
<title>Gentoo Linux 開発者 HOWTO</title>
<author title="Author"><mail link="woodchip@gentoo.org">Donny Davies</mail></author>
<author title="Author"><mail link="drobbins@gentoo.org">Daniel Robbins</mail></author>
<author title="Author"><mail link="pete@gentoo.org">Peter Gavin</mail></author>
<abstract>
このドキュメントはGentoo LinuxのPortageについて記述します。
Gentooのための新しいパッケージを作成する方法、またさらに多少はGentoo開発者のための基準であるというつもりです。
これは進行中の作業であり絶えず更新され変更されています。従って、決して完全と言うわけではありません。
</abstract>
<version>1.2</version>
<date>24 Apr 2002</date>

<!--

内容

I. はじめに 
II. Portageツリー
  A. なにをPortageツリーに置くか(または置かないか)
  B. 分類
  C. ファイルディレクトリ
III. .ebuildファイル
  A. .ebuildファイルの命名方法
  B. .ebuildファイルの中身
  C. .ebuildファイルの記述規則
IV. ファイルシステムの配置
  A. FHSとは
  B. いかにあなたのパッケージをファイルシステムの中へ適合させるか
V. Portageスクリプトとユーティリティ
  A. 公開スクリプト
  B. プライベートなスクリプト
VI. パッケージ依存関係
    
-->


<chapter>
<title>Portageツリー</title>

<section>
<title>はじめに</title>
<body><p>
Portageツリーは通常<path>/usr/portage</path>の下にあり、指定のパッケージ・ディレクトリに続づけてカテゴリー・ディレクトリの階層的な構造で構成されます。
たとえば、<path>util-linux-2.11g.ebuild</path>のファイルは <path>/usr/portage/sys-apps/util-linux</path>の中で参照できます。
そこには、<path>util-linux-2.11g.ebuild</path>と一緒に<c>util-linux</c>のいくつかのebuildファイルのバージョンがあるかもしれません。
それは、<e>特定のパッケージ(不規則バージョンなし)用のebuild</e>ファイルはすべて、<path>/usr/portage</path>の中の同じ<path>mycat/mypkg</path>ディレクトリを共有するからです。 
</p></body>
</section>

<section>
<title>なにをPortageツリーに置くか(または置かないか)</title>

<body><p>
通常、Portageツリーはパッチやサンプル設定ファイルのような、比較的小さい関連する<path>.ebuild</path>ファイルの保存に使用します。
メインの<path>mycat/mypkg</path>ディレクトリを混乱させないために、これらのタイプのファイルは、 <path>/usr/portage/mycat/mypkg/files</path>ディレクトリに置くべきでしょう。
さらに、開発者がCVSにバイナリ(非ASCII)ファイルを加えることはよくないと言えます。
しかし、どうしてもこれが必要な場合(例えば、何らかの理由でグラフィック用の小さなPNGを加える必要があれば）、<c>-kb</c>オプションの使用することによりCVSにそれを追加します: 
</p>

<pre>
# <i>cvs add -kb myphoto.png</i>
</pre>

<p>
<c>-kb</c>オプションは、<path>myphoto.png</path>が特別にバイナリファイルで扱われるべきであるとCVSに伝えます。たとえば、バイナリファイルの2つの異なるバージョンのマージが起こることが許されないことは明らかでしょう。
さらに、変更マージについて言えば、Portageに加えるどんなパッチも通常は<e>圧縮しないこと</e>とします。
これによりCVSは変更マージが可能となり、矛盾があれば開発者に正確に通知できることとなります。
</p>

</body>
</section>
<!--

<section>
<title>分類</title>
<body><p>
分類は次のように定義されます:
</p>
<table><tr><th>分類</th><th>備考</th></tr>
<tr><ti><path>app-admin</path></ti><ti>
重要でないシステム管理ユーティリティ
</ti></tr>
<tr><ti><path>app-arch</path></ti><ti>
重要でないアーカイバ/圧縮ユーティリティ
</ti></tr>
<tr><ti><path>app-cdr</path></ti><ti> 
CD-Rユーティリティ
</ti></tr>
<tr><ti><path>app-crypt</path></ti><ti> 
暗号化関連のアプリケーション
</ti></tr>
<tr><ti><path>app-doc</path></ti><ti>
アプリケーション用ドキュメント
</ti></tr>
<tr><ti><path>app-editors</path></ti><ti>
重要でないテキストエディタ
</ti></tr>
<tr><ti><path>app-emulation</path></ti><ti>
他のシステム/OSのエミュレータ用パッケージ
</ti></tr>
<tr><ti><path>app-games</path></ti><ti>
ゲーーム!言わずもがな
</ti></tr>
<tr><ti><path>app-misc</path></ti><ti>
他に分類できないアプリケーション
</ti></tr>
<tr><ti><path>app-office</path></ti><ti>
オフィススイート(ワープロ、表計算等)パッケージ
</ti></tr>
<tr><ti><path>app-shells</path></ti><ti>
重要でないシェルとコマンドインタプリタ
</ti></tr>
<tr><ti><path>app-text</path></ti><ti>
テキスト処理(スペルチェッカー、加工等)パッケージ
</ti></tr>
<tr><ti><path>dev-db</path></ti><ti>
データベースライブラリ
</ti></tr>
<tr><ti><path>dev-java</path></ti><ti>
Javaによるクラス/パッケージ等
</ti></tr>
<tr><ti><path>dev-lang</path></ti><ti>
いろんな種類のコンパイラおよびインタプリタ言語
</ti></tr>
<tr><ti><path>dev-libs</path></ti><ti>
種々の開発者向けライブラリ
</ti></tr>
<tr><ti><path>dev-perl</path></ti><ti>
perlモジュール
</ti></tr>
<tr><ti><path>dev-python</path></ti><ti>
pythonモジュール
</ti></tr>
<tr><ti><path>dev-ruby</path></ti><ti>
rubyモジュール
</ti></tr>
<tr><ti><path>dev-tcltk</path></ti><ti>
Tcl-Tkモジュール
</ti></tr>
<tr><ti><path>dev-util</path></ti><ti>
多様な開発者向けユーティリティ
</ti></tr>
<tr><ti><path>gnome-apps</path></ti><ti>
GNOME向けアプリケーション
</ti></tr>
<tr><ti><path>gnome-base</path></ti><ti>
GNOME基本パッケージ
</ti></tr>
<tr><ti><path>gnome-libs</path></ti><ti>
主要でないGNOMEライブラリ
</ti></tr>
<tr><ti><path>gnome-office</path></ti><ti>
GNOME向けオフィススイート
</ti></tr>
<tr><ti><path>kde-base</path></ti><ti>
KDE基本パッケージ
</ti></tr>
<tr><ti><path>kde-i18n</path></ti><ti>
KDEの国際化用パッケージ
</ti></tr>
<tr><ti><path>media-gfx</path></ti><ti>
グラフィック関係プログラム
</ti></tr>
<tr><ti><path>media-libs</path></ti><ti>  
色々なメディア用のマニピュレータライブラリ、マルチメディア機器(サウンドカード、ビデオカード等)を導入した場合のアクセス用
</ti></tr>
<tr><ti><path>media-sound</path></ti><ti>
サウンド関係のプログラム。オーディオCDや音楽などのエンコーダ
</ti></tr>
<tr><ti><path>media-video</path></ti><ti>
ビデオ関係のプログラム。ビデオコーディックスやプレイヤーなど
</ti></tr>
<tr><ti><path>net-analyzer</path></ti><ti>
ネットワーク状態のモニターおよび解析など
</ti></tr>
<tr><ti><path>net-dialup</path></ti><ti>
pppdなどのダイアルアップネットワーク用クライアントおよびサーバ
</ti></tr>
<tr><ti><path>net-fs</path></ti><ti>
ネットワークファイルシステム
</ti></tr>
<tr><ti><path>net-ftp</path></ti><ti>
FTPサーバおよびクライアント
</ti></tr>
<tr><ti><path>net-im</path></ti><ti>
インスタントメッセージ用クライアントおよびサーバ
</ti></tr>
<tr><ti><path>net-irc</path></ti><ti>
IRCサーバおよびクライアント
</ti></tr>
<tr><ti><path>net-libs</path></ti><ti>
ネットワーク関係のライブラリ 
</ti></tr>
<tr><ti><path>net-mail</path></ti><ti>
メールサーバおよびクライアント
</ti></tr>
<tr><ti><path>net-misc</path></ti><ti>
他に分類できないサーバ、クライアント、ファイアウォール等
</ti></tr>
<tr><ti><path>net-nds</path></ti><ti>
NIS/NIS+およびその他のネットワークディレクトリサービス
</ti></tr>
<tr><ti><path>net-news</path></ti><ti>
ネットニュース用サーバおよびクライアント
</ti></tr>
<tr><ti><path>net-print</path></ti><ti>
プリントサーバおよびクライアント
</ti></tr>
<tr><ti><path>net-www</path></ti><ti>
http/wwwサーバおよびクライアント
</ti></tr>
<tr><ti><path>sys-apps</path></ti><ti>
システムの主要なアプリケーションおよびユーティリティ
</ti></tr>
<tr><ti><path>sys-devel</path></ti><ti>
gcc,makeのようなシステム開発の基本パッケージ
</ti></tr>
<tr><ti><path>sys-kernel</path></ti><ti>
Linuxカーネルおよびカーネルソースパッケージ
</ti></tr>
<tr><ti><path>sys-libs</path></ti><ti>
glicのようなシステムで主要なライブラリ
</ti></tr>
<tr><ti><path>x11-base</path></ti><ti>
XFree86や各種ビデオカードドライバのようなX基本パッケージ
</ti></tr>
<tr><ti><path>x11-libs</path></ti><ti>
その他のX指定のライブラリや部品セット
</ti></tr>
<tr><ti><path>x11-terms</path></ti><ti>
Xベースのターミナルエミュレータ
</ti></tr>
<tr><ti><path>x11-wm</path></ti><ti>
Xウィンドウマネージャ
</ti></tr>
</table>
<note>
もし新規のカテゴリを作成した場合は(最初にパーミッションを取得をお忘れなく!),
<path>/usr/lib/python2.0/portage.py</path>にカテゴリを追加が必要です。
</note>
</body>
</section>
-->

<section>
<title>ファイルディレクトリ</title>
<body>

<p>
前述のとおり、各パッケージのもとではサブディレクトリは<path>files</path>ディレクトリです。
パッケージに要求される全てのパッチ、設定ファイルあるいは他の付随的なファイルも、このディレクトリに納められるべきものです。
<path>mypkg-1.0-gentoo.diff</path>のようなバージョンに特有の名前で、
パッケージを単にビルドさせるためにあなた自身が作るパッチが指定されることも考慮したいでしょう。
さらに<path>Gentoo</path>の拡張がこのパッチは私たちGentoo Linux開発者によって作られたと皆さんに通知されたり、メーリング・リストまたはどこかほかの有力な情報元から知らされます。 
再度いいますが、CVSがバイナリファイルでは上手く動作しないので、これらのdiffファイルを圧縮してはなりません。 
</p>

<p>
ファイルディレクトリの中に入れる、すべてのファイルの後ろに<path>mypkg-1.0</path>
のようなサフィックスを加えることを考慮する結果、あなたのebuildスクリプトの個々のバージョンのために使用された ファイルは互いから識別が可能であり、異なるリビジョン間の変更を見ることができます。 
これは一般なことであり実際によい考えです。:) 
よりおおざっぱ、またはきめ細かさが要求される場合は、異なるサフィックスを使用したくなることと思います。 
</p>

<p>
ファイル・ディレクトリに入るべき多くのファイルを持っている場合は、
<path>files/mypkg-1.0</path>のような サブディレクトリを作成し適切なサブディレクトリにあったファイルを入れることを考えてください。
この方法なら、 このディレクトリ(それは他の方法より便利です)中のファイルの名前にはサフィックスを加える必要がありません。 
</p>

</body>
</section>
</chapter>

<chapter>
<title>ebuildスクリプト</title>
<section>
<title>イントロダクション</title>
<body>

<p>
ebuildスクリプトはPortageシステム全体の基本となるものです。
それらは、どんなオプションのpre/postまた install/removeも実行する方法と同様に1セットのソースをダウンロードし、解凍し、コンパイルし、かつインストール するのに必要な情報をすべて含んでいます。
ほとんどのPortageがPythonの中で書かれている一方、私たちがコマンド ラインからbashのコマンドとして実行できるよう、ebuildスクリプトはそれら自身bashの範囲で書かれています。 
ebuildスクリプトの背後にある重要な設計基盤のうちの1つはこのコマンドであることです。 アナログ的にそれらのパッケージを手動でインストールする場合、普通はコマンドラインからタイプするでしょう。
この目的のために、bashの構文を持っていることはよいことだと言えます。
</p>

<p>
Ebuildスクリプトは<c>ebuild</c>と<c>emerge</c>コマンドによって解釈されます。
<c>ebuild</c>コマンドはロー・レベルのビルドツールと見なしてください。
それは単一のebuildでありビルドしインストールすることは出来ますが、それ以上のものではありません。 
また、依存性を満足するかどうかチェックすることは出来ますが、自動的な問題解決は行われません。 
いっぽう<c>emerge</c>は、<c>ebuild</c>のためのハイ・レベルのエンジンであり、 依存性を自動マージする<e>能力</e>を持っていますので、もし必要ならば"pretend"mergesを実行することで、どんなebuildsがマージされるかなどさらに参照することができます。 
一般に、<c>emerge</c>は、1つのエリア以外においては<c>ebuild</c>を完全に破壊します。
<c>ebuild</c>dで、パッケージのインストール作業(取得・解凍・コンパイル・インストール・マージすること)手順を一度に歩むことができます。 
開発者にとって、構造プロセスの特定の部分のebuildに派生する問題を分離することが可能であり、非常に貴重な デバッギング・ツールとなります。 
</p>

</body>
</section>

<section>
<title>ebuildファイルの命名方法</title>
<body>

<p>
Ebuildファイル名は4つの論理セクションから成ります:
</p>

<p>
第1のセクションはパッケージ名であり、それは英小文字、数字0-9および任意の数のハイフン('-')で構成されています。 
いくつか例を上げれば<c>util-linux</c>, <c>sysklogd</c>および<c>glibc</c>などがあります。 
</p>

<p>
第2のセクションはパッケージのバージョン(それは、メインソースのtarball上のバージョンと通常同じはず)です。 
バージョンは通常、<c>1.2</c>あるいは<c>4.5.2</c>(非常に長いピリオドで分割された番号シーケンスもサポートされています)のようなピリオドで分離された2つあるいは3つの数から構成され、
最後の数字に接続して(例えば<c>1.4b</c>または<c>2.6h</c>のように)一個の文字があっても構いません。 
パッケージ・バージョンはハイフンでパッケージ名に接続します。
例えば<c>foo-1.0</c>,<c>bar-2.4.6</c>等々。
</p>

<impo>
あなたのバージョン文字列中に付加文字を使用しようと思っている場合は、
アルファとベータが<e>プレリリース</e>であり、
文字修正がより<e>新しいバージョン</e>であるので、パッケージ用、
アルファあるいはベータ・ステータスを示すためには、
付加文字に使用しては<e>ならない</e>ことに注意が必要です。 
Portageが、それが同じカテゴリおよび名称である他のパッケージの新旧を決定するのにebuildの バージョン番号を使用するため、これは重要な区分です。 
Portageがその依存性をチェックするという役割を適切に実行するために、バージョン番号が誠実にパッケージの バージョンを表わすことは非常に重要です。 
</impo>

<p>
第3(オプション)セクションは特別の接尾辞を含んでいます。
これは<c>_alpha</c>, <c>_beta</c>, <c>_pre</c>または<c>_rc</c>の組み合わせのいずれかです。 
これらの接尾辞のうち、自分の番号として(例えば<e>linux-2.4.0_pre10</e>)どれが続いても構いません。
同一のバージョン部分を仮定して、<c>_alpha</c>パッケージは<c>_beta</c>より古く、 <c>_beta</c>は<c>_pre</c>、および<c>_pre</c>は<c>_rc</c>より古いものと見なします。
</p>

<note>
<c>_rc</c>を持つパッケージは、下線のない(<c>linux-2.4.0</c>のような)パッケージより古いです。 
また<c>linux-2.4.0</c>は、単一の文字接頭辞(つまり<c>linux-2.4.0b</c>)で示すパッケージより古いと言えます。 
もうお分かりのように、<c>linux-2.4.0b</c>パッケージは<c>linux-2.4.0c</c>より古いと考えられます。
重ねて言いますが、Portageが1つのパッケージあるいはebuildが同じカテゴリーおよび名前である場合に別のものより新しいかどうか決めるためにそれを内部に使用しますので、このバージョニングに関する情報は重要です。
</note>

<p>
パッケージ名の第4の(オプション)セクションはGentoo Linux特有の<e>リビジョン番号</e>です。 
<c>-r#</c>により指定され、この場合の<c>#</c>は(package-4.5.3-r3等)整数です。 
このリビジョン番号はソースのバージョンに依存せず、新しく改善された特定のGentoo Linuxリビジョンパッケージが 利用可能であると通知するために使用されます。
</p>

<p>
既存のebuildファイルへの有益な改良を作れば、1つインクリメントされたリビジョン番号の新しいファイルにebuildファイルをコピーしましょう。 
初期のリリースは通常<path>package-4.5.3</path>のようにリビジョン番号を持っていません。
そしてこれはPortageによって、いわゆる0のリビジョン番号であると解釈されます。
つまり、カウントは次のように行なわれることを意味しています:<c>1.0</c>(初期のバージョン)、<c>1.0-r1</c>、<c>1.0-r2</c>など。
</p>

<p>
また、現実には私たちはebuild名の<e>5番目</e>のセクションを持っていると思います。
つまり<c>.ebuild</c>拡張子自身です。
</p>

</body>
</section>

<section>
<title>ebuildファイルの内容</title>
<body>
<p>1. 変数の設定:</p>
<p>
すべてのebuildファイルの第1の部品は多くの変数設定から構成されます。
セットすることができる変数は次のとおりです。

</p>
<table>
<tr><ti><c>P</c></ti><ti>
パッケージの名前およびバージョン;ebuildファイルの名前から決定されますので、これをセットする必要がありません。
</ti></tr>
<tr><ti><c>A</c></ti><ti>
パスを省略したメインアーカイブファイル名
</ti></tr>
<tr><ti><c>S</c></ti><ti>
パッケージのソースディレクトリ; 通常は ${WORKDIR}/${P}です。
</ti></tr>
<tr><ti><c>DESCRIPTION</c></ti><ti>
パッケージの備考を簡潔に１行で示したもの。
</ti></tr>
<tr><ti><c>SRC_URI</c></ti><ti>
パッケージの全てのソースファイルのあるURIでスペースで分離されます。 
通常は、トップに&quot;ftp://ftp.company.com/pub/somepackage/${A}&quot;のように記述されます。 
</ti></tr>
<tr><ti><c>HOMEPAGE</c></ti><ti>
パッケージのホームページ
</ti></tr>
<tr><ti><c>DEPEND</c></ti><ti>
ビルド時の依存関係：次を参考にしてください <uri link="#dependencies">Package Dependencies
</uri></ti></tr>
<tr><ti><c>RDEPEND</c></ti><ti>ランタイムの依存関係; 次を参考にしてください <uri link="#dependencies">Package Dependencies
</uri></ti></tr>
</table>

<p>2. ebuildの機能</p>
<p>
ここには、あなたのパッケージのビルドおよびインストールプロセスをコントロールするebuildファイルに定義するための様々な機能があります。
</p>
<table>
<tr><ti><c>pkg_setup</c></ti><ti>
この機能の使用により、多岐にわたる先行条件のタスクを実行します。 
これはシステム・アカウントを加えるか既存の設定ファイルをチェックすることを含んでいるかもしれません。 
この機能は、処理が進むために0を返すことでしょう。
</ti></tr>
<tr><ti><c>src_unpack</c></ti><ti>
この機能の使用により、あなたのソースを解凍し、また必要ならautoconf/automake/などを実行します。 
デフォルトにより、<c>${A}</c>の中のパッケージを解凍します。
デフォルトの開始ディレクトリは<c>${WORKDIR}</c>で示されます。
</ti></tr>
<tr><ti><c>src_compile</c></ti><ti>
この機能の使用により、パッケージを設定し構築します。 
デフォルトの開始ディレクトリは<c>${S}</c>で示されます。 
ディレクトリを始めるデフォルトは<c>${S}</c>です。
</ti></tr>
<tr><ti><c>src_install</c></ti><ti>
この機能の使用により、<c>${D}</c>にイメージへのパッケージをインストールします。 あなたのパッケージがautomakeを使用する場合、単にmakeで<c>make DESTDIR=${D} install</c>を行うことができます。 
<e>もちろんパッケージが<c>${D}</c>を使用するためにrootで全てインストールできることを確認してください。</e>
</ti></tr>
<tr><ti><c>pkg_preinst</c></ti><ti>
このファンクションのコマンドはファイルシステムへパッケージ・イメージをマージする前に実行されます。
</ti></tr>
<tr><ti><c>pkg_postinst</c></ti><ti>
このファンクションのコマンドはファイルシステムへパッケージ・イメージをマージした 後に実行されます。
</ti></tr>
<tr><ti><c>pkg_prerm</c></ti><ti>
このファンクションのコマンドはファイルシステムからのパッケージ・イメー ジのマージを解消するのに先立って実行されます。
</ti></tr>
<tr><ti><c>pkg_postrm</c></ti><ti>
このファンクションのコマンドはファイルシステムからのパッケージ・イメー ジのマージを解消したあとに実行されます。
</ti></tr>
<tr><ti><c>pkg_config</c></ti><ti>
このファンクションを使用してセットアップし、その後のパッケージのための初期設定がインストールされます。 このファンクション中のパスはすべて${ROOT}を前に付けられるべきです。
ユーザが実行すると、このファンクションが<e>ただ単に</e>実行されます: 
<c>ebuild /var/db/pkg/${CATEGORY}/${PF}/${PF}.ebuild config</c>.
</ti></tr>
</table>
</body>
</section>

<section>
<title>ebuildファイルを書くときの規則</title>
<body>
<p>
ebuildファイルは実際には単なるにシェルスクリプトですので、それらの編集のた めにエディタのシェルスクリプトモードを使用するべきです。
タブ文字だけ を使用して、適切なインデントを使用してください。
この場合、スペースではありませ ん。4つのスペースでタブ・ストップを置くためにエディタがセットされていることを確認してください。
環境変数のまわりのブレースを使用することを常 に確かめるようにしてください;例えば<c>$P</c>と書くべきところは<c>${P}</c>とします。 
</p>

<p>
長い行の場合は次のように'\'を付けて折り返しを行ないます: 
</p>
<pre>
./configure \
	--prefix=/usr || die "configure failed"
</pre>

<p>
その他の詳細に関しては、<path>skel.ebuild</path>(skel.ebuildの中にあります)を参照してください。 
</p>

<p>
Vimを使用していれば、Gentooに関連するものをすべて編集する場合に正しいセッティングを使用していることを確実にするために.vimrcの最下行に次の行を追加することができます。 
</p>

<pre>
if (getcwd() =~ 'gentoo-x86\|gentoo-src\|portage')
	set tabstop=4 shiftwidth=4 noexpandtab
endif
</pre>
<p>
TODO:emacsに関するものも加えてください。
</p></body>
</section>

<section>
<title><c>USE</c>変数</title>

<body>

<p>
USE変数の目的は、あなたが全体的におよび自動的にある<e>build-timeオプション</e>を有効か無効にするPortageを形成することを可能にすることです。
一例として、あなたがGNOMEファンであるとしましょう。
そうすると、コンパイル中のオプションのGNOMEサポートのオプションを持っているすべてのebuildを好まれると思います。
この場合、<path>/etc/make.conf</path>の中の<c>USE</c>変数に<c>gnome</c>を加えるでしょう。
次に、それが利用可能な場合、Portageは自動的にパッケージにオプションのGNOME対応を加えるでしょう。同様に、それらが利用可能な場合に、オプションのGNOMEサポートをebuildに加えたくないなら、単に<path>/etc/make.conf</path>を編集して、<c>gnome</c>が<c>USE</c>変数の中でセットされて<e>いない</e>ことを確認します。
Gentoo Linuxは、あなたが望むようにシステムを形成できる数多くのUSEオプションを持っています。 

<note> 
あなたがUSE変数(例えば<c>USE</c>から<c>gnome</c>を取り除くなど) をセットしなおしても、これはGNOMEのbuild-timeサポートの<e>オプション</e>を不能にするようにPortageに単に命じるだけです。
しかし、あなたがGNOMEを<e>要求する</e>ebuildを<c>emerge</c>すれば、期待通りパッケージは明白にGNOMEサポートを可能にするでしょう。
これは、さらにGNOMEがまだインストールされていない場合は(依存性として)自動的にインストールされるだろうということを意味します。
そのため、"実際"のemergeの前に<c>emerge --pretend</c>を行うことはうまいやり方です。
取り込むものを事前に知ることが出来ます。 
</note>
自分のebuildsでは、<c>use &lt;variable&gt;</c>コマンドの使用により、 USE変数がセットされるかどうかチェックすることができます。 <c>use</c>コマンドは、<c>USE</c>およびそのコマンドラインの両方の中にある、すべての変数の名前を出力します。通常は以下のように使用します: 
</p>
<p><c>if [ &quot;`use X`&quot; ]; then commands; fi</c></p>

<p>
USE変数も依存性をセットするためだけに使用することができます。
例えば、あるUSE変数がセットされている場合、パッケージを単に要求したいと思うでしょう。
これはあなたのebuildのためのDEPEND変数の中で<c>variable? ( mycat/mypackage-1.0-r1 )</c>の記述により行われます。
この例において、<c>変数</c>が<c>USE</c>の中にある場合、<c>mycat/mypackage-1.0-r1</c>は単に要求されるだけです。 
</p>

<p>
次に、<c>USE</c>を使用する方法に関して重要なTipsを示します。
通常、パッケージはコンフィギュレーションステップを実施するために <c>./configure</c>スクリプトを使用するでしょう。
一般的には、あなたのebuildが<c>./configure</c>を使用する場合、あらゆるオプションのbuild-time機能も、適切な引き数を<c>./configure</c>コマンドへ渡すことにより有効か無効になります。
ここに、これを扱う適切な方法があります。
まず、あなたが<c>USE</c>サポートを加えたい特別の<c>./configure</c>オプションを探し出し、デフォルトによって<e>enabled</e>または<e>disabled</e>とします。
そしてデフォルトで<e>enabled</e>になる場合は、以下のような手順をとって下さい: 
</p>
<pre>
DEPEND="gnome? ( &gt;=gnome-base/gnome-1.4 )
	mysql? ( &gt;=dev-db/mysql-3.23.49 )"

src_compile() {
	local myconf
	use gnome || myconf="--disable-gnome"
	use mysql || myconf="${myconf} --disable-mysql"

	./configure ${myconf} --prefix=/usr --host=${CHOST} || die
	emake || die
}
</pre>
<p>
上記では、<c>gnome</c>および<c>mysql</c>の<c>USE</c>変数が無効であるかをどうかをチェックします。 
<c>use gnome ||</c>のテスト部分は、<c>gnome</c>は <c>USE</c>変数に存在し、そうでなければ次に、<c>myconf="--disable-gnome"</c>に存在します。
このパッケージについては、それらが両方ともデフォルトにより有効になるので、明示的にGNOMEまたはMySQLを有効にする必要はありません。
しかしながら、特定の組み込みがデフォルトにより<c>無効</c>になる場合、次のアプローチ方法を用いてもかまいません: 

</p>
<pre>
DEPEND="gnome? ( &gt;=gnome-base/gnome-1.4 )
	mysql? ( &gt;=dev-db/mysql-3.23.49 )"

src_compile() {
	local myconf
	use gnome &amp;&amp; myconf="--enable-gnome"
	use mysql &amp;&amp; myconf="${myconf} --enable-mysql"

	./configure ${myconf} --prefix=/usr --host=${CHOST} || die
	emake || die
}
</pre>



<p>
この時、それぞれの<c>USE</c>変数でセットされている場合、明示的にGNOMEとMySQLサポートを可能にします。 
<c>use mysql &amp;&amp;</c>がUSE変数に、<c>mysql</c>次に、<c>myconf="${myconf} --enable-mysql"</c>をセットしても、使用部分はテストします。 
</p>

<p>
次にあるUSE変数が、Gentoo Linuxの中で現在使用されます: 
</p>

<table>
<tr><th>変数</th><th>備考</th></tr>
<tr><ti>3dfx</ti><ti>
XFree86での3dfxビデオカードサポートの追加。voodoo3参照
</ti></tr>
<tr><ti>3dnow</ti><ti>
3dnowマルチメディアプロセッサ命令用であるddsサポートの追加
</ti></tr>
<tr><ti>aalib</ti><ti>
media-libs/aalib (ASCI-グラフィックライブラリ)サポートの追加
</ti></tr>
<tr><ti>acl</ti><ti>
sys-apps/acl(XFS dump/restore ユーティリティ)サポートの追加
</ti></tr>
<tr><ti>afs</ti><ti>
OpenAFS(ファイル配布システム)サポート
Adds OpenAFS support (distributed file system)
</ti></tr>
<tr><ti>alsa</ti><ti>
media-libs/alsa-lib (先進的なLinuxサウンド用アーキテクチャ)サポート
</ti></tr>
<tr><ti>apm</ti><ti>
APM(先進的な電源管理システム)サポート
Adds APM (Advanced Power Management) support
</ti></tr>
<tr><ti>arts</ti><ti>
aRts（KDE用サウンドデーモン）サポート
</ti></tr>
<tr><ti>atlas</ti><ti>
dev-lang/の中にあるblas代替となるatlasサポート
</ti></tr>
<tr><ti>avi</ti><ti>
Win32 AVIサポート、およびaviファイル(avi用ライブラリ)サポート
</ti></tr>
<tr><ti>berkdb</ti><ti>
sys-libs/db(MySQL用バークレー版DB)サポート
</ti></tr>
<tr><ti>bonobo</ti><ti>
gnome-base/bonobo (Gnome CORBAインターフェース)サポート
</ti></tr>
<tr><ti>crypt</ti><ti>
encryptionサポート -- mcryptまたはgpg適用に使用
</ti></tr>
<tr><ti>cups</ti><ti>
CUPS (Common Unix Printing System)サポート
</ti></tr>
<tr><ti>dga</ti><ti>
DGA(Xfree86)サポート、(DGA=Direct Graphic Access)
</ti></tr>
<tr><ti>directfb</ti><ti>
DirectFBレイヤーサポート(FBデバイス用ライブラリ)
</ti></tr>
<tr><ti>doc</ti><ti>
fe.xによる生成の拡張gtk-docサポート
</ti></tr>
<tr><ti>dvd</ti><ti>
DVDサポート
</ti></tr>
<tr><ti>encode</ti><ti>
MEncoderまたはLaMEのどちらか適用のエンコーダサポート
</ti></tr>
<tr><ti>esd</ti><ti>
media-sound/esound(Enlighten風サウンドデーモン)サポート 
</ti></tr>
<tr><ti>evo</ti><ti>
gnumericのevolutionサポート
</ti></tr>
<tr><ti>fbcon</ti><ti>
カーネル経由のコンソールでのフレームバッファサポート
</ti></tr>
<tr><ti>flash</ti><ti>
Mingを使用したflashファイル作成サポート
</ti></tr>
<tr><ti>gb</ti><ti>
gnumericのgb(Gnome Base)サポート
</ti></tr>
<tr><ti>gd</ti><ti>
sys-libs/gdbm (GNUデータベースライブラリ)サポート
</ti></tr>
<tr><ti>gdbm</ti><ti>
sys-libs/gdbm (GNUデータベースライブラリ)サポート
</ti></tr>
<tr><ti>ggi</ti><ti>
media-libs/libggi(Xに依存しないビデオAPI/ドライバ)サポート
</ti></tr>
<tr><ti>ggz</ti><ti>
Gnu Gaming Zoneサポート - http://ggz.sf.netを参照
</ti></tr>
<tr><ti>gif</ti><ti>
GIFイメージサポート
</ti></tr>
<tr><ti>gnome</ti><ti>
GNOMEサポート
</ti></tr>
<tr><ti>gphoto2</ti><ti>
デジタルカメラサポート
</ti></tr>
<tr><ti>gpm</ti><ti>
sys-libs/gpm(コンソールベースのマウスドライバ)サポート
</ti></tr>
<tr><ti>gtk</ti><ti>
x11-libs/gtk+ (GIMPツールキット)サポート
</ti></tr>
<tr><ti>gtkhtml</ti><ti>
gnome-extra/gtkhtmlサポート
</ti></tr>
<tr><ti>guile</ti><ti>
dev-util/guile(Schemeインタプリタ)サポート
</ti></tr>
<tr><ti>icc</ti><ti>
パッケージがサポートしていればインテルC++コンパイラ(ICC)の使用
</ti></tr>
<tr><ti>icc-pgo</ti><ti>
iccを使用する場合のPGOデータジェネレータの使用または使用許可
</ti></tr>
<tr><ti>imap</ti><ti>
IMAPサポート
</ti></tr>
<tr><ti>imlib</ti><ti>
media-libs/imlib (イメージローダーおよびレンダリング・ライブラリ)サポート
</ti></tr>
<tr><ti>innodb</ti><ti>
mySQL用innodbサポート(トランザクションサポート)
</ti></tr>
<tr><ti>ipv6</ti><ti>
IP v6サポート
</ti></tr>
<tr><ti>java</ti><ti>
Javaサポート
</ti></tr>
<tr><ti>jpeg</ti><ti>
JPEGイメージサポート
</ti></tr>
<tr><ti>kde</ti><ti>
kde-base/kde(K統合デスクトップ環境)サポート
</ti></tr>
<tr><ti>lcms</ti><ti>
media-gfx/imagemagick(カラー管理)のlcms サポート
</ti></tr>
<tr><ti>ldap</ti><ti>
LDAP(Lightweight Directory Access Protocol)サポート
</ti></tr>
<tr><ti>libg++</ti><ti>
dev-db/postgresql(libpq++)モジュールのC++サポート
</ti></tr>
<tr><ti>libgda</ti><ti>
gnumericのGNUデータアクセス(CORBAラッパー)サポート
</ti></tr>
<tr><ti>libwww</ti><ti>
libwwwサポート(一般目的のWEB API)
</ti></tr>
<tr><ti>matrox</ti><ti>
mplayerのMatrox MGAサポート
</ti></tr>
<tr><ti>mikmod</ti><ti>
SoundTracker形式の音楽ファイルを利用するためのlibmikmodサポート
</ti></tr>
<tr><ti>mmx</ti><ti>
Pentium MMXとAthlonクラスCPUの最適化サポート
</ti></tr>
<tr><ti>motif</ti><ti>
motif(Open Motif)サポート
</ti></tr>
<tr><ti>mozaccess-builtin</ti><ti>
mozillaのtext-to-speechと結果として点字のサポート 
</ti></tr>
<tr><ti>mozctl</ti><ti>
mozilla (???)のPango風モジュール追加
</ti></tr>
<tr><ti>mozilla</ti><ti>
mozillaサポート
</ti></tr>
<tr><ti>mozirc</ti><ti>
IRC (Internet Relay Chat)のmozilla用モジュール追加
</ti></tr>
<tr><ti>mozxmlterm</ti><ti>
mozillaのXterm風ターミナル用XMLサポート
</ti></tr>
<tr><ti>mpeg</ti><ti>
多くのパッケージのためのlibmpeg3サポート
</ti></tr>
<tr><ti>mysql</ti><ti>
mySQLサポート
</ti></tr>
<tr><ti>nas</ti><ti>
network audio soundサポート
</ti></tr>
<tr><ti>ncurses</ti><ti>
ncurses(コンソール表示ライブラリ)サポート 
</ti></tr>
<tr><ti>nls</ti><ti>
Native Language サポート (gettext - GNUロケール・ユーティリティ使用)
</ti></tr>
<tr><ti>nocardbus</ti><ti>
pcmcia-csのcardbus使用不可サポート
</ti></tr>
<tr><ti>odbc</ti><ti>
ODBC(Open DataBase Connectivity)サポート
</ti></tr>
<tr><ti>oggvorbis</ti><ti>
OggVorbisオーディオエンコーディングサポートシステム
</ti></tr>
<tr><ti>opengl</ti><ti>
OpenGLサポート
</ti></tr>
<tr><ti>oss</ti><ti>
OSS(Open Sound System)サポート
</ti></tr>
<tr><ti>pam</ti><ti>
PAM(Pluggable Authentication Modules)サポート
</ti></tr>
<tr><ti>pcmcia</ti><ti>
PCMCIAのノートパソコンにおけるスロット/デバイス検索サポート
</ti></tr>
<tr><ti>pda</ti><ti>
PDAサポート
</ti></tr>
<tr><ti>pdflib</ti><ti>
PDF(Portable Document Format)サポート
</ti></tr>
<tr><ti>perl</ti><ti>
Perlサポートまたは構築
</ti></tr>
<tr><ti>pic</ti><ti>
gcc (???)のPICサポート
</ti></tr>
<tr><ti>plotutils</ti><ti>
gnuplot (2-Dベクタ方式グラフィックライブラリ) plotutilsサポート
</ti></tr>
<tr><ti>png</ti><ti>
libpng (PNGイメージ)サポート
</ti></tr>
<tr><ti>pnp</ti><ti>
pcmcia-csのPNP(Plug-N-Play)サポート
</ti></tr>
<tr><ti>postgres</ti><ti>
postgreSQLサポート
</ti></tr>
<tr><ti>python</ti><ti>
Pythonのサポートおよび構築
</ti></tr>
<tr><ti>qt</ti><ti>
QTライブラリサポート
</ti></tr>
<tr><ti>qtmt</ti><ti>
マルチスレッドQTサポート
</ti></tr>
<tr><ti>quicktime</ti><ti>
OpenQuickTimeサポート
</ti></tr>
<tr><ti>readline</ti><ti>
libreadlineサポートを可能とする。誰でも欲しがるGNUラインエディタライブラリ
</ti></tr>
<tr><ti>ruby</ti><ti>
Rubyサポートおよび構築
</ti></tr>
<tr><ti>samba</ti><ti>
SAMBAサポート
</ti></tr>
<tr><ti>sdl</ti><ti>
Simple Direct Layer (メディアライブラリ)サポート
</ti></tr>
<tr><ti>slang</ti><ti>
slangサポート(ncurses似だが,ちょっと違う)
</ti></tr>
<tr><ti>slp</ti><ti>
CUPS(Common Unix Printing System)のService Locator Protocolサポート
</ti></tr>
<tr><ti>snmp</ti><ti>
もしサービス可能ならSimple Network Management Protocol（SNMP)サポート
</ti></tr>
<tr><ti>socks5</ti><ti>
socks5プロキシサポート
</ti></tr>
<tr><ti>spell</ti><ti>
辞書サービスサポート
</ti></tr>
<tr><ti>sse</ti><ti>
PentiumクラスCPUの高速浮動少数演算処理の最適化
</ti></tr>
<tr><ti>ssl</ti><ti>
Secure Socket Layer接続サポート
</ti></tr>
<tr><ti>static</ti><ti>
ダイナミックライブラリのスタティックリンク
</ti></tr>
<tr><ti>svga</ti><ti>
SVGAlib (グラフィックライブラリ)サポート
</ti></tr>
<tr><ti>tcltk</ti><ti>
Tclおよび(または)Tkサポート
</ti></tr>
<tr><ti>tcpd</ti><ti>
TCP wrappersサポート
</ti></tr>
<tr><ti>tetex</ti><ti>
teTeXサポート
</ti></tr>
<tr><ti>tiff</ti><ti>
tiffイメージフォーマットサポート
</ti></tr>
<tr><ti>truetype</ti><ti>
FreeTypeまたはFreeType2フォントサポート
</ti></tr>
<tr><ti>trusted</ti><ti>
pcmcia-cs用プログラムの信頼性の高いバージョンの構築
</ti></tr>
<tr><ti>voodoo3</ti><ti>
3DfxのVoodoo3サポート、また使用していない場合のデフォルトでのVoodoo4/5サポート
</ti></tr>
<tr><ti>X</ti><ti>
XFree86サポート
</ti></tr>
<tr><ti>xface</ti><ti>
xfaceサポート -- sylpheedおよびsylpheed-clawsで使用しているもののみ
</ti></tr>
<tr><ti>xml</ti><ti>
XMLライブラリ(ver1)チェックおよびサポート用フラグ
</ti></tr>
<tr><ti>xml2</ti><ti>
XMLライブラリ(ver2)チェックおよびサポート用フラグ
</ti></tr>
<tr><ti>xmms</ti><ti>
XMMS (X MultiMedia System)プレーヤーチェックおよびサポート 
</ti></tr>
<tr><ti>xv</ti><ti>
Xvideo拡張(video playbackのX API)オプションサポート
</ti></tr>
<tr><ti>zeo</ti><ti>
Zope Enterprise Objectsサポート
</ti></tr>
</table>
</body>
</section>
</chapter>

<chapter>
<title>ファイルシステムの配置</title>

<section>
<title>FHSとは</title>
<body>
<p>
Gentoo Linuxの中で使用されるファイルシステム・レイアウトの標準はFHS(<e>Filesystem Hierarchy Standard</e>の略)に準拠します。標準のシンプルな記述はここで記述しますが、完全な詳細については、 <uri>http://www.pathname.com/fhs/</uri>を参照して下さい。 
</p>
<note> 
<path>/opt</path>階層はFHSのセクション3.12にアドレスされます。セクション4.4は<path>/usr/X11R6</path>ディレクトリに対応します。 KDEとGNOMEは特にアドレスされず、要するにFHSの現行バージョンで公平に言及されていません。 
</note>
</body>
</section>

<section>
<title>いかにあなたのパッケージをファイルシステムの中へあてはめるか</title>
<body><p>
通常、パッケージがautoconfおよびautomakeを使用する場合、デフォルトのインストール先は少数の例外を除いて適切なものです: 
</p>
<ul>
<li>
あなたが、<path>/bin</path>、<path>/sbin</path>、 <path>/usr/bin</path>あるいは<path>/usr/sbin</path>へプログラムをインストールしていれば、プログラムの対応するmanページが<path>/usr/share/man</path>のツリーへインストールされるべきです。これはebuildの中の<c>./configure --mandir=/usr/share/man</c>の指定により大抵遂行することができます。 
</li>
<li>
<e>X11、GNOMEあるいはKDEに特有のプログラムかツールに関係していた</e>としてもGNU infoファイルは<path>/usr/share/info</path>に常にインストールされるべきです。
書き留めて下さい:<path>/usr/share/info</path>はGNU infoファイルのための<e>唯一</e>の公式な場所です。
ほとんどの<c>./configure</c>スクリプトが自動的に<path>/usr/info</path>にGNU infoファイルをインストールすることになるので、<c>./configure</c>を<c>--infodir=/usr/share/info</c>引数付で呼ぶことは大抵の場合に必要です。 
</li>

<li>
ドキュメンテーション・ファイルは、特定のプログラム名、バージョンおよびリビジョンを反映するサブディレクトリの<path>/usr/share/doc</path>にインストールされます。 
これはGNOME、KDE、X11およびコンソール等々、すべてのプログラムに当てはまります。
しかしながら、いくつかのプログラムは補足のドキュメンテーションおよびサポートファイルを、自分の目的にあった<path>/usr/share</path>の階層へインストールするかもしれません。 
</li>

<li>
X11に特有のプログラムおよびライブラリは、<path>/usr/X11R6</path>直接ではなく<path>/usr</path>へインストールされるべきです。
私たちは、Xウィンドウ・システムのバージョン11リリース6<e>自体</e>のために<path>/usr/X11R6</path>の階層を確保しておきます。
これは恐らく他のディストリビューションが作ったFHSの拡大解釈です。 
</li>

<li>
GNOMEとKDEのプログラムは、同様に<path>/usr</path>へ常にインストールされるべきです。 
</li>

</ul>
<impo> 
いくつかのディストリビューションでは<path>/opt</path>へGNOMEとKDEをインストールするようになっています。
現実にそれらのファイルをインストールするべき場所として、これらのデスクトップ環境のための基準はありません。
単純性と一貫性のために、私たちは<path>/usr</path>階層へKDEおよびGNOME パッケージをすべてインストールすることにします。 
</impo>

<p>
一般的には、ebuildsに<path>/usr</path>ツリーへそれらのファイルをインストールさせるべきでしょう。 
<e>いくつかの</e>プログラムはGNOME、KDEおよびX11ライブラリ(それらは混乱の原因となる)を使用、または使用せずにコンパイルしリンクすることができます。
私たちの解決方法は、ebuild作者の曖昧さおよび不必要な複雑さを回避するために、<path>/usr</path>へすべてをインストールすることです。
プログラムのファイルをインストールする位置は、特定の<c>USE</c>変数の存在か不在かに<e>依存してはなりません</e>。
したがって、Portageツリーのebuildは、<e>ほとんど常に</e>排他的に<path>/usr</path>階層へインストールすることにします。 
</p>

<note>
<path>/opt</path>ディレクトリはGentoo Linuxの中でバイナリのみのパッケージのために取ってあります。
例えばmozilla-bin、acroread、ネットスケープおよびリアルプレーヤーなどが含まれています。
ここにインストールされるパッケージは通常<path>/etc/env.d/foo</path>などのスタブ・ファイルを要求するでしょう。
システム環境へパスおよび追加の変数を含むことができるようにそうしています。 
</note>
</body>
</section>
</chapter>

<chapter>
<title>Portageスクリプトとユーティリティ群</title>

<section>
<title>公開スクリプト</title>
<body><p>
これらはパッケージをインストールし削除し、かつパッケージ・データベースを維持するためにシステム管理者によって使用されるスクリプトです。 
</p>
<p>
<c>ebuild</c>はPortageシステムの主要なエンジンです。それは、解凍し、コンパイルし、インストールし、マージし、マージの解消するような主なタスクをすべて実行します。
これは<c>ebuild path/to/package.ebuild command</c>のような形式でコマンドが呼び出されます。
利用可能なコマンドは次のとおりです。

</p>
<table>
<tr><th>コマンド</th><th>備考</th><th><c>ebuild</c>機能との連携</th></tr>
<tr><ti>*<c>setup</c></ti><ti>
ebuildが進行する前に要求されたあらゆるコマンドを実行します
</ti><ti><c>pkg_setup</c></ti></tr>
<tr><ti><c>depend</c></ti><ti>
パッケージを構築する際に要求される依存性の表示 
</ti><ti>n/a</ti></tr>
<tr><ti><c>check</c></ti><ti>
パッケージ依存関係が満たされていることのチェック
</ti><ti>n/a</ti></tr>
<tr><ti><c>rcheck</c></ti><ti>
パッケージのランタイム依存関係が満たされていることのチェック
</ti><ti>n/a</ti></tr>
<tr><ti><c>merge</c></ti><ti>
解凍、コンパイル、インストールおよびファイルシステムへのマージ
</ti><ti>n/a</ti></tr>
<tr><ti>*<c>qmerge</c></ti><ti>
既に解凍、コンパイル、インストールされたものと見なしてファイルシステムへパッケージをマージ 
</ti><ti>n/a</ti></tr>
<tr><ti>*<c>unpack</c></ti><ti>
作業ディレクトリへのソースtarballの解凍 
</ti><ti><c>src_unpack</c></ti></tr>
<tr><ti>*<c>compile</c></ti><ti>
パッケージのコンパイル
</ti><ti><c>src_compile</c></ti></tr>
<tr><ti><c>rpm</c></ti><ti>
パッケージからRPMの作成
</ti><ti>n/a</ti></tr>
<tr><ti><c>package</c></ti><ti>
Gentooの<c>tbz2</c>パッケージ作成
</ti><ti>n/a</ti></tr>
<tr><ti>*<c>prerm</c></ti><ti>
パッケージの事前削除ステージを実行
</ti><ti><c>pkg_prerm</c></ti></tr>
<tr><ti>*<c>postrm</c></ti><ti>
パッケージの事後削除ステージを実行
</ti><ti><c>pkg_postrm</c></ti></tr>
<tr><ti>*<c>preinst</c></ti><ti>
パッケージの事前インストールステージの実行
</ti><ti><c>pkg_preinst</c></ti></tr>
<tr><ti>*<c>postinst</c></ti><ti>
パッケージの事後インストールステージの実行
</ti><ti><c>pkg_postinst</c></ti></tr>
<tr><ti><c>config</c></ti><ti>
パッケージがマージされていれば、デフォルトコンフィグレーションをセットアップ
</ti><ti><c>pkg_config</c></ti></tr>
<tr><ti>*<c>touch</c></ti><ti>
パッケージでの各ソースアーカイブのmtimesを更新
</ti><ti>n/a</ti></tr>
<tr><ti>*<c>clean</c></ti><ti>
パッケージのワークディレクトリをクリア
</ti><ti>n/a</ti></tr>
<tr><ti>*<c>fetch</c></ti><ti>
パッケージソースのtarballを取得
</ti><ti>n/a</ti></tr>
<tr><ti>*<c>digest</c></ti><ti>
パッケージ用の要約ファイルを作成
</ti><ti>n/a</ti></tr>
<tr><ti>*<c>install</c></ti><ti>
イメージ・ディレクトリーへパッケージをインストール
</ti><ti><c>src_install</c></ti></tr>
<tr><ti><c>unmerge</c></ti><ti>
ファイルシステムからのパッケージのマージ解消
</ti><ti>n/a</ti></tr>
</table>
<p>
Note:アスタリスク(*)のあるコマンドは、通常、開発者により使用されるだけのものです。 
</p>

<p>
<c>emerge</c>は再帰的にあなたのファイルシステムへパッケージおよびその依存性のすべてをマージします。
このコマンドは多くのオプションを持っています。<c>emerge --help</c>コマンドを試してしてみて下さい。 
</p>

<p>
<c>env-update</c>は、インストールされたパッケージによって行なわれた変更を含めるために(<path>/etc/ld.so.conf</path>および<path>/etc/profile.env</path>に制限されずに取り込まれた) コンフィグレーションファイルを更新します。 
</p>
</body>
</section>

<section>
<title>内部スクリプトとコマンド群</title>
<body>

<p>
これらは共通のタスクを実行するためにebuildファイルの中で使用することができるスクリプトです。 
</p>

<p>
より詳細な指示については、<path>/usr/lib/portage/bin</path>にあるスクリプト自身を参照してください。
</p>

<table>
<tr><ti>into</ti><ti>
<c>dobin</c>, <c>dolib</c>, <c>dolib.a</c>, <c>dolib.so</c>, <c>domo</c>, <c>dosbin</c>へのターゲットprefix(<path>DESTTREE</path>)のセット。
</ti></tr>
<tr><ti>dobin</ti><ti>
<path>DESTTREE/bin</path>への特定のバイナリファイルのインストール 
</ti></tr>
<tr><ti>dodoc</ti><ti>
パッケージドキュメンテーションの<c>docinto</c>にある<path>DOCDESTREE</path>の指定したディレクトリ(<path>/usr/share/doc/${PF}/DOCDESTTREE</path>) への特定のファイルをインストール
</ti></tr>
<tr><ti>doexe</ti><ti>
<path>EXEDESTTREE</path>へ<e>EXEOPTIONS</e>のモードを指定して特定のファイルをインストールする。 
<path>EXEDESTTREE</path>のデフォルトは -m0755であり、<c>exeopts</c>コマンドを経由してセットする。
<path>EXEDESTTREE</path>は<c>exeinto</c>を経由してセットする。 
</ti></tr>
<tr><ti>dohard</ti><ti>
${D}を透過的に扱いハードリンクを作成する
</ti></tr>
<tr><ti>dohtml</ti><ti>
<path>/usr/share/doc/${PF}/html</path>のディレクトリへ特定ファイルをインストール
</ti></tr>
<tr><ti>doinfo</ti><ti>
gzip形式で圧縮して/usr/share/infoに特定ファイルをインストールする
</ti></tr>
<tr><ti>doins</ti><ti>
<path>INSDESTTREE</path>の中に<e>INSOPTIONS</e>モードで特定ファイルをインストールする。
<e>INSOPTIONS</e>のデフォルトは-m0644であり、<c>insopts</c>コマンド経由で設定できる。 
<path>INSDESTTREE</path>は<c>insinto</c>コマンド経由で設定できる。
</ti></tr>
<tr><ti>dolib</ti><ti>
<path>DESTTREE/lib</path>の中に<e>LIBOPTIONS</e>モードで特定ファイルをインストールする。 
<e>LIBOPTIONS</e>のデフォルトは-m0644であり、<c>libopts</c>コマンド通じて設定できる。 
</ti></tr>
<tr><ti>dolib.a</ti><ti>
<path>DESTTREE/lib</path>を0644モードで特定ライブラリをインストールする 
</ti></tr>
<tr><ti>dolib.so</ti><ti>
<path>DESTTREE/lib</path>の中へ0755モードで特定ライブラリをインストールする
</ti></tr>
<tr><ti>doman</ti><ti>
<path>/usr/share/man/manX</path>の中へ特定ファイルをインストールする。 Xのサフィックスに従う
</ti></tr>
<tr><ti>domo</ti><ti>
.moファイル(ローカライズされたストリング・データの格納のために使用) を手動でインストールするために使用される。 
</ti></tr>
<tr><ti>donewins</ti><ti>
<c>newins</c>と同様です; 現実にはシンボリックリンクです。これは不本意ですが、旧ebuildとの互換性のために存在します。<c>newins</c>の代わりに使用してください 
</ti></tr>
<tr><ti>dosbin</ti><ti>
<path>DESTTREE/sbin</path>の中へバイナリファイルをインストールする。これは実行可能ファイルとして作成されているものです。 
</ti></tr>
<tr><ti>dosed</ti><ti>
指定されたファイルの中で${D}(インストール・プレフィックスパス)の作成したものをすべて削除
</ti></tr>
<tr><ti>dosym</ti><ti>
${D}を透過的に扱いシンボリックリンクを作成
</ti></tr>
<tr><ti>emake</ti><ti>
並行makeの実行をします。いくつかのプロジェクトでは並行makeができませんのでmakeを使用して下さい。
</ti></tr>
<tr><ti>fowners</ti><ti>
chownコマンドによって指定されたファイル(第2引数)に指定された所有権(第1引数)を適用し、${D}を透過的に扱います 
</ti></tr>
<tr><ti>fperms</ti><ti>
chmodコマンドによって指定されたファイル(第2引数)に指定されたパーミッション(第1引数)を適用し、${D}を透過的に扱います 
</ti></tr>
<tr><ti>newbin</ti><ti>
<path>DESTTREE/bin</path>へ指定のバイナリファイル(第1引数)を透過的に第2引数の名称へリネームしてインストールする<c>dobin</c>まわりのラッパーです 
</ti></tr>
<tr><ti>newdoc</ti><ti>
/usr/share/doc/${PF}/DOCDESTTREEへ指定のファイル(第1引数)を透過的に第2引数の名称へリネームしてインストールするdodocまわりのラッパーです 

wrapper around <c>dodoc</c> which installs the specified file (first argument) in <path>/usr/share/doc/${PF}/DOCDESTTREE</path>, transparently renaming to the second argument
</ti></tr>
<tr><ti>newexe</ti><ti>
<path>EXEDESTTREE</path>へ<e>EXEOPTIONS</e>で示すモードで指定のファイル(第1引数)を透過的に第2引数の名称へリネームしてインストールする<c>doexe</c>まわりのラッパーです 
</ti></tr>
<tr><ti>newins</ti><ti>
<path>INSDESTTREE</path>へ<e>INSOPTIONS</e>で示すモードで指定のファイル(第1引数)を透過的に第2引数の名称へリネームしてインストールする<c>doins</c>まわりのラッパーです 
</ti></tr>
<tr><ti>newlib.a</ti><ti>
<path>DESTTREE/lib</path>へ指定のライブラリファイル(第1引数)を透過的に第2引数の名称へリネームしてインストールする<c>dolib.a</c>まわりのラッパーです 
</ti></tr>
<tr><ti>newlib.so</ti><ti>
DESTTREE/libへ指定のライブラリファイル(第1引数)を透過的に第2引数の名称へリネームしてインストールするdolib.soまわりのラッパーです 

wrapper around <c>dolib.so</c> which installs the specified library into <path>DESTTREE/lib</path>, transparently renaming to the second argument
</ti></tr>
<tr><ti>newman</ti><ti>
<path>/usr/share/man/manX</path>へ指定のライブラリファイル(第1引数)を透過的に第2引数の名称へリネームしてインストールする<c>doman</c>まわりのラッパーです 
</ti></tr>
<tr><ti>newsbin</ti><ti>
<path>DESTTREE/sbin</path>へ指定のファイル(第1引数)を透過的に第2引数の名称へリネームしてインストールする<c>dosbin</c>まわりのラッパーです
</ti></tr>
<tr><ti>pmake</ti><ti>
不本意ですが、emakeの代わりに使います 
</ti></tr>
<tr><ti>prepalldocs</ti><ti>
<path>/usr/share/doc</path>のシンボリックリンクパスも含めて救済用に全てのdocをgzipします。 
</ti></tr>
<tr><ti>prepallinfo</ti><ti>
<path>/usr/share/info</path>の救済用に全てのinfoファイルをgzipします。 
</ti></tr>
<tr><ti>prepallman</ti><ti>
<path>/opt/*/man/*</path>, <path>/usr/share/man/*</path>, <path>/usr/local/man/*</path>, <path>/usr/X11R6/share/man/*</path>およびシンボリックリンクにあるものもひっくるめて救済用に全てのmanページをgzipします。 
</ti></tr>
<tr><ti>prepall</ti><ti>
<c>prepallman</c>,<c>prepallinfo</c>および<c>prepallstrip</c>まわりのラッパーです。同じく<path>/opt/*/lib</path>, <path>/lib</path>, <path>/usr/lib</path>および<path>/usr/X11R6/lib</path>、同じく<path>/usr/share/aclocal</path>のaclocalマクロについてもgzipを行なえます 
</ti></tr>
<tr><ti>try</ti><ti>
不本意ですが、|| die 構文の代わりに使用します 
</ti></tr>
</table>
</body>
</section>
</chapter>

<chapter>
<title>パッケージの依存関係</title>

<section>
<title>なぜ依存性が重要か</title>
<body>
<p>
Portageは便利なスクリプトである以上に、あなたのどんなプロジェクト(プログラムやライブラリ) の構築方法に統一性を与えます。さらに、あなたがebuildの中でこれらを注意深く指定すれば、それはどんな必要な依存関係も取得してインストールします。 
</p>

<p>
公式のebuildsでは、全部の依存関係が既に指定されています。
したがって、あなたが<c>emerge net-www/mozilla/mozilla-1.0</c>のコマンドを発行する時、Portageは Mozilla自身が構築される前にMozillaの構築および実行するのに必要なライブラリがすべて適切にインストールされることを保証できます。 
</p>

<p>
Portageは構築時依存関係とランタイム依存関係をさらに識別します。 
(警告: 現在、Portageは構築時およびランタイム依存関係をすべてインストールする場合の成り行きにまかせています。
あとの段階では、ランタイム依存関係だけがインストールされており、あなたのインストールを整えることが可能でしょう)。</p>

</body>
</section>

<section>
<title>いかにしてebuildファイルの依存性を指定するか</title>
<body> 
<p>
<path>foo-x.y.z.ebuild</path>の内部の<c>DEPEND</c>変数は、<path>foo</path>を構築するために必要なパッケージをPortageへ伝えます。<c>RDEPEND</c>変数は、<path>foo</path>を実行するためにどのパッケージが必要かを明示します。
例として: 
</p>
<pre>
DEPEND="virtual/glibc
        sys-libs/zlib"
RDEPEND="virtual/glibc"
</pre>

<p>
これはPortageにfoo-x.y.zを構築するように命令するのには、パッケージvirtual/glibc(ビット中のvirtualsについて詳細) およびsys-libs/zlibは必要です。それは、どれに関して必要なglibcあるいはzlibのバージョンであるかについて言及していません。それは"何でも実行"することを意味します。 

This tells Portage that to build <path>foo-x.y.z</path>, the packages
<path>virtual/glibc</path> 
(more on  virtuals in a bit) and 
<path>sys-libs/zlib</path>
are needed. It does not say anything about which version of glibc or zlib that are needed,
which means "anything goes".
</p>

<p>
"何でも行く"にはもちろん少し恐い気がしますし、一般的な場合はうまく働かないでしょう。 glibc(それは100%バイナリのために非常に忙しく働きます)のよう中心となるライブラリが必要としないならば、それは現実に作動します。他のライブラリについても、もちろんバージョン依存性を指定することができます。これを行なうためには多数の方法があります: 
</p>
<pre>
&gt;=sys-apps/bar-1.2
=sys-apps/baz-1.0
</pre>

<p> 
&gt;=と=は、あなたが期待するように動作します。 sys-apps/bar バージョン1.2か、より新しいく(sys-apps/bar-2.0ならOKという意味)、sys-apps/bazバージョン1.0が受け入れられるただ一つのバージョンであるならOKです。 
</p>

<p>
Portageは、バージョン番号への4つの特別の接尾辞のことを知っています。
<c>-rX</c>, <c>-preX</c>,<c>-alphaX</c>および<c>-betaX</c>, この場合のXは(あなたの好きな数字)です。 
<c>&gt;=sys-apps/foo-1.0</c>の条件では以下のようになります。 
</p>
<pre>
sys-apps/frob-1.0-r1
sys-apps/frob-1.0
sys-apps/frob-1.0_pre1
sys-apps/frob-1.0_beta1
sys-apps/frob-1.0_alpha1
</pre>
<p>
Portageはリストされた順に内部で調整し、先頭であるものを選択するでしょう。
これは<c>_alphaX</c>より<c>_beta</c>,<c>_betaX</c>より<c>_preX</c>、<c>_preX</c>よりサフィックスなし、サフィックスなしより<c>-rX</c>を採用することを意味します。 
</p>

<p>
バージョン依存性を指定する他の方法について、次にあげておきます:
</p>
<pre>
~sys-apps/qux-1.0
=sys-apps/foo-1.2*
</pre>

<p>
~sys-apps/qux-1.0 は、qux-1.0の最新のリビジョンを選択するでしょう。 
</p>

<p>
=sys-apps/foo-1.2* は1.2のシリーズの中で最新のメンバーを選択しますが、 1.3以降のシリーズを無視するでしょう。
すなわち、foo-1.2.3およびfoo-1.2.0は両方とも有効であるのに対し、foo-1.3.3およびfoo-1.3.0は無視されることになります。 
</p>

</body>
</section>
</chapter>

</guide>
