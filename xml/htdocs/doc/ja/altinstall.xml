<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/altinstall.xml,v 1.2 2003/12/28 03:17:14 nakano Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
	  

<guide link="/doc/ja/altinstall.xml">
<title>Gentoo Linuxを通常以外の方法でインストールする際の手引き</title>
<author title="Contributor"><mail link="gerrynjr@gentoo.org">Gerald Normandin Jr.</mail></author>
<author title="Contributor"><mail link="lordviram@rebelpacket.net">Travis Tilley</mail></author>
<author title="Contributor"><mail link="volontir@yahoo.com">Oleg Raisky</mail></author>
<author title="Contributor"><mail link="luminousit@hotmail.com">Alex Garbutt</mail></author>
<author title="Contributor"><mail link="alex@openvs.com">Alexandre Georges</mail></author>
<author title="Contributor"><mail link="vargen@b0d.org">Magnus Backanda</mail></author>
<author title="Contributor"><mail link="davoid@gentoo.org">Faust A. Tanasescu</mail></author>
<author title="Contributor"><mail link="aliz@gentoo.org">Daniel Ahlberg</mail></author>
<author title="Editor"><mail link="swift@gentoo.org">Sven Vermeulen</mail></author>
<author title="Reviewer"><mail link="antifa@gentoo.org">Ken Nowack</mail></author>
<author title="Editor"><mail link="blubber@gentoo.org">Tiemo Kieft</mail></author>
<author title="翻訳"><mail link="s00t206@stmail.eng.kagawa-u.ac.jp">石井博文</mail></author>
<abstract>
この手引きでは通常の方法以外でGentooをインストールする手段を集めたもので、CD-ROMドライブがなかったり、あるいはCDから起動できないコンピュータがあるときは、ここに書かれているような特別なインストール方法が必要となるでしょう。
</abstract>

<version>0.35</version>
<date>October 31, 2003</date>
<!-- Original revision: 1.20 -->

<license/>

<chapter>
<title>この手引きについて</title>
<section>
<body>

<p>一般的な、CDから起動するインストール方法ではうまくいかない(あるいは、そうしたくない)時のための手引きを用意しました。この手引きは、通常以外の方法でGentoo Linuxをインストールするための手段をいくつか提供します。その中に気に入ったものがあれば、それがあなたのためのちょっと変わったインストール方法です。
もしもGentooの便利なインストール方法を知っていたり、面白いインストール方法を思いついたりしたなら、その方法を書き上げて遠慮なく<mail link="antifa@gentoo.org">私まで送ってください</mail>。</p>

</body>
</section>
</chapter>

<chapter>
<title>Smart BootManagerを使ったLiveCDの起動</title>
<section>

<body>
<p>Smart BootManagerを<uri link="http://btmgr.sourceforge.net/index.php3?body=download.html">http://btmgr.sourceforge.net/index.php3?body=download.html</uri>からダウンロードしてください。多くの言語パックと一緒に、Linux用のソースコードと実行バイナリ、Windows用の.exeファイルがありますが、新しいバージョンのNASMではソースコードをコンパイルできないため今回はバイナリを使った方がよいでしょう。</p>

<p>ソースコードからパッケージをコンパイルするか、バイナリを入手してください。ブートフロッピーを作るときには、下に挙げるようないくつかのオプションを使えます。</p>

<pre caption="Smart BootManagerのオプション">
<i>sbminst [-t theme] [-d drv] [-b backup_file] [-u backup_file]

   -t theme     select the theme to be used, in which the theme could be:
                   us = English theme       de = German theme 
                  hu = Hungarian theme     zh = Chinese theme 
                  ru = Russian theme       cz = Czech theme
                  es = Spanish theme       fr = French theme 
                   pt = Portuguese theme 

                 
  -d drv       set the drive that you want to install Smart BootManager on;
                for Linux:
                  /dev/fd0 is the first floppy driver, 
                  /dev/hda is the first IDE harddisk driver.
                   /dev/sda is the first SCSI harddisk driver.
                for DOS:
                   0   is the first floppy drive
                   128 is the first hard drive;

   -c             disable CD-ROM booting feature;

   -b backup_file backup the data that will be overwritten for
                  future uninstallation;

   -u backup_file uninstall Smart BootManager, should be used alone;

   -y             do not ask any question or warning.</i>
</pre>

<pre caption="ブートフロッピーを作るためにsbminstを使う">
# <i>sbminst -t us  -d /dev/fd0</i>
</pre>

<note>フロッピーを示すデバイス名が事なる場合は環境に応じて変更してください。</note>

<p>起動しようとしているコンピュータにLiveCDのCD-ROMをセットし、同じようにフロッピードライブにもフロッピーをセットしてコンピュータを起動します。</p>

<p>すると、Smart BootManagerのダイアログが出迎えてくれるはずです。LiveCDを起動するには、CD-ROMを選択してENTERを押してください。起動できたら標準的なインストール方法に従ってください。</p>

<p>Smart BootManagerに関するもっと詳しい情報は<uri>http://btmgr.sourceforge.net/</uri>から参照できます。</p>
</body>
</section>
</chapter>



<chapter>
<title>Knoppixを利用したインストール</title>
<section>

<body>
<p>
<uri link="http://www.knoppix.org/">Knoppix</uri>のLiveCDを使って起動する方法では、Gentooをコンパイルしている間も完璧に動作するLinuxシステムを使うことができます。bootstrapが終わるのを待つ間、Tux Racerで暇つぶしもできます。</p>

<p>KnoppixのCDから起動します。この方法は一般的にハードウェアの自動認識に優れています。とはいえ、いくつかブートオプションは必要になるかもしれません。</p>

<p>通常、KnoppixではKDE3.0のデスクトップが起動します。まず私はkonsoleを起動し、<c>sudo passwd root</c>とタイプしました。これでKnoppixでのrootユーザのパスワードを設定できます。</p>

<p>次に、suでrootになり、<c>usermod -d /root -m root</c>とタイプしました。これで、rootのホームディレクトリを/home/root (Knoppixでの設定)から、/root (Gentooでの設定)に変更します。これをしないと、emergeの際に"/home/root: not found"等のエラーメッセージが表示されるなどの影響が出てしまいます。</p>

<p>そして、<c>exit</c> とタイプして <c>su</c> でrootに戻りました。これでusermodコマンドによって行われた変更が有効になります。ここからは標準的な方法のステップ6から続ける事ができます。しかし、ここで/procをマウントするように言われた時には、代わりに次のコマンドを実行してください:</p>

<pre caption = "重要なファイルシステムを2つ、bindしてマウントする">
# <i>mount -o bind /proc /mnt/gentoo/proc</i>
# <i>mount -o bind /dev /mnt/gentoo/dev</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>ネットワークへの接続なしでステージ1からインストールする</title>
<section>
<body>


<p>LiveCDのISOイメージを焼く</p>

<p>最新のPortageのスナップショットを<uri>http://distro.ibiblio.org/pub/linux/distributions/gentoo/snapshots/</uri> (または、お好きな<uri link="http://www.gentoo.org/main/en/mirrors.xml">ミラーサイト</uri>)から入手してください。この圧縮ファイルをインストール対象のコンピュータの何処かのパーティションに置くか、CDに焼いてください。</p>

<p>また、各ステージに含まれるパッケージのリストも必要です。次のdl-list.shをシェルスクリプトとしてPortageのスナップショットと同じ媒体に保存してください。これは後で必要になります。</p>


<pre caption="dl-list.sh">
#!/bin/bash

# デフォルトの設定はここに書いてください:
user_defs() {
 
  # Portageのディレクトリ (最後に"/"はつけない):
   portage_dir="/usr/portage"
 
  # 通常利用するダウンロード元 (最後に"/"はつけない):
  gentoo_mirror="http://www.ibiblio.org/pub/Linux/distributions/gentoo"
 
  # 通常利用するsourceforgeのミラーサーバ (unc, telia, belnetから選択):
  sourceforge_mirror="unc"
 
  # GNUのミラー候補を修正する場合
  gnu_url="ftp:\/\/ftp.gnu.org\/pub\/gnu"
 
}


#------------------------------------------------------------

# 一時ファイルを削除する関数
cleanup() {
 
  rm -f $temp_file_1 $temp_file_2
  exit $1
 
}

# ユーザのデフォルト設定を有効にする
user_defs

# sourceforgeのミラーサイトの完全なurlを生成
# (sedコマンドで使うので\記号が必要)
sourceforge_mirror_complete="http:\/\/$sourceforge_mirror.dl.sourceforge.net\/sourceforge"

# カウンタの初期化
num_files=0
num_alt_urls=0
total_size=0

# リストの初期化 (配列です)
declare -a def_urls_arr
declare -a alt_urls_arr

# 一時ファイルを2つ生成
temp_file_1=`mktemp -t dl-list.XXXXXX` || cleanup 1
temp_file_2=`mktemp -t dl-list.XXXXXX` || cleanup 1

# "emerge -p &lt;配列&gt;"を行う (コマンドラインからだと"-p"って忘れやすいんですよね…)
emerge -p $@ &gt; $temp_file_1 || cleanup 1

# "ebuild"という単語を含んでいない行は削除
sed -n -e '/ebuild/p' $temp_file_1 &gt; $temp_file_2

# 残った行数をカウント
num_ebuilds=`wc -l $temp_file_2 | sed -e 's/\(.*\) \(.*\)/\1/'`

# 各行からカテゴリ名、パッケージ名、バージョンなどの有用な情報を取得
#sed -e 's:\(.*\) \(.*\)/\(.*\)-\([0-9].*\) \(.*\) \(.*\):\2 \3 \4:' $temp_file_2 &gt; $temp_file_1
sed -e 's:\(.*\) \(.*\)/\(.*\)-\([0-9].*\):\2 \3 \4:' $temp_file_2 &gt; $temp_file_1

# 開始メッセージを表示 :)
echo -n "Generating list " &gt;&amp;2

# 毎回それぞれのパッケージを処理
while read category package version rest
do
 
  # ダイジェストファイルの名前を生成

digest_file="$portage_dir/$category/$package/files/digest-$package-$version"
 
  # ダイジェストファイルの内容を処理
  while read md5_flag md5_sum file_name file_size
  do
   
    # ファイルをダウンロードするためのデフォルトのURLを生成
    def_urls_arr[$num_files]="$gentoo_mirror/distfiles/$file_name"
   
    # ファイルカウンタをインクリメント
    num_files=$(($num_files + 1))
   
    # 総サイズの更新 (キロバイト単位)
    total_size=$(($total_size + $file_size / 1024))
   
  done &lt; $digest_file

  # "ebuild depend"コマンドの生成
  ebuild_depend_cmd="ebuild $portage_dir/$category/$package/$package-${version}.ebuild depend"

  # "ebuild depend"コマンドを実行
  $ebuild_depend_cmd || cleanup 1

  # 依存しているファイル名を生成
  dependency_file="/var/cache/edb/dep/$category/$package-$version"

  # 依存関係が記されているファイルの4行目を読む。
  # ここにはオフィシャルなファイルのURLが書かれている。
  alt_urls=`head -n 4 $dependency_file | tail -n 1`
 
  # 空のURLリストは無視
  if [ -n "$alt_urls" ]
  then
   
    # URLリストを$1から$Nまで分割
    set $alt_urls
   
    # 毎回それぞれのURLを処理
    for i in $@
    do
     
      # URLリストから(use)?という文字列を削除
      alt_url_tmp=`echo "$i" | sed -e '/\?$/d'`
     
      # "mirror://gnome"なURLを削除
      alt_url_tmp=`echo "$alt_url_tmp" | sed -e '/^mirror:\/\/gnome/d'`
     
      # "mirror://kde"なURLを削除
      alt_url_tmp=`echo "$alt_url_tmp" | sed -e '/^mirror:\/\/kde/d'`
     
      # "mirror://gentoo"なURLを削除(インクルード済み)
      alt_url_tmp=`echo "$alt_url_tmp" | sed -e '/^mirror:\/\/gentoo/d'`
     
      # "mirror://sourceforge"なURLを正しいものに変換
      alt_url_tmp=`echo "$alt_url_tmp" | sed -e "s/mirror:\/\/sourceforge/$sourceforge_mirror_complete/"`

      # "mirror://gnu"なURLを正しいものに変換
      alt_url_tmp=`echo "$alt_url_tmp" | sed -e "s/mirror:\/\/gnu/$gnu_url/"`
      # URLが空だったら無視する
      if [ -n "$alt_url_tmp" ]
      then
       
        # URLをリストに追加
        alt_urls_arr[$num_alt_urls]=$alt_url_tmp
       
        # 代替URLカウンタをインクリメント
        num_alt_urls=$(($num_alt_urls + 1))
       
      fi
     
    done
   
  fi

  # プログレスバーの表示 :)
  echo -n "." &gt;&amp;2

done &lt; $temp_file_1

# 終了メッセージの表示 :)
echo " done." &gt;&amp;2

# デフォルトのURLリストを表示
for i in ${def_urls_arr[@]}; do echo $i; done | sort

# 代替URLリストを表示
for i in ${alt_urls_arr[@]}; do echo $i; done | sort

# ebuildとファイル、URLの総数を表示
echo "Totals:" $num_ebuilds "ebuilds," $num_files "files," $num_files "default urls," \n
$num_alt_urls "alternate urls," "${total_size}Kb." &lt;&amp;2

# 一時ファイルを削除して終了
cleanup 0
</pre>

<p>Gentoo Linuxインストール手引書のステップ8にある<c>chroot /mnt/gentoo</c>をする直前までの作業を行ってください。CD-ROMドライブが一台しかない場合は、LiveCDをアンマウントしてPortageのスナップショットCDをマウントできるように、ブート時に<c>cdcache</c>を付けるのを忘れないでください。</p>

<p>新しいコンソール(Alt+F2)を開いて、インストール手引書のboorstrap.shスクリプトを実行する直前までの作業を行ってください。</p>

<warn>古いバージョンのlivecdをお使いの場合は、ログインする前に<c>passwd</c>コマンドでパスワードを変更しておく必要があります。</warn>

<p>最初のコンソール(chrootをしていない方です。Alt-F1で戻ります。)に戻って、2番目のCDを<path>/mnt/gentoo/mnt/cdrom2</path>にマウントしてください。cdrom2からtarボールをコピーし、<path>/mnt/gentoo/usr/portage</path>に展開します。さらに、dl-list.shを<path>/usr/sbin</path>にコピーして実行可能にします。</p>


<pre caption="スナップショットCDのマウント">
# <i>umount /mnt/cdrom</i>
# <i>mkdir /mnt/gentoo/mnt/cdrom2</i>
# <i>mount /dev/cdroms/cdrom0 /mnt/gentoo/mnt/cdrom2</i>
# <i>cp /mnt/gentoo/mnt/cdrom2/portage-$date.tar.bz2 /mnt/gentoo/usr/portage</i>
# <i>cp /mnt/gentoo/mnt/cdrom2/dl-list.sh /mnt/gentoo/usr/sbin</i>
# <i>cd /mnt/gentoo/usr/portage</i>
# <i>tar xvjpf portage-$date.tar.bz2</i>
# <i>chmod +x /mnt/gentoo/usr/sbin/dl-list.sh</i>
</pre>

<p>F2のコンソールに戻ります。もしも今bootstrap.shを実行しようとすると、ファイルをダウンロードできないのでうまくいかないと思います。そういったファイルはどこか別の場所から入手して(F2のコンソール上での)/usr/portage/distfilesに置いてあげることにしましょう。</p>

<p>これにはステージ1に含まれるパッケージ(glibc, baselayout, texinfo, gettext, zlib, binutils, gcc, ncurses)と、それらとの依存関係があるもののリストが必要です。</p>

<note>それぞれのパッケージのバージョンは、同期したPortageツリーで指定されているものでなければならないことに注意してください。</note>

 <p>では、dl-list.shを使って必要なパッケージのリストを作りましょう。生成されたリストはフロッピーにコピーします。</p>


<pre caption="dl-list.shを使う">
# <i>dl-list.sh glibc baselayout texinfo gettext zlib binutils gcc ncurses > stage1.list</i>
# <i>mount -t vfat /dev/fd0 /mnt/floppy</i>
# <i>cp /mnt/gentoo/stage1.list /mnt/floppy</i>
# <i>umount /mnt/floppy</i>
</pre>

<p>フロッピーを持ってインターネットに高速にアクセスできるコンピュータの所まで行き、リストに書かれたファイルをwgetします:</p>

<pre caption="wgetでソースパッケージを入手する">
# <i>wget -N -i stage1.list</i>
</pre>

<p>ファイルを全て入手できたら、それをインストール対象のコンピュータに移して<path>/mnt/gentoo/usr/portage/distfiles</path>にコピーしてください。これで<c>bootstrap.sh</c>を走らせることができるようになります。ステージ2と3でもこれと同じ手順でwgetによるダウンロードと移動を繰り返してください。</p>


</body>
</section>
</chapter>

<chapter><title>ディスクを使わず、PXEブートを利用したインストール方法</title>

<section><title>必要なもの</title>
<body>


<p>ディスクを持たないクライアントには、多くの3comのカードのような、ブートの際にPXEプロトコルを使えるネットワークカードが必要です。また、PXEによるブートをサポートしたBIOSも必要です。</p>
</body></section>

<section><title>サーバ上でのベースセットアップ</title>
<body>
 <p>ディレクトリの作成: まず最初にするのは、お使いになるディスク非装着のシステムが保存されるディレクトリの作成です。それぞれのディスク非装着なクライアントをホストするために<path>/diskless</path>のようなディレクトリを作成してください。これ以降、この手引きでは'eta'という名前のクライアント上で作業をすることにします。</p>

<pre caption="ディレクトリの作成">
# <i>mkdir /diskless</i>
# <i>mkdir /diskless/eta</i>
# <i>mkdir /diskless/eta/boot</i>
</pre>

<p>DHCPとTFTPの設定: クライアントはDHCPサーバからブート情報を受け取り、TFTPを使って必要なファイルを全てダウンロードします。ということで、DHCPをemergeして必要な基本設定をしてしまいましょう。そして、次に示す内容を<path>/etc/dhcp/dhcpd.conf</path>に追加してください。</p>

<note>下の例では静的なIPアドレスと、ここではpxegrubと名付けたPXE用のブートイメージまでのパスをクライアントに対して割り当てるようになっています。お使いになるクライアントに装着されているイーサ−ネットカードのMACアドレスとそれぞれのファイルを保存する場所は状況にあわせて書き換えてください。</note>


<pre caption="dhcp.conf">
option option-150 code 150 = text ;
host eta {
hardware ethernet 00:00:00:00:00:00;
fixed-address <c>ip.add.re.ss</c>;
option option-150 "/eta/boot/grub.lst";
filename "/eta/boot/pxegrub";
}
</pre>

<p>TFTPを使うために、<c>app-admin/tftp-hpa</c>をemergeし、<path>/etc/conf.d/in.tftpd</path>に次の内容を加えてください。</p>

<pre caption="in.tftpd">
INTFTPD_PATH="/diskless"
INTFTPD_USER="nobody"
INTFTPD_OPTS="-u ${INTFTPD_USER} -l -vvvvvv -p -c -s ${INTFTPD_PATH}"
</pre>

<p>GRUBのセットアップ: 私はPXEブートにGRUBを使っています。PXEイメージをコンパイルする時には自力でGRUBをコンパイルする必要がありますが、これはとても簡単です。まず、最新のGRUBのソースコードを入手します。(<c>emerge -f grub</c>で圧縮ファイルが<path>/usr/portage/distfiles</path>に保存されます。) この圧縮ファイルを<path>/diskless</path>にコピーし、PXEが使えるようにしてmakeするだけです。バイナリができてしまえば、それをディスクを持たないクライアント機のbootディレクトリにコピーします。このときgrub.lstという設定ファイルも編集してください。</p>

<pre caption="grubの設定">
# <i>tar zxvf grub-0.92.tar.gz</i>
# <i>cd grub-0.92</i>
# <i>./configure --help</i>
<codenote>このオプションで、サポートされているネットワークインターフェイスのドライバの一覧を確認できます。</codenote>
<codenote>お使いのカードに対応したドライバを選択してください。この例では$nicとなっています。</codenote>
# <i>./configure --enable-diskless --enable-$nic</i>
# <i>make</i>
# <i>cd stage2</i>
# <i>cp pxegrub /diskless/eta/boot/pxegrub</i>
# <i>nano -w /diskless/eta/boot/grub.lst</i>
</pre>

<pre caption="grub.lst">
default 0
timeout 30

title=Diskless Gentoo
root (nd)
kernel /eta/bzImage ip=dhcp root=/dev/nfs nfsroot=<c>ip.add.re.ss</c>:/diskless/eta

<codenote>nfsrootオプションは、IPアドレスには利用するサーバのものを、ディレクトリには</codenote>
<codenote>そのサーバに置かれた、ディスクを持たないクライアント用のファイルが置かれている場所を指定します。</codenote>
</pre>

<p>NFSのセットアップ: NFSの設定はとても簡単です。唯一必要なのは、<path>/etc/exports</path>という設定ファイルに次のような内容を付け加えることだけです。</p>

<pre caption="/etc/exports">
# <i>nano -w /etc/exports</i>
NFS file systems being exported. See exports(5).
/diskless/eta eta(rw,sync,no_root_squash)
</pre>

<p>hostsファイルの更新: これは重要な作業です。<path>/etc/hosts</path>を必要にあわせて編集しなければなりません。</p>

<pre caption="/etc/hosts">
127.0.0.1 localhost

192.168.1.10 eta.example.com eta
192.168.1.20 sigma.example.com sigma
</pre>
</body>
</section>

<section><title>サーバ上にシステムを作成する</title>

<body>

<p>Gentoo LiveCD上のサーバを再起動してください。*次に示す内容以外は*インストール手引書に書かれている標準的な手順にしたがってインストール作業を行ってください。ファイルシステムをマウントする時には次のようにします。(hdaXは/disklessディレクトリを作成したパーティションです。)
全てのファイルは<path>/diskless/eta</path>に置かれるはずですから、他のパーティションをマウントする必要はありません。</p>

<pre caption="ファイルシステムのマウント">
#<i> mount /dev/hda3 /mnt/gentoo</i>
</pre>

<p>ステージ毎の圧縮ファイルとchrootコマンド: この例ではステージ3の圧縮ファイルを使います。<path>/proc</path>をディスクを持たないシステムにマウントし、そこにchrootしてインストール作業を続けましょう。カーネルの設定の前までインストール手引書に従って作業してください。</p>

<warn>ステージの圧縮ファイルを展開する場所には特に注意してください。すでにインストールできているものに上書きしてしまった…なんて事はしたくありませんよね。</warn>


<pre caption="ステージ圧縮ファイルの展開">
# <i>cd /mnt/gentoo/diskless/eta/</i>
# <i>tar -xvjpf  /mnt/cdrom/gentoo/stage3-*.tar.bz2</i>
# <i>mount -t proc /proc /mnt/gentoo/diskless/eta/proc</i>
# <i>cp /etc/resolv.conf /mnt/gentoo/diskless/eta/etc/resolv.conf</i>
# <i>chroot /mnt/gentoo/diskless/eta/ /bin/bash</i>
# <i>env-update</i>
# <i>source /etc/profile</i>
</pre>

<p>カーネルの設定: カーネルの設定で<c>make menuconfig</c>するときには、インストール手引書で推奨されている項目以外にも、次の項目を有効にすることを忘れないでください。</p>

<pre caption="menuconfigのオプション">
- 使っているネットワークカードデバイスのサポート

- "Networking options" 以下:

[*] TCP/IP networking
[*] IP: kernel level autoconfiguration
[*] IP: DHCP support
[*] IP: BOOTP support


- "File systems --> Network File Systems" 以下:

&lt;*&gt; NFS file system support
[*] Provide NFSv3 client support
[*] Root file system on NFS
</pre>

<p>次に、ディスクを持たないクライアントの<path>/etc/fstab</path>を設定します。</p>

<pre caption="/etc/fstab">
# <i>nano -w /etc/fstab</i>
/dev/cdroms/cdrom0 /mnt/cdrom iso9660 noauto,ro 0 0
proc /proc proc defaults 0 0
tmpfs /dev/shm tmpfs defaults 0 0
</pre>

<p>ブートローダについては、すでにpxgrubというブートローダがあるので他のものはインストールしないでください。インストール作業が終ったらサーバを再起動しましょう。DHCP、TFTPD、NFSといった、新しいクライアントをブートさせるために必要なサービスも起動してください。</p>

<pre caption="サービスの起動">
# <i>/etc/init.d/dhcp start</i>
# <i>/etc/init.d/tftpd start</i>
# <i>/etc/init.d/nfs start</i>
</pre>

</body></section>

<section><title>新しいクライアントの起動</title>
<body>
<p>新しいクライアントを正しく起動させるには、起動時に(CD-ROMやフロッピーより先に)まずPXEが使われるようにBIOSやネットワークカードを設定する必要があります。この方法については、お使いのハードウェアのマニュアルやメーカのウェブサイトを調べてください。ネットワークカードはDHCPによってIPアドレスを取得し、TFTPを使ってGRUB PXEのイメージをダウンロードします。これで、いい感じにGRUBの白黒のブートメニューが表示されるので、起動するカーネルを選択してEnterキーを押します。全てがうまくいっていれば、カーネルが起動してNFSを使ってルートファイルシステムがマウントされ、ログインプロンプトが表示されるはずです。楽しんでくださいね。</p>
</body></section>
</chapter>


<chapter> <title>既存のLinuxディストリビューションからGentooをインストールする</title> 
<section> <title>必要なもの</title> 
<body>
<p>
既存のLinuxディストリビューション上からGentooをインストールするには、既存のシステムにchrootコマンドがインストールされていて、インストールするGentooの圧縮ファイルやISOイメージが用意されている必要があります。
お持ちの圧縮ファイル(ところで、この圧縮ファイルとはtar.gzかtbzに圧縮されているもののことです)に収録されていない機能を使いたければ、ネットワークに接続できるとなお良いでしょう。
本稿の著者は「ホスト側の」OSとしてRedHat Linux7.3を使いましたが、これについては大して重要ではありません。さあ、始めましょう！
</p>
</body>
</section>

<section> <title>概要</title>
<body>
<p>
まず、既存のLinuxパーティションの容量を変更してGentoo用のパーティションを確保し、それをマウントして圧縮ファイルを展開し、その仮想的なシステムにchrootしてビルド作業を始めます。
bootstrapの作業が終ってしまえば、あとは起動可能にするようなシステムの最終的な設定を行い、再起動してGentooを使うまでの準備ができたことになります。</p>
</body>
</section>

<section> <title>Gentooのためのスペースを作る方法</title>
<body>

<p>ルートパーティションは"/"にマウントされるファイルシステムです。私のシステムでmountコマンドを使ってみた結果を御覧頂ければ、何について書いているかすぐに分かって頂けると思います。ディスク領域をどれだけ使っていてどれだけリサイズすれば良いかは、df (disk free)コマンドを使えば分かります。ルートパーティションを無理矢理リサイズしないように注意してください！リサイズに使うツールがサポートしていればどんな方法でリサイズしても構いませんが、それについてはまた後程触れる事にします。</p>


<pre caption="ファイルシステムの情報">
# <i>mount</i>
/dev/hdb2 on / type ext3 (rw) 
none on /proc type proc (rw) 
none on /dev/pts type devpts (rw,gid=5,mode=620) 
none on /dev/shm type tmpfs (rw) 
# <i>df -h </i>
Filesystem           Size Used Avail Use% Mounted on 
/dev/hdb2            4.0G 1.9G  2.4G  82% /
none		      38M    0    38M   0% /dev/shm 
</pre>

<p>御覧の通り、<path>/</path>にマウントされているパーティションは2.4GBの空き領域のある/dev/hda2に割り当てられています。私の場合は、これを400MBの空き領域を残してリサイズしようと思います。つまり、Gentoo用に2GBを確保する訳です。まあ、このくらい用意すれば良いんじゃないかなと思います。いろいろインストールできることでしょう。
とはいえ、ほとんどのユーザにとっては1GBでも十分かもしれません。さあ、パーティションの確保を始めましょう！</p>
</body> </section>

<section> <title>パーティションのリサイズのためにpartedを構築する</title> 
<body>
<p>partedは、日常様々な場面で使っているツールを開発しているGNUという歴史のある偉大で大規模なプロジェクトが提供しているユーティリティです。ここで挙げるのはたった一つのツールですが、こういう場面ではとても役に立ちます。これはpartedと呼ばれるパーティションエディタで、<uri>http://www.gnu.org/software/parted/</uri> から入手できます。</p>

<note>同じようにパーティションをリサイズできるツールは他にもありますが、著者はPartitionMagic(tm)や同じような機能のある他のソフトウェアの事はよく知らないしあまり興味もないので、そういったものに関する事は読者の皆さんにお任せします。</note>

<p>先程のページから、リサイズするつもりのファイルシステムの種類と、partedがそれに対応しているかどうかを探してください。もし不幸な事に対応していなければ、Gentooのために何処かのパーティションを潰して再インストールしなくてはいけません。
ここで問題があります。私達はLinuxのルートパーティションをリサイズするつもりですが、そのためには<path>/</path>をリサイズするための最小限のLinuxシステムと、事前にコンパイルされたpartedを格納したフロッピーディスクが必要になります。しかしながら、Linuxを走らせたままで対象のパーティションをアンマウントできるならあなたは幸運です。ともかく、partedをコンパイルして、アンマウントしたリサイズ先のパーティション上で実行してみてください。私のシステムでどのようにしたかを次に挙げてみます。</p>

<impo>そのパーティションに対して行おうとしている操作をpartedがサポートしているかどうか確認してください！</impo>

<p>tomsrtbtのブート/ルート用のディスク(無料です)を<uri>http://freshmeat.net/tomsrtbt</uri>から入手し、ソフトウェアパッケージに付属している解説書の内容に従ってフロッピーを作成し、次の手順のために新しいフロッピーをドライブに挿れてください。</p>

<note>Linuxは「目的を実現する手段は一つではない」という言葉と同義であると言えます。
目的はアンマウントされたパーティション上でpartedを使う事なので、それが実現できるなら手段は問いません。tomsrtbtのもの以外のboot/rootディスクを使う事もできます。この手順は必ずしも必要ではありません。要はリサイズ先のファイルシステムをアンマウントして、その上でLinuxを起動した状態でpartedを使えば良いのです。</note>

<pre caption="ユーティリティ ディスクの作成">
# <i>mkfs.minix /dev/fd0</i>
480 inodes
1440 blocks
Firstdatazone=19 (19)
Zonesize=1024
Maxsize=268966912
</pre>

ではpartedをビルドすることにしましょう。まだダウンロードや展開ができていなければ、まずそこから始めて、目的のディレクトリへcdするところまで進めてください。そして、次のコマンドでユーティリティを構築してフロッピーディスクへコピーします。

<pre caption="ユーティリティ・フロッピーディスクの構築">
# <i> mkdir /floppy; mount -t minix /dev/fd0 /floppy &amp;&amp; 
export CFLAGS="-O3 -pipe -fomit-frame-pointer -static" &amp;&amp; ./configure 
&amp;&amp; make &amp;&amp; cp parted/parted /floppy &amp;&amp; umount /floppy </i>
</pre>

<p>おめでとうございます！
これで再起動してパーティションをリサイズする準備ができました。ここから後は最低でもGNUのウェブサイトにあるpartedのドキュメントをざっと読んでから始めてください。
大容量のハードディスクだとリサイズに30分程度かかることがありますが、我慢して待ちましょう。tomsrtbtのブートディスクをフロッピードライブに入れて再起動し、ログインします。ログインできたらpartedを/floppyから呼び出せるように、先程作ったユーティリティ・ディスクに入れ換えてmount /dev/fd0 /floppyとタイプしてください。
さあ、始めましょう。partedを起動し、パーティションをリサイズします。この長ったらしい作業が終れば、Gentooをインストールして色々と楽しむことができるでしょう。そして、再起動して元のLinuxシステムに戻りましょう。
操作するドライブは、リサイズするパーティションを含んでいるドライブです。例えば、/dev/hda3をリサイズするならドライブは/dev/hdaになります。</p>

<pre caption="tomsrtbtのシステムにログインしたときに使うコマンド">
# <i>mount /dev/fd0 /floppy </i>
# <i>cd /floppy; ./parted [操作したいドライブ]</i>
(parted) <i> print </i>
Disk geometry for /dev/hdb: 0.000-9787.148 megabytes
Disk label type: msdos
Minor    Start       End     Type      Filesystem  Flags
1          0.031   2953.125  primary   ntfs        
3       2953.125   3133.265  primary   linux-swap  
2       3133.266   5633.085  primary   ext3        
4       5633.086   9787.148  extended              
5       5633.117   6633.210  logical               
6       6633.242   9787.148  logical   ext3        
(parted) <i> help resize </i>
  resize MINOR START END        resize filesystem on partition MINOR

        MINOR is the partition number used by Linux.  On msdos disk labels, the
        primary partitions number from 1-4, and logical partitions are 5
        onwards.
        START and END are in megabytes
(parted) <i> resize 2 3133.266 4000.000 </i>
</pre>

<impo>コンピュータは働いています！我慢してお待ちください！マシンのケースについているLEDを見れば本当に働いているのが分かるはずです。この作業には2分から30分程度はかかると思います。</impo>

<p>リサイズが終わったら、先程説明したように元のLinuxシステムを再起動してください。そして<uri link="/doc/en/gentoo-x86-install.xml">http://www.gentoo.org/doc/en/gentoo-x86-install.xml</uri>(<uri link="http://www.gentoo.org/doc/ja/gentoo-x86-install.xml">日本語訳</uri>)を開いてステップ6から17までを行ってください。ステップ7に取り掛かる前に<path>/mnt/gentoo</path>を作るのを忘れないでください。LiveCDから起動していないので、ステップ8では必要なtarアーカイブをダウンロードしなくてはいけません。chrootするときには、環境を更新するために次のようなコマンドを実行してください:</p>

<pre caption = "chrootする時に環境を更新する">
# <i>env -i chroot /mnt/gentoo /bin/bash</i>
</pre>

<p>楽しんでくださいね！</p>
</body>
</section>
</chapter>
</guide>
