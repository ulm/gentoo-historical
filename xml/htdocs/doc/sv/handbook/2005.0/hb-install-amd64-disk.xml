<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/sv/handbook/2005.0/hb-install-amd64-disk.xml,v 1.1 2005/04/28 08:58:24 neysx Exp $ -->

<sections>

<version>4.00</version>
<date>2004-09-25</date>

<section>
<title>Introduktion till blockenheter</title>
<subsection>
<title>Blockenheter</title>
<body>

<p>
Vi kommer att ta en ordentlig titt på de diskorienterade aspekterna av Gentoo Linux
och Linux generellt, inklusive Linux filsystem, partitioner och blockenheter. När du
väl känner dig mer hemma på diskar och filsystem kommer du att guidas genom processen att 
sätta upp partitioner och filsystem för din Gentoo Linux installation.
</p>

<p>
Vi börjar med att presentera <e>blockenheter</e>. Den mest kända blockenheten är förmodligen
den som representerar den första IDE disken i ett Linuxsystem, nämligen <path>/dev/hda</path>. 
Om ditt system använder SCSI diskar, kommer den första hårddisken att vara 
<path>/dev/sda</path>.
</p>

<p>
Blockenheterna ovan representerar ett abstrakt gränssnitt till disken. Användarprogram kan 
använda dessa blockenheter för att interagera med din disk utan att oroa sig för om din disk
är IDE, SCSI eller något annat. Programen direkt adressera lagringsplatsen på disken som en
samling sammanhängande slumpmässigt tillgängliga 512-bitar block. 
</p>

</body>
</subsection>
<subsection>
<title>Partitioner och skivor</title>
<body>

<p>
Även om det teoretiskt är möjligt att använda en hel disk för att härbärgera ditt Linuxsystem förekommer det nästan aldrig i praktiken. Istället partitionerar man en diskenhet i mindre, mer hanterliga enheter. På amd64 system kallas dessa <e>partitioner</e>.
</p>

</body>
</subsection>
<subsection>
<title>Partitioner</title>
<body>



<p>
Partitioner delas in i tre typer:
<e>primära</e>, <e>utökade</e> och <e>logiska</e>.
</p>

<p>
En <e>primär</e> partition är en partition som har sin information lagrad i MBR (master boot record). Då MBR är mycket liten (512 bytes) kan man bara definiera fyra primära partitioner, exempelvis <path>/dev/hda1</path> till <path>/dev/hda4</path>).
</p>

<p>
En <e>utökad</e> partition är en speciell primär partition (vilket innebär att den utökade partitionen måste vara en av de fyra möjliga primära partitionerna) som innehåller fler partitioner. En sådan partition fanns inte ursprungligen, men eftersom fyra partitioner var för få, fick den läggas till som ett sätt att utöka formateringsschemat utan att förlora bakåtkompatibilitet.
</p>

<p>
En <e>logisk</e> partition är en partition inuti en utökad partition. Dess definition finns inte i MBR utan i den utökade partitionen.
</p>

</body>
</subsection>
</section>
<section>
<title>Skapa ett partitonsschema</title>
<subsection>
<title>Ett standardiserat partitionsschema</title>
<body>

<p>
Om du inte är intresserad av att skapa ett partitionsschema för ditt system kan du använda det partitionsschema vi använder genomgående i denna bok:
</p>

<table>
<tr>
  <th>Partition</th>
  <th>Filsystem</th>
  <th>Storlek</th>
  <th>Beskrivning</th>
</tr>
<tr>
  <ti><path>/dev/hda1</path></ti>
  <ti>ext2</ti>
  <ti>32M</ti>
  <ti>Bootpartition</ti>
</tr>
<tr>
  <ti><path>/dev/hda2</path></ti>
  <ti>(swap)</ti>
  <ti>512M</ti>
  <ti>Swappartition</ti>
</tr>
<tr>
  <ti><path>/dev/hda3</path></ti>
  <ti>ext3</ti>
  <ti>Resten av disken</ti>
  <ti>Rootpartition</ti>
</tr>
</table>

<p>
Läs vidare om du är intresserad av att veta hur stor en partition (eller logisk volym) bör vara, eller till och med hur många partitioner du behöver. Annars kan du nu fortsätta med att partitionera din disk genom att läsa <uri link="#fdisk">Använd fdisk för att partitonera din disk</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Hur många och hur stora?</title>
<body>

<p>
Antalet partitioner är beror i hög grad på din miljö. Om du exempelvis har många användare kommer du sannolikt att vilja skilja ut din <path>/home</path> för att öka säkerheten och förenkla säkerhetskopiering. Om du använder Gentoo som epostserver bör du skilja ut din <path>/var</path> då all epost förvaras där. Ett bra val av filsystem kan därefter maximera prestandan. En spelserver bör ha en separat <path>/opt</path> eftersom de flesta spelservrar installeras där. Skälen desamma som för <path>/home</path>: säkerhet och säkerhetskopiering.
</p>

<p>
Som du ser beror det mycket på vad du vill uppnå. Skiljda partitioner eller volymer har följande fördelar:
</p>

<ul>
<li>
  Du kan välja det prestandamässigt bästa filformatet för varje partition eller volym.
</li>
<li>
 Hela systemet kan inte få slut på diskutrymme om ett trasigt verktyg kontinuerligt skriver filer i en partition eller en volym. 
</li>
<li>
 Om det nödvändigt tar filsystemskontroller mindre tid då flera kontroller kan göras samtidigt (även om denna fördel mer att göra med flera diskar än flera partitioner)
</li>
<li>
  Säkerheten kan ökas genom att vissa partitioner eller volymer monteras med enbart läsrättigheter, nosuid (setuid bitar ignoreras), noexec (exekverbara bitar ignoreras) osv.
</li>
</ul>

<p>
Det finns emellertid en stor nackdel med flera partitioner: om dessa inte konfigureras ordentligt kan du få ett filsystem med mycket ledigt utrymme i en partition men inget på ett annat. Det finns också en begränsning till högst 15 partitioner för SCSI och SATA.
</p>

<p>
Som ett exempel på partitionering av en 20 GB disk visar vi följande uppdelning som används på en demonstrationsdator (med webbserver, epostserver, Gnome ...):
</p>

<pre caption="Filsystem - ett exempel">

Filesystem    Type    Size  Used Avail Use% Mounted on
/dev/hda5     ext3    509M  132M  351M  28% /
/dev/hda2     ext3    5.0G  3.0G  1.8G  63% /home
/dev/hda7     ext3    7.9G  6.2G  1.3G  83% /usr
/dev/hda8     ext3   1011M  483M  477M  51% /opt
/dev/hda9     ext3    2.0G  607M  1.3G  32% /var
/dev/hda1     ext2     51M   17M   31M  36% /boot
/dev/hda6     swap    516M   12M  504M   2% &lt;not mounted&gt;
<comment>(Opartitionerat för framtida användning: 2 GB)</comment>
</pre>

<p>
<path>/usr</path> är ganska full (83% used) här, men när väl all mjukvara är installerat brukar inte <path>/usr</path> växa så mycket. Vad gäller <path>/var</path> kan man tro att det tilldelade utrymmet är för mycket. Emellertid kompilerar Gentoo alla program i <path>/var/tmp/portage</path>, så du ska ha minst 1 G ledigt utrymme i <path>/var</path> om du inte vill kompilera stora program, och minst 3 G ledigt om du kompilerar KDE eller OpenOffice.org.
</p>

</body>
</subsection>
</section>
<section id="fdisk">
<title>Använd fdisk för att partitionera din disk</title>
<subsection>
<body>

<p>
I det följande förklaras hur du skapar det exempel på partitionsorganisation som beskrivits tidigare, nämligen:
</p>

<table>
<tr>
  <th>Partition</th>
  <th>Beskrivning</th>
</tr>
<tr>
  <ti><path>/dev/hda1</path></ti>
  <ti>Bootpartition</ti>
</tr>
<tr>
  <ti><path>/dev/hda2</path></ti>
  <ti>Swappartition</ti>
</tr>
<tr>
  <ti><path>/dev/hda3</path></ti>
  <ti>Rootpartition</ti>
</tr>
</table>

<p>
Ändra partitionsschemat efter dina egna behov.
</p>

</body>
</subsection>
<subsection>
<title>Visa den aktuella partitioneringen</title>
<body>

<p>
<c>fdisk</c> är ett populärt och kraftfullt verktyg att dela dina diskar i partitioner. Starta <c>fdisk</c> på din disk (i vårt exempel använder vi <path>/dev/hda</path>):
</p>

<pre caption="Starta fdisk">
# <i>fdisk /dev/hda</i>
</pre>

<p>
Väl i <c>fdisk</c> ser du en kommandorad som ser ut som följer:
</p>

<pre caption="fdisk prompten">
Command (m for help): 
</pre>

<p>
Tryck <c>p</c> för att visa den aktuella partitioneringen:
</p>

<pre caption="Ett exempel på partitionering">
Command (m for help): <i>p</i>

Disk /dev/hda: 240 heads, 63 sectors, 2184 cylinders
Units = cylinders of 15120 * 512 bytes

Device Boot    Start       End    Blocks   Id  System
/dev/hda1             1        14    105808+  83  Linux
/dev/hda2            15        49    264600   82  Linux swap
/dev/hda3            50        70    158760   83  Linux
/dev/hda4            71      2184  15981840    5  Extended
/dev/hda5            71       209   1050808+  83  Linux
/dev/hda6           210       348   1050808+  83  Linux
/dev/hda7           349       626   2101648+  83  Linux
/dev/hda8           627       904   2101648+  83  Linux
/dev/hda9           905      2184   9676768+  83  Linux

Command (m for help): 
</pre>

<p>
Just denna disk är konfigurerad att innehålla sju Linux filsystem (var och ett med en korresponderande partition markerad som "Linux") så väl som en swappartition (anges som "Linux swap"). 
</p>

</body>
</subsection>
<subsection>
<title>Avlägsna alla partitioner</title>
<body>

<p>
Vi ska först radera alla befintliga partitioner på disken. Skriv <c>d</c> för att radera en partition. Om du till exempel vill radera en existerande <path>/dev/hda1</path>:
</p>

<pre caption="Radera en partition">
Command (m for help): <i>d</i>
Partition number (1-4): <i>1</i>
</pre>

<p>
Partitionen har markerats för radering. Den kommer inte längre att dyka upp om du skriver <c>p</c>, men den raderas inte förrän du sparar dina ändringar. Om du gjort ett misstag och vill avbryta utan att spara din förändringar trycker du omedelbart <c>q</c> och retur så kommer inte dina partitioner att raderas.
</p>

<p>
Nu antar vi att du verkligen vill radera alla partitioner på ditt system. Upprepa proceduren att trycka <c>p</c> för en partitionstabell och sedan <c>d</c> och partitionsnumret för att radera partitonen. Du kommer till slut att ha en tom partitionstabell:
</p>

<pre caption="En tom partitionstabell">
Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System

Command (m for help):
</pre>

<p>
Nu när partitionstabellen i arbetsminnet är tomt är vi redo att skapa partitionerna. Vi kommer at använda den standardpartitionering som diskuterades tidigare. Du ska naturligtvis inte följa dessa instruktioner slaviskt om du vill ha ett avvikande partitionsschema!
</p>

</body>
</subsection>
<subsection>
<title>Skapa en bootpartition</title>
<body>

<p>
Vi ska först skapa en liten bootpartition. Skriv <c>n</c> för att skapa en ny partition och därefter <c>p</c> för att välja en primär partition, följt av <c>1</c> för att ange den första primära partitionen. När du tillfrågas om den första cylindern trycker du retur. När du tillfrågas om den sista cylindern skriver du <c>+32M</c> för att skapa en partition om 32 Mbyte:
</p>

<pre caption="Skapa bootpartitionen">
Command (m for help): <i>n</i>
Command action
  e   extended
  p   primary partition (1-4)
<i>p</i>
Partition number (1-4): <i>1</i>
First cylinder (1-3876, default 1): <comment>(Tryck retur)</comment>
Using default value 1
Last cylinder or +size or +sizeM or +sizeK (1-3876, default 3876): <i>+32M</i>
</pre>

<p>
När du nu skriver <c>p</c> ser du följande partitionsutskrift:
</p>

<pre caption="Skapad bootpartition">
Command (m for help): <i>p</i>

Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System
/dev/hda1          1        14    105808+  83  Linux
</pre>

<p>
Vi måste göra denna partition startbar. Skriv <c>a</c> för att markera partitionen som startbar och välj <c>1</c>. Om du trycker <c>p</c> igen kommer du att märka att en 
<path>*</path> finns i kolumnen "Boot".
</p>

</body>
</subsection>
<subsection>
<title>Skapa en swappartition</title>
<body>

<p>
Nu ska vi skapa en växlingspartition. För att göra detta skriver du <c>n</c> för att skapa en ny partition och därefter <c>p</c> för att meddela fdisk att du vill ha en primär partition. Därefter skriver du <c>2</c> för att skapa den andra primära partitionen, <path>/dev/hda2</path> i vårt fall. När du tillfrågas om den första cylindern trycker du retur. När du tillfrågas om den sista cylindern skriver du <c>+512M</c> för att skapa en partition om 512 MB. När du gjort detta skriver du <c>t</c> för att ange partitionstypen
<c>2</c> för att välja den partition du just skapat och sedan <c>82</c> för att ange partitionstypen till "Linux Swap". När detta är klart skriver du <c>p</c> och du bör se en partitionstabell liknande denna:
</p>

<pre caption="Partitionslista efter att ha skapat en växlingspartition">
Command (m for help): <i>p</i>

Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System
/dev/hda1 *        1        14    105808+  83  Linux
/dev/hda2         15        81    506520   82  Linux swap
</pre>

</body>
</subsection>
<subsection>
<title>Skapa en rootpartition</title>
<body>

<p>
Låt oss slutligen skapa en rootpartition. För att göra detta skriver du <c>n</c> för att skapa en ny partition och därefter <c>p</c> för att meddela fdisk att du vill ha en primär partition. Skriv sedan <c>3</c> för att skapa den tredje primära partitionen, <path>/dev/hda3</path> i vårt fall. När du tillfrågas om den första cylindern trycker du retur. När du tillfrågas om den sista cylindern trycker du retur igen för att skapa en partition som använder resterande utrymme. När detta är gjort skriver du <c>p</c> vilken ska ge dig en partitonstabell liknande denna:
</p>

<pre caption="Partition listing after creating the root partition">
Command (m for help): <i>p</i>

Disk /dev/hda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System
/dev/hda1 *        1        14    105808+  83  Linux
/dev/hda2         15        81    506520   82  Linux swap
/dev/hda3         82      3876  28690200   83  Linux
</pre>


</body>
</subsection>
<subsection>
<title>Spara partitionslayouten</title>
<body>

<p>
För att spara partitionslayouten och avsluta <c>fdisk</c>, skriver du <c>w</c>.
</p>

<pre caption="Spara och avsluta fdisk">
Command (m for help): <i>w</i>
</pre>

<p>
Nu när dina partitioner har skapats kan du fortsätta med <uri link="#filesystems">Skapa filsystem</uri>.
</p>

</body>
</subsection>
</section>
<section id="filesystems">
<title>Skapa filsystem</title>
<subsection>
<title>Inledning</title>
<body>

<p>
Nu när dina partitioner har skapats är det dags att lägga ett filsystem på dem. Om du inte bryr dig om vilket filsystem det är och är nöjd med det vi använder som standard i denna handbok kan du fortsätta med <uri link="#filesystems-apply">Lägga ett filsystem på en partition</uri>. Annars läser du vidare för att lära dig lite om de filsystem som erbjuds...
</p>

</body>
</subsection>
<subsection>
<title>Filsystem?</title>
<body>

<p>
Det finns flera filssystem att välja på. Vissa har befunnits stabila på amd64 plattformen, andra inte. Följande filsystem har visats sig vara stabila: ext2 och ext3. jfs och reiserfs kan fungera men behöver testas ytterligare Om du är verkligt äventyrligt lagd kan du testa de filsystem som inte stöds.
</p>

<p>
<b>ext2</b> är det välkända filsystemet på Linux men har inte metadatajournaler. Vilket betyder att rutinartade kontroller av ext2 filsystem vid systemstart kan ta ganska lång tid. Det finns nu ett större urval av nyare, journalbaserade filsystem som kan kontrollera filsystemet mycket snabbt och brukar därför föredras före filsystem utan journaler. Journalbaserade filsystem förhindrar långa förseningar när du startar ditt system och filsystemet råkar vara inkonsistent.
</p>

<p>
<b>ext3</b> är en journalbaserad version av filsystemet ext2, som ger journalföring av metadata för snabb återställning utöver förbättrad journalföringslägen som full och ordnad datajournaler. ext3 är ett mycket bra och pålitligt filsystem. Det har en extra hashad b-tree indexmöjlighet som möjliggör hög prestanda i nästan alla situationer. I korthet, ext3 är ett utmärkt filsystem.
</p>

<p>
<b>ReiserFS</b> är en B*-tree baserat filsystem som har mycket god allmän prestanda och utklassar både ext2 och ext3 när den hanterar små filer (mindre än 4k), ofta  med så mycket som 10-15 gånger. ReiserFS skalar också extremt bra och har journalförd metadata. I och med 2.4.18 kärnan och senare är ReiserFS ett solitt och användbart filsystem för såväl allmäna situationer som extrema fall som skapande av stora filsystem bestående av många små filer, mycket stora filer och kataloger innehållandes tiotusentals filer.
</p>

<p>
<b>XFS</b> är ett filsystem med journalförd metadata som kommer med en robust uppsättning funktioner och är optimerat för skalbarhet.  Vi rekommenderar detta filsystem endast för Linuxsystem med mer avancerade SCSI och/eller fibre channel lagringsystem med UPS. Eftersom XFS cachar in-transit data aggresivt i RAM, kan felaktigt designade program (sådana som inte tar tillräckliga försiktighetsåtgärder när de skriver till disk och det finns en hel del sådana)  förlora en hel del data om systemet går ner oväntat.
</p>

<p>
<b>JFS</b> är IBMs högpresterande journalbaserade filsystem. Den har nyligen gjorts redo för produktionsmiljöer och det finns därför inte mycket historik kring hur filsystemet uppför sig - varken positiv eller negativ information finns på dess generella pålitlighet.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>Lägga ett filsystem på en partition</title>
<body>

<p>
För att skapa ett filsystem på en partition eller volym finns det verktyg för det på varje möjligt filsystem:
</p>

<table>
<tr>
  <th>Filsystem</th>
  <th>Kommando för att skapa</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
Som exempel tar vi bootpartitionen (<path>/dev/hda1</path> i vårt exempel) i ext2 och rootpartitionen (<path>/dev/hda3</path> i vårt exempel) i ext3 (som i vårt exempel), då du ska använda:
</p>

<pre caption="Lägga ett filsystem på en partition">
# <i>mke2fs /dev/hda1</i>
# <i>mke2fs -j /dev/hda3</i>
</pre>

<p>
Nu skapar du filsystemen på de nyligen skapade partitionerna.
</p>

</body>
</subsection>
<subsection>
<title>Aktivera växlingspartitionen</title>
<body>

<p>
<c>mkswap</c> är kommandot som används för att initialisera växlingspartitioner:
</p>

<pre caption="Skapa en växlingspartition">
# <i>mkswap /dev/hda2</i>
</pre>

<p>
För att aktivera växlingspartitionen använder du <c>swapon</c>:
</p>

<pre caption="Aktivera växlingspartitionen">
# <i>swapon /dev/hda2</i>
</pre>

<p>
Skapa och aktivera nu växlingspartitionen.
</p>

</body>
</subsection>
</section>
<section>
<title>Montering</title>
<body>

<p>
Nu när dina partitioner har initialiserats och har ett filsystem är det dags att montera dessa. Använd kommandot <c>mount</c>. Glöm inte att skapa de nödvändiga monteringskatalogerna för varje partition du skapade. Som exempel väljer vi att montera root- och bootpartitionerna:
</p>

<warn>
På grund av en bugg i e2fsprogs paketet behöver du explicit använda argumentet  <c>mount -t ext3</c> om du använder ett ext3-filsystem.
</warn>

<pre caption="Montera partitioner">
# <i>mount /dev/hda3 /mnt/gentoo</i>
<comment>(För ext3 partitioner:)</comment>
# <i>mount -t ext3 /dev/hda3 /mnt/gentoo</i>

# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/hda1 /mnt/gentoo/boot</i>
</pre>

<note>
Om du vill att din <path>/tmp</path> ska ligga på en separat partition se till att ändra dess rättigheter efter monteringen: <c>chmod 1777 /mnt/gentoo/tmp</c>. Detta gäller också för <path>/var/tmp</path>.
</note>

<p>
Vi kommer också att behöva montera proc filsystemet (ett virtuellt gränssnitt till kärnan) på <path>/proc</path>. Men innan vi gör det måste vi lägga in filer i våra partitioner.
</p>

<p>
Fortsätt med <uri link="?part=1&amp;chap=5">Installera Gentoos installationsfiler</uri>.
</p>

</body>
</section>
</sections>
