<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/sv/handbook/hb-working-rcscripts.xml,v 1.5 2005/06/03 19:42:12 neysx Exp $ -->

<sections>

<version>1.20</version>
<date>2004-05-20</date>

<section>
<title>Runlevels</title>
<subsection>
<title>Starta ditt system</title>
<body>

<p>
När du startar ditt system kommer du att se massor med text rulla förbi på
skärmen. Om du är uppmärksam kommer du att upptäcka att det är samma text varje
gång du startar ditt system. Ordningen för alla dessa aktiviteter kallas
<e>startordning</e> och är (mer eller mindre) statiskt definierad.
</p>
  
<p>
Först laddar systemladdaren den kärna du har definierat i systemladdarens
konfiguration i minnet och därefter säger den till processorn att köra kärnan.
När kärnan har laddats och körs initialiserar den alla strukturer och uppgifter
som är specifika för kärnan varpå <c>init</c> processen startar.
</p>
  
<p>
Den här processen säkerställer sedan att alla filsystem (definierade i
<path>/etc/fstab</path>) monteras och är redo att användas. Därefter exekveras
flera skript som finns i <path>/etc/init.d</path>, som alla startar de tjänster
du behöver för att ha lyckats starta systemet.
</p>

<p>
Slutligen, när alla skript har exekverats, aktiverar <c>init</c> de terminaler
(i de flesta fall bara de virtuella konsoler som döljs bakom <c>Alt-F1</c>,
<c>Alt-F2</c>, osv) och applicerar en speciell process, kallad <c>agetty</c>
till detta.  Denna process kommer så att säkerställa att du kan logga in via
dessa terminaler genom att köra <c>login</c>.
</p>

</body>
</subsection>
<subsection>
<title>Initskript</title>
<body>

<p>
<c>init</c> exekverar inte bara skript i <path>/etc/init.d</path> slumpmässigt.
Den kör dessutom inte alla skript i <path>/etc/init.d</path>, utan bara de
skript den blivit tillsagd att exekvera. Den avgör vilka skript den ska köra
genom att läsa <path>/etc/runlevels</path>.
</p>

<p>
Till att börja med kör <c>init</c> alla skript i <path>/etc/init.d</path> som
har symboliska länkar i <path>/etc/runlevels/boot</path>. Den startar
vanligtvis skripten i alfabetisk ordning, men några skript innehåller
beroendeinformation som säger att ett annat skript måste köras innan de själva
kan startas.
</p>

<p>
När alla skript refererade i <path>/etc/runlevels/boot</path> har körts
fortsätter <c>init</c> att köra de de skript som har symboliska länkar till
<path>/etc/runlevels/default</path>. Här använder den sig återigen av
alfabetisk ordning för att avgöra vilket skript som ska köras först - såvida
inte något skript innehåller bereondeinformation. I det fallet är
startordningen så att en korrekt startsekvens åstadkoms. 
</p>

</body>
</subsection>
<subsection>
<title>Hur init arbetar</title>
<body>

<p>
<c>init</c> avgör naturligtvis inte allt detta själv. Den behöver en
konfigurationsfil som specificerar vilka aktiviteter som ska vidtas. Denna
konfigurationsfil heter  <path>/etc/inittab</path>.
</p>

<p>
Om du kommer ihåg startsekvensen vi just beskrev så kommer du ihåg att
<c>init</c>s första uppgift var att montera alla filsystem. Detta definieras i
följande rad ur <path>/etc/inittab</path>:
</p>

<pre caption="Systeminitialiseringsraden i /etc/inittab">
si::sysinit:/sbin/rc sysinit
</pre>

<p>
Denna rad talar om för <c>init</c> att den måste köra <c>/sbin/rc sysinit</c>
för att initialisera systemet. <path>/sbin/rc</path> skriptet tar hand om
initialiseringen så man kan säga att <c>init</c> inte gör så mycket -- den
delegerar uppgiften att initialisera systemet till en annan process.
</p>

<p>
Därefter exekverade <c>init</c> alla skript som hade en symbolisk länk i
<path>/etc/runlevels/boot</path>. Detta definieras i följande rad:
</p>

<pre caption="Systeminitialiseringen, fortsättning">
rc::bootwait:/sbin/rc boot
</pre>

<p>
Återigen utför <c>rc</c> skripten de nödvändiga uppgifterna. Notera att valet
som ges <c>rc</c> (<e>boot</e>) är det samma som den underkatalog till
<path>/etc/runlevels</path> som används.
</p>

<p>
Nu kontrollerar <c>init</c> sin konfigurationsfil för att se vilken
<e>runlevel</e> den ska köra. För att avgöra detta läser den följande rad från
<path>/etc/inittab</path>:
</p>

<pre caption="initdefault raden">
id:3:initdefault:
</pre>

<p>
I detta fall (som merparten av Gentoos användare kommer att använda) är
<e>runlevel</e> id 3. Med denna information kontrollerar <c>init</c> vad som
måste köras för att starta <e>runlevel 3</e>:
</p>

<pre caption="Startnivådefinitionerna">
l0:0:wait:/sbin/rc shutdown
l1:S1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
</pre>

<p>
Raden som definierar nivå 3 använder återigen <c>rc</c>skriptet för att starta
de tjänster (nu med argumentet <e>default</e>). Notera återigen att argumentet
till <c>rc</c> är detsamma som underkatalogen till <path>/etc/runlevels</path>.
</p>

<p>
När <c>rc</c> har slutat, bestämmer <c>init</c> vilka virtuella konsoler som
ska aktiveras och vilka kommandon som ska köras vid varje konsol:
</p>

<pre caption="Definitionen av de virtuella konsolerna">
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
</pre>

</body>
</subsection>
<subsection>
<title>Vad är en runlevel?</title>
<body>

<p>
Du har sett att <c>init</c> använder ett numreringschema för att avgöra vilken
<e>runlevel</e> som ska aktiveras. En <e>runlevel</e> är det tillstånd ditt
system körs i och innehåller en serie skript (runlevelskript eller
<e>initskript</e>) som måste exekveras när du går in i eller lämnar en
runlevel.
</p>

<p>
I Gentoo finns det sju definierade runleveler: tre interna och fyra
användardefinierade runleveler. De interna runlevelerna kallas <e>sysinit</e>,
<e>shutdown</e> och <e>reboot</e> och gör exakt vad deras namn indikerar:
initialiserar systemet, stänger av systemet och startar om systemet.
</p>

<p>
De användardefinierade runlevelnivåerna är de som kompletteras med en
motsvarande <path>/etc/runlevels</path> underkatalog: <path>boot</path>,
<path>default</path>, <path>nonetwork</path> och <path>single</path>.
Startnivån<path>boot</path> startar alla tjänster som systemet kräver och som
alla andra runlevelnivåer använder. Övriga tre runleveler skiljer sig åt vad
gäller de tjänster de startart: <path>default</path> används för dagliga
uppgifter, <path>nonetwork</path> används i de fall nätverksanslutning inte
krävs, och <path>single</path> behövs när du ska laga systemet.
</p>

</body>
</subsection>
<subsection>
<title>Arbeta med initskripten</title>
<body>

<p>
Skripten som <c>rc</c> processen startar kallas <e>initskript</e>. Varje skript
i <path>/etc/init.d</path> kan exekveras med argumenten <e>start</e>,
<e>stop</e>, <e>restart</e>, <e>pause</e>, <e>zap</e>, <e>status</e>,
<e>ineed</e>, <e>iuse</e>, <e>needsme</e>, <e>usesme</e> eller <e>broken</e>.
</p>

<p>
För att starta, stoppa eller starta om en tjänst (och alla relaterade tjänster)
ska <c>start</c>, <c>stop</c> och <c>restart</c> användas:
</p>

<pre caption="Starta Postfix">
# <i>/etc/init.d/postfix start</i>
</pre>

<note>
Bara de tjänster som  <e>behöver</e> en specifik tjänst stoppas eller startas
om. Övriga relaterade tjänster (de som <e>använder</e> tjänsten men inte
behöver den) påvekas inte.
</note>

<p>
Om du vill stoppa en tjänst, men inte de tjänster som är beroende på den, kan
du använda argumentet <c>pause</c>:
</p>

<pre caption="Stoppa Postfix men behåll de beroende tjänsterna uppe">
# <i>/etc/init.d/postfix pause</i>
</pre>

<p>
Om du vill se vilken status en tjänst har (startad, stoppad, pausad, ...) kan
du använda <c>status</c> argumentet:
</p>

<pre caption="Statusinformation för postfix">
# <i>/etc/init.d/postfix status</i>
</pre>

<p>
Om statusinformationen säger att tjänsten är uppe, men du vet att den inte är
det, kan du återställa statusinformationen till "stoppad" med <c>zap</c>
argumentet:
</p>

<pre caption="Återställ statusinformationen för postfix">
# <i>/etc/init.d/postfix zap</i>
</pre>

<p>
För att också få reda på vilka relationer tjänsten har kan du använda
<c>iuse</c> eller <c>ineed</c>. Med <c>ineed</c> kan du se de tjänster som
verkligen är nödvändiga för att tjänsten ska fungera korrekt. <c>iuse</c> å
andra sidan visar de tjänster som kan användas av tjänsten, men som inte är
nödvändig för att tjänsten ska fungera.
</p>

<pre caption="Begär en lista på alla nödvändiga tjänster på vilka Postfix är beroende">
# <i>/etc/init.d/postfix ineed</i>
</pre>

<p>
Du kan på samma sätt fråga vilka tjänster som kräver tjänsten (<c>needsme</c>)
eller som kan använda den(<c>usesme</c>):
</p>

<pre caption="Begär en lista på alla tjänster som kräver Postfix">
# <i>/etc/init.d/postfix needsme</i>
</pre>

<p>
Slutligen kan du fråga vilka beroenden tjänsten kräver men som saknas:
</p>

<pre caption="Begär en lista på saknade beroenden för Postfix">
# <i>/etc/init.d/postfix broken</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Working with rc-update</title>
<subsection>
<title>Vad är rc-update?</title>
<body>

<p>
Gentoos init system använder ett relationsträd för att avgöra vilka tjänster
som måste startas först. Eftersom detta är en enformig uppgift som vi inte vill
att våra användare ska göra manuellt har vi skapat verktyg som förenklar
administrationen av runleveler och initskript.
</p>

<p>
Med <c>rc-update</c> kan du lägga till och ta bort initskript från en runlevel.
Verktyget <c>rc-update</c> kommer därefter automatiskt att be <c>depscan.sh</c>
skriptet att bygga om relationsträdet.
</p>

</body>
</subsection>
<subsection>
<title>Lägga til och ta bort tjänster</title>
<body>

<p>
Du har redan lagt till initskript i runleveln "default" under installationen av
Gentoo. Vid det tillfället kanske du inte hade en aning om vad "default" är
till för, men det bör du veta nu. <c>rc-update</c>skriptet kräver ett andra
argument som definierar detta uppgift: <e>add</e>, <e>del</e> eller
<e>show</e>.
</p>

<p>
För att lägga till eller ta bort ett initskript ger du bara <c>rc-update</c>
argumentet <c>add</c> eller <c>del</c>, följt av initskriptet och önskad
runlevel. Ett exempel:
</p>

<pre caption="Avlägsna Postfix från runleveln default">
# <i>rc-update del postfix default</i>
</pre>

<p>
Kommandot <c>rc-update show</c> visar alla tillgängliga initskript och
presentera en lista över i vilka runleveler de kommer att köras:
</p>

<pre caption="Få initskript information">
# <i>rc-update show</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Konfigurera tjänster</title>
<subsection>
<title>Varför behövs ytterligare konfiguration?</title>
<body>

<p>
Initskript kan vara ganska komplexa. Det är därför inte särskilt önskvärt att
användarna redigerar initskripten direkt, då detta skulle minska
felmarginalerna. Det är emellertid viktigt att kunna konfigurera en sådan
tjänst. Om du t ex vill ge själva tjänsten fler möjligheter. 
</p>

<p>
En andra orsak till att hålla denna konfiguration utanför initskripten är att
kunna uppdatera skripten utan att riskera att dina förändringar av
konfigurationen påverkas.
</p>

</body>
</subsection>
<subsection>
<title>Katalogen /etc/conf.d</title>
<body>

<p>
Gentoo tillhandahåller ett enkelt sätt att konfigurera en sådan tjänst: varje
initskript som kan konfigureras har en fil i <path>/etc/conf.d</path>. Till
exempel har apache2s initskript (kallad <path>/etc/init.d/apache2</path>) en
konfigurationsfil kallad <path>/etc/conf.d/apache2</path> som kan innehålla de
tillval du vill ge Apache 2 servern när den startas:
</p>

<pre caption="Variabler definierade i /etc/conf.d/apache2">
APACHE2_OPTS="-D PHP4"
</pre>

<p>
En sådan konfigurationsfil innehåller variabler och endast variabler (precis
som <path>/etc/make.conf</path>), vilket gör det mycket enkelt att konfigurera
tjänsten. Det tillåter oss också ge mer information om variablerna (som
kommentarer).
</p>

</body>
</subsection>
</section>
<section>
<title>Skriva initskript</title>
<subsection>
<title>Måste jag?</title>
<body>

<p>
Nej, att skriva ett initskript är vanligen inte nödvändigt eftersom Gentoo
tillhandahåller skript som är redo att användas för alla tillgängliga tjänser.
Det kan emellertid vara så att du har installerat tjänster utan att använda
Portage, och i de fallen behöver du sannolikt skapa ett initskript.
</p>

<p>
Använd inte initskriptet som tillhandahålls av tjänsten om den inte är explicit
skriven för Gentoo: Gentoos initskript är inte kompatibla med initskript från
andra distributioner!
</p>

</body>
</subsection>
<subsection>
<title>Layout</title>
<body>

<p>
Den grundläggande organisationen av ett initskript är som följer.
</p>

<pre caption="Grundläggande organisation av ett initskript">
#!/sbin/runscript

depend() {
  <comment>(Relationsinformation)</comment>
}

start() {
  <comment>(Kommandon som är nödvändiga för att starta tjänsten)</comment>
}

stop() {
  <comment>(Kommandon som är nödvändiga för att stoppa tjänsten)</comment>
}

restart() {
  <comment>(Kommandon som är nödvändiga för att starta om tjänsten)</comment>
}
</pre>

<p>
Alla skript <e>kräver</e> att <c>start()</c> funktion är definierad. Alla
övriga delar är frivilliga.
</p>

</body>
</subsection>
<subsection>
<title>Beroenden</title>
<body>

<p>
Det finns två beroenden du kan definiera: <c>use</c> och <c>need</c>. Som vi
nämnde tidigare är <c>need</c> relationen striktare än <c>use</c> beroendet.
Efter detta beroende anger du tjänsten den är beroende av, eller dess
<e>virtuella</e> relation.
</p>

<p>
En <e>virtuell</e> relation är ett beroende en tjänst tillhandahåller, men som
inte bara tillhandahålls av enbart en tjänst. Ditt initskript kan vara beroende
av en systemloggare, men det finns flera systemloggare tillgängliga (metaloge,
syslog-ng, sysklogd, ...). Eftersom du inte <c>behöver</c> varenda en (inga
vettiga system har alla dessa systemloggare installerade och aktiva) har vi
sett till att alla dessa tjänster <c>tillhandahåller</c> ett virtuellt
beroende.
</p>

<p>
Låt oss ta en titt på relationsinformationen för tjänsten postfix.
</p>

<pre caption="Relationsinformation för Postfix">
depend() {
  need net
  use logger dns
  provide mta
}
</pre>

<p>
Som du ser gäller följande för postfix tjänsten:
</p>

<ul>
  <li>
    kräver (det virtuella) <c>net</c> beroendet (som erbjuds av, t ex,
    <path>/etc/init.d/net.eth0</path>)
  </li>
  <li>
    använder (det virtuella) <c>logger</c> beroendet (som erbjuda av, t ex,
    <path>/etc/init.d/syslog-ng</path>)
  </li>
  <li>
    använder (det virtuella) <c>dns</c> beroendet (som erbjuds av, t ex,
    <path>/etc/init.d/named</path>)
  </li>
  <li>
    tillhandahåller (det virtuella) <c>mta</c> beroendet (som är gemensamt för
    alla epostservrar)
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>Kontrollera ordningen</title>
<body>

<p>
I vissa fall kanske du inte kräver en tjänst, men vill att din tjänst startas
<c>före</c> (eller <c>efter</c>) en annan tjänst <e>om</e> den är tillgänglig
på systemet (lägg märke till villkoret - detta är inte längre ett beroende)
<e>och</e> körs under samma runlevel (lägg märke till villkoret - bara tjänster
på samma runlevel är inblandade). Du kan ange denna information med
<c>before</c> eller <c>after</c> värdena.
</p>

<p>
Som ett exempel tar vi värdena för Portmap tjänsten:
</p>

<pre caption="depend() funktionen i Portmap tjänsten">
depend() {
  need net
  before inetd
  before xinetd
}
</pre>

<p>
Du kan också använda den globala "*" för att fånga alla tjänster i samma
runlevel, även om det inte rekommenderas.
</p>

<pre caption="Kör ett initskript som första skript i en runlevel">
depend() {
  before *
}
</pre>

</body>
</subsection>
<subsection>
<title>Standardfunktioner</title>
<body>

<p>
Näst efter <c>depend()</c> funktionaliteten behöver du också definiera
<c>start()</c> funktionen. Denna innehåller alla de kommandon som är nödvändiga
för att initialisera din tjänst. Det rekommenderas att använda <c>ebegin</c>
och <c>eend</c> funktionerna för att informera användaren om vad som ska till
att hända:
</p>

<pre caption="Exempel på start() funktion">
start() {
  ebegin "Starting my_service"
  start-stop-daemon --start --quiet --exec /sökväg/till/min_tjänst
  eend $?
}
</pre>

<p>
Om du behöver fler exempel på <c>start()</c> funktionen, hänvisar vi till
källkoden för de tillgängliga initskripten i din <path>/etc/init.d</path>
katalog. Vad gäller <c>start-stop-daemon</c> finns det en utmärkt manualsida
att tillgå om du behöver mer information:
</p>

<pre caption="Få mer information om från manualsidan">
# <i>man start-stop-daemon</i>
</pre>

<p>
Övriga funktioner du kan definiera är: <c>stop()</c> och <c>restart()</c>. Du
är inte tvungen att definiera dessa funktioner! Vårt initsystem är intelligent
nog att fylla dessa funktioner själv om du använder <c>start-stop-daemon</c>.
</p>

<p>
Gentoos initskriptsyntax baseras på Bourne Again Shell (bash) så du är fri att använda bashkompatibla konstruktioner i dina initskript.
</p>

</body>
</subsection>
<subsection>
<title>Lägga till egna valmöjligheter</title>
<body>

<p>
Om du vill kan ditt initskript stödja fler valmöjligheter än de vi redan har
träffat på. Du bör lägga till dessa till <c>opts</c> variabeln och skapa en
funktion med samma namn som valmöjligheten. Om du till exempel vill stödja en
valmöjlighet som heter <c>restartdelay</c>:
</p>

<pre caption="Stödja valmöjligheten restartdelay">
opts="${opts} restartdelay"

restartdelay() {
  stop()
  sleep 3    <comment># Vänta tre sekunder innan omstart</comment>
  start()
}
</pre>

</body>
</subsection>
<subsection>
<title>Variabler för tjänstekonfiguration</title>
<body>

<p>
Du behöver inte göra något för att stödja en konfigurationsfil i
<path>/etc/conf.d</path>: om ditt initskript exekveras läses följande filer
automatiskt (d.v.s. variablerna är tillgängliga att användas):
</p>

<ul>
  <li><path>/etc/conf.d/&lt;your init script&gt;</path></li>
  <li><path>/etc/conf.d/basic</path></li>
  <li><path>/etc/rc.conf</path></li>
</ul>

<p>
Vidare, om ditt skript tillhandahåller ett virtuellt beroende (såsom
<c>net</c>) läses filen som är associerad med det beroendet (som t ex
<path>/etc/conf.d/net</path>) också in.
</p>

</body>
</subsection>
</section>
<section>
<title>Ändra runlevel-beteende</title>
<subsection>
<title>Vem kan tjäna på det?</title>
<body>

<p>
Många användare av bärbara datorer känner igen situationen: hemma behöver du
starta <c>net.eth0</c> men när du är på resa vill du inte <c>net.eth0</c>
(eftersom det inte finns något tillgängligt nätverk). Med Gentoo kan du
förändra runlevel-beteende som du tycker.
</p>

<p>
Du kan till exempel skapa en andra "default" runlevel som du kan starta och som
har andra initskript associerade till sig. Du kan då vi starttillfället välja
vilken "default" runlevel du vill använda.
</p>

</body>
</subsection>
<subsection>
<title>Använda softlevel</title>
<body>

<p>
Till att börja med, skapa runlevelkatalogen för din andra "default" runlevel. I
exemplet här skapar vi runleveln <path>offline</path>:
</p>

<pre caption="Skapa en katalog för runleveln">
# <i>mkdir /etc/runlevels/offline</i>
</pre>

<p>
Lägg därefter till de nödvändiga initskripten till den nyskapa runleveln. Om du
till exempel vill ha en exact kopia av din nuvarande <c>default</c> runlevel,
dock utan <c>net.eth0</c>:
</p>

<pre caption="Lägga till de nödvändiga initskripten">
<comment>(Kopiera alla tjänster från default runlevel till offline
runlevel)</comment>
# <i>cd /etc/runlevels/default</i>
# <i>for service in *; do rc-update add $service offline; done</i>
<comment>(Ta bort oönskade tjänster från offline runlevel)</comment>
# <i>rc-update del net.eth0 offline</i>
<comment>(Visa aktiva tjänster för offline runlevel)</comment>
# <i>rc-update show offline</i>
<comment>(Del av utdata)</comment>
acpid | offline
domainname | offline
local | offline
net.eth0 |
</pre>

<p>
Redigera nu din systemladdares konfiguration och lägg till en ny post för
runleveln <c>offline</c>. I exemplet använder vi
<path>/boot/grub/grub.conf</path>:
</p>

<pre caption="Lägg till en post för runleveln offline">
title Gentoo Linux Offline Usage
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3 <i>softlevel=offline</i>
</pre>

<p>
Sådär, nu är allt klart. Om du startar ditt system och väljer den nyligen
tillagda posten vid starten kommer runleveln <c>offline</c> att användas
istället för <c>default</c>.
</p>

</body>
</subsection>
<subsection>
<title>Använda bootlevel</title>
<body>

<p>
Att använda <c>bootlevel</c> helt analogt med att använda <c>softlevel</c>. Den
enda skillnaden här är att du kan definiera en andra "boot" runlevel istället
för en "default" runlevel.
</p>

</body>
</subsection>
</section>
</sections>
