<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/sv/handbook/hb-install-x86-kernel.xml,v 1.2 2005/04/28 09:21:55 neysx Exp $ -->

<sections>

<version>2.6</version>
<date>2005-04-21</date>	

<section>
<title>Tidszoner</title>
<body>

<p>
Först behöver du välja din tidszon så systemet vet var du befinner dig. Leta
efter din tidszon i <path>/usr/share/zoneinfo</path>, och gör sedan en
symbolisk länk till <path>/etc/localtime</path> med <c>ln</c>:
</p>

<pre caption="Ange tidszonsinformation">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Vi antar att du vill använda GMT)</comment>
# <i>ln -sf /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Installera källkoden</title>
<subsection>
<title>Att välja kärna</title>
<body>

<p>
Det allting byggs kring i alla distributioner är Linuxkärnan. Den är lagret mellan användarprogramen och systemets hårdvara. Gentoo
ger användarna tillgång till en av flera uppsättningar källkod till kärnan. En fullständig lista finns på <uri link="/doc/en/gentoo-kernel.xml">
Gentoo Kernel Guide</uri>. 
</p>

<p>
Till x86-baserade system har vi, bland andra, <c>vanilla-sources</c>
(standardkärnan såsom den utvecklas av linux-kernel utvecklarna),
<c>gentoo-sources</c> (kärnans källkod patchad med prestandahöjande funktioner), ...
</p>

<p>
Välj källkoden till den kärna du föredrar och installera den med <c>emerge</c>. 
</p>

<pre caption="Installera källkoden till en kärna">
# <i>emerge gentoo-sources</i>
</pre>

<p>
När du sedan tittar i <path>/usr/src</path> kommer du att se en symbolisk känk som heter <path>linux</path> 
som pekar till din kärnas källkod. Vi kommer att utgå från att den installerade källkoden är  <c>gentoo-sources-2.6.11-r3</c>:
</p>

<pre caption="Att se den symboliska länken till kärnans källkod">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.6.11-gentoo-r3
</pre>

<p>
Om så inte är fallet (notera att <c>linux-2.6.11-r3</c> bara är ett exempel) ändrar du den
symboliska länken innan du fortsätter:
</p>

<pre caption="Att ändra den symboliska länken till kärnans källkod">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.6.11-gentoo-r3 linux</i>
</pre>

<p>
Nu är det dags att konfigurera och kompilera kärnan. Du kan använda <c>genkernel</c> för detta, vilket kommer att bygga en generisk kärna, en sådan som används av Installation CDn. Vi beskriver den "manuella" konfigurationen först, eftersom det är det bästa sättet att optimera din miljö.
</p>

<p>
Om du nu vill konfigurera kärnan manuellt fortsätter du med <uri link="#manual">Standard: Manuell konfiguration</uri>. Om du vill använda <c>genkernel</c> ska du läsa <uri link="#genkernel">Alternativ: 
Att använda genkernel</uri> istället.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Standard: Manuell konfiguration</title>
<subsection>
<title>Inledning</title>
<body>

<p>
Att manuellt konfigurera kärnan ses ofta som det svåraste en Linuxanvändare behöver göra. Inget kunde vara mindre sant - efter att du har konfigurerat ett par kärnor kommer du inte ens att komma ihåg att det var svårt ;)
</p>

<p>
<e>En</e> sak är trots allt ändå sant: du måste känna ditt system när du börjar konfigurera din kärna manuellt. Mycket information kan hittas i <path>/proc/pci</path> (eller genom att använda <c>lspci</c> om det är tillgängligt). Du kan också använda <c>lsmod</c> för att se vilka modular kärnan på LiveCD använder (vilket också kan ge dig en ledtråd till vad som ska aktiveras).
</p>

<p>
Gå nu till kärnans källkatalog och kör <c>make menuconfig</c>. Detta startar en ncurses-baserad konfigurationsmeny.
</p>

<pre caption="Att starta menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Du möts här av flera konfigurationssektioner. Vi anger först några alternativ du måste aktivera (annars kommer Gentoo inte att fungera, eller fungera korrekt utan ytterligare modifieringar). 
</p>

</body>
</subsection>
<subsection>
<title>Aktivera nödvändiga alternativ</title>
<body>

<p>
Till att börja med aktiverar du användningen av utvecklingsversion och experimentell kod/drivrutiner. Detta är nödvändigt för annars kommer viktig kod/drivrutiner inte att visas:
</p>

<pre caption="Att välja experimentell kod/drivrutiner">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Se till att alla drivrutiner som är vitala för starten av ditt system (som SCSI-kontrollern ...) är kompilerade <e>i</e> kärnan och inte som moduler, annars kommer ditt system inte att kunna starta helt.
</p>

<p>
Välj nu rätt processorfamilj:
</p>

<pre caption="Välj rätt processorfamilj">
Processor type and features ---&gt;
  <comment>(Byt till vad som är lämpligt för ditt system)</comment>
  (<i>Athlon/Duron/K7</i>) Processor family
</pre>

<p>
Gå nu till <c>File Systems</c> och välj stöd för de filsystem du vill använda.
<e>Du ska inte</e> kompilera dem som moduler, då kommer ditt Gentoo system inte att kunna montera dina partitioner. Välj också 
<c>Virtual memory</c>, <c>/proc filsystem</c>. Om du använder en 2.6 kärna (standard), ska du <e>inte</e> välja <c>/dev filsystemet</c>, Gentoo/x86 använder <c>udev</c> som standard numera. Om du använder en 2.4 kärna kan du fortfarande välja <c>/dev filsystemet</c> då 2.4 kärnorna inte stöder <c>udev</c>.
</p>

<pre caption="Välja nödvändig filsystem">
<comment>(Med en 2.4.x kärna)</comment>
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot
  [ ] /dev/pts file system for Unix98 PTYs

<comment>(Med en 2.6.x kärna)</comment>
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [ ] /dev file system support (OBSOLETE)
    [*] Virtual memory file system support (former shm fs)

<comment>(Välj en eller flera av följande alternativ till ditt system)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Om ditt BIOS inte kan hantera stora hårddiskar och du har byglat hårddisken till att rapportera en begränsad storlek måste du aktivera följande alternativ för att kunna komma åt hela disken:
</p>

<pre caption="Välj autogeometry resizing support">
<comment>(Endast 2.4.x kärnan)</comment>
ATA/IDE/MFM/RLL support ---&gt;
  IDE, ATA and ATAPI Block devices ---&gt;
    &lt;*&gt;   Include IDE/ATA-2 DISK support
    [ ]     Use multi-mode by default
    [*]     Auto-Geometry Resizing support
</pre>

<p>
Glöm inte att aktivera stödet för DMA för dina diskar:
</p>

<pre caption="Aktivera DMA">
Device Drivers ---&gt;
ATA/ATAPI/MFM/RLL support ---&gt;
[*] Generic PCI bus-master DMA support
[*]   Use PCI DMA by default when available
</pre>

<p>
Om du använder PPPoE för att ansluta till Internet eller om du använder ett telefonmodem, kommer du att behöva aktivera följande alternativ i kärnan:
</p>

<pre caption="Välja drivrutiner för PPPoE">
<comment>(Med en 2.4.x kärna)</comment>
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports

<comment>(Med en 2.6.x kärna)</comment>
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
De två komprimeringsmöjligheterna skadar inte, men krävs inte heller. Likaså kan man undvara <c>PPP over Ethernet</c> valet, som bara kan användas av <c>rp-pppoe</c> när den är konfigurerad till att använda kärnans PPPoE läge.
</p>

<p>
Du kan behöva kontrollera att du aktiverar stöd i kärnan för ditt ethernetkort.
</p>

<p>
Om du har en Intel CPU som stöder HyperThreading (tm), eller om du har ett multi-CPU system bör du aktivera "Symmetric multi-processing support":
</p>

<pre caption="Aktivera SMP support">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
Om du använder USB tillbehör för indata (som tangentbord eller mus) får du inte glömma att aktivera dessa också:
</p>

<pre caption="Aktivera stöd för vissa USB tillbehör">
USB Support ---&gt;
  &lt;*&gt;   USB Human Interface Device (full HID) support
</pre>

<p>
Användare av bärbara datorer som vill använda PCMCIA ska <e>inte</e> använda drivrutinerna för PCMCIA om de väljer en 2.4 
kärna. Nyare drivrutiner är tillgängliga genom <c>pcmcia-cs</c> paketet som installeras senare. Användare av 2.6-kärnan ska däremot kärnans PCMCIA drivrutiner.
</p>

<p>
Förutom att kompilera in PCMCIA stöd i 2.6 kärnan ska du inte glömma att aktivera stöd för PCMCIA bryggkort som finns i ditt system:
</p>

<pre caption="Aktivera PCMCIA stöd för 2.6 kärnor">
Bus options (PCI, PCMCIA, EISA, MCA, ISA)  ---&gt;
PCCARD (PCMCIA/CardBus) support  ---&gt;
&lt;*&gt; PCCard (PCMCIA/CardBus) support
<comment>(välj 16 bitar om du behöver stöd för äldre PCMCIA kort. De flesta användarna vill ha detta.)</comment>
&lt;*&gt;   16-bit PCMCIA support
[*]   32-bit CardBus support
<comment>(välj relevant brygga nedan)</comment>
--- PC-card bridges
&lt;*&gt; CardBus yenta-compatible bridge support (NEW)
&lt;*&gt; Cirrus PD6729 compatible bridge support (NEW)
&lt;*&gt; i82092 compatible bridge support (NEW)
&lt;*&gt; i82365 compatible bridge support (NEW)
&lt;*&gt; Databook TCIC host bridge support (NEW)
</pre>

<p>
När du konfigurerat kärnan, fortsätt med <uri link="#compiling">Kompilering och installation</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilering och installation</title>
<body>

<p>
Nu när du har konfigurerat din kärna är det dags att kompilera och installera den. Avsluta konfigurationen och starta kompilationsprocessen:
</p>

<pre caption="Kompilera kärnan">
<comment>(För 2.4 kärnan)</comment>
# <i>make dep &amp;&amp; make bzImage modules modules_install</i>

<comment>(För 2.6 kärnan)</comment>
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
När kärnan har slutat kompileras kopierar du kärnan till <path>/boot</path>. Från och med nu antar vi att den kärna du använder är 
2.6.11-r3 versionen från <c>gentoo-sources</c>. Använd det namn du tycker passar ditt val bättre och lägg det på minnet eftersom du kommer att behöva den senare när du konfigurerar din systemladdare.
</p>

<pre caption="Installera kärnan">
# <i>cp arch/i386/boot/bzImage /boot/kernel-2.6.11-gentoo-r3</i>
# <i>cp System.map /boot/System.map-2.6.11-gentoo-r3</i>
</pre>

<p>
Det är också klokt att kopiera din konfigurationsfil till <path>/boot</path>, utifall att ... :)
</p>

<pre caption="Säkerhetskopiering av kärnans konfiguration">
# <i>cp .config /boot/config-2.6.11-gentoo-r3</i>
</pre>

<p>
Fortsätt nu med <uri link="#kernel_modules">Installera separata moduler till kärnan</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternativ: Använda genkernel</title>
<body>

<p>
Om du läser det här avsnittet  har du valt att låta vårt <c>genkernel</c> skript konfigurera kärnan åt dig.
</p>

<p>
Nu när källkoden till kärnan är installerad är det dags att kompilera din kärna. Med hjälp av vårt <c>genkernel</c> skript kan du automatiskt bygga en kärna åt dig. <c>genkernel</c> konfigurerar kärnan närmast identiskt med den som finns på vår Installation CD. Detta betyder att när du använder <c>genkernel</c> för att bygga kärnan så kommer ditt system att upptäcka all hårdvara vid uppstarten, precis som vår Installation CD gör. Eftersom genkernel inte kräver någon manuell konfiguration av kärnan är det den idealiska lösningen för de användare som känner sig osäkra på att kompilera sina egna kärnor.
</p>

<p>
Låt oss då se hur vi använder genkernel. Först installerar vi en ebuild för genkernel:
</p>

<pre caption="Installera genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Nästa steg är, om du kommer att konfigurera en 2.6 kärna, kopiera över kärnans konfiguration som används av Installation CDn till den plats där genkernel letar efter kärnans standardkonfiguration:
</p>

<pre caption="Kopiera över kärnans konfiguration från Installation CDn">
<comment>(Gör endast detta om du kommer att konfigurera en 2.6 kärna)</comment>
# <i>zcat /proc/config.gz &gt; /usr/share/genkernel/x86/kernel-config-2.6</i>
</pre>

<p>
Nu kompilerar du kärnans källkod genom att ge kommandot <c>genkernel --udev all</c> (för 2.6 kärnor) eller <c>genkernel all</c> (för 2.4 kärnor).
Tänk dock på att <c>genkernel</c> skapar en kärna som stöder nästan all hårdvara. Det kommer att ta tid innan denna kompilering är klar!
</p>

<p>
Notera att om din bootpartition inte använder något av filsystemen ext2 eller ext3 kan du behöva konfigurera din kärna manuellt med 
<c>genkernel --menuconfig all</c> och lägga till stöd för ditt filsystem <e>i</e> kärnan (d.v.s. <e>inte</e> som en modul).  Användare av EVMS2 eller LVM2 vill förmodligen dessutom lägga till <c>--evms2</c> eller <c>--lvm2</c> som argument.
</p>

<pre caption="Exekvera genkernel">
<comment>(För 2.6 kärnor)</comment>
# <i>genkernel --udev all</i>

<comment>(För 2.4 kärnor)</comment>
# <i>genkernel all</i>
</pre>

<p>
När väl <c>genkernel</c> är färdig, har en kärna, en komplett uppsättning moduler och <e>initial root disk</e> (initrd) skapats. Vi kommer att använda  kärnan och initrd när vi konfigurerar systemladdaren senare i dokumentet. Skriv ner namnen på kärnan och initrd då du kommer att behöva dessa när du skriver systemladdarens konfigurationsfil.  initrd startas direkt efter systemstart för att automatiskt hitta all hårdvara (precis som på Installation CD) innan ditt "riktiga" system startar.
</p>

<pre caption="Kontrollera namnen på kärnan och initrd">
# <i>ls /boot/kernel* /boot/initrd*</i>
</pre>

<p>
Nu återstår ett steg innan ditt system liknar installations CDn -- att installera <c>coldplug</c>. Medan initrd automatiskt hittar hårdvaran som behövs för att starta ditt system, hittar <c>coldplug</c> allting annat. För att installera och aktivera <c>coldplug</c> skriver du:
</p>

<pre caption="Installera och aktivera coldplug">
# <i>emerge coldplug</i>
# <i>rc-update add coldplug default</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>Installera enskilda moduler till kärnan</title>
<subsection>
<title>Installera extra moduler</title>
<body>

<p>
Om det behövs bör du installera ebuildpaket för all annan hårdvara i ditt system. Här är en lista på moduler till kärnan som du kan installera:
</p>

<table>
<tcolumn width="1in"/>
<tcolumn width="4in"/>
<tcolumn width="2in"/>
<tr>
  <th>Ebuild</th>
  <th>Funktion</th>
  <th>Kommando</th>
</tr>
<tr>
  <ti>nvidia-kernel</ti>
  <ti>Accelerad NVIDIA grafik för xorg-x11</ti>
  <ti><c>emerge nvidia-kernel</c></ti>
</tr>
<tr>
  <ti>nforce-audio</ti>
  <ti>Integrerad audio för NVIDIA NForce(2) moderkort</ti>
  <ti><c>emerge nforce-audio</c></ti>
</tr>
<tr>
  <ti>e100</ti>
  <ti>Intel e100 Fast Ethernet kort (endast för 2.4 kärnor)</ti>
  <ti><c>emerge e100</c></ti>
</tr>
<tr>
  <ti>e1000</ti>
  <ti>Intel e1000 Gigabit Ethernet kort (endast för 2.4 kärnor)</ti>
  <ti><c>emerge e1000</c></ti>
</tr>
<tr>
  <ti>emu10k1</ti>
  <ti>Stöd för Creative Sound Blaster Live!/Audigy (endast för  2.4 kärnor)</ti>
  <ti><c>emerge emu10k1</c></ti>
</tr>
<tr>
  <ti>ati-drivers</ti>
  <ti>Accelerad ATI Radeon 8500+/FireGL grafik för xorg-x11</ti>
  <ti><c>emerge ati-drivers</c></ti>
</tr>
</table>

<p>
Du bör dock vara medveten om att en del av dessa ebuildpaket har många relationer. För att ta reda på vilka relaterade paket som kommer att installeras tillsammans med ett specifikt paket kan du använda <c>emerge --pretend</c>. Exempelvis, för <c>emu10k1</c> paketet:
</p>

<pre caption="Visa alla paket som kommer att installeras">
# <i>emerge --pretend emu10k1</i>
</pre>

<p>
Om du inte gillar alla de paket den vill installera kan du använda <c>emerge --pretend --verbose</c> för att ta reda på vilka USE-flaggor som används för att bestämma relationerna:
</p>

<pre caption="Visa användningen av USE-flaggor">
# <i>emerge --pretend --verbose emu10k1</i>
<comment>...</comment>
[ebuild  N    ] media-sound/aumix-2.8  +gpm +nls +gtk +gnome +alsa -gtk2
</pre>

<p>
I föregående exempel ser du att en av de relaterade paketen till <c>emu10k1</c>s relationer
(<c>aumix</c>) använder <c>gtk</c> och <c>gnome</c> USE-flaggor, vilket innebär att även gtk (som är relaterat till xorg-x11) kompileras.
</p>

<p>
Om du inte vill installera allt detta kan du t ex ta bort alla USE-flaggor:
</p>

<pre caption="Installera emu10k1 med alla USE-flaggor avmarkerade">
# <i>USE="-gpm -nls -gtk -gnome -alsa" emerge --pretend emu10k1</i>
</pre>

<p>
När du är nöjd med resultatet tar du bort <c>--pretend</c> och påbörjar installationen av <c>emu10k1</c>.
</p>

</body>
</subsection>
<subsection>
<title>Konfigurera modulerna</title>
<body>

<p>
Du bör skriva ner de moduler du vill ladda automatiskt i <path>/etc/modules.autoload.d/kernel-2.4</path> (eller <path>kernel-2.6</path>). 
Du kan lägga till extra valmöjligheter till modulerna om du så vill.
</p>

<p>
För att se alla tillgänliga moduler anger du kommandot <c>find</c>. Glöm inte att ersätta  "&lt;kernel version&gt;" med den versionen av den kärna du just kompilerat:
</p>

<pre caption="Att visa alla tillgängliga moduler">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Om du till exempel vill ladda modulen <c>3c59x.o</c> automatiskt, redigerar du någon av filerna <path>kernel-2.4</path> eller <path>kernel-2.6</path> och skriver in modulnamnet.
</p>

<pre caption="Redigera /etc/modules.autoload.d/kernel-2.4">
<comment>(Exempel för 2.4 kärnor)</comment>
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4 ellerr kernel-2.6">
3c59x
</pre>

<p>
Fortsätt installationen med <uri link="?part=1&amp;chap=8">Konfigurera ditt system</uri>.
</p>

</body>
</subsection>
</section>
</sections>
