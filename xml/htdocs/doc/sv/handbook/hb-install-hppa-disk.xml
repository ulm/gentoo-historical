<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/sv/handbook/hb-install-hppa-disk.xml,v 1.1 2005/05/18 08:43:47 neysx Exp $ -->

<sections>

<version>1.10</version>
<date>2005-02-20</date>

<section>
<title>Introduktion till blockenheter</title>
<subsection>
<title>Blockenheter</title>
<body>

<p>
Vi kommer att ta en ordentlig titt på de diskorienterade aspekterna av Gentoo Linux
och Linux generellt, inklusive Linux filsystem, partitioner och blockenheter. När du
väl känner dig mer hemma på diskar och filsystem kommer du att guidas genom processen att 
sätta upp partitioner och filsystem för din Gentoo Linux installation.
</p>

<p>
Vi börjar med att presentera <e>blockenheter</e>. Den mest kända blockenheten är förmodligen
den som representerar den första SCSI disken i ett Linuxsystem, nämligen <path>/dev/sda</path>.
</p>

<p>
Blockenheterna ovan representerar ett abstrakt gränssnitt till disken. Användarprogram kan 
använda dessa blockenheter för att interagera med din disk utan att oroa sig för om din disk
är IDE, SCSI eller något annat. Programen direkt adressera lagringsplatsen på disken som en
samling sammanhängande slumpmässigt tillgängliga 512-bitar block. 
</p>

</body>
</subsection>
<subsection>
<title>Partitioner och skivor</title>
<body>

<p>
Även om det teoretiskt är möjligt att använda en hel disk för att härbärgera ditt Linuxsystem förekommer det nästan aldrig i praktiken. Istället partitionerar man en diskenhet i mindre, mer hanterliga enheter. På de flesta system kallas dessa <e>partitioner</e>.  Andra arkitekturer använder en liknande teknik som kallas <e>skivor</e>.
</p>

</body>
</subsection>
<subsection>
<title>Avancerad förvaring</title>
<body>

<p>
x86 Installation CD stöder EVMS och LVM2. EVMS och LVM2 ökar flexibiliteten hos din partitionering. Under installationsinstruktionerna ska vi fokusera på den "vanliga" partitionerna, men det är ändå bra att veta att också EVMS och LVM2 stöds.
</p>

</body>
</subsection>
</section>
<section>
<title>Skapa ett partitonsschema</title>
<subsection>

<title>Hur många och hur stora?</title>
<body>

<p>
Antalet partitioner är beror i hög grad på din miljö. Om du exempelvis har många användare kommer du sannolikt att vilja skilja ut din <path>/home</path> för att öka säkerheten och förenkla säkerhetskopiering. Om du använder Gentoo som epostserver bör du skilja ut din <path>/var</path> då all epost förvaras där. Ett bra val av filsystem kan därefter maximera prestandan. En spelserver bör ha en separat <path>/opt</path> eftersom de flesta spelservrar installeras där. Skälen desamma som för <path>/home</path>: säkerhet och säkerhetskopiering.
</p>

<p>
Som du ser beror det mycket på vad du vill uppnå. Skiljda partitioner eller volymer har följande fördelar:
</p>

<ul>
<li>
  Du kan välja det prestandamässigt bästa filformatet för varje partition eller volym.
</li>
<li>
 Hela systemet kan inte få slut på diskutrymme om ett trasigt verktyg kontinuerligt skriver filer i en partition eller en volym. 
</li>
<li>
 Om det nödvändigt tar filsystemskontroller mindre tid då flera kontroller kan göras samtidigt (även om denna fördel mer att göra med flera diskar än flera partitioner)
</li>
<li>
  Säkerheten kan ökas genom att vissa partitioner eller volymer monteras med enbart läsrättigheter, nosuid (setuid bitar ignoreras), noexec (exekverbara bitar ignoreras) osv.
</li>
</ul>

<p>
Det finns emellertid en stor nackdel med flera partitioner: om dessa inte konfigureras ordentligt kan du få ett filsystem med mycket ledigt utrymme i en partition men inget på ett annat. Det finns också en begränsning till högst 15 partitioner för SCSI och SATA.
</p>

</body>
</subsection>
</section>
<section>
<title>Använd fdisk på HPPA för att partitionera din disk</title>
<subsection>
<body>

<p>
Använd <c>fdisk</c> för att skapa de partitioner du vill ha:
</p>

<pre caption="Partitionera disken">
# <i>fdisk /dev/sda</i>
</pre>

<p>
HPPA maskiner använder PC standarden DOS partitionstabeller.  För att skapa en ny DOS partitionstabell använder du helt enkelt kommandot <c>o</c>.
</p>

<pre caption="Partitionera disken">
# <i>fdisk /dev/sda</i>

Command (m for help): <i>o</i>
Building a new DOS disklabel.
</pre>

<p>
PALO (HPPAs systemladdare) behöver en speciell partition för att fungera. Du måste skapa en partition om minst 16MB i början på disken. Denna partition måste vara av typen <e>f0</e> (Linux/PA-RISC boot).
</p>
<impo>
Om du struntar i detta och fortsätter utan den speciella PALO partitionen, kommer ditt system inte längre att älska dig och inte starta. Om din disk dessutom är större än 2GB se till att din startpartition ligger i de första 2GB av din disk. PALO kan inte läsa en kärna som ligger efter 2GB gränsen.
</impo>

<pre caption="Ett enkelt partitionsschema">
# <i>cat /etc/fstab</i>
/dev/sda2    /boot   ext3    noauto,noatime   1 1
/dev/sda3    none    swap    sw               0 0
/dev/sda4    /       ext3    noatime          0 0

# <i>fdisk /dev/sda</i>

Command (m for help): <i>p</i>

Disk /dev/sda: 4294 MB, 4294816768 bytes
133 heads, 62 sectors/track, 1017 cylinders
Units = cylinders of 8246 * 512 = 4221952 bytes

Device Boot      Start         End      Blocks      Id   System
/dev/sda1               1           8             32953     f0  Linux/PA-RISC boot
/dev/sda2               9          20            49476   83  Linux
/dev/sda3              21          70         206150   82  Linux swap
/dev/sda4              71        1017    3904481   83  Linux
</pre>

<p>
Nu när dina partitioner har skapats kan du fortsätta med <uri link="#filesystems">Skapa filsystem</uri>.
</p>

</body>
</subsection>
</section>
<section id="filesystems">
<title>Skapa filsystem</title>
<subsection>
<title>Inledning</title>
<body>

<p>
Nu när dina partitioner har skapats är det dags att lägga ett filsystem på dem. Om du inte bryr dig om vilket filsystem det är och är nöjd med det vi använder som standard i denna handbok kan du fortsätta med <uri link="#filesystems-apply">Lägga ett filsystem på en partition</uri>. Annars läser du vidare för att lära dig lite om de filsystem som erbjuds...
</p>

</body>
</subsection>
<subsection>
<title>Filsystem?</title>
<body>

<p>
Det finns flera filsystem att välja på. Ext2, ext3, XFS och reiserfs är stabila på HPPA arkitekturen. Övriga är mycket experimentella.
</p>


<p>
<b>ext2</b> är det välkända filsystemet på Linux men har inte metadatajournaler. Vilket betyder att rutinartade kontroller av ext2 filsystem vid systemstart kan ta ganska lång tid. Det finns nu ett större urval av nyare, journalbaserade filsystem som kan kontrollera filsystemet mycket snabbt och brukar därför föredras före filsystem utan journaler. Journalbaserade filsystem förhindrar långa förseningar när du startar ditt system och filsystemet råkar vara inkonsistent.
</p>

<p>
<b>ext3</b> är en journalbaserad version av filsystemet ext2, som ger journalföring av metadata för snabb återställning utöver förbättrad journalföringslägen som full och ordnad datajournaler. ext3 är ett mycket bra och pålitligt filsystem. Det har en extra hashad b-tree indexmöjlighet som möjliggör hög prestanda i nästan alla situationer. I korthet, ext3 är ett utmärkt filsystem.
</p>

<p>
<b>ReiserFS</b> är en B*-tree baserat filsystem som har mycket god allmän prestanda och utklassar både ext2 och ext3 när den hanterar små filer (mindre än 4k), ofta  med så mycket som 10-15 gånger. ReiserFS skalar också extremt bra och har journalförd metadata. I och med 2.4.18 kärnan och senare är ReiserFS ett solitt och användbart filsystem för såväl allmäna situationer som extrema fall som skapande av stora filsystem bestående av många små filer, mycket stora filer och kataloger innehållandes tiotusentals filer.
</p>

<p>
<b>XFS</b> är ett filsystem med journalförd metadata som kommer med en robust uppsättning funktioner och är optimerat för skalbarhet.  Vi rekommenderar detta filsystem endast för Linuxsystem med mer avancerade SCSI och/eller fibre channel lagringsystem med UPS. Eftersom XFS cachar in-transit data aggresivt i RAM, kan felaktigt designade program (sådana som inte tar tillräckliga försiktighetsåtgärder när de skriver till disk och det finns en hel del sådana)  förlora en hel del data om systemet går ner oväntat.
</p>

<p>
<b>JFS</b> är IBMs högpresterande journalbaserade filsystem. Den har nyligen gjorts redo för produktionsmiljöer och det finns därför inte mycket historik kring hur filsystemet uppför sig - varken positiv eller negativ information finns på dess generella pålitlighet.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>Lägga ett filsystem på en partition</title>
<body>

<p>
För att skapa ett filsystem på en partition eller volym finns det verktyg för det på varje möjligt filsystem:
</p>

<table>
<tr>
  <th>Filsystem</th>
  <th>Kommando för att skapa</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
Som exempel tar vi bootpartitionen (<path>/dev/sda2</path> i vårt exempel) i ext2 och rootpartitionen (<path>/dev/sda4s</path> i vårt exempel) i ext3 (som i vårt exempel), då du ska använda:
</p>

<pre caption="Lägga ett filsystem på en partition">
# <i>mke2fs /dev/sda2</i>
# <i>mke2fs -j /dev/sda4</i>
</pre>

<p>
Nu skapar du filsystem på de nyligen skapade partitionerna (eller logiska volymerna).
</p>

</body>
</subsection>
<subsection>
<title>Aktivera växlingspartitionen</title>
<body>

<p>
<c>mkswap</c> är kommandot som används för att initialisera växlingspartitioner:
</p>

<pre caption="Skapa en växlingspartition">
# <i>mkswap /dev/sda3</i>
</pre>

<p>
För att aktivera växlingspartitionen använder du <c>swapon</c>:
</p>

<pre caption="Aktivera växlingspartitionen">
# <i>swapon /dev/sda3</i>
</pre>

<p>
Skapa och aktivera växlingspartitionen  med de kommandon som anges här ovan.
</p>

</body>
</subsection>
</section>
<section>
<title>Montering</title>
<body>

<p>
Nu när dina partitioner har initialiserats och har ett filsystem är det dags att montera dessa. Använd kommandot <c>mount</c>. Glöm inte att skapa de nödvändiga monteringskatalogerna för varje partition du skapade. Som exempel väljer vi att montera root- och bootpartitionerna:
</p>

<pre caption="Montera partitioner">
# <i>mount /dev/sda4 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/sda2 /mnt/gentoo/boot</i>
</pre>

<note>
Om du vill att din <path>/tmp</path> ska ligga på en separat partition se till att ändra dess rättigheter efter monteringen: <c>chmod 1777 /mnt/gentoo/tmp</c>. Detta gäller också för <path>/var/tmp</path>.
</note>

<p>
Vi kommer också att behöva montera proc filsystemet (ett virtuellt gränssnitt till kärnan) på <path>/proc</path>. Men innan vi gör det måste vi lägga in filer i våra partitioner.
</p>

<p>
Fortsätt med <uri link="?part=1&amp;chap=5">Installera Gentoos installationsfiler</uri>.
</p>

</body>
</section>
</sections>
