<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.0 -->

<sections>

<version>1.1</version>
<date>2005-06-09</date>

<section>
<title>Avancerad konfiguration</title>
<body>

<p>
Variabeln config_eth0 är hjärtat i ett gränssnitts konfiguration. Det är en
högnivå instruktionslista för att konfigurera gränssnittet (eth0 i detta fall).
Varje kommando i instruktionslistan genomförs sekventiellt. Gränssnittet bedöms
vara OK om åtminstone ett av kommandona fungerar.
</p>

<p>
Här följer en lista på inbyggda instruktioner.
</p>

<table>
  <tr>
    <th>Kommando</th>
    <th>Beskrivning</th>
  </tr>
  <tr>
    <ti>null</ti>
    <ti>Gör ingenting</ti>
  </tr>
  <tr>
    <ti>noop</ti>
    <ti>
      Om gränssnittet är uppe och det finns en adress avbryt konfigurationen.
    </ti>
  </tr>
  <tr>
    <ti>en IPv4 eller IPv6 adress</ti>
    <ti>Lägg till adressen till gränssnittet</ti>
  </tr>
  <tr>
    <ti>
      dhcp, adsl eller apipa<br/>
      (eller ett anpassad kommando från ett tredje parts modul)
    </ti>
    <ti>
      Kör modulen som tillhandahåller kommandot. Exempelvis "dhcp" kommer att
      köra en modul som tillhandahåller dhcp som kan vara en av antingen dhcpcd,
      udhcpc, dhclient eller pump.
    </ti>
  </tr>
</table>

<p>
Om ett kommando misslyckas, kan du specificera ett reservkommando.
Reservkommandot måste exakt motsvara konfigurationsstrukturen.
</p>

<p>
Du kan koppla dessa kommandon i en kedja. Här är några praktiska exempel från
daglig drift.
</p>

<pre caption="Konfigurationsexempel">
<comment># Lägg till tre IPv4 adresser</comment>
config_eth0=(
	"192.168.0.2/24"
	"192.168.0.3/24"
	"192.168.0.4/24"
)

<comment># Lägg till en IPv4 adress och två IPv6 adresser</comment>
config_eth0=(
	"192.168.0.2/24"
	"4321:0:1:2:3:4:567:89ab"
	"4321:0:1:2:3:4:567:89ac"
)

<comment># Behåll adresserna tilldelade av kärnan, så länge gränssnittet
#inte går ner då en annan tilldelas via DHCP. Om DHCP misslyckas lägg till en
#adress definierad via APIPA.</comment>
config_eth0=(
	"noop"
	"dhcp"
)
fallback_eth0=(
	"null"
	"apipa"
)
</pre>

<note>
När du använder modulen ifconfig och lägger till mer än en adress skapas
gränssnittsalias för varje ytterligare adress. Så i de två ovanstående exemplen
kommer du att gränssnitten  eth0, eth0:1 and eth0:2. Du kan inte göra något
särskilt med dessa gränssnitt eftersom kärnan och andra program kommer att
behandla eth0:1 och eth0:2 som eth0.
</note>

<impo>
Reservkommandot är viktigt! Om vi inte specificerar alternativet "null" skulle
"apipa" kommandot bara köras om "noop" kommandot fallerar.
</impo>

<note>
<uri link="?part=4&amp;chap=3#apipa">APIPA</uri> och
<uri link="?part=4&amp;chap=3#dhcp">DHCP</uri> diskuteras senare.
</note>

</body>
</section>

<section>
<title>Nätverksberoenden</title>
<body>

<p>Initskript i <path>/etc/init.d</path> kan vara beroende av specifika
nätverksgränssnitt eller bara net. "net" kan definieras i 
<path>/etc/conf.d/rc</path> till att betyda olika sakter med variabeln
<c>RC_NET_STRICT_CHECKING</c>.
</p>

<table>
  <tr>
    <th>Värde</th>
    <th>Beskrivning</th>
  </tr>
  <tr>
    <ti>none</ti>
    <ti>Tjänsten net betraktas alltid som uppe</ti>
  </tr>
  <tr>
    <ti>no</ti>
    <ti>
      Detta betyder i stort sett att minst en av net.* tjänsterna utöver net.lo 
      måste vara uppe. Detta kan användas av användare av bärbara datorer som  
      har en wifi och statisk nic, och som bara vill ha en tjänst uppe vid alla
      tillfällen så att net tjänsten ska ses som uppe. 
    </ti>
  </tr>
  <tr>
    <ti>lo</ti>
    <ti>
      Detta är samma sak som 'no' alternativet, men också net.lo räknas. Detta
      bör vara användbart för folk som inte bryr sig om något specifikt
      gränssnitt är uppe vid systemstarten.
    </ti>
  </tr>
  <tr>
    <ti>yes</ti>
    <ti>
      For this ALL network interfaces MUST be up for the 'net' service to
      be considered up.
    </ti>
  </tr>
</table>

<p>
Men om net.br0 är beroende av både net.eth0 och net.eth1?
net.eth1 kan vara en trådlös- eller ppp-enhet som behöver konfigureras
innan den kan läggas till bryggan. Detta kan inte göras i
<path>/etc/init.d/net.br0</path> eftersom det är en symbolisk länk till net.lo.
</p>

<p>
Svaret är att göra din egen depend() funktion i <path>/etc/conf.d/net</path>.
</p>

<pre caption="net.br0 beroendet i /etc/conf.d/net">
<comment># Du kan använda valfritt beroende (use, after, before) enligt
aktuella skript</comment>
depend_br0() {
	need net.eth0 net.eth1
}
</pre>

<p>
För en mer detaljerad diskussion om beroenden hänvisar vi till 
<uri link="/doc/sv/handbook/handbook-x86.xml?part=2&amp;chap=4#doc_chap4">
avsnittet Skriva Initskript</uri> i Gentoohandboken.
</p>

</body>
</section>

<section id="variable_name">
<title>Variabler, namn och värden</title>
<body>

<p>
Variabelnamn är dynamiska. De följer normalt strukturen 
<c>variabel_${interface|mac|essid|apmac}</c>. Som exempel tar vi
variabeln <c>dhcpcd_eth0</c> som ger värdet för dhcpcd alternativ för eth0
och <c>dhcpcd_essid</c> som ger värdet för dhcpcd alternativ för när
gränssnittet ansluter till essid "essid".
</p>

<p>
Det finns emellertid ingen bergfast och snabb regel som bestämmer att
gränssnittsnamn måste vara ethx. Faktiskt är det så, att många trådlösa
gränssnitt har namn som wlanx, rax förutom ethx. Dessutom kan
användardefinierade gränssnitt som bryggor ges vilket namn som helst, som t ex 
foo. För att göra det hela än mer intressant kan trådlösa Access Points ha namn
med icke-alfanumeriska tecken - detta är viktigt eftersom du kan konfigurera 
nätverksparametrar per ESSID.
</p>

<p>
Nackdelen med allt detta är att Gentoo använder bashvariabler för nätverket
- och bash kan inte använda några andra tecken än de engelska alfanumeriska
tecknen. För att komma runt denna begränsning ändrar vi varje tecken som inte 
är ett engelskt alfanumeriskt tecken till ett _ tecken.
</p>

<p>
Ett annat problem med bash är att innehållet i variablerna kan behöva skyddas.
Detta görs genom att sätta ett \ tecken framför tecknet som behöver skyddas.
Nedan följer en lista på tecken som behöver skyddas  på detta sätt.
</p>

<p>
<c>" ' \</c>
</p>

<p>
I detta exempel använder vi trådlös ESSID då de kan innehålla den största
mängden tecken. Vi ska använda den ESSID som anges nedan.
</p>

<p>
<c>My "\ NET</c>
</p>

<pre caption="Exempel på variabelnamn">
<comment># Detta fungerar, men domänen är inte korrekt</comment>
dns_domain_My____NET="My \"\\ NET"

<comment># Det ovanstående sätter DNS domänen till My \" NET när ett trådlöst 
# kort ansluter till en AP vars ESSID är My \" NET</comment>
</pre>

</body>
</section>

</sections>
