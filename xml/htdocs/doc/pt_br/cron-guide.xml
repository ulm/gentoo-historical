<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pt_br/cron-guide.xml,v 1.6 2005/05/07 18:06:45 vanquirius Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pt_br/cron-guide.xml" lang="pt_br">
<title>Guia de cron do Gentoo Linux</title>

<author title="Autor">
  <mail link="airuike@gmail.com">Eric Brown</mail>
</author>
<author title="Editor">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Tradutor">
  <mail link="vanquirius@gentoo.org">Marcelo Góes</mail>
</author>

<abstract>
Este guia descreve como configurar e usar cron.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.0 -->
<license/>

<version>1.3</version>
<date>2005-03-18</date>

<chapter>
<title>Básico do cron</title>
<section>
<title>O que o cron faz</title>
<body>

<p>
O cron é um daemon que roda tarefas agendadas com base na entrada do comando
<c>crontab</c> (lista de tarefas). Esta tarefa é feita acordando todo minuto e
verificando se há cron-jobs (tarefas agendadas) para rodar em alguma das crontabs de usuário.
</p>

<note>
Note que <e>crontab</e> é tanto o nome da lista de tarefas agendadas como o
nome do comando para editar a lista.
</note>

</body>
</section>
<section>
<title>Os crons existentes</title>
<body>

<p>
Existem pelo menos três implementações de cron para você escolher no
Portage. Todos oferecem uma interface semelhante, o uso
do <c>crontab</c> ou um comando semelhante. Também há um utilitário relacionado chamado
Anacron que funciona com cron em sistemas que não rodam 
continuamente.
</p>

<p>
Antes de começarmos a trabalhar com cron, você terá que escolher que
implementação você deseja usar. Para sua conveniência, eu coletei
informações sobre cada um abaixo.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Que cron é certo para você?</title>
<section>
<title>Vixie cron</title>
<body>

<p>
Vixie cron é uma implementação de cron completa baseada no SysV cron. Cada usuário
tem sua própria crontab e é permitido especificar variáveis de ambiente dentro de
sua crontab. Ao contrário de outras variantes de cron, também oferece suporte para SELinux
e PAM. Ele suporta menos arquiteturas que Dcron, mas mais que Fcron.
</p>

<p>
Funcionalidades do <c>sys-process/vixie-cron</c>:
</p>

<ul>
<li>
  Suporte para SELinux
</li>
<li>
  Suporte para PAM <path>/etc/security/limits.conf</path>
</li>
<li>
  Ajuste de variáveis de ambiente em crontabs (PATH, SHELL, HOME, etc.)
</li>
<li>
  Cada usuário pode ter sua crontab, o acesso é controlado através de cron.allow e
  cron.deny
</li>
</ul>

</body>
</section>
<section>
<title>Dillon's Cron</title>
<body>

<p>
Dcron tenta ser uma implementação simples, elegante e segura de cron. Não
permite a especificação de variáveis de ambiente em crontabs e todos
cron-jobs são rodados a partir de <path>/bin/sh</path>. Como Vixie cron, cada usuário tem sua
própria crontab.
</p>

<p>
Funcionalidades do <c>sys-process/dcron</c>:
</p>

<ul>
<li>
  Rápido, simples e livre de funções desnecessárias
</li>
<li>
  Acesso ao <c>crontab</c> é limitado ao grupo cron, isto é, não depende de
  utilitários externos.
</li>
</ul>

</body>
</section>
<section>
<title>Fcron</title>
<body>

<p>
O Fcron tenta ser um substituto de Vixie cron e Anacron. É desenhado para trabalhar em
sistemas que não rodam continuamente e vem com funções adicionais.
Tem restrições de início de tarefas, controles de serialização de de tarefas, a capacidade
de designar valores de "nice" às tarefas e a capacidade de agendar tarefas para serem rodadas na inicialização
de ossitema. Veja a  <uri link="http://fcron.free.fr/">home page do fcron</uri> para mais
informações.
</p>

<p>
Funcionalidades do <c>sys-process/fcron</c>:
</p>

<ul>
<li>
  Desenhado para trabalhar em sistemas que não estão trabalhando continuamente, isto é, pode rodar
  uma tarefa depois de reiniciar se foi perdida
</li>
<li>
  Configuração de variáveis de ambiente e muitas outras opções em crontabs
</li>
<li>
  Cada usuário tem sua própria crontab, acesso é controlado por cron.allow e
  cron.deny
</li>
<li>
  Sintaxe de crontab melhorada com suporte a muitas novas funções
</li>
</ul>


</body>
</section>

<section>
<title>Anacron</title>
<body>
<p>
Anacron não é um daemon de cron, é algo que normalmente funciona 
junto com um. Ele executa comandos em intervalos especificados em dias e
não presume que o sistema está rodando continuamente; ele irá rodar tarefas
que foram perdidas enquanto o sistema estava desligado. Anacron normalmente depende de um
daemon de cron que rode-o todo dia.
</p>
</body>

</section>
</chapter>

<chapter>
<title>Usando cron</title>
<section>
<title>Instalação</title>
<body>

<p>
Selecione a implementação de cron de que você mais gosta, e faça emerge dela.
</p>

<pre caption="Instalando cron">
# <i>emerge dcron</i>
# <i>rc-update add dcron default</i>
# <i>/etc/init.d/dcron start</i>
</pre>

<p>
Opcionalmente, se você não instalou o Fcron, você também pode instalar o
Anacron.
</p>

<pre caption="Instalando anacron">
# <i>emerge anacron</i>
# <i>rc-update add anacron default</i>
# <i>/etc/init.d/anacron start</i>
</pre>

</body>
</section>
<section>
<title>Crontab de sistema</title>
<body>

<p>
As mensagens de pós-instalação de alguns dos pacotes de cron irão pedir que você rode
<c>crontab /etc/crontab</c>. O arquivo <path>/etc/crontab</path> é sua
<e>crontab de sistema</e>.  Uma instalação padrão do Gentoo usa a crontab de sistema para rodar
os scripts em <path>/etc/cron.{daily,hourly,weekly,monthly}</path>.  Note que
Vixie-cron agenda tarefas em <path>/etc/crontab</path> automaticamente. Usuários de
Dcron e Fcron precisam rodar <c>crontab /etc/crontab</c> cada vez que fizerem
mudanças ao <path>/etc/crontab</path>.
</p>

<p>
Por favor note que trabalhos agendados na crontab de sistema não irão aparecer na
lista de cron-jobs mostrados com <c>crontab -l</c>.
</p>

<p>
Claro, você pode escolher não usar nenhum crontab de sistema. Se você escolher
Dcron ou Fcron, <e>não</e> rode <c>crontab /etc/crontab</c>.  Se você escolher
vixie-cron, você deve comentar todas linhas em <path>/etc/crontab</path>.
</p>

<pre caption="Comentando todas linhas em /etc/crontab">
# <i>sed -i -e "s/^/#/" /etc/crontab</i>
</pre>

</body>
</section>
<section>
<title>Dando acesso de cron a usuários confiáveis</title>
<body>

<p>
Se você quiser que usuários fora o administrador (root) tenham acesso ao daemon de cron, você
deve ler esta seção, caso contrário, você pode pular para a próxima, <uri
link="#scheduling">agendando cron-jobs</uri>.
</p>

<note>
Dar acesso de crontab a outro usuário não permite que ele rode cron-jobos como root.
Se você quiser que o usuário possa editar a crontab de root, você informar-se sobre
<c>sudo</c>.
</note>

<p>
Não importa que pacote de cron você use, se você quiser permitir que um usuário use a
crontab, ele deverá primeiro fazer parte do grupo cron. Como um exemplo, se você
quisesse adicionar o usuário <e>wepy</e> ao grupo cron você rodaria:
</p>

<pre caption="Adicionando um usuário ao grupo cron">
gpasswd -a wepy cron
</pre>

<p>
Se você estiver usando <b>Dcron</b>, isto é tudo que você precisa fazer é dar acesso de usuário 
à crontab. Usuários de Dcron podem ir para a próxima seção
<uri link="#scheduling">agendando cron-jobs</uri>, todos outros devem
continuar lendo.
</p>

<p>
Se você estiver usando <b>Fcron</b>, você deve editar
<path>/etc/fcron/fcron.deny</path> e <path>/etc/fcron/fcron.allow</path>. O
jeito mais seguro é negar todos em  <path>/etc/fcron/fcron.deny</path>,
e depois dar acesso explicito aos usuários em <path>/etc/fcron/fcron.allow</path>.
</p>

<impo>
<b>Se nem <path>/etc/fcron/fcron.allow</path> ou
<path>/etc/fcron/fcron.deny</path> existirem, todos usuários no grupo cron terão
acesso ao crontab</b>.<br/>
O fcron vem por padrão com um <path>fcron.allow</path> que <b>permite que
todos usuários</b> no grupo cron tenham acesso ao fcrontab.
</impo>

<pre caption="Permissões em fcron.deny">
all
</pre>

<p>
Agora, digamos que temos um usuário chamado <e>wepy</e> que deve poder agendar seus próprios
cron-jobs. Nós devemos adicioná-lo a <path>/etc/fcron/fcron.allow</path> como a seguir:
</p>

<pre caption="Permissões em fcron.allow">
wepy
</pre>

<p>
Se você escolher o <b>Vixie cron</b>, você provavelmente só deve editar
<path>/etc/cron.allow</path>. 
</p>

<impo>
É importante que se somente o <path>/etc/cron.allow</path> existir, então
somente os usuários do grupo cron terão acesso, mas se um arquivo vazio
<path>/etc/cron.deny</path> existir, então todos usuários do grupo cron serão permitidos!
<b>Não deixe um <path>/etc/cron.deny</path> se você não tiver um
<path>/etc/cron.allow</path>.</b>
</impo>

<p>
Por exemplo, se você quisesse permitir acesso do usuário <e>wepy</e>, você adicionaria ele
ao <path>/etc/cron.allow</path> como a seguir:
</p>

<pre caption="Permissões em /etc/cron.allow">
wepy
</pre>

</body>
</section>

<section id="Scheduling">
<title>Agendando cron-jobs</title>
<body>

<p>
O processo de edição de crontabs é diferentes para cada pacote, mas eles todos
suportam o mesmo conjunto básico do comandos: adicionar e substituir crontabs, editar
crontabs, apagar crontabs, e listar cron-jobs nas crontabs. A lista
a seguir mostra como rodar os comandos para cada pacote.
</p>

<table>
<tr>
  <th>Versão</th>
  <th>Comando de edição&nbsp;</th>
  <th>Comando de remoção&nbsp;</th>
  <th>Novo comando&nbsp;</th>
  <th>Comando de listagem&nbsp;</th>
</tr>
<tr>
  <ti>dcron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -d</c></ti>
  <ti><c>crontab <e>arquivo</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
<tr>
  <ti>fcron</ti>
  <ti><c>fcrontab -e</c></ti>
  <ti><c>fcrontab -r</c></ti>
  <ti><c>fcrontab <e>arquivo</e></c></ti>
  <ti><c>fcrontab -l</c></ti>
</tr>
<tr>
  <ti>vixie-cron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -r</c></ti>
  <ti><c>crontab <e>arquivo</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
</table>

<note>
Fcron também faz um link simbólico para <c>crontab</c>.
</note>

<p>
Antes podemos usar quaisquer desses comandos, todavia, você primeiro precisa entender
a própria crontab. Cada linha em uma crontab precisa especificar cinco campos de tempo
na seguinte ordem: minutos (0-59), horas (0-23), dias do mês 
(1-31), meses (1-12), e dias da semana (0-7, segunda-feira é 1, domingo é 0 e
7). Os dias de semanas e meses podem ser especificados por abreviaturas de
três letras em inglês como mon, tue, jan, feb, etc... Cada campo também pode especificar um
limite de valores (como 1-5 ou mon-fri), uma lista separada por vírgulas de valores (como
1,2,3 ou mon,tue,wed) ou um limite de valores com um <e>step</e> (por exemplo 1-6/2 como
1,3,5).
</p>

<p>
Isto parece um pouco confuso, mas com alguns exemplos você verá que não é
tão complicado como soa.
</p>

<pre caption="Exemplos">
<comment># Rodar /bin/false todo minuto o ano inteiro</comment>
*     *     *     *     *        /bin/false  

<comment># Rodar /bin/false às 1:35 na segunda, terça, quarta e no quarto dia de cada mês</comment>
35    1     4     *     mon-wed  /bin/false

<comment># Rodar /bin/true às 22:25 de 2 de março</comment>
25    22    2     3     *        /bin/true

<comment># Rodar /bin/false às 2:00 cada segunda-feira, terça-feira e sexta-feira</comment>
0     2     *     *     1-5/2    /bin/false
</pre>

<note>
Perceba como você tem que especificar os dias da semana e dias do mês
antes de serem combinados. Se você tiver uma * para só um deles, o outro toma
precedência, enquanto * para ambos significa todo dia.
</note>

<p>
Para testar o que acabamos de aprender, vamos fazer fazer os passos de realmente
agemdar alguns cron-jobs. Primeiro, crie um arquivo chamado <path>crons.cron</path>
e faça-o parecer-se com o seguinte:
</p>

<pre caption="Editando crons.cron">
$ <i>nano crons.cron</i>
<comment>#Mins  Horas  Dias   Meses  Dia da semana</comment>
10     3      1      1       *       /bin/echo "nao gosto de cron na verdade"
30     16     *      1,2     *       /bin/echo "gosto um pouco de cron"
*      *      *      1-12/2  *       /bin/echo "gosto muito de cron"
</pre>

<p>
Agora nós podemos adicionar a crontab ao sistema com o "novo comando" da tabela
acima.
</p>

<pre caption="Uma nova crontab">
# <i>crontab crons.cron</i>
</pre>

<note>
Você não verá realmente ver a saída dos comandos de echo a menos que você use
redirecionamento.
</note>

<p>
Para verificar os cron-jobs que você agendou, nós iremos o usar o devido <e>comando de listagem</e> 
da tabela acima.
</p>

<pre caption="Listando cron-jobs">
# <i>crontab -l</i>
</pre>

<p>
Você deve ver uma lista parecida com o <path>crons.cron</path>, caso contrário, talvez você
usou o comando errado para dar entrada da sua nova crontab.
</p>

<p>
Esta crontab deve fazer echo de "gosto muito de cron" cada minuto de cada hora de 
cada dia um mês sim outro não. Obviamente você só precisa fazer isso se você realmente
gosta de cron. A crontab também irá fazer echo de "gosto um pouco de cron" às 16:30 todo
dia em janeiro e fevereiro. Também irá fazer echo de "nao gosto de cron na verdade" às
3:10 de primeiro de janeiro.
</p>

<p>
Se você estiver usando Anacron, você deve continuar lendo esta seção. Caso contrário,
pule para a próxima seção sobre <uri link="#editing">edição de crontabs</uri>.
</p>

<p>
Usuários de Anacron devem editar o <path>/etc/anacrontab</path>. Este arquivo tem
quatro campos: o número de dias entre cada vez que é rodado, o atraso em minutos após o
qual ele roda, o nome da tarefa, e o comando para rodar.
</p>

<p>
Por exemplo, para fazer que ele rode <c>echo "eu gosto de anacron"</c> cada 5 dias, 10
minutos depois o Anacron iniciar, você teria:
</p>

<pre caption="/etc/anacrontab">
5 10 wasting-time /bin/echo "eu gosto de anacron"
</pre>

<p>
Anacron termina depois de todas tarefas no anacrontab terminarem, então se nós quisermos que
ele verifique as tarefas todo dia, precisaremos usar cron. As instruções no
final da próxima seção ensinam como fazê-lo.
</p>

</body>
</section>
<section id="editing">
<title>Editando crontabs</title>
<body>

<p>
Vamos ser realistas, todavia, você não quer que seu sistema diga o quanto você
gosta de cron cada minuto. Como um passo avante, vamos remover aquela crontab usando o
<e>comando de remoção</e> correspondente da tabela acima. Nós também iremos listar
os cron-jobs depois, para ter certeza de que funcionaram.
</p>

<pre caption="Removendo uma crontab">
# <i>crontab -d</i>
# <i>crontab -l</i>
</pre>

<p>
Você não deve ver cron-jobs na saída de <c>crontab -l</c>.  Se você vir
tarefas listadas, isto significa que tivemos problemas na remoção da crontab, e que você deve
verificar se usou o <e>comando de remoção</e> correto para seu pacote de cron.
</p>

<p>
Agora que estamos em um estado limpo, vamos colocar algo útil na crontab de
<b>root</b>. A maior parte das pessoas deve rodar <c>updatedb</c> com base semanal 
para ter certeza de que o <c>slocate</c> funciona adequadamente. Para adicioná-lo ao seu crontab,
vamos primeiro editar o <path>crons.cron</path> novamente para que se pareça com
o seguinte:
</p>

<pre caption="Uma crontab real">
22 2 * * 1    /usr/bin/updatedb
</pre>

<p>
Isto faria o cron rodar updatedb às 2:22 A.M. nas manhãs de segunda-feira de cada semana.
Você deve agora dar entrada na crontab com o devido <e>novo comando</e> da
tabela acima, e verificar a lista novamente.
</p>

<pre caption="Listando cron-jobs">
# <i>crontab crons.cron</i>
# <i>crontab -l</i>
</pre>

<p>
Vamos agora dizer que você também quer adicionar <c>emerge --sync</c> à sua agenda
diária. Você pode fazer isso primeiro editando <path>crons.cron</path> e depois
usando <c>crontab crons.cron</c> como nós fizemos anteriomente, ou você pode usar
o <e>comando de edição</e> adequado da tabela acima. Isto dará a você um jeito de editar
a sua própria crontab de usuário, sem depender de arquivos externos como
<path>crons.cron</path>. 
</p>

<pre caption="Editando uma crontab no lugar">
# <i>crontab -e</i>
</pre>

<p>
Isto deve abrir sua crontab de usuário com um editor. Nós queremos fazer <c>emerge
--sync</c> rodar todo dia 6:30 da manhã, então vamos deixá-la parecida com
this:
</p>

<pre caption="Uma crontab real">
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
<comment>(se você estiver usando anacron, adicione esta linha)</comment>
30 7 * * * 	  /usr/sbin/anacron -s
</pre>

<p>
Novamente, verifique a lista de cron-jobos como fizemos nos exemplos anteriores para verificar
se as tarefas foram agendadas.  Se estiverem todas lá, então tudo pronto.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Notas finais</title>
<section>
<title>Resoluções de problemas</title>
<body>

<p>
Se você estiver com problemas para fazer com o que o cron funcione devidamente, você pode fazer
esta rápida lista de verificações.
</p>

<ul>
<li>
  <b>O cron está rodando?</b><br/>
  Rode <c>ps ax | grep cron</c>, veja se ele aparece!
</li>
<li>
  <b>O cron está rodando?</b><br/>
  Tente: * * * * * /bin/echo "foobar" &gt;&gt; /arquivo_seu, e veja se ele funciona
</li>
<li>
  <b>Seu comando está funcionando?</b><br/>
  Tente: * * * * * /bin/foobar &gt; /arquivo_seu 2&gt;&amp;1, busque erros
	em /arquivo_seu
</li>
<li>
  <b>O cron pode rodar sua tarefa?</b><br/>
  Veja o registro do cron, normalmente <path>/var/log/cron.log</path> ou
	<path>/var/log/messages</path>, procurando erros
</li>
<li>
  <b>Existem dead.letter's?</b><br/>
    O cron normalmente manda correio quando há um problema, veja seu correio e também
    verifique se há ~/dead.letter
</li>
</ul>

<p>
Lembre-se, cada pacote de cron é diferente e o alcance de funcionalidades varia
profundamente. Certifique-se de ler as páginas de man para crontab, fcrontab ou anacrontab, 
dependendo do que você usar.
</p>

<p>
Boa sorte!
</p>

</body>
</section>
</chapter>

</guide>
