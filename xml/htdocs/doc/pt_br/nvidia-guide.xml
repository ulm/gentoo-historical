<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pt_br/nvidia-guide.xml,v 1.1 2005/01/24 23:51:28 enderson Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pt_br/nvidia-guide.xml">
<title>Guia de nVidia do Gentoo Linux</title>

<author title="Autor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Tradutor">
  <mail link="marcelogoes@gmail.com">Marcelo Góes</mail>
</author>

<abstract>
Muitos usuários de Gentoo tem um chipset da nVidia em seu sistema. A nVidia providencia drivers
específicos para Linux para melhorar a performance de sua placa. Este guia informa a você como
instalar e configurar esses drivers.
</abstract>

<license/>

<version>1.7</version>
<date>2004-12-02</date>

<chapter>
<title>Configurando sua placa</title>
<section>
<title>Instalando os drivers apropriados</title>
<body>

<p>
Os drivers da nVidia incluem módulos de kernel que devem integrar-se no seu kernel
atual. Para conseguir isso, seu kernel deve suportar o carregamento de módulos
de kernel. Se você usou o <c>genkernel</c> para configurar seu kernel para você então
não há problemas. Se não, verifique sua configuração do kernel para ter certeza que
o suporte está ativo:
</p>

<pre caption="Ativando suporte de módulos de kernel carregáveis">
Loadable module support ---&gt;
  [*] Enable loadable module support
</pre>

<p>
Você também precisa ativar  <e>Memory Type Range Register</e> em seu kernel:
</p>

<pre caption="Ativando MTRR">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

<p>
Os módulos e bibliotecas da nVidia são combinados em dois pacotes: <c>nvidia-glx</c> 
e <c>nvidia-kernel</c>. O primeiro são as bibliotecas de X11 GLX enquanto o segundo
são os módulos do kernel. Já que <c>nvidia-glx</c> depende do <c>nvidia-kernel</c>,
instalar o <c>nvidia-glx</c> é o suficiente:
</p>

<pre caption="Instalando os módulos da nVidia">
# <i>emerge nvidia-glx</i>
</pre>

<p>
Uma vez que a instalação terminar, rode <c>modprobe nvidia</c> para carregar o
módulo do kernel na memória.
</p>

<pre caption="Carregando o módulo do kernel">
# <i>modprobe nvidia</i>
</pre>

<p>
Você provavelmente quer que isso seja feito cada vez que você carregar seu sistema, então edite
<path>/etc/modules.autoload.d/kernel-2.6</path> (ou <path>kernel-2.4</path>) e
adicione <c>nvidia</c> nele. Não se esqueça de rodar <c>modules-update</c> depois!
</p>

<pre caption="Rodando modules-update">
# <i>modules-update</i>
</pre>

</body>
</section>
<section>
<title>Configurando o servidor de X</title>
<body>

<p>
Uma vez que os drivers apropriados forem instalados você precisa configurar seu servidor de X
(XFree86 ou Xorg) para usar o driver <c>nvidia</c> ao invés do driver padrão
<c>nv</c>.
</p>

<p>
Abra o <path>/etc/X11/XF86Config</path> (ou o <path>/etc/X11/xorg.conf</path>) com
seu editor favorito (como o <c>nano</c> ou o <c>vim</c>) e vá para seção
<c>Device</c>. Nesta seção, mude a linha <c>Driver</c>:
</p>

<pre caption="Mudando de nv para nvidia na configuração do servidor de X">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>
  VideoRam   65536
EndSection
</pre>

<p>
Então vá para seção <c>Module</c> e certifique-se que o módulo <c>glx</c> seja
carregado enquanto o <c>dri</c> não seja:
</p>

<pre caption="Atualizando a seção Module">
Section "Module"
  <comment>(...)</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>(...)</comment>
EndSection
</pre>

<p>
Rode <c>opengl-update</c> para que o servidor de X use as bibliotecas do nVidia GLX:
</p>

<pre caption="Rodando opengl-update">
# <i>opengl-update nvidia</i>
</pre>

</body>
</section>
<section>
<title>Adicionando seus usuários ao grupo video</title>
<body>

<p>
Você tem que adicionar seu usuário ao grupo <c>video</c> para ele poder acessar
os arquivos de dispositivo da nvidia:
</p>

<pre caption="Adicionando seu usuário ao grupo video">
# <i>gpasswd -a youruser video</i>
</pre>

<p>
Isto pode não ser totalmente necessário se você não estiver usando <c>udev</c>, mas
não faz mal também e deixa seu sistema pronto para o futuro :)
</p>

</body>
</section>
<section>
<title>Testando sua placa</title>
<body>

<p>
Para testar sua placa da nVidia, inicie o X e rode o comando 
<c>glxinfo | grep direct</c>. Ele deve dizer que o direct rendering está ativado:
</p>

<pre caption="Verificando o estado do direct rendering">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
Para monitorar suas FPS, rode <c>glxgears</c>. 
</p>

</body>
</section>
</chapter>

<chapter>
<title>Resolução de problemas</title>
<section>
<title>Fazendo 2D funcionar com máquinas com 4Gb de memória ou mais</title>
<body>

<p>
Se você estiver tendo problemas com a aceleração 2D da nVidia é provável que você
não consegue configurar um alcance de write-combining com o MTRR. Para verificar, veja o
conteúdo de <path>/proc/mtrr</path>:
</p>

<pre caption="Verificando se você tem write-combining ativado">
# <i>cat /proc/mtrr</i>
</pre>

<p>
Cada linha deve conter "write-back" ou "write-combining". Se você vir uma linha
com "uncachable" nela, você precisa mudar um ajuste da BIOS para consertar o problema.
</p>

<p>
Reinicie e entre na BIOS, então encontre os ajustes de MTRR (provavelmente em "CPU
Settings"). Mude o ajuste de "continuous" para "discrete" e inicie o Linux
novamente. Você verá que não há mais entradas "uncachable"
e a aceleração 2D agora funciona sem problemas.
</p>

</body>
</section>
<section>
<title>Eu recebo avisos sobre tamanhos de stack de 4k sem suporte</title>
<body>

<p>
Os pacotes da <c>nvidia-kernel</c> mais antigos que o 1.0.6106 só suportam kernéis usando um
stack de 4K. Kernéis mais recentes (2.6.6 e mais novos) têm suporte para stacks de 4K
também. Não selecione stacks de 4K na sua configuração do kernel se você
estiver usando um desses pacotes do <c>nvidia-kernel</c>. Você pode encontrar essa opção na
seção <c>Kernel Hacking</c>.
</p>

</body>
</section>
</chapter>

</guide>
