<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pt_br/utf-8.xml,v 1.16 2012/04/18 18:30:34 swift Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide lang="pt_br">
<title>Usando UTF-8 com o Gentoo</title>

<author title="Autor">
  <mail link="slarti@gentoo.org">Thomas Martin</mail>
</author>
<author title="Colaborador">
  <mail link="devil@gentoo.org.ua">Alexander Simonov</mail>
</author>
<author title="Editor">
  <mail link="fox2mike@gentoo.org">Shyam Mani</mail>
</author>
<author title="Tradutor">
  <mail link="vanquirius@gentoo.org">Marcelo Góes</mail>
</author>

<abstract>
Este guia mostra como configurar e usar o conjunto de caracteres UTF-8 Unicode
com seu sistema Gentoo Linux, depois de explicar os benefícios do Unicode e mais
especificamente do UTF-8.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license />

<version>2.17</version>
<date>2006-02-11</date>

<chapter>
<title>Codificação de caracteres</title>
<section>
<title>O que é uma codificação de caracteres?</title>
<body>

<p>
Os computador não entendem texto por si só. Ao invés disso, cada caractere é
representado por um número. Tradicionalmente, cada conjunto de números usados
para representar alfabetos e caracteres (conhecido como sistema de codificação,
conjunto de codificação ou caracteres) era limitado em tamanho devido a
limitações de hardware de computador.
</p>

</body>
</section>
<section>
<title>A história da codificação de caracteres</title>
<body>

<p>
O conjunto mais comum de caracteres (ou pelo menos o mais aceito) é o
<b>ASCII</b> (American Standard Code for Information Interchange). Sabe-se que o
ASCII é o padrão de software com mais sucesso de todos os tempos. O ASCII
moderno foi padronizado em 1986 (ANSI X3.4, RFC 20, ISO/IEC 646:1991, ECMA-6)
pelo American National Standards Institute.
</p>

<p>
O ASCII tem estritamente sete bits, significando que usa padrões de dígitos
representáveis por sete digitos binários, o que fornece um alcance de 0 a 127 em
decimais. Isto inclui 32 caracteres de controle não visíveis, a maior parte
entre 0 e 31, com o caractere de controle final, DEL ou delete em 127. Os
caracteres de 32 a 126 são caracteres visíveis: um espaço, marcas de pontuação,
letras latinas e números.
</p>

<p>
O oitavo bit em ASCII era originalmente usado como um bit de paridade para a
verificação de erros. Se isto não é desejado, é deixado como 0. Isto significa
que, com ASCII, cada caractere é representado por um único byte.
</p>

<p>
Embora o ASCII fosse suficiente para comunicação em inglês moderno, em outras
línguas européias que incluem caracteres acentuados as coisas não foram tão
fáceis. Os padrões ISO 8859 foram desenvolvidos para satisfazer essas
necessidades. Eles eram compatíveis com ASCII, mas ao invés de deixar o oitavo
bit em branco, era usado para permitir mais 127 caracteres em cada codificação.
As limitações do ISO 8859 logo vieram à luz, e existem atualmente 15 variantes
do padrão ISO 8859 (de 8859-1 até 8859-15). Fora do alcance de bytes do conjunto
de caracteres compatível com ASCII, existe freqüentemente um conflito entre as
letras representadas por cada byte. Para complicar a interoperabilidade de
codificações de caracteres ainda mais, Windows-1252 é usado em algumas versões
do Microsoft Windows para línguas do oeste europeu. Este é um super-conjunto de
ISO 8859-1, todavia diferente de várias maneiras. Todos conjuntos, porém, têm 
compatibilidade com ASCII.
</p>

<p>
O desenvolvimento necessário de codificações completamente diferentes para
alfabetos não-latinos, como a EUC (Extended Unix Coding), que é usado para
japonês e coreano (e em menor escala para chinês) criou mais confusão, enquanto
outros sistemas operacionais ainda usavam diferentes conjuntos de caracteres
para as mesmas línguas, por exemplo, Shift-JIS e ISO-2022-JP. Usuários que
desejassem ver glifos em cirílico tinham que escolher entre KOI8-R para russo e
búlgaro ou KOI8-U para ucraniano, bem como todas as codificações de cirílico
como o mal-sucedido ISO 8859-5, e o mais conjunto mais comum Windows-1251. Todos
destes conjuntos de caracteres quebraram grande parte da compatibilidade com
ASCII (embora a codificação de KOI8 colocasse os caracteres cirílicos em ordem
latina, então caso o oitavo bit fosse tirado, o texto ainda é decifrável em um
terminal ASCII através de transliteração reversa.)
</p>

<p>
Isto levou a muita confusão, e também a uma quase total falta de capacidade para
comunicação multi-língüe, especialmente em diferentes alfabetos. Aqui entra o
Unicode.
</p>

</body>
</section>
<section>
<title>O que é Unicode?</title>
<body>

<p>
O Unicode livra-se da limitação de um único bit tradicional dos conjuntos de
caracteres. Ele usa 17 "planos" de 65,536 pontos de código para descrever um
máximo de 1,114,112 caracteres. Já que o primeiro plano, conhecido como
"Basic Multilingual Plane" ou BMP, contém quase tudo que você precisará usar,
muitos fizeram a presunção errada de que o Unicode era um conjunto de caracteres
de 16 bits.
</p>

<p>
O Unicode foi mapeado de diversas maneiras, mas os dois mais comuns são o
<b>UTF</b> (Unicode Transformation Format) e <b>UCS</b> (Universal Character
Set). O número após UTF indica o número de bits em uma unidade, enquanto o
número após UCS indica o número de bytes. UTF-8 tornou-se o meio mais comum de
intercâmbio de texto em Unicode como resultado de sua natureza limpa de oito
bits, e é o assunto deste documento.
</p>

</body>
</section>
<section>
<title>UTF-8</title>
<body>

<p>
O UTF-8 é uma codificação de caracteres de tamanhos variáveis, o que neste
exemplo significa que usa de 1 a 4 bytes por símbolo. Então, o primeiro byte de
UTF-8 é usado para codificar ASCII, dando ao conjunto de caracteres
compatibilidade com ASCII. UTF-8 significa que ASCII e caracteres latinos são
intercambiáveis com pouco aumento no tamanho dos dados, porque somente o
primeiro bit é usado. Usuários de alfabetos orientais como japonês, a quem foram
designados um alcance de bytes maior são menos felizes, já que isso resulta em
até 50% de redundância em seus dados.
</p>

</body>
</section>
<section>
<title>O que UTF-8 pode fazer por você</title>
<body>

<p>
UTF-8 permite que você trabalhe em um ambiente multi-língüe e internacionalmente
aceito que atende a padrões, com uma redundância de dados comparativamente
baixa. UTF-8 é o modo preferível de transmitir-se caracteres não-ASCII através
da Internet, através de E-Mail, IRC ou qualquer outro meio. Apesar disso, muitas
pessoas consideram UTF-8 em comunicação online um excesso. É sempre melhor saber
sobre a atitude em relação a UTF-8 em um canal específico, lista de e-mails ou
grupo de Usenet antes de usar UTF-8 em formato <e>não-ASCII</e>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Configurando UTF-8 com o Gentoo Linux</title>
<section>
<title>Encontrando ou criando locales de UTF-8</title>
<body>

<p>
Agora que você entende os princípios por trás do Unicode, você está pronto para
começar a usar UTF-8 em seu sistema.
</p>

<p>
O requisito preliminar para UTF-8 é ter uma versão do glibc instalada que tenha
suporte de línguas nacionais. O meio recomendado de fazer-se isso é o arquivo
<path>/etc/locales.build</path> com combinação com a opção de USE
<c>userlocales</c>. Está além do foco deste guia explicar o uso deste arquivo,
embora, para nossa sorte, o uso do arquivo é bem documentado com comentários
nele. Também é explicado no <uri
link="/doc/pt_br/guide-localization.xml#doc_chap3_sect3">Guia de localização do
Gentoo Linux</uri>.
</p>

<p>
A seguir, precisamos decidir se uma locale de UTF-8 já está disponível para
nossa língua, ou se precisamos criar uma.
</p>

<pre caption="Buscando um locale de UTF-8 existente">
<comment>(Troque "en_GB" por seu ajuste de locale desejado)</comment>
# <i>locale -a | grep 'en_GB'</i>
en_GB
en_GB.UTF-8
</pre>

<p>
Da saída da linha de comando, temos que obter o resultado com um sufixo
semelhante a <c>.utf8</c>. Se não há resultado com um sufixo semelhante a
<c>.utf8</c>, precisamos criar um locale compatível com UTF-8.
</p>

<note>
Só execute a seguinte listagem de código se você não tiver um locale de UTF-8
disponível para sua língua.
</note>

<pre caption="Criando um locale de UTF-8">
<comment>(Troque "en_GB" com seu ajuste de locale desejado)</comment>
# <i>localedef -i en_GB -f UTF-8 en_GB.utf8</i>
</pre>

<p>
Outra maneira de incluir um locale de UTF-8 é adicioná-lo ao arquivo
<path>/etc/locales.build</path> e reconstruir o <c>glibc</c> com a opção de USE
<c>userlocales</c> configurada.
</p>

<pre caption="Linha em /etc/locales.build">
en_GB.UTF-8/UTF-8
</pre>

</body>
</section>
<section>
<title>Configurando o locale</title>
<body>

<p>
Existe uma variável de ambiente que precisa ser configurada para poder usar
nossos novos locales de UTF-8: <c>LC_ALL</c> (esta variável sobrecarrega o
ajuste <c>LANG</c> também). Também há vários modos de configurá-la; algumas
pessoas preferem só ter um ambiente de UTF-8 para um usuário específico, caso em
que configuram seu <path>~/.profile</path> (se você usar <c>/bin/sh</c>), 
<path>~/.bash_profile</path> ou <path>~/.bashrc</path> (se você usar
<c>/bin/bash</c>).
</p>

<p>
Outros preferem configurar o locale globamente. Uma circunstância específica
onde o autor particularmente recomenda fazê-lo é quando o
<path>/etc/init.d/xdm</path> estiver em uso, porque este script de init inicia o
gerenciador de display e desktop antes de quaisquer arquivos de inicialização de
shell serem lidos, e logo antes de quaisquer variáveis estarem no ambiente.
</p>

<p>
Configurar o locale globamente deve ser feito usando o
<path>/etc/env.d/02locale</path>. O arquivo deve parecer-se algo como o
seguinte:
</p>

<pre caption="Demonstração de /etc/env.d/02locale">
<comment>(Como sempre, troque "en_GB.UTF-8" por seu locale)</comment>
LC_ALL="en_GB.UTF-8"
</pre>

<p>
A seguir, o ambiente deve ser atualizado com a mudança.
</p>

<pre caption="Atualizando o ambiente">
# <i>env-update</i>
>>> Regenerating /etc/ld.so.cache...
 * Caching service dependencies ...
# <i>source /etc/profile</i>
</pre>

<p>
Agora, rode <c>locale</c> sem argumentos para ver se nós temos as variáveis
corretas em nosso ambiente:
</p>

<pre caption="Verificando se nosso novo locale está no ambiente">
# <i>locale</i>
LANG=
LC_CTYPE="en_GB.UTF-8"
LC_NUMERIC="en_GB.UTF-8"
LC_TIME="en_GB.UTF-8"
LC_COLLATE="en_GB.UTF-8"
LC_MONETARY="en_GB.UTF-8"
LC_MESSAGES="en_GB.UTF-8"
LC_PAPER="en_GB.UTF-8"
LC_NAME="en_GB.UTF-8"
LC_ADDRESS="en_GB.UTF-8"
LC_TELEPHONE="en_GB.UTF-8"
LC_MEASUREMENT="en_GB.UTF-8"
LC_IDENTIFICATION="en_GB.UTF-8"
LC_ALL=en_GB.UTF-8
</pre>

<p>
Isto é tudo. Você está agora usando locales de UTF-8, e o próximo passo é a
configuração de aplicações que você usa rotineiramente.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Suporte de aplicações</title>
<section>
<body>

<p>
Quando o Unicode começou a ganhar momento no mundo do software, conjuntos de
caracteres de múltiplos bits não funcionavam bem com línguas como C, na qual
muitos dos programas de uso diário são escritos. Até hoje, alguns programas não
são capazes de lidar com UTF-8 adequadamente. Felizmente, a maioria é!
</p>

</body>
</section>
<section>
<title>Nomes de arquivo, NTFS e FAT</title>
<body>

<p>
Existem várias opções de NLS no menu de configuração de kernel do Linux, mas é
importante não se confundir! Para a maior parte, a única coisa que você precisa
fazer é construir suporte de UTF-8 NLS no kernel, e mudar a opção padrão de NLS
para utf8.
</p>

<pre caption="Passos de configuração do kernel para UTF-8 NLS">
File Systems --&gt;
  Native Language Support --&gt;
    (utf8) Default NLS Option
    &lt;*&gt; NLS UTF8
    <comment>(Também marque &lt;*&gt; em outros conjuntos de caracteres que são usados por
    sistemas de arquivos FAT ou CD-ROMs Joilet.)</comment>
</pre>

<p>
Se você planeja montar partições NTFS, você pode ter que especificar uma opção
<c>nls=</c> para o mount. Se você planeja montar partições FAT, você precisa
especificar uma opção <c>codepage=</c> com o mount. Opcionalmente, você pode
configurar uma codepage padrão para FAT na configuração do kernel. Note que a
opção <c>codepage</c> com mount irá sobrepor-se ao ajuste do kernel.
</p>

<pre caption="ajustes de FAT na configuração do kernel">
File Systems --&gt;
  DOS/FAT/NT Filesystems  --&gt;
    (437) Default codepage for fat
</pre>

<p>
Você deve evitar configurar <c>Default iocharset for fat</c> como UTF-8, já que
não é recomendado. Ao invés disso, você deve passar a opção utf8=true quando
montar suas partições FAT. Para mais informações, veja <c>man mount</c> e a
documentação do kernel em
<path>/usr/src/linux/Documentation/filesystems/vfat.txt</path>.
</p>

<p>
Para mudar a codificação dos nomes de arquivos, <c>app-text/convmv</c> pode ser
usado.
</p>

<pre caption="Exemplo de uso de convmv">
# <i>emerge --ask app-text/convmv</i>
<comment>(Formato de comando)</comment>
# <i>convmv -f &lt;codificação-atual&gt; -t utf-8 &lt;nomedoarquivo&gt;</i>
<comment>(Troque iso-8859-1 com o conjunto de caracteres a partir do qual você
está convertendo)</comment>
# <i>convmv -f iso-8859-1 -t utf-8 nomedoarquivo</i>
</pre>

<p>
Para mudar o <e>conteúdo</e> dos arquivos, use o utilitário <c>iconv</c>, que
vem com o <c>glibc</c>:
</p>

<pre caption="Exemplo de uso de iconv">
<comment>(troque iso-8859-1 com o conjunto de caracteres a partir do qual você está convertendo)</comment>
<comment>(Veja se a saída é o esperado)</comment>
# <i>iconv -f iso-8859-1 -t utf-8 nomedoarquivo</i> 
<comment>(Converta um arquivo, você deve criar outro arquivo)</comment>
# <i>iconv -f iso-8859-1 -t utf-8 nomedoarquivo > novoarquivo</i>
</pre>

<p>
<c>app-text/recode</c> também pode ser usado para este propósito.
</p>

</body>
</section>
<section>
<title>O console de sistema</title>
<body>

<impo>
Você precisa de >=sys-apps/baselayout-1.11.9 para Unicode no console.
</impo>

<p>
Para ativar UTF-8 no console, você deve editar o <path>/etc/rc.conf</path> e
configurar <c>UNICODE="yes"</c>, e também ler os comentários no arquivo -- é
importante ter uma fonte que tem um bom alcance de caracteres se você planeja
tirar proveito do Unicode.
</p>

<p>
A variável <c>KEYMAP</c>, ajustada em <path>/etc/conf.d/keymaps</path>, deve ter
um mapa de teclado de Unicode especificado.
</p>

<pre caption="Exemplo de trecho de /etc/conf.d/keymaps">
<comment>(Troque "uk" pelo seu arranjo local)</comment>
KEYMAP="uk"
</pre>

</body>
</section>
<section>
<title>Ncurses e Slang</title>
<body>

<note>
Ignore qualquer menção de Slang nesta seção se você não o tem instalado ou não o
usa.
</note>

<p>
É sábio adicionar <c>unicode</c> nas suas opções de USE globais em 
<path>/etc/make.conf</path>, e fazer novo emerge de <c>sys-libs/ncurses</c> e
<c>sys-libs/slang</c>, caso necessário. O Portage irá fazer isto automaticamente
quando você atualizar seu sistema:
</p>

<pre caption="Atualizando seu sistema">
# <i>emerge --update --deep --newuse world</i>
</pre>

<p>
Nós também precisamos re-construir pacotes que ligam a estes, agora que as
opções de USE foram aplicadas. A ferramenta que nós usamos
(<c>revdep-rebuild</c>) é parte do pacote <c>gentoolkit</c>.
</p>

<pre caption="Re-construindo programas que fazem ligação a ncurses ou slang">
# <i>revdep-rebuild --soname libncurses.so.5</i>
# <i>revdep-rebuild --soname libslang.so.1</i>
</pre>

</body>
</section>
<section>
<title>KDE, GNOME e Xfce</title>
<body>

<p>
Todos principais ambientes de desktop tem suporte total a Unicode, e não
precisarão configurar mais do que já foi coberto neste guia. Isto é porque os
toolkits gráficos (Qt ou GTK+2) são cientes de UTF-8. Subseqüentemente, todas
aplicações rodando em cima dos toolkits devem ser cientes de UTF-8 sem ajustes
adicionais.
</p>

<p>
As exceções à regra estão em Xlib e GTK+1. O GTK+1 precisa de uma FontSpec
iso-10646-1 no ~/.gtkrc, por exemplo
<c>-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1</c>. Também, aplicações que usam
Xlib ou Xaw precisarão de uma FontSpec semelhante, caso contrário não irão
funcionar.
</p>

<note>
Se você tiver uma versão do control center do gnome1, use-o ao invés disso.
Escolha qualquer fonte de iso10646 de lá.</note>

<pre caption="Exemplo de ~/.gtkrc (para GTK+1) que define uma fonte compatível com Unicode">
style "user-font"
{
    fontset="-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1"
}
widget_class "*" style "user-font"
</pre>

<p>
Se uma aplicação tiver suporte tanto para uma GUI de Qt quanto de GTK+2, a GUI
de GTK+2 irá geralmente dar melhores resultados com Unicode.
</p>

</body>
</section>
<section>
<title>X11 e fontes</title>
<body>

<impo>
<c>x11-base/xorg-x11</c> tem suporte de fontes para Unicode muito melhor que
XFree86 e é <e>muito</e> recomendável.
</impo>

<p>
Fontes TrueType têm suporte para Unicode, e maior parte das fontes que vêm com o
Xorg tem suporte de caracteres impressionante, embora, obviamente, nem todo
glifo disponível em Unicode tenha sido criado para aquela fonte. Para construir fontes
(incluindo o conjunto Bitstream Vera) com suporte para letras do leste asiáticos para X,
certifique-se que você tem a opção de USE <c>cjk</c> ativa. Muitas outras aplicações
usam a opção, então é uma boa idéia tê-la como uma opção permanente.
</p>

<p>
Também, vários pacotes de fonte no Portage são cientes de Unicode.
</p>

<pre caption="Opcional: instale mais fontes cientes de Unicode">
# <i>emerge terminus-font intlfonts freefonts cronyx-fonts corefonts</i>
</pre>

</body>
</section>
<section>
<title>Gerenciadores de janela e emuladores de terminal</title>
<body>

<p>
Gerenciadores de janela não construídos com GTK ou Qt geralmente tem suporte
muito bom a Unicode, já que freqüentemente usam a biblioteca Xft para lidar com
fontes. Se seu gerenciador de janelas não usar Xft para fontes, você ainda pode
usar a FontSpec mencionada na seção anterior como uma fonte de Unicode.
</p>

<p>
Emuladores de terminal que usam Xft e suportam Unicode são mais difíceis de
aparecer. Fora o Konsole o gnome-terminal, as melhores opções no Portage são
<c>x11-terms/rxvt-unicode</c>, <c>xfce-extra/terminal</c>,
<c>gnustep-apps/terminal</c>, <c>x11-terms/mlterm</c>, ou simplesmente
<c>x11-terms/xterm</c> quando construídos com a opção de USE <c>unicode</c> e
invocados com <c>uxterm</c>. <c>app-misc/screen</c> também suporta UTF-8, quando
invocada com <c>screen -U</c> ou quando o seguinte é colocado no
<path>~/.screenrc</path>:
</p>

<pre caption="~/.screenrc para UTF-8">
defutf8 on
</pre>

</body>
</section>
<section>
<title>Vim, Emacs, Xemacs e Nano</title>
<body>

<p>
O Vim fornece suporte completo de UTF-8, e também tem detecção interna de
arquivos UTF-8. Para mais informações sobre o Vim, use <c>:help mbyte.txt</c>.
</p>

<p>
O Emacs 22.x e superiores também têm suporte completo e UTF-8. O Xemacs 22.x
ainda não suporta combinação de caracteres.
</p>

<p>
As versões inferiores de Emacs e/ou Xemacs podem necessitar que você instale
<c>app-emacs/mule-ucs</c> e/ou <c>app-xemacs/mule-ucs</c>
e adicione o seguinte código em seu <path>~/.emacs</path> para ter suporte a
línguas CJK em UTF-8:
</p>

<pre caption="Suporte a CJK UTF-8 de Emacs">
(require 'un-define)
(require 'jisx0213)
(set-language-environment "Japanese")
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
</pre>

<p>
Atualmente o nano não fornece suporte de UTF-8, embora já esteja planejado
por bastante tempo. Com sorte, isto mudará no futuro. Na época desta escrita, 
suporte de UTF-8 está no CVS do nano, e deve ser incluído no próximo lançamento.
</p>

</body>
</section>
<section>
<title>Shells</title>
<body>

<p>
Atualmente, <c>bash</c> fornece suporte total de Unicode a través da biblioteca
GNU readline. Usuários de Z Shell estão em uma posição um pouco pior -- nenhuma
parte da shell tem suporte a Unicode, embora haja um esforço para adicionar
suporte a conjuntos de caracteres de múltiplos bits no momento.
</p>

<p>
A C shell, <c>tcsh</c> e <c>ksh</c> não têm nenhum suporte de UTF-8.
</p>

</body>
</section>
<section>
<title>Irssi</title>
<body>

<p>
Irssi tem suporte completo de UTF-8, embora precise de que o usuário configure
uma opção.
</p>

<pre caption="Ativando UTF-8 no Irssi">
/set term_type UTF-8
</pre>

<p>
Para canais onde caracteres não-ASCII são freqüentemente trocados em conjuntos
de caracteres não-UTF-8, o comando <c>/recode</c> pode ser usado para converter
os caracteres. Digite <c>/help recode</c> para mais informações.
</p>

</body>
</section>
<section>
<title>Mutt</title>
<body>

<p>
O agente de e-mail de usuário Mutt também tem bom suporte a Unicode. Para usar
UTF-8 com o Mutt, você não precisa colocar nada em seus arquivos de
configuração. O Mutt irá funcionar em um ambiente unicode sem modificação se
todos seu arquivos (inclusive a assinatura) estiverem codificados em UTF-8.
</p>

<note>
Você pode ainda ver '?' em correio que você ler com Mutt. Isto é o resultado de
pessoas que usam um cliente de correio que não indica o código de caracteres
usado. Você não pode fazer mais que pedir para que configurem seu cliente
corretamente.
</note>

<p>
Mais informações estão disponíveis no <uri
link="http://wiki.mutt.org/index.cgi?MuttFaq/Charset">Mutt Wiki</uri>.
</p>

</body>
</section>
<section>
<title>Less</title>
<body>

<p>
Nós usamos muito <c>more</c> ou <c>less</c> junto com <c>|</c> para poder ver a
saída de um comando corretamente, como para o exemplo <c>dmesg | less</c>.
Embora o <c>more</c> só precise do shell para compreender UTF-8, o <c>less</c>
precisa de uma variável de ambiente configurada, <c>LESSCHARSET</c> para
certificar que os caracteres de unicode são desenhados corretamente. Isto pode
ser configurado em <path>/etc/profile</path> ou <path>~/.bash_profile</path>.
Abra o editor de sua escolha e adicione a seguinte linha a um dos arquivos
mencionados acima.
</p>

<pre caption="Configurando a variável de ambiente para o less">
LESSCHARSET=utf-8
</pre>

</body>
</section>
<section>
<title>Man</title>
<body>

<p>
Páginas de man são uma parte integral de qualquer máquina rodando Linux. Para
ter certeza de que qualquer unicode em suas páginas de man sejam desenhados
corretamente, edite <path>/etc/man.conf</path> e troque uma linha como mostrado
abaixo.
</p>

<pre caption="mudanças no man.conf para suporte a Unicode">
<comment>(Esta é a linha velha)</comment>
NROFF           /usr/bin/nroff -Tascii -c -mandoc
<comment>(Troque a linha com esta)</comment>
NROFF           /usr/bin/nroff -mandoc -c
</pre>

</body>
</section>
<section>
<title>elinks e links</title>
<body>

<p>
Estes dois são navegadores de texto comumente usados, e veremos como podemos
ativar suporte a UTF-8 neles. No <c>elinks</c> e no <c>links</c>, existem dois
jeitos de fazê-lo, um usando a opção Setup de dentro do navegador ou editando o
arquivo de configuração. Para configurar a opção através do navegador, abra um
site com <c>elinks</c> ou <c>links</c> e aperte <c>Alt+S</c> para entrar no
Setup Menu e selecione Terminal options, ou aperte <c>T</c>. Desça e selecione
a última opção <c>UTF-8 I/O</c> apertando Enter. Então salve e saia do menu. No
<c>links</c> você pode ter que repetir <c>Alt+S</c> e apertar <c>S</c> para
salvar. A opção do arquivo de configuração é mostrada abaixo.
</p>

<pre caption="Ativando UTF-8 para elinks/links">
<comment>(Para elinks, edite /etc/elinks/elinks.conf ou ~/.elinks/elinks.conf e
adicione a linha seguinte)</comment>
set terminal.linux.utf_8_io = 1

<comment>(Para links, edite ~/.links/links.cfg e adicione a seguinte
linha)</comment>
terminal "xterm" 0 1 0 us-ascii utf-8
</pre>

</body>
</section>
<section>
<title>Testando tudo</title>
<body>

<p>
Existem vários websites para teste de UTF-8.  <c>net-www/w3m</c>,
<c>net-www/links</c>, <c>net-www/elinks</c>, <c>net-www/lynx</c> e todos
navegadores baseados no Mozilla (incluindo o Firefox) têm suporte a UTF-8. O
Konqueror e Opera também têm suporte completo a UTF-8.
</p>

<p>
Quando estiver usando um dos navegadores da web somente de texto, tenha certeza
de que você está usando um terminal ciente de Unicode.
</p>

<p>
Se você vir certos caracteres exibidos como caixas com letras ou números dentro,
isto significa que a sua fonte não tem o caractere ou glifo para o símbolo que o
UTF-8 deseja. No caso, ele mostra uma caixa com o código hexadecimal do símbolo
em UTF-8.
</p>

<ul>
  <li>
    <uri link="http://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html">Uma página
    de teste de UTF-8 da W3C</uri>
  </li>
  <li>
    <uri link="http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm">
    Uma página de teste de UTF-8 fornecida pela Universidade de Frankfurt</uri>
  </li>
</ul>

</body>
</section>
<section>
<title>Métodos de entrada</title>
<body>

<p>
<e>Dead keys</e> pode ser usado para digitar caracteres no X que não são
incluídos no seu teclado. Eles funcionam apertando a tecla Alt (ou em alguns
países, AltGr) e uma tecla opcional da seção não-alfabética do teclado à
esquerda da tecla de enter uma vez, soltando elas, e pressionando uma letra. A
dead key deve modificá-la. A entrada pode ser modificada mais ainda usando a
tecla Shift apertando ao mesmo tempo AltGr e um modificador.
</p>

<p>
Para ativar dead keys no X, você precisa de um arranjo que o suporte. A maior
parte dos arranjos europeus têm dead keys como uma variante padrão. No entanto,
isto não vale para arranjos norte-americanos. Embora haja um grau de
inconsistência entre os arranjos, a solução mais fácil parece ser usar um
arranjo na forma "en_US" ao invés de "us", por exemplo. O arranjo é configurado
no <path>/etc/X11/xorg.conf</path> desta maneira:
</p>

<pre caption="trecho de /etc/X11/xorg.conf">
Section "InputDevice"
    Identifier "Keyboard0"
    Driver     "kbd"
    Option     "XkbLayout" "en_US" <comment># Ao invés de só "us"</comment>
    <comment>(Outras opções de Xkb aqui)</comment>
EndSection
</pre>

<note>
A mudança precedente só precisa ser aplicada se você estiver usando um arranjo
norte-americano, ou outro arranjo que não funciona com dead keys. Usuários
europeus devem ter suas dead keys funcionando sem modificações.
</note>

<p>
Está mudança entrará em efeito quando seu servidor de X for reiniciado. Para
aplicar a mudança agora, use a ferramenta <c>setxkbmap</c>, por exemplo,
<c>setxkbmap en_US</c>.
</p>

<p>
É provavelmente mais fácil descrever dead keys com exemplos. Embora os
resultados dependam do locale, os conceitos devem permanecer os mesmos
independente do locale. Os exemplos contêm UTF-8, então para vê-los você precisa
ou falar para seu navegador ver a página como UTF-8, ou já ter um locale de
UTF-8 configurado.
</p>

<p>
Quando aperto AltGr e [ juntos, solto-os, e então aperto a, 'ä' é produzido.
Quando aperto AltGr e [ juntos, solto-os, e então aperto e, 'ë' é produzido.
Quando aperto AltGr e ; juntos, 'á' é produzido, quando aperto AltGr e ; juntos,
solto-os, e aperto e, 'é' é produzido.
</p>

<p>
Ao apertar AltGr, Shift e [ juntos, soltá-los, e apertar a, um 'å' escandinavo é
produzido. De maneira semelhante, quando aperto AltGr, Shift e [ juntos, solto
<e>só</e> o [, e aperto-o novamente, um '˚' é produzido. Embora pareça-se com
um, este símbolo (U+02DA) não é igual ao símbolo de graus (U+00B0). Isto
funciona com outros acentos produzidos por dead keys — AltGr e [, soltando só o
[, apertando-o novamente e tendo '¨'.
</p>

<p>
AltGr pode ser usado com teclas alfabéticas sozinhas. Por exemplo, AltGr e m,
uma letra grega minúscula mu é produzida: 'µ'. AltGr e s produzem um scharfes s 
ou esszet: 'ß'. Como muitos usuários europeus esperam (já que está marcado em
seus teclados), AltGr e 4 (ou E dependendo do arranjo do teclado) produzem
um símbolo do Euro, '€'.
</p>

</body>
</section>
<section>
<title>Recursos</title>
<body>

<ul>
  <li>
    <uri link="http://en.wikipedia.org/wiki/Unicode">Entrada da Wikipedia para
    Unicode</uri>
  </li>
  <li>
    <uri link="http://en.wikipedia.org/wiki/UTF-8">Entrada da Wikipedia para
    UTF-8</uri>
  </li>
  <li><uri link="http://www.unicode.org">Unicode.org</uri></li>
  <li><uri link="http://www.utf-8.com">UTF-8.com</uri></li>
  <li><uri link="http://www.ietf.org/rfc/rfc3629.txt">RFC 3629</uri></li>
  <li><uri link="http://www.ietf.org/rfc/rfc2277.txt">RFC 2277</uri></li>
  <li>
    <uri
    link="http://www.tbray.org/ongoing/When/200x/2003/04/26/UTF">Characters vs.
    Bytes</uri>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
