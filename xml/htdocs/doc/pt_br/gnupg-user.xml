<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pt_br/gnupg-user.xml,v 1.7 2005/03/24 23:34:16 vanquirius Exp $ -->

<guide link = "/doc/pt_br/gnupg-user.xml">
<title>Guia do usuário de GnuPG do Gentoo</title>
<author title="Autor">
  <mail link="humpback@gentoo.org">Gustavo Felisberto</mail>
</author>
<author title="Editor">
  <mail link="zhen@gentoo.org">John P. Davis</mail>
</author>
<author title="Editor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Tradutor">
 <mail link="vanquirius@gentoo.org">Marcelo Góes</mail>
</author>

<abstract>
Este pequeno guia ensinará o básico do uso do GnuPG, uma ferramenta para
comunicações seguras.
</abstract>

<license/>

<version>1.0.12</version>
<date>2005-02-19</date>


<chapter>
<title>Introdução</title>
<section>
<title>O que você receberá deste guia</title>
<body>

<p>
Este guia presume que você está familiariazado com criptografia com chaves-públicas,
encripção, e assinaturas digitais. Se este não for o caso pule para <uri
link="#doc_chap6">Criptografia de chaves públicas</uri> ou veja o
<uri link="http://www.gnupg.org/(en)/documentation/guides.html">Manual do
GnuPG</uri>, capítulo 2, e volte aqui.
</p>

<p>
Este guia irá ensinar você como instalar o GnuPG, como criar seu par de chaves, como
adicionar chaves a seu círculo de chaves, como enviar sua chave pública para um servidor de chaves e
como assinar, criptografar, verificar e decodificar mensagens que você mandar ou receber. Você também
aprenderá como criptografar arquivos em seu computador local para impedir que pessoas
obtenham seus conteúdos.
</p>

</body>
</section>
<section>
<title>Instalação do software necessário</title>
<body>

<p>
Para começar você precisa fazer <c>emerge gnupg</c>. Muitas aplicações, hoje em dia,
tem algum tipo de suporte para gpg, então ter gpg na sua variável de USE é
provavelmente uma boa idéia. Se você quiser usar um cliente de e-mail capaz de usar
gnupg você pode usar pine (<c>emerge pinepgp</c>), mutt (<c>emerge mutt</c>), 
Mozilla/Netscape Mail, evolution (evolution é uma versão parecida com o Microsoft Outlook para
GNOME)) e o próprio KMail do KDE (o KMail faz parte do pacote kdepim).
</p>

<p>
<c>Kgpg</c> pode ser interessante se você usa KDE. Este pequeno programa permite
gerar pares de chaves, importar chaves de arquivos ASCII, assinar chaves importadas, exportar
chaves e algumas outras funções.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Gerando sua chave e adicionando chaves ao seu círculo de chaves públicas</title>
<section>
<title>Criando sua chave</title>
<body>

<p>
Para criar sua chave, simplesmente rode <c>gpg --gen-key</c>. A primeira vez que você rodar,
ele irá criar alguns diretórios; rode novamente para criar as chaves:
</p>

<pre caption = "processo de geração de chave" >
$ <i>gpg --gen-key</i>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.

Please select what kind of key you want:
   (1) DSA and ElGamal (default)
   (2) DSA (sign only)
   (4) ElGamal (sign and encrypt)
   (5) RSA (sign only)
   Your selection? <i>1</i>
</pre>

<p>
Aqui você pode escolher o tipo de chave que você quer usar. A maior parte dos usuários usa
o padrão DSA e ElGamal. A seguir vem o tamanho da chave - lembre-se que maior é melhor,
mas não use um tamanho maior que 2048 com chaves DSA/ElGamal. Geralmente 1024 é
mais que o suficiente para email normal.
</p>

<p>
Depois do tamanho vem a data de expiração. Aqui quanto menor melhor, mas a maior parte dos usuários
cria uma chave que nunca expira ou algo como 2 ou 3 anos.
</p>

<pre caption = "Escolhendo o tamanho de sua chave" >
DSA keypair will have 1024 bits.
About to generate a new ELG-E keypair.
              minimum keysize is  768 bits
              default keysize is 1024 bits
    highest suggested keysize is 2048 bits
    What keysize do you want? (1024) <i>2048</i>
Requested keysize is 2048 bits       
Please specify how long the key should be valid.
         0 = key does not expire
 &lt;n&gt;= key expires in n days
 &lt;n&gt;w = key expires in n weeks
 &lt;n&gt;m = key expires in n months
 &lt;n&gt;y = key expires in n years
 Key is valid for? (0) <i>0</i>
Key does not expire at all
</pre>

<p>
Agora está na hora de digitar informações pessoais sobre você. Se você
vai mandar sua chave pública para outras pessoas você tem que usar seu endereço
de e-mail real aqui.
</p>

<pre caption = "Digitando informação de usuário" >
Is this correct (y/n)? <i>y</i>
                        
You need a User-ID to identify your key; the software constructs the user id
from Real Name, Comment and Email Address in this form:
"Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;"

Real name: <i>John Doe</i>
Email address: <i>john@nowhere.someplace.flick</i>
Comment: <i>(The Real John Doe)</i>
You selected this USER-ID:
"John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? <i>O</i> 
You need a Passphrase to protect your secret key.    

Enter passphrase: 
</pre>

<p>
Agora digite sua senha de chave duas vezes. É uma boa idéia usar uma boa senha.
Se alguém obtiver sua chave privada e descobrir sua senha, eles
podem mandar mensagens assinadas por "você" fazendo com que todos acreditem que
você mandou os e-mails.
</p>

<p>
Então, o GnuPG irá gerar sua chave. Movimentar o mouse ou ter uma mp3 tocando no
fundo deixará o processo mais rápido porque gera dados aleatórios.
</p>

</body>
</section>
<section>
<title>Criando um certificado de revogação</title>
<body>

<impo>
Esta parte é muito importante e você deve fazê-la <e>AGORA</e>.
</impo>

<p>
Depois de criar suas chaves você deve criar um certificado de revogação. Fazê-lo
permite que você revogue sua chave caso algo de ruim aconteça com sua chave
(alguém obtenha sua chave/senha).
</p>

<pre caption = "Gerando um certificado de revogação">
$ <i>gpg --list-keys</i>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;
sub  2048g/96D6CDAD 2002-12-08

$ <i>gpg --output revoke.asc --gen-revoke 75447B14</i>

sec  1024D/75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;

Create a revocation certificate for this key? <i>y</i>
Please select the reason for the revocation:   
  0 = No reason specified
  1 = Key has been compromised
  2 = Key is superseded
  3 = Key is no longer used
  Q = Cancel
(Probably you want to select 1 here)
Your decision? <i>1</i>
Enter an optional description; end it with an empty line:
&gt; <i>Someone cracked me and got my key and passphrase</i>
&gt;
Reason for revocation: Key has been compromised
Someone cracked me and got my key and passphrase
Is this okay? <i>y</i>

You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"
1024-bit DSA key, ID 75447B14, created 2002-12-08

ASCII armored output forced.
Revocation certificate created.

Please move it to a medium which you can hide away; if Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just in case
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!
</pre>

<p>
O comando <c>gpg --list-keys</c> lista chaves em seu círculo de chaves públicas. Você pode
usá-lo para ver a ID de sua chave para que você possa criar o certificado de
revogação. É uma boa idéia copiar todo o diretório .gnupg e o certificado
de revogação (em ASCII armor - <path>revoke.asc</path>) para algum
meio seguro (dois disquetes ou um CD-R que você guarde em lugar seguro). Lembre-se
que o <path>revoke.asc</path> pode ser usado para revogar suas chaves e torná-las
inúteis no futuro.
</p>

<note>
Se você tiver vários endereços de e-mail que você quer usar com esta
chave, você pode rodar <c>gpg --edit-key SUA_ID</c> e então use o comando <c>adduid</c>.
Seu nome será pedido, e-mail e comentário da segunda ID que você
irá usar.
</note>

</body>
</section>
<section>
<title>Exportando chaves</title>
<body>

<p>
Para exportar sua chave, você digita <c>gpg --armor --output john.asc --export
john@nowhere.someplace.flick</c>. Você pode quase sempre usar sua ID de chave ou
algo que identifica a chave (aqui nós usamos um endereço de e-mail). O John agora
tem um <path>john.asc</path> que ele pode mandar para seus amigos, ou colocar em sua página da web
para que as pessoas possam se comunicar seguramente com ele.
</p>

</body>
</section>
<section>
<title>Importando chaves</title>
<body>

<p>
Para adicionar arquivos a seu círculo de chaves públicas, você primeiro deve importá-los, e então verificar
a fingerprint da chave. Depois que você verificou a fingerprint você deve validar.
</p>

<note>
Você deve ser cuidadoso na hora de verificar chaves. Este é um dos pontos fracos da
criptografia de chaves públicas.
</note>

<p>
Agora vamos adicionar a chave pública do Luis Pinto (um amigo meu) a nosso círculo de chaves
públicas. Depois de ligar para ele e perguntar qual a fingerprint de sua chave, eu
comparo a fingerprint com a saída do comando <c>fpr</c>. Já que a chave é
autêntica, ele é adicionada ao círculo de chaves públicas. Neste caso particular, a chave do Luis
irá expirar em 2003-12-01 então sou perguntado se minha assinatura de sua chave
deve expirar ao mesmo tempo.
</p>

<pre caption = "Importando e assinando chaves">
$ <i>gpg --import luis.asc</i>
gpg: key 462405BB: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
$ <i>gpg --list-keys</i>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;
sub  2048g/96D6CDAD 2002-12-08

pub  1024D/462405BB 2002-12-01 Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;
uid                            Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
sub  4096g/922175B3 2002-12-01 [expires: 2003-12-01]

$ <i>gpg --edit-key lmpinto@dei.uc.pt</i>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.


gpg: checking the trustdb
gpg: checking at depth 0 signed=0 ot(-/q/n/m/f/u)=0/0/0/0/0/1
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
sub  4096g/922175B3  created: 2002-12-01 expires: 2003-12-01
(1)  Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
(2). Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;

Command> <i>fpr</i>
pub  1024D/462405BB 2002-12-01 Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
     
Command> <i>sign</i>
Really sign all user IDs? <i>y</i>
                           
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB

     Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
     Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;

This key is due to expire on 2003-12-01.
Do you want your signature to expire at the same time? (Y/n) <i>Y</i>
How carefully have you verified the key you are about to sign actually belongs
to the person named above?  If you don't know what to answer, enter "0".

   (0) I will not answer. (default)
   (1) I have not checked at all.
   (2) I have done casual checking.
   (3) I have done very careful checking.

   Your selection? <i>3</i>
Are you really sure that you want to sign this key
with your key: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"

I have checked this key very carefully.

Really sign? <i>y</i>
              
You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"
1024-bit DSA key, ID 75447B14, created 2002-12-08

Command> <i>check</i>
uid  Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhe
uid  Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhe
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Trocando chaves com servidores de chaves</title>
<section>
<title>Enviando chaves para servidores de chaves</title>
<body>

<p>
Agora que você tem sua chave, provavelmente é uma boa idéia mandá-la para o servidor de chaves
mundial. Existem vários servidores de chaves no mundo e a maioria deles troca
chaves entre si. Aqui nós vamos mandar a chave do Luis para o servidor
pgp.mit.edu. Isto usa HTTP, então se você precisa usar um proxy para tráfico HTTP não
se esqueça de configurá-lo (<c>export http_proxy=http://proxy_host:port/</c>). O comando
para mandar a chave é:  <c>gpg --keyserver pgp.mit.edu --keyserver-options
honor-http-proxy --send-key 75447B14</c> onde <c>75447B14</c> é a ID da chave.
Se você não precisa de um proxy de HTTP, você pode tirar a opção <e>--keyserver-options 
honor-http-proxy</e>.
</p>

<p>
Você também pode mandar as chaves de outras pessoas que você assinou para o servidor de chaves. Nós
poderíamos mandar a chave do Luis Pinto para o servidor de chaves. Desta maneira alguém que confiar
em sua chave pode usar a mesma assinatura que você colocou para confiar na chave do Luis.
</p>

</body>
</section>
<section>
<title>Obtendo chaves dos servidores de chaves</title>
<body>

<p>
Agora vamos procurar a chave do Gustavo Felisberto e adicioná-la ao
círculo de chaves públicas do John Doe (caso você não tenha percebido Gustavo Felisberto é o
autor deste guia :) ).
</p>

<pre caption = "Procurando chaves em servidores de chaves">
$ <i>gpg --keyserver pgp.mit.edu --keyserver-options honor-http-proxy --search-keys humpback@felisberto.net</i>
gpg: searching for "humpback@felisberto.net" from HKP server pgp.mit.edu
Keys 1-5 of 5 for "humpback@felisberto.net"
(1)Gustavo Felisberto (apt-get install anarchy) &lt;humpback@felisberto.net&gt; 1024
  created 2002-12-06, key B9F2D52A
(2)Gustavo Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1999-08-03, key E97E0B46
(3)Gustavo A.S.R. Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1998-12-10, key B59AB043
(4)Gustavo Adolfo Silva Ribeiro Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1998-08-26, key 39EB133D
(5)Gustavo Adolfo Silva Ribeiro Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1998-06-14, key AE02AF87
  Enter number(s), N)ext, or Q)uit &gt;<i>1</i>
gpg: requesting key B9F2D52A from HKP keyserver pgp.mit.edu
gpg: key B9F2D52A: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>

<p>
Como você pode ver da resposta do servidor eu tenho algumas chaves enviadas ao servidor
de chaves, mas atualmente eu só uso a <e>B9F2D52A</e>. Agora o John Doe pode pegá-la e
assiná-la se ele confiar nela.
</p>

</body>
</section>
</chapter>

<chapter id="gpg-agent">
<title>Usando um agente de GPG</title>
<section>
<title>O que é um agente de GPG?</title>
<body>

<p>
Existem casos, na hora de trabalhar com certas aplicações, onde você usar sua chave de
GPG muito freqüentemente, o que significa que você tem que digitar sua senha muitas
vezes. Várias aplicações costumavam suportar um mecanismo de cachê de senhas
para facilitar a vida dos usuários, o que todavia não permitia o compartilhamento do cachê através
de programas (quanto seguro deve ser?) e forçava as aplicações a re-inventar a
roda várias vezes.
</p>

<p>
Um agente de GPG é uma aplicação separada que o GPG usa para fazer cachê de uma senha
de um modo padrão e seguro. Isto permite que aplicações usem GPG concorrentemente: se
você entrar sua senha quando estiver trabalhando em uma aplicação, a outra
aplicação pode trabalhar com GPG sem reiterar o pedido da
senha para destravar a chave - o agente de GPG é configurado para permitir isso,
obviamente.
</p>

<p>
O Gentoo fornece algumas aplicações de agente de GPG. <c>app-crypt/gpg-agent</c> pode ser
considerado o padrão de referência, e será a que usaremos neste documento.
</p>

</body>
</section>
<section>
<title>Instalando e configurando gpg-agent e pinentry</title>
<body>

<p>
Você deve instalar o <c>gpg-agent</c>, obviamente, e também <c>pinentry</c>, que
é uma aplicação de ajuda que o gpg-agent usa para pedir uma senha em uma
janela gráfica. Isto vem em três sabores: ele pode abrir uma janela usando as bibliotecas
gtk+, Qt, ou curses (dependendo a opção de USE que você especificar na hora de fazer
emerge dele).
</p>

<pre caption="Instalando gpg-agent e pinentry">
# <i>emerge gpg-agent pinentry</i>
</pre>

<p>
A seguir, crie um arquivo chamado <path>~/.gnupg/gpg-agent.conf</path> e entre as
seguintes linhas que definem a duração padrão de uma senha (por exemplo, 30
minutos) e a aplicação a ser chamada quando a senha deve ser
pedida pela primeira vez (por exemplo, a versão Qt do pinentry).
</p>

<pre caption="Editando o ~/.gnupg/gpg-agent.conf">
pinentry-program /usr/bin/pinentry-qt
no-grab
default-cache-ttl 1800
</pre>

<p>
Agora configure o GnuPG para usar um agente quando necessário. Edite o
<path>~/.gnupg/gpg.conf</path> e adicione a seguinte linha:
</p>

<pre caption="Configurando GnuPG para usar um agente de GPG">
use-agent
</pre>

<p>
Se sistema está (quase) pronto para usar o agente de GPG.
</p>

</body>
</section>
<section>
<title>Iniciando o agente de GPG automaticamente</title>
<body>

<p>
Se você usar o KDE como ambiente gráfico, edite
<path>/usr/kde/3.x/env/agent-startup.sh</path> (para todo sistema) ou
<path>~/.kde/env/gpgagent.sh</path> (usuário local) e adicione o seguinte comando
para que o KDE carregue automaticamente o agente de GPG:
</p>

<pre caption="Fazer o KDE carregar o agente de GPG automaticamente">
eval "$(gpg-agent --daemon)"
</pre>

<p>
Se você usar um ambiente gráfico diferente, coloque a linha (a mesma mencionada
acima) em <path>~/.xinitrc</path> (se você usar <c>startx</c>) ou
<path>~/.xsession</path> (se você usar XDM/GDM/KDM/...).
</p>

</body>
</section>
</chapter>

<chapter id="gpg-agent">
<title>Usando um agente de GPG</title>
<section>
<title>O que é um agente de GPG?</title>
<body>

<p>
Existem casos, na hora de trabalhar com certas aplicações, onde você usar sua chave de
GPG muito freqüentemente, o que significa que você tem que digitar sua senha muitas
vezes. Várias aplicações costumavam suportar um mecanismo de cachê de senhas
para facilitar a vida dos usuários, o que todavia não permitia o compartilhamento do cachê através
de programas (quanto seguro deve ser?) e forçava as aplicações a re-inventar a
roda várias vezes.
</p>

<p>
Um agente de GPG é uma aplicação separada que o GPG usa para fazer cachê de uma senha
de um modo padrão e seguro. Isto permite que aplicações usem GPG concorrentemente: se
você entrar sua senha quando estiver trabalhando em uma aplicação, a outra
aplicação pode trabalhar com GPG sem reiterar o pedido da
senha para destravar a chave - o agente de GPG é configurado para permitir isso,
obviamente.
</p>

<p>
O Gentoo fornece algumas aplicações de agente de GPG. <c>app-crypt/gpg-agent</c> pode ser
considerado o padrão de referência, e será a que usaremos neste documento.
</p>

</body>
</section>
<section>
<title>Instalando e configurando gpg-agent e pinentry</title>
<body>

<p>
Você deve instalar o <c>gpg-agent</c>, obviamente, e também <c>pinentry</c>, que
é uma aplicação de ajuda que o gpg-agent usa para pedir uma senha em uma
janela gráfica. Isto vem em três sabores: ele pode abrir uma janela usando as bibliotecas
gtk+, Qt, ou curses (dependendo a opção de USE que você especificar na hora de fazer
emerge dele).
</p>

<pre caption="Instalando gpg-agent e pinentry">
# <i>emerge gpg-agent pinentry</i>
</pre>

<p>
A seguir, crie um arquivo chamado <path>~/.gnupg/gpg-agent.conf</path> e entre as
seguintes linhas que definem a duração padrão de uma senha (por exemplo, 30
minutos) e a aplicação a ser chamada quando a senha deve ser
pedida pela primeira vez (por exemplo, a versão Qt do pinentry).
</p>

<pre caption="Editando o ~/.gnupg/gpg-agent.conf">
pinentry-program /usr/bin/pinentry-qt
no-grab
default-cache-ttl 1800
</pre>

<p>
Agora configure o GnuPG para usar um agente quando necessário. Edite o
<path>~/.gnupg/gpg.conf</path> e adicione a seguinte linha:
</p>

<pre caption="Configurando GnuPG para usar um agente de GPG">
use-agent
</pre>

<p>
Se sistema está (quase) pronto para usar o agente de GPG.
</p>

</body>
</section>
<section>
<title>Iniciando o agente de GPG automaticamente</title>
<body>

<p>
Se você usar o KDE como ambiente gráfico, edite
<path>/usr/kde/3.x/env/agent-startup.sh</path> (para todo sistema) ou
<path>~/.kde/env/gpgagent.sh</path> (usuário local) e adicione o seguinte comando
para que o KDE carregue automaticamente o agente de GPG:
</p>

<pre caption="Fazer o KDE carregar o agente de GPG automaticamente">
eval "$(gpg-agent --daemon)"
</pre>

<p>
Se você usar um ambiente gráfico diferente, coloque a linha (a mesma mencionada
acima) em <path>~/.xinitrc</path> (se você usar <c>startx</c>) ou
<path>~/.xsession</path> (se você usar XDM/GDM/KDM/...).
</p>

</body>
</section>
</chapter>

<chapter>
<title>Trabalhando com documentos</title>
<section>
<title>Criptografando e assinando</title>
<body>

<p>
Vamos agora dizer que você tem um arquivo que você quer mandar para o Luis. Você pode criptografá-lo,
assiná-lo, ou criptografá-lo e assiná-lo. Criptografar significa que só o Luis poderá
abrir o arquivo. A assinatura diz para o Luis que foi realmente você que criou
o arquivo.
</p>

<p>
Os próximos três comandos farão isso, criptografar, assinar e criptografar/assinar.
</p>

<pre caption="Criptografando e assinando arquivos">
$ <i>gpg --output doc.gpg --encrypt --recipient lmpinto@dei.uc.pt doc_to_encrypt</i>
$ <i>gpg --output doc.gpg --sign --recipient lmpinto@dei.uc.pt doc_to_sign</i>
$ <i>gpg --output doc.gpg --encrypt --sign --recipient lmpinto@dei.uc.pt doc_to_encrypt_and_sign</i>
</pre>

<p>
Isto irá criar os arquivos binários. Se você deseja criar arquivos ASCII, simplesmente adicione um
<c>--clearsign</c> ao começo do comando.
</p>

</body>
</section>
<section>
<title>Decodificando e verificando assinaturas</title>
<body>

<p>
Suponha que você tenha recebido um arquivo que está criptografado para você. O comando
para decodificá-lo é <c>gpg --output document --decrypt encrypted_doc.gpg</c>. Isto
irá decodificar o documento e verificar a assinatura (se houver uma).
</p>

</body>
</section>
<section>
<title>Funções avançadas</title>
<body>

<p>
Existem algumas funções avançadas úteis no GnuPG. Para encontrá-las, abra o
arquivo <path>~/.gnupg/gpg.conf</path>. 
</p>

<pre caption="~/.gnupg/gpg.conf">
#keyserver x-hkp://pgp.mit.edu
#keyserver-options auto-key-retrieve include-disabled include-revoked
</pre>

<p>
Procure as duas linhas acima e descomente-as. Assim toda vez que o GnuPG
precisar verificar a assinatura e não encontrar a chave pública no círculo de chaves
públicas local ele irá contactar o servidor de chaves em <uri 
link="http://pgp.mit.edu">pgp.mit.edu</uri> e tentar obtê-la
de lá.
</p>

<p>
Outro comando útil é o <c>gpg --refresh-keys</c>. Ele irá contactar o
servidor de chaves definido no arquivo de opções e carregar as chaves públicas em seu círculo
local de chaves de lá, procurando por chaves revogadas, novas id's, novas assinaturas das chaves.
Você provavelmente deve rodar isso uma vez ou duas por mês para ser notificado se
alguém revogar sua chave.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Interfaces do GnuPG</title>
<section>
<title>Sobre assinaturas de e-mail</title>
<body>

<p>
95% das vezes você irá usar o GnuPG com e-mail, assinando/criptografando suas mensagens
de saída e lendo mensagens assinadas/criptografadas. É simplesmente justo que fale
disso primeiro.
</p>

<p>
Existem dois jeitos de assinar/criptografar um email com GnuPG, o jeito antigo e o jeito
novo :). No jeito antigo as mensagens aparecia em texto puro, sem nenhuma formatação
possível e os arquivos anexados seriam sem assinatura/criptografia, aqui está um exemplo
de uma mensagem assinada do modo antigo:
</p>

<pre caption="A plain text signature">
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Test message

-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 6.5.8 for non-commercial use

iQA/AwUBP8461jMX0745gR7AEQIEOwCg011GbufXO3ED3FkLWXmfzg7xm1cAoJD0
0EU3Kd2EKNCqataEqM5qjpPs
=LchZ
-----END PGP SIGNATURE-----
</pre>

<p>
Mensagens deste jeito não servem muito no mundo de hoje, onde temos interfaces gráficas úteis e
leitores de e-mail que entendem html.
</p>

<p>
Para resolver isso uma adição ao MIME (Multipurpose Internet Mail Extensions)
foi criada. Ela adiciona um campo ao e-mail que diz ao leitor de correio que o
conteúdo inteiro da mensagem está assinado e/ou criptografado. O problema disso
é que nem todos leitores de correio tem suporte. E alguns inclusive alteram o conteúdo,
o Outlook da Microsoft é famoso por não funcionar com isso.
</p>

</body>
</section>
<section>
<title>Kgpg</title>
<body>

<p>
Kgpg é uma interface gráfica para o GnuPG. Na tela principal você pode colar o texto que
você deseja assinar ou criptografar, e você também pode colar o texto ASCII armored que
você deseja decodificar.
</p>

<figure link="/images/kgpg1.png" short="janela principal do kgpg"/>

<p>
Nesta imagem você pode ver a janela principal do Kgpg com texto ASCII armored e
criptografado. Daqui você pode decodificá-lo (você terá que digitar sua
senha), criptografar outros arquivos, colar o próximo texto para assinar...
</p>

<figure link="/images/kgpg2.png" short="janela de gerenciamento de chaves do kgpg"/>

<p>
Agora você pode ver a janela de gerenciamento de chaves. Daqui nós vemos nossa chave boa para John
Doe. As duas chaves confiadas de Gustavo e Luis, e a chave não-confiável de Daniel
Robbins (Eu ainda não liguei para verificar sua fingerprint :) ).
</p>

</body>
</section>
<section>
<title>Seahorse</title>
<body>

<p>
O Seahorse é uma interface gráfica de GnuPG para o desktop do Gnome. O software
está em rápida evolução, mas ainda não tem várias funções importantes que podem ser
encontradas no Kgpg ou na versão de linha de comando.
</p>

</body>
</section>
<section>
<title>Mozilla Enigmail</title>
<body>

<p>
As versões do Mozilla 1.0 e superiores têm o Enigmail, um plug-in para o
cliente de e-mail que é bem simples de configurar. Você só precisa ir em Preferências
-&gt; Privacidade &amp; Segurança -&gt; Enigmail. Então digite sua chave, e-mail e
pronto.
</p>

<p>
E-Mails que vierem como uma assinatura pgp ou gpg não-confiáveis serão marcadas com uma
caneta quebrada. Outros que tem boas assinaturas irão aparecer com uma caneta
reta. O Enigmail até tem a capacidade de obter chaves dos servidores de chaves, mas se ele
tiver problemas ele irá mostrar algumas mensagens bem estranhas (mas você ainda se lembra de
como usar a linha de comando, certo?).
</p>

</body>
</section>
<section>
<title>KMail</title>
<body>

<p>
Se você tiver a variável de USE <c>crypt</c> configurada, o KMail será compilado com suporte
a gpg, e poderá criptografar e decodificar correio PGP em linha automaticamente
bem como criptografar correio OpenPGP/MIME. Se você quiser decodificar correios OpenPGP/MIME
também (provavelmente sim) você precisar estar rodando um agente de GPG
(veja <uri link="#gpg-agent">Usando um agente de GPG</uri>).
</p>

<p>
Você pode verificar se o KMail está configurado adequadamente indo em <c>Configurações</c>,
<c>Configurar KMail</c>, <c>Segurança</c>, <c>Backends de Crypto</c>. Você deve ver
um backend baseado em GpgME listado e você deve podar marcar a caixa de verficação
de OpenPGP. Se estiver listado mas não selecionável, clique em <c>Escanear novamente</c>. Se o
backend baseado em GpgME ainda não estiver selecionável, o KMail não está funcionando devidamente.
</p>

</body>
</section>
<section>
<title>Sylpheed-Claws</title>
<body>

<p>
Este é o leitor de e-mail que eu uso. Ele é <e>muito</e> rápido com grandes caixas de correio,
tem todas as funções úteis que alguém pode querer em um leitor de e-mail e funciona muito bem com
gpg. O único problema é que não funciona com assinaturas de PGP antigas, então
quando você receber esse tipo de correio você terá de verificá-los manualmente.
</p>

<p>
Para usar sua chave de gpg com o Sylpheed-Claws simplesmente vá em configuração de conta e
seleciona a orelha privacidade. Uma vez lá escolha a chave a usar, provavelmente a maior parte
dos usuários irá usar a chave padrão.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Criptografia com chaves públicas</title>
<section>
<title>Criptografia com chaves públicas básica</title>
<body>

<p>
O conceito de criptografia com chaves públicas foi originalmente inventado por Whitfield
Diffie e Martin Hellman em 1976. Quando eu ouvi as palavras "chave pública" e
"criptografia" na mesma frase em 1993 eu pensei comigo mesmo que seria
impossível fazer uma coisa assim. Nesses dias não havia Internet (bem,
havia, mas não para mim) então eu fui para a biblioteca pública e pedi livros
sobre criptografia. Devo dizer que eu tinha 16 anos na época então a bibliotecária olhou-me
espantada e trouxe-me um livro para crianças sobre cifras de substituição
(o tipo onde você troca uma letra por outra como a famosa Caesar Cypher ou
ROT-13 (B Tragbb é qrznvf, r ibpê fnor dhr fvz cbedhr ibpê rfgá yraqb 
vffb.), (faça emerge rotix se você não consegue ler o texto precedente)). Eu fiquei muito irritado
com isso e comecei a procurar mais informações. É bom ter matemáticos
na família, porque logo que eu falei com um deles eu fui introduzido a um
novo mundo.
</p>

<p>
E agora um pouco de matemática:
</p>

<pre caption="Conceitos matemáticos">
Definições:

1- Um número primo é um número positivo inteiro que só é divisível por 1 e
por si mesmo (o resto da divisão é 0).
Os primeiros 8 números primos são 1,2,3,5,7,11,13,17

Teorema (sem prova aqui)
1- Para qualquer número não-primo positivo inteiro é possível dividi-lo como o produto
de números primos, e o produto é singular.
4=2*2
6=2*3
8=2*4=2*2*2
10=2*5
12=2*6=2*2*3

"Fatos":
1- É matematicamente fácil multiplicar dois inteiros grandes
2- É difícil achar os fatores primos de um dado inteiro positivo.
</pre>

<p>
Se eu der a você o número 35 e disser-lhe que o número é o produto de
dois número primos é fácil descobrir que são 5 e 7. Mas se eu disser o
mesmo para 1588522601 você gastará bastante tempo (ou ciclos de CPU) para descobrir que era
49811*31891. E se o número for realmente muito grande a tarefa torna-se
"impossível". Então agora eu darei ao mundo meu grande número que o produto de
dois primos que sei algo sobre o número que ninguém mais sabe.
</p>

<p>
Esta é a base da criptografia de chaves públicas (PKC) atualmente. Como um
exemplo (não-realista), eu posso dar meu número para alguém e a pessoa irá usá-lo para
criptografar uma mensagem para mim. O alguém pode ver a mensagem criptografada, porque eu
sou a única pessoa que sabe um  atalho para lê-la, mas o alguém terá que primeiro
"dividir" o grande número para poder ler a mensagem, e é um "fato"
que impossível fazê-lo em um curto período de tempo (os métodos de hoje e
os computadores mais rápidos do mundo levariam milhares de anos para fazê-lo).
Nesta configuração os dois grandes números primos seriam chamados de CHAVE PRIVADA, e
o grande número não primo é a CHAVE PÚBLICA.
</p>

<p>
Na prática isso não é 100% preciso com a realidade, mas dará uma boa idéia para
o iniciante. Para mais informações veja hack.gr sobre o protocolo <uri
link="http://www.hack.gr/users/dij/crypto/overview/diffie.html">Diffie-Hellman</uri>.
Para mais informação ainda vá para a biblioteca pública e pegue uma cópia do
<uri link="http://www.cacr.math.uwaterloo.ca/hac/">"Manual de criptografia
aplicada"</uri> por Alfred J. Menezes, Paul C. van Oorschot e Scott A.
Vanstone, o livro também está disponível online gratuitamente no site acima.
</p>

<p>
Uma conseqüência do acima é que se você cifrar uma mensagem para mim, e você
perder a mensagem original sem cifras você não poderá mais obtê-la
da mensagem com cifras.
</p>

</body>
</section>
<section>
<title>Assinaturas</title>
<body>

<p>
Nós já vimos como alguém pode mandar-nos uma mensagem cifrada se eles tiverem nossa
chave pública. Mas como nós sabemos se o autor da mensagem é realmente quem ele
diz ser? Ou em outras palavras: se eu receber um e-mail de você como eu realmente
sei que foi você e não alguém dizendo ser você?
</p>

<p>
Lembra quando eu disse que o PKC não era tão simples como eu disse? A idéia é que
quando você cifrar uma mensagem para mim você assina com sua chave privada para que, quando
eu recebê-la, eu posso primeiro usar sua chave pública para verificar a assinatura e então
usar minha chave privada para decifrar a mensagem. Como você pode ver nós não podemos
fazer isso não configuração que eu descrevi anteriormente.
</p>

<p>
Também muito importante, para assinar mensagens você não tem que cifrá-las anteriormente. Assim
você pode criar mensagens que podem ser lidas por qualquer um, mas que vem com
sua "marca". E se algum caractere foi mudado na mensagem ele pode
(e será) detectado.
</p>

</body>
</section>
<section>
<title>Servidores de chaves e chaves assinadas</title>
<body>

<p>
Mas vamos dizer que eu nunca tive contato com você até você mandar-me uma
mensagem, como eu obtenho sua chave pública e como sei que é realmente sua?
</p>

<p>
Para resolver esse problema servidores de chaves públicas foram cifrados. Quando você cria seu par
de chaves (chave pública e privada) você manda sua chave pública para o servidor de chaves. Depois
disso todos podem obter sua chave de lá. Isto resolve o problema de
encontrar a chave. Mas como eu realmente sei que a chave é a do autor? Para
esse, outro conceito deve ser introduzido, e é a assinatura de chaves:
</p>

<p>
Assinar chaves significa que, se eu tiver a chave pública de uma pessoa, e eu tiver
<e>certeza</e> que aquela é realmene a chave da pessoa (é meu amigo pessoal,
alguém que conheço na vida real, etc...) eu posso assinar a chave e mandá-la para
servidores de chaves, de forma que eu digo para o mundo: "a chave realmente pertence a
quem diz pertencer.". Desta maneira pessoas que tiverem minha chave pública e
confiarem em mim podem usar isso para confiar em outras chaves.
</p>

<p>
Isto as vezes pode ser confuso, então vamos ver uma situação mais real.
</p>

<p>
Vamos imaginar uma situação com 3 pessoas: João, Maria e Lisa. O João é um bom
amigo de Maria, mas não conhece Lisa; A Lisa é uma boa amiga da Maria, mas
não conhece o João. Um dia a Lisa manda um e-mail assinado para o João. O João irá pegar
a chave pública de Lisa no servidor de chaves e testar a mensagem, e se tudo for bem
ele irá ver que quem escreveu a mensagem também criou a chave. Mas como eu sei
se aquela é realmente a pessoa que diz ser?
</p>

<p>
Ele então vê que a chave é assinada por Maria, que ele pode verificar porque
ele já tem a chave de Maria e confia nela. Com este círculo de confiança ele 
conclui que o e-mail que ele recebeu realmente foi escrito por Lisa.
</p>

<p>
Você agora está pronto para usar o guia, você pode voltar ao capítulo 1 e aprender como
usar gpg.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Pensamentos finais e créditos</title>
<section>
<title>Alguns problemas</title>
<body>

<p>
Eu tive alguns problemas com fotos nas chaves. Verifique a versão que você está usando. Se
você estiver usando GnuPG 1.2.1-r1 e mais recente provavelmente tudo bem, versões mais antigas podem
ter problemas. Também a maior parte dos servidores de chaves não gostam de fotos, então é melhor
se você não colocar fotos.
</p>

<p>
As últimas versões do gnupg parecem não funcionar com o <c>gpg
--send-keys</c> que foi usado para enviar todas chaves em seu círculo de chaves para o servidor
público.
</p>

</body>
</section>
<section>
<title>O que não está aqui</title>
<body>

<p>
O <c>gpg</c> é uma ferramenta complexa, ele permite fazer muito mais que eu
cobri aqui. Este documento é para o usuário novo ao GnuPG. Para mais
informações, você deve ver o  <uri link="http://www.gnupg.org">website do
GnuPG</uri>.
</p>

<p>
Eu não escrevei sobre outras ferramentas como <c>pgp4pine</c>, <c>gpgpine</c>, 
<c>evolution</c> e talvez ferramentas de Windows, mas eu provavelmente aumentarei
este documento no futuro.
</p>

</body>
</section>
<section>
<title>Crédito</title>
<body>

<p>
O <uri link="http://www.gnupg.org">Manual de GnuPG</uri> de John Michael Ashley
é um livro muito bom para iniciantes.
</p>

<p>
Swift (Sven Vermeulen) por pedir-me para re-escrever isso.
</p>

<p>
Todos no canal do time #gentoo-doc vocês detonam.
</p>

<p>
Tiago Serra por colocar-me de volta no caminho da privacidade.
</p>

</body>
</section>
</chapter>
</guide>
