<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pt_br/keychain-guide.xml,v 1.1 2005/01/27 02:46:32 enderson Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pt_br/keychain-guide.xml">
<title>Guia de keychain do Gentoo Linux</title>

<author title="Autor">
  <mail link="airuike@gmail.com">Eric Brown</mail>
</author>
<author title="Tradutor">
  <mail link="marcelogoes@gmail.com">Marcelo Góes</mail>
</author>

<abstract>
Este documento descreve como usar as chaves compartilhadas de ssh junto com o programa
keychain. Ele presume conhecimento básico de criptografia de chaves públicas.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.0 -->
<license/>

<version>1.1</version>
<date>2004-12-02</date>

<chapter>
<title>Cenário geral</title>
<section>
<title>O problema em si</title>
<body>

<p>
Então você tem todas aquelas amáveis máquinas Gentoo rodando sshd, mas é um pouco
inconveniente para você ficar digitando todas senhas de log-in, certo? Ou
talvez você tenha um script ou cron-job que precisa de um jeito conveniente de usar uma conexão
de ssh. De qualquer jeito, existe uma solução para o problema, e ele começa
com a autenticação de chaves públicas.
</p>

</body>
</section>
<section>
<title>Como funciona a autenticação de chaves públicas?</title>
<body>

<p>
Presuma que temos um cliente que quer conectar ao sshd em um servidor. O cliente
primeiro gera um par de chaves e dá a chave pública ao servidor. Depois,
quando o cliente tentar conectar, o servidor manda um desafio que é
criptografado com a chave pública. Só quem tiver a chave privada correspondente
(o cliente) conseguirá decodificá-la, então como você adivinhou, a
resposta correta leva a uma autenticação com sucesso.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Como usar a autenticação de chaves públicas</title>
<section>
<title>Gerando seu par de chaves</title>
<body>

<p>
O primeiro passo é criar seu par de chaves. Para fazê-lo, nós iremos usar
o comando <c>ssh-keygen</c> como a seguir:
</p>

<pre caption="Gerando o par de chaves">
$ <i>ssh-keygen -t dsa</i>
<comment>(Simplesmente aceite os valores padrão, e certifique-se de usar uma senha difícil de adivinhar)</comment>
</pre>

<warn>
Certifique-se de escolher uma senha difícil de adivinhar, especialmente se a chave for usada
para log-ins de root!
</warn>

<p>
Você agora deve ter uma chave privada em <path>~/.ssh/id_dsa</path> e uma chave pública
em <path>~/.ssh/id_dsa.pub</path>. Nós estamos prontos para copiar a chave pública
para o host remoto.
</p>

</body>
</section>
<section>
<title>Preparando o servidor</title>
<body>

<p>
Nós iremos copiar o arquivo <path>~/.ssh/id_dsa.pub</path> para o
servidor que roda sshd. Nós também iremos adicioná-lo ao arquivo
<path>~/.ssh/authorized_keys</path> que pertence ao usuário conectando ao
servidor. Aqui está um exemplo de como fazê-lo se você já tem acesso ssh
no servidor.
</p>

<pre caption="Copiando a chave pública para o server">
$ <i>scp ~/.ssh/id_dsa.pub server_user@server:~/myhost.pub</i>
$ <i>ssh server_user@server "cat ~/myhost.pub >> ~/.ssh/authorized_keys"</i>
$ <i>ssh server_user@server "cat ~/.ssh/authorized_keys"</i>
</pre>

<p>
A saída da última linha deve mostrar o conteúdo do arquivo
<path>~/.ssh/authorized_keys</path>. Certifique-se que parece estar certo.
</p>

</body>
</section>
<section>
<title>Testando a configuração</title>
<body>

<p>
Teoricamente, se tudo foi bem, e o daemon de ssh no servidor permite, nós
podemos ter acesso ssh sem uma senha no servidor agora. Nós ainda
precisaremos decodificar a chave privada no cliente com a senha que
usamos antes, mas isso não deve ser confundido com a senha do usuário
no servidor.
</p>

<pre caption="Testando as chaves">
$ <i>ssh server_user@server</i>
</pre>

<p>
Espera-que ele pediu sua senha para o id_dsa, e você pode obter
acesso de ssh ao server_user no servidor. Se não, faça log-in como server_user, e
verifique o conteúdo de <path>~/.ssh/authorized_keys</path> para ter certeza que
cada entrada está em uma única linha. Você também deve verificar a configuração do sshd
para ter certeza que ele prefere usar autorização de chave pública quando disponível.
</p>

<p>
Neste ponto, você provavelmente está pensado, "Para que serve isso, eu acabei de trocar uma
senha por outra?!" Relaxe, a próxima seção irá mostrar exatamente como nós
podemos usar isso para economizar nosso precioso tempo.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Tornando autenticação de chaves públicas conveniente</title>
<section>
<title>Típico gerenciamento de chaves com ssh-agent</title>
<body>

<p>
Se você esteve seguindo o guia, você provavelmente está pensando que seria muito
bom se pudéssemos de alguma fora decodificar nossa(s) chave(s) privada(s) uma vez, e poder fazer ssh
livremente, sem senhas. Você está com sorte, porque isso é exatamente o que
o programa <c>ssh-agent</c> faz.
</p>

<p>
O programa <c>ssh-agent</c> é normalmente iniciado no começo de sua sessão de X,
ou de um script de início de shell como <path>~/.bash_profile</path>. Ele
funciona criando um unix-socket, e registrando as variáveis de ambiente apropriadas
para que todas aplicações subseqüentes tirem proveito de seus serviços
conectando-se ao socket. Claramente, só faz sentido que ele comece no
processo pai de sua sessão de X se você quiser usar o conjunto de chaves privadas
decodificadas em todas aplicações de X subseqüentes.
</p>

<pre caption="Preparando o ssh-agent">
$ <i>ssh-agent</i>
</pre>

<note>
O ssh-agent irá manter as chaves decodificadas até você matar o ssh-agent. Se você
quiser dar uma expiração para as chaves, use o argumento -t como descrito em <c>man
ssh-agent</c>.
</note>

<p>
Quando você rodar o ssh-agent, ele deve dizer o PID do ssh-agent que está rodando, e
também configurar algumas variáveis de ambiente, chamadas <c>SSH_AUTH_SOCK</c> e
<c>SSH_AGENT_PID</c>. Ele também deve adicionar automaticamente
<path>~/.ssh/id_dsa</path> a sua coleção e pedir a senha correspondente a
você. Se você tiver outras chaves privadas que você quiser adicionar ao ssh-agent
rodando, você pode usar o comando <c>ssh-add</c> como a seguir:
</p>

<pre caption="Adicionando mais chaves ao ssh-agent">
$ <i>ssh-add algumarquivodechave</i>
</pre>

<p>
Agora está na hora da mágica. Já que você deve ter sua chave privada decodificada pronta,
você deve poder fazer ssh no servidor sem digitar senhas.
</p>

<pre caption="Ssh sem senhas">
$ <i>ssh server</i>
</pre>

<p>
Seria bom saber como desligar o ssh-agent caso você precise,
não?
</p>

<pre caption="Desligando o ssh-agent">
$ <i>ssh-agent -k</i>
</pre>

<note>
Se você teve problemas para fazer o ssh-agent funcionar, ele ainda pode estar rodando. Você
pode matá-lo como qualquer outro processo rodando <c>killall ssh-agent</c>.
</note>

<p>
Se você quiser ainda mais conveniências do ssh-agent, prossiga para a próxima seção sobre
o keychain. Tenha certeza de matar o ssh-agent rodando como no exemplo acima
se você decidiu fazê-lo.
</p>

</body>
</section>
<section>
<title>Tirando a última gota de conveniência do ssh-agent</title>
<body>

<p>
O keychain irá permitir que você use o ssh-agent entre log-ins, e opcionalmente
pedirá senhas cada vez que o usuário fizer log-in. Antes de adiantarmo-nos
muito, vamos instalá-lo primeiro.
</p>

<pre caption="Instalando o keychain">
# <i>emerge keychain</i>
</pre>

<p>
Presumindo que você teve sucesso, nós podemos usar o keychain livremente, Adicione o seguinte
a seu <path>~/.bash_profile</path> para ativá-lo:
</p>

<pre caption="Ativando o keychain no .bash_profile">
keychain ~/.ssh/id_dsa
. ~/.keychain/$HOSTNAME-sh
</pre>

<note>
Você pode adicionar mais chaves privadas à linha de comando se você desejar. Também, se você
quiser que ele paça senhas cada vez que você abrir um shell, coloque a opção
--clear.
</note>

<note>
Se você não estiver usando bash, veja a seção <b>EXAMPLES</b> do <c>man
keychain</c> para exemplos de uso com outros shells. A idéia é fazer os comandos
rodarem cada vez que você usar um shell.
</note>

<p>
Vamos testá-lo. Primeiro certifique-se que você matou o ssh-agent da última
seção, inicie um novo shell, normalmente ao fazer log-in, ou abrindo um
novo terminal. Ele deve pedir sua senha para cada chave que você especificou
na linha de comando. Todas shells abertas a partir deste ponto devem usar o
ssh-agent novamente, permitindo que você faça conexões sem senha de ssh várias e várias vezes.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Notas de conclusão</title>
<section>
<title>Considerações de segurança</title>
<body>

<p>
Claro, o uso do ssh-agent pode adicionar um pouco de insegurança aseu sistema. Se
outro usuário poder usar sua shell quando você for no banheiro, ele
poderá fazer log-in em todos seus servidores sem senhas. Como resultado, é um risco
para os servidores a que você está conectando-se, e você deve primeiro consultar a política
de segurança local. Se você usá-lo, tenha certeza de tomar as medidas para
que suas sessões sejam seguras.
</p>

</body>
</section>
<section>
<title>Problemas comuns</title>
<body>

<p>
A maior parte do guia deve funcionar bem, mas se você tiver problemas, você
certamente deve saber de algumas coisas.
</p>

<ul>
  <li>
    Se você não puder se conectar sem o ssh-agent, considere usar o ssh com a os
    argumentos -vvv para descobrir o que está acontecendo. Às vezes o servidor não está
    configurado para usar autenticação de chaves públicas, às vezes está configurado
    para pedir só senhas locais de qualquer jeito! Se for o caso, você deve também
    usar a opção -o com o ssh, ou mudar o sshd_config do servidor.
  </li>
  <li>
    Se você estiver tendo problemas com o ssh-agent ou keychain, pode ser que você
    não esteja usando um shell que entende os comando que eles usam. Consulte as
    páginas de man para o ssh-agent e keychain para detalhes sobre como trabalhar com
    outros shells.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
