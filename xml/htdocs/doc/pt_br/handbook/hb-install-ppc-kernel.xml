<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pt_br/handbook/hb-install-ppc-kernel.xml,v 1.12 2007/07/13 08:40:58 nightmorph Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>2.15</version>
<date>2006-01-06</date>

<section>
<title>Fuso horário</title>
<body>

<p>
Você deve primeiro selecionar seu fuso horário para que seu sistema saiba onde 
está localizado. Procure seu fuso horário em <path>/usr/share/zoneinfo</path>, 
então copie-o para <path>/etc/localtime</path>. Por favor evite as zonas de fuso
horário em <path>/usr/share/zoneinfo/Etc/GMT*</path>, já que seus nomes não
refletem as zonas esperadas. Por exemplo, <path>GMT-8</path> é na verdade GMT+8.
</p>

<pre caption="Configurando informação de fuso horário">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Suponha que você queira usar GMT)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Instalando as fontes</title>
<subsection>
<title>Escolhendo um kernel</title>
<body>

<p>
A base em que todas distribuições são construídas é o kernel do Linux. Ele fica
entre os programas de usuário e o hardware do sistema. O Gentoo permite que seus
usuários escolham dentro de uma variedade de fontes de kernel. Uma lista
completa com descrições pode ser encontrada no
<uri link="/doc/pt_br/gentoo-kernel.xml">Guia de Kernel do Gentoo</uri>.
</p>

<p>
Nós sugerimos usar tanto <c>vanilla-sources</c> quanto <c>gentoo-sources</c> para
PPC, que são dois kernéis 2.6. O último está disponível quando você fizer uma
instalação sem rede. Continuemos com o <c>emerge</c> das fontes de kernel.
<c>USE="-doc"</c> é necessário para evitar instalar xorg-x11 ou outras
dependências neste ponto. <c>USE="symlink"</c> não é necessário para uma nova
instalação, mas garante a criação correta do link simbólico
<path>/usr/src/linux</path>.
</p>

<pre caption="Instalando a fonte de kernel">
# <i>USE="-doc symlink" emerge gentoo-sources</i>
</pre>

<!-- Removed, as we're trying to avoid specific kernel versions to improve HB
maintainability
<note>
As fontes sugeridas no lançamento da versão 2005.1 são
<c>gentoo-sources-2.6.12-r4</c> e <c>vanilla-sources-2.6.12.2</c>.
</note>
-->

<p>
Se você olhar em <path>/usr/src</path>, você deve ver um link simbólico chamado
<path>linux</path> apontando para a fonte de kernel atual. Neste caso, as
fontes de kernel instaladas apontam para <c>gentoo-sources-2.6.12-r4</c>. Sua
versão pode ser diferente, mantenha isto em mente.
</p>

<pre caption="Vendo o link simbólico da fonte do kernel">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           22  Mar 18 16:23 /usr/src/linux -&gt; linux-2.6.12-gentoo-r4
</pre>

<p>
Agora está na hora de configurar e compilar sua fonte do kernel. Você pode usar
o comando <c>genkernel</c> para fazer isto, que irá construir um kernel genérico
parecido com o do CD de instalação, ou você pode fazer uma configuração manual
para adaptar-se melhor a seu ambiente.
</p>

<p>
Se você quiser configurar seu kernel manualmente, continue agora com <uri
link="#manual">Padrão: Configuração manual</uri>. Se você quiser usar o comando
<c>genkernel</c>, você deve ler <uri link="#genkernel">Alternativa: Usando o
genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Padrão: Configuração manual</title>
<subsection>
<title>Introdução</title>
<body>

<p>
Configurar um kernel manualmente é freqüentemente tido como o procedimento mais
difícil que um usuário de Linux tem de fazer. Grande mentira -- depois de
configurar uns dois kernéis você nem lembrará que foi difícil ;)
</p>

<p>
No entanto, uma coisa <e>é</e> verdade: você deve conhecer seu sistema quando
você começar a configurar o kernel manualmente. A maior parte das informações
pode ser obtida instalando o pciutils (<c>emerge pciutils</c>), que contém o
<c>lspci</c>. Você poderá usar o <c>lspci</c> dentro do ambiente de chroot. Você
pode seguramente ignorar quaisquer avisos de <e>pcilib</e> (como pcilib: cannot
open /sys/bus/pci/devices) que o <c>lspci</c> der. Alternativamente, você pode
rodar <c>lspci</c> de um ambiente <e>fora do chroot</e>. Os resultados são os
mesmos. Você também pode rodar <c>lsmod</c> para quer ver módulos de kernel o CD
de Instalação usa (pode dar uma boa dica sobre o que ativar). Outro local para
procurar dicas de que componentes ativar é ver os registros de mensagens de
kernel da inicialização com sucesso que você obteve até agora. Digite
<c>dmesg</c> para ver as mensagens de kernel.
</p>

<p>
Agora vá para o diretório de fontes de kernel, está na hora de configurar seu
kernel. É recomendável que você adicione os ajustes padrão à sua configuração
rodando primeiro <c>make defconfig</c>. Depois de a configuração ter sido
gerada, rode <c>make menuconfig</c>, que irá iniciar um menu de configuração
baseado em ncurses.
</p>

<pre caption="Rodando o menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make defconfig</i>
# <i>make menuconfig</i>
</pre>

<p>
Você verá várias seções de configuração. Iremos primeiro listar algumas opções
que você deve ativar (ou o Gentoo não irá funcionar, ou não irá funcionar sem
mudanças adicionais).
</p>

</body>
</subsection>
<subsection>
<title>Ativando as opções necessárias</title>
<body>

<p>
Antes de tudo, ative o uso de código/drivers em desenvolvimento e experimentais.
Você precisa disso, senão muito código/drivers importantes não irão aparecer:
</p>

<pre caption="Selecionando código/drivers experimentais, General setup">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
General setup --->
  [*] Support for hot-pluggable devices
</pre>

<p>
Agora vá para <c>File Systems</c> e selecione suporte para os sistemas de
arquivos que você usa. <e>Não</e> os compile como módulos, senão seu sistema
Gentoo não será capaz de montar suas partições. Também selecione <c>/proc file
system</c> e <c>Virtual memory</c>.
</p>

<pre caption="Selecionando sistemas de arquivos necessários">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)

<comment>(Selecione uma ou mais das seguintes opções conforme necessárias ao seu sistema)</comment>
  &lt;*&gt; Second extended fs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; Reiserfs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Se você estiver usando PPPoE para conectar à Internet ou estiver usando um modem
discado, você irá precisar das seguintes opções no kernel:
</p>

<pre caption="Selecionando drivers necessários para PPPoE">
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
As duas opções de compressão não fazem mal, mas não são absolutamente
necessárias, bem como a opção <c>PPP over Ethernet</c>, que somente pode ser
usada pelo comando <c>rp-pppoe</c> quando configurado para fazer PPPoE em modo
de kernel.
</p>

<p>
Se você precisar, não se esqueça de incluir suporte no kernel para sua placa de
rede.
</p>

<p>
Desligue ADB raw keycodes:
</p>

<pre caption="Desligando ADB raw keycodes">
Macintosh Device Drivers ---&gt;
  [ ] Support for ADB raw keycodes
</pre>

<p>
Também escolha a opção correta de suporte RTC (<e>desligue</e> a opção
<c>Enhanced RTC</c>):
</p>

<pre caption="Ativando a opção de RTC correta">
Character devices ---&gt;
  [ ] Enhanced RTC

General setup ---&gt;
  [*] Support for /dev/rtc
</pre>

<p>
Usuários de máquinas NewWorld e OldWorld devem ativar suporte a HFS também.
Usuários de OldWorld precisam disso para copiar kernéis compilados na partição
MacOS. Usuários de NewWorld precisam disso para configurar a partição especial
Apple_Bootstrap:
</p>

<pre caption="Ativando suporte a HFS">
File Systems ---&gt;
  [*] HFS Support
</pre>

<p>
Se você estiver carregando de Firewire, você precisará ativar estas opções. Se
você não quiser compilar suporte no kernel, você precisará incluir estes módulos
e suas dependências em uma initrd.
</p>

<pre caption="Ativando suporte para dispositivos firewire durante a inicialização">
Device Drivers ---&gt;
  IEEE 1394 (FireWire) support ---&gt;
    &lt;*&gt; IEEE 1394 (FireWire) support
    &lt;*&gt;   OHCI-1394 support
    &lt;*&gt;   SBP-2 support (Harddisks etc.)
</pre>

<p>

Se você estiver carregando de USB, você precisará ativar estas opções. Se
você não quiser compilar suporte no kernel, você precisará incluir estes módulos
e suas dependências em uma initrd.
</p>

<pre caption="Ativando suporte para dispositivos USB durante a inicialização">
Device Drivers ---&gt;
  USB support ---&gt;
    &lt;*&gt; Support for Host-side USB
    &lt;*&gt;   OHCI HCD support
    &lt;*&gt;   USB Mass Storage support
</pre>

<p>
Não desligue suporte a framebuffer de kernel, já que é necessário para carregar
com sucesso. Se você estiver usando um chipset baseado em NVIDIA, você deve usar
o framebuffer Open Firmware. Se você estiver usando um chipset da ATI, você deve
selecionar o driver de framebuffer com base em seu chipset (Mach64, Rage128 ou
Radeon).
</p>

<pre caption="Escolhendo um driver de framebuffer">
Device Drivers ---&gt;
  Graphics support ---&gt;
    &lt;*&gt; Support for frame buffer devices
    [*] Open Firmware frame buffer device support
    &lt;*&gt; ATI Radeon display support
    &lt;*&gt; ATI Rage128 display support
    &lt;*&gt; ATI Mach64 display support
    Console display driver support ---&gt;
      &lt;*&gt; Framebuffer Console support
</pre>

<note>
Se você selecionar mais que um dispositivo de framebuffer, ele pode usar para um
driver não otimizado. Ou só use um dispositivo de framebuffer ou especifique
qual driver usar passando um argumento para a inicialização do kernel como
<c>video=radeonfb</c>.
</note>

<p>
Quando você terminar de configurar seu kernel, continue com <uri
link="#compiling">Compilando e instalando</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Compilando e instalando</title>
<body>

<p>
Agora que seu kernel está configurado, está na hora de compilá-lo e instalá-lo.
Saia da configuração e rode os comandos para compilar o kernel:
</p>

<pre caption="Compilando o kernel">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Quando o kernel terminar de compilar, copie a imagem do kernel para 
<path>/boot</path> (certifique-se de que está montada adequadamente no Pegasos).
</p>

<pre caption="Instalando o kernel">
<comment>troque &lt;versão-do-kernel&gt; com sua versão do kernel</comment>
(Apple/IBM)  # <i>cp vmlinux /boot/&lt;versão-do-kernel&gt;</i>
(Pegasos)    # <i>cp arch/ppc/boot/images/zImage.chrp /boot/&lt;versão-do-kernel&gt;</i>
</pre>

<p>
Agora continue com <uri link="#kernel_modules">Instalando módulos avulsos do
kernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Instalando módulos avulsos do kernel</title>
<subsection>
<title>Configurando os módulos</title>
<body>

<p>
Você deve listar os módulos que você quer carregar automaticamente em 
<path>/etc/modules.autoload.d/kernel-2.6</path>.
Você pode colocar opções adicionais aos módulos também se necessário.
</p>

<p>
Para ver todos módulos disponíveis, rode o seguinte comando usando o
<c>find</c>. Não se esqueça de substituir "&lt;versão do kernel&gt;" com a
versão do kernel que você acaba de compilar:
</p>

<pre caption="Vendo todos módulos disponíveis">
# <i>find /lib/modules/&lt;versão do kernel&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Por exemplo, para carregar o módulo <c>3c59x.o</c> automaticamente, edite o
arquivo <path>kernel-2.6</path> e coloque o nome do módulo nele.
</p>

<pre caption="Editando o /etc/modules.autoload.d/kernel-2.6">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Continue a instalação com <uri link="?part=1&amp;chap=8">Configurando
seu sistema</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternativa: Usando genkernel</title>
<body>

<p>
Se você estiver lendo esta seção, você escolheu usar nosso script
<c>genkernel</c> para configurar o kernel para você.
</p>

<p>
Agora que a árvore fonte de seu kernel está instalada, está na hora de compilar
seu kernel usando nosso script <c>genkernel</c> para construir um kernel
automaticamente para você. O <c>genkernel</c> funciona configurando um kernel
praticamente idêntico ao modo que nosso kernel do CD de instalação é
configurado. Isto significa que quando você usar o comando <c>genkernel</c> para
construir seu kernel, seu sistema irá geralmente detectar seu hardware na hora
da inicialização, como no CD de instalação. Dado que o genkernel não necessita
de nenhuma configuração manual, é uma solução ideal para aqueles usuários que
não se sentem confortáveis compilando seus próprios kernéis.
</p>

<p>
Agora vamos ver como usar o genkernel. Primeiro, faça emerge da ebuild do
genkernel:
</p>

<pre caption="Instalando o genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
A seguir, copie a configuração de kernel usada do CD de instalação para o local
onde o genkernel procura pela configuração de kernel padrão:
</p>

<pre caption="Copiando a configuração de kernel do CD de instalação">
# <i>zcat /proc/config.gz > /usr/share/genkernel/ppc/kernel-config-2.6</i>
</pre>
    
<p>
Se você estiver usando firewire ou USB para carregar, você precisará adicionar
módulos à initrd. Edite <path>/usr/share/genkernel/ppc/modules_load</path> e
mude <c>MODULES_FIREWIRE="ieee1394 ohci1394 sbp2"</c> para suporte a firewire ou
<c>MODULES_USB="usbcore ohci-hcd ehci-hcd usb-storage"</c> para suporte a USB.
</p>

<p>
Agora, compile sua fonte de kernel rodando <c>genkernel --genzimage all</c>.
Para Pegasos, nós precisaremos usar uma configuração diferente e criar uma
zImage ao invés do kernel vmlinux usado em máquinas Apple. Esteja alerta, já que
o <c>genkernel</c> compila um kernel que suporta quase todo hardware, esta
compilação pode demorar para terminar!
</p>

<p>
Note que, se sua partição onde o kernel deve estar localizado não usar ext2 ou
ext3 como sistema de arquivos, você pode ter que configurar o kernel manualmente
usando <c>genkernel --menuconfig --genzimage all</c> e adicionar suporte para
seu sistema de arquivos <e>dentro</e> do kernel (isto é, <e>não</e> como um
módulo). Usuários de EVMS2 ou LVM2 também devem passar <c>--evms2</c> ou
<c>--lvm2</c> como argumento.
</p>

<pre caption="Rodando genkernel">
# <i>genkernel --genzimage all</i>
</pre>

<pre caption="Rodando genkernel no Pegasos">
# <i>genkernel --genzimage --kernel-config=/usr/share/genkernel/ppc/Pegasos all</i>
</pre>

<p>
Quando o <c>genkernel</c> terminar, um kernel, um conjunto completo de módulos
e um <e>initial root disk</e> (initrd) serão criados. Nós iremos usar o kernel e
o initrd quando formos configurar um gerenciador de inicialização numa parte
mais adiantada deste documento. Escreva os nomes do kernel e initrd, uma vez que
você irá precisar deles quando for escrever o arquivo de configuração do
gerenciador de inicialização. A initrd será iniciada imediatamente após a
inicialização para fazer a auto-detecção de hardware (igual ao CD de
instalação), antes de seu sistema "de verdade" iniciar. Certifique-se de também
copiar os argumentos de inicialização necessários, você precisará deles para
uma inicialização de sucesso com o genkernel.
</p>

<pre caption="Verificando o nome da imagem de kernel criada e initrd">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

<p>
Se você quiser que seu sistema seja mais parecido com o CD de instalação você
deve, quando sua instalação do Gentoo terminar, instalar o <c>coldplug</c>.
Enquanto o initrd auto-detecta hardware que é necessário para carregar seu
sistema, o <c>coldplug</c> auto-detecta o resto.
</p>

<pre caption="Instalando e ativando coldplug">
# <i>emerge coldplug</i>
# <i>rc-update add coldplug boot</i>
</pre>

<p>
Agora continue com
<uri link="?part=1&amp;chap=8">Configurando seu sistema</uri>.
</p>

</body>
</section>

</sections>
