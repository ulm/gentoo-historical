<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pt_br/handbook/hb-net-advanced.xml,v 1.4 2006/01/24 18:04:50 vanquirius Exp $ -->

<sections>

<version>1.4</version>
<date>2005-12-22</date>

<section>
<title>Configuração avançada</title>
<body>

<p>
A variável <c>config_eth0</c> é o coração da configuração de uma interface.
É uma lista de instruções de alto nível para configurar a interface (<c>eth0</c>
neste caso). Cada comando na lista de instruções é feito seqüencialmente.
A interface é considerada OK se pelo menos um comando funcionar.
</p>

<p>
Aqui está uma lista de instruções internas.
</p>

<table>
<tr>
  <th>Comando</th>
  <th>Descrição</th>
</tr>
<tr>
  <ti><c>null</c></ti>
  <ti>Não fazer nada</ti>
</tr>
<tr>
  <ti><c>noop</c></ti>
  <ti>
    Se a interface estiver levantada e houver um endereço, abortar a
    configuração com sucesso
  </ti>
</tr>
<tr>
  <ti>um endereço IPv4 ou IPv6</ti>
  <ti>Adicionar o endereço à interfaceAdicionar o endereço à interface</ti>
</tr>
<tr>
  <ti>
    <c>dhcp</c>, <c>adsl</c> ou <c>apipa</c> (ou comando personalizado de um
    módulo de terceiros)
  </ti>
  <ti>
    Rodar o módulo que fornece o comando. Por exemplo, <c>dhcp</c> irá
    rodar um módulo que fornece DHCP, que pode ser tanto <c>dhcpcd</c>,
    <c>udhcpc</c>, <c>dhclient</c> ou <c>pump</c>.
  </ti>
</tr>
</table>

<p>
Se um comando falhar, você pode especificar uma alternativa. A alternativa tem
que bater com a estrutura de configuração exatamente.
</p>

<p>
Você pode encadear estes comandos juntamente. Aqui estão alguns exemplos do
mundo real.
</p>

<pre caption="Exemplos de configuração">
<comment># Adicionando três endereços IPv4</comment>
config_eth0=(
  "192.168.0.2/24"
  "192.168.0.3/24"
  "192.168.0.4/24"
)

<comment># Adicionando um endereço IPv4 e dois endereços IPv6</comment>
config_eth0=(
  "192.168.0.2/24"
  "4321:0:1:2:3:4:567:89ab"
  "4321:0:1:2:3:4:567:89ac"
)

<comment># Manter nosso endereço designado pelo kernel, a menos que a interface
# caia, neste caso obter outro via DHCP. Se DHCP falhar, então adicionar um
# endereço estático determinado por APIPA</comment>
config_eth0=(
  "noop"
  "dhcp"
)
fallback_eth0=(
  "null"
  "apipa"
)
</pre>

<note>
Quando usar o módulo <c>ifconfig</c> e adicionar mais que um endereço, aliases
de interface são criados para cada endereço adicional. Com os dois exemplos
acima, você obterá as interfaces <c>eth0</c>, <c>eth0:1</c> e <c>eth0:2</c>.
Você não pode fazer nada especial com essas interfaces, já que o kernel e outros
programas irão simplesmente tratar <c>eth0:1</c> e <c>eth0:2</c> como
<c>eth0</c>.
</note>

<impo>
A ordem da alternativa é importante! Se você não especificar a opção
<c>null</c>, o comando <c>apipa</c> só será rodado se o comando <c>noop</c>
falhar.
</impo>

<note>
<uri link="?part=4&amp;chap=3#apipa">APIPA</uri> e
<uri link="?part=4&amp;chap=3#dhcp">DHCP</uri> são discutidos mais tarde.
</note>

</body>
</section>
<section>
<title>Dependências de rede</title>
<body>

<p>
Scripts de init em <path>/etc/init.d</path> podem depender de uma interface
de rede específica ou só net. <c>net</c> pode ser definido em
<path>/etc/conf.d/rc</path> para significar diferentes coisas usando a variável
<c>RC_NET_STRICT_CHECKING</c>.
</p>

<table>
<tr>
  <th>Valor</th>
  <th>Descrição</th>
</tr>
<tr>
  <ti><c>none</c></ti>
  <ti>O serviço <path>net</path> é considerado como sempre funcionando</ti>
</tr>
<tr>
  <ti><c>no</c></ti>
  <ti>
    Basicamente significa que pelo menos um serviço <path>net.*</path> fora
    <path>net.lo</path> deve estar funcionando. Isto pode ser usado por usuários
    de notebooks que têm wifi e um nic estático, e só precisam de um funcionando
    para que o serviço net seja visto como funcionando.
  </ti>
</tr>
<tr>
  <ti><c>lo</c></ti>
  <ti>
    É igual a opção <c>no</c>, mas <path>net.lo</path> também é contado.
    Deve ser útil para pessoas que não se importam se alguma interface
    específica está funcionando durante o carregamento.
  </ti>
</tr>
<tr>
  <ti><c>yes</c></ti>
  <ti>
    TODAS interfaces de rede DEVEM estar funcionando para o serviço
    <path>net</path> ser considerado como funcionando.
  </ti>
</tr>
</table>

<p>
Mas e o <path>net.br0</path> dependendo de <path>net.eth0</path> e
<path>net.eth1</path>? <path>net.eth1</path> pode ser um dispositivo wireless ou
ppp que precisa de configuração antes de ser adicionado à ponte. Isto não pode
ser feito em <path>/etc/init.d/net.br0</path> já que é um link simbólico para
<path>net.lo</path>.
</p>

<p>
É resposta é criar sua própria função <c>depend()</c> em
<path>/etc/conf.d/net</path>.
</p>

<pre caption="dependência net.br0 em /etc/conf.d/net">
<comment># Você pode usar qualquer dependência (use, after, before) como encontradas em scripts atuais</comment>
depend_br0() {
  need net.eth0 net.eth1
}
</pre>

<p>
Para uma discussão mais detalhada sobre dependência, consulte a seção
<uri link="?part=2&amp;chap=4#doc_chap4">Escrevendo scripts de init</uri> no
Manual do Gentoo.
</p>

</body>
</section>

<section id="variable_name">
<title>Nomes de variáveis e valores</title>
<body>

<p>
Nomes de variáveis são dinâmicos. Normalmente seguem a estrutura
<c>variable_${interface|mac|essid|apmac}</c>. Por exemplo, a variável
<c>dhcpcd_eth0</c> tem os valores das opções de dhcpcd para eth0 e
<c>dhcpcd_essid</c> tem o valor das opções de dhcpcd quando qualquer interface
conecta-se ao ESSID "essid".
</p>

<p>
No entanto, não existe nenhuma regra rígida e pronta que diz que nomes de
interface devem ser ethx. Na verdade, muitas interfaces wireless têm nomes como
wlanx, rax bem como ethx. Também, algumas intercaces definidas por usuários como
pontes podem receber qualquer nome, como foo. Para tornar a vida mais
interessante, pontos de acesso (AP) de wireless podem ter nomes com caracteres
não alfa-numéricos neles - isto é importante porque você pode configurar
parâmetros de rede por ESSID.
</p>

<p>
O ponto negativo disto é que o Gentoo usa variáveis de bash para rede -
e o bash não pode usar nada fora caracteres ingleses alfa-numéricos. Para
contornar esta limitação nós trocamos cada caractere que não é inglês
alfa-numérico em um caractere <c>_</c>.
</p>

<p>
Outro ponto negativo do bash é o conteúdo das variáveis - alguns caracteres
precisam de escape. Isto pode ser feito colocando o caractere <c>\</c> na frente
do caractere que precisa ser escapado. A seguinte lista de caracteres precisa
ser escapada do seguinte jeito: <c>"</c>, <c>'</c> e  <c>\</c>.
</p>

<p>
Neste exemplo nós usados ESSID de wireless já que contêm o maior escopo de
caracteres. Nós usaremos a ESSID <c>My "\ NET</c>:
</p>

<pre caption="exemplo de nome de variável">
<comment># Isto funciona, mas o domínio é inválido</comment>
dns_domain_My____NET="My \"\\ NET"

<comment># A parte acima configura o domínio de dns para My "\ NET quando um cartão de wireless
# conecta-se a um AP cujo ESSID é My "\ NET</comment>
</pre>

</body>
</section>

</sections>
