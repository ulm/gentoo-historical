<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pt_br/handbook/hb-install-hppa-disk.xml,v 1.8 2005/09/06 20:58:12 vanquirius Exp $ -->

<sections>

<version>1.12</version>
<date>2005-08-02</date>

<section>
<title>Introdução a dispositivos de bloco</title>
<subsection>
<title>Dispositivos de bloco</title>
<body>

<p>
Iremos estudar os aspectos de manuseio de discos do Gentoo Linux e do Linux em
geral, incluindo sistemas de arquivos de Linux, partições e dispositivos de
bloco. Uma vez que você estiver familiar com o funcionamento de discos e
sistemas de arquivos, iniciaremos o processo de configuração de partições e
sistemas de arquivos para sua instalação do Gentoo Linux.
</p>

<p>
Para começar, iremos introduzir os <e>dispositivos de bloco</e>. O dispositivo
de bloco mais famoso é provavelmente aquele que representa o primeiro disco
rígido SCSI em um sistema Linux, chamado de <path>/dev/sda</path>.
</p>

<p>
Os dispositivos de bloco acima representam uma interface abstrata para o disco.
Programas de usuário podem usar os dispositivos de bloco para interagir com seu
disco sem preocupação se eles são IDE, SCSI ou outra coisa. O programa pode
simplesmente classificar o espaço de armazenagem no disco como um monte de
blocos de 512 bytes contíguos acessíveis aleatoriamente.
</p>

</body>
</subsection>
<subsection>
<title>Partições e slices (fatias)</title>
<body>

<p>
Embora seja teoricamente possível usar um disco inteiro para armazenar seu
sistema Linux, isto é quase nunca feito na prática. Ao invés disso, dispositivos
de bloco de discos são divididos em dispositivos de bloco menores e mais fáceis
de manusear. Na maior parte dos sistemas, são chamados de <e>partições</e>.
Outras arquiteturas usam uma técnica semelhante, chamada de <e>slices</e>.
</p>

</body>
</subsection>
</section>
<section>
<title>Desenhando um esquema de particionamento</title>
<subsection>
<title>Quantas e de que tamanho?</title>
<body>

<p>
O número de partições depende muito de seu ambiente. Por exemplo, se você tem
muitos usuários, você provavelmente deve ter seu <path>/home</path> separado
para aumentar a segurança e tornar backups mais fáceis. Se você estiver
instalando o Gentoo para funcionar como um servidor de e-mails, seu
<path>/var</path> deve ser separado, uma vez que todos e-mails são gravados
dentro de <path>/var</path>. Uma boa escolha de sistema de arquivos irá
maximizar sua performance. Servidores de jogos têm uma partição
<path>/opt</path> separada, uma vez que a maior parte de servidores de jogos são
instalados lá. A razão é semelhante à do <path>/home</path>: segurança e
backups. Você deve manter seu <path>/usr</path> grande: não só irá conter a
maior parte das aplicações, a árvore do Portage sozinha toma em torno de 500
Mbytes, excluindo as várias fontes que são gravadas nela.
</p>

<p>
Como você pode ver, muito depende do que você quer fazer. Partições ou volumes
separados têm as seguintes vantagens:
</p>

<ul>
<li>
  Você pode escolher o sistema de arquivos de melhor performance para cada 
  partição ou volume
</li>
<li>
  Seu sistema inteiro não irá ficar sem espaço se uma ferramenta defunta 
  estiver continuamente escrevendo arquivos em uma partição ou volume
</li>
<li>
  Se necessárias, verificações de sistemas de arquivos têm seu tempo reduzido,
  já que verificações múltiplas podem ser feitas em paralelo (embora esta
  vantagem seja maior com vários discos que com várias partições)
</li>
<li>
  A segurança pode ser melhorada ao montar algumas partições ou volumes como
  somente-leitura, nosuid (bits de setuid são ignorados), noexec (bits
  executáveis são ignorados), etc...
</li>
</ul>

<p>
No entanto, partições múltiplas têm uma grande desvantagem: se não forem
configuradas apropriadamente, você pode acabar com um sistema com muito espaço
livre em uma partição e nenhum em outra. Também existe um limite de 15 partições
para SCSI e SATA.
</p>

</body>
</subsection>
</section>
<section>
<title>Usando o fdisk em HPPA para particionar o seu disco</title>
<body>

<p>
Use o <c>fdisk</c> para criar as partições que você quer:
</p>

<pre caption="Particionando o disco">
# <i>fdisk /dev/sda</i>
</pre>

<p>
Máquinas HPPA usam as tabelas de partições DOS padrão do PC. Para criar uma nova
tabela de partições DOS, simplesmente use o comando <c>o</c>.
</p>

<pre caption="Criando uma tabela de partições DOS">
# <i>fdisk /dev/sda</i>

Command (m for help): <i>o</i>
Building a new DOS disklabel.
</pre>

<p>
O PALO (o gerenciador de inicialização para HPPA) precisa de uma partição
especial para funcionar. Você tem que criar uma partição de pelo menos 16MB no
começo de seu disco. O tipo de partição deve ser <e>f0</e> (Linux/PA-RISC boot).
</p>

<impo>
Se você ignorar essa informação e continuar sem a partição especial do PALO, seu
sistema irá parar de amar você e não irá iniciar. Também, se seu disco for maior
que 2GB, certifique-se que a partição de inicialização (boot) está nos primeiros
2GB de seu disco. O PALO não consegue ler um kernel depois do limite de 2GB.
</impo>

<pre caption="Um simples esquema de partições padrão">
# <i>cat /etc/fstab</i>
/dev/sda2    /boot   ext3    noauto,noatime   1 1
/dev/sda3    none    swap    sw               0 0
/dev/sda4    /       ext3    noatime          0 0

# <i>fdisk /dev/sda</i>

Command (m for help): <i>p</i>

Disk /dev/sda: 4294 MB, 4294816768 bytes
133 heads, 62 sectors/track, 1017 cylinders
Units = cylinders of 8246 * 512 = 4221952 bytes

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1               1           8       32953   f0  Linux/PA-RISC boot
/dev/sda2               9          20       49476   83  Linux
/dev/sda3              21          70      206150   82  Linux swap
/dev/sda4              71        1017     3904481   83  Linux
</pre>

<p>
Agora que suas partições foram criadas, você pode continuar com <uri
link="#filesystems">Criando sistemas de arquivos</uri>.
</p>

</body>
</section>
<section id="filesystems">
<title>Criando sistemas de arquivos</title>
<subsection>
<title>Introdução</title>
<body>

<p>
Agora que suas partições foram criadas, está na hora de colocar um sistema de
arquivos nelas. Se você não se importa em escolher o sistema de arquivos e está
contente com o que usamos como padrão neste manual, continue com <uri
link="#filesystems-apply">Aplicando um sistema de arquivos a uma partição</uri>.
Caso contrário, leia mais para aprender sobre os sistemas de arquivos
disponíveis...
</p>

</body>
</subsection>
<subsection>
<title>Sistemas de arquivos?</title>
<body>

<p>
Vários sistemas de arquivos estão disponíveis. Ext2, ext3, XFS e reiserfs estão
estáveis na arquitetura HPPA. Os outros são muito experimentais.
</p>

<p>
O <b>ext2</b> é o sistema mais testado e fiel ao Linux, mas não tem jornal de
meta-dados, o que significa que verificações rotineiras de sistemas de arquivo
ext2 podem levar bastante tempo. Existe agora uma razoável seleção de sistemas
de arquivos de nova geração com jornal que podem ter sua consistência verificada
rapidamente e que são geralmente preferíveis aos seus respectivos sistemas sem
jornal. Sistemas de arquivo com jornal previnem longas esperas quando você
carrega seu sistema e seu sistema de arquivos está em um estado inconsistente.
</p>

<p>
O <b>ext3</b> é a versão com jornal do sistema de arquivos ext2, fornecendo
jornal de meta-dados para recuperação rápida, fora outros modos de jornal
aprimorados como dados completos e dados ordenados. O ext3 é um sistema de
arquivos muito bom e confiável. Tem uma opção adicional de catalogar hashed
b-trees que permite alta performance em quase todas situações. Você pode ativar
este catálogo adicionando <c>-O dir_index</c> ao comando <c>mke2fs</c>. Para
resumir, o ext3 é um excelente sistema de arquivos.
</p>

<p>
O <b>ReiserFS</b> é sistema de arquivos baseado em B*-trees que tem uma
performance em geral muito boa e muito superior a tanto o ext2 quanto o ext3 na
hora de lidar com arquivos pequenos (de menos de 4k), freqüentemente com um
fator de 10x-15x. O ReiserFS também escala extremamente bem e tem jornal de
meta-dados. A partir do kernel 2.4.18+, o ReiserFS está sólido e pronto para ser
usado tanto como um sistema de arquivos genérico quanto para casos extremos como
a criação de sistemas de arquivos enormes, uso de muitos arquivos pequenos,
arquivos muito grandes e diretórios contendo dezenas de milhares de arquivos.
</p>

<p>
O <b>XFS</b> é um sistema de arquivos com jornal de meta-dados que vem com um
robusto conjunto de funções e é otimizado para escalabilidade. Só recomendamos
usar este sistema de arquivos em sistemas rodando Linux com equipamento SCSI de
ponta e/ou armazenamento em canais de fibra e fonte de energia sem interrupção.
Pelo fato de o XFS criar cachês agressivamente de dados em uso na memória RAM,
programas mal desenhados (que não tomam precauções na hora de escrever os
arquivos em disco, e existem muitos deles) podem perder uma grande quantidade de
dados se o sistema for desligado sem aviso.
</p>

<p>
O <b>JFS</b> é o sistema de arquivos com jornal de alta performance da IBM.
Recentemente tornou-se pronto para uso em produção e não há experiência
suficiente para comentar a favor ou contra sua estabilidade geral neste ponto.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>Aplicando um sistema de arquivos a uma partição</title>
<body>

<p>
Para criar um sistema de arquivos em uma partição ou volume, existem ferramentas
disponíveis para cada sistema de arquivos possível:
</p>

<table>
<tr>
  <th>Sistema de arquivos</th>
  <th>Comando de criação</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
Por exemplo, para ter a partição de inicialização (boot) (<path>/dev/sda2</path>
em nosso exemplo) em ext2 e a partição de root (<path>/dev/sda4</path> em nosso
exemplo) em ext3 (como em nosso exemplo), você faria:
</p>

<pre caption="Aplicando um sistema de arquivos a uma partição">
# <i>mke2fs /dev/sda2</i>
# <i>mke2fs -j /dev/sda4</i>
</pre>

<p>
Agora crie os sistemas de arquivos em suas partições recém-criadas.
</p>

</body>
</subsection>
<subsection>
<title>Ativando a partição de swap</title>
<body>

<p>
<c>mkswap</c> é o comando usado para iniciar partições de swap:
</p>

<pre caption="Criando uma assinatura de swap">
# <i>mkswap /dev/sda3</i>
</pre>

<p>
Para ativar a partição de swap, use <c>swapon</c>:
</p>

<pre caption="Ativando a partição de swap">
# <i>swapon /dev/sda3</i>
</pre>

<p>
Crie e ative o swap agora com os comandos mencionados acima.
</p>

</body>
</subsection>
</section>
<section>
<title>Montando</title>
<body>

<p>
Agora que suas partições foram iniciadas e possuem um sistema de arquivos, está 
na hora de montá-las. Use o comando <c>mount</c>. Não se esqueça de criar os
diretórios necessários de montagem para cada partição que você criou. Como
exemplo montamos a partição raiz (root) e de inicialização (boot):
</p>

<pre caption="Montando partições">
# <i>mount /dev/sda4 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/sda2 /mnt/gentoo/boot</i>
</pre>

<note>
Se você quiser que seu <path>/tmp</path> resida em uma partição separada,
certifique-se de mudar suas permissões depois de montá-la: <c>chmod 1777
/mnt/gentoo/tmp</c>. O mesmo vale para <path>/var/tmp</path>.
</note>

<p>
Agora iremos montar o sistema de arquivos proc (uma interface virtual com o
kernel) em <path>/proc</path>. Porém, primeiro iremos colocar nossos arquivos
nas partições.
</p>

<p>
Continue com <uri link="?part=1&amp;chap=5">Instalando os arquivos de instalação
do Gentoo</uri>.
</p>

</body>
</section>
</sections>
