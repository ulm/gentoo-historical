<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pt_br/handbook/hb-install-mips-bootloader.xml,v 1.6 2006/01/21 18:41:48 vanquirius Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>1.8</version>
<date>2006-01-19</date>

<section id="sgi">
<title>Máquinas Silicon Graphics -- Configurando o Arcboot</title>
<subsection>
<title>Instalando o arcboot</title>
<body>

<p>
Antigamente neste guia, nós mostramos a você como construir um kernel, e copiá-lo
para o cabeçalho de volume usando <c>dvhtool</c>. Existem dois principais problemas com este
sistema:
</p>

<ul>
  <li>Isto não é suportado em todos sistemas SGI</li>
  <li>Isto necessita de um cabeçalho de volume significantemente maior</li>
</ul>

<p>
Para poder inicializar a máquina, um gerenciador de inicialização, <c>arcboot</c> foi desenvolvido 
para o propósito. Ao invés de colocar o kernel diretamente no cabeçalho de volume, nós
deixamos em <path>/boot</path> (que reside em uma partição EXT2/3), e dizemos para o
<c>arcboot</c> (que fica no cabeçalho de volume ao invés do kernel) onde
encontrá-lo. Então nosso primeiro passo é fazer emerge de algumas ferramentas de que vamos precisar mais tarde...
</p>

<pre caption="Instalando as ferramentas necessárias">
# <i>emerge dvhtool arcboot</i>
</pre>

<p>
Isto deve ter instalado duas ferramentas, <c>arcboot</c> que fica no cabeçalho de
volume e carrega os kernéis para nós, e <c>dvhtool</c> que nos ajuda a
colocar o <c>arcboot</c> no cabeçalho de volume.
</p>
<p>
O binário mágico que nós queremos esconde-se em <path>/usr/lib/arcboot</path> -- em sistemas IP22
(Indy, Indigo 2, Challenge S), será chamado
<path>arcboot.ip22</path>.  Outros sistemas devem ser parecidos. Nós
primeiro copiamos o arquivo no cabeçalho de volume.
</p>

<pre caption="Instalando o arcboot no cabeçalho de volume">
# <i>dvhtool --unix-to-vh /usr/lib/arcboot/arcboot.ip?? arcboot</i>
</pre>

<p>
Nós então verificamos a presença do arquivo no cabeçalho de volume.
</p>

<pre caption="Verificando se o arcboot foi instalado corretamente">
# <i>dvhtool --print-volume-directory</i>
----- directory entries -----
Entry #0, name "linux", start 4, bytes 3262570
Entry #1, name "newlinux", start 6377, bytes 7619627
Entry #3, name "arcboot", start 21260, bytes 51448
#
</pre>

<note>
Você perceberá que em meu caso, eu tenho dois kernéis antigo lá,
<path>linux</path> e <path>newlinux</path>.  Isto é uma ressaca de antes de começarmos a
usar <c>arcboot</c>. Sua presença não importa -- contanto que o
<c>arcboot</c> esteja presente, tudo está bem.
</note>

</body>
</subsection>

<subsection>
<title>Configurando o arcboot</title>

<body>

<p>
Se você já configurou o Linux Loader (<c>lilo</c>) antes, você verá que o
<c>arcboot</c> emprega uma sintaxe parecida em seu arquivo de configuração. Esteja ciente
no entanto; o <c>arcboot</c> espera encontrar seu arquivo de configuração existente em uma 
partição EXT2/3 como <path>/etc/arcboot.conf</path>. O jeito mais fácil de fazer isso
é certificar-se que <path>/boot</path> é uma partição EXT2/3 e que há um
arquivo chamado <path>arcboot.conf</path> dentro do diretório
<path>/boot/etc</path> Um bom exemplo de configuração pode ser encontrado em
<path>/etc/arcboot.conf.sample</path>
</p>

<pre caption="Colocando arcboot.conf em seu lugar">
<comment>(Crie o diretório /boot/etc)</comment>
# <i>mkdir /boot/etc</i>

<comment>(Coloque nossa configuração no diretório alvo)</comment>
# <i>cp /etc/arcboot.conf.sample /boot/etc/arcboot.conf</i>

<comment>(Crie um link simbólico de volta para /etc)</comment>
# <i>ln -s /boot/etc/arcboot.conf /etc/arcboot.conf</i>

<comment>(... e um link simbólico em /boot apontando para si mesmo)</comment>
# <i>(cd /boot; ln -s . boot)</i>
</pre>

<p>
Você pode então editar <path>/etc/arcboot.conf</path> de acordo com sua preferência.
Pessoalmente, eu prefiro configurar duas imagens de kernel: <path>new</path>, uma imagem recém-construída
que pode ou não funcionar; e <path>working</path>, uma imagem de kernel
testada e confiável. Meu <path>arcboot.conf</path> parece-se um pouco com o seguinte.
</p>

<pre caption="Exemplo de arcboot.conf">
<comment># arcboot.conf</comment>
<comment>#</comment>
<comment># copyright 2002 Guido Guenther &lt;agx@sigxcpu.org&gt;</comment>
<comment>#</comment>
label=working
        image=/vmlinux
        append="root=/dev/sda3"

<comment># backup version</comment>
label=new
        image=/vmlinux-new
        append="root=/dev/sda3"
</pre>

<p>
Uma vez que estiver configurado, só há alguns pequenos ajustes que você precisa fazer 
dentro do PROM do SGI para fazer a mágica funcionar. Isto é coberto, não na próxima
seção (que é para servidores Cobalt), mas na seção seguinte
<uri link="#reboot">Reiniciando o sistema</uri>.
</p>

</body>
</subsection>
</section>

<section id="cobalt">
<title>Micro-servidores Cobalt -- Configurando o CoLo</title>
<subsection>
<title>Instalando o CoLo</title>
<body>

<p>
Em servidores Cobalt, as máquinas tem um firmware muito menos capaz instalado no
chip. O BOOTROM do Cobalt é primitivo, se comparado ao PROM do SGI, e tem várias
limitações sérias.
</p>

<ul>
  <li>
    Existe um limite de 675kB para kernéis. O tamanho atual do Linux 2.4 torna quase
    impossível fazer um kernel deste tamanho. O Linux 2.6 está totalmente fora
    de questão.
  </li>
  <li>
    Kernéis de 64-bits não são suportados pelo firmware padrão (embora sejam altamente
    experimentais em máquinas Cobalt no momento)
  </li>
  <li>
    A shell é básica, para falar bem
  </li>
</ul>

<p>
Para contornar estas limitações, um firmware alternativo, chamado
<uri link="http://www.colonel-panic.org/cobalt-mips/">CoLo</uri> (Cobalt
Loader) foi desenvolvido. É uma imagem de BOOTROM que pode ser ou carregada no
chip dentro do servidor Cobalt, ou carregado a partir de firmware existente.
</p>

<note>
Este guia irá ensiná-lo a configurar o CoLo para que seja carregado pelo
firmware padrão. Este é o único método verdadeiramente seguro, e recomendado para instalar o CoLo.
</note>

<warn>
Você pode, se quiser, carregar no servidor, e substituir totalmente
o firmware original -- todavia, você está totalmente por conta própria nesta
aventura. Se algo der errado, você precisará remover fisicamente o
BOOTROM e reprogramá-lo você mesmo com o firmware padrão. Se você não 
souber como fazer isso -- então <e>NÃO</e> carregue na sua máquina. Não aceitamos
qualquer responsabilidade por o que acontecer se você ignorar o aviso.
</warn>

<p>
Agora que acabamos com os avisos, vamos continuar a instalar o CoLo. Primeiro,
comece fazendo emerge do pacote.
</p>

<pre caption="Fazendo emerge do colo">
# <i>emerge colo</i>
</pre>

<p>
Com ele instalado (espero que você tenha lido as mensagens ;-) você deve poder olhar
dentro do diretório <path>/usr/lib/colo</path> para encontrar dois arquivos,
<path>colo-chain.elf</path>: o "kernel" para o firmware padrão carregar, e
<path>colo-rom-image.bin</path>: uma imagem de ROM para carregar no BOOTROM. Nós
começamos montando /boot e colocando uma cópia comprimida de
<path>colo-chain.elf</path> em <path>/boot</path> onde o sistema espera encontrá-la.
</p>

<pre caption="Colocando o CoLo em seu lugar">
# <i>gzip -9vc /usr/lib/colo/colo-chain.elf &gt; /boot/vmlinux.gz</i>
</pre>

</body>
</subsection>

<subsection>
<title>Configurando o CoLo</title>

<body>

<p>
Agora, quando o sistema começar a carregar, ele irá carregar o CoLo, que irá dividir um menu
no LCD traseiro. A primeira opção (e padrão que é tomado depois de mais ou menos 5
segundos) é carregar do disco rígido. O sistema deve então tentar montar a
primeira partição de Linux que encontrar, e rodar o script
<path>default.colo</path>.  A sintaxe é totalmente documentada na documentação do
CoLo (dê uma olhada em
<path>/usr/share/doc/colo-X.YY/README.shell.gz</path> -- onde X.YY é a versão
que você instalou), e é muito simples.
</p>

<note>
Apenas uma dica: quando instalando kernéis, eu normalmente crio duas imagens de kernel,
<path>kernel.gz.working</path> -- um kernel que funciona, e
<path>kernel.gz.new</path> -- um kernel que acabou de ser compilado. Você pode tanto 
usar links simbólicos para apontar para os kernéis "new" e "working", ou só renomear
as imagens de kernel.
</note>

<pre caption="Um default.colo básico">
<comment>#:CoLo:#</comment>
mount hda1
load /kernel.gz.working
execute root=/dev/hda3 ro console=ttyS0,115200
</pre>

<note>
O CoLo irá recusar-se a carregar um script que não comece com a linha <c>#:CoLo:#</c>.
Pense nisso como o equivalente a dizer  <c>#!/bin/sh</c> em scripts
de shell.
</note>

<p>
Também é possível fazer uma pergunta, como que kernel &amp; configuração que
você deseja carregar, com um tempo de espera padrão. Esta é a configuração que uso em
meu servidor Cobalt:
</p>

<impo>
Por favor note que você precisa usar CoLo v1.12 ou v1.13 para usar o comando 
<c>menu</c>. O seguinte exemplo não funcionará com o v1.11.
</impo>

<impo>
O comando <c>menu</c> foi trocado pelo comando <c>select</c> no CoLo v1.14.
Se você instalou uma versão mais nova manualmente, veja o
<path>menu.colo</path> no subdiretório <path>examples</path> da distribuição do
CoLo.
</impo>

<pre caption="Configuração baseada em menu">
<comment>#:CoLo:#</comment>

lcd "Montando hda1"
mount hda1
menu "Que Kernel?" 50 Working working New new
lcd "Carregando Linux" {menu-option}
load /kernel.gz.{menu-option}
lcd "Carregando..."
execute root=/dev/hda5 ro console=ttyS0,115200
boot
</pre>

<p>
O script acima pergunta ao usuário que kernel deseja carregar (tanto New
ou Working), então carrega <path>vmlinux.gz.new</path> ou
<path>vmlinux.gz.working</path> dependendo da seleção. Se uma seleção não for
feita dentro de 5 segundos (50/10 de um segundo) então ele carrega a primeira opção.
</p>
</body>

</subsection>
</section>

<section>
<title>Configurando o console serial</title>

<subsection>
<body>

<p>
A instalação do Linux como está agora carregará normalmente, mas presumirá
que você fará log-in em um terminal físico. Em máquinas Cobalt, isto é
particularmente ruim -- já que não há nada como um terminal físico.
</p>

<note>
Aqueles que tiverem o luxo de ter um framebuffer suportado podem pular esta seção
se desejarem.
</note>

<p>
Primeiro, inicie um editor e edite o <path>/etc/inittab</path>. Mais abaixo no
arquivo, você verá algo deste tipo:
</p>

<pre caption="Configuração de inittab">
<comment># CONSOLE SERIAL</comment>
<comment>#c0:12345:respawn:/sbin/agetty 9600 ttyS0 vt102</comment>

<comment># TERMINAIS</comment>
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux

<comment># O que fazer com a "Saudação de três dedos".</comment>
ca:12345:ctrlaltdel:/sbin/shutdown -r now

</pre>

<p>
Primeiro, descomente a linha <c>c0</c>. Por padrão, está configurado para usar um terminal
em uma taxa de baud de 9600 bps. Em servidores Cobalt, você pode mudar isso para 115200
para bater com a taxa de baud decidia pelo BOOT ROM. É assim que a seção parece-se
em minha máquina. Em uma máquina sem monitor (como servidores Cobalt), também recomendo
comentar as linhas de terminal local (de <c>c1</c> até <c>c6</c>)
já que tendem a não funcionar direito se não conseguem abrir
<path>/dev/ttyX</path>.
</p>

<pre caption="Exemplo de trecho de inittab">
<comment># CONSOLE SERIAL</comment>
c0:12345:respawn:/sbin/agetty 115200 ttyS0 vt102

<comment># TERMINAIS -- São inúteis em um headless qube</comment>
<comment>#c1:12345:respawn:/sbin/agetty 38400 tty1 linux</comment>
<comment>#c2:12345:respawn:/sbin/agetty 38400 tty2 linux</comment>
<comment>#c3:12345:respawn:/sbin/agetty 38400 tty3 linux</comment>
<comment>#c4:12345:respawn:/sbin/agetty 38400 tty4 linux</comment>
<comment>#c5:12345:respawn:/sbin/agetty 38400 tty5 linux</comment>
<comment>#c6:12345:respawn:/sbin/agetty 38400 tty6 linux</comment>
</pre>

<p>
Agora, finalmente... temos de dizer ao sistema que a porta serial local pode ser
confiada como um terminal seguro. O arquivo que precisamos cutucar é
<path>/etc/securetty</path>. Ele contém uma lista de terminais em que o sistema pode
confiar. Nós simplesmente colocamos mais duas linhas, permitindo que a linha serial seja 
usada para log-ins de <c>root</c>.
</p>

<pre caption="Ativando log-ins de root no console serial">
<comment>(/dev/ttyS0 -- o nome tradicional para a primeira porta serial)</comment>
# <i>echo 'ttyS0' >> /etc/securetty</i>

<comment>(Finalmente, o Linux também chama de /dev/tts/0 -- então adicionamos isto
também)</comment>
# <i>echo 'tts/0' >> /etc/securetty</i>
</pre>

</body>
</subsection>
</section>

<section id="reboot">
<title>Reiniciando o sistema</title>
<subsection>
<body>

<p>
Saia do ambiente de chroot e desmonte todas partições montadas. Então digite aquele comando mágico que você estava esperando: <c>reboot</c>.
</p>

<pre caption="Saindo do chroot, desmontando todas partições e reiniciando">
# <i>exit</i>
cdimage ~# <i>cd</i>
cdimage ~# <i>umount /mnt/gentoo/boot /mnt/gentoo/dev /mnt/gentoo/proc /mnt/gentoo</i>
cdimage ~# <i>reboot</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Configurando o PROM do MIPS</title>
<subsection>
<body>

<p>
Quando você houver reiniciando, vá para o <e>System Maintenance Menu</e> e selecione
<e>Enter Command Monitor</e> (<c>5</c>). Se você quiser testar sua nova instalação do 
Gentoo, você pode simplesmente rodar <c>boot -f &lt;kernel name&gt;</c>. Para fazer com 
que seu sistema carregue sua instalação do Gentoo permanentemente, você precisa ajustar 
algumas variáveis no PROM do MIPS:
</p>

<pre caption="Configurando o PROM para carregar o Gentoo">
1) Start System
2) Install System Software
3) Run Diagnostics
4) Recover System
5) Enter Command Monitor

Option? <i>5</i>
Command Monitor.  Type "exit" to return to the menu.

<comment>(&lt;dispositivo de root&gt; = A partição de root do Gentoo, por exemplo /dev/sda3)</comment>
&gt;&gt; <i>setenv OSLoadPartition &lt;dispositivo de root&gt;</i>

<comment>(Para listar os kernéis disponíveis, digite "ls")</comment>
&gt;&gt; <i>setenv OSLoader &lt;nome do kernel&gt;</i>
&gt;&gt; <i>setenv OSLoadFilename &lt;nome do kernel&gt;</i>

<comment>(Declare os parâmetros que você quer passar ao kernel)</comment>
&gt;&gt; <i>setenv OSLoadOptions &lt;parâmetros do kernel&gt;</i>

<comment>(Dê o local do Volume Header)</comment>
&gt;&gt; <i>setenv SystemPartition scsi(0)disk(1)rdisk(0)partition(8)</i>

<comment>(Automaticamente carregar o Gentoo)</comment>
&gt;&gt; <i>setenv AutoLoad Yes</i>

<comment>(Configurar o fuso horário)</comment>
&gt;&gt; <i>setenv TimeZone EST5EDT</i>

<comment>(Use o console serial - usuários de adaptador gráfico devem usar "g" ao invés de "d1" (um))</comment>
&gt;&gt; <i>setenv console d1</i>
</pre>

<p>
Agora você está pronto para aproveitar o Gentoo! Faça boot da sua instalação do Gentoo e 
termine com <uri link="?part=1&amp;chap=11">Completando sua instalação do Gentoo</uri>.
</p>

</body>
</subsection>
</section>
</sections>
