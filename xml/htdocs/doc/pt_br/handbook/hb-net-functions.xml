<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pt_br/handbook/hb-net-functions.xml,v 1.3 2006/01/25 22:08:00 vanquirius Exp $ -->

<sections>

<version>1.2</version>
<date>2005-12-22</date>

<section>
<title>Ganchos de função padrão</title>
<body>

<p>
Quatro funções podem ser definidas que serão chamadas em torno das operações
<c>start</c>/<c>stop</c>. As funções são chamadas com o nome da interface
primeiro para que uma função possa controlar múltiplos adaptadores.
</p>

<p>
Os valores de retorno para as funções <c>preup()</c> e <c>predown</c> devem ser
0 (sucesso) para indicar que a configuração ou desconfiguração da
interface pode continuar. Se <c>preup()</c> retornar um valor não-nulo, então
a configuração de interface será abortada. Se o <c>predown()</c> retornar um
valor não-nulo, então a interface não poderá continuar a
desconfiguração.
</p>

<p>
Os valores de retorno para as funções <c>postup()</c> e <c>postdown</c> são
ignorados, já que não há nada a fazer se eles indicarem falhas.
</p>

<p>
<c>${IFACE}</c> é configurado para a interface ser levantada/abaixada.
<c>${IFVAR}</c> é <c>${IFACE}</c> convertido para um nome de variável permitido
pelo bash
</p>

<pre caption="exemplos de função pre/post up/down">
preup() {
  <comment># Testar link na interface antes de levantá-la. Isto
  # só funciona com alguns adaptadores de rede e precisa de que o pacote
  # mii-diag esteja instalado.</comment>
  if mii-tool ${IFACE} 2> /dev/null | grep -q 'no link'; then
    ewarn "No link on ${IFACE}, aborting configuration"
    return 1
  fi

  <comment>Testar link na interface antes de levantá-la. Isto
  # só funciona com alguns adaptadores de rede e precisa de que o pacote
  # ethtool esteja instalado.</comment>
  if ethtool ${IFACE} | grep -q 'Link detected: no'; then
    ewarn "No link on ${IFACE}, aborting configuration"
    return 1
  fi

  <comment># Lembre-se de retornar 0 em caso de sucesso</comment>
  return 0
}

predown() {
  <comment># O padrão no script é testar por raiz de NFS e proibir
  # abaixar interfaces no caso. Note que se você especificar uma
  # função predown() você irá sobrepor a lógica. Aqui está, em
  # caso que você ainda queira...</comment>
  if is_net_fs /; then
    eerror "sistema de arquivos raiz está montado em rede -- ${IFACE} não pode ser parada"
    return 1
  fi

  <comment># Lembre-se de retornar 0 em caso de sucesso</comment>
  return 0
}

postup() {
  <comment># Esta função pode ser usada, por exemplo, para registrar com
  # um serviço de DNS dinâmico. Outra possibilidade seria
  # enviar/receber correio uma vez que a interface for configurada.</comment>
  return 0
}

postdown() {
  <comment># Esta função está aqui para ser completo... Não
  # pensei de nada interessante para fazer com ela ainda ;-)</comment>
  return 0
}
</pre>

</body>
</section>

<section>
<title>Ganchos de função para ferramentas wireless</title>
<body>

<note>
Isto não irá funcionar com WPA suplicante - mas as variáveis <c>${ESSID}</c> e
<c>${ESSIDVAR}</c> estão disponíveis na função <c>postup()</c>.
</note>

<p>
Duas funções podem ser definidas que irão ser chamadas em torno da
função associada. As funções são chamadas com o nome da interface primeiro
para que uma função possa controlar múltiplos adaptadores.
</p>

<p>
Os valores de retorno para uma função <c>preassociate()</c> devem ser 0
(sucesso) para indicar que a configuração ou desconfiguração da
interface pode continuar. Se <c>preassociate()</c> retornar um valor não-nulo,
então a configuração de interface será abortada.
</p>

<p>
O valor de retorno para a função <c>postassociate()</c> é ignorado
já que não há nada a fazer se indicar falha.
</p>

<p>
<c>${ESSID}</c> é configurado como o ESSID exato do AP a que você está se
conectando.
<c>${ESSIDVAR}</c> é <c>${ESSID}</c> convertido para um nome de variável
permitido pelo bash
</p>

<pre caption="funções pre/post association">
preassociate() {
  <comment># Abaixo são adicionadas duas variáveis de configuração leap_user_ESSID
  # e leap_pass_ESSID. Quando as duas são configuradas para o ESSID
  # sendo conectado, então nós rodamos o script CISCO LEAP</comment>

  local user pass
  eval user=\"\$\{leap_user_${ESSIDVAR}\}\"
  eval pass=\"\$\{leap_pass_${ESSIDVAR}\}\"

  if [[ -n ${user} &amp;&amp; -n ${pass} ]]; then
    if [[ ! -x /opt/cisco/bin/leapscript ]]; then
      eend "Para suporte a LEAP support, por favor faça emerge net-misc/cisco-aironet-client-utils"
      return 1
    fi
    einfo "Esperando autenticação de LEAP em \"${ESSID//\\\\//}\""
    if /opt/cisco/bin/leapscript ${user} ${pass} | grep -q 'Login incorrect'; then
      ewarn "Login falhou para ${user}"
      return 1
    fi
  fi

  return 0
}

postassociate() {
  <comment># Esta função está aqui para ser completo... Não
  # pensei de nada interessante para fazer com ela ainda ;-)</comment>

  return 0
}
</pre>

<note>
<c>${ESSID}</c> e <c>${ESSIDVAR}</c> não estão disponíveis nas funções
<c>predown()</c> e <c>postdown()</c>.
</note>

</body>
</section>

</sections>
