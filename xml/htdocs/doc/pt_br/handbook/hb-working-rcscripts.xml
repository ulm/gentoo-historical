<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pt_br/handbook/hb-working-rcscripts.xml,v 1.4 2005/06/12 01:19:12 vanquirius Exp $ -->

<sections>

<version>1.21</version>
<date>2005-05-29</date>

<section>
<title>Runlevels</title>
<subsection>
<title>Carregando seu sistema</title>
<body>

<p>
Quando você carregar seu sistema, você perceberá textos passarem. Se você prestar
atenção, você verá que o texto é o mesmo toda vez que você reinicia
seu sistema. A seqüência dessas ações é chamada de <e>seqüência de 
início</e> e é (mais ou menos) definida estaticamente.
</p>

<p>
Primeiro, seu gerenciador de inicialização irá carregar a imagem de kernel que você tem definida na
configuração do gerenciador na memória, depois falando para a CPU rodar o
kernel. Quando o kernel é carregado e rodado, ele inicializa todas estruturas e tarefas
específicas do kernel e roda o processo de <c>init</c>.
</p>

<p>
O processo então verifica que todos sistemas de arquivos (definidos em
<path>/etc/fstab</path>) estão montados e prontos para serem usados. Então ele executa
vários scripts localizados em <path>/etc/init.d</path>, o que inicia os 
serviços que você precisa para ter um sistema carregado com sucesso.
</p>

<p>
Finalmente, quando todos scripts são executados, o <c>init</c> ativa os terminais
(na maior parte só os consoles virtuais que estão escondidos através de <c>Alt-F1</c>,
<c>Alt-F2</c>, etc.) chamando um processo especial chamado <c>agetty</c>. 
Este processo irá então certificar-se que você poder se logar nos terminais 
rodando <c>login</c>.
</p>

</body>
</subsection>
<subsection>
<title>Scripts de init</title>
<body>

<p>
O <c>init</c> não roda os scripts em <path>/etc/init.d</path> aleatoriamente.
Mais ainda, ele não roda todos scripts em <path>/etc/init.d</path>,
só os que são ditos para ele executar. Ele decide que scripts executar
olhando em <path>/etc/runlevels</path>.
</p>

<p>
Primeiro, o <c>init</c> roda todos scripts de <path>/etc/init.d</path> que têm
links simbólicos dentro de <path>/etc/runlevels/boot</path>. Normalmente, ele irá
iniciar os scripts em ordem alfabética, mas alguns scripts tem informações sobre
dependências neles, avisando o sistema de que outro script deve ser rodado antes
dele poder ser iniciado.
</p>

<p>
Quando todos scripts de referência de <path>/etc/runlevels/boot</path> são executados,
o <c>init</c> continua carregando os scripts que têm um link simbólico para eles 
em <path>/etc/runlevels/default</path>. Novamente, ele usa a ordem alfabética
para decidir que script rodar primeiro, a menos que um script tenha informações
de dependências nele, caso em que a ordem é mudada para a fornecer uma
seqüência de inicialização válida.
</p>

</body>
</subsection>
<subsection>
<title>Como o init funciona</title>
<body>

<p>
Claro que o <c>init</c> decide tudo sozinho. Ele precisa de um
arquivo de configuração que especifica que ações devem ser tomadas. Este
arquivo de configuração chama-se <path>/etc/inittab</path>.
</p>

<p>
Se você lembra da seqüência de inicialização que acabamos de descrever, você irá lembrar-se
que a primeira ação do <c>init</c> é montar os sistemas de arquivos. Isto é definido
na seguinte linha do <path>/etc/inittab</path>:
</p>

<pre caption="A linha de inicialização de sistema em /etc/inittab">
si::sysinit:/sbin/rc sysinit
</pre>

<p>
A linha diz para o <c>init</c> que ele deve rodar <c>/sbin/rc sysinit</c> para
inicializar o sistema. O script <path>/sbin/rc</path> toma conta da
inicialização, o que permite que você diga que o <c>init</c> não faz tanto -- ele
delega tarefas de inicialização do sistema para outro processo.
</p>

<p>
Segundo, o <c>init</c> executou todos scripts que tinham links simbólicos em
<path>/etc/runlevels/boot</path>. Isto é definido na seguinte linha:
</p>

<pre caption="A inicialização do sistema, continuado">
rc::bootwait:/sbin/rc boot
</pre>

<p>
Novamente o script <c>rc</c> faz as tarefas necessárias. Note que a opção
dada para o <c>rc</c> (<e>boot</e>) é a mesma que o subdiretório de
<path>/etc/runlevels</path> que é usado.
</p>

<p>
Neste ponto o <c>init</c> verifica seu arquivo de configuração para ver que <e>runlevel</e> ele
deve rodar. Para decidir isso, ele lê a seguinte linha do
<path>/etc/inittab</path>:
</p>

<pre caption="A linha initdefault">
id:3:initdefault:
</pre>

<p>
Neste caso (que é o que a maioria dos usuários do Gentoo usam), o id do <e>runlevel</e>
é 3. Usando essa informação, o <c>init</c> verifica o que ele deverodar para iniciar o
<e>runlevel 3</e>:
</p>

<pre caption="As definições de runlevel">
l0:0:wait:/sbin/rc shutdown
l1:S1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
</pre>

<p>
A linha que define o level 3, novamente, usa o script <c>rc</c> para iniciar os
serviços (agora com o argumento <e>default</e>). Novamente note que o argumento do
<c>rc</c> é o mesmo que o subdiretório de <path>/etc/runlevels</path>.
</p>

<p>
Quando o <c>rc</c> termina, o <c>init</c> decide que consoles virtuais ele deve
ativar e que comandos precisam ser rodados em cada console:
</p>

<pre caption="A definição de consoles virtuais">
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
</pre>


</body>
</subsection>
<subsection>
<title>O que é um runlevel?</title>
<body>

<p>
Você viu que o <c>init</c> usa um esquema de numeração para decidir que
<e>runlevel</e> ele deve ativar. Um <e>runlevel</e> é um estado em que seu sistema
está rodando e contém uma coleção de scripts (scripts de runlevel ou
<e>initscripts</e>) que devem ser executados quando você entra ou sai de um runlevel.
</p>

<p>
No Gentoo, existem sete runlevels definidos: três runlevels internos, e quatro
definidos pelo usuário. Os runlevels internos são chamados de <e>sysinit</e>,
<e>shutdown</e> e <e>reboot</e> e fazem exatamente o que seus nomes implicam:
iniciar o sistema, desligar o sistema e reiniciar o sistema.
</p>

<p>
Os runlevels definidos por usuário são aqueles com um subdiretório
<path>/etc/runlevels</path> acompanhante: <path>boot</path>,
<path>default</path>, <path>nonetwork</path> e <path>single</path>. O runlevel
<path>boot</path> inicia todos serviços necessários ao sistema que os outros
runlevels usam. Os três runlevels restantes diferem em que serviços eles iniciam:
O <path>default</path> é usado para operações rotineiras, <path>nonetwork</path>
é usado em caso nenhuma conexão de rede é necessária, e <path>single</path> é
usado para quando você necessita consertar o sistema.
</p>

</body>
</subsection>
<subsection>
<title>Trabalhando com scripts de init</title>
<body>

<p>
Os scripts que o processo <c>rc</c> chama podem ser executados com os argumentos
<e>start</e>, <e>stop</e>, <e>restart</e>, <e>pause</e>, <e>zap</e>,
<e>status</e>, <e>ineed</e>, <e>iuse</e>, <e>needsme</e>, <e>usesme</e> ou
<e>broken</e>.
</p>

<p>
Para iniciar, parar ou reiniciar um serviço (e todos serviços dependentes),
<c>start</c>, <c>stop</c> e <c>restart</c> devem ser usados:
</p>

<pre caption="Iniciando o postfix">
# <i>/etc/init.d/postfix start</i>
</pre>

<note>
Só os serviços que precisam (<e>need</e>) do serviço são parados ou reiniciados.
Os outros serviços dependentes (aqueles que usam (<e>use</e>) o serviço mas não precisam
dele) não são tocados.
</note>

<p>
Se você quiser parar um serviço, mas não os serviços que dependem dele, você pode
usar o argumento <c>pause</c>:
</p>

<pre caption="Parando o postfix mas mantendo os serviços dependentes rodando">
# <i>/etc/init.d/postfix pause</i>
</pre>

<p>
Se você quiser ver que status um serviço tem (iniciado, parado, pausado, ...) você
pode usar o argumento <c>status</c>:
</p>

<pre caption="Informações de status do postfix">
# <i>/etc/init.d/postfix status</i>
</pre>

<p>
Se as informações de status disserem que o serviço está rodando, mas você sabe
que não, você pode voltar o status da informação para "parado" com o
argumento <c>zap</c>:
</p>

<pre caption="Voltando as informações de status para o postfix">
# <i>/etc/init.d/postfix zap</i>
</pre>

<p>
Para também pedir que dependências um serviço tem, você pode usar <c>iuse</c> ou
<c>ineed</c>. Com <c>ineed</c> você pode ver que serviços são realmente
necessários para o funcionamento correto do serviço. <c>iuse</c> por outro
lado mostra que serviços são usados pelo serviço, mas não são necessários
para o funcionamento correto.
</p>

<pre caption="Pedindo uma lista de todos serviços necessários do qual o postfix depende">
# <i>/etc/init.d/postfix ineed</i>
</pre>

<p>
De maneira parecida, você pode perguntar que serviços necessitam do serviço (<c>needsme</c>) ou podem
usá-lo (<c>usesme</c>):
</p>

<pre caption="Pedindo uma lista de todos serviços que precisam do postfix">
# <i>/etc/init.d/postfix needsme</i>
</pre>

<p>
Finalmente, você pode perguntar que dependências o serviço precisa que estão faltando:
</p>

<pre caption="Pedindo uma lista de dependências que estão faltando para o postfix">
# <i>/etc/init.d/postfix broken</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Trabalhando com o rc-update</title>
<subsection>
<title>O que é o rc-update?</title>
<body>

<p>
O sistema de inicialização do Gentoo usa uma árvore de dependências para decidir que serviço precisa ser
iniciado primeiro. Como isso é uma tarefa tediosa e não poderíamos esperar que nossos usuários tivessem
de fazê-lo manualmente, nós criamos ferramentas que facilitam a administração dos
runlevels e scripts de init.
</p>

<p>
Com o <c>rc-update</c> você pode adicionar ou remover scripts de init de um runlevel. A
ferramenta <c>rc-update</c> irá então pedir automaticamente para o script <c>depscan.sh</c>
reconstruir a árvore de dependências.
</p>

</body>
</subsection>
<subsection>
<title>Adicionando e removendo serviços</title>
<body>

<p>
Você já adicionou os scripts de init ao runlevel "default" durante a
instalação do Gentoo. Naquela hora você talvez não tinha idéia do que 
"default" era, mas agora você deve ter. O script <c>rc-update</c> necessita de 
um segundo argumento que define a ação: <e>add</e> (adicionar), <e>del</e> (remover) ou <e>show</e> (mostrar).
</p>

<p>
Para adicionar ou remover um script de init, apenas dê ao <c>rc-update</c> o argumento <c>add</c> (adicionar) ou
<c>del</c> (remover), seguido pelo script de init e runlevel. Por exemplo:
</p>

<pre caption="Removendo o postfix do runlevel default">
# <i>rc-update del postfix default</i>
</pre>

<p>
O comando <c>rc-update show</c> irá mostrar todos scripts de init disponíveis e
listar em que runlevels eles executam:
</p>

<pre caption="Recebendo informações dos scripts de init">
# <i>rc-update show</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Configurando serviços</title>
<subsection>
<title>Por que a necessidade de configuração adicional?</title>
<body>

<p>
Os scripts de init podem ser bem complexos. Portanto, não é realmente desejável fazer
com que os usuários editem o script de init diretamente, o que faria a tarefa mais
capaz de erros. No entanto, é importante poder configurar tal serviço. Por exemplo,
você pode querer dar mais opções ao serviço.
</p>

<p>
Um segundo motivo para ter a configuração fora do script de init é poder
atualizar os scripts de init sem medo de que mudanças na configuração
sejam desfeitas.
</p>

</body>
</subsection>
<subsection>
<title>O diretório /etc/conf.d</title>
<body>

<p>
O Gentoo fornece um jeito fácil de configurar um serviço: cada script de init
que pode ser configurado em um arquivo em <path>/etc/conf.d</path>. Por exemplo,
o script de init do apache2 (chamado de <path>/etc/init.d/apache2</path>) tem um
arquivo de configuração chamado de <path>/etc/conf.d/apache2</path>, que pode conter
as opções que você quer dar ao servidor do Apache 2 quando ele é iniciado:
</p>

<pre caption="Variável definida em /etc/conf.d/apache2">
APACHE2_OPTS="-D PHP4"
</pre>

<p>
Um arquivo de configuração contém variáveis e somente variáveis (como o
<path>/etc/make.conf</path>), tornando fácil a configuração de serviços. Também
permite a nos dar mais informações sobre as variáveis (como comentários).
</p>

</body>
</subsection>
</section>
<section>
<title>Escrevendo scripts de init</title>
<subsection>
<title>O que eu tenho que fazer?</title>
<body>

<p>
Não, escrever um script de init não é normalmente necessário já que o Gentoo fornece
scripts de init prontos para todos os serviços fornecidos. No entanto, talvez você queira
instalar um serviço sem usar o Portage, casto tal em que você provavelmente vai ter que
criar um script de init.
</p>

<p>
Não use o script de init fornecido pelo serviço se ele não for explicitamente
escrito para o Gentoo: os scripts de init do Gentoo não são compatíveis com os
scripts de init usados por outras distribuições!
</p>

</body>
</subsection>
<subsection>
<title>Arranjo</title>
<body>

<p>
O arranjo básico de um script de init é mostrado abaixo.
</p>

<pre caption="Arranjo básico de um script de init">
#!/sbin/runscript

depend() {
  <comment>(Informações de dependências)</comment>
}

start() {
  <comment>(Comandos necessários para iniciar o serviço)</comment>
}

stop() {
  <comment>(Comandos necessários para parar o serviço)</comment>
}

restart() {
  <comment>(Comandos necessários para reiniciar o serviço)</comment>
}
</pre>

<p>
Qualquer script de init <e>precisa</e> de uma função <c>start()</c> definida. Todas
outras seções são opcionais.
</p>

</body>
</subsection>
<subsection>
<title>Dependências</title>
<body>

<p>
Existem duas dependências que você pode definir: <c>use</c> e <c>need</c>. Como nós
já mencionamos, a dependência <c>need</c> é mais rígida que a dependência
<c>use</c>. Após o tipo de dependência você digitar o serviço de que 
você depende, ou a dependência <e>virtual</e>.
</p>

<p>
Uma dependência <e>virtual</e> é uma dependência que um serviço fornece, mas não é
somente fornecido por aquele serviço. Seu script de init pode depender de um logger
de sistema, mas existem muitos loggers de sistema disponíveis (metalogd, syslog-ng,
sysklogd, ...). Como você não pode precisar (<c>need</c>) de cada um deles (nenhum sistema
normal tem todos esses loggers de sistemas instalados e rodando) nós nos certificamos que
todos esses serviços fornecem (<c>provide</c>) uma dependência virtual.
</p>

<p>
Vamos ver as informações de dependência do serviço do postfix.
</p>

<pre caption="Informações de dependência do postfix">
depend() {
  need net
  use logger dns
  provide mta
}
</pre>

<p>
Como você pode ver, o serviço do postfix:
</p>

<ul>
  <li>
    precisa duma dependência (virtual) <c>net</c> (que é fornecida, por exemplo,
    por <path>/etc/init.d/net.eth0</path>)
  </li>
  <li>
    usa uma dependência (virtual) <c>logger</c> (que é fornecida, por exemplo,
    por <path>/etc/init.d/syslog-ng</path>)
  </li>
  <li>
    usa uma dependência (virtual) <c>dns</c> (que é fornecida, por exemplo,
    por <path>/etc/init.d/named</path>)
  </li>
  <li>
    fornece a dependência (virtual) <c>mta</c> (que é comum para todos servidores de
    e-mail)
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>Controlando a ordem</title>
<body>

<p>
Em alguns casos você pode não precisar de um serviço, mas que querer que seu serviço seja
iniciado antes (<c>before</c>) (ou depois, <c>after</c>) de outro serviço <e>se</e> ele estiver
disponível no sistema (note a condição - não é mais uma dependência)
<e>e</e> rodar no mesmo runlevel (note a condição - só serviços do
mesmo runlevel estão envolvidos). Você pode fornecer esta informação usando os
ajustes <c>before</c> e <c>after</c>.
</p>

<p>
Como um exemplo nós vemos as configurações do serviço portmap:
</p>

<pre caption="A função depend() no serviço portmap">
depend() {
  need net
  before inetd
  before xinetd
}
</pre>

<p>
Você também pode usar "*" para englobar todos serviços do mesmo runlevel,
embora isso não seja recomendável.
</p>

<pre caption="Rodando um script de init como o primeiro script do runlevel">
depend() {
  before *
}
</pre>

</body>
</subsection>
<subsection>
<title>Funções padrão</title>
<body>

<p>
Próximo da função do <c>depend()</c>,você também precisa definir a função
<c>start()</c>. Esta contém todos comandos necessários para
iniciar seu serviço. É recomendável usar as funções <c>ebegin</c> e
<c>eend</c> para informar o usuário sobre o que está acontecendo:
</p>

<pre caption="Exemplo de função start()">
start() {
  ebegin "Iniciando meu_serviço"
  start-stop-daemon --start --quiet --exec /caminho/para/meu_serviço
  eend $?
}
</pre>

<p>
Se você precisa de mais exemplos da função <c>start()</c>, por favor leia o código
fonte de scritps de init disponíveis no diretório <path>/etc/init.d</path>.
Para o <c>start-stop-daemon</c>, existe uma excelente página de man disponível se você
precisar de mais informações:
</p>

<pre caption="Lendo a página de man para o start-stop-daemon">
# <i>man start-stop-daemon</i>
</pre>

<p>
Outras funções que você pode definir são: <c>stop()</c> e <c>restart()</c>. Você
não é obrigado a definir essas funções! Nosso sistema de init é inteligente o suficiente para
preencher essas funções sozinho se você usar o <c>start-stop-daemon</c>.
</p>

<p>
A sintaxe do script de init do Gentoo é baseada em Bourne Again Shell (bash), então você é
livre para usar construções compatíveis com bash dentro de seu script de init.
</p>

</body>
</subsection>
<subsection>
<title>Adicionando opções personalizadas</title>
<body>

<p>
Se você quiser que seu script de init suporte mais opções que as que você já
encontrou, você deve adicionar a opção à variável <c>opts</c> variable, e
criar uma função com o mesmo nome da opção. Por exemplo, para suportar uma opção
chamada <c>restartdelay</c>:
</p>

<pre caption="Suportando a opção restartdelay">
opts="${opts} restartdelay"

restartdelay() {
  stop
  sleep 3    <comment># Esperar 3 segundos antes de começar de novo</comment>
  start
}
</pre>

</body>
</subsection>
<subsection>
<title>Variáveis de configuração de serviço</title>
<body>

<p>
Você não precisa fazer nada para suportar um arquivo de configuração em
<path>/etc/conf.d</path>: se seu script de init é executado, os seguintes arquivos
são automaticamente lidos (isto é, as variáveis estão disponíveis para uso):
</p>

<ul>
  <li><path>/etc/conf.d/&lt;seu script de init&gt;</path></li>
  <li><path>/etc/conf.d/basic</path></li>
  <li><path>/etc/rc.conf</path></li>
</ul>

<p>
Também, se seu script de init fornece uma dependência virtual (como <c>net</c>),
o arquivo associado com aquela dependência (como <path>/etc/conf.d/net</path>)
será lido também.
</p>

</body>
</subsection>
</section>
<section>
<title>Mudando o comportamento do runlevel</title>
<subsection>
<title>Quem pode tirar proveito disso?</title>
<body>

<p>
Muitos usuários de laptop conhecem a situação: em casa precisam iniciar o <c>net.eth0</c>,
enquanto você não quer iniciar o <c>net.eth0</c> quando você está fora (já
que não há rede disponível). Como o Gentoo você pode mudar o comportamento do runlevel de
acordo com sua vontade.
</p>

<p>
Por exemplo você pode criar um segundo runlevel "default" que você pode iniciar que
tem scripts de init associados. Você pode então selecionar na hora da inicialização
que runlevel default você quer usar.
</p>

</body>
</subsection>
<subsection>
<title>Usando o softlevel</title>
<body>

<p>
Antes de tudo, criamos o diretório runlevel para o segundo runlevel "default".
Como um exemplo, nós criamos o runlevel <path>offline</path>:
</p>

<pre caption="Criando um diretório de runlevel">
# <i>mkdir /etc/runlevels/offline</i>
</pre>

<p>
Adicione os scripts de init aos runlevels recentemente criados. Por exemplo, se
você quer ter uma cópia exata de seu runlevel <c>default</c> atual sem
o <c>net.eth0</c>:
</p>

<pre caption="Adicionando os scripts de init necessários">
<comment>(Copie todos serviços do runlevel default para o runlevel offline)</comment>
# <i>cd /etc/runlevels/default</i>
# <i>for service in *; do rc-update add $service offline; done</i>
<comment>(Remova serviços não desejados do runlevel offline)</comment>
# <i>rc-update del net.eth0 offline</i>
<comment>(Mostrar serviços ativos para o runlevel offline)</comment>
# <i>rc-update show offline</i>
<comment>(Exemplo parcial de saída)</comment>
               acpid | offline
          domainname | offline
               local | offline
            net.eth0 |
</pre>

<p>
Agora edite sua configuração de gerenciador de inicialização e adicione uma entrada para o
runlevel <c>offline</c>. Por exemplo, no <path>/boot/grub/grub.conf</path>:
</p>

<pre caption="Adicionando uma entrada para o runlevel offline">
title Gentoo Linux uso offline
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3 <i>softlevel=offline</i>
</pre>

<p>
Pronto, está tudo configurado. Se você iniciar seu sistema e selecionar a nova entrada
na inicialização, o runlevel <c>offline</c> será usado no lugar do
<c>default</c>.
</p>

</body>
</subsection>
<subsection>
<title>Usando o bootlevel</title>
<body>

<p>
Usar o <c>bootlevel</c> é completamente análogo ao <c>softlevel</c>. A única
diferença aqui é que você define um segundo runlevel de "boot" ao invés de um segundo
runlevel "default".
</p>

</body>
</subsection>
</section>
</sections>
