<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- Rev: 1.34 -->

<guide link = "/doc/vi/gnupg-user.xml" lang="vi">
<title>Hướng dẫn sử dụng GnuPG của Gentoo</title>
<author title="Author">
  <mail link="humpback@gentoo.org">Gustavo Felisberto</mail>
</author>
<author title="Editor">
  <mail link="zhen@gentoo.org">John P. Davis</mail>
</author>
<author title="Editor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Translator">
  <mail link="pclouds@gentoo.org">Nguyễn Thái Ngọc Duy</mail>
</author>

<abstract>
Tài liệu này hướng dẫn bạn những điều cơ bản để dùng GnuPG, một công
cụ bảo mật khi truyền thông.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.4</version>
<date>2006-02-15</date>

<chapter>
<title>Giới thiệu</title>
<section>
<title>Bạn sẽ được gì trong tài liệu này</title>
<body>

<p>
Tài liệu này giả định rằng bạn biết về mã hoá khoá công khai và chữ ký
điện tử. Nếu không, bạn nên xem <uri link="#doc_chap6">Mã hoá công
khai</uri> hoặc xem <uri
link="http://www.gnupg.org/(en)/documentation/guides.html">GnuPG
handbook</uri>, chương 2, rồi quay lại.
</p>

<p>
Tài liệu này sẽ hướng dẫn bạn cách cài đặt GnuPG, cách tạo khoá, cách
thêm khoá vào keyring, cách đưa khoá công khai lên key server và cách
ký, mã hoá, xác minh hoặc giải mã thông điệp bạn gửi hoặc nhận. Bạn
cũng sẽ học cách mã hoá tập tin trên máy tính bạn để không cho người
khác đọc.
</p>

</body>
</section>
<section>
<title>Cài đặt các phần mềm cần thiết</title>
<body>

<p>
Ở mức cơ bản, bạn cần <c>emerge gnupg</c>. Nhiều ứng dụng hiện nay có
hỗ trợ cho gpg, vậy bạn có lẽ nên thêm USE flag <e>crypt</e> vào biến
USE. Nếu bạn muốn email client có thể dùng gnupg, bạn có thể dùng bin
(<c>emerge pinepgp</c>), mutt (<c>emerge mutt</c>), Mozilla/Netscape
Mail, evolution (evolution là một chương trình tương tự GNOME
Microsoft Outlook) và KMail của KDE (KMail là một phần của gói
kdepim).
</p>

<p>
<c>Kgpg</c> có thể hấp dẫn bạn nếu bạn dùng KDE. Chương trình nhỏ này
cho phép bạn phát sinh khoá, nhập khoá từ tập tin ASCII, ký nhận khoá
được nhập, xuất khoá và vài tính năng khác.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Phát sinh khoá và thêm khoá vào keyring công cộng</title>
<section>
<title>Tạo khoá</title>
<body>

<p>
Để tạo khoá, chỉ cần chạy <c>gpg --gen-key</c>. Lần đầu bạn chạy, nó
sẽ tạo vài thư mục; chạy nó lần nữa nó sẽ tạo khoá:
</p>

<pre caption="Tiến trình tạo khoá" >
$ <i>gpg --gen-key</i>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.

Please select what kind of key you want:
   (1) DSA and ElGamal (default)
   (2) DSA (sign only)
   (4) ElGamal (sign and encrypt)
   (5) RSA (sign only)
   Your selection? <i>1</i>
</pre>

<p>
Ở đây bạn có thể chọn loại khoá bạn muốn dùng. Hầu hết người dùng sẽ
dùng mặc định DSA và ElGamal. Tiếp đến là kích thước khoá - nhớ là to
thì tốt nhưng đừng dùng lớn hơn 2048 với các khoá DSA/ElGamal. Thông
thường 1024 là quá đủ cho các email thông thường.
</p>

<p>
Sau kích thước là ngày hết hạn. Ở đây càng gần thì càng tốt, nhưng hầu
hết người dùng có thể dùng khoá không hết hạn hoặc hết hạn sau 2 hoặc
3 năm.
</p>

<pre caption="Chọn kích thước khoá" >
DSA keypair will have 1024 bits.
About to generate a new ELG-E keypair.
              minimum keysize is  768 bits
              default keysize is 1024 bits
    highest suggested keysize is 2048 bits
    What keysize do you want? (1024) <i>2048</i>
Requested keysize is 2048 bits       
Please specify how long the key should be valid.
         0 = key does not expire
 &lt;n&gt;= key expires in n days
 &lt;n&gt;w = key expires in n weeks
 &lt;n&gt;m = key expires in n months
 &lt;n&gt;y = key expires in n years
 Key is valid for? (0) <i>0</i>
Key does not expire at all
</pre>

<p>
Đây là lúc nhập vào thông tin cá nhân của bạn. Nếu bạn định gửi khoá
công khai cho người khác, bạn phải dùng địa chỉ email thật ở đây.
</p>

<pre caption="Nhập thông tin người dùng" >
Is this correct (y/n)? <i>y</i>
                        
You need a User-ID to identify your key; the software constructs the user id
from Real Name, Comment and Email Address in this form:
"Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;"

Real name: <i>John Doe</i>
Email address: <i>john@nowhere.someplace.flick</i>
Comment: <i>The Real John Doe</i>
You selected this USER-ID:
"John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? <i>O</i> 
You need a Passphrase to protect your secret key.    

Enter passphrase: 
</pre>

<p>
Giờ nhập passphrase hai lần. Nên dùng mật mã tốt. Nếu ai đó lấy được
khoá riêng tư của bạn và phá vỡ mật mã, họ có thể gửi thông điệp ký
tên "bạn" cho những người tin rằng email đó là từ bạn.
</p>

<p>
Sau đó, GnuPG sẽ phát sinh khoá của bạn. Hãy di chuyển chuột hoặc chơi
mp3 trong khi chạy để tăng tốc tiến trình vì như thế nó phát sinh dữ
liệu ngẫu nhiên.
</p>

</body>
</section>
<section>
<title>Phát sinh chứng nhận thu hồi khoá</title>
<body>

<impo>
Phần này rất quan trọng và bạn phải thực hiện nó <e>NGAY BÂY GIỜ</e>.
</impo>

<p>
Sau khi tạo khoá, bạn nên tạo chứng nhận thu hồi khoá. Làm thế cho
phép bạn thu hồi khoá trong trường hợp có gì đó không tốt xảy ra cho
khoá của bạn (vd, ai đó lấy được khoá và passphrase của bạn).
</p>

<pre caption="Phát sinh chứng nhận thu hồi khoá">
$ <i>gpg --list-keys</i>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;
sub  2048g/96D6CDAD 2002-12-08

$ <i>gpg --output revoke.asc --gen-revoke 75447B14</i>

sec  1024D/75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;

Create a revocation certificate for this key? <i>y</i>
Please select the reason for the revocation:   
  0 = No reason specified
  1 = Key has been compromised
  2 = Key is superseded
  3 = Key is no longer used
  Q = Cancel
(Probably you want to select 1 here)
Your decision? <i>1</i>
Enter an optional description; end it with an empty line:
&gt; <i>Someone cracked me and got my key and passphrase</i>
&gt;
Reason for revocation: Key has been compromised
Someone cracked me and got my key and passphrase
Is this okay? <i>y</i>

You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"
1024-bit DSA key, ID 75447B14, created 2002-12-08

ASCII armored output forced.
Revocation certificate created.

Please move it to a medium which you can hide away; if Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just in case
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!
</pre>

<p>
Lệnh <c>gpg --list-keys</c> liệt kê các khoá trong keyring công khai.
Bạn có thể dùng nó xem ID của khoá để tạo chứng nhận thu hồi khoá. Giờ
bạn nên chép tất cả vào thư mục .gnupg và chép chứng nhận thu hồi khoá
(dạng ASCII - <path>revoke.asc</path>) vào một nơi an toàn (hai đĩa
mềm hoặc một CD-R và cất kỹ). Nhớ rằng <path>revoke.asc</path> có thể
dùng để thu hồi khoá và làm cho khoá trở nên vô dụng trong tương lai.
</p>

<note>
Nếu bạn có vài địa chỉ email bạn muốn dùng với khoá, bạn có thể chạy
<c>gpg --edit-key YOUR_ID</c> và dùng lệnh <c>adduid</c>. Nó sẽ hỏi
bạn tên, email, ghi chú cho ID thứ hai bạn dùng.
</note>

</body>
</section>
<section>
<title>Xuất khoá</title>
<body>

<p>
Để xuất khoá, bạn gõ <c>gpg --armor --output john.asc --export
john@nowhere.someplace.flick</c>. Bạn có thể dùng ID khoá hoặc cái gì
khác để nhận dạng khoá (ở đây là địa chỉ email). John giờ đã có
<path>john.asc</path> để gửi cho bạn bè, hoặc đặt vào trang web để mọi
người liên lạc an toàn.
</p>

</body>
</section>
<section>
<title>Nhập khoá</title>
<body>

<p>
Để thêm tập tin vào keyring công khai, bạn phải nhập khoá vào, vậy hãy
kiểm tra fingerprint. Sau khi đã xác minh fingerprint, bạn nên kiểm
tra tính hợp lệ của nó.
</p>

<note>
Bạn nên cẩn thận khi xác minh khoá. Đây là một trong những điểm yếu
của cơ chế mã hoá công khai.
</note>

<p>
Giờ bạn sẽ thêm khoá công khai của Luis Pinto (bạn tôi) vào keyring
công khai của chúng ta. Sau khi gọi điện cho anh ta và hỏi anh ta
fingerprint của khoá của anh ta, tôi so sánh với kết quả của lệnh
<c>fpr</c>. Nếu khoá là đúng, tôi thêm nó vào keyring công khai. Trong
trường hợp đặc biệt này, khoá của Luis sẽ hết hạn va 1/12/2003 vậy tôi
được hỏi chữ ký của tôi trên khoá đó có hết hạn cùng thời điểm không.
</p>

<pre caption="Nhập và ký nhận khoá">
$ <i>gpg --import luis.asc</i>
gpg: key 462405BB: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
$ <i>gpg --list-keys</i>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;
sub  2048g/96D6CDAD 2002-12-08

pub  1024D/462405BB 2002-12-01 Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;
uid                            Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
sub  4096g/922175B3 2002-12-01 [expires: 2003-12-01]

$ <i>gpg --edit-key lmpinto@dei.uc.pt</i>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.


gpg: checking the trustdb
gpg: checking at depth 0 signed=0 ot(-/q/n/m/f/u)=0/0/0/0/0/1
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
sub  4096g/922175B3  created: 2002-12-01 expires: 2003-12-01
(1)  Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
(2). Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;

Command> <i>fpr</i>
pub  1024D/462405BB 2002-12-01 Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
     
Command> <i>sign</i>
Really sign all user IDs? <i>y</i>
                           
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB

     Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
     Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;

This key is due to expire on 2003-12-01.
Do you want your signature to expire at the same time? (Y/n) <i>Y</i>
How carefully have you verified the key you are about to sign actually belongs
to the person named above?  If you don't know what to answer, enter "0".

   (0) I will not answer. (default)
   (1) I have not checked at all.
   (2) I have done casual checking.
   (3) I have done very careful checking.

   Your selection? <i>3</i>
Are you really sure that you want to sign this key
with your key: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"

I have checked this key very carefully.

Really sign? <i>y</i>
              
You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"
1024-bit DSA key, ID 75447B14, created 2002-12-08

Command> <i>check</i>
uid  Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhe
uid  Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhe
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Trao đổi khoá với keyserver</title>
<section>
<title>Gửi khoá đến keyserver</title>
<body>

<p>
Giờ bạn đã có khoá của bạn, có lẽ cũng nên gửi khoá lên keyserver của
thế giới. Có rất nhiều keyserver trên thế giới và hầu hết trao đổi
khoá với nhau. Chúng ta sẽ gửi khoá của Luis đến server subkeys.pgp.net.
Server này dùng HTTP, vậy nếu bạn cần đặt proxy cho HTTP, đừng quên
thiết lập (<c>export http_proxy=http://proxy_host:port/</c>). Lệnh để
gửi khoá là: <c>gpg --keyserver subkeys.pgp.net --keyserver-options
honor-http-proxy --send-key 75447B14</c> trong đó <c>75447B14</c> là
ID. Nếu bạn không cần HTTP proxy, có thể bỏ <e>--keyserver-options
honor-http-proxy</e>.
</p>

<p>
Bạn cũng có thể gửi khoá của người khác mà bạn đã ký xác nhận lên
keyserver. Chúng ta có thể gửi khoá của Luis Pinto lên keyserver. Cách
này, những người đã tin tưởng khoá của bạn sẽ có thể dùng chữ ký của
bạn để tin tưởng khoá của Luis.
</p>

</body>
</section>
<section>
<title>Lấy khoá từ keyserver</title>
<body>

<p>
Giờ chúng ta sẽ tìm khoá của Gustavo Felisberto và thêm nó vào keyring
của John Doe.
</p>

<pre caption="Tìm khoá từ keyservers">
$ <i>gpg --keyserver subkeys.pgp.net --keyserver-options honor-http-proxy --search-keys humpback@felisberto.net</i>
gpg: searching for "humpback@felisberto.net" from HKP server subkeys.pgp.net
Keys 1-5 of 5 for "humpback@felisberto.net"
(1)Gustavo Felisberto (apt-get install anarchy) &lt;humpback@felisberto.net&gt; 1024
  created 2002-12-06, key B9F2D52A
(2)Gustavo Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1999-08-03, key E97E0B46
(3)Gustavo A.S.R. Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1998-12-10, key B59AB043
(4)Gustavo Adolfo Silva Ribeiro Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1998-08-26, key 39EB133D
(5)Gustavo Adolfo Silva Ribeiro Felisberto &lt;humpback@altavista.net&gt; 1024
  created 1998-06-14, key AE02AF87
  Enter number(s), N)ext, or Q)uit &gt;<i>1</i>
gpg: requesting key B9F2D52A from HKP keyserver subkeys.pgp.net
gpg: key B9F2D52A: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>

<p>
Như bạn thấy, server trả lời vài khoá đã gửi lên server, nhưng hiện
thời tôi chỉ dùng <e>B9F2D52A</e>. Vậy John Doe có thể lấy nó về và ký
nhận nếu anh ta tin cậy nó.
</p>

</body>
</section>
</chapter>

<chapter id="gpg-agent">
<title>Dùng GPG Agent</title>
<section>
<title>GPG Agent là gì?</title>
<body>

<p>
Có những trường hợp, khi làm việc với một số ứng dụng nhất định, bạn
phải dùng khoá GPG rất thường xuyên, cũng có nghĩa là bạn phải nhập
passphrase rất nhiều lần. Một số ứng dụng hỗ trợ cache (lưu tạm)
passphrase để dễ dùng hơn, tuy nhiên không thể chia sẻ passphrase
xuyên ứngdụng (có an toàn không?) và buộc ứng dụng phát minh lại bánh
xe mỗi lần.
</p>

<p>
GPG Agent là một ứng dụng độc lập mà GPG dùng để lưu tạm passphrase
bằng một cách chuẩn mực và an toàn. Nó cho phép ứng dụng dùng GPG đồng
thời: nếu bạn nhập passphrase khi làm việc với ứng dụng này, những ứng
dụng khác có thể dùng GPG mà không yêu cầu nhập passphrase lần nữa -
nếu GPG được cấu hình để làm thế, dĩ nhiên.
</p>

<p>
Gentoo cung cấp một vài ứng dụng GPG agent. <c>app-crypt/gpg-agent</c>
có thể được xem như một ứng dụng tham khảo và sẽ được dùng trong tài
liệu này.
</p>

</body>
</section>
<section>
<title>Cài đặt và cấu hình gpg-agent và pinentry</title>
<body>

<p>
Bạn nên cài đặt <c>gpg-agent</c>, dĩ nhiên, và thêm <c>pinentry</c>,
một ứng dụng hỗ trợ mà gpg-agent dùng để yêu cầu passphrase trong đồ
hoạ. Nó có ba loại: bật cửa sổ dùng Gtk+, Qt hoặc thư viện curses (tuỳ
vào USE flag bạn đặt khi cài đặt nó).
</p>

<pre caption="Cài đặt gpg-agent và pinentry">
# <i>emerge gpg-agent pinentry</i>
</pre>

<p>
Kế tiếp là tạo tập tin tên <path>~/.gnupg/gpg-agent.conf</path> và
nhập vào những dòng sau để định nghĩa timeout mặc định cho passphrase
(vd, 30 phút) và ứng dụng cần dùng khi cần nhập passphrase lần đầu
(vd, phiên bản Qt của pinentry).
</p>

<pre caption="Sửa ~/.gnupg/gpg-agent.conf">
pinentry-program /usr/bin/pinentry-qt
no-grab
default-cache-ttl 1800
</pre>

<p>
Giờ cấu hình GnuPG để dùng agent khi cần thiết. Sửa
<path>~/.gnupg/gpg.conf</path> và thêm dòng sau:
</p>

<pre caption="Cấu hình GnuPG dùng GPG Agent">
use-agent
</pre>

<p>
Giờ hệ thống của bạn (hầu như) đã có thể dùng GPG agent.
</p>

</body>
</section>
<section>
<title>Tự động khởi động GPG Agent</title>
<body>

<p>
Nếu bạn dùng môi trường đồ hoạ KDE, hãy sửa
<path>/usr/kde/3.x/env/agent-startup.sh</path> (toàn hệ thống)
hoặc <path>~/.kde/env/gpgagent.sh</path> (theo từng người dùng) và
thêm lệnh sau vào để KDE tự động khởi động GPG agent:
</p>

<pre caption="Đặt KDE tự động khởi động GPG agent">
eval "$(gpg-agent --daemon)"
</pre>

<p>
Nếu bạn dùng môi trường đồ hoạ khác, thêm dòng đó (giống như dòng ở
trên) vào <path>~/.xinitrc</path> (nếu dùng <c>startx</c>) hoặc
<path>~/.xsession</path> (nếu dùng XDM/GDM/KDM...).
</p>

</body>
</section>
</chapter>

<chapter>
<title>Làm việc với tài liệu</title>
<section>
<title>Mã hoá và ký tên</title>
<body>

<p>
Giả định bạn có một tập tin cần gửi cho Luis. Bạn có thể mã hoá, ký
tên, hoặc mã hoá và ký tên lên nó. Mã hoá nghĩa là chỉ có Luis có thể
mở được nó. Ký tên để cho Luis biết bạn là người tạo tài liệu đó.
</p>

<p>
Ba lệnh sau làm những điều đó, mã hoá, ký tên và mã hoá/ký tên.
</p>

<pre caption="Mã hoá và ký tên">
$ <i>gpg --output doc.gpg --encrypt --recipient lmpinto@dei.uc.pt doc_to_encrypt</i>
$ <i>gpg --output doc.gpg --sign --recipient lmpinto@dei.uc.pt doc_to_sign</i>
$ <i>gpg --output doc.gpg --encrypt --sign --recipient lmpinto@dei.uc.pt doc_to_encrypt_and_sign</i>
</pre>

<p>
Lệnh này sẽ tạo ra những tập tin nhị phân. Nếu bạn muốn tạo tập tin
văn bản ASCII, thêm <c>--clearsign</c> vào đầu lệnh.
</p>

</body>
</section>
<section>
<title>Giải mã và xác minh chữ ký</title>
<body>

<p>
Giả định bạn nhận được một tập tin được mã hoá. Dùng lệnh <c>gpg
--output document --decrypt encrypted_doc.gpg</c> để giải mã. Lệnh này
sẽ giải mã tài liệu và xác minh chữ ký (nếu có ký).
</p>

</body>
</section>
<section>
<title>Tính năng nâng cao</title>
<body>

<p>
Có một số tính năng hay trong GnuPG. Để tìm ra, hãy mở tập tin
<path>~/.gnupg/gpg.conf</path>. 
</p>

<pre caption="~/.gnupg/gpg.conf">
#keyserver x-hkp://subkeys.pgp.net
#keyserver-options auto-key-retrieve include-disabled include-revoked
</pre>

<p>
Tìm hai dòng trên và bỏ comment (bỏ dấu <c>#</c>). Với hai dòng này,
khi nào GnuPG cần kiểm tra chữ ký và không có trong kho khoá công
khai cục bộ, nó sẽ liên lạc với key server tại <uri 
link="http://subkeys.pgp.net:11371">subkeys.pgp.net</uri> và tìm cách lấy về từ đó.
</p>

<p>
Một tính năng khác là <c>gpg --refresh-keys</c>. Lệnh này sẽ liên lạc
với keyserver định nghĩa trong tập tin tuỳ chọn và cập nhật lại các
khoá công khai trong kho khoá cục bộ từ đó, tìm những khoá bị loại bỏ
(revoked key), những id mới, những chữ ký mới của khoá. Bạn có lẽ nên
chạy lệnh này một hoặc hai lần một tháng để nếu có ai đó loại bỏ khoá
của họ thì bạn sẽ được thông báo.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Giao tiếp GnuPG</title>
<section>
<title>Về chữ ký email</title>
<body>

<p>
95% thời gian bạn dùng GnuPG là dùg với email, ký tên/mã hoá những
thư từ cần gửi và đọc các thông báo được mã hoá/ký tên. Vì thế cũng
đơn giản khi tôi đề cập phần này đầu tiên.
</p>

<p>
Có hai cách để ký tên/mã hoá email với GnuPG, cách cũ và cách mới :).
Theo cách cũ, các thông báo sẽ dùng văn bản thô, không thể định dạng
và đính kèm tập tin chưa mã hoá/chưa ký tên, đây là ví dụ cách cũ:
</p>

<pre caption="Chữ ký văn bản thô">
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Test message

-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 6.5.8 for non-commercial use

iQA/AwUBP8461jMX0745gR7AEQIEOwCg011GbufXO3ED3FkLWXmfzg7xm1cAoJD0
0EU3Kd2EKNCqataEqM5qjpPs
=LchZ
-----END PGP SIGNATURE-----
</pre>

<p>
Thông báo dạng này không tốt lắm trong thế giới hiện đại ngày nay, nơi
chúng ta có GUI và trình đọc thư xinh đẹp có thể hiểu html.
</p>

<p>
Để giải quyết, MIME (Multipurpose Internet Mail Extensions) được tạo
ra. MIME thêm một trường vào email để cho trình đọc thư biết rằng toàn
bộ nội dung được ký tên và/hoặc mã hoá. Vấn đề với cách này là không
phải mọi trình đọc thư đều hỗ trợ. Và một số thậm chí còn phá hỏng nội
dung, Microsoft Outlook nổi tiếng trong việc không hoạt động với cách
này.
</p>

</body>
</section>
<section>
<title>Kgpg</title>
<body>

<p>
Kgpg là một GUI xinh xắn cho GnuPG. Trong màn hình chính, bạn có thể
dán vào văn bản bạn muốn ký tên hoặc mã hoá, và bạn cũng có thể dán
ASCII armored text cần giải mã.
</p>

<figure link="/images/kgpg1.png" short="kgpg main window"/>

<p>
Trong hình này, bạn có thể thấy cửa sổ chính của Kgpg với văn bản
ASCII armored được mã hoá trong đó. Từ đây bạn có thể giải mã nó (và
bạn sẽ cung cấp mật mã của bạn), mã hoá tập tin khác, dán văn bản mới
cần ký tên ...
</p>

<figure link="/images/kgpg2.png" short="kgpg key manage window"/>

<p>
Giờ bạn có thể thấy cửa sổ quản lý khoá. Từ đây bạn có thể thấy các
khoá "tốt" của John Doe của chúng tôi. Hai khoá được tin
cậy của Gustavo và Luis, và những khoá không tin cậy của Daniel
Robbins ( Tôi vẫn chưa gọi cho anh ta để kiểm tra fingerprint :) ).
</p>

</body>
</section>
<section>
<title>Seahorse</title>
<body>

<p>
Seahorse tạo GnuPG GUI cho Gnome. Phần này phát triển rất nhanh, nhưng
vẫn thiếu một số tính năng quan trọng có trong Kgpg hoặc phiên bản
dòng lệnh của GnuPG.
</p>

</body>
</section>
<section>
<title>Mozilla Enigmail</title>
<body>

<p>
Mozilla phiên bản từ 1.0 về sau có Enigmail, một plug-in cho email
client, khá dễ cấu hình. Chỉ cần vào Preferences
-&gt; Privacy &amp; Security -&gt; Enigmail. Nhập vào địa chỉ email
khoá của bạn ở đó.
</p>

<p>
Thu đến từ chữ ký pgp hoặc gpg không tin cậy sẽ được đánh dấu bút gãy.
Nếu có chữ ký tốt, nó sẽ xuất hiện bút thẳng. Enigmail có khả năng lấy
khoá từ keyserver, nhưng nếu có vấn đề, nó sẽ hiện những thông báo rất
lạ (bạn vẫn nhớ cách dùng dòng lệnh, phải không?)
</p>

</body>
</section>
<section>
<title>KMail</title>
<body>

<p>
Nếu bạn có đặt USE flag <c>crypt</c>, KMail sẽ được biên dịch hỗ trợ
gpg, và sẽ có thể mã hoá và giải mã các thư PGP inline tự động cũng như cho
phép mã hoá OpenPGP/MIME. Nếu bạn muốn giải mã thư OpenPGP/MIME, bạn
cần chạy GPG agent (xem <uri link="#gpg-agent">Dùng GPG Agent</uri>).
</p>

<p>
Bạn có thể xác minh nếu KMail được cấu hình đúng không bằng cách vào
<c>Settings</c>,<c>Configure KMail</c>, <c>Security</c>, <c>Crypto
Backends</c>. Bạn sẽ thấy backend dựa trên GpgME trong danhsách v2 có
thể chọn OpenPGP. Nếu không thể chọn, nhấn vào <c>Rescan</c>. Nếu vẫn
không được, KMail không hoạt động đúng.
</p>

</body>
</section>
<section>
<title>Sylpheed-Claws</title>
<body>

<p>
Đây là trình đọc thư của tôi. Nó <e>rất</e> nhanh cho dù với hộp thư
lớn, có những tính năng rất hay mà tôi muốn có trong trình đọc thư của
mình và hoạt động rất tốt với gpg. Vấn đề duy nhất là nó không hoạt
động với các chữ ký PGP cũ, vì thế khi bạn nhận những thư như thế, bạn
phải kiểm tra chữ ký bằng tay.
</p>

<p>
Để dùng khoá gpg với Sylpheed-Claws, chỉ cần vào phần cấu hình tài
khoản và chọn tab Privacy. Khi đã chọn khoá cần dùng, có lẽ hầu hết
người dùng sẽ sử dụng khoá mặc định này.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Mã hoá Khoá công khai</title>
<section>
<title>Cơ bản về Mã hoá Khoá công khai</title>
<body>

<p>
Khái niệm mã hoá khoá công khai bắt đầu từ Whitfield Diffie và Martine
Hellman năm 1976. Khi lần đầu tiên tôi nghe từ "khoá công khai" và "mã
hoá" trong cùng câu năm 93, tôi đã nghĩ không thể nào làm được điều
đó. Trong những ngay không có Internet (chà, có nhưng không phải cho
tôi), tôi vào thư viện công cộng và hỏi tìm sách về Mã hoá. Tôi phải
nói rằng lúc đó tôi 16, vì thế thư ký nhìn tôi hết sức ngạc nhiên và
dẫn tôi đến quầy sách cho trẻ con thay vì mã hoá (nơi bạn thay đổi ký
tự này bằng ký tự khác như kiểu mã hoá Caesar nổi tiếng hoặc ROT-13
(Tragbb Ebpxf, naq lbh xabj vg vf tbbq orpnhfr lbh ner ernqvat guvf
qbp.), (emerge rotix if you cannot read the preceding text)). Tôi rất
giận và bắt đầu tìm thông tin. Thật tốt khi sinh ra trong một gia đình
toán học, vì ngay sau khi nói chuyện với họ, tôi được giới thiệu vào
một thế giới mới.
</p>

<p>
Và giờ là một tí toán học:
</p>

<pre caption="Khái niệm toán học">
Định nghĩa:

1- Một số nguyên tố là một số nguyên lớn hơn 1 chỉ có thể chia hết cho
1 và chính nó (phần dư phải là 0).
Tám số nguyên đầu tiên là 2,3,5,7,11,13,17,19

Định lý (không chứng minh ở đây)
1- Với bất kỳ số nào không phải số nguyên tố, luôn luôn có thể tách
thành tích của các số nguyên tố, và tích này là duy nhất.
4=2*2
6=2*3
8=2*4=2*2*2
10=2*5
12=2*6=2*2*3

"Facts":
1- Rất dễ dàng nhân hai số nguyên tố lớn.
2- Rất khó tìm các hệ số số nguyên tốt của một số nguyên lớn.
</pre>

<p>
Nếu tôi đưa bạn số 35 và bảo bạn rằng số này là tích của hai số nguyên
tốt, rất dễ để tìm ra đó là 5 và 7. Nhưng nếu tôi đưa bạn số
1588522601, bạn sẽ mất rất nhiều thời gian (hoặc CPU) để tìm ra nó là
49811*31891. Và nếu số này thật sự rất rất lớn, công việc này trở nên
bất khả. Vậy nếu tôi đưa cho thế giới một số là tích của hai số, tôi
biết những điều mà không ai khác biết.
</p>

<p>
Đây là nền tảng của Mã hoá Khoá công khai (Public Key Cryptography -
PKC) hiện nay. Như trong ví dụ (thiếu thực tế), tôi đưa cho ai đó số
của tôi và ai đó sẽ dùng để giải mã thông điệp của tôi. Bất cứ ai có
thể xem thông điệp đã mã hoá, vì tôi là người duy nhất biết cách đọc
nó, bất cứ ai khác trước hết sẽ phải "tách" số lớn đó ra để có thể đọc
thông điệp, và "sự thật" không thể làm điều đó trong thời gian ngắn
(với cách hiện nay cùng với các máy tính nhanh nhất trên thế giới,
phải mất hàng ngàn năm để làm). Theo cách này hai số nguyên tố cực
lớn đó là KHOÁ RIÊNG TƯ, và số lớn, tích của hai số nguyên tố, là KHOÁ
CÔNG KHAI.
</p>

<p>
Thực tế, không phải 100% chính xác như vậy, nhưng đó là một ý tưởng
tốt cho người mới bắt đầu. Xem thông tin chi tiết hơn trên hack.gr
giao thức <uri
link="http://www.hack.gr/users/dij/crypto/overview/diffie.html">Diffie-Hellman</uri>.
Có thể tìm thấy nhiều thông tin hơn nữa trong các thư viện công cộng
và lấy một bản sao <uri link="http://www.cacr.math.uwaterloo.ca/hac/">"Handbook of Applied
Cryptography"</uri> của Alfred J. Menezes, Paul C. van Oorschot và Scott A.
Vanstone,  cuốn này cũng có miễn phí trên mạng ở một số trang.
</p>

<p>
Một trong những hệ quả là nếu bạn mã hoá thông điệp gửi đến tôi, và
bạn đánh mất thông điệp gốc chưa mã hoá, bạn sẽ không thể lấy lại
thông điệp gốc từ phiên bản đã mã hoá.
</p>

</body>
</section>
<section>
<title>Chữ ký</title>
<body>

<p>
Chúng ta đã xem cách người khác gửi thông điệp mã hoá nếu họ có khoá
công khai. Nhưng làm thế nào để tác giả của thông điệp thật sự là
người đúng tác giả? Nói cách khác, nếu tôi nhận được thư của bạn, làm
thế nào tôi biết rằng đó là bạn chứ không phải người khác mạo danh
bạn?
</p>

<p>
Nhớ rằng tôi đã nói PKC không đơn giản như tôi đã nói? Ý tưởng là khi
bạn mã hoá thông điệp gửi đến tôi, bạn ký vào nó bằng khoá riêng của
bạn để khi tôi nhận nó, tôi có thể dùng khoá công khai của bạn để kiểm
tra chữ ký của bạn và sau đó dùng khoá riêng của tôi để giải mã thông
điệp. Như bạn thấy, chúng ta không thể thực hiện điều đó trong cách
làm được mô tả ở trước.
</p>

<p>
Ngoài ra điều này cũng quan trọng, bạn không mã hoá trước khi ký tên.
Vậy bạn có thể tạo thông điệp ai cũng có thể đọc, nhưng đóng dấu "nhãn
hiệu" của bạn. Và nếu chỉ một ký tự bị thay đổi trong thông điệp, nó
sẽ bị phát hiện ra.
</p>

</body>
</section>
<section>
<title>Key Server và Signed Key</title>
<body>

<p>
Giả định tôi chưa hề liên lạc với bạn cho đến khi bạn gửi cho tôi một
thông điệp, làm thế nào tôi lấy khoá công khai của bạn, và làm thế nào
tôi biết đó là bạn?
</p>

<p>
Để giải quyết vấn đề, Key Server công khai được tạo ra. Khi bạn tạo
khoá (khoá công khai và khoá riêng), bạn gửi khoá công khai lên key
server. Sau đó mọi người nhận khoá của bạn từ đó. Điều này giải quyết
vấn đề tìm khoá. Nhưng làm sao tôi thật sự biết khoá đó là khoá của
tác giả? Một khái niệm mới được tạo ra để giải quyết vấn đề - ký tên
khoá:
</p>

<p>
Ký tên khoá nghĩa là, nếu bạn có khoá công khai của ai đó, và bạn biết
<e>chắc chắn</e> rằng đó đúng là khoá của người đó (đó là bạn thân của
bạn, ai đó bạn biết tận mặt ...) bạn có thể ký nhận khoá công khai đó
và gửi lên key server. Bằng cách đó bạn báo cho thế giới biết: "Đây là
khoá thuộc về người này". Theo cách này, những người có khoá công khai
của bạn và tin tưởng bạn có thể dùng những khoá mà bạn tin tưởng.
</p>

<p>
Có lẽ nó rối rắm, vậy hãy lấy một ví dụ thực
</p>

<p>
Tưởng tượng có ba người: John, Mary và Lisa. John là bạn  tốt của Mary
nhưng không biết Lisa; Lisa là bạn tốt của Mary nhưng không biết John.
Một ngày nó Lisa gửi cho John một lá thư có ký tên. John lấy khoá công
khai của Lisa từ keyservers và kiểm tra thông điệp, nếu mọi thứ đều
đúng, John biết rằng người đã tạo thông điệp cũng là người tạo khoá.
Nhưng làm thế nào tôi biết đó đúng là người đó?
</p>

<p>
John biết thư đó được ký bởi Mary, John có thể kiểm tra vì anh ta đã
có khoá của Mary và anh ta tin cậy khoá đó. Với chuỗi khoá tin cậy
này, anh ta kết luận rằng email John nhận được là của Lisa.
</p>

<p>
Giờ bạn đã có thể đọc tài liệu này, hãy quay lại đọc chương một và học
cách dùng gpg.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Lời cuối</title>
<section>
<title>Vài vấn đề</title>
<body>

<p>
Tôi có vài vấn đề với hình ành trong khoá. Hãy kiểm tra phiên bản bạn
dùng. Nếu bạn dùng GnuPG 1.2.1-r1 hoặc mới hơn, mọi thứ ổn. Nếu cũ
hơn, bạn có thể gặp vấn đề. Hầu hết keyserver không thích khoá có
hình, vậy tốt hơn bạn đừng thêm hình.
</p>

<p>
Phiên bản mới nhất của gnupg dường như không hoạt động với <c>gpg
--send-keys</c> được dùng để gưởi mọi khoá trong xâu khoá của bạn cho
keysever công khai.
</p>

</body>
</section>
<section>
<title>Những thứ không có ở đây</title>
<body>

<p>
<c>gpg</c> là một công cụ phức tạp, cho phép bạn làm nhiều hơn những
gì tôi trình bày ở đây. Tài liệu này dành cho người mới biết GnuPG. Để
có thông tin chi tiết hơn, hãy xem  <uri link="http://www.gnupg.org">GnuPG 
Website</uri>.
</p>

<p>
Tôi không viết về những công cụ khác như <c>pgp4pine</c>,
<c>gpgpine</c>, <c>evolution</c> và có lẽ các công cụ Windows khác,
nhưng bạn có thể mở rộng tài liệu này trong tương lai.
</p>

</body>
</section>
<section>
<title>Ghi công</title>
<body>

<p>
<uri link="http://www.gnupg.org">GnuPG Handbook</uri> của John Michael Ashley
là một cuốn sách rất tốt cho người mới bắt đầu.
</p>

<p>
Swift (Sven Vermeulen) vì đã buộc  tôi viết lại tài liệu này.
</p>

<p>
Mọi người trong đội #gentoo-doc, các bạn rất tuyệt.
</p>

<p>
Tiago Serra.
</p>

</body>
</section>
</chapter>
</guide>
