<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/vi/handbook/2005.1/hb-install-ppc-kernel.xml,v 1.1 2005/08/15 09:30:59 neysx Exp $ -->
<!-- $OldHeader: /var/www/www.gentoo.org/raw_cvs/gentoo/xml/htdocs/doc/en/handbook/2005.1/hb-install-ppc-kernel.xml,v 1.4 2005/08/08 13:24:46 swift Exp $ -->

<sections>

<version>5.1</version>
<date>2005-08-14</date>

<section>
<title>Múi giờ</title>
<body>

<p>
Trước hết bạn cần chọn múi giờ để hệ thống của bạn biết nó nằm ở nơi
nào. Hãy tìm múi giờ của bạn trong <path>/usr/share/zoneinfo</path>,
sau đó tạo một liên kết biểu tượng đến <path>/etc/localtime</path>
bằng <c>ln</c>:
</p>

<pre caption="Đặt thông tin múi giờ">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Giả sử bạn muốn dùng Asia/Saigon)</comment>
# <i>ln -sf /usr/share/zoneinfo/Asia/Saigon /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Cài đặt từ mã nguồn</title>
<subsection>
<title>Chọn kernel</title>
<body>

<p>
Lõi của mọi bản phân phối là Linux kernel. Nó là một lớp nằm giữa
các chương trình và phần cứng hệ thống. Gentoo cung cấp cho người dùng
vài bộ mã nguồn kernel. Danh sách đầy đủ kèm mô tả nằm trong  <uri
link="/doc/en/gentoo-kernel.xml">Gentoo Kernel Guide</uri>.
</p>

<p>
PPC có thể chọn <c>vanilla-sources</c> hoặc
<c>gentoo-sources</c> (cả hai là kernel 2.6). Kernel sau cho phép
thực hiện cài đặt không mạng. Ngoài ra còn có một bản kernel 2.6 đặc
biệt cho Pegasos: <c>pegasos-sources</c>.  Vậy hãy <c>emerge</c>
mã nguồn kernel vào:
</p>

<pre caption="Cài đặt mã nguồn kernel">
# <i>emerge gentoo-sources</i>
</pre>

<note>
Mã nguồn cho 2005.1 là <c>gentoo-sources-2.6.12-r6</c> và
<c>vanilla-sources-2.6.12.2</c>.
</note>

<p>
Hãy xem trong <path>/usr/src</path>, bạn sẽ thấy một symlink tên là
<path>linux</path> trỏ đến mã nguồn kernel của bạn. Chúng tôi giả định
rằng mã nguồn cài là <c>gentoo-source-2.6.12-r6</c>:
</p>

<pre caption="Xem liên kết mã nguồn kernel">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           22  Mar 18 16:23 /usr/src/linux -&gt; linux-2.6.12-gentoo-r6
</pre>

<p>
Nếu symlink không trỏ đến đúng mã nguồn kernel bạn chọn (chú ý
<c>linux-2.6.12-gentoo-r6</c> chỉ là ví dụ) bạn nên đổi lại:
</p>

<pre caption="Thay đổi liên kết mã nguồn kernel">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.6.12-gentoo-r6 linux</i>
</pre>

<p>
Giờ là lúc để cấu hình và biên dịch mã nguồn kernel. Bạn có thể dùng
<c>genkernel</c> để tạo ra một kernel tổng quát như kernel dùng bởi
CD Cài đặt. Tuy nhiên chúng tôi giải thích cách cấu hình "bằng tay" trước
vì nó là cách tốt nhất để tối ưu hệ thống của bạn.
</p>

<p>
Nếu bạn muốn cấu hình bằng tay hãy tiếp tục với <uri
link="#manual">Mặc định: Cấu hình bằng tay</uri>. Nếu bạn muốn dùng
<c>genkernel</c> bạn nên đọc <uri link="#genkernel">Thay thế: Dùng
genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Mặc định: Cấu hình bằng tay</title>
<subsection>
<title>Giới thiệu</title>
<body>

<p>
Cấu hình kernel bằng tay thường bị xem là một quá trình khó khăn mà
người dùng Linux phải thực hiện. Điều đó không đúng -- sau khi cấu
hình một vài kernel, bạn thậm chí không nhớ khó là gì ;)
</p>

<p>
Tuy nhiên, có một điều <e>đúng</e>: bạn phải hiểu hệ thống của bạn khi
bạn cấu hình kernel bằng tay. Hầu hết các thông tin có thể được thu
thập bằng cách emerge pciutils (<c>emerge pciutils</c>) chứa lên
<c>lspci</c>. Bạn sẽ dùng <c>lspci</c> trong môi trường chroot. Bạn có
thể an tâm bỏ qua những cảnh báo <e>pcilib</e> (như pcilib: cannot
open /sys/bus/pci/devices). Cách khác là chạy <c>lspci</c> từ môi
trường <e>không chroot</e>. Kết quả như nhau. Bạn có thể chạy
<c>lsmod</c> để xem CD Cài đặt dùng module nào (một gợi ý tốt cho
những module cần bật). Nơi khác để tìm đầu mối cần bật những thành
phần nào là xem message log của kernel sau khi khởi động. Gõ
<c>dmesg</c> để xem kernel message.
</p>

<p>
Giờ hãy chuyển vào thư mục mã nguồn kernel và chạy <c>make
menuconfig</c>. Nó sẽ khởi động menu cấu hình kernel.
</p>

<pre caption="Chạy menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Bạn sẽ được chào mừng bằng vô số các mục cấu hình. Chúng ta sẽ liệt kê
một số tùy chọn bạn phải kích hoạt (nếu không có Gentoo sẽ không hoạt
động, hoặc không hoạt động đúng với vài tinh chỉnh bổ sung).
</p>

</body>
</subsection>
<subsection>
<title>Kích hoạt các tùy chọn bắt buộc</title>
<body>

<p>
Đầu tiên hãy cho phép sử dụng code/driver thử nghiệm. Bạn cần nó, nếu
không vài code/driver quan trọng sẽ không xuất hiện:
</p>

<pre caption="Chọn code/driver thử nghiệm, General setup">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
General setup --->
  [*] Support for hot-pluggable devices
</pre>

<p>
Giờ vào phần <c>File Systems</c> và chọn những loại hệ tập tin bạn
dùng. <e>Đừng</e> biên dịch chúng là module, nếu không hệ thống Gentoo
sẽ không thể mount các phân vùng của bạn. Ngoài ra hãy chọn <c>Virtual
memory</c> và <c>/proc filesystem</c>. <e>Đừng</e> chọn <c>/dev file
system</c>:
</p>

<pre caption="Selecting necessary file systems">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [ ] /dev file system support (OBSOLETE)
    [*] Virtual memory file system support (former shm fs)

<comment>(Chọn những tùy chọn sau tùy theo hệ thống của bạn)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Nếu bạn dùng PPPoE để kết nối Internet hoặc dùng modem quay số, bạn sẽ
cần những tùy chọn sau trong kernel:
</p>

<pre caption="Chọn driver PPPoE cần thiết">
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Hai tùy chọn nén không phương hại nhưng không phải nhất thiết không
cần, cũng như thế với tùy chọn <c>PPP over Ethernet</c>, nó có thể chỉ
cần bởi <c>rp-pppoe</c> khi cấu hình để dùng PPPoE kernel mode.
</p>

<p>
Nếu bạn cần nó, đừng quên thêm hỗ trợ card mạng vào kernel.
</p>

<p>
Người dùng OldWorld và NewWorld sẽ muốn bật hỗ trợ HFS để có thể chép kernel đã
biên dịch vào phân vùng MacOS. Điều này áp dụng với máy NewWorld vì nó
cần phân vùng Apple_Bootstrap đặc biệt:
</p>

<pre caption="Kích hoạt hỗ trợ HFS">
File Systems ---&gt;
  [*] HFS Support
</pre>

<p>
Vào lúc này, kernel preemption vẫn chưa ổn định trên PPC và có thể gây
ra lỗi. Bạn <e>không nên</e> dùng tính năng này.
</p>

<pre caption="Bảo đảm Preemptible Kernel là Off">
Platform options ---&gt;
  [ ] Preemptible Kernel
</pre>

<p>
Nếu bạn khởi động từ Firewire, bạn cần bật những tùy chọn này. Nếu bạn
không muốn biên dịch thẳng vào, bạn cần nạp những module này và những phụ
thuộc của nó trong initrd.
</p>

<pre caption="Bật thiết bị firewire khi khởi động">
Device Drivers ---&gt;
  IEEE 1394 (FireWire) support ---&gt;
    &lt;*&gt; IEEE 1394 (FireWire) support
    &lt;*&gt;   OHCI-1394 support
    &lt;*&gt;   SBP-2 support (Harddisks etc.)
</pre>

<p>
Nếu bạn khởi động từ USB, bạn sẽ cần bật những tùy chọn này. Nếu bạn
không biên dịch thẳng, bạn sẽ cần nạp những module này và những phụ
thuộc của nó trong initrd.
</p>

<pre caption="Bật hỗ trợ USB khi khởi động">
Device Drivers ---&gt;
  USB support ---&gt;
    &lt;*&gt; Support for Host-side USB
    &lt;*&gt;   OHCI HCD support
    &lt;*&gt;   USB Mass Storage support
</pre>

<p>
Đừng tắt hỗ trợ framebuffer trong kernel vì nó cần khi khởi động. Nếu
bạn dùng chipset NVIDIA, bạn nên dùng OpenFirmware framebuffer. Nếu
bạn dùng chipset ATI, bạn nên chọn framebuffer dựa trên chipset
(Mach64, Rage128 hoặc Radeon).
</p>

<pre caption="Chọn driver Framebuffer">
Device Drivers ---&gt;
  Graphics support ---&gt;
    &lt;*&gt; Support for frame buffer devices
    [*] Open Firmware frame buffer device support
    &lt;*&gt; ATI Radeon display support
    &lt;*&gt; ATI Rage128 display support
    &lt;*&gt; ATI Mach64 display support
    Console display driver support ---&gt;
      &lt;*&gt; Framebuffer Console support
</pre>

<p>
Khi bạn hoàn tất cấu hình kernel, hãy tiếp tục với <uri 
link="#compiling">Biên dịch và cài đặt</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Compiling and Installing</title>
<body>

<p>
Bạn đã cấu hình kernel xong, đã đến lúc biên dịch và cài đặt kernel.
Hãy thoát trình cấu hình và chạy:
</p>

<pre caption="Biên dịch kernel">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Khi đã biên dịch kernel xong, hãy chép nó vào <path>/boot</path>. (nhớ
mount thích hợp trên Pegasos).
</p>

<pre caption="Cài đặt kernel">
<comment>thay 2.6.12 bằng phiên bản kernel của bạn</comment>
(Apple/IBM)  # <i>cp vmlinux /boot/kernel-2.6.12</i>
(Pegasos)    # <i>cp arch/ppc/boot/images/zImage.chrp /boot/kernel-2.6.12</i>
</pre>

<p>
Tốt nhất bạn nên chép tập tin cấu hình kernel vào <path>/boot</path>,
để phòng hờ :)
</p>

<pre caption="Sao lưu cấu hình kernel">
# <i>cp .config /boot/config-2.6.12-gentoo-r6</i>
</pre>

<p>
Giờ hãy tiếp tục với <uri link="#kernel_modules">Cài đặt các module
riêng lẻ</uri>.
</p>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Cài đặt các module kernel riêng lẻ</title>
<subsection>
<title>Cấu hình module</title>
<body>

<p>
Bạn nên liệt kê danh sách module bạn muốn nạp tự động trong
<path>/etc/modules.autoload.d/kernel-2.6</path>.  Bạn có thể thêm các
tùy chọn bổ sung cho các module bạn muốn luôn.
</p>

<p>
Để xem mọi module hiện có, hãy chạy lệnh <c>find</c>. Đừng quên thay
thế "&lt;phiên bản kernel&gt;" với phiên bản kernel bạn đã biên dịch:
</p>

<pre caption="Xem mọi module hiện có">
# <i>find /lib/modules/&lt;phiên bản kernel&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Ví dụ, để tự động nạp module <c>3c59x.o</c>, hãy sửa tập tin
<path>kernel-2.6</path> và nhập vào tên module.
</p>

<pre caption="Sửa /etc/modules.autoload.d/kernel-2.6">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Hãy tiếp tục cài đặt với <uri link="?part=1&amp;chap=8">Cấu hình hệ
thống</uri>.
</p>

</body>
</subsection>
</section>

<section id="genkernel">
<title>Thay thế: Dùng genkernel</title>
<body>

<p>
Nếu bạn đọc phần này, bạn đã chọn cách dùng <c>genkernel</c> để cấu
hình kernel cho bạn.
</p>

<p>
Giờ  mã nguồn kernel đã được cài đặt, đã đến lúc biên dịch kernel bằng
<c>genkernel</c> để tự động tạo kernel cho bạn. <c>genkernel</c> hoạt
động bằng cách cấu hình kernel gần như y hệt cách kernel của CD Cài
đặt
được cấu hình, hệ thống của bạn sẽ dò tìm mọi phần cứng lúc khởi động,
y như cách CD Cài đặt đã làm. Vì <c>genkernel</c> không cần cấu hình bằng
tay, nó là giải phải lý tưởng cho những người không quen với việc biên
dịch kernel.
</p>

<p>
Hãy xem dùng <c>genkernel</c> như thế nào. Trước hết hãy emerge
<c>genkernel</c>:
</p>

<pre caption="Cài đặt genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Kế tiếp, hãy chép tập tin cấu hình dùng bởi CD Cài đặt vào nơi
genkernel tìm cấu hình mặc định:
</p>

<pre caption="Chép tập tin cấu hình kernel của CD Cài đặt">
# <i>zcat /proc/config.gz &gt; /usr/share/genkernel/ppc/kernel-config-2.6</i>
</pre>

<p>
Nếu bạn dùng firewire hoặc USB để khởi động, bạn sẽ cần thêm các
module đó vào initrd. Hãy sửa
<path>/usr/share/genkernel/ppc/modules_load</path> và thay đổi
<c>MODULES_FIREWIRE="ieee1394 ohci1394 sbp2"</c> để có hỗ trợ firewire
hoặc <c>MODULES_USB="usbcore ohci-hcd ehci-hcd usb-storage"</c> để có
hỗ trợ USB.
</p>


<p>
Giờ hãy biên dịch kernel bằng <c>genkernel --genzimage all</c>.
Với Pegasos, bạn cần cấu hình khác và tạo zImage thay vì vmlinux
kernel dùng trên máy Apple. Tuy nhiên hãy cẩn thận, vì
<c>genkernel</c> biên dịch kernel hỗ trợ hầu hết mọi phần cứng, quá
trình biên dịch sẽ mất nhiều thời gian để hoàn tất!
</p>

<p>
Chú ý rằng, nếu phân vùng khởi động của bạn không dùng hệ tập tin ext2
hoặc ext3, bạn có thể cần cấu hình bằng tay với <c>genkernel --menuconfig 
--genzimage all</c> và thêm hỗ trợ hệ tập tin của bạn vào <e>trong</e> kernel
(<e>không</e> biên dịch dạng module). Người dùng EVMS2 hoặc LVM2 sẽ
muốn thêm tùy chọn <c>--evms2</c> hoặc <c>--lvm2</c> vào.
</p>

<pre caption="Chạy genkernel">
# <i>genkernel --genzimage all</i>
</pre>

<pre caption="Chạy Genkernel trên Pegasos">
# <i>genkernel --genzimage --kernel-config=/usr/share/genkernel/ppc/Pegasos all</i>
</pre>

<p>
Khi <c>genkernel</c> chạy xong, một kernel và một tập các module và
<e>initial root disk</e> (initrd) đã được tạo. Bạn sẽ dùng kernel và
initrd này khi cấu hình bootloader chốc nữa. Hãy viết ra tên kernel và
initrd vì bạn sẽ cần đến nó khi viết tập tin cấu hình bootloader.
initrd sẽ được dùng ngay sau khi khởi động để thực hiện dò tìm phần
cứng (y như CD Cài đặt) trước khi hệ thống "thật" của bạn được khởi động.
Nhớ ghi lại những tham số khởi động cần thiết, đây là yêu cầu để có
thể khởi động genkernel thành công.
</p>

<pre caption="Kiểm tra kernel image và initrd image đã tạo">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

<p>
Hãy thực hiện một trong những bước sau để làm cho hệ thống giống với
CD Cài đặt hơn -- hãy emerge <c>coldplug</c>. Trong khi initrd tự động dò
tìm phần cứng cần để khởi động hệ thống, <c>coldplug</c> tự động dò
tìm mọi thứ còn lại. <c>coldplug</c> có trong Package CD.
sau:
</p>

<pre caption="Cài và bật coldplug">
<comment>(Làm sau khi cài đặt, trong phần chỉ dẫn cài đặt GRP)</comment>
# <i>emerge -k coldplug</i>
# <i>rc-update add coldplug boot</i>
</pre>

<p>
Nếu bạn muốn hệ thống phản ứng lại với các sự kiện hotplug, bạn cần
cài đặt <c>hotplug</c>:
</p>

<pre caption="Cài và bật hotplug">
# <i>emerge hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>

<p>
Giờ hãy tiếp tục với <uri link="?part=1&amp;chap=8">Cấu hình hệ thống</uri>.
</p>
</body>
</section>
</sections>
