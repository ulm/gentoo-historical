<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/vi/handbook/hb-install-mips-disk.xml,v 1.1 2005/04/13 14:27:16 neysx Exp $ -->

<sections>

<version>1.6</version>
<date>2004-09-14</date>

<section>
<title>Giới thiệu Block Device</title>
<subsection>
<title>Thiết bị khối - Block Device</title>
<body>

<p>
Hãy xem các quan niệm về đĩa của Gentoo Linux và Linux nói chung, bao
gồm các loại hệ tập tin Linux, phân vùng và block device. Khi bạn đã
quen với đĩa và hệ tập tin, bạn sẽ được hướng dẫn cách thiết lập phân
vùng và hệ tập tin cho Gentoo Linux.
</p>

<p>
Để bắt đầu, chúng tôi sẽ giới thiệu <e>block device</e>. Block device
nổi tiếng nhất có lẽ là cái đại diện cho ổ đĩa SCSI thứ nhất
trong hệ thống, tên là <path>/dev/sda</path>.
</p>

<p>
Các block device kể trên được dùng để giao tiếp với đĩa. Các chương
trình có thể dùng các block device này để thao tác với đĩa mà không
cần biết đĩa bạn là IDE, SCSI hay cái gì khác. Chương trình chỉ cần
xem đĩa như một loạt các khối liên tục,mỗi khối 512 byte, có thể truy
cập ngẫu nhiên.
</p>

</body>
</subsection>
<subsection>
<title>Phân vùng - Partition</title>
<body>

<p>
Mặc dù theo lý thuyết chúng ta có thể sử dụng toàn bộ đĩa cứng làm một
vùng để chứa hệ thống Linux, Tuy nhiên trong thực tế thì không bao giờ
sử dụng như vậy, thay vào đó, ổ đĩa cứng sẽ được chia thành các thiết
bị khối nhỏ hơn, dễ quản lý hơn. Trên hệ thống x86, chúng được gọi là
các <e>phân vùng - partition</e>.
</p>

</body>
</subsection>
</section>
<section>
<title>Thiết kế bố cục phân vùng</title>
<subsection>
<title>Bao nhiêu và to cỡ nào?</title>
<body>

<p>
Số lượng phân vùng phụ thuộc nhiều vào môi trường của bạn. Ví dụ, nếu
bạn có rất nhiều người dùng, bạn sẽ muốn dùng một phân vùng riêng cho
<path>/home</path> để tăng cường an ninh và dễ sao lưu. Nếu bạn cài
đặt Gentoo làm mail server, bạn nên dùng phân vùng riêng cho
<path>/var</path> vì thư từ được lưu trong <path>/var</path>. Một lựa
chọn hệ tập tin đúng sẽ tăng cường hiệu năng của hệ thống. Game server
thường dùng phân vùng riêng cho <path>/opt</path> vì hầu hết các game
server được cài vào đây. Lý do tách riêng phân vùng cũng tương tự như
với <path>/home</path>: an toàn và sao lưu.
</p>

<p>
Như bạn thấy, nó phụ thuộc rất nhiều vào mục đích của bạn. Phân
vùng/volume rời có những ưu điểm sau:
</p>

<ul>
<li>
  Bạn có thể chọn loại hệ tập tin thích hợp nhất cho phân vùng/volume
  của bạn
</li>
<li>
  Toàn hệ thống không thể nào hết vùng lưu trữ nếu như một công cụ hư
  hỏng nào đó cứ liên tục ghi vào phân vùng/volume
</li>
<li>
  Nếu cần thiết, có thể tiết kiệm thời gian khi kiểm tra hệ tập tin,
  vì nhiều hệ tập tin có thể được kiểm tra đồng thời (mặc dù đây là ưu
  điểm khi có nhiều đĩa hơn là khi dùng nhiều phân vùng)
</li>
<li>
  Tăng cường an ninh bằng cách gắn kết các phân vùng dạng chỉ-đọc,
  nosuid (bỏ qua bit setuid), noexec (không thực thi).
</li>
</ul>

<p>
Tuy nhiên, dùng nhiều phân vùng có một bất lợi lớn: nếu cấu hình không
đúng, bạn có thể có một hệ thống quá dư đĩa ở một phân vùng và thiếu
đĩa trên phân vùng khác. Ngoài ra còn có giới hạn 15 phân vùng trên
SCSI và SATA.
</p>

</body>
</subsection>
</section>
<section>
<title>Phân hoạch đĩa cứng bằng fdisk trên MIPS</title>
<subsection>
<title>Tạo SGI Disk Label</title>
<body>

<p>
Mọi đĩa trong SGI đều cần một <e>SGI Disk Label</e>, tương tự như
disklabel của Sun và DOS -- Nó lưu thông tin về phân vùng đĩa. Việc
tạo SGI Disk Label sẽ tạo hai phân vùng đặc biệt trên đĩa:
</p>

<ul>
  <li>
    <e>SGI Volume Header</e> (phân vùng thứ 9): Phân vùng này rất quan
    trọng. Nó là nơi chứa kernel image. Để lưu kernel image, bạn sẽ
    phải sử dụng công cụ tên <c>dvhtool</c> để chép kernel image sang
    phân vùng này. Bạn sẽ có thể khởi động kernel sau đó từ phân vùng
    này bằng SGI PROM Monitor.
  </li>
  <li>
    <e>SGI Volume</e> (phân vùng thứ 11): Phân vùng này tương tự như
    phân vùng thứ ba trên Sun Disklabel "Toàn bộ đĩa". Nó phủ toàn bộ
    đĩa và không nên đụng đến nó. Nó được dùng cho mục địch đặc biệt
    chứ không phải để hỗ trợ PROM.
  </li>
</ul>

<warn>
SGI Volume Header <e>phải</e> bắt đầu tại cylinder 0. Thực hiện sai
bạn sẽ không thể khởi động từ đĩa.
</warn>

<p>
Sau đây là một ví dụ về <c>fdisk</c>. Hãy đọc và điều chỉnh cho phù
hợp với mình...
</p>

<pre caption="Tạo SGI Disklabel">
# <i>fdisk /dev/sda</i>

Command (m for help): <i>x</i>

Expert command (m for help): <i>m</i>
Command action
   b   move beginning of data in a partition
   c   change number of cylinders
   d   print the raw data in the partition table
   e   list extended partitions
   f   fix partition order
   g   create an IRIX (SGI) partition table
   h   change number of heads
   m   print this menu
   p   print the partition table
   q   quit without saving changes
   r   return to main menu
   s   change number of sectors/track
   v   verify the partition table
   w   write table to disk and exit

Expert command (m for help): <i>g</i>
Building a new SGI disklabel. Changes will remain in memory only,
until you decide to write them. After that, of course, the previous
content will be unrecoverably lost.

Expert command (m for help): <i>r</i>

Command (m for help): <i>p</i>

Disk /dev/sda (SGI disk label): 64 heads, 32 sectors, 17482 cylinders
Units = cylinders of 2048 * 512 bytes

----- partitions -----
Pt#     Device  Info     Start       End   Sectors  Id  System
 9:  /dev/sda1               0         4     10240   0  SGI volhdr
11:  /dev/sda2               0     17481  35803136   6  SGI volume
----- Bootinfo -----
Bootfile: /unix
----- Directory Entries -----

Command (m for help):
</pre>

<note>
Nếu đĩa bạn đã có SGI Disklabel rồi, fdisk sẽ không cho phép tạo cái
mới. Có hai cách. Một là tạo Sun hoặc MS-DOS disklabel, ghi vào đĩa,
và khởi động lại fdisk. Hai là xóa trắng bảng phân vùng bằng lệnh:
<c>dd if=/dev/zero of=/dev/sda bs=512 count=1</c>.
</note>

</body>
</subsection>
<subsection>
<title>Đọc SGI Volume Header để điều chỉnh kích thước phù hợp</title>
<body>

<p>
Giờ SGI Disklabel đã được tạo, bạn có thể tạo các phân vùng. Trong ví
dụ trên, chúng ta đã có hai phân vùng. Chúng là những phân vùng đặc
biệt như đã đề cập và không nên đụng đến chúng. Ruy nhiên, để cài đăt
Gentoo, chúng ta sẽ cần nạp nhiều kernel image trực tiếp tự volume
header, vì vẫn chưa có hỗ trợ SGI Bootloader trong Portage. Volume
header tự nó có thể chứa <e>tám</e> image với kích thước bất kỳ, tên
mỗi image tối đa tám ký tự.
</p>

<p>
Tiến trình mở rộng volume header không thật dễ hiểu lắm -- cần dùng
vài mẹo để thực hiện. Bạn không thể đơn giản xóa đi rồi thêm lại
volume header vì fdisk sẽ ứng xử rất kỳ lạ. Trong ví dụ bên dưới,
chúng ta sẽ tạo Volume header 50MB kèm với phân vùng /boot 50MB. Mô
hình của bạn có thể khác. Mô hình này chỉ mang tính chất minh họa thôi.
</p>

<pre caption="Đổi kích thước SGI Volume Header">
Command (m for help): <i>n</i>
Partition number (1-16): <i>1</i>
First cylinder (5-8682, default 5): <i>51</i>
 Last cylinder (51-8682, default 8682): <i>101</i>
<comment>(Chú ý fdisk chỉ cho phép phân vùng #1 được tạo lại, bắt đầu tại cylinder  tối thiểu là 5)</comment>
<comment>(Nếu bạn đã thử xóa và tạo lại SGI Volume theo cách này, bạn sẽ gặp vấn đề tương tự.)</comment>
<comment>(Trong ví dụ, chúng ta muốn có /boot 50MB, vì vậy chúng ta sẽ bắt đầu tại cylinder 51 (Volume Header cần bắt đầu tại cylinder 0, nhớ không?), và kết thúc tại cylinder 101, coi như được 50MB (+/- 1-5MB))</comment>

Command (m for help): <i>d</i>
Partition number (1-16): <i>9</i>
<comment>(Xóa phân vùng #9 (SGI Volume Header))</comment>

Command (m for help): <i>n</i>
Partition number (1-16): <i>9</i>
First cylinder (0-50, default 0): <i>0</i>
 Last cylinder (0-50, default 50): <i>50</i>
<comment>(Tạo lại phân vùng #9, kết thúc ngay trước phân vùng #1)</comment>
</pre>

</body>
</subsection>
<subsection>
<title>Mô hình phân vùng sau cùng</title>
<body>

<p>
Sau khi hoàn tất, bạn có thể yên tâm tạo các phân vùng còn lại theo ý
mình. Sau khi tạo mọi phân vùng, hãy đảm bảo rằng ID của phân vùng
swap là <c>82</c>, Linux Swap. Mặc định nó sẽ là <c>83</c>, Linux Native. 
</p>

<p>
Bây giờ bạn đã tạo xong phân vùng, hãy tiếp tục với <uri
link="#filesystems">Tạo các hệ tập tin</uri>.
</p>

</body>
</subsection>
</section>
<section id="filesystems">
<title>Tạo các hệ tập tin</title>
<subsection>
<title>Giới thiệu</title>
<body>

<p>
Sau khi đã tạo phân vùng, bạn cần cài hệ tập tin lên đó. Nếu bạn không
quan tâm loại hệ tập tin cần chọn và sẵn sàng dùng loại hệ tập tin mặc
định như trong sách này thì bạn có thể tiếp tục với <uri 
link="#filesystems-apply">Cài hệ tập tin lên phân vùng</uri>. Nếu
không hãy đọc tiếp để tìm hiểu về những loại phân vùng được hỗ trợ...
</p>

</body>
</subsection>
<subsection>
<title>Loại hệ tập tin?</title>
<body>

<p>
Linux kernel hỗ trợ nhiều loại hệ tập tin khác nhau. Ext2 và ext3 hoạt động
ổn định trên MIPS. Những loại khác vẫn còn đang thử nghiệm.
</p>

<p>
<b>ext2</b> là hệ điều hành cho Linux, nhưng nó không có metadata
journaling, nghĩa là việc kiểm tra hệ tập tin lúc khởi động có thể tốn
nhiều thời gian. Có nhiều hệ tập tin mới hơn với tính năng journal để
chọn lựa, tốn ít thời gian kiểm tra hơn so với những loại không có
tính năng journal. Các hệ tập tin journal giúp tránh đợi lâu lúc khởi
động khi hệ tập tin bạn không ổn định.
</p>

<p>
<b>ext3</b> là phiên bản ext2 với tính năng journal, giúp phục hồi
nhanh kèm theo những đặc điểm khác của tính năng journal như full
data, ordered data journaling. ext3 là một lựa chọn tốt và an toàn. Nó
còn có tùy chọn hashed b-tree index giúp tăng hiệu năng trong hầu hết
trường hợp. Nói tóm lại, ext3 là một lựa chọn xuất sắc.
</p>

<p>
<b>ReiserFS</b> là hệ tập tin dựa trên B*-tree có hiệu năng tốt và
vượt xa cả ext2 và ext3 khi xử lý các tập tin nhỏ (nhỏ hơn 4k), thường
vượt gấp 10-15 lần. ReiserFS còn hoạt động tốt trong nhiều điều kiện
khác nhau và hỗ trợ metada journal. Với các kernel 2.4.18 trở đi,
ReiserFS là lựa chọn tốt để sử dụng hằng ngày cũng như những trường
hợp cực kỳ như các hệ tập tin lớn, hệ tập tin chứa nhiều tập tin nhỏ,
những tập tin cực lớn và thư mục chứa hàng ngàn tập tin.
</p>

<p>
<b>XFS</b> là hệ tập tin hỗ trợ metadata journal và một tập tin năng
mạnh mẽ, được tối ưu để thích hợp với nhiều điều kiện khác nhau. Chúng
tôi chỉ khuyến khích dùng loại hệ tập tin này trên Linux với hệ thống
SCSI và/hoặc fibre channel kèm bộ nguồn bảo đảm không bị ngắt. Vì XFS
cache in-transit data trong bộ nhớ một cách đáng kể, những chương
trình không được thiết kế phù hợp (những chương trình không để ý các
phòng ngừa khi ghi tập tin vào đĩa - có vài chương trình như vậy) có
thể làm mất một lượng dữ liệu lớn nếu hệ thống bị ngừng đột ngột.
</p>

<p>
<b>JFS</b> hệ tập tin hiệu suất cao hỗ trợ journal của IBM.
<!--It has recently 
become production-ready -->Không có đủ các báo cáo tích cực cũng như tiêu cực về tính ổn định của nó vào thời điểm này.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>Cài hệ tập tin lên phân vùng</title>
<body>

<p>
Để tạo hệ tập tin trên phân vùng hoặc volume, cần có các công cụ cho
mỗi loại hệ tập tin:
</p>

<table>
<tr>
  <th>Hệ tập tin</th>
  <th>Lệnh tạo</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
Ví dụ, để định dạng phân vùng boot (<path>/dev/sda1</path> trong ví dụ
này) dùng loại ext2 và phân vùng gốc (<path>/dev/sda3</path> trong ví
dụ này) dùng loại ext3 (như trong ví dụ), bạn dùng:
</p>

<pre caption="Cài hệ tập tin lên phân vùng">
# <i>mke2fs /dev/sda1</i>
# <i>mke2fs -j /dev/sda3</i>
</pre>

<p>
Bây giờ tạo hệ tập tin cho những phân vùng của bạn.
</p>

</body>
</subsection>
<subsection>
<title>Kích hoạt phân vùng Swap</title>
<body>

<p>
<c>mkswap</c> là lệnh để khởi tạo phân vùng swap:
</p>

<pre caption="Khởi tạo phân vùng Swap">
# <i>mkswap /dev/sda2</i>
</pre>

<p>
Để kích hoạt sử dụng phân vùng swap, dùng <c>swapon</c>:
</p>

<pre caption="Kích hoạt phân vùng swap">
# <i>swapon /dev/sda2</i>
</pre>

<p>
Giờ hãy tạo và kích hoạt phân vùng swap của bạn.
</p>

</body>
</subsection>
</section>
<section>
<title>Mount (Gắn kết)</title>
<body>

<p>
Các phân vùng của bạn đã được tạo và định dạng xong. Giờ là lúc để gắn
các phân vùng này vào hệ thống. Hãy dùng lệnh <c>mount</c>. Đừng quên
tạo những thư mục mount cần thiết trước khi mount các phân vùng bạn đã
tạo vào. Như trong ví dụ, chúng tôi sẽ mount phân vùng gốc và phân
vùng boot:
</p>

<pre caption="Mount các phân vùng">
# <i>mount /dev/sda3 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/sda1 /mnt/gentoo/boot</i>
</pre>

<note>
Nếu bạn muốn <path>/tmp</path> nằm trên một phân vùng riêng, hãy đảm
bảo quyền truy cập của nó sau khi mount: <c>chmod 1777
/mnt/gentoo/tmp</c>. Điều này cũng cần được thực hiện với
<path>/var/tmp</path>.
</note>

<p>
Chúng ta cũng sẽ mount hệ tập tin proc (một hệ tập tin ảo để giao tiếp
với kernel) vào <path>/proc</path>. Nhưng trước hết  hãy cho các tập
tin vào phân vùng.
</p>

<p>
Hãy tiếp tục với <uri link="?part=1&amp;chap=5">Cài đặt các tập tin
cài đặt Gentoo</uri>.
</p>

</body>
</section>
</sections>
