<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/vi/handbook/hb-install-ppc-disk.xml,v 1.2 2005/04/28 09:36:58 neysx Exp $ -->

<sections>

<version>1.21</version>
<date>2004-12-12</date>

<section>
<title>Giới thiệu Block Device</title>
<subsection>
<title>Thiết bị khối - Block Device</title>
<body>

<p>
Hãy xem các quan niệm về đĩa của Gentoo Linux và Linux nói chung, bao
gồm các loại hệ tập tin Linux, phân vùng và block device. Khi bạn đã
quen với đĩa và hệ tập tin, bạn sẽ được hướng dẫn cách thiết lập phân
vùng và hệ tập tin cho Gentoo Linux.
</p>

<p>
Để bắt đầu, chúng tôi sẽ giới thiệu <e>block device</e>. Block device
nổi tiếng nhất có lẽ là những cái đại diện cho ổ đĩa IDE thứ nhất
trong hệ thống, tên là <path>/dev/hda</path>. Nếu bạn dùng ổ đĩa SCSI
thì ổ đĩa  đầu tiên là <path>/dev/sda</path>.
</p>

<p>
Các block device kể trên được dùng để giao tiếp với đĩa. Các chương
trình có thể dùng các block device này để thao tác với đĩa mà không
cần biết đĩa bạn là IDE, SCSI hay cái gì khác. Chương trình chỉ cần
xem đĩa như một loạt các khối liên tục,mỗi khối 512 byte, có thể truy
cập ngẫu nhiên.
</p>

</body>
</subsection>
<subsection>
<title>Phân vùng (Partition) và Slice</title>
<body>

<p>
Mặc dù theo lý thuyết chúng ta có thể sử dụng toàn bộ đĩa cứng làm một
vùng để chứa hệ thống Linux, Tuy nhiên trong thực tế thì không bao giờ
sử dụng như vậy, thay vào đó, ổ đĩa cứng sẽ được chia thành các thiết
bị khối nhỏ hơn, dễ quản lý hơn. Trên hệ thống x86, chúng được gọi là
các <e>phân vùng - partition</e>. Các kiến trúc khác dùng kỹ thuật
tương tự, gọi là <e>slice</e>.
</p>

</body>
</subsection>
</section>
<section>
<title>Thiết kế bố cục phân vùng</title>
<subsection>
<title>Mô hình phân vùng mặc định</title>
<body>

<p>
Nếu bạn không thích tự xác định mô hình phân vùng cho hệ thống của
mình, bạn có thể dùng mô hình phân vùng chúng tôi dùng trong tài liệu
này:
</p>

<table>
<tr>
  <th>Phân vùng NewWorld</th>
  <th>Phân vùng OldWorld</th>
  <th>Phân vùng Pegasos</th>
  <th>Hệ tập tin</th>
  <th>Kích thước</th>
  <th>Mô tả</th>
</tr>
<tr>
  <ti><path>/dev/hda1</path></ti>
  <ti>/dev/hda1</ti>
  <ti>(Không áp dụng)</ti>
  <ti>(Partition Map)</ti>
  <ti>32k</ti>
  <ti>Apple_partition_map</ti>
</tr>
<tr>
  <ti><path>/dev/hda2</path></ti>
  <ti>(Không cần)</ti>
  <ti>(Không áp dụng)</ti>
  <ti>(bootstrap)</ti>
  <ti>800k</ti>
  <ti>Apple_Bootstrap</ti>
</tr>
<tr>
  <ti><path>/dev/hda3</path></ti>
  <ti><path>/dev/hda2</path></ti>
  <ti><path>/dev/hda1</path></ti>
  <ti>(swap)</ti>
  <ti>512M</ti>
  <ti>Phân vùng Swap</ti>
</tr>
<tr>
  <ti><path>/dev/hda4</path></ti>
  <ti><path>/dev/hda3</path></ti>
  <ti><path>/dev/hda2</path></ti>
  <ti>ext3</ti>
  <ti>Phần đĩa còn lại</ti>
  <ti>Phân vùng gốc</ti>
</tr>
</table>

<note>
Những phân vùng được đặt tên như sau: <path>Apple_Driver43,
Apple_Driver_ATA, Apple_FWDriver, Apple_Driver_IOKit,
Apple_Patches</path>. Nếu bạn không định dùng MacOS 9, bạn có thể xóa
nó, vì MacOS X và Linux không cần chúng. Bạn có thể phải dùng
<c>parted</c> để xóa chúng, vì mac-fdisk chưa thể xóa chúng.
</note>

<p>
Nếu bạn muốn biết một phân vùng to cỡ nào, hoặc thậm chí cần bao nhiêu
phân vùng, hãy đọc tiếp. Nếu không hãy tiếp tục với <uri
link="#fdisk">Mặc định: Dùng mac-fdisk (Apple/IBM) để phân vùng đĩa</uri>
hoặc <uri link="#parted">Thay thế: Dùng parted (đặc biệt là Pegasos)
để phân vùng đĩa</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Bao nhiêu và to cỡ nào?</title>
<body>

<p>
Số lượng phân vùng phụ thuộc nhiều vào môi trường của bạn. Ví dụ, nếu
bạn có rất nhiều người dùng, bạn sẽ muốn dùng một phân vùng riêng cho
<path>/home</path> để tăng cường an ninh và dễ sao lưu. Nếu bạn cài
đặt Gentoo làm mail server, bạn nên dùng phân vùng riêng cho
<path>/var</path> vì thư từ được lưu trong <path>/var</path>. Một lựa
chọn hệ tập tin đúng sẽ tăng cường hiệu năng của hệ thống. Game server
thường dùng phân vùng riêng cho <path>/opt</path> vì hầu hết các game
server được cài vào đây. Lý do tách riêng phân vùng cũng tương tự như
với <path>/home</path>: an toàn và sao lưu.
</p>

<p>
Như bạn thấy, nó phụ thuộc rất nhiều vào mục đích của bạn. Phân
vùng/volume rời có những ưu điểm sau:
</p>

<ul>
<li>
  Bạn có thể chọn loại hệ tập tin thích hợp nhất cho phân vùng/volume
  của bạn
</li>
<li>
  Toàn hệ thống không thể nào hết vùng lưu trữ nếu như một công cụ hư
  hỏng nào đó cứ liên tục ghi vào phân vùng/volume
</li>
<li>
  Nếu cần thiết, có thể tiết kiệm thời gian khi kiểm tra hệ tập tin,
  vì nhiều hệ tập tin có thể được kiểm tra đồng thời (mặc dù đây là ưu
  điểm khi có nhiều đĩa hơn là khi dùng nhiều phân vùng)
</li>
<li>
  Tăng cường an ninh bằng cách gắn kết các phân vùng dạng chỉ-đọc,
  nosuid (bỏ qua bit setuid), noexec (không thực thi).
</li>
</ul>

<p>
Tuy nhiên, dùng nhiều phân vùng có một bất lợi lớn: nếu cấu hình không
đúng, bạn có thể có một hệ thống quá dư đĩa ở một phân vùng và thiếu
đĩa trên phân vùng khác. Ngoài ra còn có giới hạn 15 phân vùng trên
SCSI và SATA.
</p>

</body>
</subsection>
</section>
<section id="fdisk">
<title>Mặc định: Dùng mac-fdisk (Apple/IBM) để phân vùng đĩa</title>
<body>

<p>
Ta sẽ tạo phân vùng dùng <c>mac-fdisk</c>:
</p>

<pre caption="Khởi động mac-fdisk">
# <i>mac-fdisk /dev/hda</i>
</pre>

<p>
Trước hết hãy xóa những phân vùng cũ để có chỗ trống cho các phân vùng
Linux. Dùng <c>d</c> trong <c>mac-fdisk</c> để xóa những phân vùng đó.
Nó sẽ hỏi bạn số phân vùng cần xóa. Thường phân vùng đầu tiên trên
NewWorld (Apple_partition_map) không thể bị xóa.
</p>

<p>
Sau đó hãy tạo phân vùng <e>Apple_Bootstrap</e> bằng lệnh <c>b</c>. Nó
se hỏi bắt đầu ở khối nào. Nhập vào số phân vùng rỗng đầu tiên, theo
sau bởi <c>p</c>. Trong ví dụ là <c>2p</c>.
</p>

<note>
Phân vùng này <e>không</e> phải là phân vùng "khởi động". Nó không hề
được dùng bởi Linux; bạn không cần đặt bất kỳ hệ tập tin nào vào đó và
bạn không bao giờ mount nó. PPC không cần phân vùng bổ sung cho
<path>/boot</path>.
</note>

<p>
Giờ để tạo phân vùng swap, nhấn <c>c</c>. Một lần nữa <c>mac-fdisk</c>
sẽ hỏi bắt đầu phân vùng ở khối nào. Vì chúng ta đã dùng <c>2</c>
trước đó để tạo phân vùng Apple_Bootstrap, chúng ta sẽ phải nhập
<c>3p</c>. Khi bạn được hỏi kích thước, hãy nhập <c>512M</c> (hoặc bất
kỳ kích thước nào bạn muốn -- 512M chỉ là ví dụ). Khi được hỏi tên,
hãy nhập <c>swap</c> (bắt buộc).
</p>

<p>
Để tạo phân vùng gốc, nhập <c>c</c>, sau đó là <c>4p</c> để chọn khối
bắt đầu phân vùng gốc. Khi được hỏi kích thước, nhập lại <c>4p</c>.
<c>mac-fdisk</c> sẽ hiểu nó là "Dùng mọi không gian còn trống". Khi
được hỏi tên, hãy nhập <c>root</c> (bắt buộc).
</p>

<p>
Để hoàn tất, hãy ghi phân vùng vào bằng <c>w</c> và <c>q</c> để thoát
<c>mac-fdisk</c>.
</p>

<note>
Để chắc chắn mọi thứ đều ổn, bạn nên chạy mac-fdisk một lần nữa và
kiểm tra xem mọi phân vùng có chưa. Nếu bạn không thấy bất kỳ phân
vùng nào bạn tạo, hoặc những thay đổi bạn đã tạo ra, bạn nên khởi động
lại phân vùng bằng cách nhấn "i" trong mac-fdisk. Chú ý rằng nó sẽ tạo
lại partition map và xóa mọi phân vùng hiện có.
</note>

<p>
Bây giờ bạn đã tạo xong phân vùng, hãy tiếp tục với <uri
link="#filesystems">Tạo các hệ tập tin</uri>.
</p>

</body>
</section>
<section id="parted">
<title>Thay thế: Dùng parted (đặc biệt là Pegasos) để phân vùng đĩa</title>
<body>

<p>
<c>parted</c>, Partition Editor, có thể xử lý các phân vùng HFS+ của
Mac OS và Mac OS X. Với công cụ này, bạn có thể co phân vùng Mac của
bạn và tạo khoảng trống cho các phân vùng Linux. Tuy nhiên, ví dụ bên
dưới mô tả cách phân vùng chỉ cho Pegasos.
</p>

<p>
Để bắt đầu, hãy khởi động <c>parted</c>:
</p>

<pre caption="Khởi động parted">
# <i>parted /dev/hda</i>
</pre>

<p>
Nếu ổ đĩa chưa được phân vùng, hãy chạy <c>mklabel amiga</c> để tạo
disklabel cho đĩa.
</p>

<p>
Bạn có thể gõ <c>print</c> mọi lúc trong parted để xem bảng phân vùng
hiện tại. Những thay đổi không được lưu cho tới khi bạn thoát ứng
dụng; nếu lúc nào đó bạn thay đổi ý định hoặc phạm sai lầm, bạn có thể
nhấn <c>Ctrl-c</c> để ngừng parted.
</p>

<p>
Nếu bạn còn định cài đặt MorphOS trên Pegasos, hãy tạo hệ tập tin
affs1 tên "BI0" (BI không) ở đầu đĩa. 50MB là quá đủ để chứa kernel
MorphOS. Nếu bạn có Pegasos I hoặc định dùng reiserfs hoặc xfs, bạn sẽ
cần chứa Linux kernel trên phân vùng này (Pegasos II có thể khởi động
từ ext2/ext3). Để tạo phân vùng, chạy <c>mkpart primary affs1 START
END</c> trong đó <c>START</c> và <c>END</c> được thay bằng vùng
megabyte (vd <c>5 55</c> tạo phân vùng 50 MB bắt đầu tại 5MB và kết
thúc ở 55MB).
</p>

<p>
Bạn cần tạo hai phân vùng Linux, một phân vùng gốc cho mọi chương
trình, và một phân vùng swap. Để tạo phân vùng gốc, bạn phải quyết
định phân vùng cần dùng. Các tùy chọn có thể là ext2, ext3, reiserfs
và xfs. Trừ khi bạn biết bạn làm gì, còn không thì dùng ext3. Hãy chạy
<c>mkpart primary ext3 START END</c> để tạo phân vùng ext3. Cũng vậy,
hãy thay <c>START</c> và <c>END</c> bắt điểm bắt đầu và kết thúc phân
vùng, tính theo Megabyte.
</p>

<p>
Bạn nên tạo phân vùng swap có kích thước tương đương hai lần lượng RAM
trên máy tính của bạn. Bạn có thể sẽ gặp rắc rối với phân vùng swap
nhỏ hơn trừ khi bạn định chạy nhiều ứng dụng cùng lúc (mặc dù ít nhất
là 512MB). Để tạo phân vùng swap, chạy <c>mkpart primary linux-swap
START END</c>.
</p>

<p>
Hãy ghi ra số minor của partition vì bạn sẽ cần nó trong quá trình cài
đặt. Để hiển thị số minor, chạy <c>print</c>. Các ổ đĩa được truy cập
thông qua <path>/dev/hdaX</path> trong đó X thay bằng số minor của
partition.
</p>

<p>
Khi hoàn tất, gõ <c>quit</c> để thoát parted.
</p>

</body>
</section>
<section id="filesystems">
<title>Tạo các hệ tập tin</title>
<subsection>
<title>Giới thiệu</title>
<body>

<p>
Sau khi đã tạo phân vùng, bạn cần cài hệ tập tin lên đó. Nếu bạn không
quan tâm loại hệ tập tin cần chọn và sẵn sàng dùng loại hệ tập tin mặc
định như trong sách này thì bạn có thể tiếp tục với <uri 
link="#filesystems-apply">Cài hệ tập tin lên phân vùng</uri>. Nếu
không hãy đọc tiếp để tìm hiểu về những loại phân vùng được hỗ trợ...
</p>

</body>
</subsection>
<subsection>
<title>Loại hệ tập tin?</title>
<body>

<p>
Có nhiều hệ tập tin. Ext2, ext3 và XFS hoạt động ổn định trên PPC. JFS
không được hỗ trợ, còn ReiserFS vẫn còn vài vấn đề trên PPC.
</p>

<p>
<b>ext2</b> là hệ điều hành cho Linux, nhưng nó không có metadata
journaling, nghĩa là việc kiểm tra hệ tập tin lúc khởi động có thể tốn
nhiều thời gian. Có nhiều hệ tập tin mới hơn với tính năng journal để
chọn lựa, tốn ít thời gian kiểm tra hơn so với những loại không có
tính năng journal. Các hệ tập tin journal giúp tránh đợi lâu lúc khởi
động khi hệ tập tin bạn không ổn định.
</p>

<p>
<b>ext3</b> là phiên bản ext2 với tính năng journal, giúp phục hồi
nhanh kèm theo những đặc điểm khác của tính năng journal như full
data, ordered data journaling. ext3 là một lựa chọn tốt và an toàn. Nó
còn có tùy chọn hashed b-tree index giúp tăng hiệu năng trong hầu hết
trường hợp. Nói tóm lại, ext3 là một lựa chọn xuất sắc.
</p>

<p>
<b>ReiserFS</b> là hệ tập tin dựa trên B*-tree có hiệu năng tốt và
vượt xa cả ext2 và ext3 khi xử lý các tập tin nhỏ (nhỏ hơn 4k), thường
vượt gấp 10-15 lần. ReiserFS còn hoạt động tốt trong nhiều điều kiện
khác nhau và hỗ trợ metada journal. Với các kernel 2.4.18 trở đi,
ReiserFS là lựa chọn tốt để sử dụng hằng ngày cũng như những trường
hợp cực kỳ như các hệ tập tin lớn, hệ tập tin chứa nhiều tập tin nhỏ,
những tập tin cực lớn và thư mục chứa hàng ngàn tập tin.
</p>

<p>
<b>XFS</b> là hệ tập tin hỗ trợ metadata journal và một tập tin năng
mạnh mẽ, được tối ưu để thích hợp với nhiều điều kiện khác nhau. Chúng
tôi chỉ khuyến khích dùng loại hệ tập tin này trên Linux với hệ thống
SCSI và/hoặc fibre channel kèm bộ nguồn bảo đảm không bị ngắt. Vì XFS
cache in-transit data trong bộ nhớ một cách đáng kể, những chương
trình không được thiết kế phù hợp (những chương trình không để ý các
phòng ngừa khi ghi tập tin vào đĩa - có vài chương trình như vậy) có
thể làm mất một lượng dữ liệu lớn nếu hệ thống bị ngừng đột ngột.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>Cài hệ tập tin lên phân vùng</title>
<body>

<p>
Để tạo hệ tập tin trên phân vùng hoặc volume, cần có các công cụ cho
mỗi loại hệ tập tin:
</p>

<table>
<tr>
  <th>Hệ tập tin</th>
  <th>Lệnh tạo</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
</table>

<p>
Ví dụ, để định dạng phân vùng gốc (<path>/dev/hda4</path> trong ví dụ
này) dùng loại ext3 (như trong ví dụ), bạn dùng:
</p>

<pre caption="Cài hệ tập tin lên phân vùng">
# <i>mke2fs -j /dev/hda4</i>
</pre>

<p>
Bây giờ tạo hệ tập tin cho những phân vùng của bạn (hoặc các logical
volume).
</p>

<note>
Trên máy OldWorld và PegasosII, phân vùng chứa kernel phải là ext2
hoặc ext3. Máy NewWorld có thể khởi động từ ext2, ext3, XFS, ReiserFS
và thậm chí HFS/HFS+.
</note>

</body>
</subsection>
<subsection>
<title>Kích hoạt phân vùng Swap</title>
<body>

<p>
<c>mkswap</c> là lệnh để khởi tạo phân vùng swap:
</p>

<pre caption="Khởi tạo phân vùng Swap">
# <i>mkswap /dev/hda3</i>
</pre>

<p>
Để kích hoạt sử dụng phân vùng swap, dùng <c>swapon</c>:
</p>

<pre caption="Kích hoạt phân vùng swap">
# <i>swapon /dev/hda3</i>
</pre>

<p>
Giờ hãy tạo và kích hoạt phân vùng swap của bạn.
</p>

</body>
</subsection>
</section>
<section>
<title>Mount (Gắn kết)</title>
<body>

<p>
Các phân vùng của bạn đã được tạo và định dạng xong. Giờ là lúc để gắn
các phân vùng này vào hệ thống. Hãy dùng lệnh <c>mount</c>. Đừng quên
tạo những thư mục mount cần thiết trước khi mount các phân vùng bạn đã
tạo vào. Như trong ví dụ, chúng tôi sẽ mount phân vùng gốc và phân
vùng boot:
</p>

<pre caption="Mount các phân vùng">
# <i>mkdir /mnt/gentoo</i>
# <i>mount /dev/hda4 /mnt/gentoo</i>
</pre>

<note>
Nếu bạn muốn <path>/tmp</path> nằm trên một phân vùng riêng, hãy đảm
bảo quyền truy cập của nó sau khi mount: <c>chmod 1777
/mnt/gentoo/tmp</c>. Điều này cũng cần được thực hiện với
<path>/var/tmp</path>.
</note>


<p>
Chúng ta cũng sẽ mount hệ tập tin proc (một hệ tập tin ảo để giao tiếp
với kernel) vào <path>/proc</path>. Nhưng trước hết  hãy cho các tập
tin vào phân vùng.
</p>

<p>
Hãy tiếp tục với <uri link="?part=1&amp;chap=5">Cài đặt các tập tin
cài đặt Gentoo</uri>.
</p>

</body>
</section>
</sections>
