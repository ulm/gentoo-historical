<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- Rev: 1.24 -->

<sections>

<version>1.21</version>
<date>2005-05-29</date>

<section>
<title>Runlevel</title>
<subsection>
<title>Khởi động hệ thống</title>
<body>

<p>
Khi bạn khởi động hệ thống, bạn sẽ để ý thấy rất nhiều dòng chữ trôi
qua. Nếu bạn để ý kỹ hơn, bạn sẽ thấy những dòng này đều giống nhau
mỗi lần khởi động hệ thống. Chuỗi những hoạt động này được gọi là
<e>chuỗi khởi động (boot sequence)</e> và <!-- more or less --> được
định nghĩa cố định.
</p>

<p>
Trước hết boot loader của bạn sẽ nạp kernel image bạn định nghĩa trong
phần cấu hình boot loader vào bộ nhớ. Sau đó nó yêu cầu CPU chạy
kernel. Khi kernel được nạp và chạy, nó khởi động những cấu trúc và
công việc đặc thù của kernel và khởi động tiến trình <c>init</c>.
</p>

<p>
Tiến trình này bảo đảm mọi hệ tập tin (định nghĩa trong
<path>/etc/fstab</path>) được mount vào hệ thống để có thể dùng. Sau
đó nó thực hiện một số script nằm trong <path>/etc/init.d</path>, để
khởi động các dịch vụ theo thứ tự, nhằm khởi động toàn bộ hệ thống.
</p>

<p>
Cuối cùng, khi mọi script đã được thực hiện, <c>init</c> kích hoạt
các terminal (trong hầu hết trước hợp, nó chỉ là virtual console, được
kích hoạt bởi <c>Alt-F1</c>, <c>Alt-F2</c>, ...) và gắn mỗi terminal
với một chương trình đặc biệt tên là <c>agetty</c>. Chương trình này sẽ
bảo đảm bạn có thể đăng nhập vào những termminal này thông qua việc
chạy <c>login</c>.
</p>

</body>
</subsection>
<subsection>
<title>Init Script</title>
<body>

<p>
Giờ <c>init</c> không đơn giản thực hiện các script trong
<path>/etc/init.d</path> một cách ngẫu nhiên. Nó thậm chí không chạy
mọi script trong <path>/etc/init.d</path> mà chỉ chạy những script
được yêu cầu. Nó quyết định cần chạy những script nào bằng cách xem
trong <path>/etc/runlevels</path>.
</p>

<p>
Trước hết, <c>init</c> chạy mọi script trong <path>/etc/init.d</path>
có symbolic link bên trong <path>/etc/runlevels/boot</path>. Thông
thường các script sẽ được chạy theo thứ tự bảng chữ cái, nhưng vài
script có các thông tin script phụ thuộc bên trong, báo cho hệ thống
biết cần phải chạy những script nào khác trước khi script này được
chạy.
</p>

<p>
Khi mọi script trong <path>/etc/runlevels/boot</path> đã được chạy,
<c>init</c> sẽ tiếp tục chạy các script có symbolic link trong
<path>/etc/runlevels/default</path>. Tương tự như trên, các script sẽ
được chạy theo thứ tự bảng chữ cái, trừ những script có thông tin phụ
thuộc sẽ chạy những script phụ thuộc trước.
</p>

</body>
</subsection>
<subsection>
<title>Cách init hoạt động</title>
<body>

<p>
Dĩ nhiên <c>init</c> tự nó không quyết định tất cả. Nó cần tập tin cấu
hình để cho biết những hành động nào cần thực hiện. Tập tin đó là
<path>/etc/inittab</path>.
</p>

<p>
Nếu bạn còn nhớ chuỗi khởi động đã được mô tả, bạn sẽ nhớ rằng hành động
đầu tiên của <c>init</c> là mount mọi hệ tập tin. Điều này được định
nghĩa bởi động sau trong <path>/etc/inittab</path>:
</p>

<pre caption="Dòng khởi động hệ thống trong /etc/inittab">
si::sysinit:/sbin/rc sysinit
</pre>

<p>
Dòng này cho <c>init</c> biết rằng nó phải chạy <c>/sbin/rc
sysinit</c> để khởi động hệ thống. Script <path>/sbin/rc</path> sẽ
đảm trách tiến trình khởi động này, vì thế bạn có thể nói rằng
<c>init</c> không thực hiện gì nhiều -- nó chỉ việc giao công việc
khởi động hệ thống cho chương trình khác.
</p>

<p>
<c>init</c> thực hiện mọi script có symbolic link trong
<path>/etc/runlevels/boot</path>. Điều đó được mô tả bằng dòng sau:
</p>

<pre caption="Tiếp tục khởi động hệ thống">
rc::bootwait:/sbin/rc boot
</pre>

<p>
Một lần nữa, script <c>rc</c> thực hiện những công việc cần thiết. Chú
ý rằng tùy chọn cho <c>rc</c> (<e>boot</e>) là tên thư mục con trong
<path>/etc/runlevels</path> cần dùng để khởi động.
</p>

<p>
Giờ <c>init</c> kiểm tra tập tin cấu hình của nó để xem cần chạy
<e>runlevel</e> nào kế tiếp. Để quyết định, nó đọc dòng sau từ
<path>/etc/inittab</path>:
</p>

<pre caption="Dòng initdefault">
id:3:initdefault:
</pre>

<p>
Trong trường hợp này (cũng là trường hợp được dùng nhiều nhất),
<e>runlevel</e> là 3. Dùng thông tin này, <c>init</c> sẽ kiểm tra xem
nó cần chạy những gì trong <e>runlevel 3</e>:
</p>

<pre caption="Định nghĩa runlevel">
l0:0:wait:/sbin/rc shutdown
l1:S1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
</pre>

<p>
Dòng định nghĩa runlevel 3, một lần nữa lại dùng script <c>rc</c> để
khởi động những dịch vụ (bây giờ lại dùng tham số <e>default</e>). Chú
ý là tham số của <c>rc</c> cũng là tên thư mục con trong
<path>/etc/runlevels</path>.
</p>

<p>
Khi <c>rc</c> chạy xong, <c>init</c> quyết định cần kích hoạt những
virtual console nào và những lệnh gì cần chạy trên mỗi console:
</p>

<pre caption="Định nghĩa virtual console">
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
</pre>


</body>
</subsection>
<subsection>
<title>Runlevel là gì?</title>
<body>

<p>
Bạn đã thấy <c>init</c> dùng mô hình đánh số để quyết định
<e>runlevel</e> nào cần kích hoạt. <e>Runlevel</e> là một trạng thái
của hệ thống và chứa một tập các script (runlevel
script hay <e>initscript</e>) cần được thực hiện để vào hoặc thoát một
runlevel.
</p>

<p>
Trong Gentoo, có vài bảy runlevel được định nghĩa: ba runlevel nội bộ,
và bốn runlevel do người dùng định nghĩa. Những runlevel nội bộ là
<e>sysinit</e>, <e>shutdown</e> và <e>reboot</e> và thực hiện chính xác
như tên của chúng: khởi động hệ thống, tắt máy, khởi động lại máy.
</p>

<p>
Những runlevel do người dùng định nghĩa là những cái đi kèm với thư
mục con tương ứng trong <path>/etc/runlevels</path>:
<path>boot</path>, <path>default</path>, <path>nonetwork</path> và
<path>single</path>. Runlevel <path>boot</path> khởi động mọi dịch vụ
cấp hệ thống mà những runlevel khác sử dụng. Ba runlevel còn lại khác
nhau ở những dịch vụ được khởi động: <path>default</path> được dùng
cho hoạt động hằng ngày, <path>nonetwork</path> được dùng trong trường
hợp không cần mạng, và <path>single</path> được dùng khi bạn cần sửa
chữa hệ thống.
</p>

</body>
</subsection>
<subsection>
<title>Sử dụng Init Script</title>
<body>

<p>
Các script được <c>rc</c> chạy gọi là <e>init script</e>. Mỗi script
trong  <path>/etc/init.d</path> có thể được chạy với tham số
<e>start</e>, <e>stop</e>, <e>restart</e>, <e>pause</e>, <e>zap</e>,
<e>status</e>, <e>ineed</e>, <e>iuse</e>, <e>needsme</e>,
<e>usesme</e> hoặc <e>broken</e>.
</p>

<p>
Để chạy, ngừng hoặc khởi động lại một dịch vụ (và mọi dịch vụ liên
quan), hãy dùng <c>start</c>, <c>stop</c> và <c>restart</c>:
</p>

<pre caption="Khởi động Postfix">
# <i>/etc/init.d/postfix start</i>
</pre>

<note>
Chỉ những dịch vụ <e>cần (need)</e> dịch vụ đang xét mới bị ngừng hoặc
khởi động lại. Những dịch vụ phụ thuộc khác (như <e>use</e>) sẽ không
bị ảnh hưởng.
</note>

<p>
Nếu bạn muốn ngừng một dịch vụ, nhưng không muốn ngừng những dịch vụ
phụ thuộc vào nó, bạn có thể dùng tham số <c>pause</c>:
</p>

<pre caption="Ngừng Postfix nhưng không ngừng các dịch vụ phụ thuộc">
# <i>/etc/init.d/postfix pause</i>
</pre>

<p>
Nếu bạn muốn xem trạng thái của một dịch vụ (đã chạy, đã dừng, đang
tạm dừng ...) bạn có thể dùng tham số <c>status</c>:
</p>

<pre caption="Thông tin trạng thái postfix">
# <i>/etc/init.d/postfix status</i>
</pre>

<p>
Nếu thông tin trạng thái cho biết dịch vụ đang chạy, nhưng bạn biết
rằng nó không chạy, bạn có thể đặt lại thông tin trạng thái về
"stopped" bằng tham số <c>zap</c>:
</p>

<pre caption="Reset thông tin trạng thái cho postfix">
# <i>/etc/init.d/postfix zap</i>
</pre>

<p>
Để biết những dịch vụ phụ thuộc, bạn có thể dùng tham số <c>iuse</c>
hoặc <c>ineed</c>. Với <c>ineed</c>, bạn có thể thấy những dịch vụ
thật sự cần để dịch vụ đang xét hoạt động đúng. Ngược lại, <c>iuse</c>
cho bạn biết những dịch vụ có thể được dùng bởi dịch vụ này, nhưng
không bắt buộc cần thiết.
</p>

<pre caption="Yêu cầu danh sách mọi dịch vụ cần thiết của Postfix">
# <i>/etc/init.d/postfix ineed</i>
</pre>

<p>
Tương tự, bạn có thể xem những dịch vụ nào cần dịch vụ này
(<c>needsme</c>) hoặc dùng dịch vụ này (<c>usesme</c>):
</p>

<pre caption="Yêu cầu danh sách mọi dịch vụ cần Postfix">
# <i>/etc/init.d/postfix needsme</i>
</pre>

<p>
Cuối cùng, bạn có thể xem các dịch vụ mà dịch vụ này cần nhưng thiếu:
</p>

<pre caption="Yêu cầu danh sách những dịch vụ phụ thuộc bị thiếu của Postfix">
# <i>/etc/init.d/postfix broken</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Sử dụng rc-update</title>
<subsection>
<title>rc-update là gì?</title>
<body>

<p>
Hệ thống khởi động của Gentoo dùng một cây phụ thuộc để quyết định
dịch vụ nào cần được khởi động trước. Vì đây là một công việc tẻ nhạt
nên chúng tôi không muốn người dùng tự làm bằng tay, chúng tôi tạo ra
những công cụ để làm dễ dàng việc quản lý runlevel và init script.
</p>

<p>
Với <c>rc-update</c>, bạn có thể thêm vào và loại init script ra khỏi
runlevel. <c>rc-update</c> sẽ tự động gọi <c>depscan.sh</c> để xây lại
cây phụ thuộc.
</p>

</body>
</subsection>
<subsection>
<title>Thêm và xóa các dịch vụ</title>
<body>

<p>
Bạn đã thêm các init script vào runlevel "default" trong quá trình cài
đặt Gentoo. Lúc đó có thể bạn không biết "default" là gì, nhưng bây
giờ bạn đã biết. Script <c>rc-update</c> cần tham số định
nghĩa hành động cần thực hiện: <e>add</e>, <e>del</e> hoặc <e>show</e>.
</p>

<p>
Để thêm hoặc bỏ một init script, chỉ cần dùng tham số <c>add</c> hoặc
<c>del</c> cho <c>rc-update</c>, theo sau là init script và runlevel.
</p>

<pre caption="Loại Postfix khỏi runlevel default">
# <i>rc-update del postfix default</i>
</pre>

<p>
Lệnh <c>rc-update show</c> sẽ hiện mọi init script hiện có và những
runlevel sử dụng nó:
</p>

<pre caption="Nhận thông tin init script">
# <i>rc-update show</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Cấu hình dịch vụ</title>
<subsection>
<title>Tại sao cần cấu hình bổ sung?</title>
<body>

<p>
Init script có thể khá phức tạp. Tuy nhiên việc người dùng hiệu chỉnh
trực tiếp init script là không cần thiết, vì làm thế rất dễ gây ra
lỗi. Tuy nhiên thực sự cần có cách cấu hình một dịch vụ. Ví dụ, bạn có
thể muốn đưa nhiều tùy chọn hơn cho dịch vụ đó.
</p>

<p>
Lý do thứ hai là để tách phần cấu hình ra khỏi init script là để có
thể dễ dành cập nhật init script mà không sợ xóa mất phần cấu hình của
bạn.
</p>

</body>
</subsection>
<subsection>
<title>Thư mục /etc/conf.d</title>
<body>

<p>
Gentoo cung cấp một cách dễ dàng để cấu hình một dịch vụ: mỗi init
script cần được cấu hình sẽ có một tập tin trong
<path>/etc/conf.d</path>. Ví dụ, initscript apache2 (tên là
<path>/etc/init.d/apache2</path>) có tập tin cấu hình là
<path>/etc/conf.d/apache2</path>, chứa các tùy chọn bạn muốn đưa vào
Apache 2 server khi khởi động:
</p>

<pre caption="Biến được định nghĩa trong /etc/conf.d/apache2">
APACHE2_OPTS="-D PHP4"
</pre>

<p>
Tập tin cấu hình như thế chứa biến và chỉ biến (như
<path>/etc/make.conf</path>), nên dễ dành cấu hình dịch vụ. Ngoài ra
nó cũng giúp chúng tôi cung cấp nhiều thông tin hơn về các biến (thông
qua phần ghi chú).
</p>

</body>
</subsection>
</section>
<section>
<title>Viết Init Script</title>
<subsection>
<title>Có cần phải viết không?</title>
<body>

<p>
Không, viết init script thường là không cần thiết vì Gentoo cung cấp
sẵn các init script để có thể dùng ngay cho từng dịch vụ. Tuy nhiên,
bạn có thể có một dịch vụ được cài đặt không dùng Portage, trong
trường hợp này hầu như bạn sẽ phải viết init script.
</p>

<p>
Đừng dùng những init script đi kèm với các dịch vụ vì nó không được
viết cho Gentoo: Gentoo init script không tương thích với init script
được dùng bởi các bản phân phối khác!
</p>

</body>
</subsection>
<subsection>
<title>Bố cục</title>
<body>

<p>
Bố cục cơ bản của init script như bên dưới.
</p>

<pre caption="Bố cục cơ bản của init script">
#!/sbin/runscript

depend() {
  <comment>(Thông tin phụ thuộc)</comment>
}

start() {
  <comment>(Những lệnh cần thiết để khởi động dịch vụ)</comment>
}

stop() {
  <comment>(Những lệnh cần thiết để dừng dịch vụ)</comment>
}

restart() {
  <comment>(Những lệnh cần thiết để khởi động lại dịch vụ)</comment>
}
</pre>

<p>
Mọi init script <e>phải</e> định nghĩa hàm <c>start()</c>. Những phần
khác là tùy chọn.
</p>

</body>
</subsection>
<subsection>
<title>Các phụ thuộc</title>
<body>

<p>
Có hai loại phụ thuộc bạn có thể định nghĩa: <c>use</c> và
<c>need</c>. Như đã đề cập, phụ thuộc <c>need</c> chặt hơn so với phụ
thuộc <c>use</c>. Theo sau loại phụ thuộc này là tên dịch vụ phụ
thuộc, hoặc phụ thuộc <e>virtual</e>.
</p>

<p>
Phụ thuộc <e>virtual</e> là phụ thuộc do một dịch vụ cung cấp, nhưng
không phải chỉ có duy nhất một dịch vụ có thể cung cấp. Init script
của bạn có thể phụ thuộc vào một system logger, nhưng có nhiều system
logger (metalogd, syslog-ng, sysklogd ...). Vì bạn không thể
<c>need</c> mọi system logger (không hệ thống nào cài đặt và chạy mọi
system logger), chúng tôi bảo đảm rằng mọi dịch vụ loại này
<c>provide</c> một phụ thuộc dạng virtual.
</p>

<p>
Hãy xem thông tin phụ thuộc của postfix.
</p>

<pre caption="Thông tin phụ thuộc của Postfix">
depend() {
  need net
  use logger dns
  provide mta
}
</pre>

<p>
Như vậy, dịch vụ postfix:
</p>

<ul>
  <li>
    cần phụ thuộc (virtual) <c>net</c> (cung cấp bởi, ví dụ,
    <path>/etc/init.d/net.eth0</path>)
  </li>
  <li>
    dùng phụ thuộc (virtual) <c>logger</c> (cung cấp bởi, ví dụ,
    <path>/etc/init.d/syslog-ng</path>)
  </li>
  <li>
    dùng phụ thuộc (virtual) <c>dns</c> (cung cấp bởi, ví dụ,
    <path>/etc/init.d/named</path>)
  </li>
  <li>
    cung cấp phụ thuộc (virtual) <c>mta</c> (dành cho mọi mail server)
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>Điều khiển thứ tự</title>
<body>

<p>
Đôi khi bạn không cần một dịch vụ, nhưng muốn dịch vụ của bạn khởi
động <e>trước</e> (hoặc <e>sau</e>) một dịch vụ khác <e>nếu</e> dịch
vụ đó có trên hệ thống (chú ý phần điều kiện - không phải là thông tin
phụ thuộc nữa) <e>và</e> chạy trong cùng runlevel (chú ý phần điều
kiện - chỉ những dịch vụ trong cùng runlevel là có liên quan). Bạn có
thể cung cấp thông tin này bằng thiết lập <c>before</c> hoặc
<c>after</c>.
</p>

<p>
Trong ví dụ sau, chúng ta xem các thiết lập của dịch vụ Portmap:
</p>

<pre caption="Hàm depend() của dịch vụ Portmap">
depend() {
  need net
  before inetd
  before xinetd
}
</pre>

<p>
Bạn có thể dùng "*" để chọn mọi dịch vụ trong runlevel, mặc dù không
nên làm như thế.
</p>

<pre caption="Chạy init script đầu tiên trong runlevel">
depend() {
  before *
}
</pre>

</body>
</subsection>
<subsection>
<title>Hàm chuẩn</title>
<body>

<p>
Sau hàm <c>depend()</c>, bạn cần định nghĩa hàm <c>start()</c>. Hàm
này chứa mọi lệnh cần thiết để khởi động hệ thống. Nó được khuyên dùng
hàm <c>ebegin</c> và <c>eend</c> để thông báo cho người dùng biết điều
gì đang xảy ra:
</p>

<pre caption="Hàm start() ví dụ">
start() {
  ebegin "Starting my_service"
  start-stop-daemon --start --quiet --exec /path/to/my_service
  eend $?
}
</pre>

<p>
Nếu bạn cần nhiều hàm <c>start()</c> ví dụ hơn, vui lòng đọc mã nguồn
của các init script trong <path>/etc/init.d</path>. Với
<c>start-stop-daemon</c>, có một man page xuất sắc chưa nhiều thông
tin hơn cho bạn:
</p>

<pre caption="Xem man page của start-stop-daemon">
# <i>man start-stop-daemon</i>
</pre>

<p>
Những hàm khác bạn có thể định nghĩa là: <c>stop()</c> và
<c>restart()</c>. Bạn không bị buộc phải định nghĩa những hàm này! Hệ
thống khởi động đủ thông minh để tự điền những hàm này nếu bạn dùng
<c>start-stop-daemon</c>.
</p>

<p>
Cú pháp init script của Gentoo dựa trên Bourne Again Shell (bash) vì
thế bạn có thể tự do dùng các khai báo của bash bên trong init script.
</p>

</body>
</subsection>
<subsection>
<title>Thêm tùy chọn riêng</title>
<body>

<p>
Nếu bạn muốn init script của bạn hỗ trợ nhiều tùy chọn hơn những cái
đã thấy, bạn nên thêm tùy chọn vào biến <c>opts</c>, và tạo một hàm
cùng tên với tùy chọn. Ví dụ, để hỗ trợ tùy chọn <c>restartdelay</c>:
</p>

<pre caption="Hỗ trợ tùy chọn restartdelay">
opts="${opts} restartdelay"

restartdelay() {
  stop
  sleep 3    <comment># Chờ 3 giây trước khi khởi động lại</comment>
  start
}
</pre>

</body>
</subsection>
<subsection>
<title>Biến cấu hình tùy chọn</title>
<body>

<p>
Bạn không phải làm bất cứ gì để hỗ trợ tập tin cấu hình trong
<path>/etc/conf.d</path>: nếu init script của bạn được chạy, những
dòng sau sẽ được gộp vào (thông qua lệnh <c>source</c>):
</p>

<ul>
  <li><path>/etc/conf.d/&lt;init script của bạn&gt;</path></li>
  <li><path>/etc/conf.d/basic</path></li>
  <li><path>/etc/rc.conf</path></li>
</ul>

<p>
Ngoài ra, nếu bạn cung cấp phụ thuộc virtual (như <c>net</c>), tập tin
đi kèm với phụ thuộc đó (như <path>/etc/conf.d/net</path>) cũng được
gộp vào luôn.
</p>

</body>
</subsection>
</section>
<section>
<title>Thay đổi hành vi Runlevel</title>
<subsection>
<title>Ai sẽ có lợi?</title>
<body>

<p>
Nhiều người dùng laptop gặp trường hợp này: ở nhà bạn cần khởi động
<c>net.eth0</c> trong khi bạn không muốn khởi động <c>net.eth0</c>
trên đường (vì không có kết nối mạng). Với Gentoo, bạn có thể thay đổi
hành vi runlevel theo ý bạn.
</p>

<p>
Ví dụ, bạn có thể tạo runlevel "default" thứ hai, dùng để khởi động
những init script liên quan. Bạn có thể chọn default runlevel bạn muốn
dùng lúc khởi động.
</p>

</body>
</subsection>
<subsection>
<title>Dùng softlevel</title>
<body>

<p>
Trước hết, tạo thư mục runlevel cho runlevel "default" thứ hai của
bạn. Trong ví dụ này chúng ta tạo runlevel <path>offline</path>:
</p>

<pre caption="Tạo thư mục runlevel">
# <i>mkdir /etc/runlevels/offline</i>
</pre>

<p>
Hãy thêm những init script cần thiết vào runlevel mới tạo. Ví dụ, nếu
bạn muốn có một bản sao của runlevel <c>default</c> hiện thời nhưng
không có <c>net.eth0</c>:
</p>

<pre caption="Thêm các init script cần thiết">
<comment>(Chép mọi dịch vụ từ runlevel default vào runlevel offline)</comment>
# <i>cd /etc/runlevels/default</i>
# <i>for service in *; do rc-update add $service offline; done</i>
<comment>(Loại bỏ các dịch vụ không muốn khỏi runlevel offline)</comment>
# <i>rc-update del net.eth0 offline</i>
<comment>(Hiển thị các dịch vụ được kích hoạt trong runlevel offline)</comment>
# <i>rc-update show offline</i>
<comment>(Một phần kết quả mẫu)</comment>
               acpid | offline
          domainname | offline
               local | offline
            net.eth0 |
</pre>

<p>
Giờ hãy sửa cấu hình boot loader và thêm một mục mới cho runlevel
<c>offline</c>. Ví dụ, trong <path>/boot/grub/grub.conf</path>:
</p>

<pre caption="Thêm một mục mới cho runlevel offline">
title Gentoo Linux Offline Usage
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3 <i>softlevel=offline</i>
</pre>

<p>
Chà, xong! Nếu bạn khởi động hệ thống và chọn mục mới, runlevel
<c>offline</c> sẽ được dùng thay vì <c>default</c>.
</p>

</body>
</subsection>
<subsection>
<title>Dùng bootlevel</title>
<body>

<p>
Dùng <c>bootlevel</c> hoàn toàn tương tự như <c>softlevel</c>. Khác
biệt duy nhất là bạn định nghĩa một runlevel "boot" thứ hai thày vì
runlevel "default" thứ hai.
</p>

</body>
</subsection>
</section>
</sections>
