<?xml version='1.0' encoding='UTF-8'?>
<!-- Rev: 1.2 -->
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<sections>

<version>1.1</version>
<date>2005-10-16</date>

<section>
<title>Firewall</title>
<body>

<p>
Mọi người thường nghĩ firewall cung cấp an toàn tuyệt đối, nhưng họ
sai. Trong hầu hết trường hợp cấu hình firewall sai sẽ giảm độ an toàn
hơn cả không cài đặt firewall. Firewall cũng là một phần mềm và
nên được coi như một phần mềm bình thường như mọi phần mềm khác, vì nó
cũng có thể gặp lỗi như thường.
</p>

<p>
Vậy hãy suy nghĩ trước khi cài đặt firewall! Bạn có thật sự cần không?
Nếu bạn cần nghĩ mình cần, bạn nên viết ra những quy tắc hoặt động của
nó, loại firewall nào, và thao tác với nó như thế nào. Nhưng trước hết
hãy đọc tài liệu này.
</p>

<p>
Firewall được dùng cho hai mục đích:
</p>

<ul>
<li>Bảo vệ người dùng khỏi worm và những kẻ tấn công</li>
<li>Giữ người dùng (lao động/trẻ em) ở trong phạm vi kiểm soát</li>
</ul>

<p>
Có ba loại firewall:
</p>

<ul>
<li>Packet filtering</li>
<li>Circuit relay</li>
<li>Application gateway</li>
</ul>

<p>
Firewall cần có một máy riêng, không chạy dịch vụ gì cả (hoặc chỉ chạy
<c>sshd</c>) và được bảo đảm an ninh theo cách tài liệu này hướng dẫn.
</p>

</body>
</section>
<section>
<title>Lọc Packet</title>
<body>

<p>
Mọi lưu thông mạng đều được gửi dạng packet. Một lượng lớn lưu thông
được chia ra thành những phần nhỏ dễ xử lý và được tập hợp lại khi đến
đích. Packet header của mọi packet chứa thông tin cách đến và nơi đến.
Và thông tin này chính xác là những thông tin firewall packing
filtering dùng. Filter dựa trên:
</p>

<ul>
<li>Cho phép hoặc không cho phép packet dựa trên địa chỉ IP nguồn/đích</li>
<li>Cho phép hoặc không cho phép packet dựa trên cổng nguồn/đích</li>
<li>Cho phép hoặc không cho phép packet dựa trên giao thức</li>
<li>Cho phép hoặc không cho phép packet dựa trên cờ hiệu của giao thức xác định</li>
</ul>

<p>
Nói cách khác, firewall này lọc theo thông tin trong header, không
phải nội dung packet.
</p>

<p>
Điểm yếu:
</p>

<ul>
<li>
  Thông tin địa chỉ trong gói có thể bị làm giả IP (hoặc ta nói là
  <e>spoof</e>) từ phía người gửi
</li>
<li>
  Dữ liệu hoặc request trong gói được phép có thể chứa dữ liệu không
  mong muốn mà kẻ tấn công có thể dùng để khai thác các lỗi đã biết
  của các dịch vụ nằm trên hoặc nằm sau firewall
</li>
<li>Thường là nguồn gốc của lỗi</li>
</ul>

<p>
Điểm mạnh:
</p>

<ul>
<li>Cài đặt dễ và đơn giản</li>
<li>
  Có thể cảnh báo trước các cuột tấn công (vd, phát hiện quét cổng)
</li>
<li>Ngăn cản SYN attack</li>
</ul>

<p>
Ví dụ về lọc packet trong Linux:
</p>

<ul>
<li><uri link="http://www.iptables.org">Iptables</uri></li>
<li>
  <uri link="http://www.linuxdocs.org/HOWTOs/IPCHAINS-HOWTO.html">Ipchains</uri>
</li>
<li><uri link="http://www.smoothwall.org">SmoothWall</uri></li>
</ul>
<!--FIXME: should SmoothWall really be included, since it uses iptables?-->
<note>
Bạn nên dùng iptables. Ipchains đã lỗi thời.
</note>

</body>
</section>
<section>
<title>Circuit relay</title>
<body>

<p>
Circuit gateway là loại firewall kiểm tra kết nối trước khi trao
đổi dữ liệu. Nghĩa là nó không chỉ đơn giản cho phép hoặc từ chối
packet dựa trên header mà xác định kết nối giữa hai đầu có hợp lệ
không, dựa theo các quy tắc cấu hình, trước khi mở session và cho phép
trao đổi dữ liệu. Filter dựa trên:
</p>

<ul>
<li>Địa chỉ IP nguồn/đích</li>
<li>Cổng nguồn/đích</li>
<li>Khoảng thời gian</li>
<li>Giao thức</li>
<li>User</li>
<li>Password</li>
</ul>

<p>
Mọi lưu thông đều được kiểm tra và theo dõi, những lưu thông không
mong đợi có thể bị loại bỏ.
</p>

<p>
Điểm yếu:
</p>

<ul>
<li>
  Hoạt động ở tầng Transport, có thể cần thay đổi đáng kể các chương
  trình cung cấp tính năng transport bình thường.
</li>
</ul>

</body>
</section>
<section>
<title>Application gateway</title>
<body>

<p>
Application gateway là proxy cho ứng dụng, trao đổi dữ liệu với hệ
thống ở xa, đại diện cho client. Nó tách biệt khỏi thế giới bên ngoài
bằng cách nằm sau DMZ (De-Militarized Zone - Vùng dân sự: phần mạng
riêng tư có thể thấy thông qua firewall) hoặc sau một firewall không
cho phép kết nối từ bên ngoài. Nó dựa trên:
</p>

<ul>
<li>Cho phép hoặc cấm dựa trên địa chỉ IP nguồn/đích</li>
<li>Dựa trên nội dung packet</li>
<li>Giới hạn quyền truy cập tập tin dựa trên loại tập tin hoặc phần mở
rộng</li>
</ul>

<p>
Điểm mạnh:
</p>

<ul>
<li>Có thể cache các tập tin, tăng cường hiệu quả</li>
<li>Log chi tiết mọi kết nối</li>
<li>Thích ứng tốt (vài proxy server có thể "chia sẻ" dữ liệu cache)</li>
<li>Không truy cập trực tiếp từ bên ngoài</li>
<li>Thậm chí có thể thay thế ngay tức thì nội dung packet</li>
</ul>

<p>
Điểm yếu:
</p>

<ul>
<li>Cấu hình phức tạp</li>
</ul>

<p>
Gateway ứng dụng được xem là giải pháp an toàn nhất vì nó không cần
chạy bằng root và những máy sau lưng nó không thể được truy cập từ
Internet.
</p>

<p>
Ví dụ về một số gateway ứng dụng:
</p>

<ul>
<li><uri link="http://www.squid-cache.org/">Squid</uri></li>
</ul>

</body>
</section>
<section>
<title>Iptables</title>
<body>

<p>
Để dùng iptables, phải bật nó trong kernel. Tôi đã cài iptables dạng
module (lệnh <c>iptables</c> sẽ nạp module khi cần thiết) và biên dịch
lại kernel (nhưng bạn có thể muốn biên dịch iptables nằm sẵn trong
kernel, nếu bạn định tắt tính năng Loadable Kernel Modules như đã thảo
luận ở trên). Thông tin chi tiết cách cấu hình kernel cho iptables có
ở <uri
link="http://iptables-tutorial.frozentux.net/iptables-tutorial.html#PREPARATIONS">Iptables
Tutorial Chapter 5: Preparations</uri>. Sau khi bạn biên dịch kernel
mới (hoặc trong khi biên dịch kernel), bạn phải thêm lệnh
<c>iptables</c>. Chỉ cần <c>emerge iptables</c> là nó sẽ chạy.
</p>

<p>
Giờ hãy kiểm tra nó chạy chưa bằng lệnh <c>iptables -L</c>. Nếu thất
bại, có gì đó không ổn và bạn cần kiểm tra lại cấu hình.
</p>

<p>
Iptables là bộ lọc packet mới và nặng, dành cho Linux 2.4.x. Tiền thân
của nó là ipchains dành cho kernel 2.2.x. Một trong những điểm cải
tiến quan trọng là iptables có thể thực hiện stateful packet
filtering. Với khả năng này, nó có thể theo dấu các kết nối TCP đã
hình thành.
</p>

<p>
Kết nối TCP bao gồm một chuỗi các packet chứa thông tin về địa chỉ
nguồn, địa chỉ đích, cổng nguồn, cổng đích và một con số (sequence
number) để tập hợp packet lại mà không mất dữ liệu. TCP là giao thức
hướng kết nối (connection-oriented), ngược với UDP là giao thức phi
kết nối (connectionless).
</p>

<p>
Bằng cách theo dõi header của packet TCP, bộ lọc stateful có thể xác
định packet TCP nhận được có phải là một phần của kết nối đã tạo hay
không và quyết định xem chấp nhận hay hủy bỏ packet đó.
</p>

<p>
Với bộ lọc stateless, có thể đánh lừa bộ lọc chấp nhận packet mà lẽ ra
nên hủy bọ bằng cách xử lý header của packet TCP. Có thể thực hiện
điều đó bằng cách điều chỉnh SYN flag hoặc các flag khác trong header
packet TCP để các packet xấu xuất hiện như một phần của kết nối (vì bộ
lọc packet bản thân nó không thể theo dõi các kết nối). Với bộ lọc
packet stateful, có thể hủy bỏ những packet như thế vì nó không thuộc
về kết nối đã có. Nó sẽ giúp chấm dứt khả năng bị "stealth scan", một
loại quét cổng mà trình quét gửi các packet với flag rất ít khả năng
bị log lại từ firewall so với các packet thông thường.
</p>

<p>
Iptables còn cung cấp vài tính năng khác như NAT (Network Address
Translation) và rate limit. Rate limit đặc biệt hữu dụng khi chống DoS
(Denial of Service) như SYN flood.
</p>

<p>
Kết nối TCP được thiết lập bằng cái gọi là bắt tay ba đường. Khi lập
kết nối TCP, phía client gửi một packet đến server với flag SYN. Khi
phía server nhận được packet SYN, nó trả lời bằng cách gửi packet
SYN+ACK ngược lại. Khi phía client nhận được SYN+ACK, nó sẽ gửi trả
lời bằng packet ACK để xác nhận thành lập kết nối.
</p>

<p>
SYN flood attack được thực hiện bằng cách gửi packet SYN mà không trả
lời packet SYN+ACK. Phía client có thể làm giả packet với một địa chỉ
IP nguồn sai vì nó không cần trả lời. Phía server sẽ thêm một mục vào
hàng đợi các kết nối sắp hình thành khi nó nhận được packet SYN và chờ
nhận packet ACK sau cùng trước khi xoá mục khỏi hàng đợi. Hạng đợi chỉ
có thể chứa một số lượng giới hạn và nếu bị đầy, nó sẽ không thể mở
bất kỳ kết nối nào nữa. Nếu không nhận được gói ACK khi hết hạn,
mục đó sẽ tự động bị xoá khỏi hàng đợi. Phía client sẽ khởi động tấn
công bằng cách làm giả gói SYN với những địa chỉ IP nguồn khác nhau và
gửi đến IP đích càng nhanh càng tốt, do đó sẽ làm đầy hàng đợi bằng
những kết nối chưa được mở xong, làm cho các client khác không thể nào
tạo kết nối đến server.
</p>

<p>
Đây là chỗ cần đến rate limit. Có thể giới hạn tỉ lệ packet SYN chấp
nhận bằng cách dùng <c>-m limit --limit 1/s</c>. Nó sẽ giới hạn số
packet SYN chấp nhậ trong một giây và hạn chể SYN flood trong vòng
kiểm soát.
</p>

<note>
Một tùy chọn khác để chống SYN flood là <uri link =
"http://cr.yp.to/syncookies.html">SYN cookies</uri>, cho phép máy tính
trả lời packet SYN mà không làm đầy hàng đợi kết nối. SYN cookie có
thể được bật trong cấu hình Linux kernel, nhưng chúng vẫn được coi là
đang trong quá trình thử nghiệm ở thời điểm này.
</note>

<p>
Giờ hãy thực tế hơn một chút!
</p>

<p>
Khi iptables được nạp vào kernel, nó tạo 5 móc nối vào hệ thống để bạn
có thể thêm vào các quy tắc của mình. Chúng là  <c>INPUT</c>,
<c>OUTPUT</c>, <c>FORWARD</c>, <c>PREROUTING</c> và
<c>POSTROUTING</c>. Mỗi cái được gọi là một chain (xích) và chứa một
loạt các quy tắt. Mỗi quy tắc sẽ xác định, nếu packet header như thế
này, thì làm gì với packet đó. Nếu quy tắc đầu không áp dụng được, quy
tắc kế sẽ được thử.
</p>

<p>
Bạn có thể thêm các quy tắc (rule) vào 5 chain chính hoặc tạo chain
riêng và thêm rule vào đó. Iptables hỗ trợ các tùy chọn sau.
</p>

<table>
<tr>
  <th>Tùy chọn:</th>
  <th>Mô tả:</th>
</tr>
<tr>
  <ti>-A</ti>
  <ti>Nối thêm</ti>
</tr>
<tr>
  <ti>-D</ti>
  <ti>Xoá</ti>
</tr>
<tr>
  <ti>-I</ti>
  <ti>Chèn</ti>
</tr>
<tr>
  <ti>-R</ti>
  <ti>Thay thế</ti>
</tr>
<tr>
  <ti>-L</ti>
  <ti>Liệt kê</ti>
</tr>
<tr>
  <ti>-F</ti>
  <ti>Xoá mọi rule trong một chain hoặc trong mọi chain</ti>
</tr>
<tr>
  <ti>-Z</ti>
  <ti>Đặt counter về không cho một chain hoặc mọi chain</ti>
</tr>
<tr>
  <ti>-C</ti>
  <ti>Kiểm tra packet này trên chain</ti>
</tr>
<tr>
  <ti>-N</ti>
  <ti>Tạo chain riêng</ti>
</tr>
<tr>
  <ti>-X</ti>
  <ti>Xoá chain tự tạo</ti>
</tr>
<tr>
  <ti>-P</ti>
  <ti>Thay đổi chính sách của chain</ti>
</tr>
<tr>
  <ti>-E</ti>
  <ti>Đổi tên chain</ti>
</tr>
<tr>
  <ti>-p</ti>
  <ti>Giao thức</ti>
</tr>
<tr>
  <ti>-s</ti>
  <ti>Địa chỉ/mặt nạ nguồn</ti>
</tr>
<tr>
  <ti>-d</ti>
  <ti>Địa chỉ/mặt nạ đích</ti>
</tr>
<tr>
  <ti>-i</ti>
  <ti>Tên input (tên Ethernet)</ti>
</tr>
<tr>
  <ti>-o</ti>
  <ti>Tên Output (tên Ethernet)</ti>
</tr>
<tr>
  <ti>-j</ti>
  <ti>Nhảy (đích của quy tắc)</ti>
</tr>
<tr>
  <ti>-m</ti>
  <ti>So khớp mở rộng (có thể dùng phần mở rộng)</ti>
</tr>
<tr>
  <ti>-n</ti>
  <ti>Địa chỉ và cổng output dạng số</ti>
</tr>
<tr>
  <ti>-t</ti>
  <ti>Bảng cần xử lý</ti>
</tr>
<tr>
  <ti>-v</ti>
  <ti>Chế độ Verbose</ti>
</tr>
<tr>
  <ti>-x</ti>
  <ti>Số mở rộng (hiển thị chính xác giá trị)</ti>
</tr>
<tr>
  <ti>-f</ti>
  <ti>Chỉ so khớp gói thứ hai hoặc sau đó</ti>
</tr>
<tr>
  <ti>-V</ti>
  <ti>Phiên bản Packet</ti>
</tr>
<tr>
  <ti>--line-numbers</ti>
  <ti>In số dòng khi liệt kê</ti>
</tr>
</table>

<p>
Trước hết chúng ta cần thử phong toả các packet ICMP đến máy của ta,
để làm quen với iptables.
</p>

<pre caption="Phong toả packet ICMP">
# <i>iptables -A INPUT -p icmp -j DROP</i>
</pre>

<p>
Trước hết ta xác định chain cần thêm quy tắc vào, sau đó xác định giao
thức cần kiểm tra, và cuối cùng là đích đến. Đích đến có thể là tên
một chain tự tạo hoặc một trong những đích đặc biệt <c>ACCEPT</c>,
<c>DROP</c>,  <c>REJECT</c>, <c>LOG</c>, <c>QUEUE</c>, hoặc
<c>MASQUERADE</c>. Trong trường hợp này chúng ta dùng <c>DROP</c>, sẽ
hủy bỏ packet mà không thông báo cho client.
</p>

<note>
Đích <c>LOG</c> là một dạng đích "không kết thúc". Nếu packet được áp
dụng với quy tắc dùng đích <c>LOG</c>, thay vì chấm dứt áp dụng quy
tắc, packet sẽ vẫn được tiếp tục kiểm tra với các quy tắc khác. Nhờ
vậy bạn có thể log packet trong khi vẫn xử lý chúng như thường lệ.
</note>

<p>
Giờ thử <c>ping localhost</c>. Bạn sẽ không nhận được trả lời, vì
iptables đã hủy bỏ mọi packet ICMP đến máy này. Bạn cũng sẽ không thể
ping đến máy khác, vì gói ICMP trả lời cũng bị hủy bỏ. Giờ xoá sạch
chain để cho phép dùng ICMP.
</p>

<pre caption="Xoá sạch quy tắc">
# <i>iptables -F</i>
</pre>

<p>
Hãy xem tính năng lọc stateful của iptables. Nếu bạn cần bật kiểm tra
stateful các packet đến trên eth0, bạn cần dùng lệnh:
</p>

<pre caption="Chấp nhận packet xuất phát từ một kết nối đã được tạo">
# <i>iptables -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</i>
</pre>

<p>
Nó sẽ chấp nhận bất kỳ packet nào từ một kết nối được tạo lập hoặc có
liên quan trong chain INPUT. Và bạn có thể hủy bỏ bất kỳ gói nào không
nằm trong tầm quản lý bằng lệnh <c>iptables -A INPUT -i eth0 -m state
--state INVALID -j DROP</c> ngay trước lệnh trên. Nó sẽ bật cơ chế lọc
stateful trong iptables bằng cách dùng phần mở rộng "state". Nếu bạn
cần cho phép những máy khác kết nối đến máy bạn, bạn có thể dùng cờ
<c>--state NEW</c>. iptables có một số module dùng cho các mục đích
khác nhau. Một trong số chúng là:
</p>

<table>
<tr>
  <th>Module/So khớp</th>
  <th>Mô tả</th>
  <th>Tùy chọn mở rộng</th>
</tr>
<tr>
  <ti>mac</ti>
  <ti>Phần mở rộng so khớp cho các packet vào dựa trên địa chỉ mac.</ti>
  <ti>--mac-source</ti>
</tr>
<tr>
  <ti>state</ti>
  <ti>Bật kiểm tra stateful</ti>
  <ti>--state (state bao gồm ESTABLISHED,RELATED, INVALID, NEW)</ti>
</tr>
<tr>
  <ti>limit</ti>
  <ti>Giới hạn so khớp theo tỉ lệ</ti>
  <ti>--limit, --limit-burst</ti>
</tr>
<tr>
  <ti>owner</ti>
  <ti>Thử so khớp các đặc điểm khác nhau của trình tạo gói</ti>
  <ti>
    --uid-owner userid --gid-owner groupid --pid-owner processid --sid-owner 
    sessionid
  </ti>
</tr>
<tr>
  <ti>unclean</ti>
  <ti>Một loạt các kiểm tra toàn vẹn ngẫu nhiên trên các packet</ti><ti></ti>
</tr>
</table>

<p>
Hãy thử tạo một chain riêng và áp dụng vào một trong những chain đã
có:
</p>

<pre caption="Tạo chain riêng">
<comment>(Tạo chain mới với một quy tắc)</comment>
# <i>iptables -X mychain</i>
# <i>iptables -N mychain</i>
# <i>iptables -A mychain -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</i>
<comment>(Chính sách mặc định là mọi lưu thông ra ngoài đều được phép. Lưu thông vào bị hủy bỏ.)</comment>
# <i>iptables -P OUTPUT ACCEPT</i>
# <i>iptables -P INPUT DROP</i>
<comment>(Và thêm nó vào chain INPUT)</comment>
# <i>iptables -A INPUT -j mychain</i>
</pre>

<p>
Bằng cách áp dụng quy tắc này vào chain INPUT, chúng ta có được chính
sách sau: Mọi gói đi ra đều được phép và mọi gói đi vào đều bị hủy.
</p>

<p>
Bạn có thể tìm đọc thêm tài liệu <uri
link="http://www.iptables.org/documentation/index.html#HOWTO">Netfilter/iptables</uri>.
</p>

<p>
Giờ hãy xem một ví dụ hoàn chỉnh. Đây là trược hợp mà chính sách
firewall/gateway là:
</p>

<ul>
<li>Kết nối đến firewall chỉ được phép thông qua SSH (cổng 22)</li>
<li>
  Mạng nội bộ được phép truy cập HTTP, HTTPS và SSH (DNS cũng được
  phép)
</li>
<li>
  Lưu thông ICMP có thể chứa dữ liệu và không bị cấm. Dĩ nhiên chúng
  ta phải cho phép một vài lưu thông ICMP.
</li>
<li>Quét cổng được dò tìm và bị log</li>
<li>Tránh những cuộc tấn công SYN</li>
<li>Mọi lưu thông khác bị hủy bỏ và log lại</li>
</ul>

<pre caption="/etc/init.d/firewall">
#!/sbin/runscript
IPTABLES=/sbin/iptables
IPTABLESSAVE=/sbin/iptables-save
IPTABLESRESTORE=/sbin/iptables-restore
FIREWALL=/etc/firewall.rules
DNS1=212.242.40.3
DNS2=212.242.40.51
#inside
IIP=10.0.0.2
IINTERFACE=eth0
LOCAL_NETWORK=10.0.0.0/24
#outside
OIP=217.157.156.144
OINTERFACE=eth1

opts="${opts} showstatus panic save restore showoptions rules"

depend() {
  need net
}

rules() {
  stop
  ebegin "Setting internal rules"

  einfo "Setting default rule to drop"
  $IPTABLES -P FORWARD DROP
  $IPTABLES -P INPUT   DROP
  $IPTABLES -P OUTPUT  DROP

  #default rule
  einfo "Creating states chain"
  $IPTABLES -N allowed-connection
  $IPTABLES -F allowed-connection
  $IPTABLES -A allowed-connection -m state --state ESTABLISHED,RELATED -j ACCEPT
  $IPTABLES -A allowed-connection -i $IINTERFACE -m limit -j LOG --log-prefix \ 
      "Bad packet from ${IINTERFACE}:"
  $IPTABLES -A allowed-connection -j DROP

  #ICMP traffic
  einfo "Creating icmp chain"
  $IPTABLES -N icmp_allowed
  $IPTABLES -F icmp_allowed
  $IPTABLES -A icmp_allowed -m state --state NEW -p icmp --icmp-type \ 
      time-exceeded -j ACCEPT
  $IPTABLES -A icmp_allowed -m state --state NEW -p icmp --icmp-type \ 
      destination-unreachable -j ACCEPT
  $IPTABLES -A icmp_allowed -p icmp -j LOG --log-prefix "Bad ICMP traffic:"
  $IPTABLES -A icmp_allowed -p icmp -j DROP

  #Incoming traffic
  einfo "Creating incoming ssh traffic chain"
  $IPTABLES -N allow-ssh-traffic-in
  $IPTABLES -F allow-ssh-traffic-in
  #Flood protection
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \ 
      ALL RST --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \ 
      ALL FIN --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \ 
      ALL SYN --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m state --state RELATED,ESTABLISHED -p tcp --dport ssh -j ACCEPT

  #outgoing traffic
  einfo "Creating outgoing ssh traffic chain"
  $IPTABLES -N allow-ssh-traffic-out
  $IPTABLES -F allow-ssh-traffic-out
  $IPTABLES -A allow-ssh-traffic-out -p tcp --dport ssh -j ACCEPT

  einfo "Creating outgoing dns traffic chain"
  $IPTABLES -N allow-dns-traffic-out
  $IPTABLES -F allow-dns-traffic-out
  $IPTABLES -A allow-dns-traffic-out -p udp -d $DNS1 --dport domain \ 
      -j ACCEPT
  $IPTABLES -A allow-dns-traffic-out -p udp -d $DNS2 --dport domain \ 
     -j ACCEPT

  einfo "Creating outgoing http/https traffic chain"
  $IPTABLES -N allow-www-traffic-out
  $IPTABLES -F allow-www-traffic-out
  $IPTABLES -A allow-www-traffic-out -p tcp --dport www -j ACCEPT
  $IPTABLES -A allow-www-traffic-out -p tcp --dport https -j ACCEPT

  #Catch portscanners
  einfo "Creating portscan detection chain"
  $IPTABLES -N check-flags
  $IPTABLES -F check-flags
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL FIN,URG,PSH -m limit \ 
      --limit 5/minute -j LOG --log-level alert --log-prefix "NMAP-XMAS:" 
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL ALL -m limit --limit \ 
      5/minute -j LOG --log-level 1 --log-prefix "XMAS:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL ALL -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG \ 
      -m limit --limit 5/minute -j LOG --log-level 1 --log-prefix "XMAS-PSH:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL NONE -m limit \ 
      --limit 5/minute -j LOG --log-level 1 --log-prefix "NULL_SCAN:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL NONE -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,RST SYN,RST -m limit \ 
      --limit 5/minute -j LOG --log-level 5 --log-prefix "SYN/RST:"
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit \ 
      --limit 5/minute -j LOG --log-level 5 --log-prefix "SYN/FIN:"
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

  # Apply and add invalid states to the chains
  einfo "Applying chains to INPUT"
  $IPTABLES -A INPUT -m state --state INVALID -j DROP
  $IPTABLES -A INPUT -j icmp_allowed 
  $IPTABLES -A INPUT -j check-flags
  $IPTABLES -A INPUT -i lo -j ACCEPT
  $IPTABLES -A INPUT -j allow-ssh-traffic-in
  $IPTABLES -A INPUT -j allowed-connection

  einfo "Applying chains to FORWARD"
  $IPTABLES -A FORWARD -m state --state INVALID -j DROP
  $IPTABLES -A FORWARD -j icmp_allowed 
  $IPTABLES -A FORWARD -j check-flags
  $IPTABLES -A FORWARD -o lo -j ACCEPT
  $IPTABLES -A FORWARD -j allow-ssh-traffic-in
  $IPTABLES -A FORWARD -j allow-www-traffic-out
  $IPTABLES -A FORWARD -j allowed-connection

  einfo "Applying chains to OUTPUT"
  $IPTABLES -A OUTPUT -m state --state INVALID -j DROP
  $IPTABLES -A OUTPUT -j icmp_allowed
  $IPTABLES -A OUTPUT -j check-flags
  $IPTABLES -A OUTPUT -o lo -j ACCEPT
  $IPTABLES -A OUTPUT -j allow-ssh-traffic-out
  $IPTABLES -A OUTPUT -j allow-dns-traffic-out
  $IPTABLES -A OUTPUT -j allow-www-traffic-out
  $IPTABLES -A OUTPUT -j allowed-connection

  #Allow client to route through via NAT (Network Address Translation)
  $IPTABLES -t nat -A POSTROUTING -o $IINTERFACE -j MASQUERADE 
  eend $?
}

start() {
  ebegin "Starting firewall"
  if [ -e "${FIREWALL}" ]; then
    restore
  else
    einfo "${FIREWALL} does not exists. Using default rules."
    rules
  fi
  eend $?
}

stop() {
  ebegin "Stopping firewall"
  $IPTABLES -F
  $IPTABLES -t nat -F
  $IPTABLES -X
  $IPTABLES -P FORWARD ACCEPT
  $IPTABLES -P INPUT   ACCEPT
  $IPTABLES -P OUTPUT  ACCEPT
  eend $?
}

showstatus() {
  ebegin "Status"
  $IPTABLES -L -n -v --line-numbers
  einfo "NAT status"
  $IPTABLES -L -n -v --line-numbers -t nat
  eend $?
}

panic() {
  ebegin "Setting panic rules"
  $IPTABLES -F
  $IPTABLES -X
  $IPTABLES -t nat -F
  $IPTABLES -P FORWARD DROP
  $IPTABLES -P INPUT   DROP
  $IPTABLES -P OUTPUT  DROP
  $IPTABLES -A INPUT -i lo -j ACCEPT
  $IPTABLES -A OUTPUT -o lo -j ACCEPT
  eend $?
}

save() {
  ebegin "Saving Firewall rules"
  $IPTABLESSAVE &gt; $FIREWALL
  eend $?
}

restore() {
  ebegin "Restoring Firewall rules"
  $IPTABLESRESTORE &lt; $FIREWALL
  eend $?
}

restart() {
  svc_stop; svc_start
}

showoptions() {
  echo "Usage: $0 {start|save|restore|panic|stop|restart|showstatus}"
  echo "start)      will restore setting if exists else force rules"
  echo "stop)       delete all rules and set all to accept"
  echo "rules)      force settings of new rules"
  echo "save)       will store settings in ${FIREWALL}"
  echo "restore)    will restore settings from ${FIREWALL}"
  echo "showstatus) Shows the status" 
}
</pre>

<p>
Vài lời khuyên khi tạo firewall:
</p>

<ol>
<li>Tạo chính sách firewall trước khi thử cài đặ</li>
<li>Cố gắng giữ nó đơn giản</li>
<li>
Biết những giao thức nào hoạt động (đọc các <uri
link="http://www.ietf.org/">RFC</uri> (Request For Comments) liên
quan)
</li>
<li>
Nhớ rằng firewall cũng chỉ là phần mềm và chạy bằng root.
</li>
<li>Kiểm tra firewall</li>
</ol>

<p>
Nếu bạn nghĩa rằng iptables khó hiểu hoặc mất thời gian thiết lập, bạn
có thể dùng <uri
link="http://www.shorewall.net">Shorewall</uri>. Về cơ bản nó dùng
iptables để phát sinh các quy tắc của firewall, nhưng nó tập trung vào
quy tắc, không phải giao thức.
</p>

</body>
</section>
<section>
<title>Squid</title>
<body>

<p>
Squid là một proxy server rất mạnh. Nó có thể lọc lưu thông theo thời
gian, theo biểu thức chính quy trên đường dẫn/URI, theo địa chỉ IP
nguồn và đích, theo domain, browser, username được dùng để xác thực,
MIME type, và số cổng (giao thức). Có lẽ tôi còn quên một số tính
năng, nhưng khó có thể đề cập toàn bộ danh sách tại đây.
</p> 

<p>
Trong ví dụ sau, tôi sẽ thêm bộ lọc banner thay vì lọc các trang khiêu
dâm. Lý do là Gentoo.org <e>không đáng</e> được liệt kê như là một
trang web khiêu dâm. Và tôi không muốn phí thời gian tìm dùm bạn vài
trang web khiêu dâm tốt.
</p>

<p>
Trong ví dụ này, chính sách là:
</p>

<ul>
<li>
Lướt web (HTTP/HTTPS) được phép trong giờ làm việc (T2-T6 8-17 giờ và
T7 8-13 giờ), nhưng nếu nhân viên ở lại trễ, họ nên làm việc, không
phải lướt web
</li>
<li>
Lấy tập tin về là không được phép (.exe, .com, .arj, .zip, .asf, .avi, .mpg,
.mpeg, ...)
</li>
<li>
Chúng ta không thích banner, chúng được lọc bỏ và thay bằng gif trong
suốt (đây là nơi dành cho sự sáng tạo của bạn!).
</li>
<li>
Mọi kết nối khác đến/từ Internet đều bị từ chối.
</li>
</ul>

<p>
Phần này được thực hiện trong 4 bước <e>rất dễ</e> sau.
</p>

<pre caption="/etc/squid/squid.conf">
# Bind to a ip and port
http_port 10.0.2.1:3128

# Standard configuration
hierarchy_stoplist cgi-bin ?
acl QUERY urlpath_regex cgi-bin \?
no_cache deny QUERY

# Add basic access control lists
acl all src 0.0.0.0/0.0.0.0
acl manager proto cache_object
acl localhost src 127.0.0.1/255.255.255.255

# Add who can access this proxy server
acl localnet src 10.0.0.0/255.255.0.0

# And ports
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 443
acl purge method PURGE

# Add access control list based on regular
# expressions within urls
acl archives urlpath_regex "/etc/squid/files.acl"
acl url_ads url_regex "/etc/squid/banner-ads.acl"

# Add access control list based on time and day
acl restricted_weekdays time MTWHF 8:00-17:00
acl restricted_weekends time A 8:00-13:00

acl CONNECT method CONNECT

#allow manager access from localhost
http_access allow manager localhost
http_access deny manager

# Only allow purge requests from localhost
http_access allow purge localhost
http_access deny purge

# Deny requests to unknown ports
http_access deny !Safe_ports

# Deny CONNECT to other than SSL ports
http_access deny CONNECT !SSL_ports

# My own rules

# Add a page do be displayed when
# a banner is removed
deny_info NOTE_ADS_FILTERED url_ads

# Then deny them
http_access deny url_ads

# Deny all archives
http_access deny archives

# Restrict access to work hours
http_access allow localnet restricted_weekdays
http_access allow localnet restricted_weekends

# Deny the rest
http_access deny all
</pre>

<p>
Kế tiếp điền vào tập tin bạn không muốn người dùng lấy về. Tôi thêm
các tập tin zip, viv, exe, mp3, rar, ace, avi, mov, mpg, mpeg, au, ra,
arj, tar, gz và z.
</p>

<pre caption="/etc/squid/files.acl">
\.[Zz][Ii][pP]$
\.[Vv][Ii][Vv].*
\.[Ee][Xx][Ee]$
\.[Mm][Pp]3$
\.[Rr][Aa][Rr]$
\.[Aa][Cc][Ee]$
\.[Aa][Ss][Ff]$
\.[Aa][Vv][Ii]$
\.[Mm][Oo][Vv]$
\.[Mm][Pp][Gg]$
\.[Mm][Pp][Ee][Gg]$
\.[Aa][Uu]$
\.[Rr][Aa]$
\.[Aa][Rr][Jj]$
\.[Tt][Aa][Rr]$
\.[Gg][Zz]$
\.[Zz]$
</pre>

<note>
Chú ý rằng [] với chữ hoa và chữ thường cho từng ký tự. Làm vậy để
không ai có thể lừa bộ lọc bằng cách dùng tập tin AvI thay vì avi
</note>

<p>
Kế tiếp chúng ta thêm biểu thức chính quy để xác định banner. Bạn có
lẽ cần sáng tạo nhiều hơn thế này:
</p>

<pre caption="/etc/squid/banner-ads.acl">
/adv/.*\.gif$
/[Aa]ds/.*\.gif$
/[Aa]d[Pp]ix/
/[Aa]d[Ss]erver
/[Aa][Dd]/.*\.[GgJj][IiPp][FfGg]$
/[Bb]annerads/
/adbanner.*\.[GgJj][IiPp][FfGg]$
/images/ad/
/reklame/
/RealMedia/ads/.*
^http://www\.submit-it.*
^http://www\.eads.*
^http://ads\.
^http://ad\.
^http://ads02\.
^http://adaver.*\.
^http://adforce\.
adbot\.com
/ads/.*\.gif.*
_ad\..*cgi
/Banners/
/SmartBanner/
/Ads/Media/Images/
^http://static\.wired\.com/advertising/
^http://*\.dejanews\.com/ads/
^http://adfu\.blockstackers\.com/
^http://ads2\.zdnet\.com/adverts
^http://www2\.burstnet\.com/gifs/
^http://www.\.valueclick\.com/cgi-bin/cycle
^http://www\.altavista\.com/av/gifs/ie_horiz\.gif
</pre>

<p>
Phần cuối cùng là hiển thị tập tin này khi banner bị loại bỏ. Đây có
thể là một nửa tập tin html với ảnh gif trong suốt 4x4.
</p>

<pre caption="/etc/squid/errors/NOTE_ADS_FILTERED">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META HTTP-EQUIV="REFRESH" CONTENT="0; URL=http://localhost/images/4x4.gif"&gt;
&lt;TITLE>ERROR: The requested URL could not be retrieved&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Add filtered!&lt;/H1&gt;
</pre>

<note>
Đừng đóng &lt;HTML&gt; &lt;BODY&gt;. Squid sẽ làm điều đó.
</note>

<p>
Như bạn thấy, Squid có nhiều tiềm năng và rất hiệu quả để lọc và làm
proxy. Thậm chí có thể dùng Squid proxy trên những mạng rất lớn. Cấu
hình liệt kê ở trên hầu hết chỉ thích hợp cho mạng cỡ nhỏ từ 1-20
người dùng.
</p>

<p>
Nhưng kết hợp với bộ lọc packet (iptables) và gateway ứng dụng (Squid)
có lẽ là giải pháp tốt nhất, ngay cả khi Squid nằm ở một nơi an toàn
và không ai có thể truy cập từ bên ngoài. Chúng ta vẫn cần quan tâm
đến các cuộc tấn công từ bên trong.
</p>

<p>
Giờ bạn phải cấu hình browser để dùng proxy. Gateway sẽ chặn những
người dùng truy cập trực tiếp ra bên ngoài, chỉ cho phép dùng proxy.
</p>

<note>
Với Mozilla, có thể điều chỉnh trong Edit->Preferences->Advanced->Proxies.
</note>

<p>
Cũng có thể thực hiện trong suốt bằng iptables để chuyển tất cả lưu
thông bên ngoài vào Squid proxy. Có thể thực hiện bằng cách thêm rule
forwarding/prerouting trên gateway:
</p>

<pre caption="Bật portforwarding trên proxy server">
# <i>iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to proxyhost:3128</i>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to proxyhost:3128</i>
</pre>

<note>
Nếu proxy đang chạy trên máy lọc packet--mặc dù không nên, dù vẫn phải
dùng nếu bạn không có đủ máy--hãy dùng target <c>REDIRECT</c> thay vì
<c>DNAT</c> (<c>REDIRECT</c> chuyển hướng packet sang localhost).
</note>

</body>
</section>
<section>
<title>Những bài học</title>
<body>

<p>
Chúng ta học được những điều sau:
</p>

<ol>
<li>
Firewall có thể có rủi ro trong chính bản thân nó. Firewall cấu hình
sai còn tệ hơn không có firewall.
</li>
<li>Cách thiết lập gateway cơ bản và proxy trong suốt.</li>
<li>Chìa khoá tạo firewall tốt là biết những giao thức nào cho phép
dùng.</li>
<li>
Lưu lượng IP không chứa dữ liệu hợp lệ, vd các gói ICMP, có thể chứa
những thông tin nguy hiểm.
</li>
<li>Cách tránh SYN attack.</li>
<li>Lọc lưu thông HTTP bằng cách loại bỏ những hình ảnh không tốt và
virus.</li>
<li>
Kết hợp bộ lọc packet và gateway ứng dụng sẽ điều khiển tốt hơn.
</li>
</ol>

<p>
Giờ nếu bạn <e>thật sự</e> cần, hãy tạo firewall phù hợp với bạn.
</p>

</body>
</section>

</sections>
