<?xml version='1.0' encoding="UTF-8"?>

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/zh_cn/gcc-upgrading.xml,v 1.4 2009/05/07 15:56:44 r0bertz Exp $ -->
<!-- English CVS version: 1.29 -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/zh_cn/gcc-upgrading.xml" lang="zh_cn">
<title>Gentoo GCC升级指南</title>

<author title="作者">
  <mail link="amne@gentoo.org">Wernfried Haas</mail>
</author>
<author title="作者">
  <mail link="jkt@gentoo.org">Jan Kundrát</mail>
</author>
<author title="编辑">
  <mail link="halcy0n"/>
</author>
<author title="编辑">
  <mail link="nightmorph"/>
</author>
<author title="译者">
  <mail link="huaihuaixiaoshao@gmail.com">黄曦</mail>
</author>
<author title="审校">
  <mail link="r0bertz"/>
</author>

<abstract>
这份文档给出了升级GCC的全过程。
</abstract>


<!-- The content of this document is licensed under the CC-BY-SA license 
 See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>23</version>
<date>2008-07-19</date>

<chapter id="intro">
<title>简介</title>
<section>
<title>GCC升级</title>
<body>

<p>
为什么要升级？GCC就如同系统上的其他软件一样，只是更重要一点。当新版本中以前让你烦恼的bug已经修复，你需要的新功能已经引入或者你只是想保持系统更新时，都可以升级GCC。如果前面的情况都不适合你，完全可以推迟升级，只要所用的GCC版本还被Gentoo开发团队所支持。
</p>

<p>
如果你安装了GCC的一个新的主版本（例如从3.3.6至3.4.5），系统并不会自动切换使用新版本。你必须手动切换，因为迁移过程还需要额外的步骤。如果你决定不切换，Portage就会继续使用旧版本，直到你切换或者从系统里移除旧的编译器。非主版本升级则会自动切换（例如从3.4.5至3.4.6）。
</p>

<p>
这份指南将给出无缝升级Gentoo系统编译器的必要步骤。一个章节专门讲述了<uri link="#upgrade-3.3-to-3.4">从GCC 3.3升级至3.4</uri>和<c>libstdc++</c>的问题。另一个章节则是专门为新的GCC主要／非主要版本发布后，使用stage3包<uri link="#first-install">首次安装</uri>Gentoo的用户准备的。
</p>

<warn>
注意从GCC-3.4（或3.3）升级到GCC-4.1或更高还需按照<uri link="#upgrade-general">一般升级步骤</uri>来做，因为GCC-3.4和GCC-4.1使用了稍稍不同的ABI。
</warn>

</body>
</section>
</chapter>

<chapter id="upgrade-general">
<title>一般升级步骤</title>
<section>
<title>简介</title>
<body>

<impo>
如果你在找针对GCC-3.3升级到GCC-3.4的教程，请查阅<uri link="#upgrade-3.3-to-3.4">专门章节</uri>。
</impo>

<impo>
如果你在找针对新安装系统的GCC升级教程，请查阅<uri link="#first-install">专门章节</uri>
</impo>

<p>
通常来说，<e>bug修复版本</e>的升级，像3.3.5到3.3.6，是非常安全的——只要emerge新版本，再切换并重建受影响的<c>libtool</c>包就可以了。有些GCC升级破坏了二进制兼容，如此就需要重新编译所有受影响的包。
</p>

<p>
当谈到手动切换编译器到新版本时，我们曾说这不会自动进行。但也有个例外——比如bug修复升级，从3.3.5升级到3.3.6，如果你没有启用“multislot” USE标记使之共存就会自动切换。而“multislot”默认是禁用的，因为启用这个USE标记对大多数用户来说没有多大好处。
</p>

<pre caption="升级GCC">
# <i>emerge -uav gcc</i>

<comment>（请用你的CHOST和所要升级的版本号来替换“i686-pc-linux-gnu-4.1.1”:)）</comment>
# <i>gcc-config i686-pc-linux-gnu-4.1.1</i>
# <i>env-update &amp;&amp; source /etc/profile</i>

<comment>如果你打算把gcc从3升级到4（这个例子是从3.4.6升级到4.1.1），需要手动运行fix_libtool_files.sh。</comment>
<comment>（用你在/etc/make.conf实际设置的CHOST来替换$CHOST）</comment>
<comment>（用你升级的新版本号代替&lt;gcc-version&gt;）</comment>
# <i>/usr/share/gcc-data/$CHOST/&lt;gcc-version&gt;/fix_libtool_files.sh 3.4.6</i>

<comment>（重建libtool）</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
你<e>必须</e>利用新的编译器重建工具链以及world，这样才能保持系统的健全状态。
</p>

<pre caption="重建系统">
# <i>emerge -eav system</i>
# <i>emerge -eav world</i>
</pre>

<p>
这时就可以安全地移除旧版本的编译器了。如果你觉得需要，按照以下命令做（像往常一样，用你想要移除的版本代替<c>=sys-devel/gcc-3.4*</c>）：
</p>

<pre caption="移除旧版本的GCC">
# <i>emerge -aC =sys-devel/gcc-3.4*</i>
</pre>

<impo>
请注意GCC 4.1及更新的版本只能用来编译2.4.34及更高版本的内核。如果你要编译旧内核，就不要移除旧版的GCC了。
</impo>

<impo> 
<!-- FIXME: do we really want to keep it here? --> 如果你是从GCC-3.3升级，可以运行<c>emerge --oneshot sys-libs/libstdc++-v3</c>来提供对旧的二进制程序的兼容。
</impo>

</body>
</section>
</chapter>

<chapter id="upgrade-3.3-to-3.4">
<title>从GCC-3.3升级到3.4</title>
<section>
<title>简介</title>
<body>

<p>
由于C++ ABI的变化，不能从GCC-3.3无缝升级到3.4。<c>libstdc++</c>有一些细节要加以注意。
</p>

</body>
</section>
<section id="upgrade-3.3-to-3.4-choices">
<title>选择</title>
<body>

<impo>
如果你是从gcc3.4升级到4.1，请查阅<uri link="#upgrade-general">通用升级指引</uri>。
</impo>

<impo>
如果你是在SPARC机器上升级，由于GCC参数传递<uri link="http://gcc.gnu.org/gcc-3.4/sparc-abi.html">ABI的改变</uri>，需要参照<uri link="#upgrade-3.3-to-3.4-emerge-e">完整系统重建指南</uri>。
</impo>

<p>
如果你从gcc3.3升级到3.4，有两种办法来升级系统。<uri link="#upgrade-3.3-to-3.4-revdep-rebuild">第一种方法</uri>更快并要求使用<c>gentoolkit</c>包中的<c>revdep-rebuild</c>工具。<uri link="#upgrade-3.3-to-3.4-emerge-e">第二种方法</uri>是从头编译整个系统以使新GCC的特性能得以利用。用哪种方法取决于你自己。通常第一种方法就足够了。
</p>

<p>
如果你从gcc 3.3升级到4.1，就不能用基于revdep-rebuild的方法了，老实去<uri link="#upgrade-3.3-to-3.4-emerge-e">重建整个系统</uri>。
</p>

</body>
</section>
<section id="upgrade-3.3-to-3.4-revdep-rebuild">
<title>使用revdep-rebuild</title>
<body>

<p>
这个方法要求先安装<c>gentoolkit</c>。然后再升级GCC并切换到新版本。我们也要重建<c>libtool</c>包以保证toolchain处于正常状态。
</p>

<pre caption="安装gentoolkit并升级GCC">
# <i>emerge -an gentoolkit</i>
# <i>emerge -uav gcc</i>
<comment>（请用你的CHOST和所要升级的版本号来替换“i686-pc-linux-gnu-3.4.5”:)）</comment>
# <i>gcc-config i686-pc-linux-gnu-3.4.5</i>
# <i>source /etc/profile</i>

<comment>（重建libtool）</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
现在我们来看看revdep-rebuild想要重建哪些包，然后再真正地去重建。这要点时间，耐心点。
</p>

<pre caption="使用revdep-rebuild">
# <i>revdep-rebuild --library libstdc++.so.5 -- -p -v</i>
# <i>revdep-rebuild --library libstdc++.so.5</i>
</pre>

<note>
你可能会遇到包不存在、被屏蔽或者过时的问题。如果确实是这样，可以使用<c>revdep-rebuild</c>的<c>--package-names</c>选项。这样可以根据包的名称来重新编译软件包，而不必精确到具体的软件包版本。
</note>

<p>
需要在卸载系统里的GCC 3.3之前安装<c>sys-libs/libstdc++-v3</c>以提供对旧的二进制C++程序和revdep-rebuild漏掉的软件包的兼容性。
</p>

<pre caption="安装libstdc++-v3并清理">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
# <i>emerge -aC =sys-devel/gcc-3.3*</i>
</pre>

</body>
</section>
<section id="upgrade-3.3-to-3.4-emerge-e">
<title>使用emerge -e</title>
<body>

<p>
这种方法慢得多，需要重新编译整个系统以确保所有软件都用新编译器重新编译过，因此也更安全。首先，你要升级GCC和libtool然后切换到新的编译器。
</p>

<pre caption="升级GCC">
# <i>emerge -uav gcc</i>
<comment>（请用你的CHOST和所要升级的版本号来替换“i686-pc-linux-gnu-3.4.5”:)）</comment>
# <i>gcc-config i686-pc-linux-gnu-3.4.5</i>
# <i>source /etc/profile</i>

<comment>如果你是从gcc 3升级到4（例如这个例子里从3.3.6升级到4.1.1），需要手动运行fix_libtool_files.sh。</comment>
<comment>（用你在/etc/make.conf实际设置的CHOST来替换$CHOST）</comment>
<comment>（用你升级的新版本号代替&lt;gcc-version&gt;）</comment>
# <i>/usr/share/gcc-data/$CHOST/&lt;gcc-version&gt;/fix_libtool_files.sh 3.3.6</i>

<comment>（重建libtool）</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
需要安装<c>sys-libs/libstdc++-v3</c>来提供对旧的二进制C++程序的兼容性。
</p>

<pre caption="安装libstdc++-v3">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
</pre>

<p>
现在我们开始重建system，然后是world。这要很长时间，由所安装的软件包数量决定。同时也将重建整个toolchain，更新toolchain和每个软件包的系统支持文件。这能够保证所有软件包都能够被新的工具链重新编译，包括工具链本身。
</p>

<pre caption="重建system和world">
# <i>emerge -e system</i>
# <i>emerge -e world</i>
</pre>

<p>
这时候移除旧版本的GCC是安全的：
</p>

<pre caption="清理">
# <i>emerge -aC =sys-devel/gcc-3.3*</i>
</pre>

</body>
</section>
</chapter>

<chapter id="first-install">
<title>在第一次安装的系统上升级GCC</title>
<section>
<title>简介</title>
<body>

<p>
在刚从stage3 tarball安装的系统上做GCC升级是件简单的事。全新安装的优势是没有过多的软件链接到旧版GCC。下面的例子是从GCC-3.3升级到3.4。如果从其它版本的GCC升级某些步骤会有不同。例如，下面的<c>revdep-rebuild</c>所用的库名和安装<c>libstdc++-v3</c>的要求是由GCC 3.3决定的。
</p>

<p>
如果用户还没有制定系统，升级GCC到新版本只需少许几步。如果是GCC-3.3到3.4的升级，用户会有两种选择。然而，不像GCC-3.3升级到3.4，这里的方法要简单得多，因为两种方法都差不多。<uri link="#first-install-revdep-rebuild">第一种方法</uri>更快，其中利用了<c>gentoolkit</c>中的<c>revdep-rebuild</c>工具，类似于前面提到的步骤。使用revdep-rebuild只重新编译直接链接到GCC库的软件包。<uri link="#first-install-emerge-e">第二种方法</uri>要花更长的时间把整个新安装的系统用新的GCC编译一遍。第二种方法不是必需的，只是为了文档的完整而顺带提及。
</p>

<p>
第一步是两种方法共有的，每个人都要照着做。
</p>

<pre caption="升级GCC">
# <i>emerge -uav gcc</i>
<comment>（请用你的CHOST和所要升级的版本号来替换“i686-pc-linux-gnu-3.4.5”:)）</comment>
# <i>gcc-config i686-pc-linux-gnu-3.4.5</i>
# <i>source /etc/profile</i>

<comment>（重建libtool）</comment>
# <i>emerge --oneshot -av libtool</i>
</pre>

<p>
需要安装<c>sys-libs/libstdc++-v3</c>来提供对旧的二进制C++程序的兼容性。
</p>

<pre caption="安装libstdc++-v3">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
</pre>

</body>
</section>

<section id="first-install-revdep-rebuild">
<title>使用revdep-rebuild</title>
<body>

<p>
这种方法要先安装<c>gentoolkit</c>。然后运行<c>revdep-rebuild</c>扫描所安装软件中需要重新编译的部分，再重新编译他们。
</p>

<pre caption="安装gentoolkit并运行revdep-rebuild">
# <i>emerge -an gentoolkit</i>
# <i>revdep-rebuild --library libstdc++.so.5 -- -p -v</i>
# <i>revdep-rebuild --library libstdc++.so.5</i>
</pre>

<note>
你可能会遇到包不存在、被屏蔽或者过时的问题。如果确实是这样，可以使用<c>revdep-rebuild</c>的<c>--package-names</c>选项。这样可以根据包的名称来重新编译软件包，而不精确到具体的软件包版本。
</note>

</body>
</section>
<section id="first-install-emerge-e">
<title>使用emerge -e</title>
<body>

<p>
这个方法比较慢，将编译system目标以保证所有东西都用新的编译器编译过。这不是必需的，但如果你同时改动了CFLAGS或者make.conf中其他影响系统编译的变量，这么做是很正确的。
</p>

<p>
既然在初始化安装后做过了，我们就不需要重新编译<c>world</c>，等到升级的时候自然会做。当然，你也可以在升级system的时候顺带升级world，以保证所有的软件包都被升级过。
</p>

<pre caption="重建系统">
# <i>emerge -e system</i>
</pre>

</body>
</section>
<section id="first-install-cleaning-up">
<title>清理</title>
<body>

<p>
这时候移除旧版本的GCC是安全的。用你要升级的实际版本代替<c>YOUR-NEW-GCC-VERSION</c>：
</p>

<pre caption="清理">
# <i>emerge -aC "&lt;sys-devel/gcc-YOUR-NEW-GCC-VERSION"</i>
</pre>

</body>
</section>
</chapter>

<chapter id="common-pitfalls">
<title>常见误区</title>
<section>
<body>

<p>
在升级的时候禁用<c>distcc</c>很重要。混用不同版本的编译器<e>会</e>出错。升级也不需要ccache，因为所有的缓存目标都将失效。
</p>

<p>
必需使用相同版本的GCC来编译内核和相关模块。一旦用新的GCC重新编译了world，外部模块（如<c>app-emulation/qemu-softmmu</c>）就会无法载入。这时就要用新版的GCC重新编译内核来修复这个问题。
</p>

<p>
如果你在SPARC机器上升级，务必在重新编译world后运行<c>silo -f</c>来避免可能发生的问题。
</p>

</body>
</section>
<section>
<title>常见错误信息</title>
<body>

<p>
如果你的系统抱怨<e>libtool: link: `/usr/lib/gcc-lib/i686-pc-linux-gnu/3.3.6/libstdc++.la' is not a valid libtool archive</e>，请运行<c>/usr/share/gcc-data/$CHOST/&lt;gcc-version&gt;/fix_libtool_files.sh 3.3.6</c> （用出错信息中的版本号代替“3.3.6”，$CHOST和&lt;gcc-version&gt;也要一并替换）。
</p>

<p>
如果你见到<e>error: /usr/bin/gcc-config: line 632: /etc/env.d/gcc/i686-pc-linux-gnu-3.3.5: No such file or directory</e>，可以试试删除<path>/etc/env.d/gcc/config-i686-pc-linux-gnu</path>然后在<c>source /etc/profile</c>后再运行<c>gcc-config</c>。只能在你没有设置交叉编译器时才能这样做。
</p>

<p>
如果有包在<c>emerge -e system</c>或<c>emerge -e world</c>时失败，可以用<c>emerge --resume</c>继续下去。如果一个包反复失败，可以用<c>emerge --resume --skipfirst</c>跳过。不要开两个以上emerge实例，否则会错过摘要信息。
</p>

<p>
如果你在升级编译器的时候得到错误信息<e>spec failure: unrecognized spec option</e>，试试切换回默认的编译器，清除<c>GCC_SPECS</c>变量再升级GCC。
</p>

<pre caption="重置主要配置">
# <i>gcc-config 1</i>
# <i>source /etc/profile</i>
# <i>unset GCC_SPECS</i>
# <i>emerge -uav gcc</i>
</pre>

</body>
</section>
</chapter>
</guide>
