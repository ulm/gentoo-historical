<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/zh_cn/ipv6.xml,v 1.1 2011/04/04 04:47:55 r0bertz Exp $ --> 
<!-- English CVS version: 1.37 -->
<guide link="/doc/zh_cn/ipv6.xml" lang="zh_cn">
<title>Gentoo IPv6路由指南</title>

<author title="开发者">
  <mail link="latexer@gentoo.org">Peter Johanson</mail>
</author>
<author title="编辑">
  <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="编辑, 校对">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="编辑">
  <mail link="cam@gentoo.org">Camille Huot</mail>
</author>
<author title="编辑">
  <mail link="okun@hack.fi">Pasi Valminen</mail>
</author>
<author title="编辑">
  <mail link="nightmorph"/>
</author>
<author title="译者">
  <mail link="geraint0923@gmail.com">杨扬</mail>
</author>

<abstract>
这篇文章将指导你在Gentoo系统上安装配置IPv6。内容包括使用隧道代理来建立隧道, 一些基本的DNS设置以及配置客户端使得系统能够连接IPv6的地址。
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>4</version>
<date>2011-03-02</date>

<chapter>
<title>准备工作</title>
<section>
<title>基本的内核配置</title>
<body>

<p>
Gentoo里任何一个2.6系列的内核版本都可以很容易地支持IPv6连接。自从2.6.0版本以来，新版USAGI IPv6协议栈已经被集成到了内核里面。 
</p>

<pre caption="安装内核">
# <i>emerge gentoo-sources</i>
</pre>

<p>
现在我们准备进入内核源代码的目录，并且开始我们实际的内核配置
</p>

<pre caption="配置Linux内核">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<note>
这里假设 <path>/usr/src/linux</path> 已经指向你将要使用的内核。
</note>

<pre caption="'make menuconfig' 选项">
Device Drivers ---&gt;
Networking support ---&gt;
Networking options ---&gt;
   &lt;*&gt; The IPv6 protocol (EXPERIMENTAL)
<comment>（这个选项下面的IPv6子选项对于很多其他的应用程序有用，</comment>
<comment>但是对于基本的安装来说这不是必要的）</comment>

<comment>（这个选项只有在你想使用ptrtd来进行6to4转换时才需要）</comment>
[*] Network device support
   &lt;*&gt; Universal TUN/TAP device driver support
</pre>

</body>
</section>
<section>
<title>测试IPv6支持</title>
<body>

<p>
在开启了推荐的选项之后，重新编译您的内核并且重新启动，进入到您已经开启了IPv6支持的内核中。
</p>

<p>
如果您还没有安装<b>iproute2</b>，我们建议您现在就安装。
iproute2是一款的网络套件，其中包含了著名的<c>ip</c>，它可以替代<c>ifconfig</c>, <c>route</c>, <c>iptunnel</c> ...
</p>

<pre caption="安装iproute2">
# <i>emerge sys-apps/iproute2</i>
</pre>

<warn>
如果您拥有多个隧道设备，那么使用ifconfig会引发严重的问题。您必须按倒序移除隧道，也就是说最新的隧道首先被移除。您已经被警告。
</warn>

<p>
如果IPv6正在工作，回环设备将会显示一个IPv6的地址：
</p>

<pre caption="检查回环设备">
# <i>ip -6 addr show lo</i>
1: lo: &lt;LOOPBACK,UP&gt; mtu 16436
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
    <comment>（上面的这一行表明一切正常）</comment>
</pre>

<p>
在进行下一步的操作之前，请确保您已经将<e>ipv6</e>添加到您<path>make.conf</path>的USE变量列表中，这样在将来安装的软件包才会包含IPv6支持。
</p>

</body>
</section>
</chapter>

<chapter>
<title>隧道配置</title>
<section>
<title>基本的配置</title>
<body>

<p>
很多ISP（互联网服务供应商）仍旧不提供任何原生IPv6的连接。为了避开这一限制，全球有几家“隧道代理”提供免费的IPv6隧道。这将允许您在IPv4连接中使用隧道来完成你您所有的IPv6连接。
</p>

<table>
<tr><th>Broker</th><th>Location</th></tr>
<tr>
  <ti><uri link="http://tunnelbroker.net/">Hurricane Electric</uri></ti>
  <ti>North America, Europe, Asia</ti>
</tr>
<tr>
  <ti><uri link="http://gogonet.gogo6.com/">Freenet6</uri></ti>
  <ti>US</ti>
</tr>
<tr>
  <ti><uri link="http://www.sixxs.net/">Sixxs</uri></ti>
  <ti>Europe</ti>
</tr>
<tr>
  <ti><uri link="http://tunnel-broker.singnet.com.sg/">Singnet</uri></ti>
  <ti>Singapore</ti>
</tr>
<tr>
  <ti><uri link="http://broker.aarnet.net.au/">Aarnet</uri></ti>
  <ti>Australia/South Pacific</ti>
</tr>
</table>

<p>
下面是两个利用Hurricane Electric（也可以从sixxs.net获取隧道）和Freenet6这两个北美的隧道进行设置的例子。
</p>

</body>
</section>
<section>
<title>Hurricane Electric</title>
<body>

<p>
Hurricane Electric（简称HE）提供免费的IPv6隧道，同时为您提供一个/64的地址块。它还允许您设置反向DNS。从HE获取一个隧道是很容易的，只需要到<uri>http://www.tunnelbroker.net/</uri>填写一页的表格。
</p>

<note>
注册包含一系列的信息，比如您的地址和电话号码。
</note>

<p>
当您的隧道得到批准并且被分配了一个/64的地址块之后，您就能够设置您的Gentoo了。HE提供了基于ifconfig和iproute工具的示例。在接下来的两个例子中，假设您拥有下面的设置：
</p>

<table>
  <tr>
    <ti>Local IPv4 Address (eth0)</ti><ti>68.36.91.195</ti>
  </tr>
  <tr>
    <ti>HE IPv4 Address</ti><ti>64.71.128.82</ti>
  </tr>
  <tr>
    <ti>Local IPv6 tunnel Address</ti><ti>2001:470:1F00:FFFF::189</ti>
  </tr>
  <tr>
    <ti>IPv6 Block</ti><ti>2001:470:1F00:296::/64</ti>
  </tr>
</table>

<p>
使用iproute2包和<c>ip</c>命令，您可以按下面那样做：
</p>

<pre caption="配置一个IPv6隧道">
<comment>（在本地（eth0）IPv4和HE的远程IPv4地址（HE's remote IPv4 address）之间创建一个隧道）</comment>
# <i>ip tunnel add sixbone mode sit remote 64.71.128.82 local 68.36.91.195 ttl 64 dev eth0</i>
<comment>（从MTU中抽取使用隧道的开销）</comment>
# <i>ip link set sixbone mtu 1280</i>
<comment>（启动隧道）</comment>
# <i>ip link set sixbone up</i>
<comment>（为它分配IPv6地址）</comment>
# <i>ip addr add 2001:470:1F00:FFFF::189 dev sixbone</i>
<comment>（让所有的全球单播IPv6地址都通过我们的‘sixbone’隧道设备路由）</comment>
# <i>ip route add 2000::/3 dev sixbone</i>
</pre>

</body>
</section>

<section>
<title>Freenet6</title>
<body>

<p>
<uri link="http://gogonet.gogo6.com/">Freenet6</uri>是另一个免费的隧道代理。可选注册只需要一个用户名和一个合法的电子邮件地址。他们已经选择将隧道的管理变成了客户/服务器模式，并且已经开发出了一款叫做<c>gateway6</c>的客户端软件。这个客户端在Portage中是可用的。安装它需要做：
</p>

<pre caption="安装Freenet6客户端">
# <i>emerge gateway6</i>
</pre>

<p>
现在如果您选择带认证的连接，你需要配置<c>gateway6</c> 通过编辑<path>/etc/gateway6/gw6c.conf</path>。您只需修改<e>userid</e>和<e>passwd</e>部分成为Freenet6分配给您的那些，并且改变网关服务器。下面是一个配置文件的例子。
</p>

<pre caption="gw6c.conf例子">
auth_method=any
<i>userid=anonymous</i>
<i>passwd=foobar</i>
template=linux
server=broker.freenet6.net
</pre>

</body>
</section>

<section>
<title>测试您的连接</title>
<body>

<p>
既然您的隧道已经配置好了，那么您就可以测试您的连接了。最简单的方法就是使用
<c>ping6</c>软件包并试着ping
一个IPv6主机。
</p>

<pre caption="测试连接">
# <i>emerge iputils</i>
# <i>ping6 www.kame.net</i>
PING www.kame.net(orange.kame.net) 56 data bytes
64 bytes from orange.kame.net: icmp_seq=1 ttl=52 time=290 ms
64 bytes from orange.kame.net: icmp_seq=2 ttl=52 time=277 ms
64 bytes from orange.kame.net: icmp_seq=3 ttl=52 time=280 ms
64 bytes from orange.kame.net: icmp_seq=4 ttl=52 time=279 ms
64 bytes from orange.kame.net: icmp_seq=5 ttl=52 time=277 ms

--- www.kame.net ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4038ms
rtt min/avg/max/mdev = 277.040/281.041/290.046/4.699 ms
</pre>

<p>
正在进行的下一步工作是将更好的IPv6支持添加到网络初始化脚本中。如果您像了解这项工作的进展，并且（或者）想要帮忙，那么发邮件到<mail link="latexer@gentoo.org">latexer@gentoo.org</mail>.
</p>

</body>
</section>

</chapter>
<chapter>

<title>应用程序里的IPv6支持</title>

<section>
<title>Re-emerging软件包</title>
<body>

<p>
除非您以前已经将<e>USE="ipv6"</e>添加到您的<path>/etc/make.conf</path>
中去了，否则您可能需要re-emerge（重新安装）一堆软家包并把IPv6支持编译进去。要像知道所有已经安装的软家包中有哪些因为USE标记的改变而受到影响，可以使用Portage的<c>--newuse</c> (<c>-N</c>)选项
</p>

<pre caption="需要re-emerging的候选软件包">
# <i>emerge -uDNav world</i>
</pre>

<p>
如果您已经改变了很多的USE标记，那么列表将会很长。我们建议将您的系统保持最新，如果您重新编译所有受影响的软件包的话，系统将不会受到损坏。
</p>

<note>
一些软件包会自动检测IPv6支持，因此没有IPv6的USE标记。因此，并不是所有应该支持IPv6的软件包都会支持IPv6，如果您编译它的时候并没有一个支持IPv6的内核。
</note>

</body>
</section>

<section>
<title>IPv6具体软件包</title>
<body>

<p>
有几个软件包解决具体的IPv6问题，它们中的大部分都在<path>/usr/portage/net-misc</path>中。
</p>

<table>
<tr><th>软件包</th><th>描述</th></tr>
<tr>
  <ti>net-misc/ipv6calc</ti>
  <ti>将一个IPv6地址转换成压缩格式</ti>
</tr>
<tr>
  <ti>net-misc/netcat6</ti>
  <ti>支持IPv6和IPv4的netcat版本</ti>
</tr>
<tr>
  <ti>dev-perl/Socket6</ti>
  <ti>C socket.h的定义和机构操作中与IPv6相关的部分</ti>
</tr>
</table>

</body>
</section>
</chapter>


<chapter>
<title>DNS设置</title>
<section>
<title>IPv6和DNS</title>
<body>

<p>
正如IPv4的DNS使用A记录那样，IPv6的DNS使用AAAA记录。（这是因为IPv4是一个2^32的地址空间，而IPv6是一个2^128的地址空间）对于反向DNS，INT已经过时，但是仍旧被广泛支持。ARPA 是最新的标准。这里将描述支持ARPA的格式。
</p>

</body>
</section>

<section>
<title>BIND配置</title>
<body>

<p>
最新的BIND版本包含优秀的IPv6支持。这一部分将假设您至少已经有了配置和使用BIND的最基本知识。我们将假设您并不是在chroot中运行bind。如果您使用了chroot，那么只需简单地追加chroot前缀到接下来那一部分的大多数路径中。
</p>

<p>
首先您需要向<path>/etc/bind/named.conf</path>区域文件中的添加转发和反向的DNS条目。
</p>

<pre caption="named.conf条目">
<comment>（我们允许bind在IPv6地址上监听。</comment>
<comment>对于bind-9.3之前的版本，使用'any'是实现它的唯一方法）</comment>
options {
    [...]
    listen-on-v6 { any; }
    [...]
};
<comment>（这将会为域名'ipv6-rules.com'提供DNS转发：）</comment>
zone "ipv6-rules.com" IN {
    type master;
    file "pri/ipv6-rules.com";
};
<comment>（对反向DNS来说，这样的格式是“按位”进行的。它将通过使用IPv6前缀，</comment>
<comment>反转数字的顺序，并且在数字之间放一个段）</comment>
zone "6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa" {
        type master;
        file "pri/rev-ipv6-rules.com.arpa";
};
</pre>

<p>
现在我们必须创建区域文件并为我们所有的主机添加相应的条目：
</p>

<pre caption="pri/ipv6-rules.com">
$TTL    2h
@       IN      SOA     ipv6-rules.com. webmaster.ipv6-rules.com.  (
                                2003052501 ; Serial
                                28800      ; Refresh
                                14400      ; Retry
                                3600000    ; Expire
                                86400 )    ; Minimum
                NS      ns1.ipv6-rules.com

        IN      AAAA    2001:470:1f00:296::1 ; address for ipv6-rules.com
host1   IN      AAAA    2001:470:1f00:296::2 ; address for host1.ipv6-rules.com
host2   IN      AAAA    2001:470:1f00:296::3:3 ; address for host2.ipv6-rules.com
</pre>

<pre caption="pri/rev-ipv6-rules.com.arpa">
$TTL 3d ; Default TTL (bind 8 needs this, bind 9 ignores it)
@       IN SOA ipv6-rules.com. webmaster.ipv6-rules.com. (
                        2003052501      ; Serial number (YYYYMMdd)
                        24h             ; Refresh time
                        30m             ; Retry time
                        2d              ; Expire time
                        3d )            ; Default TTL
        IN      NS     ns1.ipv6-rules.com.
; IPv6 PTR entries
$ORIGIN 6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa.

1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     ipv6-rules.com.
2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     host1.ipv6-rules.com.
3.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     host2.ipv6-rules.com.
</pre>

</body>
</section>

<section>
<title>DJBDNS配置</title>
<body>

<p>
目前，存在一些可用于DJBDNS的第三方补丁，可以在<uri>http://www.fefe.de/dns/</uri>上面找到，这些补丁可以让DJBDNS进行IPv6名字服务。设置<e>ipv6</e>的USE标记来安装（emerge）DJBDNS会自动安装这些补丁。
</p>

<warn>
这些补丁并不支持所有的记录类型。特别是NS和MX记录不被支持。
</warn>

<pre caption="安装djbdns">
# <i>emerge djbdns</i>
</pre>

<p>
在安装djbdns之后，可以通过运行<c>tinydns-setup</c>并回答一些问题来进行设置，这些问题是关于哪些IP地址将被绑定，在哪里安装tinydns，等等。
</p>

<pre caption="设置tinydns">
# <i>tinydns-setup</i>
</pre>

<p>
假设我们已经将<c>tinydns</c>安装到了<path>/var/tinydns</path>里，
现在我们可以编辑<path>/var/tinydns/root/data</path>。这个文件将包含让tinydns为您的IPv6委托处理DNS所需要的所有数据。
</p>

<pre caption="数据文件例子">
<comment>（192.168.0.1将权威地处理*.ipv6-rules.com）</comment>
.ipv6-rules.com:192.168.0.1:a:259200
<comment>（2001:470:1f00:296::/64的权威反向DNS）</comment>
.6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa:192.168.0.1:a
<comment>（为host1和host2指定IP）</comment>
6host1.ipv6-rules.com:200104701f0002960000000000000001:86400
6host2.ipv6-rules.com:200104701f0002960000000000000002:86400
<comment>（将www指向host1）</comment>
3www.ipv6-rules.com:200104701f0002960000000000000002:86400
</pre>

<p>
前缀有一个<c>6</c>的那些行将同时创建一个AAAA和一个PTR记录。那些前缀有一个<c>3</c>的行将只创建一个AAAA记录。除了手动编辑<path>data</path>文件之外，您可以使用<c>add-host6</c>脚本和<c>add-alias6</c>脚本来添加新的条目。
在修改<path>data</path>文件之后，您需要简单地从<path>/var/tinydns/root</path>运行<c>make</c>。这将会创建<path>/var/tinydns/root/data.cfb</path>，tinydns将会使用这个文件作为它的信息源来处理DNS请求。
</p>

</body>
</section>
</chapter>


<chapter>
<title>IPv6路由</title>
<section>
<title>设置路由</title>
<body>

<p>
如果我们想要让我们的系统成为一个路由以便其他客户端能够通过IPv6连接外部的世界的话，那么需要进一步的设置。我们需要开启IPv6的包转发功能。我们可以通过下面两种方式中的一种做到这一点。
</p>

<pre caption="开启转发功能">
# <i>echo 1 > /proc/sys/net/ipv6/conf/all/forwarding</i>
or
# <i>sysctl -w net.ipv6.conf.all.forwarding=1</i>
</pre>

<warn>
在下一章中将会解释的<c>radvd</c>初始化脚本能够开启（和关闭）转发功能， 这将使下一步骤成为不必要的步骤。
</warn>

<p>
为了在开机的时候开启转发，您将需要编辑<path>/etc/sysctl.conf</path>并且添加下面这一行。
</p>

<pre caption="sysctl.conf附加部分">
<comment>（如果你将要使用radvd，这一步不是必要的）</comment>
net.ipv6.conf.default.forwarding=1
</pre>

<p>
数据流量现在将会从这台机子被转发出去，转发的道路就是利用我们的代理所建立的隧道。
</p>

<p>
要给客户端分配IPv6地址，IPv6规范允许无状态和有状态两种IP分配方式。无状态分配使用一个叫做路由广告的进程，并且可以让客户端做到，只要简单地把设备接口（interface）启动就可以获得一个IP和一个默认路由。这种方式被称为“无状态”，这是因为没有记录分配的IP和主机。有状态分配是通过DHCPv6进行处理的。这种方式之所以被称为”有状态“，是由于服务器保存了请求和获取IP的客户端的状态。
</p>

</body>
</section>

<section>
<title>无状态设置</title>
<body>

<p>
通过路由广告守护进程或者<c>radvd</c>，无状态设置将会很容易完成。
</p>

<pre caption="配置radvd">
# <i>emerge radvd</i>
</pre>

<p>
在安装了<c>radvd</c>之后，我们需要创建<path>/etc/radvd/radvd.conf</path>，这个文件包含了我们应该从哪个地址块分配IP这样的信息。这是一个<path>radvd.conf</path>文件的例子，这里面使用了我们的隧道代理分配给我们的前缀。
</p>

<pre caption="radvd.conf例子">
interface eth1
{
        <comment>（将广告信息发送到其他的主机）</comment>
        AdvSendAdvert on;
        <comment>（分片大小并不好（tm））</comment>
        AdvLinkMTU 1280;
        MaxRtrAdvInterval 300;
        <comment>（我们的PoP分配给我们的子网前缀）</comment>
        prefix 2001:470:1F00:296::/64
        {
                AdvOnLink on;
                AdvAutonomous on;
        };
};
</pre>

<warn>
请确保第一行中的设备接口是正确的，这样您就可以将路由广告广播到您的内部网而不是您的ISP那里！
</warn>

<p>
通过<c>man radvd.conf</c>可以得到更多的信息。我们现在能够启动<c>radvd</c>并将它设置为开机时启动。
</p>

<pre caption="开启radvd">
# <i>/etc/init.d/radvd start</i>
# <i>rc-update add radvd default</i>
</pre>

</body>
</section>

<section>
<title>有状态设置</title>
<body>

<p>
如果您想要使用有状态设置，您将需要安装并且配置dhcpv6。
</p>

<pre caption="安装dhcpv6">
# <i>emerge dhcpv6</i>
</pre>

<p>
接下来我们必须编辑<path>/etc/dhcp6s.conf</path>来配置DHCPv6服务器。
</p>

<pre caption="dhcp6s.conf例子">
prefer-life-time 10000;
valid-life-time 20000;
renew-time 5000;
rebind-time 8000;
interface eth1 {
    link AAA {
        allow unicast;
        send unicast;
        allow rapid-commit;
        send server-preference 5;
        renew-time 1000;
        rebind-time 2400;
        prefer-life-time 2000;
        valid-life-time 3000;
        pool{
            range 2001:470:1f00:296::10 to 2001:470:1f00:296::110/64;
            prefix 2001:470:1f00:296::/64;
        };
    };
};
</pre>

<p>
我们现在可以开启dhcp6s，并且将它设置为在开机时启动。
</p>

<pre caption="开启dhcp6s">
# <i>/etc/init.d/dhcp6s start</i>
# <i>rc-update add dhcp6s default</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>IPv6客户端</title>
<section>
<title>使用radvd</title>
<body>

<p>
在这个路由之后的客户端现在应该能够通过IPv6连接其余的网络了。如果使用radvd，设置主机应该就像将设备启动一样简单。（您的net.ethX初始化脚本可能已经帮您做好了这项工作）。
</p>

<pre caption="通过IPv6连接">
# <i>ip link set eth0 up</i>
# <i>ip addr show eth0</i>
1: eth0: &lt;BROADCAST,MULTICAST,UP&gt; mtu 1400 qdisc pfifo_fast qlen 1000
    link/ether 00:01:03:2f:27:89 brd ff:ff:ff:ff:ff:ff
    inet6 2001:470:1f00:296:209:6bff:fe06:b7b4/128 scope global
       valid_lft forever preferred_lft forever
    inet6 fe80::209:6bff:fe06:b7b4/64 scope link
       valid_lft forever preferred_lft forever
    inet6 ff02::1/128 scope global
       valid_lft forever preferred_lft forever
</pre>

</body>
</section>

<section>
<title>使用DHCPv6</title>
<body>

<p>
如果您的路由被设置成使用DHCPv6，那么您的客户端将同样需要安装<c>net-misc/dhcpv6</c> 软件包。在做完这些之后，您需要编辑<path>/etc/dhcp6c.conf</path>来配置您的客户端。
</p>

<pre caption="dhcp6c.conf例子">
interface eth0 {
        send rapid-commit;
        request domain-name-servers;
        iaid 11111;
        renew-time 11000;
};
</pre>

</body>
</section>
</chapter>

<chapter>
<title>其他资源</title>
<section>
<body>

<p>
这里有很多关于IPv6的在线资源。
</p>

<table>
<tr><th>网站</th><th>资源</th></tr>
<tr>
  <ti><uri link="http://www.ipv6.org/">www.ipv6.org</uri></ti>
  <ti>General IPv6 Information</ti>
</tr>
<tr>
  <ti><uri link="http://www.linux-ipv6.org/">www.linux-ipv6.org/</uri></ti>
  <ti>USAGI Project</ti>
</tr>
<tr>
  <ti><uri link="http://www.deepspace6.net/">www.deepspace6.net</uri></ti>
  <ti>Linux/IPv6 site</ti>
</tr>
<!-- dead, was hacked<tr>
  <ti><uri link="http://www.hs247.com/">www.hs247.com</uri></ti>
  <ti>All things IPv6</ti>
</tr>-->
<!-- dead, not responding<tr>
  <ti><uri link="http://www.ipv6-net.org/">www.ipv6-net.org</uri></ti>
  <ti>German IPv6 site</ti>
</tr>-->
<tr>
  <ti><uri link="http://www.kame.net/">www.kame.net</uri></ti>
  <ti>*BSD implementation</ti>
</tr>
</table>

<p>
在IRC上，您可以试试<uri link="http://www.freenode.net/">Freenode</uri>上的 <c>#ipv6</c>。您可以使用一个支持IPv6的客户端来连接<b>irc.ipv6.freenode.net</b>以便连接到Freenode服务器。
</p>

</body>
</section>
</chapter>
</guide>
