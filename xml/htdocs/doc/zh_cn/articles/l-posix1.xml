<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header -->
<!-- English CVS version: 1.4 -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/zh_cn/articles/l-posix1.xml" disclaimer="articles">
<title>POSIX threads详解，第1部分</title>

<author title="作者">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="译者">
  <mail link="jiang.adam@gmail.com">蒋超</mail>
</author>

<abstract>
POSIX（Portable Operating System Interface）线程是提高代码的响应速度和性能的非常棒的方法。这个系列文章中，Daniel Robbins将为你展示如何在代码中使用线程。本文中也涵盖了很多内部机制的细节，所以，当你读完这个系列的文章时，创建多线程程序对你来说应该不是什么问题了。
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.2</version>
<date>2005-10-09</date>

<chapter>
<title>简单又灵活的内存共享工具</title>
<section>
<title>有趣的线程</title>
<body>

<p>
知道如何正确使用线程应该是每个好程序员的绝活之一。线程和进程类似。与进程一样，它们都被内核划分为时间片（译者注：time-sliced）运行。在单处理器（uniprocessor）系统上，与对进程采取时间片划分的方式一样，内核使用时间划分来模拟线程的并行运行。并且，在多处理器系统上，线程也可以实际得并行的运行，这一点和多个进程的并行运行也是一致的。
</p>

<p>
那么，对于大多数交互任务而言，相对于多个独立的进程，为什么多线程是更好的解决方案呢？答案很简单，线程可以共享相同的内存空间。独立线程可以访问内存中相同的变量。所以，程序中所有的线程可以读或者写全局整型变量。如果你曾编写过一些比较正式的使用fork()系统调用的代码，你肯定会认识到这一点是多么重要。为什么呢？虽然fork()可以帮你创建多个进程，但同时他也带来了通信问题：怎样可以创建一些各自拥有独立内存空间的进程，并且同时让它们之间通信呢？这个问题的答案可一点都不简单。即便有很多本地IPC（译者注：inter-process communication，进程间通讯机制）可以使用，可是它们都存在两个重大问题：
</p>

<ul>
  <li>它们会给内核增加额外的开销，并且会降低性能。
  </li>
  <li>大多数情况下，IPC不是你的代码上的“自然”的扩展。它会戏剧性的增加程序的复杂性。
  </li>
</ul>

<p>
两个副作用：额外的开销和复杂性都不是好东西。如果你曾经对你的程序做大量的修改才使它支持IPC的话，你肯定会对线程提供的简单的共享内存方法感激不尽。POSIX线程不需要昂贵又复杂的长距离调用，因为，所有线程正好“住”在一起。通过一些小小的同步，所有线程就可以读写该程序现有数据结构。你不必通过文件描述服来抽取数据，也不必将数据挤进一个狭小的共享内存空间中。哪怕只因为这一点，你都应该考虑使用单进程/多线程模型而不是使用多进程/单线程模型。
</p>

</body>
</section>
<section>
<title>灵活的线程</title>
<body>

<p>
但是，还有很多。线程也恰好非常灵活。相比于标准fork()调用，它们只需要很小的开销。内核不需要创建一个进程的内存空间、文件描述符等等的独立拷贝。这就节省了很多CPU时间，它使得创建线程相比创建进程来说要快十倍到百倍。也正因为如此，你可以使用一大堆进程却不必太担心由此带来的CPU和内存开销。假如你使用fork()的话可不会获得这么高效的CPU使用率。这意味着只要有必要你随时都可以创建线程。
</p>

<p>
当然，和进程一样，线程也会利用多CPU的优势。如果你的软件是专为多处理器机器设计的话（如果软件是开源的，总归它会被很多这样的系统使用），这真是一个非常棒的功能。对某些种类的线程化程序（具体的说就是CPU密集型）而言，它的性能会随着CPU数目的增加而呈线性增长。如果你正在写一个CPU密集型程序，你肯定想要找到在代码中使用多线程的方法。一旦你熟悉了编写线程化代码，你也可以采用新的更有创造性的方法迎接大型代码的挑战——不需要那么多繁琐的IPC，也不需要其他琐碎的杂七杂八的东西。所有这些有优点加在一起就让多线程编程更加有趣、快速和灵活。
</p>

</body>
</section>
<section>
<title>使用clone就可以了吗？</title>
<body>

<p>
如果你已经在Linux编程的世界里待了一段时间了，你可能听说过__clone()系统调用。__clone()与fork()非常类似，但却能够做很多线程可以做的事。例如，使用__clone()你可以选择性的在子进程中共享父进程的运行上下文（内存空间、文件描述服等等）。这很好。但是，提到__clone()还有一个不是那么好的事。正如__clone()的手册页所说的那样：
</p>

<pre caption="__clone()手册页片段">
    “__clone系统调用是Linux专有的，并且，它不能被用于那些追求可移植性的
    程序。对于编写线程化应用程序（在同一个内存空间中多个控制绪），最好使
    用实现了POSIX 1003.1C线程API的库，比如Linux-Threads库。详情查看
    pthread_create(3thr)。“（译者注：并非中文版手册页原文）
</pre>

<p>
所以，尽管__clone()提供了线程的很多好处，它却是不可移植的。这并不是说你不能在代码中使用它。但是，当你在软件中使用__clone的时候，你必须将这个因素考虑进来掂量掂量。幸运的是，正如__clone的手册页所言，还有一个更好的替代方案：POSIX线程。当你想要写可移植的多线程代码，而这些代码需要运行在Solaris、FreeBSD、Linux和更多其他系统上时，POSIX线程是不二之选。
</p>

</body>
</section>
<section>
<title>开启线程</title>
<body>

<p>
这是一个使用了POSIX线程的简单例子：
</p>

<pre caption="使用POSIX线程的例程">
#include &lt;pthread.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;

void *thread_function(void *arg) {
  int i;
  for ( i=0; i&lt;20; i++ ) {
    printf("Thread says hi!\n");
    sleep(1);
  }
  return NULL;
}

int main(void) {

  pthread_t mythread;
  
  if ( pthread_create( &amp;mythread, NULL, thread_function, NULL) ) {
    printf("error creating thread.");
    abort();
  }

  if ( pthread_join ( mythread, NULL ) ) {
    printf("error joining thread.");
    abort();
  }

  exit(0);

}
</pre>

<p>
将这个程序保存为文件thread1.c，并且使用下面的命令编译程序：
</p>

<pre caption="编译上面的程序">
$ <i>gcc thread1.c -o thread1 -lpthread</i>
</pre>

<p>
键入如下命令运行它：
</p>

<pre caption="运行这个程序">
$ <i>./thread1</i>
</pre>

</body>
</section>
<section>
<title>理解thread1.c</title>
<body>

<p>
<path>thread1.c</path>是个非常简单的线程化程序。虽然它实际上没做什么有用的事，但是它可以帮助你理解线程如何工作。让我们一步步看看这个程序都做了些什么。在main()函数中，我们首先声明了一个叫做mythread的变量，而且它是pthread_t类型。在头文件<path>pthread.h</path>中定义的pthread_t类型通常被称为“thread id”（简称“tid”）。你可以将它想象成某种线程句柄。
</p>

<p>
在mythread声明之后（请记住，mythread只是一个“tid“，或者说，它只是我们将要创建的线程的句柄），我们调用pthread_create函数来创建一个真正的、活动的线程。不要因为pthread_create()调用被内嵌在if语句中而感到迷惑。这是因为，pthread_create()执行成功的话会返回零，而如果失败，则返回非零值，将函数调用放入if()中只是用来侦测pthread_create()调用是否成功的非常有效的方法。让我们看看传递给pthread_create的参数。第一个参数是指向mythread的指针&amp;mythread。第二个参数，本例中设置为NULL，可以用来给该线程定义某些特定的属性。因为默认的线程属性对我们来说已经够用了，所以，这里只将其指定为NULL。
</p>

<p>
第三个参数是当新线程启动的时候它将要执行函数的函数名。例子中的该函数名成为thread_function()。当thread_function()返回时，新创建的进程就会终止。本例中，这个线程函数并没有做什么惊天动地的事，它只是在输出“Thread says hi!“20次后退出而已。值得注意的是，thread_function()可以接受void *类型的变量作为参数，并且，也可以返回一个void *类型的返回值。这意味着我们可以使用void *给我们的新线程传递任意的数据。怎么做呢？很简单。我们可以使用pthread_create()调用的第四个参数。上面的例子中，我们只是将其设为NULL，因为我们不需要传递任何数据给这个简单的线程。
</p>

<p>
你可能已经猜到了，在pthread_create()调用成功以后，程序将会由两个线程组成。等一下，两个线程？！我们不是只创建了一个线程吗？是的，我们只“新建“了一个，但是我们的主程序也是一个线程。你可以这样理解，如果你写了一个根本没有用到POSIX线程的程序，这个程序就是单线程的（这个单个线程被叫做主线程）。用我们上面例子中的方法创建一个新的线程，那么我们的程序中总共就有两个线程了。
</p>

<p>
我猜此时此刻你至少有两个重要的问题想要提问。第一个问题是当创建新线程后主线成在做什么。答案是，它会继续按照顺序执行程序的下一行（本例中的“if (pthread_join(...))”）。第二个你想知道的问题可能是当新建的线程退出时会发生什么。它会停下来并且等待合并或者“join”，以便做一些清理工作。
</p>

<p>
好了，现在讲一讲pthread_join()。pthread_create()将单一线程拆分为两个线程，而pthread_join()却恰恰相反，它会将两个线程重新合并为一个线程。pthread_join()的第一个参数就是tid，这里是mythread。第二个参数是指向void指针类型的指针。如果void指针不为NULL，pthread_join将会把线程函数的void *型返回值放到通过该参数指定的位置上去。因为我们并不关心thread_function()的返回值，就在这里将它设为NULL。
</p>

<p>
你会注意到thread_function()需要经历20秒才能结束。但是远在thread_function()结束之前，主线程就已经调用了pthread_join()。这样做了以后，主线程就会阻塞（进入睡眠状态）并且等着thread_function()直到它完成。当thread_function()完成时，pthread_join()才会返回。程序又回到只有一个线程的状态。当程序结束时，所有新建进程都需要做pthread_join()。这事实上也是你必须为每个新建线程所做的必要工作。如果某个线程没有被合并，它就会一直消耗系统可支持的线程数目，这意味着，没有正确的清理由pthread_create()创建的线程会最终导致新的pthread_creat()调用失败而不能创建新的线程。
</p>

</body>
</section>
<section>
<title>没有父线程，也没有子线程</title>
<body>

<p>
如果你有使用过fork()系统调用的经验，那么你肯定对父、子进程的概念非常熟悉。如果一个进程使用fork()创建了另一个进程，新进程被称为子进程，而原来的进程被成为父进程。这就创建了一种很容易操作的继承结构，特别是在等待子进程结束的处理中尤其明显。例如，waitpid()函数会让当前进程等待某个子进程的结束。waitpid()可以用来在父进程中实现一个简单的清理函数。
</p>

<p>
对POSIX线程而言，这个过程就更有趣了。你可能已经发现了，我故意避开谈到“父线程”、“子线程”这样的术语。这是因为在POSIX线程之间这种继承关系是不存在的。虽然主线程可以创建新的线程，并且，新线程也可以再次创建其他线程，但是POSIX线程标准却将所有的线程一视同仁——它们只是一个个独立的线程罢了。所以，等待子线程结束的说法说不通。POSIX线程标准不会记录任何“家族”信息。这种没有家谱的情况主要意味着：如果你想要等待某个线程结束，你需要通过传递适当的tid给pthread_join()的方式明显的告诉它你在等哪个。线程库不能帮你指出这一点。
</p>

<p>
对大多数人来讲，这可不是个好消息。因为它可能会让拥有大于两个线程的程序变得相当复杂。别担心。因为，POSIX线程标准提供了足够的工具帮助你优雅得管理好多个线程。事实上，这种没有父子关系状况却打开了在程序中创造性得使用线程的希望之门。例如，有一个线程叫做thread 1，而thread 1又创建了新线程thread 2，因为没有父子关系存在，所以不必一定要在thread 1中才能调用pthread_join()来合并thread 2。程序中的任何其他进程也可以做到这一点。这还给编写重型多线程代码提供了很有趣的可能性。例如，你可以创建一个全局的“死亡列表”，其中保存了所有停止的线程，同时，创建一个专门用于清理的线程监视这个列表。该清理线程一旦发现这个列表中加入了新的项目，它就会调用pthread_join()函数来将其与自身合并。这样，整个清理工作就可以被一个单独的线程以一种清晰又高效的方式处理完成。
</p>

</body>
</section>
<section>
<title>花样游泳</title>
<body>

<p>
接下来，让我们来看一个会产生意料之外结果的程序。看看thread2.c：
</p>

<pre caption="thread2.c">
#include &lt;pthread.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt;

int myglobal;

 void *thread_function(void *arg) {
  int i,j;
  for ( i=0; i&lt;20; i++ ) {
    j=myglobal;
    j=j+1;
    printf(".");
    fflush(stdout);
   sleep(1);
    myglobal=j;
  }
  return NULL;
}

int main(void) {

  pthread_t mythread;
  int i;

  if ( pthread_create( &amp;mythread, NULL, thread_function, NULL) ) {
    printf("error creating thread.");
    abort();
  }

  for ( i=0; i&lt;20; i++) {
    myglobal=myglobal+1;
    printf("o");
    fflush(stdout);
    sleep(1);
  }

  if ( pthread_join ( mythread, NULL ) ) {
    printf("error joining thread.");
    abort();
  }

  printf("\nmyglobal equals %d\n",myglobal);

  exit(0);

}
</pre>

</body>
</section>
<section>
<title>理解thread2.c</title>
<body>

<p>
和第一个例子一样，这个程序也创建了一个新线程。主线程和新建线程都会增加全局变量myglobal各20次。但是，程序却会输出一些意想不到的结果。编译它：
</p>

<pre caption="编译程序">
$ <i>gcc thread2.c -o thread2 -lpthread</i>
</pre>

<p>
接着，运行：
</p>

<pre caption="运行">
$ <i>./thread2</i>
..o.o.o.o.oo.o.o.o.o.o.o.o.o.o..o.o.o.o.o
myglobal equals 21
</pre>

<p>
出乎意料之外！因为myglobal初始化为0，并且主线程和新建线程都会将它增加20次，那么最终我们应该看到myglobal的值变成40啊！而现在myglobal的值却是21，到底发生了什么鬼事情？
</p>

<p>
想不出来？好吧，我告诉你究竟发生了什么。看看thread_function()。有没有注意到我们将全局变量myglobal拷贝到了一个叫做j的局部变量里？然后我们增加j，睡眠一秒钟，然后才将j的值赋予myglobal。这是关键。想象一下在新建线程将myglobal的值拷贝到j<e>以后</e>，主线程才去增加myglobal的情况，这会导致什么？当thread_function()将j的值写回到myglobal时，它回覆盖主线程对myglobal的修改。
</p>

<p>
编写线程化程序的时候，你得想办法避免发生像我们正在看的这个例子中的这些毫无用处的副作用。因为它们只是在浪费时间（当然，除非你在写一篇关于POSIX线程的文章：））。那么如何消除这种麻烦呢？
</p>

<p>
问题的原因在于我们将myglobal拷贝到了j，并且保持一秒以后才将它写回，所以我们可以试着避免使用临时局部变量而直接增加myglobal。虽然如此就可以解决上面这个特例中的问题，但是这却不是正确的做法。而且，假如我们对myglobal做比较复杂的算数操作而不是只简单的累加，它肯定会失败的。但是，为什么呢？
</p>

<p>
你必须记住线程是并行运行的才能理解这个问题。甚至对于只有一个处理器的机器（其上内核通过时间片来模拟真正的多任务）来说，从程序员的角度看上去，我们也可以认为两个线程可以同时执行。thread2.c之所以有问题是因为thread_function()中的代码的正确性依赖于这样一个假设，即就是myglobal在其被累加之前的～1秒钟的时间内不会被修改。我们需要在这个线程对myglobal进行修改的时候可以告诉其他线程先“靠边站“的方法。我会在下一篇文章中告诉你如何才能做到这一点。再见。
</p>

</body>
</section>
</chapter>

<chapter>
<title>参考资料</title>
<section>
<body>

<ul>
  <li>阅读Daniel的POSIX thread详解的<uri link="l-posix2.xml">第2部分</uri>和<uri link="l-posix3.xml">第3部分</uri>。
  </li>
  <li>查看Sean Walton和KB7rfa合著的<uri link="http://metalab.unc.edu/pub/Linux/docs/faqs/Threads-FAQ/html/">Linux threads</uri>。 
  </li>
  <li>完成Arizona大学的Mark Hays写的POSIX线程<uri link="http://www.math.arizona.edu/swig/pthreads/threads.html">教程</uri>。
  </li>
  <li>在<uri link="http://hwaci.com/sw/pttcl/pttcl.html">An Introduction to Pthreads-Tcl</uri>一文中可以看到Tcl做了那些变更才让它支持POSIX线程的。
  </li>
  <li>还可以尝试一下由马塞诸塞大学的Tom Wagner和Don Towsley还有Amherst所写的另外一个教程<uri link="http://dis.cs.umass.edu/~wagner/threads_html/tutorial.html">Getting Started with POSIX Threads</uri>。
  </li>
  <li>随时查看手册页（<c>man -k pthread</c>）。
  </li>
  <li> <uri link="http://moss.csc.ncsu.edu/~mueller/pthreads/">FSU PThreads</uri>是实现了POSIX线程的C库，它的目标平台包括SunOS 4.1.x、Solaris 2.x、SCO UNIX、FreeBSD、Linux和DOS。
  </li>
  <li>参考一下<uri link="http://www.sai.msu.su/sal/C/2/PCTHREADS.html">POSIX and DCE threads for Linux</uri>。
  </li>
  <li>看看<uri link="http://pauillac.inria.fr/~xleroy/linuxthreads/">The LinuxThreads Library</uri>
  </li>
  <li><uri link="http://www.users.itl.net.ua/~prool/proolix.html">Proolix</uri>是为i8086+所写的一个简单的兼容POSIX的操作系统，尚在开发之中。
  </li>
  <li>看看David R. Butenhof的书<uri link="http://www.amazon.com/exec/obidos/ASIN/0201633922/o/qid=961544788/sr=8-1/ref=aps_sr_b_1_1/002-2882413-1227240">Programming with POSIX Threads</uri>，这本书中，除了其他事情，他还涵盖了不使用互斥锁的一个可能的顺序方法。
  </li>
  <li>查看以下W. Richard Stevens的书<uri link="http://search.borders.com/fcgi-bin/db2www/search/search.d2w/Details?&amp;mediaType=Book&amp;prodID=2362607">UNIX Network Programming: Network APIs: Sockets and XTI, Volume 1</uri>
  </li>
</ul>

</body>
</section>
</chapter>

</guide>
