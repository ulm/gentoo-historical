<?xml version='1.0' encoding="iso-8859-1"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/da/devfs-guide.xml,v 1.1 2004/01/02 13:58:42 aaby Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/da/devfs-guide.xml">
<title>Device File System Vejledningen</title>
<author title="Forfatter">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Reviewer">
  <mail link="seemant@gentoo.org">Seemant Kulleen</mail>
</author>
<author title="Oversætter">
  <mail link="aaby@gentoo.org">Arne Mejlholm</mail>
</author>
<author title="Korrektur">
  <mail link="broeman@gentoo.org">Jesper Brodersen</mail>
</author>

<abstract>
I dette dokument finder du information om hvad devfs virkelig handler
om og hvordan du arbejder med det.
</abstract>

<license/>

<version>0.1</version>
<date>11. September 2003</date>

<chapter>
<title>Hvad er devfs?</title>
<section>
<title>De (gode?) gamle dage</title>
<body>

<p>
Traditionelle Linux implementationer giver deres brugere en abstrakt
enhedssti, ved navnet <path>/dev</path>. Inde i denne sti finder
brugeren <e>enhedsnoder</e>, som er specielle filer, der repræsenterer
enheder i deres system. F.eks., repræsenterer <path>/dev/hda</path>
den første IDE enhed i deres system. Ved at stille enhedsfiler til
rådighed for brugerne, kan de lave programmer, der kan interagere med
hardware, som om at hardwaren var en almindelig fil i stedet for at
bruge specielle APIer.
</p>

<p>
Enhedsfilerne kan deles op i to grupper, de kaldes <e>character</e>-enheder
og <e>blok</e>-enheder. Den første gruppe består af hardware,
hvor læsning/skrivning ikke bruger buffer. Den anden gruppe består
naturligvis af hardware, hvor læsning/skrivning bruger buffer. Begge
enheder kan læse en character af gangen, eller i blokke. Derfor kan
navngivningen måske lyde forvirrende og er faktisk forkert.
</p>

<p>
Hvis du kigger nærmere på en given enhedsfil, finder du måske noget i
stil med dette:
</p>

<pre caption = "At tjekke informationen i en given enhedsfil">
# <i>ls -l /dev/hda</i>
brw-rw----    1 root     disk       3,   0 Jul  5  2000 /dev/hda
</pre>

<p>
I det førnævnte eksempel så vi at <path>/dev/hda</path> er en blok
enhed. Mere vigtigt er at den har to specielle tal tilskrevet:
<path>3, 0</path>. Dette par kaldes <e>største-mindste</e> parret. Det
bruges af kernen til at til at kortlægge en enhedsfil til en rigtig
enhed. Den største stemmer overens med en bestemt enhed, den mindste
med en underenhed. Lyder det forvirrende? Det er det ikke.
</p>

<p>
To eksempler er <path>/dev/hda4</path> og <path>/dev/tty5</path>. Den
første enhedsfil stemmer overens med den fjerde partition på den
første IDE enhed. Dens største-mindste par er <path>3, 4</path>. Med
andre ord, passer den mindste med den partition, hvor den største
stemmer med enheden. Det andet eksempel har <path>4, 5</path> som
største-mindste parret. I dette tilfælde passer største med terminal
driveren, mens mindsten passer med terminalens nummer (i dette
tilfælde den femte terminal).
</p>

</body>
</section>
<section>
<title>Problemerne</title>
<body>

<p>
Hvis du laver et hurtigt tjek i sådan en <path>/dev</path>, finder du
ud af, at ikke bare er alle dine enheder listet, men <e>alle</e> mulige
enheder du kan forestille dig. Med andre ord har du enhedsfiler for
enheder du ikke har. At vedligeholde sådan en enhedsgruppe er en
større opgave, for at sige det mildt. Forestil dig at skulle ændre
rettigheder på alle de enhedsfiler, der har en tilsvarende enhed i dit
system, og efterlade resten af de enhedsfiler som de er.
</p>

<p>
Når du tilføjer ny hardware til dit system og denne hardware ikke
havde en enhedsfil før, så er du nødt til at lave en. Avancerede
brugere ved at denne opgave kan udføres med <c>./MAKEDEV</c> inde i
<path>/dev</path> træet, men ved du lige med det samme hvilken enhed
du skal lave?
</p>

<p>
Når du har programmer, der interagerer med hardware gennem
enhedsfiler, så kan du ikke have at root-partitionen er mountet kun
med læse rettigheder, selvom der ikke er brug for at der er skrive
rettigheder. Og du kan ikke have <path>/dev</path> på en separat
partition, da <c>mount</c> har brug for <path>/dev</path> til at
mounte partitioner.
</p>

</body>
</section>
<section>
<title>Løsningerne</title>
<body>

<p>
Som du nok kan forestille dig har kerne-hackerne (læs: programmører)
fundet en hel del løsninger til de førnævnte problemer. Mange af dem
har dog andre ulemper som er beskrevet på
<uri>http://www.atnf.csiro.au/people/rgooch/linux/docs/devfs.html#faq-why</uri>.
Vi vil ikke diskutere disse implementationer, men fokuserer på en
implementation der har klaret sig ind i den officielle kerne
kildekode: devfs.
</p>

</body>
</section>
<section>
<title>devfs som den alsidige vinder</title>
<body>

<p>
devfs klarer alle de listede problemer. Det giver kun brugeren
eksisterende enheder, tilføjer nye noder når nye enheder bliver fundet
og gør det muligt at mounte et root filsystem kun med
læserettigheder. Det håndterer også andre problemer som vi ikke har
diskuteret fordi det er mindre spændende for brugere...
</p>

<p>
F.eks. med devfs skal du ikke bekymre dig om største/mindste par. Det
er stadig understøttet (for at sikre bagudkompabilitet), men ikke
nødvendigt. Dette gør det muligt for Linux at understøtte mange flere
enheder, da der ikke er nogen grænser mere (tal har altid grænser :)
</p>

</body>
</section>
</chapter>

<chapter>
<title>At navigere gennem enhedstræet</title>
<section>
<title>Biblioteker</title>
<body>

<p>
En af de første ting du måske ligger mærke til er, at devfs bruger
biblioteker til at gruppere enheder sammen med. Dette forøger
læsbarheden, da alle relaterede enheder nu er inde i et fælles
bibliotek.
</p>

<p>
F.eks. alle IDE-relaterede enheder er inde i <path>/dev/ide/</path>
enhedsbiblioteket, og SCSI-relaterede enheder er inde i
<path>/dev/scsi/</path>. SCSI og IDE drev ses på den samme måde,
dvs. at de har begge den samme struktur over deres underbiblioteker.
</p>

<p>
IDE og SCSI drev kontrolleres af en adapter (on-board eller et separat
kort), kaldet <e>host</e>(vært). På hver kanal kan man have adskillige
ID'er. Sådan et ID identificerer en disk. Dette ID kaldes
<e>target</e>(målet). Nogle SCSI enheder kan have flere LUN'er
(<e>Logical Unit Numbers</e>), f.eks. instansenheder der håndterer
flere medier på samme tid (hi-end bånd-drev). Du har for det meste
kun en enkelt LUN med <path>lun0/</path>.
</p>

<p>
Så hvor vi før brugte <path>/dev/hda4</path>, har vi nu
<path>/dev/ide/host0/bus0/target0/lun0/part4</path>. Dette er meget
nemmere... nej du skal ikke diskutere det med mig... det <e>er</e>
nemmere... jaja! :)
</p>

<note>
Du kan også bruge en navngivning der ligger tættere på Unix til
harddiske, såsom <path>c0b0t0u0p2</path>. De kan findes i <path>/dev/ide/hd</path>,
<path>/dev/scsi/hd</path> osv.
</note>

<p>
For at give dig et indtryk af bibliotekerne, er her en liste over de
biblioteker jeg har på min bærbar:
</p>

<pre caption = "Biblioteker i /dev">
cdroms/     cpu/        discs/          floppy/
ide/        input/      loop/           misc/
netlink/    printers/   pts/            pty/
scsi/       sg/         shm/            sound/
sr/         usb/        vc/             vcc/
</pre>

</body>
</section>
<section>
<title>Kompabilitet bagud ved brug af devfsd</title>
<body>

<p>
At bruge dette nye system lyder som at lege, men adskillige værktøjer og
programmer bruger det tidligere system. For at være sikker på at ingen
systemer bliver smadret pga. dette, er <c>devfsd</c> blevet
lavet. Denne daemon laver symbolske genveje fra de gamle navne så de
peger på nye enhedsfiler.
</p>

<pre caption = "Skabte symbolske genveje">
$ <i>ls -l /dev/hda4</i>
lr-xr-xr-x    1 root     root           33 Aug 25 12:08 /dev/hda4 -> ide/host0/bus0/target0/lun0/part4
</pre>

<p>
Med <c>devfsd</c> kan du også sætte rettigheder, lave nye enhedsfiler,
definere handlinger osv. Alt dette beskrives i det næste kapitel.
</p>

</body>
</section>
</chapter>

<chapter>
<title>At administrere enhedstræet</title>
<section>
<title>At genstarte devfsd</title>
<body>

<p>
Når du ændrer <path>/etc/devfsd.conf</path> filen og du vil have
ændringerne til at træde i kraft, så er du ikke nødt til at
genstarte. Afhængigt af hvad du ønsker, kan du bruge de følgende to signaler:
</p>

<p>
<b>SIGHUP</b> får <c>devfsd</c> til at genlæse opsætningsfilen,
genlæse de delte objekter og generere REGISTER hændelsen for hvert
blad node i enhedstræet.
</p>

<p>
<b>SIGUSR1</b> gør det samme, men generer ikke REGISTER hændelserne.
</p>

<p>
For at sende et signal skal du simpelthen bruge <c>kill</c> eller <c>killall</c>:
</p>

<pre caption = "At sende SIGHUP signalet til devfsd">
# <i>kill -s SIGHUP `pidof devfsd`</i>
<comment>eller</comment>
# <i>killall -s SIGHUP devfsd</i>
</pre>

</body>
</section>
<section>
<title>At fjerne kompabilitet via symbolske genveje</title>
<body>

<warn>
Pt. kan Gentoo ikke leve uden de kompabilitetsikrende symbolske genveje.
</warn>

<p>
Hvis du vil fjerne de symbolske genveje, der fylder op i
 <path>/dev</path>, fra dit Gentoo system (Gentoo aktiverer det som
 standard), så skal du ændre <path>/etc/devfsd.conf</path> og fjerne
 de følgende to linier:
</p>

<pre caption = "/etc/devfsd.conf for bagudkompabilitet">
<comment># Udkommenter de følgende to linier for at fjerne de symbolske genveje</comment>
REGISTER        .*  MKOLDCOMPAT
UNREGISTER      .*  RMOLDCOMPAT
</pre>

<p>
Du bliver nødt til at genstarte dit system for at ændringerne træder i kraft.
</p>

</body>
</section>
<section>
<title>At fjerne autoload funktionaliteten</title>
<body>

<p>
Når du henter et modul, så laver devfs automatisk enhedsfilerne. Hvis
du ikke ønsker denne opførsel, så skal du fjerne den følgende linie fra
<path>/etc/devfsd.conf</path>:
</p>

<pre caption = "/etc/devfsd.conf, autoload funktionaliteten">
LOOKUP      .*  MODLOAD
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Ting der er relaterede til rettigheder</title>
<section>
<title>At sætte/ændre rettigheder ved brug af PAM</title>
<body>

<p>
Selvom du kan sætte rettigheder i <path>/etc/devfsd.conf</path>,
bliver det anbefalet at du bruger PAM (<e>Pluggable Authentification
Modules</e>). Dette er fordi at PAM har det sidste ord at sige
mht. rettigheder, hvilket måske kan ignorere de ændringer du har lavet
i <path>/etc/devfsd.conf</path>.
</p>

<p>
PAM bruger <path>/etc/security/console.perms</path> filen til
rettigheder. Denne fil består af to dele: den første del beskriver grupper
og den anden del rettighederne.
</p>

<p>
Lad os kigge på gruppe-delen. Som et eksempel kigger vi på
sound-gruppen (lyd-gruppen):
</p>

<pre caption = "Sound-gruppen i /etc/security/console.perms">
&lt;sound&gt;=/dev/dsp* /dev/audio* /dev/midi* \
    /dev/mixer* /dev/sequencer* \
    /dev/sound/* /dev/snd/* /dev/beep \
    /dev/admm* \
    /dev/adsp* /dev/aload* /dev/amidi* /dev/dmfm* \
    /dev/dmmidi* /dev/sndstat
</pre>                  

<p>
Syntaksen er ganske nem: du starter med et gruppenavn og ender med en
liste af enheder, som tilhører denne gruppe.
</p>

<p>
Grupper er imidlertid ikke særlig brugbare, hvis du ikke kan gøre
noget med dem. Så den næste del beskriver hvordan rettigheder håndteres.
</p>

<pre caption = "Rettigheder for sound-gruppen i /etc/security/console.perms">
&lt;console&gt;  0600 &lt;sound&gt;      0600 root.audio
</pre>

<p>
Det første felt er tjekket af terminal. På de fleste systemer er dette
console-gruppen. PAM tjekker dette felt for hvert login. Hvis at login
sker på en enhed, der er indeholdt i console-gruppen, så vil PAM tjekke
og måske ændre rettighederne på nogle enhedsfiler.
</p>

<p>
Det andet felt indeholder rettigheder til hvilken enhedsfil, der
bliver sat ved at succesfuldt login. Når en person logger ind i
systemet og enhedsfilerne ejes af en standard ejer/gruppe, så vil PAM
ændre ejerskabet til den bruger, der er logget ind, og sætte
rettighederne til dem, der står i dette andet felt. I dette tilfælde
bruges 0600 (bruger har læse og skrive adgang, alle andre har ikke).
</p>

<p>
Det tredje felt indeholder enhedsgruppen, hvilkes rettigheder vil
blive ændret. I dette tilfælde sound-gruppen (alle enhedsfiler
relateret til sound) vil blive ændret.
</p>

<p>
Det fjerde felt definerer de rettigheder til hvilket enhedsfilen
bliver sat til, efter at blive returneret til stardard tilstanden. Med
andre ord, hvis den person der ejer alle enhedsfilerne logger ud, så
vil PAM sætte rettighederne tilbage til en standard tilstand, hvilket
beskrives i dette fjerde felt.
</p>

<p>
Det femte felt definerer ejerskabet (med gruppe, hvis du ønsker dette)
til hvilken enhed, attributterne bliver sat, efter at være gået tilbage
til standard tilstand. Med andre ord, hvis den person der ejer alle
enhedsfilerne logger ud, så vil PAM sætte ejerskabet tilbage til
standard tilstand, beskrevet i dette femte felt.
</p>

</body>
</section>
<section>
<title>At sætte/ændre rettigheder med devfsd</title>
<body>

<p>
Hvis du virkelig vil sætte rettigheder ved brug af
<path>/etc/devfsd.conf</path>, så skal du bruge den syntaks der bruges
i det følgende eksempel:
</p>

<pre caption = "Rettigheder i /etc/devfsd.conf">
REGISTER    ^cdroms/.*  PERMISSIONS root.cdrom 0660
</pre>

<p>
Det andet felt er enhedsgruppen, der starter fra
<path>/dev</path>. Det er en regular expression, hvilket betyder at du
kan vælge adskillige enhedsfiler i en regel.
</p>

<p>
Det fjerde felt er ejerskabet af enhedsfilen. I modsætning til PAM
ændres dette ikke (medmindre det bliver nævnt i
<path>console.perms</path> da PAM altid vinder).
</p>

<p>
Det femte felt indeholder rettighederne på enhedsfilen.
</p>

</body>
</section>
<section>
<title>At sætte rettighederne manuelt og få devfsd til at gemme dem</title>
<body>

<p>
Dette er standard opførsel for Gentoo: hvis du <c>chown</c> (ændre
ejer) og <c>chmod</c> (ændre tilstand) på nogle enhedsfiler, så vil
<c>devfsd</c> gemme informationen, når du lukker systemet ned. Dette er
fordi <path>/etc/devfsd.conf</path> filen indeholder de følgende linier:
</p>

<pre caption = "/etc/devfsd.conf til at gemme rettigheder">
REGISTER        ^pt[sy]/.*   IGNORE
CHANGE          ^pt[sy]/.*   IGNORE
CREATE          ^pt[sy]/.*   IGNORE
DELETE          ^pt[sy]      IGNORE
REGISTER        ^log         IGNORE
CHANGE          ^log         IGNORE
CREATE          ^log         IGNORE
DELETE          ^log         IGNORE
REGISTER        .*           COPY    /lib/dev-state/$devname $devpath
CHANGE          .*           COPY    $devpath /lib/dev-state/$devname
CREATE          .*           COPY    $devpath /lib/dev-state/$devname
DELETE          .*           CFUNCTION GLOBAL unlink
/lib/dev-state/$devname
RESTORE         /lib/dev-state
</pre>

<p>
Med andre ord, ændrede enhedsfiler bliver kopieret over til 
<path>/lib/dev-state</path> når systemet lukkes ned og kopieret over
til <path>/dev</path> når systemet startes op.
</p>

<p>
En anden mulighed er at mounte <path>/lib/dev-state</path> på
<path>/dev</path> ved opstart. For at gøre dette skal du være sikker
på at devfs ikke automatisk bliver mountet (dvs. du skal kompilere din
kerne om igen) og at <path>/dev/console</path> eksisterer. Så skal du
placere dette i starten af dit systems bootscripte:
</p>

<pre caption = "At mounte /lib/dev-state i toppen af /dev">
mount --bind /dev /lib/dev-state
mount -t devfs none /dev
devfsd /dev
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Ressourcer</title>
<section>
<body>

<p>
For at få mere information omkring devfs, kan du tjekke de følgende ressourcer.
</p>

<p>
Mansiderne til devfsd.conf forklarer syntaksen for 
<path>/etc/devfsd.conf</path> filen. For at læse den, skriv <c>man
devfsd.conf</c>.
</p>

<p>
<uri
link="http://www.atnf.csiro.au/people/rgooch/linux/docs/devfs.html">devfs
FAQ</uri> forklarer alt omkring devfs. Den indeholder også information
omkring den indre devfs struktur og hvordan drivere kan understøtte devfs.
</p>

<p>
På <uri link="http://www.linuxjournal.com">LinuxJournal</uri> er der
en interessant artikel om <uri
link="http://www.linuxjournal.com/article.php?sid=6035">devfs for
Management and Administration</uri>.
</p>

<p>
Daniel Robbins har skrevet et sæt af artikler til IBM's DeveloperWorks
omkring Avancerede filsystemer. Tre af dem handler om devfs:
</p>

<ul>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs4/">
    Introduktion til devfs</uri>
  </li>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs5/">
    At sætte devfs op</uri>
  </li>
  <li>
    <uri link="http://www-106.ibm.com/developerworks/linux/library/l-fs6/">
    At implementere devfs</uri>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
