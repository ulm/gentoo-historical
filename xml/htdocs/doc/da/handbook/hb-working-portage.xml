<?xml version='1.0' encoding='iso-8859-1'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/da/handbook/hb-working-portage.xml,v 1.5 2004/07/29 16:08:11 broeman Exp $ -->

<sections>
<section>
<title>At få informationer om pakker</title>
<subsection>
<title>Mesteren over alle værktøjer: emerge</title>
<body>

<p>
Det væsentligste værktøj, som de fleste brugere vil bruge, er 
<c>emerge</c>. Vi har allerede brugt det, under installationen af Gentoo
og i det forrige kapitel, men vi forklarede kun lige kort hvordan det
skal bruges. Dette kapitel vil vi uddybe mere omkring <c>emerge</c>, og lære dig
hvordan du bruger <c>emerge</c> til at ordne alle dine software-relaterede
behov.
</p>

<p>
<c>emerge</c> er kommandoen, der bruges til at installere, fjerne,
forespørge og vedligeholde software pakker. Det er en front-end til
<c>ebuilds</c>; folk der er interesseret i at blive professionelle
brugere af Gentoo, vil lære at bruge <c>ebuilds</c> senere. Indtil
videre vil vi fokusere på <c>emerge</c>, og den har funktionalitet, som
<c>ebuild</c> mangler (såsom at løse afhængigheder, søge i Portage
træet osv.).
</p>

<p>
Da <c>emerge</c> er det vigtigste værktøj for Gentoo brugere, har den
en omfattende man-side, som du kan læse ved at køre <c>man
emerge</c>. Du kan også læse hjælpen, der er forbundet med emerge, ved
at køre <c>emerge --help</c>.
</p>

<pre caption="At finde hjælp til emerge">
# <i>man emerge</i>
# <i>emerge --help</i>
</pre>

</body>
</subsection>
<subsection>
<title>Portage-træet</title>
<body>

<p>
Lad os, før vi fortsætter med at beskrive <c>emerge</c>, først tage et
blik på Portage-træet. Gå til <path>/usr/portage</path> og lav en
liste over de tilgængelige biblioteker. Vi bruger <c>ls --classify</c> 
til at liste indholdet af et bibliotek, da det viser biblioteker med
et efterfølgende "/".
</p>

<pre caption="At se Portage-træet">
# <i>cd /usr/portage; ls --classify</i>
app-admin/       dev-ml/            gnome-libs/     net-print/
app-arch/        dev-perl/          gnome-office/   net-wireless/
app-benchmarks/  dev-php/           header.txt      net-www/
app-cdr/         dev-python/        incoming/       net-zope/
app-crypt/       dev-ruby/          jython/         packages/
app-dicts/       dev-tcltk/         kde-apps/       profiles/
app-doc/         dev-tex/           kde-base/       releases/
app-editors/     dev-util/          kde-i18n/       scripts/
app-emacs/       distfiles/         kde-libs/       sec-policy/
app-emulation/   eclass/            licenses/       skel.ChangeLog
app-games/       experimental/      media-fonts/    skel.ebuild
app-gnustep/     files/             media-gfx/      skel.metadata.xml
app-i18n/        fresco-base/       media-libs/     snapshots/
app-misc/        games-action/      media-plugins/  sys-apps/
app-office/      games-arcade/      media-radio/    sys-build/
app-pda/         games-board/       media-sound/    sys-cluster/
app-portage/     games-emulation/   media-tv/       sys-devel/
app-sci/         games-engines/     media-video/    sys-fs/
app-shells/      games-fps/         metadata/       sys-kernel/
app-text/        games-kids/        net-analyzer/   sys-kmods/
app-vim/         games-misc/        net-apache/     sys-libs/
app-xemacs/      games-mud/         net-dialup/     unix2tcp/
berlin-base/     games-puzzle/      net-dns/        x11-base/
dev-ada/         games-roguelike/   net-firewall/   x11-libs/
dev-cpp/         games-rpg/         net-fs/         x11-misc/
dev-db/          games-server/      net-ftp/        x11-plugins/
dev-dotnet/      games-simulation/  net-im/         x11-terms/
dev-embedded/    games-sports/      net-irc/        x11-themes/
dev-games/       games-strategy/    net-libs/       x11-wm/
dev-haskell/     games-util/        net-mail/       xfce-base/
dev-java/        glep/              net-misc/       xfce-extra/
dev-lang/        gnome-apps/        net-nds/
dev-libs/        gnome-base/        net-news/
dev-lisp/        gnome-extra/       net-p2p/
</pre>

<p>
Som du kan se, har Portage-træet adskillige underbiblioteker. De fleste
af dem er <e>kategorier</e>, hvori Gentoo-pakkerne, kaldet
<e>ebuilds</e>, holder til. Tag f.eks. et blik på <path>app-office</path>:
</p>

<pre caption="At se en kategori">
# <i>cd app-office; ls --classify</i>
abiword/     gnotime/   kmymoney2/  ooodi/              plan/     timestamp.x
dia/         gnucash/   koffice/    oooqs/              qhacc/
dia2code/    gnumeric/  lxbank/     openoffice/         sc/
facturalux/  ical/      lyx/        openoffice-bin/     scribus/
gaby/        kbudget/   mdbtools/   openoffice-ximian/  siag/
gnofin/      khacc/     mrproject/  phprojekt/          texmacs/
</pre>

<p>
Inde i en kategori finder du de pakker, der tilhører en kategori, med
et separat bibliotek til hver pakke. Lad os kigge på <c>openoffice</c>
pakken:
</p>

<pre caption="At se en pakke">
# <i>cd openoffice; ls --classify</i>
ChangeLog  files/        openoffice-1.0.3-r1.ebuild  openoffice-1.1.0-r2.ebuild
Manifest   metadata.xml  openoffice-1.1.0-r1.ebuild  openoffice-1.1.0.ebuild
</pre>

<p>
Huskede du, at vi fortalte dig at en Gentoo-pakke kaldes for en ebuild? Ser
du, i biblioteket i vores eksempel, er der gemt fire ebuilds. Deres
navngivning er næsten identisk; de skiller sig kun ud på deres
versionsnavn. Du er fri til at kigge på indholdet af sådan en pakke;
de er bare almindelige scripts. Vi vil ikke diskutere det lige nu, da
det ikke er vigtigt at vide, hvis du har planer om bare at bruge Gentoo.
</p>

<p>
De andre filer er <path>ChangeLog</path> (som indeholder en liste over
alle ændringer, der er lavet på en ebuild), <path>Manifest</path> (som
indeholder checksums og filstørrelser på alle filerne i biblioteket) og
<path>metadata.xml</path> (som indeholder flere informationer omkring
pakken, såsom den ansvarlige udviklingsgruppe -- kaldet <e>herd</e> -- 
og en mere omfattende beskrivelse).
</p>

<p>
Inde i <path>files</path>-biblioteket, finder du ekstra filer, som
Portage har brug for: digest filer (checksums og de rettigheder, der er
nødvendige for en enkel version af pakken), patches, eksempler på
opsætningsfiler, osv.
</p>

<pre caption="At se de ekstra filer">
# <i>cd files; ls --classify</i>
1.0.3/  digest-openoffice-1.0.3-r1  digest-openoffice-1.1.0-r1
1.1.0/  digest-openoffice-1.1.0     digest-openoffice-1.1.0-r2
# <i>cd 1.1.0; ls --classify</i>
fixed-gcc.patch      ooffice-wrapper-1.3
newstlportfix.patch  openoffice-1.1.0-linux-2.6-fix.patch
no-mozab.patch       openoffice-1.1.0-sparc64-fix.patch
nptl.patch
</pre>

<p>
Hvis du går tilbage til Portage-træets rod (<path>/usr/portage</path>)
vil du bemærke, at der også er andre ikke-kategori-biblioteker. Vi vil
diskutere disse senere i dette kapitel.
</p>

</body>
</subsection>
<subsection>
<title>At søge efter en pakke</title>
<body>

<p>
Hvis du er ny til Linux eller Gentoo¸ så ved du måske ikke hvilke
værktøjer, du har brug for til hvilket job. Til at muliggøre søgning,
leverer <c>emerge</c> en måde at søge de tilgængelige pakker på
dit system, igennem på. Der er to måder du kan søge igennem pakker:
efter <e>navn</e>, eller efter <e>navn</e> og 
<e>beskrivelse</e>.
</p>

<p>
For at søge gennem Portage-træet efter navn, skal du bruge <c>emerge
search</c>. F.eks. for at finde ud af mere omkring <c>mozilla</c>:
</p>

<pre caption="At se informationer omkring mozilla">
# <i>emerge search mozilla</i>
Searching...   
[ Results for search key : mozilla ]
[ Applications found : 5 ]
<comment>(Noget af outputtet er fjernet for at øge læsbarheden)</comment>
*  net-www/mozilla
      Latest version available: 1.5-r1
      Latest version installed: 1.4-r3
      Size of downloaded files: 29,153 kB
      Homepage:    http://www.mozilla.org
      Description: The Mozilla Web Browser

*  net-www/mozilla-firebird
      Latest version available: 0.7
      Latest version installed: [ Not Installed ]
      Size of downloaded files: 37,850 kB
      Homepage:    http://www.mozilla.org/projects/firebird/
      Description: The Mozilla Firebird Web Browser
<comment>(...)</comment>
</pre>

<p>
Hvis du også vil lave en søgning gennem beskrivelserne, så skal du
bruge <c>--searchdesc</c> argumentet:
</p>

<pre caption="Også at søge gennem beskrivelserne ">
# <i>emerge --searchdesc mozilla</i>
Searching...   
[ Results for search key : mozilla ]
[ Applications found : 10 ]
<comment>(Noget af outputtet er fjernet for at øge læsbarheden)</comment>
*  dev-libs/nss-3.8
      Latest version available: 3.8
      Latest version installed: 3.8
      Size of downloaded files:  2,782 kB
      Homepage:    http://www.mozilla.org/projects/security/pki/nss/
      Description: Mozilla's Netscape Security Services Library that implements PKI support
</pre>

<p>
Som du kan se, informerer outputtet af <c>emerge</c> om kategorien og
navnet på pakken, den nyeste tilgængelige version, den version der
pt. er installeret, størrelsen på de downloadede filer, hjemmesiden
og en lille beskrivelse.
</p>

<p>
Ser du noget nyt? Ja, <e>downloaded files</e>. Når du beder Portage om
at installere en pakke, skal den selvfølgelig have de nødvendige
kildekoder (eller præ-kompilerede pakker) tilgængelig. Den tjekker
derfor indholdet af <path>/usr/portage/distfiles</path> (efter
kildekode) eller <path>/usr/portage/packages/All</path> (efter
præ-kompilerede pakker) for at se om de nødvendige pakker allerede er
tilgængelige. Hvis ikke, så henter den de nødvendige filer og placerer
dem i disse biblioteker.
</p>

<!--
<note>
Searching the Portage Tree, especially when using <c>- -searchdesc</c>, is very
time consuming. There are other, more performing tools available. We will
describe those in the chapter on <uri link="?part=2&amp;chap=7">Gentoolkit and
Other Tools</uri>.
</note>
-->

</body>
</subsection>
<subsection>
<title>At se ChangeLog</title>
<body>

<p>
Da du skimmede igennem Portage-træet, så du at der var en ChangeLog til
enhver pakke. Du kan også se ChangeLog-noteringer, imellem den tilgængelige
version og den installerede version, med <c>emerge</c>. Brug
<c>--pretend --changelog</c> (<c>-pl</c> forkortet) valgmulighederne. Som
et eksempel vil vi se ChangeLog-noteringer for <c>gnumeric</c>:
</p>

<pre caption="At se ChangeLog-noteringer for gnumeric">
# <i>emerge --pretend --changelog gnumeric</i>
<comment>(Noget af outputtet er fjernet for at forøge læsbarheden)</comment>
*gnumeric-1.2.2

  27 Nov 2003; foser &lt;foser@gentoo.org&gt; gnumeric-1.2.2.ebuild :
  New release, requested in #34492
  updated deps

  12 Nov 2003; Jason Wever &lt;weeve@gentoo.org&gt; gnumeric-1.2.0.ebuild:
  Marked stable on sparc, fixes bug #32405.

  14 Oct 2003; Jason Wever &lt;weeve@gentoo.org&gt; gnumeric-1.0.8.ebuild:
  Added ~sparc keyword.  Fixes bug #31150.
</pre>

</body>
</subsection>
</section>
<section>
<title>At opdatere Portage</title>
<subsection>
<title>Introduktion</title>
<body>

<p>
At søge gennem Portage er rart, men hvis du ikke opdaterer dit Portage-træ
på regulært basis, så vil du sidde fast med pakkerne og versionerne
på dit system. Dette betyder at dit system vil blive forældet rimelig
hurtigt, og at du vil gå glip af fejlrettelser og udbedringer af mulige
sikkerhedsproblemer.
</p>

<p>
Der er adskillige måder at opdatere dit Portage træ på. Den mest
populære metode, er ved at bruge en af vores <uri
link="/main/en/mirrors.xml">rsync filspejle</uri>. En anden er ved at
bruge et Portage-snapshot (i tilfælde af firewall eller hvis
tilgængeligheden af et netværk ikke tillader brug af rsync server).
</p>

</body>
</subsection>
<subsection>
<title>At vælge et filspejl til rsync</title>
<body>

<p>
Det kan anbefales at vælge et hurtigt <uri
link="/main/en/mirrors.xml">filspejl</uri> tæt på dig, først. Du kan
gøre dette manuelt (ved at sætte <c>SYNC</c>-variabelen i
<path>/etc/make.conf</path>) eller brug af <c>mirrorselect</c>, til at
gøre dette automatisk for dig. Da <c>SYNC</c>-variabelen vil blive
diskuteret senere, vil vi fokusere på brugen af <c>mirrorselect</c>.
Installer først <c>mirrorselect</c> ved at emerge den:
</p>

<pre caption="Installation af mirrorselect">
# <i>emerge --usepkg mirrorselect</i>
</pre>

<p>
Kør nu <c>mirrorselect</c> for automatisk at sætte filspejle for dig
(det vil også sætte Portage op til at bruge et filspejl til at hente kildekode):
</p>

<pre caption="At køre mirrorselect">
# <i>mirrorselect -a -s3</i>
</pre>

</body>
</subsection>
<subsection>
<title>At opdatere Portage</title>
<body>

<p>
For at opdatere Portage ved brug af rsync, skal du bare køre <c>emerge sync</c>:
</p>

<pre caption="At opdatere Portage ved brug af emerge sync">
# <i>emerge sync</i>
</pre>

<p>
Hvis dette fejler (pga. netværksproblemer eller en firewall), kan du
prøve at bruge <c>emerge-webrsync</c> som vil downloade et snapshot af
Portage-træet vha. <c>wget</c>. Dette betyder også at du kan bruge
proxier, hvis du har lyst. Vi diskuterede hvordan man sætter sit
system op til at bruge proxier under Gentoo installationen.
</p>

<pre caption="At opdatere Portage ved brug af emerge-webrsync">
# <i>emerge-webrsync</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Vedligeholdelse af software</title>
<subsection>
<title>At bygge eller at bruge præ-bygget?</title>
<body>

<p>
Gentoo stiller ebuilds og Gentoo-pakkerne, hvis du foretrækker det, til
rådighed. Men når du vil installere sådan en ebuild, så kan du vælge
mellem at <e>bygge</e> pakken og at bruge en <e>præ-bygget</e>
pakke. Men hvad er fordelene/ulemperne af begge disse muligheder, og
kan de bruges sammen med hinanden?
</p>

<p>
Som du sikkert har gættet, tager det en hel del tid at bygge pakker
(specielt hvis du har få ressourcer eller vil bygge store pakker,
såsom <uri link="http://www.kde.org">KDE</uri>, <uri
link="http://www.openoffice.org">OpenOffice.org</uri>, osv.). Ved at
bygge pakken kan du bruge <c>USE</c>-indstillingen til at ændre pakken
til dit system. Du kan selvfølgelig også definere høje optimeringsmuligheder
(i <c>CFLAGS</c> og <c>CXXFLAGS</c> variablerne) til at
kompilere en pakke med.
</p>

<p>
At bruge præ-byggede pakker forbedrer installationstiden (da der ikke
længere er brug for kompilering), men du vil miste fordelene af
<c>USE</c>-indstillingen og <c>CFLAGS</c>- &amp; <c>CXXFLAGS</c>-variablerne.
</p>

<p>
Som vi før har sagt, bliver præ-byggede pakker gemt i
<path>/usr/portage/packages/All</path> biblioteket, mens kildekoden
til pakkerne er placeret i <path>/usr/portage/distfiles</path>. Hvis
du har gennemført installationen af en pakke kan du fjerne pakken
eller kildekoden fra de respektive biblioteker. Du vil dog imidlertid
måske gerne gemme pakken/kildekoden til den nyeste version, bare i
tilfælde af at du vil geninstallere pakken (så du ikke behøver at
downloade den igen).
</p>

</body>
</subsection>
<subsection>
<title>At installere software fra kildekode</title>
<body>

<p>
Okay, nok snak, lad os komme til sagen. For at installere en pakke,
bruger man <c>emerge</c> kommandoen. Hvis du ikke vil bruge nogen
præ-byggede pakker, så kan du bare bruge <c>emerge &lt;pakke-navn&gt;</c> eller <c>emerge
&lt;kategori&gt;/&lt;pakke-navn&gt;</c>. Som et eksempel vil vi installere
<c>gnumeric</c>:
</p>

<pre caption="At bygge gnumeric">
# <i>emerge gnumeric</i>
</pre>

<p>
Dette vil downloade kildekoden for dig og pakke ud, kompilere samt
installere pakken på dit system. Den vil også gøre det samme for alle
afhængigheder. Hvis du vil se hvilke afhængigheder, der vil blive
installeret sammen med den, brug <c>--pretend</c> muligheden (<c>-p</c> forkortet):
</p>

<pre caption="At lade som du bygger gnumeric">
# <i>emerge --pretend gnumeric</i>
</pre>

<p>
Hvis du vil downloade kildekoden til en pakke og dens afhængigheder,
men ikke ønsker at bygge pakken, så brug <c>--fetchonly</c> valgmuligheden 
(<c>-f</c> forkortet):
</p>

<pre caption="At hente kildekode til gnumeric">
# <i>emerge --fetchonly gnumeric</i>
</pre>

<p>
Hvis du vil se hvor <c>emerge</c> downloader kildekoden fra, så kombiner
<c>--fetchonly</c> og <c>--pretend</c> mulighederne:
</p>

<pre caption="At vise URLerne for kildekoden til gnumeric">
# <i>emerge --fetchonly --pretend gnumeric</i>
</pre>

<p>
Du kan også vælge at installere en specifik version af en pakke. Hvis
du f.eks. vil installere en version af gnumeric der er ældre end 1.2
-- af hvilken som helst årsag :) vil man taste:
</p>

<pre caption="At installere en specifik version of gnumeric">
# <i>emerge "&lt;gnumeric-1.2"</i>
</pre>

<p>
Andre muligheder er selvfølgelig "&gt;" (senere version) og "=" (den
eksakte version).
</p>

</body>
</subsection>
<subsection>
<title>At installere præ-byggede pakker</title>
<body>

<p>
Når du ønsker at installere en præ-bygget pakke, så bør du bruge <c>--usepkg</c>
muligheden (<c>-k</c> forkortet). Dette vil bruge den binære pakke
tilgængelig i <path>/usr/portage/packages/All</path> <e>hvis</e>
pakken og den version af applikationen, du vil installere, matcher.
</p>

<pre caption="At installere en præ-bygget pakke til gnumeric">
# <i>emerge --usepkg gnumeric</i>
</pre>

<p>
Hvis du vil bruge den binære pakke, selv om at versionerne ikke
matcher, brug da <c>--usepkgonly</c> (<c>-K</c> forkortet).
</p>
<pre caption="At installere den præ-byggede pakke til gnumeric">
# <i>emerge --usepkgonly gnumeric</i>
</pre>

<p>
Hvis du ikke har den præ-byggede pakke på dit system endnu, så kan du
få <c>emerge</c> til at downloade den fra et filspejl, som er
defineret i <c>PORTAGE_BINHOST</c> variablen erklæret i
<path>/etc/make.conf</path>.
</p>

<p>
For at downloade den binære pakke i tilfælde af, at denne pakke ikke
allerede eksisterer på dit system, brug <c>--getbinpkg</c> (<c>-g</c> forkortet):
</p>

<pre caption="At downloade og installere en præ-bygget pakke til gnumeric">
# <i>emerge --getbinpkg gnumeric</i>
</pre>

<p>
Dette vil downloade pakken og de pakke-relaterede informationer til dig
og installere den på dit system, sammen med afhængighederne. Hvis du
vil se hvilke afhængigheder, der vil blive installeret med den, brug
<c>--pretend</c> muligheden (<c>-p</c> forkortet):
</p>

<pre caption="At lade som om man downloader den præ-bygget pakke til gnumeric">
# <i>emerge --getbinpkg --pretend gnumeric</i>
</pre>

<p>
Du kan også vælge at downloade den præ-bygget pakke (og den
pakke-relaterede information) <e>uden</e> at tjekke informationen på
dit lokale system og <e>uden</e> at bruge den præ-bygget pakke, der
allerede er på dit system (hvis anvendelig), brug da
<c>--getbinpkgonly</c> valgmuligheden (<c>-G</c> forkortet):
</p>

<pre caption="At installere en præ-bygget pakke uden at bruge lokal information">
# <i>emerge --getbinpkgonly gnumeric</i>
</pre>

<p>
Du kan også vælge at installere en specifik version af en pakke. Hvis
du f.eks. vil installere en version ældre end 1.2 af gnumeric -- af 
hvilken som helst grund :) så vil man taste: 
</p>

<pre caption="At installere en specifik gnumeric version">
# <i>emerge --usepkg "&lt;gnumeric-1.2"</i>
</pre>

<p>
Andre mulighederne er selvfølgelig "&gt;" (senere version) og "=" (den
eksakte version).
</p>


</body>
</subsection>
<subsection>
<title>At arbejde med afhængigheder</title>
<body>

<p>
Portage har en omfattende understøttelse for håndtering af
afhængigheder. Selvom du sædvanligvis ikke behøver at tænke på dette
(da afhængigheder automatisk bliver håndteret af Portage), vil nogle
brugere måske gerne vide, hvordan man kan arbejde med <c>emerge</c> og
afhængigheder.
</p>

<p>
F.eks. hvis du vil have Portage til at lade som om, at ingen af en pakkes
afhængigheder er installeret, så kan du bruge <c>--emptytree</c> (<c>-e</c> forkortet). 
Dette er brugbart sammen med <c>--pretend</c> for at vise et komplet træ
af afhængigheder for en bestemt pakke. Uden <c>--pretend</c>, vil <c>emerge</c> 
genkompilere alle de listede pakker. 
</p>

<pre caption="At vise alle afhængigheder for gnumeric">
# <i>emerge --emptytree --pretend gnumeric</i>
</pre>

<p>
Et andet argument er <c>--nodeps</c>, hvilken vil bede Portage om, at
installere den givne pakke uden at håndtere dens afhængigheder. Det er
trivielt, at dette kan føre til fejl.
</p>

<pre caption="At installere gnumeric uden at håndtere afhængighederne">
# <i>emerge --nodeps gnumeric</i>
</pre>

<p>
Den modsatte af <c>--nodeps</c> er <c>--onlydeps</c>, som vil få
Portage til at installere alle en pakkes afhængigheder, men ikke selve pakken.
</p>

<pre caption="At installere afhængighederne til gnumeric">
# <i>emerge --onlydeps gnumeric</i>
</pre>

</body>
</subsection>
<subsection>
<title>At opdatere dit system</title>
<body>

<p>
Portage kender to specielle ord der repræsenterer et sæt af software pakker:
<e>system</e> og <e>world</e>. Du har allerede set den første imens du
installerede Gentoo, hvis du ikke brugte en <e>stage3</e>
installation. For at genopfriske tingene: <e>system</e> er samlingen
af <e>centrale</e> pakker, der er nødvendige for at have et Gentoo
system, der virker.
</p>

<p>
<e>world</e>­ordet består af alt det software, du selv har installeret
på systemet plus <e>system</e>s-informationen. Med andre ord, så
hver gang du emerger en pakke ved brug af <c>emerge
&lt;pakke-navn&gt;</c>, så bliver <c>&lt;pakke-navn&gt;</c> registreret
i <e>world</e> filen
(<path>/var/cache/edb/world</path>). Afhængigheder er <e>ikke</e> en
del af <e>world</e> filen, men det kommer vi til senere.
</p>

<p>
Hvis du vil opdatere system-pakkerne, så brug <c>--update</c> muligheden
(<c>-u</c> forkortet):
</p>

<pre caption="At opdatere system pakkerne">
# <i>emerge --update system</i>
</pre>

<p>
En identisk angrebsvinkel kan bruges til at world pakkerne:
</p>

<pre caption="At opdatere hele dit system">
# <i>emerge --update world</i>
</pre>

<p>
Igen, hvis du vil se hvad <c>emerge</c> vil opdateret, så brug
<c>--pretend</c> muligheden sammen med <c>--update</c> muligheden:
</p>

<pre caption="At lade som om man opdaterer hele dit system">
# <i>emerge --pretend --update world</i>
<comment>(Noget af outputtet er fjernet for at forøge læsbarheden)</comment>
[ebuild     U ] net-misc/wget-1.9-r1 [1.9] 
[ebuild     UD] media-video/dvdauthor-0.5.0 [0.5.3] 
[ebuild     U ] net-analyzer/ethereal-0.9.16 [0.9.14] 
</pre>

<p>
Lige ved siden af ordet "ebuild" bemærker du et bogstav (eller
kombination af bogstaver), som giver dig mere information omkring pakken:
</p>

<ul>
  <li>
    <e>B</e> (blokerer) Pakken listet til ventre blokerer en emerge
    af pakken listet til højre
  </li>
  <li>
    <e>N</e> (ny) Pakken er ny på dit system og vil blive emerget for
    den første gang
  </li>
  <li>
    <e>R</e> (emerge igen) Pakken er ikke ny, men skal emerges igen.
  </li>
  <li>
    <e>F</e> (hent) Pakken kræver at du henter kildekoden manuelt
    (f.eks. pga. ting relateret til licens)
  </li>
  <li>
    <e>U</e> (opdater) Pakken eksisterer allerede på dit system, men
    vil blive opdateret
  </li>
  <li>
    <e>UD</e> (nedgrader) Pakken eksisterer allerede på dit system,
    men vil blive nedgraderet til en ældre version
  </li>
  <li>
    <e>U-</e> (plads advarsel) Den pakke du har
    installeret på dit system er oplistet, som en pakke der ikke kan
    eksistere sammen med en anden version, men det gør din opdatering
    faktisk. Opdaterering vil blive installeret og den ældre version
    vil blive fjernet
  </li>
</ul>

<p>
I visse tilfælde vil en opdatering betyde en nedgradering
(f.eks. installere en ældre version i stedet for en nyere
version). Hvis du ikke vil have at dette sker, så brug
<c>--upgradeonly</c> muligheden (<c>-U</c> forkortet):
</p>

<pre caption="At opgradere hele dit system">
# <i>emerge --update --upgradeonly world</i>
</pre>

<p>
Vi har forklaret at <e>world</e>-filen ikke indeholder afhængigheder. Når du kører <c>emerge --update world</c>, er kun pakkerne forklaret i <e>world</e>-filen og dens øjeblikkelige afhængigheder tjekket ud, hvis nødvendigt endda opgraderet. Hvis du vil have at <c>emerge</c> tjekker <e>alle</e> afhængighederne (inklusiv afhængigheder af afhængighederne), tilføj <c>--deep</c>-flaget:
</p>
					   	 
<pre caption="Opdgradering af hele dit system, inklusiv alle afhængigheder">
# <i>emerge --update --deep world</i>
</pre>

<p>
Her snakker vi selvfølgelig om <e>system</e> og <e>world</e>, men du
kan udføre de samme handlinger for individuelle software pakker.
</p>

</body>
</subsection>
<subsection>
<title>At fjerne software</title>
<body>

<p>
Hvis du vil fjerne software fra dit system, kan du bruge <c>unmerge</c>
muligheden (<c>-C</c> - C med stort - forkortet):
</p>

<pre caption="At afinstallere software">
# <i>emerge unmerge gnumeric</i>
</pre>

<p>
Hvis du vil teste en afinstallation (men ikke udføre den), så kan du
igen bruge <c>--pretend</c>:
</p>

<pre caption="At lade som om du afinstallerer software">
# <i>emerge --pretend unmerge gnumeric</i>
</pre>

<warn>
Portage bekræfter ikke om en pakke er en afhængighed, for en anden
installeret pakke. Den advarer heller ikke hvis pakken er en del af 
<e>system</e>, f.eks. en central applikation, der er nødvendig for at
dit system fungerer korrekt!
</warn>

<p>
Når unmerge begynder, så vil du se en lang liste af filnavne, der
tilhører pakken. Nogle af disse filnavne vil have et flag vist til
venstre for filnavnet. Flagene <c>!mtime</c>, <c>!empty</c>, og
<c>cfgpro</c> specificerer grunde til hvorfor givne filer ikke bliver
fjernet, selvom pakken gør. Filer, der bliver listet uden nogen af disse
tre flag, bliver fjernet fra filsystemet med succes. De tre flag
specificerer de følgende grunde:
</p>

<ul>
  <li>
    <c>!mtime</c> : Den listede fil har ændret sig siden den blev
    installeret, sikkert af dig eller et andet værktøj
  </li>
  <li>
    <c>!empty</c> : Den listede mappe er ikke tom
  </li>
  <li>
    <c>cfgpro</c> : Denne fil befinder sig i en beskyttet mappe og vil
    ikke blive rørt af sikkerhedsårsager
  </li>
</ul>

</body>
</subsection>
</section>
<section>
<title>Tilgængelighed af software?</title>
<subsection>
<title>ARCH eller ikke?</title>
<body>

<p>
Gentoo placerer sine pakker i to mulige stadier kaldet <e>ARCH</e> og
<e>~ARCH</e>. Tag ikke dette bogstaveligt; stadiet afhænger af den
arkitektur du bruger. Med andre ord, til x86-baserede systemer har du <e>x86</e> og
<e>~x86</e>, til ppc-baserede systemer har du <e>ppc</e> og <e>~ppc</e> osv.
</p>

<p>
<e>~ARCH</e> stadiet betyder at pakken virker for den udvikler, der er
ansvarlig for pakken, men pakken er ikke blevet testet grundigt nok
endnu af community'et til at være placeret i <e>ARCH</e>. <e>~ARCH</e>
pakker går typisk til <e>ARCH</e> efter at have været fejlfri i et
tilstrækkeligt stykke tid.
</p>

<p>
Dit system vil som standard bruge <e>ARCH</e>. Hvis du vil "leve på
kanten", så skal du ikke være bekymret for at have en pakke, der går i
stykker en gang imellem, vide hvordan du skal håndtere et smadret
system og godt kunne lide at sende fejlrapporter til <uri
link="http://bugs.gentoo.org">bugs.gentoo.org</uri>, så kan du godt
vælge at bruge <e>~ARCH</e> pakker. For at "flytte" dit system til en
<e>~ARCH</e>-brugende system, så skal du redigere
<c>ACCEPT_KEYWORDS</c> variablen i <path>/etc/make.conf</path> sådan
at den hedder <e>~ARCH</e> (igen: til x86-baserede systemer: <e>~x86</e>, osv.).
</p>

<p>
Bemærk at det er langt fra trivielt (omend umuligt) at gå tilbage til 
<e>ARCH</e> fra <e>~ARCH</e>. 
</p>

<p>
Hvis du vil opdatere dit system nu, så vil du bemærke at der er
<e>mange</e> pakker, som vil blive opdateret!
</p>

</body>
</subsection>
<subsection>
<title>Maskerede pakker</title>
<body>

<p>
Når du vil installere en pakke, kan det være at du møder den følgende pakke:
</p>

<pre caption="Besked ved maskerede pakker">
Calculating dependencies   
!!! <comment>all ebuilds that could satisfy </comment>&lt;din pakke&gt;<comment> have been masked.</comment>
</pre>

<p>
En pakke kan være maskeret af to grunde:
</p>

<ol>
  <li>Pakken er i <e>~ARCH</e> mens du bruger <e>ARCH</e></li>
  <li>Pakken er eksplicit markeret hårdt maskeret</li>
</ol>

<p>
Hvis pakken er maskeret pga. den første grund og du <e>virkelig</e>
vil installere den (bevidst om at der <e>er</e> en grund til at den
ikke er tilgængelig i <e>ARCH</e>), så kan du acceptere <e>~ARCH</e>-versionen af en vilkårlig pakke ved at tilføje den til din <path>/etc/portage/package.keywords</path>:
</p>

<pre caption="At acceptere en ~ARCH-version af en pakke">
# <i>ACCEPT_KEYWORDS="~x86" emerge gnumeric</i>
</pre>

<p>
En pakke er maskeret "hårdt" hvis den er listet i 
<path>/usr/portage/profiles/package.mask</path>. Hvis du læser denne
fil, så vil du også læse grunden til at pakken er hårdt maskeret (det
er som regel tilføjet som en kommentar). Hvis du på trods af alt dette
vil installere pakken (på trods af alle de mulige advarsler vi kaster i
hovedet af dig om "at smadre dit system", "smadre andre pakker",
eller "trænger virkelig til at blive testet"), så lav
<path>/etc/portage/package.unmask</path> filen og list pakken i den
(brug det samme format som brugt i <path>/usr/portage/profiles/package.mask</path>).
</p>

<p>
Du skal <e>ikke</e> ændre i <path>/usr/portage/profiles/package.mask</path>­filen,
da alle ændringer bliver fjernet, næste gang du opdaterer dit
Portage-træ. Hvis du vil maskere en pakke hårdt, så lav
<path>/etc/portage/package.mask</path> og noter pakken i den (brug det
samme format som nævnt ovenfor).
</p>
<!--
<p>
Et andet trick for at omgå "masked package"-problemet er, at installere
pakken ved brug af den fulde sti. Dette vil ignorere både <c>ACCEPT_KEYWORD</c> 
indstillingen og <path>package.mask</path> listen.
</p>

<pre caption="At installere en pakke uden at tjekke masked stadiet">
# <i>emerge /usr/portage/app-office/gnumeric/gnumeric-1.2.0.ebuild</i>
</pre>
-->
</body>
</subsection>
<subsection>
<title>Blokerede pakker</title>
<body>

<p>
Der er en situation, hvor du modtager den følgende fejl på din skærm:
</p>

<pre caption="Blokerende pakke">
[blocks B     ] gnome-base/bonobo-activation (from pkg gnome-base/libbonobo-2.4.0) 
</pre>

<p>
I eksemplet ovenfor, blokerer pakken <c>bonobo-activation</c> for en 
emerge af <c>libbonobo</c>. For at løse denne situation, så skal du
fjerne <c>bonobo-activation</c>-pakken for fortsætte:
</p>

<pre caption="At løse en blokerende situation">
# <i>emerge unmerge bonobo-activation</i>
</pre>

</body>
</subsection>
</section>
</sections>
