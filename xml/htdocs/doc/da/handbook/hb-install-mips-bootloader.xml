<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/da/handbook/hb-install-mips-bootloader.xml,v 1.9 2005/05/29 21:55:25 broeman Exp $ -->

<sections>

<version>1.7</version>
<date>2004-03-30</date>

<section id="sgi">
<title>Silicon Graphics maskiner - opsætning af arcboot</title>
<subsection>
<title>Installation af arcboot</title>
<body>

<p>
Tidligere i denne vejledning, har vi vist dig hvordan man laver en keren, kopiere den til
volume header ved at bruge <c>dvhtool</c>. Der er to store mangler i dette system:
</p>
	 
<ul>
  <li>Den er ikke understøttet på alle SGI-systemer</li>
  <li>Den kræver en signifikant større volume header</li>
</ul>
  	 
<p>
For at starte maskinen, en boot-loader, <c>arcboot</c> var udviklet til
dette arbejde. I stedet for at putte kernen direkt ind i volume header, vil
vi lade den være <path>/boot</path> (som er på en EXT2/3 partition), og fortælle
<c>arcboot</c> (som sidder i volume header i placeringen af kernen) hvor den
kan findes. Så vores første trin er at merge nogle værktøjer, vi kan bruge senere...
</p>

<pre caption="Installation af krævede værktøjer">
# <i>emerge dvhtool arcboot</i>
</pre>

<p>
Det skulle have installeret to værktøjere, <c>arcboot</c>, som er placeret i volume
header og hente kerner til os, og <c>dvhtool</c>, som hjælper os med at putte
<c>arcboot</c> ind i volume header.
</p>

<p>
Den magiske binære fil vi vil have, gemmer sig i <path>/usr/lib/arcboot</path> - på IP22-systemer
(Indy, Indigo 2, Challenge S), vil den være kaldet <path>arcboot.ip22</path>. På andre systemer vil
den være lige sådan. Vi kopierer først denne file ind i volume header.
</p>

<pre caption="Installation af arcboot ind til volume header">
# <i>dvhtool --unix-to-vh /usr/lib/arcboot/arcboot.ip?? arcboot</i>
</pre>

<p>
Vi vil så verificere tilgængeligheden af filen i volume headeren.
</p>

<pre caption="Tjekke om arcboot er ok">
# <i>dvhtool --print-volume-directory</i>
----- directory entries -----
Entry #0, name "linux", start 4, bytes 3262570
Entry #1, name "newlinux", start 6377, bytes 7619627
Entry #3, name "arcboot", start 21260, bytes 51448
#
</pre>

<note>
Du vil notere at i mit tilfælde, har jeg to gamle kerner, som sidder der,
<path>linux</path> og <path>newlinux</path>. Det er tømmermænd fra tidligere
vi begyndte med at bruge <c>arcboot</c>. Deres eksistens gør ikke noget, så længe
at <c>arcboot</c> er tilgængeligt, er alt fint.
</note>

</body>
</subsection>

<subsection>
<title>Opsætning af arcboot</title>
<body>

<p>
Hvis du nogensinde har opsat en Linux Loader (<c>lilo</c>) før, vil du finde ud af
at <c>arcboot</c> har lignende syntaks i dens opsætningsfil. Pas dog på; <c>arcboot</c>
forventer at opsætningsfilen eksisterer på en EXT2/3-partition, som <path>/etc/arcboot.conf</path>.
Den letteste vej er at sørge for at <path>/boot</path> er en EXT2/3-partition og at der en
fil kaldet <path>arcboot.conf</path> inden i <path>/boot/etc</path>-folderen.
Et eksempel-opsætning kan blive fundet i <path>/etc/arcbook.conf.sample</path>
</p>

<pre caption="Indsætte arcboot.conf i dens placering">
<comment>(Oprette /boot/etc folderen)</comment>
# <i>mkdir /boot/etc</i>

<comment>(Indsætte vores opsætning ind i mål-folderen)</comment>
# <i>cp /etc/arcboot.conf.sample /boot/etc/arcboot.conf</i>
 	 
<comment>(Oprette et symlink tilbage til /etc)</comment>
# <i>ln -s /boot/etc/arcboot.conf /etc/arcboot.conf</i>
  	 
<comment>(... og et symlink i /boot, som peger til sig selv)</comment>
# <i>(cd /boot; ln -s . boot)</i>
</pre>

<p>
Du kan så redigere <path>/etc/arcboot.conf</path> til dit eget ønske.
Personligt foretrækker jeg at opsæætte to kerne-billedfiler: <path>new</path>, en frisksamlet
billedfil, som måske virker; og <path>working</path>, en prøvet sikker
kerne-billedfil.  Min <path>arcboot.conf</path> ser ud sådan omkring dette.
</p>
  	 
<pre caption="Eksempel af arcboot.conf">
<comment># arcboot.conf</comment>
<comment>#</comment>
<comment># copyright 2002 Guido Guenther &lt;agx@sigxcpu.org&gt;</comment>
<comment>#</comment>
label=working
        image=/vmlinux
        append="root=/dev/sda3"

<comment># backup version</comment>
label=new
        image=/vmlinux-new
        append="root=/dev/sda3"
</pre>
  	 
<p>
Når den er sat op, skulle der kun være få ting, som skal opsættes
indeni SGI PROM for at få magien til at virke. Dette er dækket i, ikke næste
sektion (det er til Cobalt-servere), men den efterfølgende sektion
<uri link="#reboot">Genstart af systemet</uri>.
</p>
  	 
</body>
</subsection>
</section>
  	 
<section id="cobalt">
<title>Cobalt MicroServere - opsætning af CoLo</title>
<subsection>
<title>Installation af CoLo</title>
<body>
 	 
<p>
På Cobalt-servere har disse maskiner en meget mindre egnet firmware installeret på
chippen. Cobalt BOOTROM er primitiv ved at sammenligne den med SGI PROMen, og har et
antal seriøse begrænsninger.
</p>
  	 
<ul>
  <li>
    Der er en 675 KB begrænsning på kerner. Den nuværende størrelse af Linux 2.4 gør det
    næsten umuligt at lave en kerne på den størrelse.  Linux 2.6 er helt ude af
    denne diskussion.
  </li>
  <li>
    64-bit kerneer er ikke understøttet af den normale firmware (selvom disse er
    meget eksperimental på Cobalt-maskiner på dette tidspunkt)
  </li>
  <li>
    Skallen er meget primitiv
  </li>
</ul>
  	 
<p>
For at overkomme disse begrænsninger, en alternativ firmware, kaldet
<uri link="http://www.colonel-panic.org/cobalt-mips/">CoLo</uri> (Cobalt
Loader) er blevet udviklet. Dette er en BOOTROM-billedfil, som kan enten blive flashed ind
i chippen på Cobalt-serveren eller hentet igennem den eksisterende firmware.
</p>
  	 
<note>
Denne vejledning vil tage dig igennem opsætningen af CoLo, så den kan blive hentet igennem
den normale firmware. Dette er ikke kun sikkert, det er også den anbefalede metode at opsætte CoLo.
</note>
  	 
<warn>
Du kan, hvis du ønsker, flashe den ind i serveren, og totalt 
erstatte den originale firmware - dog, du er helt på din egen på det
eventyr. Skulle noget gå galt, bliver du nødt til at fysisk fjerne
BOOTROM og reprogrammere den selv med den normale firmware.  Hvis du ikke er sikker
på at gøre dette - så flash <e>IKKE</e> din maskine. Vi tager ikke noget
ansvar for hvad der sker, hvis du ignorerer denne anbefaling.
</warn>
  	 
<p>
Okay, med alle advarselskiltene væk, kan vi fortsætte med at installere CoLo. Start
først ved emerge pakken.
</p>
  	 
<pre caption="Emerge af colo">
# <i>emerge colo</i>
</pre>
  	 
<p>
Med den installeret (Jeg håber du læser de beskeder ;-) bør du være klar til at kigge
inden i <path>/usr/lib/colo</path>-folderen for at finde to filer,
<path>colo-chain.elf</path>: "kernen" til den normale firmware, som kan hentes, og
<path>colo-rom-image.bin</path>: en ROM-billedfil til at flashe ind i BOOTROM.  Vi
starter med at mounte /boot og dumpe en komprimeret kopi af
<path>colo-chain.elf</path> i <path>/boot</path>, hvor systemet forventer det.
</p>
  	 
<pre caption="Putte CoLo i dens plads">
# <i>gzip -9vc /usr/lib/colo/colo-chain.elf &gt; /boot/vmlinux.gz</i>
</pre>
  	 
</body>
</subsection>
  	 
<subsection>
<title>Opsætning af CoLo</title>
  	 
<body>
  	 
<p>
Når nu systemet starter op for første gang, vil den hente CoLo, som vil spytte en menu
på bagside-LCDen. Den første valgmulighed (og standard som er fortsat efter ca. 5
sekunder) er at starte fra harddisken. Systemet vil så prøve at mounte
den første Linux partition den finder, og køre scriptet
<path>default.colo</path>. Syntaksen er fuldt dokumenteret i CoLo
dokumentationen (tag et kig på
<path>/usr/share/doc/colo-X.YY/README.shell.gz</path> - hvor X.YY er
versionen installeret), det er meget simpelt.
</p>

<note>
Bare et tip: når du installerer kerner, vil jeg normalt oprette to
kerne-billedfiler, <path>kernel.gz.fungerende</path> -- en kendt fungerende
kerne, og <path>kernel.gz.ny</path> -- en kerne, som lige er blevet bygget.
Du kan enten bruge symlinsk til at pege på de "nye" og "fungerende" kerner, eller
bare omdøbe kerne-billedfilerne.
</note>
  	 
<pre caption="En basis default.colo">
<comment>#:CoLo:#</comment>
mount hda1
load /kernel.gz.working
execute root=/dev/hda3 ro console=ttyS0,115200
</pre>
  	 
<note>
CoLo nægter at hente et script, der ikke starter med <c>#:CoLo:#</c>
linien. Tænk på det som værende tilsvarende til at sige <c>#!/bin/sh</c> i 
shell-scripts.
</note>
  	 
<p>
Det er også muligt at spørge et spørgsmål, som fra hvilken kerne &amp; opsætning,
som du vil ønske at starte, med en standard timeout. Det er opsætningen, som jeg vil 
bruge på min Cobalt-server:
</p>
  	 
<impo>
Noter venligst at hvis du bruger CoLo v1.12 eller v1.13, at du skal bruge <c>menu</c>-kommandoen.
Det følgende eksempel vil ikke virke med v1.11.
</impo>

<impo>
<c>menu</c>-kommandoen er blevet erstattet af <c>select</c>-kommandoen i CoLo v1.14.
Hvis du har installeret en nyere version selv, tag et kig i
<path>menu.colo</path> i <path>examples</path>-underfolderen af CoLo-distributionen.
</impo>

<pre caption="Menu-baseret opsætning">
<comment>#:CoLo:#</comment>
  	 
lcd "Mounting hda1"
mount hda1
menu "Which Kernel?" 50 Working working New new
lcd "Loading Linux" {menu-option}
load /kernel.gz.{menu-option}
lcd "Booting..."
execute root=/dev/hda5 ro console=ttyS0,115200
boot
</pre>
  	 
<p>
Det ovenstående script spørger brugeren, hvilken kerne han/hun ville ønske skulle starte (enten
New eller Working), så henter den <path>vmlinux.gz.new</path> eller
<path>vmlinux.gz.working</path> afhængigt af valget. Hvis et valg ikke er gjort
indenfor 5 sekunder (50/10ende af et sekund) vil den starte første valgmulighed.
</p>
</body>
  	 
</subsection>
</section>
 	 
<section>
<title>Opsætning til den serielle konsol</title>
  	 
<subsection>
<body>
  	 
<p>
Okay, Linux installationen, som det står nu, ville starte fint, men forudsætter
at du er logget ind igennem en fysisk terminal. På Cobalt-maskiner, dette
er meget dårligt - det er ikke sådan en ting som en fysisk terminal.
</p>
  	 
<note>
Dem, der har luksus af at have understøttet framebuffer kan springe denne sektion over, hvis de
ønsker.
</note>
  	 
<p>
Først, hent et redigeringsprogram og hack <path>/etc/inittab</path>. Nede
i filen, vil du se noget som dette :
</p>
  	 
<pre caption="inittab opsætning">
<comment># SERIAL CONSOLE</comment>
<comment>#c0:12345:respawn:/sbin/agetty 9600 ttyS0 vt102</comment>
  	 
<comment># TERMINALS</comment>
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
  	 
<comment># What to do at the "Three Finger Salute".</comment>
ca:12345:ctrlaltdel:/sbin/shutdown -r now
</pre>
  	 
<p>
Først udkommenter <c>c0</c> linien. Som standard, er den brug til terminaler med en
baudrate på 9600 bps. På Cobalt-servers, vil du ønske at ændre dette til 115200 for
at matche baudraten besluttet af BOOT ROM. Dette er hvordan sektionen ser ud på min
maskine. På en hovedløs maskine (f.eks. Cobalt-servere), vil jeg også anbefale at
udkommentere de lokale terminale linier (<c>c1</c> til <c>c6</c>), da disse har 
tendensen til at opføre sig dårligt, når de ikke kan åbne <path>/dev/ttyX</path>.
</p>

<pre caption="Eksempel af et udsnit fra inittab">
<comment># SERIAL CONSOLE</comment>
c0:12345:respawn:/sbin/agetty 115200 ttyS0 vt102
  	 
<comment># TERMINALS -- These are useless on a headless qube</comment>
<comment>#c1:12345:respawn:/sbin/agetty 38400 tty1 linux</comment>
<comment>#c2:12345:respawn:/sbin/agetty 38400 tty2 linux</comment>
<comment>#c3:12345:respawn:/sbin/agetty 38400 tty3 linux</comment>
<comment>#c4:12345:respawn:/sbin/agetty 38400 tty4 linux</comment>
<comment>#c5:12345:respawn:/sbin/agetty 38400 tty5 linux</comment>
<comment>#c6:12345:respawn:/sbin/agetty 38400 tty6 linux</comment>
</pre>

<p>
Nu til sidst... skal vi fortælle systemet, at den lokale serielle prot kan blive
stolet på som en sikker terminal. Filen vi skal stikke i er <path>/etc/securetty</path>.
Den indeholder en liste af terminaler, som systemet stoler på. Vi putter bare to linier
mere ind, som tillader den serielle linie til at blive brugt til <c>root</c> login.
</p>

<pre caption="Tilladelse af root-login på en seriel konsol">
<comment>(/dev/ttyS0 - det traditionelle navn til den første seriellle port)</comment>
# <i>echo 'ttyS0' >> /etc/securetty</i>
  	 
<comment>(Derefter, Linux kalder dette /dev/tts/0 -- så vi tilføjer også
dette)</comment>
# <i>echo 'tts/0' >> /etc/securetty</i>
</pre>
  	 
</body>
</subsection>
</section>

<section id="reboot">
<title>Genstart af systemet</title>
<subsection>
<body>

<p>
Afslut det chrooted miljø og afmount alle mountede partitioner. Indtast så den magiske kommando, du har ventet på: <c>reboot</c>.
</p>

<pre caption="Afslutning af chroot og afmount af partitioner samt genstart">
# <i>exit</i>
cdimage ~# <i>cd</i>
cdimage ~# <i>umount /mnt/gentoo/boot /mnt/gentoo/proc /mnt/gentoo</i>
cdimage ~# <i>reboot</i>
</pre>

<note>
<e>Cobalt brugere:</e> Resten af denne sektion dækker opsætningen af SGI
PROM, så at den starter <c>arcboot</c> fra disken og henter Linux. Dette er ikke
brugbart til opsætning af Cobalt servere. I stedet for, er alt dit arbejder færdig -
der er ikke nogen opsætning som skal gøres for at starte op første gang, så du kan
springe til næste sektion: <uri link="?part=1&amp;chap=11">Afslutte din 
Gentoo-installation</uri>
</note>

</body>
</subsection>
</section>
<section>
<title>Finindstilling af SGI PROM</title>
<subsection>
<body>

<p>
Når du har genstartet, gå ind i <e>System Maintenance Menu</e> og vælg
<e>Enter Command Monitor</e> (<c>5</c>). Hvis du vil teste din nye
Gentoo-installation, kan du bare køre <c>boot -f &lt;kernel name&gt;</c>. For at få
dit system til at permanent starte ind i Gentoo-installation, skal du sætte nogle
variabler i SGI-PROMen:
</p>

<pre caption="Configuring the PROM to Boot Gentoo">
1) Start System
2) Install System Software
3) Run Diagnostics
4) Recover System
5) Enter Command Monitor

Option? <i>5</i>
Command Monitor.  Type "exit" to return to the menu.

<comment>(&lt;root device&gt; = Gentoos root-partition, f.eks. /dev/sda3)</comment>
&gt;&gt; <i>setenv OSLoadPartition &lt;root device&gt;</i>

<comment>(For at vise en liste over tilgængelige kerner, tast "ls")</comment>
&gt;&gt; <i>setenv OSLoader &lt;kernel name&gt;</i>
&gt;&gt; <i>setenv OSLoadFilename &lt;kernel name&gt;</i>

<comment>(Erklær kerne-erklæringerne, som du ønsker at tilføje)</comment>
&gt;&gt; <i>setenv OSLoadOptions &lt;kernel parameters&gt;</i>

<comment>(Leverer placeringen af volume header)</comment>
&gt;&gt; <i>setenv SystemPartition scsi(0)disk(1)rdisk(0)partition(8)</i>

<comment>(Automatisk starte Gentoo)</comment>
&gt;&gt; <i>setenv AutoLoad Yes</i>

<comment>(Indstilling af tidszonen)</comment>
&gt;&gt; <i>setenv TimeZone EST5EDT</i>

<comment>(Brug den serielle konsol - grafisk adapterbrugere bør have "g" i stedet for "d1" (ettal))</comment>
&gt;&gt; <i>setenv console d1</i>
</pre>

<p>
Nu er du klar til at nyde Gentoo! Start ind i din Gentoo-installation og afslut 
med <uri link="?part=1&amp;chap=11">Afslutte din Gentoo-installation</uri>.
</p>

</body>
</subsection>
</section>
</sections>
