<?xml version='1.0' encoding='iso-8859-1'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/da/handbook/hb-install-x86-kernel.xml,v 1.1 2004/05/02 20:48:27 broeman Exp $ -->

<sections>
<section>
<title>Tidszone</title>
<body>
  	 
<p>
Du bliver først nødt til at vælge din tidszone så. at dit system ved
hvor det er lokaliseret. Kig efter din tidszone i
<path>/usr/share/zoneinfo</path>, og lav derefter en symbolsk
henvisning til <path>/etc/localtime</path> ved brug af <c>ln</c>:
</p>
  	 
<pre caption="At sætte tidszone informationen">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Hvis du vil bruge GMT)</comment>
# <i>ln -sf /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>
  	 
</body>
</section>

<section>
<title>Installation af kildekoderne</title>
<subsection>
<title>Valg af kerne</title>
<body>

<p>
Kernen omkring alle distributioner er bygget på Linux-kernen. Det er et
lag imellem bruger-programmer og dit systems hardware. Gentoo giver dens
brugere flere forskellige mulige kerne-kildekoder. En fuld liste med 
beskrivelser forefindes i <uri link="/doc/da/gentoo-kernel.xml">Gentoo 
Linux kerne vejledning</uri>. 
</p>

<p>
Til x86-baserede systemer har vi, iblandt andre kerner, <c>vanilla-sources</c>
(standard kerne-kildekode, som er udviklet af linux-kerne udviklerne),
<c>gentoo-sources</c> (kerne-kildekode, som er patchet med ydelsesforbedrende
egenskaber), <c>gentoo-dev-sources</c> (kerne version 2.6 kildekoder, som er 
patchet med ydelsesforbedrende egenskaber og stabilitetsforbedringer), 
<c>xfs-sources</c> (kerne-kildekoder med det sidste nye XFS-understøttelse), 
<c>gs-sources</c> (kerne-kildekode, som er patchet til serverbrug), 
<c>gaming-sources</c> (kerne-kildekode, som er patchet til optimal 
spilleydelse), <c>development-sources</c> (vanilla 2.6 kernekildekode), ...
</p>

<p>
Hvis du laver en netværkløs installation, så kan du ikke vælge hvilke
som helst af de tilgængelige kerner, da vi kun stiller kildekode for
nogle få af dem til rådighed. Den følgende tabel lister de
tilgængelige kerne kildekoder til netværksløse installationer.
</p>
  	 
<p>
Vælg din kerne-kildekode og installer den ved at bruge <c>emerge</c>. 
</p>

<pre caption="Installation af kerne-kildekode">
# <i>emerge gentoo-sources</i>
</pre>

<p>
Når du tager et kig i <path>/usr/src</path>, burde du se en genvej 
kaldet <path>linux</path>, som peger mod din kerne-kildekode:
</p>

<pre caption="Se genvej til kerne-kildekode">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.4.25-gentoo
</pre>

<p>
Hvis det ikke er det (altså at genvejen peger mod en anden 
kerne-kildekode) skal du ændre genvejen før du fortsætter:
</p>

<pre caption="Ændring af genvejen til kerne-kildekode">
# <i>rm /usr/src/linux &amp;&amp; ln -s /usr/src/linux-2.4.25-gentoo /usr/src/linux</i>
</pre>

<p>
Nu er det tid til at opsætte og kompilere din kernes kildekoder. Alle
arkitekturer kan bruge <c>genkernel</c> til dette, som vil bygge en omfattende
kerne, som også er brugt på LiveCDen. Vi forklarer dog den "manuelle" 
opsætning først, idet det er den bedste metode til at optimere dit system.
</p>

<p>
Hvis du vil opsætte din kerne manuelt, forsæt nu med <uri
link="#manual">Standard: Manuel opsætning</uri>. Hvis du 
du vil bruge <c>genkernel</c>, bør du læse <uri 
link="#genkernel">Alternativ: Brug af genkernel</uri> i stedet for.
</p>

</body>
</subsection>
</section>
<section>
<title>Standard: Manuel opsætning</title>
<subsection>
<title>Introduktion</title>
<body>

<p>
At opsætte kernen manuelt bliver ofte anset som det sværeste, som enhver
Linux-bruger skal gå igennem. Intet er mindre rigtigt -- efter
opsætninger af nogle kerner, vil du ikke kunne huske at det var svært ;)
</p>

<p>
Én ting er dog <e>rigtigt</e>: du skal kende dit system, når du starter med at
opsætte en kerne manuelt. De fleste informationer kan blive indsamlet ved at se
på indholdet af <path>/proc/pci</path> (eller ved at bruge <c>lspci</c>, hvis 
den er tilgængelig). Du kan også køre <c>lsmod</c> for at se hvilke 
kerne-moduler, LiveCDen bruger (det vil måske give dig en god idé om hvad du 
skal aktivere).
</p>

<p>
Gå nu til kerne-kildekode mappen og udfør <c>make menuconfig</c>. Dette
vil starte en ncurses-baseret opsætningsmenu.
</p>

<pre caption="Påkalde menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Du vil blive hilst af flere opsætningssektioner. Vi vil først give dig
en liste af de valgmuligheder, som du skal aktivere (ellers vil Gentoo
ikke funktionere, eller funktionere ordentligt uden ekstra
finindstillinger).
</p>

</body>
</subsection>
<subsection>
<title>Aktivering af krævede valgmuligheder</title>
<body>

<p>
Først skal du aktivere brugen af udviklings- og forsøgskoder/-drivere.
Du vil få brug for dette, ellers vil meget vigtige koder/drivere ikke vise sig:
</p>

<pre caption="Valg af eksperimentielle koder/drivere">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Gå nu til <c>File Systems</c> og vælg understøttelse til de filsystemer, som 
du bruger.
Kompiler dem <e>ikke</e> som moduler, ellers vil dit Gentoo system ikke have 
mulighed for at montere dine partitioner. Vælg også <c>Virtual memory</c>, 
<c>/proc file system</c>, <c>/dev file system</c> og 
<c>Automatically mount at boot</c>:
</p>

<pre caption="Valg af nødvendige filsystemer">
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot

<comment>(Fravælg disse følgende, medmindre du har en 2.6 kerne)</comment>
  [ ] /dev/pts file system for Unix98 PTYs

<comment>(Vælg en eller flere af de følgende valgmuligheder, som er nødvendige for dit system)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<note>
Brugere af en 2.6 kerne vil finde nogle af de ovennævnte valgmuligheder under 
<c>Pseudo filesystems</c>, som er en underafdeling af <c>File systems</c>.
</note>

<p>
Hvis du bruger PPPoE til at forbinde til Internettet eller du bruger en opkaldsmodem, vil du få brug for de følgende valgmuligheder i kernen:
</p>

<pre caption="Valg af PPPoE nødvendige drivere">
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports
</pre>

<note>
Brugere af en 2.6 kerne vil finde nogle af de ovennævnte valgmuligheder under 
<c>Networking support</c>, som er en underafdeling af <c>Device Drivers</c>.
</note>

<p>
De to kompressionsvalgmuligheder vil ikke være ubrugelige, men er slet ikke 
nødvendige, det samme med <c>PPP over Ethernet</c> valgmuligheden, som måske 
vil blive brugt af <c>rp-pppoe</c>, når den er opsat til at lave kerne-modus 
PPPoE.
</p>

<p>
Hvis du kræver det, glem ikke at inkludere understøttelse af dit netkort
i kernen.
</p>

<p>
Hvis du har en Intel CPU, som understøtter HyperThreading (tm), eller du har et
multi-processor system, bør du aktivere "Symmetric multi-processing support":
</p>

<pre caption="Aktivering af SMP-understøttelse">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
Når du er færdig med at opsætte kernen, forsæt til <uri 
link="#compiling">Kompilering og installation</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilering og installation</title>
<body>

<p>
Nu da din kerne er opsat, er det tid til at kompilere og installere den. 
Afslut opsætningen (Exit) og kør <c>make dep &amp;&amp; make bzImage modules 
modules_install</c>:
</p>

<pre caption="Kompilering af kerne">
<comment>(Til 2.4 kernen)</comment>
# <i>make dep &amp;&amp; make bzImage modules modules_install</i>

<comment>(Til 2.6 kernen)</comment>
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Når kernen er færdig med at kompilere, kopier den da over til
<path>/boot</path>.
</p>

<pre caption="Installation af kerne">
# <i>cp arch/i386/boot/bzImage /boot/kernel-2.4.25-gentoo</i>
# <i>cp System.map /boot/System.map-2.4.25-gentoo</i>
</pre>

<p>
Det er også klogt at kopiere din kerneopsætningsfil til
<path>/boot</path>, bare for en sikkerheds skyld :)
</p>

<pre caption="Backup af din kerneopsætning">
# <i>cp .config /boot/config-2.4.25-gentoo</i>
</pre>

<p>
Hvis du er en MIPS-bruger og dit system ikke vil starte ELF-kerner, kompiler
kernen ved brug af <c>make vmlinux.ecoff</c> i stedet for <c>make vmlinux</c>.
Kerne-billedfilen vil blive gemt som <path>arch/mips/boot/vmlinux.ecoff</path> 
i stedet for <path>vmlinux</path>.
</p>

<p>
Fortsæt nu med <uri link="#kernel_modules">Installation af separate
kernemoduler</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternativ: Brug af genkernel</title>
<body>

<p>
Hvis du læser denne sektion, så har du valgt at bruge vores <c>genkernel</c>
script til at opsætte din kerne for dig.
</p>

<p>
Nu da dit kerne-kildekodetræ er installeret, er det tid til at kompilere din
kerne ved at bruge vores <c>genkernel</c> script til at automatisk bygge en 
kerne for dig. <c>genkernel</c> virker ved at opsætte en kerne, næsten 
identisk med hvordan vores LiveCD-kerne er blevet opsat. Dette betyder, at når 
du bruger <c>genkernel</c> til at bygge din kerne, vil dit system generelt 
finde alt dit hardware ved opstart, ligesom din LiveCD gør. Fordi at genkernel 
ikke kræver nogen manuel kerneopsætning, er den en ideel løsning for
de brugere, som ikke føler sig veltilpas med at kompilere deres egne kerner.
</p>

<p>
Lad os nu se hvordan vi bruger genkernel. Først skal du emerge
genkernel'ens ebuild:
</p>

<pre caption="Emerge genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Kompiler nu din kerne-kildekoder ved at køre <c>genkernel all</c>.
Vær opmærksom på at,
når <c>genkernel</c> kompilerer en kerne, som understøtter det meste hardware, 
kan kompileringen tage noget tid at færdiggøre!
</p>

<p>
Notér at hvis din boot-partition ikke bruger ext2- eller ext3- filsystem, skal du manuelt opsætte din kernel ved brug af <c>genkernel --menuconfig all</c> og tilføje understøttelse til dit filsystem <e>i</e> kernen (dvs. <e>ikke</e> som module).
</p>

<pre caption="Start af genkernel">
# <i>genkernel all</i>
</pre>

<p>
Når <c>genkernel</c> afslutter, vil en kerne, et fuld sæt af moduler og
<e>initial root disk</e> (initrd) være færdiggjort. Vi vil bruge kernen
og initrd, når vi opsætter en boot-loader senere i dette dokument. Skriv
navnene på kernen og initrd ned, da du vil få brug for dem, når du skriver til
boot-loaderens opsætningsfil. Initrd vil blive startet med det samme efter
at opstartsprocessen udfører automatisk-hardwarefinding (ligesom på LiveCDen) 
før dit "rigtige" system starter op.
</p>

<pre caption="Tjekker den oprette kerne-billedfils navn og initrd">
# <i>ls /boot/kernel* /boot/initrd*</i>
</pre>

<p>
Lad os nu udføre et trin mere, for at få vores system til at blive mere end 
LiveCDen -- lad os emerge <c>hotplug</c>. Imens initrd automatisk finder 
hardware, som der er brug for til at starte dit system, vil <c>hotplug</c> 
automatisk finde alt andet.
For at emerge og aktivere <c>hotplug</c>, tast følgende:
</p>

<pre caption="Emerge og aktivering af hotplug">
# <i>emerge hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>Installation af separate kernemoduler</title>
<subsection>
<title>Installation af ekstra moduler</title>
<body>

<p>
Når det er passende, skulle du emerge ebuilds til ekstra hardware, som er
på dit system. Her er en liste over kerne-relaterede ebuilds, som du kan 
emerge:
</p>

<table>
<tcolumn width="1in"/>
<tcolumn width="4in"/>
<tcolumn width="2in"/>
<tr>
  <th>Ebuild</th>
  <th>Formål</th>
  <th>Kommando</th>
</tr>
<tr>
  <ti>nvidia-kernel</ti>
  <ti>Accelereret NVIDIA-grafik til XFree86</ti>
  <ti><c>emerge nvidia-kernel</c></ti>
</tr>
<tr>
  <ti>nforce-net</ti>
  <ti>Indbygget netværkscontroller på NVIDIA NForce(2) bundkort</ti>
  <ti><c>emerge nforce-net</c></ti>
</tr>
<tr>
  <ti>nforce-audio</ti>
  <ti>Indbygget lyd på NVIDIA NForce(2) bundkort</ti>
  <ti><c>emerge nforce-audio</c></ti>
</tr>
<tr>
  <ti>e100</ti>
  <ti>Intel e100 Fast Ethernet Adaptere</ti>
  <ti><c>emerge e100</c></ti>
</tr>
<tr>
  <ti>e1000</ti>
  <ti>Intel e1000 Gigabit Ethernet Adaptere</ti>
  <ti><c>emerge e1000</c></ti>
</tr>
<tr>
  <ti>emu10k1</ti>
  <ti>Creative Sound Blaster Live!/Audigy understøttelse</ti>
  <ti><c>emerge emu10k1</c></ti>
</tr>
<tr>
  <ti>ati-drivers</ti>
  <ti>Accelereret ATI Radeon 8500+/FireGL-grafik til XFree86</ti>
  <ti><c>emerge ati-drivers</c></ti>
</tr>
<tr>
  <ti>ati-drivers-extra</ti>
  <ti>Grafiske ATI-værktøjer</ti>
  <ti><c>emerge ati-drivers-extra</c></ti>
</tr>
</table>

<p>
Pas dog på, da nogle af disse ebuilds har mange afhængigheder. For at 
verificere at pakkerne vil blive installeret ved at emerge en ebuild brug 
<c>emerge --pretend</c>. F.eks. til <c>emu10k1</c>-pakken:
</p>

<pre caption="Se fuld installation-pakkeliste">
# <i>emerge --pretend emu10k1</i>
</pre>

<p>
Hvis du ikke kan lide de pakker som den vil installere, brug 
<c>emerge --pretend --verbose</c> for at se hvilke USE-flag, som er afkrydset, 
når man beslutter afhængigheder:
</p>

<pre caption="Se USE-flag brug">
# <i>emerge --pretend --verbose emu10k1</i>
<comment>...</comment>
[ebuild  N    ] media-sound/aumix-2.8  +gpm +nls +gtk +gnome +alsa -gtk2
</pre>

<p>
I det sidste eksempel, kan du se at en af <c>emu10k1</c>s afhængigheder
(<c>aumix</c>) bruger <c>gtk</c> og <c>gnome</c> USE-flag, som gør at gtk 
(hvilket afhænger af XFree) vil blive kompileret med.
</p>

<p>
Hvis du ikke vil have at alle disse bliver kompileret, fravælg alle USE-flag, 
f.eks.:
</p>

<pre caption="Emerge emu10k1 med alle USE-flag fravalgt">
# <i>USE="-gpm -nls -gtk -gnome -alsa" emerge --pretend emu10k1</i>
</pre>

<p>
Når du er glad for resultatet, fjern <c>--pretend</c> for at starte med
at installere <c>emu10k1</c>.
</p>

</body>
</subsection>
<subsection>
<title>Opsætning af moduler</title>
<body>

<p>
Du bør opliste de moduler, som du vil have automatisk hentet, i <path>/etc/modules.autoload.d/kernel-2.4</path> (eller <path>kernel-2.6</path>). Du kan også tilføje ekstra valgmuligheder til modulerne, hvis du vil.
</p>

<p>
For at se alle de tilgængelige moduler, kør følgende <c>find</c>-kommando. Glem ikke
at udskifte "&lt;kernel version&gt;" med den version af kernen, du lige
har kompileret:
</p>

<pre caption="Se alle mulige moduler">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
For automatisk at hente f.eks <c>3c59x.o</c> modulet, skal du ændre
<path>kernel-2.4</path> eller <path>kernel-2.6</path> filen og skrive
modulnavnet i den.
</p>

<pre caption="At redigere /etc/modules.autoload.d/kernel-2.4">
<comment>(Eksempel for 2.4 kerner)</comment>
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4 eller kernel-2.6">
3c59x
</pre>

<p>
Kør nu <c>modules-update</c> for at overgive dine ændringer til
<path>/etc/modules.conf</path> filen:
</p>

<pre caption="Start af modules-update">
# <i>modules-update</i>
</pre>

<p>
Fortsæt installationen med <uri link="?part=1&amp;chap=8">Opsætning af
dit system</uri>.
</p>

</body>
</subsection>
</section>
</sections>
