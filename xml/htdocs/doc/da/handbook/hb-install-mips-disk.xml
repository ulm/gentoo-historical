<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/da/handbook/hb-install-mips-disk.xml,v 1.11 2005/06/29 04:06:08 broeman Exp $ -->

<sections>

<version>1.9</version>
<date>2005-06-10</date>

<section>
<title>Introduktion til blok-enheder</title>
<subsection>
<title>Blok-enheder</title>
<body>

<p>
Vi vil tage et godt kig på disk-orienterede aspekter af Gentoo Linux
og Linux generelt, inklusiv Linux filesystemer, partitioner og blok-enheder.
Så, når du er blevet godt kendt med diske og filsystemer,
vil du blive vejledt igennem processen af at opsætte partioner og filsystemer
til din Gentoo Linux installation.
</p>

<p>
For at begynde, vil vi introducere begrebet <e>blok-enheder</e>. Den
mest kendte blok-enhed er sikkert den, som repræsenterer den første
SCSI-harddisk på et Linux system, med navnet
<path>/dev/sda</path>.
</p>

<p>
Blok-enhederne ovenover repræsenterer en abstrakt grænseflade til
harddisken.  Brugerprogrammer kan bruge disse blok-enheder, til at
interagere med din harddisk, uden at skulle bekymre sig om at dine drev
er IDE, SCSI eller noget andet. Programmet kan simpelthen adressere
lageret på harddisken, som et bundt af tilstødende,
vilkårlige-tilgængelige 512-byte blokke.
</p>

</body>
</subsection>
<subsection>
<title>Partitioner</title>
<body>

<p>
Selvom det er teoretisk muligt at bruge hele harddisken til dit Linux
system, er det næsten aldrig gjort i praksis. I stedet for er hele
hardiskens blok-enheder opsplittet i mindre, mere håndgribelige
blok-enheder. På de fleste systemer er disse kaldet
<e>partitioner</e>.
</p>

</body>
</subsection>
</section>
<section>
<title>Design af et partitionsskema</title>
<subsection>
<title>Hvor mange og hvor stort?</title>
<body>

<p>
Antallet af partitioner er meget afhængigt af dit miljø. F.eks., hvis
du har en hel del brugere, vil det være nærmest at lave dit
<path>/home</path> separat, idet at det forøger sikkerheden og gør det
nemmere at lave backup.  Hvis du installerer Gentoo for at arbejde som
en mail-server, burde din <path>/var</path> være separat, idet alle
emails er gemt inde i <path>/var</path>. Et godt valg af filsystem vil
derefter maksimere din ydelse. Spil-servere bør have en separat
<path>/opt</path>, idet at de fleste spil-servere bliver installeret
der. Forklaringen er den samme som for <path>/home</path>: sikkerhed
og backup. Du vil med sikkerhed ønske at holde <path>/usr</path> stor:
ikke alene indeholder den de fleste programmer, Portage-træet optager
alene 500 MB, undtagen de forskellige kildekoder, som er gemt inden i.
</p>

<p>
Som du kan se, afhænger det meget af hvad du vil opnå. Separate
partitioner eller volumes har følgende fordele:
</p>

<ul>
<li>
  Du kan vælge det bedste ydelsesstærke filsystem til hver partition eller volume
</li>
<li>
  Hele dit system bør ikke løbe tør for fri harddisk-plads, hvis et ødelagt værktøj bliver
  ved med at skrive filer til en partition eller volume
</li>
<li>
  Hvis nødvendigt, et filsystem-tjek er reduceret i tid, idet flere tjek kan blive
  gjort parallelt (selvom denne fordel er større med flere harddiske
  end med flere partitioner)
</li>
<li>
  Sikkerhed kan blive forøget ved at mounte nogle partitioner eller volumes read-only (kun-læs), 
  nosuid (setuid bits er ignoreret), noexec (executable bits er ignoreret) osv.
</li>
</ul>

<p>
Dog har flere partitioner en stor ulempe: hvis det ikke er opsat
ordentligt, kan det betyde at have et system med masser
af fri plads på én partition og intet på en anden. Der er også en
begrænsning på 15 partitioner på SCSI og SATA.
</p>

</body>
</subsection>
</section>
<section>
<title>At bruge fdisk på MIPS for at partitionere din disk</title>
<subsection>
<title>SGI-maskiner: Oprettelse af en SGI Disk Label</title>
<body>

<p>
Alle diske i et SGI system kræver en <e>SGI Disk Label</e>, hvilken
fungerer som noget der ligner Sun &amp; MS-DOS disklabels -- Den gemmer
information omkring diskens partitioner. At lave en SGI Disk Label vil
skabe to specielle partitioner på disken:
</p>

<ul>
  <li>
<!--    <e>SGI Volume Header</e> (den niende partition): Denne partition er
    vigtig. Det er her kerne billed-filerne skal hen. For at gemme
    kerne billed-filer, vil du bruge værktøjet kendt som
    <c>dvhtool</c> til at kopiere kerne billed-filer til denne
    partition. Du vil derefter være i stand til at opstarte fra kerner
    på denne partition via SGI PROM Monitor. -->
    <e>SGI Volume Header</e> (den niende partition): Denne partition er
    vigtig. Det er her kerne billed-filerne skal hen.
  </li>
  <li>
    <e>SGI Volume</e> (den 11. partition): Denne partitions formål
    minder om Sun Disklabel's tredje partition af "Hele disken". Denne
    partition dækker hele disken, og bør forblive uberørt. Den tjener
    ikke noget specielt formål andet end at hjælpe PROM på en ikke
    dokumenteret facon (eller den bliver brugt af IRIX på en eller
    anden måde).
  </li>
</ul>

<warn>
SGI Volume Headeren <e>skal</e> begynde ved cylinder 0. Hvis dette
fejler, så vil du ikke være i stand til at starte op fra disken.
</warn>

<p>
Det følgende er et eksempel udsnit fra en <c>fdisk</c> session. Læs
det og ret det til efter dine behov...
</p>

<pre caption="At lave en SGI Disklabel">
# <i>fdisk /dev/sda</i>
http://gentoo-dk.berlios.de/sider/status.xml
Command (m for help): <i>x</i>

Expert command (m for help): <i>m</i>
Command action
   b   move beginning of data in a partition
   c   change number of cylinders
   d   print the raw data in the partition table
   e   list extended partitions
   f   fix partition order
   g   create an IRIX (SGI) partition table
   h   change number of heads
   m   print this menu
   p   print the partition table
   q   quit without saving changes
   r   return to main menu
   s   change number of sectors/track
   v   verify the partition table
   w   write table to disk and exit

Expert command (m for help): <i>g</i>
Building a new SGI disklabel. Changes will remain in memory only,
until you decide to write them. After that, of course, the previous
content will be unrecoverably lost.

Expert command (m for help): <i>r</i>

Command (m for help): <i>p</i>

Disk /dev/sda (SGI disk label): 64 heads, 32 sectors, 17482 cylinders
Units = cylinders of 2048 * 512 bytes

----- partitions -----
Pt#     Device  Info     Start       End   Sectors  Id  System
 9:  /dev/sda1               0         4     10240   0  SGI volhdr
11:  /dev/sda2               0     17481  35803136   6  SGI volume
----- Bootinfo -----
Bootfile: /unix
----- Directory Entries -----

Command (m for help):
</pre>

<note>
Hvis din harddisk allerede har en eksisterende SGI Disklabel, så vil fdisk
ikke tillade at lave en ny label. Der er to måder at komme omkring
dette på. En er at lave en Sun eller MS-DOS disklabel, skrive
ændringerne til disken og genstarte fdisk. Den anden er at overskrive
partitionstabellen med null data via den følgende kommando: <c>dd
if=/dev/zero of=/dev/sda bs=512 count=1</c>.  
</note>

<!-- This has been dropped in favour of using arcboot
<p>At få SGI Volume Header til at justere den rigtige størrelse</p>

<p>
Nu hvor en SGI Disklabel er blevet lavet, så kan partitioner
defineres. I det ovenfor nævnte eksempel, er der allerede defineret to
partitioner for dig. Disse er de to specielle partitioner nævnt
ovenfor og bør normalt ikke ændres. For at installere Gentoo, bliver
vi, imidlertidig nødt til at hente adskillige kerne billed-filer
direkte ind i volume headeren, da der ikke er nogen understøttet SGI
Boot-loader tilgængelig i Portage, endnu. Volumeheaderen selv kan
indeholde op til <e>otte</e> billed-filer af enhver størrelse, med
navne på otte karakterer.
</p>

<p>
Processen at lave volumeheaderen større er ikke ligefrem nemt - der er en fidus ved det.
Man kan ikke bare slette og tilføje volumeheaderen igen pga. mærkelig
opførsel fra fdisk. I det eksempel der vises nedenfor, laver vi en
Volumeheader på 50MB sammen med en 50MB /boot partition. Det faktiske
layout af din disk kan variere, men dette er kun for at illustrere.
</p>

<pre caption="At lave om på størrelsen af SGI Volume Header korrekt">
Command (m for help): <i>n</i>
Partition number (1-16): <i>1</i>
First cylinder (5-8682, default 5): <i>51</i>
 Last cylinder (51-8682, default 8682): <i>101</i>
<comment>
(Bemærk hvordan fdisk kun tillader at Partition #1 bliver genskabt med en minimum cylinder på 5)
(Hvis du havde forsøgt at slette &amp; Så skal du genskabe
SGI Volume Headeren på denne måde, dette er det samme problem, som du ville være løbet ind i.)
(I vores eksempel, vil vi have /boot til at være 50MB, med
den ved cylinder 51 (Volume Headeren skal starte ved cylinder 0, hvis
du kan huske det?), og at sætte dens sluttende cylinder til 101,
hvilket groft set vil være 50MB (+/- 1-5MB))
</comment>

Command (m for help): <i>d</i>
Partition number (1-16): <i>9</i>

<comment>(Slet partition #9 (SGI Volume Header))</comment>

Command (m for help): <i>n</i>
Partition number (1-16): <i>9</i>
First cylinder (0-50, default 0): <i>0</i>
 Last cylinder (0-50, default 50): <i>50</i>

<comment>(Genskab partition #9, til at slutte lige inden partition #1)</comment>
</pre>
-->
<p>
Hvis du er usikker på at bruge <c>fdisk</c>, kig lidt længere nede i vejledningen til
partitionering på Cobalt. Konceptet er præcist det samme -- husk at lade
"volume header" og "hele disk-partitionen" være.
</p>

<!-- <p>  Perhaps part of the above commented-out block?
Once this is done, you are safe to create the rest of your partitions as you see
fit. After all your partitions are laid out, make sure you set the partition ID
of your swap partition to <c>82</c>, which is Linux Swap. By default, it will be
<c>83</c>, Linux Native.
</p> -->

<p>
Nu da dine partitioner er oprettet, kan du fortsætte med <uri
link="#filesystems">Oprettelse af filsystemer</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Cobalt maskiner: Partitionering af din harddisk</title>
<body>

<p>
På Cobalt maskiner, forventer BOOTROM at se en MS-DOS MBR, så partitioneringen
af harddisken er relativt nemt -- det er endda gjort på samme måde, som du ville
gøre det på en Intel x86 maskine. <e>Dog</e> er der nogle tinge som du bør
tage dig i agt på.
</p>
 
<ul>
  <li>
    Cobalt firmware vil forvente at <path>/dev/hda1</path> er en Linux partition, som
    er formateret <e>EXT2 Revision 0</e>.  <e>EXT2 Revision 1 partitioner vil IKKE
    VIRKE!</e>  (Cobalt BOOTROM forstår kun EXT2r0)  
  </li>
  <li>
    Når ovenstående er sagt, skal partitionen indeholde en gzipped ELF billed-fil,
    <path>vmlinux.gz</path> i roden af dens partition, hvorfra den hentes, ligesom
    kernen
  </li>
</ul>

<p>
På grund af dette, anbefaler jeg at oprette en ~20MB <path>/boot</path> partition, som
er formateret EXT2r0, hvorpå du installerer CoLo &amp; dine kerner.  Dette
tillader dig at køre et moderne filsystem (EXT3 eller ReiserFS) til dit root-filsystem.
</p>

<p>
Jeg forudsætter at du har oprettet <path>/dev/hda1</path>, som skal mountes senere som en
<path>/boot</path>-partition.  Hvis du ønsker at gøre dette til <path>/</path>, skal du
huske at kigge på PROMs forventninger senere.
</p>

<p>
Vi forsætter... For at oprette partitioner, skal du taste <c>fdisk /dev/hda</c> ved
prompten. Hovedkommandoerne som du skal bruge er disse:
</p>

<ul>
  <li>
    <c>o</c>: Sletter den gamle partitionstabel, og starter med en tom MS-DOS
    partitionstabel
  </li>
  <li>
    <c>n</c>: Ny partition
  </li>
  <li>
    <c>t</c>: Ændre partitionstype
    <ul>
      <li>Brug type <c>82</c> til Linux Swap og <c>83</c> til Linux FS</li>
    </ul>
  </li>
  <li>
    <c>d</c>: Slet en partition
  </li>
  <li>
    <c>p</c>: Vis (udskriv) partitionstabelen
  </li>
  <li>
    <c>q</c>: Afslut -- lade den gamle partitionstabel være.
  </li>
  <li>
    <c>w</c>: Afslut -- skrive den nye partitionstable.
  </li>
</ul>
  	 
<pre caption="Partitionering af harddisken">
# <i>fdisk /dev/hda</i>
 	 
The number of cylinders for this disk is set to 19870.
There is nothing wrong with that, but this is larger than 1024,
and could in certain setups cause problems with:
1) software that runs at boot time (e.g., old versions of LILO)
2) booting and partitioning software from other OSs
   (e.g., DOS FDISK, OS/2 FDISK)
 
<comment>(Start med at slette de eksisterende partitioner)</comment>
Command (m for help): <i>o</i>
Building a new DOS disklabel. Changes will remain in memory only,
until you decide to write them. After that, of course, the previous
content won't be recoverable.
  	 
  	 
The number of cylinders for this disk is set to 19870.
There is nothing wrong with that, but this is larger than 1024,
and could in certain setups cause problems with:
1) software that runs at boot time (e.g., old versions of LILO)
2) booting and partitioning software from other OSs
   (e.g., DOS FDISK, OS/2 FDISK)
Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)
  	 
<comment>(Du kan nu verificere at partitionstabellen er tom, ved at bruge 'p'-kommandoen)</comment>
  	 
Command (m for help): <i>p</i>
  	 
Disk /dev/hda: 10.2 GB, 10254827520 bytes
16 heads, 63 sectors/track, 19870 cylinders
Units = cylinders of 1008 * 512 = 516096 bytes
  	 
   Device Boot      Start         End      Blocks   Id  System
  	 
<comment>(Oprette /boot-partitionen)</comment>
  	 
Command (m for help): <i>n</i>
Command action
   e   extended
   p   primary partition (1-4)
<i>p</i>
Partition number (1-4): <i>1</i>
  	 
<comment>(Tast bare ENTER her, for at acceptere standard)</comment>
  	 
First cylinder (1-19870, default 1):
Last cylinder or +size or +sizeM or +sizeK (1-19870, default 19870): <i>+20M</i>
  	 
<comment>(og nu, hvis vi taster 'p' igen, bør vi se den nye partition)</comment>
Command (m for help): <i>p</i>
  	 
Disk /dev/hda: 10.2 GB, 10254827520 bytes
16 heads, 63 sectors/track, 19870 cylinders
Units = cylinders of 1008 * 512 = 516096 bytes
  	 
   Device Boot      Start         End      Blocks   Id  System
/dev/hda1               1          40       20128+  83  Linux
  	 
<comment>(Resten, jeg plejer at indsætte en extended partition, så jeg opretter denne)</comment>
  	 
Command (m for help): <i>n</i>
Command action
   e   extended
   p   primary partition (1-4)
<i>e</i>
Partition number (1-4): <i>2</i>
  	 
<comment>(Igen, standarden er fint nok, tast bare ENTER.)</comment>
  	 
First cylinder (41-19870, default 41):
Using default value 41
  	 
<comment>(Vi ønsker at bruge hele disken her, så tast ENTER igen)</comment>
Last cylinder or +size or +sizeM or +sizeK (41-19870, default 19870):
Using default value 19870
  	 
<comment>(Nu, / partitionen -- Jeg bruger separate partitioner til /usr, /var,
etc... så / kan være lille.  Juster efter dine ønsker.)</comment>
  	 
Command (m for help): <i>n</i>
Command action
   l   logical (5 or over)
   p   primary partition (1-4)
<i>l</i>
First cylinder (41-19870, default 41):<i>&lt;Press ENTER&gt;</i>
Using default value 41
Last cylinder or +size or +sizeM or +sizeK (41-19870, default 19870): <i>+500M</i>
  	 
<comment>(... og lige så dan ved andre partitioner ...)</comment>
  	 
<comment>(Sidst, swap-plads.  Jeg anbefaler mindst 250 MB swap,
ønskbart 1 GB)</comment>
  	 
Command (m for help): <i>n</i>
Command action
   l   logical (5 or over)
   p   primary partition (1-4)
<i>l</i>
First cylinder (17294-19870, default 17294): <i>&lt;Press ENTER&gt;</i>
Using default value 17294
Last cylinder or +size or +sizeM or +sizeK (1011-19870, default 19870): <i>&lt;Press ENTER&gt;</i>
Using default value 19870
  	 
<comment>(Now, if we check our partition table, everything should mostly be ship
shape except for one thing...)</comment>
  	 
Command (m for help): <i>p</i>
  	 
Disk /dev/hda: 10.2 GB, 10254827520 bytes
16 heads, 63 sectors/track, 19870 cylinders
Units = cylinders of 1008 * 512 = 516096 bytes
Device Boot      Start         End      Blocks      ID  System
/dev/hda1               1          21       10552+  83  Linux
/dev/hda2              22       19870    10003896    5  Extended
/dev/hda5              22        1037      512032+  83  Linux
/dev/hda6            1038        5101     2048224+  83  Linux
/dev/hda7            5102        9165     2048224+  83  Linux
/dev/hda8            9166       13229     2048224+  83  Linux
/dev/hda9           13230       17293     2048224+  83  Linux
/dev/hda10          17294       19870     1298776+  83  Linux
  	 
<comment>(Noter at hvordan #10, din swap-partition stadigvæk er type 83?)</comment>
  	 
Command (m for help): <i>t</i>
Partition number (1-10): <i>10</i>
Hex code (type L to list codes): <i>82</i>
Changed system type of partition 10 to 82 (Linux swap)
  	 
<comment>(Det bør ordne det... bare for at verificere...)</comment>
  	 
Command (m for help): <i>p</i>
  	 
Disk /dev/hda: 10.2 GB, 10254827520 bytes
16 heads, 63 sectors/track, 19870 cylinders
Units = cylinders of 1008 * 512 = 516096 bytes
  	 
Device Boot      Start         End      Blocks      ID  System
/dev/hda1               1          21       10552+  83  Linux
/dev/hda2              22       19870    10003896    5  Extended
/dev/hda5              22        1037      512032+  83  Linux
/dev/hda6            1038        5101     2048224+  83  Linux
/dev/hda7            5102        9165     2048224+  83  Linux
/dev/hda8            9166       13229     2048224+  83  Linux
/dev/hda9           13230       17293     2048224+  83  Linux
/dev/hda10          17294       19870     1298776+  82  Linux Swap
  	 
<comment>(Nu, lad os skrive den nye partitionstabel.)</comment>
  	 
Command (m for help): <i>w</i>
The partition table has been altered!
  	 
Calling ioctl() to re-read partition table.
Syncing disks.
  	 
#
</pre>
  	 
<p>
Og det er alt hvad der skulle gøres. Du bør nu være klart til at forsætte med næste
trin: <uri link="#filesystems">Oprettelse af filesystemer</uri>.
</p>


</body>
</subsection>
</section>

<section id="filesystems">
<title>Oprettelse af filsystemer</title>
<subsection>
<title>Introduktion</title>
<body>

<p>
Nu da dine partitioner er lavet, er det tid til at lave filsystemer på
dem. Hvis du er ligeglad med hvilket filsystem du vælger og er
tilfreds med hvad vi bruger som standard her i denne håndbog, så kan
du fortsætte med <uri link="#filesystems-apply">At anvende et filsystem på en
partition</uri>. Ellers kan du fortsætte for at lære mere om de
tilgængelige filsystemer...
</p>

</body>
</subsection>
<subsection>
<title>Filsystemer?</title>
<body>

<p>
Der er adskillige filsystemer til rådighed. ReiserFS, Ext2 og ext3 er fundet stabile på MIPS-arkitekturen, imens de andre er eksperimentielle.
</p>

<p>
<b>ext2</b> er det afprøvede og sande Linux filsystem, men det har
ikke metadata journaler, hvilket betyder at rutinemæssige tjek af
filsystemer ved opstart kan tage en del tid. Der er nu et udvalg af
filsystemer af nyere generation med journal, der kan tjekkes for
konsekvens meget hurtigt og er derfor at foretrække fremfor deres
tilsvarende uden journal. Filsystemer med journal kan afskaffe lange
ventetider når dit system starter op og dine filsystemer er i en ikke
konsekvent tilstand.
</p>

<p>
<b>ext3</b> er den journaliserede udgave af ext2 filsystemet, der
giver metadata journaler til hurtig genskabelse og yderligere andre
ydelse fremmende journal muligheder så fuld data og ordnet data
journal. ext3 er meget godt og et pålideligt filsystem. Det har en ekstra
mulighed for at bruge hashede b-træer til at indeksere, hvilket giver høj
ydelse i næsten alle situationer. For at sige det kort, ext3 er et
fremragende filsystem.
</p>

<p>
<b>ReiserFS</b> er et filsystem baseret på B*-træer der har en god
alsidig ydelse og slår både ext2 og ext3 stor når det kommer til at
håndtere små filer (filer mindre end 4k), ofte med en faktor på
10x-15x. ReiserFS skalerer også ekstremt godt og har metadata
journaler. Fra og med kerne 2.4.18+ er ReiserFS solid og brugbart til
både et formål som alment filsystem, og til ekstreme tilfælde
hvor man laver store filsystemer, brugen af mange små filer,
meget store filer og biblioteker, der indeholder titusinder af filer.
</p>

<p>
<b>XFS</b> er et filsystem med metadata journaler, som kommer med et
robust sæt af muligheder og er optimeret til skalerbarhed. Vi
anbefaler kun at bruge dette filsystem til Linux systemer med high-end
SCSI og/eller fiberkanal lager og en uafbrydbar strømforsyning. Fordi
XFS aggressivt cachér indkommende data i RAM, kan dårligt designede
programmer (dem der ikke tager fornuftige forholdregler, når de
skriver filer til disken og der er faktisk en del af dem) miste en hel
del data, hvis systemet uventet går ned.
</p>

<p>
<b>JFS</b> er IBM's høj-ydelses filsystem med journal. Det er
fornyligt blevet klar til produktion og der har ikke være
tilstrækkelige optegnelser til at kommentere positivt eller negativt
omkring dets stabilitet pt.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>At anvende et filsystem på en partition</title> 
<body>

<p>
For at lave et filsystem på en partition eller enhed, så er der
værktøjer til rådighed for hvert filsystem:
</p>

<table>
<tr>
  <th>Filsystem</th>
  <th>Kommando til at lave</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
F.eks. for at få boot partitionen (<path>/dev/sda1</path> i vores
tilfælde) i ext2 og root partitionen (<path>/dev/sda3</path> i vores
tilfælde) i ext3 (som i vores tilfælde), ville vi bruge:
</p>

<pre caption="At anvende et filsystem på en partition">
# <i>mke2fs /dev/sda1</i>
# <i>mke2fs -j /dev/sda3</i>
</pre>

<p>
Lav nu filsystemerne på dine for nyligt skabte partitioner (eller
logiske enheder).
</p>

<warn>
Hvis du installerer på en Cobalt-server, husk at <path>/dev/hda1</path> SKAL være
af typen <e>EXT2 revision 0</e>; Alt andet (e.g. EXT2 revision 1, EXT3,
ReiserFS, XFS, JFS and others) <e>VIL IKKE VIRKE!</e>
Du kan formatere partitionen ved at bruge kommandoen: <c>mke2fs -r 0 /dev/hda1</c>.
</warn>
  	 
<warn>
Også, være på agt at arcboot på nuværende tidspunkt ikke kan læse andre filsystemer end
EXT2, EXT3 og ISO9660 (nuværende versioner). På grund af dette,
skal <path>/boot</path> på SGI-maskiner også være på en EXT2- eller EXT3-partition.
</warn>

</body>
</subsection>
<subsection>
<title>At aktivere swap-partitionen</title>
<body>

<p>
<c>mkswap</c> er kommandoen der bruges til at oprette og initialisere swap partitioner:
</p>

<pre caption="At lave en swap signatur">
# <i>mkswap /dev/sda2</i>
</pre>

<p>
For at aktivere swap-partitionen, brug <c>swapon</c>:
</p>
	 
<pre caption="At aktivere swap-partitionen">
# <i>swapon /dev/sda2</i>
</pre>

<p>
Lav og aktiver swap ved at bruge ovenstående kommandoer.
</p>

</body>
</subsection>
</section>
<section>
<title>At mounte</title>
<body>

<p>
Nu hvor dine partitioner er initialiserede og huser et filsystem, er
det tid til at mounte disse partitioner. Brug <c>mount</c>
kommandoen. Glem ikke at lave de nødvendige mount-biblioteker til hver partition, som du har oprettet. Som et eksempel vil vi mounte root og boot-partionerne:
</p>

<pre caption="At mounte partitioner">
# <i>mount /dev/sda3 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/sda1 /mnt/gentoo/boot</i>
</pre>

<note>
Hvis du vil have din <path>/tmp</path> til at være på en separat
partition, så vær sikker på at ændre dens rettigheder efter at være
blevet mountet: <c>chmod 1777 /mnt/gentoo/tmp</c>. Dette gælder også
for <path>/var/tmp</path>.
</note>

<p>
Vi bliver også nødt til at mounte proc filsystemet (en virtuel grænseflade til kernen) på <path>/proc</path>. Men først skal vi placere vores filer på partitionerne.
</p>

<p>
Forsæt med <uri link="?part=1&amp;chap=5">Installere Gentoo installationsfiler</uri>.
</p>

</body>
</section>
</sections>
