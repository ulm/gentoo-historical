<?xml version='1.0' encoding='iso-8859-1'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/da/handbook/hb-install-hppa-disk.xml,v 1.3 2004/06/10 17:43:18 broeman Exp $ -->

<sections>
<section>
<title>Introduktion til blok-enheder</title>
<subsection>
<title>Blok-enheder</title>
<body>

<p>
Vi vil tage et godt kig på disk-orienterede aspekter af Gentoo Linux
og Linux generelt, inklusiv Linux filesystemer, partitioner og blok-enheder.
Så, når du er blevet godt kendt med diske og filsystemer,
vil du blive vejledt igennem processen af at opsætte partioner og filsystemer
til din Gentoo Linux installation.
</p>

<p>
For at begynde, vil vi introducere begrebet <e>blok-enheder</e>. Den
mest kendte blok-enhed er sikkert den, som repræsenterer den første
SCSI-harddisk på et Linux system, med navnet
<path>/dev/sda</path>.
</p>

<p>
Blok-enhederne ovenover repræsenterer en abstrakt grænseflade til
harddisken.  Brugerprogrammer kan bruge disse blok-enheder, til at
interagere med din harddisk, uden at skulle bekymre sig om at dine drev
er IDE, SCSI eller noget andet. Programmet kan simpelthen adressere
lageret på harddisken, som et bundt af tilstødende,
vilkårlige-tilgængelige 512-byte blokke.
</p>

</body>
</subsection>
<subsection>
<title>Partitioner og portioner</title>
<body>

<p>
Selvom det er teoretisk muligt at bruge hele harddisken til dit Linux
system, er det næsten aldrig gjort i praksis. I stedet for er hele
hardiskens blok-enheder opsplittet i mindre, mere håndgribelige
blok-enheder. På de fleste systemer er disse kaldet
<e>partitioner</e>. Andre arkitekturer bruger en lignende teknik,
kaldet <e>portioner (slices)</e>.
</p>

</body>
</subsection>
</section>
<section>
<title>Design af et partitionsskema</title>
<subsection>
<title>Hvor mange og hvor stort?</title>
<body>

<p>
Antallet af partitioner er meget afhængigt af dit miljø. F.eks., hvis
du har en hel del brugere, vil det være nærmest at lave dit
<path>/home</path> separat, idet at det forøger sikkerheden og gør det
nemmere at lave backup.  Hvis du installerer Gentoo for at arbejde som
en mail-server, burde din <path>/var</path> være separat, idet alle
emails er gemt inde i <path>/var</path>. Et godt valg af filsystem vil
derefter maksimere din ydelse. Spil-servere bør have en separat
<path>/opt</path>, idet at de fleste spil-servere bliver installeret
der. Forklaringen er den samme som for <path>/home</path>: sikkerhed
og backup.
</p>

<p>
Som du kan se, afhænger det meget af hvad du vil opnå. Separate
partitioner eller volumes har følgende fordele:
</p>

<ul>
<li>
  Du kan vælge det mest ydelsesstærke filsystem til hver partition eller volume
</li>
<li>
  Hele dit system bør ikke løbe tør for fri harddisk-plads, hvis et ødelagt værktøj bliver
  ved med at skrive filer til en partition eller volume
</li>
<li>
  Hvis nødvendigt, et filsystem-tjek er reduceret i tid, idet flere tjek kan blive
  gjort parallelt (selvom denne fordel er større med flere harddiske
  end med flere partitioner)
</li>
<li>
  Sikkerhed kan blive forøget ved at mounte nogle partitioner eller volumes read-only (kun-læs), 
  nosuid (setuid bits er ignoreret), noexec (executable bits er ignoreret) osv.
</li>
</ul>

<p>
Dog har flere partitioner en stor ulempe: hvis det ikke er opsat
ordentligt, kan det betyde at have et system med masser
af fri plads på én partition og intet på en anden.
</p>

</body>
</subsection>
</section>
<section>
<title>Brug af fdisk på HPPA for at partitionere din disk</title>
<body>

<p>
Brug <c>fdisk</c> til at lave de partitioner du ønsker:
</p>

<pre caption="At partitionere disken">
# <i>fdisk /dev/sda</i>
</pre>

<p>
PALO har brug for en speciel partition for at virke. Du bliver nødt
til at lave en partition med minimum 16Mb i starten af din disk. Denne
partition skal være af typen <e>f0</e> (Linux/PA-RISC boot).
</p>

<impo>
Hvis du ignorer dette og fortsætter uden en speciel PALO partition, så
vil dit system holde op med at elske dig og ikke være i stand til at starte. Også, hvis din disk er større end 2Gb, så skal du også være sikker på at
boot partitionen er indenfor de første 2Gb af din disk. PALO er ikke i
stand til at læse en kerne efter grænsen på 2Gb.
</impo>

<p>
Nu hvor dine partitioner er lavet, så kan du fortsætte med <uri
link="#filesystems">Oprettelse af filsystemer</uri>.
</p>

</body>
</section>

<section id="filesystems">
<title>Oprettelse af filsystemer</title>
<subsection>
<title>Introduktion</title>
<body>

<p>
Nu da dine partitioner er lavet, er det tid til at lave filsystemer på
dem. Hvis du er ligeglad med hvilket filsystem du vælger og er
tilfreds med hvad vi bruger som standard her i denne håndbog, så kan
du fortsætte med <uri link="#filesystems-apply">At anvende et filsystem på en
partition</uri>. Ellers kan du fortsætte for at lære mere om de
tilgængelige filsystemer...
</p>

</body>
</subsection>
<subsection>
<title>Filsystemer?</title>
<body>

<p>
Der er adskillige filsystemer til rådighed. ext2, ext3 og reiserfs er stabile til HPPA-arkitekturen, imens andre er meget eksperimentielle. 
</p>

<p>
<b>ext2</b> er det afprøvede og sande Linux filsystem, men det har
ikke metadata journaler, hvilket betyder at rutinemæssige tjek af
filsystemer ved opstart kan tage en del tid. Der er nu et udvalg af
filsystemer af nyere generation med journal, der kan tjekkes for
konsekvens meget hurtigt og er derfor at foretrække fremfor deres
tilsvarende uden journal. Filsystemer med journal kan afskaffe lange
ventetider når dit system starter op og dine filsystemer er i en ikke
konsekvent tilstand.
</p>

<p>
<b>ext3</b> er den journaliserede udgave af ext2 filsystemet, der
giver metadata journaler til hurtig genskabelse og yderligere andre
ydelse fremmende journal muligheder så fuld data og ordnet data
journal. ext3 er meget godt og et pålideligt filsystem. Det har en ekstra
mulighed for at bruge hashede b-træer til at indeksere, hvilket giver høj
ydelse i næsten alle situationer. For at sige det kort, ext3 er et
fremragende filsystem.
</p>

<p>
<b>ReiserFS</b> er et filsystem baseret på B*-træer der har en god
alsidig ydelse og slår både ext2 og ext3 stor når det kommer til at
håndtere små filer (filer mindre end 4k), ofte med en faktor på
10x-15x. ReiserFS skalerer også ekstremt godt og har metadata
journaler. Fra og med kerne 2.4.18+ er ReiserFS solid og brugbart til
både et formål som alment filsystem, og til ekstreme tilfælde
hvor man laver store filsystemer, brugen af mange små filer,
meget store filer og biblioteker, der indeholder titusinder af filer.
</p>

<p>
<b>XFS</b> er et filsystem med metadata journaler der er fuld
understøttet af Gentoo Linuxses xfs-sources kerne. Det kommer med et
robust sæt af muligheder og er optimeret til skalerbarhed. Vi
anbefaler kun at bruge dette filsystem til Linux systemer med high-end
SCSI og/eller fiberkanal lager og en uafbrydbar strømforsyning. Fordi
XFS aggressivt cachér indkommende data i RAM, kan dårligt designede
programmer (dem der ikke tager fornuftige forholdregler, når de
skriver filer til disken og der er faktisk en del af dem) miste en hel
del data, hvis systemet uventet går ned.
</p>

<p>
<b>JFS</b> er IBM's høj-ydelses filsystem med journal. Det er
fornyligt blevet klar til produktion og der har ikke være
tilstrækkelige optegnelser til at kommentere positivt eller negativt
omkring dets stabilitet pt.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>At anvende et filsystem på en partition</title> 
<body>

<p>
For at lave et filsystem på en partition eller enhed, så er der
værktøjer til rådighed for hvert filsystem:
</p>

<table>
<tr>
  <th>Filsystem</th>
  <th>Kommando til at lave</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
F.eks. for at få boot partitionen (<path>/dev/sda2</path> i vores
tilfælde) i ext2 og root partitionen (<path>/dev/sda4</path> i vores
tilfælde) i ext3 (som i vores tilfælde), ville vi bruge:
</p>

<pre caption="At anvende et filsystem på en partition">
# <i>mke2fs /dev/sda2</i>
# <i>mke2fs -j /dev/sda4</i>
</pre>

<p>
Lav nu filsystemerne på dine for nyligt skabte partitioner (eller
logiske enheder).
</p>

</body>
</subsection>
<subsection>
<title>At aktivere swap-partitionen</title>
<body>

<p>
<c>mkswap</c> er kommandoen der bruges til at initialisere swap partitioner:
</p>

<pre caption="At lave en swap signatur">
# <i>mkswap /dev/sda3</i>
</pre>

<p>
For at aktivere swap-partitionen, brug <c>swapon</c>:
</p>
	 
<pre caption="At aktivere swap-partitionen">
# <i>swapon /dev/sda3</i>
</pre>

<p>
Lav og aktiver swap nu.
</p>

</body>
</subsection>
</section>
<section>
<title>At mounte</title>
<body>

<p>
Nu hvor dine partitioner er initialiserede og huser et filsystem, er
det tid til at mounte disse partitioner. Brug <c>mount</c>
kommandoen. Glem ikke at lave de nødvendige mount-biblioteker til hver partition, som du har oprettet. Som et eksempel vil vi mounte root og boot-partionerne:
</p>

<pre caption="At mounte partitioner">
# <i>mount /dev/sda4 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/sda2 /mnt/gentoo/boot</i>
</pre>

<note>
Hvis du vil have din <path>/tmp</path> til at være på en separat
partition, så vær sikker på at ændre dens rettigheder efter at være
blevet mountet: <c>chmod 1777 /mnt/gentoo/tmp</c>. Dette gælder også
for <path>/var/tmp</path>.
</note>

<p>
Vi bliver også nødt til at mounte proc filsystemet (en virtuel
grænseflade til kernen) på <path>/proc</path>. Vi laver først <path>/mnt/gentoo/proc</path> 
mountpunktet og derefter mounte filsystemet:
</p>

<pre caption="At lave /mnt/gentoo/proc mountpunktet">
# <i>mkdir /mnt/gentoo/proc</i>
# <i>mount -t proc none /mnt/gentoo/proc</i>
</pre>

<p>
Fortsæt nu med <uri link="?part=1&amp;chap=5">Installere Gentoo installationsfiler</uri>.
</p>

</body>
</section>
</sections>
