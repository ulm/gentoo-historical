<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/da/handbook/hb-install-ppc-disk.xml,v 1.6 2004/09/22 20:25:29 broeman Exp $ -->

<sections>
<section>
<title>Introduktion til blok-enheder</title>
<subsection>
<title>Blok-enheder</title>
<body>

<p>
Vi vil tage et godt kig på disk-orienterede aspekter af Gentoo Linux
og Linux generelt, inklusiv Linux filesystemer, partitioner og blok-enheder.
Så, når du er blevet godt kendt med diske og filsystemer,
vil du blive vejledt igennem processen af at opsætte partioner og filsystemer
til din Gentoo Linux installation.
</p>

<p>
For at begynde, vil vi introducere begrebet <e>blok-enheder</e>. Den
mest kendte blok-enhed er sikkert den, som repræsenterer den første
IDE-harddisk på et Linux system, med navnet
<path>/dev/hda</path>. Hvis dit system bruger SCSI-drev, så vil din
første harddisk være <path>/dev/sda</path>.
</p>

<p>
Blok-enhederne ovenover repræsenterer en abstrakt grænseflade til
harddisken.  Brugerprogrammer kan bruge disse blok-enheder, til at
interagere med din harddisk, uden at skulle bekymre sig om at dine drev
er IDE, SCSI eller noget andet. Programmet kan simpelthen adressere
lageret på harddisken, som et bundt af tilstødende,
vilkårlige-tilgængelige 512-byte blokke.
</p>

</body>
</subsection>
<subsection>
<title>Partitioner og portioner</title>
<body>

<p>
Selvom det er teoretisk muligt at bruge hele harddisken til dit Linux
system, er det næsten aldrig gjort i praksis. I stedet for er hele
hardiskens blok-enheder opsplittet i mindre, mere håndgribelige
blok-enheder. På de fleste systemer er disse kaldet
<e>partitioner</e>. Andre arkitekturer bruger en lignende teknik,
kaldet <e>portioner (slices)</e>.
</p>

</body>
</subsection>
</section>
<section>
<title>Design af et partitionsskema</title>
<subsection>
<title>Standard partitionsskema</title>
<body>

<p>
Hvis du ikke er interesseret i at tegne en partitionsoversigt selv,
til dit system, kan du bruge vores (non-LVM) partitionsskema, som vi
bruger igennem denne bog:
</p>

<table>
<tr>
  <th>Partition NewWorld</th>
  <th>Partition OldWorld</th>
  <th>Partition Pegasos</th>
  <th>Filsystem</th>
  <th>Størrelse</th>
  <th>Beskrivelse</th>
</tr>
<tr>
  <ti><path>/dev/hda1</path></ti>
  <ti>(ikke nødvendigt)</ti>
  <ti>(ikke muligt)</ti>
  <ti>(bootsrap)</ti>
  <ti>800k</ti>
  <ti>Apple_Bootstrap</ti>
</tr>
<tr>
  <ti><path>/dev/hda2</path></ti>
  <ti><path>/dev/hda1</path></ti>
  <ti><path>/dev/hda1</path></ti>
  <ti>512M</ti>
  <ti>Swap partition</ti>
</tr>
<tr>
  <ti><path>/dev/hda3</path></ti>
  <ti><path>/dev/hda2</path></ti>
  <ti><path>/dev/hda2</path></ti>
  <ti>ext3</ti>
  <ti>Resten af harddisken</ti>
  <ti>Root partition</ti>
</tr>
</table>

<p>
Hvis du er interesseret i at vide hvor stor en partition burde være, eller hvor mange partitioner du behøver, læs videre. 
Ellers fortsæt nu med <uri link="#fdisk">Standard: Brug af mac-fdisk (Apple/IBM) til at partionere din harddisk</uri> eller <uri link="#parted">Alternativ: Brug af parted (specielt Pegasos) til at partionere til harddisk</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Hvor mange og hvor stort?</title>
<body>

<p>
Antallet af partitioner er meget afhængigt af dit miljø. F.eks., hvis
du har en hel del brugere, vil det være nærmest at lave dit
<path>/home</path> separat, idet at det forøger sikkerheden og gør det
nemmere at lave backup.  Hvis du installerer Gentoo for at arbejde som
en mail-server, burde din <path>/var</path> være separat, idet alle
emails er gemt inde i <path>/var</path>. Et godt valg af filsystem vil
derefter maksimere din ydelse. Spil-servere bør have en separat
<path>/opt</path>, idet at de fleste spil-servere bliver installeret
der. Forklaringen er den samme som for <path>/home</path>: sikkerhed
og backup.
</p>

<p>
Som du kan se, afhænger det meget af hvad du vil opnå. Separate
partitioner eller volumes har følgende fordele:
</p>

<ul>
<li>
  Du kan vælge det bedste ydelsesstærke filsystem til hver partition eller volume
</li>
<li>
  Hele dit system bør ikke løbe tør for fri harddisk-plads, hvis et ødelagt værktøj bliver
  ved med at skrive filer til en partition eller volume
</li>
<li>
  Hvis nødvendigt, et filsystem-tjek er reduceret i tid, idet flere tjek kan blive
  gjort parallelt (selvom denne fordel er større med flere harddiske
  end med flere partitioner)
</li>
<li>
  Sikkerhed kan blive forøget ved at mounte nogle partitioner eller volumes read-only (kun-læs), 
  nosuid (setuid bits er ignoreret), noexec (executable bits er ignoreret) osv.
</li>
</ul>

<p>
Dog har flere partitioner en stor ulempe: hvis det ikke er opsat
ordentligt, kan det betyde at have et system med masser
af fri plads på én partition og intet på en anden. Der er også en
begrænsning på 15 partitioner på SCSI og SATA.
</p>

</body>
</subsection>
</section>
<section id="fdisk">
<title>Standard: Brug af mac-fdisk (Apple/IBM) for at partitionere din disk</title>
<body>

<p>
Nu skal du lave dine partitioner med <c>mac-fdisk</c>:
</p>

<pre caption="At starte mac-fdisk">
# <i>mac-fdisk /dev/hda</i>
</pre>

<p>
Først skal du slette de partitioner, som du før har klargjort, for at lave
plads til dine Linux partitioner. Brug <c>d</c> i <c>mac-fdisk</c> for
at slette denne/disse partition(er). Den vil spørge efter nummeret på
den partition der skal slettes.
</p>

<p>
Derefter skal du lave en <e>Apple_Bootstrap</e> partition ved brug af
<c>b</c>. Indtast nummeret på din første frie partition, fulgt af <c>p</c>. F.eks. er det her <c>1p</c>.
</p>

<note>
Denne partition er <e>ikke</e> en "boot" partition. Den bruges ikke af
Linux overhovedet; du behøves ikke placere noget filsystem på den og
du bør aldrig mounte din. PPC-brugere har ikke brug for en ekstra <c>/boot</c>-partition.  
</note>

<p>
Lav nu en swap-partition ved at trykke <c>c</c>. <c>mac-fdisk</c> vil
igen spørge efter hvilken blok du vil starte denne partition fra. Da
vi før brugte <c>1</c> til at lave Apple_Bootstrap-partitionen, så
skal du nu taste <c>2p</c>. Når du bliver spurgt om størrelsen, tast
da <c>512M</c> (eller den størrelse du nu ønsker -- 512 anbefales
dog).  Når du bliver spurgt efter et navn, tast <c>swap</c> (krævet).
</p>

<p>
For at lave root-partitionen, tryk <c>c</c>, efterfulgt af <c>3p</c>
for at vælge hvilken blok, root-partitionen skal starte ved. Når du
bliver spurgt efter størrelsen, indtast <c>3p</c> igen. <c>mac-fdisk</c>
vil fortolke dette som "Brug den plads der er tilgængelig". Når du
bliver spurgt efter et navn, tast <c>root</c> (krævet).
</p>

<p>
For at færdiggøre, skriv partitionen til disken ved at bruge <c>w</c>
og <c>q</c> til at forlade <c>mac-fdisk</c>.
</p>

<p>
Nu hvor dine partitioner er lavet, kan du forsætte med <uri
link="#filesystems">Oprettelse af filsystemer</uri>.
</p>

</body>
</section>
<section id="parted">
<title>Alternativ: brug af parted (specielt Pegasos) for at partionere din harddisk</title>
<body>

<p>
<c>parted</c>, partitionsredigeringsprogrammet, kan nu håndtere HFS+ partitioner brugt af Mac OS og Mac OS X. Med dette værktøj kan du formindske dine Mac-partitioner og oprette plads til dine Linux partitioner. Dog viser eksemplet forneden kun Pegasos maskiner.
</p>

<p>
Lad os fyre <c>parted</c> op:
</p>

<pre caption="Start af parted">
# <i>parted /dev/hda</i>
</pre>

<p>
Hvis drevet er upartioneret, kør <c>mklabel amiga</c> for at oprette en ny disklabel til drevet.
</p>

<p>
Du kan indtaste <c>print</c> på hvilket som helst tidspunkt i parted for at vise den nuværende partitionstabel. Dine ændringer er ikke gemt indtil du afslutter programmet; hvis du på noget tidspunkt ændrer din mening eller har lavet en fejl, kan du taste <c>CTRL+C</c> for at afbryde parted.
</p>

<p>
Hvis du også tænker på at installere MorphOS på din Pegasos, opret et affs1-filsystem kaldet "BI0" (BI nul) i starten af drevet. 50MB burde være mere end nok til at gemme MorphOSs kerne. Hvis du har en Pegasos I eller tænker på at bruge reiserfs eller xfs, bliver du også nødt til at gemme din Linux-kerne på denne partition (Pegasos II kan starte fra ext2/ext3 drev). For at oprette partitionen, kør <c>mkpart primary affs1 START END</c> hvor <c>START</c> og <c>END</c> bør erstattes med megabyte-område (f.eks. <c>5 55</c> opretter en 50 MB partition, som starter ved 5MB og slutter ved 55MB.
</p>

<p>
Du bliver nødt til at oprette to partitioner til Liunux, et root-filsystem til alle programfiler osv. og en til swap. For at oprette root-filsystemet, skal du først beslutte hvilket filsystem, som du vil bruge. Mulige løsninger er ext2, ext3,
reiserfs og xfs. Med undtagelse af du ved hvad du gør, brug ext3. Kør <c>mkpart primary ext3 START END</c> for at oprette en ext3-partition. Igen, erstat <c>START</c> og <c>END</c> med megabyte start- og stop-mærke til partitionen.
</p>

<p>
Det er generelt anbefalet at du opretter en swap-partition med samme størrelse som størrelsen af hukkommelse på din computer gange to. Du vil sikkert slippe af sted med en mindre swap-partition, undtagen at du tænker på at køre en masse programmer på samme tid (selvom mindst 512MB er anbefalet). For at oprette swap-partitionen, kør <c>mkpart primary linux-swap START END</c>.
</p>

<p>
Skriv partitionernes små numre ned, da de er krævet igennem installationsprocessen. For at vise de små numre, kør <c>print</c>. Dine drev er tilgængelige som <path>/dev/hdaX</path> hvor X er erstattet af det lille nummer af partitionen.
</p>

<p>
Når du er færdig, kør bare <c>quit</c>.
</p>

</body>
</section>
<section id="filesystems">
<title>Oprettelse af filsystemer</title>
<subsection>
<title>Introduktion</title>
<body>

<p>
Nu da dine partitioner er lavet, er det tid til at lave filsystemer på
dem. Hvis du er ligeglad med hvilket filsystem du vælger og er
tilfreds med hvad vi bruger som standard her i denne håndbog, så kan
du fortsætte med <uri link="#filesystems-apply">At anvende et filsystem på en
partition</uri>. Ellers kan du fortsætte for at lære mere om de
tilgængelige filsystemer...
</p>

</body>
</subsection>
<subsection>
<title>Filsystemer?</title>
<body>

<p>
Der er adskillige filsystemer til rådighed. Ext2, ext3, reiserfs og xfs  er fundet stabil til PPC-arkitekturen. jfs er ikke understøttet.
</p>

<p>
<b>ext2</b> er det afprøvede og sande Linux filsystem, men det har
ikke metadata journaler, hvilket betyder at rutinemæssige tjek af
filsystemer ved opstart kan tage en del tid. Der er nu et udvalg af
filsystemer af nyere generation med journal, der kan tjekkes for
konsekvens meget hurtigt og er derfor at foretrække fremfor deres
tilsvarende uden journal. Filsystemer med journal kan afskaffe lange
ventetider når dit system starter op og dine filsystemer er i en ikke
konsekvent tilstand.
</p>

<p>
<b>ext3</b> er den journaliserede udgave af ext2 filsystemet, der
giver metadata journaler til hurtig genskabelse og yderligere andre
ydelse fremmende journal muligheder så fuld data og ordnet data
journal. ext3 er meget godt og et pålideligt filsystem. Det har en ekstra
mulighed for at bruge hashede b-træer til at indeksere, hvilket giver høj
ydelse i næsten alle situationer. For at sige det kort, ext3 er et
fremragende filsystem.
</p>

<p>
<b>ReiserFS</b> er et filsystem baseret på B*-træer der har en god
alsidig ydelse og slår både ext2 og ext3 stor når det kommer til at
håndtere små filer (filer mindre end 4k), ofte med en faktor på
10x-15x. ReiserFS skalerer også ekstremt godt og har metadata
journaler. Fra og med kerne 2.4.18+ er ReiserFS solid og brugbart til
både et formål som alment filsystem, og til ekstreme tilfælde
hvor man laver store filsystemer, brugen af mange små filer,
meget store filer og biblioteker, der indeholder titusinder af filer.
</p>

<p>
<b>XFS</b> er et filsystem med metadata journaler, som kommer med et
robust sæt af muligheder og er optimeret til skalerbarhed. Vi
anbefaler kun at bruge dette filsystem til Linux systemer med high-end
SCSI og/eller fiberkanal lager og en uafbrydbar strømforsyning. Fordi
XFS aggressivt cachér indkommende data i RAM, kan dårligt designede
programmer (dem der ikke tager fornuftige forholdregler, når de
skriver filer til disken og der er faktisk en del af dem) miste en hel
del data, hvis systemet uventet går ned.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>At anvende et filsystem på en partition</title> 
<body>

<p>
For at lave et filsystem på en partition eller enhed, så er der
værktøjer til rådighed for hvert filsystem:
</p>

<table>
<tr>
  <th>Filsystem</th>
  <th>Kommando til at lave</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
</table>

<p>
F.eks. for at få boot partitionen (<path>/dev/hda1</path> i vores
tilfælde) i ext2 og root partitionen (<path>/dev/hda3</path> i vores
tilfælde) i ext3 (som i vores tilfælde), ville vi bruge:
</p>

<pre caption="At anvende et filsystem på en partition">
# <i>mke2fs /dev/hda1</i>
# <i>mke2fs -j /dev/hda3</i>
</pre>

<p>
Lav nu filsystemerne på dine for nyligt skabte partitioner (eller
logiske enheder).
</p>

<note>
Vær sikker på at partitionen, hvorpå du værter din kerne (<path>/boot</path>) skal være ext2 eller ext3. Boot-loaderen kan kun håndtere dette filsystem.
</note>

</body>
</subsection>
<subsection>
<title>At aktivere swap-partitionen</title>
<body>

<p>
<c>mkswap</c> er kommandoen der bruges til at initialisere swap partitioner:
</p>

<pre caption="At lave en swap signatur">
# <i>mkswap /dev/hda2</i>
</pre>

<p>
For at aktivere swap-partitionen, brug <c>swapon</c>:
</p>
	 
<pre caption="At aktivere swap-partitionen">
# <i>swapon /dev/hda2</i>
</pre>

<p>
Lav og aktiver swap nu.
</p>

</body>
</subsection>
</section>
<section>
<title>At mounte</title>
<body>

<p>
Nu hvor dine partitioner er initialiserede og huser et filsystem, er
det tid til at mounte disse partitioner. Brug <c>mount</c>
kommandoen. Glem ikke at lave de nødvendige mount-biblioteker til hver partition, som du har oprettet. Som et eksempel vil vi oprette et mount-punkt og mounte root- og boot-partionerne:
</p>

<pre caption="At mounte partitioner">
# <i>mkdir /mnt/gentoo</i>
# <i>mount /dev/hda3 /mnt/gentoo</i>
</pre>

<note>
Hvis du vil have din <path>/tmp</path> til at være på en separat
partition, så vær sikker på at ændre dens rettigheder efter at være
blevet mountet: <c>chmod 1777 /mnt/gentoo/tmp</c>. Dette gælder også
for <path>/var/tmp</path>.
</note>

<p>
Til sidst skal vi oprette <path>/dev</path>-filerne i vores nye hjem, hvilket er nødvendigt igennem installationen af boot-loader.  Dette kan gøres ved "bind"-mapping <path>/dev</path>-filesystemet fra LiveCDen:
</p>
	   	 
<pre caption="Bind-mount af /dev-filesystem">
# <i>mkdir /mnt/gentoo/dev</i>
# <i>mount -o bind /dev /mnt/gentoo/dev</i>
</pre>
								   	 
<p>
Vi bliver også nødt til at mounte proc-filsystemet (en virtuel grænseflade med til kernen) på <path>/proc</path>. Men først skal vi placere filerne på partitionerne.
</p>

<p>
Fortsæt nu med <uri link="?part=1&amp;chap=5">Installere Gentoo installationsfiler</uri>.
</p>

</body>
</section>
</sections>
