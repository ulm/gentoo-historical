<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/da/handbook/2004.3/Attic/hb-working-rcscripts.xml,v 1.1 2005/01/08 22:26:03 broeman Exp $ -->

<sections>

<version>1.17</version>
<date>23. Oktober 2004</date>

<section>
<title>Runlevels</title>
<subsection>
<title>Opstart af dit system</title>
<body>

<p>
Når du starter dit system, vil du ligge mærke til en del tekst, som flyder forbi. Hvis du
virkelig ligger mærke til det, vil nu bemærke at denne tekst er den samme hver gang du genstarter
dit system. Sekvensen af alle disse aktiviteter, er kaldet <e>opstartsekvensen</e>
og er (mere eller mindre) statisk defineret.
</p>

<p>
Først vil din boot-loader hente kerne-billedfilen, som du har defineret i
boot-loader opsætningen ind i hukommelsen efter den fortæller processoren til at køre
kernen. Når kernen er hentet og kører, vil den initialisere alle kerne-specifikke
strukturer og opgaver, og starte <c>init</c>-processen.
</p>

<p>
Denne proces sørger så for, at alle filsystemer (defineret i
<path>/etc/fstab</path>) er mountet og klar til at blive brugt. Så igangsætter den
flere scripts, placeret i <path>/etc/init.d</path>, som vil starte
de tjenester du behøver, for at have et succesfuldt opstartet system.
</p>

<p>
Til sidst, når alle scripts er startet, aktiverer <c>init</c> terminalerne
(i de fleste tilfælde er det kun de virtuelle konsoler, som er gemt bag ved <c>Alt-F1</c>,
<c>Alt-F2</c> osv.) vedhæftet en speciel proces, kaldet <c>agetty</c> til den. 
Denne proces vil så sørge for at du kan logge ind igennem disse terminaler
ved at køre <c>login</c>.
</p>

</body>
</subsection>
<subsection>
<title>Init-scripts</title>
<body>

<p>
<c>init</c> starter ikke kun scripts i <path>/etc/init.d</path>
tilfældigt. Den kører endda ikke alle scripts i <path>/etc/init.d</path>,
men kun dem den er blevet bedt om køre. Den beslutter hvilke scripts, der skal startes, ved at
kigge i <path>/etc/runlevels</path>.
</p>

<p>
Først kører <c>init</c> alle scripts fra <path>/etc/init.d</path>, som har
symbolske links inden i <path>/etc/runlevels/boot</path>. Sædvanligvis vil den
starte scripts i alfabetisk orden, men nogle scripts har afhængighedsinformationer
i dem, som fortæller systemet at et andet script skulle blive kørt i stedet for
en anden én. 
</p>

<p>
Når alle <path>/etc/runlevels/boot</path> refererede scripts er kørt,
fortsætter <c>init</c> med at køre de scripts, som har et symbolsk
link til dem i <path>/etc/runlevels/default</path>. Igen, den vil
bruge den alfabetiske orden for at beslutte hvilket script, den skal
køre først, undtagen hvis et script har afhængighedsinformationer i
den, i hvilket tilfælde rækkefølgen er ændret til at levere en gyldig
opstartsekvens.
</p>

</body>
</subsection>
<subsection>
<title>Hvordan init virker</title>
<body>

<p>
Selvfølgelig vil <c>init</c> ikke beslutte alt selv. Den behøver en
opsætningsfil, som specificerer, hvilke aktiviteter der skal udføres. Denne
opsætningsfil er <path>/etc/inittab</path>.
</p>

<p>
Hvis du husker opstartssekvensen, som vi lige har beskrevet for dig, vil du
huske at <c>init</c>s første aktivitet er at mounte alle filsystemer. Dette er
defineret i den følgende linje fra <path>/etc/inittab</path>:
</p>

<pre caption="System-initialieringslinjen i /etc/inittab">
si::sysinit:/sbin/rc sysinit
</pre>

<p>
Denne linje fortæller <c>init</c> at den skal køre <c>/sbin/rc sysinit</c> for at
initialisere systemet. <path>/sbin/rc</path>-scriptet tager sig af
initialiseringen, så du kan sige at <c>init</c> ikke gør meget -- den
delegerer opgaven om, for at initialise systemet til en anden proces.
</p>

<p>
For det andet, <c>init</c> starter alle scripts, som har symbolske links i
<path>/etc/runlevels/boot</path>. Dette er defineret i den følgende linje:
</p>

<pre caption="System-initialiseringen, fortsat">
rc::bootwait:/sbin/rc boot
</pre>

<p>
Igen, udfører <c>rc</c>-scriptet de nødvendige opgaver. Noter at ting 
givet til <c>rc</c> (<e>boot</e>) er det samme, som underbiblioteket af
<path>/etc/runlevels</path>, som er brugt.
</p>

<p>
Nu vil <c>init</c> tjekke dens opsætningsfil for at se hvad <e>runlevel</e>
der bør køre. For at beslutte dette, læser den følgende linje fra
<path>/etc/inittab</path>:
</p>

<pre caption="initdefault-linjen">
id:3:initdefault:
</pre>

<p>
I dette tilfælde (som hoveddelen af Gentoo-brugere vil bruge), er <e>runlevel</e>'ens
id 3. Ved at bruge denne information, tjekker <c>init</c> hvad den skal køre for at starte
<e>runlevel 3</e>:
</p>

<pre caption="runlevel definitioner">
l0:0:wait:/sbin/rc shutdown
l1:S1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
</pre>

<p>
Linjen, som definerer level 3, bruger <c>rc</c>-scriptet til at starte
tjenesterne (nu med parameteren <e>default</e>). Noter at parameteren af
<c>rc</c> er den samme, som underbiblioteket i <path>/etc/runlevels</path>.
</p>

<p>
Når <c>rc</c> er færdig, beslutter <c>init</c> hvilke virtuelle konsoler, der bør
aktiveres og hvilke kommandoer den behøver at køre ved hver konsol:
</p>

<pre caption="Virtuelle konsolers definitioner">
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
</pre>


</body>
</subsection>
<subsection>
<title>Hvad er en runlevel?</title>
<body>

<p>
Du har set at <c>init</c> bruger et nummeringsskema for at beslutte hvilke
<e>runlevel</e>'er, den skal aktivere. En <e>runlevel</e> er en tilstand, i hvilket
dit system kører og indeholder en samling af scripts (runlevel-scripts eller
<e>initscripts</e>), som skal være kørt, når du indtræder eller forlader en runlevel.
</p>

<p>
I Gentoo er der syv runlevels defineret: tre interne runlevels, og fire
brugerdefinerede runlevels. De interne runlevels er kaldet <e>sysinit</e>,
<e>shutdown</e> og <e>reboot</e> og gør præcist som deres navne siger:
initialisere systemet, slukker systemet og genstarter systemet.
</p>

<p>
De brugerdefinerede runlevels er disse med en ledsagende
<path>/etc/runlevels</path> underbibliotek: <path>boot</path>,
<path>default</path>, <path>nonetwork</path> og <path>single</path>.
<path>boot</path>-runlevel starter alle system-nødvendige tjenester, som alle andre
runlevels bruger. De resterende tre runlevels er forskellige i hvilke tjenester, de starter:
<path>default</path> er brugt til dagsoperationer, <path>nonetwork</path>
er brugt i det tilfælde, hvor ingen netværksaktivitet er krævet, og <path>single</path> er
brugt til når du skal reparere systemet.
</p>

</body>
</subsection>
<subsection>
<title>Arbejde med init-scripts</title>
<body>

<p>
De scripts, som <c>rc</c>-processen starter, er kaldet <e>init scripts</e>.
Hver script i <path>/etc/init.d</path> kan blive kørt med disse parametre
<e>start</e>, <e>stop</e>, <e>restart</e>, <e>pause</e>, <e>zap</e>,
<e>status</e>, <e>ineed</e>, <e>iuse</e>, <e>needsme</e>, <e>usesme</e> eller
<e>broken</e>.
</p>

<p>
For at starte, stoppe eller genstarte en tjeneste (og alle afhængige tjenester), skal <c>start</c>,
<c>stop</c> og <c>restart</c> bruges:
</p>

<pre caption="Start af Postfix">
# <i>/etc/init.d/postfix start</i>
</pre>

<note>
Kun de tjenester, som <e>kræver</e> at den givne tjeneste er stoppet eller genstartet.
De andre afhængige tjenester (dem som <e>bruger</e> tjenesten, men ikke kræver den)
er ladt uberørt.
</note>

<p>
Hvis du vil stoppe en tjeneste, men ikke tjenester der afhænger af den, kan du
bruge <c>pause</c> parameteren:
</p>

<pre caption="Stop af Postfix, men lad de afhængige tjenester blive kørende">
# <i>/etc/init.d/postfix pause</i>
</pre>

<p>
Hvis du vil se hvilken status en tjeneste har (startet, stoppet, pause, ...), kan
du bruge <c>status</c> parameteren:
</p>

<pre caption="Statusinformation for postfix">
# <i>/etc/init.d/postfix status</i>
</pre>

<p>
Hvis statusinformationen fortæller dig, at tjenesten kører, men du ikke ved
om den gør det, kan du tilbagestille statusinformationen til "stoppet" med
<c>zap</c>-parameteren:
</p>

<pre caption="Tilbagestille statusinformation for postfix">
# <i>/etc/init.d/postfix zap</i>
</pre>

<p>
For at spørge hvilke afhængigheder tjenesterne har, kan du bruge <c>iuse</c> eller
<c>ineed</c>. Med <c>ineed</c> kan du se hvilke tjenester, som er virkelige
nødvendige for den korrekte funktionsbestemte metode af en tjeneste. <c>iuse</c> på den anden
side, viser at tjenester, som er brugt af tjenesten, men ikke nødvendigvis
for den korrekte funktionalitet.
</p>

<pre caption="Kræve en liste af alle nødvendige tjenester, som Postfix afhænger">
# <i>/etc/init.d/postfix ineed</i>
</pre>

<p>
Lige sådan kan du spørge hvilke tjenester kræver tjenesten (<c>needsme</c>) eller
den kan bruge (<c>usesme</c>):
</p>

<pre caption="Kræve en liste af alle tjenester, som kræver Postfix">
# <i>/etc/init.d/postfix needsme</i>
</pre>

<p>
Til sidst, kan du spørge hvilke afhængigheder, som tjenesten kræver, men som
mangler:
</p>

<pre caption="Kræve en liste over manglende afhængigheder for Postfix">
# <i>/etc/init.d/postfix broken</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Arbejde med rc-update</title>
<subsection>
<title>Hvad er rc-update?</title>
<body>

<p>
Gentoos initsystem bruger et afhængighedstræ, som beslutter hvilke tjenester, som behøver at
blive startet først. Da dette er en kedelig opgave, som vi ikke vil have at vores brugere skal gøre
manuelt, har vi lavet værktøjer, som gør det lettere for administrationen af runlevels
og init-scripts.
</p>

<p>
Med <c>rc-update</c> kan du tilføje og fjerne init-scripts til en runlevel.
<c>rc-update</c>-værktøjet vil så automatisk spørge for <c>depscan.sh</c>-scriptet
for at genbygge afhængighedstræet.
</p>

</body>
</subsection>
<subsection>
<title>Tilføje og fjerne tjenester</title>
<body>

<p>
Du har allerede tilføjet init-scripts til "default" runlevel igennem installation
af Gentoo. På dette tidspunkt har du måske ikke haft en forståelse for hvad
"default" er til for, men nu burde du. <c>rc-update</c>-scriptet kræver en 
anden parameter, som definerer aktiviteten: <e>add</e> (tilføj), <e>del</e> (slet) eller <e>show</e> (vis).
</p>

<p>
For at tilføje eller fjerne et init-script, skal du blot give <c>rc-update</c> <c>add</c> eller
<c>del</c> parameteren, fulgt af init-scriptet og runlevel. F.eks.:
</p>

<pre caption="Fjernelse af Postfix fra default runlevel">
# <i>rc-update del postfix default</i>
</pre>

<p>
<c>rc-update show</c> kommandoen vil vise de tilgængelige init-scripts og
vise en liste fra hvilke runlevels, de vil køre:
</p>

<pre caption="Modtagelse af init-script informationer">
# <i>rc-update show</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Opsætning af tjenester</title>
<subsection>
<title>Hvorfor er det nødvendigt at opsætte ekstra?</title>
<body>

<p>
Init-scripts kan være pænt komplekse. Det er derfor ikke interessant at have 
brugere til at redigere direkte i init-scripts, da det kunne skabe flere 
fejl. Det er dog vigtigt at kunne opsætte sådan en tjeneste. F.eks.
vil du ønske at give flere muligheder til tjenesten selv.
</p>

<p>
En anden grund er at have denne opsætning udenfor init-script, er at kunne
opdatere init-scripts uden at skulle være bange for at dine opsætningsændringer
bliver overskrevet.
</p>

</body>
</subsection>
<subsection>
<title>/etc/conf.d biblioteket</title>
<body>

<p>
Gentoo leverer en let metode for at opsætte sådan en tjeneste: hver init-script som
kan blive opsat, har en fil i <path>/etc/conf.d</path>. F.eks. har
apache2s initscript (kaldet <path>/etc/init.d/apache2</path>) en
opsætningsfil, kaldet <path>/etc/conf.d/apache2</path>, hvilket indeholder
de indstillinger, som du vil sætte til Apache 2 serveren, når den er startet:
</p>

<pre caption="Variabler defineret i /etc/conf.d/apache2">
APACHE2_OPTS="-D PHP4"
</pre>

<p>
Sådan en opsætningsfil inderholder variabler og kun variabler (lige som
<path>/etc/make.conf</path>), som gør det meget let at opsætte tjenester. Det
tillader os at levere flere informationer omkring variablerne (som kommentarer).
</p>

</body>
</subsection>
</section>
<section>
<title>Skrive init-scripts</title>
<subsection>
<title>Skal jeg gøre det?</title>
<body>

<p>
Nej. At skrive et init-script er normalt ikke nødvendigt, idet Gentoo leverer
klar-til-brug init-scripts til alle leverede tjenester. Dog, du har måske
installeret en tjeneste, uden at bruge Portage, hvilket betyder at du i de fleste
tilfælde skal oprette et init-script.
</p>

<p>
Brug ikke init-script leveret til tjenesten, hvis den ikke er eksklusivt
skrevet til Gentoo: Gentoos init-scripts er ikke kompatibel med de init-scripts
brugt af de andre distributioner!
</p>

</body>
</subsection>
<subsection>
<title>Layout</title>
<body>

<p>
Basislayoutet af en init-script er vist nedenfor.
</p>

<pre caption="Basislayout af en init-script">
#!/sbin/runscript

depend() {
  <comment>(Afhængighedsinformation)</comment>
}

start() {
  <comment>(Kommandoer nødvendige for at starte tjenesten)</comment>
}

stop() {
  <comment>(Kommandoer nødvendige for at stoppe tjenesten)</comment>
}

restart() {
  <comment>(Kommandoer nødvendige for at genstarte tjenesten)</comment>
}
</pre>

<p>
Enhver init-script <e>kræver</e> <c>start()</c> funktionen til at blive defineret. Alle
andre sektioner er valgbare.
</p>

</body>
</subsection>
<subsection>
<title>Afhængigheder</title>
<body>

<p>
Der er to afhængigheder, som du kan definere: <c>use</c> og <c>need</c>. Som vi
har fortalt før, er <c>need</c>-afhængigheden mere strikt end
<c>use</c>-afhængigheden. Ved at følge denne afhængighedstype, får du
den tjeneste du behøver, eller den <e>virtuelle</e>-afhængighed.
</p>

<p>
En <e>virtuel</e> afhængighed er en afhængighed, som en tjeneste leverer, men den
er ikke kun leveret af denne tjeneste. Dit init-script kan være afhængigt af en systemlogning,
men der er mange systemloggere at vælge imellem (metalogd, syslog-ng,
sysklogd, ...). Da du ikke kan <c>mangle</c> enhver af dem (intet normalt
system har alle disse systemloggere installeret og kørende) vil sørge for at 
alle disse tjenester <c>leverer</c> en virtuel afhængighed.
</p>

<p>
Lad os tage et kig på afhængighedsinformationerne for postfix-tjenesten.
</p>

<pre caption="Afhængighedsinformationer for Postfix">
depend() {
  need net
  use logger dns
  provide mta
}
</pre>

<p>
Som du kan se, postfix-tjenesten
</p>

<ul>
  <li>
    kræver (virtuel) <c>net</c>-afhængigheden (som er sørget for, f.eks.
    <path>/etc/init.d/net.eth0</path>)
  </li>
  <li>
    bruger (virtuel) <c>logger</c>-afhængigheden (som er sørget for, f.eks. 
    <path>/etc/init.d/syslog-ng</path>)
  </li>
  <li>
    bruger (virtuel) <c>dns</c>-afhængigheden (som er sørget for, f.eks.
    <path>/etc/init.d/named</path>)
  </li>
  <li>
    sørger for (virtuel) <c>mta</c>-afhængighed (som er brugt normalt af alle 
    mail-servere)
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>Kontrol over rækkefølgen</title>
<body>

<p>
I nogle tilfælde, kræver du ikke en tjeneste, men ønsker at din tjeneste bliver
startet <c>før</c> (eller <c>efter</c>) en anden tjeneste <e>hvis</e> den er
tilgængelig på systemet (noter betingelsen - det er ikke en afhængighed længere)
<e>og</e> kører i samme runlevel (noter betingelsen - kun tjenester i samme
runlevel er involveret). Du kan sørge for denne information ved at bruge 
<c>before</c>- (før) eller <c>after</c>- (efter) indstillingerne.
</p>

<p>
Som et eksempel, vil vi se på indstillingerne til Portmap-tjenesten:
</p>

<pre caption="depend()-funktionen i Portmap-tjenesten">
depend() {
  need net
  before inetd
  before xinetd
}
</pre>

<p>
Du kan også bruge "*" til at fange alle tjenester i samme runlevel,
dog er det ikke tilrådeligt.
</p>

<pre caption="Kørsel af init-script, som den første script i runlevel'en">
depend() {
  before *
}
</pre>

</body>
</subsection>
<subsection>
<title>Standardfunktioner</title>
<body>

<p>
Lige efter <c>depend()</c>-funktionaliteten, behøver du også at definere
<c>start()</c>-funktionen. Denne indeholder alle de kommandoer, som er nødvendige for
at initialisere din tjeneste. Det er tilrådeligt at bruge <c>ebegin</c> og
<c>eend</c> funktionerne for at informere brugeren om hvad der sker:
</p>

<pre caption="Eksempel start()-funktionen">
start() {
  ebegin "Start af min tjeneste"
  start-stop-daemon --start --quiet --exec /path/to/my_service
  eend $?
}
</pre>

<p>
Hvis du vil have flere eksempler af <c>start()</c>-funktionen, læs venligt kildekoden
til de tilgængelige init-scripts i dit <path>/etc/init.d</path>-bibliotek.
Som til <c>start-stop-daemon</c>, er der en udemærket man-side tilrådighed, hvis du
behøver flere informationer:
</p>

<pre caption="man-side til start-stop-daemon">
# <i>man start-stop-daemon</i>
</pre>

<p>
Andre funktioner, som du kan definere er: <c>stop()</c> og <c>restart()</c>. Du er
ikke tvunget til at definere disse funktioner! Vores initsystem er intelligent nok til at
udfylde disse funktioner selv, hvis du bruger <c>start-stop-daemon</c>.
</p>

</body>
</subsection>
<subsection>
<title>Tilføje skræddersyede indstillinger</title>
<body>

<p>
Hvis du vil have dit init-script til at understøtte flere indstillinger, end dem vi allerede
har vist dig, bør du tilføje disse indstillinger i <c>opts</c>-variabelen, og
oprette en funktion med samme navn som indstillingen. F.eks. for at understøtte en
valgmulighed kaldet <c>restartdelay</c>:
</p>

<pre caption="Understøttelse af restartdelay-valgmuligheden">
opts="${opts} restartdelay"

restartdelay() {
  stop()
  sleep 3    <comment># Vent 3 sekunder før der startes igen</comment>
  start()
}
</pre>

</body>
</subsection>
<subsection>
<title>Tjenestens opsætningsvariabler</title>
<body>

<p>
Du behøver ikke at gøre noget for at understøtte en opsætningsfil i
<path>/etc/conf.d</path>: hvis dit init-script er startet, vil følgende filer
automatisk blive til kilder (dvs. variablerne er tilgængeligt til brug):
</p>

<ul>
  <li><path>/etc/conf.d/&lt;dit init-script&gt;</path></li>
  <li><path>/etc/conf.d/basic</path></li>
  <li><path>/etc/rc.conf</path></li>
</ul>

<p>
Også, hvis dit init-script sørger for en virtuel afhængighed (som <c>net</c>), vil filen blive, associeret med den afhængighed (som <path>/etc/conf.d/net</path>), også blive til kilder.
</p>

</body>
</subsection>
</section>
<section>
<title>Ændring af runlevel'ens adfærd</title>
<subsection>
<title>Hvem kan drage nytte af dette?</title>
<body>

<p>
Mange bærbar-brugere kender situationen: når du er hjemme og skal starte <c>net.eth0</c> og når du er på vejen vil du ikke starte <c>net.eth0</c> (idet der ikke er noget netværk tilgængeligt). Med Gentoo kan du ændre runlevel-adfærd til din egen fordel.
</p>

<p>
F.eks. kan du oprette en anden "default" runlevel, som du kan starte og indeholder andre initscripts fastsat til det. Du kan så vælge ved opstart, hvilken "default" runlevel du vil bruge.
</p>

</body>
</subsection>
<subsection>
<title>Brug af SOFTLEVEL</title>
<body>

<p>
Først af alt, opret runlevel-mappen til din anden "default" runlevel. Som et eksempel opretter vi <path>offline</path> runlevel:
</p>

<pre caption="Oprettelse af runlevel-mappe">
# <i>mkdir /etc/runlevels/offline</i>
</pre>

<p>
Tilføj de nødvendige initscripts til dine nyoprettede runlevels. F.eks. hvis du vil have en eksakt kopi af din nuværende <c>default</c> runlevel, men uden <c>net.eth0</c>:
</p>

<pre caption="Tilføjelse af nødvendige initscripts">
# <i>ls /etc/runlevels/default</i>
acpid  domainname  local  net.eth0  netmount  postfix  syslog-ng  vixie-cron
# <i>rc-update add acpid offline</i>
# <i>rc-update add domainname offline</i>
# <i>rc-update add local offline</i>
# <i>rc-update add syslog-ng offline</i>
# <i>rc-update add vixie-cron offline</i>
</pre>

<p>
Rediger nu din boot-loader opsætning og tilføj en ny post til <c>offline</c> runlevel'en. F.eks. i <path>/boot/grub/grub.conf</path>:
</p>

<pre caption="Tilføjelse af post til offline runlevel'en">
title Gentoo Linux Offline Usage
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3 <i>softlevel=offline</i>
</pre>

<p>
Voila, nu er alt klart. Hvis du starter dit system op og vælger den nyoprettede post, vil <c>offline</c> runlevel'en blive brugt i stedet for <c>default</c>.
</p>

</body>
</subsection>
<subsection>
<title>Brug af BOOTLEVEL</title>
<body>

<p>
Brug af <c>bootlevel</c> er komplet i overenstemmelse med <c>softlevel</c>. Den eneste forskel her er at du definerer en anden "boot" runlevel i stedet for en anden "default" runlevel.
</p>

</body>
</subsection>
</section>
</sections>
