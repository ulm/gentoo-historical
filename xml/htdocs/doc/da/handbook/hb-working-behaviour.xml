<?xml version='1.0' encoding='iso-8859-1'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/da/handbook/Attic/hb-working-behaviour.xml,v 1.2 2004/03/10 22:58:43 broeman Exp $ -->

<sections>
<section>
<title>Opsætningsfil-beskyttelse</title>
<subsection>
<title>Beskyttelse?</title>
<body>

<p>
Portage kender konceptet omkring "beskyttede filer". Dette betyder, at når du opdaterer
software, vil den ikke overskrive specifikke filer, der har nyere versioner, med det samme,
men informere dig, at en nyere version eksisterer. Det er selvfølgelig meget brugbart til
opsætningsfiler (filerne, som ligger inde i <path>/etc</path>).
</p>

<p>
I stedet for at overskrive sådanne filer, vil den oprette en ny fil, kaldet
<path>._cfg0000_&lt;navn&gt;</path> med <path>&lt;navn&gt;</path>, som er det
originale filnavn. Det er op til brugeren, at emerge de nødvendige afhængigheder
i den eksisterende fil. Han kan bruge <c>etc-update</c> kommandoen for at gøre denne
opgave nemmere. Vil vil tale om <c>etc-update</c> senere.
</p>

</body>
</subsection>
<subsection>
<title>Erklæring af CONFIG_PROTECT</title>
<body>

<p>
Portage kan ikke beskytte fra fil til fil. I stedet for beskytter den hele
biblioteker. <c>CONFIG_PROTECT</c>-variabelen viser alle beskyttede biblioteker.
Alle underbiblioteker i de viste biblioteker er også beskyttet.
<c>CONFIG_PROTECT</c>-variabelen er defineret i <path>/etc/make.globals</path>,
men hvis du vil ændre den, bør du erklære den i
<path>/etc/make.conf</path> (for at holde ting konsekvente, er
<path>/etc/make.conf</path> brugt til alle Portage-opsætninger).
</p>

<pre caption="Et eksempel på en CONFIG_PROTECT-indstilling">
CONFIG_PROTECT="/etc /usr/share/config /usr/kde/3.1/share/config"
</pre>

<p>
Hvis du vil have et specifikt bibliotek beskyttet, men ikke alle dets underbiblioteker,
kan du "afbeskytte" disse biblioteker ved at vise dem i
<c>CONFIG_PROTECT_MASK</c>-variabelen, som også har en standardværdi defineret i
<path>/etc/make.globals</path>. Den kan ændres ved at erklære den i
<path>/etc/make.conf</path>:
</p>

<pre caption="Et eksempel på en CONFIG_PROTECT_MASK-indstilling">
CONFIG_PROTECT_MASK="/etc/init.d"
</pre>

<p>
Flere informationer omkring opsætning af filbeskyttelse kan blive fundet i
<c>emerge</c>s onlinehjælp:
</p>

<pre caption="Anskaffelse af information om opsætningsfil-beskyttelse">
# <i>emerge --help config</i>
</pre>

</body>
</subsection>
<subsection>
<title>etc-update</title>
<body>

<p>
<c>etc-update</c> er et værktøj, som hjælper med merge af
<path>._cfg0000_&lt;navn&gt;</path> filer. Den leverer en interaktiv merge-opsætning
og kan også auto-merge trivielle ændringer.
</p>

<p>
At køre <c>etc-update</c> er ret ligefrem:
</p>

<pre caption="Kørsel af etc-update">
# <i>etc-update</i>
</pre>

<p>
Efter at have merget de trivielle ændringer, vil du blive spurgt om en liste af beskyttede
filer, som venter på en opdatering. I bunden vil du blive spurgt om de følgende
muligheder:
</p>

<pre caption="etc-update indstillinger">
Please select a file to edit by entering the corresponding number.
              (-1 to exit) (-3 to auto merge all remaining files)
                           (-5 to auto-merge AND not use 'mv -i'): 
</pre>

<p>
Hvis du taster <c>-1</c>, vil <c>etc-update</c> afslutte uden at lave nogen
ændringer. Hvis du taster <c>-3</c> eller <c>-5</c>, bliver <e>alle</e> oplistede
opsætningsfiler overskrevet med nyere versioner. Det er derfor meget
vigtigt først at vælge de opsætningsfiler, som ikke skal blive
automatisk opdateret. Det er meget let at taste nummeret, vist til venstre
af opsætningsfiler.
</p>

<p>
Som et eksempel, vælger vi opsætningsfilen <path>/etc/pear.conf</path>:
</p>

<pre caption="Opdatering af en specifik opsætningsfil">
Beginning of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
<comment>[...]</comment>
End of differences between /etc/pear.conf and /etc/._cfg0000_pear.conf
1) Replace original with update
2) Delete update, keeping original as is
3) Interactively merge original with update
4) Show differences again
</pre>

<p>
Du kan nu se forskellen imellem de to filer. Hvis du tror at den
opdaterede opsætningsfil kan blive brugt, uden problemer, tryk <c>1</c>. Hvis du
tror at den opdaterede opsætningsfil ikke er nødvendig, eller ikke leverer
nogen nye eller brugbare informationer, tryk <c>2</c>. Hvis du vil opdatere
din nuværende opsætningsfil interaktivt, tryk <c>3</c>. 
</p>

<p>
Det er ikke særligt hjælpsomt at forklare den interaktive merge her. For at
gøre det komplet, vil vi vise en liste over mulige kommandoer, som du kan bruge, imens du
merger de to filer interaktivt. Du bliver hilst at to linjer (den
originale, og den forslåede) og en prompt, hvor du kan taste én
af de følgende kommandoer:
</p>

<pre caption="Kommandoer tilgængelige til interaktiv merge">
ed:     Redigering, så brug begge versioner, hver især dekoreret med en header.
eb:     Redigering, så brug begge versioner.
el:     Redigering, så brug den venstre version.
er:     Redigering, så brug den højre version.
e:      Redigering af ny version.
l:      Brug den venstre version.
r:      Brug den højre version.
s:      Med stilhed inkludere normale brugte linjer.
v:      Med storhed inkludere normale brugte linjer.
q:      Quit.
</pre>

<p>
Hvis du er færdig med at opdatere vigtige opsætningsfiler, kan du nu
automatisk opdatere alle de andre opsætningsfiler. <c>etc-update</c> vil
afslutte, hvis den ikke finder flere opdatérbare opsætningsfiler.
</p>

</body>
</subsection>
</section>
<section>
<title>Netværksindstillinger</title>
<subsection>
<title>Filspejle</title>
<body>

<p>
Idet at Gentoo bliver mere populær, er brugen af filspejle virkelig
højt vurderet. Portage bruger tre variabler til filspejlene: én til rsync-filspejle
(som er brugt til at synkronisere dit portage-træ med), én til
distfiles (som er brugt til at hente kildekoder med) og én til de præ-byggede
pakker.
</p>

<p>
Alle tilgængelige distfiles-filspejle er vist på vores <uri 
link="/main/en/mirrors.xml">Gentoo filspejle oversigt</uri>. Du kan også bruge 
<c>mirrorselect</c>, som vil gøre det lettere at opsætte filspejle til dit system. Men
lad os først kigge på de individuelle variabler...
</p>

<p>
<c>SYNC</c>-variabelen indeholder en liste over rsync-filspejle, som du ønsker at bruge. F.eks.
for at bruge <uri>rsync://rsync.namerica.gentoo.org/gentoo-portage</uri> som
første valg, og <uri>rsync://rsync.samerica.gentoo.org/gentoo-portage</uri> som
andet, bør du definere det i <path>/etc/make.conf</path>:
</p>

<pre caption="Definering af SYNC i /etc/make.conf">
SYNC="rsync://rsync.namerica.gentoo.org/gentoo-portage
      rsync://rsync.samerica.gentoo.org/gentoo-portage"
</pre>

<p>
<c>GENTOO_MIRRORS</c>-variabelen indeholder en liste over distfiles-filspejle, som du ønsker
at bruge. F.eks. for at bruge
<uri>ftp://ibiblio.org/pub/Linux/distributions/gentoo</uri> som første valg,
og <uri>http://www.gtlib.cc.gatech.edu/pub/gentoo</uri> som andet, bør du
definere dette i <path>/etc/make.conf</path>:
</p>

<pre caption="Definering af GENTOO_MIRRORS i /etc/make.conf">
GENTOO_MIRRORS="ftp://ibiblio.org/pub/Linux/distributions/gentoo
                http://www.gtlib.cc.gatech.edu/pub/gentoo"
</pre>


<p>
<c>PORTAGE_BINHOST</c>-variabelen indeholder en liste over præ-byggede pakkers filspejle,
som du ønsker at bruge. F.eks. for at bruge 
<uri>ftp://login:pass@grp.mirror.site/pub/grp/i686/athlon-xp</uri>, bør du
definere dette i <path>/etc/make.conf</path>:
</p>

<pre caption="Definering af PORTAGE_BINHOST i /etc/make.conf">
PORTAGE_BINHOST="ftp://login:pass@grp.mirror.site/pub/grp/i686/athlon-xp"
</pre>

</body>
</subsection>
<subsection>
<title>Valg af filspejle</title>
<body>

<p>
Hvis du ønsker at bruge <c>mirrorselect</c>, installér den først (hvis du ikke allerede har
gjort det).
</p>

<pre caption="Installation af mirrorselect">
# <i>emerge mirrorselect</i>
</pre>

<p>
Du kan nu vælge at få <c>mirrorselect</c> til, at automatisk vælge de bedste
filspejle for dig, eller du kan vælge filspejlene manuelt fra en liste. For flere
informationer om at bruge <c>mirrorselect</c>, kør bare <c>mirrorselect</c> fra
kommandolinjen - den vil give dig et hurtigt overblik omkring <c>mirrorselect</c>.
</p>

<pre caption="Kørsel af mirrorselect">
# <i>mirrorselect</i>
</pre>

</body>
</subsection>
<subsection>
<title>Fetching</title>
<body>

<p>
Programmet, som Portage bruger til at hente arkiv-filer, kan blive specificeret ved at
indstille <c>FETCHCOMMAND</c>- og <c>RESUMECOMMAND</c>-indstillingerne. Flere
eksempler er vist i <path>/etc/make.conf</path> og 
<path>/etc/make.globals</path>. Portage bruger <c>wget</c> som standard:
</p>

<pre caption="Standard FETCHCOMMAND &amp; RESUMECOMMAND">
FETCHCOMMAND="/usr/bin/wget -t 5 --passive-ftp -P \${DISTDIR} \${URI}"
RESUMECOMMAND="/usr/bin/wget -c -t 5 --passive-ftp -P \${DISTDIR} \${URI}"
</pre>

<p>
<c>${DISTDIR}</c>-variabelen er udskiftet med placeringen af, hvor de
hentede filer er gemt (<path>/usr/portage/distfiles</path>), imens er 
<c>${URI}</c>-variabelen udskiftet med den fil, som Portage mangler at
hente.
</p>

<p>
Da Portage bruger <c>wget</c> som standard, kan du indstille denne til at bruge proxy ved at
definere <c>http_proxy</c> og <c>ftp_proxy</c> (notér de små bogstaver). Selvom
du også kan gøre dette i <path>/etc/make.conf</path>, er du henvist til at bruge
en mere generel metode, da <c>http_proxy</c>- og <c>ftp_proxy</c>-variablerne
også er brugt af andre værktøjer (<path>/etc/make.conf</path> er kun brugt af
Portage). Læs venligst kapitlet omkring <uri link="?part=2&amp;chap=6">Miljø-variabler</uri>,
som handler om hvordan man erklærer hele systemets miljø-variabler.
</p>

</body>
</subsection>
<subsection>
<title>Opsætning af rsync</title>
<body>

<p>
<c>rsync</c> er brug af <c>emerge sync</c> til at opdatere dit Portage tree. Tre
variabler, brugt af Portage til at ændre <c>rsync</c>s adfærd, er
<c>RSYNC_EXCLUDEFROM</c>, <c>RSYNC_RETRIES</c> og <c>RSYNC_TIMEOUT</c>.
</p>

<p>
En metode for at "beskytte" ebuilds fra, at blive opdateret eller slettet via <c>emerge
sync</c>, er at bruge <c>RSYNC_EXCLUDEFROM</c>-variabelen. Den burde være sat til en
fil, som er brugt af <c>rsync</c> for at undlade specifikke filer og standarder til
<path>/etc/portage/rsync_excludes</path>. Det er <e>ikke</e> tilrådeligt at bruge
denne metode, da den kan ødelægge afhængighederne, hvis du ikke er forsigtig. Vi vil tale
om <c>PORTDIR_OVERLAY</c> senere, som er den tilrådelige metode. For flere
informationer, læs venligst <c>rsync</c>s man-side.
</p>

<pre caption="RSYNC_EXCLUDEFROM-variabelen">
RSYNC_EXCLUDEFROM="/etc/portage/rsync_excludes"
</pre>

<p>
Når <c>rsync</c> fejler, vil den prøve igen et antal gange, før den skifter til den
næste tilgængelige rsync-server. Antallet af genfindelser er defineret i
<c>RSYNC_RETRIES</c> og standarden er sat til <c>3</c>:
</p>

<pre caption="RSYNC_RETRIES-variabelen">
RSYNC_RETRIES="3"
</pre>

<p>
Hvis du bruger en (meget) langsom rsync-server, kan <c>rsync</c> time-out, hvis der ikke
er modtaget nogen trafik længere. Antallet af sekunder, som den venter før time-out, er
defineret i <c>RSYNC_TIMEOUT</c>-variabelen og standarden er sat til <c>180</c>:
</p>

<pre caption="RSYNC_TIMEOUT-variabelen">
RSYNC_TIMEOUT="180"
</pre>

</body>
</subsection>
</section>
<section>
<title>Biblioteksplaceringer</title>
<subsection>
<title>Introduktion</title>
<body>

<p>
Alt omkring Portage kan blive indstillet, inklusiv de biblioteker, som er brugt til de
forskellige opgaver og filer, som er nødvendige for Portage. For at ændre standard-placeringerne (som
defineret i <path>/etc/make.globals</path>) vil du få brug for at definere de korrekte
variabler i - hvor ellers :) - <path>/etc/make.conf</path>.
</p>

<warn>
Hvis du ændrer en variabel til at pege på et andet sted, afslut <e>aldrig</e> en
sti fulgt af et <path>/</path> !
</warn>

</body>
</subsection>
<subsection>
<title>Portage-træet</title>
<body>

<p>
Placeringen af portage-træet er defineret i <c>PORTDIR</c>-variabelen.
Standarden er sat til <path>/usr/portage</path>:
</p>

<pre caption="PORTDIR-variabelen">
PORTDIR="/usr/portage"
</pre>

<p>
Hvis du vil have et lokalt Portage-træ ved siden af den "officelle", skal du
definere <c>PORTDIR_OVERLAY</c>-variabelen. Bibilioteksplaceringer(ne), som er vist i
denne værdi, er uaffægtet af <c>emerge sync</c> aktiviteter: ebuilds i disse
steder vil ikke blive opdateret eller fjernet, men være en del af dit Portage-træ.
</p>

<pre caption="PORTDIR_OVERLAY-variabelen">
PORTDIR_OVERLAY="/usr/local/portage"
</pre>

</body>
</subsection>
<subsection>
<title>Distfiles</title>
<body>

<p>
Placeringen af de hentede kildekoder (såkaldte distfiles) er defineret i
<c>DISTDIR</c>-variabelen. Standarden er sat til <path>${PORTDIR}/distfiles</path>:
</p>

<pre caption="DISTDIR-variabelen">
DISTDIR="${PORTDIR}/distfiles"
</pre>

</body>
</subsection>
<subsection>
<title>Pakker og RPM'er</title>
<body>

<p>
Placeringen af de præ-byggede pakker er defineret i <c>PKGDIR</c>-variabelen.
Standarden er sat til <path>${PORTDIR}/packages</path>:
</p>

<pre caption="PKGDIR-variabelen">
PKGDIR="${PORTDIR}/packages"
</pre>

<p>
Placeringen af RPM'erne (ja, nogle pakker er tilgængelige som RPM'er) er defineret
i <c>RPMDIR</c>-variabelen. Standarden er sat til <path>${PORTDIR}/rpm</path>:
</p>

<pre caption="RPMDIR-variabelen">
RPMDIR="${PORTDIR}/rpm"
</pre>

</body>
</subsection>
<subsection>
<title>Midlertidige Portage-filer</title>
<body>

<p>
Portage bruger et midlertidigt sted til at bygge dens ebuilds. Denne placering er 
defineret i <c>PORTAGE_TMPDIR</c>-variabelen. Standarden er sat til
<path>/var/tmp</path>:
</p>

<pre caption="PORTAGE_TMPDIR-variabelen">
PORTAGE_TMPDIR="/var/tmp"
</pre>

<p>
Som standard vil Portage oprette et <path>portage</path>-bibliotek inde i
<c>PORTAGE_TMPDIR</c>. Dette er erkæret i <c>BUILD_PREFIX</c>-variabelen:
</p>

<pre caption="BUILD_PREFIX-variabelen">
BUILD_PREFIX="${PORTAGE_TMPDIR}/portage"
</pre>

<p>
Hvis du tænker på at ændre placeringen, vær sikker på at dette midlertidige bibliotek, er på en
partition med nok fri plads: når der bliver kompileret store software-pakker,
kan biblioteket gro op til 2 GB og mere!
</p>

</body>
</subsection>
<subsection>
<title>Logning</title>
<body>

<p>
<c>PORT_LOGDIR</c> er en speciel variabel og er ikke sat som standard. Når du
definerer den, vil Portage oprette en log pr. ebuild i det givne bibliotek:
</p>

<pre caption="PORT_LOGDIR-variabelen">
PORT_LOGDIR="/var/log/portage"
</pre>

</body>
</subsection>
</section>
<section>
<title>Andre Portage-valgmuligheder</title>
<subsection>
<title>Nice-værdi</title>
<body>

<p>
Portage understøtter bygningen med en anden nice-værdi (en prioritetslignende værdi).
Hvis du vil have Portage til at bygge pakker med en højere nice-værdi (som resulterer
i et mere modtageligt system igennem bygningsprocessen, men som også
forlænger bygningstiden) kan du definere <c>PORTAGE_NICENESS</c>-variabelen
med et positivt nummer:
</p>

<pre caption="PORTAGE_NICENESS-variabelen">
PORTAGE_NICENESS="3"
</pre>

</body>
</subsection>
<subsection>
<title>SLOT'ede pakker og automatisk rensning</title>
<body>

<p>
I flere situationer vil du have mangeartede forskellige versioner af en pakke
(inklusiv libraries) tilgængeligt på dit system. Portage understøtter dette ved at
definere <c>SLOT</c>-variabelen i ebuilds. Som en bruger, behøver du ikke at
vide hvordan <c>SLOT</c>'ing virker, men det er vigtigt at vide, at den er understøttet.
</p>

<p>
Hvis du installerer en nyere version af en pakke, vil Portage tjekke om
<c>SLOT</c>-variabelen er erklæret for denne pakke. Hvis dette er tilfældet, og
<c>SLOT</c>-variabelen er forskellig for begge pakker (nye og gamle), vil Portage
ikke røre ved den ændrede pakke.
</p>

<p>
Imidlertid, hvis <c>SLOT</c>-variabelen er den samme (som er det mest typiske), vil
den ældre pakke blive fjernet som standard. For at en bruger kan bryde ind i
den proces, vil Portage tælle ned til den et specifikt antal sekunder. Dette antal
er defineret i <c>CLEAN_DELAY</c>-variabelen og standarden er sat til <c>5</c> sekunder:
</p>

<pre caption="CLEAN_DELAY-variabelen">
CLEAN_DELAY="5"
</pre>

<p>
Hvis du ikke vil have, at Portage vil fjerne de ældre versioner automatisk (kaldet
"rensning"), kan du sætte <c>AUTOCLEAN</c>-variabelen til <c>no</c>:
</p>

<pre caption="AUTOCLEAN-variabelen">
AUTOCLEAN="no"
</pre>

</body>
</subsection>
<subsection>
<title>Bygge-relaterede variabler</title>
<body>

<p>
Vi har allerede mødt en stor del af variablerne, men vi er ikke færdige endnu.
Folk, som har installeret Gentoo, kender til <c>CHOST</c>, <c>CFLAGS</c>
og <c>CXXFLAGS</c>-variablerne, brugt af compileren til at kompilere og optimere
pakkerne.
</p>

<p>
Flere informationer omkring disse variabler kan blive fundet i <c>gcc</c>s info-sider
eller online i <uri
link="http://www.gnu.org/software/gcc/onlinedocs/">GCC Online Manuals</uri>.
</p>

<pre caption="Skaffelse af informationer omkring CHOST, CFLAGS og CXXFLAGS">
# <i>info gcc</i>
<comment>(Vælg "Invoking gcc")</comment>
<comment>(Vælg "Optimize options")</comment>
</pre>

<p>
Hvis <c>DEBUGBUILD</c> er defineret, vil Portage ikke "strippe" de binære filer og
libraries for at gøre fejlfinding nemmere. Dette sænker farten på dit system og forøger
filstørrelsen.
</p>

<pre caption="DEBUGBUILD-variabelen">
<comment># Sæt den ikke til "false"; fjern linjen i stedet for. Portage tjekker</comment>
<comment># ikke værdien, den tjekker kun hvis variablen er defineret.</comment>
DEBUGBUILD="true"
</pre>

<p>
<c>MAKEOPTS</c>-variabelen er brugt af <c>make</c>, et værktøj brugt for at gøre
kompileringen af en pakke lettere. Det er normalt defineret til at fortælle <c>make</c> for at køre
adskillige kompileringer simultant (specielt hvis du ikke har et multi-CPU system, 
eller er bruger <c>distcc</c>, som beskrevet førhen).
</p>

<p>
For at få <c>make</c> til at køre tre kompileringer simultant, sæt
<c>MAKEOPTS</c>-variabelen til <c>-j3</c>:
</p>

<pre caption="MAKEOPTS-variabelen">
MAKEOPTS="-j3"
</pre>

<p>
<c>ROOT</c>-variabelen burde ikke være indstillet i <path>/etc/make.conf</path>, men
mere som en miljø-variabel. Portage vil tjekke denne variabel for at se hvor en
pakker mangler at blive installeret. Selvfølgelig er standarden sat til <path>/</path>. Dette
eksempel vil vise dig, hvordan man installerer <c>gnumeric</c> i 
<path>/mnt/gentoo</path>, i stedet for i dit kørende system:
</p>

<pre caption="ROOT-variabelen">
# <i>ROOT="/mnt/gentoo" emerge gnumeric</i>
</pre>

</body>
</subsection>
<subsection>
<title>Output-formatering</title>
<body>

<p>
Som standard farver Portage dens output for at forbedre læsbarheden. Hvis du ikke vil
have dette, sæt <c>NOCOLOR</c>-variabelen til <c>true</c>:
</p>

<pre caption="NOCOLOR-variabelen">
NOCOLOR="true"
</pre>

</body>
</subsection>
</section>
<section>
<title>Ressourcer</title>
<subsection>
<title>Man-sider</title>
<body>

<p>
Hvis du vil have en hurtig reference til alle viste variabler, læs venligst
<path>make.conf</path> man-side:
</p>

<pre caption="Læsning af make.conf man-side">
# <i>man make.conf</i>
</pre>

</body>
</subsection>
<subsection>
<title>Kommenterede eksempler</title>
<body>

<p>
<path>/etc/make.conf</path>-filen indeholder en masse kommentarer, inklusiv
eksempler, som du måske vil finde interessante. Dog, mange folk opdaterer ikke deres
<path>/etc/make.conf</path> interaktivt og derfor går glib af opdateringer til
filerne. Du kan finde den sidste nye <path>/etc/make.conf</path>-fil i vores
<uri
link="http://www.gentoo.org/cgi-bin/viewcvs.cgi/*checkout*/portage/cnf/make.conf?rev=HEAD&amp;cvsroot=gentoo-src&amp;content-type=text/plain">Online
ViewCVS opbevaringssted</uri>.
</p>

</body>
</subsection>
</section>
</sections>
