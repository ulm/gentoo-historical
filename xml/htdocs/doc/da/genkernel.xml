<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/da/xml-guide.xml">
<title>Gentoo Linux Genkernel Vejledning</title>

<author title="Forfatter">
  <mail link="plasmaroo@gentoo.org">Tim Yamin</mail>
</author>
<author title="Oversætter">
  <mail link="aaby@gentoo.org">Arne Mejlholm</mail>
</author>
<author title="Korrektur">
  <mail link="broeman@gentoo.org">Jesper Brodersen</mail>
</author>

<abstract>
Denne vejledning har til formål at være en reference til alle
de funktioner, der bliver sat til rådighed af Genkernel.
</abstract>

<license/>

<version>1.0.0.1</version>
<date>22. April 2003</date>

<chapter>
<title>Introduktion</title>
<section>
<title>Introduktion</title>
<body>

<p>
Genkernel er designet til at tillade brugere, der ikke tidligere er
vant til at kompilere en kerne, til at bruge opsætning der ligner den
der er brugt på Gentoo LiveCDerne, hvilke automatisk finder dit 
hardware.
</p>

<p>
Nogle brugere er måske også interesseret i at bruge genkernel til
hardware som kræver aktivering og en fungerende kerne, før der skal
genstartes. Fordi genkernel også automatisk samler dine kerne-moduler,
tillader den således hardware, som kræver at blive hentet med modul-parametre.
</p>

</body>
</section>
<section>
<title>Er genkernel noget for mig?</title>
<body>

<p>
Genkernel er ofte et godt valg for dem der ikke er vant til at
samle deres egen kerne eller dem der ikke er sikre på deres
hardware-opsætning.
</p>

<p>
Fordi genkernel er designet til at bruge en generisk opsætning, så bør
den være i stand til at understøtte alt dit hardware - men, fordi alle
drivere og moduler også skal samles, så er det at samle sin egen kerne
selv ofte meget hurtigere, givet at du ved hvad du har brug for.
</p>

<p>
Genkernel understøtter dog ikke pt. opstart fra LVM2/EVMS2
partitioner. Brugere anbefales at bruge en manuelt samlet kerne
indtil videre.
</p>

</body>
</section>
<section>
<title>At få fat i genkernel</title>
<body>

<p>
Du kan få fat i genkernel ved bare at køre <c>emerge
genkernel</c>. Glem ikke at bruge <c>-k</c> flaget til emerge, hvis du
bruger binære pakker, f.eks. GRP. Pga. at GRP pakkerne har en ældre
version af genkernel, er flagene anderledes. På grund af dette bør du læse <uri 
link="http://www.gentoo.org/doc/da/handbook/handbook-x86.xml?part=1&amp;chap=9">
Gentoo håndbogen</uri> og <path>genkernel --help</path> igennem.
</p>

</body>
</section>
<section>
<title>Understøttede platforme</title>
<body>

<p>
Fra og med genkernel 3.0.2 bør de følgende platforme være
understøttet: alpha, amd64, parisc, parisc64, ppc, ppc64, sparc,
sparc64, og x86. Hvis du mener at der er en fejl i den understøttende
kode, og ikke med genkernel, så udfyld en fejlrapport hos <uri
link="http://bugs.gentoo.org">Gentoo Bugzilla.</uri>
</p>

</body>
</section>
</chapter>

<chapter>
<title>Brug af genkernel</title>
<section>
<title>Introduktion</title>
<body>

<p>
Genkernel er designet til at virke på tre måder:
</p>

<ul>
  <li>"all" mode: denne bygger kernen samt initrd</li>
  <li>"kernel" mode: denne bygger kun kernen</li>
  <li>"initrd" mode: denne bygger kun initrd</li>
</ul>

<p>
De fleste brugere vil kun bruge "all", som kører "kernel" mode
og "initrd" mode for dig. <b>Bemærk</b> at "kernel" og "initrd"
modes er pt. bare aliasser for "all", så de vil ikke give dig nogen
speciel effekt.
</p>

<p>
Selvom at genkernel hovedsagelig er en kommando til at gøre dit liv
nemmere, når du skal samle en kerne, så er genkernel også pakket
fuldt med forskellige flag, som tillader dig at skræddersy hvordan din
kerne bliver kompileret og konfigureret.
</p>

</body>
</section>
<section>
<title>Genkernel samlings-flag</title>
<body>

<p>
Genkernel understøtter de følgende flag, som sendes til de relevante
applikationer imens din kerne bliver samlet:
</p>

<ul>
  <li>
    <b>--kernel-as=<c>enAssembler</c></b>: Dette specificerer en
    assembler som vil blive brugt til at samle din kerne.
  </li>
  <li>
    <b>--kernel-cc=<c>enCompiler</c></b>: Dette specificerer en
    compiler som vil blive brugt til at samle din kerne.
  </li>
  <li>
    <b>--kernel-ld=<c>enLinker</c></b>: Dette specificerer en linker
    som vil blive brugt til at samle din kerne.
  </li>
  <li>
    <b>--kernel-make=<c>enMake</c></b>: Dette specificerer en
    alternativ GNU Make som vil blive brugt til at samle din kerne.
  </li>
</ul>

<ul>
  <li>
    <b>--utils-as=<c>enAssembler</c></b>: Dette specificerer en
    assembler som vil blive brugt til at samle understøttelsesværktøjerne.
  </li>
  <li>
    <b>--utils-cc=<c>enCompiler</c></b>: Dette specificerer en
    kompiler som vil blive brugt til at samle understøttelsesværktøjerne.
  </li>
  <li>
    <b>--utils-ld=<c>enLinker</c></b>: Dette specificerer en linker
    som vil blive brugt til at samle understøttelsesværktøjerne.
  </li>
  <li>
    <b>--utils-make=<c>enMake</c></b>: Dette specificerer en
    alternativ GNU Make, som vil blive brugt til at samle
    understøttelsesværtøjerne.
  </li>
</ul>

<ul>
  <li>
    <b>--makeopts=<c>-jJobs</c></b>: Dette specificerer det flag der
    vil blive sendt til GNU Make når kernen og værtøjerne bliver samlet.
  </li>
</ul>

</body>
</section>
<section>
<title>Genkernel kerne-flag</title>
<body>

<p>
Genkernel understøtter de følgende flag, nogle af dem har
<c>--<b>no-</b>mulighed</c> ækvivalente, der har
indflydelse på samlingen af kernen:
</p>

<ul>
  <li>
    <b>--callback="echo Hello"</b>: Denne rutine kalder de
    specificerede argumenter efter at kernen og de relevante moduler
    er blevet bygget, men før at initrd er blevet bygget. Dette er
    nyttigt, når du måske ønsker eksterne moduler installeret til
    initrd, ved at emerge de relevante dele ved brug af callback og
    derefter omdefinering af en Genkernel modul-gruppe.
  </li>
  <li>
    <b>--<c>no-</c>clean</b>: Dette kører <e>eller kører ikke</e>
    <c>make clean</c> før den samler din kerne. Dette gør at alle
    objektfiler og afhængigheder bliver fjernet.
  </li>
  <li>
    <b>--<c>no-</c>mrproper</b>: Dette kører <e>eller kører ikke</e>
    <c>make mrproper</c> før den samler din kerne. Dette gør at
    alle objektfiler, afhængigheder <b>og din opsætning</b> bliver
    fjernet.
  </li>
</ul>

<ul>
  <li>
    <b>--kerneldir=<path>/sti/til/kildekode</path></b>: Dette
    specificerer en alternativ placering af kernens kildekode, i
    stedet for standardplaceringen <path>/usr/src/linux</path>.
  </li>
  <li>
    <b>--kernel-config=<path>/sti/til/config-file</path></b>: Dette
    specificerer en alternativ kerneopsætning, som vil blive
    brugt; fremfor den ikke persistente
    <path>/sti/til/kildekode/.config</path>, som bliver brugt som standard.
  </li>
</ul>

<ul>
  <li>
    <b>--<c>no-</c>bootsplash</b>: Dette tilføjer <e>eller tilføjer ikke</e> bootsplash 
    understøttelse i den initrd, som genkernel bygger. Ikke alle
    arkitekturer understøtter pt. bootsplash, og en kerne der
    understøtter bootsplash kræves også.
  </li>
  <li>
    <b>--<c>no-</c>menuconfig</b>: Dette kører <e>eller kører ikke
    </e> menu-baserede kerneopsætning før den bygger kernen, efter at <c>make 
    oldconfig</c> er blevet kørt.
  </li>
</ul>

<ul>
  <li>
    <b>--no-initrdmodules</b>: Dette kopierer ikke nogen moduler
    til den initrd, som genkernel laver.
  </li>
  <li>
    <b>--<c>no-</c>install</b>: Dette installerer <e>eller installerer
    ikke</e> din kerne, dine moduler og initrd når samlingen er færdig.
  </li>
</ul>

</body>
</section>
<section>
<title>Diverse Genkernel-flag</title>
<body>

<p>
Genkernel understøtter også nogle forskellige flag, som ikke passer
ind i de to andre kategorier:
</p>

<ul>
  <li>
    <b>--arch-override=<c>enArch</c></b>: Dette flag kan bruges til at
    omgå hvilken arkitektur genkernel tror du er på, hvis den
    automatiske detektering fejler (send venligst en bug, hvis den
    gør) eller hvis du ønsker at kompilere en kerne til en anden arkitektur.
  </li>
</ul>

<ul>
  <li>
    <b>--busybox-config=<path>/sti/til/busybox-config</path></b>:
    Dette omgår standard opsætningen af busybox ved den specificerede fil.
  </li>
  <li>
    <b>--busybox-bin=<path>/sti/til/busybox-binær.tar.bz2</path></b>:
    Ved at bruge denne mulighed, sikrer du at en busybox binær fil
    ikke bliver samlet og at den specificerede tarball vil blive
    brugt. Bemærk at busybox <e>skal</e> være statisk samlet!
  </li>
</ul>

<ul>
  <li>
    <b>--minkernpackage=<path>/output/til/dinkerne.tar.bz2</path></b>:
    Dette flag outputter en tarball af kernen, navngivet
    <path>kerne</path> og initrd navngivet <path>initrd</path> til den
    specificerede fil. Der vil ikke blive inkluderet nogen information
    omkring moduler i denne tarball.
  </li>
</ul>

</body>
</section>
<section>
<title>At køre genkernel</title>
<body>

<p>
Alt hvad der er nødvendigt for at køre genkernel er kun genkernel med
de nødvendige flag som root. F.eks:
</p>

<pre caption="At køre genkernel">
# genkernel --menuconfig --no-clean --no-install --bootsplash all
<comment>(Vil producere en kerne, ved at spørge dig hvordan den skal
opsættes, så det passer til dine ønsker, lade alle samlede
objektfiler være, slå bootsplash-understøttelse til, men uden at
installere noget som helst.)</comment>
</pre>

<p>
Hvis du vil have genkernel til at også at installere din kerne, så
skal du være sikker på at din <path>/boot</path> partition er mountet
- nyere udgaver af Genkernel vil automatisk forsøge at gøre dette for
dig, hvis MOUNTBOOT er sat til "yes" i <path>/etc/genkernel.conf</path>.
</p>

<pre caption="At mounte din /boot manuelt">
<comment>(Hvis /boot er en gyldig indgang i /etc/fstab:)</comment>
# mount /boot
<comment>(... ellers for IDE diske:)</comment>
# mount /dev/hda1 /boot
<comment>(... og for SCSI diske:)</comment>
# mount /dev/sda1 /boot
</pre>

</body>
</section>
<section>
<title>At sætte genkernel op til fungere med din bootloader</title>
<body>

<p>
For at sætte genkernel op til at virke med din boot-loader, er tre
eller fire ændringer nødvendige i din boot-loader-opsætning.
</p>

<ol>
  <li>
    Tilføj <c>root=/dev/ram0</c> og <c>init=/linuxrc</c> til kerne
    parametrene som bliver sendte videre til kerne-billedfilen.
  </li>
  <li>
    Tilføj <c>real_root=/dev/hda3</c>, eksempelvis, til de kerne
    parametre der bliver sendt videre til kerne-billedfilen hvis
    <path>/dev/hda3</path> indeholder din root partition.
  </li>
  <li>
    Hvis du bruger bootsplash, tilføj da en passende modeline såsom
    <c>vga=0x317</c> til de parametre der bliver sendt videre til
    kernen og tilføj også <c>splash=verbose</c> eller
    <c>splash=silent</c> afhængigt af hvor meget feedback du vil have
    fra din bootsplash.
  </li>
  <li>
    Tilføj initrd afhængigt af hvordan din bootloader kræver
    det: se <uri link="http://www.gentoo.org/doc/da/handbook/handbook-x86.xml?part=1&amp;chap=9">Gentoo 
    Håndbogen</uri> for detaljer om hvordan du bør gøre det for din boot-loader.
  </li>
</ol>

</body>
</section>
</chapter>

<chapter>
<title>At porte genkernel</title>
<section>
<title>Introduktion</title>
<body>

<p>
Givet at din arkitektur har alle de krævede biblioteker og
værktøjer, som genkernel kræver, hvilket inkluderer, men er ikke
begrænset til, en fungerende kerne, til din arkitektur, et fungerende
sæt, GNU Make og en fungerende busybox distribution, så er du klar til
at køre!
</p>

<p>
For enhver arkitektur bruger genkernel 
<path>/usr/share/genkernel/archNavn</path> til opsætningsfiler for
denne arkitektur.
</p>

</body>
</section>
<section>
<title>Hvordan system-bootstrapningen virker</title>
<body>

<ol>
  <li>
    Boot-loaderen henter genkernel-billedefilen, bygget til specifikationen
    af opsætningsfilerne i genkernel-bibliotekerne såvel som
    initrd, som bliver gjort klar af genkernel.
  </li>
  <li>
    Kernen starter op, allokerer den en lille mængde RAM, hvori busybox
    aktiveres, der undersøger systemet med modulerne i modules_load 
    listen for arkitekturen.
  </li>
  <li>
    Når dette er gjort og givet at <c>real_root</c> parameteren er
    root boot-enheden som busybox ser tingene, bliver fundet, så
    bliver systemet bootet fra denne enhed.
  </li>
</ol>

</body>
</section>
<section>
<title>Opsætningsfilerne</title>
<body>

<ul>
  <li>
    <path>busy-config</path>: Dette er den opsætning, som bliver brugt
    til at bygge busybox til din arkitektur.
  </li>
  <li>
    <path>config.sh</path>: Dette er et shell-script, som sætter
    forskellige indre genkernel-variabler. Se en af
    <path>config.sh</path>-filerne for et eksempel.
  </li>
  <li>
    <path>modules_load</path>: Dette er en fil der indeholder en
    liste, afgrænset af mellemrum, af moduler som bliver hentet for at
    få SCSI, FireWire, ATARAID og PCMCIA understøttelse. Hvis der ikke
    er nogen af disse der er tilgængelige til din platform, lad da
    disse felter være blanke. Se en af <path>modules_load</path>
    filerne for et eksempel.
  </li>
</ul>

<ul>
  <li>
    <path>kernel-config</path>: En standard kerne-opsætning, der
    bruges for enhver kerneversion.
  </li>
  <li>
    <path>kernel-config-2.4</path>: En standard kerne-opsætning,
    der bruges for 2.4 kerneserien.
  </li>
  <li>
    <path>kernel-config-2.6</path>: En standard kerne-opsætning,
    der bruges for 2.6 kerneserien.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
