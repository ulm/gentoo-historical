<?xml version='1.0' encoding="iso-8859-1"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/da/prelink-howto.xml,v 1.1 2003/11/23 21:02:42 aaby Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="doc/da/prelink-howto.xml">
<title>Gentoo Linux Prelink Guiden</title>

<author title="Forfatter">
  <mail link="cretin@gentoo.org">Stefan Jones</mail>
</author>
<author title="Redaktør"><!-- zhen@gentoo.org -->
  John P. Davis
</author>
<author title="Redaktør">
  <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Redaktør">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Redaktør">
  <mail link="erwin@gentoo.org">Erwin</mail>
</author>
<author title="Oversætter">
  <mail link="aaby@gentoo.org">Arne Mejlholm</mail>
</author>
<author title="Korrektur">
  <mail link="broeman@gentoo.org">Jesper Brodersen</mail>
</author>
<author title="Korrektur">
  <mail link="aaby@gentoo.org">Arne Mejlholm</mail>
</author>

<abstract>
Denne guide informerer om hvordan man bruger prelink understøttelse i
portage version 2.0.46 og senere.
</abstract>

<version>1.4</version>
<date>7. September, 2003</date>

<license/>

<chapter>
<title>Introduktion</title>
<section>
<title>Hvad er Prelink og hvordan kan det hjælpe mig?</title>
<body>

<p>
De fleste almindelige applikationer bruger delte biblioteker. Disse
delte biblioteker skal hentes ind i hukommelsen ved runtime og de
forskellige symbolske referencer skal udforskes. For de fleste små
programmer er denne dynamiske form for linkning meget hurtig. Men for
programmer skrevet i C++ og har mange bibliotek afhængigheder, kan den
dynamiske "linkning" tage en del tid.
</p>

<p>
På de fleste systemer bliver biblioteker ikke ændret særlig tit og når
et program bliver kørt er de operationer, der bliver lavet, de samme
hver gang. Prelink udnytter dette ved at udføre linkningen og gemme
den i en eksekverbar fil, og derved præ-linke den. For at bruge
linkningen skal du have ld-linux.so i glibc; for at genkende
prelinkning har du brug for &gt;=glibc-2.3.1-r2.
</p>

<p>
Prelinkning kan skære af på opstartstiderne for
applikationer. F.eks. kan et typisk KDE-programs hentetid skæres ned
med så meget som 50%. Den eneste vedligeholdelse der kræves, er at køre
prelink igen hver gang et bibliotek bliver opgraderet til en prelinket
eksekverbar fil.
</p>

</body>
</section>
<section>
<title>Opsummering</title>
<body>

<ul>
  <li>
    Prelinkning gøres med a program kaldet, overraskende nok,
    <path>prelink</path>. Det ændrer den binære fil for at få den til
    at starte hurtigere.
  </li>
  <li>
    Hvis applikationsafhængige biblioteker ændrer sig efter at du har
    prelinket det, så skal du prelinke applikationen igen, ellers
    mister du hastighedsfordelene. Dette vil sige, hver gang du
    opdaterer en pakke gennem Portage, der opdaterer biblioteker, så
    skal de prelinkes igen.
  </li>
  <li>
    Ændringen der bliver lavet på den binære fil, og er fuldt ud muligt at
    fjerne igen. <path>prelink</path> har en undo funktion.
  </li>
  <li>
    Nyere versioner af Portage håndterer, via <path>prelink</path>, de
    ændrende MD5sums og mtimes fra de binære filer.
  </li>
  <li>
    Du skal have glibc-2.3.1-r2 eller højere installeret med de binære
    filer kompileret med binutils-2.13.90.0.xx eller højere.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>At sætte prelink op</title>
<section>
<title>At installere programmerne</title>
<body>

<note>
Jeg går udfra at du har et Gentoo-1.4 system og at det er bygget med
gcc-3.2 eller højere og binutils-2.13.90.0.xx eller højere. Dette skal
være sådan for at dine binære filer kan prelinkes.
</note>

<warn>
Du skal have glibc-2.3.1-r2 eller nyere installeret ellers vil <path>prelink</path>
ødelægge dine binære filer!
</warn>

<p>
Først skal du opdatere dit Portage træ, idet at mange af de nødvendige
applikationer er nye og der bliver konstant tilføjet bug-fixes.
</p>

<pre caption = "At opdatere dit Portage træ">
# <i>emerge sync</i>
</pre>

<p>
Derefter skal du være sikker på at du har portage-2.0.46 eller højere
installeret. Dette er nødvendigt så Portage kan genkende de prelinkede
binære filer og således afinstallere dem korrekt når der bliver bedt
om det. Dette skyldes at prelink proceduren ændrer MD5sum på en binær fil.
</p>

<pre caption = "At tjekke Portages version">
# <i>emerge ">=portage-2.0.46"</i>
</pre>

<p>
Nu kan du emerge prelinkning værktøjet. Emerge processen verificerer
automatisk at dit system kan prelinke helt sikkert.
</p>

<pre caption = "At installere prelink">
# <i>emerge prelink</i>
</pre>

<p>
Et større antal personer får fejl ved at emerge prelink pga. de fejlede
test. Disse test blev indsat af sikkerhedsårsager, prelinks opførsel
er udefineret, hvis du slår dem fra. Emerge fejlene er som regel kun
afhængige af centrale pakker; binutils, gcc og glic. Prøv at emerge
de pakker igen i den rækkefølge.
</p>

<note>
Et tip: Hvis du får en fejl prøv at kompilere og teste <c>prelink</c>
selv (dvs. kør (<c>./configure</c> ; <c>make</c> ; <c>make check</c>
). Når det fejler kan du læse *.log filerne i test biblioteket. Dette
kan give dig brugbare spor.
</note>

<p>
Hvis du har et par skridt, der reproducerer den emerge fejl på et andet
system, så send dem venligst i en email til <mail link="cretin@gentoo.org">Stefan Jones</mail>.
</p>

</body>
</section>
<section>
<title>Opsætning</title>
<body>

<p>
Portage genererer automatisk filen <path>/etc/prelink.conf</path> der
fortæller <path>prelink</path> hvilke filer, der skal prelinkes.
</p>

<p>
Uheldigvis kan du ikke prelinke filer, der er kompileret af ældre
versioner af binutils. De fleste af disse applikationer kommer fra
præ-kompilerede, udelukkende binære pakker, som bliver installeret i
<path>/opt</path>. Hvis du laver den følgende fil, fortæller du prelink
om ikke at prøve at prelinke dem.
</p>

<pre caption="/etc/env.d/99prelink">
PRELINK_PATH_MASK="/opt"
</pre>

<note>
Du kan tilføje et større eller mindre antal biblioteker til den kolon-separerede
liste.
</note>

</body>
</section>
</chapter>

<chapter>
<title>At prelinke</title>
<section>
<title>Brugen af prelink</title>
<body>

<p>
Jeg bruger den følgende kommando til at prelinke alle de binære filer
i et bibliotek, defineret i <path>/etc/prelink.conf</path>.
</p>

<pre caption = "At prelinke listede filer">
# <i>prelink -afmR</i>
</pre>

<warn>
Det er blevet bemærket at hvis du har lidt diskplads og du prelinker
hele dit system, så er der en sandsynlighed for at dine binære filer
bliver trunkeret. Resultatet bliver et ødelagt system. Brug
<c>file</c> eller <c>readelf</c> kommandoen for at tjekke en binær
fils tilstand. Alternativt kan du osse tjekke antallet af fri
diskplads på din harddisk før med <c>df -h</c>
</warn>

<table>
<tr>
  <th>Mulighederne forklaret:</th>
</tr>
<tr>
  <th>-a</th>
  <ti>"All": prelinker alle de binære filer</ti>
</tr>
<tr>
  <th>-f</th>
  <ti>
    Tvinger <path>prelink</path> til at prelinke binære filer, der
    allerede har været prelinket. Dette er nødvendigt da
    <path>prelink</path> afbryder, hvis prelinkede filer er tilstede og
    deres biblioteksafhængigheder har ændret sig.
  </ti>
</tr>
<tr>
  <th>-m</th>
  <ti>
    Bevarer den plads, der er reserveret til virtuel hukommelse. Dette
    er nødvendigt hvis du har en hel masse biblioteker, der skal prelinkes.
  </ti>
</tr>
<tr>
  <th>-R</th>
  <ti>
    Random -- blander adresse-rækkefølgen i virkårligt, dette forbedrer sikkerheden overfor buffer overflow.
  </ti>
</tr>
</table>

<note>
For at se flere muligheder og detaljer, se da <c>man prelink</c>.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Kendte problemer og løsninger dertil</title>
<section>
<title>&quot;Kan ikke prelinke mod et ikke PIC delt bibliotek?&quot;</title>
<body>

<p>
Grunden til at dette problem opstår, er fra forkert kompilerede delte
biblioteker, der har været kompileret uden -fPIC muligheden til gcc for
alle objektsfilerne.
</p>

<p>
Det følgende er en liste over problemsbibliotekerne og hvilke pakker
der skal emerges igen, hvis du har den fejl der er nævnt ovenfor.
</p>

<pre caption = "Løsninger">
<codenote>Til ORBit biblioteket /usr/lib/libIIOP.so.0.5.17</codenote>
# <i>emerge ">=sys-apps/tcp-wrappers-7.6-r4" ORBit</i>

<codenote>Til zlib biblioteket usr/lib/libz.so.1.1.4</codenote>
# <i>emerge ">=sys-libs/zlib-1.1.4"</i>

<codenote>Til svgalib, /usr/lib/libsvga.so.xx</codenote>
# <i>emerge ">=media-libs/svgalib-1.9.16"</i>

<codenote>Til XFree openGL biblioteket, libGLU.so.1</codenote>
# <i>emerge ">=x11-base/xfree-4.2.1-r2"</i>

<codenote>Til libpcap.so.0.6</codenote>
# <i>emerge ">=net-libs/libpcap-0.7.1-r2"</i>

<codenote>Til biblioteket lcms library, /usr/lib/liblcms.so.1</codenote>
# <i>emerge ">=media-libs/lcms-1.09"</i>
</pre>

<note>
Mange biblioteker linker statisk til zlib og/eller tcp-wrappers så
forsøg først at emerge dem og derefter emerge problem biblioteket igen.
</note>

<p>
Hvis du har problemer med at prelinke QT/KDE, så prøv først at
opgradere til >=x11-base/xfree-4.2.1-r2 og
>=x11-libs/qt-3.1.0-r1. Hvis QT stadig fejler, prøv da at kompilere QT
uden understøttelse for xinerama ved at tilføje myconf="-no-xinerama
${myconf}" til qt ebuilden.
</p>

<p>
Her er de biblioteker der ikke er blevet fixet eller ikke kan fixes:
</p>

<ul>
  <li>
    Bibliotekerne i wine pakken, inklusiv winex. At prelinke ville
    alligevel ikke hjælpe med få mere fart på MS Windows eksekverbare
    filer.
  </li>
  <li>
    Biblioteket i media-video/mjpegtools,
    <path>/usr/lib/liblavfile-1.6.so.0</path>.
  </li>
</ul>

<p>
Hvis dit problem bibliotek ikke var listet, reporter det venligst,
helst med en patch til at tilføje <i>-fPIC</i> til de relevante CFLAGS.
</p>

</body>
</section>
<section>
<title>Afbrydelse midt i prelinkningen af en fil, som &quot;1631 Aborted ....&quot;</title>
<body>

<p>
Du bliver nødt til at bruge <i>-f</i> muligheden til <path>prelink</path>;
kør f.eks. prelink på hele systemet fra start af igen. Prøv <c>prelink -af</c>.
</p>

</body>
</section>
<section>
<title>&quot;&lt;file&gt;: error while loading shared libraries: unexpected
reloc type...&quot;</title>
<body>

<p>
Dette er blevet ordnet i <i>sys-libs/glibc-2.3.1-r2</i> den 2002/11/18,
emerge glibc igen hvis dit er ældre.
</p>

<p>
Det er også kendt,at ved at køre <c>prelink -u -a -m</c> ; <c>prelink
 -a -m</c> kan hjælpe. Hvis alt andet fejler så bare kør <c>prelink -u &lt;file&gt;</c>.
</p>

</body>
</section>
<section>
<title>Jeg har problemer med Nvidia OpenGL biblioteker</title>
<body>

<p>
De accelerede OpenGL biblioteker, der kommer med nvidia-glx pakken er
blevet kompileret på en måde der bryder med standarden, så
<path>prelink</path> vil komme med advarsler. Der er ikke noget at
bekymre sig om og det kan ikke ordnes af andre end nvidia. Du kan
altid gå tilbage xfree versionen af libGL hvis du ikke har brug for 3D
acceleration. Nvidia xfree driveren virker fint nok skal det lige nævnes.
</p>

</body>
</section>
<section>
<title>Når jeg prelinker mit system så virker nogle statiske binære
filer ikke mere</title>
<body>

<p>
Når det er glibc man betragter så eksisterer der ikke en 100%
statisk binær fil. Hvis du kompilerer den binær fil statisk med glibc,
så kan den stadig godt være afhængig af andre system filer. Nedenfor
er en forklaring af Dick Howell,
</p>

<p>
&quot;Jeg går ud fra at ideen er, at alting vil være i den downloadede
fil, sådan at ingenting afhænger af lokale biblioteker på det system
der er målet. Uheldigvis er det sådan med Linux og alt andet der
bruger GLIBC, tror jeg, er at dette stadig ikke er helt rigtigt. Der er
denne "libnss" (name service switch, nogle folk kalder det åbenbart
network security system) som giver funktioner til at få adgang til
forskellige databaser til adgangskontrol, netværksinformation og andre
ting. Det er meningen at det skal gøre programmer uafhængige af et
separat konfigureret aktuelt netværks miljø i en maskine. En god ide,
men kan medføre problemer når det hentes. Og du kan ikke statisk linke
"libnss", da de konfigureres til hver maskine individuelt. Problemet
kommer, mener jeg, hovedsageligt fra at linke andre GLIBC biblioteker
statisk, mest af alt "libpthread", "libm", og "libc", som laver
inkompatible kald til "libnss" funktioner.&quot;
</p>

</body>
</section>
<section>
<title>Prelink afbryder med &quot;prelink: dso.c:306: fdopen_dso: Assertion
`j == k' failed.&quot;</title>
<body>

<p>
Dette er et kendt problem, som venligst bliver diagnosticeret <uri
link="http://bugs.gentoo.org/show_bug.cgi?id=13878">her</uri>. Prelink
kan ikke acceptere UPX-komprimerede eksekverbare filer. Fra og med
prelink-20021213 er der ikke nogen løsning bortset fra at skjule de
eksekverbare filer når du prelinker. Se <uri
link="#doc_chap2_sect2">Konfiguration sektionen</uri> ovenfor for en
nem måde at gøre dette på.
</p>

</body>
</section>
<section>
<title>Jeg bruger grsecurity og det virker som om at prelinkning ikke virker.</title>
<body>

<p>
For at prelinke på et system med grsecurity der bruger en vilkårlig
mmap() basis, er det nødvendigt at slå "randomized mmap() base" fra
for <path>/lib/ld-2.3.*.so</path>. Dette kan gøres med <c>chpax</c>
værktøjet, men det skal gøres når filen ikke er i brug (f.eks. ved at
booted fra en live-cd).
</p>

</body>
</section>    
</chapter>

<chapter>
<title>Konklusion</title>
<section>
<body>

<p>
Prelinkning kan sætte farten drastisk op mht. opstart for en del store
applikationer. Understøttelse er bygget ind i Portage. Prelinkning er
også sikkert da du altid kan undo prelinkningen for enhver binær fil
hvis du støder ind i nogen problemer. Bare husk at når du opdaterer
glibc, eller andre biblioteker som du har prelinket, bliver du nødt
til at køre <path>prelink</path>! For at sige det kort, held og lykke!
</p>

</body>
</section>
</chapter>
</guide>
