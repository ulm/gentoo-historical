<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/udev-guide.xml,v 1.34 2012/02/26 15:07:06 swift Exp $ -->

<guide lang="it">
<title>Guida a udev su Gentoo</title>

<author title="Autore">
  <mail link="swift"/>
</author>
<author title="Contributi">
  <mail link="greg_g"/>
</author>
<author title="Redazione">
  <mail link="nightmorph"/>
 </author>
<author title="Traduzione">
  <mail link="scen"/>
</author>

<abstract>
Questo documento spiega cos'è e come si può usare udev su Gentoo.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
 <!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>10</version>
<date>2011-12-26</date>

<chapter>
<title>Cos'è udev?</title>
<section>
<title>La directory /dev</title>
<body>

<p>
Quando gli utenti linux parlano del proprio hardware in presenza di persone che
pensano linux sia una sorta di strano virus od una nuova marca di caffè,
l'utilizzo di termini come "slash dev slash foo" vengono accolti con strani
sguardi. Ma per alcuni fortunati utenti (che includono anche chi sta
leggendo) utilizzare <path>/dev/sda1</path> è semplicemente un modo veloce di
spiegare che si sta parlando del primo canale SATA, prima partizione... giusto?
</p>

<p>
Tutti sanno cosa sia un file di periferica. Qualcuno sa anche perché questi
file hanno diversi numeri quando si da  un'occhiata più approfondita in
<path>/dev</path> con un <c>ls -l</c>. Ma quello che si dà per scontato è che
quando ci si riferisce al primo HD SATA si parla di <path>/dev/hda</path>.
Potrebbe anche non essere visto in questo modo, ma questo è un difetto di
struttura.
</p>

<p>
Si pensi alle periferiche PlugNPlay come le penne USB, IEEE1394, periferiche
PCI hot-swappable...qual è la prima periferica? E per quanto tempo? Come si
chiameranno le altre periferiche quando la prima verrà sconnessa? Questo come
influenzerà i flussi di dati in corso? Non sarebbe divertente che il proprio
lavoro venisse stampato, invece che sulla nuova stampante laser, sulla propria
sgangherata stampate ad aghi, solamente perché qualcuno ha deciso di staccare la
spina alla stampante laser che era vista dal sistema come primaria?
</p>

<p>
Le finalità del progetto udev sono sia interessanti che necessarie:
</p>

<ul>
  <li>Gira in spazio utente</li>
  <li>Crea e rimuove dinamicamente i file di periferica</li>
  <li>Assegna i nomi alle periferiche</li>
  <li>Mette a disposizione un API utilizzabile nello spazio utente</li>
</ul>

<p>
Ogni volta che avviene una modifica nella struttura delle periferiche, il
kernel emette un <e>uevent</e> che viene ricevuto da udev. A questo punto
udev segue le regole impostate nelle directory <path>/etc/udev/rules.d</path> 
e <path>/lib/udev/rules.d</path>. Basandosi sulle informazioni contenute
nell'uevent trova la regola o le regole necessarie a innescare ed eseguire
le azioni richieste. Queste azioni possono essere creare o cancellare file
di periferiche, ma possono anche inizializzare il caricamento di un
firmware particolare nella memoria del kernel.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Usare udev su Gentoo</title>
<section>
<title>Requisiti</title>
<body>

<p>
udev è stato pensato per funzionare in combinazione con i kernel 2.6 (come per
esempio <c>gentoo-sources</c> con il profilo di default 10.0). Se si sta
utilizzando un kernel simile a questo non dovrebbe esserci alcun problema
con l'utilizzo di udev in quanto il supporto necessario è compreso in tutte
le versioni stabili di <c>sys-apps/baselayout</c>. Normalmente udev
dovrebbe già essere installato nel sistema, se così non fosse è semplice
installarlo:
</p>

<pre caption="Installare udev">
# <i>emerge udev</i>
</pre>

<p>
Ricordarsi inoltre di attivare le seguenti opzioni nel kernel:
</p>

<pre caption="Opzione del kernel richieste">
General Setup ---&gt;
    <comment>(Make sure the following item is *not* enabled)</comment>
	[ ] enable deprecated sysfs features to support old userspace tools

File Systems ---&gt;
    [*]   Inotify support for userspace
    Pseudo filesystems ---&gt;
       [*] Virtual memory file system support (former shm fs)
</pre>

<p>
Se si utilizza <c>genkernel</c> non occorre fare nulla di speciale. Genkernel
imposterà udev in modo predefinito.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Problemi Noti</title>
<section>
<title>File di periferica mancanti all'avvio</title>
<body>

<p>
Se non si riesce ad avviare il sistema con successo perché si ottiene un errore
che dice che il file <path>/dev/null</path> non è stato trovato, o perché la
console iniziale non esiste, il problema è dovuto alla mancanza di alcuni file
che devono essere presenti nel sistema <e>prima</e> che
<path>/dev</path> venga montato e udev inizi a gestirlo. Questo è un errore
piuttosto comune sui sistemi Gentoo installati usando supporti vecchi.
</p>

<p>
Avendo installato <c>sys-apps/baselayout-1.8.12</c>, o più recente, questo
inconveniente dovrebbe essere alleviato dal fatto che il sistema dovrebbe essere
comunque in grado di avviarsi. Comunque, per evitare noiosi avvisi, è
sufficiente creare i file di periferica mancanti, come descritto in seguito.
</p>

<p>
Per visualizzare i dispositivi che sono disponibili prima che il filesystem
<path>/dev</path> venga montato bisogna eseguire i seguenti comandi:
</p>

<pre caption="Elenco dei dispositivi disponibili all'avvio">
# <i>mkdir test</i>
# <i>mount --bind / test</i>
# <i>cd test/dev</i>
# <i>ls</i>
</pre>

<p>
I dispositivi necessari per avviare correttamente il sistema sono
<path>/dev/null</path> e <path>/dev/console</path>. Se non vengono
visualizzati durante il test precedente vanno creati manualmente. I comandi
seguenti vanno eseguiti nella directory <path>test/dev/</path> creata in
precedenza:
</p>

<pre caption="Creare i file di periferica mancanti">
# <i>mknod -m 660 console c 5 1</i>
# <i>mknod -m 660 null c 1 3</i>
</pre>

<p>
Quando si sono impartiti questi comandi è necessario ricordarsi di smontare la
directory <path>test/</path>:
</p>

<pre caption="Smontare la directory test/">
# <i>cd ../../</i>
# <i>umount test</i>
# <i>rmdir test</i>
</pre>

</body>
</section>
<section>
<title>udev e nvidia</title>
<body>

<p>
Nel caso si usassero i driver proprietari di nVidia e il server grafico X non
partisse, in un sistema configurato per utilizzare solo udev, bisogna
assicurarsi che il modulo <c>nvidia</c> sia presente in <path>/etc/conf.d/modules</path>.
</p>

</body>
</section>
<section>
<title>Assegnazione differente dei nomi tra DevFS e udev</title>
<body>

<p>
Nonostante l'intento di mantenere inalterati i nomi assegnati ai dispositivi da
entrambi i sistemi di gestione, in qualche caso può capitare che ci siano
delle differenze tra il nome assegnato da DevFS e quello assegnato da udev.
</p>

<p>
Un caso conosciuto riguarda il controller RAID HP Smart Array 5i (più
precisamente il modulo del kernel <c>cciss</c>). Con udev, il dispositivo viene
chiamato <path>/dev/cciss/cXdYpZ</path> dove X, Y e Z sono numeri. Con devfs, il
dispositivo si chiama <path>/dev/hostX/targetY/partZ</path> o é un link
simbolico a <path>/dev/cciss/cXdY</path>.
</p>

<p>
In questo caso é necessario ricordarsi di modificare il file
<path>/etc/fstab</path> e i file di configurazione del bootloader.
</p>

<p>
La stessa cosa succede con molti dei link simbolici che venivano creati in
<path>/dev</path>, come per esempio <path>/dev/mouse</path>, che ora
<c>udev</c> non crea più. Assicurarsi che nel proprio file di configurazione
di X il percorso del dispositivo del mouse punti ad un file esistente.
</p>

<p>
Un'altro problema è nella differenza di denominazione dei terminali tra devfs e
udev. Mentre in devfs i terminali vengono chiamati <c>tty</c>, udev li chiama
<c>vc</c> e <c>tty</c>. Ciò può dare dei problemi nel caso siano state applicate
delle restrizioni, attraverso l'uso di  <path>/etc/securetty</path>, riguardo le
login da utente root. Assicurarsi che entrambe le voci <c>tty1</c> e <c>vc/1</c>
siano elencate nel file di configurazione <path>/etc/securetty</path>, per
permettere a root di effettuare il login tramite la console.
</p>

</body>
</section>
<section>
<title>Rinominare i dispositivi a blocchi</title>
<body>

<p>
Le versioni recenti di udev (dalla 104 in poi) unitamente alle nuove versioni
del kernel (2.6.19 e successive) potrebbero cambiare i nomi di dispositivo dei
propri dischi, a causa di una modifica nell'implementazione del kernel riguardo
a libata: per esempio una periferica CD-RW mappata in precedenza come
<path>/dev/hdc</path> potrebbe cambiare in <path>/dev/sr0</path>. Mentre questo
di norma non rappresenta un problema, potrebbe dare dei problemi a qualche
applicazione che ha codificato internamente la ricerca dei dispositivi in altre
locazioni. Per esempio, <c>media-sound/rip</c> si aspetta di trovare i dischi in
<path>/dev/cdrom</path>, e ciò diventa un problema se si usa un nuovo kernel e
udev rinomina il proprio dispositivo in <path>/dev/cdrom1</path>.
</p>

<p>
Per aggirare questi problemi, bisogna modificare
<path>/etc/udev/rules.d/70-persistent-cd.rules</path> e assegnare il nome
corretto al dispositivo.
</p>

<p>
Per ulteriori informazioni riguardanti la scrittura di regole per udev,
assicurarsi di leggere la <uri
link="http://www.reactivated.net/udevrules.php">guida</uri> di Daniel Drake.
</p>

</body>
</section>
<section>
<title>Rinominare i dispositivi di rete</title>
<body>

<p>
Talvolta disconnettendo e riconnettendo un disposirivo di rete (come una scheda
USB WiFi) essa può venire rinominata ogni volta, incrementandone il numero di
un'unità.
</p>

<p>
Quando ciò accade, la si vedrà diventare <c>wlan0</c>, <c>wlan1</c>,
<c>wlan2</c>, ecc. Ciò avviene perchè udev sta aggiungendo delle regole
aggiuntive al proprio file delle regole, invece di ricaricare le regole
esistenti. Siccome udev controlla la propria directory delle regole tramite
inotify, bisogna avere il supporto a inotify nella propria configurazione del
kernel:
</p>

<pre caption="Abilitare il supporto a nel kernel">
File systems ---&gt;
    [*] Inotify file change notification support
    [*]   Inotify support for userspace
</pre>

<p>
Ora udev ricorderà correttamente i nomi dei propri dispositivi di rete.
</p>

</body>
</section>
<section>
<title>udev carica i moduli in un ordine non previsto</title>
<body>

<p>
Qualche volta udev carica i moduli in un ordine non indesiderato, non previsto o
abbastanza casuale. Tale comportamento è abbastanza comune in special modo per i
sistemi che hanno dispositivi multipli dello stesso tipo, per esempio
periferiche multimediali. Questo influenza i numeri assegnati ai dispositivi;
per esempio, nelle schede sonore talvolta potrebbero invertirsi di numero.
</p>

<p>
Ci sono alcune soluzioni per correggere la numerazione dei dispositivi e/o
l'ordine di caricamento dei moduli. Idealmente, basterebbe usare i parametri
del modulo per specificare il numero di dispositivo desiderato. Alcuni moduli,
come ALSA, include il parametro "index" (indice, ndt). I moduli che usano il
parametro index possono essere adeguati come mostrato. Questo esempio è per
sistemi con due schede sonore. La scheda con un indice uguale a 0 viene
designata come prima scheda. Una volta che i parametri vengono modificati, i
file di configurazione del modulo devono essere aggiornati.
</p>

<pre caption="Specificare i parametri del modulo">
# <i>echo "option snd-ice1724 index=0" >> /etc/modprobe.d/alsa.conf</i>
# <i>echo "option snd-ymfpci index=1" >> /etc/modprobe.d/alsa.conf</i>
# <i>update-modules</i>
</pre>

<p>
L'esempio precedente è la soluzione preferibile, purtroppo non tutti i moduli
supportano dei parametri come index. Per tali moduli, bisogna forzare il loro
corretto ordine di caricamento. Per prima cosa, bisogna impedire ad udev di
caricare automaticamente i moduli inserendoli in una "lista nera" (blacklist).
Assicurarsi di usare il nome esatto del modulo che viene caricato. Per i
dispositivi PCI, bisogna usare i nomi dei moduli ottenuti dall'output di
<c>lspci -k</c>, disponibile nel pacchetto <c>pciutils</c>. L'esempio seguente
usa i moduli DVB.
</p>

<pre caption="Inserire i moduli nella lista nera">
# <i>echo "blacklist b2c2-flexcop-pci" >> /etc/modprobe.d/dvb</i>
# <i>echo "blacklist budget" >> /etc/modprobe.d/dvb</i>
# <i>update-modules</i>
</pre>

<p>
Successivamente, caricare i moduli nell'ordine corretto. Aggiungerli al file
<path>/etc/conf.d/modules</path> <e>nell'ordine esatto con cui si
desidera vengano caricati</e>.
</p>

<pre caption="Caricare i moduli nell'ordine corretto">
# <i>nano -w /etc/conf.d/modules</i>

modules="<i>budget b2c2-flexcop-pci</i>"
</pre>

</body>
</section>
<section>
<title>Altri problemi</title>
<body>

<p>
Il supporto per i dispositivi framebuffer (<path>/dev/fb/*</path>) è stato
introdotto a partire dalla versione 2.6.6-rc2 del kernel.
</p>

<p>
Nel caso si usasse un kernel precedente alla versione 2.6.4 è necessario
includere esplicitamente il supporto per il filesystem <path>/dev/pts</path>.
</p>

<pre caption="Abilitare il filesystem /dev/pts">
File systems ---&gt;
  Pseudo filesystems ---&gt;
    [*] /dev/pts file system for Unix98 PTYs
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Risorse &amp; Riconoscimenti</title>
<section>
<body>

<p>
La conferenza sul sistema udev tenuta da Greg Kroah-Hartman (IBM Corporation) al
Linux Symposium (Ottawa, Canada - 2003) è un ottimo punto di partenza per una
buona comprensione di udev.
</p>

<p>
<uri
link="http://webpages.charter.net/decibelshelp/LinuxHelp_UDEVPrimer.html">
Decibel's UDEV Primer</uri> è un documento molto approfondito riguardo all'uso
di udev su Gentoo.
</p>

<p>
<uri link="http://www.reactivated.net/udevrules.php">Writing udev rules</uri>,
scritto dallo sviluppatore di Gentoo Daniel Drake, è un documento eccellente per
imparare come personalizzare la proprio installazione di udev.
</p>

</body>
</section>
</chapter>
</guide>
