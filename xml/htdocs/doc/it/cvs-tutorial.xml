<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/cvs-tutorial.xml,v 1.14 2008/06/04 19:50:16 scen Exp $ -->

<guide link="/doc/it/cvs-tutorial.xml" lang="it">
<title>Guida al CVS di Gentoo Linux</title>

<author title="Autore">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Redazione">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Traduzione">
  <mail link="ilmalcom@supereva.it">Stefano Calzavara</mail>
</author>
<author title="Traduzione">
  <mail link="stefano.lucidi@gentoo-italia.org">Stefano Lucidi</mail>
</author>
<author title="Traduzione">
  <mail link="veni78@email.it" >Andrea Venino</mail>
</author>

<abstract>
Questa guida introduce i lettori al CVS, il Concurrent Versions System, usato
dagli sviluppatori di tutto il mondo per produrre programmi in modo flessibile
ed in collaborazione con altri. Realizzata per utenti alle prime armi, questa
guida darà rapidamente sia agli utenti che ad i nuovi sviluppatori una rapida
infarinatura. Sia che vogliate fare uso del CVS per provare gli ultimi sorgenti
di un certo programma, sia che vogliate iniziare ad usare il CVS per sviluppare,
questo documento fa al caso vostro.
</abstract>

<version>1.9</version>
<date>2008-05-20</date>

<chapter>
<title>Introduzione</title>
<section>
<title>Struttura del documento</title>
<body>

<p>
Questa guida è divisa in due parti, la prima mostra come usare il CVS per i non
sviluppatori, per esempio insegna come scaricare i sorgenti dal CVS e tenerli
aggiornati. La seconda parte vi spiega come fare uso del CVS da sviluppatore,
mostrandovi come modificare, aggiungere e rimuovere file dal CVS e svolgere
altri incarichi di manutenzione. Se non avete mai preso in mano nulla sui CVS, è
raccomandato iniziare dalla prima sezione e procedere poi alla seconda; se avete
un'esperienza basilare, potrete trovare tutto ciò che vi serve nella seconda
sezione, ma potrebbe esservi utile un ripasso della prima parte.
</p>

</body>
</section>
<section>
<title>Cos'è il CVS e come funziona?</title>
<body>

<p>
Il CVS è un sistema client/server che permette agli sviluppatori di raccogliere
i propri progetti in un archivio centrale chiamato repository (letteralmente
magazzino, si è prediletto il termine inglese per il suo frequente utilizzo
NdT). Usando il client CVS, gli sviluppatori possono applicare cambiamenti al
repository. Il repository tiene traccia di ogni cambiamento effettuato su ogni
singolo file, creando un archivio completo dell'evoluzione dello sviluppo del
programma. Gli sviluppatori possono richiedere vecchie versioni di un
particolare file sorgente, vedere i log dei cambiamenti e svolgere altri utili
compiti quando richiesto.
</p>

</body>
</section>
<section>
<title>Il ruolo del CVS</title>
<body>

<p>
Molti progetti opensource possiedono un proprio server CVS,  usato dagli
sviluppatori come archivio centrale di tutto il lavoro. Gli sviluppatori spesso
migliorano i sorgenti quotidianamente e di solito i programmatori sono sparsi in
giro per il mondo, così il CVS fornisce il meccanismo necessario per unire i
loro progetti in un archivio centralizzato. Il CVS costituisce il "collante" che
permette a questi sviluppatori di variare il codice sorgente senza pestarsi i
piedi, senza perdere dati importanti ed impedendo disguidi su aggiornamenti
importanti da parte di altri.
</p>

</body>
</section>
<section>
<title>CVS -- gli ultimi sorgenti degli sviluppatori</title>
<body>

<p>
Quando gli sviluppatori saranno pronti, essi scaricheranno parte del loro
lavoro dal CVS, lo comprimeranno sotto forma di un file .tar.gz e lo
rilasceranno come una nuova versione ufficiale del programma. Comunque, l'ultima
versione ufficiale spesso non è abbastanza aggiornata per una varietà di
possibili motivi. Nella prima sezione di questa guida, vi mostrerò come
utilizzare il CVS a questo scopo -- scaricare l'ultima versione dei sorgenti ad
uso personale.
</p>

</body>
</section>
<section>
<title>Installare CVS</title>
<body>

<p>
Per installare cvs, digitate <c>emerge cvs</c>:
</p>

<pre caption="Installare CVS">
# <i>emerge cvs</i>
</pre>

</body>
</section>

<section>
<title>CVSROOT</title>
<body>

<p>
Prima di iniziare, ci sono alcune nozioni basilari sul CVS che dovreste sapere.
La prima è che per connettersi ad un repository, prima di tutto dovrete
conoscere un percorso chiamato "CVSROOT". Esso è una stringa, come un indirizzo
internet, che dice al comando cvs dove si trova il repository e come connettersi
ad esso. Giusto per rendere il tutto più interessante, CVS ha un certo numero di
formati per il CVSROOT, che dipendono dal fatto che il repository sia locale o
remoto e dal metodo utilizzato per connettersi ad esso. Ecco alcuni esempi di
CVSROOTs, seguiti da spiegazioni.
</p>

</body>
</section>
<section>
<title>Un CVSROOT locale</title>
<body>

<pre caption="Impostare CVSROOT">
CVSROOT=/var/cvsroot
</pre>

<p>
Ecco un esempio di CVSROOT locale, userete un percorso come questo per
connettersi ad un repository presente sul vostro computer in /var/cvsroot o ad
un repository montato via NFS in /var/cvsroot.
</p>

</body>
</section>
<section>
<title>Un CVS di un server remoto con password</title>
<body>

<pre caption="Impostare CVS con autenticazione">
CVSROOT=:pserver:cvs@foo.bar.com:/var/cvsroot
</pre>

<p>
Ecco un esempio di CVSROOT per un repository remoto che esiste sul dominio
foo.bar.com e si trova nella directory /var/cvsroot su quella macchina. La
stringa ":pserver:" dice al client di connettersi a questo server usando il
protocollo CVS password, presente nel CVS. Di solito, i repository pubblici
usano questo protocollo per permettere accesso anonimo agli utenti.
</p>

</body>
</section>
<section>
<title>Un CVSROOT remoto che fa uso di rsh/ssh</title>
<body>

<pre caption="RSH/SSH CVSROOT">
CVSROOT=drobbins@foo.bar.com:/data/cvs
</pre>

<p>
Ecco un esempio di CVSROOT che sfrutta i protocolli RSH o SSH; in questo
esempio, il server CVS tenterà di accedere al repository su foo.bar.com usando
l'account drobbins. Se la variabile CVS_RSH è settata a "ssh", allora il nostro
client cvs tenterà di utilizzare ssh per connettersi, altrimenti sarà utilizzato
rsh. Il metodo d'accesso ssh è apprezzato da quelli che si preoccupano della
sicurezza, comunque né il sistema RSH né quello SSH permettono il login anonimo.
Per utilizzarli dovrete avere un account su foo.bar.com.
</p>

</body>
</section>
<section>
<title>Altri due concetti...</title>
<body>

<p>
Oltre al CVSROOT, dovrete conoscere anche il nome del modulo (insieme di
sorgenti) cui vorrete accedere, così come la password per il login anonimo su un
server che fa uso del protocollo CVS password. Contrariamente a quanto avviene
per un ftp anonimo, non c'è un formato "standard" per la password del CVS, così
dovrete farvela dare da chi mantiene il sito web o dagli stessi sviluppatori.
Una volta avute tutte queste informazioni sarete pronti per cominciare.
</p>

</body>
</section>

<section>
<title>Interagire col CVS, parte 1</title>
<body>

<p>
Ottenere i sorgenti è un processo diviso in due fasi. Prima di tutto, accediamo
al server password, quindi scarichiamo i sorgenti con il comando
<c>checkout</c>. Ecco un esempio di un set di comandi utilizzati per controllare
gli ultimi sorgenti di Samba, un famoso progetto di integrazione
UNIX/Windows.
</p>

<pre caption="Impostare CVSROOT">
# <i>export CVSROOT=:pserver:cvs@pserver.samba.org:/cvsroot</i>
</pre>

<p>
Il primo comando assegna un valore alla variabile CVSROOT, se non settate
questa variabile i prossimi due comandi richiederanno anche un
<c>-d:pserver:cvs@pserver.samba.org:/cvsroot</c> a seguito del comando
<c>cvs</c>. Esportare questa variabile ci risparmia un po' di battitura.
</p>

</body>
</section>
<section>
<title>Interagire con CVS, parte 2</title>
<body>

<p>
Ecco i comandi necessari per scaricare una copia degli attuali sorgenti degli
sviluppatori. Probabilmente vorrete passare al prossimo paragrafo per leggere la
spiegazione di questi comandi e poi tornare qui:
</p>

<pre caption="Effettuare il check dei sorgenti">
# <i>cvs login</i>
(Accesso a cvs@pserver.samba.org)
CVS password: <comment>(inserire la password)</comment>

# <i>cvs -z5 co samba</i>
U samba/COPYING
U samba/Manifest
U samba/README
U samba/Read-Manifest-Now
U samba/Roadmap
U samba/WHATSNEW.txt
<comment>(questa è solo una parte dell'output completo)</comment>
</pre>

</body>
</section>
<section>
<title>Interagire col CVS -- spiegazione</title>
<body>

<p>
Il primo comando ci connette al pserver ed il secondo dice al nostro client CVS
di controllare il modulo samba utilizzando una compressione gzip di livello 5
per velocizzare il trasferimento. Per ogni nuovo file creato localmente, il cvs
scrive a schermo "U [percorso]" ad indicare che quello specifico file è stato
aggiornato sul disco.
</p>

</body>
</section>

<section>
<title>Controllo completo</title>
<body>

<p>
Una volta che il controllo è stato completato, noterete una directory "samba"
nel percorso dove stavate lavorando che conterrà gli ultimi sorgenti. Noterete
anche che tutte le directory hanno una sottocartella "CVS" all'interno -- CVS
raccoglie informazioni sull'account in queste directory e possono
tranquillamente venire ignorate. D'ora in avanti, non dobbiamo preoccuparci di
aver settato la variabile CVSROOT né abbiamo bisogno bisogno di specificarla
nella riga di comando, perché ora è contenuta dentro tutte quelle directory
"CVS". Ricordate -- avrete bisogno della variabile CVSROOT solo per l'iniziale
accesso e per il controllo.
</p>

</body>
</section>

<section>
<title>Aggiornare i sorgenti</title>
<body>

<p>
Beh, ci siamo -- nuovi sorgenti! Adesso che avete i sorgenti, potete andare
avanti compilandoli ed installandoli, studiandoli o facendovi quello che volete.
</p>

<p>
Ogni tanto vorrete mettere in pari la vostra directory dei sorgenti con la
versione corrente del CVS. Per farlo, non avete bisogno di accedere di nuovo al
pserver; anche le vostre informazioni per il login sono contenute all'interno
delle cartelle "CVS". Prima di tutto, entrate nella directory principale (in
questo caso "samba") e scrivete:
</p>

<pre caption="Aggiornare i propri sorgenti">
# <i>cvs update -dP</i>
</pre>

</body>
</section>
<section>
<title>Un'occhiata all'aggiornamento del cvs, parte 1</title>
<body>

<p>
Se ci sono nuovi file, cvs stamperà a schermo una linea "U [percorso]" per
ognuno di essi man mano che li aggiorna. Inoltre, se avete compilato i sorgenti,
probabilmente troverete un sacco di linee "? [percorso]"; questi sono file che
il cvs non individua come provenienti dal repository remoto.
</p>

</body>
</section>
<section>
<title>Un'occhiata all'aggiornamento del cvs, parte 2</title>
<body>

<p>
Osservate inoltre le due opzioni passate alla linea di comando per
l'aggiornamento del cvs, "-d" dice di creare le nuove directory che possono
essere state aggiunte al repository (ciò di norma non viene fatto) e "-P" dice
al cvs di rimuovere tutte le cartelle vuote dalla copia scaricata. "-P" è una
buona idea, perché il cvs ha la tendenza di generare col tempo un sacco di
directory vuote (una volta usate, ora non più).
</p>

<p>
Quando dovete semplicemente scaricare gli ultimi sorgenti, questo è tutto quel
che dovete conoscere. Ora vediamo come interagire col CVS da sviluppatore.
</p>

</body>
</section>
</chapter>

<chapter>
<title>CVS per sviluppatori</title>
<section>
<title>Modificare file</title>
<body>

<p>
Come sviluppatori, avrete bisogno di modificare i file sul CVS, per fare ciò
fate semplicemente i cambiamenti appropriati alla vostra copia in locale del
repository. I cambiamenti che fate ai sorgenti non sono applicati al repository
remoto finché non dite al cvs di farlo. Quando avete verificato che tutte le
modifiche funzionano correttamente e siete pronti per applicarle, seguite questo
procedimento diviso in due passi. Prima di tutto, aggiornate i sorgenti
scrivendo il seguente comando nella cartella principale:
</p>

<pre caption="Aggiornare sorgenti e directory">
# <i>cvs update -dP</i>
</pre>

</body>
</section>
<section>
<title>Il CVS unisce i cambiamenti degli altri ai nostri</title>
<body>

<p>
Come abbiamo visto prima, l'aggiornamento del cvs metterà in pari i vostri
sorgenti con la versione contenuta nel repository -- ma cosa accade ai
cambiamenti fatti? Non preoccupatevi, essi non sono scartati. Se un altro
sviluppatore applica modifiche ad un file che non avete toccato, i vostri file
locali verranno aggiornati per essere in pari con la versione nel
repository.
</p>

<p>
E se avete modificato le linee 1-10 di un file locale ed un altro sviluppatore
ha cancellato le linee 40-50, ne ha aggiunte 12 alla fine, modificato le linee
30-40 e quindi applicato i cambiamenti al repository prima di voi, cvs
intelligentemente applicherà queste modifiche nella vostra copia in locale
facendo in modo che i cambiamenti fatti da voi non siano persi. Questo permette
a due o più sviluppatori di lavorare su parti differenti dello stesso file allo
stesso momento.
</p>

</body>
</section>
<section>
<title>La combinazione non è perfetta</title>
<body>


<p>
Comunque, se due o più sviluppatori hanno applicato cambiamenti alla <e>stessa
regione dello stesso file</e>, le cose diventano un pochino più complicate. Se
ciò accade, allora cvs vi dirà che c'è stato un conflitto. Il lavoro non sarà
perso, ma sarà richiesto un intervento manuale, perché ora cvs richiede un input
su come combinare i cambiamenti contrastanti.
</p>

</body>
</section>
<section>
<title>L'invio dei cambiamenti</title>
<body>

<p>
Vedremo esattamente come i conflitti possano essere risolti rapidamente, ma per
ora mettiamo caso che non vi siano problemi dopo che avete scritto "cvs update
-dP" -- di solito non ce ne sono. Senza conflitti, i vostri sorgenti locali
sono aggiornati e siete pronti ad inviare i vostri cambiamenti al repository
scrivendo il seguente comando nella directory principale:
</p>

<pre caption="Effettuare il commit dei cambiamenti">
# <i>cvs commit</i>
</pre>

</body>
</section>
<section>
<title>Cosa succede inviando i cambiamenti</title>
<body>

<p>
"cvs commit" non applica <e>soltanto</e> cambiamenti al repository.Prima di
farlo effettivamente, cvs aprirà il vostro editor di testo preferito così che
possiate scrivere una breve descrizione delle modifiche. Una volta che avrete
inserito i vostri commenti, salvate il file ed uscite, i cambiamenti ed i
commenti saranno applicati al repository remoto e saranno disponibili per gli
altri sviluppatori.
</p>

</body>
</section>
<section>
<title>Vedere i log</title>
<body>

<p>
E' davvero facile vedere tutto l'archivio dei cambiamenti di un certo file,
corredato dei commenti che gli sviluppatori (voi compresi) avete scritto. Per
vedere queste informazioni, scrivete:
</p>

<pre caption="Visualizzare le informazioni di log">
# <i>cvs log myfile.c</i>
</pre>

<p>
Il comando "cvs log" è ricorsivo, così se volete vedere le informazioni per
un'intera directory, semplicemente entrateci e scrivete:
</p>

<pre caption="Visualizzare le informazioni di log con un paginatore">
# <i>cvs log | less</i>
</pre>

</body>
</section>
<section>
<title>Opzioni per l'invio</title>
<body>

<p>
Potrete volere utilizzare un altro editor piuttosto che quello che il cvs apre
di norma quando scrivete "cvs commit". In questo caso, semplicemente settate la
variabile EDITOR al nome dell'editor che volete utilizzare. Mettere un opzione
come questa nel vostro <path>~/.bashrc</path> potrebbe essere una buona idea:
</p>

<pre caption="Impostare il proprio editor">
export EDITOR=jpico
</pre>

<p>
In alternativa, potete specificare un messaggio di log come opzione nella linea
di comando, così che cvs non abbia bisogno di caricare l'editor:
</p>

<pre caption="Effettuare il commit dei cambiamenti con un breve informazione di
log">
# <i>cvs commit -m 'Ho sistemato dei piccoli errori in portage.py'</i>
</pre>

</body>
</section>
<section>
<title>Il file .cvsrc</title>
<body>

<p>
Prima di studiare altri comandi di cvs, raccomando di preparare un file
<path>~/.cvsrc</path>. Creandolo, potrete dire al cvs di utilizzare le opzioni
preferite di norma da voi, così non avrete bisogno di ricordarvi di scriverle
ogni volta. Questo è un utile esempio (raccomandato) di <path>.cvsrc</path>:
</p>

<pre caption="Impostazioni predefinite raccomandate">
cvs -q
diff -u -b -B
checkout -P
update -d -P
</pre>

</body>
</section>

<section>
<title>Il file .cvsrc, continua</title>
<body>

<p>
Oltre a definire utili opzioni per alcuni comandi cvs, la prima linea di
<path>.cvsrc</path> attiva la modalità silenziosa per il cvs, che ha il
beneficio principale di rendere l'output degli <c>aggiornamenti del cvs</c> più
conciso e leggibile. Inoltre, dopo che avrete sistemato questo .cvsrc nel
percorso appropriato, potrete scrivere <c>cvs update</c> invece di <c>cvs update
-dP</c>.
</p>

</body>
</section>

<section>
<title>Aggiungere un file al repository</title>
<body>

<p>
E' davvero facile aggiungere un file sorgente al CVS. Dapprima, create il file
con il vostro editor di testo preferito, quindi scrivete:
</p>

<pre caption="Aggiungere un file">
# <i>cvs add myfile.c</i>
cvs server: use 'cvs commit' to add this file permanently
</pre>

<p>
Questo dice al cvs di aggiungere questo file al repository la prossima volta
che farete un <c>cvs commit</c>. Fino ad allora, gli altri sviluppatori non
potranno vederlo.
</p>

</body>
</section>
<section>
<title>Aggiungere una directory al repository</title>
<body>

<p>
Aggiungere una directory al CVS è abbastanza simile ad aggiungere un file:
</p>

<pre caption="Aggiungere una directory">
# <i>mkdir foo</i>
# <i>cvs add foo</i>
La directory /var/cvsroot/mycode/foo è stata aggiunta al repository.
</pre>

<p>
Diversamente da quando aggiungete un file, quando aggiungete una directory essa
appare immediatamente nel repository e non è necessario un cvs commit. Una volta
che avrete aggiunto una directory locale al cvs, noterete che una cartella "CVS"
è stata creata all'interno di essa come contenitore per le informazioni
sull'accesso cvs. Così potete facilmente dire se una certa directory è stata
aggiunta al cvs guardando nella cartella "CVS".
</p>

</body>
</section>
<section>
<title>Note per le aggiunte al cvs</title>
<body>

<p>
Oh, potevate indovinarlo, prima di aggiungere un file o una directory al
repository, dovete assicurarvi che la directory principale sia già stata
aggiunta al CVS, altrimenti riceverete un errore come questo:
</p>

<pre caption="Aggiungere un file, ricevendo però un errore">
# <i>cvs add myfile.c</i>
cvs add: cannot open CVS/Entries for reading: No such file or directory
cvs [add aborted]: no repository
</pre>

</body>
</section>

<section>
<title>Prendere familiarità con "cvs update", parte 1</title>
<body>

<p>
Prima di vedere come risolvere i conflitti, facciamo pratica con l'output del
comando "cvs update". Se avete creato un file ~/.cvsrc che contiene una linea
"cvs -q", noterete che l'output del comando è molto più facile da leggere. "cvs
update" vi informa di cosa fa e ve lo mostra scrivendo un singolo carattere, uno
spazio ed il nome di un file, come nell'esempio:
</p>

<pre caption="Aggiornare CVS">
# <i>cvs update -dP</i>
? distfiles
? packages
? profiles
</pre>

</body>
</section>
<section>
<title>Prendere familiarità con "cvs update", parte 2</title>
<body>

<p>
"cvs update" usa il carattere "?" per dire che non sa nulla di quel file che
trova nella copia locale del repository. Esso non è ufficialmente parte del
repository. Ecco una lista di tutti gli altri caratteri informativi di cui fa
uso CVS:
</p>

<pre caption="Messaggio d'informazione: U">
U [path]
</pre>

<p>
Usato quando un nuovo file è creato nel repository locale o un file non toccato
da voi è stato aggiornato.
</p>

<pre caption="Messaggio d'informazione: A">
A [path]
</pre>

<p>
Questo file è in lista per essere aggiunto e verrà ufficialmente messo nel
repository quando si eseguirà un <c>cvs commit</c>.
</p>

</body>
</section>
<section>
<title>Prendere familiarità con "cvs update", parte 3</title>
<body>

<pre caption="Messaggio d'informazione: R">
R [path]
</pre>

<p>
Similmente ad una "A", una "R" vi fa sapere che il file è in lista per essere
rimosso dal repository al prossimo <c>cvs commit</c>.
</p>

<pre caption="Messaggio d'informazione: M">
M [path]
</pre>

<p>
Significa che questo file è stato modificato da voi; inoltre è possibile che
nuovi cambiamenti dal repository siano stati combinati con successo nel
file.
</p>

<pre caption="Messaggio d'informazione: C">
C [path]
</pre>

<p>
Il carattere "C" indica che questo file è in conflitto e richiede una
sistemazione manuale prima di poter eseguire "cvs commit".
</p>

</body>
</section>
<section>
<title>Introduzione alla risoluzione dei conflitti</title>
<body>

<p>
Ora vediamo come risolvere un conflitto. Sono molto coinvolto nel progetto
Gentoo Linux ed abbiamo il nostro server cvs su cvs.gentoo.org. Noi sviluppatori
spendiamo la maggior parte del nostro tempo a lavorare sui sorgenti del modulo
"gentoo-x86". All'interno di esso, abbiamo un file chiamato "Changelog" che
ospita (avete indovinato!) una descrizione dei cambiamenti maggiori apportati ai
file nel repository.
</p>

</body>
</section>
<section>
<title>Un esempio di conflitto</title>
<body>

<p>
Poiché questo file è modificato quasi ogni volta che uno sviluppatore applica
un importante cambiamento al cvs, è una sorgente primaria di conflitti -- eccone
un esempio. Ammettiamo che io abbia aggiunto queste righe all'inizio del
Changelog:
</p>

<pre caption="Voce nel Changelog">
data 25 Feb 2001

La mia aggiunta
</pre>

<p>
Comunque, diciamo che prima che io possa inviare queste 3 righe, un altro
sviluppatore aggiunga quanto segue in cima al Changelog ed invii i cambiamenti:
</p>

<pre caption="Altra voce nel Changelog">
data 25 Feb 2001

L'aggiunta di un altro sviluppatore
</pre>

</body>
</section>
<section>
<title>Continuazione sull'esempio di conflitto</title>
<body>

<p>
Ora, quando eseguo <c>cvs update -dP</c> (come dovreste fare prima di ogni
invio), il cvs non è capace di combinare questi cambiamenti nella mia copia
locale del Changelog, perché abbiamo entrambi aggiunto linee alla stessa parte
del file -- come può il cvs sapere che versione usare? Così ricevo quest'errore:
</p>

<pre caption="Errore in CVS">
RCS file: /var/cvsroot/gentoo-x86/ChangeLog,v
retrieving revision 1.362
retrieving revision 1.363
Merging differences between 1.362 and 1.363 into ChangeLog
rcsmerge: warning: conflicts during merge
cvs server: conflicts found in ChangeLog
C ChangeLog
</pre>

</body>
</section>
<section>
<title>Risoluzione dei conflitti, parte 1</title>
<body>

<p>
Argh -- un conflitto! Fortunatamente, correggerlo è semplice. Se apro il mio
editor di testo favorito, noto queste linee in cima al Changelog:
</p>

<pre caption="Conflitto nel Changelog">
&lt;&lt;&lt;&lt;&lt;&lt;&lt; ChangeLog
data 25 Feb 2001

La mia aggiunta

=======
data 25 Feb 2001

L'aggiunta di un altro sviluppatore

&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1.363
</pre>

</body>
</section>
<section>
<title>Risoluzione dei conflitti, parte 2</title>
<body>

<p>
Anziché prediligere una versione, il cvs le ha aggiunte entrambe al file
Changelog e le ha circondate con speciali separatori per far notare chiaramente
il conflitto. Ora dipende da me sostituire questa sezione con il resto che
<e>dovrebbe</e> apparire nel ChangeLog; in questo caso, la sostituzione non è
nessuna della due versioni, ma una combinazione di entrambe:
</p>

<pre caption="Voce nel Changelog">
data 25 Feb 2001

La mia aggiunta

L'aggiunta di un altro sviluppatore
</pre>

<p>
Ora che ho sostituito la sezione del file in conflitto in modo appropriato e
rimosso i delimitatori, posso inviare i miei cambiamenti al cvs senza problemi.
</p>

</body>
</section>
<section>
<title>Trucchetti per la risoluzione dei conflitti</title>
<body>

<p>
Quando dovete modificare un file a causa di conflitti, assicuratevi di
controllarli tutto per individuare tutti i problemi; se vi siete dimenticati di
correggere un conflitto, il cvs non vi permettere di inviare finché non sarà
risolto! E' anche ovviamente molto importante rimuovere gli speciali limitatori
che il cvs ha aggiunto al file. Un altro suggerimento -- se fate un errore
mentre sistemate il conflitto e poi ("D'oh!") per sbaglio salvate le modifiche,
potete trovare una copia del vecchio file in ".#nomefile.versione".
</p>

</body>
</section>
<section>
<title>Rimuovere un file</title>
<body>

<p>
Ora è il momento di imparare l'ultima nozione sul CVS -- rimuovere dei file
dal repository. E' un processo suddiviso in due fasi: dapprima, cancellate il
file dalla vostra copia locale dei sorgenti e quindi utilizzare il comando
<c>cvs remove</c>:
</p>

<pre caption="Rimuovere un file">
# <i>rm myoldfile.c</i>
# <i>cvs remove myoldfile.c</i>
</pre>

</body>
</section>
<section>
<title>Rimuovere un file, continuazione</title>
<body>

<p>
Il file sarà quindi messo in elenco per la rimozione la prossima volta che
eseguite un invio. Una volta fatto ciò, il file sarà ufficialmente cancellato
dalla versione corrente del repository. Comunque, il cvs non eliminerà questo
file e terrà un archivio completo dei suoi contenuti e delle sue modifiche, se
in casi vi servisse ancora in futuro. Questo è solo uno dei tanti modi con cui
il cvs protegge il vostro prezioso codice sorgente.
</p>

<p>
<c>cvs remove</c> è ricorsivo, ciò vuol dire che potete cancellare un gruppo di
file e poi lanciare il comando senza argomenti dalla directory principale. Fare
ciò metterà tutti i file cancellati in lista per essere rimossi al prossimo
invio.
</p>

</body>
</section>

<section>
<title>Rimuovere una directory</title>
<body>

<p>
Se volete rimuovere un'intera directory, vi raccomando il seguente
procedimento. Dapprima, cancellate fisicamente tutti i file al suo interno ed
eseguite "cvs remove":
</p>

<pre caption="Rimuovere una directory">
# <i>rm *.c</i>
# <i>cvs remove</i>
</pre>

</body>
</section>
<section>
<title>Rimuovere una directory, continuazione</title>
<body>

<p>
Quindi inviate i cambiamenti:
</p>

<pre caption="Effettuare il commit delle modifiche">
# cvs commit
</pre>

<p>
Ecco il trucco, fate quanto segue per cancellare la directory:
</p>

<pre caption="Rimuovere una directory">
# <i>cd ..</i>
# <i>cvs remove mydir</i>
# <i>rm -rf mydir</i>
</pre>

<p>
Notate che rimuovere una directory non richiede un "cvs commit" -- le cartelle
sono aggiunte e rimosse dal repository in tempo reale.
</p>

</body>
</section>
<section>
<title>Recuperare una versione precedente</title>
<body>

<p>
CSV non potrebbe essere considerato un buon sistema di controllo della versione
se non fosse possibile richiamare versioni precedenti dal repository. È
possibile recuperare file basandosi su una specifica data, e ovviamente anche su
un numero di revisione. L'esempio seguente richiama la revisione 1.202 di
<path>file</path> e sovrascrive la versione corrente di <path>file</path>:
</p>

<pre caption="Recuperare un file basandosi sul numero di revisione">
$ <i>cvs update -p -r 1.202 file &gt; file</i>
</pre>

<p>
E' possibile richiamare file basandosi sulla data utilizzando il parametro
<c>-D</c>: sono valide date intere (o timestamp), ma anche parametri relativi
come <e>yesterday</e> (ieri, NdT) o <e>last week</e> (ultima settimana, NdT).
</p>
</body>

</section>
<section>
<title>Fine!</title>
<body>

<p>
L'introduzione al CVS è completa: l'autore spera che questo tutorial sia stato
utile. Sul CVS c'è molto più di quanto si sia potuto coprire in questa guida
introduttiva, ma per fortuna ci sono un po' di ottimi siti che è possibile
consultare per aumentare le proprie conoscenze:
</p>

<ul>
  <li>
    <uri>http://www.cvshome.org</uri> è il sito dello sviluppo del CVS, offre
    molta documentazione, tra cui <uri
    link="http://www.cvshome.org/docs/manual">quella ufficiale</uri>.
  </li>
  <li>
    Il <uri link="http://www.durak.org/cvswebsites/">CVS Version Control for Web
    Site Projects</uri> contiene buone informazioni su come usare il CVS per
    sviluppare siti web.
  </li>
  <li>
    Karl Fogel ha scritto un libro chiamato <uri
    link="http://cvsbook.red-bean.com/">Open Source Development with CVS</uri>.
    Alcuni capitoli sono disponibili gratuitamente nel sito.
  </li>
  <li>
    <uri link="http://www.freebsd.org/projects/cvsweb.html">cvsweb</uri> è un
    ottimo script CGI che fornisce un'interfaccia web al vostro repository;
    davvero comodo.
  </li>
  <li>
    <uri link="http://www.loria.fr/~molli/cvs-index.html">CVS Bubbles</uri> ha
    un sacco di ottima documentazione, tra cui un CVS FAQ-o-matic.
  </li>
</ul>

</body>
</section>
<section>
<title>Su questo documento</title>
<body>

<p>
La versione originale di questo articolo è stata pubblicata per la prima volta
su IBM developerWorks, ed è di proprietà di Westtech Information Services.
Questo documento è una versione aggiornata dell'articolo originale, e contiene
vari miglioramenti fatti dal team di documentazione Gentoo Linux.
</p>

</body>
</section>
</chapter>
</guide>
