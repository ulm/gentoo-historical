<?xml version='1.0' encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/it/gentoo-sparc-install.xml">
<title>Guida all'installazione di Gentoo Linux su Sparc/Sparc64</title>
<author title="Mantainer"><mail link="murphy@gentoo.org">Maarten Thibaut</mail></author>
<author title="Editore"><mail link="atom.stephens@ohiou.edu">Adam Stephens</mail></author>
<author title="Editore"><mail link="manson@gentoo.org">Rodney Rees</mail></author>
<author title="Editore"><mail link="zhware@gentoo.org">Stoyan Zhekov</mail></author>
<author title="Traduttore"><mail link="blaze@rootshell.be">Lino Gambella</mail></author>

<author title="Traduttore" >
Team Italiano
</author>

<abstract>Questa è una guida all'installazione di Gentoo Linux su macchine basate su
processori Sparc64. Se trovate errori o omissioni per favore mandate un'email al mantainer o 
a un editore.</abstract>

<version>0.4.1</version>
<date>31 Marzo 2003</date>
<chapter>
<title>Hardware Supportato</title>
<section>
<body>
<p>* Macchine multiprocessore. Il supporto dipende dal kernel, queste piattaforme sono come le
macchine a processore singolo per i nostri scopi. Le immagini di boot hanno tipicamente il 
supporto SMP disabilitato per ridurre le dimensioni del kernel.
</p>
<p>
attenzione: Molte di queste piattaforme non sono state testate. Lo sviluppo è gestito
da una manciata di persone. I report di installazioni non funzionanti è benvenuto nelle
nostre mailing lists.
</p>
</body>
</section>
<section>
<title>Supportate dal progetto UltraLinux a 32-bit (sparc)</title>
<body>
<p>
<table>
<tr><th>* Architettura Sun4c (*):</th></tr>
<tr><ti>    o SPARCstation SLC (4/20)</ti></tr>
<tr><ti>    o SPARCstation ELC (4/25)</ti></tr>
<tr><ti>    o SPARCstation IPC (4/40)</ti></tr>
<tr><ti>    o SPARCstation IPX (4/50)</ti></tr>
<tr><ti>    o SPARCstation/server 1 (4/60)</ti></tr>
<tr><ti>    o SPARCstation/server 1+ (4/65)</ti></tr>
<tr><ti>    o SPARCstation/server 2 (4/75)</ti></tr>
<tr><th>* Architettura Sun4d:</th></tr>
<tr><ti>    o SparcCenter 2000</ti></tr>
<tr><th>* Architettura Sun4m:</th></tr>
<tr><ti>    o SPARCclassic</ti></tr>
<tr><ti>    o SPARCstation LC (4/15)</ti></tr>
<tr><ti>    o SPARCstation LX (4/30)</ti></tr>
<tr><ti>    o SPARCstation 4</ti></tr>
<tr><ti>    o SPARCstation/server 5 (70, 85, 110, and 170(**) Mhz)</ti></tr>
<tr><ti>    o SPARCstation/server 10 (con la maggior parte di schede processore MBUS)</ti></tr>
<tr><ti>    o SPARCstation/server 20 (con la maggior parte di schede processore MBUS)</ti></tr>
<tr><ti>    o JavaStation 1 (***)</ti></tr>
<tr><ti>    o JavaStation 10 (***)</ti></tr>
<tr><ti>    o JavaStation E (***)</ti></tr>
<tr><ti>    o JavaEngine 1 (***)</ti></tr>
</table>
</p><p>
(*)   Ci sono molti problemi del kernel dovuti alla gestione della memoria con le sun4c. Ci 
stiamo lavorando.
</p><p>
(**)    La SPARC 5 a 170MHz (conosciuta come TurboSPARC) è supportata solo nelle nuove 
release del kernel. Non c'è troppo sviluppo attivo e UltraLinux in questo processore non è
molto stabile.
</p><p>
(***) Guarda la sezione corrispondente più avanti in questa sezione.
</p><p>
<table>
<tr><th>* I seguenti moduli MBUS funzionano:</th></tr>
<tr><ti>    o SuperSPARC Modello 20, 30, 40, 402, 41, 412, 51, 512, 514, 52, 54,61, 612, 71, 712, 81</ti></tr>
<tr><ti>    o Tutti i moduli HyperSPARC</ti></tr>
<tr><ti>    o Moduli Cypress</ti></tr>
</table>
</p>
</body>
</section>
<section>
<title>Supportati dal progetto UltraLinux a 64-bit (sparc64)</title>
<body>
<p>
<table>
<tr><th>* Architettura Sun4u:</th></tr>
<tr><ti>    o Workstation basate su UltraSPARC Sbus : Ultra1, Ultra2, Ultra1 Creator, Ultra2 Creator</ti></tr>
<tr><ti>    o Server basati su UltraSPARC Sbus: Netra i, Enterprise 1, 2, 150</ti></tr>
<tr><ti>    o Grossi server basati su UltraSPARC Sbus: Enterprise 3000, 3500, 4000, 4500, 5000, 6000, 6500, 10000</ti></tr>
<tr><ti>    o Computer basati su schede UltraSPARC PCI: SPARCengine CP1400, CP1500 (*)</ti></tr>
<tr><ti>    o Workstation basate su UltraSPARC PCI: Ultra30, UltraAXe, UltraAXi, UltraAXmp, Ultra5, Ultra10, Ultra60, Ultra80, SunBlade 100, SunBlade 1000</ti></tr>
<tr><ti>    o Server basati su UltraSPARC PCI: Netra X1(**), Netra T series(***), Enterprise 250, 450</ti></tr>
</table>
</p><p>
(*)  Queste schede funzionano senza nessuna modifica, vedete anche (***)
</p><p>(**) Completamente supportate tranne le interfacce di rete.
</p><p>(***) Controllate il Documento di Eric Browser's: Sun Microsystems CP1400/CP1500/Netra-T1 Support.
</p>
</body>
</section>
<section>
<title>Dispositivi</title>
<body>
<p>
<table>
<tr><th>* SCSI:</th></tr>
<tr><ti>    o Sun/PTI Qlogic SCSi cards</ti></tr>
<tr><ti>    o Schede di espansione SCSI/ether Sbus</ti></tr>
<tr><ti>    o SCSI CD-ROM</ti></tr>
<tr><ti>    o SCSI Tape</ti></tr>
<tr><th>* SCSI di terze parti(*):</th></tr>
<tr><ti>    o NCR53c8xx</ti></tr>
<tr><ti>    o Adaptec SCSI</ti></tr>
<tr><ti>    o Qlogic/ISP</ti></tr>
<tr><th>* Schede ethernet:</th></tr>
<tr><ti>    o Onboard SunLance</ti></tr>
<tr><ti>    o Sun QuadEthernet (**)</ti></tr>
<tr><ti>    o Sunswift Happy Meal SCSI/Ethernet</ti></tr>
<tr><ti>    o Myricom Gigabit Ethernet (Sbus)</ti></tr>
<tr><ti>    o Molte schede di rete PCI supportate da linux.</ti></tr>
<tr><th>* Framebuffers:</th></tr>
<tr><ti>    o MG1/MG2 - bwtwo (monochrome)</ti></tr>
<tr><ti>    o CG3 - cgthree (8-bit)</ti></tr>
<tr><ti>    o GX, GX+, TGX and TGX+ - cgsix (8-bit)</ti></tr>
<tr><ti>    o SX - cgfourteen (supporto solo per 8-bit)</ti></tr>
<tr><ti>    o TCX - SS4 and SS5 (risp. 8-bit e 24-bit, AFX bus)</ti></tr>
<tr><ti>    o LEO - ZX/TurboZX (24-bit)</ti></tr>
<tr><ti>    o FFB/FFB2 - Creator/Creator3D (24-bit)</ti></tr>
<tr><ti>    o PGX - ATI Rage Pro (8-bit)</ti></tr>
<tr><ti>    o PGX24 - ATI Mach64 (8 and 24-bit)</ti></tr>
<tr><ti>    o AFB - Elite3D (accelerated only ***, 24-bit)</ti></tr>
<tr><ti>    o OEM framebuffers:</ti></tr>
<tr><ti>      + cgRDI (cgthree, 8-bit)</ti></tr>
<tr><ti>      + Raptor GFX (8-bit and 24-bit)</ti></tr>
<tr><th>* Memorie di massa:</th></tr>
<tr><ti>    o All tape drives and changers</ti></tr>
<tr><ti>    o StorEdge T3 (****)</ti></tr>
<tr><th>* Vari:</th></tr>
<tr><ti>    o Console seriale</ti></tr>
<tr><ti>    o CS4231 based audio</ti></tr>
<tr><th>*  Floppy drive(*****)</th></tr>
</table>
</p><p>
(*) Fare il boot da queste schede richiede il firmware OBP </p><p>
(**) La piattaforma sun4c ha problemi con queste schede dovuti al firmware.
</p><p>(***) Usate l'X server Xsun24 con l'opzione "-noFFB" per disabilitare l'accelerazione o se si ha il driver solaris, controllare la domanda corrispondente 
nella sezione "Running".
</p><p>(****) Guardate su http://open-proejcts.linuxcare.com/t3 per maggiori informazioni sui driver.
</p><p>(*****) Fare il boot da floppy può non funzionare su qualche macchina basata su sparc64.
Il driver del floppy è stato disabilitato nell'immagine di boot dal cd.
</p>
</body>
</section>
<section>
<title>Non supportato</title>
<body>
<p>* Ogni costruzione di target userland a 64-bit. Le compilazioni del kernel funzionano
bene. Avete bisogno del pacchetto egcs64-sparc: scrivete "emerge egcs64-sparc" quando il sistema
emerge completa l'installazione del compilatore.
</p><p>
* X-Windows non è correntemente supportato da Gentoo sparc.
</p>
</body>
</section><section>
<title>Requisiti di spazio</title>
<body>
<p>Una installazione tipica di Gentoo sparc usa 500-1000 MB. Gentoo sparc usa 450 MB per un
bootstrap completo. Ciò è ridotto a 150 quando la costruzione è completata. Probabilmente
non farete una partizione di root minore di un gigabyte se usate solo una partizione.</p>
</body>
</section>
<section>
<title>Kernel</title>
<body>
<p>Usate sempre kernel a 64 bit in macchine a 64 bit. Queste includono Ultra 1, 2,
5, 10 and 60, le serie SunBlade, E250/E450, E4*00, E6*00, E10K e le piattaforme
StarFire. L'output del comando <c>uname -m</c> di queste macchine è "sparc64"
o "sun4u".</p>

<p>Usate sempre kernel a 32 bit in piattaforme a 32 bit (sun4c, sun4d or sun4m).
Queste includono le IPC/IPX, SparcStations eccetera. L'output del comando "uname -m" 
sarà uno dei seguenti: "sparc", "sun4c", "sun4d" o "sun4m".</p>

<p>Attualmente usiamo la variabile d'ambiente ARCH specificata in /etc/make.profile/make.defaults per
determinare l'architettura del kernel da costruire. Questo è il soggetto da cambiare. Probabilmente la 
cambieremo in uno switch USE tipo <c>arch=sparc64</c>
</p>

<p>Gli Stage 1 fatti per le architetture a 64 bit, lavorano bene anche sulle macchine sparc32. 
Lo stesso si pensa accada per gli stage2 (non abbiamo testato). Proverò più avanti.</p>

<note>Il supporto a sparc32 è estremamente limitato e non interamente supportato ora.</note>

<p>Alcuni kernel hanno problemi a partire con grandi quantità di memoria. Provate togliendo della
memoria, ha funzionato per me, o provate un'immagine di boot più nuova.</p>
</body>
</section>
</chapter>
<chapter>
<title>Parte 2: Booting</title>
<section>
<title>Metodi di Boot</title>
<body>
<p>
Ci sono tre metodi per fare il boot:
</p>
<p>
<uri link="#doc_chap4_sect2">boot da rete o netboot</uri>
<uri link="#doc_chap4_sect3">boot da un bootloader SILO esistente</uri>
<uri link="#doc_chap4_sect4">boot da cdrom</uri>
</p>
<p>
Usare un sistema Linux già esistente nell'hard disk della macchina è il modo
più facile visto che si ha un ambiente Unix completo e una connessione ethernet funzionante.
In questo caso, fate il boot nel vostro sistema Linux, montate la partizione destinazione in 
<path>/mnt/gentoo</path> e passate allo <uri link="#doc_chap5">Step 3</uri>.</p>
<p>
Se non è possibile usare una Linux già installata, usate il <uri link="#doc_chap4_sect2">netboot</uri>.
</p>
</body>
</section>
<section>
<title>Netboot</title>
<body>
<p>
Al prompt di boot, scrivete:</p>
<pre>
ok <i>boot net</i>
</pre>
<note>Avete bisogno di un'altra macchina nella stessa che provveda i servizi RARP (per permettere al client di determinare
il suo indirizzo IP) e TFTP (per prendere il kernel dalla rete).</note>
<p>
Potete trovare dell'ottima documentazione nella pagina sparc di Debian:
</p>
<p>
<uri>http://www.debian.org/releases/stable/sparc/install</uri>
</p>
<p>
Le SunBlades non sono supportate da molto e potreste avere problemi nel trovare delle buone immagini di boot.
Potete trovare delle immagini di netboot decenti a:</p>
<p>
<uri>http://auric.debian.org/~bcollins/disks-sparc/current/</uri>
</p>
<p>
Dopo il boot, scegliete il disco dove installare e configura la rete.
Quando debian woody install disk vi chiede di configurare il kernel, 
andate giù fino a <c>Execute a shell</c>.</p>
<p>
Se il vostro sistema di installazione debian sta sbagliando le richieste DNS, probabilmente avete spostato
<path>/target/etc/resolv.conf</path>, assicuratevi che sia lì perchè è dove debian si aspetta che sia.</p>
<p>
Potete anche usare la vostra Linux corrente per scompattare i contenuti dello stage1 dentro la partizione e
montarla dal boot con la seguente linea di comando:</p>
<pre>
ok <i>boot net root=/dev/sda4</i>
</pre>
</body>
</section>
<section>
<title>SILO già esistente</title>
<body>
<p>Potete usare il vostro SILO già installato per fare il boot (premete TAB quando appare SILO:).
Ciò significa che non sarete in grado di caricare moduli del kernel ma non sarà un problema
visto che le configurazioni di default del kernel sparc abilitano la maggior parte dell'hardware SPARC.
Potete usare anche un'altra macchina con Linux sparc già installato e compilarvi un kernel statico con tutti
i vostri driver.</p>

<pre>ok <i>boot</i>
SILO: <codenote>Press TAB here.</codenote> boot:
linux
boot: <i>vmlinux root=/dev/hda4</i>
</pre>
<p>
questo farà il boot sulla quarta partizione del primo disco:
</p>
<pre>
boot: <i>4/vmlinux root=/dev/hda4</i>
</pre>
</body>
</section>

<section>
<title>CDROM</title>
<body><note>Fare il boot dal CDROM è il modo più facile e preferibile.
</note>
<p>Per favore provate a usare un download mirror se possibile. Le immagini ISO sono estremamente grandi.
Prendete l'ultima ISO di Gentoo da <uri>http://www.ibiblio.org/pub/Linux/distributions/gentoo/releases/1.1a/</uri>
e usate cdrecord per masterizzarla. Fate il boot dal CD e dal prompt ok scegliete l'opzione ramdisk:
</p>
<pre>
ok <i>boot cdrom</i>
SILO:
...
boot: <i>ramdisk</i>
</pre>
</body>
</section>
</chapter>
<chapter>
<title>Parte 3: Installando Gentoo</title>
<section>
<body>
<p>Se avete usato netboot per fare il boot del vostro sistema e gli avete permesso di fare il layout dei dischi e
montare la partizione target su <path>/target</path>, farete un symlink da <path>/mnt/gentoo</path> a
<path>/target</path> visto che la documentazione assume <path>/mnt/gentoo</path>. Se non fate questo, dovete comunque
montare una partizione su <path>/mnt/gentoo</path> e usarla per l'installazione.
</p>
<note>se avete usato Debian per fare il boot del vostro sistema, 
partizionate il vostr hard disk
configurate la rete
eseguite una shell
</note>
<note>
a proposito di NFS

Potete anche fare mount di NFS per /usr/portage e /usr/distfiles se necessario.

Quando state usando un NFS montato su /usr/distfiles, assicuratevi che sia scrivibile e
dite al sistema:

# export DISTDIR=/usr/distfiles
</note>
<note>
Un bootstrap emerge usa circa 500MB per compilare e 150MB quando finisce.
Se volete un sistema completo che può compilare altri stage1, avete bisogno di almeno
un gigabyte. Ciò include i distfiles.
</note>
<note>
Potete usare wget per scaricare lo stage1 dal sito gentoo. 
Attenzione, le immagini netboot debian non hanno /usr/bin/bzip, quindi 
scaricate un .tgz (se disponibile).
</note>

<p>Ora, rivediamo velocemente il processo di installazione. Abbiamo creato le partizioni, i filesystems ed estratto 
una tarball stage1 stage2 o stage3, abbiamo fatto i passi appropriati per portare il sistema a stage3. Quando il nostro sistema
è a stage3, possiamo configurarlo (controllando i file di configurazione, installando un bootloader, ecc.) e fare il boot
e quindi avere un sistema Gentoo Linux completamente funzionante. Qui c'è un elenco di cose di cui si ha bisogno, dipendente dallo stage di ebuild di partenza:</p>

<table>
<tr><th>stage tarball</th><th>richiesti per l'installazione</th></tr>
<tr><ti>1</ti><ti>setup di partizioni/filesystem, emerge rsync, bootstrap, emerge system, emerge dei sorgenti linux, configurazione finale</ti></tr>
<tr><ti>2</ti><ti>setup di partizioni/filesystem, emerge rsync, emerge system, emerge dei sorgenti linux, configurazione finale</ti></tr>
<tr><ti>3</ti><ti>setup di partizioni/filesystem, emerge rsync (opzionale), configurazione finale</ti></tr>
</table>
<p>Il primo passo è l'inserimento dei moduli di cui si ha bisogno. Potete non avere bisogno di questo visto che la maggior 
parte dell'hardware sparc è già supportato dal kernel. Per vedere una lista di tutti i moduli delle schede di rete, scrivete
<c>ls /lib/modules/*/kernel/drivers/net/*</c>. Per caricare un modulo, scrivete:</p>

<pre>
# <i>modprobe pcnet32</i>
	<comment>(sostituite pcnet32 con il modulo della vostra NIC )</comment>
</pre>

<p>Ora, se volete usare l'hardware SCSI che non è stato trovato durante il processo di autodetect PCI, 
avete bisogno di caricare il modulo appropriato da /lib/modules, ancora con <c>modprobe</c>:</p>

<pre>
# <i>modprobe aic7xxx</i>
# <i>modprobe sr_mod</i>
# <i>modprobe sd_mod</i>
</pre>

<p>Sopra, abbiamo fatto modprobe sul driver SCSI <c>aic7xxx</c> assicurandoci che il supporto ai CD-ROM SCSI (<c>sr_mod</c>)
e il supporto dischi (<c>sd_mod</c>) siano abilitati.</p>

<note><c>hdparm</c> è incluso nella distribuzione Gentoo di base.
Se uno dei vostri drive ha bisogno di tweak, è il momento giusto di farli. Nell'hardware
moderno <c>hdparm -d 1 /dev/hdx</c> è abbastanza sicuro.  Potete usare  
<c>hdparm -v /dev/hdx</c> per controllare i settaggi del vostro drive
e <c>hdparm -t /dev/hdx</c> per controllare la performance.</note>
</body>
</section>
<section>
<title>Configurare il networking per l'installazione</title>
<body>

<p>L'installazione di Gentoo vi permette di configurare una rete funzionante, permettotendovi di usare <c>ssh</c>, <c>scp</c> o
<c>wget</c> prima del processo di installazione. Se non avete bisogno di usare queste utility ora, potete andare avanti e settare 
il networking. Dopo il setup, Portage sarà in grado di utilizzare la vostra rete configurata quando sarete nell'ambiente chroot.</p>
</body>
</section>

<section>
<title>Configurazione manuale di DHCP</title>
<body>
<p>
La configurazione di rete è semplice con DHCP; Se il vostro ISP non sta usando DHCP; saltate alla sezione
sulla configurazione statica sotto.</p>
<pre caption="Configurazione di rete con DHCP">
# <i>dhcpcd eth0</i> 
</pre>
<note>
Alcuni ISP richiedono che voi diate un'hostname. Per fare questo, aggiungete una flag <c>-h miohostname</c> alla riga di comando
di sopra.
</note>
<p>Se ricevete degli warning da <i>dhcpConfig</i>, niente panico; gli
errori sono solo "cosmetici". Saltate alla sezione 
"network testing" sotto.</p>
</body>
</section>
<section>
<title>Configurazione Statica Manuale</title>
<body>
<p>
Avete bisogno di settare il networking necessario solo a scaricare i sorgenti per la costruzione del sistema.
Scrivete il seguente comando, rimpiazzando $IFACE con la vostra interfaccia di rete (tipicamente <c>eth0</c>), $IPNUM con il 
vostro indirizzo IP, $BCAST con il vostro indirizzo broadcast e $NMASK con la vostra maschera di rete. Per il comando <c>route</c>, 
sostituite $GTWAY con il vostro gateway di default.</p>
<pre>
# <i>/sbin/ifconfig $IFACE $IPNUM broadcast $BCAST netmask $NMASK</i>
# <i>/sbin/route add -net default gw $GTWAY netmask 0.0.0.0 metric 1</i>
</pre>
<p>Ora è tempo di creare il file <path>/etc/resolv.conf</path>
così che la risoluzione dei nomi sia possibile (trovare i siti Web/FTP dal nome, non solo dall'indirizzo ip).</p>

<note>
Al momento il solo editor installato è <c>nano</c>, un piccolo editor visuale e semplicissimo da usare. Usate <c>nano</c>
con l'opzione <c>-w</c> per togliere il line-wrapping automatico.</note>

<p>Qui c'è un template da seguire per creare il vostro file /etc/resolv.conf:</p>
<pre caption="/etc/resolv.conf template">
domain miodominio.com
nameserver 10.0.0.1
nameserver 10.0.0.2
</pre>
<p>Sostituite <c>10.0.0.1</c> e <c>10.0.0.2</c> con gli indirizzi IP del vostro DNS primario e secondario rispettivamente.</p>
</body>
</section>

<section>
<title>Configurazione Proxy</title>
<body>
<p>
Se siete dietro un proxy, è necessario configurarlo prima di continuare. Esporteremo delle variabili per configurare il proxy.
</p>
<pre>
# <i>export http_proxy="machine.company.com:1234" </i>
# <i>export ftp_proxy="$http_proxy" </i>
# <i>export RSYNC_PROXY="$http_proxy" </i>
</pre>
</body>
</section>

<section>
<title>Testing della rete</title>
<body>
<p>Ora che la vostra rete è stata configurata, il comando <c>/sbin/ifconfig -a</c> visualizzerà (speriamo!) che la vostra
scheda di rete sta funzionando:
(controlla <e>UP</e> e <e>RUNNING</e> nell'output).
</p>
<pre caption="/sbin/ifconfig di una scheda di rete funzionante">
eth0      Link encap:Ethernet  HWaddr 00:50:BA:8F:61:7A
          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::50:ba8f:617a/10 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1498792 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1284980 errors:0 dropped:0 overruns:0 carrier:0
          collisions:1984 txqueuelen:100
          RX bytes:485691215 (463.1 Mb)  TX bytes:123951388 (118.2 Mb)
          Interrupt:11
</pre>
</body>
</section>
<section>
<title>La rete va!</title>
<body>
<p>
La rete ora è configurata e utilizzabile. Siete ora in grado di usare <c>ssh</c>, <c>scp</c> e <c>wget</c> per connettervi
ad altre macchine nella LAN o su Internet.</p>
</body>
</section>
</chapter>
<chapter>
<title>Configurare le partizioni</title>
<section>
<body>
<p>Ora che il kernel può vedere le schede di rete e i controller dei dischi, è tempo
di configurare le partizioni per Gentoo Linux.</p>

<note>
Questo passo successivo è per chi ha fatto il boot dal CDROM. Se avete seguito le altre istruzioni saltate
le prossime 3 istruzioni.</note>

<p>
Fate il mount del cdrom e il chroot sulla directory giusta per la vostra piattaforma:
</p>
<pre>
# <i>mount -t iso9660 -o ro /dev/cdroms/cdrom0 /mnt</i>
# <i>chroot /mnt/root-\`uname -m\` bin/bash</i>
# <i>source /etc/profile</i>
</pre>

<p>Da qua avete un ambiente di rescue che potete usare per sistemare il vostro sistema. Potete partizionare anche i dischi 
da qui e montarli per l'installazione.</p>

<note>
Quando si usa il CD-ROM, fai (questo è un esempio, non fate copia/incolla!):</note>
<pre>
# <i>fdisk /dev/hda</i>
# <i>mount -n /dev/hda2 /mnt/gentoo; cd /mnt/gentoo</i>
# <i>wget http://www.ibiblio.org/pub/Linux/distributions/gentoo/releases/1.4_rc2/sparc/sparc64/stage1-sparc64-1.4_rc2.tbz2</i>
# <i>bunzip2 -c ./stage1-sparc64-1.4_rc2.tbz2 | tar xvpf -</i>
# <i>cp /etc/resolv.conf etc/resolv.conf</i>
# <i>nano /etc/resolv.conf</i>
# <i>rm etc/make.profile</i>
</pre>

<note>Il modo più semplice per creare una Sun Disk Label è utilizzare l'opzione <i>'s'</i> in fdisk e modificare le
partizioni per soddisfare le vostre necessità.</note>

<note>Dopo che montate / in /mnt/gentoo, andate avanti e montate le altre partizioni che potreste avere (es. /boot /usr /var)
</note>
<p>
Ora editate make.conf e commentate le definizioni che non sono queste:
</p>
<pre>
<i>
CHOST="sparc-unknown-linux-gnu"
CFLAGS="-mcpu=v8 -mtune=v9 -O2 -pipe"
CXXFLAGS="-O3 -pipe"
</i>
</pre>
<note>
Per /etc/make.conf cambiate :

SYNC="rsync://cvs.gentoo.org/gentoo-portage"

in

SYNC="rsync://rsync.gentoo.org/gentoo-portage"
</note>
<pre>
# <i>mount -o bind /proc proc</i>
# <i>chroot /mnt/gentoo bin/bash</i>
# <i>env-update</i>
# <i>source /etc/profile</i>
# <i>emerge rsync</i>
# <i>rm etc/make.profile</i>
</pre>
<p>
Scegliete la piattaforma giusta, per sparc64:
</p>
<pre>
# <i>uname -m</i>
sparc64
# <i>ln -s ../usr/portage/profiles/default-sparc64-1.4 etc/make.profile</i>
</pre>
<p>
Per sparc:
</p>
<pre>
# <i>uname -m</i>
sparc
# <i>ln -s ../usr/portage/profiles/default-sparc-1.4 etc/make.profile</i>
</pre>
<p>
Se state partendo da Stage 1 fate:
</p>
<pre>
# <i>scripts/bootstrap.sh</i>
</pre>
<p>
Ciò durerà un pò. Ora avete una Gentoo stage 2.
</p><p>
Poi:
</p>
<pre>
# <i>export CONFIG_PROTECT=""</i>
# <i>emerge system</i>
</pre>
<p>
Ora avete una Gentoo stage 3.</p>
</body>
</section>
</chapter>
<chapter>
<title>Part 4: Compilare un kernel</title>
<section>
<body>
<p>
In piattaforme sparc64 abbiamo bisogno un compilatore per target a 64-bit:
</p>
<pre>
# <i>emerge egcs64-sparc</i>
</pre>
<p>
Dopo, scaricate i sorgenti di Linux. In questo momento sys-kernel/linux-sources sembrerebbe contenere 
alcune patch specifiche per ogni piattaforma che fanno fallire la compilazione. Se trovate cosa causa il fallimento, o meglio
trovate una soluzione, mandate il bug report su bugzilla.
</p><p>
Quindi prendete il kernel Vanilla e fate il lavoro da voi. State attenti, ogni errore qui si trasformerà in errori di compilazione.
</p>

<pre>
# <i>cd /usr/src</i>
# <i>wget http://www.kernel.org/pub/linux/kernel/v2.4/linux-2.4.18.tar.bz2</i>
# <i>tar xvfj linux-2.4.18.tar.bz2</i>
# <i>mv linux linux-2.4.18</i>
# <i>ln -s linux-2.4.18 linux</i>
# <i>cd linux</i>
</pre>
<p>
Applicate qualsiasi patch di cui avete bisogno ora. Non usate le serie di patch -ac
in sistemi Sparc (fanno diventare il sistema estremamente instabile). XFS (il filesystem) 
non è ancora supportato per Sparc.
</p>
<note>Per risolvere il problema: avete bisogno di correzioni aggiuntive per piattaforme Sparc.</note>
<p>
Ora prendete un file .config, Io voglio tmpfs (un filesystem RAM dinamico, ottimo per macchine con
molta RAM) quindi copio il file e abilito tmpfs. Bene, avete qua lo schema.
</p>
<pre>
# <i>sed -s 's/.*CONFIG_TMPFS.*/CONFIG_TMPFS=m/' \
	-s 's/.*CONFIG_DEVFS_FS.*/CONFIG_DEVFS_FS=y/' \
	-s 's/.*CONFIG_DEVFS_MOUNT.*/CONFIG_DEVFS_MOUNT=y/' \
	-s 's/.*CONFIG_EXT3_FS.*/CONFIG_EXT3_FS=y/' \
	arch/`uname -m`/defconfig \
	> .config</i>
</pre>
<p>
Oppure copiate solo il file:
</p>
<pre>
# <i>cp arch/`uname -m`/defconfig .config</i>
</pre>
<p>
Lo step oldconfig è richiesto solo per settare alcuni link:
</p>
<pre>
# <i>make ARCH=sparc64 oldconfig dep clean vmlinux modules</i>
# <i>make modules_install</i>
</pre>
<p>
Il kernel deve essere più piccolo di 3.6 megabytes per poter essere contenuto
nella memoria che usa SILO:
</p>
<pre>
# <i>ls -al vmlinux</i>
-rwxr-xr-x    1 root     root      3503075 Apr 20 21:42 vmlinux
</pre>
<p>
Abbiamo bisogno di GZIP per SILO.
</p>
<pre>
# <i>gzip -9 vmlinux</i>
# <i>cp vmlinux.gz /boot/vmlinuz-2.4.18</i>
# <i>ln /boot/vmlinuz-2.4.18 /vmlinuz</i>
</pre>
<p>
Se non avete settato SILO in questo disco e volete usarlo per fare il boot:
</p>
<pre>
# <i>emerge silo</i>
# <i>nano /etc/silo.conf</i>
# <i>silo</i>
</pre>
</body>
</section>
</chapter>
<chapter>
<title>Configurazioni Finali</title>
<section>
<title>Timezone</title>
<body>
<note>E` estremamente importante completare questo passo. Molti problemi con l'orologio
si potrebbero verificare se non si setta il localtime correttamente.</note>

<p>A questo punto, avrete un sistema stage3 pronto per la configurazione finale.
Partiremo dal processo di settaggio della timezone. Assicuriamoci prima di settarla 
che si abbia un output di <c>uname -a</c> ragionevole.</p>
<p>Controllate la vostra timezone (o GMT se si usa il Greenwich Mean Time) in <path>/usr/share/zoneinfo</path>. 
Poi fate un link simbolico scrivendo:
</p><pre>
# <i>ln -sf /usr/share/zoneinfo/path/to/timezonefile /etc/localtime</i>
</pre>
<p>Potete anche controllare <path>/etc/rc.conf</path> per essere sicuri che i vostri settaggi della 
timezone siano corretti.</p>
</body>
</section>
<section>
<title>Logger di sistema e demone Cron</title>
<body>
<p>Ora dovete scegliere un logger di sistema da installare. Noi offriamo sysklogd che è il
tradizionale set di demoni di logging di sistema. Abbiamo anche msyslog e syslog-ng ma anche metalog.
Gli utilizzatori esperti non sembrano gravitare attorno a sysklogd (che non ha delle ottime performance)
e usano le alternative più nuove.
Se siete in dubbio, provate metalog, è molto popolare. Per installare il vostro logger, scrivete <e>una</e>
delle seguenti quattro linee:</p>

<pre>
# <i>emerge app-admin/sysklogd</i>
# <i>rc-update add sysklogd default</i>
<comment>o</comment>
# <i>emerge app-admin/syslog-ng</i>
# <i>rc-update add syslog-ng default</i>
<comment>o</comment>
# <i>emerge app-admin/metalog</i>
# <i>rc-update add metalog default</i>
<comment>o</comment>
# <i>emerge app-admin/msyslog</i>
# <i>rc-update add msyslog default</i>
</pre>
<warn>
Nel caso che installate syslog-ng hai bisogno di creare 
<path>/etc/syslog-ng/syslog-ng.conf</path>.
Guardate <path>/etc/syslog-ng</path> 
per un esempio di file di configurazione.
</warn>
<impo>

Metalog flusha l'output del disco in blocchi, quindi i messaggi non vengono registrati direttamente
nei log di sistema. Se state provando a debuggare un demone, questo comportamento performante è
tutt'altro che utile. Quando il vostro sistema Gentoo Linux sta girando, potete mandare a metalog un
segnale USR1 per spegnere automaticamente questo buffering dei messaggi (significa che 
<i>tail -f <path>/var/log/everything/current</path></i> non funzionerà in tempo reale), o un 
segnale USR2 per riabilitare il buffering.
</impo>
<p>Ora potete opzionalmente scegliere un pacchetto cron da utilizzare. Offriamo dcron, fcron e vcron.
Se non sapete cosa scegliere, prendete vcron. Possono essere installati come segue:</p>
<pre>
# <i>emerge sys-apps/dcron</i>
# <i>crontab /etc/crontab</i>
<comment>o</comment>
# <i>emerge sys-apps/fcron</i>
# <i>crontab /etc/crontab</i>
<comment>o</comment>
# <i>emerge sys-apps/vcron</i>
<comment>Non dimenticate di aggiungere il vostro *cron nell'appropriato livello di init.</comment>
# <i>rc-update add *cron default </i>
</pre>
<p>
Per maggiori informazioni su come cron lavora sotto Gentoo Linux, guardate
<uri link="http://lists.gentoo.org/pipermail/gentoo-announce/2002-April/000151.html">
questo announcement</uri>.</p>
<p>Per maggiori informazioni su come si fanno partire programmi e demoni in startup, guardate la
<uri link="/doc/rc-scripts.html">guida agli rc-script</uri>. </p>
</body>
</section>
<section>
<title>/etc/fstab</title>
<body>
<p>Il vostro sistema Gentoo Linux è quasi pronto per essere usato, tutto quello di cui abbiamo bisogno
ora è configurare alcuni file di sistema importanti e installare il bootloader GRUB.
Il primo file che abbiamo bisogno di configurare è <path>/etc/fstab</path>. Ricordate che dovete
usare l'opzione <c>notail</c> per bootare la vostra partizione se scegliete di creare un ReiserFS in essa.
Ricordate di specificare appropriatamente i tipi <c>ext2</c>, <c>ext3</c> o <c>reiserfs</c></p>
<p>Usate qualcosa come il <path>/etc/fstab</path> di sotto, ma assicuratevi di sostituire "BOOT" "ROOT" e
"SWAP" con gli attuali block devices che state usando (come <c>hda1</c>, ecc.)</p>
<pre>
<comment>
# /etc/fstab: static file system information.
#
# noatime turns of atimes for increased performance (atimes normally aren't
# needed; notail increases performance of ReiserFS (at the expense of storage
# efficiency).  It's safe to drop the noatime options if you want and to 
# switch between notail and tail freely.

# &lt;fs&gt;           &lt;mountpoint&gt;   &lt;type&gt;   &lt;opts&gt;          &lt;dump/pass&gt;

# NOTE: If your BOOT partition is ReiserFS, add the notail option to opts.
</comment>
/dev/BOOT           /boot       ext2	 noauto,noatime	 1 2
/dev/ROOT           /           ext3	 noatime         0 1
/dev/SWAP           none        swap	 sw              0 0
/dev/cdroms/cdrom0  /mnt/cdrom  iso9660	 noauto,ro       0 0
proc                /proc       proc	 defaults        0 0
</pre>

<warn>Per favore fate attenzione al fatto che <i>/boot</i> non viene montata a tempo di boot.
Ciò accade per proteggere i dati in <i>/boot</i> da possibile corruzione. Se avete bisogno
di accedere a <i>/boot</i>, per favore montatela!
</warn>

</body>
</section>
<section>
<title>Settare la password di root</title>
<body>
<p>Prima di dimenticarvi, settate la password di root scrivendo:</p>
<pre>
# <i>passwd</i>
</pre>
</body>
</section>
<section>
<title>/etc/hostname</title>
<body>
<p>Modificate questo file così che contenga il vostro full-qualified domain name in line singola, es.
<c>miamacchina.miodominio.com</c>.
<pre>
# <i>echo mymachine.mydomain.com > /etc/hostname</i>
</pre>
</p>
</body>
</section>

<section>
<title>/etc/hosts</title>
<body>
<p>Questo file contiene una lista di indirizzi ip e gli hostname ad essi associati. Viene usata
dal sistema per risolvere gli indirizzi IP degli hostname che potrebbero non essere nei vostri
nameservers. Abbiamo qui un template per questo file:
</p><pre>
127.0.0.1      localhost
<comment># La prossima linea contiene il vostro IP locale nella LAN e il nome della macchina associato</comment>
192.168.1.1    mymachine.mydomain.com	mymachine
</pre>

<note>Se siete in una rete DHCP, può esservi d'aiuto mettere <i>localhost</i> nel vostro
hostname attuale. Ciò aiuterà GNOME e molti altri programmi nella risoluzione dei nomi.</note>

</body>
</section>

<section>
<title>Configurazione finale della rete</title>
<body>
<p>Aggiungete i nomi di qualsiasi modulo necessario per la configurazione del vostro sistema in  
<path>/etc/modules.autoload</path> (potete anche aggiungere ogni opzione nella stessa linea).
Quando Gentoo fa il boot, questi moduli verranno caricati automaticamente. E` di particolare 
importanza il modulo della vostra scheda di rete, sempre se lo avete compilato come modulo:
</p>
<pre caption="/etc/modules.autoload">
3c59x
</pre>
<p>Modificate lo script <path>/etc/conf.d/net</path> per avere la rete configurata al primo boot:
</p>
<pre>
# <i>nano -w /etc/conf.d/net</i>
# <i>rc-update add net.eth0 default</i>
</pre>
<p>
Se avete schede di rete multiple avete bisogno di creare script <path>net.eth<comment>x</comment></path>
aggiuntivi per ognuna (<comment>x</comment> = 1, 2, ...):
</p>
<pre caption="Multiple network interfaces">
# <i>cd /etc/init.d</i>
# <i>cp net.eth0 net.eth<comment>x</comment></i>
# <i>rc-update add net.eth<comment>x</comment> default</i>
</pre>

</body>
</section>

<section>
<title>Configurare settaggi di base (includendo i settaggi della keymap)</title>
<body>
<pre caption="basic configuration">
# <i>nano -w /etc/rc.conf</i>
</pre>
<p>
Seguite le istruzioni nel file per configurare i settaggi di base. 
Tutti gli utenti dovranno assicurarsi che <c>CLOCK</c> è settato 
come vogliono. Gli utenti che hanno tastiere internazionali dovranno settare 
la variabile <c>KEYMAP</c> (sfogliate <path>/usr/share/keymaps</path> per vedere
le varie possibilità).
</p>
</body>
</section>

<section>
<title>Settaggi dell'harddisk (hdparm)</title>
<body>
<p>
Aggiungete i tweaks di <i>hdparm</i> in <path>/etc/conf.d/local.start</path>,
così che verranno inizializzati ad ogni boot.
</p>
<pre>
# <i>nano -w /etc/conf.d/local.start</i>
</pre>
<pre caption="aggiungere i tweak hdparm in /etc/conf.d/local.start">
# This is a good place to load any misc.
# programs on startup ( 1>&amp;2 )

# turn on DMA on both harddrives
hdparm -d 1 /dev/hda
hdparm -d 1 /dev/hdb
</pre>
</body>
</section>
</chapter>
<chapter>
<title>Gran Finale!</title>
<section>
<body>
<p>Congratulazioni! Avete appena completato l'installaazione di Gentoo Linux nella vostra sparc.
E` benvenuto ogni commento o suggerimento che potete avere per aiutarci per un migliore supporto
al porting su sparc. Per favore iscrivetevi alla gentoo-sparc mailing list e lasciateci una linea.
Grazie per aver dedicato il vostro tempo all'installazione.</p>

<p>Siete ora al punto in cui dovete fare un pò di cose. Fate l'unmount di tutto e riavviate per partire
con l'installazione degli ebuild.</p>
</body>
</section>
</chapter>

</guide>


