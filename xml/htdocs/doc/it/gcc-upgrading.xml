<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/gcc-upgrading.xml,v 1.20 2012/02/26 08:36:40 swift Exp $ -->

<guide lang="it">
<title>Guida all'aggiornamento di GCC per Gentoo</title>

<author title="Autore">
  <mail link="swift"/>
</author>
<author title="Traduzione">
  <mail link="richard77@libero.it">Federico Della Ricca</mail>
</author>

<abstract>
Questo documento guida gli utenti attraverso il processo di aggiornamento di
GCC.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>25</version>
<date>2011-10-15</date>

<chapter id="quickstart">
<title>Avvio rapido</title>
<section>
<title>Introduzione</title>
<body>

<p>
La guida è incentrata sull'<e>aggiornamento</e> di GCC. Effettuare il downgrade
di GCC potrebbe avere degli effetti indesiderati. Per favore consultare <uri
link="#troubleshooting">Risoluzione dei problemi</uri> per i problemi più comuni
segnalati.
</p>

<p>
La sezione successiva fornisce una introduzione agli aggiornamenti di GCC (e di
quanto siano semplici). Se si vuole leggere la spiegazione dettagliata dietro
gli aggiornamenti di GCC, per favore continuare con <uri
link="#explanation">L'aggiornamento di GCC in dettaglio</uri>.
</p>

</body>
</section>
<section>
<title>Versione rapida</title>
<body>

<p>
Se si sta aggiornando GCC non c'è bisogno di effettuare nessuna operazione,
tranne cambiare la versione del compilatore e ricompilare libtool:
</p>

<pre caption="Cambiare versione di GCC">
# <i>emerge -u gcc</i>
# <i>gcc-config -l</i>

[1] i686-pc-linux-gnu-4.4.5 *
[2] i686-pc-linux-gnu-4.5.3

# <i>gcc-config 2</i>
<i>env-update &amp;&amp; source /etc/profile</i>
<i>emerge --oneshot libtool</i>
</pre>

<p>
Se si sta aggiornando GCC da una versione precedente la 3.4.0 (per la serie 3.x)
oppure la 4.1, è necessario eseguire <c>revdep-rebuild</c>:
</p>

<pre caption="Aggiornamento da una versione di GCC non compatibile in avanti">
# <i>revdep-rebuild --library libstdc++.so.5</i>
</pre>

<p>
Ecco fatto. Il nuovo compilatore è pronto per l'uso!
</p>

</body>
</section>
</chapter>

<chapter id="explanations">
<title>L'aggiornamento di GCC in dettaglio</title>
<section>
<title>Introduzione</title>
<body>

<p>
L'aggiornamento di GCC è sempre stato mistificato, con suggerimenti che spaziano
da "Non c'è bisogno di fare nulla" a "È necessario ricompilare il sistema due
volte". Molte di queste affermazioni derivano dalla confusione che circonda le
incompatibilità ABI. Ma prima è necessario dare un'occhiata a <c>libtool</c>.
</p>

</body>
</section>
<section>
<title>libtool e fix_libtool_files.sh</title>
<body>

<p>
Le installazioni precedenti di GCC su Gentoo richiedevano l'esecuzione di un
comando specifico chiamato <c>fix_libtool_files.sh</c>. Non molto tempo fa
l'esecuzione di questo comando è stata integrata nell'applicazione dello stesso
pacchetto (tramite l'eclass toolchain) per cui non è più necessario per gli
utenti eseguire questo comando.
</p>

<p>
Il motivo per cui è necessario ricompilare libtool dopo l'aggiornamento delle
versioni di GCC sta nel suo obiettivo principale: <e>libtool</e> è un insieme
di strumenti che aggrega il codice specifico della piattaforma in una
interfaccia generica, consentendo alle applicazioni di essere compilate con le
librerie condivise senza la necessità di avere a che fare con gli aspetti
specifici delle librerie condivise per la piattaforma. Al fine di svolgere
correttamente la sua funzione, lo script <c>libtool</c> fa uso di alcune
posizioni delle librerie che hanno delle informazioni pre-impostate (hardcoded)
sulla versione di GCC.
</p>


</body>
</section>
<section>
<title>Cambiamenti ABI</title>
<body>

<p>
Una ABI, o <e>Application Backend Interface</e>, è un insieme di convenzioni
usate da tutti gli strumenti che hanno a che fare con la rappresentazione
binaria dei programmi inclusi compilatori, assembler, linker ed il supporto alla
fase di esecuzione di un programma (fonte: <uri
link="http://gcc.gnu.org/onlinedocs/gcc/Compatibility.html">GCC Binary
Compatibility</uri>). Quando la ABI usate per le applicazioni binarie e le
librerie viene modificata, si corre il rischio di ricevere errori del linker o
programmi malfunzionanti a meno che non vengano ricompilate tutte le librerie
che fanno uso di codice C++. Sì, C++, dato che molte delle incompatibilità si
verificano a causa della ABI C++. Si tratta di un altro motivo per cui viene
usato il comando <c>revdep-rebuild</c> verso la libreria
<path>libstdc++.so.5</path>.
</p>

<pre caption="Ricompilare le applicazioni collegate a libstdc++.so.5">
# <i>revdep-rebuild --library libstdc++.so.5</i>
</pre>

<p>
Allora perché questo è necessario fino alle versioni di GCC 3.4.0/4.1? Perché
da quelle specifiche versioni in poi, GCC utilizza una ABI compatibile in
avanti, la quale elimina la necessità di ricompilare applicazioni e librerie.
Ovviamente, non ci sono garanzie assolute, ma nel caso in cui dovesse
verificarsi una incompatibilità, essa verrà documentata qui ;-) In quel caso,
la versione della libreria <path>libstdc++.so</path> verrà probabilmente
incrementata.
</p>

</body>
</section>
<section>
<title>Ricompilare l'intero sistema</title>
<body>

<p>
Alcune persone giurano di aver bisogno di ricompilare ogni singolo pacchetto sul
proprio sistema quando è disponibile una nuova versione di GCC. Ovviamente,
tutto ciò non ha senso, dato che ci sono molte applicazioni che non richiedono
GCC sia per essere compilate che per il processo di installazione, per cui non
verranno interessate da tali modifiche.
</p>

<p>
Ciò non vuol dire che abbiano del tutto torto: le versioni più recenti di GCC
spesso includono un supporto migliorato al set di istruzioni dei processori, il
che potrebbe influenzare le performance di alcune applicazioni in maniera del
tutto positiva. Nonostante questo miglioramento sia solitamente marginale, in
alcuni casi (specialmente le applicazioni che fanno uso intensivo della CPU)
potrebbero portare significativi miglioramenti.
</p>

<p>
Esistono anche dei casi noti dove i pacchetti necessitano di essere compilati
con lo stesso compilatore. Nonostante questi pacchetti vengano aggiornati
contemporaneamente da Gentoo (in modo da esser compilati sempre con la stessa
versione di GCC) la reinstallazione di questi pacchetti potrebbe rivelarsi
problematica. I vari pacchetti <path>qt-*</path> sono un classico esempio di
questo comportamento.
</p>

</body>
</section>
</chapter>

<chapter id="troubleshooting">
<title>Risoluzione dei problemi</title>
<section>
<title>libstdc++.so.6: version `GLIBCXX_3.4.15' not found</title>
<body>

<p>
Durante gli aggiornamenti, potrebbe verificarsi un errore come il seguente:
</p>

<pre caption="GLIBCXX_x.y.z not found">
cmake_bootstrap_28021_test: /usr/lib/gcc/i486-pc-linux-gnu/4.1.2/libstdc++.so.6:
version `GLIBCXX_3.4.11' not found
</pre>

<p>
Ciò vuol dire che si sta tentando di compilare un pacchetto con una versione di
GCC <e>più vecchia</e> rispetto quella utilizzata per compilare alcune delle
dipendenze. È vero che l'ABI C++ è compatibile in avanti, ma fa in modo che
vengano usate solo versioni <e>successive</e> (o identiche) di GCC per
compilare applicazioni e librerie collegate (rispetto alla versione di GCC usata
per compilare tali librerie).
</p>

</body>
</section>
<section>
<title>Quali sono i pacchetti che necessitano di essere ricompilati?</title>
<body>

<p>
La seguente tabella indica i pacchetti che, <e>se installati</e>, hanno bisogno
di essere ricompilati, specificando il perché.
</p>

<table>
<tr>
  <th>Pacchetto</th>
  <th>Ricompilazione necessaria perché...</th>
</tr>
<tr>
  <ti>sys-devel/libtool</ti>
  <ti>
    l'applicazione libtool ha percorsi pre-impostati verso le librerie interne
    di GCC
  </ti>
</tr>
<tr>
  <ti>dev-lang/ghc</ti>
  <ti>
    l'applicazione ghc ha percorsi pre-impostati verso le librerie interne di
    GCC
  </ti>
</tr>
</table>

</body>
</section>
</chapter>
</guide>
