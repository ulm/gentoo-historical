<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/cron-guide.xml,v 1.2 2005/03/04 15:34:30 so Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/it/cron-guide.xml" lang="it">
<title>Guida a Cron per Gentoo Linux</title>

<author title="Autore">
  <mail link="airuike@gmail.com">Eric Brown</mail>
</author>
<author title="Editor">
  <mail link="neysx@gentoo.org">Xavier Neys</mail>
</author>
<author title="Traduzione">
  <mail link="frgrieco@aliceposta.it">Francesco Grieco</mail>
</author>

<abstract>
Questa guida tratta la configurazione e l'uso di cron.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.0 -->
<license/>

<version>1.1</version>
<date>2005-02-14</date>

<chapter>
<title>Le basi di Cron</title>
<section>
<title>Cosa fa cron</title>
<body>

<p>
Cron è un demone che esegue operazioni pianificate gestite tramite il comando
<c>crontab</c>. Porta a termine questo compito attivandosi ogni minuto e controllando
la presenza di operazioni da eseguire (cron-job) in tutti i crontab degli utenti.
</p>

<note>
<e>crontab</e> è sia il nome di una lista di cron-job (operazioni da eseguire)
che il nome del comando necessario alla configurazione di tale lista.
</note>

</body>
</section>
<section>
<title>Cron</title>
<body>

<p> 
In Portage ci sono almeno tre implementazioni differenti di cron tra cui scegliere.
Tutte presentano una interfaccia simile, vale a dire l'uso di <c>crontab</c> o
di un comando simile. E' presente, inoltre, una utility strettamente collegata a 
cron, Anacron; funziona in simbiosi con cron su sistemi che non sono in continua esecuzione.
</p>

<p>
Prima di analizzare il funzionamento di cron, è necessario scegliere quale
variante tra quelle disponibili utilizzare. Segue, quindi, una breve
descrizione per ognuna.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Quale implementazione di cron utilizzare</title>
<section>
<title>Vixie cron</title>
<body>

<p>
Vixie cron è una completa implementazione di cron basata su SysV cron. 
Ogni utente ha un proprio crontab ed è autorizzato a specificare
proprie variabili d'ambiente al suo interno. Diversamente da altre
varianti di cron, supporta SELinux e PAM. Supporta, inoltre, meno architetture rispetto
a Dcron, ma più di Fcron.
</p>

<p>
Caratteristiche di <c>sys-apps/vixie-cron</c>:
</p>

<ul>
<li>
  Supporto per SELinux
</li>
<li>
  Supporto per PAM <path>/etc/security/limits.conf</path>
</li>
<li>
  Configurazione di variabili d'ambiente in crontab (PATH, SHELL, HOME, ecc.)
</li>
<li>
  Ogni utente può avere il proprio crontab; l'accesso è controllato da cron.allow
  e cron.deny
</li>
</ul>

</body>
</section>
<section>
<title>Il Cron di Dillon</title>
<body>

<p>
Dcron aspira ad essere la più semplice, elegante e sicura implementazione di cron.
Non permette la configurazione delle variabili d'ambiente in crontab e tutti i
cron-job sono eseguiti da <path>/bin/sh</path>. Come Vixie cron, ogni utente ha il proprio
crontab.
</p>

<p>
Caratteristiche di <c>sys-apps/dcron</c>:
</p>

<ul>
<li>
  Veloce, semplice e privo di funzioni inutili
</li>
<li>
  L'accesso a <c>crontab</c> è limitato agli utenti del gruppo cron.
</li>
</ul>

</body>
</section>
<section>
<title>Fcron</title>
<body>

<p>
Fcron mira a rimpiazzare Vixie cron e Anacron. E' progettato per funzionare su
sistemi che non sono continuamente in esecuzione e si presenta con caratteristiche
extra. Possiede un job startup constraint, un job serialization control, l'abilità
di assegnare valori di nice (priorità) alle operazioni pianificate e l'abilità di pianificare
operazioni da eseguire all'avvio del sistema. Per maggiori informazioni è possibile
consultare la sua <uri link="http://fcron.free.fr/">pagina ufficiale</uri>.
</p>

<p>
Caratteristiche di <c>sys-apps/fcron</c>:
</p>

<ul>
<li>
  Progettato per funzionare su sistemi in esecuzione non continua; in pratica
  può eseguire operazioni dopo un riavvio nel caso la normale esecuzione pianificata
  fosse stata "mancata".
</li>
<li>
  Configurazione di variabili d'ambiente e molte altre opzioni in crontab.
</li>
<li>
  Ogni utente può avere il proprio crontab, l'accesso è controllato da cron.allow e 
  da cron.deny
</li>
<li>
  Sintassi avanzata di crontab per il supporto di molte nuove caratteristiche
</li>
</ul>


</body>
</section>

<section>
<title>Anacron</title>
<body>
<p>
Anacron non è un demone cron, ma qualcosa che di solito funziona in simbiosi con esso.
Esegue comandi a intervalli specificati in giorni e considera il sistema sul quale
è eseguito in non continua esecuzione; eseguirà le operazioni pianificate "mancate" (se
ad esempio il sistema è spento nel momento in cui un'operazione doveva essere eseguita).
Anacron dipende dal demone cron.
</p>
</body>

</section>
</chapter>

<chapter>
<title>Uso di cron</title>
<section>
<title>Installazione</title>
<body>

<p>
Scelta l'implementazione di cron ritenuta più adatta alle proprie esigenze,
la si installi con il comando emerge.
</p>

<pre caption="Installazione di cron">
# <i>emerge dcron</i>
# <i>rc-update add dcron default</i>
# <i>/etc/init.d/dcron start</i>
</pre>

<p>
A meno che non si abbia installato Fcron, si consiglia l'utilizzo anche di Anacron.
</p>

<pre caption="Installazione di anacron">
# <i>emerge anacron</i>
# <i>rc-update add anacron default</i>
# <i>/etc/init.d/anacron start</i>
</pre>

</body>
</section>
<section>
<title>Crontab di Sistema</title>
<body>

<p>
Terminata l'installazione, verrà chiesta l'esecuzione dell'istruzione
<c>crontab /etc/crontab</c>. Il file <path>/etc/crontab</path> è il proprio
<e>crontab di sistema</e>. Una installazione default di Gentoo utilizza questo file
per eseguire gli script presenti in <path>/etc/cron.{daily,hourly,weekly,monthly}</path>.
Si noti che Vixie cron gestisce le operazioni in <path>/etc/crontab</path> in maniera
automatica.
Gli utilizzatori di Dcron e Fcron dovranno eseguire <c>crontab /etc/crontab</c> ogni
qual volta vengano apportati dei cambiamenti a <path>/etc/crontab</path>.
</p>

<p>
Le operazioni pianificate nel crontab di sistema non saranno mostrate nella
lista dei cron-job visualizzata tramite <c>crontab -l</c>.
</p>

<p>
Naturalmente è anche possibile non utilizzare nessun crontab di sistema. Se si è scelto
uno fra Dcron e Fcron, <e>non</e> si esegua <c>crontab /etc/crontab</c>. 
Se si è scelto Vixie cron, si dovrebbero commentare (per escludere) tutte le linee presenti in
<path>/etc/crontab</path>.
</p>

<pre caption="Commento (per l'esclusione) di tutte le linee presenti in /etc/crontab">
# <i>sed -i -e "s/^/#/" /etc/crontab</i>
</pre>

</body>
</section>
<section>
<title>Dare l'accesso a cron ad altri utenti</title>
<body>

<p>
Se si vuole che anche altri utenti al di fuori di root abbiano accesso al demone cron,
la lettura di questa sezione è obbigata; in caso contrario la si può tranquillamente saltare 
seguendo invece la sezione <uri link="#scheduling">Organizzazione dei cron-job</uri>.
</p>

<note>
Dando ad un altro utente l'accesso a crontab non gli si permetterà di eseguire cron-job
come root. Se si vuole rendere un utente in grado di editare il crontab di root,
si deve utilizzare <c>sudo</c>.
</note>

<p>
Se si vuole permettere ad un utente di utilizzare crontab, indipendentemente dall'implementazione
di cron utilizzata, questo dovrà essere prima aggiunto al gruppo cron. Ad esempio, se si
vuole aggiungere l'utente <e>wepy</e> al gruppo cron, si dovrà digitare:
</p>

<pre caption="Aggiunta di un utente al gruppo cron">
gpasswd -a wepy cron
</pre>

<p>
E' tutto quello che bisogna fare per dare ad un utente l'accesso a crontab,
se si sta utilizzando <b>Dcron</b>. Gli utilizzatori di Dcron possono passare alla
lettura della sezione successiva <uri link="#scheduling">Organizazzione dei cron-job</uri>,
tutti gli altri dovranno continuare nella normale lettura.
</p>

<p>
Nel caso di utilizzo di <b>Fcron</b>, sarà necessario editare 
<path>/etc/fcron/fcron.deny</path> e <path>/etc/fcron/fcron.allow</path>. 
Il metodo più sicuro è quello per prima cosa di negare l'accesso a tutti in
<path>/etc/fcron/fcron.deny</path> e in seguito permettere l'accesso
in maniera esplicita all'utente in <path>/etc/fcron/fcron.allow</path>.
</p>

<impo>
<b>Se nè <path>/etc/fcron/fcron.allow</path> nè <path>/etc/fcron/fcron.deny</path>
esistono, tutti gli utenti del gruppo cron saranno in grado di utilizzare frontab.</b>
<br/>
Per fcron, di default, <b>tutti gli utenti</b> del gruppo cron hanno accesso
a fcrontab.
</impo>

<pre caption="Permessi in fcron.deny">
all
</pre>

<p>Ora, se per ipotesi avessimo un utente <e>wepy</e> e volessimo che fosse in grado
di gestire le proprie operazioni pianificate, andrebbe aggiunto a <path>/etc/fcron/fcron.allow</path>
in questo modo: 
</p>

<pre caption="Permessi in fcron.allow">
wepy
</pre>

<p>
Se si è scelto <b>Vixie cron</b>, sarà solamente necessario editare
<path>/etc/cron.allow</path>. 
</p>

<impo>
E' importante notare che se esiste solamente <path>/etc/cron.allow</path>, allora 
solamente gli utenti del gruppo cron elencati al suo interno avranno accesso; 
se esiste un <path>/etc/cron.deny</path> anche vuoto, allora tutti gli utenti
del gruppo cron saranno autorizzati!
<b>Non si lasci per questo vuoto <path>/etc/cron.deny</path> se non si ha nessun
<path>/etc/cron.allow</path>.</b>
</impo>

<p>
Per esempio, se si vuole permettere l'accesso all'utente <e>wepy</e>, questo
andrebbe aggiunto a <path>/etc/cron.allow</path> come mostrato:
</p>

<pre caption="Permessi in /etc/cron.allow">
wepy
</pre>

</body>
</section>

<section id="scheduling">
<title>Organizzazione dei cron-job</title>
<body>

<p>
Il processo di configurazione dei crontab è differente a seconda dell'implementazione
di cron che si è scelta. Tutte, però, supportano gli stessi set di comandi di base:
aggiunta e sostituzione dei crontab, modifica dei crontab, cancellazione dei crontab
e visualizzazione dei cron-job in crontab. La lista seguente mostra come eseguire questi
comandi per ogni implementazione.
</p>

<table>
<tr>
  <th>Versione</th>
  <th>Comando di edit </th>
  <th>Comando di rimozione </th>
  <th>Comando di aggiunta </th>
  <th>Comando di visualizzazione </th>
</tr>
<tr>
  <ti>dcron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -d</c></ti>
  <ti><c>crontab <e>file</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
<tr>
  <ti>fcron</ti>
  <ti><c>fcrontab -e</c></ti>
  <ti><c>fcrontab -r</c></ti>
  <ti><c>fcrontab <e>file</e></c></ti>
  <ti><c>fcrontab -l</c></ti>
</tr>
<tr>
  <ti>vixie-cron</ti>
  <ti><c>crontab -e</c></ti>
  <ti><c>crontab -r</c></ti>
  <ti><c>crontab <e>file</e></c></ti>
  <ti><c>crontab -l</c></ti>
</tr>
</table>

<note>
Fcron crea un link simbolico a <c>crontab</c>.
</note>

<p>
Prima di utilizzare uno qualsiasi di questi comandi, è necessario sapere come è fatto
crontab. Ogni linea in un crontab necessita di cinque campi nell'ordine seguente:
i minuti (0-59), le ore (0-23), i giorni del mese (1-31), i mesi (1-12), e i giorni
della settimana (0-7, Lunedì è 1, Domenica è 0 e 7). I giorni della settimana e i
mesi possono essere inseriti anche tramite delle abbreviazioni inglesi di tre
lettere come mon, tue, jan, feb, ecc. Ogni campo può anche contenere un campo
di valori (ad esempio 1-5 per lun-ven), una lista di valori separati da virgole 
(ad esempio 1,2,3 o mon,tue,wed) oppure un campo di valori a <e>salti</e> 
(ad esempio 1-6/2 indica 1,3,5).
</p>

<p>
Tutto questo inizialmente può sembrare confusionario ma, con pochi esempi,
risulterà molto semplice.
</p>

<pre caption="Esempi">
<comment># Esegue /bin/false ogni minuto</comment>
*     *     *     *     *        /bin/false  

<comment># Esegue /bin/false all'1:35 di mon,tue,wed (lun,mar,mer) e il 4 di ogni mese</comment>
35    1     4     *     mon-wed  /bin/false

<comment># Esegue /bin/true alle 22:25 del 2 Marzo</comment>
25    22    2     3     *        /bin/true

<comment># Esegue /bin/false alle 2:00 ogni Lunedì Mercoledì e Venerdì</comment>
0     2     *     *     1-5/2    /bin/false
</pre>

<note>

Si noti come si debba specificare giorni della settimana e giorni del mese prima di 
combinarli. Se si ha * per uno solo di questi, l'altro campo ha precedenza, mentre
* per entrambi ha il significato di tutti i giorni.
</note>

<p>
Per provare tutto quello che si è imparato, saranno illustrati i passaggi per
inserire alcuni cron-job. Prima di tutto si crei un file chiamato <path>crons.cron</path>
e lo si editi come di seguito riportato:
</p>

<pre caption="Modifica di crons.cron">
$ <i>nano crons.cron</i>
<comment>#Min	Ore 	Giorni	Mesi	Giorno della settimana</comment>
10     3      1      1       *       /bin/echo "i don't really like cron"
30     16     *      1,2     *       /bin/echo "i like cron a little"
*      *      *      1-12/2  *       /bin/echo "i really like cron"
</pre>

<p>
Ora si può aggiungere questo crontab al sistema con un "comando di aggiunta", come mostrato
di seguito.
</p>

<pre caption="Un nuovo crontab">
# <i>crontab crons.cron</i>
</pre>

<note>
Non seguirà nessun output a questo comando a meno che non si utilizzi la redirezione dell'output.
</note>

<p>
Per verificare le operazioni pianificate, si userà l'appropriato <e>comando di
visualizzazione</e> dalla tabella precedentemente mostrata.
</p>

<pre caption="Visualizzazione dei cron-job">
# <i>crontab -l</i>
</pre>

<p>
Dovrebbe apparire una lista con il contenuto di <path>crons.cron</path>, in caso
contrario si potrebbe avere utilizzato un comando errato per l'aggiunta del crontab.
</p>

<p>
Questo crontab dovrebbe mostrare sullo schermo un "i really like cron" ogni minuto di ogni ora
di ogni giorno di ogni mese. Inoltre il crontab dovrebbe stampare un "i like cron a little"
alle 16.30 per ogni giorno di Gennaio e di Febbraio. Per finire si dovrebbe
anche vedere un "i don't really like cron" alle 3:10 del primo giorno di Gennaio.
</p>

<p>
Se si sta utilizzando Anacron, si dovrebbe continuare la lettura di questa
sezione. In caso contrario, si passi alla prossima <uri link="#editing">modifica dei crontab</uri>.
</p>

<p>
Gli utilizzatori di Anacron dovranno editare il file <path>/etc/anacrontab</path>.
Questo file ha quattro campi: il numero di giorni tra ogni esecuzione, il ritardo in
minuti dopo il quale eseguire l'operazione, il nome dell'operazione pianificata e il comando da eseguire.
</p>

<p>
Per esempio, per fare eseguire <c>echo "i like anacron"</c> ogni 5 giorni, 10
minuti dopo l'avvio di Anacron:
</p>

<pre caption="/etc/anacrontab">
5 10 wasting-time /bin/echo "i like anacron"
</pre>

<p>
Anacron termina dopo l'esecuzione di tutte le operazioni, così se si volesse che
controlli queste operazioni ogni giorno, sarà necessario utilizzare cron.
Le istruzioni alla fine della prossima sezione mostreranno come farlo.
</p>

</body>
</section>
<section id="editing">
<title>Modifica dei crontab</title>
<body>

<p>
Ovviamente, non si vuole che il proprio sistema ripeta quanto vi piaccia cron ("i really
like cron") ogni minuto. Per questo, ora si passerà alla rimozione del crontab con il 
corrispondente <e>comando di rimozione</e>. Mostreremo la lista dei cron-job successiva
a questa operazione, per essere sicuri che tutto sia andato nel verso giusto.
</p>

<pre caption="Rimozione di un crontab">
# <i>crontab -d</i>
# <i>crontab -l</i>
</pre>

<p>
Non si dovrebbe vedere nessun cron-job nell'output da <c>crontab -l</c>. Se si dovessero
vedere operazioni elencate, questo vorrà dire che i crontab non saranno stati rimossi, 
bisognerà controllare di avere usato il corretto <e>comando di rimozione</e> per la 
propria implementazione di cron.
</p>

<p>
Creato uno stato "pulito" di cron, si cercherà ora di inserire qualcosa di utile
nel crontab di <b>root</b>. Molte persone vorrebbero eseguire <c>updatedb</c> settimanalmente
per essere sicure del corretto funzionamento di <c>slocate</c>. Per aggiungere
questa operazione al crontab, bisogna per prima cosa editare ancora
<path>crons.cron</path> in modo simile a quanto di seguito riportato:
</p>

<pre caption="Un vero crontab">
22 2 * * 1    /usr/bin/updatedb
</pre>

<p>
Questo farà eseguire updatedb alle 2:22 A.M. di lunedì mattina ogni settimana.
Si dovrà ora immettere il crontab con il comando di <e>nuova operazione</e> dalla
tabella e controllare nuovamente la lista.
</p>

<pre caption="Lista dei cron-job">
# <i>crontab crons.cron</i>
# <i>crontab -l</i>
</pre>

<p>
Ora, vogliamo, ad esempio, inserire un <c>emerge --sync</c> alle operazioni
automatiche giornaliere. Si potrebbe farlo editando <path>crons.cron</path> 
e in seguito utilizzando <c>crontab crons.cron</c> proprio come prima oppure
utilizzando l'apposito <e>comando di edit</e> dalla tabella. Questo procedimento
dà la possibilità di editare il proprio crontab senza dipendere da file esterni
quali ad esempio <path>crons.cron</path>. 
</p>

<pre caption="Edit di un crontab">
# <i>crontab -e</i>
</pre>

<p>
Questo dovrebbe aprire il crontab dell'utente con un editor. Se si vuole un 
<c>emerge --sync</c> giornaliero alle 6:30 del mattino, si dovrà inserire
qualcosa del genere:
</p>

<pre caption="Un vero crontab">
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
<comment>(se si sta utilizzando anacron, si aggiunga questa linea)</comment>
30 7 * * * 	  /usr/sbin/anacron -s
</pre>

<p>
Ancora, si controlli la lista dei cron-job come fatto nell'esempio precendente per 
essere sicuri di avere inserito le operazione pianificate. Se visualizzate,
si sarà certi della correttezza delle operazioni effettuate.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Note Finali</title>
<section>
<title>Problemi</title>
<body>

<p>
Se si dovessero avere problemi nel far funzionare correttamente cron, questa sezione
potrebbe essere d'aiuto.
</p>

<ul>
<li>
  <b>Cron è in esecuzione?</b><br/>
  Esegui <c>ps ax | grep cron</c>, assicurati che cron sia mostrato!
</li>
<li>
  <b>Cron sta funzionando?</b><br/>
  Prova: * * * * * /bin/echo "foobar" &gt;&gt; /file_che_possiedi, e assicurati che funzioni
</li>
<li>
  <b>Il tuo comando funziona?</b><br/>
  Prova: * * * * * /bin/foobar &gt; /file_che_possiedi 2&gt;&amp;1, cerca gli errori
	in /file_che_possiedi
</li>
<li>
  <b>Cron riesce ad eseguire le tue operazioni?</b><br/>
  Controlla il log di cron, di solito <path>/var/log/cron.log</path> oppure
	<path>/var/log/messages</path> per gli errori
</li>
<li>
  <b>Ci sono dead.letter?</b><br/>
    Di solito cron manda mail in presenza di un problema, controlla la tua posta oppure
    guarda in ~/dead.letter
</li>
</ul>

<p>
Si ricordi che ogni implementazione di cron è differente dalle altre e il campo delle
caratteristiche/funzioni può variare di molto. Ci si assicuri di controllare
le pagine di man per crontab, fcrontab o anacrontab a seconda di quello
che si sta utilizzando.
</p>

<p>
Buona fortuna!
</p>

</body>
</section>
</chapter>

</guide>
