<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/nvidia-guide.xml,v 1.11 2007/08/02 15:33:19 scen Exp $ -->

<guide link="/doc/it/nvidia-guide.xml" lang="it">
<title>Guida nVidia per Gentoo Linux</title>

<author title="Autore">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Autore">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="Redazione">
  <mail link="curtis119@gentoo.org">M Curtis Napier</mail>
</author>
<author title="Redazione">
  <mail link="wolf31o2@gentoo.org">Chris Gianelloni</mail>
</author>
<author title="Traduzione">
  <mail link="scen@gentoo.org">Davide Cendron</mail>
</author>

<abstract>
Molti utenti di Gentoo hanno un chipset nVidia sui loro sistemi. nVidia fornisce
driver specifici per Linux per incrementare le prestazioni della propria scheda
video. Questa guida spiega come installare e configurare questi driver.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.33</version>
<date>2007-07-31</date>

<chapter>
<title>Introduzione</title>
<section>
<body>

<p>
I driver nVidia disponibili in Portage vengono rilasciati dalla stessa nVidia e
la loro compilazione si appoggia al kernel Linux. Contengono una piccola parte
binaria che svolge il pesante lavoro della comunicazione con la scheda grafica.
I driver consistono di due parti, un modulo del kernel e un driver per X11,
entrambi inclusi in un singolo pacchetto. A causa della modalità di rilascio dei
driver da parte di nVidia, bisognerà fare delle scelte prima di installarli nel
proprio sistema.
</p>

<p>
Il pacchetto <c>nvidia-drivers</c> contiene i driver più recenti rilasciati da
nVidia con il supporto per <e>tutte</e> le schede grafiche, con diverse versioni
disponibili in base a quanto vecchia è la propria scheda. Questo pacchetto usa
un'eclass per rilevare che tipo di scheda si sta usando in modo da installare la
giusta versione del driver.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Compatibilità dei driver</title>
<section>
<title>Quale versione?</title>
<body>

<p>
Il pacchetto <c>nvidia-drivers</c> supporta l'elenco completo delle schede
nVidia disponibili. Sono disponibili multiple versioni per l'installazione, in
base alla scheda che si possiede.
</p>

<p>
I possessori delle nuove schede appartenenti alle serie Geforce 8, 7, 6 e FX 5
dovrebbero usare i nuovi driver della serie 100.x.
</p>

<p>
Le schede più vecchie come quelle delle serie Geforce 3 o Geforce 4 richiedono
i driver 96xx. Per queste schede, bisogna mascherare
<c>>=x11-drivers/nvidia-drivers-1.0.9700</c> nel proprio file di configurazione
<path>/etc/portage/package.mask</path> per prevenire che vengano installate
le nuove versioni dei driver, incompatibili con la propria scheda.
</p>

<p>
Le vecchie schede basate su chip NV2x (come TNT, TNT2, Geforce e Geforce 2)
richiedono i vecchi driver 71xx (come <c>nvidia-drivers-1.0.7185</c>). Per
queste schede bisogna mascherare <c>>=nvidia-drivers-1.0.8700</c> nel proprio
file di configurazione <path>/etc/portage/package.mask</path>.
</p>

<p>
È possibile verificare se la propria scheda grafica è supportata dai driver più
recenti in
<uri>http://us.download.nvidia.com/XFree86/Linux-x86_64/100.14.11/README/appendix-a.html</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Configurare la scheda</title>
<section>
<title>Configurazione del Kernel</title>
<body>

<p>
Come accennato in precedenza, i driver nVidia si installano e vengono eseguiti
nel kernel in uso. Vengono compilati come modulo, per cui è necessario che il
kernel supporti il caricamento dei moduli.  Se è stato usato <c>genkernel
all</c> per configurare automaticamente il kernel, il supporto sarà sicuramente
abilitato. In caso contrario, verificarne l'abilitazione controllando
attentamente la configurazione:
</p>

<pre caption="Abilitare il caricamento dei moduli del kernel">
Loadable module support ---&gt;
  [*] Enable loadable module support
</pre>

<p>
E' inoltre necessario abilitare il supporto <e>Memory Type Range Register</e>:
</p>

<pre caption="Abilitare MTRR">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

<p>
Inoltre, se si ha una scheda grafica AGP, si può opzionalmente abilitare il
supporto nativo <c>agpgart</c> del kernel, compilandolo internamente o come
modulo. Se non si usa il supporto agpgart interno al kernel, allora i driver
useranno la propria implementazione <c>agpgart</c>, chiamata <c>NvAGP</c>. In
certi sistemi ciò comporta un miglioramento delle prestazioni, mentre in altri
un peggioramento delle stesse. Si dovranno valutare personalmente le due opzioni
sul proprio sistema, per ottenere i risultati migliori. Se non si è sicuri su
che supporto usare, usare l'agpgart interno del kernel:
</p>

<pre caption="Abilitare agpgart">
Device Drivers ---&gt;
Character devices ---&gt;
&lt;*&gt; /dev/agpgart (AGP Support)
</pre>

<note>
Su amd64, IOMMU controlla le impostazioni di agpgart.
</note>

</body>
</section>
<section>
<title>Note specifiche per le architetture</title>
<body>

<impo>
Per i processori x86 e AMD64, i driver interni al kernel vanno in conflitto con
i driver binari forniti da nVidia. Compilando il kernel per queste CPU, si deve
rimuovere completamente il supporto ai driver interni del kernel come mostrato:
</impo>

<pre caption="Rimuovere i driver interni del kernel">
Device Drivers ---&gt;
Graphics Support ---&gt;
&lt; &gt;   nVidia Framebuffer Support
&lt; &gt;   nVidia Riva support
</pre>

<p>
Una buona alternativa per il framebuffer è <c>VESA</c>:
</p>

<pre caption="Abilitare il supporto a VESA">
Device Drivers ---&gt;
Graphics Support ---&gt;
&lt;*&gt;   VESA VGA graphics support
</pre>

<p>
Poi, sotto "VESA driver type" scegliere o <c>vesafb</c> o <c>vesafb-tng</c>. Se
si sta usando un processore AMD64 si potrà scegliere <c>vesafb</c> piuttosto
che <c>vesafb-tng</c>:
</p>

<pre caption="Selezionare il tipo di framebuffer">
(X) vesafb
( ) vesafb-tng
</pre>

<p>
Per ulteriori informazioni, leggere
<path>/usr/src/linux/Documentation/fb/vesafb.txt</path> se si sta usando
<c>vesafb</c> o guardare nella documentazione del framebuffer in
<path>/usr/src/linux/Documentation/fb/</path>.
</p>

</body>
</section>
<section>
<title>Continuare con la configurazione del Kernel</title>
<body>

<p>
L'ebuild <c>nvidia-drivers</c> rileva automaticamente la versione del kernel
basandosi sul link simbolico <path>/usr/src/linux</path>. Assicurarsi che questo
link simbolico punti ai sorgenti corretti e che il kernel sia configurato
correttamente. Consultare la sezione di configurazione del kernel di <uri
link="/doc/it/handbook/">Manuale di installazione</uri> per i dettagli di
configurazione.
</p>

<p>
Per prima cosa, bisogna effettuare l'emerge di <c>eselect</c> (se non è già
stato installato). Se si usano i gentoo-sources-2.6.18-r4, la directory
<path>/usr/src</path> sarà:
</p>

<pre caption="Verificare il collegamento simbolico /usr/src/linux">
# <i>eselect kernel list</i>
Available kernel symlink targets:
  [1]   linux-2.6.18-gentoo-r4 *
  [2]   linux-2.6.20-gentoo-r7
  [3]   linux-2.6.20-gentoo-r8
<comment>Verificare che il kernel corretto sia marcato con un asterisco</comment>
</pre>

<p>
Nell'output riportato sopra, si noterà che il kernel
<c>linux-2.6.18-gentoo-r4</c> è marcato con un asterisco (<b>*</b>) per
mostrare che è il kernel a cui fa riferimento il collegamento simbolico.
</p>

<p>
Se il link simbolico non punta ai sorgenti corretti, bisogna aggiornare il
collegamento selezionando il numero dei sorgenti del kernel desiderati, come
nell'esempio seguente.
</p>

<pre caption="Creare/Aggiornare il link simbolico /usr/src/linux">
<comment>Selezionare il kernel corretto</comment>
# <i>eselect kernel set 1</i>
</pre>

</body>
</section>
<section>
<title>Installare i driver appropriati</title>
<body>

<p>
A questo punto si devono installare i driver.
</p>

<pre caption="Installare i driver nVidia">
# <i>emerge nvidia-drivers</i>
</pre>

<note>
I nuovi driver 100.x possono essere installati con la flag USE <c>gtk</c>
impostata, che installerà <c>media-video/nvidia-settings</c>, un amichevole
strumento grafico per monitorare e configurare diversi aspetti della propria
scheda grafica nVidia.
</note>

<impo>
Ogni volta che <uri link="/doc/it/kernel-upgrade.xml">si compilerà un nuovo
kernel</uri> o si ricompilerà quello corrente, sarà necessario lanciare
<c>emerge nvidia-drivers</c> per reinstallare i moduli nVidia. Un modo più
semplice per tenere traccia dei moduli installati tramite gli ebuild (come
<c>nvidia-drivers</c>) è installare <c>sys-kernel/module-rebuild</c>. Una volta
installato, basta eseguire <c>module-rebuild populate</c> per popolare il suo
database con un elenco dei pacchetti da ricompilare. Una volta terminata la
compilazione o la ricompilazione di un kernel, basta eseguire <c>module-rebuild
rebuild</c> per ricompilare i driver per il proprio nuovo kernel.
</impo>

<p>
Una volta completata l'installazione, lanciare <c>modprobe</c> per caricare il
modulo del kernel in memoria. Se è stato fatto un aggiornamento, bisogna prima
rimuovere il modulo precedente.
</p>

<pre caption="Caricare il modulo del kernel">
# <i>lsmod | grep nvidia &amp;&amp; rmmod nvidia</i>
# <i>modprobe nvidia</i>
</pre>

<p>
Per evitare di dover caricare manualmente il modulo ad agni avvio, è possibile
eseguire automaticamente questa operazione ad ogni accensione del sistema
aggiungendo la voce <c>nvidia</c> a
<path>/etc/modules.autoload.d/kernel-2.6</path>. Non dimenticarsi di lanciare
<c>update-modules</c> subito dopo.
</p>

<impo>
Se <c>agpgart</c> è stato compilato come modulo, bisogna aggiungerlo a
<path>/etc/modules.autoload.d/kernel-2.6</path>.
</impo>

<pre caption="Eseguire update-modules">
# <i>update-modules</i>
</pre>

</body>
</section>
<section>
<title>Configurare il server X</title>
<body>

<p>
Una volta che i driver appropriati sono installati è necessario configurare
il server X per usare i driver <c>nvidia</c> al posto dei driver predefiniti
<c>nv</c>.
</p>

<p>
Aprire <path>/etc/X11/xorg.conf</path> con l'editor preferito (per esempio
<c>nano</c> o <c>vim</c>) e andare alla sezione <c>Device</c>. In quella
sezione, cambiare cambiare la linea <c>Driver</c>:
</p>

<pre caption="Cambiare nv in nvidia nella configurazione di X Server">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>
  VideoRam   65536
EndSection
</pre>

<p>
Spostarsi nella sezione <c>Module</c> ed assicurarsi che il modulo <c>glx</c>
venga caricato mentre il modulo <c>dri</c> no.
</p>

<pre caption="Aggiornare la sezione Module">
Section "Module"
  <comment>(...)</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>(...)</comment>
EndSection
</pre>

<p>
Poi, nella sezione <c>Screen</c>, assicurarsi che la direttiva
<c>DefaultDepth</c> sia settata a 16 o a 24, o che si abbia solamente la
subsezione <c>Display</c> con <c>Depth</c> settata a 16 o 24. Senza di
questo, le estensioni nVidia GLX non funzioneranno.
</p>

<pre caption="Aggiornare la sezione Screen">
Section "Screen"
  <comment>(...)</comment>
  <i>DefaultDepth 16</i>
  Subsection "Display"
  <comment>(...)</comment>
EndSection
</pre>

<p>
Lanciare <c>eselect </c> in modo che X server usi le librerie nVidia GLX:
</p>

<pre caption="Lanciare eselect">
# <i>eselect opengl set nvidia</i>
</pre>

</body>
</section>
<section>
<title>Aggiungere gli utenti al gruppo video</title>
<body>

<p>
È necessario aggiungere l'utente al gruppo <c>video</c> per permettergli di
accedere ai file di periferica nVidia.
</p>

<pre caption="Aggiungere gli user al gruppo video">
# <i>gpasswd -a tuoutente video</i>
</pre>

<p>
Questo potrebbe non essere necessario se non si usa <c>udev</c>, ma non arreca
nessun danno e rende la configurazione già pronta per futuri aggiornamenti.
</p>

</body>
</section>
<section>
<title>Testare la scheda</title>
<body>

<p>
Per testare la scheda nVidia, avviare X e dare il comando <c>glxinfo</c>,
incluso nel pacchetto <c>mesa-progs</c>. Il rendering diretto dovrebbe essere
attivato:
</p>

<pre caption="Verificare lo stato del rendering diretto">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
Per monitorare gli FPS (Frame Per Second), lanciare <c>glxgears</c>
</p>

</body>
</section>
<section>
<title>Attivare nvidia Support</title>
<body>

<p>
Alcuni strumenti come <c>mplayer</c> e <c>xine-lib</c> usano una USE flag
chiamata <c>xvmc</c> che abilita il supporto XvMCNVIDIA, utile quando si
guardano film ad alta risoluzione. Aggiungere la voce <c>xvmc</c> tra le USE
presenti in <path>/etc/make.conf</path> oppure aggiungerla come USE flag a
<c>media-video/mplayer</c> e/o <c>media-libs/xine-lib</c> in
<path>/etc/portage/package.use</path>.
</p>

<p>
Ci sono anche alcune applicazioni che usano la flag USE <c>nvidia</c>, pertanto
è possibile aggiungerla a <path>/etc/make.conf</path>.
</p>

<p>
Infine lanciare <c>emerge -uD --newuse world</c> per reinstallare le
applicazioni che beneficeranno dal cambiamento delle USE flag.
</p>

</body>
</section>
<section>
<title>Usare lo strumento Nvidia Setting</title>
<body>

<p>
nVidia fornisce un strumento di configurazione che permette di monitorare e
cambiare le impostazioni grafiche senza riavviare il server X ed è presente in
Portage tramite il pacchetto <c>media-video/nvidia-settings</c>. Come menzionato
in precedenza, tale pacchetto verrà installato automaticamente se si installa
<c>>=x11-drivers/nvidia-drivers-100.14.09</c> con la flag USE <c>gtk</c>
impostata in <path>/etc/make.conf</path> o in
<path>/etc/portage/package.use</path>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Risoluzione dei problemi</title>
<section>
<title>Far funzionare il 2D su macchine con 4 Gb o più di memoria</title>
<body>

<p>
Se si hanno problemi con l'accelerazione nVidia 2D è probabile che non si
riesca ad impostare un range write-combining con MTRR. Per verificare
controllare il contenuto di <path>/proc/mtrr</path>
</p>

<pre caption="Verificare se il write-combining è abilitato">
# <i>cat /proc/mtrr</i>
</pre>

<p>
Ogni linea dovrebbe contenere "write-back" o "write-combining". Se si nota
una linea con "uncachable" sarà necessario cambiare l'impostazione del BIOS.
</p>

<p>
Riavviare ed entrare nel BIOS,  e cercare le impostazioni MTRR (probabilmente
sotto "Impostazioni della CPU"). Cambiare le impostazioni da "continuo" a
"discreto" e avviare Linux. Ora si troverà che non c'è più "uncachable" e
l'accelerazione 2D funzionerà senza errori.
</p>

</body>
</section>
<section>
<title>Tentando di caricare il modulo del kernel si riceve il messaggio "no such
device"</title>
<body>

<p>
Questo accade generalmente quando si ha una scheda video non compatibile.
Assicurarsi di avere una scheda grafica NVidia-powered (lo si può verificare
usando <c>lspci</c>)
</p>

<p>
Se si è sicuri di avere una scheda nVidia, controllare il BIOS e verificare
che la direttiva <e>Assign IRQ to VGA</e> sia impostata.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Configurazione per esperti</title>
<section>
<title>Documentazione</title>
<body>

<p>
I driver nVidia vengono forniti con una documentazione completa. Questa viene
installata in <c>/usr/share/doc</c> e può essere consultata con il seguente
comando:
</p>

<pre caption="Consultare la documentazione NVIDIA">
$ <i>less /usr/share/doc/nvidia-drivers-*/README.gz</i>
</pre>

</body>
</section>
<section>
<title>Parametri dei moduli del Kernel</title>
<body>

<p>
Il modulo <c>nvidia</c> accetta un numero di parametri (opzioni) che si possono
usare per migliorare il comportamento dei driver. Molti di questi sono
menzionati nella documentazione. Per aggiungere o cambiare il valore di questi
modificare il file <c>/etc/modules.d/nvidia</c>. Ricordarsi di eseguire
<c>update-modules</c> a seguito delle modifiche, e che è necessario ricaricare
il modulo <c>nvidia</c> per applicare la nuove impostazioni.
 </p>

<pre caption="Impostazione delle opzioni nvidia">
<comment>(Modificare /etc/modules.d/nvidia con l'editor preferito)</comment>
# <i>nano -w /etc/modules.d/nvidia</i>
<comment>(Aggiornare le informazioni sul modulo)</comment>
# <i>update-modules</i>
<comment>(Scaricare il modulo nvidia) </comment>
# <i>modprobe -r nvidia</i>
<comment>(...e caricarlo nuovamente)</comment>
# <i>modprobe nvidia</i>
</pre>

</body>
</section>
<section>
<title>Configurazione Avanzata di X</title>
<body>

<p>
Le librerie GLX contengono una serie di opzioni che possono essere configurate
per controllare la configurazione dell'uscita TV, il dual display, la
rilevazione della frequenza del monitor ecc... Anche per queste esiste una
documentazione dettagliata.
</p>

<p>
Se si desidera usare una di queste opzioni, specificarla nella relativa sezione
Device del file di configurazione di X (generalmente <c>/etc/X11/xorg.conf</c>).
Per esempio, si supponga di voler disabilitare il logo di avvio:
</p>

<pre caption="Configurazione avanzata nvidia nella configurazione di X">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  <i>Option     "NoLogo" "true"</i>
  VideoRam   65536
EndSection
</pre>

</body>
</section>
</chapter>
</guide>