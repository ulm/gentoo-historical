<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/nvidia-guide.xml,v 1.1 2005/02/04 18:55:00 so Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/it/nvidia-guide.xml" lang="it">

<title>Guida all' installazione dei  driver nVidia</title>

<author title="Autore">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>

<author title="Traduzione">
    <mail link="gianx@email.it">Gianluca Mazza</mail>
</author>

<abstract>
Molti Gentooisti hanno un chipset nVidia sui loro sistemi. nVidia fornisce driver 
specifici per Linux per incrementare le performance della vostra scheda video. 
Questa guida spiega come installare e configurare questi driver.
</abstract>

<license/>

<version>1.7</version>
<date>2004-12-02</date>

<chapter>
<title>Configurare la scheda</title>
<section>
<title>Installare i driver appropriati</title>
<body>

<p>
I driver nVidia includono i moduli del kernel che possono integrare il 
kernel. Per fare questo, il kernel deve supportare il caricamento
dei moduli. Se si usa <c>gentkernel</c> per configurare il kernel, è già settato.
In caso contrario, verificare la configurazione del kernel per accertarsi
che il supporto sia abilitato:
</p>

<pre caption="Abilitare il caricamento dei moduli">
Loadable module support ---&gt;
  [*] Enable loadable module support
</pre>

<p>
E' necessario anche abilitare <e>Memory Type Range Register</e> nel kernel: 
</p>

<pre caption="Enabling MTRR">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

<p>
I moduli e le librerie nVidia sono organizzate in due pacchetti: <c>nvidia-glx</c>
e <c>nvidia-kernel</c>. Il primo è la libreria X11 e GLX mentre il secondo è 
modulo del kernel. <c>nvidia-glx</c> dipende da <c>nvidia-kernel</c>, quindi 
basta installare <c>nvidia-glx</c>:
</p>

<pre caption="Installare i moduli nVidia">
# <i>emerge nvidia-glx</i>
</pre>

<p>
Finita l'installazione, lanciare <c>modprobe nvidia</c> per caricare il modulo 
del kernel in memoria.
</p>

<pre caption="Caricare il modulo del kernel">
# <i>modprobe nvidia</i>
</pre>

<p>
Probabilmente si vorrà che questo venga fatto ogni volta che si avvia il sistema, perciò editare
<path>/etc/modules.autoload.d/kernel-2.6</path> (oppure <path>kernel-2.4</path>) e 
aggiungere <c>nvidia</c>. Non dimenticare di lanciare <c>modules-update</c> dopo.
</p>

<pre caption="Lanciare modules-update">
# <i>modules-update</i>
</pre>

</body>
</section>
<section>
<title>Configurare X Server</title>
<body>

<p>
Dopo aver installato i driver appropriati è necessario configurare X Server
(XFree86 o Xorg) per usare i driver <c>nvidia</c> invece di quelli di default
<c>nv</c> driver.
</p>

<p>
Editare <path>/etc/X11/XF86Config </path> (oppure <path>/etcX11/xorg.conf</path>) con 
l' editor preferito (per esempio <c>nano</c> <c>vim</c>) e andare sulla sezione
<c>Device</c>. In questa sezione, cambiare la linea <c>Driver</c>:
</p>

<pre caption="Cambiare nv in nvidia nella configurazione di X Server">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>
  VideoRam   65536
EndSection
</pre>

<p>
Poi andare nella sezione <c>Module</c> ed assicurarsi che il modulo <c>glx</c> venga caricato 
mentre il modulo <c>dri</c> no.
</p>

<pre caption="Aggiornare la sezione Module">
Section "Module"
  <comment>(...)</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>(...)</comment>
EndSection
</pre>

<p>
Lanciare <c>opengl-update</c> in modo che X server usi le librerie nVidia GLX: 
</p>

<pre caption="Lanciare opengl-update">
# <i>opengl-update nvidia</i>
</pre>

</body>
</section>
<section>
<title>Aggiungere gli utenti al gruppo video</title>
<body>

<p>
E' necessario aggiungere gli utenti al gruppo <c>video</c> in modo che abbiano accesso ai 
file della periferica nvidia:
</p>

<pre caption="Aggiungere gli utenti al gruppo video">
# <i>gpasswd -a youruser video</i>
</pre>

<p>
Questo potrebbe non essere necessario se non si usa <c>udev</c> ma neanche
danneggiare il sistema e renderlo a prova di futuro :) 
</p>

</body>
</section>
<section>
<title>Testare la scheda</title>
<body>

<p>
Per testare la scheda nVidia, avviare X e dare il comando <c>glxinfo | grep direct</c>.
Si dovrebbe avere il direct rendering attivato:
</p>

<pre caption="Verificare lo stato del direct rendering">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
Per monitorare l' FPS, lanciare <c>glxgears</c>
</p>

</body>
</section>
</chapter>

<chapter>
<title>Risoluzione dei problemi</title>
<section>
<title>Far lavorare 2D su macchine con 4 Gb o piu' di memoria</title>
<body>

<p>
Se si hanno problemi con l'accelerazione nVidia 2D è probabile che non si
riesca a settare un range write-combining con MTRR. Per verificare controllare
il contenuto di <path>/proc/mtrr</path>
</p>

<pre caption="Verificare se write-combining è abilitato">
# <i>cat /proc/mtrr</i>
</pre>

<p>
Ogni linea dovrebbe contenere "write-back" o "write-combing". Se si nota
una linea con "uncachable" sarà necessario cambiare l' impostazione del BIOS.
</p>

<p>
Riavviare e entrare nel BIOS,  e cercare le impostazioni MTRR (probabilmente sotto
"Impostazioni della CPU"). Cambiare le impostazioni da "continuo" a "discreto" e avviare Linux.
Ora si troverà che non c'è più "uncachable" e  l'accelerazione 2D funziona senza errori.
</p>

</body>
</section>
<section>
<title>Ho ricevuto avvisi su 4K stack sizes non supportati</title>
<body>

<p>
I pacchetti  <c>nvidia-kernel</c>  più vecchi di 1.0.6106 supportano solo kernel che usano 8K stack size.
I kernel più recenti (2.6.6 e superiori) hanno il supporto per lo stack size 4K. Non selezionare 4K stack size nel kernel
se si usano pachetti <c>nvidia-kernel</c>. Questa opzione si trova nella sezione <c>Kernel Hacking</c>.
</p>

</body>
</section>
</chapter>

</guide>
