<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/nvidia-guide.xml,v 1.6 2006/11/04 22:07:08 so Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/it/nvidia-guide.xml" lang="it">
<title>Guida nVidia per Gentoo Linux</title>

<author title="Autore">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Redattore">
  <mail link="curtis119@gentoo.org">M Curtis Napier</mail>
</author>
<author title="Redattore">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="Redattore">
  <mail link="wolf31o2@gentoo.org">Chris Gianelloni</mail>
</author>
<author title="Traduzione">
    <mail link="gianx@email.it">Gianluca Mazza</mail>
</author>
<author title="Traduzione">
	Davide Cendron
</author>

<abstract>
Molti Gentooisti hanno un chipset nVidia sui loro sistemi. nVidia fornisce
driver specifici per Linux per incrementare le performance della vostra
scheda video.  Questa guida spiega come installare e configurare questi
driver.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.28</version>
<date>2006-10-23</date>

<chapter>
<title>Introduzione</title>
<section>
<body>

<p>
nVidia rilascia i propri driver Linux che forniscono buone performance e
piena accelerazione 3D. Ci sono due driver in Portage: <c>nvidia-drivers</c> per
le schede video nVidia più recenti, <c>nvidia-legacy-drivers</c> per le schede
video più vecchie.
</p>

<note>
In precedenza Gentoo forniva ebuild separati per il modulo nVidia del kernel
(<c>nvidia-kernel</c>) e le librerie GLX per X11 (<c>nvidia-glx</c>). Questi
ebuild sono stati rimossi dall'albero di Portage in favore di
<c>nvidia-drivers</c> e <c>nvidia-legacy-drivers</c>. Se si sta usando
<c>nvidia-kernel</c> e <c>nvidia-glx</c> è consigliabile migrare ai nuovi
pacchetti.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Configurare la scheda</title>
<section>
<title>Configurazione del Kernel</title>
<body>

<p>
Come accennato in precedenza, i driver nVidia si installano e girano nel kernel
in uso. Vengono compilati come modulo, per cui è necessario che il kernel
supporti il caricamento dei moduli.  Se si ha usato <c>genkernel</c> per
configurare automaticamente il kernel, il supporto sarà sicuramente abilitato.
In caso contrario, verificare attentamente che il kernel sia abilitato a questo
supporto:
</p>

<pre caption="Abilitare il caricamento dei moduli del kernel">
Loadable module support ---&gt;
  [*] Enable loadable module support
</pre>

<p>
E' anche necessario abilitare <e>Memory Type Range Register</e> nel kernel:
</p>

<pre caption="Abilitare MTRR">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

<p>
Inoltre, se si ha una scheda grafica AGP, si può opzionalmente abilitare il
supporto <c>agpgart</c> al proprio kernel, compilandolo internamente o come
modulo. Se non si usa il supporto agpgart interno al kernel, allora i driver
useranno la propria implementazione <c>agpgart</c>, chiamata <c>NvAGP</c>. In
certi sistemi ciò comporta un miglioramento delle prestazioni, mentre in altri
un peggioramento delle stesse. Si dovranno valutare personalmente le due opzioni
sul proprio sistema, per ottenere i risultati migliori. Se non si è sicuri su
che supporto usare, si usi l'agpgart interno del kernel:
</p>

<pre caption="Abilitare agpgart">
Device Drivers ---&gt;
Character devices ---&gt;
&lt;*&gt; /dev/agpgart (AGP Support)
</pre>

</body>
</section>
<section>
<title>Note specifiche per le architetture</title>
<body>

<impo>
Per i processori x86 e AMD64, i driver interni al kernel vanno in conflitto con
i driver binari forniti da nVidia. Se si compilerà il kernel per queste CPU, si
deve rimuovere completamente il supporto ai driver interni del kernel come
mostrato:
</impo>

<pre caption="Rimuovere i driver interni del kernel">
Device Drivers ---&gt;
Graphics Support ---&gt;
&lt; &gt;   nVidia Framebuffer Support
&lt; &gt;   nVidia Riva support
</pre>

<p>
Una buona alternativa per il framebuffer è <c>VESA</c>:
</p>

<pre caption="Abilitare il supporto a VESA">
Device Drivers ---&gt;
Graphics Support ---&gt;
&lt;*&gt;   VESA VGA graphics support
</pre>

<p>
Poi, sotto "VESA driver type" si scelga o <c>vesafb</c> o <c>vesafb-tng</c>. Se
si sta usando un processore AMD64 si potrà scegliere <c>vesafb</c> piuttosto
che <c>vesafb-tng</c>:
</p>

<pre caption="Selezionare il tipo di framebuffer">
(X) vesafb
( ) vesafb-tng
</pre>

<p>
Per ulteriori informazioni, si legga
<path>/usr/src/linux/Documentation/fb/vesafb.txt</path> se si sta usando
<c>vesafb</c> o si guardi nella documentazione del framebuffer in
<path>/usr/src/linux/Documentation/fb/</path>.
</p>

</body>
</section>
<section>
<title>Continuare con la configurazione del Kernel</title>
<body>

<p>
Gli ebuild <c>nvidia-drivers</c> e <c>nvidia-legacy-drivers</c> rilevano
automaticamente la versione del kernel basandosi sul link simbolico
<path>/usr/src/linux</path>. Assicurarsi che questo link simbolico punti ai
sorgenti corretti e che il kernel sia configurato correttamente.  Consultare la
sezione di configurazione del kernel di <uri link="/doc/it/handbook/">Manuale di
installazione</uri> per i dettagli di configurazione
</p>

<p>
Se si usano i gentoo-sources-2.6.11-r6, la directory <path>/usr/src</path>
sarà:
</p>

<pre caption="Verificare il collegamento simbolico /usr/src/linux">
# <i>cd /usr/src</i>
# <i>ls -l</i>
<comment>(Controllare che linux punti alla giusta directory)</comment>
lrwxrwxrwx   1 root root   22 Apr 23 18:33 linux -&gt; linux-2.6.11-gentoo-r6
drwxr-xr-x   4 root root  120 Apr  8 18:56 linux-2.4.26-gentoo-r4
drwxr-xr-x  18 root root  664 Dec 31 16:09 linux-2.6.10
drwxr-xr-x  18 root root  632 Mar  3 12:27 linux-2.6.11
drwxr-xr-x  19 root root 4096 Mar 16 22:00 linux-2.6.11-gentoo-r6
</pre>

<p>
Nell' output riportato sopra, si noterà che i link simbolico <c>linux</c>
punta al kernel <c>linux-2.6.11-gentoo-r6</c>.
</p>

<p>
Se il link simbolico non punta ai sorgenti corretti, si può aggiornare il
link in questo modo:
</p>

<pre caption="Creare/Aggiornare il link simbolico /usr/src/linux">
# <i>cd /usr/src</i>
# <i>ln -snf linux-2.6.11-gentoo-r6 linux</i>
</pre>

</body>
</section>
<section>
<title>Opzionale: Verificare il supporto per schede obsolete</title>
<body>

<note>
Sfortunatamente, alcune schede video obsolete non sono supportate dalla nuova
versione di <c>nvidia-drivers</c>. nVidia fornisce una <uri
link="http://www.nvidia.com/object/IO_18897.html">lista delle schede
supportate</uri>. Si controlli la lista prima di installare il driver.
</note>

<p>
La seguente è una lista di schede video obsolete <b>non supportate</b>:
</p>

<pre caption="Schede non supportate">
TNT2
TNT2 Pro
TNT2 Ultra
TNT2 Model 64 (M64)
TNT2 Model 64 (M64) Pro
Vanta
Vanta LT
GeForce 256
GeForce DDR
GeForce2 GTS
GeForce2 Pro
GeForce2 Ti
GeForce2 Ultra
GeForce2 MX Integrated graphics
Quadro
Quadro2 Pro
Quadro2 EX
</pre>

<p>
Se la vostra scheda è presente nell'elenco di quelle obsolete, si dovrà
installare il pacchetto <c>nvidia-legacy-driver</c> per ottenere il supporto 3D.
</p>

</body>
</section>
<section>
<title>Installare i driver appropriati</title>
<body>

<p>
A questo punto si devono installare i driver.
</p>

<pre caption="Installare i driver nVidia">
<comment>(Se si ha una scheda non elencata tra quelle obsolete nell'elenco precedente)</comment>
# <i>emerge nvidia-drivers</i>
<comment>(Se si ha una scheda tra quelle obsolete)</comment>
# <i>emerge nvidia-legacy-drivers</i>
</pre>

<impo>
Ogni qual volta <uri link="/doc/it/kernel-upgrade.xml"> si compilerà un nuovo
kernel</uri> o si ricompilerà quello corrente, sarà necessario lanciare
<c>emerge nvidia-drivers</c> o <c>emerge nvidia-legacy-drivers</c> per
reinstallare i moduli nVidia.
</impo>

<p>
Una volta completata l'installazione, lanciare <c>modprobe</c> per caricare il
modulo del kernel in memoria. Se si ha effettuato un aggiornamento, si deve
prima rimuovere il modulo precedente.
</p>

<pre caption="Caricare il modulo del kernel">
# <i>lsmod | grep nvidia &amp;&amp; rmmod nvidia</i>
# <i>modprobe nvidia</i>
</pre>

<p>
Per evitare di dover caricare manualmente il modulo ad agni avvio, si vorrà
probabilmente fare in modo che che questo avvenga in automatico ad ogni
accensione del sistema, per cui si dovrà aggiungere la voce <c>nvidia</c> a
<path>/etc/modules.autoload.d/kernel-2.6</path> (oppure
<path>kernel-2.4</path>, in relazione alla versione di kernel usata).
Non dimenticarsi di lanciare <c>modules-update</c> subito dopo.
</p>

<impo>
Se si ha compilato <c>agpgart</c> come modulo, si dovrà aggiungerlo a
<path>/etc/modules.autoload.d/kernel-2.6</path> (o <path>kernel-2.4</path>, in
base alla propria versione del kernel).
</impo>

<pre caption="Lanciare modules-update">
# <i>modules-update</i>
</pre>

</body>
</section>
<section>
<title>Configurare il server X</title>
<body>

<p>
Una volta che i driver appropriati sono installati è necessario configurare
il server X per usare i driver <c>nvidia</c> al posto dei driver di default
<c>nv</c>.
</p>

<p>
Aprire <path>/etc/X11/xorg.conf</path> con l'editor preferito (per esempio
<c>nano</c> o <c>vim</c>) e andare alla sezione <c>Device</c>. In quella sezione
, cambiare cambiare la linea <c>Driver</c>:
</p>


<pre caption="Cambiare nv in nvidia nella configurazione di X Server">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>
  VideoRam   65536
EndSection
</pre>

<p>
Poi andare nella sezione <c>Module</c> ed assicurarsi che il modulo
<c>glx</c> venga caricato mentre il modulo <c>dri</c> no.
</p>

<pre caption="Aggiornare la sezione Module">
Section "Module"
  <comment>(...)</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>(...)</comment>
EndSection
</pre>

<p>
Poi nella sezione <c>Screen</c>, assicurarsi che la direttiva
<c>DefaultDepth</c> sia settata a 16 o a 24, o che si abbia solamente la
subsezione <c>Display</c> con <c>Depth</c> settata a 16 o 24. Senza di
questo, le estensioni nVidia GLX non funzioneranno.
</p>

<pre caption="Aggiornare la sezione Screen">
Section "Screen"
  <comment>(...)</comment>
  <i>DefaultDepth 16</i>
  Subsection "Display"
  <comment>(...)</comment>
EndSection
</pre>

<p>
Lanciare <c>eselect </c> in modo che X server usi le librerie nVidia GLX:
</p>

<pre caption="Lanciare eselect">
# <i>eselect opengl set nvidia</i>
</pre>

</body>
</section>
<section>
<title>Aggiungere gli utenti al gruppo video</title>
<body>

<p>
Si deve aggiungere l'utente al gruppo <c>video</c> in modo che possa accedere
ai file della periferica nvidia.
</p>

<pre caption="Aggiungere gli user al gruppo video">
# <i>gpasswd -a youruser video</i>
</pre>

<p>
Questo potrebbe non essere necessario se non si usa <c>udev</c>, ma non arreca
nessun danno e rende la configurazione già pronta per futuri aggiornamenti.
</p>

</body>
</section>
<section>
<title>Testare la scheda</title>
<body>

<p>
Per testare la scheda nVidia, avviare X e dare il comando <c>glxinfo | grep
direct</c>.  Si dovrebbe avere il direct rendering attivato:
</p>

<pre caption="Verificare lo stato del direct rendering">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
Per monitorare gli FPS (Frame Per Second), lanciare <c>glxgears</c>
</p>

</body>
</section>
<section>
<title>Attivare nvidia Support</title>
<body>

<p>
Alcuni strumenti come <c>mplayer</c> e <c>xine-lib</c> usano una USE flag
chiamata "nvidia" che abilita il supporto XvMCNVIDIA, utile quando si guardano
film ad alta risoluzione. Aggiungere "nvidia" tra le USE presenti in
<path>/etc/make.conf</path> oppure aggiungerlo come USE flag a
<c>media-video/mplayer</c> e/o <c>media-libs/xine-lib</c> in
<path>/etc/portage/package.use</path>.
</p>

<p>
Poi lanciare <c>emerge -uD --newuse world</c> per reinstallare le applicazioni
che beneficeranno dal cambiamento delle USE flag.
</p>

</body>
</section>
<section>
<title>Usare il tool Nvidia Setting</title>
<body>

<p>
Dalla versione 1.0.6106 NVvdia  fornisce un strumento di configurazione,
che permette di cambiare le impostazioni grafiche senza riavviare X server ed è
presente in Portage come <c>media-video/nvidia-settings</c>
</p>

</body>
</section>
</chapter>

<chapter>
<title>Risoluzione dei problemi</title>
<section>
<title>Far lavorare 2D su macchine con 4 Gb o più di memoria</title>
<body>

<p>
Se si hanno problemi con l'accelerazione nVidia 2D è probabile che non si
riesca a settare un range write-combining con MTRR. Per verificare
controllare il contenuto di <path>/proc/mtrr</path>
</p>

<pre caption="Verificare se il write-combining è abilitato">
# <i>cat /proc/mtrr</i>
</pre>

<p>
Ogni linea dovrebbe contenere "write-back" o "write-combining". Se si nota
una linea con "uncachable" sarà necessario cambiare l' impostazione del BIOS.
</p>


<p>
Riavviare ed entrare nel BIOS,  e cercare le impostazioni MTRR (probabilmente
sotto "Impostazioni della CPU"). Cambiare le impostazioni da "continuo" a
"discreto" e avviare Linux. Ora si troverà che non c'è più "uncachable" e
l'accelerazione 2D funzionerà senza errori.
</p>

</body>
</section>

<section>
<title>
Mi aspettavo che venisse caricato il modulo del kernel e ho ricevuto "no such
device"
</title>
<body>

<p>
Questo accade generalmente quando si ha una scheda video non compatibile.
Assicurarsi di avere una scheda grafica NVidia-powered (lo si può verificare
usando <c>lspci</c>)
</p>

<p>
Se si è sicuri di avere una scheda nVidia, controllare il BIOS e verificare
che la direttiva <e>Assign IRQ to VGA</e> sia settata.
</p>

</body>
</section>

</chapter>

<chapter>
<title>Configurazione per esperti</title>
<section>
<title>Documentazione</title>
<body>

<p>
I driver nVidia vengono forniti con una documentazione completa.
Questa viene installata in <c>/usr/share/doc</c> e può essere
consultata con il seguente comando:
</p>

<pre caption="Consultare la documentazione NVIDIA">
<comment>(per nvidia-drivers)</comment>
$ <i>less /usr/share/doc/nvidia-drivers-*/README.gz</i>
<comment>(per nvidia-legacy-drivers)</comment>
$ <i>less /usr/share/doc/nvidia-legacy-drivers-*/README.gz</i>
</pre>

</body>
</section>
<section>
<title>Parametri dei moduli del Kernel</title>
<body>

<p>
Il modulo <c>nvidia</c> accetta un numero di parametri (opzioni) che si
possono usare per migliorare il comportamento dei driver. Molti di questi
sono menzionati nella documentazione. Per aggiungere o cambiare il valore di
questi editare il file <c>/etc/modules.d/nvidia</c>. Ricordarsi di eseguire
<c>modules-update</c> dopo aver editato questo file, e sarà necessario
ricaricare il modulo <c>nvidia</c> prima che la nuova impostazione abbia
effetto.
 </p>


<pre caption="Settaggio delle opzioni nvidia">
<comment>(Editare /etc/modules.d/nvidia con l'editor preferito)</comment>
# <i>nano -w /etc/modules.d/nvidia</i>
<comment>(Aggiornare le informazioni sul modulo)</comment>
# <i>modules-update</i>
<comment>(Scaricare il modulo nvidia) </comment>
# <i>modprobe -r nvidia</i>
<comment>(...e caricarlo nuovamente)</comment>
# <i>modprobe nvidia</i>
</pre>


</body>
</section>
<section>
<title>Configurazione Avanzata di X</title>
<body>

<p>
Le librerie GLX contengono una serie di opzioni che possono essere
configurate.  Questi controllano la configurazione dell'uscita TV, il dual
display, la rilevazione della frequenza del monitor etc...Anche per queste
esiste una documentazione dettagliata.
</p>

<p>
Se si desidera usare una di queste opzioni, la si deve specificare nella
relativa sezione Device del file di configurazione di X (generalmente
<c>/etc/X11/xorg.conf</c>). Per esempio, supponiamo di voler disabilitare il
logo di avvio:
</p>

<pre caption="Configurazione avanzata nvidia nella configurazione di X">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  <i>Option     "NoLogo" "true"</i>
  VideoRam   65536
EndSection
</pre>

</body>
</section>
</chapter>

</guide>

