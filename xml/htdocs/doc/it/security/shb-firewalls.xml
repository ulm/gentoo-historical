<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/security/shb-firewalls.xml,v 1.1 2006/04/12 12:20:09 so Exp $ -->
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>

<version>1.1</version>
<date>2005-10-16</date>

<section>
<title>Un firewall</title>
<body>

<p>
Le persone spesso pensano che un firewall fornisce la massima sicurezza, ma
non è così. Nella maggior parte dei casi un firewall configurato male
fornisce meno sicurezza che non averne uno installato. Un firewall inoltre è
una parte di software e tale dovrebbe essere trattato, perchè può benissimo
contenere bug.
</p>

<p>
Quindi è consigliato pensarci prima di installare un firewall. Se ne ha
veramente bisogno? Se si pensa che è necessario, allora scrivete da una parte
per cosa dovrebbe funzionare, quale tipo di firewall e chi se ne dovrebbe
occupare. Ma prima si legga questa guida.
</p>

<p>
I firewall sono usati per due scopi:
</p>

<ul>
<li>Per tenere (worm/attaccanti) fuori</li>
<li>Per tenere (impiegati/bambini) dentro</li>
</ul>

<p>
Ci sono tre tipi di firewall:
</p>

<ul>
<li>Filtraggio di pacchetti</li>
<li>Circuit relay</li>
<li>Gateway di applicazione</li>
</ul>

<p>
Un firewall dovrebbe essere un sistema dedicato, che non esegue servizi (o
che esegue solo <c>sshd</c>), come consigliato da questa guida.
</p>

</body>
</section>
<section>
<title>Filtraggio di pacchetti</title>
<body>

<p>
Tutto il trafico di rete è mandato sotto forma di pacchetti. Una grande
quantità di traffico è divisa in piccoli pacchetti per facilitare la
gestione, e poi riassemblata quando arriva a destinazione. Nell'intestazione
di ogni pacchetto ci sono informazioni su come e dove dovrebbe essere
portato. E queste informazioni sono quelle che usa un filtraggio di
pacchetti. Il filtraggio è basato su:
</p>

<ul>
<li>Accettare o meno pacchetti basati sull'indirizzo IP
sorgente o di destinazione</li>
<li>Accettare o meno pacchetti basati sulla porta sorgente o di destinazione</li>
<li>Accettare o meno pacchetti basati sul protocollo</li>
<li>Accettare o meno pacchetti basati sulle flag con un protocollo specifico</li>
</ul>

<p>
In altre parole, questo filtraggio è basato su tutti i dati con una
intestazione del pacchetto e non sul loro contenuto.
</p>

<p>
Svantaggi:
</p>

<ul>
<li>
  L'informazione di un indirizzo in un pacchetto può essere un indirizzo IP
	falso (o come si dice <e>spoofed</e> dal mittente).
</li>
<li>
  I dati o le richieste in un pacchetto che ha avuto il permesso, possono
	contenere dati non desiderati che l'attaccante può usare per sfruttare bug
	nei servizi o nel firewall
</li>
<li>Un suo fallimento può generare gravi problemi al sistema</li>
</ul>

<p>
Vantaggi:
</p>

<ul>
<li>Semplice e facile da installare</li>
<li>
  Può dare avvisi di un possibile attacco prima che questo accada (per
	esempio port scan)
</li>
<li>Buono per fermare attacchi SYN</li>
</ul>

<p>
Esempi di filtraggio di pacchetti su Linux:
</p>

<ul>
<li><uri link="http://www.iptables.org">Iptables</uri></li>
<li>
  <uri link="http://www.linuxdocs.org/HOWTOs/IPCHAINS-HOWTO.html">Ipchains</uri>
</li>
<li><uri link="http://www.smoothwall.org">SmoothWall</uri></li>
</ul>
<!--FIXME: should SmoothWall really be included, since it uses iptables?-->
<note>
E' consigliato usare iptables. Ipchains è obsoleto.
</note>

</body>
</section>
<section>
<title>Circuit relay</title>
<body>

<p>
Un circuito di livello gateway è un firewall che convalida le connessioni
prima che sia accettato lo scambio dati. Non accetta o nega solo pacchetti
basati sull'intestazione del pacchetto, ma determina se la connessione è
valida secondo le regole di configurazione, prima che si apre una sessione
di scambio di dati. Il filtraggio è basato su:
</p>

<ul>
<li>Indirizzo IP sorgente o di destinazione</li>
<li>Porta sorgente o di destinazione</li>
<li>Un periodo di tempo</li>
<li>Protocollo</li>
<li>Utente</li>
<li>Password</li>
</ul>

<p>
Tutto il traffico è convalidato e monitorato, e il traffico non desiderato
può essere minore.
</p>

<p>
Svantaggi:
</p>

<ul>
<li>
  Opera sul Transport Layer e può richiedere modifiche sostanziali del
	programma che fornisce le funzioni di trasporto.
</li>
</ul>

</body>
</section>
<section>
<title>Gateway di applicazione</title>
<body>

<p>
L'applicazione di livello gateway è un proxy per applicazioni, scambio di
dati con sistemi remoti sulla parte dei client. E' tenuta non pubblica da un
DMZ (De-Militarized Zone: la parte di una rete privata visibile con il
firewall) o da un firewall che non permette connessioni da fuori. Il
filtraggio è basato su:
</p>

<ul>
<li>Accettare o meno indirizzi IP sorgenti o di destinazione</li>
<li>Contenuto del pacchetto</li>
<li>Limitare l'accesso ai file basati sul tipo di file o estensione</li>
</ul>

<p>
Vantaggi:
</p>

<ul>
<li>Può fare la cache ai file, e aumentare le performance della rete</li>
<li>Logging dettagliati di tutte le connessioni</li>
<li>Scalare bene (alcuni server proxy possono "condividere"  dati nella
cache)</li>
<li>Nessun accesso diretto da fuori</li>
<li>Può anche alterare il contenuto del pacchetto al volo</li>
</ul>

<p>
Svantaggi:
</p>

<ul>
<li>La configurazione è complessa</li>
</ul>

<p>
I gateway di applicazione sono considerati la soluzione più sicura poichè non
devono essere eseguiti come root e i loro host non sono raggiungibili da
Internet.
</p>

<p>
Esempi di gateway di applicazione:
</p>

<ul>
<li><uri link="http://www.squid-cache.org/">Squid</uri></li>
</ul>

</body>
</section>
<section>
<title>Iptables</title>
<body>

<p>
Per poter usare iptables, deve essere abilitato il kernel. Qui si sono
aggiunti iptables come moduli (il comando <c>iptables</c> li caricherà poichè
necessari) e si è ricompilato il kernel (ma si potrebbe volere iptables
compilato, se si vuole disabilitare Loadable Kernel Modules come discusso
precedentemente).  Per ulteriori informazioni su come configurare il kernel
per iptables andare in <uri
link="http://iptables-tutorial.frozentux.net/iptables-tutorial.html#PREPARATIONS">Iptables
Tutorial Chapter 5: Preparations</uri>. Dopo aver compilato il nuovo kernel
(o mentre lo si sta compilando), si deve aggiungere il comando
<c>iptables</c>. Un <c>emerge iptables</c> dovrebbe funzionare.
</p>

<p>
Per testare il suo funzionamento, digitare <c>iptables -L</c>. Se non
funziona, ricontrollare la propria configurazione.
</p>

<p>
Iptables è il nuovo e migliorato filtro di pacchetti nel kernel 2.4.x. E' il
successore di ipchains nel kernel 2.2.x. Uno dei maggiori miglioramenti è che
iptables può effettuare un completo filtraggio di pacchetti. E grazie a
questo, è possibile tenere traccia di ogni connessione TCP stabilita.
</p>

<p>
Una connessione TCP è una serie di pacchetti che contiene informazioni
sull'indirizzo IP sorgente, l'indirizzo IP di destinazione, la porta
sorgente, quella di destinazione, e una sequenza di numeri, così che il
pacchetto può essere riassemblato senza perdere dati. TCP è un protocollo
orientato alla connessione, in contrasto con UDP, che è senza connessione.
</p>

<p>
Esaminando l'intestazione del pacchetto TCP, un completo filtro di pacchetti
può determinare se un pacchetto TCP ricevuto è parte di una connessione già
stabilita o meno e decidere se accettare o no il pacchetto.
</p>

<p>
E' possibile ingannare un non completo filtro di pacchetti quando si
accettano
pacchetti che si dovrebbero eliminare, manipolando l'intestazione del
pacchetto TCP.  Può essere fatto con la manipolazione della flag SYN o di
altre flag nell'intestazione TCP, per far sembrare un pacchetto pericoloso
come parte della connessione stabilita (poichè il filtro di pacchetti non fa
una traccia delle connessioni). Con un completo filtro di pacchetti è
possibile ridurre questi pacchetti poichè non sono parte di una connessione
già stabilita. Questo fermerà anche la possibilità di "stealth scans", un
tipo di port scan con il quale si manda pacchetti con flag che sono
più probabili di essere loggati da un firewall che da pacchetti ordinari SYN.
</p>

<p>
Iptables fornisce molte altre caratteristiche come NAT (Network Address
Translation) e il rate limiting. Quest'ultimo è utile quando si cerca d
prevenire attacchi DoS (Denial of Service) come SYN flood.
</p>

<p>
Una connessione TCP è stabilita in tre tempi (three-way handshake). Quando si
stabilisce la connessione TCP il client manda un pacchetto al server con la
flag SYN. Quando il server riceve il pacchetto SYN, risponde mandando un
pacchetto SYN+ACK al client. Quando riceve SYN+ACK, il client risponde con un
terzo pacchetto ACK che riconosce la connessione.
</p>

<p>
Un attacco SYN flood è effettuato con il mandare un pacchetto SYN e con una
mancata risposta al pacchetto SYN+ACK. Il client può fare un pacchetto con un
indirizzo IP sorgente falso perchè non ha bisogno di una replica. Il server
aggiungerà una voce a una queue di connessioni metà aperte, quando riceve il
pacchetto SYN e poi aspetta il pacchetto finale ACK prima di eliminare la
voce dalla queue. La queue ha un numero limitato di slot e se tutti gli slot
sono pieni, non si può aprire un'altra connessione. Se il pacchetto ACK non è
ricevuto prima di un tempo specificato, la voce sarà eliminata dalla queue.
Le impostazione del tempo specificato variano, ma sono di solito 30-60
secondi o più. Il client inizia l'attacco con molti pacchetti SYN con
indirizzi IP di diversa sorgente, e li manda agli indirizzi IP da colpire e
riempiono la queue delle connessioni metà aperte e non fanno stabilire a
altri client una connessione con il server.
</p>

<p>
In questi casi diventa di aiuto il rate limit. E' possibile limitare una
parte di pacchetti SYN accettati con <c>-m limit --limit 1/s</c>. Limita il
numero di pacchetti SYN accettati a uno per secondo e restringe il SYN flood
nelle risorse.
</p>

<note>
Un'altra opzione per prevenire il SYN flood sono <uri link =
"http://cr.yp.to/syncookies.html">SYN cookies</uri>, che permette al computer
di rispondere a pacchetti SYN senza riempire spazio nella queue di
connessione. SYN cookie possono essere abilitati nella configurazione
del kernel Linux, ma per il momento sono considerati sperimentali.
</note>

<p>
Alcuni esempi pratici.
</p>

<p>
Quando iptables è caricato nel kernel, ha cinque sezioni in cui si possono
elencare le regole, e sono <c>INPUT</c>, <c>OUTPUT</c>, <c>FORWARD</c>, 
<c>PREROUTING</c> e <c>POSTROUTING</c>. Ognuna di queste è chiamata chain e
consiste in un elenco di regole. Ogni regola indica come è fatta
l'intestazione del pacchetto, e poi che cosa fare con il pacchetto. Se la
regola non coincide con il pacchetto, si cosulta la prossima regola nella
chain.
</p>

<p>
Si possono mettere le regole direttamente nelle 5 chain principali o creare
nuove chain e aggiungerle come regole di una esistente chain. Iptables
supporta le seguenti opzioni.
</p>

<table>
<tr>
  <th>Opzione:</th>
  <th>Descrizione:</th>
</tr>
<tr>
  <ti>-A</ti>
  <ti>Aggiungere</ti>
</tr>
<tr>
  <ti>-D</ti>
  <ti>Eliminare</ti>
</tr>
<tr>
  <ti>-I</ti>
  <ti>Inserire</ti>
</tr>
<tr>
  <ti>-R</ti>
  <ti>Sostituire</ti>
</tr>
<tr>
  <ti>-L</ti>
  <ti>Elencare</ti>
</tr>
<tr>
  <ti>-F</ti>
  <ti>Eliminare tutte le regole nella chain o in tutte le chain</ti>
</tr>
<tr>
  <ti>-Z</ti>
  <ti>Zero contatori nella chain o in tutte le chain</ti>
</tr>
<tr>
  <ti>-C</ti>
  <ti>Testare questo pacchetto sulla chain</ti>
</tr>
<tr>
  <ti>-N</ti>
  <ti>Creare una nuova chain definita dall'utente</ti>
</tr>
<tr>
  <ti>-X</ti>
  <ti>Eliminare una chain definita dall'utente</ti>
</tr>
<tr>
  <ti>-P</ti>
  <ti>Cambiare la politica sulla chain selezionata</ti>
</tr>
<tr>
  <ti>-E</ti>
  <ti>Cambiare il nome della chain</ti>
</tr>
<tr>
  <ti>-p</ti>
  <ti>Protocollo</ti>
</tr>
<tr>
  <ti>-s</ti>
  <ti>address/mask sorgente</ti>
</tr>
<tr>
  <ti>-d</ti>
  <ti>address/mask di destinazione</ti>
</tr>
<tr>
  <ti>-i</ti>
  <ti>Nome input (nome ethernet)</ti>
</tr>
<tr>
  <ti>-o</ti>
  <ti>Nome output (nome ethernet)</ti>
</tr>
<tr>
  <ti>-j</ti>
  <ti>Jump (obiettivo della regola)</ti>
</tr>
<tr>
  <ti>-m</ti>
  <ti>Corrispondenza estesa (potrebbe usare estensione)</ti>
</tr>
<tr>
  <ti>-n</ti>
  <ti>output numerico di indirizzi e porte</ti>
</tr>
<tr>
  <ti>-t</ti>
  <ti>Tabella da modificare</ti>
</tr>
<tr>
  <ti>-v</ti>
  <ti>modo verbose</ti>
</tr>
<tr>
  <ti>-x</ti>
  <ti>Numeri estesi (visualizza valori esatti)</ti>
</tr>
<tr>
  <ti>-f</ti>
  <ti>Prende in considerazione solo secondi frammenti o altri</ti>
</tr>
<tr>
  <ti>-V</ti>
  <ti>Versione del pacchetto</ti>
</tr>
<tr>
  <ti>--line-numbers</ti>
  <ti>Numero della riga</ti>
</tr>
</table>

<p>
Iniziare con bloccare tutti i pacchetti ICMP nella propria
macchina, per familiarizzare con iptables.
</p>

<pre caption="Bloccare tutti i pacchetti ICMP">
# <i>iptables -A INPUT -p icmp -j DROP</i>
</pre>

<p>
Si specifica la chain nella quale dovrebbe essere aggiunta la regola, poi il
protocollo del pacchetto coincidente e l'obiettivo. Quest'ultimo può essere
il nome di una chain specificata dall'utente o uno degli obiettivi speciali
<c>ACCEPT</c>, <c>DROP</c>, <c>REJECT</c>, <c>LOG</c>, <c>QUEUE</c> o
<c>MASQUERADE</c>. In questo caso si usa <c>DROP</c>, che ignora il
pacchetto senza la risposta al client.
</p>

<note>
L'obiettivo <c>LOG</c> è conosciuto come "non-terminating". Se un pacchetto
coincide con una regola con l'obiettivo <c>LOG</c>, la valutazione della
regola non si può interrompere, e il pacchetto continuerà a corrispondere a
regole successive. Questo permette di loggare pacchetti mentre sono in
processo normalmente.
</note>

<p>
Dare un <c>ping localhost</c>. Non si ottiene nessun messaggio di risposta,
poichè iptables ignora tutti i messaggi ICMP in arrivo. Non si possono
pingare altre macchine, perchè si ignora anche il pacchetto ICMP reply. Si
elimina la chain.
</p>

<pre caption="Eliminare tutte le regole">
# <i>iptables -F</i>
</pre>

<p>
Si pone in rilievo il filtraggio di pacchetti completo in iptables. Se si vuole
abilitare una ispezione completa dei pacchetti in arrivo su eth0, si digiti
il comando:
</p>

<pre caption="Accettare i pacchetti originati da una connessione già stabilita">
# <i>iptables -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</i>
</pre>

<p>
Nel comando sopra, si accettano pacchetti da una connessione già stabilita o
associata nella chain INPUT. E si potrebbero eliminare i pacchetti che non
sono nella tabella con <c>iptables -A INPUT -i eth0 -m state --state INVALID
-j DROP</c> prima del comando precedente. Si abilita il filtraggio di
pacchetti completo in iptables caricando l'estensione "state". Se si vuole
permettere a altri di connettersi alla propria macchina, si potrebbe usare la
flag <c>--state NEW</c>. Iptables contiene alcuni moduli per scopi
differenti. Alcuni di questi sono:
</p>

<table>
<tr>
  <th>Modulo</th>
  <th>Descrizione</th>
  <th>Opzioni estese</th>
</tr>
<tr>
  <ti>mac</ti>
  <ti>Verificare che l'estensione corrisponda ai pacchetti in arrivo su un
	mac address.</ti>
  <ti>--mac-source</ti>
</tr>
<tr>
  <ti>state</ti>
  <ti>Abilitare ispezioni complete</ti>
  <ti>--state (state sono ESTABLISHED,RELATED, INVALID, NEW)</ti>
</tr>
<tr>
  <ti>limit</ti>
  <ti>Definire un limite sul flusso</ti>
  <ti>--limit, --limit-burst</ti>
</tr>
<tr>
  <ti>owner</ti>
  <ti>Cercare caratteristiche in base al creatore
	del pacchetto</ti>
  <ti>
    --uid-owner userid --gid-owner groupid --pid-owner processid --sid-owner 
    sessionid
  </ti>
</tr>
<tr>
  <ti>unclean</ti>
  <ti>Vari test sui pacchetti</ti><ti></ti>
</tr>
</table>

<p>
Cercare di creare una chain definita dall'utente e applicarla a una chain
esistente:
</p>

<pre caption="Creare una chain definita dall'utente">
<comment>(Creare una nuova chain con una regola)</comment>
# <i>iptables -X mychain</i>
# <i>iptables -N mychain</i>
# <i>iptables -A mychain -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</i>
<comment>(Tutto il traffico in uscita è accettato. Quello in entrata no.)</comment>
# <i>iptables -P OUTPUT ACCEPT</i>
# <i>iptables -P INPUT DROP</i>
<comment>(Aggiungerla alla chain INPUT)</comment>
# <i>iptables -A INPUT -j mychain</i>
</pre>

<p>
Applicando la regola alla chain input si ottiene: Tutti i pacchetti in uscita
sono accettati e quelli in entrata no.
</p>

<p>
Si può trovare documentazione in <uri
link="http://www.iptables.org/documentation/index.html#HOWTO">Netfilter/iptables
documentation</uri>.
</p>

<p>
Si vede un esempio completo.
</p>

<ul>
<li>Connessioni al firewall sono accettate solo attraverso SSH (porta 22)</li>
<li>
  La rete locale dovrebbe avere accesso a HTTP, HTTPS e SSH (anche a DNS)
</li>
<li>
  Il traffico ICMP può contenere payload e non dovrebbe essere accettato. Solo
	certo traffico ICMP deve essere accettato.
</li>
<li>Port scan dovrebbero essere rilevati e loggati</li>
<li>Attacchi SYN dovrebbero essere evitati</li>
<li>Tutto il traffico rimanente dovrebbe essere eliminato e loggato</li>
</ul>

<pre caption="/etc/init.d/firewall">
#!/sbin/runscript
IPTABLES=/sbin/iptables
IPTABLESSAVE=/sbin/iptables-save
IPTABLESRESTORE=/sbin/iptables-restore
FIREWALL=/etc/firewall.rules
DNS1=212.242.40.3
DNS2=212.242.40.51
#inside
IIP=10.0.0.2
IINTERFACE=eth0
LOCAL_NETWORK=10.0.0.0/24
#outside
OIP=217.157.156.144
OINTERFACE=eth1

opts="${opts} showstatus panic save restore showoptions rules"

depend() {
  need net
}

rules() {
  stop
  ebegin "Setting internal rules"

  einfo "Setting default rule to drop"
  $IPTABLES -P FORWARD DROP
  $IPTABLES -P INPUT   DROP
  $IPTABLES -P OUTPUT  DROP

  #default rule
  einfo "Creating states chain"
  $IPTABLES -N allowed-connection
  $IPTABLES -F allowed-connection
  $IPTABLES -A allowed-connection -m state --state ESTABLISHED,RELATED -j ACCEPT
  $IPTABLES -A allowed-connection -i $IINTERFACE -m limit -j LOG --log-prefix \ 
      "Bad packet from ${IINTERFACE}:"
  $IPTABLES -A allowed-connection -j DROP

  #ICMP traffic
  einfo "Creating icmp chain"
  $IPTABLES -N icmp_allowed
  $IPTABLES -F icmp_allowed
  $IPTABLES -A icmp_allowed -m state --state NEW -p icmp --icmp-type \ 
      time-exceeded -j ACCEPT
  $IPTABLES -A icmp_allowed -m state --state NEW -p icmp --icmp-type \ 
      destination-unreachable -j ACCEPT
  $IPTABLES -A icmp_allowed -p icmp -j LOG --log-prefix "Bad ICMP traffic:"
  $IPTABLES -A icmp_allowed -p icmp -j DROP

  #Incoming traffic
  einfo "Creating incoming ssh traffic chain"
  $IPTABLES -N allow-ssh-traffic-in
  $IPTABLES -F allow-ssh-traffic-in
  #Flood protection
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \ 
      ALL RST --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \ 
      ALL FIN --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m limit --limit 1/second -p tcp --tcp-flags \ 
      ALL SYN --dport ssh -j ACCEPT
  $IPTABLES -A allow-ssh-traffic-in -m state --state RELATED,ESTABLISHED -p tcp --dport ssh -j ACCEPT

  #outgoing traffic
  einfo "Creating outgoing ssh traffic chain"
  $IPTABLES -N allow-ssh-traffic-out
  $IPTABLES -F allow-ssh-traffic-out
  $IPTABLES -A allow-ssh-traffic-out -p tcp --dport ssh -j ACCEPT

  einfo "Creating outgoing dns traffic chain"
  $IPTABLES -N allow-dns-traffic-out
  $IPTABLES -F allow-dns-traffic-out
  $IPTABLES -A allow-dns-traffic-out -p udp -d $DNS1 --dport domain \ 
      -j ACCEPT
  $IPTABLES -A allow-dns-traffic-out -p udp -d $DNS2 --dport domain \ 
     -j ACCEPT

  einfo "Creating outgoing http/https traffic chain"
  $IPTABLES -N allow-www-traffic-out
  $IPTABLES -F allow-www-traffic-out
  $IPTABLES -A allow-www-traffic-out -p tcp --dport www -j ACCEPT
  $IPTABLES -A allow-www-traffic-out -p tcp --dport https -j ACCEPT

  #Catch portscanners
  einfo "Creating portscan detection chain"
  $IPTABLES -N check-flags
  $IPTABLES -F check-flags
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL FIN,URG,PSH -m limit \ 
      --limit 5/minute -j LOG --log-level alert --log-prefix "NMAP-XMAS:" 
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL ALL -m limit --limit \ 
      5/minute -j LOG --log-level 1 --log-prefix "XMAS:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL ALL -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG \ 
      -m limit --limit 5/minute -j LOG --log-level 1 --log-prefix "XMAS-PSH:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL NONE -m limit \ 
      --limit 5/minute -j LOG --log-level 1 --log-prefix "NULL_SCAN:"
  $IPTABLES -A check-flags -p tcp --tcp-flags ALL NONE -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,RST SYN,RST -m limit \ 
      --limit 5/minute -j LOG --log-level 5 --log-prefix "SYN/RST:"
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit \ 
      --limit 5/minute -j LOG --log-level 5 --log-prefix "SYN/FIN:"
  $IPTABLES -A check-flags -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

  # Apply and add invalid states to the chains
  einfo "Applying chains to INPUT"
  $IPTABLES -A INPUT -m state --state INVALID -j DROP
  $IPTABLES -A INPUT -j icmp_allowed 
  $IPTABLES -A INPUT -j check-flags
  $IPTABLES -A INPUT -i lo -j ACCEPT
  $IPTABLES -A INPUT -j allow-ssh-traffic-in
  $IPTABLES -A INPUT -j allowed-connection

  einfo "Applying chains to FORWARD"
  $IPTABLES -A FORWARD -m state --state INVALID -j DROP
  $IPTABLES -A FORWARD -j icmp_allowed 
  $IPTABLES -A FORWARD -j check-flags
  $IPTABLES -A FORWARD -o lo -j ACCEPT
  $IPTABLES -A FORWARD -j allow-ssh-traffic-in
  $IPTABLES -A FORWARD -j allow-www-traffic-out
  $IPTABLES -A FORWARD -j allowed-connection

  einfo "Applying chains to OUTPUT"
  $IPTABLES -A OUTPUT -m state --state INVALID -j DROP
  $IPTABLES -A OUTPUT -j icmp_allowed
  $IPTABLES -A OUTPUT -j check-flags
  $IPTABLES -A OUTPUT -o lo -j ACCEPT
  $IPTABLES -A OUTPUT -j allow-ssh-traffic-out
  $IPTABLES -A OUTPUT -j allow-dns-traffic-out
  $IPTABLES -A OUTPUT -j allow-www-traffic-out
  $IPTABLES -A OUTPUT -j allowed-connection

  #Allow client to route through via NAT (Network Address Translation)
  $IPTABLES -t nat -A POSTROUTING -o $IINTERFACE -j MASQUERADE 
  eend $?
}

start() {
  ebegin "Starting firewall"
  if [ -e "${FIREWALL}" ]; then
    restore
  else
    einfo "${FIREWALL} does not exists. Using default rules."
    rules
  fi
  eend $?
}

stop() {
  ebegin "Stopping firewall"
  $IPTABLES -F
  $IPTABLES -t nat -F
  $IPTABLES -X
  $IPTABLES -P FORWARD ACCEPT
  $IPTABLES -P INPUT   ACCEPT
  $IPTABLES -P OUTPUT  ACCEPT
  eend $?
}

showstatus() {
  ebegin "Status"
  $IPTABLES -L -n -v --line-numbers
  einfo "NAT status"
  $IPTABLES -L -n -v --line-numbers -t nat
  eend $?
}

panic() {
  ebegin "Setting panic rules"
  $IPTABLES -F
  $IPTABLES -X
  $IPTABLES -t nat -F
  $IPTABLES -P FORWARD DROP
  $IPTABLES -P INPUT   DROP
  $IPTABLES -P OUTPUT  DROP
  $IPTABLES -A INPUT -i lo -j ACCEPT
  $IPTABLES -A OUTPUT -o lo -j ACCEPT
  eend $?
}

save() {
  ebegin "Saving Firewall rules"
  $IPTABLESSAVE &gt; $FIREWALL
  eend $?
}

restore() {
  ebegin "Restoring Firewall rules"
  $IPTABLESRESTORE &lt; $FIREWALL
  eend $?
}

restart() {
  svc_stop; svc_start
}

showoptions() {
  echo "Usage: $0 {start|save|restore|panic|stop|restart|showstatus}"
  echo "start)      will restore setting if exists else force rules"
  echo "stop)       delete all rules and set all to accept"
  echo "rules)      force settings of new rules"
  echo "save)       will store settings in ${FIREWALL}"
  echo "restore)    will restore settings from ${FIREWALL}"
  echo "showstatus) Shows the status" 
}
</pre>

<p>
Alcuni consigli sulla creazione di firewall:
</p>

<ol>
<li>Creare le indicazioni che il firewall deve seguire prima di installarlo</li>
<li>Farlo semplice</li>
<li>
Sapere come funziona ogni protocollo (leggere <uri
link="http://www.ietf.org/">RFC</uri>(Request For Comments))
</li>
<li>
Un firewall è una parte di software che si esegue da root.
</li>
<li>Testarlo</li>
</ol>

<p>
Se si pensa che iptables è difficile da capire o richiede un lungo setup, si
può usare <uri link="http://www.shorewall.net">Shorewall</uri>. Usa iptables
per generare le regole, e si concentra su esse e non su specifici protocolli.
</p>

</body>
</section>
<section>
<title>Squid</title>
<body>

<p>
Squid è un server proxy potente. Può filtrare il traffico basato sul tempo,
espressioni regolari su path/URI, indirizzo IP sorgente e di destinazione,
dominio, browser, user name autenticato, MIME type, e numero della
porta (protocollo).
</p>

<p>
Nel seguente esempio si è aggiunto un filtro per i banner invece di uno
basato sui siti porno. Gentoo.org <e>non</e> dovrebbe essere elencato tra i
siti porno, e non si vuole perdere tempo a cercarne alcuni.
</p>

<p>
Le indicazioni:
</p>

<ul>
<li>
Navigare sul web (HTTP/HTTPS) è permesso durante le ore lavorative (lun-ven
8-17 e sab 8-13), ma se gli impiegati sono al lavoro dopo queste ore,
dovrebbero lavorare, non navigare
</li>
<li>Non è permesso scaricare file (.exe, .com, .arj, .zip, .asf, .avi, .mpg,
.mpeg, etc)
</li>
<li>
Non piacciono i banner, e sono filtrati e sostituiti con una gif trasparente.
</li>
<li>
Tutte le altre connessioni verso e da Internet sono negate.
</li>
</ul>

<p>
Quattro sono i <e>semplici</e> passi.
</p>

<pre caption="/etc/squid/squid.conf">
# Bind to a ip and port
http_port 10.0.2.1:3128

# Standard configuration
hierarchy_stoplist cgi-bin ?
acl QUERY urlpath_regex cgi-bin \?
no_cache deny QUERY

# Add basic access control lists
acl all src 0.0.0.0/0.0.0.0
acl manager proto cache_object
acl localhost src 127.0.0.1/255.255.255.255

# Add who can access this proxy server
acl localnet src 10.0.0.0/255.255.0.0

# And ports
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 443
acl purge method PURGE

# Add access control list based on regular
# expressions within urls
acl archives urlpath_regex "/etc/squid/files.acl"
acl url_ads url_regex "/etc/squid/banner-ads.acl"

# Add access control list based on time and day
acl restricted_weekdays time MTWHF 8:00-17:00
acl restricted_weekends time A 8:00-13:00

acl CONNECT method CONNECT

#allow manager access from localhost
http_access allow manager localhost
http_access deny manager

# Only allow purge requests from localhost
http_access allow purge localhost
http_access deny purge

# Deny requests to unknown ports
http_access deny !Safe_ports

# Deny CONNECT to other than SSL ports
http_access deny CONNECT !SSL_ports

# My own rules

# Add a page do be displayed when
# a banner is removed
deny_info NOTE_ADS_FILTERED url_ads

# Then deny them
http_access deny url_ads

# Deny all archives
http_access deny archives

# Restrict access to work hours
http_access allow localnet restricted_weekdays
http_access allow localnet restricted_weekends

# Deny the rest
http_access deny all
</pre>

<p>
Mettere i tipi di file che non si vuole che siano scaricati dagli utenti,
qui si sono aggiunti zip, viv, exe, mp3, rar, ace, avi, mov, mpg, mpeg, au,
ra, arj, tar, gz e z.
</p>

<pre caption="/etc/squid/files.acl">
\.[Zz][Ii][pP]$
\.[Vv][Ii][Vv].*
\.[Ee][Xx][Ee]$
\.[Mm][Pp]3$
\.[Rr][Aa][Rr]$
\.[Aa][Cc][Ee]$
\.[Aa][Ss][Ff]$
\.[Aa][Vv][Ii]$
\.[Mm][Oo][Vv]$
\.[Mm][Pp][Gg]$
\.[Mm][Pp][Ee][Gg]$
\.[Aa][Uu]$
\.[Rr][Aa]$
\.[Aa][Rr][Jj]$
\.[Tt][Aa][Rr]$
\.[Gg][Zz]$
\.[Zz]$
</pre>

<note>
Notare le [] con le maiuscole e le minuscole di ogni carattere. Questo perchè
così non si può ingannare il filtro con l'accesso a un file chiamato AvI
invece di avi.
</note>

<p>
Si aggiungono le espressioni regolari per identificare i banner.
</p>

<pre caption="/etc/squid/banner-ads.acl">
/adv/.*\.gif$
/[Aa]ds/.*\.gif$
/[Aa]d[Pp]ix/
/[Aa]d[Ss]erver
/[Aa][Dd]/.*\.[GgJj][IiPp][FfGg]$
/[Bb]annerads/
/adbanner.*\.[GgJj][IiPp][FfGg]$
/images/ad/
/reklame/
/RealMedia/ads/.*
^http://www\.submit-it.*
^http://www\.eads.*
^http://ads\.
^http://ad\.
^http://ads02\.
^http://adaver.*\.
^http://adforce\.
adbot\.com
/ads/.*\.gif.*
_ad\..*cgi
/Banners/
/SmartBanner/
/Ads/Media/Images/
^http://static\.wired\.com/advertising/
^http://*\.dejanews\.com/ads/
^http://adfu\.blockstackers\.com/
^http://ads2\.zdnet\.com/adverts
^http://www2\.burstnet\.com/gifs/
^http://www.\.valueclick\.com/cgi-bin/cycle
^http://www\.altavista\.com/av/gifs/ie_horiz\.gif
</pre>

<p>
E come ultima parte si vuole che sia mostrato questo file quando è rimosso un
banner. E' un file metà HTML con una immagine gif 4x4 trasparente.
</p>

<pre caption="/etc/squid/errors/NOTE_ADS_FILTERED">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META HTTP-EQUIV="REFRESH" CONTENT="0; URL=http://localhost/images/4x4.gif"&gt;
&lt;TITLE>ERROR: The requested URL could not be retrieved&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Add filtered!&lt;/H1&gt;
</pre>

<note>
Non chiudere i tag &lt;HTML&gt; &lt;BODY&gt;. Sarà fatto da squid.
</note>

<p>
Come si può vedere, Squid ha molte possibilità e funziona bene come filtro e
proxy. Possono essere usati proxy alternativi Squid per funzionare bene con una
grande rete. La configurazione elencata va bene per una piccola rete di 1-20
utenti.
</p>

<p>
Usare il filtro di pacchetti (iptables) e il gateway di applicazione
(Squid) è la migliore soluzione, anche se nessuno può accedere a Squid da
fuori. Fare attenzione agli attacchi da dentro.
</p>

<p>
Si deve configurare il browser per usare il server proxy. Il gateway non
permette il contatto con l'esterno agli utenti, a meno che si usi il proxy.
</p>

<note>
In Mozilla si deve andare in Edit->Preferences->Advanced->Proxies.
</note>

<p>
Si può usare iptables per mandare tutto il traffico outbound a un proxy
Squid. Si aggiunge una regola forwarding/prerouting sul gateway:
</p>

<pre caption="Abilitare il portforwarding nel proxyserver">
# <i>iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to proxyhost:3128</i>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to proxyhost:3128</i>
</pre>

<note>
Se il proxy si esegue sull'host del filtraggio di pacchetti (non
consigliato, può essere necessario non avere macchine libere), usare
<c>REDIRECT</c> invece di <c>DNAT</c> (<c>REDIRECT</c> manda i pacchetti al
localhost).
</note>

</body>
</section>
<section>
<title>Lezioni imparate</title>
<body>

<p>
Si è imparato che:
</p>

<ol>
<li>
Un firewall può essere un rischio. Un firewall configurato male è peggio che
non averne uno.
</li>
<li>Come impostare un gateway di base e un proxy.</li>
<li>Per avere un buon firewall si deve conoscere il protocollo che si vuole
permettere.</li>
<li>
Che il traffico IP non sempre contiene dati sicuri, esempio pacchetti ICMP,
che possono contenere pericolosi payload.
</li>
<li>Come prevenire un attacco SYN.</li>
<li>Filtrare il traffico HTTP con la cancellazione di immagini offensive e
scaricamenti di virus.</li>
<li>
Combinare filtri di pacchetti e gateway di applicazione fornisce un migliore
controllo.
</li>
</ol>

<p>
Se si è pronti, creare un firewall che corrisponda alle proprie esigenze.
</p>

</body>
</section>

</sections>
