<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/cross-compiling-distcc.xml,v 1.1 2006/02/03 21:44:46 so Exp $ -->

<guide link="/doc/it/cross-compiling-distcc.xml" lang="it">
<title>DistCC Cross-compiling Guide</title>

<author title="Autore">
  <mail link="agaffney@gentoo.org">Andrew Gaffney</mail>
</author>
<author title="Editore">
  <mail link="jackdark@gmail.com">Joshua Saddler</mail>
</author>
<author title="Traduttore">
  <mail link="cristiano.chiucchiolo@gmail.com">Cristiano Chiucchiolo</mail>
</author>

<abstract>
Questa guida mostra come configurare distcc per cross-compilare tra diverse
architetture di processore.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.2</version>
<date>2006-01-25</date>

<chapter>
<title>Cross-compiling con distcc</title>
<section>
<title>Introduzione</title>
<body>

<p>
<c>distcc</c> è un tool che consente di dividere il fardello della
compilazione del software tra diversi computer collegati in rete. Se tutte le
macchine collegate utilizzano la stessa toolchain, compilata per la stessa
architettura di processore, non è richiesta alcuna configurazione speciale di
<c>distcc</c>. Ma che cosa si deve fare se si ha necessità di compilare per
un'architettura diversa usando computer differenti? Questa guida mostrerà
come configurare <c>distcc</c> in modo da compilare per architetture
differenti.
</p>

</body>
</section>
<section>
<title>Emergere le utility necessarie</title>
<body>

<p>
Per prima cosa, è necessario emergere <c>crossdev</c> su tutte le macchine
che saranno coinvolte nel processo di compilazione. <c>crossdev</c> è un tool
che rende facile la compilazione delle toolchains tra diverse architetture.
Fu scritto in origine da <mail link="kumba@gentoo.org">Joshua Kinard</mail> e
riscritto da zero da <mail link="vapier@gentoo.org">Mike Frysinger</mail>. Il
suo utilizzo è molto semplice: <c>crossdev -t sparc</c>, ad esempio,
compilerà una cross-toolchain completa rivolta all'architettura Sparc. Questa
include binutils, gcc, glibc, e gli headers di linux. Per avere maggiore
aiuto, prova ad eseguire <c>crossdev --help</c>. Ovviamente, si dovrà
emergere la giusta cross-toolchain su tutte le macchine che aiuteranno la
compilazione.
</p>

<p>
Fatto ciò, è necessario emergere <c>distcc</c> su tutte le macchine che
saranno coinvolte nel processo. Questo include la macchina che eseguirà
emerge e le macchine con i cross-compilatori. Vedi la guida <uri
link="/doc/it/distcc.xml">Gentoo Linux e Distcc</uri> per maggiori
informazioni su come configurare ed usare <c>distcc</c>.
</p>

</body>
</section>
<section>
<title>Note arch-specifiche</title>
<body>

<p>
Se stai cross-compilando tra differenti sottoarchitetture per Intel x86 (es.
i586 e i686), devi comunque compilare una cross-toolchain completa per il
CHOST desiderato, altrimenti la compilazione fallirà. Questo perché i586 e
i686 sono in realtà CHOST diversi, nonostante siano entrambi considerati
"x86." Per favore ricordati di questo quando compili le tue cross-toolchains.
Per esempio, se la macchina principale è un i586, significa che si dovranno
compilare le cross-toolchains i586 sulle macchine ausiliarie i686.
</p>

</body>
</section>
<section>
<title>Configurare distcc per cross-compilare correttamente</title>
<body>

<p>
Con la configurazione di default di distcc, la cross-compilazione <e>non</e>
funzionerà correttamente. Il problema è che molte compilazioni invocano
semplicemente <c>gcc</c> anziché il nome completo del compilatore (es.
<c>sparc-unknown-linux-gnu-gcc</c>). Quindi, quando la compilazione viene
distribuita ad una macchina ausiliaria con distcc, viene invocato il
compilatore nativo anziché il tuo cross-compilatore nuovo fiammante.
</p>

<p>
Fortunatamente, c'è una soluzione per questo piccolo problema. Tutto ciò che
serve è un wrapper script e alcuni symlinks sulla macchina che eseguirà
<c>emerge</c>. Userò la mia macchina Sparc come esempio. Ogni volta che vedi
<c>sparc-unknown-linux-gnu</c> qui sotto, devi inserire il tuo CHOST
(<c>x86_64-pc-linux-gnu</c> per una macchina AMD64, ad esempio). Quando si
emerge distcc per la prima volta, la directory
<path>/usr/lib/distcc/bin</path> appare così:
</p>

<note>
Le seguenti istruzioni devono essere eseguite solo sulla macchina che
eseguirà emerge. Non compiere queste operazioni sulle macchine ausiliarie.
</note>

<pre caption="Compilatori disponibili">
# <i>cd /usr/lib/distcc/bin</i>
# <i>ls -l</i>
total 0
lrwxrwxrwx  1 root root 15 Dec 23 20:13 c++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 cc -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 g++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 gcc -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-c++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-g++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-gcc -&gt; /usr/bin/distcc
</pre>

<p>
Ecco cosa devi fare:
</p>

<pre caption="Modificare distcc">
# <i>rm c++ g++ gcc cc</i>
</pre>

<p>
Fatto ciò, creeremo il nuovo script su questa macchina. Avvia il tuo editor
preferito e crea un file con il seguente testo, poi salvalo come
<path>sparc-unknown-linux-gnu-wrapper</path>. Ricordati di sostituire il
CHOST (in questo caso, <c>sparc-unknown-linux-gnu</c>) con il vero CHOST
della macchina che eseguirà emerge.
</p>

<pre caption="Il nuovo wrapper script">
#!/bin/bash
exec /usr/lib/distcc/bin/sparc-unknown-linux-gnu-g${0:$[-2]} "$@"
</pre>

<p>
Fatto ciò, renderemo eseguibile lo script e creeremo i necessari symlinks:
</p>

<pre caption="Creare i symlinks">
# <i>chmod a+x sparc-unknown-linux-gnu-wrapper</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper cc</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper gcc</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper g++</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper c++</i>
</pre>

<p>
Fatto ciò, <path>/usr/lib/distcc/bin</path> apparirà così:
</p>

<pre caption="Un corretto set di compilatori">
# <i>ls -l</i>
total 4
lrwxrwxrwx  1 root root 25 Jan 18 14:20 c++ -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 cc -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 g++ -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 gcc -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-c++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-g++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Jul 27 10:52 sparc-unknown-linux-gnu-gcc -&gt; /usr/bin/distcc
-rwxr-xr-x  1 root root 70 Jan 18 14:20 sparc-unknown-linux-gnu-wrapper
</pre>

<p>
Congratulazioni; adesso hai (speriamo) una configurazione cross-distcc
funzionante.
</p>

</body>
</section>
<section>
<title>Come funziona</title>
<body>

<p>
Quando <c>distcc</c> viene eseguito, esso controlla se è invocato come
<c>i686-pc-linux-gnu-gcc</c>, <c>sparc-unknown-linux-gnu-g++</c>, etc. Quando
distcc poi distribuisce la compilazione a una macchina ausiliaria, gli passa
il nome con cui è stato invocato. Il demone distcc sulla macchina ausiliaria
cerca poi sulla macchina stessa un binario con lo stesso nome. Se riceve solo
<c>gcc</c>, cercherà <c>gcc</c>, che sarà probabilmente il compilatore nativo
sulla macchina ausiliaria, se non ha la stessa architettura della macchina
che ha eseguito <c>emerge</c>. Quando viene inviato il nome <e>completo</e>
del compilatore (es. <c>sparc-unknown-linux-gnu-gcc</c>), non può esserci
confusione.
</p>

</body>
</section>
</chapter>
</guide>
