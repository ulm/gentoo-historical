<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/devfs-guide.xml,v 1.11 2007/05/25 11:55:27 scen Exp $ -->

<guide link="/doc/it/devfs-guide.html" lang="it">
<title>Guida al Device File System</title>

<author title="Autore">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Revisione">
  <mail link="seemant@gentoo.org">Seemant Kulleen</mail>
</author>
<author title="Traduzione">
  <mail link="emorelli@gentoo.it">Enrico Morelli</mail>
</author>

<abstract>
In questo documento troverete informazioni  su cos'è devfs e sul suo utilizzo.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license />

<version>0.6</version>
<date>2005-07-21</date>

<chapter>
<title>Cos'è devfs?</title>
<section>
<title>I (bei?) vecchi tempi</title>
<body>

<warn>
devfs è <e>obsoleto</e> e è stato rimosso dall'albero 2.6 del kernel stabile
nella versione 2.6.13. Utenti di kernel 2.6 sono avvisati di passare a udev. Per
maggiori informazioni fare riferimento alla <uri
link="/doc/it/udev-guide.xml">Guida Gentoo a udev</uri>
</warn>

<p>
Implementazioni tradizionali di Linux provvedono ai loro utenti un percorso
astratto dei dispositivi, chiamato <path>/dev</path>. In questa directory, gli
utenti possono trovare i <e>device nodes</e>, file speciali che rappresentano le
periferiche presenti nei loro sistemi. Per intenderci, <path>/dev/hda</path>
rappresenta la prima periferica IDE del nostro sistema. Attraverso questi file
di periferica, gli utenti possono creare programmi che interagiscono con
l'hardware come se fosse un file regolare invece che attraverso speciali API.
</p>

<p>
I file di periferica sono suddivisi in due gruppi chiamati periferiche a
<e>caratteri</e> (character devices) e periferiche a <e>blocchi</e> (block
devices). Il primo gruppo racchiude l'hardware la cui scrittura/lettura non è
bufferizzata. Il secondo gruppo, quindi, racchiude invece l'hardware la cui
scrittura/lettura è bufferizzata.  Le periferiche di ambedue i gruppi possono
leggere un carattere alla volta o in blocchi. Per questo, la nomenclatura
potrebbe confondere ed infatti non è corretta.
</p>

<p>
Se date un'occhiata a certi file di periferica, potreste trovare qualcosa del
genere:
</p>

<pre caption = "Controllare le informazioni di un file di periferica">
# <i>ls -l /dev/hda</i>
brw-rw----    1 root     disk       3,   0 Jul  5  2000 /dev/hda
</pre>

<p>
Nell'esempio precedente abbiamo visto che <path>/dev/hda</path> è una periferica
a blocchi (block device). Rivestono molta importanza  i due numeri speciali
assegnati al file di periferica: <b>3,0</b>. Questa coppia di numeri è chiamata
<e>major-minor</e> ed è usata dal kernel per mappare un file di periferica al
dispositivo reale. Il major corrisponde a certi dispositivi mentre il minor a
sotto dispositivi.
</p>

<p>
Due esempi sono <path>/dev/hda4</path> e <path>/dev/tty5</path>. Il primo file
di periferica corrisponde alla quarta partizione della prima periferica IDE. La
sua coppia major-minor è <b>3, 4</b>.  In altre parole, il minor corrisponde
alla partizione dove il major corrisponde alla periferica. Il secondo esempio ha
<b>4, 5</b> come coppia major-minor.  In questo caso, il major corrisponde ad un
terminal driver, mentre il minor corrisponde al numero del terminale (in questo
caso, al quinto terminale).
</p>

</body>
</section>

<section>
<title>I problemi</title>
<body>

<p>
Se fate un rapido controllo in <path>/dev</path>, troverete che sono listate non
solo le vostre periferiche, ma <e>tutte</e> le possibili periferiche voi
possiate immaginare. In altre parole, sono presenti file di periferica anche per
i dispositivi non presenti sul vostro sistema. Il controllo di un numero così
elevato di gruppi di periferiche è quanto mai difficoltoso. Immaginate di dover
cambiare i permessi di tutti i file di periferica che hanno un corrispondente
dispositivo sul vostro sistema, e lasciare il resto invariato.
</p>

<p>
Quando aggiungete nuovo hardware al vostro sistema che non ha un file di
periferica per il nuovo dispositivo, dovrete crearne uno. Utenti esperti sanno
che questo può essere fatto con <c>./MAKEDEV</c> all'interno della directory
<path>/dev</path>, ma dovete conoscere quale dispositivo creare.
</p>

<p>
Quando avete programmi che interagiscono con hardware usando i file di
periferica, non potete avere la partizione principale montata in sola lettura,
mentre non c'è ulteriore necessità di averla montata in lettura-scrittura. E non
potete avere <path>/dev</path> su una partizione separata, dato che <c>mount</c>
necessita di <path>/dev</path> per montare le partizioni.
</p>

</body>
</section>
<section>
<title>Le soluzioni</title>
<body>

<p>
Come potete immaginare, gli sviluppatori del kernel hanno trovato un certo
numero di soluzioni ai summenzionati problemi. Comunque molte di queste
presentano altri difetti come descritto in
<uri>http://www.atnf.csiro.au/people/rgooch/linux/docs/devfs.html#faq-why</uri>.
Non faremo una panoramica su queste implementazioni, ma ci focalizzeremo su
quella che è diventata parte dei sorgenti ufficiali del kernel: devfs.
</p>

</body>
</section>
<section>
<title>devfs vince completamente</title>
<body>

<p>
devfs risolve tutti i problemi elencati. Provvede solo le periferiche esistenti,
aggiunge nuovi nodi quando trova nuove periferiche e rende possibile montare il
root filesystem in sola lettura. Risolve anche altri problemi che non abbiamo
discusso perché di minore interesse per gli utenti.
</p>

<p>
Inoltre, con devfs non dobbiamo preoccuparci della coppia major/minor. È ancora
supportata (per compatibilità  all'indietro), ma non è necessaria. Questo rende
possibile per Linux il supporto di ancora più periferiche, dato che non ci sono
più limiti (i numeri hanno sempre dei confini :)
</p>

<p>
Anche devfs ha i propri problemi che per gli utenti finali non sono realmente
visibili, ma lo sono per i manutentori del kernel. E per loro sono talmente
gravi che hanno marcato devfs come <e>obsoleto</e> in favore di <uri
link="udev-guide.xml">udev</uri> che Gentoo supporta e usa come default su molte
architetture a partire dalla release 2005.0 usando kernel della serie 2.6.
</p>

<p>
Per avere maggiori informazioni sul perché devfs è marcato come obsoleto, potete
leggere queste <uri
link="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev-FAQ">udev
FAQ</uri> e il documento <uri
link="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev_vs_devfs">udev
contro devfs</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Navigare attraverso l'albero dei device</title>
<section>
<title>Directory</title>
<body>

<p>
Una delle prime cose che potreste notare è che devfs usa directory per
raggruppare insieme le periferiche. Questo migliora la leggibilità dato che
tutte le periferiche dello stesso tipo occupano la stessa directory.
</p>

<p>
Per intenderci, tutte le periferiche IDE sono all'interno della directory
<path>/dev/ide/</path>, così come tutte le periferiche SCSI sono in
<path>/dev/scsi/</path>. Dischi SCSI e IDE sono visti nello stesso modo, il che
significa che entrambe hanno la stessa struttura di sottodirectory.
</p>

<p>
Dischi IDE e SCSI sono controllati da un adattatore (integrato su scheda madre o
su schede separate), chiamato <e>host</e>. Ogni adattatore può avere diversi
canali. Un canale è chiamato <e>bus</e>. Su ogni canale, è possibile avere
diversi ID. Ogni ID identifica un disco. Questo ID è chiamato <e>target</e>.
Alcuni device SCSI possono avere lun multipli (<e>Logial Unit Numbers</e>),
device che possono controllare multipli media simultaneamente (hi-end
tapedrive). Voi avrete principalmente un singolo lun, <path>lun0/</path>.
</p>

<p>
Così, mentre prima avevamo <path>/dev/hda4</path>, ora abbiamo
<path>/dev/ide/host0/bus0/target0/lun0/part4</path>. Questo è molto più
semplice... no, non discutete con me... <e>è</e> semplice...
</p>

<note>
Potete anche usare una nomenclatura più Unix-like per gli hard disk, come
<path>c0b0t0u0p2</path>. Possono essere trovati in <path>/dev/ide/hd</path>,
<path>/dev/scsi/hd</path>, ecc.
</note>

<p>
Per darvi  un'idea delle directory, questa è una lista delle directory che ho
sul mio portatile:
</p>

<pre caption = "Directory in /dev">
cdroms/     cpu/        discs/          floppy/
ide/        input/      loop/           misc/
netlink/    printers/   pts/            pty/
scsi/       sg/         shm/            sound/
sr/         usb/        vc/             vcc/
</pre>

</body>
</section>
<section>
<title>Compatibilità all'indietro usando devfs</title>
<body>

<p>
Usare questo nuovo schema sembra divertente, ma alcuni tools e programmi
continuano ad usare il vecchio schema. Per assicurare la compatibilità è stato
creato <c>devfsd</c>. Questo daemon crea link simbolici con i vecchi nomi che
puntano ai nuovi file di periferica.
</p>

<pre caption = "Link simbolico">
$ <i>ls -l /dev/hda4</i>
lr-xr-xr-x    1 root     root           33 Aug 25 12:08 /dev/hda4 -> ide/host0/bus0/target0/lun0/part4
</pre>

<p>
Con <c>devfsd</c>, potete anche configurare i permessi, creare nuovi device
file, definire azioni, ecc. Tutto questo è descritto nel prossimo capitolo.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Amministrare l'albero dei dispositivi</title>
<section>
<title>Riavvio di devfsd</title>
<body>

<p>
Quando modificate il file <path>/etc/devfsd.conf</path>, e volete forzare queste
modifiche nel vostro sistema, non dovete riavviare la macchina. A seconda delle
vostre necessità, potete usare uno dei seguenti segnali:
</p>

<p>
<b>SIGHUP</b> forzerà <c>devfsd</c> a rileggere il file di configurazione,
ricaricare gli oggetti condivisi e generare il REGISTER degli eventi per ogni
nodo in vita nell'albero dei dispositivi.
</p>

<p>
<b>SIGUSR1</b> come il precedente, ma non verrà rigenerato il REGISTER degli
eventi.
</p>

<p>
Per inviare un segnale, usate semplicemente <c>kill</c> o <c>killall</c>:
</p>

<pre caption = "Inviare un segnale SIGHUP a devfsd">
# <i>kill -s SIGHUP `pidof devfsd`</i>
<comment>o</comment>
# <i>killall -s SIGHUP devfsd</i>
</pre>

</body>
</section>
<section>
<title>Rimuovere la compatibilità attraverso i symlink</title>
<body>

<warn>
Attualmente, Gentoo non può vivere senza la compatibilità attraverso i symlink.
</warn>

<p>
Se volete rimuovere la compatibilità ottenuta con la creazione dei numerosi
symlink in <path>/dev</path> dal vostro sistema Gentoo (dato che Gentoo attiva
la compatibilità di default), editate <path>/etc/devfsd.conf</path> e rimuovete
le seguenti due righe:
</p>

<pre caption = "/etc/devfsd.conf per la compatibilità all'indietro">
<comment># Commentate le due righr che seguono per rimuovere i link simbolici</comment>
REGISTER        .*  MKOLDCOMPAT
UNREGISTER      .*  RMOLDCOMPAT
</pre>

<p>
Dovrete quindi riavviare il vostro sistema per rendere attive le modifiche.
</p>

</body>
</section>

<section>
<title>Rimuovere la funzionalità di auto caricamento</title>
<body>

<p>
Quando caricate un modulo, devfs creerà automaticamente un file di periferica.
Se non volete questo comportamento, rimuovete la seguente riga da
<path>/etc/devfsd.conf</path>:
</p>

<pre caption = "/etc/devfsd.conf, funzionalità autoload">
LOOKUP      .*  MODLOAD
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Punti riguardanti i permessi</title>
<section>
<title>Impostare/cambiare i permessi con devfsd</title>
<body>

<note>
Queste istruzioni sono valide finché pam_console è disabilitato in
<path>/etc/pam.d/system-auth</path>. Se pam_console viene abilitato, PAM ha
l'ultima parola sui permessi.
</note>

<p>
Se realmente volete impostare i permessi attraverso
<path>/etc/devfsd.conf</path>, usate la sintassi del seguente esempio:
</p>

<pre caption = "Permessi in /etc/devfsd.conf">
REGISTER    ^cdroms/.*  PERMISSIONS root.cdrom 0660
</pre>

<p>
Il secondo campo è il gruppo di dispositivi, partendo da <path>/dev</path>. È
un'espressione regolare attraverso la quale potete selezionare diversi file di
periferica con una sola regola.
</p>

<p>
Il quarto campo è il proprietario del file di periferica. Il quinto campo
contiene i permessi del file di periferica.
</p>

</body>
</section>

<section>
<title>Impostare i permessi manualmente e farli salvare a devfsd</title>
<body>

<p>
Questo è ciò che Gentoo fa di default: se cambiate proprietario (con
<c>chown</c>) e permessi (con <c>chmod</c>) di alcuni file di periferica,
<c>devfsd</c> salverà le informazioni in modo tale da renderle persistenti ad
ogni riavvio  del sistema. Questo perché il file <path>/etc/devfsd.conf</path>
contiene le seguenti righe:
</p>

<pre caption = "/etc/devfsd.conf per il salvataggio dei permessi">
REGISTER        ^pt[sy]/.*   IGNORE
CHANGE          ^pt[sy]/.*   IGNORE
CREATE          ^pt[sy]/.*   IGNORE
DELETE          ^pt[sy]      IGNORE
REGISTER        ^log         IGNORE
CHANGE          ^log         IGNORE
CREATE          ^log         IGNORE
DELETE          ^log         IGNORE
REGISTER        .*           COPY    /lib/dev-state/$devname $devpath
CHANGE          .*           COPY    $devpath /lib/dev-state/$devname
CREATE          .*           COPY    $devpath /lib/dev-state/$devname
DELETE          .*           CFUNCTION GLOBAL unlink
/lib/dev-state/$devname
RESTORE         /lib/dev-state
</pre>


<p>
In altre parole, le modifiche ai file di periferica sono copiate
in <path>/lib/dev-state</path> non appena avviene il cambiamento
e ripristinate in <path>/dev</path> all'avvio
del sistema.
</p>

<p>
Un'altra possibilità è di montare <path>/lib/dev-state</path> in
<path>/dev</path> al momento dell'avvio. Per fare questo dovete essere sicuri
che devfs non venga montato automaticamente (il che significa che dovrete
ricompilare il kernel) e che esista <path>/dev/console</path>. Quindi, da
qualche parte all'inizio degli script di avvio del vostro sistema, dovete
mettere:
</p>

<pre caption = "Montare /lib/dev-state in /dev">
mount --bind /dev /lib/dev-state
mount -t devfs none /dev
devfsd /dev
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Risorse</title>
<section>
<body>

<p>
Per maggiori informazioni su devfs, controllate le seguenti risorse.
</p>

<p>
Le manpage di devfsd.conf spiegano la sintassi del file
<path>/etc/devfsd.conf</path>. Per vederle, digitate <c>man devfsd.conf</c>.
</p>

<p>
Le <uri
link="http://www.atnf.csiro.au/people/rgooch/linux/docs/devfs.html">devfs
FAQ</uri> spiegano tutto ciò che riguarda devfs. Contengono anche informazioni
sulla struttura interna dei devfs e come i driver possono supportare devfs.
</p>

<p>
Su <uri link="http://www.linuxjournal.com">LinuxJournal</uri> c'è un
interessante articolo su <uri
link="http://www.linuxjournal.com/article.php?sid=6035">devfs for Management and
Administration</uri>.
</p>

<p>
Daniel Robbins ha scritto una serie di articoli per IBM's DeveloperWorks sui
filesystem avanzati. Tre di questi riguardano devfs:
</p>

<ul>
  <li>
    <uri
    link="http://www-106.ibm.com/developerworks/linux/library/l-fs4/">Introduction
    to devfs</uri>
  </li>
  <li>
    <uri
    link="http://www-106.ibm.com/developerworks/linux/library/l-fs5/">Setting
    up devfs</uri>
  </li>
  <li>
    <uri
    link="http://www-106.ibm.com/developerworks/linux/library/l-fs6/">
    Implementing devfs</uri>
  </li>
</ul>

</body>
</section>
</chapter>

</guide>
