<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/uml.xml,v 1.9 2007/05/02 18:48:01 scen Exp $ -->

<guide link="/doc/it/uml.xml" lang="it">
<title>Guida per gli sviluppatori al test di sistema con i Linux
User-Mode</title>
<author title="Redazione">
 <mail link="g2boojum@gentoo.org">Grant Goodyear</mail>
</author>
<author title="Redazione">
 <mail link="zhen@gentoo.org">John Davis</mail>
</author>
<author title="Redazione">
 <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Redazione">
 <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>
<author title="Traduzione">
 <mail link="bernardo@linux.it">Bernardo Damele</mail>
</author>
<author title="Revisione">
 <mail link="posta@massimo.biz">Massimo Canali</mail>
</author>
<author title="Traduzione">
  <mail link="cristiano.chiucchiolo@gmail.com">Cristiano Chiucchiolo</mail>
</author>
<author title="Traduzione">
  <mail link="lmantellini@ieee.org">Luigi 'Comio' Mantellini</mail>
</author>


<abstract>
Questa guida mostra agli sviluppatori come configurare ed utilizzare gli
user-mode per testare cambiamenti potenzialmente dannosi per il sistema.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.15</version>
<date>2006-11-17</date>

<chapter>
<title>Ottenere le sorgenti per i Linux User-Mode</title>
<section>
<body>

<impo>
Prima di poter usare Linux User-Mode, è necessario passare ad un profilo senza
supporto a NPTL ed usare le librerie &lt;<c>glibc</c>-2.4. In tal senso, è
possibile seguire le istruzioni riportate in <uri
link="/doc/it/gentoo-upgrading.xml#instructions">modifica profilo</uri>.
Inoltre, sarà necessario eseguire <c>emerge -e world</c> successivamente al
passaggio al profilo non NPTL.
</impo>

<p>
Come dichiarato nel sito i Linux User-mode
(<uri>http://user-mode-linux.sourceforge.net</uri>) permettono all'utente di
"eseguire linux all'interno di se stesso" Specificamente i Linux User-Mode
forniscono una macchina virtuale all'interno della quale un utente può "eseguire
software difettoso, sperimentare nuovi kernel o distribuzioni e penetrare nelle
viscere di Linux, il tutto senza rischiare la propria installazione
principale". Cambiamenti sperimentali ai principali pacchetti di Gentoo quali
<e>sys-apps/baselayout</e> o <e>sys-libs/glibc</e> possono corrompere il sistema
e renderlo inutilizzabile. Attraverso l'utilizzo dei Linux user-mode possiamo
testare questi cambiamenti senza preoccuparci di possibili danni causati al
sistema principale.
</p>

<p>
La maggior parte dei kernel 2.6 hanno il supporto UML. Sebbene si possano usare
i sorgenti del kernel attuali, potrebbe essere più saggio mantenere separati gli
alberi del kernel UML. Dopotutto, compilerai un nuovo kernel, con una diversa
configurazione, e potresti voler avere diversi sistemi sul tuo sistema Linux
principale (più di un kernel UML).
</p>

<p>
Dunque, scarica un buon albero del kernel (come il vanilla, da <uri
link="http://www.kernel.org">kernel.org</uri>) ed estrailo in una cartella di
sviluppo.
</p>

<p>
Poi, configura il kernel UML come faresti per qualunque altro sistema, ma
aggiungi <e>ARCH=um</e>, cosicché il software di compilazione del kernel sappia
che il kernel sarà destinato a girare come processo ospite sul sistema
principale.
</p>

<pre caption="Compilare il kernel UML">
# <i>cd /srv/aegis/src/uml-linux</i>
# <i>make menuconfig <comment>ARCH=um</comment></i>
# <i>make linux <comment>ARCH=um</comment></i>
# <i>cp linux /usr/local/bin/linux</i>
</pre>

<warn>
<e>ARCH=um</e> è <e>estremamente</e> importante!
</warn>

<p>
Assicuratevi che <path>/usr/local/bin</path> sia nel vostro path. Modificate
<path>/etc/env.d/00basic</path> per vedere se contiene tra le variabili PATH
<path>/usr/local/bin</path> e riavviate <c>env-update</c>:
</p>

<pre caption="Editare 00basic">
# <i>nano -w /etc/env.d/00basic</i>
# <i>env-update</i>
# <i>source /etc/profile</i>
</pre>

<p>
Per permettere ad un kernel Linux User-Mode di effettuare il boot di un sistema
Gentoo in modo corretto, il kernel deve essere configurato per <e>non</e>
montare automaticamente la directory <path>/dev</path> (devfs) in modo
predefinito. Inoltre, dovrete assicurarvi di avere compilato il supporto per il
<e>tmpfs</e> (ovvero il "Virtual Memory Filesystem") dato che gli script di
boot, utilizzati da Gentoo Linux, memorizzano in modo predefinito le loro
informazioni in una piccola partizione tmpfs. (I kernel binari presenti sul sito
dei Linux user-mode montano automaticamente la directory <path>/dev</path> e non
hanno compilato al loro interno il supporto per tempfs: non perdeteci tempo).
</p>

<p>
Vi raccomando di leggere la documentazione relativa ai Linux user-mode, ma
l'idea di base è che: lanciando <path>/usr/local/bin/linux</path> il programma
esegue il boot del kernel user-mode e tenta di far partire il sistema
memorizzato nel file <path>root_fs</path> che dovrebbe essere posizionato nella
directory di lavoro corrente.
</p>

<p>
Potrebbe essere utile installare gli strumenti per Linux User-Mode.
</p>

<pre caption="Installare gli strumenti UML">
# <i>emerge sys-apps/usermode-utilities</i>
</pre>

<p>
Questi strumenti facilitano (fra le altre cose) lo scambio di dati via rete fra
il sistema virtuale lanciato nello user-mode e il sistema ospitante.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Creare root_fs</title>
<section>
<title>Creare il sistema da eseguire in ambiente "chroot"</title>
<body>

<p>
<path>root_fs</path> è un singolo file che contiene l'intero filesystem di
Gentoo Linux. Al fine di generarlo dovrete aver abilitato il supporto per il
dispositivo di Loopback nel kernel della macchina ospitante.
</p>

<p>
La generazione del file <path>root_fs</path> sarà il nostro ultimo passo. Prima
genereremo un filesystem di Gentoo in un normale ambiente, creato attraverso il
comando chroot. Abbiamo, quindi, bisogno dei file archivio degli stage, che
possono essere scaricati, copiati da un CD di installazione o estratti da una
file .iso di un CD di installazione.
</p>

<pre caption="Montare la traccia iso di un CD di installazione">
# <i>mkdir /mnt/loop</i>
# <i>mount -o loop /path/to/install-&lt;TAB&gt;.iso /mnt/loop</i>
</pre>

<p>
Creare un ambiente 'chroot' è essenzialmente identico ad una normale operazione
di compilazione di una installazione di Gentoo.
</p>

<pre caption="Creare l'ambiente chroot Gentoo">
# <i>mkdir /mnt/gentoo</i>
# <i>cd /mnt/gentoo</i>
# <i>tar xvjpf /path/to/stage&lt;TAB&gt;.tar.bz2</i>
</pre>

<p>
Continuate e alla fine smontate il file .iso. Ora non vi serve null'altro.
</p>

<p>
Create il sistema come al solito: eseguite il chroot in <path>/mnt/gentoo</path>
e seguite le istruzioni dell'installazione.
</p>

<p>
Aggiungete qualsiasi pacchetto che desiderate. Se volete, date pure un hostname
al vostro sistema virtuale. In <path>/etc/fstab</path> fate in modo che
<path>/dev/ROOT</path> sia <path>/dev/ubda</path> il tipo di fs può essere
ext2, ext3 o reiserfs. Impostate <path>/dev/SWAP</path> a <path>/dev/ubdb</path>
e commentate <path>/dev/BOOT</path>.
</p>

<p>
A questo punto ricordatevi di impostare la vostra password di root.
</p>

<pre caption="Impostare la password di root">
# <i>passwd</i>
</pre>

<p>
Ora dobbiamo fare alcuni cambiamenti agli script di boot. Rimuovere, come segue,
'consolefont' e 'keymaps' dal runlevel di boot:
</p>

<pre caption="Rimuovere gli initscript superflui">
# <i>rc-update del consolefont boot</i>
# <i>rc-update del keymaps boot</i>
</pre>

<p>
Uscite dall'ambiente chroot, smontate tutte le partizioni montate con l'opzione
bind e fate un tar della nuova distribuzione, alla fine, cancellate i file che
avete usato per fare il file tar.
</p>

<pre caption="Completare l'installazione">
# <i>cd /mnt/gentoo</i>
# <i>tar cvjpf ~/gentoo.tbz2 *</i>
# <i>cd</i>
# <i>rm -rf /mnt/gentoo</i>
</pre>

</body>
</section>

<section>
<title>Creare il file root_fs</title>
<body>

<p>
L'ambiente chroot di Gentoo occupa circa 300 MB, quindi <path>root_fs</path>
deve avere una dimensione almeno pari a questa. Scegliamo 0.5 GB, una dimensione
ragionevole.
</p>

<pre caption="Creare i file UML">
# <i>dd if=/dev/zero of=root_fs seek=500 count=1 bs=1M</i>
# <i>mke2fs -F root_fs</i>
# <i>mount -o loop root_fs /mnt/loop</i>
# <i>tar xvjpf gentoo.tbz2 -C /mnt/loop</i>
# <i>umount /mnt/loop</i>
</pre>

<p>
Sarebbe meglio avere una partizione di swap di 0.5 GB.
</p>

<pre caption="Creare la partizione swap">
# <i>dd if=/dev/zero of=swap_fs seek=500 count=1 bs=1M</i>
# <i>mkswap -f swap_fs</i>
</pre>

<p>
Adesso vedete se funziona!
</p>

<pre caption="Avviare UML a livello del kernel">
# <i>linux ubd0=root_fs ubd1=swap_fs</i>
</pre>

<p>
Linux User-Mode utilizza xterm per i terminali virtuali che sono avviati in fase
di boot, pertanto dovete assicurarvi che il terminale dal quale eseguite il
Linux User-Mode abbia la variabile $DISPLAY correttamente valorizzata (insieme
ai necessari permessi di xhost/xauth).
</p>

<p>
Con un po' di fortuna dovreste essere in grado di fare il login nel vostro
sistema Gentoo eseguito attraverso Linux User-Mode. L'unica cosa che manca al
sistema nei Linux User-Mode, per essere completamente funzionante, è il
collegamento di rete dalla macchina virtuale al sistema ospitante.
</p>

<note>
Se ricevi degli errori di "No space left on device" (ndt, "Spazio sul
dispositivo insufficiente"), potresti aver bisogno di allocare più memoria per
il tuo sistema User-Mode aggiungendo l'opzione <c>mem=xxxMB</c> alla fine della
riga di comando del kernel. Ad esempio: <c>linux ubd0=root_fs ubd1=swap_fs
mem=128MB</c>.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Reti</title>
<section>
<title>Usare una rete esistente</title>
<body>

<p>
Assicuratevi che il kernel della macchina ospitante abbia le seguenti
impostazioni compilate come moduli:
</p>

<pre caption="Configurare il kernel della macchina ospitante">
Networking --&gt;
  IP: Netfilter Configuration --&gt;
    IP tables support --&gt;
      Full NAT --&gt;
        &lt;M&gt; MASQUERADE target support

    Network Device Support --&gt;
      &lt;M&gt; TUN/TAP Support
</pre>

<p>
Ora, sulla <e>macchina ospitante</e>, eseguite quanto segue:
</p>

<pre caption="Impostare la rete">
# <i>modprobe tun</i>
<comment>(Se qui ricevete un 'FATAL error', provate a eliminare /dev/net/tun e
riprovate)</comment>
# <i>modprobe iptable_nat</i>
# <i>iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</i>
# <i>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</i>
</pre>

<p>
La riga che contiene il comando iptables attiva l'opzione di IP Masquerading fra
la rete privata sulla quale è attestato il sistema nello user-mode e internet
(raggiungibile via <c>eth0</c> nel nostro caso). La riga che contiene il comando
echo, quindi, attiva l'opzione di packet forwarding fra la rete privata e quella
sulla quale è attestata l'interfaccia che fa da gateway predefinito (eth0 nel
nostro caso).
</p>

<p>
Adesso attiviamo il sistema nello user-mode e vediamo se le opzioni di
networking sono funzionanti.
</p>

<pre caption="Attivare UML">
# <i>linux ubd0=root_fs ubd1=swap_fs eth0=tuntap,,,192.168.0.254</i>
<comment>(loggarsi al sistema user-mode)</comment>
# <i>ifconfig eth0 192.168.0.1 up</i>
# <i>ping -c 2 192.168.0.254</i>
PING 192.168.0.254 (192.168.0.254): 56 octets data
64 octets from 192.168.0.254: icmp_seq=0 ttl=255 time=0.8 ms
64 octets from 192.168.0.254: icmp_seq=1 ttl=255 time=0.6 ms

--- 192.168.0.254 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 0.6/0.7/0.8 ms
# <i>route add default gw 192.168.0.254</i>
# <i>netstat -rn</i>
Kernel IP routing table
Destination  Gateway        Genmask        Flags MSS Window irtt Iface
192.168.0.0  0.0.0.0        255.255.255.0  U      40 0         0 eth0
0.0.0.0      192.168.0.254  0.0.0.0        UG     40 0         0 eth0
# <i>scp user@192.168.0.254:/etc/resolv.conf /etc/resolv.conf</i> <comment>(se necessario)</comment>
# <i>ping -c 2 www.gentoo.org</i>
PING www.gentoo.org (207.170.82.202): 56 octets data
64 octets from 207.170.82.202: icmp_seq=0 ttl=240 time=119.6 ms
64 octets from 207.170.82.202: icmp_seq=1 ttl=240 time=92.0 ms

--- www.gentoo.org ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 92.0/105.8/119.6 ms
</pre>

<p>
Sul sistema nello user-mode assegniamo all'interfaccia eth0 l'indirizzo IP
192.168.0.1 e la attiviamo. Il sistema ospitante ha l'IP privato 192.168.0.254,
eseguiamo un ping verso quest'ultimo per assicurarci che le opzioni di
networking siano realmente attive. La linea che contiene il comando route
aggiunge un gateway predefinito, vale a dire il nostro sistema ospitante, usiamo
scp per recuperare un file <path>/etc/resolv.conf</path> valido (se necessario),
ed eseguiamo un ping verso www.gentoo.org per assicurarci che la risoluzione dei
nomi (e in generale l'accesso ad internet) sia funzionante dal nostro sistema
nello user-mode. Adesso il sistema nello user-mode può fare <c>emerge</c> a
volontà.
</p>

</body>
</section>
<section>
<title>Usare una rete virtuale</title>
<body>

<p>
Prima che ti ecciti troppo, sappi che non si tratta di una rete privata
virtuale. È una rete accessibile solo dai processi UML. Il pacchetto
<c>usermode-utilities</c> contiene uno strumento chiamato <c>uml_switch</c>, che
definisce gli end points dello switch.
</p>

<pre caption="Attivare gli end points di uno switch UML">
<comment>(Se le informazioni di switch dovrebbero stare in primo piano:)</comment>
$ <i>uml_switch -unix ~/tmp/switch.sock</i>

<comment>(Se dovrebbero stare sullo sfondo:)</comment>
$ <i>uml_switch -unix ~/tmp/switch.sock &amp;&gt;
~/tmp/switch.log &amp;</i>
 </pre>

<p>
Per avviare i processi UML sullo switch, esegui il seguente comando. La tua
interfaccia di rete (virtuale) verrà connessa al processo <c>uml_switch</c> e
userà il MAC address dato.
</p>

<pre caption="Eseguire il primo processo UML">
$ <i>linux ubd0=first_rootfs ubd1=first_swapfs eth0=daemon,10:00:01:02:00:00,,~/tmp/switch.sock</i>
</pre>

<p>
Puoi ancora connettere il sistema alla rete esistente, oppure collegare un
secondo processo sia alla rete virtuale che a quella esistente:
</p>

<pre caption="Eseguire il secondo processo UML">
$ <i>linux ubd0=second_rootfs ubd1=second_swapfs eth0=daemon,10:00:01:02:00:01,,~/tmp/switch.sock \
eth1=tuntap,,,192.168.1.43</i>
</pre>

<p>
Maggiori informazioni sulla configurazione di tuntap possono essere trovate
nella sezione precedente.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Testare il file .iso</title>
<section>
<body>

<p>
Probabilmente il test ideale sarebbe quello di eseguire il boot direttamente
del file .iso attraverso i Linux user-mode ed eseguire un'installazione
completa all'interno del sistema virtuale.
</p>

<p>
Fare il boot del file .iso, o meglio, eseguire l'initrd dal file .iso è
abbastanza semplice.
</p>

<pre caption="Avviare l'ISO">
# <i>mount -o loop /path/to/build-&lt;TAB&gt;.iso /mnt/loop</i>
# <i>cp /mnt/loop/isolinuxuml.xml/rescue.gz .</i>
# <i>linux load_ramdisk=1 prompt_ramdisk=0 ramdisk_size=22000 \</i>
&gt; <i>initrd=rescue.gz root=/dev/ram0 ubd0=root_fs ubd1=swap_fs \</i>
&gt; <i>ubd2=/dev/cdroms/cdrom0 eth0=tuntap,,,192.168.0.254</i>
</pre>

<p>
Adesso potete seguire la documentazione relativa all'installazione di Gentoo
praticamente alla lettera, anche se dovrete tenere presente che: il filesystem
di root sarà <path>/dev/ubd/0</path>, la "partizione" di swap sarà
<path>/dev/ubd/1</path>, e il CDROM sarà <path>/dev/ubd/2</path>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Riferimenti</title>
<section>
<body>

<ul>
  <li>
    <uri link="http://edeca.net/articles/bridging/index.html">Bridging with
    UML</uri>
  </li>
  <li>
    <uri link="http://user-mode-linux.sourceforge.net/">UML Homepage</uri>
  </li>
  <li>
    <uri link="http://www.theshore.net/~caker/uml/">Caker's UML Notes</uri>
  </li>
  <li>
    <uri link="http://sourceforge.net/mailarchive/forum.php?forum_id=3647">UML
    Mailinglist archives</uri>
  </li>
</ul>

</body>
</section>
</chapter>

</guide>
