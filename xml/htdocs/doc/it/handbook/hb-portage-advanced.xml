<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/handbook/hb-portage-advanced.xml,v 1.1 2012/02/07 19:48:53 swift Exp $ -->

<sections>

<abstract>
Con il passare del tempo, Portage si evolve e matura continuamente.
Caratteristiche ulteriori vengono continuamente introdotte - molte di queste
sono in uso solo dagli utenti più avanzati. Questo capitolo entrerà nel dettaglio
di queste caratteristiche avanzate.
</abstract>

<version>2</version>
<date>2012-02-07</date>

<section>
<title>Introduzione</title>
<body>

<p>
Per molti utenti le informazioni ricevute finora sono sufficienti per tutte le
loro operazioni nel sistema Linux. Ma Portage è capace di molto più; molte delle
sue caratteristiche sono concepite per utenti avanzati o sono applicabili solo
in certi casi specifici. Tuttavia, questa non è una valida scusa per non
documentarle.
</p>

<p>
Certamente, una maggiore flessibilità produce una lista sempre più vasta di casi
possibili. Non sarebbe praticabile documentarli tutti qui. Ci concentreremo,
invece, su alcuni casi generici che potranno essere adattati ai propri bisogni
particolari. Se si ha bisogno di configurazioni o consigli più specifici,
questi potrebbero essere trovati invece nel <uri
link="https://wiki.gentoo.org">WiKi di Gentoo</uri> (in inglese, NdT).
</p>

<p>
La descrizione della maggior parte, se di non tutte, queste caratteristiche
addizionali possono essere facilmente trovate cercando nelle pagine di manuale
che portage fornisce:
</p>

<pre caption="Leggere le pagine man di portage">
$ <i>man portage</i>
$ <i>man make.conf</i>
</pre>

<p>
Infine, si consideri che verranno trattate caratteristiche avanzate che, se non
funzionano correttamente, possono avere un complicato processo di individuazione
dei bug o di risoluzione dei problemi. Ci si assicuri di tenere a mente questo
fatto qualora si consideri di aprire un bug.
</p>

</body>
</section>

<section>
<title>Variabili d'ambiente per pacchetto</title>
<subsection>
<title>Usare /etc/portage/env</title>
<body>

<p>
Per default l'assemblaggio dei pacchetti usa le variabili d'ambiente definite in
<path>/etc/make.conf</path>, come <c>CFLAGS</c>, <c>MAKEOPTS</c> e altre. In
alcuni casi, tuttavia, potrebbe essere necessario fornire varaibili diverse per
pacchetti specifici. Per farlo, Portage supporta l'uso di
<path>/etc/portage/env</path> e <path>/etc/portage/package.env</path>.
</p>

<p>
Il file <path>/etc/portage/package.env</path> contiene la lista di pacchetti per
i quali si desiderano variabili diverse, così come identificatori specifici che
indicano a Portage quali sono i cambiamenti desiderati. Il nome
dell'identificatore può essere scelto liberamente, Portage cercherà queste
variabili nel file <path>/etc/portage/env/&lt;identifier&gt;</path>.
</p>

</body>
</subsection>
<subsection>
<title>Esempio: fare il debug di un singolo pacchetto</title>
<body>

<p>
Come sempio, abilitiamo il debug per il pacchetto
<path>media-video/mplayer</path>.
</p>

<p>
Per iniziare, impostiamo le variabili per il debug in un file chiamato
<path>/etc/portage/env/debug-cflags</path>. il nome è stato scelto
arbitrariamente, ma ovviamente riflette la ragione dello scostamento da fare per
renderlo più chiaro successivamente quando lo scostamento sarà attivato.
</p>

<pre caption="contenuto di /etc/portage/env/debug-cflags">
CFLAGS="-O2 -ggdb -pipe"
FEATURES="${FEATURES} nostrip"
</pre>

<p>
Poi indichiamo al pacchetto <path>media-video/mplayer</path> di usarne il
contenuto:
</p>

<pre caption="contenuto di /etc/portage/package.env">
media-video/mplayer debug-cflags
</pre>

</body>
</subsection>
</section>

<section>
<title>Inserirsi nel proceso di Emerge</title>
<subsection>
<title>Usare /etc/portage/bashrc i file associati</title>
<body>

<p>
Quando Portage lavora con gli ebuild, usa delle variabili di ambiente bash nelle
quali sono predisposte le chiamate alle varie funzioni di compilazione (come
src_prepare, src_configure, pkg_postinst, ecc.). Ma Portage consente anche di
usare delle proprie variabili d'ambiente.
</p>

<p>
Il vantaggio di usare il proprio ambiente bash è che ci si può inserire nel
processo di emerge in ognuno dei suoi passaggi. Questo può essere fatto per ogni
emerge (attraverso <path>/etc/portage/bashrc</path>) o usando un ambiente
specifico per pacchetto (attraverso <path>/etc/portage/env</path>, come discusso
in precedenza).
</p>

<p>
Per inseririsi nel processo, l'ambiente bash può porsi in ascolto delle
variabili <c>EBUILD_PHASE</c>, <c>CATEGORY</c> e delle variabili che sono sempre
disponibili durante lo sviluppo dell'ebuild (come <c>P</c>, <c>PF</c>, ...).
Sulla base del valore di queste variabili, possono essere seguiti passaggi
ulteriori.
</p>

</body>
</subsection>
<subsection>
<title>Esempio: aggiornare il database dei file</title>
<body>

<p>
In questo esempio useremo <path>/etc/portage/bashrc</path> per invocare alcune
applicazioni basate su database per assicurarci che i loro database siano sempre
allineati col sistema. Le applicazioni usate nell'esempio sono <c>aide</c> (un
sistema di rilevamento delle intrusioni) e <c>updatedb</c> (da usare con
<c>locate</c>), ma sono da intendersi come semplici esempi. Non si consideri
questo esempio come una GUIDA per AIDE ;-)
</p>

<p>
Per usare <path>/etc/portage/bashrc</path> per il nostro scopo, abbiamo bisogno
di "agganciarci" alle funzioni <c>postrm</c> (dopo la rimozione di file) e
<c>postinst</c> (dopo l'installazione di file), visto che queste individuano i
momenti in cui i file nel sistema cambiano.
</p>

<pre caption="Esempio di /etc/portage/bashrc">
if [ "${EBUILD_PHASE}" == "postinst"] || [ "${EBUILD_PHASE}" == "postrm" ];
then
  echo ":: Calling aide --update to update its database";
  aide --update;
  echo ":: Calling updatedb to update its database";
  updatedb;
fi
</pre>

</body>
</subsection>
</section>

<section>
<title>Eseguire un compito dopo --sync</title>
<subsection>
<title>La directory /etc/portage/postsync.d</title>
<body>

<p>
Fino ad ora abbiamo parlato di come agganciarsi al processo di ebuild. Tuttavia
Portage ha anche un'altra importante funzione: aggiornare l'albero di Portage.
Per eseguire compiti dopo aver aggiornato l'albero di Portage, collocare uno
script in <path>/etc/portage/postsync.d</path> e assicurarsi che sia eseguibile.
</p>

</body>
</subsection>
<subsection>
<title>Esempio: eseguire eix-update</title>
<body>

<p>
Se non si utilizza <c>eix-sync</c> per aggiornare l'albero, potrebbe essere
ancora necessario aggiornare il database di eix dopo l'esecuzione di <c>emerge
--sync</c> (o <c>emerge-webrsync</c>) ponendo un link simbolico a
<path>/usr/bin/eix</path> chiamato <path>eix-update</path> in
<path>/etc/portage/postsync.d</path>.
</p>

<pre caption="Eseguire eix-update dopo una sincronizzazione">
# <i>ln -s /usr/bin/eix /etc/portage/postsync.d/eix-update</i>
</pre>

<note>
Se si usa un nome diverso, sarà necessario preparare uno script che invoca
<c>/usr/bin/eix-update</c>. L'eseguibile <c>eix</c> controlla il modo in cui è
stato invocato per stabilire quale funzione deve eseguire. Se si prepara un link
simbolico a <c>eix</c> che non si chiama <c>eix-update</c> non funzionerà
correttamente.
</note>

</body>
</subsection>
</section>

<section>
<title>Sovrascrivere le impostazioni del profilo</title>
<subsection>
<title>La directory /etc/portage/profile</title>
<body>

<p>
Come impostazione predefinita, Gentoo usa le impostazioni contenute nel profilo
a cui punta <path>/etc/make.profile</path> (un link simbolico alla directory di
profilo appropriata). Questi profili definiscono sia delle impostazioni
specifiche e sia il modo con cui le impostazioni sono ereditate da altri profili
(attraverso i loro file <path>parent</path>).
</p>

<p>
Usando <path>/etc/portage/profile</path> si possono sovrascrivere delle
impostazioni del profilo come <path>packages</path> (quali pacchetti sono
considerati parte del set di sistema), <path>virtuals</path> (i pacchetti
predefiniti da usare quando si installa un "virtual") e altro.
</p>

</body>
</subsection>
<subsection>
<title>Esempio: aggiungere nfs-utils al set di sistema</title>
<body>

<p>
Se si usano file system NFS per file system abbastanza critici, si potrebbe
preferire di avere <path>net-fs/nfs-utils</path> "protetto" in quanto pacchetto
di sistema, chiedendo a Portage di avvisarvi insistentemente se dovesse essere
in procinto di essere rimosso.
</p>

<p>
Per ottenere questo, bisogna aggiunge il pacchetto a
<path>/etc/portage/profile/packages</path>, anteponendogli un <c>*</c>:
</p>

<pre caption="contenuto di /etc/portage/profile/packages">
*net-fs/nfs-utils
</pre>

</body>
</subsection>
</section>

<section>
<title>Applicare patch non standard</title>
<subsection>
<title>usare epatch_user</title>
<body>

<p>
Per gestire diversi ebuild in un modo simile, gli sviluppatori di ebuild usano
<e>eclasses</e> (una specie di librerie shell) che definiscono funzioni usate
di frequente. Una di queste <e>eclasses</e> è <path>eutils.eclass</path> che
contiene una interessante funzione chiamata <c>epatch_user</c>.
</p>

<p>
La funzione <c>epatch_user</c> applica al codice sorgente le patch che si
trovano in
<path>/etc/portage/patches/&lt;category&gt;/&lt;package&gt;[-&lt;version&gt;[-&lt;revision&gt;]]</path>,
nella directory trovata per prima. Sfortunatamente non tutti gli ebuild
chiamano questa funzione, quindi mettere semplicemente la patch in queste
posizioni potrebbe non funzionare.
</p>

<p>
Per fortuna, con le informazioni fornite in precedenza, si può sempre invocare
questa funzione agganciandosi, per esempio, alla fase <c>prepare</c>. La
funzione può essere invocata tutte le volte che si desidera - le patche verranno
applicate una sola volta.
</p>

</body>
</subsection>
<subsection>
<title>Esempio: applicare delle patch a Firefox</title>
<body>

<p>
Il pacchetto <path>www-client/firefox</path> è uno dei pochi che già chiama
<c>epatch_user</c> dall'interno dell'ebuild, quindi non occorre sovrascrivere
nulla di specifico.
</p>

<p>
Se si ha bisogno di applicare una patch a firefox (ad esempio perché ci viene
chiesto da uno sviluppatore per aiutarlo a corregger un bug), porre la patch in
<path>/etc/portage/patches/www-client/firefox</path> (probabilmente è meglio
usare il nome completo, inclusa la versione, affinché le patch non
interferiscano con le versioni successive) e ricompilare Firefox.
</p>

</body>
</subsection>
</section>

</sections>
