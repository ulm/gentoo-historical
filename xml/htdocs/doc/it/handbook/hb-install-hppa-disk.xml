<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/handbook/hb-install-hppa-disk.xml,v 1.11 2007/06/27 20:15:01 scen Exp $ -->

<sections>

<version>8.1</version>
<date>2007-06-26</date>

<section>
<title>Introduzione ai dispositivi a blocchi</title>
<subsection>
<title>Dispositivi a blocchi</title>
<body>

<p>
Si dà ora un'occhiata approfondita agli aspetti relativi ai dischi in Gentoo Linux
e in Linux in generale, tra cui i filesystem Linux, le partizioni e i
dispositivi a blocchi. Quindi, una volta acquisita familiarità con i dischi e
i filesystem, si viene guidati attraverso il processo di configurazione delle
partizioni e dei filesystem per l'installazione di Gentoo Linux.
</p>

<p>
Per cominciare, si introducono i <e>dispositivi a blocchi</e>. Il dispositivo
a blocchi più famoso è molto probabilmente quello che rappresenta il primo
hard disk SCSI in un sistema Linux, <path>/dev/sda</path>.
</p>

<p>
I dispositivi a blocchi rappresentano un'interfaccia astratta ai dischi.
I programmi utente possono usare questi dispositivi a blocchi per interagire
con i dischi, senza doversi chiedere se si tratta di unità IDE, SCSI o di
qualsiasi altro tipo. Il programma può semplicemente indirizzare la
memorizzazione su disco attraverso dei blocchi contigui, accessibili in
modalità random, e di dimensione pari a 512 byte ciascuno.
</p>

</body>
</subsection>
<subsection>
<title>Partizioni e slices</title>
<body>

<p>
Nonostante sia possibile usare un intero disco per il sistema Linux, ciò non
è quasi mai messo in pratica. Invece, i dispositivi a blocchi del disco sono
divisi in parti più piccole e più maneggevoli. Sulla maggior parte dei sistemi,
queste sono chiamate <e>partizioni</e>. Altre architetture usano una tecnica
simile, chiamandole <e>slices</e>.
</p>

</body>
</subsection>
</section>
<section>
<title>Impostare uno schema di partizionamento</title>
<subsection>
<title>Numero e dimensione delle partizioni</title>
<body>

<p>
Il numero delle partizioni è altamente dipendente sull'ambiente. Per esempio,
se si hanno molti utenti su una stessa macchina, molto probabilmente si
desidera tenere separate le directory <path>/home</path>, aumentando così
la sicurezza e rendendo più facile il backup. Se si sta installando Gentoo per
utilizzarlo da mailserver, <path>/var</path> dovrebbe essere separata poichè
tutta la posta viene memorizzata in essa. Una buona scelta del filesystem è
quella che massimizza le prestazioni. I gameserver è bene che abbiano una
partizione separata per <path>/opt</path>, visto che la maggior parte dei server
di gioco sono installati li. La stessa cosa vale per <path>/home</path>:
sicurezza e backup. Si dovrebbe tenere una grande <path>/usr</path>: questa
contiene non solo la maggior parte delle applicazioni, il solo Portage tree
occupa 500 MB di spazio, esclusi i sorgenti che sono in esso.
</p>

<p>
Come si è visto, molto dipende da cosa si desidera realizzare. Partizioni o
volumi separati hanno i seguenti vantaggi:
</p>

<ul>
<li>
  Si può scegliere il filesystem con maggiori prestazioni per ogni partizione
  o volume
</li>
<li>
  L'intero sistema non può esaurire lo spazio libero se un tool malfunzionante
  scrive all'infinito su una partizione od un volume
</li>
<li>
  Nel caso si rendano necessari, i controlli sul filesystem sono ridotti,
  poichè possono essere condotti in parallelo diverse analisi (questo vantaggio
  è più per i dischi multipli che per le partizioni multiple)
</li>
<li>
  La sicurezza può essere aumentata montando alcune partizioni o volumi
  in sola lettura, nosuid (i bit setuid vengono ignorati), noexec (i bit
  executable sono ignorati) etc.
</li>
</ul>

<p>
Le partizioni multiple hanno però un grosso svantaggio: se non sono configurate
correttamente, si potrebbe avere un sistema con molto spazio libero su una
partizione e poco su un'altra. C'è anche un limite di 15 partizioni per
SCSI e SATA.
</p>

</body>
</subsection>
</section>
<section>
<title>Usare fdisk su HPPA per partizionare il disco</title>
<body>

<p>
Usare <c>fdisk</c> per creare le partizioni che si desiderano:
</p>

<pre caption="Partizionare il disco">
# <i>fdisk /dev/sda</i>
</pre>

<p>
Le macchine HPPA usano le tabelle di partizioni PC standard DOS. Per creare
una nuova tabella di partizione DOS, usare il comando <c>o</c>.
</p>

<pre caption="Creare una tabella di partizioni DOS">
# <i>fdisk /dev/sda</i>

Command (m for help): <i>o</i>
Building a new DOS disklabel.
</pre>

<p>
PALO (il bootloader di HPPA) ha bisogno di una
partizione speciale per funzionare. Si deve creare una partizione di almeno
16MB all'inizio del disco. Il tipo di partizione deve essere
<e>f0</e> (Linux/PA-RISC boot).
</p>

<impo>
Se si continua senza creare una partizione speciale per PALO, il sistema non
partirà. Se il disco è più grande di 2GB, assicurarsi che la partizione di boot
sia nei primi 2GB. PALO non può leggere un kernek dopo 2GB.
</impo>

<pre caption="Un esempio di schema di partizionamento di default">
# <i>cat /etc/fstab</i>
/dev/sda2    /boot   ext3    noauto,noatime   1 1
/dev/sda3    none    swap    sw               0 0
/dev/sda4    /       ext3    noatime          0 0

# <i>fdisk /dev/sda</i>

Command (m for help): <i>p</i>

Disk /dev/sda: 4294 MB, 4294816768 bytes
133 heads, 62 sectors/track, 1017 cylinders
Units = cylinders of 8246 * 512 = 4221952 bytes

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1               1           8       32953   f0  Linux/PA-RISC boot
/dev/sda2               9          20       49476   83  Linux
/dev/sda3              21          70      206150   82  Linux swap
/dev/sda4              71        1017     3904481   83  Linux
</pre>

<p>
Ora che le partizioni sono create, si può continuare con la sezione riguardante
come <uri link="#filesystems">Creare i filesystem</uri>.
</p>

</body>
</section>
<section id="filesystems">
<title>Creare i filesystem</title>
<subsection>
<title>Introduzione</title>
<body>

<p>
Ora che le partizioni sono state create, è il momento di inserire il filesystem.
Se non si è interessati alla scelta del filesystem e vanno bene quelli che si
usano di default in questo Manuale, continuare con la sezione su come
<uri link="#filesystems-apply">Applicare un filesystem a una partizione</uri>.
Altrimenti ecco una descrizione dei filesystem disponibili.
</p>

</body>
</subsection>
<subsection>
<title>Filesystem</title>
<body>

<p>
Sono disponibili molti filesystem. Ext2, ext3, XFS e reiserfs sono stabili
sull'architettura HPPA. Gli altri sono sperimentali.
</p>

<p>
<b>ext2</b> è il vero e proprio filesystem di Linux ma non possiede il supporto
per il metadata journaling, il che significa che le routine che effettuano
all'avvio i controlli sul filesystem ext2 possono impiegare diverso tempo.
Al momento esiste una scelta abbastanza ampia di filesystem journaled di nuova
generazione che sono in grado di effettuare controlli sulla consistenza molto
velocemente e sono generalmente preferiti alle controparti non-journaled.
I filesystem journaled prevengono i lunghi tempi di attesa che solitamente si
riscontrano quando viene riavviato il sistema e il filesystem si trova in uno
stato inconsistente.
</p>

<p>
<b>ext3</b> è la versione journaled del filesystem ext2, fornisce il metadata
journaling per un veloce recupero dei dati in aggiunta ad altre caratteristiche
di journaling avanzate come full data e ordered data journaling. Utilizza un
indice HTree che abilita alte prestazioni in quasi tutte le situazioni. In
breve, ext3 è un filesystem davvero molto valido e affidabile.
</p>

<p>
<b>ReiserFS</b> è un filesystem basato su B+tree che offre ottime performance
generali e si dimostra notevolmente superiore a ext2 e ext3 con file di piccole
dimensioni (file minori di 4k), spesso di un fattore 10-15. ReiserFS scala
inoltre molto bene e supporta il metadata journaling. ReiserFS ha raggiunto la
solidità che lo porta a essere caldamente raccomandato sia per un uso generico
che per casi estremi come la creazione di grandi filesystem, file molto grandi e
directory contenenti decine di migliaia di piccoli file.
</p>

<p>
<b>XFS</b> è un filesystem con metadata journaling che si presenta con un
robusto insieme di caratteristiche ed è ottimizzato per la scalabilità . Se ne
raccomanda l'uso su sistemi Linux dotati di unità di memorizzazione con canali
in fibra o high-en SCSI e alimentazione continua. Data l'aggressività con la
quale XFS si serve della cache in RAM per i dati in transito, programmi
progettati in modo non adeguato (quelli che non prendono precauzioni quando
scrivono file su disco, e ce ne sono diversi) possono perdere una discreta
quantità di dati se il sistema si arresta in modo inaspettato.
</p>

<p>
<b>JFS</b> è il filesystem con journaling ad alte prestazioni di IBM. E' stato
recentemente giudicato pronto per il mercato, ma ad oggi non è stato
sufficientemente testato per fare commenti positivi o negativi sulla sua
stabilità generale.
</p>

</body>
</subsection>
<subsection id="filesystems-apply">
<title>Applicare un filesystem a una partizione</title>
<body>

<p>
Per creare un filesystem su una partizione o volume, sono disponibili tool per
ogni filesystem possibile:
</p>

<table>
<tr>
  <th>Filesystem</th>
  <th>Comando per la creazione</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mke2fs</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mke2fs -j</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
Per esempio, per avere la partizione di boot (<path>/dev/sda2</path>) ext2 e la
partizione root (<path>/dev/sda4</path>) ext3, si usa:
</p>

<pre caption="Applicare un filesystem su una partizione">
# <i>mke2fs /dev/sda2</i>
# <i>mke2fs -j /dev/sda4</i>
</pre>

<p>
Ora si procede alla creazione dei filesystem sulle partizioni (o volumi logici)
create precedentemente.
</p>

</body>
</subsection>
<subsection>
<title>Attivare la partizione swap</title>
<body>

<p>
<c>mkswap</c> è il comando usato per inizializzare le partizioni swap:
</p>

<pre caption="Inizializzare la partizione swap">
# <i>mkswap /dev/sda3</i>
</pre>

<p>
Per attivare la partizione swap, usare <c>swapon</c>:
</p>

<pre caption="Attivare la partizione swap">
# <i>swapon /dev/sda3</i>
</pre>

<p>
Creare e attivare swap con il comando menzionato sopra.
</p>

</body>
</subsection>
</section>
<section>
<title>Montare</title>
<body>

<p>
Ora che le partizioni sono inizializzate e hanno un filesystem, è il momento di
montarle. Usare il comando <c>mount</c>. Non dimenticarsi di creare le
necessarie directory di mount per ogni partizione creata. Come esempio si monta
la partizione root e boot:
</p>

<pre caption="Montare le partizioni">
# <i>mount /dev/sda4 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/sda2 /mnt/gentoo/boot</i>
</pre>

<note>
Se si vuole che <path>/tmp</path> risieda in una partizione separata,
assicurarsi di cambiare i permessi dopo il mount:
<c>chmod 1777 /mnt/gentoo/tmp</c>. Questo vale anche per <path>/var/tmp</path>.
</note>

<p>
E' necessario inoltre montare il filesystem proc (una interfaccia virtuale
con il kernel) su <path>/proc</path>. Ma prima si devono mettere i file sulle
partizioni.
</p>

<p>
Ora continuare con la <uri link="?part=1&amp;chap=5">Copia dei file di
installazione di Gentoo</uri>.
</p>

</body>
</section>
</sections>
