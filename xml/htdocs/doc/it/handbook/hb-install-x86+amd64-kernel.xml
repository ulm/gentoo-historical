<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/handbook/hb-install-x86+amd64-kernel.xml,v 1.23 2009/11/30 22:07:13 scen Exp $ -->

<sections>

<abstract>
Il kernel di Linux è il cuore di ogni distribuzione. Il capitolo tratta della
configurazione del Kernel.
</abstract>

<version>7.3</version>
<date>2009-11-30</date>

<section>
<title>Fuso Orario (Timezone)</title>
<body>

<p>
Innanzitutto è necessario selezionare il proprio fuso orario (timezone), in modo
che il sistema riconosca in che parte del globo è collocato. Individuare il
proprio fuso orario in <path>/usr/share/zoneinfo</path>, dopodichè copiarlo in
<path>/etc/localtime</path>. Si sconsiglia di utilizzare i fusi orari del tipo
<path>/usr/share/zoneinfo/Etc/GMT*</path> poichè i loro nomi non indicano le
zone che ci si aspetterebbe. Per esempio <path>GMT-8</path> indica GMT+8.
</p>

<pre caption="Abilitare le informazioni sul fuso orario (timezone)">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Per esempio GMT:)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>

<section>
<title>Installare i sorgenti</title>
<subsection>
<title>Scegliere un Kernel</title>
<body>

<p>
Il cuore, intorno al quale sono sviluppate tutte le distribuzioni, è il Kernel
di Linux. E' la parte di software compresa tra i programmi e l'hardware. Gentoo
dà la possibilità ai suoi utenti di scegliere tra diversi sorgenti del kernel.
Una lista completa delle descrizioni dei kernel disponibili, è consultabile
nella <uri link="/doc/it/gentoo-kernel.xml">Guida ai Kernel Gentoo</uri>.
</p>

<p>
Per i sistemi basati sull'architettura <keyval id="arch"/> sono disponibili, tra
gli altri, i <c>gentoo-sources</c> (sorgenti del kernel modificati con patch per
caratteristiche aggiuntive).
</p>

<p>
Ora è possibile dunque scegliere ed installare i sorgenti del kernel tramite
<c>emerge</c>.
</p>

<pre caption="Installare un sorgente del kernel">
# <i>emerge gentoo-sources</i>
</pre>

<p>
Se si dà un'occhiata a <path>/usr/src</path>, si dovrebbe vedere un link
simbolico chiamato <path>linux</path>, che punta al sorgente del kernel. In
questo caso si tratta di <c>gentoo-sources-<keyval id="kernel-version"/></c>, ma
ricordarsi che la versione potrebbe essere diversa:
</p>

<pre caption="Il link simbolico al codice sorgente del kernel">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-<keyval id="kernel-version"/>
</pre>

<p>
Ora si procede a configurare e compilare il sorgente del kernel. Allo scopo è
possibile utilizzare <c>genkernel</c>, che compila un kernel generico come
quello usato dal CD di Installazione. Si tratta però prima la configurazione
"manuale", poichè è il miglior modo di ottimizzare l'ambiente.</p>

<p>
Se si desidera configurare il kernel manualmente, continuare con <uri
link="#manual">Predefinito: Configurazione manuale</uri>. Per chi preferisce
usare <c>genkernel</c>, leggere <uri link="#genkernel">Alternativa: Usare
genkernel</uri>.
</p>

</body>
</subsection>
</section>

<section id="manual">
<title>Predefinito: Configurazione manuale</title>
<subsection>
<title>Introduzione</title>
<body>

<p>
La configurazione manuale del kernel è spesso considerata la parte più difficile
che ogni utente Linux incontra. Non è assolutamente vero: dopo aver configurato
un po' di kernel, l'operazione risulta semplice.
</p>

<p>
Una cosa <e>è</e> però vera: si deve conoscere il proprio sistema quando si
comincia una configurazione manuale del kernel. La maggior parte delle
informazioni può essere raccolta installando pciutils (<c>emerge pciutils</c>)
che contiene <c>lspci</c>. E' possibile tranquillamente ignorare gli errori di
<e>pcilib</e> (ad esempio pcilib: cannot open /sys/bus/pci/devices) che a volte
<c>lspci</c> stampa a video. In alternativa è anche possibile eseguire
<c>lspci</c> dal di fuori dell'ambiente chrootato, in quanto i risultati sono i
medesimi. Si può anche eseguire <c>lsmod</c> per vedere che moduli del kernel
usa il CD di Installazione (potrebbe fornire un buon suggerimento su cosa
abilitare).
</p>

<p>
Andare nella directory del sorgente del kernel, e digitare <c>make
menuconfig</c> per visualizzare un menu di configurazione basato su ncurses.
</p>

<pre caption="Aprire menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Vengono visualizzate molte sezioni di configurazione. Ecco ora alcune opzioni
che devono essere attivate (altrimenti Gentoo non può funzionare, o non funziona
correttamente senza modifiche aggiuntive).
</p>

</body>
</subsection>
<subsection>
<title>Attivare le opzioni indispensabili</title>
<body>

<p>
E' importante verificare che ogni driver necessario al boot della propria
macchina (ad esempio il controller SCSI, ..) sia compilato <e>nel</e> kernel e
non come modulo. In caso contrario il sistema potrebbe non funzionare
correttamente.
</p>

</body>
<body test="func:keyval('arch')='AMD64'">

<p>
Selezionare il tipo esatto di processore. Il mantenitore del kernel x86_64
raccomanda gli utenti di abilitare MCE features, in modo da poter essere
avvisati se ci dovessero essere problemi hardware. Su x86_64, questi errori non
sono visualizzati su <c>dmesg</c> come per le altre architetture, ma su
<path>/dev/mcelog</path>, che richiede il pacchetto <c>app-admin/mcelog</c>.
Assicurarsi di selezionare IA32 Emulation se si desidera poter eseguire
programmi a 32-bit. Gentoo installerà un sistema multilib (calcolo misto a
32/64-bit) in modo predefinito, per cui, molto probabilmente, si avrà bisogno di
tale opzione.
</p>

<pre caption="Selezionare il tipo di processore e caratteristiche">
Processor type and features  --->
   [ ] Machine Check Exception
   [ ] Intel MCE Features
   [ ] AMD MCE Features
  Processor family (AMD-Opteron/Athlon64)  --->
    ( ) Opteron/Athlon64/Hammer/K8
    ( ) Intel P4 / older Netburst based Xeon
    ( ) Core 2/newer Xeon
    ( ) Generic-x86-64
  Executable file formats / Emulations  --->
    [*] IA32 Emulation
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
Selezionare ora la famiglia di processori corretta:
</p>

<pre caption="Selezionare la corretta famiglia di processori">
Processor type and features ---&gt;
  <comment>(Scegliere in base al proprio sistema)</comment>
  (<i>Athlon/Duron/K7</i>) Processor family
</pre>

</body>
<body>

<p>
Andare su <c>File Systems</c> e selezionare il supporto per i filesystem
utilizzati. <e>Non</e> compilare tali supporti come moduli, altrimenti Gentoo
non può montare le partizioni. Selezionare anche <c>Virtual memory</c>, <c>/proc
file system</c>.
</p>

<pre caption="Selezionare il filesystem">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [ ] /dev file system support (OBSOLETE)
    [*] Virtual memory file system support (former shm fs)

<comment>(Selezionare una o più delle seguenti, secondo necessità)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Se si sta usando PPPoE per connettersi a Internet, si ha bisogno delle seguenti
opzioni nel kernel:
</p>

<pre caption="Selezionare i driver necessari per PPPoE">
Device Drivers ---&gt;
  Networking Support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Le due opzioni di compressione non sono dannose, ma neppure necessarie; lo
stesso vale per <c>PPP over Ethernet</c>, che potrebbe essere usata soltanto da
<c>ppp</c> se configurato in modalità kernel.
</p>

<p>
Chi ne ha bisogno non deve dimenticare di includere nel kernel il supporto per
la propria scheda di rete ethernet.
</p>

<p test="func:keyval('arch')='x86'">
Se si è in possesso di una CPU Intel che supporta HyperThreading (tm), o si
possiede un sistema con più CPU, è possibile attivare il supporto
multiprocessore:
</p>

<p test="func:keyval('arch')='AMD64'">
Se si è in possesso di più CPU Opteron o un multi-core (es AMD64 X2), è
possibile attivare il supporto multiprocessore:
</p>

<pre caption="Attivare il supporto multiprocessore">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<note>
Nei sistemi multicore, ciascun core vale come un processore.
</note>

<p test="func:keyval('arch')='x86'">
Se il sistema ha più di 4GB di RAM, bisogna abilitare "High Memory Support
(64G)".
</p>

<p>
Se si utilizzano periferiche USB (come mouse o tastiere) è necessario
abilitarle:
</p>

<pre caption="Attivare il supporto USB per dispositivi di input">
Device Drivers ---&gt;
  [*] HID Devices ---&gt;
    &lt;*&gt;   USB Human Interface Device (full HID) support
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
Se si desidera il supporto PCMCIA sui portatili non dimenticare di abilitare il
supporto per il bridge PCMCIA di sistema:
</p>

<pre caption="Abilitare il supporto PCMCIA">
Bus options (PCI, PCMCIA, EISA, MCA, ISA)  ---&gt;
  PCCARD (PCMCIA/CardBus) support  ---&gt;
    &lt;*&gt; PCCard (PCMCIA/CardBus) support
<comment>(selezionare 16 bit se si utilizzano schede vecchie, spesso è utile.)</comment>
    &lt;*&gt;   16-bit PCMCIA support
    [*]   32-bit CardBus support
<comment>(selezionare i bridge di interesse)</comment>
    --- PC-card bridges
    &lt;*&gt; CardBus yenta-compatible bridge support (NEW)
    &lt;*&gt; Cirrus PD6729 compatible bridge support (NEW)
    &lt;*&gt; i82092 compatible bridge support (NEW)
    &lt;*&gt; i82365 compatible bridge support (NEW)
    &lt;*&gt; Databook TCIC host bridge support (NEW)
</pre>

<p>
Una volta terminata la configurazione del kernel continuare con la <uri
link="#compiling">Compilazione e Installazione</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Compilazione e Installazione</title>
<body>

<p>
Ora che il kernel è configurato, il prossimo passo è la compilazione e
l'installazione. Uscire dal menu di configurazione ed avviare la compilazione:
</p>

<pre caption="Compilare il kernel">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Quando la compilazione è finita, è necessario copiare l'immagine del kernel in
<path>/boot</path>. E' possibile utilizzare qualsiasi nome per indicare il
proprio kernel, è sufficiente tenerlo a mente perchè è necessario nella
configurazione del bootloader. Ricordare di sostituire <path><keyval
id="kernel-name"/></path> con il nome e la versione del proprio kernel.
</p>

<pre caption="Installare il kernel">
# <i>cp arch/<keyval id="arch-sub"/>/boot/bzImage /boot/<keyval id="kernel-name"/></i>
</pre>

<p>
Ora proseguire con i <uri link="#kernel_modules">Moduli del Kernel</uri>.
</p>

</body>
</subsection>
</section>

<section id="genkernel">
<title>Alternativa: Usare genkernel</title>
<body>

<p>
Se si sta leggendo questa sezione, vuol dire che si è scelto di usare lo script
<c>genkernel</c>, che configura il kernel.
</p>

<p>
Adesso che sono stati installati i sorgenti del kernel si può utilizzare lo
script <c>genkernel</c> per configurarlo e compilarlo automaticamente.
<c>genkernel</c> configura il kernel in modo quasi identico a come è configurato
quello del CD di Installazione. Infatti quando si usa <c>genkernel</c> per
compilare il kernel, il sistema rileva tutto l'hardware al boot, proprio come il
CD di Installazione. Poichè genkernel non richiede nessuna configurazione
manuale del kernel, questa è una soluzione ideale per quegli utenti che hanno
qualche difficoltà nel compilarsi il kernel da soli.
</p>

<p>
Ecco come usare genkernel. Per prima cosa si deve emergere l'ebuild di
genkernel:
</p>

<pre caption="Emergere genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Ora copiare la configurazione del kernel del CD di Installazione nella directory
dove genkernel si aspetta la configurazione predefinita per il kernel:
</p>

<pre test="func:keyval('arch')='x86'" caption="Copia della configurazione del
kernel del CD di Installazione">
# <i>zcat /proc/config.gz &gt; /usr/share/genkernel/arch/x86/kernel-config</i>
</pre>

<pre test="func:keyval('arch')='AMD64'" caption="Copia della configurazione del
kernel del CD di Installazione">
# <i>zcat /proc/config.gz &gt; /usr/share/genkernel/arch/x86_64/kernel-config</i>
</pre>

</body>
<body>

<p>
Compilare poi il kernel eseguendo <c>genkernel all</c>. Visto che
<c>genkernel</c> compila un kernel che supporta quasi tutto l'hardware
disponibile questa compilazione può essere un processo piuttosto lungo.
</p>

<p>
E' importante sapere anche che se non si usano ext2 o ext3 come filesystem
potrebbe essere necessario configurare manualmente il kernel usando <c>genkernel
--menuconfig all</c> e aggiungere il supporto per il filesystem scelto
<e>nel</e> kernel (cioè <e>non</e> come modulo). Gli utenti di EVMS2 o LVM2
devono anche aggiungere i parametri <c>--evms2</c> or <c>--lvm2</c>.
</p>

<pre caption="Esecuzione di genkernel">
# <i>genkernel all</i>
</pre>

<p>
Una volta completato <c>genkernel</c>, viene creato un kernel completo di moduli
e <e>root disk iniziale</e> (initrd). Il kernel e initrd intervengono quando si
configura un boot loader. E' consigliabile dunque annotare il nome del kernel e
del initrd, poichè servono quando si scrive il file di configurazione del
bootloader. Initrd si avvia subito dopo il boot per effettuare un rilevamento
automatico dell'hardware (come nel CD di Installazione), prima che si avvii il
sistema "reale".
</p>

<pre caption="Controllo dell'immagine del kernel e dell'initrd">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

</body>
</section>

<section id="kernel_modules">
<title>Moduli del Kernel</title>
<subsection>
<include href="hb-install-kernelmodules.xml"/>
</subsection>
</section>
</sections>