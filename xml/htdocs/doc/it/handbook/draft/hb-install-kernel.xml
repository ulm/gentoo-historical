<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->


<sections>
<section>
<title>Timezone</title>
<body>

<p>
Innanzitutto è necessario selezionare la propria timezone, in modo che il sistema riconosca in che parte del globo è collocato. Per la propria timezone, consultare <path>/usr/share/zoneinfo</path>. Crare dunque un link simbolico a <path>/etc/localtime</path> usando <c>ln</c>:
</p>

<pre caption="Abilitare le informazioni sulla timezone">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Per esempio GMT:)</comment>
# <i>ln -sf /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Installare i sorgenti</title>
<subsection>
<title>Scegliere un Kernel</title>
<body>

<p>
Il cuore, intorno al quale sono sviluppate tutte le distribuzioni, è il Kernel di Linux. E' la parte di software compresa tra i programmi e l'hardware. Gentoo dà la possibilità ai suoi utenti di scegliere tra diversi sorgenti del kernel. Una lista completa delle descrizioni dei kernel disponibili, è consultabile nella <uri link="http://www.gentoo.org/doc/it/gentoo-kernel.xml">Guida ai Kernel Gentoo</uri>.
</p>

<p>
Per i sistemi basati sull'architettura x86 son disponibili, tra gli altri, i seguenti kernel: <c>vanilla-sources</c> (il sorgente del kernel di default, così come viene rilasciato dagli sviluppatori del kernel di linux), <c>gentoo-sources</c> (il sorgente del kernel che contiene patch per aumentarne le performance), <c>gentoo-dev-sources</c> (il sorgente del kernel 2.6 che contiene patch per aumentarne la performance e migliorare la stabilità), <c>xfs-sources</c> (il sorgente del kernel con il più recente supporto a XFS), <c>gs-sources</c> (il sorgente del kernel con patch per i server), <c>gaming-sources</c> (il sorgente del kernel con patch per migliori performance di gioco).
</p>

<p>
Per i sistemi basati su alpha, ci sono: <c>vanilla-sources</c> (il sorgente del kernel di default, così come viene rilasciato dagli sviluppatori del kernel di linux), <c>alpha-sources</c> (il sorgente del kernel ottimizzato per gli utenti di alpha), <c>compaq-sources</c> (il sorgente del kernel usato per Alpha da RedHat, mantenuto da Compaq).
</p>

<p>
Per i sistemi basati su sparc, ci sono: <c>vanilla-sources</c> (il sorgente del kernel di default, così come viene rilasciato dagli sviluppatori del kernel di linux), <c>sparc-sources</c> (il sorgente del kernel ottimizzato per gli utenti di sparc).
</p>

<p>
Per i sistemi basati su MIPS, si può scegliere tra <c>mips-sources</c> (il sorgente del kernel di default per l'architettura MIPS) e <c>mips-prepatch-sources</c> (prerilascio del kernel tree).
</p>

<p>
Per i sistemi basati su AMD64, esiste solo <c>gentoo-dev-sources</c> (il sorgente del kernel 2.6, con le patch per aggiustamenti sulla stabilità, sulla performance e sull'hardware, specifici per amd64).
</p>

<p>
Per le altre architetture di dovrebbe usare il sorgente del kernel ottimizzato in modo specifico per loro: <c>hppa-sources</c> (HPPA) o <c>ppc-sources</c> (PowerPC).
</p>

<p>
Dopo la scelta del kernel, è necessario installarlo con <c>emerge</c>. Da ora in avanti si utilizza <c>emerge --usepkg</c> che installa un pacchetto precompilato se è disponibile (per coloro che usano GRP), oppure lo scarica dalla rete. In altre parole, se non si sta usando un pacchetto precompilato, si può omettere l'opzione <c>--usepkg</c>. Si può, non si deve. Si può anche abbreviare <c>--usepkg</c> con <c>-k</c>.
</p>

<p>
Nel prossimo esempio si installa <c>vanilla-sources</c> (poichè <c>gentoo-sources</c> non è ancora disponibile per tutte le architetture). Naturalmente lo si sostituisca con quello che si è scelto:
</p>

<pre caption="Installare un sorgente del kernel">
# <i>emerge --usepkg vanilla-sources</i>
</pre>

<p>
Se si dà un'occhiata a <path>/usr/src</path>, si dovrebbe vedere un link simbolico chiamato <path>linux</path>, che punta al sorgente del kernel:
</p>

<pre caption="Il link simbolico al sorgente del kernel">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.4.22
</pre>

<p>
Se così non fosse (cioè il link simbolico punta a un sorgente del kernel differente), prima di continuare è necessario cambiare il link simbolico:
</p>

<pre caption="Cambiare il link simbolico al sorgente del kernel">
# <i>rm /usr/src/linux &amp;&amp; ln -s /usr/src/linux-2.4.22 /usr/src/linux</i>
</pre>

<p>
Ora procede a configurare e compilare il sorgente del kernel. Le architetture basate su x86 possono usare <c>genkernel</c>, che compila un kernel generico come quello usato dal LiveCD. Si tratta però prima la configurazione "manuale", poichè è il miglior modo di ottimizzare l'ambiente.</p>

<p>
Se si desidera configurare il kernel manualmente, continuare con <uri link="#doc_chap3">Default: Configurazione manuale</uri>. Per chi usa un sistema x86 e vuole usare <c>genkernel</c>, leggere <uri link="#doc_chap4">Alternativa: Usare genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>Default: Configurazione manuale</title>
<subsection>
<title>Introduzione</title>
<body>

<p>
La configurazione manuale del kernel è spesso considerata la parte più difficile che ogni utente Linux incontra. Non è assolutamente vero -- dopo aver configurato un po' di kernel, l'operazione risulta semplice.
</p>

<p>
Una cosa <e>è</e> però vera: si deve conoscere il proprio sistema quando si comincia una configurazione manuale del kernel. La maggior parte delle informazioni può essere raccolta vedendo il contenuto di <path>/proc/pci</path> (o usando <c>lspci</c> se disponibile). Si può anche eseguire <c>lsmod</c> per vedere che moduli del kernel usa il LiveCD (potrebbe fornire un buon suggerimento su cosa abilitare).
</p>

<p>
Andare nella directory del sorgente del kernel, e digitare <c>make menuconfig</c> per visualizzare un menu di configurazione basato su ncurses.
</p>

<pre caption="Aprire menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Vengono visualizzate molte sezioni di configurazione. Ecco ora alcune opzioni che devono essere attivate (altrimenti Gentoo non funzionerà, o non funzionerà correttamente senza ottimizzazioni aggiuntive).
</p>

</body>
</subsection>
<subsection>
<title>Attivare le opzioni richieste</title>
<body>

<p>
Prima di tutto, si deve attivare l'uso di codice/driver di sviluppo e sperimentale. Se non lo si fa, non si ha la possibilità di utilizzare qualche codice/driver molto importante:
</p>

<pre caption="Selezionare codice/driver sperimentale">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Andare su <c>File Systems</c> e selezionare il supporto per il filesystem che si usa. <e>Non</e> compilarlo come modulo, altrimenti Gentoo non può montare le partizioni. Selezionare anche <c>Virtual memory</c>, <c>/proc file system</c>, <c>/dev file system</c> e <c>Automatically mount at boot</c>:
</p>

<pre caption="Selezionare il filesystem">
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot

<comment>(Deselezionare il punto seguente a meno che non si abbia un kernel 2.6)</comment>
  [ ] /dev/pts file system for Unix98 PTYs

<comment>(Selezionare una o più delle seguenti opzioni in base al sistema usato)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<note>
Gli utenti del kernel 2.6 hanno alcune di queste opzioni sotto <c>Pseudo filesystems</c>, che è una sottosezione di <c>File systems</c>.
</note>

<p>
Se si sta usando PPPoE per connettersi a Internet, si ha bisogno delle seguenti opzioni nel kernel:
</p>

<pre caption="Selezionare i driver necessari per PPPoE">
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports
</pre>

<note>
Gli utenti del kernel 2.6 hanno queste opzioni sotto <c>Networking support</c>, che è una sottosezione di <c>Device Drivers</c>.
</note>

<p>
Le due opzioni di compressione non sono dannose, ma neppure necessarie; lo stesso vale per <c>PPP over Ethernet</c>, che potrebbe essere usata soltanto da <c>rp-pppoe</c> se configurato in modalità kernel.
</p>
<!-- TODO reactivate when LVM2 instructions are boarded
<p>
If you are using LVM, you will need to activate it in the kernel:
</p>

<pre caption="Selecting LVM support">
Multi-device support (RAID and LVM) - - -&gt;
  [*] Multiple devices driver support (RAID and LVM)
  &lt;*&gt;  Logical volume manager (LVM) support
</pre>
-->
<note>
Gli utenti del kernel 2.6 trovano queste opzioni in <c>Device Drivers</c>.
</note>

<p>
Chi ne ha bisogno, non deve dimenticare di includere il supporto per la scheda ethernet nel kernel.
</p>

<p>
Adesso, secondo l'architettura, si devono selezionare queste opzioni:
</p>

<ul>
<li><uri link="#doc_chap3_sect3">Attivare le opzioni per x86</uri></li>
<li><uri link="#doc_chap3_sect4">Attivare le opzioni per Alpha</uri></li>
<li><uri link="#doc_chap3_sect5">Attivare le opzioni per HPPA</uri></li>
<li><uri link="#doc_chap3_sect6">Attivare le opzioni per PPC</uri></li>
<li><uri link="#doc_chap3_sect7">Attivare le opzioni per SPARC</uri></li>
<li><uri link="#doc_chap3_sect8">Attivare le opzioni per MIPS</uri></li>
<li><uri link="#doc_chap3_sect9">Attivare le opzioni per AMD64</uri></li>
</ul>

</body>
</subsection>
<subsection>
<title>Attivare le opzioni per x86</title>
<body>

<p>
Se si ha una CPU Intel che supporta HyperThreading (tm), o si ha un sistema multi-CPU, si dovrebbe attivare "Symmetric multi-processing support":
</p>

<pre caption="Attivare il supporto SMP">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
Finito di configurare il kernel, si continui con <uri link="#compiling">Compilare e installare</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Attivare le opzioni per Alpha</title>
<body>

<p>
Le seguenti opzioni sono raccomandate per gli utenti Alpha:
</p>

<pre caption="Opzioni specifiche per Alpha">
General setup ---&gt;
  &lt;*&gt; SRM environment through procfs
  &lt;*&gt; Configure uac policy via sysctl

Plug and Play configuration ---&gt;
  &lt;*&gt; Plug and Play support
  &lt;M&gt;   ISA Plug and Play support

SCSI support ---&gt;
  SCSI low-level drivers ---&gt;
    &lt;*&gt; SYM53C8XX Version 2 SCSI support (NEW)
    &lt;*&gt; Qlogic ISP SCSI support

Network device support ---&gt;
  Ethernet (10 or 100 Mbit) ---&gt;
    &lt;M&gt; DECchip Tulip (dc21x4x) PCI support
    &lt;M&gt; Generic DECchip &amp; DIGITAL EtherWORKS PCI/EISA
    &lt;M&gt; EtherExpressPro/100 support (eepro100)
    &lt;M&gt; EtherExpressPro/100 support (e100)
  Ethernet (1000 Mbit) ---&gt;
    &lt;M&gt; Alteon AceNIC
      [*] Omit support for old Tigon I
    &lt;M&gt; Broadcom Tigon3
  [*] FDDI driver support
  &lt;M&gt; Digital DEFEA and DEFPA
  &lt;*&gt; PPP support
    &lt;*&gt; PPP Deflate compression

Character devices ---&gt;
  [*] Support for console on serial port
  [*] Direct Rendering Manager

File systems ---&gt;
  &lt;*&gt; Kernel automounter version 4 support
  Network File Systems ---&gt;
    &lt;*&gt; NFS
      [*] NFSv3 client
      &lt;*&gt; NFS server
      [*] NFSv3 server
  Partition Types ---&gt;
    [*] Advanced partition selection
    [*] Alpha OSF partition support
  Native Language Support
    &lt;*&gt; NLS ISO 8859-1

Sound ---&gt;
  &lt;M&gt; Sound card support
    &lt;M&gt; OSS sound modules
      [*] Verbose initialisation
      [*] Persistent DMA buffers
      &lt;M&gt; 100% Sound Blaster compatibles
</pre>

<p>
Quando è finita la configurazione del kernel, continuare con <uri link="#compiling">Compilare e installare</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Attivare le opzioni per HPPA</title>
<body>

<p>
Se si ha un mouse o una tastiera HIL, non dimenticarsi di compilare il supporto.
</p>

<pre caption="Attivare il supporto HIL">
Input core support ---&gt;
  [*] Keyboard support
  [*] Mouse support
  [*] Event interface support
</pre>

<p>
Se non si ha il mouse sulla porta HIL, usare soltanto il supporto di base:
</p>

<pre caption="Supporto di base HIL">
HIL support ---&gt;
  [*] HIL Keyboard (basic) support
</pre>

<p>
Se si desidera il supporto <e>completo</e> HIL, selezionare le seguenti opzioni:
</p>

<pre caption="Supporto completo HIL">
HIL support ---&gt;
  [*] HP System Device Controller i8042 Support
  [*] HIL MLC Support
  [*] HIL Keyboard (full) support
  [*] HIL Mouse &amp; Pointer support
</pre>

<p>
Finito di configurare il kernel, continuare con <uri link="#compiling">Compilare e installare</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Attivare le opzioni per PPC</title>
<body>

<p>
Prima di tutto, disabilitare i raw keycodes di ADB:
</p>

<pre caption="Disabilitare i raw keycodes di ADB">
Macintosh Device Drivers ---&gt;
  [ ] Support for ADB raw keycodes
</pre>

<p>
Scegliere il supporto corretto di RTC (<e>disabilitare</e> l'opzione <c>Enhanced RTC</c>):
</p>

<pre caption="Attivare l'opzione corretta di RTC">
Character devices ---&gt;
  [ ] Enhanced RTC

General setup ---&gt;
  [*] Support for /dev/rtc
</pre>

<p>
Gli utenti di OldWorld vorranno il supporto HFS, in modo che possano copiare i kernel compilati nelle partizioni MacOS.
</p>

<pre caption="Attivare il supporto HFS">
File Systems ---&gt;
  [*] HFS Support
</pre>

<p>
Quando è finita la configurazione del kernel, si continui con <uri link="#compiling">Compilare e installare</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Attivare le opzioni per SPARC</title>
<body>

<p>
Attivare il giusto supporto per il bus:
</p>

<pre caption="Attivare SBUS/UPA">
Console drivers ---&gt;
  Frame-buffer support ---&gt;
    [*] SBUS and UPA framebuffers     
      [*] Creator/Creator3D support     <comment>(Solo per UPA slot adapter usato in molti Ultras)</comment>
    [*] CGsix (GX,TurboGX) support      <comment>(Solo per SBUS slot adapter usato in molte SPARCStation)</comment>
</pre>

<p>
Il supporto per OBP:
</p>

<pre caption="Attivare il supporto per OBP">
Misc Linux/SPARC drivers ---&gt;
  [*]  /dev/openprom device support
</pre>

<p>
Il supporto SCSI:
</p>

<pre caption="Attivare il supporto per SCSI">
SCSI support ---&gt;
  SCSI low-level drivers ---&gt;
    &lt;*&gt; Sparc ESP Scsi Driver             <comment>(Solo per SPARC ESP on-board SCSI adapter)</comment>
    &lt;*&gt; PTI Qlogic, ISP Driver            <comment>(Solo per controller SBUS SCSI da PTI o QLogic)</comment>
    &lt;*&gt; SYM53C8XX Version 2 SCSI support  <comment>(Solo per Ultra 60 on-board SCSI adapter)</comment>
</pre>

<p>
Per il supporto alla scheda di rete, selezionare una delle seguenti opzioni:
</p>

<pre caption="Attivare il supporto per la rete">
Network device support ---&gt;
  Ethernet (10 or 100Mbit) ---&gt;
    &lt;*&gt; Sun LANCE support                   <comment>(Solo per SPARCStation, vecchi sistemi Ultra, come l'opzione Sbus)</comment>
    &lt;*&gt; Sun Happy Meal 10/100baseT support  <comment>(Solo per Ultra; supporto anche per "qfe" quad-ethernet su PCI e Sbus)</comment>
</pre>

<p>
Quando si è finito di configurare il kernel, continuare con <uri link="#compiling">Compilare e installare</uri>. Dopo aver compilato il kernel, controllarne le dimensioni:
</p>

<pre caption="Controllare il formato del kernel">
# <i>ls -lh vmlinux</i>
-rw-r--r--    1 root     root         2.4M Oct 25 14:38 vmlinux
</pre>

<p>
Se le dimensioni del kernel (non compresso) sono maggiori di 2.5Mb (per Sparc32) o 3.5MB (per Sparc64), si deve riconfigurare il kernel fino a quando non si eccedono questi limiti. Un modo per risolvere il problema, è compilare la maggior parte dei driver come moduli. Non facendolo, si potrebbe ottenere un kernel non avviabile.
</p>

<p>
Se il kernel dovesse rivelarsi un po' troppo grande, si può provare ad usare il comando <c>strip</c>:
</p>

<pre caption="Smontare il kernel">
# <i>strip -R .comment -R .note vmlinux</i>
</pre>

</body>
</subsection>
<subsection>
<title>Attivare le opzioni per MIPS</title>
<body>

<p>
Se si sta usando un sistema basato su Indy/Indigo2, si deve attivare il suo supporto.
</p>

<pre caption="Attivare SGI IP22">
Machine selection ---&gt;
  [*] Support for SGI IP22 (Indy/Indigo2)
</pre>

<p>
Se si desidera eseguire i binari Irix, inserire la seguente opzione:
</p>

<pre caption="Inserire il supporto per IRIX Binary">
General setup ---&gt;
  [*] Include IRIX binary compatibility
</pre>

<p>
Se si ha una sheda ISA/EISA in un SGI Indigo2, si deve abilitarne il supporto.
</p>

<pre caption="Abilitare il supporto ISA/EISA per SGI Indigo2">
General setup ---&gt;
  [*] Indigo-2 (IP22) EISA bus support
  [*]   ISA bus support
</pre>

<p>
Se si ha una porta parallela SGI, si può abilitare il suo supporto. Se invece si ha una porta parallela ISA, si dovrebbe selezionare "PC-style hardware".
</p>

<pre caption="Abilitare il supporto per la porta parallela SGI">
Parallel port support  ---&gt;
  &lt;*&gt; Parallel port support
  &lt;*&gt;   SGI Indy/Indigo2 hardware (EXPERIMENTAL) (NEW)
  &lt;*&gt;   IEEE 1284 transfer modes (NEW)
</pre>

<p>
Se si vogliono usare gli slot Indigo2 ISA, si deve abilitare il supporto plug and play.
</p>

<pre caption="Abilitare il supporto PnP per ISA">
Plug and Play configuration  ---&gt;
  &lt;*&gt; Plug and Play support
  &lt;*&gt;   ISA Plug and Play support
</pre>

<p>
Non dimenticarsi di abilitare il supporto SCSI e di usare il driver SGI WD93C93:
</p>

<pre caption="Abilitare il supporto per il WD93C93 Driver">
SCSI low-level drivers  ---&gt;
  &lt;*&gt; SGI WD93C93 SCSI Driver
</pre>

<p>
Per le schede di rete, si può avere bisogno del supporto per l'ethernet controller SGI Seeq:
</p>

<pre caption="Abilitare il supporto SGI Seeq">
Network device support  ---&gt;
  Ethernet (10 or 100Mbit)  ---&gt;
    [*] Ethernet (10 or 100Mbit)
    [*]   SGI Seeq ethernet controller support
</pre>

<p>
Non dimenticarsi di abilitare il supporto serial console e SGI Zilog85C30:
</p>

<pre caption="Abilitare il supporto SGI Zilog85C30">
Character devices ---&gt;
  [*] Non-standard serial port support
  [*]   SGI Zilog85C30 serial support
</pre>

<p>
Non dimenticarsi anche di abilitare i supporti Indy/I2 Watchdog e SGI DS1286 RTC:
</p>

<pre caption="Abilitare il supporto Watchdog e RTC">
Character Devices ---&gt;
  [*] SGI DS1286 RTC support
  Watchdog Cards  ---&gt;
    [*] Watchdog Timer Support
    &lt;*&gt;   Indy/I2 Hardware Watchdog
</pre>

<p>
Si deve abilitare il supporto per le partizioni SGI:
</p>

<pre caption="Abilitare il supporto per le partizioni SGI">
File Systems ---&gt;
  Partition Types ---&gt;
    [*] Advanced partition selection
    [*]   SGI partition support
</pre>

<p>
Se si ha una scheda SGI Newport (XL Gfx) e si vuole usarla, allora è necessario abilitarne il supporto:
</p>

<pre caption="Abilitare il supporto per la scheda SGI Newport">
Console drivers  ---&gt;
  &lt;*&gt; SGI Newport Console support (NEW)
</pre>

<p>
Se si vuole il supporto per il sonoro sulla Indy/Indigo2, si deve abilitarlo:
</p>

<pre caption="Abilitare il supporto per SGI HAL2">
Sound  ---&gt;
  &lt;*&gt; Sound card support
  &lt;*&gt;   SGI HAL2 sound (EXPERIMENTAL)
</pre>

<p>
Quando si è finita la configurazione del kernel, si continui con <uri link="#compiling">Compilare e installare</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Attivare le opzioni per AMD64</title>
<body>

<p>
Se si ha un sistema multi-CPU Opteron, si dovrebbe attivare "Symmetric multi-processing support":
</p>

<pre caption="Attivare il supporto SMP">
Processor type and features ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
Quando si è finito di configurare il kernel, continuare con <uri link="#compiling">Compilare e installare</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Compilare e installare</title>
<body>

<p>
Ora che il kernel è configurato, il prossimo passo sarà la sua compilazione e la sua installazione. Uscire dal menu di configurazione ed eseguire: <c>make dep &amp;&amp; make bzImage modules modules_install</c>:
</p>

<pre caption="Compilare il kernel">
<comment>(Per sistemi x86 e kernel 2.4)</comment>
# <i>make dep &amp;&amp; make bzImage modules modules_install</i>

<comment>(Per altri sistemi e kernel 2.4)</comment>
# <i>make dep &amp;&amp; make vmlinux modules modules_install</i>

<comment>(Per sistemi amd64 e kernel 2.6)</comment>
# <i>make bzImage modules modules_install</i>

<comment>(Per altri sistemi e kernel 2.6)</comment>
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Quando la compilazione è finita, è necessario copiare l'immagine del kernel in <path>/boot</path>. Nel prossimo esempio si assume di aver configurato e compilato <c>vanilla-sources-2.4.22</c> (non è detto che sia il kernel corretto per la propria architettura!):
</p>

<pre caption="Installare il kernel">
<comment>(Per sistemi x86)</comment>
# <i>cp arch/i386/boot/bzImage /boot/kernel-2.4.22</i>
# <i>cp System.map /boot/System.map-2.4.22</i>

<comment>(Per sistemi amd64)</comment>
# <i>cp arch/x86_64/boot/bzImage /boot/kernel-2.4.22</i>

<comment>(Per altri sistemi)</comment>
# <i>cp vmlinux /boot/kernel-2.4.22</i>
# <i>cp System.map /boot/System.map-2.4.22</i>
</pre>

<p>
E' inoltre consigliato copiare il file di configurazione del kernel in <path>/boot</path>.
</p>

<pre caption="Back up della configurazione del kernel">
# <i>cp .config /boot/config-2.4.22</i>
</pre>

<p>
Gli utenti MIPS, che potrebbero avere un sistema che non avvia i kernel ELF, dovrebbero compilare il kernel con <c>make vmlinux.ecoff</c> e non con <c>make vmlinux</c>. L'immagine del kernel viene salvata come <path>arch/mips/boot/vmlinux.ecoff</path> e non come <path>vmlinux</path>.
</p>

<p>
Adesso continuare con <uri link="#doc_chap5">Installare i moduli del Kernel separati</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>Alternativa: Usare genkernel</title>
<body>

<p>
Se si sta leggendo questa sezione, vuol dire che si è scelto di usare lo script <c>genkernel</c>, che configura il kernel. Significa anche che si ha un sistema x86. Le altre architetture <e>non sono supportate</e> da <c>genkernel</c>. <!-- TODO: Add ppc as it should be available with the first 2004 release -->
</p>

<p>
Adesso che sono stati installati i sorgenti del kernel si può utilizzare lo scritp <c>genkernel</c> per configurarlo e compilarlo automaticamente. <c>genkernel</c> configura il kernel in modo quasi identico a come è configurato quello del LiveCD. Infatti quando si usa <c>genkernel</c> per compilare il kernel, il sistema rileva tutto l'hardware al boot, proprio come il LiveCD. Poichè genkernel non richiede nessuna configurazione manuale del kernel, questa è una soluzione ideale per quegli utenti che hanno qualche difficoltà nel compilarsi il kernel da soli.
</p>

<p>
Ecco come usare genkernel. Per prima cosa si deve emergere l'ebuild di genkernel:
</p>

<pre caption="Emergere genkernel">
# <i>emerge --usepkg genkernel</i>
</pre>

<p>
Poi si devono compilare i sorgenti del kernel. Se si sta usando un <c>genkernel</c> installato attraverso GRP, eseguire <c>genkernel</c>. Se si ha un pacchetto recente (una versione scaricata), eseguire <c>genkernel all</c>. Ls compilazione impirga un po' di tempo prima di terminare, poichè <c>genkernel</c> compila un kernel che supporta quasi tutto l'hardware.
</p>

<pre caption="Esecuzione di genkernel">
<comment>(Questo esempio è per il genkernel di GRP)</comment>
# <i>genkernel</i>
Gentoo Linux genkernel, version 1.4
Copyright 2003 Gentoo Technologies, Inc., Bob Johnson, Daniel Robbins
Distributed under the GNU General Public License version 2

Settings:
compile optimization: 1 processor(s)
source tree: /usr/src/linux-2.4.22
config: gentoo (customized)
config loc: /etc/kernels/config-2.4.22
initrd config: (default) /etc/kernels/settings

* Running "make oldconfig"...                                                                     [ ok ]
* Logging to /var/log/genkernel.log...                                                            [ ok ]
* Starting 2.4.22 build...                                                                        [ ok ]
* Running "make dep"...                                                                           [ ok ]
* Running "make bzImage"...                                                                       [ ok ]
* Running "make modules"...                                                                       [ ok ]
* Running "make modules_install"...                                                               [ ok ]
* Moving bzImage to /boot/kernel-2.4.22...                                                        [ ok ]
* Building busybox...                                                                             [ ok ]
* Creating initrd...                                                                              [ ok ]

* Build completed successfully!

* Please specify /boot/kernel-2.4.22 and /boot/initrd-2.4.22
</pre>

<p>
Una volta completato <c>genkernel</c>, viene creato un kernel completo di moduli e <e>root disk iniziale</e> (initrd). Ll kernel e initrd intervengono quando si configura un boot loader. E' consigliabile dunque annotare il nome del kernel e del initrd, poichè servono quando si scrive il file di configurazione del bootloader. Initrd si avvia subito dopo il boot per effettuare un rilevamento automatico dell'hardware (come nel LiveCD), prima che si avvii il sistema "reale".
</p>

<p>
Ancora un altro passo per ottenere il sistema più simile al LiveCD: emergere <c>hotplug</c>. Mentre initrd rileva automaticamente l'hardware necessario per avviare il sistema, <c>hotplug</c> autorileva tutto il resto. Per emergere e abilitare <c>hotplug</c>, digitare:
</p>

<pre caption="Emergere ed abilitare hotplug">
# <i>emerge --usepkg hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>

</body>
</section>
<section>
<title>Installare i moduli del kernel separati</title>
<subsection>
<title>Installare i moduli extra</title>
<body>

<p>
Ora si dovrebbero emergere le ebuild per ogni altro componente presente nel sistema. Ecco una lista degli ebuild relativi al kernel che si possono emergere:
</p>

<table>
<tcolumn width="1in"/>
<tcolumn width="4in"/>
<tcolumn width="2in"/>
<tr>
  <th>Ebuild</th>
  <th>Scopo</th>
  <th>Comando</th>
</tr>
<tr>
  <ti>nvidia-kernel</ti>
  <ti>Grafica accelerata NVIDIA per XFree86</ti>
  <ti><c>emerge --usepkg nvidia-kernel</c></ti>
</tr>
<tr>
  <ti>nforce-net</ti>
  <ti>Controller ethernet On-board delle schede madri NVIDIA NForce(2)</ti>
  <ti><c>emerge nforce-net</c></ti>
</tr>
<tr>
  <ti>nforce-audio</ti>
  <ti>Audio On-board delle schede madri NVIDIA NForce(2)</ti>
  <ti><c>emerge nforce-audio</c></ti>
</tr>
<tr>
  <ti>e100</ti>
  <ti>Schede Ethernet Intel e100 Fast</ti>
  <ti><c>emerge e100</c></ti>
</tr>
<tr>
  <ti>e1000</ti>
  <ti>Schede Ethernet Intel e1000 Gigabit</ti>
  <ti><c>emerge e1000</c></ti>
</tr>
<tr>
  <ti>emu10k1</ti>
  <ti>Supporto per Creative Sound Blaster Live!/Audigy</ti>
  <ti><c>emerge emu10k1</c></ti>
</tr>
<tr>
  <ti>ati-drivers</ti>
  <ti>Grafica accelerata ATI Radeon 8500+/FireGL per XFree86</ti>
  <ti><c>emerge ati-drivers</c></ti>
</tr>
<tr>
  <ti>xfree-drm</ti>
  <ti>
    Grafica accelerata ATI Radeon fino alla 9200, Rage128, Matrox, Voodoo, e altre schede per XFree86. Si controlli la variabile <c>IUSE_VIDEO_CARDS</c> nell'ebuild <path>/usr/portage/x11-base/xfree-drm</path>, per vedere quale <c>scheda</c> inserire.
  </ti>
  <ti><c>VIDEO_CARDS="scheda" emerge xfree-drm</c></ti>
</tr>
</table>

<p>
Si deve fare attenzione dato che alcuni di questi ebuild richiedono grandi dipendenze. Per verificare quali pacchetti vengono installati all'emerge di un ebuild, si deve usare <c>emerge --pretend</c>. Per esempio, per il pacchetto <c>emu10k1</c>:
</p>

<pre caption="Vedere un elenco completo dei software da installare">
# <i>emerge --pretend emu10k1</i>
</pre>

<p>
Se non si è convinti dei pacchetti che vengono elencati, usare <c>emerge --pretend --verbose</c> per vedere le flag USE in uso:
</p>

<pre caption="Vedere le flag USE in uso">
# <i>emerge --pretend --verbose emu10k1</i>
<comment>...</comment>
[ebuild  N    ] media-sound/aumix-2.8  +gpm +nls +gtk +gnome +alsa -gtk2
</pre>

<p>
Nell'esempio precedente, si può vedere che una delle dipendenze di <c>emu10k1</c> (<c>aumix</c>), usa le flag USE <c>gtk</c> e <c>gnome</c>, facendo sì che gtk (che dipende da XFree) sia compilato con essa.
</p>

<p>
Se non si vuole che tutto questo sia compilato, deselezionare tutte le flag USE interessate, per esempio:
</p>

<pre caption="Emergere emu10k1 con tutte le flag USE deselezionate">
# <i>USE="-gpm -nls -gtk -gnome -alsa" emerge --pretend emu10k1</i>
</pre>

<p>
Quando si è ottenuto un risultato soddisfacente, rimuovere <c>--pretend</c> per iniziare l'installazione di <c>emu10k1</c>.
</p>

</body>
</subsection>
<subsection>
<title>Configurare i moduli</title>
<body>

<p>
Se non si sta usando <c>hotplug</c>, si dovrebbero inserire i moduli che si vogliono caricare in <path>/etc/modules.autoload.d/kernel-2.4</path> (o <path>kernel-2.6</path>). Se si vuole, si possono anche aggiungere altre opzioni ai moduli.
</p>

<p>
Per vedere tutti i moduli disponibili, eseguire il comando <c>find</c>. Non dimenticarsi di sostituire "&lt;kernel version&gt;" con la versione del kernel che si è compilata:
</p>

<pre caption="Vedere tuti i moduli disponibili">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Per esempio, per caricare automaticamente il modulo <c>3c59x.o</c>:
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.4 o kernel-2.6">
3c59x
</pre>

<p>
Eseguire <c>modules-update</c> per rendere effettivi i cambiamenti al file <path>/etc/modules.conf</path>:
</p>

<pre caption="Eseguire modules-update">
# <i>modules-update</i>
</pre>

<p>
Continuare l'installazione con la <uri link="?part=1&amp;chap=8">Configurazione del sistema</uri>.
</p>

</body>
</subsection>
</section>
</sections>
