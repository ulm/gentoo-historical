<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/handbook/hb-install-mips-kernel.xml,v 1.10 2006/03/13 21:34:49 so Exp $ -->

<sections>

<version>1.16</version>
<date>2006-02-27</date>

<section>
<title>Timezone</title>
<body>

<p>
Innanzitutto è necessario selezionare la propria timezone, in modo che il
sistema riconosca in che parte del globo è collocato. Per la propria
timezone, consultare <path>/usr/share/zoneinfo</path>, e copiarla in
<path>/etc/localtime</path>.  Evitare le timezone di
<path>/usr/share/zoneinfo/Etc/GMT*</path> poichè i loro nomi non indicano le
rispettive zone. Per esempio <path>GMT-8</path> è GMT+8.
</p>

<pre caption="Abilitare le informazioni sulla timezone">
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Installare i sorgenti</title>
<subsection>
<title>Scegliere un Kernel</title>
<body>

<p>
Il cuore, intorno al quale sono sviluppate tutte le distribuzioni, è il
Kernel di Linux. E' la parte di software compresa tra i programmi e
l'hardware. Gentoo dà la possibilità ai suoi utenti di scegliere tra diversi
sorgenti del kernel. Una lista completa delle descrizioni dei kernel
disponibili, è consultabile nella <uri
link="http://www.gentoo.org/doc/it/gentoo-kernel.xml"> Guida ai Kernel
Gentoo</uri>.
</p>

<p>
Sistemi basati su MIPS devono scegliere i <c>mips-sources</c>. Sono
necessarie patch speciali per renderli funzionanti su alcuni sistemi. La
tabella sotto visualizza le flag USE richieste per abilitare i patchset.
Sistemi Indy, Indigo2 (R4k) e Challenge S non richiedono nessun patchset.
</p>

<table>
<tr>
  <th>Flag USE</th>
  <th>Sistema</th>
</tr>
<tr>
  <ti><c>cobalt</c></ti>
  <ti>Supporto Cobalt Qube/RaQ</ti>
</tr>
<tr>
  <ti><c>ip27</c></ti>
  <ti>Supporto SGI Origin 200/2000 (1)</ti>
</tr>
<tr>
  <ti><c>ip28</c></ti>
  <ti>Supporto SGI Indigo2 Impact (R10000) (1,2)</ti>
</tr>
<tr>
  <ti><c>ip30</c></ti>
  <ti>Supporto SGI Octane/Octane2 (1)</ti>
</tr>
</table>

<note>
La <c>USE="-doc"</c> disabilita la generazione della documentazione kernel
API, che entrerebbe in numerose dipendenze non richieste per questo passo.
</note>

<pre caption="Impostare le flag USE e emergere i sorgenti del kernel">
<comment>(Sostituire cobalt con l'appropriata flag USE per il proprio sistema
se richiesto)</comment>
# <i>mkdir /etc/portage</i>
# <i>echo "sys-kernel/mips-sources cobalt" &gt;&gt; /etc/portage/package.use</i>

<comment>(Scompattare e installare i sorgenti del kernel)</comment>
# <i>USE="-doc" emerge mips-sources</i>
</pre>

<impo>
(1) Su Origin 200/2000, Indigo2 Impact (R10000), Octane/Octane2 e O2, è
richiesto un kernel 64 bit per avviare il sistema. Per questi, si dovrebbe
passare al profilo <path>default-linux/mips/mips64/RELEASE</path> cambiando
il symlink <path>/etc/make.profile</path>. Poi si può fare <c>emerge
gcc-mips64</c> per creare un cross compiler per compilare i kernel 64 bit.
</impo>

<impo>
(2) Indigo2 Impact è un caso speciale che richiede una patch speciale da
essere applicata a <c>gcc</c> prima di compilare un kernel IP28. La patch
aggiunge supporto per la CFLAG <c>-mip28-cache-barriers</c>, usata nella
compilazione del kernel. Questa flag USE può essere impostata in
<path>/etc/make.conf</path>. Questo viene già fatto, impostando il proprio
profilo a <path>default-linux/mips/mips64/ip28/RELEASE</path>.
</impo>

<pre caption="Cambiare profilo e installare gcc-mips64">
<comment>(Si assume che PORTDIR sia nella solita posizione, /usr/portage)</comment>
# <i>rm /etc/make.profile</i>
# <i>ln -s /usr/portage/profiles/default-linux/mips/mips64/2005.0</i> <comment>(o .../mips64/ip28/2005.0)</comment>

<comment>(Installare il kernel toolchain 64 bit)</comment>
# <i>emerge gcc-mips64</i>
</pre>

<p>
Se si dà un'occhiata a <path>/usr/src</path>, si dovrebbe vedere un link
simbolico chiamato <path>linux</path>, che punta al sorgente del kernel. In
questo caso il sorgente del kernel installato punta a
<c>mips-sources-2.4.24</c>. La versione potrebbe essere differente.
</p>

<pre caption="Il link simbolico al sorgente del kernel">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.6.13.4
</pre>

<p>
Se non è così (il symlink punta a un sorgente del kernel differente),
cambiare il symlink prima di continuare:
</p>

<pre caption="Cambiare il symlink al sorgente del kernel">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.6.13.4 linux</i>
</pre>

<p>
Ora si procede a configurare e compilare il sorgente del kernel.
</p>

</body>
</subsection>
</section>
<section>
<title>Compilazione &amp; installazione del kernel</title>
<subsection>
<title>Introduzione</title>
<body>

<p>
Di solito si è vista la configurazione manuale del sorgente del kernel.
Questa è divenuta impraticabile dato il numero di sistemi che sono
supportati. Questa sezione esamina vari sorgenti per configurazioni di
esempio del kernel.
</p>

</body>
</subsection>
<subsection>
<title>Usare esempi di configurazione nei sorgenti del kernel</title>
<body>

<p>
Molti sistemi supportati hanno esempi di .config nascosti nel kernel
sorgente. Non tutti hanno le configurazioni distribuite in questo modo.
Quelli che li hanno, possono essere configurati con i comandi menzionati
nella tabella sotto.
</p>

<table>
<tr>
  <th>Sistema</th>
  <th>Comando di configurazione</th>
</tr>
<tr>
  <ti>Cobalt Servers</ti>
  <ti><c>make cobalt_defconfig</c></ti>
</tr>
<tr>
  <ti>Indy, Indigo2 (R4k), Challenge S</ti>
  <ti><c>make ip22_defconfig</c></ti>
</tr>
<tr>
  <ti>Origin 200/2000</ti>
  <ti><c>make ip27_defconfig</c></ti>
</tr>
<tr>
  <ti>Indigo2 Impact (R10k)</ti>
  <ti>
    <c>make ip28_defconfig</c> (richiede <c>mips-sources-2.6.14.5</c> o
    successivo)
  </ti>
</tr>
<tr>
  <ti>O2</ti>
  <ti><c>make ip32_defconfig</c></ti>
</tr>
</table>

</body>
</subsection>

<subsection>
<title>Usare la configurazione del kernel già in esecuzione dal media di
installazione</title>
<body>

<p>
Tutte le immagini di installazione Gentoo forniscono una opzione di
configurazione del kernel come parte dell'immagine stessa, accessibile in
<path>/proc/config.gz</path>. Può essere usata in molti casi. E' meglio però
che il proprio sorgente del kernel corrisponda al kernel che è attualmente in
esecuzione. Per estrarlo, eseguire <c>zcat</c> come mostrato sotto.
</p>

<pre caption="Estrarre .config da /proc/config.gz">
# <i>zcat /proc/config.gz > .config</i>
</pre>

<impo>
La configurazione del kernel è impostata per una immagine netboot. Si aspetta
di trovare una immagine del filesystem root, sia come una directory per
initramfs, sia come in device loopback per initrd. Quando si esegue <c>make
menuconfig</c>, non dimenticarsi di andare in General Setup e disabilitare le
opzioni per initramfs.
</impo>

</body>
</subsection>

<subsection>
<title>Database per le compatibilità hardware</title>
<body>

<p>
Come aiuto agli utenti nel trovare impostazioni funzionanti, è stato avviato
un database per le compatibilità hardware. Questo database elenca il supporto
per vari dispositivi MIPS, e permette agli utenti di contribuire alle
configurazioni del kernel funzionanti. L'indirizzo per questo sito è
<uri>http://stuartl.longlandclan.hopto.org/gentoo/mips</uri>.
</p>

<p>
Se si trova questo servizio utile, si può contribuire con note e file .config
così che altri utenti ne possano beneficiare. Dovrebbe essere chiaro che non
c'è nessuna garanzia affinchè ogni file di configurazione scaricato da questo
sito funzioni.
</p>

</body>
</subsection>

<subsection>
<title>Adattare la configurazione in base alle proprie necessità</title>
<body>

<p>
Una volta trovata una configurazione, si deve scaricarla nella directory del
sorgente del kernel, e rinominarla in <path>.config</path>. Da lì, si può
eseguire <c>make oldconfig</c> per aggiornare e per cambiare la
configurazione prima della compilazione.
</p>

<pre caption="Configurare il kernel">
# <i>cd /usr/src/linux</i>
# <i>cp /path/to/example-config .config</i>
# <i>make oldconfig</i>
<comment>(Premere invio ad ogni prompt per accettare il default, cambiamenti
sono fatti più avanti)</comment>
# <i>make menuconfig</i>
</pre>

<impo>
Nella sezione Kernel Hacking, c'è una opzione chiamata "Are You Using A Cross
Compiler?". Dice ai Makefiles del kernel di aggiungere all'inizio
"<c>mips-linux-</c>" (o <c>mipsel-linux</c> ... etc) ai comandi <c>gcc</c> e
<c>as</c> quando si compila il kernel. Questo dovrebbe non essere fatto,
anche se si sta usando un cross compiler. Se si ha bisogno di un cross
compiler, specificare il prefisso usando la variabile <c>CROSS_COMPILE</c>
come mostrato nella prossima sezione.
</impo>

</body>
</subsection>
<subsection id="compiling">
<title>Compilazione e Installazione</title>
<body>

<p>
Ora che il kernel è configurato, il prossimo passo sarà la sua compilazione e
la sua installazione. Uscire dal menu di configurazione e avviare il processo
di compilazione:
</p>

<note>
Su sistemi 64 bit, si deve specificare
<c>CROSS_COMPILE=mips64-unknown-linux-gnu-</c> (o <c>mips64el-...</c> su
un sistema little-endian) per usare il compiler 64 bit.
</note>

<pre caption="Compilare il kernel">
<comment>(Solo per kernel 2.4)</comment>
# <i>make dep</i>

<comment>(kernel 2.4 e 2.6 -- compilazione nativa)</comment>
# <i>make vmlinux modules modules_install</i>

<comment>(kernel 2.4 e 2.6 -- cross compiling)</comment>
<comment>(sostituire mips64-unknown-linux-gnu- di conseguenza)</comment>
# <i>make vmlinux modules modules_install CROSS_COMPILE=mips64-unknown-linux-gnu-</i>

<comment>(Quando si compila su un'altra macchina, come una x86...usare)</comment>
<comment>(i seguenti comandi per compilare il kernel &amp; installare)</comment>
<comment>(i moduli in una directory specifica affinchè vengano trasferiti
nella macchina principale.)</comment>
# <i>make vmlinux modules CROSS_COMPILE=mips64-unknown-linux-gnu-</i>
# <i>make modules_install INSTALL_MOD_PATH=/somewhere</i>
</pre>

<impo>
Quando si compila un kernel 64 bit per Indy, Indigo2 (R4k), Challenge S e O2,
usare <c>vmlinux.32</c> invece di <c>vmlinux</c>. Altrimenti la macchina non
potrà avviarsi. Questo aggira il fatto che PROM non capisca il formato ELF64.
</impo>

<pre caption="Usare vmlinux.32">
# <i>make vmlinux.32</i>
<comment>(Questo crea vmlinux.32 -- il kernel finale)</comment>
</pre>

<p>
Quando la compilazione è finita, è necessario copiare l'immagine del kernel
in <path>/boot</path>.
</p>

<note>
I server Cobalt, si aspettano di vedere una immagine del kernel compressa.
Ricordarsi di fare <c>gzip -9</c> al file dopo che si è entrati in
<path>/boot</path>.
</note>

<pre caption="Installare il kernel">
# <i>cp vmlinux /boot/kernel-2.6.13.4</i>

<comment>(Cobalt Servers -- Comprimere la immagine del kernel)</comment>
# <i>gzip -9v /boot/kernel-2.6.13.4</i>
</pre>

<!--
<p>
Se il sistema non avvia i kernel ELF, compilare il kernel con <c>make vmlinux.ecoff</c> invece di <c>make vmlinux</c>. L'immagine del kernel sarà salvata come <path>arch/mips/boot/vmlinux.ecoff</path>, invece di <path>vmlinux</path>.
</p>
-->
</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Installare i moduli del kernel separati</title>
<subsection>
<title>Configurare i moduli</title>
<body>

<p>
Si dovrebbero inserire i moduli che si vogliono caricare in uno dei file
elencati qui sotto. Se si vuole, si possono anche aggiungere altre opzioni ai
moduli.
</p>

<ul>
  <li><path>/etc/modules.autoload.d/kernel-2.4</path> - Solo kernel 2.4</li>
  <li><path>/etc/modules.autoload.d/kernel-2.6</path> - Solo kernel 2.6</li>
  <li><path>/etc/modules.autoload</path> - Tutti i kernel</li>
</ul>

<p>
Se si desidera caricare un modulo del kernel, comune al 2.4 e al 2.6,
metterlo in <path>/etc/modules.autoload</path>.  Altrimenti, nel file
appropriato.
</p>

<p>
Per vedere tutti i moduli disponibili, eseguire il comando <c>find</c>.  Non
dimenticarsi di sostituire "&lt;kernel version&gt;" con la versione del
kernel che si è compilata:
</p>

<pre caption="Vedere tutti i moduli disponibili">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Per esempio, per caricare automaticamente il modulo <c>3c59x.o</c>,
modificare il file appropriato e inserire il nome.
</p>

<pre caption="Modificare /etc/modules.autoload.d/kernel-2.4">
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4 o kernel-2.6">
3c59x
</pre>

<p>
Questo può essere fatto anche con una riga sola:
</p>

<pre caption="Aggiungere un modulo -- con una riga sola">
# <i>echo '3c59x' >> /etc/modules.autoload.d/kernel-2.4</i>
<comment>(o kernel-2.6, o /etc/modules.autoload.....)</comment>
</pre>

<p>
Continuare l'installazione con la <uri link="?part=1&amp;chap=8">
Configurazione del sistema</uri>.
</p>

</body>
</subsection>
</section>
</sections>
