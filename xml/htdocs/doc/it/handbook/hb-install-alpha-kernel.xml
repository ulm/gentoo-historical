<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/handbook/hb-install-alpha-kernel.xml,v 1.21 2007/03/13 21:13:20 mascherpa Exp $ -->

<sections>

<version>7.3</version>
<date>2007-03-12</date>

<section>
<title>Timezone</title>
<body>

<p>
Innanzitutto è necessario selezionare la propria timezone, in modo che il
sistema riconosca in che parte del globo è collocato. Per la propria
timezone, consultare <path>/usr/share/zoneinfo</path>, e copiarla in
<path>/etc/localtime</path>. Evitare le timezone di
<path>/usr/share/zoneinfo/Etc/GMT*</path> poichè i loro nomi non indicano le
rispettive zone. Per esempio <path>GMT-8</path> è GMT+8.
</p>

<pre caption="Abilitare le informazioni sulla timezone">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Per esempio GMT:)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Installare i sorgenti</title>
<subsection>
<title>Scegliere un Kernel</title>
<body>

<p>
Il cuore, intorno al quale sono sviluppate tutte le distribuzioni, è il
Kernel di Linux. E' la parte di software compresa tra i programmi e
l'hardware. Gentoo dà la possibilità ai suoi utenti di scegliere tra diversi
sorgenti del kernel. Una lista completa delle descrizioni dei kernel
disponibili, è consultabile nella <uri
link="http://www.gentoo.org/doc/it/gentoo-kernel.xml">Guida ai Kernel
Gentoo</uri>.
</p>

<p>
Per sistemi basati su alpha ci sono <c>vanilla-sources</c> (il sorgente del
kernel di default 2.6)
</p>

<p>
Scegliere i sorgenti del kernel ed installarli usando <c>emerge</c>.
</p>

<p>
Nel prossimo esempio si installano i <c>vanilla-sources</c>.
Naturalmente si devono sostituire con i sorgenti che si sono scelti, questo è
solo un esempio.
</p>

<pre caption="Installare un sorgente del kernel">
# <i>emerge vanilla-sources</i>
</pre>

<p>
Se si dà un'occhiata a <path>/usr/src</path>, si dovrebbe vedere un link
simbolico chiamato <path>linux</path>, che punta al sorgente del kernel. In
questo caso il sorgente del kernel installato punta a
<c>vanilla-sources-2.6.16.19</c>. La versione potrebbe essere differente.
</p>

<pre caption="Il link simbolico al sorgente del kernel">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.6.16.19
</pre>

<p>
Ora si procede a configurare e compilare il sorgente del kernel. Allo scopo è
possibile utilizzare <c>genkernel</c>, che compila un kernel generico come
quello usato dal CD di installazione. Si tratta però prima la configurazione
"manuale", poichè è il miglior modo di ottimizzare l'ambiente.
</p>

<p>
Se si desidera configurare il kernel manualmente, continuare con <uri
link="#manual">Default: Configurazione manuale</uri>. Per chi preferisce
usare <c>genkernel</c>, leggere <uri link="#genkernel">Alternativa: Usare
genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Default: Configurazione manuale</title>
<subsection>
<title>Introduzione</title>
<body>

<p>
La configurazione manuale del kernel è spesso considerata la parte più
difficile che ogni utente Linux incontra. Non è assolutamente vero -- dopo
aver configurato un po' di kernel, l'operazione risulta semplice.
</p>

<p>
Una cosa <e>è</e> però vera: si deve conoscere il proprio sistema quando si
comincia una configurazione manuale del kernel. La maggior parte delle
informazioni può essere raccolta con emergere pciutils (<c>emerge
pciutils</c>) che contiene <c>lspci</c>. Si potrà usare <c>lspci</c> con
l'ambiente in cui si è effettuato il chroot. Si può ignorare i warning
<e>pcilib</e> (come pcilib: cannot open /sys/bus/pci/devices). E' possibile
anche eseguire <c>lspci</c> da un ambiente in cui <e>non si è effettuato il
chroot</e>. I risultati sono gli stessi. Si può anche eseguire <c>lsmod</c>
per vedere che moduli del kernel usa il CD di installazione (potrebbe fornire
un buon suggerimento su cosa abilitare).
</p>

<p>
Andare nella directory del sorgente del kernel, e digitare <c>make
menuconfig</c>. Questo aprirà un menu di configurazione basato su ncurses.
</p>

<pre caption="Aprire menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Vengono visualizzate molte sezioni di configurazione. Ecco ora alcune opzioni
che devono essere attivate (altrimenti Gentoo non può funzionare, o non
funziona correttamente senza modifiche aggiuntive).
</p>

</body>
</subsection>
<subsection>
<title>Attivare le opzioni indispensabili</title>
<body>

<p>
Prima di tutto, si deve attivare l'uso di codice/driver di sviluppo e
sperimentale. Se non lo si fa, non si ha la possibilità di utilizzare qualche
codice/driver molto importante:
</p>

<pre caption="Selezionare codice/driver sperimentale, General setup">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
General setup ---&gt;
  [*] Support for hot-pluggable devices
</pre>

<p>
Andare su <c>File Systems</c> e selezionare il supporto per il filesystem che
si usa. <e>Non</e> compilarlo come modulo, altrimenti Gentoo non può montare
le partizioni. Selezionare anche <c>Virtual memory</c> e <c>/proc file
system</c>. Se si sta usando un kernel 2.4, si dovrebbe selezionare <c>/dev
file system</c> e <c>Automatically mount at boot</c> e fare un <c>emerge
devfsd</c>.
</p>

<pre caption="Selezionare il necessario filesystem">
<comment>(Con un kernel 2.4.x)</comment>
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot
  [ ] /dev/pts file system for Unix98 PTYs

<comment>(Con un kernel 2.6.x)</comment>
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)

<comment>(Selezionare una o più delle seguenti opzioni in base al sistema usato)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Se si sta usando PPPoE per connettersi a Internet o si sta usando un modem
dial-up, si ha bisogno delle seguenti opzioni nel kernel:
</p>

<pre caption="Selezionare i driver necessari per PPPoE">
<comment>(Con un kernel 2.4.x)</comment>
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports

<comment>(Con un kernel 2.6.x)</comment>
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Le due opzioni di compressione non sono dannose, ma neppure necessarie; lo
stesso vale per <c>PPP over Ethernet</c>, che potrebbe essere usata soltanto
da <c>rp-pppoe</c> se configurato in modalità kernel.
</p>

<p>
Chi ne ha bisogno, non deve dimenticare di includere il supporto per la
scheda ethernet nel kernel.
</p>

<p>
Anche le seguenti opzioni sono raccomandate:
</p>

<pre caption="Opzioni raccomandate Alpha">
General setup ---&gt;
  &lt;*&gt; SRM environment through procfs
  &lt;*&gt; Configure uac policy via sysctl

Plug and Play configuration ---&gt;
  &lt;*&gt; Plug and Play support
  &lt;M&gt;   ISA Plug and Play support

SCSI support ---&gt;
  SCSI low-level drivers ---&gt;
    &lt;*&gt; SYM53C8XX Version 2 SCSI support (NEW)
    &lt;*&gt; Qlogic ISP SCSI support

Network device support ---&gt;
  Ethernet (10 or 100 Mbit) ---&gt;
    &lt;M&gt; DECchip Tulip (dc21x4x) PCI support
    &lt;M&gt; Generic DECchip &amp; DIGITAL EtherWORKS PCI/EISA
    &lt;M&gt; EtherExpressPro/100 support (eepro100)
    &lt;M&gt; EtherExpressPro/100 support (e100)
  Ethernet (1000 Mbit) ---&gt;
    &lt;M&gt; Alteon AceNIC
      [*] Omit support for old Tigon I
    &lt;M&gt; Broadcom Tigon3
  [*] FDDI driver support
  &lt;M&gt; Digital DEFEA and DEFPA
  &lt;*&gt; PPP support
    &lt;*&gt; PPP Deflate compression

Character devices ---&gt;
  [*] Support for console on serial port
  [*] Direct Rendering Manager

File systems ---&gt;
  &lt;*&gt; Kernel automounter version 4 support
  Network File Systems ---&gt;
    &lt;*&gt; NFS
      [*] NFSv3 client
      &lt;*&gt; NFS server
      [*] NFSv3 server
  Partition Types ---&gt;
    [*] Advanced partition selection
    [*] Alpha OSF partition support
  Native Language Support
    &lt;*&gt; NLS ISO 8859-1

Sound ---&gt;
  &lt;M&gt; Sound card support
    &lt;M&gt; OSS sound modules
      [*] Verbose initialisation
      [*] Persistent DMA buffers
      &lt;M&gt; 100% Sound Blaster compatibles
</pre>

<p>
Una volta terminata la configurazione del kernel continuare con <uri
link="#compiling">Compilazione e Installazione</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Compilazione e Installazione</title>
<body>

<p>
Ora che il kernel è configurato, il prossimo passo sarà la sua compilazione e
la sua installazione. Uscire dal menu di configurazione e avviare il processo
di compilazione:
</p>

<pre caption="Compilare il kernel">
<comment>(Per kernel 2.4)</comment>
# <i>make dep &amp;&amp; make vmlinux modules modules_install</i>

<comment>(Per kernel 2.6)</comment>
# <i>make &amp;&amp; make modules_install</i>

<comment>(Per tutti i kernel)</comment>
# <i>make boot</i>
</pre>

<p>
Quando la compilazione è finita, è necessario copiare l'immagine del kernel
in <path>/boot</path>. Kernel recenti potrebbero creare
<path>vmlinux</path> invece di <path>vmlinux.gz</path>. Attenzione quindi a
quando si copia l'immagine del kernel.
</p>

<pre caption="Installare il kernel">
# <i>cp arch/alpha/boot/vmlinux.gz /boot/</i>
</pre>

<p>
Adesso continuare con <uri link="#kernel_modules">Installare i moduli del
Kernel separati</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternativa: Usare genkernel</title>
<body>

<p>
Se si sta leggendo questa sezione, vuol dire che si è scelto di usare lo
script <c>genkernel</c>, che configura il kernel.
</p>

<p>
Adesso che sono stati installati i sorgenti del kernel si può utilizzare lo
script <c>genkernel</c> per configurarlo e compilarlo automaticamente.
<c>genkernel</c> configura il kernel in modo quasi identico a come è
configurato quello del CD di installazione. Infatti quando si usa
<c>genkernel</c> per compilare il kernel, il sistema rileva tutto l'hardware
al boot, proprio come il CD di installazione. Poichè genkernel non richiede
nessuna configurazione manuale del kernel, questa è una soluzione ideale per
quegli utenti che hanno qualche difficoltà nel compilarsi il kernel da soli.
</p>

<p>
Ecco come usare genkernel. Per prima cosa si deve emergere l'ebuild di
genkernel:
</p>

<pre caption="Emergere genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Compilare ora il proprio kernel eseguendo <c>genkernel all</c>. Visto che
<c>genkernel</c> compila un kernel che supporta quasi tutto l'hardware
disponibile questa compilazione può essere un processo piuttosto lungo.
</p>

<p>
E' importante sapere anche che se la partizione di boot non usa ext2 o ext3
come filesystem è necessario configurare manualmente il kernel usando
<c>genkernel --menuconfig all</c> e aggiungere il supporto per il filesystem
scelto <e>nel</e> kernel (cioè <e>non</e> come modulo).
</p>

<pre caption="Esecuzione di genkernel">
# <i>genkernel all</i>
* Gentoo Linux Genkernel; Version 3.4.0
* Running with options: all

* Linux Kernel 2.6.16.19 for alpha...
* kernel: >> Running mrproper...
<comment>(Output rimosso per facilitare la leggibilità)</comment>
* Kernel compiled successfully!
*              
* Required Kernel Parameters:
*     real_root=/dev/$ROOT
*
*     Where $ROOT is the device node for your root partition as the
*     one specified in /etc/fstab
*
* If you require Genkernel's hardware detection features; you MUST
* tell your bootloader to use the provided INITRAMFS file. Otherwise;
* substitute the root argument for the real_root argument if you are
* not planning to use the initrd...

* WARNING... WARNING... WARNING...
* Additional kernel cmdline arguments that *may* be required to boot properly...
* Do NOT report kernel bugs as genkernel bugs unless your bug
* is about the default genkernel configuration...
*
* Make sure you have the latest genkernel before reporting bugs.
</pre>

<p>
Una volta completato <c>genkernel</c>, viene creato un kernel completo di
moduli e <e>root disk iniziale</e> (initrd). Il kernel e initrd intervengono
quando si configura un boot loader. E' consigliabile dunque annotare il nome
del kernel e del initrd, poichè servono quando si scrive il file di
configurazione del bootloader. Initrd si avvia subito dopo il boot per
effettuare un rilevamento automatico dell'hardware (come nel CD di
installazione), prima che si avvii il sistema "reale".
</p>

<pre caption="Controllo dell'immagine del kernel e dell'initrd">
# <i>ls /boot/kernel* /boot/initramfs-*</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>Installare i moduli del kernel separati</title>
<subsection>
<title>Installare i moduli extra</title>
<body>

<p>
Ora si dovrebbero emergere gli ebuild per ogni altro componente presente nel
sistema. Ecco una lista degli ebuild relativi al kernel che si possono
emergere:
</p>

<table>
<tcolumn width="1in"/>
<tcolumn width="4in"/>
<tcolumn width="2in"/>
<tr>
  <th>Ebuild</th>
  <th>Scopo</th>
  <th>Comando</th>
</tr>
<tr>
  <ti>x11-drm</ti>
  <ti>
		Schede grafiche con accelerazione 3D per le ATI Radeon fino alla 9200,
		Rage128, Matrox, Voodoo e altre schede per xorg-x11. Si controlli la
		variabile <c>IUSE_VIDEO_CARDS</c> nell'ebuild
		<path>/usr/portage/x11-base/x11-drm</path> per vedere qual'è la
		<c>propria scheda</c> da inserire. 
    </ti>
  <ti><c>VIDEO_CARDS="yourcard" emerge x11-drm</c></ti>
</tr>
</table>

<p>
Si deve fare attenzione dato che alcuni di questi ebuild richiedono grandi
dipendenze. Per verificare quali pacchetti vengono installati all'emerge di
un ebuild, si deve usare <c>emerge --pretend</c>. Per esempio, per il
pacchetto <c>x11-drm</c>:
</p>

<pre caption="Vedere un elenco completo dei software da installare">
# <i>emerge --pretend x11-drm</i>
</pre>

</body>
</subsection>
<subsection>
<title>Configurare i moduli</title>
<body>

<p>
Si dovrebbero inserire i moduli che si vogliono caricare in
<path>/etc/modules.autoload.d/kernel-2.4</path> (o <path>kernel-2.6</path>).
Se si vuole, si possono anche aggiungere altre opzioni ai moduli.
</p>

<p>
Per vedere tutti i moduli disponibili, eseguire il comando <c>find</c>. Non
dimenticarsi di sostituire "&lt;kernel version&gt;" con la versione del
kernel che si è compilata:
</p>

<pre caption="Vedere tutti i moduli disponibili">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Per esempio, per caricare automaticamente il modulo <c>3c59x.o</c>,
modificare il file <path>kernel-2.4</path> o <path>kernel-2.6</path> e
inserire il nome.
</p>

<pre caption="Modificare /etc/modules.autoload.d/kernel-2.4">
<comment>(Esempio per i kernel 2.4)</comment>
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4 o kernel-2.6">
3c59x
</pre>

<p>
Continuare l'installazione con la <uri
link="?part=1&amp;chap=8">Configurazione del sistema</uri>.
</p>

</body>
</subsection>
</section>
</sections>
