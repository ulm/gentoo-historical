<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/handbook/hb-install-ppc-bootloader.xml,v 1.18 2012/02/26 08:35:15 swift Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<sections>

<abstract>
Esistono svariati Bootloader. Ognuno di essi viene configurato in maniera
differente. In questo capitolo si descrivono le possibilità disponibili e si
illustra come configurare il Bootloader secondo le proprie necessità.
</abstract>

<version>12</version>
<date>2011-05-09</date>

<section>
<title>La scelta</title>
<subsection>
<title>Introduzione</title>
<body>

<p>
Dopo aver configurato e compilato il kernel e inserito i necessari file di
configurazione, è venuto il momento di installare il programma che esegue il
kernel nel momento in cui si avvia il sistema. Tale programma è chiamato
<e>bootloader</e>.
</p>

<p>
Il bootloader che verrà utilizzato dipenderà dal tipo di macchina PPC
utilizzata.
</p>

<p>
Se si sta usando una macchina NewWorld Apple o IBM, si deve usare <uri
link="#yaboot">yaboot</uri>. Macchine OldWorld Apple hanno due opzioni, <uri
link="#bootx">BootX</uri> (raccomandato) e <uri link="#quik">quik</uri>. Le
macchine Pegasos non richiedono un bootloader, ma si deve emergere il <uri
link="#bootcreator">bootcreator</uri> per creare un bootmenu SmartFirmware.
</p>

</body>
</subsection>
</section>

<section id="yaboot">
<title>Predefinito: usare yaboot</title>
<subsection>
<title>Introduzione</title>
<body>

<impo>
yaboot può essere utilizzato soltanto su sistemi NewWorld Apple e IBM!
</impo>


<p>
Per trovare i device di boot, yaboot ha bisogno di accedere ai device node
creati da udev allo startup e al filesystem sysfs. Questi due file system si
trovano in <path>/dev</path> e <path>sys</path>. Questo può essere fatto
attraverso il bind mount di questi filesystem da root del CD di installazione ai
mount point di <path>/dev</path> e <path>/sys</path> nel chroot. Se si è già
fatto il bind mount di questi filesystem, non c'è bisogno di farlo di nuovo.
</p>

<pre caption="Bind-mount dei filesystem device e sysfs">
# <i>exit </i> # con questo si esce da chroot
# <i>mount --rbind /dev /mnt/gentoo/dev</i>
# <i>mount --rbind /sys /mnt/gentoo/sys</i>
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>/usr/sbin/env-update &amp;&amp; source /etc/profile </i>
</pre>

<p>
Per configurare yaboot, si può usare <c>yabootconfig</c> per creare
automaticamente un file di configurazione. Se si sta installando Gentoo su un G5
(sui quali <c>yabootconfig</c> non sempre funziona), o si vuole avviare da
Firewire o USB, si deve configurare manualmente yaboot.
</p>

<note>
Si deve modificare manualmente <path>yaboot.conf</path> quando si usa
<c>genkernel</c>, anche se si è usato <c>yabootconfig</c>. La sezione della
immagine del kernel di <path>yaboot.conf</path> dovrebbe essere modificata come
segue (essendo <path>vmlinux</path> e <path>initrd</path> rispettivamente
il kernel e l'immagine di <path>initrd</path>):
</note>

<pre caption="Aggiungere gli argomenti di boot di genkernel a yaboot.conf">
<comment>###########################################################
## Questa sezione può essere duplicata se si ha
## più di un kernel o set di opzioni di boot - sostituire il kernel
## e l'initrd con il nome esatto del kernel e di initrd che si usano.
###########################################################</comment>
 image=/boot/<keyval id="genkernel-name"/>
  label=Linux
  root=/dev/ram0
  partition=3
  initrd=/boot/<keyval id="genkernel-initrd"/>
  <comment># Si possono aggiungere ulteriori argomenti del kernel come
  # rootdelay=10 per un USB/Firewire Boot</comment>
  append="real_root=/dev/sda3"
  read-only
<comment>##########################################################</comment>
</pre>

<ul>
  <li><uri link="#yabootconfig">Default: usare yabootconfig</uri></li>
  <li>
    <uri link="#manual_yaboot">Alternativa: configurare manualmente yaboot</uri>
  </li>
</ul>

</body>
</subsection>
<subsection id="yabootconfig">
<title>Predefinito: usare yabootconfig</title>
<body>

<p>
<c>yabootconfig</c> rileva automaticamente le partizioni presenti sulla macchina
e configura le opzioni di avvio con Linux, Mac OS e Mac OS X.
</p>

<p>
Per utilizzare <c>yabootconfig</c>, si deve avere una partizione Apple_Bootstrap
sul disco, e <path>/etc/fstab</path> deve essere configurato per riflettere le
proprie partizioni Linux (notare che la partizione di bootstrap <e>non</e>
dovrebbe essere nel fstab). Entrambe le operazioni dovrebbero essere già state
fatte precedentemente, ma si controlli <path>/etc/fstab</path> prima di
procedere. Assicurarsi di aver installato <c>yaboot</c>.
</p>

<pre caption = "Installare yaboot">
# <i>emerge yaboot</i>
</pre>

<p>
Adesso uscire da chroot ed eseguire <c>yabootconfig --chroot /mnt/gentoo</c>. Il
programma conferma la locazione della partizione di bootstrap. Se si segue lo
schema di partizione del disco suggerito, la partizione bootstrap dovrebbe
essere <path>/dev/sda2</path>. Se questa è corretta, premere <c>Y</c>,
altrimenti ricontrollare <path>/etc/fstab</path>. Successivamente yabootconfig
analizza le impostazioni di sistema, crea il file <path>/etc/yaboot.conf</path>
ed esegue <c>mkofboot</c>. <c>mkofboot</c> serve per formattare la partizione
Apple_Bootstrap ed installare in essa il file di configurazione di yaboot. Dopo
aver completato entrare nuovamente in chroot.
</p>

<pre caption="Entrare in chroot">
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>/usr/sbin/env-update &amp;&amp; source /etc/profile</i>
</pre>

<p>
E' possibile controllare il contenuto di <path>/etc/yaboot.conf</path>. Se si
effettuano delle modifiche a <path>/etc/yaboot.conf</path> (come ad esempio
l'impostazione del SO di avvio predefinito), assicurarsi di eseguire <c>ybin
-v</c> per applicare le modifiche alla partizione Apple_Bootstrap. Ogni volta
che si modifica yaboot.conf, ad esempio per testare un nuovo kernel, è
importante eseguire <c>ybin -v</c> per aggiornare la partizione di boot.
</p>

<p>
Continuare con il <uri link="#reboot">Riavvio del sistema</uri>.
</p>

</body>
</subsection>
<subsection id="manual_yaboot">
<title>Alternativa: configurare manualmente yaboot</title>
<body>

<p>
Per cominciare installare <c>yaboot</c> sul proprio sistema.
</p>

<pre caption = "Installare yaboot con GRP">
 # <i>emerge yaboot</i>
</pre>

<p>
Qui è presente un file <path>yaboot.conf</path> completo, che è possibile
modificare a proprio piacimento.
</p>

<pre caption = "/etc/yaboot.conf">
<comment>## /etc/yaboot.conf
##
## Eseguire: "man yaboot.conf" per i dettagli. Non effettuare cambiamenti
## prima di averlo fatto!!
## Vedere anche: /usr/share/doc/yaboot/examples per configurazioni di esempio.
##
## Per avere un menu multi-boot, aggiungere una o più righe tra:
## bsd=/dev/sdaX, macos=/dev/sdaY, macosx=/dev/sdaZ

## La partizione di bootstrap:</comment>

boot=/dev/sda2

<comment>## ofboot è la modalità Open Firmware per specificare la partizione di bootstrap
## Se non è definita, yaboot fallisce sui G5 e su alcuni G4 (a meno che non si
## passino gli argomenti necessari al programma mkofboot/ybin).
## hd:X significa /dev/sdaX.
##
## Gli utilizzatori di G5 dovrebbero togliere il commento a questa linea!!

#ofboot=hd:2

## Gli utenti che avviano da firewire dovrebbero usare una riga come questa:
# ofboot=fw/node/sbp-2/disk@0:

## Gli utenti che avviano da USB dovrebbero usare una riga come questa:
# ofboot=usb/disk@0:

## hd: è un'abbreviazione per il primo disco Open Firmware</comment>
device=hd:

<comment>## Gli utenti firewire e USB devono specificare l'intero nome del device OF
## Può essere trovato usando ofpath, che è incluso con yaboot.

# device=fw/node@0001d200e00d0207/sbp-2@c000/disk@0:
</comment>

delay=5
defaultos=macosx
timeout=30
install=/usr/lib/yaboot/yaboot
magicboot=/usr/lib/yaboot/ofboot

<comment>#################
## Questa sezione può essere duplicata se si hanno diversi kernel o diverse
## opzioni di avvio - sostituire l'immagine con la versione del kernel
## appropriata
#################</comment>
image=/boot/<keyval id="kernel-name"/>
  label=Linux
  root=/dev/sda3
  partition=3
<comment># append="rootdelay=10"  # Richiesto per boot USB/Firewire</comment>
  read-only
<comment>##################

## Gli utilizzatori di G5 e di alcuni G4 dovrebbero impostare
##   macos=hd:13/
##   macosx=hd:12
## al posto dei valori in esempio.</comment>
macos=/dev/sda13
macosx=/dev/sda12
enablecdboot
enableofboot
</pre>

<p>
Una volta che <path>yaboot.conf</path> è stato configurato, si deve eseguire
<c>mkofboot -v</c> per formattare la partizione Apple_bootstrap e per installare
le impostazioni. Se si cambia yaboot.conf dopo che la partizione Apple_bootstrap
è stata creata, si possono aggiornare le impostazioni eseguendo <c>ybin -v</c>
</p>

<pre caption="Impostare la partizione bootstrap">
# <i>mkofboot -v</i>
</pre>

<p>
Per maggiori informazioni su yaboot visitare <uri
link="http://penguinppc.org/bootloaders/yaboot">il progetto yaboot</uri>. Adesso
continuare l'installazione con il <uri link="#reboot">Riavvio del sistema</uri>.
</p>

</body>
</subsection>
</section>

<section id="bootx">
<title>Alternativa: BootX</title>
<body>

<impo>
BootX può essere utilizzato solamente sui sistemi OldWorld Apple con MacOS 9 o
successivi!
</impo>

<p>
Poichè BootX avvia Linux in MacOS, il kernel dovrà essere copiato dalla
partizione Linux alla partizione MacOS. Prima si monterà la partizione MacOS da
fuori il chroot. Usare <c>mac-fdisk</c> per trovare il numero della partizione
MacOS, ma qui si userà sd6 come un esempio. Dopo che la partizione è montata, si
copierà il kernel al system folder in modo che BootX possa trovarlo.
</p>

<pre caption="Copiare il kernel su la partizione MacOS">
# <i>exit</i>
cdimage ~# <i>mkdir /mnt/mac</i>
cdimage ~# <i>mount /dev/sda6 /mnt/mac -t hfs</i>
cdimage ~# <i>cp /mnt/gentoo/usr/src/linux/vmlinux "/mnt/mac/System Folder/Linux
Kernels/<keyval id="kernel-name"/>"</i>
</pre>

<p>
Se si usa genkernel, il kernel e initrd devono essere copiati nella partizione
MacOS.
</p>

<pre caption="Copiare il kernel di genkernel e initrd su la partizione MacOS">
# <i>exit</i>
cdimage ~# <i>mkdir /mnt/mac</i>
cdimage ~# <i>mount /dev/sda6 /mnt/mac -t hfs</i>
cdimage ~# <i>cp /mnt/gentoo/boot/<keyval id="genkernel-name"/> "/mnt/mac/System Folder/Linux Kernels"</i>
cdimage ~# <i>cp /mnt/gentoo/boot/<keyval id="genkernel-initrd"/> "/mnt/mac/System Folder"</i>
</pre>

<p>
Ora che il kernel è copiato, si deve riavviare per impostare BootX.
</p>

<pre caption="Smontare le partizioni e riavviare">
cdimage ~# <i>cd /</i>
cdimage ~# <i>umount -l /mnt/gentoo/dev{/shm,/pts,}</i>
cdimage ~# <i>umount -l /mnt/gentoo{/boot,/proc,}</i>
cdimage ~# <i>umount -l /mnt/mac</i>
cdimage ~# <i>reboot</i>
</pre>

<p>
Naturalmente non dimenticarsi di togliere tutti i CD avviabili, c'è bisogno di
avviare MacOS questa volta.
</p>

<p>
Adesso che la macchina è stata avviata con MacOS aprire il pannello di controllo
di BootX. Se non si usa genkernel, selezionare <c>Options</c> e deselezionare
<c>Use specified RAM disk</c>. Se si usa genkernel, assicurarsi che initrd di
genkernel sia selezionato invece di quello del CD di installazione. Se non si
usa genkernel, c'è una opzione per specificare il disco root Linux della
macchina e la partizione. Inserire i valori appropriati. Secondo la
configurazione del kernel, potrebbero essere applicati ulteriori argomenti di
boot.
</p>

<p>
BootX può essere configurato per avviare Linux all'avvio. Con questa opzione
la macchina avvia prima MacOS, quindi BootX, durante l'avvio, carica ed avvia
Linux. Visitare <uri link="http://penguinppc.org/bootloaders/bootx/">il sito di
BootX</uri> per avere maggiori informazioni.
</p>

<impo>
Assicurarsi di avere il supporto per i filesystem HFS e HFS+ nel kernel,
altrimenti non si può aggiornare o cambiare il kernel sulla partizione MacOS.
</impo>

<p>
Adesso riavviare nuovamente per avviare Linux, e continuare con <uri
link="?part=1&amp;chap=11">Termine dell'installazione Gentoo</uri>.
</p>

</body>
</section>
<section id="quik">
<title>Alternativa: quik</title>
<body>

<p>
<c>quik</c> permette a OldWorld Macs di avviare senza MacOS. Non è ancora ben
supportato ed ha ancora qualche piccolo problema. Se si ha la possibilità, è
meglio usare BootX che è molto più sicuro e più facile da impostare di quik.
</p>

<p>
Installare <c>quik</c>:
</p>

<pre caption="Emerge quik">
# <i>emerge quik</i>
</pre>

<p>
Poi si deve impostarlo. Modificare /etc/quik.conf e impostare la propria
immagine al kernel che si è copiato nella partizione boot.
</p>

<pre caption="Configurare quik.conf">
# Example of quik.conf
init-message = "Gentoo Linux\n"
<comment># Questa è la partizione boot</comment>
partition = 2
root = /dev/sda4
timeout = 30
default = gentoo
<comment># Questo è il kernel</comment>
image = /<keyval id="kernel-name"/>
label = gentoo
</pre>

<p>
Il file <path>quik.conf</path> <e>deve</e> essere sullo stesso disco delle
immagini boot di quik, può stare su una partizione differente, ma è raccomandato
spostarla sulla partizione boot.
</p>

<pre caption="Spostare quik.conf in /boot">
# <i>mv /etc/quik.conf /boot/quik.conf</i>
</pre>

<p>
Si impostano le variabili boot così che quik le carichi al boot. Per farlo, si
usa un programma chiamato <c>nvsetenv</c>. Le variabili che si possono impostare
variano da macchina a macchina, è meglio trovare le <uri
link="http://penguinppc.org/bootloaders/quik/quirks.php">quirks</uri> della
propria macchina invece di tentare queste.
</p>

<pre caption="Impostare le variabili boot">
# <i>nvsetenv auto-boot true</i> <comment># Impostarla a false se si vuole avviare in OF, non tutti i modelli possono visualizzare output OF</comment>
# <i>nvsetenv output-device video</i> <comment># Controllare la pagina quirk, ci sono molte variazioni qui</comment>
# <i>nvsetenv input-device kbd</i>
# <i>nvsetenv boot-device scsi/sd@1:0</i> <comment># Per SCSI</comment>
# <i>nvsetenv boot-device ata/ata-disk@0:0</i> <comment># Per ATA</comment>
# <i>nvsetenv boot-file /boot/<keyval id="kernel-name"/> root=/dev/sda4</i>
<comment>Il primo è il percorso al kernel, il secondo la partizione root. Si possono aggiungere opzioni del kernel alla fine di questa riga.</comment>
# <i>nvsetenv boot-command boot</i> <comment># Impostare questa a bye per MacOS e boot per Linux</comment>
</pre>

<note>
E' anche possibile cambiare le variabili boot da MacOS. Secondo il modello, sia
<uri link="http://penguinppc.org/bootloaders/quik/BootVars.sit.hqx">
bootvars</uri> o <uri link="ftp://ftp.apple.com/developer/macosxserver/utilities/SystemDisk2.3.1.smi.bin">
Apple System Disk</uri> dovrebbero essere usate. Vedere la pagina quik quirks
per più informazioni.
</note>

<p>
Si è impostata la macchina per avviare, e si deve essere sicuri che immagini
boot siano installate correttamente. Eseguire <c>quik -v -C /boot/quik.conf</c>.
Dovrebbe dire che è installato il primo stage block QUIK boot.
</p>

<note>
Se qualcosa è sbagliato, si può sempre resettare la propria PRAM e ritornare ai
valori predefiniti, premendo <c>command + option + p + r</c> prima di accendere
la macchina. Questo cancellerà i valori che si sono impostati con nvsetenv e
dovrebbe permettere di avviare un bootdisk MacOS o un bootdisk Linux.
</note>

<p>
Continuare la installazione con <uri link="#reboot">Riavvio del sistema</uri>.
</p>

</body>
</section>
<section id="bootcreator">
<title>Alternativa: BootCreator</title>
<body>

<impo>
BootCreator crea un bootmenu per SmartFirmware scritto in Forth per i sistemi
Pegasos.
</impo>

<p>
Prima di tutto assicurarsi di avere <c>bootcreator</c> installato nel sistema:
</p>

<pre caption = "Installare bootcreator">
# <i>emerge bootcreator</i>
</pre>

<p>
Quindi copiare il file <path>/etc/bootmenu.example</path> in
<path>/etc/bootmenu</path> e modificarlo in base alle proprie esigenze:
</p>

<pre caption = "Modificare il file di configurazione di bootcreator">
# <i>cp /etc/bootmenu.example /etc/bootmenu</i>
# <i>nano -w /etc/bootmenu</i>
</pre>

<p>
Sotto si trova un file di configurazione completo di <path>/etc/bootmenu</path>.
Sostituire vmlinux ed initrd con i propri kernel e initrd.
</p>

<pre caption = "file di configurazione di bootcreator">
<comment>#
# Example description file for bootcreator 1.1
#</comment>

[VERSION]
1

[TITLE]
Boot Menu

[SETTINGS]
AbortOnKey = false
Timeout    = 9
Default    = 1

[SECTION]
Local HD -> Morphos      (Normal)
ide:0 boot2.img ramdebug edebugflags="logkprintf"

[SECTION]
Local HD -> Linux (Normal)
ide:0 <keyval id="kernel-name"/> video=radeonfb:1024x768@70 root=/dev/sda3

[SECTION]
Local HD -> Genkernel (Normal)
ide:0 <keyval id="genkernel-name"/> root=/dev/ram0
real_root=/dev/sda3 initrd=<keyval id="genkernel-initrd"/>
</pre>

<p>
Il <path>bootmenu</path> deve essere trasferito in Forth e copiato sulla
partizione boot, così SmartFirmware può leggerlo. Quindi avviare
<c>bootcreator</c>:
</p>

<pre caption = "Installare il bootmenu">
# <i>bootcreator /etc/bootmenu /boot/menu</i>
</pre>

<note>
Assicurarsi di controllare le impostazioni di SmartFirmware quando si riavvia,
che <path>menu</path> sia il file che sarà caricato in modo predefinito.
</note>

<p>
Continuare l'installazione con <uri link="#reboot">Riavvio del sistema</uri>.
</p>

</body>
</section>

<section id="reboot">
<title>Riavvio del sistema</title>
<subsection>
<body>

<p>
Uscire dall'ambiente chroot e smontare tutte le partizioni montate, quindi
eseguire il comando: <c>reboot</c>.
</p>

<pre caption="Uscire da chroot, smontare tutte le partizioni e riavviare">
# <i>exit</i>
livecd ~# <i>umount -l /mnt/gentoo/dev{/pts,/shm,}</i>
livecd ~# <i>umount -l /mnt/gentoo{/proc,/sys,}</i>
livecd ~# <i>reboot</i>
</pre>

<p>
Una volta avviato Gentoo, completare l'installazione con <uri
link="?part=1&amp;chap=11">Termine dell'installazione Gentoo</uri>.
</p>

</body>
</subsection>
</section>
</sections>
