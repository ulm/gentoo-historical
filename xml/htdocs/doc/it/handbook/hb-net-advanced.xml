<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/handbook/hb-net-advanced.xml,v 1.7 2008/03/02 18:10:38 scen Exp $ -->

<sections>

<abstract>
La guida di riferimento per capire come funziona la configurazione, è un
prerequisito per capire le impostazioni modulari.
</abstract>

<version>8.0</version>
<date>2007-05-07</date>

<section>
<title>Configurazione avanzata</title>
<body>

<p>
La variabile <c>config_eth0</c> è il cuore della configurazione di
un'interfaccia, ed è composta da un elenco di istruzioni di alto livello per la
sua configurazione (in questo caso l'interfaccia è <c>eth0</c>). Ogni comando di
questo elenco è effettuato sequenzialmente, e l'interfaccia viene
considerata funzionante se almeno un comando viene eseguito con successo.
</p>

<p>
Ecco un elenco delle istruzioni integrate.
</p>

<table>
<tr>
  <th>Comando</th>
  <th>Descrizione</th>
</tr>
<tr>
  <ti><c>null</c></ti>
  <ti>Non fa niente</ti>
</tr>
<tr>
  <ti><c>noop</c></ti>
  <ti>
    Se l'interfaccia è attiva e c'è un indirizzo, chiude la configurazione con
    successo
  </ti>
</tr>
<tr>
  <ti>un indirizzo IPv4 o IPv6</ti>
  <ti>Aggiunge l'indirizzo dell'interfaccia</ti>
</tr>
<tr>
  <ti>
    <c>dhcp</c>, <c>adsl</c> o <c>apipa</c> (o un comando personalizzato da un
    modulo di terze parti)
  </ti>
  <ti>
    Esegue il modulo fornito dal comando. Per esempio <c>dhcp</c> esegue un
    modulo che fornisce dhcp, il quale può essere uno tra <c>dhcpcd</c>,
    <c>udhcpc</c>, <c>dhclient</c> o <c>pump</c>.
  </ti>
</tr>
</table>

<p>
Se un comando non funziona, si può specificare un comando di riserva. Questo
deve corrispondere con esattezza alla struttura di configurazione.
</p>

<p>
Si possono unire insieme questi comandi. Ecco alcuni esempi reali:
</p>

<pre caption="Esempi di configurazione">
<comment># Aggiungere tre indirizzi IPv4</comment>
config_eth0=(
  "192.168.0.2/24"
  "192.168.0.3/24"
  "192.168.0.4/24"
)

<comment># Aggiungere un indirizzo IPv4 e due indirizzi IPv6</comment>
config_eth0=(
  "192.168.0.2/24"
  "4321:0:1:2:3:4:567:89ab"
  "4321:0:1:2:3:4:567:89ac"
)

<comment># Mantenere l'indirizzo assegnato dal kernel, a meno che l'interfaccia
# non venga disattivata e allora assegnarne un altro tramite DHCP. Se DHCP
# fallisce aggiungere un indirizzo statico determinato tramite APIPA</comment>
config_eth0=(
  "noop"
  "dhcp"
)
fallback_eth0=(
  "null"
  "apipa"
)
</pre>

<note>
Quando si usa il modulo <c>ifconfig</c> e si aggiunge più di un indirizzo, per
ogni ulteriore indirizzo vengono creati degli alias di interfaccia. Con gli
esempi precedenti, si ottengono le interfacce <c>eth0</c>, <c>eth0:1</c> e
<c>eth0:2</c>. Non si può fare niente di speciale con queste interfacce poichè
il kernel e gli altri programmi trattano <c>eth0:1</c> e <c>eth0:2</c> come
<c>eth0</c>.
</note>

<impo>
L'ordine dei comandi di riserva è importante! Se non si specifica l'opzione
<c>null</c> allora il comando <c>apipa</c> si esegue solo se fallisce il comando
<c>noop</c>.
</impo>

<note>
<uri link="?part=4&amp;chap=3#apipa">APIPA</uri> e
<uri link="?part=4&amp;chap=3#dhcp">DHCP</uri> sono discussi più avanti.
</note>

</body>
</section>
<section>
<title>Dipendenze di rete</title>
<body>

<p>
Gli script di inizializzazione in <path>/etc/init.d</path> possono dipendere da
una specifica interfaccia di rete o da net. <c>net</c> può essere definita in
<path>/etc/conf.d/rc</path> e può voler significare diverse cose grazie alla
variabile <c>RC_NET_STRICT_CHECKING</c>.
</p>

<table>
<tr>
  <th>Valore</th>
  <th>Descrizione</th>
</tr>
<tr>
  <ti><c>none</c></ti>
  <ti>Il servizio <path>net</path> è sempre considerato attivo</ti>
</tr>
<tr>
  <ti><c>no</c></ti>
  <ti>
    Significa che almeno un servizio <path>net.*</path> oltre a
    <path>net.lo</path> deve essere attivo. Può essere usato dagli utenti con
    notebook che usano la rete WIFI e una schede di rete statica e ne vogliono
    solamente una attiva in qualsiasi momento per considerare come attivo il
    servizio net.
  </ti>
</tr>
<tr>
  <ti><c>lo</c></ti>
  <ti>
    È lo stesso di <c>no</c>, ma viene preso in considerazione anche
    <path>net.lo</path>. Dovrebbe essere utile alle persone che non danno peso
    a quale specifica interfaccia venga attivata durante l'avvio.
  </ti>
</tr>
<tr>
  <ti><c>yes</c></ti>
  <ti>
    TUTTE le interfacce di rete DEVONO essere attive affinchè il servizio
    <path>net</path> sia considerato attivo.
  </ti>
</tr>
</table>

<p>
Ma che succede se <path>net.br0</path> dipende da <path>net.eth0</path> e
<path>net.eth1</path>? <path>net.eth1</path> potrebbe essere un dispositivo
wireless o ppp che deve essere configurato prima che sia aggiunto al bridge. Non
può essere fatto in <path>/etc/init.d/net.br0</path> poichè questo è un
collegamento simbolico a <path>net.lo</path>
</p>

<p>
La risposta corretta è quella di usare la funzione <c>depend()</c> in
<path>/etc/conf.d/net</path>
</p>

<pre caption="Dipendenza net.br0 in /etc/conf.d/net">
<comment># Si può usare qualsiasi dipendenza (use, after, before) come si # trova negli script attuali</comment>
depend_br0() {
  need net.eth0 net.eth1
}
</pre>

<p>
Per una discussione più dettagliata sulla dipendenza, consultare la sezione
<uri link="?part=2&amp;chap=4#doc_chap4">Scrivere Init Script</uri> nel
Manuale Gentoo.
</p>

</body>
</section>

<section id="variable_name">
<title>Nomi di variabili e valori</title>
<body>

<p>
I nomi delle variabili sono dinamici. Di solito seguono la struttura
<c>variable_${interface|mac|essid|apmac}</c>. Per esempio, la variabile
<c>dhcpcd_eth0</c> contiene il valore per le opzioni dhcpcd per eth0 e
<c>dhcpcd_essid</c> contiene il valore per le opzioni dhcpcd quando una
interfaccia si connette a essid "essid".
</p>

<p>
Non c'è nessuna regola che dice che i nomi delle interfacce debbano essere ethx.
Molte interfacce wireless hanno nomi come wlanx, rax e anche ethx. Alcune
interfacce definite dagli utenti, come i bridge, possono avere qualsiasi nome,
per esempio foo. Per rendere il tutto più interessante, gli Access Point
Wireless possono avere nomi che contengono caratteri alfa numerici - questo è
importante perchè si possono configurare i parametri di rete per ESSID.
</p>

<p>
Gentoo usa variabili bash per la rete - e bash non può usare altro che caratteri
alfanumerici inglesi. Per ovviare a questa limitazione si cambia ogni carattere
non alfanumerico inglese nel carattere <c>_</c>
</p>

<p>
Altro problema con bash, è il contenuto delle variabili - alcuni caratteri hanno
bisogno di essere specificati in modo particolare. Si risolve mettendo un
<c>\</c> all'inizio di questi. I seguenti caratteri devono essere specificati in
modo particolare: <c>"</c>, <c>'</c> e <c>\</c>.
</p>

<p>
In questo esempio si usa wireless ESSID poichè contiene un vasto numero di
caratteri. Si usa il ESSID <c>My "\ NET</c>:
</p>

<pre caption="Esempio di nomi di variabili">
<comment>(Funziona, ma il domain è invalido)</comment>
dns_domain_My____NET="My \"\\ NET"

<comment>(Il comando precedente imposta il domain dns a My "\ NET quando una
scheda wireless si connette a un AP che ha ESSID come My "\ NET)</comment>
</pre>

</body>
</section>
</sections>
