<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/handbook/2006.0/hb-install-ppc-kernel.xml,v 1.1 2006/02/27 21:34:49 so Exp $ -->

<sections>

<version>6.0</version>
<date>2006-02-27</date>

<section>
<title>Timezone</title>
<body>

<p>
Innanzitutto è necessario selezionare la propria timezone, in modo che il
sistema riconosca in che parte del globo è collocato. Per la propria timezone,
consultare <path>/usr/share/zoneinfo</path>, e copiarla in
<path>/etc/localtime</path>. Evitare le timezone di
<path>/usr/share/zoneinfo/Etc/GMT*</path> poichè i loro nomi non indicano
le rispettive zone. Per esempio <path>GMT-8</path> è GMT+8.
</p>

<pre caption="Abilitare le informazioni sulla timezone">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Per esempio GMT)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Installare i sorgenti</title>
<subsection>
<title>Scegliere un Kernel</title>
<body>

<p>
Il cuore, attorno al quale sono sviluppate tutte le distribuzioni, è il Kernel
di Linux. E' la parte di software compresa tra i programmi e l'hardware. Gentoo
dà la possibilità ai suoi utenti di scegliere tra diversi sorgenti del
kernel. Una lista completa delle descrizioni dei kernel disponibili è
consultabile nella <uri link="http://www.gentoo.org/doc/it/gentoo-kernel.xml">
Guida ai Kernel Gentoo</uri>.
</p>

<p>
Per l'architettura PPC si suggerisce di usare tra <c>vanilla-sources</c> e
<c>gentoo-sources</c> entrambi del ramo 2.6. Il secondo è disponibile quando
si esegue un'installazione senza connessione di rete. Ora è possibile dunque
installare i sorgenti del kernel tramite <c>emerge</c>. E'
necessario <c>USE="-doc"</c> per evitare di installare xorg-x11 o altre
dipendenze. <c>USE="symlink"</c> non è necessario per una
nuova installazione, ma assicura la creazione del symlink
<path>/usr/src/linux</path>.
</p>

<pre caption="Installare i sorgenti del kernel">
# <i>USE="-doc symlink" emerge gentoo-sources</i>
</pre>

<p>
Se si dà un'occhiata a <path>/usr/src</path>, si dovrebbe vedere un link
simbolico chiamato <path>linux</path>, che punta all'attuale sorgente del
kernel. In
questo caso il sorgente del kernel installato punta a
<c>gentoo-sources-2.6.15</c>. La versione potrebbe essere differente.
</p>

<pre caption="Il link simbolico al sorgente del kernel">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           22  Mar 18 16:23 /usr/src/linux -&gt; linux-2.6.15
</pre>

<p>
Ora si procede a configurare e compilare i sorgenti del kernel. Allo scopo è
possibile utilizzare <c>genkernel</c>, che compila un kernel generico come
quello usato dal CD di installazione. Prima però viene trattata la
configurazione "manuale", poiché è il miglior modo di ottimizzare l'ambiente.
</p>

<p>
se si desidera configurare manualmente il kernel, continuare con
<uri link="#manual">Default: Configurazione manuale</uri>. Se si desidera usare
<c>genkernel</c>, continuare con <uri link="#genkernel">
Alternativa: Usare genkernel</uri>.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Default: Configurazione manuale</title>
<subsection>
<title>Introduzione</title>
<body>

<p>
La configurazione manuale del kernel è spesso considerata la parte più
difficile che ogni utente Linux incontra. Non è assolutamente vero -- dopo
aver configurato un paio di kernel, l'operazione risulta semplice.
</p>

<p>
Tuttavia una cosa <e>è</e> vera: quando si comincia una configurazione manuale
del kernel si deve conoscere il proprio sistema. La maggior parte delle
informazioni possono essere raccolte con emergere pciutils
(<c>emerge pciutils</c>) che contiene <c>lspci</c>. Si potrà usare
<c>lspci</c> con l'ambiente in cui si è effettuato il chroot. Si può ignorare
i warning <e>pcilib</e> (come pcilib: cannot open /sys/bus/pci/devices). E'
possibile anche eseguire <c>lspci</c> da un ambiente in cui <e>non si è
effettuato il chroot</e>. I risultati sono gli stessi. Si può anche eseguire
<c>lsmod</c> per vedere che moduli del kernel usa il CD di installazione
(potrebbe fornire un buon suggerimento su cosa abilitare). Un altro posto da
vedere per vedere quali componenti avbilitare è il log del messaggio del
kernel dopo aver completato il boot con successo. Digitare <c>dmesg</c> per
vedere il messaggio del kernel.
</p>

<p>
Andare nella directory dei sorgenti del kernel. E' raccomandato aggiungere
le impostazioni di default alla propria configurazione eseguendo <c>make
defconfig</c>. Dopo che la configurazione di default è stata generata, digitare
<c>make menuconfig</c> per visualizzare un menu di configurazione basato su
ncurses.
</p>

<pre caption="Aprire menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make defconfig</i>
# <i>make menuconfig</i>
</pre>

<p>
Vengono visualizzate molte sezioni di configurazione. Ecco ora alcune opzioni
che devono essere attivate (altrimenti Gentoo non può funzionare, o non
funziona correttamente senza modifiche aggiuntive).
</p>

</body>
</subsection>
<subsection>
<title>Attivare le opzioni indispensabili</title>
<body>

<p>
Prima di tutto, si deve attivare l'uso di codice/driver di sviluppo e
sperimentale. Se non lo si fa, non si ha la possibilità di utilizzare qualche
codice/driver molto importante:
</p>

<pre caption="Selezionare codice/driver sperimentale, General setup">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
General setup ---&gt;
  [*] Support for hot-pluggable devices
</pre>

<p>
Andare su <c>File Systems</c> e selezionare il supporto per i filesystem che si
usano. <e>Non</e> compilarlo come modulo, altrimenti Gentoo non può montare le
partizioni. Selezionare anche <c>/proc file system</c> e <c>Virtual memory</c>.
</p>

<pre caption="Selezionare i filesystem">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)

<comment>(Selezionare una o più delle seguenti, secondo necessità)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Se si utilizza PPPoE per connettersi a Internet, si ha bisogno delle seguenti
opzioni nel kernel:
</p>

<pre caption="Selezionare i driver necessari per PPPoE">
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Le due opzioni di compressione non sono dannose, ma neppure necessarie; lo
stesso vale per <c>PPP over Ethernet</c>, che potrebbe essere usata soltanto
da <c>rp-pppoe</c> se configurato in modalità kernel.
</p>

<p>
Chi ne ha bisogno, non deve dimenticare di includere il supporto per la scheda
ethernet nel kernel.
</p>

<p>
Gli utenti di macchine NewWorld e OldWorld possono attivare il supporto HFS.
Gli utenti OldWorld lo richiedono per copiare i kernel compilati nella
partizione MacOS. Gli utenti NewWorld lo richiedono per configurare la
partizione speciale Apple_Bootstrap:
</p>

<pre caption="Attivare il supporto HFS">
File Systems ---&gt;
  [*] HFS Support
</pre>

<p>
La prelazione kernel è ancora instabile su PPC e può causare fallimenti di
compilazione e random segfaults. E' <e>fortemente</e> raccomandato di non usare
questa caratteristica.
</p>

<pre caption="Assicurare che Preemptible Kernel Option non sia selezionata">
Platform options ---&gt;
  [ ] Preemptible Kernel
</pre>

<p>
Se si avvia da Firewire, si deve abilitare queste opzioni. Se non si desidera
compilarle nel supporto, si dovranno includere questi moduli e le loro
dipendenze in un initrd.
</p>

<pre caption="Abilitare il supporto per dispositivi firewire su boot">
Device Drivers ---&gt;
  IEEE 1394 (FireWire) support ---&gt;
    &lt;*&gt; IEEE 1394 (FireWire) support
    &lt;*&gt;   OHCI-1394 support
    &lt;*&gt;   SBP-2 support (Harddisks etc.)
</pre>

<p>
Se si avvia da USB, i deve abilitare queste opzioni. Se non si desidera
compilarle nel supporto, si dovranno includere questi moduli e le loro
dipendenze in un initrd.
</p>

<pre caption="Abilitare il supporto per dispositivi USB su boot">
Device Drivers ---&gt;
  USB support ---&gt;
    &lt;*&gt; Support for Host-side USB
    &lt;*&gt;   OHCI HCD support
    &lt;*&gt;   USB Mass Storage support
</pre>

<p>
Non levare il supporto per il kernel framebuffer poichè è richiesto per un
boot corretto. Se si usa un chipset basato su NVIDIA, si dovrebbe usare il
framebuffer OpenFirmware. Se si usa un chipset basato su ATI, si dovrebbe
selezionare il driver framebuffer basato sul proprio chipset (Mach64, Rage128
o Radeon).
</p>

<pre caption="Scegliere un Framebuffer Driver">
Device Drivers ---&gt;
  Graphics support ---&gt;
    &lt;*&gt; Support for frame buffer devices
    [*] Open Firmware frame buffer device support
    &lt;*&gt; ATI Radeon display support
    &lt;*&gt; ATI Rage128 display support
    &lt;*&gt; ATI Mach64 display support
    Console display driver support ---&gt;
      &lt;*&gt; Framebuffer Console support
</pre>

<note>
Se si seleziona più di un device framebuffer, potrebbe portare a un non
ottimale driver. Usare solo un framebuffer device o specificare quale è da
usare mettendo il driver nel kernel in boot come <c>video=radeonfb</c>.
</note>

<p>
Una volta terminata la configurazione del kernel continuare con
<uri link="#compiling">Compilazione e Installazione</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Compilazione e Installazione</title>
<body>

<p>
Ora che il kernel è configurato, il passo successivo è la compilazione e
l'installazione. Uscire dal menu di configurazione ed eseguire i comandi per
compilare il kernel:
</p>

<pre caption="Compilare il kernel">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Una volta terminata la compilazione, copiare l'immagine del kernel in
<path>/boot</path> (assicurarsi che sia montata correttamente sui Pegasos).
Se si sta usando BootX per avviare, il kernel si copierà dopo.
</p>

<p>
Yaboot e BootX si aspettano l'uso di un kernel non compresso, non come molti
altri bootloader. Il kernel non compresso è chiamato vmlinux ed è posto in
<path>/usr/src/linux</path> dopo che il kernel ha finito la compilazione. Se
si sta usando un sistema Pegasos, il Pegasos firmware richiede un kernel
compresso chiamato zImage.chrp che si trova su
<path>/usr/src/linux/arch/ppc/boot/images</path>.
</p>

<pre caption="Installazione del kernel">
# <i>cd /usr/src/linux</i>
<comment>sostituire &lt;kernel-version&gt; con versione corretta</comment>
<comment>(Apple/IBM)</comment>
# <i>cp vmlinux /boot/&lt;kernel-version&gt;</i>
<comment>(Pegasos)</comment>
# <i>cp arch/ppc/boot/images/zImage.chrp /boot/&lt;kernel-version&gt;</i>
</pre>

<p>
Adesso continuare con <uri link="#kernel_modules">
Installare i moduli del Kernel separati</uri>.
</p>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Installare i moduli del Kernel separati</title>
<subsection>
<title>Configurare i moduli</title>
<body>

<p>
E' possibile elencare tutti i moduli che si desidera caricare automaticamente
in <path>/etc/modules.autoload.d/kernel-2.6</path>. E' anche possibile
specificare opzioni extra per i moduli, se lo si desidera.
</p>

<p>
Per visualizzare tutti i moduli disponibili eseguire il comando <c>find</c>.
Non dimenticarsi di sostituire "&lt;kernel version&gt;" con la versione del
kernel che si è compilata:
</p>

<pre caption="Visualizzare tutti i moduli disponibili">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Per esempio, per caricare automaticamente il modulo <c>3c59x.o</c>, modificare
il file <path>kernel-2.6</path> e inserire il nome:
</p>

<pre caption="Modificare /etc/modules.autoload.d/kernel-2.6">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Continuare l'installazione con <uri link="?part=1&amp;chap=8">
Configurazione del sistema</uri>.
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>Alternativa: Usare genkernel</title>
<body>

<p>
Se si sta leggendo questa sezione, vuol dire che si è scelto di usare lo
script <c>genkernel</c>, che configura il kernel.
</p>

<p>
Adesso che sono stati installati i sorgenti del kernel si può utilizzare lo
script <c>genkernel</c> per configurarlo e compilarlo automaticamente.
<c>genkernel</c> configura il kernel in modo quasi identico a come è
configurato quello del CD di installazione. Infatti quando si usa
<c>genkernel</c> per compilare il kernel, il sistema rileva tutto l'hardware
al boot, proprio come il CD di installazione. Poichè genkernel non richiede
nessuna configurazione manuale del kernel, questa è una soluzione ideale per
quegli utenti che hanno qualche difficoltà nel compilarsi il kernel da soli.
</p>

<p>
Ecco come usare genkernel. Per prima cosa si deve emergere l'ebuild di
genkernel:
</p>

<pre caption="Emergere genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Copiare la configurazione del kernel usata da CD di installazione nel posto
in cui genkernel cerca la configurazione del kernel di default:
</p>

<pre caption="Copiare la configurazione del kernel del CD di installazione">
# <i>zcat /proc/config.gz > /usr/share/genkernel/ppc/kernel-config-2.6</i>
</pre>

<p>
Se si usa firewire o USB per avviare, si deve aggiungere i moduli a initrd.
Modificare <path>/usr/share/genkernel/ppc/modules_load</path> e cambiare
<c>MODULES_FIREWIRE="ieee1394 ohci1394 sbp2"</c> per supporto firewire o
<c>MODULES_USB="usbcore ohci-hcd ehci-hcd usb-storage"</c> per supporto USB.
</p>

<p>
Compilare ora il proprio kernel eseguendo <c>genkernel --genzimage all</c>.
Per Pegasos, si deve usare una differente configurazione e creare una zImage
invece di vmlinux kernel usato su macchine Apple. Visto che <c>genkernel</c>
compila un kernel che supporta quasi tutto l'hardware disponibile questa
compilazione può essere un processo piuttosto lungo.
</p>

<p>
E' importante sapere anche che se la partizione dove il kernel dovrebbe essere
posto, non usa ext2 o ext3 come filesystem è necessario configurare
manualmente il kernel usando <c>genkernel --menuconfig --genzimage all</c>
e aggiungere il supporto per il filesystem scelto <e>nel</e> kernel
(cioè <e>non</e> come modulo). Gli utenti di EVMS2 o LVM2 probabilmente
vorranno aggiungere <c>--evms2</c> o <c>--lvm2</c> come argomenti.
</p>

<pre caption="Esecuzione di genkernel">
# <i>genkernel --genzimage all</i>
</pre>

<pre caption="Esecuzione di genkernel su Pegasos">
# <i>genkernel --genzimage --kernel-config=/usr/share/genkernel/ppc/Pegasos all</i>
</pre>

<p>
Una volta completato <c>genkernel</c>, viene creato un kernel completo di
moduli e <e>root disk iniziale</e> (initrd). Il kernel e initrd intervengono
quando si configura un boot loader. E' consigliabile dunque annotare il nome
del kernel e del initrd, poichè servono quando si scrive il file di
configurazione del bootloader. Initrd si avvia subito dopo il boot per
effettuare un rilevamento automatico dell'hardware (come nel CD di
installazione), prima che si avvii il sistema "reale". Assicurasi di copiare
gli argomenti di boot richiesti, sono necessari per un boot corretto con
genkernel.
</p>

<pre caption="Controllo dell'immagine del kernel e dell'initrd">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

<p>
Se si desidera che il sistema sia come l'ambiente del CD di installazione, si
dovrebbe emergere <c>coldplug</c> terminata l'installazione di Gentoo. Mentre
initrd rileva automaticamente l'hardware necessario per avviare il sistema,
<c>coldplug</c> autorileva tutto il resto. <c>coldplug</c> è disponibile come
pacchetto binario sul CD di pacchetti.
</p>

<pre caption="Emergere ed abilitare coldplug">
<comment>(Necessario farlo dopo l'installazione, durante le istruzioni di installazione di GRP)</comment>
# <i>emerge -k coldplug</i>
# <i>rc-update add coldplug boot</i>
</pre>

<p>
Se si desidera che il sistema abbia <c>hotplug</c>, lo si installi e imposti:
</p>

<pre caption="Emerge ed abilitare hotplug">
# <i>emerge hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>

<p>
Continuare l'installazione con <uri link="?part=1&amp;chap=8">
Configurazione del sistema</uri>.
</p>

</body>
</section>

</sections>
