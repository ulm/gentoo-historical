<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/handbook/hb-install-ppc-kernel.xml,v 1.24 2008/03/02 18:10:38 scen Exp $ -->

<sections>

<version>8.5</version>
<date>2008-01-12</date>

<section>
<title>Fuso Orario (Timezone)</title>
<body>

<p>
Innanzitutto è necessario selezionare il proprio fuso orario (timezone), in modo
che il sistema riconosca in che parte del globo è collocato. Individuare il
proprio fuso orario in <path>/usr/share/zoneinfo</path>, dopodichè copiarlo in
<path>/etc/localtime</path>. Si sconsiglia di utilizzare i fusi orari del tipo
<path>/usr/share/zoneinfo/Etc/GMT*</path> poichè i loro nomi non indicano le
zone che ci si aspetterebbe. Per esempio <path>GMT-8</path> indica GMT+8.
</p>

<pre caption="Abilitare le informazioni sul fuso orario (timezone)">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Per esempio GMT:)</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>

<section>
<title>Installare i sorgenti del kernel</title>
<subsection>
<title>Scegliere un Kernel</title>
<body>

<p>
Il cuore, attorno al quale sono sviluppate tutte le distribuzioni, è il Kernel
di Linux. E' la parte di software compresa tra i programmi e l'hardware. Gentoo
dà la possibilità ai suoi utenti di scegliere tra diversi sorgenti del kernel.
Una lista completa delle descrizioni dei kernel disponibili è consultabile nella
<uri link="http://www.gentoo.org/doc/it/gentoo-kernel.xml">Guida ai Kernel
Gentoo</uri>.
</p>

<p>
Per l'architettura PPC si suggerisce di usare <c>gentoo-sources</c>, un kernel
recente del ramo 2.6.
</p>

<pre caption="Installare i sorgenti del kernel">
# <i>emerge gentoo-sources</i>
</pre>

<p>
Se si dà un'occhiata a <path>/usr/src</path>, si dovrebbe vedere un link
simbolico chiamato <path>linux</path>, che punta al sorgente del kernel. In
questo caso il sorgente del kernel installato punta a <c>gentoo-sources-<keyval
id="kernel-version"/></c>, ma ricordarsi che la versione potrebbe essere
diversa:
</p>

<pre caption="Il link simbolico al codice sorgente del kernel">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           22  Mar 18 16:23 /usr/src/linux -&gt; linux-<keyval id="kernel-gentoo"/>
</pre>

<p>
Ora si procede a configurare e compilare i sorgenti del kernel. Allo scopo è
possibile utilizzare <c>genkernel</c>, che compila un kernel generico come
quello usato dal CD di installazione. Prima però viene trattata la
configurazione "manuale", poiché è il miglior modo di ottimizzare l'ambiente.
</p>

<p>
Se si desidera configurare manualmente il kernel, continuare con
<uri link="#manual">Predefinito: Configurazione manuale</uri>. Se si desidera
usare <c>genkernel</c>, continuare con <uri link="#genkernel">Alternativa: Usare
genkernel</uri>.
</p>

</body>
</subsection>
</section>

<section id="manual">
<title>Configurazione manuale</title>
<subsection>
<title>Introduzione</title>
<body>

<p>
La configurazione manuale del kernel è spesso considerata la parte più difficile
che ogni utente Linux incontra. Non è assolutamente vero: dopo aver configurato
un paio di kernel, l'operazione risulta semplice.
</p>

<p>
Tuttavia una cosa <e>è</e> vera: quando si comincia una configurazione manuale
del kernel si deve conoscere il proprio sistema. La maggior parte delle
informazioni possono essere raccolte installando pciutils (<c>emerge
pciutils</c>) che contiene <c>lspci</c>. Si potrà usare <c>lspci</c> con
l'ambiente in cui si è effettuato il chroot. Si possno ignorare gli errori
<e>pcilib</e> (come pcilib: cannot open /sys/bus/pci/devices). E' possibile
anche eseguire <c>lspci</c> da un ambiente in cui <e>non si è effettuato il
chroot</e>. I risultati sono gli stessi. Si può anche eseguire <c>lsmod</c> per
vedere che moduli del kernel usa il CD di installazione (potrebbe fornire un
buon suggerimento su cosa abilitare). Un altro posto da vedere per vedere quali
componenti abilitare è il log dei messaggi del kernel dopo aver completato il
boot con successo. Digitare <c>dmesg</c> per vedere i messaggi del kernel.
</p>

<p>
Andare nella directory dei sorgenti del kernel. E' importante configurare subito
un kernel in grado di avviare la maggior parte delle macchine PowerPC a 32 bit,
eseguendo <c>make pmac32_defconfig</c>. Dopo che la configurazione predefinita è
stata generata, digitare <c>make menuconfig</c> per visualizzare un menu di
configurazione basato su ncurses.
</p>

<pre caption="Aprire menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make pmac32_defconfig</i>
# <i>make menuconfig</i>
</pre>

<p>
Vengono visualizzate molte sezioni di configurazione. Ecco ora alcune opzioni
che devono essere attivate (altrimenti Gentoo non può funzionare, o non funziona
correttamente senza modifiche aggiuntive).
</p>

</body>
</subsection>
<subsection>
<title>Attivare le opzioni indispensabili</title>
<body>

<p>
Prima di tutto, si deve attivare l'uso di codice/driver di sviluppo e
sperimentale. Se non lo si fa, non si ha la possibilità di utilizzare qualche
codice/driver molto importante:
</p>

<pre caption="Selezionare codice/driver sperimentale">
General setup ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>

<p>
Andare su <c>File Systems</c> e selezionare il supporto per i filesystem
utilizzati. <e>Non</e> compilare tali supporti come moduli, altrimenti Gentoo
non può montare le partizioni. Selezionare anche <c>/proc file system</c> e
<c>Virtual memory</c>. Assicurarsi di abilitare il supporto per le partizioni
Amiga se si sta usando un Pegasos, o per le partizioni Macintosh se si sta
usando un Apple.
</p>

<pre caption="Selezionare i filesystem">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
<comment>(/proc potrebbe già essere forzato sulla propria configurazione, in tale caso viene visualizzato ---)</comment>
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)
  Partition Types ---&gt;
    [*] Advanced partition support
    [*] Amiga partition table support
    [*] Macintosh partition map support

<comment>(Selezionare una o più delle seguenti, secondo necessità)</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

<p>
Gli utenti delle macchine NewWorld e OldWorld hanno bisogno anche del supporto
HFS. Gli utenti OldWorld ne hanno bisogno per copiare i kernel compilati nella
partizione MacOS. Gli utenti NewWorld lo usano per configurare la partizione
speciale Apple_Bootstrap:
</p>

<pre caption="Attivazione del supporto HFS">
File Systems ---&gt;
  Miscellaneous filesystems ---&gt;
    &lt;M&gt; Apple Macintosh file system support
    &lt;M&gt; Apple Extended HFS file system support
</pre>

<p>
Se si utilizza PPPoE per connettersi a Internet o si usa un modem dial-up, si ha
bisogno delle seguenti opzioni nel kernel:
</p>

<pre caption="Selezionare i driver necessari per PPPoE">
Device Drivers ---&gt;
  Network device support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Le due opzioni di compressione non sono dannose, ma neppure necessarie; lo
stesso vale per <c>PPP over Ethernet</c>, che potrebbe essere usata soltanto da
<c>ppp</c> se configurato in modalità kernel.
</p>

<p>
Non dimenticare di includere nel kernel il supporto per la propria scheda di
rete. La maggior parte degli Apple più recenti usa il driver SunGEM mentre
quelli più vecchi necessitano di BMAC.
</p>

<pre caption="Selezionare il driver di rete">
Device Drivers ---&gt;
Network device support ---&gt;
  Ethernet (10 or 100Mbit) ---&gt;
    [*] Ethernet (10 or 100Mbit)
    &lt;*&gt;   Generic Media Independent Interface device support
    &lt;*&gt;   MACE (Power Mac ethernet) support
    &lt;*&gt;   BMAC (G3 ethernet) support
    &lt;*&gt; Sun GEM support
</pre>

<p>
Al momento la "full preemption" del kernel è ancora instabile su PPC e può
causare fallimenti di compilazione e crash improvvisi. E' <e>fortemente</e>
raccomandato di non usare questa caratteristica. Sia <e>Voluntary Preemption</e>
che <e>No Forced Preemption</e> dovrebbero invece funzionare correttamente.
</p>

<pre caption="Assicurare che Preemptible Kernel Option non sia selezionata">
Kernel options ---&gt;
<comment>(Select One)</comment>
  Preemption Model
    (X) No Forced Preemption (Server)
    (X) Voluntary Kernel Preemption (Desktop)
</pre>

<p>
Se si avvia da Firewire, si deve abilitare queste opzioni. Se non si desidera
compilarle nel supporto, si dovranno includere questi moduli e le loro
dipendenze in un initrd.
</p>

<pre caption="Abilitare il supporto per dispositivi firewire su boot">
Device Drivers ---&gt;
  IEEE 1394 (FireWire) support ---&gt;
    &lt;*&gt; IEEE 1394 (FireWire) support
    &lt;*&gt;   OHCI-1394 support
    &lt;*&gt;   SBP-2 support (Harddisks etc.)
</pre>

<p>
Se si avvia da USB, si devono abilitare queste opzioni. Se non si desidera
compilarle nel supporto, si dovranno includere questi moduli e le loro
dipendenze in un initrd.
</p>

<pre caption="Abilitare il supporto per dispositivi USB su boot">
Device Drivers ---&gt;
  USB support ---&gt;
    &lt;*&gt; Support for Host-side USB
    &lt;*&gt;   OHCI HCD support
    &lt;*&gt;   USB Mass Storage support
</pre>

<p>
Non togliere il supporto per il kernel framebuffer poichè è richiesto per un
boot corretto. Se si usa un chipset basato su NVIDIA, si dovrebbe usare il
framebuffer Open Firmware. Se si usa un chipset basato su ATI, si dovrebbe
selezionare il driver framebuffer basato sul proprio chipset (Mach64, Rage128
o Radeon).
</p>

<pre caption="Scegliere un Framebuffer Driver">
Device Drivers ---&gt;
  Graphics support ---&gt;
    &lt;*&gt; Support for frame buffer devices
    [*] Open Firmware frame buffer device support
    &lt;*&gt; ATI Radeon display support
    &lt;*&gt; ATI Rage128 display support
    &lt;*&gt; ATI Mach64 display support
    Console display driver support ---&gt;
      &lt;*&gt; Framebuffer Console support
</pre>

<note>
Se si seleziona più di un device framebuffer, potrebbe venire selezionato in
modo predefinito un driver non ottimale. Usare solo un dispositivo framebuffer
o specificare quale usare aggiungendo ai parametri passati al kernel la
modalità video, per esempio <c>video=radeonfb</c>.
</note>

<p>
Una volta terminata la configurazione del kernel continuare con la sua <uri
link="#compiling">Compilazione e Installazione</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Compilazione e Installazione</title>
<body>

<p>
Ora che il kernel è configurato, il passo successivo è la compilazione e
l'installazione. Uscire dal menu di configurazione ed eseguire i seguenti
comandi:
</p>

<pre caption="Compilare il kernel">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Una volta terminata la compilazione, copiare l'immagine del kernel in
<path>/boot</path> come mostrato in seguito. Se si utilizza una partizione di
boot separata, come in Pegasos, assicurarsi che sia montata. Se si sta usando
BootX per avviare, il kernel viene copiato in seguito.
</p>

<p>
Yaboot e BootX si aspettano l'uso di un kernel non compresso, non come molti
altri bootloader. Il kernel non compresso è chiamato vmlinux ed è posto in
<path>/usr/src/linux</path> dopo che il kernel ha finito la compilazione. Se si
sta usando un sistema Pegasos, il Pegasos firmware richiede un kernel compresso
chiamato zImage.chrp che si trova su
<path>/usr/src/linux/arch/powerpc/boot/images</path>.
</p>

<pre caption="Installazione del kernel">
# <i>cd /usr/src/linux</i>
<comment>notare che la propria versione potrebbe essere differente</comment>
<comment>(Apple/IBM)</comment>
 # <i>cp vmlinux /boot/<keyval id="kernel-name"/></i>
<comment>(Pegasos)</comment>
# <i>cp arch/powerpc/boot/images/zImage /boot/&lt;kernel-version&gt;</i>
</pre>

<p>
Adesso continuare con <uri link="#kernel_modules">Installare i moduli del Kernel
separati</uri>.
</p>

</body>
</subsection>
</section>

<section id="kernel_modules">
<title>Installare i moduli del Kernel separati</title>
<subsection>
<title>Configurare i moduli</title>
<body>

<p>
E' possibile elencare tutti i moduli che si desidera caricare automaticamente in
<path>/etc/modules.autoload.d/kernel-2.6</path>. E' anche possibile specificare
opzioni aggiuntive per i moduli, se necessario.
</p>

<p>
Per vedere tutti i moduli disponibili, eseguire il comando <c>find</c>. Non
dimenticarsi di sostituire "&lt;versione kernel&gt;" con la versione del kernel
appena compilato:
</p>

<pre caption="Vedere tutti i moduli disponibili">
# <i>find /lib/modules/&lt;versione kernel&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Per esempio, per caricare automaticamente il modulo <c>3c59x.ko</c>, modificare
il file <path>kernel-2.6</path> e inserire il nome del modulo, uno per linea:
</p>

<pre caption="Modificare /etc/modules.autoload.d/kernel-2.6">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Continuare l'installazione con <uri link="?part=1&amp;chap=8">Configurazione del
sistema</uri>.
</p>

</body>
</subsection>
</section>

<section id="genkernel">
<title>Alternativa: Usare genkernel</title>
<body>

<p>
Adesso che sono stati installati i sorgenti del kernel si può utilizzare lo
script <c>genkernel</c> per configurarlo e compilarlo automaticamente.
<c>genkernel</c> configura il kernel in modo quasi identico a come è configurato
quello del CD di installazione. Infatti quando si usa <c>genkernel</c> per
compilare il kernel, il sistema rileva tutto l'hardware al boot, proprio come il
CD di installazione. Poichè genkernel non richiede nessuna configurazione
manuale del kernel, questa è una soluzione ideale per quegli utenti che hanno
qualche difficoltà nel compilarsi il kernel da soli.
</p>

<p>
Ecco come usare genkernel. Per prima cosa si deve emergere l'ebuild di
genkernel:
</p>

<pre caption="Emergere genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Copiare la configurazione del kernel usata da CD di installazione nel posto in
cui genkernel cerca la configurazione predefinita del kernel:
</p>

<pre caption="Copiare la configurazione del kernel del CD di installazione">
# <i>zcat /proc/config.gz > /usr/share/genkernel/ppc/kernel-config-2.6</i>
</pre>

<p>
Se si usa firewire o USB per avviare, si devono aggiungere i moduli a initrd.
Modificare <path>/usr/share/genkernel/ppc/modules_load</path> e cambiare
<c>MODULES_FIREWIRE="ieee1394 ohci1394 sbp2"</c> per supporto firewire o
<c>MODULES_USB="usbcore ohci-hcd ehci-hcd usb-storage"</c> per supporto USB.
</p>

<p>
Prima di compilare i sorgenti, si deve fare un piccolo cambiamento in fstab. Il
resto delle opzioni di fstab è spiegato più avanti. Se non è stata creata una
partizione di boot separata (NON confondersi con la partizione bootstrap),
rimuovere da <path>/etc/fstab</path> la riga che fa riferimento a
<path>/boot</path>. Questo è necessario sulla maggior parte dei sistemi Apple.
</p>

<pre caption="Rimuovere /boot da /etc/fstab su sistemi senza una partizione di
boot">
# <i>nano -w /etc/fstab</i>
<comment>Rimuovere la riga seguente</comment>
/dev/BOOT               /boot           ext2            noauto,noatime  1 2
</pre>

<p>
Compilare ora il proprio kernel eseguendo <c>genkernel --genzimage all</c>. Per
Pegasos, si deve usare una differente configurazione e creare una zImage invece
di vmlinux kernel usato su macchine Apple. Visto che <c>genkernel</c> compila un
kernel che supporta quasi tutto l'hardware disponibile questa compilazione può
essere un processo piuttosto lungo.
</p>

<p>
E' importante sapere anche che se la partizione dove il kernel dovrebbe essere
posto non usa ext2 o ext3 come filesystem è necessario configurare manualmente
il kernel usando <c>genkernel --menuconfig all</c> e aggiungere il supporto per
il filesystem scelto <e>nel</e> kernel (cioè <e>non</e> come modulo). Gli utenti
di EVMS2 o LVM2 probabilmente vorranno aggiungere <c>--evms2</c> o <c>--lvm2</c>
come argomenti.
</p>

<pre caption="Esecuzione di genkernel">
# <i>genkernel all</i>
</pre>

<pre caption="Esecuzione di genkernel su Pegasos">
# <i>genkernel --genzimage --kernel-config=/usr/share/genkernel/ppc/Pegasos all</i>
</pre>

<p>
Una volta completato <c>genkernel</c>, viene creato un kernel completo di moduli
e <e>root disk iniziale</e> (initrd). Il kernel e initrd intervengono quando si
configura un boot loader. E' consigliabile dunque annotare il nome del kernel e
del initrd, poichè servono quando si scrive il file di configurazione del
bootloader. Initrd si avvia subito dopo il boot per effettuare un rilevamento
automatico dell'hardware (come nel CD di installazione), prima che si avvii il
sistema "reale". Assicurasi di copiare gli argomenti di boot richiesti, sono
necessari per un boot corretto con genkernel.
</p>

<pre caption="Controllo dell'immagine del kernel e dell'initrd">
<comment>Notare che la propria versione potrebbe essere differente</comment>
# <i>ls /boot/kernel-genkernel-ppc-<keyval id="kernel-gentoo"/> /boot/initramfs-genkernel-ppc-<keyval id="kernel-gentoo"/></i>
</pre>

<p>
Continuare l'installazione con <uri link="?part=1&amp;chap=8">Configurazione del
sistema</uri>.
</p>

</body>
</section>
</sections>