<?xml version = '1.0' encoding = 'UTF-8'?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<guide>
<title>Guida al Virtual Mailhosting System</title>
<author title="Autore" >
<mail link="ken@kickasskungfu.com" >Ken Nowack</mail>
</author>
<author title="Autore" >
<mail link="ezra@kickasskungfu.com" >Ezra Gorman</mail>
</author>
<author title="Traduttore"><mail link="paolo@pao.lo.it">Paolo Gabrielli</mail></author>
<author title="Traduttore" >
Team Italiano
</author>
<abstract>Questo documento illustra come creare un sistema di virtual mailhosting basato su postfix, mysql, courier-imap, e cyrus-sasl. </abstract>
<version>1.0</version>
<date>7 Gennaio 2003</date>
<chapter>
<title>Introduzione</title>
<section>
<body>
<p>Per la maggior parte degli utenti gentoo, un semplice client di posta e fetchmail sono sufficenti. Comunque, se sul vostro
sistema ospitate un dominio, avrete bisogno di un MTA (Mail Transfer Agent) in tutto il suo splendore. E se state ospitando diversi domini,
allora sicuramente avrete bisogno di qualcosa di più robusto per gestire tutte le email dei vostri utenti. Questo sistema è
stato progettato per essere una soluzione elegante a questo problema.</p>
 
<p>Un sistema di mail virtuale deve essere in grado di gestire email per numerosi domini con molteplici utenti su diverse
interfacce. Questo presenta alcune problematiche alle quali far fronte. Per esempio, cosa fare se avete due utenti su domini
differenti che vogliono lo stesso nome utente? Se fornite accesso imap e autenticazione smtp, come combinare i diversi
demoni di autenticazione in un sistema unico? Come fate a fornire sicurezza ai numerosi componenti che comprende il sistema?
Come gestite tutto?</p>
<p>Questo howto vi mostrerà come configurare un sistema di posta capace di gestire email per tanti domini quanti ne può
gestire il vostro hardware, supportare utenti di posta virtuale senza bisogno di account di shell, ha nomi utenti specifici
per il dominio, può autenticare client web, imap, smtp e pop3 tramite un unico database, utilizzare ssl come layer di
trasporto sicuro dei dati, ha un'interfaccia web, può gestire mailing list per ogni dominio sulla macchina, ed è controllato
da un database MySQL semplice, carino e centralizzato. </p>
<p>Ci sono molteplici modi di configurare un sistema di virtual mailhosting. Con tutte le opzioni disponibili, forse un
altro modo risulterà migliore per le vostre esigenze specifiche. Cercate su <uri>http://www.qmail.org</uri> e
<uri>http://www.exim.org</uri> per esplorare le vostre opzioni. </p>
<p>I seguenti pacchetti sono usati in questa configurazione:
		
		apache, courier-imap, pam_mysql, postfix, mod_php, mod_ssl, phpmyadmin, squirrelmail, cyrus-sasl, mysql, php,
		e mailman.</p>
<p>Assicuratevi di abilitare le seguenti variabili USE dentro a <path>/etc/make.conf</path> prima di compilare i pacchetti:
<c>USE=&quot;mysql imap libwww maildir sasl ssl&quot;</c>. Altrimenti molto probabilmente dovrete ricompilare alcune cose per
avere il supporto necessario per tutti i protocolli. Inoltre, è una buona idea disabilitare ogni altra variabile
per la posta e la rete, come per esempio ipv6.</p>
<impo>Questo howto è stato scritto per postfix-2.0.x. Se state usando una versione di postfix &lt; 2 alcune variabili in
questo documento saranno diverse. Vi raccomandiamo di aggiornare il vostro postfix. Anche altri pacchetti in questo
howto sono sensibili alla versione. Per problemi riguardo questo vi avvertiamo di leggere la documentazione inclusa nei pacchetti.
</impo>
<impo>Avete bisogno di un nome di dominio per far girare un server di posta pubblico o almeno di un MX record per un
dominio.
Idealmente avrete bisogno di avere il controllo di almeno due domini per avvantaggiarvi delle funzionalità di dominio
virtuali.</impo>
<impo>Assicuratevi che il file <path>/etc/hostname</path> sia configurato con il giusto hostname per il vostro server
di posta. Verificate che l'hostname sia settato correttamente con il comando <c>hostname</c>. Verificate anche che non ci
siano voci che sono in conflitto nel file <path>/etc/hosts</path>.</impo>
<note>Vi raccomandiamo di leggere per intero questo documento e di familiarizzarvi con tutti i passi prima di provare
ad installare. Se avete dei problemi con uno di questi passi, controllate la guida alla risoluzione in fondo a questo
documento. Inoltre, non tutti i pacchetti nominati sono necessari: questa configurazione è molto flessibile. Per esempio,
se non avete bisogno di una interfaccia web, potete saltare la sezione che riguarda squirrelmail.</note>
</body>
</section>
</chapter>
<chapter>
<title>Le basi del Postfix</title>
<section>
<body>
<pre caption="Installare postfix" ># <i>emerge postfix</i>
</pre>
<warn>Verificate di non avere installato nessun altro MTA, come ssmtp, exim o qmail, o avrete sicuramente GRANDI problemi.</warn>
<p>Una volta installato postfix, è tempo di configurarlo. Cambiate le seguenti opzioni nel file <path>/etc/postfix/main.cf</path>:</p>
<pre caption="/etc/postfix/main.cf" >
        myhostname = $host.nome.dominio
        mydomain = $nome.dominio
        inet_interfaces = all 
        mydestination = $miohostname, localhost.$miodominio $miodominio
        mynetworks = mio.ip.che.funziona/24, 127.0.0.0/8
        home_mailbox = .maildir/
        local_destination_concurrency_limit = 2 
        default_destination_concurrency_limit = 10 </pre>
<p>Poi cambiate le seguenti opzioni dentro a <path>/etc/postfix/master.cf</path>. Questo attiverà l'output verboso per poter
fare debugging:</p>
<pre caption="/etc/postfix/master.cf" >
		# service type  private unpriv  chroot  wakeup  maxproc command + args
		#
		#               (yes)   (yes)   (yes)   (never) (50)
		#
		==========================================================================
		smtp      inet  n       -       n       -       -       smtpd -v
		
		<codenote>Aggiungete semplicemente la <c>-v</c> dopo smtpd nella riga sopra</codenote>
</pre>
<p>Poi, editate <path>/etc/mail/aliases</path> per aggiungere i vostri alias locali. Ci dovrebbe essere almeno un alias
per l'utente root così: <c>root:   vostro@indirizzo.email</c>.</p>
<pre caption="Avviare postfix per la prima volta" >
		# <i>/usr/bin/newaliases </i>
<codenote>Questo installerà i nuovi alias. Dovete fare soltanto questo</codenote>
<codenote>quando aggiornate o installate gli alias.</codenote>
		
		# <i>/etc/init.d/postfix start</i>
</pre>
<p>Ora che postfix sta girando, avviate il vostro client di posta favorito e mandatevi una mail. Io uso <c>mutt</c>
per tutta la posta da console. Verificate che postfix consegni la posta all'utente locale, e una volta fatto, passiamo
al prossimo passo.</p>
<note>Raccomando fortemente che voi verifichiate che questa configurazione di base del postfix
sia funzionante prima di andare al prossimo passo dell'howto. </note>
</body>
</section>
</chapter>
<chapter>
<title>Courier-imap</title>
<section>
<body>
<pre caption="Installare courier-imap" ># <i>emerge courier-imap</i>
</pre>
<pre caption="Configurazione Courier-imap" >
		# <i>cd /etc/courier-imap </i>
<codenote>Se volete usare le capacità ssl di courier-imap o pop3, </codenote>
<codenote>avrete bisogno di creare certificati per questo scopo.</codenote>
<codenote>Questo passo è raccomandato. Se non volete usare ssl, saltate questo passo.</codenote>
		
		# <i>nano -w pop3d.cnf</i>
		# <i>nano -w imapd.cnf </i>
<codenote>Cambiate i parametri C, ST, L, CN, e l'email per adeguarli al vostro server.</codenote>
		
		# <i>mkpop3dcert</i>
		# <i>mkimapdcert</i>
</pre>
<pre caption="Avviate i servizi courier di cui avete bisogno." >
		# <i>/etc/init.d/courier-imapd start</i>
		# <i>/etc/init.d/courier-imapd-ssl start</i>
		# <i>/etc/init.d/courier-pop3d start</i>
		# <i>/etc/init.d/courier-pop3d-ssl start</i>
</pre>
<p>Avviate il vostro client di posta preferito e assicuratevi che tutte le connessioni che avete avviato
funzionino per ricevere e mandare posta. Ora che le cose di base funzionano, stiamo per fare diverse cose contemporaneamente
per avere il resto del sistema funzionante. Ancora, verificate che funzionino tutte le cose che abbiamo già installato
prima di andare avanti.</p>
</body>
</section>
</chapter>
<chapter>
<title>Cyrus-sasl</title>
<section>
<body>
<p>Ora stiamo per installare cyrus-sasl. Sasl servirà per passare a pam le vostre variabili di autenticazione, le quali
verranno poi passate al mysql per autenticare gli utenti smtp.
Per questo howto, non proveremo a verificare che sasl funzioni finchè mysql non sarà configurato e conterrà un utente di
prova. Questo è giusto visto che ci autenticheremo tramite mysql alla fine.</p>
<note>Ora per qualche ragione, sasl non andrà con pam e il file shadow.
Ho sbattuto la testa su questo problema per tanto tempo.
Se qualcuno conosce il perchè sasl non autentica con il file shadow nella sua corrente incarnazione gentoo,
per favore <mail link="ken@kickasskungfu.com" >mi mandi una email</mail> visto che mi piacerebbe conoscere la soluzione
a questo problema.</note>
<p>Per installare sasl ci vorrà qualche hack.
Aprite il file di ebuild e modificate le variabili di configurazione per disabilitare digest e cram.
Ecco perchè: i client di posta cercheranno di autenticarsi con il <e>primo</e> metodo a loro presentato, di solito cram-md5.
Visto che non andremo a configurare questa cosa, l'autenticazione cram fallirà e la maggior parte dei client solitamente
non proverà altri metodi.
Questo per lo più è dovuto al modo in cui i client di posta sono fatti.
Così disabiliteremo i metodi di autenticazione che non useremo per non confondere i client là fuori.</p>
<pre caption="Configurare e installare l'ebuild cyrus-sasl" >
		# <i>cd /usr/portage/dev-libs/cyrus-sasl</i>
		# <i>nano -w cyrus-sasl.$versionecorrente.ebuild </i>
<codenote>Disabilitate digest e cram come mostrato sotto.</codenote>
		
		econf \
				--with-saslauthd=/var/lib/sasl2 \
				--with-pwcheck=/var/lib/sasl2 \
				--with-configdir=/etc/sasl2 \
				--with-openssl \
				--with-plugindir=/usr/lib/sasl2 \
				--with-dbpath=/etc/sasl2/sasldb2 \
				--with-des \
				--with-rc4 \
				--disable-krb4 \
				--with-gnu-ld \
				--enable-shared \
				--disable-sample \
				--enable-login \
				--disable-cram \
				--disable-digest \
				${myconf} || die &quot;bad ./configure&quot;
		
		# <i>USE='-ldap -mysql' emerge cyrus-sasl </i>
<codenote>Non abbiamo ldap e non useremo le capacità mysql di sasl </codenote>
<codenote>così le disabiliteremo per questa compilazione.</codenote>
</pre>
<p>Poi, editate <path>/var/lib/sasl2/smtp.conf</path>.</p>
<pre caption="Avviare sasl" >
		# <i>nano -w /var/lib/sasl2/smtp.conf</i>
		pwcheck_method: saslauthd
	
		# <i>/etc/init.d/saslauthd start</i>
</pre>
</body>
</section>
</chapter>
<chapter>
<title>Certificati SSL per Postfix e Apache</title>
<section>
<body>
<p>Ora andremo a fare un set di certificati ssl per postfix e apache.</p>
<pre>
		# <i>cd /usr/lib/ssl/</i>
		# <i>nano -w openssl.cnf</i>
<codenote>Cambiate i seguenti valori con quelli per il vostro dominio:</codenote>
		
		nazione_default
		statoO_Provincia_default 
		località_default
		azienda_default
		nome_default
		indirizzoEmail_default.
		
		<codenote>Se le variabili non sono già presenti, aggiungetele semplicemente nel posto giusto.</codenote>

		
		# <i>cd misc</i>
		# <i>nano -w CA.pl </i>
<codenote>Dobbiamo aggiungere -nodes al codice # create a certificate (crea un certificato n.d.T.) e </codenote>
<codenote>#create a certificate request (crea una richiesta di certificato n.d.T.) per avere i nostri nuovi</codenote>
<codenote>certificati ssl caricati senza una password. Altrimenti quando farete il reboot</codenote>
<codenote>i vostri certificati ssl non saranno disponibili.</codenote>
		
		# create a certificate (crea un certificato n.d.T.)
		system (&quot;$REQ -new -nodes -x509 -keyout newreq.pem -out newreq.pem $DAYS&quot;);
		
		# create a certificate request (crea una richiesta di certificato n.d.T.)
		system (&quot;$REQ -new -nodes -keyout newreq.pem -out newreq.pem $DAYS&quot;);
				
		# <i>./CA.pl -newca</i>
		# <i>./CA.pl -newreq</i>
		# <i>./CA.pl -sign</i>
		# <i>cp newcert.pem /etc/postfix</i>
		# <i>cp newreq.pem /etc/postfix</i>
		# <i>cp demoCA/cacert.pem /etc/postfix </i>
<codenote>Ora faremo la stessa cosa per apache</codenote>

		
		# <i>openssl req -new > new.cert.csr</i>
		# <i>openssl rsa -in privkey.pem -out new.cert.key</i>
		# <i>openssl x509 -in new.cert.csr -out new.cert.cert -req -signkey new.cert.key -days 365 </i>
<codenote>Per ora lasciamo qui i certificati ottenuti.</codenote>
<codenote>Li installeremo dopo aver installato Apache.</codenote>
</pre>
</body>
</section>
</chapter>
<chapter>
<title>Aggiungere il supporto SSL e SASL a Postfix</title>
<section>
<body>
<p>Ora editate il file di configurazione di postfix per metterlo a conoscenza delle sue nuove capacità sasl e ssl.
Aggiungete i seguenti parametri alla fine del file dove saranno più facili da trovare.</p>
<pre caption="/etc/postfix/main.cf" >
		# <i>nano -w /etc/postfix/main.cf</i> 
		
		smtpd_sasl_auth_enable = yes
		smtpd_sasl2_auth_enable = yes
		smtpd_sasl_security_options = noanonymous
		broken_sasl_auth_clients = yes 
		smtpd_sasl_local_domain =
		
		<codenote>Le opzioni broken_sasl_auth_clients e il metodo di autenticazione di login</codenote>
<codenote>sono solamente per outlook e outlook express e non sono documentate.</codenote>
<codenote>Non trovate forte dover modificare del software con hack per far funzionare programmi stupidi e fatti male
della M$?</codenote>
<codenote>smtpd_sasl_local_domain aggiunge un nome di dominio ai client usando</codenote>
<codenote>smtp-auth. Assicuratevi di lasciarlo in bianco o i vostri nomi utente</codenote>
<codenote>saranno storpiati dal postfix e non saranno in grado di autenticarsi.</codenote>

		smtpd_recipient_restrictions =
			permit_sasl_authenticated,
			permit_mynetworks,
			reject_unath_destination
			
		
		smtpd_use_tls = yes
		#smtpd_tls_auth_only = yes
		smtpd_tls_key_file = /etc/postfix/newreq.pem
		smtpd_tls_cert_file = /etc/postfix/newcert.pem
		smtpd_tls_CAfile = /etc/postfix/cacert.pem
		smtpd_tls_loglevel = 3
		smtpd_tls_received_header = yes
		smtpd_tls_session_cache_timeout = 3600s
		tls_random_source = dev:/dev/urandom
		
		<codenote>smtpd_tls_auth_only è senza commento per facilitare il testing del sistema. </codenote>
<codenote>In seguito potrete riabilitarlo se lo vorrete.</codenote>
		
		# <i>postfix reload</i>
</pre>
<p>Ora che andremo a verificare che le configurazioni che abbiamo aggiunto sono state accettate da postfix.</p>
<pre caption="Verificare sasl e il supporto tls" >
		# <i>telnet localhost 25</i>

		Trying 127.0.0.1...
		Connected to localhost.
		Escape character is '^]'.
		220 mail.domain.com ESMTP Postfix
		<i>EHLO domain.com</i>
		250-mail.domain.com
		250-PIPELINING
		250-SIZE 10240000
		250-VRFY
		250-ETRN
		250-STARTTLS
		250-AUTH LOGIN PLAIN OTP
		250-AUTH=LOGIN PLAIN OTP
		250-XVERP
		250 8BITMIME
		<i>^]</i>
		telnet> <i>quit</i>
</pre>
<p>Verificate che le righe AUTH e STARTTLS sopra, ora appaiano nella vostra installazione di postfix.
Come detto prima, ora AUTH non funzionerà.
Questo perchè sasl cercherà di autenticarsi verso il suo sasldb, invece del file shadow per qualche sconosciuta ragione,
che non abbiamo configurato. Così andremo avanti e configureremo mysql per contenere tutte le informazioni di autenticazione
e dei domini viruali.
		</p>
</body>
</section>
</chapter>
<chapter>
<title>MySQL</title>
<section>
<body>
<p>Ora stiamo per installare e configurare MySQL. Avrete bisogno del file di dump <uri link="http://kickasskungfu.com/~ken/genericmailsql.sql" >
genericmailsql.sql</uri> per questo passo.</p>
<pre caption="Installare e configurare MySQL" >
		# <i>emerge mysql</i>

		# <i>/usr/sbin/mysql_install_db </i>
<codenote>dopo aver eseguito questo comando seguite le indicazioni sullo schermo</codenote>
<codenote>per aggiungere una password di root con mysql,</codenote>
<codenote>non mysqladmin, altrimenti il vostro db sarà aperto a tutti.</codenote>
		
		# <i>/etc/init.d/mysql start</i>
		# <i>mysqladmin -u root -p create mailsql</i>
		# <i>mysql -u root -p --opt mailsql &lt; genericmailsql.sql</i>

		# <i>mysql -u root -p mysql</i>
		mysql> <i>GRANT SELECT,INSERT,UPDATE,DELETE</i>
		    ->     <i>ON mailsql.*</i>
		    ->     <i>TO mailsql@localhost</i>
		    ->     <i>IDENTIFIED BY '$password';</i>

		    ->     <i>quit</i>
<codenote>Verificate che il nuovo utente mailsql possa connettersi al server mysql.</codenote>
		
		# <i>mysql -u mailsql -p mailsql</i>
</pre>
<p>Il vostro nuovo database ha valori di default e tabelle configurate per due domini. Le seguenti tabelle sono incluse:
		<ul>
<li>alias - alias locali e informazioni alias di mailman.</li>
<li>relocated - mappe riallocate di indirizzi email di utenti</li>
<li>transport - informazioni di default per il trasporto di mail per tutti i domini che ospitate</li>
<li>users - informazioni sugli account di tutti gli utenti</li>
<li>virtual - mappe degli alias delle mail dei domini virtuali</li>
</ul>
</p>
<pre caption="esempio di tabella alias" >
		 id   alias    destination
		 1    root     foo@bar.com
		 2  postmaster foo@bar.com
		</pre>
<pre caption="esempio di tabella user" >
		 id email            clear     name     uid     gid     homedir     maildir                                quota  postfix
		 10 foo@virt-bar.org $password realname virtid  virtid  /home/vmail /home/vmail/virt-bar.org/foo/.maildir/        y
		 13 foo@bar.com      $password realname localid localid /home/foo   /home/foo/.maildir/                           y
		</pre>
<pre caption="esempio di tabella transport" >
		 id   domain       destination
		 1    bar.com      local:
		 2    virt-bar.org virtual:
		</pre>
<pre caption="esempio di tabella virtual" >
		 id   email            destination
		 3   root@virt-bar.org other@email.address
		</pre>
</body>
</section>
</chapter>
<chapter>
<title>Apache e phpMyAdmin</title>
<section>
<body>
<p>Ora cofigureremo apache e aggiungeremo un'interfaccia per interagire con il database più facilmente. </p>
<pre caption="Configurare apache e phpmyadmin" >
		# <i>emerge apache mod_php mod_ssl phpmyadmin</i>
</pre>
<p>Ci sono una moltitudine di guide su come configurare apache con il php.  Come questa: 
<uri>http://www.linuxguruz.org/z.php?id=31</uri>.
Ci sono anche numerosi post su <uri>http://forums.gentoo.org</uri> che dettagliano come risolvere problemi con
l'installazione (cercate 'apache php'). Così, come detto, non copriremo qui questo problema. Installate e configurate
apache e php, poi continuate con questo howto. Ora una parola ai saggi: usate .htaccess nella directory in cui metterete
phpmyadmin. Se non lo fate, i motori di ricerca arriveranno e idicizzeranno la pagina così ogni persona sarà in grado
di trovare la vostra pagina phpmyadmin tramite google e saranno in grado di apportare cambiamenti al vostro database
come vogliono il che <e>NON E' COSA BUONA!</e>. Ci sono molti howto sull'argomento incluso:
<uri>http://docs.csoft.net/micro/black-htaccess.html</uri>.</p>
<p>Ora installaremo in Apache i certificati che abbiamo fatto in precedenza.
Le direttive SSL di Apache di cui avrete bisogno per usare i certificati ottenuti sono:
		<ul>
<li>SSLCertificateFile /path/verso/i/certificati/new.cert.cert</li>
<li>SSLCertificateKeyFile /path/verso/i/certificati/new.cert.key</li>
</ul>
</p>
<pre caption="Installare i certificati SSL su Apache" >
		# <i>cp /usr/lib/ssl/misc/new.cert.cert /etc/apache/conf/ssl/</i>
		# <i>cp /usr/lib/ssl/misc/new.cert.key /etc/apache/conf/ssl/</i>
		# <i>nano -w /etc/apache/conf/vhosts/ssl.default-vhost.conf</i>
<codenote>Cambiate i seguenti parametri</codenote>
		
		ServerName host.nome.dominio
		ServerAdmin vostro@indirizzo.email
		SSLCertificateFile /etc/apache/conf/ssl/new.cert.cert
		SSLCertificateKeyFile /etc/apache/conf/ssl/new.cert.key
		
		# <i>/etc/init.d/apache restart</i>
</pre>
<note>Se avete una installazione apache preesistente, dovrete fare un reboot per installare i nuovi certificati.
Controllate i vostri log per verificare che apache si è riavviato correttamente.</note>
<p>Ora, configuriamo phpMyAdmin.</p>
<pre caption="Configurare phpMyAdmin" >
		# <i>nano -w /home/httpd/htdocs/phpmyadmin/config.inc.php</i>
<codenote>Cambiate i seguenti paramentri</codenote>
		
		$cfg['Servers'][$i]['host'] = 'localhost'; 	// MySQL hostname (dove gira il demone mysqld)
		$cfg['Servers'][$i]['controluser'] = 'mailsql';    	// MySQL control user settings (utente di controllo)
		$cfg['Servers'][$i]['controlpass'] = '$password';	// (deve avere diritti di sola lettura sulle tabelle mysql/user e mysql/db)
		$cfg['Servers'][$i]['user'] = 'mailsql';      	// MySQL user (nome utente)
		$cfg['Servers'][$i]['password'] = '$password'; 	// MySQL password 
		</pre>
<p>Ora aprite la pagina del phpmyadmin e sfogliate le tabelle. Vorrete a questo punto aggiungere i vostri alias locali,
editare le vostre tabelle utenti per aggiungere un utente di prova, e modificare la tabella trasport per aggiungere
informazioni sul vostro dominio. I valori di default forniti con il file di dump dovrebbero essere sufficenti a
guidarvi su cosa vogliono e dove vanno le variabili. Assicuratevi di inserire nel database informazioni accurate.
Per esempio, assicuratevi che le directory home degli utenti locali esistano e che i valori di uid/gid siano corretti.
Le directory maildir dovrebbero essere create automaticamente da postfix quando l'utente riceve la prima email.
Così, di solito, è una buona idea mandare una mail di &quot;Benvenuto&quot; ad un nuovo utente dopo aver configurato il suo
account per assicurarvi che la directory .maildir venga creata.</p>
</body>
</section>
</chapter>
<chapter>
<title>L'utente vmail</title>
<section>
<body>
<p>A questo punto potreste meravigliarvi di quale utente e directory usare per gli utenti di posta virtuali.
Configuriamoli.</p>
<pre caption="Aggiungere l'utente vmail" >
		# <i>adduser -d /home/vmail -s /bin/false vmail</i>
		# <i>uid=`cat /etc/passwd | grep vmail | cut -f 3 -d :`</i>
		# <i>groupadd -g $uid vmail</i>
		# <i>mkdir /home/vmail</i>
		# <i>chown vmail. /home/vmail</i>
</pre>
<p>Ora quando configurerete account di posta virtuale, userete uid, gid, e directory home dell'utente vmail.
Quando configurerete account locali, userete uid, gid, e directory home di quelli. 
Avevamo intenzione di create una pagina di amministrazione in php per configurare il tutto ma non l'abbiamo ancora fatto
visto che il phpmyadmin generalmente funziona bene per noi.</p>
</body>
</section>
</chapter>
<chapter>
<title>Configurare l'Autenticazione con MySQL e i vhost</title>
<section>
<body>
<p>Ora riconfigureremo la nostra autenticazione per usare il database mailsql con courier-imap e postfix.
In ognuno degli esempi seguenti, sostituite $password con la password che avete dato all'utente mailsql nel mysql.</p>
<pre>
		# <i>emerge /usr/portage/sys-libs/pam_mysql/pam_mysql-$currentversion.ebuild </i>
<codenote>Questo pacchetto è attualmente mascherato così che dovrete specificare il path esplicitamente</codenote>
<codenote>oppure fare l'unmask del pacchetto. Questo è soggetto a cambiamento quando il pacchetto non è mascherato</codenote>
<codenote>nel portage tree.</codenote>

		# <i>nano -w /etc/pam.d/imap</i>
<codenote>commentate le righe d'autenticazione esistenti e aggiungete le seguenti come mostrato.</codenote>

		#auth       required     pam_nologin.so
		#auth       required     pam_stack.so service=system-auth
		#account    required     pam_stack.so service=system-auth
		#session    required     pam_stack.so service=system-auth

		auth     optional       pam_mysql.so server=localhost db=mailsql user=mailsql \
		  passwd=$password table=users usercolumn=email passwdcolumn=clear crypt=0
		account  required       pam_mysql.so server=localhost db=mailsql user=mailsql \
		  passwd=$password table=users usercolumn=email passwdcolumn=clear crypt=0

		# <i>nano -w /etc/pam.d/pop3</i>
		# <i>nano -w /etc/pam.d/smtp</i>
<codenote>Fate le stesse modifiche ai file pop3 e smtp</codenote>
</pre>
<p>Poi, dobbiamo modificare la configurazione dell'autenticazione del courier.</p>
<pre>
		# <i>nano -w /etc/courier-imap/authdaemonrc</i>
		authmodulelist=&quot;authmysql authpam&quot;

		# <i>nano -w /etc/courier-imap/authdaemond.conf</i>
		AUTHDAEMOND=&quot;authdaemond.mysql&quot;

		# <i>nano -w /etc/courier-imap/authmysqlrc</i>
		MYSQL_SERVER            localhost
		MYSQL_USERNAME       mailsql
		MYSQL_PASSWORD      $password
		MYSQL_DATABASE          mailsql
		MYSQL_USER_TABLE        users
		#MYSQL_CRYPT_PWFIELD    crypt (assicuratevi di scommentare questo visto che memorizziamo in testo semplice)
		MYSQL_CLEAR_PWFIELD     clear
		MYSQL_UID_FIELD         uid
		MYSQL_GID_FIELD         gid
		MYSQL_LOGIN_FIELD       email
		MYSQL_HOME_FIELD        homedir
		MYSQL_NAME_FIELD        name
		MYSQL_MAILDIR_FIELD     maildir

		# <i>/etc/init.d/authdaemond restart</i>
		# <i>/etc/init.d/saslauthd restart</i>
</pre>
<p>Poi, configurate il resto necessario per far interagire postfix con il database per tutti i suoi bisogni di trasmissione.</p>
<pre caption="/etc/postfix/mysql-aliases.cf" >
		# <i>nano -w /etc/postfix/mysql-aliases.cf</i>
		# mysql-aliases.cf

		user         	= mailsql
		password     	= $password
		dbname       	= mailsql
		table        	= alias
		select_field 	= destination
		where_field  	= alias
		hosts        	= unix:/var/run/mysqld/mysqld.sock
		</pre>
<pre caption="/etc/postfix/mysql-relocated.cf" >
		# <i>nano -w /etc/postfix/mysql-relocated.cf</i>
		# mysql-relocated.cf

		user         	= mailsql
		password     	= $password
		dbname       	= mailsql
		table        	= relocated
		select_field 	= destination
		where_field  	= email
		hosts        	= unix:/var/run/mysqld/mysqld.sock
		</pre>
<pre caption="/etc/postfix/mysql-transport.cf (optional)" >
		# <i>nano -w /etc/postfix/mysql-transport.cf</i>		
		# mysql-transport.cf

		user         	= mailsql
		password     	= $password
		dbname       	= mailsql
		table        	= transport
		select_field 	= destination
		where_field  	= domain
		hosts        	= unix:/var/run/mysqld/mysqld.sock
		</pre>
<pre caption="/etc/postfix/mysql-virtual-gid.cf (optional)" >
		# <i>nano -w /etc/postfix/mysql-virtual-gid.cf</i>
		#myql-virtual-gid.cf

		user          	= mailsql
		password        = $password
		dbname        	= mailsql
		table           = users
		select_field    = gid
		where_field     = email
		additional_conditions = and postfix = 'y'
		hosts         	= unix:/var/run/mysqld/mysqld.sock
		</pre>
<pre caption="/etc/postfix/mysql-virtual-maps.cf" >
		# <i>nano -w /etc/postfix/mysql-virtual-maps.cf</i>
		#myql-virtual-maps.cf

		user        	= mailsql
		password        = $password
		dbname          = mailsql
		table           = users
		select_field    = maildir
		where_field   	= email
		additional_conditions = and postfix = 'y'
		hosts           = unix:/var/run/mysqld/mysqld.sock
		</pre>
<pre caption="/etc/postfix/mysql-virtual-uid.cf (optional)" >
		# <i>nano -w /etc/postfix/mysql-virtual-uid.cf</i>
		# mysql-virtual-uid.cf

		user            = mailsql
		password        = $password
		dbname          = mailsql
		table           = users
		select_field    = uid
		where_field    	= email
		additional_conditions = and postfix = 'y'
		hosts           = unix:/var/run/mysqld/mysqld.sock
		</pre>
<pre caption="/etc/postfix/mysql-virtual.cf" >
		# <i>nano -w /etc/postfix/mysql-virtual.cf</i>
		# mysql-virtual.cf

		user         	= mailsql
		password     	= $password
		dbname       	= mailsql
		table        	= virtual
		select_field 	= destination
		where_field  	= email
		hosts        	= unix:/var/run/mysqld/mysqld.sock
		</pre>
<p>Come ultima cosa, modificate <path>/etc/postfix/main.cf</path> un'altra volta.</p>
<pre caption="/etc/postfix/main.cf" >
		# <i>nano -w /etc/postfix/main.cf</i>
		alias_maps = mysql:/etc/postfix/mysql-aliases.cf
		relocated_maps = mysql:/etc/postfix/mysql-relocated.cf
		
		local_transport = local
		local_recipient_maps = $alias_maps $virtual_mailbox_maps unix:passwd.byname

		virtual_transport = virtual
		virtual_mailbox_domains =
			virt-bar.com,
			$other-virtual-domain.com

		virtual_minimum_uid = 1000
		virtual_gid_maps = static: $vmail-gid
		virtual_mailbox_maps = mysql:/etc/postfix/mysql-virtual-maps.cf
		virtual_alias_maps = mysql:/etc/postfix/mysql-virtual.cf
		virtual_uid_maps = static: $vmail-uid
		virtual_mailbox_base = /
		#virtual_mailbox_limit = 
		</pre>
<p>Dalla versione 2.0.x del Postfix, ci sono diversi cambiamenti significativi rispetto alla versione 1.1.x .
Le tabelle transport, virtual-gid e virtual-uid non sono più necessarie. Le tabelle sono ancora incluse se le volete usare.</p>
<note>vi raccomandiamo di leggere il file VIRTUAL_README incluso nella documentazione di postfix per ulteriori
informazioni.</note>
<pre># <i>postfix reload</i>
</pre>
<p>Ora, se tutto è andato bene, dovreste avere un server di posta funzionante. Gli utenti dovrebbero essere in grado
di autenticarsi tramite il database sql, usando il loro indirizzo di posta completo, per pop3, imap e smtp.
Suggerisco caldamente che voi verifichiate che tutto stia funzionando a questo punto. Se incorrete in problemi
(con tutte le cose che farete con questo setup, probabilmente ne avrete) controllate la sezione di risoluzione dei problemi
in questo howto.</p>
</body>
</section>
</chapter>
<chapter>
<title>Squirrelmail</title>
<section>
<body>
<pre>
		# <i>emerge squirrelmail</i>
<codenote>Mi piace aggiungere un collegamento alla directory htdocs per un indirizzo più corto.</codenote>

		# <i>ln -s /home/httpd/htdocs/squirrelmail/ /home/httpd/htdocs/mail</i>
		# <i>cd /home/httpd/htdocs/mail/conf</i>
		# <i>./conf.pl</i>
<codenote>Modificate i settaggi Organization, Server, e Folder per squirrelmail.</codenote>
<codenote>Ora dovreste essere in grado di fare il login in squirrelmail, anche qui - con il vostro indirizzo email completo,</codenote>
<codenote>e usare i vostri nuovi settaggi della webmail.</codenote>
</pre>
</body>
</section>
</chapter>
<chapter>
<title>Mailman</title>
<section>
<body>
<p>Ultimo passo: mailman. L'ultima versione di mailman ha un supporto per i domini virtuali molto interessante, per questo
lo uso, senza dimenticare che è un grande pacchetto. Per installarlo e farlo funzionare correttamente con i domini
virtuali c'eè bisogno di un po' di modifiche. Raccomando sempre caldamente di leggere tutta la documentazione di mailman,
compreso README.POSTFIX.gz, per capire bene cosa stia succendendo.</p>
<pre caption="/usr/portage/net-mail/mailman/mailman-$ver.ebuild">
		# <i>nano -w /usr/portage/net-mail/mailman/mailman-$ver.ebuild</i>
		MAILGID="280"
		<codenote>Settate MAILGID al gruppo mailman group invece di nobody</codenote>
		<codenote>Questo è necessario per l'integrazione con postfix</codenote>
</pre>
<pre>
		# <i>emerge mailman</i>
<codenote>Anche questo pacchetto è mascherato, così dovrete fare l'unmask o fare </codenote>
<codenote>emerge con un path esplicito all'ebuild. Una volta installato, seguite le istruzioni</codenote>
<codenote>contenute in README.gentoo.gz</codenote>

		# <i>nano -w /usr/share/doc/mailman-$ver/README.gentoo.gz</i>
</pre>
<pre caption="mailman config: mm_cfg.py">
		# <i>nano -w /var/mailman/Mailman/mm_cfg.py</i>
		MTA = "Postfix"
		POSTFIX_STYLE_VIRTUAL_DOMAINS = ['virt-domain.com', 'virt.domain2.com']	
		add_virtualhost('www.virt.domain.com', 'virt.domain.com')
		add_virtualhost('www.virt.domain2.com', 'virt.domain2.com')
<codenote>Questo è necessario al mailman per funzionare con i vostri domini virtuali.</codenote>
</pre>
<pre>
<codenote>Una volta terminato, aggiungete la vostra prima lista.</codenote>

		# <i>su mailman</i>
		# <i>cd ~</i>
		# <i>bin/newlist test</i>
		Enter the email of the person running the list: your@email.address
		Initial test password:
		Hit enter to continue with test owner notification...
		<codenote>Le liste dei domini virtuali possono essere specificate</codenote>
		<codenote>con lo stile di nomi lista@dominio.com</codenote>
		# <i>bin/genaliases</i>
		<codenote>Ora che i vostri alias sono stati generati,</codenote>
		<codenote>verificate che siano stati aggiungi con successo.</codenote>
		
		# <i>nano -w data/aliases</i>
		# STANZA START: test
		# CREATED: 
		test:             "|/var/mailman/mail/mailman post test"
		test-admin:       "|/var/mailman/mail/mailman admin test"
		test-bounces:     "|/var/mailman/mail/mailman bounces test"
		test-confirm:     "|/var/mailman/mail/mailman confirm test"
		test-join:        "|/var/mailman/mail/mailman join test"
		test-leave:       "|/var/mailman/mail/mailman leave test"
		test-owner:       "|/var/mailman/mail/mailman owner test"
		test-request:     "|/var/mailman/mail/mailman request test"
		test-subscribe:   "|/var/mailman/mail/mailman subscribe test"
		test-unsubscribe: "|/var/mailman/mail/mailman unsubscribe test"
		# STANZA END: test
		
		# <i>/etc/init.d/mailman start</i>
		# <i>rc-update add mailman default</i>
		<codenote>Per far avviare mailman immediatamente e ad ogni riavvio</codenote>
</pre>

<pre caption="Aggiungere il supporto degli alias di mailman a postfix">
		# <i>nano -w /etc/postfix/main.cf</i>
		owner_request_special = no
		recipient_delimiter = +
		<codenote>Leggete README.POSTFIX.gz per ulteriori dettagli su questo</codenote>
		
		alias_maps     =
			hash:/var/mailman/data/aliases,
			mysql:/etc/postfix/mysql-aliases.cf
		
		virtual_alias_maps =
			hash:/var/mailman/data/virtual-mailman,
			mysql:/etc/postfix/mysql-virtual.cf
		<codenote>Questo aggiunge a postfix il supporto per gli alias del mailman</codenote>
		<codenote>Ovviamente potete usare le tabelle mysql per fare ciò,</codenote>
		<codenote>ma odio farlo a mano.</codenote>		
</pre>
<p> Ora dovreste essere in grado di configurare mailing list per ogni dominio sulla vostra macchina.  
Ultime considerazione su questo, assicuratevi di lanciare tutti i comandi di mailman (<c>su mailman</c>) o altrimenti
i permessi saranno sbagliati e dovrete aggiustarli. Leggete la documentazione di mailman per ulteriori informazioni
su come configurare e gestire liste con mailman.</p>

</body>
</section>
</chapter>
<chapter>
<title>Filtraggio dei contenuti e Anti-Virus</title>
<section>
<body><p>In arrivo...</p></body>
</section>
</chapter>
<chapter>
<title>Iniziare a lavorare</title>
<section>
<body>
<p>Ok, avete tutto configurato, modificate <path>/etc/postfix/master.cf</path> e togliete la modalità verbosa per un
uso di produzione. Probabilmente vorrete aggiungere dei servizi alle vostre routine di avvio per assicurarvi che tutto
riparta ad ogni riavvio. 
Assicuratevi di aggiungere tutti i servizi che state usando - apache, mysql, saslauthd, postfix, courier-imapd,
courier-imapd-ssl, courier-pop3d e courier-pop3d-ssl sono tutte le modalità di accesso che vorrete rendere disponibili ai
vostri utenti. Generalmente ho tutti i servizi abilitati.</p>
<pre caption="Iniziare a lavorare" >
		# <i>postfix reload</i>
		# <i>rc-update add $service default</i>
</pre>
<p>
<e>Buon divertimento!</e>
</p>
</body>
</section>
</chapter>
<chapter>
<title>Risoluzione dei problemi</title>
<section>
<title>Introduzione</title>
<body>
<p>Risoluzione dei problemi:  Questa è una piccola guida alla risoluzione dei problemi sulla configurazione d'installazione
che abbiamo descritto sopra. Non è completa, ma  è concepita come punto di partenza per capire i problemi.
Quando si ha una configurazione complicata come questa, è imperativo che voi scomponiate il problema nei componenti più
piccoli che non stanno funzionando. In generale faccio in questo modo seguendo qualche passo. Iniziate dalla base del
sistema e salite, scartando lungo la strada i componenti che funzionano finchè non scoprite quale componente ha il
problema.</p>
</body>
</section>
<section>
<title>Passo 1: Controllate i vostri file di configurazione.</title>
<body>
<p>Gli errori di battitura sono micidiali, specialmente quando si ha a che fare con sistemi di autenticazione. 
Controllate le vostre configurazioni e il database mailsql per errori di battitura. Potete fare tutto il debug che volete,
ma se non passate avanti e indietro le giuste informazioni al vostro sistema di posta, lui non funzionerà.
Se apportate un cambiamento ad un file di configurazione per un servizio, assicuratevi di riavviare quel servizio così
da fargli accettare i cambiamenti.</p>
<pre>
		# <i>/etc/init.d/service restart</i>
</pre>
</body>
</section>
<section>
<title>Passo 2: Sono in esecuzione tutti i servizi necessari?</title>
<body>
<p>Se non sono in esecuzione, avviateli. E' estremamente difficile fare il debug di un servizio che non è in esecuzione.
Qualche volta un servizio sembrerà avviato ma non sarà funzionante. Qualche volta, quando è usata una configurazione
errata o una trasmissione corrotta entra in un componente, il servizio si bloccherà e manterrà la porta occupata ad
un altro processo. Qualche volta potete scoprire queste cose con netstat. Oppure riavviare la macchine. Questo toglierà
ogni servizio bloccato. Poi potete riprovare..</p>
<pre>
		# <i>/etc/init.d/$service status</i>
		# <i>netstat -a | grep $service (or $port)</i>
</pre>
</body>
</section>
<section>
<title>Passo 3: Tutti i servizi stanno usando configurazioni correnti?</title>
<body>
<p>Se avete recentemente fatto cambiamenti ad un file di configurazione, riavvite quel servizio per assicurarvi che
usi la versione corrente. Qualche componente vi mostrerà la configurazione attuale, come postfix.</p>
<pre>
		# <i>apachectl fullstatus</i> (è necessario lynx installato)
		# <i>apachectl configtest</i> (controlla la configurazione)
		# <i>postconf -n</i> (vi dirà esattamente quali parametri sta usando postfix)
		# <i>/etc/init.d/$service restart</i>
</pre>
</body>
</section>
<section>
<title>Passo 4: Controllare i log.</title>
<body>
<p>Ripetete dopo di me, i log sono miei amici. Qualche volta è utile far fallire un'operazione di nuovo poi controllare
i log così che il messaggio d'errore è giusto in fondo (o in cima a seconda del vostro logger) invece che nascosto in
mezzo. Controllate se c'è qualche informazione nei vostri log che può aiutarvi a diagnosticare il problema, o almeno,
capire quale componente ha il problema.</p>
<pre>
		# <i>kill -USR1 `ps -C metalog -o pid=`</i>(per disattivare il buffering del metalog)
		# <i>nano -w /var/log/mail/current</i>
		# <i>cat /var/log/mysql/mysql.log</i>
		# <i>tail /var/log/apache/error_log</i>
</pre>
<p>Potrete anche trovare utili i parametri debug_peer nel main.cf. Settarli aumenterà i log di output più della modalità
verbosa.</p>
<pre caption="aggiungere il supporto debug_peer">
		# <i>nano -w /etc/postfix/main.cf</i>
		debug_peer_level = 5
		debug_peer_list = $host.nome.dominio
		<codenote>Scommentate anche uno dei comandi del debugger suggeriti.</codenote>
</pre>
</body>
</section>
<section>
<title>Passo 5:  Parlate ai servizi stessi.</title>
<body>
<p>SMTP, IMAP e POP3 rispondono tutti a sessioni telnet. Come abbiamo visto precedentemente quando abbiamo verificato
la configurazione di postfix. Qualche volta è utile aprire una sessione telnet al servizio stesso e vedere cosa succede.</p>
<pre>
		# <i>telnet localhost $port</i>
<codenote>SMTP è 25, IMAP è 143, POP3 è 110. Dovreste ricevere almento una stringa OK,</codenote>
<codenote>che vi permetterà di sapere che il servizio è in esecuzione e pronto a rispondere alle richieste.</codenote>

		Trying 127.0.0.1...
		Connected to localhost.
		Escape character is '^]'.
		* OK Courier-IMAP ready. Copyright 1998-2002 Double Precision, Inc.  See COPYING for distribution information.
		</pre>
</body>
</section>
<section>
<title>Passo 6: Qualche volta solo le grandi armi vi daranno le informazioni di cui avete bisogno: strace.</title>
<body>
<p>Dovreste averlo installato. Questo è un attrezzo inestimabile per fare debugging del software.
Potete avviare comandi dalla riga di comando con strace e controllare tutte le chiamate di sistema che fanno.
Spesso vi mostra un'enorme quantità di informazioni, così che potrete sia controllare in tempo reale come ritentate
una transazione fallita, o scaricare l'output in un file per rileggerlo in seguito.</p>
<pre>
		# <i>emerge strace</i>
		# <i>strace $command</i>
		# <i>strace -p `ps -C $service -o pid=`</i>
</pre>
</body>
</section>
<section>
<title>Passo 7: Ricercare</title>
<body>
<p>Una volta che avete le informazioni, potete diagnosticare e correggere il problema, grande! 
Altrimenti, probabilmente dovrete scavare sulla rete per informazioni che vi aiuteranno a sistemarlo.
Qui c'è una lista di siti che potete controllare per cercare riguardo problemi già risolti.
C'è anche un howto veramente buono sul settare l'autenticazione smtp, e che contiene grandi idee di debugging.</p>
<p>
<ul>
<li>
<uri>http://forums.gentoo.org/</uri> - Grandi forum per gli utenti gentoo</li>
<li>
<uri>http://bugs.gentoo.org/</uri> - Database di bug per gentoo - grande posto per cercare errori specifici</li>
<li>
<uri>http://postfix.state-of-mind.de/</uri> - Howto sull'autenticazione smtp (smtp-auth howto)</li>
<li>
<uri>http://marc.theaimsgroup.com/?l=postfix-users</uri> - Mailing list sul Postfix - potete fare ricerche</li>
<li>
<uri>http://sourceforge.net/mailarchive/forum.php?forum_id=6705</uri> - Archivio della mailing list del Courier-imap -
non potete fare ricerche</li>
<li>
<uri>http://www.google.com/</uri> - Se tutto fallisce, c'è sempre google, che non ha mai fallito con me</li>
<li>Passo anche tanto tempo su irc.freenode.net #gentoo. Irc è un grande posto dove andare per cercare aiuto.</li>
</ul>
</p>
</body>
</section>
</chapter>
</guide>

