<?xml version = '1.0' encoding = 'UTF-8'?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/virt-mail-howto.xml,v 1.16 2007/08/02 16:17:56 scen Exp $ -->

<guide link="/doc/it/virt-mail-howto.xml" lang="it">
<title>Guida al Sistema di Mailhosting Virtuale con Postfix</title>

<author title="Autore">
  <mail link="antifa@gentoo.org">Ken Nowack</mail>
</author>
<author title="Autore">
  <mail link="ezra@revoltltd.org">Ezra Gorman</mail>
</author>
<author title="Redazione">
  <mail link="klasikahl@gentoo.org">Zack Gilburd</mail>
</author>
<author title="Redazione">
  <mail link="seather@scygro.za.net">Scygro</mail>
</author>
<author title="Redazione">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Traduzione">
  <mail link="paolo@webgrapes.it">Paolo Gabrielli</mail>
</author>
<author title="Traduzione">
  <mail link="cristiano.chiucchiolo@gmail.com">Cristiano Chiucchiolo</mail>
</author>
<author title="Traduzione">
  <mail link="scen@gentoo.org">Davide Cendron</mail>
</author>

<abstract>
Questo documento illustra come creare un sistema di mailhosting virtuale basato
su postfix, mysql, courier-imap, e cyrus-sasl.
</abstract>

<version>1.5</version>
<date>2007-07-23</date>

<chapter>
<title>Introduzione</title>
<section>
<body>

<p>
Per la maggior parte degli utenti Gentoo, un semplice client di posta e
fetchmail sono sufficienti. Comunque, se sul proprio sistema si ospita un
dominio, ci sarà bisogno di un MTA (Mail Transfer Agent) completo. E se si
stanno ospitando diversi domini, allora sicuramente ci sarà bisogno di qualcosa
di più robusto per gestire tutte le email dei propri utenti. Il sistema proposto
è stato progettato per essere una soluzione elegante a questo problema.
</p>

<p>
Un sistema di mail virtuale deve essere in grado di gestire email per numerosi
domini con molteplici utenti su diverse interfacce. Questo presenta alcune
problematiche alle quali far fronte. Per esempio, cosa fare se si hanno due
utenti su domini differenti che vogliono lo stesso nome utente? Se viene fornito
accesso imap e autenticazione smtp, come combinare i diversi demoni di
autenticazione in un sistema unico? Come riuscire a fornire sicurezza ai
numerosi componenti che comprende il sistema? Come gestire tutto?
</p>

<p>
Questa guida mostrerà come configurare un sistema di posta capace di gestire
email per tanti domini quanti ne può gestire il proprio hardware, supportare
utenti di posta virtuale senza bisogno di account di shell, avente nomi utenti
specifici per il dominio, capace di autenticare client web, imap, smtp e pop3
tramite un unico database, utilizzare ssl come layer di trasporto sicuro dei
dati, avente un'interfaccia web, capace di gestire mailing list per ogni dominio
sulla macchina, e controllato da un database MySQL semplice, carino e
centralizzato.
</p>

<p>
Ci sono molteplici modi di configurare un sistema di mailhosting virtuale. Con
tutte le opzioni disponibili, forse un altro modo risulterà migliore per le
proprie esigenze specifiche. Cercare su <uri>http://www.qmail.org</uri> e
<uri>http://www.exim.org</uri> per esplorare le proprie opzioni.
</p>

<p>
I seguenti pacchetti sono usati in questa configurazione: apache, courier-imap,
courier-authlib, postfix, mod_php, phpmyadmin, squirrelmail, cyrus-sasl, mysql,
php e mailman.
</p>

<p>
Assicurarsi di abilitare le seguenti variabili USE all'interno di
<path>/etc/make.conf</path> prima di compilare i pacchetti: <c>USE=&quot;mysql
imap libwww maildir sasl ssl&quot;</c>. Altrimenti molto probabilmente si
dovranno ricompilare alcune cose per avere il supporto necessario per tutti i
protocolli. Inoltre, è una buona idea disabilitare ogni altra variabile per la
posta e la rete, come per esempio ipv6.
</p>

<impo>
Ci sarà bisogno di un nome di dominio per far girare un server di posta pubblico
o almeno di un MX record per un dominio. Idealmente ci sarà bisogno di avere il
controllo di almeno due domini per avvantaggiarvi delle nuove funzionalità di
dominio virtuali.
</impo>

<impo>
Assicurarsi che il file <path>/etc/hostname</path> sia configurato con il giusto
hostname per il proprio server di posta. È possibile applicare qualsiasi
modifica fatta a questo file eseguendo <c>/etc/init.d/hostname restart</c>.
Verificare che l'hostname sia impostato correttamente con il comando
<c>hostname</c>. Verificare inoltre che non ci siano voci in conflitto tra loro
nel file <path>/etc/hosts</path>.
</impo>

<note>
Si raccomanda di leggere per intero questo documento e di familiarizzare con
tutti i passi prima di provare ad installare. Se si riscontrano dei problemi con
uno di questi passi, controllare la guida alla risoluzione in fondo a questo
documento. Inoltre, non tutti i pacchetti nominati sono necessari: questa
configurazione è molto flessibile. Per esempio, se non si ha bisogno di una
interfaccia web, saltare la sezione che riguarda squirrelmail.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Le basi di Postfix</title>
<section>
<body>
<pre caption="Installare postfix" >
# <i>emerge postfix</i>
</pre>

<warn>
Verificare di non avere installato nessun altro MTA, come ssmtp, exim o
netqmail, o si avranno sicuramente GRANDI problemi.
</warn>

<p>
Una volta installato postfix, è tempo di configurarlo. Cambiare le seguenti
opzioni nel file <path>/etc/postfix/main.cf</path>. Ricordarsi di sostituire
<c>$variabile</c> con i loro nomi relativi.
</p>

<pre caption="/etc/postfix/main.cf" >
myhostname = $host.nome.dominio
mydomain = $nome.dominio
inet_interfaces = all
mydestination = $myhostname, localhost.$mydomain $mydomain
mynetworks = ip.della.propria.rete/24, 127.0.0.0/8
home_mailbox = .maildir/
local_destination_concurrency_limit = 2
default_destination_concurrency_limit = 10
</pre>

<p>
Successivamente cambiare le seguenti opzioni dentro a
<path>/etc/postfix/master.cf</path>. Questo attiverà l'output prolisso per poter
fare debugging:
</p>

<pre caption="/etc/postfix/master.cf" >
# service type  private unpriv  chroot  wakeup  maxproc command + args
#
#               (yes)   (yes)   (yes)   (never) (50)
#
<comment>(Aggiungere semplicemente la "-v" dopo smtpd nella riga sopra)</comment>
==========================================================================
 smtp      inet  n       -       n       -       -       smtpd -v
</pre>

<p>
Poi, modificare <path>/etc/mail/aliases</path> per aggiungere i propri alias
locali. Ci dovrebbe essere almeno un alias per l'utente root simile a questo:
<c>root: vostro@indirizzo.email</c>.
</p>

<pre caption="Avviare postfix per la prima volta">
# <i>/usr/bin/newaliases </i>
<comment>(Questo installerà i nuovi alias. Si deve fare soltanto questo)</comment>
<comment>(quando gli alias vengono aggiornati o installati.)</comment>

# <i>/etc/init.d/postfix start</i>
</pre>

<p>
Ora che postfix è in esecuzione, avviare il proprio client di posta preferito e
mandare una mail a sè stessi. L'autore di questo documento usa <c>mutt</c> per
tutta la posta da console. Verificare che postfix consegni la posta agli utenti
locali, e una volta fatto, proseguire con il prossimo passaggio.
</p>

<note>
Si raccomanda fortemente di verificare che questa configurazione di base di
postfix sia funzionante prima di proseguire con il prossimo passaggio di questa
guida.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Courier-imap</title>
<section>
<body>

<pre caption="Installare courier-imap e courier-authlib">
# <i>emerge courier-imap courier-authlib</i>
</pre>

<pre caption="Configurazione Courier-imap">
# <i>cd /etc/courier-imap </i>
<comment>(Se si vogliono usare le capacità ssl di courier-imap o pop3, ci sarà
bisogno di creare certificati per questo scopo. Questo passo è raccomandato, ma
se non si vuole usare ssl, è possibile saltarlo.)</comment>

# <i>nano -w pop3d.cnf</i>
# <i>nano -w imapd.cnf </i>
<comment>(Cambiare i parametri C, ST, L, CN, e email per adeguarli al proprio server.)</comment>

# <i>mkpop3dcert</i>
# <i>mkimapdcert</i>
</pre>

<pre caption="Avviare i servizi courier necessari." >
# <i>/etc/init.d/courier-imapd start</i>
# <i>/etc/init.d/courier-imapd-ssl start</i>
# <i>/etc/init.d/courier-pop3d start</i>
# <i>/etc/init.d/courier-pop3d-ssl start</i>
</pre>

<p>
Avviare il proprio client di posta preferito e assicurarsi che tutte le
connessioni avviate funzionino per ricevere e mandare posta. Ovviamente non si
riuscirà a loggarsi a qualunque servizio poichè l'autenticazione non è stata
ancora configurata, ma è saggio verificare se le connessioni stesse funzionano
oppure no.
</p>

<p>
Ora che le cose di base funzionano, verranno fatte diverse cose
contemporaneamente per avere il resto del sistema funzionante. Ancora,
verificare che funzionino tutte le cose già installate prima di proseguire.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Cyrus-sasl</title>
<section>
<body>

<p>
Ora verrà installato cyrus-sasl. Sasl servirà per passare a courier-auth le
proprie variabili di autenticazione, le quali verranno poi passate a mysql per
autenticare gli utenti smtp. Per questa guida, non verrà verificato il
funzionamento di sasl finchè mysql non sarà configurato e conterrà un utente di
prova. Questo è giusto visto che alla fine l'autenticazione avverrà tramite
mysql.
</p>

<pre caption="Configurare e installare l'ebuild cyrus-sasl" >
# <i>emerge cyrus-sasl</i>
</pre>

<p>
Poi, modificare <path>/etc/sasl2/smtpd.conf</path>.
</p>

<pre caption="Avviare sasl" >
# <i>nano -w /etc/sasl2/smtpd.conf</i>
mech_list: PLAIN LOGIN
pwcheck_method: saslauthd
# <i>nano -w /etc/conf.d/saslauthd</i>
SASLAUTHD_OPTS="${SASLAUTH_MECH} -a rimap -r"
SASLAUTHD_OPTS="${SASLAUTHD_OPTS} -O localhost"
# <i>/etc/init.d/saslauthd start</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Certificati SSL per Postfix e Apache</title>
<section>
<body>

<p>
Ora verrà creato un gruppo di certificati ssl per postfix e apache.
</p>

<pre caption="Creare certificati ssl">
# <i>cd /etc/ssl/</i>
# <i>nano -w openssl.cnf</i>

<comment>Cambiare i seguenti valori predefiniti con quelli per il proprio dominio:</comment>

countryName_default
stateOrProvinceName_default
localityName_default
O.organization_default
commonName_default
emailAddress_default.

<comment>(Se le variabili non sono già presenti, aggiungerle semplicemente nel posto giusto.)</comment>

# <i>cd misc</i>
# <i>./CA.pl -newreq-nodes</i>
# <i>./CA.pl -newca</i>
# <i>./CA.pl -sign</i>
# <i>cp newcert.pem /etc/postfix</i>
# <i>cp newreq.pem /etc/postfix</i>
# <i>cp demoCA/cacert.pem /etc/postfix </i>
<comment>(Ora verrà fatta la stessa cosa per apache)</comment>

# <i>openssl req -new > new.cert.csr</i>
# <i>openssl rsa -in privkey.pem -out new.cert.key</i>
# <i>openssl x509 -in new.cert.csr -out new.cert.cert -req -signkey new.cert.key -days 365 </i>
<comment>(Per ora lasciare qui i certificati ottenuti. Verranno installati dopo aver installato Apache.)</comment>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Aggiungere il supporto SSL e SASL a Postfix</title>
<section>
<body>

<p>
Ora modificare il file di configurazione di postfix per metterlo a conoscenza
delle sue nuove capacità sasl e ssl. Aggiungere i seguenti parametri alla fine
del file dove saranno più facili da trovare.
</p>

<pre caption="/etc/postfix/main.cf" >
# <i>nano -w /etc/postfix/main.cf</i>

smtpd_sasl_auth_enable = yes
smtpd_sasl2_auth_enable = yes
smtpd_sasl_security_options = noanonymous
broken_sasl_auth_clients = yes
smtpd_sasl_local_domain =

<comment>
(Le opzioni broken_sasl_auth_clients e il metodo di autenticazione di login sono solamente per outlook
e outlook express e non sono documentate. Non è interessante dover modificare del software con hack per
far funzionare programmi stupidi e fatti male della M$? smtpd_sasl_local_domain aggiunge un nome di
dominio ai client usando smtp-auth. Assicurarsi di lasciarlo in bianco o i propri nomi utente saranno
storpiati da postfix e non saranno in grado di autenticarsi.)</comment>

smtpd_recipient_restrictions =
permit_sasl_authenticated,
permit_mynetworks,
reject_unath_destination

<comment>(Le prossime due opzioni attivano la criptatura verso l'esterno.)</comment>
smtp_use_tls = yes
smtp_tls_note_starttls_offer = yes
smtpd_use_tls = yes
#smtpd_tls_auth_only = yes
smtpd_tls_key_file = /etc/postfix/newreq.pem
smtpd_tls_cert_file = /etc/postfix/newcert.pem
smtpd_tls_CAfile = /etc/postfix/cacert.pem
smtpd_tls_loglevel = 3
smtpd_tls_received_header = yes
smtpd_tls_session_cache_timeout = 3600s
tls_random_source = dev:/dev/urandom

<comment>(smtpd_tls_auth_only è senza commento per facilitare il testing del sistema. In seguito, volendo, si potrà riabilitarlo.)</comment>

# <i>postfix reload</i>
</pre>

<p>
Ora si verificherà che le configurazioni aggiunte vengano accettate da postfix.
Per fare ciò verrà utilizzato <c>telnet</c> (fornito per esempio da
<c>net-misc/netkit-telnetd</c>) sebbene sia possibile utilizzare anche
<c>nc</c> (fornito da <c>net-analyzer/netcat</c>):
</p>

<pre caption="Verificare sasl e il supporto tls" >
# <i>telnet localhost 25</i>

Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 mail.domain.com ESMTP Postfix
<i>EHLO domain.com</i>
250-mail.domain.com
250-PIPELINING
250-SIZE 10240000
250-VRFY
250-ETRN
250-STARTTLS
250-AUTH LOGIN PLAIN OTP
250-AUTH=LOGIN PLAIN OTP
250-XVERP
250 8BITMIME
<i>^]</i>
telnet> <i>quit</i>
</pre>

<p>
Verificare che le righe AUTH e STARTTLS sopra, ora appaiano nella propria
installazione di postfix. Come detto prima, ora AUTH non funzionerà. Questo
perchè sasl cercherà di autenticarsi verso il suo sasldb, invece del file shadow
per qualche sconosciuta ragione, che non è stato configurato. Per cui si
proseguirà configurando mysql per contenere tutte le informazioni di
autenticazione e dei domini virtuali.
</p>

</body>
</section>
</chapter>

<chapter>
<title>L'utente vmail</title>
<section>
<body>

<p>
Prima di configurare il proprio ambiente di mailhosting virtuale, verrà
creato un utente funzionale tramite il quale verranno ospitate le mailbox
virtuali. Per motivi di chiarezza verrà chiamato <e>vmail</e>:
</p>

<pre caption="Aggiungere l'utente vmail" >
# <i>adduser -d /home/vmail -s /bin/false -m vmail</i>
</pre>

<p>
A questo punto l'account vmail è stato impostato. È possibile creare account
multipli se lo si desidera (per mantenere una certa struttura nel proprio
insieme di account mail virtuali). L'user id, il group id e le directory home
sono referenziate nelle tabelle MySQL.
</p>

<p>
Successivamente all'account utente bisogna anche creare la locazione dove
risiederanno le mailbox:
</p>

<pre caption="Creare le mailbox">
# <i>mkdir /home/vmail/virt-domain.com/foo</i>
# <i>chown -R vmail:vmail /home/vmail/virt-domain.com</i>
# <i>maildirmake /home/vmail/virt-domain.com/foo/.maildir</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>MySQL</title>
<section>
<body>

<p>
Ora verrà installato e configurato MySQL. Per questo passo ci sarà bisogno del
file di dump <uri
link="http://www.gentoo.org/doc/en/files/genericmailsql.sql">genericmailsql.sql</uri>.
</p>

<pre caption="Installare e configurare MySQL" >
# <i>emerge mysql</i>

# <i>/usr/sbin/mysql_install_db </i>
<comment>(Dopo aver eseguito questo comando seguire le indicazioni sullo schermo
per aggiungere una password di root con mysql, non mysqladmin, altrimenti il
proprio db sarà aperto a tutti.)</comment>

# <i>/etc/init.d/mysql start</i>
# <i>mysqladmin -u root -p create mailsql</i>
# <i>mysql -u root -p mailsql &lt; genericmailsql.sql</i>

# <i>mysql -u root -p mysql</i>
mysql> <i>GRANT SELECT,INSERT,UPDATE,DELETE</i>
    ->     <i>ON mailsql.*</i>
    ->     <i>TO mailsql@localhost</i>
    ->     <i>IDENTIFIED BY '$password';</i>
Query OK, 0 rows affected (0.02 sec)

mysql> <i>FLUSH PRIVILEGES;</i>
Query OK, 0 rows affected (0.00 sec)
mysql> <i>quit</i>
<comment>(Verificare che il nuovo utente mailsql possa connettersi al server mysql.)</comment>

# <i>mysql -u mailsql -p mailsql</i>
</pre>

<p>
Il nuovo database contiene valori predefiniti e tabelle configurate per due
domini. Sono incluse le seguenti tabelle:
</p>

<ul>
  <li>alias - alias locali e informazioni alias di mailman.</li>
  <li>relocated - mappe riallocate di indirizzi email di utenti</li>
  <li>
    transport - informazioni predefinite per il trasporto di mail per tutti i
    domini ospitati
  </li>
  <li>users - informazioni sugli account di tutti gli utenti</li>
  <li>virtual - mappe degli alias delle mail dei domini virtuali</li>
</ul>

<pre caption="esempio di tabella alias" >
id   alias    destination
1    root     foo@bar.com
2  postmaster foo@bar.com
</pre>

<pre caption="esempio di tabella user" >
<comment>(Linee spezzate per chiarezza.)</comment>
id email            clear     name     uid     gid     homedir     \
        maildir                                quota  postfix
10 foo@virt-domain.com $password realname virtid  virtid  /home/vmail \
        /home/vmail/virt-domain.com/foo/.maildir/        y
13 foo@bar.com      $password realname localid localid /home/foo   \
        /home/foo/.maildir/                           y
</pre>

<p>
I valori uid e gid di <c>virtid</c> dovrebbero essere quelli del gruppo e
dell'utente <c>vmail</c>.
</p>

<pre caption="esempio di tabella transport" >
id   domain       destination
1    bar.com      local:
2    virt-domain.com virtual:
</pre>

<pre caption="esempio di tabella virtual" >
id   email            destination
3   root@virt-domain.com other@email.address
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Apache e phpMyAdmin</title>
<section>
<body>

<p>
Ora verrà configurato apache e verrà aggiunta un'interfaccia per interagire più
facilmente con il database.
</p>

<pre caption="Configurare apache e phpmyadmin" >
# <i>emerge apache phpmyadmin</i>
</pre>

<p>
Ci sono una moltitudine di guide su come configurare apache con php, incluse le
guide fornite dal <uri link="/proj/en/php/">Gentoo PHP Project</uri> (pagina in
inglese, ndT). Ci sono anche numerose discussioni su
<uri>http://forums.gentoo.org</uri> che spiegano in dettaglio come risolvere
problemi con l'installazione. Così, come detto, questo problema non verrà
coperto in questa sede. Installare e configurare apache e php, poi continuare
con questa guida. Ora una parola ai saggi: usare .htaccess nella directory in
cui verrà posizionato phpmyadmin. Se non viene fatto, i motori di ricerca
arriveranno e indicizzeranno la pagina cosicchè qualsiasi persona sarà in grado
di trovarla tramite google e apportare cambiamenti al database a proprio
piacimento, il che <e>NON È COSA BUONA!</e>. Ci sono molte guide sull'argomento,
incluso: <uri>http://www.csoft.net/docs/micro/htaccess.html.en</uri>.
</p>

<p>
Ora verranno installati i certificati Apache creati in precedenza. Le direttive
Apache-SSL che servono per usare tali certificati sono:
</p>

<ul>
  <li>SSLCertificateFile /path/verso/i/certificati/new.cert.cert</li>
  <li>SSLCertificateKeyFile /path/verso/i/certificati/new.cert.key</li>
</ul>

<pre caption="Installare i certificati SSL su Apache" >
# <i>cp /etc/ssl/misc/new.cert.cert /etc/apache2/ssl/</i>
# <i>cp /etc/ssl/misc/new.cert.key /etc/apache2/ssl/</i>
# <i>cd /etc/apache2/vhosts.d</i>
<comment>(Verificare se si possiede già un template ssl-vhost. Copiare quest'ultimo invece del file default_vhost, se è il caso</comment>
# <i>cp 00_default_vhost.conf ssl-vhost.conf</i>
# <i>nano -w ssl-vhost.conf</i>

<comment>(Cambiare i seguenti parametri)</comment>
NameVirtualHost host.domain.name:443

&lt;VirtualHost host.domain.name:443&gt;
  ServerName host.nome.dominio
  ServerAdmin proprio@indirizzo.email

  DocumentRoot "/var/www/localhost/htdocs/phpmyadmin";
  &lt;Directory "/var/www/localhost/htdocs/phpmyadmin"&gt;
    ...
  &lt;/Directory&gt;

  SSLCertificateFile /etc/apache2/ssl/new.cert.cert
  SSLCertificateKeyFile /etc/apache2/ssl/new.cert.key
  SSLEngine on
  ...
&lt;/VirtualHost&gt;

# <i>nano -w /etc/conf.d/apache2</i>
<comment>(Aggiungere -D SSL -D PHP5 al parametro APACHE2_OPTS)</comment>

# <i>/etc/init.d/apache restart</i>
</pre>

<p>
A questo punto configurare phpMyAdmin.
</p>

<pre caption="Configurare phpMyAdmin" >
# <i>cd /var/www/localhost/htdocs/phpmyadmin</i>
# <i>cp config.sample.inc.php config.inc.php</i>
# <i>nano -w config.inc.php</i>
<comment>(Cambiare i seguenti paramentri)</comment>
$cfg['blowfish_secret'] = 'unapassphrasemoltosegreta';

$cfg['Servers'][$i]['host'] = 'localhost';        // MySQL hostname (dove gira il demone mysqld)
$cfg['Servers'][$i]['controluser'] = 'mailsql';   // MySQL control user settings (utente di controllo)
$cfg['Servers'][$i]['controlpass'] = '$password'; // (deve avere diritti di sola lettura sulle tabelle mysql/user e mysql/db)
$cfg['Servers'][$i]['user'] = 'mailsql';          // MySQL user (nome utente)
$cfg['Servers'][$i]['password'] = '$password';    // MySQL password
</pre>

<p>
Aprire la pagina di phpmyadmin e sfogliate le tabelle. A questo punto si
potranno aggiungere i propri alias locali, modificare le tabelle utenti per
aggiungere un utente di prova, e modificare la tabella trasport per aggiungere
informazioni sul proprio dominio. I valori predefiniti forniti con il file di
dump dovrebbero essere sufficienti per aiutare ad impostare le variabili al
posto giusto. Assicurarsi di inserire nel database informazioni accurate. Per
esempio, assicurarsi che le directory home degli utenti locali esistano e che i
valori di uid/gid siano corretti. Le directory maildir dovrebbero essere create
automaticamente da postfix quando l'utente riceve la prima email. Così, di
solito, è una buona idea mandare una mail di "Benvenuto" ad un nuovo utente dopo
aver configurato il suo account per assicurarsi che la directory .maildir venga
creata.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Configurare l'Autenticazione con MySQL e i vhost</title>
<section>
<body>

<p>
Ora verrà configurata l'autenticazione per usare il database mailsql con
courier-imap e postfix. In ognuno degli esempi seguenti, sostituire $password
con la password assegnata all'utente mysql denominato mailsql.
</p>

<pre caption="Configurare l'autenticazione">
# <i>nano -w /etc/courier/authlib/authdaemonrc</i>
authmodulelist="authmysql authpam"

# <i>nano -w /etc/courier/authlib/authmysqlrc</i>
MYSQL_SERVER            localhost
MYSQL_USERNAME       mailsql
MYSQL_PASSWORD      $password
MYSQL_DATABASE          mailsql
MYSQL_USER_TABLE        users
#MYSQL_CRYPT_PWFIELD    crypt
<comment>(Assicurarsi di decommentare questa riga, visto che verrà memorizzata in testo semplice.)</comment>
MYSQL_CLEAR_PWFIELD     clear
MYSQL_UID_FIELD         uid
MYSQL_GID_FIELD         gid
MYSQL_LOGIN_FIELD       email
MYSQL_HOME_FIELD        homedir
MYSQL_NAME_FIELD        name
MYSQL_MAILDIR_FIELD     maildir

# <i>/etc/init.d/courier-authlib restart</i>
# <i>/etc/init.d/saslauthd restart</i>
</pre>

<p>
A questo punto configurare il resto dei file di configurazione di postfix
necessari per interagire con il database per tutte le necessità di trasporto.
Ricordarsi di sostituire ciascun valore con il nome del proprio utente, user id,
password, alias, indirizzo email, e così via.
</p>

<pre caption="/etc/postfix/mysql-aliases.cf" >
# <i>nano -w /etc/postfix/mysql-aliases.cf</i>
# mysql-aliases.cf

user         	= mailsql
password     	= $password
dbname       	= mailsql
table        	= alias
select_field 	= destination
where_field  	= alias
hosts        	= unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-relocated.cf" >
# <i>nano -w /etc/postfix/mysql-relocated.cf</i>
# mysql-relocated.cf

user         	= mailsql
password     	= $password
dbname       	= mailsql
table        	= relocated
select_field 	= destination
where_field  	= email
hosts        	= unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-transport.cf (opzionale)" >
# <i>nano -w /etc/postfix/mysql-transport.cf</i>
# mysql-transport.cf

user         	= mailsql
password     	= $password
dbname       	= mailsql
table        	= transport
select_field 	= destination
where_field  	= domain
hosts        	= unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-virtual-gid.cf (opzionale)" >
# <i>nano -w /etc/postfix/mysql-virtual-gid.cf</i>
# myql-virtual-gid.cf

user          	= mailsql
password        = $password
dbname        	= mailsql
table           = users
select_field    = gid
where_field     = email
additional_conditions = and postfix = 'y'
hosts         	= unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-virtual-maps.cf" >
# <i>nano -w /etc/postfix/mysql-virtual-maps.cf</i>
# myql-virtual-maps.cf

user        	= mailsql
password        = $password
dbname          = mailsql
table           = users
select_field    = maildir
where_field   	= email
additional_conditions = and postfix = 'y'
hosts           = unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-virtual-uid.cf (opzionale)" >
# <i>nano -w /etc/postfix/mysql-virtual-uid.cf</i>
# mysql-virtual-uid.cf

user            = mailsql
password        = $password
dbname          = mailsql
table           = users
select_field    = uid
where_field    	= email
additional_conditions = and postfix = 'y'
hosts           = unix:/var/run/mysqld/mysqld.sock
</pre>

<pre caption="/etc/postfix/mysql-virtual.cf" >
# <i>nano -w /etc/postfix/mysql-virtual.cf</i>
# mysql-virtual.cf

user         	= mailsql
password     	= $password
dbname       	= mailsql
table        	= virtual
select_field 	= destination
where_field  	= email
hosts        	= unix:/var/run/mysqld/mysqld.sock
</pre>

<p>
Come ultima cosa, modificare nuovamente <path>/etc/postfix/main.cf</path>.
</p>

<pre caption="/etc/postfix/main.cf" >
# <i>nano -w /etc/postfix/main.cf</i>
<comment>(Assicurarsi che non ci siano altre definizioni di alias_maps)</comment>
alias_maps = mysql:/etc/postfix/mysql-aliases.cf
relocated_maps = mysql:/etc/postfix/mysql-relocated.cf

local_transport = local
local_recipient_maps = $alias_maps $virtual_mailbox_maps unix:passwd.byname

virtual_transport = virtual
<comment>(I domini elencati da mydestination non dovrebbero essere elencati nel parametro virtual_mailbox_domains)</comment>
virtual_mailbox_domains = virt-bar.com, $other-virtual-domain.com

virtual_minimum_uid = 1000
<comment>(Sostituire $vmail-gid con il GID del gruppo vmail)</comment>
virtual_gid_maps = static: $vmail-gid
virtual_mailbox_maps = mysql:/etc/postfix/mysql-virtual-maps.cf
virtual_alias_maps = mysql:/etc/postfix/mysql-virtual.cf
<comment>(Sostituire $vmail-uid con l'UID dell'utente vmail)</comment>
virtual_uid_maps = static: $vmail-uid
virtual_mailbox_base = /
#virtual_mailbox_limit =
</pre>

<p>
Per ragioni di sicurezza si dovrebbero cambiare i permessi ai vari file
<path>/etc/mail/mysql-*.cf</path>:
</p>

<pre caption="Cambiare i permessi dei file">
# <i>chmod 640 /etc/postfix/mysql-*.cf</i>
# <i>chgrp postfix /etc/postfix/mysql-*.cf</i>
</pre>

<p>
Dalla versione 2.0.x del Postfix, ci sono diversi cambiamenti significativi
rispetto alla versione 1.1.x. Le tabelle transport, virtual-gid e virtual-uid
non sono più necessarie. Le tabelle, volendole usare, sono ancora incluse.
</p>

<note>
Si raccomanda di leggere il file VIRTUAL_README incluso nella documentazione di
postfix per ulteriori informazioni.
</note>

<pre caption="Far ricaricare le tabelle di postfix">
# <i>postfix reload</i>
</pre>

<p>
Ora, se tutto è andato bene, si dovrebbe avere un server di posta funzionante.
Gli utenti dovrebbero essere in grado di autenticarsi tramite il database sql,
usando il loro indirizzo di posta completo, per pop3, imap e smtp. Si suggerisce
caldamente di verificare che a questo punto tutto stia funzionando. Se si
riscontrano problemi (con tutte le operazioni eseguite in questa configurazione,
probabilmente ce ne saranno) controllare la sezione di risoluzione dei problemi
in questa guida.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Squirrelmail</title>
<section>
<body>

<pre caption="Installare squirrelmail">
# <i>emerge squirrelmail</i>
<comment>(Installare squirrelmail in localhost, cosicché vi si possa accedere da http://localhost/mail.) (Sostituire 1.4.3a-r2 con la versione in uso.)</comment>
# <i>webapp-config -I -h localhost -d /mail squirrelmail 1.4.3a-r2</i>
# <i>cd /var/www/localhost/htdocs/mail/config</i>
# <i>perl ./conf.pl</i>
<comment>
(Modificare le impostazioni Organization, Server, e Folder per squirrelmail. Ora
si dovrebbe essere in grado di fare il login in squirrelmail, anche qui - con il
proprio indirizzo email completo, e usare le nuove impostazioni della webmail.)
</comment>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Mailman</title>
<section>
<body>

<p>
Ultimo passo: mailman. La nuova versione di mailman ha un supporto per i domini
virtuali molto interessante, per tale motivo viene utilizzato dall'autore di
questo documento, senza dimenticare che è veramente un grande pacchetto. Per
installarlo e farlo funzionare correttamente con i domini virtuali c'è bisogno
di un pò di modifiche. Si raccomando sempre caldamente di leggere tutta la
documentazione di mailman, compreso README.POSTFIX.gz, per capire bene cosa stia
succedendo.
</p>

<pre caption="Installare mailman">
# <i>emerge mailman</i>
</pre>

<pre caption="Impostazioni predefinite: Mailman/Defaults.py">
# <i> nano -w /usr/local/mailman/Mailman/Defaults.py</i>
<comment>(Cambiare i valori qui sotto per rispecchiare il proprio dominio primario, quelli virtuali saranno configurati in seguito.)</comment>
DEFAULT_EMAIL_HOST = 'dominio.com'
DEFAULT_URL_HOST = 'www.dominio.com'
</pre>

<pre caption="configurazione di mailman: mm_cfg.py">
# <i>nano -w /usr/local/mailman/Mailman/mm_cfg.py</i>
MTA = "Postfix"
POSTFIX_STYLE_VIRTUAL_DOMAINS = ['virt-domain.com', 'virt.domain2.com']
add_virtualhost('www.virt.domain.com', 'virt.domain.com')
add_virtualhost('www.virt.domain2.com', 'virt.domain2.com')
<comment>(Questo è necessario al mailman per funzionare con i propri domini virtuali.)</comment>
</pre>

<pre caption="E per ultimo, ma non meno importante">
<comment>(Una volta terminato, aggiungere la propria prima lista.)</comment>

# <i>su mailman</i>
# <i>cd ~</i>
# <i>./bin/newlist --urlhost='www.virt-domain.com' --emailhost='virt-domain.com' test</i>
Enter the email of the person running the list: your@email.address
Initial test password:
Hit enter to continue with test owner notification...
<comment>(Le liste dei domini virtuali possono anche essere specificate con lo stile di nomi lista@dominio.com)</comment>
# <i>./bin/genaliases</i>
<comment>(Ora che i propri alias sono stati generati, verificare che siano stati aggiunti con successo.)</comment>

# <i>nano -w data/aliases</i>
# STANZA START: test
# CREATED:
test:             "|/usr/local/mailman/mail/mailman post test"
test-admin:       "|/usr/local/mailman/mail/mailman admin test"
test-bounces:     "|/usr/local/mailman/mail/mailman bounces test"
test-confirm:     "|/usr/local/mailman/mail/mailman confirm test"
test-join:        "|/usr/local/mailman/mail/mailman join test"
test-leave:       "|/usr/local/mailman/mail/mailman leave test"
test-owner:       "|/usr/local/mailman/mail/mailman owner test"
test-request:     "|/usr/local/mailman/mail/mailman request test"
test-subscribe:   "|/usr/local/mailman/mail/mailman subscribe test"
test-unsubscribe: "|/usr/local/mailman/mail/mailman unsubscribe test"
# STANZA END: test

<comment>(Creare la lista mailman necessaria)</comment>
# <i>./bin/newlist mailman</i>
# <i>./bin/genaliases</i>

<comment>(Ritornare all'utente root)</comment>
# <i>exit</i>

# <i>/etc/init.d/mailman start</i>
# <i>rc-update add mailman default</i>
<comment>(Per far avviare mailman immediatamente e ad ogni riavvio.)</comment>
</pre>

<pre caption="Aggiungere il supporto degli alias di mailman a postfix">
# <i>nano -w /etc/postfix/main.cf</i>
owner_request_special = no
recipient_delimiter = +
<comment>(Leggere README.POSTFIX.gz per ulteriori dettagli su questo.)</comment>

alias_maps     =
     hash:/usr/local/mailman/data/aliases,
     mysql:/etc/postfix/mysql-aliases.cf

virtual_alias_maps =
     hash:/usr/local/mailman/data/virtual-mailman,
     mysql:/etc/postfix/mysql-virtual.cf
<comment>(Questo aggiunge a postfix il supporto per gli alias del mailman. Ovviamente è possibile
usare le tabelle mysql per fare ciò, ma è scomodo farlo a mano Poi, se non si stanno usando domini
virtuali, aggiungere la mappa degli alias virtuali a postfix può causare problemi.)</comment>
</pre>

<p>
Ora si dovrebbe essere in grado di configurare mailing list per ogni dominio
sulla propria macchina. Come ultima considerazione riguardo a questo,
assicurarsi di lanciare tutti i comandi di mailman (<c>su mailman</c>) o
altrimenti i permessi saranno sbagliati e bisognerà risistemarli. Leggere la
documentazione di mailman per ulteriori informazioni su come configurare e
gestire liste con mailman.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Filtraggio dei contenuti e Anti-Virus</title>
<section>
<body>

<p>
Riguardo al filtraggio dei contenuti e agli antivirus, consultare la
<uri link="/doc/it/mailfilter-guide.xml">Guida al filtraggio della posta
elettronica con Gentoo</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Iniziare a lavorare</title>
<section>
<body>

<p>
Ora che tutto è configurato, modificare <path>/etc/postfix/master.cf</path> e
togliere la modalità prolissa per un uso di produzione. Probabilmente si
vorranno aggiungere dei servizi alle proprie routine di avvio per assicurarsi
che tutto riparta ad ogni riavvio. Assicurarsi di aggiungere tutti i servizi in
uso - apache, mysql, saslauthd, postfix, courier-imapd, courier-imapd-ssl,
courier-pop3d e courier-pop3d-ssl sono tutte le modalità di accesso che si
vorranno rendere disponibili ai propri utenti. Generalmente l'autore di questo
documento ha tutti i servizi abilitati.
</p>

<pre caption="Iniziare a lavorare" >
# <i>postfix reload</i>
# <i>rc-update add $servizio default</i>
</pre>

<p>
<e>Buon divertimento!</e>
</p>

</body>
</section>
</chapter>

<chapter>
<title>Risoluzione dei problemi</title>
<section>
<title>Introduzione</title>
<body>

<p>
Risoluzione dei problemi: Questa è una piccola guida alla risoluzionedei
 problemi sulla configurazione d'installazione descritta in precedenza. Non è
completa, ma è concepita come punto di partenza per capire i problemi. Quando si
ha una configurazione complicata come questa, è imperativo scomporre il problema
nei componenti più piccoli che non stanno funzionando. In generale si fa questa
operazione seguendo determinati passi. Iniziare dalla base del sistema e salire,
scartando lungo la strada i componenti che funzionano finchè non si scopre quale
componente ha il problema.
</p>

</body>
</section>
<section>

<title>Passo 1: Controllare i propri file di configurazione.</title>
<body>

<p>
Gli errori di battitura sono micidiali, specialmente quando si ha a che fare con
sistemi di autenticazione. Controllare le proprie configurazioni e il database
mailsql per errori di battitura. È possibile fare tutto il debug desiderato, ma
se non vengono passate avanti e indietro le giuste informazioni al proprio
sistema di posta, lui non funzionerà. Se si apportano un cambiamento ad un file
di configurazione per un servizio, assicurarsi di riavviare quel servizio così
da fargli accettare i cambiamenti.
</p>

<pre caption="Come riavviare un servizio">
# <i>/etc/init.d/$servizio restart</i>
</pre>

</body>
</section>
<section>
<title>Passo 2: Sono in esecuzione tutti i servizi necessari?</title>
<body>

<p>
Se non sono in esecuzione, avviarli. È estremamente difficile fare il debug di
un servizio che non è in esecuzione. Qualche volta un servizio sembrerà avviato
ma non sarà funzionante. Qualche volta, quando è usata una configurazione errata
o una trasmissione corrotta entra in un componente, il servizio si bloccherà e
manterrà la porta occupata ad un altro processo. Qualche volta è possibi le
scoprire queste cose con netstat. Oppure riavviare la macchine. Questo toglierà
ogni servizio bloccato. Poi si può riprovare.
</p>

<pre caption="Controllare lo stato di un servizio">
# <i>/etc/init.d/$servizio status</i>
# <i>netstat -a | grep $servizio (o $porta)</i>
</pre>

</body>
</section>
<section>
<title>Passo 3: Tutti i servizi stanno usando configurazioni correnti?</title>
<body>

<p>
Se recentemente sono stati fatti dei cambiamenti ad un file di configurazione,
riavviare quel servizio per assicurarsi che usi la versione corrente. Qualche
componente mostrerà la configurazione attuale, come postfix.
</p>

<pre caption="Alcuni servizi possono cambiare la propria configurazione">
# <i>apache2ctl fullstatus</i> (è necessario che sia installato lynx)
# <i>apache2ctl configtest</i> (controlla la correttezza della configurazione)
# <i>postconf -n</i> (dirà esattamente quali parametri sta usando postfix)
# <i>/etc/init.d/$service restart</i>
</pre>

</body>
</section>
<section>
<title>Passo 4: Controllare i log.</title>
<body>

<p>
Bisogna avere ben chiaro che i log sono veramente importanti. Qualche volta è
utile far fallire un'operazione di nuovo poi controllare i log così che il
messaggio d'errore sia giusto in fondo (o in cima a seconda del proprio logger)
invece che nascosto in mezzo. Controllare se c'è qualche informazione nei propri
log che può aiutare a diagnosticare il problema, o almeno, capire quale
componente ha il problema.
</p>

<pre caption="Controllare i log">
# <i>kill -USR1 `ps -C metalog -o pid=`</i>(per disattivare il buffering di metalog)
# <i>nano -w /var/log/mail/current</i>
# <i>cat /var/log/mysql/mysql.log</i>
# <i>tail /var/log/apache2/error_log</i>
</pre>

<p>
Potrebbero tornare utili i parametri debug_peer nel main.cf. Impostarli
aumenterà i log di output più della modalità prolissa.
</p>

<pre caption="Aggiungere il supporto debug_peer">
# <i>nano -w /etc/postfix/main.cf</i>
debug_peer_level = 5
debug_peer_list = $host.nome.dominio
<comment>(Decommentare anche uno dei comandi del debugger suggeriti.)</comment>
</pre>

</body>
</section>
<section>
<title>Passo 5: Parlare ai servizi stessi.</title>
<body>

<p>
SMTP, IMAP e POP3 rispondono tutti a sessioni telnet, come è stato visto
precedentemente quando è stata verificata la configurazione di postfix. Qualche
volta è utile aprire una sessione telnet al servizio stesso e vedere cosa
succede.
</p>

<pre caption="Connettersi ad un servizio con telnet">
# <i>telnet localhost $port</i>
<comment>(SMTP è 25, IMAP è 143, POP3 è 110. Si dovrebbe ricevere almeno una
stringa OK, che permetterè di sapere che il servizio è in esecuzione e pronto a
rispondere alle richieste.)</comment>

Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
* OK Courier-IMAP ready. Copyright 1998-2002 Double Precision, Inc.
</pre>

</body>
</section>
<section>
<title>Passo 6: Qualche volta solo le grandi armi daranno le informazioni
necessarie: strace.</title>
<body>

<p>
Si dovrebbe averlo installato. Questo è uno strumento inestimabile per fare
debugging del software. È possibile avviare comandi dalla riga di comando con
strace e controllare tutte le chiamate di sistema che fanno. Spesso mostra
un'enorme quantità di informazioni, perciò si potrà sia controllarlo in tempo
reale ritentando una transazione fallita con il sistema di posta, o scaricare
l'output in un file per rileggerlo in seguito.
</p>

<pre caption="Usare strace">
# <i>emerge strace</i>
# <i>strace $command</i>
# <i>strace -p `ps -C $service -o pid=`</i>
</pre>

</body>
</section>
<section>
<title>Passo 7: Ricercare</title>
<body>

<p>
Una volta che si hanno le informazioni, è possibile diagnosticare e correggere
il problema. Altrimenti, probabilmente bisognerà scavare nella rete per
informazioni che aiuteranno a sistemarlo. Qui c'è una lista di siti da
controllare per cercare riguardo a problemi già risolti. C'è anche una guida
veramente buona per impostare l'autenticazione smtp, e che contiene grandi idee
di debugging.
</p>

<ul>
  <li>
    <uri>http://forums.gentoo.org/</uri> - Grandi forum per gli utenti gentoo
  </li>
  <li>
    <uri>http://bugs.gentoo.org/</uri> - Database di bug per gentoo - grande
    posto per cercare errori specifici
  </li>
  <li>
    <uri>http://postfix.state-of-mind.de/</uri> - Guida sull'autenticazione smtp
    (smtp-auth howto)
  </li>
  <li>
    <uri>http://marc.theaimsgroup.com/?l=postfix-users</uri> - Mailing list su
    Postfix - è possibile fare ricerche al suo interno
  </li>
  <li>
    <uri>http://sourceforge.net/mailarchive/forum.php?forum_id=6705</uri> -
    Archivio della mailing list del Courier-imap - non è possibile fare ricerche
    al suo interno
  </li>
  <li>
    <uri>http://www.google.com/</uri> - Se tutto fallisce, c'è sempre google
  </li>
  <li>
    L'autore di questo documento, inoltre, passa tanto tempo sul canale #gentoo
    su irc.freenode.net. Irc è un grande posto dove andare per cercare aiuto.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>