<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/gnupg-user.xml,v 1.3 2004/01/05 00:22:32 mush Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link = "/doc/en/gnupg-user.xml">
<title>GnuPG Gentoo user guide</title>
<author title="Autore">
<mail link="gustavo@felisberto.net">Gustavo Felisberto</mail>
</author>
<author title="Redattore"><!-- zhen@gentoo.org -->
John P. Davis
</author>
<author title="Redattore">
<mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>
<author title="Traduttore">
<mail link="myzelf@omnidea.it">Gilberto De Faveri</mail>
</author>

<abstract>
Questa piccola guida insegnerà le basi dell'utilizzo di GnuPG, uno strumento per la comunicazione sicura.
</abstract>

<version>1.0.3</version>
<date>30 Ottobre 2003</date>

<license/>

<chapter>
<title>Introduzione</title>
<section>
<title>Cosa troverai in questa guida</title>
<body>

<p>
Questa guida presuppone una certa familiarità con la crittografia a chiave
pubblica e la firma digitale. Per un'introduzione a questi argomenti puoi
leggere il capitolo 2 del <uri link="http://www.gnupg.org/(en)/documentation/guides.html">GnuPG handbook</uri>.
</p>

<p>
Questa guida descrive come installare GnuPG, come creare una coppia di chiavi,
come aggiungere delle chiavi al proprio portachiavi, come inviare la propria
chiave pubblica al keyserver e come (firmare/criptare)/(verificare/decriptare)
i messaggi inviati/ricevuti. Imparerai anche come criptare i file del tuo
pc per evitare che altre persone ne leggano il contenuto.
</p>

</body>
</section>
<section>
<title>Installazione del software necessario</title>
<body>

<p>
Al livello più basso, c'è bisogno di un <c>emerge gnupg</c>, se vuoi un
client e-mail che utilizzi gnupg puoi usare pine (<c>emerge pinepgp</c>),
mutt (<c>emerge mutt</c>), Mozilla/Netscape Mail, evolution (evolution è un
clone di Microsoft Outlook per GNOME) oppure il client di KDE, KMail (Kmail
fa parte del pacchetto kdenetwork).
</p>

<p>
Se utilizzi KDE, ti potrebbe interessare Kgpg. Questo piccolo programma
permette di generare coppie di chiavi, importare chiavi da file ASCII,
firmare le chiavi importate, esportare chiavi ed altro (manca l'importazione
da keyserver, ma imparerai come farlo dalla linea di comando). [ndt: Kgpg
supporta l'importazione/esportazione da/verso keyserver a partire dalla
versione 0.9.4]
</p>

</body>
</section>
</chapter>
<chapter>
<title>Generazione della propria chiave ed aggiunta delle chiavi al proprio portachiavi pubblico</title>
<section>
<title>Creazione della propria chiave</title>
<body>

<p>
Per creare la tua chiave, lancia semplicemente <c>gpg --gen-key</c>.
La prima volta che viene eseguito crea alcune directory; rilancialo
per creare le chiavi:
</p>

<pre caption="Processo di generazione delle chiavi">
# <i>gpg --gen-key</i>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.

Please select what kind of key you want:
 (1) DSA and ElGamal (default)
 (2) DSA (sign only)
 (4) ElGamal (sign and encrypt)
 (5) RSA (sign only)
 Your selection? <i>1</i>
</pre>

<p>
A questo punto hai la possibilità di scegliere il tipo di chiave. La maggior
parte degli utenti può utilizzare il tipo predefinito, DSA e ElGamal.
Il prossimo passo è la scelta della dimensione della chiave. Una chiave grande
è preferibile, ma non utilizzare chiavi più grandi di 2048 con DSA/ElGamal.
Normalmente 1024 è più che sufficiente per l'e-mail.
</p>

<p>
Dopo la dimensione viene richiesta la data di scadenza. Una durata minore è
preferibile, ma la maggior parte degli utenti può scegliere una chiave
che non scade mai, oppure con scadenza di 1 o 2 anni.
</p>

<pre caption="Scelta della dimensione della chiave">
DSA keypair will have 1024 bits.
About to generate a new ELG-E keypair.
            minimum keysize is  768 bits
            default keysize is 1024 bits
  highest suggested keysize is 2048 bits
  What keysize do you want? (1024) <i>2048</i>
Requested keysize is 2048 bits
Please specify how long the key should be valid.
       0 = key does not expire
       &lt;n&gt;= key expires in n days
       &lt;n&gt;w = key expires in n weeks
       &lt;n&gt;m = key expires in n months
       &lt;n&gt;y = key expires in n years
       Key is valid for? (0) <i>0</i>
Key does not expire at all
</pre>

<p>
Ora bisogna inserire alcune informazioni personali. Se hai intenzione di
inviare la tua chiave pubblica ad un server devi inserire il tuo vero
indirizzo.
</p>

<pre caption="Inserimento informazioni utente">
Is this correct (y/n)? <i>y</i>

You need a User-ID to identify your key; the software constructs the user id
from Real Name, Comment and Email Address in this form:
"Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;"

Real name: <i>John Doe</i>
Email address: <i>john@nowhere.someplace.flick</i>
Comment: <i>The Real John Doe</i>
You selected this USER-ID:
"John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? <i>O</i>
You need a Passphrase to protect your secret key.    

Enter passphrase: 
</pre>

<p>
Ora inserisci due volte la password per la tua chiave. E' consigliabile
utilizzare una password non banale. Se qualcuno dovesse mai entrare in possesso
della tua chiave privata e forzare la tua password, sarebbe in grado di
inviare messaggi firmati a tuo nome, che chiunque potrebbe ritenere spediti
da te.
</p>

<p>
GnuPG creerà a questo punto la tua chiave. Muovere il mouse o ascoltare un
mp3 in background velocizzerà il processo poichè verranno generati dati casuali.
</p>

</body>
</section>
<section>
<title>Creare un certificato di revoca</title>
<body>

<impo>Questa parte è molto importante e devi eseguirla ORA.</impo>

<p>
Dopo la creazione delle tue chiavi dovresti creare un certificato di revoca.
Fare questo ti permette di revocare le tue chiavi nel caso in cui capiti
qualcosa di brutto (qualcuno entra in possesso della tua chiave/passphrase).
</p>

<pre caption="Generazione del certificato di revoca">
# <i>gpg --list-keys</i>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;
sub  2048g/96D6CDAD 2002-12-08

# <i>gpg --output revoke.asc --gen-revoke <e>75447B14</e></i>

sec  1024D/75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;

Create a revocation certificate for this key? <i>y</i>
Please select the reason for the revocation:
0 = No reason specified
1 = Key has been compromised
2 = Key is superseded
3 = Key is no longer used
Q = Cancel
(Probably you want to select 1 here)
Your decision? <i>1</i>
Enter an optional description; end it with an empty line:
<i>Someone cracked me and got my key and passphrase</i>

Reason for revocation: Key has been compromised
Someone cracked me and got my key and passphrase
Is this okay? <i>y</i>

You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"
1024-bit DSA key, ID 75447B14, created 2002-12-08

ASCII armored output forced.
Revocation certificate created.

Please move it to a medium which you can hide away; if Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just in case
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!
</pre>

<p>
Il comando <c>gpg --list-keys</c> elenca le chiavi presenti nel tuo portachiavi
pubblico. Puoi utilizzarlo per vedere l'ID della tua chiave, necessario per
creare il certificato di revoca. Ora è consigliabile copiare l'intera directory
.gnupg e la "revocation ASCII armor" (revoke.asc) in un media sicuro (due floppy
o un CD-R da conservare in un luogo sicuro). Ricorda che revoke.asc può essere
utilizzato per revocare le tue chiavi e renderle inutilizzabili in futuro.
</p>

<note>
Se hai diversi indirizzi e-mail che vuoi utilizzare con questa chiave, puoi
lanciare <c>gpg --edit-key YOUR_ID</c> e usare il comando <c>adduid</c>.
Ti verranno richiesti nome, e-mail ed un commento del secondo ID che verrà
utilizzato.
</note>

</body>
</section>
<section>
<title>Esportazione delle chiavi</title>
<body>

<p>
Per esportare la tua chiave, digita <c>gpg --armor --output john.asc --export
john@nowhere.someplace.flick</c>. Puoi usare quasi sempre l'ID della chiave o
qualcos'altro che la identifichi (qui abbiamo usato un indirizzo e-mail). Ora
hai a disposizione un john.asc che puoi mandare agli amici, o mettere nella
tua home page in modo che le persone possano comunicare con te in modo sicuro.
</p>

</body>
</section>
<section>
<title>Importazione delle chiavi</title>
<body>

<p>
Per aggiungere un file al tuo portachiavi pubblico, devi prima importarlo, quindi
controllare il fingerprint della chiave. Dopo aver verificato il fingerprint dovresti
validarla.
</p>

<note>
Dovresti verificare con attenzione le chiave. Questo è uno dei punti deboli della
crittografia a chiave pubblica.
</note>

<p>
Ora aggiungeremo la chiave pubblica di Luis Pinto (un mio amico) al nostro
portachiavi pubblico. Dopo averlo chiamato chiedendogli il fingerprint della
sua chiave, ho confrontato il fingerprint con l'output del comando <c>fpr</c>.
Poichè la chiave è autentica, la aggiungo al portachiavi pubblico. In questo
caso, in particolare, la chiave di Luis scadrà il 2003-12-01, per cui mi viene
richiesto se voglio che la mia firma scada lo stesso giorno.
</p>

<pre caption="Importing and signing keys">
# <i>gpg --import luis.asc</i>
gpg: key 462405BB: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
# <i>gpg --list-keys</i>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;
sub  2048g/96D6CDAD 2002-12-08

pub  1024D/462405BB 2002-12-01 Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;
      uid                            Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
sub  4096g/922175B3 2002-12-01 [expires: 2003-12-01]

# <i>gpg --edit-key lmpinto@dei.uc.pt</i>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.


gpg: checking the trustdb
gpg: checking at depth 0 signed=0 ot(-/q/n/m/f/u)=0/0/0/0/0/1
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
sub  4096g/922175B3  created: 2002-12-01 expires: 2003-12-01
(1)  Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
(2). Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;

Command> <i>fpr</i>
pub  1024D/462405BB 2002-12-01 Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
           Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB

Command> <i>sign</i>
Really sign all user IDs? <i>y</i>

pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
           Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB

           Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
           Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;

This key is due to expire on 2003-12-01.
Do you want your signature to expire at the same time? (Y/n) <i>Y</i>
How carefully have you verified the key you are about to sign actually belongs
to the person named above?  If you don't know what to answer, enter "0".

 (0) I will not answer. (default)
 (1) I have not checked at all.
 (2) I have done casual checking.
 (3) I have done very careful checking.

 Your selection? <i>3</i>
Are you really sure that you want to sign this key
with your key: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"

I have checked this key very carefully.

Really sign? <i>y</i>

You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) &lt;john@nowhere.someplace.flick&gt;"
1024-bit DSA key, ID 75447B14, created 2002-12-08

Command> <i>check</i>
uid  Luis Pinto &lt;lmpinto@dei.uc.pt&gt;
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhe
uid  Luis Pinto &lt;lmpinto@student.dei.uc.pt&gt;
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) &lt;john@nowhe

</pre>
</body>
</section>
</chapter>

<chapter>
<title>Scambiare le chiavi con i keyserver</title>
<section>
<title>Invio delle chiavi ai keyserver</title>
<body>

<p>
Ora che hai la tua chiave, è una buona idea inviarla ai keyserver mondiali.
Ci sono molti keyserver nel mondo e la maggior parte scambia le chiavi tra
loro. Ora manderemo la chiave di Luis al server pgp.mit.edu. Questo server
utilizza HTTP, quindi se hai bisogno di utilizzare un proxy per il traffico
HTTP non dimenticare di impostarlo (<c>export http_proxy=http://proxy_host:port/</c>).
Il comando per inviare la chiave è <c>gpg --keyserver pgp.mit.edu --keyserver-options
honor-http-proxy --send-key john@nowhere.someplace.flick</c> . Se non hai
bisogno di un proxy HTTP puoi rimuovere <e>--keyserver-options honor-http-proxy</e>.
</p>

<p>
Puoi mandare al key server anche le chiavi di altre persone dopo averle firmate.
Potremmo mandare la chiave di Luis Pinto al keyserver. In questo modo qualcuno
che si fida della nostra chiave potrebbe usare la firma che vi abbiamo apposto
per ritenere fidata anche la chiave di Luis.
</p>

</body>
</section>
<section>
<title>Recupero delle chiavi dai keyserver</title>
<body>

<p>
Ora andremo a cercare la chiave di Gustavo Felisberto e la aggiungeremo al
portachiavi di John Doe (nel caso in cui non l'avessi notato, Gustavo Felisbero
è la persona che sta scrivendo questa guida :) ).
</p>

<pre caption="Ricerca delle chiavi sul keyserver">
# <i>gpg --keyserver pgp.mit.edu --keyserver-options honor-http-proxy --search-keys humpback@felisberto.net</i>
gpg: searching for "humpback@felisberto.net" from HKP server pgp.mit.edu
Keys 1-5 of 5 for "humpback@felisberto.net"
(1)	Gustavo Felisberto (apt-get install anarchy) &lt;humpback@felisberto.net&gt; 1024
        created 2002-12-06, key B9F2D52A
(2)	Gustavo Felisberto &lt;humpback@altavista.net&gt; 1024
        created 1999-08-03, key E97E0B46
(3)	Gustavo A.S.R. Felisberto &lt;humpback@altavista.net&gt; 1024
        created 1998-12-10, key B59AB043
(4)	Gustavo Adolfo Silva Ribeiro Felisberto &lt;humpback@altavista.net&gt; 1024
        created 1998-08-26, key 39EB133D
(5)	Gustavo Adolfo Silva Ribeiro Felisberto &lt;humpback@altavista.net&gt; 1024
        created 1998-06-14, key AE02AF87
        Enter number(s), N)ext, or Q)uit &gt;<i>1</i>
gpg: requesting key B9F2D52A from HKP keyserver pgp.mit.edu
gpg: key B9F2D52A: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>

<p>
Come si può vedere dalla risposta del server, ho inviato diverse chiavi al
keyserver, ma al momento uso solo B9F2D52A. Ora John Doe può scaricarla e firmarla,
se la ritiene fidata.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Lavorare con documenti</title>
<section>
<title>Criptare e firmare</title>
<body>

<p>
Adesso supponiamo che tu abbia un file che desideri inviare a Luis.
Puoi criptarlo, firmarlo o criptarlo e firmarlo. Criptare significa che
solo Luis sarà in grado di aprirlo. La firma conferma a Luis che sei stato
proprio tu a creare il file.
</p>

<p>I seguenti comandi fanno esattamente questo: criptano, firmano e criptano/firmano.</p>
<pre caption="Controllo delle chiavi nei file e decodifica">
# <i>gpg --output doc.gpg --encrypt --recipient lmpinto@dei.uc.pt doc_to_encrypt</i>
# <i>gpg --output doc.gpg --sign --recipient lmpinto@dei.uc.pt doc_to_sign</i>
# <i>gpg --output doc.gpg --encrypt --sign --recipient lmpinto@dei.uc.pt doc_to_encrypt_and_sign</i>
</pre>

<p>
Questa procedura crea file binari. Se vuoi creare file ASCII aggiungi
<c>--clearsign</c> all'inizio del comando.
</p>

</body>
</section>
<section>
<title>Decriptare e verificare le firme</title>
<body>

<p>
Supponiamo che tu abbia ricevuto un file criptato con la tua chiave
pubblica. Il comando per decriptarlo è <c>gpg --output document --decrypt encrypted_doc.gpg</c>.
Questo decripterà il documento e verificherà la firma (se ce n'è una).
</p>

</body>
</section>
</chapter>
<chapter>
<title>Interfaccia a GnuPG</title>
<section>
<title>kgpg</title>
<body>

<p>
Kpgp è una bella GUI per GNUPG. Nella schermata principale è possibile incollare
il testo che si vuole firmare o criptare oppure incollare il testo ASCII criptato che
si vuole decriptare.
</p>

<figure link="http://www.ibiblio.org/web-gentoo/images/kgpg1.png" short="kgpg main window"/>

<p>
In questa immagine si vede la schermata principale di Kgpg con del testo criptato
incollato. Da qui è possibile decriptarlo (sarà richiesta la propria password), criptare
altri file, incollare dell'altro testo da firmare...
</p>

<figure link="http://www.ibiblio.org/web-gentoo/images/kgpg2.png" short="kgpg key manage window"/>

<p>
Qui si vede la schermata di gestione delle chiavi. Vediamo la nostra bella
chiave per John Doe, le due chiavi fidate per Gustavo e Luis e la chiave
non fidata per Daniel Robbins (non l'ho ancora chiamato per controllare
il suo fingerprint :) ).
</p>

<figure link="http://www.ibiblio.org/web-gentoo/images/kmail_security.png" short="kmail security options OpenGPG"/>

<figure link="http://www.ibiblio.org/web-gentoo/images/kmail_identity.png" short="kmail identity options OpenGPG key"/>

</body>
</section>
<section>
<title>Mozilla Enigmail</title>
<body>

<p>
Mozilla dispone, dalla verisione 1.0, di Enigmail, un plugin per il client
e-mail che è molto semplice da configurare. Si deve semplicemente andare in
Preferences -&gt; Privacy &amp; Security -&gt; Enigmail, dove è necessario
inserire la propria chiave per l'e-mail.
</p>

<p>
I messaggi che arrivano con una firma pgp o gpg non fidata vengono contrassegnati
con una penna rotta. Quelli che hanno una firma valida appariranno con una
penna tutta intera. Enigmail può anche recuperare le chiavi dai keyserver, ma in caso
di problemi, stampa alcuni strani messaggi di errore (ma ti ricordi ancora della linea
di comando, giusto?).
</p>

</body>
</section>
<section>
<title>KMail</title>
<body>

<p>
Anche KMail è molto facile da importare. Ecco alcune immagini che dimostrano
come farlo. Sostanzialmente bisogna dire a KMail di usare GPG e quindi specificare
la chiave con cui firmare.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Epilogo, ringraziamenti e copyright</title>
<section>
<title>Alcuni problemi</title>
<body>

<p>
Ho avuto alcuni problemi con foto inserite nelle chiavi. Controlla la versione che
stai utilizzando. Se hai GnuPG 1.2.1-r1 e superiori non ci dovrebbero essere
problemi. In ogni caso, la maggior parte dei keyserver non gradisce chiavi con foto.
</p>

</body>
</section>
<section>
<title>Cosa manca</title>
<body>

<p>
Gpg è uno strumento molto complesso e permette di fare molto di più rispetto
a quanto è stato trattato qui. Questo documento è stato concepito per i nuovi
utenti GnuPG. Per maggiori informazioni, vedi il <uri link="http://www.gnupg.org">sito di GnuPG</uri>.
</p>

<p>
Non ho trattato altri strumenti come pgp4pine, gpgpine, evolution e gli
strumenti per Windows; probabilmente amplierò questo strumento in futuro.
</p>

</body>
</section>
<section>
<title>Ringraziamenti</title>
<body>

<p>
Il <uri link="http://www.gnupg.org">GnuPG Handbook</uri>
di John Michael Ashley è semplicemente meraviglioso. E' un
ottimo libro per i principianti.
</p>

<p>I fantastici ragazzi del canale #gentoo-doc.</p>

<p>Tiago Serra per avermi riportato sulla via della privacy.</p>

</body>
</section>
<section>
<title>Copyright</title>
<body>

<p>
Copyright by Gustavo Felisberto. Gentoo Technologies Inc. è autorizzata a pubblicare
il documento in questa forma.
</p>

</body>
</section>
</chapter>
</guide>
