<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header $ -->

<guide link="/doc/it/mysql-upgrading.xml" lang="it">
<title>Guida all'aggiornamento per MySQL 4.* o 5.0.*</title>

<author title="Autore">
  <mail link="citizen428@gentoo.org">Michael Kohl</mail>
</author>
<author title="Autore">
  <mail link="vivo@gentoo.org">Francesco Riosa</mail>
</author>
<author title="Traduttore">
  <mail link="lucamarturana@gmail.com">Luca Marturana</mail>
</author>

<abstract>
Il team MySQL è fiero di annunciare che MySQl 5.0 sarà presto disponibile nel
ramo stabile di Gentoo. Questo documento descrive come effettuare l'upgrade
a MySQL 4.* e a MySQL 5.0.*.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.12</version>
<date>2006-09-10</date>

<chapter>
<title>Upgrade diretto, consigliato per la migrazione da 4.1 a 5.0</title>
<section>
<body>

<p>
Il motore myisam della versione 4.1 è abbastanza maturo da permette un upgrade
diretto alla successiva major version di MySQL.
</p>

<pre caption="Upgrade diretto da 4.1 a 5.0.*">
# <i>quickpkg dev-db/mysql</i>
# <i>alias MYSQL="mysql --user=root --password=</i><comment>'yourpassword'</comment><i>"</i>
# <i>DATADIR=$(MYSQL --batch --raw --silent --skip-column-names \</i>
   <i>--execute='SHOW variables LIKE "datadir";' \</i>
   <i>| sed -e 's|datadir[ \t]||')</i>
# <i>MYSQL --execute="FLUSH TABLES WITH READ LOCK;"</i>
# <i>tar -cjpvf ~/mysql.$(date +%F"T"%H-%M).tar.bz2 \</i>
   <i>/etc/mysql/conf.d/mysql /etc/mysql/my.cnf "${DATADIR}"</i>
# <i>MYSQL --execute="UNLOCK TABLES;"</i>
# <i>tar -tjvf ~/mysql.*.tar.bz2</i>
# <i>emerge -av "&gt;mysql-5.0"</i>
# <i>dispatch-conf</i>
# <i>revdep-rebuild</i>
# <i>/etc/init.d/mysql restart</i>
# <i>mysql_upgrade_shell --user=root --password=</i><comment>'your_password'</comment><i> \</i>
   <i>--protocol=tcp --datadir="${DATADIR}"</i>
# <i>/etc/init.d/mysql restart</i>
# <i>unset DATADIR</i>
# <i>unalias MYSQL</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Aggiornamento da precedenti versioni di MySQL</title>
<section>
<body>

<p>
Gli utenti che aggiornano da una vecchia versione di MySQL (&lt;4.0.24) devono
prima installare MySQL 4.0.25. Chi invece già usa la versione corrente può
tranquillamente saltare questa sezione e continuare con la <uri link="#backup">prossima</uri>.
</p>

<pre caption="Semplice aggiornamento">
# <i>emerge -av --buildpkg "&lt;mysql-4.1"</i>
</pre>

</body>
</section>
</chapter>

<chapter id="backup">
<title>Creazione backup di tutti i dati correnti</title>
<section>
<body>

<p>
Uno dei più importanti compiti di ogni amministratore è quello di fare un
backup di tutti i dati. Ecco come fare:
</p>

<pre caption="Backup di tutti i database">
# <i>mysqldump \</i>
  <i>-uroot \</i>
  <i>--password=</i><comment>'propria_password'</comment><i> \</i>
  <i>-hlocalhost \</i>
  <i>--all-databases \</i>
  <i>--opt \</i>
  <i>--allow-keywords \</i>
  <i>--flush-logs \</i>
  <i>--hex-blob \</i>
  <i>--master-data \</i>
  <i>--max_allowed_packet=16M \</i>
  <i>--quote-names \</i>
  <i>--result-file=BACKUP_MYSQL_4.0.SQL</i>
</pre>

<p>
Adesso dovrebbe esserci il file <path>BACKUP_MYSQL_4.0.SQL</path>, che più
avanti può essere utilizzato per ripristinare i dati. I dati sono stati
scritti in sintassi SQL, Structured Query Language.
</p>

<p>
Probabilmente converrà controllare se il backup funziona prima di procedere
ulteriormente.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Aggiornamento da versioni recenti di MySQL</title>
<section>
<body>

<p>
Se si è saltato il passo #1, adesso si deve creare un pacchetto di backup
(del server database, non dei dati) della versione correntemente installata:
</p>

<pre caption="Pacchetto binario di backup">
# <i>quickpkg dev-db/mysql</i>
</pre>

<p>
Ora bisogna eliminare la versione installata con tutti i suoi dati:
</p>

<pre caption="Disinstallazione MySQL">
# <i>/etc/init.d/mysql stop</i>
# <i>emerge -C mysql</i>
# <i>tar cjpvf ~/mysql.$(date +%F"T"%H-%M).tar.bz2 /etc/mysql/my.cnf /var/lib/mysql/</i>
# <i>ls -l ~/mysql.*</i>
# <i>rm -rf /var/lib/mysql/ /var/log/mysql</i>
</pre>

<note>
Esistono due differenti tipi di backup: SQL, il quale è possibile usarlo con
varie versioni di MySQL, e un altro che permette di ripristinare velocemente
tutti i database. Quest'ultimo verrà trattato più dettagliatamente in
seguito.
</note>

<p>
Dopo aver eliminato completamente la vecchia installazione di MySQL, si può
procedere con l'installazione della nuova versione. Notare che
<c>revdep-rebuild</c> è necessario per riemergere i pacchetti linkati a
MySQL.
</p>

<pre caption="Aggiornamento dei binari">
# <i>emerge -av "&gt;mysql-4.1"</i>
<comment>(Aggiornare i file di configurazione, è possibile anche usare dispatch-conf)</comment>
# <i>etc-update</i>
# <i>revdep-rebuild</i>
</pre>

<p>
Adesso si deve configurare la nuova versione installata di MySQL e riavviare il
demone:
</p>

<pre caption="Configurazione di base MySQL 4.1">
# <i>emerge --config =mysql-4.1.<comment>&lt;micro_version&gt;</comment></i>
# <i>/etc/init.d/mysql start</i>
</pre>

<p>
Infine bisogna importare il backup creato in precedenza:
</p>

<impo>
Per default il file <path>/etc/mysql/my.cnf</path> imposta il logging binario
(<c>log-bin</c>). Ciò logghera ogni singola transazione che modifica i dati. Se
si possiede un database molto grande (1GB o più), si può arrivare a creare file
estremamente grandi che possono consumare velocemente lo spazio del disco. Se
si possiede poco spazio, può essere utile disattivare il logging binario.
</impo>

<impo>
Il set di caratteri predefinito in MySQL 4.1 o superiore è <c>utf8</c>. Se i
dati contangono caratteri <e>non</e>-ASCII, probabilmente si vorrà preservare
il set di caratteri del database sostituendo tutte le ricorrenze di <c>utf8</c>
con <c>latin1</c> nel file <path>/etc/mysql/my.cnf</path>. Maggiori
informazioni è possibile trovarle nel capitolo <uri link="#On_charset_conversion">
Conversione charset</uri>.
</impo>

<impo>
Il database di amministrazione <c>mysql</c> che contiene i nomi degli utenti,
password e altro è e <b>deve</b> essere in utf8.
</impo>

<pre caption="Importazione backup SQL">
# <i>cat BACKUP_MYSQL_4.0.SQL \</i>
     <i>| mysql \</i>
     <i>-uroot \</i>
     <i>--password=</i><comment>'propria_password'</comment><i> \</i>
     <i>-hlocalhost \</i>
     <i>--max_allowed_packet=16M</i>

# <i>mysql_fix_privilege_tables \</i>
     <i>--defaults-file=/etc/mysql/my.cnf \</i>
     <i>--user=root \</i>
     <i>--password=</i><comment>'propria_password'</comment><i> \</i>
</pre>

<p>
Adesso, riavviando il demone di MySQL, se tutto va come previsto si avrà MySQL
con versione 4.1.x perfettamente funzionante. :-)
</p>

<pre caption="Riavviare MySQL">
# <i>/etc/init.d/mysql restart</i>
</pre>

<p>
Se ci sono stati problemi durante il processo di upgrade, per favore riportarli
su <uri link="http://bugs.gentoo.org">Gentoo Bugzilla</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Ripristinare la vecchia versione di MySQL 4.0</title>
<section>
<body>

<p>
Se non si è soddisfatti di MySQL 4.1, è possibile ritornare indietro alla
4.0.
</p>

<pre caption="Ritorno alla vecchia versione">
# <i>/etc/init.d/mysql stop</i>
# <i>emerge -C mysql</i>
# <i>rm -rf /var/lib/mysql/ /var/log/mysql</i>
# <i>emerge --usepkgonly "&lt;mysql-4.1"</i>
<comment>(Sostituire &lt;timestamp&gt; con quello usato durante la creazione
del backup.)</comment>
# <i>tar -xjpvf mysql.&lt;timestamp&gt;.tar.bz2 -C /</i>
# <i>/etc/init.d/mysql start</i>
</pre>

<impo>
Se altri pacchetti oltre <c>dev-db/mysql</c> sono stati installati seguendo
questa guida, è necessario eseguire un <c>revdep-rebuild</c> per essere sicuri
che ogni client sia linkato alla corretta libreria mysqlclient.
</impo>

</body>
</section>
</chapter>

<chapter id="On_charset_conversion">
<title>Conversione del charset</title>
<section>
<title>Introduzione</title>
<body>

<p>
Questo capitolo non è stato scritto per essere una guida completa su come
effettuare queste conversioni, ma come una breve lista di suggerimenti che
l'utente può approfondire da solo in seguito.
</p>

<p>
Convertire un database può essere un lavoro complesso e la difficoltà aumenta
con il variare dei dati presenti. Per esempio quando si lavora con serialized
object o blobs è uno dei casi dove è difficile effettuare la conversione senza
problemi.
</p>

</body>
</section>
<section>
<title>Indici</title>
<body>

<p>
Ogni carattere utf-8 è considerato lungo 3 byte compreso un indice. Gli indici
in MySQL possono essere grandi al massimo 1000 byte (767 per le tabelle di
InnoDB). Notare che i limiti sono misurati in byte, considerato che la
lunghezza di una colonna è interpretata come un numero di caratteri.
</p>

<p>
MySQL può inoltre creare indici come parti di una colonna, questo può essere
un po' d'aiuto. Qui sotto ci sono alcuni esempi:
</p>

<pre caption="Creare indici utilizzando prefissi">
$ <i>mysql -uroot -p'<comment>your_password</comment>' test</i>

mysql> <i>SHOW variables LIKE "version" \G</i>
*************************** 1. row ***************************
Variable_name: version
Value: <comment>5.0.24-log</comment>
1 row in set (0.00 sec)

mysql> <i>CREATE TABLE t1 (</i>
->   <i>c1 varchar(255) NOT NULL default '',</i>
->   <i>c2 varchar(255) NOT NULL default ''</i>
->   <i>) ENGINE=MyISAM DEFAULT CHARSET=utf8;</i>
Query OK, 0 rows affected (0.01 sec)

mysql> <i>ALTER TABLE t1</i>
->   <i>ADD INDEX idx1 ( c1 , c2 );</i>
<comment>ERROR 1071 (42000): Specified key was too long; max key length is 1000 bytes</comment>

mysql> <i>ALTER TABLE t1</i>
->   <i>ADD INDEX idx1 ( c1(165) , c2(165) );</i>
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> <i>CREATE TABLE t2 (</i>
->   <i>c1 varchar(255) NOT NULL default '',</i>
->   <i>c2 varchar(255) NOT NULL default ''</i>
->   <i>) ENGINE=MyISAM DEFAULT CHARSET=sjis;</i>
Query OK, 0 rows affected (0.00 sec)

mysql> <i>ALTER TABLE t2</i>
->   <i>ADD INDEX idx1 ( c1(250) , c2(250) );</i>
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> <i>CREATE TABLE t3 (</i>
->   <i>c1 varchar(255) NOT NULL default '',</i>
->   <i>c2 varchar(255) NOT NULL default ''</i>
->   <i>) ENGINE=MyISAM DEFAULT CHARSET=latin1;</i>
Query OK, 0 rows affected (0.00 sec)

mysql> <i>ALTER TABLE t3</i>
->   <i>ADD INDEX idx1 ( c1 , c2 );</i>
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0
</pre>

</body>
</section>
<section>
<title>Ambiente</title>
<body>

<p>
Il sistema deve essere configurato per supportare il locale UTF-8. Maggiori
informazioni è possibile trovarle nelle guide: <uri link="/doc/it/utf-8.xml">
Usare UTF-8 con Gentoo</uri> e <uri link="/doc/it/guide-localization.xml">
Guida alla localizzazione</uri>
</p>

<p>
In questo esempio, imposteremo alcune variabili d'ambiente in <path>
/etc/env.d/02locale</path> per far in modo che il sistema utilizzi il locale
inglese UTF-8:
</p>

<pre caption="/etc/env.d/02locale">
LC_ALL=en_US.UTF-8
LANG=en_US.UTF-8
</pre>

<p>
Dopo aver configurato il file è necessario lanciare <c>env-update &amp;&amp;
source /etc/profile</c>
</p>

</body>
</section>
<section>
<title>iconv</title>
<body>

<p>
<c>iconv</c>, fornito dal pacchetto <c>sys-libs/glibc</c>, è utilizzato per
convertire file di testo da una codifica ad un'altra. La stessa funzione si
può ottenere con il pacchetto <c>app-text/recode</c>.
</p>

<pre caption="Usare iconv">
<comment>(Da latin1 a utf8)</comment>
$ <i>iconv -f ISO-8859-15 -t UTF-8 file1.sql &gt; file2.sql</i>

<comment>(Da Japanese a utf8)</comment>
$ <i>iconv -f ISO2022JP -t UTF-8 file1.sql &gt; file2.sql</i>
</pre>

<p>
<c>iconv</c> può essere utilizzato per recodificare dei dump sql anche se
l'ambiente non è impostato su utf8.
</p>

</body>
</section>
<section>
<title>SQL Mangling</title>
<body>

<p>
E' possibile utilizzare le funzioni di MySQL <c>CONVERT()</c> e <c>CAST()</c>
per convertire i dati nei proprio script SQL.
</p>

</body>
</section>
<section>
<title>Apache (server web)</title>
<body>

<p>
Per usare utf-8 con apache, bisogna modificare le seguenti variabili nel file
<path>httpd.conf</path>: AddDefaultCharset, CharsetDefault, CharsetSourceEnc.
Se i file html non sono codificati in utf-8, essi <b>devono</b> essere
convertiti usando <c>iconv</c> o <c>recode</c>.
</p>

</body>
</section>
</chapter>

</guide>
