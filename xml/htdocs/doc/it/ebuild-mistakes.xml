<?xml version='1.0' encoding="UTF-8"?>

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/Attic/ebuild-mistakes.xml,v 1.3 2004/10/16 19:55:07 vapier Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/it/ebuild-mistakes.xml" lang="it">

<title>Errori comuni nella realizzazione di Gentoo Ebuild</title>
<author title="Autore">
  <mail link="liquidx@gentoo.org">Alastair Tse</mail>
</author>
<author title="Traduzione">
  <mail link="freeman235@virgilio.it">Marco Salvi</mail>
</author>

<abstract>
Questo documento illustra i frequenti errori di scrittura e di invio degli ebuild 
commessi dagli sviluppatori o da persone che contribuiscono al progetto gentoo.
</abstract>

<license/>

<version>1.0</version>
<date>10 Febbraio 2004</date>

<chapter>
<title>Errori comuni nella scrittura degli ebuild</title>
<section>
<title>Introduzione</title>
<body>

<p>
Ecco una lista degli errori comuni che si vedono negli ebuild forniti dagli utenti
gentoo; è buona norma fare in modo che gli ebuild realizzati non violino nessuna 
delle seguenti regole. Prima di rendere pubblico ogni ebuild , assicurarsi di aver 
letto la <uri link="/doc/en/policy.xml">Gentoo Development Policy</uri>
e <uri link="/doc/en/gentoo-howto.xml">Gentoo Ebuild HOWTO</uri>. Inoltre è�utile leggere
un paio (anche pi di due) di ebuild presenti nel portage per capire ancora meglio
lo stile con il quale sono scritti.
</p>

<p>
Potrebbe essere utile anche leggere un paio di ebuild che utilizzano eclasses e capire
come usarle leggendo l' <uri
link="/doc/en/eclass-howto.xml">Eclass HOWTO</uri>. Infine è�necessario leggere 
<uri link="/doc/en/ebuild-submit.xml">Contributing Ebuilds Guide</uri> molto attentamente
prima di rendere pubblici i propri ebuild.
</p>

</body>
</section>
<section>
<title>Header Mancanti/non validi/corrotti</title>
<body>

<p>
Quando si inviano gli ebuild, l'header dovrebbe essere <e>esattamente</e> lo stesso
di <path>/usr/portage/skel.ebuild</path>. La cosa più importante è�non modificarlo
in nessun modo ed essere sicuri che l' <c>&#36;Header: &#36;</c> line sia intatta.
</p>

<p>
Le prime tre righe <e>devono</e> essere così�:
</p>

<pre caption="Header valido">
# Copyright 1999-2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# &#36;Header: &#36;
</pre>

<p>
Solamente se si stà�mandando una versione dell'ebuild modificata o munita di patch rende necessario
la modifica della linea dell' <c>&#36;Header: &#36;</c>. Ma la linea deve esserci.
Quando gli sviluppatori controllano l'ebuild nel CVS, viene�modificato quell'header con le informazioni
appropriate riguardo la versione e la data. Per questo non c'è�bisogno di modificarlo.
</p>

</body>
</section>
<section>
<title>IUSE Mancanti</title>
<body>

<p>
L'omissione di gran lunga più comune è�quella della variabile IUSE; è�necessario (in accordo al
<uri link="/doc/en/gentoo-howto.xml">Gentoo HOWTO</uri>) includere la variabile IUSE anche 
se non ci sono USE flags in uso. Se non ci sono USE flags supportate, bisogna aggiungere solamente la linea
seguente:
</p>

<pre caption="IUSE vuota">
IUSE=""
</pre>

</body>
</section>
<section>
<title>Ridefinire P, PV, PN, PF</title>
<body>

<p>
Non bisogna mai ridefinire queste variabili. Si usa sempre MY_P, MY_PN, MY_PV,
P0, etc; è�buona norma guardare altri ebuild che lo fanno nel portage per avere più informazioni. La maggior
parte degli ebuild usa il "Parameter Expansion". Si legga per favore la pagina man di bash per 
capire come funziona il "Parameter Expansion".
</p>

<p>
Comunque, se nel caso si trovi un package che li ridefinisce, non si deve copiarlo. Và�segnalato un bug riguardo
a quel preciso ebuild.
</p>

</body>
</section>
<section>
<title>Includere la versione numerica nel SRC_URI e nell' S</title>
<body>

<p>
Non bisognerebbe includere la versione numerica nel SRC_URI e nell' S. Si cerca
sempre di usare ${PV} o ${P}. Questo accorgimento rende il mantenimento dell'ebuild più 
semplice. Se una versione numerica è�diversa da quella dei sorgenti/tarball , si usa MY_P.
Per esempio dev-python/pyopenal contiene un tarball chiamato PyOpenAL, quindi si modifica 
in questo modo:
</p>

<pre caption="Esempio di modifica della versione">
MY_P=${P/pyopenal/PyOpenAL}
SRC_URI="http://oomadness.tuxfamily.org/downloads/${MY_P}.tar.gz"
S=${WORKDIR}/${MY_P}
</pre>

</body>
</section>
<section>
<title>Errori sintattici di DEPEND</title>
<body>

<p>
Ci sono molto cose sbagliate nei campi DEPEND e RDEPEND realizzati dagli utenti.
Ecco alcuni punti importanti da seguire .
</p>

<ul>
  <li>
    <e>Includere sempre la CATEGORY.</e><br />
    Per esempio, si usa <c>&gt;=x11-libs/gtk+-2</c> e non <c>&gt;=gtk+-2</c>.
  </li>
  <li>
    <e>Non mettere un asterisco(*) per &gt;= dependencies.</e><br />
    Per esempio dovrebbe essere <c>&gt;=x11-libs/gtk+-2</c> invece che
    <c>&gt;=x11-libs/gtk+-2*</c>.
  </li>
  <li><e>Specifico per le GTK. Si usa sempre =x11-libs/gtk+-1.2* per le applicazionini GTK+1 .</e></li>
  <li>
    <e>Non inserire mai dipendenze su un meta pacchetto.</e><br />
    Quindi non si devono inserire dipendenze su gnome-base/gnome , si inserisce sempre una 
    dipendenza sulla specifica libreria come libgnome.
  </li>
  <li>
    <e>Una dipendenza per ogni linea.</e><br />
    Non si mettono più dipendenze sulla stessa linea. Rende il tutto più brutto e difficile
    da seguire.
  </li>
</ul>

</body>
</section>
<section>
<title>DEPEND �incompleta</title>
<body>

<p>
Questo è�un altro errore molto comune. La persona che crea l'ebuild lo inserisce nel portage
vericando che funzioni e basta , senza verificare che le dipendenze siano corrette. Ecco alcuni
consigli per trovare le dipendenze corrette.
</p>

<ul>
  <li>
    <e>Guardare nel configure.in o nel configure.ac</e><br />
    Bisogna guardare per eventuali controlli del pacchetto quà�. Le cose da controllare sono
    check del pkg-config o le funzioni AM_* che riguardano una specifica versione.
  </li>
  <li>
    <e>Guardare i file inclusi in .spec</e><br />
    Una buona indicazione riguardo le dipendenze si ricava dai file .spec.
    Comunque non vanno considerati come la lista definitiva delle dipendenze
  </li>
  <li>
    <e>Guardare il sito web dell'applicazione/libreria</e><br />
    Controllare il sito web dell'applicazione per evetuali dipendenze che vengono
    considerate necessarie.
  </li>
  <li>
    <e>Leggere il README e l'INSTALL del pacchetto</e><br />
    Solitamente contengono informazioni utili riguardo la compilazione e l'installazione 
    del pacchetto.
  </li>
  <li>
    <e>Ricordare le dipendenze non-binarie come pkg-config, i programmi per la generazione
    della documentazione, etc.</e><br />
    Solitamente il processo di compilazione richiede alcune dipendenze come intltool,
    libtool, pkg-config, doxygen, scrollkeeper, gtk-doc, etc. Bisogna assicurarsi che siano 
    indicate chiaramente .
  </li>
</ul>

</body>
</section>
<section>
<title>Licenza non valida</title>
<body>

<p>
Un altro errore comune che commettono gli utenti quando realizzano un ebuild è�quello 
di includere una licenza non valida. Per esempio, <c>GPL</c> non è�una licenza valida. 
Si deve specificare <c>GPL-1</c> o <c>GPL-2</c>. Lo stesso con <c>LGPL</c>. Ci si assicuri 
che l'indicazione della licenza nel campo <c>LICENSE</c> sia qualcosa che esiste in 
<path>/usr/portage/licenses</path>. Come suggerimento, controllare <path>COPYING</path> 
in un tarball di sorgenti per la licenza. Se un pacchetto non lo specifica viene usata la
<c>GPL-1</c> o <c>GPL-2</c>, più probabile la <c>GPL-2</c>.
</p>

<p>
Se la licenza per il pacchetto che si realizza è�unica e non presente in 
<path>/usr/portage/licenses/</path>, si dove mandare la nuova licenza con un file separato.
</p>

</body>
</section>
<section>
<title>Architetture non testate in KEYWORDS</title>
<body>

<p>
Per favore, non si devono aggiungere altre architetture in KEYWORDS ameno che l'ebuild sia stato testato per 
una specifica. Inoltre tutti i nuovi ebuild dovrebbero essere ~x86 o per qualsiasi altra architettura.
Ci si assicuri quando si aggiorna una versione che le KEYWORDS stabili siano identificate da
<c>~</c>.
</p>

</body>
</section>
<section>
<title>SLOT mancanti</title>
<body>

<p>
Bisogna assicurarsi di avere la variabile SLOT nell'ebuild. Se non presente và�aggiunta,
e mai più tolta. Và�messa in:
</p>

<pre caption="Valore di default della variabile SLOT">
SLOT="0"
</pre>

</body>
</section>
<section>
<title>DESCRIPTION e HOMEPAGE sbagliate</title>
<body>

<p>
Per favore si verifichi se la varibile HOMEPAGE è�giusta e indirizza l'utente sulla pagina web reale
del pacchetto nel caso in cui voglia trovare più informazioni a riguardo. Ci si assicuri anche che la 
DESCRIPTION non sia troppo lunga. Una buona descrizione evidenzia le principali funzioni con poche parole.
</p>

</body>
</section>
<section>
<title>Spazi usati erroneamente invece che i TABS</title>
<body>

<p>
Non è�divertente riformattare linee di codice di un ebuild perchè�l'utente
non ha seguito le linee guida riguardo l'uso dei TABS invece che gli spazi.
Quindi <e>per favore</e> usare i tabs!
</p>

</body>
</section>
<section>
<title>Spazi bianchi</title>
<body>

<p>
Si ricorda di eseguire repoman sul proprio ebuild così�da verificare se ci sono 
spazi bianchi alla fine di una riga o su righe vuote.
</p>

</body>
</section>
<section>
<title>Aggiungere in modo ridondante S=${WORKDIR}/${P}</title>
<body>

<p>
Se <c>S=${WORKDIR}/${P}</c>, non si deve aggiungerlo al proprio ebuild. Questo è�considerato 
implicito, si deve agguingere solo se è qualcosa di diverso da 
<c>${WORKDIR}/${P}</c>.
</p>

</body>
</section>
<section>
<title>Documentazione mancante</title>
<body>

<p>
Se il proprio pacchetto contiene della documentazione, ci si assicuri di 
installarla usando <c>dodoc</c> o mettendola in <path>/usr/share/doc/${PF}</path>. 
Ricordare di controllare eventuali errori quando si esegue <c>dodoc</c>/<c>doins</c>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Errori comuni nell'inserire ebuild nel portage </title>
<section>
<title>Introduzione</title>
<body>

<p>
Bisogna mandare gli ebuild in maniera corretta seguendo <uri
link="/doc/en/ebuild-submit.xml">Contributing Ebuild HOWTO</uri> sulla <uri
link="/doc/en/index.xml">Gentoo Docs Page</uri>.
</p>

</body>
</section>
<section>
<title>Realizzare un tarball di un ebuild</title>
<body>

<p>
Fare molta attenzione ! , non inviare ebuild come tarball; è�buona cosa inviare una patch 
separatamente in modo che si possa esaminarla più facilmente.
</p>

</body>
</section>
<section>
<title>Mettere online gli ebuild</title>
<body>

<p>
Non tagliare e incollare un ebuild nel campo di commento di bugzilla.
</p>

</body>
</section>
<section>
<title>Descrizione mancante su cosa sia il pacchetto considerato</title>
<body>

<p>
Fate in modo di fare sapere quale pacchetto state trattando, e se esiste inserire l'URL dell'homepage
dell'applicazione.
</p>

</body>
</section>
<section>
<title>Aggiornamenti di un pacchetto senza cambiamenti della descrizione</title>
<body>

<p>
Se si invia un aggiornamento di un pacchetto, assicurarsi di spiegare quali cambiamenti
sono stati effettuati all'ebuild. Per esempio se un pacchetto introduce una nuova feature/opzione e 
si usa una USE flag, và�segnalata fra i propri bug. Non fate cercare i responsabili.
</p>

<p>
Sarebbe saggio inviare un diff per un pacchetto piuttosto che l'ebuild intero.
Il modo migliore per generarlo potrebbe essere:
</p>

<pre caption="Creare un diff">
$ <i>diff -u some-package-0.1.0.ebuild some-package-0.2.0.ebuild &gt; ~/some-package-0.2.0.diff</i>
</pre>

</body>
</section>
<section>
<title>Inviare ebuild non cambiati per upgrade di versione</title>
<body>

<p>
Se si stà�per mandare una nuova versione di un pacchetto nel portage, assicurarsi
che l'ebuild esistente funzioni e assicurarsi che i cambiamenti siano incorporati
nel nuovo ebuild (come se fosse documentazione aggiunta). Se non ci sono cambiamenti
necessari rispetto alla versione precedente, non si cambia l'ebuild. Bisogna dire solamente 
nel bug report che l'ebuild è�stato sovrascritto e è�stato verificato che il pacchetto 
funziona e si installa senza problemi.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Commenti e Suggerimenti</title>
<section>
<body>

<p>
Commenti, correzzioni e suggerimenti devono essere mandati a <mail 
link="liquidx@gentoo.org">Alastair Tse</mail>.
</p>

</body>
</section>
</chapter>
</guide>
