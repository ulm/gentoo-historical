<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/openrc-migration.xml,v 1.7 2010/12/09 18:32:34 scen Exp $ -->

<guide link="/doc/it/openrc-migration.xml" lang="it">
<title>Guida alla Migrazione di Baselayout e OpenRC</title>

<author title="Autore">
  <mail link="cardoe"/>
</author>
<author title="Autore">
  <mail link="nightmorph"/>
</author>
<author title="Collaboratore">
  <mail link="uberlord"/>
</author>
<author title="Traduzione">
  <mail link="magowiz@gmail.com">Marcello Magaldi</mail>
</author>

<abstract>
Questa guida illustra come migrare da baselayout-1 a baselayout-2 e OpenRC.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>3</version>
<date>2010-12-01</date>

<chapter>
<title>Contesto</title>
<section>
<title>Cos'è baselayout?</title>
<body>

<p>
Baselayout fornisce un insieme base di file che sono necessari per far
funzionare adeguatamente tutti i sistemi, come ad esempio
<path>/etc/hosts</path>. Fornisce anche il layout base del filesystem usato da
Gentoo (ad es. le directory <path>/etc</path>, <path>/var</path>,
<path>/usr</path>, <path>/home</path>).
</p>

</body>
</section>
<section>
<title>Cos'è OpenRC?</title>
<body>

<p>
OpenRC è un sistema rc basato sulle dipendenze che funziona con qualsiasi init
fornito dal sistema, normalmente <path>/sbin/init</path> . Comunque, <e>non</e>
è un sostituto per <path>/sbin/init</path>. L'init di default usato da Gentoo
Linux è <c>sys-apps/sysvinit</c>, mentre Gentoo/FreeBSD utilizza l'init di
FreeBSD fornito da <c>sys-freebsd/freebsd-sbin</c>.
</p>

</body>
</section>
<section>
<title>Perché migrare?</title>
<body>

<p>
Inizialmente il sistema rc di Gentoo è stato compilato dentro baselayout 1 e
scritto interamente in bash. Questo porta a molte limitazioni. Per esempio,
certe chiamate di sistema hanno bisogno di essere accedute durante il boot e ciò
ha richiesto l'aggiunta di chiamate basate su C. Ognuna di queste chiamate era
linkata staticamente, con la conseguenza che il sistema rc ci metteva più tempo
ad eseguire le proprie operazioni.
</p>

<p>
Inoltre, siccome Gentoo si è espansa ad altre piattaforme come Gentoo/FreeBSD e
Gentoo Embedded, è diventato impossibile richiedere a un sistema rc basato su
bash. Questo ha portato allo sviluppo di baselayout 2, che è scritto in C e
richiede unicamente una shell POSIX-compilant. Durante lo sviluppo di baselayout
2, è stato determinato che era più appropriato se baselayout avesse fornito
meramente i file base e il layout del filesystem per Gentoo e il sistema rc fu
spostato in un suo pacchetto. Sicché abbiamo OpenRC.
</p>

<p>
OpenRC è sviluppato principalmente da <uri
link="http://roy.marples.name/openrc">Roy Marples</uri> e supporta tutte le
correnti variazioni di Gentoo (es. Gentoo Linux, Gentoo/FreeBSD, Gentoo
Embedded, e Gentoo Vserver) e altre piattaforme come FreeBSD e NetBSD.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Migrazione a OpenRC</title>
<section>
<body>

<p>
La migrazione a OpenRC è piuttosto diretta; sarà introdotta come parte del
proprio processo di aggiornamento dal tuo gestore dei pacchetti. Il passo più
importante attualmente avviene dopo l'installazione dei nuovi pacchetti
<c>>=sys-apps/baselayout-2</c> e <c>sys-apps/openrc</c>. È
<e>importantissimo</e> eseguire <c>dispatch-conf</c> ed assicurarsi che il
proprio <path>/etc</path> sia aggiornato prima di riavviare. <brite>Un
fallimento nel farlo produrrà un sistema non più avviabile</brite> e richiederà
l'uso del Gentoo LiveCD per effettuare i passaggi seguenti per riparare il
proprio sistema.
</p>

<p>
Una volta finito di aggiornare i propri file di configurazione, ci sono alcune
cose da verificare prima di riavviare.
</p>

</body>
</section>

<section id="rc_conf">
<title>/etc/conf.d/rc</title>
<body>

<p>
Il file <path>/etc/conf.d/rc</path> è stato deprecato e tutte le impostazioni in
esso contenute avranno bisogno di essere trasferite alle impostazioni
appropriate in <path>/etc/rc.conf</path>. Si prega di leggere interamente
<path>/etc/rc.conf</path> e <path>/etc/conf.d/rc</path> e migrare le
impostazioni. Una volta finito, cancellare <path>/etc/conf.d/rc</path>.
</p>

</body>
</section>
<section id="moduli">
<title>Moduli del Kernel</title>
<body>

<p>
Normalmente, quando si vuole che certi moduli del kernel siano caricati
all'avvio, li si mette in <path>/etc/modules.autoload.d/kernel-2.6</path>insieme
ad ogni parametro che gli si vuole passare. Nel baselayout-2, questo file non è
più utilizzato. Invece, i moduli caricati automaticamente e i loro parametri
sono situati in un file, <path>/etc/conf.d/modules</path>, qualsiasi sia la
versione del kernel.
</p>

<p>
Un esempio di configurazione vecchio stile sarebbe:
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
ivtv
cx88_dvb video_br=2
</pre>

<p>
Convertire l'esempio precedente risulterà nel seguente:
</p>

<pre caption="/etc/conf.d/modules">
<comment># Moduli caricati automaticamente all'avvio</comment>
modules_2_6="ivtv cx88_dvb"
<comment># Parametri dei Moduli</comment>
module_cx88_dvb_args_2_6="video_br=2"
</pre>

<p>
Negli esempi precedenti, i moduli e i loro parametri saranno passati soltanto
ai kernel della serie 2.6.x. La nuova configurazione permette un controllo più
preciso sui moduli e sui parametri basato sulla versione del kernel.
</p>

<p>
Un esempio approfondito sarà:
</p>

<pre caption="esempio dettagliato di /etc/conf.d/modules">
<comment># Caricare sempre ochi1394 e ieee1394, per qualsiasi versione di kernel</comment>
modules="ohci1394 ieee1394"
<comment># Caricare tun e usbserial solo per i kernel della serie 2.6.x</comment>
modules_2_6="tun usbserial"
<comment># Caricare cx88_dvb solo per i kernel 2.6.23</comment>
modules_2_6_23="cx88_dvb"
<comment># Caricare ivtv solo per il kernel 2.6.23-gentoo-r5</comment>
modules_2_6_23_gentoo_r5="ivtv"

<comment># Solo per il kernel 2.6.23-gentoo-r5, passare come argomento video_br=2 # a cx88_dvb</comment>
module_cx88_dvb_args_2_6_23_gentoo_r5="video_br=2"
<comment># Per i kernel della serie 2.6.x passare sempre vendor e product</comment>
module_usbserial_args_2_6="vendor=0x1410 product=0x2110"
<comment># Passare sempre debug a ieee1394</comment>
module_ieee1394_args="debug"
</pre>

<impo>
Le variabili <b>module*</b> non sono cumulative. Le variabili con versione più
specifica sovrascriveranno quelle più generiche.
</impo>

<note>
Notare la differenza tra <b>module_</b> e <b>modules_</b>.
</note>

</body>
</section>
<section id="boot">
<title>Runlevel di Boot</title>
<body>

<p>
Il runlevel di <c>boot</c> esegue molti passi importanti per ogni macchina. Per
esempio, assicurarsi che il proprio filesystem root sia montato in
lettura/scrittura, che i propri filesystem siano controllati, che i propri
mountpoint siano disponibili, e che lo pseudo-filesystem <path>/proc</path> sia
avviato al boot.
</p>

<p>
Con OpenRC, i servizi di gestione del volume per i propri dispositivi a blocchi
non sono più avviati automaticamente al boot. Questo include lvm, raid, swap,
device-mapper (dm), dm-crypt, evms, e il like. Bisogna assicurarsi che
l'initscript appropriato per questi servizi nel runlevel di <c>boot</c>,
altrimenti sarà possibile che il proprio sistema non si avvii!
</p>

<p>
Sebbene l'ebuild di OpenRC proverà a fare questa migrazione, si dovrà verificare
che migri tutti i servizi di gestione di volume propriamente:
</p>

<pre caption="Mostrare tutti i servizi nel runlevel boot">
# <i>ls -l /etc/runlevels/boot/</i>
</pre>

<p>
Se non si vede root, procfs, mtab, swap  e fsck con il precedente comando,
effettuare le seguenti istruzioni per aggiungerli al runlevel <c>boot</c>:
</p>

<pre caption="Aggiungere servizi critici al runlevel boot">
# <i>rc-update add root boot</i>
# <i>rc-update add procfs boot</i>
# <i>rc-update add mtab boot</i>
# <i>rc-update add fsck boot</i>
# <i>rc-update add swap boot</i>
</pre>

<p>
Se si è a conoscenza di utilizzare mdraid e lvm ma non li si vede sopra, si
dovranno eseguire le seguenti istruzioni per aggiungere gli initscript al
runlevel <c>boot</c>:
</p>

<pre caption="Aggiungere mdraid e lvm al runlevel boot">
# <i>rc-update add mdraid boot</i>
# <i>rc-update add lvm boot</i>
</pre>

</body>
</section>
<section>
<title>Udev</title>
<body>

<p>
OpenRC non avvia più <c>udev</c> in modo predefinito, ma deve essere presente
nel runlevel <c>sysinit</c> per essere avviato. L'ebuild di OpenRC dovrebbe
rilevare se <c>udev</c> era stato precedentemente abilitato e aggiungerlo al
runlevel <c>sysinit</c>. Comunque, per esserne sicuri, controllare se
<c>udev</c> è presente:
</p>

<pre caption="Verificare udev">
# <i>ls -l /etc/runlevels/sysinit</i>
lrwxrwxrwx 1 root root 14 2009-01-29 08:00 /etc/runlevels/sysinit/udev -> /etc/init.d/udev
</pre>

<p>
Se <c>udev</c> non è elencato, aggiungerlo al corretto runlevel:
</p>

<pre caption="Aggiungere udev al runlevel sysinit">
# <i>rc-update add udev sysinit</i>
</pre>

</body>
</section>
<section>
<title>Rete</title>
<body>

<p>
Siccome baselayout e OpenRC sono stati divisi in due pacchetti differenti, il
proprio initscript net.eth0 può scomparire durante il processo di aggiornamento.
Per sostituire questo initscript prego eseguire i seguenti comandi:
</p>

<pre caption="Riaggiungere lo script net.eth0 mancante">
# <i>cd /etc/init.d</i>
# <i>ln -s net.lo net.eth0</i>
</pre>

<p>
Se manca qualsiasi altro initscript di rete, seguire le istruzioni menzionate
sopra per aggiungerlo nuovamente. Basta sostituire <c>eth0</c> con il nome del
proprio dispositivo di rete.
</p>

<p>
Inoltre, <path>/etc/conf.d/net</path> non utilizza più gli array stile bash per
la configurazione. Si prega di consultare
<path>/usr/share/doc/openrc-&lt;version&gt;/net.example</path> per le
istruzioni di configurazione. La conversione dovrebbe essere relativamente
diretta, per esempio un assegnamento statico di IP cambierà in questo modo:
</p>

<pre caption="Vecchio stile di /etc/conf.d/net">
config_eth0=( "192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255" )
routes_eth0=( "default via 192.168.1.100" )
</pre>

<pre caption="Nuovo stile di /etc/conf.d/net">
config_eth0="192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255"
routes_eth0="default via 192.168.1.100"
</pre>

</body>
</section>
<section>
<title>Orologio</title>
<body>

<p>
Le impostazioni dell'orologio sono state rinominate da
<path>/etc/conf.d/clock</path> al proprio strumento di impostazione di orologio
nativo di sistema. Questo significa che in Linux sarà
<path>/etc/conf.d/hwclock</path> e in FreeBSD sarà
<path>/etc/conf.d/adjkerntz</path>. I sistemi senza un chip con orologio interno
("real time clock", o "RTC", ndt) funzionante dovrebbero usare
<path>/etc/init.d/swclock</path>, che imposta l'orario di sistema basandosi
sull'orario di modifica di un file che viene creato durante lo spegnimento del
sistema. L'initscript in <path>/etc/init.d/</path> è anch'esso stato rinominato
conseguentemente, quindi assicurarsi che sia nel runlevel boot.
</p>

<p>
Inoltre, la variabile <c>TIMEZONE</c> non è più in questo file. I suoi contenuti
sono invece nel file <path>/etc/timezone</path>. Se non esiste, bisognerà
ovviamente crearlo con il proprio fuso orario. Si prega di controllare entrambi
questi file per assicurarsi della loro correttezza.
</p>

<p>
Il valore appropriato per questo file è il percorso relativo al proprio fuso
orario a partire da <path>/usr/share/zoneinfo</path>. Per esempio, per quelli
che vivono nella costa orientale degli Stati Uniti, l'esempio seguente sarà una
corretta impostazione:
</p>

<pre caption="/etc/timezone">
America/New_York
</pre>

</body>
</section>
<section>
<title>XSESSION</title>
<body>

<p>
La variabile XSESSION non si trova più in <path>/etc/rc.conf</path>. Invece, si
può impostare la variabile XSESSION per quanto riguarda il singolo utente in
<path>~/.bashrc</path> (o equivalente), oppure impostarlo globalmente per il
sistema in <path>/etc/env.d/</path>
</p>

<p>
Ecco un esempio di come impostare XSESSION per l'intero sistema:
</p>

<pre caption="Impostare XSESSION per tutto il sistema">
# <i>echo 'XSESSION="Xfce4"' > /etc/env.d/90xsession</i>
</pre>

<impo>
Bisogna eseguire <c>env-update</c> dopo aver creato un file in
<path>/etc/env.d</path>, e successivamente effettuare il logout e poi il login
perché abbia effetto. Se si imposta la variabile in <path>~/.bashrc</path>, si
può rifare il source del file con <c>source ~/.bashrc</c>.
</impo>

</body>
</section>
<section>
<title>EDITOR e PAGER</title>
<body>

<p>
La variabile EDITOR non si trova più in <path>/etc/rc.conf</path>. Sia EDITOR
che PAGER sono impostati in modo predefinito in <path>/etc/profile</path>. Si
dovrebbe cambiare ciò se se ne ha bisogno nel proprio file
<path>~/.bashrc</path> (o equivalente) o creare <path>/etc/env.d/99editor</path>
ed assegnare l'impostazione predefinita di sistema lì.
</p>

<impo>
Bisogna eseguire <c>env-update</c> dopo aver creato un file in
<path>/etc/env.d</path>, e successivamente effettuare il logout e poi il login
perché abbia effetto. Se si è impostato la variabile in <path>~/.bashrc</path>,
si può rifare il source del file con <c>source ~/.bashrc</c>.
</impo>

</body>
</section>
<section>
<title>Log di Boot</title>
<body>

<p>
Precedentemente, si poteva loggare il processo di boot utilizzando
<c>app-admin/showconsole</c>. Tuttavia, OpenRC ora gestisce tutto il processo di
logging internamente, quindi non c'è bisogno dei trucchetti che
<c>showconsole</c> ha adottato. Si può fare l'unmerge di <c>showconsole</c>
senza problemi. Per continuare a loggare i messaggi di boot, impostare
semplicemente la variabile appropriata in <path>/etc/rc.conf</path>. I log
appariranno in <path>/var/log/rc.log</path>.
</p>

<pre caption="Abilitare il logging del boot in /etc/rc.conf">
rc_logger="YES"
</pre>

</body>
</section>
<section>
<title>Finalizzare</title>
<body>

<p>
Una volta terminato e aggiornato i propri file di configurazione e gli
initscript, l'ultima cosa da fare è <b>reboot</b>. Questo è necessario perché
le informazioni di stato del sistema non sono preservate durante
l'aggiornamento, quindi bisognerà fornirle con un boot pulito.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Funzionalità modificate</title>
<section>
<title>L'azione pausa</title>
<body>

<p>
In precedenza era possibile interrompere temporaneamente un servizio senza
terminare tutti i servizi dipendenti da esso usando il comando
  <c>/etc/init.d/servizio pause</c>. In OpenRC, l'azione <c>pause</c> è stata
rimossa; questa funzionalità è supportata dal comando <c>/etc/init.d/service
--nodeps stop</c>, che funziona anche nel vecchio baselayout.
</p>

</body>
</section>
</chapter>
</guide>
