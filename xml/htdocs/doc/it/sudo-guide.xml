<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/sudo-guide.xml,v 1.2 2006/02/10 21:28:07 so Exp $ -->

<guide link="/doc/it/sudo-guide.xml" lang="it">
<title>Guida di Sudo(ers)</title>

<author title="Autore">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Traduzione">
  <mail link="grentis@gmail.com">Grentis</mail>
</author>
<author title="Revisione">
  <mail link="cristiano.chiucchiolo@gmail.com">Cristiano Chiucchiolo</mail>
</author>

<abstract>
Quando si vuol permettere a qualcuno di eseguire certe funzioni amministrative
sul proprio sistema senza affidargli l'accesso di root, usare sudo risulta
essere la soluzione migliore.
Con sudo si può controllare chi può fare cosa. Questa guida offre una
breve introduzione a questo ottimo programma.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.5</version>
<date>2005-12-31</date>

<chapter>
<title>Sudo</title>
<section>
<title>Assegnare permessi</title>
<body>

<p>
Il pacchetto <c>app-admin/sudo</c> permette all'amministratore di sistema di
concedere ad altri utenti i privilegi per eseguire una o più applicazioni a
cui normalmente non avrebbero diritto. Invece di impostare il bit <e>setuid</e>
di queste applicazioni <c>sudo</c> permette una gestione migliore di <e>chi</e>
può eseguire certi comandi e <e>quando</e>.
</p>

<p>
Usando <c>sudo</c> puoi creare una lista precisa di <e>chi</e> può eseguire
determinati comandi. Se tu impostassi il bit setuid chiunque potrebbe eseguire
quell'applicazione (o, a seconda dei permessi utilizzati, ogni membro di un
certo gruppo). Con <c>sudo</c>, invece, puoi (e dovresti) richiedere all'utente
l'inserimento di una password quando tenta di eseguire tale applicazione e puoi
anche gestire permessi differenti in base alla posizione dell'utente: se è
loggato nel sistema stesso o se sta usando il sistema tramite SSH da una
postazione remota.
</p>

</body>
</section>
<section>
<title>Loggare le attività</title>
<body>

<p>
Un ulteriore vantaggio di <c>sudo</c> è che può fornire i log di ogni
tentativo di esecuzione (sia andato a buon fine che non) di un'applicazione.
Questo è veramente comodo se si vuole tenere traccia di chi ha fatto l'errore
che ti è costato 10 ore di tempo per sistemarlo :)
</p>

</body>
</section>
<section>
<title>Configurare Sudo</title>
<body>

<p>
La configurazione di <c>sudo</c> è gestita dal file <path>/etc/sudoers</path>.
Questo file non andrebbe mai editato usando <c>nano&nbsp;/etc/sudoers</c> o
<c>vim&nbsp;/etc/sudoers</c> o qualsiasi altro editor da voi utilizzato. Quando
si vuole modificare questo file si dovrebbe usare <c>visudo</c>.
</p>

<p>
Questo programma infatti permette di controllare che non ci siano due
amministratori che stanno modificando il file contemporaneamente, di mantenere
i permessi corretti sul file stesso e di verificarne la sintassi in modo da
evitare errori.
</p>

</body>
</section>
<section>
<title>Questa guida</title>
<body>

<p>
Questa guida può essere vista come una breve introduzione a questo
programma. Il pacchetto <c>sudo</c> è molto più potente di come viene
descritto qui. Possiede infatti molte funzionalità come il poter editare file
come un utente differente (<c>sudoedit</c>), può essere eseguito in uno script
(può girare in background, può leggere la password dallo standard in e non
dalla tastiera, ...), etc.
</p>

<p>
Per favore leggi le pagine del manuale di <c>sudo</c> e di <c>sudoers</c> per
informazioni maggiori.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Sintassi di Sudoers</title>
<section>
<title>Sintassi di base</title>
<body>

<p>
La cosa più difficile dell'utilizzo di <c>sudo</c> è la sintassi di
<path>/etc/sudoers</path>.
La sintassi base è qualcosa di simile a:
</p>

<pre caption="Sintassi di base di /etc/sudoers">
user  host = comandi
</pre>

<p>
Questa sintassi indica a <c>sudo</c> che l'utente, identificato da <e>user</e>
e loggato nel sistema <e>host</e> può eseguire qualsiasi comando indicato in
<e>commands</e> come se fosse l'utente root. Facciamo un esempio reale per
semplificare le cose: si vuole permettere all'utente <e>swift</e> di eseguire
<c>emerge</c> se è loggato nella macchina (quindi non tramite SSH):
</p>

<pre caption="Reale esempio di /etc/sudoers">
swift  localhost = /usr/bin/emerge
</pre>

<p>
Prestare <brite>attenzione</brite> a cosa si scrive: non permettere ad utenti
di eseguire applicazioni che potrebbero concedergli privilegi troppo elevati.
Per esempio, permettere ad utenti di eseguire <c>emerge</c> come utente root
significa affidargli i pieni accessi al sistema in quanto <c>emerge</c> può
essere utilizzato per cambiare file di sistema a vantaggio dell'utente stesso.
Se non vi fidate dei vostri utenti <c>sudo</c> non dategli nessun diritto.
</p>

<!--
  Wrappers are no real advantage here either, see #71750
-->

<p>
Il nome dell'utente può anche essere sostituito con il nome di un gruppo -
in questo caso si deve far precedere al nome del gruppo il carattere <c>%</c>.
Esempio per permettere a tutti gli utenti del gruppo <c>wheel</c> di eseguire
<c>emerge</c>:
</p>

<pre caption="Permettere ai membri del gruppo wheel di eseguire emerge">
%wheel  localhost = /usr/bin/emerge
</pre>

<p>
Si possono inserire più comandi nella stessa linea in modo da non doverne
creare una diversa per ogni istruzione. Per esempio, per permettere allo stesso
utente non solo di eseguire <c>emerge</c> ma anche di eseguire <c>ebuild</c> e
<c>emerge-webrsync</c> come utente root:
</p>

<pre caption="Comandi multipli">
swift  localhost = /usr/bin/emerge, /usr/bin/ebuild, /usr/sbin/emerge-webrsync
</pre>

<p>
Si può inoltre specificare un preciso comando e non solo il generico
programma. Questo è comodo per poterne restringere l'uso ad uno specifico set
di opzioni. Il programma <c>sudo</c> permette anche l'utilizzo di espressioni
regolari.
</p>

<p>
Esempio:
</p>

<pre caption="Permettere il solo aggiornamento del sistema usando sudo">
$ <i>sudo emerge -uDN world</i>

We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.

Password: <comment>(Inserire la password dell'utente, not quella di root!)</comment>
</pre>

<p>
La password richiesta da <c>sudo</c> è la password personale dell'utente.
Questo è fatto per impedire che terminali lasciati accidentalmente aperti
vengano usati per scopi dannosi da altre persone.
</p>

<p>
Dovresti sapere che <c>sudo</c> non modifica la variabile <c>${PATH}</c>: ogni
comando scritto dopo <c>sudo</c> viene trattato nel <e>tuo</e> ambiente. Se
vuoi permettere all'utente di eseguire un programma posto in, per
esempio, <path>/sbin</path>, l'utente stesso deve preoccuparsi di utilizzare
<c>sudo</c> fornendo il path completo del comando da eseguire:
</p>

<pre caption="Usare il path completo di un programma">
$ <i>sudo /usr/sbin/emerge-webrsync</i>
</pre>

</body>
</section>
<section>
<title>Usare gli Alias</title>
<body>

<p>
In sistemi di grandi dimensioni inserire tutti gli utenti più e più volte
(o gli host o i comandi) può essere un lavoro davvero faticoso. Per
semplificare l'amministrazione di <path>/etc/sudoers</path> si possono definire
degli <e>alias</e>. Il formato di tale definizione è relativamente semplice:
</p>

<pre caption="Dichiarare alias in /etc/sudoers">
Host_Alias hostalias = hostname1, hostname2, ...
User_Alias useralias = user1, user2, ...
Cmnd_Alias cmndalias = command1, command2, ...
</pre>

<p>
Un alias che funziona sempre, in ogni posizione, è <c>ALL</c> (per
differenziare maggiormente gli alias dai non-alias è consigliato usare i
caratteri maiuscoli per i primi). Come indubbiamente avrai notato l'alias
<c>ALL</c> è utilizzabile per tutte le possibili configurazioni.
</p>

<p>
Esempio dell'uso di <c>ALL</c> per permettere a <e>tutti</e> gli utenti di
eseguire il comando <c>shutdown</c> solo se loggati localmente:
</p>

<pre caption="Permettere a tutti gli utenti di eseguire shutdown">
ALL  localhost = /sbin/shutdown
</pre>

<p>
Altro esempio per permettere all'utente <c>swift</c> di eseguire il comando
<c>emerge</c> come root, indipendentemente da dove si è loggato è:
</p>

<pre caption="Permettere ad un utente di eseguire un comando indipendentemente da dove si è loggato">
swift   ALL = /usr/bin/emerge
</pre>

<p>
Un esempio ancora più interessante è definire un set di utenti che
possono eseguire applicazioni amministrative (come <c>emerge</c> o
<c>ebuild</c>) e un gruppo di utenti che possono cambiare la password di
chiunque, eccetto quella di root!
</p>

<pre caption="Usare alias per utenti e programmi">
User_Alias  <i>SOFTWAREMAINTAINERS</i> = swift, john, danny
User_Alias  <i>PASSWORDMAINTAINERS</i> = swift, sysop
Cmnd_Alias  <i>SOFTWARECOMMANDS</i>    = /usr/bin/emerge, /usr/bin/ebuild
Cmnd_Alias  <i>PASSWORDCOMMANDS</i>    = /usr/bin/passwd [a-zA-Z0-9_-]*, !/usr/bin/passwd root

<i>SOFTWAREMAINTAINERS</i>  localhost = <i>SOFTWARECOMMANDS</i>
<i>PASSWORDMAINTAINERS</i>  localhost = <i>PASSWORDCOMMANDS</i>
</pre>

</body>
</section>
<section>
<title>Esecuzioni Non-Root</title>
<body>

<p>
Usando <c>sudo</c> è inoltre possibile permettere ad un utente di eseguire
un'applicazione come un utente differente, e non root. Questo può essere molto
utile se nel sistema vengono eseguite delle applicazioni da utenti
particolari (per esempio <c>apache</c> come web server) e si vuole permettere
ad alcuni utenti di eseguire determinate operazioni amministrative come se
fossero questi utenti particolari (come uccidere processi zombie).
</p>

<p>
Dentro <path>/etc/sudoers</path> bisogna elencare l'utente(utenti) con cui si
vuole eseguire l'applicazione tra <c>(</c>&nbsp;e&nbsp;<c>)</c> prima
dell'elenco dei comandi:
</p>

<pre caption="Sintassi per l'esecuzione di programmi come utente non-root">
users  hosts = (run-as) commands
</pre>

<p>
Esempio per permettere all'utente <c>swift</c> di eseguire il comando
<c>kill</c> come se fosse l'utente <c>apache</c> o <c>gorg</c>:
</p>

<pre caption="Esempio di esecuzione come utente non-root">
Cmnd_Alias KILL = /bin/kill, /usr/bin/pkill

swift   ALL = (apache, gorg) KILL
</pre>

<p>
E' possibile usare il comando <c>sudo&nbsp;-u</c> per specificare l'utente con
cui vuole eseguire l'applicazione interessata:
</p>

<pre caption="Eseguire il comando pkill come utente apache">
$ <i>sudo -u apache pkill apache</i>
</pre>

<p>
Si possono settare alias anche per gli utenti con cui si vogliono eseguire
determinate operazioni usando la direttiva <c>Runas_Alias</c>, il cui uso è
identico alle altre direttive <c>_Alias</c> viste precedentemente.
</p>

</body>
</section>
<section>
<title>Passwords e configurazioni di default</title>
<body>

<p>
Di default <c>sudo</c> chiede all'utente di identificarsi usando la propria
password personale. Quando questa viene inserita <c>sudo</c> la ricorda per 5
minuti, permettendo così all'utente di eseguire più comandi senza doversi
preoccupare di reinserire la password ogni volta.
</p>

<p>
Ovviamente questo comportamento può essere modificato: si può settare la
direttiva <c>Defaults:</c> nel file <path>/etc/sudoers</path> per cambiare tale
impostazione per un utente.
</p>

<p>
Per esempio, per cambiare i 5 minuti di default in 0 minuti (non ricordare mai
la password) per l'utente <c>swift</c>:
</p>

<pre caption="Cambiare il valore del timeout">
Defaults:swift  timestamp_timeout=0
</pre>

<p>
Impostando il valore a <c>-1</c> significherebbe ricordare la password
indefinitamente (fino al riavvio del sistema).
</p>

<p>
Un utilizzo differente è il voler impostare la richiesta della password
dell'utente con cui si vuole eseguire il comando e non quella privata
dell'utente che utilizza <c>sudo</c>. Questo è possibile usando
<c>runaspw</c>. Nell'esempio seguente modifichiamo inoltre il numero di
tentativi possibili (quante volte l'utente può inserire la password prima
che <c>sudo</c> ritorni un errore) passando dai 3 di default a <c>2</c>:
</p>

<pre caption="Richiedere la password di root invece che la password privata dell'utente">
Defaults:john   runaspw, passwd_tries=2
</pre>

<p>
Un'altra funzione interessante è la variabile <c>DISPLAY</c>, che se
impostata permette di eseguire tools grafici.
</p>

<pre caption="Mantenere abilitata la variabile DISPLAY">
Defaults:john env_keep=DISPLAY
</pre>
	
<p>
Esistono dozzine di configurazioni di default modificabili tramite la direttiva
<c>Defaults:</c>.
Leggi le pagine di manuale di <c>sudo</c> cercando l'argomento <c>Defaults</c>
per avere maggiori informazioni.
</p>

<p>
Se invece si vuol permettere ad un utente di eseguire certi comandi senza
fornire una password bisogna far precedere alla lista dei comandi
<c>NOPASSWD:</c>. Ad esempio:
</p>

<pre caption="Permettere l'esecuzione di emerge come utente root senza richiedere una password">
swift     localhost = NOPASSWD: /usr/bin/emerge
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Usare Sudo</title>
<section>
<title>Mostrare i privilegi</title>
<body>

<p>
Un utente, per poter visualizzare l'elenco dei comandi che sudo gli mette a
disposizione, può utilizzare <c>sudo&nbsp;-l</c>:
</p>

<pre caption="Elenco permessi">
$ <i>sudo -l</i>
User swift may run the following commands on this host:
    (root)   /usr/libexec/xfsm-shutdown-helper
    (root)   /usr/bin/emerge
    (root)   /usr/bin/passwd [a-zA-Z0-9_-]*
    (root)   !/usr/bin/passwd root
    (apache) /usr/bin/pkill
    (apache) /bin/kill
</pre>

<p>
Se l'utente è associato ad alcuni programmi in <path>/etc/sudoers</path> che
non richiedono una password, questa non verrà richiesta neanche per mostrarli
col comando precedente. Altrimenti una password, se non "ricordata" da
<c>sudo</c>, verrà richiesta all'utente.
</p>

</body>
</section>
<section>
<title>Aumentare la durata della password</title>
<body>

<p>
Di default se un utente ha inserito la sua password in <c>sudo</c> questa
verrà ricordata per 5 minuti. Se l'utente vuole prolungare questo periodo può
eseguire il comando <c>sudo&nbsp;-v</c> per ricomiciare il timeout, avendo
quindi a disposizione altri 5 minuti prima che <c>sudo</c> la richieda
nuovamente.
</p>

<pre caption="Prolungare la durata della password">
$ <i>sudo -v</i>
</pre>

<p>
Per dire a <c>sudo</c> di "scordare" immediatamente la propria password si
può utilizzare il comando <c>sudo&nbsp;-k</c>.
</p>

</body>
</section>
</chapter>
</guide>
