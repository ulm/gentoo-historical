<?xml version='1.0' encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<guide link = "/doc/it/portage-manual.xml">
<title>Manuale del Portage</title>
<author title="Autore e Editore">
<mail link="blocke@shivan.org">Bruce A. Locke</mail>
</author>
<author title="Traduttore">
<mail link="blaze@rootshell.be">Lino Gambella</mail>
</author>

<author title="Traduttore" >
Team Italiano
</author>


<abstract>
Questo manuale provvede a dare una descrizione generale del Portage, informazioni
dettagliate sulla configurazione e una guida per l'utente finale atta a 
installare e mantenere i pacchetti usando il sistema di Portage.
</abstract>

<version>0.9.6</version>
<date>17 Marzo 2003</date>

<chapter>
<title>Portage: Descrizione</title>

<section>
  <title>Descrizione</title>
  <body>
	<p>
        Il Portage è un potente ed avanzato sistema di gestione pacchetti.
        La sua flessibilità e la sua abilità di servire sia come semplice 
        motore di costruzione sia come cuore di una distribuzione Linux
        praticamente perfetta a cui ha fatto guadagnare il titolo di 
        Meta-distribuzione. La distribuzione Linux Gentoo è costruita attorno
        al Portage.
	</p>
	<p>
        Spesso ci si riferisce a Gentoo come Meta-distribuzione.
        Essa Consiste nel Portage e in circa 1500 recipienti di istruzioni
        per pacchetti chiamati <i>ebuilds</i>. Questi <i>ebuilds</i> dicono
        al motore Portage come compilare e installare un pacchetto software.
        Attraverso l'uso dei <i>profiles</i> e della utility a riga di comando
        chiamata <i>emerge</i>, gli utenti e gli sviluppatori possono usare 
        il Portage per installare e mantenere aggiornati i pacchetti che costruiscono
        il sistema operativo e le applicazioni in un sistema.
        </p>
	<p>
        Un sistema Linux Gentoo viene compilato "on the fly" (sul momento). L'atto
        di installare Linux Gentoo implica il configurare un compilatore funzionante
        e costruire un ambiente attraverso Portage che può scaricare il codice sorgente
        da Internet e edificare il resto del cuore del sistema e altre applicazioni
        desiderate. Anche se Portage non supporta l'uso di pacchetti binari precompilati 
        esiste un compromesso usato solo nelle installazioni in macchine lente, da 
        sviluppatori che necessitano di riabilitare velocemente un certo pacchetto o 
        quando gli utenti compilano pacchetti in macchine veloci da usare in 
        macchine molto vecchie dove la compilazione sarebbe un problema.
	</p>
	<p>
        Il modo in cui Portage compila e installa i pacchetti è altamente configurabile
        infatti a ciò è dovuta la diversità fra le varie installazioni di Gentoo Linux.
        Essenzialmente, quando un utente installa Gentoo Linux, il sistema Portage 
        compila una distribuzione Linux personalizzata conforme alle opzioni specificate
        nella configurazione del Portage e negli ebuilds.
        </p>	
	<p>
	A prima vista l'idea del portage può sembrare simile al tradizionale sistema
	dei ports BSD. Tutti e due compilano pacchetti e permettono agli utenti
	di installare e rimuovere software in maniera sicura e tenendo conto delle dipendenze.
	Molte idee per il Portage sono state prese dai ports BSD ma Portage non è da considerarsi
	un'imitazione.
	</p>
	<p>Il sistema portage è una fusione del cuore python e degli script bash sulla
	quale sono basati gli <i>ebuilds</i>. Invece di maneggiare il comando <i>make</i>, portage utilizza
	la potenza di python e fa grande uso degli shellscript con qualche caratteristica
	object-oriented per costruire un sistema potente e unico che pensiamo 
	faccia di portage il migliore dei sistemi di ports esistenti.
	</p>

	<p>Una delle funzionalità di portage è l'abilità di avere versioni multiple 
	e revisioni dello stesso pacchetto nel suo tree, in più ha il supporto
	per la risoluzione condizionale delle dipendenze, installazione sicura in
	"sandbox", protezione dei file di configurazione, profili e molto di più; molte di queste 
	funzioni verranno discusse in dettaglio più avanti in questo manuale.
	</p>
  </body>
</section>

<section>
<title>Risoluzione condizionale delle dipendenze e supporto delle caratteristiche</title>
<body>
	<p>Il sistema di portage è unico nella vastità delle possibilità che offre all'utente.
	Il port system tradizionale di BSD tende a supportare una sola revisione 
	per ogni pacchetto nel suo tree. Portage non ha questa limitazione. Versioni 
	multiple dello stesso pacchetto sono disponibili per l'installazione.
	Le dipendenze possono essere specificate dal nome e dalla versione. Ciò rende sicuro l'avere
	più versioni di un pacchetto disponibili nel tree.
	</p>
	<p>Il sistema di dipendenze supporta anche le dipendenze condizionali, portage
	usa un concetto molto potente chiamato <i>USE setting</i> system. Cambiando una
	variabile di configurazione si possono disabilitare i supporti opzionali (e le loro 
	dipendenze) per varie funzioni e librerie per tutti pacchetti in tempo di compilazione. Questo
	sistema è molto potente e flessibile e verrà documentato meglio nel capitolo successivo. 
	</p>
	<p>In aggiunta Portage supporta il concetto di <i>SLOT</i>s.
	Nello sviluppo di Gentoo i suoi developers spesso trovano che si ha la 
	necessità di versioni multiple di certi pacchetti (come le librerie) installati per 
	soddisfare le richieste di altri pacchetti. L'approccio tradizionale a risolvere questo 
 problema è il mantenere le varie versioni dei pacchetti come pacchetti diversi 
	con nome leggermente differente.
	</p>
	<p> Gli sviluppatori invece di imparare a trattare con certe versioni, utilizzano portage per 
	gestire le varie versioni tramite l'uso degli <i>SLOT</i>s. Un esempio di ciò può essere la libreria
	freetype. La branca 1.x di freetype non è compatibile con la 2.x ma tutte e 2 le versioni sono 
	necessarie a soddisfare le dipendenze di vari pacchetti. Molti sistemi di ports e distribuzioni tendono
	ad avere un pacchetto freetype 1.x e uno 2.x, noi consideriamo questo approccio un simbolo di scarsità 
	in un sistema di gestione pacchetti.
	</p>
</body>
</section>

<section>
<title>Profili</title>
<body>

	<p>Portage supporta il concetto di <i>profili</i>. Un Profilo contiene 
	una lista di nomi di pacchetti e versioni con delle direttive e un set di
	configurazioni standard che saranno usate da portage. Un profilo dice a portage
	quali pacchetti e quali versioni specifiche di questi pacchetti utilizzare, disabilitare
	o trattare come necessari. Gli utenti possono cambiare profilo modificando un singolo symlink 
	(<i>/etc/make.profile</i>). Ciò può sembrare banale ma permette a portage di formare il nucleo
	della distribuzione e servire come un sistema professionale di installazione.
	</p>
	<p>Tutte le fatiche per la produzione di Gentoo Linux hanno restituito una collezione di <i>ebuild</i>s 
	e un profilo usati da portage. Questo profilo definisce quali pacchetti sono considerati il nucleo, ossia 
  l'insieme dei	pacchetti vitali per l'operatività del sistema. Questo profilo permette agli sviluppatori
  di bloccare o sbloccare pacchetti specifici e disabilitare temporaneamente versioni malfunzionanti.
  Gli <i>ebuild</i>s dicono semplicemente a portage come costruire e installare i pacchetti che l profilo
  richiede o permette siano installati.
	</p>
	
</body>
</section>
</chapter>


<chapter>
<title>Configurando Portage</title>

<section>
<title>Descrizione</title>
<body>
	<p>
  	Il seguente capitolo ricopre i vari aspetti della configurazione di portage, importantissima
  	sia per gli utenti che per gli sviluppatori. Portage è un sistema molto flessibile e dovete capire
  	come configurarlo nel vostro sistema e ottimizzarlo per le vostre esigenze.
	</p>
	<p>Si noti che l'utilizzo della parola "utenti" in questo documento significa persone con diritti 
	amministrativi per l'utilizzo di portage e che possono cambiare la configurazione di sistema. Dovete
	avere accesso root per cambiare la configurazione di portage e per installare o cancellare pacchetti.
	</p>
</body>
</section>

<section>
<title>I file di configurazione di portage</title>
<body>
	<p>Quasi tutte le opzioni di configurazione discusse qui possono essere trovate in 
	<path>/etc/make.conf</path>, <path>/etc/make.profile/make.defaults</path> e <path>/etc/make.global</path>. 
	<path>/etc/make.conf</path> contiene diverse variabili usate da portage.
 Portage controllerà  le variabili d'ambiente definite prima di ogni settaggio.
 Se non vengono trovati settaggi portage controllerà <path>/etc/make.conf</path>.  
 Se nessun settaggio verrà trovato saranno presi i settaggi standard da <path>/etc/make.profile/make.defaults</path>.   
 Se ancora non verrà trovato alcun settaggio, verrano presi gli standard globali da <path>/etc/make.globals</path>.  
 Si noti che tutti i settaggi definiti in <path>/etc/make.conf</path> sovrascriveranno quelli in <path>/etc/make.global</path>.
 Tutto su <path>/etc/make.conf</path> e <path>/etc/make.global</path> può essere considerato come 
 settaggio globale di sistema per come è concepito portage.
	</p>
	<p>
 Quando si controlla se un'opzione è già definita, si raccomanda di controllare prima in /etc/make.conf
 e poi in /etc/make.globals. Finchè non si specifica, le opzioni in /etc/make.conf sovrascriveranno quelle
 in /etc/make.globals.
	</p>
</body>
</section>

<section>
  <title>Settaggi di USE</title>
  <body>
  	<p>Il sistema di settaggi di USE è un modo flessibile di abilitare o disabilitare
  	varie funzioni in tempo di costruzione del pacchetto a livello globale o specifico per
  	ogni pacchetto stesso. Ciò permette un controllo amministrativo su come i pacchetti vengono
  	creati riguardo alle funzioni opzionali che possono essere incluse. A richiesta ai pacchetti con il
  	supporto opzionale a <i>gnome</i> si può disabilitare quest'ultimo tramite utilizzo dei settaggi
  	di USE. Abilitando <i>gnome</i> in USE si abilita il supporto a gnome nei vari pacchetti.
	</p>
	<p>L'effetto di un settaggio USE dipende dal pacchetto stesso.
	L'ebuild dei pacchetti supporta USE come funzione opzionale. Se il software
	non ha il supporto per funzioni opzionali, i settaggi di USE non avranno effetto.
	Molte dipendenze non sono considerate opzionali per il software quindi i settaggi ancora
	non avranno effetto (sulle dipendenze obbligatorie). 
	</p>

	<p>Una lista di settaggi usati da Gentoo è in <i>/usr/portage/profiles/use.desc</i>.  
	   Ogni settaggio USE è una linea con una breve descrizione su ciò che esso attiva.
	</p>

	<p>Portage determina se un settaggio USE è abilitato o disabilitato controllando 4 differenti
	locazioni. Queste locazioni cambiano i settaggi di USE sequenzialmente. Portage passa attraverso
	ogni locazione e ricorda se una opzione è abilitata o disabilitata. I settaggi USE sono 
	cumulativi durante il percorso fra le locazioni.
	</p>
	<p>L'ordine di controllo delle locazioni è definito in <i>USE_ORDER</i> su /etc/make.globals.
	Per disabilitare una locazione potete semplicemente toglierla da <i>USE_ORDER</i>. </p>
	<p>La seguente è una descrizione di ogni locazione elencata nell'ordine definito in <i>USE_ORDER</i>.
	</p>
	
	
	<p><b>Defaults</b></p>
	<p>
 I profili Portage possono definire un insieme di usi default delle keyword USE.
 Ciò è definito in /etc/make.defaults in ogni profilo di portage.
 Da quando /etc/make.profile è un link al profilo corrente utilizzato /etc/make.profile/make.defaults
 è l'insieme di default effettivo. Si raccomanda di non modificare questo file visto che in un futuro
 cambio di profilo verrà sovrascritto. 
	</p>
	
	<p><b>Auto</b></p>
	<p>Sono definiti in use.defaults nel portage profile (/etc/make.profile/use.defaults).
	Ogni entry consiste in un settaggio USE e nel pacchetto corrispondente. Se il paccetto elencato per
	la keyword USE è installato il settaggio USE è attivato. Se si installa <i>x11-base/xfree</i> e non 
	si disabilita esplicitamente il settaggio USE X, esso è attivato globalmente finchè il pacchetto è
	installato. Si raccomanda di non modificare il file visto che in un futuro cambio di profilo verrà
	sovrascritto.
	</p>

	<p><b>Conf</b></p>
	<p>Se un'opzione di configurazione <i>USE</i> è definita in /etc/make.conf il 
	settaggio USE definito viene incluso. Se non c'è un settaggio <i>USE</i> in make.conf
	/etc/make.globals viene controllato. Questa entry può apparire nel modo seguente:
	</p>

	<pre>
USE="slang readline gpm berkdb gdbm tcpd pam libwww ssl gb tk
     lm_sensors lvm ldap tex bonobo sdl gtk xfs evo pda ldap
     mmx mitshm perl python guile ruby postgres dvd 3dnow tcl
     lcms gif sdl vorbis ogg oss libg++ directfb decss snmp
     gnome X opengl mozilla pdflib gpg -nls gd xface jpilot
     -kde -qt -esd -motif -alsa oggvorbis"
	</pre>

	<p>
	I settaggi USE sono attivati semplicemente con i loro nomi nella lista. Essi vengono
	disabilitati mettendo un <i>-</i> prima del nome. Per esempio, <i>gnome</i> attiva la 
	keyword GNOME mentre <i>-motif</i> disabilita la keyword motif.</p>
	<p>Si raccomanda di utilizzare /etc/make.conf per i settaggi <i>USE</i>.
	Questo file non viene sovrascritto automaticamente da Portage. Si raccomanda
	anche di attivare/disattivare le keyword USE che non si vogliono attivare/disattivare
	nelle prime due locazioni.
	</p>
	
	<p><b>Env</b></p>
	<p>Le keyword possono essere sovrascritte da un settaggio d'ambiente sulla shell.
	</p>

	<pre>
export USE="-gnome"
emerge net-im/gaim
	</pre>

	<p>Ciò permette l'utilizzo di un certo insieme di settaggi USE per l'installazione
	di uno o più pacchetti specifici. Ogni invocazione a emerge dopo aver settato USE 
	nell'ambiente shell avrà effetto finchè emerge girerà da quella shell e finchè USE 
	resterà attivo.
	</p>
	
	<note>Mentre portage registra i settaggi USE quando si installa un pacchetto, 
	i settaggi Env non sono permanenti. Se il pacchetto ri reinstalla o si aggiorna nel 
	futuro esso utilizzerà le keyword correntemente in uso e non gli USE settings di 
	quando è stato installato la prima volta.</note>
	
  </body>
</section>

<section>
<title>Opzioni del compilatore</title>
<body>
	<p>Le opzioni del compilatore utilizzate da portage per compilare i pacchetti possono
	essere configurate in /etc/make.conf modificando <i>CHOST</i>, <i>CFLAGS</i> e <i>CXXFLAGS</i>.
	Il settaggio <i>CHOST</i> specifica su che piattaforma si sta compilando; <i>CFLAGS</i> e <i>CXXFLAGS</i>
	specificano le flag per il compilatore (C e C++ rispettivamente).	</p>
	<p>
	Vari insiemi di settaggi di default sono disponibili con i commenti su quali piattaforme
	saranno usati. Questi settaggi sono considerati stabili e testati. Cambiarli può 
	svelare errori di compilazione dovuti al compilatore stesso o al software.
	Per favore state attenti nel decidere di modificare la configurazione di default, 
	potreste come risultato finale, ottenere un sistema inutilizzabile.</p>
	<p>
	Utenti con sistemi multiprocessore possono beneficiare dell'opzione
	<i>MAKEOPTS</i> che si trova in /etc/make.globals. Questa opzione è passata 
	al comando <i>make</i> durante la compilazione del pacchetto per abilitare 
	istanze multiple a gcc.
	</p>
	
</body>
</section>

<section>
<title>Locazioni delle directory</title>
<body>
	<p>Portage vi permette di configurare le directory che utilizza
        per compilare i pacchetti e dove memorizza i vari file. Molti utenti
        non hanno bisogno di cambiare queste locazioni. Le seguenti opzioni
        possono essere settate:
        </p>

	<ul>
	<li><i>PORTDIR</i> - Locazione del Portage tree</li>
	<li><i>DISTDIR</i> - Cache locale degli archivi scaricati</li>
	<li><i>PKGDIR</i> - Locazione dei tbz2 generati in locale</li>
	<li><i>RPMDIR</i> - Locazione degli RPM generati localmente</li>
	<li><i>CURRENTFILE</i> - ???</li>
	<li><i>PORTAGE_TMPDIR</i> - Spazio utente temporaneo per la compilazione dei pacchetti</li>
	<li><i>BUILD_PREFIX</i> - In relazione con PORTAGE_TMPDIR</li>
	<li><i>PKG_TMPDIR</i> - In relazione con PKG_TMPDIR</li>
	</ul>
</body>
</section>
	

<section>
<title>Protezione dei file di configurazione</title>
<body>
	<p>Portage permette la protezione di tutti i file di configurazione
        nelle directory specifiche. Portage non sovrascriverà i file presenti
        nelle directory specificate. Se un pacchetto prova a installare un file
        che esiste già, esso verrà rinominato in qualcosa di simile a <i>._cfg0000_name</i>.
        Ciò serve al fatto che dopo gli utenti possano guardare il nuovo file e 
        aggiornare manualmente le differenze fra i due file.</p>
	<p>Le directory protette possono essere settate in <i>CONFIG_PROTECT</i>
        su /etc/make.conf o /etc/make.globals. File specifici e sottodirectory
        sotto le directory protette possono essere resi non protetti settando 
        <i>CONFIG_PROTECT_MASK</i>
	</p>
	<p>
        Il seguente è un esempio e non va copiato alla cieca:
	</p>

<pre>
CONFIG_PROTECT="/etc /usr/share/config /usr/kde/2/share/config"
CONFIG_PROTECT_MASK="/etc/gconf /etc/init.d /etc/pam.d"
</pre>

	<p>Gli utenti possono richiedere più informazioni su come 
        funzionano le configurazioni di protezione dei file scrivendo
        su una shell il seguente comando:
	</p>

<pre>
emerge --help config
</pre>

</body>
</section>

<section>
<title>FUNZIONALITA'</title>
<body>
	<p>Portage offre un numero di opzioni utili agli sviluppatori
        che governano il comportamento di Portage riguardo alla fase di 
        fusione e pulizia dopo l'installazione di un pacchetto. Queste 
        opzioni sono solo di interesse agli sviluppatori e possono causare
        problemi agli utenti.
	</p>
	<p>
        Una lista di funzionalità da attivare può essere settata da <i>FEATURES</i>
        su /etc/make.conf o /etc/make.profile. La seguente è una lista di opzioni disponibili:
	</p>
	<p>
	<ul>
	<li><i>digest</i> : Crea automaticamente un digest per un nuovo ebuild.</li>
	<li><i>cvs</i> : Porta i digest alla current version.</li>
	<li><i>sandbox</i> : Attiva una "sandbox" per la protezione del percorso specificato.</li>
	<li><i>noclean</i> : Portage non esegue clean su se stesso.</li>
	<li><i>noauto</i> : Non esegue automaticamente i passi precedenti all'ebuild.</li>
	</ul>
	</p>
</body>
</section>

<section>
<title>Settaggi del SYNC di Portage</title>
<body>
	<p>Portage ha l'abilità di aggiornare il Portage tree tramite
        rsync. Se si trova un altro modo di aggiornare il Portage tree, si
        può definire che metodo utilizzare tramite il settaggio <i>SYNC</i> in 
        /etc/make.conf.</p>

	<p><b>RSYNC</b></p>

	<p>rsync è il modo più comune di mantenere Portage aggiornato. Il metodo
        rsync è settato in /etc/make.conf. </p>

<pre>
SYNC="rsync://cvs.gentoo.org/gentoo-x86-portage"
</pre>

	<note>Il metodo rsync sovrascrive alla cieca ogni modifica apportata al 
        proprio Portage tree. Se vuoi mantenere le modifiche locali, usa
        PORTDIR_OVERLAY="/la/directory/dove/tieni/il/tree".</note>

	<p><b>Il CVS per sviluppatori</b></p>

	<p>Gli sviluppatori con accesso completo al tree CVS possono
        avere <i>emerge</i> sincronizzato con il tree locale contro un repository
        CVS al quale possono accedere tramite RSH o SSH.
	</p>
	<p>Semplicemente controllate un CVS tree utilizzando il vostro account, 
        copiatelo su /usr/portage e usatelo con la seguente opzione di <i>SYNC</i>
	</p>
	
<pre>
SYNC="cvs://vostroaccount@cvs.gentoo.org:/home/cvsroot"
</pre>

</body>
</section>

<section>
<title>Mirrors</title>
<body>
	<p>Il progetto gentoo mantiene un mirror locale di tutti i file di archivio
        a cui si riferiscono gli ebuilds nel Portage tree. Spesso i tarball sorgenti
        vengono tenuti in server lenti che possono anche essere offline. Così gli 
        sviluppatori rimuovono le vecchie versioni dagli ftp quando le nuove vengono
        rilasciate. Per rendere vita facile alle persone che utilizzano Gentoo (e 
        riducono la banda in uscita del sito), noi mirroriamo i files. Ciò permette 
        di scaricare più velocemente gli archivi da uno o più siti vicini alla tua
        locazione fisica.</p>
	<p>Ogni volta che si cerca di installare un pacchetto, portage controllerà prima
        il mirror gentoo per gli archivi. Se il mirror non ha i files, Portage proverà a
        scaricarli da un HTTP o FTP server presente nel pacchetto ebuild.
        </p>
	<p>Il mirror Portage può essere specificato da <i>GENTOO_MIRRORS</i>
        su /etc/make.conf. Il seguente è il settaggio di default:
	</p>
<pre>
GENTOO_MIRRORS="http://www.ibiblio.org/gentoo"
</pre>
	<p>Per trovare un mirror gentoo vicino alla vostra locazione fisica per favore
        controllate il sito web Gentoo o chiedete nella vostra mailing list.</p>
</body>
</section>

<section>
<title>Programma per il download</title>
<body>
	<p>Il programma che Portage utilizza per scaricare gli archivi può essere 
        specificato settando <i>FETCHCOMMAND</i> e <i>RESUMECOMMAND</i>. Molti 
        esempi sono illustrati in /etc/make.conf e /etc/make.globals. Portage usa
        <i>wget</i> di default visto che sopperisce a molte esigenze.</p>

	<note>Portage passa le informazioni sugli HTTP e FTP proxy al programma di 
        download attraverso l'uso delle variabili d'ambiente HTTP_PROXY e FTP_PROXY.
        </note>
</body>
</section>

<section>
<title>Proxies</title>
<body>
	<p>A Portage si può indicare di utilizzare sia proxy HTTP che FTP 
        quando si scaricano i files. I proxies possono essere specificati settando
        <i>HTTP_PROXY</i> e <i>FTP_PROXY</i> in /etc/make.conf o /etc/make.globals.
        Se HTTP e FTP sono lo stesso proxy, si può settare <i>PROXY</i> direttamente.
        </p>	
	<p>Il seguente è un esempio:</p>

<pre>
HTTP_PROXY="http://192.168.1.1:8080"
FTP_PROXY="http://192.168.1.1:8080"

or

PROXY="http://192.168.1.1:8080"
</pre>

	<p>A Portage si può anche dire di utilizzare un proxy HTTP da usare
        con RSYNC. Il proxy RSYNC si può configurare settando l'opzione 
        RSYNC_PROXY in <i>/etc/make.conf</i> o usandola come variabile d'ambiente.
        </p>
	<p>
	Il seguente Х un esempio:
	</p>

<pre>
RSYNC_PROXY="192.168.1.1:8080"
</pre>

	<note>Se siete dietro un firewall e rsync non riesce ad usare il proxy 
        HTTP, potete aggiornare il vostro Portage tree utilizzando una snapshot tarball.
        Una snapshot tarball è disponibile su <uri>http://www.ibiblio.org/gentoo/snapshots/</uri>
        </note>

</body>
</section>

<section>
<title>Varie opzioni</title>
<body>
	<p>Le seguenti sono opzioni minori che possono essere utili agli utenti:</p>

	<ul>
	<li><i>NOCOLOR</i> : Permette agli utenti di non far visualizzare i colori in output al tool emerge.</li>
	<li><i>CLEAN_DELAY</i> : Portage va in delay per un numero definito di secondi prima di cancellare un pacchetto
        per dare all'utente il tempo di arrestare l'operazione. Questa variabile specifica il numero di secondi 
        che emerge aspetta, il tempo di attesa può essere disabilitato settando 0.</li>
	</ul>

</body>
</section>

</chapter>

<chapter>
<title>Gestione dei pacchetti</title>

<section>
<title>Aggiornare il Portage tree</title>
<body>
	<p>Il Portage tree, situato in /usr/portage, contiene la libreria delle 
        istruzioni di compilazione per i vari pacchetti (chiamate <i>ebuilds</i>).
        Il tree contiene anche i profili e le informazioni di pakage.mask che sono
        vitali per mantenere il vostro sistema aggiornato. E` importante tenere questo
        tree aggiornato e in sincronizzazione con il Portage tree ufficiale per 
        avere le versioni più nuove dei pacchetti e i bugfix disponibili.
        Potete aggiornare il portage tree con il seguente comando:
	</p>
<pre>
emerge rsync
</pre>
	<p>Il metodo per aggiornare il portage tree può essere cambiato. Controllate
        <i>Settaggi del SYNC del portage tree</i> nel capitolo <i>Configurare Portage</i>
        per maggiori informazioni.
	</p>
</body>
</section>

<section>
<title>Merging dei pacchetti</title>
<body>
	<p>L'atto di compilare e installare un pacchetto tramite Portage si chiama
        <i>merging</i>. Portage compila i pacchetti e li installa temporanemante
        in una directory "immagine" dove registra i files come installati.
        Questi files vengono spostati dalla directory immagine al reale filesystem /. 
	</p>
	<p>Il comando <i>emerge</i> serve da front-end al sistema Portage.
        L'installazione e la rimozione dei pacchetti è controllata da questo comando
        e le sue varie opzioni.</p><p>
	Per installare la versione più nuova non mascherata di un pacchetto specificare 
        semplicemente il nome del pacchetto come segue:
	</p>
<pre>
emerge galeon
</pre>
	<p>
        Il comando compilerà e installerà tutte le dipendenze necessarie (prendendole 
        dai settaggi USE) e poi compila e installa la versione più nuova non mascherata di 
        galeon. Galeon può anche essere indicato dal nome completo con categoria: <i>net-www/galeon</i>.
        </p>
	<p>Il comando <i>emerge</i> accetta anche riferimenti agli ebuild. Ciò permette agli utenti
        di installare versioni vecchie di un dato pacchetto e installarlo come pacchetto di terze parti.
        Il seguente è un esempio:
	</p>
<pre>
emerge /usr/portage/net-www/galeon/galeon-1.2.0-r3.ebuild
</pre>
	<p>In aggiunta alla specificazione di un nome di pacchetto o di file ebuild da installare, 
        <i>emerge</i> supporta vari argomenti da linea di comando.
        Di questi argomenti <i>--pretend</i> è sicuramente il più utile.
        Quando questo argomento è specificato l'azione non viene eseguita.
        Il Portage visualizza una lista di pacchetti che saranno installati se
        l'azione verrà eseguita. Il seguente è un esempio di ciò che verrebbe installato
        con l'ultima versione di kdevelop:
	</p>

<pre>
root@kodiak blocke # emerge --pretend kdevelop             

These are the packages that I would merge, in order.

Calculating dependencies ...done!
[ebuild  N   ] kde-base/kdelibs-2.2.2-r4 to /
[ebuild  N   ] dev-util/kdbg-1.2.2 to /
[ebuild   U  ] app-text/psutils-1.17 to /
[ebuild   U  ] app-text/a2ps-4.13b-r3 to /
[ebuild   U  ] app-text/jadetex-2.20 to /
[ebuild  N   ] app-text/sgmltools-lite-3.0.3-r2 to /
[ebuild  N   ] kde-base/kdoc-2.2.2-r1 to /
[ebuild  N   ] net-www/htdig-3.1.5-r2 to /
[ebuild  N   ] app-text/enscript-1.6.3-r1 to /
[ebuild  N   ] kde-base/kdebase-2.2.2-r2 to /
[ebuild  N   ] app-doc/qt-docs-2.3.1 to /
[ebuild  N   ] dev-util/kdevelop-2.0.2 to /
</pre>
	<p>Nella lista precedente, i pacchetti marcati con una <i>N</i> sono 
        pacchetti che non sono installati e verranno pertanto installati durante
        l'azione. I pacchetti marcati con una <i>U</i> sono pacchetti già installati 
        con una versione più vecchia di quella necessaria, pertanto verranno aggiornati.
        </p>
	<p>
	Gli altri argomenti disponibili sono:
	</p>
	<p>
	<i>--fetchonly</i> : Scarica i file di archivio necessari a compilare il pacchetto da installare
        e ogni dipendenza necessaria.
	</p>
	<p>
	<i>--emptytree</i> : Questa opzione dice a emerge di considerare le dipendenze di un 
        pacchetto non installate. Ciò è utile con <i>--pretend</i> per visualizzare un'albero 
        completo di dipendenze per un pacchetto particolare. Tutte le dipendenze eccetto glibc vengono 
        visualizzate.
	</p>
	<p><i>--nodeps</i> : Portage tenterà solo di installare solo il pacchetto specificato ignorando le dipendenze.
        Se non avete le dipendenze già installate la compilazione probabilmente fallirà.
	</p>
	<p><i>--onlydeps</i> : Vengono installate solo le dipendenze di un determinato pacchetto. Il pacchetto
        specificato <i>non</i> verrà installato.
        </p>
	<p><i>--noreplace</i> : Salta l'installazione dei pacchetti specificati se essi sono già installati.
	</p>
	<p><i>--usepkg</i> : Invece di compilare i pacchetti specificati, Portage tenterà di usare dei tbz2 precompilati
        da una locazione specifica. La locazione è specificata dalla variabile d'ambiente <i>PKGDIR</i>.
        </p>
	<p><i>--debug</i> : L'ambiente ebuild diventa più leggibile. Ciò è utile agli sviluppatori che provano a 
        tracciare errori di sintassi negli script bash degli ebuilds.
	</p>
	<p><i>--autoclean</i> : Obbliga <i>emerge</i> a pulire le directory temporanee prima di iniziare a compilare
        un pacchetto. Portage fa questo di default quindi questa opzione è utile solo agli sviluppatori che hanno 
        disattivato questo aspetto.
	</p>
	<p><i>--verbose</i> : Fa partire <i>emerge</i> in modalità verbose. Correntemente, causa solo la visualizzazione
        degli errori di GNU info. Questi errori possono tranquillamente essere ignorati dagli utenti.</p>
</body>
</section>

<section>
<title>Disinstallare pacchetti</title>
<body>
	<p>L'atto di "unmerge" è il disinstallare i file associati con un pacchetto associato dal filesystem.
        Il software nel pacchetto viene rimosso dal filesystem e non può essere usato fino a quando non si reinstalla.
        </p>
	<p>I paccheti vengono rimossi invocando il comando <i>emerge</i> e specificando l'opzione
        <i>unmerge</i> seguita dal nome del pacchetto da rimuovere. Il seguente esempio rimuove
        tutte le versioni di <i>ltrace</i> installate:
	</p>

<pre>
emerge unmerge ltrace

o

emerge unmerge dev-util/ltrace
</pre>
	<p>A portage si può anche indicare una versione specifica da rimuovere.
        I ranges si specificano usando <i>=</i> (versione esatta), <i>&lt;</i> (minore),
        <i>&gt;</i> (maggiore), <i>&lt;=</i> (minore o uguale), <i>&gt;=</i> (maggiore o uguale).
        Il seguente comando deinstalla le versioni di ltrace uguali alla 0.3.15 o più vecchie:
	</p>

<pre>
emerge unmerge \&lt;=dev-utils/ltrace-0.3.15
</pre>

	<p>Quando si specifica un range di pacchetti è importante fare escape su <i>&gt;</i>
	e <i>&lt;</i>, perchè altrimenti la vostra shell non li interpreterebbe.
	Potreste anche aver bisogno di indicare la categoria nel nome del pacchetto
	come da esempio. Per un altro esempio su come la specificazione dei range di pacchetti agisce
	usate il comando <i>emerge --help</i>.
	</p>

	<warn>Fare unmerge sui pacchetti può essere pericoloso. Se rimuovete pacchetti nucleo il vostro sistema
	può smettere di funzionare e la rimozione di varie librerie può causare errori nel software.
	<b>Il portage non vi avvisa se state rimuovendo pacchetti che fanno parte del nucleo o dipendenze
	di altri pacchetti</b>
	</warn>

	<p>Se il pacchetto da rimuovere è installato, emerge visualizzerà quali pacchetti verrano rimossi
	e aspetterà un numero specifico di secondi per dare all'utente il tempo di uscire. Durante questo
	tempo di attesa l'utente può premere Control-C per fermare tutto prima che unmerge inizi.
	</p>
	<p>Quando unmerge inizia vedrai una lunga lista di nomi di files appartenenti al pacchetto.
	Alcuni di questi files hanno una flag visualizzata a sinistra del nome del file.
	Le flag <i>!mtime</i>, <i>!empty</i> e <i>cfgpro</i> specificano le ragioni per le quali alcuni
	files non verranno rimossi quando il pacchetto viene disinstallato. I files elencati senza flag 
	verranno rimossi dal filesystem con successo.
	</p>
	<p>
	La flag <i>!mtime</i> significa che il file è stato modificato dopo la versione del pacchetto che
	si sta cancellando. Ciò vuol dire che qualcuno ha modificato questo file dopo che il pacchetto è stato
	installato o che qualche altro pacchetto l'abbia sovrascritto dopo. Questo permette ai pacchetti
	di essere aggiornati alle versioni nuove senza aver paura che disinstallando le vecchie installate 
	vengano rimossi file vitali.
	</p>
	<p>La flag <i>!empty</i> si riferisce alle directory che Portage rifiuta di rimuovere 
	perchè non vuote (molti pacchetti sono proprietari della stessa directory a volte). 
	La protezione dei file di configurazione vi avvisa quando vedete la flag <i>cfgpro</i>. 
	Significa che un nuovo pacchetto installato richiama l'ownership di quel particolare
	file di configurazione e Portage si rifiuta di rimuoverlo.
	</p>
	<warn>I files sono considerati proprietari dell'ultimo pacchetto installato.
	Questo dipende dall'ordine dell'installazione e dal numero di versione attuale o numero
	di revisione dei pacchetti installati. Rimuovere un pacchetto nuovo che richiama un certo file
	rimuove sempre il file sempre che vecchie versioni di un pacchetto abbiamo installato il file in
	passato (assumendo che l'utente non abbia modificato manualmente il file).
	</warn>
	
</body>
</section>

<section>
<title>Aggiornamento del sistema</title>
<body>
	<p>Portage supporta l'abilità di aggiornare i pacchetti installati automaticamente con
	un singolo comando. La funzione system update permette agli utenti di aggiornare i pacchetti 
	che formano il nucleo alle versioni raccomandate dagli sviluppatori del nucleo di Gentoo. Un
	system update non aggiorna i pacchetti non essenziali bensì solo i pacchetti definiti nel profilo
	Portage come essenziali per l'operatività e la gestione del sistema.
	</p>
	<p>
	Per eseguire una system update, digitare il seguente comando:
	</p>
<pre>
emerge --update system
</pre>
	<p>Portage compilerà ed installerà gli aggiornamenti dipendentemente 
	da che versioni e che pacchetti avete installato e da cosa è raccomandato
	nel profilo corrente. Gli utenti possono usare l'opzione <i>--pretend</i>
	con l'esempio di sopra per avere la lista dei pacchetti che verranno installati
	o aggiornati.
	</p>
	<note> Siete stati avvisati nelle istruzioni di installazione che uno dei primi passi da compiere
	è l'eseguire il comando <i>emerge system</i> per installare i pacchetti base. <i>emerge --update system</i>
 aggiorna questi pacchetti all'ultima versione raccomandata.</note>
</body>
</section>

<section>
<title>Aggiornamento di World</title>
<body>
	<p>Portage supporta anche la possibilità di aggiornare i pacchetti non necessari
	con un singolo comando. Il sistema portage ha un grado di intelligenza che permette un
	aggiornamento sicuro in un sistema dove versioni multiple di un pacchetto sono installate.</p>

	<p>Il Portage world update controlla il profilo di sistema, la lista dei pacchetti bloccati (<i>package.mask</i>)
	il profilo world e le dipendenze (includendo i version ranges) dei pacchetti elencati nel profilo world,
	per determinare quali pacchetti necessitano l'aggiornamento. Un pacchetto viene aggiornato solo se
	esiste una nuova versione e se è elencato nel world profile o è una dipendenza di un pacchetto in quest'ultimo file.
	In più un pacchetto o una specifica versione di esso non deve essere bloccato in <i>package.mask</i></p>

	<p>Quando si considera quali pacchetti aggiornare, Portage prova a aggiornare i pacchetti menzionati
	nel profilo world come versioni più nuove non bloccate. Portage considera le dipendenze di ogni pacchetto
	nel world profile e prova a aggiornarle a una versione più nuova se disponibile e se coincide con
	i version range specificati e non è bloccata nel system profile o in <i>package.mask</i>. Si prenda anche
	considerazione <i>SLOTS</i>, citato nel capitolo precedente.
	</p>

	<p>Gli utenti a cui sono familiari i metodi di packaging di altre distribuzioni
	potrebbero essere confusi per il fatto che portage non faccia semplicemente e ciecamente
	un aggiornamento cieco dei pacchetti basato solo sui numeri di
versione (come in Gentoo minore di 1.0).
	Molti dei pacchetti inclusi in Gentoo hanno varie versioni disponibili nel Portage tree.
	Una vecchia o nuova versione di un pacchetto potrebbe essere incompatibile con il software che 
	la richiede. L'aggiornamento cieco di librerie e tools può causare molti problemi.
	Per evitare ciò Portage fa attenzione quando aggiorna e prova a prendere in considerazione le dipendenze di ogni 
	pacchetto che sono dichiarate negli ebuilds.
	</p>
	
	<p>Il cuore del Portage world update è il profilo world. A differenza del system profile
	che è definito dagli sviluppatori e non viene toccato dagli utenti, il world update profile
	è generato dalle azioni dell'utente.
	Il world profile opera come una "favorites list".
	I pacchetti che vengono installati manualmente dall'utente tramite l'uso di <i>emerge</i>
	vengono registrati nel file <i>world</i> in <i>/var/cache/edb/world</i>. Portage assume 
	che visto che si stia modificando tale file si voglia mantenere i pacchetti aggiornati.
	</p>
	<p>
	Il file <i>world</i> consiste in nomi di pacchetti divisi per categoria, segue
	un esempio:
	</p>
<pre>
net-im/gaim
net-www/skipstone
net-www/galeon
app-editors/vim
app-text/ispell
net-mail/evolution
dev-util/ltrace
sys-apps/xfsprogs
=net-www/mozilla-0.9.8-r3
sys-apps/attr
sys-apps/dmapi
sys-kernel/linux-sources
sys-apps/acl
app-office/gnucash
app-cdr/xcdroast
</pre>
	<p>Circa tutte le entry in questo esempio sono state aggiunte automaticamente da Portage quando l'utente
	ha installato i pacchetti specificati. Questi pacchetti verranno installati se una loro nuova versione 
	sarà disponibile.
	</p>
	
	<note>Per risparmiare tempo ed essere sicuri che i vostri pacchetti preferiti verranno aggiornati
	dovrete modificare manualmente il file <i>world</i> e aggiungere le entry per questi pacchetti.
	Gli utenti che aggiornano da vecchie versioni di portage probabilmente avranno bisogno di popolare
	questo file. Le installazioni recenti di Gentoo e Portage avranno un file molto popolato creato 
	durante l'installazione.</note>
	
	<p>Una entry interessante è per il pacchetto mozilla (<i>=net-www/mozilla-0.9.8-r3</i>).  
		Questa entry è stata aggiunta manualmente per prendere una particolare versione. I ranges
		dei pacchetti (discussi nella sezione <i>Unmerge Packages</i> di questo manuale) possono
		essere usati per forzare Portage a considerare solo certi ranges di versioni quando aggiorna
		i pacchetti. Questa entry effettivamente obbliga Portage a considerare mozilla-0.9.8-r3 come unica
		versione disponibile e quindi Portage non proverà mai ad installarne una nuova.
	</p>
	
	<p>Comando per il World Update:</p>
<pre>
emerge --update world
</pre>
	<p>Portage proverà allora ad aggiornare tutti i pacchetti citati nel file <i>world</i>
	e aggiornerà le dipendenze se necessario. Le dipendenze vengono aggiornate alla versione
	più nuova che soddisfi le necessità del pacchetto che sta per essere aggiornato.
	I pacchetti non elencati in <i>world</i> e non sono dipendenze di quelli elencati non
	verranno aggionati.
	</p>

	<warn>Portage non sovrascriverà i file nelle directory protette dalla protezione dei
	file di configurazione. Dovrete aggiornare manualmente le differenze fra i vostri file
	di configurazione correnti e le nuove versioni che Portage ha salvato per voi. Se non
	aggiornate i vostri file di configurazione il software installato potrebbe cessare di funzionare.
	Per favore guardate il capitolo <i>Protezione dei file di configurazione</i> o usate il 
	comando <i>emerge --help config</i> per maggiori informazioni.</warn> 

	<p>Per vedere una lista di cosa verrà aggiornato o installato durante il world update, potete
	usare l'opzione <i>--pretend</i> come descritto nella sezione precedente di questo capitolo.
	</p>

	<note>Un world update esegue anche un update di sistema automaticamente.
	I pacchetti nucleo non possono essere forzati con il metodo <i>world</i> file
	visto che il Portage profile lo ignorerà.</note>

	<p>Un interessante effetto secondario di come world update lavora può essere usato dagli
	utenti per aggiornare tutto il software in un sistema.
	Mentre l'utilizzo di world update prova ad aggiornare tutti i pacchetti nel <i>world</i> file e 
	le loro dipendenze, l'utilizzo dell'argomento <i>--emptytree</i> è un modo di forzare la
	ricompilazione di questi pacchetti e di ogni dipendenza ad eccezione delle glibc.
	Questo può essere utile per gli utenti che vogliono cambiare le opzioni del loro compilatore
	o le keyword USE e vogliono che questi cambiamenti vengano utilizzati per ogni pacchetto senza
	dover ricompilare tutto manualmente. Semplicemente basta popolare il file <i>world</i> con tutte 
	le applicazioni usate comunemente e scrivere il seguente comando:
	</p>
<pre>
emerge --update world --emptytree
</pre>
	<p>Potete aggiungere l'opzione <i>--pretend</i> a questo comando per ricevere una
	lista di quali pacchetti verranno ricompilati come risultato di questa azione.
	</p>
	
</body>
</section>

<section>
<title>Pulire il sistema</title>
<body>
	<p>Portage supporta l'abilità di installare versioni multiple dello stesso pacchetto.
	C'è qualche pacchetto nel Gentoo Portage tree che utilizza questa funzionalità (visto
	che le vecchie applicazioni potrebbero essere incompatibili con altri pacchetti nuovi).
	</p>
	<p>In molti casi quando viene installata una nuova versione di un pacchetto, molti dei vecchi
	pacchetti vengono sovrascritti e ciò che rimane è un pò di documentazione e altri file
	non importanti per l'operatività del sistema. Dopo un pò di tempo, questo difetto può far 
	perdere spazio su disco utile.
	</p>
	<p>Per evitare questo, Portage provvede a fornire un modo semplice per rimuovere
	le tracce delle vecchie versioni presenti nel sistema. Questa funzionalità si riferisce
	all'opzione <i>clean</i> di emerge e si utilizza nel modo seguente:
	</p>
<pre>
emerge clean
</pre>
	<p><i>emerge</i> visualizzerà una lista di revisioni di revisioni di pacchetti da rimuovere, 
 più la lista dei pacchetti che rimarranno e darà il tempo all'utente di fermare l'azione 
 con il comando Control-C. In un sistema tipico inizierà un'attività che visualizzerà una lunga
 lista di files che saranno rimossi o mantenuti.
	</p>

	<p>Finchè non si specifica, Portage assume che l'azione clean venga eseguita
	per <i>world</i> (tutti i pacchetti installati). Puoi dimensionare l'azione utilizzando
	opzioni come <i>world</i> e <i>system</i> o una lista di nomi di pacchetto,
	quest'ultima opzione e i version range sono menzionati nella sezione unmerge di questo capitolo.
	</p>

	<p>Quando si considera quale versione di un pacchetto verrà rimossa 
	il sistema Portage considera i vari profili, le necessità degli altri pacchetti installati
	e le package SLOT. Assumendo che le dipendenze siano correttamente definite per ogni pacchetto, 
	l'azione clean rimuoverà in maniera sicura i vecchi pacchetti e non rimuoverà nessuna funzionalità 
	importante nè farà smettere di funzionare il sistema.
	</p>	
</body>
</section>

<section>
<title>Pruning dei pacchetti</title>
<body>
	<p>
	Portage supporta anche l'azione <i>prune</i>. L'opzione <i>prune</i>
	è una forma insicura di clean. Rimuove tutte le versioni dei pacchetti eccetto le ultime 
	installate. Non esegue molti dei controlli che <i>clean</i> invece esegue e potrebbe
	rimuovere dipendenze importanti dal vostro sistema. Gli utilizzatori di questa opzione 
	possono con facilità rovinare i loro sistemi infatti il suo utilizzo è sconsigliato 
	eccetto per casi specifici.
	</p>

	<p>L'azione <i>prune</i> accetta la stessa lista di opzioni di <i>clean</i> e 
	può essere utilizzata nel modo seguente:
	</p>
<pre>
emerge prune
</pre>
</body>
</section>


<section>
<title>Cercare nel Portage Tree</title>
<body>
	<p>Il portage tree, visto che forma il cuore della distribuzione Gentoo Linux,
	può essere molto grande. Il comando <i>emerge</i> provvede una funzione di ricerca
	che accetta come argomento una stringa da cercare nella forma di espressione regolare
	contenuta fra virgolette. Le espressioni regolari sono una bestia complicata per cui si
	raccomanda di trovare un buon libro che le spieghi se siete interessati ad utilizzale
	in modo esaustivo.
	</p>
	<p>Ricerche più semplici possono essere effettuate senza conoscere come formare
	le regular expressions. Il seguente è un esempio di una semplice ricerca di un pacchetto
	chiamato "gcc" o che abbia "gcc" come parte del suo nome:
	</p>
<pre>
emerge search gcc
</pre>
	<p>Per ogni risultato l'azione di ricerca elenca il nome del pacchetto, la versione più 
	nuova disponibile, la versione più nuova installata, la sua home page e una descrizione
	di ciò che esso contiene.
	</p>
</body>
</section>

<section>
<title>Ricevere aiuto</title>
<body>
	<p>Maggiori informazioni su altre opzioni supportate da <i>emerge</i>
        possono essere trovate scrivendo il seguente comando:</p>
<pre>
emerge --help
</pre>
</body>
</section>
	
		

<section>
<title>Utilità</title>
<body>
	<p>Altre utilità sono state rese disponibili per renderci la
        vita facile. Queste utilità sono disponibili nella directory
        <i>app-admin/gentoolkit</i>. 
	</p>
	<p>
	<ul>
	<li><i>etc-update</i> : shell script che usato con vim assiste
        alla configurazione dei files su /etc (può essere pericoloso se 
        non utilizzato correttamente)
        </li>
	<li><i>qpkg</i> : programma che esegue query al database dei pacchetti</li>
	<li><i>epm</i> : ancora un pacchetto che esegue query al database con una
        sintassi simile a  RPM</li>
	</ul>
	</p>
</body>
</section>


</chapter>

</guide>



