<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/Attic/portage-manual.xml,v 1.9 2004/11/10 20:10:21 mush Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link = "/doc/it/portage-manual.xml" lang="it">
<title>Portage Manual</title>

<author title="Autore">
  <mail link="blocke@shivan.org">Bruce A. Locke</mail>
</author>
<author title="Redazione">
  <mail link="carl@gentoo.org">Carl Anderson</mail>
</author>
<author title="Redazione">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Redazione">
  <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Redazione">
  <mail link="erwin@gentoo.org">Erwin</mail>
</author>
<author title="Redazione">
   <mail link="g.guidi@sns.it">Gregorio Guidi</mail>
</author>
<author title="Traduzione">
  <mail link="bernardo@linux.it">Bernardo Damele</mail>
</author>
<author title="Traduzione">
  <mail link="gentoo-dev@gentoo.it">Enrico Morelli</mail>
</author>

<abstract>
Questo manuale provvede a dare una descrizione generale del Portage, informazioni
dettagliate sulla configurazione e una guida per l'utente finale atta a 
installare e mantenere i pacchetti usando il sistema di Portage.
</abstract>

<license/>

<version>0.14</version>
<date>2 Ottobre 2004</date>

<chapter>
<title>Portage: Descrizione</title>
<section>
<title>Descrizione</title>
<body>
	 
<warn>
Il contenuto di questo documento è stato integrato in
  	 <uri link="/doc/en/handbook/handbook-x86.xml?part=2">Gentoo Handbook</uri>. 
Perciò questo documento diviene obsoleto ed è disponibile solo per ragioni storiche.
Usate il
  	 <uri link="/doc/en/handbook/handbook-x86.xml?part=2">Gentoo
  	 Handbook</uri>.
Se credete che il
  	 <uri link="/doc/en/handbook/handbook-x86.xml?part=2">Gentoo Handbook</uri> ometta informazioni cruciali, riportate un <uri link="http://bugs.gentoo.org">bug</uri>.
  	 </warn>
<p>
Il Portage è un potente ed avanzato sistema di gestione pacchetti.
La sua flessibilità e la sua abilità di servire sia come semplice 
motore di costruzione sia come cuore di una distribuzione Linux
praticamente perfetta a cui ha fatto guadagnare il titolo di 
Meta-distribuzione. La distribuzione Linux Gentoo è costruita attorno
al Portage.
</p>

<p>
Spesso ci si riferisce a Gentoo come Meta-distribuzione.
Essa Consiste nel Portage e in circa 8000 recipienti di istruzioni
per pacchetti chiamati <e>ebuild</e>. Questi <e>ebuild</e> dicono
al motore Portage come compilare e installare un pacchetto software.
Attraverso l'uso dei <e>profile</e> e della utility a riga di comando
chiamata <c>emerge</c>, gli utenti e gli sviluppatori possono usare 
il Portage per installare e mantenere aggiornati i pacchetti che costruiscono
il sistema operativo e le applicazioni in un sistema.
</p>

<p>
Un sistema Linux Gentoo viene compilato "on the fly" (sul momento). L'atto
di installare Linux Gentoo non implica altro che un compilatore funzionante
ed un ambiente attraverso il quale Portage possa scaricare il codice sorgente
da Internet e costruire la restante base del sistema e le altre applicazioni
desiderate. Portage  supporta l'uso di pacchetti binari precompilati ma 
il loro scopo primario rimane quello di velocizzare il processo di installazione
su macchine lente e non di distribuire aggiornamento di software dato che
attraverso il Portage gli sviluppatori rendono disponibile nuovo software
nel modo più rapido e semplice possibile. I paccheti binari possono rivelarsi
utili anche per replicare l'installazione di un'applicazione, o distribuire
il software attraverso un cluster.
</p>

<p>
Il modo in cui Portage compila e installa i pacchetti è altamente configurabile
infatti a ciò è dovuta la diversità tra le varie installazioni di Gentoo Linux.
Essenzialmente, quando un utente installa Gentoo Linux, il sistema Portage 
compila una distribuzione Linux personalizzata conforme alle opzioni 
specificate dall'utente stesso.
</p>

<p>
A prima vista l'idea del Portage può sembrare simile al tradizionale sistema
dei ports BSD. Tutti e due compilano pacchetti e permettono agli utenti
di installare e rimuovere software in maniera sicura e tenendo conto delle dipendenze.
Molte idee per il Portage sono state prese dai ports BSD ma Portage non è da considerarsi
un'imitazione.
</p>

<p>
Il sistema Portage è una fusione del cuore python e degli script bash sulla
quale sono basati gli <e>ebuilds</e>. Invece di maneggiare il comando <c>make</c>, Portage utilizza
la potenza di python e fa grande uso degli shellscript con qualche caratteristica
object-oriented per costruire un sistema potente e unico che pensiamo 
faccia di Portage il migliore dei sistemi di ports esistenti.
</p>

<p>
Una delle funzionalità di Portage è l'abilità di avere multiple versioni e revisioni
dello stesso pacchetto nel suo albero, in più ha il supporto
per la risoluzione condizionale delle dipendenze, installazione sicura in
"sandbox", protezione dei file di configurazione, profili e molto di più; molte di queste 
funzioni verranno discusse in dettaglio più avanti in questo manuale.
</p>

</body>
</section>
<section>
<title>Risoluzione condizionale delle dipendenze e slot</title>
<body>

<p>
Portage, come ogni altro sistema di gestione dei pacchetti software, può
risolvere le dipendenze; ma una delle caratteristiche che lo fanno
differire risiede nelle dipendenze condizionali.
Portage
usa un concetto molto potente chiamato <e>USE setting</e> system. Cambiando una
variabile di configurazione si possono disabilitare i supporti opzionali (e le loro 
dipendenze) per varie funzioni e librerie per tutti pacchetti in tempo di compilazione. Questo
sistema è molto potente e flessibile e verrà documentato meglio nel capitolo successivo. 
</p>

<p>
In aggiunta Portage supporta il concetto di <e>SLOT</e>s.
Nello sviluppo di Gentoo i suoi developer spesso trovano che si ha la 
necessità di versioni multiple di certi pacchetti (come le librerie) installati per 
soddisfare le richieste di altri pacchetti. L'approccio tradizionale a risolvere questo 
 problema è il mantenere le varie versioni dei pacchetti come pacchetti diversi 
con nome leggermente differente.
</p>

<p>
Gli sviluppatori invece di imparare a trattare con certe versioni, utilizzano Portage per 
gestire le varie versioni tramite l'uso degli <e>SLOT</e>s. Un esempio di ciò può essere la libreria
freetype. Le versioni 1.x di freetype non sono compatibili con le 2.x ma tutte e due le versioni sono 
necessarie a soddisfare le dipendenze di vari pacchetti. Molti sistemi di ports e distribuzioni tendono
ad avere un pacchetto freetype 1.x e uno 2.x. Noi consideriamo questo approccio un simbolo di scarsità
in un sistema di gestione pacchetti. Noi assegniamo semplicemente allo <c>SLOT</c> il numero 1 per il primo
pacchetto e il numero 2 per il secondo. Con queste informazioni Portage può tenere d'occhio entrambe le
versioni e aggiornarle entrambe se sono disponibili rispettivamente nuovi aggiornamenti a questa branca
di pacchetti.
</p>
<p>
Al momento, l'uso degli slot non permette l'installazione di istanze multiple
della stessa versione di un pacchetto. Quando questo sarà possibile, si
potrà installare la stessa versione di gcc molte volte (per esempio
per usare cross-compiler per diverse architetture).
</p>
<p>
Ci sono anche altre aree dove il concetto di slot, può apportare delle migliorie.
Portage non è in grado di capire se possono coesistere diverse versioni
dello stesso pacchetto, questo è esplicitato negli ebuild.
Qualche volta Portage forza gli utenti ad aggiornare il software all'ultima
versione disponibile anche se la versione correntemente installata appartiene
ad un altro slot. Inoltre, per coloro che scrivono gli ebuild non è possibile
specificare le dipendenze di un pacchetto di uno specifico slot.
</p>
</body>
</section>
<section>
<title>Profili</title>
<body>

<p>
Un profilo contiene 
una lista di nomi di pacchetti e versioni con delle direttive e un set di
configurazioni standard che saranno usate da Portage. Un profilo dice a Portage
quali pacchetti e quali versioni specifiche di questi pacchetti utilizzare, disabilitare
o trattare come necessari. Gli utenti possono cambiare profilo modificando un singolo link simbolico
(<c>/etc/make.profile</c>).
</p>
<p>
Un profilo definisce quali pacchetti sono considerati il nucleo, ossia 
l'insieme dei pacchetti vitali per l'operatività del sistema. Questo profilo permette agli sviluppatori
di bloccare o sbloccare pacchetti specifici e disabilitare temporaneamente versioni malfunzionanti.
Gli <e>ebuild</e> dicono semplicemente a Portage come costruire e installare i pacchetti che il profilo
richiede o permette siano installati.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Configurando Portage</title>
<section>
<title>Descrizione</title>
<body>

<p>
Il seguente capitolo ricopre i vari aspetti della configurazione di Portage, importantissima
sia per gli utenti che per gli sviluppatori. Portage è un sistema molto flessibile e dovete capire
come configurarlo nel vostro sistema e ottimizzarlo per le vostre esigenze.
</p>

<p>
Si noti che l'utilizzo della parola "utenti" in questo documento significa persone con diritti 
amministrativi per l'utilizzo di Portage e che possono cambiare la configurazione di sistema. Dovete
avere accesso root per cambiare la configurazione di Portage e per installare o cancellare pacchetti.
</p>

</body>
</section>
<section>
<title>I file di configurazione di Portage</title>
<body>

<p>
Molte delle opzioni di configurazione del Portage sono espresse da semplici varabili che possono essere trovate in
<path>/etc/make.conf</path>, <path>/etc/make.conf.example</path>, <path>/etc/make.profile/make.defaults</path> e <path>/etc/make.global</path>. 

Portage controllerà le variabili d'ambiente definite prima di ogni settaggio.
Se non vengono trovate impostazioni, Portage controllerà <path>/etc/make.conf</path>.  
Se non viene trovato nessun settaggio, saranno usate le impostazioni standard da <path>/etc/make.profile/make.defaults</path>.   
Se ancora non verrà trovato alcun settaggio, verrano presi gli standard globali da <path>/etc/make.globals</path>.  
Si noti che tutti i settaggi definiti in <path>/etc/make.conf</path> sovrascriveranno quelli in <path>/etc/make.global</path>.
Tutto su <path>/etc/make.conf</path> e <path>/etc/make.global</path> può essere considerato come 
settaggio globale di sistema per come è concepito Portage.
</p>

<p>
Il comportamento del Portage è influenzato anche da alcuni file presenti
in <path>/etc/portage</path>. Questi file sono tutti opzionali e quindi,
verranno esaminati solo se esitono. Verranno presi in considerazione alcuni
di questi file, come <path>/etc/portage/package.use</path> e <path>/etc/portage/portage.keywords</path>, nel corso di questa guida. Per maggiori informazioni
usare <c>man portage</c> che descrive dettagliatamente tutti questi file.
</p>

</body>
</section>
<section>
<title>Impostazioni di USE</title>
<body>

<p>
Il sistema di impostazioni di USE è un modo flessibile di abilitare o disabilitare
varie funzioni al momento di costruzione del pacchetto a livello globale o specifico per
ogni pacchetto stesso. Ciò permette un controllo amministrativo su come i pacchetti vengono
creati riguardo alle funzioni opzionali che possono essere incluse. A richiesta ai pacchetti con il
supporto opzionale a <c>gnome</c> si può disabilitare quest'ultimo tramite utilizzo dei settaggi
di USE. Abilitando <c>gnome</c> in USE si abilita il supporto a gnome nei vari pacchetti.
</p>

<p>
L'effetto di una impostazione USE dipende dal pacchetto stesso.
L'ebuild dei pacchetti supporta USE come funzione opzionale. Se il software
non ha il supporto per funzioni opzionali, le impostazioni di USE non avranno effetto.
Molte dipendenze non sono considerate opzionali per il software quindi i settaggi ancora
non avranno effetto (sulle dipendenze obbligatorie). 
Una lista di keyword USE che avranno effetto sull'installazione di un pacchetto,
possono essere visualizzate attraverso il comando <c>emerge</c> con l'opzione <c>--verbose</c> in aggiunta a <c>--pretend</c>.
(Vedere anche <uri link="#doc_chap3_sect2">Emerge pacchetti</uri>
  	 in <uri link="#doc_chap3">Gestione dei pacchetti</uri>). 
Per sapere cosa fa in dettaglio ogni singolo flag, si può usare il comado
<c>equiry</c> (in  <c>app-portage/gentoolkit</c>).
</p>

<p>
Una lista completa dei flag USE con relativa descrizione, la si può trovare
in <path>/usr/portage/profiles/use.desc</path>. In certe occasioni un ebuild
può essere influenzato da impostazioni USE che non sono specifiche per
questo singolo pacchetto e che non sono presenti in  <path>use.desc</path>.
Queste impostazioni sono chiamate flag USE locali e sono listati in
  <path>/usr/portage/profiles/use.local.desc</path>.
</p>

<p>
Portage determina se un settaggio USE è abilitato o disabilitato controllando quattro differenti
locazioni ed anche in <path>/etc/portage/package.use</path>, se presente. Queste locazioni cambiano i settaggi di USE sequenzialmente. Portage passa attraverso
ogni locazione e ricorda se una opzione è abilitata o disabilitata. I settaggi USE sono 
cumulativi durante il percorso fra le locazioni.
</p>

<p>
Le variabili controllate durante il calcolo delle impostazini USE e l'ordine
col quale Portage le controllerà è definito in <c>USE_ORDER</c> su <path>/etc/make.globals</path>.
Per disabilitare una locazione potete semplicemente toglierla da <c>USE_ORDER</c>.
</p>

<p>
La seguente è una descrizione di ogni locazione elencata nell'ordine definito in <c>USE_ORDER</c> nella
configurazione di default di Portage.
</p>

<p>
<b>Defaults</b>
</p>

<p>
I profili Portage possono definire un insieme di usi default delle keyword USE.
Ciò è definito in <path>/etc/make.defaults</path> e in ogni profilo di Portage. Da quando
<path>/etc/make.profile</path> è un link al profilo corrente utilizzato <path>/etc/make.profile/make.defaults</path>
è l'insieme di default effettivo.
</p>

<p>
<b>Auto</b>
</p>

<p>Sono definiti in <path>use.defaults</path> nel Portage profile (<path>/etc/make.profile/use.defaults</path>).
Ogni entry consiste in un settaggio USE e nel pacchetto corrispondente. Se il pacchetto elencato per
la keyword USE è installato il settaggio USE è attivato. Se si installa <c>dev-db/mysql</c> e non 
si disabilita esplicitamente il settaggio USE <e>mysql</e>, esso è attivato globalmente finchè il pacchetto è
installato. Si raccomanda di non modificare il file visto che in un futuro cambio di profilo verrà
sovrascritto.
</p>

<p>
<b>Conf</b>
</p>

<p>
Se un'opzione di configurazione <c>USE</c> è definita in /etc/make.conf il 
settaggio USE definito viene incluso. Se non c'è un settaggio <c>USE</c> in <path>make.conf</path>
questo viene cercato in <path>/etc/make.globals</path> viene controllato.
Questa entry può apparire nel modo seguente:
</p>

<pre caption="Valori USE">
USE="slang readline gpm berkdb gdbm tcpd pam libwww ssl gb tk
lm_sensors lvm ldap tex bonobo sdl gtk xfs evo pda ldap
mmx mitshm perl python guile ruby postgres dvd 3dnow tcl
lcms gif sdl vorbis ogg oss libg++ directfb decss snmp
gnome X opengl mozilla pdflib gpg -nls gd xface jpilot
-kde -qt -esd -motif -alsa oggvorbis"
</pre>

<p>
I settaggi USE sono attivati semplicemente con i loro nomi nella lista. Essi vengono
disabilitati mettendo un <c>-</c> prima del nome. Per esempio, <c>gnome</c> attiva la 
keyword GNOME mentre <c>-motif</c> disabilita la keyword motif.
</p>

<p>
Si raccomanda di utilizzare /etc/make.conf per i settaggi <c>USE</c>.
Questo file non viene sovrascritto automaticamente da Portage. 
Si raccomanda anche di attivare/disattivare le keyword <c>USE</c> che sono
state attivate/disattivate nelle prime due locazioni.
</p>

<p>
<b>Env</b>
</p>

<p>
Le keyword possono essere sovrascritte da un settaggio d'ambiente sulla shell.
</p>

<pre caption = "Sovrascrivere USE keywords">
# <i>export USE="-gnome"</i>
# <i>emerge net-im/gaim</i>
</pre>

<p>
Ciò permette l'utilizzo di un certo insieme di settaggi USE per l'installazione
di uno o più pacchetti specifici. Ogni invocazione a emerge dopo aver settato USE 
nell'ambiente shell avrà effetto finchè emerge gireraàda quella shell e finchè USE 
resterà attivo.
</p>

<note>
La keyword speciale <c>-*</c> può essere usata per disabilitare tutte le
impostazioni USE. Per esempio usando <c>USE="-* ssl"</c> da linea di comando
o all'interno di <path>/etc/make.conf</path> si disabiliteranno tutte le
impostazioni USE eccetto <c>ssl</c>.
</note>
<p>
Da notare che se un pacchetto viene riemerso o aggiornato in futuro
userà le impostazioni USE correntemente in uso e non quelle definite
quando è stato emerso la prima volta. Per specificare una impostazione
USE relativa ad uno specifico pacchetto in modo persistente, occorre
aggiungere una linea in  <path>/etc/portage/package.use</path> come mostra l'esempio che segue.
Questa nuova linea assicurerà che ogni volta che verrà 
installato <c>net-im/gaim</c>, l'impostazione <c>gnome</c> sarà disablitata.
 </p>
  	 
  <pre caption = "Usare /etc/portage/package.use">
  <comment>aggiungere questa linea a /etc/portage/package.use:</comment>
  net-im/gaim -gnome
  </pre>
</body>
</section>
<section>
<title>Opzioni del compilatore</title>
<body>

<p>
Le opzioni del compilatore utilizzate da Portage per compilare i pacchetti possono
essere configurate in <path>/etc/make.conf</path> modificando <c>CHOST</c>, <c>CFLAGS</c> e <c>CXXFLAGS</c>.
Il settaggio <c>CHOST</c> specifica su che piattaforma si sta compilando; <c>CFLAGS</c> e <c>CXXFLAGS</c>
specificano le flag per il compilatore (C e C++ rispettivamente).
</p>

<p>
Vari insiemi di settaggi di default sono disponibili con i commenti su quali piattaforme
saranno usati. Questi settaggi sono considerati stabili e testati. Cambiarli può 
svelare errori di compilazione dovuti al compilatore stesso o al software.
Per favore state attenti nel decidere di modificare la configurazione di default, 
potreste come risultato finale, ottenere un sistema inutilizzabile.
</p>

<p>
Utenti con sistemi multiprocessore possono beneficiare dell'opzione
<c>MAKEOPTS</c> che si trova in <path>/etc/make.globals</path>. Questa opzione è passata 
al comando <c>make</c> durante la compilazione del pacchetto per abilitare 
istanze multiple a gcc.
</p>

</body>
</section>
<section>
<title>Locazioni delle directory</title>
<body>

<p>
Portage vi permette di configurare le directory che utilizza
per compilare i pacchetti e dove memorizza i vari file. Molti utenti
non hanno bisogno di cambiare queste locazioni. Le seguenti opzioni
possono essere valorizzate:
</p>

<ul>
  <li>
    <c>PORTDIR</c> - Locazione dell'albero di Portage
  </li>
  <li>
    <c>DISTDIR</c> - Cache locale degli archivi scaricati
  </li>
  <li>
    <c>PKGDIR</c> - Locazione dei tbz2 generati in locale
  </li>
  <li>
    <c>PORTAGE_TMPDIR</c> - Spazio utente temporaneo per la compilazione dei pacchetti
  </li>
  <li>
    <c>PORT_LOGDIR</c> - Locazione usata per memorizzare i file di log per emersioni individuali. La funzione di log è disabilitata se questa variabile non
è configurata.
  </li>
   <li>
  	   <c>PORTDIR_OVERLAY</c> - Locazione usata per mantenere un albero personalizzato del portage.
            Portage guarderà qui prima di cercare in PORTDIR.
  	   </li>
</ul>

</body>
</section>
<section>
<title>Protezione dei file di configurazione</title>
<body>

<p>
Portage permette la protezione di tutti i file di configurazione
in directory specifiche. Portage non sovrascriverà i file presenti
nelle directory specificate. Se un pacchetto prova a installare un file
che esiste già, esso verrà rinominato in qualcosa di simile a <c>cfg0000_name</c>.
Ciò serve al fatto che dopo gli utenti possano guardare il nuovo file e 
aggiornare manualmente le differenze fra i due file.</p>
<p>Le directory protette possono essere settate in <c>CONFIG_PROTECT</c>
su /etc/make.conf o /etc/make.globals. File specifici e sottodirectory
sotto le directory protette possono essere resi non protetti settando 
<c>CONFIG_PROTECT_MASK</c>.
</p>

<p>
Il seguente è un esempio e non va copiato alla cieca:
</p>

<pre caption = "Proteggere alcune directory e file">
CONFIG_PROTECT="/etc /usr/share/config /usr/kde/2/share/config"
CONFIG_PROTECT_MASK="/etc/gconf /etc/init.d /etc/pam.d"
</pre>

<p>Gli utenti possono richiedere più informazioni su come 
funzionano le configurazioni di protezione dei file scrivendo
su una shell il seguente comando:
</p>

<pre caption = "Ulteriori informazioni riguardo la Protezione dei file di configurazione">
# <i>emerge --help config</i>
</pre>

</body>
</section>

<section>
<title>Funzionalità</title>
<body>

<p>
Portage offre un numero di opzioni utili agli sviluppatori
che governano il comportamento di Portage riguardo alla fase di 
fusione e pulizia dopo l'installazione di un pacchetto. Queste 
opzioni sono solo di interesse agli sviluppatori e possono causare
problemi agli utenti.
</p>

<p>
Una lista di funzionalità da attivare può essere settata da <c>FEATURES</c> <path>/etc/make.conf</path> o
<path>/etc/make.profile</path>. La seguente è una lista di opzioni più importanti disponibili (dare un'occhiata in <path>/etc/make.conf.example</path>
per maggiori dettagli):
</p>

<ul>
  <li><c>buildpkg</c> : Crea pacchetti binari per ogni ebuild che emergete.</li>
  <li><c>ccache</c> : Abiliterà la cache del compilatore se è installato <c>dev-util/ccache</c>.</li>
  <li><c>digest</c> : Crea automaticamente un digest per un nuovo ebuild.</li>
  <li><c>collision-protect</c> : Portage fallirà l'installazione se un pacchetto
tenterà di sovrascrivere un file che è di proprità di un altro pacchetto.</li>
  <li><c>distcc</c> : Usa il compilatore distribuito offerto da distcc.</li>
  <li><c>keeptemp</c> : Non rimuove file temporanei (${T}) dopo un merge.</li>
  <li><c>keepwork</c> : Non rimuove i sorgenti dopo la compilazione.</li>
  <li><c>noauto</c> : Non esegue automaticamente i passi precedenti all'ebuild.</li>
  <li><c>noclean</c> : Portage non esegue clean su se stesso.</li>
  <li><c>nostrip</c> : Previene la rimozione dei binari.</li>
  <li><c>notitles</c> : disabilita l'aggiornamento del titolo nella titlebar di xterm.</li>
  <li><c>sandbox</c> : Attiva una "sandbox" per la protezione del percorso specificato.</li>
  <li><c>strict</c> : Attiva un controllo severo sui file digest e Manifest.</li>
  <li><c>userpriv</c> : Non utilizza privilegi di root durante la compilazione.</li>
  <li><c>usersandbox</c> : Usa una sandbox quando userpriv è attiva.</li>
</ul>


</body>
</section>

<section>
<title>Settaggi del SYNC di Portage</title>
<body>

<p>
Portage ha la capacità di aggiornare l'albero di Portage tramite
i protocolli rsync e cvs.
Il protocollo usato per la comunicazione e il server da contattare
sono configurabili attraverso la variabile <c>SYNC</c> in <path>/etc/make.conf</path>.
</p>

<p>
<b>RSYNC</b>
</p>

<p>
rsync è il modo più comune di mantenere Portage aggiornato. Il metodo
rsync è settato in /etc/make.conf (è permessa solo una scelta).
</p>

<pre caption = "Impostare la variabile SYNC">
SYNC="rsync://rsync.gentoo.org/gentoo-portage"
</pre>

<note>
Il metodo rsync sovrascrive alla cieca ogni modifica apportata al 
proprio albero di Portage. Se vuoi mantenere le modifiche locali, usa
PORTDIR_OVERLAY="/la/directory/dove/tieni/il/tree".
</note>
 <p>
Ci sono diverse variabili che hanno effetto sul modo in cui Portage esegue un
sync e che possono essere configurate in <path>/etc/make.conf</path>:
</p>
	 
   <ul>
     <li>
       <c>RSYNC_RETRIES</c> - Numero di tentativi per contattare il server sync prima di desistere.
  	   </li>
   <li>
     <c>RSYNC_TIMEOUT</c> - Numero di secondi prima dichiudere la connessione.
  	   </li>
   <li>
      <c>RSYNC_EXCLUDEFROM</c> - Specifica un file con la lista dei percorsi che non dovrebbero essere salvati dal server rsync. Fare attenzione a non infrangere le dipendenze usando questa opzione.
  	   </li>
  	 </ul>
  	 
<p>
<b>Il CVS per sviluppatori</b>
</p>

<p>
Gli sviluppatori con accesso completo all'albero di CVS possono
avere <c>emerge</c> sincronizzato con l'alberatura locale oppure con un repository
CVS al quale possono accedere tramite RSH o SSH.
</p>

<p>
Semplicemente controllate un albero di CVS utilizzando il vostro account, 
copiatelo su /usr/portage e usatelo con la seguente opzione di <c>SYNC</c>
</p>

<pre caption = "Usare il CVS per il vostro albero di Portage">
SYNC="cvs://vostroaccount@cvs.gentoo.org:/var/cvsroot"
</pre>

</body>
</section>
<section>
<title>Mirrors</title>
<body>

<p>
Il progetto Gentoo mantiene un mirror locale di tutti i file di archivio
a cui si riferiscono gli ebuilds nell'albero di Portage. Spesso i tarball dei sorgenti
vengono tenuti in server lenti che potrebbero anche essere offline. Così gli 
sviluppatori rimuovono le vecchie versioni dagli ftp quando le nuove vengono
rilasciate. Per rendere vita facile alle persone che utilizzano Gentoo (e 
ridurre la banda in uscita del sito), noi mirroriamo i files. Ciò permette 
di scaricare più velocemente gli archivi da uno o più siti vicini a dove vi trovate.
</p>

<p>
Ogni volta che si cerca di installare un pacchetto, Portage controllerà prima
il mirror gentoo per gli archivi. Se il mirror non ha i files, Portage proverà a
scaricarli da un HTTP o FTP server presente nel pacchetto ebuild.
</p>

<p>
I mirror Portage possono essere specificati in <c>GENTOO_MIRRORS</c> su <path>/etc/make.conf</path> (come una lista separata da spazi).
Il seguente è il settaggio di default:
</p>

<pre caption = "Impostare un mirror">
GENTOO_MIRRORS="http://www.ibiblio.org/gentoo"
</pre>

<p>
Per trovare un mirror gentoo vicino alla vostra locazione fisica per favore
controllate il sito web Gentoo o chiedete nella vostra mailing list.
</p>

</body>
</section>
<section>
<title>Programma per il download</title>
<body>

<p>
Il programma che Portage utilizza per scaricare gli archivi può essere 
specificato settando <c>FETCHCOMMAND</c> e <c>RESUMECOMMAND</c>. Molti 
esempi sono illustrati in /etc/make.conf e /etc/make.globals. Portage usa
<c>wget</c> di default visto che sopperisce a molte esigenze.
</p>


</body>
</section>
<section>
<title>Proxies</title>
<body>

<p>
Si può indicare a portage di utilizzare sia proxy HTTP che FTP 
quando si scaricano i files. I proxies possono essere specificati settando
<c>HTTP_PROXY</c> e <c>FTP_PROXY</c> in /etc/make.conf o /etc/make.globals.
Se HTTP e FTP sono lo stesso proxy, si può settare <c>PROXY</c> direttamente.
</p>

<p>
Il seguente è un esempio:
</p>

<pre caption = "Impostare i proxies">
HTTP_PROXY="http://192.168.1.1:8080"
FTP_PROXY="http://192.168.1.1:8080"
<comment>o</comment>
PROXY="http://192.168.1.1:8080"
</pre>

<p>
Si può anche indicare a portage di utilizzare un proxy HTTP da usare
con RSYNC. Il proxy RSYNC si può configurare settando l'opzione 
RSYNC_PROXY in <c>/etc/make.conf</c> o usandola come variabile d'ambiente.
</p>

<p>
Il seguente Х un esempio:
</p>

<pre caption = "Impostare un proxy RSYNC">
RSYNC_PROXY="192.168.1.1:8080"
</pre>

<note>
Se siete dietro un firewall e rsync non riesce ad usare il proxy 
HTTP, potete aggiornare il vostro albero di Portage utilizzando una snapshot tarball (Per maggiori informazioni <uri>link="/doc/en/faq.xml#norsync">FAQ</uri>).
Una snapshot tarball è disponibile su <uri>http://www.ibiblio.org/gentoo/snapshots/</uri>
</note>

</body>
</section>
<section>
<title>Altre opzioni</title>
<body>

<p>
Le opzioni esaminate non completano la lista di quello che potete trovare
in
 <path>/etc/make.conf</path>. Queste sono altre opzioni che potrete trovare utili:
</p>

<ul>
  <li>
    <c>NOCOLOR</c> : Permette agli utenti di non far visualizzare i colori in output al tool emerge.
  </li>
  <li>
    <c>CLEAN_DELAY</c> : Portage va in delay per un numero definito di secondi prima di cancellare un pacchetto
    per dare all'utente il tempo di arrestare l'operazione. Questa variabile specifica il numero di secondi 
    che emerge aspetta, il tempo di attesa può essere disabilitato settando 0.
  </li>
  <li>
    <c>PORTAGE_NICENESS</c> : Il valore di questa variabile é in aggiunta al valore di nice che emerge usa normalmente.
  </li>
<li>
    <c>PORTAGE_BINHOST</c> : Questa variabile memorizza una locazione remota (http o ftp)
        dove Portage prova a cercare i pacchetti binari precompilati.
        E' utile distribuire i pacchetti binari attraverso un cluster di 
macchine.
        Al momento non ci sono server Gentoo ufficiali che forniscono
pacchetti binari.
   </li> 	 
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Gestione dei pacchetti</title>
<section>
<title>Aggiornare l'albero di Portage</title>
<body>

<p>
L'albero di Portage , situato in /usr/portage, contiene la libreria delle 
istruzioni di compilazione per i vari pacchetti (chiamate <c>ebuilds</c>).
Il tree contiene anche i profili e le informazioni di masking che sono
vitali per mantenere il vostro sistema aggiornato. E` importante tenere questo
tree aggiornato e in sincronizzazione con l'albero di Portage ufficiale per 
avere le versioni più nuove dei pacchetti e i bugfix disponibili.
Potete aggiornare l'albero di Portage con il seguente comando:
</p>

<pre caption = "Aggiornare l'albero di Portage">
# <i>emerge --sync</i>
</pre>

<p>
Il metodo per aggiornare l'albero di Portage può essere cambiato. Controllate
<c>Settaggi del SYNC dell'albero di Portage</c> nel capitolo <c>Configurare Portage</c>
per maggiori informazioni.
</p>

</body>
</section>
<section>
<title>Merging dei pacchetti</title>
<body>

<p>
L'atto di compilare e installare un pacchetto tramite Portage si chiama
<c>merging</c>. Portage compila i pacchetti e li installa temporanemante
in una directory "immagine" dove registra i files come installati.
Questi files vengono spostati dalla directory immagine al reale filesystem /. 
</p>

<p>
Il comando <c>emerge</c> serve da front-end al sistema Portage.
L'installazione e la rimozione dei pacchetti è controllata da questo comando
e le sue varie opzioni.</p><p>
Per installare la versione più nuova di un pacchetto specificare 
semplicemente il nome del pacchetto come segue:
</p>

<pre caption = "Installare un pacchetto">
# <i>emerge galeon</i>
</pre>

<p>
Il comando compilerà e installerà tutte le dipendenze necessarie (in base a quanto impostato
nella variabile USE) e poi compila e installa la versione più nuova di 
galeon.
(Vedere anche il capitolo <uri link="#doc_chap4">Disponibilità dei pacchetti</uri>
per vedere quando i pacchetti sono disponibili)
 Galeon può anche essere indicato dal nome completo con categoria: <c>net-www/galeon</c>
</p>

<p>
Portage permette anche di installare versioni specifiche di pacchetti.
Si può far questo definendo un <e>range</e>, un <e>intervallo</e> entro il 
quale Portage seleziona la scelta migliore.
L'intervallo viene specificato usando gli operatori <c>=</c> (la versione esatta), <c>&lt;</c> (minore di), <c>&gt;</c> (maggiore di), <c>&lt;=</c> (minore o uguale a), e <c>&gt;=</c> (maggiore o uguale a).
Il seguente esempio mostra come emergere la versione migliore di galeon
più vecchia di o uguale alla versione 1.3:
</p>

<pre caption = "Definire un range di pacchetti">
# <i>emerge "&lt;=net-www/galeon-1.3"</i>
</pre>

<p>
Quando si specificano intervalli per i pacchetti è importante
porre i caratteri <c>&gt;</c> e <c>&lt;</c> 
tra virgolette così che la shell non cerchi di interpretarli.
Ci sarà inoltre bisogno di specificare la categoria del pacchetto, come
mostrato nell'esempio. Per avere altri esempi su come specificare 
intervalli per installare pacchetti usare <c>emerge --help</c>.
</p>
  	 
 <p>
In aggiunta alla selezione del nome del pacchetto e della versione,
<c>emerge</c> supporta vari argomenti da linea di comando.
Di questi argomenti <c>--pretend</c> è sicuramente il più utile.
Quando questo argomento è specificato l'azione non viene eseguita.
Il Portage visualizza una lista di pacchetti che saranno installati se
l'azione verrà eseguita. Il seguente è un esempio di ciò che verrebbe installato
con l'ultima versione di kdevelop:
</p>

<pre caption = "Controllare cosa farà ebuild">
# <i>emerge --pretend kdevelop</i>

These are the packages that I would merge, in order.

Calculating dependencies ...done!
[ebuild  N   ] kde-base/kdelibs-2.2.2-r4 to /
[ebuild  N   ] dev-util/kdbg-1.2.2 to /
[ebuild   U  ] app-text/psutils-1.17 to /
[ebuild   U  ] app-text/a2ps-4.13b-r3 to /
[ebuild   U  ] app-text/jadetex-2.20 to /
[ebuild  N   ] app-text/sgmltools-lite-3.0.3-r2 to /
[ebuild  N   ] kde-base/kdoc-2.2.2-r1 to /
[ebuild  N   ] net-www/htdig-3.1.5-r2 to /
[ebuild  N   ] app-text/enscript-1.6.3-r1 to /
[ebuild  N   ] kde-base/kdebase-2.2.2-r2 to /
[ebuild  N   ] app-doc/qt-docs-2.3.1 to /
[ebuild  N   ] dev-util/kdevelop-2.0.2 to /
</pre>

<p>
Nella lista precedente, i pacchetti marcati con una <c>N</c> sono 
pacchetti che non sono installati e verranno pertanto installati durante
l'azione. I pacchetti marcati con una <c>U</c> sono pacchetti già installati 
con una versione più vecchia di quella necessaria, pertanto verranno aggiornati.
</p>

<p>
Altre comuni opzioni sono:
</p>

<p>
     <c>--update</c> : Aggiorna i paccehtti con le loro dipendenze dirette 
all'ultima versione disponibile.
</p>
 <p>
  	 <c>--ask</c> : Prima di eseguire il merge, visualizza quali ebuild
e pacchetti binari saranno installati, nello stesso formato di --pretend;
richiede quindi se continuare con il merge o uscire.
 </p> 	

<p>
<c>--noreplace</c> : Salta l'installazione dei pacchetti specificati se essi sono già installati.
</p>

<p>
  	 <c>--deep</c> : Usato ineieme con <c>--update</c>, questa opzione
    forza emerge ad aggiornare l'intero albero delle dipendenze dei pacchetti,
invece di controllare solo le dipendenze immediate dei pacchetti.
 </p> 	

<p>
<c>--usepkg</c> : Invece di compilare i pacchetti specificati, Portage tenterà di usare dei tbz2 precompilati
da una locazione specifica. La locazione è specificata dalla variabile d'ambiente <c>PKGDIR</c>.
</p>
<p>
  	 <c>--usepkgonly</c> : Come <c>--usepkg</c> eccetto che permette solo
l'uso di pacchetti binari ed esce se il pacchetto non è disponibile
durante il calcolo delle dipendenze.
  	 </p>
  	 
  	 <p>
  	 <c>--buildpkg</c> : emerge costruirà pacchetti binari per tutti gli ebuild proceassati.
  	 </p>
  	 
  	 <p>
  	 <c>--buildpkgonly</c> : emerge costruirà pacchetti binari per tutti gli
ebuild senza emergerli.
  	 </p>
  	 
  	 <p>
  	 <c>--oneshot</c> : Emersione normale, ma non viene aggiunto alcun pacchetto nel file world.
 </p> 	 
    <p>
<c>--tree</c> : Mostra l'albero indentato delle dipendenze.
</p> 

</body>
</section>
<section>
<title>Disinstallare pacchetti</title>
<body>

<p>
L'atto di "unmerge" è il cancellare dal filesystem i file precedentemente installati da un pacchetto.
Il software nel pacchetto viene rimosso dal filesystem e non può essere usato fino a quando non si reinstalla.
</p>
<p>I paccheti vengono rimossi invocando il comando <c>emerge</c> e specificando l'opzione
<c>--unmerge</c> seguita dal nome del pacchetto da rimuovere. Il seguente esempio rimuove
tutte le versioni di <c>ltrace</c> installate:
</p>

<pre caption = "Disinstallare un pacchetto">
# <i>emerge --unmerge ltrace</i>
<comment>o</comment>
# <i>emerge --unmerge dev-util/ltrace</i>
</pre>

<p>
A Portage si può anche indicare una versione specifica da rimuovere usando 
gli intervalli con la sintassi vista per l'emersione.
Il seguente comando deinstalla le versioni di ltrace uguali alla 0.3.15 o più vecchie:
</p>

<pre caption = "Disinstallare la specifica versione di un pacchetto">
# <i>emerge --unmerge "&lt;=dev-utils/ltrace-0.3.15"</i>
</pre>

<warn>
Fare unmerge sui pacchetti può essere pericoloso. Se rimuovete i pacchetti base il vostro sistema
può smettere di funzionare e la rimozione di varie librerie può causare errori nel software.
<b>Il Portage non vi avvisa se state rimuovendo pacchetti che fanno parte del nucleo o dipendenze
di altri pacchetti</b>
</warn>

<p>
Ricordare di usare l'opzione <c>--pretend</c> per vedere cosa succederà
prima di rimuovere qualcosa.
Per maggiore sicurezza, emerge aspetterà un numero specifico di secondi per dare all'utente il tempo di uscire. Durante questo
tempo di attesa l'utente può premere Control-C per fermare tutto prima che unmerge inizi.
</p>

<p>
Quando unmerge inizia vedrai una lunga lista di nomi di files appartenenti al pacchetto.
Alcuni di questi files hanno una flag visualizzata a sinistra del nome del file.
Le flag <c>!mtime</c>, <c>!empty</c> e <c>cfgpro</c> specificano le ragioni per le quali alcuni
files non verranno rimossi quando il pacchetto viene disinstallato. I files elencati senza flag 
verranno rimossi dal filesystem con successo.
</p>

<p>
La flag <c>!mtime</c> significa che il file è stato modificato dopo la versione del pacchetto che
si sta cancellando. Ciò vuol dire che qualcuno ha modificato questo file dopo che il pacchetto è stato
installato o che qualche altro pacchetto l'abbia sovrascritto dopo. Questo permette ai pacchetti
di essere aggiornati alle versioni nuove senza aver paura che disinstallando le vecchie installate 
vengano rimossi file vitali.
</p>

<p>
La flag <c>!empty</c> si riferisce alle directory che Portage rifiuta di rimuovere 
perchè non vuote (molti pacchetti sono proprietari della stessa directory a volte). 
La protezione dei file di configurazione vi avvisa quando vedete la flag <c>cfgpro</c>. 
Significa che un nuovo pacchetto installato richiama l'ownership di quel particolare
file di configurazione e Portage si rifiuta di rimuoverlo.
</p>


</body>
</section>
<section>
<title>Aggiornamento del sistema</title>
<body>

<p>
Portage supporta l'abilità di aggiornare i pacchetti installati automaticamente con
un singolo comando. La funzione di aggiornamento del sistema permette agli utenti di aggiornare i
bacchetti base alle versioni raccomandate dagli sviluppatori del nucleo di Gentoo.
L'aggiornamento del sistema non esegue anche un aggiornamento dei pacchetti
non essenziali bensì solo i pacchetti definiti nel profilo
Portage come essenziali per l'operatività e la gestione del sistema.
</p>

<p>
Per eseguire l'aggiornamento del sistema, digitare il seguente comando:
</p>

<pre caption = "Aggiornare il sistema">
# <i>emerge --update system</i>
</pre>

<p>
Portage compilerà ed installerà gli aggiornamenti in base alle versioni
e ai pacchetti già installati considerando anche le raccomandazioni nel profilo corrente.
Gli utenti possono usare l'opzione <c>--pretend</c>
con l'esempio di sopra per avere la lista dei pacchetti che verranno installati
o aggiornati.
</p>

<note>
Siete stati avvisati nelle istruzioni di installazione che uno dei primi passi da compiere
è l'eseguire il comando <c>emerge system</c> per installare i pacchetti base. <c>emerge --update system</c>
 aggiorna questi pacchetti all'ultima versione raccomandata.
</note>

</body>
</section>
<section>
<title>Aggiornamento di World</title>
<body>

<p>
Portage supporta anche la possibilità di aggiornare i pacchetti installati
con un singolo comando. Il sistema Portage ha un grado di intelligenza che permette un
aggiornamento sicuro in un sistema dove versioni multiple di un pacchetto sono installate.
</p>

<p>
Facendo un aggiornamento di world, Portage prova ad aggiornare tutti i pacchetti
presenti nel file  <path>world</path> all'ultima versione disponibile assicurando
che tutte le dipendenze presenti negli ebuild associati a questi pacchetti
siano soddisfatte (tenendo conto degli intervalli delle versioni, se necessario).
Se viene utilizzata anche l'opzione <c>--deep</c>, considererà anche tutte
queste dipendenze e proverà ad aggiornarle. La risoluzione delle dipendenze
prende anche in considerazione gli <c>SLOTS</c> come menzionato precedentemente.
</p>

<p>

Il cuore del Portage world update è il file <path>world</path>. A differenza del system profile
che è definito dagli sviluppatori e non viene toccato dagli utenti, il world update profile
è generato dalle azioni dell'utente.
Il file <path>world</path> opera come una lista dei preferiti.
I pacchetti che vengono installati manualmente dall'utente tramite l'uso di <c>emerge</c>
vengono registrati nel file <c>world</c> in <path>/var/lib/portage/world</path>. Portage assume 
che visto che si stia modificando tale file si voglia mantenere i pacchetti aggiornati.
</p>

<p>
Il file <path>world</path> consiste in nomi di pacchetti divisi per categoria, segue
un esempio:
</p>

<pre caption = "Esempio di /var/lib/portage/world">
net-im/gaim
net-www/skipstone
net-www/galeon
app-editors/vim
app-text/ispell
net-mail/evolution
dev-util/ltrace
sys-fs/xfsprogs
=net-www/mozilla-0.9.8-r3
sys-apps/attr
sys-apps/dmapi
sys-kernel/linux-sources
sys-apps/acl
app-office/gnucash
app-cdr/xcdroast
</pre>

<p>
Tutte le entry in questo esempio sono state aggiunte automaticamente da Portage quando l'utente
ha installato i pacchetti specificati. Questi pacchetti verranno installati se una loro nuova versione 
sarà disponibile.
</p>

<note>
Per risparmiare tempo ed essere sicuri che i vostri pacchetti preferiti verranno aggiornati
dovrete modificare manualmente il file <c>world</c> e aggiungere le entry per questi pacchetti.
Si possono anche fare aggiunte di voci usando intervalli di pacchetti.
</note>

<p>
Una entry interessante è per il pacchetto mozilla (<c>net-www/mozilla-0.9.8-r3</c>)
Questa voce é stata aggiunta manualmente per prendere una particolare versione. Gli intervalli
di pacchetti (discussi nella sezione <c>Unmerge Packages</c> di questo manuale) possono
essere usati per forzare Portage a considerare solo certi ranges di versioni quando aggiorna
i pacchetti. Questa entry effettivamente obbliga Portage a considerare mozilla-0.9.8-r3 come unica
versione disponibile e quindi Portage non proverà mai ad installarne una nuova.
</p>

<p>
Comando per il World Update:
</p>

<pre caption = "Aggiornare world">
# <i>emerge --update world</i>
</pre>


<warn>
Portage non sovrascriverà i file nelle directory la cui protezione é stata definita nei file
di configurazione. Dovrete aggiornare manualmente le differenze fra i vostri file
di configurazione correnti e le nuove versioni che Portage ha salvato per voi. Se non
aggiornate i vostri file di configurazione il software installato potrebbe cessare di funzionare.
Per favore guardate il capitolo <c>Protezione dei file di configurazione</c> o usate il 
comando <c>emerge --help config</c> per maggiori informazioni.
</warn> 

<p>
Per vedere una lista di cosa verrà aggiornato o installato durante il world update, potete
usare l'opzione <c>--pretend</c> come descritto nella sezione precedente di questo capitolo.
</p>

<note>
Un world update esegue anche un update di sistema automaticamente.
I pacchetti nucleo non possono essere forzati con il metodo <c>world</c> file
visto che il Portage profile lo ignorerà.
</note>

<p>Un interessante effetto secondario di come world update lavora può essere usato dagli
utenti per aggiornare tutto il software in un sistema.
Mentre l'utilizzo di world update prova ad aggiornare tutti i pacchetti nel <path>world</path> file e 
le loro dipendenze, l'utilizzo dell'argomento <c>--emptytree</c> è un modo di forzare la
ricompilazione di questi pacchetti e di ogni dipendenza.
Questo può essere utile per gli utenti che vogliono cambiare le opzioni del loro compilatore
o le keyword USE e vogliono che questi cambiamenti vengano utilizzati per ogni pacchetto senza
dover ricompilare tutto manualmente. Semplicemente basta popolare il file <path>world</path> con tutte 
le applicazioni usate comunemente e scrivere il seguente comando:
</p>

<pre caption = "Ricompilare tutte le dipendenze">
# <i>emerge --emptytree world</i>
</pre>

<p>
Potete aggiungere l'opzione <c>--pretend</c> a questo comando per ricevere una
lista di quali pacchetti verranno ricompilati come risultato di questa azione.
</p>

</body>
</section>
<section>
<title>Pulire il sistema</title>
<body>

<p>
Portage supporta l'abilità di installare versioni multiple dello stesso pacchetto.
Comunque, quando viene installata una nuova versione, Portage rimuoverà
quella precedente (a meno che non abbiano differenti SLOT).
</p>

<p>
Questo comportamento può essere disabilitato ponendo <c>AUTOCLEAN=no</c>
in <path>/etc/make.conf</path>. Usando questa funzionalità, si potrà usare
l'opzione <c>--clean</c> per rimuovere manualmente i pacchetti vecchi.
</p>

<pre caption = "Rimuovere le vecchie versioni dei sorgenti dei pacchetti">
# <i>emerge --clean</i>
</pre>

<p>
<c>emerge</c> visualizzerà una lista di revisioni di revisioni di pacchetti da rimuovere, 
 più la lista dei pacchetti che rimarranno e daraàil tempo all'utente di fermare l'azione 
 con il comando Control-C.
</p>

<p>
Finchè non si specifica, Portage assume che l'azione clean venga eseguita
per <path>world</path> (tutti i pacchetti installati). Puoi dimensionare l'azione utilizzando
opzioni come <c>world</c> e <c>system</c> o una lista di nomi di pacchetto,
quest'ultima opzione e gli intervalli di vesione sono menzionati all'inizio di questo capitolo.
</p>

<p>
Quando si considera quale versione di un pacchetto verrà rimossa 
il sistema Portage considera i vari profili, le necessità degli altri pacchetti installati
e le package SLOT. Assumendo che le dipendenze siano correttamente definite per ogni pacchetto, 
l'azione clean rimuoverà in maniera sicura i vecchi pacchetti e non rimuoverà nessuna funzionalità 
importante nè farà smettere di funzionare il sistema.
</p>

<p>
Portage ha anche un modo più aggressivo di ripulire il sistema: usato con l'opzione
<c>--depclean</c>, emerge troverà e rimuoverà tutti quei pacchetti che sono
correntemente installati ma non necessari al funzionamento di altri.
In altre parole, Portage rimuoverà i pacchetti che non sono listati nel
file <path>world</path> e che non sono dipendenze di altri pacchetti.
  	 </p>
  	 
  	 <p>
  	 L'opzione <c>--depclean</c> può essere pericolosa, ricordare sempre
di usare 
  	 <c>--pretend</c> e fare un doppio controllo di quello che Portage farà.
  	 </p>
  	 
  	 <pre caption = "Trovare pacchetti inutili">
  	 # <i>emerge --pretend --depclean</i>
  	 </pre>
</body>
</section>
<section>
<title>Pruning dei pacchetti</title>
<body>

<p>
Portage supporta anche l'azione <c>--prune</c>. L'opzione <c>--prune</c>
è una forma insicura di clean. Rimuove tutte le versioni dei pacchetti eccetto le ultime 
installate. Non esegue molti dei controlli che <c>--clean</c> invece esegue e potrebbe
rimuovere dipendenze importanti dal vostro sistema. Gli utilizzatori di questa opzione 
possono con facilità rovinare i loro sistemi infatti il suo utilizzo è sconsigliato 
eccetto per casi specifici.
</p>

<p>
L'azione <c>--prune</c> accetta la stessa lista di opzioni di <c>--clean</c> e 
può essere utilizzata nel modo seguente:
</p>

<pre caption = "Pruning del sistema">
# <i>emerge --prune</i>
</pre>

</body>
</section>
<section>
<title>Cercare nell'albero di Portage</title>
<body>

<p>
L'albero di Portage, visto che forma il cuore della distribuzione Gentoo Linux,
può essere molto grande. Il comando <c>emerge</c> provvede una funzione di ricerca
che accetta come argomento una stringa da cercare nella forma di espressione regolare
contenuta fra virgolette. Le espressioni regolari sono una bestia complicata per cui si
raccomanda di trovare un buon libro che le spieghi se siete interessati ad utilizzale
in modo esaustivo.
</p>

<p>
Ricerche più semplici possono essere effettuate senza conoscere come formare
le regular expressions. Il seguente è un esempio di una semplice ricerca di un pacchetto
chiamato "gcc" o che abbia "gcc" come parte del suo nome:
</p>

<pre caption = "Cercare con una regexp">
# <i>emerge --search gcc</i>
</pre>

<p>
Per ogni risultato l'azione di ricerca elenca il nome del pacchetto, la versione più 
nuova disponibile, la versione più nuova installata, la sua home page e una descrizione
di ciò che esso contiene.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Disponibilità dei pacchetti</title>
<section>
<title>Introduzione</title>
<body>
<p>
Come si sarà probabilmente già notato, nell'albero del Portage c'è un gran
numero di file ebuild che corrispondono alle versioni del pacchetto che
non appaiono quando si usa il comando <c>emerge</c>: tutti questi ebuild
non sono disponibili per quelche ragione. Le ragioni che rendono un ebuild
non disponibile sono discusse nella prossima sezione.
  </p>

</body>
</section>
<section>
<title>Keywords</title>
<body>
<p>
Ogni ebuild nell'albero del Portage include la definizione di una variabile
chiamata <c>KEYWORDS</c>. 
Questa variabile registra una lista di stringhe, per esempio
 <c>"x86 ~amd64 -ppc"</c>. Prendiamo come l'architettura <c>x86</c>
per spiegare il significato di ogni keyword.
  </p>

<ul>
   <li> 	   
<c>x86</c> : se questa keyword è presente, l'ebuild è stabile e disponibile
  	 (per  le architetture x86).
 </li>
   <li> 	   
<c>~x86</c> : se questa keyword è presente, l'ebuild è in fase di test
(per  le architetture x86).
   </li> 
<li>
<c>-x86</c> : se questa keyword è presente, l'ebuild non funziona su
architetture x86.
</li>
</ul>
<p>
    Se non ci sono keyword presenti per una determinata architettura,
significa che l'ebuild non è mai stato testato su quell'architettura.
La keyword speciale <c>-*</c> è usata per precisare che l'ebuild
non funziona per tutte le architetture eccetto per quelle esplicitamente
aggiunte a <c>KEYWORDS</c>.
</p> 
  <p>
Di default, Portage considererà solo i pacchetti che sono marcati come
stabili per l'architettura della macchina destinataria, ignorando
tutti gli altri ebuild. Il risultato sarà che agli utenti saranno presentati
solo gli aggiornamenti per il nuovo software che hanno superato la fase di test
e vengono marcati come stabili.
   </p>
  	 
 <p>
    Per aggirare questo comportamento, utenti esperti possono configurare
la variabile <c>ACCEPT_KEYWORDS</c> in
  	  <path>/etc/make.conf</path> specificando la lista delle
keyword che Portage dovrebbe considerare. Di solito utenti coraggiosi su
architetture x86 (o amd64, ppc, ...) fanno sì che Portage consideri
tutti gli ebuild che sono correntemente in test aggiungendo ~x86 (o ~amd64,
  	 </p>
  	 
  	 <pre caption = "Configurare ACCEPT_KEYWORDS">
  	 ACCEPT_KEYWORDS="~x86"
  	 </pre>
  	 
 <p>
In questo modo tutto il software installato è scaricato attraverso sync alla versione
più recente, il costo del rischio è installare pacchetti non testati
appieno che potrebbero occasionalmente distruggere l'intero sistema.
 </p>
  	 
  	 <p>
Un modo più sicuro è correntemente istruire il Portage a tenere in considerazione
tutti gli ebuild in test di uno specifico pacchetto. Questo può essere fatto
usando il file
  	 <path>/etc/portage/package.keywords</path>:
per esempio se volessimo accedere alla versione ~x86 di gimp,
dovremmo aggiungere la seguente voce a 
  	 <path>/etc/portage/package.keywords</path> come segue:
  	 </p>
  	 
  	 <pre caption = "Usare /etc/portage/package.keywords">
  	 <comment>aggiungere questa linea a /etc/portage/package.keywords:</comment>
  	 media-gfx/gimp ~x86
  	 </pre>
  	 
  	 </body>
  	 </section>
  	 <section>
  	 <title>Pacchetti mascherati</title>
  	 <body>
  	 
  	 <p>
Quando un pacchetto ha problemi, perché non funziona bene
o non interagisce al meglio col resto del sistema, c'è un modo per prevenire
che sia installato dall'utente. Questo modo consiste nel listare il pacchetto
(o l'intervallo di versioni del pacchetto) in file speciali chiamati <e>masking</e>.
  	 </p>
  	 
  	 <p>
Oltre a guardare in <path>/etc/make.profile/packages</path>, 
che contiene alcuni intervalli di versioni di pacchetti che dovrebbero essere
considerati accettabili, Portage controlla per i pacchetti mascherati in
  	 <path>/usr/portage/profiles/package.mask</path> 
(che viene aggiornato ad ogni sync) e in
  	 <path>/etc/portage/package.mask</path> 
(che può essere usato dagli utenti per inserire i propri pacchetti mascherati).
In questo modo, se Portage trova pacchetti listati in uno di questi file, li
ignorerà del tutto.
  	 </p>
  	 
  	 <p>
Se si vuole sovrascrivere un pacchetto masherato in
  	 <path>/usr/portage/profiles/package.mask</path>, 
si riceve un avviso di non modificare questo file, dato che tale
modifica verrà perso al prossimo sync. Invece, Portage provvede un semplice metodo
per ignorare il mascheramento è l'uso di
  	 <path>/etc/portage/package.unmask</path>.
Per esempio, se c'è una versione sperimentale di portage che è correntemente
mascherata e volete provarla, basta aggiungere una voce in
  	 <path>/etc/portage/package.unmask</path> come segue.
  	 </p>
  	 
  	 <pre caption = "Usare /etc/portage/package.unmask">
  	 <comment>aggiungere questa linea a /etc/portage/package.unmask:</comment>
  	 sys-apps/portage
  	 </pre>

</body>
</section>
</chapter>
<chapter>
<title>Risorse</title>
<section>
<title>Ricevere aiuto</title>
<body>

<p>
Maggiori informazioni su altre opzioni supportate da <c>emerge</c>
possono essere trovate scrivendo i seguenti comandi:
</p>

<pre caption = "Ricevere aiuto">
# <i>emerge --help</i>
# <i>man emerge</i>
# <i>man make.conf</i>
</pre>

 <p>
Altre utili informazioni sul Portage possono essere trovate nella man page
di portage:
  	 </p>
  	 
  	 <pre caption = "Vedere la man page del portage">
  	 # <i>man portage</i>
  	 </pre>
  	 
  	 
</body>
</section>
<section>
<title>Utilità</title>
<body>

<p>
Altre utilità sono state rese disponibili per renderci la
vita facile. Alcune di queste utilità sono installate direttamente 
dal portage, mentre altre sono disponibili in pacchetti extra.
</p>

	 <ul>
  	   <li>
  	     <c>etc-update</c> : shell script usato per assistere l'emersione
dei file in  <path>/etc</path>  (può essere pericoloso se usato in modo non
corretto).
  	   </li>
  	   <li>
  	     <c>dispatch-conf</c> : sostituto di <c>etc-update</c>.
  	   </li>
  	   <li>
  	     <c>equery</c> (in app-portage/gentoolkit): questo è il tool principale per estrarre informazioni dal portage, come i pacchetti proprieari di certi file, i file facenti parte di un dato pacchetto, ed altro.
  	   </li>
  	   <li>
  	     <c>qpkg</c> e <c>etcat</c> (in app-portage/gentoolkit): che sono i predecessori di <c>equery</c>.  Le loro funzionalità sono state inglobate in
  	     <c>equery</c>.
  	   </li>
  	   <li>
  	     <c>revdep-rebuild</c> (in app-portage/gentoolkit): ricostruisce i 
pacchetti che non funzionano più a causa dell'aggiornamento di librerie
che hanno una incompatibilità binaria APls.
  	   </li>
  	   <li>
  	     <c>epm</c> (app-portage/epm): un tool per fare delle quesry al database dei pacchetti con una sintassi simile a RPM.
  	   </li>
  	   <li>
  	     <c>esearch</c> (app-portage/esearch): sostituto a 'emerge --search'
  	     con 'search-index', molto veloce nelle ricerche.
  	   </li>
  	   <li>
  	     <c>ufed</c> (app-portage/ufed): tool grafico per editare configurazioni USE.
  	   </li>
  	   <li>
  	     <c>splat</c> (app-portage/splat) e <c>genlop</c> (app-portage/genlop):
  	     analizzatori dei file di log di emerge.
  	   </li>
  	 </ul>
  	 

</body>
</section>
</chapter>
</guide>
