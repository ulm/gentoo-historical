<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/xen-guide.xml,v 1.7 2012/11/07 14:21:52 ago Exp $ -->

<guide disclaimer="draft" lang="it">
<title>Configurare Gentoo per utilizzare Xen</title>

<author title="Autore">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Redazione">
  <mail link="nightmorph"/>
</author>

<abstract>
Questa guida descrive come iniziare ad usare Xen su un sistema Gentoo
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>9</version>
<date>2012-10-07</date>

<chapter>
<title>Introduzione</title>
<section>
<body>

<p>
La tecnologia <uri link="http://www.xen.org/">Xen</uri> permette
l'esecuzione di più sistemi operativi su una stessa macchina, di gestire
l'occupazione delle risorse ed anche di migrare domini (che sono gli ambienti
virtuali nei quali un sistema operativo ospite viene eseguito) da un sistema
Xen ad un altro. Il sistema operativo che ospiterà gli altri deve supportare
Xen (supporto fornito dal kernel Linux) ma i sistemi ospite possono esser
eseguiti senza modifiche <e>se</e> l'hardware in uso supporta l'Intel
Virtualization Technology (VT-x) o l'AMD Virtualization Technology (SVM).
In caso contrario, anche il sistema operativo ospite dovrà avere il supporto a
Xen.
</p>

<p>
Attraverso questa guida si conosceranno tutti i passi necessari per ottenere un
sistema Xen funzionante su Gentoo Linux. Non si discuterà di Xen in sé (il
progetto Xen fornisce <uri
link="http://xen.org/support/documentation.html">documentazione
sufficiente</uri>) né di configurazioni specializzate che potrebbero essere
interessanti ma non sono strettamente legate a Xen (come esportare Portage via
NFS, avviare Linux usando PXE, ecc.).
</p>

</body>
</section>
</chapter>
<chapter>
<title>Preparare il Domain0</title>
<section>
<title>Introduzione</title>
<body>

<p>
In ambiente Xen, <e>Domain0</e> è il dominio primario e definisce il sistema
operativo che ospiterà gli altri domini. In questo capitolo si preparerà una
installazione esistente di Gentoo per farla diventare il sistema ospitante di
questo dominio e si compilerà un kernel Xen in modo tale da permettere a Gentoo
di ospitare altri domini Xen.
</p>

</body>
</section>
<section>
<title>Ricompilare l'intero sistema Gentoo?</title>
<body>

<p>
Un cambiamento drammatico che potrebbe essere necessario è la ricompilazione
dell'intero sistema Gentoo con differenti <c>CFLAGS</c>, altrimenti i sistemi
operativi ospite sotto Xen potrebbero avere un serio decadimento delle
prestazioni. Comunque, se si sta solo pianificando di provare Xen, non lo si
sta installando in un ambiente produttivo e non si ha l'ardente desiderio di
ricompilare tutti i programmi, si può saltare questo passo. In questo caso si
noteranno solo cali di prestazione, ma si potrà comunque usare Xen.
</p>

<impo>
Si raccomanda, nel caso si vogliano modificare le <c>CFLAGS</c>> per ricompilare
il sistema con una versione di gcc inferiore alla 4, di non aver impostato
<c>-Os</c> in quanto si produrrebbe codice corrotto.
</impo>

<pre caption="Modificare le CFLAGS e ricompilare Gentoo">
~# <i>nano -w /etc/portage/make.conf</i>
<comment>(Aggiungere -mno-tls-direct-seg-refs SOLO se si possiede un dom0 a 32-bit)</comment>
<comment>(Non c'è bisogno di questa flag se si possiede un dom0 a 64-bit)</comment>
CFLAGS="-O2 -march=pentium4 -pipe <i>-mno-tls-direct-seg-refs</i>"

~# <i>emerge -e world</i>
</pre>

<p>
Se si avvia il sistema usando un ramdisk iniziale (initrd) sarà necessario
rigenerarlo (operazione che è meglio fare eseguendo tutti i passi come se
si stesse ricompilando il kernel).
</p>

</body>
</section>
<section>
<title>Installare Xen</title>
<body>

<p>
Attualmente Xen è composto da numerosi componenti, sarà quindi necessario
installare alcuni pacchetti.
</p>

<pre caption="Installare Xen">
~# <i>emerge xen xen-tools gentoo-sources</i>
</pre>



</body>
</section>
<section>
<title>Configurare e compilare il kernel</title>
<body>

<p>
Si andrà ora a configurare e compilare il kernel col supporto a Xen. Questo
kernel, i cui sorgenti sono disponibili in
<path>/usr/src/linux</path>, diverranno il kernel principale che
verrà utilizzato (p.e. per il domain 0). Nella sezione <c>XEN</c> si trovano i
driver per tutti i tipi di periferiche di input/output, ogni driver possiede una
implementazione per <e>backend</e> e <e>frontend</e>. Per il kernel del domain 0
è necessario selezionare le implementazioni <e>backend</e>, queste verrano
utilizzate dagli altri domini (che usano i driver <e>frontend</e>) per
comunicare direttamente con l'hardware. Tuttavia si dovrebbe essere in grado 
di configurare il kernel per avere il support ad entrambi guest e host.
</p>

<p>
Ci si potrebbe meravigliare per quanto
riguarda la gestione della rete: in un dominio ogni interfaccia possiede un
link punto-punto ad un'interfaccia sul domain 0 (chiamata <path>vifX.Y</path>
dove X è il numero del dominio e Y è il numero dell'interfaccia di tale
dominio), in questo modo è possibile configurare la propria rete nel modo che
si vuole (bridging, NAT, ecc.).
</p>

<pre caption="Abilitare il supporto a Xen">
Processor type and features  ---&gt;
    [*] Paravirtualized guest support ---&gt;
        [*] Xen guest support
</pre>

<pre caption="Configurare il kernel">
Bus options (PCI etc.)  ---&gt;
    [*]   Xen PCI Frontend

[*] Networking  support ---&gt;
    Networking options  ---&gt;
        &lt;*&gt; 802.1d Ethernet Bridging
	[*] Network packet filtering framework (Netfilter) ---&gt;
   	    [*] Advanced netfilter configuration
                [*] Bridged IP/ARP packets filtering

Device Drivers ---&gt;
    [*] Block devices (NEW) ---&gt;
        &lt;*&gt; Xen block-device backend driver

    [*] Network device support ---&gt;
        &lt;*&gt; Xen backend network device
    Xen driver support ---&gt;
        [*] Xen memory balloon driver (NEW)
	[*]   Scrub pages before returning them to system (NEW)
	&lt;*&gt; Xen /dev/xen/evtchn device (NEW)
	[*] Backend driver support (NEW)
	&lt;*&gt; Xen filesystem (NEW)
	[*]   Create compatibility mount point /proc/xen (NEW)
	[*] Create xen entries under /sys/hypervisor (NEW)
	&lt;M&gt; userspace grant access device driver (NEW)
	&lt;M&gt; user-space grant reference allocator driver (NEW)
	&lt;M&gt; xen platform pci device driver (NEW)
</pre>

<p>
La configurazione del kernel dovrebbe abilitare ad avviare il sistema da host e guest.
Tuttavia, se vuoi fare ciò, dovresti allegerire l'immagine del kernel del sistema guest.
Fare riferimento alla documentazione Xen per maggiori informazioni.
</p>

<p>
Una volta compilato il kernel si troverà la sua immagine, chiamata
<path>vmlinuz</path>, direttamente nella directory di compilazione (non dentro
<path>arch/</path> o in qualche altra directory). Copiarla in <path>/boot</path>
e configurare il bootloader affinché usi l'hypervisor di Xen (uno dei componenti
installati precedentemente) che è stato salvato come <path>/boot/xen.gz</path>.
Nella configurazione del bootloader, indicare a Xen di effettuare il boot
utilizzando il kernel appena generato. In GRUB, ad esempio:
</p>

<pre caption="Configurazione di GRUB per Xen">
title Xen Gentoo Linux 3.5
root (hd0,0)
kernel /boot/xen.gz
module /boot/kernel-3.5.x.y-xen0 root=/dev/sda3
</pre>

<p>
Ora riavviare il sistema e controllare che si è in grado di fare ciò che si faceva normalmente 
sul proprio sistema. Se è il caso, si può modificare la configurazione del bootloader per accedere
a Xen ad ogni avvio.
</p>

<note>
Se si vuol far partire automaticamente anche i domini ospite ad ogni riavvio,
aggiungere <c>xendomains</c> al runlevel di default e creare un link simbolico
in <path>/etc/xen/auto</path> ai file di configurazione di Xen per i domini
che si vuol far partire.
</note>

</body>
</section>
</chapter>
<chapter>
<title>Creare un dominio non privilegiato (Domain-U)</title>
<section>
<title>Compilare il kernel</title>
<body>

<p>
Si ritorni ai sorgenti del kernel precedentemente utilizzati e se necessario 
si aggiorni la configurazione. È consigliabile mantenere la configurazione
del nuovo kernel il più simile possibile al kernel principale.
Compilare il kernel e spostare il file <path>vmlinuz</path> ottenuto dove si
vuole (in questa guida si assume sia in <path>/mnt/data/xen/kernel</path>):
</p>

<pre caption="Compilare il kernel per il sistema ospite">
~# <i>make O=~/build/domU</i>
~# <i>cp ~/build/domU/vmlinuz /mnt/data/xen/kernel/kernel-2.6.x.y-xen</i>
</pre>

</body>
</section>
<section>
<title>Creare i dischi per un dominio</title>
<body>

<p>
Per avere maggiori prestazioni è consigliabile dedicare una partizione (o un
volume logico) ad un dominio piuttosto che un filesystem creato su  file.
Comunque, se si vuole usare Xen solo per scopi di test, usare una filesystem
creato su file ha i suoi vantaggi (specialmente per quello che riguarda la
manutenzione).
</p>

<p>
Si può creare un filesystem su file usando <c>dd</c> e <c>mke2fs</c>
(o qualsiasi altro strumento di creazione di filesystem). Per esempio, per
creare un filesystem ext4 di 4 Gbyte:
</p>

<pre caption="Creare un filesystem su file">
~# <i>dd if=/dev/zero of=/mnt/data/xen/disks/ext3root.img bs=1M count=4096</i>
~# <i>mkfs.ext4 /mnt/data/xen/disks/ext4root.img</i>
</pre>

</body>
</section>
<section>
<title>Configurare un dominio</title>
<body>

<p>
Si crei ora un file di configurazione per un dominio Xen. Si possono salvare
questi file di configurazione dove si vuole, per esempio in
<path>/mnt/data/xen/configs</path>. Come esempio, si creerà in file di
configurazione per un piccolo ambiente Gentoo che usi l'immagine del disco
creata precedentemente:
</p>

<pre caption="Creare un file di configurazione per un dominio">
~# <i>nano -w /mnt/data/xen/configs/gentoo</i>

kernel = "/mnt/data/xen/kernel/kernel-3.5.x.y-xen"
memory = 512
name   = "gentoo"
<comment>(Mappa l'immagine del disco alla partizione virtuale /dev/sda1)</comment>
disk   = ['file:/mnt/data/xen/disks/ext4root.img,sda1,w']
root   = "/dev/sda1 ro"
</pre>

<p>
Se come disco si sta usando un device a blocchi (come un volume lvm o una
partizione), usare 'phy:' invece di 'file:' e omettere /dev. Per esempio:
</p>

<pre caption="Usare un device a blocchi">
<comment>(Volume LVM)</comment>
disk = [ 'phy:lvm/xen-guest-root,sda1,w' ]

<comment>(Partizione fisica)</comment>
disk = [ 'phy:sdb6,sda1,w' ]
</pre>

<p>
Si possono trovare esempi di file di configurazione in <path>/etc/xen</path>.
</p>

</body>
</section>
<section>
<title>Far partire il nuovo dominio</title>
<body>

<p>
Terminata la fase di configurazione, si può far partire il nuovo dominio.
Se l'immagine del disco contiene un sistema operativo, si potrebbe creare e far
partire il dominio usando il comando <c>xl</c>:
</p>

<pre caption="Creare e far partire un nuovo dominio">
~# <i>xl create /mnt/data/xen/configs/gentoo -c</i>
</pre>

<p>
Il dominio dovrebbe partire all'interno del terminale nel quale è stato
eseguito il comando. Nel caso in esempio, comunque, l'immagine del disco è vuota
per cui il dominio non si avvierà. Per ovviare a questo, si può montare
l'immagine in loop ed installarvi Gentoo come fosse un sistema nuovo.
</p>

<p>
Per scollegarsi dal dominio, premere <path>Ctrl+]</path>. Per ottenere una nuova
connessione alla console del dominio usare <c>xl console gentoo</c>.
Dato che si può avere una sola console per dominio, la si usi solo se non
si può accedere altrimenti (per esempio attraverso SSH).
</p>

</body>
</section>
</chapter>
<chapter>
<title>La rete su un dominio non privilegiato</title>
<section>
<title>Introduzione</title>
<body>

<p>
Xen lavora al meglio quando si usa la modalità bridge. Questo significa che la tua 
interfaccia di rete di default è attiva sul dominio amministrativo che diventerà un bridge (NdT: 
ponte) che accetta connessioni al dominio virtuale attraverso l'IP del dominio amministrativo.
</p>

</body>
</section>
<section>
<title>Interfacce bridged </title>
<body>

<p>
Creare un'interfaccia bridge creando un nuovo collegamento allo script di init di rete, 
provvisto da Gentoo.
</p>

<pre caption="Creare un bridge">
# <i>cd /etc/init.d</i>
# <i>ln -s net.lo net.br0</i>
</pre>

<p>
Modificare <path>/etc/conf.d/net</path> come segue per configurare la
rete:
</p>

<pre caption="Abilitare l'interfaccia br0">
# <i>nano -w /etc/conf.d/net</i>

bridge_br0="eth0"
config_br0="192.168.1.200 netmask 255.255.255.0 brd 192.168.1.255"
routes_br0="default via 192.168.1.1"
</pre>

<p>
Ora, installare <e>net-misc/bridge-utils</e> e assicurarsi che lo script 
<path>net.br0</path> si avvii al boot.
</p>

<pre caption="Finire la configurazione del bridge">
# <i>emerge net-misc/bridge-utils</i>
# <i>rc-update add net.br0 default</i>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Ulteriori risorse</title>
<section>
<title>La documentazione di Xen </title>
<body>

<ul>
  <li>
    <uri link="http://www.xen.org/support/documentation.html">Documentazione
    ufficiale Xen</uri>
  </li>
  <li>
    <uri link="http://wiki.xen.org/">Xen Wiki</uri>
  </li>
</ul>

</body>
</section>
<section>
<title>Strumenti per Xen</title>
<body>

<ul>
  <li>
    <uri
    link="http://virt-manager.org/">app-emulation/virt-manager</uri> è uno
    strumento grafico per amministrare macchine virtuali
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
