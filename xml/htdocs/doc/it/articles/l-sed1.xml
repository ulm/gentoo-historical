<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/articles/l-sed1.xml,v 1.4 2007/05/16 23:28:47 scen Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/it/articles/l-sed1.xml" lang="it" disclaimer="articles">
<title>Sed per esempi, Parte 1</title>

<author title="Autore">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traduttore">
  <mail link="lucamarturana@gmail.com">Luca Marturana</mail>
</author>

<abstract>
In questa serie di articoli, Daniel Robbins spiega come utilizzare il più
potente editor di flusso presente in UNIX, sed. Sed è il tool ideale per il
batch-editing dei file o per creare script shell per modificare file esistenti.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.4</version>
<date>2005-10-09</date>

<chapter>
<title>Familiarizzare con il potente editor UNIX</title>
<section>
<title>Scegliere un editor</title>
<body>

<p>
Nel mondo UNIX, abbiamo molte opzioni per quanto riguarda l'editing dei file.
Basti pensare a vi, emacs, jed e tanti altri. Noi tutti abbiamo il nostro
preferito che conosciamo e amiamo. Con il nostro editor fidato, siamo in grado
di svolgere tutti i compiti di amministrazione e programmazione sotto UNIX.
</p>

<p>
Sebbene gli editor interattivi sono ottimi, essi hanno delle limitazioni.
Benchè la loro natura interattiva può essere un punto di forza, essa può
essere anche un punto debole. Basti pensare a quando bisogna eseguire azioni
simili in un gruppo di file. In questi casi, istintivamente, si prende il
proprio editor e si eseguono un'infinità di modifiche banali e ripetitive,
perdendo molto tempo. Esiste però una via migliore.
</p>

</body>
</section>
<section>
<title>Enter sed</title>
<body>

<p>
Sarebbe piacevole se si potesse automatizzare il processi di editing dei file,
in modo da poter eseguire il "batch" editing dei file o creare script con la
capacità di eseguire sofisticate modifiche ai file esistenti. Fortunatamente
per questo tipo di situazioni c'è una via migliore: sed.
</p>

<p>
Sed è un leggero editor di flusso il quale è incluso con quasi tutti i tipi
di UNIX, Linux compreso. Sed ha molte caratteristiche interessanti. Prima di
tutto, è molto leggero, tipicamente molto più leggero di tutti gli altri
linguaggi di scripting. Secondo, perchè è un editor di flusso, esso può
eseguire modifiche ai dati ricevuti dallo standard input, per esempio da una
pipeline. Così, non si hanno dati che devono essere editati immagazzinati nel
nostro hard-disk. Questo perchè i dati possono semplicemente e facilmente
essere inviati a sed tramite una pipe, è molto facile usare sed come parte di
una lunga e complessa pipeline in uno script shell.
</p>

</body>
</section>
<section>
<title>GNU sed</title>
<body>

<p> 
Fortunatamente per gli utenti Linux, una delle migliori versioni di sed
esistenti è GNU sed, che è correntemente arrivato alla versone 3.02. Ogni
distribuzione Linux ha sed, o almeno dovrebbe averlo. GNU sed è popolare non
solo perchè i suoi sorgenti sono liberamente distribuibili, ma perchè sembra
avere molta manegevolezza e molte estensioni per risparmiare tempo rispetto al
sed POSIX standard. GNU sed inoltre non soffre delle limitazioni che le
precedenti proprietarie versioni di sed hanno avuto, come ad esempio una
lunghezza delle stringhe limitata -- GNU sed lavora con linee di qualsiasi
lunghezza.
</p>

</body>
</section>
<section>
<title>Il nuovo GNU sed</title>
<body>

<p>
Facendo ricerche per questo articolo, ho notato che online molti affezionati a
sed si riferiscono a GNU sed 3.02a. Stranamente, sed 3.02a non si trovava su
<uri>ftp://ftp.gnu.org</uri> (vedi <uri link="#resources">Resources</uri> per
questi link), così ho dovuto cercarlo altrove. L'ho trovato su
<uri>ftp://alpha.gnu.org</uri>, in <path>/pub/sed</path>. L'ho scaricato
correttamente, compilato e installato, solo per scoprire un po' di minuti più
tardi che la versione più recente è la 3.02.80 -- ed è possibile trovarne i
sorgenti dopo quelli della 3.02a, su <uri>ftp://alpha.gnu.org</uri>. Dopo aver
installato GNU sed 3.02.80, mi sono trovato finalmente pronto a partire.
</p>

</body>
</section>
<section>
<title>The right sed</title>
<body>

<p>
In questa serie, verrà utilizzato GNU sed 3.02.80. Alcuni (ma molto pochi)
degli esempi più avanzati che si troveranno nei miei imminenti articoli di
proseguimento non funzionerano con GNU sed 3.02 o 3.02a. Se si sta usando una
versione di sed non GNU, i risultati possono variare. Allora perchè non
installare GNU sed 3.02.80 adesso? Non soltanto si è pronti per il resto della
serie, ma si potrà utilizzare il miglior sed esistente!
</p>

</body>
</section>
<section>
<title>Esempio su Sed</title>
<body>

<p>
Sed lavora eseguendo un qualsiasi numero di azioni di editing specificate
dall'utente sui dati in input. Sed è line-based, quindi i comandi vengono
eseguiti riga per riga in ordine. E, Sed scrive il risultato nello standard
output (stdout); non modifica nessun file.
</p>

<p>
Diamo un'occhiata ad alcuni esempi. I primi saranno un po' strani perchè io li
sto usando per illustrare come lavora sed piuttosto che eseguire task utili.
Comunque, se si è nuovi con sed, è molto importante che si capiscono. Ecco il
nostro primo esempio:
</p>

<pre caption="Esempio di uso di Sed">
$ <i>sed -e 'd' /etc/services</i>
</pre>

<p>
Lanciando questo comando, non si riceverà assolutamente nessun output.
Adesso, cosa è successo? In questo esempio, abbiamo lanciato sed con un
comando di editing, <c>d</c>. Sed ha aperto il file
<path>/etc/services</path>, ha letto una riga nel suo pattern buffer,
eseguendo il nostro comando di editing ("elimina riga"), e infine ha stampato
il pattern buffer (che è vuoto). In seguito ha ripetuto questi passi per ogni
riga successiva. Ciò ha provocato l'uscita di nessun output, perchè il
comando <c>d</c> ha eliminato ogni singola riga presente nel pattern buffer!
</p>

<p>
Ci sono un po' di cose da notare in questo esempio. Primo,
<path>/etc/services </path> non è stato modificato affatto. Questo perchè, di
nuovo, sed legge soltanto dal file specificato da riga di comnado, usandolo
come input -- esso non tenta di modificare il file. La seconda cosa da notere
è che sed è line-oriented. Il comando <c>d</c> non indica semplicemente a sed
di eliminare tutti i dati in arrivo. Invece, sed legge ogni linea di
/etc/services una ad una nel suo buffer interno, chiamato pattern buffer. Una
volta che la linea è stata letta nel pattern buffer, esso esegue il comando
<c>d</c> e stampa il contenuto del pattern buffer (in questo esempio nulla).
Dopo, mostrerò come usare come usare gli indirizzi di intervallo per
controllare su quali linee un comando viene applicato -- ma in assenza di
indirizzi, il comando è applicato a tutte le linee.
</p>

<p>
La terza cosa da notare è l'uso del quoting singolo attorno al comando
<c>d</c>. È una buona idea quella di abituarsi ad usare il quoting singolo per
i comandi sed, in modo tale che la shell expansion è disabilitata.
</p>

</body>
</section>
<section>
<title>Un'altro esempio su Sed</title>
<body>

<p>
Qui c'è un esempio su come usare sed per eliminare la prima linea del file
<path>/etc/services</path> dallo stream output:
</p>

<pre caption="Un altro esempio su Sed">
$ <i>sed -e '1d' /etc/services | more</i>
</pre>

<p>
Come si può vedere, questo comando è molto simile al precedente <c>d</c>,
tranne che è preceduto da <c>1</c>. Se si ha pensato che il numero <c>1</c>
si riferisce alla linea numero 1, si ha ragione. Mentre nel primo esempio, è
stato usato <c>d</c> da solo, adesso è stato preceduto da una espressione
numerica.  Usando le espressioni, si può indicare a sed di editare solo una
particolare linea o un particolare gruppo di linee.
</p>

</body>
</section>
<section>
<title>Espressioni di campo</title>
<body>

<p>
Adesso, diamo un'occhiata su come specificare una espressione di campo. In
questo esempio, sed eliminerà le linee 1-10 dall'output:
</p>

<pre caption="Specificare una espressione di campo">
$ <i>sed -e '1,10d' /etc/services | more</i>
</pre>

<p>
Quando si separano due espressioni con una virgola, sed applicherà il comando
seguente al campo che comincia dalla prima espressione e termina alla seconda.
In questo esempio, il comando <c>d</c> verrà applicato dalla linea 1 alla 10,
incluse. Tutte le altre linee verranno ignorate.
</p>

</body>
</section>
<section>
<title>Address con espressioni regolari</title>
<body>

<p>
Ora è il tempo di fare quale esempio più utile. Vediamo come fare se si vuole
vedere il contenuto del file <path>/etc/services</path>, ma non si è
interessati a vedere tutti i commenti inclusi. Come si sa, è possibile
includere commenti nel file <path>/etc/services</path> facendo iniziare le
linee con il carattere '#'. Per evitare i commenti, dobbiamo dire a sed di
eliminare le linee che cominciano con un '#'. Ecco come fare:
</p>

<pre caption="Eliminare le righe che iniziano con #">
$ <i>sed -e '/^#/d' /etc/services | more</i>
</pre>

<p>
Provare questo esempio e vedere cosa succede. Si potrà notare che sed esegue
il compito desiderato correttamente. Adesso, vediamo un po' cosa è successo.
</p>

<p>
Per capire il comando '/^#/d', prima dobbiamo sezionarlo. Primo, rimuoviamo la
'd' -- si tratta dello stesso comando di eliminazione di riga utilizzato in
precedenza. La nuova aggiunta è la parte '/^#/', la quale è un tipo di
espressione regolare. Le espressioni regolari sono sempre circondate da slash.
Esse specificano un pattern, e il comando che immediatamente precede una
espressione regolare verrà applicato solamente alle linee che corrispondono al
particolare pattern specificato.
</p>

<p>
Quindi, '/^#/' è una espressione regolare. Ma che cosa fa? Evidentemente, è
il caso di fare un ripasso delle espressione regolari.
</p>

</body>
</section>
<section>
<title>Ripasso espressioni regolari</title>
<body>

<p>
È possibile utilizzare le espressioni regolari per esprimere pattern che si
possono trovare nel testo. È molto simile, anche se non indentico, al
carattere '*' usato nella shell. Ecco i caratteri speciali che possono essere
utilizzati nelle espressioni regolari:
</p>

<table>
  <tr>
    <th>Carattere</th>
    <th>Descrizione</th>
  </tr>
  <tr>
    <ti>^</ti>
    <ti>Indica l'inizio di un riga</ti>
  </tr>
  <tr>
    <ti>$</ti>
    <ti>Indica la fine di una riga</ti>
  </tr>
  <tr>
    <ti>.</ti>
    <ti>Indica un qualsiasi singolo carattere</ti>
  </tr>
  <tr>
    <ti>*</ti>
    <ti>Indica zero o più ripetizioni del carattere precedente</ti>
  </tr>
  <tr>
    <ti>[ ]</ti>
    <ti>Indica tutti i caratteri all'interno di [ ]</ti>
  </tr>
</table>

<p>
Probabilmente la via migliore per fare pratica con le espressioni regolari è
quella di vedere qualche esempio. Tutti questi esempi sono accettati da sed
come valide espressioni usate alla sinistra di un comando. Eccoli:
</p>

<table>
  <tr>
    <th>Espressione regolare</th>
    <th>Descrizione</th>
  </tr>
  <tr>
    <ti>/./</ti>
    <ti>Restituirà tutte le linee che contengono un solo carattere</ti>
  </tr>
  <tr>
    <ti>/../</ti>
    <ti>Restituirà tutte le linee che contengono due soli caratteri</ti>
  </tr>
  <tr>
    <ti>/^#/</ti>
    <ti>Restituirà tutte le linee che iniziano con '#'</ti>
  </tr>
  <tr>
    <ti>/^$/</ti>
    <ti>Restituirà tutte le linee vuote</ti>
  </tr>
  <tr>
    <ti>/}^/</ti>
    <ti>Restituirà tutte le linee che terminano con '}' (senza spazi)</ti>
  </tr>
  <tr>
    <ti>/} *^/</ti>
    <ti>
			Restituirà tutte le linee che terminano con '}' seguito da zero o più
			spazi
		</ti>
  </tr>
  <tr>
    <ti>/[abc]/</ti>
    <ti>Restituirà tutte le linee che contengono 'a', 'b', o 'c'</ti>
  </tr>
  <tr>
    <ti>/^[abc]/</ti>
    <ti>Restituirà tutte le linee che cominciano con 'a', 'b', o 'c'</ti>
  </tr>
</table>

<p>
Io consiglio di provare molti di questi esempi. Perdere un po' di tempo per
diventare familiari con le espressioni regolari e provare a creare espressioni
regolari personali. Ecco come usarle:
</p>

<pre caption="Modo corretto di usare le regexp">
$ <i>sed -e '/regexp/d' /path/to/my/test/file | more</i>
</pre>

<p>
In questo modo sed eliminerà tutte le linee corrispondenti all'espressione.
Comunque è più facile impararle facendo in modo che sed elimini tutte le
linee che non corrispondono piuttosto che il contrario. È possibile fare ciò
con il comando seguente:
</p>

<pre caption="Stampare le linee che soddisfano le espressioni regolari">
$ <i>sed -n -e '/regexp/p' /path/to/my/test/file | more</i>
</pre>

<p>
Notare che l'opzione '-n' indica a sed di non stampare le righe se non è stato
esplicitamente dichiarato. Inoltre il comando <c>d</c> è stato sostituito con
<c>p</c>, il quale indica esplicitamente a sed di stampare le righe
corrispondenti. Adesso, quindi, verranno stampate solo le linee che soddisfano
l'espressione.
</p>

</body>
</section>
<section>
<title>Nuovamente sulle espressioni</title>
<body>

<p>
Fino ad ora, abbiamo dato un'occhiata a vari tipi di espressioni. Ma ci sono
ancora altre possibilità. È possibile specificare due espressioni regolari
separete da una virgola, esse indicano a sed di considerare le righe che
soddisfano la prima espressione, quelle che soddisfano la seconda e tutte le
righe comprese tra le due. Per esempio, il comando seguente stamperà un blocco
di testo che inizia con una linea contentente "BEGIN" e termina con "END:
</p>

<pre caption="Stampare un blocco di testo desiderato">
$ <i>sed -n -e '/BEGIN/,/END/p' /my/test/file | more</i>
</pre>

<p>
Se "BEGIN" non viene trovato, nessun dato verrà stampato. E, se "BEGIN" viene
trovato ma non viene trovata nessuna riga contenente "END" dopo di esso,
allora verranno stampate tutte le righe consecutive. Ciò accade perchè sed è
un editor di flusso -- esso non sa se la riga contenente "END" apparirà o
no.
</p>

</body>
</section>
<section>
<title>Esempio di sorgente C</title>
<body>

<p>
Se si vuole stampare solo la funzione main() di un file di sorgente C, è
possibile digitare:
</p>

<pre caption="Stampare la funzione main() di un file sorgente C">
$ <i>sed -n -e '/main[[:space:]]*(/,/^}/p' sourcefile.c | more</i>
</pre>

<p>
Questo comando ha due espressioni regolari, '/main[[:space:]]*(/' and '/^}/',
e un comando, <c>p</c>. La prima espressione regolare indicherà tutte le
stringhe "main" seguite da un qualsiasi numero di spazi o tab e da una
parentesi aperta.  Ciò corrisponde all'inizio della comune dichiarazione ANSI
C, main().
</p>

<p>
In questa particolare espressione regolare, abbiamo incontrato il carattere
'[[:space:]]'. Si tratta di una speciale keyword la quale indica a sed che deve
fargli corrispondere sia un tab che uno spazio, si può ottenere lo stesso
effetto inserendo: '[', uno spazio, Control-V, un tab e ']' -- Control-V indica
alla bash che si vuole inserire un "vero" tab e non usare l'autocompletamento.
È più chiaro, specialmente negli script, usare il comando '[[:space:]]'.
</p>

<p>
OK, adesso passiamo alla seconda espressione. '/^}/' indica di far
corrispondere ogni carattere '}' se appare all'inizio di una riga. Se il
codice è formattato correttamente, esso dovrà far corrispondere la fine della
funzione main().
</p>

<p>
Il comando <c>p</c> fa ciò che ha sempre fatto, indica a sed di stampare
esplicitamente le righe, anche se esso viene lanciato in modalità quite (-n).
Se si prova a lanciare il comando su un file sorgente C, esso dovrà stampare
tutto il blocco che va da "main() {" a '}', inclusi "main()" e '}'.
</p>

</body>
</section>
<section>
<title>La prossima volta</title>
<body>

<p>
Adesso abbiamo imparato le basi, siamo pronti quindi per i prossimi due
articoli. Se si è impazienti di avere ulteriore materiale su sed, abbiate
pazienza -- stanno arrivando! Nel frattempo, si possono consultare le seguenti
risorse riguardanti le espressioni regolari.
</p>

</body>
</section>
</chapter>

<chapter id="resources">
<title>Risorse</title>
<section>
<title>Link utili</title>
<body>

<ul>
  <li>
    Altri articoli di Daniel su developerWorks: Con titolo comune: Sed by
    example <uri link="l-sed2.xml">Part 2</uri> and <uri
		link="l-sed3.xml">Part
    3</uri>.
  </li>
  <li>
     Le eccellenti <uri
     link="http://www.student.northpark.edu/pemente/sed/sedfaq.html">
		 sed FAQ</uri> di Eric Pement.
  </li>
  <li>
     I sorgenti di sed 3.02 è possibile trovarli su
     <uri>ftp://ftp.gnu.org/pub/gnu/sed</uri>.
  </li>
  <li>
		 Il nuovo sed 3.02.80, invece, è possibile trovarlo su
		 <uri>http://alpha.gnu.org</uri>.
  </li>
  <li>
		Eric Pement inoltre ha scritto <uri
		link="http://www.student.northpark.edu/pemente/sed/sed1line.txt">sed
		one-liners</uri> che chi aspira a diventare un guru di sed deve
		sicuramente conoscere.
  </li>
  <li>
    Se si preferisce un buon libro, <uri
    link="http://www.oreilly.com/catalog/sed2/">O'Reilly's sed &amp; awk, 2nd
    Edition</uri> è sicuramente una ottima scelta.
  </li>
<!-- FIXME BOTH DEAD and not possible to find other locations, sorry
 <li>
    Maybe you'd like to read <uri
    link="http://www.softlab.ntua.gr/unix/docs/sed.txt">7th edition UNIX's sed
    man page</uri> (circa 1978!).
  </li>
  <li>
    Take Felix von Leitner's short <uri
    link="http://www.math.fu-berlin.de/~leitner/sed/tutorial.html">sed
    tutorial</uri>.
  </li>
-->
  <li>
		Si può leggere anche l'articolo di Read David Mertz riguardante<uri
		link="http://www-106.ibm.com/developerworks/linux/library/l-python5.html">
		Elaborazione testo con Python</uri> su developerWorks.
  </li>
  <!--
	<li>
		Dare una ripassata a <uri
		link="http://vision.eng.shu.ac.uk/C++/misc/regexp/">using regular
		expressions</uri> per trovare e modificare i pattern in un testo in
		questo libero, dW-exclusive tutorial.
  </li>
	-->
  <li>
		Dare un'occhiata all' <uri
		link="http://www.python.org/doc/howto/regex/regex.html">how-to sulle
		espressioni regolari</uri> da parte di <uri
		link="http://python.org">Python.org</uri>.
  </li>
  <li>
     Infine fare riferimento a <uri
     link="http://www.uky.edu/ArtsSciences/Classics/regex.html">descrizione
     espressioni regolari</uri> della University del Kentucky.
  </li>
</ul>

</body>
</section>
</chapter>

</guide>


