<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/articles/l-sed2.xml,v 1.1 2005/12/13 20:32:08 so Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/it/articles/l-sed2.xml" lang="it" disclaimer="articles"> 
<title>Sed by example, Parte 2</title>

<author title="Autore">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traduttore">
  <mail link="lucamarturana@gmail.com">Luca Marturana</mail>
</author>

<abstract>
Sed è un potente e compatto editor di flusso. In questo articolo, il secondo
della serie, Daniel mostra come eseguire la sostituzione di stringhe; come
creare script sed più vasti; e usare i comandi sed accoda, inserisci e cambia
riga.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.2</version>
<date>2005-10-09</date>

<chapter>
<title>Come ottenere ulteriori vantaggi dall'editor di testo UNIX</title>
<section>
<title>Sostituzione!</title>
<body>

<p>
Diamo un'occhiata a uno dei più utili comandi di sed, il comando di
sostituzione. Con esso, possiamo sostituire una particolare stringa o un
pattern specificato da una espressione regolare con un'altra stringa. Ecco un
esempio di un uso base di questo comando:
</p>

<pre caption="Il più semplice uso del comando di sostituzione">
$ <i>sed -e 's/foo/bar/' myfile.txt</i>
</pre>

<p>
Il comando sopra avrà come uscita nello stdout il contenuto del file
myfile.txt, con la prima ricorrenza di 'foo' (se viene trovata) di ogni linea
sostituita con la stringa 'bar'. Notare che abbiamo detto "prima ricorrenza di
ogni linea", che normalmente non è ciò che si vuole. Infatti, quando si vuole
fare una sostituzione, normalmente si decide di effettuarla in maniera globale.
Ecco come sostituire tutte le ricorrenze in ogni linea:
</p>

<pre caption="Sostituire tutte le ricorrenze in ogni linea">
$ <i>sed -e 's/foo/bar/g' myfile.txt</i>
</pre>

<p>
L' opzione 'g' posta dopo l'ultimo slash indica a sed di eseguire la
sostituzione in maniera globale.
</p>

<p>
Ci sono alcune cose che bisogna sapere del comando di sostituzione <c>s///</c>.
Primo, è solo un comando: non ci sono espressioni specificate in nessuno degli
esempi sopra. Ciò significa che il comando <c>s///</c> può essere usato con il
controllo tramite espressioni in modo da regolare in quali linee deve essere
applicato, esempio:
</p>

<pre caption="Specificare le linee dove deve essere applicato il comando">
$ <i>sed -e '1,10s/enchantment/entrapment/g' myfile2.txt</i>
</pre>

<p>
L'esempio sopra farà in modo che tutte le ricorrenze di 'enchantment' verranno
sostituite con 'entrapment', ma soltanto nelle linee da 1 a 10, incluse.
</p>

<pre caption="Specificare più opzioni">
$ <i>sed -e '/^$/,/^END/s/hills/mountains/g' myfile3.txt</i>
</pre>

<p>
Questo esempio cambierà 'hills' con 'mountains', ma solo nei blocchi di testo
che cominciano con una linea bianca e terminano con una linea che inizia con i
tre caratteri 'END', inclusivamente.
</p>

<p>
Un'altra cosa interessante del comando <c>s///</c> è che ci sono molte opzioni
riguardandi i separatori <c>/</c>. Se si sta eseguendo una sostituzione e
l'espressione regolare o la stringa di sostituzione ha troppi slash, è
possibile specificare un altro separatore inserendo un differente carattere
dopo la 's'. Per esempio, questo sostituirà tutte le ricorrenze di
<path>/usr/local</path> con <path>/usr</path>:
</p>

<pre caption="Replacing all the occurences of one string with another one">
$ <i>sed -e 's:/usr/local:/usr:g' mylist.txt</i>
</pre>

<note>
In questo esempio, è stato utilizzato ':' come separatore. Se si deve
utilizzare lo stesso carattere del separatore nelle espressioni regolari, si
deve farlo precedere da un backslash.
</note>

</body>
</section>
<section>
<title>Regexp snafus</title>
<body>

<p>
Fino ad ora, abbiamo soltanto seguito una semplice sostituzione. Anche se è
comodo, è possibile anche usare le espressioni regolari. Per esempio, il
seguente comando sed verificherà tutte le stringe che cominciano per '&lt;',
terminano per '&gt;' e contengono un numero qualsiasi di caratteri tra di essi
e le eliminerà (sostituisce con una stringa vuota):
</p>

<pre caption="Eliminare una frase specifica">
$ <i>sed -e 's/&lt;.*&gt;//g' myfile.html</i>
</pre>

<p>
Questo è un buon tentativo per creare uno script sed che rimuova i tag html
da un file, ma non funziona correttamente, a causa di una stranezza delle
espressioni regolari. Il motivo?  Quando sed prova a confrontare le
espressioni regolari su una linea, ricerca le corrispondenze più lunghe su
quella linea.Ciò non produceva alcun comportamento indesiderato nel mio
precedente articolo su sed, perché allora venivano utilizzati i comandi
<c>d</c> e <c>p</c>, che erano proprio intesi a cancellare o stampare
interamente la riga. Ma, utilizzando i comando <c>s///</c>, si manifesta una
differenza enorme, perché l'intera porzione dell'espressione regolare
riconosciuta deve essere sostituita con la stringa assegnata, o, nel nostro
caso, cancellata. Ciò vuol dire che, nell'esempio precedente, si cambierà la
linea qui sotto:
</p>

<pre caption="Sample HTML code">
&lt;b&gt;This&lt;/b&gt; is what &lt;b&gt;I&lt;/b&gt; meant.
</pre>

<p>
In quest'altra:
</p>

<pre caption="Not desired effect">
meant.
</pre>

<p>
Al contrario, questo è ciò che vorremmo:
</p>

<pre caption="Desired effect">
This is what I meant.
</pre>

<p>
Fortunamente, esiste una tecnica semplice per risolvere ciò. Anziché inserire
una espressione regolare che indica "un carattere '&lt;' seguiti da un numero
arbitrario di di caratteri, e terminante con i carattere '&gt;', basta produrre
una espressione regolare che ricerchi un numero indefinito di caratteri
non-'&gt;', conclusa da un carattere '&gt;'. In questo modo, si ottiene il
risultato di riconoscere la ricorrenza più breve dell'espressione, anziché la
più estesa. Il nuovo comando apparirà in questo modo:
</p>

<pre caption="">
$ <i>sed -e 's/&lt;[^&gt;]*&gt;//g' myfile.html</i>
</pre>

<p>
Nell'esempio sopra esposto, il [^&gt;]' specifica un carattere "non-'&gt;'" e
il '*' che segue completa l'espressione richiedendo "zero o più caratteri
non-'&gt;'.Verifica questo comando su un piccolo file html di esempio, assegna
l'output in pipe a more e verifica i risultati.
</p>

</body>
</section>
<section>
<title>Ricerca su gruppi di caratteri</title>
<body>

<p>
La sintassi dell'espressione regolare '[ ]' presenta alcune altre opzioni.Per
specificare un intervallo di caratteri si può usare un '-' esteso dalla prima
all'ultima posizione, come segue:
</p>

<pre caption="Specificare un intervallo di caratteri">
'[a-x]*'
</pre>

<p>
In questo modo saranno riconosciuti zero o più caratteri, compresi tra
'a','b','c'...'v','w','x'. In aggiunta, la classe di caratteri
'[:space:]' è utilizzabile per riconoscere gli spazi bianchi. Questa è
una lista pressochè completa delle classi di caratteri disponibili:
</p>

<table>
  <tr>
    <th>Classi di caratteri</th>
    <th>Descrizione</th>
  </tr>
  <tr>
    <ti>[:alnum:]</ti>
    <ti>Alfanumerici [a-z A-Z 0-9]</ti>
  </tr>
  <tr>
    <ti>[:alpha:]</ti>
    <ti>Alfabetici [a-z A-Z]</ti>
  </tr>
  <tr>
    <ti>[:blank:]</ti>
    <ti>Spazi o caratteri di tabulazione</ti>
  </tr>
  <tr>
    <ti>[:cntrl:]</ti>
    <ti>Caratteri di controllo generici</ti>
  </tr>
  <tr>
    <ti>[:digit:]</ti>
    <ti>Cifre decimali [0-9]</ti>
  </tr>
  <tr>
    <ti>[:graph:]</ti>
    <ti>Caratteri visibili (esclude gli spazi bianchi)</ti>
  </tr>
  <tr>
    <ti>[:lower:]</ti>
    <ti>Lettere minuscole [a-z]</ti>
  </tr>
  <tr>
    <ti>[:print:]</ti>
    <ti>Caratteri stampabili (esclude i caratteri di controllo)</ti>
  </tr>
  <tr>
    <ti>[:punct:]</ti>
    <ti>Caratteri di punteggiatura</ti>
  </tr>
  <tr>
    <ti>[:space:]</ti>
    <ti>Spazio bianco</ti>
  </tr>
  <tr>
    <ti>[:upper:]</ti>
    <ti>Lettere maiuscole [A-Z]</ti>
  </tr>
  <tr>
    <ti>[:xdigit:]</ti>
    <ti>Cifre esadecimali [0-9 a-f A-F]</ti>
  </tr>
</table>

<p>
E' vantaggioso utilizzare classi di caratteri ovunque possibile, perché si
adattano meglio ai linguaggi di localizzazione nonInglesi (compresi i caratteri
accentati, ove necessario).
</p>

</body>
</section>
<section>
<title>Operazioni di sostituzione avanzata</title>
<body>

<p>
Abbiamo visto fin qui come eseguire sia sostituzioni semplici che
ragionevolmente complesse, ma sed può fare anche dell'altro.  Ora, ci
interessemo ad espressioni regolari riconosciute interamente o in parte, e le
utilizzeremo per costruire la stringa di sostituzione. Ad esempio, suppiamo
di rispondere ad un messaggio. Il seguente esempio aggiungerà a ciascuna
linea il prefisso "ralph said: "
</p>

<pre caption="Preporre a ciscuna linea una data stringa">
$ <i>sed -e 's/.*/ralph said: &amp;/' origmsg.txt</i>
</pre>

<p>
L'output apparirà come segue:
</p>

<pre caption="Output of the above command">
ralph said: Hiya Jim,
ralph said:
ralph said: I sure like this sed stuff!
ralph said:
</pre>

<p>
In questo esempio, si è usato il carattere '&amp;' nella stringa di
sostituzione, che ordina a sed di inserire l'intera espressione regolare
selezionata. Così, tutto ciò che è stato selezionato con '.*' (ovvero
l'insieme più esteso di zero o più caratteri contenuti sulla linea - che vuol
dire l'intera linea) può essere inserito ovunque nella linea di sostituzione,
e ciò può essere fatto anche contemporaneamente in più punti. Questo è
grande, ma sed è anche più potente.
</p>

</body>
</section>
<section>
<title>Delle meravigliose parentesi fatte con i backslash</title>
<body>

<p>
Ancor meglio che '&amp;', il comando <c>///</c> ci permette di definire regioni
nella nostra espressione regolare, a cui possiamo fare rifermento nella stringa
di sostituzione. Come esempio, supponiamo di avere un file che contenga il
seguente testo.
</p>

<pre caption="Sample text">
foo bar oni
eeny meeny miny
larry curly moe
jimmy the weasel
</pre>

<p>
Ora, supponiamo di voler scrivere uno script di sed che sostituisca
"eeny meeny miny" con "Victor eeny-meeny Von miny", etc. Per fare ciò,
scriveremo una espressione regolare che selezioni queste tre stringhe, separate
da spazi:
</p>

<pre caption="Ricerca di espressioni regolari">
'.* .* .*'
</pre>

<p>
Dunque. Ora definiamo delle regioni inserendo parentesi di backslash per
ciascuna regione di interesse:
</p>

<pre caption="Definire regioni">
'\(.*\) \(.*\) \(.*\)'
</pre>

<p>
Questa espressione regolare lavorerà esattamente come la nostra prima, ma
riuscirà anche a definire tre regioni logiche nella nostra stringa di
sostituzione.
Questo è lo script finale:
</p>

<pre caption="Script finale">
$ <i>sed -e 's/\(.*\) \(.*\) \(.*\)/Victor \1-\2 Von \3/' myfile.txt</i>
</pre>

<p>
come si vede, stiamo facendo riferimento a ciascuna regione delimitata dalle
parentesi, a partire da uno. L'output sarà il seguente:
</p>

<pre caption="Output del comando precedente">
Victor foo-bar Von oni
Victor eeny-meeny Von miny
Victor larry-curly Von moe
Victor jimmy-the Von weasel
</pre>

<p>
Ora che stiamo oramai acquisendo familiarità con sed, diventiamo capacità di
eseguire operazioni di elaborazione di testi decisamente complesse con una
discreta comodità.
Riflettendo su come si potrebbe affrontare questo problema in un qualunque
altro linguaggio di scripting di vostra preferenza, sapreste indicare forse uno
strumento che realizzi la soluzione in una linea soltanto?
</p>

</body>
</section>
<section>
<title>Altre cose non ancora citate</title>
<body>

<p>
Nella creazione di script più complessi, sorge la necessità di eseguire più
di un comando in succesione. Ci sono diversi modi per realizzarla. Primo, si
può utilizzare il punto e virgola tra i comandi. Per esempio, questa
procedura esegue il comando '=', che indica a sed di stampare il numero di
linea, e successivamente il comando <c>p</c>, che richiede esplicitamente di
stampare ls linea (poichè siamo in modalità -n):
</p>

<pre caption="Primo metodo, il punto e virgola">
$ <i>sed -n -e '=;p' myfile.txt</i>
</pre>

<p>
Se vengono specificati due o più comandi, ciascuno sarà applicato (nell'ordine)
a ciascuna linea del file. Nell'esempio sopra, prima viene applicato il comando
'=' alla linea due, e poi il comando <c>p</c>. Quindi, sed procede alla seconda
linea e ripete il processo.
Sebbene il punto e virgola sia comodo, vi sono istruzioni in cui non funziona.
Una seconda alternativa è l'uso di due opzioni -e per specificare i due comandi
separati:
</p>

<pre caption="Secondo metodo, l'opzione multipla -e">
$ <i>sed -n -e '=' -e 'p' myfile.txt</i>
</pre>

<p>
Anche qui, con comandi di inserimento e concatenazione complessi, anche
l'opzione '-e' potrebbe non essere d'aiuto. Per complessi script multilinea, la
soluzione migliore è quella di inserire i comandi necessari in un file
separato. In questo caso, si fa riferimento al file separato in questo modo:
</p>

<pre caption="Terzo metodo, file di comandi esterno">
$ <i>sed -n -f mycommands.sed myfile.txt</i>
</pre>

<p>
Questo sistema, sebbene decisamente meno conveniente, funziona sempre.
</p>

</body>
</section>
<section>
<title>Comandi multipli per un singolo indirizzo</title>
<body>

<p>
Talora, si potrebbe aver desiderio di specificare comandi multipli da applicare
ad un singolo indirizzo. Questo accade con particolare frequenza nell'eseguire
numerose trasformazioni di parole o sintassi nei file sorgente. Per eseguire
comandi multipli su un indirizzo, introdurre i comandi di sed in un file,
costruendo il gruppo di comandi '{ }' come segue:
</p>

<pre caption="Eseguire comandi multipli su di un unico indirizzo">
1,20{
	s/[Ll]inux/GNU\/Linux/g
	s/samba/Samba/g
	s/posix/POSIX/g
}
</pre>

<p>
L'esempio precedente applicherà tre comandi di sostituzione dalla linea 1 alla
20, estremi inclusi. È possibile anche fare uso di espressioni regolari
indirizzate, o una combinazione dei due:
</p>

<pre caption="Combinazione di entrambi i metodi">
1,/^END/{
        s/[Ll]inux/GNU\/Linux/g 
        s/samba/Samba/g 
        s/posix/POSIX/g 
	p
}
</pre>

<p>
Questo esempio si applica a tutti i comandi tra '{ }' le linee inizianti per 1
fino alla linea che inizia con le lettere "END", oppure una terminazione di
file se la stringa non viene rinvenuta nel file sorgente.
</p>

</body>
</section>
<section>
<title>Accodare, inserire e modificare linee</title>
<body>

<p>
Preparato che sia lo script di sed in un file separato, possiamo avvantaggiarci
dei comandi per accodare, inserire e modificare linee. Questi comandi
inseriranno la linea corrente, o la sostituiranno nel cosidetto pattern space,
che è l'area attiva di memoria in cui è contenuta  la riga su cui sed sta
attualmente lavorando. Gli stessi possono essere anche usati per inserire linee
multiple in output. Il comando di inserimento di linea è utilizzato come segue:
</p>

<pre caption="Uso del comando di inserimento di line">
i\
Questa linea sarà inserita prima di ciascuna linea
</pre>

<p>
Se non viene specificato un indirizzo per quest comando, sarà applicato a
ciascuna linea e produrrà un output che appare come il seguente:
</p>

<pre caption="Output of the above command">
Questa linea sarà inserita prima di ciascuna linea
linea 1 qui
Questa linea sarà inserita prima di ciascuna linea
linea 2 qui
Questa linea sarà inserita prima di ciascuna linea
linea 3 qui
Questa linea sarà inserita prima di ciascuna linea
linea 4 qui
</pre>

<p>
Desiderando inserire linee multiple prima della linea corrente, potrete
aggiungere linee addizionali concatenando un backslash alla linea precedente,
come qui:
</p>

<pre caption="Inserire linee multiple prima di quella corrente">
i\
inserisci questa linea\
e questa\
e questa\
e, uh, anche questa, poi.
</pre>

<p>
Il comando di concatenazione lavora analogamente, ma inserirà la linea o le
linee, nel pattern space. E' usato come segue:
</p>

<pre caption="Concatenare linee dopo quella corrente">
a\
Inserisci questa linea dopo ogni linea., Grazie! :)
</pre>

<p>
D'altra parte, il comando di sostituzione di linea rimpiazzerà la linea
corrente nel pattern space, ed è usato come segue:
</p>

<p>
Siccome i comandi di concatenazione, inserimento e modifica devono essere
eseguiti su linee multiple, avrai desiderio di inserirli in appositi script di
testo per sed e chiamare l'esecuzione con sed attraverso l'opzione '-f'.
Utilizzare metodi alternativi per passare i comandi a sed può generare
problemi.
</p>

</body>
</section>
<section>
<title>La prossima volta</title>
<body>

<p>
La prossima volta, nell'articolo finale di questa serie su sed, vi mostrerò
molti ottimi esempi di uso di sed in numerose situazioni operative.
E non solo mostrerò cosa faccia lo script, ma perchè lo fa.
Ciò fatto, sarete voi a trovare nuove splendide idee per usare sed in vari
progetti. Io starò a guardare voi, allora!
</p>

</body>
</section>
</chapter>

<chapter>
<title>Risorse</title>
<section>
<title>Collegamenti utili</title>
<body>

<ul>
  <li>
    Altri articoli di Read Daniel su sed developerWorks:
Common threads: Sed by example, <uri link="l-sed1.xml">Part 1</uri> and <uri
    link="l-sed3.xml">Part 3</uri>.
  </li>
  <li>
     Eccellente recensione di Eric Pement <uri
     link="http://www.student.northpark.edu/pemente/sed/sedfaq.html">sed
     FAQ</uri>.
  </li>
  <li>
     I sorgenti di sed 3.02 collocati a
     <uri>ftp://ftp.gnu.org/pub/gnu/sed</uri>.
  </li>
  <li>
    Gli splendidi, nuovi sorgenti di sed 3.02.80 sono invece a
    <uri>ftp://alpha.gnu.org</uri>.
  </li>
  <li>
    Inoltre, Eric Pement mantiene una comoda collezione di comandi <uri
    link="http://www.student.northpark.edu/pemente/sed/sed1line.txt">sed
    one-liners</uri> che ogni aspirante guru dovrebbe attentamente guardare.
  </li>
  <li>
   Desiderando un buon libro vecchia maniera,<uri
    link="http://www.oreilly.com/catalog/sed2/">O'Reilly's sed &amp; awk, 2nd
    Edition</uri> potrebbe essere un'ottima scelta.
  </li>
<!-- FIXME BOTH DEAD and no other locations, sorry
 <li>
    Maybe you'd like to read <uri
    link="http://www.softlab.ntua.gr/unix/docs/sed.txt">7th edition UNIX's sed
    man page</uri> (circa 1978!).
  </li>
  <li>
    Take Felix von Leitner's short <uri
    link="http://www.math.fu-berlin.de/~leitner/sed/tutorial.html">sed
    tutorial</uri>.
  </li>
-->
    <li>
     Dare una ripassata a <uri
link="http://vision.eng.shu.ac.uk/C++/misc/regexp/"> using regular
expressions</uri> per trovare e modificare porzioni di testo in questo libero
dW-exclusive tutorial.
  </li>
</ul>

</body>
</section>
</chapter>

</guide>

