<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/articles/l-sed3.xml,v 1.2 2007/05/16 23:28:47 scen Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/it/articles/l-sed3.xml" lang="it" disclaimer="articles">
<title>Sed per esempi, Parte 3</title>

<author title="Autore">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traduttore">
  <mail link="ziapannocchia@gmail.com">Marco Clocchiatti</mail>
</author>

<abstract>
Sed è un text-editor di flusso molto potente. In questo articolo,il terzo
della serie, Daniel ci mostra come utilizzare sed per eseguire sostituzione
di stringhe, creare script di sed più complessi e usare sed per concatenare,
inserire e modificare comandi in linea.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<!-- La versione originale di questo articolo fu pubblicata su IBM
     developerWorks, ed è proprietà della Westtech Information Services. Ques
to documento è una versione aggiornata dell'articolo originale che contiene
numerosi migliramenti apportati dal team di documentazione di Gentoo -->

<version>1.2</version>
<date>2005-10-09</date>

<chapter>
<title>Passando al prossimo livello: La manipolazione dei dati, lo stile sed
</title>
<section>
<title>sed Muscolare</title>
<body>

<p>
Nel <uri link="l-sed2.xml">mio secondo articolo</uri>, ho portato un insieme
di esempi per mostrare come lavora sed, ma pochi di essi, in realtà,
eseguivano qualcosa di realmente utile. In questo articolo finale su sed, è
il momento di cambiare rotta e mettere sed veramente all'opera. Si
mostreranno numerosi eccellenti esempi che non solo manifestano la potenza di
sed, ma fanno ad un tempo cose raffinate (e pratiche). Per esempio, nella
seconda parte dell'articolo, farò vedere come ho progettato uno script che
converte un file .QIF prodotto dal programma finanziario Intuit's Quicken in
un testo piacevolmente formattato. Ma prima di fare ciò, diamo uno sguardo ad
alcuni scripts meno complicati ma pur sempre molto utili.
</p>

</body>
</section>
<section>
<title>Traduzione di testo</title>
<body>

<p>
Il nostro primo script pratico converte del testo in formato UNIX-style a testo
in formato DOS/Windows. Come probabilmente sapete, i file di testo
DOS/Windows-based utilizzano un CR (ritorno a carrello) e un LF (linea a capo -
line feed) al termine di ogni riga, mentre UNIX utilizza esclusivamente un line
feed. Succede a volte di dover trasferire file di testo da sistemi UNIX a
sistemi WINDOWS, e questo script realizzerà la conversione di formato per voi.
</p>

<pre caption="Conversione di formato tra UNIX and Windows">
$ <i>sed -e 's/$/\r/' myunix.txt > mydos.txt</i>
</pre>

<p>
In questo script, l'espressione regolare '$' designa i fine linea e la '\r'
comanderà a sed di inserirvi davanti un ritorno a carrello. Inserisce un
ritorno a carrello davanti a ciascun line feed e, immediatamente, ognilinea
sarà terminata da un CR/LF. Si noti che il '\r' sarà sostituito con un CR
solo usando la versione GNU sed 3.02.80 o seguente. Se non avete installato
ancora GNU sed 3.02.80, leggete il <uri link="l-sed1.xml"> mio primo
articolo</uri> per istruzioni su come fare.
</p>

<p>
Non saprei dirvi quante volte io abbia scaricato script di esempio o codice
C, scoprendo che si trattava di documenti in formato DOS/Windows. Mentre molti
programmi non temono i file formattati con i caratteri CR/LF in formato
DOS/Windows, ve ne sono parecchi, invece, che lo fanno -- primo tra essi bash,
che si arresta appena incontra un ritorno a carrello. La seguente invoncazione
convertirà testo in formato DOS/Windows ad uno pulito Formato UNIX:
</p>

<pre caption="Convertire codice C dal formato Windows al formato UNIX">
$ <i>sed -e 's/.$//' mydos.txt > myunix.txt</i>
</pre>

<p>
Il principio di funzionamento di questo script è semplice: la nostra
sostituzione di espressione regolare individua l'ultimo carattere di ciascuna
linea, che risulta essere un ritorno a carrello. Noi la sostituiamo con
nulla, provocando la cancellatura completa dall'output. Se utilizzi questo
script e osservi che l'ultimo carattere di ciascuna linea è stato cancellato,
significa che hai specificato in input un file di testo già formattato in
stile UNIX. Non avresti dovuto far nulla!
</p>

</body>
</section>
<section>
<title>Inversione di linee</title>
<body>

<p>
Questo è un altro piccolo, comodissimo script. Produce un'inversione delle
linee di un file, similmente al comando tac, incluso in molte distribuzioni
Linux. La denominazione "tac" può apparire un po' fuorviante, perché "tac"
non inverte la posizione dei caratteri sulla linea, ma esclusivamente la
posizione delle linee nei file (da su a giù). Usiamo "tac" sul seguente file:
</p>

<pre caption="File esempio">
foo
bar
oni
</pre>

<p>
Produrremo l'output seguente:
</p>

<pre caption="File di output">
oni
bar
foo
</pre>

<p>
Possiamo ottenere lo stesso risultato con l'uso del seguente script di sed:
</p>

<pre caption="Fare lo stesso con uno script">
$ <i>sed -e '1!G;h;$!d' forward.txt > backward.txt</i>
</pre>

<p>
Questo script risulterà utilissimo se si opera in un sistema FreeBSD, che non
possiede un comando "tac". Ma lasciatemi discutere un po' su questo.
</p>

</body>
</section>
<section>
<title>Spiegazione dell'inversione</title>
<body>

<p>
In primis, questo script contiene tre comandi distinti, separati da punti e
virgola: '1!G', 'h' and '$!d'. Ora, è opportuno acquisire una buona
comprensione degli indirizzi utilizzati per il primo e il terzo comando. Se
il primo comando fosse '1G', il comando 'G' sarebbe applicato esclusivamente
alla prima linea. Però, avendo inserito un carattere aggiuntivo '!' -- questo
'!' nega l'indirizzo, facendo applicare il comando 'G' a tutte le linee
tranne la prima. Analogamente accade per il comando '$!d'. Se il comando
fosse '$d', si applicherebbe il comando 'd' alla sola ultima linea del file
(il '$' è una modalità semplice di indicare l'ultima linea). Invece, con il
'!', '$!d' il comando 'd' sarà applicato a tutte le linee, tranne l'ultima.
Così, abbiamo tutti compreso come funziona funziona ciascun singolo comando.
</p>

<p>
Quando eseguiamo il nostro script di inversione sul file di testo precedente,
il primo comando eseguito è 'h'. Questo comando copia il contenuto del
pattern space (un registro di memoria temporanea). Dopodichè, viene eseguito
il comando 'd', che cancella "foo" dal pattern space, in modo che non venga
stampato dopo che tutti i comandi sono eseguiti per questa linea.
</p>

<p>
Ora, linea due. Dopo che "bar" viene letto nel pattern space, il comando 'G' è
eseguito, e accoda il contenuto del hold space ("foo\n") al pattern space
("bar\n"), restituendo "bar\n\foo\n" nel pattern space attuale. Il comando 'h'
riporta il tutto in hold space per salvarlo, mentre 'd' cancella la linea dal
pattern space affinchè non venga stampata.
</p>

<p>
Per l'ultima riga "oni", viene rieseguita la stessa procedura, tranne che i
contenuti del pattern space (le tre linee in successione) sono stampati sullo
standard output.
</p>

<p>
Ora, è il momento per eseguire una qualche potente conversione di dati con
sed.
</p>

</body>
</section>
<section>
<title>QIF: una magia di sed</title>
<body>

<p>
Per le prossime settimane, stavo meditando di acquistare una copia di Quicken
per controllare i miei conti in banca.
Quicken è un programma finanziario molto carino, che permette di corredare il
lavoro con colori sfarzosi. Ma, dopo averci pensato, ho creduto che avrei
potuto facilmente scrivere io del software per mantenere il mio checkbook.
Dopo tutto, ho pensato, sono un programmatore di software!
</p>

<p>
Così, Ho sviluppato un progamma di controllo del conto corrente (con
awk) che determina lo stato del mio conto analizzando un file di testo
contenente tutte le mie transazioni.
Dopo qualche riflessione, compresi che potevo tener traccia di due liste
indipendenti di crediti e debiti proprio come veniva fatto da Quicken. Ma vi
era ancora una nuova caratteristica che volevo aggiungere.
Recentemente, avevo spostato i miei conti in una banca che offriva una
interfaccia online. Un giorno, notai che il sito web della mia banca mi
consentiva di scaricare le informazioni sul mio account nel formato .QIF di
Quicken.In pochissimo tempo, decisi che avrei realmente provato a convertire le
informazioni in formato testo.
</p>

</body>
</section>
<section>
<title>Una tavola dei due formati</title>
<body>

<p>
Prima di concentrarci al formato QIF, vediamo qui come appare il mio
file checkbook.txt:
</p>

<pre caption="Esempio di formato QIF">
28 Aug 2000     food    -       -       Y     Supermarket             30.94
25 Aug 2000     watr    -       103     Y     Check 103               52.86
</pre>

<p>
Nel mio file, tutti i campi sono separati da uno o più caratteri di
tabulazione, con una transazione per linea. Dopo la data, il campo successivo
indica il tipo di spesa (oppure un "-" se si tratta di una voce in entrata) Il
terzo
campo indica il tipo di entrata (o "-" se si tratta di una voce in uscita).
Quindi, c'è un campo di controllo (o "-" se vuoto), un campo di riconoscimento
delle transazioni eliminate,
("Y" or "N"), un commento e un importo in dollari. Ora possiamo dare un occhio
al formato QIF. Quando osservai il mio file QIF, dopo averlo scaricato, per
mezzo di un visualizzatore di testo, questo è ciò che lessi:
</p>

<pre caption="File di output malformattato">
!Type:Bank
D08/28/2000
T-8.15
N
PCHECKCARD SUPERMARKET
^
D08/28/2000
T-8.25
N
PCHECKCARD PUNJAB RESTAURANT
^
D08/28/2000
T-17.17
N
PCHECKCARD SUPERMARKET
</pre>

<p>
Dopo aver analizzato il file, non fu molto difficile ricostruire il formato --
ignorando la prima linea, il formato è come segue:
</p>

<pre caption="File format">
D&lt;date&gt;
T&lt;transaction amount&gt;
N&lt;check number&gt;
P&lt;description&gt;
^
<comment>(questo è il separatore di campo)</comment>
</pre>

</body>
</section>
<section>
<title>Iniziare il processo</title>
<body>

<p>
Quando si affronta un progetto complesso come questo con sed, non bisogna
scoraggiarsi -- sed consente di manipolare gradualmente i dati fino alla loro
forma finale.  Mentre si procede, è possibile continuare a rifinire lo script
di sed affinchè l'output appaia esattamente come si desidera. Non è
necessario ottenere il comportamento corretto immediatamente al primo
tentativo.
</p>

<p>
Per cominciare, creai un file chiamato <path>qiftrans.sed</path>, e iniziai a
manipolare i dati:
</p>

<pre caption="qiftrans.sed">
1d
/^^/d
s/[[:cntrl:]]//g
</pre>

<p>
Il primo comando '1d' cancella la prima linea, e il secondo rimouve quegli
antipatici caratteri '^' dall'output. L'ultima linea rimuove ogni carattere
di controllo che possa comparire nel file. Siccome sto per trattare un file
in un formato estraneo, voglio evitare il rischio di incontrare qualunque
carattere di controllo strada facendo. E per ora, questo è buono. Adesso, è
il momento di aggiungere qualche istruzione di elaborazione a questo script
di base:
</p>

<pre caption="Improved basic script">
1d
/^^/d
s/[[:cntrl:]]//g
/^D/ {
  s/^D\(.*\)/\1\tOUTY\tINNY\t/
        s/^01/Jan/
        s/^02/Feb/
        s/^03/Mar/
        s/^04/Apr/
        s/^05/May/
        s/^06/Jun/
        s/^07/Jul/
        s/^08/Aug/
        s/^09/Sep/
        s/^10/Oct/
        s/^11/Nov/
        s/^12/Dec/
        s:^\(.*\)/\(.*\)/\(.*\):\2 \1 \3: 
}
</pre>

<p>
Dapprima, ho aggiunto un indirizzo '/^D/ affinchè sed inizi a processare solo
quando incontri il primo carattere del campo di dati QIF, 'D'. Tutti i comandi
tra parentesi graffe saranno eseguiti sequenzialmente non appena sia letta una
tale linea nel pattern space.
</p>

<p>
La prima linea tra parentesi graffe trasforma una linea che appare in questo
modo:
</p>

<pre caption="Linea iniziale prima della modifica">
D08/28/2000
</pre>

<p>
In una siffatta:
</p>

<pre caption="Linea iniziale dopo la modifica">
08/28/2000  OUTY  INNY
</pre>

<p>
Naturalmente questo non è un formato perfetto, ma può andare. Noi rifiniremo
gradualmente il contenuto del pattern space via facendo. Le successive 12 linee
hanno l'effetto netto di trasformare la data in un formato a tre lettere, con
l'ultima linea che rimuove i tre slash dalla data. Alla fine, otteniamo questo
risultato:
</p>

<pre caption="Aspetto finale della linea">
Aug 28 2000  OUTY  INNY
</pre>

<p>
I capi OUTY e INNY sono usati come fermaposto e saranno rimpiazzati in
seguito. Io non sono in grado di specificarli fin d'ora, perché se l'importo
in dollari sarà negativo, io sostituirò OUTY e INNY con "misc" e "-", ma se
l'importo sarà positivo, li dovrò sostiuire con "-" e "inco"
rispettivamente.  Fno a che l'importo non sia stato determinato, sarà
necessario mantenere i fermaposti per quanto segue.
</p>

</body>
</section>
<section>
<title>Rifinitura</title>
<body>

<p>
Ora, è necessaria un'ulteriore rifinitura:
</p>

<pre caption="Ulteriore rifinitura">
1d 
/^^/d
s/[[:cntrl:]]//g 
/^D/ { 
        s/^D\(.*\)/\1\tOUTY\tINNY\t/ 
        s/^01/Jan/ 
        s/^02/Feb/ 
        s/^03/Mar/ 
        s/^04/Apr/ 
        s/^05/May/ 
        s/^06/Jun/ 
        s/^07/Jul/ 
        s/^08/Aug/ 
        s/^09/Sep/ 
        s/^10/Oct/ 
        s/^11/Nov/ 
        s/^12/Dec/ 
        s:^\(.*\)/\(.*\)/\(.*\):\2 \1 \3: 
        N 
        N 
        N 
        s/\nT\(.*\)\nN\(.*\)\nP\(.*\)/NUM\2NUM\t\tY\t\t\3\tAMT\1AMT/ 
        s/NUMNUM/-/ 
        s/NUM\([0-9]*\)NUM/\1/ 
        s/\([0-9]\),/\1/ 
}
</pre>

<p>
Le successive sei nuove linee sono un po' complicate, e perciò saranno
descritte in dettaglio. Prima, noi abbiamo tre comandi 'N' in una riga. Il
comando 'N' indica a sed di leggere la successiva linea di output e di
accodarla al pattern space corrente. I tre 'N' consentono di concatenare le
successive tre linee al registro del pattern space attuale, in modo che ora la
nostra linea appaia in questo modo:
</p>

<pre caption="New look of our lines">
28 Aug 2000  OUTY  INNY  \nT-8.15\nN\nPCHECKCARD SUPERMARKET
</pre>

<p>
Il pattern space di sed è diventato un po' strambo -- noi dobbiamo rimuovere
i newlinee eccedenti ed eseguire qualche formattazione aggiuntiva.Per far
questo,
useremo il coamndo di sostituzione: Il pattern da riconoscere è:
</p>

<pre caption="Rimuovere i fine linea eccedenti e applicarea alcune formattazioni
aggiuntive">
'\nT.*\nN.*\nP.*'
</pre>

<p>
Così viene individuato un newline, seguito da una 'T', seguito da zero o più
caratteri, seguito da un newline, seguito da una 'N', seguito da un numero
arbitrario di caratteri e un newline, seguito da una 'P', seguita da un numero
arbitrario di caratteri. Phew! Questa espressione regolare selezionerà l'intero
contenuto delle tre linee che noi accoderemo semplicemente al pattern space. Ma
noi vogliamo riformattare questa regione, non rimpiazzarla
interamente.L'ammontare in dollari, il numero di check (se presente) e la
descrizione dovranno ricomaparire nella nostra stringa di rimpiazzamento.Per
ottenere ciò, abbiamo racchiuso quelle "parti interessanti" tra parentesi con
uno backslash, in modo da poterci riferire ad esse nella stringa di
rimpiazzamento
(usando '\1', '\2', '\3' per dire a sed dove inserirle). Questo è il comando
finale:
</p>

<pre caption="The final command">
s/\nT\(.*\)\nN\(.*\)\nP\(.*\)/NUM\2NUM\t\tY\t\t\3\tAMT\1AMT/
</pre>

<p>
Con questo comando, la nostra linea è così trasformata:

This command transforms our line into:
</p>

<pre caption="Result of the above command">
28 Aug 2000  OUTY  INNY  NUMNUM    Y     CHECKCARD SUPERMARKET AMT-8.15AMT
</pre>

<p>
Sebbene questa linea comincia ad apparire migliore, ci sono un paio di cosette
che a prima vista appaiono un pochinino ... meno interessanti. La prima è
quella sciocca stringa "NUMNUM" -- a che serve? Si scoprirà, appena saranno
osservate le successive due linee dello script di sed, che "NUMNUM" sarà
rimpiazzato da un "-", mentre "NUM"&lt;number&gt;"NUM" sarà rimpiazzato da
&lt;number&gt;. Come si vede, rinchiudendo il numero di controllo con un banale
tag consente di inserire convenientemente un "-" se il campo è vuoto.
</p>

</body>
</section>
<section>
<title>Ritocchi finali</title>
<body>

<p>
L'ultima linea rimuove una virgola che segue un numero. Questo trasforma
importi come "3,231.00" in "3231.00", che è il formato da me usato.
Ora è possibile dare uno sguardo fino allo script di produzione:
</p>

<pre caption="Lo script finale di produzione">
1d
/^^/d
s/[[:cntrl:]]//g
/^D/ {
  s/^D\(.*\)/\1\tOUTY\tINNY\t/
  s/^01/Jan/
  s/^02/Feb/
  s/^03/Mar/
  s/^04/Apr/
  s/^05/May/
  s/^06/Jun/
  s/^07/Jul/
  s/^08/Aug/
  s/^09/Sep/
  s/^10/Oct/
  s/^11/Nov/
  s/^12/Dec/
  s:^\(.*\)/\(.*\)/\(.*\):\2 \1 \3:
  N
  N
  N
  s/\nT\(.*\)\nN\(.*\)\nP\(.*\)/NUM\2NUM\t\tY\t\t\3\tAMT\1AMT/
  s/NUMNUM/-/
  s/NUM\([0-9]*\)NUM/\1/
  s/\([0-9]\),/\1/
  /AMT-[0-9]*.[0-9]*AMT/b fixnegs
  s/AMT\(.*\)AMT/\1/
  s/OUTY/-/
  s/INNY/inco/
  b done
:fixnegs
  s/AMT-\(.*\)AMT/\1/
  s/OUTY/misc/
  s/INNY/-/
:done
}
</pre>

<p>
Le undici righe aggiuntive usano la sostituzione e alcune istruzioni di salto
(branch) per perfezionare l'output. Rivediamo un attimo la prima di esse:
</p>

<pre caption="Controllo attento della prima linea">
        /AMT-[0-9]*.[0-9]*AMT/b fixnegs 
</pre>

<p>
La linea contiene un comando di branch, che è nel formato "/regexp/b
etichetta" Se il patern space soddisfa l'espressione regolare, sed eseguirà
un salto all'etichetta ":fixnegs" del listato. Se la regexp non coincide, il
processo proseguirà normalmente con il comando successivo.
</p>

<p>
Ora che abbiamo compreso il funzionamento del comando in sè, diamo uno
sguardo ai salti. Se osserviamo le espressioni regolari di salto, si vedrà
che ricercano la stringa 'AMT', seguita da un '-', seguito da un numero
arbitrario di cifre, un '.', una successione di cifre e 'AMT'. Come
sicuramente avrete intuito, questa regexp agisce specificamente sugli importi
negativi. In precedenza, il nostro importo era stato racchiuso in una stringa
'AMT', in modo da poterlo facilmente ritrovare in seguito. Poiché
l'espressione regolare riconosce esclusivamente importi in denaro preceduti
da un '-', il nostro salto avverrà solamente se stiamo trattando con un
debito. Ma se stiamo manipolando un debito, OUTY dovrà essere impostato a
'misc', INNY dovrà essere '-' e il segno negativo davanti all'importo in
denaro dovrà essere rimosso. Controllando il codice, si verifica che è
esattamente ciò che accade. Se il salto non è eseguito, OUTY sarà rimpiazzato
con un '-', e INNY sostituito da 'inco'. Abbiamo finito!  La nostra linea di
output ora è perfetta.
</p>

<pre caption="The perfect output line">
28 Aug 2000  misc  -  -       Y     CHECKCARD SUPERMARKET  -8.15
</pre>

</body>
</section>
<section>
<title>Non lasciatevi confondere</title>
<body>

<p>
Come potete vedere, manipolare dati con l'uso di sed non è così difficile,
purché si affronti il problema in progressione incrementale. Non si cerchi di
realizzare ogni cosa con un singolo comando, o tutto in un colpo. Invece,si
ricerchi gradualmente la propria strada verso l'obiettivo, lavorando
continuamente a migliorare lo script di sed fino a quando l'output non assuma
l'aspetto desiderato. Sed sistema un sacco di cose, e io spero che vi divenga
familiare nei suoi segreti meccanismi e che possiate continuare a sviluppare la
vostra abilità nell'uso di sed!
</p>

<ul>
  <li>
		Altri articoli di Daniel da developerWorks: Con titolo comune: Sed by
		example, <uri link="l-sed1.xml">Part 1</uri> and <uri
		link="l-sed2.xml">Part 2</uri>.
  </li>
  <li>
    Le eccellenti <uri
    link="http://www.student.northpark.edu/pemente/sed/sedfaq.html">sed
    FAQ</uri> di Eric Pement's.
  </li>
  <li>
	  I sorgenti di sed 3.02 si possono trovare su
    <uri>ftp://ftp.gnu.org/pub/gnu/sed</uri>.
  </li>
  <li>
		Il nuovo sed 3.02.80, invece,si può trovare su
		<uri>ftp://alpha.gnu.org</uri>.
  </li>
  <li>
		Eric Pement inoltre ha scritto <uri
		link="http://www.student.northpark.edu/pemente/sed/sed1line.txt">sed
		one-liners</uri> che chi aspira a diventare un guru di sed deve
		assolutamente conoscere.
  </li>

<!-- FIXME BOTH DEAD and no other locations, sorry
  <li>
    Take Felix von Leitner's short <uri
    link="http://www.math.fu-berlin.de/~leitner/sed/tutorial.html">sed
    tutorial</uri>.
  </li>
-->
  <li>
		Dare una ripassata a <uri
		link="http://vision.eng.shu.ac.uk/C++/misc/regexp/">using regular
		expressions</uri> per trovare e modificare i pattern in un testo in
		questo libero, dW-exclusive tutorial.
  </li>
  <li>
		In ultimo.  Questo link, in origine, aveva un interesse storico notevole
		(<uri link="http://www.softlab.ntua.gr/unix/docs/sed.txt">7th edition
		UNIX's sed man page</uri> (circa 1978!). Attualmente non funziona più ed
		è stato rimosso dalla documentazione ufficiale. Ma siccome gli autori lo
		hanno sostituito con una meravigliosa dichiarazione d'amore, il
		traduttore si è preso licenza di mantenerlo ugualmente.
  </li></ul>

</body>
</section>
</chapter>

</guide>

