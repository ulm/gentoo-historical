<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/articles/l-awk2.xml,v 1.2 2005/10/31 21:07:10 so Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/it/articles/l-awk2.xml" lang="it" disclaimer="articles">
<title>Awk per esempi, Seconda parte</title>

<author title="Autore">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>

<author title="Traduttore">
	<mail link="luca.martini@gmail.com">Luca Martini</mail>
</author>


<abstract>
Nella puntata successiva alla sua prima introduzione ad awk, Daniel Robbins
continua ad esplorare awk, un grande linguaggio dal nome bizzarro. Daniel vi
mostrerà come gestire record multiriga, come usare i costrutti iterativi, e
come creare ed usare gli array. Alla fine di questo articolo, vi sarà
familiare un'ampio insieme delle funzionalità di awk, e sarete in grado di
scrivere di vostro pugno potenti script awk.
</abstract>

<!-- La versione originale di questo articolo è stata pubblicata da IBM
developerWorks ed è di proprietà di Westtech Information Services. Questo
documento è una versione aggiornata dell'articolo originale, e contiene
numerosi miglioramenti apportati dal Gentoo Linux Documentation team. -->

<version>1.3</version>
<date>2005-10-31</date>

<chapter>
<title>Record, cicli, e array</title>
<section>
<title>Record multiriga</title>
<body>

<p>
Awk è uno strumento efficiente per leggere ed elaborare dati strutturati,
come il file di sistema <path>/etc/passwd</path>. <path>/etc/passwd</path> è
il database degli utenti di un sistema UNIX, ed è un file separato da due
punti (:) che contiene un sacco di informazioni importanti, fra cui tutti gli
account utente e gli user-ID. Nel <uri link="/doc/it/articles/l-awk1.xml">mio
articolo precedente</uri>, vi ho mostrato come fare il parsing di questo
file (dall'inglese <e>to parse</e>, analizzare). Tutto ciò che abbiamo dovuto
fare è modificare il valore della variabile FS (<e>Field Separator</e>,
separatore di campo) al valore ":".
</p>

<p>
Settando correttamente la variabile FS, awk può essere configurato per
effettuare il parsing praticamente di ogni tipo di dato strutturato, a patto
che ci sia un record per linea. Tuttavia, modificare semplicemente il valore
di FS non ci servirà a niente nel caso in cui un record occupi più linee. In
queste situazioni, abbiamo bisogno anche di modificare la variabile RS
(<e>Record Separator</e>, separatore di record). La variabile RS informa awk
della terminazione di un record e dell'inizio del record successivo.
</p>

<p>
Per esempio, diamo un'occhiata a come risolveremmo il problema di gestire una
lista di indirizzi di partecipanti al Programma Nazionale di Protezione dei
Testimoni. 
</p>

<pre caption="Esempio di voci nella lista di indirizzi del Programma Nazionale di Protezione dei Testimoni"> 
Giacomo il Faina
Viale dei Giardini 12 
00100 Roma 

Tonino
Largo Sconosciuto
20027 Spiate (MI)
</pre>

<p>
Idealmente, vorremmo che awk riconoscesse ogni gruppo di tre righe come un
singolo record, piuttosto che come come tre record separati. Il nostro codice
diventerebbe molto più semplice se awk riconoscesse la prima riga
dell'indirizzo come il primo campo ($1), l'indirizzo come secondo campo ($2),
e il codice postale e la città come campo $3. Il seguente codice fa proprio
quello che vogliamo:  
</p>

<pre caption="Creare un campo dall'indirizzo">
BEGIN {
    FS="\n"
    RS=""
}
</pre>

<p>
Sopra settare FS a "\n", informa awk che ogni campo appare su una sua riga.
Settando RS a "", diciamo anche ad awk che ogni record è separato dal
successivo da una linea vuota. Una volta che awk sa come è formattato
l'input, può fare tutto il lavoro di parsing per noi, e la restante parte
dello script è semplice. Vediamo un esempio completo che fa il parsing
dell'elenco di indirizzi e stampa ogni record su un'unica linea, separando i
campi con una virgola.
</p>

<pre caption="Script completo">
BEGIN {
    FS="\n"
    RS=""
}
{ print $1 ", " $2 ", " $3 }
</pre>


<p>
Se questo script viene salvato come <path>indirizzi.awk</path>, e gli
indirizzi sono contenuti in un file chiamato <path>indirizzi.txt</path>,
potete eseguire questo script scrivendo <c>awk -f indirizzi.awk
indirizzi.txt</c>. Questo codice produce il seguente output:
</p>

<pre caption="L'output dello script">
Giacomo il Faina, Viale dei Giardini 12 , 00100 Roma
Tonino, Largo Sconosciuto, 20027 Spiate (MI)
</pre>

</body>
</section>
<section>
<title>Le variabili OFS e ORS</title>
<body>

<p>
Nell'istruzione print di indirizzi.awk, potete notare che awk concatena
(unisce) stringhe che sono poste una di fianco all'altra sulla stessa riga.
Abbiamo usato questo metodo per inserire una virgola e uno spazio (", ") tra
i tre campi che appaiono su una riga. Sebbene questo metodo funzioni, è un
po' brutto da vedere. Invece di inserire la stringa costante ", " tra i
nostri campi, possiamo istruire awk perchè lo faccia per noi, settando la
variabile speciale OFS. Date un'occhiata a questo pezzo di codice:
</p>

<pre caption="Codice di esempio">
print "Hey", "ciao", "Jim!"
</pre>

<p>
Le virgole su questa linea di codice non sono stringhe costanti. Invece
dicono ad awk che "Hey" "ciao" e "Jim!" sono campi (di uscita) distinti e che
il contenuto della variabile OFS deve essere stampato tra ciascuna stringa.
Di default, awk produce il seguente output:
</p>

<pre caption="Output prodotto da awk">
Hey ciao Jim!
</pre>

<p>
Questo ci mostra che, di default, OFS è settata a " ", un singolo carattere
di spaziatura.  Però possiamo facilmente ridefinire OFS in maniera che awk
inserisca il nostro separatore di campo preferito.  Di seguito abbiamo una
versione rivista del nostro programma originale <path>indirizzi.awk</path>
che usa OFS per mandare in uscita come separatore la stringa ", ":
</p>

<pre caption="Ridefinire OFS">
BEGIN {
    FS="\n"
    RS=""
    OFS=", "
}
{ print $1, $2, $3 }
</pre>

<p>
Awk ha anche una variabile speciale chiamata ORS, (<e>output record
separator</e>, separatore dei record in uscita). Settando ORS, che di default
vale il carattere "\n" che crea una nuova linea, possiamo controllare ciò che
viene stampato automaticamente alla fine di un'istruzione di print.  Il
valore di default di ORS fà in modo che awk mandi in uscita ogni istruzione
di print su una linea diversa. Se volessimo un output con interlinea doppia,
dovremmo settare ORS al valore "\n\n". O, se volessimo che i record fossero
separati da un singolo carattere di spaziatura (senza andare a capo),
dovremmo settare ORS al valore " ".
</p>

</body>
</section>
<section>
<title>Dal multiriga alle tabulazioni</title>
<body>

<p>
Ipotizziamo di aver creato uno script che ha convertito il nostro elenco di
indirizzi in un formato con un record per linea, in cui i campi sono
delimitati da tabulazioni. Tutto questo perchè, per esempio, abbiamo bisogno
di importare questi dati in un foglio elettronico. Dopo aver usato una
versione leggermente modificata di <path>indirizzi.awk</path>, sarà diventato
chiaro che il nostro programma funziona solamente per indirizzi su tre righe.
Se awk incontrasse il seguente indirizzo, la quarta linea sarebbe ignorata e
non stampata:
</p>

<pre caption="Esempio di voce">
Cugino Vincenzo
Autorimessa Vincenzo
Via del Biscione, 657
40026 Imola (BO)
</pre>

<p>
Per gestire situazioni come questa, sarebbe meglio che il nostro codice
tenesse in conto il numero di righe per indirizzo, stampando ciascuna riga in
ordine. Adesso, il codice stampa solamente i primi tre campi dell'indirizzo.
Ecco un po' di codice che fa quello che ci serve:
</p>

<pre caption="Codice migliorato">
BEGIN { 
    FS="\n" 
    RS="" 
    ORS="" 
} 
 
{  
    x=1 
    while ( x&lt;NF ) { 
        print $x "\t" 
        x++ 
    } 
    print $NF "\n" 
} 
</pre>

<p>
Prima settiamo il separatore di campo a "\n" e il separatore di record a "",
cosicchè awk analizzi correttamente gli indirizzi su più righe, come prima.
Poi settiamo il separatore di record in uscita ORS a "", in modo da non
mandare in uscita una nuova riga alla fine di un'istruzione di print. Questo
significa che, se vogliamo che il testo sia su una nuova linea, dovremmo
scrivere esplicitamente print "\n".
</p>

<p>
Nel blocco principale, creiamo una variabile di nome x che contiene il numero
del campo che stiamo attualmente processando. All'inizio è settata a 1. Poi
usiamo un ciclo while (un costrutto iterativo identico a quello del C) per
scorrere tutti i campi eccetto l'ultimo, stampando il campo e un carattere
di tabulazione. Alla fine, stampiamo l'ultimo campo e andiamo a capo; ancora
una volta, poichè ORS vale "", print non andrà a capo da solo. L'uscita del
programma somiglierà a questa, proprio come volevamo.
</p>

<pre caption="L'uscita voluta. Non è carina a vedersi ma delimitata da tabulazione per una facile importazione in un foglio elettronico">
Giacomo il Faina	Viale dei Giardini 12 	00100 Roma
Tonino	Largo Sconosciuto	20027 Spiate (MI)
Cugino Vincenzo	Autorimessa Vincenzo	Via del Biscione, 657	40026 Imola (BO)
</pre>

</body>
</section>
<section>
<title>Costrutti iterativi</title>
<body>

<p>
Abbiamo già visto il costrutto per il ciclo while, identico al suo analogo n
C. Awk ha anche un ciclo "do...while" che valuta la condizione alla fine del
blocco di codice iterativo, piuttosto che all'inizio come uno ciclo while
standard. E' simile ai cicli "repeat...until" che si possono trovare in
altri linguaggi. Ecco un esempio.
</p>

<pre caption="Esempio di do...while">
{
    count=1
    do {
        print "In ogni caso vengo stampato almeno una volta" 
    } while ( count != 1 )
}
</pre>

<p>
Siccome la condizione viene valutata dopo il blocco di codice, un ciclo
"do...while", al contrario di un normale ciclo while, viene eseguito almeno
una volta. In altre parole m un ciclo while standard non verrà mai eseguito
se la condizione è falsa la prima volta che il ciclo viene incontrato.
</p>

</body>
</section>
<section>
<title>Cicli for</title>
<body>

<p>
Awk dà la possibilità di creare cicli for che, come i cicli while, sono
identici ai loro analoghi in C:
</p>

<pre caption="Ciclo di esempio">
for ( assegnamento iniziale; confronto; incremento ) {
    blocco di codice
}
</pre>

<p>
Ecco un esempio veloce:
</p>

<pre caption="Esempio veloce">
for ( x = 1; x &lt;= 4; x++ ) {
    print "iterazione",x
}
</pre>

<p>
Questo pezzetto di codice stamperà:
</p>

<pre caption="Output del pezzetto di codice sopra">
iterazione 1
iterazione 2
iterazione 3
iterazione 4
</pre>

</body>
</section>
<section>
<title>Break e continue</title>
<body>

<p>
Ancora una volta, proprio come il C, awk ci fornisce istruzioni di break e
continue, Queste istruzioni ci permettono di avere un miglior controllo sui
vari costrutti iterativi. Ecco un pezzetto di codice che ha un bisogno
disperato di un'istruzione di break.
</p>

<pre caption="Pezzetto di codice che ha bisogno di un break">
while (1) {
    print "Sempre e per sempre..."
}
</pre>

<p>
Siccome 1 è sempre una condizione vera, questo ciclo eseguirà
all'infinito. Ecco un ciclo che farà solo 10 iterazioni:
</p>

<pre caption="Ciclo che viene eseguito solo 10 volte">
x=1
while(1) {
    print "iterazione",x
    if ( x == 10 ) {
        break
    }
    x++
}
</pre>

<p>
Qui, l'istruzione di break è usata per rompere il ciclo più interno. "break"
farà terminare il ciclo immediatamente e farà continuare l'esecuzione
dall'istruzione successiva al codice del ciclo.
</p>

<p>
l'istruzione continue fa da complemento al break e funziona in questo modo:
</p>

<pre caption="L'istruzione continue è duale al break">
x=1
while (1) {
    if ( x == 4 ) {
        x++
        continue
    }
    print "iterazione",x
    if ( x > 20 ) {
        break
    }
    x++
}
</pre>

<p>
Questo codice stamperà "iterazione 1", "iterazione 2", ... fino a "iterazione
21", eccetto "iterazione 4". Infatti, quando x vale 4, esso viene
incrementato e si esegue l'istruzione continue che fa iniziare una nuova
iterazione senza eseguire il resto del blocco while. L'istruzione continue
funziona, come la break, con ogni tipo di costrutto iterativo di awk. Quando
è usata nel corpo di un ciclo for, continue fa sì che la variabile di
controllo del loop sia automaticamente incrementata. Ecco un ciclo for
equivalente:
</p>

<pre caption="Ciclo for equivalente">
for ( x=1; x&lt;=21; x++ ) {
    if ( x == 4 ) {
        continue
    }
    print "iterazione",x
}
</pre>

<p>
Non è stato necessario incrementare x prima di chiamare continue come avevamo
fatto con il ciclo while, poichè il for incrementa automaticamente x.
</p>

</body>
</section>
<section>
<title>Gli array</title>
<body>

<p>
Sarete felici di sapere che awk anche supporto per gli array. Però, in awk,
gli indici degli array partono da 1 e non da zero: 
</p>

<pre caption="Esempio di array in awk">
myarray[1]="jim"
myarray[2]=456
</pre>

<p>
Quando awk incontra il primo assegnamento, viene creato l'array myarray e
l'elemento myarray[1] viene settato alla stringa "jim". Dopo che il secondo
assegnamento viene valutato, l'array ha due elementi.
</p>

<p>
Una volta definito un array, ci fornisce un utile  meccanismo per scorrerne
gli elementi, come potete vedere nel codice seguente:
</p>

<pre caption="Scorrere tutti gli elementi di un array">
for ( x in myarray ) {
    print myarray[x]
}
</pre>

<p>
Questo codice stamperà ogni elemento dell'array myarray. In questo speciale
tipo di for, usando la parola chiave "in", awk assegnerà ogni indice
esistente dell'array myarray a x (la variabile di controllo del ciclo),
eseguendo il corpo del for dopo ogni assegnamento. Sebbene questa sia una
caratteristica molto utile di awk, soffre di uno svantaggio: quando awk
scorre l'array, non segue un ordine particolare. Questo significa che non c'è
modo di sapere se l'output del codice visto sopra sarà:
</p>

<pre caption="Output del codice visto sopra">
jim
456
</pre>

<p>
o
</p>

<pre caption="Altro possibile output del codice visto sopra">
456
jim
</pre>

<p>
Per parafrasare liberamente Forrest Gump, scorrere il contenuto di un array è
come una scatola di cioccolatini: non sai mai cosa puoi trovare. Questo ha in
qualche modo a che fare con la "stringosità" degli array awk, che adesso
vedremo.
</p>

</body>
</section>
<section>
<title>La stringosità degli indici degli array</title>
<body>

<p>
<uri link="/doc/it/articles/l-awk1.xml">Nel mio articolo precedente</uri>, vi
ho mostrato che awk in realtà memorizza i valori numerici sotto forma di
stringhe. Mentre awk realizza le operazioni di conversione necessarie a far
funzionare il tutto, questo lascia la possibilità di scrivere del codice un
po' strano:
</p>

<pre caption="Codice strano">
a="1"
b="2"
c=a+b+3
</pre>

<p>
Dopo l'esecuzione di questo codice, c vale 6. Poichè awk è "stringoso",
sommare le due stringhe "1" e "2" è funzionalmente uguale a sommare i numeri
1 e 2. In entrambi i casi, awk realizzerà correttamente l'operazione. La
natura "stringosa" di awk è discretamente intrigante; vi potete chiedere che
cosa succede se usate delle stringhe come indici di array. Per esempio,
prendete il seguente codice:
</p>

<pre caption="Codice di esempio">
myarr["1"]="Sig. Rossi"
print myarr["1"]
</pre>

<p>
Come vi potete aspettare, questo codice stamperà "Sig. Rossi". Ma cosa
succede se togliamo le virgolette dal secondo indice "1"?
</p>

<pre caption="Senza le virgolette">
myarr["1"]="Sig. Rossi"
print myarr[1]
</pre>


<p>
Ipotizzare il risultato di questo pezzo di codice è più difficile. Awk
considera myarr["1"] e myarr[1] come due elementi separati dell'array oppure
no? La risposta è che si riferiscono allo stesso elemento e stamperanno "Sig.
Rossi" come nel primo pezzo di codice. Sebbene possa sembrare strano, dietro
le quinte awk ha sempre usato indici stringa per i suoi array.
</p>

<p>
Dopo aver imparato ciò, alcuni di voi potrebbero essere tentati di eseguire
del codice strambo come questo:
</p>

<pre caption="Codice strambo">
myarr["nome"]="Sig. Rossi"
print myarr["nome"]
</pre>

<p>
non solo questo codice non genera errori, ma è funzionalmente identico al
nostro esempio precedente, e stamperà "Sig. Rossi" proprio come prima! Come
potete vedere awk non ci costringe ad usare come indici solo variabili
intere; possiamo usare indici stringa se vogliamo, senza creare alcun
problema. Ogni volta che usiamo indici non numerici come myarr["nome"],
stiamo usando <e>array associativi</e>. Tecnicamente, dietro le quinte awk
non fa niente di diverso quando usiamo un indice stringa (poichè anche se
usiamo un indice intero, awk lo tratta sempre come una stringa). Ad ogni modo
potete sempre chiamarli array associativi; sembrerà <e>fico</e> e farà
impressione sul vostro capo. Questa cosa della stringosità degli indici sarà
il nostro piccolo segreto. ;) 
</p>

</body>
</section>
<section>
<title>Strumenti per gli array</title>
<body>

<p>
Parlando di array, awk ci dà un sacco di flessibilità. Possiamo usare indici
stringa e non siamo obbligati a rispettare una sequenza numerica continua per
gli indici (per esempio, possiamo definire myarr[1] e myarr[1000], ma
lasciare gli altri elementi non definiti). Anche se questo può essere molto
utile, in qualche circostanza può creare confusione. Fortunatamente, awk ci
offre un paio di utili funzionalità per rendere gli array più maneggevoli.
</p>

<p>
Primo, possiamo cancellare gli elementi di un array. Se volete cancellare
l'elemento 1 del vostro array fooarray, scrivete:
</p>

<pre caption="Cancellare elementi di un array">
delete fooarray[1]
</pre>

<p>
E, se volete vedere se un particolare elemento di un array esiste, potete
usare lo speciale operatore booleano "in" come nell'esempio seguente:
</p>

<pre caption="Controllare se esiste un particolare elemento di un array">
if ( 1 in fooarray ) {
    print "Sì!  C'è."
} else {
    print "No!  Non lo trovo."
}
</pre>

</body>
</section>
<section>
<title>La prossima volta</title>
<body>

<p>
Abbiamo scoperto un bel po' di cose in questo articolo. La prossima volta
affinerò la vostra conoscenza di awk mostrandovi come usare le funzioni
matematiche e sulle stringhe e insegnandovi a creare delle vostre funzioni. Vi
mostrerò anche la creazione di un programma per la contabilità. Per intanto vi
incoraggio a scrivere qualche programma da soli e a controllare i seguenti
riferimenti:
</p>

</body>
</section>
</chapter>

<chapter>
<title>Risorse</title>
<section>
<title>Link utili</title>
<body>

<ul>
  <li>
    Leggi gli altri articoli di Daniel su developerWorks: Awk
    per esempi <uri link="l-awk2.xml">Parte prima</uri> e <uri
    link="l-awk3.xml">Parte terza</uri>.
  </li>
  <li>
    Se ti piacciono i buoni vecchi libri di una volta, <uri
    link="http://www.oreilly.com/catalog/sed2/">sed &amp; awk, 2nd
    Edition</uri> delle edizioni O'Reilly, è una scelta perfetta.
  </li>
  <li>
    Ricordatevi di dare un'occhiata alla <uri
    link="http://www.faqs.org/faqs/computer-lang/awk/faq/">FAQ di
    comp.lang.awk</uri>. Contiene un sacco di altri link a risorse su awk.
  </li>
  <li>
    Il <uri link="http://sparky.rice.edu/~hartigan/awk.html">tutorial su
    awk</uri> di Patrick Hartigan's è pieno di utili script.  
  </li>
  <li>
    <uri link="http://www.tasoft.com/tawk.html">Thompson's TAWK Compiler</uri>
    compila script awk in veloci binari eseguibili. Ne sono disponibili versioni
    per Windows, OS/2, DOS, e UNIX.
  </li>
  <li>
    La <uri link="http://www.gnu.org/software/gawk/manual/gawk.html">GNU Awk
    User's Guide</uri> è disponibile online.
  </li>
</ul>

</body>
</section>
</chapter>

</guide>


<!--  LocalWords:  awk
 -->
