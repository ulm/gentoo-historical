<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/articles/l-redesign-4.xml,v 1.2 2012/02/26 08:33:40 swift Exp $ -->

<guide disclaimer="articles" lang="it">
<title>Riprogettare gentoo.org, Parte 4: la rinascita di un sito web</title>

<author title="Author">
<mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>

<author title="Traduttore">
<mail link="canduc17@tiscalinet.it">Alessandro Candini</mail>
</author>

<abstract>
Vi siete mai svegliati una mattina rendendovi conto che il vostro piccolo e
grazioso sito Web personale, non fosse poi un gran che? Se è così, siete in
buona compagnia. In questa serie di articoli, Daniel Robbins condivide le sue
esperienze con XML, XSLT e Python, usati per riprogettare il sito Web di Gentoo
Linux. In questo articolo: Daniel completa la conversione ad XML/XSLT, sistema
moltissimi bug di compatibilità con il browser Netscape 4.x ed aggiunge al sito
un Changelog auto-generato.
</abstract>

<!-- La versione originale di questo articolo è stata pubblicata da IBM
developerWorks ed è di proprietà di Westtech Information Services. Questo
documento è una versione aggiornata dell'articolo originale, e contiene
numerosi miglioramenti apportati dal Gentoo Linux Documentation team. -->

<version>1.1</version>
<date>2005-10-10</date>

<chapter>
<title>Il tocco finale</title>
<section>
<title>Un nuovo look, ma...</title>
<body>

<p>
Alla fine dell'articolo precedente, il sito Web di Gentoo Linux aveva un aspetto
completamente nuovo, ma c'era ancora qualche cosa incompleta. In questo
articolo, l'ultima puntata della serie, faccio gli ultimi ritocchi, ottenendo un
sito pienamente funzionale che guarda al futuro, rifinito e modulare grazie
all'XML su cui si basa. Ecco cosa mancava al sito nel precedente articolo:
</p>

</body>
</section>
<section>
<title>Faccende in sospeso</title>
<body>

<p>
Per cominciare, sebbene tutto il sito abbia guadagnato un nuovo look, solo la
parte relativa alla documentazione é attualmente basata su XML. Le pagine
"indicizzate" più importanti, sono ancora in HTML grezzo e necessitano di essere
trasformate in una soluzione XML/XSLT per rendere il tutto più manutenibile ed
espandibile.
</p>

<p>
Inoltre, i miei sviluppatori hanno trovato diversi problemi nello stesso HTML
grezzo. Il sito risulta particolarmente brutto, se visualizzato con Netscape
4.77 -- che è ovviamente un problema. Inoltre ci sono altri piccoli problemi di
visualizzazione che compaiono in diversi browser moderni, il più fastidioso dei
quali consiste in una sottile linea nera verticale che non si estende
completamente per tutta la lunghezza della pagina, rovinando l'illusione che
l'area principale per i contenuti venga "raccontata" dal nostro "omino-antenna
volante". In più, le pagine di documentazione non si adattano perfettamente
all'aspetto ridefinito delle nuove pagine principali indicizzate -- diverse cose
necessitano chiaramente di un aggiornamento.
</p>

</body>
</section>
<section>
<title>L'obiettivo</title>
<body>

<p>
Ecco il piano per il completo rifacimento del sito di Gentoo Linux. Come prima
cosa, rielaboreremo totalmente la pagina HTML principale, mantenendo inalterato
l'aspetto originale, rendendo però la pagina più browser-compatibile.
Contemporaneamente aggiungeremo qualche rifinitura legata alla presentazione
suggeritaci dai visitatori e rimedieremo a problemi di compatibilità tra
browser ed il nostro sistema di documentazione.
</p>

<p>
In seguito, convertiremo completamente il sito in XML ed XSLT. Alla fine di
questo articolo, ogni modifica fatta al sito avverrà modificando l'XML o l'XSLT
piuttosto che modificando direttamente l'HTML, che ora verrà generato
automaticamente con l'aiuto di xsltproc. Ciò renderà l'intero sito più facile da
manutenere. Poiché Gentoo Linux è un progetto sviluppato da una comunità, ciò
permetterà a sua volta agli sviluppatori (e a me) di manutenere e migliorare il
sito quando fosse necessario. Sono molto soddisfatto da questo approccio, poiché
ci farà risparmiare un sacco di tempo ed assicurerà che i visitatori vengano
accolti con contenuti sempre aggiornati.
</p>

</body>
</section>
<section>
<title>Problemi di compatibilità</title>
<body>

<p>
Nonostante Netscape 4.x sia tuttora un browser largamente usato, mi risulta
difficile decidere esattamente quanto lavoro extra debba fare per rendere
migliore l'aspetto del sito se visitato con esso. Dovrei solamente assicurare
che il sito sia leggibile (senza altri inconvenienti maggiori) o dovrei fare
tutto quello che posso per essere sicuro che l'aspetto del sito sia
assolutamente perfetto sotto Netscape 4.x, anche se ciò comportasse una
riduzione o l'eliminazione dell'uso dei CSS, aggiungendo strani hack di
compatibilità all'HTML esistente?
</p>

<p>
Alla fine, ho deciso di fare diversi importanti cambiamenti all'HTML in modo che
il sito continuasse ad avere un buon aspetto anche sotto Netscape 4.x, senza
concentrarmi troppo su problemi minori come la spazialità delle tabelle o la
resa dei caratteri. Ecco alcuni dei cambiamenti fatti all'HTML del sito per
avere tutto 4.x compatibile. (La squadra di sviluppo di Gentoo Linux ha fornito
svariate correzioni).
</p>

<p>
Come prima cosa, Netscape 4.x ha un bug per cui i colori di sfondo impostati
nei CSS per gli elementi blocco, non vengono visualizzati correttamente. Ad
esempio, ecco come dovrebbe essere visualizzata una porzione di una guida:
</p>

<figure link="/images/docs/l-redesign-07.gif" caption="Un esempio di guida in
IE5"/>

<p>
Ed ecco come Netscape 4.x rappresenta la stessa porzione quando i colori di
sfondo vengono specificati tramite i CSS:
</p>

<figure link="/images/docs/l-redesign-08.gif" caption="Un esempio di guida in
Netscape 4.7; c'è bisogno di qualche aggiustamento"/>

<p>
E' veramente brutto. Per sistemarlo, gli elementi blocco come questo...
</p>

<pre caption="Paragrafo d'esempio">
&lt;p class="note"&gt;Questo paragrafo non è visualizzato correttamente in Netscape 4.x&lt;/p&gt;
</pre>

<p>
...verranno rimpiazzati con delle tabelle:
</p>

<pre caption="Tabella d'esempio">
&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;
    &lt;tr&gt;
          &lt;td bgcolor="#ddffff"&gt;&lt;p class="note"&gt;
          Questo ha un aspetto decisamente migliore in Netscape 4.x&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</pre>

<p>
Questo trucco risolve il problema della visualizzazione degli sfondi. Ma questo
"aggiustamento" necessita anche che l'informazione sul colore venga inclusa
nell'HTML, cosa che annulla i vantaggi di usare i CSS. La situazione è
poco felice, specialmente per i fan dei CSS come me, ma è necessaria per la
compatibilità con Netscape 4.x.
</p>

</body>
</section>
<section>
<title>Ricostruire l'HTML</title>
<body>

<p>
Ora dobbiamo occuparci della linea verticale nera che non si estende per tutta
la lunghezza della pagina. Non sono riuscito a trovare una soluzione del
problema che funzionasse sia nel browser 4.x che nel 5.x; ogni versione per la
5.x provoca problemi in Netscape 4.x ed ogni versione 4.x compatibile appare
orribile in un browser 5.x. Perciò ho semplicemente deciso di rimuovere
in toto la linea nera: alla fine il sito funziona in tutti i browser più
popolari. Nel seguito creerò una sintassi-guida per produrre le pagine
principali.
</p>

</body>
</section>
<section>
<title>Affrontare l'XML</title>
<body>

<p>
Invece di implementare un insieme di tag completamente nuovo per la pagina
principale, penso che sarebbe una buona idea cercare di utilizzare il più
possibile i tag delle pagine XML "guida" (leggete la Parte 2 di questa serie per
saperne di più sul formato XML delle guide). Perciò, ho creato qualche nuovo
XSL, utilizzando la mia guida XSL come modello. Dopo un'ora o due,
ho ottenuto un insieme completamente funzionale di trasformazioni XSL per
trasformare una sintassi adatta ad una guida, in una pagina HTML principale. La
seconda revisione della nuova pagina principale appare così:
</p>

<figure link="/images/docs/l-redesign-09.gif" caption="La revisione della nuova
pagina principale"/>

<p>
Ora che la pagina principale utilizza un nuovo backend XML/XSLT, ho rivolto
l'attenzione al sistema di output HTML delle "guide". Non solo devo risolvere
un problema di compatibilità di Netscape 4.7, ma devo anche aggiornare l'HTML e
la grafica generati in modo che stiano bene assieme a quelli che ho modificato
nella pagina principale. Poi mi è venuta un'idea: perché non fare solo delle
leggere modifiche all'XML/XSLT della nuova pagina principale, in modo da poter
generare anche l'HTML per la documentazione? Dopo tutto, ho aggiunto solamente
il supporto per quasi ogni tag XML delle "guide", quindi questi possono essere
usati anche per il contenuto della pagina principale.
</p>

<p>
Questa soluzione si è rivelata molto facile da implementare. Mi sono limitato a
modificare il nuovo file XSLT così che rimuovesse la "barra dei link" a sinistra
e producesse altri cambiamenti minori all'HTML in output durante il
processamento delle pagine di documentazione. Poiché la maggior parte dell'XSLT
è lo stesso, posso utilizzare un solo insieme di modelli XSLT sia per le guide
che per le pagine indicizzate:
</p>

<figure link="/images/docs/l-redesign-10.gif" caption="Come funziona il nuovo
XSL"/>

<p>
Ora, non solo ho un unico insieme di modelli XSLT da manutenere, ma poiché
entrambe le visualizzazioni dell'HTML sono basate sullo stesso documento
cardine, esse condividono anche lo stesso CSS. Ciò significa che non c'è più la
necessità di "sincronizzare l'aspetto" tra due diversi insiemi di fogli di stile
ed output HTML. Come potete vedere, il nuovo HTML per la documentazione si
intona perfettamente alla nuova pagina principale:
</p>

<figure link="/images/docs/l-redesign-11.gif" caption="Le nuove pagine per la
documentazione sono in perfetta sintonia con la pagina principale"/>

</body>
</section>
<section>
<title>L'implementazione dell'XML</title>
<body>

<p>
L'attuale implementazione è abbastanza semplice, la sintassi XML esistente per
le guide richiede che ogni documento sia una parte di un unico elemento
principale &lt;guide&gt;. Per aggiungere il supporto alle pagine indicizzate, ho
creato un nuovo elemento principale: &lt;mainpage&gt;. Per creare una pagina
principale indicizzata, ho posizionato tutto dentro ad un elemento
&lt;mainpage&gt; invece che ad un elemento &lt;guide&gt; ed è stato l'XSLT a
preoccuparsi delle differenze appropriate per l'output. Oltre a questo, la
maggior modifica richiesta è stata l'aggiunta di un elemento opzionale
&lt;sidebar&gt; che viene utilizzato per specificare i contenuti della tabella
flottante in una pagina indicizzata principale. Il modello XSLT &lt;guide&gt;
esistente è qualcosa di simile a questo:
</p>

<pre caption="Modello XSLT">
&lt;xsl:template match="/guide"&gt;
    &lt;html&gt;
        &lt;head&gt;
            l'intestazione della guida va qui
        &lt;/head&gt;
        &lt;body&gt;
            la parte superiore del body HTML della guida va qui
&lt;!--nel seguito, inseriamo i nostri contenuti--&gt;
        &lt;xsl:apply-templates select="chapter" /&gt;
        la parte inferiore del body HTML della guida va qui
        &lt;/body&gt;
    &lt;/html&gt;
&lt;/xsl:template&gt;
</pre>

<p>
Se non hai familiarità con l'XSLT, questo modello dice ad un processore XSLT di
sostituire i tag &lt;guide&gt; &lt;/guide&gt; con la struttura di un documento
HTML e di applicare ricorsivamente i modelli ad ogni elemento &lt;chapter&gt;
(aprendo/chiudendo le coppie di tag) all'interno dell'elemento &lt;guide&gt;,
inserendo infine l'output risultante al centro della struttura HTML.
</p>

<p>
Quindi, per aggiungere supporto alle pagine principali indicizzate, devo
specificare che dovrebbe essere usata una struttura HTML diversa se viene
incluso tutto in un singolo elemento &lt;mainpage&gt;. Per fare ciò, aggiungo un
nuovo modello, come segue:
</p>

<pre caption="Il nuovo modello">
&lt;xsl:template match="/mainpage"&gt;
    &lt;html&gt;
        &lt;head&gt;
            l'intestazione della pagina principale va qui
        &lt;/head&gt;
        &lt;body&gt;
            la parte superiore del body HTML della pagina principale va qui
&lt;!--next, we insert our content--&gt;
            &lt;xsl:apply-templates select="chapter" /&gt;
            la parte inferiore del body HTML della pagina principale va qui
        &lt;/body&gt;
    &lt;/html&gt;
&lt;/xsl:template&gt;
</pre>

<p>
Poiché quasi ogni altro elemento XML (da &lt;chapter&gt; in giù) produce un
output HTML identico sia per le pagine guida che per quelle indicizzate, quasi
ogni altro modello XSLT può essere condiviso da entrambi i tipi di pagina.
Perciò possiamo farcela con un unico file XSLT che specifica due "strutture
HTML" ed un insieme comune di modelli XSLT che convertono l'XML in HTML. Come
sempre, il riutilizzo del codice è senz'altro una buona cosa.
</p>

</body>
</section>
<section>
<title>La pagina di Changelog</title>
<body>

<p>
Vi ricorderete che nella Parte 2 di questa serie avevo detto che lo script di
generazione del Changelog CVS, cvs2cl.pl, avrebbe prodotto output XML e che
avrei eventualmente usato questa caratteristica come base per una pagina
quotidiana di Changelog CVS, che sarebbe apparsa sul nuovo sito Web. Ora, avendo
pronta la nuova struttura XML, aggiungere la nuova pagina di Changelog è un
gioco da ragazzi. Ecco una versione migliorata dello script
<path>cvslog.sh</path> che si preoccupa anche di gestire la conversione da XML
ad HTML:
</p>

<pre caption="Versione migliorata dello script cvslog.sh">
#!/bin/bash
#percorsi vari
HOMEDIR=/home/drobbins
CVSDIR=${HOMEDIR}/gentoo/gentoo-x86
OUTLOG=${HOMEDIR}/gentoo/xmlcvslog.txt
OUTMAIL=${HOMEDIR}/gentoo/cvslog.txt
WEBDIR=/usr/local/httpd/htdocs
XSLTP=/opt/gnome/bin/xsltproc
TMPFILE=${HOMEDIR}/gentoo/xmlcvslog.tmp
USER=drobbins
#se $CVSMAIL non è definito, impostalo a "yes"
if [ -z "$CVSMAIL" ]
then
    export CVSMAIL="yes"
fi
#lo script principale
cd $CVSDIR
cvs -q update -dP
yesterday=`date -d "1 day ago 00:00" -R`
today=`date -d "00:00" -R`
cvsdate=-d\'${yesterday}\&lt;${today}\'
nicedate=`date -d yesterday +"%d %b %Y %Z (%z)"`
#genera l'output XML tramite cvs2cl.pl
/usr/bin/cvs2cl.pl --xml -f $OUTLOG -l "${cvsdate}"
#utilizza sed per rimuovere "xmlns=" dall'output di cvs2cl.pl
/usr/bin/sed -e 's/xmlns=".*"//' $OUTLOG > ${OUTLOG}.2
#converte l'output XML di cvs2cl.pl al formato della guida usando $XLSTP
$XSLTP ${WEBDIR}/xsl/cvs.xsl ${OUTLOG}.2 > $TMPFILE
#converte in HTML l'output XML della guida usando $XLSTP
$XSLTP ${WEBDIR}/xsl/guide-main.xsl
$TMPFILE > ${WEBDIR}/index-changelog.html
#sistema i permessi
chmod 0644 ${WEBDIR}/index-changelog.html
#spedisce automaticamente una cvs mail se $CVSMAIL è settato a "yes"
if [ "$CVSMAIL" = "yes" ]
then
    /usr/bin/cvs2cl.pl -f ${OUTMAIL} -l "${cvsdate}"
    mutt -x gentoo-cvs -s "cvs log for $nicedate" > ${OUTMAIL}
fi</pre>

<p>
Sebbene questo script possa sembrare più complicato della versione precedente,
esso contiene solamente quattro o cinque linee chiave in più; le altre aggiunte
sono o commenti o definizioni di variabili.
</p>

<p>
Ecco come funzionano le nuove parti legate all'XML dello script cvslog.sh. Come
prima cosa, chiamiamo cvs2cl.pl e gli facciamo generare un Changelog basato su
XML che contiene tutti i file modificati ieri. Poi, questo output XML viene
analizzato tramite sed per rimuovere tutti gli attributi xmlns= dall'XML. In
seguito trasferiamo questo XML lievemente modificato all'xsltproc e gli diciamo
di applicare il processamento trovato in cvs.xsl; queste istruzioni trasformano
l'output XML da quello di cvs2cl.pl in un corretto documento guida XML. Infine,
useremo di nuovo xsltproc per convertire questa guida in un HTML pronto per il
Web, il quale viene spedito alla directory htdocs del nostro Web server. La
pagina HTML di Changelog generata è completa e questo è il risultato:
</p>

<figure link="/images/docs/l-redesign-12.gif" caption="La pagina di Changelog
generata automaticamente"/>

<p>
Potreste rimanere sorpresi dalla semplicità dell'XSLT contenuto in cvs.xsl. Al
suo interno, specifichiamo tre modelli per &lt;changelog&gt;, &lt;entry&gt;, e
&lt;file&gt;. Creiamo anche dei riferimenti a qualche altro tag nel sorgente
XML, come &lt;date&gt;, &lt;author&gt;, e &lt;msg&gt; (che cvs2cl.pl utilizza
per specificare i commenti del committente CVS). cvs.xsl fa un bel po' di cose,
considerando che è costituito solamente da circa 35 righe:
</p>

<pre caption="Il file cvs.xsl">
&lt;?xml version='1.0' encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
&lt;xsl:output encoding="iso-8859-1" method="xml" indent="yes"/&gt;
&lt;xsl:template match="/changelog"&gt;
    &lt;mainpage id="changelog"&gt;
    &lt;title&gt;Changelog dello Sviluppo Gentoo Linux per &lt;xsl:value-of select="entry/date"/&gt;&lt;/title&gt;
    &lt;author title="script"&gt;cvs-xml.xsl&lt;/author&gt;
    &lt;standout&gt;
        &lt;title&gt;Riguardo il Changelog dello Sviluppo&lt;/title&gt;
        &lt;body&gt;
            Questa pagina contiene un Changelog quotidiano che elenca tutte le modifiche
            apportate al nostro albero CVS del &lt;xsl:value-of select="entry/date"/&gt; (ieri).
        &lt;/body&gt;
    &lt;/standout&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;date&gt;&lt;xsl:value-of select="entry/date"/&gt;&lt;/date&gt;
    &lt;chapter&gt;
        &lt;xsl:apply-templates select="entry"/&gt;
    &lt;/chapter&gt;
    &lt;/mainpage&gt;
&lt;/xsl:template&gt;
&lt;xsl:template match="entry"&gt;
    &lt;section&gt;
        &lt;title&gt;Files modified by &lt;xsl:value-of select="author"/&gt; at
                                       &lt;xsl:value-of select="time"/&gt;
        &lt;/title&gt;
        &lt;body&gt;
            &lt;note&gt;&lt;xsl:value-of select="msg"/&gt;&lt;/note&gt;
            &lt;ul&gt;
                &lt;xsl:apply-templates select="file"/&gt;
            &lt;/ul&gt;
        &lt;/body&gt;
    &lt;/section&gt;
&lt;/xsl:template&gt;
&lt;xsl:template match="file"&gt;
    &lt;li&gt;&lt;path&gt;&lt;xsl:value-of select="name"/&gt;&lt;/path&gt;, &lt;xsl:value-of select="revision"/&gt;&lt;/li&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre>

</body>
</section>
<section>
<title>Progetto completato!</title>
<body>

<p>
Dall'inizio della riprogettazione del sito Web di Gentoo Linux, abbiamo creato
un piano d'azione user-centrico, progettato un nuovo sistema di documentazione
basato su XML, un nuovo logo, un nuovo aspetto per il sito, convertito tutte le
parti rimanenti in XML ed aggiunta una nuova pagina di Changelog basata su XML.
Uff! Spero vi siate divertiti seguendo il mio percorso e che abbiate trovato
diverse idee ed ispirazioni durante la lettura. Ho ricevuto diverse richieste
di ulteriori informazioni ed altro codice legati a questa riprogettazione,
così ho creato una pagina dei <uri
link="http://www.gentoo.org/proj/it/site.xml">Progetti XML Gentoo Linux</uri>
che contiene gli XML, XSLT, script e la documentazione utilizzati per
www.gentoo.org. Oltre a visitare la pagina dei Progetti, date un'occhiata alle
preziose risorse elencate qua sotto.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Risorse</title>
<section>
<body>

<ul>
  <li>
    Date un'occhiata alla pagina dei <uri
    link="http://www.gentoo.org/proj/it/site.xml">Progetti XML Gentoo
    Linux</uri> se siete interessati ad utilizzare la guida Gentoo Linux ad un
    sistema XML come base per i vostri progetti. Qui si possono trovare tutte le
    ultime cose su XML/XSLT.
  </li>
  <li>
    Leggete gli altri articoli di questa serie devloperWorks sulla
    riprogettazione del sito Web www.gentoo.org grazie a tecnologie come XML,
    XSLT e Python:
    <ul>
      <li>
        Nella <uri link="/doc/it/articles/l-redesign-1.xml">Parte 1</uri>,
        l'autore crea un piano d'azione user-centrico ed introduce pytext, un
        interprete Python embedded (Marzo 2001).
      </li>
      <li>
        Nella <uri link="/doc/it/articles/l-redesign-2.xml">Parte 2</uri>,
        Daniel sfoggia il nuovo sistema per la documentazione ed allestisce una
        mailing list quotidiana basata su log CVS (Maggio 2001).
      </li>
      <li>
        Nella <uri link="/doc/it/articles/l-redesign-3.xml">Parte 3</uri>,
        Daniel crea un nuovo look per il sito (Luglio 2001).
      </li>
    </ul>
  </li>
  <li>
    Impara di più sui fogli di stile a cascata (CSS, Cascading Style Sheets)
    visitando la <uri link="http://www.w3.org/Style/CSS/">pagina sui CSS</uri>
    del World Wide Web Consortium (W3C). Qui puoi trovare anche altre
    informazioni su <uri link="http://www.w3.org/XML">XML</uri>, <uri
    link="http://www.w3.org/TR/xslt">XSLT</uri> e molte altre tecnologie.
  </li>
  <li>
    Dai un'occhiata a <uri link="http://www.xara.com/">Xara.com</uri>, il sito
    di Xara X -- un ottimo programma di disegno vettoriale per Windows. Snello e
    di una velocità incredibile, ha la mia personale raccomandazione.
  </li>
  <li>Impara ancora più cose di XSLT su <uri>http://www.xslt.com</uri></li>
  <li>
    Quando ti riprendi, dai un'occhiata a Sablotron, un buon processore XSLT,
    veloce e reperibile su <uri link="http://www.gingerall.com/">Ginger
    Alliance</uri>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
