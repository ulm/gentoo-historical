<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/articles/bash-by-example-p1.xml,v 1.2 2007/05/16 23:12:09 scen Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/it/articles/bash-by-example-p1.xml" lang="it" disclaimer="articles">
<title>Bash per esempi, Parte 1</title>

<author title="Autore">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traduzione">
  <mail link="cristiano.chiucchiolo@gmail.com">Cristiano Chiucchiolo</mail>
</author>

<abstract>
Imparando come programmare nel linguaggio di scripting bash, la vostra interazione giornaliera con Linux diventerà più divertente e produttiva, e sarete in grado di costruire, con questi standard, costrutti UNIX (come pipelines e redirezioni) che già conoscete e amate. In questa guida di tre parti, Daniel Robbins vi insegnerà come programmare in bash attraverso degli esempi. Egli tratterà le basi più elementari (rendendo questa guida eccellente per i principianti), ma anche le funzioni più avanzate, man mano che si andrà avanti.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.3</version>
<date>2005-10-09</date>

<chapter>
<title>Fondamenti di programmazione nella Bourne again shell (bash)</title>
<section>
<title>Introduzione</title>
<body>

<p>
Forse vi chiederete per quale motivo dovreste imparare a programmare in Bash. Bè, ecco un paio di ragioni.
</p>

</body>
</section>
<section>
<title>La state già eseguendo</title>
<body>

<p>
se controllate, probabilmente scoprirete che in questo momento state eseguendo bash. Anche se avete cambiato la vostra shell di default, probabilmente bash sta ancora girando da qualche parte sul vostro sistema, dato che è la shell standard di Linux ed è usata per una grande varietà di scopi. Visto che bash sta già girando, ogni script bash aggiuntivo che eseguite sarà di conseguenza efficiente riguardo all'utilizzo di memoria, dato che condividerà la memoria con tutti gli altri processi bash già attivi. Perché caricare un interprete di 500K quando avete qualcosa già in esecuzione che fa lo stesso lavoro, e lo fa bene?
</p>

</body>
</section>
<section>
<title>La state già usando</title>
<body>

<p>
Non solo state già eseguendo bash, ma in realtà interagite quotidianamente con essa. Bash è sempre lì, quindi vale la pena imparare ad usarla sfruttandone appieno le potenzialità. Fare ciò renderà la vostra esperienza con bash più divertente e produttiva. Ma per quale motivo dovreste imparare a programmare in bash? Semplice: perché già pensate in termini di eseguire comandi, CPare file, effettuare il piping e redirezionare un output. Non dovreste imparare un linguaggio che vi consenta di utilizzare questi potenti costrutti, che vi fanno risparmiare tempo e che già sapete utilizzare? Le shell di comando liberano il potenziale di un sistema UNIX, e bash è la shell di Linux. È il collegamento ad alto livello tra voi e la macchina. Aumentate la vostra conoscenza di bash, e aumenterete automaticamente la vostra produttività in Linux e UNIX: è così semplice!
</p>

</body>
</section>
<section>
<title>Confusione bash</title>
<body>

<p>
Imparare bash in maniera sbagliata può creare grande confusione. Molti newbies digitano <c>man bash</c> per vedere la man page di bash, trovandosi davanti solo una descrizione stringata e molto tecnica delle funzionalità della shell. Altri digitano <c>info bash</c> (per vedere la documentazione GNU), ma o viene visualizzata la stessa man page, oppure (se sono fortunati) appare loro una documentazione non molto più amichevole.
</p>

<p>
Mentre questo potrebbe essere in qualche modo disorientante per i novizi, la documentazione standard di bash non può dare tutto a tutti, e si concentra verso chi ha già familiarità con la programmazione della shell in generale. Ci sono sicuramente un sacco di eccellenti informazioni tecniche nella man page, ma la loro utilità per i principianti è limitata.
</p>

<p>
Ecco che entra in scena questa guida. In essa, vi mostrerò come utilizzare in pratica i costrutti di programmazione bash, cosicché sarete in grado di scrivere da soli i vostri script. Anziché dare descrizioni tecniche, vi fornirò spiegazioni nella lingua di tutti i giorni, in modo che impariate non solo cosa fa un certo costrutto, ma anche quando lo si dovrebbe usare. Entro la fine di questa guida di tre parti, sarete in grado di scrivere da soli i vostri intricati script bash, e sarete ad un livello in cui potrete usare agevolmente bash, potendo integrare le vostre conoscenze con la lettura (e la comprensione!) della documentazione standard. Cominciamo.
</p>

</body>
</section>
<section>
<title>Variabili d'ambiente</title>
<body>

<p>
In bash, come in quasi tutte le altre shell, l'utente può definire variabili d'ambiente, che sono memorizzate internamente come stringhe ASCII. Una delle cose più comode riguardo alle variabili d'ambiente è che esse sono parte del modello di processo UNIX. Questo significa che le variabili d'ambiente non sono solo esclusive degli script della shell, ma possono essere usate anche da programmi compilati normalmente. Quando "esportiamo" una variabile d'ambiente in bash, ogni programma che eseguiamo successivamente piò leggere le nostre impostazioni, che si tratti di uno script della shell oppure no. Un buon esempio è il comando <c>vipw</c>, che normalmente consente a root di editare il file delle password di sistema. Impostando la variabile d'ambiente <c>EDITOR</c> con il nome del vostro editor di testo preferito, potete configurare vipw affinché usi questo al posto di vi, il che è comodo se siete abituati a xemacs e non vi piace affatto vi.
</p>

<p>
Il modo standard per definire una variabile d'ambiente in bash è:
</p>

<pre caption="Definire una variabile d'ambiente">
$ <i>myvar='Questa è la mia variabile d'ambiente!'</i>
</pre>

<p>
Il comando qui sopra definisce una variabile chiamata "myvar", che contiene la stringa "Questa è la mia variabile d'ambiente!". Ci sono diverse cose da notare: innanzitutto, non c'è alcuno spazio alle estremità del segno "=": qualsiasi spazio produrrebbe un errore (provare per credere). La seconda cosa da notare è che, mentre potremmo fare a meno delle virgolette se stessimo definendo una parola singola, esse sono necessarie quando il valore della variabile d'ambiente è più di una singola parola (cioè contiene spazi o tabulazioni).
</p>

<note>
Per avere informazioni estremamente dettagliate su come dovrebbero essere usate le virgolette in bash, potreste consultare la sezione "QUOTING" della man page bash. L'esistenza di speciali sequenze di caratteri che vengono "espanse" (rimpiazzate) con altri valori, complica la gestione delle stringhe in bash. In questa guida noi tratteremo solo la virgolettazione usata più spesso.
</note>

<p>
In terzo luogo, mentre normalmente possiamo usare le doppie virgolette anziché i singoli apici, fare questo nell'esempio precedente avrebbe causato un errore. Perché? Perché l'utilizzo degli apici singoli disabilita una funzione bash chiamata espansione, che sostituisce caratteri speciali e sequenze di caratteri con valori. Ad esempio, il carattere "!" è il carattere di espansione della cronologia, e viene di solito sostituito da bash con un comando digitato precedentemente. (Non tratteremo l'espansione della cronologia in questa serie di articoli, in quanto essa non è usata frequentemente nella programmazione bash. Per maggiori informazioni su di essa, consultate la sezione "HISTORY EXPANSION" della man page bash.) Sebbene questa funzionalità simil-macro possa essere comoda, in questo momento noi vogliamo un punto esclamativo letterale alla fine della nostra variabile d'ambiente, non una macro.
</p>

<p>
Adesso, vediamo come possono essere usate in pratica le variabili d'ambiente. Ecco un esempio:
</p>

<pre caption="Usare variabili d'ambiente">
$ <i>echo $myvar</i>
Questa è la mia variabile d'ambiente!
</pre>

<p>
Facendo precedere il nome della nostra variabile d'ambiente da un $, possiamo fare in modo che bash la rimpiazzi con il valore di myvar. Nella terminologia bash, questo viene chiamato "espansione di variabile". Ma se proviamo quanto segue:
</p>

<pre caption="Primo tentativo di usare l'espansione di variabile">
$ <i>echo foo$myvarbar</i>
foo
</pre>

<p>
Volevamo che fosse visualizata la stringa "fooQuesta è la mia variabile d'ambiente!bar", ma non ha funzionato. Cosa è andato storto? In breve, la funzione di espansione di variabili bash si è confusa. Non capiva se doveva espandere la variabile $m, $my, $myvar, $myvarbar, ecc. Come possiamo essere più espliciti, dicendo chiaramente a bash a quale variabile ci stiamo riferendo? Proviamo questo:
</p>

<pre caption="Espansione di variabile corretta">
$ <i>echo foo${myvar}bar</i>
fooQuesta è la mia variabile d'ambiente!bar
</pre>

<p>
Come potete vedere, possiamo racchiudere il nome della variabile d'ambiente all'interno di parentesi graffe, nel caso in cui esso non sia chiaramente separato dal testo che lo circonda. Mentre $myvar è più veloce da digitare e funziona la maggiorparte delle volte, ${myvar} non darà quasi mai alcun problema. A parte questo, fanno tutte e due la stessa cosa, e infatti nel resto della guida vedrete entrambe le forme dell'espansione di variabili. Ricordate di usare la forma con le parentesi graffe quando la vostra variabile d'ambiente non è isolata dal testo che la circonda attraverso degli spazi bianchi (spazi o tabulazioni).
</p>

<p>
Abbiamo anche detto che possiamo "esportare" le variabili. Quando esportiamo una variabile d'ambiente, essa entra automaticamente nell'ambiente di ogni script o eseguibile eseguito successivamente. Gli script della shell riescono a raggiungere la variabile d'ambiente usando il supporto per le variabili d'ambiente interno alla shell, mentre i programmi scritti in C possono usare la chiamata di funzione getenv(). Ecco un po' di codice C di esempio che dovreste digitare e compilare; ci aiuterà a capire le variabili d'ambiente dal punto di vista di C:
</p>

<pre caption="myvar.c -- un esempio di programma C sulle variabili d'ambiente">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
  char *myenvvar=getenv("EDITOR");
  printf("The editor environment variable is set to %s\n",myenvvar);
}
</pre>

<p>
Salvate il codice sorgente qui sopra in un file chiamato <path>myenv.c</path>, e poi compilatelo con il comando:
</p>

<pre caption="Compilare il codice sorgente">
$ <i>gcc myenv.c -o myenv</i>
</pre>

<p>
Ora ci sarà un programma eseguibile nella vostra directory, il quale, se eseguito, visualizzerà il valore della variabile d'ambiente <c>EDITOR</c>, se esiste. Ecco cosa succede quando lo eseguo sulla mia macchina:
</p>

<pre caption="Eseguire il programma compilato">
$ <i>./myenv</i>
The editor environment variable is set to (null)
</pre>

<p>
Hmmm... visto che la variabile d'ambiente <c>EDITOR</c> non era stata settata, il programma ha dato come output una stringa null. Proviamo a settarla ad un valore specifico:
</p>

<pre caption="Proviamo con un valore specifico">
$ <i>EDITOR=xemacs</i>
$ <i>./myenv</i>
The editor environment variable is set to (null)
</pre>

<p>
Mentre vi sareste aspettati che myenv visualizzasse il valore "xemacs", in realtà così non è stato, perché non abbiamo esportato la variabile d'ambiente <c>EDITOR</c>. Questa volta, lo faremo funzionare:
</p>

<pre caption="Lo stesso programma dopo aver esportato la variabile">
$ <i>export EDITOR</i>
$ <i>./myenv</i>
The editor environment variable is set to xemacs
</pre>

<p>
Quindi, avete visto con i vostri occhi che un altro processo (in questo caso il nostro programma C di esempio) non può vedere la variabile d'ambiente finché essa non viene esportata. Di fatto, se volete, potete definire ed esportare una variabile d'ambiente usando un'unica riga, in questo modo:
</p>

<pre caption="Definire ed esportare una variabile d'ambiente in un unico comando">
$ <i>export EDITOR=xemacs</i>
</pre>

<p>
Questo funzionerà in modo identico alla versione a due righe. Ora è il momento di vedere come cancellare una variabile d'ambiente usando <c>unset</c>:
</p>

<pre caption="Cancellare la variabile">
$ <i>unset EDITOR</i>
$ <i>./myenv</i>
The editor environment variable is set to (null)
</pre>

</body>
</section>
<section>
<title>Panoramica sul taglio delle stringhe</title>
<body>

<p>
Tagliare le stringhe -- ovvero, spezzare una stringa originale in parti più piccole e separate -- è uno di quei compiti che sono svolti ogni giorno dalla maggiorparte degli script della shell. Molte volte, gli script della shell devono prendere un percorso completo e trovare il file o la directory finale. Mentre è possibile (e divertente!) codificare ciò in bash, l'eseguibile UNIX <c>basename</c> esegue l'operazione estremamente bene:
</p>

<pre caption="Usare basename">
$ <i>basename /usr/local/share/doc/foo/foo.txt</i>
foo.txt
$ <i>basename /usr/home/drobbins</i>
drobbins
</pre>

<p>
<c>basename</c> è un tool abbastanza comodo per spezzare le stringhe. Il suo compagno, chiamato <c>dirname</c>, ci dà l'"altra" parte del percorso, quella eliminata da <c>basename</c>:
</p>

<pre caption="Usare dirname">
$ <i>dirname /usr/local/share/doc/foo/foo.txt</i>
/usr/local/share/doc/foo
$ <i>dirname /usr/home/drobbins/</i>
/usr/home
</pre>

<note>
Sia <c>dirname</c> che <c>basename</c> non cercano alcun file o directory sul disco: sono solo comandi di manipolazione delle stringhe.
</note>

</body>
</section>
<section>
<title>Sostituzione di comandi</title>
<body>

<p>
Una cosa molto utile da sapere è come creare una variabile d'ambiente che contenga il risultato di un comando eseguibile. Questo è molto semplice da fare:
</p>

<pre caption="Creare una variabile d'ambiente contenente il risultato di un comando">
$ <i>MYDIR=`dirname /usr/local/share/doc/foo/foo.txt`</i>
$ <i>echo $MYDIR</i>
/usr/local/share/doc/foo
</pre>

<p>
Quello che abbiamo fatto sopra è chiamato <e>sostituzione di comando</e>. Vale la pena di esaminare diverse cose in questo esempio. Nella prima riga, abbiamo semplicemente incluso il comando che volevamo eseguire all'interno di apici inversi. Non si tratta degli apici singoli standard, ma si ottengono premendo AltGr contemporaneamente al tasto dell'apostrofo. Possiamo fare esattamente la stessa cosa con la sintassi alternativa bash per la sostituzione di comando:
</p>

<pre caption="Sintassi alternativa per la sostituzione di comando">
$ <i>MYDIR=$(dirname /usr/local/share/doc/foo/foo.txt)</i>
$ <i>echo $MYDIR</i>
/usr/local/share/doc/foo
</pre>

<p>
Come potete vedere, bash fornisce molti modi per fare esattamente la stessa cosa. Usando la sostituzione di comando, possiamo mettere ogni comando, o pipeline di comandi, tra <e>` `</e> o <e>$( )</e>,  assegnandoli poi ad una variabile d'ambiente. È comodo!  Ecco un esempio di come si può usare una pipeline con la sostituzione di comando:
</p>

<pre caption="Sostituzione di comando in una pipeline">
$ <i>MYFILES=$(ls /etc | grep pa)</i>
$ <i>echo $MYFILES</i>
pam.d passwd
</pre>

</body>
</section>
<section>
<title>Tagliare stringhe da professionisti</title>
<body>

<p>
Se <c>basename</c> e <c>dirname</c> sono tools grandiosi, ci sono volte in cui potremmo avere necessità di effettuare operazioni di taglio stringhe più avanzate di semplici manipolazioni di percorsi standard. In questi casi, possiamo servirci della funzionalità avanzata di espansione di variabili interna a bash. Abbiamo già usato il tipo standard di espansione di variabili, che appare così: ${MYVAR}. Ma bash può anche eseguire, da solo, alcune comodi tagli di stringhe. Date un'occhiata a questi esempi:
</p>

<pre caption="Esempi di tagli stringhe">
$ <i>MYVAR=foodforthought.jpg</i>
$ <i>echo ${MYVAR##*fo}</i>
rthought.jpg
$ <i>echo ${MYVAR#*fo}</i>
odforthought.jpg
</pre>

<p>
Nel primo esempio, abbiamo digitato ${MYVAR##*fo}. Cosa significa esattamente? In pratica, dentro il ${ }, abbiamo digitato il nome della variabile d'ambiente, due ##, e una wildcard ("*fo"). Poi, bash ha preso <c>MYVAR</c>, ha trovato la sottostringa più lunga, dall'inizio della stringa "foodforthought.jpg", che corrispondesse alla wildcard "*fo", e ha tolto la parte iniziale della stringa. È un concetto un po' difficile da afferrare all'inizio, quindi, per vedere meglio come funziona questa opzione speciale "##", vediamo passo passo come bash ha completato questa espansione. Innanzitutto, ha iniziato cercando le sottostringhe all'inizio di "foodforthought.jpg" che soddisfacessero la wildcard "*fo". Ecco le sottostringhe che ha controllato:
</p>
<pre caption="Sottostringhe controllate">
f       
fo              SODDISFA *fo
foo     
food
foodf           
foodfo          SODDISFA *fo
foodfor
foodfort        
foodforth
foodfortho      
foodforthou
foodforthoug
foodforthought
foodforthought.j
foodforthought.jp
foodforthought.jpg
</pre>

<p>
Dopo avere cercato le sottostringhe che corrispondessero alla wildcard, come potete vedere bash ne ha trovate due. A questo punto ha scelto la sottostringa più lunga, l'ha rimossa dall'inizio della stringa originale, e infine ha fornito il risultato.
</p>

<p>
La seconda forma dell'espansione di variabile mostrata sopra appare identica alla prima, con la differenza che usa un solo "#", e bash esegue un procedimento quasi identico. Essa controlla lo stesso set di sottostringhe del primo esempio, ma questa volta rimuove dalla stringa originale la sottostringa più breve, e dà il risultato. Quindi, non appena controlla la sottostringa "fo", la rimuove dalla nostra stringa, dando come risultato "odforthought.jpg".
</p>

<p>
Questo potrebbe sembrare estremamente criptico, quindi vi mostrerò un modo semplice per ricordare questa funzionalità. Quando cercate l'opzione più lunga, usate ## (perché ## è più lungo di #). Quando cercate l'opzione più corta, usate #. Vedete, non è così difficile da ricordare, dopotutto! <!--***Commentato in quanto l'esempio si riferisce alle tastiere americane*** Wait, how do you remember that we are supposed to use the
'#' character to remove from the *beginning* of a string? Simple! You will
notice that on a US keyboard, shift-4 is "$", which is the bash variable
expansion character. On the keyboard, immediately to the left of "$" is "#". So,
you can see that "#" is "at the beginning" of "$", and thus (according to our
mnemonic), "#" removes characters from the beginning of the string. You may
wonder how we remove characters from the end of the string. If you guessed that
we use the character immediately to the right of "$" on the US keyboard ("%"),
you're right! --> Ecco alcuni veloci esempi su come tagliare la parte finale delle stringhe:
</p>

<pre caption="Tagliare la parte finale di una stringa">
$ <i>MYFOO="chickensoup.tar.gz"</i>
$ <i>echo ${MYFOO%%.*}</i>
chickensoup
$ <i>echo ${MYFOO%.*}</i>
chickensoup.tar
</pre>

<p>
Come potete vedere, le opzioni di espansione di variabili % e %% funzionano esattamente come # e ##, con la differenza che esse rimuovono la sottostringa corrispondente alla wildcard dalla fine della stringa. Si noti che non serve usare il carattere "*" se si desidera rimuovere una specifica sottostringa dalla fine:
</p>

<pre caption="Rimuovere sottostringhe dalla fine">
<i>MYFOOD="chickensoup"</i>
$ <i>echo ${MYFOOD%%soup}</i>
chicken
</pre>

<p>
In questo esempio, non importa se usiamo "%%" o "%", dato che è possibile una sola opzione. <!--And remember, if you forget whether to use "#" or "%", look
at the 3, 4, and 5 keys on your keyboard and figure it out.-->
</p>

<p>
Possiamo usare un'altra forma di espansione di variabile per selezionare una sottostringa specifica, basata su uno specifico carattere di inizio e su una data lunghezza. Provate a digitare le seguenti righe in bash:
</p>

<pre caption="Selezionare una sottostringa specifica">
$ <i>EXCLAIM=cowabunga</i>
$ <i>echo ${EXCLAIM:0:3}</i>
cow
$ <i>echo ${EXCLAIM:3:7}</i>
abunga
</pre>

<p>
Questa forma di separazione di stringhe può risultare abbastanza comoda: specificate semplicemente il carattere da cui iniziare e la lunghezza della sottostringa, separando il valori con i ':'.
</p>

</body>
</section>
<section>
<title>Applicare il taglio delle stringhe</title>
<body>

<p>
Adesso che abbiamo imparato tutto sul taglio delle stringhe, scriviamo un piccolo e semplice script della shell. Il nostro script accetterà un singolo file come argomento, e ci dirà se esso sembra essere un tarball oppure no. Per determinare se si tratti di un tarball, lo script cercherà l'estensione ".tar" alla fine del file. Eccolo:
</p>

<pre caption="mytar.sh -- uno script di esempio">
#!/bin/bash

if [ "${1##*.}" = "tar" ]
then
       echo Questo sembra essere un tarball.
else
       echo A prima vista, questo non sembra essere un tarball.
fi
</pre>

<p>
Per eseguire lo script, mettetelo in un file chiamato <path>mytar.sh</path>, e digitate <c>chmod 755 mytar.sh</c> per renderlo eseguibile. Poi, provatelo su un tarball, in questo modo:
</p>

<pre caption="Provare lo script">
$ <i>./mytar.sh thisfile.tar</i>
Questo sembra essere un tarball.
$ <i>./mytar.sh thatfile.gz</i>
A prima vista, questo non sembra essere un tarball.
</pre>

<p>
OK, funziona, ma non serve a molto. Prima di renderlo più utile, diamo un'occhiata al costrutto "if" usato sopra. In esso, abbiamo un'espressione booleana. In bash, l'operatore di paragone "=" controlla l'uguaglianza delle stringhe. In bash, tutte le espressioni booleane sono racchiuse in parentesi quadre. Ma cosa testa in realtà l'espressione booleana? Diamo un'occhiata sul lato sinistro. Secondo quello che abbiamo imparato dal taglio delle stringhe, "${1##*.}" rimuoverà la sottostringa più lunga che soddisfi "*.", dall'inizio della stringa contenuta nella variabile d'ambiente "1", dando il risultato. Questo farà sì che venga considerata tutta la parte dopo l'ultimo "." nel nome del file. Ovviamente, se il nome finisce con ".tar", otterremo "tar" come risultato, e la condizione sarà vera.
</p>

<p>
Innanzitutto potreste chiedervi cos'è la variabile d'ambiente "1". Molto semplice: $1 è il primo argomento dello script, $2 è il secondo, ecc. OK, ora che abbiamo esaminato la funzione, possiamo dare una prima occhiata ai costrutti "if".
</p>

</body>
</section>
<section>
<title>Costrutti "if"</title>
<body>

<p>
Come la maggiorparte delle lingue, bash ha una sua forma di condizionale. Quando lo utilizzate, attenetevi al formato mostrato sopra, cioè tenete "if" e "then" su righe separate, e tenete "else" e il fi" finale in allineamento orizzontale con essi. Questo rende il codice più facile da leggere e semplifica la correzione di eventuali bug. In aggiunta alla forma "if,else", ci sono diverse altre forme di costrutti "if":
</p>

<pre caption="Forma base di costrutto if">
if      [ condizione ]
then
        azione
fi
</pre>

<p>
Questo costrutto esegue un'azione solo se la condizione è vera; altrimenti non esegue alcuna azione e continua ad eseguire le eventuali righe successive al "fi".
</p>

<pre caption="Controllare una condizione prima di continuare con i comandi che seguono fi">
if [ condizione ]
then 
        azione
elif [ condizione2 ]
then
        azione2
.
.
.
elif [ condizione3 ]
then

else
        azionex
fi
</pre>

<p>
La forma "elif" testerà una dopo l'altra tutte le condizioni, eseguendo l'azione corrispondente alla prima condizione vera. Se nessuna delle condizioni risulta vera, eseguirà l'azione "else", se presente, dopodiché continuerà ad eseguire le eventuali righe che seguono il costrutto "if,elif,else".
</p>

</body>
</section>
<section>
<title>La parte successiva</title>
<body>

<p>
Ora che abbiamo trattato le funzionalità bash più elementari, è il momento di prepararsi a scrivere qualche vero script. Nel prossimo articolo, tratterò i costrutti di looping, le funzioni, il namespace, e altri argomenti essenziali. Poi, saremo pronti a scrivere alcuni script più complicati. Nel terzo articolo, ci concentreremo quasi esclusivamente su script e funzioni molto complesse, nonché su diverse opzioni di design degli script bash. Ci vediamo!
</p>

</body>
</section>
</chapter>

<chapter>
<title>Risorse</title>
<section>
<title>Link utili</title>
<body>

<ul>
  <li>
    Read <uri
    link="http://www.gentoo.org/doc/it/articles/bash-by-example-p2.xml">Bash by
    example: Parte 2</uri>.
  </li>
  <li>
    Read <uri
    link="http://www.gentoo.org/doc/it/articles/bash-by-example-p3.xml">Bash by
    example: Parte 3</uri>.
  </li>
  <li>
    Visit <uri link="http://www.gnu.org/software/bash/bash.html">GNU's bash home
    page</uri>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
