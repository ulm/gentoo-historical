<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/articles/bash-by-example-p3.xml,v 1.2 2007/05/16 23:18:23 scen Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/it/articles/bash-by-example-p3.xml" lang="it" disclaimer="articles">
<title>Bash per esempi, Parte 3</title>

<author title="Autore">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Traduzione">
  <mail link="cristiano.chiucchiolo@gmail.com">Cristiano Chiucchiolo</mail>
</author>

<abstract>
In questo articolo finale su Bash, Daniel Robbins esamina in particolare il sistema ebuild di Gentoo Linux, un eccellente esempio della potenza di bash. Passo dopo passo, egli vi mostrerà come fu implementato il sistema ebuild e vi spiegherà molte pratiche tecniche bash e strategie di strutturazione. Alla fine di questo articolo, avrete una buona conoscenza di ciò che serve a produrre un'applicazione completamente basata su bash, e potrete iniziare a scrivere il vostro sistema personale di autocompilazione.
</abstract>

<!-- The original version of this article was published on IBM developerWorks,
and is property of Westtech Information Services. This document is an updated
version of the original article, and contains various improvements made by the
Gentoo Linux Documentation team -->

<version>1.3</version>
<date>2005-10-09</date>

<chapter>
<title>Esplorare il sistema ebuild</title>
<section>
<title>Entrare nel sistema ebuild</title>
<body>

<p>
Non vedevo l'ora di arrivare a questa terza e ultima parte di <e>Bash by example</e>e, perché ora che abbiamo già trattato i fondamenti della programmazione bash nella <uri link="/doc/it/articles/bash-by-example-p1.xml">Parte 1</uri> e nella <uri link="/doc/it/articles/bash-by-example-p2.xml">Parte 2</uri>, possiamo concentrarci su argomenti più avanzati, come lo sviluppo di applicazioni bash e la strutturazione dei programmi. In questo articolo, vi darò una buona dose di esperienza pratica nello sviluppo bash, presentando un progetto sulla cui scrittura e revisionne ho speso molte ore: il sistema ebuild di Gentoo Linux.
</p>

<p>
Sono il capo progettista di Gentoo Linux, un SO Linux di ultima generazione, attualmente in fase beta. Una delle mie responsabilità principali è assicurarmi che tutti i pacchetti binari (simili ai pacchetti RPM) siano creati in modo corretto e lavorino insieme. Come probabilmente sapete, un sistema standard Linux non è composto da un albero di sorgenti singolo e unito (come BSD), ma in realtà è fatto di oltre 25 pacchetti fondamentali che lavorano insieme. Alcuni di questi pacchetti contengono:
</p>

<table>
  <tr>
    <th>Pacchetto</th>
    <th>Descrizione</th>
  </tr>
  <tr>
    <ti>linux</ti>
    <ti>Il kernel vero e proprio</ti>
  </tr>
  <tr>
    <ti>util-linux</ti>
    <ti>Una raccolta di vari programmi collegati a Linux</ti>
  </tr>
  <tr>
    <ti>e2fsprogs</ti>
    <ti>Una raccolta di varie utility riguardanti il filesystem ext2</ti>
  </tr>
  <tr>
    <ti>glibc</ti>
    <ti>La libreria GNU C</ti>
  </tr>
</table>

<p>
Ogni pacchetto sta nel suo tarball ed è mantenuto da sviluppatori, o team di sviluppatori, indipendenti. Per creare una distribuzione, ogni pacchetto deve essere scaricato separatamente, compilato e pacchettizzato. Ogni volta che un pacchetto deve essere corretto, aggiornato o migliorato, la compilazione e la pacchettizzazione devono essere ripetute (e i pacchetti diventano obsoleti molto in fretta). Per aiutare ad eliminare le fasi ripetitive del processo di creazione ed aggiornamento dei pacchetti, ho creato il sistema ebuild, scritto quasi interamente in bash. Per aumentare la vostra conoscenza di bash, vi mostrerò come ho implementato le parti del sistema ebuild riguardanti l'estrazione e la compilazione, passo dopo passo. Mentre spiegherò ogni passaggio, parlerò anche del perché sono state prese alcune decisioni. Alla fine di questo articolo, non solo avrete una eccellente conoscenza di progetti di programmazione bash su una scala più larga, ma avrete anche implementato una buona porzione di un sistema completo di autocompilazione.
</p>

</body>
</section>
<section>
<title>Perché bash?</title>
<body>

<p>
Bash è una componente essenziale del sistema ebuild di Gentoo Linux. È stata scelta come linguaggio principale di ebuild per diverse ragioni. In primo luogo, perché ha una sintassi semplice e familiare, adatta specialmente a lanciare programmi esterni. Un sistema di autocompilazione è un "codice collante" che automatizza l'invocazione di programmi esterni, e bash è molto adatta per questo tipo di utilizzo. In secondo luogo, il supporto bash per le funzioni ha consentito al sistema ebuild di avere un codice modulare, semplice da comprendere. In terzo luogo, il sistema ebuild sfrutta il supporto bash per le variabili d'ambiente, permettendo ai maintainers e agli sviluppatori dei pacchetti di configurarlo facilmente, al volo.
</p>

</body>
</section>
<section>
<title>Esame del processo di compilazione</title>
<body>

<p>
Prima di guardare al sistema ebuild, esaminiamo come avviene la compilazione e l'installazione di un pacchetto. Per il nostro esempio, prenderemo il pacchetto "sed", una utility standard GNU che serve ad editare flussi di testo e che è presente in tutte le distribuzioni Linux. Per prima cosa, scaricate il tarball dei sorgenti (<path>sed-3.02.tar.gz</path>) (vedi <uri link="#resources">Risorse</uri>). Salveremo questo archivio in <path>/usr/src/distfiles</path>, una directory a cui ci riferiremo usando la variabile d'ambiente <c>$DISTDIR</c>. <c>$DISTDIR</c> è la directory dove si trovano tutti i tarball dei sorgenti originari; è un grande deposito di codice sorgente.
</p>

<p>
Il nostro prossimo passo consiste nel creare una directory temporanea chiamata <path>work</path>, che contenga i sorgenti estratti. In seguito ci riferiremo a questa directory usando la variabile d'ambiente <c>$WORKDIR</c>. Per fare ciò, spostiamoci in una directory in cui abbiamo il permesso di scrittura e digitiamo quanto segue:
</p>

<pre caption="Decomprimere sed in una directory temporanea">
$ <i>mkdir work</i>
$ <i>cd work</i>
$ <i>tar xzf /usr/src/distfiles/sed-3.02.tar.gz</i>
</pre>

<p>
Ora il tarball è stato decompresso, creando una directory chiamata <path>sed-3.02</path> che contiene tutti i sorgenti. In seguito ci riferiremo alla directory <path>sed-3.02</path> usando la variabile d'ambiente <c>$SRCDIR</c>. Per compilare il programma, digitate quanto segue:
</p>

<pre caption="Compilare sed">
$ <i>cd sed-3.02</i>
$ <i>./configure --prefix=/usr</i>
<comment>(autoconf deve generare i makefiles, può volerci un po' di tempo)</comment>

$ <i>make</i>

<comment>(il pacchetto viene compilato dai sorgenti, anche qui può volerci un po')</comment>
</pre>

<p>
Salteremo la fase del "make install", dato che in questo articolo trattiamo solo le fasi dell'estrazione e della compilazione. Se volessimo scrivere uno script bash script che esegua per noi tutti questi passaggi, potremmo fare qualcosa del genere:
</p>

<pre caption="Esempio di script bash che esegua il processo dell'estrazione e della compilazione">
#!/usr/bin/env bash

if [ -d work ]
then
<comment># rimuovere la vecchia directory di lavoro, se presente</comment>
      rm -rf work
fi
mkdir work
cd work
tar xzf /usr/src/distfiles/sed-3.02.tar.gz
cd sed-3.02
./configure --prefix=/usr
make
</pre>

</body>
</section>
<section>
<title>Generalizzare il codice</title>
<body>

<p>
Sebbene questo script di autocompilazione funzioni, non è molto flessibile. In breve, lo script bash contiene solo la lista di tutti i comandi che avremmo dovuto dare da linea di comando. Nonostante questa soluzione funzioni, sarebbe bene creare uno script generico che possa essere configurato facilmente per estrarre e compilare qualsiasi pacchetto, modificando solo poche righe. In questo modo, è molto meno faticoso per il mantainer aggiungere nuovi pacchetti alla distribuzione. Facciamo un primo tentativo in questo senso, usando molte variabili d'ambiente diverse per rendere il nostro script più generico:
</p>

<pre caption="Uno script nuovo, più generale">
#!/usr/bin/env bash

<comment># P è il nome del pacchetto</comment>

P=sed-3.02

<comment># A è il nome dell'archivio</comment>

A=${P}.tar.gz

export ORIGDIR=`pwd`
export WORKDIR=${ORIGDIR}/work
export SRCDIR=${WORKDIR}/${P}

if [ -z "$DISTDIR" ]
then
<comment># impostare DISTDIR a /usr/src/distfiles se non lo avete già fatto</comment>
        DISTDIR=/usr/src/distfiles
fi
export DISTDIR

if [ -d ${WORKDIR} ]
then    
<comment># rimuovere la vecchia directory di lavoro, se presente</comment>
        rm -rf ${WORKDIR}
fi

mkdir ${WORKDIR}
cd ${WORKDIR}
tar xzf ${DISTDIR}/${A}
cd ${SRCDIR}
./configure --prefix=/usr
make
</pre>

<p>
Abbiamo aggiunto al codice molte variabili d'ambiente, ma in pratica esso fa ancora la stessa cosa. Tuttavia, ora, per compilare tarball di sorgenti standard GNU basati su autoconf, possiamo semplicemente copiare questo file in un nuovo file (con un nome appropriato, che rifletta il nome del nuovo pacchetto da compilare), e poi cambiare i valori di <c>$A</c> e <c>$P</c> in nuovi valori. Tutte le altre variabili d'ambiente acquisteranno automaticamente le impostazioni corrette, e lo script funzionerà come previsto. Sebbene questo sia comodo, c'è un ulteriore miglioramento che può essere apportato al codice. Questo particolare codice è molto più lungo dello script "transcript" che avevamo creato in origine. Dato che uno degli obiettivi di ogni progetto di programmazione dovrebbe essere la riduzione della complessità per l'utente, sarebbe bene ridurre il codice il più possibile, o almeno organizzarlo meglio. Possiamo fare ciò con un trucchetto: spezzeremo il codice in due file separati. Salvate questo file come <path>sed-3.02.ebuild</path>:
</p>

<pre caption="sed-3.02.ebuild">
<comment>#il file ebuild sed -- molto semplice!</comment>
P=sed-3.02
A=${P}.tar.gz
</pre>

<p>
Il nostro primo file è elementare, e contiene solo quelle variabili d'ambiente che devono essere configurate in modo diverso per ogni pacchetto. Ecco il secondo file, che contiene il cervello dell'operazione. Salvatelo come "ebuild" e rendetelo eseguibile:
</p>

<pre caption="Lo script ebuild">
#!/usr/bin/env bash


if [ $# -ne 1 ]
then
        echo "one argument expected."
        exit 1
fi

if [ -e "$1" ]
then
        source $1
else
        echo "ebuild file $1 not found."
        exit 1
fi

export ORIGDIR=`pwd`
export WORKDIR=${ORIGDIR}/work
export SRCDIR=${WORKDIR}/${P}

if [ -z "$DISTDIR" ]
then
        <comment># impostate DISTDIR a /usr/src/distfiles se non lo avete già fatto</comment>
        DISTDIR=/usr/src/distfiles
fi
export DISTDIR

if [ -d ${WORKDIR} ]
then    
        # remove old work directory if it exists 
        rm -rf ${WORKDIR}
fi

mkdir ${WORKDIR}
cd ${WORKDIR}
tar xzf ${DISTDIR}/${A}
cd ${SRCDIR}
./configure --prefix=/usr
make
</pre>

<p>
Ora che abbiamo diviso il nostro sistema di compilazione in due parti, scommetto che vi starete chiedendo come faremo a farlo funzionare. In breve, per compilare sed, digitate:
</p>

<pre caption="Testare l'ebuild precedente">
$ <i>./ebuild sed-3.02.ebuild</i>
</pre>

<p>
Quando "ebuild" viene eseguito, innanzitutto prova a "sorgentizzare" la variabile <c>$1</c>. Cosa significa? Dall'articolo precedente, vi ricorderete che <c>$1</c> è il primo argomento da linea di comando, in questo caso <path>sed-3.02.ebuild</path>. In bash, il comando "source" legge i periodi bash da un file, e li esegue ciome se essi apparissero direttamente nel file in cui si trova il comando "source". Quindi, "source ${1}" fa sì che lo script "ebuild" esegua i comandi in <path>sed-3.02.ebuild</path>, il che porta alla definizione di <c>$P</c> e <c>$A</c>.
Questo cambio di struttura è veramente molto comodo, in quanto se vogliamo compilare un altro programma al posto di sed, possiamo semplicemente creare un nuovo file <path>.ebuild</path> e passarlo come argomento al nostro script "ebuild". In questo modo, i file <path>.ebuild</path> finiscono per essere molto semplici, mentre il cuore complicato del sistema ebuild si trova in un unico luogo, il nostro script "ebuild". Così facendo, possiamo aggiornare o migliorare il sistema ebuild semplicemente editando lo script "ebuild", mantenendo i dettagli dell'implementazione fuori dai file ebuild. Ecco un esempio di file ebuild per <c>gzip</c>:
</p>

<pre caption="gzip-1.2.4a.ebuild">
<comment>#un altro script ebuild molto semplice!</comment>
P=gzip-1.2.4a
A=${P}.tar.gz
</pre>

</body>
</section>
<section>
<title>Aggiungere funzionalità</title>
<body>

<p>
OK, stiamo facendo qualche progresso. Tuttavia, c'è qualche ulteriore funzionalità che vorrei aggiungere. Vorrei che lo script ebuild accettasse un secondo argomento da linea di comando, che sarà <c>compile</c>, <c>unpack</c>, o <c>all</c>. Questo secondo argomento da linea di comando dice allo script ebuild quale particolare passaggio del processo di compilazione deve eseguire. In questo modo, posso dire ad ebuild di estrarre l'archivio, ma senza compilarlo (in caso volessi controllare l'archivio dei sorgenti prima della compilazione).  Per fare ciò, aggiungerò un periodo "case" che esaminerà la variabile <c>$2</c>, compiendo azioni diverse a seconda del suo valore. Ecco come appare il codice adesso:
</p>

<pre caption="ebuild, revisione 2">
#!/usr/bin/env bash

if [ $# -ne 2 ]
then
        echo "Please specify two args - .ebuild file and unpack, compile or all"
        exit 1
fi


if [ -z "$DISTDIR" ]
then
<comment> # impostate DISTDIR a /usr/src/distfiles se non lo avete già fatto</comment>
        DISTDIR=/usr/src/distfiles
fi
export DISTDIR

ebuild_unpack() {
        <comment> #assicuratevi di essere nella giusta directory</comment>
        cd ${ORIGDIR}
        
        if [ -d ${WORKDIR} ]
        then    
                rm -rf ${WORKDIR}
        fi

        mkdir ${WORKDIR}
        cd ${WORKDIR}
        if [ ! -e ${DISTDIR}/${A} ]
        then
            echo "${DISTDIR}/${A} does not exist.  Please download first."
            exit 1
        fi    
        tar xzf ${DISTDIR}/${A}
        echo "Unpacked ${DISTDIR}/${A}."
        #source is now correctly unpacked
}


ebuild_compile() {
        
        <comment> #assicuratevi di essere nella giusta directory</comment>
        cd ${SRCDIR}
        if [ ! -d "${SRCDIR}" ]
        then
                echo "${SRCDIR} does not exist -- please unpack first."
                exit 1
        fi
        ./configure --prefix=/usr
        make     
}

export ORIGDIR=`pwd`
export WORKDIR=${ORIGDIR}/work

if [ -e "$1" ]
then
        source $1
else
        echo "Ebuild file $1 not found."
        exit 1
fi

export SRCDIR=${WORKDIR}/${P}

case "${2}" in
        unpack)
                ebuild_unpack
                ;;
        compile)
                ebuild_compile
                ;;
        all)
                ebuild_unpack
                ebuild_compile
                ;;
        *)
                echo "Please specify unpack, compile or all as the second arg"
                exit 1
                ;;
esac
</pre>

<p>
Abbiamo fatto un sacco di cambiamenti, quindi esaminiamoli. Per prima cosa, abbiamo messo le fasi della compilazione e dell'estrazione all'interno di apposite funzioni, che abbiamo chiamato rispettivamente <c>ebuild_compile()</c> e <c>ebuild_unpack()</c>. Questa è una buona mossa, perché il codice si sta facendo più complesso e le nuove funzioni forniscono un po' di modularità, che aiuta a mantenere le cose ordinate. Nella prima riga di ogni funzione, eseguo esplicitamente il <c>cd</c> nella directory in cui voglio stare, in quanto, dato che il nostro codice sta diventando più modulare che lineare, è più probabile che eseguiamo una funzione nella directory di lavoro sbagliata. I comandi <c>cd</c> ci mettono esplicitamente nel posto giusto, e ci impediscono di commettere errori più tardi; è un passaggio importante, soprattutto se all'interno delle funzioni cancellerete dei file.
</p>

<p>
Inoltre, ho aggiunto un controllo utile all'inizio della funzione <c>ebuild_compile()</c>. Questo si assicurerà che <c>$SRCDIR</c> esista, e, nel caso non esista, visualizzerà un messaggio di errore dicendo all'utente di estrarre l'archivio, dopodiché uscirà. Se volete, potete modificare questo comportamento in modo che, se <c>$SRCDIR</c> non esiste, il nostro script ebuild estragga l'archivio dei sorgenti automaticamente. Potete fare ciò sostituendo <c>ebuild_compile()</c> con il seguente codice:
</p>

<pre caption="Di nuovo su ebuild_compile()">
ebuild_compile() {
        <comment>#assicuratevi di essere nella giusta directory</comment>
        if [ ! -d "${SRCDIR}" ]
        then
                ebuild_unpack
        fi
        cd ${SRCDIR}
        ./configure --prefix=/usr
        make     
}
</pre>

<p>
Una delle modifiche più evidenti nella seconda versione del nostro script ebuild è il nuovo periodo "case" alla fine del codice. Questo periodo "case" esamina semplicemente il secondo argomento da linea di comando, eseguendo l'azione corretta a seconda del suo valore. Se ora digitiamo:
</p>

<pre caption="Azione di default">
$ <i>ebuild sed-3.02.ebuild</i>
</pre>

<p>
Nei fatti otteniamo un messaggio di errore. ebuild infatti ora vuole che gli diciamo cosa fare, in questo modo:
</p>

<pre caption="Estrarre">
$ <i>ebuild sed-3.02.ebuild unpack</i>
</pre>

<p>
oppure:
</p>

<pre caption="Compilare">
$ <i>ebuild sed-3.02.ebuild compile</i>
</pre>

<p>
oppure:
</p>

<pre caption="Estrarre e compilare">
$ <i>ebuild sed-3.02.ebuild all</i>
</pre>

<impo>
Se fornite da linea di comando un secondo argomento diverso da quelli elencati sopra, otterrete un messaggio di errore (la proposizione *), e il programma uscirà.
</impo>

</body>
</section>
<section>
<title>Modularizzare il codice</title>
<body>

<p>
Ora che il codice è abbastanza avanzato e funzionale, potreste essere tentati di creare molti altri script ebuild, per estrarre e compilare i vostri programmi preferiti. Se lo fate, prima o poi vi imbatterete in sorgenti che non utilizzano autoconf (<c>./configure</c>), o forse in altri che hanno processi di compilazione non standard.  Dobbiamo effettuare alcuni ulteriori cambiamenti al sistema ebuild, in modo da supportare questi programmi. Ma prima di farlo, è bene riflettere un po' sul come fare.
</p>

<p>
Il vantaggio di inserire di default i comandi <c>./configure --prefix=/usr; make</c> nel nostro script di compilazione è che, la maggiorparte delle volte, funzionerà. Tuttavia, dobbiamo fare sì che il sistema ebuild funzioni anche con i sorgenti che non utilizzano autoconf o i normali Makefiles. Per risolvere questo problema, propongo che il nostro script ebuild dovrebbe, di default, fare quanto segue:
</p>

<ol>
  <li>
    Se esiste uno script configure in <c>${SRCDIR}</c>, eseguirlo in questo modo: <c>./configure --prefix=/usr</c>. Altrimenti, saltare questo passaggio.
  </li>
  <li>Eseguire il seguente comando: make</li>
</ol>

<p>
Dato che ebuild esegue configure solo se questo esiste, ora possiamo supportare automaticamente quei programmi che non usano autoconf ed hanno makefiles standard. Ma che fare se un semplice "make" non basta per alcuni sorgenti? Ci serve un modo per ignorare le nostre logiche impostazioni di default con del codice specifico che gestisca queste situazioni. Per fare ciò, trasformeremo la nostra funzione <c>ebuild_compile()</c> in due funzioni. La prima funzione, che può essere considerata una funzione "genitore", sarà ancora chiamata <c>ebuild_compile()</c>. Tuttavia, avremo una nuova funzione, chiamata <c>user_compile()</c>, che conterrà solo le nostre normali azioni di default:
</p>

<pre caption="ebuild_compile() spezzato in due funzioni">
user_compile() {
        <comment>#siamo già in ${SRCDIR}</comment>
        if [ -e configure ]
        then
                #run configure script if it exists
                ./configure --prefix=/usr
        fi
        #run make
        make
}              

ebuild_compile() {
        if [ ! -d "${SRCDIR}" ]
        then
                echo "${SRCDIR} does not exist -- please unpack first."
                exit 1
        fi
        <comment>#assicuratevi di essere nella giusta directory</comment>
        cd ${SRCDIR}
        user_compile
}
</pre>

<p>
Potrebbe non sembrare ovvio il perché stiamo facendo questo proprio ora, ma fidatevi di me. Mentre il codice funziona in modo quasi identico alla nostra precedente versione di ebuild, adesso possiamo fare qualcosa che prima non potevamo fare: possiamo ignorare <c>user_compile()</c> in <path>sed-3.02.ebuild</path>. Quindi, se la funzione di default <c>user_compile()</c> non ci aiuta, possiamo definirne una nuova nel nostro file <path>.ebuild</path>, contenente i comandi necessari per compilare il pacchetto. Per esempio, ecco un file ebuild per <c>e2fsprogs-1.18</c>, che richiede una riga <c>./configure</c> un po' diversa:
</p>

<pre caption="e2fsprogs-1.18.ebuild">
<comment>#questo file ebuild ignora la funzione di default user_compile()</comment>
P=e2fsprogs-1.18
A=${P}.tar.gz
 
user_compile() {
       ./configure --enable-elf-shlibs
       make
}
</pre>

<p>
A questo punto <c>e2fsprogs</c> potrà essere compilato esattamente nel modo in cui vogliamo. Tuttavia, per la maggiorparte dei pacchetti, possiamo omettere qualsiasi funzione <c>user_compile()</c> nel file <path>.ebuild</path>, lasciando che venga utilizzata la funzione <c>user_compile()</c> di default.
</p>

<p>
Come fa esattamente lo script ebuild a capire quale funzione <c>user_compile()</c> usare? Di fatto questo è molto semplice. Nello script ebuild, la funzione <c>user_compile()</c> di default viene definita prima che il file <path>e2fsprogs-1.18.ebuild</path> sia sorgentizzato. Se esiste una funzione <c>user_compile()</c> in <path>e2fsprogs-1.18.ebuild</path>, questa sovrascrive la versione di default definita precedentemente. Se non c'è, viene usata la funzione <c>user_compile()</c> di default.
</p>

<p>
Questo è grandioso: abbiamo aggiunto un sacco di flessibilità senza avere bisogno di codice complesso non necessario. Qui non ne parleremo, ma potreste anche fare modifiche simili a <c>ebuild_unpack()</c>, in modo che gli utenti possano ignorare il processo standard di estrazione. Questo potrebbe rivelarsi comodo nel caso in cui si debbano applicare delle patch, ooppure se i file sono contenuti in archivi multipli. È una buona idea anche modificare il nostro codice di estrazione in modo che riconosca di default i tarball compressi con bzip2.
</p>

</body>
</section>
<section>
<title>Files di configurazione</title>
<body>

<p>
Finora abbiamo trattato un sacco di tecniche bash, e ora è il momento di introdurne un'altra. Spesso, è comodo per un programma avere un file di configurazione globale residente in <path>/etc</path>. Fortunatamente, questo è semplice da fare usando bash. Create semplicemente il seguente file e salvatelo come <path>/etc/ebuild.conf</path>:
</p>

<pre caption="/ect/ebuild.conf">
<comment># /etc/ebuild.conf: impostare in questo file le opzioni globali ebuild</comment>

<comment># MAKEOPTS sono le opzioni passate a make</comment>
MAKEOPTS="-j2"
</pre>

<p>
In questo esempio, ho incluso una sola opzione di configurazione, ma voi potreste includerne molte di più. Uno dei pregi di bash è che questo file può essere analizzato semplicemente sorgentizzandolo. Questo è un trucco di strutturazione che funziona con la maggiorparte dei linguaggi interpretati. Dopo che <path>/etc/ebuild.conf</path> è stato sorgentizzato, all'interno del nostro script ebuild viene definito <c>$MAKEOPTS</c>. Lo useremo per permettere all'utente di passare opzioni a make. Normalmente, questa opzione sarebbe usata per consentire all'utente di dire a ebuild di effettuare una compilazione parallela. Questo viene spiegato sotto.
</p>

<note>
<b>Cos'è un make parallelo?</b> Per velocizzare la compilazione sui sistemi multiprocessore, make supporta la compilazione di un programma in parallelo. Questo vuol dire che anziché compilare un solo file sorgente alla volta, make compila simultaneamente un numero di file sorgenti definito dall'utente (così vengono utilizzati quei processori extra nei sistemi multiprocessore). Le compilazioni parallele vengono abilitate passando a make l'opzione <c>-j #</c>, in questo modo: <c>make -j4 MAKE="make -j4"</c>. Questo codice dice a make di compilare quattro programmi simultaneamente. L'argomento <c>MAKE="make -j4"</c> dice a make di passare l'opzione <c>-j4</c> a qualunque processo make figlio da esso lanciato.
</note>

<p>
Ecco la versione finale del nostro programma ebuild:
</p>

<pre caption="ebuild, la versione finale">
#!/usr/bin/env bash

if [ $# -ne 2 ]
then
        echo "Please specify ebuild file and unpack, compile or all"
        exit 1
fi

source /etc/ebuild.conf

if [ -z "$DISTDIR" ]
then
        <comment># impostare DISTDIR a /usr/src/distfiles se non è stato già fatto</comment>
        DISTDIR=/usr/src/distfiles
fi
export DISTDIR

ebuild_unpack() {
        <comment>#assicuratevi di essere nella giusta directory</comment>
        cd ${ORIGDIR}
        
        if [ -d ${WORKDIR} ]
        then    
                rm -rf ${WORKDIR}
        fi

        mkdir ${WORKDIR}
        cd ${WORKDIR}
        if [ ! -e ${DISTDIR}/${A} ]
        then
                echo "${DISTDIR}/${A} does not exist.  Please download first."
                exit 1
        fi
        tar xzf ${DISTDIR}/${A}
        echo "Unpacked ${DISTDIR}/${A}."
        <comment>#ora i sorgenti sono stati estratti correttamente</comment>
}

user_compile() {
        <comment>#siamo già in ${SRCDIR}</comment>
        if [ -e configure ]
        then
                <comment>#eseguire lo script configure se esiste</comment>
                ./configure --prefix=/usr
        fi
        <comment>#eseguire make</comment>
        make $MAKEOPTS MAKE="make $MAKEOPTS"  
} 

ebuild_compile() {
        if [ ! -d "${SRCDIR}" ]
        then
                echo "${SRCDIR} does not exist -- please unpack first."
                exit 1
        fi
        <comment>#assicuratevi di essere nella giusta directory</comment>
        cd ${SRCDIR}
        user_compile
}

export ORIGDIR=`pwd`
export WORKDIR=${ORIGDIR}/work

if [ -e "$1" ]
then
        source $1
else
        echo "Ebuild file $1 not found."
        exit 1
fi

export SRCDIR=${WORKDIR}/${P}

case "${2}" in
        unpack)
                ebuild_unpack
                ;;
        compile)
                ebuild_compile
                ;;
        all)
                ebuild_unpack
                ebuild_compile
                ;;
        *)
                echo "Please specify unpack, compile or all as the second arg"
                exit 1
                ;;
esac
</pre>

<p>
Notate che <path>/etc/ebuild.conf</path> è sorgentizzato vicino all'inizio del file. Notate inoltre che utilizziamo <c>$MAKEOPTS</c> nella nostra funzione <c>user_compile()</c>
di default. Potreste chiedervi come farà a funzionare: dopotutto, ci riferiamo a <c>$MAKEOPTS</c> prima di aver sorgentizzato <path>/etc/ebuild.conf</path>, che di fatto definisce <c>$MAKEOPTS</c> come prima cosa. Fortunatamente per noi, questo funziona perché l'espansione della variabile avviene soltanto quando <c>user_compile()</c> viene eseguito.
Quando <c>user_compile()</c> viene eseguito, <path>/etc/ebuild.conf</path> è già stato sorgentizzato, e <c>$MAKEOPTS</c> è impostato al valore corretto.
</p>

</body>
</section>
<section>
<title>Per finire</title>
<body>

<p>
Abbiamo trattato un sacco di tecniche di programmazione bash in questo articolo, ma abbiamo esaminato solo una piccola parte della potenza di bash. Per esempio, il sistema ebuild di Gentoo Linux non solo estrae e compila automaticamente ogni pacchetto, ma può anche:
</p>

<ul>
  <li>
  Scaricare automaticamente i sorgenti, se questi non vengono trovati in <c>$DISTDIR</c>
  </li>
  <li>
  Verificare che i sorgenti non siano corrotti usando i digest MD5
  </li>
  <li>
     Se richiesto, installare l'applicazione compilata all'interno del filesystem, registrando tutti i file installati in modo che il pacchetto possa essere facilmente disinstallato in seguito.
  </li>
  <li>
    Se richiesto, pacchettizzare l'applicazione compilata in un tarball (compresso come si vuole) in modo che possa essere installata successivamente, o su un altro computer, oppure durante il processo di installazione basato su CD (se state costruendo il CD di una distribuzione)
  </li>
</ul>

<p>
In aggiunta, il sistema ebuild ha diverse altre opzioni di configurazione globale, che permettono all'utente di specificare opzioni come le flag di ottimizzazione da usare durante la compilazione, oppure di scegliere se abilitare di default il supporto opzionale per pacchetti come GNOME e slang in quei pacchetti che lo supportano.
</p>

<p>
È chiaro che bash più fare molto più di quanto abbiamo trattato in questa serie di articoli. Spero che abbiate imparato molte cose su questo incredibile strumento, e che siate eccitati all'idea di poter usare bash per velocizzare e migliorare i vostri progetti di sviluppo.
</p>

</body>
</section>
</chapter>

<chapter id="resources">
<title>Risorse</title>
<section>
<title>Link utili</title>
<body>

<ul>
  <li>
     Scaricate il tarball dei sorgenti (<path>sed-3.02.tar.gz</path>) da <uri>ftp://ftp.gnu.org/pub/gnu/sed</uri>
  </li>
  <li>
    Leggete <uri link="/doc/it/articles/bash-by-example-p1.xml">Bash by example: Parte 1</uri>. 
  </li>
  <li>
    Leggete <uri link="/doc/it/articles/bash-by-example-p2.xml">Bash by example: Parte 2</uri>.
  </li>
  <li>
    Visitate l'homepage del <uri link="http://www.gentoo.org">Progetto Gentoo</uri>
  </li>
  <li>
    Consultate il <uri link="http://www.gnu.org/software/bash/manual/bash.html">bash online reference manual</uri>.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>

