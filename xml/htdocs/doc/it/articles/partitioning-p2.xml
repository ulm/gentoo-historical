<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/it/articles/partitioning-p2.xml,v 1.2 2010/03/07 13:30:50 scen Exp $ -->

<guide lang="it" disclaimer="articles">
<title>Il partizionamento in azione, 2a Parte</title>

<author title="Autore">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<!--<author title="Redazione">
  <mail link="nightmorph"/>
</author>-->
<author title="Traduttore">
  <mail link="fprosper@interfree.it">Fabrizio Prosperi</mail>
</author>

<abstract>
In questo secondo articolo sulla modifica dello schema delle partizioni di un
sistema già funzionante, Daniel Robbins mostra come spostare le cartelle /tmp
e /var su una propria partizione condivisa. Descrive anche alcuni trucchi del
mestiere per minimizzare i tempi di inattività del sistema ed evitare gravi
errori.
</abstract>

<!-- La versione originale di questo articolo é stata inizialmente pubblicata sul sito
IBM developerWorks, ed é proprietà di Westtech Information Services.
Questo documento é una versione aggiornata dell'articolo originale, e contiene
diverse migliorie apportate dal Gentoo Linux Documentation team -->

<version>1.4</version>
<date>2010-03-02</date>

<chapter>
<title>Raggruppare i dati</title>
<section>
<title>Introduzione</title>
<body>

<p>
Nel mio <uri link="/doc/it/articles/partitioning-p1.xml">precedente
articolo</uri>, abbiamo spostato con successo la <path>/home</path> su una
nuova partizione.  Adesso é il momento di apprendere come radunare i file che
subiscono frequenti modifiche su una nuova partizione. Perché dovremmo
volerlo fare? Ecco un esempio. I file che subiscono frequenti modifiche
contribuiscono pesantemente alla frammentazione. Uno dei modi migliori per
arginare la frammentazione consiste nell'immagazzinare i file che vengono
modificati spesso in una propria partizione separata. In questo modo le altre
partizioni non vengono toccate dalla frammentazione indotta dai file che
subiscono frequenti modifiche.  Concettualmente é semplice, ma come
realizzarlo in pratica?
</p>

<p>
Prima di tutto, dovete creare una nuova partizione per ospitare i file
modificati di frequente. Potreste voler collocare questa partizione su un altro
disco per migliorare le prestazioni. Vi guiderò attraverso i passi necessari
per spostare entrambe le cartelle <path>/tmp</path> e <path>/var</path> su
questa nuova partizione.
</p>

<warn>
La tecnica seguente descrive come effettuare lo spostamento di una o più
partizioni.  Nonostante questa tecnica consenta di ripristinare il sistema in
caso di fallimento, essa non assicura protezione in caso di errori
dell'utente. In altri termini, ogni volta che si formattano delle partizioni
o si copiano un gran numero di file é possibile che ci si sbagli, digitando
qualcosa di errato, provocando la distruzione di una grande mole di dati.
Perciò é altamente consigliata <e>l'esecuzione di un backup dei file critici
prima di procedere</e>.
</warn>

</body>
</section>
<section>
<title>Creare un filesystem sulla nuova partizione</title>
<body>

<p>
Il primo passo di questo procedimento consiste nel creare una nuova
partizione che sia in grado di contenere <path>/var</path> e
<path>/tmp</path>, con un minimo margine di spazio libero. Potreste
necessitare di un disco aggiuntivo o di una partizione libera (inutilizzata)
che potrà ospitare i file che vengono modificati spesso. Se dovete utilizzare
<c>fdisk</c> o <c>cfdisk</c> per creare la partizione, sarete costretti ad
effettuare il riavvio del sistema.  Si potrà poi formattare la nuova
partizione seguendo i passi qui elencati (potete rimanere in modalità
multiutente mentre li svolgete; vi segnalerò quando sarà necessario passare
in modalità single-user):
</p>

<pre caption="Creare il filesystem">
# <i>mkfs.ext2 /dev/???</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Effettuare il mount su /mnt/rwstorage</title>
<section>
<body>

<p>
Come nel mio precedente articolo, <path>???</path> deve venire sostituito con
il nome del device che ospita la nuova partizione che state creando.  Se
digitate accidentalmente il nome sbagliato distruggerete i dati su una
partizione esistente, quindi state attenti! Dopo aver lanciato questo comando
avrete un filesystem ext2 nuovo di zecca sulla nuova partizione. Siamo quasi
pronti per effettuarne il mount, ma prima creiamo un nuovo mount point.
</p>

<pre caption="Creare il mount point">
# <i>mkdir /mnt/rwstorage</i>
</pre>

<p>
Ho scelto il nome <path>rwstorage</path> per ricordarci che questa specifica
partizione verrá espressamente utilizzata per ospitare i file che vengono
letti e scritti frequentemente. Per effettuare il mount della partizione
digitate:
</p>

<pre caption="Effettuare il mount della partizione">
# <i>mount /dev/??? /mnt/rwstorage</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Creare una nuova /tmp</title>
<section>
<body>

<p>
Ora la partizione è attiva e siamo pronti per creare la nostra nuova
cartella <path>/tmp</path>:
</p>

<pre caption="Creare la nuova cartella /tmp">
# <i>cd /mnt/rwstorage</i>
# <i>mkdir tmp</i>
# <i>chmod 1777 tmp</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Passare in modalitá single-user</title>
<section>
<body>

<p>
La nostra nuova cartella <path>/mnt/rwstorage/tmp</path> dispone dei permessi
confacenti ad una cartella temporanea. Ora passate in modalitá single-user,
dato che dobbiamo copiare la cartella <path>/var</path>. Come al solito,
abbiamo ritardato il piú possibile il passaggio in modalitá single-user. A
questo punto vogliamo assicurarci che nessun programma legga o scriva file in
<path>/var</path>, perció dobbiamo arrestare tutti i servizi (dèmoni),
provocare la disconnessione di tutti gli utenti ed effettuare una rapida
manutenzione digitando:
</p>

<pre caption="Passare in modalitá single-user">
# <i>init 1</i>
</pre>

<p>
Se vi viene richiesta una password per effettuare la manutenzione del sistema,
inseritela. Dovreste trovarvi in una shell di root, e tutti i servizi superflui
verranno interrotti. Create una nuova cartella per ospitare i file della nostra
<path>/var</path> digitando:
</p>

<pre caption="Creare la nuova cartella">
# <i>cd /mnt/rwstorage</i>
# <i>mkdir var</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Copiare la /var</title>
<section>
<body>

<p>
I permessi di default della nostra nuova cartella
<path>/mnt/newstorage/var</path> dovrebbero essere corretti, quindi ora siamo
pronti per copiare tutti i dati della nostra cartella <path>/var</path>
originaria sulla nuova partizione:
</p>

<pre caption="Copiare i dati">
# <i>cd /var </i>
# <i>cp -ax * /mnt/rwstorage/var</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Backup e creazione dei link simbolici</title>
<section>
<body>

<p>
Al termine dell'esecuzione di questo comando, avrete una copia esatta di
<path>/var</path> in <path>/mnt/rwstorage/var</path>. A questo punto
vi potreste chiedere in che modo possiamo portare Linux ad
utilizzare <path>/mnt/rwstorage/var</path> e <path>/mnt/rwstorage/tmp</path>
invece delle cartelle di default presenti nella cartella radice.
Questo obiettivo viene raggiunto facilmente utilizzando dei link simbolici
-- creeremo dei nuovi link simbolici <path>/tmp</path> e <path>/var</path>,
che punteranno alle cartelle corrispondenti in <path>/mnt/rwstorage</path>.
Prima di tutto, effettuiamo un backup delle cartelle originarie:
</p>

<pre caption="Effettuare il backup delle cartelle">
# <i>cd /</i>
# <i>mv var var.old</i>
# <i>mv tmp tmp.old</i>
</pre>

<p>
L'ultima riga probabilmente non è indispensabile, poiché è molto probabile
che non abbiate nulla di importante in <path>/tmp</path>, ma non vogliamo
correre rischi. Ora creiamo i link simbolici:
</p>

<pre caption="Creare i link simbolici">
# <i>cd /</i>
# <i>ln -s /mnt/rwstorage/var /var</i>
# <i>ln -s /mnt/rwstorage/tmp /tmp</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Ultimi ritocchi ad /etc/fstab</title>
<section>
<body>

<p>
Ora, quando qualsiasi utente o programma utilizza <path>/var</path>, verrá
automaticamente reindirizzato su <path>/mnt/rwstorage/var</path>!
Analogamente accadrá per <path>/tmp</path>. Ci rimane un ultimo passo, che
puó comunque essere svolto in modalitá multiutente. È ora di far ripartire
Apache, e di permettere a tutti gli utenti di accedere di nuovo al sistema.
Uscite dal runlevel 1 premendo <c>CTRL-D</c>. Il sistema dovrebbe ripartire
normalmente.  Effettuate l'accesso come utente root.
</p>

<p>
Il passo finale consiste nel configurare <path>/etc/fstab</path> in modo che il
mount di <path>/dev/???</path> venga effettuato su <path>/mnt/rwstorage</path>.
Dovete aggiungere la seguente riga al file <path>/etc/fstab</path>:
</p>

<pre caption="Configurare fstab">
/dev/???   /mnt/rwstorage   ext2   defaults   1   2
</pre>

<impo>
Se state usando una versione del kernel superiore alla 2.3 è molto probabile
che abbiate una riga nel vostro <path>/etc/fstab</path> che assomiglia a
questa:
</impo>

<pre caption="Memoria condivisa">
none   /var/shm   shm   defaults   0   0
</pre>

<p>
Questa riga abilita la memoria condivisa sul vostro sistema, e viene montata
di default in <path>/var</path>. Per fare in modo che questa riga funzioni a
dovere deve trovarsi dopo la riga che avete appena aggiunto. In questo modo,
quando Linux si avvia, effettua dapprima il mount di
<path>/mnt/rwstorage</path> (rendendo cosí  accessibile /var). Solo
successivamente il device shm verrá montato in <path>/var/shm</path>, che in
realtá punta a <path>/mnt/rwstorage/var/shm</path>.  Assicuratevi che le
righe si presentino in quest'ordine:
</p>

<pre caption="Abilitare la memoria condivisa">
/dev/???        /mnt/rwstorage  ext2    defaults       1     2
none            /var/shm        shm     defaults       0     0
</pre>

<p>
Dopo aver salvato le modifiche al file <path>/etc/fstab</path>, il vostro
sistema è stato aggiornato con successo! Dopo aver verificato che tutto
funzioni a dovere, potete cancellare le cartelle di backup
<path>/tmp.old</path> e <path>/var.old</path>. Complimenti -- avete
riconfigurato con successo le partizioni del vostro sistema al fine di
ottimizzarne le prestazioni.
</p>

</body>
</section>
<section id="resources">
<title>Risorse</title>
<body>

<ul>
   <li>
			In <uri link="/doc/it/articles/partitioning-p1.xml">Il partizionamento
			in azione, 1a Parte </uri>, vi mostro passo-passo come spostare la
			cartella <path>/home</path> in una nuova partizione.
   </li>
   <li>
			In <uri link="/doc/it/articles/maximum-swappage.xml">Massimizzare la
			swappage (pagina di swap)</uri>, vi spiego come aumentare sensibilmente
			la performance di swap in Linux
   </li>
   <li>
			In <uri link="/doc/it/articles/partition-planning-tips.xml">Consigli
			sulla progettazione delle partizioni</uri>, illustro alcuni modi per
			organizzare le partizioni del sistema in modo efficace.
   </li>
   <li>
			Consiglio sempre di dare un'occhiata agli <uri
			link="http://tldp.org/docs.html#howto">how-to</uri> disponibili su <uri
			link="http://tldp.org/">The Linux Documentation Project</uri> -- sono
			una preziosa fonte di informazione.
   </li>
</ul>

</body>
</section>
<section>
<title>L'autore</title>
<body>

<p>
Daniel Robbins vive ad Albuquerque, New Mexico. E' stato Presidente/CEO di
Gentoo Technologies Inc., Chief Architect del Gentoo Project ed é co-autore
di numerosi libri pubblicati da MacMillan: Caldera OpenLinux Unleashed, SuSE
Linux Unleashed, e Samba Unleashed. Daniel é coinvolto nell'informatica dai
tempi delle elementari quando venne in contatto con il linguaggio di
programmazione Logo ed una dose potenzialmente letale di Pac Man. Questo
forse spiega perché da allora abbia lavorato come Lead Graphic Artist alla
SONY Electronic Publishing/Psygnosis.  Daniel ama trascorrere il suo tempo
libero con sua moglie Mary e la loro bambina, Hadassah.  Potete mettervi in
contatto con Daniel scrivendo a <mail>drobbins@gentoo.org</mail>.
</p>

</body>
</section>
</chapter>
</guide>
