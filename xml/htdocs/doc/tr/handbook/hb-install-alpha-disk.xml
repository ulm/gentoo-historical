<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<sections>
  <section>
    <title>Blok Aygıtlarına Giriş</title>
    <subsection>
      <title>Blok Aygıtlar </title>
      <body>
        <p>
Bu bölümde sizlere Gentoo Linux'un "disk-orient" yönünü, Linux'un genel yapısını, ve dosya sistemini, disk bölümlerini anlatacağız. Sonrasında disk girdi çıktı yapısını ve dosya sistemiyle devam edeceğiz. Sizlere rehberlik edecek olan bu yazı, size sabitdisk bölümlemede ve dosya sistemi oluşturmada, Gentoo Linux 'unuzu kurmada size yardımcı olacaktır.</p>
        <p>
Başlangıç olarak size<e>Blok aygıtlar </e> hakkında bilgi vereceğiz.  Bildiğimiz en yaygın sabit disk muhtemelen IDE sürücümüz yani <path>/dev/hda</path>. Eğer sisteminiz SCSI sürücü kullanıyorsa tabiki ilk sürücünüz 
<path>/dev/sda</path> olacaktır.
</p>
      </body>
    </subsection>
    <subsection>
      <title>Sabit Disk Bölümleri (Partitions)</title>
      <body>
        <p>
Pratikte mümkün olmamasına rağmen, teorik olarak bütün sabit diskimizi Linux olarak kullanmak mümkün. Ama bunun yerine yönetimi kolaylaştırmak amacı ile bütün sabit diskimizi daha küçük bölümlere ayırmak mümkün. Bu x86 sisteminde <e>bölüm (Partitionen) </e> olarak bilinir. Diğer mimarilerde <e>Slices</e> olarak tanınır.
</p>
      </body>
    </subsection>
    <subsection>
      <title>Bölümler </title>
      <body>
        <p>
Bölümler 3 kısma ayrılır: <e>birincil (primar)</e>, <e>uzatılmış (extended) </e> ve  <e>mantıksal (logical)</e>.
</p>
        <p><e>Birincil bölüm (primary) </e> bölünme bilgilerinin MBR(master boot record) üzerinde yazıldığı bir bölümdür. MBR çok küçük olduğu için (512 bytes) sadece 4 birincil bölüm tanımlanabilir. (Örneğin <path>/dev/hda1</path> 'den  <path>/dev/hda4</path> 'e kadar).
</p>
        <p><e>Uzatılmış bölüm (extended) </e> özel bir bölümdür ve kendi içerisinde başka bölümler içerir. Bunun anlamı, uzatılmış bölüm altında birçok bölünme yapılabilir. 4 bölünme az olduğu için ve geriye uyumluluğu genişletmek için bu bölüm geliştirilmiştir.
</p>
        <p><e>Mantıksal bölümler (logical) </e> Uzatılmış bölümler içinde bulunan bölümdür. Tanımlamaları MBR içerisinde kaydedilmez aksine uzatılmış bölüm içerisinde bu bilgiler saklanır.
</p>
      </body>
    </subsection>
  </section>
  <section>
    <title>Sabit Disk Bölümlerini Tasarlamak</title>
    <subsection>
      <title>Öntanımlı Bölüm Planı</title>
      <body>
        <p>
Eğer sisteminizin disk bölümlerinin şemasını çıkarmakla fazla kafa yormak istemiyorsanız, bizim sizin için hazırladığımız tabloyu kullanabilirsiniz:
</p>
        <table>
          <tr>
            <th>Bölüm</th>
            <th>Dosya sistemi</th>
            <th>Boyut</th>
            <th>Açıklama</th>
          </tr>
          <tr>
            <ti><path>/dev/hda1</path></ti>
            <ti>ext2</ti>
            <ti>32M</ti>
            <ti>Boot bölümü</ti>
          </tr>
          <tr>
            <ti><path>/dev/hda2</path></ti>
            <ti>(swap)</ti>
            <ti>512M</ti>
            <ti>Swap bölümü</ti>
          </tr>
          <tr>
            <ti><path>/dev/hda3</path></ti>
            <ti>ext3</ti>
            <ti>Geriye kalan GB</ti>
            <ti>Root bölümü</ti>
          </tr>
        </table>
        <p>
Eğer sabit disk bölümleri ile ilgili iseniz, kaç tane bölüme ihtiyacımız olduğunu merak ediyorsanız, okumaya devam edin. Aksi takdirde diğer bölüm başlığı olan  <uri link="#fdisk"> fdisk kullanarak diski bölümlere ayırmak</uri> adlı olan bölümümüze geçiniz.
</p>
      </body>
    </subsection>
    <subsection>
      <title>Diskimin kaç tane bölümü ve boyutu ne olmalı?</title>
      <body>
        <p>
Sabit disk bölümlerimizin büyüklüğü sisteminizdeki ortama bağlıdır. Örneğin birçok kullanıcıya sahipseniz muhtemelen  <path>/home</path> dizininizi bölmek isteyeceksiniz. Güvenliği arttırmak ve yedeklemek kolay olacaktır. Eğer Gentoo'yu Mail sunucusu olarak kuracaksanız  <path>/var</path> dizini bölümleyebilirsiniz. İyi bir dosya sistemi seçimi sisteminizin performansını arttıracaktır. Oyun sunucusu olarak kurmak istersenizde birçok program   <path>/opt</path> izini altına kurulacaktır. Bölünmede sebeb hep aynı <path>/home</path>dizininde olduğu gibi aynı: 
Güvenlik ve yedekleme.</p>
        <p>
Görüldüğü gibi, herşey ne elde etmek isteğinize bağlı. Sabit diskinizi bölümlemek size şu avantajları kazandıracaktır:</p>
        <ul>
          <li>
  Her sabit disk bölümü için en iyi performansı elde etmek.
</li>
          <li>
  Sisteminizdeki eğer bozuk bir programcık sürekli sabit diske yazıyorsa sisteminizin tamamıyle kullanılmaz hale gelmesini engellemek.</li>
          <li>
  Gerektiğinde dosya sistemi kontrolü yapılırken paralel kontrol yaparak zamansal olarak gececek olan süreyi kısaltmak.</li>
          <li>
  Bazı sabit disk bölümlerine sadece okuma izni verilerek güvenliği arttırmak.
</li>
        </ul>
        <p>
Bununla birlikte çoklu disk bölümleri büyük bir dezavantaja sahiptir: Eğer doğru düzenlenemezse bölümler arasında tanımlanmamış bilinmeyen boşluklar oluşabilir.
</p>
        <p>
Bir örnek verecek olursak; elimizde bir laptop ve 20GB lik bir sabitdisk bulunmakta websunucusu, mailsunucusu ve gnome içermektedir. Bunu için aşağıdaki bölünmeyi örnek olarak gösterebiliriz:</p>
        <pre caption="Dosya sistemi örneği">
Filesystem    Type    Size  Used Avail Use% Mounted on
/dev/hda5     ext3    509M  132M  351M  28% /
/dev/hda2     ext3    5.0G  3.0G  1.8G  63% /home
/dev/hda7     ext3    7.9G  6.2G  1.3G  83% /usr
/dev/hda8     ext3   1011M  483M  477M  51% /opt
/dev/hda9     ext3    2.0G  607M  1.3G  32% /var
/dev/hda1     ext2     51M   17M   31M  36% /boot
/dev/hda6     swap    516M   12M  504M   2% &lt;not mounted&gt;
<comment>(Unpartitionierter Speicherplatz für zukünftige Benutzung: 2 GB)</comment>
</pre>
        <p>
<path>/usr</path>  dizini %83 olarak görünmekte, çünkü tüm yazılımlar kurulmuş bir haldedir. İnsanlar sabit diskimizin büyük bir bölümünü <path>/var</path> dizinine eşitlediğimizi düşünebilir. Lakin Gentoo tüm programları derlediğinde  <path>/var/tmp/portage</path>dizini altına koyar. Bu durumda en az 1gb <path>/var</path>dizini ne ayırmak gerekecek eğer KDE </p>
      </body>
    </subsection>
  </section>
  <section id="#fdisk">
    <title>Alpha Mimarisinden Fdisk Yardımı İle Bölümleme Yapmak</title>
    <subsection>
      <body>
        <p>
Aşağıdaki tablo nasıl Slice bölümü oluşturacağımız hakkında kısa bir bilgi vermektedir:
</p>
        <table>
          <tr>
            <th>Bölüm</th>
            <th>Açıklama</th>
          </tr>
          <tr>
            <ti><path>/dev/sdaa</path></ti>
            <ti>Swap Partition</ti>
          </tr>
          <tr>
            <ti><path>/dev/sdab</path></ti>
            <ti>Root Partition</ti>
          </tr>
          <tr>
            <ti><path>/dev/sdac</path></ti>
            <ti>Tüm Disk (gerekli)</ti>
          </tr>
        </table>
        <p>
Bölüm ayarlarını kendi isteğinize göre değiştirin.</p>
      </body>
    </subsection>
    <subsection>
      <title>Mevcut DISK'leri Görmek</title>
      <body>
        <p>
Kullanabileceğiniz DISK'leri görmek için aşağıdaki komutu verin:
</p>
        <pre caption="Identifizierung verfügbarer Festplatten">
<comment>(IDE DISK)</comment>      # <i>dmesg | grep 'drive$'</i>
<comment>(SCSI DISK)</comment>     # <i>dmesg | grep 'scsi'</i>
</pre>
        <p>
Bu çıktıda tanınan DISK ve <path>/dev</path> numaraları okunur. Aşağıdaki örnekte SCSI DISK <path>/dev/sda</path> oldugunu kabul ederek :</p>
        <p>
</p>
        <pre caption="fdisk başlatmak">
# <i>fdisk /dev/sda</i>
</pre>
      </body>
    </subsection>
    <subsection>
      <title>Bölümleri Kaldırmak</title>
      <body>
        <p>
Biz ilk olarak tüm Slice bölümlerini diskimizden kaldırmak istiyoruz ('c'-Slice hariç). Aşağıda size nasıl bir slice kaldıracağınız gösterecegiz (ör. biz `a` kullanıyoruz). Bu uygulamayi tüm Slice ler için tekrar edin (gene 'c'-Slice haric)
Mevcut Slice leri görmek için<e> p </e>tuşuna , ve kaldırmak için <e>d </e>tuşuna basıyoruz.

</p>
        <pre caption="Slice kaldırma">
BSD disklabel command (m for help): <i>p</i>

8 partitions:
#       start       end      size     fstype   [fsize bsize   cpg]
  a:        1       235*      234*    4.2BSD     1024  8192    16
  b:      235*      469*      234*      swap
  c:        1      5290*     5289*    unused        0     0
  d:      469*     2076*     1607*    unused        0     0
  e:     2076*     3683*     1607*    unused        0     0
  f:     3683*     5290*     1607*    unused        0     0
  g:      469*     1749*     1280     4.2BSD     1024  8192    16
  h:     1749*     5290*     3541*    unused        0     0

BSD disklabel command (m for help): <i>d</i>
Partition (a-h): <i>a</i>
</pre>
        <p>
Diğer Slice'ler için aynı işlemi uyguladığınız zaman buna benzer liste çıkar :
</p>
        <pre caption="Boş bölümleme tablosunu görüntülemek">
BSD disklabel command (m for help): <i>p</i>

3 partitions:
#       start       end      size     fstype   [fsize bsize   cpg]
  c:        1      5290*     5289*    unused        0     0
</pre>
      </body>
    </subsection>
    <subsection>
      <title>Swap Slice Yaratmak</title>
      <body>
        <p>
Alpha tabanlı sistemlerde ek olarak <path>/boot</path> bölümü yapmanız gerekmez. <c>aboot</c> Image ilk silindire konulduğu için bu kullanamazsınız.
</p>
        <p>
Ücüncü Silindirde balıyan 1 GB büyüklüğünde swap (takas) slice olusturacağız. Yeni slice oluşturmak için <c>n</c> tuşuna basın, oluşturduktan sonra typ <c>1</c> ile swap a değiştirin.
</p>
        <pre caption="Swap Slice olusturma">
BSD disklabel command (m for help): <i>n</i>
Partition (a-p): <i>a</i>
First cylinder (1-5290, default 1): <i>3</i>
Last cylinder or +size or +sizeM or +sizeK (3-5290, default 5290): <i>+1024M</i>

BSD disklabel command (m for help): <i>t</i>
Partition (a-c): <i>a</i>
Hex code (type L to list codes): <i>1</i>
</pre>
        <p>
Bu işlemlerden sonra böyle bir tabloyla karşılaşacaksınız:
</p>
        <pre caption="Swap Slice olusturduktan sonraki Slice tablosu">
BSD disklabel command (m for help): <i>p</i>

3 partitions:
#       start       end      size     fstype   [fsize bsize   cpg]
  a:        3      1003      1001       swap
  c:        1      5290*     5289*    unused        0     0
</pre>
      </body>
    </subsection>
    <subsection>
      <title>Kök (root) Slice Oluşturmak</title>
      <body>
        <p>
Swap Slice'den sonra birinci Silinderden başlıyarak root Slice oluşturacağız. <c>p</c> tusuna basarak Swap Slice'nin nerde bittiğini öğrenin. Örneğin bizde bu 1003, yani Root Slice 1004 de başlıyor.
</p>
        <p>
fdiskdeki bi problem, diskin cylinder sayısını 1 fazla görmesi, size son cylinder sorduğu zaman, gerek olanından 1 eksilterek cevap verin.
</p>
        <p>
Slice oluşturulduktan sonra <c>ext2 </c>için Typ <e>8</e> olarak değiştirin.
</p>
        <pre caption="Root Slice oluşturma ">
D disklabel command (m for help): <i>n</i>
Partition (a-p): <i>b</i>
First cylinder (1-5290, default 1): <i>1004</i>
Last cylinder or +size or +sizeM or +sizeK (1004-5290, default 5290): <i>5289</i>

BSD disklabel command (m for help): <i>t</i>
Partition (a-c): <i>b</i>
Hex code (type L to list codes): <i>8</i>
</pre>
        <p>
Bu işlemlerden sonra böyle bir tabloyla karşılacaksınız:
</p>
        <pre caption="Ansicht des Slice Layout">
BSD disklabel command (m for help): <i>p</i>

3 partitions:
#       start       end      size     fstype   [fsize bsize   cpg]
  a:        3      1003      1001       swap
  b:     1004      5289      4286       ext2
  c:        1      5290*     5289*    unused        0     0
</pre>
      </body>
    </subsection>
    <subsection>
      <title>Slice Tablosunu Kaydetmek ve fdiskten Çıkmak</title>
      <body>
        <p>
Slice Tablosunu kaydedip <c>fdisk</c> 'ten çıkmak için <c>w</c> tuşuna basın.
</p>
        <pre caption="fdisk ayarlarını kaydedip çıkmak">
Command (m for help): <i>w</i>
</pre>
      </body>
    </subsection>
  </section>
  <section id="filesystems">
    <title>Dosya Sistemimizi Yaratmak</title>
    <subsection>
      <title>Giriş</title>
      <body>
        <p>
Şimdiye kadar sabitdisk bölümlerimizi yarattık. Şimdi üzerilerine dosya sistemlerini yazmaya geldi. Dosya sistemini seçmek için endişelenmeyin, öntanımlı olan dosya sistemlerini kullanacaksınız, dosya sistemlerinin ne olduğunu bilmek isteyen okumaya devam etsin okumak istemeyenler  <uri link="#filesystems-apply">Dosya Sistemlerini Bölümlere Uygulama </uri> adlı başlıktan itibaren okumaya devam edebilirler.. Aksi taktirde mevcut dosya sistemlerini okumaya devam edin...

</p>
      </body>
    </subsection>
    <subsection>
      <title>Dosya Sistemleri</title>
      <body>
        <p>
Linux'un çekirdek yapısı çok çeşitli dosya sistemini destekler. Bunlardan birçoğu amd64 için stabil olarak ifade edilir.Fakat bazıları stabil olarak tanımlanmazlar. AMD64 için Stabil olarak tanımlanan bazı dosya sistemler şunlardır :  ext2 ve ext3- JFS ve ReiserFS .</p>
        <p>
<b>ext2</b> güvenilirliği denenmiş bir dosya sistemi biçimidir. Fakat "metadata journaling" özelliğine sahip değildir. Bunun anlamı ise ext2 dosya sistemi açılışta herseferinde başlangıç zamanını kontrol eder. Bu da zaman kaybına neden olur. Artık tamamiyle yeni bir nesil olan "journaled" dosya sistemi bulunmaktadır. Ve daha çok tercih edilmektedir. "journaled" dosya sistemleri, bilgisayarınızı yeniden başlattığınız da ve dosya sisteminizin kararsız bir durumda olduğunda geçikmeyi önler.
</p>
        <p>
<b>ext3</b> ext2 'nin "journaled" halidir ve tüm sistemi hızlı geri almak için "metadata journaling" özelliğine sahiptir. Eğer bu seçenekleri arttırmak istersek "full data" ve "ordered data journaling" buna örnektir. Ext3 "hashed b-tree indexing" özelliği ile çok yüksek performans sağlar. Ext3 mükemmel bir dosya sistemidir.</p>
        <p>
<b>ReiserFS</b>  ise "B*-tree" tabanlı bir dosya sistemidir. ReiserFS, ext2 ve ext3 gibi çok iyi performansa sahiptir. ReiserFS ayrıca "metadata journaling" özelliğine de sahiptir. Özellikle 2.4.18+ sürümleri için mevcuttur. ReiserFS çok büyük boyutlarda sabit disk bölümleri yaratmak isteyeceğiniz zaman kullanacağiniz dosya sistemi olmalıdır.
</p>
        <p>
<b>XFS</b>  Gentoo Linux'un tam destek( xfs-sources kerneli) verdiği "metadata journaling" özelliğine sahip bir dosya sistemidir. Bu sistemi sadece SCSI ve UPS sistemi olanlara tavsiye ederiz. Çünkü XFS dosya sistemi RAM ile çok ilişki içindedir ve kullandığınız bir program herhangi bir sebebte dolayı çökerse verilerinizin kaybolmasına sebep olabilir.</p>
        <p>
<b>JFS</b>   IBM tarafından geliştirilen yüksek performanslı "journaling" dosya sistemidir. Yeni bir dosya sistemidir ve henüz daha sağlamlığı hakkında fazla deliller bulunmamaktadır.
</p>
      </body>
    </subsection>
    <subsection id="filesystems-apply">
      <title>Dosya Sistemlerini Bölümlere Uygulama</title>
      <body>
        <p>
Bir disk bölümü üzerine istediğimiz dosya sistemini kurmak için gerekli küçük programlar bulunmaktadır. Bunlar aşağıdaki tabloda belirtilmiştir:
</p>
        <table>
          <tr>
            <th>Dosya sistemi</th>
            <th>Komut</th>
          </tr>
          <tr>
            <ti>ext2</ti>
            <ti><c>mke2fs</c></ti>
          </tr>
          <tr>
            <ti>ext3</ti>
            <ti><c>mke2fs -j</c></ti>
          </tr>
          <tr>
            <ti>reiserfs</ti>
            <ti><c>mkreiserfs</c></ti>
          </tr>
          <tr>
            <ti>xfs</ti>
            <ti><c>mkfs.xfs</c></ti>
          </tr>
          <tr>
            <ti>jfs</ti>
            <ti><c>mkfs.jfs</c></ti>
          </tr>
        </table>
        <p>
Boot bölümünü boot bölümünü (yani bizim örneğimizde <path>/dev/hda1</path> ) ext2 olarak ve kök (root) ( bizim örneğimizde <path>/dev/hda3</path> ext3 olarak tanımlamak istersek:</p>
        <pre caption="Dosya Sistemlerini Uygulama">
# <i>mke2fs /dev/hda1</i>
# <i>mke2fs -j /dev/hda3</i>
</pre>
        <p>
Şimdi dosya sistemlerini daha önceden yarattığımız sabit disk bölümleri için ayarlamış olduk.</p>
      </body>
    </subsection>
    <subsection>
      <title>Takas (Swap) Alanını Aktif Hale Getirmek</title>
      <body>
        <p>
<c>mkswap</c> komutu bizim işimizi görecek ve takas alanımızı yaratacaktır:
</p>
        <pre caption=" takas alanı yaratma  # ">
# <i>mkswap /dev/hda2</i>
</pre>
        <p>
Takas alanını etkin hale sokmak için kullanacağımız komut ise <c>swapon</c>:
</p>
        <pre caption="Takas alanını aktif hale getirme">
# <i>swapon /dev/hda2</i>
</pre>
        <p>
Takas alanımız oluşturuldu ve başarıyla aktif edildi.</p>
      </body>
    </subsection>
  </section>
  <section>
    <title>Sabit Disk Bölümlerini Bağlamak (Mounting)</title>
    <body>
      <p>
Sabitdisk bölümlerimiz hazır ve dosya sistemlerimiz için ev sahipliği yapıyor. Şimdi sıra sabitdisk bölümlerimizi bağlamaya geldi. Kullanacağımız komut:  <c>mount</c>
Sabitdisk bölümlerimizi bağlamadan önce her bölüm için dizin yaratmayı unutmayın. Aşağıdaki örnekte biz kök ve boot bağladık: 
</p>
      <pre caption="Sabit disk bölümlerini bağlamak">
# <i>mount /dev/hda3 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/hda1 /mnt/gentoo/boot</i>
</pre>
      <note>
Eğer  <path>/tmp</path> dizinini ayrı bir sabitdisk bölümüne koymak istiyorsanız, bağlamadan önce aşağıdaki komutunu kullanarak izin verdiğinizden emin olun: <c>chmod 1777 /mnt/gentoo/tmp</c>.  Aynı şey  <path>/var/tmp</path> dizini içinde geçerlidir.
</note>
      <p>
Ayrıca çekirdeğimiz için <path>/proc</path> dizinini bağlamamız gerek. Bunu yapmak için ilk olarak  
<path>/mnt/gentoo/proc</path> dizinini oluşturmak sonra mount ile bağlamamız gerekli:</p>
      <pre caption="/mnt/gentoo/proc bağlanma noktası oluşturma">
# <i>mkdir /mnt/gentoo/proc</i>
# <i>mount -t proc none /mnt/gentoo/proc</i>
</pre>
      <p>
Şimdi diğer bölüme geçebilirsiniz : <uri link="?part=1&amp;chap=5"> Gentoo Kurulum Dosyalarının Kurulması</uri> 
</p>
    </body>
  </section>
</sections>
