<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<sections>
  <section>
    <title>Çalışma Seviyeleri(run levels)</title>
    <subsection>
      <title>Sisteminizi Önyükleme</title>
      <body>
        <p>
Sisteminizi önyüklediğinizde, birçok kayan yazıyı farkedersiniz. Eğer dikkatlice takip ederseniz, bu yazıların sisteminizi her açtığınızda aynı olduğunu görürsünüz. Bu işlemler dizisinin tamamına <e>açılış dizisi</e> denir ve (az ya da çok) statik olarak belirtilir.
</p>
        <p>
Önce, açılış yöneticisi, ayar dosyasında belirttiğiniz kerneli hafızaya yükler, sonra da işlemciye kerneli çalıştırmasını söyler. Kernel yüklenip çalıştırıldığında, kernele özgü yapı ve görevleri başlatır ve <e>init</e> sürecini çalıştırır.
</p>
        <p>
Bu süreç, daha sonra (<path>/etc/fstab</path> içinde tanımlı) bütün dosya sistemlerinin bağlanıp kullanıma hazır olduğundan emin olur. Sonra da <path>/etc/init.d</path> içinde bulunan, sisteminizin başarılı bir şekilde açılması için gerekli servisleri başlatacak çeşitli betikleri çalıştırır.</p>
        <p>
Son olarak, bütün betikler çalıştırıldığında, <c>init </c>süreci, agetty adındaki özel süreci bağlayarak terminalleri (genellikle <c>ALT-F1, ALT-F2, ...</c> altındaki sanal konsolları) aktifleştirir. Bu süreç daha sonra <c>login</c>'i çalıştırarak terminallere bağlanabileceğinizden emin olur.
</p>
      </body>
    </subsection>
    <subsection>
      <title>Açılış Betikleri (Init Scripts)</title>
      <body>
        <p>
Burada<c>init</c> , <path>/etc/init.d</path>
 ,çindeki betikleri rastgele çalıştırmaz. Hatta  <path>/etc/init.d</path> içindeki her betiği değil, sadece çalıştırması söylenenleri çalıştırır. Hangi betikleri çalıştırması gerektiğine <path>/etc/runlevels</path> içine bakarak karar verir. </p>
        <p>
Önce  <c>init</c> , <path>/etc/runlevels/boot</path> içinde sembolik bağlantısı olan <path>/etc/init.d </path>betiklerini çalıştırır. Genellikle, betiklere alfabetik sırada başlar, ama bazı betikler bağımlılık bilgisi içerir ve çalışmadan önce başka hangi betiklerin çalıştırılması gerektiğini sisteme söyler.

</p>
        <p>
<path>/etc/runlevels/boot</path> içinde referansı bulunan her betik çalıştırıldıktan sonra <c>init</c>,  <path>/etc/runlevels/default</path> içinde sembolik bağlantısı olan betikleri çalıştırır. Tekrar, hangi betiğin önce çalışacağına, düzgün bir başlangıç süreci sağlamak için içerisinde bağımlılık bilgisi içermediği sürece alfabetik sırayı kullanarak karar verir.</p>
      </body>
    </subsection>
    <subsection>
      <title>Init Nasıl Çalışır</title>
      <body>
        <p>
Elbette <c>init </c>bunların hepsini kendisi düşünmez. Hangi işlemlerin yapılacağını belirten bir konfigürasyon dosyasına ihtiyaç duyar. Bu konfigürasyon dosyası <path>/etc/inittab</path>'dir.</p>
        <p>
Eğer size biraz önce açıkladığımız açılış dizisini hatırlarsanız, <c>init</c>'in ilk işi dosya sistemlerini bağlamaktır. Bu, <path>/etc/inittab</path> içindeki şu satır ile belirtilmiştir:</p>
        <pre caption="/etc/inittab içindeki sistem başlangıcı satırı">
si::sysinit:/sbin/rc sysinit
</pre>
        <p>
Bu satır <c>init</c>'e, sistemi başlatmak için <c>/sbin/rc sysinit</c> komutunu çalıştırması gerektiğini söyler. <c>/sbin/rc</c> betiği, başlangıç işlemlerini halleder, bu yüzden <c>init</c>'in çok iş yapmadığını -- sistem başlangıç işlemlerinin yapılması işini başka süreçlere aktarır.
</p>
        <p>
İkinci olarak <c>init</c>, <path>/etc/runlevels/boot</path> içinde sembolik bağlantısı buşunan bütün betikleri çalıştırır. Bu, aşağıdaki satır ile tanımlanmıştır:</p>
        <pre caption="Sistem başlangıcı, devamı">
rc::bootwait:/sbin/rc boot
</pre>
        <p>
Yine <c>rc </c>betiği, gerekli işlemleri gerçekleştirir. Dikkat ederseniz, rc'ye verilen parametre (<e>boot</e>), <path>/etc/runlevels </path>altındaki altdizin ile aynıdır.</p>
        <p>
Şimdi <c>init</c>, hangi çalışma seviyesinin kullanılacağını görmek için konfigürasyon dosyasını kontrol eder. Buna karar vermek için, <path>/etc/inittab</path>'deki aşağıdaki satırı okur:</p>
        <pre caption="initdefault satırı">
id:3:initdefault:
</pre>
        <p>
Bu durumda (Gentoo kullanıcılarının çoğunun kullanacağı) çalışma seviyesi (<e>runlevel</e>) 3'tür. Bu bilgiyi kullanarak init, 3 numaralı çalışma seviyesi için neyi çalıştırması gerektiğini kontrol eder:</p>
        <pre caption="Çalışma seviyeleri tanımlamaları">
l0:0:wait:/sbin/rc shutdown
l1:S1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
</pre>
        <p>
TSeviye 3'ü tanımlayan satır, servisleri çalıştırmak için tekrar<c> rc </c>betiğini (default argümanını ile) kullanır. Tekrar, <c>rc</c>'nin argümanının <path>/etc/runlevels</path> içindeki altdizin ile aynı olduğuna dikkat edin.
</p>
        <p>
<c>rc </c>bittiğinde, <c>init</c> hangi sanal konsolları aktifleştirmesi ve her konsolda hangi komutları çalıştırması gerektiğine karar verir:</p>
        <pre caption="Sanal konsol tanımlaması">
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
</pre>
      </body>
    </subsection>
    <subsection>
      <title>Çalışma Seviyesi Nedir?</title>
      <body>
        <p>
<c>Init</c>'in hangi çalışma seviyesini aktifleştireceğine karar vermesi için bir numaralandırma yöntemi kullandığını gördünüz. Bir çalışma seviyesi, sisteminizin hangi durumda çalıştığıdır ve bir çalışma seviyesine girdiğinizde çalıştırılması gereken betik topluluğunu (çalışma seviyesi betikleri ya da init betikleri) içerir.
</p>
        <p>
Gentoo'da, yedi çalışma seviyesi tanımlanmıştır: üç dahili çalışma seviyesi ve dört kullanıcı tanımlı çalışma seviyesi. Dahili çalışma seviyeleri<c> sysinit</c>, <c>shutdown</c> ve <c>reboot</c>'tur ve isimlerinin ima ettiği işleri yaparlar: sistemi başlat, sistemi kapat, sistemi yeniden başlat.


</p>
        <p>
Kullanıcı tanımlı çalışma seviyeleri de <path>/etc/runlevels</path> içinde altdizini bulunan <e>boot</e>, <e>default</e>, <e>nonetwork</e> ve <e>single</e>'dır. <e>boot</e> çalışma seviyesi, diğer tüm çalışma seviyelerinin kullandığı, sisteme gereken tüm servisleri çalıştırır. Geri kalan üç çalışma seviyesi de, çalıştırdıkları servislere göre farklılık gösterirler: d<e>efault</e>, günlük yapılan işler için kullanılır; <e>nonetwork</e>, ağ bağlantısı gerekmediğinde kullanılır; single ise sistemi onarmak istediğinizde kullanılır.

</p>
      </body>
    </subsection>
    <subsection>
      <title>Init Betikleri ile Çalışma</title>
      <body>
        <p>
<c>rc </c>sürecinin başlattığı betiklere init betikleri denir. <path>/etc/init.d</path> içindeki her betik <e>start</e>, <e>stop</e>,<e> restart</e>, <e>pause</e>, <e>zap</e>, <e>status</e>, <e>ineed</e>, <e>iuse</e>, <e>needsme</e>, <e>usesme</e> veya <e>broken</e> argümanları ile çalıştırılabilir.

</p>
        <p>
Bir servisi (ve bağlı tüm servisleri) başlatmak, durdurmak ya da yeniden başlatmak için, <c>start</c>, <c>stop</c> ve <c>restart</c> kullanılır:</p>
        <pre caption="Postfix'i başlatma">
# <i>/etc/init.d/postfix start</i>
</pre>
        <note>
<e>Sadece</e> belirtilen servise ihtiyaç duyan servisler durdurulur yada yeniden başlatılır. Diğer <e>bağımlı</e> servislere (servisi kullanan ama ihtiyaç duymayanlara) dokunulmaz.
</note>
        <p>
Eğer bir servisi durdurmak istiyorsanız, ama ona bağlı servisleri durdurmak istemiyorsanız, <c>pause</c> argümanını kullanabilirsiniz:</p>
        <pre caption="Postfix'i durdurma ve bağlı servisleri çalışır durumda bırakma">
# <i>/etc/init.d/postfix pause</i>
</pre>
        <p>
Eğer bir servisin durumunu öğrenmek istiyorsanız (başlamış, durmuş, bekletilmiş), <c>status</c> argümanını kullanabilirsiniz:</p>
        <pre caption="Postfix'in durum bilgisi">
# <i>/etc/init.d/postfix status</i>
</pre>
        <p>
Eğer durum bilgisi size servisin çalıştığını gösteriyorsa, ancak öyle olmadığını biliyorsanız, servisin durum bilgisini <c>zap</c> argümanı ile "durdurulmuş" konuma sıfırlayabilirsiniz:
</p>
        <pre caption="Postfix'in durum bilgisini sıfırlama">
# <i>/etc/init.d/postfix zap</i>
</pre>
        <p>
Servisin hangi bağımlılıklara sahip olduğunu öğrenmek için <c>iuse</c> ve <c>ineed</c> argümanlarını kullanabilirsiniz. <c>ineed </c>ile servisin çalışması için hangi servislerin bulunması gerektiğini görebilirsiniz. Diğer taraftan, <c>iuse</c> ile servis tarafından kullanılabilen, ancak çalışması için bulunması zorunlu olmayan servislerin listesini görebilirsiniz.
</p>
        <pre caption="Postfix'in ihtiyaç duyduğu servislerin listesini isteme">
# <i>/etc/init.d/postfix ineed</i>
</pre>
        <p>
Benzer olarak, servise ihtiyaç duyan servislerin (<c>needsme</c>) ve servisi kullanabilen servislerin (<c>usesme</c>) listesini öğrenebilirsiniz:
</p>
        <pre caption="Postfix'e ihtiyaç duyan servislerin listesini isteme">
# <i>/etc/init.d/postfix needsme</i>
</pre>
        <p>
Son olarak, servis için gerekli olan kayıp servislerin listesini de öğrenebilirsiniz:
</p>
        <pre caption="Postfix'in ihtiyaç duyduğu kayıp servislerin listesini isteme">
# <i>/etc/init.d/postfix broken</i>
</pre>
      </body>
    </subsection>
  </section>
  <section>
    <title>rc-update ile Çalışma
</title>
    <subsection>
      <title>rc-update nedir?</title>
      <body>
        <p>
Gentoo'nun init sistemi hangi servislerin önce çalıştırılması gerektiğine karar veren bir bağımlılık ağacı kullanır. Bu can sıkıcı iş yüzünden kullanıcılarımızın bunu el ile yapmalarını istemiyorduk, çalışma seviyeleri ve init betiklerinin yönetimini kolaylaştırmak için bazı araçlar hazırladık.</p>
        <p>
<c>rc-update</c> sayesinde, bir çalışma seviyesine init betiği ekleyip çıkarabilirsiniz. Sonra <c>rc-update </c>aracı otomatik olarak <c>depscan.sh</c> betiğinden bağımlılık ağacını oluşturmasını ister.
</p>
      </body>
    </subsection>
    <subsection>
      <title>Servis Ekleme ve Çıkarma</title>
      <body>
        <p>
Daha önce, Gentoo kurulumu sırasında init betiklerini "default" çalışma seviyesine eklediniz. O zamanda, "default"un ne için olduğu hakkında bilginiz yoktu, ama şimdi olmalı. <c>rc-update</c> betiği bir argümana ihtiyaç duyar: <e>add  (eklemek için)</e>, <e>del (silmek için)</e> veya <e>show  (göstermek için)</e>.

</p>
        <p>
Init betiği eklemek ya da çıkarmak için, <c>rc-update</c>komutuna <e>add</e> veya <e>del </e>argümanlarını verin, ardından init betiğini ve çalışma seviyesini yazın. Mesela:</p>
        <pre caption="default çalışma seviyesinden Postfix'i çıkarma">
# <i>rc-update del postfix default</i>
</pre>
        <p>
<c>rc-update show </c>komutu size bütün init betiklerini ve hangi çalışma seviyesinde çalıştıklarını gösterir:
</p>
        <pre caption="Init betiği bilgisini alma">
# <i>rc-update show</i>
</pre>
      </body>
    </subsection>
  </section>
  <section>
    <title>Servisleri Ayarlama</title>
    <subsection>
      <title>Fazladan Ayarlamaya Olan İhtiyaç Neden?</title>
      <body>
        <p>
Init betikleri oldukça karmaşık olabilir. Bu yüzden kullanıcıların init betiklerini doğrudan düzenlemesi çekici olmayabilir, ayrıca betikleri hata eğilimli hale getirebilir. Bununla beraber, herhangi bir servis ayarlamasını yapabilmek önemlidir. Mesela bir servisin kendisine daha fazla opsiyon eklemek isteyebilirsiniz.</p>
        <p>
Bu konfigürasyonu init betiğinin dışından yapmak için ikinici bir sebep, konfigürasyon değişikliklerinizin yapılmamış olmasından korkmadan güncelleme yapabilmektir.</p>
      </body>
    </subsection>
    <subsection>
      <title>/etc/conf.d Dizini</title>
      <body>
        <p>
Gentoo, bir servisi konfigüre etmek için kolay bir yol sunar: konfigüre edilebilen her init betiği <path>/etc/conf.d </path>içinde bir dosyaya sahiptir. Mesela, apache2 init betiği (<path>/etc/init.d/apache2</path>), Apache 2 sunucusu başlatılırken verilecek opsiyonları içeren <path>/etc/conf.d/apache2</path> içinde bir konfigürasyon dosyasına sahiptir:

</p>
        <pre caption="/etc/conf.d/apache2 içinde tanımlanmış değişken">
APACHE2_OPTS="-D PHP4"
</pre>
        <p>
Böyle bir konfigürasyon dosyası değişkenleri ve yalnız olan değişkenleri (tıpkı <path>/etc/make.conf</path> gibi) içerir, servisleri konfigüre etmeyi çok kolay hale getirir. Ayrıca (yorumlar ile) değişkenler hakkında daha fazla bilgi vermeyi de sağlar.
</p>
      </body>
    </subsection>
  </section>
  <section>
    <title>Init Betikleri Yazma</title>
    <subsection>
      <title>Yazmak zorunda mıyım?</title>
      <body>
        <p>
Hayır. Gentoo, sunulan servisler için kullanıma hazır init betikleri sunduğundan, init betikleri yazmak çoğu zaman gerekli değildir. Ancak, Portage kullanmadan bir servis kurduğunuzda, muhtemelen kendi init betiğinizi yaratmanız gerekebilir.</p>
        <p>
Açık şekilde Gentoo için yazılmamışsa, bir servis ile sunulan init betiğini kullanmayın: Gentoo'nun init betikleri diğer dağıtımların kullandığı init betikleri ile uyumlu değildir!</p>
      </body>
    </subsection>
    <subsection>
      <title>Düzen (Layout)</title>
      <body>
        <p>
Bir init betiğinin temel yapısı aşağıda gösterilmiştir:</p>
        <pre caption="Bir init betiğinin temel yapısı">
#!/sbin/runscript

depend() {
  <comment>(Dependency information)</comment>
}

start() {
  <comment>(Commands necessary to start the service)</comment>
}

stop() {
  <comment>(Commands necessary to stop the service)</comment>
}

restart() {
  <comment>(Commands necessary to restart the service)</comment>
}
</pre>
        <p>
Her init betiğinde <e>start()</e> fonksiyonunun tanımlı olması <e>gerekir</e>. Diğerleri ihtiyaca göre değişebilir.</p>
      </body>
    </subsection>
    <subsection>
      <title>Bağımlılıklar</title>
      <body>
        <p>
Tanımlayabileceğiniz iki bağımlılık vardır: <c>use</c> ve <c>need</c>. Daha önce belirttiğimiz gibi, <e>need</e> bağımlılığı <e>use </e>bağımlılığından daha katıdır. Bu bağımlılık tipini takip ederek, bağımlı olduğunuz servise, ya da sanal bağımlılığa girersiniz.


</p>
        <p>
<e>Sanal</e> bağımlılık, bir servisin sağladığı, ancak yalnızca o servis tarafından sağlanmayan bir bağımlılıktır. Sizin init betiğiniz sistem kayıt edicisine bağlı olabilir, ancak pek çok sistem kayıt edicisi (metalogd, syslog-ng, sysklodg, ...) vardır. Her birine tek tek ihtiyaç duymayacağınız (need) için (hiçbir mantıklı sistemde bütün bu sistem kayıt edicilerin hepsi yüklü ve çalışır durumda değildir), biz bütün bu servislerin sanal bağımlılık sağladığından (provide) emin olduk.
</p>
        <p>
Postfix servisine ait bağımlılık bilgisine bakalım:
</p>
        <pre caption="Postfix için bağımlılık bilgisi">
depend() {
  need net
  use logger dns
  provide mta
}
</pre>
        <p>
Gördüğünüz gibi, postfix servisi:
</p>
        <ul>
          <li>
    <c>net</c> bağımlılığına (sanal) ihtiyaç duyar (mesela, <path>/etc/init.d/net.eth0</path> ile sağlanan))
  </li>
          <li>
     <c>logger</c>  bağımlılığını (sanal) kullanır (mesela<path>/etc/init.d/syslog-ng</path> ile sağlanan)
  </li>
          <li>
    <c>dns</c>  bağımlılığını (sanal) kullanır (mesela<path>/etc/init.d/named</path> ile sağlanan))
  </li>
          <li>
     <c>mta</c> bağımlılığı (sanal) sağlar (tüm mail sunucular için ortak olan)
</li>
        </ul>
      </body>
    </subsection>
    <subsection>
      <title>Sıralamayı Kontrol Etme</title>
      <body>
        <p>
Birçok durumda, bir servise ihtiyaç duymazsınız ama servisinizin, bu servis sisteminizde varsa, ondan  önce (<c>before</c>) ya da sonra (<c>after</c>) çalışması gerekebilir (şarta dikkat edin - bu artık bağımlılık değildir), ve aynı çalışma seviyesinde çalışır (şarta dikkat edin - sadece aynı çalışma seviyesindeki servisler birbirine bağlanabilir). Bu bilgiyi <c>before </c>ve <c>after</c> ayarları ile sağlayabilirsiniz.

<e></e></p>
        <p>
Örnek olarak Portmap servisinin ayarlarına bakalım:</p>
        <pre caption="Portmap servisinin depend() fonksiyonu">
depend() {
  need net
  before inetd
  before xinetd
}
</pre>
        <p>
Ayrıca "*" işaretini kullanarak çalışma seviyesindeki tüm servisleri temsil edebilirsiniz, ancak bu tavsiye edilmez.</p>
        <pre caption="Bir init betiğini çalışma seviyesinde ilk çalıştırma">
depend() {
  before *
}
</pre>
      </body>
    </subsection>
    <subsection>
      <title>Standart Fonksiyonlar</title>
      <body>
        <p>
<c>depend()</c> işlevselliğinden sonra, bir de <c>start()</c> fonksiyonunu tanımlamalısınız. Bu, servisinizi başlatmak için gerekli tüm komutları içerir. <c>ebegin</c> ve <e>eend</e> fonksiyonlarını kullanarak kullanıcıya ne olup bittiği konusunda bilgilendirmek tavsiye edilir:
</p>
        <pre caption="Örnek start() fonksiyonu">
start() {
  ebegin "Starting my_service"
  start-stop-daemon --start --quiet --exec /path/to/my_service
  eend $?
}
</pre>
        <p>
Eğer <c>start()</c> fonksiyonu ile ilgili daha fazla örnek görmek istiyorsanız, lütfen <path>/etc/init.d</path> dizininizdeki init betiklerinin kaynak kodlarını okuyun. Daha fazla bilgiye ihtiyaç duyarsanız, <c>start-stop-daemon </c>için mükemmel bir klavuz sayfası (man sayfası) bulunmaktadır:

</p>
        <pre caption="start-stop-daemon hakkındaki man sayfasını okuma">
# <i>man start-stop-daemon</i>
</pre>
        <p>
Tanımlayabileceğiniz diğer fonksiyonlar şunlardır: <c>stop()</c> ve <b>restart()</b>. Bu fonksiyonları tanımlamaya zorlanmamaktasınız! Bizim init sistemimiz bu fonksiyonları kendisi dolduracak kadar zekidir, tabi <c>start-stop-daemon</c> kullanırsanız.


</p>
      </body>
    </subsection>
    <subsection>
      <title>Özel Seçenekler Ekleme</title>
      <body>
        <p>
Eğer kendi init betiklerinizin, daha önce karşılaştığımız seçeneklerden daha fazlasını desteklemesini istiyorsanız, istediğiniz seçeneği <c>opts</c> değişkenine eklemeli, ve aynı isimde bir fonksiyon yaramalısınız. Örneğin, <c>restartdelay </c>adında bir seçenek eklemek için:</p>
        <pre caption="restartdelay seçeneğini ekleme">
opts="${opts} restartdelay"

restartdelay() {
  stop()
  sleep 3    <comment># Başlatmadan önce 3 saniye bekle</comment>
  start()
}
</pre>
      </body>
    </subsection>
    <subsection>
      <title>Servis Ayar Değişkenleri</title>
      <body>
        <p>

<path>/etc/conf.d</path> içinde bir konfigürasyon dosyası kullanmak için yapmanız gereken ek birşey yoktur. Init betiğiniz çalıştırıldığında, aşağıdaki dosyalar otomatik olarak okunur (örneğin kullanılabilir değişkenler):</p>
        <ul>
          <li><path>/etc/conf.d/&lt;sizin init betiğiniz&gt;</path></li>
          <li><path>/etc/conf.d/basic</path></li>
          <li><path>/etc/rc.conf</path></li>
        </ul>
        <p>
Ayrıca, eğer init betiğiniz sanal bir bağımlılık ( <c>net</c> gibi), ağlıyorsa, ilişkilendirilen bağımlılığa ait konfigürasyon da (<path>/etc/conf.d/net</path> gibi) okunur.
</p>
      </body>
    </subsection>
  </section>
  <section>
    <title>Çalışma Seviyesi Davranışını Değiştirme</title>
    <subsection>
      <title>Bundan Kim Yararlanabilir?</title>
      <body>
        <p>
Birçok dizüstü bilgisayar kullanıcısı bu durumu bilir: evdeyken <c>net.eth0</c>
 'ı çalıştırmanız gerekir, ancak yoldayken (mevcut bir ağ olmadığında)<c>net.eth0</c>  'ı çalıştırmanız gerekmez. Gentoo ile, çalışma seviyesi davranışını isteğinize göre değiştirebilirsiniz.
</p>
        <p>
Örneğin, başka init betiklerinin bulunduğu ikinci bir "default" çalışma seviyesi yaratabilirsiniz. Açılış anında hangisini çalıştıracağınızı seçebilirsiniz.</p>
      </body>
    </subsection>
    <subsection>
      <title>SOFTLEVEL  Kullanma</title>
      <body>
        <p>
Herşeyden önce, ikinci "default" çalışma seviyeniz için bir dizin yaratın. Örnek olarak  <path>offline</path> çalışma seviyesi yaratalım:</p>
        <pre caption="Çalışma seviyesi dizini yaratma">
# <i>mkdir /etc/runlevels/offline</i>
</pre>
        <p>
Gerekli init betiklerini yeni yaratılan çalışma seviyesine ekleyin. Mesela, mevcut  <c>default</c> çalışma seviyenizin <c>net.eth0</c>'ı içermeyen bir kopyasını yaratmak istiyorsanız:</p>
        <pre caption="Gerekli init betiklerini ekleme">
# <i>ls /etc/runlevels/default</i>
acpid  domainname  local  net.eth0  netmount  postfix  syslog-ng  vcron
# <i>rc-update add acpid offline</i>
# <i>rc-update add domainname offline</i>
# <i>rc-update add local offline</i>
# <i>rc-update add syslog-ng offline</i>
# <i>rc-update add vixie-cron offline</i>
</pre>
        <p>
Şimdi açılış yöneticinizin ayarlarını değiştirerek,
<c>offline</c> çalışma seviyesi için bir kayıt ekleyin. Örneğin  <path>/boot/grub/grub.conf</path> dosyasının içine:
</p>
        <pre caption="offline çalışma seviyesi için bir kayıt ekleme">
title Gentoo Linux Offline Usage
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3 <i>softlevel=offline</i>
</pre>
        <p>
İşte yaptınız. Eğer sisteminizi açarken yeni eklediğiniz kaydı seçerseniz, <c>default</c> çalışma seviyesi yerine 
<c>offline</c> çalışma seviyesi kullanılır.
</p>
      </body>
    </subsection>
    <subsection>
      <title>BOOTLEVEL Kullanma</title>
      <body>
        <p><c>bootlevel</c> kullanmak <c>softlevel</c> kullanmaya çok benzer. ek fark, ikinci "default" çalışma seviyesi tanımlamak yerine ikinci "boot" çalışma seviyesi tanımlamanızdır.
</p>
      </body>
    </subsection>
  </section>
</sections>
