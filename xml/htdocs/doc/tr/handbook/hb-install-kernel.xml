<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<sections>
  <section>
    <title>Sistem Saat Diliminin Ayarlanması</title>
    <body>
      <p>
Sisteminize ilk önce hangi saat diliminde bulunduğunu söylemeniz gereklidir. Bunun için <path>/usr/share/zoneinfo </path> dizini altında size uyan saat dilimini bulun ve <c>'ln'</c> komutu yardımı ile <path>/etc/localtime</path> olarak yönlendirin(link edin):
</p>
      <pre caption="Saat diliminin ayarlanması">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Örnek: Türkiye)</comment>
# <i>ln -sf /usr/share/zoneinfo/Turkey  /etc/localtime</i>
</pre>
    </body>
  </section>
  <section>
    <title>Kernel Kaynak Kodunun Kurulması</title>
    <subsection>
      <title>Kernel seçimi</title>
      <body>
        <p>
Bütün Linux satıcılarının bir araya topladığı programların temeli linux kernele dayanır. Kernel kullanıcı programları ile sistemdeki donanım arasında iletişimi sağlar. Gentoo da bütün kullanıcılarına çeşitli kernel kaynak kodları sunmaktadır. Bu çeşitli Kernel kaynaklarını ve açıklamalarını 'Gento Kernel Guide' bölümünde bulabilirsiniz:<uri link="http://www.gentoo.org/doc/en/gentoo-kernel.xml">
Gentoo Kernel Guide</uri>.
</p>
        <p>
Gentoo'da X86 basisli sistemler için mevcut Kernel kaynak kodları şunlardır:<br></br><br></br>
<c><b>vanilla-sources</b></c> (Kernel geliştiricileri tarafından geliştirilenen standart kernel kaynak kodunu içerir.)<br></br><br></br><c><b>gentoo-sources</b></c> (Gentoo tarafından performansı artırmak için değiştirilmiş kernel kaynak kodunu içerir.)<br></br><br></br><c><c><b>xfs-sources </b></c></c>(Güncel XFS desteği verilmiş kernel kaynak kodunu içerir.)<br></br><br></br><b><c>gs-sources</c></b> (Sunucu(server) kullanımı için değiştirilmiş kernel kaynak kodunu içerir.)<br></br><br></br><c><c><b>gaming-sources </b></c></c> ( Oyun performansını artırmak için en iyi derecede ayarlanmış ve oyunlarda kullanmak kullanmak için  hazırlanmış kernel kodunu içerir.)<c></c><br></br><c><c><b>development-sources</b> </c></c> ( Vanilla 2.6 kernel )<br></br><br></br></p>
        <p>
AMD64 temelli sistemler için <c>gentoo-dev-sources</c> mevcuttur. (sağlamlık, performans ve donanım desteği için özel olarak amd64 yamalarını içeren kernel 2.6 serisi).


Alpha temelli sistemler için <c>vanilla-sources</c>  (kernel geliştiriciler tarafından geliştirilen orijinal kernel), alpha-sources (alpha kullanıcıları için ayarlanmış kernel) ve compaq-sources (Redhat tarafından kullanınan Apha kernel kodları, Compaq tarafından geliştiriliyor) mevcuttur. </p>
        <p>
</p>
        <p>Sparc temelli sistemler için <c>vanilla-sources</c>  (kernel geliştiriciler tarafından geliştirilen orijinal kernel),  <c>development-sources</c> (Varsayılan 2.6 kernel kodları) ve  sparc-sources (sparc kullanıcıları için ayarlanmış kernel kodları) mevcuttur.
</p>
        <p>

BMIPS temelli sistem kullanıcıları ise <c>mips-sources</c> (MIPS yapısı için hazırlanmış varsayılan kernel kodları) ve <c>mips-prepatch-source</c> (Prerelease Kernel Tree) arasında seçim yapabilirler.
</p>
        <p>Diğer sistemler için, kendi sistem yapılarınıza uyan ve kendi sisteminiz için ayarlanmış kernel kodlarını kullanabilirsiniz:
Örn: <c>hppa-sources</c> (HPPA) veya <c>ppc-sources</c> (PowerPC) gibi.

</p>
        <p>
Kernel kaynağının seçimini yaptıktan sonra, <c>emerge</c>komutunu verip, sisteminize kurabilirsiniz.
</p>
        <p>
Aşağıdaki örneğimizde  <c>vanilla-sources</c> kernel kaynağını( çünkü
<c>gentoo-sources</c> bütün yapılar için mevcut değildir) kuracağız. Tabiki siz burda kendi sisteminize göre seçtiğiniz kernel kodunu yazabilirsiniz:</p>
        <pre caption="Kernel kaynak kodunun kurulması">
# <i>emerge vanilla-sources</i>
</pre>
        <p>
Eğer şimdi  <path>/usr/src</path> dizinine bakarsanız,  <path>linux</path> adında bir dizinin oluştuğunu ve kernel sürümüne bağlandığını (link) görürsünüz.</p>
        <pre caption="Kernel kaynak koduna sembolik bağlantı oluşturulması">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.4.25
</pre>
        <p>
Eğer <path>linux</path> dizini başka bir dizine bağlı gözüküyorsa, kullandığınız kernel kaynağını ve sürüm numarasını tekrar kontrol edin veya kendi eliniz ile aşağıdaki komutu verip bağlayın.</p>
        <pre caption="Kernel kaynak koduna yapılan sembolik bağlantının değiştirilmesi">
# <i>rm /usr/src/linux &amp;&amp; ln -s /usr/src/linux-2.4.25 /usr/src/linux</i>
</pre>
        <p>
Şimdi kernelinizi kendi donanımınıza göre ayarlayabilir ve sonra derleyebilirsiniz. Bütün kernel yapılarında <c>genkernel</c> komutunu kulllanabilirsiniz. Bu sayede LiveCD de kullanınan generik kernelin bir benzeri oluşturulur. Ama şimdi ilkönce 'elile' nasıl ayarlayabileceğinizi aktaracağız. Çünkü bu sayede, yani elile ayarlamada kendi donanımınızı en iyi şekilde ayarlama imkanınız olur. </p>
        <p>
Eğer kerneli eliniz ile kendiniz ayarlamak istiyorsanız <uri link="#doc_chap3">Varsayılan: Elile Kernel Ayarlama</uri> bölümü ile devam edin. Eğer otomatik kernel derleme için <c>genkernel</c> kullanıp, herşeyin otomatik olarak derlenmesini istiyorsanız
<uri link="#doc_chap4">Seçmeli: Genkernel Kullanımı</uri> bölümü ile devam edin.
</p>
      </body>
    </subsection>
  </section>
  <section>
    <title>Varsayılan: Elile Kernel Ayarlama</title>
    <subsection>
      <title>Başlarken</title>
      <body>
        <p>
Genelde elile kernel ayarlamak linux kullanıcıları için zahmetli bir iştir ve dikkat ister. Ancak birkaç defa kendiniz kernel derlediğinizde, aslında bunun hiçde o kadar zor bir olay olmadığı göreceksiniz. Biraz tecrübe ve pratik ile sizde aynı görüşe sahip olacaksınız, inanın buna.;-)
</p>
        <p>
Yalnız  <e>gerçek</e> olan birşey varsa: Elile kernel derlemeden önce, sisteminizdeki bütün donanımı ve bu donanımın bütün özelliklerini çok iyi bilmeniz gereklidir. Donanım ile ilgili önemli birçok bilgileri<path>/proc/pci</path> dosyasının içinden <c>lspci</c> komutu ile alabilirsiniz. LiveCD de kullanılan modulları<c>lsmod</c> komutu yardımı ile öğrenebilir veya bir yere not alabilirsiniz. Bu sayede kernel derlerken hangi modulları işaretleyeceğiniz konusunda size bir fikir verebilir.</p>
        <p>
Şimdi kendiniz kernel derlemek için kernel kaynak kodlarının bulunduğu dizine gidin ve <c>make menuconfig</c>
komutunu çalıştırın. Bu komut size ncurses temelli ayar menüsünün çalıştırılmasını sağlar.
</p>
        <pre caption="Menuconfig kullanımı">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>
        <p>
Karşınıza çeşitli ayar bölümlerini gösteren bir menü çıkar. İşaretlenmesi gerekli olan  önemli bazı seçenekleri kısaca aşağıda bulabilirsiniz. ( Bu zorunlu secenekleri muhakkak yapmanız gerekli. Aksi taktirde  Gentoo sağlam bir şekilde çalışmayabilir).
</p>
      </body>
    </subsection>
    <subsection>
      <title>Gerekli Seçeneklerin Seçilmesi</title>
      <body>
        <p>
İlk önce  geliştirme ve deneysel kullanıma izin veren kod sürücülerinin blunduğu bölümü seçmeniz gerekli. Bu bölüm gereklidir, çünkü bazı önemli Kod/Sürücü (code/drivers) bölümlerinin menülerde bulamazsınız. Onun için bu bölümü muhakkak işaretleyin.
</p>
        <pre caption="Deneysel kod/sürücü (Codes/Treiber) bölümünün seçilmes">
Code maturity level options ---&gt;
  [*] Prompt for development and/or incomplete code/drivers
</pre>
        <p>
Sonra  <c>File Systems</c> bölümüne gidiyoruz ve dosya sistemlerinin desteğini sağlayan bölümü geçip, kullanmak istediğimiz veya bize gerekli olan dosya sistemlerini seçiyoruz. Burdaki modulları tercihen  <e>gömülü (Y)</e> olarak seçin. Aksi taktirde yeni Gentoo sisteminiz sabit sürücünüzdeki (harddisk) bölümleri görmeyebilir( yani mount etmeyebilir).
Seçimizine <c>Virtual memory</c>, <c>/proc file system</c>, <c>/dev
file system</c> + <c>Automatically mount at boot</c>bölümlerinide ekleyin:
</p>
        <pre caption="Gerekli dosya sisteminin seçilmesi">
File systems ---&gt;
  [*] Virtual memory file system support (former shm fs)
  [*] /proc file system support
  [*] /dev file system support (EXPERIMENTAL)
  [*]   Automatically mount at boot

<comment>(2.6 Kernel kullanmıyorsanız aşağıdaki bölümü seçmeyin)
</comment>
  [ ] /dev/pts file system for Unix98 PTYs

<comment>(Kendi ihtiyacınıza göre aşağıdaki dosya sistemlerini seçin)
</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>
        <note>
2.6 Kernel kullanıcıları aşağıdaki bölümlerde diğer gerekli seçenekleri bulabilirler:
<c>Pseudo filesystems</c>, ( <c>File systems</c>bölümü altında).
</note>
        <p>
İnternete PPPoE (genelde ADSL de kullanılır) kullanarak çıkmayı planlıyorsanız aşağıdaki seçeneklere ihtiyacınız olacak:</p>
        <pre caption="PPPoE için gerekli sürücülerin seçimi...">
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports
</pre>
        <note>
2.6 Kernel kullanıcıları bu seçenekleri <c>Networking support</c>, ( <c>Device Drivers</c> alt bölümünde) bölümünde bulabilirler.
</note>
        <p>
Aşağıdaki iki seçenekler zarar gelmeyecektir fakat o kadarda gerekli değil. 
Mesela<c>PPP over Ethernet</c> seçenekleri ve<c>rp-pppoe</c> tarafından kullanılır. (Eğer PPPoE kernel modulu kullanılırsa).
</p>
        <note>
2.6 Kernel kullanıcıları bu seçenekleri <c>Device Drivers</c>altında bulabilir..
</note>
        <p>
Ağ kartı kullanıyorsanız, kullandığınız ağ kartının seçip, gerekli  modulları kernel içinden aktif etmeyi unutmayın.</p>
        <p>
</p>
      </body>
    </subsection>
    <subsection>
      <body/>
    </subsection>
    <subsection id="compiling">
      <title>Derleme ve Kurulum</title>
      <body>
        <p>
Artık Kernel derleme için gerekli seçimi yaptınız ve kerneli derleme için gerekli adımı atmaya geldi. Menüden çıkın ve  <c>make dep
&amp;&amp; make bzImage modules modules_install</c> komutlarını çalıştırın:
</p>
        <pre caption="Kernel derleme">
<comment>(x86-basislis sistemlerde, 2.4 Kernel)</comment>
# <i>make dep &amp;&amp; make bzImage modules modules_install</i>

<comment>(diğer sistemlerde, 2.4 Kernel)</comment>
# <i>make dep &amp;&amp; make vmlinux modules modules_install</i>

<comment>(2.6 Kernel için)</comment>
# <i>make &amp;&amp; make modules_install</i>
</pre>
        <p>
Kernel derleme işlemi bittikten sonra, oluşan kernel image dosyasını <path>/boot</path>kopyalayın:
</p>
        <pre caption="Kernek kurulumu">
<comment>(x86 basisli sistemlerde)</comment>
# <i>cp arch/i386/boot/bzImage /boot/kernel-2.4.25</i>
# <i>cp System.map /boot/System.map-2.4.25</i>

 <comment>(amd64 basisli sistemlerde)</comment>
# <i>cp arch/x86_64/boot/bzImage /boot/kernel-2.4.25</i>

<comment>(Diğer sistemler için)</comment>
# <i>cp vmlinux /boot/kernel-2.4.25</i>
# <i>cp System.map /boot/System.map-2.4.25</i>
</pre>
        <p>
Kernel seçiminde kullanılan ayar dosyanızıda <path>/boot</path> altına kopyalamanızda tavsiye ederiz. Belki ilerde bu ayar dosyasına ihtiyacınız olabilir veya tekrardan kernel derleme ihtiyacı duyduğunuzda bu dosyayı kullanarak ( /usr/src/linux dizini altına kopyalarak) en basit bir şekilde yeni kernelinizi derleyebilirsiniz (tabiki donanımınızda bir değişiklik yapmadıysanız). :)
</p>
        <pre caption="Kernel ayar dosyasının yedeklnmesi">
# <i>cp .config /boot/config-2.4.25</i></pre>
        <p></p>
        <p>Şimdi  <uri link="#doc_chap5">Değişik kernel modullarının kurulması</uri>bölümüne gidebilirsiniz.
</p>
      </body>
    </subsection>
  </section>
  <section>
    <title>Seçmeli: Genkernel Kullanımı</title>
    <body>
      <p>
Bu bölümü okumanızdaki amaç, Gentoo da kullanılan<c>genkernel</c> skriptini kullanmazı düşündüğünüz için. Bu skript aslında bütün işinizi kolaylaştıran bir skripttir.
</p>
      <p>
Kernel kaynak kodu sisteminize kurulu ve şimdi otomatik olarak bütin işlerinizi kolaylaştıracak<c>genkernel</c> komutunu uygulayabilirsiniz. <c>genkernel</c>
ilk önce kernel seçimini yapar. Bunun için LiveCD de seçilen seçenekleri esas alır. Bunun anlamı; boot esnasında tanınan bütün donanım kernel seçiminde kullanılır.  <c>genkernel</c> çalıştırıldıktan sonra elile bir ayar gerektirmediği için, Linux ve kernel dünyasına yabancı ama kendi özel kernelini derlemek isteyen Gentoo kullanıcıları için ideal bir çözümdür.
</p>
      <p>
Sırası ile Genkernel nasıl kullanabilirsiniz kısaca aktaralım. İlk önce sistemimize<c>genkernel</c> kurmamız gerekli:
</p>
      <pre caption="Genkernel emerge edilmesi">
# <i>emerge genkernel</i>
</pre>
      <p>
Kernel kaynak kodunun  <c>genkernel all</c>yardımı ile derleyebilirsiniz.
Burda bir açıklama yapmamız gerekli: <c>genkernel</c> komutu ile kernel derlemek, bütün donanımı destekleyen bir derleme seçeneğidir. Bununda anlamı,  derleme süresinin oldukça uzun sürebileceğidir. Yani bu işlemler yapılırken ekranda hiçbir haraket olmadı diye kernel derleme olayını yarıda bırakmayın veya sisteminizi kapatmayın.!
</p>
      <pre caption="Genkernel komutunu çalıştırılması">
# <i>genkernel all</i>
GenKernel v3.0.1_beta10
* ARCH: x86
* KERNEL VER: 2.4.25
* kernel: configuring source
* kernel: running mrproper
<comment>(Uzun bölümler kısaltılmıştır)</comment>
* Kernel compiled successfully!
* Required Kernel Params:
*   : root=/dev/ram0 init=/linuxrc real_root=/dev/$ROOT
*     where $ROOT is the devicenode for your root partition as
*     you should have specified in /etc/fstab
*
* You MUST tell your bootloader to use the generated initrd
*
* Recommended Kernel Params:
*   : vga=0x317 splash=verbose
*
* Do NOT report kernel bugs (configs included) as genkernel bugs.
* Make sure you have the latest genkernel before reporting bugs
*
* For more info see /usr/share/genkernel/README
</pre>
      <p><c>genkernel</c> biter bitmez, yeni bir kernel imagesi, tüm modullar
ve bir  <e>initial root disk</e> (initrd) oluşturulmuş olur. Eğer bir bootloader kullanmak istiyorsanız, oluşan yeni kernel imagesi ve initrd daha sonra kullanılabilirsiniz. Bunların isimlerini bir kenara not alın. initrd doğrudan boot bittikten sonra donanımın tanınması için kullanılır. Böylece sisteminizdeki donanım için gerekli olan sürücüler otomatikman yüklenir.
</p>
      <p>
Sırada sistemimizin LiveCD olmaktan kurtaracak <c>hotplug</c> aracını emerge ediyoruz. Donanım initrd tarafından otomatik olarak tanınırken(yani sisteminizi başlatmak için gerekli olan modulları tanırken)<c>hotplug</c> ise otomatik olarak diğer donanımları tanır(örn: USB cihazlarınız gibi).  <c>hotplug</c> pakedini kurup, etkin hale sokmak için aşağıdaki komutu vermeniz yeterlidir:</p>
      <pre caption="Hotplug emerge edilmesi ve etkinleştirilmesiplug">
# <i>emerge hotplug</i>
# <i>rc-update add hotplug default</i>
</pre>
    </body>
  </section>
  <section>
    <title>Diğer Bazı Kernel Modullarının Kurulması</title>
    <subsection>
      <title>İlave Modulların Kurulması</title>
      <body>
        <p>
Eğer uyum sağlarsa emerge Ebuilds ile bütün donanımınızın sürücülerini kurabilirsiniz. Aşağıda sık kullanılan bazı modullar ve ebuilds isimlerini bulabilirsiniz. :
</p>
        <table>
          <tcolumn width="1in"/>
          <tcolumn width="4in"/>
          <tcolumn width="2in"/>
          <tr>
            <th>Ebuild ismi</th>
            <th>Açıklama</th>
            <th>Komut</th>
          </tr>
          <tr>
            <ti>nvidia-kernel</ti>
            <ti>XFree86 için 3D NVIDIA Grafik sürücüleri</ti>
            <ti><c>emerge nvidia-kernel</c></ti>
          </tr>
          <tr>
            <ti>nforce-net</ti>
            <ti>On-board ağ kartı ( NVIDIA NForce(2) Mainboards)</ti>
            <ti><c>emerge nforce-net</c></ti>
          </tr>
          <tr>
            <ti>nforce-audio</ti>
            <ti>On-board Ses kartı ( NVIDIA NForce(2) Mainboards)</ti>
            <ti><c>emerge nforce-audio</c></ti>
          </tr>
          <tr>
            <ti>e100</ti>
            <ti>Intel e100 Fast Ethernet Adapter</ti>
            <ti><c>emerge e100</c></ti>
          </tr>
          <tr>
            <ti>e1000</ti>
            <ti>Intel e1000 Gigabit Ethernet Adapter</ti>
            <ti><c>emerge e1000</c></ti>
          </tr>
          <tr>
            <ti>emu10k1</ti>
            <ti>Creative Sound Blaster Live!/Audigy Desteği</ti>
            <ti><c>emerge emu10k1</c></ti>
          </tr>
          <tr>
            <ti>ati-drivers</ti>
            <ti>Hızlandırılmış ATI Radeon 8500+/FireGL Grafik sürücüsü</ti>
            <ti><c>emerge ati-drivers</c></ti>
          </tr>
          <tr>
            <ti>ati-drivers-extra</ti>
            <ti>Grafiksel ATI araçları</ti>
            <ti><c>emerge ati-drivers-extra</c></ti>
          </tr>
          <tr>
            <ti>xfree-drm</ti>
            <ti>
   Hızlandırılmış ATI Radeon  9200, Rage128, Matrox,
    Voodoo ve digerleri... Lütfen
    <c>IUSE_VIDEO_CARDS</c> değişkenlerini   (  <path>/usr/portage/x11-base/xfree-drm</path>  dosyanısının içinden) kontrol etmeyi unutmayın.
  </ti>
            <ti><c>VIDEO_CARDS="sizin_kartınız" emerge xfree-drm</c></ti>
          </tr>
        </table>
        <p>
Lütfen bu Ebuilds  dosyalarının büyük bağımlılıklarıda beraberinde getirebileceklerini untumayın. Kurmak istediğiniz pakedin bağımlı olduğu paketleri bulmak için <c>emerge --pretend</c> kullanabilirsiniz..
Örnek :<c>emu10k1</c> Paketi için:
</p>
        <pre caption="Bağımlılıkların kontrol edilmesi">
# <i>emerge --pretend emu10k1</i>
</pre>
        <p>
Kurulacak paketleri istemiyorsanız,
<c>emerge --pretend --verbose</c> komutunu vererek, hangi USE-Flags bagımlılıklarına etki yapalabilir görebilirsiniz. Bu sayede istemediğiniz ve bağımlılık gerektiren bir pakedin birlikte derlenmesini engelleyebilirsiniz:
</p>
        <pre caption="USE-Flag kullanımı">
# <i>emerge --pretend --verbose emu10k1</i>
<comment>...</comment>
[ebuild  N    ] media-sound/aumix-2.8  +gpm +nls +gtk +gnome +alsa -gtk2
</pre>
        <p>
Yukardaki örnekte de görebileceğiniz gibi
<c>emu10k1</c> için bağımlı paketler(<c>aumix</c>)  <c>gtk</c> ve <c>gnome</c> USE-Flags
içinde. Bunun anlamı gtk da birlikte derleneceğidir
</p>
        <p>
Eğer bütün bu bağımlılıkların birlikte derlenmesini istemiyorsanız 
USE-Flag kullanarak bunları etkisiz hale getirebilirsiniz:
</p>
        <pre caption="emu10k1 için USE-Flag kullanarak gerekliliklerden vazgeçmek">
# <i>USE="-gpm -nls -gtk -gnome -alsa" emerge --pretend emu10k1</i>
</pre>
        <p>
Eğer sonuçtan memnun iseniz<c>--pretend</c> parametresini kaldırın ve  <c>emu10k1</c> derlemeye başlayın.
</p>
      </body>
    </subsection>
    <subsection>
      <title>Modulların Ayarlanması </title>
      <body>
        <p>
Eğer <c>hotplug</c> kullanmıyorsanız, otomatik olarak yüklenen modulları <path>/etc/modules.autoload.d/kernel-2.4</path> (veya
<path>kernel-2.6</path>) dosyasının içine yazmanız gereklidir. Eğer gerekli ise diğer parametreleride ekleyebilirsiniz.
</p>
        <p>
Mevcut Modulların listesini görme için<c>find</c>
komutun kullanabilirsiniz.  "&lt;kernel version&gt;" bölümüne kendi kernel sürümünüzü kullanın:</p>
        <pre caption="Mevcut modulların listelenmesi">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>
        <p>
Mesela <c>3c59x.o</c> Modulunu otomatik olarak, başlangıçda yüklemek istiyorsanız, /etc/modules.autoload.d/kernel-2.4 (veya kernel-2.6) dosyasının içine bunu yazmanız gerekir.:
</p>
        <pre caption="/etc/modules.autoload.d/kernel-2.4 veya kernel-2.6">
3c59x
</pre>
        <p>
Ve aktif hale getirmek için <c>modules-update</c> komutunu çalıştırın. Böylece 
<path>/etc/modules.conf</path> dosyasının içindeki değişiklikler etkinleşecektir:
</p>
        <pre caption="modules-update komutunun uygulanması">
# <i>modules-update</i>
</pre>
        <p>
Şimdi  <uri link="?part=1&amp;chap=8">Sistem ayarlarının yapılması</uri> bölümü ile devam edin.
</p>
      </body>
    </subsection>
  </section>
</sections>
