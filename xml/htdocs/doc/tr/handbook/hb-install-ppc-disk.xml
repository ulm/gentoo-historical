<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<sections>
  <section>
    <title>Blok Aygıtlarına Giriş</title>
    <subsection>
      <title>Blok Aygıtlar </title>
      <body>
        <p>
Bu bölümde sizlere Gentoo Linux'un "disk-orient" yönünü, Linux'un genel yapısını, ve dosya sistemini, disk bölümlerini anlatacağız. Sonrasında disk girdi çıktı yapısını ve dosya sistemiyle devam edeceğiz. Sizlere rehberlik edecek olan bu yazı, size sabitdisk bölümlemede ve dosya sistemi oluşturmada, Gentoo Linux 'unuzu kurmada size yardımcı olacaktır.</p>
        <p>
Başlangıç olarak size<e>Blok aygıtlar </e> hakkında bilgi vereceğiz.  Bildiğimiz en yaygın sabit disk muhtemelen IDE sürücümüz yani <path>/dev/hda</path>. Eğer sisteminiz SCSI sürücü kullanıyorsa tabiki ilk sürücünüz 
<path>/dev/sda</path> olacaktır.
</p>
      </body>
    </subsection>
    <subsection>
      <title>Bölümler ve Slices'ler</title>
      <body>
        <p>
Pratikte mümkün olmamasına rağmen, teorik olarak bütün sabit diskimizi Linux olarak kullanmak mümkün. Ama bunun yerine yönetimi kolaylaştırmak amacı ile bütün sabit diskimizi daha küçük bölümlere ayırmak mümkün. Bu x86 sisteminde <e>bölüm (Partitionen) </e> olarak bilinir. Diğer mimarilerde <e>Slices</e> olarak tanınır.
</p>
      </body>
    </subsection>
  </section>
  <section>
    <title>Sabit Disk Bölümlerini Tasarlamak</title>
    <subsection>
      <title>Öntanımlı Bölüm Planı</title>
      <body>
        <p>
ğer sisteminizin disk bölümlerinin şemasını çıkarmakla fazla kafa yormak istemiyorsanız, bizim sizin için hazırladığımız tabloyu kullanabilirsiniz:
</p>
        <table>
          <tr>
            <th>Partition NewWorld</th>
            <th>Partition OldWorld</th>
            <th>Dosya Sistemi</th>
            <th>Boyut</th>
            <th>Açıklama</th>
          </tr>
          <tr>
            <ti><path>/dev/hda1</path></ti>
            <ti>(gereksiz)</ti>
            <ti>(bootstrap)</ti>
            <ti>800k</ti>
            <ti>Apple_Bootstrap</ti>
          </tr>
          <tr>
            <ti><path>/dev/hda2</path></ti>
            <ti><path>/dev/hda1</path></ti>
            <ti>(swap)</ti>
            <ti>512M</ti>
            <ti>Swap Partition</ti>
          </tr>
          <tr>
            <ti><path>/dev/hda3</path></ti>
            <ti><path>/dev/hda2</path></ti>
            <ti>ext3</ti>
            <ti>Hardiskkin kalan kısmı</ti>
            <ti>Root Partition</ti>
          </tr>
        </table>
        <p>Eğer sabit disk bölümleri ile ilgili iseniz, kaç tane bölüme ihtiyacımız olduğunu merak ediyorsanız, okumaya devam edin. Aksi takdirde diğer bölüm başlığı olan    <uri link="#fdisk">fdisk kullanarak diski bölümlere ayırmak</uri>  adlı olan bölümümüze geçiniz.</p>
      </body>
    </subsection>
    <subsection>
      <title>Wie viele und wie groß?</title>
      <body>
        <p>
Sabit disk bölümlerimizin büyüklüğü sisteminizdeki ortama bağlıdır. Örneğin birçok kullanıcıya sahipseniz muhtemelen  <path>/home</path> dizininizi bölmek isteyeceksiniz. Güvenliği arttırmak ve yedeklemek kolay olacaktır. Eğer Gentoo'yu Mail sunucusu olarak kuracaksanız  <path>/var</path> dizini bölümleyebilirsiniz. İyi bir dosya sistemi seçimi sisteminizin performansını arttıracaktır. Oyun sunucusu olarak kurmak istersenizde birçok program   <path>/opt</path> izini altına kurulacaktır. Bölünmede sebeb hep aynı <path>/home</path>dizininde olduğu gibi aynı: 
Güvenlik ve yedekleme.</p>
        <p>
Görüldüğü gibi, herşey ne elde etmek isteğinize bağlı. Sabit diskinizi bölümlemek size şu avantajları kazandıracaktır:</p>
        <ul>
          <li>
  Her sabit disk bölümü için en iyi performansı elde etmek.
</li>
          <li>
  Sisteminizdeki eğer bozuk bir programcık sürekli sabit diske yazıyorsa sisteminizin tamamıyle kullanılmaz hale gelmesini engellemek.</li>
          <li>
  Gerektiğinde dosya sistemi kontrolü yapılırken paralel kontrol yaparak zamansal olarak gececek olan süreyi kısaltmak.</li>
          <li>
  Bazı sabit disk bölümlerine sadece okuma izni verilerek güvenliği arttırmak.
</li>
        </ul>
        <p>
Bununla birlikte çoklu disk bölümleri büyük bir dezavantaja sahiptir: Eğer doğru düzenlenemezse bölümler arasında tanımlanmamış bilinmeyen boşluklar oluşabilir.
</p>
      </body>
    </subsection>
  </section>
  <section id="#fdisk">
    <title>HArddiskinizi Bölümlere Ayırmak</title>
    <body>
      <p>
Bölme işlemini yapmak için kullancağımız komut : <c>mac-fdisk</c>
</p>
      <pre caption="mac-fdisk başlatılması">
# <i>mac-fdisk /dev/hda</i>
</pre>
      <p>
Linux kurulacak bölümü silmek için <c>d</c>  tuşuna basın 
<c>( mac-fdisk  içinden)</c> Sonra sise silmek istediğiniz bölüm numarasını soracaktır</p>
      <p>
Şimdi <e>Apple_Bootstrap</e> yardımı işe bir bölüm oluşturalım (<c>b</c> tuşu ile). İlk önce size başlatmak istedğiniz Bloğu  sorar. Eğr bölüm numarası olarak <c> 3</c>
 seçtiyseniz <c>3p</c>  girin</p>
      <note>
bu bölüm <e>asla</e> "Boot" bölümü değildir. Linux tarafından kullanılmaz; Buraya dosya sistemi ile biçimlendirmenize gerek yoktur. PPC kullanıcıları için Boot bölümü gerekli değildir.</note>
      <p>
Takas (Swap ) alanı oluşturmak için <c>c</c>  tuşuna basın.
<c>mac-fdisk</c>  size başlayacak olan blok numarasını soracaktır. <c>3</c>  'ü daha önceden Apple_Bootstrap bölümü için seçtiğimizden şimdi<c>4p</c>  vermemiz gereklidir. Boyut olarak <c>512M</c>  yazabilrisiniz. Eğer ismini sorarsa <c>swap</c> olarak girin.</p>
      <p>
Root bölümü oluştrmak için <c>c</c>  ve arkasından <c>5p</c>  veriyoruz. Bu sayede ROOT bölümünnn başlangıç blogunu seçiyoruz. Boyutunu sorar ise <c>5p</c>  verin. <c>mac-fdisk</c>
 bunu "Bütün boş alanı kullan" olarak yorumlayacaktır. İsmini sorarsa <c>root</c> olarak girin.</p>
      <p>
İşlemler bittikten sonra kalıcı olması için <c>w</c>  girin ve <c>mac-fdisk</c> bitirmek için  <c>q</c> tuşuna basın.
</p>
      <p>
Bölümleri oluşturduktan sonra  <uri link="#filesystems">Dosya Sistemini Oluşturmak </uri> bölümü ile devam edebiliriz.</p>
    </body>
  </section>
  <section id="filesystems">
    <title>Dosya Sistemini Oluşturmak</title>
    <subsection>
      <title>Giriş</title>
      <body>
        <p>
Şimdiye kadar sabitdisk bölümlerimizi yarattık. Şimdi üzerilerine dosya sistemlerini yazmaya geldi. Dosya sistemini seçmek için endişelenmeyin, öntanımlı olan dosya sistemlerini kullanacaksınız, dosya sistemlerinin ne olduğunu bilmek isteyen okumaya devam etsin okumak istemeyenler  <uri link="#filesystems-apply">Dosya Sistemlerini Bölümlere Uygulama </uri> adlı başlıktan itibaren okumaya devam edebilirler.. Aksi taktirde mevcut dosya sistemlerini okumaya devam edin...

</p>
      </body>
    </subsection>
    <subsection>
      <title>Dosya Sistemleri</title>
      <body>
        <p>
Linux'un çekirdek yapısı çok çeşitli dosya sistemini destekler. Bunlardan birçoğu amd64 için stabil olarak ifade edilir.Fakat bazıları stabil olarak tanımlanmazlar. AMD64 için Stabil olarak tanımlanan bazı dosya sistemler şunlardır :  ext2 ve ext3- JFS ve ReiserFS .</p>
        <p>
<b>ext2</b> güvenilirliği denenmiş bir dosya sistemi biçimidir. Fakat "metadata journaling" özelliğine sahip değildir. Bunun anlamı ise ext2 dosya sistemi açılışta herseferinde başlangıç zamanını kontrol eder. Bu da zaman kaybına neden olur. Artık tamamiyle yeni bir nesil olan "journaled" dosya sistemi bulunmaktadır. Ve daha çok tercih edilmektedir. "journaled" dosya sistemleri, bilgisayarınızı yeniden başlattığınız da ve dosya sisteminizin kararsız bir durumda olduğunda geçikmeyi önler.
</p>
        <p>
<b>ext3</b> ext2 'nin "journaled" halidir ve tüm sistemi hızlı geri almak için "metadata journaling" özelliğine sahiptir. Eğer bu seçenekleri arttırmak istersek "full data" ve "ordered data journaling" buna örnektir. Ext3 "hashed b-tree indexing" özelliği ile çok yüksek performans sağlar. Ext3 mükemmel bir dosya sistemidir.</p>
        <p>
<b>ReiserFS</b>  ise "B*-tree" tabanlı bir dosya sistemidir. ReiserFS, ext2 ve ext3 gibi çok iyi performansa sahiptir. ReiserFS ayrıca "metadata journaling" özelliğine de sahiptir. Özellikle 2.4.18+ sürümleri için mevcuttur. ReiserFS çok büyük boyutlarda sabit disk bölümleri yaratmak isteyeceğiniz zaman kullanacağiniz dosya sistemi olmalıdır.
</p>
        <p>
<b>XFS</b>  Gentoo Linux'un tam destek( xfs-sources kerneli) verdiği "metadata journaling" özelliğine sahip bir dosya sistemidir. Bu sistemi sadece SCSI ve UPS sistemi olanlara tavsiye ederiz. Çünkü XFS dosya sistemi RAM ile çok ilişki içindedir ve kullandığınız bir program herhangi bir sebebte dolayı çökerse verilerinizin kaybolmasına sebep olabilir.</p>
        <p>
<b>JFS</b>   IBM tarafından geliştirilen yüksek performanslı "journaling" dosya sistemidir. Yeni bir dosya sistemidir ve henüz daha sağlamlığı hakkında fazla deliller bulunmamaktadır.
</p>
      </body>
    </subsection>
    <subsection id="filesystems-apply">
      <title>Dosya Sistemlerini Bölümlere Uygulama</title>
      <body>
        <p>
Bir disk bölümü üzerine istediğimiz dosya sistemini kurmak için gerekli küçük programlar bulunmaktadır. Bunlar aşağıdaki tabloda belirtilmiştir:
</p>
        <table>
          <tr>
            <th>Dosya sistemi</th>
            <th>Komut</th>
          </tr>
          <tr>
            <ti>ext2</ti>
            <ti><c>mke2fs</c></ti>
          </tr>
          <tr>
            <ti>ext3</ti>
            <ti><c>mke2fs -j</c></ti>
          </tr>
          <tr>
            <ti>reiserfs</ti>
            <ti><c>mkreiserfs</c></ti>
          </tr>
          <tr>
            <ti>xfs</ti>
            <ti><c>mkfs.xfs</c></ti>
          </tr>
          <tr>
            <ti>jfs</ti>
            <ti><c>mkfs.jfs</c></ti>
          </tr>
        </table>
        <p>
Boot bölümünü boot bölümünü (yani bizim örneğimizde <path>/dev/hda1</path> ) ext2 olarak ve kök (root) ( bizim örneğimizde <path>/dev/hda3</path> ext3 olarak tanımlamak istersek:</p>
        <pre caption="Dosya Sistemlerini Uygulama">
# <i>mke2fs /dev/hda1</i>
# <i>mke2fs -j /dev/hda3</i>
</pre>
        <p>
Şimdi dosya sistemlerini daha önceden yarattığımız sabit disk bölümleri için ayarlamış olduk.</p>
      </body>
    </subsection>
    <subsection id="filesystems-apply">
      <title>Dosya Sistemlerini Bölümlere Uygulama</title>
      <body>
        <p>
Bir disk bölümü üzerine istediğimiz dosya sistemini kurmak için gerekli küçük programlar bulunmaktadır. Bunlar aşağıdaki tabloda belirtilmiştir:
</p>
        <table>
          <tr>
            <th>Dosya sistemi</th>
            <th>Komut</th>
          </tr>
          <tr>
            <ti>ext2</ti>
            <ti><c>mke2fs</c></ti>
          </tr>
          <tr>
            <ti>ext3</ti>
            <ti><c>mke2fs -j</c></ti>
          </tr>
          <tr>
            <ti>reiserfs</ti>
            <ti><c>mkreiserfs</c></ti>
          </tr>
          <tr>
            <ti>xfs</ti>
            <ti><c>mkfs.xfs</c></ti>
          </tr>
          <tr>
            <ti>jfs</ti>
            <ti><c>mkfs.jfs</c></ti>
          </tr>
        </table>
        <p>
Boot bölümünü boot bölümünü (yani bizim örneğimizde <path>/dev/hda1</path> ) ext2 olarak ve kök (root) ( bizim örneğimizde <path>/dev/hda3</path> ext3 olarak tanımlamak istersek:</p>
        <pre caption="Dosya Sistemlerini Uygulama">
# <i>mke2fs /dev/hda1</i>
# <i>mke2fs -j /dev/hda3</i>
</pre>
        <p>
Şimdi dosya sistemlerini daha önceden yarattığımız sabit disk bölümleri için ayarlamış olduk.</p>
      </body>
    </subsection>
    <subsection>
      <title>Takas (Swap) Alanını Aktif Hale Getirmek</title>
      <body>
        <p>
<c>mkswap</c> komutu bizim işimizi görecek ve takas alanımızı yaratacaktır:
</p>
        <pre caption=" takas alanı yaratma  # ">
# <i>mkswap /dev/hda2</i>
</pre>
        <p>
Takas alanını etkin hale sokmak için kullanacağımız komut ise <c>swapon</c>:
</p>
        <pre caption="Takas alanını aktif hale getirme">
# <i>swapon /dev/hda2</i>
</pre>
        <p>
Takas alanımız oluşturuldu ve başarıyla aktif edildi.</p>
      </body>
    </subsection>
  </section>
  <section>
    <title>Sabit Disk Bölümlerini Bağlamak (Mounting)</title>
    <body>
      <p>
Sabitdisk bölümlerimiz hazır ve dosya sistemlerimiz için ev sahipliği yapıyor. Şimdi sıra sabitdisk bölümlerimizi bağlamaya geldi. Kullanacağımız komut:  <c>mount</c>
Sabitdisk bölümlerimizi bağlamadan önce her bölüm için dizin yaratmayı unutmayın. Aşağıdaki örnekte biz kök ve boot bağladık: 
</p>
      <pre caption="Sabit disk bölümlerini bağlamak">
# <i>mount /dev/hda3 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/hda1 /mnt/gentoo/boot</i>
</pre>
      <note>
Eğer  <path>/tmp</path> dizinini ayrı bir sabitdisk bölümüne koymak istiyorsanız, bağlamadan önce aşağıdaki komutunu kullanarak izin verdiğinizden emin olun: <c>chmod 1777 /mnt/gentoo/tmp</c>.  Aynı şey  <path>/var/tmp</path> dizini içinde geçerlidir.
</note>
      <p>
Ayrıca çekirdeğimiz için <path>/proc</path> dizinini bağlamamız gerek. Bunu yapmak için ilk olarak  
<path>/mnt/gentoo/proc</path> dizinini oluşturmak sonra mount ile bağlamamız gerekli:</p>
      <pre caption="/mnt/gentoo/proc bağlanma noktası oluşturma">
# <i>mkdir /mnt/gentoo/proc</i>
# <i>mount -t proc none /mnt/gentoo/proc</i>
</pre>
      <p>
Şimdi diğer bölüme geçebilirsiniz : <uri link="?part=1&amp;chap=5"> Gentoo Kurulum Dosyalarının Kurulması</uri> 
</p>
    </body>
  </section>
</sections>
