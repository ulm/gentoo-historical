<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/cs/handbook/hb-portage-ebuild.xml,v 1.1 2005/07/28 19:30:20 jkt Exp $ -->

<sections>

<version>1.3</version>
<date>2004-10-24</date>

<section>
<title>Emerge a ebuild</title>
<body>

<p>
Aplikace <c>ebuild</c> představuje nízkoúrovňové rozhraní k&nbsp;systému
Portage. Můžete ji využít pro provedení určitých kroků s&nbsp;daným ebuildem,
například pro ruční vyvolání kroků potřebných pro instalaci nějakého balíčku.
</p>

<p>
Aplikace <c>ebuild</c> je hodně užitečná pro vývojáře, a proto se o ní dozvíte
více informací v&nbsp;<uri
link="/proj/en/devrel/handbook/handbook.xml">Handbooku pro vývojáře</uri>. Zde
pouze podáme vysvětlení, jak Portage využívá ebuild během instalace balíčku a
jak spustit případné poinstalační kroky, které některé ebuildy obsahují.
</p>

</body>
</section>
<section>
<title>Ruční instalace softwaru</title>
<subsection>
<title>Stažení zdrojových kódů a ověření kontrolního součtu</title>
<body>

<p>
Pokaždé, když spustíte <c>ebuild</c> oproti danému ebuildu (souboru), ověří,
zda kontrolní součty všech relevantních souborů odpovídají hodnotám uloženým
v&nbsp;<path>Manifest</path> nebo
<path>files/digest-&lt;jméno&gt;-&lt;verze&gt;</path>. Toto se děje po stažení
zdrojových kódů.
</p>

<p>
Pro stažení potřebných souborů pomocí <c>ebuild</c> spusťte:
</p>

<pre caption="Stažení zdrojových kódů">
# <i>ebuild cesta/k/ebuildu fetch</i>
</pre>

<p>
Nesouhlasí-li MD5 kontrolní součet ebuildu s&nbsp;hodnotou uvedenou
v&nbsp;souboru <path>Manifest</path>, případně když se MD5 stažených souborů
neshoduje s&nbsp;<path>files/digest-&lt;balíček&gt;</path>, obdržíte podobnou
chybovou hlášku:
</p>

<pre caption="Chyba kontrolního součtu">
!!! File is corrupt or incomplete. (Digests do not match)
>>> our recorded digest: db20421ce35e8e54346e3ef19e60e4ee
>>>  your file's digest: f10392b7c0b2bbc463ad09642606a7d6
</pre>

<p>
Následující řádek poté obsahuje jméno chybného souboru.
</p>

<p>
Pakliže si jste jistí, že stažené soubory i ebuild samotný jsou v&nbsp;pořádku,
můžete soubor <path>Manifest</path> a <path>files/digest-&lt;balíček&gt;</path>
znovu vytvořit:
</p>

<pre caption="Znovuvytvoření Manifest a digest">
# <i>ebuild cesta/k/ebuildu digest</i>
</pre>

</body>
</subsection>
<subsection>
<title>Rozbalení zdrojových kódů</title>
<body>

<p>
Pro rozbalení archivu se zdrojovými kódy do <path>/var/tmp/portage</path>
(příp. do jiného adresáře podle nastavení v&nbsp;<path>/etc/make.conf</path>)
použijte tento příkaz:
</p>

<pre caption="Rozbalení archivu se zdrojovými kódy">
# <i>ebuild cesta/k/ebuildu unpack</i>
</pre>

<p>
Tento příkaz vykoná funkci src_unpack() z&nbsp;daného ebuildu (pokud není
definovaná, jednoduše rozbalí archiv). V&nbsp;tomto kroku také dojde
k&nbsp;aplikace nezbytných patchů.
</p>

</body>
</subsection>
<subsection>
<title>Kompilace</title>
<body>

<p>
Dalším krokem procesu instalace je kompilace zdrojových kódů.
Program <c>ebuild</c> to zařídí spuštěním funkce src_compile() daného souboru
ebuild. Ještě před samotným spuštěním kompilace dojde ke&nbsp;spuštění
konfiguračních kroků, pokud je to potřeba.
</p>

<pre caption="Kompilace">
# <i>ebuild cesta/k/ebuildu compile</i>
</pre>

<p>
Chcete-li ovlivnit průběh kompilace, je doporučeno změnit funkci src_compile()
v&nbsp;souboru ebuild. Druhá možnost je ošálení Portage, aby si myslelo, že
krok kompilace již proběhl. Spusťte tedy kompilaci sami a
v&nbsp;pracovním adresáři vytvořte prázdný soubor <path>.compiled</path>:
</p>

<pre caption="Informujme Portage, že kompilace již proběhla">
# <i>touch .compiled</i>
</pre>

</body>
</subsection>
<subsection>
<title>Instalace souborů do dočasného adresáře</title>
<body>

<p>
V&nbsp;dalším kroku nainstaluje Portage výsledné soubory do dočasného umístění.
Tento adresář tak bude obsahovat všechny soubory určené pro přesun do "pravého"
filesystému. Tento krok můžete provést spuštěním následujícího příkazu, který
provede funkci src_install() daného ebuildu:
</p>

<pre caption="Instalace souborů">
# <i>ebuild cesta/k/ebuildu install</i>
</pre>

</body>
</subsection>
<subsection>
<title>Přesun souborů do filesystému</title>
<body>

<p>
Posledním krokem je přesun všech souborů do normálního filesystému a jejich
registrace do databáze Portage. <c>ebuild</c> říká tomuto kroku "qmerge"
a provádí v&nbsp;něm toto:
</p>

<ul>
  <li>spuštění funkce pkg_preinst(), pokud je specifikována</li>
  <li>
    kopírování souborů z&nbsp;dočasného umístění do normálního
    filesystému
  </li>
  <li>registrace souborů v&nbsp;databázi Portage</li>
  <li>spuštění funkce pkg_postinst(), je-li specifikována</li>
</ul>

<p>
Chcete-li tyto kroky vyvolat sami, spusťte tento příkaz:
</p>

<pre caption="Sloučení souborů do hlavního filesystému">
# <i>ebuild cesta/k/ebuildu qmerge</i>
</pre>

</body>
</subsection>
<subsection>
<title>Uklizení dočasného adresáře</title>
<body>

<p>
Nakonec můžete dočasný adresář pročistit:
</p>

<pre caption="Uklizení dočasného adresáře">
# <i>ebuild cesta/k/ebuildu clean</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Další možnosti programu ebuild</title>
<subsection>
<title>Spuštění všech potřebných příkazů</title>
<body>

<p>
Pomocí parametru <c>merge</c> můžete spustit kroky fetch, unpack, compile,
install a qmerge najednou:
</p>

<pre caption="Instalace software">
# <i>ebuild cesta/k/ebuildu merge</i>
</pre>

</body>
</subsection>
<subsection>
<title>Konfigurace nainstalovaného balíčku</title>
<body>

<p>
Některé balíčky obsahují informace o své konfiguraci pro další použití
v&nbsp;systému. Někdy mohou být tyto kroky interaktivní a proto nejsou
spouštěny automaticky, ale musíte je vyvolat ručně, konkrétně pomocí parametru
<c>config</c>, který spustí (volitelnou) funkci config().
</p>

<pre caption="Konfigurace balíčku">
# <i>ebuild cesta/k/ebuildu config</i>
</pre>

</body>
</subsection>
<subsection>
<title>Sestavení (RPM) balíčku</title>
<body>

<p>
Portage umí vytvořit binární balíček, případně i RPM archiv, a to pomocí voleb
<c>package</c>, příp. <c>rpm</c>, které se chovají odlišně:
</p>

<ul>
  <li>
    parametr <c>package</c> je hodně podobný volbě <c>merge</c> — před samotným
    vytvořením balíčku provede všechny potřebné kroky (fetch, unpack, compile a
    install)
  </li>
  <li>
    funkce <c>rpm</c> vytvoří RPM balíček ze&nbsp;souborů vytvořených <e>po</e>
    spuštění akce <c>install</c>
  </li>
</ul>

<pre caption="Vytvoření balíčků">
<comment>(pro binární balíčky, jež Portage může použít)</comment>
# <i>ebuild cesta/k/ebuildu package</i>

<comment>(pro balíček RPM)</comment>
# <i>ebuild cesta/k/ebuildu rpm</i>
</pre>

<p>
Vytvořené RPM však neobsahuje informace o závislostech z&nbsp;ebuildu.
</p>

</body>
</subsection>
</section>
<section>
<title>Další informace</title>
<subsection>
<body>

<p>
Pro více informací o systému Portage, aplikaci <c>ebuild</c> a souborech
.ebuild prosím konzultujte odpovídající manuálové stránky:
</p>

<pre caption="Manuálové stránky">
$ <i>man portage</i>    <comment>(Portage samotné)</comment>
$ <i>man emerge</i>     <comment>(příkaz emerge)</comment>
$ <i>man ebuild</i>     <comment>(příkaz ebuild)</comment>
$ <i>man 5 ebuild</i>   <comment>(syntaxe ebuildů)</comment>
</pre>

<p>
Další informace orientované převážně pro vývojáře naleznete v&nbsp;<uri
link="/proj/en/devrel/handbook/handbook.xml">příručce pro vývojáře</uri>.
</p>

</body>
</subsection>
</section>
</sections>
