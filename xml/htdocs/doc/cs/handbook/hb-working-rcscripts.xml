<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/cs/handbook/hb-working-rcscripts.xml,v 1.1 2005/05/19 22:48:02 neysx Exp $ -->

<sections>

<version>1.18</version>
<date>2005-05-06</date>

<section>
<title>Runlevely</title>
<subsection>
<title>Boot systému</title>
<body>

<p>
Během bootování systému si pravděpodobně všimnete toho, jak po monitoru ubíhá
poměrně hodně textu. Budete-li pozorní, zjistíte, že při každém rebootu jde o
ty samé informace. Pořadí těchto akcí se nazývá <e>bootovací sekvence</e> a je
(do značné míry) pevně daná.
</p>

<p>
Nejprve bootloader načte do paměti obraz jádra (určený v&nbsp;konfiguračním
souboru) a předá jej CPU k&nbsp;provedení. Kernel si poté zinicializuje potřebné
datové struktury a pochody a spustí proces <c>init</c>.
</p>

<p>
Tento proces postupně namountuje všechny potřebné souborové systémy (určeno
v&nbsp;<path>/etc/fstab</path>) a spustí různé soubory z&nbsp;adresáře
<path>/etc/init.d</path>, které se starají o spuštění služeb, které potřebujete
k&nbsp;bezproblémovému provozu počítače.
</p>

<p>
Nakonec, když jsou všechny skripty provedeny, aktivuje <c>init</c> terminály
(ve&nbsp;většině případů pouze virtuální konzole ukryté za&nbsp;<c>Alt-F1</c>,
<c>Alt-F2</c> atd) pomocí procesu <c>agetty</c>. Ten se postará o to, abyste se
byli schopni přihlásit - spustí <c>login</c>.
</p>

</body>
</subsection>
<subsection>
<title>Init skripty</title>
<body>

<p>
<c>init</c> samozřejmě neprovádí skripty z&nbsp;adresáře
<path>/etc/init.d</path> náhodně. Nejen, že dodržuje jejich správné pořadí,
ale provádí jenom ty, které má. Všechny potřebné informace má k&nbsp;dispozici
v&nbsp;adresáři <path>/etc/runlevels</path>.
</p>

<p>
Nejprve spouští <c>init</c> ty skripty z&nbsp;<path>/etc/init.d</path>, na
které vede odkaz z&nbsp;<path>/etc/runlevels/boot</path>. Většinou je pořadí
spouštění určeno abecedně, ale některé skripty obsahují informace o
závislostech, podle kterých systém zjistí, že je potřeba nejdříve spustit jiný
skript.
</p>

<p>
Po zpracování <path>/etc/runlevels/boot</path> pokračuje <c>init</c> skripty,
na které vede symbolický odkaz z&nbsp;in <path>/etc/runlevels/default</path>.
Znovu platí, že pořadí jejich spuštění je určeno abecedně, a případné
závislosti jsou dodrženy.
</p>

</body>
</subsection>
<subsection>
<title>Jak init pracuje</title>
<body>

<p>
Samozřejmě se <c>init</c> o tom všem nerozhoduje sám; potřebuje konfigurační
soubor, který mu říká, co má dělat. Tento soubor se jmenuje
<path>/etc/inittab</path>.
</p>

<p>
Pamatujete-li si na bootovací sekvenci, jistě si vzpomenete i na to, že jako
první byly připojeny potřebné souborové systémy. Tuto akci obstará následující
řádek v&nbsp;<path>/etc/inittab</path>:
</p>

<pre caption="Řádek inicializace systému v&nbsp;/etc/inittab">
si::sysinit:/sbin/rc sysinit
</pre>

<p>
Tento řádek říká <c>init</c>u, že pro inicializaci systému musí musí spustit
<c>/sbin/rc sysinit</c>. Skript <path>/sbin/rc</path> se o ni postará; můžeme
tedy říci, že <c>init</c> toho moc nedělá - úkol pouze převede na jiný proces.
</p>

<p>
Jako druhý krok <c>init</c> provede všechny skripty, na které vedou symbolické
odkazy z&nbsp;<path>/etc/runlevels/boot</path>, viz tento řádek:
</p>

<pre caption="Pokračování inicializace systému">
rc::bootwait:/sbin/rc boot
</pre>

<p>
O samotné provedení úkolu se opět stará skript <c>rc</c>. Povšimněte si, že
parametr předaný skriptu (<e>boot</e>) je zároveň i jméno použitého adresáře
uvnitř <path>/etc/runlevels</path>.
</p>

<p>
Nyní se <c>init</c> podívá do svého konfiguračního souboru, aby zjistil,
v&nbsp;jakém <e>runlevelu</e> má systém běžet. Řádka
z&nbsp;<path>/etc/inittab</path>:
</p>

<pre caption="Řádek initdefault">
id:3:initdefault:
</pre>

<p>
V&nbsp;tomto případě (který bude používat většina uživatelů Gentoo) je číslo
<e>runlevelu</e>&nbsp;3. <c>init</c> tedy zjistí, že musí spustit
<e>runlevel&nbsp;3</e>:
</p>

<pre caption="Definice runlevelů">
l0:0:wait:/sbin/rc shutdown
l1:S1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
</pre>

<p>
Opět vidíme, že řádka definující runlevel&nbsp;3 používá ke spuštění
služeb skript <c>rc</c>, nyní s&nbsp;parametrem <e>default</e>. Parametr
předaný skriptu <c>rc</c> se znovu shoduje se jménem adresáře
z&nbsp;<path>/etc/runlevels</path>.
</p>

<p>
Až <c>rc</c> skončí svoji práci, <c>init</c> se rozhodne, jaké virtuální
konzole má aktivovat a jaké programy na nich spustit:
</p>

<pre caption="Definice virtualních konzolí">
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux
</pre>


</body>
</subsection>
<subsection>
<title>Co je to runlevel?</title>
<body>

<p>
Ukázali jsme, že se <c>init</c> při rozhodování o tom, do jakého
<e>runlevelu</e> vstoupit, drží číselného schématu. <e>Runlevel</e> je stav, ve
kterém Váš systém běží; váží se k&nbsp;němu skripty (skripty runlevelu nebo
<e>init skripty</e>), které musí být spuštěny, když systém do runlevelu vstupuje
a nebo jej ukončuje.
</p>

<p>
V&nbsp;Gentoo je definováno sedm runlevelů: tři pro vnitřní potřebu a čtyři
uživatelsky definované. Runlevely pro vnitřní potřebu jsou <e>sysinit</e>,
<e>shutdown</e> a <e>reboot</e> a dělají to, co jejich jména napovídají -
starají se o inicializaci systému, jeho vypnutí a restart.
</p>

<p>
Uživatelsky definované runlevely jsou ty, které používají podadresář
<path>/etc/runlevels</path> - <path>boot</path>, <path>default</path>,
<path>nonetwork</path> a <path>single</path>. Runlevel <path>boot</path>
spouští všechny nezbytné služby, které dále používají další runlevely.
Zbývající tři runlevely se odlišují počtem a druhy služeb, které spouští:
runlevel <path>default</path> slouží pro běžný chod systému,
<path>nonetwork</path> pro dobu, kdy není potřeba síť, a <path>single</path>
tehdy, je-li potřeba opravit systém.
</p>

</body>
</subsection>
<subsection>
<title>Práce s&nbsp;init skripty</title>
<body>

<p>
Skripty, které spouští proces <c>rc</c>, se nazývají <e>init skripty</e>. Každý
ze&nbsp;skriptů uložených v&nbsp;<path>/etc/init.d</path> může být spuštěn
s&nbsp;parametry <e>start</e>, <e>stop</e>, <e>restart</e>, <e>pause</e>,
<e>zap</e>, <e>status</e>, <e>ineed</e>, <e>iuse</e>, <e>needsme</e>,
<e>usesme</e> nebo <e>broken</e>.
</p>

<p>
Pro spuštění, zastavení a nebo restart služby (a zároveň všech služeb, které na
ní závisí), slouží parametry <c>start</c>, <c>stop</c> a <c>restart</c>:
</p>

<pre caption="Spuštění Postfixu">
# <i>/etc/init.d/postfix start</i>
</pre>

<note>
Pouze služby, které ji <e>potřebují</e>, jsou zastaveny nebo restartovány.
Další na ní závislé služby (ty, které ji <e>používají</e>, ale nepotřebují),
nejsou dotčeny.
</note>

<p>
Chcete-li zastavit službu, ale ne další služby, které na ní závisí, můžete
použít parametr <c>pause</c>:
</p>

<pre caption="Pozastavení Postfixu a ponechání dalších služeb naživu">
# <i>/etc/init.d/postfix pause</i>
</pre>

<p>
Chcete-li vědět, v&nbsp;jakém stavu se daná služba právě nachází (zda běží, je
ukončená a nebo pozastavená), můžete použít argument <c>status</c>:
</p>

<pre caption="Informace o stavu Postfixu">
# <i>/etc/init.d/postfix status</i>
</pre>

<p>
Říká-li informace o stavu, že služba běží, avšak Vy víte, že ne, můžete tuto
informaci změnit pomocí argumentu <c>zap</c>:
</p>

<pre caption="Změna informace o stavu služby postfix">
# <i>/etc/init.d/postfix zap</i>
</pre>

<p>
Pro zjištění závislostí služby můžete použít <c>iuse</c> či <c>ineed</c>.
Parametr <c>ineed</c> vypíše seznam služeb, které služba aktuální ke&nbsp;svému
chodu opravdu potřebuje; <c>iuse</c> naproti tomu ukáže ty služby, které daná
služba používat může, ale ke správné funkci je nutně nevyžaduje.
</p>

<pre caption="Výpis všech služeb, na kterých Postfix závisí">
# <i>/etc/init.d/postfix ineed</i>
</pre>

<p>
Podobně se můžete dotázat na služby, které danou službu potřebují
(<c>needsme</c>) nebo mohou používat (<c>usesme</c>):
</p>

<pre caption="Výpis všech služeb, které potřebují Postfix">
# <i>/etc/init.d/postfix needsme</i>
</pre>

<p>
Konečně, je možné požádat i o výpis závislostí, které služba vyžaduje, ale
které chybí:
</p>

<pre caption="Výpis chybějících závislostí Postfixu">
# <i>/etc/init.d/postfix broken</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Práce s&nbsp;rc-update</title>
<subsection>
<title>Co je rc-update?</title>
<body>

<p>
Init systém Gentoo používá pro rozhodování o pořadí spouštění služeb strom
závislostí. Protože jeho udržování je poměrně zdlouhavé a únavné, vytvořili jsme
nástroje, které správu runlevelů a init skriptů usnadňují.
</p>

<p>
Nástrojem <c>rc-update</c> můžete do runlevelu přidávat a odebírat skripty, a
on se sám postará o zavolání skriptu <c>depscan.sh</c> pro znovuvytvoření
stromu závislostí
</p>

</body>
</subsection>
<subsection>
<title>Přidání a odebírání služeb</title>
<body>

<p>
Během instalace Gentoo jste již init skripty přidávali do runlevelu "default".
Tehdy jste možná ještě neměli páru, k&nbsp;čemu onen "default" slouží, ale teď
už byste to vědět měli. Skript <c>rc-update</c> vyžaduje i druhý argument
definující akci k&nbsp;provedení: <e>add</e>, <e>del</e> nebo <e>show</e>.
</p>

<p>
Pro přidání či odebrání init skriptu jednoduše spusťte <c>rc-update</c>
s&nbsp;argumentem <c>add</c> (přidání) nebo <c>del</c> (odebrání) následovaným
jménem init skriptu a runlevelem. Například takto:
</p>

<pre caption="Odstranění Postfixu z&nbsp;výchozího runlevelu">
# <i>rc-update del postfix default</i>
</pre>

<p>
Příkaz <c>rc-update show</c> zobrazí dostupné init skripty a patřičné runlevely,
ve kterých jsou skripty aktivní:
</p>

<pre caption="Informace o init skriptech">
# <i>rc-update show</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Konfigurace služeb</title>
<subsection>
<title>K&nbsp;čemu další konfigurace?</title>
<body>

<p>
Init skripty mohou být poměrně komplexní, a proto není vhodné, aby je měnili
uživatelé sami, kvůli riziku zanesení chyb. Služby je však potřeba
konfigurovat, například někdy můžete potřebovat předat samotné službě další
parametry.
</p>

<p>
Druhým důvodem k&nbsp;tomu, abychom udržovali informace o konfiguraci mimo init
skript jsou aktualizace, resp. zamezení obavám o to, že o svoji konfiguraci
během aktualizace přejdete.
</p>

</body>
</subsection>
<subsection>
<title>Adresář /etc/conf.d</title>
<body>

<p>
Konfigurace služeb je v&nbsp;Gentoo snadná - každý konfigurovatelný init skript
má svůj soubor v&nbsp;adresáři <path>/etc/conf.d</path>. Kupříkladu
konfigurace init skriptu apache2 (<path>/etc/init.d/apache2</path>) se provádí
v&nbsp;souboru <path>/etc/conf.d/apache2</path>; tento obsahuje parametry
předávané serveru Apache&nbsp;2 při jeho spuštění:
</p>

<pre caption="Proměnná definovaná v&nbsp;/etc/conf.d/apache2">
APACHE2_OPTS="-D PHP4"
</pre>

<p>
V&nbsp;těchto konfiguračních souborech nenajdete nic než proměnné, ovlivňující
chování daného init skriptu, a samozřejmě komentáře. Formát je podobný jako
v&nbsp;<path>/etc/make.conf</path>.
</p>

</body>
</subsection>
</section>
<section>
<title>Psaní init skriptu</title>
<subsection>
<title>Musím?</title>
<body>

<p>
Ne, psaní init skriptů většinou není nutné, protože Gentoo poskytuje skripty
připravené k&nbsp;použití. Avšak je možné, že jste si nainstalovali nějakou
službu, která není v&nbsp;Portage, a v&nbsp;takovém případě si budete muset
init skript pravděpodobně vytvořit.
</p>

<p>
Nepoužívejte init skript, který není napsaný přímo pro Gentoo -- formát jiných
distribucí není s&nbsp;naším kompatibilní!
</p>

</body>
</subsection>
<subsection>
<title>Schéma</title>
<body>

<p>
Základní uspořádání init skriptu je ukázáno níže:
</p>

<pre caption="Základní uspořádání init skriptu">
#!/sbin/runscript

depend() {
  <comment>(informace o závislostech)</comment>
}

start() {
  <comment>(příkazy potřebné pro start služby)</comment>
}

stop() {
  <comment>(příkazy nezbytné pro zastavení služby)</comment>
}

restart() {
  <comment>(příkazy potřebné pro restart služby)</comment>
}
</pre>

<p>
Každý init skript <e>musí</e> obsahovat funkci <c>start()</c>, všechny další
sekce jsou volitelné.
</p>

</body>
</subsection>
<subsection>
<title>Závislosti</title>
<body>

<p>
Můžete definovat dva druhy závislostí: <c>use</c> a <c>need</c>. Jak již bylo
zmíněno výše, <c>need</c> je striktnější než <c>use</c>. Obě dvě akceptují buď
jméno služby, kterou potřebujete či používáte a nebo <e>virtuální</e> závislost.
</p>

<p>
<e>Virtuální</e> závislost může být poskytovaná více službami. Váš init skript
může například záviset na systémovém loggeru, avšak protože jich je více
možných (metalogd, syslog-ng, sysklogd,...), a služba nemůže přes <c>need</c>
záviset na všech (žádný rozumný systém nemá všechny nainstalované a spouštěné),
použijete <e>virtuální</e> závislost, poskytovanou pomocí <c>provide</c>.
</p>

<p>
Podívejme se na na informace o závislostech pro službu postfix:
</p>

<pre caption="Informace o závislostech Postfixu">
depend() {
  need net
  use logger dns
  provide mta
}
</pre>

<p>
Jak můžete vidět, služba postfix:
</p>

<ul>
  <li>
    vyžaduje (virtuální) závislost <c>net</c> (kterou poskytuje například
    <path>/etc/init.d/net.eth0</path>)
  </li>
  <li>
    používá (virtuální) závislost <c>logger</c> (kterou poskytuje například
    <path>/etc/init.d/syslog-ng</path>)
  </li>
  <li>
    používá (virtuální) závislost <c>dns</c> (kterou poskytuje například
    <path>/etc/init.d/named</path>)
  </li>
  <li>
    poskytuje (virtuální) závislost <c>mta</c> (která je společná pro všechny
    mailservery)
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>Kontrola pořadí</title>
<body>

<p>
V&nbsp;některých případech nebudete nějakou službu potřebovat, ale přejete si,
aby byla ta Vaše spuštěna před (<c>before</c>) nebo až po (<c>after</c>) nějaké
jiné, pokud je tato v&nbsp;systému přítomná (povšimněte si podmínky - již nejde
o závislost) <e>a zároveň</e> je ve&nbsp;stejném runlevelu (opět podmínka -
v&nbsp;úvahu jsou brány pouze služby ve&nbsp;stejném runlevelu). Takového
chování můžete dosáhnout pomocí nastavení <c>before</c> nebo <c>after</c>.
</p>

<p>
Jako příklad se podíváme na nastavení služby portmap:
</p>

<pre caption="Funkce depend() služby portmap">
depend() {
  need net
  before inetd
  before xinetd
}
</pre>

<p>
Také můžete použít metaznak "*", který znamená "všechny služby
v&nbsp;runlevelu", avšak není to doporučeno.
</p>

<pre caption="Spuštění init skriptu jako první v&nbsp;runlevelu">
depend() {
  before *
}
</pre>

</body>
</subsection>
<subsection>
<title>Standardní funkce</title>
<body>

<p>
Dále je potřeba definovat funkci <c>start()</c>, která musí obsahovat všechny
příkazy potřebné ke&nbsp;spuštění služby. Je doporučeno použít funkce
<c>ebegin</c> a <c>eend</c>, aby uživatel viděl, co se děje:
</p>

<pre caption="Ukázková funkce start()">
start() {
  ebegin "Starting my_service"
  start-stop-daemon --start --quiet --exec /path/to/my_service
  eend $?
}
</pre>

<p>
Potřebujete-li více příkladů funkce <c>start()</c>, přečtěte si, prosím,
zdrojové kódy dostupných init skriptů v&nbsp;adresáři <path>/etc/init.d</path>.
Příkaz <c>start-stop-daemon</c> má výbornou manuálovou stránku, potřebujete-li
další informace:
</p>

<pre caption="Zobrazení manuálové stránky start-stop-daemon">
# <i>man start-stop-daemon</i>
</pre>

<p>
Další funkce, které můžete definovat, jsou <c>stop</c> a <c>restart</c>, není
to však povinné! Náš init systém je natolik inteligentní, že pokud používáte
<c>start-stop-daemon</c>, doplní si tyto funkce sám.
</p>

<p>
Syntax init skriptů používaných v&nbsp;Gentoo je kompatibilní s&nbsp;Bourne
Again Shellem (bash), čili v&nbsp;nich můžete používat rozšíření bashe.
</p>

</body>
</subsection>
<subsection>
<title>Přidání vlastních možností</title>
<body>

<p>
Chcete-li, aby Vaše init skripty podporovaly více voleb než ty, na které jsme
zatím narazili, měli byste je přidat do proměnné <c>opts</c> a definovat funkci
se&nbsp;jménem shodným, jako má daná možnost. Například pro volbu
<c>restartdelay</c>:
</p>

<pre caption="Podpora volby restartdelay">
opts="${opts} restartdelay"

restartdelay() {
  stop()
  sleep 3    <comment># Před novým spuštěním počkej 3 sekundy</comment>
  start()
}
</pre>

</body>
</subsection>
<subsection>
<title>Proměnné pro konfiguraci služeb</title>
<body>

<p>
Abyste mohli využívat konfiguraci v&nbsp;<path>/etc/conf.d</path>, nemusíte
dělat vůbec nic - když je váš skript spuštěn, provede se "source" všech těchto
souborů (tj. proměnné z&nbsp;nich budou k&nbsp;dispozici):
</p>

<ul>
  <li><path>/etc/conf.d/&lt;Váš init skript&gt;</path></li>
  <li><path>/etc/conf.d/basic</path></li>
  <li><path>/etc/rc.conf</path></li>
</ul>

<p>
Zároveň pokud Váš init skript poskytuje virtuální závislost (například
<c>net</c>), bude soubor s&nbsp;ní asociovaný rovněž zpracován (například
<path>/etc/conf.d/net</path>).
</p>

</body>
</subsection>
</section>
<section>
<title>Změna výchozího chování</title>
<subsection>
<title>Kdo by to mohl použít?</title>
<body>

<p>
Mnoho uživatelů notebooků tuto situaci zná - doma chcete spouštět
<c>net.eth0</c>, ale na cestách ne, protože během nich síť k&nbsp;dispozici
nemáte. S&nbsp;Gentoo můžete změnit chování runlevelů k&nbsp;obrazu svému.
</p>

<p>
Můžete si například přidat druhý "výchozí" runlevel, do kterého mlžete
nabootovat, s&nbsp;přiřazenými patřičnými skripty. Při spuštění počítače si
budete moci vybrat, který runlevel se má zavést.
</p>

</body>
</subsection>
<subsection>
<title>Použití SOFTLEVEL</title>
<body>

<p>
Nejprve vytvořte adresář pro svůj "druhý" výchozí runlevel. Jako příklad
vytvoříme runlevel <path>offline</path>:
</p>

<pre caption="Vytvoření adresáře runlevelu">
# <i>mkdir /etc/runlevels/offline</i>
</pre>

<p>
Přidejte nezbytné init skripty do nově vytvořeného adresáře. Například pokud
chcete mít přesnou kopii současného runlevelu <c>default</c>, avšak bez
<c>net.eth0</c>:
</p>

<pre caption="Přidání nezbytných init skriptů">
# <i>ls /etc/runlevels/default</i>
acpid  domainname  local  net.eth0  netmount  postfix  syslog-ng  vixie-cron
# <i>rc-update add acpid offline</i>
# <i>rc-update add domainname offline</i>
# <i>rc-update add local offline</i>
# <i>rc-update add syslog-ng offline</i>
# <i>rc-update add vixie-cron offline</i>
</pre>

<p>
Nyní změňte konfiguraci svého bootloaderu a přidejte novou položku pro runlevel
<c>default</c>. Například pro <path>/boot/grub/grub.conf</path>:
</p>

<pre caption="Přidání položky pro runlevel offline">
title Gentoo Linux Offline Usage
  root (hd0,0)
  kernel (hd0,0)/kernel-2.4.25 root=/dev/hda3 <i>softlevel=offline</i>
</pre>

<p>
Voila, to je všechno. Když nyní při bootování Vašeho systému vyberete nově
přidanou položku, runlevel <c>offline</c> bude použit místo výchozího
<c>default</c>.
</p>

</body>
</subsection>
<subsection>
<title>Použití BOOTLEVEL</title>
<body>

<p>
Použití <c>bootlevel</c>u je úplně stejné jako <c>softlevel</c>, jediný rozdíl
je, že místo druhého runlevelu "default" definujete druhý runlevel "boot".
</p>

</body>
</subsection>
</section>
</sections>
