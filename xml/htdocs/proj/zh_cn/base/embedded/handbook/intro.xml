<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/zh_cn/base/embedded/handbook/intro.xml,v 1.1 2011/07/16 06:41:06 r0bertz Exp $ -->
<!-- English CVS version: 1.7 --> 

<sections>

<abstract>
这里是对嵌入式，交叉编译的入门介绍。
</abstract>

<version>0.3</version>
<date>2011-07-15</date>

<section>
<title>概要介绍</title>
<body>

<p>
从传统上来看，交叉开发被认为是一门黑色艺术。它需要做大量的研究，试验和纠错，还需要毅力。那些勇敢的开发者面临着缺乏文档以及缺少成熟、全面的开源跨平台开发工具包等方面的问题。<uri link="/proj/en/base/embedded/">嵌入式Gentoo项目社区</uri>正在针对这些问题做一些工作，其中一项叫做<mail link="toolchain@gentoo.org">Gentoo工具链集</mail>，还有一些贡献者正在做一个基于Gentoo的开发平台，这个平台能够大大地简化交叉开发。
</p>

</body>
</section>

<section>
<title>工具链</title>
<body>

<p>
工具链就是一大堆用来创建系统的开发包（工具被用来处理一系列事件，进行输入输出操作）。被看作工具链一部分的那些开发包具体是什么呢？显然这样解释工具链不够严谨，但是为了把事情说得简单一些，我们将会只考虑那些需要被编译代码进去的有趣和有用的构件
</p>

<p>
典型的工具链由以下组成：
</p>

<ul>
  <li><c>binutils</c> - 用来处理二进制文件的工具集（包括汇编和链接）</li>
  <li><c>gcc</c> - GNU编译工具集（包括C和C++编译器）</li>
  <li><c>glibc</c>、<c>uclibc</c>或<c>newlib</c> - 系统C函数库</li>
  <li><c>linux-headers</c> - 系统C函数库必需的内核头文件</li>
  <li><c>gdb</c> - GNU调试工具</li>
</ul>

<p>
所有正统的Gentoo系统中都已经安装了工具链，它被视作基础系统的一部分。配置好工具链之后就可以用它来生成与主机平台相应的二进制文件。
</p>

<p>
要想在主机平台上生成一个非主机平台的二进制文件，还需要一个特殊的工具链，叫做交叉工具链，它面向特殊的平台。Gentoo提供了一个简单却很强大的工具叫crossdev，它能够在主机上生成和安装任何支持GCC的交叉工具链。因为Gentoo会安装工具链文件到特定的目标目录，所以不用担心crossdev生成的工具链会和本地主机自己的工具链相冲突。
</p>

</body>
</section>

<section>
<title>环境变量</title>
<body>

<p>
Gentoo工具链用到的某些环境变量会让那些经验不足的交叉开发者彻底地混淆。下面的表格解释了一些棘手的变量，并提供了相应的示例，这些示例都是基于本手册中出现过的交叉开发范例。要了解更多不常见的变量和相关概念，可以查看其他术语和变量。
</p>

<table>
 <tr>
  <th>变量</th>
  <th>生成交叉工具链时的含义</th>
  <th>生成交叉二进制时的含义</th>
 </tr>
 <tr>
  <th>CBUILD</th>
  <ti>生成过程运行的平台</ti>
  <ti>生成过程运行的平台</ti>
 </tr>
 <tr>
  <th>CHOST</th>
  <ti>交叉工具链运行的平台</ti>
  <ti>交叉工具链生成的二进制文件运行的平台</ti>
 </tr>
 <tr>
  <th>CTARGET</th>
  <ti>交叉工具链生成二进制文件运行的平台</ti>
  <ti>
    交叉工具链生成二进制文件运行的平台。另外要说的是，设置这个变量没有什么坏处，只是有些二进制文件需要这样做。
  </ti>
 </tr>
 <tr>
  <th>ROOT</th>
  <ti colspan="2">要安装的虚拟目标根目录(<path>/</path>)</ti>
 </tr>
 <tr>
  <th>PORTAGE_CONFIGROOT</th>
  <ti colspan="2">在虚拟目标根目录(<path>/</path>) 下面要能够被portage找到相应的配置文件(比如 <path>/etc/make.conf</path>)</ti>
 </tr>
</table>

<p>
比方说现在我们有一个AMD64的台式机，在它上面跑Gentoo，还有一个ARM的手持设备，想给这个手持设备做开发，与上面对应的表格就是这样的了：
</p>

<table>
 <tr>
  <th>变量</th>
  <th>生成交叉工具链时的值</th>
  <th>生成交叉二进制时的值</th>
 </tr>
 <tr>
  <th>CBUILD</th>
  <ti><c>x86_64-pc-linux-gnu</c></ti>
  <ti><c>x86_64-pc-linux-gnu</c></ti>
 </tr>
 <tr>
  <th>CHOST</th>
  <ti><c>x86_64-pc-linux-gnu</c></ti>
  <ti><c>arm-unknown-linux-gnu</c></ti>
 </tr>
 <tr>
  <th>CTARGET</th>
  <ti><c>arm-unknown-linux-gnu</c></ti>
  <ti><e>not set</e></ti>
 </tr>
 <tr>
  <th>ROOT</th>
  <ti><e>not set -- defaults to <path>/</path></e></ti>
  <ti><c>/path/where/you/install</c></ti>
 </tr>
 <tr>
  <th>PORTAGE_CONFIGROOT</th>
  <ti><e>not set -- defaults to <path>/</path></e></ti>
  <ti><c>/path/where/your/portage/env/for/arm/pda/is</c></ti>
 </tr>
</table>

</body>
</section>

<section id="terminology">
<title>其他术语和变量</title>
<body>

<dl>
<dt><c>canadian cross</c></dt>
<dd>
  生成交叉编译器的过程，将会运行在另外一台机器上（CBUILD != CHOST &amp;&amp; CHOST != CTARGET）。
</dd>

<dt><c>sysroot: system root</c></dt>
<dd>
  编译器会从它的根目录下面去查找标准的头文件和库文件。
</dd>

<dt><c>hardfloat</c></dt>
<dd>
  系统有一个硬件浮点单元来处理浮点运算。
</dd>

<dt><c>softfloat</c></dt>
<dd>
  如果没有硬件浮点单元，所有的浮点操作会由定点运算作近似处理。
</dd>

<dt><c>PIE</c></dt>
<dd>独立可执行位置(-fPIE -pie)</dd>

<dt><c>PIC</c></dt>
<dd>独立代码位置(-fPIC)</dd>

<dt><c>CRT</c></dt>
<dd>C运行时</dd>

<dt><c>Tuple</c></dt>
<dd>
  在crossdev中，它被定义为ARCH-VENDOR-OS-LIBC格式的字符串。通过crossdev –t 来查看帮助信息，就可以知道这个字符串具体如何来实现。
</dd>
</dl>

</body>
</section>
</sections>
