<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/zh_cn/base/embedded/handbook/cross-compiler.xml,v 1.1 2011/07/16 06:41:06 r0bertz Exp $ -->
<!-- English CVS version: 1.11 -->
<sections>

<abstract>
在你的电脑上创建交叉编译工具！
</abstract>

<version>0.3</version>
<date>2010-04-13</date>

<section>
<title>简介</title>
<body>

<p>
在创建工具链之前首先要知道工具链组件的一些版本之间可能存在冲突。具体说来就是在Portage树调用的时候一些版本的组合可能存在问题。
最稳妥的方式就是运行crossdev来决定用哪个版本，在必要的情况下crossdev可以对个别组件的版本进行调整，直到成功创建工具链。
然而，交叉工具链产生的二进制文件可能会对目标系统造成破坏。只有具备足够的耐心通过反复尝试，才能让所有这些因素的组合达到最佳状态。
</p>

<p>
你不必担心交叉编译工具会影响到你的宿主机系统。在目标系统上所有的工具链安装包都是相互独立的。通过这种方式你可以安装你想要的任意体系结构的交叉编译工具，
而且它不会破会宿主系统的其他部分。
</p>

<p>
尽管如此，在某些情况下随着时间的推移，会引起Portage需要变化。要保持你所安装的Genttoo系统的纯洁，我们特别建议你在Gentoo stage3 chroot这个阶段去安装crossdev和进行交叉编译。
(这里的chroot就是你在安装Gentoo时候用到的那个chroot)
</p>

</body>
</section>

<section>
<title>crossdev</title>
<subsection>
<title>简介</title>
<body>

<p>
手动生成交叉编译工具是一个漫长并需要耐心的过程。这也是为什么它会直接被集成的Gentoo系统里！
一个被称作<c>crossdev</c>的前端会运行<c>emerge</c>并配置好所有的环境变量和正确的安装包版本，生成任意你想要的交叉编译工具。
首先你得安装<c>crossdev</c>:
</p>

<pre caption="安装crossdev">
# <i>emerge crossdev</i>
</pre>

<p>
你可能需要安装带有关键字arch的crossdev版本以获得当前最新的一些功能。
</p>

<note>
如果你已经安装了<c>crossdev-wrappers</c>，要对旧版本的croosdev进行升级。那么你首先要卸载crossdev-wrappers。之前已经安装的交叉编译工具仍然有效。
</note>

<p>
在这里我们只对crossdev的基本功能进行介绍，但是croossdev可以根据大多数的需求实现更多的自定义功能。运行<c>crossdev --help</c>可以获得更多的使用帮助。
下面介绍几个简单的使用：
</p>

<pre caption="有用的crossdev选项">
<comment>(Use specific package versions)</comment>
# <i>crossdev --g [gcc version] --l [(g)libc version] --b [binutils version] --k [kernel headers version] -P -v -t [tuple]</i>
<comment>（仅使用稳定版）</comment>
# <i>crossdev -S -P -v -t [tuple]</i>
</pre>

</body>
</subsection>
<subsection>
<title>安装</title>
<body>

<p>
第一步要为你的系统选择正确的tuple。这里假设你想为SH4（SuperH）安装带有glibc的Linux交叉编译工具。我们将会在PowerPC上作演示。
</p>

<pre caption="生成SH4交叉编译工具">
# <i>crossdev --target sh4-unknown-linux-gnu</i>
-----------------------------------------------------------------------------------------------------
 * Host Portage ARCH:     ppc
 * Target Portage ARCH:   sh
 * Target System:         sh4-unknown-linux-gnu
 * Stage:                 4 (C/C++ compiler)

 * binutils:              binutils-[latest]
 * gcc:                   gcc-[latest]
 * headers:               linux-headers-[latest]
 * libc:                  glibc-[latest]

 * PORTDIR_OVERLAY:       /usr/local/portage
 * PORT_LOGDIR:           /var/log/portage
 * PKGDIR:                /usr/portage/packages/powerpc-unknown-linux-gnu/cross/sh4-unknown-linux-gnu
 * PORTAGE_TMPDIR:        /var/tmp/cross/sh4-unknown-linux-gnu
  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  
 * Forcing the latest versions of {binutils,gcc}-config/gnuconfig ...                          [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-binutils.log
 * Emerging cross-binutils ...                                                                 [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-gcc-stage1.log
 * Emerging cross-gcc-stage1 ...                                                               [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-linux-headers.log
 * Emerging cross-linux-headers ...                                                            [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-glibc.log
 * Emerging cross-glibc ...                                                                    [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-gcc-stage2.log
 * Emerging cross-gcc-stage2 ...                                                               [ ok ]
</pre>

<note>
这里不需要对<c>PORTAGE_CONFIGROOT</c>进行设置。你要用自己的配置文件。如果你想用archl
At the moment it's not possible to set <c>PORTAGE_CONFIGROOT</c> before calling
<c>crossdev</c> to a folder set to the arch you're targetting. You have to use
your own config.  If you want to use archl specific use flags, like
<c>altivec</c> in a non powerpc architecture, you need to unmask the use flag in
<c>/usr/portage/base/use.mask</c>, or temporarily change your profile.
</note>
	
</body>
</subsection>
<subsection>
<title>快速测试</title>
<body>

<p>
如果进展顺利，在你的机器上会有一个很“炫”的新编译工具。Give it a spin!
</p>

<pre caption="使用SH4交叉编译工具">
$ <i>sh4-unknown-linux-gnu-gcc --version</i>
sh4-unknown-linux-gnu-gcc (GCC) 4.2.0 (Gentoo 4.2.0 p1.4)
Copyright (C) 2007 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
$ <i>echo 'int main(){return 0;}' > sh4-test.c</i>
$ <i>sh4-unknown-linux-gnu-gcc -Wall sh4-test.c -o sh4-test</i>
$ <i>file sh4-test</i>
sh4-test: ELF 32-bit LSB executable, Renesas SH, version 1 (SYSV), for GNU/Linux 2.6.9, dynamically linked (uses shared libs), not stripped
</pre>

<p>
如果crossdev命令执行失败，你可以通过查看日志文件定位问题。如果你不能解决这个问题，欢迎在bugzilla中提交bug。更多信息请查看<uri
link="communication.xml">联系方式</uri>。
</p>

</body>
</subsection>

<subsection>
<title>卸载</title>
<body>

<p>
要卸载工具链，只需要使用<c>--clean</c>选项。如果你手动修改了sysroot目录，就会提示删除该目录下的文件，你可能会用到管道命令<c>yes |</c>。
</p>

<pre caption="卸载交叉编译工具">
# <i>crossdev --clean sh4-unknown-linux-gnu</i>
</pre>

<p>
在你没有发觉的情况，也可以很安全的删除<path>/usr/CTARGET/</path>目录下的所有内容。
</p>

</body>
</subsection>
<subsection>
<title>选项</title>
<body>

<p>
显然crossdev还可以做很多事情，要了解更多可以运行<c>crossdev --help</c>。
</p>

</body>
</subsection>
</section>

<section>
<title>交叉编译工具Cross-compiler Internals</title>

<subsection>
<body>
<warn>
这一节介绍希望能够对大家有用，尤其那些特别想用binutils/(glibc|uclibc)/gcc亲自动手创建自己的交叉编译工具的人。这也并不意味着会涵盖所有的问题，诸如一些编译错误。
</warn>

<warn>
如果你读到了这里，你可以尝试签出crosstool工程（参考链接<uri link="the-more-you-know.xml">本节之外</uri>），它会提供一个生成编译工具的独立发布版本。
同时，它易于理解，是创建编译工具的一个最佳选择。
</warn>
</body>
</subsection>

<subsection>
<title>总结</title>
<body>

<p>
大体上有良好总方式可以创建交叉编译工具被动方式和the cheater's shortcut。
</p>

<p>
被动方式:
</p>

<ol>
  <li>binutils</li>
  <li>kernel headers</li>
  <li>libc headers</li>
  <li>gcc stage1 (c-only)</li>
  <li>libc</li>
  <li>gcc stage2 (c/c++/etc...)</li>
</ol>

<p>
The cheater's shortcut is:
</p>

<ol>
  <li>binutils</li>
  <li>kernel headers</li>
  <li>gcc stage1 (c-only)</li>
  <li>libc</li>
  <li>gcc stage2 (c/c++/etc...)</li>
</ol>

<p>
人们更倾向于shorcut的原因是libc头文件的方式会更快，尤其是在慢一些的机器上。如果没有一个通用的交叉编译工具，安装内核和libc头文件也是很让人头疼的。
还要注意如果你使用了shortcut方式，就不能从上游的工程那里获得交叉编译工具方面的帮助。
</p>

<p>
另外shortcut方式需要gcc stage1被“crippled”。如果你在没有头文件的情况下去构建，就不能打开sysroot选项，也不能创建合适的gcc库文件。
如果你仅仅是使用stage1构建C库，这倒是没有什么问题，前提是你有一个很好的基于sysroot的编译工具。
</p>

<p>
下面我会描述被动式，它的步骤也和上面差不多。你只是需要一些额外的gcc补丁来进行short方式。
</p>

</body>
</subsection>
<subsection>
<title>Sysroot</title>
<body>

<p>
我们将会使用sysroot方式来进行交叉编译，sysroot可以做到么？
</p>

<p>
Sysroot告诉GCC哪个目录包含了目标操作系统的（一系列）根文件系统，从那里可以找到目标系统头文件，库文件和执行时目标文件。
</p>

<p>
顶级目录通常是/usr/$CTARGET。
</p>

<pre caption="典型的Sysroot布局">
/usr/$CTARGET/
|-- bin/
|-- lib/            关键运行时库（像libc/ldso/之类）
`-- usr/
    |-- include/    开发包头文件
    |   |-- linux/      linux的内核
    |   `-- asm/        指定的体系结构
    `-- lib/        非关键运行时库/开发库
</pre>

<p>
这里的目录结构和<path>/</path>下看到的类似，只是在<path>/usr/$CTARGET</path>而已。这种设置不是偶然，这样设计是为了更易于在目标板上将应用程序和库从
<path>/usr/$CTARGET</path>移植到<path>/</path>。如果你愿意，你可以偷个懒使用<path>/usr/$CTARGET</path>作为NFS的根目录！
</p>

<note>
按照旧的交叉编译风格可以使用<c>--prefix=/usr/$CTARGET</c>。如果你想使用支持sysroot的binutils/gcc版本，你可能需要用到这个选项。
我将不对此作说明，因为：第一，你不应该使用这样的旧版本；第二，相对于sysroot方式这个会让人很头疼。
</note>

</body>
</subsection>
<subsection>
<title>Binutils</title>
<body>

<p>
获取最新的binutils安装包并对其进行解包。
</p>

<p>
配置<c>--disable-werror</c>选项可以阻止binutils在编译的时候因为警告而被终止执行。对开发者来说是一个很管用的选项，对用户来说则相反。
</p>

<pre caption="配置和构建binutils">
$ <i>./configure \
	--target=$CTARGET \
	--prefix=/usr \
	--with-sysroot=/usr/$CTARGET \
	--disable-werror</i>
$ <i>make</i>
$ <i>make install DESTDIR=$PWD/install-root</i>
</pre>

<p>
我们安装到本地目录是为了方便的移除crap。例如，一个普通的安装会生成<path>/usr/lib/libiberty.a</path>，这个文件本来不在主机<path>/usr/lib</path>目录下。
所以首先要清除这类文件：
</p>

<pre caption="移除binutils">
$ <i>rm -rf install-root/usr/{info,lib,man,share}</i>
</pre>

<p>
剩下就是安装了：
</p>

<pre caption="安装binutils">
# <i>cp -a install-root/* /</i>
</pre>

</body>
</subsection>
<subsection>
<title>内核头文件</title>
<body>

<p>
获取最心的linux安装包，并解包。有两种方式可以安装内核头文件：sanitized and unsanitized。前者会更好（需要最新的Linux内核版本），但我们很快就会让两种方式都被支持。
</p>

<note>
Clearly you'll have to replace $ARCH with a value that makes sense for your
platform.
</note>

<pre caption="构建和安装unsanitized头文件">
$ <i>yes "" | make ARCH=$ARCH oldconfig prepare</i>
# <i>mkdir -p /usr/$CTARGET/usr/include</i>
# <i>cp -a include/linux include/asm-generic /usr/$CTARGET/usr/include/</i>
# <i>cp -a include/asm-$ARCH /usr/$CTARGET/usr/include/asm</i>
</pre>

<pre caption="构建和安装/sanitized头文件">
# <i>make ARCH=$ARCH headers_install INSTALL_HDR_PATH=/usr/$CTARGET/usr</i>
</pre>

</body>
</subsection>
<subsection>
<title>系统lib头文件</title>
<body>

<p>
获取最新的glibc安装包并解包。Glibc是picky，所以你需要在和源代码目录独立的目录下进行编译。
</p>

<pre caption="构建/安装glibc头文件">
$ <i>mkdir build</i>
$ <i>cd build</i>
$ <i>../configure \
	--host=$CTARGET \
	--prefix=/usr \
	--with-headers=/usr/$CTARGET/usr/include \
	--without-cvs \
	--disable-sanity-checks</i>
# <i>make -k install-headers install_root=/usr/$CTARGET</i>
</pre>

<p>
Glibc sucks at life so you have to do a few things by hand:
</p>

<pre caption="glibc帮助">
# <i>mkdir -p /usr/$CTARGET/usr/include/gnu</i>
# <i>touch /usr/$CTARGET/usr/include/gnu/stubs.h</i>
# <i>cp bits/stdio_lim.h /usr/$CTARGET/usr/include/bits/</i>
</pre>

</body>
</subsection>
<subsection>
<title>GCC Stage 1 (C only)</title>
<body>

<p>
我们首先要帮gcc找到当前的libc头文件。
</p>

<pre caption="gcc帮助">
# <i>ln -s usr/include /usr/$CTARGET/sys-include</i>
</pre>

<p>
获取最新的gcc安装包并解压。
Then grab the latest gcc tarball and unpack it.
</p>

<pre caption="创建gcc stage 1">
$ <i>mkdir build</i>
$ <i>cd build</i>
$ <i>../configure \
	--target=$CTARGET \
	--prefix=/usr \
	--with-sysroot=/usr/$CTARGET \
	--enable-languages=c \
	--disable-shared \
	--disable-checking \
	--disable-werror \
	--disable-libmudflap \
	--disable-libssp \
	--disable-libgomp</i>
$ <i>make</i>
$ <i>make install DESTDIR=$PWD/install-root</i>
</pre>

<p>
和binutils一样，gcc留下一些我们不需要的东西。
</p>

<pre caption="移除gcc stage 1">
$ <i>rm -rf install-root/usr/{info,include,lib/libiberty.a,man,share}</i>
</pre>

<p>
安装剩下的东西（它们都在CTARGET所指定的目录下面）：
</p>

<pre caption="安装gcc stage 1">
# <i>cp -a install-root/* /</i>
</pre>

</body>
</subsection>
<subsection>
<title>系统libc库</title>
<body>

<p>
移除旧的glibc目录，并重建。
</p>

<pre caption="构建/安装glibc">
$ <i>rm -rf build</i>
$ <i>mkdir build</i>
$ <i>cd build</i>
$ <i>../configure \
	--host=$CTARGET \
	--prefix=/usr \
	--without-cvs</i>
$ <i>make</i>
# <i>make install install_root=/usr/$CTARGET</i>
</pre>

</body>
</subsection>
<subsection>
<title>GCC Stage 2 (All frontends)</title>
<body>

<p>
构建一个完整的GCC。选择任意一个你喜欢的编译工具；我们将只用到C/C++。
</p>

<pre caption="构建/安装gcc stage 2">
$ <i>./configure \
	--target=$CTARGET \
	--prefix=/usr \
	--with-sysroot=/usr/$CTARGET \
	--enable-languages=c,c++ \
	--enable-shared \
	--disable-checking \
	--disable-werror</i>
$ <i>make</i>
# <i>make install</i>
</pre>

</body>
</subsection>
<subsection>
<title>Core Runtime Files</title>
<body>

<p>
这里有很多随机的核心运行时文件，你可能不知道它们用来做什么，下面解释一下。
</p>

<table>
<tr>
  <th colspan="2">glibc提供的文件</th>
</tr>
<tr>
  <th>文件</th>
  <th>作用</th>
</tr>
<tr>
  <ti>crt0.o</ti>
  <ti>
    旧式风格的初始化运行时代码，已经没有人再会用到这个了。
  </ti>
</tr>
<tr>
  <ti>crt1.o</ti>
  <ti>
    新式风格的初始化运行时代码。包含了符号_start，在跳转到libc主程序之前，用argc/argv/libc _init/libc _fini来设置环境变量。glibc会调用文件start.S。
  </ti>
</tr>
<tr>
  <ti>crti.o</ti>
  <ti>
    定义了函数prolog；.init段里包含了_init，。fini段里包含了_fini。glibc会调用文件initfini.c。
  </ti>
</tr>
<tr>
  <ti>crtn.o</ti>
  <ti>定义了epilog函数。glibc会调用文件initfini.c。</ti>
</tr>
<tr>
  <ti>Scrt1.o</ti>
  <ti>在生成PIEs的时候用来代替crt1.o</ti>
</tr>
<tr>
  <ti>gcrt1.o</ti>
  <ti>
    在生成代码的时候用来代替crt1.o。编译时要用到参数-pg，生成和gprof util匹配的输出文件。
  </ti>
</tr>
<tr>
  <ti>Mcrt1.o</ti>
  <ti>
    和gcrt1.o一样，但它只是用于prof utility。glibc把它作为一个dummy文件安装了进去，因为它在Linux系统中是没有用的。
  </ti>
</tr>
</table>

<table>
<tr>
  <th colspan="2">GCC提供的文件</th>
</tr>
<tr>
  <th>文件</th>
  <th>作用</th>
</tr>
<tr>
  <ti>crtbegin.o</ti>
  <ti>GCC用它来查找构造函数的起始位置。</ti>
</tr>
<tr>
  <ti>crtbeginS.o</ti>
  <ti>生成共享目标文件和PIEs的时候用来代替crtbegin.o。</ti>
</tr>
<tr>
  <ti>crtbeginT.o</ti>
  <ti>生成静态执行文件的时候用来代替crtbegin.o。</ti>
</tr>
<tr>
  <ti>crtend.o</ti>
  <ti>GCC用它来查找析构函数的起始位置。</ti>
</tr>
<tr>
  <ti>crtendS.o</ti>
  <ti>在生成目标文件和PIEs的时候用来代替crtend.o。</ti>
</tr>
</table>

<p>
通常的链接序列：
</p>

<pre caption="生成链接序列">
... crt1.o crti.o crtbegin.o [-L paths] [user objects] [gcc libs] [C libs] [gcc libs] crtend.o crtn.o	
</pre>

</body>
</subsection>
</section>

</sections>
