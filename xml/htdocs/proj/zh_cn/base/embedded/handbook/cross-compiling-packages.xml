<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/zh_cn/base/embedded/handbook/cross-compiling-packages.xml,v 1.1 2011/07/16 06:41:06 r0bertz Exp $ -->
<!-- English CVS version: 1.11 -->
<sections>

<abstract>
Leverage Portage是一个交叉编译包管理工具。
</abstract>

<version>5</version>
<date>2010-08-29</date>

<section>
<title>变量</title>
<body>

<p>
在接下来的这一整段里有一个重要的变量会被用到。
</p>

<table>
 <tr>
  <th>变量</th>
  <th>含义</th>
 </tr>
 <tr>
  <ti>CBUILD</ti>
  <ti>编译运行的平台Platform you are building on</ti>
 </tr>
 <tr>
  <ti>CHOST</ti>
  <ti>编译的目标平台</ti>
 </tr>
 <tr>
  <ti>ROOT</ti>
  <ti>要安装的虚拟根目录<path>/</path></ti>
 </tr>
 <tr>
  <ti>PORTAGE_CONFIGROOT</ti>
  <ti>
    虚拟根目录能够找到它自己的配置文件（比如<path>make.conf</path>）。
  </ti>
 </tr>
</table>

<p>
所有这些你都可以手动设置，但是很快你就会觉得那样会非常的枯燥乏味。最好的办法就是把这些都复制到shell脚本里自动执行，
这样就不需要一直用手来敲命令。
</p>

</body>
</section>

<section>
<title>安装文件系统</title>
<body>

<p>
交叉编译一个系统大体上包含了两个目录树。第一个就是所有的开发包文件都安装到了哪里，那里就是sysroot。
另外一个目录树就是运行时文件安装到了哪里。你可以安装所有那些你感兴趣的软件包到sysroot（不需要调整任何文件），
然后然后在运行时目录树里你既可以安装二进制软件包，也可以手动拷贝所有需要的文件。
</p>

<p>
按照惯例会用<path>/usr/CTARGET/</path>树来作为你的sysroot，这个目录树下的头文件和库文件目录会被gcc交叉编译工具来检索。
你可以使用其他的目录，只要自定义添加“-I/-L目录路径”到CPPFLAGS/LDFLAGS就可以实现，事实证明这种方式也存在一些问题。
是的，大多数时候它都可以正常工作，但是在某些情况下就会出现问题，这也是不鼓励采用这种方式的原因。在这个嵌入式手册里，
我们假设你使用sysroot来作为你开发的ROOT。
</p>

<p>
你需要为所安装的运行时系统做大量的裁剪工作。一旦删除了正常的安装包里的一些文件，这个目录树就再适合做反编译。
如果在安装到sysroot的时候创建的是二进制包，那样你就可以通过二进制包关联到<c>INSTALL_MASK</c>变量，来对大多数的东西进行调整。
更多相关信息可以用<c>man make.conf</c>来查看。
</p>

</body>
</section>

<section>
<title>介绍：crossdev的封装</title>
<body>

<p>
下面封装了一些简单的脚本，在合适的地方设置好环境变量，这样就可以使用emerge来进行交叉编译。
PORTAGE_CONFIGROOT和ROOT两者都要指向SYSROOT。
</p>

<pre caption="crossdev的封装">
# <i>emerge crossdev</i>
</pre>

<note>
在开始crossdev之前，需要运行<c>emerge-wrapper --init</c>。
在开始cross-emerge之前，要确保按照<c>emerge-wrapper</c>打印出来的指南来做。
</note>

<p>
在安装到开发根目录（sysroot）和运行时目录的时候，我们都可以使用这些工具。接着很简单，可以用<c>--root</c>选项来指定。
比如你crossdev一个<c>armv4tl-softfloat-linux-gnueabi</c>工具链，就可以像平时一样使用emerge来调用命令，但要使用<c>ctarget</c>前缀：
</p>

<pre caption="CTARGET-emerge">
# <i>armv4tl-softfloat-linux-gnueabi-emerge pkg0 pkg1 pkg2</i>
</pre>

<p>
默认情况下，这些封装会使用<c>--root-deps=rdeps</c>选项来避免由于被拉进deptree而导致的主机依赖。这种方式会导致deptrees不能全部完成。
因此，你可能需要单单使用--root-deps来看到所有的depgraph。
</p>

<p>
默认情况下，这些封装通常会链接到通用的嵌入式配置文件。这个做起来很简单，但是用户可能希望使用更高级的目标配置文件。
要实现这一点，我们可以更新配置文件符号链接。
</p>

<pre caption="${SYSROOT}/etc/make.profile">
# <i>ln -s /usr/portage/profiles/default/linux/arm/10.0 ${SYSROOT}/etc/make.profile</i>
</pre>

<p>
要很自然地改变目标系统的设置，比如像USE flags,FEATURES和VIDEO_CARDS，我们会编写标准的portage配置文件。
</p>

<pre caption="${SYSROOT}/etc/make.conf">
# <i>$EDITOR ${SYSROOT}/etc/make.conf</i>
</pre>

<p>
有时候我们要为覆盖配置脚本做一些额外的测试，要做到这一点，封装会导出一些变量来强制测试获得应有的答案。
这样会阻止软件包的膨胀，这些软件包添加了本地函数到workaround。有时候你可能会发现你需要添加额外的变量到这些文件，
从<path>/usr/share/crossdev/include/site/</path>到获得和编译软件包。
要计算出你要添加的变量，通常就像为autoconf抓取配置脚本并添加合适的目标文件一样简单。
在开始做过几次以后，就会变得更加清楚。
</p>
</body>
</section>

<section>
<title>卸载</title>
<body>

<p>
如果你想卸载和删除你的工作成果，你可以安全的移除sysroot目录而不会一想到本地安装包。
也可以参考<uri link="cross-compiler.xml">crossdev指南</uri>这一节。
</p>

</body>
</section>

</sections>
