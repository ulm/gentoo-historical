<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/zh_cn/base/embedded/handbook/cross-compiling-kernel.xml,v 1.1 2011/07/16 06:41:06 r0bertz Exp $ -->
<!-- English CVS version: 1.5 -->

<sections>

<abstract>
用你的才华亲手交叉编译一个内核。
</abstract>

<version>0.3</version>
<date>2010-04-13</date>

<section>
<title>源码</title>
<body>

<p>
首先安装相关的内核源代码。你可以从Gentoo Portage树里获取源码包，也可以自己从<uri link="http://kernel.org/">
Linux内核档案库</uri>里下载，或者通过其它的方式来获取。事实上最终编译源代码的方式都是一样的。
</p>

<p>
你应当安装内核到sysroot，这样的话，如果你想交叉编译含有内核模块的安装包，整个过程将是透明的。
另外，你在哪里个目录下编译内核并不是很重要。比如一些人会在<path>/usr/src/</path>下编译所有的内核。
</p>

</body>
</section>

<section>
<title>安装交叉编译工具</title>
<body>

<p>
在内核中有两个重要的变量用来选择目标体系结构。通常它们的值由编译环境来决定，当然这里所说的编译环境和我们的目标
嵌入式系统并不一致，所以这些值需要被覆盖掉。这两个变量名叫<c>ARCH</c>和<c>CROSS_COMPILE</c>，
在最顶级的Makefile文件里能够找到它们的默认值，它们的值肯能在命令行里被覆盖掉。
</p>

<p>
变量<c>ARCH</c>是内核所能识别到的目标体系结构。Portage或者某些会使用“x86”，内核通常用“i386”。
从<path>arch/</path>子目录下可以很快的找到你要用的那个变量值。
</p>

<p>
从<c>CROSS_COMPILE</c>的字面上也可以知道它的意思。设置这个变量作为交叉链的前缀（包含了结尾符号"<c>-</c>"）。
如果你的交叉链被调用的时候叫<c>x86_64-pc-linux-gnu-gcc</c>，只需要砍掉结尾符号<c>gcc</c>，最后就是：
<c>x86_64-pc-linux-gnu-</c>。
</p>

<p>
另外还有一个变量<c>INSTALL_MOD_PATH</c>，它定义了创建<path>/lib</path>目录的路径，以及所有模块的存储路径。
如果你要编译模块，就要用到这个目录。
</p>

<p>
有两种方式可以安装系统。你可以修改顶级Makefile，也可在命令行里覆盖相关的变量。这两种方式都很重要，
在这里都会加以介绍。下面下介绍其中的一种。
</p>

<pre caption="编辑顶级Makefile">
<comment># This is what the vanilla Makefile looks like</comment>
ARCH            ?= $(SUBARCH)
CROSS_COMPILE   ?= 

<comment># Set the ARCH and CROSS_COMPILE default values</comment>
ARCH            ?= <i>arm</i>
CROSS_COMPILE   ?= <i>arm-unknown-linux-gnu-</i>
</pre>

<pre caption="命令行里进行覆盖">
# <i>make ARCH=arm CROSS_COMPILE=arm-unknown-linux-gnu- ....</i>
</pre>

<p>
如果你需要在不同的内核目录里跳转，可以编写一个小脚本。我们给这个脚本命名为<c>xkmake</c>。
</p>

<pre caption="xkmake">
#!/bin/sh
exec make ARCH="arm" CROSS_COMPILE="arm-unknown-linux-gnu-" INSTALL_MOD_PATH="${SYSROOT}" "$@"
</pre>

<p>
现在当你想编译一个内核或做其他的事情，你只需要执行<c>xkmake</c>来替代<c>make</c>。
</p>

</body>
</section>

<section>
<title>配置和编译</title>
<body>

<p>
配置和编译内核就像处理其他的内核一样，会有很多的指南对此作详细的介绍，所以这里我们不会作深入的讲解。
</p>

<pre caption="配置和编译">
# <i>cd "${SYSROOT}/usr/src/linux"</i>
# <i>xkmake menuconfig</i>
# <i>xkmake</i>
</pre>

</body>
</section>

</sections>
