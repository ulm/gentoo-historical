<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/ro/base/amd64/technotes/install-32bit.xml,v 1.2 2005/05/16 16:15:56 alin Exp $ -->
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The context of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommonds.org/licenses/by-sa/1.0 -->

<sections>

<version>2004.3</version>
<date>2005-02-19</date>

<section>
<title>Rularea Programelor pe 32 de Biţi</title>
<body>
<impo>
TREBUIE SĂ AVEŢI "IA32 Emulation" ACTIVATĂ ÎN SECŢIUNEA "Executable File
Formats" DIN CONFIGURAŢIA DVS. DE KERNEL!
</impo>
<p>
Multe modificări sunt în desfăşurare pentru moment, şi cel mai uşor mod de a
seta un mediu pe 32 de biţi, este să instalaţi bibliotecile de emulare.
</p>
<pre>
emerge app-emulation/emul-linux-x86-baselibs
emerge app-emulation/emul-linux-x86-xlibs
emerge app-emulation/emul-linux-x86-gtklibs
emerge app-emulation/emul-linux-x86-qtlibs
</pre>
<p>
Bibliotecile de emulare vor crea directorul /emul/linux/x86 şi vor instala
majoritatea bibliotecilor corespondente de care veţi avea nevoie să rulaţi
aplicaţii precompilate pe 32 de biţi. Va crea, de asemenea, link-uri simbolice
ca /lib32 şi /usr/lib32 ce vor indica înpoi către directoarele /emul
corespondente. Va crea, de asemenea, un link simbolic în /lib către
ld-linux.so.2 din /emul/linux/x86/lib/ld-linux.so.2, deoarece varianta pe 64 de
biţi este denumită ca ld-linux-x86-64.so.2.
</p>
<p>
Având toate aceste 3 pachete instalate, ar trebui să vă permită să rulaţi
aproape orice aplicaţii precompilate pe 32 de biţi. (spre ex. Java, Oracle 9i,
Opera)
</p>
</body>
</section>

<section>
<title>Compilarea Aplicaţiilor pe 32 de Biţi Dintr-un Mediu pe 64 de Biţi (utilizând multilib)</title>
<body>
<p>
Mai întâi, trebuie să aveţi mediul standard pe 32 de biţi funcţional din
secţiunea precedentă. Apoi, va trebui să adăugaţi <c>multilib</c> între
indicatorii dvs. USE din <path>/etc/make.conf</path> şi să instalaţi sau să
reinstalaţi <path>gcc-3.3.3-r5</path>. Aceasta va compila GCC cu suport
multilib, ce vă va permite să creaţi binare pe 32 de biţi utilizând setarea
CFLAGS <c>-m32</c>. Având multilib instalat, nu ar trebui să afecteze
compilările pe 64 de biţi (deşi puteţi adăuga opţiunea <c>-m64</c> dacă doriţi
să fiţi sigur dintr-un anumit motiv).
</p>
<note>
Descurajăm puternic ca <e>niciodată</e> utilizatorii noştri să nu adauge
<c>-m32</c> în <path>/etc/make.conf</path> sau să utilizeze <c>-m32</c> cu
portage în orice formă posibilă, şi recomandăm ca procesele de compilare pe 32
de biţi să se efectueze manual şi nu prin intermediul sistemului portage. A nu
acorda atenţie acestui fapt, poate să vă afecteze serios structura de
dependenţe. Nu ne întrebaţi cum să rezolvaţi această problemă, este vina dvs.
</note>
</body>
</section>

<section>
<title>Crearea Unui Mediu chroot pe 32 de Biţi</title>
<body>
<p>
Cu ajutorul bibliotecilor de emulare pe 32 de biţi, este posibil să rulaţi
aproape orice aplicaţii pe 32 de biţi în interiorul unui mediu pe 64 de biţi.
Aceasta poate îngreuna utilizarea aplicaţiilor ca Wine sau aplicaţia plugin
Netscape Flash în Mozilla. O instalare chroot pe 32 de biţi vă permite să
utilizaţi managerul de pachete dorit pentru a instala aplicaţii şi biblioteci
pe 32 de biţi. Aceasta înseamnă, de asemenea, că vă puteţi optimiza pachetele
în orice mod doriţi. Bibliotecile de emulare sunt compilate cu optimizări
minore, deoarece sunt utilizate, de asemenea, pe platforma IA64. O parte
negativă o reprezintă, totuşi, spaţiul pe disc. Toate bibliotecile şi
aplicaţiile vor fi instalate de două ori.
</p>
<p>
Pentru a seta un mediu chroot pe 32 de biţi, mai întâi creaţi directorul (sau
partiţia) unde doriţi să efectuaţi chroot. Apoi, extrageţi fişierul stage
pentru x86 în acel director (nu utilizaţi fişierul stage pentru AMD64) şi
mount-aţi proc. Următorul pas este să intraţi în mediul chroot. Aceasta se
poate face ca în manual, deşi va treui să utilizaţi programul linux32 pentru a
modifica 'uname -m' în 'i686'. Rulaţi următoarea comandă în loc:
</p>
<pre>
linux32 chroot /mnt/gentoo32 /bin/bash
</pre>
<p>
Acum, vă aflaţi în interiorul mediului chroot, iar 'uname -m' ar trebui să
afişeze 'i686'. În make.conf puteţi să utilizaţi indicatori ca următorii:
</p>
<pre>
CHOST="i686-pc-linux-gnu"
CFLAGS="-O2 -march=athlon-xp -msse2 -msse -pipe"
ACCEPT_KEYWORDS="~x86"
</pre>
<p>
Odată ce gcc-3.4 va fi publicat, veţi putea utiliza -march=k8 pentru a vă
optimiza pentru amd64, dar nu este menţionat în changelog dacă este disponibilă
şi pentru compilarea pe 32 de biţi.
</p>
<p>
Continuaţi instalarea în concordanţă cu manualul. Puteţi omite cele mai multe
părţi după stage3. Nu trebuie să setaţi o a doua aplicaţie de jurnalizare
pentru sistem şi crontab. Dar, va trebui să setaţi utilizatorii, hosts şi
resolv.conf. Mediul dvs. chroot pe 32 de biţi este acum gata de utilizare.
Oricum, nu puteţi utiliza aplicaţii X foarte bine, în acest moment.
</p>
<p>
Clienţii X utilizează componente socket unix pentru a comunica cu aplicaţia
server X. Aceste componente socket sunt fişiere din /tmp, dar aplicaţia server
X rulează în afara mediului chroot. Aceasta înseamnă ca aplicaţiile client X
din interiorul mediului chroot nu pot accesa componentele socket unix. Există
două modalităţi de a rezolva problema. Puteţi utiliza o componentă socket TCP,
dar aceasta nu ar fi prea rapidă. Cea mai bună soluţie este să mount-aţi
acelaşi /tmp în interiorul mediului chroot. Puteţi efectua această operaţie cu
(din exteriorul mediului chroot):
</p>
<pre>
mount -o bind /tmp /mnt/gentoo32/tmp
</pre>
<p>
Bineînţeles, va trebui să rulaţi <c>xhost local:localhost</c> din exteriorul
mediului chroot înainte de a vă conecta la aplicaţia server X din interiorul
mediului chroot. Este, de asemenea, posibil să mount-aţi mai multe directoare
în acest mod, pentru a salva spaţiu pe disc. Candidaţii sunt
<path>/home</path>, <path>/usr/portage/distfiles</path> şi
<path>/usr/share</path>.
</p>
<p>
Pentru a intra în mediul chroot, utilizaţi următoarea comandă pentru seta
variabilele de mediu corecte în interiorul mediului chroot:
</p>
<pre>
linux32 chroot /mnt/32-bit /bin/bash --login
</pre>
</body>
</section>
 
</sections>
