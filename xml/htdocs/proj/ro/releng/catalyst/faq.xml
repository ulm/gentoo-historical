<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/ro/releng/catalyst/faq.xml" lang="ro">

<title>Întrebări Frecvente despre Catalyst</title>
<author title="Autor">John Davis</author>
<author title="Autor">Daniel Robbins</author>
<author title="Contribuitor">William Kilian</author>
<author title="Editor">Chris Gianelloni</author>
<author title="Translator">
  <mail link="robert.datcu@gentoo.ro">Robert Datcu</mail>
</author>

<abstract>
Întrebări frecvente despre Catalyst.
</abstract>

<version>1.0</version>
<date>3 October 2004</date>

<chapter>
<title>Întrebări frecvente</title>

<section>
<title>Întrebări Frecvente despre Catalyst</title>
<body>

<p>
<b>Î: Cum construiesc arhive stage2 şi stage3 pentru un tip de procesor care nu
este "generic", cum ar fi <c>pentium4</c> sau <c>g4</c>?</b>
</p>

<p>
R: În primul rând, asiguraţi-vă că sistemul dvs. hardware dvs. este capabil în
a construi un astfel de fişier stage. Dacă doriţi să creaţi un fişier stage
<c>pentium4</c>, va trebui să îl construiţi pe un sistem Pentium 4 sau
AMD64/Opteron. Nu puteţi construi un fişier stage <c>pentium4</c> pe un sistem
Athlon XP, întrucât procesorul Athlon XP nu suportă instrucţiunile SSE2, iar
aceste instrucţiuni SSE2 vor fi activate pentru fişierele stages
<c>pentium4</c>. Asemănător, dacă doriţi să construiţi un fişier stage
<c>g4</c>, va trebui să faceţi aceasta pe un sistem PowerPC G4 sau G5.
</p>

<p>
Odată ce v-aţi asigurat că veţi construi pe baza hardware corectă, doar urmaţi
paşii de mai jos, dar pentru construirea unui fişier stage2, schimbaţi
variabila <c>subarch</c> cu o arhitectură non-generică validă (ex.
<c>pentium4</c>.) Apoi fişierul stage2 al dvs. va fi construit pentru
subarhitectura pe care o veţi specifica. Apoi, folosiţi acest fişier stage2 ca
stage "sursă" pentru construirea fişierului dvs. stage3. Desigur, veţi dori de
asemenea să modificaţi variabila <c>subarch</c> în specificaţiile fişierului
dvs. stage3 pentru a se potrivi cu specificaţiile fişierului dvs. stage2.
</p>

<p>
<b>Î: Vreau să construiesc mai multe fişiere stage pentru subarhitecturi
diferite. Cum ar trebui	să fac asta?</b>
</p>

<p>
R: În primul rând, construiţi un fişier stage1 generic. Apoi folosiţi acest
fişier pentru a construi fişiere specifice stage2 şi stage3. Folosiţi din nou
acest fişier stage1 pentru a construi alte fişiere specifice stage2 şi stage3.
Nu trebuie să reconstruiţi fişierul stage1 -- toate fişierele dvs. specifice
stage2 şi stage3 pot folosi acelaşi fişier "sursă" stage1.
</p>

<p>
<b>Î: Pot construi un fişier stage1 pentru un tip de CPU negeneric?</b>
</p>

<p>
R: Aceasta nu este o idee foarte bună, întrucât utilizatorii se aşteaptă ca
fişierul stage1 să funcţioneze pe orice tip de sub-arhitectură. În acest fel,
ei pot folosi fişierul stage1 pe orice sistem fără griji. Trebuie să vă
asiguraţi să nu "poluaţi" fişierul dvs. stage1 cu cod specific unui procesor
negeneric. 
</p>

<p>
<b>Î: Credeam că catalyst are posibilitatea de a construi fişiere stage
"pornind de la zero". Dacă catalyst construieşte fişiere stage "de la zero", de
ce mai este nevoie de un stage "sursă"?</b>
</p>

<p>
R: Bună întrebare. Aşa cum ştiţi, fişierele stage2 şi stage3 depind pentru
construire de fişierele stage anterioare, care sunt necesare şi identificabile
prin numele lor (de ex. "stage2" înseamnă că a existat un "stage1".) Totuşi,
catalyst are nevoie de un fişier stage de bază pentru construirea unui fişier
stage1, deci pentru a-l construi merită studiat pentru a vedea de ce este
necesar. Când construieşte un fişier stage1, catalyst foloseşte fişierul stage
bază (stage2 sau stage3) pentru a configura mediul chroot. În mediul chroot,
noul fişier stage1 este construit prin stabilirea variabilei de mediu
<c>ROOT</c> în <path>/tmp/stage1root</path>. <path>/tmp/stage1root</path> este
apoi pregătit şi devine fişierul stage1 ţintă. Ce înseamnă acestea este că
atunci când catalyst construieşte un fişier stage1, fişierul însuşi nu
moşteneşte vreun binar sau librărie din fişierulul stage de bază folosit.
Fişierul bază folosit <e>influenţează</e> cumva fişierul ţintă stage1 --
header-ele Linux din fişierul de bază sunt folosite pentru a construi pachetul
glibc al stage1, iar compilatoarele din fişierul sursă sunt folosite pentru a
compila toate programele din fişierul ţintă stage1. Fişierul stage de bază este
folosit pentru a izola procesul de construire al stage1 de sistemul dvs., şi de
asemenea permite tuturor fişierelor stage1 x86 să poată fi construite pe
sisteme amd64, de exemplu.
</p>

<p>
<b>Î: Există un ghid oficial pentru Catalyst?</b>
</p>

<p>
În acest moment, nu există un ghid oficial. Dacă sunteţi interesat în a scrie
unul, raportaţi un bug cu ghidul ataşat la acesta. Lipsa unui ghid
oficial nu înseamnă că Catalyst este complet nedocumentat. Dacă Catalyst este
instalat cu indicatorul USE <c>doc</c> activat, exemple bine comentate de
fişiere specificaţii sunt instalate în to
<path>/usr/share/doc/catalyst-$versiune/examples</path>.
</p>

<p>
Dacă încă aveţi întrebări după ce aţi citit aceste exemple, subscrieţi la lista
de mail-uri gentoo-catalyst.
</p>

<p>
<b>Î: Unde put indicatorii USE specifici fiecărui pachet, setările privind
pachetele mascate etc.?</b>
</p>

<p>
Catalyst suportă fişierele de configurare din /etc/portage. Doar adăugaţi linia
următoare în fişierul dvs. spec, şi asiguraţi-vă că folosiţi aceeaşi locaţie
<c>portage_confdir</c> pentru fişierele stage sursă, după cum urmează:  
</p>

<p>
portage_confdir: /cale/către/propriul/etc/portage
</p>

<p>
<b>Î: Chiar ar trebui să construiesc propriul stage1 sau să folosesc unul de pe
un mirror Gentoo?</b>
</p>

<p>
Fişierele stage de pe ultimul release Gentoo ar fi suficiente, doar dacă nu
plănuiţi o instalare hardened sau doriţi să schimbaţi setările profilului (de
ex. USE flags, CFLAGS, etc).
</p>

<p>
<b>Î: Cum îmi ţin actualizate pachetele mele GRP/stage/LiveCD?</b>
</p>

<p>
Catalyst foloseşte Portage pentru toate compilările, deci tot ce trebuie să
faceţi este să vă regeneraţi Portage ca snapshot şi să reconstruiţi propriile
GRP/stages/LiveCD. Portage va urma în mod normal toate regulile proprii pentru
a decide ce pachete trebuie actualizate.
</p>

<p>
<b>Î: Foloseşte Catalyst vreo sintaxă specială pentru indicatorii USE?</b>
</p>

<p>
Nu, sintaxa indicatorilor USE folosită de Catalyst este exact la fel cu cea a
Portage.
</p>

</body>
</section>

</chapter>

</guide>
