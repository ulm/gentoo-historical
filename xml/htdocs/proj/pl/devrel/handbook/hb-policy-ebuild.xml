<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<sections>
<section>
<title>Ogólne wytyczne</title>
<subsection>
<body>

<p>
Oto kilka ogólnych wytycznych związanych z utrzymywaniem ebuildów:
</p>

<ul>
  <li>
    Nowe wersje zawsze należy wprowadzać przy pomocy programu repoman -
    korzystamy z <c>repoman commit</c> zamiast <c>cvs commit</c>.
  </li>
  <li>
    Jeśli pakiet zawiera błędy lub posiada niezbyt dobrze przemyślany proces
    budowania/instalacji, warto sprawdzić jak poradzili sobie z nim deweloperzy
    innych dystrybucji:
  <ul>
    <li><uri link="http://www.debian.org/distrib/packages">Debian</uri></li>
     <li><uri link="http://cvs.mandriva.com/cgi-bin/cvsweb.cgi/SPECS/">Mandriva</uri></li>
     <li><uri link="http://cvs.fedora.redhat.com/">Fedora</uri></li>
  </ul>
  </li>
  <li>
    Nowy pakiet, gdy będzie ukończony i odmaskowany, powinien "po prostu
    działać". Konieczność modyfikowania zainstalowanego programu, aby móc z
    niego korzystać nie jest dobrym rozwiązaniem. Aplikacja powinna posiadać
    rozsądne domyśle ustawienia.
  </li>
  <li>
    Nie należy unikać czytania internetowej dokumentacji i ebuildów
    utrzymywanych przez bardziej doświadczonych deweloperów podczas pracy nad
    swoimi pakietami. Warto kontaktować się z innymi deweloperami w razie
    wystąpienia problemów technicznych i pytać ich o zasady pisania ebuildów.
  </li>
  <li>
    Należy zwracać szczególną uwagę na to, co wprowadzamy do repozytorium.
    Błędny commit może potencjalnie odbić się negatywnie na tysiącach
    użytkowników. Jeśli dodanie jakiegoś pliku spowoduje uszkodzenie drzewa
    Portage, konieczne jest naprawienie błędu tak szybko, jak to tylko
    możliwe.
  </li>
  <li>
    Do każdego ebuilda musi zostać dołączony plik <uri
    link="?part=2&amp;chap=4">metadata.xml</uri>, który zawiera - poza innymi
    danymi - informację jaki zespół (i/lub indywidualni opiekunowie) zarządza
    pakietem.
  </li>
</ul>

</body>
</subsection>
</section>
<section>
<title>Szczegółowe wytyczne</title>
<subsection>
<title>fPIC</title>
<body>

<p>
Na niektórych architekturach współdzielone biblioteki muszą być budowane z
opcją -fPIC. Na architekturze x86 (i kilku innych) biblioteki takie mogą zostać
zbudowane bez opcji -fPIC, ale będą bezużyteczne i potencjalnie mogą spowodować
obniżenie wydajności. Jeśli napotkamy pakiet, który buduje współdzielone
biblioteki bez opcji -fPIC, powinniśmy zmodyfikować plik Make tak, aby budował
biblioteki (i tylko biblioteki) z tą opcją. Więcej informacji o PIC można
znaleźć na stronie
<uri>http://www.gentoo.org/proj/en/hardened/pic-internals.xml</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Perl</title>
<body>

<p>
Nowe moduły Perla powinny być dodawane do drzewa Portage tylko jeśli spełniony
zostanie jeden z poniższych warunków:
</p>

<ul>
  <li>Moduł(y) wypełnia zależności</li>
  <li>Moduł(y) nie może być obsłużony przez <c>g-cpan</c></li>
  <li>Moduł(y) zwiększa funkcjonalność istniejących ebuildów</li>
  <li>
    Moduł(y) dostarcza narzędzia, aplikacje lub inne możliwości (np. większe
    niż zapewnia .PM)
  </li>
</ul>

<p>
Przed dodaniem pakietu trzeba uzyskać zgodę przynajmniej jednego członka
zespołu Perla.
</p>

</body>
</subsection>
</section>
<section>
<title>Polityka ebuildów</title>
<subsection>
<title>Polityka nazw</title>
<body>

<p>
Nazwa pliku z ebuildem składa się z czterech elementów:
</p>

<p>
<c>pkg-ver{_suf{#}}{-r#}.ebuild</c>
</p>

<note>
Nawiasy (<c>{}</c>) wskazują opcjonalne pola i nie pojawiają się w rzeczywistej
nazwie pliku. Znak <c>#</c> symbolizuje dowolną niezerową liczbę naturalną.
</note>

<p>
Pierwszy element - <c>pkg</c> - jest nazwą pakietu, która powinna zawierać
wyłącznie małe litery, znaki 0-9 i dowolną liczbę myślników (<c>-</c>),
podkreśleń (<c>_</c>) i plusów (<c>+</c>). Przykładowe wartości tej części
nazwy: <c>util-linux</c>, <c>sysklogd</c>, <c>gtk+</c>. W drzewie Portage
znajdują się ebuildy, które nie przestrzegają powyższych zasad, jednak nasze
pakiety powinny ich przestrzegać.
</p>

<p>
Druga część - <c>ver</c> - to wersja pakietu. Powinna ona pokrywać się z wersją
w głównym taballu ze źródłami. Oznaczenie wersji zazwyczaj składa się z dwóch
lub trzech (lub większej ilości) liczb, rozdzielonych kropkami, np.: <c>1.2</c>,
<c>4.5.2</c>. Po ostatniej liczbie może występować pojedyncza
litera: <c>1.4b</c>, <c>2.6h</c>. Numer wersji pakietu jest dołączany do nazwy
przy pomocy myślnika: <c>foo-1.0</c>, <c>bar-2.4.6</c>.
</p>

<p>
Trzeci element - <c>{_suf{#}}</c> - jest ocjonalny i może zawierać jeden z
poniższych przyrostków (są one uporządkowane w kolejności od tych, które
oznaczają mniej aktualne pakiety, do tych, które symbolizują najnowsze):
</p>

<table>
 <tr><th>Przyrostek</th><th>znaczenie</th></tr>
 <tr><ti><c>_alpha</c></ti><ti>Wersja alpha</ti></tr>
 <tr><ti><c>_beta</c></ti><ti>Wersja beta</ti></tr>
 <tr><ti><c>_pre</c></ti><ti>Wersja zapoznawcza</ti></tr>
 <tr><ti><c>_rc</c></ti><ti>Wersja warunkowa</ti></tr>
 <tr><ti>(brak)</ti><ti>Normalna wersja</ti></tr>
 <tr><ti><c>_p</c></ti><ti>Łatka (zazwyczaj uzupełniona liczbą naturalną)</ti></tr>
</table>

<p>
Do każdego z tych przyrostków może zostać dodana niezerowa liczba naturalna,
np.  <c>linux-2.4.0_pre10</c>. W przypadku takiej samej części zawierającej
wersję programu, przyrostki posiadają następujący priorytet: <c>_alpha</c> &lt;
<c>_beta</c> &lt; <c>_pre</c> &lt; <c>_rc</c> &lt; (brak przyrostka) &lt;
<c>_p</c>.
</p>
       
<p>
Jeśli mamy do czynienia z tym samym przyrostkiem, decydujące znaczenie ma
dołączona do niego liczba - wyższa liczba oznacza nowszą wersję. Przykładowo:
<c>foo-1.0_alpha4</c> jest nowszy niż <c>foo-1.0_alpha3</c>.
</p>

<p>
Ostatnia część nazwy pakietu to specyficzny dla Linuksa Gentoo numer poprawki
programu - (<c>{-r#}</c>). Element ten, tak jak przyrostek, jest opcjonalny.
Znak <c>#</c> symbolizuje niezerową liczbę naturalną, np.
<c>package-4.5.3-r3</c>.
</p>

<p>
Numer poprawki jest niezależny od numeru wersji tarballa źródłowego i używany
jest do informowania użytkowników o nowych poprawkach specyficznych dla Linuksa
Gentoo. Początkowe wersje ebuildów nie posiadają numeru poprawki (np.
<c>package-4.5.3</c>) i są postrzegane przez Portage jako posiadające numer
poprawki równy zeru. Oznacza to, że kolejne poprawki numerowane są następująco:
<c>1.0</c> (wersja początkowa), <c>1.0-r1</c>, <c>1.0-r2</c>, itd. 
</p>

</body>
</subsection>
<subsection>
<title>Nowe wersje i poprawki</title>
<body>

<p>
Numer poprawki pakietu powinien zostać zwiększony przez deweloperów Gentoo w
momencie, gdy zmiany są na tyle duże, że użytkownicy będą zainteresowani
aktualizacją. Zazwyczaj dzieje się tak, kiedy poprawki wprowadzone do ebuilda
wpływają na pliki tworzone w czasie instalacji, ale wciąż wykorzystywane są te
same źródła programu. Jeśli wprowadzone zostaną jedynie stylistyczne zmiany,
nie ma potrzeby podnoszenia numeru poprawki. Również jeśli poprawiony zostanie
problem związany z kompilacją, którego doświadczyli niektórzy użytkownicy, nie
należy zwiększać numeru poprawki. Robimy tak, ponieważ osoby, u których
kompilacja przebiegła pomyślnie nie odczują żadnych korzyści z instalacji
poprawki, a ci, którzy nie posiadają zainstalowanego pakietu (przez błąd w
czasie kompilacji), nie potrzebują zmiany numeru poprawki, aby skorzystać z
nowego pakietu. Podniesienie numeru poprawki nie jest także konieczne, jeśli
dotyczy ona mniejszości użytkowników, a czas kompilacji programu jest znaczący.
W takim przypadku należy dokładnie przeanalizować sytuację przed podjęciem
decyzji o podniesieniu numeru poprawki.
</p>

<impo>
Zawsze gdy tworzona jest nowa poprawka, należy zaktualizować plik
<path>ChangeLog</path> w katalogu ebuildu. Nie uczynienie tego, jest postrzegane
jako działanie w bardzo złym guście i może spowodować wyciągnięcie konsekwencji.
</impo>

<p>
Ebuildy powinny być oparte na swoich poprzednich wersjach, co zapewnia, że
poprawki nie są przypadkowe. Poprawki powinny być opatrzone odpowiednimi
komentarzami w ebuildzie, które wyjaśniają dlaczego wprowadzono zmiany i co mają
one na celu. Jeśli nie zapoznamy się z poprawkami lub nie wiemy, czy są one
jeszcze potrzebne, nie powinniśmy aktualizować ebuilda.
</p>

</body> 
</subsection>
<subsection>
<title>Pakiety wirtualne</title>
<body>

<p>
Portage obsługuje koncepcję wirtualnych pakietów. Przy ich użyciu można stworzyć
odwołania do innych pakietów oraz do grup pakietów.
</p>

<p>
Zacznijmy od przykładu użycia wirtualnego pakietu. Załóżmy, że stworzyliśmy nowy
pakiet dla programu cron o nazwie <c>foocron</c>. Linuks Gentoo jest aktualnie
tak skonfigurowany, że programy, których zależnością jest cron, posiadają
zależność postaci <c>virtual/cron</c>. Pozwala to na zapewnienie, iż istnieje w
systemie jakiś rodzaj programu cron, a zarazem daje użytkownikom elastyczność
przy wyborze konkretnego narzędzia. Aby dodać naszego ebuilda
<path>foocron-1.0.ebuild</path> do grupy pakietów spełniających zależność
wirtualną, musimy umieścić w nim linię:
</p>

<pre caption="Dołączanie pakietu do grupy programów spełniających zależność wirtualną">
PROVIDE="virtual/cron"
</pre>

<p>
Gdy zainstalujemy <c>foocron-1.0</c> pakiet <c>virtual/cron</c> zostanie
zarejestrowany w systemie. Jeśli wcześniej nie mieliśmy zainstalowanego żadnego
pakietu programu cron, wszystkie aplikacje <e>zależne</e> od
<c>virtual/cron</c> będą miały tą zależność spełnioną. Pamiętajmy przy tym, że
możliwe jest przypisanie zmiennej <c>PROVIDE</c> wartości w postaci pakietu z
dowolnej kategorii - nie musi to być <c>virtual/</c>. Jednak <e>zaleca się</e>,
aby używać kategorii <c>virtual/</c>, chyba że wykorzystujemy zmienną
<c>PROVIDE</c> dla obsługi pakietów, które zmieniły nazwę.
</p>

<p>
Istnieje jeszcze jeden komponent implementacji pakietów wirtualnych w Gentoo. Co
stanie się jeśli nie posiadamy zainstalowanego żadnego programu, który spełnia
wirtualną zależność <c>virtual/cron</c>, a jakaś aplikacja ją posiada? W jaki
sposób Portage wybierze "prawidłowy" pakiet programu cron, aby spełnić zależność
<c>virtual/cron</c>? Portage jest przygotowany na taką sytuację dzięki
specyficznej dla profilu mapie zależności wirtualnych, która umieszczona jest w
pliku <path>virtuals</path>, znajdującym się w
katalogu<path>/etc/make.profile</path>. Jeśli otworzymy ten plik, zobaczymy że
jego zawartość wygląda mniej więcej tak:
</p>

<pre caption="Przykładowy plik virtuals">
virtual/lpr             net-print/cups
virtual/python          dev-lang/python
virtual/mta             net-mail/ssmtp
</pre>

<p>
Pierwsza linia oznacza, że jeśli jakiś program zależy od <c>virtual/lpr</c> i
zależność ta nie jest spełniona, to powinien zostać zainstalowany pakiet
<c>net-print/cups</c>. Z kolei ebuild pakietu <c>net-print/cups</c> zawiera
liniię <c>PROVIDE="virtual/lpr"</c>, więc zależność <c>virtual/lpr</c> zostanie
spełniona poprzez jego instalację.
</p>

<p>
Korzystając z wirtualnych zależności zwracajmy uwagę na dwie sprawy. Po
pierwsze, jeśli dodaliśmy pakiet <c>foocron</c>, musimy upewnić się, że
wszystkie programy, posiadające zależność <c>virtual/cron</c> są w stanie
poprawnie z nim pracować. Po drugie, dodając pakiet <c>foobarosity</c>, który
jest zależny od <c>virtual/cron</c>, musimy zadbać o to, aby wszystkie programy
spełniające wirtualną zależność <c>virtual/cron</c> pozwalały na prawidłowe
funkcjonowanie aplikacji <c>foobarosity</c>.
</p>

<p>
Przed stworzeniem wirtualnego pakietu należy przedyskutować to na liście
mailingowej dla deweloperów. Informowanie deweloperów o nowych pakietach
wirtualnych jest fundamentem ich prawidłowego wykorzystywania.
</p>

</body>
</subsection>
<subsection>
<title>Zasięgi</title>
<body>

<p>
Gdy ebuild zostaje dołączony do skryptu odpowiedzialnego za instalację aplikacji
przy pomocy polecenia source, znajdujące się w nim funkcje i zmienne zostają
załadowane do pamięci przez interpreter skryptu. Jednakże tylko zmienne i
instrukcje niebędące częścią funkcji są interpretowane - funkcje (np.
<c>src_compile()</c>) zostają zinterpretowane dopiero w momencie ich wywołania.
</p>

<p>
Kod tych funkcji znajduje się zasięgu lokalnym, podczas gdy wszystko poza nimi
jest częścią zasięgu globalnego. Instrukcje zasięgu globalnego są wykonywane
przy każdym wykonaniu ebuilda.
</p>

<p>
Zewnętrzne aplikacje (jak grep, sed, awk) nigdy nie powinny być wywoływane w
zasięgu globalnym ze względu na wydajność. Zamiast nich należy stosować ich
zastępniki wbudowane w basha. Przydatne alternatywne narzędzia można znaleźć na
stronie <uri link="http://www.tldp.org/LDP/abs/html/">Przewodnik zaawansowanego
programowania w bashu</uri>.
</p>

<p>
Dodatkowo, w przypadku wywoływania zewnętrznych aplikacji w zasięgu globalnym, nie
ma możliwości zagwarantowania, że programy te są obecne w systemie. Jeśli
komenda wywołująca aplikację znajduje się w zasięgu lokalnym (np. w funkcji
<c>pkg_setup()</c>), możemy upewnić się, że odpowiedni program występuje w
systemie poprzez zmienną <c>${DEPEND}</c>.
</p>

</body>
</subsection>
<subsection>
<title>Polityka ebuildów opartych na źródłach z repozytoriów CVS</title>
<body>

<p>
Istnieją dwa sposoby na stworzenie ebuilda opartego na źródłach z repozytorium
CVS. Pierwszy (tradycyjny) sposób to stworzenie ebuilda opartego o snapshot
źródeł. Polega to na stworzeniu tarballa ze źródłami, umieszczeniu go w
repozytorium źródeł do pobrania i napisaniu ebuilda, który będzie odwoływał się
bezpośrednio do tego tarballa. Tego typu ebuildy będą nazywane "ebuildami
opartymi o snapshot".
</p> 

<p>
Inna metoda stworzenia ebuilda opartego na źródłach z repozytorium CVS to użycie
<path>cvs.eclass</path>, w celu napisania "aktywnego" ebuilda. Tego typu ebuild
będzie automatycznie pobierał najnowsze źródła z repozytorium w momencie jego
użycia, dbając, aby źródła były tak aktualne jak to tylko możliwe. Tego typu
ebuildy będą określane mianem "aktywnych ebuildów" (ang. "live ebuilds").
</p>

<p>
Kolejne akapity opisują politykę ebuildów opartych na źródła z repozytorium
CVS. Przedstawiają również zasady dodawania tego typu ebuildów do drzewa
Portage.
</p>

<p>
Preferowane jest użycie ebuildów opartych o snapshot, zamiast "aktywnych"
ebuildów korzystających z <path>cvs.eclass</path>.
</p> 

<p>
Ebuildy oparte o snapshot są dozwolone jeśli snapshot zawiera poprawki potrzebne
do prawidłowego działania pakietu, a także jeśli wersja aplikacji z repozytorium
została uznana za "działającą lepiej" niż normalna wersja.
</p>

<p>
Ebuildy "aktywne" generalnie są tworzone tylko dla wygody deweloperów i zawsze
powinny być zamaskowane przy pomocy oznaczenia <c>~[arch]</c> w zmiennej
KEYWORDS. Nie jest możliwe zapewnienie niezawodności "aktywnego" ebuildu, gdyż
wersja źródeł w repozytorium może zmienić się w każdym momencie - dlatego
wymagane jest maskowanie.
</p> 

<p>
Niezależnie czy mamy do czynienia z "aktywnym" ebuildem, czy też ebuildem
opartym o snapshot, <b>my - deweloperzy - jesteśmy odpowiedzialni za jego
prawidłowe działanie</b>. Z oczywistych powodów w przypadku "aktywnych" ebuildów
zapewnienie tej poprawności jest niezmiernie trudne.
</p>

<p>
Jeśli ebuildy (niezależnie jakiego typu) nie działają poprawnie, powinny zostać
naprawione lub usunięte z drzewa Portage. Jeśli są to "aktywne" ebuildy, mogą
być na stałe zamaskowane oznaczeniem <c>~[arch]</c> w zmiennej KEYWORDS
(przypadek taki jest opisany poniżej). 
</p>

<p>
Jeśli użytkownik lub grupa użytkowników zgłosi potrzebę dodania "aktywnego"
ebuilda, można taki ebuild stworzyć. Powinien on być oznaczony jako
<c>~[arch]</c>, aby inni użytkownicy nie zemergowali go przypadkowo. 
</p>

<p>
Dzięki temu użytkownik potrzebujący takiego ebuilda (zazwyczaj deweloper),
będzie mógł z niego korzystać, a inni nie będą narażeni na jego przypadkowe
zemergowanie. Należy jeszcze raz podkreślić, że jest to sytuacja, w której ktoś
jednoznacznie poprosił o dodanie "aktywnego" ebuilda. Ebuildy oparte o snapshot
należy dodawać do drzewa Portage tylko z założeniem, że będą stabilne i
dostarczą większej funkcjonalności niż zwykła wersja programu.
</p>

<impo>
Ebuildy oparte o snapashot wersji zapoznawczej programu powinny posiadać
następującą nazwę: <path>foo-x.y_preYYYYMMDD.ebuild</path>. <c>foo</c> jest
nazwą pakietu, <c>x.y</c> to oznaczenie wersji <e>nadchodzącego</e> wydania,
<c>_pre</c> jest stałym elementem nazwy, <c>YYYYMMDD</c> to znacznik czasu
odpowiadający dniu, w którym wykonano snapshot. Używanie tej konwencji jest
konieczne, aby wersja <c>x.y.1</c> nie została niesłusznie uznana za starszą
niż <c>x.y</c>. Dodatkowo zapewnia to, że finalna wersja <c>x.y</c> będzie
postrzegana jako <e>nowsza</e> niż wersje oparte o snapshot. W przypadku
ebuildów opartych o snapshot <e>finalnych</e> wersji, należy stosować nazwę w
formacie: <path>foo-x.y_pYYYYMMDD.ebuild</path> (<c>_p</c> służy do oznaczenia
numeru poprawki). To z kolei sprawi, że ebuild oparty o snapshot będzie uznany
za <e>nowszy</e> niż standardowa wersja <c>x.y</c>.
</impo>

<impo>
Obecnie polityka nazywania "aktywnych" ebuildów obejmuje kończenie nazwy
przyrostkiem <c>-cvs</c>. W przyszłości zostanie dodany do Portage przyrostek
<c>_cvs</c> i polityka nadawania nazw zostanie zaktualizowana.
</impo>

</body>
</subsection>
<subsection>
<title>Ebuildy nadesłane przez użytkowników</title>
<body>

<p>
Ebuildy nadesłane przez użytkowników nigdy nie powinny być ślepo umieszczane w
repozytorium CVS. Należy je dokładnie przetestować przez udostępnieniem innym
użytkownikom. <b>Jeśli ebuild nadesłany przez użytkownika zawiera błędy,
odpowiedzialność za nie ponosi deweloper, który umieścił ebuild w CVS.</b>
Dodając ebuild do repozytorium, ręczymy że jest on zgodny ze wszystkimi
standardami Gentoo.
</p>

<p>
Należy upewnić się, że ebuild nadesłany przez użytkownika nie zawiera
niestandardowego nagłówka jak poniżej:
</p>

<pre caption="Niestandardowy nagłówek, który powinien znajdować się w pliku ChangeLog">
# Ebuild updated by: me &lt;me@me.com&gt;
</pre>

<p>
Powyższa informacja powinna znaleźć się w pliku <path>ChangeLog</path>, ujęta w
ramy składni komentarzy pliku ChangeLog. <b>Zawsze upewnijmy się, że plik
ChangeLog zawiera odpowiednie informacje o osobie, która przysłała ebuild.
Informacja ta powinna pojawić się w pierwszym wpisie do pliku ChangeLog.</b>
</p>

<p>
Konieczne jest upewnienie się, że ebuild, który zamierzamy dodać, zawiera
linię:
</p>

<pre caption="Nagłówek ebuilda">
# &#36;Header: &#36;
</pre>

<p>
Spora część ebuildów przysyłanych przez użytkowników oparta jest na pakietach
pobranych poprzez rsync, które mogą zawierać nieprawidłowe nagłówki.
</p>

<p>
Należy zachęcić użytkowników do przysyłania różnic pomiędzy aktualną i starszą
wersją ebuilda, zamiast całych ebuildów. Dzięki temu można uniknąć powtarzania w
nowych pakietach wcześniej już poprawionych błęów. Jeśli nie otrzymaliśmy zmian
pomiędzy wersjami, a jedynie nowy ebuild, sami powinniśmy skorzystać z
polecenia <c>diff</c>, aby sprawdzić co zostało zmienione, zwracając szczególną
uwagę na elementy, które znajdują się w starszej wersji i powinny pojawić się w
nowej oraz takie, które powinny zostać poprawione lub usunięte.
</p>

<p>
Zasadniczo, użytkownicy powinni wykonać całą pracę wymaganą do dodania ebuilda
do drzewa Portage (poza samym dodaniem), chyba że sami <e>chcemy</e>
przygotować ebuild w imieniu użytkownika. Nawet jeśli faktycznie chcemy,
zazwyczaj lepiej jest, aby użytkownicy wykonywali te prace, dzięki czemu będą
uczyć się na własnych błędach, a to pozwoli im tworzyć lepsze ebuildy w
przyszłości. Pamiętajmy, aby okazać wdzięczność za każdy nadesłanego ebuild,
nawet jeśli nie jest on zbyt dobrej jakości. Bądźmy uprzejmi i szczerzy - jeśli
ebuild nie jest przydatny, nie możemy obrażać użytkownika, dając mu do
zrozumienia, że jego umiejętności są marne. Być może osoba, która przysłała
nieprzydatnego ebuilda w przyszłości stanie się produktywnym członkiem naszego
projektu - może się tak stać, jeśli będziemy wspierać użytkowników i zachęcać
ich do pogłębiania wiedzy i rozwijania umiejętności.
</p>

</body>
</subsection>
</section> 
<section>
<title>Zasady utrzymania wysokiej jakości kodu</title>
<subsection>
<title>Zasady wydawania Portage i baselayout</title>
<body>

<p>
Tylko deweloperzy z herdu Portage (pewni swojej roli w tym zespole) mają prawo
do publikowania jego nowych wersji. <b>Nikt</b> inny nie może publikować nowych
wydań Portage.
</p>

<p>
Tylko deweloperzy z zespołu "baselayout" (i pewni swojej roli w tym zespole)
mają prawo do publikowania jego nowych wersji. <b>Nikt</b> inny nie może
publikować nowych wydań baselayout.
</p>

</body>
</subsection>
<subsection>
<title>Zamaskowane pakiety</title>
<body>

<p>
Plik <path>/usr/portage/profiles/package.mask</path> zawiera listę pakietów,
które nie powinny być emergowane przez użytkowników i komentarze opisujące
dlaczego poszczególne programy znalazły się na liście.
<path>package.mask</path> jest używany, aby zapobiec instalacji programów,
które nie działają, mogą uszkodzić inne programy, czy też potrzebują
przetestowania przed dodaniem do testowej gałęzi drzewa Portage. Jeśli dodajemy
jakiś pakiet do <path>package.mask</path>, najpierw powinniśmy wykonać commit
pliku <path>package.mask</path>, a dopiero potem dodać zamaskowany pakiet.
Uchroni to użytkowników przez instalacją programu zanim
<path>package.mask</path> zostanie zaktualizowany.
</p>

<p>
Szczególnej uwagi wymaga sytuacja, w której usuwamy pakiet z
<path>package.mask</path>. Pamiętajmy, że jeśli ebuild znalazł się w
<path>package.mask</path>, to istniały ku temu istotne powody. Jeśli ebuild nie
został zamaskowany przez nas, skontaktujmy się z deweloperem, który tego
dokonał (informacje o nim powinny znajdować się w komentarzu przy pakiecie),
przed podjęciem jakichkolwiek działań. Dodatkowo, jeśli pakiet stanowi część
rdzenia systemu lub jest jego zależnością, jego odmaskowanie powinno zostać
przedyskutowane na liście mailingowej deweloperów.
</p>

</body>
</subsection>
<subsection>
<title>~ARCH w zmiennej KEYWORDS</title>
<body>

<p>
Celem użycia ~arch w zmiennej KEYWORDS jest oznaczenie pakietu jako wersji
testowej. 
</p>

<p>
Istnieje znacząca różnica pomiędzy użyciem <path>package.mask</path> i ~arch
dla ebuildów. Umieszczenie ~arch w zmiennej KEYWORDS oznacza, że <e>ebuild</e>
(a nie program przez niego instalowany) wymaga przetestowania. Zastosowanie
<path>package.mask</path> wskazuje, że sama aplikacja lub biblioteka nie
została jeszcze określona jako stabilna. Przykładowo, jeśli <c>gimp-1.2.0</c>
jest stabilną wersją wypuszczoną przez deweloperów programu Gimp i zostaje
opublikowana wersja 1.2.1, poprawiająca jakiś błąd, pakiet powinien być
oznaczony przy pomocy ~arch, gdyż sama aplikacja uznawana jest za stabilną.
Jeśli natomiast deweloperzy programu Gimp zdecydują się na opublikowanie
niestabilnej/rozwijającej się serii oznaczonej 1.3.0, ebuild powinien zostać
umieszczony w <path>package.mask</path>, ponieważ sama aplikacja nie jest
stabilna i instalacja jej nie jest zalecane przez zespół ją utrzymujący.
</p>

<p>
Każdy nowy pakiet w drzewie Portage musi być oznaczony przez ~arch dla
wszystkich architektur, na których działa. Deweloper dodający ebuild musi
zweryfikować poprawność działania aplikacji i wartości w zmiennej KEYWORDS.
</p>

</body>
</subsection>
<subsection>
<title>Zmiana oznaczenia pakietu z ~ARCH na ARCH</title>
<body>

<p>
Kiedy wersja pakietu będzie zachowywać się stabilnie przez odpowiedni okres
czasu i utrzymujący go deweloper Gentoo uzna że aktualizacja do tej wersji nie
wpłynie negatywnie na działanie komputerów użytkowników, jej oznaczenie może
zostać zmienione z ~ARCH na ARCH. Wskaźnikiem stabilności pakietu jest brak
nowych lub nierozwiązanych problemów w raporcie błędu, przez miesiąc od dodania
nowej wersji.
</p>

<p>
Od osoby utrzymującej pakiet zależy, czy powinien on zostać uznany za stabilny
oraz czy niestabilne wersje powinny znaleźć się w <path>package.mask</path>,
czy pozostać z oznaczeniem ~arch.
</p>

<p>
Konieczne jest upewnienie się, że wszystkie zależności pakietu określonego jako
stabilny również posiadają oznaczenie ARCH (i są stabilne).
</p>

<warn>
Etap oznaczenia nowej wersji pakietu wartością ~ARCH może zostać pominięty
wtedy <e>i tylko wtedy</e>, gdy wersja ta zawiera poprawki luk bezpieczeństwa
lub jest konieczna do naprawienia poważnych błędów w systemie.
</warn>

</body>
</subsection>
</section>
<section>
<title>Zmienne</title>
<subsection>
<title>Wymagane zmienne</title>
<body>

<p>
Polityka Gentoo wymaga, aby każdy ebuild zawierał zmienne <c>KEYWORDS</c>,
<c>LICENSE</c> i <c>SLOT</c>. Zmienne <c>HOMEPAGE</c>, <c>SRC_URI</c> i
<c>DESCRIPTION</c> również powinny być dołączone poza pewnymi specjalnymi
sytuacjami. Zmienna <c>DEPEND</c> (i <c>RDEPEND</c> jeśli jest potrzebna)
powinna zostać dołączona, jeśli pakiet zawiera zależności potrzebne w czasie
instalacji lub działania programu.
</p>

</body>
</subsection>
<subsection>
<title>DEPEND i RDEPEND</title>
<body>

<p>
Należy korzystać ze zmiennej <c>DEPEND</c>, aby określić zależności potrzebne
do zbudowania i instalacji programu. Zmienna <c>RDEPEND</c> służy do
definiowania zależności koniecznych do <e>pracy</e> aplikacji. Zmiennej
<c>RDEPEND</c> należy używać tylko jeśli zależności czasu wykonania programu są
inne od tych, które znajdują się w zmiennej <c>DEPEND</c>. Nieokreślenie
wartości <c>RDEPEND</c> spowoduje że przyjmie ona wartość zmiennej
<c>DEPEND</c>. <b>Nigdy</b> nie należy ręcznie przypisywać do <c>RDEPEND</c>
wartości zmiennej <c>DEPEND</c> w ebuildzie.
</p>

<pre caption="Prawidłowa i nieprawidłowa definicja zmiennej RDEPEND">
# Prawidłowo:
RDEPEND="${DEPEND}
        net-ftp/curl
        virtual/glibc"
# Nieprawidłowo:
RDEPEND="${DEPEND}"
</pre>

<p>
Należy pamiętać, że w przypadku instalacji binarnej paczki <c>.tbz2</c>, brane
są pod uwagę wyłącznie zależności w zmiennej <c>RDEPEND</c>. Zwróćmy na to uwagę
podczas definiowania zmiennej <c>RDEPEND</c>. Niezdefiniowanie <c>RDEPEND</c>
spowoduje, że otrzyma ona wartość zmiennej <c>DEPEND</c>.
</p>

<p> 
Pakiet powinien zależeć od najstarszych wersji programów spełniających
zależności. Jeśli działa on poprawnie z <c>libfoo-1.2.x</c>, nie uzależniajmy
go od <c>libfoo-2.x</c>, tylko dlatego, że właśnie tę wersję mamy
zainstalowaną.
</p>

<p>
Generalnie rzecz biorąc, pakiety powinny posiadać zależności typu
<c>=libfoo-1.2*</c> zamiast <c>&gt;=libfoo-1.2</c>. W drugim przypadku może
dojść do nieprzewidzianych problemów, gdy opublikowany zostanie
<c>libfoo-2.0</c>.
</p>

<p>
Wirtualna zależność, np. <c>virtual/foo</c>, będzie prawidłowo spełniona tylko
jeśli pakiety kryjące się za wirtualnym pakietem <c>virtual/foo</c> posiadają
takie same interfejsy. Rozważmy dla przykładu pakiet <c>virtual/jdk-1.3</c>.
Niektóre programy nie pracują z <c>ibm-jdk-1.3</c>, podczas gdy działają
poprawnie z <c>sun-jdk-1.3</c>. Z tego powodu należy upewnić się, że aplikacja
działa poprawnie ze wszystkimi pakietami odpowiadającymi wirtualnej zależności,
przed jej odmaskowaniem. Być może lepszym rozwiązaniem będzie uzależnienie
programu od pewnego podzbioru pakietów niż od całej wirtualnej zależności.
</p>

</body>
</subsection>
</section>
</sections>
