<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/pl/devrel/handbook/hb-guide-ebuild-maintaining.xml,v 1.2 2005/10/17 23:47:21 rane Exp $ -->

<sections>
<section>
<title>Wprowadzenie</title>
<body>

<p>
Przewodnik wyjaśnia codzienne działania związane z utrzymywaniem ebuildów, a
także inne, rzadziej wykonywane czynności, z którymi niektórzy deweloperzy być
może jeszcze się nie zapoznali.
</p>

</body>
</section>
<section>
<title>Dodawanie nowych ebuildów</title>
<body>

<p>
Dodając nowy ebuild, należy uwzględnić wartość <c>KEYWORDS</c> wyłącznie dla
architektury, na której go testowaliśmy. Poprzez dodanie nowego ebuilda
potwierdzamy poprawność jego działania, a także fakt prawidłowej obsługi flag
<c>USE</c> w pakietach generowanych do instalacji. Jeśli to możliwe, warto dodać
również bieżące (i kompletne) biblioteki lub aplikacje testowe, gdyż deweloper
dodający nowy ebuild staje się odpowiedzialny za błędy jakie mogą w nim wystąpić
na danej architekturze. Zawsze należy dołączyć przynajmniej minimalne testy
obejmujące sprawdzenie czy aplikacja uruchomi się bez błędów po zainstalowaniu.
</p>

<p>
Jeśli dodajemy ebuilda nadesłanego przez użytkownika, nie możemy zakładać, że
został on przetestowany na różnych architekturach. Często wartości
<c>KEYWORDS</c> są kopiowane pomiędzy pakietami lub generowane na podstawie
dokumentacji pakietów źródłowych, co nie oznacza, że dane pakiety faktycznie
działają na architekturach, jakie im przypisano.
</p>

</body>
</section>
<section>
<title>Stabilizacja ebuildów</title>
<body>

<p>
Tylko osoby utrzymujące daną architekturę mogą oznaczać pakiety dla niej jako
stabilne. Konieczne jest, aby skontaktować się z osobami utrzymującymi pakiet
przed dokonaniem takiego oznaczenia, na wypadek gdyby istniały jakieś powody,
dla których nie powinno się tego robić. Wyjątkiem jest sytuacja, gdy jesteśmy
członkiem zespołu danej architektury. W takim przypadku możemy oznaczyć pakiet
jako stabilny na tej architekturze. W przypadku gdy nie jesteśmy członkiem
zespołu należy postępować zgodnie ze wskazówkami poniżej. Jeśli brakuje 
informacji na temat architektury jaka nas interesuje, należy skontaktować 
się z odpowiednimi zespołami.
</p>

<p>
Nie należy <e>nigdy</e> stabilizować pakietów dla architektur, na których nie
możemy ich przetestować. Należy skontaktować się z zespołem danej architektury
(na przykład <mail link="sparc@gentoo.org">sparc@gentoo.org</mail>) i poprosić o
przeprowadzenie stabilizacji ebuilda. Można też poszukać deweloperów
interesującej nas architektury na kanałach IRC i poprosić ich o pomoc.
</p>

<p>
Lepiej, zamiast pisać na adres <mail
link="arch-maintainers@gentoo.org">arch-maintainers@gentoo.org</mail>, dodać
adresy zespołów architektur do listy CC. W ten sposób zespoły będą mogły usunąć
się z listy, gdy zakończą pracę, co daje jasny pogląd na temat tego, na jakich
architekturach pakiet nie został jeszcze ustabilizowany.
</p>

</body>
</section>
<section>
<title>Reguły stabilizacji ebuildów</title>
<body>

<p>
Architektura SPARC: potrzebne jest wcześniejsze pozwolenie od lidera zespołu
tej architektury (aktualnie jest nim Weeve). Zazwyczaj wymagany jest dostęp do
komputera o architekturze SPARC, jednak możliwe są inne ustalenia, jeśli
pracujemy na małej grupie pakietów. 
</p>

<p>
Architektura ALPHA: osoby utrzymujące pakiety mogą stabilizować swoje własne
ebuildy, jednak muszą informować przy tym zespół architektury Alpha, aby jego
członkowie mogli również testować ebuildy i wyłapywać ewentualne błędu.
</p>

<p>
Architektura MIPS: konieczne jest wcześniejsze pozwolenie od dowolnego z
głównych deweloperów MIPS. Ze względu na duży wpływ sprzętu na tej architekturze
wymagany jest dostęp do wielu systemów MIPS.
</p>

</body>
</section>
<section>
<title>Aktualizacja ebuildów</title>
<body>

<p>
Nowe ebuildy niezwykle rzadko powinny pojawiać się ze słowem kluczowym
"<c>arch</c>". Każdy pakiet <e>musi</e> zostać przetestowany na wszystkich
architekturach występujących w zmiennej <c>KEYWORDS</c> ebuilda.
</p>

<p>
Wyjątkiem od powyższej zasady są poprawki błędów lub luk bezpieczeństwa. Jeśli
starsza wersja ebuilda zawiera w zmiennej <c>KEYWORDS</c> architektury, dla
których nie możemy jej przetestować, konieczne jest dokonanie jej deprecjacji
poprzez zmianę wszystkich "<c>arch</c>" na "<c>~arch</c>". Jeśli nie mamy
pewności czy pakiet w ogóle będzie działał na jakiejś architekturze, lepiej nie
umieszczać jej w <c>KEYWORDS</c> i poprosić odpowiedni zespół deweloperów o
przeprowadzenie testów.
</p>

<p>
W przypadku gdy nowa wersja zawiera zależności niedostępne na pewnych
architekturach, należy wypełnić raport o błędzie lub skontaktować się z
deweloperami poprzez kanały IRC przed aktualizacją pakietu. Jeśli konieczne
jest szybkie dodanie ebuilda, na przykład dla usunięcia luk bezpieczeństwa,
należy pominąć wszystkie architektury, które sprawiają problemy. Zespoły
pominiętych architektur informujemy następnie raportując odpowiedni błąd.
</p>

<p>
Jeśli nie występują nowe zależności, nie należy usuwać słów kluczowych w
sytuacji, gdy commit przy użyciu programu repoman się nie powiedzie. Wykonujemy
wtedy pełną aktualizację <c>cvs update</c>, a jeśli wciąż występują problemy,
przeprowadzamy commit używając <c>repoman -I</c> i raportujemy błąd do zespołu
odpowiedniej architektury, zaznaczając to w informacji dołączonej do
aktualizowanego pakietu w CVS.
</p>

<warn>
W czasie wykonywania commitu należy upewnić się, że informujemy o wszystkich
błędach zarówno w logach zmian jak i w komunikatach CVS. Pomijanie tego jest
złe i będziemy wyciągać konsekwencje gdy deweloperzy to pominą.
</warn>

</body>
</section>
<section>
<title>Przenoszenie ebuildów</title>
<body>

<p>
Przenoszenie ebuildów w dwóch krokach:
</p>

<p>
Po pierwsze, musimy przenieść ebuild do lokalnej kopii repozytorium CVS. Robimy
to kopiując go do nowej lokalizacji i wykonując commit jak w przypadku <uri
link="?part=1&amp;chap=3">nowego ebuilda</uri>.
</p>

<p>
Następnie konieczna jest modyfikacja wszystkich ebuildów, dla których
zależnością (<c>DEPEND</c>) jest stary ebuild, tak aby zależały one od nowego
ebuildu. Dopiero po wykonaniu tych czynności usuwamy plik ze starej lokalizacji
poleceniem <c>cvs remove</c> i wykonujemy tam commit.
</p>

<note>
CVS nie może usuwać katalogów - po prostu nie będą one odtwarzane, gdy są
puste i używamy flagi <c>-P</c>.
</note>

<p>
Alternatywnie można użyć programu <c>epkgmove</c>, który automatycznie wykona
powyższe czynności:
</p>

<pre caption="Przenoszenie pakietu">
epkgmove net-old/package net-new/package
</pre>

<p>
Po przeniesieniu pakietu, konieczne jest dodanie wpisu do najnowszego pliku w
katalogu <path>profiles/updates/</path> w drzewie Portage, zgodnie z następującym
formatem:
</p>

<pre caption="Dodawanie wpisu dla aktualizacji">
move net-misc/fwbuilder net-firewall/fwbuilder
</pre>

<p>
Powyższy przykład przeniósłby <path>net-misc/fwbuilder</path> do
<path>net-firewall/fwbuilder</path>, gdyby użytkownik posiadał zainstalowaną tą
aplikację. W ten sposób wszystkie aktualizacje
<path>net-firewall/fwbuilder</path> będą automatycznie wykonywane na
komputerach użytkowników.
</p>

</body>
</section>
<section>
<title>Usuwanie ebuildów</title>
<body>

<p>
Usuwając ebuilda, należy upewnić się, że żadne zależności w drzewie Portage nie
zostaną złamane. Dodatkowo komunikat w CVS powinien jasno wyjaśniać dlaczego
ebuild został usunięty.
</p>

<p>
Przed usunięciem pakietu konieczne jest upewnienie się, że przypadkowo nie
usuwamy najnowszej lub jedynej stabilnej wersji ebuildu. Jeśli zależy nam na
oznaczeniu nowszej wersji jako stabilnej, powinniśmy wypełnić raport o błędzie
lub skontaktować się z odpowiednimi deweloperami na kanałach IRC.
</p>

<p>
Nie należy powodować żadnych niekoniecznych aktualizacji do starszych wersji dla
pakietów ze słowem kluczowym "<c>~arch</c>". Lepiej postarać się najpierw o
oznaczenie najnowszej wersji jako "<c>~arch</c>", a potem usuwać zbędne ebuildy.
</p>

</body>
</section>
</sections>
