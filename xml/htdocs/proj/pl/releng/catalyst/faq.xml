<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/pl/releng/catalyst/faq.xml,v 1.4 2012/10/28 15:21:31 swift Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide lang="pl">

<title>Catalyst FAQ</title>

<author title="Autor">John P. Davis</author>
<author title="Autor">Daniel Robbins</author>
<author title="Współpracownik">William Kilian</author>
<author title="Redaktor">Chris Gianelloni</author>
<author title="Tłumaczenie">
  <mail link="rafaeru@o2.pl">Rafał Stolarski</mail>
</author>

<abstract>
Najczęściej zadawane pytania związane z programem Catalyst.
</abstract>

<version>1.1</version>
<date>2008-02-05</date>

<chapter>
<title>Najczęściej zadawane pytania</title>
<section>
<title>Jak utworzyć tarballe stage2 i stage3 dla nietypowych procesorów, takich
jak pentium4?</title>
<body>

<p>
Po pierwsze, należy się upewnić, czy sprzęt na którym pracujemy odpowiada
konfiguracji, na którą przygotowujemy stage.  Tworzenie stage dla
<c>pentium4</c> musi zostać wykonane na systemie opartym o Pentium 4
lubAMD64/Opteron (lub lepszym).  Nie jest możliwe utworzenie stage dla
<c>pentium4</c> na systemie opartym o Athlon XP, jako że procesory Athlon XP nie
wspierają instrukcji SSE2, dostępnych w stage dla <c>pentium4</c>. Podobnie
rzecz ma się w przypadku, gdy chcemy budować system dla <c>g4</c>. Można tego
dokonać jedynie na systemach wspierających PowerPC G4 lub G5.
</p>
<p>
Gdy mamy pewność, że budujemy system na właściwym sprzęcie, można rozpocząć
instalację, jednakże by zbudować system od stage2, należy wybrać stage z opcją
<c>subarch</c> odpowiadającą  naszemu procesorowi (np. <c>pentium4</c>.) Tylko
wtedy stage2 zostanie zbudowane dla wybranej przez nas wersji procesora.
Następnie wykorzystujemy stage2 do budowy stage3. Oczywiście wybieramy stage3 z
odpowiednią dla procesora opcją <c>subarch</c>, tak by pokrywała się ona z
opcją stage2.
</p>

</body>
</section>

<section>
<title>Jak zbudować system z wieloma stage'ami wpierającymi różnorodne
procesory?</title>
<body>

<p>
Na początku należy zbudować ogólny stage1. Następnie używamy utworzone
stage1 do zbudowania konkretnych wersji stage2 i stage3.  Używamy stage1
ponownie by utworzyć kolejne wyspecjalizowane wersje stage2 i stage3. Stage1
nie musi być tworzone od nowa -- wszystkie zbudowane stage2 i stage3 mogą
używać tego samego stage1 jako źródła.
</p>

</body>
</section>

<section>
<title>Czy można zbudować stage1 dla nietypowej wersji procesora?</title>
<body>

<p>
Nie jest to najlepszy pomysł, jako że stage1 uznaje się za wersję pracującą
z każdym typem procesorów.  Dzięki temu, można go uruchamiać na każdym
sprzęcie. Musimy uważać, by nie "zanieczyścić" naszego stage1 specyficznym
kodem nietypowych procesorów.  Do tworzenia nowej wersji stage1 używamy
"ogólnych" wersji stage3.
</p>

</body>
</section>

<section>
<title>Czy catalyst może budować każdy stage od początku? Jeżeli catalyst
posiada taką możliwość, dlaczego za każdym razem potrzebna jest wersja stage na
której budujemy inne?</title>
<body>

<p>
Dobre pytanie. Jak wiadomo, stage2 i stage3 są zależne od poprzednich stage przy
budowaniu, o czym świadczą ich nazwy (np. "stage2" sugeruje istnienie "stage1".)
Mimo to, catalyst potrzebuje podstawowego stage by utworzyć stage1, tak więc
mając na celu zbudowanie stage1, warto wiedzieć dlaczego jest to tak ważne.
Budując stage1, catalyst korzysta ze źródłowego stage3 by utworzyć środowisko
chroot.  Wewnątrz środowiska chroot, nowe stage1 jest tworzone poprzez
ustawienie zmiennej środowiska <c>ROOT</c> na <path>/tmp/stage1root</path>.
Zmienna ta instruuje menadżer pakietów by pominął obecny system plików i łączył
wszystkie nowe pakiety z systemem umiejscowionym w <path>/tmp/stage1root</path>.
Catalyst pakuje wtedy <path>/tmp/stage1root</path>, które zostaje docelowym
stage1. Oznacza to, że gdy catalyst tworzy stage1, samo stage1 nie dziedziczy
żadnych binariów ani bibliotek ze źródłowego stage, które jest używane podczas
tworzenia. Jednakże używane stage <e>wpływa</e> w pewnym stopniu na docelowe
stage1 -- Pliki nagłówkowe Linux (Linux headers) w używanym stage są użyte do
budowania glibc w stage1, tak więc kompilatory w stage użytym do budowy stage1
są używane do kompilacji wszystkich programów w stage1. Źródłowe stage jest
używane do odizolowania procesu budowy stage1 od lokalnego systemu, oraz
umożliwienia budowania stage1 w wersji x86 na systemach amd64, dla przykładu.
</p>

</body>
</section>

<section>
<title>Czy istnieje oficjalne HOWTO dla Catalyst?</title>
<body>

<p>
Obecnie nie. Wszyscy zainteresowani napisaniem takiego przewodnika mogą wysłać
swe prace tak jak w przypadku raportowania błędów. Brak oficjalnego HOWTO, nie
oznacza że Catalyst nie posiada żadnej dokumentacji. Po zainstalowaniu Catalyst,
przykładowe pliki z instrukcjami zostaną zainstalowane w
<path>/usr/share/doc/catalyst-$version/examples</path>.
</p>

<p>
Jeżeli potrzebujemy odpowiedzi na inne pytania, pomocne może okazać się
zapisanie do listy mailowej gentoo-catalyst.
</p>

</body>
</section>

<section>
<title>Gdzie należy umieszczać flagi USE dla poszczególnych pakietów, ustawienia
maskowania, itp?</title>
<body>

<p>
Catalast wspiera pliki konfiguracyjne znajdujące się w
<path>/etc/portage</path>.  Wystarczy dodać wybrane flagi w pliku specyfikacji,
i upewnić się czy źródłowe stage używają tej samej opcji <c>portage_confdir</c>
co system lokalny:
</p>
<p>
portage_confdir: /ścieżka/do/etc/portage
</p>

</body>
</section>

<section>
<title>Budować własne stage1, czy użyć wersji dostępnej w Gentoo mirror?</title>
<body>

<p>
Najlepiej <b>zawsze</b> budować własne stage, jeżeli nie zostanie do tego celu
użyty ten sam snapshot, który został użyty do zbudowania ostatniego wydania.
Drzewo często zmienia swoją zawartość. Jeżeli mielibyśmy użyć stage1 starszego
niż 3 miesiące, spowodowałoby to prawdopodobnie problemy z blokującymi się
pakietami i kompatybilnością, które wpłynęły by na proces budowania stage.
</p>

</body>
</section>

<section>
<title>W jaki sposób utrzymywać pakiety GRP/stages/LiveCD zawsze w najnowszej
wersji?</title>
<body>

<p>
Catalyst używa Portage podczas pracy, tak więc wystarczy regenerować snapshot
Portage i przebudowywać GRP/stage/LiveCD. Portage przeprowadzi aktualizację
pakietów tak jak to ma miejsce w zwykłym systemie.
</p>

</body>
</section>

<section>
<title>Czy Catalyst używa specjalnej składni dla flag USE?</title>
<body>

<p>
Nie, flagi USE w Catalyst są identyczne jak w Portage.
</p>

</body>
</section>

</chapter>

</guide>
