<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!-- $Header -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/pl/releng/catalyst/faq.xml" lang="pl">

<title>Catalyst FAQ</title>

<author title="Autor">John P. Davis</author>
<author title="Autor">Daniel Robbins</author>
<author title="Współpracownik">William Kilian</author>
<author title="Redaktor">Chris Gianelloni</author>
<author title="Tłumaczenie">
  <mail link="rafaeru@o2.pl">Rafał Stolarski</mail>
</author>

<abstract>
Najczęściej zadawane pytania związane z programem Catalyst.
</abstract>

<version>1.0</version>
<date>3 October 2004</date>

<chapter>
<title>Najczęściej zadawane pytania</title>
<section>
<title>Catalyst FAQ</title>
<body>

<p>
<b>P: Jak utworzyć tarballe stage2 i stage3 dla nietypowych procesorów, takich
jak <c>pentium4</c> czy <c>g4</c>?</b>
</p>

<p>
O: Po pierwsze, należy się upewnić, czy sprzęt na którym pracujemy odpowiada
konfiguracji, na którą przygotowujemy stage.  Tworzenie stage dla
<c>pentium4</c> musi zostać wykonane na systemie opartym o Pentium 4 lub
AMD64/Opteron.  Nie jest możliwe utworzenie stage dla <c>pentium4</c> na
systemie opartym o Athlon XP, jako że procesory Athlon XP nie wspierają
instrukcji SSE2, dostępnych w stage dla <c>pentium4</c>. Podobnie rzecz ma się
w przypadku, gdy chcemy budować system dla <c>g4</c>. Można tego dokonać
jedynie na systemach wspierających PowerPC G4 lub G5.
</p>

<p>
Gdy mamy pewność, że budujemy system na właściwym sprzęcie, można rozpocząć
instalację, jednakże by zbudować system od stage2, należy wybrać stage z opcją
<c>subarch</c> odpowiadającą  naszemu procesorowi (np. <c>pentium4</c>.) Tylko
wtedy stage2 zostanie zbudowane dla wybranej przez nas wersji procesora.
Następnie wykorzystujemy stage2 do budowy stage3. Oczywiście wybieramy stage3 z
odpowiednią dla procesora opcją <c>subarch</c>, tak by pokrywała się ona z
opcją stage2.
</p>

<p>
<b>P: Jak zbudować system z wieloma stage'ami wpierającymi różnorodne
procesory?</b>
</p>

<p>
O: Na początku należy zbudować ogólny stage1. Następnie używamy utworzone
stage1 do zbudowania konkretnych wersji stage2 i stage3.  Używamy stage1
ponownie by utworzyć kolejne wyspecjalizowane wersje stage2 i stage3. Stage1
nie musi być tworzone od nowa -- wszystkie zbudowane stage2 i stage3 mogą
używać tego samego stage1 jako źródła.
</p>

<p>
<b>P: Czy można zbudować stage1 dla nietypowej wersji procesora?</b>
</p>

<p>
O: Nie jest to najlepszy pomysł, jako że stage1 uznaje się za wersję pracującą
z każdym typem procesorów.  Dzięki temu, można go uruchamiać na każdym
sprzęcie. Musimy uważać, by nie "zanieczyścić" naszego stage1 specyficznym
kodem nietypowych procesorów.  Do tworzenia nowej wersji stage1 używamy
"ogólnych" wersji stage2 i stage3.
</p>

<p>
<b>P: Czy catalyst może budować każdy stage od początku? Jeżeli catalyst
posiada taką możliwość, dlaczego za każdym razem potrzebna jest wersja stage na
której budujemy inne?</b>
</p>

<p>
O: Dobre pytanie. Jak wiadomo, stage2 i stage3 są zależne od poprzednich stage
przy budowaniu, o czym świadczą ich nazwy (np. "stage2" sugeruje istnienie
"stage1".) Mimo to, catalyst potrzebuje podstawowego stage by utworzyć stage1,
tak więc mając na celu zbudowanie stage1, warto wiedzieć dlaczego jest to tak
ważne. Budując stage1, catalyst korzysta ze źródłowego stage (stage2 lub
stage3) by utworzyć środowisko chroot.  Wewnątrz środowiska chroot, nowe stage1
jest tworzone poprzez ustawienie zmiennej środowiska <c>ROOT</c> na
<path>/tmp/stage1root</path>. Zmienna ta instruuje Portage by pominęło obecny
system plików i łączyło wszystkie nowe pakiety z systemem umiejscowionym w
<path>/tmp/stage1root</path>. <path>/tmp/stage1root</path> jest wtedy pakowane
i staje się docelowym stage1. Oznacza to, że gdy catalyst tworzy stage1, samo
stage1 nie dziedziczy żadnych binariów ani bibliotek ze źródłowego stage, które
jest używane podczas tworzenia. Jednakże używane stage <e>wpływa</e> w pewnym
stopniu na docelowe stage1 -- Pliki nagłówkowe Linux (Linux headers) w używanym
stage są użyte do budowania glibc w stage1, tak więc kompilatory w stage użytym
do budowy stage1 są używane do kompilacji wszystkich programów w stage1.
Źródłowe stage jest używane do odizolowania procesu budowy stage1 od lokalnego
systemu, oraz umożliwienia budowania stage1 w wersji x86 na systemach amd64,
dla przykładu.
</p>

<p>
<b>P: Czy istnieje oficjalne HOWTO dla Catalyst?</b>
</p>

<p>
O: Obecnie nie. Wszyscy zainteresowani napisaniem takiego przewodnika mogą
wysłać swe prace tak jak w przypadku raportowania błędów. Brak oficjalnego
HOWTO, nie oznacza że Catalyst nie posiada żadnej dokumentacji.  Jeżeli
zaemergujemy Catalyst z flagą USE <c>doc</c>, przykładowe pliki z instrukcjami
zostaną zainstalowane w <path>/usr/share/doc/catalyst-$version/examples</path>.
</p>

<p>
Jeżeli potrzebujemy odpowiedzi na inne pytania, pomocne może okazać się
zapisanie do listy mailowej gentoo-catalyst.
</p>

<p>
<b>P: Gdzie należy umieszczać flagi USE dla poszczególnych pakietów, ustawienia
maskowania, itp?</b>
</p>

<p>
O: Catalast wspiera pliki konfiguracyjne znajdujące się w
<path>/etc/portage</path>.  Wystarczy dodać wybrane flagi w pliku specyfikacji,
i upewnić się czy źródłowe stage używają tej samej opcji <c>portage_confdir</c>
co system lokalny:
</p>

<p>
portage_confdir: /ścieżka/do/etc/portage
</p>

<p>
<b>P: Budować własne stage1, czy użyć wersji dostępnej w Gentoo mirror?</b>
</p>

<p>
O: Stage pochodzące z najnowszych wersji Gentoo mogą zostać użyte, chyba że
mamy zamiar budować wersję "hardened", lub chcemy mieć możliwość zmiany
ustawień profilu (np. flagi USE, CFLAGS, itp).
</p>

<p>
<b>P: W jaki sposób utrzymywać pakiety GRP/stages/LiveCD zawsze w najnowszej
wersji?</b>
</p>

<p>
O: Catalyst używa Portage podczas pracy, tak więc wystarczy regenerować
snapshot Portage i przebudowywać GRP/stage/LiveCD. Portage przeprowadzi
aktualizację pakietów tak jak to ma miejsce w zwykłym systemie.
</p>

<p>
<b>P: Czy Catalyst używa sopecjalnej składni dla flag USE?</b>
</p>

<p>
O: Nie, flagi USE w Catalyst są identyczne jak w Portage.
</p>

</body>
</section>

</chapter>

</guide>
