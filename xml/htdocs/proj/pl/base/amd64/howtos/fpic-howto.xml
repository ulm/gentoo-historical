<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/pl/base/amd64/howtos/fpic-howto.xml,v 1.1 2008/01/19 02:04:24 rane Exp $ -->

<sections>

<version>1.2</version>
<date>2006-07-23</date>

<section>
<title>Problem</title>
<body>

<p>
Czasami gcc zgłasza następujący błąd podczas kompilacji kodu:
</p>

<pre caption="Typowy błąd zgłaszany przez gcc">
.libs/assert.o: relocation R_X86_64_32 against `a local symbol' can not be used
when making a shared object; recompile with -fPIC .libs/assert.o: could not read
symbols: Bad value
</pre>

<p>
W tym tekście omówimy wszystkie możliwe przyczyny pojawienia się takiego błędu.
</p>

</body>
</section>
<section>
<title>Co to jest PIC?</title>
<body>

<p>
PIC to skrót od <e>Position-Independent Code</e> (pol. kod niezależny od
pozycji). Poniższy tekst jest wstępem do <uri
link="http://en.wikipedia.org/wiki/Position-independent_code">artykułu w
Wikipedii</uri> odnośnie kodu niezależnego od pozycji:
</p>

<p by="Wikipedia Encyklopedia">
"W informatyce kod niezależny od pozycji (PIC) lub wykonywanie niezależne od
pozycji (PIE) to obiektowy kod, który można wykonać w różnych położeniach w
pamięci. PIC jest przeważnie używany w bibliotekach współdzielonych, by kod tej
samej biblioteki mógł zostać przypisany do lokacji w każdej aplikacji (używając
systemu wirtualnej pamięci), gdzie nie będzie się pokrywać z aplikacją ani
innymi bibliotekami współdzielonymi. PIC jest również używany na starszych
systemach pozbawionych MMU, co powoduje, że system operacyjny musi trzymać
aplikacje we wzajemnej separacji.<br/><br/>
Kod niezależny od pozycji może zostać skopiowany do dowolnego miejsca w pamięci
bez żadnych modyfikacji i uruchomiony, w odróżnieniu od kodu nierelokacyjnego,
który wymaga specjalnego procesu przez linkowanie, by mógł zostać uruchomiony w
podanej lokalizacji. Generalnie kod musi być pisany lub kompilowany w specjalny
sposób w odróżnieniu od kodu niezależnego od pozycji. Instrukcje odnoszące się
do specyficznych adresów w pamięci, takie jak (gałęzie?) absolutne, muszą zostać
zastąpione przez odpowiednie liczniki w relatywnych instrukcjach. Dodatkowa
pośredniość powoduje, że kod PIC może być mniej skuteczny, chociaż współczesne
procesory są projektowane, tak by poprawiać tę niedogodność."
</p>

<p>
Na pewnych architekturach (również na AMD64), biblioteki współdzielone
<e>muszą</e> posiadać włączoną obsługę "PIC".
</p>

</body>
</section>
<section>
<title>Co to są "relokacje"?</title>
<body>

<p>
Jeszcze raz cytujemy Wikipedię:
</p>

<p by="Wikipedia Encyklopedia">
"W informatyce relokacja odnosi się do procesu zamiany referencji symbolicznych
lub nazw bibliotek, które aktualnie używają adresów w pamięci przed
uruchomieniem programu. Jest to zwyczajnie robione przez linker podczas
kompilacji, chociaż można to zrobić podczas uruchamiania przez loader.
Kompilatory i assemblery przeważnie tworzą pliki wykonywalne, z najniższym lub
zerowym adresem startowym w pamięci. Przed wykonaniem kodu obiektowego adresy te
powinny zostać wyregulowane, by wskazywały poprawne adresy uruchomieniowe."
</p>

<p>
Tyle teorii. Teraz praktyka:
</p>

</body>
</section>
<section>
<title>Przykład 1: zepsuty kompilator</title>
<body>

<p>
GCC 3.4 posiada zepsutą implementację flagi <c>-fvisibility-inlines-hidden</c>.
Używanie jej nie jest rozsądne, gdyż wiekszość błedów (ang. bug) jest przeważnie
oznaczana jako RESOLVED INVALID. Błąd <uri
link="http://bugs.gentoo.org/108872">108872</uri> to przykład typowego błędu
wywołanego przez tą flagę.
</p>

</body>
</section>
<section>
<title>Przykład 2: zepsuta obsługa sprawdzania `-fPIC' w skrypcie configure</title>
<body>

<p>
Wiele skryptów <c>configure</c> sprawdza czy kompilator wspiera flagę
<c>-fPIC</c>. Sprawdzenie polega na kompilacji minimalnego programu z włączoną
flagą <c>-fPIC</c> i sprawdzenie <c>stderr</c>. Jeśli kompilator zgłosi
jakiekolwiek ostrzeżenie przyjmuje się że flaga <c>-fPIC</c> nie jest wspierana
przez kompilator i jest opuszczana. Niestety, jeśli użytkownik zdefiniuje
nieistniejącą flagę (np. flagi tylko dla C++ w <c>CFLAGS</c> lub flagi
wprowadzone w nowych wersjach GCC i niewystępujące w starszych wersjach), GCC
również zgłosi ostrzeżenie, powodując błąd.
</p>

<p>
Aby zapobiec tego typu problemom, profil AMD64 używa bashrc, który filtruje
niepoprawne flagi w <c>C[XX]FLAGS</c>.
</p>

<p>
Przykładem jest błąd <uri link="http://bugs.gentoo.org/122208">122208</uri>.
</p>

</body>
</section>
<section>
<title>Przykład 3: brak wsparcia dla flagi `-fPIC' w kompilowanym programie</title>
<body>

<p>
To jest najczęściej występujący przypadek. To jest poważny błąd w systemie
budowania i powinien zostać naprawiony w ebuildzie poprzez patch. Przykładowy
błąd dla tego przypadku przedstawiono poniżej:
</p>

<pre caption="Przykładowy błąd">
.libs/assert.o: relocation R_X86_64_32 against `a local symbol' can not be used
when making a shared object; recompile with -fPIC .libs/assert.o: could not read
symbols: Bad value
</pre>

<p>
To oznacza, że plik <path>assert.o</path> nie został skompilowany z włączoną
flagą <c>-fPIC</c>, a powinien. Kiedy naprawi się taki rodzaj błędu, trzeba się
upewnić, że tylko obiekty, które są używane w bibliotekach współdzielonych są
skompilowane z flagą <c>-fPIC</c>.
</p>

<p>
W tym przypadku, globalne dodanie flagi <c>-fPIC</c> do <c>C[XX]FLAGS</c>
rozwiązuje problem, chociaż nie jest to wskazane, gdyż program wykonywalny
również posiada włączoną obsługę "PIC".
</p>

<note>
Dodanie flagi <c>-fPIC</c> do linkera lub <c>LDFLAGS</c> nie rozwiąże problemu.
</note>

</body>
</section>
<section>
<title>Przykład 4: linkowanie dynamiczne, kontra archiwa statyczne</title>
<body>

<p>
Czasami pakiet próbuje skompilować biblioteki współdzielone używając archiwów
zbudowanych statycznie, które nie posiadają włączonej obsługi "PIC".  Są dwa
powody, dlaczego tak się dzieje:
</p>

<p>
Często jest to wynik mieszania flagi <c>USE=static</c> oraz <c>USE=-static</c>.
Jeśli biblioteka może zostać skompilowana statycznie, poprzez ustawienie flagi
<c>USE=static</c>, nie tworzy się wówczas plik z rozszerzeniem <path>.so</path>,
ale tylko plik z rozszerzeniem <path>.a</path>. Jednak, kiedy włączymy flagę
<c>-l</c> w GCC, by zlinkować bibliotekę (dynamicznie lub statycznie), wtedy GCC
wróci do archiwum statycznego, jeśli nie będzie mógł znaleźć biblioteki
współdzielonej. W tym wypadku, wskazanym rozwiązaniem jest skompilowanie
statycznej biblioteki z włączoną flagą <c>-fPIC</c>.
</p>

<warn>
Na architekturze AMD64 archiwa statyczne można budować tylko i wyłącznie z
włączoną flagą <c>-fPIC</c>. Na pozostałych architekturach jest to niepotrzebne
i powoduje znaczny spadek wydajności podczas uruchamiania.
</warn>

<p>
Przykładem może być błąd <uri link="http://bugs.gentoo.org/88360">88360</uri>
lub błąd mysql <uri link="http://bugs.mysql.com/bug.php?id=8796">8796</uri>
</p>

<p>
Czasami zdarza się również tak, że biblioteka nie powinna być współdzielona w
ogóle, gdy np. nadmiernie używa zmiennych globalnych. W takim wypadku najlepiej
jest skompilować taką bibliotekę jako statyczną.
</p>

<p>
Przykładem jest błąd <uri link="http://bugs.gentoo.org/131460">131460</uri>.
</p>

<pre caption="Przykładowy błąd">
gcc   -fPIC -DSHARED_OBJECT -c lex.yy.c
gcc  -shared -o html2txt.so lex.yy.o -lfl
usr/lib/gcc/x86_64-pc-linux-gnu/4.1.1/../../../../x86_64-pc-linux-gnu/bin/ld:
/usr/lib/gcc/x86_64-pc-linux-gnu/4.1.1/../../../../lib64/libfl.a(libyywrap.o):
relocation R_X86_64_32 against `a local symbol' can not be used when making a
shared object; recompile with -fPIC
/usr/lib/gcc/x86_64-pc-linux-gnu/4.1.1/../../../../lib64/libfl.a: could not
read symbols: Bad value
</pre>

</body>
</section>
</sections>
