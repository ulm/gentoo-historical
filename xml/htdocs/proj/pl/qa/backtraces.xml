<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "http://www.gentoo.org/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/pl/qa/backtraces.xml,v 1.1 2007/05/18 08:24:29 rane Exp $ -->

<guide link="/proj/pl/qa/backtraces.xml" lang="pl">
<title>Poprawne korzystanie ze śledzenia wstecznego w Gentoo</title>

<author title="Autor">
  <mail link="flameeyes@gentoo.org">Diego Pettenò</mail>
</author>

<author title="Informacje dot. Hardened">
  <mail link="solar@gentoo.org">Ned Ludd</mail>
</author>

<author title="Informacje dot. Hardened i architektury x86">
  <mail link="kevquinn@gentoo.org">Kevin Quinn</mail>
</author>

<author title="Redaktor">
  <mail link="dberkholz@gentoo.org">Donnie Berkholz</mail>
</author>

<author title="Tłumacz">
  <mail link="astralstorm@o2.pl">Radosław Szkodziński</mail>
</author>

<abstract>
Ten poradnik ma na celu wyjaśnienie użytkownikom, dlaczego standardowa
instalacja Gentoo nie dostarcza znaczących plików logowania śledzenia wstecznego
oraz informuje, w jaki sposób można je uzyskać.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.7</version>
<date>2006-12-02</date>

<chapter> <!-- Introduction -->
<title>Śledzenie wsteczne w Gentoo</title>

<section>
<title>Co to jest śledzenie wsteczne?</title>

<body>

<p>
<e>Śledzenia wsteczne</e> (ang. backtrace), czasem również zwane bt, trace
(śledzenie) lub stack trace (śledzenie stosu) jest zrozumiałym dla człowieka
zapisem stosu wywołań programu. Podaje, w którym miejscu programu się znajdujemy
oraz poprzez wywołania jakich funkcji został on osiągnięty -- w teorii aż do
funkcji <path>main()</path>. Zapisy śledzenia wstecznego są z reguły
analizowane, gdy błędy ochrony pamięci (ang. segmentation faults) lub awarie
kończące się przerwaniem działania programu są sprawdzane debugerem, np.
<c>gdb</c> (debuger GNU), w celu znalezienia ich przyczyny.
</p>

<p>
Zrozumiały zapis zawiera nie tylko obiekty współdzielone (ang. shared objects),
w których nastąpiło wywołanie, lecz również nazwę funkcji, pliku i linię kodu,
gdzie program się zatrzymał. Niestety, śledzenie wsteczne jest bezużyteczne,
jeśli system został zoptymalizowany dla wyższej wydajności i mniejszego zużycia
miejsca na dysku. Podaje ono wtedy wyłącznie wskaźniki na stos oraz serię ??
zamiast nazw i lokalizacji funkcji.
</p>

<p>
Celem tego poradnika jest przedstawienie, w jaki sposób uzyskać przydatne,
zrozumiałe pliki śledzenia wstecznego w Gentoo, korzystając z własności Portage.
</p>

</body>
</section>

<section> <!-- Compiler flags -->
<title>Flagi kompilatora</title>

<body>

<p>
Standardowo <c>gcc</c> nie wbudowuje informacji debugowania do budowanych plików
obiektowych (bibliotek i programów), ponieważ to je powiększa. Również wiele
opcji optymalizacji interferuje z zapisem informacji debugowania. Z tych
powodów, w pierwszej kolejności zwrócimy uwagę na to, jak powinna być ustawiona
zmienna CFLAGS, aby generować użyteczne informacje debugowania.
</p>

<p>
Bazową flagą, którą należy dodać w tym przypadku, jest <c>-g</c>. Nakazuje ona
kompilatorowi załączenie dodatkowych informacji w plikach obiektowych, takich
jak nazwy plików i numery linii kodu. Zazwyczaj wystarcza to do uzyskania
podstawowego zapisu śledzenia wstecznego, ale flaga <c>-ggdb</c> dodaje więcej
informacji. W rzeczywistości istnieje też kolejna flaga (<c>-g3</c>), ale
korzystanie z niej nie jest zalecane. Zdaje się uszkadzać zgodność binarną i
może prowadzić do dodatkowych awarii. Na przykład, <path>glibc</path> ulega
uszkodzeniu, jeśli jest budowane z tą flagą. Jeśli zamierzasz dostarczyć jak
najwięcej informacji, powinieneś użyć flagi <c>-ggdb</c>.
</p>

<pre caption="Przykład zmiennej CFLAGS z flagami debugowania">
CFLAGS="-march=k8 -O2 -ggdb"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
Optymalizacje również muszą być stosowane z umiarem. Przykładowo, flaga
<c>-O</c> służąca do włączania jednego ze standardowych poziomów optymalizacji
musi być ustawiana rozważnie. Jeśli potrzeba naprawdę dokładnego zapisu, należy
użyć flagi <c>-O1</c> (poziom optymalizacji 0 nie jest zalecany, gdyż znane są
przypadki, gdy gcc generuje nieprawidłowy kod). Ale dla zwyczajnego śledzenia
wstecznego, <c>-O2</c> i <c>-Os</c> również się nadają. Włączanie <c>-O3</c>
dla debugowanego programu jest niemądre, ponieważ włącza dodatkowe
optymalizacje, które uszkodzą informacje potrzebne do debugowania.
</p>

<p>
Wiadomość dla użytkowników architektury x86: mają oni często flagę
<c>-fomit-frame-pointer</c> w zmiennej CFLAGS. Architektura x86 dysponuje
ograniczoną liczbą rejestrów ogólnego zastosowania, a ta flaga może uwolnić
dodatkowy rejestr, poprawiając wydajność. Nic jednak za darmo: uniemożliwia ona
<c>gdb</c> "przejście stosu" -- innymi słowy, wiarygodny zapis śledzenia
wstecznego. Usuń tę flagę z CFLAGS, by zbudować kod łatwiejszy do zrozumienia
przez <c>gdb</c>. Większość pozostałych platform nie ma się czego obawiać; albo
nie ustawia się tam zazwyczaj <c>-fomit-frame-pointer</c>, albo kod generowany
przez <c>gcc</c> nie przeszkadza <c>gdb</c> w pracy. (W tym przypadku flaga jest
już włączona przez poziom optymalizacji <c>-O2</c>.)
</p>

<p>
Użytkownicy Gentoo Hardened mają inne powody do zmartwień. <uri
link="http://www.gentoo.org/proj/pl/hardened/hardenedfaq.xml#hardeneddebug">
Często zadawane pytania projektu Hardened</uri> dostarczą im dodatkowych
wskazówek.
</p>

</body>
</section>
<section> <!-- Stripping -->
<title>Usuwanie symboli debugowania</title>
<body>

<p>
Samo zmienienie CFLAGS i przeinstalowanie world i tak nie umożliwi przydatnego
śledzenia wstecznego, ponieważ trzeba wyłączyć usuwanie symboli debugowania.
Standardowo Portage usuwa je z plików wyjściowych. Innymi słowy, usuwa sekcje
niepotrzebne do ich uruchamiania by zmniejszyć ich rozmiar. Jest to dobre dla
przeciętnego użytkownika, który nie potrzebuje śledzenia wstecznego, ale
usuwa wszystkie informacje debugowania generowane z pomocą flag <c>-g*</c>, jak
również tablice symboli wykorzystywane do wyświetlania zapisu śledzenia
wstecznego w postaci zrozumiałej dla człowieka.
</p>

<p>
Istnieją dwa sposoby, aby powstrzymać usuwanie symboli przed utrudnianiem
debugowania i generowania przydatnych zapisów śledzenia wstecznego. Pierwszy
polega na nakazaniu Portage, by tego nie robiło, dodając <e>nostrip</e> do
zmiennej FEATURES. Pozostawi to instalowane pliki w takiej postaci, w jakiej je
stworzyło <c>gcc</c>, wraz ze wszystkimi informacjami debugowania i tablicami
symboli, co zwiększy ilość miejsca na dysku zajmowanego przez pliki wykonywalne
i biblioteki. Aby tego uniknąć, w wersji 2.0.54-r1 i serii 2.1 programu Portage,
można zamiast tego dodać <e>splitdebug</e> do zmiennej FEATURES.
</p>

<p>
Mając włączone <e>splitdebug</e>, Portage nadal będzie usuwało symbole z
instalowanych plików wyjściowych. Ale zanim to zrobi, wszystkie przydatne
informacje debugowania są kopiowane do pliku ".debug", który jest instalowany do
katalogu <path>/usr/lib/debug</path> (pełna nazwa tego pliku jest tworzona przez
dodanie tego rozszerzenia do nazwy instalowanego pliku wyjściowego). Położenie
pliku ".debug" jest następnie zapisywane w oryginalnym pliku w sekcji
".gnu_debuglink" formatu ELF, aby <c>gdb</c> mogło odczytać, z którego pliku
ładować symbole.
</p>

<impo>
Jeśli włączysz zarówno <e>nostrip</e> , jak też <e>splitdebug</e>, Portage nie
będzie wcale usuwać symboli debugowania, o co nie do końca mogło się rozchodzić.
</impo>

<p>
Kolejną zaletą opcji <e>splitdebug</e> jest brak potrzeby przebudowania pakietu,
by się pozbyć informacji debugowania. Jest to przydatne, jeśli budujesz niektóre
pakiety z flagami debugowania, aby uzyskać zapis śledzenia pojedynczego błędu.
Kiedy zostanie on już naprawiony, wystarczy usunąć katalog
<path>/usr/lib/debug</path>.
</p>

<p>
Aby upewnić się, że symbole debugowania nie zostaną usunięte, trzeba sprawdzić,
czy flaga <c>-s</c> nie jest ustawiona w zmiennej LDFLAGS. Nakazuje ona
linkerowi usunąć symbole podczas fazy łączenia. Warto zauważyć, że korzystanie z
tej flagi może prowadzić do dalszych problemów. Nie podlega ona ograniczeniu
usuwania symboli ustawianym przez niektóre pakiety, które po tym zabiegu
przestają działać.
</p>

<note>
Niestety, niektóre pakiety same usuwają symbole, wewnątrz plików Makefile
dołączonych przez autorów. Jest to błąd i powinien być zgłoszony. Wszystkie
pakiety powinny pozostawiać w kwestii Portage usuwanie symboli lub całkowicie
wyłączać tą funkcję. Głównym wyjątkiem są pakiety binarne. Z reguły są one
pozbawione symboli przez autorów, całkowicie poza kontrolą Portage.
</note>

</body>

</section>

<section> <!-- Introducing gdb -->
<title>Wprowadzenie do obsługi gdb</title>

<body>

<p>
Kiedy pakiety zostały już zbudowane z informacjami debugowania, wystarczy tylko
zapisać dane ze śledzenia wstecznego. Aby temu sprostać, trzeba zainstalować
pakiet <path>sys-devel/gdb</path>. Zawiera on debuger GNU (<c>gdb</c>). Po jego
instalacji, można kontynuować śledzenie wsteczne. Najprostszy sposób to
uruchomienie programu wewnątrz <c>gdb</c>. Aby tak zrobić, trzeba podać
<c>gdb</c> ścieżkę programu do uruchomienia, parametry, których on wymaga, a
następnie nakazać wykonanie:
</p>

<pre caption="Wykonywanie ls poprzez gdb">
$ <i>gdb /bin/ls</i>
GNU gdb 6.4
[...]

(gdb) <i>set args /usr/share/fonts</i>
(gdb) <i>run</i>
Starting program: /bin/ls /usr/share/fonts
[Thread debugging using libthread_db enabled]
[New Thread 47467411020832 (LWP 11100)]
100dpi  aquafont     baekmuk-fonts  cyrillic  dejavu     fonts.cache-1  kochi-substitute  misc  xdtv
75dpi   arphicfonts  CID            default   encodings  fonts.dir      mikachan-font     util

Program exited normally.
(gdb)
</pre>

<p>
Wiadomość "Program exited normally" (Program zakończył się normalnie) oznacza,
że program zakończył wykonanie z kodem błędu 0. Jest to oznaką braku błędów. Nie
należy na tym jednak za bardzo polegać, ponieważ występują programy wychodzące z
takim kodem nawet, gdy wystąpi błąd. Kolejnym powszechnie występującym
komunikatem jest "Program exited with code <e>nn</e>" (Program zakończył się
kodem błędu <e>nn</e>). Podaje on po prostu, jaki niezerowy kod błędu został
zwrócony. Może to oznaczać obsłużony lub spodziewany błąd. W przypadku błędów
ochrony pamięci lub nieprzewidzianego przerwania, wyświetlona zostanie wiadomość
"Program received signal SIG*" (Program odebrał sygnał SIG*).
</p>

<p>
Program może odebrać sygnał z wielu różnych powodów. W przypadku SIGSEGV i
SIGABRT (odpowiednio błędu ochrony pamięci i nieprzewidzianego przerwania),
zazwyczaj oznacza, że program wykonuje niedozwoloną operację, np. nieprawidłowe
wywołanie systemowe (ang. syscall) lub próbuje uzyskać dostęp do pamięci przez
niepoprawny wskaźnik. Innymi powszechnymi sygnałami są SIGTERM, SIGQUIT oraz
SIGINT (ten ostatni jest wynikiem naciśnięcia klawiszy CTRL-C, i zwykle jest
przechwytywany przez <c>gdb</c> oraz ignorowany przez program).
</p>

<p>
W końcu mamy też całą gamę "zdarzeń czasu rzeczywistego" (Real-Time events).
Noszą one nazwy SIG<e>nn</e>, gdzie <e>nn</e> to liczba większa od 31.
Biblioteka wątków pthread zazwyczaj korzysta z nich w celu synchronizacji między
różnymi wątkami wykonania programu, zatem nie przedstawiają one sobą żadnego
błędu. Łatwo można dostarczyć nic nieznaczący zapis śledzenia wstecznego myląc
sygnały czasu rzeczywistego z wystąpieniem błędu. Aby temu zapobiec, można
rozkazać <c>gdb</c>, by nie zatrzymywało wykonania, kiedy odbierze jeden z nich,
lecz przekazało je do bezpośrednio do programu. Opisuje to poniższy przykład.
</p>

<pre caption="Uruchamianie xine-ui poprzez gdb, ignorując sygnały czasu
rzeczywistego.">
$ <i>gdb /usr/bin/xine</i>
GNU gdb 6.4
[...]

(gdb) <i>run</i>
Starting program: /usr/bin/xine
[...]

Program received signal SIG33, Real-time event 33.
[Switching to Thread 1182845264 (LWP 11543)]
0x00002b661d87d536 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib/libpthread.so.0
(gdb) <i>handle SIG33 nostop noprint noignore pass</i>
Signal        Stop      Print   Pass to program Description
SIG33         No        No      Yes             Real-time event 33
(gdb) <i>kill</i>
Kill the program being debugged? [Zatrzymać debugowany program?] (y or n) <i>y</i>
(gdb) <i>run</i>
</pre>

<p>
Polecenie <c>handle</c> powiadamia <c>gdb</c>, co ma robić, gdy dany sygnał
został wysłany do programu; dostępne opcje to <c>nostop</c> (nie zatrzymuj
programu, przekazując kontrolę debugerowi), <c>noprint</c> (nie wypisuj
informacji o odebraniu danego sygnału), <c>noignore</c> (nie ignoruj sygnału --
ignorowanie sygnałów jest niebezpieczne, ponieważ oznacza ich odrzucenie bez
przekazania programowi), <c>pass</c> (przekaż sygnał debugowanemu programowi).
</p>

<p>
Kiedy już możliwe zdarzenia czasu rzeczywistego będą ignorowane przez
<c>gdb</c>, trzeba spróbować odtworzyć awarię, którą chcemy zgłosić. Jeśli
występuje ona systematycznie, jest to dosyć proste. Gdy <c>gdb</c> powiadamia o
otrzymaniu sygnału SIGSEGV lub SIGABRT (lub dowolnego innego mogącego
oznaczać błąd programu), należy uruchomić śledzenie wsteczne, zapisując jego
wynik w pliku. Podstawowym poleceniem do tego stosowanym jest <c>bt</c>, skrót
od <c>backtrace</c>, co wyświetli zapis śledzenia wstecznego aktywnego wątku
(program może być oczywiście jednowątkowy).
</p>

<p>
Alternatywnym poleceniem, stosowanym w celu otrzymania bardziej szczegółowego
zapisu, jest <c>bt full</c>. Dostarcza ono również informacji o parametrach i
zmiennych lokalnych funkcji, które były wywołane przed awarią (jeśli te
informacje są dostępne, a nie usunięte przez optymalizacje). Sprawia to, że
zapis śledzenia wstecznego jest dłuższy, ale bardziej przydatny w celu wykrycia,
np. dlaczego wskaźnik nie jest zainicjalizowany.
</p>

<p>
Wreszcie, nawet proste programy nierzadko są napisane z zastosowaniem wielu
wątków wykonania, co sprawia, że proste wyjście polecenia <c>bt</c>, mimo dużej
liczby informacji, jest bezużyteczne, ponieważ może przekazać stan innego wątku
niż ten, z którego został wysłany sygnał, lub w którym wystąpił błąd (jeśli inny
wątek odpowiada za wysyłanie sygnałów). Z tego powodu należy zastosować dłuższe
polecenie <c>thread apply all bt full</c>, które nakazuje wypisanie pełnego
zapisu śledzenia wszystkich aktualnie uruchomionych wątków.
</p>

<p>
Jeśli zapis śledzenia jest krótki, łatwo można go skopiować z terminala (chyba,
że awaria występuje na komputerze bez X), ale czasami jest on zbyt długi,
zajmując wiele stron. Aby uzyskać plik z zapisem śledzenia wstecznego, który
następnie można dołączyć do raportu, można skorzystać z funkcji <c>logging</c>:
</p>

<pre caption="Zastosowanie polecenia logging w celu zapisania wyniku śledzenia
wstecznego do pliku">
$ <i>gdb /usr/bin/xine</i>
GNU gdb 6.5
[...]

(gdb) <i>run</i>
[...]

(gdb) <i>set logging file backtrace.log</i>
(gdb) <i>set logging on</i>
Copying output to backtrace.log.
(gdb) <i>bt</i>
#0  0x0000003000eb7472 in __select_nocancel () from /lib/libc.so.6
...
(gdb) <i>set logging off</i>
Done logging to backtrace.log.
(gdb) <i>quit</i>
</pre>

<p>
Teraz można znaleźć zapis w pliku <path>backtrace.log</path> i zwyczajnie wysłać
go pocztą elektroniczną lub dołączyć do odpowiedniego raportu.
</p>

</body>
</section>

<section> <!-- Core dumps -->
<title>Zrzuty pamięci</title>

<body>

<p>
Czasami trudno odtworzyć awarie, program składa się z wielu wątków, za wolno
jest wykonywany przez <c>gdb</c> lub popsuty podczas uruchamiania za jego
pomocą. (nie powinno nikogo zaskoczyć, że przy uruchamianiu przez debuger
występuje więcej problemów, niż bez niego). W takich przypadkach, mamy do
dyspozycji przydatne narzędzie: plik zrzutu pamięci (ang. core dump).
</p>

<p>
Plik zrzutu pamięci zawiera obraz całego obszaru pamięci dostępnego programowi w
chwili awarii. Za pomocą tego pliku, można wydobyć zapis śledzenia stosu nawet
jeśli program uległ defektowi poza <c>gdb</c>, zakładając, że zrzuty pamięci są
włączone. Standardowo, nie są one aktywne w Gentoo Linux (lecz przeciwnie w
<uri link="http://www.gentoo.org/proj/en/gentoo-alt/bsd/fbsd/">
Gentoo/FreeBSD</uri>), więc trzeba je włączyć.
</p>

<p>
Zapis zrzutów pamięci można włączyć dla całego systemu lub dla sesji powłoki. W
pierwszym przypadku, cokolwiek w systemie ulegnie awarii i nie ma programu do
ich obsługi (więcej informacji o programie obsługi awarii KDE dalej), dokona
takiego zrzutu. Jeśli zostanie aktywowane dla sesji, tylko programy w niej
uruchomione wygenerują plik zrzutu.
</p>

<p>
By włączyć zrzuty pamięci dla całego systemu, trzeba zmodyfikować albo plik
<path>/etc/security/limits.conf</path>, jeśli stosowana jest biblioteka PAM, jak
jest w standardzie, albo <path>/etc/limits.conf</path>. W pierwszym przypadku,
trzeba podać ograniczenie (twarde, lub częściej miękkie) rozmiaru pliku zrzutu.
Może się on zawierać pomiędzy 0 i brakiem ograniczenia (ang. unlimited). W
drugim przypadku, należy ustawić zmienną C na ograniczenie rozmiaru pliku zrzutu
-- nie ma opcji jego braku.
</p>

<pre caption="Przykład reguły PAM pozwalającej na tworzenie plików zrzutu
dowolnej wielkości">
# /etc/security/limits.conf
*             soft      core       0
</pre>

<pre caption="Przykład reguły pozwalającej na tworzenie plików zrzutu do 20MB --
bez stosowania PAM">
# /etc/limits.conf
*       C20480
</pre>

<p>
Aby włączyć zapisywanie zrzutów pamięci w danej sesji powłoki, można
skorzystać z polecenia <c>ulimit</c> z opcją <c>-c</c>. 0 oznacza wyłączenie
generowania; dowolna liczba dodatnia to maksymalny rozmiar tworzonego pliku
zrzutu w KB, <e>unlimited</e> oznacza brak ograniczenia. Od tego momentu,
wszystkie programy kończące wykonanie z powodu sygnału typu SIGABRT lub SIGSEGV
będą pozostawiać pliki zrzutu nazwane "core" lub "core.<e>pid</e>" (gdzie pid to
identyfikator procesu programu, który uległ awarii).
</p>

<pre caption="Przykład zastosowania polecenia ulimit">
$ <i>ulimit -c unlimited</i>
$ <i>awaryjny-program</i>
[...]
Abort (Core Dumped) [Przerwano (Utworzono plik zrzutu)]
$
</pre>

<note>
Polecenie <c>ulimit</c> to wewnętrzna komenda powłok bash i zsh. W innych może
nazywać się inaczej lub nawet wcale nie być dostępna.
</note>

<p>
Po otrzymaniu zrzutu pamięci, można uruchomić <c>gdb</c>, podając
ścieżkę do programu, który wygenerował zrzut (musi to być dokładnie taki
sam plik wykonywalny -- jeśli w międzyczasie go przebudujesz, zrzut jest
bezużyteczny) oraz ścieżkę do pliku zrzutu. Kiedy już będzie otwarty w
<c>gdb</c>, można postępować zgodnie z instrukcjami podanymi powyżej, jak z
programem, który otrzymał sygnał zatrzymujący wykonanie.
</p>

<pre caption="Uruchamianie gdb z plikiem zrzutu pamięci">
$ <i>gdb $(which awaryjny-program) --core core</i>
</pre>

<p>
Alternatywnie, można zastosować opcje wiersza poleceń programu <c>gdb</c>, aby
uzyskać zapis śledzenia wstecznego bez przejścia w tryb interaktywny. Ułatwia to
zapisanie wyniku śledzenia do pliku lub przesłania go przez dowolny potok.
Kluczowe są tu opcje <c>--batch</c> i <c>-e</c> akceptowane przez <c>gdb</c>.
Można skorzystać z następujących funkcji bash, by otrzymać pełen zapis śledzenia
wstecznego na bazie zrzutu pamięci (włącznie ze wszystkimi wątkami) na
standardowym wyjściu.
</p>

<pre caption="Funkcja wypisująca pełen wynik śledzenia wstecznego na podstawie
zrzutu pamięci">
gdb_get_backtrace() {
    local exe=$1
    local core=$2

    gdb ${exe} \
        --core ${core} \
        --batch \
        --quiet \
        -ex "thread apply all bt full" \
        -ex "quit"
}
</pre>

</body>

</section>

<section> <!-- KDE crash handler's notes -->
<title>Informacje o programie obsługi awarii KDE</title>

<body>

<p>
Aplikacje KDE są standardowo uruchamiane z własnym programem obsługi awarii,
który przedstawia się użytkownikowi jako "Dr. Konqi", jeśli ten program jest
zainstalowany (pakiet <path>kde-base/kdebase</path> lub
<path>kde-base/drkonqi</path> -- zawarty w <path>kdebase-meta</path>). Ten
program wyświetla okno informacyjne informujące o awarii programu. Można w nim
znaleźć zakładkę "Śledzenie wsteczne", która wywołuje <c>gdb</c> przy otwarciu i
automatycznie ładuje dane oraz generuje pełen zapis śledzenia wstecznego,
wyświetlając go w głównym polu tekstowym i umożliwiając bezpośredni zapis do
pliku. Jest on zwykle wystarczający do zgłoszenia problemu.
</p>

<p>
Jeśli drkonqi nie jest zainstalowany, awarie nie będą generować zrzutu pamięci,
a użytkownik nie otrzyma żadnej informacji. Aby tego uniknąć, można przekazać
każdej z aplikacji KDE opcję wiersza poleceń <c>--nocrashhandler</c>. Wyłącza
ona całkowicie program obsługi awarii i pozostawia obsługę sygnałów systemowi
operacyjnemu. Jest to przydatne do generowania plików zrzutu pamięci, gdy
drkonqi nie jest dostępny, lub w celu ręcznego przejrzenia stosu wywołania.
</p>

</body>

</section>

<!-- TODO
     - add notes about GNOME's crash handler
     - add notes about renaming core dump files
-->

</chapter>
</guide>
