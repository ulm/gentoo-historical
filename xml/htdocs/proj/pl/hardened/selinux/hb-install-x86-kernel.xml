<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/pl/hardened/selinux/Attic/hb-install-x86-kernel.xml,v 1.1 2006/04/07 21:31:43 shadoww Exp $ -->

<sections>
<section>
<title>Strefa czasowa</title>
<body>

<p>
System musi wiedzieć gdzie się znajduje, musimy zatem poprawnie skonfigurować
jego ustawienia strefy czasowej. Zaczynamy od wyszukania odpowiedniej dla nas
strefy w katalogu <path>/usr/share/zoneinfo</path>, a następnie tworzymy do niej
dowiązanie symboliczne o nazwie <path>/etc/localtime</path> przy użyciu
polecenia <c>ln</c>.
</p>

<pre caption="Ustawianie strefy czasowej">
# <i>ls /usr/share/zoneinfo</i>
<comment>(Zakładając, że chcemy używać czasu GMT)</comment>
# <i>ln -sf /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>Instalowanie źródeł</title>
<subsection>
<title>Wybór jądra</title>
<body>

<p>
Jądro Linux jest sercem każdej dystrybucji i stanowi interfejs pomiędzy
programami użytkownika, a sprzętem. Gentoo pozwala użytkownikom na wybranie
spośród kilku różnych jego wersji. Pełna ich lista wraz z opisami znajduje się w
dokumencie <uri link="/doc/pl/gentoo-kernel.xml">Omówienie źródeł jądra
dostępnych w Gentoo</uri>. W SELinux tylko jądra serii 2.6 są obsługiwane
(obsługa serii 2.4 jest wciąż ograniczana, a w przyszłości zostanie zupełnie
wstrzymana). Ponadto sugerowane jest skorzystanie ze źródeł
<c>hardened-sources</c>.
</p>

<!--
<p>
If you are performing a network-less install your kernel choices will be limited
to those provided on the CD. For the 2004.2 release those are:
</p>

<ul>
  <li>gentoo-sources</li>
  <li>vanilla-sources</li>
  <li>gentoo-dev-sources</li>
  <li>development-sources</li>
</ul>
-->
<p>
Po wybraniu źródeł jądra instalujemy je korzystając z polecenia <c>emerge</c>.
</p>

<pre caption="Instalowanie źródeł jądra">
# <i>emerge hardened-sources</i>
</pre>

<p>
W katalogu <path>/usr/src</path>, pod nazwą <c>linux</c>, powinno znajdować się
dowiązanie symboliczne wskazujące na aktualne źródła:
</p>

<pre caption="Podgląd dowiązania symbolicznego do źródeł jądra">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.6.7-hardened-r6
</pre>

<p>
Jeśli wynik powyższego polecenia nie jest poprawny (dowiązanie symboliczne
wskazuje na inne źródła jądra niż te, które chcemy wykorzystać), musimy dokonać
odpowiedniej poprawki, zanim przejdziemy do dalszej części instalacji.
</p>

<pre caption="Zmiana dowiązania symbolicznego do źródeł jądra">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.6.7-hardened-r6 linux</i>
</pre>

<p>
Teraz nadszedł czas na skonfigurowanie i skompilowanie źródeł jądra.
<!--
You 
can use <c>genkernel</c> for this, which will build a generic kernel as used 
by the LiveCD. We explain the "manual" configuration first though, as it is 
the best way to optimize your environment.
</p>

<p>
If you want to manually configure your kernel, continue now with <uri
link="#manual">Default: Manual Configuration</uri>. If you want to use 
<c>genkernel</c> you should read <uri link="#genkernel">Alternative: Using 
genkernel</uri> instead.
-->
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Domyślnie: Ręczna konfiguracja jądra</title>
<subsection>
<title>Wprowadzenie</title>
<body>

<p>
Ręczna konfiguracja jądra to zwykle najtrudniejsze zadanie przed jakim musi
stanąć każdy początkujący użytkownik Linuksa. Nic bardziej mylnego - zwykle po
skompilowaniu kilku zapomina się, że kiedykolwiek uważało się to za trudną
czynność. ;)
</p>

<p>
Nie sposób jednak zaprzeczyć, że należy dobrze znać swój komputer, aby móc
prawidłowo skonfigurować jądro. Większość informacji można zdobyć wyświetlając
zawartość <path>/proc/pci</path> (lub używając polecenia <c>lspci</c>, jeśli
jest dostępne). Dodatkowe informacje o sterownikach, które należy włączyć do
jądra, można uzyskać dzięki poleceniu <c>lsmod</c>, które pokaże listę modułów
jakie załadował system płyty instalacyjnej (dając nam w ten sposób przydatne
wskazówki co powinniśmy wykorzystać budując swój kernel).
</p>

<p>
Kiedy już zbierzemy wszystkie informacje przechodzimy do katalogu ze
źródłami i wpisujemy polecenie <c>make menuconfig</c>. Uruchomi się menu
konfiguracyjne oparte na bibliotekach graficznych ncurses.
</p>

<pre caption="Wywoływanie menu konfiguracyjnego">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
Cała konfiguracja została podzielona na kilka sekcji, co znacznie ułatwia
odnalezienie i wybranie odpowiednich sterowników. Poniżej wymieniamy wszystkie
opcje, które należy włączyć, aby Gentoo mogło prawidłowo funkcjonować.
</p>

</body>
</subsection>
<subsection>
<title>Zaznaczanie wymaganych ustawień</title>
<body>

<p>
Na początku włączymy opcje wymagane przez SELinux:
</p>

<pre caption="Wymagane opcje i ich lokalizacja w menuconfig">
<comment>Zakładka "Code maturity level options"</comment>
[*] Prompt for development and/or incomplete code/drivers

<comment>Zakładka "General setup"</comment>
[*] Auditing support

<comment>Zakładka "File systems"</comment>
&lt;*&gt; Second extended fs support <comment>(Dla użytkowników ext2)</comment>
[*]   Ext2 extended attributes
[ ]     Ext2 POSIX Access Control Lists
[*]     Ext2 Security Labels
&lt;*&gt; Ext3 journalling file system support <comment>(Dla użytkowników ext3)</comment>
[*]   Ext3 extended attributes
[ ]     Ext3 POSIX Access Control Lists
[*]     Ext3 security labels
&lt;*&gt; JFS filesystem support <comment>(Dla użytkowników JFS)</comment>
[ ]   JFS POSIX Access Control Lists
[*]   JFS Security Labels
[ ]   JFS debugging
[ ]   JFS statistics
&lt;*&gt; XFS filesystem support <comment>(Dla użytkowników XFS)</comment>
[ ]   Realtime support (EXPERIMENTAL)
[ ]   Quota support
[ ]   ACL support
[*]   Security Labels

[*] /proc file system support
[ ] /dev file system support (EXPERIMENTAL)
<!--
[*] /dev/pts file system for Unix98 PTYs <comment>(This option does not appear -->
<!--in 2.6, it is always on)</comment>
-->
[*]   /dev/pts Extended Attributes
[*]     /dev/pts Security Labels    
[*] Virtual memory file system support (former shm fs)
[*]   tmpfs Extended Attributes
[*]     tmpfs Security Labels

<comment>Zakładka "Security options"</comment>
[*] Enable different security models
[*] Socket and Networking Security Hooks
&lt;*&gt; Capabilities Support
[*] NSA SELinux Support
[ ]   NSA SELinux boot parameter
[ ]   NSA SELinux runtime disable
[*]   NSA SELinux Development Support
[ ]   NSA SELinux AVC Statistics
[ ]   NSA SELinux MLS policy (EXPERIMENTAL)
</pre>

<p>
Rozszerzone atrybuty bezpieczeństa muszą zostać włączone dla devpts i używanych
przez nas systemów plików. Devfs nie może być używane w SELinux, więc należy
wyłączyć tę opcję. Nie wszystkie opcje występują w starszych jądrach serii 2.6,
na przykład "Auditing support".
</p>

<note>
Dostępne opcje mogą się nieznacznie różnić w zależności od wersji
wykorzystywanych źródeł jądra. Inne rozszerzone atrybuty powinny być wyłączone.
</note>

<warn>
Nie należy włączać opcji "SELinux MLS policy", ponieważ nie jest obsługiwana i
spowoduje, że system się nie uruchomi.
</warn>

<p>
Upewnijmy się, że skompilujemy jądra z właściwymi ustawieniami rodziny
procesorów.
</p>

<pre caption="Wybór rodziny procesorów">
Processor type and features ---&gt;
<comment>(Zmieniamy w zależności od posiadanego sprzętu)</comment>
(<i>Athlon/Duron/K7</i>) Processor family
</pre>

<!--
<p>
Jeśli BIOS nie radzi sobie z dużymi dyskami i konieczne było ograniczenie
maksymalnego ich rozmiaru przy pomocy jumpera, należy zaznaczyć poniższą opcję,
co umożliwi uzyskanie dostępu również do niewidocznej dla BIOS-u części
urządzenia.
</p>

<pre caption="Zaznaczanie opcji Auto-Geometry Resizing support">
<comment>(2.4.x kernel only)</comment>
ATA/IDE/MFM/RLL support - - -&gt;
  IDE, ATA and ATAPI Block devices - - -&gt;
    &lt;*&gt;   Include IDE/ATA-2 DISK support
    [ ]     Use multi-mode by default
    [*]     Auto-Geometry Resizing support
</pre>
-->

<p>
Użytkownicy łączący się z Internetem za pomocą PPPoE i połączeń dial-up powinni
zaznaczyć również:
</p>

<pre caption="Sterowniki niezbędne dla użytkowników PPPoE">
<!--
<comment>(With a 2.4.x kernel)</comment>
Network device support - - -&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports
  
<comment>(With a 2.6.x kernel)</comment>
-->
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
Obie opcje dotyczące kompresji nie są wprawdzie wymagane, ale również nie
zaszkodzą naszemu systemowi, podobnie zresztą jak opcja <c>PPP over
Ethernet</c>, która jest przydatna tylko gdy skonfiguruje się <c>rp-pppoe</c>
do pracy w trybie PPPoE (kernel mode PPPoE).
</p>

<p>
Należy wkompilować odpowiednie sterowniki dla wszystkich posiadanych kart
sieciowych.
</p>

<p>
Posiadacze procesorów z HyperThreading oraz komputerów wieloprocesorowych
powinni zaznaczyć opcję "Symmetric multi-processing support":
</p>

<pre caption="Włączanie obsługi SMP">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
Po zakończeniu konfigurowania jądra przechodzimy do części <uri
link="#compiling">Kompilowanie i instalowanie</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Kompilowanie i instalowanie</title>
<body>

<p>
Po skonfigurowaniu kernela przyszła pora na jego skompilowanie i instalację.
Opuszczamy program konfiguracyjny i rozpoczynamy proces kompilacji, wykonując
polecenie <c>make &amp;&amp; make modules_install</c>:
</p>

<pre caption="Kompilowanie jądra">
<!--
<comment>(For 2.4 kernel)</comment>
# <i>make dep &amp;&amp; make bzImage modules modules_install</i>

<comment>(For 2.6 kernel)</comment>
-->
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
Kiedy jądro skończy się kompilować należy przekopiować jego obraz do katalogu
<path>/boot</path>. W kolejnych przykładach zakładamy, że zainstalowane zostało
jądro <c>hardened-sources</c> w wersji 2.6.7. Nazwy kopiowanych plików dobieramy
zgodnie z naszymi preferencjami. Należy zapamiętać użyte nazwy, ponieważ będą
nam potrzebe podczas konfigurowania bootloadera.
</p>

<pre caption="Kopiowanie jądra do katalogu /boot">
# <i>cp arch/i386/boot/bzImage /boot/kernel-2.6.7-hardened-r6</i>
# <i>cp System.map /boot/System.map-2.6.7-hardened-r6</i>
</pre>

<p>
Dobrze jest przekopiować do katalogu <path>/boot</path> również plik
konfiguracyjny jądra - na wszelki wypadek.
</p>

<pre caption="Kopiowanie pliku konfiguracyjnego">
# <i>cp .config /boot/config-2.6.7-hardened-r6</i>
</pre>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>Moduły jądra</title>

<!-- Ta część została usunięta ze "zwykłego" hb, więc komentuję ją dla
utrzymania spójności

<subsection>
<title>Installing Extra Modules</title>
<body>

<p>
If appropriate, you should emerge ebuilds for any additional hardware that is 
on your system. Here is a list of kernel-related ebuilds that you could emerge:
</p>

<table>
<tcolumn width="1in"/>
<tcolumn width="4in"/>
<tcolumn width="2in"/>
<tr>
  <th>Ebuild</th>
  <th>Purpose</th>
  <th>Command</th>
</tr>
<tr>
  <ti>nvidia-kernel</ti>
  <ti>Accelerated NVIDIA graphics for xorg-x11</ti>
  <ti><c>emerge nvidia-kernel</c></ti>
</tr>
<tr>
  <ti>nforce-net</ti>
  <ti>On-board ethernet controller on NVIDIA NForce(2) motherboards</ti>
  <ti><c>emerge nforce-net</c></ti>
</tr>
<tr>
  <ti>nforce-audio</ti>
  <ti>On-board audio on NVIDIA NForce(2) motherboards</ti>
  <ti><c>emerge nforce-audio</c></ti>
</tr>
<tr>
  <ti>e100</ti>
  <ti>Intel e100 Fast Ethernet Adapters</ti>
  <ti><c>emerge e100</c></ti>
</tr>
<tr>
  <ti>e1000</ti>
  <ti>Intel e1000 Gigabit Ethernet Adapters</ti>
  <ti><c>emerge e1000</c></ti>
</tr>
<tr>
  <ti>emu10k1</ti>
  <ti>Creative Sound Blaster Live!/Audigy support</ti>
  <ti><c>emerge emu10k1</c></ti>
</tr>
<tr>
  <ti>ati-drivers</ti>
  <ti>Accelerated ATI Radeon 8500+/FireGL graphics for xorg-x11</ti>
  <ti><c>emerge ati-drivers</c></ti>
</tr>
<tr>
  <ti>ati-drivers-extra</ti>
  <ti>Graphical ATI tools</ti>
  <ti><c>emerge ati-drivers-extra</c></ti>
</tr>
</table>

<p>
Beware though, some of these ebuilds might deal with big dependencies. To verify
what packages will be installed by emerging an ebuild, use <c>emerge 
- -pretend</c>. For instance, for the <c>emu10k1</c> package:
</p>

<pre caption="View full installation package listing">
# <i>emerge - -pretend emu10k1</i>
</pre>

<p>
If you don't like the packages it wants to install, use <c>emerge - -pretend 
- -verbose</c> to see what USE-flags are checked when deciding the dependencies:
</p>

<pre caption="View USE-flag usage">
# <i>emerge - -pretend - -verbose emu10k1</i>
<comment>...</comment>
[ebuild  N    ] media-sound/aumix-2.8  +gpm +nls +gtk +gnome +alsa -gtk2
</pre>

<p>
In the previous example you can see that one of <c>emu10k1</c>'s dependencies
(<c>aumix</c>) uses the <c>gtk</c> and <c>gnome</c> USE-flags, making gtk (which
depends on xorg-x11) be compiled with it.
</p>

<p>
If you don't want all this to be compiled, deselect all USE-flags, for instance:
</p>

<pre caption="Emerging emu10k1 with all USE-flags deselected">
# <i>USE="-gpm -nls -gtk -gnome -alsa" emerge - -pretend emu10k1</i>
</pre>

<p>
When you're happy with the results, remove the <c>- -pretend</c> to start
installing <c>emu10k1</c>.
</p>

</body>
</subsection>
-->

<subsection>
<title>Konfigurowanie modułów</title>
<body>

<p>
Moduły ładowane w czasie startu systemu muszą zostać dopisane do pliku
<path>/etc/modules.autoload.d/kernel-2.6</path>. Można tu również dodać
dodatkowe opcje ich ładowania.
</p>

<p>
Listę wszystkich dostępnych modułów pokaże polecenie <c>find</c> z podaną
poniżej składnią:
</p>

<pre caption="Znajdowanie dostępnych modułów">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
Dla przykładu, aby załadować moduł 3c59x.o należy wyedytować plik kernel-2.6,
dodając tam nazwę modułu.
</p>

<pre caption="Edytowanie pliku /etc/modules.autoload.d/kernel-2.6">
# <i>nano -w /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<pre caption="Zawartość pliku /etc/modules.autoload.d/kernel-2.6">
3c59x
</pre>

<p>
Następnie wykonujemy polecenie <c>modules-update</c> aby wprowadzić zmiany w
pliku <path>/etc/modules.conf</path>:
</p>

<pre caption="Uruchamianie modules-update">
# <i>modules-update</i>
</pre>

<p>
Kontynuujemy instalację zgodnie z rozdziałem <uri
link="?part=1&amp;chap=8">Konfigurowanie systemu</uri>.
</p>

</body>
</subsection>
</section>
</sections>
