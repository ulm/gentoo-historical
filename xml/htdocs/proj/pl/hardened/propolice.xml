<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/pl/hardened/Attic/propolice.xml,v 1.1 2005/07/25 23:11:13 neysx Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- Orig revision: 1.15  -->
<!-- Translator: Paweł Kwiatkowski <yarel@o2.pl> -->
<!-- Status: Finished  -->

<!-- $Id: propolice.xml,v 1.1 2005/07/25 23:11:13 neysx Exp $ -->

<guide link="/proj/pl/hardened/propolice.xml" lang="pl">

<title>Ochrona stosu (SSP) w Gentoo Linux</title>

<subtitle>Rozszerzenie GCC dla ochrony przed atakami na stos (stack-smashing attacks)</subtitle>

<author title="Autor">
   <mail link="frogger@gentoo.org">Matt Rickard</mail>
</author>
<author title="Autor">
   <mail link="solar@gentoo.org">Ned Ludd</mail>
</author>
<author title="Autor">
   <mail link="pappy@gentoo.org"></mail>
</author>
<author title="Tłumaczenie">
   <mail link="yarel@o2.pl">Paweł Kwiatkowski</mail>
</author>

<abstract>
Stack-Smashing Protector (SSP, dawniej ProPolice) jest rozszerzeniem GCC dla
zabezpieczania przed atakami na stos. Jest zaimplementowane jako poprawka do
GCC.
</abstract>

<version>0.5</version>
<date>1 Dec 2003</date>

<chapter>
<title>Co to jest Stack Smashing Protection?</title>
<section>
<body>

<p>
Stack-Smashing Protector (SSP, dawniej ProPolice) jest z pewnością jedną z
najbardziej wyrafinowanych, a zarazem prostych technologii ochronnych
kompilatora, która wykorzystuje wartości znaczników przez zmiany wskaźników
zmiennych lokalnych oraz funkcji. Kiedy ssp jest włączone, potrafi zapobiec
wielu formom popularnych ataków return-to-libc. Jest zaimplementowana jako
poprawka dla GCC, która w trakcie kompilacji automatycznie dodaje zabezpieczenia
do kodu programów. Została przygotowana przez Hiroaki Etoha z IBM. Więcej
informacji można uzyskać na oficjalnej <uri
link="http://www.trl.ibm.com/projects/security/ssp/">stronie SSP</uri>.
</p>

<p>
SSP stanowi doskonały środek bezpieczeństwa. Wiemy, że aplikacje, z których
korzystamy posiadają błędy czekające na wykrycie. Zabezpieczenie SSP pomaga
zminimalizować możliwość wykorzystania tych błędów. Wadliwa aplikacja może się
zawieszać, ale uprawnienia nie zostaną zwiększone i system nie zostanie
skompromitowany. Najlepsze z tego wszystkiego jest to, że otrzymujemy informację
o tym, gdzie w kodzie programu wystąpiło przepełnienie, a to pozwoli nam na
szybkie namierzenie błędu i jego naprawienie.
</p>

<p>
ProPolice nie przechwytuje wszystkich możliwych przepełnień i nadal istnieje
kilka przypadków, które przedostaną się przez kod z włączoną ochroną stosu. To
jeszcze nie koniec w kwestii bezpieczeństwa, to zaledwie krok we właściwym
kierunku.
</p>

<p>
Poprawka została ostatnio wprowadzona w OpenBSD 3.3 oraz późniejszych i wygląda
na znakomity dodatek do profilaktyki bezpieczeństwa ([ang.] proactive security).
</p>

</body>
</section>
</chapter>

<chapter>
<title>Jak jest to zaimplementowane w Gentoo?</title>
<section>
<title>Ostrzeżenie</title>
<body>

<p>
Projekt nadal znajduje się w fazie tworzenia i ostatnio przeszedł wiele
znaczących zmian. Obejmują one aktualizację serii gcc 3.3, a także prace <mail
link="pappy@gentoo.org">Alexandra Gaberta</mail> nad <uri
link="/proj/en/hardened/etdyn-ssp.xml">hardened-gcc</uri>.  Rozpoczęły się też
prace nad przeniesieniem symboli __guard i __stack_smash_handler do
współdzielonych bibliotek w glibc. Zmiana miała miejsce przy gcc-3.3.2-r3.
</p>

<p>
Każdy kto chciałby mieć wkład w rozwój lub testowanie/naprawianie błędów w
projekcie, może śmiało się za to brać! Jako że dążymy do uzyskania bezpiecznych
systemów, potrzebne są wszystkie możliwe testy jakie uda się przeprowadzić.
</p>

</body>
</section>
<section>
<title>Poprawka dla GCC</title>
<body>

<p>
ProPolice zaimplementowane jest jako <b>poprawka dla GCC</b>. W Portage znajduje
się od <c>ebuildu gcc-3.2.3-r1</c> i obecnie jest dostępne w stabilnej wersji
gcc.
</p>

<p>
ProPolice dodaje do GCC dwie nowe flagi <c>CFLAGS</c>.  Są to
<c>-fstack-protector</c> do włączania ochrony stosu oraz
<c>-fno-stack-protector</c> (domyślne zachowanie) do jawnego wyłączenia
zabezpieczenia.
</p>

<p>
Jeśli chcemy mieć domyślnie włączone to zabezpieczenie, to dodajemy
<c>-fstack-protector</c> do <c>CFLAGS</c> w pliku <path>/etc/make.conf</path>.
</p>

</body>
</section>
<section>
<title>Obecne rezultaty</title>
<body>

<p>
Testy autora jak na razie wyglądają obiecująco, jednakże natknął się on na kilka
pułapek związanych z ProPolice w Gentoo.
</p>

<p>
<b>Portage/glibc</b><br/><br/>: Z wcześniejszymi wersjami glibc wystąpił problem
powodujący popsucie się sandboxa. Błąd ten został naprawiony w ostatnich
wersjach glibc.
</p>

<p>
<b>XFree86</b><br/><br/>: Od wersji <c>4.3.0-r2</c> XFree86 nie ignoruje flagi
<c>-fstack-protector</c>. Wszystkie części XFree86 mogą być zbudowane z opcją
ochrony stosu <b>z wyjątkiem</b> modułów video. Pozwala to zabezpieczyć kod
sieciowy XFree86, który jest najbardziej podatny na atak. Do zbudowania XFree86
z ochroną stosu wymagana jest mała poprawka. Poprawka pozwala uruchomić kod
XFree86 charakterystyczny dla OpenBSD i umożliwiający sprawdzenie czy używamy
GCC z poprawką ProPolice. Jeśli okaże się, że tak, to do budowania modułu
zostanie dodana opcja <c>-fno-stack-protector</c>, ale dla reszty źródeł będzie
zachowana opcja <c>-fstack-protector</c>. Poprawka dołączona jest do
<c>4.3.0-r2</c> i nowszych ebuildów XFree86.
</p>

<p>
<b>Jądro</b><br/><br/>: Standardowo jądra nie da się skompilować z opcją
-fstack-protector. Jednakże autor przygotował poprawkę, która to umożliwia. Jest
ona oparta o poprawkę Hiroaki Etoha i dodaje do jądra plik propolice.c,
ustawiający wymagane przez propolice funkcje <c>__guard</c> i
<c>__stack_smash_handler</c>. Jako że propolice nie jest domyślnie włączane w
Gentoo, to musimy dodać flagę -fstack-protector do plików makefile jądra. W tym
celu dodana została w sekcji <c>Processor Type and Features</c> opcja
konfiguracyjna o nazwie <c>ProPolice Stack Smashing Protection</c>, dla
wszystkich architektur wspieranych przez propolice. Jeśli chcemy zbudować kernel
z tym zabezpieczeniem, to wybieramy tę opcję, by dodać <c>-fstack-protector</c>
do naszej kompilacji.
</p>

<p>
Autor przeprowadzając testy jądra zanotował zauważalny spadek wydajności w
stosunku do standardowego niezabezpieczonego kernela. Pomiary przeprowadzone
były przy użyciu <c>lmbench</c>.
</p>

<p>
Poprawka jest dostępna w sekcji <c>Pliki</c> tego dokumentu. Standardowo
załączana jest w jądrze <c>hardened-sources</c>.
</p>

<p>
<b>Inne problemy</b><br/><br/>: Istnieje kilka innych programów, które nie
zbudują się poprawnie z włączoną opcją ochrony stosu. W skład tej grupy wchodzą
następujące programy (ale nie tylko takie): grub, cracklib (część systemu
bazowego), tetex i ocaml. Stosowne ebuildy zostały zaktualizowane w Portage, tak
by wyłączyć opcję ochrony stosu, więc nie powinno być z nimi problemu. Jeśli
napotkamy inny pakiet, który nie zbuduje się ze względu na ProPolice, to prosimy
o zgłoszenie zaistniałego faktu.
</p>

<p>
<b>Budowanie całego systemu z ochroną stosu</b><br/><br/>: Obecnie istnieje
możliwość bootstrapu i budowy wszystkich pakietów z włączonym zabezpieczeniem
ProPolice. Jedyne co musimy zrobić, to dodać <c>-fstack-protector</c> do naszych
flag <c>CFLAGS</c> w pliku <path>/etc/make.conf</path>. Wszystko powinno działać
stabilnie, ale jeśli pojawi się jakiś problem, to prosimy o jego zgłoszenie. 
</p>

</body>
</section>
<section>
<title>Co dalej?</title>
<body>

<p>
SSP wraz z innymi rozszerzeniami bezpieczeństwa stanowi oficjalnie część
projektu Gentoo Hardened. Dla gałęzi gcc 3.2.3 projekt jest stabilny, ale
późniejsze buildy oparte o gcc 3.3 wymagają jeszcze testów. Wszelkie znalezione
błędy prosimy zgłaszać przez <uri link="http://bugs.gentoo.org">Bugzillę</uri>.
</p>

<p>
Wraz z testowaniem i rozwojem projektu, autor będzie zamieszczał więcej
informacji i poprawek błędów.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Pliki</title>
<section>
<body>

<p>
Poprawka powinna dać się bezproblemowo zaaplikować m.in. do jąder 2.4.20 i
2.4.21-rc. Dostarcza ona do konfiguracji jądra opcji budowania ProPolice. 
</p>

<p>
<uri
link="http://frogger974.homelinux.org/propolice/2.4.20-propolice-build.patch">2.4.20-propolice-build.patch</uri>
</p>

</body>
</section>
</chapter>

</guide>
