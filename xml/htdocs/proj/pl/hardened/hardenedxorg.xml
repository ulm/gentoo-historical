<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/pl/hardened/hardenedxorg.xml,v 1.3 2005/10/10 13:25:20 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- Orig revision: 1.8 -->
<!-- Translator: Paweł Kwiatkowski <yarel@o2.pl> -->
<!-- Status: Finished -->

<!-- $Id: hardenedxorg.xml,v 1.3 2005/10/10 13:25:20 rane Exp $ -->

<guide link="/proj/pl/hardened/hardenedxorg.xml" lang="pl">
<title>Korzystanie z Xorg w Gentoo Hardened</title>
<author title="Autor">
  <mail link="tocharian@gentoo.org">Adam Mondl</mail>
</author>
<author title="Współpracownik">
  <mail link="kevquinn@gentoo.org">Kevin Quinn</mail>
</author>
<author title="Współpracownik">
  <mail link="solar@gentoo.org">Ned Ludd</mail>
</author>
<author title="Tłumacz">
  <mail link="yarel@o2.pl">Paweł Kwiatkowski</mail>
</author>

<abstract>
Jak zainstalować i używać Xorg w Gentoo Hardened.
</abstract>

<version>1.4</version>
<date>2005-06-01</date>

<chapter>
<title>Wstęp</title>
<section>
<title>Jakie są różnice w korzystaniu z Xorg w Gentoo Hardened?</title>
<body>

<p>
PaX jest łatą na linuksowy kernel i stanowi główną część projektu Gentoo
Hardened. Dostarcza różnych funkcjonalności, takich jak ASLR lub pamięć z
atrybutem NX ([przyp. tłum.] NX = non-executable, kod w takim obszarze pamięci
nie jest wykonywany). Więcej informacji znajduje się na stronie <uri
link="/proj/pl/hardened/docs/pax-howto.xml">Krótkie wprowadzenie do PaX w
Gentoo Hardened</uri>. Na potrzeby tego dokumentu zakładamy, że czytelnicy
znają podstawy działania PaX, a także ideę PIE (Position Independent
Executable) - kodu relokowalnego.
</p>

<p>
Szczególnie interesującą cechą PaX, z punktu widzenia tego artykułu, jest
MPROTECT, który chroni przed wykonaniem kodu z przestrzeni adresowej programu.
Jedną z głównych cech Gentoo Hardened jest możliwość wydajnego działania w
oparciu o ET_DYN/PIE. Końcowy cel jaki chcemy osiągnąć z Xorg, to uzyskanie
binariów ET_DYN/PIE, które nie zawierają relokacji sekcji "text" oraz mają
losowy adres bazowy, a wszystko to bez narzutu wydajnościowego, jaki generuje
EX_EXEC.
</p>

<p>
W tym momencie, kompilacja Xorg z opcją PIC wydaje się oczywistym i logicznym
wyborem. Gentoo Hardened w tym celu oferuje gcc w wersji hardened, które
umożliwia przezroczystą kompilację z PIE/SSP. I tu zaczynają pojawiać się
problemy. Xorg obecnie używa elfloadera, by obsłużyć ładowanie potrzebnych
modułów. Elfloader nie jest w stanie rozwiązać pewnych typów relokowalnych
symboli, które są zawsze generowane przez kod PIC. Co więcej, elfloader nie
oferuje wsparcia dla typu symboli Globalnej Tablicy Przesunięć (GOF - Global
Offset Table) lub Tablicy Linkowania Procedur (PLT - Procedure Linkage Table).
Obydwa rodzaje wymienionych symboli są istotne dla bibliotek współdzielonych.
</p>

<p>
Jeśli nie elfloader, to co zadziała? Na szczęście istnieje w pełni sprawny,
dobrze przetestowany i dojrzały dynamiczny program ładujący, który jest
zainstalowany w naszym systemie. Jest to ld-linux.so, który dostarczany jest
wraz z glibc. W tym momencie nasuwa się oczywisty pomysł, że byłoby bardzo
dobrze gdyby istniał interfejs programistyczny dla programu ładującego glibc,
dzięki czemu program ładujący X mógłby zostać zmodyfikowany tak, aby korzystać z
tego interfejsu, zamiast z własnego programu ładującego. Okazuje się, że taki
interfejs istnieje - dlopen(3) et. al. - i jest dokładnie tym, czego używa
dlloader.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Instalacja</title>
<section>
<title>Obecne opcje instalacyjne</title>
<body>

<p>
Teraz, gdy zobaczyliśmy jakie problemy napotyka elfloader przy obsłudze modułów
PIC, musimy zdecydować się na sposób, dzięki któremu unikniemy korzystania z
elfloadera:
</p>

</body>
</section>

<section>
<title>Statyczna kompilacja Xorg</title>
<body>

<p>
Najprostszym rozwiązaniem problemu jest kompilacja Xorg i stworzenie statycznie
zlinkowanej binarki. Dzięki temu można uniknąć zastanawiania się nad elfloaderem
i dlloaderem. Jeśli zdecydujemy się na takie rozwiązanie, to wykonujemy
następujące polecenia:
</p>

<pre caption="Instalacja statycznie zlinkowanego Xorg">
# <i>echo "x11-base/xorg-x11 static" >> /etc/portage/package.use</i>
# <i>emerge x11-base/xorg-x11</i>
</pre>

</body>
</section>
<section>
<title>Korzystanie z programu dlloader</title>
<body>

<p>
Kompilacja serwera X z flagą USE=dlloader
</p>

<p>
Można sprawić, by serwer X korzystał do obsługi modułów i zależności, z programu
ładującego opartego o dlopen(). Jest to nowy, zalecany sposób instalacji Xorg.
Aby zainstalować Xorg przy użyciu tej metody, wykonujemy następujące polecenia:
</p>

<pre caption="Używanie programów dlloader i Xorg">
# <i>echo "x11-base/xorg-x11 dlloader" >> /etc/portage/package.use</i>
# <i>echo "x11-base/xorg-x11 ~x86" >> /etc/portage/package.keywords</i>
# <i>emerge x11-base/xorg-x11</i>
</pre>

<impo>
Chociaż dlloader jest flagą USE dla wcześniejszych wersji Xorg w Portage, to
rozwiązanie działa tylko z Xorg od wersji 6.8.0-r4 wzwyż.
</impo>

<note>
Flaga <c>USE="dlloader"</c> jest teraz domyślną opcją w profilu hardened.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja</title>
<section>
<title>/etc/X11/xorg.conf</title>
<body>

<p>
Xorg można skonfigurować w oparciu o opis procesu konfiguracji serwera X,
znajdujący się pod adresem
<uri>http://www.gentoo.org/doc/pl/xorg-config.xml</uri>
</p>

</body>
</section>
</chapter>

<chapter>
<title>Znane problemy</title>
<section>
<title>Doświadczenia z USE=dlloader</title>
<body>

<p>
W związku z naturą dlloadera, połączoną z obecnym stanem prac deweloperskich,
można oczekiwać umiarkowanych sukcesów.
</p>

<p>
Gentoo Hardened posiada domyślną strategię linkowania, która polega na
rozwiązywania wszystkich symboli w czasie ładowania i wymusza takie zachowanie
na wszystkich bibliotekach współdzielonych, które są budowane. Zazwyczaj program
ładujący używa "leniwego" rozwiązywania symboli, tzn. symbole są rozwiązywane
wtedy, gdy są potrzebne. Niestety niektóre z modułów Xorg posiadają wzajemne
zależności i inne utrudnienia, które sprawiają, że moduły nie mogą zostać
załadowane, chyba że włączone jest "leniwe" rozwiązywanie symboli. Obecnie ten
problem w Gentoo został rozwiązany poprzez kompilację modłów Xorg oraz serwera,
z ustawioną flagą <c>-nonow</c> dla gcc. Pozwala to na pozbycie się błędów
"dlopen: undefined symbol". Tak więc, metody ręcznego wykrywania i ładowania
modułów nie są już potrzebne.
</p>

<p>
Prace deweloperskie można śledzić na bieżąco, pod adresem
<uri>http://freedesktop.org/bugzilla/show_bug.cgi?id=400</uri>. Najnowsze
informacje o problemach z dlloaderem znajdują się w dokumencie
<uri>http://freedesktop.org/~ajax/dlloader-status.txt</uri>.
</p>

<impo>
Wszelkie problemy prosimy zgłaszać na bugzilli, która znajduje się pod adresem
<uri>http://bugs.gentoo.org</uri> załączając logi i pliki konfiguracyjne.
</impo>

</body>
</section>

<section>
<title>Sterowniki binarne</title>
<body>

<p>
Problem ten może zostać rozwiązany tylko przez producentów sterowników.
Sterowniki Nvidii i ATI obecnie nie współpracują z dlloaderem.
</p>

</body>
</section>

<section>
<title>Flagi PaX</title>
<body>

<p>
Flaga -M (MPROTECT), z PaX, nie wydaje się działać z Xorg, powoduje znaczne
opóźnienie.
</p>

<p>
Flagi -SP (stos bez możliwości wykonywania kodu) oraz -R (RANDMAP), obecnie nie
działają z Xorg. W celu pozostawienia tych flag po ustawieniu, należy zmienić
zawartość pliku <c>/etc/conf.d/chpax</c>, tak jak pokazano to poniżej:
</p>

<pre caption="Zmiany w pliku chpax">
PS_EXEC_EXEMPT="${PSE_misc} ${xine} ${wine} ${java} ${openoffice} ${mplayer}"
RANDMMAP_EXEMPT="${java}"
</pre>

</body>
</section>

</chapter>
</guide>
