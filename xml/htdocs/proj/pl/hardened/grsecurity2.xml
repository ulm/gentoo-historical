<?xml version='1.0' encoding="utf-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/pl/hardened/grsecurity2.xml,v 1.4 2005/12/03 11:11:31 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- Orig revision: 1.9  -->
<!-- Translator: Paweł Kwiatkowski <yarel@o2.pl> -->
<!-- Status: Finished -->

<!-- $Id: grsecurity2.xml,v 1.4 2005/12/03 11:11:31 rane Exp $ -->

<guide link="/proj/pl/hardened/grsecurity2.xml" lang="pl">

<title>Przewodnik po Gentoo Grsecurity v2</title>

<author title="Autor">
  <mail link="solar@gentoo.org">solar</mail>
</author>
<author title="Autor">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Tłumacz">
  <mail link="yarel@o2.pl">Paweł Kwiatkowski</mail>
</author>

<abstract>
Dokument omawia poprawki grsecurity2 związane z bezpieczeństwem, wspierane
opcje konfiguracyjne jądra oraz narzędzia dostarczone z projektem grsecurity.
Wszystko to po to, by nasz system osiągnął wyższe standardy bezpieczeństwa.
</abstract>

<version>0.4</version>
<date>2004-10-06</date>

<chapter>
<title>O Grsecurity</title>
<section>
<title>Projekt Grsecurity</title>
<body>

<p>
Projekt grsecurity, dostępny na <uri>http://wwww.grsecurity.org</uri>, dostarcza
różnorodne poprawki dla jądra Linux, które podnoszą ogólne bezpieczeństwo
systemu. Różnorodne funkcje wprowadzone przez grsecurity omawiamy w następnym
rozdziale; wyczerpująca lista dostępna jest na <uri
link="http://www.grsecurity.org/features.php">stronie omawiającej funkcje
grsecurity</uri>.
</p>

<p>
Funkcje dostarczane przez grsecurity opierają się przeważnie o jądro. Większa
część tego dokumentu dotyczy różnych opcji jądra i odpowiadającym im operacjom
sysctl (o ile dają się zastosować).
</p>

</body>
</section>
<section>
<title>Integracja z Gentoo Hardened</title>
<body>

<p>
<uri link="http://hardened.gentoo.org">Projekt Gentoo Hardened</uri> dotyczy
utrzymania funkcji związanych ze zwiększeniem bezpieczeństwa w Gentoo. Zawiera
grsecurity, lecz nie ogranicza się tylko do niego.
</p>

</body>
</section>
<section>
<title>Konfiguracja jądra</title>
<body>

<p>
W obrębie tego dokumentu będziemy mówić o konfiguracji jądra za pomocą zmiennych
kernela typu <c>CONFIG_GRKERNSEC_PAX_NO_ACL_FLAGS</c>. Są to zmienne używane
podczas procesu budowania jądra do określenia czy dana funkcja ma być
skompilowana.
</p>

<p>
Konfigurując jądro za pomocą <c>make menuconfig</c> lub w podobny sposób,
otrzymujemy interfejs użytkownika, przez który możemy dokonywać wyboru różnych
opcji. Jeśli skorzystamy z przycisku <e>Help</e> dla jakiejś opcji
konfiguracyjnej, to zobaczymy nazwę odpowiadającej jej zmiennej kernela.
</p>

<p>
Możemy nadal konfigurować jądro, tak jak nam się podoba - z odrobiną
zastanowienia. Jeśli nie możemy znaleźć konkretnej opcji, to zawsze istnieje
możliwość ręcznej zmiany pliku <path>/usr/src/linux/.config</path>. :)
</p>

<p>
Oczywiście by móc wybierać różne opcje grsecurity jądra, musimy włączyć
grsecurity w kernelu:
</p>

<pre caption="Aktywacja grsecurity">
CONFIG_GRKERNSEC=y
CONFIG_GRKERNSEC_CUSTOM=y
</pre>

</body>
</section>
</chapter>

<chapter>
<title>PaX</title>
<section>
<title>Walka z wykorzystywaniem błędów w programach</title>
<body>

<p>
PaX dostarcza kilku mechanizmów bezpieczeństwa, utrudniających agresorom
wykorzystywanie błędów programowych, które dotyczą użycia pamięci. Nie należy
więc traktować PaX jako zabezpieczenia przed wszystkimi możliwymi błędami w
programach. <uri link="http://pax.grsecurity.net/docs/pax.txt">Wprowadzenie do
Pax</uri> wskazuje na trzy możliwe techniki wykorzystania błędów:
</p>

<ol>
  <li>Wprowadzenie/wykonanie dowolnego kodu</li>
  <li>
    Wykonanie istniejącego kodu w sposób nie wynikający z oryginalnego
    zachowania programu
  </li>
  <li>Wykonanie istniejącego kodu dla dowolnych danych</li>
</ol>

<p>
Jedną z metod, która zapobiega wykonaniu kodu jest niepozwalanie na
przechowywanie kodu wykonywalnego w zapisywalnej pamięci. Przyjrzyjmy się
procesowi, który potrzebuje pięciu obszarów pamięci:
</p>

<ol>
  <li>
    <e>Sekcji danych</e> zawierającej globalne i statycznie przydzielone dane
  </li>
  <li>
    <e>Obszaru BSS</e> (Block Started by Symbol) zawierającego informacje o
    danych procesu, które zostały zainicjalizowane zerami
  </li>
  <li>
    <e>Obszaru kodu</e> zwanego także <e>segmentem text</e>, który zawiera
    wykonywalne instrukcje
  </li>
  <li>
    <e>Sterty</e> zawierającej dynamicznie przydzielaną pamięć
  </li>
  <li>
    <e>Stosu</e> zawierającego zmienne lokalne
  </li>
</ol>

<p>
Pierwsza z metod zapobiegawczych PaX nosi nazwę <b>NOEXEC</b>. Powstała z myślą
o tym, by kontrolować generowanie kodu w trakcie działania procesu. Strony
pamięci, które nie zawierają kodu wykonywalnego mają przypisany atrybut
non-executable. Oznacza to, że sterta i stos, które zawierają dane i nie powinny
zawierać kodu są traktowane jako niewykonywalne. Programy ([ang.] exploits),
które umieszczają kod w tych obszarach z zamiarem wykonania nie zadziałają.
</p>

<p>
W rzeczywistości NOEXEC ma większe znaczenie, zainteresowani tematem czytelnicy
powinni skorzystać z <uri
link="http://pax.grsecurity.net/docs/noexec.txt">dokumentacji NOEXEC w PaX
</uri>.
</p>

<p>
Drugą zapobiegawczą metodą PaX jest <b>ASLR</b> (Address Space Layout
Randomization - losowy rozkład przestrzeni adresowej). Wprowadza ona element
losowości do żądań przydziału pamięci. Tam, gdzie poprzednio pamięć była
przydzielana w sposób ciągły (co oznacza, że programy, próbujące wykorzystać
błędy wiedziały gdzie usytuowane są obszary pamięci procesu), ASLR wprowadza
element losowości do przydziału pamięci, sprawiając tym samym, że techniki
wykorzystujące takie informacje stały się bezużyteczne.
</p>

<p>
Więcej informacji o ASLR można znaleźć
<uri link="http://pax.grsecurity.net/docs/aslr.txt">w sieci</uri>.
</p>

</body>
</section>
<section>
<title>Włączanie PaX</title>
<body>

<p>
Zalecane ustawienia jądra dla PaX to:
</p>

<pre caption="Zalaecna konfiguracja jądra dla PaX">
<comment>#
# PaX Control
#
# CONFIG_GRKERNSEC_PAX_SOFTMODE is not set</comment>
CONFIG_GRKERNSEC_PAX_EI_PAX=y
CONFIG_GRKERNSEC_PAX_PT_PAX_FLAGS=y
CONFIG_GRKERNSEC_PAX_NO_ACL_FLAGS=y
<comment># CONFIG_GRKERNSEC_PAX_HAVE_ACL_FLAGS is not set
# CONFIG_GRKERNSEC_PAX_HOOK_ACL_FLAGS is not set

#
# Address Space Protection
#</comment>
CONFIG_GRKERNSEC_PAX_NOEXEC=y
<comment># CONFIG_GRKERNSEC_PAX_PAGEEXEC is not set</comment>
CONFIG_GRKERNSEC_PAX_SEGMEXEC=y
CONFIG_GRKERNSEC_PAX_EMUTRAMP=y
CONFIG_GRKERNSEC_PAX_MPROTECT=y
<comment># CONFIG_GRKERNSEC_PAX_NOELFRELOCS is not set</comment>
CONFIG_GRKERNSEC_PAX_ASLR=y
CONFIG_GRKERNSEC_PAX_RANDKSTACK=y
CONFIG_GRKERNSEC_PAX_RANDUSTACK=y
CONFIG_GRKERNSEC_PAX_RANDMMAP=y
CONFIG_GRKERNSEC_PAX_RANDEXEC=y
<comment># CONFIG_GRKERNSEC_KMEM is not set
# CONFIG_GRKERNSEC_IO is not set</comment>
CONFIG_GRKERNSEC_PROC_MEMMAP=y
CONFIG_GRKERNSEC_HIDESYM=y
</pre>

<p>
Na systemach innych niż x86 można zauważyć, że nie istnieje flaga
CONFIG_GRKERNSEC_PAX_NOEXEC. Zamiast niej należy wybrać
CONFIG_GRKERNSEC_PAX_PAGEEXEC, gdyż poprzednia opcja stanowi obejście
implementacyjne braku bita non-exec.
</p>

</body>
</section>
<section>
<title>Kontrola PaX</title>
<body>

<p>
Nie wszystkie linuksowe aplikacje działają przy ograniczeniach wprowadzonych
przez PaX. Wśród nich znajdują się xorg-x11, java, mplayer, xmms i inne. Jeśli
zamierzamy z nich korzystać, to możemy zmienić poziom zabezpieczeń dla tych
aplikacji wykorzystując <c>chpax</c> oraz <c>paxctl</c>.
</p>

<pre caption="Instalacja chpax i narzędzi paxctl">
# <i>emerge app-admin/chpax</i>
# <i>emerge app-admin/paxctl</i>
</pre>

<p>
Z chpax dostarczany jest skrypt startowy, który obsługuje większość znanych
ustawień aplikacji:
</p>

<pre caption="Dodawanie skryptu startowego chpax do standardowego poziomu uruchamiania">
# <i>rc-update add chpax default</i>
</pre>

<p>
<c>pax-utils</c> jest małym zestawem narzędziowym, który zawiera aplikacje
użyteczne do zarządzania serwerem, na którym jest PaX.
</p>

<pre caption="Instalacja pakietu pax-utils">
# <i>emerge pax-utils</i>
</pre>

<p>
Wśród interesujących narzędzi znajdują się <c>scanelf</c> oraz <c>pspax</c>:
</p>

<ul>
  <li>
    <c>scanelf</c> pozwala na przejrzenie katalogów z bibliotekami i plikami
    wykonywalnymi oraz na wylistowanie ustawień i typów ELF, które wchodzą w
    skład idealnie działającej konfiguracji pax/grsec
  </li>
  <li>
    <c>pspax</c> pozwala na wyświetlenie PaX-owych flag/capabilities/xattr, tak
    jak są widziane przez jądro
  </li>
</ul>

</body>
</section>
<section>
<title>Weryfikacja ustawień PaX</title>
<body>

<p>
Peter Busser napisał zestaw testów regresyjnych zwanych <c>paxtest</c> Dzięki
temu narzędziu możliwe jest zidentyfikowanie potencjalnych punktów ataku i
wygenerowanie odpowiedniej informacji. Po uruchomieniu tego programu, w bieżącym
katalogu zostanie wygenerowany plik z logami <path>paxtest.log</path>.
</p>

<pre caption="Instalacja i uruchamianie programu paxtest">
# <i>emerge paxtest</i>

# <i>paxtest</i>
Executable anonymous mapping             : Killed
Executable bss                           : Killed
Executable data                          : Killed
Executable heap                          : Killed
Executable stack                         : Killed
Executable anonymous mapping (mprotect)  : Killed
Executable bss (mprotect)                : Killed
Executable data (mprotect)               : Killed
Executable heap (mprotect)               : Killed
Executable stack (mprotect)              : Killed
Executable shared library bss (mprotect) : Killed
Executable shared library data (mprotect): Killed
Writable text segments                   : Killed
Anonymous mapping randomisation test     : 16 bits (guessed)
Heap randomisation test (ET_EXEC)        : 13 bits (guessed)
Heap randomisation test (ET_DYN)         : 25 bits (guessed)
Main executable randomisation (ET_EXEC)  : 16 bits (guessed)
Main executable randomisation (ET_DYN)   : 17 bits (guessed)
Shared library randomisation test        : 16 bits (guessed)
Stack randomisation test (SEGMEXEC)      : 23 bits (guessed)
Stack randomisation test (PAGEEXEC)      : No randomisation
Return to function (strcpy)              : Vulnerable
Return to function (memcpy)              : Vulnerable
Return to function (strcpy, RANDEXEC)    : Killed
Return to function (memcpy, RANDEXEC)    : Killed
Executable shared library bss            : Killed
Executable shared library data           : Killed
</pre>

<p>
W powyższym przykładzie z testów, możemy zauważyć że:
</p>

<ul>
  <li>
    strcpy i memcpy zaznaczone zostały jako <e>Vulnerable</e> (podatne na atak).
    Jest to spodziewane i normalne zachowanie, pokazujące potrzebę stosowania
    technologii takich jak <uri link="/proj/pl/hardened/propolice.xml">ProPolice/SSP</uri>
  </li>
  <li>
    Brakuje losowości dla PAGEEXEC. Jest to normalne, gdyż zalecana przez nas
    konfiguracja jądra x86 nie zawiera ustawień dla PAGEEXEC. Jednakże na
    architekturach, które wspierają prawdziwy bit NX (non-executable) (a
    większość tak robi, łącznie z x86_64), PAGEEXEC jest jedyną metodą dostępną
    NOEXEC, która nie generuje narzutu na wydajność.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>RBAC</title>
<section>
<title>Role Based Access Control</title>
<body>

<p>
Istnieją dwa podstawowe typy mechanizmów kontroli dostępu używane do
zapobiegania nieautoryzowanemu dostępowi do plików (w ogólności do informacji):
DAC (Discreationary Access Control - swobodna kontrola dostępu) oraz MAC
(Mandatory Access Control - obowiązkowa kontrola dostępu). Linux standardowo
korzysta z mechanizmu DAC: twórca pliku może zdefiniować prawa dostępu. W
przypadku MAC wszyscy muszą się stosować do zasad wprowadzonych przez
administratora.
</p>

<p>
Wsparcie grsecurity dla implementacji MAC zwane jest Role Based Access Control
(kontrola dostępu oparta na rolach). RBAC kojarzy wszystkich użytkowników z
<e>rolami</e>. Każda z ról definiuje operacje jakie mogą być wykonywane na
określonych obiektach. Posiadając dobrze napisany zbiór ról i operacji jesteśmy
pewni, że użytkownicy będą mogli wykonywać tylko zadania do których mają prawo.
Domyślne ustawienie "deny-all" zapewnia, że użytkownicy nie będą mogli wykonać
akcji, o których nie pomyśleliśmy.
</p>

</body>
</section>
<section>
<title>Konfiguracja jądra</title>
<body>

<p>
Zalecane ustawienia jądra dla RBAC to:
</p>

<pre caption="Zalecana konfiguracja jądra dla RBAC">
<comment>#
# Role Based Access Control Options
#</comment>
CONFIG_GRKERNSEC_ACL_HIDEKERN=y
CONFIG_GRKERNSEC_ACL_MAXTRIES=3
CONFIG_GRKERNSEC_ACL_TIMEOUT=30
</pre>

</body>
</section>
<section>
<title>Praca z programem gradm</title>
<body>

<p>
<c>gradm</c> jest narzędziem pozwalającym na zarządzanie i utrzymywanie
polityki w naszym systemie. Można je wykorzystać do włączania i wyłączania
systemu RBAC, przeładowania ról RBAC, zmiany ról, ustawiania hasła dla trybu
administracyjnego, itp.
</p>

<p>
Podczas instalacji programu <c>gradm</c> w pliku <path>/etc/grsec/policy</path>
zostanie zainstalowana standardowa polityka:
</p>

<pre caption="Instalacja gradm">
# <i>emerge gradm</i>
</pre>

<p>
Standardowo polityki RBAC nie są aktywowane. Decyzję o tym czy system powinien
egzekwować politykę RBAC, powinien podjąć administrator a nie Gentoo. Przed
włączeniem systemu RBAC należy ustawić hasło dla administratora.
</p>

<pre caption="Aktywacja systemu RBAC">
# <i>gradm -P admin</i>
Setting up grsecurity RBAC password
Password: <comment>(Dobrze wybrane hasło)</comment>
Re-enter Password: <comment>(Ponownie to samo hasło)</comment>
Password written in /etc/grsec/pw
# <i>gradm -E</i>
</pre>

<p>
Do wyłaczenie systemu RBAC wykorzystujemy polecenie <c>gradm -D</c>. Jeśli nie
możemy go wykonać, to wcześniej musimy przełączyć się do roli administratora:
</p>

<pre caption="Wyłączanie systemu RBAC">
# <i>gradm -a admin</i>
Password: <comment>(Wpisujemy hasło administratora)</comment>
# <i>gradm -D</i>
</pre>

<p>
Jeśli chcemy zakończyć pracę w roli administratora, wykonujemy <c>gradm -u
admin</c>:
</p>

<pre caption="Porzucanie roli administratora">
# <i>gradm -u admin</i>
</pre>

</body>
</section>
<section>
<title>Generowanie polityki</title>
<body>

<p>
System RBAC posiada użyteczną funkcjonalność zwaną "trybem uczenia". Ten tryb
pozwala na wygenerowanie dla naszego systemu, orientacyjnej polityki z
najmniejszymi uprawnienaimi. Pozwala to na zaoszczędzenie czasu i pieniędzy,
dzięki możliwości szybkiego wdrożenia wielu bezpiecznych serwerów.
</p>

<p>
Tryb uczenia włączamy przez <c>gradm</c>:
</p>

<pre caption="Aktywacja trybu uczenia RBAC">
# <i>gradm -F -L /etc/grsec/learning.log</i>
</pre>

<p>
Następnie wykonujemy czynności jak podczas normalnej pracy. Należy unikać
wywoływania rsync, uruchamiania locate i innych akcji, które generują dużo
operacji wejścia/wyjścia, gdyż może to znacznie zwolnić czas przetwarzania.
</p>

<p>
Kiedy jesteśmy przekonani, że korzystaliśmy z systemu wystarczająco długo by
otrzymać dobrą politykę, pozwalamy by <c>gradm</c> przetworzył dane i
zaproponował role w <path>/etc/grsec/learning.roles</path>:
</p>

<pre caption="Przetwarzanie logów z trybu nauki">
# <i>gradm -F -L /etc/grsec/learning.log -O /etc/grsec/learning.roles</i>
</pre>

<p>
Dokonujemy audytu <path>/etc/grsec/learning.roles</path> i zapisujemy jako
<path>/etc/grsec/policy</path> (z uprawnieniami 0600), gdy skończymy sprawdzać.
</p>

<pre caption="Zapisywanie polityk">
# <i>mv /etc/grsec/learning.roles /etc/grsec/policy</i>
# <i>chmod 0600 /etc/grsec/policy</i>
</pre>

<p>
Mamy teraz możliwość włączenia systemu RBAC z nowo nauczoną polityką.
</p>

</body>
</section>
<section>
<title>Modyfikacja polityki</title>
<body>

<p>
Interesującym aspektem grsecurity2 jest <e>wsparcie operacji na zbiorach</e> dla
pliku konfiguracyjnego. Obecnie wspierane są sumowania, przecięcia i różnice
zbiorów (w tym przypadku obiektów).
</p>

<pre caption="Przykład zbiorów">
define objset1 {
/root/blah rw
/root/blah2 r
/root/blah3 x
}

define somename2 {
/root/test1 rw
/root/blah2 rw
/root/test3 h
}
</pre>

<p>
Poniżej znajduje się przykład użycia oraz wynikowe obiekty, które zostaną dodane
do naszego podmiotu ([ang.] subject).
</p>

<pre caption="Przykład uzycia &amp;">
subject /somebinary o
$objset1 &amp; $somename2
</pre>

<p>
Powyższe rozwinie się do:
</p>

<pre caption="Wynikowe ustawienia podmiotu">
subject /somebinary o
/root/blah2 r
</pre>

<p>
Jest to efekt działania operatora &amp;, który bierze obydwa zbiory i zwraca
pliki istniejący w obydwu zbiorach oraz uprawnienia dla tych plików, które
istnieją w obydwu zbiorach.
</p>

<pre caption="Przykład użycia |">
subject /somebinary o
$objset1 | $somename2
</pre>

<p>
Powyższe rozwinie się do:
</p>

<pre caption="Wynikowe ustawienia podmiotu">
subject /somebinary o
/root/blah rw
/root/blah2 rw
/root/blah3 x
/root/test1 rw
/root/test3 h
</pre>

<p>
Jest to efekt działania operatora |, który bierze obydwa zbiory i zwraca pliki
istniejące w którymś ze zbiorów. Jeśli plik istnieje w obydwu, to także jest
zwracany, a tryb dostępu zawiera flagi istniejące w którymś ze zbiorów.
</p>

<pre caption="Przykład użycia -">
subject /somebinary o
$objset1 - $somename2
</pre>

<p>
Przykład rozwinie się do:
</p>

<pre caption="Wynikowe ustawienia podmiotu">
subject /somebinary o
/root/blah rw
/root/blah2 h
/root/blah3 x
</pre>

<p>
Jest to efekt działania operatora -, który bierze obydwa zbiory i zwraca pliki
istniejące w pierwszym zbiorze, ale nie istniejące w drugim. Jeśli plik istnieje
w pierwszym zbiorze, a w drugim znajdzie się odpowiadający mu wpis (te same
nazwy plików lub w drugim zbiorze istnieje katalog macierzysty dla tego pliku),
to plik jest zwracany, a uprawnienie z drugiego zbioru jest usuwane z pierwszego
zbioru i plik jest zwracany.
</p>

<p>
W pewnym nieokreślonym pseudo-języku można by to zapisać jako:
</p>

<pre caption="Wyjaśnienie w pseudo-języku">
if ( (<i>$objset1</i> contained <i>/tmp/blah rw</i>) and
     (<i>$objset2</i> contained <i>/tmp/blah r</i>) )
then
  <i>$objset1 - $objset2</i> would contain <i>/tmp/blah w</i>

if ( (<i>$objset1</i> contained <i>/tmp/blah rw</i>) and
     (<i>$objset2</i> contained <i>/ rwx</i>) )
then
  <i>$objset1 - $objset2</i> would contain <i>/tmp/blah h</i>
</pre>

<p>
Kolejność stosowania operatorów (od najwyższego do najniższego): "-, &amp; |".
</p>

<p>
Jeśli nie chcemy trudzić się zapamiętaniem kolejności działań, to mamy do
dyspozycji wsparcie dla nawiasowania. Dzięki temu możemy pisać w następujący
sposób:
</p>

<pre caption="Przykład nawiasowania">
(($set1 - $set2) | $set3) &amp; $set4
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Ochrona systemu plików</title>
<section>
<title>Zwalaczanie nadużyć chroot i systemu plików</title>
<body>

<p>
Grsecurity2 zawiera wiele poprawek, które uniemożliwiają użytkownikom uzyskanie
nadmiernej wiedzy o systemie. W ich skład wchodzą ograniczenia na wykorzystanie
<path>/proc</path>, chrootowania, linkowania, itp.
</p>

</body>
</section>
<section>
<title>Konfiguracja jądra</title>
<body>

<p>
Do ochrony systemu plików zalecamy następujące ustawienia grsecurity w
konfiguracji jądra:
</p>

<pre caption="Aktywacja ochrony systemu plików">
<comment>#
# Filesystem Protections
#</comment>
CONFIG_GRKERNSEC_PROC=y
<comment># CONFIG_GRKERNSEC_PROC_USER is not set</comment>
CONFIG_GRKERNSEC_PROC_USERGROUP=y
CONFIG_GRKERNSEC_PROC_GID=10
CONFIG_GRKERNSEC_PROC_ADD=y
CONFIG_GRKERNSEC_LINK=y
CONFIG_GRKERNSEC_FIFO=y
CONFIG_GRKERNSEC_CHROOT=y
CONFIG_GRKERNSEC_CHROOT_MOUNT=y
CONFIG_GRKERNSEC_CHROOT_DOUBLE=y
CONFIG_GRKERNSEC_CHROOT_PIVOT=y
CONFIG_GRKERNSEC_CHROOT_CHDIR=y
CONFIG_GRKERNSEC_CHROOT_CHMOD=y
CONFIG_GRKERNSEC_CHROOT_FCHDIR=y
CONFIG_GRKERNSEC_CHROOT_MKNOD=y
CONFIG_GRKERNSEC_CHROOT_SHMAT=y
CONFIG_GRKERNSEC_CHROOT_UNIX=y
CONFIG_GRKERNSEC_CHROOT_FINDTASK=y
CONFIG_GRKERNSEC_CHROOT_NICE=y
CONFIG_GRKERNSEC_CHROOT_SYSCTL=y
CONFIG_GRKERNSEC_CHROOT_CAPS=y
</pre>

</body>
</section>
<section>
<title>Wyzwalanie mechanizmów bezpieczeństwa</title>
<body>

<p>
Jeśli korzystamy z jądra skompilowanego z powyższą (lub podobną) konfiguracją,
to będziemy mieli możliwość włączania/wyłączania wielu ustawień przez system
plików <path>/proc</path> lub przez wywołania <c>sysctl</c>.
</p>

<p>
Poniższy przykład pokazuje fragment typowego pliku
<path>/etc/sysctl.conf</path>:
</p>

<pre caption="Przykładowe ustawienia w /etc/sysctl.conf">
kernel.grsecurity.chroot_deny_sysctl = 1
kernel.grsecurity.chroot_caps = 1
kernel.grsecurity.chroot_execlog = 0
kernel.grsecurity.chroot_restrict_nice = 1
kernel.grsecurity.chroot_deny_mknod = 1
kernel.grsecurity.chroot_deny_chmod = 1
kernel.grsecurity.chroot_enforce_chdir = 1
kernel.grsecurity.chroot_deny_pivot = 1
kernel.grsecurity.chroot_deny_chroot = 1
kernel.grsecurity.chroot_deny_fchdir = 1
kernel.grsecurity.chroot_deny_mount = 1
kernel.grsecurity.chroot_deny_unix = 1
kernel.grsecurity.chroot_deny_shmat = 1
</pre>

<p>
Jeśli tylko chcemy, to możemy włączać bądź wyłączać ustawienia. W tym celu
korzystamy z komendy <c>sysctl</c>:
</p>

<pre caption="Włączanie ustawień sysctl">
<comment>(Włączanie opcji exec_logging)</comment>
# <i>sysctl -w kernel.grsecurity.exec_logging = 1</i>
<comment>(Wyłączanie opcji exec_logging)</comment>
# <i>sysctl -w kernel.grsecurity.exec_logging = 0</i>
</pre>

<p>
Istnieje bardzo ważne ustawienie sysctl, wchodzące w skład grsecurity. Chodzi o
<c>kernel.grsecurity.grsec_lock</c>. Kiedy zostanie włączone, to nie będziemy w
stanie zmieniać innych ustawień.
</p>

<pre caption="Blokwanie interfejsu sysctl">
# <i>sysctl -w kernel.grsecurity.grsec_lock = 1</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Audyt jądra</title>
<section>
<title>Rozszerzanie możliwości logowania</title>
<body>

<p>
Grsecurity dostarcza nowych funkcjonalności, wchodzących w zakres logowania
jądra. Przy włączonej opcji <e>audytu jądra</e>, kernel informuje nas o tym, że
aplikacje uruchamiają się, urządzenia są montowane itp.
</p>

</body>
</section>
<section>
<title>Różne ustawienia dla audytu jądra</title>
<body>

<p>
Do włączenia ustawień audytu jądra można użyć poniższych opcji konfiguracyjnych
kernela:
</p>

<pre caption="Włączanie audytu jądra">
<comment>#
# Kernel Auditing
#
# CONFIG_GRKERNSEC_AUDIT_GROUP is not set</comment>
CONFIG_GRKERNSEC_EXECLOG=y
CONFIG_GRKERNSEC_RESLOG=y
CONFIG_GRKERNSEC_CHROOT_EXECLOG=y
CONFIG_GRKERNSEC_AUDIT_CHDIR=y
CONFIG_GRKERNSEC_AUDIT_MOUNT=y
CONFIG_GRKERNSEC_AUDIT_IPC=y
CONFIG_GRKERNSEC_SIGNAL=y
CONFIG_GRKERNSEC_FORKFAIL=y
CONFIG_GRKERNSEC_TIME=y
CONFIG_GRKERNSEC_PROC_IPADDR=y
CONFIG_GRKERNSEC_AUDIT_TEXTREL=y
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Ograniczenie operacji</title>
<section>
<title>Ochrona plików wykonywalnych</title>
<body>

<p>
Grsecurity pozwala na ograniczenie praw dla plików wykonywalnych. Ze względu na
to, że większość exploitów wykorzystuje uruchomione procesy takie
zabezpieczenie pomaga zachować system w pełnej sprawności.
</p>

</body>
</section>
<section>
<title>Ochrona sieci</title>
<body>

<p>
Linuksowy stos TCP/IP jest podatny na ataki oparte na prognozach. W celu
przeciwdziałania takim atakom, grsecurity dostarcza poprawek wprowadzających
element losowości. Poza tym, możliwe jest włączenie ograniczeń na gniazda dla
pewnych grup. Ograniczenia te nie pozwolą na dostęp sieciowy.
</p>

</body>
</section>
<section>
<title>Ustawienia jądra</title>
<body>

<p>
Następujące ustawienia jądra włączają różne zabezpieczenia dla sieci oraz plików
wykonywalnych:
</p>

<pre caption="Ustawienia jądra">
<comment>#
# Executable Protections
#</comment>
CONFIG_GRKERNSEC_EXECVE=y
CONFIG_GRKERNSEC_DMESG=y
CONFIG_GRKERNSEC_RANDPID=y
CONFIG_GRKERNSEC_TPE=y
CONFIG_GRKERNSEC_TPE_ALL=y
CONFIG_GRKERNSEC_TPE_GID=100

<comment>#
# Network Protections
#</comment>
CONFIG_GRKERNSEC_RANDNET=y
CONFIG_GRKERNSEC_RANDISN=y
CONFIG_GRKERNSEC_RANDID=y
CONFIG_GRKERNSEC_RANDSRC=y
CONFIG_GRKERNSEC_RANDRPC=y
<comment># CONFIG_GRKERNSEC_SOCKET is not set</comment>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Toolchain w wersji Hardened</title>
<section>
<body>

<p>
Chociaż leży to poza zakresem tego dokumentu, to wspominamy o wykorzystaniu
toolchaina w wersji hardened, który w przestrzeni użytkownika uzupełnia model
grsec/PAX. Można z tego skorzystać w następujący sposób:
</p>

<pre caption="Użycie toolchaina w wersji hardened">
# <i>cd /etc</i>
# <i>rm make.profile</i>
# <i>ln -s ../usr/portage/profiles/hardened/x86 make.profile</i>
# <i>emerge -e world</i>
</pre>

<p>
Jeśli nie chcemy korzystać z tego profilu, to dodajemy do zmiennej USE w
<path>/etc/make.conf</path> następujące flagi USE: <c>hardened pic pie</c>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Zasoby</title>
<section>
<body>

<ul>
  <li><uri link="http://grsecurity.net/">Strona domowa Grsecurity</uri></li>
  <li><uri link="http://forums.grsecurity.net/">Forum Grsecurity</uri></li>
  <li>
    <uri link="http://grsecurity.net/researchpaper.pdf">Poprawienie wydajności
    i rozdrobnienia w Role-Based Access Control Systems</uri>
  </li>
  <li>
    <uri link="/proj/pl/hardened/capabilities.xml"> Nazwy i opisy
    możliwości</uri>
  </li>
  <li>
    <uri link="http://grsecurity.net/quickstart.pdf">Szybkie wprowadzenie do
    Grescurity</uri> (Nowość .pdf)
  </li>
  <li>
    <uri link="/proj/pl/hardened/pax-quickstart.xml">Szybkie wprowadzenie do
    używania PaX w Gentoo</uri> (Nowość)
  </li>
  <li>
    <uri link="/proj/en/hardened/grsecurity.xml">Grsecurity i system MAC w
    Gentoo 1.9.x</uri> (Stare)
  </li>
  <li>
    <uri link="http://grsecurity.net/PaX-presentation_files/frame.htm">PaX:
    Gwarantowany koniec wykonywania dowolnego kodu</uri>
  </li>
  <li>
    <uri link="http://pax.grsecurity.net">Strona domowa i dokumentacja PaX</uri>
  </li>
  <li><uri link="/proj/pl/infrastructure/tenshi/">Tenshi</uri></li>
</ul>


</body>
</section>
</chapter>

</guide>
