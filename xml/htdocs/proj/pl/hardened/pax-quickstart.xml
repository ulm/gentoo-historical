<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/pl/hardened/pax-quickstart.xml,v 1.1 2005/07/22 16:57:10 neysx Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- Orig revision: 1.7 -->
<!-- Translator: Paweł Kwiatkowski <yarel@o2.pl> -->
<!-- Status: Finished -->

<!-- $Id: pax-quickstart.xml,v 1.1 2005/07/22 16:57:10 neysx Exp $ -->

<guide link="/proj/pl/hardened/pax-quickstart.xml" lang="pl">
<title>Krótkie wprowadzenie do PaX w Gentoo Hardened</title>

<author title="Autor">
  <mail link="tseng@gentoo.org">Brandon Hale</mail>
</author>
<author title="Redaktor">
  <mail link="blackace@gentoo.org">Blackace</mail>
</author>
<author title="Redaktor">
  <mail link="solar@gentoo.org">solar</mail>
</author>
<author title="Tłumacz">
  <mail link="yarel@o2.pl">Paweł Kwiatkowski</mail>
</author> 

<abstract>
Krótkie omówienie PaX i Gento Hardened.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.3</version>
<date>2005-07-11</date>

<chapter>
<title>Czym jest Gentoo Hardened?</title>
<section>
<body>

<p>
Gentoo Hardened to projekt mający na celu ulepszenie zabezpieczeń systemów
opartych o Gentoo. Prezentujemy kilka różnorodnych rozwiązań, które można
dostosować do własnych potrzeb. W sercu typowej konfiguracji Gentoo Hardened
znajduje się <e>PaX</e>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Czym jest PaX?</title>
<section>
<body>

<p>
PaX jest łatą na linuksowy kernel, która ulepsza zabezpieczenia w dwojaki
sposób.
</p>

<p>
Pierwszy z nich, <e>ASLR</e> (Address Space Layout Randomization - losowy
rozkład przestrzeni adresowej) dostarcza środków do wprowadzenia losowości do
schematu adresowania wszystkich danych, które są ładowane do pamięci. Kiedy
aplikacja jest budowana jako <e>PIE</e> (Position Independent Executable -
binaria z możliwością relokacji kodu), to dodatkowo PaX jest w stanie
wygenerować losowy adres bazowy dla aplikacji.
</p>

<p>
Drugie zabezpieczenie wprowadzone przez PaX stanowi pamięć z atrybutem NX (kod
zawarty w takim obszarze pamięci, nie może być wykonywany). Zapobiega to
popularnej formie ataku, kiedy to agresor wstawia kod wykonywalny do pamięci.
Więcej informacji na temat PaX można znaleźć w niniejszym przewodniku, natomiast
strona domowa znajduje się pod adresem <uri>http://pax.grsecurity.net</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Wprowadzenie do PIE i SSP</title>
<section>
<body>

<p>
Jak już wspomniano powyżej, PaX jest uzupełniany przez PIE. Ta metoda budowania
plików wykonywalnych przechowuje informacje potrzebne do relokacji części
binariów w pamięci, stąd nazwa <e>Position Independent</e> (niezależność od
pozycji).
</p>

<p>
<e>SSP</e> (Stack Smashing Protector) jest drugą uzupełniającą technologią,
którą wprowadzamy podczas budowania binariów. Po raz pierwszy SSP zostało
przedstawione przez IBM pod nazwą <e>ProPolice</e>. Rozwiązanie polegało na
modyfikacji kompilatora C tak, aby do funkcji tworzących bufory w pamięci
dodawany był kod inicjalizujący. 
</p>

<note>
W nowszych wersjach SSP, możliwe jest zastosowanie SSP do wszystkich funkcji,
wliczając w to ochronę funkcji, dla których rozmiar bufora jest zazwyczaj
mniejszy niż limit ustalony dla SSP. Jest to włączane przez flagę CFLAG
<c>-fstack-protector-all</c>.
</note>

<p>
W trakcie działania programu, podczas tworzenie bufora, SSP dodaje na końcu
bufora, sekretną wartość losową, tzw. znacznik. Kiedy funkcja kończy działanie,
SSP sprawdza, czy znacznik jest nietknięty. Jeśli agresor próbowałby przepełnić
bufor, to nadpisałby wartość znacznika i tym samym wyzwolił funkcję ochrony
stosu. Obecnie funkcja ta zabija docelowy proces.
</p>

<p>
<uri link="http://www.trl.ibm.com/projects/security/ssp/">Dalsza lektura na
temat SSP</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Budowanie kernela ze wsparciem dla PaX</title>
<section>
<body>

<p>
Kilka z kerneli oferowanych w Gentoo posiada już PaX.
</p>

<p>
Dla komputerów opartych o jądra w wersji 2.4 i2.6 zaleca się użycie kerneli z
pakietu <c>hardened-sources</c>.
</p>

<p>
Wybieramy jeden z zalecanych kerneli lub aplikujemy na nasz kernel, odpowiednią
łatę ze strony <uri>http://pax.grsecurity.net</uri>, a następnie przeprowadzamy
standardową konfigurację.
</p>

<p>
W sekcji <c>Security Options -&gt; PaX</c> zaznaczamy poniższe opcje.
</p>

<pre caption="Konfiguracja kernela">
[*] Enable various PaX features

PaX Control -&gt;

 [ ] Support soft mode
 [*] Use legacy ELF header marking
 [*] Use ELF program header marking
     MAC system integration (none)  ---&gt;

Non-executable page -&gt;

 [*] Enforce non-executable pages
 [*] Paging based non-executable pages
 [*] Segmentation based non-executable pages
 [*] Emulate trampolines
 [*] Restrict mprotect()
 [ ] Disallow ELF text relocations

Address Space Layout Randomization -&gt;

 [*] Address Space Layout Randomization
 [*] Randomize kernel stack base
 [*] Randomize user stack base
 [*] Randomize mmap() base
 [*] Randomize ET_EXEC base
</pre>

<p>
Budujemy standardowo kernel i umieszczamy go w katalogu <path>/boot</path>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Budowanie przestrzeni użytkownika z włączonym PIE/SSP</title>
<section>
<body>

<p>
Gentoo Hardened dostarcza wsparcia dla przezroczystego budowania binariów
z PIE/SPP poprzez plik specyfikacji GCC. Oznacza to, że użytkownicy
aktualizujący starsze wersje instalacji Hardened, powinni usunąć flagi LDFLAGS
lub CFLAGS, które wyzwalały PIE/SSP. Ponadto pakiet <c>hardened-gcc</c> jest
teraz przestarzały i powinien zostać odinstalowany (wersja 5.0 jest pakietem
atrapą). Jeśli chcemy mieć aktualne GCC, to dodajemy <c>USE="hardened pic"</c>
do pliki <path>/etc/make.conf</path>, o ile nie używamy profilu hardened.
</p>

<p>
Dla utrzymanie spójnego toolchaina, na początku wykonujemy polecenie <c>emerge
binutils gcc virtual/libc</c>. Następnie musimy przebudować cały system
poleceniem <c>emerge -e world</c>. Wszystkie później instalowane pakiety zostaną
zbudowane z PIE/SSP.
</p>

<warn>
PIE i SSP są znane z tego, że powodują problemy przy niektórych pakietach. Jeśli
napotkamy problem z kompilacją pakietu, powinniśmy zgłosić szczegółowy raport
błędu (zawierający log z kompilacji oraz wynik polecenia <c>emerge info</c>) na
stronie <uri>http://bugs.gentoo.org/</uri>.
</warn>

<p>
Możliwe, że będziemy chcieli zainstalować pakiet pax-utils. Często ELF posiada
relokacje w segmencie text i może to być przyczyną problemów. scanelf -BRylptq
</p>

</body>
</section>
</chapter>

<chapter>
<title>Kiedy zacznie się źle dziać (kontrolowanie PaX)</title>
<section>
<body>

<p>
Czasem aplikacje w trakcie działania podejmują próby wygenerowania kodu, który
jest wykonywany poza pamięcią. PaX naturalnie nie pozwoli na takie zachowanie i
natychmiast zakończy działanie występnego programu.
</p>

<note>
Najbardziej godne uwagi z tego rodzaju aplikacji, wydają się XFree, Xorg,
mpalyer i narzędzia dla multimediów oparte o xine-lib. Najprostszy sposób na
rozwiązanie problemów to wyłączenie zabezpieczeń PaX.
</note>

<p>
Na szczęście istnieje narzędzie pozwalające na wyłączanie/włączanie ochrony dla
poszczególnych plików wykonywalnych. Jest to <e>paxctl</e>, który instalujemy
tak jak każdy inny pakiet w Gentoo, <c>emerge paxctl</c>. Sposób użycia
pokazywany jest po wydaniu polecenia <c>paxctl -h</c>.
</p>

<note>
Jeśli posiadamy starszą wersję pakietu binutils, to będziemy musieli skorzystać
z programu <e>chpax</e>, który modyfikuje starsze znaczniki PaX. Korzystanie z
chpax jest w dużej mierze podobne do paxctl. Dodatkowo wymagane jest wsparcie
kernela dla zapisu znaczników.
</note>

<pre caption="paxctl -h">
usage: paxctl &lt;options&gt; &lt;files&gt;

options:
        -p: disable PAGEEXEC            -P: enable PAGEEXEC
        -e: disable EMUTRMAP            -E: enable EMUTRMAP
        -m: disable MPROTECT            -M: enable MPROTECT
        -r: disable RANDMMAP            -R: enable RANDMMAP
        -x: disable RANDEXEC            -X: enable RANDEXEC
        -s: disable SEGMEXEC            -S: enable SEGMEXEC

        -v: view flags                  -z: restore default flags
        -q: suppress error messages     -Q: report flags in short format flags
</pre>

<p>
Pierwszą opcją, jaką zaprezentujemy jest <c>-v</c>, która wyświetla ustawione
flagi dla wskazanego pliku wykonywalnego.
</p>

<pre caption="paxctl -v">
shell user # <i>paxctl -v /usr/bin/Xorg</i>
PaX control v0.2
Copyright 2004 PaX Team &lt;pageexec@freemail.hu&gt;

- PaX flags: -p-sM--x-eR- [/usr/bin/Xorg]
        PAGEEXEC is disabled
        SEGMEXEC is disabled
        MPROTECT is enabled
        RANDEXEC is disabled
        EMUTRAMP is disabled
        RANDMMAP is enabled
</pre>

<p>
Powyższa komenda pokazuje, że dla pliku Xorg wszystkie zabezpieczenia są
wyłączone.
</p>

<p>
Do ustawienia flag na pliku binarnym korzystamy z opcji <c>-z</c>, która
przywraca domyślne flagi.
</p>

<p>
By wyłączyć zabezpieczenia dla Xorg wykonujemy polecenie <c>paxctl -zpeMRxs
/usr/bin/Xorg</c>.
</p>

<p>
Próbujemy włączać/wyłączać zabezpieczenia, by zobaczyć jaki zestaw opcji pozwoli
na działanie programu. Często zdarza się, że potrzebna jest kombinacja
opcji <c>-m</c> i <c>-sp</c>.
</p>

<p>
Podczas instalacji pakietu chpax, instalowany jest również standardowy skrypt
init/conf.d, który ze względu na dobrze znane problemy, ustawia uzasadnione
opcje domyślne. Chcąc włączyć ustawianie tych uprawnień, przy każdym
uruchomieniu systemu, należy wykonać następującą komendę: <c>emerge chpax ;
rc-update add chpax default ; /etc/inid.d/chpax start</c>.
</p>

</body>
</section>
</chapter>
</guide>
