<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd"> 
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/pl/hardened/rsbac/overview.xml,v 1.2 2005/10/17 23:18:26 rane Exp $ -->

<guide link="/proj/pl/hardened/rsbac/overview.xml" lang="pl">

<!-- Orig revision: 1.4 -->
<!-- Translator: Paweł Kwiakowski <yarel@o2.pl>-->
<!-- Status: Finished -->

<!-- $Id: overview.xml,v 1.2 2005/10/17 23:18:26 rane Exp $ -->

<title>Rule Set Based Access Control (RSBAC) w Linuksie - przegląd</title>

<author title="Autor">
  <mail link="ao@rsbac.org">Amon Ott</mail>
</author>
<author title="Redaktor"> 
  <mail link="albeiro@gentoo.pl">Michał Purzyński</mail>
</author>
<author title="Redaktor">
  <mail link="kang@gentoo.org">Guillaume Destuynder</mail>
</author>  

<abstract>
Krótkie omówienie RSBAC, czyli mechanizmu kontroli dostępu.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.2</version> 
<date>2005-10-11</date>

<chapter>
<title>Kluczowe cechy</title>

<section>
<body>

<ul>
  <li>
    Rozszerzenie mechanizmu bezpieczeństwa jądra na zasadach Free Open Source (GPL)
  </li>
  <li>Niezależność od rządów i wielkich firm</li>
  <li>
    Kilka dobrze znanych modeli bezpieczeństwa, włączając w to MAC, ACL i RC
  </li>
  <li>
    Kontrola dostępu sieciowego na poziomie poszczególnych programów i
    użytkowników
  </li>
  <li>możliwość zastosowania dowolnej kombinacji modeli</li>
  <li>
    Łatwa rozszerzalność: piszemy własny model do wykorzystania w trakcie działania
  </li>
  <li>Wsparcie dla wszystkich bieżących jąder</li>
  <li>Stabilność dla produkcyjnego użycia</li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Czym jest RSBAC?</title>
<section>
<body>

<p>
RSBAC jest elastycznym, potężnym i szybkim systemem kontroli dostępu z otwartym
kodem źródłowym dla obecnych jąder Linuksa. Wersja stabilna wykorzystywana jest
w warunkach produkcyjnych od stycznia 2000 (ver. 1.0.9a). Cały proces
rozwijania został przeprowadzony niezależnie i nie wykorzystany przy tym
dostępnych implementacji systemów kontroli dostępu.
</p>

<p>
Standardowy pakiet zawiera zbiór modeli kontroli dostępu takich jak MAC, RC,
ACL (opis poniżej). Co więcej, udogodnienie w postaci możliwości rejestracji
modułu w trakcie działania systemu (REG) ułatwia zaimplementowanie własnego
modelu kontroli dostępu jako modułu jądra i załadowanie go w trakcie działania
systemu. 
</p>

<p>
RSBAC oparte jest na pomyśle <uri link="http://www.acsac.org/secshelf/book001/09.pdf">Generalized 
Framework for Access Control (GFAC)</uri> autorstwa Abramsa i LaPaduli.
Wszystkie wywołania systemowe związane z bezpieczeństwem są rozszerzone przez
kod egzekwujący bezpieczeństwo. Ten kod wywołuje centralny komponent decyzyjny,
który z kolei wywołuje wszystkie aktywne moduły decyzyjne i na podstawie
poszczególnych wyników generuje łączną decyzję. Następnie ta decyzja jest
wykorzystywana przez mechanizm rozszerzający wywołania systemowe.
</p>

<p>
Decyzje podejmowane są na podstawie rodzaju dostępu (typu żądania), obiektu
docelowego i wartości atrybutów związanych z podmiotem wywołującym oraz obiektem
docelowym. Dodatkowe niezależne atrybuty mogą być wykorzystane przez własne
moduły, np. moduł poufności (<uri link="#doc_chap3_sect4">PM</uri>). Wszystkie
atrybuty przechowywane są w pełni zabezpieczonym katalogu, jednym dla każdego
zamontowanego urządzenia. Dlatego zmiany atrybutów wymagają specjalnych wywołań 
systemowych.
</p>

<p>
Wszystkie rodzaje dostępu sieciowego mogą być kontrolowane osobno dla wszystkich 
użytkowników i programów. Daje to pełną kontrolę nad ich sieciowym zachowaniem i 
sprawia, że łatwiej jest wykryć i zapobiec niechciane próby dostępu sieciowego. 
</p>

<p>
Jako że wszystkie rodzaje decyzji o przyznaniu dostępu bazowane są na ogólnych
regułach decyzyjnych dla żądań, to wiele różnych polityk bezpieczeństwa może
zostać zaimplementowanych jako moduły decyzyjne. Pomijając wbudowane modele
pokazane poniżej, rejestracja modułów (REG) pozwala na na dodanie w trakcie
działania systemu nowych, własnych modułów decyzyjnych.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Zaimplementowane modele</title>
<section>
<body>

<p>
W wersji 1.2.5 RSBAC dostępne są poniższe moduły. Należy zauważyć, że wszystkie
są opcjonalne.
</p>

</body>
</section>

<section>
<title>MAC</title>
<body>

<p>
Bell-LaPadula's Mandatory Access Control - obowiązkowa kontrola dostępu
</p>

</body>
</section>
<section>
<title>UM</title>
<body>

<p>
Zarządzanie użytkownikami (User Managerment) w RSBAC jest oparte o jądro i
uzupełnia lub zupełnie zastępuje podsystem linuksowy. Administracja
użytkownikami jest wymuszona przez szczegółowość i elastyczność.
</p>

</body>
</section>
<section>
<title>PM</title>
<body>

<p>
Model poufności (Privacy Model). Model poufności autorstwa <uri
link="http://www.cs.kau.se/~simone/">Simone Fischer-Huebner</uri> w pierwszej
implementacji. Publikacja z konferencji National Infomramtion Systems Security
(NISSC 98) <uri link="http://rsbac.org/doc/media/niss98.php">dotycząca
implementacji PM</uri> dostępna jest online.
</p>

</body>
</section>
<section>
<title>Dazuko</title>
<body>

<p>
Tak naprawdę nie jest to model kontroli dostępu, ale raczej mechanizm ochrony
systemu przed złośliwym oprogramowaniem. Może zapobiec uruchomieniu i wczytaniu
zainfekowanych plików.
</p>

</body>
</section>
<section>
<title>FF</title>
<body>

<p>
Flagi plikowe (File Flag). Dostarcza i wykorzystuje flagi dla katalogów i
plików. Obecnie execute_only (pliki), read_only (pliki i katalogi), search_only
(katalogi), secure_delete (pliki), no_execute (pliki), add_inherited (pliki i
katalogi), no_rename_or_delete (pliki i katalogi, bez dziedziczenia) oraz
append_only (pliki i katalogi). Flagi plikowe mogą być modyfikowane tylko przez
inspektorów bezpieczeństwa.
</p>

</body>
</section>
<section>
<title>RC</title>
<body>

<p>
Role Compatibility (zgodność ról). Definiuje role i typy dla każdego rodzaju
obiektu (pliku, katalogu, urządzenia, ipc, scd, procesu). Zgodność ze wszystkimi
typami i innymi rolami może być ustawiona osobno dla każdej roli z żądanym
poziomem szczegółowości. Dla celów administracyjnych istnieje precyzyjne
rozdzielenie obowiązków. Przypisywane uprawnienia mogą posiadać limit czasowy.
Szczegółowa specyfikacja i projekt modelu są opisane w publikacji 
<uri link="http://rsbac.org/doc/media/rc-nordsec2002/index.html">Nordsec 2002 RC
Paper</uri>.
</p>

</body>
</section>
<section>
<title>AUTH</title>
<body>

<p>
Wymuszenie autoryzacji (Authorization enforcement). Kontroluje wszystkie żądania
zmiany właściciela dla procesów docelowych. Tylko programy/procesy z ogólnym
pozwoleniem na setuid i te posiadające capability dla zmiany ID użytkownika
docelowego procesu, mogą to robić. Capabilities mogą być kontrolowane przez inne
procesy/programy, np. demony uwierzytelniające. 
</p>

</body>
</section>
<section>
<title>ACL</title>
<body>

<p>
Listy kontroli dostępu (Access Control Lists). Dla każdego obiektu istnieje
lista kontroli dostępu, definiująca które podmioty i z jakimi prawami mogą
odwoływać się do obiektu. Podmiotami mogą być użytkownicy, role RC oraz grupy
ACL. Obiekty grupowane są na podstawie typu, lecz mają osobne ACLe. Jeśli dla
podmiotu odwołującego się do obiektu nie istnieje wpis ACL, to prawa
dziedziczone są z obiektów nadrzędnych przy uwzględnieniu maski dziedziczenia
(inheritance mask). Prawa bezpośrednie (użytkownika) i pośrednie (role, grupy)
są łączone.  Dla każdego typu obiektu istnieje domyślny ACL na szczycie
normalnej hierarchii. Zarządzani grupami zostało dodane w wersji 1.0.9a. Nadane
uprawnienia i przynależność do grup mogą posiadać ograniczenia czasowe.
</p>

</body>
</section>
<section>
<title>CAP</title>
<body>

<p>
Linux Capabilities. Dla wszystkich użytkowników i programów można zdefiniować 
minimalny i maksymalny zbiór możliwości ("zbiór specjalnych uprawnień 
użytkownika root"). Pozwala to na np. uruchamianie serwerów z poziomu zwykłego 
użytkownika lub ograniczenia, w standardowy dla Linuksa sposób, uprawnień 
programów działających z użytkownika root.
</p>

</body>
</section>

<section>
<title>JAIL</title>
<body>

<p>
Więzienie dla procesów (process jails). Moduł dostarcza nowego wywołania 
systemowego rsbac_jail, które jest po prostu nadzbiorem znanego z FreeBSD
wywołania systemowego jail. Opakowuje wywołujący proces i wszystkie podprocesy
w środowisku chroot z ustalonym adresem IP i wieloma innymi ograniczeniami.
</p>

</body>
</section>

<section>
<title>RES</title>
<body>

<p>
Linux Resources. Dla wszystkich użytkowników i programów można zdefiniować 
minimalny i maksymalny zbiór zasobów procesów (np. rozmiar pamięci, liczba 
otwartych plików, liczba procesów dla użytkownika). Wewnętrznie te ustawienia 
stosowane są do standardowych linuksowych flag dotyczących zasobów.
</p>

</body>
</section>
<section>
<body>

<p>
Wszystkie moduły decyzyjne są szczegółowo opisane na stronie z dokumentacją dla
modułów.
</p>

<p>
Głównym celem projektu RSBAC było osiągnięcie (przestarzałego) poziomu B1 z
Orange Book (TCSEC). 
</p>

</body>
</section>
</chapter>

</guide>
