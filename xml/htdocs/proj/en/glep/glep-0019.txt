GLEP: 19
Title: Gentoo Stable Portage Tree 
Version: $Revision: 1.2 $
Last-Modified: $Date: 2004/01/27 01:55:37 $
Author: Kurt Lieber <klieber@gentoo.org> 
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 26-Jan-2004
Post-History: 26-Jan-2004


Abstract
========

This GLEP is intended to propose a series of changes to the Portage tree that
are necessary to facilitate the use of Gentoo in areas where stability and
predictability are of paramount importance, including servers in enterprise
environments, mission critical workstations and other such installations.

The proposed solution involves creating a separate tree in Portage that is
updated far less often than the regular tree.  Outside of periodic updates,
this tree would only be updated with critical bugfixes and security patches.

Motivation
==========

Enterprise customers typically value stability and a predictable upgrade path
over having the latest packages or features available to them.  Historically,
Gentoo Linux has been unable to provide such an environment due to the dynamic
nature of the Portage tree.

Specification
=============

The Gentoo Infrastructure team will need to provide an additional Portage tree
on our rsync mirroring system.  This new tree will house the ebuilds
associated with the stable tree.  It also impacts all Gentoo developers
responsible for creating and updating ebuilds as they will be expected to
integrate the tagging of ebuilds for the stable tree into their normal
development process, both for the quarterly release cycles as well as
off-cycle bug and security fixes.

The Gentoo Documentation team will also be affected as they will be
responsible for updating installation documents to take these new features
into account.

Rationale
=========

A basic outline of various ways of adding a "stable" tree to Portage was
discussed in the gentoo managers meeting on 26-Jan-04.  Consensus seemed to be
reached that such a solution was needed and that branching the gentoo-x86
repository was the appropriate way to accomplish this.  The largest area of
disagreement surrounded how specific ebuilds should be targeted for inclusion
in the stable tree.

One suggested solution was a simple branch of the CVS tree and having
developers work in two separate branches; one for the stable tree and
another for the traditional tree.  However, it was felt this would prove too
cumbersome in practice.

Another suggestion was to have a small group of dedicated gentoo-server
developers responsible for generating the contents of the stable tree, which
would provide more control and quality assurance over the ebuilds added to the
stable tree.  While this might prove effective for a small number of ebuilds,
it is quite likely that this model would not scale enough to allow for a large
number of ebuilds in the stable tree and, over time, the project would become
resource constrained and unable to meed future deadlines.  

The suggestion that seemed to get the most traction was the creation of a new
"stable" keyword which would be added to appropriate ebuilds.  The use of
"stable" would signify ebuilds that are ready for production in the stable
tree whils "~stable" would be reserved for ebuilds which may be appropriate
for the stable tree, but may require further testing before being deemed
"ready for production". Off-cycle bug fixes and/or security updates may be
examples of ebuilds that require the ~server tag. 

Implementation
==============

A new, stable tree will be created by scanning for the 'server' and '~server'
keywords in the ebuilds and pulling those ebuilds and associated files into a
separate branch of CVS.  The stable tree should have the following features:

*  Updated quarterly.  Frozen during other times except for security/bug fixes
*  All ebuilds should remain in the tree for a minimum of one year to ensure
   that administrators will know how often their servers need to be upgraded

As mentioned above, the "stable" tree will be updated quarterly, ideally in
unison with the release schedule of the main Gentoo branch.  This tree will be
untouched outside of this update schedule except in the following cases:

*  Security fixes and patches which result in a GLSA
*  Bug fixes for bugs ranked as 'maj' or above (may be overridden at the
   discretion of the package maintainer.)

In both cases, the maintainer of the package will be responsible for ensuring
these patches are properly committed to the stable tree out of cycle.

Backwards Compatibility
=======================

All features proposed here are new additions to existing processes and
features.  There should be no impact on existing features and functionality.


Copyright
=========

This document is licensed under the Creative Commons - Attribution / Share
Alike license. (http://creativecommons.org/licenses/by-sa/1.0)
