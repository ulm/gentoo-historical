<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/eselect/dev-guide.xml,v 1.8 2009/09/20 09:31:19 ulm Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/proj/en/eselect/dev-guide.xml">
<title>eselect Developer Reference</title>

<author title="Author">
  <mail link="ciaranm@gentoo.org">Ciaran McCreesh</mail>
</author>
<author title="Author">
  <mail link="kugelfang@gentoo.org">Danny van Dyk</mail>
</author>
<author title="Author">
  <mail link="ulm@gentoo.org">Ulrich Müller</mail>
</author>
<author title="Editor">
  <mail link="fox2mike@gentoo.org">Shyam Mani</mail>
</author>

<abstract>
This document is a reference for people who want to develop the eselect tool.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.2.1</version>
<date>2009-09-20</date>

<chapter>
<title>Introduction</title>

<section>
<title>About eselect</title>
<body>

<p>
  eselect is a framework for simplyfying and introducing consistency to the
  various <c>foo-config</c> and <c>blah-update</c> tools. It is an option for
  developers who don't like reinventing the wheel, not a mandatory tool.
</p>

<note>
  This document assumes some basic familiarity with eselect. Please read then
  <uri link="user-guide.xml">eselect User Guide</uri> in case you do not know
  the basics of eselect.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Getting Started</title>

<section>
<title>Introduction</title>
<body>

<p>
  When porting your application to use the eselect framework, you will
  generally need to create a module. Often this can be heavily based upon an
  existing module, so check to see whether there is something that does almost
  what you need first (symlink handling is a good example of something that
  can be copied rather than reinvented).
</p>

</body>
</section>

<section>
<title>A Simple Module</title>
<body>

<p>
  It's easiest to illustrate by example. Here's a simple module, named
  <c>cow.eselect</c>. It has two actions, <c>moo</c> and <c>think</c>, plus
  the standard <c>help</c>, <c>usage</c> and <c>version</c> actions, and is
  installed to <path>$(datadir)/eselect/modules/</path>.
</p>

<pre caption="cow.eselect code">
# Copyright 1999-2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# &#36;Id: &#36;

DESCRIPTION="Do things to a cow"
MAINTAINER="foo@gentoo.org"
SVN_DATE='&#36;Date: &#36;'
VERSION=$(svn_date_to_version "${SVN_DATE}")

### moo action

describe_moo() {
    echo "Say moo"
}

describe_moo_parameters() {
    echo "&lt;text&gt;"
}

describe_moo_options() {
    echo "text : Text to display (optional)"
    echo "--dead : Use a dead cow"
    echo "--borg : Use a borged cow"
}


do_moo() {
    local params=
    while [[ ${1#--} != ${1} ]] ; do
        if [[ "--dead" == ${1} ]] ; then
            shift
            params="${params} -d"
        elif [[ "--borg" == "${1}" ]] ; then
            shift
            params="${params} -b"
        elif [[ "--" == "${1}" ]] ; then
            break
        else
            die -q "Unknown parameter ${1}"
        fi
    done

    echo "${@:-I am a cow}" | cowsay ${params}
}

### think action

describe_think() {
    echo "Show a pensive cow"
}

describe_think_parameters() {
    echo "&lt;text&gt;"
}

describe_think_options() {
    echo "text : Text to display"
    echo "--sheep : Use a sheep rather than a cow"
}

do_think() {
    local params=
    while [[ ${1#--} != ${1} ]] ; do
        if [[ "--sheep" == ${1} ]] ; then
            shift
            params="${params} -f sheep"
        elif [[ "--" == "${1}" ]] ; then
            break
        else
            die -q "Unknown parameter ${1}"
        fi
    done

    echo "${@:-Am I a cow?}" | cowthink ${params}
}
</pre>

<p>
  As you can see, the format is fairly similar to that of an ebuild – it is
  a bash script which is run in a special environment. This is intentional.
  There are DESCRIPTION and VERSION variables globally which are used by
  <c>eselect</c> and some of the default action handlers, and a series of
  functions.
</p>

<warn>
  In ebuilds, global scope code can cause problems. In eselect modules,
  global scope code is <e>absolutely forbidden</e>. Your module <e>will</e>
  be sourced for tasks other than running your actions. For example, if
  <c>eselect modules list</c> is executed, your module will be sourced to
  obtain the description. Any code being run here would be a very bad thing.
</warn>

<p>
  Unlike ebuilds, the function names are not fixed. Any function whose name
  starts with <c>do_</c> is considered to be an action implementation.
  It is conventional to have a <c>describe_</c> function for every <c>do_</c>
  function that gives a short description of the function – this is used for
  <c>eselect modulename help</c>, for example.
  The <c>describe_actions_options</c> and <c>describe_action_parameters</c>
  functions are optional.
</p>

<note>
  If eselect is invoked as <c>cow-config</c> or <c>cow-update</c> (for
  example, via a symlink), it will automatically select the cow module.
</note>

</body>
</section>

<section>
<title>Standard Action Names</title>
<body>

<p>
  The following list contains suggested allowed names for actions. If there is
  no suitable name on the list for your task, it is best to ask for the list
  to be updated – for consistency, it would be nice to have a standardised
  list of action names. (The cow module, being a silly demonstration module,
  is exempt.)
</p>

<ul>
  <li><c>help</c> – Display a help message. Automatic.</li>
  <li><c>usage</c> – Display a usage message. Automatic.</li>
  <li><c>version</c> – Display the current version. Automatic.</li>
  <li>
    <c>show</c> – Used to display the current provider of a symlink, or the
    currently installed module, or the current status.
  </li>
  <li>
    <c>list</c> – Used to display all available providers of a symlink, or all
    available modules.
  </li>
  <li><c>set</c> – Used to set a new provider or a symlink.</li>
  <li><c>enable</c> – Used to enable an optional feature.</li>
  <li><c>disable</c> – Used to disable an optional feature.</li>
  <li><c>scan</c> – Read information off the current filesystem.</li>
  <li>
    <c>update</c> – Used to automatically select a new provider for a symlink
    (as opposed to <c>set</c>, which generally takes a parameter manually
    selecting the provider) or to gather system information that is vital to
    further actions.
  </li>
</ul>

<note>
  You can override the <c>help</c>, <c>usage</c> and <c>version</c> actions.
  They are provided by default by <path>lib/default.eselect</path>. You should
  only do this with a good reason. Removing them is not a good idea,
  <c>eselect</c> assumes that they exist.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Utility Functions</title>

<section>
<title>Introduction</title>
<body>

<p>
  eselect provides many utility functions. These are useful for standardised
  output formatting. Where possible, these should be used, especially for
  output. If a standard function is not available for the output format
  required, consider implementing one.
</p>

<p>
  The following categories of function are available by default:
</p>

<ul>
  <li>General Utility Functions</li>
  <li>Output Utility Functions</li>
  <li>Manipulation Functions</li>
  <li>Path-Manipulation Functions</li>
  <li>Configuration Functions</li>
  <li>Multilib Functions</li>
  <li>Package-Manager Functions</li>
  <li>Test Functions</li>
</ul>

<p>
  To use any of the other functions, you have to first <c>inherit</c> the
  corresponding library file.
</p>

</body>
</section>

<section>
<title>General Utility Functions</title>
<body>

<p>
  These are implemented in <path>libs/core.bash</path>.
</p>

<dl>
  <dt>die</dt>
  <dd>
    The <c>die</c> function (which, unlike its ebuild counterpart, <e>can</e>
    be called from within subshells) is used to exit with a fatal error.
    It should be invoked as <c>die -q "Message to display"</c>. If the
    <c>-q</c> is not provided, a stacktrace will be displayed – this should
    never happen because of user input error, only abnormal conditions.
  </dd>

  <dt>check_do</dt>
  <dd>
    The <c>check_do</c> utility function checks that the first parameter is
    a function, and then calls it with any additional parameters as its
    arguments. If the function does not exist, <c>die</c> is called. Again,
    this is mostly internal.
  </dd>

  <dt>do_action</dt>
  <dd>
    The <c>do_action</c> utility function is the correct way to call a utility
    function which is defined in another module. The first parameter is the
    action, additional parameters are passed as arguments.
  </dd>

  <dt>inherit</dt>
  <dd>
    The <c>inherit</c> function sources eselect library files based on their
    name. In order to source the file <path>libs/foo.bash</path> you have to
    add <c>inherit foo</c> in global scope of your module.
  </dd>

  <dt>sed</dt>
  <dd>
    The <c>sed</c> function is a wrapper around GNU <c>sed</c>.
  </dd>
</dl>

</body>
</section>

<section>
<title>Output Utility Functions</title>
<body>

<p>
  These are implemented in <path>libs/output.bash</path>
</p>

<dl>
  <dt>write_error_msg</dt>
  <dd>
    The <c>write_error_msg</c> function displays an error message in the
    standard format. It is similar to <c>eerror</c>.
  </dd>

  <dt>write_warning_msg</dt>
  <dd>
    The <c>write_warning_msg</c> function displays a warning message in the
    standard format. It is similar to <c>ewarn</c>.
  </dd>

  <dt>The write_list_ functions</dt>
  <dd>
    To display a list, the <c>write_list_</c> family of functions should be
    used. Lists should always start with a header, which can be displayed
    using <c>write_list_start The Header</c>.
  </dd>

  <dt>write_numbered_list_entry</dt>
  <dd>
    To display a numbered list, the <c>write_numbered_list_entry</c> function
    should be used for each item. The first parameter is the list item number,
    the second is the list item text (remember to quote this).
  </dd>

  <dt>write_kv_list_entry</dt>
  <dd>
    To display a keyword/value list, the <c>write_kv_list_entry</c> function
    should be used. The first parameter is the key, the second the value.
  </dd>

  <dt>write_numbered_list</dt>
  <dd>
    The <c>write_numbered_list</c> function is a wrapper around
    <c>write_numbered_list_entry</c> that handles the numbering automatically.
    Each parameter passed is displayed as a numbered list item, the first with
    index 1, the second with index 2 and so on. If <c>-p</c> is passed as the
    first argument to these functions, <e>plain</e> highlighting is used.
  </dd>

  <dt>highlight</dt>
  <dd>
    The <c>highlight</c> utility function can be used to emphasise some text
    which is to be displayed by any of the above functions. A typical
    invocation might look like the in the
    <uri link="#doc_chap3_pre1">code listing</uri> shown below.
  </dd>

  <dt>highlight_warning</dt>
  <dd>
    The <c>highlight_warning</c> function is like <c>highlight</c>, but for
    warnings. It displays the text in question in red.
  </dd>

  <dt>space</dt>
  <dd>
    The <c>space</c> utility function takes a single integer parameter.
    It displays that many space characters.
  </dd>
</dl>

<pre caption="highlight example">
write_list_start "This is $(highlight list) example"
write_kv_list_entry "First" "This is the first"
write_kv_list_entry "$(highlight Second)" "This is the $(highlight second) entry"
write_kv_list_entry "Third" "$(highlight The end)"
</pre>

</body>
</section>

<section>
<title>Test Functions</title>
<body>

<p>
  These are implemented in <path>libs/tests.bash</path>.
</p>

<dl>
  <dt>has</dt>
  <dd>
    The <c>has</c> utility function is like Portage's <c>hasq</c>. It returns
    true if and only if the first parameter is equal to any of the remaining
    parameters.
  </dd>

  <dt>is_function</dt>
  <dd>
    The <c>is_function</c> utility function returns true if and only if its
    parameter exists and is a function. This is mostly used internally, but
    may have some use for modules.
  </dd>

  <dt>is_number</dt>
  <dd>
    Returns true if and only if the parameter is a positive whole number.
  </dd>
</dl>

</body>
</section>

<section>
<title>Path-Manipulation Functions</title>
<body>

<p>
  These are implemented in <path>libs/path-manipulation</path>.
</p>

<dl>
  <dt>basename</dt>
  <dd>
    The <c>basename</c> function is a transparent bash-only replacement for
    the external <c>basename</c> application.
  </dd>

  <dt>dirname</dt>
  <dd>
    The <c>dirname</c> function is a transparent bash-only replacement for
    the external <c>dirname</c> application.
  </dd>

  <dt>canonicalise</dt>
  <dd>
    The <c>canonicalise</c> function is a wrapper to either GNU
    <c>readlink -f</c> or <c>realpath</c>.
  </dd>
</dl>

</body>
</section>

<section>
<title>Manipulation Functions</title>
<body>

<p>
  These are implemented in <path>libs/manip.bash</path>.
</p>

<dl>
  <dt>svn_date_to_version</dt>
  <dd>
    The <c>svn_date_to_version</c> function can be used instead of manually
    keeping track of VERSION. It is safe to use in global scope. The canonical
    usage is as shown in the <uri link="#doc_chap3_pre2">code listing</uri>
    below.
  </dd>
</dl>

<pre caption="svn_date_to_version usage">
SVN_DATE='$Date: 2009/09/20 09:31:19 $'
VERSION=$(svn_date_to_version "${SVN_DATE}" )
<comment>(Now turn on the SVN keyword expansion for the module)</comment>
svn propset svn:keywords "Date" modules/foo.eselect
</pre>

</body>
</section>

<section>
<title>Configuration Functions</title>
<body>

<p>
  These are implemented in <path>libs/config.bash</path>.
</p>

<dl>
  <dt>store_config</dt>
  <dd>
    The <c>store_config</c> function saves a key/value pair in a given
    configuration file which is passed as first argument. This file is
    a bash script consisting only of key/value pairs and should not be
    altered manually. Comments in the file will be deleted each time
    <c>store_config</c> is called. The function is invoked as
    <c>store_config filename key value</c>.
  </dd>

  <dt>load_config</dt>
  <dd>
    The <c>load_config</c> function loads a stored value from the module's
    configuration file. It is invoked as <c>load_config filename key</c> and
    prints the associated value.
  </dd>

  <dt>append_config</dt>
  <dd>
    The <c>append_config</c> function adds an item to an already
    stored value in the modules configuration file. It uses
    <c>load_config</c>/<c>store_config</c> internally and should be
    invoked as <c>append_config filename key item</c>. Note that the
    item will not be appended if it occurs in the key's value already.
  </dd>
</dl>

</body>
</section>

<section>
<title>Multilib Functions</title>
<body>

<p>
  These are implemented in <path>libs/multilib.bash</path>.
</p>

<dl>
  <dt>list_libdirs</dt>
  <dd>
    The <c>list_libdirs</c> function returns a set of valid libdirs for the
    used architecture. By default it uses <path>/etc/ld.so.conf</path> to
    obtain all the valid libdirs. If this fails due to a missing or broken
    file, this function uses <c>uname</c> to determine the architecture.
  </dd>
</dl>

</body>
</section>

<section>
<title>Package-Manager Functions</title>
<body>

<p>
  These are implemented in <path>libs/package-manager.bash</path>.
</p>

<dl>
  <dt>arch</dt>
  <dd>
    The <c>arch</c> function returns the correct value of ${ARCH} for the
    current system. If the package manager cannot provide this information,
    <c>arch</c> falls back to a <c>uname -m</c> and <c>uname -s</c> based
    lookup-table.
  </dd>

  <dt>envvar</dt>
  <dd>
    The <c>envvar</c> function retrieves the contents of a
    configuration-environment variable for a given package. The syntax
    is <c>envvar ${package-name} ${var-name}</c>.
  </dd>

  <dt>best_version</dt>
  <dd>
    The <c>best_version</c> function returns the highest available version for
    a given package dep atom.
  </dd>

  <dt>has_version</dt>
  <dd>
    The <c>has_version</c> function checks whether a given versioned package
    dep atom is installed.
  </dd>

  <dt>get_repositories</dt>
  <dd>
    The <c>get_repositories</c> function returns a list of repositories known
    to the package manager.
  </dd>

  <dt>get_repo_news_dir</dt>
  <dd>
    The <c>get_repo_news_dir</c> function returns the directory where to find
    GLEP 42 news items for a given repository.
  </dd>
</dl>

</body>
</section>
</chapter>
</guide>
