<?xml version='1.0' encoding="utf-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/en/hardened/selinux-quickstart.xml">
<title>Gentoo Linux SELinux Quick Start Guide</title>
<author title="Author">
  <mail link="pebenito@gentoo.org">Chris PeBenito</mail>
</author>
<author title="Editor">
  <mail link="method@gentoo.org">Joshua Brindle</mail>
</author>
<abstract>
This will provide instructions for getting an SELinux installation running.
</abstract>
<version>1.0</version>
<date>16 June 2003</date>

<chapter>
<title>Installing SELinux Quick Start Guide</title>
<section><title>Installing SELinux from Stage 1</title>
<body>

<warn>SELinux is currently only developed on x86.</warn>

<note>This is not intended to be a full guide.  It will eventually be
replaced with more complete documentation.</note>


<p>Follow the <uri link="http://www.gentoo.org/doc/en/gentoo-x86-install.xml"> 
main installation guide</uri>, and use the standard LiveCD
and stage 1 of mainline Gentoo.  After you have done "emerge sync", then
switch your profile to the SELinux profile:</p>

<pre caption="Change profile">
# rm -f /etc/make.profile
# ln -sf /usr/portage/profiles/selinux-x86-1.4 /etc/make.profile
</pre>

<p>Continue with the main installation guide and do the bootstrap.  An
appropriate kernel is required before doing "emerge system".
Emerge selinux-sources or hardened-sources; these are the only kernels that contain
the linux security module patch and SELinux security module.  Selinux-sources
only contains the linux security module and selinux support.  Hardened-sources
contains the linux security module, selinux support, and additional
performance and security patches.</p>

<pre caption="Merge an appropriate kernel">
<comment>Do only one of the next two lines:</comment>
# emerge selinux-sources
<comment>or</comment>
# emerge hardened-sources
</pre>

<p>Now continue with the installation guide and do "emerge system".</p>

<impo>You must add <i>ACCEPT_KEYWORDS="~x86"</i> to make.conf, as not all
SELinux packages are marked stable yet.</impo>

<p>When it is time to compile the kernel, it  must be compiled with security
module support, SELinux support, devfs and devpts.  Refer to the main
installation guide for futher kernel options.</p>

<pre caption="Location and required options under menuconfig">
<comment>Under "Code maturity level options"</comment>
[*] Prompt for development and/or incomplete code/drivers

<comment>Under "Security options"</comment>
[*] Enable different security models
[ ] Socket and Networking Security Hooks
&lt;*&gt; Capabilities Support
[*] NSA SELinux Support
[*]   NSA SELinux Development Support
[ ]   NSA SELinux MLS policy (EXPERIMENTAL)

<comment>Under "File systems"</comment>
[*] /dev file system support (EXPERIMENTAL)
[*]   Automatically mount at boot
[ ]   Debug devfs
[*] /dev/pts file system for Unix98 PTYs
</pre>

<p>Now compile and install the kernel and modules as described in the
installation guide.  When choosing a cron daemon, you must use vcron.
Right now vcron is the only cron patched for SELinux. Continue with the
installation guide.  When configuring /etc/fstab, devpts must also be
enabled to mount at boot.  Add this to /etc/fstab:</p>
<pre caption="devpts entry in /etc/fstab">
none	/dev/pts	devpts	gid=5,mode=620	0 0
</pre>

<p>Before exiting the chroot and rebooting at the end of the install guide,
compile and install policy, and label filesystems.</p>

<pre caption="Install policy and label filesystems">
# cd /etc/security/selinux/src/policy
# make install
# make file_contexts/file_contexts
# setfiles file_contexts/file_contexts -r / /
</pre>
<p>Reboot using the new SELinux kernel.  Relabel again to ensure all files
are labeled correctly (some files may have been created during shutdown and
reboot):</p>
<pre caption="Relabel filesystems">
# cd /etc/security/selinux/src/policy
# make relabel
</pre>
</body>
</section>
</chapter>
<chapter><title>Converting to SELinux Quick Start Guide</title>
<section><title>Converting a Preexisting Gentoo Installation</title>
<body>

<p>First switch your profile to the SELinux profile:</p>

<pre caption="Switch profiles">
# rm -f /etc/make.profile
# ln -sf /usr/portage/profiles/selinux-x86-1.4 /etc/make.profile
</pre>

<p>Then merge an appropriate kernel.  Emerge selinux-sources or
hardened-sources; these are the only kernels that contain
the linux security module patch and SELinux security module.  Selinux-sources
only contains the linux security module and selinux support.  Hardened-sources
contains the linux security module, selinux support, and additional
performance and security patches.</p>

<pre caption="Merge an appropriate kernel">
<comment>Do only one of the next two lines:</comment>
# emerge selinux-sources
<comment>or</comment>
# emerge hardened-sources

<comment>Ensure that /usr/src/linux symbolic link points to
the newly merged kernel (selinux-sources-2.4.20-r5 for example)</comment>
# rm -f /usr/src/linux
# ln -s /usr/src/linux-2.4.20-selinux-r5 /usr/src/linux
</pre>

<p>The kernel must  be compiled with security
module support, SELinux support, devfs and devpts.  Refer to the main
installation guide for futher kernel options.</p>

<pre caption="Location and required options under menuconfig">
<comment>Under "Code maturity level options"</comment>
[*] Prompt for development and/or incomplete code/drivers

<comment>Under "Security options"</comment>
[*] Enable different security models
[ ] Socket and Networking Security Hooks
&lt;*&gt; Capabilities Support
[*] NSA SELinux Support
[*]   NSA SELinux Development Support
[ ]   NSA SELinux MLS policy (EXPERIMENTAL)

<comment>Under "File systems"</comment>
[*] /dev file system support (EXPERIMENTAL)
[*]   Automatically mount at boot
[ ]   Debug devfs
[*] /dev/pts file system for Unix98 PTYs
</pre>

<p>Now compile and install the kernel and modules, but do not reboot.
Devpts must also be enabled to mount at boot.  Add this to /etc/fstab:</p>
<pre caption="Fstab settings for devpts">
none	/dev/pts	devpts	gid=5,mode=620	0 0
</pre>

<p>Merge the libraries, utilities and base-policy.  The /usr/src/linux
symbolic link must point to the selinux-sources or hardened-sources directory!</p>

<pre caption="Merge base SELinux packages"># emerge selinux-small</pre>

<p>Merge SELinux-patched packages:</p>
<impo>You must add <i>ACCEPT_KEYWORDS="~x86"</i> to make.conf, as not all
SELinux packages are marked stable yet.</impo>

<pre># emerge coreutils findutils openssh pam-login procps psmisc tar</pre>

<p>There are other packages that have SELinux patches, but are optional.  These
should be remerged if they are already installed, so the SELinux patches are
applied:</p>
<p>app-admin/logrotate<br/>
sys-apps/stat<br/>
dev-util/strace<br/>
sys-apps/vcron (currently the only cron patched for SELinux)</p>

<p>SELinux does not use some packages that are used in mainline Gentoo:</p>

<pre caption="Remove unused packages from mainline Gentoo">
# emerge -C textutils fileutils sh-utils</pre>

<p>Compile and install policy, and label filesystems.</p>

<pre caption="Install policy and label">
# cd /etc/security/selinux/src/policy
# make install
# make relabel
</pre>
<p>Reboot using the new SELinux kernel.  Relabel again to ensure all files
are labeled correctly (some files may have been created during shutdown and
reboot)</p>
<pre caption="Relabel">
# cd /etc/security/selinux/src/policy
# make relabel
</pre>
</body>
</section>
</chapter>
<chapter><title>HowTo</title>
<section><title>Load policy into a running SELinux kernel</title>
<body>
This requires you to be in the sysadm_r role.
<pre>
# cd /etc/security/selinux/src/policy
# make load
</pre>
</body>
</section>
<section><title>Change roles</title>
<body>
This requires your user have access to the target role.  This example
is for changing to the sysadm_r role.
<pre>
# newrole -r sysadm_r
</pre>
</body>
</section>
<section><title>Specify available roles for a user</title>
<body>
<p>Modify the users file (/etc/security/selinux/src/policy/users).
For example, to allow the user 'pebenito' the ability to have roles
user_r and sysadm_r, add to the end of the file add something like:</p>

<pre>user pebenito roles { user_r sysadm_r };</pre>

<p>Then <uri link="#doc_chap3_sect1">load</uri> the policy.  If a user
doesnt have a 'user' line in the file, they will only be allowed
the user_r role.</p>
<impo>All users that are specified in the users file should at least be
allowed the user_r and/or staff_r role.  Otherwise, they will not be
able to log in remotely.</impo>
</body>
</section>
<section><title>Relabel filesystems</title>
<body>
This requires you to be in the sysadm_r role.
<pre>
# cd /etc/security/selinux/src/policy
# make relabel
</pre>
</body>
</section>
</chapter>
<chapter>
<title>FAQ/Troubleshooting</title>
<section><title>"My selinux-small compile fails with a message similar to this:"</title>
<body>
<pre>
 * Compiling checkpolicy
make -C checkpolicy LSMDIR=../../../lsm-2.4
make[1]: Entering directory
`/var/tmp/portage/selinux-small-2003011510-r3/work/selinux/module/checkpolicy'
make[1]: *** <i>No rule to make target `ebitmap.o'</i>, needed by `checkpolicy'.  Stop.
make[1]: Leaving directory
`/var/tmp/portage/selinux-small-2003011510-r3/work/selinux/module/checkpolicy'
make: *** [all] Error 2

!!! ERROR: sys-apps/selinux-small-2003011510-r3 failed.
!!! Function src_compile, Line 54, Exitcode 2
!!! <i>Checkpolicy compilation failed</i>
</pre>

<p>Ebitmap.c exists in the kernel sources.  The /usr/src/linux symbolic link must point
to the installed selinux-sources or hardened-sources.  Newer versions of selinux-small
will now check for correct kernel sources.  To fix, create a symbolic link to
the correct kernel sources (selinux-sources-2.4.20-r4 in this example):</p>

<pre>
# rm -f /usr/src/linux
# ln -sf /usr/src/linux-2.4.20-selinux-r4 /usr/src/linux</pre>
</body>
</section>
<section><title>"I can log in at the console, but not over ssh."</title>
<body>
<p>The openssh is most likely not labeled correctly, so it isnt running in the
right context.  Relabel openssh, then restart sshd.</p>
<pre>
# rlpkg openssh
# run_init /etc/init.d/sshd restart
</pre>
</body>
</section>
<section><title>"I cant 'newrole -r sysadm_r' from my user."</title>
<body>
<p>The user must be allowed to use the sysadm_r role.  <uri link="#doc_chap3_sect3">Modify</uri>
the users file to allow them to change to the target role.  Then 
<uri link="#doc_chap3_sect1">load</uri> the policy.</p>  

<p>In the default policy, some role transitions are denied, such as
user_r to sysadm_r.  If you want to allow this transition, the policy
must be changed.</p>
</body>
</section>
<section><title>"When I boot, I get an insmod denial looks like this:"</title>
<body>
<pre>avc:  denied  { <i>search</i> } for  pid=230 exe=/sbin/<i>insmod</i> path=<i>/var</i> dev=03:02 ino=163201
scontext=system_u:system_r:<i>insmod_t</i> tcontext=system_u:object_r:<i>file_t</i> tclass=<i>dir</i>
</pre>
<p>This usually happens if you have a separate /var partition.  The /var
partition probably will have the context system_u:object_r:var_t when mounted
and system_u:object_r:file_t when unmounted.  The way to fix this is to umount
the /var partition and <uri link="#doc_chap3_sect4">relabel</uri>.  Then /var
will have the correct context regardless if the /var partition is mounted
or not.</p>
</body>
</section>
<section><title>"When I boot, devfsd get a denial that looks like this:"</title>
<body>
<pre>avc:  denied  { <i>write</i> } for  pid=148 exe=/sbin/<i>devfsd</i> path=<i>/log</i> dev=00:07 ino=421
scontext=system_u:system_r:<i>devfsd_t</i> tcontext=system_u:object_r:<i>device_t</i> tclass=<i>sock_file</i>
</pre>
<p>This means that your devfsd is restoring /dev/log from the devfs save state,
and therefore it has the incorrect context.  Normally this shouldn't happen,
as /dev/log should be created by the syslog (and will have the correct context).
Newer versions of the devfsd.conf file should ignore /dev/log, and not save it.
To ennsure that your devfsd.conf is in fact ignoring /dev/log, make sure
these lines are in your devfsd.conf file (around line 42):</p>
<pre caption="Devfsd.conf contents">
DELETE          ^pt[sy]      IGNORE<i>
REGISTER        ^log         IGNORE
CHANGE          ^log         IGNORE
CREATE          ^log         IGNORE
DELETE          ^log         IGNORE</i>
REGISTER        .*           COPY    /lib/dev-state/$devname $devpath
</pre>
<p>Then, ensure that /dev/log is not in the devfs save state:</p>
<pre caption="Remove /dev/log from save state">
# rm -f /lib/dev-state/log
</pre>
</body>
</section>
</chapter>
</guide>
