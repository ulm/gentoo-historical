<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/en/hardened/etdyn-ssp.xml">

<author title="Author">
        <mail link="pappy@gentoo.org">Alexander Gabert</mail>
	</author>
	
<author title="Contributor">
	<mail link="solar@gentoo.org">solar</mail>
</author>
<author title="Editor">
	<mail link="zhen@gentoo.org">John Davis</mail>
</author>
<author title="Editor">
	<mail link="klasikahl@gentoo.org">Zack Gilburd</mail>
</author>
<abstract>
Attention: This document will soon be replaced.

This introductionary guide explains the behaviour of the hardened-gcc package according to the requirements of the PaX etdyn userland, also known as Address Space Layout Randomization.
</abstract>

<version>1.3</version>
<date>20031007</date>

<chapter>
	<title>Introduction</title>
<body>

<p>The goal of the PaX suite is the prevention of memory related security vulnerabilities.</p>

<p>Linear stack smashing attacks, formatstring overflows and return to libc style attacks cannot be prevented by effective randomization of the target ELF sections located in the virtual memory of the current process but are an extension to the well known concept of the nonexecutable stack that can only be circumvented by information leaking.</p>

<p>The attacker of such a binary will be aware of the problem that the information leaking and overwriting/modification of a randomized process can only take place in an atomic singular operation.</p>

</body>
</chapter>

<chapter>
	<title>Kernels with PaX patches</title>
<body>

<p>Given a highly integrated kernel patch like grsecurity or hardened-sources with selinux with the PaX improvements for randomization of userland binaries already present on many Gentoo systems, there should be an easy way to create or migrate a system soft, transparent and easy into an etdyn system.</p>

</body>
</chapter>

<chapter>
	<title>ET_DYN ELF executables with Propolice support in Gentoo Linux</title>
<body>

<p>On Gentoo this is accomplished by merging <i>hardened-gcc</i>: </p>

<pre caption = "Emerging hardened-gcc">
<c># emerge sys-devel/hardened-gcc</c>
</pre>
   
<p>While <i>hardened-gcc</i> serves as an umbrella package for modifications other than etdyn userland compilation too (see the propolice section of the gentoo-hardened project), it serves mainly as a trigger package to start the transparent conversion of a system into etdyn userland binaries.</p>

<p>The <i>hardened-gcc</i> package compiles two necessary object files (interp.o and crt1S.o) for the target architecture and patches the gcc specs file to support automatic transparent compilation of etdyn and propolice executables and libraries.</p>

<p>Other than the approach taken by Adamantix, this specs file is the only point where the etdyn building logic is introduced to the existing packages without changing the packages in case of proper compilation.</p>

<p>Once the gcc has been equipped with that new specs file, a package or a kernel building can only return to the conventional building behaviour when it feeds the correct CFLAGS and LDFLAGS to the build process.</p>

   <p>As an example lets try the rebuilding our chpax binary as an ET_DYN
   shared executable. We can use the file(1) command to determine if we 
   in fact we are building our executables as ET_EXEC or ET_DYN.</p> 
   
   <p>The first example here we have chpax built as an ET_DYN and the second 
   one is chpax built as an ET_EXEC.</p>

	<pre caption = "Example files">
<c># file /sbin/chpax</c>
/sbin/chpax: ELF 32-bit LSB shared object, Intel 80386, version 1 \
	(GNU/Linux), stripped

<c># file /sbin/chpax</c>
/sbin/chpax: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), for \
	GNU/Linux 2.0.0, dynamically linked (uses shared libs), stripped
</pre>

<p>The <i>hardened-gcc</i> package has been designed to easily revert back to a conventional building environment behaviour in case of problems. </p>

<p>Users can restore the original gcc specs file behaviour at any time by calling the hardened-gcc utility on the commandline.</p>

<p>Ebuilds that experience problems with the hardened-gcc automatic transparency can evaluate the existence of the hardened-gcc package on the target system and use compatibility CFLAGS to restore the original gcc behaviour during the emerge.</p>

<p>Last but not least the hardened-gcc specs file itself can be modified by developers to include further checking logic and PIC improvements like the new position independent executable generation in binutils.</p>

</body>
</chapter>

<chapter>
        <title>Necessary precautions when building a kernel with hardened-gcc</title>
<body>
<p>Make sure you add and activate the propolice patch by frogger to a kernel if you want to compile it with transparent propolice and etdyn, otherwise disable hardened-gcc temporarily during the kernel compile.</p>
<p>The specs file has modifications to honour -D__KERNEL__ but this seems to have problems with some parts of the kernel compilation where this is not found.</p>
</body>
</chapter>

<chapter>
	<title>Using distcc with hgcc</title>
	<section>
		<body>
<mail link="lisa@gentoo.org">Lisa Marie Seelye</mail> says you need the same hgcc and gcc versions on all distcc host volunteer machines.
		</body>
	</section>
</chapter>	

<chapter>      
	<title>Credits and Reference</title>
	<section>       
		<body>
			<ul><li><uri link="http://pax.grsecurity.net">PaX Homepage</uri></li></ul>
			<ul><li><uri link="http://pax.grsecurity.net/docs/index.html">PaX Documentation</uri></li></ul>
			<ul><li><uri link="http://www.research.ibm.com/trl/projects/security/ssp/">Propolice Homepage</uri></li></ul>
			<ul><li><uri link="http://www.gentoo.org/doc/en/distcc.xml">Gentoo Distcc Documentation</uri></li></ul>
			<ul><li>Collective Work.  PaX - Gentoo Wiki.</li></ul>
		</body>
	</section>
</chapter>

</guide>
