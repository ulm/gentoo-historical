<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/hardened/integrity/docs/evm-guide.xml,v 1.1 2012/12/29 21:31:17 swift Exp $ -->

<guide lang="en">
<title>Using Extended Verification Module in Gentoo</title>

<author title="Author">
  <mail link="swift"/>
</author>

<abstract>
With EVM, the Linux kernel will validate security-sensitive extended attributes
before allowing operations on the files. In this guide, we will talk you through
setting up EVM on Gentoo as well as how to configure it to your needs.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/3.0 -->
<license version="3.0" />

<version>1</version>
<date>2012-12-29</date>

<chapter>
<title>Purpose of EVM</title>
<section>
<title>Introduction</title>
<body>

<warn>
Using EVM on your system is currently only recommended for development purposes.
</warn>

<p>
The Linux kernel offers a security interface that allows new technologies to
properly "hook in" the Linux kernel and extend its capabilities with more
security-related features. This interface is called LSM (Linux Security Modules)
and is used by technologies such as SELinux, SMACK and IMA as well as many
others.
</p>

<p>
Many of these security technologies use extended attributes for storing
information about the state of resources on the system. SELinux for instance
uses the <path>security.selinux</path> extended attribute to store the SELinux
security context of a file, directory or other resource. The Linux Integrity
Measurement Architecture uses the <path>security.ima</path> extended attribute
to store a valid hash of the file in order to detect and prevent offline
tampering of files.
</p>

<p>
But if all this information is stored in extended attributes, then offline
tampering of files (and guest images) allows an attacker to circumvent security
rules: he can change the label of a file he wants access to when the guest is
operational (<path>/etc/shadow</path> is an obvious example to this, say making
it <c>etc_t</c>). Once done, and the guest boots, none of the technologies in
place will detect that the extended attribute has been tampered with: SELinux
reads the context and treats the file as a regular <path>/etc</path> file. And
IMA doesn't prevent this either since the file itself has not been tampered
with.
</p>

<p>
Enter EVM, the <e>Extended Verification Module</e>. With EVM, the security
sensitive extended attributes are verified against offline tampering. To
accomplish this, EVM creates a cryptographic hash or a signature of the
extended attributes made with a key loaded at boot time. This hash/signature
is validated every time the extended attributes of a resource are consulted and
the action is only allowed if the hash or signature checks out. A malicious
person will need access to this key in order to tamper with the extended
attributes (and if IMA is enabled, to tamper with the files). Although the key
needs to be loaded at boot time, a couple of mechanisms exist to seal it away:
</p>

<ul>
  <li>
    Use TPM to seal the key; this creates what is called a <e>trusted key</e> as
    it cannot be found (unencrypted) on the file system at any time
  </li>
  <li>
    Use encryption with offloaded passphraze protection for the keys, and ask
    for the passphraze early at boot time. With this we can use regular
    <e>user keys</e> (the terminology will be used later).
  </li>
</ul>

<p>
Of course, using entire file system encryption thwarts the need for EVM and IMA,
but yields additional overhead that not all users can endure. And this is where
EVM and IMA can be used.
</p>

</body>
</section>
<section>
<title>Hash or signature?</title>
<body>

<p>
EVM supports both a hash or a signature, similar to IMA (which uses a checksum
or a signature). The hash is a cryptographic hash based on an encryption key
loaded in at boot time and only usable by the EVM subsystem (when using a
trusted key) or by root-owned processes with the proper privileges (in which
case you can use SELinux to properly restrict access further).
</p>

<p>
The signature, as with IMA, allows the administrator to digitally sign security
extended attributes that are not meant to be changed often (immutable
attributes). The public key that is used to verify the signatures is loaded on
the <path>_evm</path> keyring while the private key can remain offline.
</p>

</body>
</section>
<section>
<title>The Big Fat Warnings</title>
<body>

<p>
Using EVM on your system is currently only recommended for development purposes.
Gentoo Hardened is working on integrating EVM properly, so please be aware
that the system might have issues booting if not all files have their hash
registered properly; you are easily warned if this is the case through the
Linux audit subsystem.
</p>

<p>
We are working on proper guidelines for enabling and working with EVM.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Setting up EVM</title>
<section>
<title>Kernel configuration</title>
<body>

<p>
First of all, enable the EVM subsystem in the Linux kernel configuration. Also
enable support for the kernel keyring with trusted (if using TPM) and encrypted
keys.
</p>

<pre caption="Linux kernel configuration for EVM">
CONFIG_KEYS=y
CONFIG_TRUSTED_KEYS=y
CONFIG_ENCRYPTED_KEYS=y

CONFIG_INTEGRITY=y
CONFIG_INTEGRITY_SIGNATURE=y
CONFIG_EVM=y

<comment># If you have a TPM</comment>
CONFIG_TCG_TPM=y
</pre>

</body>
</section>
<section>
<title>Bootloader configuration</title>
<body>

<p>
Next, configure the bootloader to enable EVM:
</p>

<pre caption="Bootloader configuration to enable EVM policy">
kernel /boot/vmlinuz root=/dev/vda1 ... <i>evm=fix</i>
</pre>

<p>
We currently set <c>evm=fix</c> because the extended attributes have not been
checked by EVM yet. We will be signing these later, after which the boot parameter can
be removed.
</p>

<p>
Reboot with your freshly built kernel.
</p>

</body>
</section>
<section>
<title>Enable security file system</title>
<body>

<p>
Finally, have the security file system mounted (if this is not already the
case):
</p>

<pre caption="Mounting the security file system">
~# <i>mount | grep securityfs</i>
securityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)
</pre>

</body>
</section>
<section>
<title>Setting up the keys (for cryptographic hashing)</title>
<body>

<p>
We will now be creating the key for EVM. Since the key will be used often, it
has to be a "fast" key to use. As such, we will use a standard user-encrypted
key for this. To properly protect the key, a master key will be created first
from which the EVM key can then be generated. The security of this master key
is important, so if you have a TPM chip that you control, it is wise to use a
<e>trusted</e> key for the master key. The EVM key remains a <e>user</e> key but
is generated (and validated) by the master key.
</p>

<p>
We will store the blobs (binary dumps of the encrypted keys) in
<path>/etc/keys</path>:
</p>

<pre caption="Generating a trusted master key with user EVM key">
<comment># Use this if you have a TPM chip that you control</comment>
~# <i>keyctl add trusted kmk-trusted "new 32" @u</i>
~# <i>keyctl pipe `keyctl search @u trusted kmk-trusted` > /etc/keys/kmk-trusted.blob</i>
~# <i>keyctl add encrypted evm-key "new trusted:kmk-trusted 32" @u</i>
~# <i>keyctl pipe `keyctl search @u encrypted evm-key` > /etc/keys/evm-trusted.blob</i>
</pre>

<pre caption="Generating a user master key with user EVM key">
<comment># Use this if you do not have a TPM chip that you control</comment>
~# <i>keyctl add user kmk-user "`dd if=/dev/urandom bs=1 count=32 2>/dev/null`" @u</i>
~# <i>keyctl pipe `keyctl search @u user kmk-user` > /etc/keys/kmk-user.blob</i>
~# <i>keyctl add encrypted evm-key "new user:kmk-user 32" @u</i>
~# <i>keyctl pipe `keyctl search @u encrypted evm-key` > /etc/keys/evm-user.blob</i>
</pre>

<p>
These four commands execute the following tasks:
</p>

<ol>
  <li>
    Create a master key named <path>kmk-trusted</path> or <path>mkm-user</path>.
    If we asked for a trusted key, then the key is generated by the TPM and
    sealed by the TPM (meaning it is encrypted by the TPM itself and can only be
    decrypted by the TPM). The key is made 256 bits long (32 bytes) and added to
    the user keyring (<c>@u</c>).
  </li>
  <li>
    Look for the key we generated in the first step, and output the key value
    into a file. The output is an encrypted value in case of a trusted key, or
    the key itself in case of the user key.
  </li>
  <li>
    Next, we generate a user key through the master key. In other words, the
    master key is used to encrypt (seal) the user key. The generated user key is
    called <c>evm-key</c>.
  </li>
  <li>
    Finally, we search for the key generated in the third step, and output the
    value into a file. The output is an encrypted value of the key (encrypted
    through the master key).
  </li>
</ol>

<p>
It is important that the key for EVM is called <e>evm-key</e> as this is the key
searched for by the EVM subsystem on the root's keyring (i.e. the user keyring
for the root Linux user).
</p>

<p>
Make sure that the keys are loaded at boot time. This can be done through an
initramfs, or through a service script early at boot. The following init script
shows you what needs to be done to load the keys.
</p>

<pre caption="The security_keys init script">
#!/sbin/runscript
# Copyright 1999-2012 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/hardened/integrity/docs/evm-guide.xml,v 1.1 2012/12/29 21:31:17 swift Exp $

description="Load in the EVM and IMA keys"

start() {
        ebegin "Loading EVM keys"
        # Load the master key (this is for a non-TPM system)
        keyctl show | grep -q kmk-user || keyctl add user kmk-user "`cat /etc/keys/kmk-user.blob`" @u > /dev/null
        keyctl add encrypted evm-key "load `cat /etc/keys/evm-user.blob`" @u > /dev/null
        eend $?

	ebegin "Enabling EVM"
	echo 1 > /sys/kernel/security/evm
	eend $?
}
</pre>

</body>
</section>
<section>
<title>Generating EVM hashes</title>
<body>

<p>
Now we need to generate the EVM cryptographic hashes. Enable EVM
first by echo'ing 1 into <path>/sys/kernel/security/evm</path> after the keys
are loaded, and then have IMA regenerate all its <path>security.ima</path>
attributes (which as a result will have EVM generate its own cryptographic
hashes).
</p>

<p>
Boot with <c>ima_appraise=fix evm=fix</c> and run something similar as the
following <c>find</c> command.
</p>

<pre caption="Regenerating IMA and EVM attributes">
# <i>find / \( -fstype rootfs -o -fstype ext4 \) -type f -uid 0 -exec head -c 1 '{}' \;</i>
</pre>

</body>
</section>
<section>
<title>Setting up the keys (for digital signatures)</title>
<body>

<p>
To use digital signatures, first create a keypair (public and private) to use.
</p>

<pre caption="Generating a public/private key pair">
<comment># Unencrypted private key (non-protected):</comment>
~# <i>openssl genrsa -out rsa_private.pem 1024</i>

<comment># Or encrypted private key (password-protected):</comment>
~# <i>openssl genrsa -des3 -out rsa_private.pem 1024</i>

<comment># Public key:</comment>
~# <i>openssl rsa -pubout -in rsa_private.pem -out rsa_public.pem</i>
</pre>

<p>
Next, we load the public key on the EVM keyring:
</p>

<pre caption="Loading the public key on the EVM keyring">
~# <i>evm_id=`keyctl newring _evm @u`</i>
~# <i>evmctl import /etc/keys/rsa_public.pem $evm_id</i>
</pre>

<p>
Now the EVM sub system is able to validate digital signatures. So let's create a
few of those shall we?
</p>

</body>
</section>
<section>
<title>Generating EVM signatures</title>
<body>

<p>
Now we need to generate the EVM digital signatures. We use the <c>evmctl</c>
command provided by <e>ima-evm-utils</e> for this. For instance, to generate
the digital signatures for all binaries in <path>/sbin</path>:
</p>

<pre caption="Generate digital signatures for all sbin binaries">
~# <i>find /sbin -type f -exec evmctl sign --imahash '{}' /etc/keys/rsa_private.pem</i>
</pre>

<p>
If the IMA keys are loaded as well, you can have both digital signatures for EVM
as well as for IMA:
</p>

<pre caption="Generate digital signatures (evm and ima) for all sbin binaries">
~# <i>find /sbin -type f -exec evmctl sign --imasig '{}' /etc/keys/rsa_private.pem</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Using the EVM subsystem</title>
<section>
<title>Enable EVM</title>
<body>

<p>
EVM is by default not enabled until you tell it to start. This is because you
need to load in the EVM keys in the keyring so that EVM can start validating the
signatures. Once that is done, you can start EVM by echo'ing 1 into
<path>/sys/kernel/security/evm</path>
</p>

<pre caption="Enabling EVM">
echo 1 > /sys/kernel/security/evm
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Asked Questions with Answers</title>
<section>
<title>I ran with evm=fix but when I enabled EVM, it still blocked file accesses</title>
<body>

<p>
If you use <c>evm=fix</c> you also need <c>ima_appraise=fix</c>. This is because
the IMA appraisal code checks the EVM attribute as well and, if the check fails,
the IMA appraisal code will refuse access.
</p>

</body>
</section>
<section>
<title>Can I use EVM without IMA to protect SELinux attributes?</title>
<body>

<p>
Although you can enable EVM to create hashes on the SELinux attributes, you need
the IMA appraisal to be enabled in order for the protection to work. EVM by
itself does not enforce the hashes and would only register changes if you do not
use IMA with the appraisal feature enabled.
</p>

</body>
</section>
</chapter>

</guide>
