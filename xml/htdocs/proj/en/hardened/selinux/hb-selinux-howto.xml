<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/hardened/selinux/Attic/hb-selinux-howto.xml,v 1.6 2008/05/20 15:45:43 pebenito Exp $ -->

<sections>
<version>2.0</version>
<date>2006-10-14</date>

<section><title>Load policy into a running SELinux kernel</title>
<subsection><body>
<p>
  This requires you to be in the <c>sysadm_r</c> role.
</p>
<pre caption="Semodule command">
# <i>semodule -B</i>
</pre>
</body></subsection>
</section>

<section><title>Change roles</title>
<subsection><body>
<p>
  This requires your user have access to the target role.  This example
  is for changing to the <c>sysadm_r</c> role.
</p>
<pre caption="Newrole">
# <i>newrole -r sysadm_r</i>
</pre>
</body></subsection>
</section>

<section><title>Specify available roles for a user</title>
<subsection><body>
<p>
  There is a mapping of linux users to SELinux identities.  The policy has
  generic SELinux users for relevant configurations of roles.  For example, to
  map the user <c>pebenito</c> to the SELinux identity <c>staff_u</c>, run:
</p>
<pre caption="Map pebenito to staff_u">
# <i>semanage login -a -s staff_u pebenito</i>
</pre>
<p>
  The policy does not need to be reloaded.  If the user is logged in, it
  must log out and log in again to take effect.
</p>
</body></subsection>
</section>

<section><title>Relabel filesystems</title>
<subsection><body>
<p>
  This requires you to be in the <c>sysadm_r</c> role.
</p>
<pre caption="Relabel">
# <i>rlpkg -a</i>
</pre>
</body></subsection>
</section>

<section><title>Relabel an individual package</title>
<subsection><body>
<p>
   In addition to relabeling entire filesystems, individual portage packages
   can be relabeled.  This requires you to be in the <c>sysadm_r</c> role.
</p>
<pre caption="rlpkg example">
# <i>rlpkg shadow sash</i>
</pre>
<p>
   The script rlpkg is used, and any number of packages can be specified
   on the command line.
</p>
</body></subsection>
</section>

<section><title>Scan for libraries with text relocations</title>
<subsection><body>
<p>
  SELinux has improved memory protections.  One feature supported is
  the permission for ELF text relocations.  The libraries with text relocations
  have a special label, and the <c>rlpkg</c> tool has an option to scan for
  these libraries.
</p>
<pre caption="TEXTREL Scan">
# <i>rlpkg -t</i>
</pre>
<p>
  This will also be done by automatically after a full relabel.
</p>
</body></subsection>
</section>

<section><title>Start daemons in the correct domain</title>
<subsection><body>
<p>
  Controlling daemons that have init scripts in /etc/init.d is slightly
  different in SELinux.  The <c>run_init</c> command must be used to run
  the scripts, to ensure they are ran in the correct domain.  The command
  can be ran normally, except the command is prefixed with <c>run_init</c>.
  This requires you to be in the <c>sysadm_r</c> role.
</p>
<pre caption="run_init examples">
# <i>run_init /etc/init.d/ntpd start</i>
# <i>run_init /etc/init.d/apache2 restart</i>
# <i>run_init /etc/init.d/named stop</i>
</pre>
</body></subsection>
<subsection><title>Gentoo run_init integration</title><body>
<p>
  <c>run_init</c> has been integrated into Gentoo's init script system.  With
  SELinux installed, services can be started and stopped as usual, but will
  now authenticate the user.
</p>
<pre caption="Integrated run_init example">
# <i>/etc/init.d/sshd restart</i>
Authenticating root.
Password:
 * Stopping sshd...                       [ ok ]
 * Starting sshd...                       [ ok ]
</pre>
</body></subsection>
</section>

<section><title>Switch between enforcing and permissive modes</title>
<subsection><body>
<p>
  Switching between modes in SELinux is very simple.  Write a 1 for
  enforcing, or 0 for permissive to /selinux/enforce to set the mode.
  The current mode can be queried by reading /selinux/enforce; 0 means
  permissive mode, and 1 means enforcing mode.  If the kernel option
  "NSA SELinux Development Support" is turned off, the system will always
  be in enforcing mode, and cannot be switched to permissive mode.
</p>
<pre caption="">
<comment>Query current mode</comment>
# <i>cat /selinux/enforce</i>
<comment>Switch to enforcing mode</comment>
# <i>echo 1 > /selinux/enforce</i>
<comment>Switch to permissive mode</comment>
# <i>echo 0 > /selinux/enforce</i>
</pre>
<p>
  A machine with development support turned on can be started in enforcing
  mode by adding <c>enforcing=1</c> to the kernel command line, in the
  bootloader (GRUB, lilo, etc).
</p>
</body></subsection>

<subsection><title>Managed policy</title><body>
<p>
  In addition to the above kernel options, the mode at boot can be
  set by the <c>/etc/selinux/config</c> file.
</p>
<pre caption="/etc/selinux/config">
# SELINUX can take one of these three values:
#       enforcing - SELinux security policy is enforced.
#       permissive - SELinux prints warnings instead of enforcing.
#       disabled - No SELinux policy is loaded.
SELINUX=<comment>permissive</comment>
</pre>
<p>
  The setting in this file will be overridden by the kernel command line
  options described above.
</p>
</body></subsection>
</section>

<section><title>Understand sestatus output</title>
<subsection><body>
<p>
  The <c>sestatus</c> tool can be used to determine detailed SELinux-specific
  status information about the system.  The <c>-v</c> option provides extra
  detail about the context of processes and files.  The output will be
  divided into four sections.  Sestatus only provides complete information
  for a user logged in as root (or su/sudo), in the <c>sysadm_r</c> role.
</p>
<pre caption="Status example">
SELinux status:         enabled
SELinuxfs mount:        /selinux
Current mode:           enforcing
Policy version:         18
</pre>
<p>
  The main status information is provided in the first section.  The first
  line shows if SELinux kernel functions exists and are enabled.  If the
  status is disabled, either the kernel does not have SELinux support, or
  the policy is not loaded.  The second line shows the mount point for
  the SELinux filesystem.  During the normal use, the filesystem should be
  mounted at the default location of <c>/selinux</c>.  The third line
  shows the current SELinux mode, either enforcing or permissive.  The fourth
  line shows the policy database version supported by the currently running
  kernel.
</p>
<pre caption="Booleans example">
Policy booleans:
secure_mode             inactive
ssh_sysadm_login        inactive
user_ping               inactive
</pre>
<p>
  The second section displays the status of the conditional policy booleans.  The
  left column is the name of boolean.  The right column is the status of the
  boolean, either active, or inactive.  This section will not be shown on
  policy version 15 kernels, as they do not support conditional policy.
</p>
<pre caption="Process context example">
Process contexts:
Current context:        pebenito:sysadm_r:sysadm_t
Init context:           system_u:system_r:init_t
/sbin/agetty            system_u:system_r:getty_t
/usr/sbin/sshd          system_u:system_r:sshd_t
</pre>
<p>
  The third section displays the context of the current process, and of several
  key processes.  If a process is running in the incorrect context, it will not
  function correctly.
</p>
<pre caption="File context example">
File contexts:
Controlling term:       pebenito:object_r:sysadm_devpts_t
/sbin/init              system_u:object_r:init_exec_t
/sbin/agetty            system_u:object_r:getty_exec_t
/bin/login              system_u:object_r:login_exec_t
/sbin/rc                system_u:object_r:initrc_exec_t
/sbin/runscript.sh      system_u:object_r:initrc_exec_t
/usr/sbin/sshd          system_u:object_r:sshd_exec_t
/sbin/unix_chkpwd       system_u:object_r:chkpwd_exec_t
/etc/passwd             system_u:object_r:etc_t
/etc/shadow             system_u:object_r:shadow_t
/bin/sh                 system_u:object_r:bin_t -> system_u:object_r:shell_exec_t
/bin/bash               system_u:object_r:shell_exec_t
/bin/sash               system_u:object_r:shell_exec_t
/usr/bin/newrole        system_u:object_r:newrole_exec_t
/lib/libc.so.6          system_u:object_r:lib_t -> system_u:object_r:shlib_t
/lib/ld-linux.so.2      system_u:object_r:lib_t -> system_u:object_r:shlib_t
</pre>
<p>
  The fourth section displays the context of the current process's controlling
  terminal, and of several key files.  For symbolic links, the context of
  the link and then the context of the link target is displayed.  If a file has
  an incorrect context, the file may be inaccessable or have incorrect
  permissions for a particular process.
</p>
</body></subsection>
</section>
</sections>
