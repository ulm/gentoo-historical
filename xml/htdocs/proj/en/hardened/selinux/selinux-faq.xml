<?xml version='1.0' encoding="utf-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/en/hardened/selinux/selinux-faq.xml">
<title>SELinux HOWTO and FAQ</title>
<author title="Author">
  <mail link="pebenito@gentoo.org">Chris PeBenito</mail>
</author>
<abstract>
Frequently asked questions and HOWTOs for SELinux
</abstract>
<license/>
<version>1.1</version>
<date>8 November 2003</date>

<chapter><title>HOWTO: Load policy into a running SELinux kernel</title>
<section><body>
<p>
  This requires you to be in the <i>sysadm_r</i> role.
</p>
<pre>
# <c>cd /etc/security/selinux/src/policy</c>
# <c>make load</c>
# <c>make initrd</c>
</pre>
<p>
  The initrd does not have to be regenerated (third command) every time policy
  is loaded.  It does need to be done once before rebooting, to ensure the policy
  in the initrd is consistent, otherwise the old policy will be loaded.
</p>
</body></section>
</chapter>

<chapter><title>HOWTO: Change roles</title>
<section><body>
This requires your user have access to the target role.  This example
is for changing to the <i>sysadm_r</i> role.
<pre>
# <c>newrole -r sysadm_r</c>
</pre>
</body></section>
</chapter>

<chapter><title>HOWTO: Specify available roles for a user</title>
<section><body>
<p>
  The SELinux identity determines the roles available to a user.  Modify the
  users file (/etc/security/selinux/src/policy/users).  For example, to allow
  the user <i>pebenito</i> the ability to have roles <i>staff_r</i> and <i>sysadm_r</i>,
  add to the file:
</p>
<pre>user pebenito roles { staff_r sysadm_r };</pre>
<p>
  Then <uri link="#doc_chap1">load</uri> the policy.  See the 
  <uri link="selinux-policy.xml#doc_chap3">SELinux Policy Overview</uri> for
  additional information on SELinux identities.
</p>
</body></section>
</chapter>

<chapter><title>HOWTO: Relabel filesystems</title>
<section><body>
<p>
  This requires you to be in the <i>sysadm_r</i> role.
</p>
<pre>
# <c>cd /etc/security/selinux/src/policy</c>
# <c>make relabel</c>
</pre>
</body></section>
</chapter>

<chapter><title>HOWTO: Relabel an individual package</title>
<section><body>
<p>
   In addition to relabeling entire filesystems, individual portage packages
   can be relabeled.  This requires you to be in the <i>sysadm_r</i> role.
</p>
<pre caption="rlpkg example">
# <c>rlpkg pam-login sash</c>
</pre>
<p>
   The script rlpkg is used, and any number of packages can be specified
   on the command line.
</p>
</body></section>
</chapter>

<chapter><title>HOWTO: Install kernel modules into the SELinux initrd</title>
<section><title>Makefile initrd options</title><body>
<p>
   In the policy Makefile, under the comments at the beginning of the file
   are the configuration options for the initrd.  The default settings do not
   install any kernel modules into the initrd.  The settings must be altered
   to install the modules.
</p>
<pre caption="Default initrd options">
# initrd options
MKINITRD = /sbin/mkinitrd
# kernel version, defaults to current running kernel
KV = $(shell uname -r)
INITRD = /boot/initrd.gz
# extra options
EXTRAOPT = -f --omit-scsi-modules --omit-raid-modules --omit-lvm-modules
</pre>
</body></section>
<section><title>Set the initrd filename</title>
<body>
<p>
  First, the initrd filename must be modified to have a kernel version.
  Modify the <i>INITRD</i> line to add in the kernel version.
</p>
<pre>
# initrd options
MKINITRD = /sbin/mkinitrd
# kernel version, defaults to current running kernel
KV = $(shell uname -r)
INITRD = /boot/initrd<comment>-$(KV)</comment>.gz
# extra options
EXTRAOPT = -f --omit-scsi-modules --omit-raid-modules --omit-lvm-modules
</pre>
<p>
  During creation of the initrd, <i>$(KV)</i> will be replaced with the kernel
  version, resulting in the initrd having a name such as <i>initrd-2.4.21-selinux-r3.gz</i>.
</p>
</body></section>
<section><title>Enable the modules</title>
<body>
<p>
  Next, the appropriate modules must be enabled.  Remove the respective
  <i>--omit-*</i> options from the <i>EXTRAOPT</i> line.  Other available options
  can be found in the mkinitrd man page, and can be added to the
  <i>EXTRAOPT</i> line.
</p>
<pre>
# initrd options
MKINITRD = /sbin/mkinitrd
# kernel version, defaults to current running kernel
KV = $(shell uname -r)
INITRD = /boot/initrd-$(KV).gz
# extra options
EXTRAOPT = -f <comment>--omit-scsi-modules --omit-raid-modules --omit-lvm-modules</comment>
</pre>
<p>
  For example, to enable SCSI modules, remove the <i>--omit-scsi-modules</i>
  option.
</p>
</body></section>
<section><title>Build the initrd</title>
<body>
<p>
  Finally, the initrd can be built.  If the initrd is for the current running
  kernel, the initrd can be built as usual.  Otherwise, the version must be
  specified on the command line, using <i>KV=</i>.  Run one of the following
  in the policy directory:
</p>
<pre caption="Build options">
<comment>For building an initrd for the current running kernel:</comment>
# <c>make initrd</c>

<comment>For building for another kernel version, for example 2.4.21-selinux-r3:</comment>
# <c>make initrd KV=2.4.21-selinux-r3</c>
</pre>
<p>
  Now the bootloader will have to be modified to use the new initrd.  Each time
  a new kernel is installed, or the policy is changed, the initrd should be
  regenerated.
</p>
</body></section>
</chapter>

<chapter><title>HOWTO: Start daemons in the correct domain</title>
<section><body>
<p>
  Controlling daemons that have init scripts in /etc/init.d is slightly
  different in SELinux.  The <i>run_init</i> command must be used to run
  the scripts, to ensure they are ran in the correct domain.  The command
  can be ran normally, except the command is prefixed with <i>run_init</i>.
  This requires you to be in the <i>sysadm_r</i> role.
</p>
<pre caption="run_init examples">
# <c>run_init /etc/init.d/ntpd start</c>
# <c>run_init /etc/init.d/apache2 restart</c>
# <c>run_init /etc/init.d/named stop</c>
</pre>
</body></section>
</chapter>

<chapter><title>HOWTO: Switch between enforcing and permissive modes</title>
<section><body>
<p>
  Switching between modes in SELinux is very simple.  Write a 1 for
  enforcing, or 0 for permissive to /selinux/enforce to set the mode.
  The current mode can be queried by reading /selinux/enforce; 0 means
  permissive mode, and 1 means enforcing mode.  If the kernel option
  "NSA SELinux Development Support" is turned off, the system will always
  be in enforcing mode, and cannot be switched to permissive mode.
</p>
<pre>
<comment>Query current mode</comment>
# <c>cat /selinux/enforce</c>
<comment>Switch to enforcing mode</comment>
# <c>echo 1 > /selinux/enforce</c>
<comment>Switch to permissive mode</comment>
# <c>echo 0 > /selinux/enforce</c>
</pre>
<p>
  The old SELinux API had commands <i>avc_enforcing</i> and <i>avc_toggle</i>
  for querying the current mode and toggling between modes, respectively.
  <i>avc_toggle</i> will display the mode that the machine is switching to
  (not the former mode).  For backwards compatability, scripts that replicate
  these programs are installed by policycoreutils.
</p>
<p>
  A machine with development support turned on can be started in enforcing
  mode by adding <i>enforcing=1</i> to the kernel command line, in the
  bootloader (GRUB, lilo, etc).
</p>
</body></section>
</chapter>

<chapter><title>FAQ: Unable to obtain login context</title>
<section><title>"When I log in at the console, it asks for a role and type."</title>
<body>
<pre caption="Login messages">
login:   root
password: 
Login: unable to obtain context for root
Would you like to enter a security context? [y]

Enter role   sysadm_r
Enter type   sysadm_t
</pre>
<p>
  This generally means that /bin/login is not labeled correctly.  Pam-login
  needs to be <uri link="#doc_chap5">relabeled</uri>.
</p>
</body></section>
</chapter>

<chapter><title>FAQ: Cannot log in over ssh</title>
<section><title>"I can log in at the console, but not over ssh."</title>
<body>
<p>
  Openssh is most likely not labeled correctly, so it is not running in the
  right context.  Relabel openssh, then restart sshd.
</p>
<pre>
# <c>rlpkg openssh</c>
# <c>run_init /etc/init.d/sshd restart</c>
</pre>
<p>
  Also ensure your user has a valid shell.
</p>
</body></section>
</chapter>

<chapter><title>FAQ: Missing SELinux module during emerge</title>
<section><title>"I get this error when using emerge:"</title>
<body>
<pre>
!!! SELinux module not found. Please verify that it was installed.
</pre>
<p>
  This indicates that the portage SELinux module is missing or damaged.
  Remerge dev-python/python-selinux.  Packages have been probably been
  merged without correct labels.  A relabel will most likely need
  to be done.
</p>
</body></section>
</chapter>

<chapter><title>FAQ: Failure registering capabilities with the kernel</title>
<section><title>"I get this kernel error when booting:"</title>
<body>
<pre>
There is already a security framework initialized, register_security failed.
Failure registering capabilities with the kernel
selinux_register_security:  Registering secondary module capability
Capability LSM initialized
</pre>
<p>
  This means that the Capability LSM module couldn't register as the primary
  module, since SELinux is the primary module.  The third message means that it
  registers with SELinux as a secondary module.  This is normal.
</p>
</body></section>
</chapter>


<!-- always keep this one as the bottom FAQ :) -->
<chapter><title>FAQ: Gentoo SELinux Demonstration Machine</title>
<section><body>
<p>
  This machine is not running user-mode linux, or in a chroot, it has SELinux
  mandatory access control.  No, you cannot install psybnc or an irc bot on the
  machine, unless you break the SELinux security and gain higher priviledge.
</p>
</body></section>
</chapter>
<!-- dont put anything below here, this demo machine faq should be the last one -->

</guide>
