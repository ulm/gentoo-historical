<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/hardened/selinux/modules/Attic/apache.xml,v 1.1 2011/07/16 20:36:41 zorry Exp $ -->

<guide link="/proj/en/hardened/selinux/modules/apache.xml" lang="en">
<title>SELinux Apache Module</title>
<author title="Author">
  <mail link="sven.vermeulen@siphos.be">Sven Vermeulen</mail>
</author>

<abstract>
Within SELinux, the apache module is responsible for defining the
web server related domains and privileges. It is not tied to Apache, despite
its name.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1</version>
<date>2011-06-02</date>

<chapter>
<title>Structure</title>
<section>
<title>Domains</title>
<body>

<figure link="./images/apachedomain.png" short="General Apache domain overview"
caption="General Apache domain overview" />

<p>
The <c>apache</c> module provides the following domains:
</p>

<table>
<tr>
  <th>Domain</th>
  <th>Process(es)</th>
  <th>Description</th>
</tr>
<tr>
  <ti>httpd_t</ti>
  <ti>apache<br />lighttpd</ti>
  <ti>Webserver processes</ti>
</tr>
<tr>
  <ti>httpd_helper_t</ti>
  <ti>htsslpass</ti>
  <ti>Domain for the htsslpass process</ti>
</tr>
<tr>
  <ti>httpd_php_t</ti>
  <ti>php-cgi</ti>
  <ti>Domain for PHP support through CGI (php-cgi process)</ti>
</tr>
<tr>
  <ti>httpd_rotatelogs_t</ti>
  <ti>rotatelogs</ti>
  <ti>Domain for the rotatelogs process</ti>
</tr>
<tr>
  <ti>httpd_suexec_t</ti>
  <ti>suexec</ti>
  <ti>
    Domain used by the webserver suexec process to switch to another user
    before calling and executing a script
  </ti>
</tr>
<tr>
  <ti>httpd_sys_script_t</ti>
  <ti></ti>
  <ti>Domain used by the system/package-provided CGI scripts</ti>
</tr>
<tr>
  <ti>httpd_user_script_t</ti>
  <ti></ti>
  <ti>Domain used by the user-provided CGI scripts</ti>
</tr>
</table>

<impo>
The <c>apache</c> module allows other modules to define their own domains and
types for use by the webservers. This is done through templates. The reference
policy by default enabled two of such templated sets for <e>user</e> and
<e>sys</e>, which you can see in domains like <c>httpd_sys_script_t</c> and
<c>httpd_user_script_t</c>. It is very well possible that on your system, more
of these template-instantiated domains exist.
</impo>

</body>
</section>
<section>
<title>File Types/Labels</title>
<body>

<p>
The following table lists the file type/labels defined in the <c>apache</c>
module.
</p>

<ul>
  <li>
    If the function mentions <e>(templated)</e> then it means that the types
    are generated by the <c>apache</c> module, but that similar others might
    exist on your system (called through other modules).
  </li>
  <li>
    When talking about <e>scripts</e>, we mean CGI scripts or other scripts that
    are triggered from the webserver, not from an interactive shell session.
  </li>
</ul>



<table>
<tr>
  <th>Type</th>
  <th>Function</th>
  <th>Description</th>
</tr>
<tr>
  <ti>httpd_exec_t</ti>
  <ti>Entrypoint</ti>
  <ti>Entrypoint for the webserver processes</ti>
</tr>
<tr>
  <ti>httpd_initrc_exec_t</ti>
  <ti>Entrypoint</ti>
  <ti>Entrypoint for the webserver init scripts</ti>
</tr>
<tr>
  <ti>httpd_helper_exec_t</ti>
  <ti>Entrypoint</ti>
  <ti>Entrypoint for the webserver helper processes</ti>
</tr>
<tr>
  <ti>httpd_php_exec_t</ti>
  <ti>Entrypoint</ti>
  <ti>Entrypoint for the PHP scripts</ti>
</tr>
<tr>
  <ti>httpd_rotatelogs_exec_t</ti>
  <ti>Entrypoint</ti>
  <ti>Entrypoint for the rotatelog helper</ti>
</tr>
<tr>
  <ti>httpd_suexec_exec_t</ti>
  <ti>Entrypoint</ti>
  <ti>Entrypoint for the suexec wrapper</ti>
</tr>
<tr>
  <ti>httpd_sys_script_exec_t</ti>
  <ti>Entrypoint (templated)</ti>
  <ti>
    Entrypoint for system CGI scripts (or other callable scripts) that need
    access to the system content files (httpd_sys_content_t)
  </ti>
</tr>
<tr>
  <ti>httpd_user_script_exec_t</ti>
  <ti>Entrypoint (templated)</ti>
  <ti>
    Entrypoint for the user-provided scripts callable from the webserver instances
  </ti>
</tr>
<tr>
  <ti>httpd_squirrelmail_t</ti>
  <ti>Content</ti>
  <ti>Squirrelmail files</ti>
</tr>
<tr>
  <ti>squirrelmail_spool_t</ti>
  <ti>Content</ti>
  <ti>Squirrelmail attachment location</ti>
</tr>
<tr>
  <ti>httpd_sys_content_t</ti>
  <ti>Content (templated)</ti>
  <ti>
    Readable content for the webservers and system scripts, offered through 
    the system / packages.
  </ti>
</tr>
<tr>
  <ti>httpd_sys_htaccess_t</ti>
  <ti>Content (templated)</ti>
  <ti>
    Label for the htaccess files, readable by the webserver but not from scripts
    or other webserver related domains.
  </ti>
</tr>
<tr>
  <ti>httpd_sys_rw_content_t</ti>
  <ti>Content (templated)</ti>
  <ti>
    Read and writeable content for the webservers and system scripts (not user
    scripts). 
  </ti>
</tr>
<tr>
  <ti>httpd_sys_ra_content_t</ti>
  <ti>Content (templated)</ti>
  <ti>
    Read and appendable content for the webservers and system scripts (not user
    scripts).
  </ti>
</tr>
<tr>
  <ti>httpd_user_content_t</ti>
  <ti>Content (templated)</ti>
  <ti>
    Readable content for the webservers and user scripts, offered by (and
    writeable by) users.
  </ti>
</tr>
<tr>
  <ti>httpd_user_htaccess_t</ti>
  <ti>Content (templated)</ti>
  <ti>
    Label for the htaccess files, readable by the webserver but not from scripts
    or other webserver related domains.
  </ti>
</tr>
<tr>
  <ti>httpd_user_rw_content_t</ti>
  <ti>Content (templated)</ti>
  <ti>
    Read and writeable content for the webservers and user scripts (not system 
    scripts).
  </ti>
</tr>
<tr>
  <ti>httpd_user_ra_content_t</ti>
  <ti>Content (templated)</ti>
  <ti>
    Read and appendable content for the webservers and user scripts (not system
    scripts).
  </ti>
</tr>
<tr>
  <ti>httpd_php_tmp_t</ti>
  <ti>Temporary Files</ti>
  <ti>Temporary files from the PHP scripts</ti>
</tr>
<tr>
  <ti>httpd_suexec_tmp_t</ti>
  <ti>Temporary Files</ti>
  <ti>Temporery files for the suexec domain</ti>
</tr>
<tr>
  <ti>httpd_tmp_t<br />httpd_tmpfs_t</ti>
  <ti>Temporary Files</ti>
  <ti>Temporary files from the httpd domain</ti>
</tr>

<tr>
  <ti>httpd_cache_t</ti>
  <ti></ti>
  <ti>Web server cache</ti>
</tr>
<tr>
  <ti>httpd_config_t</ti>
  <ti></ti>
  <ti>Configuration files</ti>
</tr>
<tr>
  <ti>httpd_lock_t</ti>
  <ti></ti>
  <ti>Lock files</ti>
</tr>
<tr>
  <ti>httpd_log_t</ti>
  <ti></ti>
  <ti>Web server log files</ti>
</tr>
<tr>
  <ti>httpd_modules_t</ti>
  <ti></ti>
  <ti>Webserver modules</ti>
</tr>
<tr>
  <ti>httpd_var_lib_t</ti>
  <ti></ti>
  <ti>Webserver libraries</ti>
</tr>
<tr>
  <ti>httpd_var_run_t</ti>
  <ti></ti>
  <ti>Runtime files for httpd</ti>
</tr>
</table>

</body>
</section>
</chapter>
<chapter>
<title>Using Apache</title>
<section>
<title>File Locations</title>
<body>

<p>
The policy offered only contains the right file context rules for the default
locations. If you deviate from these locations, you'll need to update the
contexts accordingly.
</p>

<p>
The following table provides an overview of common Apache settings (variables in
<path>httpd.conf</path>) that are often changed by end users, and the file 
context that it should have. If you use a different webserver you'll need to
base it on the description instead.
</p>

<table>
<tr>
  <th>Setting in httpd.conf</th>
  <th>Description</th>
  <th>Default Location</th>
  <th>File Context(s)</th>
</tr>
<tr>
  <ti>DocumentRoot</ti>
  <ti>Location where web content is stored (html pages and such)</ti>
  <ti>/srv/localhost/www</ti>
  <ti>system_u:object_r:httpd_sys_content_t</ti>
</tr>
<tr>
  <ti>Document</ti>
  <ti>Location where CGI scripts are stored</ti>
  <ti>/srv/localhost/cgi-bin</ti>
  <ti>system_u:object_r:httpd_sys_script_exec_t</ti>
</tr>
<tr>
  <ti>Directory</ti>
  <ti>User home directory location where user-provided content is stored</ti>
  <ti>/home/*/public_html</ti>
  <ti>system_u:object_r:httpd_user_content_t</ti>
</tr>
<tr>
  <ti>Directory</ti>
  <ti>User home directory location where user-provided CGI scripts are stored</ti>
  <ti>/home/*/public_html/cgi-bin</ti>
  <ti>system_u:object_r:httpd_user_script_exec_t</ti>
</tr>
</table>

</body>
</section>
<section>
<title>Sharing Files</title>
<body>

<p>
The SELinux policy (as part of the <c>miscfiles</c> module) supports two
additional types: <c>public_content_t</c> and <c>public_content_rw_t</c>. These
are used for what is called <e>anonymous files</e> which are readable by all
file-serving services. If all services only need to read from it, then
<c>public_content_t</c> is used. If at least one services needs to write to it,
use <c>public_content_rw_t</c> and toggle the right SELinux boolean for the
domain that needs write access to it (<c>allow_DOMAIN_anon_write</c>).
</p>

<p>
For instance, if you have files that are shared by Apache, NFS, Samba, ... you
label these <c>public_content_t</c> (read-only) or <c>public_content_rw_t</c>
(read-write for some) and then toggle the appropriate booleans:
</p>

<pre caption="Enable write access for the httpd_sys_script_t domain to the public_content_rw_t domain">
~# <i>setsebool -P allow_httpd_sys_script_anon_write on</i>
</pre>

</body>
</section>
<section>
<title>Booleans</title>
<body>

<p>
The <c>apache</c> module has several booleans which manipulate the allowed
permissions within your installation. The table below gives an overview of the
booleans, but also mentions which USE flags you <e>could</e> associate with it.
Note that the booleans are <e>not</e> linked to USE flags. However, if you have
set a particular USE flag for the webserver environment, then you might want to
toggle these booleans as well.
</p>

<table>
<tr>
  <th>Boolean</th>
  <th>Description</th>
  <th>Gentoo USE flag suggestion</th>
</tr>
<tr>
  <ti>allow_httpd_anon_write</ti>
  <ti>
    Allow the webserver to modify public files (labeled
    <c>public_content_rw_t</c>)
  </ti>
  <ti />
</tr>
<tr>
  <ti>allow_httpd_sys_script_anon_write</ti>
  <ti>
    Allow the system scripts to modify public files
  </ti>
  <ti />
</tr>
<tr>
  <ti>allow_httpd_user_script_anon_wriet</ti>
  <ti>
    Allow the user scripts to modify public files
  </ti>
  <ti />
</tr>
<tr>
  <ti>allow_httpd_mod_auth_pam</ti>
  <ti>
    Allow the webserver to use the auth_pam module
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_builtin_scripting</ti>
  <ti>
    Needed when your webservers use internal scripting languages like PHP
    (languages that are read and interpreted by the webserver directly rather than
    called through separate processes like with CGI)
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_can_network_connect</ti>
  <ti>
    Allow the webserver scripts and modules to connect to the network
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_can_network_connect_db</ti>
  <ti>
    Allow the webserver scripts and modules to connect to databases over the
    network
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_can_network_relay</ti>
  <ti>
    Allow webservers to act as a relay
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_can_sendmail</ti>
  <ti>
    Allow webservers to send e-mails
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_dbus_avahi</ti>
  <ti>
    Allow webservers to communicate with avahi service via dbus
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_enable_cgi</ti>
  <ti>
    Allow webservers to call CGI scripts (labeled <c>httpd_sys_script_exec_t</c>
    or <c>httpd_user_script_exec_t</c>)
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_enable_ftp_server</ti>
  <ti>
    Allow webservers to act as an FTP server by listening on the FTP ports
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_enable_homedirs</ti>
  <ti>
    Allow webservers to read home directories (<c>user_home_t</c>). Not to be
    mistaken with <c>httpd_user_content_t</c>, which resides in the users' home
    directory but is labeled, well, <c>httpd_user_content_t</c> ;-)
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_ssi_exec</ti>
  <ti>
    Allow webservers to run SSI executables in the same domain as the CGI
    scripts
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_tty_com</ti>
  <ti>
    Unify webservers to communicate with the terminal. This is needed when you
    need to enter a passphraze for certificates at the terminal.
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_unified</ti>
  <ti>
    When enabled, the various webserver content types (all types with attribute
    <c>httpdcontent</c> set) are not differentiated anymore, but all considered
    to be readable, writeable and executable by the webserver.
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_use_cifs</ti>
  <ti>
    Allow webservers to access CIFS file systems
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_use_gpg</ti>
  <ti>
    Allow webservers to run gpg
  </ti>
  <ti />
</tr>
<tr>
  <ti>httpd_use_nfs</ti>
  <ti>
    Allow webservers to access NFS file systems
  </ti>
  <ti />
</tr>
</table>

<p>
If you want to toggle booleans, you can do so through <c>setsebool</c>:
</p>

<pre caption="Enabling the gentoo_try_dontaudit boolean">
<comment>( With the -P flag, the boolean state is persisted across reboots)</comment>
~# <i>setsebool -P httpd_enable_homedirs on</i>
</pre>

</body>
</section>
<section>
<title>Ports</title>
<body>

<p>
If you need to run the webserver on a non-default port, you can either mark this
port as an HTTP port (<c>http_port_t</c>) or create the appropriate rule to allow
it to bind to the specified port.
</p>

<p>
To mark a particular port (say 81) as an HTTP port, use <c>semanage</c>:
</p>

<pre caption="Labeling port 81 as http_port_t">
~# <i>semanage port -a -t http_port_t -p tcp 81</i>
</pre>

<p>
If you need to allow the webserver to bind on a port but are not allowed to
modify that ports' type, you'll need to create a policy that allows the
<c>httpd_t</c> domain to bind to the particular port. For instance, to allow it
to bind on the SMTP port:
</p>

<pre caption="Allow rules to allow httpd_t to bind on SMTP ports">
allow httpd_t smtp_port_t:tcp_socket name_bind;
</pre>

</body>
</section>
</chapter>
</guide>
