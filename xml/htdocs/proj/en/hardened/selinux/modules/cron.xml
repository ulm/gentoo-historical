<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/hardened/selinux/modules/Attic/cron.xml,v 1.2 2011/08/24 21:26:00 swift Exp $ -->

<guide link="/proj/en/hardened/selinux/modules/cron.xml" lang="en">
<title>SELinux cron Module</title>
<author title="Author">
  <mail link="sven.vermeulen@siphos.be">Sven Vermeulen</mail>
</author>

<abstract>
Within SELinux, the cron module is responsible for defining the scheduling
domains and interactions.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>2</version>
<date>2011-08-13</date>

<chapter>
<title>Structure</title>
<section>
<title>Domains</title>
<body>

<figure link="./images/crondomain.png" short="General cron domain overview"
caption="General cron domain overview" />

<p>
The cron daemon itself (like <c>vixie-cron</c>) runs in the <e>crond_t</e>
domain. Depending on the cron daemon used, this daemon either immediately
executes the jobs (hence its ability to transition to various other domains) or
does this through an intermediate domain (<e>system_cronjob_t</e> for system
cronjobs and <e>cronjob_t</e> for user cronjobs).
</p>

<p>
The <e>crontab_t</e> and <e>admin_crontab_t</e> domains are used by the users
(and administrators) for maintaining their crontab files. These files are read
in by the cron daemon.
</p>

</body>
</section>
<section>
<title>File Types/Labels</title>
<body>

<p>
The following table lists the file type/labels defined in the <c>cron</c>
module (part of the base policy).
</p>

<table>
<tr>
  <th>Type</th>
  <th>Function</th>
  <th>Description</th>
</tr>
<tr>
  <ti>cronjob_t</ti>
  <ti>Domain</ti>
  <ti>Domain for end user cronjobs</ti>
</tr>
<tr>
  <ti>system_cronjob_t</ti>
  <ti>Domain</ti>
  <ti>Domain for system cronjobs</ti>
</tr>
<tr>
  <ti>crond_t</ti>
  <ti>Domain</ti>
  <ti>Domain for the cron daemon</ti>
</tr>
<tr>
  <ti>admin_crontab_t</ti>
  <ti>Domain</ti>
  <ti>Domain for administrator-started crontab commands</ti>
</tr>
<tr>
  <ti>crontab_t</ti>
  <ti>Domain</ti>
  <ti>Domain for user-started crontab commands</ti>
</tr>
<tr>
  <ti>crond_exec_t</ti>
  <ti>Entrypoint</ti>
  <ti>Entrypoint for the cron daemon binaries</ti>
</tr>
<tr>
  <ti>crontab_exec_t</ti>
  <ti>Entrypoint</ti>
  <ti>Entrypoint for the crontab commands</ti>
</tr>
<tr>
  <ti>cron_spool_t</ti>
  <ti>Configuration</ti>
  <ti>Spool files (where the user crontab files are in)</ti>
</tr>
<tr>
  <ti>user_cron_spool_t</ti>
  <ti>Configuration</ti>
  <ti>Spool files (for the user crontab files)</ti>
</tr>
<tr>
  <ti>system_cron_spool_t</ti>
  <ti>Configuration</ti>
  <ti>Spool files (where the system crontab files are in)</ti>
</tr>
<tr>
  <ti>cron_var_lib_t</ti>
  <ti></ti>
  <ti>Label for cron's /var/lib items</ti>
</tr>
<tr>
  <ti>cron_var_run_t</ti>
  <ti></ti>
  <ti>Label for cron's /var/run items</ti>
</tr>
<tr>
  <ti>cron_log_t</ti>
  <ti></ti>
  <ti>Label for cron's logfiles (/var/log/cron)</ti>
</tr>
<tr>
  <ti>crond_tmp_t</ti>
  <ti></ti>
  <ti>Label for the cron daemon's temporary files</ti>
</tr>
<tr>
  <ti>crond_var_run_t</ti>
  <ti></ti>
  <ti>Label for the cron daemon's /var/run items</ti>
</tr>
<tr>
  <ti>system_cronjob_lock_t</ti>
  <ti></ti>
  <ti>Label for the system cronjobs' lock files</ti>
</tr>
<tr>
  <ti>system_cronjob_tmp_t</ti>
  <ti></ti>
  <ti>Label for the system cronjobs' temporary files</ti>
</tr>
<tr>
  <ti>admin_crontab_tmp_t</ti>
  <ti></ti>
  <ti>
    Label for temporary files created by a system administrators' crontab
    command
  </ti>
</tr>
<tr>
  <ti>crontab_tmp_t</ti>
  <ti></ti>
  <ti>Label for temporary files created by a users' crontab command</ti>
</tr>
</table>

</body>
</section>
<section>
<title>Booleans</title>
<body>

<p>
The <c>cron</c> domain supports the following SELinux booleans, which can be set
/ unset using the standard <c>setsebool</c> statements.
</p>

<table>
<tr>
  <th>Boolean</th>
  <th>Default</th>
  <th>Description</th>
</tr>
<tr>
  <ti>cron_can_relabel</ti>
  <ti>false</ti>
  <ti>
    Allow jobs running in the <e>system_cronjob_t</e> domain to relabel files
    and directories. When set, these jobs can also call the <c>setfiles</c> and 
    <c>restorecon</c> commands.
  </ti>
</tr>
<tr>
  <ti>fcron_crond</ti>
  <ti>false</ti>
  <ti>
    Needed to set more privileges for the cron domains in case <c>fcron</c> is
    used as a cron daemon. These privileges are not necessary for other cron
    daemons and as such are "behind" this boolean.
  </ti>
</tr>
</table>

</body>
</section>
</chapter>
<chapter>
<title>Using Cron</title>
<section>
<title>System Administration</title>
<body>

<p>
If you want to perform system administrative tasks using cronjobs, you will need
to take special care that the domain in which the job runs has sufficient
privileges.
</p>

<p>
First, make sure that your cronjobs run in the <e>system_cronjob_t</e> domains.
This means that the cronjobs must be defined as either
</p>

<ul>
  <li>
    scripts in the <path>/etc/cron.hourly</path>, <path>/etc/cron.daily</path>,
    ... directories
  </li>
  <li>
    crontab entries in the <path>/etc/cron.d</path> directory
  </li>
  <li>
    crontab entries in the <path>/etc/crontab</path> file
  </li>
</ul>

<p>
Next, verify that the commands you want to run (and thus their target domain in
which they will run) are allowed for the <e>system_cronjob_t</e> domain.
</p>

<pre caption="Validationg the system_cronjob_t privileges">
<comment># Example to verify if we can call emerge</comment>
~# <i>sesearch -s system_cronjob_t -t portage_t -A</i>
Found 1 semantic av rules:
  allow system_cronjob_t portage_t : process transition;
</pre>

<p>
If the domain does not have the necessary privileges, you need to update the
policy. More information on maintaining the SELinux policy can be found in the
<uri link="http://hardened.gentoo.org/selinux/selinux-handbook.xml">Gentoo
Hardened SELinux Handbook</uri>. 
</p>

<p>
An example policy file to allow executing <c>dmesg</c>:
</p>

<pre caption="Allowing system_cronjob_t to execute dmesg">
policy_module(fixcron, 1.0)

require {
  type system_cronjob_t;
}

dmesg_domtrans(system_cronjob_t)
</pre>

<p>
In order to find out which specific calls are necessary, it can come in handy to
use the privileges assigned to the <e>sysadm_t</e> domain. Take a look at this
<uri
link="http://oss.tresys.com/projects/refpolicy/browser/policy/modules/roles/sysadm.te">sysadm.te</uri>
file. If you search for "dmesg" you will notice the following in the file:
</p>

<pre caption="Snippet in sysadm.te related to dmesg">
128 	')
129 	
130 	optional_policy(`
131 	        dmesg_domtrans(sysadm_t)
132 	')
133 	
134 	optional_policy(`
</pre>

<p>
It is this call - <c>dmesg_domtrans</c> - that we are interested in (and which you
can notice in the sample policy mentioned above. It is possible that you notice
a <c>_run</c> or <c>_exec</c> instead. Try this one first, but most of the time
you'll need a <c>_domtrans</c> method.
</p>

<p>
For more information or help with managing your policies, do not hesitate to
drop by on <c>#gentoo-hardened</c> in <c>irc.freenode.net</c>.
</p>

</body>
</section>
<section>
<title>User (incl. root) Cronjobs</title>
<body>

<impo>
Part of this is for vixie-cron users with USE="ubac" set, but even if this is
not the case it is still pertinent (cfr. the default_contexts issue).
</impo>

<p>
When working with end user crontabs (those triggered / managed through the
<c>crontab</c> command), you must take care that you do this as the <e>SELinux
user</e> which is associated with the file (this is a result of the SELinux User
Based Access Control, aka <e>UBAC</e>). In other words, if you want to edit the
root users' <path>crontab</path> file, you need to be the <c>root</c> SELinux
user (and not a staff user that <c>su</c>/<c>sudo</c>'ed into root).
</p>

<p>
If this was not done correctly, you will get the following error:
</p>

<pre caption="Error due to mismatch on SELinux user">
cron[20642]: (root) ENTRYPOINT FAILED (crontabs/root)
</pre>

<p>
Verify that the file's user and SELinux user match:
</p>

<pre caption="Verify that the SELinux user and file user ownership matches">
~# <i>ls -Z /var/spool/cron/crontabs/root</i>
staff_u:object_r:user_cron_spool_t /var/spool/cron/crontabs/root

~# <i>semanage login -l | grep root</i>
root              root
</pre>

<p>
In the above case, the root Unix account (cfr filename of the crontab file) is
mapped to the root SELinux user (cfr second "root" in the <c>semanage login
-l</c> output). However, the SELinux user of the crontab file is <e>staff_u</e>
instead of <e>root</e>, which is why the failure occurred.
</p>

<p>
To fix this, use <c>chcon</c>:
</p>

<pre caption="Fix the crontab SELinux user ownership">
~# <i>chcon -u root /var/spool/cron/crontabs/root</i>
</pre>

<p>
Another problem that you might see is immediately at startup:
</p>

<pre caption="Entrypoint failure on crontab">
cron[26653]: (system_u) ENTRYPOINT FAILED (/etc/crontab)
</pre>

<p>
In this case, even if the user of the file is correct, it is most likely due to
the <path>/etc/selinux/*/contexts/default_context</path> file containing an
incorrect definition. Look at the cron-related line and verify that each
mentioned context is valid. For instance:
</p>

<pre caption="Verify if contexts are valid">
<comment># Verify the context "system_r:cronjob_t:s0"</comment>
~# <i>seinfo -rsystem_r -x | grep cronjob</i>
  system_cronjob_t
</pre>

<p>
In the above case, <e>cronjob_t</e> is not valid, but <e>system_cronjob_t</e> is.
</p>

</body>
</section>
<section>
<title>Reporting Cron and SELinux Issues</title>
<body>

<p>
If you have an issue with cron and believe that it is related to SELinux, please
also give the output of the following command:
</p>

<pre caption="Getting the initial context from crond_t">
<comment># Get the domain under which system-level jobs will run</comment>
~# <i>getseuser system_u system_u:system_r:crond_t</i>
seuser:  system_u, level (null)
Context 0        system_u:system_r:system_cronjob_t

<comment># Get the domain under which user-level jobs will run</comment>
~# <i>getseuser john system_u:system_r:crond_t</i>
seuser:  user_u, level (null)
Context 0        user_u:user_r:cronjob_t
</pre>

<note>
The <c>getseuser</c> command usually takes a Unix account name for the first
argument, but treats <c>system_u</c> as a special case.
</note>

</body>
</section>
</chapter>
</guide>
