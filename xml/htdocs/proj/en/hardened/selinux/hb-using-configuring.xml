<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/hardened/selinux/hb-using-configuring.xml,v 1.4 2012/05/26 18:23:13 swift Exp $ -->

<sections>
<version>2</version>
<date>2012-05-26</date>

<section>
<title>Administering Users</title>
<subsection>
<title>Introduction</title>
<body>

<p>
During the installation, we already covered how to map a Linux user to a SELinux
user. In the example, we used a hypothetical user "john" and mapped him to the
SELinux user "staff_u". If you are running a multi-user system, managing the
right mappings is important. A user that is mapped to the SELinux user "user_u"
will not get any additional rights. Even if you would give that user additional
rights through commands such as <c>sudo</c>, the SELinux policy will not allow
this user to do anything that is administration related.
</p>

<p>
For this reason, it is important to go over the SELinux user mappings and the
Linux users on your system.
</p>

</body>
</subsection>
<subsection>
<title>User Mappings</title>
<body>

<p>
Run <c>semanage login -l</c> to show the current mappings between Linux logins
and SELinux users.
</p>

<pre caption="Running semanage login -l">
# <i>semanage login -l</i>

Login Name                SELinux User

__default__               user_u
root                      root
john                      staff_u
system_u                  system_u
</pre>

<p>
The "user_u" SELinux user is for regular accounts. As such, the special
<e>__default__</e> mapping is defined by SELinux to denote every login that is
not defined otherwise. This makes sure that a newly defined account does not get
elevated privileges by default.
</p>

<p>
The next table gives an overview of the standard SELinux users available after
an installation.
</p>

<table>
<tr>
  <th>SELinux User</th>
  <th>Description</th>
</tr>
<tr>
  <ti>user_u</ti>
  <ti>
    Default regular SELinux user, which should be used by end-user accounts that
    are not going to administer any service(s) on the system
  </ti>
</tr>
<tr>
  <ti>staff_u</ti>
  <ti>
    SELinux user for administrators. This user has the right to switch roles and
    as such gain elevated privileges
  </ti>
</tr>
<tr>
  <ti>root</ti>
  <ti>
    SELinux user for the root account. It differs little from the staff_u
    account beyond being a different ID. This ensures that files protected by
    the user based access control for root cannot be handled by the staff_u
    (and other) users
  </ti>
</tr>
<tr>
  <ti>sysadm_u</ti>
  <ti>
    SELinux user for system administration. By default, this account is not
    immediately used as this user immediately gets the administrative role
    (whereas staff_u and root still need to switch roles).
  </ti>
</tr>
<tr>
  <ti>system_u</ti>
  <ti>
    SELinux user for system services. It should never be used for end users or
    administrators as it provides direct access to the system role (and
    privileges)
  </ti>
</tr>
<tr>
  <ti>unconfined_u</ti>
  <ti>
    Used when the policy is <e>targeted</e>, this SELinux user has many
    privileges (it is essentially not limited in its actions, although it is
    still handled through SELinux - just through a "wide open" policy).
  </ti>
</tr>
</table>

<p>
To map a user to a specific SELinux user, use <c>semanage login -a</c>:
</p>

<pre caption="Mapping a user 'sophie' to the staff_u user">
# <i>semanage login -a -s staff_u sophie</i>
</pre>

<p>
However, when you update such mapping, the files in that users' home directory
will be owned by a wrong SELinux user. It is therefor important to relabel the
files of that user:
</p>

<pre caption="Relabeling sophie's files">
# <i>restorecon -R -F /home/sophie</i>
</pre>

</body>
</subsection>
<subsection>
<title>Additional SELinux Accounts</title>
<body>

<p>
It is perfectly possible to create additional SELinux accounts, and then map the
Linux logins to these new accounts. This can be necessary when you want a more
thorough auditing (on end user level) or when you will be enhancing the policy
with additional roles. Also, if you want to use the User Based Access Control
feature, using different SELinux users is important to enforce the control on
different users (if they all use the same SELinux user, then UBAC has little to
no effect).
</p>

<p>
Managing the SELinux accounts is done through <c>semanage user</c>:
</p>

<pre caption="Creating a SELinux user">
# <i>semanage user -a -R "staff_r sysadm_r" sophie</i>
</pre>

<p>
Let's verify how the SELinux users are currently configured:
</p>

<pre caption="Checking the SELinux user identities">
# <i>semanage user -l</i>
SELinux User    SELinux Roles

root            staff_r sysadm_r
sophie          staff_r sysadm_r
staff_u         staff_r sysadm_r
sysadm_u        sysadm_r
system_u        system_r
unconfined_u    unconfined_r
user_u          user_r

# <i>semanage login -l</i>
Login Name                SELinux User

__default__               user_u
root                      root
sophie                    staff_u
swift                     staff_u
system_u                  system_u
</pre>

<p>
Now that a new SELinux user called "sophie" exists, we can now update the Linux
user mapping for "sophie" towards the new SELinux user "sophie":
</p>

<pre caption="Updating the Linux user mapping">
# <i>semanage login -m -s sophie sophie</i>
# <i>semanage login -l</i>
Login Name                SELinux User

__default__               user_u
root                      root
sophie                    sophie
swift                     staff_u
system_u                  system_u
</pre>

<p>
Again, do not forget to relabel this users' files.
</p>

<p>
As you can see, managing SELinux users means defining the roles to which the
user has access to. We already gave a high-level introduction to the default
roles in <uri link="?part=1&amp;chap=2">SELinux Concepts</uri>, but as roles are
important when using a Mandatory Access Control system, let's refresh our memory
again:
</p>

<table>
<tr>
  <th>SELinux Role</th>
  <th>Description</th>
</tr>
<tr>
  <ti>user_r</ti>
  <ti>
    Default end-user role. This role provides access to regular applications and
    activities, but does not allow any system or service administration beyond
    what is expected for a regular user.
  </ti>
</tr>
<tr>
  <ti>staff_r</ti>
  <ti>
    Default administration role for day-to-day activities. This role has some
    additional privileges beyond what is offered through user_r, but is not a
    full system administrative role. It is meant for the non-administrative
    activities done by operators and administrators
  </ti>
</tr>
<tr>
  <ti>sysadm_r</ti>
  <ti>
    System administration role. This role is highly privileged (since it also
    contains the privileges to update the policy) and should only be given to
    fully trusted administrators. It is almost never immediately granted to
    users (they first need to switch roles) except for direct root access (for
    instance through the console) 
  </ti>
</tr>
<tr>
  <ti>system_r</ti>
  <ti>
    System service role, which is used for the runtime services (processes). It
    is never granted to users directly.
  </ti>
</tr>
<tr>
  <ti>unconfined_r</ti>
  <ti>
    The unconfined role is used when the <e>targeted</e> policy is supported.
    This role is given to unconfined users (such as the SELinux unconfined_u
    user) which have very wide privileges (they almost run without constraints).
  </ti>
</tr>
</table> 

<p>
It should be noted that these roles are the default ones, but the security
administrator - yes, that means you - can create additional roles and add
particular privileges to it. We will discuss this later in this book as it means
you'll need to update the Gentoo Hardened SELinux policy.
</p>

</body>
</subsection>
</section>

<section>
<title>Reading Audit Logs</title>
<subsection>
<title>Introduction</title>
<body>

<p>
When working with a SELinux-enabled system, you will eventually notice that
things behave differently, but without giving any meaningful error message.
Usually, when SELinux "denies" a particular access, it logs it into the audit
log of the system, but for the application itself, it is perfectly possible that
it just silently dies. If not, you're most likely to get a <e>permission
denied</e> error message.
</p>

<p>
Initially, SELinux is running in <c>permissive</c> mode, which means that
SELinux will log what it <e>would</e> deny, but still let it through.
This mode is perfect for getting the system in shape without having too
much problems keeping it running. Once you think your security settings are
in order, then this mode can be switched from <c>permissive</c> to
<c>enforcing</c>. We'll talk about these modes later.
</p>

<p>
First, let's take a look at the audit log and see what it is saying...
</p>

</body>
</subsection>
<subsection>
<title>Audit Log Location(s)</title>
<body>

<p>
The SELinux kernel code writes its denials (and sometimes even allowed but
audited activities) into the audit log. If you are running on a Gentoo Hardened
installation with the <c>syslog-ng</c> system logger, then the logger is already
configured to place these audit lines in <path>/var/log/avc.log</path>. However,
different system loggers or system logger configurations might put the entries
in a different log location (such as <path>/var/log/audit.log</path>).
</p>

<p>
Below, you'll find the appropriate lines for the syslog-ng system logger
configuration for writing the events in <path>/var/log/avc.log</path>.
</p>

<pre caption="syslog-ng.conf excerpt for SELinux AVC entries">
<comment># The following lines are only /part/ of the configuration file!</comment>
source kernsrc  { file("/proc/kmsg");       };
destination avc { file("/var/log/avc.log"); };
filter f_avc    { message(".*avc: .*");     };

log {
  source(kernsrc);
  filter(f_avc);
  destination(avc);
};
</pre>

</body>
</subsection>
<subsection>
<title>What is AVC?</title>
<body>

<p>
As we mentioned, SELinux writes its entries in the audit log. These entries are
called <e>avc messages</e> or <e>avc log entries</e>. The abbreviation AVC
stands for <e>Access Vector Cache</e> and, like the name sais, is a caching
system.
</p>

<p>
Using an access vector cache improves performance on dealing with (and
enforcing) activities and privileges. Since SELinux offers a very detailed
approach on privileges and permissions, it would become quite painful
(performance-wise) if each call means that the SELinux code needs to look up the
domain, the target resource label, the privilege and if it is allowed or not
over and over again. Instead, SELinux uses the Access Vector Cache to store past
requests/responses. It is the AVC subsystem that is responsible for checking
accesses and (if necessary) logging it.
</p>

</body>
</subsection>
<subsection>
<title>Reading an AVC Denial Message</title>
<body>

<p>
Below you'll find a typical AVC denial message.
</p>

<pre caption="Example AVC denial message">
Oct 15 13:04:54 hpl kernel: [963185.177043] type=1400 audit(1318676694.660:2472): 
  avc:  denied  { module_request } for  pid=14561 comm="firefox" kmod="net-pf-10"
  scontext=staff_u:staff_r:mozilla_t tcontext=system_u:system_r:kernel_t tclass=system
</pre>

<p>
Let's analyze each part of this message one by one.
</p>

<pre caption="AVC denial: Timestamp and location information">
<i>Oct 15 13:04:54 hpl kernel: [963185.177043]</i> type=1400 audit(1318676694.660:2472): 
  avc:  denied  { module_request } for  pid=14561 comm="firefox" kmod="net-pf-10"
  scontext=staff_u:staff_r:mozilla_t tcontext=system_u:system_r:kernel_t tclass=system
</pre>

<p>
This first part of the message informs you when the message was written (Oct 15
13:04:54), on which host (hpl) and how many seconds since the system was booted
(963185.177043).
</p>

<pre caption="AVC denial: source information">
Oct 15 13:04:54 hpl kernel: [963185.177043] type=1400 audit(1318676694.660:2472): 
  avc:  denied  { module_request } for  <i>pid=14561 comm="firefox"</i> kmod="net-pf-10"
  <i>scontext=staff_u:staff_r:mozilla_t</i> tcontext=system_u:system_r:kernel_t tclass=system
</pre>

<p>
Next is the source of the denial, i.e. what process is trying to do something.
In this case, the process is firefox, with PID 14561, which is running in the
source domain staff_u:staff_r:mozilla_t.
</p>

<pre caption="AVC denial: target resource">
Oct 15 13:04:54 hpl kernel: [963185.177043] type=1400 audit(1318676694.660:2472): 
  avc:  denied  { module_request } for  pid=14561 comm="firefox" <i>kmod="net-pf-10"</i>
  scontext=staff_u:staff_r:mozilla_t <i>tcontext=system_u:system_r:kernel_t</i> tclass=system
</pre>

<p>
The target of the activity is a kernel module (net-pf-10, which is the internal
name given for IPv6), labeled system_u:system_r:kernel_t
</p>

<pre caption="AVC denial: denied action">
Oct 15 13:04:54 hpl kernel: [963185.177043] type=1400 audit(1318676694.660:2472): 
  avc:  denied  { <i>module_request</i> } for  pid=14561 comm="firefox" kmod="net-pf-10"
  scontext=staff_u:staff_r:mozilla_t tcontext=system_u:system_r:kernel_t <i>tclass=system</i>
</pre>

<p>
Finally, the action that is denied (module_request) and its class (system).
These classes help you to identify what is denied, because a read on a file is
different from a read on a directory.
</p>

<p>
For instance, in the following case, a process <c>gorg</c> with PID 13935 is
trying to read a file called <path>localtime</path> with inode 130867 which
resides on the device <path>/dev/md3</path>:
</p>

<pre caption="AVC denial example">
Oct 15 14:40:30 hpl kernel: [968909.807802] type=1400 audit(1318682430.323:2614):
  avc:  denied  { read } for  pid=13935 comm="gorg" name="localtime" dev=md3 ino=130867
  scontext=staff_u:sysadm_r:gorg_t tcontext=system_u:object_r:locale_t tclass=file
</pre>

<p>
In this case, it might be obvious that the file is <path>/etc/localtime</path>,
but when that isn't the case, then you can find the following two commands
useful:
</p>

<pre caption="Finding out the target resource based on inode and device">
<comment>(Find out which device /dev/md3 is)</comment>
# <i>mount | grep /dev/md3</i>
/dev/md3 on / type ext4 (rw,seclabel,noatime,barrier=1,nodelalloc,data=journal)

<comment>(Find out what file has inode 130867)</comment>
# <i>find / -xdev -inum 130867</i>
/etc/localtime
</pre>

</body>
</subsection>
<subsection>
<title>Handling AVC denials</title>
<body>

<p>
The major part of configuring SELinux is reading the denials, finding out what
needs to be fixed (or ignored), fix it, and repeat the steps. Hopefully, the
rest of this handbook will help you figure out what is causing a denial.
</p>

<p>
Denials can be cosmetic (an activity that is denied, but has no effect on the
application's functional behaviour). If that is the case, the denial can be
marked as <e>dontaudit</e>, meaning that the denial is not logged by default
anymore. If you think that a denial is occurring but you do not see it in the
logs, try disabling the <e>dontaudit</e> rules:
</p>

<pre caption="Disabling dontaudit">
<comment>(The command can also be abbreviated to "semodule -DB")</comment>
# <i>semodule --build --disable_dontaudit</i>
</pre>

<p>
In most cases though, denials need to be acted upon. Actions that might need to
happen are:
</p>

<ul>
  <li>
    relabeling the target resource (wrong labels might cause legitimate actions
    to be denied)
  </li>
  <li>
    relabeling the source (process' binary file) as a wrong label might cause
    the application to run in the wrong domain
  </li>
  <li>
    loading a necessary SELinux module, since the modules contain the rules to
    allow (and label) resources. Without the appropriate module loaded, you will
    notice denials since no other module gives the necessary grants (allow
    statements)
  </li>
  <li>
    granting the right role to the user executing the application. We have
    covered users and their roles initially but we will go deeper into this
    subject later in the handbook.
  </li>
  <li>
    adding your own SELinux policy statements, most likely because no SELinux
    policy module exists for the application you are trying to run
  </li>
</ul>

</body>
</subsection>
</section>

<section>
<title>Using (File) Labels</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Within SELinux, access privileges are based on the label given on the
originating part (called the <e>domain</e>) and its target resource. For
instance, a process running in the passwd_t domain wants to read (= privilege)
the file <path>/etc/shadow</path> which is labeled shadow_t (= the target
resource). It comes to no surprise then that the majority of SELinux
administration is (re)labeling the resources correctly (and ensuring their label
stays correct).
</p>

</body>
</subsection>
<subsection>
<title>Getting File Label(s)</title>
<body>

<p>
There are many ways to relabel commands, and none of them are equal to another.
But before we explain this in more detail, let's first take a look at a few file
labels (and how you can query them).
</p>

<p>
In SELinux, labels are given on a file level through the file systems' ability
to keep <e>extended attributes</e>. For SELinux, the attribute is called
<c>security.selinux</c> and can be obtained through <c>getfattr</c>:
</p>

<pre caption="Getting a file's extended attribute for SELinux">
$ <i>getfattr -n security.selinux /etc/hosts</i>
# file: etc/hosts
security.selinux="system_u:object_r:net_conf_t"
</pre>

<p>
Of course, getting the file attribute this way is time consuming and not that
flexible. For this purpose, most important applications (including
<c>coreutils</c>) are made SELinux-aware. These applications mostly use the
<c>-Z</c> option to display the SELinux context information. In case of files,
this means the extended attribute content:
</p>

<pre caption="Getting the context of a file">
$ <i>ls -Z /etc/hosts</i>
system_u:object_r:net_conf_t   /etc/hosts
</pre>

<p>
Other commands exist that display the context as it should be, like
<c>matchpathcon</c>. However, their purpose is to query the SELinux policy on
your system to find out what the policy ought to be, not what it is:
</p>

<pre caption="Difference between context and matchpathcon result">
$ <i>ls -Z /etc/make.conf</i>
staff_u:object_r:etc_t    /etc/make.conf
$ <i>matchpathcon /etc/make.conf</i>
/etc/make.conf            system_u:object_r:portage_conf_t
</pre>

</body>
</subsection>
<subsection>
<title>Setting File Label(s)</title>
<body>

<p>
Now how can you manipulate file labels? Well, first of all: you will not be
allowed to change the file labels of any possible file (not even if you are the
owner of that file) unless the SELinux policy allows you to. These allow rules
are made on two privilege types: which labels are you allowed to change
(<c>relabelfrom</c>) and to which labels are you allowed to change
(<c>relabelto</c>). You can query these rules through <c>sesearch</c>:
</p>

<pre caption="Querying the relabelto/relabelfrom types">
<comment># From which label on files (-c) is user_t (-s) allowed (-A) to relabel from (-p)?</comment>
$ <i>sesearch -s user_t -c file -p relabelfrom -A</i>
<comment>[...]</comment>
allow user_t mozilla_home_t : file { <comment>...</comment> relabelfrom relabelto } ;
</pre>

<p>
If you have the permission, then you can use <c>chcon</c> to <e>ch</e>ange the
<e>con</e>text of a file:
</p>

<pre caption="Changing a file context">
$ <i>ls -Z strace.log</i>
staff_u:object_r:user_home_t  strace.log
$ <i>chcon -t mutt_home_t strace.log</i>
$ <i>ls -Z strace.log</i>
staff_u:object_r:mutt_home_t  strace.log
</pre>

<p>
If you do not hold the right privileges, you will get a descriptive error
message:
</p>

<pre caption="Trying to change file context">
$ <i>chcon -t shadow_t strace.log</i>
chcon: failed to change context of `strace.log' to `staff_u:object_r:shadow_t': Permission denied
</pre>

<p>
Now, if you now think that <c>chcon</c> is all you need, you're wrong. The
<c>chcon</c> command does nothing more than what it sais - change context. But
when the system relabels files, these changes are gone. Relabeling files is
often done to ensure that the file labels are correct (as in: the labels match
what the SELinux policy sais they ought to be). The SELinux policy contains, for
each policy module, the list of files, directories, sockets, ... and their
appropriate file context (label).
</p>

<p>
We will look at SELinux policy modules later, but below you'll find an excerpt
from such a definition, for the <c>mozilla</c> module:
</p>

<pre caption="Excerpt of the mozilla module file contexts">
/usr/bin/firefox-bin                            -- gen_context(system_u:object_r:mozilla_exec_t,s0)
/usr/bin/mozilla-[0-9].*                        -- gen_context(system_u:object_r:mozilla_exec_t,s0)
/usr/bin/mozilla-bin-[0-9].*                    -- gen_context(system_u:object_r:mozilla_exec_t,s0)
/usr/lib(64)?/galeon/galeon                     -- gen_context(system_u:object_r:mozilla_exec_t,s0)
/usr/lib(64)?/netscape/.+/communicator/communicator-smotif\.real -- gen_context(system_u:object_r:mozilla_exec_t,s0)
/usr/lib(64)?/netscape/base-4/wrapper           -- gen_context(system_u:object_r:mozilla_exec_t,s0)
/usr/lib/[^/]*firefox[^/]*/plugin-container     -- gen_context(system_u:object_r:mozilla_plugin_exec_t,s0)
/usr/lib64/[^/]*firefox[^/]*/plugin-container   -- gen_context(system_u:object_r:mozilla_plugin_exec_t,s0)
</pre>

<p>
To put the right label on a file, you can use the <c>setfiles</c> or
<c>restorecon</c> commands. Since they are both the same command (but with a
slightly different way of using) we'll only talk about <c>restorecon</c> for now
- more information on the <c>setfiles</c> command can be found in its man page.
</p>

<p>
When you use <c>restorecon</c>, the application will query the SELinux policy to
find out what the right label of the file should be. If it differs, it will
change the label to the right setting. That means that you do not need to
provide the label for a file in order for the command to work. Also,
<c>restorecon</c> supports recursivity, so you do not need to relabel files one
by one.
</p>

<pre caption="Using restorecon">
$ <i>ls -Z /etc/make.conf</i>
staff_u:object_r:etc_t            /etc/make.conf
$ <i>restorecon /etc/make.conf</i>
$ <i>ls -Z /etc/make.conf</i>
system_u:object_r:portage_conf_t  /etc/make.conf
</pre>

<p>
Finally, Gentoo also provides a useful application: <c>rlpkg</c>. This script
relabels the files of a Gentoo package (<c>rlpkg &lt;packagename&gt;</c>) or,
given the right arguments, all files on the file system:
</p>

<pre caption="Using rlpkg">
<comment># Relabel the files of the firefox-bin package:</comment>
# <i>rlpkg firefox</i>

<comment># Relabel all files on the file system:</comment>
# <i>rlpkg -a -r</i>
</pre>

</body>
</subsection>
<subsection>
<title>Overriding the SELinux Policy File Labels</title>
<body>

<p>
You might not always agree with the label that the SELinux policy enforces on
the files: you might have your files located elsewhere (a different location for
your Portage tree is a nice example) or you need to label them differently in
order for other applications to work. To not have to <c>chcon</c> these files
over and over again, you can enhance the SELinux policy on your system with
additional file context rules. These rules are used when you call
<c>restorecon</c> as well and override the rules provided by the SELinux policy.
</p>

<p>
To add additional file context rules, you need to use the <c>semanage</c>
command. This command is used to manage, manipulate and update the local SELinux
policy on your system. In this particular case, we will use the <c>semanage
fcontext</c> command:
</p>

<pre caption="Using semanage to add a file context rule">
<comment># Mark /mnt/gentoo/etc/make.conf as a portage_conf_t type</comment>
# <i>semanage fcontext -a -t portage_conf_t /mnt/gentoo/etc/make.conf</i>

<comment># Mark /mnt/gentoo/usr/portage as portage_ebuild_t</comment>
# <i>semanage fcontext -a -t portage_ebuild_t "/mnt/gentoo/usr/portage(/.*)?"</i>
</pre>

<p>
As you can see from the example, you can use wildcards. But beware about using
wildcards: when a rule holds a wildcard, it has a lower priority than a rule
without a wildcard. And the priority on rules with a wildcard is based on how
"down" the string the first occurance of a wildcard is. For more information,
please check out our <uri link="../selinux-faq.xml#matchcontext">FAQ on "How do
I know which file context rule is used for a particular file?."</uri>
</p>

<p>
If you want to delete a file context definition, you use <c>semanage fcontext
-d</c>:
</p>

<pre caption="Deleting a file context definition">
# <i>semanage fcontext -d -t portage_ebuild_t /mnt/gentoo/etc/make.conf</i>
</pre>

<p>
Finally, to view all file context definitions (both user-set and SELinux policy
provided), you can use <c>semanage fcontext -l</c>. To only see the locally set,
add <c>-C</c>:
</p>

<pre caption="Viewing user-set file context enhancements">
# <i>semanage fcontext -C -l</i>
SELinux fcontext                          type             Context
/opt/xxe/bin/.*\.jar                      all files        system_u:object_r:lib_t
/srv/virt/gentoo(/.*)?                    all files        system_u:object_r:qemu_image_t
</pre>

</body>
</subsection>
<subsection>
<title>Customizable types</title>
<body>

<p>
Labels on files are not that hard to understand, but you might come into some
surprises if you do not know that there are also customizable types.
</p>

<p>
A <e>customizable type</e> is a specific type which is not touched by the
SELinux administration tools by default. If you want to relabel a file that
currently holds a customizable type, you will need to force this through the
commands (such as <c>restorecon -F</c>).
</p>

<p>
There are not that many customizable types by default. The list of types that
SELinux considers as customizable are mentioned in the
<path>customizable_types</path> file within the
<path>/etc/selinux/*/contexts</path> location:
</p>

<pre caption="Listing the customizable types">
# <i>cat /etc/selinux/strict/contexts/customizable_types</i>
mount_loopback_t
public_content_rw_t
public_content_t
swapfile_t
textrel_shlib_t
</pre>

<p>
Such types exist because these types are used for files whose location is known
not to be fixed (and as such, the SELinux policy cannot without a doubt know if
the label on the files is correct or not). The <c>public_content_t</c> one,
which is used for files that are readable by several services (like FTP, web
server, ...), might give you a nice example for such a case.
</p>

<p>
If you look at the <c>restorecon</c> man page, it mentions both customizable
types as well as the user section. The latter is for rules that are identified
in the SELinux policy as being files for an end user, like the following
definitions in the <c>mozilla</c> policy module:
</p>

<pre caption="User section definition within mozilla module">
HOME_DIR/\.mozilla(/.*)?      gen_context(system_u:object_r:mozilla_home_t,s0)
HOME_DIR/\.netscape(/.*)?     gen_context(system_u:object_r:mozilla_home_t,s0)
HOME_DIR/\.phoenix(/.*)?      gen_context(system_u:object_r:mozilla_home_t,s0)
</pre>

<p>
Although in the above example, forcing <c>restorecon</c> on the files is
probably correct, there are examples where you do not want this. For instance,
the firefox policy by default only allows the application to write to
directories labeled <c>mozilla_home_t</c>. If you want to download something,
this isn't possible (unless you download it into <path>~/.mozilla</path>). The
solution there is to label a directory (say <path>~/Downloads</path>) as
<c>mozilla_home_t</c>. 
</p>

</body>
</subsection>
</section>

<section>
<title>SELinux Policy and Booleans</title>
<subsection>
<title>Introduction</title>
<body>

<p>
We have dealt with users and labels now, but there is still a third aspect that
we haven't touched: the SELinux policy itself.
</p>

<p>
The SELinux policy as offered by Gentoo Hardened is a carefully tuned SELinux
policy, based on the reference policy (a distribution-agnostic SELinux policy)
with minor changes. Hopefully, you will not need to rewrite the policy to suit
it for your needs, but changes are very likely to occur here and there.
</p>

</body>
</subsection>
<subsection>
<title>Changing the SELinux Policy Behavior: Booleans</title>
<body>

<p>
A common and user friendly way of tweaking the SELinux policy is through
booleans. A <e>SELinux boolean</e>, also known as a conditional, changes how the
SELinux policy behaves based on the setting that the user provides. To make this
a bit more clear, let's look at a few booleans available:
</p>

<pre caption="Getting SELinux booleans">
# <i>getsebool -a | grep ^user</i>
user_direct_mouse --> off
user_dmesg --> off
user_ping --> on
user_rw_noexattrfile --> off
user_tcp_server --> off
user_ttyfile_stat --> off
</pre>

<p>
Although they might not say much on first sight, these booleans alter how the
SELinux policy enforces user activity (hence the booleans starting with
<path>user_</path>). For instance, <c>user_ping</c> is set to <c>on</c>, so a
user is allowed to use <c>ping</c>. If it was set to <c>off</c>, the SELinux
policy would not allow a user to execute <c>ping</c>.
</p>

<p>
Booleans can be toggled on or off using <c>setsebool</c> or <c>togglesebool</c>.
With <c>setsebool</c> you need to give the value (on or off) whereas
<c>togglesebool</c> switches the value.
</p>

<pre caption="Disallowing the use of ping by users">
# <i>setsebool user_ping off</i>
</pre>

<p>
By default, <c>setsebool</c> does not store the boolean values - after a reboot,
the old values are used again. To persist such changes, you need to add the
<c>-P</c> option:
</p>

<pre caption="Persistedly allow users to run dmesg">
# <i>setsebool -P user_dmesg on</i>
</pre>

<p>
Booleans allow administrators to tune the policy, and allow security
administrators to write policies that are flexible enough for a more widespread
use. In terms of Gentoo flexibility, these booleans might not be used enough (it
would be nice to couple these booleans on USE flags, so that a server build with
USE="ldap" gets the SELinux policy to use ldap, whereas USE="-ldap" disallows
it). But still, the use of booleans is a popular method for making a more
flexible SELinux policy.
</p>

</body>
</subsection>
<subsection>
<title>Managing SELinux Policy Modules</title>
<body>

<p>
In this last part, we'll cover SELinux policy modules. We mentioned before that
the SELinux policy used by Gentoo Hardened is based on the reference policy,
which offers a modular approach to SELinux policies. There is one base policy,
which is mandatory on every system and is kept as small as possible. The rest
are SELinux policy modules, usually providing the declarations, rules and file
contexts for a single application (or type of applications).
</p>

<p>
With <c>semodule -l</c> you can see the list of SELinux policy modules loaded:
</p>

<pre caption="Listing the loaded SELinux modules">
# <i>semodule -l</i>
alsa       1.11.0
apache     2.3.0
entropyd   1.6.0
dbus       1.15.0
dnsmasq    1.9.0
<comment>(...)</comment>
</pre>

<p>
Within Gentoo Hardened, each module is provided by the package
<path>sec-policy/selinux-&lt;modulename&gt;</path>. For instance, the first
module encountered in the above example is provided by
<path>selinux-alsa</path>:
</p>

<pre caption="The SELinux policy module package in Gentoo">
$ <i>emerge --search selinux-alsa</i>
Searching...
[ Results for search key : selinux-alsa ]
[ Applications found : 1]

* sec-policy/selinux-alsa
    Latest version available: 2.20110726
    Latest version installed: 2.20110726
    Size of files: 574 kB
    Homepage:      http://www.gentoo.org/proj/en/hardened/selinux/
    Description:   SELinux policy for alsa
    License:       GPL-2
</pre>

<p>
If you need a module that isn't installed on your system, this is considered a
bug (packages that need it should depend on the SELinux policy package if the
selinux USE flag is set). But once you install the package yourself, the module
will be loaded automatically:
</p>

<pre caption="Installing a SELinux policy package">
# <i>emerge selinux-screen</i>
</pre>

<p>
If you want to remove a module from your system though, uninstalling the package
will not suffice: the SELinux policy module itself is copied to the policy store
earlier (as part of the installation process) and is not removed from this store
by Portage. Instead, you will need to remove the module manually:
</p>

<pre caption="Uninstalling a SELinux policy module">
# <i>emerge -C selinux-screen</i>
# <i>semodule -r screen</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>Next steps</title>
<subsection>
<title>What to do now?</title>
<body>

<p>
Up until now, your system has been running in <e>permissive mode</e>. You will
need to enable <e>enforcing</e> before you are properly protected by SELinux. We
will discuss how to switch to enforcing mode in <uri
link="?part=2&amp;chap=4">Permissive, Unconfined, Disabled or What Not...</uri>
but before that, you will need to consider a few things...
</p>

</body>
</subsection>
<subsection>
<title>Initramfs users</title>
<body>

<p>
If your system uses an initramfs to boot up, you will <e>not</e> be able to boot
straight into enforcing mode (due to <uri
link="https://bugs.gentoo.org/397567">bug #397597</uri>). To work around this
issue, you can create the following init script which will switch from a
permissive mode into forcing mode reasonably fast within the boot process (and
before the network is started):
</p>

<pre caption="Content of /etc/init.d/selinux_enforce">
#!/sbin/runscript
# Copyright 1999-2012 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/hardened/selinux/hb-using-configuring.xml,v 1.4 2012/05/26 18:23:13 swift Exp $

description="Switch into SELinux enforcing mode"

depend() {
	need localmount
}

start() {
	ebegin "Restoring file contexts in /dev"
	restorecon -R /dev
	eend 0
	
	if get_bootparam "nosetenforce" ; then
		ewarn "Skipping switching to enforcing mode as requested by kernel cmdline"
	else
		. /etc/selinux/config

		if [ "${SELINUX}" = "enforcing" ];
		then
			ebegin "Switching to enforcing mode"
			setenforce 1
			eend $?
		fi
	fi
}
</pre>

<p>
Add the init script to the boot runlevel, and edit your boot loader
configuration to always boot with <c>enforcing=0</c> set. The init script will
update the file contexts in <path>/dev</path> and then, if your system is
configured to run in enforcing mode, switch to enforcing mode.
</p>

<p>
If you need to temporarily stay in permissive mode, you can add
<c>nosetenforce</c> as boot parameter (after <c>enforcing=0</c>) which will skip
the <c>setenforce</c> step).
</p>

</body>
</subsection>
<subsection>
<title>Users of a graphical environment</title>
<body>

<p>
If you boot into a graphical environment (using GDM, KDM or another graphical
login manager) you will need to update the PAM configuration file(s) of the
managers with the following:
</p>

<pre caption="Example update on LXDM PAM configuration file">
<comment># /etc/pam.d/lxdm</comment>
<comment># [...]</comment>
session    required     pam_loginuid.so
session    optional     pam_gnome_keyring.so auto_start
<i>session	   optional     pam_selinux.so</i>
</pre>

<p>
This will ensure that the security context in which you are logged on is set
correctly. We will update the packages that place those PAM files accordingly,
but it might take some time.
</p>

</body>
</subsection>
</section>

</sections>
