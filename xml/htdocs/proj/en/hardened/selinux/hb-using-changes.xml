<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/3.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/hardened/selinux/hb-using-changes.xml,v 1.15 2013/08/16 11:49:42 swift Exp $ -->

<sections>
<version>15</version>
<date>2013-08-16</date>


<section>
<title>Introduction</title>
<subsection>
<title>About this document</title>
<body>

<p>
This document will give an overview of all SELinux documented changes made
on particular dates and that might be important for users to follow up through.
</p>

<p>
Changes that only affect ~arch users will be documented below and moved up when
they are stabilized. It is possible though that these changes will be "fixed"
automatically and as such removed from this page.
</p>

</body>
</subsection>
</section>

<section>
<title>Overview of Changes for Stable Users</title>
<subsection>
<title>2013/04/19 - Introducing selocal command</title>
<body>

<p>
With policycoreutils-2.1.13-r11 onwards, a new command called <c>selocal</c> is
available. This command allows users to easily add in additional SELinux policy
rules to the local policy without having go through the hassle of building and
maintaining their own <path>.te</path> files. Instead, this command does that
for you.
</p>

<p>
Rules that are added to the local policy (hence the name, <c>selocal</c>) can be
accompanied with a small comment to allow users to describe why a change was
added (or to refer to a bug id on Gentoo's bugzilla).
</p>

<pre caption="Adding a rule to the local policy">
# <i>selocal -a "rpcbind_stream_connect(sysadm_t)" -c "Be able to call exportfs (NFS)"</i>
# <i>selocal --build --load</i>
</pre>

<p>
With <c>--list</c> you can view the currently added local policy rules, and with
<c>--delete</c> they can be removed from the local policy. When you want to have
the changes take effect, run <c>selocal --build --load</c> to build the new
local policy and load it in memory.
</p>

</body>
</subsection>
<subsection>
<title>2013/04/16 - Introduce selinux_gentoo init script</title>
<body>

<p>
With policycoreutils-2.1.13-r8 and later, we now provide our own init script
<path>selinux_gentoo</path>, which includes the necessary support for the
initramfs users, but also resets the contexts of dynamically generated resources
(on pseudo file systems) which are different from the default setting.
</p>

<p>
The first user here is <path>/sys/devices/system/cpu/online</path> which gets
labeled cpu_online_t (from revision 13 of the SELinux policy, or when using live
ebuilds for the policy).
</p>

<p>
The init script will by default also restore the contexts of all
<path>/dev</path> devices (unless you boot with the <c>norestorecon</c> option)
and will switch to enforcing mode if <path>/etc/selinux/config</path> has
<c>SELINUX=enforcing</c> set but the user booted with <c>enforcing=0</c> (unless
you boot with <c>nosetenforce</c> option).
</p>

<p>
This means that users are now encouraged to add this init script to the boot
runlevel:
</p>

<pre caption="Adding selinux_gentoo to the boot runlevel">
# <i>rc-update add selinux_gentoo boot</i>
</pre>

</body>
</subsection>

<subsection>
<title>2012/12/04 - Introduce USE=unconfined</title>
<body>

<p>
From <path>selinux-base-2.20120725-r9</path> onwards, we will now also support
a <c>USE=unconfined</c> setting. When enabled, it will configure your SELinux
policy to support the unconfined domains. If your policy is <e>targeted</e>,
this behavior will be implied, whereas the <e>strict</e> policy will not
consider this USE flag at all (it will not activate unconfined domains on
strict).
</p>

<p>
Supporting this USE flag allows us to differentiate unconfined domains versus
regular ones when using the <e>mls</e> or <e>mcs</e> policy types. When set, the
<path>selinux-unconfined</path> package will be built as well, and the module
will be loaded, and the policy <path>seusers</path> file (which contains the
default domain mappings for users) will be updated to use the
<c>unconfined_u</c> SELinux user for root and other users.
</p>

</body>
</subsection>
<subsection>
<title>2012/08/16 - Adding system_r role to admins</title>
<body>

<p>
Since <path>selinux-base-2.20120725-r3</path> and later, init scripts will now
support the upstream "labeled" init script approach. This means that those
services whose init script follows the <path>&lt;domain&gt;_initrc_exec_t</path>
naming convention can now be assigned to specific users (allowing those to
manage the services without the need to grant them system administration
rights).
</p>

<p>
The downside of this approach is that the system administrator itself (who uses
the <c>sysadm_t</c> domain) now also needs to be granted the right to manage
those services. And granting this right means that the SELinux user (be it
<c>root</c> or <c>staff_u</c>) needs to be granted the <c>system_r</c> role:
</p>

<pre caption="Granting system_r role">
# <i>semanage user -m -R "staff_r sysadm_r system_r" root</i>
# <i>semanage user -m -R "staff_r sysadm_r system_r" staff_u</i>
</pre>

</body>
</subsection>
<subsection>
<title>2012/06/24 - Definition of /run in fstab</title>
<body>

<p>
The <path>/run</path> location needs to be mounted with the <c>var_run_t</c>
context. To do so, <path>/etc/fstab</path> needs to be modified as per the
instructions in <uri link="?part=2&amp;chap=1#doc_chap1_sect4">Setting the
filesystem contexts</uri>.
</p>

</body>
</subsection>
<subsection>
<title>2012/05/26 - Support of initramfs</title>
<body>

<p>
Users who boot with an initramfs will need to boot in permissive mode first, and
later on switch to enforcing mode. This can be done automatically using an
init script, as documented at <uri
link="/proj/en/hardened/selinux/selinux-handbook.xml?part=2&amp;chap=2#doc_chap5">Initramfs
users</uri>.
</p>

</body>
</subsection>
<subsection>
<title>2012/05/26 - Support for graphical login managers</title>
<body>

<p>
Users who boot into a graphical environment (such as through GDM) will need to
edit their PAM configuration files accordingly to support SELinux security
context settings. This is documented at <uri
link="/proj/en/hardened/selinux/selinux-handbook.xml?part=2&amp;chap=2#doc_chap5">Users
of a graphical environment</uri>.
</p>

</body>
</subsection>
<subsection>
<title>2012/05/18 - No more sandbox configuration needed</title>
<body>

<p>
The previously documented editing of <path>/etc/sandbox.conf</path> to open
write access to <path>/sys/fs/selinux/context</path> can be removed as the
SELinux profile does this now automatically.
</p>

</body>
</subsection>
<subsection>
<title>2012/04/29 - Edit of lvm-start/stop scripts no longer needed</title>
<body>

<p>
When users install the newly stabilized 2.20120215 policies, the documented
editing of <path>/lib/rcscripts/addons/lvm-st*.sh</path> is no longer needed.
</p>

</body>
</subsection>
<subsection>
<title>2012/02/21 - /dev mount line in fstab no longer needed</title>
<body>

<p>
The previously documented /dev mount line in <path>/etc/fstab</path> is no
longer needed as <path>util-linux-2.20.1-r1</path> has been marked stable (which
contains the correct bug fix).
</p>

</body>
</subsection>
<subsection>
<title>2011/12/10 - Deprecation of selinux/v2refpolicy/* profiles</title>
<body>

<p>
The old SELinux profiles (starting with <c>selinux/v2refpolicy</c>) are not
supported anymore. Users are strongly encouraged to switch to the new profiles
(those ending with <c>/selinux</c>).
</p>

</body>
</subsection>
<subsection>
<title>2011/07/22 - Introduction of MLS/MCS support</title>
<body>

<p>
We now support MLS and MCS, right next to targeted and strict SELinux policy
types. When using MLS or MCS, you will need to update the <path>/tmp</path>
entry in your <path>/etc/fstab</path> to use
<c>rootcontext=system_u:object_r:tmp_t:s0</c> (note the trailing <c>:s0</c>).
</p>

</body>
</subsection>
</section>

<section>
<title>Overview of Changes for ~Arch Users</title>
<subsection>
<title>2013/07/07 - Introduced support for mcstrans</title>
<body>

<p>
When the SELinux policy is MLS-enabled (so it is MCS or MLS), then we have the
option of managing categories. Categories allow us to "tag" resources and make
sure that only processes that have the right category set assigned to them can
read/manipulate the resources.
</p>

<p>
For SELinux, categories are numbers, starting from <c>c0</c> (category zero) to
whatever maximum is used in the policy:
</p>

<pre caption="Checking the maximum number of categories">
$ <i>seinfo | grep Categories</i>
  Sensitivities:      1   Categories:       1024
</pre>

<p>
For most administrators/humans though, this is not that efficient. To support
more human readable formats, SELinux supports category translations (and even
sensitivity translations). Inside a configuration file
(<path>setrans.conf</path> in the main configuration directory, like
<path>/etc/selinux/mcs</path>) administrators can enter common sensitivity sets
and ranges. The <c>chcat</c> tool can then be used to list those:
</p>

<pre caption="Listing translated sensitivity ranges">
# <i>chcat -L</i>
s0                             SystemLow
s0-s0:c0.c1023                 SystemLow-SystemHigh
s0:c0.c1023                    SystemHigh
</pre>

<p>
To enable these translations, create the proper translation file (of which you
can find numerous examples in <path>/usr/share/doc/policycoreutils-*/mcstrans</path>)
and then start the <c>mcstransd</c> service.
</p>

<pre caption="Starting the mcstransd service">
# <i>rc-service mcstransd start</i>
</pre>

<p>
That's it - if we now look at contexts, we will see the translated ranges:
</p>

<pre caption="Listing contexts to see translated ranges">
# <i>ls -lZ seusers</i>
-rw-r--r--. root root system_u:object_r:selinux_config_t:SystemLow seusers
</pre>

</body>
</subsection>
</section>

</sections>
