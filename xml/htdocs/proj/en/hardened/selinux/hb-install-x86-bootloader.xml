<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/hardened/selinux/Attic/hb-install-x86-bootloader.xml,v 1.1 2004/08/27 00:04:12 pebenito Exp $ -->

<sections>
<section>
<title>Making your Choice</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Now that your kernel is configured and compiled and the necessary system
configuration files are filled in correctly, it is time to install a
program that will fire up your kernel when you start the system. Such a
program is called a <e>bootloader</e>. For x86, Gentoo Linux provides <uri
link="#grub">GRUB</uri> and <uri link="#lilo">LILO</uri>. But before we
install one of these two bootloaders, we inform you how to configure framebuffer
(in case you want it of course). With framebuffer you can run the Linux command
line with (limited) graphical features (such as using the nice bootsplash
image Gentoo provides).
</p>

</body>
</subsection>
<subsection>
<title>Optional: Framebuffer</title>
<body>

<p>
<e>If</e> you have configured your kernel with framebuffer support (or you used
<c>genkernel</c>'s default kernel configuration), you
have to add a <c>vga</c>-statement to your bootloader configuration
file if you require framebuffer. The next table lists the available 
<c>vga</c>-values you can use. In the example configuration files we use 
<e>800x600 @ 16bpp</e>, thus <e>788</e>.
</p>

<table>
<tr>
  <ti></ti><th>640x480</th><th>800x600</th><th>1024x768</th><th>1280x1024</th>
</tr>
<tr>
  <th>8 bpp</th><ti>769</ti><ti>771</ti><ti>773</ti><ti>775</ti>
</tr>
<tr>
  <th>16 bpp</th><ti>785</ti><ti>788</ti><ti>791</ti><ti>794</ti>
</tr>
<tr>
  <th>32 bpp</th><ti>786</ti><ti>789</ti><ti>792</ti><ti>795</ti>
</tr>
</table>

<p>
Remember (or write down) your value; you will need it shortly hereafter.
</p>

<p>
Now continue by installing <uri link="#grub">GRUB</uri> <e>or</e> <uri
link="#lilo">LILO</uri>.
</p>

</body>
</subsection>
</section>
<section id="grub">
<title>Default: Using GRUB</title>
<subsection>
<title>Understanding GRUB's terminology</title>
<body>

<p>
The most critical part of understanding GRUB is getting comfortable with
how GRUB refers to hard drives and partitions. Your Linux partition
<path>/dev/hda1</path> is called <path>(hd0,0)</path> under GRUB. Notice the 
parenthesis around the <path>hd0,0</path> - they are required.
</p>

<p>
Hard drives count from zero rather than "a" and partitions start at zero 
rather than one. Be aware too that with the hd devices, only hard drives are 
counted, not atapi-ide devices such as cdrom players and burners.  Also, the 
same construct is used with scsi drives. (Normally they get higher numbers 
than ide drives except when the bios is configured to boot from scsi devices.)
</p>

<p>
Assuming you have a hard drive on <path>/dev/hda</path>, a cdrom player on 
<path>/dev/hdb</path>, a burner on <path>/dev/hdc</path>, a second hard drive 
on <path>/dev/hdd</path> and no SCSI hard drive, <path>/dev/hdd7</path> gets 
translated to <path>(hd1,6)</path>. It might sound tricky and tricky it is 
indeed, but as we will see, GRUB offers a tab completion mechanism
that comes handy for those of you having a lot of hard drives and
partitions and who are a little lost in the GRUB numbering scheme.
</p>

<p>
Having gotten the feel for that, it is time to install GRUB.
</p>

</body>
</subsection>
<subsection>
<title>Installing GRUB</title>
<body>

<p>
To install GRUB, let's first emerge it:
</p>

<pre caption = "Installing GRUB">
# <i>emerge grub</i>
</pre>

<p>
Although GRUB is now installed, we still need to write up a
configuration file for it and place GRUB in our MBR so that GRUB automatically 
boots your newly created kernel. Create <path>/boot/grub/grub.conf</path> with
<c>nano</c> (or, if applicable, another editor):
</p>

<pre caption = "Creating /boot/grub/grub.conf">
# <i>nano -w /boot/grub/grub.conf</i>
</pre>

<p>
Now we are going to write up a <path>grub.conf</path>.  Make sure you use
<e>your</e> kernel image filename and, if appropriate, <e>your</e> initrd image
filename.
</p>

<pre caption = "grub.conf">
<comment># Which listing to boot as default. 0 is the first, 1 the second etc.</comment>
default 0
<comment># How many seconds to wait before the default listing is booted.</comment>
timeout 30
<comment># Nice, fat splash-image to spice things up :)
# Comment out if you don't have a graphics card installed</comment>
splashimage=(hd0,0)/grub/splash.xpm.gz

title=Gentoo Linux 2.4.26-r6
<comment># Partition where the kernel image (or operating system) is located</comment>
root (hd0,0)
kernel /kernel-2.4.26-gentoo-r6 root=/dev/hda3 gentoo=nodevfs

<comment># The next three lines are only if you dualboot with a Windows system.</comment>
<comment># In this case, Windows is hosted on /dev/hda6.</comment>
title=Windows XP
rootnoverify (hd0,5)
makeactive
chainloader +1
</pre>

<note>
If you use a different partitioning scheme and/or kernel image, adjust 
accordingly. However, make sure that anything that follows a GRUB-device 
(such as <path>(hd0,0)</path>) is relative to the mountpoint, not the root. In 
other words, <path>(hd0,0)/grub/splash.xpm.gz</path> is in reality 
<path>/boot/grub/splash.xpm.gz</path> since <path>(hd0,0)</path> is 
<path>/boot</path>.
</note>

<impo>
<c>gentoo=nodevfs</c> must be added to the kernel command,
since SELinux cannot use devfs.
</impo>

<p>
If you need to pass any additional options to the kernel, simply add
them to the end of the kernel command. We're already passing one option
(<c>root=/dev/hda3</c> or <c>real_root=/dev/hda3</c>), but you can pass others 
as well. As an example we use the <c>vga</c> statement for framebuffer we 
discussed previously:
</p>

<pre caption = "Adding the vga-statement as a kernel option">
title=Gentoo Linux 2.4.26-r6
  root (hd0,0)
  kernel /kernel-2.4.26-gentoo-r6 root=/dev/hda3 vga=788 gentoo=nodevfs
</pre>

<p>
If you're using a 2.6.7 or higher kernel and you jumpered your harddrive
because the BIOS can't handle large harddrives you'll need to append
<c>hdx=stroke</c>.
</p>

<p>
Now save the <path>grub.conf</path> file and exit. You still need to install 
GRUB in the MBR (Master Boot Record) so that GRUB is automatically executed when
you boot your system.
</p>

<p>
To install GRUB you will need to issue the <c>grub-install</c> command. However,
<c>grub-install</c> won't work off-the-shelf since we are inside a chrooted
environment. We need to update <path>/etc/mtab</path> (the file with information
about all mounted filesystems) first: luckily there is an easy way to accomplish
this - just copy over <path>/proc/mounts</path> to <path>/etc/mtab</path>:
</p>

<pre caption="Updating /etc/mtab">
# <i>cp /proc/mounts /etc/mtab</i>
</pre>

<p>
Now we can install GRUB using <c>grub-install</c>:
</p>

<pre caption="Running grub-install">
# <i>grub-install --root-directory=/boot /dev/hda</i>
</pre>

<p>
If you have more questions regarding GRUB, please consult the <uri
link="http://www.gnu.org/software/grub/grub-faq.html">GRUB FAQ</uri> or the <uri
link="http://www.gnu.org/software/grub/manual/">GRUB Manual</uri>.
</p>

<p>
Continue with <uri link="#reboot">Rebooting the System</uri>.
</p>

</body>
</subsection>
</section>
<section id="lilo">
<title>Alternative: Using LILO</title>
<subsection>
<title>Installing LILO</title>
<body>

<p>
LILO, the LInuxLOader, is the tried and true workhorse of Linux
bootloaders. However, it lacks some features that GRUB has (which is
also the reason why GRUB is currently gaining popularity). The reason
why LILO is still used is that, on some systems, GRUB doesn't work and
LILO does. Of course, it is also used because some people know LILO and
want to stick with it. Either way, Gentoo supports both, and apparently
you have chosen to use LILO.
</p>

<p>
Installing LILO is a breeze; just use <c>emerge</c>.
</p>

<pre caption = "Installing LILO">
# <i>emerge --usepkg lilo</i>
</pre>

</body>
</subsection>
<subsection>
<title>Configuring LILO</title>
<body>

<p>
To configure LILO, you must create <path>/etc/lilo.conf</path>. Fire up
your favorite editor (in this handbook we use <c>nano</c> for
consistency) and create the file.
</p>

<pre caption = "Creating /etc/lilo.conf">
# <i>nano -w /etc/lilo.conf</i>
</pre>

<p>
Some sections ago we have asked you to remember the kernel-image name
you have created. In the next example <path>lilo.conf</path> we assume
the imagename is <path>kernel-2.4.26-gentoo-r6</path>. We also use the
example partitioning scheme in this example.
</p>

<p>
Make sure you use <e>your</e> kernel image filename and, if appropriate,
<e>your</e> initrd image filename.
</p>

<pre caption = "Example /etc/lilo.conf">
boot=/dev/hda             <comment># Install LILO in the MBR</comment>
prompt                    <comment># Give the user the chance to select another section</comment>
timeout=50                <comment># Wait 5 (five) seconds before booting the default section</comment>
default=gentoo            <comment># When the timeout has passed, boot the "gentoo" section</comment>
<comment># Only if you use framebuffer. Otherwise remove the following line:</comment>
vga=788                   <comment># Framebuffer setting. Adjust to your own will</comment>

image=/boot/kernel-2.4.26-gentoo-r6
  label=gentoo            <comment># Name we give to this section</comment>
  read-only               <comment># Start with a read-only root. Do not alter!</comment>
  root=/dev/hda3          <comment># Location of the root filesystem</comment>
  append="gentoo=nodevfs" <comment># Required for SELinux</comment>


<comment># The next two lines are only if you dualboot with a Windows system.</comment>
<comment># In this case, Windows is hosted on /dev/hda6.</comment>
other=/dev/hda6
  label=windows
</pre>

<note>
If you use a different partitioning scheme and/or kernel image, adjust
accordingly.
</note>

<p>
If you need to pass any additional options to the kernel, add an
<c>append</c> statement to the section. As an example, we add the
<c>vga=788</c> statement to enable framebuffer:
</p>

<pre caption = "Using append to add kernel options">
image=/boot/kernel-2.4.26-gentoo-r6
  label=gentoo
  read-only
  root=/dev/hda3
  <i>append="vga=788 gentoo=nodevfs"</i>
</pre>

<p>
If you're using a 2.6.7 or higher kernel and you jumpered your harddrive
because the BIOS can't handle large harddrives you'll need to append
<c>hdx=stroke</c>.
</p>

<p>
Now save the file and exit. To finish up, you have to run
<c>/sbin/lilo</c> so LILO can apply the <path>/etc/lilo.conf</path> to
your system (i.e. install itself on the disk). Keep in mind that you'll also 
have to rerun <c>/sbin/lilo</c> every time you install a new kernel!
</p>

<pre caption = "Finishing the LILO installation">
# <i>/sbin/lilo</i>
</pre>

</body>
</subsection>
</section>

<section>
<title>Pre-Reboot Preparations</title>
<subsection>
<body>
<p>
We will now install the default policy for SELinux.  The correct policy
version must be installed.  See the
<uri link="?part=4&amp;chap=1#doc_chap6">SELinux Overview</uri> for more information.
We will also be relabeling the filesystems.</p>
<pre caption="Installing the Policy and Relabeling">
# <i>cd /etc/security/selinux/src/policy/</i>
<comment>Adjust policy version if needed.</comment>
# <i>make load</i>
# <i>make chroot_relabel</i>
</pre>
</body>
</subsection>
</section>

<section id="reboot">
<title>Rebooting the System</title>
<subsection>
<body>

<p>
Exit the chrooted environment and unmount all mounted partitions. Then type in 
that one magical command you have been waiting for: <c>reboot</c>.
</p>

<pre caption="Unmounting all partitions and rebooting">
# <i>exit</i>
# <i>umount /mnt/gentoo/boot /mnt/gentoo/proc /mnt/gentoo/selinux /mnt/gentoo</i>
# <i>reboot</i>
</pre>

<p>
Of course, don't forget to remove the bootable CD, otherwise the CD will be
booted again instead of your new Gentoo system.
</p>

</body>
</subsection>
</section>
</sections>
