<?xml version='1.0' encoding="UTF-8"?>


<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="propolice.xml">
<title>Stack-Smashing Protector Gentoo Linux</title>
<subtitle>GCC extension for protecting from stack-smashing attacks</subtitle>
<author title="Authors">
   <mail link="frogger@gentoo.org">Matt Rickard</mail>
</author>
<author title="Authors">
   <mail link="solar@gentoo.org">Ned Ludd</mail>
</author>
<author title="Authors">
   <mail link="pappy@gentoo.org"></mail>
</author>
<abstract>
   The Stack-Smashing Protector (SSP, formerly ProPolice)
   is a GCC extension for protecting from stack-smashing
   attacks. It is implemented as a patch to GCC.
</abstract>

<version>0.5</version>
<date>1 Dec 2003</date>

<chapter>
<title>What is Stack Smashing Protection?</title>
<section>
<body>
<p>
   The Stack-Smashing Protector (SSP, formerly ProPolice)
   is perhaps one of the most sophisticated yet simplistic protective 
   compiler technologies to date which makes use of canary values by 
   rearranging local variables and function pointers. When (ssp) is 
   enabled it can prevent many forms of the common return-to-libc attack.
   It is implemented as a patch to GCC which will automatically insert
   protection code into your programs at compile time. It is developed 
   by Hiroaki Etoh at IBM. For more information visit the official 
   <uri link="http://www.trl.ibm.com/projects/security/ssp/">(ssp) website</uri>.
</p>
<p>
   Overall this is an excellent security measure. We know that the applications
   we use have yet to be discovered bugs, and this protection helps
   minimize the possibility of an exploit due to these bugs. The flawed
   application may well still crash, but privileges will not be
   escalated, and your system will not be compromised. Best of all, we'll
   get some information on where in the program code the overflow
   occurred, which will allow us to quickly track down the problem and
   fix it.
</p>
<p>
   However, ProPolice does not catch all possible overflows, and there
   are still some cases that will get through the stack-smashing
   protection code. This is not an end all, be all solution to security,
   it is merely a step in the right direction.
</p>
<p>
   This patch was recently implemented in OpenBSD 3.3 and later,
   and looks like an excellent addition to proactive security.
</p>
</body>
</section>
</chapter>

<chapter>
<title>How is it implemented in Gentoo?</title>

<section>
<title>Warning</title>
<body>
<p>
   This project is still under development, and has recently undergone
   some significant changes.  These include the update to the gcc 3.3
   series, as well as <mail link="pappy@gentoo.org">Alexander Gabert's</mail>
   work on
   <uri link="http://www.gentoo.org/proj/en/hardened/etdyn-ssp.xml">
   hardened-gcc</uri>.  Work has also begun on moving the __guard and
   __stack_smash_handler symbols into a shared library in glibc.  This
   change has taken place as of gcc-3.3.2-r3.
</p>
<p>
   Anyone who would like to contribute to the development or
   testing/bug-fixing of this project, please go ahead and run it! Since
   this will eventually be targeted at secure systems, it needs all the
   testing it can get.
</p>
</body>
</section>

<section>
<title>GCC Patch</title>
<body>
<p>
   ProPolice is implemented as a <b>GCC patch</b>.  It has been available
   in the Portage tree since <c>gcc-3.2.3-r1 ebuild</c>, and is now
   available in the stable gcc build.
</p>
<p>
   ProPolice adds two new <c>CFLAGS</c> to GCC. 
   These are <c>-fstack-protector</c>
   to enable the stack protection, and <c>-fno-stack-protector</c> (default
   behavior) to explicitly disable the protection.
</p>
<p>
   If you would the protection on by default add <c>-fstack-protector</c> to
   your <c>CFLAGS</c> in <path>/etc/make.conf</path>.
</p>
</body>
</section>

<section>
<title>Results so far</title>
<body>
<p>
   My tests so far have been quite successful. I have however ran into a
   few pitfalls related to ProPolice on Gentoo.
</p>
<p>
<b>Portage/glibc</b><br/><br/>
   There were problems with earlier versions of glibc causing the sandbox to break.
   These issues have been resolved with recent versions of glibc.
</p>
<p>
<b>XFree86</b><br/><br/>
   XFree86 as of <c>4.3.0-r2</c> no longer strips the <c>-fstack-protector</c> flag.
   All of XFree86 can be built successfully with stack protection <b>except</b> 
   the video modules.  This allows us to protect the networking code in XFree86, 
   the most vulnerable to attack.  To build XFree86 with stack protection, a small 
   patch is required.  This patch causes some OpenBSD specific XFree86 code to be 
   run to determine if we are using a ProPolice patched GCC.  If it finds that we are, 
   it will then explicitely add <c>-fno-stack-protector</c> to the module building, but keep
   <c>-fstack-protector</c> for the rest of the source.  This patch is included in the
   <c>4.3.0-r2</c> and newer XFree86 ebuilds.
</p>
<p>
<b>Kernel</b><br/><br/>
   By default the kernel is not able to be compiled with -fstack-protector.  However,
   I have put together a patch that will allow this.  It is based on the patch by
   Hiroaki Etoh.  This patch adds a propolice.c file to the kernel setting up the
   <c>__guard</c> and <c>__stack_smash_handler</c> functions required by propolice.  Since we don't
   enable propolice by default in Gentoo, we need to add -fstack-protector to the 
   kernel makefiles.  For this I have added a configuration option under 
   <c>Processor Type and Features</c> called <c>ProPolice Stack Smashing Protection</c>
   for all architectures supported by propolice.  If you wish to build your kernel with
   this protection, enable this option to add <c>-fstack-protector</c> to your build.
</p>
<p>In my initial testing of this kernel, it showed no noticable performance decrease
   from a standard unprotected kernel.  Benchmarking was done with <c>lmbench</c>.
</p>
<p>This patch is available in the <c>Files</c> section of this document.  It is
   included by default in the <c>hardened-sources</c> kernel.
</p>
<p>
<b>Other Problems</b><br/><br/>
   There are a few other programs that will not successfully build with
   stack protection enabled. These include (but are not limited to) 
   grub, cracklib (part of the base system), tetex, and ocaml.  
   These ebuilds have been updated in portage to filter out the stack 
   protection for now, so you should not have any problems with them.
   If you run into any other packages that will not build due to ProPolice, 
   please report them.
</p>
<p>
<b>Building an entire system with stack protection</b><br/><br/>
   It is now possible to bootstrap and build an entire machine with ProPolice
   stack-smashing protection.  All you need to do at this point is
   add <c>-fstack-protector</c> to your <c>CFLAGS</c> in
   <path>/etc/make.conf</path>.  Things should be quite stable at this
   point, but please report any problems you run into.
</p>
</body>
</section>

<section>
<title>What now?</title>
<body>
<p>
   This is now officially a part of the Hardened Gentoo 
   effort, along with many other security enhancements.  This project
   is quite stable on the gcc 3.2.3 branch, but the later gcc 3.3 based
   builds still requires some more testing.  Please report any bugs you
   find to <uri link="http://bugs.gentoo.org">Bugzilla</uri>
</p>
<p>
   I will be be providing more info and more bug fixes as I continue my
   testing and development of this project.
</p>
</body>
</section>

</chapter>

<chapter>
<title>Files</title>
<section>
<body>
<p>
   This patch should apply cleanly to the 2.4.20 and 2.4.21-rc kernels (among others).
   It will add a ProPolice build option to your kernel config.
</p>
<p>
   <uri link="http://frogger974.homelinux.org/propolice/2.4.20-propolice-build.patch">2.4.20-propolice-build.patch</uri> 
</p>
</body>
</section>
</chapter>

</guide>
