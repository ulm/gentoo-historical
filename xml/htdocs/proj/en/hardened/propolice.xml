<?xml version='1.0' encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/propolice.xml">
<title>ProPolice Protected Gentoo Linux</title>
<subtitle>GCC extension for protecting from stack-smashing applications</subtitle>
<author title="Author">
   <mail link="frogger@gentoo.org">Matt Rickard</mail>
</author>
<abstract>
   ProPolice is a GCC extension for protecting from stack-smashing
   applications. It is a implemented as a patch to GCC.
</abstract>

<version>0.4</version>
<date>28 May 2003</date>

<chapter>
<title>What is ProPolice?</title>
<section>
<body>
<p>
   ProPolice is a GCC extension for protecting from stack-smashing
   applications. It is a implemented as a patch to GCC which will
   automatically insert protection code into your programs at compile
   time. It is developed by Hiroaki Etoh at IBM. For more information
   visit the official 
   <uri link="http://www.trl.ibm.com/projects/security/ssp/">ProPolice website</uri>.
</p>
<p>
   Overall this is an excellent security measure. We know that the applications
   we use have yet to be discovered bugs, and this protection helps
   minimize the possibility of an exploit due to these bugs. The flawed
   application may well still crash, but privileges will not be
   escalated, and your system will not be compromised. Best of all, we'll
   get some information on where in the program code the overflow
   occurred, which will allow us to quickly track down the problem and
   fix it.
</p>
<p>
   However, ProPolice does not catch all possible overflows, and there
   are still some cases that will get through the stack-smashing
   protection code. This is not an end all, be all solution to security,
   it is merely a step in the right direction.
</p>
<p>
   This patch was recently implemented in OpenBSD-current (soon to be 3.3),
   and looks to be an excellent addition to proactive security.
</p>
</body>
</section>
</chapter>

<chapter>
<title>How is it implemented in Gentoo?</title>

<section>
<title>Warning</title>
<body>
<p>
   I must warn you that this is still a new project, and there are still
   some pitfalls and bugs involved in running it. For now, I would not
   recommend this be run by the average user, or by anyone with a system
   in a mission critical position.
</p>
<p>
   However, anyone who would like to contribute to the development or
   testing/bug-fixing of this project, please go ahead and run it! Since
   this will eventually be targeted at secure systems, it needs all the
   testing it can get.
</p>
</body>
</section>

<section>
<title>GCC Patch</title>
<body>
<p>
   ProPolice is implemented as a <b>GCC patch</b>. This patch includes a diff
   against the GCC code, as well as two additional files (a source file
   and a header file). There is also an optional diff that will cause
   stack protection to be enabled by default. I do not recommend this
   latter patch be applied, as it tends to cause problems with a number
   of things, including kernel compilation. The <c>gcc-3.2.3-r1 ebuild</c>
   in portage is now patched for propolice support.
</p>
<p>
   ProPolice adds two new <c>CFLAGS</c> to GCC. 
   These are <c>-fstack-protector</c>
   to enable the stack protection, and <c>-fno-stack-protector</c> (default
   behavior) to explicitly disable the protection.
</p>
<p>
   If you would the protection on by default add <c>-fstack-protector</c> to
   your <c>CFLAGS</c> in <path>/etc/make.conf</path>.
</p>
</body>
</section>

<section>
<title>Results so far</title>
<body>
<p>
   My tests so far have been quite successful. I have however ran into a
   few pitfalls related to ProPolice on Gentoo.
</p>
<p>
<b>Portage/glibc</b><br/><br/>
   The first, and probably most significant problem stems from portage
   and <c>glibc 2.3.1i</c>. If <c>glibc 2.3.1</c> is built with stack protection, portage's sandbox
   will break, and you will no longer be able to emerge packages.
</p>
<p>When using a propolice built <c>glibc 2.3.1</c>, any program
   linked against <c>libpthread</c> will segfault when executed through the sandbox.
   Since tar is linked to libpthread, the emerge will fail while trying to
   unpack the package archive.  I'm still working on tracking down the source
   of this bug. 
</p>
<p>However, <c>glibc 2.3.2</c> seems to be unaffected by this bug.  I recommend that
   anyone using a propolice built system upgrade to <c>glibc 2.3.2</c>.  This will 
   allow you to use the sandbox feature of portage.  
</p>
<p>Until a suitable fix for this sandbox problem is discovered, there are a
   couple different approaches to take:
</p>
<p>
<b>XFree86</b><br/><br/>
   XFree86 as of <c>4.3.0-r2</c> no longer strips the <c>-fstack-protector</c> flag.
   All of XFree86 can be built successfully with stack protection <b>except</b> 
   the video modules.  This allows us to protect the networking code in XFree86, 
   the most vulnerable to attack.  To build XFree86 with stack protection, a small 
   patch is required.  This patch causes some OpenBSD specific XFree86 code to be 
   run to determine if we are using a ProPolice patched GCC.  If it finds that we are, 
   it will then explicitely add <c>-fno-stack-protector</c> to the module building, but keep
   <c>-fstack-protector</c> for the rest of the source.  This patch is included in the
   <c>4.3.0-r2</c> XFree86 ebuild.
</p>
<p>
<b>Kernel</b><br/><br/>
   By default the kernel is not able to be compiled with -fstack-protector.  I have
   put together a patch that will allow this however.  It is based on the patch by
   Hiroaki Etoh.  This patch adds a propolice.c file to the kernel setting up the
   <c>__guard</c> and <c>__stack_smash_handler</c> functions required by propolice.  Since we don't
   enable propolice by default in Gentoo, we need to add -fstack-protector to the 
   kernel makefiles.  For this I have added a configuration option under 
   <c>Processor Type and Features</c> called <c>ProPolice Stack Smashing Protection</c>
   for all architectures supported by propolice.  If you wish to build your kernel with
   this protection, enable this option to add <c>-fstack-protector</c> to your build.
</p>
<p>In my initial testing of this kernel, it showed no noticable performance decrease
   from a standard unprotected kernel.  Benchmarking was done with <c>lmbench</c>.
   These results and more will be posted shortly.
</p>
<p>This patch is available in the <c>Files</c> section of this document, and will soon
   included by default in the <c>hardened-sources</c> kernel.
</p>
<p>
<b>Other Problems</b><br/><br/>
   There are a few other programs that will not successfully build with
   stack protection enabled. This include grub, cracklib (part of the
   base system), tetex, and ocaml.  These ebuilds have been updated in
   portage to filter out the stack protection for now, so you should not
   have any problems with them.  If you run into any other packages that
   will not build due to ProPolice, please report them.
</p>
<p>
<b>Building an entire system with stack protection</b><br/><br/>
   It is now possible to bootstrap and build an entire machine with ProPolice
   stack-smashing protection.  All you need to do at this point is be sure to
   use the <c>gcc-3.2.3-r1</c> ebuild (you will need to unmask it, also remember
   it is in the unstable branch), and add <c>-fstack-protector</c> to your
   <c>CFLAGS</c> in <path>/etc/make.conf</path>.  Things should be quite
   stable at this point, but please report any problems you run into.
</p>
<p>
<b>What now?</b><br/><br/>
   There are plans to merge this project into the base Gentoo system as an
   optional feature.  This is now officially a part of the Hardened Gentoo 
   effort, along with many other security enhancements.  Before any of this 
   is incorporated in the base system it needs more testing, especially on 
   non x86 platforms.
</p>
<p>
   I will be be providing more info and more bug fixes as I continue my
   testing and development of this project.
</p>
</body>
</section>

</chapter>

<chapter>
<title>Files</title>
<section>
<body>
<p>
   This patch should apply cleanly to the 2.4.20 and 2.4.21-rc kernels (among others).
   It will add a ProPolice build option to your kernel config.
</p>
<p>
   <uri link="http://frogger974.homelinux.org/propolice/2.4.20-propolice-build.patch">2.4.20-propolice-build.patch</uri> 
</p>
</body>
</section>
</chapter>

</guide>
