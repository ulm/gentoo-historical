<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/hardened/selinux-constraints.xml,v 1.2 2012/10/28 15:21:07 swift Exp $ -->

<guide lang="en">
<title>SELinux Policy Constraints</title>

<author title="Author">
  <mail>swift</mail>
</author>

<abstract>
Next to the regular type enforcement rules, there are also constraints in place
that further limit when activities can be performed. These constraints are not
that easy to identify, so we document them here.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1</version>
<date>2012-10-14</date>

<chapter>
<title>Constraints</title>
<section>
<title>Introduction</title>
<body>

<p>
Constraints are a set of rules that further define the allowed actions within
an SELinux system. Even if a regular allow rule sais that something is, well,
allowed, a constraint might impose further restrictions on it.
</p>

<p>
The most well-known constraint we have in place is the <e>User Based Access
Control</e> system, enabled if <c>USE=ubac</c> is set.
</p>

<p>
The following is the list of constraints enabled on a system.
</p>

<table>
<tr>
  <th>Description</th>
  <th>Enabled if...</th>
</tr>
<tr>
  <ti>UBAC - User Based Acces Control</ti>
  <ti>USE=ubac</ti>
</tr>
<tr>
  <ti>Identity change constraints</ti>
  <ti>Always</ti>
</tr>
<tr>
  <ti>Domain transitions</ti>
  <ti>Always</ti>
</tr>
</table>

<p>
When describing constraints, we talk about <e>actors</e> (processes, users, ...
that initiate an action) and <e>objects</e> (files, directories, processes,
...). The actor invokes an action against an object, and the constraint
validates if this action is to be allowed or not.
</p>

<p>
Please be aware that constraints are only checked if the regular SELinux rules
allow the action. It is not because a constraint sais that an action is allowed
that it is always allowed - first the regular SELinux enforcement rules need to
apply.
</p>

</body>
</section>
<section id="ubac">
<title>UBAC - User Based Access Control</title>
<body>

<p>
The user based access control generally tries to protect access to files,
directories and other resources owned by a particular SELinux user (not regular
Linux user, but the assigned SELinux user, like <e>user_u</e>) from access by
other SELinux users. 
</p>

<p>
The basic conditions to allow access are as follows:
</p>

<ul>
  <li>
    The actor SELinux user and target object SELinux user are the same, or
  </li>
  <li>
    The actor SELinux user or target object SELinux user is <e>system_u</e>, or
  </li>
  <li>
    The actor SELinux type or target object SELinux type do not have
    <e>ubac_constrained_type</e> attribute set, or
  </li>
  <li>
    The actor SELinux type has one of <e>ubacfile</e>, <e>ubacproc</e>,
    <e>ubackey</e>, ... attributes set
  </li>
</ul>

<p>
When at least one of the above rules is true, then the action is allowed. Note
that the use of the <e>ubac_constrained_type</e> attribute is important here -
whenever either the source domain or target type does not have this attribute
set, then the action is not governed by this constraint. As an example, take the
<e>user_home_t</e> type (regular user files):
</p>

<pre caption="Checking the attributes of user_home_t">
~$ <i>seinfo -tuser_home_t -x</i>
   user_home_t
      file_type
      non_security_file_type
      polyparent
      mountpoint
      polymember
      ubac_constrained_type
      non_auth_file_type
</pre>

<p>
Next to the <e>ubac_constrained_type</e>, other attributes play an important
role within this constraint too. These attributes are the <e>ubacfile</e>,
<e>ubacproc</e>, <e>ubackey</e>, ... attributes. When this attribute is set for
the actor type, then the action isn't governed by the constraint. This allows a
type to take part of the constraint when it is the target object (because it has
the <e>ubac_constrained_type</e> set) but not when it is the actor object.
</p>

</body>
</section>
<section id="id_change">
<title>Identity change constraints</title>
<body>

<p>
Any activity that would create an object identity (be it the <e>create</e>
permission, or <e>relabelto / relabelfrom</e>) is only allowed if the actor
SELinux user and target object SELinux user are the same, or when the actor type
has the <e>can_change_object_identity</e> attribute set.
</p>

<p>
This constraint is for the various file classes (directory, file, sockets, ...),
socket classes (tcp, udp, netlink, ...).
</p>

</body>
</section>
<section id="transition">
<title>Domain transitions</title>
<body>

<p>
Domain transitions are allowed if at least one of the following rules is true:
</p>

<ul>
  <li>
    The actor SELinux user and target object SELinux user are the same
  </li>
  <li>
    The actor SELinux type has the <e>can_change_process_identity</e> attribute
    set, and the target object SELinux type has the <e>process_user_target</e>
    attribute set
  </li>
  <li>
    The actor SELinux type has the <e>cron_source_domain</e> attribute set, and
    either the target object SELinux user is <e>system_u</e> or its type has the
    <e>cron_job_domain</e> attribute set
  </li>
  <li>
    The actor SELinux type has the <e>can_system_change</e> attribute set and
    the target object SELinux user is <e>system_u</e>
  </li>
  <li>
    The actor SELinux type has the <e>process_uncond_exempt</e> attribute set
  </li>
</ul>

<p>
Next to these rules, at least one of the following rules need to be valid too:
</p>

<ul>
  <li>
    The actor SELinux role and target object SELinux role are the same, or
  </li>
  <li>
    The actor SELinux type has the <e>can_change_process_role</e> attribute
    set and the target object SELinux type has the <e>process_user_target</e>
    attribute set, or
  </li>
  <li>
    The actor SELinux type has the <e>cron_source_domain</e> attribute set, and
    the target object SELinux type has the <e>cron_job_domain</e> attribute set,
    or
  </li>
  <li>
    The actor SELinux type has the <e>can_system_change</e> attribute set and
    the target object SELinux role is <e>system_r</e>, or
  </li>
  <li>
    The actor SELinux type has the <e>process_uncond_exempt</e> attribute set
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
