<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/hardened/Attic/disk-cryptography.xml,v 1.3 2004/09/17 14:13:29 swift Exp $ -->

<guide link="/proj/en/hardened/disk-cryptography.xml">

<title>Disk cryptography with dm-crypt</title>

<author title="Author">
  <mail link="tigger@gentoo.org">tigger</mail>
</author>

<abstract>
On-the-fly disk cryptography with dm-crypt
</abstract>

<license/>

<version>0.1</version>
<date>Sep 14 2004</date>

<chapter>
<title>Introduction - Disk Cryptograpy with dm-crypt</title>
<section>
<body>

<p>
This guide aims to briefly guide you through the world of disk cryptography 
and to help you setup encrypted partitions or disks on your machine.
</p>

<p>
Please be aware that you will need to unmask a specific version of
baselayout to get this stuff working at the moment. Although we're confident
that the code works fine, we need wider testing before we unleash
it on the world. If you don't like being an early tester or you can't
afford to lose the data you want to encrypt (you have backups anyway though,
right?) then please don't try this, it might just break.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Prequisites</title>
<section>
<body>

<p>
Before beginning to encrypt things you need to make sure you have kernel
and userland support for dm-crypt and the required mappings.
</p>

<p>
Using Gentoo this is quite easy. The version of baselayout which
includes the "making it easy" functionality is currently masked, as
noted above. So the first thing you do is unmask that version of
baselayout so you can install it:
</p>

<pre caption="Unmasking our dm-crypt friendly baselayout ebuild">
# <i>mkdir -p /etc/portage</i>
# <i>echo '=sys-apps/baselayout-1.11.0' &gt;&gt; /etc/portage/package.unmask</i>
</pre>

<p>
Now remerge baselayout to apply the changes to the init scripts. When the
merging has finished, we need to run etc-update to update the init scripts.
</p>

<note>
Make sure you accept the changes to the init scripts when
etc-update'ing. If you reject the new versions this isn't going to work.
</note>

<pre caption="Remerge baselayout">
# <i>emerge sys-apps/baselayout</i>
# <i>etc-update</i>
</pre>

<p>
You'll need to verify that your kernel has support for dm-crypt. At the
moment this is only available for 2.6 series kernels as it uses the device
mapper. If you're not able to use a 2.6 kernel for some reason, we're afraid you
won't be able to make use of this guide :(
</p>

<p>
Assuming you do have a 2.6 kernel, you need to check that support for
dm-crypt and the crypto algorithms you'd like to use are enabled.
</p>

<pre caption="Making sure dm-crypt and algorithms are enabled">
Device Drivers ---&gt;
  Multiple devices driver support (RAID and LVM) ---&gt;
    [*] Multiple devices driver support (RAID and LVM)
      &lt; &gt;   RAID support
      &lt;*&gt;   Device mapper support
      &lt;*&gt;     Crypt target support
      
<comment>You should enable any of the crypto algorithms you plan on using. The
author recommends the use of SHA1 for hashing and AES for encryption.</comment>

Cryptographic options ---&gt;
  &lt;M&gt;   MD5 digest algorithm
  &lt;M&gt;   SHA1 digest algorithm
  &lt;M&gt;   AES cipher algorithms
</pre>

<p>
If you didn't have any of those options, obviously you'll need to
recompile and install the new kernel (which is beyond the scope of this
document).
</p>

<p>
The last thing that needs to be done before you're ready to start
encrypting things is installing the userland side of dm-crypt. This is
provided by app-crypt/cryptsetup.
</p>

<pre caption="Merging cryptsetup">
# <i>emerge cryptsetup</i>
</pre>

<p>
Thats all... you're good to go :)
</p>

</body> 
</section>
</chapter>

<chapter>
<title>Starting easy - Encrypting swap devices</title>
<section>
<body>

<p>
Ok, lets start at the shallow end. The easiest way to test out the init
scripts on your system is to try setting up an encrypted swap device. If
you make a mess of this, it won't do much damage (if any).
</p>

<p>
The new baselayout will have added a new file in <path>/etc/conf.d</path> 
called <path>cryptfs</path>. This is the file were you setup any dm-crypt
mappings you'd like to use.
</p>

<p>
Start with adding a line for your swap device. Fire up your favorite editor
and, based on the comments inside the file, add a similar line:
</p>

<pre caption="An example swap line">
swap=crypt-swap source='/dev/hda2'
</pre>

<p>
Thats it! So...what does it mean? Well, each line in the cryptfs file
represents either a filesystem or a swap device. Swap lines begin with
swap= and filesystems begin with mount=. So far so good. The bit after
the = is the name of the crypt mapping you'd like to make. Now this can
be anything you like really, but I like to name my mappings crypt-* so
that its obvious to me that they are encrypted. 
</p>

<p>
The source= parameter specifies the path to the device you'd like to encrypt.
In the example line above, we use <path>/dev/hda2</path> as a swap partition. 
You can find out where your swap partition is by looking in 
<path>/etc/fstab</path> for the line with 'swap' in the type field. It doesn't 
matter if the device is an LVM partition or not, dm-crypt doesn't care.
</p>

<p>
Once you've added the line to cryptfs you need to edit your 
<path>/etc/fstab</path> to look at the crypt-mapping instead of the real 
device:
</p>

<pre caption="Example change">
/dev/hda2                none      swap     sw                   0 0
<comment>becomes</comment>
/dev/mapper/crypt-swap   none      swap     sw                   0 0
</pre>

<p>
Thats it. You have now configured an encrypted swap! Reboot and enjoy :)
</p>

</body>
</section>
</chapter>

<chapter>
<title>Understanding whats happening</title>
<section>
<body>

<p>
So now you have an encrypted swap partition. Its probably best to understand
a little bit about whats going on.
</p>

<p>
dm-crypt works by setting up a mapping between a partition on the disk
where the encrypted data is stored and a pseudo partition where the
unencrypted version can be read. 
</p>

<p>
dm-crypt can create mappings for any kind of partition (making dm-crypt
EVMS/LVM/LVM2-safe). The unencrypted pseudo devices appear in
<path>/dev/mapper/&gt;mapping name&gt;</path> and can be used as if they 
were regular partitions.
</p>

<p>
When you are setting up an encrypted partition there are quite a few
options you can choose from which change how the encryption works. The
Gentoo init scripts use sensible defaults for swap and mount so its
fairly easy to encrypt partitions without worrying about the details of
the encryption. We believe our defaults to be pretty good for general
use, so if you're not after military grade security you should be ok to
leave them as-is.
</p>

<p>
However, there are times when you will need to tweak the defaults we provide. 
A common example of this is for the encryption of the <path>/tmp</path>
partition. Most people will probably want this file system re-created each
time the machine is booted, and will want a random encryption key on it
so that they don't have to type anything in on bootup (just as is done
for swap). To achieve this the cryptfs file allows you to give an
options="" argument, and a post_mount="" argument. These options are
described in more detail below.
</p>

</body>
</section>
</chapter>
<chapter>
<title>The /etc/conf.d/cryptfs file in more detail</title>
<section>
<body>

<p>
The cryptfs file is designed to let you setup your partitions flexibly.
I've tried to provide hooks into each stage of the process so you can
set things up how you like without hacking at the init scripts.
</p>

<p>
The hooks/settings are as follows:
</p>

<ul>
  <li>source</li>
  <li>options</li>
  <li>pre_mount</li>
  <li>post_mount</li>
</ul>

<p>
Each line in the file represents either a mount point or a swap
partition, mount= or swap= respectively. To get a working encrypted swap
partion you only need add: swap=crypt-swap source='/dev/hda2'.
</p>

<p>
The 'crypt-swap' bit is the name of the mapping that dm-crypt should
create and is what you will need to use in the path to access the
unencrypted partition. In this case, we'd need to change our fstab to
use <path>/dev/mapper/crypt-swap</path> instead of <path>/dev/hda2</path> 
(as was described above).
</p>

<p>
If we want to encrypt <path>/tmp</path> things get a little more complicated :)
</p>

<p>
For <path>/tmp</path> we don't want to keep it between boots (there is no 
point) and so we don't want to have a specific key for it as we would have to 
type it in every time we boot, which is a waste of time/effort. So, we need to 
have it keyed from <path>/dev/urandom</path>. The way to do this is to use the 
options="" argument in the cryptfs line for <path>/tmp</path>. Everything in 
the options="" argument is passed directly to cryptsetup so all we need do is:
<c>options="-d /dev/urandom"</c> and we're good to go.
</p>

<p>
Our next problem is that because we change the key every time we boot,
the filesystem won't exist any more (we've changed the key so the old
device will look like garbage to the kernel). To get around this we need
to run an mkfs on boot. The pre_mount="" option in the cryptfs lets us do
this. So, we add <c>pre_mount="mke2fs ${dev}"</c> to our <path>/tmp</path>
cryptfs line. The ${dev} variable is replaced with the path to the unencrypted 
end of the mapping at runtime.
</p>

<p>
We're all set to encrypt <path>/tmp</path> now, right? Nope... we're afraid 
not. There is another problem. Because we wipe the filesystem each time we 
boot, we also wipe the file permissions on <path>/tmp</path> which means it 
loses its 1777 mode and things break because they can't write to
<path>/tmp</path>.
</p>

<p>
We have to add another flag to the <path>/tmp</path> cryptfs line to compensate
for this. After the filesystem has been mounted, we need to fix the
ownership and permissions on the mount point. We can do this using the
post_mount="" hook. So, we add another option <c>post_mount="chown
root:root ${mount_point}; chmod 1777 ${mount_point}"</c>. Now, finally, we
can have an encrypted <path>/tmp</path> without the hassle of typing in pass 
phrases.
</p>

</body>
</section>
</chapter>
</guide>
