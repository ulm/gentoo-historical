<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/en/hardened/grsecurity2.xml">

<title>Gentoo Grsecurity v2 Guide</title>

<author title="Author">
  <mail link="solar@gentoo.org">solar</mail>
</author>
<author title="Author">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>

<abstract>
This document features the grsecurity2 security patches, supported kernel
configuration options and tools provided by the grsecurity project to lift your
system's security to higher standards.
</abstract>

<version>0.4</version>
<date>October 06, 2004</date>

<chapter>
<title>About Grsecurity</title>
<section>
<title>The Grsecurity Project</title>
<body>

<p>
The grsecurity project, hosted on <uri>http://www.grsecurity.org</uri>, provides
various patches to the Linux kernel which enhance your system's overall
security. The various features brought by grsecurity are discussed in the next
chapter; a comprehensive list is maintained on the <uri
link="http://www.grsecurity.org/features.php">grsecurity features page</uri>
itself.
</p>

<p>
As grsecurity's features are mostly kernel-based, the majority of this document
explains the various kernel features and their respective sysctl operands (if
applicable). 
</p>

</body>
</section>
<section>
<title>Gentoo Hardened Integration</title>
<body>

<p>
The <uri link="http://hardened.gentoo.org">Gentoo Hardened Project</uri>
maintains security-enhancement features for Gentoo, including but not limited to
grsecurity.
</p>

</body>
</section>
<section>
<title>Kernel Configuration</title>
<body>

<p>
Throughout this document we will talk about kernel configuration using the
kernel variables like <c>CONFIG_GRKERNSEC_PAX_NO_ACL_FLAGS</c>. These are the
variables that the kernel build process uses to determine if a certain feature
needs to be compiled.
</p>

<p>
When you configure your kernel through <c>make menuconfig</c> or similar, you
receive a user interface through which you can select the various kernel
options. If you select the <e>Help</e> button at a certain kernel feature you
will see at the top that it lists such a kernel variable.
</p>

<p>
You can therefore still configure your kernel as you like - with a bit of
thinking. And if you can't find a certain option, there's always the possibility
to edit <path>/usr/src/linux/.config</path> by hand :)
</p>

<p>
Of course, to be able to select the various grsecurity kernel options, you must
enable grsecurity in your kernel:
</p>

<pre caption="Activating grsecurity">
CONFIG_GRKERNSEC=y
CONFIG_GRKERNSEC_CUSTOM=y
</pre>

</body>
</section>
</chapter>

<chapter>
<title>PaX</title>
<section>
<title>Fighting the Exploitation of Software Bugs</title>
<body>

<p>
PaX introduces a couple of security mechanisms that make it harder for attackers
to exploit software bugs that involve memory corruption (so don't treat PaX as
if it protects against all possible software bugs).  The <uri
link="http://pax.grsecurity.net/docs/pax.txt">PaX introduction document</uri>
talks about three possible exploit techniques:
</p>

<ol>
  <li>introduce/execute arbitrary code</li>
  <li>execute existing code out of original program order</li>
  <li>execute existing code in original program order with arbitrary data</li>
</ol>

<p>
One prevention method disallows executable code to be stored in writable 
memory. When we look at a process, it requires five memory regions:
</p>

<ol>
  <li>
    a <e>data section</e> which contains the statically allocated and global
    data
  </li>
  <li>
    a <e>BSS region</e> (Block Started by Symbol) which contains information
    about the zero-initialized data of the process
  </li>
  <li>
    a <e>code region</e>, also called the <e>text segment</e>, which contains
    the executable instructions
  </li>
  <li>
    a <e>heap</e> which contains the dynamically allocated memory
  </li>
  <li>
    a <e>stack</e> which contains the local variables
  </li>
</ol>

<p>
The first PaX prevention method, called <b>NOEXEC</b>, is meant to give control
over the runtime code generation. It marks memory pages that do not contain 
executable code as non-executable. This means that the heap and the stack, 
which only contain variable data and shouldn't contain executable
code, are marked as non-executable. Exploits that place code in these areas with
the intention of running it will fail.
</p>

<p>
NOEXEC does more than this actually, interested readers should focus their
attention to the <uri link="http://pax.grsecurity.net/docs/noexec.txt">PaX
NOEXEC documentation</uri>.
</p>

<p>
The second PaX prevention method, called <b>ASLR</b> (Address Space Layout
Randomization), randomize the addresses given to memory requests. Where
previously memory was assigned contiguously (which means exploits know where
the tasks' memory regions are situated) ASLR randomizes this allocation,
rendering techniques that rely on this information useless.
</p>

<p>
More information about ASLR can be found <uri
link="http://pax.grsecurity.net/docs/aslr.txt">online</uri>.
</p>

</body>
</section>
<section>
<title>Enabling PaX</title>
<body>

<p>
The recommended kernel setting for PaX is:
</p>

<pre caption="Recommended PaX Kernel Configuration">
<comment>#
# PaX Control
#
# CONFIG_GRKERNSEC_PAX_SOFTMODE is not set</comment>
CONFIG_GRKERNSEC_PAX_EI_PAX=y
CONFIG_GRKERNSEC_PAX_PT_PAX_FLAGS=y
CONFIG_GRKERNSEC_PAX_NO_ACL_FLAGS=y
<comment># CONFIG_GRKERNSEC_PAX_HAVE_ACL_FLAGS is not set
# CONFIG_GRKERNSEC_PAX_HOOK_ACL_FLAGS is not set

#
# Address Space Protection
#</comment>
CONFIG_GRKERNSEC_PAX_NOEXEC=y
<comment># CONFIG_GRKERNSEC_PAX_PAGEEXEC is not set</comment>
CONFIG_GRKERNSEC_PAX_SEGMEXEC=y
CONFIG_GRKERNSEC_PAX_EMUTRAMP=y
CONFIG_GRKERNSEC_PAX_MPROTECT=y
<comment># CONFIG_GRKERNSEC_PAX_NOELFRELOCS is not set</comment>
CONFIG_GRKERNSEC_PAX_ASLR=y
CONFIG_GRKERNSEC_PAX_RANDKSTACK=y
CONFIG_GRKERNSEC_PAX_RANDUSTACK=y
CONFIG_GRKERNSEC_PAX_RANDMMAP=y
CONFIG_GRKERNSEC_PAX_RANDEXEC=y
<comment># CONFIG_GRKERNSEC_KMEM is not set
# CONFIG_GRKERNSEC_IO is not set</comment>
CONFIG_GRKERNSEC_PROC_MEMMAP=y
CONFIG_GRKERNSEC_HIDESYM=y
</pre>

<p>
If you are running a non-x86 system you will observe that there is no
CONFIG_GRKERNSEC_PAX_NOEXEC. You should select CONFIG_GRKERNSEC_PAX_PAGEEXEC 
instead as it is the only non-exec implementation around.
</p>

</body>
</section>
<section>
<title>Controlling PaX</title>
<body>

<p>
Not all Linux applications are happy with the PaX security restrictions. These
tools include xorg-x11, java, mplayer, xmms and others. If you plan on using
them you can elevate the protections for these applications using <c>chpax</c>
and <c>paxctl</c>.
</p>

<pre caption="Installing the chpax and paxctl tools">
# <i>emerge app-admin/chpax</i>
# <i>emerge app-admin/paxctl</i>
</pre>

<p>
chpax provides an init script that handles most known application settings for
you:
</p>

<pre caption="Adding the chpax init script to the default runlevel">
# <i>rc-update add chpax default</i>
</pre>

<p>
<c>pax-utils</c> is a small toolbox which contains useful applications to
administrate a PaX aware server. 
</p>

<pre caption="Installing pax-utils">
# <i>emerge pax-utils</i>
</pre>

<p>
Interesting tools include <c>scanelf</c> and <c>pspax</c>:
</p>

<ul>
  <li>
    With <c>scanelf</c> you can scan over library and binary directories and
    list the various permissions and ELF types that pertain to running an ideal
    pax/grsec setup
  </li>
  <li>
    With <c>pspax</c> you can display PaX flags/capabilities/xattr from the
    kernel's perspective
  </li>
</ul>

</body>
</section>
<section>
<title>Verifying the PaX Settings</title>
<body>

<p>
Peter Busser has written a regression test suite called <c>paxtest</c>. This
tool will check various cases of possible attack vectors and inform you of the
result. When you run it, it will leave a logfile called <path>paxtest.log</path>
in the current working directory.
</p>

<pre caption="Installing and running paxtest">
# <i>emerge paxtest</i>

# <i>paxtest</i>
Executable anonymous mapping             : Killed
Executable bss                           : Killed
Executable data                          : Killed
Executable heap                          : Killed
Executable stack                         : Killed
Executable anonymous mapping (mprotect)  : Killed
Executable bss (mprotect)                : Killed
Executable data (mprotect)               : Killed
Executable heap (mprotect)               : Killed
Executable stack (mprotect)              : Killed
Executable shared library bss (mprotect) : Killed
Executable shared library data (mprotect): Killed
Writable text segments                   : Killed
Anonymous mapping randomisation test     : 16 bits (guessed)
Heap randomisation test (ET_EXEC)        : 13 bits (guessed)
Heap randomisation test (ET_DYN)         : 25 bits (guessed)
Main executable randomisation (ET_EXEC)  : 16 bits (guessed)
Main executable randomisation (ET_DYN)   : 17 bits (guessed)
Shared library randomisation test        : 16 bits (guessed)
Stack randomisation test (SEGMEXEC)      : 23 bits (guessed)
Stack randomisation test (PAGEEXEC)      : No randomisation
Return to function (strcpy)              : Vulnerable
Return to function (memcpy)              : Vulnerable
Return to function (strcpy, RANDEXEC)    : Killed
Return to function (memcpy, RANDEXEC)    : Killed
Executable shared library bss            : Killed
Executable shared library data           : Killed
</pre>

<p>
In the above example run you notice that:
</p>

<ul>
  <li>
    strcpy and memcpy are listed as <e>Vulnerable</e>. This is expected and
    normal - it is simply showing the need for a technology such as <uri
    link="/proj/en/hardened/propolice.xml">ProPolice/SSP</uri>
  </li>
  <li>
    there is no randomization for PAGEEXEC. This is normal since our recommended
    x86 kernel configuration didn't activate the PAGEEXEC setting. However, on
    arches that support a true NX (non-executable) bit (most of them do,
    including x86_64), PAGEEXEC is the only method available for NOEXEC and 
    has no performance hit.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>RBAC</title>
<section>
<title>Role Based Access Control</title>
<body>

<p>
There are two basic types of access control mechanisms used to prevent
unauthorized access to files (or information in general): DAC (Discretionary
Access Control) and MAC (Mandatory Access Control). By default, Linux uses a DAC
mechanism: the creator of the file can define who has access to the file. A MAC
system however forces everyone to follow rules set by the administrator.
</p>

<p>
The MAC implementation grsecurity supports is called Role Based Access
Control. RBAC associates <e>roles</e> with each user. Each role defines what
operations can be performed on certain objects. Given a well-written collection
of roles and operations your users will be restricted to perform only those
tasks that you tell them they can do. The default "deny-all" ensures you that a
user cannot perform an action you haven't thought of.
</p>

</body>
</section>
<section>
<title>Configuring the Kernel</title>
<body>

<p>
The recommended kernel setting for RBAC is:
</p>

<pre caption="Recommended RBAC Kernel Configuration">
<comment>#
# Role Based Access Control Options
#</comment>
CONFIG_GRKERNSEC_ACL_HIDEKERN=y
CONFIG_GRKERNSEC_ACL_MAXTRIES=3
CONFIG_GRKERNSEC_ACL_TIMEOUT=30
</pre>

</body>
</section>
<section>
<title>Working with gradm</title>
<body>

<p>
<c>gradm</c> is a tool which allows you to administer and maintain a policy for
your system. With it, you can enable or disable the RBAC system, reload 
the RBAC roles, change your role, set a password for admin mode, etc.
</p>

<p>
When you install <c>gradm</c> a default policy will be installed in
<path>/etc/grsec/policy</path>:
</p>

<pre caption="Installing gradm">
# <i>emerge gradm</i>
</pre>

<p>
By default, the RBAC policies are not activated. It is the sysadmin's job to
determine when the system should have an RBAC policy enforced and not Gentoo's.
Before activating the RBAC system you should set an admin password.
</p>

<pre caption="Activating the RBAC system">
# <i>gradm -P admin</i>
Setting up grsecurity RBAC password
Password: <comment>(Enter a well-chosen password)</comment>
Re-enter Password: <comment>(Enter the same password for confirmation)</comment>
Password written in /etc/grsec/pw
# <i>gradm -E</i>
</pre>

<p>
To disable the RBAC system, run <c>gradm -D</c>. If you are not allowed to, you
first need to switch to the admin role:
</p>

<pre caption="Disabling the RBAC system">
# <i>gradm -a admin</i>
Password: <comment>(Enter your admin role password)</comment>
# <i>gradm -D</i>
</pre>

<p>
If you want to leave the admin role, run <c>gradm -u admin</c>:
</p>

<pre caption="Dropping the admin role">
# <i>gradm -u admin</i>
</pre>

</body>
</section>
<section>
<title>Generating a Policy</title>
<body>

<p>
The RBAC system comes with a great feature called "learning mode". The learning
mode can generate an anticipatory least privilege policy for your system. This
allows for time and money savings by being able to rapidly deploy multiple
secure servers.
</p>

<p>
To use the learning mode, activate it using <c>gradm</c>:
</p>

<pre caption="Activating the RBAC learning mode">
# <i>gradm -F -L /etc/grsec/learning.log</i>
</pre>

<p>
Now use your system, do the things you would normally do. Try to avoid rsyncing,
running locate of any other heavy file i/o operation as this can really slow
down the processing time.
</p>

<p>
When you believe you have used your system sufficiently to obtain a good policy,
let <c>gradm</c> process them and propose roles under 
<path>/etc/grsec/learning.roles</path>:
</p>

<pre caption="Processing learning mode logs">
# <i>gradm -F -L /etc/grsec/learning.log -O /etc/grsec/learning.roles</i>
</pre>

<p>
Audit the <path>/etc/grsec/learning.roles</path> and save it as
<path>/etc/grsec/policy</path> (mode 0600) when you are finished.
</p>

<pre caption="Saving the policies">
# <i>mv /etc/grsec/learning.roles /etc/grsec/policy</i>
# <i>chmod 0600 /etc/grsec/policy</i>
</pre>

<p>
You will now be able to enable the RBAC system with your new learned policy.
</p>

</body>
</section>
<section>
<title>Tweaking your Policy</title>
<body>

<p>
An interesting feature of grsecurity2 is <e>Set Operation Support</e> for the
configuration file. Currently it supports unions, intersections and differences
of sets (of objects in this case).
</p>

<pre caption="Example sets">
define objset1 {
/root/blah rw
/root/blah2 r
/root/blah3 x
}

define somename2 {
/root/test1 rw
/root/blah2 rw
/root/test3 h
}
</pre>

<p>
Here is an example of its use, and the resulting objects that will be added to
your subject:
</p>

<pre caption="&amp; Example">
subject /somebinary o
$objset1 &amp; $somename2
</pre>

<p>
The above would expand to:
</p>

<pre caption="Resulting subject settings">
subject /somebinary o
/root/blah2 r
</pre>

<p>
This is the result of the &amp; operator which takes both sets and returns the
files that exist in both sets and the permission for those files that exist
in both sets.
</p>

<pre caption="| Example">
subject /somebinary o
$objset1 | $somename2
</pre>

<p>
This example would expand to:
</p>

<pre caption="Resulting subject settings">
subject /somebinary o
/root/blah rw
/root/blah2 rw
/root/blah3 x
/root/test1 rw
/root/test3 h
</pre>

<p>
This is the result of the | operator which takes both sets and returns the
files that exist in either set.  If a file exists in both sets, it is returned
as well and the mode contains the flags that exist in either set.
</p>

<pre caption="- Example">
subject /somebinary o
$objset1 - $somename2
</pre>

<p>
This example would expand to:
</p>

<pre caption="Resulting subject settings">
subject /somebinary o
/root/blah rw
/root/blah2 h
/root/blah3 x
</pre>

<p>
This is the result of the - operator which takes both sets and returns the
files that exist in the set on the left but not in the match of the file in
set on the right. If a file exists on the left and a match is found on the
right (either the filenames are the same, or a parent directory exists in
the right set), the file is returned and the mode of the second set is
removed from the first set, and that file is returned.
</p>

<p>
In some obscure pseudo-language you could see this as:
</p>

<pre caption="Pseudo-language explanation">
if ( (<i>$objset1</i> contained <i>/tmp/blah rw</i>) and
     (<i>$objset2</i> contained <i>/tmp/blah r</i>) )
then
  <i>$objset1 - $objset2</i> would contain <i>/tmp/blah w</i>

if ( (<i>$objset1</i> contained <i>/tmp/blah rw</i>) and
     (<i>$objset2</i> contained <i>/ rwx</i>) )
then 
  <i>$objset1 - $objset2</i> would contain <i>/tmp/blah h</i>
</pre>

<p>
As for order of precedence (from highest to lowest): "-, &amp; |".
</p>

<p>
If you do not want to bother remembering precedence, parenthesis support
is also included, so you can do things like:
</p>

<pre caption="Parenthesis example">
(($set1 - $set2) | $set3) &amp; $set4
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Filesystem Protection</title>
<section>
<title>Fighting Chroot and Filesystem Abuse</title>
<body>

<p>
Grsecurity2 includes many patches that prohibits users from gaining unnecessary
knowledge about the system. This includes restrictions on <path>/proc</path>
usage, chrooting, linking, etc.
</p>

</body>
</section>
<section>
<title>Kernel Configuration</title>
<body>

<p>
We recommend the following grsecurity kernel configuration for filesystem
protection:
</p>

<pre caption="Activating Filesystem Protection">
<comment>#
# Filesystem Protections
#</comment>
CONFIG_GRKERNSEC_PROC=y
<comment># CONFIG_GRKERNSEC_PROC_USER is not set</comment>
CONFIG_GRKERNSEC_PROC_USERGROUP=y
CONFIG_GRKERNSEC_PROC_GID=10
CONFIG_GRKERNSEC_PROC_ADD=y
CONFIG_GRKERNSEC_LINK=y
CONFIG_GRKERNSEC_FIFO=y
CONFIG_GRKERNSEC_CHROOT=y
CONFIG_GRKERNSEC_CHROOT_MOUNT=y
CONFIG_GRKERNSEC_CHROOT_DOUBLE=y
CONFIG_GRKERNSEC_CHROOT_PIVOT=y
CONFIG_GRKERNSEC_CHROOT_CHDIR=y
CONFIG_GRKERNSEC_CHROOT_CHMOD=y
CONFIG_GRKERNSEC_CHROOT_FCHDIR=y
CONFIG_GRKERNSEC_CHROOT_MKNOD=y
CONFIG_GRKERNSEC_CHROOT_SHMAT=y
CONFIG_GRKERNSEC_CHROOT_UNIX=y
CONFIG_GRKERNSEC_CHROOT_FINDTASK=y
CONFIG_GRKERNSEC_CHROOT_NICE=y
CONFIG_GRKERNSEC_CHROOT_SYSCTL=y
CONFIG_GRKERNSEC_CHROOT_CAPS=y
</pre>

</body>
</section>
<section>
<title>Triggering the Security Mechanism</title>
<body>

<p>
When you're using a kernel compiled with the above (or similar) settings, you
will get the option to enable/disable many of the options through the
<path>/proc</path> filesystem or via <c>sysctl</c>.
</p>

<p>
The example below shows an excerpt of a typical <path>/etc/sysctl.conf</path>:
</p>

<pre caption="Example settings inside /etc/sysctl.conf">
kernel.grsecurity.chroot_deny_sysctl = 1
kernel.grsecurity.chroot_caps = 1
kernel.grsecurity.chroot_execlog = 0
kernel.grsecurity.chroot_restrict_nice = 1
kernel.grsecurity.chroot_deny_mknod = 1
kernel.grsecurity.chroot_deny_chmod = 1
kernel.grsecurity.chroot_enforce_chdir = 1
kernel.grsecurity.chroot_deny_pivot = 1
kernel.grsecurity.chroot_deny_chroot = 1
kernel.grsecurity.chroot_deny_fchdir = 1
kernel.grsecurity.chroot_deny_mount = 1
kernel.grsecurity.chroot_deny_unix = 1
kernel.grsecurity.chroot_deny_shmat = 1
</pre>

<p>
You can enable or disable settings at will using the <c>sysctl</c> command:
</p>

<pre caption="Enabling sysctl settings">
<comment>(Toggling the exec_logging feature ON)</comment>
# <i>sysctl -w kernel.grsecurity.exec_logging = 1</i>
<comment>(Toggling the exec_logging feature OFF)</comment>
# <i>sysctl -w kernel.grsecurity.exec_logging = 0</i>
</pre>

<p>
There is a very important sysctl setting pertaining to grsecurity, namely
<c>kernel.grsecurity.grsec_lock</c>. When set, you are not able to change any
setting anymore. 
</p>

<pre caption="Locking the sysctl interface">
# <i>sysctl -w kernel.grsecurity.grsec_lock = 1</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Kernel Auditing</title>
<section>
<title>Extend your System's Logging Facilities</title>
<body>

<p>
grsecurity adds extra functionality to the kernel pertaining the logging. With
grsecurity's <e>Kernel Auditing</e> the kernel informs you when applications are
started, devices (un)mounted, etc.
</p>

</body>
</section>
<section>
<title>The various Kernel Audit Settings</title>
<body>

<p>
The following kernel configuration section can be used to enable grsecurity's
Kernel Audit Settings:
</p>

<pre caption="Activating Kernel Auditing">
<comment>#
# Kernel Auditing
#
# CONFIG_GRKERNSEC_AUDIT_GROUP is not set</comment>
CONFIG_GRKERNSEC_EXECLOG=y
CONFIG_GRKERNSEC_RESLOG=y
CONFIG_GRKERNSEC_CHROOT_EXECLOG=y
CONFIG_GRKERNSEC_AUDIT_CHDIR=y
CONFIG_GRKERNSEC_AUDIT_MOUNT=y
CONFIG_GRKERNSEC_AUDIT_IPC=y
CONFIG_GRKERNSEC_SIGNAL=y
CONFIG_GRKERNSEC_FORKFAIL=y
CONFIG_GRKERNSEC_TIME=y
CONFIG_GRKERNSEC_PROC_IPADDR=y
CONFIG_GRKERNSEC_AUDIT_TEXTREL=y
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Process Restrictions</title>
<section>
<title>Executable Protection</title>
<body>

<p>
With grsecurity you can restrict executables. Since most exploits work through
one or more running processes this protection can save your system's health.
</p>

</body>
</section>
<section>
<title>Network Protection</title>
<body>

<p>
Linux' TCP/IP stack is vulnerable to prediction-based attacks. grsecurity
includes randomization patches to counter these attacks. Apart from these you
can also enable socket restrictions, disallowing certain groups network access
alltogether.
</p>

</body>
</section>
<section>
<title>Kernel Settings</title>
<body>

<p>
The following kernel settings enable various executable and network protections:
</p>

<pre caption="Kernel setting">
<comment>#
# Executable Protections
#</comment>
CONFIG_GRKERNSEC_EXECVE=y
CONFIG_GRKERNSEC_DMESG=y
CONFIG_GRKERNSEC_RANDPID=y
CONFIG_GRKERNSEC_TPE=y
CONFIG_GRKERNSEC_TPE_ALL=y
CONFIG_GRKERNSEC_TPE_GID=100

<comment>#
# Network Protections
#</comment>
CONFIG_GRKERNSEC_RANDNET=y
CONFIG_GRKERNSEC_RANDISN=y
CONFIG_GRKERNSEC_RANDID=y
CONFIG_GRKERNSEC_RANDSRC=y
CONFIG_GRKERNSEC_RANDRPC=y
<comment># CONFIG_GRKERNSEC_SOCKET is not set</comment>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>The Hardened Toolchain</title>
<section>
<body>

<p>
Although it is outside the scope of this document we mention the use of the
hardened toolchain which completes the grsec/PaX model from userspace. As a
quickstart you can do:
</p>

<pre caption="Using the hardened toolchain">
# <i>cd /etc</i>
# <i>rm make.profile</i>
# <i>ln -s ../usr/portage/profiles/hardened/x86 make.profile</i>
# <i>emerge -e world</i>
</pre>

<p>
If you don't want to use this profile, add these <c>hardened pic pie</c> USE flags to your
USE variable in <path>/etc/make.conf</path>. 
</p>

</body>
</section>
</chapter>

<chapter>
<title>Resources</title>
<section>
<body>

<ul>
  <li><uri link="http://grsecurity.net/">Grsecurity Homepage</uri></li>
  <li><uri link="http://forums.grsecurity.net/">Grsecurity Forums</uri></li>
  <li>
    <uri link="http://grsecurity.net/researchpaper.pdf">Increasing Performance 
    and Granularity in Role-Based Access Control Systems</uri>

  </li>
  <li>
    <uri link="http://www.gentoo.org/proj/en/hardened/capabilities.xml">
    Capability Names and Descriptions</uri>
  </li>
  <li>
    <uri link="http://grsecurity.net/quickstart.pdf">Grsecurity Quick-Start 
    Guide</uri> (NEW .pdf)
  </li>

  <li>
    <uri link="http://www.gentoo.org/proj/en/hardened/pax-quickstart.xml">Using PaX with 
    Gentoo QuickStart</uri> (NEW)
  </li>
  <li>
    <uri link="http://hardened.gentoo.org/grsecurity.xml">Grsecurity with 
    Gentoo 1.9.x MAC system</uri> (OLD)
  </li>
  <li>
    <uri link="http://grsecurity.net/PaX-presentation_files/frame.htm">PaX: The 
    Guaranteed End of Arbitrary Code Execution</uri>

  </li>
  <li>
    <uri link="http://pax.grsecurity.net">PaX HomePage and Documentation</uri>
  </li>
  <li>
    <uri link="http://www.gentoo.org/proj/en/infrastructure/tenshi">Tenshi</uri>
  </li>
</ul>


</body>
</section>
</chapter>

</guide>
