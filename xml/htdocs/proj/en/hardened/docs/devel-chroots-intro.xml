<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header $ -->

<guide link="http://www.gentoo.org/proj/en/hardened/devel-chroots-intro.xml" lang="en">

<title>Developer Chroots Utility Guide</title>

<author title="Author">
  <mail link="pappy@gentoo.org">Alexander Gabert</mail>
</author>

<abstract>
This guide covers the installation, configuration and set up
of chroots using a tool developed for the Gentoo dev machines.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2006-12-06</date>

<chapter>
<title>Introduction</title>
<section>
<title>What is this all about?</title>
<body>

<p>
The normal procedure for a developer setting up a chroot is
to fetch a stage, find a directory where to unpack it, unroll the stage,
make some modifications to basic files like <c>/etc/resolv.conf</c>,
<c>/etc/hosts</c> and others.
Then she or he is usually incorporating some kind of custom script
to start the chroot again once the machine gets rebooted
or she/he needs to reenter it for another reason.
More advanced scripts use screen sessions for making the chroot
command launching the chroot independent of the 
currently connected user.
</p>

<p>
However, lots of these scripts exist and people are using more
and more chroots on our development servers,
which is a very good thing in fact because it's relieving stress
off the main system and is making our production systems
more stable if development is done inside contained chroots.
</p>

<p>
There has been a previous version of <c>devel-chroots</c>,
but the old version only had limited multiuser capabilities and
was rather bulky compared to the code in the script and the
configuration abilities of the different chroots.
</p>

<p>
For this reason, the new version of <c>devel-chroots</c> has been
completely rewritten and is using a three-layered approach
of configuration data for setting up chroots and populating
the config files in these.
</p>

<p>
Finishing this introduction, this guide is not meant to be exclusive
to Gentoo development machines and their maintainers and users,
the tool has been developed to be usable on any machine
where chroots should be set up in an automatic and configurable fashion.
</p>

<p>
Your input is welcome and there is always room for improving
this little program as it aims at easing development and promotes
thorough regression and live testing by providing an easy way
of setting up a testbed, which a chroot basically is.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Installation</title>
<section>
<title>Ebuild installation</title>
<body>

<p>
The utility can be emerged with the following shell command:
</p>

<note>
If you want to emerge only the basic tool without the sample configuration,
activate the <c>"minimal"</c> USE-flag.
</note>

<pre caption="Installation of devel-chroots">
# <i>USE="-minimal" emerge -pv devel-chroots</i>

These are the packages that would be merged, in order:

Calculating dependencies... done!
[ebuild   R   ] dev-util/devel-chroots-2.0.0  USE="-minimal*" 0 kB 

Total size of downloads: 0 kB

# <i>USE="-minimal" emerge -v devel-chroots</i>
</pre>

<pre caption="Installation of devel-chroots without configuration files">
# <i>USE="minimal" emerge -pv devel-chroots</i>

These are the packages that would be merged, in order:

Calculating dependencies... done!
[ebuild   R   ] dev-util/devel-chroots-2.0.0  USE="minimal" 0 kB 

Total size of downloads: 0 kB

# <i>USE="minimal" emerge -v devel-chroots</i>
</pre>

</body>
</section>

<section>
<title>Fetching the source code</title>
<body>

<p>
The source code for the project can be found in the following
anonymous <c>cvs</c> or <c>svn</c> location, along with viewcvs:
</p>

<pre caption="fetching the project source code with anonymous cvs">
/tmp/dc $ <i>cvs -d :pserver:anonymous@anoncvs.gentoo.org/var/cvsroot co gentoo-projects</i>
</pre>

<pre caption="fetching the project source code with anonymous svn">
/tmp/dc $ <i>svn co http://anonsvn.gentoo.org/repositories/gentoo-projects</i>
</pre>

<p>
Then dive into the
<c>gentoo-projects/devel-chroots/devel-chroots-2.0.0/</c>
directory to see the source code for the project.
</p>

<p>
As you can see, it's just the same as the scripts
that are getting installed by the ebuild.
Which positively means that you can theoretically also use
these scripts without having an ebuild install them.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Configuration</title>
<section>
<title>General machine configuration</title>
<body>

<p>
There is no standard location where a <c>stage3</c>
file may be located on the mirrors.
For this reason, it is highly advised to edit the
default configuration file and explicitly set the <c>STAGE_URL</c> variable.
</p>

<pre caption="STAGE_URL in default configuration">
$ <i>grep STAGE_URL /etc/devel-chroots/default/config</i>
STAGE_URL="$(echo ${GENTOO_MIRRORS} | awk '{ print $1; }')/${STAGE_PATH}/${STAGE_NAME}"
# STAGE_URL="http://ftp.belnet.be/mirror/rsync.gentoo.org/gentoo/releases/x86/2006.0/stages/stage3-x86-2006.0.tar.bz2"
</pre>

<p>
As you can see, the default mechanism is to pick the first mirror,
add the stage path for a typical x86 stage and construct
the name for a current profile's stage.
However, this doesn't work for sparc for example,
because they are differentiating between sparc32 and sparc64.
The same holds true for hppa, where it's stages pertaining
to the 1.1 ABI and the 2.0 ABI of different types of machines.
</p>

<p>
Also remember that users and specific chroots can always
override this variable, so it would be the best thing
to make sure it points to a reasonable default stable stage.
</p>

<p>
As said, users wishing to enable a hardened toolchain chroot,
a linux32 chroot on an amd64 machine or a new bleeding edge stage
from one of their private mirrors can always override
this setting in their own <c>config</c>.
</p>

<p>
Another important piece of the configuration is the global <c>make.conf</c>.
Basically, every single chroot contains a file 
<c>/usr/local/chroot/conf.d/make.conf</c>
which is constructed from three possible <c>make.conf</c> files
residing in the configuration directory of <c>devel-chroots</c>:
</p>

<p>
<c>/etc/devel-chroots/default/make.conf</c> is the main file for chroots.
</p>

<p>
<c>/etc/devel-chroots/pappy/make.conf</c> is holding user specific addons.
</p>

<p>
<c>/etc/devel-chroots/pappy/chroot001/make.conf</c> is a chroot specific file.
</p>

<p>
These three files make up the final
<c>/usr/local/chroot/conf.d/make.conf</c>
which then can be sourced by the real <c>/etc/make.conf</c> of the chroot.
</p>

</body>
</section>

<section>
<title>User specific configuration</title>
<body>

<p>
As noted in the previous section, each user can define her or his
own versions of <c>config</c> and <c>make.conf</c> in the
configuration directory <c>/etc/devel-chroots/username</c>.
This enables the highest possible versatility and flexibility.
For example, it is possible to allow a user define her or his own
debugging settings for
<c>FEATURES</c> and <c>USE</c> flags in <c>make.conf</c>.
</p>

<p>
Another example is the custom setting of the screenrc:
</p>

<pre caption="user specific screenrc for chroot screen sessions">
$ <i>cat /etc/devel-chroots/pappy/screenrc</i>
backtick 1 5 0 /home/pappy/bin/mem.sh
backtick 2 1 0 /home/pappy/bin/cetclock.sh 'CET' '-0200' '-0100'

hardstatus string '%{= kG}[%= %{= kw}%?%-Lw%?%{r}[%{W}%n*%f %t%?{%u}%?%{r}]%{w}%?%+Lw%?%?%= %{g}]%{W} %2`:%s %{g}%{.w}%H%{.c} [%l] %1`MB ram'
</pre>

<p>
This makes it easy for users to include their own scripts
in screen sessions of chroots,
for example to measure disk usage or load of the system.
</p>

<pre caption="Example: user specific CET date display on chroot screen">
~ $ cat bin/cetclock.sh 
#!/bin/bash

# check for daylight saving time being currently active at this time
if [ "x$(perl -e '@timeData = localtime(time); print ${timeData}[-1];')y" == "x1y" ]
then
        date --utc --date="$(date --utc '+%F %T') $2" "+$1 %H:%M"
else
        date --utc --date="$(date --utc '+%F %T') $3" "+$1 %H:%M"
fi

</pre>

</body>
</section>

<section>
<title>Chroot specific configuration</title>
<body>

<p>
Last but not least, on some arches (notably amd64),
there is the possibility to install an x86 chroot using a special emulator
command, called <c>linux32</c>.

Redefining the respective variables in the chroot-specific
<c>/etc/devel-chroots/pappy/chroot001/config</c> enables users to
set up those special chroots on amd64 test machines:
</p>

<pre caption="chroot specific config for linux32 chroot on amd64">
$ <i>cat /etc/devel-chroots/pappy/chroot001/config</i>
CHROOT_BINARY="linux32 /usr/bin/chroot"
STAGE_URL="http://ftp.belnet.be/mirror/rsync.gentoo.org/gentoo/releases/x86/2006.0/stages/stage3-x86-2006.0.tar.bz2"
</pre>

<p>
These variables are learned by the script and will
be used for setting up the chroot.
Other chroots are not affected by this setting, however.
This makes it very easy for users to set up and maintain
different chroots for their needs on the same machine at a time.
</p>

<p>
As you can see, in every case,
chroot-specific data is overwriting default and user-specific data.
Please do not change system-internal variables like
the maximum number of chroots for a user
and similar definitions inside a chroot-specific <c>config</c> file.
</p>

</body>
</section>

</chapter>

<chapter>
<title>Startup and maintenance</title>
<section>
<title>Automatic startup</title>
<body>

<p>
Automatic startup of the developer chroots is attained with an init script
that is conforming to the Gentoo standards.
</p>

<pre caption="starting the devel-chroots init script">
# /etc/init.d/devel-chroots status
 * status:  stopped

# /etc/init.d/devel-chroots start 
 * Starting developer chroots for all users ...
 * pappy: starting chroot001 in (/space/devel-chroots/pappy/chroot001)
 * pappy: mounting chroot filesystems: /space/devel-chroots/pappy/chroot001
 * pappy: chroot001: creating conf: make.conf
 * pappy: starting chroot002 in (/space/devel-chroots/pappy/chroot002)
 * pappy: mounting chroot filesystems: /space/devel-chroots/pappy/chroot002
 * pappy: chroot002: creating conf: make.conf
 * config file [/etc/devel-chroots/pappy/chroot002/make.conf] not existing, skipping
 * no /etc/devel-chroots/pappy/chroot003 config dir
 * no /etc/devel-chroots/pappy/chroot004 config dir
 * no /etc/devel-chroots/pappy/chroot005 config dir
 * no /etc/devel-chroots/pappy/chroot006 config dir
 * no /etc/devel-chroots/pappy/chroot007 config dir
 * no /etc/devel-chroots/pappy/chroot008 config dir
 * launching detached screen session for pappy's chroots
 * remember that you have to source /usr/local/chroot/conf.d/make.conf
 * in the make.conf of created chroots for user-specific settings
 * for multiuser mode, you need to set /usr/bin/screen to mode 4755
 * and also change the directory /var/run/screen to mode 0755                                    [ <ident>ok</ident> ]
</pre>

<pre caption="restarting the chroots init script">
# /etc/init.d/devel-chroots restart
 * Stopping developer chroots for all users ...
 * stopping chroot001 of user pappy (/space/devel-chroots/pappy/chroot001)
 * pappy: terminating the following screen sessions: 8638
 * pappy: unmounting chroot filesystems: /space/devel-chroots/pappy/chroot001
 * stopping chroot002 of user pappy (/space/devel-chroots/pappy/chroot002)
 * pappy: unmounting chroot filesystems: /space/devel-chroots/pappy/chroot002
 * no /etc/devel-chroots/pappy/chroot003 config dir
 * no /etc/devel-chroots/pappy/chroot004 config dir
 * no /etc/devel-chroots/pappy/chroot005 config dir
 * no /etc/devel-chroots/pappy/chroot006 config dir
 * no /etc/devel-chroots/pappy/chroot007 config dir
 * no /etc/devel-chroots/pappy/chroot008 config dir                                                                                           [ <ident>ok</ident> ]
 * Starting developer chroots for all users ...
 * pappy: starting chroot001 in (/space/devel-chroots/pappy/chroot001)
 * pappy: mounting chroot filesystems: /space/devel-chroots/pappy/chroot001
 * pappy: chroot001: creating conf: make.conf
 * pappy: starting chroot002 in (/space/devel-chroots/pappy/chroot002)
 * pappy: mounting chroot filesystems: /space/devel-chroots/pappy/chroot002
 * pappy: chroot002: creating conf: make.conf
 * config file [/etc/devel-chroots/pappy/chroot002/make.conf] not existing, skipping
 * no /etc/devel-chroots/pappy/chroot003 config dir
 * no /etc/devel-chroots/pappy/chroot004 config dir
 * no /etc/devel-chroots/pappy/chroot005 config dir
 * no /etc/devel-chroots/pappy/chroot006 config dir
 * no /etc/devel-chroots/pappy/chroot007 config dir
 * no /etc/devel-chroots/pappy/chroot008 config dir
 * launching detached screen session for pappy's chroots
 * remember that you have to source /usr/local/chroot/conf.d/make.conf
 * in the make.conf of created chroots for user-specific settings
 * for multiuser mode, you need to set /usr/bin/screen to mode 4755
 * and also change the directory /var/run/screen to mode 0755                                                                                 [ <ident>ok</ident> ]
</pre>

<p>
As you can see, the init script is maybe generating
lots of considered unnecessary output,
however this is important for being able
to judge why a certain chroot has not been set up
and adds in easy understanding what is happening and what is not.
</p>

<p>
For example, as you can see, a chroot for a given user is only started
if a configuration directory for that chroot could be found.
It can be empty, but it has to exist for the given chroot to be started.
</p>

<p>
Please note that the usage of the init script should be left
up to the discretion of the system administrator.
</p>

</body>
</section>

<section>
<title>User management of chroots</title>
<body>

<p>
Users should be issuing the following script for
starting and stopping their own chroots:
</p>

<pre caption="user maintenance of chroots: stopping chroots">
$ sudo /usr/sbin/devel-chroots stop pappy
 * stopping chroot001 of user pappy (/space/devel-chroots/pappy/chroot001)
 * pappy: terminating the following screen sessions: 9371
 * pappy: unmounting chroot filesystems: /space/devel-chroots/pappy/chroot001
 * stopping chroot002 of user pappy (/space/devel-chroots/pappy/chroot002)
 * pappy: unmounting chroot filesystems: /space/devel-chroots/pappy/chroot002
</pre>

<pre caption="user maintenance of chroots: starting chroots">
$ sudo /usr/sbin/devel-chroots start pappy  
 * pappy: starting chroot001 in (/space/devel-chroots/pappy/chroot001)
 * pappy: mounting chroot filesystems: /space/devel-chroots/pappy/chroot001
 * pappy: chroot001: creating conf: make.conf
 * pappy: starting chroot002 in (/space/devel-chroots/pappy/chroot002)
 * pappy: mounting chroot filesystems: /space/devel-chroots/pappy/chroot002
 * pappy: chroot002: creating conf: make.conf
 * launching detached screen session for pappy's chroots
</pre>

<p>
Please remember there is no restart command:
</p>

<pre caption="illegal use of restart command for chroot">
$ sudo /usr/sbin/devel-chroots restart pappy
 * error: unknown mode: restart
</pre>

</body>
</section>

<section>
<title>Final notes</title>
<body>

<p>
As noted in the init script, for users being able to reattach
to root screen sessions as a user and
use the <c>acladd</c> command to see who is working with them,
it is necessary to change screen and
the working directory of the screen session sockets.
</p>

<p>
However, this is a cosmetic advantage,
because normally everybody is supposed to be root
on a development system and there is no security restrictions.
</p>

<p>
But on the other hand, having a system of voluntarily
least priviledges used for reconnecting to screen sessions
as an authorized user never hurts, avoids mistakes and problems
and opens up room for cutting down the necessary priviledges
of scripts and users for having their work done!
</p>

</body>
</section>
</chapter>
</guide>

