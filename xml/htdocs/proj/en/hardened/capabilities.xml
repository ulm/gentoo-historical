<?xml version='1.0' encoding="utf-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/en/hardened/grsecurity.xml">
<title>Gentoo Linux Grsecurity Guide</title>
<author title="Editor">
  <mail link="solar@gentoo.org">Ned Ludd</mail>
</author>
<abstract>
POSIX capabilities are a partitioning of the all powerful 
root privilege into a set of distinct privileges
</abstract>
<version>1.0</version>
<date>4 Jul 2003</date>

<chapter>
<title>Capability Names and Descriptions</title>
	<section>
		<title>Capability Names and Descriptions</title>
<body>
<pre caption="Capability Names and Descriptions">
00. <i>CAP_CHOWN</i>
In a system with the [_POSIX_CHOWN_RESTRICTED] option defined, 
this overrides the restriction of changing file ownership and 
group ownership.

01. <i>CAP_DAC_OVERRIDE</i>
Override all DAC access, including ACL execute access 
if [_POSIX_ACL] is defined. 
Excluding DAC access covered by CAP_LINUX_IMMUTABLE.

02. <i>CAP_DAC_READ_SEARCH</i>	
Overrides all DAC restrictions, regarding read and search on files 
and directories, including ACL restrictions, if [_POSIX_ACL] is 
defined. Excluding DAC access covered by CAP_LINUX_IMMUTABLE.

03. <i>CAP_FOWNER</i>
Overrides all restrictions about allowed operations on files, where 
file owner ID must be equal to the user ID, except where CAP_FSETID 
is applicable. It doesn't override MAC and DAC restrictions.

04. <i>CAP_FSETID</i>
Overrides the following restrictions, that the effective user ID shall
match the file owner ID, when setting the S_ISUID and S_ISGID bits on 
that file; that the effective group ID (or one of the supplementary 
group IDs) shall match the file owner ID when setting the S_ISGID bit 
on that file; that the S_ISUID and S_ISGID bits are cleared on 
successful return from chown(2) (not implemented).

05. <i>CAP_KILL</i>
Overrides the restriction, that the real or effective user ID of a 
process, sending a signal, must match the real or effective user ID 
of the process, receiving the signal.

06. <i>CAP_SETGID</i>
Allows setgid(2) manipulation;
Allows setgroups(2);
Allows forged gids on socket credentials passing.

07. <i>CAP_SETUID</i>
Allows set*uid(2) manipulation (including fsuid);
Allows forged pids on socket credentials passing.

08. <i>CAP_SETPCAP</i>
Transfer any capability in your permitted set to any pid, remove any 
capability in your permitted set from any pid.

09. <i>CAP_LINUX_IMMUTABLE</i>
Allow modification of S_IMMUTABLE and S_APPEND file attributes.

10. <i>CAP_NET_BIND_SERVICE</i>
Allows binding to TCP/UDP sockets below 1024;
Allows binding to ATM VCIs below 32.

11. <i>CAP_NET_BROADCAST</i>
Allow broadcasting, listen to multicast.

12. <i>CAP_NET_ADMIN</i>
Allow interface configuration;
Allow administration of IP firewall, masquerading and accounting;
Allow setting debug option on sockets;
Allow modification of routing tables;
Allow setting arbitrary process / process group ownership on sockets;
Allow binding to any address for transparent proxying;
Allow setting TOS (type of service);
Allow setting promiscuous mode;
Allow clearing driver statistics;
Allow multicasting;
Allow read/write of devicespecific registers;
Allow activation of ATM control sockets.

13. <i>CAP_NET_RAW</i>
Allow use of RAW sockets;
Allow use of PACKET sockets.

14. <i>CAP_IPC_LOCK</i>
Allow locking of shared memory segments;
Allow mlock and mlockall (which doesn't really have anything to do 
with IPC).

15. <i>CAP_IPC_OWNER</i>
Override IPC ownership checks.

16. <i>CAP_SYS_MODULE</i>
Insert and remove kernel modules  modify kernel without limit;
Modify cap_bset.

17. <i>CAP_SYS_RAWIO</i>
Allow ioperm/iopl access;
Allow sending USB messages to any device via /proc/bus/usb.

18. <i>CAP_SYS_CHROOT</i>
Allow use of chroot().

19. <i>CAP_SYS_PTRACE</i>
Allow ptrace() of any process.

20. <i>CAP_SYS_PACCT</i>
Allow configuration of process accounting.

21. <i>CAP_SYS_ADMIN</i>
Allow configuration of the secure attention key;
Allow administration of the random device;
Allow examination and configuration of disk quotas;
Allow configuring the kernel's syslog (printk behaviour);
Allow setting the domainname;
Allow setting the hostname;
Allow calling bdflush();
Allow mount() and umount(), setting up new smb connection;
Allow some autofs root ioctls;
Allow nfsservctl; Allow VM86_REQUEST_IRQ;
Allow to read/write pci config on alpha; Allow irix_prctl on mips 
(setstacksize);
Allow flushing all cache on m68k (sys_cacheflush);
Allow removing semaphores; Used instead of CAP_CHOWN to "chown" IPC 
message queues, semaphores and shared memory;
Allow locking/unlocking of shared memory segment;
Allow turning swap on/off;
Allow forged pids on socket credentials passing;
Allow setting readahead and flushing buffers on block devices;
Allow setting geometry in floppy driver;
Allow turning DMA on/off in xd driver;
Allow administration of md devices (mostly the above, but 
some extra ioctls);
Allow tuning the ide driver;
Allow access to the nvram device;
Allow administration of apm_bios, serial and bttv (TV) device;
Allow manufacturer commands in isdn CAPI support driver;
Allow reading nonstandardized portions of pci configuration space;
Allow DDI debug ioctl on sbpcd driver;
Allow setting up serial ports;
Allow sending raw qic117 commands;
Allow enabling/disabling tagged queuing on SCSI controllers and 
sending arbitrary SCSI commands;
Allow setting encryption key on loopback filesystem.

22. <i>CAP_SYS_BOOT</i>
Allow use of reboot().

23. <i>CAP_SYS_NICE</i>
Allow raising priority and setting priority on other 
(different UID) processes;
Allow use of FIFO and roundrobin (realtime) scheduling on own 
processes and setting the scheduling algorithm used by another process.

24. <i>CAP_SYS_RESOURCE</i> 
Override resource limits. Set resource limits;
Override quota limits;
Override reserved space on ext2 filesystem;
Modify data journaling mode on ext3 filesystem 
(uses journaling resources); NOTE: ext2 honors fsuid when checking for
resource overrides, so you can override using fsuid too;
Override size restrictions on IPC message queues;
Allow more than 64hz interrupts from the realtime clock;
Override max number of consoles on console allocation;
Override max number of keymaps.

25. <i>CAP_SYS_TIME</i>
Allow manipulation of system clock;
Allow irix_stime on mips;
Allow setting the realtime clock.

26. <i>CAP_SYS_TTY_CONFIG</i>
Allow configuration of tty devices; Allow vhangup() of tty.

27. <i>CAP_MKNOD</i>
Allow the privileged aspects of mknod().

28. <i>CAP_LEASE</i>
Allow taking of leases on files.
</pre>

</body>
</section>
</chapter>
</guide>
