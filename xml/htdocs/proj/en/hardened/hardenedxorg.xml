<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/hardened/hardenedxorg.xml,v 1.3 2004/09/27 18:12:10 solar Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="hardenedxorg.xml">
<title>Using Xorg on Hardened Gentoo</title>
<author title="Author">
  <mail link="tocharian@trilug.org">Adam Mondl</mail>
</author>
<author title="Contributor">
  <mail link="co@kevquinn.com">Kevin Quinn</mail>
</author>

<abstract>
How to install and use Xorg on Hardened Gentoo
</abstract>

<version>1.0</version>
<date>September 27, 2004</date>

<chapter>
<title>Background</title>
<section>
<title>What is different about running Xorg with Hardened Gentoo?</title>
<body>

<p>
PaX, a patch for the Linux kernel, is a central part of the Hardened Gentoo
project.  PaX provides various functionality such as ASLR and NX memory.  More
information is available at <uri>http://www.gentoo.org/proj/en/hardened/docs/pax-howto.xml</uri>
For the purposes of this document, it will be assumed that the reader has a general
understanding of how PaX works as well as the concept of Position Independent Executables (PIE).
</p>

<p>
The specific feature of PaX of interest in this article is MPROTECT, which 
guards against executable code in a program's address space.  One of the main features
of Hardened Gentoo is the ability to run PaX effectively because of the ET_DYN/PIE base.
The eventual goal for Xorg is to have the binary itself built as ET_DYN/PIE to remove text
relocations from it and randomize the base address without the EX_EXEC performance hit.
</p>

<p>
At this point, compiling Xorg with PIC code sounds like an obvious, logical choice.  Hardened
Gentoo offers hardened gcc for this purpose, which provides transparent PIE/SSP compiling.  This
is where you begin to run into problems with Xorg.  Xorg currently uses elfloader to handle loading
the modules it needs, however elfloader is unable to resolve various types of relocatable symbols that are
always generated by PIC code.  Most importantly, the elfloader has no support for Global Offset
Table (GOT) or Procedure Linkage Table (PLT) type symbols which are both essential for shared libraries.
</p>

<p>
So if elfloader won't work then what will?  Luckily there is already a fully operational, well tested,
mature dynamic loader installed on your system.  It is ld-linux.so which is provided by glibc.  The obvious idea
that occurs at this point, is that ideally there would be a programmatic interface to the glibc loader, and the
X loader could be modified to use that instead of home-brewing its own loader.  Turns out that such an interface
exists - dlopen(3) et. al. - and this is exactly what the dlloader uses.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Installation</title>
<section>
<title>Current Install Options</title>
<body>

<p>
Now that you have seen the problems that elfloader has handling PIC modules, you must decide
which route you would like to take to avoid using elfloader:
</p>

</body>
</section>

<section>
<title>Compile Xorg Statically</title>
<body>

<p>
Compiling Xorg as a statically linked executable is the easiest solution to this problem at the moment since you
can avoid the elfloader verses dlloader debate entirely.  If you choose to install Xorg this way then execute
the following command:
</p>

<pre>
USE=static emerge x11-base/xorg-x11
</pre>

</body>
</section>
<section>
<title>Use The DLL Loader</title>
<body>

<p>
By compiling the X server with
</p>

<pre>
#define MakeDllModules YES
</pre>

<p>
the X server can be made to use a dlopen() based
loader to handle modules and dependancies.  This is
the preferred method but requires slightly more work
from the user.  To install using this method execute the
following command:
</p>

<pre>
ACCEPT_KEYWORDS=~x86 USE=dlloader emerge =xorg-x11-6.8.0-r1
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Configuration</title>
<section>
<title>/etc/X11/xorg.conf</title>
<body>

<p>
First setup the Xorg configuration file using The X Server
Configuration HOWTO found at:
<uri>http://www.gentoo.org/doc/en/xorg-config.xml</uri>
</p>

</body>
</section>

<section>
<title>Manual Module Dependency Resolution</title>
<body>

<p>
At this point, if you installed Xorg statically you should be ready to
use your brand new X server.  However, if you opted to use the dlloader
then you will need to perform minor module dependecy resolution.
</p>

<p>
When you execute startx you should get some sort of error message similar to this:
</p>

<pre>
dlopen: /usr/X11R6/lib64/modules/drivers/nv_drv.so: undefined symbol: vgaHWUnmapMem
(EE) Failed to load /usr/X11R6/lib/modules/drivers/nv_drv.so
(EE) Failed to load module "nv" (loader failed, 7)
</pre>

<p>
We can see here that dlloader is not correctly finding and loading some modules so we
must manually load them.  To do this we edit our /etc/X11/xorg.conf and add the modules
as they are needed.  The section to look for in the configuration file is:
</p>

<pre>
Section "Module"
  Load "dbe"
  
  SubSection "extmod"
    Option "omit xfree86-dga"
  EndSubSection
  
  Load "type1"
  Load "freetype"
End Section
</pre>

<p>
For each module that is needed, a corresponding Load "modulename" line
must be added.  To find out the module name, the easiest thing to do is take 
the unresolved symbol and plug it into the following command:
</p>

<pre>
grep /usr/X11R6/lib/modules -r -l -e vgaHWUnmapMem
</pre>

<p>
Typically this will return more than one module so to find out where the symbol
is defined in this case use:
</p>

<pre>
readelf -s /usr/X11R6/lib/modules/libvgahw.so | grep vgaHWUnmapMem
</pre>

<p>
If the value (2nd field) has a number other than 0, and "Ndx" (7th field) is not "UND"
then it is defined, and this is the module you want.  If the result has "00000000" for the value
and "UND" for "Ndx", it's undefined.
</p>

<p>
As a general tip if your search returns a long list of modules and <c>/usr/X11R6/lib/modules/drivers</c>
and just one in <c>/usr/X11R6/lib/modules</c> then you want the <c>/usr/X11R6/lib/modules</c> one.
</p>

<p>
A sample list for the "nv" module is shown below:
</p>

<pre>
Load	"vgahw"
Load	"fbdevhw"
Load	"xaa"
Load	"i2c"
Load	"fb"
Load	"shadowfb"
Load	"int10"
Load	"ddc"
Load	"ramdac"
Load	"vbe"
Load	"riva128"
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Known Issues</title>
<section>
<title>USE=dlloader Experiences</title>
<body>

<p>
Due to the nature of the dlloader along with the current state of development, you
can expect to have varying degrees of success.  In its current state the dlloader does
not work well with Hardened Gentoo.
</p>

<p>
Hardened Gentoo makes the default link strategy to resolve all symbols at load time, and enforces
this on all shared libraries when they are built.  Normally the loader uses "lazy" resolution if requested,
whereby symbols are resolved as and when they are used.  Unfortunately some Xorg modules have mutual
dependencies and other issues that mean they cannot load unless lazy symbol resolution is enabled.
</p>

<p>
To track current development, watch
<uri>http://freedesktop.org/bugzilla/show_bug.cgi?id=400</uri>.  Also
check <uri>http://freedesktop.org/~ajax/dlloader-status.txt</uri>
for the latest dlloader problems.
</p>

<impo>
Please report all issues to tseng@gentoo.org with full attached
logs and configs.
</impo>

</body>
</section>

<section>
<title>Binary Drivers</title>
<body>

<p>
This is a known issue that can only be resolved by upstream vendors.
Most notably, neither the binary Nvidia or ATI drivers work currently with the dlloader.
</p>

</body>
</section>

</chapter>
</guide>
