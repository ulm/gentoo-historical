<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/hardened/hardenedxorg.xml,v 1.8 2005/06/01 23:08:07 solar Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="hardenedxorg.xml">
<title>Using Xorg on Hardened Gentoo</title>
<author title="Author">
  <mail link="tocharian@gentoo.org">Adam Mondl</mail>
</author>
<author title="Contributor">
  <mail link="kevquinn@gentoo.org">Kevin Quinn</mail>
</author>
<author title="Contributor">
  <mail link="solar@gentoo.org">Ned Ludd</mail>
</author>

<abstract>
How to install and use Xorg on Hardened Gentoo
</abstract>

<version>1.4</version>
<date>2005-06-01</date>

<chapter>
<title>Background</title>
<section>
<title>What is different about running Xorg with Hardened Gentoo?</title>
<body>

<p>
PaX, a patch for the Linux kernel, is a central part of the Hardened Gentoo
project.  PaX provides various functionality such as ASLR and NX memory.  More
information is available at <uri>http://www.gentoo.org/proj/en/hardened/docs/pax-howto.xml</uri>
For the purposes of this document, it will be assumed that the reader has a general
understanding of how PaX works as well as the concept of Position Independent Executables (PIE).
</p>

<p>
The specific feature of PaX of interest in this article is MPROTECT, which 
guards against executable code in a program's address space.  One of the main features
of Hardened Gentoo is the ability to run PaX effectively because of the ET_DYN/PIE base.
The eventual goal for Xorg is to have the binary itself built as ET_DYN/PIE to remove text
relocations from it and randomize the base address without the EX_EXEC performance hit.
</p>

<p>
At this point, compiling Xorg with PIC code sounds like an obvious, logical choice.  Hardened
Gentoo offers hardened gcc for this purpose, which provides transparent PIE/SSP compiling.  This
is where you begin to run into problems with Xorg.  Xorg currently uses elfloader to handle loading
the modules it needs, however elfloader is unable to resolve various types of relocatable symbols that are
always generated by PIC code.  Most importantly, the elfloader has no support for Global Offset
Table (GOT) or Procedure Linkage Table (PLT) type symbols which are both essential for shared libraries.
</p>

<p>
So if elfloader won't work then what will?  Luckily there is already a fully operational, well tested,
mature dynamic loader installed on your system.  It is ld-linux.so which is provided by glibc.  The obvious idea
that occurs at this point, is that ideally there would be a programmatic interface to the glibc loader, and the
X loader could be modified to use that instead of home-brewing its own loader.  Turns out that such an interface
exists - dlopen(3) et. al. - and this is exactly what the dlloader uses.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Installation</title>
<section>
<title>Current Install Options</title>
<body>

<p>
Now that you have seen the problems that elfloader has handling PIC modules, you must decide
which route you would like to take to avoid using elfloader:
</p>

</body>
</section>

<section>
<title>Compile Xorg Statically</title>
<body>

<p>
Compiling Xorg as a statically linked executable is the easiest solution to this problem at the moment since you
can avoid the elfloader verses dlloader debate entirely.  If you choose to install Xorg this way then execute
the following command:
</p>

<pre caption="Install Staticly Linked Xorg">
echo "x11-base/xorg-x11 static" >> /etc/portage/package.use
emerge x11-base/xorg-x11
</pre>

</body>
</section>
<section>
<title>Use The dlloader</title>
<body>

<p>
By compiling the X server with USE=dlloader
</p>

<p>
The X server can be made to use a dlopen() based
loader to handle modules and dependancies.  This is
the newer, preferred way of installing Xorg.  To install using this 
method execute the following command:
</p>

<pre caption="Use dlloader and Xorg">
echo "x11-base/xorg-x11 dlloader" >> /etc/portage/package.use
echo "x11-base/xorg-x11 ~x86" >> /etc/portage/package.keywords
emerge x11-base/xorg-x11
</pre>

<impo>
Although dlloader is a USE flag option for earlier versions of Xorg in portage, it only works on
versions of Xorg greather than or equal to 6.8.0-r4.
</impo>

<note>USE=dlloader is now the default in the hardened profile.</note>

</body>
</section>
</chapter>

<chapter>
<title>Configuration</title>
<section>
<title>/etc/X11/xorg.conf</title>
<body>

<p>
You can setup your Xorg configuration file using The X Server
Configuration HOWTO found at:
<uri>http://www.gentoo.org/doc/en/xorg-config.xml</uri>
</p>

</body>
</section>
</chapter>

<chapter>
<title>Known Issues</title>
<section>
<title>USE=dlloader Experiences</title>
<body>

<p>
Due to the nature of the dlloader along with the current state of development, you
can expect to have varying degrees of success.
</p>

<p>
Hardened Gentoo makes the default link strategy to resolve all symbols at load time, and enforces
this on all shared libraries when they are built.  Normally the loader uses "lazy" resolution if requested,
whereby symbols are resolved as and when they are used.  Unfortunately some Xorg modules have mutual
dependencies and other issues that mean they cannot load unless lazy symbol resolution is enabled.  To work
around this issue, currently Gentoo compiles the Xorg modules and the server itself with the -nonow gcc flag.
This fixes the "dlopen: undefined symbol" errors so previous methods of manually detecting and loading modules are
no longer needed.
</p>

<p>
To track current development, watch
<uri>http://freedesktop.org/bugzilla/show_bug.cgi?id=400</uri>.  Also
check <uri>http://freedesktop.org/~ajax/dlloader-status.txt</uri>
for the latest dlloader problems.
</p>

<impo>
Please report all issues to tseng@gentoo.org with full attached
logs and configs.
</impo>

</body>
</section>

<section>
<title>Binary Drivers</title>
<body>

<p>
This is a known issue that can only be resolved by upstream vendors.
Most notably, neither the binary Nvidia nor ATI drivers work currently with the dlloader.
</p>

</body>
</section>

<section>
<title>PaX Flags</title>
<body>

<p>
The PaX flag -M (MPROTECT) does not seem to work with Xorg as it causes a major
slowdown.
</p>

<p>
The PaX flags -SP (non-executable stack), as well as -R (RANDMMAP) now work with
Xorg.  In order to have these flags stay once you set them you will need to
edit your <c>/etc/conf.d/chpax</c> file as shown below:
</p>

<pre caption="chpax file changes">
PS_EXEC_EXEMPT="${PSE_misc} ${xine} ${wine} ${java} ${openoffice} ${mplayer}"
RANDMMAP_EXEMPT="${java}"
</pre>

</body>
</section>

</chapter>
</guide>
