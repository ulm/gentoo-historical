<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/vps/overview.xml,v 1.1 2006/06/19 09:08:32 hollow Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/vserver-howto.xml">
<title>Virtualization Overview</title>

<author title="Author">
  <mail link="hollow@gentoo.org">Benedikt Boehm</mail>
</author>
<author title="by Courtesy">
  <mail link="webmaster@openvz.org">OpenVZ.org</mail>
</author>

<abstract>
Basic virtualization concepts
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2006-06-19</date>

<chapter>
<title>Virtualization Concepts</title>
<section>
<title>Methodology</title>
<body>

<p>
Virtualization is a framework or methodology of dividing the resources of a
computer into multiple execution environments. Virtualization techniques create
multiple isolated partitions (Virtual Machines (VM) or Virtual Private Servers
(VPS)) on a single physical server. There are several kinds of virtualization
techniques which provide similar features but differ in the degree of
abstraction and the methods used for virtualization.
</p>

</body>
</section>
<section>
<title>Virtual Machines</title>
<body>

<p>
Virtual Machines emulate some real or fictional hardware, which in turn requires
real resources from the Host (the machine running the VMs). This approach, used
by most System Emulators, allows the emulator to run an arbitrary Guest
Operating System without modifications because OS isn't aware that itâ€™s not
running on real hardware. The main issue with this approach is that some CPU
instructions require additional privileges and may not be executed in user space
thus requiring a Virtual Machines Monitor (VMM) to analyze executed code and
make it safe on-the-fly. Hardware Emulation approach is used by VMware products
and Microsoft Virtual Server.
</p>

</body>
</section>
<section>
<title>Para-Virtualized Machines</title>
<body>

<p>
This technique also requires a VMM, but most of its work is performed in the
Guest OS code, which in turn is modified to support this VMM and avoid
unnecessary use of privileged instructions. The paravirtualization technique
also enables running different OSs on a single server, but requires them to be
ported. The paravirtualization approach is used by Xen, UML.
</p>

</body>
</section>
<section>
<title>OS-Level Virtualization</title>
<body>

<p>
Most applications running on a server can easily share a machine with others, if
they could be isolated and secured. Further, in most situations, different
operating systems are not required on the same server, merely multiple instances
of a single Operating System. OS Virtualization systems have been designed to
provide the required isolation and security to run multiple applications or
copies of the same (or similar i.e different Linuxes) OS on the same server.
OpenVZ, Linux-VServer are examples of OS virtualization.
</p>

</body>
</section>
<section>
<title>Conclusion</title>
<body>

<p>
The three techniques differ in complexity of implementation, breadth of OS
support, performance in comparison with standalone server, and level of access
to common resources. For example, VMs have wide scope of usage, but poor
performance. Para-VMs have better performance, but can support fewer OSs because
of need to port original OSes.
</p>

<p>
Virtualization on the OS Level provides the best performance and scalability
compared to other approaches. Performance of such systems can differ only about
1-3% from standalone server. They are also much simpler to administer as all of
the Virtual servers can be accessed and administered from the host. Generally,
such systems are best choice for server consolidation of same OS workloads.
</p>

</body>
</section>
</chapter>
</guide>
