<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- This document was last synced to:
     cvs://gentoo/gentoo/xml/htdocs/doc/en/policy.xml :: R1.35.
-->

<sections>
<version>1.0.4</version>
<date>2012-03-03</date>

<section>
<title>General guidelines</title>
<subsection>
<body>
<warn>
This document is outdated. Please refer to the <uri link="http://devmanual.gentoo.org">Gentoo Development Guide</uri> for the latest documentation about ebuild writting and policies.
</warn>
<p>Here are some general development guidelines to follow:</p>
<ul>

<li>Always check in your changes with repoman; use repoman commit
instead of cvs commit.</li>

<li>If a package is either broken in its current version or it has a really
nasty build/install process, take a look at how other distributions do it:
<ul>
 <li><uri link="http://www.debian.org/distrib/packages">Debian</uri></li>
 <li><uri link="http://cvs.mandriva.com/cgi-bin/viewvc.cgi/SPECS/">Mandriva</uri></li>
 <li><uri link="http://cvs.fedora.redhat.com/">Fedora</uri></li>
</ul>
</li>

<li>Your package, when complete and unmasked, is supposed to "just work" for
the end-user. Tweaking the installed product to get it to work should be
optional; thus you need to install the package with reasonable default
settings.</li>

<li>Don't be afraid to consult our on-line documentation and ebuilds written
and maintained by more senior developers. Feel free to contact senior
developers directly with any technical or policy questions.</li>

<li>Be cautious about what you commit. Remember that your commits
can potentially harm thousands of users. If your commits cause any breakage
in the tree, they must be fixed in a timely fashion.</li>

<li>Every package must be accompanied by a <uri
link="?part=2&amp;chap=4">metadata.xml</uri> file which lists - amongst other
information - what herd (and/or individual maintainers) are in charge of the
package.</li>

</ul>
</body>
</subsection>
</section>

<section>
<title>Specific guidelines</title>
<subsection>
<title>Perl</title>
<body>

<p>
New Perl modules are to be added to portage only when one of the
following conditions is met:
</p>

<ul>
<li>The module(s) fulfill a dependency</li>
<li>The module(s) cannot be handled by <c>g-cpan</c></li>
<li>The module(s) add functionality to existing ebuilds</li>
<li>The module(s) provide tools, applications or other features (i.e.
more than what their .PM offers)</li>
</ul>

<p>
Please make sure that at least one member of the perl herders approves
your addition.
</p>

</body>
</subsection>
</section>

<section>
<title>Ebuild policy</title>
<subsection>
<title>Naming policy</title>
<body>

<p>Ebuild file names consist of four logical subsections:</p>

<p><c>pkg-ver{_suf{#}}{-r#}.ebuild</c></p>

<note>The brackets (<c>{}</c>) delineate optional fields and do not appear in
the literal package name. <c>#</c> represents any non-zero positive
integer.</note>

<p>
The first subsection, <c>pkg</c>, is the package name, which should
only contain lowercase letters, the digits 0-9, and any number of
single hyphen (<c>-</c>), underscore (<c>_</c>) or plus (<c>+</c>)
characters. Examples: <c>util-linux</c>,
<c>sysklogd</c> and <c>gtk+</c>. We have some packages in Portage that 
don't follow these rules, but <e>your</e> packages should.
</p>

<p>
The second subsection, <c>ver</c>, is the version of the package,
which should normally be same as the version on the main source
tarball. The version is normally made up of two or three (or more)
numbers separated by periods, such as <c>1.2</c> or <c>4.5.2</c>, and
may have a single letter immediately following the last digit;
e.g., <c>1.4b</c> or <c>2.6h</c>. The package version is joined to the
package name with a hyphen. Examples:
<c>foo-1.0</c>, <c>bar-2.4.6</c>.
</p>

<p>
The third subsection, <c>{_suf{#}}</c>, is optional may contain one of 
these predefined suffixes, listed in least-recent to most-recent order:
</p>

<table>
 <tr><th>Suffix</th><th>Meaning</th></tr>
 <tr><ti><c>_alpha</c></ti><ti>Alpha release</ti></tr>
 <tr><ti><c>_beta</c></ti><ti>Beta release</ti></tr>
 <tr><ti><c>_pre</c></ti><ti>Prerelease</ti></tr>
 <tr><ti><c>_rc</c></ti><ti>Release candidate</ti></tr>
 <tr><ti>(none)</ti><ti>Normal release</ti></tr>
 <tr><ti><c>_p</c></ti><ti>Patch level (normally accompanied by trailing integer)</ti></tr>
</table>

<p> 
Any of these suffixes may be immediately followed by a non-zero positive
integer, e.g., <c>linux-2.4.0_pre10</c>. Assuming identical version parts, the
suffixes are ordered as follows (lower means older): <c>_alpha</c> &lt;
<c>_beta</c> &lt; <c>_pre</c> &lt; <c>_rc</c> &lt; (no suffix) &lt;
<c>_p</c>.
</p>
       
<p>
When comparing identical suffixes with trailing integers, the one with the
larger integer will be considered most recent. Example: <c>foo-1.0_alpha4</c>
is more recent than <c>foo-1.0_alpha3</c>.
</p>

<p>
The fourth subsection of the package name is the Gentoo Linux-specific revision
number (<c>{-r#}</c>). This subsection, like the suffix, is also optional.
<c>#</c> is a non-zero positive integer; e.g.,  <c>package-4.5.3-r3</c>. 
</p>

<p>
This revision number is independent of the version of the source tarball and
is used to inform people that a new and improved Gentoo Linux revision of a
particular package is available. Initial releases of ebuilds must have no
revision number; e.g., <c>package-4.5.3</c> and are considered by 
Portage to have a revision number of zero. This means that counting goes 
as follows: <c>1.0</c> (initial version), <c>1.0-r1</c>, <c>1.0-r2</c>, 
etc. 
</p>

</body>
</subsection>

<subsection>
<title>Versioning and revision bumps</title>
<body>

<p>
Package revision numbers should be incremented by Gentoo Linux developers
when the ebuild has changed to the point where users would want to upgrade.
Typically, this is the case when fixes are made to an ebuild that affect the
resultant installed files, but the ebuild uses the same source tarball as the
previous release.  If you make an internal, stylistic change to the ebuild that
does not change any of the installed files, then there is no need to bump the
revision number.  Likewise, if you fix a compilation problem in the ebuild that
was affecting some users, there is no need to bump the revision number, since
those for whom it worked perfectly would see no benefit in installing a new
revision, and those who experienced the problem do not have the package
installed (since compilation failed) and thus have no need for the new revision
number to force an upgrade. A revision bump is also not necessary if a 
minority of users will be affected and the package has a nontrivial 
average compilation time; use your best judgement in these 
circumstances.
</p>

<impo>
Whenever you create a new revision of an ebuild, be sure to update the
<path>ChangeLog</path> file in the ebuild directory. Failing to do so is
considered to be in very poor taste and may result in disciplinary
action.
</impo>

<p>
Ebuilds should be based on the previous version of the ebuild to ensure 
that fixes aren't dropped accidentally. Fixes should include appropriate 
comments in the ebuild explaining what they are for and why they are 
needed. If you are not familiar with the fixes, or unable to determine 
if they are still needed, you should not be updating the ebuild.
</p>

</body> 
</subsection> 

<subsection>
<title>Scope</title>
<body>

<p>
Whenever an ebuild is sourced, the functions and variables within it
are loaded into memory by the script interpreter. However, only
variables and instructions that are not part of a function are
interpreted - functions such as <c>src_compile()</c> are only executed by
Portage when the ebuild has reached the compile stage.
</p>

<p>
The code within these functions are considered in "local scope" while
everything outside of the functions is in the "global scope" meaning
they are executed every time the ebuild is sourced.
</p>

<p>
An external application (such as grep, sed or awk) should never be
called in global scope for performance reasons, and alternatives such
as using built-in bash replacement should be used instead. Useful
alternatives can be found in the
<uri link="http://www.tldp.org/LDP/abs/html/">Advanced Bash Scripting Guide</uri>.
</p>

<p>
Additionally, any external application that may be called in global
scope can not be guaranteed to exist on the system. If the command is
placed in local scope (for example, in the <c>pkg_setup()</c> function), we
can guarantee its presence by placing it in the ebuild's <c>${DEPEND}</c>.
</p>

</body>
</subsection>

<subsection>
<title>CVS sources policy</title>
<body>

<p>
There are two different ways to build an ebuild based on sources from a CVS
development tree. The first and traditional way is to create a "CVS snapshot"
ebuild by creating your own tarball snapshot of the upstream CVS tree,
mirroring the sources on our official distfile repository, and writing an
ebuild to specifically use this tarball snapshot. These types of CVS ebuilds
will be referred to as "CVS snapshot ebuilds" below.
</p> 

<p>
The other method of
creating a CVS-based ebuild is to use <path>cvs.eclass</path> to create a
"live" CVS ebuild. Such an ebuild will dynamically grab the latest development
sources from a CVS repository at "fetch" time, ensuring that the sources are as
up-to-date as possible. These types of CVS ebuilds will be referred to as
"'live' ebuilds" below.
</p>

<p>
The following paragraphs detail the policy relating to the use of CVS-based
ebuilds.  Note that there are strict rules relating to the addition of such
ebuilds to the Portage tree.
</p>

<p>
Snapshot cvs ebuilds are greatly preferred over "live" <path>cvs.eclass</path>
cvs ebuilds.
</p> 

<p>
Snapshot cvs ebuilds are allowed if a cvs snapshot contains known fixes that
are needed for proper operation of a software package, or if the cvs version of
a particular software package is known to or has been proven to simply "work
better" than the normal release version.
</p>

<p>
"Live" <path>cvs.eclass</path> ebuilds are generally only intended for the
convenience of developers and should always be masked with a <c>~[arch]</c>
keyword. It is impossible to guarantee the reliability of a "live"
<path>cvs.eclass</path> ebuild since the upstream cvs tree may change at any
time, which is why they should always be masked.
</p> 

<p>
Whether a "live" CVS ebuild or a "snapshot" CVS ebuild, <b>you the
developer are responsible for ensuring that the ebuild works correctly</b>.
This is particularly difficult to do with "live" cvs ebuilds for obvious
reasons.
</p>

<p>
If ebuilds (of any kind) do not work correctly or are flaky, they should be
fixed or removed from the Portage tree. If they are "live" ebuilds, they may be
<c>~[arch]</c> keyword masked for their lifetime (this special exception is
detailed below). 
</p>

<p>
If a user or users specifically request a "live" cvs ebuild, you can add one
for them. It should have a <c>~[arch]</c> keyword so that other users don't
merge it unsuspectingly. 
</p>

<p>
This way, the user(s) requesting them (likely developers) can install
them but other users will be protected from merging them accidentally.
Again, this only applies to situations where a user or users
specifically request a "live" <path>cvs.eclass</path> CVS ebuild. Snapshot
ebuilds should only be added to the Portage tree with the intention that they
are stable and provide better functionality than the normal release versions
of said software.
</p>

<impo>
Snapshot ebuilds of <e>pre-release</e> CVS sources should be named as
follows: <path>foo-x.y_preYYYYMMDD.ebuild</path>.  <c>foo</c> is the package
name, <c>x.y</c> is the version number of the <e>upcoming</e> release,
<c>_pre</c> is a literal string, and <c>YYYYMMDD</c> is a timestamp of the day
the CVS snapshot was taken. Use this naming convention to ensure that a
<c>x.y.1</c> release version won't be considered to be older than a <c>x.y</c>
snapshot, while at the same time ensuring that the official <c>x.y</c> release
will be considered <e>newer</e> than your CVS snapshot version. For CVS
snapshots of <e>already-released</e> CVS sources, use the format
<path>foo-x.y_pYYYYMMDD.ebuild</path> (notice the <c>_p</c> for "patchlevel.")
This will ensure that your CVS ebuild will be considered <e>newer</e> than the
standard <c>x.y</c> release.
</impo>

<impo>
The policy for naming "live" cvs ebuilds is to use the "-9999" suffix.
</impo>

</body>
</subsection>

<subsection>
<title>User-submitted ebuilds</title>
<body>

<p>
User-submitted ebuilds should never be blindly trusted and should always be
well-tested and audited before being committed to CVS. <b>If a user-submitted
ebuild has problems, you will be held accountable.</b> By committing it to CVS,
you are vouching that the ebuild meets all Gentoo Linux development standards.
</p>

<p>Make sure that the user-submitted ebuild doesn't contain custom headers like this:</p>

<pre caption="A custom header that should be transferred to the ChangeLog">
# Ebuild updated by: me &lt;me@me.com&gt;
</pre>

<p>
This information should be added to the <path>ChangeLog</path> using proper ChangeLog
comment syntax. <b>Always ensure that the ChangeLog gives proper credit to the user
who submitted the ebuild. This information should appear in the first ChangeLog entry.</b>
</p>

<p>Also ensure that any new ebuilds you commit contain the following line:</p>
<pre caption="Ebuild header">
# &#36;Header: &#36;
</pre>
<p>Quite a few user-submitted ebuilds are based on files from rsync, which can contain
incorrect header lines.</p>

<p>
Encourage users to submit diffs to existing ebuilds if they are submitting
an upgrade.  By doing this, we can help avoid the re-introduction of
previously-fixed bugs into our "new" ebuilds. If you are not working from a user-submitted
diff but a complete ebuild, then use the <c>diff</c> command to see what has changed, keeping
an eye open for anything from our current ebuild that should appear in the new ebuild, or
anything in the new ebuild that should be fixed or removed.
</p>

<p>
In general, let the user do the work required to get his or her ebuild up to par, unless
you <e>want</e> to clean up the ebuild on his or her behalf.  Even so, it's often better
to have the user do the work so that they can learn from their mistakes and submit cleaner ebuilds
in the future. Be sure to be thankful for any submission, even if it isn't very good. Be polite
but honest -- if an ebuild isn't usable, the user can be told in a way that does not insult their
current ebuild-writing abilities. Remember that the user who submitted that broken ebuild may
be a skilled and productive member of our project in the future -- that 
is, if they receive the right amount of encouragement and support and 
continue to improve in their abilities.
</p>

</body>
</subsection>


</section> 

<section>
<title>QA policy</title>
<subsection>
<title>Portage / baselayout release policy</title>
<body>

<p>
Only members of the Portage team (who know who they are) have the authority
to release new releases of Portage. <b>No one</b> else is allowed to roll new
releases of Portage.
</p>

<p>
Only members of the baselayout team (who know who they are) have the authority
to release new releases of baselayout. <b>No one</b> else is allowed to roll new
releases of baselayout.
</p>

</body>
</subsection>

<subsection>
<title>Masked packages</title>
<body>

<p>
<path>/usr/portage/profiles/package.mask</path> contains a list of
packages that should not be merged by users and comments detailing the
specific reason why. Package.mask is used to prevent merging of
packages that are broken, break something else, or badly need testing
before going into ~ARCH KEYWORDS in the tree. When adding to
package.mask, always commit package.mask prior to committing the
masked ebuild. This prevents the ebuild from hitting users before the
updated package.mask does.
</p>

<p>
Great care must be taken any time a package is removed from <path>package.mask</path>.
Keep in mind that if an ebuild is in <path>package.mask</path>, it's there for a reason.
If you didn't mask the ebuild, always contact the developer listed in the
<path>package.mask</path> comments prior to taking any
action. Additionally, if the masked ebuild is a core package, a
dependency of a core package, or the unmasking has any possibility for
adverse effects, the change must be discussed internally on the
developer mailing list.
</p>

</body>
</subsection>

<subsection>
<title>~ARCH in KEYWORDS</title>
<body>
<p>
The purpose of ~arch is for testing new packages added to Portage. 
</p>

<p>
There is a difference between using <path>package.mask</path> and ~arch for 
ebuilds. The use of ~arch denotes an <b>ebuild</b> requires testing. The use
of <path>package.mask</path> denotes that the application or library itself is 
deemed unstable. For example, if <c>gimp-1.2.0</c> is the stable release from 
Gimp developers, and a new bug fix release is available as 1.2.1, then a 
developer should mark the ebuild as ~arch for testing in portage because the 
release is deemed to be stable. In another example, if Gimp decides to release 
an unstable/development series marked as 1.3.0, then these ebuilds should be 
put in <path>package.mask</path> because the software itself is of development
quality and is not recommended by the developers for distribution.
</p>

<p>
Any new package that enters Portage must be marked ~arch for the
architecture(s) that this version is known to work on. The developer who
commits the ebuild must verify it is in working order, and the KEYWORDS
are correct.
</p>

</body>
</subsection>

<subsection>
<title>Moving package versions from ~ARCH to ARCH</title>
<body>
<p>
When a package version has proved stable for sufficient time and the
Gentoo maintainer of the package is confident that the upgrade will not
break a regular Gentoo user's machine, then it can be moved from ~ARCH
to ARCH. An indication of the package's stability would be no verified
or unresolved bug report for a month after the version's introduction.
</p>
<p>
It is up to the maintainer of the package to deem which versions are
stable or if development versions should be in <path>package.mask</path>
or left in ~arch.
</p>
<p>
You must also ensure that all the dependencies of such a package version
are also in ARCH.
</p>

<impo>
Remember that arch teams alone are responsible for marking packages stable on
their arch. Package maintainers should open stabilization bugs; they may not
just mark packages stable. However, if the maintainer is also part of an arch
team, then he or she may stabilize the package for his or her arch.
</impo>

<warn>
The ~ARCH step may <e>only</e> be ignored <e>if and only if</e> the
concerned package version contains a security fix or is needed to fix an
important bug in the Gentoo system. 
</warn>
</body>
</subsection>
</section>

</sections>
