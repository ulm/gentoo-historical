<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/devrel/handbook/hb-introduction-new-devs.xml,v 1.19 2014/01/05 00:31:56 hwoarang Exp $ -->

<sections>
<version>1.2</version>
<date>2013-05-10</date>

<section>
<title>Using CVS</title>
<subsection>
<title>Introduction</title>
<body>

<p>
This guide is not intended to be a manual on using CVS; for that, take a look at
the CVS info page or <uri>/doc/en/cvs-tutorial.xml</uri>.
Instead, this guide focuses specifically on using CVS and Repoman in Gentoo's
ebuild tree.
</p>

</body>
</subsection>
<subsection>
<title>Configuration</title>
<body>

<p>
Typically, you'll want something along these lines in your <path>~/.cvsrc</path>:
</p>

<pre caption="~/.cvsrc">
cvs -q -z0
diff -u -B
checkout -P
update -d -P
</pre>

<p>
Finally, many people using CVS like to use compression (-z#). We ask that
developers who are not on dialup connections please use -z0 - with the contents
of our CVS repository and the load on our CVS server, you actually experience a 
speed <e>increase</e> without compression.
</p>

</body>
</subsection>

<subsection>
<title>Checking out from CVS/SVN</title>
<body>

<p>
There are a few useful modules in Gentoo's CVS repository. Ebuilds are kept in
the <path>gentoo-x86</path> module. <path>gentoo</path> contains the XML
for the website, documentation, developer directories, developer pictures,
and so on. <path>gentoo-projects</path> contains various projects and generally
replaces the <path>gentoo-src</path> cvs module.  <path>gentoo-src</path> is
kept around for history, please transition to a different cvs module if you
are still using it.
</p>

<pre caption="Checking out gentoo-x86">
$ <i>cvs -d username@cvs.gentoo.org:/var/cvsroot co gentoo-x86</i>
</pre>

<p>
Before working in the tree at any time, it's always a good idea to do an 
update to check for changes and prevent conflicts. You can update in any 
subdirectory of the tree if you don't want to wait for a tree-wide update, but 
from time to time it's a good idea to update your entire tree:
</p>

<pre caption="Updating in gentoo-x86">
$ <i>cd gentoo-x86</i>
$ <i>cvs update</i>
</pre>

<p>
Gentoo also offers subversion services for those who prefer SVN over CVS. 
Many core projects such as <path>portage</path> and <path>baselayout</path> 
are hosted here now.
</p>

<pre caption="Checking out portage">
$ <i>svn co svn+ssh://username@cvs.gentoo.org/var/svnroot/portage</i>
</pre>

</body>
</subsection>

<subsection>
<title>Updating Portage</title>
<body>

<p>
If you want to use CVS as your primary Portage tree, you can add the following
lines to <path>/etc/portage/repos.conf</path>, replacing <c>username</c> with your username:
</p>

<pre caption="Configuring repos.conf for use with CVS">
[DEFAULT]
main-repo = gentoo

[gentoo]
location = /home/username/gentoo-x86
sync-type = cvs
sync-uri = :ext:username@cvs.gentoo.org:/var/cvsroot
sync-cvs-repo = gentoo-x86
</pre>

<note>
Due to the fact that the cvs checkout has no metadata cache, your portage may
become really slow
</note>

<p>
On supported architectures, you should also have <c>sandbox</c> in your
<c>FEATURES</c> to ensure ebuilds do not modify the root filesystem
directly.
</p>

</body>
</subsection>

<subsection>
<title>Adding/Removing packages</title>
<body>

<p>
Say you're ready to add a brand new package, <c>foo</c>, in app-misc:
</p>

<pre caption="Adding a package">
<comment>(Replace CVSROOT with the location of your checked-out CVS tree.)</comment>
$ <i>cd $CVSROOT/app-misc</i>
<comment>(Always update before working in part of the CVS tree!)</comment>
$ <i>cvs update</i>
$ <i>mkdir foo</i>
<comment>(Here, we add the package directory foo to the CVS repository.)</comment>
$ <i>cvs add foo</i>
$ <i>cd foo</i>
<comment>(It's better to keep in-progress ebuilds in an overlay outside of your CVS tree.)</comment>
$ <i>cp /path/to/foo-1.0.ebuild ./</i>
$ <i>repoman manifest</i>
$ <i>${EDITOR} metadata.xml</i>
<comment>You don't necessarily need a files directory any more</comment>
$ <i>cvs add foo-1.0.ebuild metadata.xml files</i>
<comment>[Don't forget to create a ChangeLog - see the man page for echangelog.]</comment>
$ <i>echangelog "New ebuild for foo. Ebuild written by me. Fixes bug #XXXXXX."</i>
</pre>

<p>
See the <uri link="?part=2&amp;chap=4">Gentoo Metadata</uri> section for more
information on <path>metadata.xml</path>.
</p>

<p>
At this point, you're ready to commit (see the section on Commits
below). But what if you want to remove foo-1.0 when foo-1.1 is out?
</p>

<pre caption="Removing old versions">
$ <i>cd $CVSROOT/app-misc/foo</i>
$ <i>cvs update</i>
$ <i>cvs remove -f foo-1.0.ebuild</i>
</pre>

<p>
And now you're ready to commit (see the section on Commits below).
</p>

</body>
</subsection>
<subsection>
<title>Commits</title>
<body>

<p>
Always use <c>repoman commit</c> rather than <c>cvs commit</c>. Repoman is a
quality assurance (QA) tool that performs basic checks and creates Manifests. If
any part of repoman's output is unclear, please see <c>man repoman</c>.
Additionally, you may tire of entering your key passphrase repeatedly; keychain
(<uri>http://www.gentoo.org/doc/en/keychain-guide.xml</uri>) can help you.
</p>

<pre caption="Using repoman">
<comment>[Make sure there are no root-owned files present prior to running repoman!]</comment>
<comment>("scan" scans the current directory for QA issues. "full" is more complete.)</comment>
$ <i>repoman scan</i>
<comment>("commit" does a scan, then commits, while also updating the Manifest. Make sure you
 add a verbose and useful CVS ChangeLog message...)</comment>
$ <i>repoman commit</i>
</pre>

</body>
</subsection>
<subsection>
<title>Speeding CVS up</title>
<body>

<p>
If you have noticable high ping times to the cvs server, you might want to use
the ssh master slave setup where you only connect to the other ssh server once
and let it do the next commands over that connection. This way you save the
handshake overhead which may speed up the whole checkout/commit by factor 3.
Just add the code snippet given below to your config.
</p>

<pre caption="~/.ssh/config">
Host cvs.gentoo.org
  ControlMaster auto
  ControlPath ~/.ssh/master-%r@%h:%p
  ControlPersist 3600
</pre>

</body>
</subsection>
</section>

<section>
<title>Miscellaneous</title>
<subsection>
<title>Putting files on mirrors</title>
<body>

<p>
Distfiles are automatically fetched by the Gentoo Mirror System. You only need to
monitor your distfiles for fetch errors. Please see the
<uri link="/proj/en/infrastructure/mirrors/overview-distfile.xml">Distfiles Overview Guide</uri>
for comprehensive instructions.
</p>

</body>
</subsection>
<subsection>
<title>Mail and Web</title>
<body>

<p>
Our infrastructure allows developers to manage their own mail.
<uri>http://www.gentoo.org/proj/en/infrastructure/dev-email.xml</uri>
contains instructions on configuring your @gentoo.org mail.
</p>

<p>
Developers have access to webhosting, http://dev.gentoo.org/~$YOURNAME. Please
see the <uri link="/proj/en/infrastructure/dev-webspace.xml">Webspace
Configuration Guide</uri> for details.
</p>

</body>
</subsection>
</section>
</sections>
