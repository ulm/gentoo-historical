#!/usr/bin/env python
# vim: set ai et sw=4 ts=4 sts=4:
"""Script to remove retired devs from metadata.xml."""

import os
import sys
import difflib
import StringIO
import inspect

from xml.etree import cElementTree as etree


def getretired(userinfo_path):
    """Generator yielding names of retired devs from userinfo.xml."""
    userinfo = etree.parse(userinfo_path)

    for entry in userinfo.findall('user'):
        status = entry.find('status')
        if status is not None:
            if status.text in ('Retired', 'retired'):
                devname = entry.get('username')
                yield devname.lower()


def herds(userinfo_path, herds_path):
    """ Show retired developers and which herds they are in
    """
    try:
        retired = set(getretired(userinfo_path))
    except (SyntaxError, EnvironmentError), e:
        print >>sys.stderr, "Couldn't parse userinfo.xml (%s)" % (e,)
        return 1

    try:
        herds = etree.parse(herds_path)
    except (SyntaxError, EnvironmentError), e:
        print >>sys.stderr, "Couldn't parse herds.xml (%s)" % (e,)
        return 1

    for herd in herds.findall('herd'):
        herdname = herd.find('name').text
        for entry in herd.findall('maintainer'):
            email = entry.find('email')
            username = email.text.replace('@gentoo.org','').lower()
            if username in retired:
                print '%s:\t%s' % (herdname, username)
    return 0

def project(userinfo_path, path):
    """ Remove retired developers from project pages
    userinfo is path to proj/en/devrel/roll-call/userinfo.xml
    files is a list of project xmls
    """
    try:
        retired = set(getretired(userinfo_path))
    except (SyntaxError, EnvironmentError), e:
        print >>sys.stderr, "Couldn't parse userinfo.xml (%s)" % (e,)
        return 1

    for root, dirs, files in os.walk(path):
        for file in files:
            if file.endswith('.xml'):
                fpath = root + '/' + file
                try:
                    project = etree.parse(fpath)
                except (SyntaxError, EnvironmentError):
                    #print "Skipping %s, probably not a project xml" % file
                    continue
                for entry in project.findall('dev'):
                    if entry.text.lower() in retired:
                        print fpath + ':\t' + entry.text
                for elem in ['extraproject', 'task']:
                    for entry in project.findall(elem):
                        if 'lead' in entry.attrib and entry.attrib['lead'].lower() in retired:
                            print fpath + ':\t' + entry.attrib['lead']

def _metadata(path, modifier):
    """Mutate metadata.xml and produce a diff.
    metadata.xml with the retired dev removed.

    path is the path to the root of the portage tree.

    modifier is a function called as modifier(metadata, herds).
    It should return whether it mutated metadata.
    """
    if not os.path.isdir(path):
        print >>sys.stderr, '%r is not a directory' % path
        return 1
    # Make sure path has a / at the end
    if not path.endswith('/'):
        path+='/'
    for root, dirs, files in os.walk(path):
        if 'metadata.xml' not in files:
            continue
        metadata_path = os.path.join(root, 'metadata.xml')
        try:
            metadata = etree.parse(metadata_path)
        except (SyntaxError, EnvironmentError), e:
            print >>sys.stderr, "Couldn't parse %s (%s) .. skipping" % (root[len(path) + 1:], e)
            continue

        shortpath = root[len(path):]

        # Find all herds this package is in, dealing with the no-herd "herd"
        herds = {}
        for herd in metadata.findall('herd'):
            herdname = herd.text
            if herdname is None:
                print >>sys.stderr, "Bogus herd entry in %s" % (shortpath,)
                continue
            herdname = herdname.strip()
            if herdname in herds:
                print >>sys.stderr, 'Duplicate herd in %s' % (shortpath,)
                continue
            herds[herdname] = herd
        if not herds:
            # HACK: this is apparently normal for category-level metadata
            if '/' in shortpath:
                print >>sys.stderr, 'no herd tags in %s (add no-herd)' % (shortpath,)
        if 'no-herd' in herds and len(herds) != 1:
            print >>sys.stderr, 'no-herd and actual herds in %s' % (shortpath,)
        herds.pop('no-herd', None)

        if modifier(metadata, herds):
            # we don't want the full path in the diff
            if not root.startswith(path):
                print 'wtf (not %r.startswith(%r/))' % (root, path)
                return 1
            newfile = StringIO.StringIO()
            # etree does not write the <?xml ...> header and DOCTYPE
            newfile.write('<?xml version="1.0" encoding="UTF-8"?>\n')
            newfile.write(
                '<!DOCTYPE pkgmetadata SYSTEM '
                '"http://www.gentoo.org/dtd/metadata.dtd">\n')
            metadata.write(newfile)
            # etree omits the final newline, add that to make the diff nicer
            newfile.write('\n')
            newfile.seek(0)
            # (skips the <?xml ...> and DOCTYPE lines, hopefully)
            for line in difflib.unified_diff(
                open(metadata_path).readlines(),
                list(newfile),
                '%s.orig' % shortpath,
                shortpath):
                print line,
            print
    return 0

def metadata_dev(devname, path):
    email = '%s@gentoo.org' % devname
    def modifier(metadata, herds):
        changed = False
        for entry in metadata.findall('maintainer'):
            for mailentry in entry.findall('email'):
                if mailentry.text.strip() == email:
                    if not herds:
                        # remove name
                        for name in entry.findall('name'):
                            entry.remove(name)
                        mailentry.text = 'maintainer-needed@gentoo.org'
                    else:
                        metadata.getroot().remove(entry)
                    changed = True
        return changed

    return _metadata(path, modifier)


def metadata_herd(herdname, path):
    def modifier(metadata, herds):
        if herdname not in herds:
            return False

        herd = herds[herdname]
        if len(herds) == 1:
            # We're removing the only herd, so convert to no-herd.
            herd.text = 'no-herd'
        else:
            # Just remove this herd element.
            metadata.getroot().remove(herd)

        return True

    return _metadata(path, modifier)


def usage():
    print 'Usage: %s subcommand opts' % sys.argv[0]
    print 'Subcommands:'
    print '--herds /path/to/userinfo.xml /path/to/herds.xml : check herds.xml for retired developers'
    print '--metadata-dev devname /path/to/tree :'
    print '--metadata-herd herdname /path/to/tree :'
    print '\toutputs a diff between the current metadata.xml and'
    print '\tmetadata.xml with the retired dev or herd removed.'
    print '--project /path/to/userinfo.xml /path/to/proj :'
    print '\tcheck the project pages for retired developers'


def main(args):
    subcommands = dict(('--' + f.__name__.replace('_', '-'), f)
                       for f in [herds, metadata_dev, metadata_herd, project])
    if len(args) == 1:
        usage()
    try:
        subcommand = subcommands[args[1]]
    except KeyError:
        print '%s is not a valid subcommand (%s)' % (
            args[1], ', '.join(subcommands))
        usage()
        return 1

    argcount = len(inspect.getargspec(subcommand)[0])
    if len(args) - 2 != argcount:
        print 'Expected %s arguments, got %s' % (argcount, len(args) - 2)
        usage()
        return 1

    return subcommand(*args[2:])

if __name__ == '__main__':
    sys.exit(main(sys.argv))
