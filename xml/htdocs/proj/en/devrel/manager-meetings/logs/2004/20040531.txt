18:00 <@g2boojum> Thank you all for attending.  We have two items on the agenda today: (a) How many GRP sets should we construct, and (b) What should be our policy for handling gpg signing in portage?  I propose we start at the beginning, continue on to the end, and then stop.
18:00 <@g2boojum> Um, who wants to start w/ the GRP issue?  
18:00 -!- Irssi: #gentoo-meetings: Total of 15 nicks [6 ops, 0 halfops, 0 voices, 9 normal]
18:00  * SwifT searches for zhen... nope, nowhere to be found
18:00 <@Method> klieber needs to be here
18:00 -!- tseng [~tseng@tseng.developer.gentoo] has joined #gentoo-meetings
18:01 -!- mode/#gentoo-meetings [+o tseng] by ChanServ
18:01  * g2boojum notes that dmwaters and spyderous send their regrets.
18:01 <@tseng> I appologize guys, it looks like im not going to able to be around either
18:01 <@tseng> Method knows where I stand on the two scheduled topics.
18:01 <@SwifT> I see no issues with limiting the GRP set to one or two subarchs for x86... the consensus was to have an x86 (generic) and i686 set afaik
18:01 -!- Koon [~koon@Koon.developer.gentoo] has joined #gentoo-meetings
18:01 <@g2boojum> tseng: k, thanks.
18:01 <@Method> carpaski isn't here either for gpg
18:02 <@g2boojum> Method: genone is here
18:02 <@Method> ok
18:02 -!- steel300 [~coxj@steel300.developer.gentoo] has joined #gentoo-meetings
18:03 <@Method> well
18:03 <@Method> wrt grp
18:03 <@Method> the thing is that it's alot of space that could be used elsewhere, and the argument is that there isn't any benefit to offering half a dozen subarches, and it takes alot of time/effort and space to build all those
18:04 <@Method> ciaranm tells me that sparc only supports 1 subarch and haven't had any problems with this
18:04 <@SwifT> documentation wise it's also easier to have one or two GRP sets... less people complaining that the GRP doesn't work because they used a too high subarch setting :)
18:04 <@Method> sorry, 2, one for sparc32 and the other for sparc64
18:04 -!- mode/#gentoo-meetings [+v ciaranm] by Method
18:04 <@g2boojum> ( We're pretty far from a manager quorom (sp?), so I'll collect votes afterwards.  )
18:05 -!- gerrynjr [~gerrynjr@gerrynjr.developer.gentoo] has joined #gentoo-meetings
18:05 <@Method> -hardened has more or less been told we have to use BT for our releases because the space issues on the mirrors
18:05 <@Method> which i find absurd personally
18:05 <+ciaranm> yeah, sparc just has v8 and ultrasparc, rather than v7, v8, supersparc, hypersparc, cypress, v9, ultrasparc, ultrasparc3, and no-one's moaned
18:05 <@SwifT> are there ppl against limiting the grp set?
18:05 <@g2boojum> Stuart asks why we need two sets on x86?
18:05 <@SwifT> otherwise this topic can be closed fairly quickly :)
18:06 <@Method> who were the multiple set advocates?
18:06 <@Method> i don't even see why there needs to be 2 personally but as long as the space is freed up it doesn't matter to me
18:06 <@SwifT> i proposed two sets just to be able to shout at mandrake, but it's not something I am willing to put my shoulders beneith
18:07 <@Method> x86 and i686?
18:07 <@SwifT> I surely wouldn't mind with a single set
18:07 <@SwifT> yeah
18:07 <@SwifT> but a single set (x86) would be very easy to explain to the users and to document
18:07 <@SwifT> and rationally also easier to defend in a gwn article 
18:08 <+ciaranm> x86 and i686 makes sense (i686 covers almost all optimisations for modern CPUs, and x86 covers everything supported)
18:08 <+ciaranm> i686->athlon-xp is a small difference. x86->i686 is larger.
18:08 <@g2boojum> I'm going to suggest a vote on (a) limiting [yes,no], and (b) limiting x86 to 1 or 2.  Stuart notes that -mcpu=i686 will build on all x86.
18:09 -!- Kugelfang [dvandyk@Kugelfang.developer.gentoo] has joined #gentoo-meetings
18:09 <@g2boojum> That (b) means either just x86 (of some flavor), or both x86 and i686.
18:09 <@Method> true
18:09 -!- roger55 [~roger@roger55.developer.gentoo] has joined #gentoo-meetings
18:09 <@pvdabeel> make that (a) limiting x86 [yes,no] please
18:09 <@SwifT> :)
18:10 <@g2boojum> pvdabeel: Fair enough.  Although I assume people will complain if suddenly there are 82 different ppc GRP sets.
18:10 <@Method> pvdabeel: presumably we don't want other archs doing the same thing unless it's something that needs differenciation (ie: ppc, ppc64 but not g3, g4, g5)
18:10 <@pvdabeel> g2boojum: there aren't and if there are we will have a discussion
18:11 <@pvdabeel> :)
18:11 -!- Irssi: #gentoo-meetings: Total of 21 nicks [7 ops, 0 halfops, 1 voices, 13 normal]
18:11 <@SwifT> hot topic :)
18:11 <@Method> we'd like to build a grp set for -hardened which is where this issue initially arose from.. but for a somewhat different reason than the existing grp sets
18:12 <@Method> but thats another issue anyway
18:12 <@Method> anyway, are we done with this?
18:12 <@SwifT> on the -releng discussion I didn't see any references to other architectures having to restrict their set as well (such as ppc); I guess it is safer to currently only focus on x86; if the same question needs to be posed for ppc (or other archs), let that be discussed on -releng
18:13 <@g2boojum> If there's no other discussion, may I have votes from avenj, dmwaters, Method, pvdabeel, SwifT, and tseng (if still present)?
18:13 <@SwifT> so let's vote on (a) restricting the x86 grp set
18:13 <@SwifT> g2boojum: yes (on the restriction), don't care (on the 1 or 2 sets)
18:13 <@Method> a) yes b) 1 (with -mcpu) and tsengs vote is the same
18:13 <@pvdabeel> same
18:13 <@dmwaters> same
18:14 <@g2boojum> looks like Jon had to go.
18:14 <@g2boojum> Okay, on to item two, then.
18:14 -!- mode/#gentoo-meetings [+v genone] by g2boojum
18:14 <@avenj> same here too
18:14 <@avenj> and now i'm going
18:14 <@g2boojum> genone: Can you give a quick status update?
18:15 <@g2boojum> avenj: thanks
18:15 <@Method> wait, what do all those same's mean?
18:15 <@g2boojum> Method: I read it as (a) yes and (b) 1 (w/ -mcpu)
18:15 <@Method> ok
18:16  * dmwaters nods
18:16 <+genone> not much to update, situation still is the same as several months ago (when the last discussion on -dev happened)
18:16 <@dmwaters> genone: what exactly is that situation? I'm not sure I was around the last time this was braught up
18:17 <@Method> gpg discussions on -dev are practically worthless
18:17 <+genone> means that we have signing mostly complete, but still lack the required key policy for verification
18:17 <@g2boojum> genone: So, the code is in place to sign and verify manifests, and the main issue is what key(s) to use, how to verify them, and how often to retire them?
18:17 <+genone> for that key policy, two questions have to be answered: a) where do we get and store the keys b) how do we check if a key is trustworthy
18:18 -!- mode/#gentoo-meetings [+v Stuart] by g2boojum
18:18 <@dmwaters> I've been suggesting a gentoo keyserver but never got any response back from anyone at infra
18:18 <@Method> well
18:18 <@Method> we talked about that before and it'd be too hard, too many queries and the uptime would have to be absolute
18:19 <+Stuart> regarding the key policy - is there an existing scheme used somewhere else on the net that we could adopt?
18:19 <@Method> redhat and others sign with 1 key which isn't good for us
18:20 <+genone> the most simple solution that I offered was to simply have a keyring accessible on a secure location and every key in that keyring is considered trustworthy
18:20  * dmwaters nods at genone 
18:20 <@Method> storing the keyring in portage is the best since then it won't have to be externally checked
18:20 <@Method> and then verifying that keyring with a master key or something to make sure it's trustworthy
18:20 <@Method> and using existing keyservers for that
18:21 <+genone> that could be implemented fast, but has probably some security drawbacks
18:21 -!- steel300 [~coxj@steel300.developer.gentoo] has quit [Client Quit]
18:21 <@Method> the master key will always have to be verified manually by the user if it is to be trusted
18:21 <@dmwaters> Method: debian has a keyserver for dev keys, I'd think that we could have something similar for us, we would put the keys there, so we know that they're our keys
18:21 <@Method> paranoid users will already do this (via keyservers or the fingerprint and http)
18:22 <@Method> dmwaters: but infra is already spread thin, including the keyring in portage is good enough, esp if it's integrity can be verified with a master key
18:23 <@Method> (scox) what about a keyserver which generates a weekly tarball of keys and put them into distfiles ?
18:23  * g2boojum suggests that fast, but with potential drawbacks, beats not happening until all the bugs get worked out (or the cows come home).
18:23 <@Method> thats ok but the revocation period would be too long IMO
18:23  * Stuart wonders what security benefit a Gentoo-run keyserver will offer over putting the keys into portage
18:24 <@Method> if it's via rsync the user is always guarenteed an up to date keyring and if the master key is alreayd in the users keyring it can be verified without an external source
18:24 <@dmwaters> Stuart: for  1, that keyring would be rather large
18:24 <@dmwaters> (in portage)
18:24  * Stuart respectfully points out that that isn't a security benefit
18:25 <@Method> and it's alot harder on infra that way
18:25 <@Method> genone: does the current portage already have the ability to sign and check?
18:26 <+genone> Method: sign: yes (with some restrictions), check: no
18:26 <@dmwaters> the other thing about our  own keyserver is that if the keys change like new sigs etc all people would have to do is send their  new keys there
18:26 <@Method> genone: how can we start signing manifests now?
18:27 <+genone> FEATURES=sign
18:27  * Stuart points out that keys in Portage can be replaced just as easily as keys in a keyserver
18:28 <@dmwaters> Stuart: how, how will that ring in portage be constantly up to date
18:29 <@Method> it'll just have to be updated
18:29 <+Stuart> dmwaters: unless I'm missing something, by the cvs ci command
18:29 <@dmwaters> Method: it wouldn't have to be this way. it's up to the dev to deal with their keys
18:29 <@Method> the deal with keyservers is, nothing stops someone from going to a keyserver and putting their key with my email address
18:29 <@Method> nothing at all
18:29 <@Method> if it's in portage it's been verified by devrel or whoever and signed with the master key
18:29  * Stuart agrees with Method
18:30 -!- mode/#gentoo-meetings [+v Kugelfang] by dmwaters
18:30 <@dmwaters> Kugelfang: ask your question
18:30 <+Kugelfang> how can we be sure a keyring in portage is right ?
18:30 <@Method> ok
18:30 <+Kugelfang> the keyring is supposed to sign portage items
18:30 <+Stuart> the other advantage to putting keys in portage is that signed packages can be checked without a working internet connection - something that you can't do with relying solely on a keyserver
18:30 <@Method> the keyring in portage should be signed by a master key which is _NOT_ stored in portage
18:30 <+Kugelfang> ok
18:31 <@Method> the master key can be verified either via the keyservers or fingerprint + http
18:31 <@dmwaters> and, my trip is being called, so I'm off.
18:31 <@Method> genone: which portage version supports FEATURES=sign?
18:31 <@Method> dmwaters: later
18:31 <@Method> koon thinks some automated method should verify the master
18:31 <+genone> Method: 2.0.51 definitely, let me check 2.0.50
18:32 <@Method> but IMO anything automatic can be bypassed
18:32 <@dmwaters> Method: we still need a way to update the keyring, dailey or something to that effect that doesn't require me or someone to manually go through several hundred keys to see if there is anything new
18:33 <+genone> Method: 2.0.50 should also support it
18:33 <@Method> dmwaters: it would just be part of the dev signup process.. if the dev changes keys it's their responcibility to 1) update the key with you guys and 2) resign all his stuff
18:33 <@dmwaters> Method: I'm talking about new sigs or uids
18:33 <@dmwaters> Method: some people change those or add them
18:34 <@Method> well, we talked about this before, it's probably better to keep a seperate key for signing ebuilds that is not your standard email key
18:34 <@Method> IMO the ebuild signing key shouldn't be used for anything else
18:35  * dmwaters would rather be allowed to use 1 key, rather  then generating 2 or 3
18:35  * Stuart thinks method's suggestion would limit the disruption when a key has to be revoked
18:35 <@dmwaters> but still reguardless those ebuild keys should be signed by another dev
18:36 <@Method> well, that isn't always possible (esp by the rules of gpg key signing)
18:36 <+genone> question for those with more gpg knowledge: how do you check (on the commandline) that a key was signed by another key ?
18:36 <@dmwaters> either way, I think we need to allow for ease of adding keys or changing them in this
18:36 <@Method> the thing with having it in portage.. just pull the affected key (retiring or rogue dev) and resign the stuff that is signed by that key (after checking it ofcourse)
18:36 <@dmwaters> gpg --list-sigs key
18:37 <@Method> and sign the new keyring with the devrel master key and push to cvs
18:37 <@Method> and thats all
18:37 <@Method> else we have to mess with revocation keys and stuff like that
18:37 <@Method> it'd be much more difficult
18:38 <@dmwaters> here, if we had a keyserver, we'd have a lot more flexibility in things like this I believe
18:38 <+Stuart> dmwaters: how would portage check signed packages when the keyserver was unavailable?
18:38 <@dmwaters> I'm sure there are ways to restrict what gets sent to that keyserver, though I've not researched it.
18:39 <+Stuart> dmwaters: for example, because the gentoo user is on dial-up, and can't afford to stay online?
18:39 <@Method> dmwaters: how so? once someone pulls a key off a keyserver it's stored in their personal keyring, after that the only way to forcibly revoke it from the users keyring is to use a revocation key
18:39 <@Method> it'd be much more difficult for everyong
18:40 <+Kugelfang> there could be a script that get's called during emerge sync (or be part of it) that "syncs" the users keyring with all developer keys
18:40 <@dmwaters> Stuart: if that person  wants to install that package, they have to be able to download the distfiles for that package, at a guess here, you should be able to check it on emerge
18:40 -!- mode/#gentoo-meetings [+v Koon] by Method
18:40 <@Method> Koon: speak
18:40 <+Kugelfang> the key ids could be stored it portage, so the script knows what keys to get and which keys not to keep
18:41 <+Stuart> dmwaters: some users download distfiles manually at work, and then emerge at home on disconnected systems
18:41 <+Koon> My solution : keyring in portage, emerge sync verifies the keyring integrity with a stored master key
18:41 -!- jforman [jforman@jforman.developer.gentoo] has joined #gentoo-meetings
18:41 <+Stuart> dmwaters: a keyserver would seem to cause more problems than it solves
18:41 <@Method> it does
18:41 <+Koon> stored master key is seeded by install media, then manually updated (rare)
18:41 <@Method> and it also increases the workload of infra
18:42 <+Koon> checked once, then emerge sync insures integrity
18:42 <@Method> using a keyserver would increase traffic dramatically also
18:42 <@dmwaters> how do we know that the keyring isn't modified on one of the mirror boxes if the box is compromised?
18:42 <@Method> for revocation checks
18:42 <@Method> dmwaters: because the master devrel key signed the keyring
18:43 <@Method> and the master devrel key is NOT stored in portage, and is verified externally via keyservers or fingerprint + http
18:43 <@Method> anytime a key is added or removed from the portage keyring the devrel key signs it
18:43 <@Method> the only downfall is keeping very very tight control of the master key
18:43 <@Method> ie: who uses it, where it's stored, etc
18:44 <+Stuart> method: and making sure we don't lose it
18:44 <@Method> right
18:44 <@dmwaters> we still need a way to update the dev keys on that keyring now and then
18:44  * Koon 's solution is the same as Method, except that I would store the master key locally so that emerge sync can verify the keyring integrity automatically
18:44 <@Method> and that key needs a set expiration of every few months or whatever
18:44 <+Stuart> koon: doesn't your solution create the possibility of man-in-the-middle attacks?
18:44 <@Method> Koon: yes, locally on the trusted media, and also, once a user has verified it once it's already stored locally (in their own keyring)
18:45 <+Koon> Stuart: you don't update the master key by portage so I don't think so
18:45 <+Stuart> koon: ok
18:45 <@g2boojum> Method: Wouldn't the frequent expiration require massive re-signing by devrel every few months?  I'm far from a gpg expert, so my apologies if I'm saying something stupid.
18:46 <@Method> i believe, even if we do the automated verification via koon's idea there should still be available an easy way to manually verify it
18:46 <@Method> g2boojum: it's going to be resigned every time a dev comes or leaves anyway, i'm not saying we sign every key, but the actual keyring file
18:46 <+Koon> obviously we need some tools to help massive re-signing and keyring maintenance
18:46 <@Method> right
18:46 <@dmwaters> Koon: nod.
18:47 <@Method> there will be scripts, a part of the dev add/remove procedure to easily manage the keyring and resign it
18:47 <+Koon> it should be as easy to use as if there were a keyserver
18:47 <@Method> the frequent expiration would prevent a key from getting leaked somehow and used after the expiration
18:48 <@dmwaters> and dispite saying "we should only use one non-used key to sign ebuilds"  I think that we still need ways to update that key, if we ask all 200 or so devs to generate new keys, we're going to get protests
18:48 <@Method> dmwaters: tough luck IMO
18:48 <@dmwaters> Method: it's not that simple
18:48 <@Method> like hell it isn't :)
18:48 <@Method> if you want to commit you'll generate a key, it's that simple
18:49 <@Method> we had a developer (dragon) that was very anti signing when this was first brought up
18:49 <@Method> and he was basically told tough luck if you want to commit
18:49 <@Method> security isn't something to be lazy about
18:49 <@dmwaters> Method: it took me 6 requests and shutting off peoples accounts to get the key ids we have now, we'll have a rebellion on our hands if we go through that again
18:50 -!- khai [khai@khai.developer.gentoo] has joined #gentoo-meetings
18:50 <+Koon> dmwaters: because they didn't see the gain... here I thjin kit will be easier
18:50 <@Method> dmwaters: the security implications of using keys that a developer has had a long time and will have a long time is worse
18:50 <@dmwaters> Method: I'm not saying be lazy, I'm saying that we should accept our current keys, and require 2 keys from any new degvs
18:50 <+Koon> ... I think it will ...
18:50 <@Method> also
18:50 <@Method> we need very strict standards for the signing keys
18:50 <@Method> ie: this is the _EXACT_ command you use to generate it
18:51 <@Method> not some adhoc collection of keys with different expirations, bit lengths, etc
18:51 -!- SwifT [~Sven@swift.developer.gentoo] has quit ["leaving"]
18:52 <@Method> ok, lets take a quick unofficial poll
18:52  * Stuart thinks that if we're not strict with our keys, then the whole keysigning approach is just cosmetic and spin, and devalued
18:52 <@Method> Stuart: exactly
18:52 <@Method> first poll, who is in favor of the keyring in portage vs. a keyserver
18:52 <@Method> or, i guess 1) 1 or 2
18:53 <@Method> 1
18:53 <@Method> hrm
18:53 <@Method> (13:52:26) (solar) 1) We can do now with no infra changes 2) kurt would vote no on a keyserver
18:53 <@Method> (13:52:28) (solar) 1
18:54 <@Method> anyone?
18:54 <+Koon> 1, if my vote is called for
18:54 <@Method> it's not an official vote, anyone that can talk
18:55 <+Stuart> in that case, 1)
18:55 <@Method> (13:54:07) (scox) 1
18:55 <+Kugelfang> i'm against keys in portage.... why invent the wheel again ? I'm for a keyserver
18:55 <@g2boojum> genone: I'm assuming that if, at some point, we decided to change from keys in portage to keys on a keyserer or elsewhere that wouldn't be that hard a portage change?
18:55 -!- latexer [~peter@latexer.developer.gentoo] has joined #gentoo-meetings
18:55 -!- mode/#gentoo-meetings [+v latexer] by g2boojum
18:56 <@pvdabeel> Method: how does keywording works with GPG signing? 
18:56 <@Method> whoever changes the ebuild signs the manifest
18:56 <@Method> the thing is, you MUST verify the key before changing anything, else you might be unintentionally signing something malicious
18:57 <@Method> s/signing/sign/
18:57 <+genone> well, if I had to decide most of this stuff will be implemented via some configurable command line stuff, e.g. VERIFY_COMMAND="gpg --bla %key" or something like that
18:57 <@pvdabeel> ok, I guess that verification can be automated
18:57 <@Method> yea
18:57 <+genone> so it would be just one config option
18:57 <@Method> genone: how hard would it be logistically?
18:58 <@pvdabeel> for the initial signing, how long would an audit of a single ebuild take?
18:58 <@Method> pvdabeel: whoever already maintains it should know whats in it, most ebuilds are very small
18:59 -!- `Kumba [Kumba12345@Kumba.developer.gentoo] has joined #gentoo-meetings
18:59 <@Method> solar just wrote a quick script
18:59 <@Method> http://dev.gentoo.org/~solar/portage_misc/dosignverify
18:59 -!- mode/#gentoo-meetings [+vv scox solar] by Method
18:59 <+genone> Method: depends on the details, but I'd say not very hard if we have a definite command to verify a key
18:59 <@pvdabeel> so we only verify the code in the ebuild, not the code downloaded by the SRC_URI, or patches
19:00 <@Method> pvdabeel: if the SRC_URI is from a trusted place and the patches are then no
19:00 <+genone> pvdabeel: the Manifest is signed which holds the md5sums for all ebuilds and digests
19:00 <@pvdabeel> ok perfect
19:00  * g2boojum silently blesses carpaski
19:01 <@Method> pvdabeel: the thing is, if you change keywords in 1 ebuild you are signing them all, that is why it's important to verify the manifest before changing anything
19:01 <@pvdabeel> that's ok
19:02 <@g2boojum> genone: So what, exactly, do you need to make all of this happen?
19:02 <@Method> ok, does anyone else have an opinion on 1 explicit signing key vs. using a general key?
19:03 <@g2boojum> Method: You mean whether the devs should have a ebuild-sign-only key vs using their normal e-mail key?
19:03 <@Method> solar noted that if a manifest doesn't match then nothing should be done, definetly not resigning it, a bug should be open to investigate it
19:03 <@Method> g2boojum: yes
19:04 <@g2boojum> Method: I don't understand the danger of using a general key.  Help?
19:05 <+Koon> Method: in all cases it puts the load on devrel -- solution 1 means they will have to be updated at each ID change, solution 2 means recreate all keys
19:05 <+genone> g2boojum: 1) a decision about the key policy 2) putting the keys on the decided location 3) finally get all devs to always use repoman 4) some time 5) everything I forgot now
19:05 <@Method> g2boojum: because the keys are generated without any strict standard, the expirations will be non-standard and the strength of the key will be non-standard, further a key that someone has had and will have for a long time may be more succeptable to being stolen
19:05 <@Method> Koon: the keys can be put in cvs
19:06 <@Method> maybe.. i'll have to think about that
19:06  * Koon agrees with Method -- and I don't think solution 2 puts less load on devrel anyway
19:06 <@Method> cvs might open more attack vectors on the keys
19:06 <@g2boojum> Method: Thanks
19:07 -!- carpaski [~carpaski@carpaski.developer.gentoo] has joined #gentoo-meetings
19:07 -!- mode/#gentoo-meetings [+o carpaski] by ChanServ
19:07  * Stuart draws attention to genone's comment that devs will have to start using repoman all the time
19:07 <@Method> Stuart: yes, they better ;)
19:07 <@Method> esp spanky
19:07 <+Stuart> erm - which manifest to eclasses appear in?
19:07 <+Stuart> method: oh yes, esp spanky
19:07 <@Method> good point
19:07 <+genone> Stuart: none yet, that's one of the current restrictions
19:07 <@Method> hrm
19:08 <@carpaski> Sorry I'm late.
19:08  * genone hands the discussion over to carpaski
19:08  * Stuart thinks we need a way to sign eclasses before signed packages are viable
19:08 <@carpaski> Sounds like gpg signing.
19:08 <@pvdabeel> eclasses definitely need to be signed too
19:08 <@carpaski> That should/would be signed just like manifests...
19:09 <@carpaski> Detached signatures for eclasses would work just fine.
19:09 <@Method> carpaski: is a digest system the best way for eclasses or should they be individually signed/
19:09 <@carpaski> Individually.
19:09 <@Method> i mean.. signing a package means you did something to that package so it's fair to use a manifest
19:09 <@carpaski> gpg is much better than md5 anyway.
19:09 <@Method> but eclasses are very diverse
19:10 <@carpaski> I'd recommend multiple signatures on an eclass, actually. 2 or 3... as they can affect a thousand or more packages.
19:10 <@pvdabeel> I agree
19:10 <+Stuart> not always practical
19:10 <@carpaski> There aren't that many eclasses.
19:10 <+Stuart> there's 95
19:10 <@Method> some eclasses have a very specific purpose that not many people touch/desire
19:11  * Stuart points to the nxserver eclass as an example of an eclass that no-one else looks at
19:11 <@carpaski> The only practical problem is passing it off to someone else to verify it and add their sig. It'll take you an extra 5-30 minutes.
19:11 <@Method> carpaski: 1 malicious ebuild can hijaak the whole tree just like an eclass can
19:13 <@carpaski> You don't have to be an expert to verify the ebuild... Just check it again the one you have. Use a diff, see what changed. If it looks like a trojan, obviously you wouldn't sign it. If 5 lines changed 3 einfo strings, then it'd be ok to sign.
19:13 <@Method> well, i dont' think you should ever resign something that didn't match the manifest
19:13 <@carpaski> You could also create a review team with a specially trusted keyset.
19:13 <@Method> not matter how benign the changes look
19:13 <@Method> not even if it's a whitespace change
19:13 <@Method> because the reason for the change needs to be investigated
19:13 <@carpaski> I agree. Need to figure out how to actually do that.
19:13  * Stuart feels strongly that it's important to be able to update eclasses as easily as it will be to update ebuilds
19:14 <@carpaski> Stuart: Updating is very simple... Trusting it is the hard part.
19:14 <@carpaski> Stuart: You could always void all security and it'd work regardless of what you did.
19:15 <+Stuart> carpaski: there's no less trust than on any single ebuild
19:15 <@carpaski> If we're looking for security, there will be some comprimises.
19:15 <+Koon> Should the profile files like packages.mask be signed too ?
19:15 <@Method> carpaski: just to recap it seems like the best method is to put the keyring in portage and sign it with an external devrel master key which is verifiable via keyservers or a fingerprint
19:15 <@carpaski> Koon: Doesn't influence operations. It could be, but there's noting executed.
19:15 <@Method> carpaski: incase you didn't see that earlier
19:15 <@pvdabeel> Koon: inheritance in there too
19:15 <@carpaski> Method: Sounds like a very simplified version of the original plan.
19:16 <@Method> carpaski: yea, pretty much
19:16 <@Method> carpaski: the original was pretty complex and it hasn't been done yet :\
19:16 <@Method> we just want _something_, even if there aren't 7 master keys to sign off the keyring
19:16 <@carpaski> Method: Well, we aren't using repoman fully yet either, so it doesn't matter.
19:16 <@carpaski> Anyone have a log so far so I could read back?
19:17 <@Method> mine has control charactors in it or i'd post it for you
19:17 <@carpaski> I can deal with that.
19:17 <@Method> ok
19:18 <@pvdabeel> Will automatic verification of ebuilds GPG be an option, I think it needs/can be turned of for netless installs?
19:18 <@carpaski> Is there anything unclear that someone wants to talk about?
19:18 <@carpaski> pvdabeel: The idea was 'strict' and 'severe' or something to that effect as feature flags.
19:18 <@pvdabeel> ok perfect
19:18 <@carpaski> strict being the basic gpg verification
19:19 <@carpaski> severe being ultra-anal
19:19 <@g2boojum> carpaski: To some extent that's your question.  The goal here is to make the decisions necessary for the portage team to implement signing.
19:19 <@Method> carpaski: http://tachyon.snu.edu/gentoo-meetings.log.txt
19:19 -!- cybersystem [cyber@cybersystem-gentoo.staff.freenode] has left #gentoo-meetings []
19:19 <@Method> pvdabeel: netless installs will work fine since the keyring is in portage and the master key can be on trusted media (cdroms) or verified once manually
19:20 <@pvdabeel> yep true
19:20 <@Method> once the master key is added to the system keyring the portage keyring can be verified
19:20 <@Method> so after that no net access is needed
19:20  * tseng returns
19:21 <@pvdabeel> so what are the remaining issues again?
19:22 <@carpaski> Anyone want to write out a summary of issues to be dealt with? (proposed solutions/goals)
19:22 <@carpaski> In here, I mean...
19:22 <+Koon> pvdabeel: creating tools for devrel keyring maintenance :)
19:22 <@Method> do we have a historian or something? :P
19:22 <@carpaski> Koon: What do you need for that? gpg's interface provides all that, no?
19:23 <@pvdabeel> Koon: wasn't infra working on some LDAP solution, maybe that can be reused
19:23 <@Method> pvdabeel: ldap is a nightmare
19:23 <@pvdabeel> k
19:23 <+Stuart> let's not do the ldap thing
19:23 <@Method> carpaski: do you have an opinion on each dev having an explicit signing key vs. using their normal email keys?
19:23 <@Method> dmwaters doesn't like the idea that everyone needs another key for signing
19:23 <@Method> but i think it's necessary
19:24 <@tseng> of course she doesnt, she is keeping track of them atm
19:24 <@carpaski> That's better, yes. If the key is _only_ used for signing, and not excrypting, it'd be ok.
19:24 <+Koon> Method : dmwaters doesn't like the idea of maintaining key changes in a keyring too
19:24 <@Method> right
19:24 <@g2boojum> (1) What type of key should be used by devs (general or specific to ebuild signing)?  (2) Where will the keys reside? (3) How will they be signed by a "master" key? (4) How often will keys expire and what happens when they do? (6) eclass signing? (7) anything else I've forgotten.
19:25 <@Method> are these all seperate votes?
19:25 <+genone> 7 is an interesting vote then ;)
19:25 <@tseng> i vote for free ice cream on item 7
19:26 <+Koon> I think once the initial dev signing keys are created, it will be less work to maintain that dealing with ID/name/email changes on global dev keys
19:26 <@carpaski> 1: DSA/ElGamal of 1024
19:26 <@carpaski> 2: gentoo-x86/metadata/dev-keyring
19:26 <@Method> yes, with a 6 month expire time or so
19:26 <@carpaski> 3: Standard signature
19:27 <@g2boojum> Method: Um, I was really just trying to be comprehensive.  
19:27 <@carpaski> Method: Yeah. That's around what I use.
19:27 <+Koon> Method : what's the point of expiring ? The keyring is maintained anyway
19:27 <@Method> g2boojum: ok :)
19:27 <@carpaski> 5: When they expire, they are done. You can extend expiration dates.
19:27 <@Method> Koon: because i don't want keys getting leaked and used without knowledge :\
19:27 <@Method> Koon: why do credit cards expire? :)
19:28 <@g2boojum> carpaski: 3. <-- who handles that signing.  Does devrel need a full-time employee handling signing.  I don't suppose that's an issue that needs resolving today, however.
19:28 <@pvdabeel> 6) yes, don't care how much signs
19:28 <@carpaski> g2boojum: You only have to do it once per key.
19:28 <+Koon> Method: they could be retired from the keyring every 6 months... but you're right, tehy should expire by default too
19:28 <@carpaski> g2boojum: I'd rather see multiple master keys, actually.
19:29 <@Method> me too but that is the whole huge complex trust crap from before that never happened
19:30 <@g2boojum> So, the simplest vote might be to give carpaski an official "sounds good to me, go to it!"
19:30 <@Method> multiple master keys is the Right Way to do it, but that incurs lots of additional manpower overhead
19:30 <@tseng> g2boojum: thats what im thinking.
19:31 <@tseng> g2boojum: i just want someone (portage dudes) to come up with something and tell me how to use it
19:32 <@Method> if signing is already available could some of us start using it now? or should we wait for the keyring to be put in place, etc
19:32 <@carpaski> You could start now, if you're version of portage works.
19:32 <@carpaski> It won't affect anything. The verification isn't there yet.
19:32 <@pvdabeel> with a separate signing key?
19:32 <+solar> so every dev should set FEATURES+=sign now in order to get the tree ready?
19:33 <@pvdabeel> I'd like to get signing too today
19:33 <@carpaski> solar: Wouldn't hurt. Sure.
19:33 <@pvdabeel> can somebody write a small howto?
19:33 <@Method> ok, first we need to set the key generation standard so we can generate keys and start signing our own stuff (if we are so inclined)
19:33 <@carpaski> FEATURES="manifest sign"
19:33 <@Method> carpaski: how do we tell portage which key to use?
19:33 <@carpaski> Method: Should be an var somewhere...
19:33  * carpaski looks.
19:33 <+genone> 	gpgcmd = "gpg -ab --yes --homedir "+repoman_settings["PORTAGE_GPG_DIR"]+" "
19:33 <+genone> 	gpgcmd+= "--default-key "+repoman_settings["PORTAGE_GPG_KEY"]+" "
19:34 <@carpaski> That'd be it.
19:34 <@carpaski> in make.conf: PORTAGE_GPG_DIR is you're GPG directory ~/.gpg
19:35 <@carpaski> in make.conf: PORTAGE_GPG_KEY is the ID (Name) of the key
19:35 <@Method> excellent, thanks
19:35 <@carpaski> We need an agent for this. Something secure that times out fairly quickly.
19:36 <@carpaski> If you are actually  using secure keys, then you will go insane when you have to type it in for each ebuild.
19:37 <@Method> yea :\
19:39 <@Method> could something be built into repoman? can python request non-pageable memory?
19:40 <@carpaski> You'd have to run it setuid
19:40 <@Method> carpaski: what should the command to make good signing keys be?
19:43 <@carpaski> gpg --homedir $(portageq envvar PORTAGE_GPG_DIR) --gen-key
19:43 <@carpaski> DSA
19:43 <@carpaski> 1024
19:44 <@carpaski> 6m
19:44 <@Method> hrm, can all that be defined on the command line so that we can just give a command to use?
19:44 <@carpaski> You'd have to set PORTAGE_GPG_DIR first.
19:44 <@carpaski> Batch mode is experimental.
19:44 <@carpaski> I'll look...
19:46 <@carpaski> It requires redirection or a file input.
19:46 <@Method> hrm
19:46 <@Method> ok
19:47 <@carpaski>  /usr/share/doc/gnupg*/DETAILS.gz
19:47 <@carpaski> Unattended key generation
19:48 <@carpaski> Are there any other issues that we need to discuss on this? I'd imagine people are getting bored at this point.
19:49 <@g2boojum> Any complaints about how this seems to be going?
19:49 <@g2boojum> If not, I would like to open the floor for general dev discussion?
19:50 -!- mode/#gentoo-meetings [-m] by g2boojum
19:50 <@g2boojum> The floor is now open.
19:50  * jforman screams
19:50 -carpaski:#gentoo-meetings- So... Who's alive?
19:50 <@carpaski> jforman: You seem to be.
19:50 < jforman> heh nick
19:50  * carpaski likes making people's computers beep.
19:50  * genone lies dead on the floor
19:50 < jforman> sorry i missed all the fun, was on a plane next to a woman puking for 1hr45m
19:51  * Koon lies dead, under genone's body on the floor
19:51 <+genone> carpaski: good that I disabled the pc speaker ;)
19:51 <@g2boojum> Any items not on the agenda that devs would like to raise?  (That's the purpose of this part of the program, although you are also quite welcome to comment on earlier issues.)
19:51 < jforman> g2boojum: looks like this meeting was rousing one ;)
19:51 < jforman> g2boojum: was bit torrent stuff discussed at all? special things people might want it to do, etc
19:52 <+Koon> last man standing wins
19:52 < jforman> carpaski: how stable is your daemon and stats stuff ?
19:52 <@g2boojum> jforman: Nope
19:52 <+solar> what is the base version of portage to use so we can start signing today?
19:52 <@carpaski> jforman: getting better. Load can be really high dependent upon fragmentation.
19:52  * g2boojum has to step out.
19:53 < jforman> carpaski: fragmentation of the disk?
19:53 <@carpaski> solar: I recommend all devs on testing/development versions
19:53 <@carpaski> jforman: Yeah.
19:53 < jforman> carpaski: any way to combat that?
19:53 <@carpaski> jforman: Defrag?
19:53 < jforman> nod
19:53 <+Koon> solar: <genone> Method: 2.0.50 should also support it
19:54 <+scox> what if we talk about using personal gpg key vs. dedicated ebuild key ?
19:54 <+Koon> scox: I think dedicated ebuild key won
19:55 <@carpaski> Development portages will be the only things getting updates and developers really need to be testing changes so we get feedback... so I recommend development portages.
19:55 <+scox> Koon: it's ugly
19:55 <+solar> I'm at 2.0.50-r6 and I can't force a Manifest to be signed.
19:55 <@carpaski> scox: Well... With 150+ keys, I recommend you seperate them. It'll make mail annoying though. Depends on how you use GPG. For most, it won't matter.
19:55 <+Koon> scox: more consistent and easier to manage
19:56 <+scox> carpaski: it's a must-do or should-do ?
19:56 <@carpaski> scox: could-do
19:56 <+scox> cause at the same time we could import the keyring and check every -core/-dev mail
19:56 <@carpaski> scox: I don't have mine seperated right now. It's a bit messy with that many keys in it.
19:57 <+genone> solar: if I read the code correctly the signing is done at commit time, so you'll have to commit
19:57 <+scox> carpaski: okay, the only restriction is that it must be 1024DSA, with an expiry date set, right ?
19:58 <+solar> genone: thanks testing
19:59 -!- Koon [~koon@Koon.developer.gentoo] has quit ["Leaving"]
19:59 <+solar> woot we got it to error :)
19:59 <@carpaski> If devrel is handling the master key, they would be the ones deciding how to create the keys. I just posted my suggestions. Not setting an expiration allows keys more time to be broken.
20:00  * jforman is out
20:00 -!- jforman [jforman@jforman.developer.gentoo] has left #gentoo-meetings []
20:00 -!- Kugelfang [dvandyk@Kugelfang.developer.gentoo] has left #gentoo-meetings [""You run, never stop, got to win, got to run till you drop""]
20:01 <+scox> aye
20:03 <@Method> hrm
20:03 <@Method> gpg: keyblock resource `--default-key/secring.gpg': file open error
20:03 <@Method> gpg: keyblock resource `--default-key/pubring.gpg': file open error
20:03 <@Method> gpg: no default secret key: secret key not available
20:03 <@Method> gpg: signing failed: secret key not available
20:05 <@carpaski> Method: You have to add the var into make.conf
20:05 <@Method> yea
20:05 <@Method> i added GPG_DIR and GPG_KEY
20:05 <@carpaski> PORTAGE_GPG_DIR ?
20:05 <@Method> oh, i thought the portage part was prepended
20:06 <@Method> hrm
20:06 <@Method> Traceback (most recent call last):
20:06 <@Method> File "/usr/bin/repoman", line 1151, in ?
20:06 <@Method> mysigs+=[sigfile]
20:06 <@Method> NameError: name 'sigfile' is not defined
20:07 <@carpaski> What version?
20:07 <@Method> 51_pre3
20:07 <@carpaski> pre3?
20:07 <+genone> hmm, that's in all versions including CVS
20:07 <@Method> [ebuild UD] sys-apps/portage-2.0.50-r6 [2.0.51_pre3] -build 219 kB [1]
20:08 <@carpaski> genone: yeah, figured. Just wanted to match line numbers.
20:08 <@carpaski> echo "sys-apps/portage" >> /etc/portage/package.unmask
20:08 <@carpaski> echo "sys-apps/portage" >> /etc/portage/package.keywords
20:08 <@carpaski> Devs should all have that.
20:08 <@Method> so should i try pre7?
20:08 <@carpaski> Yep.
20:08 <@Method> k
20:08 <@carpaski> Not that it'll fix it...
20:10 <+genone> it looks like that code can be removed, mysigs isn't used anywhere
20:11 <@carpaski> It would be used for commits.
20:11 <@carpaski> Portage could/should commit only files that are relevant.
20:11 <@Method> so what should i do?
20:12 <@carpaski> Comment out that line.
20:12 <@carpaski> # immediately before the 'mysigs'
20:12 <@Method> ok
20:13 -!- gerrynjr [~gerrynjr@gerrynjr.developer.gentoo] has left #gentoo-meetings ["Client exiting"]
20:14 -!- Method changed the topic of #gentoo-meetings to: rmGentoo meetings channel -- remember, 1800 UTC == 1400 EDT
20:14 <@Method> err
20:14 <@Method> hrm
20:14 <@Method> ? Manifest.asc
20:14 <@Method> ?
20:15 <@carpaski> It did a detached.
20:15 <@carpaski> I never tested that code.
20:15 <@Method> it didn't add it
20:15 <@carpaski> So we'll have to work on signing for 51 then.
20:15 <+genone> it should be signed inline anyway
20:15 <+scox> which gpg flags did you use ?
20:15 <@Method> uhh
20:15 <@Method> so
20:16 <@Method> can i sign something right now or do i have to wait?
20:16 <@carpaski> Have to wait, it seems.
20:16 <@Method> :\
20:16 <@carpaski> Shouldn't be too long.
20:16 <@Method> ok
20:16 <@carpaski> I can take a look at it in a few minutes...
20:16 <@carpaski> Unless genone wants to do it.
20:16 <+scox> carpaski: have to use --clearsign to make it inline
20:17 <@Method> i'm sure he knows :P
20:17 <+scox> seems like -b were used
20:17 <+scox> anyway
20:17 <@carpaski> yeah was -ab
20:17 <+scox> got the most important exam of my whole life til now tomorrow, gotta go back to study :)
20:18 -!- Method [Method@Method.developer.gentoo] has quit ["bbl"]
20:18 -!- ciaranm [~ciaranm@ciaranm-gentoo.active.supporter.pdpc] has left #gentoo-meetings []
20:18 <+scox> cya
20:19 <+genone> bye scox
20:21 -!- Irssi: #gentoo-meetings: Total of 17 nicks [6 ops, 0 halfops, 5 voices, 6 normal]
20:22 <@g2boojum> Okay, w/ the lull I'm declaring the meeting officially closed.  Thansk, all.
20:22 <@carpaski> OK.
20:22 -!- roger55 [~roger@roger55.developer.gentoo] has left #gentoo-meetings ["off to bed."]
20:22 <@carpaski> #gentoo-portage if you have other questions, bugs, comments
20:22 -!- khai [khai@khai.developer.gentoo] has left #gentoo-meetings []
--- Log closed Mon May 31 20:22:44 2004
