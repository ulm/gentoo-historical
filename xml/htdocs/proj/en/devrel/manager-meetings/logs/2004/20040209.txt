18:00 <@g2boojum> Welcome, all.  It's 1800 UTC, so let's go ahead and get started.  Method, it's your show.
18:00 <@Method> oh
18:00 <@Method> ok
18:01 <@Method> well first the PIC/TEXTRELOC thing
18:01 <@Method> solar has info 
18:01 <@Method> we need to get a policy written 
18:01 <@Method> go ahead and tell everyone the issues solar
18:01 <@Azarah> solar: btw, 20040207 is not masked, just unstable, so guess you will have to add a new rev?
18:02 <@Method> or pappy or pipacs, whoever wants to :)
18:02 < solar> the problem at hand is we have shared objects witch are not getting PIC when they should be and normal et_exec executables that are getting PIC when they should not.
18:03 <@g2boojum> solar: What is "PIC" and "et_exec" ?
18:03 < solar> PIC is Position Independent Code 
18:03 <@drobbins> solar: can I rephrase that?
18:04 < solar> please. 
18:04 -!- Battousai [~bryan@206.225.103.137] has joined #gentoo-meetings
18:04 < solar> I'm a coder not a talker.
18:04 <@drobbins> solar: I think the main problem is that developers do not have a clear policy or resource on how to address PIC issues with various ebuilds.
18:04 < pappy-> From a security perspective, the goal is as most as possible readonly ELF segments (text and data) and nonexecutable segments (stack).  This also means that the text segment should be relocation-free, read: it should not contain data and addresses that need to be touched by the dynamic loader thus can be marked readonly at direct program startup by the kernel.
18:04 <@drobbins> solar: which is resulting in inconsitent/wrong handling of the issues in various ebuilds
18:04 < pipacs> ET_EXEC is an ELF file type. every single file on your system that contains executable machine code is an ELF file. they come in different types, ET_EXEC is the one used for executables, ET_DYN for shared libs and ET_REL for .o objects.
18:05 < pappy-> What some people did to some extend was adding PIC flags to ebuilds that had problems compiling, sometimes on nonintel arches.
18:05 < pappy-> Now certain users got angry at this scheme because it costs speed and is often not needed to fix the actual compile problem.
18:05 < solar> I've gathered some basic info on PIC that you can read at. http://dev.gentoo.org/~solar/xml/pic.html
18:05 < pipacs> (pappy, don't mix in security for now)
18:06 < pappy-> The reason solar and pipacs know so much about PIC and ELF is that their business is to secure operating system environments
18:06 <@g2boojum> pipacs: Thanks.  drobbins: You were saying?
18:06 < pappy-> But from a programmers perspective, one should ask: why was PIC added to the ebuild and what was the real root cause.
18:06 -!- pauldv [~pauldv@callisto.cs.kun.nl] has joined #gentoo-meetings
18:07 -!- mode/#gentoo-meetings [+o pauldv] by ChanServ
18:07 < pappy-> So drobbins is right that we should develop a policy towards correct use of PIC behaviour.
18:07 < pappy-> Method: alright?
18:07 -!- bazik [~bazik@smtp.gentoo.org] has joined #gentoo-meetings
18:07 < pipacs> so, PIC enters the picture for this reason: while ET_EXEC files (executables) are loaded into memory always at a fixed address, shared libraries (ET_DYN files) are not.
18:08 < pipacs> that means, those libraries have to be relocated at runtime
18:08 <@pauldv> sorry all, we were a bit late with dinner
18:08 < pipacs> which is what ld.so does
18:08 -!- mode/#gentoo-meetings [+m] by pauldv
18:08 -!- mode/#gentoo-meetings [+vv pappy- pipacs] by pauldv
18:08 -!- mode/#gentoo-meetings [+v solar] by pauldv
18:08 <+pipacs> to save on the relocation cost, one can compile code that goes into a shared library to be position independent
18:08 <+pipacs> that means, at runtime ld.so won't have to touch those pages at all
18:09 <+pipacs> which means those pages will be shared among different processes
18:09 <+pappy-> pipacs: sure but let us ask the question: how did it help for some developers putting PIC into a ebuild that may have solved compile problems?
18:09 <+pipacs> which is kinda the goal of using shared libs
18:09 <+pappy-> pipacs: i believe drobbins is interested in this question alone.
18:09 <+pipacs> pappy, let me just explain what PIC is and its role
18:09 <+pipacs> then we can go on
18:09 <@drobbins> what I'm interested in is getting a clear policy written up, where developers *don't* need to know all the technical mumbo-jumbo
18:10 <@pauldv> I agree with daniel on that
18:10 <+pipacs> so, based on the above the goals should be: 1. make sure that code which ends up in a shared library has been compiled as PIC
18:10 <@drobbins> this topic has been rehashed on the lists several times, we now have a PIC question in our developer quiz, and the devs need a clear resource that doesn't require them to learn assembly language
18:10 <+pipacs> 2. make sure that code that ends up in an executable has not been compiled as PIC
18:11 <+pipacs> those should be the two 'ground' rules
18:11 <+pipacs> so the further questions are: how do you determine what part of the source goes where, and how/where do you make sure it's compiled as PIC or not, as necessary
18:12 <+pappy-> just put a policeman on the front door of the compiler: dynamically shared goes left, normal executable goes right door
18:12 <@drobbins> ok
18:12 <@drobbins> these problems come up when things don't compile
18:12 <@drobbins> normally on non-x86 arches
18:12 <+pipacs> if a package provides only a shared library, then -fPIC in cflags will make sure it's PIC (well, i will skip stuff w/ assembly code)
18:13 <+pipacs> if a package provides only executables, then it must NOT contain -fPIC in CFLAGS
18:13 <@drobbins> so the main question devs want to know is, when this situation is encountered, what should be done
18:13 <+pipacs> if the package provides both, then you have to make sure that only the shared libs are compiled w/ -fPIC
18:13 <@pauldv> pipacs: is there an easy way to determine whether an executable was compiled with the right CFLAGS?
18:13 <@drobbins> pipacs: so how about a rule "enable just enough PIC, but no more"
18:13 -!- Ramereth [~lance@ramereth.registered.freenode] has joined #gentoo-meetings
18:13 <@drobbins> pipacs: so how about a rule "enable just enough PIC, but no more than necessary"
18:13 -!- sj8trunks [squid@mobius.lpbproductions.com] has joined #gentoo-meetings
18:14 <+pipacs> drobbins, well, sounds nice on paper but that's hardly an algorithm a dev can follow
18:14 <@pauldv> what do you thing about having portage check everything in a bin dir and all .a files. It is not entirely complete, but I think it should be able to detect much
18:14 <+pappy-> with non-braindead Makefiles this is what normally happens either way: the system compiles applications normally and shared libraries in -fPIC mode
18:14 <@drobbins> right, but it's a general overview of what the dev should try to do
18:15 <+pappy-> drobbins: first tell people not to use -fPIC in /etc/make.conf:CFLAGS
18:15 <@drobbins> we can have these rules:
18:15 <+pipacs> pauldv, for checking an executable: it's in general 'hard' to detect PIC code (requires looking at assembly)
18:15 <+pappy-> then make sure no ebuild is adding it actively
18:15 <@drobbins> 11:11 +pipacs> so, based on the above the goals should be: 1. make sure that code which ends up in a shared library has 
18:15 <@drobbins>                been compiled as PIC
18:15 <+pipacs> to check a shared libs, it's easier: look for text relocations
18:15 <@drobbins> 11:11 +pipacs> 2. make sure that code that ends up in an executable has not been compiled as PIC
18:15 <@pauldv> pipacs: darn
18:16 <@pauldv> pipacs: I suppose it is also hard for archives
18:16 <+pipacs> indeed, same problem as with the main executable
18:16 <@drobbins> 3. PIC should not be enabled arbitrarily; it should not be enabled globally in /etc/make.conf. and in particular ebuilds that don't do PIC stuff properly, it should only be enabled where absolutely needed
18:16 <+pappy-> how much time do we have to talk it out at this meeting?
18:16 <@drobbins> and then we can go into specifics about how to address problems
18:16 <+pipacs> hmm, actually, maybe by looking at the relocation types you can detect PIC
18:16 <+solar> drobbins: I'm not sure on all aspects of #3 there
18:16 <+solar> there are times you will want fPIC in CFLAGS 
18:17 <+pappy-> solar: leave out the whole hardened stuff for now please
18:17 <+solar> this has nothing to do with hardened
18:17 <@pauldv> solar: explain
18:17 <+solar> there are other advantages of PIC for some people and some places. 
18:17 <@drobbins> solar: but developers should not be enabling it by default on an arch
18:17 <+solar> there is a new compiler option called pie (in gcc-3.3.x) 
18:18 <@drobbins> solar: these are rules for developers
18:18 <+pappy-> solar: please
18:18 <+solar> we need aim to be able to comply with this option.
18:18 <@drobbins> so s:/etc/make.conf:in the profile:
18:18 <+pappy-> in my opinion we should concentrate on the proper implementation of a stable normal gentoo system first
18:18 <@drobbins> agreed
18:18 <+solar> in a profile your right.
18:18 <+pipacs> solar, let's leave -pie for another occasion
18:18 <@Method> ok
18:19 <@Method> the point is that makefiles need to be fixed rather than appending -fPIC to cflags in an ebuild
18:19 <@Method> correct?
18:19 <+pappy-> pipacs: just make your points and summarize the correct usage of PIC for the normal gentoo development please in a second:
18:19 <@drobbins> Method: yep
18:19 <+pappy-> Method: my question is: how did -fPIC _solve_ the miscompiling behaviour?
18:19 <@drobbins> Method: ideallly, because then the patch can be sent upstream
18:19 <+pappy-> Method: this is the interesting point
18:20 <@Method> what about the [ "$ARCH" == "hppa" ] && append-flags -fPIC thing, is that acceptable or should that also be fixed in the makefile (since it's not really an hppa problem but a makefile problem)
18:20 <+pipacs> so, if you try to use -fPIC where absolutely needed (i.e. bad package makefile from clueless developer) then you will get non-PIC executables, and at most text relocations in some libs. still, everything should work. then you can go on and fix the text relocs
18:20 <@drobbins> Method: ideally, fixed in makefile
18:20 <@drobbins> (imo)
18:20 <@Method> right
18:20 <@drobbins> Method: what you pasted is acceptable to quickly get some shared lib to compile on hppa
18:20 <@Method> the problem up until now is just that developers didn't know what the problem was and append-flags -fPIC seemed like a magical fix
18:20 <@drobbins> yep
18:20 <@Method> and policy needs to be written to address this
18:20 <@Method> is avenj still sick?
18:21 <@drobbins> yep
18:21 <+pappy-> Method: exactly
18:21 <@g2boojum> Method: Yes
18:21 <+pappy-> Method: but what was the technical reason that it _worked_
18:21 <+pipacs> pappy, i was just gonna ask the same
18:21 <+pappy-> Method: in my experience the behaviour of fPIC changes the global scope of functions and data symbols
18:21 <@Method> ok, avenj and I can coordinate to write the policy if thats ok
18:21 <+pipacs> if it was the other way around, i could udnerstand
18:21 <@drobbins> pappy-: the Makefile wasn't enabling -fPIC, it was producing textrel on x86 and causing it to fail building on hppa
18:21 <+pipacs> but why adding PIC helps... is weird
18:21 <@Method> pappy-: i have no idea, but thats what has been happening
18:21 <+pappy-> so the only way it could have worked is via different setup of symbols suddenly
18:21 <+pappy-> GOT and PLT
18:21 <@drobbins> pappy-: on x86, you can have non-PIC shared libs, and they work!
18:21 <+pappy-> think twice
18:21 <@drobbins> (sorta)
18:22 <@drobbins> pappy-: on hppa and friends, they don't even build that way
18:22 <+pappy-> drobbins: symbol scope has nothing to do with addressing by registers
18:22 <+pappy-> the only thing i could imagine is the symbol got exported or categorized by compiling it PIC suddenly
18:23 <@drobbins> pappy-: I am not a C/asm guru, but I'd imagine that the linker recognizes PIC code and handles the symbols appropriately
18:23 <+pappy-> drobbins: yes
18:23 <@drobbins> pipacs would know
18:23 <+pappy-> drobbins: you're right
18:23 <+pappy-> it doesnt recognize the code though
18:23 <+pappy-> it realizes the binary "wants" that
18:23 <+pappy-> pipacs: what is happening to symbols when nonPIC turns to PIC
18:23 <+pappy-> pipacs: given scope and visibility of symbols
18:24 <+pipacs> that should not matter/change
18:24 <+pipacs> what matters is how PIC functions are called
18:24 <@Azarah> isnt it just that it gets mapped into a wrong segment or such?
18:24 <+pappy-> pipacs: but with nonPIC the .got is not polluted, right?
18:24 <+pipacs> on some archs (dunno if parisc is one such) you need special code stubs to be set up
18:24 <+pipacs> function descriptors
18:24 <+pappy-> pipacs: when the .got is empty with nonPIC and is full with PIC, what about those symbols
18:25 <+pipacs> if you call a PIC function w/o going thru such a descriptor stub, the called function won't work
18:25 <+pipacs> but i don't know how/why you would get compile/link time errors because of this
18:25 <+pipacs> at least not w/o seeing the exact error
18:25 <+pappy-> build failures are mostly out of missing functions or objects...
18:25 <+pappy-> so we would have to investigate where it stopped and why it stopped there and continued with PIC building
18:26 <+pappy-> and my suggestion is that there are symbols not found and found with PIC
18:26 <+pappy-> just my cents
18:26 <+pipacs> pappy, hmm, those are wierd errors
18:26 <+pipacs> and w/o looking at the specific exampels i can't tell what happened
18:26 <@drobbins> maybe we need to have a policy for elevating tricky issues like this so they can get properly investigated
18:26 <@Method> ok, aside from 'why' the bad fix worked, we need to figure out a decent way to locate and fix makefile problems wrt PIC
18:26 <+pipacs> drobbins, i think that's a good idea
18:26 <+pappy-> sure, lets make a deal and go ahead
18:26 <@Method> most devs probably won't care to figure it out, we need a tool
18:26 <+pipacs> special cases should be handed down to people who can investigate
18:26 <@Method> solar: is that sort of thing possible?
18:27 <@drobbins> a tool, or a process to have them reviewed by people knowledgable about diagnosing these things
18:27 <+pipacs> i mean people who know PIC and other issues inside-out
18:27 <@Method> drobbins: yes
18:27 <@drobbins> so we don't band-aid them and forget about them
18:27 <+pappy-> pipacs: toolchain is rather more important than knowing about direct PIC behaviour as far as i can see from most build errors... what goes where and why
18:27 <+solar> we can check for a few keys things to ensure a shared object is safe. 
18:27 <@drobbins> something like "OK, so you found a weird PIC issue. You can enable -fPIC for now, but that's just a temp. workaround. You also need to follow these steps to make sure a PIC-guru investigates the issue:"
18:28 <+solar> but the inverse checking ET_EXEC will be tricky if doable at all..
18:28 <+pipacs> drobbins, 'make sure' = 'open a bug'
18:28 <+pipacs> maybe create a special bug category for this
18:28 <@drobbins> yep
18:29 <@Azarah> the rate bugs goes these days, its easy for one to get forgotten
18:29 <+pappy-> hppa suffers hard from the PIC phenomenon
18:30 <@drobbins> pappy-: maybe the same issue over and over again
18:30 <+pappy-> greppin for fPIC and hppa at the same line brings 51 hits at first sight
18:30  * pappy- grins
18:31 <+pipacs> pappy, can you reproduce some of the errors w/o fPIC and see what goes wrong?
18:31 <+pappy-> pipacs: sure, my hppa boxes are hot
18:31 <+pipacs> (not for today's discussion, just whenever you have time)
18:31 <+pappy-> pipacs: xfree on hppa appended fPIC for such a long time
18:31 <+pappy-> i think they fixed it some time ago
18:32 <+pappy-> it was also about missing libs or symbols
18:32 <+pappy-> is the only agenda item today PIC discussion?
18:32 <+pappy-> i dont want to steal time
18:32 <+solar> can we move on to when custom patches need to be created for when when a package has PIC and it still does not comply. 
18:33 <+solar> when pic is done we will address setuid/setgid
18:33 <+pappy-> bug 10932
18:33 <+pappy-> you can look at that bug
18:34 <+solar> the easy check to see if a shared object plays along is to check for text relocations (readelf -d *.so) 
18:34 <+pappy-> alpha and hppa
18:34 <+pappy-> readelf -d * | grep TEXT
18:34 <+pipacs> pappy, that bug  reports is useless
18:34 <+pipacs> it doesn't show the real error
18:34 <+pappy-> this shows if text relocations exist, if any
18:34 <+pappy-> pipacs: sorry
18:35 <+solar> libmpeg{2,3} wont play along for example and for this a custom patch will have to be created.
18:36 <@Method> ok, does everyone sorta get the issue about PIC now and understand the need for policy?
18:36 <@Method> we might make a pic-team alias to assign those bugs to for investigation
18:37 <+pappy-> i prefer task force
18:37 <@Method> pic-task-force? :P
18:37 <+pappy-> Method: *g*
18:37 <@Method> ok, i'll talk to avenj about starting a policy when he's better
18:37 <@Method> are we ready to proceed?
18:37 <+solar> in order to create a custom patch we are going to need to recruit some developers that have a good understanding of this on for the arches..
18:37 <@Method> solar: understood
18:38 <+solar> pipacs has been really helpfull but we are overloading him.
18:38 <+pappy-> solar: first thing to do when resolving text relocations is adding the found data/function accesses to a WIKI or generalized documentation and explaining technically what is happening
18:38 <+solar> pappy-: I use bugzilla for this.
18:38 <+pappy-> for example some obscure data moving around between functions can lead to text relocations even if everything was compiled pic
18:39 <+pappy-> Ulrich Dreppers documentation helps understand some basic principles of PIC and text relocations, btw- read dsohowto.pdf
18:39 <+pappy-> a must-read for developers doing toolchain dance around the fire
18:39 <+solar> agreed
18:40 <@drobbins> policy should probably be handled by devrel first, then get on a -base project page in more detail (with resources)
18:40 <+solar> Here is the link to that for those of you looking to gain a better understanding. http://people.redhat.com/drepper/dsohowto.pdf
18:40 <+pappy-> basically every text relocation that remains after compiling PIC is a programming mistake that can be resolved by more or less looking and investigating bad coding practices in the package that experiences this problem.
18:41 <@Method> drobbins: are you suggesting that you write the policy?
18:41 <+pappy-> solar should write the policy if he has time, with the backup of pipacs, i would vote for that ;-)
18:41 <@Method> pappy-: solar and I have talked about this already
18:42 <+solar> pappy-: no I've asked for this topic to be brought up here cuz I'm not a policy writer. I'm your seed planter.
18:43 <@drobbins> Method: nope
18:43 <@Method> drobbins: ok
18:43 <@drobbins> Method: i'm not in devrel
18:43 <@Method> oh
18:43 <@drobbins> releng :)
18:43 <@Method> gotcha
18:43 <+pappy-> even the assembler failures with PIC compiling can be divided into three main avenues of progression: broken outdated support for capabilities or similar glibc-provided features via assembler sysctl macro construction, multimedia or boot loaders doing low level register shuffling and data moving and third: simple broken assembler inline
18:43 <@Method> ok, lets continue to setuid/setgid
18:44 <@Method> solar: ?
18:44 <+solar> 2 mins please.
18:44 <@Method> ok
18:44 <@Method> well, i'll start then
18:44 <+pipacs> do you guys still need me?
18:44 <@pauldv> pipacs: you are welcome to stay
18:44 <@Method> I think the idea is to have all ebuilds/packages that set suid/sgid flags authorized by a central authority
18:45 <@Method> for security reasons
18:45 <@Method> not authorized, maybe reviewed is a better word
18:46 <+solar> I think reviewed together authorized is what we need to happen..
18:46 <+solar> I'm going to just paste my mail on the idea and wait for some feedback.
18:46 <+solar> 2) Require devs to ask for permission if a pkg can have a setuid/setgid
18:46 <+solar> bits before it's giving via an ebuild and or Makefile.
18:46 <+solar> Motivation:
18:46 <+solar> a) Currently there is no way to us to even begin an auditing project without this prior knowledge with the large number of packages we maintain.
18:46 <+solar> b) Reduce potential security risks by either devs and or upstream authors ignorantly giving these bits away for free which put us "ALL" at risk.
18:46 <+solar> c) allow acl & role maintainers within Gentoo to effectively write policies.
18:46 <+solar> Implementation:
18:46 <+solar>  Open for discussion.
18:46 <@pauldv> Method: here I think that we can have portage issue a warning when there is a suid/guid binary
18:46 <@Method> solar: some examples of inappropriatly set flags?
18:46 <@drobbins> pauldv: that actually seems like a good idea
18:47 <@Method> pauldv: indeed... there is already a portage patch that allows you to maintain your own permissions in a file in /etc
18:47 <@drobbins> pauldv: at least it keeps everyone informed
18:47 <+solar> Method: 4777 is the worse case of such a thing.
18:47 <@Method> solar: do you know of packages that do that?
18:47 <@pauldv> drobbins: I think it is necessary, it is quite some work to monitor the files that are suid/sgid
18:47 <+solar> Method: If I ever saw such a thing I'd fix it.
18:48 <@pauldv> solar: isn't 7777 worse?
18:49 <@Method> pauldv: that isn't valid
18:49 <@Method> 4777 means any user can use the binary as the owner (ie: root)
18:49 <@Method> and write to it for that matter
18:50 <+pappy-> auditing the surrounding area of setuid/setgid files would also benefit the whole distribution: which text files as config files get used by the setuid/gid file and which processes and config tools have access to those, how is the environment used in the setuid/setgid, how can the user interact with the setuid/setgid binary, either by directly calling it and/or calling it via indirect means like web server cgi scripts, maintenance tools for user man
18:50 <@Method> so what do you guys suggest as a solution?
18:50 <+pappy-> btw: when a directory is setgid, it becomes a project directory marking newly created files with the group ownership of that directory, just for info.
18:50 <@pauldv> Method: ok (I'm not clear on the code for also making it sgid and sticky)
18:51 <+solar> that portage start tracking file permissions
18:51 <@pauldv> pappy-: that is actually a quite usefull feature
18:51 <+pappy-> pauldv: hey yeah, i love it too ;-)
18:52 <+solar> this could be done simply by doing tar ztf pkg.tbz2 > runtime.Manifest
18:52 <+solar> all of which can be automated.
18:52 <+pappy-> solar: doins and doexe can be peppered up to track that
18:52 <+solar> jtf even :)
18:52 <+pappy-> all the little things
18:53 <+solar> pappy-: do* wont help exactly. 
18:53 -!- mode/#gentoo-meetings [+o tseng] by ChanServ
18:53 <@Method> no
18:53 <+solar> thus I dont think is the proper place to preform these checks.
18:53 <@Method> do* is used when make install or whatever isn't used
18:53 <@Method> portage can perform the check before merge
18:53 <@pauldv> pappy-: I think it makes more sense to have portage issue a warning for all files with "special" permissions (or uid's above 1000, if we're going at it)
18:53 <+pappy-> pauldv: yeah
18:53 <+pappy-> Method: yes, would be good
18:54 <+solar> I'd personaly want to use 1024 myself. 
18:54 <@Method> aside from portage tracking it, how would be organize the group to review the need for said flags?
18:54  * pappy- imagines a frightened user repetively pressing CTRL-C after the red eerror appears: too many suid - warning - root exposure imminent - self destructing network daemons in T-5 seconds -
18:55 <+solar> Method: I think when a package has such a permission that the maintainer of said pakcage better know why it has it and can justify what it does.. 
18:55 <+solar> some  of the times these things can be worked around.
18:55 <@pauldv> solar: make it configurable for non-devs (what I mean is non-system uids)
18:56 <+solar> sure thats a good idea as well.
18:57 <@Method> solar: will you be able to write the needed code for tracking?
18:57 <+pappy-> pipacs: relocation R_PARISC_DPREL21L cannot be used when making a shared object; recompile with -fPIC
18:57 <+solar> I think today with setuid/setgid we are just talking about it. I'd like you guys to digest the idea and perhaps propose some creative ideas to our various mailing lists.
18:57 <+pappy-> pipacs: this is one of the errors on hppa when compiling applications that need the fPIC flags
18:58 <+pappy-> pipacs: talk #pax
18:58 -!- mode/#gentoo-meetings [+v ferringb] by pauldv
18:58 <@pauldv> guys, ferringb tells me that portage allready provides suid warning code
18:58 <@Method> speaking of broken flags
18:58 <@Method> ---s--s---    1 cron     cron        47804 Feb  7 14:37 /usr/bin/fcrontab
18:58 <@Method> why?
18:59 <+solar> pauldv: sure it provides a warning.. But this does not let us (developers track these) 
18:59 <@pauldv> ????
18:59 <+pappy-> heye
18:59 <+pappy-> Method: got root?
18:59  * pappy- grins at the top dog
18:59 <@Method> pappy-: :\
18:59 <+solar> pauldv: your a .xml fan/guru right? I'd like to perhaps work with you on this topic then.
18:59 <@pauldv> solar: for that we can tell devs to use the feature for packages they build
18:59 <@Method> oohh
18:59 <@Method> here is an ide
19:00 <@Method> idea
19:00 <@pauldv> solar: not much fan/guru, but I guess I know it
19:00 <@Method> portage can strip all s[ug]id unless the ebuild has RESTRICT='setid'
19:00 <@Method> and that RESTRICT has to be reviewed/authorized
19:00 <+pappy-> Method: no user will be able to use su or passwd any more
19:00 <@Method> pappy-: obviously shadow would have RESTRICT='setid'
19:00 <+pappy-> Method: thanks
19:01 <+solar> More or less I'd like to see something like this created. http://dev.gentoo.org/~solar/xml/suids.html
19:01 <@pauldv> Method: that would be easy enough to do. Basically maintaining a list of "sanctioned" ebuilds would allow portage to check even at merge time
19:01 <@Method> pauldv: exactly
19:01 <+solar> but perhaps with a short descrition of what or why it needs those bits.
19:01 <@Method> that would be easy to enforce since nothing could do setuid (even accidently)
19:01 <@Method> and then if there are problems it can be reviewed
19:01 <@Method> what do you guys think?
19:02 <+pappy-> no default ON
19:02 <+solar> Method: I'd like to have something like that. 
19:02 <+pappy-> deny setuid by default and open up for setuid on demand
19:02 <+pappy-> no reverse scenario with open by default
19:02 <@drobbins> Method: get a plan put together
19:02 <+solar> this could be done in ebuild.sh rather easy.
19:02 <@Method> drobbins: ok
19:02 <@drobbins> Method: would be good to have a page or two of xml detailing the problem, the solution
19:02 <@Method> is that acceptable to you guys? pauldv, Azarah, klieber?
19:02 <@pauldv> solar: I think that also is nice. A file with package / file matchings, checked at mergetime by portage. It would also increase security against havoc making ebuilds
19:03 <+solar> good. I'm glad we are all on the same page here.
19:03 <@pauldv> Method: for me it is acceptable to disallow suid/sgid by default. Make sure we have a good way of allowing it after that
19:03 <@Method> pauldv: is the RESTRICT thing ok?
19:04 <@pauldv> Method: for me it is, but we might want to move into the direction of a package or even file list for security
19:04 <@Method> pauldv: what do you mean?
19:05 <@tseng> a list of allowed suid binaries that portage checks against
19:05 <@Method> ok
19:05 <+solar> here would be the golden rule.. No suid would ever be allowed to have a " " in it's name.
19:05 <+pappy-> is there something yet to talk about on the agenda?
19:06 <@pauldv> Method: if we have a list of binaries that are allowed to be suid/sgid (record permissions too) then we can easilly check them, it would also mean that it is not easy to introduce a new suid binary in a package that allready has one. Call it extra security against changing upstream packages
19:06 <@Method> pauldv: ok
19:07 <@pauldv> Method: but that are a bit implementation details
19:08 <@Method> yea
19:09 -!- SwifT [~Sven@D5E06D43.kabel.telenet.be] has joined #gentoo-meetings
19:09 -!- mode/#gentoo-meetings [+o SwifT] by ChanServ
19:09 <+solar> so if you would like to start collecting a list of whats on your system now that would be very helpfull. 
19:09 <+solar> feel free to mail me that list.
19:10 <+ferringb> solar: it might be wise mandating dev's use setuidctl for ebuild testing
19:10 <@Method> solar: code snippit to do that?
19:10 <+ferringb> if a central listing is created, the main thing I'd worry about is ensuring dev's are updating it... hence the 'mandate FEATURES="setuidctl"' comment...
19:11 <+solar> find / -type f \( -perm -04000 -o -perm -02000 \)
19:11 <+solar> (not just setuid / setgid as well ) 
19:12 <+solar> find / -type f \( -perm -04000 -o -perm -02000 \) -ls 
19:12 <@pauldv> ferringb: you are right, that was like an implicit assumption. Warning about binaries that are suid but are reverted
19:12 <@Method> the problem with a list is that it'd be in some package that would have to be updated before some newly allowed setuid ebuild is installed
19:12 -!- seemant [~seemant@ca-stmnca-cuda1-blade2a-166.stmnca.adelphia.net] has joined #gentoo-meetings
19:12 -!- mode/#gentoo-meetings [+o seemant] by ChanServ
19:13 <@pauldv> Method: what about putting it into /usr/portage/profiles?
19:13 <@Method> that could work
19:13 <+solar> as long as we dont try to enforce this overnight it should not be to much of a problem.
19:13 <+pappy-> are we still on the agenda or can we ask questions related to previous gentoo meetings and advancements?  i would like to know about the current position of ebuild signing and integrity checking during syncing portage and fetching packages?
19:13 <+pappy-> speaking about setgid/setuid list... this could be implemented in portage i think...
19:14 <@pauldv> g2boojum: can we open the floor?
19:14 <@g2boojum> pauldv: I believe so.  Looks like we're pretty much finished w/ the agenda.
19:14 -!- mode/#gentoo-meetings [-m] by pauldv
19:14 <+solar> no GLEP 19 ?
19:14 <@pauldv> ok, fire away
19:15 <@pauldv> pappy-: there is basic signing support in portage, last time I checked it, repoman failed somewhere in the commit stage. The big problem is getting a keyring
19:15 <+pappy-> klieber: could you give an overview what happens to the ebuild signing and syncing now?
19:16 <@pauldv> pappy-: I don't think kurt is there
19:16 <+pappy-> i still do not get the problem what comes first, e.g. how to trust the first ever made connection to an internet server.
19:17 <+pappy-> and i wanted to discuss this the first time we had this issue...
19:17 <+pappy-> when the install cd has no support for trust
19:17 <+pappy-> syncing the first time is the weak point in my not-so-important opinion
19:18 <@Method> pappy-: fingerprint can be manually checked
19:19 <@Method> g2boojum: was glep 19 not on the agenda?
19:19 <+pappy-> yes but what prevents the rsync node from being compromised 100%
19:19 <@g2boojum> Method: Nope, nobody added it.
19:19 <@Method> whoops
19:19 <+pappy-> and the first connect fetching a compromised portage
19:19 <+solar> I think the keys need to be on the webpage for that.
19:19 <@Method> pappy-: thats an issue for another time..
19:19 <+pappy-> nobody was able to answer or satisfy that doomsday scenario
19:20 <+solar> which is mirrored all over the place.
19:20 <+pappy-> solar: mirrored to a 100% compromised rsync node?
19:20 <@pauldv> pappy-: a master key from a cd. And possibly a keyring copy form the distfiles mirror network
19:20 <+pappy-> pauldv: i take it for granted that dev.gentoo.org is not compromised.
19:21 <+pappy-> pauldv: all other machines are compromised in my doomsday scenario.
19:21 <+solar> pappy-: when it comes time I'll ask for you help in poking all the holes in it that we can so we can offer suggestions on how to make it all secure as can be.,
19:21 <+pappy-> the last bastion will be dev.g.o.
19:21 <@pauldv> pappy-: then we'd be out of luck as cvs contains all ebuilds
19:21 <+pappy-> pauldv: cvs is not visible to outsiders, the www presence is
19:21 <@pauldv> pappy-: that would be cvs.gentoo.org
19:21 <+solar> it's a good idea none the less to ensure that the very first rsync happens with an official gentoo server.
19:22 <+pappy-> solar: rite
19:22 <+pappy-> solar: and it should happen with not only an official but a solar-powered gentoo server
19:22 <+pappy-> that deserves a great amount of selinux hardened loving
19:22 <+pappy-> or grsec respectively
19:22 <@pauldv> pappy-: we distribute master keys on cd's and sign the keyring with it
19:22 <+pappy-> that would suit and make me shut up
19:22 <+solar> pappy-: our infa is like this now.
19:23 <+solar> no acls or roles.. But perhaps you would like to get involved there to help create master policies.
19:23 <+pappy-> lets talk about fosdem in 2 weeks, how many of the european devs will be there for handshaking?
19:24 <@pauldv> pappy-: apparently I'll be giving a presentation so I'll be there (on sunday only)
19:24 <+solar> I wont.
19:24 <+pappy-> pauldv: cool
19:24 <+pappy-> pauldv: looking forward to listen to that, whats it about?
19:25 <@pauldv> pappy-: I don't have the presentation yet, but something about new developments. I'm still open for suggestions
19:26 <+pappy-> Azarah: have time now?
19:27 <@Azarah> pappy-: maybe in a minute if you can?
19:28 <+pappy-> Azarah: i have noticed that your gcc ebuild is making excessive use of ${P} and ${PN} and all the other nice vars to download packages, unpack, configure and compile all the parts... but this heavily depends on the ebuild being named "gcc" and the version being "3.x.y" for proper inner workings... however when i want to steal this gcc to implement security solutions like hardened-gcc as a native gcc patch, i have to undergo major changes, is it poss
19:28 <+pappy-> i am namely speaking about a new hardened-gcc version implementing a native gcc patch for specs developed by solar, pipacs and me
19:28 -!- mode/#gentoo-meetings [-vvv ferringb pappy- pipacs] by pauldv
19:28 <@Method> are we done here:?
19:28 -!- mode/#gentoo-meetings [-v solar] by pauldv
19:29 < pappy-> Method: thanks
19:29 <@Method> pappy-: for what?
19:29 <@Azarah> pappy-: uhm, why not current with USE flag maybe?
19:29 < pappy-> Method: for leading the PIC talk
19:29 < pappy-> Azarah: very good question
19:29 < pappy-> Azarah: i was about to ask the same
19:29 < pappy-> Azarah: use hardened and phase in pappy-patch
19:29 < pappy-> this would make things easier
19:29 <@pauldv> Method: talking is as long as there are people asking ans answering questions, anyone is free to leave though
19:29 <@Method> ok
19:30 < pappy-> Azarah: the only prerequisite would be that normal gcc remains on the system and that hardened-gcc and normal gcc can be interswitched via gcc-cofnig
19:30 <@tseng> is anyone present that can add me to the access list here?
19:30 <@g2boojum> Sorry, I had to step out for a moment.  Since it's 1930 UTC, let's call it an official end to the meeting.  People are welcome to stay and chat, however.
19:30 < pappy-> Azarah: because i am not willing to shred systems with a simple mistake and then you get blamed for my mistakes
19:31 <@Azarah> pappy-: if it goes like that, I have a small question =)
19:31 <@Azarah> pappy-: how bad does it break things?
19:31 < pappy-> Azarah: it breaks _VERY_ bad things if i make a mistake
19:31 < pappy-> Azarah: and i am youngster and prone to make mistakes
19:31 < pappy-> Azarah: slotting it would help
19:31 <@Azarah> pappy-: and I have grown bunny ears
19:31 < pappy-> but then we need two versions
19:32 < pappy-> grown bunny earz?
19:32  * pappy- grins
19:32 < pappy-> do they grow you bunny ears in south africa?
19:32 <@Azarah> problem is that portage still do not support muti slot per version
19:32 <@pauldv> tseng:  you mean auto-op?
19:32 <@tseng> pauldv: right.
19:32 < pappy-> Azarah: lets talk straight: i don't want a blamepappy.tk address
19:32 <@tseng> i dont think i have anything atm
19:32 -!- mode/#gentoo-meetings [-o tseng] by tseng
19:32 < pappy-> Azarah: so the solution is either a) steal Martins work or b) use it in sys-devel/gcc via use flag
19:33 < pappy-> stealing it would allow gcc-config it via changed slot...
19:33 < pappy-> i peeked at the top of your gcc ebuild
19:33 < pappy-> where you define the file locations...
19:33 <@Azarah> pappy-: right
19:33 < solar> but this is a limitation of portage itself. This cant be solved in the ebuild.
19:33 < pappy-> but moving it to gcc would relieve me off a huge amount of copy-work
19:33 <@Azarah> SLOT=3.2-hardened or something
19:34 < pappy-> angels fall deep
19:34 <@Azarah> pappy-: solar is right
19:34 <@pauldv> tseng: try to find one of the following people: drobbins, seemant, klieber, avenj
19:34 < pappy-> what needs to be done to emerge two identical versions of gcc at the moment
19:34 <@Azarah> that is why I object to any real work to cross-compiling
19:34 <@pauldv> tseng: seemant is away in gentoo-dev
19:34 < tseng> pauldv: ok, thanks.
19:34 < pappy-> via 2 ebuilds: sys-devel/gcc and hardened-gcc
19:34 <@seemant> I'm here everywhere
19:34 <@Azarah> pappy-: I do not want a hundred gcc-* dirs under sys-devel
19:34 <@pauldv> tseng: s/away/awake/
19:35 < pappy-> Azarah: hardened-gcc is moving towards a grown up gcc
19:35 <@Azarah> pappy-: but portage do not get to support what is needed
19:35 <@pauldv> seemant: please add spyderous too ;-)
19:35 < pappy-> Azarah: you already knew we would go that direction i think
19:35 <@Azarah> pappy-: maybe in portage-ng
19:35 <@seemant> oh right to here?
19:35  * tseng hugs seemant 
19:35 <@Azarah> pappy-: how major is your changes
19:35 <@seemant> tseng: /cycle please?
19:35 < pappy-> Azarah: the question is: how to we achieve that
19:35 -!- tseng [~tseng@tseng.registered.freenode] has left #gentoo-meetings []
19:35 -!- tseng [~tseng@tseng.registered.freenode] has joined #gentoo-meetings
19:35 -!- mode/#gentoo-meetings [+o tseng] by ChanServ
19:35 <@Azarah> pappy-: basically, new SSP type of effort?
19:35 <@tseng> good deal.
19:36 < solar> Azarah: how hard would it be for gcc-config to swap out the xgcc bin for a hxgcc bin ?
19:36 <@pauldv> seemant: thanks
19:36 < pappy-> Azarah: we implement the specs file modifications in a true gcc patch
19:36 -!- Ramereth [~lance@ramereth.registered.freenode] has left #gentoo-meetings []
19:36 < pappy-> Azarah: multi platform aware via defines
19:36 <@Azarah> solar: easy
19:36 < pappy-> Azarah: no stupid sed logic any more
19:36 < pappy-> Azarah: great fun
19:36 < solar> hrmm we might have a real simple solution for this then :)
19:36 <@seemant> pleasure
19:37 < pappy-> what is xgcc
19:37 <@Azarah> solar: i was thinking build it twice
19:37 < pappy-> i dont know such binaries
19:37 < solar> it will just take twice as long to compile.
19:37 < solar> Azarah: exactly.
19:37 <@Azarah> solar: make things much more complex though
19:37 < pappy-> building it twice prevents systems from getting hit by a major sever pappy-bug
19:37 <@Azarah> except maybe if you do a for or such loop
19:37 < solar> I can work with you both towards this.
19:37 <@Azarah> then just duplication
19:37 <@Azarah> or dump the work horses into functions
19:38 < pappy-> just tell me if i should put hardened-gcc to a copied ebuild of the normal gcc
19:38 < pappy-> and how we stick to gcc-config changeable versions with it then
19:38 <@Azarah> pappy-: what solar and I was thinking,
19:38 <@Azarah> pappy-: is have one ebuild,
19:38 <@Azarah> pappy-: but build twice when hardened in USE
19:38 < pappy-> one ebuild is always nice for me because it takes less work for updating
19:38 < pappy-> build twice when hardened?
19:38 < pappy-> uhoh
19:39 < solar> pappy-: we can simplify those parts.. 
19:39 <@Azarah> uhoh?
19:39 < pappy-> imagine a user has stag3 fetched
19:39 < pappy-> and wants to kickstart hardened
19:39 < pappy-> he/she will fetch hardened-gcc and do emerge -euv world
19:39 < solar> the key thing with gcc as we have discovetred is the config/gcc.c 
19:39 <@Azarah> so build gcc on stages with USE=hardened
19:39 < solar> we just have to ensure that we build said objects two times.
19:39 < solar> not the whole thing.
19:39 < pappy-> solar: look
19:39 < pappy-> the problem i have
19:40 <@Azarah> no, just gcc
19:40 < pappy-> Azarah is a very busy man
19:40 < pappy-> and it would kill me to mess with HIS ebuild
19:40 <@Azarah> then you have the hgcc or whatever if you want
19:40 < pappy-> because when i make a simple typo, it gets stuck
19:40 < pappy-> USE=hardened emerge gcc is good
19:40 < pappy-> as long as the orignal gcc gets emerged
19:40 <@Azarah> pappy-: uhm, send me a patch? get it in masked first?
19:40 <@Azarah> pappy-: yes, that is the plan
19:40 < solar> a unique keyword might even be better.. 
19:40 < pappy-> Azarah: the patch is ready and at the moment i am just stealing -r7
19:41 <@Azarah> pappy-: then just switch via gcc-cofnig
19:41 < pappy-> Azarah: look into gentoo-projects cvs
19:41 < pappy-> Azarah: the latest 4.0 line for hardened-gcc in the distrib dir
19:41 < solar> lets say a mistake was made and we had to deploy new specs.. and we dont want/need everybody to update xgcc
19:41 <@Azarah> pappy-: then I assume you have some work to get it to build gcc twice?
19:41 < pappy-> solar: worst case: newly emerged gcc is dead-ended
19:41 < pappy-> life ends there
19:41 < solar> just those effected by such a change.. We then would be able to -rX bump without forcing everybody.
19:42 <@Azarah> pappy-: I would just prefer if code duplication will be as minimal as possible
19:42 < pappy-> Azarah: no, hardened-gcc shall currently not remove the existing gcc but introduce a new one
19:42 < pappy-> Azarah: exactly
19:42  * solar sees the big picture clear..
19:42 < pappy-> Azarah: minimal code duplication
19:42 <@Azarah> solar: you explain?
19:42 < solar> Azarah: which aspect ? new keyword? 
19:43 <@Azarah> maybe from start - i think you changed opinion and i missed it
19:43 <@Azarah> how do you guys think to implement it?
19:43 < pappy-> lets just summarize
19:43 < pappy-> USE=hardened && epatch /foo/pappy.patch
19:44 < solar> ok but one at a time please.
19:44 < pappy-> this would hardcore replace current gcc
19:44 < pappy-> i dont want this, too risky
19:44 < pappy-> please make two versions on the system if hardened
19:44 < pappy-> please, that is all i am begging for
19:44 < solar> ok are you done?
19:44 < pappy-> the rest is ready for shooting
19:44 < pappy-> go, solar, go
19:45 < solar> ok.. pappy lets assume for some reason there was a mistake in gcc piessp 
19:45 < solar> and we are using the same ebuild to build all.
19:45 < solar> all we really have to do is rebuild the config/ stuff and internal specs that control the linking in gcc itself. 
19:46 < pappy-> that is not true
19:46 -!- SwifT [~Sven@D5E06D43.kabel.telenet.be] has left #gentoo-meetings []
19:46 < pappy-> and you know that
19:46 < solar> we allow gcc to build xgcc as it already does.. then when it complete that step it rm *.o that pertain to the
19:46 < solar> hey can i finish please?
19:46 < pappy-> sure
19:46 < solar> on second pass we build the hxgcc 
19:47 <@Azarah> hmm, quicker than whole
19:47 < pappy-> xgcc is the intermediary stagering gcc for the gcc bootstrap, correct?
19:47 <@Azarah> solar: just explain to pappy about one ebuild, two gcc, as I think he is still out of the loop
19:48 < solar> it will all remain one ebuild. 
19:48 < solar> but lets say there is a bug for whatever reason and you need to bump a gcc
19:48 < solar> but azarah is not ready to bump gcc for everybody cuz of a tiny mistake that only effect uses of this system.
19:48 < solar> for this vs a USE=flag 
19:49 < pappy-> solar: i see you want to have the speed advantage of getting away from two monolithic, probably time-wasting compiles and move towards a "dualpathed" setup compiling two gcc versions with the normal and the hardened specs during one compile run
19:49 < solar> we can control who builds what based on KEYWORDS
19:49 < solar> so only uses that got hit by this will be rebuilding.
19:49 < pappy-> didnt zhen talk about hardened keywords?
19:49 < pappy-> long time ago?
19:50 < solar> not sure.. 
19:50 < pappy-> keywords are hassle to me
19:50 < solar> but something like this would be justifcation.
19:50 < pappy-> i dont think the problem is with gcc bumping asynchronously to our problems
19:50 < solar> keywords are only needed for this one build.
19:50 < pappy-> but i understand what you mean
19:50 < solar> or thats how I see this all playing together to work out best for everybody.
19:51 < pappy-> doing -rX bumps because of OUR stuff would force normal users to comply
19:51 < pappy-> which is bad
19:51 < pappy-> so we need hardened-gcc be a copy of gcc
19:51 < pappy-> thus making the original sys-devel gcc a more generalized portable ebuild
19:51  * pappy- blinks at Azarah 
19:51 < pappy-> i just want to plant my seed into some two/three points in the cp'ed ebuild from Az
19:52 < pappy-> this keeps my work low and gives hardened-gcc an own gcc
19:52 < solar> why cp anything ?
19:52 <@Azarah> well, i thought solar wanted the one ebuild two bins
19:52 < pappy-> solar: solves the keyword problem
19:52 <@Azarah> now i am confused :)
19:52 < pappy-> Azarah: yes, but i do not want two or more keywords describing the same thing
19:52 < pappy-> x86-hardened
19:52 < solar> atthe cost of how many extra CPU cycles? 
19:52 < pappy-> bah, thats not good keyword
19:52 < pappy-> solar: we can do that but you gotta convince the devs
19:53 < pappy-> solar: i am not sure somebody will allow hardened keywords
19:53 < solar> I'm not saying it should be a hardened keyword either.
19:53 < pappy-> and the extra cpu cycles are a good insurance
19:53 < pappy-> take it as a parachute if something goes wrong
19:53 < solar> however my orig idea was to have you finish you parts of the patch so I could dig into the gcc internals and make this an inner option of itself.
19:53 < pappy-> imagine autoclean is removing Scrt1.o by accident
19:54 < pappy-> or removing anything needed for gcc to work
19:54 < pappy-> the machine is dead meat basically then.
19:54 <@Azarah> solar: that might be the better idea if it could be contained
19:54 < solar> gcc should never remove Scrt1.o 
19:54 < pappy-> Scrt1.o is from glibc branch update
19:54 < solar> if it did I'd ring some necks :p
19:54 < pappy-> and can be autocleaned by glibc
19:55 < pappy-> anyway
19:55 < pappy-> what would be best for me is having Azarah's opinion what to do.
19:55 < pappy-> Azarah: what do you want me to implement now?
19:55 < solar> Azarah: absolutly contained and as well as extending the functionalty to everybody.
19:55 <@Azarah> Well, there are three options it seems:
19:56 <@Azarah> 1) Have one ebuild, installs both in diff gcc-config profiles.  Will be better to ensure updates/patches stays synced.  Might inconvenience the user not using hgcc
19:57 <@Azarah> 2) Have two seperate ebuilds.  Will take longer to build.  Will enlarge possible sync problems with patches, etc.  Will be not as 'bad' for non hgcc users
19:58 <@Azarah> 3) Have it as an flag to gcc like propolice.  Will ensure sync of patches.  least time to build.  Might be bad if the code is not 'contained' (meaning, without enabling it, it still screws around)
19:58 <@Azarah> I would say 3) if possible, and you can ensure it is contained
19:59 < pappy-> solar will make it a nice ./configure option
19:59 <@Azarah> if not, you guys will have to decide.  Seems you will choose 2), but you will then have to watch the gcc ebuild all the time
19:59 < pappy-> let us estimate just one thing:
19:59 < pappy-> or let me ask one foolish question please:
19:59 <@Azarah> never mind that
19:59 -!- bazik [~bazik@smtp.gentoo.org] has left #gentoo-meetings []
20:00 -!- pauldv is now known as pauldv|away
20:00 <@Azarah> err, rephrase
20:00 < solar> I think if the 3 of us work together and make a quiality product there should be no problem with having this functionalty built into all xgcc packages.
20:00 < pappy-> how foolish would it be to change and update the hardened-gcc patch that is fetched during NOT bumping the gcc version
20:00 < pappy-> and intimidating users of hardened having problems to FIX the patch and telling them to REEMERGE
20:00 < pappy-> instead of bumper
20:00 < pappy-> this is quality suck i know
20:00 < solar> ssp is a fundamental part of our gcc package now and some flag-o-matic operations happen auto maticly based on it. 
20:00 < pappy-> because things become odd
20:00 < solar> in the future there is going to have to be some other options that need to happen as well.
20:01 < pappy-> we just have to decide which death to die
20:01 <@Azarah> pappy-: we just keep it masked for a bit until we are sure its fine
20:01 < solar> and it going to issue a whole array of warnings to users that dont support it.
20:01 < pappy-> Azarah: listen, the problem with gcc automatically compiling PIC and SSP is clear: people _will_ hold YOU responsible
20:01 < pappy-> not us, not the hardened
20:02 < pappy-> they will come to YOU and blame Gentoo
20:02 < pappy-> this is why i am afraid to torture the good name of gcc for it
20:02 < pappy-> instead of relying on hardened-gcc
20:02 < solar> pappy-: when I seeded you that idea it was not for hardened alone.. 
20:02 < pappy-> i would rather really love to see hardened-gcc
20:02 < pappy-> solar: look
20:02 < pappy-> solar: we have two patches
20:02 < pappy-> solar: and i told ya:
20:02 < solar> this inverse logic in no way shape or form needs to be limited to "hardened" 
20:02 < pappy-> solar: YOUR configure logic will use -DNODEFAULT
20:02 < pappy-> solar: and the inverse logic WILL DEFINITELY make it to gcc
20:03 < pappy-> sys-devel/gcc
20:03 < pappy-> definitely
20:03 < pappy-> but hardened-gcc shall and will use the default logic
20:03 < pappy-> and will make users lose faith
20:03 < pappy-> because suddenly their toolchain will die compiling assembler
20:03 < pappy-> and they will scream and shout
20:03 < pappy-> but the reputation of gentoo is not endangered
20:03 < pappy-> because this is hardened-gcc then failing
20:03 < pappy-> not gcc
20:03 < pappy-> not Azarah failing
20:03 < solar> fact of the matter this is even better for arches like amd64 which have a kick ass releative addressing modes
20:03 < pappy-> sorry, just my points
20:03 <@Azarah> pappy-: if yo make it like SSP, then it is not active if no flag given ...
20:04 < pappy-> Azarah: but it is default active
20:04 < pappy-> Azarah: it acts in two flavours:
20:04 < pappy-> Azarah: default-on
20:04 < pappy-> Azarah: default-off
20:04 < pappy-> Azarah: just like hardened-gcc does now, it is default on
20:04 < pappy-> so it DOES make applications fail
20:04 <@Azarah> pappy-: and you might do it that if hgcc is active, then the crash handler spits out that it was active, and saying to try to disable it?
20:04 < pappy-> USE=hardened would introduce the default-off configure option
20:04 < pappy-> this is my wish
20:04 < pappy-> sys-devel/gcc using USE=hardened and the solar-powered default-off configure option
20:05 < pappy-> sys-devel/hardened-gcc continues hardcore pie and ssp default
20:05 < pappy-> Azarah: there is no crash handler in gcc
20:05 <@Azarah> there is sort of (for internal compiler errors)
20:05 < pappy-> Azarah: we compile multiple objects, no time-travelling possible
20:06 < pappy-> when we are caught in the act and the compiler dies, there is usually a lot of things that went wrong before that.
20:06 < solar> off topic.. I'd like to get the relro patch in binutils.. 
20:06 < pappy-> and discarding the error and trying to continue makes things worse normally.
20:07 < pappy-> Azarah: here are my plans:
20:07 < pappy-> Azarah: hardened-gcc-4.0-2.95 -4.0-3.2.3 and -4.0-3.3.2 will be semi-updated hand-edited copies of your work
20:07 < solar> pita to patch in (I've attempted) .. anybody heard any thing in a branch update from RH for binutils ?
20:07 < pappy-> Azarah: we should find a concensus how you formulate your macros a bit more "stealing-friendly"
20:08 < solar> pappy-: I wont support that.
20:08 < pappy-> Azarah: soon solar will come to you and send you a USE=hardened && configure --use-default-off-pie-ssp patch
20:08 < pappy-> for the normal gcc
20:08 <@Azarah> pappy-: use a ENV_VAR to have it default-on
20:08 < pappy-> Azarah: really?
20:08 <@Azarah> pappy-: then one ebuild - problem solved?
20:08 < pappy-> Azarah: packages are allowed to discard env
20:08 < pappy-> Azarah: think of perl magic building
20:09 < pappy-> Azarah: specs file is the clue
20:09 < pappy-> nothing but the specs file
20:09 < pappy-> the specs file never disappointed us
20:09 < pappy-> if it's in the game, it's in the game
20:09 < pappy-> do not trust any supplemental toggle
20:10 < solar> pappy-: I dont see it that way at all. 
20:10 <@Azarah> you can do spec via env variable if i am not mistaken
20:10 < solar> what I'd like you to do is just finish out your parts.. 
20:10 < pappy-> solar: i have to decide several things
20:10 < solar> then at that point I can begin my work then come back to you both and ask for peer review for the solution.,
20:10 < solar> I think you will both like what I have in mind.
20:10 < pappy-> solar: and you prefer coding yourself into heads-down situations while i prefer talking it out with people instead of creating chaos.
20:11 < pappy-> so my plans are clear:
20:11 < solar> pappy-: alot of ypour talking just creates confision cuz you dont code.
20:11 < pappy-> sys-devel/gcc will use opt-in specs file for default-off pie-ssp
20:11 <@Azarah> i think we need to call it a day (or night) =)
20:11 < solar> yes perhaps.
20:11 < pappy-> sys-devel/hardened-gcc will use ripped gcc ebuilds and implement default-on pie-ssp
20:11 <@Azarah> finish up the patches, then we can have a look and talk again
20:12 < pappy-> Azarah: you wont make your gcc ebuilds "stealing-compatible?"
20:12 < pappy-> Azarah: i can live with that if you tell me off
20:12 < pappy-> i did not want to start a discussion
20:12 <@Azarah> pappy-: i can, but not in the next few days - i need to go gcc/glibc bug hunting to make sure 2004.0 is fine
20:12 < pappy-> or talk people into confusion
20:12 < pappy-> i was just to ask for a little more easier stealing-compatibility
20:13 < pappy-> Azarah: yes, next months would be fine
20:13 < pappy-> Azarah: in the meantime i am rubbing the variables by hand
20:13 <@Azarah> you are so kind :P
20:13 < pappy-> Azarah: thanks so much
