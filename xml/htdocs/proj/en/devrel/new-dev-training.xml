<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/proj/en/devrel/new-dev-training.xml">
<title>Instructions for new developers</title>
<author title="Author">
<mail link="avenj@gentoo.org">Jon Portnoy</mail></author>

<abstract>Instructions for new developers</abstract>

<version>1.0.1</version>
<date>01 March 2004</date>

	<chapter>
		<title>Using CVS</title>
		<section>
		<title>Introduction</title>
			<body>		
			<p>This guide is not intended to be a manual on using CVS; for that, take a look at
			the CVS info page or <uri>http://www.gentoo.org/doc/en/cvs-tutorial.xml</uri>.
			Instead, this guide focuses specifically on using CVS and Repoman in Gentoo's
			ebuild tree.
			</p>
			</body>
		</section>
		<section>
		<title>Configuration</title>
			<body>
			<p>Typically, you'll want something along these lines in your <path>~/.cvsrc</path>:
			</p>

<pre caption="~/.cvsrc">
cvs -q
diff -u -b -B
checkout -P
update -d -P
</pre>

			<p>In order to make sure digests are correct, please put <c>cvs</c> in your <c>FEATURES</c> setting.</p>

			<p>Finally, many people using CVS like to use compression (-z#). We ask that
			developers who are not on dialup connections please use -z0 - with the contents
			of our CVS repository and the load on our CVS server, you actually experience a 
			speed _increase_ without compression.
			</p>

			</body>
		</section>
		<section>
		<title>Checking out</title>
			<body>
			<p>There are a few useful modules in Gentoo's CVS repository. Ebuilds are kept in
			the <path>gentoo-x86</path> module. <path>gentoo-src</path> contains various
			projects - some useful, some inactive. <path>gentoo</path> contains the XML
			for the website, documentation, developer directories, developer pictures,
			and so on.
			</p>

<pre caption="Checking out gentoo-x86">
# <c>cvs -d username@cvs.gentoo.org:/home/cvsroot co gentoo-x86</c>
</pre>

			<p>
			Before working in the tree at any time, it's always a good idea to do an update to check
			for changes and prevent conflicts. You can update in any subdirectory of the tree if you
			don't want to want for a tree-wide update, but from time to time it's a good idea to update
			your entire tree:
			</p>
		
<pre caption="Updating in gentoo-x86">
# <c>cd gentoo-x86</c>
# <c>cvs update</c>
</pre>

			</body>
		</section>
		<section>
		<title>Adding/Removing</title>
			<body>
			<p>Say you're ready to add a brand new package, <c>foo</c>, in app-misc:
			</p>

<pre>
# <c>cd CVSROOT/app-misc</c> <codenote>Replace CVSROOT with the location of your checked-out CVS tree.</codenote>
# <c>cvs -z0 update</c> <codenote>Always update before working in part of the tree!</codenote>
# <c>mkdir foo</c>
# <c>cvs add foo</c> <codenote>Here, we add the package directory foo to the CVS repository.</codenote>
# <c>cd foo</c>
# <c>cp /path/to/foo-1.0.ebuild ./</c> <codenote>It's better to keep in-progress ebuilds in an overlay outside of your CVS tree.</codenote>
<codenote>Don't forget to create a ChangeLog - see <c>man echangelog</c>.</codenote>
# <c>ebuild foo-1.0.ebuild digest</c> <codenote>Make sure PORTDIR_OVERLAY is set to the CVS directory when creating digests.</codenote>
# <c>cvs add foo-1.0.ebuild ChangeLog files</c>
# <c>cvs add files/digest-foo-1.0</c> <codenote>FEATURES=autoaddcvs will do this for you.</codenote>
</pre>

			<p>Remember to also add a metadata.xml file with maintainer information. See <uri>http://www.gentoo.org/doc/en/metadata.xml</uri> for more information.</p>
			<p>At this point, you're ready to commit (see the section on Commits below). But what if you want to remove foo-1.0 when foo-1.1 is out?
			</p>

<pre>
# <c>cd CVSROOT/app-misc/foo</c>
# <c>cvs -z0 update</c>
# <c>rm foo-1.0.ebuild files/digest-foo-1.0</c> <codenote>Files should be deleted first.</codenote>
# <c>cvs remove foo-1.0.ebuild files/digest-foo-1.0</c>
</pre>

			<p>And now you're ready to commit (see the section on Commits below).
			</p>
		
			</body>
		</section>
		<section>
		<title>Commits</title>
			<body>
			<p>Always use <c>repoman commit</c> rather than <c>cvs commit</c>. Repoman is a quality assurance (QA)
			tool that performs basic checks and creates Manifests. If any part of repoman's output is unclear,
			please see <c>man repoman</c>. Additionally, you may tire of entering your key passphrase repeatedly;
			keychain (<uri>http://www.gentoo.org/proj/en/keychain.xml</uri>) can help you.
			</p>
		
<pre>
<codenote>Make sure there are no root-owned files present prior to running repoman.</codenote>
# <c>repoman scan</c> <codenote>"scan" scans the current directory for QA issues.</codenote>
# <c>repoman commit</c> <codenote>"commit" does a scan, then commits, while also updating digests. Make sure to use a verbose and useful cvs changelog message.</codenote>
</pre>

			</body>
		</section>

	</chapter>
	<chapter>
		<title>Miscellaneous</title>
		<section>
		<title>Putting files on mirrors</title>
		<body>
			<p>The procedure for dropping a new file in distfiles on Gentoo mirrors is very simple: 
			copy it to <path>/space/distfiles-local</path> on <path>dev.gentoo.org</path>.
			</p>
		</body>
		</section>

		<section>
		<title>Mail</title>
		<body>
			<p>Our infrastructure allows developers to manage their own mail.
			<uri>http://www.gentoo.org/proj/en/infrastructure/dev-email.xml</uri> contains instructions on
			configuring your @gentoo.org mail.
			</p>
		</body>
		</section>

	</chapter>
</guide>
