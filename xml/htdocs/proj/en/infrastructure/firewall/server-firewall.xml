<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/infrastructure/firewall/Attic/server-firewall.xml,v 1.7 2005/07/23 12:51:46 neysx Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/proj/en/infrastructure/firewall/server-firewall.xml">
<title>Firewall Configuration Guide for Gentoo Infrastructure Servers</title>

<author title="Author">
  <mail link="lcars@gentoo.org">Andrea Barisani</mail>
</author>

<abstract>
This guide documents how firewall rules script work and should be configured on
Gentoo Infrastructure servers. 
</abstract>

<version>0.6</version>
<date>25 May, 2004</date>

<chapter>
<title>Introduction</title>
<section>
<body>

<p>
Network filters on Gentoo Infrastructure servers are activated using the
Netfilter code of Linux Kernel 2.4.x configured with the user-space tool
iptables. In order to make rules configuration and activation procedures easier
and consistent with Gentoo Linux initsystem a generic firewalling script with a
proper configuration file has been developed.<br/><br/>
The filtering rules are activated by the <c>firewall</c> script located in the
<path>/etc/init.d</path> directory, the related configuration file is located
as usual in the <path>/etc/conf.d</path> directory. 
</p>

</body>
</section>
</chapter>

<chapter>
<title>Kernel Configuration</title>
<section>
<body>

<p>
The available filtering rules are dependent on the running kernel
configuration, here's a kernel configuration suitable for all tasks. 
</p>

<pre caption="kernel conf">
#
#   IP: Netfilter Configuration
#
CONFIG_IP_NF_CONNTRACK=m
<comment>(It's always a good idea having connection tracking code compiled as a module even
if it's always used. That's because connections database memory problems can be
temporarily solved by unloading the module and unfortunately there is no way to
empty the database without reloading the code.)</comment>

CONFIG_IP_NF_FTP=m
CONFIG_IP_NF_AMANDA=m
CONFIG_IP_NF_TFTP=m
CONFIG_IP_NF_IRC=m
CONFIG_IP_NF_QUEUE=m
CONFIG_IP_NF_IPTABLES=m
CONFIG_IP_NF_MATCH_LIMIT=m
CONFIG_IP_NF_MATCH_MAC=m
CONFIG_IP_NF_MATCH_PKTTYPE=m
CONFIG_IP_NF_MATCH_MARK=m
CONFIG_IP_NF_MATCH_MULTIPORT=m
CONFIG_IP_NF_MATCH_TOS=m
CONFIG_IP_NF_MATCH_ECN=m
CONFIG_IP_NF_MATCH_DSCP=m
CONFIG_IP_NF_MATCH_AH_ESP=m
CONFIG_IP_NF_MATCH_LENGTH=m
CONFIG_IP_NF_MATCH_TTL=m
CONFIG_IP_NF_MATCH_TCPMSS=m
CONFIG_IP_NF_MATCH_HELPER=m
CONFIG_IP_NF_MATCH_STATE=m
CONFIG_IP_NF_MATCH_CONNTRACK=m
CONFIG_IP_NF_MATCH_UNCLEAN=m
CONFIG_IP_NF_MATCH_OWNER=m
CONFIG_IP_NF_FILTER=m
CONFIG_IP_NF_TARGET_REJECT=m
CONFIG_IP_NF_TARGET_MIRROR=m
# CONFIG_IP_NF_NAT is not set
CONFIG_IP_NF_MANGLE=m
CONFIG_IP_NF_TARGET_TOS=m
CONFIG_IP_NF_TARGET_ECN=m
CONFIG_IP_NF_TARGET_DSCP=m
CONFIG_IP_NF_TARGET_MARK=m
CONFIG_IP_NF_TARGET_LOG=m
CONFIG_IP_NF_TARGET_ULOG=m
CONFIG_IP_NF_TARGET_TCPMSS=m
# CONFIG_IP_NF_ARPTABLES is not set
# CONFIG_IP_NF_COMPAT_IPCHAINS is not set
# CONFIG_IP_NF_COMPAT_IPFWADM is not set
</pre>

<p>
These are the basic modules that are loaded, additional modules can be added
later in case of unusual filtering rules involving non standard parameters.
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.4">
ip_conntrack
ip_conntrack_ftp
ipt_state
iptable_mangle
</pre>

<p>
The following configuration will set up safe values for the TCP/IP stack
options.  For security reasons It's always a good idea ignoring broadcasts,
redirects and source_route packets.  Additionally unusual traffic will be
logged. Usually filtering rules can be configured to obtain the same effect,
however taking advantage of the TCP/IP stack "native" capabilities it's always
preferrable.
</p>

<pre caption="/etc/sysctl.conf">
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.default.log_martians = 1
# net.ipv4.icmp_echo_ignore_all = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Rules Configuration</title>
<section>
<body>

<p>
Filtering rules are configured in the configuration file with a series of
variables defining necessary server informations and incoming/outgoing
filtering rules. The default policy of the firewalling script is to DROP all
traffic not specified in the configuration file.
</p>

<p>
Let's see all availables statements and how they work.
</p>

<p>
The IFACE variable defines the network interface where filtering rules will be
applied
</p>

<pre caption="Define network interface">
IFACE="eth0"
</pre>

<p>
The MY_ADDR variable defines the address of the specified interface, any
traffic originating from another address on that interface will be dropped.
It's allowed to specify more than one value.
</p>

<pre caption="Define address">
MY_ADDR="10.1.7.1/32 10.1.7.2/32"
</pre>

<p>
The SERVER_TYPE variable is used for applying a pre-defined set of "hard coded"
filtering rules based on offered services. Currently available keywords are
"web", "ftp" and "rsync". It's allowed to specify more than one value.
</p>

<pre caption="Define server type">
SERVER_TYPE="web rsync"
</pre>

<p>
Additionally custom filtering rules can be defined for accept, drop or reject
specified traffic. These rules are configured using different variables based
upon protocol type (currently ICMP, TCP and UDP) and direction (IN or OUT). The
argument can be a port number/range or an address/mask-port(:port) pair. All
these rules are applied before the ones generated by the SERVER_TYPE directive.
It's allowed to specify more than one value. 
</p>

<pre caption="Custom filtering">
IN_ICMP_TYPES="0/0-8 0/0-11"
IN_TCP_PORTS="192.168.0.1/32-22 80"
IN_UDP_PORTS="123 10.1.7.2-53"

OUT_ICMP_TYPES="3/4"
OUT_TCP_PORTS="20:22 25 80 rsync1.us.gentoo.org-873"
OUT_UDP_PORTS="53 123"

DROP_IN_ICMP_TYPES=""
DROP_IN_TCP_PORTS="10.1.7.100-80"
DROP_IN_UDP_PORTS=""

REJECT_IN_TCP_PORTS="113"

DROP_OUT_ICMP_TYPES=""
DROP_OUT_TCP_PORTS=""
DROP_OUT_UDP_PORTS=""
</pre>

<p>
If the SERVER_TYPE variable includes the "rsync" type an additional
RSYNC_MIRRORS variable is defined for specifing the mirrors that are allowed to
connect to the rsync server.
</p>

<pre caption="Define rsync mirrors">
RSYNC_MIRRORS="140.105.134.1 216.176.132.235"
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Administration</title>
<section>
<body>

<p>
Like all init scripts the firewalling script accept the two basic arguments
"start" and "stop". Additionally the "status" argument will show current
firewall configuration.
</p>

<pre caption="Using the firewall init script">
# <i>/etc/init.d/firewall start</i>

# <i>/etc/init.d/firewall stop</i>

# <i>/etc/init.d/firewall status</i>

<comment>This is the same as issuing</comment> <i>/sbin/iptables -L -n -v</i>
</pre>

<p>
A series of procedures are defined for properly starting, stopping and modifing
filtering rules preventing possible problems. Usually when dealing with
filtering rules a lot of things can go wrong, no matter how sure the
administrator is that the configuration is correct some problems will happen
;). The worst case scenarios that must be avoided are misconfigurations or
errors that will block server administrative access leaving physical access the
only option for solving the problem.
</p>

<p>
For safety reasons it's required that all newly configured rules must be
applied for a short time window dedicated to test necessary traffic. During the
sleep time the ability to complete the following connections must be
verified:
</p>

<ol>
  <li>
    Current session sanity (this is done by simply typing some character and
    see if it is shown on the terminal)
  </li>
  <li>
    All administrative traffic (like secure shell connections)
  </li>
</ol>

<p>
After basic connectivity has been tested all other traffic can be verified.
</p>

<pre caption="Testing basic connectivity">
# <i>/etc/init.d/firewall start ; sleep 60 ; /etc/init.d/firewall stop</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Accounting</title>
<section>
<body>

<p>
The Linux Netfilter code natively performs traffic accounting for all specified
filtering rules, this is information is available by simply issuing the
"status" function of the script. With the aid of a perl script and three
additional arguments the task of saving and keeping a cumulative human readable
log of accounting data is automated.
</p>

<p>
Additionally a chain called ACCOUNTING is available for keeping counters of
established traffic on specified flows. This is necessary because the firewall
script works on connection handshakes and established traffic is matched with
global rules.  A specified set of variables is available and the syntax is
consistent with filtering variables. 
</p>

<pre caption="Define accounting rules">
COUNT_IN_TCP_PORTS="80 443"
COUNT_IN_UDP_PORTS="10.1.7.2-53 873"

COUNT_OUT_TCP_PORTS=""
COUNT_OUT_UDP_PORTS=""
</pre>

<p>Clear all accounting logs:</p>

<pre caption="Clear accounting log">
# <i>/etc/init.d/firewall acct_reset</i>
</pre>

<p>Update accounting logs with the latest data:</p>

<pre caption="Update accounting logs">
# <i>/etc/init.d/firewall acct</i>
</pre>

<p>Mail accounting logs to predefined addresses:</p>

<pre caption="Mail accounting logs">
# <i>/etc/init.d/firewall acct_mail</i>
</pre>

<p>Here's a sample report:</p>

<pre caption="Sample report">
Rule    Packets     Bytes   Target  Protocol  Src Port  Dst Port  Source Address      Destination Address
Number

----------------------------------------------------------------------------------------------------------
1            0          0   ACCEPT       tcp                 873  216.176.132.235     0.0.0.0/0
2            0          0   ACCEPT       tcp                 873  202.157.182.60      0.0.0.0/0
3            0          0   ACCEPT       tcp                 873  158.36.2.10         0.0.0.0/0
4            0          0   ACCEPT       tcp                 873  210.193.6.237       0.0.0.0/0
5            0          0   ACCEPT       tcp                 873  81.223.20.162       0.0.0.0/0
6            0          0   ACCEPT       tcp                 873  217.172.182.32      0.0.0.0/0
7            0          0   ACCEPT       tcp                 873  193.136.164.248     0.0.0.0/0
8            0          0   ACCEPT       tcp                 873  199.108.109.25      0.0.0.0/0
9            0          0   ACCEPT       tcp                 873  172.16.200.0/24     0.0.0.0/0
10           0          0   ACCEPT       tcp                 873  216.223.235.2       0.0.0.0/0
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Logging</title>
<section>
<body>

<p>
Logging for spoofed and odd packets is activated by default using the ULOG
target. Additionally the LOG_DROP variable enables logging of all non matched
packets if "yes" is specified as argument. The LOG_CUSTOM_DROP variables
enables logging of packets explicitely dropped with the DROP_IN, DROP_OUT,
REJECT_IN, REJECT_OUT directives.
</p>

<pre caption="Log dropped packets">
LOG_DROP="yes"
LOG_CUSTOM_DROP="yes"
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Resources</title>
<section>
<body>

<ul>
  <li><uri link="http://www.gentoo.org/~lcars/fw/firewall">/etc/init.d/firewall</uri></li>
  <li><uri link="http://www.gentoo.org/~lcars/fw/firewall.confd">/etc/conf.d/firewall</uri></li>
  <li><uri link="http://www.gentoo.org/~lcars/fw/accounting-report">/sbin/accounting-report</uri></li>
</ul>

</body>
</section>
</chapter>
</guide>
