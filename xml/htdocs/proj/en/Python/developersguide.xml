<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/Python/developersguide.xml,v 1.2 2007/02/03 10:44:07 dev-zero Exp $ -->

<guide link="/proj/en/Python/developersguide.xml" lang="en">
<title>Gentoo Python Developers Guide</title>

<author title="Author">
  <mail link="dev-zero@gentoo.org">Tiziano MÃ¼ller</mail>
</author>

<abstract>
This guide is supposed to be a help for (new) Python developers.
Besides valuable Hints and Tricks, there are guidelines for 
version bumps and drops, stabilization, correct eclass usage, 
correct dependencies and tests.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.1_pre2</version>
<date>2007-02-03</date>

<chapter>
<title>Bumps, Drops, Stabilization</title>
<section>
<title>Version Bumps and Fixing Bugs</title>
<body>
<dl>
  <dt>Never bump one of the following packages yourself if permission to do so is not explicitly granted by a (Co-)Lead:</dt>
  <dd>
    <ul>
      <li>dev-lang/python</li>
      <li>dev-python/pycrypto</li>
    </ul>
  </dd>
</dl>
<p>
While doing version bumps is surely appreciated, don't do it blindly. There were many bugs in the past
which had been carried from version to version without being noticed. Make also sure that you check bugzilla
<b>before</b> the bump to see whether there are open bugs for the package. Reading the ChangeLog of a package
is also a good idea to catch new, changed or optional dependencies.
</p>
<p>
Not all existing ebuilds in the tree use the eclasses properly (see below), so please fix bugs on sight.
Build the packages you're bumping or fixing even on small changes. Not all ebuilds have been
written carefully while others might have been perfect when they have been committed. But over time, practice and
rules change.
</p>
<p>
The same goes for fixing bugs in the ebuilds. Please check whether there is a new version of the package out and
do a version bump accordingly. Closing bugs is good, but not enough. Your primary objective should not be to close
bugs but to maintain the packages in the herd.
</p>
<p>
Ask for and do peer review. With such a practice, ebuild quality increases and it is a good way to transfer
knowledge.
</p>
</body>
</section>

<section>
<title>Dropping old versions and Stabilization</title>
<body>
<dl>
  <dt>Every Team-Member should try to keep the package-folders clean and uncluttered.
      Besides the obvious checks (last stable for an arch, last not p.masked, other packages
      depend on an exact version of this package), there are some other things which you should consider
      before dropping an old version:</dt>
  <dd>
    <ul>
      <li>When dropping an unstable version in the presence of a stable one: Does the version you are going
          to drop have serious bugs which avoid stabilization? Otherwise you might keep it
          and open a stabilization bug.</li>
      <li>The same consideration also applies if there is no stable version yet: Are there users who
          might want a stable version? Is this package mature enough to go stable? If you decide
          to stabilize it, also think about how Arch-Team-Members could test it.</li>
      <li>Do not stabilize alpha and beta versions nor release candidates wherever possible. There are
          exceptions to this (if upstream just produces beta-ware or the package is desperately needed for another
          app). If unsure, talk to Lead first.</li>
    </ul>
  </dd>
</dl>
</body>
</section>
</chapter>

<chapter>
<title>Correct eclass usage and ebuild writing</title>
<section>
<title>Correct eclass usage</title>
<body>
<p>There are currently 3 eclasses: python, distutils and twisted.</p>
<dl>
  <dt><b>python.eclass</b></dt>
  <dd>
    <ul>
      <li>Call python_version before using PYVER, PYVER_MINOR or PYVER_MAJOR.</li>
      <li>Insert a line "NEED_PYTHON=MY_VERSION" before the inherit to depend on python.
          If you don't need a specific version, put "virtual/python" in DEPEND/RDEPEND</li>
      <li>If you don't use distutils (and/or your package installs .py-files somewhere else than site-packages),
          you have to call python_mod_optimize and python_mod_cleanup yourself.
      If your package doesn't install itself into a subdir, omit "/YOURPACKAGE". You can pass any path you
      want to python_mod_optimize/cleanup. python_mod_cleanup will also remove empty directories after the cleanup.
      Background: If you call python as root, .py-files will get byte-compiled to .pyc but not recorded
      In the package's CONTENTS. They therefore won't get removed on update/removal of the package.
      </li>
    </ul>
  </dd>
</dl>
<pre caption="optimize/cleanup idiom">
<keyword>inherit</keyword> python multilib

[...]

<stmt>pkg_postinst()</stmt> {
	<keyword>python_version</keyword>
	<keyword>python_mod_optimize</keyword> ${ROOT}usr/$(get_libdir)/python${PYVER}/site-packages/YOURPACKAGE
}

<stmt>pkg_postrm()</stmt> {
	<keyword>python_version</keyword>
	<keyword>python_mod_cleanup</keyword> ${ROOT}usr/$(get_libdir)/python${PYVER}/site-packages/YOURPACKAGE
}
</pre>
<dl>
  <dt><b>distutils.eclass</b></dt>
  <dd>
    <ul>
      <li>To depend on a specific version of python, put NEED_PYTHON=MY_VERSION before the inherit (rather than
          DEPEND/RDEPEND on dev-lang/python-MY_VERSION) or leave it away to implicitly depend on virtual/python
          through the distutils eclass.</li>
      <li>Set the DOCS variable to install additional (pure-text) docs. If you write the src_install-function, you can put
          the definition of the DOCS var in the function but before calling distutils_src_install.
      </li>
      <li>If the ebuild name (what is in ${PN}) differs from the folder created by the package in site-packages/, you have to
          define a variable PYTHON_MODNAME to tell distutils where to look for the module.
      </li>
    </ul>
  </dd>
</dl>
<pre caption="DOCS idiom">
<stmt>src_install()</stmt> {
	<var>DOCS</var>="foo.txt bar.txt"
	<keyword>distutils_src_install</keyword>
	dohtml foo.html bar.png
}
</pre>
<pre caption="PYTHON_MODNAME usage (example from ipython-0.7.3.ebuild)">
# Copyright 1999-2007 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/Python/developersguide.xml,v 1.2 2007/02/03 10:44:07 dev-zero Exp $

<var>NEED_PYTHON</var>=2.3

<keyword>inherit</keyword> distutils

<var>DESCRIPTION</var>="An advanced interactive shell for Python."
<var>HOMEPAGE</var>="http://ipython.scipy.org/"
<var>SRC_URI</var>="http://ipython.scipy.org/dist/${P}.tar.gz"

<var>LICENSE</var>="BSD"
<var>SLOT</var>="0"
<var>KEYWORDS</var>="~amd64 ~ia64 ~ppc ~s390 ~x86"
<var>IUSE</var>="doc examples emacs gnuplot test"

<var>DEPEND</var>="test? ( dev-python/pexpect )"
<var>RDEPEND</var>="gnuplot? ( dev-python/gnuplot-py )"

<var>PYTHON_MODNAME</var>="IPython"

[...]
</pre>

<dl>
  <dt><b>twisted.eclass</b></dt>
  <dd>
    <ul>
      <li>TBD</li>
    </ul>
  </dd>
</dl>

</body>
</section>

<section>
<title>Ebuild writing</title>
<body>
<p>
To call python in one of your ebuilds, use "${python}" to do it (defined in distutils.eclass).
</p>
</body>
</section>

</chapter>

</guide>
