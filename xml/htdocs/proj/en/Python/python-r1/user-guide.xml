<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/Python/python-r1/user-guide.xml,v 1.4 2012/11/11 12:49:49 mgorny Exp $ -->

<guide lang="en">
<title>python-r1 User's Guide</title>

<author title="Author">
	<mail link="mgorny@gentoo.org">Michał Górny</mail>
</author>

<author title="Editor">
	<mail link="idella4@gentoo.org">Ian Delaney</mail>
</author>

<abstract>
	This guide provides a basic insight to how Python packages
	are deployed using the python-r1 eclasses. It describes
	the multi-implementation concept and offers a guide to selecting
	preferred implementations.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/3.0/ -->
<license version="3.0"/>

<version>3</version>
<date>2012-11-11</date>

<chapter id="Multi_implementation_support">
	<title>Multi-implementation support</title>

	<section id="mis_Short_introduction">
		<title>Short introduction</title>

		<body>
			<p>
				Currently Gentoo supports three different Python interpreters
				— CPython, PyPy and Jython. CPython has two distinct major
				branches — called simply Python 2 &amp; Python 3. This makes
				four <e>interpreter groups</e>.
			</p>

			<p>
				Each group is further sub-divided into branches, which
				are identified by minor version numbers: Python 2.7, 2.6, 2.5,
				3.3, 3.2, 3.1; PyPy 1.9 and 1.8; and lastly, Jython 2.5. All
				these versions can be installed in Gentoo concurrently,
				and are collectively referred to as <e>Python
					implementations</e>.
			</p>

			<p>
				There may be various reasons to install multiple Python
				implementations. The most important one is that many Python
				packages in Gentoo still don't support Python 3 while a few
				actually require that version. Thus, in order to maintain
				compatibility with the both kinds of packages, Gentoo
				is enabling both versions.
			</p>

			<p>
				Having two or more implementations installed allows our users
				to run all kinds of scripts. It gives them an ability to test
				their own scripts against multiple Python implementations.
			</p>
		</body>
	</section>

	<section id="mis_PYTHON_TARGETS_setting">
		<title>PYTHON_TARGETS setting</title>

		<body>
			<p>
				Having a number of implementations to choose from, the modern
				Python packages provide users with an ability to explicitly
				select one or more Python implementations. This selection
				is performed through the use of <c>PYTHON_TARGETS</c> expanded
				USE flags.
			</p>

			<pre caption="Example output of emerge with PYTHON_TARGETS-aware
				package">
$ <i>emerge -pv app-portage/flaggie</i>

These are the packages that would be merged, in order:

Calculating dependencies... done!
[<keyword>ebuild   R   *</keyword>] <ident>app-portage/flaggie-9999::mgorny</ident>  <var>PYTHON_TARGETS</var>="<const>python2_6 python2_7 python3_2</const> <comment>-python3_1</comment>" 0 kB

Total: 1 package (1 reinstall), Size of downloads: 0 kB
</pre>

			<p>
				As you can see in the above sample, the package in question
				supports four Python implementations of which three are enabled.
				This means that all the Python modules and scripts will be
				installed for those three Python versions, and thus they will
				be available to the scripts run using those versions.
			</p>

			<p>
				CPython versions 2.7 and 3.2 are enabled by default. If you wish
				to use a different set of enabled implementations, you have
				to set the <c>PYTHON_TARGETS</c> variable
				in <path>make.conf</path>. Please note that it is
				not incremental — that is, you need to list all the enabled
				implementations.
			</p>

			<pre caption="Example make.conf enabling Python 2.6, 2.7 and 3.2">
<var>PYTHON_TARGETS</var>=<const>"python2_6 python2_7 python3_2"</const>
</pre>
		</body>
	</section>

	<section id="mis_Selecting_active_Python_implementation">
		<title>Selecting active Python implementation</title>

		<body>
			<p>
				The <c>app-admin/eselect-python</c> package provides a tool
				to select the currently active Python implementations.
				It provides the choice of ‘active’ Python 2 and Python 3
				interpreters, and which one is preferred.
			</p>

			<p>
				The selections done through eselect-python influence:
			</p>

			<ol>
				<li>the interpreter started by <c>python</c>, <c>python2</c>
					and <c>python3</c> commands,</li>
				<li>the interpreter used to start non-versioned Python
					scripts,</li>
				<li>the Python implementations for which packages not respecting
					<c>PYTHON_TARGETS</c> are built (unless overriden).</li>
			</ol>

			<p>
				In order to obtain a list of installed Python interpreters
				supported by eselect-python, use the <c>eselect python list</c>
				command:
			</p>

			<pre caption="Listing available Python implementations">
$ <i>eselect python list</i>
Available Python interpreters:
  <ident>[1]</ident>   python2.5
  <ident>[2]</ident>   python2.6
  <ident>[3]</ident>   python2.7 <var>*</var>
  <ident>[4]</ident>   python3.1
  <ident>[5]</ident>   python3.2
</pre>

			<p>
				The asterisk highlights the currently active ‘main’ Python
				interpreter. The choice of main Python interpreter both
				influences the Python 2/3 preference and the active Python
				version in the appropriate group. In order to set another
				implementation, use <c>eselect python set</c>:
			</p>

			<pre caption="Selecting another Python implementation">
$ <i>eselect python set python3.2</i>
$ <i>eselect python show</i>
python3.2
</pre>

			<note>
				The <c>eselect python set</c> command accepts both
				<e>complete</e> interpreter names and numeric identifiers
				(from the <c>eselect python list</c> output).
			</note>

			<p>
				Aside to setting the main Python interpreter, eselect-python
				is capable of setting the active version of Python 2
				and Python 3. In order to enable that mode, the <c>--python2</c>
				or <c>--python3</c> parameter should be added <e>after</e>
				the command:
			</p>

			<pre caption="Listing and selecting Python 3 implementation">
$ <i>eselect python list --python3</i>
Available Python 3 interpreters:
  <ident>[1]</ident>   python3.1
  <ident>[2]</ident>   python3.2 <var>*</var>
$ <i>eselect python set --python3 python3.2</i>
$ <i>eselect python show --python3</i>
python3.2
$ <i>eselect python show</i>
python2.7
</pre>

			<p>
				The previous example emphasizes that setting the active Python 3
				interpreter does not influence the main version of Python
				interpreter if it is Python 2. The same rule applies to setting
				active Python 2 when the main interpreter is Python 3.
			</p>

			<note>
				The main Python interpreter is strictly bound to the active
				Python interpreter in one of the groups. Changing the main
				Python interpreter changes the active Python version in the main
				group, and changing the active version there changes the main
				Python interpreter. Changing the active Python version
				in the other group does not change the main interpreter.
			</note>
		</body>
	</section>

	<section id="mis_Python_script_renaming">
		<title>Python script renaming</title>

		<body>
			<p>
				You may have noticed already that the default installation
				of Python scripts in Gentoo differs to that of other
				distributions (and Python packages themselves).  This is done
				in order to completely support multiple Python implementations
				being used on the same system.
			</p>

			<pre caption="Example Python scripts installed by a package">
$ <i>ls -1 /usr/bin/flaggie*</i>
<var>/usr/bin/flaggie</var>
/usr/bin/flaggie-python2.6
/usr/bin/flaggie-python2.7
/usr/bin/flaggie-python3.2
</pre>

			<p>
				Firstly, all Python scripts installed by packages are installed
				in per-implementation variants. This ensures that any changes
				necessary for a given Python implementation are preserved
				in the scripts. It makes it possible to easily run the script
				with the desired interpreter.
			</p>

			<p>
				In addition, a wrapper is installed in place of the standard
				script. The wrapper is a very simple tool which checks which
				of the Python implementations that the script supports would
				be ‘preferred’, and runs that script variant.
			</p>
		</body>
	</section>
</chapter>

<chapter id="Common_problems">
	<title>Common problems</title>

	<section id="Cp_REQUIRED_USE_flag_constraints_unsatisfied">
		<title>REQUIRED_USE flag constraints unsatisfied</title>

		<body>
			<p>
				In some cases, an attempt to install or upgrade a package may
				result in portage throwing an error described as ‘unsatisfied
				REQUIRED_USE flag constraint’.
			</p>

			<pre caption="Example portage error message">
$ <i>emerge -1 argparse</i>

These are the packages that would be merged, in order:

Calculating dependencies \

!!! Problem resolving dependencies for dev-python/argparse
... done!

!!! The ebuild selected to satisfy "argparse" has unmet requirements.
- <ident>dev-python/argparse-1.2.1-r2::gentoo-cvs</ident> <var>USE</var>="<const>(multilib)</const>" <var>PYTHON_TARGETS</var>="<comment>-jython2_5 -python2_5 -python2_6 -python3_1</comment>"

  The following REQUIRED_USE flag constraints are unsatisfied:
    any-of ( python_targets_python2_5 python_targets_python2_6 python_targets_python3_1 python_targets_jython2_5 )
</pre>

			<p>
				This error message means that you are attempting to install
				a package which does not support any of the Python
				implementations enabled on your system.
			</p>

			<p>
				In the most common case, the package in question does not
				support the particular implementation of your choice. The issue
				could be solved through enabling one of the listed
				implementations by adding it to <c>PYTHON_TARGETS</c>.
			</p>

			<p>
				In a few very specific cases, this might also mean that
				a particular package is unsuitable or unnecessary on your
				system. For example, the <c>argparse</c> Python module
				is included in CPython versions 2.7, 3.2 and newer, and thus
				installing it is not meaningful on systems using only those
				versions of Python. Then the issue should be solved through
				removing the offending package.
			</p>
		</body>
	</section>
</chapter>

<!-- vim:se tw=72 ts=2 sts=2 sw=2 :-->
</guide>
