<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/Python/python-r1/user-guide.xml,v 1.1 2012/11/04 14:05:12 mgorny Exp $ -->

<guide lang="en">
<title>python-r1 User's Guide</title>

<author title="Author">
	<mail link="mgorny@gentoo.org">Michał Górny</mail>
</author>

<author title="Editor">
	<mail link="idella4@gentoo.org">Ian Delaney</mail>
</author>

<abstract>
	This guide provides a basic insight to how Python packages
	are deployed using the python-r1 eclasses. It describes
	the multi-implementation concept and offers a guide to selecting
	preferred implementations.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/3.0/ -->
<license version="3.0"/>

<version>1</version>
<date>2012-11-04</date>

<chapter id="Multi_implementation_support">
	<title>Multi-implementation support</title>

	<section id="mis_Short_introduction">
		<title>Short introduction</title>

		<body>
			<p>
				Currently Gentoo supports three different Python interpreters
				— CPython, PyPy and Jython. CPython has two major but distinct
				branches — called simply Python 2 &amp; Python 3. This makes
				four <e>interpreter groups</e>.
			</p>

			<p>
				Each group is further sub-divided into branches, which
				are identified by minor version numbers: Python 2.7, 2.6, 2.5,
				3.3, 3.2, 3.1; PyPy 1.9 and 1.8; and lastly, Jython 2.5. All
				these versions can be installed in Gentoo side-by-side, and are
				collectively referred to as <e>Python implementations</e>.
			</p>

			<p>
				There may be various reasons to install multiple Python
				implementations. The most important is incompatibilities
				that occur between each one's Python scripts. Many Python
				packages in Gentoo still don't support Python 3. There are also
				a few packages which support only Python 3.
			</p>

			<p>
				Having two or more implementations installed allows our users
				to run all kinds of scripts. Another common and significant
				advantage of having multiple Python versions installed
				is the ability to test a script against multiple interpreters.
			</p>
		</body>
	</section>

	<section id="mis_PYTHON_TARGETS_setting">
		<title>PYTHON_TARGETS setting</title>

		<body>
			<p>
				Having a number of implementations to choose from, the modern
				Python packages provide users with an ability to explicitly
				select one or more Python implementations. This selection
				is performed through the use of <c>PYTHON_TARGETS</c> expanded
				USE flags.
			</p>

			<pre caption="Example output of emerge with PYTHON_TARGETS-aware
				package">
$ <i>emerge -pv app-portage/flaggie</i>

These are the packages that would be merged, in order:

Calculating dependencies... done!
[<keyword>ebuild   R   *</keyword>] <ident>app-portage/flaggie-9999::mgorny</ident>  <var>PYTHON_TARGETS</var>="<const>python2_6 python2_7 python3_2</const> <comment>-python3_1</comment>" 0 kB

Total: 1 package (1 reinstall), Size of downloads: 0 kB
</pre>

			<p>
				As you can see in the above sample, the package in question
				supports four Python implementations of which three are enabled.
				This means that all the Python modules and scripts will be
				installed for those three Python versions, and thus they will
				be available to the scripts run using those versions.
			</p>

			<p>
				CPython versions 2.7 and 3.2 are enabled by default. If you wish
				to use a different set of enabled implementations, you have
				to set the <c>PYTHON_TARGETS</c> variable
				in <path>make.conf</path>. Please note that it is
				not incremental — that is, you need to list all the enabled
				implementations.
			</p>

			<pre caption="Example make.conf enabling Python 2.6, 2.7 and 3.2">
<var>PYTHON_TARGETS</var>=<const>"python2_6 python2_7 python3_2"</const>
</pre>
		</body>
	</section>

	<section id="mis_Python_script_renaming">
		<title>Python script renaming</title>

		<body>
			<p>
				You may have noticed already that the default installation
				of Python scripts in Gentoo differs to that of other
				distributions (and Python packages themselves).  This is done
				in order to completely support multiple Python implementations
				being used on the same system.
			</p>

			<pre caption="Example Python scripts installed by a package">
$ <i>ls -1 /usr/bin/flaggie*</i>
<var>/usr/bin/flaggie</var>
/usr/bin/flaggie-python2.6
/usr/bin/flaggie-python2.7
/usr/bin/flaggie-python3.2
</pre>

			<p>
				Firstly, all Python scripts installed by packages are installed
				in per-implementation variants. This ensures that any changes
				necessary for a given Python implementation are preserved
				in the scripts. It also makes it possible to easily run
				the script with the desired interpreter.
			</p>

			<p>
				Additionally, in place of the standard script, a wrapper
				is installed. The wrapper is a very simple tool which checks
				which of the Python implementations supported by the script
				would be the preferred one and runs the appropriate script
				variant.
			</p>
		</body>
	</section>
</chapter>

<!-- vim:se tw=72 ts=2 sts=2 sw=2 :-->
</guide>
