<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "http://www.gentoo.org/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/qa/backtraces.xml,v 1.3 2006/05/01 05:24:20 spyderous Exp $ -->

<guide link="/proj/en/qa/backtraces.xml" lang="en">
<title>How to get meaningful backtraces in Gentoo</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>

<author title="Hardened toolchain information">
  <mail link="solar@gentoo.org">Ned Ludd</mail>
</author>

<author title="Hardened toolchain and x86 architecture information">
  <mail link="kevquinn@gentoo.org">Kevin Quinn</mail>
</author>

<author title="Reviewer">
  <mail link="spyderous@gentoo.org">Donnie Berkholz</mail>
</author>

<abstract>
This guide is meant to provide users with a simple explanation of why a default
Gentoo installation does not provide meaningful backtraces and how to set it up
to get them.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.5</version>
<date>2006-04-28</date>

<chapter> <!-- Introduction -->
<title>Backtraces with Gentoo</title>

<section>
<title>What are backtraces?</title>

<body>

<p>
A <e>backtrace</e> (sometimes also called bt, trace, or stack trace) is a human
readable report of the calling stack of a program. It tells you at which point
of a program you are and how you reached that point through all the functions
up to <path>main()</path> (at least in theory).
Backtraces are usually analyzed when error conditions such as segmentation
faults or aborts are reached using debuggers like <c>gdb</c> (GNU debugger), to
find the cause of the error.
</p>

<p>
A meaningful backtrace contains not only the shared objects where the call was
generated, but also the name of the function, the filename and the line where
it stopped. Unfortunately on a system optimised for performance and conserved
disk space, the backtraces are useless and show only the pointers on the stack
and a series of ?? instead of the functions' names and position.
</p>

<p>
This guide will show how it's possible to get useful, meaningful backtraces in
Gentoo, by using Portage features.
</p>

</body>
</section>

<section> <!-- Compiler flags -->
<title>Compiler flags</title>

<body>

<p>
By default <c>gcc</c> does not build debug information inside the objects
(libraries and programs) it builds, as that creates larger objects. Also,
many optimisations interfere with how the debug information is saved. For these
reasons, the first thing to pay attention to is that the CFLAGS are set to
generate useful debug information.
</p>

<p>
The basic flag to add in this case is <c>-g</c>. That tells the compiler to
include extra information in objects, such as filenames and line numbers.
This is usually enough to have basic backtraces, but the flags <c>-g2</c> and
<c>-ggdb</c> add more information. There is actually another flag
(<c>-g3</c>), but its use is not recommended. It seems to break binary
interfaces and might lead to extra crashes. For instance, <path>glibc</path>
breaks when built with that flag. If you want to provide as much
information as possible, you should use the <c>-ggdb</c> flag.
</p>

<pre caption="Example of CFLAGS with debug information">
CFLAGS="-march=k8 -O2 -ggdb"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
Optimisations also have to be moderated. For instance, the <c>-O</c> flag, used
to set one of the predefined optimisation levels, should be used with caution.
If you really need a precise backtrace, you should use <c>-O1</c> (using the
optimisations of level 0 is not recommended as there are known issues with gcc
building invalid code). But for generic backtraces, <c>-O2</c> and <c>-Os</c> are
fine, too. <c>-O3</c> is unwise to use while trying to debug something,
because it enables extra optimisations that will probably screw up the information
needed for debugging.
</p>

<p>
Note for x86 architecture users: x86 users frequently have
<c>-fomit-frame-pointer</c> in their CFLAGS. The x86 architecture has a limited
set of general registers, and this flag can make an extra register available,
which improves performance. However there is a cost: it makes it impossible for
<c>gdb</c> to "walk the stack" &#8212; in other words, to generate a backtrace reliably.
Remove this flag from CFLAGS to build something easier for <c>gdb</c> to
understand. Most other platforms do not have to worry; either they generally
don't set <c>-fomit-frame-pointer</c> anyway, or the code generated by
<c>gcc</c> does not confuse <c>gdb</c> (in which case the flag is already
enabled by <c>-O2</c> optimisation level).
</p>

<p>
Hardened users have other things to worry about. The
<uri link="http://www.gentoo.org/proj/en/hardened/hardenedfaq.xml#hardeneddebug">hardened
FAQ</uri> provides the extra hints and tips you need to know.
</p>

</body>
</section>

<section> <!-- Stripping -->
<title>Stripping</title>

<body>
<p>
Just changing your CFLAGS and re-emerging world won't give you meaningful
backtraces anyway, as you have to solve the stripping problem. By default
Portage strips binaries. In other words, it removes the sections
unneeded to run them to reduce the size of the installed files. This is a good
thing for an average user not needing useful backtraces, but removes all the
debug information generated by <c>-g*</c> flags, and also the symbol tables
that are used to find the base information to show a backtrace in human readable
form.
</p>

<p>
There are two ways to stop stripping from interfering with debugging and useful
backtraces. The first is to tell Portage to not strip binaries at all, by adding
<e>nostrip</e> to FEATURES. This leave the installed files exactly as <c>gcc</c>
created them, with all the debug information and symbol tables, which
increases the disk space occupied by executables and libraries. To avoid this
problem, in Portage version 2.0.54-r1 and the 2.1 series, it's possible to use the
<e>splitdebug</e> FEATURE instead.
</p>

<p>
With <e>splitdebug</e> enabled, Portage will still strip the binaries installed
in the system. But before doing that, all the useful debug information is copied
to a ".debug" file, which is then installed inside <path>/usr/lib/debug</path>
(the complete name of the file would be given by appending to that the path 
where the file is actually installed). The path to that file is then saved
in the original file inside an ELF section called ".gnu_debuglink", so that
<c>gdb</c> knows which file to load the symbols from.
</p>

<impo>
If you enable both <e>nostrip</e> and <e>splitdebug</e> features, Portage won't
strip binaries at all, so you have to pay attention to what you want.
</impo>

<p>
Another advantage of <e>splitdebug</e> is that it doesn't require you to rebuild
the package to get rid of the debug information. This is helpful when you build
some packages with debugging to get a backtrace of a single error. Once it's
fixed, you just need to remove the <path>/usr/lib/debug</path> directory.
</p>

<p>
To be sure to not strip binaries, you must also be sure you don't have
the <c>-s</c> flag set in your LDFLAGS. That tells the linker to strip the
resulting binaries in the link phase. Also note that using that flag might lead
to further problems. It won't respect the strip restrictions imposed by some
packages that stop working when entirely stripped.
</p>

<note>
Some packages unfortunately handle stripping by themselves, inside the upstream
provided makefiles. This is an error and should be reported. All packages
should leave Portage the task of the stripping or simply restrict stripping
entirely. The main exception to this are binary packages. They are usually
stripped by upstream, outside of Portage control.
</note>

</body>

</section>

<section> <!-- Introducing gdb -->
<title>Introducing gdb</title>

<body>

<p>
Once your packages are built with debug information and are not stripped, you
just need to get the backtrace. To do so you need the <path>sys-devel/gdb</path>
package. It contains the GNU debugger (<c>gdb</c>). After installing that, you
can proceed with getting the backtrace. The simplest way to get one is to run
the program from inside <c>gdb</c>. To do so, you need to point <c>gdb</c> to
the path of the program to run, give it the arguments it will need, and then
run it:
</p>

<pre caption="Running ls through gdb">
$ <i>gdb /bin/ls</i>
GNU gdb 6.4
[...]

(gdb) <i>set args /usr/share/fonts</i>
(gdb) <i>run</i>
Starting program: /bin/ls /usr/share/fonts
[Thread debugging using libthread_db enabled]
[New Thread 47467411020832 (LWP 11100)]
100dpi  aquafont     baekmuk-fonts  cyrillic  dejavu     fonts.cache-1  kochi-substitute  misc  xdtv
75dpi   arphicfonts  CID            default   encodings  fonts.dir      mikachan-font     util

Program exited normally.
(gdb)
</pre>

<p>
The message "Program exited normally" means that the program exited with the
code 0. That means that no errors were reached. You shouldn't trust that too
much, as there are programs that exit with status 0 when they reach error
conditions. Another common message is "Program exited with code <e>nn</e>". That
simply tells you which non-zero status code they returned. That might imply a
handled or expected error condition. For segmentation faults and aborts, you get
instead a "Program received signal SIGsomething" message.
</p>

<p>
When a program receives a signal, it might be for many different reasons. In case
of SIGSEGV and SIGABRT (respectively segmentation fault and abort), it usually
means the code is doing something wrong, like doing a wrong syscall or
trying to access memory through a broken pointer. Other common signals are
SIGTERM, SIGQUIT and SIGINT (the latter is received when CTRL-C is sent to the
program, and usually gets caught by <c>gdb</c> and ignored by the program).
</p>

<p>
Finally there is the series of "Real-Time events". They are named SIG<e>nn</e>
with <e>nn</e> being a number greater than 31. The pthread implementation
usually uses them to syncronise the different threads of the program, and
thus they don't represent error conditions of any sort. It's easy to provide
meaningless backtraces when confusing the Real-Time signals with error
conditions. To prevent this, you can tell <c>gdb</c> to not stop the program when
they are received, and instead pass them directly to the program, like in the
following example.
</p>

<pre caption="Running xine-ui through gdb, ignoring real-time signals.">
$ <i>gdb /usr/bin/xine</i>
GNU gdb 6.4
[...]

(gdb) <i>run</i>
Starting program: /usr/bin/xine
[...]

Program received signal SIG33, Real-time event 33.
[Switching to Thread 1182845264 (LWP 11543)]
0x00002b661d87d536 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib/libpthread.so.0
(gdb) <i>handle SIG33 nostop noprint noignore pass</i>
Signal        Stop      Print   Pass to program Description
SIG33         No        No      Yes             Real-time event 33
(gdb) <i>kill</i>
Kill the program being debugged? (y or n) <i>y</i>
(gdb) <i>run</i>
</pre>

<p>
The <c>handle</c> command tells <c>gdb</c> what it should do when the given signal is
sent to the command; in this case the flags are <c>nostop</c> (don't stop the
program returning the command to the debugger), <c>noprint</c> (don't bother
printing the reception of such a signal), <c>noignore</c> (don't ignore the signal &#8212;
ignoring signals is dangerous, as it means discarding them without passing them
to the program), <c>pass</c> (pass the signal to the debugged program).
</p>

<p>
After the eventual Real-Time events are being ignored by <c>gdb</c>, you should
try to reproduce the crash you want to report. If you can reproduce it
systematically, it's quite easy. When <c>gdb</c> tells you that the program
received the SIGSEGV or SIGABRT signal (or whatever else signal might represent
the error condition for the program), you'll have to actually ask for the 
backtrace, possibly saving it somewhere. The basic command to do that is
<c>bt</c>, which is short for <c>backtrace</c>, which will show you the backtrace of
the current thread (if the program is single-threaded, there's only one thread).
</p>

<p>
An alternative command to get a more detailed backtrace is <c>bt full</c>. That
also gives you the information about parameters and local variables to the
function where calls are being made (when they are available and not
removed by optimisations). This makes the trace longer but also more useful
when trying to find, for example, why a pointer is uninitialised.
</p>

<p>
Lately it's not rare that even simple programs are written with multiple threads,
making the use of a simple <c>bt</c> output, albeit meaningful, quite useless,
as it might represent the status of a thread different from the one in which the
signal is thrown, or from the one where the error condition manifested (in case there's
another thread responsible for throwing signals). For this reason, you should
instead get the trace with the longer command <c>thread apply all bt full</c>,
that tells the debug to print the full tracing of all the threads currently
running.
</p>

</body>
</section>

<section> <!-- Core dumps -->
<title>Core dumps</title>

<body>

<p>
Sometimes the crashes are difficult to reproduce, the program is vastly threaded,
it's too slow to run in <c>gdb</c> or it's messed up when run through it
(shouldn't surprise anybody that running inside the debugger there are more bugs
than are reproduceable without the debugger itself). In these cases, there is one
tool that comes in useful: the core dump.
</p>

<p>
A core dump is a file that contains the whole memory area of a program when it
crashed. Using that file, it's possible to extract the stack backtrace even
if the program has crashed outside <c>gdb</c>, assuming core dumps are
enabled. By default core dumps are not enabled on Gentoo Linux (they are,
however, enabled by default on
<uri link="http://www.gentoo.org/proj/en/gentoo-alt/bsd/fbsd/">Gentoo/FreeBSD</uri>),
so you have to enable them.
</p>

<p>
Core dumps can be enabled on the system level or the shell session level. In the
first case, everything in the system that crashes and does not have already a
crash handler (see later for more notes about KDE's crash handler) will dump.
When enabled at shell session level, only the programs started from that session
will leave behind a dump.
</p>

<p>
To enable core dumps on a system level, you have to edit either
<path>/etc/security/limits.conf</path> (if you're using PAM, as is the default)
or <path>/etc/limits.conf</path>. In the first case, you must define a limit
(whether hard or, most commonly, soft; for core files, that might be anywhere from
0 to no limit). In the latter case, you just need to set the variable C to the
size limit of a core file (here there's no "unlimited").
</p>

<pre caption="Example of rule to get unlimited core files when using PAM">
# /etc/security/limits.conf
*             soft      core       0
</pre>

<pre caption="Example of rule to get core files up to 20MB when not using PAM">
# /etc/limits.conf
*       C20480
</pre>

<p>
To enable core files on a single shell session you can use the <c>ulimit</c>
command with the <c>-c</c> option. 0 means disabled; any other positive number
is the size in KB of the generated core file, while <e>unlimited</e> simply
removes the limit on core file dimension. From that point on, all the programs
that exit because of a signal like SIGABRT or SIGSEGV will leave behind a
core file that might be called either "core" or "core.<e>pid</e>" (where pid is
replaced with the actual pid of the program that died).
</p>

<pre caption="Example of ulimit use">
$ <i>ulimit -c unlimited</i>
$ <i>crashing-program</i>
[...]
Abort (Core Dumped)
$ 
</pre>

<note>
The <c>ulimit</c> command is an internal command in bash and zsh. On other
shells it might be called in other ways or might even not be available at all.
</note>

<p>
After you get a core dump, you can run <c>gdb</c> on it, specifying both the path to the
file that generated the core dump (it has to be the same exact binary, so if you
recompile, the core dump is useless) and the path to the core file. Once you have
<c>gdb</c> open on it, you can follow the same instructions given above as it had just
received the signal killing it.
</p>

<pre caption="Starting gdb on a core file">
$ <i>gdb $(which crashing-program) --core core</i>
</pre>

<p>
As an alternative, you can use <c>gdb</c>'s command-line capabilities to get the
backtrace without entering the interactive mode. This also makes it easier to save
the backtrace in a file or to send it to a pipe of any kind. The trick lies in
the <c>--batch</c> and <c>-ex</c> options that are accepted by <c>gdb</c>. You
can use the following bash function to get the full backtrace of a core dump
(including all threads) on the standard output stream.
</p>

<pre caption="Function to get the whole backtrace out of a core dump">
gdb_get_backtrace() {
    local exe=$1
    local core=$2

    gdb ${exe} \
        --core ${core} \
        --batch \
        --quiet \
        -ex "thread apply all bt full" \
        -ex "quit"
}
</pre>

</body>

</section>

<section> <!-- KDE crash handler's notes -->
<title>KDE crash handler's notes</title>

<body>

<p>
KDE-based applications runs by default with their own crash handler, which is
presented by the user by the means of "Dr. Konqi" if it's installed (the
package is either <path>kde-base/kdebase</path> or <path>kde-base/drkonqi</path>
(included in <path>kdebase-meta</path>). This crash handler shows the user
an informative dialog telling him that the program has crashed. On this dialog
there is a "Backtrace" tab that, when loaded, calls <c>gdb</c> and makes it load the
data and generate the full backtrace on the behalf of the user, showing it in
the main text box and allowing it to be saved directly to a file. That backtrace is
usually good enough for reporting a problem.
</p>

<p>
When drkonqi is not installed, the crashes won't generate a core dump anyway,
and the user will receive no information by default. To avoid this, it's
possible to use the <c>--nocrashhandler</c> commandline on all the KDE-based
applications. That disables the crash handler entirely and leaves the signals
to be handled by the operating system as usual. This is useful to generate core
files when drkonqi is not available or when wanting to inspect stack frames by
hand.
</p>

</body>

</section>

<!-- TODO
     - add notes about GNOME's crash handler
     - add notes about renaming core dump files
-->

</chapter>

</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; indent-mode normal; -->
