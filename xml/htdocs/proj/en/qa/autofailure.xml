<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "http://www.gentoo.org/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/qa/autofailure.xml,v 1.4 2006/02/04 21:28:42 flameeyes Exp $ -->

<guide link="/proj/en/qa/autofailure.xml" lang="en">
<title>How to fix autotools failures</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>

<abstract>
This guide aim to describe the common situations which makes autotools fail to
run in an ebuild, givin advices on how to fix those.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.4</version>
<date>2006-02-04</date>

<chapter> <!-- Introduction -->
<title>Introduction</title>

<section>
<body>

<p>
With the term <e>autotools</e> we usually refer to the tools developed by the
GNU project to create platform and operating-system independant build systems,
<c>autoconf</c>, <c>automake</c> and <c>libtool</c>. Althought not every package
uses all of them at the same time, most of the modern ones do so; older packages
often does not use <c>automake</c> and <c>libtool</c> instead; KDE packages uses
a more complex build system that relies at the end on the three software above.
</p>

<p>
It's simple to recognize a package which build system is based on autotools:
if there's a <path>configure</path> script, and a <path>configure.in</path> or
<path>configure.ac</path> file, the build system is based on <c>autoconf</c>; if
there are one or more <path>Makefile.am</path> files in the various
subdirectories, it's also <c>automake</c> based; if there's a
<path>ltmain.sh</path> script, it's also using <c>libtool</c>.
</p>

<p>
To build a package that uses an autotools-based build system, the tools
themselves aren't strictly needed: the <path>configure</path> script is a simple
Bourne Shell script (usually, but this will be discussed lately) and it
transforms the <path>Makefile.in</path> files into simpler <path>Makefile</path>
for <c>make</c> (or, more often, <c>gmake</c>). In spite of them being optional
for building the software, often the patches needed to solve problems like
<uri link="asneeded.xml">--as-needed build failure</uri> or
<uri link="automagic.xml">automagic dependencies</uri> requires us to re-run
the tools to recreate scripts and makefiles' templates.
</p>

<p>
This guide won't give directions on how to fix packages' errors with use of
autotools, as that's a wide topic that requires lot of stuff to be explained.
For a simple introductions of the most common errors while using autotools, it's
rather suggested to read the
<uri link="/doc/en/articles/autotools-practices.xml">best practices with autotools</uri>
article. Instead, it will describe the common cases where re-running autotools
lead to failures, either on the rebuilding of the script or at build time.
</p>

</body>
</section>

</chapter>

<chapter> <!-- Re-running autotools -->
<title>Re-running autotools</title>
<section>

<body>

<p>
The first important thing to know is how to properly rebuild autotools support,
as that is a common problem that makes some ebuild fail. The order in which
autotools are run is important, as one rely on the other and the final output
depends vastly on the order to be respected.
</p>

<p>
Many packages provide a single script, often called <path>autogen.sh</path> or
<path>bootstrap.sh</path> that is uses to execute the tools in the order that
upstream thinks it's the right one, often setting variables so that the right
version of the tools is run (different versions of autotools often does not get
along well). These scripts are, in general, preferred over other methods but
often they contains mistakes, or assuptions of a given environment that might
be unique of another distribution, for this reason, they should be checked
carefully, and when they does not provide any advantage to the other methods (as
they might be calling the tools one after the other not even passing them
special parameters or checking their return value), they should be discarded.
</p>

<p>
<c>autoconf</c> package provides an automated script, called <c>autoreconf</c>
that should automatically detect which autotools are used and call them, but
this too often fail to recognize the right versions or breaks because of corner
cases. Also, it does run <c>autopoint</c>, the script that adds <c>gettext</c>
support to a package, that is almost never required to be run after patching
a package. For this reason, <c>autoreconf</c> is deprecated and avoided as
possible (the same goes for custom upstream-provided scripts that uses it).
</p>

<p>
To overcome these problems, the <path>autotools</path> eclass was added; this
eclass provides wrapper functions around the GNU autotools: <c>eautoconf</c>,
<c>eautomake</c>, <c>_elibtoolize</c> (_ is prefixed to avoid collision with
<c>elibtoolize</c> functions from <path>libtool</path> eclass instead) and the
most important <c>eautoreconf</c> function. This function does not wrap around
the broken <c>autoreconf</c> script, but rather analyse the autotools support
files present and run the tools in their right order. It also run the
<c>elibtoolize</c> function to patch libtool support files if needed, avoiding
problems when it's being called before the actual recreation of autotools files.
</p>

<p>
The functions in <path>autotools</path> eclass have also the advantage of not
presenting to the user a lot of raw output (in case of warnings) or nothing (in
case there are no problems); instead they provide <c>ebegin</c>/<c>eend</c>
status messages so users will know what's happening, and also they track the
error situations by providing an <c>epatch</c>-like message in case of failure.
For this reason, those functions are preferred over manual call or broken or
almost pointless custom scripts. Another point is that <path>autotools</path>
eclass also add the build-time dependency over the needed packags
(<b>sys-devel/autoconf</b>, <b>sys-devel/automake</b>,
<b>sys-devel/libtool</b>).
</p>

<warn>
KDE packages usually use a more complex autotools-based build system that make
use of special <path>configure.in.in</path> files and some perl magic. For this
reason they should <b>never</b> use <path>autotools</path> eclass. If you need
to re-run autotools you should rather delete the <path>${S}/configure</path>
file and let the <c>kde_src_compile</c> function know to re-run the scripts that
recreates autotools support.
</warn>

</body>
</section>

<section>
<title>Possibly undefind macros</title>

<body>

<p>
The most common failure with autotools is related to the <c>autoconf</c> message
"possibly undefined macro: SOME_MACRO". This message is issued when a macro is
called from the <path>configure.ac</path> or <path>configure.in</path> file but
it's not defined in the <path>aclocal.m4</path> file created by <c>aclocal</c>.
</p>

<p>
This happens often because the mentioned macro is not available when
<c>aclocal</c> is run; as it, by default, loads macros found in
<path>/usr/share/aclocal</path>, this means that the package providing that
macro is not installed (or the macro is called with the wrong name). As the
second case is either trivial or complex to resolve, we'll focus on the first
name, a missing macro definition.
</p>

<p>
Macros written by developers for their software to be detected in the system by
use of autotools are usually written in m4 files that are installed in the
aforementioned <path>/usr/share/aclocal</path> directory. As many packages uses
those macros for optional dependencies, there might be need for an m4 file that
is not installed in the system where autotools are being run; to solve this
problem, it's possible to copy the m4 file in a subdirectory shipped with the
package itself.
</p>

<p>
Unfortunately, to make use of this subdirectory, often called <path>m4</path>,
<c>aclocal</c> has to be told about it. In projects using <c>automake</c> is
possible to set that inside the main <path>Makefile.am</path> file by setting
the <b>ACLOCAL_AMFLAGS</b> variable:
</p>

<pre caption="example of telling aclocal to search for macro files in 'm4' directory">
...
ACLOCAL_AMFLAGS = -I m4
...
</pre>

<p>
This often is overlooked by upstream developers that simply pass the
<c>-I m4</c> parameter to aclocal while building their package. As adding a
patch to fix this problem is an overkill, it's simpler, if the package has a
directory with the needed m4 files, to set it in <b>AT_M4DIR</b> variable. The
same goes if the package is not using <c>automake</c> but just <c>autoconf</c>.
</p>

<pre caption="telling eautoreconf to search for macro files in 'm4' directory">
src_unpack() {
    ...
    AT_M4DIR="m4" eautoreconf
}
</pre>

<p>
In the rare case the software is using a cygnus-style sub-configure build
system, the above example might fail, as it tries to find a m4 subdir from where
the configure is; to solve this kind of problems, set it to <path>${S}/m4</path>
instead.
</p>

<note>
It's usually a good idea to let upstream know if they aren't setting the
<b>ACLOCAL_AMFLAGS</b> variable, so that they can fix that for next releases;
in a theorical perfect world, <c>eautoreconf</c> alone should solve all the
problems.
</note>

<p>
Less often, but still happens, there are no directories with m4 files, or the
files with the undefined macro isn't there; to solve this issue, you have to
search for which package provides the m4, and then add it to that directory,
either with a patch or by putting it on mirrors and then adding it to
<b>SRC_URI</b> (in which case you have to add <b>${WORKDIR}</b> to the list of
directories to search or move it in the right directory. This kind of issue is
one of the most annoying one, so it's usually better to inform as soon as
possible upstream so that following releases wouldn't require such hacks.
</p>

</body>
</section>

<section> <!-- Makefile.am requires missing files -->
<title>automake fails, requires missing files</title>

<body>

<p>
Another common error, this time with <c>automake</c> is a failure because of
missing files, such as <path>NEWS</path> or <path>README</path>. This is because
all the autotools assume, if nobody say otherwise to them, that they are
working on a GNU package, having a series of files because of the code style
guide from GNU itself, and fails when those files are missing. In those cases
<c>automake</c> should be called with the <c>--foreign</c> parameter, that tells
it to not fail if the GNU-required files are missing.
</p>

<p>
Again, <c>eautomake</c> function tries to make simpler autotools rebuilding
by checking if some of the GNU needed files are present, and then calling
<c>automake</c> with the right option if not. The right way to solve this issue
(to send upstream) is to add to the <b>AUTOMAKE_OPTIONS</b> variable the option
<e>foreign</e> so that it will know to use foreign support out of the box.
</p>

<p>
When the files are requested by <path>configure.in</path> or
<path>configure.ac</path> instead of <path>Makefile.am</path>, and are usually
the two files <path>config.guess</path> and <path>config.sub</path>, the problem
is that the package is not properly bootstrapped. To fix this, <c>automake</c>
should be called with the options <c>--add-missing --copy</c>. This is what the
<c>eautomake</c> function already do, so if you find this problem, yuo should
consider using the functions provided by <path>autotools</path> eclass instead
of running the tools manually or with the eventual script provided with the
package itself.
</p>

<warn>
A common mistake done when <c>automake</c> fail in those cases is to not put the
<c>|| die</c> condition, avoiding to interrupt the build process. This is an
error, because the files will usually be needed later, it's then better to force
always their replacement, also because in many cases new versions of the two
files are needed to build on some architectures.
</warn>

</body>
</section>

</chapter>

</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; indent-mode normal; -->
