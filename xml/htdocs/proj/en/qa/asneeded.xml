<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "http://www.gentoo.org/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/qa/asneeded.xml,v 1.11 2006/06/27 09:26:16 flameeyes Exp $ -->

<guide link="/proj/en/qa/asneeded.xml" lang="en">
<title>--as-needed introduction and fixing guide</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>

<abstract>
This guide is meant to explain how the --as-needed LDFLAG works and to provide
steps to fix simple cases where --as-needed fails to build a package.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.7</version>
<date>2006-06-27</date>

<chapter> <!-- Introduction -->
<title>Introduction</title>
<section>
<title>What is --as-needed?</title>
<body>

<note>
This guide is related to an experimental feature or function that may or
may not work on your system, packages, or architecture.  The information stated 
here is presented only for informative purposes, and is not officially supported.
Working patches to fix packages to work with this feature are usually welcome
if they don't create more problems for current users.  In any case, please don't
report problems caused by the steps explained in this guide on bugzilla.
</note>

<p>
The <c>--as-needed</c> flag is passed to the GNU linker (GNU
<c>ld</c>).  The flag tells the linker to link in the produced binary only the 
libraries containing symbols actually used by the binary itself.  This binary 
can be either a final executable or another library.
</p>

<p>
In theory, when linking something, only the needed libraries are passed to the
command line used to invoke the linker.  But to workaround systems with broken
linkers or not using ELF format, many libraries declare some "dependencies"
that get pulled in while linking.  A simple example can be found by looking at
the libraries declared as dependencies by <path>gtk+ 2.0</path>:
</p>

<pre caption="libraries needed to link to gtk+ 2.0">
$ <i>pkg-config gtk+-2.0 --libs</i>
-lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgdk_pixbuf-2.0 -lm -lpangocairo-1.0 -lpango-1.0 -lcairo -lgobject-2.0 -lgmodule-2.0 -ldl -lglib-2.0
</pre>

<p>
Of course, if the application is just using functions from gtk+ 2.0, a simple
link line with <c>-lgtk-x11-2.0</c> should make it build fine, but looking at
which libraries are needed and which are not from a package point of view is 
often an impossible task.
</p>

</body>
</section>
<section>
<title>How can --as-needed be useful?</title>
<body>

<p>
The use of the <c>--as-needed</c> flag allows the linker to avoid linking extra
libraries in a binary.  This not only improves startup times (as the loader does
not have to load all the libraries for every step) but might avoid the full 
initialization of things like KDE's KIO for a binary if it's not using the KIO
framework.
</p>

<p>
More importantly, the use of <c>--as-needed</c> avoids adding dependencies to a
binary that are prerequisites of one of its direct or indirect dependencies.
This is important because when a library changes SONAME after an ABI change,
all the binaries directly linking to it have to be rebuilt. By linking only the
libraries that are actually needed, the breakage due to an ABI change is
reduced.  It is particularly useful when the ABI breakage happens in a library
used by some other high level library (like <path>cairo</path>, which is used
directly by <path>gtk+-2.0</path>, and gets linked indirectly in applications
using the latter), as it prevents the rebuild of the final binaries and thus of
the packages carrying them.
</p>

<p>
It is also useful to check whether the dependencies stated by the documentation
are actually used by a package: it's not impossible that a package checks in
a configure script for some library, and then links to it, but without using it
at all because the code using it was removed or refactored or has not been 
written.
</p>

</body>
</section>
<section>
<title>How to use --as-needed</title>
<body>

<warn>
At the time of writing, there are many packages failing in funny ways because
of <c>--as-needed</c> as they weren't designed to be used with it.  While there
shouldn't be (note the <e>conditional</e>) problems such as crashes, this flag
is not considered safe for production use and not supported in any way by
Gentoo.
</warn>

<p>
If you want to try using the <c>--as-needed</c> flag, you can simply add it to
your <path>/etc/make.conf</path> file.  Note that LDFLAGS are generally passed
not directly to <c>ld</c> but to <c>gcc</c>, so you have to use the <c>-Wl,</c>
prefix to pass them back to the linker.
</p>

<pre caption="enabling --as-needed in make.conf">
LDFLAGS="-Wl,--as-needed"
</pre>

<note>
There are known issues with <c>ld</c> shipped with binutils series 2.16, and
early 2.17 prereleases. If you feel like trying this flag, you have to use at
least version 2.17, that has all the fixes needed to have <c>--as-needed</c>
behave correctly. Please note that 2.17.50.0.2 version is <b>not</b> working as
one might expect and is, in regard to <c>--as-needed</c>, older than 2.17, as it
misses a few important fixes.
</note>

<p>
This flag should (note again the <e>conditional</e>) work on every Linux
platform supported by binutils, but tests are being done only on AMD64 at the
moment (some unofficial testing is being done on PPC too, but problems with
binutils mix up their validity).  It's known not to work on FreeBSD and probably
does not work on other non-Linux targets.
</p>

<p>
As <c>--as-needed</c> depends not only on the way the package you're building is
linked but also its dependencies, there are quite a few packages that were
silently patched and fixed and might require rebuilding. Please make sure to
rebuild the dependencies failing to link against before filing a bug.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Fixing problems with --as-needed</title>
<section>
<title>Identifying the problem</title>
<body>

<p>
Anyone willing to try out the <c>--as-needed</c> flag should be aware that
there are many cases of failures that may fall into one of a few different
categories.  I'll try to explain here the reasoning behind the failures and
ways to fix them; some of them are really simple, others are not.
</p>

<p>
Once again, if you're not interested in fixing those problems, or you are not a
developer, please try to stay away from experimental things like this. If you're
a developer or you have a patch to fix --as-needed issues, you can file a bug in
<uri link="http://bugs.gentoo.org/">Gentoo Bugzilla</uri>, blocking
<uri link="http://bugs.gentoo.org/show_bug.cgi?id=129413">bug #129413</uri> and
CCing <mail link="flameeyes@gentoo.org">flameeyes@gentoo.org</mail> on it.
</p>

</body>
</section>
<section>
<title>Binutils bugs</title>
<body>

<p>
As stated above, the 2.16 binutils series and the early 2.17 prereleases suffer
from problems when linking with <c>--as-needed</c>, which leads to <c>ld</c>
segfaulting when trying to link complex C++ libraries like <path>wxGTK</path>.
</p>

<p>
In this case the first thing to do is to use the latest prerelease available
from upstream. At the date of writing the last prerelease is 2.16.92 that is
said to solve most if not all the problems with <c>--as-needed</c> flag and
does not fail anymore with <path>wxGTK</path> for once.
</p>

<p>
If the last snapshot doesn't work, you might consider filtering the flag with
the following code, after reporting the case upstream with as many details
possible.
</p>

<pre caption="filtering the --as-needed flag in an ebuild">
inherit flag-o-matic
...

<stmt>pkg_setup()</stmt> {
    <keyword>filter-ldflags</keyword> -Wl,--as-needed --as-needed
}
</pre>

<impo>
These problems should be gone as of 2.16.92 and thus the filtering is
unnecessary, as anyone using <c>--as-needed</c> and finding segfaults should
simply update binutils. For this reason you might want to do this locally but
you should <e>not</e> commit flags filtering for this reason.
</impo>

</body>
</section>
<section>
<title>Failure in compile, unrecognized option</title>
<body>

<p>
This is at the same time the most simple and the most annoying problem that can
be found.  There might be packages failing with an error like the following
after adding <c>-Wl,--as-needed</c> to LDFLAGS:
</p>

<pre caption="common error while using --as-needed">
ld: unrecognized option '-Wl,--as-needed'
ld: use the --help option for usage information
</pre>

<p>
This is caused by <c>ld</c> being called with the <path>LDFLAGS</path> variable
instead of <c>gcc</c>, thus breaking because it doesn't recognize the
<c>-Wl,</c> prefix used to tell <c>gcc</c> to pass the option down to the
linker.  To fix this, one must pass the output of the <c>raw-ldflags</c>
function to the <c>make</c> process.
</p>

<pre caption="example of raw-ldflags usage">
inherit flag-o-matic
...

<stmt>src_compile()</stmt> {
    <keyword>emake</keyword> <ident>LDFLAGS</ident>="<var>$(raw-ldflags)</var>" || <keyword>die</keyword> <const>"emake failed"</const>
}
</pre>

</body>
</section>
<section>
<title>Failure in final linking, undefined symbols</title>
<body>

<p>
This is the most common error that happens while using <c>--as-needed</c>. It
happens during the final linking stage of an executable (libraries don't create
problems, because they are allowed to have undefined symbols). The executable
linking stage dies because of an undefined symbol that is present in one of
the libraries fed to the command line. However, the library is not used by the
executable itself, thus it gets removed by <c>--as-needed</c>.
</p>

<p>
This usually means that a library was not linked to another library, but was
using it, and then relying on the final executable to link them together.  This
behavior is also an extra incumbence on developers using that library because
they have to check for the requirements.
</p>

<p>
The fix to this kind of problem is usually simple: just find which library
provides the symbols and which one is requiring them (the error message from
the linker should contain the name of the latter).  Then make sure that when the
library is linked from the source files it's also linked to the first.  While
using autotools, the dependent library has to be checked in the configure (this
should already be the case to specify the dependencies in the <c>pkg-config</c>
datafile or in the script provided) and then the variable carrying this value
should be added to the LIBADD variable for the library to be built.
</p>

</body>
</section>
<section>
<title>Failure in execution, undefined symbols</title>
<body>

<p>
Sometimes the undefined symbol errors don't happen while linking, but rather at
the execution of an application built with --as-needed.  The cause, however, is
just the same as for the undefined symbols in linking: a directly-linked library
did not link one of its dependencies.  It also has the same solution: find which
library carries the undefined symbols and make sure that it gets linked to the
library providing them.
</p>

</body>
</section>
<section> <!-- Failure in ./configure -->
<title>Failure in ./configure</title>
<body>

<p>
This is hopefully the less frequent failure but it's also one of the most
impractical to find, although is no different to fix than other failures.
Basically the <c>./configure</c> script of an autotooled package can fail to
find a given library (and thus abort if the support is a strict requirement, or
simply ignore the presence of a library) if that library does not link against
its right dependencies.
</p>

<p>
The quickest way to find possible failures because of the above is to look into
<path>AC_CHECK_LIB</path> calls inside the configure script; when the fifth 
parameter is used (<e>other-libraries</e>) it often means that those libraries 
need to be linked in the same binary with the one to check, as they are not 
linked in automatically.  While this works in a normal situation, when using the
<c>--as-needed</c> flag, they are probably dropped because they are not used by
the test program.
</p>

<p>
The fixes are the usual ones explained above, but instead of being applied to
the failing package they have to be applied to the library that's failing to be
detected.
</p>

<note>
While applying patches to libraries to fix <c>--as-needed</c> support, it is
usually not the case to apply a revbump: those who don't want to use the flag
don't need to rebuild the library.  For this reason, those who want to use
<c>--as-needed</c> are invited to run an <c>emerge -e world</c> so that
libraries are rebuilt.
</note>

</body>
</section>
<section> <!-- Importance of linking order -->
<title>Importance of linking order</title>
<body>

<p>
One thing that might be frustrating when fixing packages for <c>--as-needed</c>
is that sometimes, although all the libraries are present in the linking line,
they are just ignored and not linked at all.  This leads to the same issues as 
above; missing symbols either during final link or execution.  This is because 
of a behaviour of the GNU linker that's enforced by <c>--as-needed</c>.
</p>

<p>
Basically, what the linker does is look for the symbols missing in a given file
(either an object file, a static archive or a library) only in the files coming
after it.  When using the normal linking, without <c>--as-needed</c>, this is
not a problem, although there might be some internal drawbacks on the linking
stage, the files are linked together without considering ordering.  But with
the flag, the libraries that aren't used for resolving symbols are discarded
and thus not linked.
</p>

<pre caption="example of wrong and correct linking order">
<comment>(in this case libm is considered before the object files and discarded independently from the content of the two.)</comment>
$ <i>gcc -Wl,--as-needed -lm someunit1.o someunit2.o -o program</i>

<comment>(this is the correct linking order to get libm linked only if needed.)</comment>
$ <i>gcc -Wl,--as-needed someunit1.o someunit2.o -lm -o program</i>
</pre>

<p>
The fix in this case is to simply fix the linking order so that the libraries given
to the linker are all after the object files and the static archives.
</p>

<p>
While using autotools there are usually small cases where this happens, because
usually libs are fed either via the <path>LIBS</path> variable in the
configure script or are listed in the LDADD/LIBADD variables for the target
which is being built.  The only case when this happens to be a problem is when
the libraries get fed into LDFLAGS variable (which is incorrect).
</p>

</body>
</section>
</chapter>
</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; indent-mode normal; -->
