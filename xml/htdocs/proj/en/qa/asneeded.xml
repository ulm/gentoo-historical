<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "http://www.gentoo.org/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/qa/asneeded.xml,v 1.2 2006/01/12 16:42:44 flameeyes Exp $ -->

<guide link="/proj/en/qa/asneeded.xml" lang="en">
<title>--as-needed introduction and fixing guide</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>

<abstract>
This guide is meant to explain the working of --as-needed LDFLAG and to provide
a guide to fix simple cases where --as-needed fails to build a package.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.1</version>
<date>2006-01-12</date>

<chapter> <!-- Introduction -->
<title>Introduction</title>

<section>
<title>What is --as-needed?</title>
<body>

<note>
This guide is related to some experimental feature or function that might or
might not work on your system, for your packages and with your architecture.
The information here stated is present only for informative purpose, and is not
officially supported. Working patches to fix packages to work with this feature
are usually welcome if they don't create problems to people not using them.
In any case, please don't report on bugzilla problems caused by the method
explained in this guide.
</note>

<p>
The <c>--as-needed</c> flag is a flag for the GNU dynamic linker (GNU
<c>ld</c>), that tells it to link in the produced binary only the libraries
containing symbols actually used by the binary itself. This binary can be either
a final executable or another library.
</p>

<p>
In theory, when linking something, only the needed libraries are passed to the
command line used to invoke the linker, but to workaround systems with broken
linkers or not using ELF format, many libraries declares some "dependencies"
that gets pulled in while linking. A simple example can be found by looking at
the libraries declared as dependencies by <path>gtk+ 2.0</path>:
</p>

<pre caption="libraries needed to link to gtk+ 2.0">
$ <i>pkg-config gtk+-2.0 --libs</i>
-lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgdk_pixbuf-2.0 -lm -lpangocairo-1.0 -lpango-1.0 -lcairo -lgobject-2.0 -lgmodule-2.0 -ldl -lglib-2.0
</pre>

<p>
Of course, if the application is just using functions from gtk+ 2.0, a simple
link line with <c>-lgtk-x11-2.0</c> should make it build fine, but looking at
which libraries are needed and which not from a package point of view is often
an impossible task.
</p>

</body>
</section>

<section>
<title>How can --as-needed be useful?</title>

<body>

<p>
The use of <c>--as-needed</c> flag allows to avoid linking extra libraries in
a binary, this not only improve slightly startup times (as the loader has not to
load all the libraries for every step) but might avoid the full initialization
of things like KDE's KIO for a binary, if it's not using the KIO framework.
</p>

<p>
But way more important, the use of <c>--as-needed</c> avoid adding dependencies
to a binary that are prerequisites of one of its direct or indirect
dependencies. This is important because when a library changes SONAME after an
ABI change, all the binaries directly linking to it has to be rebuilt, too. By
linking only the actually used libraries, the breakage due to an ABI change is
reduced. It's particularry useful when the ABI breakage happen in a library used
by some other high level library (like for example <path>cairo</path>, that's
used directly by <path>gtk+-2.0</path>, and gets linked indirectly in
applications using the latter), as it prevents the rebuild of the final binaries
and thus of the packages carrying them.
</p>

<p>
It's also useful to check whether the dependencies stated by the documentation
are actually used by a package: it's not impossible that a package checks in
a configure script for some library, and then link it, but without using it at
all because the code using it was removed or refactored or yet to be written.
</p>

</body>
</section>

<section>
<title>How to use --as-needed</title>

<body>

<warn>
At the time of writing there are many packages failing in funny ways because of
<c>--as-needed</c> as they weren't designed to be used with it. While there
shouldn't be (note the <e>conditional</e>) problems such as crashes, this flag
it's not considered safe for production use and not support in any way.
</warn>

<p>
If you want to try using the <c>--as-needed</c> flag, you can simply add it to
your <path>/etc/make.conf</path> file. Note that LDFLAGS are generally passed
not directly to <c>ld</c> but to <c>gcc</c>, so you have to use the <c>-Wl,</c>
prefix to pass them back to the linker.
</p>

<pre caption="enabling --as-needed in make.conf">
LDFLAGS="-Wl,--as-needed"
</pre>

<p>
There are known issues with <c>ld</c> shipped with binutils up to 2.16.1, so if
you feel like experimenting this flag, you probably want to use some prerelease
version like 2.16.91.5. This also mean that you might also encounter problems
that are caused by this specific binutils version that might be specific to
your platform.
</p>

<p>
This flag should (note again the <e>conditional</e>) work on every Linux
platform supported by binutils, but tests are being done only on AMD64 at the
moment (some unofficial test is being done on PPC too, but problems with
binutils mix up their validity). It's known not to work on FreeBSD and probably
it's not working on other non-Linux targets too.
</p>

<p>
Depending on when you merged them you might require to rebuild some packages
like <path>faad2</path>, <path>lame</path> and <path>net-snmp</path> so that
other packages can link to them.
</p>

</body>
</section>

</chapter>

<chapter>
<title>Fixing problems with --as-needed</title>

<section>
<title>Identifying the problem</title>

<body>

<p>
Everybody willing to try out <c>--as-needed</c> flag should be aware that there
are many cases of failures, that might fall into one of different categories.
I'll try to explain here the reasons of the failures and ways to fix them; some
of them are really simple, some others are not.
</p>

<p>
Once again, if you're not interested in fixing those problems, or you are not a
developer, please try to stay away from experimental things like this.
</p>

</body>
</section>

<section>
<title>Binutils bugs</title>

<body>

<p>
The first thing to take into account is <path>binutils</path>, the package that
contains the GNU utilities to assemble and link binaries, so also GNU <c>ld</c>.
As this flag is being tested with a pre-release version, we can't rule out the
problem is within binutils, in which case the best thing to do might be looking
for an already open bug on its bugzilla or report the failure there.
</p>

<p>
This class of failures is common with packages related to wxWidgets:
<path>wxGTK</path> itself and packages linking to it while using a GUI, like
<path>vlc</path> and <path>mkvtoolnix</path> triggers a segmentation fault
inside <c>ld</c>. The only way to work this around is by filtering the flag
altogether in the ebuild.
</p>

<pre caption="filtering the --as-needed flag in an ebuild">
inherit flag-o-matic
...

pkg_setup() {
    filter-ldflags -Wl,--as-needed --as-needed
}
</pre>

</body>
</section>

<section>
<title>Failure in compile, unrecognized option</title>
<body>

<p>
This is at the same time the most simple and the most annoying problem that can
be found. There might be packages failing with an error like the following
after adding <c>-Wl,--as-needed</c> to LDFLAGS:
</p>

<pre caption="common error while using --as-needed">
ld: unrecognized option '-Wl,--as-needed'
ld: use the --help option for usage information
</pre>

<p>
This is caused by <c>ld</c> being called with <path>LDFLAGS</path> variable
instead of <c>gcc</c>, thus breaking because it doesn't recognize the
<c>-Wl,</c> prefix used to tell <c>gcc</c> to pass the option down to the
linker. To fix this, one must pass to the make process the output of the
<c>raw-ldflags</c> function.
</p>

<pre caption="example of raw-ldflags usage">
inherit flag-o-matic
..

src_compile() {
    emake LDFLAGS="$(raw-ldflags)" || die "emake failed"
}
</pre>

</body>
</section>

<section>
<title>Failure in final linking, undefined symbols</title>

<body>

<p>
This is the most common error that happens while using <c>--as-needed</c>. It
happens during the final linking stage of an executable (libraries don't create
problems, because they are allowed to have undefined symbols); the executable
linking stage dies because of an undefined symbol, that is present in one of the
libraries feeded to the command line, but it's not used by the executable itself
(thus it gets removed by <c>--as-needed</c>).
</p>

<p>
This usually means that a library wasn't linked to another library, but was
using it, and then relying on the final executable to link them together. This
behavior is also an extra incumbence on developers using that library because
they have to check for the requirements.
</p>

<p>
The fix to this kind of problem is usually simple: just find which library
provides the symbols, and which one is requiring them (the error message from
the linker should contain the name of the latter), then make sure that when the
library is linked from the source files it's also linked to the first. While
using autotools, the dependent library has to be checked in the configure (this
should already be the case to specify the dependencies in the <c>pkg-config</c>
datafile or in the script provided), and then the variable carrying this value
should be added to the LIBADD variable for the library to be built.
</p>

<p>
There are cases in which the problem is not due to the libraries not being
present in the command line, but being misplaced. For the linker to know
what to link to what, the order is important. First goes the LDFLAGS, then the
object files to link, and then the libraries to link them with.
</p>

<pre caption="generalization of a linking command">
$ <i>gcc ${LDFLAGS} -o ${TARGET} ${OBJS} ${LIBS}</i>
</pre>

<p>
While using autotools there are usually small cases where this happens, because
usually libs are feeded either via the <path>LIBS</path> variable in the
configure script, or are listed in the LDADD/LIBADD variables for the target
which is being built. The only case when this happens to be a problem is when
the libraries gets feeded into LDFLAGS variable (that's incorrect).
</p>

</body>
</section>

<section>
<title>Failure in execution, undefined symbols</title>
<body>

<p>
Sometimes the undefined symbol errors don't happen while linking, but rather at
the execution of an application built with --as-needed. The cause, however, is
just the same as for the undefined symbols in linking: a directly-linked library
did not link one of its dependencies. It also has the same solution: find which
library carries the undefined symbols and make sure that it gets linked to the
library providing them.
</p>

</body>
</section>

</chapter>

</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; indent-mode normal; -->
