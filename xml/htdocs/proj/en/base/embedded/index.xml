<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/project.xsl" type="text/xsl"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE project SYSTEM "/dtd/project.dtd">
<project>

<name>Embedded</name>
<longname>Embedded Gentoo</longname>

<description>
  Embedded Gentoo brings the flexibity of Gentoo to embedded systems.
</description>

<longdescription>
  This project manages embedded system support in Gentoo.  The project is
  responsible for overseeing the build infrastructure for creating images
  to be installed onto embedded systems.  Also included is the support of
  specific types of embedded systems, and development tools.
</longdescription>

<goals>
  The intention of the project is to make Gentoo viable for embedded systems.
  This includes creating a system for cross compiling and building the image
  for an embedded system on a Gentoo workstation.  The base install image
  should be minimal, with different libc options.  Building on this base,
  the system can be customized for the particular system.
</goals>

<dev role="lead">pebenito</dev>
<dev description="uClibc">dragonheart</dev>
<dev description="Single Boards">solar</dev>
<dev>sindian</dev>
<dev description="Handhelds">abhishek</dev>
<dev description="Cross Compiling">kumba</dev>

<extraproject name="Build">
  System tools for building and loading the system.  Includes cross compiling
  and libc (glibc/uClibc/dietlibc).
</extraproject>
<extraproject name="Tools">
  Tools for embedded system development (dev-embedded)
</extraproject>
<extraproject name="Single Boards">
  Support for single board systems.
</extraproject>
<extraproject name="Handhelds">
  Support for handheld devices, such as PDAs like iPAQ and Zaurus.
</extraproject>

<plannedproject name="Misc Devices">
  Support for miscellaneous embedded systems
</plannedproject>
<plannedproject name="Security">
  Implementation of security measures
</plannedproject>
<plannedproject name="Real Time">
  Enhancements for real time operation
</plannedproject>

<herd name="dev-embedded"/>

<extrachapter position="bottom">
<title>I Want to Participate</title>
<section>
<body>
<p>
  To participate in the Embedded Gentoo project first join the mailing list at
  <i>gentoo-embedded@gentoo.org</i>. Then ask if there are plans to support
  something that you are interested in, propose a new subproject that you are
  interested in or choose one of the planned subprojects to work on. You may talk
  to the developers and users in the IRC channel <i>#gentoo-embedded</i> on
  <i>irc.freenode.net</i> for more information or just to chat about the project
  or any subprojects. If you don&#39;t have the ability to actively help by
  contributing work we will always need testers to maintain the stability of
  the project. All development, testing, and productive comments and
  feedback will be greatly appreciated.
</p>
</body>
</section>
</extrachapter>

<task lead="kumba">
<name>Cross Compilers</name>
<description>Creation and integration of cross compilers into portage.</description>
<startdate>2003-11-01</startdate>
<milestone finished="yes">
  <enddate>2003-12-07</enddate>
  <description>
    Initial script based implementation.  This is available from
    the sys-devel/crossdev package.
  </description>
</milestone>
<milestone finished="no">
  <enddate>?</enddate>
  <description>
    Testing of as many native/target combinations of cross compiler
    as possible.
  </description>
</milestone>
<milestone finished="no">
  <enddate>?</enddate>
  <description>
    Integration of the cross compile toolchain into /usr.  Currently
    crossdev puts the entire toolchain into a separate directory
    under /home.  (May not be needed/possible)
  </description>
</milestone>
<milestone finished="no">
  <enddate>?</enddate>
  <description>
    Portage cross compiler merging.  Enhancement of Portage and toolchain
    ebuilds so complete toolchains can be merged from portage rather than
    using a separate script.
  </description>
</milestone>
<milestone finished="no">
  <enddate>?</enddate>
  <description>
    Portage support for cross compiling.  Portage currently only supports
    the current native compiler.  Portage must be enhanced to be aware
    of multiple toolchains (different libc and native vs. cross compiler).
  </description>
</milestone>
</task>

<task lead="dragonheart">
<name>uClibc</name>
<description>uClibc toolchain creation</description>
<longdescription>
  Ebuild for the buildroot project listed in www.uclibc.org. This makes a
  customised version of binutils, gcc, and the uclibc specifically for embedded
  cross compiling.
</longdescription>
<startdate>2003-11-01</startdate>
<milestone finished="no">
  <enddate>?</enddate>
  <description>
    Buildroot - 
    x86 support of the toolchain and root filesystem based on
    http://www.uclibc.org/cgi-bin/cvsweb/buildroot/
  </description>
</milestone>
<milestone finished="no">
  <enddate>?</enddate>
  <description>
    Toolchain - 
    Create an ebuild based on http://www.uclibc.org/toolchains.html
    (effectively the same as buildroot without the root filesystem stuff)
  </description>
</milestone>
<milestone finished="no">
  <enddate>?</enddate>
  <description>
    Break up the toolchain process into three ebuilds - gcc, binutils and
    uClibc to support the version bumps on them better.
  </description>
</milestone>
<milestone finished="no">
  <enddate>?</enddate>
  <description>
    Improve these ebuilds to include cross-platform support and various
    USE flags. A stored configuration option will be developed.
    (e.g. /etc/embedded/uclibc.config)
  </description>
</milestone>
</task>

<task lead="pebenito">
<name>Baselayout-lite</name>
<description>baselayout for embedded systems</description>
<longdescription>
  Baselayout contains the initial layout of directories on the system.
  This includes default files in /etc, and base init scripts.  Due
  to size requirements, init scripts should be minimal, and only
  relevant files in /etc should be included.
</longdescription>
<startdate>2003-11-23</startdate>
<milestone finished="yes">
  <enddate>?</enddate>
  <description>
    Choose files to be installed.  This should be the minimal selection, for
    example required device nodes, and files in /etc shuch as passwd and group.
  </description>
</milestone>
<milestone finished="yes">
  <enddate>?</enddate>
  <description>
    Choose INIT system, and create init script(s).
  </description>
</milestone>
<milestone finished="no">
  <enddate>?</enddate>
  <description>
    Testing and enhancement.
  </description>
</milestone>
</task>
</project>
