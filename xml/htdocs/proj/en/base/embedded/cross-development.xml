<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/base/embedded/cross-development.xml,v 1.2 2007/07/13 20:58:36 neysx Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/cross-development.xml" lang="en">
<title>Gentoo Cross Development Guide</title>

<author title="Author">
  <mail link="alextarkovsky@gmail.com">Alex Tarkovsky</mail>
</author>

<author title="Reviewer">
  <mail link="vapier@gentoo.org">Mike Frysinger</mail>
</author>

<abstract>
This guide demonstrates the use of Gentoo tools to develop for non-native
platforms.
</abstract>

<!--
Released into the public domain
-->

<version>1.0</version>
<date>2006-08-22</date>

<chapter>
<title>Overview</title>

<section>
<title>Introduction</title>
<body>

<p>
Cross development has traditionally been a black art, requiring a lot of
research, trial and error, and perseverance. Intrepid developers face a
shortage of documentation and the lack of mature, comprehensive open source
toolkits for multi-platform cross development. Ongoing work by the
<uri link="http://www.gentoo.org/proj/en/base/embedded/index.xml">Embedded
Gentoo project</uri>, the <mail link="toolchain@gentoo.org">Gentoo Toolchain
herd</mail>, and other contributors is yielding a Gentoo-based development
platform that greatly simplifies cross development.
</p>

<p>
In this guide we demonstrate how to use these Gentoo development tools for
three common cross development tasks:
</p>

<ol>
  <li>Building a cross toolchain</li>
  <li>Cross-compiling binary packages</li>
  <li>Cross-compiling a kernel</li>
</ol>

<p>
The content of this guide is being merged into a forthcoming Gentoo Embedded
Handbook which will also cover cross development with
<uri link="http://www.gentoo.org/proj/en/hardened/index.xml">Hardened Gentoo</uri>,
the creation of embedded filesystem images, testing with
<uri link="http://fabrice.bellard.free.fr/qemu/">QEMU</uri>, deployment, and
more.
</p>

</body>
</section>

<section>
<title>Terminology</title>
<body>

<dl>
  <dt><c>host system</c></dt>
  <dd>The system used for cross development</dd>
  <dt><c>sysroot</c></dt>
  <dd>
    Any directory on the host system where a toolchain is installed; can be
    used as a secondary root filesystem hierarchy to provide a minimal
    non-native environment for creating cross-compiled binaries
  </dd>
  <dt><c>target system</c></dt>
  <dd>
    The system the cross-compiled binaries will be deployed on
  </dd>
  <dt><c>toolchain</c></dt>
  <dd>
    A set of packages required to build binaries for modern Unix-like operating
    systems
  </dd>
</dl>

</body>
</section>

<section>
<title>The Gentoo toolchain</title>
<body>

<p>
The Gentoo toolchain consists of the following packages:
</p>

<ul>
  <li><c>binutils</c> – Essential utilities for handling binaries</li>
  <li><c>gcc</c> – The GNU Compiler Collection</li>
  <li><c>glibc</c> – The GNU C Library</li>
  <li>
    <c>uclibc</c> – A lean drop-in replacement for glibc optimized for embedded
    systems
  </li>
  <li><c>linux-headers</c> – Kernel headers needed by system libc</li>
  <li><c>gdb</c> – Optional, for debugging binaries</li>
</ul>

<p>
All proper Gentoo systems have a toolchain installed as part of the base
system. This toolchain is configured to build binaries native to its host
platform.
</p>

<p>
In order to build binaries on the host system for a non-native platform
you'll need a special toolchain—a so-called <e>cross toolchain</e>—which can
target that particular platform. Gentoo provides a simple but powerful tool
called <c>crossdev</c> for this purpose. Crossdev can build and install
arbitrary GCC-supported cross toolchains on the host system, and because
Gentoo installs toolchain files into target-specific directories the toolchains
built by crossdev won't interfere with the host's native toolchain.
</p>

</body>
</section>

<section>
<title>Environment variables</title>
<body>

<p>
Certain environment variables used by the Gentoo toolchain and Portage can
thoroughly confuse developers inexperienced with cross development. The
following table explains some tricky variables and provides sample values based
on the cross development examples presented in this guide.
</p>

<table>
<tr>
  <th>Variable</th>
  <th>Meaning When Building Cross Toolchain</th>
  <th>Meaning When Building Cross Binaries</th>
</tr>
<tr>
  <ti>CBUILD</ti>
  <ti>
    Platform used to build the cross toolchain.
    Example: <c>CBUILD="i686-pc-linux-gnu"</c>
  </ti>
  <ti>
    Platform used to build the cross binary.
    Example: <c>CBUILD="i686-pc-linux-gnu"</c>
  </ti>
</tr>
<tr>
  <ti>CHOST</ti>
  <ti>
    Platform running the cross toolchain.
    Example: <c>CHOST="i686-pc-linux-gnu"</c>
  </ti>
  <ti>
    Platform hosting the cross binary.
    Example: <c>CHOST="powerpc-softfloat-linux-uclibc"</c>
  </ti>
</tr>
<tr>
  <ti>CTARGET</ti>
  <ti>
    Platform the cross toolchain produces binaries for.
    Example: <c>CTARGET="powerpc-softfloat-linux-uclibc"</c>
  </ti>
  <ti>
    Platform running the cross binary.
    Example: <c>CTARGET="powerpc-softfloat-linux-uclibc"</c>
  </ti>
</tr>
<tr>
  <ti>ROOT</ti>
  <ti colspan="2">
    Directory containing the filesystem where <c>emerge</c> should install
    packages. Default value is <c>"/"</c>.
    Example: <c>ROOT="/usr/powerpc-softfloat-linux-uclibc"</c>
  </ti>
</tr>
<tr>
  <ti>PORTAGE_CONFIGROOT</ti>
  <ti colspan="2">
    Directory containing the filesystem from which <c>emerge</c> should read
    Portage configuration files. Often you will want to point this to the same
    directory as <c>ROOT</c>. Default value is <c>"/"</c>. Example:
    <c>PORTAGE_CONFIGROOT="/usr/powerpc-softfloat-linux-uclibc"</c>
  </ti>
</tr>
</table>

<note>
The <c>PORTAGE_CONFIGROOT</c> feature was introduced in
<c>portage-2.1_pre10-r1</c>.
</note>

</body>
</section>

<section id="machine_names">
<title>Canonicalized machine names</title>
<body>

<p>
Values for <c>CBUILD</c>, <c>CHOST</c>, and <c>CTARGET</c>, such as
<c>i686-pc-linux-gnu</c> and <c>powerpc-softfloat-linux-uclibc</c>, may seem
arbitrary but they're actually machine names in canonicalized form.
Canonicalized machine names consist of up to four dash-separated fields which
must occur in the following order:
</p>

<dl>
  <dt></dt>
  <dd><b>arch-vendor-OS-libc</b></dd>
</dl>

<p>
<e>arch</e> specifies the CPU architecture, <e>vendor</e> specifies the
hardware platform or vendor, <e>OS</e> is the operating system, and <e>libc</e>
is the C library to use. Only <e>arch</e> is strictly required in all
cases—if you omit one or more of the remaining fields crossdev attempts to fill
in the missing values with its best guess. Nevertheless—for Linux machines at
least—it's good practice to specify all four fields. The <e>libc</e> field is
<e>not supported</e> for
<uri link="http://www.gentoo.org/proj/en/gentoo-alt/bsd/fbsd/index.xml">
Gentoo/FreeBSD</uri>, so for these machines it must always be omitted.
</p>

<p>
The following table lists field values known to work with crossdev, including
some special machine names which don't follow the naming convention just
described.
</p>

<table>
<tr>
  <th>CPU Architecture</th>
  <th>Hardware Platform or Vendor</th>
  <th>Operating System</th>
  <th>C Library</th>
</tr>
<tr>
  <ti>
    alpha<br/>
    arm / armeb<br/>
    bfin<br/>
    cris<br/>
    hppa / hppa1.1 / hppa2.0 / hppa64<br/>
    i386 / i486 / i586 / i686<br/>
    ia64<br/>
    m68k<br/>
    mips / mipsel / mips64 / mips64el<br/>
    nios2<br/>
    powerpc / powerpc64<br/>
    s390 / s390x<br/>
    sh / sheb / sh4 / sh4eb / sh64<br/>
    sparc / sparc64<br/>
    vax<br/>
    x86_64<br/>
  </ti>
  <ti>
    gentoo<br/>
    pc<br/>
    softfloat<br/>
    unknown<br/>
  </ti>
  <ti>
    elf<br/>
    freebsd6.0<br/>
    freebsd6.1<br/>
    linux<br/>
    uclinux<br/>
  </ti>
  <ti>
    eabi<br/>
    gnu <sup>*</sup><br/>
    gnueabi<br/>
    uclibc<br/>
  </ti>
</tr>
<tr>
  <th colspan="4">Special Machine Names</th>
</tr>
<tr>
  <ti colspan="4">
    avr<br/>
    ee / iop / dvp<br/>
    msp430<br/>
  </ti>
</tr>
</table>

<p>
<e><sup>*</sup> Specifies glibc</e>
</p>

</body>
</section>

<section>
<title>Examples used in this guide</title>
<body>

<p>
The example host system we'll use is an Athlon XP running Gentoo Linux with
glibc. This means that when building the cross toolchain, the value of
<c>CHOST</c> should be <c>i686-pc-linux-gnu</c>, and—whether building the cross
toolchain or cross binaries—<c>CBUILD</c> should <e>always</e> be set to
<c>i686-pc-linux-gnu</c>.
</p>

<p>
The example target system will be an embedded PowerPC 405 based Linux system
using <uri link="http://uclibc.org">uClibc</uri>. Since the PowerPC 405
processor has no floating point unit we should include the
<uri link="http://www.jhauser.us/arithmetic/SoftFloat.html">SoftFloat</uri>
library when building our cross GCC. This gives us a <c>CTARGET</c> value of
<c>powerpc-softfloat-linux-uclibc</c>. When building cross binaries, the value
of <c>CHOST</c> should also be <c>powerpc-softfloat-linux-uclibc</c>.
</p>

</body>
</section>

<section>
<title>Useful utilities for general cross development</title>
<body>

<ul>
  <li><c>binutils-config</c> – Manages slotted versions of binutils</li>
  <li><c>gcc-config</c> – Manges slotted versions of gcc</li>
  <li>
    <c>crossdev</c> – Builds and installs slotted toolchains for arbitrary
    GCC-supported platforms
  </li>
  <li>
    <c>qpkg</c> – Creates binary packages from cross-compiled ebuilds on the
    sysroot
  </li>
</ul>

<p>
We'll be using all of these, so now is a good time to install those which
aren't already installed by default:
</p>

<pre caption="Installing tools for cross development">
# <i>emerge --sync</i>
# <i>emerge -av portage-utils crossdev</i>
</pre>

</body>
</section>

</chapter>

<chapter>
<title>Building a Cross Toolchain</title>

<section>
<title></title>
<body>

<p>
The first thing you should know about building a toolchain is that some
versions of toolchain components refuse to work together. Exactly which
combinations are problematic is a matter that's constantly in flux as the
Portage tree evolves. The only reliable way to determine what works is to run
crossdev, adjusting individual component versions as necessary, until crossdev
completes the toolchain build successfully. Even then, the cross toolchain may
build binaries which break on the target system. Only through trial and error
and patience will you arrive at a favorable combination of all factors.
</p>

</body>
</section>

<section>
<title>Using crossdev</title>
<body>

<p>
For our <c>powerpc-softfloat-linux-uclibc</c> example we'll be using a highly
specific combination of toolchain components that is known to work at the time
of this writing.
</p>

<p>
Open a terminal and do:
</p>

<pre caption="Building a toolchain with crossdev">
# <i>USE="-*" crossdev -p -v \
--binutils 2.16.92 \
--gcc 3.4.6-r1 \
--kernel 2.6.11-r4 \
--libc 0.9.28 \
--ex-gdb \
--target powerpc-softfloat-linux-uclibc</i>
</pre>

<p>
If the output of the practice run looks correct, remove the <c>-p</c> option
and run the command again to actually build the toolchain. Crossdev will build
it in the following order:
</p>

<ul>
  <li><c>binutils</c></li>
  <li>
    <c>gcc</c> – bootstrap stage, with SoftFloat; no g++ support
  </li>
  <li><c>linux-headers</c></li>
  <li><c>uclibc</c></li>
  <li><c>gcc</c> – second stage, adding g++ support</li>
  <li><c>gdb</c> – latest version</li>
</ul>

<p>
The completed toolchain will be installed to <path>/usr/$CTARGET</path>, which
in this case is <path>/usr/powerpc-softfloat-linux-uclibc</path>. This
directory is referred to as a <e>sysroot</e>.
</p>

</body>
</section>

<section>
<title>Using gcc-config to set the crosscompiler spec on a hardened host system</title>
<body>

<p>
If the host system was using a
<uri link="http://www.gentoo.org/proj/en/hardened/primer.xml">hardened</uri>
Portage profile when the cross toolchain was built, you'll need to manually
adjust the active crosscompiler spec to use a non-hardened toolchain because by
default crossdev will set a hardened spec for the crosscompiler. If however you
do want to use the hardened toolchain for cross-compiling, you may skip to the
<uri link="#binutils_config">next section</uri>.
</p>

<pre caption="Selecting a non-hardened crosscompiler spec on a hardened host system">
# <i>gcc-config powerpc-softfloat-linux-uclibc-3.4.6-vanilla</i>
# <i>source /etc/profile</i>
</pre>

<p>
This won't affect the host system's native compiler settings. To confirm:
</p>

<pre caption="Listing installed and active compilers">
# <i>gcc-config -l</i>
</pre>

<p>
The host system's native compiler will be marked with a green asterisk
(<b>*</b>) and the crosscompiler will be marked with a light blue asterisk.
</p>

</body>
</section>

<section id="binutils_config">
<title>Using binutils-config</title>
<body>

<p>
We won't need to for the examples in this guide, but for reference, you can
manually set the active binutils for the cross toolchain using
<c>binutils-config</c>. Usage is similar to <c>gcc-config</c>; see
<c>binutils-config --help</c>. In most cases the binutils selected
automatically during a cross emerge is the one you want.
</p>

</body>
</section>

<section>
<title>Removing the cross toolchain</title>
<body>

<p>
If at any time you wish to completely remove the cross toolchain built by
crossdev, do:
</p>

<pre caption="Removing the powerpc-softfloat-linux-uclibc cross toolchain">
# <i>crossdev -C powerpc-softfloat-linux-uclibc</i>
</pre>

<note>
When prompted to confirm directory removals it's safe to answer <c>y</c> for
all.
</note>

</body>
</section>

</chapter>

<chapter id="preparing_host">
<title>Preparing the Host Environment</title>

<section>
<title>Setting up sysroot for cross development</title>
<body>

<p>
When cross developing, you'll usually want to avoid polluting the host system's
environment with the products of cross development activity, and to also
provide Portage with an alternate configuration and environment for cross
emerge operations. The simplest solution for this is to use sysroot.
</p>

<p>
For convenience let's set the environment variable <c>SYSROOT</c> on our host
system to point to the directory of the cross toolchain we'll be working with.
</p>

<pre caption="Setting the value of SYSROOT">
# <i>export SYSROOT="/usr/powerpc-softfloat-linux-uclibc"</i>
</pre>

<p>
This variable should remain set while performing the tasks outlined in this
guide. Add it to your <c>.bashrc</c> to make it persistent across terminal
sessions.
</p>

<pre caption="Adding SYSROOT to ~/.bashrc">
# <i>echo 'export SYSROOT="/usr/powerpc-softfloat-linux-uclibc"' >> ~/.bashrc</i>
</pre>

<p>
Create a <path>$SYSROOT/etc/make.conf</path> file, and assign any path-related
values in it as if <c>SYSROOT</c> were simply <path>/</path>. <c>emerge</c>
should automatically adjust these values whenever <c>ROOT</c> and
<c>PORTAGE_CONFIGROOT</c> are set to something other than <path>/</path>.
Here's the <c>make.conf</c> we'll use:
</p>

<pre caption="$SYSROOT/etc/make.conf">
<ident>ACCEPT_KEYWORDS</ident>=<const>"ppc"</const>
<ident>ARCH</ident>=<const>"ppc"</const>
<ident>CFLAGS</ident>=<const>"-Os -pipe"</const>
<ident>CHOST</ident>=<const>"powerpc-softfloat-linux-uclibc"</const>
<ident>CXXFLAGS</ident>=<const>"${CFLAGS}"</const>
<ident>GENTOO_MIRRORS</ident>=<const>"http://open-systems.ufl.edu/mirrors/gentoo \
    http://prometheus.cs.wmich.edu/gentoo \
    http://mirror.datapipe.net/gentoo \
    http://ftp.ucsb.edu/pub/mirrors/linux/gentoo/"</const>
<ident>INPUT_DEVICES</ident>=<const>"keyboard"</const>
<ident>MAKEOPTS</ident>=<const>"-j2"</const>
<ident>USE</ident>=<const>"ppc symlink"</const>
</pre>

<p>
Copy the host system's <path>/etc/make.globals</path> to the sysroot and create
the directory for local profile configuration files:
</p>

<pre caption="Creating $SYSROOT/etc/make.globals">
# <i>cp /etc/make.globals "${SYSROOT}/etc"</i>
# <i>mkdir -p "${SYSROOT}/etc/portage/profile"</i>
</pre>

<p>
We need to create a symlink for the sysroot Portage profile. Our example target
system calls for uClibc, so we'll choose a pre-existing Portage profile for a
minimal PPC uClibc base system:
</p>

<pre caption="Setting the sysroot Portage profile">
# <i>ln -sn /usr/portage/profiles/uclibc/ppc "${SYSROOT}/etc/make.profile"</i>
</pre>

</body>
</section>

<section id="xmerge">
<title>xmerge: A simple cross emerge wrapper</title>
<body>

<p>
Creating cross-compiled binaries usually entails using <c>emerge</c> in
conjunction with a few modified environment variables. This can become tedious,
so we can make things easier by handling everything in a script that wraps
<c>emerge</c>. Here's an example of such a wrapper we'll call <c>xmerge</c>:
</p>

<pre caption="xmerge">
<comment>#!/bin/bash</comment>
<ident>CBUILD</ident>=<var>$(<keyword>portageq</keyword> <keyword>envvar</keyword> <ident>CHOST</ident>)</var>
<ident>PORTAGE_CONFIGROOT</ident>=<const>"$SYSROOT"</const>
<keyword>if</keyword> [[ <const>"$1"</const> == <const>"--root"</const> ]] ; <keyword>then</keyword>
    <ident>ROOT</ident>=<const>"$2"</const>
    <keyword>shift 2</keyword>
<keyword>else</keyword>
    <ident>ROOT</ident>=<const>"$SYSROOT"</const>
<keyword>fi</keyword>
<keyword>export</keyword> <ident>CBUILD</ident> <ident>PORTAGE_CONFIGROOT</ident> <ident>ROOT</ident>

<keyword>emerge</keyword> <var>$*</var>
</pre>

<p>
Make this script executable and save it somewhere in the host system's
<c>PATH</c>.
</p>

<p>
By default <c>xmerge</c> will install ebuilds to <c>SYSROOT</c>, using the
Portage configuration located there. You may specify an alternate location by
invoking <c>xmerge</c> with the <c>--root <e>directory</e></c> option.
</p>

</body>
</section>

<section id="xkmake">
<title>xkmake: A cross kernel make wrapper</title>
<body>

<p>
We'll also want a convenience wrapper for cross kernel <c>make</c> operations:
</p>

<pre caption="xkmake">
<comment>#!/bin/bash</comment>
<keyword>make</keyword> <ident>ARCH</ident>=<const>"ppc"</const> <ident>CROSS_COMPILE</ident>=<const>"powerpc-softfloat-linux-uclibc-"</const> <ident>INSTALL_MOD_PATH</ident>=<const>"$SYSROOT"</const> <var>$*</var>
</pre>

<p>
Call this script <c>xkmake</c>, make it executable, and put it somewhere in
the host system's <c>PATH</c>. The value for <c>ARCH</c> should reflect the
target system's CPU architecture (see
<uri link="#machine_names">Canonicalized machine names</uri>) and
<c>CROSS_COMPILE</c> should be the same value as <c>CTARGET</c> but appended
with a dash.
</p>

<p>
Always use this make wrapper when working with kernel sources in the sysroot.
Usage is identical to how you would normally use <c>make</c> within the kernel
source tree.
</p>

</body>
</section>

</chapter>

<chapter>
<title>Cross-compiling Binary Packages</title>

<section>
<title>General cross-compilation using emerge</title>
<body>

<p>
Before cross emerging, you need to assign the appropriate values to <c>ROOT</c>
and if applicable, <c>PORTAGE_CONFIGROOT</c>. You might also need to modify
<c>CBUILD</c>. Our <uri link="#xmerge">xmerge</uri> script handles all of this,
as does
<uri link="http://tinderbox.x86.dev.gentoo.org/misc/cmerge">cmerge</uri>, an
<c>emerge</c> wrapper with more sophisticated capabilities.
</p>

<note>
cmerge is planned for future inclusion in the crossdev package.
</note>

<p>
For example, if we want to cross emerge ntp to the sysroot, we'd do:
</p>

<pre caption="Cross emerging ntp, the tedious way">
# <i>CBUILD="i686-pc-linux-gnu" ROOT="$SYSROOT" PORTAGE_CONFIGROOT="$SYSROOT" emerge -av ntp</i>
</pre>

<p>
Or, using our wrapper, simply:
</p>

<pre caption="Cross emerging ntp, the easy way">
# <i>xmerge -av ntp</i>
</pre>

<warn>
<c>xmerge</c> defaults to <c>ROOT=$SYSROOT</c>. Because <c>SYSROOT</c> is where
the cross toolchain is hosted on the host system, if you need to cross emerge
any toolchain components (<e>i.e.</e> gcc, system libc, binutils, kernel
headers, or gdb) for hosting on the target system, you <e>do not</e> want to use
<c>ROOT=$SYSROOT</c>; use the <c>--root</c> option to specify a different
directory instead. If you ignore this warning, you will end up overwriting your
cross toolchain with the target system's toolchain components and breaking cross
emerging completely, and the only way to fix it will be to delete your
<c>SYSROOT</c> directory and rebuild your cross toolchain.
</warn>

</body>
</section>

<section id="qpkg">
<title>Preparing cross-compiled packages for deployment with qpkg</title>
<body>

<p>
Packages cross emerged to the sysroot can easily be packaged for deployment
using <c>qpkg</c>.
</p>

<pre caption="Creating a binary package">
# <i>ROOT="$SYSROOT" qpkg -P "${SYSROOT}/var/tmp/binpkgs" ntp</i>
</pre>

<p>
The package is tarred, bzipped, and saved to
<path>$SYSROOT/var/tmp/binpkgs</path> with a <c>.tbz2</c> extension.
</p>

<note>
The <c>-P</c> option was introduced into <c>qpkg</c> in
<c>portage-utils-0.1.17</c>.
</note>

</body>
</section>

</chapter>

<chapter>
<title>Cross-compiling a Kernel</title>

<section>
<title></title>
<body>

<p>
Install the kernel sources to the sysroot.
</p>

<pre caption="Installing kernel sources for the target system">
# <i>xmerge -av gentoo-sources</i>
</pre>

<p>
Configure and cross-compile the kernel and its modules using
<uri link="#xkmake">xkmake</uri>:
</p>

<pre caption="Configuring and cross-compiling a kernel">
# <i>cd "${SYSROOT}/usr/src/linux"</i>
# <i>xkmake menuconfig</i>
# <i>xkmake</i>
</pre>

</body>
</section>

</chapter>

<chapter>
<title>Acknowledgments</title>

<section>
<title></title>
<body>

<p>
The author thanks Mike Frysinger, Ned Ludd, Peter S. Mazinger, and Diego
Pettenò for sharing their expertise during the preparation of this guide, and
Joakim Tjernlund for bug extermination.
</p>

</body>
</section>

</chapter>

<chapter>
<title>Resources</title>

<section>
<title></title>
<body>

<p>
Pre-compiled Gentoo cross toolchains for x86 host systems
</p>

<ul>
  <li><uri>http://tinderbox.dev.gentoo.org/cross-x86/</uri></li>
  <li><uri>ftp://tinderbox.dev.gentoo.org/cross-x86/</uri></li>
</ul>

<p>
DistCC Cross-compiling Guide
</p>

<ul>
  <li><uri>http://www.gentoo.org/doc/en/cross-compiling-distcc.xml</uri></li>
</ul>

<p>
Building a Gentoo/FreeBSD cross toolchain
</p>

<ul>
  <li>
    <uri>http://www.gentoo.org/proj/en/gentoo-alt/bsd/fbsd/#doc_chap5</uri>
  </li>
</ul>

</body>
</section>

</chapter>

</guide>
