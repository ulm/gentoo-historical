<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/base/embedded/handbook/cross-compiling-packages.xml,v 1.8 2009/12/15 10:41:29 vapier Exp $ -->

<sections>

<abstract>
Leverage Portage as a cross-compiling package manager.
</abstract>

<version>0.3</version>
<date>2009-09-23</date>

<section>
<title>Variables</title>
<body>

<p>
There are a few important variables that we will use throughout this section.
</p>

<table>
 <tr>
  <th>Variable</th>
  <th>Meaning</th>
 </tr>
 <tr>
  <ti>CBUILD</ti>
  <ti>Platform you are building on</ti>
 </tr>
 <tr>
  <ti>CHOST</ti>
  <ti>Platform you are compiling for</ti>
 </tr>
 <tr>
  <ti>ROOT</ti>
  <ti>The virtual <path>/</path> you are installing into</ti>
 </tr>
 <tr>
  <ti>PORTAGE_CONFIGROOT</ti>
  <ti>
    The virtual <path>/</path> portage can find its config files (like
    <path>make.conf</path>)
  </ti>
 </tr>
</table>

<p>
You can either set this all by hand, but that obviously gets quite tedious very
quickly.  A better idea is to stick these into a shell script so you can avoid
typing it out all the time.
</p>

</body>
</section>

<section>
<title>Filesystem Setup</title>
<body>

<p>
Cross-compiling a system generally involves two directory trees.  The first is
where all development files are normally installed.  This is your sysroot.  The
other tree is where only your runtime files are installed.  You emerge all of
your fun packages into your sysroot (without trimming down any files), and then
either install via binary packages or copying files by hand all the stuff you
need in your runtime tree.
</p>

<p>
The common convention is to use your <path>/usr/CTARGET/</path> tree as your
sysroot as the include/library directories in this tree are already encoded
into the gcc cross-compiler for searching.  You could use another directory
and then add custom -I/-L paths to your CPPFLAGS/LDFLAGS, but this has
historically proven to be problematic.  Yes, it works most of the time, but
the corner cases are why this method is discouraged.  In the embedded handbook,
we'll assume you're using the sysroot as your development ROOT.
</p>

<p>
For your runtime system, you'll need a much slimmer/trimmed-down setup.  The
files you remove from a normal installed package is why this tree is not
suitable for compiling against.  If you build binary packages while installing
into your sysroot, then you can use those binary packages in conjunction with
the <c>INSTALL_MASK</c> variable to trim out most things. See <c>man
make.conf</c> for more information.
</p>

</body>
</section>

<section>
<title>Intro: crossdev-wrappers</title>
<body>

<p>
These are simple wrapper scripts that will setup the environment 
variables to point to the right places for you to be able to cross 
compile using emerge. PORTAGE_CONFIGROOT and ROOT both point to the 
SYSROOT.
</p>

<pre caption="crossdev-wrappers">
# <i>echo sys-devel/crossdev-wrappers >> /etc/portage/package.keywords</i>
# <i>emerge crossdev-wrappers</i>
</pre>

<p>
We can use these tools for both installing into your development root 
(sysroot) and into your runtime root.  For the latter, simply specify 
by using the <c>--root</c> option. For example if you had merged via crossdev 
an <c>armv4tl-softfloat-linux-gnueabi</c> toolchain you would then invoke the 
command just like normal emerge. But using the <c>ctarget</c> prefix:
</p>

<pre caption="CTARGET-emerge">
# <i>armv4tl-softfloat-linux-gnueabi-emerge pkg0 pkg1 pkg2</i>
</pre>

<p>
You may want to use the <c>--root-deps=rdeps</c> option to avoid the host
dependencies from being pulled into the deptree.
</p>

<p>
By default the wrappers will link to the generic embedded profile. This 
is done to simpilify things, but the user may wish to use a more 
advanced targeted profile. In order to do that we can update the profile symlink.
</p>

<pre caption="${SYSROOT}/etc/make.profile">
# <i>ln -s /usr/portage/profiles/default/linux/arm/10.0 ${SYSROOT}/etc/make.profile</i>
</pre>

<p>
And naturally to change settings for the target system like USE flags, 
FEATURES, and VIDEO_CARDS. We would edit the standard portage config files.
</p>

<pre caption="${SYSROOT}/etc/make.conf">
# <i>$EDITOR ${SYSROOT}/etc/make.conf</i>
</pre>

<p>
Sometimes there are some additional tests we need override for configure
scripts. To do this the wrappers export a few variables to force the test to get
the answer it should. This will help prevent bloat in packages which add local
functions to workaround issues it assumes your system has because it could not
run the test. From time to time you may find you need to add additional
variables to these files in <path>/usr/share/crossdev/include/site/</path> to
get a package to compile. To figure out the variable you need to add, it's often
as simple as greping the configure script for the autoconf variable and adding
it to the appropriate target file. This becomes obvious after the first few
times of doing it.
</p>

</body>
</section>

<section>
<title>Uninstall</title>
<body>

<p>
If you want to uninstall and delete your work, then you can safely remove the
sysroot tree without affecting any native packages.  See also the section in
the <uri link="cross-compiler.xml">crossdev guide</uri> about uninstalling.
</p>

</body>
</section>

</sections>
