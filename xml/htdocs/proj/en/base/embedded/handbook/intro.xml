<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/base/embedded/handbook/intro.xml,v 1.6 2010/04/13 18:45:31 nightmorph Exp $ -->

<sections>

<abstract>
An introduction into the world of embedded, cross-compilers, and dragons.
</abstract>

<version>0.3</version>
<date>2010-04-13</date>

<section>
<title>Overview</title>
<body>

<p>
Cross development has traditionally been a black art, requiring a lot of
research, trial and error, and perseverance.  Intrepid developers face a
shortage of documentation and the lack of mature, comprehensive open source
toolkits for multi-platform cross development.  Ongoing work by the
<uri link="/proj/en/base/embedded/">Embedded Gentoo project</uri>, the
<mail link="toolchain@gentoo.org">Gentoo Toolchain
herd</mail>, and other contributors is yielding a Gentoo-based development
platform that greatly simplifies cross development.
</p>

</body>
</section>

<section>
<title>The Toolchain</title>
<body>

<p>
The term "toolchain" refers to the collection of packages used to build up a
system (the "tools" which are used in the "chain" of events to take some input
and produce some output).  It is a loose definition in terms of what packages
exactly are considered part of the toolchain, but for the sake of keeping
things simple, we will consider the components that are needed to compile code
into something fun and usable.
</p>

<p>
Your typical toolchain is therefore composed of the following:
</p>

<ul>
  <li><c>binutils</c> - Essential utilities for handling binaries (includes assembler and linker)</li>
  <li><c>gcc</c> - The GNU Compiler Collection (the C and C++ compiler)</li>
  <li><c>glibc</c> or <c>uclibc</c> or <c>newlib</c> - The system C Library</li>
  <li><c>linux-headers</c> - Kernel headers needed by the system C Library</li>
  <li><c>gdb</c> - The GNU debugger</li>
</ul>

<p>
All proper Gentoo systems have a toolchain installed as part of the base
system. This toolchain is configured to build binaries native to its host
platform.
</p>

<p>
In order to build binaries on the host system for a non-native platform you'll
need a special toolchain - a so-called <e>cross toolchain</e> - which can
target that particular platform.  Gentoo provides a simple but powerful tool
called <c>crossdev</c> for this purpose.  Crossdev can build and install
arbitrary GCC-supported cross toolchains on the host system, and because
Gentoo installs toolchain files into target-specific directories the toolchains
built by crossdev won't interfere with the host's native toolchain.
</p>

</body>
</section>

<section>
<title>Environment Variables</title>
<body>

<p>
Certain environment variables used by the Gentoo toolchain and Portage can
thoroughly confuse developers inexperienced with cross development. The
following table explains some tricky variables and provides sample values based
on the cross development examples presented in this guide. See <uri
link="#terminology">More Terminology and Variables</uri> for more
unusual variables and related concepts.
</p>

<table>
 <tr>
  <th>Variable</th>
  <th>Meaning When Building Cross-Toolchain</th>
  <th>Meaning When Building Cross-Binaries</th>
 </tr>
 <tr>
  <th>CBUILD</th>
  <ti>Platform you are building on</ti>
  <ti>Platform you are building on</ti>
 </tr>
 <tr>
  <th>CHOST</th>
  <ti>Platform the cross-toolchain will run on</ti>
  <ti>Platform the binaries built by cross-toolchain will run on</ti>
 </tr>
 <tr>
  <th>CTARGET</th>
  <ti>Platform the binaries built by cross-toolchain will run on</ti>
  <ti>
    Platform the binaries built by cross-toolchain will run on. Redundant, but
    there's no harm in setting this, and a few binaries do like it.
  </ti>
 </tr>
 <tr>
  <th>ROOT</th>
  <ti colspan="2">Path to the virtual root (<path>/</path>) you are installing into</ti>
 </tr>
 <tr>
  <th>PORTAGE_CONFIGROOT</th>
  <ti colspan="2">Path to the virtual root (<path>/</path>) portage can find its config files (like <path>/etc/make.conf</path>)</ti>
 </tr>
</table>

<p>
Say we have an AMD64 desktop as our normal Gentoo machine and we have an ARM
PDA we wanted to develop for, the above table would look like:
</p>

<table>
 <tr>
  <th>Variable</th>
  <th>Value For Building Cross-Toolchain</th>
  <th>Value For Building Cross-Binaries</th>
 </tr>
 <tr>
  <th>CBUILD</th>
  <ti><c>x86_64-pc-linux-gnu</c></ti>
  <ti><c>x86_64-pc-linux-gnu</c></ti>
 </tr>
 <tr>
  <th>CHOST</th>
  <ti><c>x86_64-pc-linux-gnu</c></ti>
  <ti><c>arm-unknown-linux-gnu</c></ti>
 </tr>
 <tr>
  <th>CTARGET</th>
  <ti><c>arm-unknown-linux-gnu</c></ti>
  <ti><e>not set</e></ti>
 </tr>
 <tr>
  <th>ROOT</th>
  <ti><e>not set -- defaults to <path>/</path></e></ti>
  <ti><c>/path/where/you/install</c></ti>
 </tr>
 <tr>
  <th>PORTAGE_CONFIGROOT</th>
  <ti><e>not set -- defaults to <path>/</path></e></ti>
  <ti><c>/path/where/your/portage/env/for/arm/pda/is</c></ti>
 </tr>
</table>

</body>
</section>

<section id="terminology">
<title>More Terminology and Variables</title>
<body>

<dl>
<dt><c>canadian cross</c></dt>
<dd>
  The process of building a cross-compiler which will run on a different machine
  from the one it was compiled on (CBUILD != CHOST &amp;&amp; CHOST !=
  CTARGET)
</dd>

<dt><c>sysroot: system root</c></dt>
<dd>
  The root directory a compiler uses to find its standard headers and
  libraries
</dd>

<dt><c>hardfloat</c></dt>
<dd>
  The system has a hardware Floating Point Unit (FPU) to handle floating point
  math
</dd>

<dt><c>softfloat</c></dt>
<dd>
  The system lacks a hardware FPU so all floating point operations are
  approximated with fixed point math
</dd>

<dt><c>PIE</c></dt>
<dd>Position Independent Executable (-fPIE -pie)</dd>

<dt><c>PIC</c></dt>
<dd>Position Independent Code (-fPIC)</dd>

<dt><c>CRT</c></dt>
<dd>C RunTime</dd>

<dt><c>Tuple</c></dt>
<dd>
  For crossdev, this is defined as a string in the <c>ARCH-VENDOR-OS-LIBC</c>
  format. See <c>crossdev -t help</c> for information on how exactly this string
  can be completed.
</dd>
</dl>

</body>
</section>
</sections>
