<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/base/embedded/handbook/cross-compiler.xml,v 1.5 2007/12/24 20:26:35 vapier Exp $ -->

<sections>

<abstract>
Build a cross-compiler on your machine!
</abstract>

<version>0.1</version>
<date>2007-08-12</date>

<section>
<title>Overview</title>
<body>

<p>
The first thing you should know about building a toolchain is that some
versions of toolchain components refuse to work together.  Exactly which
combinations are problematic is a matter that's constantly in flux as the
Portage tree evolves.  The only reliable way to determine what works is to run
crossdev, adjusting individual component versions as necessary, until crossdev
completes the toolchain build successfully.  Even then, the cross toolchain
may build binaries which break on the target system.  Only through trial and
error and patience will you arrive at a favorable combination of all factors.
</p>

<p>
Also, do not worry about the cross-compiler interfering with your native build
system.  All of the toolchain packages are designed such that they are isolated
from each other based on the target.  This way you can install cross-compilers
for whatever architecture you wish without breaking the rest of your system.
</p>

</body>
</section>

<section>
<title>crossdev</title>

	<subsection>
	<title>Intro</title>
	<body>
	<p>
	Generating a cross-compiler by hand is a long and painful process.  This is
	why it has been fully integrated into Gentoo!  A frontend called
	<c>crossdev</c> (which you can install with <c>emerge crossdev</c>) will
	run <c>emerge</c> with all of the proper environment variables and install
	all the right packages to generate arbitrary cross-compilers based on your
	needs.
	</p>
	</body>
	</subsection>

	<subsection>
	<title>Installing</title>
	<body>
	<p>
	The first step is to select the proper tuple for your target.  Here we will
	assume you want to build a cross-compiler for the SH4 (SuperH) process with
	glibc running on Linux.  We will do this on a PowerPC machine.
	</p>

<pre caption="Generating SH4 cross-compiler">
# <i>crossdev --target sh4-unknown-linux-gnu</i>
-----------------------------------------------------------------------------------------------------
 * Host Portage ARCH:     ppc
 * Target Portage ARCH:   sh
 * Target System:         sh4-unknown-linux-gnu
 * Stage:                 4 (C/C++ compiler)

 * binutils:              binutils-[latest]
 * gcc:                   gcc-[latest]
 * headers:               linux-headers-[latest]
 * libc:                  glibc-[latest]

 * PORTDIR_OVERLAY:       /usr/local/portage
 * PORT_LOGDIR:           /var/log/portage
 * PKGDIR:                /usr/portage/packages/powerpc-unknown-linux-gnu/cross/sh4-unknown-linux-gnu
 * PORTAGE_TMPDIR:        /var/tmp/cross/sh4-unknown-linux-gnu
  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  
 * Forcing the latest versions of {binutils,gcc}-config/gnuconfig ...                          [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-binutils.log
 * Emerging cross-binutils ...                                                                 [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-gcc-stage1.log
 * Emerging cross-gcc-stage1 ...                                                               [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-linux-headers.log
 * Emerging cross-linux-headers ...                                                            [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-glibc.log
 * Emerging cross-glibc ...                                                                    [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-gcc-stage2.log
 * Emerging cross-gcc-stage2 ...                                                               [ ok ]
</pre>
	</body>
	</subsection>

	<subsection>
	<title>Quick Test</title>
	<body>
	<p>
	If everything goes as planned, you should have a shiny new compiler on your
	machine.  Give it a spin!
	</p>

<pre caption="Using SH4 cross-compiler">
$ <i>sh4-unknown-linux-gnu-gcc --version</i>
sh4-unknown-linux-gnu-gcc (GCC) 4.2.0 (Gentoo 4.2.0 p1.4)
Copyright (C) 2007 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
$ <i>echo 'int main(){return 0;}' > sh4-test.c</i>
$ <i>sh4-unknown-linux-gnu-gcc -Wall sh4-test.c -o sh4-test</i>
$ <i>file sh4-test</i>
sh4-test: ELF 32-bit LSB executable, Renesas SH, version 1 (SYSV), for GNU/Linux 2.6.9, dynamically linked (uses shared libs), not stripped
</pre>

	<p>
	If the crossdev command failed, you have the log file which you can review
	to see if the problem is local.  If you're unable to fix the issue, you're
	welcome to file a bug in our bugzilla.  See the
	<uri link="communication.xml">Communication page</uri> for more information.
	</p>
	</body>
	</subsection>

	<subsection>
	<title>Uninstalling</title>
	<body>
	<p>
	To uninstall a toolchain, simply use the <c>--clean</c> option.  If you
	modified the sysroot by hand, you'll be prompted to delete things inside
	of it, so you may want to pipe <c>yes |</c> into the command.
	</p>

<pre caption="Uninstalling cross-compiler">
# <i>crossdev --clean sh4-unknown-linux-gnu</i>
</pre>

	<p>
	In case you didn't already notice, deleting any and all files in the
	<path>/usr/CTARGET/</path> directory is completely safe.
	</p>

	</body>
	</subsection>

	<subsection>
	<title>Options</title>
	<body>
	<p>
	Obviously crossdev can do a lot more, so to find out more, simply run
	<c>crossdev --help</c> or <c>man crossdev</c>.
	</p>
	</body>
	</subsection>
</section>

<section>
<title>Cross-compiler Internals</title>

<subsection>
<body>
<warn>
This section is included for posterity and in the hopes that others will find
it useful.  The target audience is people who (for some stupid reason or
another) really really want to create their own cross compiler with
binutils/(glibc|uclibc)/gcc all by themselves.  This section is <b>not</b>
meant to cover/document/whatever the myriad of build failures you are likely
to see along the way.  If you need such help, see the
<uri link="the-more-you-know.xml">Beyond section</uri> in the handbook for
some pointers.  You certainly should not bug me or anyone else in Gentoo.
</warn>

<warn>
If you're still reading, you should really check out the crosstool project
(refer to the <uri link="the-more-you-know.xml">Beyond section</uri>) as
that provides a distribution independent method for generating cross-compilers.
While it does kind of suck (imo), it is certainly the best (and really only)
option out there for creating cross-compilers.
</warn>
</body>
</subsection>

<subsection>
	<title>Overview</title>
	<body>
	<p>
	There are generally two ways to build up your cross-compiler.  The
	"accepted" way, and the cheater's shortcut.
	</p>

	<p>
	The current "accepted" way is:
	</p>
	<ol>
		<li>binutils</li>
		<li>kernel headers</li>
		<li>libc headers</li>
		<li>gcc stage1 (c-only)</li>
		<li>libc</li>
		<li>gcc stage2 (c/c++/etc...)</li>
	</ol>

	<p>
	The cheater's shortcut is:
	</p>
	<ol>
		<li>binutils</li>
		<li>kernel headers</li>
		<li>gcc stage1 (c-only)</li>
		<li>libc</li>
		<li>gcc stage2 (c/c++/etc...)</li>
	</ol>

	<p>
	The reason people are keen on the shortcut is that the libc headers step
	tends to take quite a while, especially on slower machines.  It can also be
	kind of a pain to setup kernel/libc headers without a usuable cross
	compiler.  Note though that if you seek help with cross-compilers, upstream
	projects will not want to help you if you took the shortcut.
	</p>

	<p>
	Also note that the shortcut requires the gcc stage1 to be "crippled".  Since
	you're building without headers, you cannot enable the sysroot option nor
	can you build up proper gcc libs.  This is OK if the only thing you use the
	stage1 is building the C library and a kernel, but beyond that you need a
	nice sysroot based compiler.
	</p>

	<p>
	Below I will describe the "accepted" way as the steps are pretty much the
	same.  You just need some extra patches for gcc in order to take the
	shortcut.
	</p>
	</body>
</subsection>

<subsection>
	<title>Sysroot</title>
	<body>
	<p>
	We will be cross-compiling using the sysroot method.  But wtf is sysroot ?
	</p>

	<p>
	From the gcc docs:<br/>
	Tells GCC to consider dir as the root of a tree that contains a (subset of)
	the root filesystem of the target operating system. Target system headers,
	libraries and run-time object files will be searched in there.
	</p>

	<p>
	The top level dir is commonly rooted in /usr/$CTARGET
	</p>

<pre caption="typical sysroot layout">
/usr/$CTARGET/
|-- bin/
|-- lib/            critical runtime libs (libc/ldso/etc...)
`-- usr/
    |-- include/    development headers
    |   |-- linux/      like the linux kernel
    |   `-- asm/        like the arch-specific
    `-- lib/        non critical runtime libs / development libs
</pre>

	<p>
	As you can see, it's just like the directory setup / but in /usr/$CTARGET.
	This setup is of course not an accident but designed on purpose so you can
	easily migrate applications/libraries out of /usr/$CTARGET and into / on
	your target board.  If you wanted, you could even be lazy and use the
	/usr/$CTARGET as a quick NFS root!
	</p>

	<note>
	Non-sysroot note:<br/>
	The old style of cross-compilers was to use --prefix=/usr/$CTARGET.  If you
	are using versions of binutils/gcc that predate sysroot support, you may
	have to do just this.  I will not document this because (1) you should not
	be using such old/crusty/busted versions and (2) it's quite a huge pita
	compared to sysroot.
	</note>
	</body>
</subsection>

<subsection>
	<title>Binutils</title>
	<body>
	<p>
	Grab the latest binutils tarball and unpack it.
	</p>

	<p>
	The --disable-werror configure option is to prevent binutils from aborting
	the compile due to warnings.  Great feature for developers, pita for users.
	</p>

<pre caption="configure and build binutils">
$ <i>./configure \
	--target=$CTARGET \
	--prefix=/usr \
	--with-sysroot=/usr/$CTARGET \
	--disable-werror</i>
$ <i>make</i>
$ <i>make install DESTDIR=$PWD/install-root</i>
</pre>

	<p>
	The reason we install into the localdir is so we can remove crap that
	doesn't belong.  For example, a normal install will give us
	/usr/lib/libiberty.a which doesn't belong in our host /usr/lib.  So
	clean out stuff first:
	</p>

<pre caption="cleaning binutils">
$ <i>rm -rf install-root/usr/{info,lib,man,share}</i>
</pre>

	<p>
	And install what's left:
	</p>

<pre caption="install binutils">
# <i>cp -a install-root/* /</i>
</pre>
	</body>
</subsection>

<subsection>
	<title>Kernel headers</title>
	<body>
	<p>
	Grab the latest Linux tarball and unpack it.  There are two ways of
	installing the kernel headers: sanitized and unsanitized.  The former
	is clearly better (but requires a recent version of the Linux kernel),
	but we'll quickly cover both.
	</p>

	<note>
	Clearly you'll have to replace $ARCH with a value that makes sense
	for your platform.
	</note>

<pre caption="building/installing unsanitized headers">
$ <i>yes "" | make ARCH=$ARCH oldconfig prepare</i>
# <i>mkdir -p /usr/$CTARGET/usr/include</i>
# <i>cp -a include/linux include/asm-generic /usr/$CTARGET/usr/include/</i>
# <i>cp -a include/asm-$ARCH /usr/$CTARGET/usr/include/asm</i>
</pre>

<pre caption="building/installing sanitized headers">
# <i>make ARCH=$ARCH headers_install INSTALL_HDR_PATH=/usr/$CTARGET/usr</i>
</pre>
	</body>
</subsection>

<subsection>
	<title>System libc headers</title>
	<body>
	<p>
	Grab the latest glibc tarball and unpack it.  Glibc is picky, so you'll
	have to compile in a dir separate from the source code.
	</p>

<pre caption="building/installing glibc headers">
$ <i>mkdir build</i>
$ <i>cd build</i>
$ <i>../configure \
	--host=$CTARGET \
	--prefix=/usr \
	--with-headers=/usr/$CTARGET/usr/include \
	--disable-sanity-checks</i>
# <i>make -k install-headers install_root=/usr/$CTARGET</i>
</pre>

	<p>
	Glibc sucks at life so you have to do a few things by hand:
	</p>

<pre caption="help glibc">
# <i>mkdir -p /usr/$CTARGET/usr/include/gnu</i>
# <i>touch /usr/$CTARGET/usr/include/gnu/stubs.h</i>
# <i>cp bits/stdio_lim.h /usr/$CTARGET/usr/include/bits/</i>
</pre>
	</body>
</subsection>

<subsection>
	<title>GCC Stage 1 (C only)</title>
	<body>
	<p>
	We first have to help gcc find the current libc headers.
	</p>

<pre caption="help gcc">
# <i>ln -s usr/include /usr/$CTARGET/sys-include</i>
</pre>

	<p>
	Then grab the latest gcc tarball and unpack it.
	</p>

<pre caption="building gcc stage 1">
$ <i>mkdir build</i>
$ <i>cd build</i>
$ <i>../configure \
	--target=$CTARGET \
	--prefix=/usr \
	--with-sysroot=/usr/$CTARGET \
	--enable-languages=c \
	--disable-shared \
	--disable-checking \
	--disable-werror \
	--disable-libmudflap \
	--disable-libssp</i>
$ <i>make</i>
$ <i>make install DESTDIR=$PWD/install-root</i>
</pre>

	<p>
	Same as binutils, gcc leaves some stuff behind we don't want.
	</p>

<pre caption="cleaning gcc stage 1">
$ <i>rm -rf install-root/usr/{info,include,lib/libiberty.a,man,share}</i>
</pre>

	<p>
	Then install what's left (everything should be in CTARGET specific
	directories which prevents overwriting your host files):
	</p>

<pre caption="installing gcc stage 1">
# <i>cp -a install-root/* /</i>
</pre>
	</body>
</subsection>

<subsection>
	<title>System libc</title>
	<body>
	<p>
	Nuke the old glibc build dir and recreate it.
	</p>

<pre caption="building/installing glibc">
$ <i>rm -rf build</i>
$ <i>mkdir build</i>
$ <i>cd build</i>
$ <i>../configure \
	--host=$CTARGET \
	--prefix=/usr</i>
$ <i>make</i>
# <i>make install install_root=/usr/$CTARGET</i>
</pre>
	</body>
</subsection>

<subsection>
	<title>GCC Stage 2 (All frontends)</title>
	<body>
	<p>
	Build up a full GCC now.  Select whichever compiler frontends you like,
	we'll just do C/C++ for simplicity.
	</p>

<pre caption="building/installing gcc stage 2">
$ <i>./configure \
	--target=$CTARGET \
	--prefix=/usr \
	--with-sysroot=/usr/$CTARGET \
	--enable-languages=c,c++ \
	--enable-shared \
	--disable-checking \
	--disable-werror</i>
$ <i>make</i>
# <i>make install</i>
</pre>
	</body>
</subsection>

<subsection>
	<title>Core Runtime Files</title>
	<body>
	<p>
	There are many random core runtime files that people wonder what they may
	be for.  Let's explain.
	</p>

	<table>
	<tr>
	 <th colspan="2">Files provided by glibc</th>
	</tr>
	<tr>
	 <th>File</th>
	 <th>Purpose</th>
	</tr>
	<tr>
	 <ti>crt0.o</ti>
	 <ti>Older style of the initial runtime code ?  No one generates this anymore.</ti>
	</tr>
	<tr>
	 <ti>crt1.o</ti>
	 <ti>Newer style of the initial runtime code.  Contains the _start symbol which sets up the env with argc/argv/libc _init/libc _fini before jumping to the libc main.  glibc calls this file 'start.S'.</ti>
	</tr>
	<tr>
	 <ti>crti.o</ti>
	 <ti>Defines the function prolog; _init in the .init section and _fini in the .fini section.  glibc calls this 'initfini.c'.</ti>
	</tr>
	<tr>
	 <ti>crtn.o</ti>
	 <ti>Defines the function epilog.  glibc calls this 'initfini.c'.</ti>
	</tr>
	<tr>
	 <ti>Scrt1.o</ti>
	 <ti>Used in place of crt1.o when generating PIEs.</ti>
	</tr>
	<tr>
	 <ti>gcrt1.o</ti>
	 <ti>Used in place of crt1.o when generating code with profiling information.  Compile with -pg.  Produces output suitable for the gprof util.</ti>
	</tr>
	<tr>
	 <ti>Mcrt1.o</ti>
	 <ti>Like gcrt1.o, but is used with the prof utility.  glibc installs this as a dummy file as it's useless on linux systems.</ti>
	</tr>
	</table>

	<table>
	<tr>
	 <th colspan="2">Files provided by GCC</th>
	</tr>
	<tr>
	 <th>File</th>
	 <th>Purpose</th>
	</tr>
	<tr>
	 <ti>crtbegin.o</ti>
	 <ti>GCC uses this to find the start of the constructors.</ti>
	</tr>
	<tr>
	 <ti>crtbeginS.o</ti>
	 <ti>Used in place of crtbegin.o when generating shared objects/PIEs.</ti>
	</tr>
	<tr>
	 <ti>crtbeginT.o</ti>
	 <ti>Used in place of crtbegin.o when generating static executables.</ti>
	</tr>
	<tr>
	 <ti>crtend.o</ti>
	 <ti>GCC uses this to find the start of the destructors.</ti>
	</tr>
	<tr>
	 <ti>crtendS.o</ti>
	 <ti>Used in place of crtendS.o when generating shared objects/PIEs.</ti>
	</tr>
	</table>

	<p>
	The general linking order:
	</p>
<pre caption="general linking order">
... crt1.o crti.o crtbegin.o [-L paths] [user objects] [gcc libs] [C libs] [gcc libs] crtend.o crtn.o	
</pre>
	</body>
</subsection>

</section>

</sections>
