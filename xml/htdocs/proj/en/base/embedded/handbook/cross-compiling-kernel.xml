<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/base/embedded/handbook/cross-compiling-kernel.xml,v 1.1 2007/08/26 13:21:49 vapier Exp $ -->

<sections>

<abstract>
Cross-compile a kernel for you system with flair!
</abstract>

<version>0.1</version>
<date>2007-08-12</date>

<section>
<title>Sources</title>
<body>

<p>
First install the relevant kernel sources.  You can use a sources package from
the Gentoo portage tree or fetch your own from
<uri link="http://kernel.org/">The Linux Kernel Archive</uri> or some other
random source.  The method for actually compiling is all the same.
</p>

<p>
You should install the kernel into the sysroot so that if you want to
cross-compile packages which include kernel modules, the process should be
transparent.  If you don't need such packages, then of course the actual place
where you build the kernel does not matter.  Some people build all their
kernels in <path>/usr/src/</path> for example.
</p>

<pre caption="Install gentoo-sources into sysroot">
# <i>xmerge -av gentoo-sources</i>
</pre>

</body>
</section>

<section>
<title>Setup Cross-compiling</title>
<body>

<p>
There are two fundamental variables that the kernel uses to select the target
architecture.  Normally these values are guessed based on your build
environment, but of course that environment here does not match our target
embedded system, so we'll need to override them.  The variables in question
are <c>ARCH</c> and <c>CROSS_COMPILE</c>.  The default values for both are
found in the toplevel Makefile and the values of both may be overriden on
the command line.
</p>

<p>
The <c>ARCH</c> variable is the architecture you're targetting as the kernel
knows it.  So while portage and other people may use "x86", the kernel uses
"i386".  Peek in the <path>arch/</path> subdirectory real quick to figure
out what you want to use.
</p>

<p>
Hopefully the <c>CROSS_COMPILE</c> variable is pretty self-explanatory.  Set
this to the prefix of your toolchain (including the trailing dash "<c>-</c>").
So if your toolchain is invoked as say <c>x86_64-pc-linux-gnu-gcc</c>, just
chop off that trailing <c>gcc</c> and that's what you use:
<c>x86_64-pc-linux-gnu-</c>.
</p>

<p>
There are really two ways you can setup the system.  You can modify the
toplevel Makefile or you can override the relevant variables on the command
line.  How you do it is largely a matter of taste, so we'll cover both.  Pick
one of the following.
</p>

<pre caption="Editing Toplevel Makefile">
<comment># This is what the vanilla Makefile looks like</comment>
ARCH            ?= $(SUBARCH)
CROSS_COMPILE   ?= 

<comment># Set the ARCH and CROSS_COMPILE default values</comment>
ARCH            ?= <i>arm</i>
CROSS_COMPILE   ?= <i>arm-unknown-linux-gnu-</i>
</pre>

<pre caption="Overriding On The Commandline">
# <i>make ARCH=arm CROSS_COMPILE=arm-unknown-linux-gnu- ....</i>
</pre>

<p>
You can use a little helper script if you need to hop between different kernel
trees at the sametime.  We'll call this script <c>xkmake</c>.
</p>

<pre caption="xkmake">
#!/bin/sh
exec make ARCH="arm" CROSS_COMPILE="arm-unknown-linux-gnu-" INSTALL_MOD_PATH="${SYSROOT}" "$@"
</pre>

<p>
So now when you want to build a kernel or do anything else, you just execute
<c>xkmake</c> in place of <c>make</c>.
</p>

</body>
</section>

<section>
<title>Configure and Compile</title>
<body>

<p>
At this point, configuring and compiling the kernel is like any other kernel,
so we won't go into depth as there are plenty of HOWTOs and guides out there
which can treat the subject in much greater detail.
</p>

<pre caption="Configure and Compile">
# <i>cd "${SYSROOT}/usr/src/linux"</i>
# <i>xkmake menuconfig</i>
# <i>xkmake</i>
</pre>

</body>
</section>

</sections>
