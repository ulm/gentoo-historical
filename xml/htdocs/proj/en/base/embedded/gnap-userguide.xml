<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/en/base/embedded/gnap-userguide.xml">
<title>Gentoo Network APpliance User Guide</title>
<author title="Author">
  <mail link="koon@gentoo.org">Koon</mail>
</author>

<abstract>
This document describes what GNAP is, how to build it, and how
to use it.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->
<license/>

<version>1.5.1</version>
<date>April 21, 2005</date>

<chapter>
<title>Why GNAP ?</title>
<section>
<title>The name</title>
<body>

<p>
The acronym GNAP stands for Gentoo Network APpliance.
</p>

</body>
</section>
<section>
<title>The need</title>
<body>

<p>
GNAP comes from the need to build old-PC based network
appliances like internal routers or firewalls without the need for a complete
installation. I have a bunch of old PCs with fragile components and want to be
able to easily switch PCs in case of failure. Using removable media with a
burned-on configuration is the most flexible way I found. When it fails,
just put the media on another machine.
</p>

<p>
I started by using 
<uri link="http://leaf.sourceforge.net/mod.php?mod=userpage&amp;menu=910&amp;page_id=36">LEAF Bering-uClibc</uri>
floppy-based firewalls but was quickly
undermined by problems: media fragility, difficulty to automate creation of
floppies and lack of easy extensibility.
I switched to LEAF Bering-uClibc
<uri link="http://leaf.sourceforge.net/doc/guide/bubooting.html#id2572755">CDROM-based configurations</uri>,
with a web-based automated ISO generation. This solved most of the
problems but the extensibility problems remain, and maintaining the web-app
was becoming a nightmare.
</p>

<p>
I finally chose to leverage 
<uri link="http://www.gentoo.org/proj/en/releng/catalyst/">Gentoo Catalyst</uri>
power to build custom LiveCDs,
solving both the extensibility problem and the non-standard solution
maintenance. The idea was to have a generic LiveCD core that I could build once
and use everywhere, and burn on the CD a specific configuration overlay to
customize the appliance role. This simplifies CD generation as you don't have
to go through the whole Catalyst process to customize a specific LiveCD.
</p>

</body>
</section>
</chapter>
<chapter>
<title>How to use GNAP to build a custom network appliance LiveCD</title>
<section>
<title>Installation</title>
<body>

<p>
GNAP is now available through Portage. Simply emerge it using:
</p>

<pre caption="GNAP installation">
# emerge gnap
</pre>

<warn>
GNAP might only be available in "~x86". Adjust your
<path>/etc/portage/package.keywords</path> file if needed.
</warn>

<note>
This will fetch the GNAP core file, which is usually quite large (~14Mb). You
can set the "minimal" USE flag if you don't want to download the GNAP core,
but only install the GNAP tools.
</note>

</body>
</section>

<section>
<title>How it works</title>
<body>

<p>
The gnap_overlay script takes a GNAP core tarball and one or more overlay
sources (directories or conflet files) and either produces a bootable LiveCD
.iso file, or writes a bootable filesystem to a removable disk device:
</p>

<figure link="gnap_overlay.png" short="gnap_overlay principle"
        caption="How gnap_overlay works"/>

</body>
</section>
<section>
<title>The overlay.conf file</title>
<body>

<p>
The overlay.conf file controls general customization options. It must be
present either in an overlay source (as etc/overlay.conf) or directly
specified as a <c>-c</c> parameter. In this file you can decide localization
options and which features should be enabled on your customized LiveCD:
</p>

<table>
<tr>
 <th>Option</th>
 <th>Values</th>
 <th>Default</th>
</tr>
<tr>
 <ti>TIMEZONE</ti>
 <ti>The <uri link="http://leaf.sourceforge.net/doc/guide/buci-tz.html">uclibc-compliant timezone code</uri>.</ti> 
 <ti>empty (UTC)</ti>
</tr>
<tr>
 <ti>KEYMAP</ti>
 <ti>Console keymap value. Example: <c>fr</c></ti>
 <ti><c>us</c></ti>
</tr>
<tr>
 <ti>NBCARDS</ti>
 <ti>Number of connected network cards you want to start.</ti>
 <ti><c>1</c></ti>
</tr>
<tr>
 <ti>IP_RELAY</ti>
 <ti>Should IP relaying be active at startup ?</ti>
 <ti><c>no</c></ti>
</tr>
<tr>
 <ti>NET_CONFIG</ti>
 <ti>Is network configured by static files or DHCP. Example: <c>dhcp</c></ti>
 <ti><c>static</c></ti>
</tr>
<tr>
 <ti>USE_PPPOE</ti>
 <ti>Set to <c>yes</c> to have the rp-pppoe daemon run at startup.</ti>
 <ti><c>no</c> (do not run)</ti>
</tr>
<tr>
 <ti>USE_SSH</ti>
 <ti>Set to <c>yes</c> to have the OpenSSH daemon run at startup. Note that
     if keys are not generated they will be during the first startup.</ti>
 <ti><c>no</c> (do not run)</ti>
</tr>
<tr>
 <ti>USE_FW</ti>
 <ti>Set to <c>yes</c> to have a firewall script run at startup.
     See FW_TYPE option. Note that you should overlay files in the
     <path>etc/shorewall</path> or <path>etc/firehol</path> directory to
     configure non-default options.</ti>
 <ti><c>no</c> (do not run)</ti>
</tr>
<tr>
 <ti>FW_TYPE</ti>
 <ti>Set to <c>shorewall</c> or <c>firehol</c> depending on the firewall
     system you want to use.</ti>
 <ti><c>shorewall</c></ti>
</tr>
<tr>
 <ti>USE_TC</ti>
 <ti>Set to <c>yes</c> to have a traffic control script run at startup.
     See the TC_TYPE option. Note that you should overlay files in the
     <path>etc/cbqinit</path> or <path>etc/htbinit</path>
     directory with the configuration files to use.</ti>
 <ti><c>no</c> (do not run)</ti>
</tr>
<tr>
 <ti>TC_TYPE</ti>
 <ti>Set to <c>cbqinit</c> or <c>htbinit</c> depending on the traffic
     control system you want to use.</ti>
 <ti><c>cbqinit</c></ti>
</tr>
<tr>
 <ti>USE_VPN</ti>
 <ti>Set to <c>yes</c> to have the OpenVPN daemon run at startup. Note that
     you should overlay files in the <path>etc/openvpn</path> directory with
     the OpenVPN configuration files to use.</ti>
 <ti><c>no</c> (do not run)</ti>
</tr>
<tr>
 <ti>USE_DNSDHCP</ti>
 <ti>Set to <c>yes</c> to have the DNSMasq daemon run at startup. Note that
     you should overlay a <path>etc/dnsmasq.conf</path> file with
     the DNSMasq configuration file to use.</ti>
 <ti><c>no</c> (do not run)</ti>
</tr>
<tr>
 <ti>USE_HTTP</ti>
 <ti>Set to <c>yes</c> to have the Boa daemon run at startup. Note that
     you should overlay a <path>etc/boa</path> directory with
     the Boa configuration files to use.</ti>
 <ti><c>no</c> (do not run)</ti>
</tr>
<tr>
 <ti>NTPSERVER</ti>
 <ti>The name of the NTP server to use as a time synchronisation source.</ti>
 <ti>empty (do not synchronise time using NTP)</ti>
</tr>
</table>
</body>
</section>
<section>
<title>Overlay sources</title>
<body>

<p>
Starting with version 1.5, it's possible to specify multiple overlay sources
(<c>-o</c> options). An overlay source can either be a directory or a tar.bz2 
file containing a directory (called a conflet). Overlay directories and
conflets contain files that will be used to replace default files on the
LiveCD root filesystem just after startup.
</p>

<p>
Files commonly replaced include <path>etc/conf.d/hostname</path> (to set a
host name), <path>etc/shadow</path> (to set a root password) or
<path>etc/conf.d/net</path> (to set network configuration).
In the <path>/usr/lib/gnap/examples/</path> directory, you will find
typical overlay directories for various roles and example conflets.
</p>

<note>
The GNAP overlay script will ignore CVS/ subdirectories so you can easily
use CVS to control versions of your overlay files without pulling unnecessary
fat into tour GNAP system.
</note>

</body>
</section>
<section>
<title>Generating and burning</title>
<body>

<p>
When your overlay is ready, you should use <c>gnap_overlay</c> to produce
a bootable ISO file (no need to be root).
For example, to build an <path>myfirewall.iso</path> LiveCD using the
<path>overlays/myfirewall</path> overlay directory:
</p>

<pre caption="Example of gnap_overlay use">
$ gnap_overlay -i myfirewall.iso -o overlays/myfirewall
</pre>

<warn>
In this example, the <path>overlays/myfirewall</path> directory should contain
an <path>etc/overlay.conf</path> file, otherwise you should specify one using
the <c>-c</c> option.
</warn>

<p>
You should read the <c>gnap_overlay</c> man page for information on other
options.
</p>

<p>
Then you should burn this ISO file and test. CD-RW is recommended :)
</p>

</body>
</section>
<section>
<title>Generating and writing to hard disk, CF...</title>
<body>

<impo>
Using <c>gnap_overlay</c> in disk mode requires root rights and that your
current Linux kernel supports loopback (CONFIG_BLK_DEV_LOOP) and MSDOS
filesystems (CONFIG_MSDOS_FS) compiled-in or as modules.
</impo>

<p>
<c>gnap_overlay</c> can also be used
to create a bootable hard drive (hard disk, DiskOnModule, CF card...) with
the GNAP configuration on it. First the target must be properly set up. You
will need to install a Master Boot Record on it :
</p>

<pre caption="Creation a MBR on device /dev/sda">
# dd if=/usr/lib/gnap/mbr/mbr.bin of=/dev/sda bs=512 count=1
</pre>

<p>
You must also create an active partition on the device, using fdisk. Then
you should call (as root) gnap_overlay to write to the disk (<c>-d</c> option).
You'll need to know the name of the partition to write to, as seen by the
host you use to write to the device. You'll also need to know the name of
the partition as it will be seen in the GNAP system as it boots on the device
(<c>-r</c>). For example, a CF card can be seen on the host as /dev/sdb1
and by a Soekris system as /dev/hda1:
</p>

<pre caption="Writing GNAP to the disk">
# gnap_overlay -d /dev/sda1 -r hda1 -o overlays/myfirewall -m
</pre>

<note>
<c>-m</c> is an optional parameter you can use to tell GNAP to cache the
squashfs filesystem once at startup to avoid multiple read access that
can wear the device.
</note>

</body>
</section>
</chapter>
<chapter>
<title>How to rebuild a GNAP Core</title>

<section>
<body>

<impo>
Only advanced users that want to change the GNAP core contents (or rebuild
the standard core with a recent portage snapshot) should read this chapter.
Rebuilding a core takes a lot of time and you may run into problems brought
by recently added package versions.
You'll need root rights (needed by Catalyst) to build a GNAP Core.
The kernel on the building host must support loopback devices
(CONFIG_BLK_DEV_LOOP) and ISO9660 filesystems (CONFIG_ISO9660_FS)
compiled-in or as modules.
</impo>

</body>
</section>
<section>
<title>Installation</title>
<body>

<p>
The GNAP development package is now available through Portage:
</p>

<pre caption="GNAP development package installation">
# emerge gnap-dev
</pre>

<warn>
gnap-dev might only be available in "~x86". Adjust your
<path>/etc/portage/package.keywords</path> file if needed.
</warn>

<note>
This will fetch a seed stage2 file, which is usually quite large (~18Mb). You
can set the "minimal" USE flag if you don't want to download the seed stage,
but only install the GNAP development environment.
</note>

</body>
</section>
<section>
<title>Building a GNAP Core from scratch</title>
<body>

<p>
You should use <c>gnap_make</c> to call all Catalyst stages and the tarball
creation, using the standard specs directory:
</p>

<pre caption="Building a new GNAP Core tarball in one step">
# gnap_make -t all
</pre>

<note>
By default, it will use the seed stage at
<path>/usr/lib/gnap/stage2seed.tar.bz2</path>, as installed by the ebuild.
You can use the <c>-s</c> option to change that default location.
</note>

<p>
This will take a <e>very</e> long time to complete, and should produce
a nice GNAP Core tarball with a version stamp based on current date.
</p>

<p>
If you want to reuse a previously built (or officially downloaded) Portage
snapshot, you should copy the portage-YYYYMMDD.tar.bz2 file to the
<path>/var/tmp/catalyst/snapshots</path> subdirectory, then use the
<c>-p</c> option:
</p>

<pre caption="Building from a 20040401 snapshot">
# gnap_make -t all -p 20040401
</pre>

<p>
In case of failure, or if you just want to re-run some final stages, you might
want to specify which Catalyst stages gnap_make should call. You can do this
by providing the GNAP version timestamp to reuse (<c>-v</c>) and the stage
names (<c>snapshot</c>, <c>stage3</c>, <c>livecd-stage1</c>,
<c>livecd-stage2</c>) and/or the special <c>tarball</c> target
(which builds the final GNAP Core tarball) as <c>-t</c> parameters:
</p>

<pre caption="Calling only the two final stages of a 20041012 GNAP build, using a prebuilt 20041008 Portage snapshot">
# gnap_make -p 20041008 -v 20041012 -t livecd-stage2 -t tarball
</pre>

<p>
You should read the <c>gnap_make</c> man page for information on other
options.
</p>

</body>
</section>
<section>
<title>Customizing your GNAP Core</title>
<body>

<p>
To customize your GNAP core, you should use your own specs directory.
To do that, make a copy of the specs directory from
<path>/usr/lib/gnap/specs</path> and modify the files in it.
</p>

<p>
You may want to change the kernel sources used in the GNAP Core (you may even
have to, if the configured sources are no longer in portage). You
should modify the <path>specs/common.conf</path> file to point to the right
sources name and change the <path>specs/kernel.config</path> kernel
configuration file to use.
</p>

<p>
You can also change the subarch and profile used to build the GNAP Core
(by default, an <e>x86</e> subarch with <e>uclibc/x86/hardened</e> profile),
by editing the <path>specs/common.conf</path> file.
</p>

<p>
To add new software packages, you should add them to the
<path>specs/packages.conf</path> file. To start new daemons by default,
you should add them to the <c>livecd/rcadd</c> option of the
<path>specs/livecd.conf</path> file.
</p>

<p>
Finally, you call <c>gnap_make</c> with the <c>-e</c> option to specify the
full path to the alternative specs directory:
</p>

<pre caption="Building from a /home/foo/myspecs specs directory">
# gnap_make -t all -e /home/foo/myspecs
</pre>

</body>
</section>
</chapter>
</guide>
