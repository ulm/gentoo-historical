<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/base/embedded/embedded-guide.xml,v 1.2 2007/12/24 20:30:06 vapier Exp $ -->

<guide link="/doc/en/embedded-guide.xml">
<title>Gentoo Embedded x86 Guide</title>

<author title="Author">
  <mail link="liquidcable@gmail.com">Heath Holcomb</mail>
</author>
<author title="Contributor">
  Ned Ludd
</author>
<author title="Contributor">
  Lloyd Sargent
</author>
<author title="Contributor">
  Yuri Vasilevski
</author>
<author title="Contributor">
  Mike George
</author>
<author title="Contributor">
  Marius Schaefer
</author>
<author title="Contributor">
  Pierre Cassimans
</author>

<abstract>
This document is a guide to build a x86 Gentoo embedded build.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.10</version>
<date>2005-11-02</date>

<chapter>
<title>Deprecated</title>
<section>
<body>
<p>
This guide is outdated by the <uri link="handbook">Embedded Handbook</uri>.
Please use that from now on.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Introduction</title>

<section>
<title>What is Gentoo Embedded?</title>
<body>
<p>
From the <uri link="http://www.gentoo.org/proj/en/base/embedded/index.xml">Gentoo Embedded website</uri> :
</p>
<p>
This project manages embedded system support in Gentoo. The project is responsible for overseeing the 
build infrastructure for creating images to be installed onto embedded systems. Also included is the 
support of specific types of embedded systems and development tools.
</p>
</body>
</section>

<section>
<title>What is x86 Gentoo Embedded?</title>
<body>
<p>
x86 Gentoo Embedded is simply embedded Gentoo for the x86 architecture (think Intel, AMD, and Via processors).
It's main purpose is for embedded SBCs (single board computers) based on the x86 architecture were a small
non-volatile (flash, compact flash, DiskOnChip) footprint is needed (as low as 10 MB).
</p>
</body>
</section>

<section>
<title>Definitions and Terms</title>
<body>
<table>
<tr>
<th>Term</th>
<th>Definition</th>
</tr>
<tr>
<ti>rootfs</ti>
<ti>root filing systems, / and everything underneath it</ti>
</tr>
<tr>
<ti>system_rootfs</ti>
<ti>your regular rootfs, development computer</ti>
</tr>
<tr>
<ti>development_rootfs</ti>
<ti>what you use to build the embedded_rootfs</ti>
</tr>
<tr>
<ti>embedded_rootfs</ti>
<ti>rootfs you deploy to the target system</ti>
</tr>
<tr>
<ti>SBC</ti>
<ti>single board computer (here it's an x86 based)</ti>
</tr>
</table>
</body>
</section>

<section>
<title>Overview of Process (steps)</title>
<body>
<table>
<tr>
<th>Step #</th>
<th>Description</th>
</tr>
<tr>
<ti>1</ti>
<ti>Prepare the development_rootfs from your system_rootfs</ti>
</tr>
<tr>
<ti>2</ti>
<ti>Build the development_rootfs</ti>
</tr>
<tr>
<ti>3</ti>
<ti>Build the embedded_rootfs</ti>
</tr>
<tr>
<ti>4</ti>
<ti>Build and install non-system programs to the embedded_rootfs</ti>
</tr>
<tr>
<ti>5</ti>
<ti>Build and install a kernel to the embedded_rootfs</ti>
</tr>
<tr>
<ti>6</ti>
<ti>Deploy embedded_rootfs to target</ti>
</tr>
</table>
</body>
</section>

</chapter>

<chapter>

<title>Step 1 - Prepare the development_rootfs from your system_rootfs</title>
<section>
<title>You must be root, and cd to the working directory (/opt).</title>
<body>
<pre caption="need to root and set work directory">
# <i>su -</i>
# <i>cd /opt</i>
</pre>
</body>
</section>

<section>
<title>Create development_rootfs</title>
<body>
<p>
Create the development_rootfs directory. 
I use i586 because of target is a Geode processor.
</p>
<pre caption="Create the development_rootfs directory">
# <i>mkdir -p /opt/i586-gentoo-uclibc-linux/usr/portage</i>
</pre>

</body>
</section>

<section>
<title>Download stage 1 embedded Gentoo tarball.</title>
<body>
<p>
Download the latest stage 1 tarball.  
It's a stage 1 tarball utilizing uclibc.
</p>
<pre caption="download the latest stage 1 tarball">
# <i>wget \
http://mirror.usu.edu/mirrors/gentoo/experimental/x86/embedded/stages/\
stage1-x86-uclibc-2005.0.tar.bz2</i>
</pre>
</body>
</section>

<section>
<title>Untar stage.</title>
<body>
<p>
Untar the stage to the development_rootfs.
</p>
<pre caption="untar the stage to the development_rootfs">
# <i>tar -xvjpf stage1-x86-uclibc-2005.0.tar.bz2 -C /opt/i586-gentoo-uclibc-linux/</i>
</pre>
</body>
</section>

<section>
<title>Mount needed directories.</title>
<body>
<p>
Mount the proc and portage directories to your development_rootfs.
Makes your system_rootfs's proc and portage directory available from inside of your development_rootfs (after chrooting).
</p>
<pre caption="mount proc and portage">
# <i>mount --bind /proc /opt/i586-gentoo-uclibc-linux/proc/</i>
# <i>mount --bind /usr/portage /opt/i586-gentoo-uclibc-linux/usr/portage</i>
</pre>
</body>
</section>

<section>
<title>Copy DNS info.</title>
<body>
<p>Copy over DNS information to the development_rootfs.</p>
<pre caption="copy DNS info">
# <i>cp /etc/resolv.conf /opt/i586-gentoo-uclibc-linux/etc/resolv.conf</i>
</pre>
</body>
</section>

<section>
<title>Chroot.</title>
<body>
<p>Chroot into the development_rootfs.</p>
<pre caption="chroot">
# <i>chroot /opt/i586-gentoo-uclibc-linux /bin/bash --login</i>
</pre>
</body>
</section>

</chapter>


<chapter>
<title>Step 2 - Build the development_rootfs</title>

<section>
<title>Create new environment and load variables into memory.</title>
<body>
<pre caption="">
# <i>env-update</i>
# <i>source /etc/profile</i>
</pre>
</body>
</section>

<section>
<title>Modify make.conf.</title>
<body>
<p>
Modify make.conf file to your liking/needs. This is for my target, Geode x86 processor.
</p>
<p>
Possible values for UCLIBC_CPU : 386, 486, ELAN, 586, 586MMX, 686, PENTIUMII, 
PENTIUMIII, PENTIUM4, K6, K7, CRUSOE, WINCHIPC6, WINCHIP2, CYRIXIII, NEHEMIAH
</p>
<pre caption="make.conf">
# <i>nano -w /etc/make.conf</i>

USE="bitmap-fonts minimal truetype-fonts mmx"
CHOST="i586-gentoo-linux-uclibc"
CFLAGS="-march=i586 -Os -pipe -fomit-frame-pointer -mmmx"
CXXFLAGS="${CFLAGS}"
FEATURES="buildpkg"

VIDEO_CARDS="chips"
UCLIBC_CPU="586MMX"

</pre>
</body>
</section>

<section>
<title>Set profile to use 2.6 kernel.</title>
<body>
<pre caption="set profile to 2.6">
# <i>cd /etc/</i>
# <i>unlink make.profile</i>
# <i>ln -s ../usr/portage/profiles/uclibc/x86/2005.1 make.profile</i>
</pre>
</body>
</section>

<section>
<title>Start the bootstrap script.</title>
<body>
<pre caption="bootstrap">
# <i>cd /usr/portage/scripts</i>
# <i>./bootstrap.sh -p -v</i>
# <i>./bootstrap.sh</i>

<comment>Workaround - bootstraping
Failure compiling uclibc (gcc-config error: Could not run/locate "gcc")?
If you get a failure while bootstrap is compiling uclibc here are the steps
to work around the problem.</comment>
# <i>gcc-config 1</i>
# <i>source /etc/profile</i>
# <i>./bootstrap.sh</i>
</pre>
</body>
</section>

<section>
<title>Emerge the system ebuild for the development_rootfs.</title>
<body>
<pre caption="emerge system">
# <i>emerge -e system</i>

<comment>Workaround - emerge system
During emerge -e system, python-fchksum fails complaing about
gcc-config error: Could not run/locate "i386-gentoo-linux-uclibc-gcc"
The following commands work around this problem.</comment>
# <i>emerge python</i>
# <i>emerge -e system</i>
</pre>
</body>
</section>

</chapter>

<chapter>
<title>Step 3 - Build the embedded_rootfs</title>

<section>
<title>Create the embedded_rootfs directory.</title>
<body>
<pre caption="mkdir">
# <i>mkdir /embedded_rootfs</i>
</pre>
</body>
</section>

<section>
<title>Emerge baselayout-lite into embedded_rootfs.</title>
<body>
<pre caption="emerge baselayout-lite">
# <i>cd /usr/portage/sys-apps/baselayout-lite/</i>
# <i>ROOT=/embedded_rootfs emerge baselayout-lite-1.0_pre1.ebuild</i>

<comment>Workaround - baselayout-lite
Baselayout-lite is still beta, so a few fixes are needed.
There needs to be a directory "log" in /var.
Inittab calls for /usr/bin/tail, but it needs to /usr/bin.</comment>
# <i>mkdir /embedded_rootfs/var/log</i>
# <i>nano -w /embedded_rootfs/etc/inittab</i>
tty3::respawn:/usr/bin/tail -f /var/log/messages
tty3::respawn:/bin/tail -f /var/log/messages
</pre>
</body>
</section>

<section>
<title>Emerge uclibc into the embedded_rootfs.</title>
<body>
<p>
Use the -K option because we don't get the extra files created by the
build/emerge process into our embedded rootfs which needs to be as 
small as possible.
</p>
<pre caption="">
# <i>ROOT=/embedded_rootfs emerge -K uclibc</i>
</pre>
</body>
</section>

<section>
<title>Emerge busybox into the embedded_rootfs.</title>
<body>
<p>
First you must emerge it into your development_rootfs.
This does not create the symlinks in our development embedded rootfs.
</p>
<pre caption="">
# <i>emerge busybox</i>
# <i>ROOT=/embedded_rootfs emerge -K busybox</i>
</pre>
</body>
</section>

<section>
<title>Create the symlinks for busybox in the embedded_rootfs.</title>
<body>
<pre caption="">
# <i>mkdir /embedded_rootfs/proc</i>
# <i>mount -o bind /proc/ /embedded_rootfs/proc/</i>
# <i>chroot /embedded_rootfs /bin/busybox --install -s</i>
# <i>umount /embedded_rootfs/proc</i>
</pre>
</body>
</section>

<section>
<title>Set time zone in your embedded_rootfs.</title>
<body>
<pre caption="">
# <i>nano -w /embedded_rootfs/etc/TZ</i>
CST6CDT
</pre>
</body>
</section>

<section>
<title>Install a boot loader (usually grub or lilo).</title>
<body>
<p>
Once you copy/deploy your embedded_rootfs to your target SBC you will 
have to run grub on the command line to write to the master boot record
(MBR).
For some reason not all of /boot/grub is copied over to the 
embedded_rootfs, so a extra manual copy step is needed.
The --nodeps gets rip of the run time need of ncurses.
</p>
<pre caption="">
# <i>emerge --nodeps grub</i>
# <i>ROOT=/embedded_rootfs emerge -K --nodeps grub</i>
# <i>cp -R /boot/grub /embedded_rootfs/boot/</i>
</pre>
<p>
Modify your boot configure file.
The example below is for a gurb, for a boot partition on /dev/hda1 and only
one partition on the target SBC system.
</p>
<pre caption="">
# <i>nano -w /embedded_rootfs/boot/grub/grub.conf</i>
default 0
timeout 10
splashimage=(hd0,0)/boot/grub/splash.xpm.gz

title=Linux 2.6.x
root (hd0,0)
kernel /vmlinuz-2.6.x root=/dev/hda1 vga=792
</pre>
</body>
</section>

<section>
<title>Set root password for the embedded_rootfs.</title>
<body>
<pre caption="">
# <i>chroot /embedded_rootfs /bin/sh</i>
# <i>passwd</i>
# <i>exit</i>
# <i>rm /embedded_rootfs/etc/passwd-</i>
</pre>
</body>
</section>

<section>
<title>Modify fstab.</title>
<body>
<p>
Below is mine, yours may vary.
</p>
<pre caption="">
# <i>nano -w /embedded_rootfs/etc/fstab</i>
/dev/hda1     reiserfs  defaults  0 0
none/proc     proc      defaults  0 0
none/sys      sysfs     defaults  0 0
none/dev/shm  tmpfs     defaults  0 0
</pre>
</body>
</section>

<section>
<title>Clean up the embedded_rootfs.</title>
<body>
<p>
Need to clean up extra files generated by portage that we don't need.
</p>
<pre caption="">
<i>rm -R /embedded_rootfs/var/db/pkg/*</i>
<i>rm -R /embedded_rootfs/var/lib/portage/</i>
</pre>
</body>
</section>

</chapter>

<chapter>
<title>Step 4 - Build and install non-system programs to the embedded_rootfs</title>
<section>
<body>
<p>
Emerge other software you need for you embedded target.
This is very wildly depending on your needs.
Also your proprietary application will be done here.
</p>
<pre caption="">
# <i>emerge foo*</i>
# <i>ROOT=/embedded_rootfs emerge -K foo*</i>
</pre>
</body>
</section>

</chapter>

<chapter>
<title>Step 5 - Build and install a kernel to the embedded_rootfs</title>

<section>
<title>Install a kernel into embedded_rootfs.</title>
<body>
<p>
First we will emerge it into our development_rootfs, then configure and 
build it.
</p>
<pre caption="emerge kernel, enter menuconfig">
# <i>emerge vanilla-sources</i>
# <i>cd /usr/src/</i>
# <i>cd linux</i>
# <i>make menuconfig</i>
</pre>
<p>
Configure your kernel for your TARGET SBC here.  I HIGHLY suggest you
configure the kernel to compile everything into the kernel, and nothing
as a module.
</p>
<pre caption="build and install kernel">
# <i>make</i>
# <i>make INSTALL_MOD_PATH=/embedded_rootfs modules_install</i>
# <i>cp /usr/src/linux/arch/i386/boot/bzImage /embedded_rootfs/boot/vmlinuz-2.6.x</i>
</pre>
<p>
A few notes on compiling your kernel.
If deploying to a compact flash/DiskOnChip/SD use ext2, as the journaling
filing systems "write" far to much for a flash device.
If deploying to a hard drive use a journaling filing system, such as
ext3 or reiserfs.
</p>
</body>
</section>

</chapter>

<chapter>
<title>Step 6 - Deploy embedded_rootfs to target</title>
<section>
<body>
<p>
Prepare a Gentoo (or any Linux distro) system on the target SBC using a
harddrive.  This is known as the target development rootfs.
We will create a partition (/embedded_rootfs) that will server as our 
"test" partition to deploy our embedded_rootfs that we generate on our
development_system.
</p>
<table>
<tr>
<th>Partition</th>
<th>Mount Point</th>
<th>Size</th>
</tr>
<tr>
<ti>/dev/hda1</ti>
<ti>/embedded_rootfs</ti>
<ti>1 GB</ti>
</tr>
<tr>
<ti>/dev/hda2</ti>
<ti>/boot</ti>
<ti>100 MB</ti>
</tr>
<tr>
<ti>/dev/hda3</ti>
<ti>swap</ti>
<ti>(size varies, 512 MB is a good number)</ti>
</tr>
<tr>
<ti>/dev/hda4</ti>
<ti>/</ti>
<ti>(what is left, at least 1.5 GB per 2005.0 install guide specs)</ti>
</tr>
</table>

<p>
Copy over your embedded_rootfs from you development system to your target
system and the directory /embedded_rootfs.  This needs to be done via NFS as
need to preserve the permissions.
</p>
<p>
The following commands are done from the target development rootfs.
</p>
<pre caption="">
# <i>mount -t reiserfs /dev/hda1 /mnt/embedded_rootfs</i>
# <i>mount -t nfs\</i>
# <i>192.168.0.10:/opt/i586-gentoo-uclibc-linux/embedded_rootfs\</i>
# <i>/mnt/nfs_embedded_rootfs</i>
# <i>cp -adpR /mnt/nfs_embedded_rootfs/* /mnt/embedded_rootfs</i>
</pre>

<p>
Modify your target system's gurb.conf (or lilo.conf) for allow you to boot 
to the embedded_rootfs partition.
</p>
<p>Reboot, and if all goes well you'll be greeted with a login prompt.</p>
<p>Fin.</p>
</body>
</section>
</chapter>

</guide>
