<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/en/base/embedded/gnap-advancedguide.xml">
<title>Gentoo Network APpliance Advanced User Guide</title>
<author title="Author">
  <mail link="koon@gentoo.org">Thierry Carrez</mail>
</author>

<abstract>
This document is a guide for GNAP advanced users that want to build
their own GNAP core and extensions files.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->
<license/>

<version>1.8</version>
<date>August 10, 2005</date>

<chapter>
<title>Audience</title>
<section>
<body>

<p>
This guide is for GNAP users that want to go deeper and customize
what GNAP does even more. If you want other software available than what is
in the standard GNAP core and extensions, or if you want to make GNAP use
another kernel or even another Gentoo profile, this guide is for you.
</p>

<p>
GNAP is very easy to <uri link="gnap-userguide.xml">use</uri>. But changing
GNAP to match your specific needs is more complicated. You need to be
familiar with Gentoo systems, packages and profiles, as well as understand
the basic concepts of
<uri link="/proj/en/releng/catalyst/">Gentoo Catalyst</uri>, the tool used
to create GNAP elements. Building complete system images from scratch also
takes a lot of time and computing power. You've been warned :)
</p>

</body>
</section>
</chapter>
<chapter>
<title>Kernel extensions</title>
<section>
<body>

<p>
Replacing the kernel (and modules) used in GNAP is the simplest of the
advanced tasks. The idea is to use
<uri link="http://www.gentoo.org/doc/en/genkernel.xml">genkernel</uri>
to create a <e>minkernpackage</e> (which contains the kernel and initramfs)
and a <e>modulespackage</e> (which contains the modules) for specific
kernel sources and configuration. Then you can use <c>gnap_remaster</c> to
create a new GNAP core file with the new kernel and modules in.
</p>

</body>
</section>
<section>
<title>Build kernel extensions</title>
<body>

<p>
First you should emerge the kernel sources you want to use:
</p>

<pre caption="Emerge the kernel sources of your choice">
# emerge --oneshot =gentoo-sources-2.6.11-r11
</pre>

<p>
You'll also need to create a temporary directory to hold the modules
installation:
</p>

<pre caption="Create a temporary directory for modules">
# mkdir /home/foo/modules_tmp
</pre>

<p>
Then run genkernel with the right options (kernel source location,
modules temporary directory) to produce a minkernpackage
and modulespackage:
</p>

<pre caption="Generate a minkernpackage and modulespackage using genkernel">
# genkernel --kerneldir=/usr/src/linux-2.6.11-gentoo-r11 --menuconfig \
  --minkernpackage=/home/foo/kernel.tar.bz2 --modulespackage=modules.tar.bz2 \
  --no-install --module-prefix=/home/foo/modules_tmp all
</pre>

<note>
Alternatively to using <c>--menuconfig</c>, you can specify an existing kernel
configuration file using the <c>--kernel-config</c> option.
</note>

<p>
Finally you can safely remove the modules temporary directory:
</p>

<pre caption="Remove the modules temporary directory">
# rm -rf /home/foo/modules_tmp
</pre>

</body>
</section>
<section>
<title>Remastering a GNAP core with a kernel extension</title>
<body>

<p>
Once you have a minkernpackage and/or a modulespackage, you can easily use
<c>gnap_remaster</c> to create a GNAP core file where the kernel and/or modules
you built replace the original ones. This is done through the use of the
<c>-k</c> (for minkernpackages) and <c>-m</c> (for modulespackages) options:
</p>

<pre caption="Create a GNAP core with new kernel and modules">
# gnap_remaster -k kernel.tar.bz2 -m modules.tar.bz2 -o mynewcore.tar
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Introduction to gnap_make</title>
<section>
<title>How it works</title>
<body>

<p>
Creating new GNAP elements is done through the use of the <c>gnap_make</c>
script, which is a high-level wrapper for <c>catalyst</c> calls. Catalyst
is the powerful tool used to automate the building of installation
tarballs (the stage files) and LiveCDs constituting a Gentoo release.
Being familiar with how Catalyst works will help you understand how
<c>gnap_make</c> works.
</p>

<p>
The <c>gnap_make</c> script takes a GNAP seed stage tarball and a specs
directory (containing build directives), and can produce new GNAP core files,
GNAP basefs files and extensions:
</p>

<figure link="gnap_make.png" short="gnap_make principle"
        caption="How gnap_make works"/>

</body>
</section>
<section>
<title>The gnap_make stages and the stage seed</title>
<body>

<p>
The <c>gnap_make</c> script goes through several steps in order to complete
building elements. Some of those steps correspond to Catalyst stages, but
others are purely GNAP-specific stages.
</p>

<pre caption="The gnap_make stages">
seed stage file -> <i>stage3</i> -> <i>livecd-stage1</i> -> <i>livecd-stage2</i> -> <i>tarball</i> -> GNAP Core and basefs files
stage3 stage file -> <i>extensions</i> -> extension files
</pre>

<p>
If <c>stage3</c> completed but <c>livecd-stage1</c> failed, you can restart at
<c>livecd-stage1</c> and just execute the remaining stages.
</p>

<p>
In all cases you need a seed stage file. You can download an official
uclibc-hardened stage2 tarball from the latest Gentoo release. Alternatively,
GNAP provides a stage3 stage file that can be used for building GNAP Core
and basefs files, but also extensions. If you run both the <c>stage3</c> and
the <c>extensions</c> steps in the same <c>gnap_make</c> run, GNAP will use
your <c>stage3</c> build results to serve as a seed stage for the
<c>extensions</c> step.
</p>

</body>
</section>
<section>
<title>Prerequisites</title>
<body>

<p>
You'll need root rights to run <c>gnap_make</c>, but also specific features
enabled in your host system kernel, so that <c>gnap_make</c> can play with
virtual filesystems. Your host kernel will need (builtin or as modules):
</p>

<ul>
<li>Support for loopback devices (CONFIG_BLK_DEV_LOOP)</li>
<li>Support for ISO9660 filesystems (CONFIG_ISO9660_FS)</li>
</ul>

</body>
</section>
<section>
<title>Installing the GNAP development package</title>
<body>

<p>
The GNAP development package is now available through Portage:
</p>

<pre caption="GNAP development package installation">
# emerge gnap-dev
</pre>

<warn>
gnap-dev might only be available in "~x86". Adjust your
<path>/etc/portage/package.keywords</path> file if needed.
</warn>

<note>
This will fetch a reduced portage snapshot and the GNAP seed stage3 file
(which is ~41Mb large). You can set the "minimal" USE flag if you don't want
to download those files, but only install the GNAP development utilities.
</note>

</body>
</section>
<section>
<title>The specs directory</title>
<body>

<p>
The <e>specs directory</e> is a directory containing several files describing
how GNAP should be built. After installation of gnap-dev, the reference specs
directory used to build the current GNAP core is available at
<path>/usr/lib/gnap/specs</path>.
</p>

<p>
The specs directory contains some files that will be used as part of Catalyst
specfiles (<e>packages.conf</e> will be injected in livecd-stage1 specfile,
<e>livecd.conf</e> in livecd-stage2 specfile), but also GNAP-specific files and
directories.
</p>

<p>
You should probably copy the reference specs directory before making your
changes:
</p>

<pre caption="Leave the original specs directory intact">
$ cp -r /usr/lib/gnap/specs /home/foo/myspecs
</pre>

</body>
</section>
<section>
<title>The portage snapshot</title>
<body>

<p>
The portage snapshot is the <path>.tar.bz2</path> file containing the Portage
tree to use to build the GNAP core packages and/or extensions.
</p>

<p>
Since changes to the Portage tree can result in GNAP incompabilities, the
GNAP development package provides a reduced Portage snapshot file containing
everything needed to rebuild the current GNAP core (but not more !). It can
serve as a safe base upon which to build your own Portage tree snapshot
(by adding new files). You will find it installed as
<path>/usr/lib/gnap/gnap-portagesnapshot.tar.bz2</path>.
</p>

<p>
Alternatively, if you're brave and don't fear compilation failures and
unexpected side-effects, you can build your own snapshot file from your
Portage tree, or download a complete one from one of the
<uri link="http://www.gentoo.org/main/en/mirrors.xml">Gentoo mirrors</uri>
(look for the <path>snapshots</path> subdirectory).
</p>

</body>
</section>
</chapter>
<chapter>
<title>Building your own extensions</title>
<section>
<title>How extension building works</title>
<body>

<p>
An extension is a compressed tarball, containing one or more packages,
bringing extra functionality to a GNAP system. You must tell <c>gnap_make</c>
what those packages are, and with which USE flags to build them.
<c>gnap_make</c> will then pull all required dependencies, build everything
and make a single tarball out of them all.
</p>

<p>
One of GNAP challenges is to stay the smallest possible, and packages usually
bring in lots of unnecessary doc or example files, and you might not need all
the binary files... One of your jobs as extension designer is to determine
what can be safely removed from the extension tarball after build and tell it
to <c>gnap_make</c>, which will do the cleanup automatically at the end of the
build.
</p>

<p>
You will need to provide a Portage snapshot containing all necessary packages,
or specify a Portage overlay directory that contains everything needed to
build your extensions. It may not be easy to determine what are the
packages you need to add to your snapshot, and therefore it might be easier
to go with a complete Portage snapshot. Just remember that using a Portage
snapshot different from the one used to build the GNAP core and seed stage3
file might bring its own problems (pull extra dependencies for example).
</p>

<note>
Tip: Do a first build with a complete snapshot and look in the log files (or
Catalyst temporary directories) to find the list of packages needed in the
build. Then create a new Portage snapshot (or a Portage overlay directory)
containing the extra required ebuilds. Finally, rebuild your extension with
that new Portage.
</note>

</body>
</section>
<section>
<title>The extensions.conf specfile</title>
<body>

<p>
The <e>extensions.conf</e> file in your specs directory is the place where
you configure what extensions must be built during the <c>extensions</c> stage,
and what must be done for each separate extension to build. The following
<e>extensions.conf</e> file, for example, specifies to build two
extensions, one called <e>vi</e> with the elvis vi-clone, and one called
<e>squid</e> with everything needed to use squid and squidguard:
</p>

<pre caption="Example extensions.conf file">
extensions: vi squid

vi/packlist: elvis
vi/cleanup: /usr/share /usr/bin/elvfmt

squid/packlist: squid squidguard
squid/useflags: zero-penalty-hit
squid/cleanup: /usr/share
</pre>

<note>
An <c>extensions</c> stage run is in fact several <c>grp</c> Catalyst stages,
one for each extension you specify.
</note>

</body>
</section>
<section>
<title>Build extensions using gnap_make</title>
<body>

<p>
Once the <e>extensions.conf</e> file and portage snapshot to use are
ready, you should use <c>gnap_make</c> to call the <c>extensions</c> build
stage on your modified specs directory (as root):
</p>

<pre caption="Building specified GNAP extensions">
# gnap_make -t extensions -p myportage.tar.bz2 -e /home/foo/myspecs
</pre>

<impo>
You need to put in the full path of your specs directory, the <c>-e</c> option
won't accept relative path (or shell expansions like ~foo).
</impo>

<p>
When you run the command, you'll get the following message:
</p>

<pre caption="Warning message when you run the extensions stage only">
 * The extensions target was selected without the stage3 target.
 * Should I use the seed stage as stage3 result ? [N]:
</pre>

<p>
In complete builds, <c>gnap_make</c> uses the results of the <c>stage3</c> step
as a seed stage for the <c>extensions</c> step. If you run the
<c>extensions</c> step alone, <c>gnap_make</c> proposes to use the GNAP
seed stage3 file instead. You should answer "Y" to that question.
</p>

<p>
By default, this will timestamp your build with the current date. To use
another timestamp, use the <c>-v</c> option:
</p>

<pre caption="Forcing a '2005A' timestamp">
# gnap_make -t extensions -p myportage.tar.bz2 -e /home/foo/myspecs -v 2005A
</pre>

<p>
If you don't specify the <c>-p</c> option, <c>gnap_make</c> will use the
reduced Portage snapshot provided in the gnap-dev package. In all cases, you
can use the <c>-o</c> option to specify a Portage overlay directory to use:
</p>

<pre caption="Using the reduced Portage snapshot and an overlay directory">
# gnap_make -t extensions -o myportageoverlay/ -e /home/foo/myspecs
</pre>

<p>
Both commands should build two files: a <path>gnapext_vi-YYYYMMDD.tbz2</path>
file containing the <e>vi</e> extension and a
<path>gnapext_squid-YYYYMMDD.tbz2</path> file for the <e>squid</e> one.
</p>

</body>
</section>
<section>
<title>Use your own extensions with gnap_remaster</title>
<body>

<p>
To use home-made extensions with <c>gnap_remaster</c>, you will need to tell
it in which directory the extensions files can be found (by default it will
look into the <path>/usr/lib/gnap/extensions</path> directory), and the
names of the extensions to use. For example, if the extensions can be
found in the <path>./extensions</path> directory:
</p>

<pre caption="Make a gnapcore.tar including the two home-made extensions">
# gnap_remaster -d ./extensions -e vi -e squid -o gnapcore.tar
</pre>

<warn>
Multiple extensions may conflict with each other (especially if built with
different Portage snapshots). Testing of the resulting
GNAP Core file is necessary to ensure everything is working properly.
</warn>

</body>
</section>
</chapter>
<chapter>
<title>Using gnap_make to produce GNAP elements</title>
<section>
<title>Rebuilding the current GNAP release</title>
<body>

<p>
You can easily use <c>gnap_make</c> to run all stages, using the reference
specs directory and the provided reduced Portage snapshot:
</p>

<pre caption="Rebuilding the GNAP Release">
# gnap_make -t all
</pre>

<note>
By default, it will use the seed stage at
<path>/usr/lib/gnap/gnap-stage3seed.tar.bz2</path>, as installed by the ebuild.
You can use the <c>-s</c> option to change that default location.
</note>

<p>
This will take a <e>very</e> long time to complete, and should produce
nice new GNAP elements (core file, basefs file and extension files)
with a version stamp based on current date.
</p>

<impo>
You should read the <c>gnap_make</c> man page for information on all the
options.
</impo>

</body>
</section>
<section>
<title>In case of failure: debugging tips</title>
<body>

<p>
When the build fails, you should read your build logfiles. The
<path>.out</path> log contains standard output from the <c>catalyst</c>
commands, while the file <path>.err</path> log contains their standard error.
By looking at the last hundred lines, you should be able to tell what's wrong.
</p>

<p>
Usually the build fails because a package fails to compile. It's quite easy
to introduce changes into an ebuild that will break existing uclibc
compatibility, so that's something that frequently happens when working on
a Portage snapshot different than the reduced Portage snapshot provided
with GNAP.
</p>

<p>
The Catalyst temporary directories (usually in <path>/var/tmp/catalyst</path>)
contain the builds results and work directories that can be useful in
determining what happened. You can for example chroot into the work
directory corresponding to the stage that failed and try to see why a
specific compilation failed by running the <c>emerge</c> command in it:
</p>

<pre caption="Debugging by chrooting into Catalyst tmp directories">
# chroot /var/tmp/catalyst/tmp/gnap/stage3-x86-20050802 /bin/bash
# emerge -a packagefailing
</pre>

<p>
If you just want to re-run some final stages, you might
want to specify which stages <c>gnap_make</c> should call. You can do this
by providing the GNAP version timestamp to reuse (<c>-v</c>) and the stage
names you want to run (<c>stage3</c>, <c>livecd-stage1</c>,
<c>livecd-stage2</c>, <c>tarball</c> and <c>extensions</c>)
as <c>-t</c> parameters:
</p>

<pre caption="Calling only two stages of a 20041012 GNAP build">
# gnap_make -v 20041012 -t livecd-stage2 -t tarball
</pre>

</body>
</section>
</chapter>
<chapter>
<title>To infinity, and beyond: Changing your GNAP core</title>
<section>
<body>

<p>
Rebuilding the already-provided GNAP core with the reference specs directory
and reduced portage snapshot file is not very useful, since you should end up
with the exact same GNAP elements as the official release ones. Here is how
you can change things to go further.
</p>

</body>
</section>
<section>
<title>Changing Portage snapshot and configuration</title>
<body>

<p>
You can change the Portage tree contents and the Portage configuration files.
This is useful to include new or masked versions of packages.
</p>

<p>
We saw in the previous chapters how to specify alternate Portage snapshot
files and Portage overlay directories, by using the <c>-p</c> and <c>-o</c>
options in <c>gnap_make</c>. In the <path>portage_confdir/</path> subdirectory
of your specs directory you can change the Portage configuration files usually
found in <path>/etc/portage</path>, including <e>package.keywords</e> (to
enable ~x86 masked packages) and <e>package.mask</e> (to mask specific
versions of packages).
</p>

<impo>
You can't use a <e>package.use</e> file in <path>portage_confdir/</path> to
change the USE flags used when building packages. The system packages (built
during the <c>stage3</c> step) use the default USE flags from the profile.
The <c>livecd-stage1</c> packages use directives from <e>packages.conf</e>.
</impo>

</body>
</section>
<section>
<title>Adding Kernel-depending packages</title>
<body>

<p>
Some packages in the Gentoo tree rely on sources corresponding to the target
kernel to compile, for example the <e>pcmcia-cs</e> package. Such packages
will fail if you try to build them as extensions with errors like
"/usr/src/linux directory not found". The only way to workaround this is to
specify those packages in the livecd.conf specs file and run the
<c>livecd-stage2</c> step in order to build them in the GNAP core directly.
</p>

<warn>
These packages will most likely fail if you remaster the resulting GNAP core
file with a kernel extension containing a different kernel version than the one
used to build the kernel-depending package.
</warn>

<p>
To build <e>pcmcia-cs</e>, you should add the following line to the livecd.conf
file:
</p>

<pre caption="Adding kernel-source depending packages">
boot/kernel/gentoo/packages: pcmcia-cs
</pre>

<p>
During the <c>livecd-stage2</c> step, once the kernel is compiled,
<c>catalyst</c> will emerge these kernel-depending packages.
</p>

</body>
</section>
<section>
<title>Changing the Kernel</title>
<body>

<p>
Rather than using kernel extensions, you can build the kernel you want
directly in. To that effect, you should modify the KERNEL_SOURCES option in
the <e>common.conf</e> specs file to point to the right sources name and fill
the <e>kernel.config</e> specs file with the kernel configuration to use.
</p>

</body>
</section>
<section>
<title>Changing installed packages and startup services</title>
<body>

<p>
Rather than using the extensions system, you can also build the packages you
want installed on the GNAP system directly in. To achieve that result, you
should edit <e>packages.conf</e> specs file and add names to the
<e>livecd/packages:</e> directive.
</p>

<p>
You can set the (common) USE flags you want to use while building the packages
by setting the appropriate <e>livecd/use:</e> value in <e>packages.conf</e>.
</p>

<note>
System packages built during <c>stage3</c> use the default USE flags from the
profile. If you want them to use other USE flags, a simple solution is to
rebuild them during the <c>livecd-stage1</c> step by readding them to
<e>packages.conf</e>, and set the appropriate USE flags in <e>livecd/use:</e>.
</note>

<p>
You may want to change the services started by default, this is done by
modifying the <e>livecd/rcadd:</e> and <e>livecd/rcdel:</e> directives in the
<e>livecd.conf</e> specs file.
</p>

<p>
When emerge installs a package, it pulls all the packages required as build
dependencies. You may not need them on the resulting system. The
<e>livecd.conf</e> specs file contains a <e>livecd/unmerge:</e> directive
listing the packages that should be removed before the filesystem is
finalized. Remember to keep GNAP small, so make use of those features.
</p>

</body>
</section>
<section>
<title>Changing filesystem contents</title>
<body>

<p>
It is possible to add or remove arbitrary files on the GNAP filesystem,
bypassing the ebuild system for a more precise control of what's present on
the GNAP target system.
</p>

<p>
The contents of the <path>root_overlay/</path> specs subdirectory are
copied to the resulting filesystem, without any restriction on directories
you can write to. This is useful to add arbitrary files to the system.
</p>

<p>
The <e>livecd.conf</e> specs file contains filesystem cleanup rules that you
can use to get rid of slack installed on your system. The <c>livecd/empty:</c>
directive lists directories that should be emptied, while the
<c>livecd/rm:</c> directive lists elements to remove.
</p>

<p>
If you have to do more precise changes to the filesystem, you can modify the
fsscript script located in your specs directory. This script is executed on
the resulting filesystem and can update its contents.
</p>

</body>
</section>
<section>
<title>Changing build profile</title>
<body>

<p>
The compilation flags used to build GNAP can be changed by editing the
CFLAGS and CXXFLAGS options in the <e>common.conf</e> specs file.
</p>

<p>
If you feel even more brave, you can try to change the Gentoo profile used
to build the GNAP elements (by default, an <e>x86</e> subarch with
<e>uclibc/x86/hardened</e> profile). This is done by editing the
the SUBARCH, PROFILE and CHOST options in <e>common.conf</e>.
</p>

</body>
</section>
<section>
<title>I want more !</title>
<body>

<p>
If you've gone that far in changing GNAP and want more, you should probably
use directly <uri link="/proj/en/releng/catalyst/">Catalyst</uri>, which is
much more generic and powerful than GNAP is. <c>gnap_make</c> is just a shell
wrapper around <c>catalyst</c> to make the basic tasks a little easier, and
simplification comes with a price you pay in flexibility.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Specs directory reference</title>
<section>
<title>common.conf</title>
<body>

<p>
This file contains global directives for the GNAP build. This file is
sourced by the <c>gnap_make</c> bash script to initialize environment
variables.
</p>

<table>
<tr>
 <th>Parameter</th>
 <th>Value</th>
 <th>Example</th>
</tr>
<tr>
 <ti>SUBARCH</ti>
 <ti>The sub-architecture for the build. It will be used as the value for
 the <e>subarch:</e> directive in all Catalyst calls.</ti>
 <ti>SUBARCH="x86"</ti>
</tr>
<tr>
 <ti>PROFILE</ti>
 <ti>Location of the cascaded Gentoo profile to use in the build. It will be
 used as the value for the <e>profile:</e> directive in all Catalyst
 calls.</ti>
 <ti>PROFILE="uclibc/x86/hardened"</ti>
</tr>
<tr>
 <ti>CHOST</ti>
 <ti>CHOST environment variable setting used during the build.</ti>
 <ti>CHOST="i386-gentoo-linux-uclibc"</ti>
</tr>
<tr>
 <ti>CFLAGS</ti>
 <ti>CFLAGS environment variable setting used during the build.</ti>
 <ti>CFLAGS="-Os -pipe"</ti>
</tr>
<tr>
 <ti>CXXFLAGS</ti>
 <ti>CXXFLAGS environment variable setting used during the build.</ti>
 <ti>CXXFLAGS="${CFLAGS}"</ti>
</tr>
<tr>
 <ti>KERNEL_SOURCES</ti>
 <ti>Specification of the kernel sources to use in the GNAP build. It will be
 used to set the <e>boot/kernel/gentoo/sources:</e> directive in the
 Catalyst <c>livecd-stage2</c> call. It can define a specific source version,
 like "sys-kernel/hardened-sources-2.6.12-r4".</ti>
 <ti>KERNEL_SOURCES="sys-kernel/hardened-sources"</ti>
</tr>
<tr>
 <ti>DISTCC_HOSTS</ti>
 <ti>List of IP addresses that can be used as distcc build slaves. Those
 slaves must run uclibc-powered instances of gcc so you probably can't use
 your regular build hosts for this task. To enable this, you need to set the
 "distcc" option in your <path>/etc/catalyst/catalyst.conf</path>.</ti>
 <ti>DISTCC_HOSTS="192.68.0.12 192.68.0.13"</ti>
</tr>
</table>

</body>
</section>
<section>
<title>packages.conf</title>
<body>

<p>
This file contains directives that will be included in the livecd-stage1
Catalyst specfile. It is used in GNAP to list the packages to add to the
minimal stage3 system, and the USE flags to use while building them.
</p>

<table>
<tr>
 <th>Parameter</th>
 <th>Value</th>
</tr>
<tr>
 <ti>livecd/use</ti>
 <ti>USE flags to set while building the packages.</ti>
</tr>
<tr>
 <ti>livecd/packages</ti>
 <ti>List of the Gentoo packages to build. This will also pull any needed
 dependency.</ti>
</tr>
</table>

</body>
</section>
<section>
<title>livecd.conf</title>
<body>

<p>
This file contains directives that will be included in the livecd-stage2
Catalyst specfile. It is used in GNAP to list kernel-depending packages,
packages to unmerge, cleanup rules and services to start by default.
</p>

<table>
<tr>
 <th>Parameter</th>
 <th>Value</th>
</tr>
<tr>
 <ti>boot/kernel/gentoo/packages</ti>
 <ti>List of kernel-dependent packages to emerge after kernel build.</ti>
</tr>
<tr>
 <ti>livecd/unmerge</ti>
 <ti>List of packages to remove from the system.</ti>
</tr>
<tr>
 <ti>livecd/empty</ti>
 <ti>List of directories to empty (but keep) in the resulting filesystem.</ti>
</tr>
<tr>
 <ti>livecd/rm</ti>
 <ti>List of elements to remove in the resulting filesystem.</ti>
</tr>
<tr>
 <ti>livecd/rcadd</ti>
 <ti>List of services that should be started systematically at boot.</ti>
</tr>
<tr>
 <ti>livecd/rcdel</ti>
 <ti>List of services that baselayout and LiveCDs run by default but you
 don't want to run.</ti>
</tr>
<tr>
 <ti>livecd/cdtar</ti>
 <ti>File to use as the Catalyst cdtar file. When you upgrade Catalyst
 versions, the version number of the cdtar file can change. You must edit the
 value of the cdtar directive to match.</ti>
</tr>
</table>

<note>
There are other parameters which you should probably not change. See the
Catalyst docs for more information about them.
</note>

</body>
</section>
<section>
<title>root_overlay directory</title>
<body>

<p>
This directory contains files that will be copied on the resulting filesystem
during <c>livecd-stage2</c>. It is used as the value for the
<e>livecd/root_overlay:</e> directive in the livecd-stage2 Catalyst specfile.
</p>

</body>
</section>
<section>
<title>fsscript</title>
<body>

<p>
This file is an executable bash script that will be run in <c>livecd-stage2</c>
to update the resulting filesystem. It is used as the value for the
<e>livecd/fsscript:</e> directive in the livecd-stage2 Catalyst specfile.
</p>

</body>
</section>
<section>
<title>isolinux directory</title>
<body>

<p>
The isolinux directory contains files that will be used as parameters in the
syslinux and isolinux calls used to make GNAP bootable:
</p>

<table>
<tr>
 <th>File</th>
 <th>Purpose</th>
</tr>
<tr>
 <ti>boot.msg</ti>
 <ti>ASCII boot splash to use.</ti>
</tr>
<tr>
 <ti>isolinux.cfg</ti>
 <ti>ISOLINUX configuration file, used when making an ISO file bootable.</ti>
</tr>
<tr>
 <ti>syslinux.cfg</ti>
 <ti>SYSLINUX configuration file, used when making a target disk bootable.</ti>
</tr>
</table>

</body>
</section>
<section>
<title>extensions.conf</title>
<body>

<p>
This file contains the list of extensions to build, with directives on how
to build and package each of them. It will be used to build specfiles for
Catalyst grp stages.
</p>

<table>
<tr>
 <th>Parameter</th>
 <th>Value</th>
 <th>Example</th>
</tr>
<tr>
 <ti>extensions</ti>
 <ti>List of the extensions names to build.</ti>
 <ti>extensions: boa myext</ti>
</tr>
<tr>
 <ti>[name]/packlist</ti>
 <ti>List of the Gentoo packages to build in the extension. This will also
     pull any needed dependency.</ti>
 <ti>myext/packlist: squid</ti>
</tr>
<tr>
 <ti>[name]/useflags</ti>
 <ti>Specific USE flags to enable while building the extension. This is an
     optional parameter.</ti>
 <ti>myext/useflags: ipv6</ti>
</tr>
<tr>
 <ti>[name]/cleanup</ti>
 <ti>List of the directories or files to remove from built extension. Keep
     GNAP small, remove all unnecessary stuff !</ti>
 <ti>myext/cleanup: /usr/share</ti>
</tr>
</table>

</body>
</section>
</chapter>
</guide>
