<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/base/x86/gcc-upgrading-guide.xml,v 1.11 2005/12/05 16:29:42 jkt Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/proj/en/base/x86/gcc-upgrading-guide.xml">
<title>Gentoo Linux GCC Upgrade Guide</title>

<author title="Author">
	<mail link="amne@gentoo.org">Wernfried Haas</mail>
</author>

<author title="Author">
	<mail link="wolf31o2@gentoo.org">Chris Gianelloni</mail>
</author>

<abstract>
This document helps a user upgrade GCC on Gentoo Linux.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.2</version>
<date>2005-12-05</date>

<chapter>
	<title>Introduction</title>
	<section>
		<body>
			<p>
			This guide will document the upgrade from GCC 3.3 to GCC 3.4, but
			the concepts here apply to any GCC upgrade.
			</p>
			<p>
			Installing gcc 3.4.4 does not have any influence on the system
			itself.  You have to switch over to it manually.  This step may
			take some time, so be sure that you have time available and are
			prepared for the job.  There are two methods of performing this
			upgrade.  The first method is quick, but could potentially miss a
			package or two that needs updating, where the second method is much
			more involved and requires substantially more compiling.
			</p>
			<note>
			Before proceding with either method, please disable distcc if you have it
			enabled.  If all distcc nodes do not have gcc-3.4 installed, you will run
			into build issues.
			</note>
		</body>
	</section>
</chapter>

<chapter>
	<title>Using revdep-rebuild (Faster method)</title>
	<section>
		<body>
			<p>
			This method requires that you first install <c>gentoolkit</c> if
			you have not already done so.  Then we will upgrade GCC and switch
			to the new compiler.
			</p>
			<pre caption="Installing gentoolkit and upgrading GCC">
# <i>emerge -an gentoolkit</i>
# <i>emerge -uav gcc</i>
# <i>gcc-config i686-pc-linux-gnu-3.4.4</i>
# <i>source /etc/profile</i>
			</pre>
			<note>
			This assumes that you have CHOST="i686-pc-linux-gnu" set.  If you
			are using another CHOST, please use the appropriate gcc-config
			line.
			</note>
			<warn>
			Do not set any GCC 3.4-specific CFLAGS such as -march=pentium-m at
			this time.  Doing so could cause failures in your compiles. You can
			set these flags after you remove gcc-3.3, which will not recognize
			them.
			</warn>
			<p>
			Now, we want to see which packages that revdep-rebuild will want
			to rebuild.  Then we will tell revdep-rebuild to actually rebuild
			the packages.  This may take some time, so have some patience.
			</p>
			<pre caption="Using revdep-rebuild">
# <i>revdep-rebuild --library libstdc++.so.5 -- -pv</i>
# <i>revdep-rebuild --library libstdc++.so.5</i>
			</pre>
			<p>
			It is possible that you might have problems with non-existing
			package versions due to them being outdated or masked.  If this is
			the case, you will want to use the -X option to revdep-rebuild.
			This causes packages to be recompiled based on the package name,
			rather than the exact name and version.
			</p>
			<pre caption="Using revdep-rebuild with -X">
# <i>revdep-rebuild -X --library libstdc++.so.5 -- -pv</i>
# <i>revdep-rebuild -X --library libstdc++.so.5</i>
			</pre>
			<p>
			To provide compatibility with binary C++ applications and any
			packages that revdep-rebuild might have missed,
			<c>sys-libs/libstdc++-v3</c> needs to be merged before you unmerge
			GCC 3.3 from your system.
			</p>
			<pre caption="Installing libstdc++-v3 and cleaning up">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
# <i>emerge -aC =sys-devel/gcc-3.3*</i>
			</pre>
		</body>
	</section>
</chapter>

<chapter>
	<title>Using emerge -e (Safer method)</title>
	<section>
		<body>
			<p>
			This method, while much slower, performs recompiles of your
			entire system to ensure that everything has been rebuilt with
			your new compiler.  First, you upgrade GCC and switch to your
			new compiler.
			</p>
			<pre caption="Upgrading GCC">
# <i>emerge -uav gcc</i>
# <i>gcc-config i686-pc-linux-gnu-3.4.4</i>
# <i>source /etc/profile</i>
			</pre>
			<note>
			This assumes that you have CHOST="i686-pc-linux-gnu" set.  If you
			are using another CHOST, please use the appropriate gcc-config
			line.
			</note>
			<warn>
			Do not set any GCC 3.4-specific CFLAGS such as -march=pentium-m at
			this time.  Doing so could cause failures in your compiles. You can
			set these flags after you remove gcc-3.3, which will not recognize
			them.
			</warn>
			<p>
			To provide compatibility with binary C++ applications,
			<c>sys-libs/libstdc++-v3</c> needs to be merged onto your system.
			</p>
			<pre caption="Installing libstdc++-v3">
# <i>emerge --oneshot sys-libs/libstdc++-v3</i>
			</pre>
			<p>
			Now we will go about first rebuilding the system target, then the
			world target.  This will take a very long time, depending on the
			number of packages that you have installed, as it will rebuild your
			entire toolchain and supporting system files, followed by every
			package on your system, including the toolchain.  This is necessary
			to ensure that all packages have been compiled with the new
			toolchain, including the toolchain itself.
			</p>
			<pre caption="Rebuilding system and world">
# <i>emerge -e system</i>
# <i>emerge -e world</i>
			</pre>
			<p>
			It is also safe to remove older GCC versions at this time.
			</p>
			<pre caption="Cleaning up">
# <i>emerge -aC =sys-devel/gcc-3.3*</i>
			</pre>
		</body>
	</section>
</chapter>

<chapter>
	<title>Hints and problems</title>
	<section>
		<body>
			<ul>
				<li>
				Once kernel modules (e.g. app-emulation/qemu-softmmu) are
				rebuilt with GCC 3.4, they will not work with your old kernel
				anymore.  Recompiling the kernel with 3.4 solves the problem.
				</li>
				<li>
				If revdep-rebuild seems to want to rebuild packages even after
				they have already been rebuilt, just continue.  The packages
				should still work afterwards.
				</li>
				<li>
				If a package fails during emerge -e system/world, you can
				resume operation with <c>emerge --resume</c>.  If a package
				fails repeatedly, skip it with <c>emerge --resume
				--skipfirst</c>.  Don't run any other instances of emerge in
				between or you will lose the resume information.
				</li>
				<li>
				If you see the error: libtool: link: `
				/usr/lib/gcc-lib/i686-pc-linux-gnu/3.3.6/libstdc++.la' is not a
				valid libtool archive, then run <c>/sbin/fix_libtool_files.sh
				3.3.6</c>
				</li>
				<li>
				If <c>/sbin/fix_libtool_files.sh</c> was removed when unmerging
				GCC 3.3, you need to remerge GCC.  This is likely to happen if
				you <c>emerge -e system</c> and GCC 3.3 gets compiled after GCC
				3.4.  If you do not want to merge GCC again, try restoring
				<c>/lib/rcscripts/awk/fixlafiles.awk</c> and
				<c>/sbin/fix_libtool_files.sh</c> from
				<c>/usr/portage/sys-devel/gcc/files</c> and
				<c>/usr/portage/sys-devel/gcc/files/awk</c>.  This will mean
				that these files will not be known to portage and your next
				merge could fail when using FEATURES=collision-protect.
				</li>
				<li>
				If you see the error: /usr/bin/gcc-config: line 632:
				/etc/env.d/gcc/i686-pc-linux-gnu-3.3.5: No such file or
				directory, then try deleting
				<c>/etc/env.d/gcc/config-i686-pc-linux-gnu</c> and running
				<c>gcc-config</c> again, followed by <c>source /etc/profile</c>.
				Only do this if you do not have any cross-compilers set up.
				</li>
			</ul>
			<p>
			Discussion for this is at <uri
			link="http://forums.gentoo.org/viewtopic-t-407840.html">the
			forums</uri>.
			</p>
		</body>
	</section>
</chapter>
</guide>
