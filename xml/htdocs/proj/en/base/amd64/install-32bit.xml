<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/base/amd64/Attic/install-32bit.xml,v 1.4 2004/06/14 21:58:39 kugelfang Exp $ -->
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The context of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommonds.org/licenses/by-sa/1.0 -->

<sections>

<section><title>Running 32-bit Programs</title>
<body>
<impo>YOU MUST HAVE "IA32 Emulation" TURNED ON UNDER "Executable File Formats" IN YOUR KERNEL!</impo>
<p> Many changes are in progress at the moment, and the easiest way to set up a
32-bit environment is to install emulation libraries.
</p>
<pre>
emerge app-emulation/emul-linux-x86-baselibs
emerge app-emulation/emul-linux-x86-xlibs
emerge app-emulation/emul-linux-x86-gtklibs
emerge app-emulation/emul-linux-x86-qtlibs
</pre>
<p> 
The emulation libraries will create the /emul/linux/x86 directory and install
most of the appropriate libraries you will need to run pre-compiled 32-bit
applications. It will also create symlinks like /lib32 and /usr/lib32 which point
back to the proper /emul directories. It will also create a symlink in /lib to
ld-linux.so.2 from /emul/linux/x86/lib/ld-linux.so.2, as the 64-bit variant is
known as ld-linux-x86-64.so.2.
</p>
<p>
Having those 3 packages installed should allow you to run most 32-bit
precompiled applications. (e.g. Java, Oracle 9i, Opera) 
</p>
</body>
</section>

<section>
<title>Compiling 32-bit Applications From A 64-bit Environment (using multilib)</title>
<body>
<p>
You must first have the standard 32-bit environment up and running from the
previous section. Then you need to add <c>multilib</c> to your USE flags in
<path>/etc/make.conf</path> and emerge or re-emerge <path>gcc-3.3.3-r5</path>.
This will build GCC with multilib support, which will allow you to
create 32-bit binaries by using the <c>-m32</c> CFLAGS setting. Having multilib
installed should not affect 64-bit compilations (though you can pass <c>-m64</c>
if you want to be certain for some reason).
</p>
<note>We strongly discourage our users from <e>ever</e> adding <c>-m32</c> to
<path>/etc/make.conf</path> or using <c>-m32</c> with portage in any form
what-so-ever, and recommend that to do 32-bit compiles they should be by hand
and not via the portage system. Not paying attention to this could seriously
mess up your dependancy structure. Don't ask us how to fix this, it's your
fault.</note>
</body>
</section>

<section><title>Creating a 32-bit chroot Environment</title>
<body>
<p>
With the 32-bit emulation libraries installed it is possible to run most 32-bit
applications inside a 64-bit environment. However, it's not easy to compile new
applications or install new 32-bit libraries. This can make it difficult to use
applications like Wine, or the Netscape Flash plugin inside Mozilla. A 32-bit
chroot installation allows you to use your favorite package manager to install
32-bit applications and libraries. This also means, you can optimize the
packages
the way you want them to be. The emul libs are compiled with only minor
optimization, because they are also used on the IA64 platform. A major drawback
however, is the harddisk space. All libraries and applications will be installed
twice.
</p>
<p>
To setup a 32-bit chroot, first create the directory (or partition) where you
want your chroot. Then extract the x86 stage into that directory (do not use the
AMD64 stage) and mount proc. The next step is to enter the chroot. This is done
like in the manual, however, you'll need to use the linux32 program to change
'uname -m' into 'i686'. Run this instead:
</p>
<pre>
linux32 chroot /mnt/gentoo32 /bin/bash
</pre>
<p>
You are now inside the chroot and 'uname -m' should print 'i686'. In make.conf
you can use flags like this:
</p>
<pre>
CHOST="i686-pc-linux-gnu"
CFLAGS="-O2 -march=athlon-xp -msse2 -msse -pipe"
ACCEPT_KEYWORDS="~x86"
</pre>
<p>
Once gcc-3.4 is released, you should be able to use -march=k8 to optimize for
the amd64, but it's not mentioned in the changelog if this is available for
32-bit compilation as well.
</p>
<p>
Continue the installation according to the manual. You can skip most parts after
stage3. You don't need to setup a second kernel logger and crontab. But you do
need to setup users and hosts and resolv.conf. Your 32-bit chroot is now ready
for use. However, you can't use X applications very well at this moment.
</p>
<p>
X-cients use unix sockets to communicate with the X-server. These sockets are
files in /tmp, but the X-server runs outside the chroot. This means X-client
inside the chroot can't access the unix sockets. There are 2 ways to get around.
You can use a TCP socket, but that will not be very fast. The best solution is
to mount the same /tmp inside the chroot. This can be done with (from outside
the chroot):
</p>
<pre>
mount -o bind /tmp /mnt/gentoo32/tmp
</pre>
<p>
Of course you will have to run <c>xhost local:localhost</c> before you can connect to the
X-server from inside the chroot. It is also possible to mount more directories
like this to safe diskspace. Candidates are <path>/home</path>, <path>/usr/portage/distfiles</path> and
<path>/usr/share</path>.
</p>
<p>
To enter the chroot, use the following command to setup the correct environment vars inside the chroot:
</p>
<pre>
linux32 chroot /mnt/32-bit /bin/bash --login
</pre>
</body>
</section>
 
</sections>
