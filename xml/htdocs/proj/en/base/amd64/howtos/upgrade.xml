<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">
<!-- $HEADER$ -->

<!-- The context of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommonds.org/licenses/by-sa/1.0 -->

<sections>

<version>2005.0</version>
<date>June 29, 2005</date>

<section>
<title>How to upgrade and AMD64 installation from 2004.3 to 2005.0</title>
<body>
<p>
Multilib is now forced on in the base 2005.0 profile. If you wish to have a pure-64bit system, you can use the 2005.0/no-multilib profile. This guide will show you how to upgrade a prior installation to a system that uses our new profile.
</p>
</body>
</section>

<section>
<title>Upgrading to 2005.0</title>
<body>
<p>
First, we want to update our portage tree to make sure we have all the ebuilds.
</p>
<pre caption="Updating portage">
emerge sync
</pre>
<p>
Now we need to change 32bits directories like in 2005.0
</p>
<pre caption="The directories for 32bit-libraries changed in 2005.0">
rm /lib32 /usr/lib32 (delete the symlink)
mkdir /lib32 /usr/lib32
</pre>
<p>
The next step is to download the necessary binary packages:
</p>
<pre caption="Download necessary packages">
wget http://amd64.gentoo.org/upgrade/gcc-config-1.3.11-r3.tbz2
wget http://amd64.gentoo.org/upgrade/gcc-3.4.3-r1.tbz2
wget http://amd64.gentoo.org/upgrade/portage-2.0.51.19.tbz2
</pre>
<p>
Depending on your current glibc-version, you have to set the following variable. If you currently have <c>glibc-2.3.4.20041102-r1</c> or lower, set it like this:
</p>
<pre caption="Changing glibc version if you have glibc-2.3.4.20041102-r1">
export GLIBC_VERSION="2.3.4.20051102-r1"
</pre>
<p>
If you are using a newer version than <c>2.3.4.20041102-r1</c>, set GLIBC_VERSION like this:
</p>
<pre caption="Changing glibc version if you have glibc newer than 2.3.4.20041102-r1">
export GLIBC_VERSION="2.3.5"
</pre>
<p>
Now we can download the correct version of glibc package doing this:
</p>
<pre caption="Downloading the correct version">
wget http://amd64.gentoo.org/upgrade/glibc-${GLIBC_VERSION}.tbz2
</pre>
<p>
To verify that we didn't download a corrupt package, we check the MD5 checksums:
</p>
<pre caption="Checking MD5 checksums">
wget http://amd64.gentoo.org/upgrade/md5sums
md5sum --check md5sum
rm md5sum
</pre>
<note>In this step please check the output of md5sum</note>
<warn>The test will fail for the glibc-version you didn't download. Just ignore it.</warn>
<p>
Now you have to move the packages to portage's PKGDIR. This is normally <c>/usr/portage/packages</c>. If the directories don't exist already, you have to create them:
</p>
<pre caption="Creating new directories">
mkdir /usr/portage/packages/sys-devel
mkdir /usr/portage/packages/sys-apps
mkdir /usr/portage/packages/sys-libs
</pre>
<pre caption="Copying packages to the new directories">
cp gcc-config-1.3.11-r3.tbz2 /usr/portage/packages/sys-devel/
cp gcc-3.4.3-r1.tbz2 /usr/portage/packages/sys-devel/
cp portage-2.0.51.19.tbz2 /usr/portage/packages/sys-apps/
cp glibc-${GLIBC_VERSION}.tbz2 /usr/portage/packages/sys-libs/
</pre>
<p>
Now we're ready to start the update:
</p>
<pre caption="Upgrading packages">
emerge -K =sys-devel/gcc-config-1.3.11-r3
emerge -K =sys-devel/gcc-3.4.3-r1
emerge -K =sys-apps/portage-2.0.51.19
emerge -K =sys-libs/glibc-${GLIBC_VERSION}
</pre>
<p>
To make sure we use the new gcc, we have to update our environment:
</p>
<pre caption="Updating Environment">
source /etc/profile
env-update
</pre>
<p>
Now it's save to change the profile:
</p>
<pre caption="Changing profile">
cd /etc
rm make.profile
ln -s /usr/portage/profiles/default-linux/amd64/2005.0 make.profile
</pre>
<p>
In 2005.0, glibc compiles natively 32bit. Therefore, we don't need the emulation package anymore and we update it to a pseudo-package. It's only purpose is to satisfy dependencies for other ebuilds.
</p>
<pre caption="Updating glibc emulation package">
emerge -u '>=app-emulation/emul-linux-x86-glibc-1000'
</pre>
<p>
The same rule applies to the emul-linux-x86-nvidia package. It's just a void package, since media-video/nvidia-glx now installs the 32bit drivers too. Of course you don't need to type the next commands if you don't use the nvidia drivers.
</p>
<pre caption="Updating Nvidia emulation packages">
emerge -C emul-linux-x86-nvidia
emerge --oneshot nvidia-glx
</pre>
<p>
We also have to re-merge the other <c>emul-linux-x86-*</c> packages that are currently installed, to ensure that the compiler will find the 32bit libraries in <c>/emul/linux/x86/lib.</c>
</p>
<pre caption="Installing new emulation packages">
emerge --oneshot '>=emul-linux-x86-baselibs-2.1'
emerge --oneshot '>=emul-linux-x86-compat-2.1'
emerge --oneshot '>=emul-linux-x86-gtklibs-2.1'
emerge --oneshot '>=emul-linux-x86-qtlibs-2.1'
emerge --oneshot '>=emul-linux-x86-sdl-2.1'
emerge --oneshot '>=emul-linux-x86-soundlibs-2.1'
emerge --oneshot '>=emul-linux-x86-xlibs-2.1'
</pre>
<p>
We also need <c>/etc/env.d/04multilib</c>, that's why we update <c>baselayout</c> too.
</p>
<pre caption="Updating baselayout">
emerge --oneshot baselayout
</pre>
<p>
The last step is to re-merge the packages we installed in the beginning, to ensure they're using your USE flags and are compiled with your CFLAGS optimizations.
</p>
<pre caption="Reinstall important packages">
emerge gcc-config gcc glibc portage
</pre>
<p>
Congratulations! You successfully updated your system to <c>2005.0</c>. You now have a fully multilib-capable system.
</p>

</body>
</section>

<section>
<title>Upgrading to 2005.0/no-multilib</title>
<body>
<p>
Upgrading to <c>2005.0/no-multilib</c> is far easier, but you can't execute any 32bit programms, and probably not even compile them.
</p>
<pre caption="Upgrading to 2005.0 profile without multilib">
rm /etc/make.profile
ln -s /usr/portage/profiles/default-linux/amd64/2005.0/no-multilib /etc/make.profile
emerge -upv system
emerge -uv system
</pre>
</body>
</section>

</sections>
