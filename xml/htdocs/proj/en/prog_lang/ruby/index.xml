<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/project.xsl" type="text/xsl"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE project SYSTEM "/dtd/project.dtd"> 
<project>
	<name>Ruby</name>
	<longname>Gentoo Resources for Ruby</longname>
	<date>20 Mar 2009</date>

	<author title="Original author">
	    <mail>nichoj</mail>
	</author>

	<author title="Author">
        <mail link="graaff@gentoo.org">Hans de Graaff</mail>
	</author>

        <author title="Author">
        <mail link="a3li@gentoo.org">Alex Legler</mail>
        </author>

	<description>This project provides support for the Ruby programming language.</description>

	<longdescription>
		<p>
			The Ruby project maintains packages for <uri link="http://www.ruby-lang.org/en/">Ruby
			</uri> implementations, libraries and development tools.
		</p>
		<p>
			This project also maintains the <uri link="http://rubygems.org/">RubyGems</uri> package,
			the de facto standard for packaging Ruby projects. Many Ruby packages currently in the
			Portage tree use this mechanism for installing.
		</p>
		<p>
			Highlighted packages include <uri link="http://rake.rubyforge.org">Rake</uri>,
			<uri link="http://rubyonrails.org/">Ruby on Rails</uri>,
			<uri link="http://www.capify.org/">Capistrano</uri>,
			and <uri link="http://rspec.info/">RSpec</uri>, to name a few.
		</p>
	</longdescription>

    <recruitment>
        <job>
            <summary>General package maintainer</summary>
            <details>
                General ruby package maintainer to help out managing
                packages in the herd. Revision bumping, bug
                filing/fixing, updating ebuilds per eclass or syntax
                changes, etc. This involves a mix of gem and source
                based ebuilds.
            </details>
            <requirements>
                Experience with ruby on Linux, ideally
                Gentoo. Knowledge of the gem repository system and its
                supporting software and experience with building ruby
                software using setup.rb and its many incarnations.
            </requirements>
            <contact>ruby@gentoo.org</contact>
        </job>
        <job>
            <summary>Ruby core package maintainer</summary>
            <details>
                Ruby core package maintainer to help out with the core
                ruby packages (dev-lang/ruby and
                dev-ruby/rubygems). Revision bumping, handling
                security bugs, patching packages to play nice with
                Gentoo, following upstream to handle changes and
                updates in a timely manner.
            </details>
            <requirements>
                Experience with ruby on Linux, ideally
                Gentoo. Knowledge of C and ruby. Experience with
                patching software.
            </requirements>
            <contact>ruby@gentoo.org</contact>
        </job>
    </recruitment>

    <resource link="irc://irc.freenode.org/#gentoo-ruby">#gentoo-ruby on irc.freenode.net</resource>
    <resource link="http://tinyurl.com/2le9ba">Ruby bugs</resource>
    <resource link="http://overlays.gentoo.org/proj/ruby/wiki">Ruby overlay and project wiki</resource>
    <resource link="http://gems.stingray.a3li.info/">RubyGem ebuilds needing an update</resource>

	<task id="ruby-1.9" finished="no" lead="a3li">
		<name>Ruby 1.9</name>
		<description>Support for all Ruby packages with 1.9</description>
		<longdescription>
		  <p>
  		  Ruby 1.9.1 is going to be the first stable release of Ruby 1.9, to be released in January 2009.

                  Our infrastructure is currently being updated, so we should have ebuilds in the near future.
          	  </p>
		  </longdescription>
		<startdate>12-29-2007</startdate>
		<milestone finished="yes">
		  <enddate></enddate>
		  <description>Package Ruby 1.9</description>
		</milestone>
		<milestone finished="no">
		  <enddate></enddate>
		  <description>Create new eclasses</description>
		</milestone>
                <milestone finished="yes">
                  <enddate></enddate>
                  <description>Have a working way to switch default symlinks. Done with eselect-ruby.</description>
                </milestone>
                <milestone finished="no">
                  <enddate></enddate>
                  <description>Verify USE_RUBY status for all packages in the tree</description>
                </milestone>
	</task>
	
    <extrachapter position="devs">
      <title>Supported Ruby implementations</title>
      <section>
        <title>Overview</title>
        <body>
          <p>
          In Gentoo multiple Ruby implementations can co-exist. This
          is supported through the RUBY_TARGETS mechanism. You can add
          the RUBY_TARGETS variable to your make.conf file to select
          which Ruby implementations you want to use on your
          system. By default only <c>ruby18</c> is selected.
          </p>

          <pre caption="/etc/make.conf">
<var>RUBY_TARGETS</var>="ruby18 ruby19"
          </pre>
        </body>
      </section>
      <section>
        <title>Ruby 1.8.x (aka MRI): ruby18</title>
        <body>
          <p>
          This version of Ruby is our main implementation. It is
          available as the 1.8 slot of <c>dev-lang/ruby</c>. It is
          available in the stable tree, and almost all Ruby packages
          in the tree are available for this implementation.
          </p>
        </body>
      </section>
      <section>
        <title>Ruby 1.9.x: ruby19</title>
        <body>
          <p>
          This version of Ruby is currently still masked pending
          resolution of some issues. It is available as the 1.9 slot
          of <c>dev-lang/ruby</c>.
          <uri link="https://bugs.gentoo.org/show_bug.cgi?id=203706">Bug 203706</uri>
          tracks the remaining issues.
          </p>
          <p>
            In order to test Ruby 1.9 you will need to unmask the
            package and also the associated ruby_targets_ruby19 USE
            flag.
          </p>
        </body>
      </section>
      <section>
        <title>JRuby: jruby</title>
        <body>
          <p>
          This version of Ruby is based on the Java Virtual
          Machine. It is available as <c>dev-java/jruby</c>. It is
          currently only available in the testing tree.
          </p>
        </body>
      </section>
      <section>
        <title>Ruby Enterprise Edition: ree</title>
        <body>
          <p>
            This is an enhanced version of Ruby 1.8, featuring various
            enhancements, most notably in that it requires less memory
            to run. It is available as <c>dev-lang/ruby-enterprise</c>.
          </p>
        </body>
      </section>
    </extrachapter>

    <extrachapter>
      <title>Policy for adding new Ruby packages</title>
      <section>
        <title>Overview</title>
        <body>
          <p>
The ruby herd gets a fair amount of requests to add new packages to
the dev-ruby category in portage. Unfortunately we often get a bit
defensive about this and the package requests just hang about. This
policy tries to outline our thinking on when to add new packages and
what you can do to enhance the chances of adding a new package.
          </p>
        </body>
      </section>
      <section>
        <title>Which packages should go to dev-ruby</title>
        <body>
<p>The dev-ruby category should only contain packages that provide
library code (e.g. dev-ruby/mime-types) and packages that are specific
to the ruby environment (e.g. dev-ruby/rake).</p>

<p>Specifically, applications written in ruby should *not* go to the
dev-ruby category by default, and they would not normally be
maintained by the ruby herd. For example, recently cucumber has been
added to the dev-util category, even though it is written in ruby and
started out as a spin of from the more ruby-specific rspec. However,
it now also has support for Java and it provides an application, so it
is much better suited for a more targeted category of dev-util.</p>

<p>For libraries and supporting code we tend to add these packages
only when they are a requirement for an application that gets added to
Gentoo, or a new requirement of said application.</p>

<p>Other packages only get added when there is sufficient demand. We
determine this by looking at the number of votes for a package, so
feel free to open a bug for it and lobby a few folks to add their
votes.</p>
        </body>
      </section>
      <section>
        <title>Why not add more packages?</title>
        <body>
<p>Having this policy may seem silly. Why not just add new packages as
people provide ebuilds for them?</p>

<p>In part we are reluctant to add many packages because they should
really fall under the responsibility of someone else. For example,
sup, the ruby mail client, fits much better to the net-mail
herd. After all, not all packages written in C are part of the c
herd.</p>

<p>In part we are also reluctant because once a package is added it
will increase our workload towards the future. Version bumps, security
issues, and QA within Gentoo must be kept up to date. On top of that
ruby has a bit of a reputation for code that sees a few frantic
releases and is than for all intents and purposes abandoned. Having
packages like that in the tree adds disproportionally to our
maintenance and takes away from providing you with an overall good
ruby experience on Gentoo.</p>
        </body>
      </section>
    </extrachapter>


	<dev role="lead">graaff</dev>
	<dev role="member">robbat2</dev>
        <dev role="member">a3li</dev>
        <dev role="member">gengor</dev>

</project>
