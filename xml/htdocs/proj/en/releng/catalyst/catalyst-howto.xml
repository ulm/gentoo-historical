<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/releng/catalyst/Attic/catalyst-howto.xml,v 1.14 2005/04/06 13:00:48 plasmaroo Exp $ -->
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">


<guide link="catalyst-howto.xml">
<title>Catalyst HOWTO</title>

<author title="Author">
	<mail link="zhen@gentoo.org">John Davis</mail>
</author>

<abstract>
	This guide will outline the process used to build installation stages, LiveCDs, and GRP
	using Catalyst.
</abstract>

<license/>

<version>DRAFT</version>
<date>19 August 2004</date>

<chapter>
	<title>Introduction</title>
	
	<section>
		<title>Goals of this Guide</title>
		<body>
			<p>Coupled with the <uri link="/proj/en/releng/catalyst/reference.xml">Catalyst Reference Manual</uri>,
			this guide will provide all of the information and tools needed to get started
			building release media using Catalyst. The following topics will be covered: </p>

			<ul>
				<li>Catalyst installation and setup</li>
				<li>The Basics - snapshots and specfiles</li>
				<li>Installation stages</li>
				<li>Gentoo Reference Platform (GRP/ PackageCD) sets</li>
				<li>Bootable LiveCDs</li>
			</ul>

			<p>This document, like Catalyst, is under heavy development. If there are any feature requests
			or bugs with either, please report them to the <uri link="http://bugs.gentoo.org">Gentoo Bug Database</uri>. 
			</p>
		</body>
	</section>

</chapter>

<chapter>
	<title>Installation</title>
	<section>
		<title>Catalyst Installation</title>
		<body>
			<p>Catalyst is simple to install; simply run <c>emerge catalyst</c> as root from your command line: </p>
			<pre caption="Emerging Catalyst">
# emerge catalyst
			</pre>

			<p>If you would like the examples that come with Catalyst (highly recommended), make sure to enable the
			<c>doc</c> useflag in <path>/etc/portage/package.use</path>: </p>

			<pre caption="Enabling the doc useflag in /etc/portage/package.use">
# nano -w /etc/portage/package.use
<comment>(simply append to the end of the file)</comment>
dev-util/catalyst doc
			</pre>
			
			<p>If you have access to Gentoo CVS, you can find the latest and greatest CVS version
			of Catalyst at <path>gentoo/src/catalyst</path>. </p>

		</body>
	</section>

	<section>
		<title>Catalyst Setup</title>
		<body>
			<p>Once Catalyst is installed, the first thing that you will want to do is edit the default 
	<path>/etc/catalyst/catalyst.conf</path>:</p>

	<pre caption="Example catalyst.conf">
# Copyright 1999-2004 Gentoo Technologies, Inc.
# Distributed under the terms of the GNU General Public License v2

# Simple desriptions of catalyst settings. Please refer to the online
# documentation for more information.

# distdir specifies where your distfiles are located. This setting should
# work fine for most default installations.
distdir="/usr/portage/distfiles"

# options set different build-time options for catalyst. Some examples are:
# ccache = enables build time ccache support (highly recommended)
# pkgcache = keeps a tbz2 of every built package (useful if your build stops prematurely)
# distcc = enable distcc support for building. You have to set distcc_hosts in your spec file.
options="ccache pkgcache"

# sharedir specifies where all of the catalyst runtime executables are. Most users do
# not need to change this.
sharedir="/usr/lib/catalyst"

# envscript allows users to set options such as http proxies, MAKEOPTS, GENTOO_MIRRORS,
# or any other environment variables needed for building.
# The envscript file sets environment variables like so:
# export FOO="bar"

#envscript="/root/catalyst-env.sh"
	</pre>
	
	<ul>
		<li><b>distdir</b> is the directory where your distfiles are kept (the default is
		fine for most Gentoo systems).</li>
		<li><b>options</b> accepts <c>ccache</c>, <c>pkgcache</c>, and <c>distcc</c> as valid keys.
		<c>ccache</c> and <c>pkgcache</c> are highly recommended for most systems, and <c>distcc</c>
		is recommended if distcc is already available on the network. For a more complete listing
		of each options key, please consult the
		<uri link="/proj/en/releng/catalyst/reference.xml">Catalyst Reference Manual</uri>. </li>
		<li><b>sharedir</b> is the location of the Catalyst runtime. It is not recommended
		that this be changed unless you know absolutely sure what you are doing.
		If you are using the CVS version of Catalyst, change this to the directory to where
		you checked out Catalyst.</li>
		<li><b>storedir</b>, although not in the configuration file by default, can be set to
		the location where Catalyst is to store all of its temporary and build files. It defaults
		to <path>/var/tmp/catalyst</path>.</li>
		<li><b>envscript</b> can be set to a script where certain environment variables, http proxies
		for example, can be set.</li>
	</ul>

			<p>An <c>envscript</c> could look like the following: </p>
			
			<pre caption="Example envscript">
# my envscript
export GENTOO_MIRRORS="http://gentoo.mirrors.pair.com"
export MAKEOPTS="-j4"
			</pre>

			<note>Do not set CFLAGS, CXXFLAGS, LDFLAGS, CHOST, or any other compilation specific
			environment variables in the envscript as it may have undesired effects on the building process.
			</note>

			<p>Although the default location for the Catalyst configuration file is
			<path>/etc/catalyst</path>, the environment variable <c>clst_conf</c> can
			be set to reflect a different location. </p>
			
		</body>
	</section>
</chapter>

<chapter>
	<title>The Basics - Specfiles and Snapshots</title>
	<section>
		<title>The Command Line and the Specfile</title>
		<body>
			<p>There are two ways to tell Catalyst how to do its job. The first way
			is to specify everything on the commandline:</p>
			
			<pre caption="Example Catalyst command line">
# catalyst -C subarch=x86 version_stamp=20040403 target=stage1 profile=default-x86-2004.0 \
> rel_type=default snapshot=20040403 source_subpath=default/stage2-x86-20040218
			</pre>
			
			<p>Alternatively, all of the options that were listed above on the commandline can
			be entered into a plaintext document called a &quot;specfile&quot;. Appending the
			<c>-f</c> option along with the filename of the specfile will instruct Catalyst to
			read the specfile and build using those settings.</p>
			
			<pre caption="Contents of an example Catalyst specfile (stage1.spec)">
subarch: x86
version_stamp: 20040403
target: stage1
profile: default-x86-2004.0
rel_type: default
snapshot: 20040403
source_subpath: default/stage2-x86-20040218
			</pre>

			<p>To build using the example specfile above, simply execute <c>catalyst -f stage1.spec</c>.</p>

			<p>Whether using the commandline or a specfile to pass arguments to Catalyst, there
			are some required variables that must be present for every build.
			The snapshot target is the only exception, but it will be covered later in this document. </p>

			<p><b>Required Catalyst variables:</b></p>
			
			<table>
				<tr>
					<th>Variable</th>
					<th>Definition</th>
				</tr>
				<tr>
					<ti>subarch</ti>
					<ti>The subarch that is being built. Examples are x86, athlon-xp, or sparc64</ti>
				</tr>
				<tr>
					<ti>version_stamp</ti>
					<ti>A version stamp that uniqely identifies the build. Can be a date, such as 20040403,
					or a version identifier, such as 2004.1</ti>
				</tr>
				<tr>
					<ti>target</ti>
					<ti>What target Catalyst is to build</ti>
				</tr>
				<tr>
					<ti>profile</ti>
					<ti>What system profile Catalyst uses to build the media. It can take values such as default-x86-2004.0
					or default-linux/x86/2004.0.</ti>
				</tr>
				<tr>
					<ti>rel_type</ti>
					<ti>The type of build that Catalyst should do. Most of the time it will be default,
					but it could also be hardened or selinux for their respective buildtypes</ti>
				</tr>
				<tr>
					<ti>snapshot</ti>
					<ti>Specifies which Portage snapshot Catalyst will use</ti>
				</tr>
				<tr>
					<ti>source_subpath</ti>
					<ti>Where Catalyst can find the seed stage for the target to be built.</ti>
				</tr>
				<tr>
					<ti>distcc_hosts (optional)</ti>
					<ti>hosts to use for distcc distributed building (if enabled in /etc/catalyst/catalyst.conf)</ti>
				</tr>
			</table>
			
			<p>Please consult the catalyst manpage for more information regarding Catalyst's
			command line options (highly recommended). </p>
			
		</body>
	</section>

	<section>
		<title>Portage Snapshots</title>
		<body>
			<p>Instead of using the build host's live Portage tree,
			Catalyst opts to use a Portage snapshot instead. The snapshot is simply a compressed tarball of
			<path>/usr/portage</path>. The advantage of using a a Portage
			snapshot over a live tree is portability. Snapshots make it easier to duplicate
			builds across machines since all that is needed is the applicable spec file and the Portage
			snapshot used in the build. </p>

			<p>Snapshots can be created by passing the options to Catalyst either on the command line or
			via a spec file. </p>

			<p>Catalyst supports the use of a Portage overlay for snapshot creation. Specify the location
			of the overlay by passing the option <c>portdir_overlay</c> to Catalyst when creating the
			snapshot. </p>
			
			<p>The snapshot target accepts the following options: </p>

			<table>
				<tr>
					<th>Variable</th>
					<th>Description</th>
				</tr>
				<tr>
					<ti>target</ti>
					<ti>target to build - must be set to &quot;snapshot&quot;</ti>
				</tr>
				<tr>
					<ti>version_stamp</ti>
					<ti>identifier for the snapshot, commonly a date</ti>
				</tr>
				<tr>
					<ti>portdir_overlay</ti>
					<ti>optional value specifying the location of a Portage overlay directory</ti>
				</tr>
			</table>

			<p>An example snapshot target specfile: </p>

			<pre caption="Example snapshot target specfile">
target: snapshot
version_stamp: 20040612
portdir_overlay: /tmp/portdir_overlay
			</pre>
		
		</body>
	</section>
	
</chapter>

<chapter>
	<title>Installation Stages</title>

	<section>
		<title>Seed Stages</title>
		<body>
			
			<p>Catalyst is capable of creating three stages - a stage1, a stage2, and a stage3. Each of these
			stages requires a "seed stage" to build from: </p>

			<table>
				<tr>
					<th>Target Stage</th>
					<th>Seed Stage</th>
				</tr>
				<tr>
					<ti>stage1</ti>
					<ti>stage3</ti>
				</tr>
				<tr>
					<ti>stage2</ti>
					<ti>stage1</ti>
				</tr>
				<tr>
					<ti>stage3</ti>
					<ti>stage2</ti>
				</tr>
			</table>

			<p>The only seed stage that needs to be fetched from the Internet is the stage3 tarball, which
			is used to build the stage1 tarball. Once the stage1 tarball is built, 
			Catalyst can use its own built stages as seed stages.</p>

			<p>Catalyst requires that seed stages be placed in a specific directory. A generic path
			(using Catalyst variables, substitute as needed) would be
			<c>$clst_storedir/builds/$clst_rel_type/$target-$subarch-$version_stamp</c>. A real word example 
			would be something like <c>/var/tmp/catalyst/builds/default/stage1-x86-20040611</c>. </p>

		</body>
	</section>

	<section>
		<title>Building an Installation Tarball</title>
		<body>

			<p>Save target and source_subpath, the rest of the specfile remains
			identical for each installation stage. To build an installation stage, simply
			substitute the <c>target</c> variable for the type of stage that is being built,
			and tweak the <c>source_subpath</c> so that it points to the correct seed stage. </p>
			
			<pre caption="Generic installation stage specfile">
subarch: x86
version_stamp: 20040403
target: $target
rel_type: default
profile: default-x86-2004.0
snapshot: 20040403
source_subpath: $seed_stage
<comment>(distcc is optional)</comment>
distcc_hosts: host1 host2 host3
			</pre>
			
			<p>Once the spec file is edited, start the build: </p>

			<pre caption="Building the an installation tarball">
# catalyst -f spec_file.spec
			</pre>

		</body>
	</section>

	<section>
		<title>Where are my Stages?</title>
		<body>
				
			<p>By default, Catalyst stores all built
			stages in <c>$storedir/builds/$rel_type</c>. The <c>$storedir</c> variable can be set to whatever
			directory that you would like it to be in <path>/etc/catalyst/catalyst.conf</path> and <c>$rel_type</c>
			is set in the specfile that is used to build the stage. On a system
			where <c>storedir</c> has not been redefined, and rel_type is "default", built stages can be found at
			<path>/var/tmp/catalyst/builds/default</path>.</p>

		</body>
	</section>
		
</chapter>

	<chapter>
		<title>Gentoo Reference Platform (GRP) Sets</title>
		
		<section>
			<title>Building a GRP Set</title>
			<body>

				<p>Gentoo Reference Platform, or GRP for short, is a collection of binary packages
				that can be used to quickly deploy or install a Gentoo Linux system. GRP is typically
				used to create PackageCDs for an official Gentoo Linux release. The example specfile
				is a very minimal one, but if you are interested
				in creating a GRP set similar to an official Gentoo PackageCD, the Release Engineering's PackageCD
				<uri link="/proj/en/releng/docs/packagecd_template.spec.txt">specfile template</uri> can
				be found linked from the Release Engineering <uri link="/proj/en/releng">project page</uri>. </p>

				<pre caption="Example GRP specfile">
subarch: x86
version_stamp:
target: grp
rel_type: default
profile: 20040403
snapshot: 2004043
source_subpath: default/stage3-x86-20040218
grp: src cd2

grp/use: 
	gtk2 
	gnome 
	-kde 

grp/src/type: srcset
grp/src/packages:
	nvidia-glx
	gentoo-sources

grp/cd2/type: pkgset
grp/cd2/packages:
	pciutils
	hdparm
	hotplug
				</pre>

				<p>A couple of things should jump out. First, a GRP build requires a stage3 as its seed stage.
				Make sure that the seed stage used matches the subarch that the GRP is being built for.
				Mixing subarches breaks packages like Perl, and that is just no fun. </p>

				<p>The second thing that should jump out is the addition of some new GRP specific variables. </p>

				<p><b>GRP specific variables:</b></p>

				<ul>
					<li><b>grp</b> specifies how to organize the GRP build. In the example above, two arguments,
					src and cd2, are given. Later in the specifile, specific building schemes can be assigned
					to these types, and the resulting packages will be arranged in 
					<path>$clst_sharedir/builds/$clst_rel_type/grp-$clst_subarch-$clst_version_stamp/{src,cd2}</path>.</li>

					<li><b>grp/use</b> is a list of what USE variables Portage should use when building
					the GRP set. Choose these with care. A rock solid group of USE variables can be found
					in the Release Engineering PackageCD template noted above. </li>

					<li><b>grp/{src,cd2}/type</b> is where the <c>grp</c> variable comes into play.
					There are two types of GRP that Catalyst knows how to handle. The first type is
					a <c>srcset</c> in which Catalyst simply downloads the source of the named packages
					(in this case nvidia-glx and gentoo-sources). The second type of GRP is a <c>pkgset</c>,
					and in this case, Catalyst will create full binary packages by downloading the source
					of the named packages (in this case pciutils, hdparm, and hotplug) and compiling it.
					I mentioned earlier that the <c>grp</c> variable comes into play. Notice that there
					are two <c>grp/type</c> statements in this specfile. The middle part of <c>grp/type</c>
					(i.e. grp/cd2/type, middle part is cd2) specifies which organizational <c>grp</c>
					directory to deposit the finished package into. </li>
				</ul>

			</body>
		</section>

	</chapter>
	
	<chapter>
		<title>Bootable LiveCDs</title>
	
		<section>
			<title>Introduction</title>
			<body>
			
				<p>The ability to create bootable LiveCDs is perhaps one of the neatest features of Catalyst.
				Once you get the hang of how to build a LiveCD, an entire new world opens itself up.
				I usually keep three or four LiveCDs at my disposal: a custom built installation LiveCD that
				can fit on a mini-CDR (200MB), a network/ penetration Testing LiveCD for work, and a X LiveCD
				that has all of my favorite programs that I can take to the College lab with me. </p>

			</body>
		</section>

		<section>
			<title>LiveCD Stage1</title>
			<body>

				<p>LiveCDs are created in two stages. The first stage is referred to as
				"livecd-stage1" by Catalyst. The purpose of this stage is to build all of the
				programs and utilities that are going to be available on the LiveCD. The livecd-stage1
				build is very similar to the GRP build process described earlier in the guide. </p>

				<p>The livecd-stage1 target requires a stage3 installation tarball as its seed stage.
				If you have previously built a stageset, then you can point <c>source_subpath</c> in
				your specfile to the location where it exists. If you do not yet have a stage3 installation
				tarball on your system, refer to the seed stage section earlier in this guide
				on how to fetch the seed stage.</p>
				
				<p>This example specfile is what the Release Engineering team uses to build Gentoo LiveCDs.
				The most up-to-date revision of this
				<uri link="/proj/en/releng/docs/livecd-stage1_template.spec.txt">specfile</uri>
				can be found linked from the Release Enginnering
				<uri link="/proj/en/releng">project page</uri>.</p>

				<pre caption="Example livecd-stage1 specfile">
subarch: x86
version_stamp: 20040403 
target: livecd-stage1
rel_type: default
profile: default-x86-2004.0
snapshot: 20040403
source_subpath: default/stage3-x86-20040218
livecd/use:
	-X
	-gtk
	-svga
	ipv6
	socks5
	livecd
	fbcon
	
livecd/packages:
	baselayout
	livecd-tools
	genkernel
	ucl
	kudzu
	module-init-tools
	hotplug
	irssi
	aumix
	metalog
	pciutils
	parted
	mt-st
	links
	star
	strace
	raidtools
	nfs-utils
	jfsutils
	usbutils
	speedtouch
	xfsprogs
	e2fsprogs
	reiserfsprogs
	hdparm
	nano
	less
	openssh
	dhcpcd
	mingetty
	pwgen
	popt
	dialog
	rp-pppoe
	gpm
	screen
	mirrorselect
	penggy
	iputils
	hwdata-knoppix
	hwsetup
	bootsplash
	device-mapper
	lvm2
	evms
	vim
	gpart
	pwgen
	pptpclient
	mdadm
	tcptraceroute
	netcat
	ethtool
	wireless-tools
</pre>
								
				<p>The first section of the spec file is just the same as the other specfiles that we have
				used previously. The only two parts that are new are <c>livecd/use</c> and <c>livecd/packages</c>.
				<c>livecd/use</c> specifies what USE variables should be used when building the packages for
				the LiveCD. These are purposefully kept at a minimum for space concerns, but you can change
				to fit your liking. The format used is the same as in <path>/etc/make.conf</path>.
				<c>livecd/packages</c> is a list of packages to be included along with the contents of the
				stage3 installation stage on the LiveCD. To comment out a package from the list, place
				a sharp ("#") at the beginning of the line of the package to be commented.</p>

				<p>Once you have edited the specfile to your liking, start up the build: </p>

				<pre caption="livecd-stage1 build">
# catalyst -f livecd_stage1.spec
				</pre>

				<p>After building has completed, the finalized livecd-stage1 build will be found in
				<path>$clst_sharedir/tmp/default/livecd-stage1-x86-20040403/</path>. Note that this is
				different from where the stages are found. The reason behind this is that a livecd-stage1
				build is not really useful just by itself as it is just an uncompressed filesystem.
				The livecd-stage2 build is what takes that filesystem
				and makes it ready to burn onto a CD. </p>
				
			</body>
		</section>
		
		<section>
			<title>LiveCD Stage2</title>
			<body>

				<p>All of the LiveCD "magic" takes place during the LiveCD stage2 build.
				This build sets up the bootloader, kernels, and user runtime just to name a few.
				This part of the build process is rich in configuration options, so take your time
				reading through the documentation, and don't be afraid to experiment!</p>
				
				<p>Due to the nature of Catalyst development at this time, the official livecd-stage2
				<uri link="/proj/en/releng/docs/livecd-stage2_template.spec.txt">specfile</uri>
				remains as the most up-to-date documentation. The many options of the livecd-stage2
				build are well commented, and examples are provided.</p>

				<p>Once the specfile has been edited to your liking, start the build: </p>
			
				<pre caption="livecd-stage2 build">
# catalyst -f livecd_stage2.spec
				</pre>

				<p>When building is complete, the final ISO can be found at the name and path
				specified by "livecd/iso" in the specfile.</p>

			</body>
		</section>
				
	</chapter>

	<chapter>
		<title>Resources</title>
		<section>
			<title>Resources</title>
			<body>
			<ul>
				<li><uri link="/proj/en/releng/catalyst/reference.xml">The Catalyst Reference Manual</uri></li>
				<li><uri link="/proj/en/releng/docs/livecd-stage1_template.spec.txt">livecd-stage1 example specfile</uri></li>
				<li><uri link="/proj/en/releng/docs/livecd-stage2_template.spec.txt">livecd-stage2 example specfile</uri></li>
				<li><uri link="/proj/en/releng/docs/packagecd_template.spec.txt">packagecd example specfile</uri></li>
				<li><uri link="/proj/en/releng">Gentoo Release Engineering project page</uri></li>
			</ul>
			</body>
		</section>
	</chapter>

</guide>
