<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/project.xsl" type="text/xsl"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE project SYSTEM "/dtd/project.dtd">
<project>

<name>Catalyst</name>
<longname>Catalyst</longname>

<description>
This project develops the catalyst tool, which is used to build official Gentoo
stage tarballs, packages and LiveCDs.
</description>

<longdescription>
This project develops the catalyst tool, which is used to build official Gentoo
stage tarballs, packages and LiveCDs. This tool is designed to be easy to
use, customize, extend and maintain.
</longdescription>

<goals>
<p>The goal of the catalyst project is to provide a single multi-faceted tool that
can reliably build all aspects of a Gentoo Linux release: stage tarballs, GRP package
sets and LiveCDs.</p>

<p>Our specific development goals for <c>catalyst</c> include the following: ensuring it
provides high-quality builds of Gentoo Linux, and for the tool to be easy to use, customize,
extend and maintain. The catalyst tool is intended to be used by those who wish to
create their own customized versions of Gentoo Linux, or their own customized LiveCDs.
Our goal is to make catalyst a powerful tool that's a pleasure to use, and to ensure
that the code we write is maintainable and of high-quality.
</p>
</goals>

<dev role="lead" description="Design lead">zhen</dev>
<dev role="Member" description="initscripts">agriffis</dev>
<dev role="Member" description="initscripts">azarah</dev>

<extrachapter position="top">
	<title>Documentation</title>
	<section>
	<body>
	
	<p>The <uri link="reference.xml">Catalyst Reference Manual</uri> 
	contains a great deal of useful information about catalyst.</p>

	<p>The <uri link="catalyst-howto.xml">Catalyst HOWTO</uri>
	(in progress) details how to create installation stages,
	LiveCDs, PackageCDs, and a tinderbox for QA testing.</p>
	
	</body>
	</section>
</extrachapter>

<extrachapter position="bottom">
	<title>Supported Architectures</title>
	<section>
	<body>
	<p>Catalyst supports a number of architectures. In catalyst-speak, an "architecture" is a
	general type of CPU platform. Here is a complete list of architectures supported by catalyst:</p>
	<table>
	<tr>
	<th>Architecture</th>
	<th>Description</th>
	</tr>
	<tr>
		<ti><c>x86</c></ti>
		<ti>Intel-compatible PC, ranging from i386 to Pentium 4 and Athlon XP</ti>
	</tr>
	<tr>
		<ti><c>amd64</c></ti>
		<ti>AMD's 64-bit platform, also known as "Opteron" or "x86-64"</ti>
	</tr>
	<tr>
		<ti><c>alpha</c></ti>
		<ti>The Alpha processor (all flavors)</ti>
	</tr>
	<tr>
		<ti><c>hppa</c></ti>
		<ti>HP's PA-RISC systems</ti>
	</tr>
	<tr>
		<ti><c>ia64</c></ti>
		<ti>Intel's Itanium 64-bit platform (Itanium Classic and Itanium 2)</ti>
	</tr>
	<tr>
		<ti><c>ppc</c></ti>
		<ti>Apple's PowerPC platform, including original PowerPC systems, G3, G4 and G5 in 32-bit mode</ti>
	</tr>
	<tr>
		<ti><c>sparc</c></ti>
		<ti>32-bit Sparc-based systems from Sun</ti>
	</tr>
	<tr>
		<ti><c>sparc64</c></ti>
		<ti>64-bit UltraSparc-based systems</ti>
	</tr>
	<tr>
		<ti><c>mips</c></ti>
		<ti>SGI MIPS/Cobalt based systems</ti>
	</tr>
	<tr>
		<ti><c>arm</c></ti>
		<ti>ARM based processors</ti>
	</tr>
	</table>

	<p>For each architecture, catalyst supports a number of "sub-architectures." A sub-architecture is a specific
	variant of the architecture. For example, <c>pentium4</c> is a sub-architecture of the <c>x86</c> architecture.
	Here is a list of all sub-architectures supported by catalyst:</p>

	<table>
	<tr>
		<th>Architecture</th>
		<th>Sub-architectures</th>
	</tr>
	<tr>
		<ti><c>x86</c></ti>
		<ti><c>x86 i386 i486 i586 i686 pentium-mmx athlon athlon-xp athlon-mp pentium3 pentium4</c></ti>
	</tr>
	<tr>
		<ti><c>amd64</c></ti>
		<ti><c>amd64</c></ti>
	</tr>
	<tr>
		<ti><c>alpha</c></ti>
		<ti><c>alpha ev4 ev45 ev5 ev56 pca56 ev6 ev67</c></ti>
	</tr>
	<tr>
		<ti><c>hppa</c></ti>
		<ti><c>hppa</c></ti>
	</tr>
	<tr>
		<ti><c>ia64</c></ti>
		<ti><c>ia64</c></ti>
	</tr>
	<tr>
		<ti><c>ppc</c></ti>
		<ti><c>ppc power-ppc g3 g4</c></ti>
	</tr>
	<tr>
		<ti><c>sparc</c></ti>
		<ti><c>sparc</c></ti>
	</tr>
	<tr>
		<ti><c>sparc64</c></ti>
		<ti><c>sparc64</c></ti>
	</tr>
	<tr>
		<ti><c>mips</c></ti>
		<ti><c>mips mips1 mips2 mips3 mips4 mipsel mipsel1 mipsel2 mipsel3 mipsel4 cobalt</c></ti>
	</tr>
	<tr>
		<ti><c>arm</c></ti>
		<ti><c>arm</c></ti>
	</tr>
	</table>

	<p>You'll notice that all architectures have a sub-architecture with the same name as the architecture. This
	sub-architecture is meant to represent a "generic" build that should work on all systems in that architecture.
	Each sub-architecture has an associated set of <c>CFLAGS</c>, <c>CXXFLAGS</c>, as well as a <c>CHOST</c> and
	set of <c>USE</c> variables that are enabled on that sub-architecture. The <c>USE</c> settings are intended
	to enable any CPU-specific options, such as <c>mmx</c> or <c>altivec</c>.</p>

	<note>Catalyst currently also supports the ability to build <c>x86</c> architecture stages on <c>amd64</c> systems.
	To do this, simply <c>emerge linux32</c> and use catalyst like you normally would on an x86 system. The resultant
	builds will be fully 32-bit.</note>

	</body>
	</section>
</extrachapter>

<extrachapter position="bottom">
	<title>Catalyst FAQ</title>
	<section>
	
	<body>
	<p><b>Q: How do I build a stage2 and stage3 tarball for a non-generic CPU type,
	such as <c>pentium4</c> or <c>g4</c>?</b></p>
	<p>A: First, make sure that your hardware is capable of building such a stage.
	If you want to build a <c>pentium4</c> stage,
	you will need to build on a Pentium 4 or AMD64/Opteron system. 
	You can't build a <c>pentium4</c> stage on an Athlon XP system,
	as Athlon XP CPUs do not support SSE2 instructions, and SSE2 instructions will be enabled for
	<c>pentium4</c> stages. Likewise,
	if you want to build a <c>g4</c> stage, you will need to do this on a PowerPC G4 or G5 system.</p>
	<p>Once you've made sure that you're building on the right hardware, simply follow the steps
	above, but for building the stage2,
	simply change the <c>subarch</c> setting to a valid 
	non-generic subarchitecture (ie. <c>pentium4</c>.) Then your stage2 will
	be built for the subarchitecture that you specify. Then, use this stage2 as the "seed" stage to
	build your stage3. Of course, you will also want to modify the <c>subarch</c> setting in your stage3
	spec to match what you used in your stage2 spec.</p>

	<p><b>Q: I want to build a bunch of stages for various subarches. How should I do this?</b></p>
	<p>A: First, build a generic stage1. Then use this stage1 to build a specialized stage2 and stage3. 
	Use the stage1 again to build another specialized stage2 and stage3. You do not need to re-build the 
	stage1 -- all your specialized stage2s and stage3s can use the same "seed" stage1.</p>

	<p><b>Q: Can I build a stage1 for a non-generic CPU type?</b></p>
	<p>A: This is a very bad idea, as users expect stage1's to work on any type of sub-architecture. This way, they can use
	the stage1 on any system without worries. You should be sure to not "pollute" your stage1 with non-generic-CPU-specific code.
	Always use a "generic" stage2 or stage3 to build a new stage1.</p>

	<p><b>Q: I thought that catalyst was able to build stages "from scratch." If catalyst builds stages from scratch, then
	why does it need a "seed stage"?</b></p>
	<p>A: Good question. As you know, a stage2 and stage3 are dependent on
	previous stages for building, which is expected
	and made clear by their name (ie. a "stage2" implies that there was a "stage1".)
	However, catalyst does need a seed stage for building a stage1, so in regards to building
	a stage1 it's worth looking into why this is necessary. When building
	a stage1, catalyst uses the seed (stage2 or stage3) to set up a chroot environment.
	Inside the chroot environment, the new stage1 is built by setting the <c>ROOT</c> environment
	variable to <path>/tmp/stage1root</path>. This instructs Portage
	to merge all new packages not to the current filesystem, but to the filesystem in
	<path>/tmp/stage1root</path>. <path>/tmp/stage1root</path>
	is then tarred up and becomes the target stage1. What this means is that when catalyst
	builds a stage1, the stage1 itself does not
	inherit any binaries or libraries from the seed that is used. The seed that is used <e>does</e>
	impact the target stage1 somewhat -- the Linux headers on the seed are used for building the stage1's
	glibc, and the compilers on the seed are used to compile all the
	programs on the stage1. The seed stage is used to isolate the stage1 build process from your local system,
	and also allows for x86 stage1s to be built on amd64 systems, for example.</p>

	</body>
	</section>
</extrachapter>

</project>
