<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/project.xsl" type="text/xsl"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE project SYSTEM "/dtd/project.dtd">
<project>

<name>catalyst</name>
<longname>catalyst</longname>

<description>
This project develops the catalyst tool, which is used to build official Gentoo
stage tarballs, packages and LiveCDs.
</description>

<longdescription>
This project develops the catalyst tool, which is used to build official Gentoo
stage tarballs, packages and LiveCDs. This tool is designed to be easy to
use, customize, extend and maintain.
</longdescription>

<goals>
<p>The goal of the catalyst project is to provide a single multi-faceted tool that
can reliably build all aspects of a Gentoo Linux release: stage tarballs, GRP package
sets and LiveCDs.</p>

<p>Our specific development goals for <c>catalyst</c> include the following: ensuring it
provides high-quality builds of Gentoo Linux, and for the tool to be easy to use, customize,
extend and maintain. The catalyst tool is intended to be used by those who wish to
create their own customized versions of Gentoo Linux, or their own customized LiveCDs.
Our goal is to make catalyst a powerful tool that's a pleasure to use, and to ensure
that the code we write is maintainable and of high-quality.
</p>
</goals>

<dev role="lead" description="Design lead">drobbins</dev>
<dev role="LiveCD/genkernel">brad_mssw</dev>
<dev description="catalyst co-designer">zhen</dev>
<dev description="genkernel">livewire</dev>
<dev description="initscripts">azarah</dev>

<extrachapter position="top">
	<title>Catalyst Reference Manual</title>
	<section>
	<body>
	<p>The <uri link="reference.xml">Catalyst Reference Manual</uri> is now in a separate document and contains
	a great deal of useful information about catalyst. Introductory Installation and Usage documentation follows
	later on this page.</p>
	</body>
	</section>
</extrachapter>

<extrachapter position="bottom">
	<title>Catalyst Installation and Usage Documentation</title>
	<section>
	<title>Installation</title>
	<body>
	<p>Here's how to use catalyst. First, either check it out of CVS (at <path>gentoo/src/catalyst</path>) or download a snapshot from <uri>http://dev.gentoo.org/~drobbins/catalyst</uri>. Unpack the directory, and then create an <path>/etc/catalyst.conf</path> that looks like this:</p>

	<pre caption="Example /etc/catalyst.conf">
distdir="/mnt/misc/distfiles"
options="ccache pkgcache"
sharedir="/home/drobbins/cvs/gentoo/src/catalyst"
	</pre>
	
	<p>The <c>sharedir</c> variable tells catalyst where to find its various
	plugins, and should point to the main catalyst directory that you
	created. the <c>options</c> variable is used to turn on <c>.tbz2</c> package
	caching, which is off by default (you'll likely want it on, however.)
	Also, <c>distdir</c> is used here to tell catalyst where to look for/store
	distfiles. The default is <path>/usr/portage/distfiles</path>. If you wish to use
	the default setting, simply omit the line from your config file.
	</p>

	<note>If you're not going to be the only person using catalyst on the machine, set the <c>$clst_conf</c>
	variable in your shell, specifying a path to a <path>catalyst.conf</path> variable in your home directory.
	If <c>$clst_conf</c> is set when catalyst runs, it will use this variable to locate <path>catalyst.conf</path>
	rather than using the global <path>/etc/catalyst.conf</path> file. This allow multiple users to have their
	own customized share and build directories, if necessary.</note>

	<p>Here are other variables you can set, and their default values.
	Please remember that <b>strings must be quoted</b>, as <path>/etc/catalyst.conf</path>
	uses python syntax:</p>

	<table>
	<tr><th>variable</th><th>default value</th><th>description</th></tr>

	<tr><ti><c>storedir</c></ti><ti><path>/var/tmp/catalyst</path></ti><ti>Parent directory for all building and storing of completed builds</ti></tr>
	<tr><ti><c>sharedir</c></ti><ti><path>/usr/share/catalyst</path></ti><ti>Where the main directory for catalyst is located</ti></tr>
	<tr><ti><c>distdir</c></ti><ti><path>/usr/portage/distfiles</path></ti><ti>Where catalyst should look for distfiles</ti></tr>
	<tr><ti><c>portdir</c></ti><ti><path>/usr/portage</path></ti><ti>Portage tree that catalyst will use for creating Portage tree snapshots</ti></tr>
	<tr><ti><c>options</c></ti><ti><c>ccache</c></ti><ti>Catalyst options/extensions that are enabled. Others: <c>pkgcache</c></ti></tr>
	</table>

	<p>You may also want to create a <path>/usr/bin/catalyst</path> symlink that points to the
	real location of your catalyst executable script.</p>
	
	</body>
	</section>
	<section>
	<title>First Steps -- Creating a Portage Tree Snapshot</title>
	<body>
	<p>Catalyst works by using Portage tree snapshots, which are nothing more than tarballs containing
	an entire Portage tree. Portage tree snapshots are used so that catalyst can deliver consistent results -- using the same Portage tree snapshot and catalyst settings, two different people on two different machines should be able to build identical stages. This is an important design characteristic of catalyst.</p>

	<p>Before you generate a Portage tree snapshot, first make sure that the Portage tree you'll be
	snapshotting meets these basic requirements. Your snapshot should be from 06 Nov 2003 at the earliest,
	and <path>portage-2.0.49-r15</path> or later should be unmasked for the architecture for which you
	will be building.</p>

	<impo><b>For Gentoo developers only:</b> If you are a Gentoo
	arch lead, make sure that the <c>GRP_STAGE23_USE</c> variable is
	defined in your profile's <path>make.defaults</path> file.
	<c>GRP_STAGE23_USE</c> will tell catalyst what <c>USE</c> variables
	should be enabled when stage2 and stage3 are built. Without
	<c>GRP_STAGE23_USE</c> defined in your <path>make.defaults</path> file,
	your catalyst-built stages may not work properly. <c>GRP_STAGE23_USE</c> is used to define stage2/3 USE settings
	so that packages like <path>db</path> (that now recognize a <c>java</c> <c>USE</c> setting) don't
	pull in an entire JDK into our default stage3. We want <c>java</c> to be enabled
	in <c>USE</c> by default (for those building up from a stage1 by hand, so that things like Mozilla will have java support by default), but we don't want to be shipping
	a full JDK in our default stage3. That would add an unreasonable amount of bloat.</impo>

	<p>To create a snapshot of your Portage tree, type:</p>

	<pre caption="Generating a snapshot with catalyst">
# catalyst target=snapshot version_stamp=20031102
</pre>

	<p>Assuming you are using the default <c>storedir</c> setting of <path>/var/tmp/catalyst</path>,
	the following file will be created:</p>

	<pre>
/var/tmp/catalyst/snapshots/portage-20031102.tar.bz2
	</pre>

	<p>Now that you have a snapshot, you can prepare catalyst to build a stage, GRP set, LiveCD,
	or do a tinderbox build for QA purposes.</p>
	
	</body>
	</section>
	<section>
	<title>Targets, Architectures and Sub-Architectures</title>
	<body>
	<p>Catalyst supports a variety of targets, architectures and sub-architectures. I'll explain
	what each of these terms mean. A "target" is an end-product that catalyst can build for you.
	For example, a stage1 tarball is a target. A Portage tree snapshot is a target. A LiveCD is
	also considered to be a target. Here is a complete list of all the targets that catalyst supports,
	as of 20031228:</p>

	<table>
	<tr><th>Target name</th><th>Description</th><th>Requirements to build (besides snapshot)</th></tr>
	<tr><ti><c>snapshot</c></ti><ti>Portage tree snapshot tarball</ti><ti>A valid Portage tree</ti></tr>
	<tr><ti><c>stage1</c></ti><ti>A stage1 tarball (used for bootstrapping)</ti><ti>A "generic CPU" stage2 or stage3 tarball for your architecture (ie. <c>x86</c> rather than <c>pentium4</c>)</ti></tr>
	<tr><ti><c>stage2</c></ti><ti>A stage2 tarball (used for <c>emerge system</c>)</ti><ti>An available stage1 tarball for your architecture</ti></tr>
	<tr><ti><c>stage3</c></ti><ti>A stage3 tarball (complete Gentoo base system)</ti><ti>An available stage2 tarball with a sub-architecture that matches that of the target stage3 (ie. use a <c>pentium4</c> stage2 to build a <c>pentium4</c> stage3)</ti></tr>
	<tr><ti><c>grp</c></ti><ti>A GRP package and source tarball set, organized into per-CD groupings.</ti><ti>A stage3 tarball</ti></tr>
	<tr><ti><c>tinderbox</c></ti><ti>QA build engine -- for testing ebuilds</ti><ti>A stage3 tarball</ti></tr>
	<tr><ti><c>livecd-stage1</c></ti><ti>First stage of LiveCD building</ti><ti>A stage3 tarball</ti></tr>
	<tr><ti><c>livecd-stage2</c></ti><ti>Second stage of LiveCD building</ti><ti>A livecd-stage1 tarball</ti></tr>
	<tr><ti><c>livecd-stage3</c> (not yet implemented)</ti><ti>A tarball that can be used to create LiveCD ISOs</ti><ti>A livecd-stage2 tarball</ti></tr>
	<tr><ti><c>livecd-iso</c></ti><ti>A bootable, burnable LiveCD ISO</ti><ti>A livecd-stage3 tarball</ti></tr>
	</table>
	
	<p>Catalyst also supports a number of architectures. In catalyst-speak, an "architecture" is a
	general type of CPU platform. Here is a complete list of architectures supported by catalyst as
	of 20031228:</p>

	<table>
	<tr><th>Architecture</th><th>Description</th></tr>
	<tr><ti><c>x86</c></ti><ti>Intel-compatible PC, ranging from i386 to Pentium 4 and Athlon XP</ti></tr>
	<tr><ti><c>amd64</c></ti><ti>AMD's 64-bit platform, also known as "Opteron" or "x86-64"</ti></tr>
	<tr><ti><c>alpha</c></ti><ti>The Alpha processor (all flavors)</ti></tr>
	<tr><ti><c>hppa</c></ti><ti>HP's PA-RISC systems</ti></tr>
	<tr><ti><c>ia64</c></ti><ti>Intel's Itanium 64-bit platform (Itanium Classic and Itanium 2)</ti></tr>
	<tr><ti><c>ppc</c></ti><ti>Apple's PowerPC platform, including original PowerPC systems, G3, G4 and G5 in 32-bit mode</ti></tr>
	<tr><ti><c>sparc</c></ti><ti>32-bit Sparc-based systems from Sun</ti></tr>
	<tr><ti><c>sparc64</c></ti><ti>64-bit UltraSparc-based systems</ti></tr>
	</table>

	<p>For each architecture, catalyst supports a number of "sub-architectures." A sub-architecture is a specific
	variant of the architecture. For example, <c>pentium4</c> is a sub-architecture of the <c>x86</c> architecture.
	Here is a list of all sub-architectures supported by catalyst as of 20031228:</p>

	<table>
	<tr><th>Architecture</th><th>Sub-architectures</th></tr>
	<tr><ti><c>x86</c></ti><ti><c>x86 i386 i486 i586 i686 pentium-mmx athlon athlon-xp athlon-mp pentium3 pentium4</c></ti></tr>
	<tr><ti><c>amd64</c></ti><ti><c>amd64</c></ti></tr>
	<tr><ti><c>alpha</c></ti><ti><c>alpha ev4 ev45 ev5 ev56 pca56 ev6 ev67</c></ti></tr>
	<tr><ti><c>hppa</c></ti><ti><c>hppa</c></ti></tr>
	<tr><ti><c>ia64</c></ti><ti><c>ia64</c></ti></tr>
	<tr><ti><c>ppc</c></ti><ti><c>ppc power-ppc g3 g4</c></ti></tr>
	<tr><ti><c>sparc</c></ti><ti><c>sparc</c></ti></tr>
	<tr><ti><c>sparc64</c></ti><ti><c>sparc64</c></ti></tr>
	</table>

	<p>You'll notice that all architectures have a sub-architecture with the same name as the architecture. This
	sub-architecture is meant to represent a "generic" build that should work on all systems in that architecture.
	Each sub-architecture has an associated set of <c>CFLAGS</c>, <c>CXXFLAGS</c>, as well as a <c>CHOST</c> and
	set of <c>USE</c> variables that are enabled on that sub-architecture. The <c>USE</c> settings are intended
	to enable any CPU-specific options, such as <c>mmx</c> or <c>altivec</c>.</p>

	<note>Catalyst currently also supports the ability to build <c>x86</c> architecture stages on <c>amd64</c> systems.
	To do this, simply <c>emerge linux32</c> and use catalyst like you normally would on an x86 system. The resultant
	builds will be fully 32-bit.</note>

	</body>
	</section>
	<section>
	<title>From stage1 to stage3</title>
	<body>
	<p>I will now guide you through the process of building your own stage1, stage2 and stage3 tarball,
	in that order.
	To begin, you'll first need to create a Portage tree snapshot as explained above. If you haven't
	done this already, type:</p>

<pre caption="Generating a snapshot with catalyst">
# catalyst target=snapshot version_stamp=20031102
</pre>
	<p>Next, you'll need to grab a "seed" stage2 or stage3 that will be used to build your new stage1.
	Stage1 tarballs are always built for a "generic" CPU sub-architecture, and should use a "generic"
	stage2 or stage3 as a "seed." For example, if you are building for the <c>x86</c> architecture,
	grab a stage2 or stage3 tarball built for the <c>x86</c> sub-architecture, not the <c>pentium4</c>
	subarchitecture. A stage2 or stage3 tarball for the <c>x86</c> sub-architecture will allow you
	to build a proper generic <c>x86</c> stage1.</p>

	<p>Stage2 and stage3 tarballs are available from our mirrors. They typically have the following
	naming format: <c>stage[X]-[subarch]-[version_stamp].tar.bz2</c>. Download a generic stage2 or
	stage3 for your architecture, and then place it in the proper location in <path>/var/tmp/catalyst</path>:
	</p>

	<ul>
	<li>"x86" stages should be placed in <path>/var/tmp/catalyst/builds/default-x86-1.4/</path></li>
	<li>"ppc" stages should be placed in <path>/var/tmp/catalyst/builds/default-ppc-1.4/</path></li>
	</ul>

	<p>If the target directory doesn't exist, create it first by typing <c>install -d [directoryname]</c>.</p>

	<p>The target directory path is determined as follows: <c>[storedir]/builds/[rel_type]-[mainarch]-[rel_version]</c>.
	The substring <c>[rel_type]-[mainarch]-[rel_version]</c> should expand to match the name of the profile (from <path>/usr/portage/profiles</path>) you are
	going to use for building. <c>[mainarch]</c> is catalyst's keyword for the "architecture" of the build. Variable
	names that we haven't introduced yet, such as <c>[rel_type]</c> and <c>[rel_version]</c>, will be passed to <c>catalyst</c> as arguments in just a bit. This may be a bit confusing at first, but should become easier to understand as we proceed.</p>

	<p>OK, now we will need to create what is called a catalyst "spec" file. A spec file contains all the
	information and settings that catalyst needs to build your target, which in our case is our new stage1.
	Create a file and add the following information to it:</p>

	<pre caption="x86-stage1-20031109.spec: Our initial catalyst spec file for building a new stage1">
subarch: x86
version_stamp: 20031109
target: stage1
rel_type: default
rel_version: 1.4
snapshot: 20031109
source_subpath: default-x86-1.4/stage2-x86-20031102
	</pre>

	<p>Now, I'll explain what this information means. The <c>subarch</c> keyword specifies the sub-architecture
	of the target stage1. For a stage1, this should always be a "generic" sub-arch, such as <c>x86</c> or <c>ppc</c>.
	You'll notice that we don't specify a "main" architecture (also known as <c>mainarch</c>.) catalyst figures out our architecture by looking
	at the <c>subarch</c> variable. The <c>snapshot</c> variable specifies the Portage snapshot that will be used to build our new stage1,
	and should match the <c>version_stamp</c> you specified to catalyst when you created your Portage tree snapshot.
	</p>

	<note>You can find plenty of example spec files in <c>[sharedir]/examples</c>.</note>

	<p>
	Catalyst will use the stage tarball specified in <c>source_subpath</c> to build our new stage1. It will look for this
	stage tarball in <c>[storedir]/builds/[source_subpath].tar.bz2</c>.
	<c>version_stamp</c> specifies the version that will be assigned to our completed stage1 tarball. Our completed
	stage1 tarball will be stored at the following location: <c>[storedir]/builds/[rel_type]-[mainarch]-[rel_version]/[target]-[subarch]-[version_stamp].tar.bz2</c>. The Portage profile that will be used to build our stage1 will be found in our Portage tree snapshot, at <c>/usr/portage/profiles/[rel_type]-[mainarch]-[rel_version]</c></p>

	<p>OK, now it's time to build our stage1 tarball. To do this, type the following command, specifying the path to your
	spec file as the last argument:</p>

	<path caption="Telling catalyst to build a new stage1">
# catalyst -f /path/to/x86-stage1-20031109.spec
	</path>

	<p>Catalyst will begin unpacking and building, and should complete successfully. Once completed, you should have a new
	stage1 tarball at the following location:</p>

	<path>
/var/tmp/catalyst/builds/default-x86-1.4/stage1-x86-20031109.tar.bz2
</path>

	<p>To build a new stage2, create the following spec file:</p>

	<pre caption="x86-stage2-20031109.spec: Spec file for building a stage2 tarball">
subarch: x86
version_stamp: 20031109
target: stage2
rel_type: default
rel_version: 1.4
snapshot: 20031109
source_subpath: default-x86-1.4/stage1-x86-20031109
	</pre>
	
	<p>Note that the <c>target</c> and <c>source_subpath</c> keywords have been update to reflect the fact that
	we are building a stage2 tarball, and that we are using the stage1 tarball that we just build as the "seed"
	tarball for this new stage2. Then call catalyst as follows:</p>

	<pre>
# catalyst -f /path/to/x86-stage2-20031109.spec
</pre>
	<p>Once the stage2 tarball has finished building, it can be used to build a new x86 stage3. To do this,
	use the following spec file:</p>

	<pre caption="x86-stage3-20031109.spec: Spec file for building a stage3 tarball">
subarch: x86
version_stamp: 20031109
target: stage3
rel_type: default
rel_version: 1.4
snapshot: 20031109
source_subpath: default-x86-1.4/stage2-x86-20031109
	</pre>
	
	<p>Again, note that <c>target</c> and <c>source_subpath</c> have been updated accordingly. Tell catalyst
	to build the stage3 tarball by typing:</p>

<pre>
# catalyst -f /path/to/x86-stage3-20031109.spec
</pre>

	<p>Once complete, you should find a stage3 tarball at <c>/var/tmp/catalyst/builds/default-x86-1.4/stage3-x86-20031109.tar.bz2</c>.</p>
	
	<p>Some questions and answers follow.</p>

	<p><b>Q: How do I build a stage2 and stage3 tarball for a non-generic CPU type, such as <c>pentium4</c> or <c>g4</c>?</b></p>
	<p>A: First, make sure that your hardware is capable of building such a stage. If you want to build a <c>pentium4</c> stage,
	you will need to build on a Pentium 4 or AMD64/Opteron system. You can't build a <c>pentium4</c> stage on an Athlon XP system,
	as Athlon XP CPUs do not support SSE2 instructions, and SSE2 instructions will be enabled for <c>pentium4</c> stages. Likewise,
	if you want to build a <c>g4</c> stage, you will need to do this on a PowerPC G4 or G5 system.</p>
	<p>Once you've made sure that you're building on the right hardware, simply follow the steps above, but for building the stage2,
	simply change the <c>subarch</c> setting to a valid non-generic subarchitecture (ie. <c>pentium4</c>.) Then your stage2 will
	be built for the subarchitecture that you specify. Then, use this stage2 as the "seed" stage to build your stage3. Of course,
	you will also want to modify the <c>subarch</c> setting in your stage3 spec to match what you used in your stage2 spec.</p>

	<p><b>Q: I want to build a bunch of stages for various subarches. How should I do this?</b></p>
	<p>A: First, build a generic stage1. Then use this stage1 to build a specialized stage2 and stage3. Use the stage1 again to
	build another specialized stage2 and stage3. You do not need to re-build the stage1 -- all your specialized stage2s and stage3s
	can use the same "seed" stage1.</p>

	<p><b>Q: Can I build a stage1 for a non-generic CPU type?</b></p>
	<p>A: This is a very bad idea, as users expect stage1's to work on any type of sub-architecture. This way, they can use
	the stage1 on any system without worries. You should be sure to not "pollute" your stage1 with non-generic-CPU-specific code.
	Always use a "generic" stage2 or stage3 to build a new stage1.</p>

	<p><b>Q: I thought that catalyst was able to build stages "from scratch." If catalyst builds stages from scratch, then
	why does it need a "seed stage"?</b></p>
	<p>A: Good question. As you know, a stage2 and stage3 are dependent on previous stages for building, which is expected
	and made clear by their name (ie. a "stage2" implies that there was a "stage1".) However, catalyst does need a seed stage
	for building a stage1, so in regards to building a stage1 it's worth looking into why this is necessary. When building
	a stage1, catalyst uses the seed (stage2 or stage3) to set up a chroot environment. Inside the chroot environment, the
	new stage1 is built by setting the <c>ROOT</c> environment variable to <path>/tmp/stage1root</path>. This instructs Portage
	to merge all new packages not to the current filesystem, but to the filesystem in <path>/tmp/stage1root</path>. <path>/tmp/stage1root</path>
	is then tarred up and becomes the target stage1. What this means is that when catalyst builds a stage1, the stage1 itself does not
	inherit any binaries or libraries from the seed that is used. The seed that is used <e>does</e> impact the target stage1 somewhat --
	the Linux headers on the seed are used for building the stage1's glibc, and the compilers on the seed are used to compile all the
	programs on the stage1. The seed stage is used to isolate the stage1 build process from your local system, and also allows for
	x86 stage1s to be built on amd64 systems, for example.</p>

	</body>
	</section>
</extrachapter>

</project>
