<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/project.xsl" type="text/xsl"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE project SYSTEM "/dtd/project.dtd">
<project>

<name>Catalyst</name>
<longname>Catalyst</longname>

<description>
This project develops the catalyst tool, which is used to build official
Gentoo stage tarballs, PackageCD and InstallCD and LiveCD images.
</description>

<longdescription><p>
The Gentoo catalyst project develops and supports the catalyst release building
tool. The design of catalyst is meant to be easy to use, cutomize, and
maintain. It is also used in other Gentoo projects, such as GNAP.
</p></longdescription>

<goals>
<p>
The goal of the catalyst project is to provide a single multi-faceted tool
that can reliably build all aspects of a Gentoo Linux release: stage tarballs,
GRP package sets, and install CDs.
</p>

<p>
Our specific development goals for <c>catalyst</c> include the following:
ensuring it provides high-quality builds of Gentoo Linux, and for the tool to
be easy to use, customize, extend and maintain. The catalyst tool is intended
to be used by those who wish to create their own customized versions of Gentoo
Linux, or their own customized LiveCDs. Our goal is to make catalyst a powerful
tool that's a pleasure to use, and to ensure that the code we write is
maintainable and of high-quality.
</p>

</goals>

<dev role="Lead">agaffney</dev>
<dev role="member">jmbsvicetto</dev>

<extrachapter position="top">
<title>Documentation</title>

<section>
<body>

<p>
The catalyst <uri link="faq.xml">FAQ</uri> attempts to answer
commonly asked questions related to catalyst and its usage.
</p>

</body>
</section>
</extrachapter>

<extrachapter position="bottom">
<title>Supported Architectures</title>
<section>
<body>

<p>
Catalyst supports a number of architectures.  In catalyst-speak, an
"architecture" is a general type of CPU platform.
</p>


<p>
For each architecture, catalyst supports a number of
"sub-architectures."  A sub-architecture is a specific variant of
the architecture.  For example, <c>pentium4</c> is a
sub-architecture of the <c>x86</c> architecture.
</p>

<table>
<tr>
<th>Architecture</th>
<th>Sub-architectures</th>
</tr>
<tr>
<ti><c>alpha</c></ti>
<ti><c>alpha ev4 ev45 ev5 ev56 ev6 ev67 pca56</c></ti>
</tr>
<tr>
<ti><c>amd64</c></ti>
<ti><c>amd64 amdfam10 athlon64 athlon64-sse3 athlonfx barcelona
core2 k8 k8-sse3 nocona opteron opteron-sse3</c></ti>
</tr>
<tr>
<ti><c>arm</c></ti>
<ti><c>arm armeb armv4l armv4tl armv5teb armv5tejl armv5tel armv5tl
armv6j armv6z armv6zk armv7a armv7a_hardfp</c></ti>
</tr>
<tr>
<ti><c>hppa</c></ti>
<ti><c>hppa hppa1.1 hppa2.0</c></ti>
</tr>
<tr>
<ti><c>ia64</c></ti>
<ti><c>ia64</c></ti>
</tr>
<tr>
<ti><c>mips</c></ti>
<ti><c>cobalt loongson2e loongson2f mips mips1 mips3 mips32
mips32el mips4 mips64 mips64el mipsel mipsel1 mipsel3
mipsel4</c></ti>
</tr>
<tr>
<ti><c>mips64</c></ti>
<ti><c>cobalt_n32 loongson2e_n32 loongson2f_n32 mips3_multilib
mips3_n32 mips3_n64 mips4_multilib mips4_n32 mips4_n64
mips64_multilib mips64_n32 mips64_n64 mips64el_multilib
mips64el_n32 mips64el_n64 mipsel3_multilib mipsel3_n32
mipsel3_n64 mipsel4_multilib mipsel4_n32 mipsel4_n64</c></ti>
</tr>
<tr>
<ti><c>ppc</c></ti>
<ti><c>g3 g4 g5 power power-ppc ppc</c></ti>
</tr>
<tr>
<ti><c>ppc64</c></ti>
<ti><c>970 cell power3 power4 power5 power6 ppc64</c></ti>
</tr>
<tr>
<ti><c>s390</c></ti>
<ti><c>s390</c></ti>
</tr>
<tr>
<ti><c>s390x</c></ti>
<ti><c>s390x</c></ti>
</tr>
<tr>
<ti><c>sh</c></ti>
<ti><c>sh sh2 sh2a sh2aeb sh2eb sh3 sh3eb sh4 sh4a sh4aeb sh4eb
sheb</c></ti>
</tr>
<tr>
<ti><c>sparc</c></ti>
<ti><c>sparc</c></ti>
</tr>
<tr>
<ti><c>sparc64</c></ti>
<ti><c>sparc64</c></ti>
</tr>
<tr>
<ti><c>x86</c></ti>
<ti><c>athlon athlon-4 athlon-mp athlon-tbird athlon-xp i386 i486
i586 i686 k6 k6-2 k6-3 pentium pentium-m pentium-mmx
pentium2 pentium3 pentium3m pentium4 pentium4m pentiumpro
prescott x86</c></ti>
</tr>
</table>

<p>
You'll notice that all architectures have a sub-architecture with
the same name as the architecture.  This sub-architecture is meant
to represent a "generic" build that should work on all systems in
that architecture.Each sub-architecture has an associated set of
<c>CFLAGS</c>, <c>CXXFLAGS</c>, as well as a <c>CHOST</c> and set of
<c>USE</c> variables that are enabled on that sub-architecture.  The
<c>USE</c> settings are intended to enable any CPU-specific options,
such as <c>mmx</c> or <c>altivec</c>.
</p>

<note>
Catalyst currently also supports the ability to build
<c>x86</c> architecture stages on <c>amd64</c> systems.
</note>

</body>
</section>
</extrachapter>

</project>
