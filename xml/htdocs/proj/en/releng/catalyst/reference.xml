<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/en/releng/catalyst/reference.xml">
<title>Catalyst Reference Manual</title>
<author title="Author"><mail link="drobbins@gentoo.org">
Daniel Robbins</mail>
</author>
<author title="Contributor"><mail link="zhen@gentoo.org">
John Davis</mail>
</author>

<abstract>
Catalyst reference manual, covering every aspect of catalyst configuration.
</abstract>

<version>1.6</version>
<date>18 May 2004</date>

<chapter>
<title>Introduction</title>
<section>
<body>
<p>This document is intended to be a complete reference for all catalyst targets, spec file options, and all
other aspects of catalyst.</p>
</body>
</section>
</chapter>

<chapter>
	<title>Catalyst target and spec reference</title>
	<section>
	<title>Stage1 Target Reference</title>
	<body>
	<p><b>Target name:</b> <c>stage1</c></p>
	<p><b>Target description:</b> A stage1 tarball, the base component used for building up a Gentoo system.</p>
	<p><b>Requirements for building:</b> A Portage tree snapshot, and a stage2 or stage3 "seed"
	tarball to set up the chroot environment.</p>
	
	<p>The stage1 target uses the following settings:</p>
	<table>
	<tr><th>variable</th><th>usage</th><th>format</th></tr>
	<tr><ti><c>subarch</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>version_stamp</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>target</c></ti><ti>required</ti><ti><c>stage1</c></ti></tr>
	<tr><ti><c>rel_type</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>profile</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>snapshot</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>source_subpath</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>distcc</c></ti><ti>optional, <c>distcc</c> required in <c>options</c></ti><ti>string</ti></tr>
	</table>
	</body>
	</section>
	
	<section>
	<title>Stage2 Target Reference</title>
	<body>
	<p><b>Target name:</b> <c>stage2</c></p>
	<p><b>Target description:</b> A stage2 tarball, a "bootstrapped" version of the stage1 tarball.</p>
	<p><b>Requirements for building:</b> A Portage tree snapshot and a stage1 seed tarball.</p>
	
	<p>The stage2 target uses the following settings:</p>
	<table>
	<tr><th>variable</th><th>usage</th><th>format</th></tr>
	<tr><ti><c>subarch</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>version_stamp</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>target</c></ti><ti>required</ti><ti><c>stage2</c></ti></tr>
	<tr><ti><c>rel_type</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>profile</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>snapshot</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>source_subpath</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>distcc</c></ti><ti>optional, <c>distcc</c> required in <c>options</c></ti><ti>string</ti></tr>
	</table>
	</body>
	</section>
	
	<section>
	<title>Stage3 Target Reference</title>
	<body>
	<p><b>Target name:</b> <c>stage3</c></p>
	<p><b>Target description:</b> A stage3 tarball, containing nearly all of a Gentoo Linux base system.</p>
	<p><b>Requirements for building:</b> A Portage tree snapshot and a stage2 seed tarball.</p>
	
	<p>The stage3 target uses the following settings:</p>
	<table>
	<tr><th>variable</th><th>usage</th><th>format</th></tr>
	<tr><ti><c>subarch</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>version_stamp</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>target</c></ti><ti>required</ti><ti><c>stage3</c></ti></tr>
	<tr><ti><c>rel_type</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>profile</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>snapshot</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>source_subpath</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>distcc</c></ti><ti>optional, <c>distcc</c> required in <c>options</c></ti><ti>string</ti></tr>
	</table>
	</body>
	</section>

	<section>
	<title>GRP Target Reference</title>
	<body>
	
	<p><b>Target name:</b> <c>grp</c></p>
	<p><b>Target description:</b> A GRP package set. GRP stands for 'Gentoo Reference Platform'
	and consists of a set of packages and source tarballs,
	grouped into (optionally) separate directories for easy integration into installation CDs.</p>
	<p><b>Requirements for building:</b> A Portage tree snapshot and a stage3 seed tarball.</p>
	
	<p>The GRP target uses the following settings:</p>
	<table>
	<tr><th>variable</th><th>usage</th><th>format</th></tr>
	<tr><ti><c>subarch</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>version_stamp</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>target</c></ti><ti>required</ti><ti><c>grp</c></ti></tr>
	<tr><ti><c>rel_type</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>profile</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>snapshot</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>source_subpath</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>grp</c></ti><ti>required</ti><ti>list</ti></tr>
	<tr><ti><c>grp/use</c></ti><ti>required</ti><ti>list</ti></tr>
	<tr><ti><c>grp/[grp:x]/type</c></ti><ti>required</ti><ti>string (<c>pkgset</c> or <c>srcset</c>)</ti></tr>
	<tr><ti><c>grp/[grp:x]/packages</c></ti><ti>required</ti><ti>list</ti></tr>
	<tr><ti><c>distcc</c></ti><ti>optional, <c>distcc</c> required in <c>options</c></ti><ti>string</ti></tr>
	</table>
	
	<p><b>Usage notes:</b> The <c>grp</c> variable should define the various sets of packages
	or sources being built. For example, <c>grp</c> could
	be defined as <c>cd1 cd2 src</c>. Then, for each item (such as <c>cd1</c>, for example)
	in your <c>grp</c> setting, you will need a <c>grp/cd1/type</c> setting
	which specifies either <c>pkgset</c> or <c>srcset</c> as an argument. If <c>cd1</c> is set
	up as a <c>pkgset</c>, then the packages
	that you specify will be compiled into <c>.tbz2</c> files and stored in
	<path>[storedir]/builds/[rel_type]/cd1/</path>.
	If <c>cd1</c> is set up as a <c>srcset</c>, then the sources for all the specified packages
	for <c>cd1</c> will be downloaded and stored in 
	<path>[storedir]/builds/[rel_type]/cd1/</path>.
	And, the specification of the actual packages would be recorded
	in the <c>grp/cd1/packages</c> variable. Every GRP spec file should also have a <c>grp/use</c>
	setting that should specify all <c>USE</c>
	variables that should be enabled for this GRP set. Here is an example snippet from a GRP spec file:</p>
	
	<pre caption="GRP spec file snippet">
grp: cd1 cd2 src
grp/use:
	gtk2 gnome kde qt bonobo cdr directfb yada yada yada
grp/cd1/type: pkgset
grp/cd1/packages:
	iptables
	gpm
	rp-pppoe
grp/cd2/type: pkgset
grp/cd2/packages:
	apache
	evolution
	emacs
grp/src/type: srcset
grp/src/packages:
	pcmcia-cs
	wireless-tools
	nvidia-kernel
	nvidia-glx
	</pre>
	</body>
	</section>

	<section>
	<title>Tinderbox Target Reference</title>
	<body>
	<p><b>Target name:</b> <c>tinderbox</c></p>
	<p><b>Target description:</b> The tinderbox is a QA target used to build-test a series of packages.</p>
	<p><b>Requirements for building:</b> A Portage tree snapshot and a stage3 seed tarball.</p>
	
	<p>The tinderbox target uses the following settings:</p>
	<table>
	<tr><th>variable</th><th>usage</th><th>format</th></tr>
	<tr><ti><c>subarch</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>version_stamp</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>target</c></ti><ti>required</ti><ti><c>tinderbox</c></ti></tr>
	<tr><ti><c>rel_type</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>profile</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>snapshot</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>source_subpath</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>tinderbox/use</c></ti><ti>required</ti><ti>list</ti></tr>
	<tr><ti><c>tinderbox/packages</c></ti><ti>required</ti><ti>list</ti></tr>
	<tr><ti><c>distcc</c></ti><ti>optional, <c>distcc</c> required in <c>options</c></ti><ti>string</ti></tr>
	</table>

	<p><b>Usage:</b> Here's how the tinderbox works. The specified seed tarball is used to set up the chroot
	environment. Then, <c>rsync</c> is used to create a pristine backup of the chroot environment. The firrst package
	specified in <c>tinderbox/packages</c> is merged, using the <c>USE</c> settings specified in <c>tinderbox/use</c>.
	Provided it builds correctly, catalyst uses <c>rsync</c> to restore the chroot environment to its original pristine
	state.  Then, each successive package specified in <c>tinderbox/packages</c> is merged; each merge is followed by
	a "return to original state" <c>rsync</c> step.</p>

	<p>Because of the "return to original state" <c>rsync</c> step, the tinderbox can detect errors in dependencies
	in certain packages. For a package to compile successfully, it must depend on everything it needs to compile cleanly
	from a pristine stage3 tarball. Also, this tinderbox testing is actually very efficient when <c>pkgcache</c> is enabled
	in <path>/etc/catalyst.conf</path>, because pre-built packages will be used to satisfy any dependencies. This means
	that CPU-hungry builds like <path>xfree</path> will be compiled only once each tinderbox run, provided that <c>pkgcache</c>
	is enabled.</p>

	<p>The tinderbox will continue to build through the complete list of packages specified in <c>tinderbox/packages</c>,
	even if some packages don't build. A build log is created and stored in <path>[storedir]/tmp/[rel_type]/[subarch]-tinderbox-[version_stamp]/tmp/tinderbox.log</path>. If a package builds correctly, a line will be recorded in this file that contains the name of the package as specified in <c>tinderbox/packages</c>. If a package does not build correctly, a line will be recorded in this file that contains the name of the package, preceded by a "<c>! </c>". Please note that failures of earlier packages may cause later package builds to fail.</p>

	<p>Besides the <path>/tmp/tinderbox.log</path> file created inside the chroot directory, the tinderbox performs no logging. To log the build
	process, use the <c>script</c> command along with <c>catalyst</c>, as follows:</p>
	<pre caption="Using script with catalyst to log the build process">
# script
Script started, file is typescript
# catalyst -f /foo/bar/oni.spec
# exit Script done, file is typescript
</pre>
	<p>Then, view the <path>typescript</path> file in the current directory for a full log of the build process.</p>
	</body>
	</section>

	<section>
	<title>Livecd-stage1 Target Reference</title>
	<body>
	<p><b>Target name:</b> <c>livecd-stage1</c></p>
	<p><b>Target description:</b> The first preliminary target of LiveCD building, basically a tarball containing a stage3 plus several packages.</p>
	<p><b>Requirements for building:</b> A Portage tree snapshot and a stage3 seed tarball.</p>
	
	<p>The livecd-stage1 target uses the following settings:</p>
	<table>
	<tr><th>variable</th><th>usage</th><th>format</th></tr>
	<tr><ti><c>subarch</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>version_stamp</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>target</c></ti><ti>required</ti><ti><c>livecd-stage1</c></ti></tr>
	<tr><ti><c>rel_type</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>profile</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>snapshot</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>source_subpath</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>livecd/use</c></ti><ti>required</ti><ti>list</ti></tr>
	<tr><ti><c>livecd/packages</c></ti><ti>required</ti><ti>list</ti></tr>
	<tr><ti><c>distcc</c></ti><ti>optional, <c>distcc</c> required in <c>options</c></ti><ti>string</ti></tr>
	</table>

	<p><b>Usage notes:</b> If you intend to distribute your LiveCD to the general public, please use a reasonably generic seed stage3 so that your
	LiveCD will run on a wide variety of systems. Set <c>livecd-stage1/packages</c> to specify the packages you would like included on your LiveCD,
	and <c>livecd-stage1/use</c> to the <c>USE</c> settings that should be used when building said packages.</p>

	<impo>Please be sure that <c>livecd</c> among the USE variables you specify in the <c>livecd/use</c> variable. Also, be sure to list <c>sys-apps/baselayout</c> among the packages specified in the <c>livecd/packages</c> variable. The baselayout package needs to be re-merged with the <c>livecd</c> USE var set in order to configure the chroot environment for LiveCD booting.</impo>

	</body>
	</section>

	<section>
	<title>Livecd-stage2 Target Reference</title>
	<body>
	<p><b>Target name:</b> <c>livecd-stage2</c></p>
	<p><b>Target description:</b> The second preliminary target of LiveCD building, containing a livecd-stage1 plus kernel and initrd sets
	to be used for booting the CD image.</p>
	<p><b>Requirements for building:</b> A Portage tree snapshot and a livecd-stage1 seed image.</p>
	
	<p>The livecd-stage2 target uses the following settings:</p>
	<table>
	<tr><th>variable</th><th>usage</th><th>format</th></tr>
	<tr><ti><c>subarch</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>version_stamp</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>target</c></ti><ti>required</ti><ti><c>livecd-stage1</c></ti></tr>
	<tr><ti><c>rel_type</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>profile</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>snapshot</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>source_subpath</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>boot/kernel</c></ti><ti>required</ti><ti>list</ti></tr>
	<tr><ti><c>boot/kernel/[boot/kernel:x]/sources</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>boot/kernel/[boot/kernel:x]/config</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>boot/kernel/[boot/kernel:x]/extraversion</c></ti><ti>optional</ti><ti>string</ti></tr>
	<tr><ti><c>boot/kernel/[boot/kernel:x]/packages</c></ti><ti>optional</ti><ti>list</ti></tr>
	<tr><ti><c>boot/kernel/[boot/kernel:x]/use</c></ti><ti>optional</ti><ti>list</ti></tr>
	<tr><ti><c>boot/kernel/[boot/kernel:x]/gk_kernargs</c></ti><ti>optional</ti><ti>list</ti></tr>
	<tr><ti><c>livecd/cdfstype</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>livecd/runscript</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>livecd/archscript</c></ti><ti>required</ti><ti>string</ti></tr>
	<tr><ti><c>livecd/empty</c></ti><ti>optional</ti><ti>list</ti></tr>
	<tr><ti><c>livecd/rm</c></ti><ti>optional</ti><ti>list</ti></tr>
	<tr><ti><c>livecd/unmerge</c></ti><ti>optional</ti><ti>list</ti></tr>
	<tr><ti><c>livecd/iso</c></ti><ti>optional</ti><ti>string</ti></tr>
	<tr><ti><c>livecd/gk_mainargs</c></ti><ti>optional</ti><ti>string</ti></tr>
	<tr><ti><c>livecd/overlay</c></ti><ti>optional</ti><ti>string</ti></tr>
	<tr><ti><c>livecd/modblacklist</c></ti><ti>optional</ti><ti>string</ti></tr>
	</table>

	<p><b>runscripts and archscripts:</b> The <c>livecd/runscript</c> and <c>livecd/archscript</c> variables point to 
	shell scripts that handle various chores that require direct shell interaction. For the purposes of the 
	<c>livecd-stage2</c> target, the archscript and runscript are used to build kernel(s) for the LiveCD,
	perform some prepping and cleaning of the CD filesystem, place the bootable CD filesystem in a loopback
	as needed, and set up the LiveCD bootloader.</p>
	
	<p>Here is an overview of the steps that are performed during the <c>livecd-stage2</c> target. Please note
	that any references to "runscript" mean that the runscript/archscript are called (archscript runs first,
	then optionally the runscript executes.) More detail on the interaction between runscript and archscript
	later.</p>
	
	<ul>
	<li><b>runscript: kernel</b> section executes with bind mounts mounted. This is where <c>genkernel</c>
	is used to build kernels and initrds for the LiveCD.</li>
	<li><b>runscript: preclean</b> section executes with bind mounts still mounted. This is where
	any necessary "prep" work should be done that requires the full, non-trimmed livecd-stage2 environment intact.</li>
	<li><b>catalyst: livecd/unmerge</b> executes with bind mounts still mounted. All specified packages
	are unmerged from the chroot environment using <c>emerge -C</c>.</li>
	<li><b>catalyst: bind mounts unmounted</b> for safety reasons.</li>
	<li><b>catalyst: livecd/empty</b> executes. All specified directories are totally emptied of their contents.</li>
	<li><b>catalyst: livecd/rm</b> executes. All specified file patterns are removed from the chroot image.</li>
	<li><b>runscript: clean</b> executes, to perform any necessary cleaning steps (with bind mounts unmounted.)</li>
	<li><b>runscript: bootloader</b> executes, configuring CD bootloader and copying kernels and initrds (previously built) into place.</li>
	<li><b>runscript: cdfs</b> executes, to perform any "prep" steps on the chroot such as compression, copying it into a loopback file and placing it in the proper place on the LiveCD filesystem tree.</li>
	</ul>

	<p>The reason why we have two scripts (runscript and archscript) are so that we can properly separate steps
	arch-independent from arch-specific steps, which makes maintenance easier. For example, kernel building is typically handled by genkernel,
	which provides a generic and arch-independent interface. Because genkernel supports many architectures,
	it can be placed in the runscript, and this generic genkernel code can easily be shared among all architectures
	simply by sharing the runscript. This works because the runscript, by design, contains no arch-specific parts.</p>

	<p>The <c>kernel</c> target of the runscript is responsible for
	building kernels, and does this by using the <path>sys-kernel/genkernel</path> package, which it merges in the
	chroot, and then calls, passing each kernel configuration you specified in the spec file as arguments to each
	<c>genkernel</c> call. The resultant
	kernels and initrds are stored in the <path>/tmp/binaries</path> directory inside the chroot. The <c>bootloader</c>
	section of the archscript will grab these kernels when it executes, and place them in the proper place on the LiveCD
	filesystem tree.</p>
	
	<p><b>Using the kernel-related variables in the spec file:</b> For each name in the <c>boot/kernel</c> variable in the spec file (such as <c>gentoo</c>, for example), this target will
	use <c>genkernel</c> to build a kernel and initrd. With the example <c>boot/kernel</c> entry of <c>gentoo</c>, catalyst
	will use the <c>boot/kernel/gentoo/sources</c> setting to determine what kernel sources to merge for this particular
	kernel build (an example setting would be <c>=sys-kernel/gentoo-dev-sources-2.6.0</c>.) Any <c>USE</c> settings specified
	in <c>boot/kernel/gentoo/use</c> will be exported to the environment before <c>genkernel</c> is called. 
	</p>

	<p>
	Then, the kernel config pointed
	to by <c>boot/kernel/gentoo/config</c> will be copied into the chroot and used to build said kernel. After <c>genkernel</c>
	finishes, any packages specified in <c>boot/kernel/gentoo/packages</c> will be merged. The <c>boot/kernel/gentoo/packages</c>
	setting is used to merge kernel-specific ebuilds, such as <c>nvidia-kernel</c>, <c>e1000</c>, etc. As during the kernel
	build, any <c>USE</c> settings specified in <c>boot/kernel/gentoo/use</c> will be exported to the environment during the
	optional package merge step.
	
	Here is an example
	snippet from a livecd-stage2 spec file that tells catalyst to build two kernel/initrd sets, one called <c>gentoo</c> and
	another called <c>smp</c>. When the <c>gentoo</c> kernel is merged, the <c>foo</c> USE setting is exported to the environment.
	Also, after the <c>gentoo</c> kernel, modules and initrd are built by <c>genkernel</c>, catalyst will merge the <path>nvidia-kernel</path>,
	<path>e1000</path> and <path>pcmcia-cs</path> ebuilds. Any modules that are built during this step will be built specifically for the <c>gentoo</c>
	kernel.
	</p>
	<pre caption="Livecd-stage2 spec snippet">
boot/kernel: gentoo smp
boot/kernel/gentoo/sources: =sys-kernel/gentoo-dev-sources-2.6.0
boot/kernel/gentoo/config: /path/to/gentoo.config
boot/kernel/gentoo/use: foo
boot/kernel/gentoo/packages: nvidia-kernel e1000 pcmcia-cs
boot/kernel/smp/sources: =sys-kernel/special-smp-sources-2.6.0
boot/kernel/smp/config: /path/to/smp.config
	</pre>
	<note>The most
	recent unmasked version of genkernel will be merged by the runscript; please make sure that version 3.0.1 or later of genkernel is unmasked in your 
	Portage tree snapshot.</note>
	
	<p>You can
	find example runscripts and archscripts in the <path>examples/livecd/runscript</path> directory in the catalyst
	source tree.</p>
	
	</body>
	</section>
</chapter>

<chapter>
	<title>Catalyst options reference</title>
	<section>
	<title>Introduction</title>
	<body>
	<p>There are many different options that can be set in <c>catalyst.conf</c>. Find below a detailed explanation of each.</p>
	</body>
	</section>
	<section>
	<title>ccache</title>
	<body>
	<p><b>Option Name:</b> ccache</p>
	<p><b>Description:</b> Enables build time ccache support.</p>
	<p><b>Purpose:</b> Speeds up builds dramatically after the first build.</p>
	<p><b>Use:</b> Append <c>ccache</c> to <c>options</c> in <path>/etc/catalyst.conf</path>.</p>
	</body>
	</section>
	<section>
	<title>pkgcache</title>
	<body>
	<p><b>Option Name:</b> pkgcache</p>
	<p><b>Description:</b> Enables caching of .tbz2s.</p>
	<p><b>Purpose:</b> Speeds up builds dramatically after the first build by utilizing prebuilt packages.</p>
	<p><b>Use:</b> Append <c>pkgcache</c> to <c>options</c> in <path>/etc/catalyst.conf</path>.</p>
	</body>
	</section>
	<section>
	<title>distcc</title>
	<body>
	<p><b>Option Name:</b> distcc</p>
	<p><b>Description:</b> Enables distributed network compiling.</p>
	<p><b>Purpose:</b> Speeds up builds dramatically by utilizing multiple build hosts..</p>
	<p><b>Use:</b> Append <c>distcc</c> to <c>options</c> in <path>/etc/catalyst.conf</path>,
	and set distcc_hosts in your spec files. distcc_hosts uses the following format:</p>
	<pre caption="distcc_hosts format">
distcc_hosts= host1 host2 host3
	</pre>
	</body>
	</section>
	<section>
	<title>envscript</title>
	<body>
	<p><b>Setting Name:</b> envscript</p>
	<p><b>Description:</b> Enables the definition of any environment variable for use during building.</p>
	<p><b>Purpose:</b> To enable the use of HTTP proxy settings, MAKEOPTS settings, and any other environment settings.</p>
	<p><b>Use:</b> Set <c>envscript=script.sh</c> in <path>/etc/catalyst.conf</path>. An envscript uses the following format:</p>
	<pre caption="sample envscript">
export MAKEOPTS="-j4"
export GENTOO_MIRRORS="mymirror"
export meep="foo"
	</pre>
	</body>
	</section>
</chapter>	
</guide>
