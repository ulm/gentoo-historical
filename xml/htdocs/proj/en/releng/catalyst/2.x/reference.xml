<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/en/releng/catalyst/reference.xml" disclaimer="obsolete">

<title>Catalyst Reference Manual</title>

<author title="Author">
<mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>

<author title="Contributor">
<mail link="zhen@gentoo.org">John Davis</mail>
</author>

<author title="Editor">
<mail link="wolf31o2@gentoo.org">Chris Gianelloni</mail>
</author>

<abstract>
Catalyst reference manual, covering every aspect of catalyst configuration.
</abstract>

<version>1.12</version>
<date>2007-01-30</date>

<chapter>
<title>Introduction</title>

<section>
<body>

<p>
This document is intended to be a complete reference for all catalyst targets,
spec file options, and all other aspects of catalyst. This document is accurate
for catalyst version 2.0.2 and above.
</p>

</body>
</section>

</chapter>

<chapter>
<title>Reference: command line options</title>

<section>
<body>

<p>
There are several command line options suported by catalyst. They allow for
catalyst to be used within build scripts easily and control cache cleaning. The
supported options are as follows:
</p>

<table>

<tr>
<th>Short option</th>
<th>Long option</th>
<th>Usage</th>
</tr>

<tr>
<ti>-a</ti>
<ti>--clear-autoresume</ti>
<ti>This flag causes catalyst to ignore and clear any previously created
autoresume points for this target.</ti>
</tr>

<tr>
<ti>-c</ti>
<ti>--config</ti>
<ti>This flag allows one to specify the location of a catalyst configuration
file other than the default.</ti>
</tr>

<tr>
<ti>-C</ti>
<ti>--cli</ti>
<ti>This flag allows one to specify any valid spec keys for the given target on
the command line. Since everything after this flag is passed to catalyst as a
spec key, it must be the last option on the catalyst command line.</ti>
</tr>

<tr>
<ti>-d</ti>
<ti>--debug</ti>
<ti>This flag causes catalyst to output a greater amount of debug information.
It is primarily useful for catalyst developers and people customizing catalyst
to meet their own needs.</ti>
</tr>

<tr>
<ti>-f</ti>
<ti>--file</ti>
<ti>This flag is used to point catalyst to the desired spec file to
process.</ti>
</tr>

<tr>
<ti>-F</ti>
<ti>--fetchonly</ti>
<ti>This flag causes catalyst to process the desired spec file, but to only
download the necessary sources based on the snapshot and packages defined in
the spec.</ti>
</tr>

<tr>
<ti>-h</ti>
<ti>--help</ti>
<ti>This flag causes catalyst to print a short help message giving an
abbreviated usage.</ti>
</tr>

<tr>
<ti>-p</ti>
<ti>--purge</ti>
<ti>This flag causes catalyst to remove all temporary files, package cache, and
autoresume flags for the given target.</ti>
</tr>

<tr>
<ti>-s</ti>
<ti>--snapshot</ti>
<ti>This flag causes catalyst to create a snapshot from the configured portdir.
It requires one argument, which is the version stamp for the snapshot to be
made. This is a shortcut for using the snapshot target.</ti>
</tr>

<tr>
<ti>-v</ti>
<ti>--verbose</ti>
<ti>This flag enables verbose output during the processing of the target. This
is useful for determining problems with your build, such as any circular
dependencies or blockers.</ti>
</tr>

<tr>
<ti>-V</ti>
<ti>--version</ti>
<ti>This flag causes catalyst to output its version information and exit.</ti>
</tr>

</table>

</body>
</section>

</chapter>

<chapter>
<title>Reference: catalyst.conf options</title>

<section>
<title>Introduction</title>
<body>

<p>
There are many different options that can be set in <c>catalyst.conf</c>. These
options control the output of catalyst, as well as the various caching options
that are available within catalyst. This section covers all of the available
options and settings.
</p>

</body>
</section>

<section>
<title>Configuration keys</title>
<body>

<p>
Most configuration keys are used to directly control how catalyst behaves and
the locations it uses for its files.
</p>

<table>

<tr>
<th>Key</th>
<th>Usage</th>
<th>Description</th>
<th>Example</th>
</tr>

<tr>
<ti><c>digests</c></ti>
<ti>This key enables the creation of .DIGESTS files, which contain a series of
configured hashes on the created target. This is primarily used to allow easy
verification of the output tarball.</ti>
<ti>The digests key is optional and has no default setting. It supports the
following hash algorythyms: sha1, sha224, ripemd128, ripemd320, sha384, crc32,
ripemd256, sha256, sha512, ripemd160, md5.</ti>
<ti>digests=&quot;md5 sha1&quot;</ti>
</tr>

<tr>
<ti><c>distdir</c></ti>
<ti>This key is typically used to specify a location to store the downloaded
sources which are used in the creation of the various catalyst targets. It can
be used to localize the downloads, making it easy to package them up in a
&quot;sources&quot; CD/DVD.</ti>
<ti>The distdir key is a required key. It points to a path on the local
file-system and defaults to <c>/usr/portage/distfiles</c>.</ti>
<ti>distdir=&quot;/usr/portage/distfiles&quot;</ti>
</tr>

<tr>
<ti><c>envscript</c></ti>
<ti>This key is used to specify a script to be sourced by catalyst for each
target. It can be used to make modifications to the build environment, as it is
sourced within the build environment.</ti>
<ti>The envscript key is optional and has no default setting. The contents of
the envscript file can be anything that is valid bash shell scripting. The
capabilities of an envscript are potentially damaging, and should be used in a
conservative manner. No validation is done on the envscript prior to its
execution.</ti>
<ti>envscript=&quot;/root/.catalystrc&quot;</ti>
</tr>

<tr>
<ti><c>hash_function</c></ti>
<ti>This key can be used to modify the hash function that catalyst uses
internally when generating hashes. This should never be changed except in the
case where your operating system does not support the default.</ti>
<ti>The hash_function key is optional and has a default setting of
&quot;crc32&quot;. It has support for the following hash algorythyms: adler32,
crc32, crc32b, gost, haval128, haval160, haval192, haval224, haval256, md2, md4,
md5, ripemd128, ripemd160, ripemd256, ripemd320, sha1, sha224, sha256, sha384,
sha512, snefru128, snefru256, tiger, tiger128, tiger160, whirlpool.</ti>
<ti>hash_function=&quot;crc32&quot;</ti>
</tr>

<tr>
<ti><c>options</c></ti>
<ti>This key controls the build-time options used by catalyst. With these, you
have direct control over the various caching options, and also can enable or
disable ccache and distcc globally.</ti>
<ti>The options key is optional and has no default setting. The individual
options will be described further in the next section.</ti>
<ti>options=&quot;autoresume kerncache pkgcache seedcache snapcache&quot;</ti>
</tr>

<tr>
<ti><c>portdir</c></ti>
<ti>This key controls the location of the repository used when creating a
snapshot. It is useful for having multiple repositories on a system and easily
being able to choose between them.</ti>
<ti>The portdir key is required and defaults to <c>/usr/portage</c> on the
host system.</ti>
<ti>portdir=&quot;/release/portage&quot;</ti>
</tr>

<tr>
<ti><c>sharedir</c></ti>
<ti>This key points to the location of catalyst's shared files, such as the
individual scripts used to run each target. This can be defined to allow for
multiple customized versions of catalyst to exist on a single build host.</ti>
<ti>The sharedir key is required and has a default setting of
<c>/usr/lib/catalyst</c>.</ti>
<ti>sharedir=&quot;/usr/lib/catalyst&quot;</ti>
</tr>

<tr>
<ti><c>snapshot_cache</c></ti>
<ti>This key can be used to control the location of the snapshot cache.</ti>
<ti>The snapshot_cache key is optional and defaults to
<c>/var/tmp/catalyst/snapshot_cache</c>. This key has no effect if
&quot;snapcache&quot; isn't enabled in options.</ti>
<ti>snapshot_cache=&quot;/var/tmp/catalyst/snapshot_cache&quot;</ti>
</tr>

<tr>
<ti><c>storedir</c></ti>
<ti>This key specifies where catalyst will store everything that it builds,
including temporary files and caches.</ti>
<ti>The storedir key is required and has a default setting of
<c>/var/tmp/catalyst</c>.</ti>
<ti>storedir=&quot;/var/tmp/catalyst&quot;</ti>
</tr>

</table>

</body>
</section>

<section>
<title>Allowed options</title>
<body>

<p>
The different options in catalyst set different build-time parameters. These
are all valid options used in the options key in <c>catalyst.conf</c>.
</p>

<table>

<tr>
<th>Option</th>
<th>Description</th>
</tr>

<tr>
<ti>autoresume</ti>
<ti>This option causes catalyst to attempt to resume a failed build. This is
primarily used to resume builds where a single package has failed, and the
snapshot has been changed to compensate. Much of the initial setup for each
target is skipped, such as copying the envscript, so this option might not
always work as expected.</ti>
</tr>

<tr>
<ti>ccache</ti>
<ti>This option causes catalyst to enable ccache support in the build targets.
This requires that ccache is installed on the build host. If using this option
and you have changed your default cache size, you will want to also do the same
changes in an envscript, or your cache will be resized to default.</ti>
</tr>

<tr>
<ti>distcc</ti>
<ti>This option causes catalyst to enable distcc support globally. To fully
utilize this option, you must set <c>distcc_hosts</c> in your spec file to the
list of hosts to distribute to for compilation.</ti>
</tr>

<tr>
<ti>kerncache</ti>
<ti>This option allows catalyst to enable kernel caching. This causes catalyst
to store a cache of any built kernels for the stage4 or livecd-stage1 targets,
and to reuse the cache, rather than recompiling the kernel, if the configuration
has not changed. This is a massive time saver on slower architectures or on
repetitive builds with multiple kernels.</ti>
</tr>

<tr>
<ti>pkgcache</ti>
<ti>This option causes catalyst to instruct portage to build packages for each
package it builds. This also causes catalyst to attempt to use any packages in
the cache before compiling the package from source. This can dramatically reduce
build time for large builds, especially if there is a failure.</ti>
</tr>

<tr>
<ti>seedcache</ti>
<ti>This option causes catalyst to attempt to seed the target with the temporary
files from the seed target, rather than using the tarball. This option is safe
to use even without temporary files from the seed, since it falls back to using
the tarball if the temporary files are not available.</ti>
</tr>

<tr>
<ti>snapcache</ti>
<ti>This option causes catalyst to keep a cache of the extracted repository
snapshot and to bind mount it into place, rather than uncompressing the tarball
with each run.</ti>
</tr>

</table>

</body>
</section>

</chapter>

<chapter>
<title>Reference: spec file options</title>

<section>
<title>snapshot target reference</title>
<body>

<p><b>Target name:</b> <c>snapshot</c></p>

<p>
<b>Target Description:</b> A repository snapshot, the tarred and compressed
repository tree used for building all other targets.
</p>

<p>
The snapshot target uses the following settings:
</p>

<table>

<tr>
<th>Variable</th>
<th>Usage</th>
<th>Description</th>
<th>Specfile example</th>
</tr>

<tr>
<ti><c>target</c></ti>
<ti>Required</ti>
<ti>Target that catalyst is to build, in this case, a snapshot</ti>
<ti>target: snapshot</ti>
</tr>

<tr>
<ti><c>version_stamp</c></ti>
<ti>Required</ti>
<ti>Identifier, i.e. a date or version tag</ti>
<ti>version_stamp: 2007.0</ti>
</tr>

</table>

</body>
</section>

<section>
<title>Stage Tarball (stage1, stage2, stage3) Target Reference</title>
<body>

<p><b>Target name:</b> <c>stage1</c>, <c>stage2</c>, <c>stage3</c></p>

<p>
<b>Target description:</b> The stage1 tarball is a very minimal toolchain. It is
the base required to complete a bootstrap.  It should always be as generic as
possible. If building stages for an architecture which supports both 2.4 and 2.6
kernels, one <b>must</b> build stage1 without NPTL enabled. The stage2 tarball
is the output of the bootstrap sequence, using a limited subset of USE from the
chosen profile. The stage3 tarball is the completed &quot;system&quot; target,
which is defined by the profile used.
</p>

<p>
<b>Requirements for building:</b> All stages require a repository tree snapshot
to build against. The stage1 target also requires a generic stage3
&quot;seed&quot; tarball to set up the chroot environment. The stage2 target
requires a generic stage1 tarball. The stage3 target requires a stage2 tarball
using the same sub-architecture.
</p>

<p>
The stage1, stage2, and stage3 targets use the following settings:
</p>

<table>

<tr>
<th>Variable</th>
<th>Usage</th>
<th>Description</th>
<th>Specfile example</th>
</tr>

<tr>
<ti><c>subarch</c></ti>
<ti>Required</ti>
<ti><uri
link="/proj/en/releng/catalyst/index.xml#doc_chap5">Sub-architecture</uri>
catalyst is to build for, e.g. <c>pentium4</c> or <c>athlon-xp</c>. A stage1
tarball should always use a generic sub-architecture, as it is used to build
optimized stages for multiple sub-architectures and is required to run on any
of them.</ti>
<ti>subarch: x86</ti>
</tr>

<tr>
<ti><c>version_stamp</c></ti>
<ti>Required</ti>
<ti>Identifier, i.e. a date or version tag</ti>
<ti>version_stamp: 2007.0</ti>
</tr>

<tr>
<ti><c>target</c></ti>
<ti>Required</ti>
<ti>Target that catalyst is to build, in this case, a stage1 tarball</ti>
<ti>target: stage1</ti>
</tr>

<tr>
<ti><c>rel_type</c></ti>
<ti>Required</ti>
<ti>Build profile catalyst will use, in most cases, <c>default</c> will
suffice. This is used primarily to allow for different build types of the same
sub-architecture to be built simultaneously, using differing settings.</ti>
<ti>rel_type: default</ti>
</tr>

<tr>
<ti><c>profile</c></ti>
<ti>Required</ti>
<ti>Repository profile (<c>/etc/make.profile</c>) that catalyst is to use for
the build. This is relative to the profiles directory in your snapshot.</ti>
<ti>profile: default-linux/x86/no-nptl</ti>
</tr>

<tr>
<ti><c>snapshot</c></ti>
<ti>Required</ti>
<ti>Portage snapshot to use, path is relative to
<c>${clst_storedir}/snapshots</c></ti>
<ti>snapshot: 2007.0</ti>
</tr>

<tr>
<ti><c>source_subpath</c></ti>
<ti>Required</ti>
<ti>Location of seed stage, path relative to <c>${clst_sharedir}/builds</c></ti>
<ti>source_subpath: default/stage3-x86-2006.1</ti>
</tr>

<tr>
<ti><c>distcc_hosts</c></ti>
<ti>Optional, <c>distcc</c> required in <c>options</c> (catalyst.conf)</ti>
<ti>Hosts used as distcc build slaves</ti>
<ti>distcc_hosts: buildhost 127.0.0.1 192.168.0.1</ti>
</tr>

<tr>
<ti><c>portage_confdir</c></ti>
<ti>Optional</ti>
<ti>Location of a configuration directory for portage (<c>/etc/portage</c>)
configuration files.</ti>
<ti>portage_confdir: /etc/portage</ti>
</tr>

<tr>
<ti><c>portage_overlay</c></ti>
<ti>Optional</ti>
<ti>Location of a repository overlay, to be used in conjunction with the
snapshot. If you use this option, you should use the same overlay for all
targets you build.</ti>
<ti>portage_overlay: /usr/local/portage</ti>
</tr>

<tr>
<ti><c>pkgcache_path</c></ti>
<ti>Optional, <c>pkgcache</c> required in <c>options</c>
(catalyst.conf)</ti>
<ti>Location to store packages, which allows sharing of the package cache across
multiple differing builds. This option should be used with caution.</ti>
<ti>pkgcache_path: /tmp/packages</ti>
</tr>

</table>

<p>
There are also options which control the toolchain options used for building
these stages. These options are only valid for stage1 and stage2, and will be
ignored for stage3. The stage3 target <b>always</b> inherits its properties from
the stage2 target.
</p>

<table>

<tr>
<th>Variable</th>
<th>Usage</th>
<th>Description</th>
<th>Specfile example</th>
</tr>

<tr>
<ti><c>cbuild</c></ti>
<ti>Optional</ti>
<ti>Allows changing the CBUILD value from the profile default. This is primarily
used in cross-compiling. Changes made here will end up in the target's
<c>/etc/make.conf</c> file.</ti>
<ti>cbuild: i686-pc-linux-gnu</ti>
</tr>

<tr>
<ti><c>cflags</c></ti>
<ti>Optional</ti>
<ti>Allows changing CFLAGS value from the profile default. This really should
remain generic or fit the subarch being used, as it is possible to build an
incompatible stage by selecting over agressive optimization flags. Changes made
here will end up in the target's <c>/etc/make.conf</c> file.</ti>
<ti>cflags: -Os -pipe -fomit-frame-pointer -mcpu=i686</ti>
</tr>

<tr>
<ti><c>chost</c></ti>
<ti>Optional</ti>
<ti>Allows changing CHOST value from the profile default. This is generally used
for building NPTL from a non-NPTL seed. This option can very easily cause your
build to fail, so use it with caution. Changes made here will end up in the
target's <c>/etc/make.conf</c> file.</ti>
<ti>chost: i686-pc-linux-gnu</ti>
</tr>

<tr>
<ti><c>cxxflags</c></ti>
<ti>Optional</ti>
<ti>Allows changing CXXFLAGS value from the profile default. This is only
required if you want CXXFLAGS to differ from CFLAGS, as the default is to make
CXXFLAGS equal to CFLAGS. Changes made here will end up in the target's
<c>/etc/make.conf</c> file.</ti>
<ti>cxxflags: -Os -pipe -fomit-frame-pointer -mcpu=i686</ti>
</tr>

<tr>
<ti><c>ldflags</c></ti>
<ti>Optional</ti>
<ti>Allows changing LDFLAGS value from the profile default. This is primarily
used on embedded systems. Changes made here will end up in the target's
<c>/etc/make.conf</c> file.</ti>
<ti>ldflags: -Wl,-O1 -Wl,-z,now</ti>
</tr>

</table>

</body>
</section>

</chapter>

<chapter>
<title>GRP Target Reference</title>
<section>
<body>

<p><b>Target name:</b> <c>grp</c></p>
<p><b>Target description:</b> A GRP package set. GRP stands for 'Gentoo Reference Platform'
and consists of a set of packages and source tarballs,
grouped into (optionally) separate directories for easy integration into installation CDs.</p>
<p><b>Requirements for building:</b> A Portage tree snapshot and a stage3 seed tarball.</p>

<p>The GRP target uses the following settings:</p>
<table>
<tr>
<th>Variable</th>
<th>Usage</th>
<th>Description</th>
<th>Specfile example</th>
</tr>
<tr>
<ti><c>subarch</c></ti>
<ti>required</ti>
<ti><uri link="/proj/en/releng/catalyst/index.xml#doc_chap5">sub-architecture</uri> Catalyst
is to build for, e.g. pentium4 or athlon-xp</ti>
<ti>subarch: athlon-xp</ti>
</tr>
<tr>
<ti><c>version_stamp</c></ti>
<ti>required</ti>
<ti>identifier, i.e. a date or version tag</ti>
<ti>version_stamp: 2004.3</ti>
</tr>
<tr>
<ti><c>target</c></ti>
<ti>required</ti>
<ti>target that Catalyst is to build, in this case, <c>grp</c></ti>
<ti>target: stage1</ti>
</tr>
<tr>
<ti><c>rel_type</c></ti>
<ti>required</ti>
<ti>build profile Catalyst will use, in most cases, <c>default</c> will suffice</ti>
<ti>rel_type: default</ti>
</tr>
<tr>
<ti><c>profile</c></ti>
<ti>required</ti>
<ti>Portage profile (/etc/make.profile) Catalyst is to use for the build</ti>
<ti>profile: default-linux/x86/2004.3</ti>
</tr>
<tr>
<ti><c>snapshot</c></ti>
<ti>required</ti>
<ti>Portage snapshot to use, path is relative to ${clst_storedir}/snapshots</ti>
<ti>snapshot: 20041222</ti>
</tr>
<tr>
<ti><c>source_subpath</c></ti>
<ti>required</ti>
<ti>location of seed stage, path relative to ${clst_sharedir}</ti>
<ti>source_subpath: default/stage3-x86-2004.1</ti>
</tr>
<tr>
<ti><c>distcc_hosts</c></ti>
<ti>optional, <c>distcc</c> required in <c>options</c> (catalyst.conf)</ti>
<ti>hosts used as distcc build slaves</ti>
<ti>distcc_hosts: 127.0.0.1 192.168.0.1</ti>
</tr>
<tr>
<ti><c>grp</c></ti>
<ti>required</ti>
<ti>directory structure for the completed GRP build</ti>
<ti>grp: src packages</ti>
</tr>
<tr>
<ti><c>grp/use</c></ti>
<ti>required</ti>
<ti>USE variables to use when building the GRP set</ti>
<ti>grp/use: gtk2 gnome kde qt bonobo acl</ti>
</tr>
<tr>
<ti><c>grp/[grp:x]/type</c></ti>
<ti>required</ti>
<ti>type of GRP build - pkgset will build and package the specified ebuild
into a tarball (binary package), and srcset will simply fetch the sources from a Gentoo mirror</ti>
<ti>grp/src/type: srcset; grp/packages/type: packages</ti>
</tr>
<tr>
<ti><c>grp/[grp:x]/packages</c></ti>
<ti>required</ti>
<ti>list of ebuilds for the appropriate GRP build (srcset, pkgset)</ti>
<ti>grp/src/packages: pciutils hdparm; grp/packages/packages: pciutils hdparm</ti>
</tr>
</table>
</body>
</section>

</chapter>

<chapter>
<title>Tinderbox Target Reference</title>
<section>
<body>
<p><b>Target name:</b> <c>tinderbox</c></p>
<p><b>Target description:</b> The tinderbox is a QA target used to build-test a series of packages.</p>
<p><b>Requirements for building:</b> A Portage tree snapshot and a stage3 seed tarball.</p>

<p>The tinderbox target uses the following settings:</p>
<table>
<tr>
<th>Variable</th>
<th>Usage</th>
<th>Description</th>
<th>Specfile example</th>
</tr>
<tr>
<ti><c>subarch</c></ti>
<ti>required</ti>
<ti><uri link="/proj/en/releng/catalyst/index.xml#doc_chap5">sub-architecture</uri> Catalyst
is to build for, e.g. pentium4 or athlon-xp</ti>
<ti>subarch: athlon-xp</ti>
</tr>
<tr>
<ti><c>version_stamp</c></ti>
<ti>required</ti>
<ti>identifier, i.e. a date or version tag</ti>
<ti>version_stamp: 2004.3</ti>
</tr>
<tr>
<ti><c>target</c></ti>
<ti>required</ti>
<ti>target that Catalyst is to build, in this case, <c>tinderbox</c></ti>
<ti>target: stage1</ti>
</tr>
<tr>
<ti><c>rel_type</c></ti>
<ti>required</ti>
<ti>build profile Catalyst will use, in most cases, <c>default</c> will suffice</ti>
<ti>rel_type: default</ti>
</tr>
<tr>
<ti><c>profile</c></ti>
<ti>required</ti>
<ti>Portage profile (/etc/make.profile) Catalyst is to use for the build</ti>
<ti>profile: default-linux/x86/2004.3</ti>
</tr>
<tr>
<ti><c>snapshot</c></ti>
<ti>required</ti>
<ti>Portage snapshot to use, path is relative to ${clst_storedir}/snapshots</ti>
<ti>snapshot: 20041222</ti>
</tr>
<tr>
<ti><c>source_subpath</c></ti>
<ti>required</ti>
<ti>location of seed stage, path relative to ${clst_sharedir}</ti>
<ti>source_subpath: default/stage3-x86-2004.1</ti>
</tr>
<tr>
<ti><c>distcc_hosts</c></ti>
<ti>optional, <c>distcc</c> required in <c>options</c> (catalyst.conf)</ti>
<ti>hosts used as distcc build slaves</ti>
<ti>distcc_hosts: 127.0.0.1 192.168.0.1</ti>
</tr>
<tr>
<ti><c>tinderbox/use</c></ti>
<ti>required</ti>
<ti>USE flags to be used for the tinderbox build</ti>
<ti>tinderbox/use: gtk2 qt kde bonobo</ti>
</tr>
<tr>
<ti><c>tinderbox/packages</c></ti>
<ti>required</ti>
<ti>list of ebuilds for the tinderbox target to build</ti>
<ti>tinderbox/packages: xorg-x11 kde xmms parted portage</ti>
</tr>
</table>

<p><b>Usage:</b> Here's how the tinderbox works. The specified seed tarball is used to set up the chroot
environment. Then, <c>rsync</c> is used to create a pristine backup of the chroot environment. The firrst package
specified in <c>tinderbox/packages</c> is merged, using the <c>USE</c> settings specified in <c>tinderbox/use</c>.
Provided it builds correctly, Catalyst uses <c>rsync</c> to restore the chroot environment to its original pristine
state.  Then, each successive package specified in <c>tinderbox/packages</c> is merged; each merge is followed by
a "return to original state" <c>rsync</c> step.</p>

<p>Because of the "return to original state" <c>rsync</c> step, the tinderbox can detect errors in dependencies
in certain packages. For a package to compile successfully, it must depend on everything it needs to compile cleanly
from a pristine stage3 tarball. Also, this tinderbox testing is actually very efficient when <c>pkgcache</c> is enabled
in <path>/etc/catalyst/catalyst.conf</path>, because pre-built packages will be used to satisfy any dependencies. This means
that CPU-hungry builds like <path>xfree</path> will be compiled only once each tinderbox run, provided that <c>pkgcache</c>
is enabled.</p>

<p>The tinderbox will continue to build through the complete list of packages specified in <c>tinderbox/packages</c>,
even if some packages don't build. A build log is created and stored in 
<path>[storedir]/tmp/[rel_type]/[subarch]-tinderbox-[version_stamp]/tmp/tinderbox.log</path>. If a package
builds correctly, a line will be recorded in this file that contains the name of the package as specified
in <c>tinderbox/packages</c>. If a package does not build correctly, a line will be recorded in this file
that contains the name of the package, preceded by a "<c>! </c>". Please note that failures of earlier packages
may cause later package builds to fail.</p>

<p>Besides the <path>/tmp/tinderbox.log</path> file created inside the chroot directory, the tinderbox
performs no logging. To log the build
process, use the <c>script</c> command along with <c>catalyst</c>, as follows:</p>

<pre caption="Using script with Catalyst to log the build process">
# script
Script started, file is typescript
# catalyst -f /foo/bar/oni.spec
# exit Script done, file is typescript
</pre>
<p>Then, view the <path>typescript</path> file in the current directory for a full log of the build process.</p>
</body>
</section>

</chapter>

<chapter>
<title>Livecd-stage1 Target Reference</title>
<section>
<body>
<p><b>Target name:</b> <c>livecd-stage1</c></p>
<p><b>Target description:</b> The first preliminary target of LiveCD building, basically a
tarball containing a stage3 plus several packages.</p>
<p><b>Requirements for building:</b> A Portage tree snapshot and a stage3 seed tarball.</p>

<p>The livecd-stage1 target uses the following settings:</p>
<table>
<tr>
<th>Variable</th>
<th>Usage</th>
<th>Description</th>
<th>Specfile example</th>
</tr>
<tr>
<ti><c>subarch</c></ti>
<ti>required</ti>
<ti><uri link="/proj/en/releng/catalyst/index.xml#doc_chap5">sub-architecture</uri> Catalyst
is to build for, e.g. pentium4 or athlon-xp</ti>
<ti>subarch: athlon-xp</ti>
</tr>
<tr>
<ti><c>version_stamp</c></ti>
<ti>required</ti>
<ti>identifier, i.e. a date or version tag</ti>
<ti>version_stamp: 2004.3</ti>
</tr>
<tr>
<ti><c>target</c></ti>
<ti>required</ti>
<ti>target that Catalyst is to build, in this case, <c>livecd-stage1</c></ti>
<ti>target: stage1</ti>
</tr>
<tr>
<ti><c>rel_type</c></ti>
<ti>required</ti>
<ti>build profile Catalyst will use, in most cases, <c>default</c> will suffice</ti>
<ti>rel_type: default</ti>
</tr>
<tr>
<ti><c>profile</c></ti>
<ti>required</ti>
<ti>Portage profile (/etc/make.profile) Catalyst is to use for the build</ti>
<ti>profile: default-linux/x86/2004.3</ti>
</tr>
<tr>
<ti><c>snapshot</c></ti>
<ti>required</ti>
<ti>Portage snapshot to use, path is relative to ${clst_storedir}/snapshots</ti>
<ti>snapshot: 20041222</ti>
</tr>
<tr>
<ti><c>source_subpath</c></ti>
<ti>required</ti>
<ti>location of seed stage, path relative to ${clst_sharedir}</ti>
<ti>source_subpath: default/stage3-x86-2004.1</ti>
</tr>
<tr>
<ti><c>distcc_hosts</c></ti>
<ti>optional, <c>distcc</c> required in <c>options</c> (catalyst.conf)</ti>
<ti>hosts used as distcc build slaves</ti>
<ti>distcc_hosts: 127.0.0.1 192.168.0.1</ti>
</tr>
<tr>
<ti><c>livecd/use</c></ti>
<ti>required</ti>
<ti>USE variables used to build the livecd environment</ti>
<ti>livecd/use: gtk2 kde gnome qt bonobo</ti>
</tr>
<tr>
<ti><c>livecd/packages</c></ti>
<ti>required</ti>
<ti>list of packages to build and include in the livecd environment</ti>
<ti>livecd/packages: xorg-x11 qt parted mozilla-firefox gnome</ti>
</tr>
</table>

<impo><c>livecd</c> <c>MUST</c> be included among the USE variables you specify in the <c>livecd/use</c> variable.
Be sure to list <c>sys-apps/baselayout</c> among the packages specified in the <c>livecd/packages</c> variable, as
baselayout needs to be re-merged with the <c>livecd</c> USE variable set in order for the LiveCD to boot correctly.</impo>

</body>
</section>

</chapter>

<chapter>
<title>Livecd-stage2 Target Reference</title>
<section>
<body>
<p><b>Target name:</b> <c>livecd-stage2</c></p>
<p><b>Target description:</b> This target prepares the LiveCD for general use. A stage2 LiveCD contains
a livecd-stage1 plus kernel and initrds to be used for booting the CD image.</p>
<p><b>Requirements for building:</b> A Portage tree snapshot and a livecd-stage1 seed image.</p>

<p>The livecd-stage2 target uses the following settings:</p>
<table>
<tr>
<th>Variable</th>
<th>Usage</th>
<th>Description</th>
<th>Specfile example</th>
</tr>
<tr>
<ti><c>subarch</c></ti>
<ti>required</ti>
<ti><uri link="/proj/en/releng/catalyst/index.xml#doc_chap5">sub-architecture</uri> Catalyst
is to build for, e.g. pentium4 or athlon-xp</ti>
<ti>subarch: athlon-xp</ti>
</tr>
<tr>
<ti><c>version_stamp</c></ti>
<ti>required</ti>
<ti>identifier, i.e. a date or version tag</ti>
<ti>version_stamp: 2004.3</ti>
</tr>
<tr>
<ti><c>target</c></ti>
<ti>required</ti>
<ti>target that Catalyst is to build, in this case, <c>livecd-stage2</c></ti>
<ti>target: stage1</ti>
</tr>
<tr>
<ti><c>rel_type</c></ti>
<ti>required</ti>
<ti>build profile Catalyst will use, in most cases, <c>default</c> will suffice</ti>
<ti>rel_type: default</ti>
</tr>
<tr>
<ti><c>profile</c></ti>
<ti>required</ti>
<ti>Portage profile (/etc/make.profile) Catalyst is to use for the build</ti>
<ti>profile: default-linux/x86/2004.3</ti>
</tr>
<tr>
<ti><c>snapshot</c></ti>
<ti>required</ti>
<ti>Portage snapshot to use, path is relative to ${clst_storedir}/snapshots</ti>
<ti>snapshot: 20041222</ti>
</tr>
<tr>
<ti><c>source_subpath</c></ti>
<ti>required</ti>
<ti>location of seed stage, path relative to ${clst_sharedir}</ti>
<ti>source_subpath: default/stage3-x86-2004.1</ti>
</tr>
<tr>
<ti><c>distcc_hosts</c></ti>
<ti>optional, <c>distcc</c> required in <c>options</c> (catalyst.conf)</ti>
<ti>hosts used as distcc build slaves</ti>
<ti>distcc_hosts: 127.0.0.1 192.168.0.1</ti>
</tr>
<tr>
<ti><c>boot/kernel</c></ti>
<ti>required</ti>
<ti>identifiers for all kernels to be available on the LiveCD</ti>
<ti>boot/kernel: gentoo smp</ti>
</tr>
<tr>
<ti><c>boot/kernel/[boot/kernel:x]/sources</c></ti>
<ti>required</ti>
<ti>kernel ebuild to use for each kernel</ti>
<ti>boot/kernel/gentoo/sources: gentoo-dev-sources</ti>
</tr>
<tr>
<ti><c>boot/kernel/[boot/kernel:x]/config</c></ti>
<ti>required</ti>
<ti>full path to the kernel .config used to build the specified kernel</ti>
<ti>boot/kernel/smp/config: /home/user/smp-config.config</ti>
</tr>
<tr>
<ti><c>boot/kernel/[boot/kernel:x]/extraversion</c></ti>
<ti>optional</ti>
<ti>optional tag to add to the specified kernel</ti>
<ti>boot/kernel/smp/extraversion: 1337-CD</ti>
</tr>
<tr>
<ti><c>boot/kernel/[boot/kernel:x]/packages</c></ti>
<ti>optional</ti>
<ti>list of kernel source dependent ebuilds to be built with the kernel</ti>
<ti>boot/kernel/gentoo/packages: hostap-driver pcmcia-cs</ti>
</tr>
<tr>
<ti><c>boot/kernel/[boot/kernel:x]/use</c></ti>
<ti>optional</ti>
<ti>USE variables used when building the kernel source dependent packages</ti>
<ti>boot/kernel/gentoo/use: apm pnp pcmcia</ti>
</tr>
<tr>
<ti><c>boot/kernel/[boot/kernel:x]/gk_kernargs</c></ti>
<ti>optional</ti>
<ti>list of arguments to be passed to genkernel for the specified kernel</ti>
<ti>boot/kernel/smp/gk_kernargs: --kernel-cc=distcc --tempdir=/tmp</ti>
</tr>
<tr>
<ti><c>livecd/gk_mainargs</c></ti>
<ti>optional</ti>
<ti>list of arguments to be passed to genkernel</ti>
<ti>livecd/gk_mainargs: --kernel-cc=distcc --tempdir=/tmp</ti>
</tr>
<tr>
<ti><c>livecd/cdfstype</c></ti>
<ti>required</ti>
<ti>type of filesystem to use for the LiveCD, supported types are 
zisofs, squashfs, cloop, gcloop, and noloop</ti>
<ti>livecd/cdfstype: squashfs</ti>
</tr>
<tr>
<ti><c>livecd/runscript</c></ti>
<ti>required</ti>
<ti>runscript that Catalyst uses (keep the default value unless you know EXACTLY what you are doing)</ti>
<ti>livecd/runscript: /usr/lib/catalyst/livecd/runscript/default-runscript.sh</ti>
</tr>
<tr>
<ti><c>livecd/archscript</c></ti>
<ti>required</ti>
<ti>archscript that Catalyst uses (keep the default value unless you know EXACTLY what you are doing)</ti>
<ti>livecd/archscript: /usr/lib/catalyst/livecd/runscript/x86-archscript.sh</ti>
</tr>
<tr>
<ti><c>livecd/empty</c></ti>
<ti>optional</ti>
<ti>list of directories to empty in the LiveCD environment (used to conserve space)</ti>
<ti>livecd/empty: /var/tmp /var/cache /usr/portage</ti>
</tr>
<tr>
<ti><c>livecd/rm</c></ti>
<ti>optional</ti>
<ti>specific files to remove from the LiveCD environment (used to conserve space)</ti>
<ti>livecd/rm: /lib/*.a /var/log/emerge.log</ti>
</tr>
<tr>
<ti><c>livecd/unmerge</c></ti>
<ti>optional</ti>
<ti>list of ebuilds to unmerge from the LiveCD environment</ti>
<ti>livecd/unmerge: autoconf automake portage man-pages</ti>
</tr>
<tr>
<ti><c>livecd/iso</c></ti>
<ti>optional</ti>
<ti>location to put the generated .iso file</ti>
<ti>livecd/iso: /tmp/my_livecd.iso</ti>
</tr>
<tr>
<ti><c>livecd/overlay</c></ti>
<ti>optional</ti>
<ti>directory to be copied to the booted livecd fs (not the LiveCD root environment)</ti>
<ti>livecd/overlay: /home/user/my_overlay</ti>
</tr>
<tr>
<ti><c>livecd/root_overlay</c></ti>
<ti>optional</ti>
<ti>full path to the a directory to be overlayed onto the booted LiveCD environment</ti>
<ti>livecd/root_overlay: /home/user/my_root_overlay</ti>
</tr>
<tr>
<ti><c>livecd/modblacklist</c></ti>
<ti>optional</ti>
<ti>modules blacklisted from autoloading by hotplug</ti>
<ti>livecd/modblacklist: usb-storage nvidia</ti>
</tr>
<tr>
<ti><c>livecd/rcadd</c></ti>
<ti>optional</ti>
<ti>list of daemons and their respective boot levels to be started in</ti>
<ti>livecd/rcadd: syslog-ng:default gpm:default</ti>
</tr>
<tr>
<ti><c>livecd/rcdel</c></ti>
<ti>optional</ti>
<ti>list of daemons and their respective boot levels to be removed from</ti>
<ti>livecd/rcadd: syslog-ng:default sshd:default</ti>
</tr>
<tr>
<ti><c>livecd/type</c></ti>
<ti>optional</ti>
<ti>type of LiveCD to build</ti>
<ti>gentoo-release-universal</ti>
</tr>
<tr>
<ti><c>livecd/motd</c></ti>
<ti>optional</ti>
<ti>full path to the motd to be used by the booted LiveCD environment</ti>
<ti>/home/users/livecd-motd.txt</ti>
</tr>
<tr>
<ti><c>livecd/splash_type</c></ti>
<ti>optional</ti>
<ti>which splash package to use, bootsplash or gensplash</ti>
<ti>livecd/splash_type: gensplash</ti>
</tr>
<tr>
<ti><c>livecd/splash_theme</c></ti>
<ti>optional</ti>
<ti>splash theme to use</ti>
<ti>livecd/splash_theme: livecd-2004.3</ti>
</tr>
<tr>
<ti><c>livecd/fsscript</c></ti>
<ti>optional</ti>
<ti>script to be run inside of the LiveCD environment (for tweaking the environment, etc)</ti>
<ti>livecd/fsscript: /home/user/my_fsscript.sh</ti>
</tr>
<tr>
<ti><c>livecd/xinitrc</c></ti>
<ti>optional</ti>
<ti>full path to an xinitrc for use with a XLiveCD</ti>
<ti>livecd/xinitrc: /home/user/livecd_xinitrc</ti>
</tr>
<tr>
<ti><c>livecd/devmanager</c></ti>
<ti>optional</ti>
<ti>device manager to use on the livecd, either devfs or udev</ti>
<ti>livecd/devmanager: udev</ti>
</tr>
</table>

<note><b>runscripts and archscripts:</b> The <c>livecd/runscript</c> and <c>livecd/archscript</c> variables point to 
shell scripts that handle various chores that require direct shell interaction. For the purposes of the 
<c>livecd-stage2</c> target, the archscript and runscript are used to build kernel(s) for the LiveCD,
perform some prepping and cleaning of the CD filesystem, place the bootable CD filesystem in a loopback
as needed, and set up the LiveCD bootloader.</note>

<note><b>Using the kernel-related variables in the spec file:</b> For each name in the <c>boot/kernel</c> 
variable in the spec file (such as <c>gentoo</c>, for example), this target will
use <c>genkernel</c> to build a kernel and initrd. With the example <c>boot/kernel</c> entry of <c>gentoo</c>, Catalyst
will use the <c>boot/kernel/gentoo/sources</c> setting to determine what kernel sources to merge for this particular
kernel build (an example setting would be <c>=sys-kernel/gentoo-dev-sources-2.6.0</c>.) Any <c>USE</c> settings specified
in <c>boot/kernel/gentoo/use</c> will be exported to the environment before <c>genkernel</c> is called. 
</note>

</body>
</section>

</chapter>

</guide>
