<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/en/releng/catalyst/reference.xml" disclaimer="obsolete">

<title>Catalyst Reference Manual</title>

<author title="Author">
<mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>

<author title="Contributor">
<mail link="zhen@gentoo.org">John Davis</mail>
</author>

<author title="Editor">
<mail link="wolf31o2@gentoo.org">Chris Gianelloni</mail>
</author>

<abstract>
Catalyst reference manual, covering every aspect of catalyst configuration.
</abstract>

<version>2.0</version>
<date>2007-01-30</date>

<chapter>
<title>Introduction</title>

<section>
<body>

<p>
This document is intended to be a complete reference for all catalyst targets,
spec file options, and all other aspects of catalyst.
</p>

</body>
</section>

</chapter>

<chapter>
<title>Reference of spec file options</title>

<section>
<title>Snapshot Target Reference</title>
<body>

<p><b>Target name:</b> <c>snapshot</c></p>

<p>
<b>Target Description:</b> A repository snapshot, the tarred and compressed
repository tree used for building all other targets.
</p>

<p>
The snapshot target uses the following settings:
</p>

<table>

<tr>
<th>Variable</th>
<th>Usage</th>
<th>Description</th>
<th>Specfile example</th>
</tr>

<tr>
<ti><c>version_stamp</c></ti>
<ti>Required</ti>
<ti>Identifier, i.e. a date or version tag</ti>
<ti>version_stamp: 2006.0</ti>
</tr>

<tr>
<ti><c>portdir_overlay</c></ti>
<ti>Optional</ti>
<ti>Repository overlay directory (PORTDIR_OVERLAY in /etc/make.conf)</ti>
<ti>portdir_overlay: /home/user/my_overlay</ti>
</tr>

</table>

</body>
</section>

<section>
<title>Stage Tarball (stage1, stage2, stage3) Target Reference</title>
<body>

<p><b>Target name:</b> <c>stage1</c></p>

<p>
<b>Target description:</b> A stage1 tarball, the base component used for
building stage2 and stage3 tarballs.
</p>

<p>
<b>Requirements for building:</b> A Portage tree snapshot and as well as a
stage2 or stage3 "seed" tarball to set up the chroot environment.
</p>

<p>
The stage1 target uses the following settings:
</p>

<table>

<tr>
<th>Variable</th>
<th>Usage</th>
<th>Description</th>
<th>Specfile example</th>
</tr>

<tr>
<ti><c>subarch</c></ti>
<ti>Required</ti>
<ti><uri
link="/proj/en/releng/catalyst/index.xml#doc_chap5">Sub-architecture</uri>
catalyst is to build for, e.g. pentium4 or athlon-xp.  A stage1 tarball should
always use a generic sub-architecture, as it is used to build optimized stages
for multiple sub-architectures and is required to run on any of them.</ti>
<ti>subarch: x86</ti>
</tr>

<tr>
<ti><c>version_stamp</c></ti>
<ti>Required</ti>
<ti>Identifier, i.e. a date or version tag</ti>
<ti>version_stamp: 2006.0</ti>
</tr>

<tr>
<ti><c>target</c></ti>
<ti>Required</ti>
<ti>Target that catalyst is to build, in this case, a stage1 tarball</ti>
<ti>target: stage1</ti>
</tr>

<tr>
<ti><c>rel_type</c></ti>
<ti>Required</ti>
<ti>Build profile catalyst will use, in most cases, <c>default</c> will
suffice</ti>
<ti>rel_type: default</ti>
</tr>

<tr>
<ti><c>profile</c></ti>
<ti>Required</ti>
<ti>Repository profile (/etc/make.profile) that catalyst is to use for the
build</ti>
<ti>profile: default-linux/x86/no-nptl</ti>
</tr>

<tr>
<ti><c>snapshot</c></ti>
<ti>Required</ti>
<ti>Portage snapshot to use, path is relative to
<c>${clst_storedir}/snapshots</c></ti>
<ti>snapshot: 2007.0</ti>
</tr>

<tr>
<ti><c>source_subpath</c></ti>
<ti>Required</ti>
<ti>Location of seed stage, path relative to <c>${clst_sharedir}/builds</c></ti>
<ti>source_subpath: default/stage3-x86-2006.1</ti>
</tr>

<tr>
<ti><c>distcc_hosts</c></ti>
<ti>Optional, <c>distcc</c> required in <c>options</c> (catalyst.conf)</ti>
<ti>Hosts used as distcc build slaves</ti>
<ti>distcc_hosts: buildhost 127.0.0.1 192.168.0.1</ti>
</tr>

</table>

</body>
</section>

</chapter>

<chapter>
<title>GRP Target Reference</title>
<section>
<body>

<p><b>Target name:</b> <c>grp</c></p>
<p><b>Target description:</b> A GRP package set. GRP stands for 'Gentoo Reference Platform'
and consists of a set of packages and source tarballs,
grouped into (optionally) separate directories for easy integration into installation CDs.</p>
<p><b>Requirements for building:</b> A Portage tree snapshot and a stage3 seed tarball.</p>

<p>The GRP target uses the following settings:</p>
<table>
<tr>
<th>Variable</th>
<th>Usage</th>
<th>Description</th>
<th>Specfile example</th>
</tr>
<tr>
<ti><c>subarch</c></ti>
<ti>required</ti>
<ti><uri link="/proj/en/releng/catalyst/index.xml#doc_chap5">sub-architecture</uri> Catalyst
is to build for, e.g. pentium4 or athlon-xp</ti>
<ti>subarch: athlon-xp</ti>
</tr>
<tr>
<ti><c>version_stamp</c></ti>
<ti>required</ti>
<ti>identifier, i.e. a date or version tag</ti>
<ti>version_stamp: 2004.3</ti>
</tr>
<tr>
<ti><c>target</c></ti>
<ti>required</ti>
<ti>target that Catalyst is to build, in this case, <c>grp</c></ti>
<ti>target: stage1</ti>
</tr>
<tr>
<ti><c>rel_type</c></ti>
<ti>required</ti>
<ti>build profile Catalyst will use, in most cases, <c>default</c> will suffice</ti>
<ti>rel_type: default</ti>
</tr>
<tr>
<ti><c>profile</c></ti>
<ti>required</ti>
<ti>Portage profile (/etc/make.profile) Catalyst is to use for the build</ti>
<ti>profile: default-linux/x86/2004.3</ti>
</tr>
<tr>
<ti><c>snapshot</c></ti>
<ti>required</ti>
<ti>Portage snapshot to use, path is relative to ${clst_storedir}/snapshots</ti>
<ti>snapshot: 20041222</ti>
</tr>
<tr>
<ti><c>source_subpath</c></ti>
<ti>required</ti>
<ti>location of seed stage, path relative to ${clst_sharedir}</ti>
<ti>source_subpath: default/stage3-x86-2004.1</ti>
</tr>
<tr>
<ti><c>distcc_hosts</c></ti>
<ti>optional, <c>distcc</c> required in <c>options</c> (catalyst.conf)</ti>
<ti>hosts used as distcc build slaves</ti>
<ti>distcc_hosts: 127.0.0.1 192.168.0.1</ti>
</tr>
<tr>
<ti><c>grp</c></ti>
<ti>required</ti>
<ti>directory structure for the completed GRP build</ti>
<ti>grp: src packages</ti>
</tr>
<tr>
<ti><c>grp/use</c></ti>
<ti>required</ti>
<ti>USE variables to use when building the GRP set</ti>
<ti>grp/use: gtk2 gnome kde qt bonobo acl</ti>
</tr>
<tr>
<ti><c>grp/[grp:x]/type</c></ti>
<ti>required</ti>
<ti>type of GRP build - pkgset will build and package the specified ebuild
into a tarball (binary package), and srcset will simply fetch the sources from a Gentoo mirror</ti>
<ti>grp/src/type: srcset; grp/packages/type: packages</ti>
</tr>
<tr>
<ti><c>grp/[grp:x]/packages</c></ti>
<ti>required</ti>
<ti>list of ebuilds for the appropriate GRP build (srcset, pkgset)</ti>
<ti>grp/src/packages: pciutils hdparm; grp/packages/packages: pciutils hdparm</ti>
</tr>
</table>
</body>
</section>

</chapter>

<chapter>
<title>Tinderbox Target Reference</title>
<section>
<body>
<p><b>Target name:</b> <c>tinderbox</c></p>
<p><b>Target description:</b> The tinderbox is a QA target used to build-test a series of packages.</p>
<p><b>Requirements for building:</b> A Portage tree snapshot and a stage3 seed tarball.</p>

<p>The tinderbox target uses the following settings:</p>
<table>
<tr>
<th>Variable</th>
<th>Usage</th>
<th>Description</th>
<th>Specfile example</th>
</tr>
<tr>
<ti><c>subarch</c></ti>
<ti>required</ti>
<ti><uri link="/proj/en/releng/catalyst/index.xml#doc_chap5">sub-architecture</uri> Catalyst
is to build for, e.g. pentium4 or athlon-xp</ti>
<ti>subarch: athlon-xp</ti>
</tr>
<tr>
<ti><c>version_stamp</c></ti>
<ti>required</ti>
<ti>identifier, i.e. a date or version tag</ti>
<ti>version_stamp: 2004.3</ti>
</tr>
<tr>
<ti><c>target</c></ti>
<ti>required</ti>
<ti>target that Catalyst is to build, in this case, <c>tinderbox</c></ti>
<ti>target: stage1</ti>
</tr>
<tr>
<ti><c>rel_type</c></ti>
<ti>required</ti>
<ti>build profile Catalyst will use, in most cases, <c>default</c> will suffice</ti>
<ti>rel_type: default</ti>
</tr>
<tr>
<ti><c>profile</c></ti>
<ti>required</ti>
<ti>Portage profile (/etc/make.profile) Catalyst is to use for the build</ti>
<ti>profile: default-linux/x86/2004.3</ti>
</tr>
<tr>
<ti><c>snapshot</c></ti>
<ti>required</ti>
<ti>Portage snapshot to use, path is relative to ${clst_storedir}/snapshots</ti>
<ti>snapshot: 20041222</ti>
</tr>
<tr>
<ti><c>source_subpath</c></ti>
<ti>required</ti>
<ti>location of seed stage, path relative to ${clst_sharedir}</ti>
<ti>source_subpath: default/stage3-x86-2004.1</ti>
</tr>
<tr>
<ti><c>distcc_hosts</c></ti>
<ti>optional, <c>distcc</c> required in <c>options</c> (catalyst.conf)</ti>
<ti>hosts used as distcc build slaves</ti>
<ti>distcc_hosts: 127.0.0.1 192.168.0.1</ti>
</tr>
<tr>
<ti><c>tinderbox/use</c></ti>
<ti>required</ti>
<ti>USE flags to be used for the tinderbox build</ti>
<ti>tinderbox/use: gtk2 qt kde bonobo</ti>
</tr>
<tr>
<ti><c>tinderbox/packages</c></ti>
<ti>required</ti>
<ti>list of ebuilds for the tinderbox target to build</ti>
<ti>tinderbox/packages: xorg-x11 kde xmms parted portage</ti>
</tr>
</table>

<p><b>Usage:</b> Here's how the tinderbox works. The specified seed tarball is used to set up the chroot
environment. Then, <c>rsync</c> is used to create a pristine backup of the chroot environment. The firrst package
specified in <c>tinderbox/packages</c> is merged, using the <c>USE</c> settings specified in <c>tinderbox/use</c>.
Provided it builds correctly, Catalyst uses <c>rsync</c> to restore the chroot environment to its original pristine
state.  Then, each successive package specified in <c>tinderbox/packages</c> is merged; each merge is followed by
a "return to original state" <c>rsync</c> step.</p>

<p>Because of the "return to original state" <c>rsync</c> step, the tinderbox can detect errors in dependencies
in certain packages. For a package to compile successfully, it must depend on everything it needs to compile cleanly
from a pristine stage3 tarball. Also, this tinderbox testing is actually very efficient when <c>pkgcache</c> is enabled
in <path>/etc/catalyst/catalyst.conf</path>, because pre-built packages will be used to satisfy any dependencies. This means
that CPU-hungry builds like <path>xfree</path> will be compiled only once each tinderbox run, provided that <c>pkgcache</c>
is enabled.</p>

<p>The tinderbox will continue to build through the complete list of packages specified in <c>tinderbox/packages</c>,
even if some packages don't build. A build log is created and stored in 
<path>[storedir]/tmp/[rel_type]/[subarch]-tinderbox-[version_stamp]/tmp/tinderbox.log</path>. If a package
builds correctly, a line will be recorded in this file that contains the name of the package as specified
in <c>tinderbox/packages</c>. If a package does not build correctly, a line will be recorded in this file
that contains the name of the package, preceded by a "<c>! </c>". Please note that failures of earlier packages
may cause later package builds to fail.</p>

<p>Besides the <path>/tmp/tinderbox.log</path> file created inside the chroot directory, the tinderbox
performs no logging. To log the build
process, use the <c>script</c> command along with <c>catalyst</c>, as follows:</p>

<pre caption="Using script with Catalyst to log the build process">
# script
Script started, file is typescript
# catalyst -f /foo/bar/oni.spec
# exit Script done, file is typescript
</pre>
<p>Then, view the <path>typescript</path> file in the current directory for a full log of the build process.</p>
</body>
</section>

</chapter>

<chapter>
<title>Livecd-stage1 Target Reference</title>
<section>
<body>
<p><b>Target name:</b> <c>livecd-stage1</c></p>
<p><b>Target description:</b> The first preliminary target of LiveCD building, basically a
tarball containing a stage3 plus several packages.</p>
<p><b>Requirements for building:</b> A Portage tree snapshot and a stage3 seed tarball.</p>

<p>The livecd-stage1 target uses the following settings:</p>
<table>
<tr>
<th>Variable</th>
<th>Usage</th>
<th>Description</th>
<th>Specfile example</th>
</tr>
<tr>
<ti><c>subarch</c></ti>
<ti>required</ti>
<ti><uri link="/proj/en/releng/catalyst/index.xml#doc_chap5">sub-architecture</uri> Catalyst
is to build for, e.g. pentium4 or athlon-xp</ti>
<ti>subarch: athlon-xp</ti>
</tr>
<tr>
<ti><c>version_stamp</c></ti>
<ti>required</ti>
<ti>identifier, i.e. a date or version tag</ti>
<ti>version_stamp: 2004.3</ti>
</tr>
<tr>
<ti><c>target</c></ti>
<ti>required</ti>
<ti>target that Catalyst is to build, in this case, <c>livecd-stage1</c></ti>
<ti>target: stage1</ti>
</tr>
<tr>
<ti><c>rel_type</c></ti>
<ti>required</ti>
<ti>build profile Catalyst will use, in most cases, <c>default</c> will suffice</ti>
<ti>rel_type: default</ti>
</tr>
<tr>
<ti><c>profile</c></ti>
<ti>required</ti>
<ti>Portage profile (/etc/make.profile) Catalyst is to use for the build</ti>
<ti>profile: default-linux/x86/2004.3</ti>
</tr>
<tr>
<ti><c>snapshot</c></ti>
<ti>required</ti>
<ti>Portage snapshot to use, path is relative to ${clst_storedir}/snapshots</ti>
<ti>snapshot: 20041222</ti>
</tr>
<tr>
<ti><c>source_subpath</c></ti>
<ti>required</ti>
<ti>location of seed stage, path relative to ${clst_sharedir}</ti>
<ti>source_subpath: default/stage3-x86-2004.1</ti>
</tr>
<tr>
<ti><c>distcc_hosts</c></ti>
<ti>optional, <c>distcc</c> required in <c>options</c> (catalyst.conf)</ti>
<ti>hosts used as distcc build slaves</ti>
<ti>distcc_hosts: 127.0.0.1 192.168.0.1</ti>
</tr>
<tr>
<ti><c>livecd/use</c></ti>
<ti>required</ti>
<ti>USE variables used to build the livecd environment</ti>
<ti>livecd/use: gtk2 kde gnome qt bonobo</ti>
</tr>
<tr>
<ti><c>livecd/packages</c></ti>
<ti>required</ti>
<ti>list of packages to build and include in the livecd environment</ti>
<ti>livecd/packages: xorg-x11 qt parted mozilla-firefox gnome</ti>
</tr>
</table>

<impo><c>livecd</c> <c>MUST</c> be included among the USE variables you specify in the <c>livecd/use</c> variable.
Be sure to list <c>sys-apps/baselayout</c> among the packages specified in the <c>livecd/packages</c> variable, as
baselayout needs to be re-merged with the <c>livecd</c> USE variable set in order for the LiveCD to boot correctly.</impo>

</body>
</section>

</chapter>

<chapter>
<title>Livecd-stage2 Target Reference</title>
<section>
<body>
<p><b>Target name:</b> <c>livecd-stage2</c></p>
<p><b>Target description:</b> This target prepares the LiveCD for general use. A stage2 LiveCD contains
a livecd-stage1 plus kernel and initrds to be used for booting the CD image.</p>
<p><b>Requirements for building:</b> A Portage tree snapshot and a livecd-stage1 seed image.</p>

<p>The livecd-stage2 target uses the following settings:</p>
<table>
<tr>
<th>Variable</th>
<th>Usage</th>
<th>Description</th>
<th>Specfile example</th>
</tr>
<tr>
<ti><c>subarch</c></ti>
<ti>required</ti>
<ti><uri link="/proj/en/releng/catalyst/index.xml#doc_chap5">sub-architecture</uri> Catalyst
is to build for, e.g. pentium4 or athlon-xp</ti>
<ti>subarch: athlon-xp</ti>
</tr>
<tr>
<ti><c>version_stamp</c></ti>
<ti>required</ti>
<ti>identifier, i.e. a date or version tag</ti>
<ti>version_stamp: 2004.3</ti>
</tr>
<tr>
<ti><c>target</c></ti>
<ti>required</ti>
<ti>target that Catalyst is to build, in this case, <c>livecd-stage2</c></ti>
<ti>target: stage1</ti>
</tr>
<tr>
<ti><c>rel_type</c></ti>
<ti>required</ti>
<ti>build profile Catalyst will use, in most cases, <c>default</c> will suffice</ti>
<ti>rel_type: default</ti>
</tr>
<tr>
<ti><c>profile</c></ti>
<ti>required</ti>
<ti>Portage profile (/etc/make.profile) Catalyst is to use for the build</ti>
<ti>profile: default-linux/x86/2004.3</ti>
</tr>
<tr>
<ti><c>snapshot</c></ti>
<ti>required</ti>
<ti>Portage snapshot to use, path is relative to ${clst_storedir}/snapshots</ti>
<ti>snapshot: 20041222</ti>
</tr>
<tr>
<ti><c>source_subpath</c></ti>
<ti>required</ti>
<ti>location of seed stage, path relative to ${clst_sharedir}</ti>
<ti>source_subpath: default/stage3-x86-2004.1</ti>
</tr>
<tr>
<ti><c>distcc_hosts</c></ti>
<ti>optional, <c>distcc</c> required in <c>options</c> (catalyst.conf)</ti>
<ti>hosts used as distcc build slaves</ti>
<ti>distcc_hosts: 127.0.0.1 192.168.0.1</ti>
</tr>
<tr>
<ti><c>boot/kernel</c></ti>
<ti>required</ti>
<ti>identifiers for all kernels to be available on the LiveCD</ti>
<ti>boot/kernel: gentoo smp</ti>
</tr>
<tr>
<ti><c>boot/kernel/[boot/kernel:x]/sources</c></ti>
<ti>required</ti>
<ti>kernel ebuild to use for each kernel</ti>
<ti>boot/kernel/gentoo/sources: gentoo-dev-sources</ti>
</tr>
<tr>
<ti><c>boot/kernel/[boot/kernel:x]/config</c></ti>
<ti>required</ti>
<ti>full path to the kernel .config used to build the specified kernel</ti>
<ti>boot/kernel/smp/config: /home/user/smp-config.config</ti>
</tr>
<tr>
<ti><c>boot/kernel/[boot/kernel:x]/extraversion</c></ti>
<ti>optional</ti>
<ti>optional tag to add to the specified kernel</ti>
<ti>boot/kernel/smp/extraversion: 1337-CD</ti>
</tr>
<tr>
<ti><c>boot/kernel/[boot/kernel:x]/packages</c></ti>
<ti>optional</ti>
<ti>list of kernel source dependent ebuilds to be built with the kernel</ti>
<ti>boot/kernel/gentoo/packages: hostap-driver pcmcia-cs</ti>
</tr>
<tr>
<ti><c>boot/kernel/[boot/kernel:x]/use</c></ti>
<ti>optional</ti>
<ti>USE variables used when building the kernel source dependent packages</ti>
<ti>boot/kernel/gentoo/use: apm pnp pcmcia</ti>
</tr>
<tr>
<ti><c>boot/kernel/[boot/kernel:x]/gk_kernargs</c></ti>
<ti>optional</ti>
<ti>list of arguments to be passed to genkernel for the specified kernel</ti>
<ti>boot/kernel/smp/gk_kernargs: --kernel-cc=distcc --tempdir=/tmp</ti>
</tr>
<tr>
<ti><c>livecd/gk_mainargs</c></ti>
<ti>optional</ti>
<ti>list of arguments to be passed to genkernel</ti>
<ti>livecd/gk_mainargs: --kernel-cc=distcc --tempdir=/tmp</ti>
</tr>
<tr>
<ti><c>livecd/cdfstype</c></ti>
<ti>required</ti>
<ti>type of filesystem to use for the LiveCD, supported types are 
zisofs, squashfs, cloop, gcloop, and noloop</ti>
<ti>livecd/cdfstype: squashfs</ti>
</tr>
<tr>
<ti><c>livecd/runscript</c></ti>
<ti>required</ti>
<ti>runscript that Catalyst uses (keep the default value unless you know EXACTLY what you are doing)</ti>
<ti>livecd/runscript: /usr/lib/catalyst/livecd/runscript/default-runscript.sh</ti>
</tr>
<tr>
<ti><c>livecd/archscript</c></ti>
<ti>required</ti>
<ti>archscript that Catalyst uses (keep the default value unless you know EXACTLY what you are doing)</ti>
<ti>livecd/archscript: /usr/lib/catalyst/livecd/runscript/x86-archscript.sh</ti>
</tr>
<tr>
<ti><c>livecd/empty</c></ti>
<ti>optional</ti>
<ti>list of directories to empty in the LiveCD environment (used to conserve space)</ti>
<ti>livecd/empty: /var/tmp /var/cache /usr/portage</ti>
</tr>
<tr>
<ti><c>livecd/rm</c></ti>
<ti>optional</ti>
<ti>specific files to remove from the LiveCD environment (used to conserve space)</ti>
<ti>livecd/rm: /lib/*.a /var/log/emerge.log</ti>
</tr>
<tr>
<ti><c>livecd/unmerge</c></ti>
<ti>optional</ti>
<ti>list of ebuilds to unmerge from the LiveCD environment</ti>
<ti>livecd/unmerge: autoconf automake portage man-pages</ti>
</tr>
<tr>
<ti><c>livecd/iso</c></ti>
<ti>optional</ti>
<ti>location to put the generated .iso file</ti>
<ti>livecd/iso: /tmp/my_livecd.iso</ti>
</tr>
<tr>
<ti><c>livecd/overlay</c></ti>
<ti>optional</ti>
<ti>directory to be copied to the booted livecd fs (not the LiveCD root environment)</ti>
<ti>livecd/overlay: /home/user/my_overlay</ti>
</tr>
<tr>
<ti><c>livecd/root_overlay</c></ti>
<ti>optional</ti>
<ti>full path to the a directory to be overlayed onto the booted LiveCD environment</ti>
<ti>livecd/root_overlay: /home/user/my_root_overlay</ti>
</tr>
<tr>
<ti><c>livecd/modblacklist</c></ti>
<ti>optional</ti>
<ti>modules blacklisted from autoloading by hotplug</ti>
<ti>livecd/modblacklist: usb-storage nvidia</ti>
</tr>
<tr>
<ti><c>livecd/rcadd</c></ti>
<ti>optional</ti>
<ti>list of daemons and their respective boot levels to be started in</ti>
<ti>livecd/rcadd: syslog-ng:default gpm:default</ti>
</tr>
<tr>
<ti><c>livecd/rcdel</c></ti>
<ti>optional</ti>
<ti>list of daemons and their respective boot levels to be removed from</ti>
<ti>livecd/rcadd: syslog-ng:default sshd:default</ti>
</tr>
<tr>
<ti><c>livecd/type</c></ti>
<ti>optional</ti>
<ti>type of LiveCD to build</ti>
<ti>gentoo-release-universal</ti>
</tr>
<tr>
<ti><c>livecd/motd</c></ti>
<ti>optional</ti>
<ti>full path to the motd to be used by the booted LiveCD environment</ti>
<ti>/home/users/livecd-motd.txt</ti>
</tr>
<tr>
<ti><c>livecd/splash_type</c></ti>
<ti>optional</ti>
<ti>which splash package to use, bootsplash or gensplash</ti>
<ti>livecd/splash_type: gensplash</ti>
</tr>
<tr>
<ti><c>livecd/splash_theme</c></ti>
<ti>optional</ti>
<ti>splash theme to use</ti>
<ti>livecd/splash_theme: livecd-2004.3</ti>
</tr>
<tr>
<ti><c>livecd/fsscript</c></ti>
<ti>optional</ti>
<ti>script to be run inside of the LiveCD environment (for tweaking the environment, etc)</ti>
<ti>livecd/fsscript: /home/user/my_fsscript.sh</ti>
</tr>
<tr>
<ti><c>livecd/xinitrc</c></ti>
<ti>optional</ti>
<ti>full path to an xinitrc for use with a XLiveCD</ti>
<ti>livecd/xinitrc: /home/user/livecd_xinitrc</ti>
</tr>
<tr>
<ti><c>livecd/devmanager</c></ti>
<ti>optional</ti>
<ti>device manager to use on the livecd, either devfs or udev</ti>
<ti>livecd/devmanager: udev</ti>
</tr>
</table>

<note><b>runscripts and archscripts:</b> The <c>livecd/runscript</c> and <c>livecd/archscript</c> variables point to 
shell scripts that handle various chores that require direct shell interaction. For the purposes of the 
<c>livecd-stage2</c> target, the archscript and runscript are used to build kernel(s) for the LiveCD,
perform some prepping and cleaning of the CD filesystem, place the bootable CD filesystem in a loopback
as needed, and set up the LiveCD bootloader.</note>

<note><b>Using the kernel-related variables in the spec file:</b> For each name in the <c>boot/kernel</c> 
variable in the spec file (such as <c>gentoo</c>, for example), this target will
use <c>genkernel</c> to build a kernel and initrd. With the example <c>boot/kernel</c> entry of <c>gentoo</c>, Catalyst
will use the <c>boot/kernel/gentoo/sources</c> setting to determine what kernel sources to merge for this particular
kernel build (an example setting would be <c>=sys-kernel/gentoo-dev-sources-2.6.0</c>.) Any <c>USE</c> settings specified
in <c>boot/kernel/gentoo/use</c> will be exported to the environment before <c>genkernel</c> is called. 
</note>

</body>
</section>

</chapter>

<chapter>
<title>Catalyst Options Reference</title>

<section>
<title>Introduction</title>
<body>
<p>There are many different options that can be set in <c>catalyst.conf</c>. Find below a detailed explanation of each.</p>
</body>
</section>

<section>
<title>ccache</title>
<body>
<p><b>Option Name:</b> ccache</p>
<p><b>Description:</b> Enables build time ccache support.</p>
<p><b>Purpose:</b> Speeds up builds dramatically after the first build.</p>
<p><b>Use:</b> Append <c>ccache</c> to <c>options</c> in <path>/etc/catalyst/catalyst.conf</path>.</p>
<p><b>Example:</b> options: ccache</p>
</body>
</section>

<section>
<title>pkgcache</title>
<body>
<p><b>Option Name:</b> pkgcache</p>
<p><b>Description:</b> Enables caching of .tbz2s.</p>
<p><b>Purpose:</b> Speeds up builds dramatically after the first build by utilizing prebuilt packages.</p>
<p><b>Use:</b> Append <c>pkgcache</c> to <c>options</c> in <path>/etc/catalyst/catalyst.conf</path>.</p>
<p><b>Example:</b> options: pkgcache</p>
</body>
</section>

<section>
<title>distcc</title>
<body>
<p><b>Option Name:</b> distcc</p>
<p><b>Description:</b> Enables distributed network compiling.</p>
<p><b>Purpose:</b> Speeds up builds dramatically by utilizing multiple build hosts.</p>
<p><b>Use:</b> Append <c>distcc</c> to <c>options</c> in <path>/etc/catalyst/catalyst.conf</path>,
and set distcc_hosts in your spec files.</p>
<p><b>Example:</b> options: distcc</p>
</body>
</section>

<section>
<title>envscript</title>
<body>
<p><b>Setting Name:</b> envscript</p>
<p><b>Description:</b> Enables the definition of any environment variable for use during building.</p>
<p><b>Purpose:</b> To enable the use of HTTP proxy settings, MAKEOPTS settings, 
and any other environment settings.</p>
<p><b>Use:</b> Set <c>envscript=script.sh</c> in <path>/etc/catalyst/catalyst.conf</path>. An 
envscript uses the following format:</p>

<pre caption="sample envscript">
export MAKEOPTS="-j4"
export GENTOO_MIRRORS="mymirror"
export meep="foo"
</pre>
</body>
</section>

<section>
<title>storedir</title>
<body>
<p><b>Option Name:</b> storedir</p>
<p><b>Description:</b> Specifies Catalyst's main working directory.</p>
<p><b>Purpose:</b> Enables user definition of the working directory.</p>
<p><b>Use:</b> Set <c>storedir</c> to a specified location in <path>/etc/catalyst/catalyst.conf</path></p>
<p><b>Example:</b> storedir: /home/user/catalyst_storedir</p>
</body>
</section>

<section>
<title>sharedir</title>
<body>
<p><b>Option Name:</b> sharedir</p>
<p><b>Description:</b> Specifies the location of Catalyst's main program files and binaries.</p>
<p><b>Purpose:</b> Enables user definition of the location of Catalyst's main program files and binaries.</p>
<p><b>Use:</b> Set <c>sharedir</c> to a specified location in <path>/etc/catalyst/catalyst.conf</path></p>
<p><b>Example:</b> sharedir: /home/user/catalyst_sharedir</p>
</body>
</section>

</chapter>
</guide>
