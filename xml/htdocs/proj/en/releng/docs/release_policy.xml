<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/releng/docs/Attic/release_policy.xml,v 1.2 2004/02/29 21:37:24 zhen Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="release_policy.xml">
<title>Gentoo Linux Official Release Policy</title>

<author title = "Author">
<mail link="zhen@gentoo.org">John Davis</mail>
</author>

<abstract>
This guide outlines the entire Gentoo Linux release process. It is intended
to answer and address all aspects of the release process.
</abstract>

<license/>

<version>DRAFT</version>
<date>29 February 2004</date>

<chapter>
	<title>Release Overview</title>
	<section>
		<title>Introduction</title>
		<body>
		<p>A common misconception is that a major software release is stressful. In the past,
		this was surely the case with Gentoo.  The fluid nature of Gentoo makes it very
		hard to organize a release because Gentoo redefines the software paradigm.
		We all know that there is never a need to install a service pack in Gentoo, or
		reinstall to use the latest and the greatest piece of software.  So what do we release
		then, and how? </p>
		</body>
	</section>

	<section>
		<title>What is an Official Release?</title>
		<body>
		<p>In some ways we conform to the release paradigm, but in most cases, we do not.
		Usually, a software vendor will release a new version of their product that the
		users have not had mainstream access to yet.  With Gentoo, users <i>always</i> have
		access to the newest and the greatest software.  So where does that leave releases?  
		Why do we even have them at all? </p>

		<p>Gentoo releases give Gentoo an opportunity to showcase the best of what we have to
		offer.  Sure, we have the new KDE or GNOME in Portage, but what isn't in Portage is
		a GameCD with the killer game of the year on it.  What isn't in Portage is a new
		distribution method, like the Gentoo Store, that allows users to buy an easy installation
		method that does not require a fast Internet connection.  I think that you get my point.
		Releases are Gentoo's way of getting our name out there, our chance to really show
		what we can do with our product.
		</p>
		</body>
	</section>
	
	<section>
		<title>Release Structure</title>
		<body>
		<p>So how does Gentoo release? The current scheme for release is a quarterly one.
		Our releases are designated 2004.0, 2004.1, 2004.2, and 2004.3, for example.  Doing
		quarterly releases allows us to maintain our fluid nature, as well as get our technology
		out to the world in a timely fashion. </p>

		<p>What is included in an Official Release? An official Gentoo release must include the
		following: </p>

		<table>
		<tr>
			<th>Requirement</th>
			<th>Description</th>
		</tr>
		<tr>
			<ti>Installation stages</ti>
			<ti>Stage tarballs used to install the Gentoo distribution</ti>
		</tr>
		<tr>
			<ti>Bootable LiveCD</ti>
			<ti>A Bootable LiveCD that follows the given specs</ti>
		</tr>
		<tr>
			<ti>GRP (Gentoo Reference Platform)</ti>
			<ti>Binaries versions of critical system packages</ti>
		</tr>
		<tr>
			<ti>Installation documentation</ti>
			<ti>In the form of the Gentoo Handbook</ti>
		</tr>
		<tr>
			<ti>Release notes</ti>
			<ti>Information such as package updates, errata, and security bugs
			that have been addressed.</ti>
		</tr>
		</table>
		</body>
	</section>
</chapter>

<chapter>
	<title>Release Process</title>

	<section>
		<title>Specifications</title>
		<body>
		<p>The following release components must adhere to the following specifications:</p>

		<p><b>Installation stages</b></p>
		<ul>
			<li>Must be built by Catalyst</li>
		</ul>
		
		<p><b>Bootable LiveCDs</b></p>
		<ul>
			<li>Must be built by Catalyst</li>
			<li>Must adhere to the official LiveCD filesystem structure</li>
		</ul>
		
		<p>Besides the directories needed for isolinux and friends, the following
		are required on an official LiveCD:</p>
		
		<p><b>Disc One</b></p>
		<table>
		<tr>
			<th>Directory</th>
			<th>Contents</th>
		</tr>
		<tr>
			<ti>/docs/{release-notes,handbook}/{txt,html,pdf}</ti>
			<ti>The <path>docs</path> directory contains the official release README,
			as well as directories for txt, html, and pdf versions of both the
			release notes and Gentoo Handbook. </ti>
		</tr>
		<tr>
			<ti>/distfiles</ti>
			<ti>The <path>distfiles</path> directory contains all distfiles needed to
			install Gentoo Linux from stage1 to stage3 without a network connection</ti>
		</tr>
		<tr>
			<ti>snapshots</ti>
			<ti>The <path>snapshots</path> directory contains the release Portage snapshot
			that was used to build the LiveCDs, stages, and GRP. </ti>
		</tr>
		<tr>
			<ti>stages</ti>
			<ti>The <path>stages</path> directory contains a generic stage1 for the
			target architecture and a stage3 for each subarch of the target architecture. </ti>
		</tr>
		</table>

		<p><b>Disc Two</b></p>
		<table>
		<tr>
			<th>Directory</th>
			<th>Contents</th>
		</tr>
		</table>

		<p><b>GRP (Gentoo Reference Platform) sets</b></p>
		<ul>
			<li>Must be built by Catalyst</li>
			<li>If the GRP is installation specific GRP, the spec file used for building
			must be approved by releng. </li>
		</ul>

		<p><b>Installation documentation</b></p>
		<ul>
			<li>The main docmentation must be the Gentoo Handbook</li>
			<li>Supplemental documentation may be used, but it is strongly
			recommended that the supplmental documentation ultimately be merged into
			the Handbook. </li>
		</ul>

		<p><b>Release notes</b></p>
		<ul>
			<li>They must follow the template laid down by releng</li>
			<li>They must be included on the LiveCD as well as
			the releng project page under <i>release/$release/$arch/$arch-release-notes.xml</i></li>
			<li>They have to reside in some form, whether linked to or otherwise,
			in a common location specified by releng for easy user access. </li>
		</ul>
		</body>	
	</section>

	<section>
		<title>Timeline</title>
		<body>
		<p>The aim of this document is not to define concrete timelines that have to
		be met.  Doing so would be counterproductive and unrealistic.  Release timelines
		are found through a compromise of the releng leads and the arch leads.  Releng
		guides the direction and schedule of the release, but it is up to the arch leads
		when they want to release. </p>

		<p>There is one certainty that can be expected.  Releng expects that at least
		fifty percent of the entire release process is spent on QA of the release components.
		<b>Release will be delayed until proper QA measures are taken</b>. </p>
		</body>
	</section>

	<section>
		<title>Preliminaries</title>
		<body>
		<p>The first step that has to be taken with any project is planning. It is the arch
		lead's responsibility to decide whether or not there is enough manpower and resources to release
		for their architecture. A release is not something that is worked on one week and left
		alone the next. When the release components are not being built, they are being
		tested, and when they are not being tested, some machine somewhere is building.
		Expect to put in many hours perfecting the final
		product. The importance of testing cannot be downplayed; if an arch does not meet the QA
		requirements, <i>releng will deny a release from that architecture</i>. Releases cannot be rushed. </p>

		<p>The beginning of the release process starts about a week or two after the previous release.
		The arch lead should start fielding the bugs with the previous release and start creating
		a TODO and FEATURES list. It is preferable that both of these documents are online so that
		users can access them. Don't hesistate to start ironing out these bugs and starting the
		next release cycle. Remember that <i>fifty-percent</i> of time spent on releases is QA, and the
		other fifty building the release components and hacking bugs. </p>
		</body>
	</section>

	<section>
		<title>Initial Building</title>
		<body>
		<p>After requested features and bugs have been collected, it is time to start
		the initial building process. Make a Portage snapshot and build a generic non-optimized
		LiveCD set and stageset. Roll all of this together as if it were going to be a release.
		Once completed, contact the mirror admins and upload everything to the experimental
		section of the mirrors. </p>
		</body>
	</section>

	<section>
		<title>The Next Step - QA</title>
		<body>
		<p>Once the beta release components are on the mirrors, get the word out for testing.
		Contact the Gentoo QA team and hit the mailing lists. Don't rush this part; field as
		many bugs as possible, compiling a list to address for the next QA cycle. </p>

		<p>Repeat this cycle as many times as needed. Pre-release should be just that;
		everything should be ready for release, not
		another QA run. Optimally, most of the time dedicated to the release process should
		be spent in this step, and there should be a steady schedule for rolling out new QA
		release sets every couple of weeks. </p>
		</body>
	</section>

	<section>
		<title>Pre-Release</title>
		<body>
		<p>Consider pre-release the final QA run before release. Handle this the same way as
		a QA run, but take the final Portage snapshot that is to be included with the release,
		and build using that snapshot. The Portage snapshot that you use now is supposed to be
		relatively static so do not change the tarball unless there is a security
		update or critical package update. Amplify the QA process to make absolutely certain
		that what is to be released is as flawless as possible. </p>
		</body>
	</section>

	<section>
		<title>More QA</title>
		<body>
		<p>The two weeks before the actual release should be a time of double-checking and
		final bugfixes. Once everything is ready, put together the entire release. Build
		for all supported subarches, and package everything together according to the release guidelines.</p>
		</body>
	</section>

	<section>
		<title>Final Release</title>
		<body>
		</body>
	</section>

	<section>
		<title>What to do in Between Major Releases</title>
		<body>
		</body>
	</section>
</chapter>

<chapter>
	<title>FAQ</title>
	<section>
		<title>FAQ</title>
		<body>
		</body>
	</section>
</chapter>

</guide>
