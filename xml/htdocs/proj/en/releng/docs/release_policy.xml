<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/releng/docs/Attic/release_policy.xml,v 1.4 2004/03/02 01:56:48 zhen Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="release_policy.xml">
<title>Gentoo Linux Release Policy</title>

<author title = "Author">
<mail link="zhen@gentoo.org">John Davis</mail>
</author>

<abstract>
This guide outlines the entire Gentoo Linux release process. It is intended
to answer and address all aspects of the release process.
</abstract>

<license/>

<version>DRAFT</version>
<date>29 February 2004</date>

<chapter>
	<title>Release Overview</title>
	<section>
		<title>Introduction</title>
		<body>
		<p>A common misconception is that a major software release is stressful. In the past,
		this was surely the case with Gentoo.  The fluid nature of Gentoo makes it very
		hard to organize a release because Gentoo redefines the software paradigm.
		We all know that there is never a need to install a service pack in Gentoo, or
		reinstall to use the latest and the greatest piece of software.  So what do we release
		then, and how? </p>
		</body>
	</section>

	<section>
		<title>What is an Official Release?</title>
		<body>
		<p>In some ways we conform to the release paradigm, but in most cases, we do not.
		Usually, a software vendor will release a new version of their product that the
		users have not had mainstream access to yet.  With Gentoo, users <i>always</i> have
		access to the newest and the greatest software.  So where does that leave releases?  
		Why do we even have them at all? </p>

		<p>Gentoo releases give Gentoo an opportunity to showcase the best of what we have to
		offer.  Sure, we have the new KDE or GNOME in Portage, but what isn't in Portage is
		a GameCD with the killer game of the year on it.  What isn't in Portage is a new
		distribution method, like the Gentoo Store, that allows users to buy an easy installation
		method that does not require a fast Internet connection.  I think that you get my point.
		Releases are Gentoo's way of getting our name out there, our chance to really show
		what we can do with our product.
		</p>
		</body>
	</section>
	
	<section>
		<title>Release Structure</title>
		<body>
		<p>So how does Gentoo release? The current scheme for release is a quarterly one.
		Our releases are designated 2004.0, 2004.1, 2004.2, and 2004.3, for example.  Doing
		quarterly releases allows us to maintain our fluid nature, as well as get our technology
		out to the world in a timely fashion. </p>

		<p>What is included in an Official Release? An official Gentoo release must include the
		following: </p>

		<table>
		<tr>
			<th>Requirement</th>
			<th>Description</th>
		</tr>
		<tr>
			<ti>Installation stages</ti>
			<ti>Stage tarballs used to install the Gentoo distribution</ti>
		</tr>
		<tr>
			<ti>Bootable LiveCD</ti>
			<ti>A Bootable LiveCD that follows the given specs</ti>
		</tr>
		<tr>
			<ti>GRP (Gentoo Reference Platform)</ti>
			<ti>Binaries versions of critical system packages</ti>
		</tr>
		<tr>
			<ti>Installation documentation</ti>
			<ti>In the form of the Gentoo Handbook</ti>
		</tr>
		<tr>
			<ti>Release notes</ti>
			<ti>Information such as package updates, errata, and security bugs
			that have been addressed.</ti>
		</tr>
		</table>
		</body>
	</section>
</chapter>

<chapter>
	<title>Release Guidelines</title>

	<section>
		<title>Specifications</title>
		<body>
		<p>The following release components must adhere to the following specifications:</p>

		<p><b>Installation stages</b></p>
		<ul>
			<li>Must be built by Catalyst</li>
		</ul>
		
		<p><b>Bootable LiveCDs</b></p>
		<ul>
			<li>Must be built by Catalyst</li>
			<li>Must adhere to the official LiveCD filesystem structure</li>
		</ul>
		
		<p>Besides the directories needed for isolinux and friends, the following
		are required on an official LiveCD:</p>
		
		<p><b>Disc One</b></p>
		<table>
		<tr>
			<th>Directory</th>
			<th>Contents</th>
		</tr>
		<tr>
			<ti>/docs/{release-notes,handbook}/{txt,html,pdf}</ti>
			<ti>The <path>docs</path> directory contains the official release README,
			as well as directories for txt, html, and pdf versions of both the
			release notes and Gentoo Handbook. </ti>
		</tr>
		<tr>
			<ti>/distfiles</ti>
			<ti>The <path>distfiles</path> directory contains all distfiles needed to
			install Gentoo Linux from stage1 to stage3 without a network connection</ti>
		</tr>
		<tr>
			<ti>/snapshots</ti>
			<ti>The <path>snapshots</path> directory contains the release Portage snapshot
			that was used to build the LiveCDs, stages, and GRP. </ti>
		</tr>
		<tr>
			<ti>/stages</ti>
			<ti>The <path>stages</path> directory contains a generic stage1 for the
			target architecture and a stage3 for each subarch of the target architecture. </ti>
		</tr>
		</table>

		<p><b>Disc Two</b></p>
		<table>
		<tr>
			<th>Directory</th>
			<th>Contents</th>
		</tr>
		<tr>
			<ti>/$app-category (package tree with top level being the categories)</ti>
			<ti>CD2 contains the entire GRP set. It will be the same layout as
			<path>/usr/portage/packages</path>.</ti>
		</tr>
		</table>

		<p><b>GRP (Gentoo Reference Platform) set</b></p>
		<ul>
			<li>Must be built by Catalyst</li>
			<li>If the GRP is installation specific GRP, the spec file used for building
			must be approved by releng. </li>
		</ul>

		<p><b>Installation documentation</b></p>
		<ul>
			<li>The main docmentation must be the Gentoo Handbook</li>
			<li>Supplemental documentation may be used, but it is strongly
			recommended that the supplmental documentation ultimately be merged into
			the Handbook. </li>
		</ul>

		<p><b>Release notes</b></p>
		<ul>
			<li>They must follow the template laid down by releng</li>
			<li>They must be included on the LiveCD as well as
			the releng project page under <i>release/$release/$arch/$arch-release-notes.xml</i></li>
			<li>They have to reside in some form, whether linked to or otherwise,
			in a common location specified by releng for easy user access. </li>
		</ul>
		</body>	
	</section>

	<section>
		<title>Timeline</title>
		<body>
		<p>The release process is continuous in nature, so it does not have a predefined start
		or stop point. When one release stops, the next begins almost immediately. Quarterly
		releases allow thirteen weeks per release. Realistically, there are more
		like twelve since one week is eaten by the turnaround from one release
		to the next. Twelve weeks is a very short period of time in which to function.
		At the very minimum, six of those weeks need to be spent on QA.</p>

		<p>The final release schedule will come from releng about one week after the
		last release. The twelve weeks that are allotted are broken up into four different
		development cells; Initial Development, Beta, QA, and Final Release: </p>

		<p><b>Cell One - Initial Development</b></p>
		<p>The Initial Development cell alloted weeks 1-3 for the research and development of
		new technologies to be integrated into the release. These technologies could be defined as updates to Catalyst, changes
		to LiveCD layout, architecture specific projects (such as a X LiveCD), and
		other strategic initiatives.</p>

		<p>Goals of the Initial Development cell: </p>
		<ul>
			<li>Clear expectations of what is expected in the release - from
			LiveCD layout to naming conventions.</li>
			<li>Release tool updates and bugfixes completed before formal building
			begins.</li>
			<li>Realization of what architectures are releasing.</li>
			<li>Finalization of release specifics so that there are no last minute changes
			made during the release process.</li>
		</ul>
		
		<p><b>Cell Two - Beta</b></p>
		<p>The Beta cell is alloted weeks 4-6 of the release process for the initial building of all
		release components. No new features should be added to the release at this point.
		If there was not a decision on a specific feature during Initial Development, then
		that feature should not be included in the current release. Including the feature will
		inevitably delay the release process.</p>

		<p>Goals of the Beta cell:</p>
		<ul>
			<li>By the end of Beta, release components are built and conform to final release specifications.</li>
			<li>The beta release components are on the Gentoo mirrors in the <i>experimental</i> section,
			ready for testing.</li>
		</ul>

		<p><b>Cell Three: QA</b></p>
		<p>The QA cell is alloted weeks 7-11 for the express purpose of testing and fixing
		all bugs in the release components. The goal of the QA cell is absolute perfection.
		Since the QA cell takes up the most time of any of the cells, it is expected to
		be the most thorough process of release. New technologies and enhancements mean absolutely
		nothing if there is poor QA.</p>

		<p>Goals of the QA cell:</p>
		<ul>
			<li>The majority of bugs in the release components are addressed.</li>
			<li>The closest to perfection that is humanly achievable.</li>
			<li>At the end of the QA cell, all release components are passed to releng.</li>
		</ul>

		<p><b>Cell Four - Final Release</b></p>
		<p>The Final Release cell is alloted week 12 of the release process. At the beginning of this week,
		releng will do the final QA on the release components and upload them to the mirrors for
		propogation.</p>

		<p>Goals of the Final Release cell:</p>
		<ul>
			<li>All release components are on the mirrors in complete form and ontime.</li>
		</ul>

		<p>Release Engineering expects that the arch leads <e>strictly</e> adhere to this timeline.
		The purpose of them is not to be restrictive, but rather helpful in getting a release out
		painlessly and punctually. If any one architecture falls behind in the process, releng will
		not wait for them to catch up. It is the arch lead's responsibility to stay on schedule. </p>
		
		</body>
	</section>
</chapter>

<chapter>
	<title>Release Process</title>
	<section>
		<title>Process Highlights</title>
		<body>
		<p>At the completion of each phase of release, it is the arch lead's responsibility to
		mail the Operational Lead of releng their status. Open communication is a very
		important thing to have during a release process; without it, the entire process
		breaks down and nothing is accomplished. This point cannot be over-emphasized.</p>

		<p>The release process can be illustrated using the following diagram (click for fullsize): </p>
		<fig link="/proj/en/releng/images/release-flow-small.png" linkto="/proj/en/releng/images/release-flow.png"/>
		
		<p>The key highlights of the process involve arch lead to releng communication, and
		management of mirrors. First, the person that the arch leads will be most
		in contact with is the releng Operational Lead. The Operational Lead
		needs to be fully aware of what is going on with each arch. If there
		is a communication breakdown between the Operational Lead and the arch lead,
		chances are that arch will experience delays in the release process. </p>

		<p>Mirror management is vital as users expect timely and quick propogation of
		the release to the mirrors for their downloading pleasure. Upon completion
		of the QA phase, the arch leads will put their arch's release components in
		an easily accesible location, preferably their devspace, so that the releng
		team can do the final QA and propogate the release to the mirrors. 
		Releng will be the only non-infrastructure developers with access to the release
		mirrors. Experimental mirrors differ from this though; arch leads may upload
		and remove their experimental components at their discretion.</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>FAQ</title>
	<section>
		<title>FAQ</title>
		<body>
		</body>
	</section>
</chapter>

</guide>
