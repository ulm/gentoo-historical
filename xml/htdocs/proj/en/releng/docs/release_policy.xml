<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/releng/docs/Attic/release_policy.xml,v 1.7 2004/03/02 21:27:20 zhen Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="release_policy.xml">
<title>Gentoo Linux Release Policy</title>

<author title = "Author">
<mail link="zhen@gentoo.org">John Davis</mail>
</author>

<abstract>
This guide outlines the Gentoo Linux release process. It is intended
to address all aspects of the release process.
</abstract>

<license/>

<version>DRAFT</version>
<date>29 February 2004</date>

<chapter>
	<title>Release Overview</title>
	<section>
		<title>Introduction</title>
		<body>
		<p>The purpose of Release Engineering and the policy it sets forth is to simplify
		the release process while amplifying good QA practices. The triumphs and failures of past releases have all
		molded the policy set forth in this guide to accomplish our purpose, and it is releng's hope that the same
		open inquiry that seeds improvement continues into the future.</p>
		</body>
	</section>
	<section>
		<title>Contacts</title>
		<body>
		<p>The definitive point of contact for the release is the Release Operations manager.
		If they cannot be reached, there exist other people who can be contacted. The most up to
		date list is on the <uri link="http://www.gentoo.org/proj/en/releng">releng</uri> project
		page.</p>
		</body>
	</section>
	
	<section>
		<title>Release Structure</title>
		<body>
		<p>So how does Gentoo release? The current scheme for release is a quarterly one.
		Our releases are designated 20xx.0, 20xx.1, 20xx.2, and 20xx.3, for example.  Doing
		quarterly releases allows us to maintain our fluid nature, as well as get our technology
		out to the world in a timely fashion. If necessary, releng can designate releases
		beyond 20xx.3.</p>

		<p>What is included in an Official Release? An official Gentoo release must include the
		following: </p>

		<table>
		<tr>
			<th>Requirement</th>
			<th>Description</th>
		</tr>
		<tr>
			<ti>Installation stages</ti>
			<ti>Stage tarballs used to install the Gentoo distribution</ti>
		</tr>
		<tr>
			<ti>Bootable LiveCD</ti>
			<ti>A Bootable LiveCD that follows the given specs</ti>
		</tr>
		<tr>
			<ti>GRP (Gentoo Reference Platform)</ti>
			<ti>Binaries versions of critical system packages</ti>
		</tr>
		<tr>
			<ti>Installation documentation</ti>
			<ti>In the form of the Gentoo Handbook</ti>
		</tr>
		<tr>
			<ti>Release notes</ti>
			<ti>Information such as package updates, errata, and security bugs
			that have been addressed.</ti>
		</tr>
		</table>
		</body>
	</section>
</chapter>

<chapter>
	<title>Release Guidelines</title>

	<section>
		<title>Specifications</title>
		<body>
		<p>Each release component adheres to certain specifications and requirements:</p>

		<p><b>Installation stages</b></p>
		<ul>
			<li>Built by Catalyst</li>
		</ul>

		<p>Stages follow the naming convention <i>stageX-${subarch}-${extra_ident}-${rel_ver}.tar.bz2</i>,
		where X is the stage number, ${subarch}, the (sub)arch that the stage is built for,
		${extra_ident}, for extra identifiers such as "pie-ssp",
		and ${rel_ver}, which is for the release version. </p>

		<p>An example stage name would be <i>stage3-athlon-xp-2004.0.tar.bz2</i> for a default-x86 
		athlon-xp optimized stage, while <i>stage3-pentium3-pie-ssp-2004.0.tar.bz2</i>
		would be an example of a hardened-x86 Pentium III optimized stage.</p>
		
		<p><b>LiveCDs</b></p>
		<ul>
			<li>Built by Catalyst</li>
			<li>Laid out according to the official LiveCD filesystem standard</li>
		</ul>
		
		<p>There are three official LiveCDs in a release; a universal install LiveCD,
		minimal install LiveCD, and a GRP LiveCD. The LiveCDs follow a specific
		naming convention: </p>

		<table>
			<tr>
				<th>LiveCD type</th>
				<th>Naming convention</th>
				<th>Example name</th>
			</tr>
			<tr>
				<ti>Universal installation LiveCD</ti>
				<ti>install-${arch}-${extra_ident}-universal-${rel_ver}.iso</ti>
				<ti>install-x86-universal-2004.0.iso</ti>
			</tr>
			<tr>
				<ti>Minimal installation LiveCD</ti>
				<ti>install-${arch}-${extra_ident}-minimal-${rel_ver}.iso</ti>
				<ti>install-ppc-pie-ssp-minimal-2004.0.iso</ti>
			</tr>
			<tr>
				<ti>GRP LiveCD</ti>
				<ti>packages-${subarch}-${extra_ident}-${rel_ver}.iso</ti>
				<ti>packages-pentium4-2004.0.iso</ti>
			</tr>
		</table>

		<p>${arch} is the main arch that the LiveCD is built for, ${subarch}
		applies only to package LiveCDs and it specifies what subarch the GRP packages
		are built for, ${extra_ident} allows for extra tags such as "pie-ssp" for
		the Hardened project, and ${rel_ver} is the release number, such as 2004.0. </p>
		
		<p>The LiveCD filesystem standard requires that the files and directories
		listed below are on the LiveCD that they are applicable to:</p>
		
		<p><b>Disc One</b></p>
		<table>
		<tr>
			<th>Content</th>
			<th>Description</th>
			<th>Applicable to which LiveCD(s)</th>
		</tr>
		<tr>
			<ti>/README</ti>
			<ti>The up-to-date README can be found in CVS under
			<i>gentoo/src/catalyst/examples/misc/README.livecd</i>.</ti>
			<ti>universal, minimal</ti>
		</tr>
		<tr>
			<ti>LiveCD motd (resides in the CD's loopback fs)</ti>
			<ti>The up-to-date motd can be found in CVS under
			<i>gentoo/src/catalyst/examples/misc/motd.livecd</i></ti>
			<ti>universal, minimal</ti>
		</tr>
		<tr>
			<ti>/docs/{release-notes,handbook}/{txt,html,pdf}</ti>
			<ti>The <path>docs</path> directory contains directories for
			txt, html, and pdf versions of both the release notes and Gentoo Handbook.</ti>
			<ti>universal, minimal</ti>
		</tr>
		<tr>
			<ti>/distfiles</ti>
			<ti>The <path>distfiles</path> directory contains all distfiles needed to
			install Gentoo Linux from stage1 to stage3 without a network connection.</ti>
			<ti>universal</ti>
		</tr>
		<tr>
			<ti>/snapshots</ti>
			<ti>The <path>snapshots</path> directory contains the Portage snapshot
			that was used to build the LiveCDs, stages, and GRP. </ti>
			<ti>universal</ti>
		</tr>
		<tr>
			<ti>/stages</ti>
			<ti>The <path>stages</path> directory contains a generic stage1 for the
			target architecture and a stage3 for each subarch of the target architecture.</ti>
			<ti>universal</ti>
		</tr>
		</table>

		<p><b>Disc Two</b></p>
		<table>
		<tr>
			<th>Directory</th>
			<th>Contents</th>
		</tr>
		<tr>
			<ti>/$app-category/$package (package tree with top level being the categories)</ti>
			<ti>CD2 contains the entire GRP set. It will be the same layout as
			<path>/usr/portage/packages</path>.</ti>
		</tr>
		</table>

		<p><b>GRP (Gentoo Reference Platform) set</b></p>
		<ul>
			<li>Built by Catalyst</li>
		</ul>

		<p><b>Installation documentation</b></p>
		<ul>
			<li>The Gentoo Handbook is the main form of installation documentation.</li>
			<li>Supplemental documentation may be used, but it is strongly
			recommended that the supplmental documentation ultimately be merged into
			the Handbook. </li>
		</ul>

		<p><b>Release notes</b></p>
		<ul>
			<li>Follow the template laid down by releng</li>
			<li>Included on the LiveCD as well as
			the releng project page under <i>release/${rel_ver}/${arch}/${arch}-release-notes.xml</i>,
			where ${rel_ver} is the version being released and ${arch} is the toplevel arch releasing.</li>
		</ul>
		</body>	
	</section>

	<section>
		<title>Timeline</title>
		<body>
		<p>The release process is continuous in nature, so it does not have a predefined start
		or stop point. When one release stops, the next begins almost immediately. Quarterly
		releases allow thirteen weeks per release. Realistically, there are more
		like twelve since one week is eaten by the turnaround from one release
		to the next. Twelve weeks is a very short period of time in which to function.
		At the very minimum, six of those weeks need to be spent on QA.</p>

		<p>The final release schedule will come from releng about one week after the
		last release. The schedule set forth below is subject to change at releng's discretion.
		The twelve weeks that are allotted are broken up into four different
		release phases; Initial Development, Beta, QA, and Final Release: </p>

		<p><b>Phase One - Initial Development</b></p>
		<p>The Initial Development phase is alloted weeks 1-3 for the research and development of
		new technologies to be integrated into the release. These technologies could be defined as updates to Catalyst, changes
		to LiveCD layout, architecture specific projects (such as a X LiveCD), and
		other strategic initiatives.</p>

		<p>Goals of the Initial Development phase: </p>
		<ul>
			<li>Clear expectations of what is expected in the release - from
			LiveCD layout to naming conventions.</li>
			<li>Release tool updates and bugfixes completed before formal building
			begins.</li>
			<li>Realization of what architectures are releasing.</li>
			<li>Finalization of release specifics so that there are no last minute changes
			made during the release process.</li>
		</ul>

		<p>Arch lead responsibilities:</p>
		<ul>
			<li>Decide whether or not your arch is releasing.</li>
			<li>Decide what is to be included in the next release for your architecture.</li>
			<li>Inform releng of any delays or changes in policy that may be expected.</li>
			<li><b>At least two days before the end of the phase, submit this information
			to the releng Operations Manager.</b></li>
		</ul>

		<p>Releng responsibilities:</p>
		<ul>
			<li>Bugfix and update all release tool bugs.</li>
			<li>Contact each arch lead and discuss release strategy.</li>
			<li><b>At the end of the phase, Submit via the <i>gentoo-releng@gentoo.org</i>
			mailing-list the final release schedule and specifications.</b></li>
		</ul>
		
		<p><b>Phase Two - Beta</b></p>
		<p>The Beta phase is alloted weeks 4-6 of the release process for the initial building of all
		release components. No new features should be added to the release at this point.
		If there was not a decision on a specific feature during Initial Development, then
		that feature should not be included in the current release. Including the feature will
		inevitably delay the release process.</p>

		<p>Goals of the Beta phase:</p>
		<ul>
			<li>By the end of the Beta phase, release components are built and conform to final release specifications.</li>
			<li>The beta release components are on the Gentoo mirrors in the <i>experimental</i> section,
			ready for testing.</li>
		</ul>

		<p>Arch lead responsibilities:</p>
		<ul>
			<li>Build the entire release set (LiveCDs, stages, GRP, and preliminary release notes)</li>
			<li>The release set should posess all the attributes of a final release,
			for example, the LiveCDs should contain docs, READMEs, Release Notes, distfiles, and a snapshot, etc. </li>
			<li>Run through the QA checklist outlined at the end of the document for your
			release set.</li>
			<li><b>At least two days before the end of the Beta phase, 
			contact the releng Operations Manager and upon approval, upload the release
			set to dev.gentoo.org, placing it in the appropriate locations in /space/experimental-local</b>.</li>
		</ul>

		<p>Releng responsibilities:</p>
		<ul>
			<li>Prepare the mirrors for the experimental upload by contacting the Infrastructure Lead.</li>
			<li>Oversee that the release components are being properly built, and that no
			showstopping bugs are left unaddressed.</li>
			<li>Upload initial Release Notes to the releng webspace.</li>
			<li>Prepare the presskit for the Final Release phase.</li>
			<li>Remain available to address concerns.</li>
		</ul>

		<p><b>Phase Three: QA</b></p>
		<p>The QA phase is alloted weeks 7-11 for the express purpose of testing and fixing
		all bugs in the release components. The goal of the QA phase is absolute perfection.
		Since the QA cell takes up the most time of any of the phases, it is expected to
		be the most thorough process of release. New technologies and enhancements mean absolutely
		nothing if there is poor QA.</p>

		<p>Goals of the QA cell:</p>
		<ul>
			<li>The majority of bugs in the release components are addressed.</li>
			<li>The closest to perfection that is humanly achievable.</li>
			<li>At the end of the QA cell, all release components (LiveCDs, stages, and Release Notes)
			are in releng's possession.</li>
		</ul>

		<p>Arch lead responsibilities:</p>
		<ul>
			<li>Bugfixing, bugfixing, bugfixing; testing, testing, testing.</li>
			<li>All bugs fixed.</li>
			<li>Finalization of Release Notes, which are to be mailed to the releng Operations Lead
			before the end of the QA phase.</li>
			<li>Run through the QA checklist once more to ensure that everything is correct and
			functioning as it should.</li>
			<li><b>At the end of the QA phase, upload the full and finalized release
			set to your devspace, then contact the releng Operations Manager so that
			they may start the final QA process.</b></li>
		</ul>

		<p>Releng responsibilties:</p>
		<ul>
			<li>Participate in QA efforts by testing and bugfixing</li>
			<li>Work with the Infrastructure Lead to prepare the mirrors.</li>
			<li>Coordinate the testing efforts.</li>
		</ul>

		<p><b>Phase Four - Final Release</b></p>
		<p>The Final Release phase is alloted weeks 12 and 13 of the release process. At the beginning of the 12th week,
		releng will do the final QA on the release components and upload them to the mirrors for
		propogation. The staging process of the mirrors should start at least five days before the actual
		release date.</p>

		<p>Goals of the Final Release cell:</p>
		<ul>
			<li>All release components are on the mirrors in complete form and ontime.</li>
		</ul>

		<p>Arch lead responsibilities:</p>
		<ul>
			<li>Make any last additions to the release notes and send them
			to the releng Operations Manager.</li>
			<li>Prepare press releases, documentation, etc.</li>
		</ul>

		<p>Releng responsibilities:</p>
		<ul>
			<li>Complete the final QA process by following the QA checklist.</li>
			<li>Stage the mirrors at least five days before release</li>
			<li>After the mirrors are staged, inform Gentoo PR to release the press
			announcements.</li>
			<li>Start planning the next release.</li>
		</ul>

		<p>Release Engineering expects that the arch leads <e>strictly</e> adhere to this timeline.
		The purpose of them is not to be restrictive, but rather helpful in getting a release out
		painlessly and punctually. If any one architecture falls behind in the process, releng will
		not wait for them to catch up. It is the arch lead's responsibility to stay on schedule. </p>
		
		<p>If during the final test phase a release component is not found to be 100% compliant
		with the guidelines set forth, releng will attempt to fix that component. If the component
		cannot be fixed by releng, it will be sent back to the arch lead. If the component is an essential
		part of the release and cannot be fixed by the arch lead, releng reserves the right to
		possibly postpone that arch's release.</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>Release Process</title>
	<section>
		<title>Process Highlights</title>
		<body>
		<p>At the completion of each phase of release, it is the arch lead's responsibility to
		mail the Operational Lead of releng their status. Open communication is a very
		important thing to have during a release process; without it, the entire process
		breaks down and nothing is accomplished. This point cannot be over-emphasized.</p>

		<p>The release process can be illustrated using the following diagram (click for fullsize): </p>
		<fig link="/proj/en/releng/images/release-flow-small.png" linkto="/proj/en/releng/images/release-flow.png"/>
		
		<p>The key highlights of the process involve arch lead to releng communication, and
		management of mirrors. First, the person that the arch leads will be most
		in contact with is the releng Operational Lead. The Operational Lead
		needs to be fully aware of what is going on with each arch. If there
		is a communication breakdown between the Operational Lead and the arch lead,
		chances are that arch will experience delays in the release process. </p>

		<p>Mirror management is vital as users expect timely and quick propogation of
		the release to the mirrors for their downloading pleasure. Upon completion
		of the QA phase, the arch leads will put their arch's release components in
		an easily accesible location, preferably their devspace, so that the releng
		team can do the final QA and propogate the release to the mirrors. 
		Releng will be the only non-infrastructure developers with access to the release
		mirrors. Experimental mirrors differ from this though; arch leads may upload
		and remove their experimental components at their discretion.</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>QA Procedures</title>
	<section>
		<title>QA Checklist</title>
		<body>
		<p>Every release requires strict QA measures. The QA checklist provided below
		is meant to be the <e>minimal</e> set of QA checks that should be done.
		The more QA, the better. </p>

		<table>
			<tr>
				<th>Release Component</th>
				<th>QA Measure</th>
				<th>Description</th>
			</tr>
			<tr>
				<ti>stages</ti>
				<ti>Stage naming conventions</ti>
				<ti>Are the stage tar.bz2's  named in accordance to
				the stage naming convention?</ti>
			</tr>
			<tr>
				<ti>stages</ti>
				<ti>Directory structure</ti>
				<ti>Are all directories like /dev in place?</ti>
			</tr>
			<tr>
				<ti>stages</ti>
				<ti>Stage purity</ti>
				<ti>Are the stages clean of all impure directories,
				such as <path>/root/.cccache</path>, Portage directories,
				and other miscellaneous files and directories?</ti>
			</tr>
			<tr>
				<ti>stages</ti>
				<ti>Regression testing</ti>
				<ti>Can a complete system be built from a stage1,
				stage2, and stage3? Can common packages such as
				<i>vim</i> be emerged without problems?</ti>
			</tr>
			<tr>
				<ti>Bootable LiveCDs</ti>
				<ti>LiveCD naming conventions</ti>
				<ti>Are the LiveCD iso's in accordance to
				the LiveCD naming conventions?</ti>
			</tr>
			<tr>
				<ti>Bootable LiveCDs</ti>
				<ti>Directory structure</ti>
				<ti>Are all of the required directories, such
				as /docs, /snapshots, and /stages where they 
				are suppossed to be and populated with what
				they are suppossed to contain?</ti>
			</tr>
			<tr>
				<ti>Bootable LiveCDs</ti>
				<ti>Documentation Check</ti>
				<ti>Is the most recent copy of the handbook in
				<path>/docs/handbook</path> in HTML, txt, and PDF form?
				Are the README and motd in place?</ti>
			</tr>
			<tr>
				<ti>Bootable LiveCDs</ti>
				<ti>Bootsplash Graphics</ti>
				<ti>Are the correct bootsplash graphics
				in place and functioning properly?</ti>
			</tr>
			<tr>
				<ti>Bootable LiveCDs</ti>
				<ti>Regression testing</ti>
				<ti>Do the LiveCDs boot on a wide array of hardware?</ti>
			</tr>
			<tr>
				<ti>GRP LiveCD</ti>
				<ti>GRP LiveCD naming convention</ti>
				<ti>Is the GRP LiveCD .iso named in accordance
				to the LiveCD naming convention?</ti>
			</tr>
			<tr>
				<ti>GRP LiveCD</ti>
				<ti>Directory Structure</ti>
				<ti>Is the directory structure in accordance with
				the LiveCD directory structure policy? Is GRP
				the only thing on this LiveCD?</ti>
			</tr>
			<tr>
				<ti>GRP LiveCD</ti>
				<ti>Content check</ti>
				<ti>Is the GRP set in accordance with releng's
				GRP policy?</ti>
			</tr>
			<tr>
				<ti>Release Notes</ti>
				<ti>Naming convention</ti>
				<ti>Are the release notes named in accordance
				with the release notes naming convention?</ti>
			</tr>
			<tr>
				<ti>Release Notes</ti>
				<ti>Layout</ti>
				<ti>Do the release notes follow the template provided
				by releng?</ti>
			</tr>
			<tr>
				<ti>Release Notes</ti>
				<ti>Spelling and Grammar check</ti>
				<ti>Do the releaes notes have proper grammar
				and spelling?</ti>
			</tr>
			<tr>
				<ti>Release Notes</ti>
				<ti>Location check</ti>
				<ti>Are the release notes on the releng website
				at least a week before the final release date?</ti>
			</tr>
		</table>	
		</body>
	</section>
</chapter>

</guide>
