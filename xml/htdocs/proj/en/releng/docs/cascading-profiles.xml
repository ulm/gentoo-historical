<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/releng/docs/cascading-profiles.xml,v 1.8 2006/07/07 06:07:12 dberkholz Exp $ -->
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">


<guide link="/proj/en/releng/docs/cascading-profiles.xml">
<title>Gentoo Linux Cascading/Stackable Profiles</title>

<author title="Author">
	<mail link="seemant@gentoo.org">Seemant Kulleen</mail>
</author>

<author title="Editor">
	<mail link="dberkholz@gentoo.org">Donnie Berkholz</mail>
</author>
<author title="Editor">
	<mail link="wolf31o2@gentoo.org">Chris Gianelloni</mail>
</author>

<abstract>
	This guide covers the philosophy of cascading system profiles and how to
	implement them.
</abstract>

<license/>

<version>DRAFT</version>
<date>2004-11-08</date>

<chapter>
	<title>Introduction</title>
	<section>
		<title>Main Goals</title>
		<body>
		<p>Historically, one of the nice things about Gentoo has been the
		lack of bloat.  <mail link="danarmak@gentoo.org">Dan Armak</mail>'s
		<uri
		link="/proj/en/devrel/handbook/handbook.xml?part=2&amp;chap=2">eclasses</uri>
		are a perfect example of shared code being put into a separate file
		that can be read by all who need it.  In a similar vein, the
		<path>${PORTDIR}/profiles</path> directory hierarchy in Gentoo has
		been the victim of much bloating up lately.  Cascading Profiles 
		(also known as stackable profiles) take a similar "object-oriented"
		approach to the Gentoo system profiles.</p>
		<warn>In order to use cascading profiles, you need to upgrade portage
		to at least 2.0.51 before you switch the profile link.</warn>
		</body>
	</section>

	<section>
		<title>Release Overview</title>
		<body>
		<p>So what do we gain from cascading the profiles? A cursory glance
		at each profile (take the 2004.3 profiles for each of x86, ppc,
		sparc and sparc64 as an example) reveals that there are a LOT of
		commonalities. The most obvious example is the virtuals file.  Up
		until now, every time a new virtual was introduced, the virtuals 
		files in <b>each profile directory</b> had to be edited to add that
		virtual to the profile.  Also, for a basic Gentoo (GNU/Linux)
		system, there is a common set of packages that describes it.  Why
		repeat this information for each profile we have (and each new
		profile that comes along)?  Introduce cascading profiles.</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>Dissecting the Stack</title>
	<section>
		<title>The Base Profile</title>
		<body>
		<p>
		<mail link="pebenito@gentoo.org">Chris PeBenito</mail> made the
		first jump into cascading profile by distilling out the basic set of
		packages that any *nix based system will require.
		<path>${PORTDIR}/profiles/base</path> contains this description of a
		basic system.  Every Gentoo profile thus far has had each of the
		packages outlined in the <path>packages</path> file in that
		directory.  Additionally, each profile has the same virtuals as
		defined in the <path>virtuals</path> file there.  Finally, those
		<uri
		link="/doc/en/handbook/handbook-x86.xml?part=2&amp;chap=2">USE</uri>
		flags which are fairly architecture independent are described in
		the <path>use.defaults</path> file -- these USE flags are common to
		all the architectures thus far.  Looking at the
		<path>packages</path> file, you might wonder where <uri
		link="http://packages.gentoo.org/packages/?category=sys-apps;name=util-linux">util-linux</uri>
		package went.  Well, seeing as there are efforts to expand Gentoo into
		the worlds of <uri
		link="http://www.gnu.org/software/hurd/">GNU/Hurd</uri>, <uri
		link="http://www.openbsd.org/">OpenBSD</uri> and so on, the thinking
		was that the base profile should be applicable to those as well.
		Admittedly, <uri
		link="http://packages.gentoo.org/packages/?category=sus-apps;name=coreutils">coreutils</uri>
		seems a little GNU specific, but one step at a time.</p>
		<p>Hopefully, once you read the files in the base directory, you
		will agree that for the most part, it describes an implementation
		agnostic <b>minimal</b> *nix system.</p>
		</body>
	</section>
	<section>
		<title>The Default (Linux/GNU) Profile</title>
		<body>
		<p>This profile describes in relatively high-level terms the
		so-called <b>default-linux</b> profile.  Historically, every new
		architecture supported by Gentoo has had a <b>default</b> profile,
		and this is a high level replacement of that.  Between the
		<b>base</b> profile and the <b>default-linux</b> profile, we should
		have a fairly complete description of a minimal GNU/Linux
		system.  This is done by adding to (or removing from) the aggregate
		packages list, virtuals mappings and further defining the USE flag
		mappings (additional USE flags may be introduced or masked out).</p>
		</body>
	</section>
	<section>
		<title>The Architecture Specific Profiles</title>
		<body>
		<p>These profiles extend the <b>default-linux</b> aggregate profile
		by adding to the packages list (or removing from it), and also by
		redefining specific virtuals mappings and USE flags.  Additionally,
		USE flags may be further masked here.
		</p>
		</body>
	</section>
	<section>
		<title>The Sub-Architecture Profiles</title>
		<body>
		<p>This specificity is completely optional.  In the current
		implementation, the <b>sparc</b> profile is further refined into a
		family of profiles for 32-bit SPARC architectures and 64-bit SPARC
		architectures, since the SPARC family has a lot of consistency and
		similarity.  Additionally the MIPS sub-architectures will define
		sub-architecture profiles.  These profiles essentially delineate,
		again in fairly high-level terms, the differences between the
		sub-architectures.  As an example, <uri
		link="http://packages.gentoo.org/packages/?category=sys-devel;name=gcc-sparc64">gcc-sparc64</uri> is required on the
		SPARC64 profiles, but <b>not</b> permitted on the SPARC32 profiles,
		yet they both use the same <uri
		link="http://packages.gentoo.org/packages/?category=sys-boot;name=silo">bootloader</uri>.
		Thus, the bootloader would be in the parent (architecture specific)
		profile, and the gcc-sparc64 package would be defined in the
		sparc64 sub-architecture profile.</p>
		</body>
	</section>
	<section>
		<title>The Specific Profile</title>
		<body>
		<p>This is it: the nuts and bolts of the final profile being
		defined.  This profile is used primarily to lock down specific
		versions (though the higher level profiles are also free to do so)
		of packages and define exactly what, for example, the
		<b>sparc64-2004.0</b> profile is all about and how it differs from
		the <b>sparc64-1.4</b> and <b>sparc64-gcc33</b> profiles, or how the
		<path>x86/2004.0</path> profile differs from the
		<path>x86/gcc2</path> profile.</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>Profile Classes</title>
	<section>
		<title>Introduction</title>
		<body>
		<p>Historically, every new architecture that Gentoo supports gets a
		<path>default-${arch}-${version}</path> directory in
		<path>${PORTDIR}/profiles</path>.  Invariably, they have been linux
		(with GNU userland) based profiles.  The future, however, is open.
		So with cascading profiles, we can define different classes of
		profiles that extend the base profile.  The first class, which all
		the current architectures will fall into, will be
		<path>default-linux</path>.  The other profile classes,
		incidentally, are <path>selinux</path> and <path>hardened</path>.
		This document focuses exclusively on the <path>default-linux</path>
		profile class, because the other two are very specialised classes
		handled by <uri link="/proj/en/hardened/">the Hardened team</uri>.
		</p>
		</body>
	</section>

	<section>
		<title>The Default (Linux) Profile</title>
		<body>
		<p>Now, the <path>default-linux</path> directory itself contains
		the files <path>parent</path>, <path>packages</path>,
		<path>use.default</path>, <path>use.mask</path>, and
		<path>virtuals</path>, along with directories which we'll cover in
		the next section.</p>

		<p>Let us begin with the <path>parent</path> file.  This file
		points to the profile whose attributes we are inheriting.  It
		contains a relative path to that profile.  So, in this case, it
		would contain: <path>../base</path>.</p>

		<p>The <path>packages</path> file simply extends the
		<b>base</b> profile's <path>packages</path> file.  It does this
		in three ways:</p>
		<table>
			<tr>
				<th>Profile Extending Method</th>
				<th>Implementation Details</th>
			</tr>
			<tr>
				<ti>Adding</ti>
				<ti><p>Any package that appears in the
				<path>default-linux/packages</path> file but is not in
				the <path>base/packages</path> file is added to the
				aggregate packages list.  In order to make it part of
				<c>emerge system</c> the name of the package needs to
				be prefixed with an asterisk thus:
				<c>*category/package</c>.</p></ti>
			</tr>
			<tr>
				<ti>Removing</ti>
				<ti><p>While this should be a <b>rare</b> occurrence, a
				package that appears in the <path>base</path> packages
				list may be removed from the <path>default-linux</path>
				aggregate packages list by prefixing it with a
				minus sign, thus: <c>-*category/package</c> for package
				that had been announced in the preceding levels as
				<c>*category/package</c>.</p></ti>
			</tr>
			<tr>
				<ti>Over-riding</ti>
				<ti><p>This is specifically handy in defining minimum or
				maximum allowed versions of a package already specified
				in the base packages list. Any of the symbols for
				greater than, greater than or equal to, less than, less
				than or equal to, =, and ~ may be used as a prefix.
				Note that since the base packages list <b>only</b>
				defines absolute required packages (all the items are
				prefixed with an asterisk), they need not be
				asterisk-prefixed here.</p></ti>
			</tr>
		</table>

		<p>The <path>use.default</path> file acts similarly.  You can use
		this file to add further USE flag mappings for this profile class,
		or override the USE flag mappings described in the parent
		profile.</p>

		<p>The <path>use.mask</path> file is used to invalidate certain USE
		flags in this profile class.  For example, the <uri
		link="/doc/en/handbook/handbook-x86.xml?part=2&amp;chap=2">selinux
		USE flag</uri> is valid <b>only</b> in the <path>hardened</path>
		and <path>selinux</path> profile classes, but will wreak havoc on
		the <path>default-linux</path> profile class.  So, it is masked
		here.</p>

		<p>Finally, the <path>virtuals</path> file extends the parent's
		<path>virtuals</path> file.  You can again use it to add further
		virtuals mappings that would be valid in <b>only</b> this profile,
		or override the parent's mappings.</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>The Architecture Profiles</title>
	<section>
		<title>Introduction</title>
		<body>
		<p>With the architecture profiles, we are one step closer to
		completing the cascading profile.  This is the level where new
		architectures will be added.  So to recap, we have the
		<path>base</path> profile and the <path>default-linux</path> profile
		defining a basic minimal and architecture independent system.  For
		most architectures, this level of the cascade (or stack, if you
		prefer) defines some specifics.  For instance, the
		virtual/bootloader mapping can be defined at this level, since each
		architecture class uses a different default bootlader from the
		others.  Additionally, there may architecture specific things that
		are required as part of the base system, such as: <uri
		link="http://packages.gentoo.org/packages/?category=sys-apps;name=sparc-utils">sparc-utils</uri>
		for SPARC.  Some architectures prefer to mask out the architecture
		USE flags for the other architectures.  For example. the sparc
		profile puts <c>x86</c>, <c>ppc</c>, <c>alpha</c> and <c>mips</c>
		into the use.mask at this level.</p>
		</body>
	</section>
	<section>
		<title>Sub-Architecture Profiles</title>
		<body>
		<p>This is an optional level in the cascade.  The premise here is
		that if a family of architectures (for example, SPARC and MIPS)
		have basically the same requirements for a basic system with only a
		few differences (be they packages, virtuals or USE flags), those
		are expressed here.
		</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>The Final Profile</title>
	<section>
		<title>Change in Thinking</title>
		<body>
		<p>Part of the reason for the ballooning of profiles has been the
		addition of a profile for every new LiveCD release.  When switching
		over your old profiles to the new cascading system, please analyse
		closely the real differences between your architecture's different
		profiles.  In the case of moving the x86 profiles, we found that
		1.4 and 2004.0 were identical.  So, in the new system, they have
		been merged into the cascaded 2004.0 profile.</p>

		<p>Together, the releng and dev-portage teams determined that the
		ideal solution is to only create a new profile <b>when absolutely
		necessary</b>.  The necessity is left up to the team leads and
		architecture releng people, but a good rule of thumb is that when
		there are major changes (for instance the gcc2 to gcc3 switch), a
		new profile is warranted.  Additionally, it might be good to create
		an experimental profile to test out higher toolchain versions, and
		then later either deprecate the experimental profile, or migrate
		the changes over to the stable profile, leaving the experimental
		profile to move onward.  Certainly, a discussion on this philosophy
		should be carried out, so what is written here has not been etched
		in stone.</p>

		<p>The final profile will contain one additional file indicating
		that it is, indeed, the leaf of the cascading tree.  This file is
		the <path>make.defaults</path> file.  Again, as above, the
		<path>parent</path> file will point to the parent directory.  And,
		of course, the <path>packages</path>, <path>use.defaults</path>,
		<path>use.mask</path> and <path>virtuals</path> files can be
		overridden and extended.  Ideally, here is where specific versions
		of things can be locked down (or at the subarchitecture level, if
		there is one).   Use this to concretely define your profile.</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>Conclusions</title>
	<section>
	<body>
	<p>Admittedly, there's a bit of tedium involved in migrating your
	existing profile to the cascaded scheme, but the payoff at the end is
	invaluable.  For instance, new virtuals need no longer be added to
	every single <path>virtuals</path> file in every single profile
	directory.  Once they're added just once at the <path>base</path> or
	<path>default-linux</path> level, everyone can enjoy the utility of
	it.  If there are any questions, please direct them to Seemant, ZHeN
	or any member of the releng team.</p>
	</body>
	</section>
</chapter>
</guide>
