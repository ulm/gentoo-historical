<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/releng/docs/release_guidelines.xml,v 1.14 2005/12/12 22:59:49 wolf31o2 Exp $ -->
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">


<guide link="/proj/en/releng/docs/release_guidelines.xml">
<title>Gentoo Linux Release Guidelines</title>

<author title="Author">
	<mail link="zhen@gentoo.org">John Davis</mail>
</author>

<author title="Editor">
	<mail link="wolf31o2@gentoo.org">Chris Gianelloni</mail>
</author>

<abstract>
	This guide covers both the QA and release guidelines for the Gentoo
	Linux biannual release system.
</abstract>

<license/>

<version>1.3</version>
<date>2005-12-12</date>

<chapter>
	<title>Introduction</title>
	<section>
		<title>Main Goals</title>
		<body>
			<p>
			A Gentoo Linux release should strive to be two things -- high
			quality and low-stress. The guidelines set forth in this document
			are an attempt to promote both while keeping within a deadline.
			</p>
		</body>
	</section>

	<section>
		<title>Release Overview</title>
		<body>
			<p>
			For the Architecture Release Coordinators, the release process is
			binary; there is the off-time which is spent in development and QA,
			and there is the final release process which is spent doing final
			release QA. During the entire process, Release Engineering and the
			architecture release coordinators will work closely together on
			every aspect of the release. A critical aspect of the release
			process is communication. If there are questions or comments
			regarding any part of the release process, the Architecture Release
			Coordinators should contact the Release Operations Manager, whose
			current e-mail is always found on the
			<uri link="http://www.gentoo.org/proj/en/releng">
			Release Engineering project page</uri>. Specific information on
			the release can always be found on the release information page,
			which is at
			<e>http://www.gentoo.org/proj/en/releng/release/${relver}/releng/${relver}.xml</e>,
			where <c>${relver}</c> is the release version (e.g. 2005.1).
			</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>Development/QA Phase</title>
	<section>
		<title>Development/QA Phase Process</title>
		<body>
			<p>Architecture Release Coordinators will spend most of their time
			in this phase since the final release phase takes up only a small
			percentage of the time spent on a release. The time difference is
			not an indication that the final release process is less important
			than the development/QA phase, but rather an understanding that
			most of the QA for the release will have been done in the
			development/QA phase. The final release phase has its own QA
			requirements that will be covered later in this guide.
			</p>

			<p>
			The entire development/QA phase should be spent fixing and closing
			bugs, tackling the Feature Request List for the upcoming release,
			and constantly ensuring that the release conforms to the QA
			guidelines set forth by Release Engineering. It is strongly
			recommended that the Architecture Release Coordinator set a
			scheduled build cycle so that bugs and QA can be timely addressed
			throughout the entire process. For example, weekly or bi-weekly
			builds give the Architecture Release Coordinator a "heads up" on
			what is going on with their release.
			</p>

			<p>
			During this phase, Release Engineering is available at all times
			for any and everything. If there are questions or concerns,
			hardware or resource requests, or anything else, please contact
			the Release Operations Manager.
			</p>
		</body>
	</section>

	<section>
		<title>Development/QA Phase QA Guidelines</title>
		<body>
			<p>
			The following QA guidelines should be worked towards constantly
			during this phase of the release. Doing so will ensure that the
			architecture to be released will in fact be released on-time and
			complete. Release Engineering reserves the right to block the
			release of any architecture that does not conform to these QA
			guidelines. This ensures a consistent face for the distribution to
			our user base.
			</p>

			<table>
				<tr>
					<th>Guideline</th>
					<th>Description</th>
				</tr>
				<tr>
					<ti>Is the architecture on the release list?</ti>
					<ti>Contact the Release Operations Manager if it is not.
					The release list will be posted by the Operations
					Manager at the beginning of the release process. It is
					also available on the release information page for the
					specified release.</ti>
				</tr>
				<tr>
					<ti>Have the features designated in the release Feature
					Roadmap applicable to the architecture been completed?</ti>
					<ti>All features that are relevant to the architecture must
					be completed for the release. Contact the Operations
					Manager if there are extenuating circumstances which will
					prevent these features from being completed.</ti>
				</tr>
				<tr>
					<ti>Are the applicable core packages listed on the release
					information page being used?</ti>
					<ti>If applicable to the arch, certain core packages are to
					be utilized to maintain consistency.</ti>
				</tr>
				<tr>
					<ti>Is the installation documentation up-to-date?</ti>
					<ti>The Architecture Release Coordinator should be in
					contact with the Release Engineering Documentation Liaison
					at all times to ensure that the documentation released is
					in sync with the release itself.</ti>
				</tr>
				<tr>
					<ti>Are all critical bugs from the last release fixed for
					the coming release?</ti>
					<ti>Scour bugzilla for bugs from the last release. Fix as
					many as possible. The goal is perfection.  Bugs will be
					assigned to the <c>release@gentoo.org</c> alias.  Bugs for
					a release should not be changed into a RESOLVED state until
					a release has been made available with the bug fix.</ti>
				</tr>
				<tr>
					<ti>Regression Testing</ti>
					<ti>Do the CD images and stages compile and run as expected
					on each of your supported subarchitectures? Refer to the
					<uri link="#doc_chap5_sect2">regression testing HOWTO
					section</uri> for instructions on how to properly run a
					Gentoo regression test.</ti>
				</tr>
				<tr>
					<ti>Does the Gentoo Documentation Project (GDP) have all of
					the necessary information required for the release
					documentation?</ti>
					<ti>The GDP requires a listing of all bootable kernels on
					each bootable CD, a listing of all supported boot options
					on each bootable CD, the output of <c>find</c> on a mounted
					CD from each category (both bootable CDs and Packages CDs),
					and the output of <c>find</c> on a booted Universal/Minimal
					InstallCD. The information can be sent to the Release
					Engineering GDP Liaison, who is listed on the
					<uri link="http://www.gentoo.org/proj/en/releng">
					Release Engineering Project Page</uri>, or to the Release
					Operations Manager.</ti>
				</tr>
				<tr>
					<ti>Are the InstallCD and PackageCD specfile templates
					followed?</ti>
					<ti>The <uri link="#doc_chap5_sect4">templates</uri> for
					the bootable InstallCDs and non-bootable PackageCDs specify
					an essential core group of packages that maintain
					compatibility and consistency across all architectures. It
					is essential that the core group of packages specified is
					used.</ti>
				</tr>
			</table>
		</body>
	</section>
	</chapter>

<chapter>
	<title>The Transition from Development/QA to Final Release</title>
	<section>
		<title>The Transition Process</title>
		<body>
			<p>
			The transition from the development/QA phase to the final release
			phase is not one that can be wholly defined by a date. The
			transition takes place when the QA guidelines for the
			development/QA phase have been met in full. At that time, the
			architecture to be released is ready to move into the final release
			phase.
			</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>The Final Release Phase</title>
	<section>
		<title>Final Release Process</title>
		<body>
			<p>
			The final release phase of the release process is the polish on
			everything that has been done up to this point. The ultimate goal
			of this phase is to have high-quality release components on the
			master mirror at least five days before the release date so that
			the release components have adequate time to be staged, or
			propagated, onto the other mirrors.
			</p>
		
			<p>
			The final QA checklist consists of the following:
			</p>
			<table>
				<tr>
					<th>Guideline</th>
					<th>Description</th>
				</tr>
				<tr>
					<ti>Are the requirements of the development/QA phase QA
					checklist completed?</ti>
					<ti>Are all of the requirements specified in the
					development/QA Phase QA Checklist completed, as specified,
					and in form?</ti>
				</tr>
				<tr>
					<ti>Are all of the components necessary for a release
					present?</ti>
					<ti>Please refer to the <uri link="#doc_chap5_sect1">
					list</uri> of components necessary for a release.</ti>
				</tr>
				<tr>
					<ti>Layout</ti>
					<ti>Do the InstallCD, Package CD, and stages all conform to
					the <uri link="#doc_chap5_sect3">naming and layout
					conventions</uri> set forth by Release Engineering?</ti>
				</tr>
				<tr>
					<ti>Are the release notes in forms available both
					online and on the InstallCD?</ti>
					<ti>Make sure that the release notes are present in the
					locations specified by the <uri link="#doc_chap5_sect3">
					layout</uri> convention.</ti>
				</tr>
			</table>

			<p>
			When the Architecture Release Coordinator feels that their release
			components meet or exceed all of the QA guidelines, they will then
			upload them to the Release Engineering staging machine and inform
			Release Engineering so that the final approval process can begin.
			The final approval from Release Engineering will consist of a
			rundown of the final QA checklist and a check of each release
			component's md5sums. Assuming the release components pass the final
			approval from Release Engineering, they will be signed by Release
			Engineering's GPG key, and placed into the proper staging are on
			the Release Engineering staging machine for turnover to the Release
			Infrastructure Liason for propgation to the master mirror.
			</p>

			<p>
			Only when the release components meet both the QA of the
			development/QA phase and the final QA will they be uploaded to the
			mirrors to be released. If any of the components are out of order,
			Release Engineering will work with the Arch	Release Coordinator to
			fix the offending component. To have an on-time release, it is
			imperative that the Architecture Release Coordinator ensures that
			all QA is met before Release Engineering approval. Release
			Engineering approval should be the last check that the release
			components receive, not the first.
			</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>Resources</title>
	<section>
		<title>Necessary Components for a Release</title>
		<body>
			<p>
			The following components are necessary for an official release:
			</p>

			<table>
				<tr>
					<th>Component</th>
					<th>Description</th>
				</tr>
				<tr>
					<ti>Bootable InstallCDs</ti>
					<ti>This includes both the Universal and Minimal InstallCD
					images that users can use to boot a wide variety of
					hardware for the end goal of installing Gentoo Linux. There
					are two flavors of the bootable InstallCD, the Universal
					and the Minimal. A Universal InstallCD contains a stage1
					and set of stage3s for all supported subarches as well as
					the distfiles required to install from a stage3 without a
					network connection. A Minimal InstallCD only contains the
					necessary items needed to boot a system. Please refer to
					the <uri link="#doc_chap5_sect3">layout</uri>
					specifications and the Catalyst specfile
					<uri link="#doc_chap5_sect4">template</uri>	for the
					required layout and core packages of both CDs.  Both images
					are required for an official release.</ti>
				</tr>
				<tr>
					<ti>Packages CD</ti>
					<ti>A non-bootable CD that contains a Gentoo Reference
					Platform (GRP) set used for off-network installation. A
					user should not need an Internet connection to install when
					using this disc. Please refer to the
					<uri link="#doc_chap5_sect3">layout</uri> specifications
					for PackageCD layout, and the Catalyst specfile
					<uri link="#doc_chap5_sect4">template</uri> for a list
					of required packages.</ti>
				</tr>
				<tr>
					<ti>Bootable LiveCD</ti>
					<ti>A bootable LiveCD image with the Gentoo Linux Installer
					may be substituted for the requirement for a Universal
					InstallCD and a PackageCD.  This is the only case in which
					a Universal InstallCD and PackageCD may be missing from a
					given architectures release and it to still be considered
					complete and official.</ti>
				</tr>
				<tr>
					<ti>Installation Stages</ti>
					<ti>Stage 1, 2, and 3 tarballs that can be used to install
					Gentoo Linux.</ti>
				</tr>
				<tr>
					<ti>Release Notes</ti>
					<ti>Notes that follow the template specified by Release
					Engineering that detail important aspects about the
					release.</ti>
				</tr>
			</table>
		</body>
	</section>
	
	<section>
		<title>Regression Testing HOWTO</title>
		<body>
			<p>
			Regression testing is a key aspect of QA. The regression testing
			process is done by running a comprehensive set of tests that
			emulate real-world scenarios. Regression testing is not necessarily
			hard, but it is time consuming. A good portion of the release
			process should be spent regression testing as it is the most
			beneficial way to identify bugs and errata.
			</p>

			<p>
			The regression testing procedure is quite straight forward. For
			each InstallCD/LiveCD, follow the installation instructions
			verbatim. Once that is complete, try a complete GRP installation
			using the Installation Handbook. Once that is complete, restart the
			process using a different subarchitecture or GRP set. The goal is
			to run through the Installation Handbook as many different times as
			possible. The more randomness that is introduced to packages,
			methods, and subarches, the more chances that bugs will be
			identified before the final release.
			</p>
		</body>
	</section>

	<section>
		<title>Naming Conventions and InstallCD/LiveCD/PackageCDs Layout</title>
		<body>
			<p>
			InstallCD/LiveCDs/PackageCDs and stages are to adhere to the
			following naming conventions, where <c>${arch}</c> is the main
			architecture, <c>${subarch}</c> is the subarchitecture,
			<c>${reltype}</c> is a special type identifier, and
			<c>${relver}</c> is the release version number.
			</p>

			<table>
				<tr>
					<th>Component Name</th>
					<th>Naming Convention</th>
					<th>Example</th>
				</tr>
				<tr>
					<ti>Universal Bootable InstallCD</ti>
					<ti>install-${arch}-universal-${relver}.iso</ti>
					<ti>install-x86-universal-2005.1.iso</ti>
				</tr>
				<tr>
					<ti>Minimal Bootable InstallCD</ti>
					<ti>install-${arch}-minimal-${relver}.iso</ti>
					<ti>install-alpha-minimal-2005.1.iso</ti>
				</tr>
				<tr>
					<ti>Bootable LiveCD</ti>
					<ti>livecd-${arch}-${relver}.iso</ti>
					<ti>livecd-x86-2005.1.iso</ti>
				</tr>
				<tr>
					<ti>Packages CD</ti>
					<ti>packages-${subarch}-${relver}.iso</ti>
					<ti>packages-pentium4-2005.1.iso</ti>
				</tr>
				<tr>
					<ti>Installation Stages</ti>
					<ti>stage{1,2,3}-${subarch}-${relver}.tar.bz2</ti>
					<ti>stage3-ppc-2005.1.tar.bz2</ti>
				</tr>
				<tr>
					<ti>Installation Stages that are a different release type,
					such as hardened stages or selinux stages.</ti>
					<ti>stage{1,2,3}-${subarch}-${reltype}-${relver}.tar.bz2</ti>
					<ti>stage2-athlon-xp-selinux-2004.0.tar.bz2</ti>
				</tr>
				<tr>
					<ti>Release Notes</ti>
					<ti>${arch}-release-notes.xml</ti>
					<ti>sparc-release-notes.xml, placed in CVS at
					gentoo/xml/htdocs/proj/en/releng/release/${relver}/${arch}
					The current template and autogeneration tool can be found in
					CVS at gentoo/src/relnotes.</ti>
				</tr>
			</table>

			<p>
			<b>The Universal bootable InstallCD is to adhere to the following
			layout standard:</b>
			</p>

			<table>
				<tr>
					<th>Directory</th>
					<th>Description</th>
				</tr>
				<tr>
					<ti>/distfiles</ti>
					<ti>Directory where all of the necessary distfiles are
					stored to install from a stage3 tarball with no network
					connection.</ti>
				</tr>
				<tr>
					<ti>/docs</ti>
					<ti>Directory where the release notes and the Handbook
					reside. The Handbook has its own directory structure,
					<path>/docs/handbook/{html,pdf,txt}</path>, with each
					subdirectory being for a respective format of the Handbook.
					The final versions of both the release notes and the
					Handbook will be linked off of the release information
					page.</ti>
				</tr>
				<tr>
					<ti>/boot (/isolinux on x86/amd64)</ti>
					<ti>Autogenerated directory for the bootloader.</ti>
				</tr>
				<tr>
					<ti>/snapshots</ti>
					<ti>Directory containing the snapshot used to build the
					release components.</ti>
				</tr>
				<tr>
					<ti>/stages</ti>
					<ti>Directory containing a generic stage1 and stage3
					tarballs for each supported subarch.</ti>
				</tr>
				<tr>
					<ti>/zisofs (optional)</ti>
					<ti>Autogenerated directory for the zisofs runtime. Only
					applicable to architectures	that use the zisofs compression
					scheme. Using zisofs should only be considered if squashfs
					is unavailable for the architecture due to technical
					problems, such as kernel panics.</ti>
				</tr>
			</table>

			<p>
			<b>The Minimal bootable InstallCD is to adhere to the following
			layout standard:</b>
			</p>

			<table>
				<tr>
					<th>Directory</th>
					<th>Description</th>
				</tr>
				<tr>
					<ti>/boot (/isolinux on x86/amd64)</ti>
					<ti>Autogenerated directory for the bootloader.</ti>
				</tr>
				<tr>
					<ti>/zisofs (optional)</ti>
					<ti>Autogenerated directory for the zisofs runtime. Only
					applicable to architectures that use the zisofs compression
					scheme. Using zisofs should only be considered if squashfs
					is unavailable for the architecture due to technical
					problems, such as kernel panics.</ti>
				</tr>
			</table>

			<p>
			Both InstallCDs may use a wide variety of kernels to ensure user
			compabibility. The kernels will	be named
			<c>gentoo-${kver}-${special_opt}</c>, where <c>${kver}</c> is the
			main version of the kernel, such as 2.6, and <c>${special_opt}</c>
			is an optional special identifier, such as nofb. An example of a
			kernel name with a special identifier would be
			<c>gentoo-2.6-nofb</c>.
			</p>
		
			<p>
			Both of the bootable InstallCDs will contain a standard <c>motd</c>
			in the booted FS on the CD.	The motd will be the first thing that a
			user sees after they get a prompt their CD environment,	and it will
			contain important information. This file is generated by catalyst.
			</p>

			<p>
			<b>The PackageCD is to adhere to the following layout standard:</b>
			</p>

			<table>
				<tr>
					<th>Directory</th>
					<th>Description</th>
				</tr>
				<tr>
					<ti>/${app-category}/${package}</ti>
					<ti>The PackageCD will be laid out in the same fashion as
					<path>/usr/portage/packages</path>.</ti>
				</tr>
			</table>

			<p>
			The command for creating the PackageCD ISO file is:
			</p>

			<pre caption="Package CD">
# <i>cd grp-${subarch}-${relver}/cd2</i>
# <i>mkisofs -R -J -l -V "${subarch} Packages" -o ../packages-${subarch}-${relver}.iso .</i>
			</pre>
		</body>
	</section>
	
	<section>
		<title>LiveCD and PackageCD template Catalyst Specfiles</title>
		<body>

			<p>
			Catalyst livecd-stage1 specfile
			<uri link="livecd-stage1_template.spec.txt">template</uri> for both
			the Universal and Minimal bootable InstallCDs.
			</p>
			<p>
			Catalyst livecd-stage2 specfile
			<uri link="livecd-stage2_template.spec.txt">template</uri> for both
			the Universal and Minimal bootable InstallCDs.
			</p>
			<p>
			Catalyst specfile <uri link="packagecd_template.spec.txt">template
			</uri> for the PackageCD.
			</p>
		</body>
	</section>
</chapter>

</guide>
