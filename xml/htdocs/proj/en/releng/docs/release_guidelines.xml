<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/releng/docs/release_guidelines.xml,v 1.7 2004/03/17 15:58:29 zhen Exp $ -->
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">


<guide link="/proj/en/releng/docs/release_guidelines.xml">
<title>Gentoo Linux Release Guidelines</title>

<author title="Author">
  <mail link="zhen@gentoo.org">John Davis</mail>
</author>

<abstract>
	This guide covers both the QA and release guidelines for the Gentoo
	Linux quarterly release system.
</abstract>

<license/>

<version>DRAFT</version>
<date>16 March 2004</date>

<chapter>
	<title>Introduction</title>
	<section>
		<title>Main Goals</title>
		<body>
		<p>A Gentoo Linux release should strive to be two things, high
		quality and low-stress. The guidelines set forth in this document
		are an attempt to promote both while keeping within a deadline.</p>
		</body>
	</section>

	<section>
		<title>Release Overview</title>
		<body>
		<p>For the Arch Release Coordinators, the release process is binary;
		there is the off-time which is spent in development and QA, and
		there is the final release process which is spent doing final release
		QA. During the entire process, releng and the arch release coordinators
		will work closely together on every aspect of the release.
		A critical aspect of the release process is communication. If there
		are questions or comments regarding any part of the release process,
		the Arch Release Coordinators should contact the Release Operations
		Manager, whose current e-mail is always found on the
		<uri link="http://www.gentoo.org/proj/en/releng">releng project page</uri>.
		Specific information on the release can always be found on the release information
		page, which is at <e>http://www.gentoo.org/proj/en/releng/release/${relver}/releng/${relver}.xml</e>,
		where <i>${relver}</i> is the release version (e.g. 2004.1).</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>Development/ QA Phase</title>
	<section>
		<title>Development/ QA Phase Process</title>
		<body>
		<p>Arch Release Coordinators will spend most of their time in this
		phase since the final release phase takes up only a small percentage
		of the time spent on a release. The time difference is not
		an indication that the final release process is less important
		than the development/ QA phase, but rather an understanding
		that most of the QA for the release will have been done in the
		development/ QA phase. The final release phase has its own
		QA requirements that will be covered later in this guide. </p>

		<p>The entire development/ QA phase should be spent fixing and
		closing bugs, tackling the Feature Request List for the upcoming
		release, and constantly ensuring that the release conforms
		to the QA guidelines set forth by releng. It is strongly recommended
		that the Arch Release Coordinator set a scheduled build cycle
		so that bugs and QA can be timely addressed throughout the entire
		process. For example, weekly or bi-weekly builds give the 
		Arch Release Coordinator a "heads up" on what is going on with
		their release. </p>

		<p>During this phase, releng is available at all times for any and
		everything. If there are questions or concerns, hardware or resource
		requests, or anything else, please contact the Release Operations Manager.
		</p>
		</body>
	</section>

	<section>
		<title>Development/ QA Phase QA Guidelines</title>
		<body>
		<p>The following QA guidelines should be worked towards constantly
		during this phase of the release. Doing so will ensure that the
		architecture to be released will in fact be released on-time and
		complete. Releng reserves the right to block the release of any arch
		that does not conform to these QA guidelines. </p>

		<table>
			<tr>
				<th>Guideline</th>
				<th>Description</th>
			</tr>
			<tr>
				<ti>Is the arch on the release list?</ti>
				<ti>Contact the releng Release Operations Manager
				if it is not. The release list will be posted by the Operations
				Manager at the beginning of the release process.</ti>
			</tr>
			<tr>
				<ti>Have the features designated in the release Feature Request
				list applicable to the arch been completed?</ti>
				<ti>All features that are relevant to the arch must be completed
				for the release. Contact the Operations Manager if there are extenuating
				circumstances.</ti>
			</tr>
			<tr>
				<ti>Are the core applicable core packages listed on the release
				information page being used?</ti>
				<ti>If applicable to the arch, certain core packages are to be
				used across all arches. </ti>
			</tr>
			<tr>
				<ti>Is the installation documentation up-to-date?</ti>
				<ti>The Arch Release Coordinator should be in contact with the
				releng documentation liaison at all times to ensure that
				the documentation released is in sync with the release itself.</ti>
			</tr>
			<tr>
				<ti>Are all critical bugs from the last release fixed for
				the coming release?</ti>
				<ti>Scour bugzilla for bugs from the last release. Fix as
				many as possible. The goal is perfection.</ti>
			</tr>
			<tr>
				<ti>Regression Testing</ti>
				<ti>Do the LiveCDs and stages compile and run as expected
				on each of your supported subarches? Refer to the
				<uri link="#doc_chap5_sect2">regression testing HOWTO section</uri>
				for instructions on how to properly run a Gentoo regression test.</ti>
			</tr>
			<tr>
				<ti>Does the Gentoo Documentation Project (GDP) have all of
				the necessary information required for the release documentation?</ti>
				<ti>The GDP requires a listing of all bootable kernels on each
				bootable LiveCD, a listing of all supported boot options on each bootable LiveCD,
				the output of <c>find</c> on a mounted CD from each category
				(both bootable LiveCDs and a Packages CD), and the output of <c>find</c>
				on a booted universal/ minimal LiveCD. The information can be sent
				to the releng GDP liaison, who is listed on the 
				<uri link="http://www.gentoo.org/proj/en/releng">releng Project Page</uri>.</ti>
			</tr>
			<tr>
				<ti>Are the LiveCD and PackageCD specfile templates followed?</ti>
				<ti>The <uri link="#doc_chap5_sect4">templates</uri> for the bootable LiveCDs
				and non-bootable PackageCDs specify an essential core group of packages
				that maintain compatibility and consistency across all architectures. It
				is essential that the core group of packages specified is used.</ti>
			</tr>
		</table>
		</body>
	</section>
	</chapter>

<chapter>
	<title>The Transition from Development/ QA to Final Release</title>
	<section>
		<title>The Transition Process</title>
		<body>
		<p>The transition from the development/ QA phase to the final release
		phase is not one that can be defined by a date. The transition takes place
		when the QA guidelines for the development/ QA phase have been met
		in full. At that time, the architecture to be released is ready to 
		move into the final release phase. </p>
		</body>
	</section>
</chapter>

<chapter>
	<title>The Final Release Phase</title>
	<section>
		<title>Final Release Process</title>
		<body>
		<p>The final release phase of the release process is the polish on
		everything that has been done up to this point.
		The ultimate goal of this phase is to have high-quality release components
		on the master mirror at least five days before the release date so that the
		release components have adequate time to be staged, or propagated, on to the other mirrors. </p>
		
		<p>The final QA checklist consists of the following: </p>
		<table>
			<tr>
				<th>Guideline</th>
				<th>Description</th>
			</tr>
			<tr>
				<ti>Are the requirements of the development/ QA phase QA
				checklist completed?</ti>
				<ti>Are all of the requirements specified in the development/ QA Phase
				QA Checklist complete and in form?</ti>
			</tr>
			<tr>
				<ti>Are all of the components necessary for a
				release present?</ti>
				<ti>Please refer to the <uri link="#doc_chap5_sect1">list</uri>
				of components necessary for a release.</ti>
			</tr>
			<tr>
				<ti>Layout</ti>
				<ti>Do the LiveCD, Package CD, and stages all conform to
				the <uri link="#doc_chap5_sect3">naming and layout
				conventions</uri> set forth by releng?</ti>
			</tr>
			<tr>
				<ti>Are the release notes in forms available both
				Online and on the LiveCD?</ti>
				<ti>Make sure that the release notes are present in the locations
				specified by the <uri link="#doc_chap5_sect3">layout</uri>
				convention.</ti>
			</tr>
		</table>

		<p>When the Arch Release Coordinator feels that their release components
		meet or exceed all of the QA guidelines, they will then upload them to
		their Gentoo devspace on <i>dev.gentoo.org</i> and inform releng so that the final approval process
		can begin. The final approval from releng will consist of a rundown of the
		final QA checklist and a check of each release component's md5sums.
		Assuming the release components pass the final approval from releng,
		they will be uploaded by releng to the master mirror for propagation. </p>

		<p>Only when the release components meet the both the QA of the development/ QA
		phase and the final QA will they be uploaded to the mirrors to be released.
		If any of the components are out of order, releng will work with the Arch
		Release Coordinator to fix the offending component. To have an on-time release,
		it is imperative that the Arch Release Coordinator ensures that all QA is met
		before releng approval. Releng approval should be the last check that the release components
		receive, not the first. </p>
		</body>
	</section>
</chapter>

<chapter>
	<title>Resources</title>
	<section>
		<title>Necessary Components for a Release</title>
		<body>
		<p>The following components are necessary for an official release: </p>

		<table>
			<tr>
				<th>Component</th>
				<th>Description</th>
			</tr>
			<tr>
				<ti>Bootable LiveCDs</ti>
				<ti>Bootable LiveCDs (universal and minimal LiveCDs) that users can
				use to boot a wide
				variety of hardware for the end goal of installing Gentoo Linux.
				There are two flavors of the bootable LiveCD, universal and minimal.
				A universal LiveCD contains a stage1 and set of stage3s for all supported subarches
				as well as the distfiles required to install from a stage3 with no
				network connection. A minimal install LiveCD only contains the necessary
				items needed to boot a system. Please refer to the <uri link="#doc_chap5_sect3">layout</uri>
				specifications and the Catalyst specfile <uri link="#doc_chap5_sect4">template</uri>
				for the required layout and core packages of both LiveCDs.</ti>
			</tr>
			<tr>
				<ti>Packages CD</ti>
				<ti>A non-bootable CD that contains a Gentoo Reference Platform (GRP)
				set used for off-network installation. A user should not need
				an Internet connection to install when using this disc. Please refer
				to the <uri link="#doc_chap5_sect3">layout</uri> specifications for PackageCD layout,
				and the Catalyst specfile <uri link="#doc_chap5_sect4">template</uri> for a list
				of required packages.</ti>
			</tr>
			<tr>
				<ti>Installation Stages</ti>
				<ti>Stage 1, 2, and 3 tarballs that can be used to install Gentoo Linux.</ti>
			</tr>
			<tr>
				<ti>Release Notes</ti>
				<ti>Notes that follow the template specified by releng that detail
				important aspects about the release.</ti>
			</tr>
		</table>
		
		</body>
	</section>
	
	<section>
		<title>Regression Testing HOWTO</title>
		<body>
		<p>Regression testing is a key aspect of QA. The regression testing process
		is done by running a comprehensive set of tests that emulate
		real-world scenarios. Regression testing is not necessarily hard, but it
		is time consuming. A good portion of the release process should be spent
		regression testing as it is the most beneficial way to identify bugs and errata. </p>

		<p>The regression testing procedure is quite straight forward. For each LiveCD,
		follow the installation instructions verbatim. Once that is complete, try
		a complete GRP installation using the Installation Handbook. 
		Once that is complete, restart the process using
		a different subarch or GRP set. The goal is to run through the 
		Installation Handbook as many different times as possible. The more
		randomness that is introduced to packages, methods, and subarches, the more
		chances that bugs will be identified before the final release. </p>
		
		</body>
	</section>

	<section>
		<title>Naming Conventions and LiveCD/ Package CD Layout</title>
		<body>
		
		<p>LiveCDs and stages are to adhere to the following naming conventions,
		where <i>${arch}</i> is the main architecture, <i>${subarch}</i> is the subarch,
		and <i>${relver}</i> is the release version number. </p>
		
		<table>
			<tr>
				<th>Component Name</th>
				<th>Naming Convention</th>
				<th>Example</th>
			</tr>
			<tr>
				<ti>Universal Bootable LiveCD</ti>
				<ti>install-${arch}-universal-${relver}.iso</ti>
				<ti>install-x86-universal-2004.0.iso</ti>
			</tr>
			<tr>
				<ti>Minimal Bootable LiveCD</ti>
				<ti>install-${arch}-minimal-${relver}.iso</ti>
				<ti>install-alpha-minimal-2004.0.iso</ti>
			</tr>
			<tr>
				<ti>Packages CD</ti>
				<ti>packages-${subarch}-${relver}.iso</ti>
				<ti>packages-athlon-xp-2004.0.iso</ti>
			</tr>
			<tr>
				<ti>Installation Stages</ti>
				<ti>stage{1,2,3}-${subarch}-${relver}.tar.bz2</ti>
				<ti>stage3-ppc-2004.0.tar.bz2</ti>
			</tr>
			<tr>
				<ti>Release Notes</ti>
				<ti>${arch}-release-notes.xml</ti>
				<ti>sparc-release-notes.xml, placed in CVS at
				gentoo/xml/htdocs/proj/en/releng/release/${relver}/${arch}
				The current template and autogeneration tool can be found in
				CVS at gentoo/src/relnotes.</ti>
			</tr>
		</table>

		<p><b>The universal bootable LiveCD is to adhere to the following layout standard:</b></p>

		<table>
			<tr>
				<th>Directory</th>
				<th>Description</th>
			</tr>
			<tr>
				<ti>/distfiles</ti>
				<ti>Directory where all of the necessary distfiles are stored to
				install from a stage3 installation tarball with no network connection.</ti>
			</tr>
			<tr>
				<ti>/docs</ti>
				<ti>Directory where the README
				and the Handbook reside. The Handbook has its own directory
				structure, <path>/docs/handbook/{html,pdf,txt}</path>, with each subdirectory being
				for a respective format of the Handbook. The final versions of both the README and the Handbook will
				be linked off of the releng release information page.</ti>
			</tr>
			<tr>
				<ti>/isolinux</ti>
				<ti>Autogenerated directory for the isolinux runtime.</ti>
			</tr>
			<tr>
				<ti>/snapshots</ti>
				<ti>Directory containing the snapshot used to build the release components. </ti>
			</tr>
			<tr>
				<ti>/stages</ti>
				<ti>Directory containing a generic stage1 and stage3s for each supported subarch.</ti>
			</tr>
			<tr>
				<ti>/zisofs</ti>
				<ti>Autogenerated directory for the zisofs runtime.</ti>
			</tr>
		</table>
	
		<p><b>The minimal bootable LiveCD is to adhere to the following layout standard:</b></p>

		<table>
			<tr>
				<th>Directory</th>
				<th>Description</th>
			</tr>
			<tr>
				<ti>/docs</ti>
				<ti>Directory where the README
				and the Handbook reside. The Handbook has its own directory
				structure, <path>/docs/handbook/{html,pdf,txt}</path>, with each subdirectory being
				for a respective format of the Handbook. The final versions of both the README and the Handbook will
				be linked off of the releng release information page.</ti>
			</tr>
			<tr>
				<ti>/isolinux</ti>
				<ti>Autogenerated directory for the isolinux runtime.</ti>
			</tr>
			<tr>
				<ti>/zisofs</ti>
				<ti>Autogenerated directory for the zisofs runtime.</ti>
			</tr>
		</table>

		<p>Both of the bootable LiveCDs will contain a standard <i>motd</i> in the booted FS on the LiveCD.
		The motd will be the first thing that a user sees after they login to their LiveCD environment,
		and it will contain important information. The <i>motd</i> will be linked off of the release
		information page. </p>
	
		<p><b>The package CD is to adhere to the following layout standard:</b></p>

		<table>
			<tr>
				<th>Directory</th>
				<th>Description</th>
			</tr>
			<tr>
				<ti>/${app-category}/${package}</ti>
				<ti>The packageCD will be laid out in the same fashion as
				<path>/usr/portage/packages</path>, minus the <i>All</i> directory.</ti>
			</tr>
		</table>
		
		</body>
	</section>
	
	<section>
		<title>LiveCD and PackageCD template Catalyst Specfiles</title>
		<body>

		<p>Catalyst specfile <uri link="livecd_template.spec.txt">template</uri> for both the regular
		and minimal bootable LiveCDs.</p>
		<p>Catalyst specfile <uri link="packagecd_template.spec.txt">template</uri> for the PackageCD.</p>

		</body>
	</section>

</chapter>

</guide>
