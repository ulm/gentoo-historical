<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/php/Attic/php4-php5-configuration.xml,v 1.3 2007/07/11 20:53:28 anant Exp $ -->

<guide link="php4-php5-configuration.xml" lang="en">
<title>Configure Apache to work with PHP4 and PHP5</title>

<author title="Author">
 <mail link="akorthaus@web.de">Andreas Korthaus</mail>
</author>

<abstract>
This document describes how to set up a mixed PHP4 / PHP5 enviroment using
Apache webserver
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.1</version>
<date>2006-01-21</date>

<chapter>
<title>Introduction</title>
<section>
<body>

<p>
There are many ways to make Apache work with two PHP versions in parallel. The
easiest way is to use PHP4 and PHP5 as a CGI binary, or PHP4 as CGI binary
and PHP5 as Apache module (or the other way around). In this Howto Apache-2.x
paths are used, but it will work with Apache-1.x paths as well (generally, just
omit the <c>2</c>).
</p>

<p>
For instructions how to upgrade your old <path>dev-php/php</path> to the new
<path>dev-lang/php</path> packages, have a look at the <uri
link="php-upgrading.xml">Upgrade Guide</uri>.
</p>

<impo>
Don't use <uri link="#doc_chap2">PHP4 and PHP5 cgi</uri> or
<uri link="#doc_chap3">PHP4 CGI and PHP5 module</uri> in a multi-user /
shared-hosting environment! You should use CGI with suPHP there, which makes it
possible to use PHP4 and PHP5 together too (see <uri link="#doc_chap4">PHP4 CGI
and PHP5 CGI using suPHP</uri> for details)! 
</impo>

<warn>
It's not possible to run PHP4 and PHP5 module together in one Apache server,
because both export the same symbols!
</warn>

</body>
</section>
</chapter>

<chapter>
<title>Alternative 1: PHP4 CGI and PHP5 CGI</title>
<section>
<title>Install PHP4 and PHP5</title>
<body>

<p>
Add <c>cgi</c> and <c>force-cgi-redirect</c> USE flag to 
<path>/etc/portage/package.use</path>:
</p>

<pre caption="/etc/portage/package.use">
=dev-lang/php-4* cgi force-cgi-redirect
=dev-lang/php-5* cgi force-cgi-redirect
</pre>

<note>
Putting <c>force-cgi-redirect</c> into your USE flags is recommended for
security.
</note>

<p>
Emerge PHP4 and PHP5:
</p>

<pre caption="emerge PHP">
<i>emerge '=dev-lang/php-4*' '=dev-lang/php-5*'</i>
</pre>

</body>
</section>

<section>
<title>Global/Default Configuration for PHP4 CGI</title>
<body>

<p>
Requests to files ending with <c>.php</c>, <c>.php3</c>, <c>.php4</c>  or
<c>.phtml</c> should be handled by PHP4 CGI (this can be easily changed).
Create a <path>/etc/apache2/modules.d/php4-cgi.conf</path>, which will be
included by <path>httpd.conf</path> automatically:
</p>

<pre caption="/etc/apache2/modules.d/php4-cgi.conf">
# handler for PHP 4 scripts
&lt;IfDefine PHP4CGI&gt;
    ScriptAlias /php4-cgi /usr/lib/php4/bin/php-cgi	
    Action php4-cgi /php4-cgi
    AddHandler php4-cgi .php4 .php3 .php .phtml
&lt;/IfDefine&gt;
</pre>

</body>
</section>

<section>
<title>Global/Default Configuration for PHP5 CGI</title>
<body>

<p>
Requests to files ending with <c>.php5</c> should be handled by PHP5 CGI (this
can be easily changed). Create a
<path>/etc/apache2/modules.d/php5-cgi.conf</path>, which will be included
by <path>httpd.conf</path> automatically:
</p>

<pre caption="/etc/apache2/modules.d/php5-cgi.conf">
# handler for PHP 5 scripts
&lt;IfDefine PHP5CGI&gt;
    ScriptAlias /php5-cgi /usr/lib/php5/bin/php-cgi	
    Action php5-cgi /php5-cgi
    AddHandler php5-cgi .php5
&lt;/IfDefine&gt;
</pre>

</body>
</section>

<section>
<title>Per Directory/VHost Configuration of PHP version</title>
<body>

<p>
You can use a <c>&lt;VirtualHost&gt;</c>,  <c>&lt;Location&gt;</c>,
<c>&lt;Directory&gt;</c> directive or even a <path>.htaccess</path> file  to
configure handling of scripts ending with <c>.php</c> to use either PHP4 CGI or
PHP5 CGI, depending on where the script is located. Use the <c>AddHandler</c>
directive to select the PHP versions to handle the requests:
</p>

<pre caption="example for &lt;Location&gt; in Apache configuration">
&lt;VirtualHost *:80&gt;

    DocumentRoot  /var/www/example.com/htdocs
    ServerName www.example.com

    &lt;Location /php4&gt;
    	AddHandler php4-cgi .php
    &lt;/Location&gt;

    &lt;Location /php5&gt;
    	AddHandler php5-cgi .php
    &lt;/Location&gt;

&lt;/VirtualHost&gt;
</pre>

<pre caption="alternative Apache configuration using &lt;Directory&gt;">
&lt;VirtualHost *:80&gt;

    DocumentRoot /var/www/example.com/htdocs
    ServerName www.example.com

    &lt;Directory /var/www/example.com/htdocs/php4&gt;
    	AddHandler php4-cgi .php
    &lt;/Directory&gt;

    &lt;Directory /var/www/example.com/htdocs/php5&gt;
    	AddHandler php5-cgi .php
    &lt;/Directory&gt;

&lt;/VirtualHost&gt;
</pre>

<p>
This way you can configure Apache which PHP handler to use for every location
or directory!
</p>

<note>
Make sure that you have configured a default handling for PHP4 CGI  and PHP5
CGI as described in the previous section.
</note>

</body>
</section>

<section>
<title>set APACHE2_OPTS</title>
<body>

<p>
By using the <c>APACHE2_OPTS</c> variable in <path>/etc/conf.d/apache2</path>
you can easily configure Apache to handle PHP4 and PHP5 as CGIs now:
</p>


<pre caption="/etc/conf.d/apache2">
APACHE2_OPTS="-D PHP4CGI -D PHP5CGI"
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Alternative 2: PHP4 CGI and PHP5 Apache module</title>
<section>
<body>

<note>
PHP4 Apache module and PHP5 CGI works as well, you only need to change the
configuration accordingly.
</note>

</body>
</section>

<section>
<title>Install PHP4 and PHP5</title>
<body>

<p>
Add <c>cgi</c> and <c>force-cgi-redirect</c> USE flag for PHP4 and
<c>apache2</c> for PHP5 to <path>/etc/portage/package.use</path>:
</p>

<pre caption="etc/portage/package.use">
=dev-lang/php-4* cgi force-cgi-redirect
=dev-lang/php-5* apache2
</pre>

<note>
Putting <c>force-cgi-redirect</c> into your USE flags is recommended for
security.
</note>

<p>
Emerge PHP4 and PHP5:
</p>

<pre caption="emerge PHP">
<i>emerge '=dev-lang/php-4*' '=dev-lang/php-5*'</i>
</pre>

</body>
</section>

<section>
<title>Global/Default Configuration for PHP4 CGI</title>
<body>

<p>
Requests to files ending with <c>.php3</c>, <c>.php4</c> or <c>.phtml</c>
should be handled by PHP4 CGI (this can be easily changed). Create a
<path>/etc/apache2/modules.d/php4-cgi.conf</path>, which will be included
by <path>httpd.conf</path> automatically:
</p>

<pre caption="/etc/apache2/modules.d/php4-cgi.conf">
# handler for PHP 4 scripts
&lt;IfDefine PHP4CGI&gt;
    ScriptAlias /php4-cgi /usr/lib/php4/bin/php-cgi	
    Action php4-cgi /php4-cgi
    AddHandler php4-cgi .php4 .php3 .php .phtml
&lt;/IfDefine&gt;
</pre>

</body>
</section>

<section>
<title>Global/Default Configuration for PHP5 module</title>
<body>

<p>
If the PHP ebuild installs an Apache module, it will also automatically install
a configuration file to <path>/etc/apache2/modules.d/70_mod_php5.conf</path>.
</p>

<p>
Requests to files ending with <c>.php5</c>, as well as files ending with
<c>.phps</c> (PHP source files), will be handled by the PHP5 Apache module
(this can be easily changed).
</p>

<p>
To achieve this, you need to edit the default configuration file and make it
look like this: 
</p>

<pre caption="/etc/apache2/modules.d/70_mod_php5.conf">
&lt;IfDefine PHP5&gt;

    # Load the module first 
    &lt;IfModule !sapi_apache2.c&gt;
        LoadModule php5_module    modules/libphp5.so 
    &lt;/IfModule&gt;

    # Set it to handle the files 
    &lt;IfModule mod_mime.c&gt;
        AddType application/x-httpd-php .php5 
        AddType application/x-httpd-php-source .phps 
    &lt;/IfModule&gt;

    AddDirectoryIndex index.php index.phtml 
&lt;/IfDefine&gt;
</pre>

</body>
</section>

<section>
<title>Per Directory/VHost Configuration of PHP version</title>
<body>

<p>
You can use a <c>&lt;VirtualHost&gt;</c>,  <c>&lt;Location&gt;</c>,
<c>&lt;Directory&gt;</c> directive or even a <path>.htaccess</path> file  to
configure handling of scripts ending with <c>.php</c> to use either PHP4 CGI or
PHP5 module, depending on where the script is located. Use the 
<c>AddHandler</c> directive to select the PHP versions to handle the requests:
</p>

<pre caption="example for &lt;Location&gt; in Apache configuration">
&lt;VirtualHost *:80&gt;

    DocumentRoot  /var/www/example.com/htdocs
    ServerName www.example.com

    &lt;Location /php4&gt;
    	AddHandler php4-cgi .php
    &lt;/Location&gt;

    &lt;Location /php5&gt;
    	AddHandler application/x-httpd-php .php
    &lt;/Location&gt;

&lt;/VirtualHost&gt;
</pre>

<pre caption="alternative Apache configuration using &lt;Directory&gt;">
&lt;VirtualHost *:80&gt;

    DocumentRoot /var/www/example.com/htdocs
    ServerName www.example.com

    &lt;Directory /var/www/example.com/htdocs/php4&gt;
    	AddHandler php4-cgi .php
    &lt;/Directory&gt;

    &lt;Directory /var/www/example.com/htdocs/php5&gt;
    	AddHandler application/x-httpd-php .php
    &lt;/Directory&gt;

&lt;/VirtualHost&gt;
</pre>

<p>
This way you can configure Apache which PHP handler to use for every location
or directory!
</p>

<note>
Make sure that you have configured a default handling for PHP4 CGI as
described in the previous section.
</note>

</body>
</section>

<section>
<title>set APACHE2_OPTS</title>
<body>

<p>
By using the <c>APACHE2_OPTS</c> variable in <path>/etc/conf.d/apache2</path>
you can easily configure Apache to handle PHP4 as CGI and PHP5 as module now
(or the other way around):
</p>

<pre caption="/etc/conf.d/apache2">
APACHE2_OPTS="-D PHP4CGI -D PHP5"
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Alternative 3: PHP4 and PHP5 CGI with suPHP</title>
<section>
<title>Install PHP4 and PHP5</title>
<body>

<p>
Add <c>cgi</c> and <c>force-cgi-redirect</c> USE flag to 
<path>/etc/portage/package.use</path>:
</p>

<pre caption="/etc/portage/package.use">
=dev-lang/php-4* cgi force-cgi-redirect
=dev-lang/php-5* cgi force-cgi-redirect
</pre>

<p>
Emerge PHP4 and PHP5:
</p>

<pre caption="emerge PHP">
<i>emerge '=dev-lang/php-4*' '=dev-lang/php-5*'</i>
</pre>

<note>
Putting <c>force-cgi-redirect</c> into your USE flags is recommended for
security.
</note>

</body>
</section>

<section>
<title>Install mod_suphp</title>
<body>

<pre caption="emerge mod_suphp">
<i>emerge mod_suphp</i>
</pre>

<p>
A few notes on it's USE flags:
</p> 

<table>
  <tr>
    <th>USE flag</th>
    <th>description</th>
  </tr>
  <tr>
    <ti>checkpath</ti>
    <ti>checks if script resides in DOCUMENT_ROOT</ti>
  </tr>
  <tr>
    <ti>mode-force</ti>
    <ti>runs scripts with UID/GID specified in Apache configuration 
    (i.e., apache:apache)</ti>
  </tr>
  <tr>
    <ti>mode-owner</ti>
    <ti>runs scripts with owner UID/GID</ti>
  </tr>
  <tr>
    <ti>mode-paranoid</ti>
    <ti>runs scripts with owner UID/GID but also checks if they match the
    UID/GID specified in the Apache configuration</ti>
  </tr>
</table>

<note>
If you don't choose any of the mode flags, the ebuild defaults to paranoid
(which won't probably suit your needs). 
</note>

</body>
</section>

<section>
<title>Global/Default Configuration for PHP</title>
<body>

<p>
By using the <c>APACHE2_OPTS</c> variable in <path>/etc/conf.d/apache2</path>
you can easily configure Apache to handle PHP4 and PHP5 through suPHP now:
</p>

<pre caption="/etc/conf.d/apache2">
APACHE2_OPTS="-D SUPHP"
</pre>

</body>
</section>

<section>
<title>Change PHP handler to handle requests to .php scripts</title>
<body>

<p>
By default, requests to files ending with <c>.php</c>, <c>.php5</c>, or
<c>.phtml</c> will be handled by PHP5 CGI and files ending with <c>.php4</c>
by PHP4 CGI. This can be easily changed in <path>/etc/suphp.conf</path>:
</p>

<pre caption="/etc/suphp.conf">
[handlers]
;Handler for php-scripts
x-httpd-php=php:/usr/lib/php4/bin/php-cgi
x-httpd-php5=php:/usr/lib/php5/bin/php-cgi
x-httpd-php4=php:/usr/lib/php4/bin/php-cgi
x-httpd-phtml=php:/usr/lib/php4/bin/php-cgi
</pre>

<p>
The above example reverses the default <c>mod_suphp</c> handlers to use PHP4 by
default, only files ending with <c>.php5</c> will now be handled by PHP5 CGI.
</p>

</body>
</section>
</chapter>

<chapter>
<title>More Alternatives</title>
<section>
<body>

<p>
In this guide we have focussed on the easiest alternatives to get PHP4 and PHP5
running in parallel. As mentioned before there are more alternatives. We will
list some of them in this chapter, and point you to other sites where you can
get more detailed information.
</p>

</body>
</section>

<section>
<title>Running PHP4 and PHP5 module using 2 Apache instances</title>
<body>

<p>
If you have one Apache installed, you can run two instances of it. You only
need to create a second configuration file (<path>httpd.conf</path>) with
different settings (e.g. load PHP5 module, not PHP4 module...). But you cannot
bind 2 Apache instances to the same port-IP combination, so you have to use a
different IP or port in the 2nd configuration file. At Apache startup you can
use the <c>-f</c> switch to set the config file to use, which can be easily
implemented by copying and changing the original RC script shipped with the
Apache ebuild.
</p>

<p>
The basic steps to make it work on Gentoo:
</p>

<ul>
  <li>add <c>apache2</c> USE flag to <c>dev-lang/php</c> entry in
  <path>/etc/portage/package.use</path> to install Apache2 modules</li>
  <li>install PHP4 and PHP5: <c>emerge  '=dev-lang/php-4*'
  '=dev-lang/php-5*'</c></li>
  <li>create a copy of <path>/etc/apache2/httpd.conf</path> for the 2nd Apache
  instance</li>
  <li>change port or IP the 2nd Apache instance will bind to</li>
  <li>load other PHP module</li>
  <li>make sure to use unique files (like <c>LockFile</c>...)</li>
  <li>copy <path>/etc/init.d/apache2</path></li>
  <li>change the copied script to load new (copied and altered) 
  <path>httpd.conf</path> for 2nd Apache instance</li>
</ul>

<p>
Further information:
</p>

<ul>
  <li><uri 
link="http://www.schlitt.info/applications/blog/archives/83_How_to_run_PHP4_and_PHP_5_prallel.html">
How to run PHP4 and PHP 5 prallel</uri> (Tobias Schlitt)</li>
</ul>

</body>
</section>

<section>
<title>Hiding the 2nd Apache instance using mod_proxy</title>
<body>

<p>Basically it works the same as explained above, but solved the problem with
using different IPs / ports: By using <c>mod_proxy</c>, you can use the reverse
proxy functions to hide the 2nd Apache instance from users, by passing
requests transparently to the 2nd Apache instance.</p>

<p>
The basic steps to make it work on Gentoo:
</p>

<ul>
  <li>same as in previous chapter</li>
  <li>enable <c>mod_proxy</c> in primary webserver (usually listening to
  default IP, port 80/443)</li>
  <li>use the <c>ProxyPass</c> directive or the <c>[P]</c> flag to the
  <c>RewriteRule</c> directive to forward requests which need the other PHP
  module
  </li>
</ul>

<p>
Further information:
</p>

<ul>
  <li><uri 
  link="http://ez.no/community/articles/multiple_apache_installations_howto">
  Multiple Apache Installations HOWTO</uri> (Derick Rethans)</li>
  <li><uri link="http://wiki.coggeshall.org/37.html">Running PHP 4 and PHP 5
  Concurrently</uri> (John Coggeshall)</li>
  <li><uri link="http://httpd.apache.org/docs/2.0/mod/mod_proxy.html">Apache
  Module mod_proxy</uri> (Apache docs)</li>
  <li><uri 
  link="http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html#rewriterule">
  RewriteRule Directive</uri> (Apache docs)</li>
</ul>

</body>
</section>

<section>
<title>Using FastCGI</title>
<body>

<p>
FastCGI is another alternative, which is as fast as or faster than a PHP module 
and does not suffer from threading issues (like PHP module if used with a
threaded Apache MPM like "worker"), because it's not embedded in the webserver
process.
</p>

<p>
The basic steps to make it work on Gentoo:
</p>

<ul>
  <li>add  <c>cgi</c> and <c>force-cgi-redirect</c> USE flag to
  <c>dev-lang/php</c> entry in <path>/etc/portage/package.use</path> to install
  CGI version of PHP (includes FastCGI support)</li>
  <li>install PHP4 and PHP5: <c>emerge  '=dev-lang/php-4*'
  '=dev-lang/php-5*'</c></li>
  <li>follow instructions in howtos below</li>
</ul>

<p>
Further information:
</p>

<ul>
  <li><uri link="http://www.fastcgi.com/mod_fastcgi/docs/mod_fastcgi.html">
  mod_fastcgi</uri> (FastCGI module for Apache)</li>
  <li><uri link="http://fastcgi.coremail.cn/">mod_fcgid</uri> (alternative
  FastCGI module for Apache)</li>
  <li><uri 
  link="http://www.t17.ds.pwr.wroc.pl/~misiek/index.php/ApacheModFastcgiPHP">
  Apache Mod Fastcgi PHP</uri> (alternative to CGI/SuPHP)</li>
  <li><uri link="http://www.lighttpd.net/documentation/fastcgi.html">lighttpd
  FastCGI module</uri> (lightweight webserver with easy to configure FastCGI
  support)</li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Restart Apache</title>
<section>
<body>

<p>
After the installation and configuration please don't forget to restart your
Apache to load the new configuration:
</p>

<pre caption="restart Apache">
<i>/etc/init.d/apache2 restart</i>
</pre>

</body>
</section>
</chapter>

</guide>
