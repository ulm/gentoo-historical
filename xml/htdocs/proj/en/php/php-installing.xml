<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/php/php-installing.xml,v 1.3 2011/12/02 18:10:52 antarus Exp $ -->

<guide link="php-install.xml" lang="en">
<title>Installing PHP</title>

<author title="Author">
 <mail link="olemarkus@gentoo.org">Ole Markus With</mail>
 </author>

<abstract>
This document will guide you through installing PHP on Gentoo
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.1</version>
<date>2011-02-13</date>

<chapter>
<title>Installing PHP FPM </title>
<section>
<body>
<impo>This is only available for PHP 5.3.3 and newer. The PHP herds consider FPM as the recommended setup for PHP</impo>
<p>
In PHP 5.3.3, PHP is shipped with support for the FPM SAPI. The FPM SAPI is an 
improved fcgi SAPI that allows for more advanced configuration than the
original fcgi SAPI. One of the most useful features is process management, which 
makes it very useful for lightweight webservers, such as <c>www-servers/nginx</c>, 
that does not handle process management of fcgi themselves. 
</p>
</body>
</section>
<section>
<title>Installing PHP</title>
<body>

<p>Make sure the fpm USE flag is enabled</p>

<pre caption="/etc/package.use">
dev-lang/php fpm
</pre> 



</body>
</section>

<section>
<title>Setting up FPM with lighttpd</title>

<body>
<warn>Interestingly enough, you do NOT want the <c>php</c> USE flag
for <c>www-servers/lighttpd</c>. It could actually break the build.</warn>

<p>Make sure that lighttpd is build with support for fastcgi and that the php USE flag is disabled</p>


<pre caption="/etc/package.use">
www-servers/lighttpd fastcgi -php
</pre>

<p>
Lighttpd ships with a default FastCGI config file, but unfortunately, it is
written to work with the old PHP FCGI SAPI only, instead of a general
FCGI setup. Since we disabled the php USE flag, it wonâ€™t be included, and rightly so. 
However it does provide a good foundation for a configuration file that can be used with FPM.</p>

<p>Edit <path>/etc/lighttpd/mod_fastcgi.conf</path> so that it looks something like this:
</p>

<pre caption="/etc/lighttpd/mod_fastcgi.conf">
server.modules += ("mod_fastcgi")
fastcgi.server = ( ".php" =>
  ( "localhost" =>
    (
      "host" => "127.0.0.1",
      "port" => "9000"
    )
  )
)
</pre>

<p>Note the <c>host</c> and <c>port</c> parts.</p>

<p>Since Gentoo ships with a perfectly working copy of a <c>php-fpm.ini</c> file, 
located in <path>/etc/php/fpm-php5/php-fpm.ini</path>, and init-script, 
all you need to do now is to start the services:</p>

<pre caption="Starting PHP">
<i>/etc/init.d/php-fpm start</i>
<i>/etc/init.d/lighttpd start</i>
</pre>



</body>
</section>

<section>
<title>Nginx</title>
<body>

<p>
To install Nginx is as easy as emerging it:
</p>

<pre caption="Installing nginx">
<i>emerge -av nginx</i>
</pre>

<warn>
If you have configured a custom <c>NGINX_MODULES_HTTP</c>, make sure that the <c>fastcgi</c> module is enabled.
</warn>

<p>
Once Nginx has been installed, modify the server section of <path>/etc/nginx/nginx.conf</path> to look something
like this:
</p>

<pre caption="/etc/nginx/nginx.conf">
&lt;snip>
        server {
                listen 127.0.0.1;
                server_name localhost;
 
                access_log /var/log/nginx/localhost.access_log main;
                error_log /var/log/nginx/localhost.error_log info;
 
                root /var/www/localhost/htdocs;
 
                location ~ .php$ {
                        fastcgi_pass 127.0.0.1:9000;
                        include fastcgi.conf;
                }
        }
&lt;snip>
</pre>

<p>Now just start the related services and you should have a working site</p>

<pre caption="Starting nginx and php-fpm">
<i>/etc/init.d/nginx start</i>
<i>/etc/init.d/php-fpm start</i>
</pre>
</body>

</section>

</chapter>

<chapter>
<title>Apache and mod_php</title>
<section>
<body>

<p>Apache is the trusted server part of the LAMP stack. Using mod_php, setting up PHP with Apache is rather trivial. The PHP Herd recommends that if you want to use PHP with Apache, you should use mod_php over any FastCGI/FPM setup. If you want FPM, we recommend that you use nginx as server.</p>

<p>Installing mod_php is as easy as enabling the apache2 USE flag for dev-lang/php</p>


<pre caption="/etc/package.use">
dev-lang/php apache2
</pre>

<p>This will also pull in www-servers/apache. After the install finish, make sure you add "-D PHP5" to <path>/etc/conf.d/apache2</path></p>

<pre caption="/etc/conf.d/apache2">
<var>APACHE2_OPTS="-D DEFAULT_VHOST -D INFO -D LANGUAGE -D SSL -D SSL_DEFAULT_VHOST -D USERDIR -D PHP5"</var>
</pre>

<warn>If you do not complete this step, your php source code will be outputted instead of interpreted</warn>

</body>
</section>
</chapter>


<chapter>
<title>Nice to know</title>
<section>
<title>Development vs Production php.ini files</title>
<body>
<p>PHP distributes two versions of their <path>php.ini</path>, 
one for production environments and one for development. 
In Gentoo, you can now chose which of these two files you want
installed on your system by default. This is particularly handy
when you update PHP and do not want your chosen environment settings
in <path>php.ini</path> to appear when you merge your coniguration files.</p>

<p>To tell portage which version of <path>php.ini</path> you want, add one 
of the following lines to <path>/etc/make.conf</path>:</p>

<pre caption="Choosing between development and production php.ini">
<comment># Set default php.ini version to the development version</comment>
<var>PHP_INI_VERSION="development"</var>
<comment># Set default php.ini version to the production version</comment>
<var>PHP_INI_VERSION="production"</var>
</pre>

<impo>Note that the PHP herd also does additional patching of the php.ini file
regardless of the version you set above.</impo>

<warn>Always check and double-check your php.ini file after upgrade</warn>

<p>If you want to change your <path>php.ini</path> after installation, you 
can find both versions located in <path>/usr/share/doc/php-&lt;version>/php.ini-development.bz2</path>
</p>
</body>
</section><section>
<title>FPMm user/group</title>
<body>
<p>However, you might want to change the user and group parameters to something else
than nobody. Personally, I changed it to nginx, but you might want to consider
creating a new user for your web application. </p>
</body>
</section>
</chapter>

<chapter>
<title>Troubleshooting</title>
<section>
<title>My source code is showing</title>
<body>
<p>We do not really get that many support issues except for this one.</p>

<p>The most common reason is that short_open_tags is disabled by default. If you code make use of short tags, i.e &lt;? instead of &lt;?php, you have to either fix your code or make change your php.ini to enable short open tags.</p>

<pre caption="php.ini">
<var>short_open_tag = On</var>
</pre>

<p>Make sure you restart the relvant servers/fpm after changing php.ini</p>

<p>The other common reason for source code to be displayed is that you forgot to add "-D PHP5" to <path>/etc/conf.d/apache2</path> as described above.</p>

</body>
</section>
</chapter>

<chapter>
<title>Further reading</title>
<section>
<body>
<ul>
<li><uri link="http://www.gentoo.org/proj/en/php/php-upgrading.xml">PHP Upgrade guide</uri> - Offers more information about how to deal with multiple instals of PHP and how to install extensions.</li>
<li><uri link="http://olemarkus.org/2011/01/concurrently-running-multiple-versions-of-php/">Concurrently running multiple versions of PHP</uri> - A guide describing how to set up webservers to work with parallel installs of PHP</li>
</ul>
</body>
</section>
</chapter>
</guide>
