<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/gentoo-alt/Attic/port-start.xml,v 1.2 2005/10/10 17:11:51 flameeyes Exp $ -->

<guide link="/proj/en/gentoo-alt/policy.xml" lang="en">
<title>Starting a Gentoo/ALT port</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>

<abstract>
Porting Gentoo/ALT structure in a new operating system is not difficult, when
you know what to do and what to look at.
</abstract>


<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2005-10-10</date>

<chapter> <!-- Introduction -->
<title>Introduction</title>

<section> <!-- Preamble -->
<title>Preamble</title>

<body>

<p>
Starting a new Gentoo/ALT port is not too difficult, when you know how to do it
and what needs to be considered. This guide will explain the basic generic
steps needed to start the porting work.
</p>

<p>
Because of the Linux nature or the base of Gentoo/ALT structure, some of the
internals are based on an Unix-like structure, while the QA checks on the
compiled binaries are done considering ELF binaries as result. Tweaking of these
checks is a complex process and needs to be done with the help of the devs who
wrote those checks. For this reason, they won't be treated in this guide.
</p>

<p>
There are quite a few decision that one should start looking at when starting a
new Gentoo/ALT project, as therea are many different parameters that might
change the way the changes should be made. For every decision, this guide will
try to provide a selection of problems and solution to them, trying to give
help for every case.
</p>

<p>
You probably can try to port Gentoo/ALT on different conditions than the ones
explained here. They are just general guidelines to explain how the things were
done on current working ports.
</p>

</body>
</section>

<section> <!-- Support -->
<title>Support</title>

<body>

<p>
It's usually useful, when creating a new port, to get in touch with the other
developers working on Gentoo/ALT. This can be done through the <c>gentoo-alt</c>
<uri link="/main/en/lists.xml">mailing list </uri> or through the channel
<c>#gentoo-alt</c> on Freenode network.
</p>

<p>
Mailing list and IRC channel are a good way to ask for solution to problems that
are not treated in this guide (because of difference in the environment or
simply because they were not present a tthe time of writing), and to follow the
development of common decision inside and outside the project.
</p>

<p>
Also, if you're going to use Gentoo Portage for your port, you probably also
want to watch the <c>alt@gentoo.org</c> mail alias on
<uri link="http://bugs.gentoo.org/">Bugzilla</uri> to see what is going on with
portability of most ebuilds or scripts or other things that you might encounter
in your process.
</p>

</body>
</section>

<section> <!-- Choices -->
<title>Choices</title>

<body>

<p>
There are many choices one have to do when starting a Gentoo/ALT project. The
first and probably most important one is to choose if making a primary package
manager or a secondary. The first case is what is being done by Gentoo/FreeBSD,
while the latter is what is being done by Gentoo/OSX.
</p>

<p>
After deciding this there are other things that should be consdiered, starting,
for example, from the kind of init system you want to use, if you want to just
use the one used by your operating system, or replace it with the one used by
Gentoo Linux.
</p>

<p>
Every decision has its own rights and wrongs, and they should always be chosen
carefully. Sometimes it's also possible to provide different implementations
that allow the user to select what wants to do.
</p>

</body>
</section>

</chapter>

<chapter> <!-- Porting as primary manager -->
<title>Porting as primary manager</title>

<section> <!-- What does it mean -->
<title>What does it mean</title>

<body>

<p>
A primary package manager is a package manager that takes care of every file,
library and dependency of the package it manages. When creating a port that is a
primary package manager, every file present in the system must be managed by
portage itself.
</p>

<p>
There are many reasons why not every port can be a primary package manager. To
do that, you need to have access to the sources of all the operating system and
be able to patch them, usually. This means that you cannot create a primary
package manager for a proprietary operating system where you don't have the
sources for the base system. In those cases, you must rely on the secondary
package management.
</p>

<p>
The primary package management is what Portage born to do, and what Gentoo Linux
does. Adapting Portage to be the primary package manager in another operating
system, when you have sources, it's usually simple enough to be feasible without
too much hacking, and should be considered the starting point for projects that
wants to create a secondary package manager.
</p>

</body>
</section>

<section> <!-- How to bootstrap -->
<title>How to bootstrap</title>

<body>

<p>
With the term <e>bootstrap</e> this guide will usually refer to the process of
creating the first base from where to start doing the port work for portage
code, ebuilds and eclasses. While a bootstraped system is not a complete Gentoo
system, it should be able to install many packages with a simple <c>emerge</c>
command. From such a system you can usually create a <e>stage</e>, that will be
the actual starting point for new Gentoo/ALT systems.
</p>

<p>
The bootstrap process is sometimes tricky, as it requires to patch, compile and
tweak many packages by hand. It also might require to be done once per version
of the operating system, and also once per hardware architecture you want to
add, if the sources are not cross-compilable (and also in that case, it can be
tricky as Portage has very little crosscompile support).
</p>

<p>
The first thing to do is installing the dependencies of Portage itself, this
means Python, bash, GNU make, GNU sed, GNU awk and GNU patch. Depending on what
your "classic" userland uses for them, you might need to install them with a
<c>g-</c> prefix, making them <c>gmake</c>, <c>gsed</c>, <c>gawk</c> and
<c>gpatch</c>.
</p>

<note>
Unless you're going to work on a GNU/* project, such as GNU/Hurd or
GNU/kFreeBSD, is usually suggested to leave the native userland of your
operating system as default. Who wants to have the GNU syntax on basic commands
while being at user can then make use of <c>sys-devel/userland-gnu</c> ebuild,
that installs symlinks to GNU-like commands in <path>/usr/libexec/gnu</path>, so
that users can simply add that to path to have a GNU-like interface.
</note>

</body>
</section>

</chapter>

</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; -->
