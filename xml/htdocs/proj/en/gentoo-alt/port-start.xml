<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/gentoo-alt/Attic/port-start.xml,v 1.7 2005/10/10 21:09:13 flameeyes Exp $ -->

<guide link="/proj/en/gentoo-alt/policy.xml" lang="en">
<title>Starting a Gentoo/ALT port</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>

<abstract>
Porting Gentoo/ALT structure in a new operating system is not difficult, when
you know what to do and what to look at.
</abstract>


<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2005-10-10</date>

<chapter> <!-- Introduction -->
<title>Introduction</title>

<section> <!-- Preamble -->
<title>Preamble</title>

<body>

<p>
Starting a new Gentoo/ALT port is not too difficult, when you know how to do it
and what needs to be considered. This guide will explain the basic generic
steps needed to start the porting work.
</p>

<p>
Because of the Linux nature or the base of Gentoo/ALT structure, some of the
internals are based on an Unix-like structure, while the QA checks on the
compiled binaries are done considering ELF binaries as result. Tweaking of these
checks is a complex process and needs to be done with the help of the devs who
wrote those checks. For this reason, they won't be treated in this guide.
</p>

<p>
There are quite a few decision that one should start looking at when starting a
new Gentoo/ALT project, as therea are many different parameters that might
change the way the changes should be made. For every decision, this guide will
try to provide a selection of problems and solution to them, trying to give
help for every case.
</p>

<p>
You probably can try to port Gentoo/ALT on different conditions than the ones
explained here. They are just general guidelines to explain how the things were
done on current working ports.
</p>

</body>
</section>

<section> <!-- Support -->
<title>Support</title>

<body>

<p>
It's usually useful, when creating a new port, to get in touch with the other
developers working on Gentoo/ALT. This can be done through the <c>gentoo-alt</c>
<uri link="/main/en/lists.xml">mailing list </uri> or through the channel
<c>#gentoo-alt</c> on Freenode network.
</p>

<p>
Mailing list and IRC channel are a good way to ask for solution to problems that
are not treated in this guide (because of difference in the environment or
simply because they were not present a tthe time of writing), and to follow the
development of common decision inside and outside the project.
</p>

<p>
Also, if you're going to use Gentoo Portage for your port, you probably also
want to watch the <c>alt@gentoo.org</c> mail alias on
<uri link="http://bugs.gentoo.org/">Bugzilla</uri> to see what is going on with
portability of most ebuilds or scripts or other things that you might encounter
in your process.
</p>

</body>
</section>

<section> <!-- Choices -->
<title>Choices</title>

<body>

<p>
There are many choices one have to do when starting a Gentoo/ALT project. The
first and probably most important one is to choose if making a primary package
manager or a secondary. The first case is what is being done by Gentoo/FreeBSD,
while the latter is what is being done by Gentoo/OSX.
</p>

<p>
After deciding this there are other things that should be consdiered, starting,
for example, from the kind of init system you want to use, if you want to just
use the one used by your operating system, or replace it with the one used by
Gentoo Linux.
</p>

<p>
Every decision has its own rights and wrongs, and they should always be chosen
carefully. Sometimes it's also possible to provide different implementations
that allow the user to select what wants to do.
</p>

</body>
</section>

<section> <!-- Defining the userland -->
<title>Defining the userland</title>

<body>

<p>
Just one decision should be done as soon as possible and should be notified to
Gentoo/ALT mailing list and developers, and regards the userland. Every system
has its own native userland, sometimes using options different than other
userlands.
</p>

<p>
The most clear distinction is between GNU userland, used by almost every
Linux-based distribution, and the BSD userland, used by FreeBSD and other
BSDs. The <c>${USERLAND}</c> variable used by Gentoo representes the set of
commands used by the base system and their options handling. For example, in a
BSD userland, the GNU packages installs with a <c>g-</c> prefix, and the non
prefixed commands are BSD, accepting a different range of options and arguments.
</p>

<note>
The name of the userlands is quite arbitrary, so a GNU userland is actually the
userland as it is in a default Gentoo Linux installation.
</note>

<p>
When defining a new value for <c>${USERLAND}</c>, you should send an email to
gentoo-alt mailing list telling what it represents, which difference there are
between that and the default "GNU" userland, and who provides the basic commands
like <c>make</c>, <c>sed</c>, <c>awk</c>, <c>patch</c>, <c>tar</c>. This means
that a given userland might use GNU make as <c>make</c>, but still use GNU sed
as <c>gsed</c> (this is actually done by Darwin userland).
</p>

<p>
The userland selection will change the way things will be installed afterwards
and also the way some part of Portage will behave, so please choice carefully
what you want to set and declare.
</p>

<note>
Some commands that interacts with the kernel, such as <c>ifconfig</c> and
<c>ps</c>, are considered part of the userland. This is not exact, but it's a
way to make sure that their user interface is consistent with the rest of the
system. Ports of GNU userland on other operating systems should make sure that
they can provide equivalent commands with similar syntaxes to the ones used on
Linux.
</note>
</body>
</section>

</chapter>

<chapter> <!-- Porting as primary manager -->
<title>Porting as primary manager</title>

<section> <!-- What does it mean -->
<title>What does it mean</title>

<body>

<p>
A primary package manager is a package manager that takes care of every file,
library and dependency of the package it manages. When creating a port that is a
primary package manager, every file present in the system must be managed by
portage itself.
</p>

<p>
There are many reasons why not every port can be a primary package manager. To
do that, you need to have access to the sources of all the operating system and
be able to patch them, usually. This means that you cannot create a primary
package manager for a proprietary operating system where you don't have the
sources for the base system. In those cases, you must rely on the secondary
package management.
</p>

<p>
The primary package management is what Portage born to do, and what Gentoo Linux
does. Adapting Portage to be the primary package manager in another operating
system, when you have sources, it's usually simple enough to be feasible without
too much hacking, and should be considered the starting point for projects that
wants to create a secondary package manager.
</p>

</body>
</section>

<section> <!-- How to bootstrap -->
<title>How to bootstrap</title>

<body>

<p>
With the term <e>bootstrap</e> this guide will usually refer to the process of
creating the first base from where to start doing the port work for portage
code, ebuilds and eclasses. While a bootstraped system is not a complete Gentoo
system, it should be able to install many packages with a simple <c>emerge</c>
command. From such a system you can usually create a <e>stage</e>, that will be
the actual starting point for new Gentoo/ALT systems.
</p>

<p>
The bootstrap process is sometimes tricky, as it requires to patch, compile and
tweak many packages by hand. It also might require to be done once per version
of the operating system, and also once per hardware architecture you want to
add, if the sources are not cross-compilable (and also in that case, it can be
tricky as Portage has very little crosscompile support).
</p>

<p>
The first thing to do is installing the dependencies of Portage itself, this
means Python, bash, GNU make, GNU sed, GNU awk and GNU patch. Depending on what
your "classic" userland uses for them, you might need to install them with a
<c>g-</c> prefix, making them <c>gmake</c>, <c>gsed</c>, <c>gawk</c> and
<c>gpatch</c>.
</p>

<note>
Unless you're going to work on a GNU/* project, such as GNU/Hurd or
GNU/kFreeBSD, is usually suggested to leave the native userland of your
operating system as default. Who wants to have the GNU syntax on basic commands
while being at user can then make use of <c>sys-devel/userland-gnu</c> ebuild,
that installs symlinks to GNU-like commands in <path>/usr/libexec/gnu</path>, so
that users can simply add that to path to have a GNU-like interface.
</note>

<p>
Additionally, you might want to install also <c>rsync</c> to be able to get the
portage tree with <c>emerge sync</c> command. This is not mandatory, though, as
you can work on the first steps using a NFS-mounted tree or simply downloading
a snapshot of the tree to work on. This way is also suggested to be able to get
easily the difference between the original ebuilds and the ones edited to let
them work on your system, when needed.
</p>

<p>
Python is the critical part, as it needs to be patched with the same patches
that are applied by the ebuild itself. Please refer to the latest ebuild in
Portage to get the updated patches and make sure they are applied before
building and installing it. Also, it should be installed on <path>/usr</path>,
not in <path>/usr/local</path> as it defaults.
</p>

<p>
Bash is instead a quite simple package. The only note to this is that, while
many systems can install bash as an extra package, and then install its binary
in <path>/usr/bin</path>, that won't work easily on Gentoo/ALT projects, so it
should be installed as <path>/bin/bash</path>. This path is important as many
scripts and other things in portage refers to that directly.
</p>

<p>
The other packages (GNU make, GNU sed, GNU awk and GNU patch) are quite simple
to handle. They can be installed in <path>/usr/local</path>, while it's
suggested to install them in <path>/usr</path> as an ebuild would do. The only
thing is that, if you decide to prefix them with <c>g-</c>, you should run the
<c>./configure</c> in a slighly different way.
</p>

<pre caption="calling ./configure for GNU make, GNU sed, GNU akw or GNU patch">
<comment>The --program-prefix option is only necessary when you want to g-prefix them</comment>
./configure --prefix=/usr --program-prefix=g
</pre>

<p>
Once you built and installed all those packages, you can start installing
Portage itself. Right now, Portage package does not have an installation script
nor it is autotooled, so you need to install it by hand. Depending on the
version currently in portage, you might be needed to patch the source tarball.
For both the patches and the installation procedure, it's highly suggested to
refer to the ebuild for that version of Portage itself.
</p>

<p>
To run Portage, you anyway need a few things to clean up before. The first thing
is adding a <c>portage</c> user and group. This group should have uid/gid set at
250. Also, for many things you need a <c>wheel</c> group. This group is used on
BSD derived system insetad of the <c>root</c> group used by Linux and Solaris.
If the operating system under which you're porting Portage does not have a
<c>wheel</c> group, add one with either gid 0 or 10 (the first is an alias to
<c>root</c> group, as done by BSDs, the latter is instead the <c>wheel</c>
replacement used on Linux).
</p>

</body>
</section>

<section> <!-- Things to change in Portage and eclasses -->
<title>Things to change in Portage and eclasses</title>

<body>

<p>
There are a few things that usually needs to be checked when porting Portage on
a new operating system. The most important one is the <c>ldconfig</c> and its
way to update the libraries path. Portage uses <c>ldconfig</c> inside
<c>env-update</c> script to tell the dynamic loader where to look for libraries.
</p>

<p>
As the syntax and the way <c>ldconfig</c> work varies vastly on different
operating systems, this must be changed in portage itself. This must be looked
at with the help of Portage developers, and can be discussed on gentoo-alt
mailing list.
</p>

<p>
Another important thing is to update <c>enewuser</c>, <c>enewgroup</c>,
<c>egetent</c> and <c>egethome</c> functions in <path>eutils.eclass</path> and
<path>portability.eclass</path>. Those functions are used to create new users
and new group, to get data about existing users and groups, and to get the home
directory for a given user. They users <c>${CHOST}</c> variable to find out how
to do that, so you need to add a value for your own value.
</p>

<p>
If your operating system uses a linker (<c>ld</c>) different from GNU's one, you
should also add it to the <c>bindnow_flags</c> function inside
<path>flag-o-matic.eclass</path>, and you're suggested to improve the
<path>nowbinding.m4</path> macro file to select the right flags. The flags used
for "bindnow" binding are used to avoid lazy binding of libraries on setuid
binaries. Please refer to your own linker manual to find which flag should be
used.
</p>

</body>
</section>

</chapter>

</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; -->
