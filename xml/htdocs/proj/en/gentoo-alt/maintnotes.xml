<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/gentoo-alt/Attic/maintnotes.xml,v 1.10 2005/10/10 14:07:25 flameeyes Exp $ -->

<guide link="/proj/en/gentoo-alt/maintnotes.xml" lang="en">
<title>Gentoo/ALT Technotes Guide</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>

<author title="GuideXML">
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>

<abstract>
This guide is meant to display some technical notes about working with packages
on a non-Linux environment.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>2.3</version>
<date>2005-10-03</date>

<chapter>
<title>General Structure</title>
<section>
<title>Handling Users</title>
<body>

<p>
There are differences between users in a Gentoo/Linux system and the ones in 
other Gentoo/ALT systems. These differences are usually a side problem that
does not invalidate most of the work. Still, it's better to pay attention.
</p>

<p>
The first thing to check is to <e>never</e> use the <c>root</c> group. The 
group with id 0, called <c>root</c> on Linux is instead <c>wheel</c> on BSD and
Darwin, (and probably other classical unices); while <c>wheel</c> group on
Linux has GID 10. When you need to set the default permissions on a file (or a
series of files), you should then use the command <c>chown root:0 file</c>
instead, so that it takes the right permissions.
</p>

<impo>
This is the only one case where you should refer to a group or an user with its numeric ID instead of the name.
</impo>

<p>
For every other case you should always use the name of groups and users, 
avoiding specifying them by ID as they can have different IDs on different 
systems.
</p>

<p>
Also, it's important to note that every ebuild that makes references to specific
users and groups, should add them with <c>enewgroup</c> and <c>enewuser</c>, 
if it does not depend on the ebuild that adds them. So for example, 
<c>cronbase</c> adds <c>cron</c> user and group, as they can not be present on 
the users' systems.
</p>

<p>
It's not rare to create users that cannot login on a system. To do so, on Linux, 
the shell of those users is set to <path>/bin/false</path>. Unfortunately, this
does not work on BSD-derived systems like Gentoo/*BSD and Gentoo/Darwin, as
they use a more sofisticated approach, and <path>/bin/false</path> does not
exists. <c>enewuser</c> function provide a simple way to create a disabled
user: just use <c>-1</c> as the shell for the newly created user, this way the
function will take care of selecting the right shell for the disabled user,
making use of <path>/sbin/nologin</path> where that is present (*BSD, Darwin
and Linux using <c>app-admin/nologin</c>) or falling back to
<path>/bin/false</path> when nothing else can be used.
</p>

<p>
If you need to find out the home directory for a given user, you can't rely on 
the format of <path>/etc/passwd</path> or on the output of <c>egetent</c>, as
they are different on FreeBSD and OSX. To avoid this, the
<c>egethome</c> function (provided by <c>portability</c> eclass, but available
inheriting <c>eutils</c>), returns the right field making sure that is the home
directory for the user:
</p>

<pre caption="egethome usage">
inherit eutils
...
homedir=$(egethome charlie)
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Applications</title>
<section>
<title>Bash and shells</title>
<body>

<p>
Bash is the default shell of Gentoo Linux, and it's on top of this that ebuilds
are written. Because of this, Gentoo/ALT projects provides bash in their base
system, as <path>/bin/bash</path>.
</p>

<p>
Ebuilds and scripts can use bashisms without problems as bash is provided, but
in case of scripts, it's important that the first line reads as
<c>#!/bin/bash</c> instead of just <c>#!/bin/sh</c>, to make sure that they are
being executed with bash. The same goes for calling scripts from inside
ebuilds, <c>sh somescript</c> is deprecated in favor of <c>bash somescript</c>
so that bash is called for sure.
</p>

<p>
While bash should take care of managing <c>[ .. ]</c> tests, it's anyway
suggested to use <c>[[ .. ]]</c> to run tests also when quoting the arguments
correctly. This way, the tests are guarranteed to be expanded by bash
internally and do not get executed by <path>/bin/[</path> instead.
</p>

</body>
</section>

<section>
<title>GNU tools and non-GNU userlands</title>
<body>

<p>
Gentoo/ALT projects, a part from Gentoo GNU/kFreeBSD, aims to have a complete 
system that uses native versions of all the system's tools, of <c>libc</c>, 
and so on. However, there are some part of Gentoo's base system that does not 
work with BSD-like tools (not because they are broken, just because they are 
strictly POSIX). To work around this problem, we install a series of GNU tools 
g-prefixed. In a Gentoo/ALT system profile, you can always find these tools: 
GNU sed (as <c>gsed</c>), GNU make (as <c>gmake</c>), GNU awk (as <c>gawk</c>),
GNU patch (as <c>gpatch</c>) GNU diff (as <c>gdiff</c>) and usually GNU cmp (as
<c>cmp</c>, for compatibility with a couple other scripts). If you need 
GNU-style <c>find</c> command, you can also install findutils package that 
provides <c>gfind</c> and <c>gxargs</c>.
</p>

<p>
To allow users who prefers the GNU-style tools be comfortable, there is an ebuild
<path>sys-apps/userland-gnu</path> that depends on coreutils and other GNU 
packages, that are always g-prefixed, and then links them inside 
<path>/usr/libexec/gnu</path> without the g-prefix. After adding them to
<c>$PATH</c>, it's possible to use GNU tools in command line.
</p>

<p>
It's always preferred to use just the POSIX options, to be able to run the same
script identical on Gentoo/Linux and Gentoo/ALT. In case you cannot rewrite 
the code not to use the GNU extensions, just add a dependency over the right 
package that provides the tool, and then do a simple test:
</p>

<ol>
  <li>Check for the g-prefixed tool</li>
  <li>Check that it works as expected for a GNU tool (usually this means that 
  it accepts <c>version</c> option and reports GNU, FSF or the name of the 
  package there)</li>
</ol>

<p>
And then select the right one you need.
</p>

<impo>
Inside an ebuild there are a few aliases that are used to make sure that they 
doen't break apart, so calling <c>make</c>, <c>sed</c>, <c>patch</c> and 
<c>awk</c> will call the GNU version of the tools.
</impo>

<warn>
The GNU tools' aliases works only if the tools are called by themselves, they
won't work inside scripts called by the ebuild, and they won't work if called
by <c>find .. -exec</c> or by <c>xargs</c>. In those cases, it's usually better
to check for the right tool to call.
</warn>

<p>
To help with porting, there are a few constructs that are usually used out of 
habit that need to be fixed:
</p>

<ol>
  <li><c>cp -a</c>: this is a GNUism, as the <c>-a</c> option is not present 
  on POSIX <c>cp</c>. Its replacement is told to be <c>-dpPR</c>, but <c>-d</c>
  is not posix itself, so <c>-pPR</c> is what you should replace <c>-a</c>.</li>
  <li><c>cp --parents</c>: this other GNUism is used to copy a series of files
  from a tree maintaining their prefix. There's no equivalent option in BSD 
  userland, so this should be avoided. If you need this, instead use the 
  <c>treecopy</c> function in <c>portability</c> eclass, that works exactly as a
  <c>cp --parents -pPR</c> call.</li>
  <li><c>seq</c> doesn't exist on BSD userland, but there's a quick 
  replacement: <c>jot</c>. Unfortunately its syntax is too variable, and poses 
  a problem to manage. To avoid this, <c>portability</c> eclass has a 
  <c>seq</c> function replacement that calls <c>jot</c> with the right 
  parameters when called on a BSD userland. Still, make sure you're not trying
  to use some extra options to <c>seq</c></li>
</ol>

<note>
The <c>-d</c> option does <e>not</e> make a difference in almost all the cases, 
as it counts only when you have symlinks directly on the command line argument.
</note>

</body>
</section>
<section> <!-- Using pmake -->
<title>Using pmake</title>
<body>

<p>
There are a few packages that require the use of <c>pmake</c> (parallel make, 
by NetBSD, the package we use is from Debian) to build on GNU userland, as 
the makefiles are incompatible with GNU <c>make</c>. As the name of this
flavor of make varies depending on the userland you're in (it's <c>pmake</c>
on GNU userland, <c>bsdmake</c> in Darwin userland and simply <c>make</c>
in BSD userland. To avoid this trouble, you can use <c>get_bmake</c> function
from <c>portability</c> eclass.
</p>

<pre caption="using get_bmake">
DEPEND="!userland_BSD? ( sys-devel/pmake )"
...

src_compile() {
    $(get_bmake) || die "make failed"
}
</pre>

<p>
If the package builds using <c>ports</c>-like interface, as done by FreeBSD
system packages, <c>bsdmk</c> eclass (currently on Gentoo/ALT overlay)
provides a simple way to handle the knobs: just add to <c>${mymakeopts}</c>
the list of knobs to pass during the <c>pkg_setup()</c> function, and then
call <c>mkmake</c> and <c>mkinstall</c> to compile and install the packages
as specified.
</p>

</body>
</section>

<section> <!-- Note about different makes -->
<title>Note about different make</title>

<body>

<p>
As the <c>make</c> command changes name depending on the system where it's
being used, there is an important thing to keep in mind: recursive makefiles
are often used to build subdirectories of a source tree, but sometimes they
calls directly a new <c>make</c> command. This breaks when the makefiles are
called with other versions.
</p>

<p>
To avoid this problem all the modern <c>make</c> commands sets an automatic
variable <c>$(MAKE)</c> that carries the name of the command used to launch
the make chain. Instead of calling a generic <c>make</c>, all the makefiles
should then call <c>$(MAKE)</c> to be safe with different naming of the
command.
</p>

<p>
Another fortunately less common problem is when a package decides that 
<c>$(MAKE)</c> is not an automatic variable and try to overwrite it to set to
something else than what it is by default. This usually breaks compilation.
</p>

<p>
Both kind of errors requires patches to the original sources, that should be
sent upstream as usual.
</p>

</body>
</section>

</chapter>

<chapter>
<title>Programming</title>
<section>
<title>Linking to dlopen()</title>
<body>

<p>
On glibc-based systems, the <c>dlopen()</c> function and other functions to handle
run-time dynamic linking resides in the <c>libdl</c> library that must be linked 
explicitly in the program. On BSD systems instead those functions are provided by 
<c>libc</c>.
</p>

<p>
Some software does not check if it needs to link to <c>libdl</c> and always links
to it. This breaks on Gentoo/*BSD systems. To avoid this, <c>autotool</c>-ed 
projects can use a simple m4 macro, that can be found in
<path>gentoo-alt/m4s</path> module (derived from xine-lib's macro collection)
in the <path>dl.m4</path> file.
</p>

<p>
This simple <c>AM_DL</c> macro added to <path>configure.ac</path> (or 
<path>configure.in</path>) takes care of looking for the right library to link to,
and sets <c>DYNAMIC_LD_LIBS</c>. Add that to the <c>LIBADD</c> variable for the 
target and it will work fine on both glibc-based and BSD-derived systems.
</p>

<p>
For packages that do not have a build system that can be fixed to recognize 
whether <path>libdl</path> is needed, it's possible to use the <c>dlopen_lib</c>
function in the <c>portability</c> eclass. This function will return <c>-ldl</c>
where present, and nothing where it is not present, so one could use:
</p>

<pre caption="using $(dlopen_lib)">
append-ldflags $(dlopen_lib)
</pre>

<p>
To make sure it gets linked where needed.
</p>

</body>
</section>

<section><!-- Linkers issues -->
<title>Linkers issues</title>
<body>
<p>
A practice that can be an issue for Gentoo/ALT projects is assuming that the
linker that will be used to build a package is GNU and provided by binutils.
Some operating systems like Darwin uses another kind of linker that is not
completely compatible with the GNU one.
</p>

<p>
The most common error is to add <c>--with-gnu-ld</c> to the list of arguments
used to call <c>econf</c>. This is superfluos, as autoconf is smart enough to
figure out by itself when it's using GNU ld and when not. It also breaks when
the ld is not GNU as expected.
</p>

<p>
Another problem is with linking of suid binaries. Gentoo Linux guidelines tell
to link them with <c>-Wl,-z,now</c> option to get a non-lazy binding.
Unfortunately this option - while supported by many other linkers - is not
always called this way. To avoid this problem, you can use the
<c>bindnow-flags</c> function (in <c>flag-o-matic</c> eclass), that finds the
flags to append to have the non-lazy binding on the current linker.
</p>

<pre caption="appending flags for now binding">
inherit flag-o-matic
...
  append-flags $(bindnow-flags)
</pre>

<p>
As appending those flags is not always the best solution, it's usually
preferred to patch the sources to use those flags just when linking the suid
binaries. This can be tricky to allow use of non-GNU linkers. A solution to
this problem, when using autotooled packages, is to use the m4 macro
<c>AC_BINDNOW</c> that is found in subversion at
<path>gentoo-alt/m4s/nowbinding.m4</path> and it's installed by
<c>sys-devel/gentooalt-m4</c> package (currently only in overlay). This macro
checks for the actual linker used and select the right flags to use, setting
the <c>BINDNOW_FLAGS</c> variable to the right ones. Just use that in the
makefiles to let the now binding work.
</p>

<impo>
<c>sys-devel/gentooalt-m4</c> will be in place on main portage when packages
will start patching the sources to use the <c>AC_BINDNOW</c> macro. In those
cases, instead of adding the m4 file to the source, it's simpler to add a
build-time dependency over that package, so that it can be updated to support
new linkers when needed.
</impo>

<p>
When the software does not use autotools and so you can't use the m4 macro
above mentioned, a solution can be to set a variable in the makefiles to the
GNU flags (<c>-Wl,-z,now</c>, that are also the most common one), and then
use this variable (say <c>BINDNOW_FLAGS</c>) to add to the variables. In the
ebuild then you can override the flags during emake call.
</p>

<pre caption="example of emake call when overriding bindnow flags">
inherit flag-o-matic
...
  emake BINDNOW_FLAGS="$(bindnow-flags)" || die "emake failed"
</pre>

</body>
</section>

<section>
<title>malloc.h Header</title>
<body>

<p>
Some time ago, on some systems, in order to have the <c>malloc()</c> function, you
had to include the <path>malloc.h</path> header. Currently, this header is 
deprecated and should not be included, instead the <path>stdlib.h</path> header is 
enough to get the right prototype for the function.
</p>

<p>
When using <c>glibc</c> or <c>uclibc</c>, including <path>malloc.h</path> just adds
<path>stdlib.h</path> to includes. On other systems it simply does not exist. On 
FreeBSD, <path>malloc.h</path> exists, but it is a "trap". It basically throws a 
compilation error, stopping the build process. This can be discouraging for users, 
but it's a good way to know what software needs to be fixed to <e>not</e> try to 
include that file.
</p>

<p>
There are two simple ways to deal with this problem:
</p>

<ul>
  <li>Remove the line that includes <path>malloc.h</path> and prepare a patch for 
  upstream devs (if needed, add <path>stdlib.h</path> to the includes, to have
  <c>malloc</c>'s definition)</li>
  <li>Add a test for <path>malloc.h</path> in <path>configure.ac</path> (or 
  <path>configure.in</path>), and protect the inclusion with a 
  <c>#ifdef HAVE_MALLOC_H .. #endif</c> block, it works because the 
  <c>#error</c> call bails out the preprocessor as well.</li>
</ul>

<p>
The first way is preferred, as <path>malloc.h</path> is a deprecated header and 
should not be used, although some projects that have to deal with very very 
very old systems would like to protect it with an additional check, even if this
means having to deal with a longer configure stage.
</p>

</body>
</section>
<section>
<title>Locale Libraries</title>
<body>

<p>
One of the most used components in GNU software is <c>gettext</c>, a tool that 
allows the creation of i18n-capable packages (library and programs) with 
a relatively small amount of work and non-intrusive changes. Unfortunately, 
during the past years, the way <c>gettext</c> was integrated into GNU/Linux 
systems changed, creating a problem with Gentoo/FreeBSD now.  Originally, the 
needed intl functions were always provided by <c>gettext</c> itself.  Howerver,
recent versions of GNU <c>libc</c> provides them inside the standard library 
itself, thus not requiring anymore the linking to <c>libintl</c> as is required 
for system using other <c>libc</c>'s.
</p>

<p>
Similarly, <c>libiconv</c> is a GNU library that provides ways to convert text 
between different characters encodings. Its functions used to be always be 
provided always by <c>libiconv</c>, but now they are also embedded inside GNU 
<c>libc</c>. <c>gettext</c>, to provide its functionalities, uses <c>libiconv</c>;
at the same time, <c>libiconv</c> can use <c>gettext</c> to proivde i18n support 
for itself. This is not a problem for GNU <c>libc</c> users, as both <c>libintl</c>
and <c>libiconv</c> are inside <c>libc</c>, but it's a problem for non-glibc 
systems as this would add a circular depedency. To avoid this, nls support in 
<c>libiconv</c> is forcefully disabled.
</p>

<p>
Almost every package that depends on <c>libiconv/gettext</c> and uses 
<c>autotools</c> has already support to link to the right libraries on non-glibc 
systems. Unfortunately, this is not always enough: <c>gettext</c> guide states what 
the packages must do to make NLS support optional, but this is not always followed 
as intended, and intl functions are called also if NLS is disabled during configure 
stage, causing failure in linking on non-glibc systems (this doesn't appear as a 
problem on <c>glibc</c> systems, as the functions are always available on libc, and 
it doesn't need to be linked against, while on systems where <c>libiconv</c> and 
<c>libintl</c> are used it needs to be explicitely linked against that). This can be
simply avoided protecting under <c>#ifdef ENABLE_NLS .. #endif</c> blocks the calls 
to <c>setlocale()</c>, <c>testdomain()</c> and other intl functions. This way, they
will be called only when gettext is requested and linked against.
</p>

<p>
The way <c>gettext</c> and <c>libiconv</c> are used by some GNU software, with respect
to generic software, actually adds a couple more problems to Gentoo/*BSD systems. 
Packages like <c>tar</c>, <c>gettext</c>, <c>glib2</c> and <c>libiconv</c> themselves 
create, for some reason, a <path>${libdir}/charset.alias</path>. This file is going to 
have collisions with every package that creates one, so this will not be a good thing. 
The solution is to let <c>libiconv</c> install the only instance of it, and remove it 
from every other package, that's why some packages have one 
<c>rm -f /usr/$(get_libdir)/charset.alias</c> line. Remember that the -f is needed, 
as the file won't be created by Gentoo/Linux with <c>glibc</c>.
</p>

<p>
Another problem can be defining the dependencies for packages. It's always a bit of a 
problem knowing if <c>gettext</c> must be a runtime dependency or just a build time 
dependency, and whether it is related to the <c>nls</c> USE flag or not. On a 
glibc-based system <c>gettext</c> is a build-time dependency if <c>nls</c> USE flag is 
enabled (and the package does not regenerate <c>autotools</c> support files), or an 
unconditional build-time dependency when <c>autopoint</c> needs to be run. On a 
non-glibc system, <c>gettext</c> is also a run-time dependency when building with 
nls useflag enabled. While currently <c>gettext</c> and <c>libiconv</c> are in the list
of system packages for Gentoo/*BSD ports, the complete dependency would be:
</p>

<pre caption="gettext dependancy sample">
RDEPEND="!elibc_glibc? ( nls? ( sys-devel/gettext ) )"
DEPEND="nls? ( sys-devel/gettext )"
</pre>

<p>
Obviously this is true when nls USE flag is present and is honored by both the ebuild and
the <path>configure</path> script.  However,  please remember that <c>--disable-nls</c> 
presence on <c>configure --help</c> does not always mean that nls support can be disabled 
or is even present.
</p>

</body>
</section>
</chapter>

</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; -->
