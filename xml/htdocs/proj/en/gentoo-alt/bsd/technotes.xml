<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/gentoo-alt/bsd/Attic/technotes.xml,v 1.2 2005/09/16 08:51:59 chriswhite Exp $ -->

<guide link="proj/en/gentoo-alt/bsd/technotes.xml" lang="en">
<title>Gentoo/*BSD Technotes Guide</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>

<author title="GuideXML">
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>

<abstract>
This guide is meant to display some technical notes about working with packages
on a Gentoo/*BSD environment.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2005-09-15</date>

<chapter>
<title>General Structure</title>
<section>
<title>System Ebuilds Organization</title>
<body>

<p>
For consistency with the way upstream packages the system's sources (at least 
on FreeBSD), it's suggested to follow, now and in future ports, a simple rule
about the organization of the system's ebuild.
</p>

<p>
First of all, the categories should reflect the port itself, as with 
<path>sys-freebsd</path>. This allows excluding with <c>rsync_exclude</c> the 
part of portage that doesn't apply for your system.
</p>

<p>
After that you should then split the packages on the name of the source package.
This means that they are split on <path>bin</path>, <path>usr.bin</path>, 
<path>lib</path> and so on. As a dot is not a good character for a package name,
it's better to contract the "usr." part to "u", as FreeBSD's devs do when they 
release the sources of a new version (see 
<uri link="ftp://ftp.FreeBSD.org/pub/FreeBSD/releases/i386/5.4-RELEASE">5.4 
sources release</uri> as an example), so we'll have <path>bin</path> and 
<path>ubin</path>. The name should then made unique prefixing it with the port
name (<path>freebsd-bin</path>, <path>freebsd-ubin</path>, <path>freebsd-lib</path>).
</p>

<p>
Currently the following categories are being worked on:
</p>

<ul>
  <li><path>sys-freebsd</path></li>
  <li><path>sys-openbsd</path> (no overlay present, but was present and it's better saving this)</li>
  <li><path>sys-dragonfly</path> (developed unofficially by arachnist)</li>
  <li><path>sys-netbsd</path> (developed unofficially by thunder`)</li>
</ul>

</body>
</section>
<section>
<title>Base Packages</title>
<body>

<p>
While Gentoo/*BSD should try to be Gentoo as much as possible while being as 
much as themselves as much as possible, there are cases where using software 
in <c>portage</c> is prefered over using the applicable port's versions. The 
experience on Gentoo/FreeBSD suggest a good way to deal with this. The 
reasons behind this is that it takes less time to build a simpler package 
than to install everything to base packages, and it's quicker to fix them if 
needed, for example, for security patches.
</p>

<p>
What should not be installed in base system is mainly things that belongs to 
contrib sections, like GNU software that is installed by the system (think of 
<c>grep</c>, <c>gsed</c> and so on), but it can also be something else. For 
example Gentoo/FreeBSD builds on its own <c>bsdtar</c> because that can be 
used by other systems, too (like Linux). The same applies for other packages 
that can be shared between different Gentoo/*BSD systems.
</p>

<p>
While stated earlier that base system packages go into <path>sys-SYSTEM</path> 
category, packages like <c>bsdtar</c>, <c>libbegemot</c> and <c>libbsnmp</c> 
goes into their "classic" categories, <path>app-arch</path>, 
<path>dev-libs</path> and <path>net-libs</path>, as they are shared between 
systems. If they are not going to work on Linux, the best thing is to 
<path>package.mask</path> them on <path>default-linux</path> profile in 
<c>portage</c> (if you're going to merge <c>portage</c> or this is not going
to be a problem for main tree maintainers).
</p>

<p>
When doing this kind of splitting, is important to watch at the differences 
that might be between different BSD flavors, as sometimes they share and mix 
the same library or tool between them. When there are differences that might 
mean different behavior, is better not to split, or try to contact the 
upstream devs (trying to find who is the original author of that code) to 
see if it's possible to merge the behavior again.
</p>

</body>
</section>
<section>
<title>Handling Users</title>
<body>

<p>
There are differences between users in a Gentoo/Linux system and the ones in 
Gentoo/BSD systems. These differences are usually a side problem that does not 
invalidate most of the work. Still, it's better to pay attention.
</p>

<p>
The first thing to check is to <e>never</e> use the <c>root</c> group. The 
group with id 0, called <c>root</c> on Linux is instead <c>wheel</c> on BSD
(and probably other classical unices); while <c>wheel</c> group on Linux has
GID 10. When you need to set the default permissions on a file (or a series 
of files), you should then use the command <c>chown root:0 file</c> instead, 
so that it takes the right permissions.
</p>

<impo>
This is the only one case where you should refer to a group or an user with its numeric ID instead of the name.
</impo>

<p>
For every other case you should always use the name of groups and users, 
avoiding specifying them by ID as they can have different IDs on different 
systems.
</p>

<p>
Also, it's important to note that every ebuild that makes references to specific
users and groups, should add them with <c>enewgroup</c> and <c>enewuser</c>, 
if it does not depend on the ebuild that adds them. So for example, 
<c>cronbase</c> adds <c>cron</c> user and group, as they can not be present on 
the users' systems.
</p>

<p>
It's not rare to create users that cannot login on a system. To do so, on Linux, 
the shell of those users is set to <path>/bin/false</path>. Unfortunately this 
breaks compatibility with Gentoo/BSD and Gentoo/Darwin, where 
<path>/bin/false</path> is not present (and not a valid shell). <c>enewuser</c> 
functions provide a simple way to create a disabled user: just use <c>-1</c> as 
the shell for the newly created user, this way the functions will take care of 
selecting the right shell for the disabled user (it's 
<path>/usr/sbin/nologin</path> on BSD-derived, and <path>/usr/bin/false</path> 
for Darwin).
</p>

</body>
</section>
</chapter>

<chapter>
<title>Applications</title>
<section>
<title>GNU tools under BSD</title>
<body>

<p>
Gentoo/BSD projects, a part from Gentoo GNU/kFreeBSD, aims to have a complete 
system that uses native versions of all the system's tools, of <c>libc</c>, 
and so on. However, there are some part of Gentoo's base system that does not 
work with BSD tools (not because they are broken, just because they are 
strictly POSIX). To work around this problem, we install a series of GNU tools 
g-prefixed. In a Gentoo/BSD system profile, you can always find these tools: 
GNU sed (as <c>gsed</c>), GNU make (as <c>gmake</c>), GNU awk (as <c>gawk</c>),
GNU patch (as <c>gpatch</c>) GNU diff (as <c>gdiff</c>) and GNU cmp (as 
<c>cmp</c>, for compatibility with a couple other scripts). If you need 
GNU-style <c>find</c> command, you can also install findutils package that 
provides <c>gfind</c> and <c>gxargs</c>.
</p>

<p>
To allow users who prefers the GNU-style tools be comfortable, there is an ebuild
<path>sys-apps/userland-gnu</path> that depends on coreutils and other GNU 
packages, that are always g-prefixed, and then links them inside 
<path>/usr/libexec/gnu</path> without the g-prefix. After adding them to
<c>$PATH</c>, it's possible to use GNU tools in command line.
</p>

<p>
It's always preferred to use just the POSIX options, to be able to run the same
script identical on Gentoo/Linux and Gentoo/FreeBSD. In case you cannot rewrite 
the code not to use the GNU extensions, just add a dependency over the right 
package that provides the tool, and then do a simple test:
</p>

<ol>
  <li>Check for the g-prefixed tool</li>
  <li>Check that it works as expected for a GNU tool (usually this means that 
  it accepts <c>version</c> option and reports GNU, FSF or the name of the 
  package there)</li>
</ol>

<p>
And then select the right one you need.
</p>

<impo>
Inside an ebuild there are a few aliases that are used to make sure that they 
doen't break apart, so calling <c>make</c>, <c>sed</c>, <c>patch</c> and 
<c>awk</c> will call the GNU version of the tools.
</impo>

<p>
To help with porting, there are a few constructs that are usually used out of 
habit that need to be fixed:
</p>

<ol>
  <li><c>cp -a</c>: this is a GNUism, as the <c>-a</c> option is not present 
  on POSIX <c>cp</c>. Its replacement is told to be <c>-dpPR</c>, but <c>-d</c>
  is not posix itself, so <c>-pPR</c> is what you should replace <c>-a</c>.</li>
</ol>

<note>
The <c>-d</c> option does <e>not</e> make a difference in almost all the cases, 
as it counts only when you have symlinks directly on the command line argument.
</note>

</body>
</section>
<section>
<title>Using pmake</title>
<body>

<p>
There are a few packages that require the use of <c>pmake</c> (parallel make, 
by NetBSD, the package we use is from Debian) to build on GNU userland, as 
the makefiles are incompatible with GNU <c>make</c>. This is a problem as 
we can't install <c>pmake</c> on FreeBSD, because it collides with the 
<c>mkdep</c> installed by FreeBSD itself. Also the tests done to use 
<c>pmake</c> as default <c>make</c> command on Gentoo/FreeBSD have shown 
that FreeBSD's makefiles are not 100% compatible with <c>pmake</c> itself
(the <c>make</c> command provided by FreeBSD is a fork of it, but seems to 
have different behavior with some variables). To avoid this trouble, on 
Gentoo/FreeBSD's overlay there is a <c>bsdmk</c> eclass, that carries a 
<c>get_bmake</c> function to get a BSDish <c>make</c> command. The eclass also
depends on the <c>pmake</c> package for non-BSD userland, so that it gets 
installed on GNU and Darwin userlands.
</p>

<p>
The command used on Gentoo/BSD is then <c>make</c>, while it's <c>pmake</c> on
GNU userland and <c>bsdmake</c> on Darwin userland.
</p>

<p>
Also if the package builds using <c>ports</c>-like interface, as done by FreeBSD
system packages, <c>bsdmk</c> provides a simple way to handle the knobs: just 
add to <c>${mymakeopts}</c> the list of knobs to pass during the 
<c>pkg_setup()</c> function, and then call <c>mkmake</c> and <c>mkinstal</c> 
to compile and install the packages as specified.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Programming</title>
<section>
<title>Linking to dlopen()</title>
<body>

<p>
On glibc-based systems, the <c>dlopen()</c> function and other functions to handle
run-time dynamic linking resides in the <c>libdl</c> library that must be linked 
explicitly in the program. On BSD systems instead those functions are provided by 
<c>libc</c>.
</p>

<p>
Some software does not check if it needs to link to <c>libdl</c> and always linsk 
to it. This breaks on Gentoo/FreeBSD systems. To avoid this, <c>autotool</c>-ed 
projects can use a simple m4 macro that can be found in xine-lib's source package
(it's in <path>m4/dl.m4</path> file).
</p>

<p>
This simple <c>AM_DL</c> macro added to <path>configure.ac</path> (or 
<path>configure.in</path>) takes care of looking for the right library to link to,
and sets <c>DYNAMIC_LD_LIBS</c>. Add that to the <c>LIBADD</c> variable for the 
target and it will work fine on both glibc-based and BSD-derived systems.
</p>

</body>
</section>
<section>
<title>malloc.h Header</title>
<body>

<p>
Some time ago, on some systems, in order to have the <c>malloc()</c> function, you
had to include the <path>malloc.h</path> header. Currently, this header is 
deprecated and should not be included, instead the <path>stdlib.h</path> header is 
enough to get the right prototype for the function.
</p>

<p>
When using <c>glibc</c> or <c>uclibc</c>, including <path>malloc.h</path> just adds
<path>stdlib.h</path> to includes. On other systems it simply does not exist. On 
FreeBSD, <path>malloc.h</path> exists, but it is a "trap". It basically throws a 
compilation error, stopping the build process. This can be discouraging for users, 
but it's a good way to know what software needs to be fixed to <e>not</e> try to 
include that file.
</p>

<p>
There are two simple ways to deal with this problem:
</p>

<ul>
  <li>Remove the line that includes <path>malloc.h</path> and prepare a patch for 
  upstream devs</li>
  <li>Add a test for <path>malloc.h</path> in <path>configure.ac</path> (or 
  <path>configure.in</path>), and protect the inclusion with a 
  <c>#ifdef HAVE_MALLOC_H .. #endif</c> block, it works because the 
  <c>#error</c> call bails out the preprocessor as well.</li>
</ul>

<p>
The first way is preferred, as <path>malloc.h</path> is a deprecated header and 
should not be used, although some projects that have to deal with very very 
very old systems would like to protect it with an additional check, even if this
means having to deal with a longer configure stage.
</p>

</body>
</section>
</chapter>

</guide>
