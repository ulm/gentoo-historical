<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/gentoo-alt/bsd/devnotes.xml,v 1.4 2005/10/10 01:45:20 flameeyes Exp $ -->

<guide link="/proj/en/gentoo-alt/bsd/devnotes.xml" lang="en">
<title>Gentoo/*BSD Devnotes Guide</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Pettenò</mail>
</author>

<author title="GuideXML">
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>

<abstract>
This guide is meant to display some Gentoo/*BSD specific notes about working
with packages on a Gentoo/*BSD environment.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.1</version>
<date>2005-09-21</date>

<chapter> <!-- System structure -->
<title>System Structure</title>
<section>
<title>System Ebuilds Organization</title>
<body>

<p>
For consistency with the way upstream packages the system's sources (at least 
on FreeBSD), it's suggested to follow, now and in future ports, a simple rule
about the organization of the system's ebuild.
</p>

<p>
First of all, the categories should reflect the port itself, as with 
<path>sys-freebsd</path>. This allows excluding with <c>rsync_exclude</c> the 
part of portage that doesn't apply for your system.
</p>

<p>
After that you should then split the packages on the name of the source package.
This means that they are split on <path>bin</path>, <path>usr.bin</path>, 
<path>lib</path> and so on. As a dot is not a good character for a package name,
it's better to contract the "usr." part to "u", as FreeBSD's devs do when they 
release the sources of a new version (see 
<uri link="ftp://ftp.FreeBSD.org/pub/FreeBSD/releases/i386/5.4-RELEASE">5.4 
sources release</uri> as an example), so we'll have <path>bin</path> and 
<path>ubin</path>. The name should then made unique prefixing it with the port
name (<path>freebsd-bin</path>, <path>freebsd-ubin</path>, <path>freebsd-lib</path>).
</p>

<p>
Currently the following categories are being worked on:
</p>

<ul>
  <li><path>sys-freebsd</path></li>
  <li><path>sys-openbsd</path> (no overlay present, but was present and it's better saving this)</li>
  <li><path>sys-dragonfly</path> (developed unofficially by arachnist)</li>
  <li><path>sys-netbsd</path> (developed unofficially by thunder`)</li>
</ul>

</body>
</section>
<section>
<title>Base Packages</title>
<body>

<p>
While Gentoo/*BSD should try to be Gentoo as much as possible while being as 
much as themselves as much as possible, there are cases where using software 
in <c>portage</c> is prefered over using the applicable port's versions. The 
experience on Gentoo/FreeBSD suggest a good way to deal with this. The 
reasons behind this is that it takes less time to build a simpler package 
than to install everything to base packages, and it's quicker to fix them if 
needed, for example, for security patches.
</p>

<p>
What should not be installed in base system is mainly things that belongs to 
contrib sections, like GNU software that is installed by the system (think of 
<c>grep</c>, <c>gsed</c> and so on), but it can also be something else. For 
example Gentoo/FreeBSD builds on its own <c>bsdtar</c> because that can be 
used by other systems, too (like Linux). The same applies for other packages 
that can be shared between different Gentoo/*BSD systems.
</p>

<p>
While stated earlier that base system packages go into <path>sys-SYSTEM</path> 
category, packages like <c>bsdtar</c>, <c>libbegemot</c> and <c>libbsnmp</c> 
goes into their "classic" categories, <path>app-arch</path>, 
<path>dev-libs</path> and <path>net-libs</path>, as they are shared between 
systems. If they are not going to work on Linux, the best thing is to 
<path>package.mask</path> them on <path>default-linux</path> profile in 
<c>portage</c> (if you're going to merge <c>portage</c> or this is not going
to be a problem for main tree maintainers).
</p>

<p>
When doing this kind of splitting, is important to watch at the differences 
that might be between different BSD flavors, as sometimes they share and mix 
the same library or tool between them. When there are differences that might 
mean different behavior, is better not to split, or try to contact the 
upstream devs (trying to find who is the original author of that code) to 
see if it's possible to merge the behavior again.
</p>

<p>
An exception can be done for packages such as <c>gcc</c> and <c>binutils</c> 
that can have patches that are mandatory on the porting platform and that can 
be difficult to split out. It's usually recommended that the patches get split
out as soon as possible. In case there's no clean way to do so, the entire
patchset should be applied over a vanilla gcc that is built with the same way 
Gentoo's <c>GCC</c> is built.  This ensures that <c>gcc-config</c> can take it
up.
</p>

<impo>
Although <c>sys-devel/pmake</c> exists, and it should be a make command
compatible with FreeBSD's and DragonFly's <c>make</c>, it was tested and
found not 100% reliable. The problem can be with FreeBSD's makefiles or
with Debian's patches, but the result is that the package is not usable,
so it should <e>not</e> be used on Gentoo/*BSD systems.
</impo>

</body>
</section>
</chapter>
<chapter> <!-- Non-System Package Notes -->
<title>Non-System Packaging Notes</title>
<section> <!-- Source tarballs structure -->
<title>Source tarballs structure</title>
<body>

<p>
When preparing the source tarballs, according to the notes above, you should 
package separately, as is done by the original FreeBSD. To make easier this 
task, you can find a simple script in CVS called <path>extract.sh</path>.
This scripts accepts two parameters, the first one is the version you're 
getting the packages for, and must be formatted in the Gentoo way (that is, 
6.0 beta4 packages would be created asking for 6.0_beta4 version), the script 
takes care of translating that to the FreeBSD naming scheme.
After that, the scripts downloads all the sources in 1.44-sized files, 
recompose them and then translate the tarballs from gzip to bzip2.
</p>

<p>
The files should then be loaded into <path>/space/distfiles-local</path> so that
the mirrors can fetch them.
</p>

<impo>
Until Gentoo/FreeBSD are officially in portage, the files that are 
copied in <path>distfiles-local</path> and then uploaded on the mirrors
<e>must</e> be whitelisted in <path>/space/distfiles-whitelist/YEAR-MONTH</path>
so that they won't get deleted.
</impo>

</body>
</section>

<section> <!-- libtool and libraries naming -->
<title>libtool and libraries naming</title>

<body>

<p>
One of the most "black magic" problems that are faced by Gentoo/*BSD developers
is the libtool naming scheme. By default on FreeBSD and DragonFly BSD the
libraries are named with a single versioning number after the <c>.so</c>
extension. This makes the soname and the actual library name be the same.
</p>

<p>
Unfortunately this approach, while having its own reasons, makes difficult for
users to updated from one version of a library to another, if that changes the
first part of its version. For instance, libiconv 1.9 and libiconv 1.10, are
respectively <path>libiconv.so.2.2</path> and <path>libiconv.so.2.3</path> on
Linux, while they are <path>libiconv.so.4</path> and <path>libiconv.so.5</path>
on native FreeBSD. This breaks everything that links against libiconv, and this
is a big part of the system, as also GCC, if compiled with nls support, links
against it. The same trouble goes for glib, GTK+ and Gnome libraries.
</p>

<p>
The solution to this problem is to use the Linux naming scheme on Gentoo/FreeBSD
and Gentoo/DragonFly. To achieve this, it's needed to patch libtool, but as many
packages are shipped with complete autotools, it's not practical to re-execute
<c>libtoolize</c> over everyone of them. The solution is to make use of the
already widely used <c>elibtoolize</c> function, that patches directly the
already created files (in particular the configure file) to use the Linux naming
when being on Gentoo systems.
</p>

<impo>
<c>elibtoolize</c> patches are tricky to handle, as they require being prepared
in a given way. Please don't touch them without contacting
<mail link="flameeyes@gentoo.org">Diego Pettenò</mail> (for Gentoo/*BSD specific
patches) or <mail link="azarah@gentoo.org">Martin Schlemmer</mail> (for
everything else).
</impo>

</body>
</section>
</chapter>

</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; -->
