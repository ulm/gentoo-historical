<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/gentoo-alt/bsd/devnotes.xml,v 1.12 2012/10/28 15:21:05 swift Exp $ -->

<guide lang="en">
<title>Gentoo/*BSD Devnotes Guide</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Pettenò</mail>
</author>

<author title="GuideXML">
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>

<author title="Editor">
  <mail link="reb@gentoo.org">Karol Pasternak</mail>
</author>

<abstract>
This guide is meant to display some Gentoo/*BSD specific notes about working
with packages on a Gentoo/*BSD environment.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.5</version>
<date>2006-05-02</date>

<chapter> <!-- System structure -->
<title>System Structure</title>
<section>
<title>System Ebuilds Organization</title>
<body>

<p>
For consistency with the way upstream packages the system's sources (at least 
on FreeBSD), it's suggested to follow, now and in future ports, a simple rule
about the organization of the system's ebuild.
</p>

<p>
First of all, the categories should reflect the port itself, as with 
<path>sys-freebsd</path>. This allows excluding with <c>rsync_exclude</c> the 
part of portage that doesn't apply for your system.
</p>

<p>
After that you should then split the packages on the name of the source package.
This means that they are split on <path>bin</path>, <path>usr.bin</path>, 
<path>lib</path> and so on. As a dot is not a good character for a package name,
it's better to contract the "usr." part to "u", as FreeBSD's devs do when they 
release the sources of a new version (see 
<uri link="ftp://ftp.FreeBSD.org/pub/FreeBSD/releases/i386/5.4-RELEASE">5.4 
sources release</uri> as an example), so we'll have <path>bin</path> and 
<path>ubin</path>. The name should then made unique prefixing it with the port
name (<path>freebsd-bin</path>, <path>freebsd-ubin</path>, <path>freebsd-lib</path>).
</p>

<p>
Currently the following categories are being worked on:
</p>

<ul>
  <li><path>sys-freebsd</path></li>
  <li><path>sys-openbsd</path></li>
  <li><path>sys-dragonfly</path> (developed unofficially by arachnist)</li>
  <li><path>sys-netbsd</path></li>
</ul>

</body>
</section>
<section>
<title>Base Packages</title>
<body>

<p>
While Gentoo/*BSD should try to be Gentoo as much as possible while being as 
much as themselves as much as possible, there are cases where using software 
in <c>portage</c> is prefered over using the applicable port's versions. The 
experience on Gentoo/FreeBSD suggest a good way to deal with this. The 
reasons behind this is that it takes less time to build a simpler package 
than to install everything to base packages, and it's quicker to fix them if 
needed, for example, for security patches.
</p>

<p>
What should not be installed in base system is mainly things that belongs to 
contrib sections, like GNU software that is installed by the system (think of 
<c>grep</c>, <c>gsed</c> and so on), but it can also be something else. For 
example Gentoo/FreeBSD builds on its own <c>bsdtar</c> because that can be 
used by other systems, too (like Linux). The same applies for other packages 
that can be shared between different Gentoo/*BSD systems.
</p>

<p>
While stated earlier that base system packages go into <path>sys-SYSTEM</path> 
category, packages like <c>bsdtar</c>, <c>libbegemot</c> and <c>libbsnmp</c> 
goes into their "classic" categories, <path>app-arch</path>, 
<path>dev-libs</path> and <path>net-libs</path>, as they are shared between 
systems. If they are not going to work on Linux, the best thing is to 
<path>package.mask</path> them on <path>default-linux</path> profile in 
<c>portage</c> (if you're going to merge <c>portage</c> or this is not going
to be a problem for main tree maintainers).
</p>

<p>
When doing this kind of splitting, is important to watch at the differences 
that might be between different BSD flavors, as sometimes they share and mix 
the same library or tool between them. When there are differences that might 
mean different behavior, is better not to split, or try to contact the 
upstream devs (trying to find who is the original author of that code) to 
see if it's possible to merge the behavior again.
</p>

<p>
An exception can be done for packages such as <c>gcc</c> and <c>binutils</c> 
that can have patches that are mandatory on the porting platform and that can 
be difficult to split out. It's usually recommended that the patches get split
out as soon as possible. In case there's no clean way to do so, the entire
patchset should be applied over a vanilla gcc that is built with the same way 
Gentoo's <c>GCC</c> is built.  This ensures that <c>gcc-config</c> can take it
up.
</p>

<impo>
Although <c>sys-devel/pmake</c> exists, and it should be a make command
compatible with FreeBSD's and DragonFly's <c>make</c>, it was tested and
found not 100% reliable. The problem can be with FreeBSD's makefiles or
with Debian's patches, but the result is that the package is not usable,
so it should <e>not</e> be used on Gentoo/*BSD systems.
</impo>

</body>
</section>
</chapter>
<chapter> <!-- Non-System Package Notes -->
<title>Non-System Packaging Notes</title>
<section> <!-- Source tarballs structure -->
<title>Source tarballs structure</title>
<body>

<p>
When preparing the source tarballs, according to the notes above, you should 
package separately, as is done by the original FreeBSD. To make easier this 
task, you can find a simple script in CVS called <path>extract.sh</path>.
This scripts accepts two parameters, the first one is the version you're 
getting the packages for, and must be formatted in the Gentoo way (that is, 
6.0 beta4 packages would be created asking for 6.0_beta4 version), the script 
takes care of translating that to the FreeBSD naming scheme.
After that, the scripts downloads all the sources in 1.44-sized files, 
recompose them and then translate the tarballs from gzip to bzip2.
</p>

<p>
The files should then be loaded into <path>/space/distfiles-local</path> so that
the mirrors can fetch them.
</p>

<impo>
Until ports are officially in portage, the files that are copied inside
<path>distfiles-local</path> and then upload on the mirrors <e>must</e> be
whitelisted in <path>/space/distfiles-whitelist/YEAR-MONTH</path> so that they
won't get deleted.
</impo>

</body>
</section>

<section> <!-- libtool and libraries naming -->
<title>libtool and libraries naming</title>

<body>

<p>
One of the most "black magic" problems that are faced by Gentoo/*BSD developers
is the libtool naming scheme. By default on FreeBSD and DragonFly BSD the
libraries are named with a single versioning number after the <c>.so</c>
extension. This makes the soname and the actual library name be the same.
</p>

<p>
Unfortunately this approach, while having its own reasons, makes difficult for
users to updated from one version of a library to another, if that changes the
first part of its version. For instance, libiconv 1.9 and libiconv 1.10, are
respectively <path>libiconv.so.2.2</path> and <path>libiconv.so.2.3</path> on
Linux, while they are <path>libiconv.so.4</path> and <path>libiconv.so.5</path>
on native FreeBSD. This breaks everything that links against libiconv, and this
is a big part of the system, as also GCC, if compiled with nls support, links
against it. The same trouble goes for glib, GTK+ and Gnome libraries.
</p>

<p>
The solution to this problem is to use the Linux naming scheme on Gentoo/FreeBSD
and Gentoo/DragonFly. To achieve this, it's needed to patch libtool, but as many
packages are shipped with complete autotools, it's not practical to re-execute
<c>libtoolize</c> over everyone of them. The solution is to make use of the
already widely used <c>elibtoolize</c> function, that patches directly the
already created files (in particular the configure file) to use the Linux naming
when being on Gentoo systems.
</p>

<impo>
<c>elibtoolize</c> patches are tricky to handle, as they require being prepared
in a given way. Please don't touch them without contacting
<mail link="flameeyes@gentoo.org">Diego Pettenò</mail> (for Gentoo/*BSD specific
patches) or <mail link="azarah@gentoo.org">Martin Schlemmer</mail> (for
everything else).
</impo>

</body>
</section>
</chapter>

<chapter> <!-- Eclasses guide -->
<title>Eclasses guide</title>

<section> <!-- Introduction -->
<title>Introduction</title>

<body>

<p>
To make simple the work for developers working with BSD-packaged source code,
the Gentoo/FreeBSD ebuilds make use of two main eclasses designed just for
supporting the "ebuildification" of ports-like packages. One is generic and is
shared between all the other Gentoo/*BSD ports, while the other is more related
to the handling of the system ebuilds.
</p>

<p>
The two eclasses are <path>bsdmk.eclass</path> and <path>freebsd.class</path>.
Their use is not limited to Gentoo/FreeBSD itself, as many packages uses ports
interfaces directly in their sources, and can then be built with those eclasses
on other systems (take for example <c>net-fs/smbfs</c> that should work on
Darwin, too).
</p>

</body>
</section>

<section> <!-- bsdmk eclass -->
<title>bsdmk eclass</title>

<body>

<p>
Starting from the most generic eclass, we have <c>bsdmk</c>. This eclass is
used to simplify the handling of packages with a build system based on "mk"
files, in ports style. The mk files are files that contains predefined rules,
variables and that can be included to avoid writing every time a complete
makefile.
</p>

<p>
A makefile that uses a mk-like interface is much similar to a Makefile.am,
as it only defines the targets, the sources, and the extra non-standard rules.
It also can specify subdirs, to use recursive make.
</p>

<p>
It's not possible to build a mk-based package using GNU make, as it uses
syntaxes that are extensions used by BSD-ish makes. You can find on
<uri link="/proj/en/gentoo-alt/contribute/index.xml?part=1&amp;chap=4">Gentoo/Alt maintainers notes</uri>
an explaination on how to handle BSD-style make and GNU make in ebuilds.
</p>

<p>
mk-based packages support passing extra options to enable/disable features,
alike to <c>configure</c> options. This kind of options are often called
"knobs", and are simply extra variables passed on the command line.
</p>

<pre caption="example of make call with knobs">
  make NO_WERROR= INET6= OTHER_KNOB=
</pre>

<p>
While using autotooled packages you need to pass the options to <c>configure</c>
only inside <c>src_compile</c> function, using mk-based packages you need to
pass the same knobs to both build and install commands. To simplify this, the
eclass provides two functions (<c>mkmake</c> and <c>mkinstall</c>) that passes
to the make command the knobs set in <c>${mymakeopts}</c> variable, that should
be filled during <c>pkg_setup</c> referring to the useflag the user set (or the
features that must/must not be enabled for the build).
</p>

<p>
As many packages - like the source packages for FreeBSd and probably other
BSD source packages - just needs to call <c>mkmake</c> to build and
<c>mkinstall</c> to install the files built, bsdmk eclass also exports
<c>bsdmk_src_compile</c> and <c>bsdmk_src_install</c> functions that are a quick
way to prepare an ebuild for a mk-based package.
</p>

<p>
Sometimes you want to exclude, from a bigger source tree, a single directory or
a set of directories. This is the case of Gentoo/FreeBSD sources, where the main
source tarballs contains also libraries and programs that are built outside the
system ebuilds directly by portage.
</p>

<p>
To make simpler avoiding building an entire subdirectory tree, while not
removing the sources (that might be included or used directly by other targets
in other directories), the simplest way is to create a fake Makefile that just
includes a dummy mk file. This is what <c>dummy_mk</c> function does.
</p>

<p>
The <c>dummy_mk</c> function replace the Makefile of the given subdirectory with
a Makefile that incldues <path>bsd.lib.mk</path> mk file (that defines shared
and static libraries) but does not declare any target. This way, when
<c>make</c> will enter the directory, it will pass on without building anything.
</p>

</body>
</section>

<section> <!-- The freebsd eclass -->
<title>The freebsd eclass</title>

<body>

<p>
<path>freebsd.eclass</path> contains some extra functions and variables used by
Gentoo/FreeBSD system ebuilds. Their use is and should always be limited to
those ebuilds, to limit the necessity of extending too much this eclass. If new
functions are needed that are common to more than one *BSD system, it must be
done inside <path>bsdmk.eclass</path>.
</p>

<p>
The eclass exports the basic <c>src_compile</c> and <c>src_install</c> function
that are used by almost every Gentoo/FreeBSD system package. They are mainly
just the functions from bsdmk eclass, but they add the support for the always
present <c>NOPROFILE=</c> knob, that is used to avoid building profiled
libraries and binaries for all the system (this allows to save space on disk, as
the profiled libraries and binaries are mostly used for performance evaluation
and have no use for end users).
</p>

<note>
The <c>-fomit-frame-pointer</c> flag, that is commonly usd on x86 boxes to free
an extra register, makes profiling impossible, sometimes breaking the build
process, too. For this reason, when the profile useflag is enabled, that cflag
is filtered out.
</note>

<p>
What most differentiate <path>freebsd.eclass</path> from
<path>bsdmk.eclass</path> is the <c>src_unpack</c> function (missing from bsdmk)
that, on freebsd eclass, takes care of many tasks common to almost all the
packages.
</p>

<p>
First of all, it extract the tarballs, as there might be more than one tarball
for a FreeBSD package (they usually cross-reference files, as they are designed
to be compiled from a single directory). Then it patches the sources with the
patches defind in <c>${PATCHES}</c> variable. After that, it uses
<c>dummy_mk</c> function to disable the directories listed in
<c>${REMOVE_SUBDIRS}</c> variable.
</p>

<p>
The final step in unpack process is renaming the libraries. As there are some
differences between the library names in FreeBSD and upstream ones, all the
libraries, such as ncurses and libfl (from flex) that have different names,
are being replaced inside the Makefiles.
</p>

</body>
</section>

</chapter>

</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; indent-mode normal; -->
