<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/gentoo-alt/prefix/Attic/bootstrap-macos.xml,v 1.26 2008/02/21 16:46:27 grobian Exp $ -->

<guide link="/proj/en/gentoo-alt/prefix/bootstrap-macos.xml" lang="en">
  <title>Gentoo Prefixed Portage Bootstrap Process for Mac OS X</title>
  

  <author title="Author">
    <mail link="grobian@gentoo.org">Fabian Groffen</mail>
  </author>

  <abstract>
    How to bootstrap Prefixed Portage on your Mac OS X system
  </abstract>


  <!-- The content of this document is licensed under the CC-BY-SA license -->
  <!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
  <license/>

  <version>1.7</version>
  <date>2008-02-21</date>

  <chapter>
    <title>Bootstrapping on OS X</title>

    <section><!-- {{{ Introduction -->
      <title>Introduction</title>
      <body>
        <p>
          Apple Mac OS X was initially supported in the main Gentoo
          portage tree with the ppc-macos keyword.  The approach taken
          then, however, resulted in too many problems, which was the
          drive behind creating prefixed portage.
        </p>
        <p>
          Bootstrapping on OS X is relatively simple, as the system
          itself provides most of the tools get up to speed quickly.
          Prefixed Portage is tested and supported on Mac OS X Tiger and
          Leopard on PPC and x86 architectures.  Tests on PPC Panther
          were successful, but the platform itself isn't fully
          supported any more.
        </p>
      </body>
    </section><!-- }}} -->

    <section><!-- {{{ Bootstrapping -->
      <title>Bootstrapping</title>
      <body>
        <p>
          As prerequisite, you have to have latest Xcode installed.
          Xcode provides the compiler collection.  Bootstrapping is not
          (yet) supported without it.  If you don't have the latest
          Xcode installed and run into trouble, you can try
          <c>gcc_select 3.3</c> as root.
        </p>
        <p>
          The first step is to choose a path to install into.  We refer
          to this path as "prefix path", stored in the variable
          <c>EPREFIX</c>.  Some suggestions for your prefix path are
          <path>$HOME/Gentoo</path> or <path>$HOME/Library/Gentoo</path>.
          Whatever you chose, make sure you set it in your environment:
        </p>
        <pre caption="Export EPREFIX variable">
$ <i>export EPREFIX="$HOME/Gentoo"</i>
        </pre>
        <note>
          tcsh users can use <c>setenv EPREFIX "$HOME/Gentoo"</c>
          instead.
        </note>
        <p>
          Next, add the following paths in your soon to be prefix to
          your <c>PATH</c> environment.
          <path>$EPREFIX/bin</path>,
          <path>$EPREFIX/usr/bin</path>,
          <path>$EPREFIX/tmp/bin</path> and
          <path>$EPREFIX/tmp/usr/bin</path>.
          Adding these paths makes sure that they will be available
          later on in the process.
        </p>
        <pre caption="Add prefix paths to your PATH">
$ <i>export PATH="$EPREFIX/usr/bin:$EPREFIX/bin:$EPREFIX/tmp/usr/bin:$EPREFIX/tmp/bin:$PATH"</i>
        </pre>
        <p>
          Now the path is set, start with downloading the bootstrap
          script from
          <uri>http://overlays.gentoo.org/proj/alt/browser/trunk/prefix-overlay/scripts/bootstrap-prefix.sh?format=txt</uri>.
          From the directory where the bootstrap script was stored execute
          the following commands:
        </p>
        <pre caption="Use the bootstrap script">
$ <i>chmod 755 bootstrap-prefix.sh</i>
$ <i>./bootstrap-prefix.sh $EPREFIX tree</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp wget</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp tar</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp sed</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp python</i> (10.5: see note!)
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp gawk</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp findutils</i>
$ <i>./bootstrap-prefix.sh $EPREFIX portage</i>
        </pre>
        <note>Mac OS X Leopard (10.5) users should <b>NOT</b> bootstrap
          python!  It fails to compile and is not necessary.</note>
        <note>Please note that <c>wget</c>, <c>sed</c>, <c>python</c>,
          etc. are installed in <path>$EPREFIX/tmp</path>!</note>
        <p>
          The script will setup the <path>$EPREFIX</path>
          directory, download a portage tree snapshot, unpack it and
          download and install portage.  Afterwards it will try to setup
          some sane defaults.  We continue with a little hack necessary
          for a successful bootstrap:
        </p>
        <pre caption="Setup ld directions">
$ <i>export LDFLAGS="-Wl,-search_paths_first -L${EPREFIX}/usr/lib -L${EPREFIX}/lib"</i>
$ <i>export CPPFLAGS="-I${EPREFIX}/usr/include"</i>
        </pre>
        <note>
          The <c>-search_paths_first</c> flag is OSX/odcctools only.  It
          instructs the linker to look first in the provided paths, then
          if that fails in the system (default) paths.  This is the
          default behaviour for many other linkers, including GNU
          binutils' one as used on Linux.
        </note>
        <p>
          Because we installed some new applications, we will instruct
          bash to reconsider all paths we have:
        </p>
        <pre caption="rehash in bash">
$ <i>hash -r</i>
        </pre>
        <note>
          tcsh users can use the <c>rehash</c> command.
        </note>
        <p>
          We continue adding some necessary tools which will deal with
          many errors and warnings you might see during emerging.
        </p>
        <pre caption="emerge sed">
$ <i>emerge --oneshot sed</i>
        </pre>
        <p>
          Next, we emerge the <c>bash</c> shell Portage heavily relies
          on.  Since its dependencies cannot be compiled at this stage,
          we ignore those for the moment.  The same holds for
          <c>wget</c> which we emerge at the same time.
        </p>
        <pre caption="emerge bash and wget">
$ <i>emerge --oneshot --nodeps "&lt;bash-3.2_p33"</i>
$ <i>emerge --oneshot --nodeps wget</i>
        </pre>
        <p>
          We continue getting more tools in our prefix.  We no longer
          ignore dependencies, so a lot of packages will be emerged at
          this stage.  Slowly our prefix gets more robust as we progress
          here.
        </p>
        <pre caption="emerge several tools">
$ <i>emerge --oneshot coreutils</i>
$ <i>emerge --oneshot findutils</i>
$ <i>emerge --oneshot tar</i>
$ <i>emerge --oneshot grep</i>
$ <i>emerge --oneshot gawk</i>
        </pre>
        <p>
          Now we have a good bunch of programs that Portage needs, we
          can replace the bootstrapped Portage by a properly installed
          one, using portage itself.  We need to temporarily tell
          Portage that the bootstrapped Portage can be overwritten.
        </p>
        <pre caption="emerge portage">
$ <i>env FEATURES="-collision-protect" emerge --oneshot portage</i>
        </pre>
        <p>
          Some, if not many, scripts and tools within a Gentoo system
          assume the availability of the <c>baselayout</c> package.  We
          make sure here we have it, for this reason.  In fact, it would
          be emerged too late if we wouldn't do it manually now:
        </p>
        <pre caption="emerge baselayout-prefix">
$ <i>emerge --oneshot baselayout-prefix</i>
        </pre>
        <p>
          Now we have emerged everything we bootstrapped before, we
          remove the temporary directory and its use as it is no longer
          necessary.
        </p>
        <pre caption="remove tmp directory">
$ <i>rm -Rf $EPREFIX/tmp/*</i>
$ <i>hash -r</i>
        </pre>
        <p>
          Before we do any further merges, we are going to update our
          tree.  Since snapshots in prefix are actually (anonymous) SVN
          checkouts of the tree, we need <c>subversion</c> to update it.
        </p>
        <pre caption="emerge subversion">
$ <i>emerge --oneshot subversion</i>
        </pre>
        <p>
          Because Portage knows how to deal with the SVN tree, and the
          bootstrap script has set a correct <c>SYNC</c> variable in
          your <path>etc/make.conf</path>, updating the tree is done
          using:
        </p>
        <pre caption="Updating the tree">
$ <i>emerge --sync</i>
        </pre>
        <note>
          The prefix portage tree assumes a <e>case-sensitive
            filesystem</e>.  Mac OS X doesn't use this by default.  If
          you experience weird errors while updating or checking out
          the prefix tree with subversion, check if your filesystem is
          case-sensitive.
        </note>
        <p>
          Next, we let Portage emerge all packages that complete a
          system install that we eventually need to finalise this prefix
          installation.
        </p>
        <pre caption="emerge system">
$ <i>emerge -u system</i>
        </pre>
        <p>
          Now is a good time to set the preferences for our soon to be
          prefix.  This includes customisations such as general
          <c>USE</c>-flags, <c>CFLAGS</c> and <c>MAKEOPTS</c> in
          <path>$EPREFIX/etc/make.conf</path>.  Be conservative with
          <c>CFLAGS</c>!  Note that the code below is an example, and is
          meant for inspiration only.
        </p>
        <pre caption="Customising the prefix installation - example">
$ <i>echo 'USE="unicode nls"' >> $EPREFIX/etc/make.conf</i>
$ <i>echo 'CFLAGS="-O2 -pipe &lt;my-cpu-flags&gt;"' >> $EPREFIX/etc/make.conf</i>
$ <i>echo 'CXXFLAGS="${CFLAGS}"' >> $EPREFIX/etc/make.conf</i>
        </pre>
        <note>
          You have to replace <c>&lt;my-cpu-flags&gt;</c> with something
          that matches your CPU.
          Intel-based Mac users (e.g. MacBook, CoreDuo) should at least
          have <c>-march=prescott</c> here to avoid compilation errors
          due to SSE instructions not being enabled.  Core2Duo users can
          use <c>-march=nocona</c>.  PPC users can use their CPU's alias
          to enable CPU specific tuning, e.g.  <c>-mcpu=G5
            -mtune=G5</c>.
        </note>
        <p>
          Since we have everything in place for a self-catered rebuild,
          we can unset all hacks we made to help the bootstrap process,
          and start the final stage to install the prefix system.  This
          final stage recompiles everything in the system, but now all
          packages can be compiled with tools from the prefix, instead
          of those from the host system.
        </p>
        <pre caption="Unsetting LDFLAGS and CPPFLAGS variables">
$ <i>unset LDFLAGS</i>
$ <i>unset CPPFLAGS</i>
$ <i>emerge -e system</i>
        </pre>
        <note>
          tcsh users can use <c>unsetenv LDFLAGS</c> and alike for
          <c>CPPFLAGS</c>.
        </note>
        <p>
          After <c>system</c> has emerged successfully, your prefix will
          be set up properly, and you can emerge the whichever tools you
          choose from the prefix tree.
        </p>
      </body>
    </section><!-- }}} -->

    <section><!-- {{{ Using the Prefix -->
      <title>Using the Prefix</title>
      <body>
        <p>
          To use your bootstrapped prefix environment, you best start a
          shell from the prefix, such that your path and other
          environment variables are set correctly.  To facilitate in
          this, a small helper script can be created by the bootstrap
          script.
        </p>
        <pre caption="Creating a start-script">
$ <i>cd $EPREFIX/usr/portage/scripts</i>
$ <i>./bootstrap-prefix.sh $EPREFIX startscript</i>
        </pre>
        <p>
          After running this, a script <c>startprefix</c> will be
          present in <c>$EPREFIX</c>.  You can freely move the script to
          e.g. your homedir for convenience.  Running the script will
          drop you into a prefix shell, where for example <c>emerge</c>
          is directly at your disposal.  Enjoy your prefix!
        </p>
      </body>
    </section>

  </chapter>

</guide>

<!-- vim: set expandtab ts=2 sw=2 foldmethod=marker foldenable spell spelllang=en_gb: -->
<!-- kate: space-indent on; indent-width 2; replace-tabs on; -->
