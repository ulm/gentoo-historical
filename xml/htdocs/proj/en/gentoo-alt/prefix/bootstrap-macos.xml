<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/gentoo-alt/prefix/Attic/bootstrap-macos.xml,v 1.59 2011/11/09 17:56:44 grobian Exp $ -->

<guide link="/proj/en/gentoo-alt/prefix/bootstrap-macos.xml" lang="en">
  <title>Gentoo Prefix Bootstrap Process for Mac OS X</title>
  

  <author title="Author">
    <mail link="grobian@gentoo.org">Fabian Groffen</mail>
  </author>

  <abstract>
    How to bootstrap Gentoo Prefix on your Mac OS X system
  </abstract>


  <!-- The content of this document is licensed under the CC-BY-SA license -->
  <!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
  <license/>

  <version>1.33</version>
  <date>2011-11-09</date>

  <chapter>
    <title>Bootstrapping on OS X</title>

    <section><!-- {{{ Introduction -->
      <title>Introduction</title>
      <body>
        <p>
          Apple Mac OS X was initially supported in the main Gentoo
          portage tree with the ppc-macos keyword.  The approach taken
          then, however, resulted in too many problems, which was the
          drive behind creating Prefixed Portage.
        </p>
        <p>
          Bootstrapping on OS X is relatively simple, as the system
          itself provides most of the tools get up to speed quickly.
          Gentoo Prefix is tested and supported on Mac OS X Tiger,
          Leopard and Snow Leopard on PPC and x86 architectures.
        </p>
      </body>
    </section><!-- }}} -->

    <section><!-- {{{ Bootstrapping -->
      <title>Bootstrapping</title>
      <body>
        <p>
          As prerequisite, you have to have the latest Xcode installed.
          Xcode provides the compiler collection.  Bootstrapping is not
          (yet) supported without it.  If you don't have the latest
          Xcode installed and run into trouble, try updating first.
        </p>
        <p>
          The first step is to choose a path to install into.  We refer
          to this path as "Prefix path", stored in the variable
          <c>EPREFIX</c>.  Some suggestions for your Prefix path are
          <path>$HOME/Gentoo</path> or <path>$HOME/Library/Gentoo</path>.
          Whatever you chose, make sure you set it in your environment:
        </p>
        <pre caption="Export EPREFIX variable">
$ <i>export EPREFIX="$HOME/Gentoo"</i>
        </pre>
        <note>
          tcsh users can use <c>setenv EPREFIX "$HOME/Gentoo"</c>
          instead.
        </note>
        <p>
          Next, add the following paths in your soon to be Prefix to
          your <c>PATH</c> environment.
          <path>$EPREFIX/bin</path>,
          <path>$EPREFIX/usr/bin</path>,
          <path>$EPREFIX/tmp/bin</path> and
          <path>$EPREFIX/tmp/usr/bin</path>.
          Adding these paths makes sure that they will be available
          later on in the process.
        </p>
        <pre caption="Add Prefix paths to your PATH">
$ <i>export PATH="$EPREFIX/usr/bin:$EPREFIX/bin:$EPREFIX/tmp/usr/bin:$EPREFIX/tmp/bin:$PATH"</i>
        </pre>
        <p>
          If you want to end up with a 64-bits native Prefix
          installation, then set your <c>CHOST</c> variable accordingly
          to <c>x86_64-apple-darwin9</c> for Leopard, or
          <c>x86_64-apple-darwin10</c> for Snow Leopard.  You
          <e>only</e> need to do this if you want a 64-bits native
          Prefix!
        </p>
        <p>
          Now the path is set, start with downloading the bootstrap
          script from
          <uri>http://overlays.gentoo.org/proj/alt/browser/trunk/prefix-overlay/scripts/bootstrap-prefix.sh?format=txt</uri>.
          From the directory where the bootstrap script was stored execute
          the following commands:
        </p>
        <pre caption="Use the bootstrap script">
$ <i>chmod 755 bootstrap-prefix.sh</i>
$ <i>./bootstrap-prefix.sh $EPREFIX tree</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp make</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp wget</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp sed</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp python</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp coreutils6</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp findutils</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp tar15</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp patch9</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp grep</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp gawk</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp bash</i>
$ <i>./bootstrap-prefix.sh $EPREFIX portage</i>
        </pre>
        <note>
          Please note that <c>wget</c>, <c>sed</c>, <c>python</c>, etc.
          are installed in <path>$EPREFIX/tmp</path>!
        </note>
        <p>
          The script will setup the <path>$EPREFIX</path>
          directory, download a portage tree snapshot, unpack it and
          download and install portage.  Afterwards it will try to setup
          some sane defaults.
          Because we installed some new applications, we will instruct
          bash to reconsider all paths we have:
        </p>
        <pre caption="rehash in bash">
$ <i>hash -r</i>
        </pre>
        <note>
          tcsh users can use the <c>rehash</c> command.
        </note>
        <p>
          We continue adding some necessary tools which will deal with
          many errors and warnings you might see during emerging.
        </p>
        <pre caption="emerge sed">
$ <i>emerge --oneshot sed</i>
        </pre>
        <p>
          Next, we emerge the <c>bash</c> shell Portage heavily relies
          on.  The same holds for <c>wget</c>, the download manager.
          Since its dependencies cannot be compiled at this stage,
          we ignore those for the moment.  Pax-utils allow Portage to
          examine the binaries it installs for correctness.
        </p>
        <pre caption="emerge bash, pax-utils and wget">
$ <i>emerge --oneshot --nodeps bash</i> (avoid deps which install scripts with shebang /bin/sh)
$ <i>emerge --oneshot pax-utils</i>
$ <i>emerge --oneshot --nodeps xz-utils</i>
$ <i>emerge --oneshot --nodeps wget</i>
        </pre>
        <note>
          It is safe to ignore the "1 config files in XXX need updating"
          message that appears till the end of the bootstrap process.
        </note>
        <p>
          Now, we will emerge a compiler and linker, setup to make use
          of the Gentoo Prefix environment.  The packages to emerge
          include the <c>baselayout</c> package.  Some, if not many,
          scripts and tools within a Gentoo system assume the
          availability of the <c>baselayout</c> package for all
          communication using the Gentoo colour scheme.
        </p>
        <pre caption="emerge prerequisites for compiler and linker">
$ <i>emerge --oneshot --nodeps baselayout-prefix</i>
$ <i>emerge --oneshot --nodeps m4</i>
$ <i>emerge --oneshot --nodeps flex</i>
$ <i>emerge --oneshot --nodeps bison</i>
$ <i>emerge --oneshot --nodeps binutils-config</i>
        </pre>
        <p>
          Due to different versions of Xcode, the following step
          requires some close watch to the output of <c>gcc
            --version</c>.  If the first line reports a version <e>
            4.2.1</e>, the latest binutils-apple needs to be emerged,
          otherwise, version should report <e>4.0.1</e> and
          <c>=binutils-apple-3.2</c> must be emerged.
        </p>
        <pre caption="emerge linker">
$ <i>emerge --oneshot --nodeps "=binutils-apple-3.2"</i> (for gcc 4.0.1)
$ <i>emerge --oneshot --nodeps binutils-apple</i>    (for gcc 4.2.1)
        </pre>
        <p>
          Now continue with the compiler.
        </p>
        <pre caption="emerge compiler">
$ <i>emerge --oneshot --nodeps gcc-config</i>
$ <i>emerge --oneshot --nodeps gcc-apple</i>
        </pre>
        <p>
          We continue getting more tools in our Prefix.  We no longer
          ignore dependencies all the time, so a lot of packages will be
          emerged at this stage.  Slowly our Prefix gets more robust as
          we progress here.
        </p>
        <pre caption="emerge several tools">
$ <i>emerge --oneshot coreutils</i>
$ <i>emerge --oneshot findutils</i>
$ <i>emerge --oneshot tar</i>
$ <i>emerge --oneshot grep</i>
$ <i>emerge --oneshot patch</i>
$ <i>emerge --oneshot gawk</i>
$ <i>emerge --oneshot make</i>
$ <i>emerge --oneshot --nodeps file</i>
$ <i>emerge --oneshot --nodeps eselect</i>
        </pre>
        <p>
          Now we have a good bunch of programs that Portage needs, we
          can replace the bootstrapped Portage by a properly installed
          one, using Portage itself.  Also here a few dependencies are
          first emerged, such as the language Portage is written in:
          <c>python</c>.  We need to temporarily tell Portage that the
          bootstrapped Portage can be overwritten.
        </p>
        <pre caption="emerge portage">
$ <i>env FEATURES="-collision-protect" emerge --oneshot portage</i>
        </pre>
        <p>
          Now we have emerged everything we bootstrapped before, we
          remove the temporary directory and its use as it is no longer
          necessary.
        </p>
        <pre caption="remove tmp directory">
$ <i>rm -Rf $EPREFIX/tmp/*</i>
$ <i>hash -r</i>
        </pre>
        <p>
          Before we do any further merges, we are going to update our
          tree.  Updating the tree is done using:
        </p>
        <pre caption="Updating the tree">
$ <i>emerge --sync</i>
        </pre>
        <p>
          Next, we let Portage emerge all packages that complete a
          system install that we eventually need to finalise this Prefix
          installation.
        </p>
        <pre caption="emerge system">
$ <i>USE=-git emerge -u system</i>
        </pre>
        <p>
          Now is a good time to set the preferences for our soon to be
          Prefix.  This includes customisations such as general
          <c>USE</c>-flags, <c>CFLAGS</c> and <c>MAKEOPTS</c> in
          <path>$EPREFIX/etc/make.conf</path>.  Be conservative with
          <c>CFLAGS</c>!  Note that the code below is an example, and is
          meant for inspiration only.
        </p>
        <pre caption="Customising the Prefix installation - example">
$ <i>echo 'USE="unicode nls"' >> $EPREFIX/etc/make.conf</i>
$ <i>echo 'CFLAGS="-O2 -pipe &lt;my-cpu-flags&gt;"' >> $EPREFIX/etc/make.conf</i>
$ <i>echo 'CXXFLAGS="${CFLAGS}"' >> $EPREFIX/etc/make.conf</i>
        </pre>
        <note>
          You have to replace <c>&lt;my-cpu-flags&gt;</c> with something
          that matches your CPU.
          Intel-based Mac users (e.g. MacBook, CoreDuo) should at least
          have <c>-march=prescott</c> here to avoid compilation errors
          due to SSE instructions not being enabled.  Core2Duo users can
          use <c>-march=nocona</c>.  PPC users can use their CPU's alias
          to enable CPU specific tuning, e.g.  <c>-mcpu=G5
            -mtune=G5</c>.
        </note>
        <p>
          Since we have everything in place for a self-catered rebuild,
          we can start the final stage to install the Prefix system.
          This final stage recompiles everything in the system, but now
          all packages can be compiled with tools from the Prefix,
          instead of those from the host system.
        </p>
        <pre caption="doing the final system installation">
$ <i>emerge -e system</i>
        </pre>
        <p>
          After <c>system</c> has emerged successfully, your Prefix will
          be set up properly, and you can emerge the whichever tools you
          choose from the Prefix tree.
        </p>
      </body>
    </section><!-- }}} -->

    <section><!-- {{{ Using the Prefix -->
      <title>Using the Prefix</title>
      <body>
        <p>
          To use your bootstrapped Prefix environment, you best start a
          shell from the Prefix, such that your path and other
          environment variables are set correctly.  To facilitate in
          this, a small helper script can be created by the bootstrap
          script.
        </p>
        <pre caption="Creating a start-script">
$ <i>cd $EPREFIX/usr/portage/scripts</i>
$ <i>./bootstrap-prefix.sh $EPREFIX startscript</i>
        </pre>
        <p>
          After running this, a script <c>startprefix</c> will be
          present in <c>$EPREFIX</c>.  You can freely move the script to
          e.g. your homedir for convenience.  Running the script will
          drop you into a Prefix shell, where for example <c>emerge</c>
          is directly at your disposal.  Enjoy your Prefix!
        </p>
      </body>
    </section>

  </chapter>

</guide>

<!-- vim: set expandtab ts=2 sw=2 foldmethod=marker foldenable spell spelllang=en_gb: -->
<!-- kate: space-indent on; indent-width 2; replace-tabs on; -->
