<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/gentoo-alt/prefix/bootstrap.xml,v 1.11 2006/11/13 21:53:14 grobian Exp $ -->

<guide link="/proj/en/gentoo-alt/prefix/bootstrap.xml" lang="en">
  <title>Gentoo Prefixed Portage Techdocs</title>

  <author title="Author">
    <mail link="grobian@gentoo.org">Fabian Groffen</mail>
  </author>

  <abstract>
    How to bootstrap Prefixed Portage on your system
  </abstract>


  <!-- The content of this document is licensed under the CC-BY-SA license -->
  <!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
  <license/>

  <version>1.1</version>
  <date>2006-11-13</date>

  <chapter>
    <title>Bootstrapping in general</title>

    <section><!-- {{{ Global -->
      <title>Global</title>
      <body>

        <p>
          Bootstrapping is the process to get Prefixed Portage installed
          on your system.  Although we currently only have an in-depth
          description of how to bootstrap on OSX systems, these
          instructions in general work on other systems too.  Examples
          are RedHat Linux Enterprise Server for Itanium and Fedora Core
          4 on AMD64.
        </p>

      </body>
    </section><!-- }}} -->

    <section><!-- {{{ bootstrap script -->
      <title>Bootstrap script</title>
      <body>

        <p>
          The <c>bootstrap-prefix.sh</c> scripts is a kickstart in
          the bootstrap process: it automates downloading a portage
          tree, installing portage and the necessary temporary helper
          apps, and tries to setup a profile and some settings where it
          can.
        </p>

      </body>
    </section><!-- }}} -->

  </chapter>

  <chapter>
    <title>Bootstrapping on OS X</title>

    <section><!-- {{{ Introduction -->
      <title>Introduction</title>
      <body>
        <p>
          Apple Mac OS X was initially supported in the main Gentoo
          portage tree with the ppc-macos keyword.  The approach taken
          then, however, resulted in too much problems, which were the
          drive behind creating prefixed portage.
        </p>
        <p>
          Bootstrapping on OS X is relatively simple, as the system
          itself provides most of the tools get up to speed quickly.
          Prefixed Portage is tested and supported on Mac OS X Tiger on
          PPC and x86 architectures.  Tests on PPC Panther were
          successful, but the platform itself isn't fully supported.
        </p>
      </body>
    </section><!-- }}} -->

    <section><!-- {{{ Bootstrapping -->
      <title>Bootstrapping</title>
      <body>
        <p>
          As prerequisite, you have to have Xcode installed, in order to
          have a compiler.  Without a compiler, bootstrapping is not
          (yet) supported.
        </p>
        <p>
          The first step is to chose a path to install into.  We refer
          to this path as "prefix path", and use
          <path>/Library/Gentoo</path>.  Everywhere you see this path,
          replace it with your own choice.  Prepend a few paths in this
          prefix to your <c>PATH</c> environment variable to make them
          available later on in the process.  While this seems a bit
          premature at this stage, it is absolutely necessary for users
          without Python 2.3.1 or higher.  Add the following paths:
          <path>/Library/Gentoo/tmp/bin</path>,
          <path>/Library/Gentoo/tmp/usr/bin</path>,
          <path>/Library/Gentoo/bin</path> and
          <path>/Library/Gentoo/usr/bin</path>.  For example for a
          <c>bash</c> shell:
        </p>
        <pre caption="Add prefix paths to your PATH">
$ <i>export PATH="/Library/Gentoo/tmp/bin:/Library/Gentoo/tmp/usr/bin:/Library/Gentoo/bin:/Library/Gentoo/usr/bin:$PATH"</i>
        </pre>
        <p>
          Now the path is set, start with downloading the bootstrap
          script from
          <uri>http://overlays.gentoo.org/proj/alt/browser/trunk/prefix-overlay/scripts/bootstrap-prefix.sh?format=txt</uri>.
          From the point where the bootstrap script is stored execute
          the following commands:
        </p>
        <pre caption="Use the bootstrap script">
$ <i>chmod 755 bootstrap-prefix.sh</i>
$ <i>./bootstrap-prefix.sh /Library/Gentoo tree</i>
$ <i>./bootstrap-prefix.sh /Library/Gentoo/tmp wget</i>
$ <i>./bootstrap-prefix.sh /Library/Gentoo/tmp sed</i>
<comment>(the following is only for Panther users a requirement)</comment>
$ <i>./bootstrap-prefix.sh /Library/Gentoo/tmp python</i>
$ <i>./bootstrap-prefix.sh /Library/Gentoo portage</i>
        </pre>
        <note>Please note that <c>wget</c>, <c>sed</c> and <c>python</c> are
          installed in <path>/Library/Gentoo/tmp</path>!</note>
        <warn><c>python</c> only has to be emerged for Panther
          users</warn>
        <p>
          The script will setup the <path>/Library/Gentoo</path>
          directory, download a portage tree snapshot, unpack it and
          download and install portage.  Afterwards it will try to setup
          some sane defaults.  On OS X this always successfully
          finishes.
        </p>
        <p>
          Next, we have to enable the binaries we installed in the
          <path>tmp</path> directory of our prefix:
        </p>
        <pre caption="change DEFAULT_PATH">
$ <i>sed -i -e '/DEFAULT_PATH/s|="|="/Library/Gentoo/tmp/bin:/Library/Gentoo/tmp/usr/bin:|' /Library/Gentoo/etc/make.conf</i>
        </pre>
        <p>
          The next step is to forcefully install some packages to make
          sure that all ebuilds from system will succeed.  First update
          to the latest <c>portage</c> version, overwriting the one
          bootstrap installed:
        </p>
        <pre caption="emerge portage">
$ <i>env FEATURES="-collision-protect" emerge --nodeps portage</i>
        </pre>
        <p>
          We continue adding some necessary tools which will deal with
          many errors and warnings you might see during emerging.
        </p>
        <pre caption="emerge sed">
$ <i>emerge sed</i>
        </pre>
        <p>
          We continue getting some autotools stuff into our prefix.
        </p>
        <pre caption="emerge autotools">
$ <i>emerge --nodeps "=autoconf-2.13*" "=autoconf-2.59*" "autoconf-wrapper"</i>
$ <i>emerge --nodeps "=automake-1.4*" "=automake-1.5*" "=automake-1.6*" "=automake-1.7*" "=automake-1.8*" "=automake-wrapper-1*"</i>
        </pre>
        <note><c>automake-1.9</c> and <c>libtool</c> are not (yet)
          installed at this stage.</note>
        <p>
          Next, we have to get some tools in order to finalise getting
          the autotools in our prefix.  Because we installed <c>wget</c>
          in a temporary location, let's not forget to install it
          properly by emerging it now:
        </p>
        <pre caption="emerge wget">
$ <i>emerge --nodeps wget</i>
        </pre>
        <p>
          After this we can emerge texinfo, which <c>automake-1.9</c>
          needs.
        </p>
        <pre caption="emerge texinfo">
$ <i>emerge --nodeps texinfo</i>
        </pre>
        <p>
          Now we can finish installing the autotools:
        </p>
        <pre caption="finalise emerge autotools">
$ <i>emerge --nodeps "=automake-1.9*"</i>
$ <i>emerge --nodeps libtool</i>
        </pre>
        <p>
          Now we have some decent autotooling stuff around, we can get
          some decent core utilities in our prefix.
        </p>
        <pre caption="emerge coreutils">
$ <i>emerge --nodeps coreutils</i>
        </pre>
        <p>
          Finally, we get GNU <c>awk</c>, as most ebuild expect this
          <c>awk</c> when they use it.
        </p>
        <pre caption="emerge gawk">
$ <i>emerge gawk</i>
        </pre>
        <p>
          All packages before (and including) coreutils generate some
          errors like about xargs not understanding all its arguments.
          After coreutils this issue is fixed, as coreutils provides the
          versions of these tools that portage expects ;)
        </p>
        <p>
          Now we are almost ready to continue with the first <c>emerge
            system</c>.  But before we do, we have to remove the stuff
          installed in the temporary directory in the prefix.  For
          Panther users this means that Python will disappear, hence it
          has to be emerged in the prefix first.  Because the system is
          not yet set up correctly, a few correcting measures have to be
          taken afterwards:
        </p>
        <pre caption="emerge python">
<comment>(these steps are only required for Panther users)</comment>
$ <i>emerge --nodeps python</i>
$ <i>( cd /Library/Gentoo/usr/bin &amp;&amp; ln -s python2.4 python )</i>
$ <i>sed -i -e 's|^#!/Library/Gentoo/tmp/usr/bin/python|#!/Library/Gentoo/usr/bin/python|' /Library/Gentoo/usr/bin/emerge</i>
        </pre>
        <p>
          We remove the temporary directory and its use:
        </p>
        <pre caption="remove tmp directory">
$ <i>rm -Rf /Library/Gentoo/tmp/*</i>
$ <i>sed -i -e '/DEFAULT_PATH/s|/Library/Gentoo/tmp/bin:/Library/Gentoo/tmp/usr/bin:||' /Library/Gentoo/etc/make.conf</i>
$ <i>export PATH=`echo $PATH | sed 's|/Library/Gentoo/tmp/bin:/Library/Gentoo/tmp/usr/bin:||'`</i>
        </pre>
        <p>
          Next, we do the real work where all packages get reemerged in
          such an order that they make use of packages in the prefix
          itself.
        </p>
        <pre caption="emerge system">
$ <i>emerge -e system</i>
        </pre>
        <p>
          This will happily install a lot of stuff and reinstall what
          you emerged before.  This is necessary to avoid compilation
          failures due to dependencies.
        </p>
        <p>
          Since we have some basic stuff now, we might want to benefit
          from an updated tree.  To use it, emerge <c>subversion</c>:
        </p>
        <pre caption="emerge subversion">
$ <i>emerge subversion</i>
        </pre>
        <p>
          We can now update the tree.  Since the snapshots are actually
          (anonymous) SVN checkouts of the tree, we can immediately use
          SVN commands on the tree instead of checking a tree out first.
          Because Portage knows how to deal with the SVN tree, and the
          bootstrap script has set a correct <c>SYNC</c> variable in
          your <path>etc/make.conf</path>, updating the tree is done
          using:
        </p>
        <pre caption="Updating the tree">
$ <i>emerge --sync</i>
        </pre>
        <note>
          The prefix portage tree assumes a <e>case-sensitive
            filesystem</e>.  Mac OS X doesn't use this by default.  If
          you experience weird errors while updating or checking out
          the prefix tree with subversion, check if your filesystem is
          case-sensitive.
        </note>
        <p>
          After emerging system, to do it really right, one should
          re-emerge system, because now all packages can be compiled
          with all tools from the prefix, instead of based on tools in
          the system root.  Before you do, this is the right moment to
          set general <c>USE</c>-flags, such as <c>nls</c> to get
          localised messages in
          <path>/Library/Gentoo/etc/make.conf</path>.  In that file, you
          can also set <c>CFLAGS</c> for your compilation.  Be
          conservative with <c>CFLAGS</c>!
        </p>
        <pre caption="Customising the prefix installation">
$ <i>echo 'USE="unicode nls"' >> /Library/Gentoo/etc/make.conf</i>
$ <i>echo 'CFLAGS="-O2 -pipe -mcpu=G5"' >> /Library/Gentoo/etc/make.conf</i>
$ <i>emerge -e system</i>
        </pre>
        <p>
          When you successfully came to this point, your prefix is set
          up properly, and you can emerge the tools you want, available
          in the prefix tree.
        </p>
      </body>
    </section><!-- }}} -->

  </chapter>

</guide>

<!-- vim: set expandtab ts=2 sw=2 foldmethod=marker foldenable: -->
<!-- kate: space-indent on; indent-width 2; replace-tabs on; -->
