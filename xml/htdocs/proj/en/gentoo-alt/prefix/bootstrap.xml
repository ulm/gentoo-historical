<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/gentoo-alt/prefix/bootstrap.xml,v 1.7 2006/10/20 08:40:59 grobian Exp $ -->

<guide link="/proj/en/gentoo-alt/prefix/bootstrap.xml" lang="en">
  <title>Gentoo Prefixed Portage Techdocs</title>

  <author title="Author">
    <mail link="grobian@gentoo.org">Fabian Groffen</mail>
  </author>

  <abstract>
    How to bootstrap Prefixed Portage on your system
  </abstract>


  <!-- The content of this document is licensed under the CC-BY-SA license -->
  <!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
  <license/>

  <version>1.0</version>
  <date>2006-10-18</date>

  <chapter>
    <title>Bootstrapping in general</title>

    <section><!-- {{{ Global -->
      <title>Global</title>
      <body>

        <p>
          what is the main idea, what do we want to achieve?
        </p>

      </body>
    </section><!-- }}} -->

    <section><!-- {{{ bootstrap script -->
      <title>Bootstrap script</title>
      <body>

        <p>
          where can you find it,
          what platforms does it work on,
          where to go if you have a new platform
        </p>

      </body>
    </section><!-- }}} -->

  </chapter>

  <chapter>
    <title>Bootstrapping on OS X</title>

    <section><!-- {{{ Introduction -->
      <title>Introduction</title>
      <body>
        <p>
          Apple Mac OS X was initially supported in the main Gentoo
          portage tree with the ppc-macos keyword.  The approach taken
          then, however, resulted in too much problems, which were the
          drive behind creating prefixed portage.
        </p>
        <p>
          Bootstrapping on OS X is relatively simple, as the system
          itself provides most of the tools get up to speed quickly.
          Prefixed Portage is tested and supported on Mac OS X Tiger on
          PPC and x86 architectures.  Tests on PPC Panther were
          successful, but the platform itself isn't fully supported.
        </p>
      </body>
    </section><!-- }}} -->

    <section><!-- {{{ Bootstrapping -->
      <title>Bootstrapping</title>
      <body>
        <p>
          As prerequisite, you have to have Xcode installed, in order to
          have a compiler.  Without a compiler, bootstrapping is not
          (yet) supported.
        </p>
        <p>
          First, download the bootstrap script from
          <uri>http://overlays.gentoo.org/proj/alt/browser/trunk/prefix-overlay/scripts/bootstrap-prefix.sh?format=txt</uri>.
          In this document we will use <path>/Library/Gentoo</path> as
          prefix, but you are free to chose this yourself.  From the
          point where the bootstrap script is stored execute the
          following commands:
        </p>
        <pre caption="Use the bootstrap script">
$ <i>chmod 755 bootstrap-prefix.sh</i>
$ <i>./bootstrap-prefix.sh /Library/Gentoo tree</i>
$ <i>./bootstrap-prefix.sh /Library/Gentoo portage</i>
$ <i>./bootstrap-prefix.sh /Library/Gentoo wget</i>
        </pre>
        <p>
          The script will setup the <path>/Library/Gentoo</path>
          directory, download a portage tree snapshot, unpack it and
          download and install portage.  Afterwards it will try to setup
          some sane defaults.  On OS X this always successfully
          finishes.
        </p>
        <p>
          At this point it might be handy to prepend
          <path>/Library/Gentoo/bin</path> and
          <path>/Library/Gentoo/usr/bin</path> to your <c>PATH</c>,
          otherwise emerge won't be available, e.g.:
        </p>
        <pre caption="Add prefix paths to your PATH">
$ <i>export PATH="/Library/Gentoo/bin:/Library/Gentoo/usr/bin:$PATH"</i>
        </pre>
        <p>
          The next step is to forcefully install some packages to make
          sure that all ebuilds from system will succeed.  First update
          to the latest <c>portage</c> version, overwriting the one
          bootstrap installed:
        </p>
        <pre caption="emerge portage">
$ <i>env FEATURES="-collision-protect" emerge --nodeps portage</i>
        </pre>
        <p>
          Next, because we injected <c>wget</c>, let's also get it in
          the prefix.  On Panther this will fail, and you'll have to do
          it after emerging of autotools below.
        </p>
        <pre caption="emerge wget">
$ <i>env FEATURES="-collision-protect" emerge --nodeps wget</i>
        </pre>
        <p>
          From this point our prefix should be clean from any "foreign"
          files.  We continue adding some necessary tools which
          will deal with the many errors and warnings you might have
          seen during emerging.
        </p>
        <pre caption="emerge sed">
$ <i>emerge =sed-4.1.4-r1</i>
$ <i>emerge -u sed</i>
        </pre>
        <p>
          Here, we have to emerge <c>4.1.4-r1</c> first, because later versions
          need a better sed then OS X by default has.
        </p>
        <p>
          We continue getting some autotools stuff into our prefix.
        </p>
        <pre caption="emerge autotools">
$ <i>emerge --nodeps "=autoconf-2.13*" "=autoconf-2.59*" "autoconf-wrapper"</i>
$ <i>emerge --nodeps "=automake-1.4*" "=automake-1.5*" "=automake-1.6*" "=automake-1.7*" "=automake-1.8*" "=automake-1.9*" "=automake-wrapper-1*"</i>
$ <i>emerge --nodeps libtool</i>
        </pre>
        <p>
          On Panther <c>automake-1.9.6</c> fails.  Be sure <e>NOT</e>
          to emerge the <c>automake-wrapper</c> though, or else
          <c>libtool</c> won't compile either.  This is the right moment
          for Panther users to emerge <c>wget</c>.  After that, emerge
          <c>texinfo</c> and retry emerging <c>automake-1.9.6</c> and
          <c>automake-wrapper</c>.
        </p>
        <p>
          Now we have some decent autotooling stuff around, we can get
          some decent core utilities in our prefix.
        </p>
        <pre caption="emerge coreutils">
$ <i>emerge --nodeps coreutils</i>
        </pre>
        <p>
          Finally, we get GNU <c>awk</c>, as most ebuild expect this
          <c>awk</c> when they use it.
        </p>
        <pre caption="emerge gawk">
$ <i>emerge gawk</i>
        </pre>
        <p>
          All packages before (and including) coreutils generate some
          errors like about xargs not understanding all its arguments.
          After coreutils this issue is fixed, as coreutils provides the
          versions of these tools that portage expects ;)
        </p>
        <p>
          Now continue with the first <c>emerge system</c>:
        </p>
        <pre caption="emerge system">
$ <i>emerge -e system</i>
        </pre>
        <p>
          This will happily install a lot of stuff and reinstall what
          you emerged before.  This is necessary to avoid compilation
          failures due to dependencies.
          <!--  !! should be fixed by the -e
          You may encounter
          problems with <c>popt</c>.  They have something to do with
          <c>perl</c>.  Reemerging all <c>autoconf</c>s,
          <c>automake</c>s and <c>libtool</c>, fixes this.
          -->
        </p>
        <p>
          Since we have some basic stuff now, we might want to benefit
          from an updated tree.  To use it, emerge <c>subversion</c>: (we
          disable python, because we don't need it here)
        </p>
        <pre caption="emerge subversion">
$ <i>env USE="-python" emerge subversion</i>
        </pre>
        <p>
          Next, we will replace the portage tree with a SVN checkout:
        </p>
        <pre caption="Replace the tree snapshot">
$ <i>cd /Library/Gentoo/usr</i>
$ <i>svn co "http://overlays.gentoo.org/svn/proj/alt/trunk/prefix-overlay"</i>
$ <i>mv portage portage-snapshot</i>
$ <i>mv prefix-overlay portage</i>
$ <i>mv portage-snapshot/distfiles portage/</i>
$ <i>rm -R portage-snapshot</i>
        </pre>
        <p>
          Updating of the tree is now done using:
        </p>
        <pre caption="Updating the tree">
$ <i>svn update</i>
        </pre>
        <note>
          The prefix portage tree assumes a <e>case-sensitive
            filesystem</e>.  Mac OS X doesn't use this by default.  If
          you experience weird errors while updating our checking out
          the prefix tree with subversion, check if your filesystem is
          case-sensitive.
        </note>
        <p>
          After emerging system, to do it really right, one should
          re-emerge system, because now all packages can be compiled
          with all tools from the prefix, instead of based on tools in
          the system root.  Before you do, this is the right moment to
          set general <c>USE</c>-flags, such as <c>nls</c> to get
          localised messages in
          <path>/Library/Gentoo/etc/make.conf</path>.  In that file, you
          can also set <c>CFLAGS</c> for your compilation.  Be
          conservative with <c>CFLAGS</c>!
        </p>
        <pre caption="Customising the prefix installation">
$ <i>echo 'USE="unicode nls"' >> /Library/Gentoo/etc/make.conf</i>
$ <i>echo 'CFLAGS="-O2 -pipe -mcpu=G5"' >> /Library/Gentoo/etc/make.conf</i>
$ <i>emerge -e system</i>
        </pre>
        <p>
          When you successfully came to this point, your prefix is set
          up properly, and you can emerge the tools you want, available
          in the prefix tree.
        </p>
      </body>
    </section><!-- }}} -->

  </chapter>

</guide>

<!-- vim: set expandtab ts=2 sw=2 foldmethod=marker foldenable: -->
<!-- kate: space-indent on; indent-width 2; replace-tabs on; -->
