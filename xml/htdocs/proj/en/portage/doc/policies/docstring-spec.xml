<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/portage/doc/policies/docstring-spec.xml,v 1.2 2012/10/28 15:21:10 swift Exp $ -->

<guide lang="en">
<title>Portage Docstring Specification</title>

<author title="Author">
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>
<author title="Contributor">
  <mail link="genone@gentoo.org">Marius Mauch</mail>
</author>
<author title="Contributor">
  <mail link="zmedico@gentoo.org">Zach Medico</mail>
</author>
<author title="Contributor">
  <mail link="ferringb@gmail.com">Brian Harring</mail>
</author>
<author title="Contributor">
	<mail link="alextarkovsky@gmail.com">Alex Tarkovsky</mail>
</author>

<abstract>
This document is meant to serve as a proposal for the documentation of portage
code using epytext and custom doc blocks.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2006-07-19</date>

<chapter>
<title>Introduction</title>
<section>
<title>Motivation</title>
<body>

<p>
The motivation behind this proposal was the current lack of standardized
documentation for the portage API.  This makes it difficult for developers that
would like to somehow customize portage, or use the portage API for their own
custom scripts.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Implementation</title>
<section>
<title>Specification</title>
<body>

<p>
Portage code will be documented using the epydoc documentation system.  This
system was chosen as both portage developers and those interested in portage
API documentation were familiar with the tool.  It was also chosen as the main
implementor (the author) is comfortable with the system and how to use it.  The
following is an example of a docstring for the pkgcmp function:
</p>

<pre caption="Example pkgcmp docstring">
def pkgcmp(pkg1, pkg2):
	"""
	Compare 2 package versions created in pkgsplit format.

	Example usage:
		&gt;&gt;&gt; from portage_versions import *
		&gt;&gt;&gt; pkgcmp(pkgsplit('test-1.0-r1'),pkgsplit('test-1.2-r3'))
		-1
		&gt;&gt;&gt; pkgcmp(pkgsplit('test-1.3'),pkgsplit('test-1.2-r3'))
		1

	@param pkg1: package to compare with
	@type pkg1: list (example: ['test', '1.0', 'r1'])
	@param pkg2: package to compare againts
	@type pkg2: list (example: ['test', '1.0', 'r1'])
	@rtype: None or integer
	@return: 
		1. None if package names are not the same
		2. 1 if pkg1 is greater than pkg2
		3. -1 if pkg1 is less than pkg2 
		4. 0 if pkg1 equals pkg2
	"""
	if pkg1[0] != pkg2[0]:
		return None
	mycmp=vercmp(pkg1[1],pkg2[1])
	if mycmp&gt;0:
		return 1
	if mycmp&lt;0:
		return -1
	r1=string.atof(pkg1[2][1:])
	r2=string.atof(pkg2[2][1:])
	if r1&gt;r2:
		return 1
	if r2&gt;r1:
		return -1
	return 0
</pre>

</body>
</section>
<section>
<title>Docstring Breakdown</title>
<body>

<ul>
  <li><b>A short one sentence description of what the package does</b></li>
</ul>

<pre caption="Description">
Compare 2 package versions created in L{pkgsplit &lt;pkgsplit&gt;} format.
</pre>

<ul>
  <li>
    <b>(optional) Any additional paragraphs required to describe the function in
    more detail</b>
  </li>
</ul>

<pre caption="Additional Information">
This describes a more complex function.

More paragraphs here.
</pre>

<ul>
  <li><b>(optional) Example usage</b></li>
</ul>

<pre caption="Example Usage">
	Example usage:
		&gt;&gt;&gt; from portage_versions import *
		&gt;&gt;&gt; pkgcmp(pkgsplit('test-1.0-r1'),pkgsplit('test-1.2-r3'))
		-1
		&gt;&gt;&gt; pkgcmp(pkgsplit('test-1.3'),pkgsplit('test-1.2-r3'))
		1
</pre>

<ul>
  <li><b>Parameters</b></li>
</ul>

<p>
<e>Description of the parameter</e>
</p>

<pre caption="Parameter Description">
@param pkg1: package to compare with.
</pre>

<p>
<e>Type of the parameter</e>.  An example is required for types with a strict
format (format strings, strict lists, etc.).  If there are many types that can
be given, please gave at most 2.  If type is a custom object, it must be
referenced to in the format L{name &lt;package.object&gt;}
</p>

<pre caption="Parameter Type">
@type pkg1: list (example: ['test', '1.0', 'r1'])
</pre>

<ul>
  <li><b>Return Values</b></li>
</ul>

<p>
<e>The type of the return value</e>.  List all possible types returned.
</p>

<pre caption="Return Types">
@rtype: None or integer
</pre>

<p>
<e>More verbose description of the values returned</e>.  The numeric list format
must be used for more than one return type, where the types are different
and/or the types have a strict format.
</p>

<pre caption="Return Value Description">
	@return: 
		1. None if package names are not the same
		2. 1 if pkg1 is greater than pkg2
		3. -1 if pkg1 is less than pkg2 
		4. 0 if pkg1 equals pkg2
</pre>

</body>
</section>
<section>
<title>Backwards Compatibility</title>
<body>

<p>
Existing doc strings will be converted to the new format.
</p>

</body>
</section>
</chapter>
</guide>