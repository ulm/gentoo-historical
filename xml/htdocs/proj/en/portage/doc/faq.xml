<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/portage/doc/faq.xml,v 1.55 2014/02/17 07:39:18 vapier Exp $ -->

<guide lang="en">
<title>Portage Frequently Asked Questions (FAQ)</title>

<author title="Author">
  <mail link="antarus@gentoo.org">Alec Warner</mail>
</author>
<author title="Contributor">
  <mail link="zmedico@gentoo.org">Zac Medico</mail>
</author>
<author title="GuideXML">
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>

<abstract>
FAQ Frequently Asked Questions about Portage.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.1</version>
<date>2014-02-17</date>
<chapter>
<title>Frequently Asked Questions</title>

<section>
<title>
How can "blocks" between packages be resolved?
</title>
<body>
<p> See the <uri
link="http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?full=1#blocked">
Blocked Packages section in the Gentoo Handbook</uri>.
</p>
</body>
</section>

<section>
<title>Why is it that emerge does not update all packages?</title>
<body>

<p>
By default, the dependency graph may not include some packages. For example,
it will not include any packages that are listed in the output of
<c>emerge --pretend --depclean</c>. It will also not include any build time
dependencies for installed packages or binary packages. If you would like to
include such build time dependencies even though they are not strictly
required, use <c>--with-bdeps=y</c>. You can set
<c>EMERGE_DEFAULT_OPTS="--with-bdeps=y"</c> in <path>/etc/portage/make.conf</path> if
you would like this option to be enabled by default.
If you would like a specific package to be updated in any case, you can use
<c>emerge --noreplace &lt;atom&gt;</c> to have it added to the world set.
</p>
<p>
After running <c>emerge --deep --with-bdeps=y --update world</c>,
it is a good idea to
use <c>emerge --pretend --depclean</c> to see if there are any packages that
it would remove. If that command shows a package that you would like to keep,
use <c>emerge --noreplace &lt;atom&gt;</c> to have it added to the world set.
</p>
<warn>When you use <c>emerge --depclean</c> to remove unwanted packages, it is
a good idea to run <c>revdep-rebuild</c> (from the gentoolkit package)
afterwards.</warn>
<note>Run <c>man emerge</c> to view the manual page which documents all
<c>emerge</c> options.</note>

</body>
</section>

<section>
<title>
How can I check for reverse dependencies of a package,
to know if it can be safely uninstalled?
</title>
<body>

<p>
Run <c>emerge --depclean --pretend --verbose [atom]...</c> to see if there
are any reverse dependencies for matched packages.
</p>
<warn>When you use <c>emerge --depclean</c> to remove unwanted packages, it
is a good idea to run <c>revdep-rebuild</c> (from the gentoolkit package)
afterwards.</warn>
</body>
</section>

<section>
<title>
Why does emerge --depclean sometimes remove system packages?
</title>
<body>
<p>
For system dependencies that are specified as virtuals, such as
virtual/editor, it's common to have multiple packages installed that
are capable of satisfying the dependency. In this case, redundant
packages may be removed by <c>emerge --depclean</c> unless they are
explicitly added to the world set. You can use <c>emerge --noreplace
&lt;atom&gt;</c> to have a package added to the world set, and this
will guarantee that this package will not be removed by
<c>emerge --depclean</c>.
</p>
</body>
</section>

<section>
<title>
Why doesn't emerge account for reverse dependencies sometimes?
</title>
<body>
<p>
Complete accounting for reverse dependencies is time-consuming, and many
users would be likely to complain about poor performance if this was the
default behavior.
So, reverse dependencies will often be neglected by dependency
calculations unless the <c>emerge --complete-graph</c> option is enabled.
You can set <c>EMERGE_DEFAULT_OPTS="--complete-graph"</c> in
<path>/etc/portage/make.conf</path> if you would like this option to be enabled
by default. Refer to the <c>emerge</c> manual page (run <c>man emerge</c>)
for more information about the <c>--complete-graph</c> option.
</p>
</body>
</section>

<section>
<title>Can I mount the portage tree (/usr/portage) via NFS?</title>
<body>

<p>
It is possible to share the portage tree (<path>/usr/portage</path>) over NFS
so that <c>emerge --sync</c> only needs to be run on an NFS server. However,
even though NFS clients do not need to run <c>emerge --sync</c>, they must run
<c>emerge --metadata</c> each time that the portage tree
is updated since otherwise their dependency calculations will slow down due to
their metadata cache (located in <path>/var/cache/edb/dep</path>) becoming
stale.
</p>
<note>With versions of portage >=2.1.5_rc6 there is never any need to run
<c>emerge --metadata</c> as long as the user has not enabled
FEATURES="metadata-transfer" in make.conf. When metadata-transfer is disabled,
metadata cache from the <path>/usr/portage/metadata/cache/</path>
directory will be used directly. Run <c>man make.conf</c> to
learn more about metadata-transfer.
</note>
<p>
If you encounter
problems with an NFS setup it is important that you ensure you have the proper locking
daemons on both the NFS client machines and the NFS server machine.  Portage uses
hardlinks over NFS in an attempt to lock files; if the locking daemon fails to lock
files Portage may complain about failed or stale locks.  There is a script 
<path>/usr/lib/portage/bin/clean_locks</path> that can be used to clean out old lockfiles.
</p>

</body>
</section>

<section>
	<title>
	Why does emerge display "waiting for lock" messages?
	</title>
	<body>
		<p>
		The most common reason is due to <c>FEATURES="parallel-fetch"</c>
		which is enabled by default in
		<path>/usr/share/portage/config/make.globals</path>. Set
		<c>FEATURES="-parallel-fetch"</c> in <path>/etc/portage/make.conf</path>
		if you would like to disable this feature. Refer to the make.conf
		manual page (run <c>man make.conf</c>) for more information about
		<c>FEATURES</c>.
		</p>
		<p>
		If the <c>emerge</c> is invoked multiple times
		concurrently, or if <c>DISTDIR</c> is on a shared network
		file system, this may also trigger similar "waiting for lock"
		messages. Such locks are necessary in order to prevent
		interference between concurrently running processes.
		</p>
	</body>
</section>

<section>
	<title>
	Why does the @preserved-rebuild set contain packages that have
	already been rebuilt?
	</title>
	<body>
		<p>
		This is a <uri link="http://bugs.gentoo.org/show_bug.cgi?id=230257">
		common problem</uri> which indicates that the build system for the
		given ebuild causes the package to inappropriately link against the
		old (preserved) version of the library, instead of the new one. As a
		workaround, you can manually remove the old library (such as
		libreadline.so.5.2) and then run <c>revdep-rebuild</c> in order to
		rebuild the packages which linked against it. A list of all preserved
		libraries may be obtained from the command
		`<c>portageq list_preserved_libs /</c>`.
		</p>
	</body>
</section>

<section>
	<title>
		When packages are built in parallel with the --jobs option, why
		aren't some packages installed immediately after they have
		finished building? They are installed only after a long delay.
	</title>
	<body>
		<p>
			As a safety precaution, installation actions for system packages
			and their deep dependecies are executed only when no other
			packages are building. This behavior is required in order to avoid
			cases like
			<uri link="http://bugs.gentoo.org/show_bug.cgi?id=256616">
			bug 256616 (unspecified system dependencies)</uri> and
			<uri link="http://bugs.gentoo.org/show_bug.cgi?id=259954">
			bug 259954 (temporarily unsatisfied system dependencies)</uri>.
		</p>
	</body>
</section>

<section>
	<title>
		Why doesn't emerge --pretend output show the correct SLOT for a
		package with USE=multislot enabled?
	</title>
	<body>
		<p>
			Since ebuilds that support USE=multislot violate established rules
			about "constant metadata", cached SLOT value differs from the SLOT
			value that you will actually get once the package is installed.
			There is nothing portage can do about this except to implement an
			extension such as
			<uri link="http://bugs.gentoo.org/show_bug.cgi?id=174407">
			bug #174407</uri>.
		</p>
	</body>
</section>

<section>
<title>
How do I configure environment variable settings that apply only to specific
packages?
</title>
<body>
<p>
Put an entry such as "sys-libs/glibc debug.conf" in
<path>/etc/portage/package.env</path>, and put your variable settings
in <path>/etc/portage/env/debug.conf</path> (using the same format as
<path>make.conf</path>). An example debug.conf might appear as follows:
</p>
<pre caption="debug.conf">
CFLAGS="${CFLAGS} -ggdb"
CXXFLAGS="${CXXFLAGS} -ggdb"
FEATURES="${FEATURES} installsources splitdebug"
</pre>
</body>
</section>

</chapter>
</guide>
