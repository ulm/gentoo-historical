<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/project.xsl" type="text/xsl"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE project SYSTEM "/dtd/project.dtd">
<project>
  <name>Portage</name>

  <longname>Gentoo Linux Portage Development</longname>

  <description>
    The Portage Development Project is devoted to maintaining
    and updating portage's core functionality and utilities.
  </description>

  <longdescription><p>
    The Portage Development Project works to provide a continuously
    expanding and developing tool for the management and installation
    of packages. The developers work on providing a coherent system
    that is as trouble free as possible (backwards compatible, automated,
    and simple). Bugs are tracked and fixed from the
    <uri link="http://bugs.gentoo.org">Gentoo bug tracker</uri> and
    developer-developer correspondence is maintained on the
    gentoo-portage-dev mailing list.</p>
  </longdescription>

  <goals>
    <p>The goal of the Portage Development Project stands at providing
    a seamless integration of developer and user tools to aid the growth
    and maintenance of the Gentoo Linux Portage Tree.
    </p>
  </goals>
  
  <extraproject name="Sandbox" lead="azarah">
    <p>The development and maintenance of sandboxing-related tools and
    libraries. These exist as a control method that allows portage to
    be assured that all files executed operate only in monitored locations
    and can be tracked in portage's database for later reversing.
    </p>
  </extraproject>

  <extraproject name="Repoman">
    <p>The maintenance of the 'repoman' tool. Repoman provides the
    checking and commit services necessary to ensure that ebuilds are
    proper before entering into circulation.
    </p>
  </extraproject>

  <extraproject name="Portage" lead="carpaski">
    <p>Maintenance of the back end modules and functionality of the
    portage system. Providing APIs to the raw databases used to interact
    with the installed and available packages provided through the
    portage system.
    </p>
  </extraproject>

  <extraproject name="Documentation">
    <p>Updating and Creating documentation for the tools of portage.</p>
  </extraproject>

  <extraproject name="Tools">
    <p>The Tools subproject deals with portage related tools that are not
    included in the core portage package. This covers maintaining ebuilds 
    for external packages as well as developing and improving our own 
    utilities and scripts.
    </p>
  </extraproject>

  <dev role="Operational Manager" description="Gentoo Linux Portage TLP, portage-ng co-lead">carpaski</dev>
  <dev role="Coordinator/Manager" description="Portage/portage-ng roadmap/design">drobbins</dev>
  <dev role="Coordinator/Manager" description="Portage/portage-ng roadmap/design">pvdabeel</dev>
  <dev role="subproject lead" description="Sandbox">azarah</dev>
  <dev role="member" description="Portage">nakano</dev>
  <dev role="member" description="Portage">aether</dev>
  <dev role="member" description="Sandbox">scox</dev>
  <dev role="member" description="Repoman">puggy</dev>
  <dev role="member" description="Tools">karltk</dev>
  <dev role="member" description="Misc">genone</dev>
  <dev role="member" description="Documentation">vapier</dev>

<extrachapter position="top">
  <title>Portage Project Roadmap</title>
  <section>
  <body>
  <table>
  <tr><th>Target Date</th><th>Description</th></tr>
  <tr><ti>imminent</ti><ti><b>portage-ng:</b> completion of portage-ng exploratory prototype</ti></tr>
  <tr><ti>in progress (see below)</ti><ti><b>portage:</b> public development roadmap (including <uri link="/proj/en/gentoo-alt/macos-1.xml">MacOS/pathspec</uri> integration plan)</ti></tr>
  <tr><ti>in progress</ti><ti><b>portage-ng:</b> <uri link="portage-ng/systemspec.xml">public comprehensive requirements and design goals document</uri></ti></tr>
  <tr><ti>01 Mar 2004</ti><ti><b>portage-ng:</b> initial implementation roadmap</ti></tr>
  </table>
  </body>
  </section>
</extrachapter>

<extrachapter position="top">
  <title>Portage Development Roadmap</title>
  <section>
  <body>

  <p>This roadmap is open to public and developer comment; if you have
  anything you'd like to see on this roadmap, please join the mailing list
  and discuss it. For all suggestions, please include a clear description
  of the root problem you'd like to see addressed. An actual implementation
  plan can be submitted as well, but is definitely not required as
  implementation will likely need to be reworked somewhat by the Portage
  development team.</p>

  <ul>

  <li><b><uri link="roadmap-pathspec.xml">Pathspec integration</uri></b>
  (as per  <uri link="/proj/en/gentoo-alt/macos-1.xml">this plan</uri>,)
  will allow pathspec-compliant ebuilds to automatically adapt to the
  path structures of Linux, BSD, MacOS, or any other type of layout
  (such as a customized pathspec that uses <path>/usr/local</path>,
  for example.) This functionality is needed to allow us to have a
  single Portage tree that can gracefully support ebuilds that run
  on a variety of platforms with different filesystem heirarchy
  structures.</li>
  
  <li><b><uri link="roadmap-glsa.xml">GLSA-awareness integration</uri></b>
  will allow Portage to be aware of Gentoo Linux Security Advisories,
  determine if they are applicable to the host system, and then, if
  requested, apply the security fixes.
  </li>

  <li>Rewrite the dependency resolution code a more simplistic and more
  feature-full set of results. Designed as an object that forms a complete
  tree of the system's dependencies as well as the new packages to be
  inserted. It should provide a complete tree that can be traversed forward
  or reverse.</li>

  <li><b><uri link="roadmap-vardb.xml">/var/db/pkg improvements</uri></b>
  will allow Portage to properly handle having two packages installed
  that have the same category and package, but a different &quot;slot.&quot;

  This will allow multiple
  identically-versioned compiler toolchains to exist on the same
  system for cross-compiling. This will require some upgrades to
  Portage's internal logic so that dependency-matching functions
  understand the concept of a &quot;catpkgslot,&quot; not just a &quot;catpkg&quot; --
  partially implemented already. CONFLICTS with backwards compatibility --
  this will require time to be lead out and proven solid before old versions
  are removed. Suggested implementation is to write a new Portage
  &quot;package logic&quot; module from the ground-up, then upgrade portage.py
  to use this module for all its functionality. Wrapping all the db
  accesses inside of a class is desired to enhance upcoming modularity.
  </li>

  <li>Eliminate ALL non-interface code from emerge. The portage modules
  should be the only source of functions. Presently code from emerge
  cannot be used without copying the contents and rewriting them
  for external use. Emerge should be an interface only.</li>
  
  <li>Clean should only produce output for 'emerge clean'</li>

  <li>Stop using mtimes for packages. Have portage look up all files in
  the vardb to ensure that a file isn't duplicated and unmerge it if not.
  Potentially slow... Need some way to speed it up... hash of filenames?</li>

  <li>Virtuals. /var/cache/edb/virtuals -- Effectively remove it.
  /etc/portage/virtuals is a user-modifiable version that acts like an
  incremental applied on top of an ON-DEMAND virtual calculation system.
  Virtuals should be calculated from /var/db/pkg EVERY time it is
  requested and potentially incorporate to-be-merged values from the
  current merge list.</li>

  <li>Repoman needs to ignore all user-set info in /etc/portage. It's
  not relevant to deployed users and unnecessarily affects how repoman
  considers the data presented in the cvs repo.</li>
  
  <li>Multiple rsync repositories all operating as overlays and each
  with their own metadata caches. -- bug 28796</li>

  <li>STICKIES and related enhancements to enable command line changes
  to be maintained. EXTRA_EMAKE and EXTRA_ECONF already exist but require
  this functionality to maintain the user modified changes -- Partial
  implementation through class config changes. bug 9379, bug 13616,
  Aether's config code.</li>

  <li>Determine file lock status before starting downloads -- Prevent
  races/deletes. Patches exist for some this. Integrate and find all
  colliding descriptors/cmds. Create a fileIO layer? (wget and other
  external calls are a problem)</li>

  <li>Add category support to searches... emerge -s @catgory</li>

  <li>rsync - Speedup rsync operations.
    <ul>
    <li>Use md5's of tree file list + md5 of subtree -- client-side burden.</li>
    <li>Maintain hash of changes on rsync1 -- Server-side burden.</li>
    <li>Implement CVSUP.</li>
    </ul>
  </li>
  
  <li>Enable &quot;FROZEN&quot; portage trees. Modifier that removes the sync-up
  between metadata and the /var/cache/edb/dep trees. It forces the assumption
  that users are not modifying their tree(s) and that the metadata is perfect.
  Presents massive speedup potential.</li>
  
  <li>Enable parallel functionality in fetching. Removal of global settings
  in CVS portages removes the issues that prevented this functionality in
  the past. Parallel code can be written for calling the fetchers, but
  lockfiles must be employed to ensure overwrites do not occur. Patches
  exist for both the parallel fetching and the lockfiles on bugs.</li>
  
  <li>Enable parallel functionality in merging. Enable portage to resolve
  deps in such a way that non-dependent deps can be merged simultaneously
  and thus gain much greater benefits of parallelism in all aspects instead
  of simple in the makefile/compile side. Sandbox may need enhancements to
  ensure that it uses unqiue files for any given instance.</li>
  
  <li>Enable parallel functionality in dependency calculation. 'regen' and
  related calls to aux_get() are greatly slowed by the loading time of bash
  and any calls to external apps inside of an ebuild. Invoking these calls
  side-by-side can greatly reduce the wait time. This functions much like
  deep pipelining in CPUs.</li>
  
  <li>Rename all undocumented variables used in bash to prefixed values that
  are not easy to accidently duplicate. BUILDDIR --&gt; PORTAGE_BUILDDIR or
  something to that effect. Prevent ebuilds from clobbering system
  variables or unknowingly invoking operations in build systems.</li>

  </ul>

  <p><b>Long-term Goals</b></p>
  <ul>
  
  <li>Portage as a daemon process controlled by interfaces that provide
  actions to be performed. Ideally portage will rebuild dependency lists
  as they are requested and continue to merge packages without interuption.
  </li>
  
  <li>Incorporate IMON functionality into the portage daemon to enable
  instant cache regeneration and to monitor the state of config files to
  provide.</li>
  
  <li>Create a master/slave relationship for cluster-type systems. The
  slave processes would listen for a master node to provide actions to
  perform and report progress and status back to the master. Security
  capabilities are desired.</li>
  
  <li>Massively parallel system for compilation. Effectively a compile
  farm that takes the concept of parallel merging and moves it from many
  CPUs to many nodes. The master would present built tbz2's obtained from
  each node to subnodes to allow them to proceed without requiring the
  compilation of dependencies that are/were compiled on other slaves already.
  </li>
  </ul>


  </body>
  </section>
</extrachapter>

<extrachapter position="top">
<title>Portage-ng development</title>
<section>
<body>

<p>Work is in progress on a set of requirements for portage-ng, a package
manager/"ports" system that is intended to be a successor to the current
portage package manager.  The goal of this project isn't simply to rewrite
portage, but to also significantly expand the potential of this type of
tool.</p>

<p><uri link="portage-ng/systemspec.xml">Here is the current requirements document for portage-ng</uri>.</p>

</body>
</section>
</extrachapter>

<extrachapter position="bottom">
<title>How to Participate</title>
<section>
<body>
<p>
Involvement in portage development starts with learning some aspect of
portage. If something in particular strikes your fancy, then peruse the
code and try to figure out how it works. Work out your idea and either
present it in #gentoo-portage or on the mailing list 
<uri link="http://www.gentoo.org/main/en/lists.xml">gentoo-portage-dev</uri>
(please don't post to the list unless you've made a concerted effort to
figure out or work up an idea or plan -- High volume lists tend to get
ignored when they become more trouble than benefit).
</p>
<p>
The primary reason ideas or patches are ignored or discarded relates to
how well the design is drawn. Patches that create very tight (limited and
simple) changes to add a feature set or enhance code are quite welcome, but
quite often patches haphazardly change portions of code that is not
necessary or explained for the desired result. The simpler you can make
the design the better.
</p>
<p>
Using 
<uri link="http://www.gentoo.org/cgi-bin/viewcvs.cgi/portage/?cvsroot=gentoo-src">
viewcvs</uri>
one can see the current portage tree and any extra files that
are not part of the distributed set of portage. The
<uri link="http://www.gentoo.org/cgi-bin/viewcvs.cgi/portage/ChangeLog?rev=HEAD&amp;cvsroot=gentoo-src&amp;content-type=text/vnd.viewcvs-markup">
ChangeLog
</uri>
and the
<uri link="http://www.gentoo.org/cgi-bin/viewcvs.cgi/portage/TODO?rev=HEAD&amp;cvsroot=gentoo-src&amp;content-type=text/vnd.viewcvs-markup">
TODO
</uri>
files denote the majority of the recent work for portage. The
<uri link="http://www.gentoo.org/cgi-bin/viewcvs.cgi/portage/TODO?rev=HEAD&amp;cvsroot=gentoo-src&amp;content-type=text/vnd.viewcvs-markup">
TODO
</uri>
lists the major works desired for the portage system. They are generally
major efforts but piecewise patches can be great helps.
</p>
<p>
If you are interested in helping, but don't have a niche that you are
interested in filling, you can always look through
<uri link="http://bugs.gentoo.org">bugs.gentoo.org</uri>. There
are many many bugs waiting to be found and fixed and many enhancements
looking to find someone to code them. Figure out a fix, implement it,
test it, and then keep trying to make the patch smaller. Post it for
review on <uri link="http://bugs.gentoo.org">bugs.gentoo.org</uri>, and
keep working on it. If it seems ignored, make a new comment in the bug
and/or mention it in #gentoo-portage.
</p>
</body>
</section>
</extrachapter>
<extrachapter position="bottom">
<title>Submitting Patches</title>
<section>
<body>
<p>
It's very important that submitted patches follow the proper guidelines.
Python is very picky about whitespace and the easier it is to understand
what the patch does from the start, the more likely it will be looked into.
</p>

<ul>
<li>Use TABS. Some people like 8 spaces, some people like 4, and some
like 2. Tabs are the happy medium.</li>
<li>Always submit patches. Never submit complete files unless the file
has changed completely or is new. VERBOSELY explain why a complete
rewrite was necessarily or what the new file does.</li>
<li>All python (and preferably everything else) patches should be
committed with '-u' or '-ur' as the only option to diff. b and B will
most likely cause a patch to be rejected.</li>
<li>All patches must be against a current release version or a current
cvs version. Please list which version it is against.</li>
<li>Only submit clean patches. Do not include other patches in a
submitted patch. If the code found in a patch does not match the
description of the patch, it will be rejected.</li>
<li>Describe exactly what the changes do and why they are required. Even
if they are obvious the description should still be there.</li>
</ul>
</body>
</section>
</extrachapter>
</project>
