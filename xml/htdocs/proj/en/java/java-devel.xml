<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/java/Attic/java-devel.xml,v 1.4 2005/11/25 07:07:22 nichoj Exp $ -->

<!-- Do Not Translate !! -->
<guide link="/proj/en/java/java-devel.xml">
<title>Gentoo Java Developer Guide</title>

<author title="Author">
  <mail link="axxo@gentoo.org">Thomas Matthijs</mail>
</author>

<author title="Author">
  <mail link="karltk@gentoo.org">Karl Trygve Kalleberg</mail>
</author>

<author title="Author">
  <mail link="nichoj@alum.rpi.edu">Joshua Nichols</mail>
</author>

<abstract>
The guide attempts to completely explain all things java on Gentoo.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2005-10-03</date>

<chapter>
<title>Intro</title>
<section>
<title>Preliminaries</title>
<body>

<p>
The first thing you should know is that the build systems for open-sourced Java
projects generally leave a lot to be desired. A good dose of
patience is necessary to hack your average Java package 
into submission for the regular Linux distribution.  You have been warned.
</p>

<note>
	This document is official version of <uri>http://www.gentoo-wiki.com/Gentoo_Java_Policy</uri>.
</note>

<warn>
	This document is work in progress! It is based on the document written for axxo-overlay, but with everything specific to that overlay removed. Information here should still be correct though.
</warn>

</body>
</section>
<section>
<title>Background</title>
<body>

<p>
This guide tries to document best-practices for writing ebuilds for programs
written in the Java language on the Gentoo Linux distribution.
</p>

<p>
In the Java world, installation infrastructure like the autotools (automake,
autoconf, ...) do not exist (yet), and it is common practice for Java
developers to bundle everything they could possibly need in their releases.
</p>

</body>
</section>
</chapter>

<chapter>
<title>General</title>
<section>
<title>Package Names</title>
<body>

<p>
In line with the general ebuild naming policies, all package names shall be
lowercase. Packages that do not compile their product from source code shall
have the -bin suffix. We should strive to only accept ebuilds that build their
product from source code, because:
</p>

<ul>
  <li>
    End-users may want to manually patch or tweak the sources between
    src_unpack and src_compile
  </li>
  <li>
    The USE Flags will normally impact on which features are to be compiled in,
    and which dependencies we want to allow
  </li>
  <li>
    When security flaws are found, we want to issue a hotfix immediately. It is
    not always feasible to wait for the upstream project to make a new release.
    With binary-only packages, the only fix we can offer is disabling the
    software entirely and masking it.
  </li>
  <li>
    It is common that we need to apply Gentoo-specific tweaks and intermediary
    patches when upstream takes a long time to issue a new release, which is
    almost always only possible when we compile from sources.
  </li>
  <li>
    There is an obvious correspondence between the source code and the
    resulting binaries, so the user is guaranteed that there are no trojans
    hiding in the binaries (we don't guarantee the lack of trojans in the
    source code itself, but at least it's easier to find there).
  </li>
  <li>
    We guarantee to our users that the source exists and compiles properly, the
    basis of regular open-source development.
  </li>
  <li>
    For immature library packages, where documentation is often scanty, the
    user can easily run javadoc on the sources, as a stop-gap measure, without
    needing to dig out the source code from upstream.
  </li>
</ul>

<p>
In cases where multiple vendors supply implementations of the same standards,
the package name shall have a vendor prefix.<br/> 
Examples: ibm-jdk-bin, sun-javamail-bin, gnu-javamail, ...
</p>

</body>
</section>
<section>
<title>Directory Names</title>
<body>

<p>
In general, the directory policies are handled for you by the helper functions
in the <uri link="#java-pkg.eclass">java-pkg</uri> eclass.
</p>

<p>
These functions adhere to the following path name conventions:
</p>

<ul>
  <li>
    .jar files created from source code are installed in
    <path>/usr/share/${PN}-${SLOT}/lib/</path>
  </li>
  <li>
    .jar pre-built files not compiled by the ebuild go into
    <path>/opt/${PN}-${SLOT}</path>
  </li>
  <li>
    Javadoc documentation is installed in
    <path>/usr/share/doc/${PF}/html/api/</path>
  </li>
  <li>Source zip drops in <path>/usr/share/${PN}-${SLOT}/source/</path></li>
  <li>user-runnable scripts are installed in <path>/usr/bin</path></li>
  <li>system-wide env files are in <path>/usr/env.d/java</path></li>
  <li>user-specific env files are in <path>${HOME}/.gentoo/env.d/</path></li>
</ul>

</body>
</section>
<section>
<title>Versioning</title>
<body>

<p>
The packages should be versioned according to the general Gentoo ebuild
guidelines.
</p>

<p>
Libraries should be SLOTed according to interface. If two versions of a given
library follow the same API, it should be SLOTted in identically.  This allows
for concurrent installations of multiple versions of a given library, one for
each SLOT, i.e., one for each interface. Example: xerces-2.4.1 and 2.4.2 are
both in SLOT 2.4, as they supply the same interface, whereas xerces-2.6.0 and
2.6.1 are in SLOT 2.6, allowing programs that require the 2.4 interface to
coexist with programs requiring the 2.6 interface.
</p>

<p>
When putting two versions of the same library in the same SLOT, you should make
certain they are indeed binary compatible.
</p>

</body>
</section>
<section>
<title>Dependencies</title>
<body>

<p>
As you should not keep included .jar files, these .jars will need to be
satisfied by external packages. 
</p>

<p>
When depending on an external package, take care that you depend on a
sufficiently recent version, and explicitly ensure at building time that the
providing package gives you the correct interface, i.e. the correct SLOT.
</p>

<p>
Since Portage does not support depending on a particular slot, you DEPEND and
RDEPEND should look like =dev-java/lib-1.2* to signify that any 1.2.x library
is supported. Presumably, they will all be SLOT compatible. 
</p>

<p>
By default your package should depend on dev-java/ant-core. dev-java/ant includes
the ant tasks, which are not usually used by java packages. So when testing the ebuild
make sure that you do not have dev-java/ant-tasks installed to make sure that 
your package emerges only with the dependencies specified in the ebuild.
</p>

</body>
</section>
<section>
<title>Bundled JARs</title>
<body>

<p>
As previously pointed out, most Java projects bundle all extra .jar files they
expect to require. This is unnecessary bundling and is problematic for
distributions like Gentoo, as we would end up with every package having its own
copy of popular libraries and tools like JUnit and the XML APIs.
</p>

<p>
Apart from the obvious reason of space inefficiency, there is also the problem
of bug fixes. If a bug is discovered and fixed in Junit, for example, Gentoo
users will have to wait for all projects to update their bundled junit.jar,
most likely taking years. 
</p>

<p>
And what if the fix is a security patch? 
</p>

<p>
Clearly, we would want each .jar file accounted for only once, by one package,
managed by Portage. 
</p>

</body>
</section>
<section>
<title>Life-cycle</title>
<body>

<p>
We separate between applications and libraries. 
</p>

<p>
For applications, it is mostly sufficient to keep only the latest version. If
the application comes in series, such as Eclipse, we want to keep the latest
revision in each series. Very old series may eventually be dropped completely.
</p>

<p>
Libraries, on the other hand, are in a very sad state of affairs in the
open-source Java world.  Given the desire of library developers to change both
the API and the ABI between even patch releases, we must mostly keep every
library we ever commit to our tree.
</p>

<p>
Only when all of the following requirements are met, can we start considering
dropping a library:
</p>

<ul>
  <li>
    The ebuild is a very old version that lost its compatibility with the
    current profiles
  </li>
  <li>The ebuild is not a dependency of other packages</li>
  <li>
    The ebuild is an application that is unmaintained upstream. (The
    development/support has stopped).
  </li>
</ul>

<p>
The final, somewhat special category, is the virtual machines. The biggest
worry here is to be be very careful that we are not breaking a profile on a
different arch by removing a given version of the VM.
</p>

</body>
</section>
</chapter>

<chapter id="writing_the_ebuild">
<title>Writing the ebuild</title>
<section id="general_guidelines">
<title>General Guidelines</title>
<body>

<p>
The normal Gentoo style guides for ebuilds apply.<br/>
When packaging java programs, always try to follow these simple guidelines: 
</p>

<ul>
  <li>In RDEPEND, use "&gt;=virtual/jre-[minimal-version]"</li>
  <li>In DEPEND, use "&gt;=virtual/jdk-[minimal-version]"</li>
  <li>
    Unless of course javac, jar or some other developer tool from the JDK is
    required at runtime for normal operation of your package. Note: Even
    libraries should have the JRE only in their RDEPEND.
  </li>
</ul>

<p>
If the program provides documentation, in particular API documentation, make
certain your ebuild runs javadoc and installs the documentation using <uri
link="#java-pkg.eclass">java-pkg_dohtml</uri>. Expose this through the doc USE
flag. 
</p>

<p>
If the program provides source code (or other) examples, and you think they may
be worthwhile for some users to have, make them optionally installable into
<path>/usr/share/doc/${PF}/examples</path>, and enable their installation via
the examples USE flag.
</p>

<p>
If you want to go all the way, add the source USE flag that installs the
complete source code as a .zip file. Use <uri
link="#java-pkg.eclass">java-pkg_dosrc</uri> for this purpose.  This allows IDEs
such as Eclipse and NetBeans to do complete source-level debugging. 
</p>

<p>
If your package comes with unit tests, you can enable these using the test
FEATURE, in src_test. If you need extra dependencies for the testing you can
pull these in with the test useflag (for example dev-java/junit).<br/>
We will no longer use the junit use flag for this.
</p>

<p>
Always remove supplied .jar-files from a source drop and replace them with our
own libraries, using <uri link="#java-pkg.eclass">java-pkg_jar-from</uri>.  If you
only need the path to our own libraries you can use <uri
link="#java-pkg.eclass">java-pkg_getjar(s)</uri>, but never call java-config
directly as then it will not be recorded as a dependency in the package env.
</p>

<p>
Always add an easily understandable reason after 'die', so that end-users will
provide the maintainers with sensible feedback should the build fail. 
</p>

<p>
As far as possible, <e>do not</e> clutter up the environment by adding env
files to <path>/etc/env.d/</path>. Rather, store your env file in
<path>/etc/env.d/java/</path> and have the command line scripts source that env
file on startup. Otherwise, developers, who regularly override CLASSPATH,
CATALINA_HOME and other env vars, will have problems running regular apps. 
</p>

<pre caption="Example snippets from /usr/bin/javacc">
#! /bin/sh
. /etc/env.d/java/22javacc
[ -f "${HOME}/.gentoo/env.d/22javacc" ] &amp;&amp; . ${HOME}/.gentoo/env.d/22javacc
</pre>

</body>
</section>
<section>
<title>Typical Examples</title>
<body>

<p>
A java packages which uses ant and has some bundled jars.
</p>

<pre caption="Example: java ebuild">
inherit eutils java-pkg

DESCRIPTION="Fictional example ebuild."
HOMEPAGE="http://www.gentoo.org/"
SRC_URI="mirror://gentoo/${P}-src.tar.gz"

LICENSE="Apache-2.0"
SLOT="0"
KEYWORDS="~x86 ~sparc ~ppc ~amd64 ppc64"
IUSE="doc examples source"

RDEPEND="&gt;=virtual/jre-1.3
        =dev-java/xerces-2*
        &gt;=dev-java/log4j-1.2.8"
DEPEND="&gt;=virtual/jdk-1.3
        ${RDEPEND}
        &gt;=dev-java/ant-core-1.5.4
        source? ( app-arch/zip )"

S=${WORKDIR}/${P}-src

src_unpack() {
        unpack ${A}

        cd ${S}/lib
        rm *.jar

        java-pkg_jar-from xerces-2
        java-pkg_jar-from log4j log4j.jar log4j-1.2.8.jar
}

src_compile() {
		local antflags="jar"
		use doc &amp;&amp; antflags="${antflags} doc"
		ant ${antflags} || die "failed to build"
}

java_src_install() {
        java-pkg_newjar target/${P}-dev.jar ${PN}.jar

        use doc &amp;&amp; java-pkg_dohtml -r dist/docs/
        use source &amp;&amp; java-pkg_dosrc src/java/org
        if use examples; then
                dodir /usr/share/doc/${PF}/examples
                cp -r src/java/examples/* ${D}/usr/share/doc/${PF}/examples
        fi
}
</pre>
</body>
</section>
</chapter>

<chapter>
<title>Java Eclass Reference</title>
<section>
<title>Overview</title>
<body>

<p>
Currently there are 3 java related eclasses.
</p>

<table>
<tr>
  <th>Eclass</th><th>Usage</th>
</tr>
<tr>
  <ti><uri link="#java-pkg.eclass">java-pkg.eclass</uri></ti>
  <ti>Any and all java based packages</ti>
</tr>
<tr>
  <ti><uri link="#java-utils.eclass">java-utils.eclass</uri></ti>
  <ti>
	Contains some helper functions
  </ti>
</tr>
<tr>
  <ti><uri link="#java.eclass">java.eclass</uri></ti>
  <ti>Helper functions for packages that provide a VM</ti>
</tr>
</table>

</body>
</section>
<section id="java-pkg.eclass">
<title>java-pkg.eclass</title>
<body>
<p>
Install functions
</p>

<ul>
  <li><c>java-pkg_dojar</c>
  <ul>
    <li>
      Installs a jar, and records it in the package env. Make sure the jar name
      does not contain a version.
    </li>
    <li>Takes one or more paths to a jars</li>
    <li>will die on errors</li>
  </ul>
  </li>
  <li><c>java-pkg_newjar</c>
  <ul>
    <li>
      If you need to rename the jar, since we don't allow versions in the jar
      name, then calls _dojar
    </li>
    <li>If you only pass one argument it will name it ${PN}.jar</li>
    <li>will die on errors</li>
  </ul>
  </li>
  <li><c>java-pkg_doso</c>
  <ul>
    <li>Install a jni library, and register its location it the package env</li>
    <li>Takes one ore more path to a library</li>
    <li>will die on error</li>
  </ul>
  </li>
  <li><c>java-pkg_jarinto</c>
  <ul>
    <li>Change the location java-pkg_dojar installs to</li>
  </ul>
  </li>
  <li><c>java-pkg_sointo</c>
  <ul>
    <li>Change the location java-pkg_doso installs to</li>
  </ul>
  </li>
  <li><c>java-pkg_dosrc</c>
  <ul>
    <li>
      Install a zip containing the source, so it can used in IDE's like
      eclipse
    </li>
    <li>Takes path the base of the source dir</li>
    <li>Will die on error</li>
  </ul>
  </li>
</ul>

<p>
Query functions
</p>

<ul>
  <li><c>java-pkg_jarfrom</c>
  <ul>
    <li>Creates symlinks to the jars of a package in the cwd</li>
    <li>Can be called with
    <ul>
      <li>A comma separated list of packages</li>
      <li>A single package and the jar name you want from that package</li>
      <li>A single package, the jar name, and the name of symlink</li>
    </ul>
    </li>
    <li>Will die on errors</li>
  </ul>
  </li>
  <li><c>java-pkg_getjars</c>
  <ul>
    <li>echos the classpath, and record the dependency</li>
    <li>Takes a comma separated list of packages</li>
    <li>Does not die on errors, returns 1</li>
  </ul>
  </li>
  <li><c>java-pkg_getjar</c>
  <ul>
    <li>echos the classpath of the jar, and records the dependency</li>
    <li>A single package, and the name of the jar</li>
    <li>Does not die on errors, returns 1</li>
  </ul>
  </li>
</ul>
</body>
</section>

<section id="java.eclass">
<title>java.eclass</title>
<body>

<p>
This eclass should be inherited by all packages that provide a vm.  If no
system-vm can be found it will set the one currently merging as system.  It
also has a function to install the env file and create all necessary symlinks.
</p>

<ul>
  <li><c>set_java_env</c>
  <ul>
    <li>
      Takes the env file, updates it and puts it in /etc/env.d/java, then
      creates the needed files and symlinks in /etc/java-config/ for it
    </li>
    <li>Takes the base env file as argument</li>
  </ul>
  </li>
  <li><c>install_mozilla_plugin</c>
  <ul>
    <li>Creates a symlink for the mozilla plugin</li>
    <li>Takes the path to the oij plugin</li>
  </ul>
  </li>
</ul>

</body>
</section>

<section id="java-utils.eclass">
<title>java-utils.eclass</title>
<body>

<ul>
  <li><c>java-pkg_ensure-vm-version-sufficient</c>
  <ul>
    <li>die if the current vm cannot build this package</li>
    <li>Takes a version: 1.4 1.5</li>
  </ul>
  </li>
  <li><c>java-pkg_ensure-vm-version-eq</c>
  <ul>
    <li>die if the current vm's version isn't equal to  ${1}</li>
    <li>Takes a version: 1.4 1.5</li>
  </ul>
  </li>
  <li><c>java-pkg_is-vm-version-eq</c>
  <ul>
    <li>test is the active vm's version equals $1</li>
    <li>Takes a version: 1.4 1.5</li>
  </ul>
  </li>
  <li><c>java-pkg_ensure-vm-version-ge</c>
  <ul>
    <li>die if the current vm's version isn't at least ${1}</li>
    <li>Takes a version: 1.4 1.5</li>
  </ul>
  </li>
  <li><c>java-pkg_is-vm-version-ge</c>
  <ul>
    <li>test if the active vm's version is at least $1</li>
    <li>Takes a version: 1.4 1.5</li>
  </ul>
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
