<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide lang="en">
  <title>Ant Guide</title>

  <author title="Author">
    <mail link="caster@gentoo.org">Vlastimil Babka</mail>
  </author>
  <author title="Editor">
    <mail link="wltjr@gentoo.org">William L. Thomson Jr.</mail>
  </author>
  <abstract>
    This document provides information on using Apache Ant on Gentoo 
  </abstract>

  <!-- The content of this document is licensed under the CC-BY-SA license -->
  <!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
  <license/>

  <version>1.5</version>
  <date>2008-01-18</date>

  <chapter>
    <title>Split-Ant</title>
    <section>
      <body>
        <p>
          Since version 1.7.0, the way of packaging and using optional tasks 
          in Apache Ant has changed substantionally. Previously, Ant was split 
          into ant-core (the core .jar files) and ant-tasks (.jar files for 
          all the optional tasks, most of which have quite a number of external 
          package dependencies). Ant-tasks symlinked its jars into the 
          ant-core/lib to be loaded. Dependencies of these optional tasks were 
          hardcoded into the ant startup script and tried to be loaded even if 
          they (or ant-tasks) were not installed. This way they would pollute 
          the classpath for building and cause packages that also depend on 
          some of these to build even without the dependencies recorded in 
          ebuild and package.env.
        </p>
        <p>
          With the new split-ant setup, each .jar file that made up ant-tasks 
          package is installed as separate package (named ant-* as the jar 
          file itself), specifying just the dep(s) it itself needs. The jars 
          are not symlinked to ant-core/lib but instead, the presence of the 
          package is recorded by touching a file named 
          <path>/usr/share/ant/tasks-${PV}/${PN}</path>. Ant startup script is 
          modified so that by default it looks into this directory and loads 
          the tasks and their deps for backwards compatibility. But the real 
          power lies in the ANT_TASKS variable (used in ebuild or by ant user) 
          which can override this default behaviour and specify only the tasks 
          you want it to load. To sum up, the advantages of new layout are:
        </p>
        <dl>
          <dd>
            <ul>
              <li>
                Reduced dependencies of packages that need more than ant-core 
                (instead of depending in whole ant-tasks with its almost 20 
                direct dependencies, you specify only those you want)
              </li>
              <li>
                Less classpath pollution, no hardcoded dependencies inside ant 
                startup script (see above)
              </li>
              <li>
                Easy to find if you need more than ant-core to build a package 
                (with old setup you would have to unmerge ant-tasks to test if 
                package fails without them)
              </li>
              <li>
                Allows us to have junit3 and junit4 in separate slots and 
                choose which one to load in ant
              </li>
              <li>
                Better controlled build of the jars, instead of a 
                manifest-only jar it will fail if there's something wrong with 
                the dependency package
              </li>
              <li>
                Full backward compatibility with existing ebuilds
              </li>
            </ul>
          </dd>
        </dl>
      </body>
    </section>
  </chapter>

  <chapter>
    <title>End User Documentation</title>
    <section>
      <title>Migrating to Ant 1.7.0</title>
      <body>
        <p>
          To make the transition possible, dev-java/ant-core-1.7.0 needs to 
          block on older versions of dev-java/ant-tasks and dev-java/ant. So 
          when you encounter this block, just unmerge ant-tasks and ant, and 
          reissue the emerge command that caused it. If you don't use Ant 
          yourself, that's all you need to know.
        </p>
      </body>
    </section>

    <section>
      <title>Working with new setup</title>
      <body>
        <p>
          If you use ant for your own Java development, you should be aware of 
          few things. If you use only the tasks provided by Ant, there will not
          be any difference if you install the whole dev-java/ant meta-package. 
          But the external libraries that used to symlink their .jar files into 
          <path>/usr/share/ant-core/lib</path> to be loaded, will soon stop 
          creating these symlinks. In order to load these libraries, you will 
          now need to use the new ANT_TASKS environment variable, which takes 
          space-separated list of packages to load.
        </p>
        <p>
          Example of ant invocation with pmd and checkstyle libraries: 
          <c>ANT_TASKS="pmd checkstyle" ant</c>
        </p>
        <p>
          You can also use this variable to load libraries that didn't 
          previously symlink into ant-core/lib, without the need to pass the 
          full path with the -lib <path>/path/to/jar</path> parameter.
        </p>
      </body>
    </section>
  </chapter>


  <chapter>
    <title>Ebuild Developer Guide</title>
    <section>
      <body>
        <p>
          A developer writing ebuilds has to generally take care about two 
          things - dependencies and ANT_TASKS variable. For dependencies, if 
          you previously needed only dev-java/ant-core (which is added by 
          java-ant-2 eclass automatically), nothing changes. But if your ebuild 
          needed full dev-java/ant or dev-java/ant-tasks to compile, you should 
          figure out which exact optional tasks are needed (more on that later) 
          and specify them in DEPEND. Then, you need to list the tasks in 
          ANT_TASKS variable before calling eant (can be different for each 
          eant call). In the most simple case, the tasks you need don't depend 
          on useflags, you don't care about specific versions and all eant() 
          calls in your ebuild need the same set of tasks. Then you just list 
          the tasks you need in WANT_ANT_TASKS variable *before* inheriting 
          java-ant-2.eclass, and it will fill the DEPEND and ANT_TASKS for 
          you. In the more complex cases, you have to specify all the depends 
          yourself (maybe based on USE flags) and ANT_TASKS for each eant call 
          (also maybe based on USE flags). Typically you do this with test 
          flag and ant-junit.
        </p>
      </body>
    </section>

    <section>
      <title>Env variables to use and know how they work</title>
      <body>
        <dl>
          <dd>
            <ul>
              <li>
                ANT_TASKS - $IFS-separated list of optional tasks (ant-foo) or 
                even external libraries ant can use (xjavac...) to load. Used 
                by eant. You can't set this in ebuild global scope, use only 
                inside <c>src_compile()</c> or <c>src_test()</c>
              </li>
              <li>
                WANT_ANT_TASKS - like ANT_TASKS, but you specify this before 
                inheriting java-ant-2 and it can contain only ant-* tasks. Will 
                be translated into dev-java/ant-* in DEPEND and used as default 
                ANT_TASKS if you don't set (override) it yourself.
              </li>
              <li>
                EANT_ANT_TASKS - if you use the default <c>src_compile()</c> of 
                java-pkg-2, and can't use WANT_ANT_TASKS for some reason, 
                set this in the global scope to pass ANT_TASKS value to it.
              </li>
              <li>
                JAVA_PKG_FORCE_ANT_TASKS - like ANT_TASKS, but you don't use 
                this in ebuild, but in the env, overrides any ANT_TASKS and 
                WANT_ANT_TASKS set in the ebuild (in eant, does not bring the 
                deps, because of portage dep caching). Can be used to easily 
                hash out which tasks you need when writing the ebuild, without 
                need to alter it each time.
              </li>
            </ul>
          </dd>
        </dl>
        <p>
          Here are the order of how eant() processes these variables to 
          export the final ANT_TASKS for calling the ant script, from highest 
          lowest priority of overriding.
        </p>
        <dl>
          <dd>
            <ul>
              <li>
                JAVA_PKG_FORCE_ANT_TASKS (set in the environment)
              </li>
              <li>
                ANT_TASKS (set in the src_* function calling <c>eant()</c>)
              </li>
              <li>
                EANT_ANT_TASKS (for java-pkg-2 default <c>src_compile()</c>)
              </li>
              <li>
                WANT_ANT_TASKS (set in the ebuild global scope before inherit)
              </li>
              <li>
                "none" (the default)
              </li>
            </ul>
          </dd>
        </dl>
      </body>
    </section>

    <section>
      <title>Typical workflow</title>
      <body>
        <p>
          Usually you start with dev-java/ant-core as dependency 
          ( added automatically with java-ant-2 eclass ) and see 
          if you can compile the package. If it fails, see what class was 
          missing and see the next section to determine what ant-* package you 
          need to use. The failure looks like this:
        </p>
<pre caption="Sample missing task error">
[junitreport] java.lang.ClassNotFoundException?: org.apache.tools.ant.taskdefs.optional.TraXLiaison
</pre>
        <p>
          Here you can see that the failing task was junitreport, and the 
          class it was missing.
        </p>
      </body>
    </section>
  </chapter>

  <chapter>
    <title>Implementation details (dev-java/ant* maintainer notes)</title>
    <section>
      <title>Build system (build.xml) changes</title>
      <body>
        <p>
          All ant-* ebuild share the same source tarball. Upstream's build.xml 
          is already building different .jar files based on the classes 
          dependencies, and there are selectors for the right source files. But 
          it's using &lt;available&gt; statements to determine if dependency 
          is present on classpath, and if not, it builds a manifest-only jar 
          (or no jar at all, there's now a property for that in 1.7). We modify 
          the build.xml to have separate target for core jars and target for 
          the optional jars, where a property tells it which jar we want 
          (easier to add 20 target differing just in name). We also make sure 
          that only the source we want in the jar is compiled, and used for 
          resolving internal class dependencies. Rest of these dependencies 
          (for the optional jars) is resolved from symlinked ant.jar from the 
          ant-core already installed on system, and in some cases also from 
          ant-nodeps.jar (ant-nodeps package). This makes sure that all 
          internal dependencies are represented with DEPEND variable in the 
          ebuild and package.env.
        </p>
      </body>
    </section>

    <section>
      <title>Launcher script changes</title>
      <body>
        <p>
          Ant's launcher script now recognizes ANT_TASKS environment variable. 
          The value is IFS-separated list of packages (in our usual 
          package-slot format as recognized by java-config -p) that are 
          translated to list of jar files (using java-config) and passed to 
          ant with -lib parameter. There are also special values "none" and 
          "all" (the default if not defined at all or empty). If "none" is 
          specified, the only jars loaded by ant are those in 
          <path>/usr/share/ant-core/lib</path>. This means no optional tasks, 
          since they no longer symlink to here. Value of "all" will make the 
          script load all tasks registered in 
          <path>/usr/share/ant/tasks(-version)</path>. The value of list can 
          specify any ant-* tasks that are part of the ant distro itself, but 
          also any external packages providing ant tasks (xjavac, 
          ant-owanttasks) or in fact any package that provides something ant 
          tasks can use (rhino for script tasks...).
        </p>
      </body>
    </section>

    <section>
      <title>Eclasses</title>
      <body>
        <p>
          We added one new eclass - ant-tasks.eclass used by the ant-* 
          packages. Makes use of the shared build system, so ebuilds themselves 
          only have to define few specific things. Is pretty well commented, 
          so no details needed here. Few other java eclasses were modified to 
          make use of the new features in other ebuilds. This is mostly about 
          handling the ANT_TASKS variable and its friends WANT_ANT_TASKS and 
          JAVA_PKG_FORCE_ANT_TASKS - see the developer docs. All changes and 
          additions here are also commented.
        </p>
      </body>
    </section>
  </chapter>
</guide>
