<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/desktop/video/vdr/temp/vdr-guide.xml,v 1.4 2006/11/24 23:02:34 zzam Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/vdr-guide.xml">
<title>Gentoo Linux VDR Guide</title>

<author title="Author">
  <mail link="mail@ng-plasmon.de">Norman Golisz</mail>
</author>
<author title="Author">
  <mail link="diox@gentoo.org">Dimitry Bradt</mail>
</author>
<author title="Editor">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>

<abstract>
This guide shows you how to prepare Gentoo Linux for DVB and VDR.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.3</version>
<date>2006-11-15</date>

<chapter>
<title>General information to DVB</title>
<section>
<title>What is DVB?</title>
<body>

<p>
<e>DVB</e> stands for <e>Digital Video Broadcasting</e>. DVB describes methods
to transfer digital data of TV, radio, interactive services like MHP, EPG and
teletext. Through data compression with MPEG-2, or H.264 for HDTV, it's
possible to transfer several channels on the same frequency. The more data
compression, the more channels can be transferred, but you pay it with quality
loss.
</p>

<p>
DVB can be transferred in several ways. The trailing letter identifies the
method of transfer, e.g. DVB-<e>T</e> for terrestrial transmission. There are
several more types:
</p>

<ul>
  <li>DVB-S for transmission over satellites</li>
  <li>DVB-C for transmission over cable</li>
  <li>DVB-H for transmission to mobile devices (terrestrial)</li>
  <li>DVB-IPI for transmission over IP based networks, e.g. internet</li>
  <li>
    DVB-RC(S/C/T) return channel for the transmission of data services, e.g.
    broadband internet
  </li>
</ul>

</body>
</section>

<section>
<title>Types and requirement of DVB cards</title>
<body>

<p>
Besides the different methods available to receive a DVB stream, the cards are
classified by their type of produced output. There are cards with a decoder
implemented which offer direct access to the stream by the device
<path>/dev/video</path>. These cards are <e>full featured cards</e>.  Other
cards have no own decoder implemented and require a software decoder on the
computer and are <e>budget cards</e>. This implies higher system requirements.
Your computer's CPU should run at at least 600 MHz, and have at least 256MB of
RAM. <uri link="http://linuxtv.org/wiki/index.php/DVB_Card_Vendors">This
list</uri> is useful for identifying your card.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Preparing the system</title>
<section>
<title>Configuring the kernel</title>
<body>

<p>
First, we must ensure that your kernel supports DVB and your DVB device.
(Only if you intend to use DVB-Devices, but that true in most cases.)
Since kernel version 2.6 the necessary drivers are included. Check your kernel
configuration and make sure the following options are selected as a static
driver or as modules.
</p>

<pre caption="Required kernel options">
Input Device Support ---&gt;
* Event Interface
Device Drivers ---&gt;
Multimedia Devices ---&gt;
Digital Video Broadcasting Devices ---&gt;
    [*] DVB For Linux
     *  DVB Core Support
   M  [Your driver]
</pre>

<p>
Additionally we have to select the proper driver for your hardware. To find out
the right module for your card, we mark every driver as module. If you have a
PCI card, install <c>pciutils</c> if you haven't already. If you want built-in
drivers or you don't own a PCI card, skip this step and continue with <uri
link="#kernel_output">Checking the kernel output</uri>.
</p>

<pre caption="Installing pciutils">
# <i>emerge pciutils</i>
</pre>

<p>
After booting the new kernel, we run <c>pcimodules</c> to list the required
modules.
</p>

<pre caption="Listing the required modules">
# <i>pcimodules</i>
ohci-hcd
ehci-hcd
sis900
snd-emu10k1
b2c2-flexcop-pci
nvidia
nvidiafb
</pre>

<p>
In this case we have to load the module <c>b2c2-flexcop-pci</c>. We add the
name to <path>/etc/modules.autoload.d/kernel-2.6</path>.
</p>

<pre caption="Adding the module name">
# <i>echo b2c2-flexcop-pci &gt;&gt; /etc/modules.autoload.d/kernel-2.6</i>
</pre>

</body>
</section>

<section id="kernel_output">
<title>Checking the kernel output</title>
<body>

<p>
It's recommended to mark every driver as module, so you are able to add the
required module dynamically, especially if you don't know the module name. If
you know the module name already, select the driver as built-in driver. Compile
the kernel, install the modules and boot it. Check to see if your kernel has
successfully detected your card by using <c>dmesg</c>.
</p>

<pre caption="Checking kernel output">
# <i>dmesg | grep DVB</i>
<comment>(If you own a TerraTec Cinergy T2, your output might look like this:)</comment>
DVB: registering new adaptor (TerraTec/qanu USB2.0 Highspeed DVB-T Receiver).
input: TerraTec/qanu USB2.0 Highspeed DVB-T Receiver remote control as /class/input/input2
</pre>

</body>
</section>
</chapter>

<chapter id="inst_vdr">
<title>Installing VDR</title>
<section>
<body>

<p>
To install VDR, we just emerge it.
</p>

<pre caption="Installing VDR">
# <i>emerge vdr</i>
</pre>

<p>
Now continue with <uri link="#inst_ir_remote">installing IR-Remote</uri>.
</p>

</body>
</section>
</chapter>

<chapter id="inst_ir_remote">
<title>Configuring the remote control</title>
<section>
<body>

<p>
There are at least two alternatives to controll vdr via Infrared (and some others also).
If your tv-card has an onboard IR-Receiver you can use remote-Plugin or LIRC.
Else you most likely need to use LIRC.
</p>

</body>
</section>
<section>
<title>Installing Plugin vdr-remote</title>
<body>

<p>
We first install the Plugin via emerge.
</p>

<pre caption="Installing vdr-remote">
# <i>emerge vdr-remote</i>
# <i>emerge --config vdr-remote</i>
</pre>

<p>
When using the remote-plugin for the IR-Port on DVB card
everything should be fine with default config. (It automatically
uses the input-device which has "dvb" in its name).
For more advanced uses have a look at <path>/etc/conf.d/vdr.remote</path>.
</p>

<p>
<uri link="#video-out">Go on with configuring your video-out</uri>
</p>

</body>
</section>

<section>
<title>Installing LIRC</title>
<body>

<p>
If your card can be remotely controlled, you may wish to configure LIRC. LIRC
interprets the pressed keys and returns a name for each one. A program that
supports LIRC waits for key events and runs the action configured in the config
file, mostly stored in the config directory of the executing program (e.g.
<c>mplayer</c> loads the file <path>~/.mplayer/lircrc</path>). Before we
install LIRC, you have to add <c>lirc</c> to your USE flags and add an
additional entry to <path>/etc/make.conf</path>: <c>LIRC_DEVICES</c>. Use <uri
link="http://www.lirc.org/html/table.html">this list</uri> to find the proper
arguments for the option.
</p>

<pre caption="Installing LIRC">
# <i>nano -w /etc/make.conf</i>
<comment>(Replace "devinput" with the proper driver)</comment>
LIRC_DEVICES="devinput"
USE="lirc"
# <i>emerge lirc</i>
</pre>

<p>
At first we have to define each key code with a name. Most supported remote
controls are configured already, take a look at the <uri
link="http://lirc.sourceforge.net/remotes/">remote list</uri>. Download the
required file and save it as <path>/etc/lircd.conf</path>. Now we have to find
out where to access your remote control. Run the following command to get a
list of the current input devices (make sure your device is running).
</p>

<pre caption="List of current input devices">
# <i>cat /proc/bus/input/devices</i>
I: Bus=0000 Vendor=0000 Product=0000 Version=0000
N: Name="TerraTec/qanu USB2.0 Highspeed DVB-T Receiver remote control"
P: Phys=usb-0000:00:1d.7-1/input0
S: Sysfs=/class/input/input2
H: Handlers=kbd event1
B: EV=100003
B: KEY=108fc210 2043 0 0 0 0 8000 2080 1 9e1680 0 0 ffc
</pre>

<p>
In this case we have the Terratec Cinergy T2 device plugged in, so we can
access the device over <path>/dev/input/event1</path>. Replace <c>event1</c>
with the matching device in your output.
</p>

<p>
<c>lircd</c> needs to know the device to use. Add the following line to
<path>/etc/conf.d/lirc.conf</path>. Remember to replace <c>devinput</c> with
the name of your driver and <c>event1</c> with the actual device.
</p>

<pre caption="Adding options to lircd">
LIRCD_OPTS="-H devinput -d /dev/input/event1"
</pre>

<p>
It's time to start <c>lircd</c>:
</p>

<pre caption="Starting lircd">
# <i>/etc/init.d/lircd start</i>
</pre>

<p>
Now it should be possible to watch lircd running and decoding key-presses.
Just run the command <c>irw</c>. Stop it with pressing Ctrl+C when you have enough.
</p>

<pre caption="Testing LIRC">
# <i>irw</i>
0000000000001aa2 00 Exit Technisat_TTS35AI.conf
0000000000001a8d 00 Mute Technisat_TTS35AI.conf
0000000000000a97 00 OK Technisat_TTS35AI.conf
0000000000000a97 01 OK Technisat_TTS35AI.conf
0000000000000a92 00 Menu Technisat_TTS35AI.conf
</pre>

<p>
Next, add it to the default runlevel so that it starts automatically at boot.
</p>

<pre caption="Adding lircd to the default runlevel">
# <i>rc-update add lircd default</i>
</pre>

<p>
To be able to use your remote control, we have to enable LIRC
support in VDR. Add the following line to the <path>/etc/conf.d/vdr</path>:
</p>

<pre caption="Enabling support for LIRC">
# <i>nano -w /etc/conf.d/vdr</i>
IR_CTRL="lirc"
</pre>

</body>
</section>
</chapter>

<chapter id="video-out">
<title>Video Output Methods</title>
<section>
<body>

<p>
You now need to descide on one (and only one!) of the following possibilities of video-output devices
which show the video-picture and the overlayed On-Screen-Display (OSD).
</p>

</body>
</section>
<section id="vdr-dxr3">
<title>Hardware decoding: Full-Featured DVB-Card</title>
<body>

<p>
Users of these expensive cards need not install anything additional.
</p>

<p>
<uri link="#channel_list">Continue with configuring your channel-list</uri>
</p>

</body>
</section>

<section id="vdr-dxr3">
<title>Hardware decoding: DXR3/Hollywood+ Cards</title>
<body>
<p>
To use a DXR3 card for vdr-ouput we need the Plugin vdr-dxr3.
</p>

<pre caption="Installing DXR3-Plugin">
# <i>emerge vdr-dxr3</i>
# <i>echo em8300 &gt;&gt; /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<p>
The em8300-modules now needs some configuration that depends on the exact used revision of the card.
</p>

<p>
TODO dxr3config
</p>

<p>
<uri link="#channel_list">Continue with configuring your channel-list</uri>
</p>

</body>
</section>

<section id="vdr-pvr350">
<title>Hardware decoding: PVR350 Card</title>
<body>
<p>
As the PVR350-Cards have onboard an MPEG-Decoder chip we want to
make use of that. We need to install the Plugin vdr-pvr350.
If the ivtv-driver is not yet installed emerge will automatically
do that. To have ivtv module loaded at boot we add it to
/etc/modules.autoload.d/kernel-2.6
</p>

<pre caption="Installing PVR350-Plugin">
# <i>emerge vdr-pvr350</i>
# <i>echo ivtv &gt;&gt; /etc/modules.autoload.d/kernel-2.6</i>
</pre>

<p>
<uri link="#channel_list">Continue with configuring your channel-list</uri>
</p>

</body>
</section>

<section id="vdr-xineliboutput">
<title>Software decoding: Plugin vdr-softdevice</title>
<body>
<p>
Now that the basic installation is over, you need to configure VDR. Switch to
your output screen and follow the on-screen instructions. VDR asks you to press
various keys on your remote control to learn the correct key codes. In case you
don't own a remote control unit, you can use your keyboard. If you only have a
budget card, you need to install a software output plugin, or <e>softdevice
plugin</e>. This decodes the stream and offers a device to access.
</p>

<p>
To install it, we have to emerge <c>vdr-softdevice</c>. Don't forget
to enable the plugin.
</p>

<pre caption="Installing the softdevice plugin">
# <i>emerge vdr-softdevice</i>
# <i>emerge --config vdr-softdevice</i>
</pre>

<p>
To select the proper video and audio output, edit
<path>/etc/conf.d/vdr.softdevice</path>.

For the method described in here just keep the value "shm" for SOFTDEVICE_VIDEO_OUT.
</p>

<note>
If you do not want to think about an own keyboard-layout for controlling vdr with softdevice/shm
there is a remote configuration file available at Matthias Schwarzott's <uri
link="http://dev.gentoo.org/~zzam/remote.softdevice-shm.conf">devspace</uri>. You will need to
copy it to <path>/etc/vdr/remote.conf</path> and run <c>chown vdr:vdr</c> on the file to get it working.
</note>

</body>
</section>
<section id="vdr-xineliboutput">
<title>Software decoding: Plugin vdr-xineliboutput</title>
<body>

<p>
Some people prefer to use <c>vdr-xineliboutput</c>, because it can also work
remotely. We'll now teach you how to configure <c>vdr-xineliboutput</c> on your
host and client. First, the host setup:
</p>

<pre caption="Installing vdr-xineliboutput">
# <i>emerge vdr-xineliboutput</i>
# <i>emerge --config vdr-xineliboutput</i>
</pre>

<p>
Adding command line options at this point is crucial for your softdevice to
work. For more options, see <c>vdr --help</c>.
</p>

<pre caption="Adding command line options to /etc/conf.d/vdr.xineliboutput">
_EXTRAOPTS="--local=none --remote=37890"
</pre>

<p>
The next step is to edit <path>/etc/vdr/svdrphosts.conf</path>. This file
describes a number of host addresses that are allowed to connect to the SVDRP
port of the video disk recorder running on the host system.
</p>

<pre caption="Editing /etc/vdr/svdrphosts.conf">
<comment>(The proper syntax is: IP-Address[/Netmask])</comment>
127.0.0.1             <comment>(always accept localhost)</comment>
192.168.1.0/24        <comment>(any host on the local net)</comment>
#204.152.189.113      <comment>(a specific host)</comment>
#0.0.0.0/0            <comment>(any host on any net (USE THIS WITH CARE!))</comment>
</pre>


<p>
Now, simply <c>emerge media-plugins/vdr-xineliboutput</c> on your client, and
start it.
</p>

<pre caption="Client setup">
# <i>emerge vdr-xineliboutput</i>
$ <i>vdr-sxfe xvdr://hostname</i>
</pre>

<p>
Sit back and enjoy your new video streaming capabilities. :)
</p>

<p>
<uri link="#channel_list">Continue with configuring your channel-list</uri>
</p>

<note>
There is also a Plugin which just simulates the existance of a real output-device
(vdr-dummydevice) for some fancy uses like record-only-servers,
but that is more advanced than a normal VDR setup.
</note>

</body>
</section>
</chapter>

<chapter id="channel_list">
<title>Creating a channel-list</title>
<section>
<body>

<p>
To make vdr really useful you need to create an apropriate channel-list.
</p>

<p>
There is more than one way to get a working list of channels (besides downloading one).
The channel-list installed as default is for DVB-S reception on Astra on 19.2°E.
</p>

</body>
</section>
<section>
<title>Using dvbscan from linuxtv-dvb-apps</title>
<body>

<pre caption="Installing linuxtv-dvb-apps">
# <i>emerge linuxtv-dvb-apps</i>
</pre>

<p>
Find the correct frequency-list for your region/type of reception.
These files are stored under /usr/share/dvb/scan.
For reception with DVB-T in Germany, Region Nuernberg you need to use the file
/usr/share/dvb/scan/dvb-t/de-Nuernberg.
</p>

<pre caption="Scanning with dvbscan">
$ <i>dvbscan -o vdr /usr/share/dvb/scan/dvb-t/de-Nuernberg &gt; /etc/vdr/channels.conf</i>
</pre>

</body>
</section>
<section>
<title>Using the Plugin vdr-reelchannelscan</title>
<body>

<p>
First deleting the content of the existing channel-list.
</p>

<pre caption="Cleaning old channel-list">
$ <i>&gt; /etc/vdr/channels.conf</i>
</pre>

<pre caption="Installing and activation vdr-reelchannelscan">
$ <i>emerge vdr-reelchannelscan</i>
$ <i>emerge --config vdr-reelchannelscan</i>
</pre>

<p>
Now that you has vdr-reelchannelscan installed and activated you need to start vdr.
</p>

<pre caption="Installing and activation vdr-reelchannelscan">
$ <i>/etc/init.d/vdr start</i>
</pre>

</body>
</section>

<section>
<title>Channels for Systems using vdr-analogtv</title>
<body>

<p>
You'll probably want to configure your channels at this point. The VDR project
provides you with some examples which can be found at
<path>/usr/share/doc/vdr-analogtv-$version/examples/</path>, as long as you've
installed &gt;=<c>media-plugins/vdr-analogtv-1.0.00-r1</c>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Starting VDR</title>
<section>
<body>
<p>
Next, start VDR and add it to the default runlevel:
</p>

<pre caption="Starting VDR">
# <i>/etc/init.d/vdr start</i>
* Preparing start of vdr:
*   config files ...                                        [ ok ]
*   Waiting for prerequisites (devices nodes etc.) ...      [ ok ]
* Starting vdr ...                                          [ ok ]
*   Waiting for working vdr ...                             [ ok ]
</pre>

<pre caption="Adding vdr to the default runlevel">
# <i>rc-update add vdr default</i>
</pre>

<p>
Now that the basic installation is over, you need to configure VDR. Switch to
your output screen and follow the on-screen instructions. VDR asks you to press
various keys on your remote control to learn the correct key codes. In case you
don't own a remote control unit, you can use your keyboard. If you only have a
budget card, you need to install a software output plugin, or <e>softdevice
plugin</e>. This decodes the stream and offers a device to access.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Troubleshooting</title>
<section>
<body>

<note>
If you need any help, you can always ask someone in <uri
link="irc://irc.freenode.org/gentoo-vdr">#gentoo-vdr</uri>, or look around on
our <uri link="http://forums.gentoo.org/">forums</uri>.
</note>

</body>
</section>
</chapter>
</guide>
