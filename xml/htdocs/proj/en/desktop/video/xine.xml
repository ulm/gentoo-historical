<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/desktop/video/xine.xml,v 1.20 2006/05/02 07:31:51 flameeyes Exp $ -->

<guide link="/proj/en/desktop/video/xine.xml" lang="en">
<title>xine-lib and related</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>

<abstract>
Maintainer notes about xine-lib package and its relatives.
</abstract>


<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.14</version>
<date>2006-05-02</date>

<chapter> <!-- xine-lib -->
<title>xine-lib</title>

<section> <!-- Introduction -->
<title>Introduction</title>

<body>

<p>
<c>media-libs/xine-lib</c> is the package that carries the core of xine video
player. Differently from <c>mplayer</c> that is a standalone program, xine
frontends uses <path>libxine</path> to play video files. This has the
disadvantages that a crash inside <path>libxine</path> shows up as a crash of
the frontend itself.
</p>

<p>
For this reason <c>xine-lib</c> package must be managed carefully, to avoid
adding dangerous crashes that might be difficult to reproduce (the same happened
in the past). As in many cases the crashes are difficult to grasp just looking
at the code, as there might be symbols collisions and similar stuff, to report
bugs it's important to produce also a valid
<uri link="/proj/en/qa/backtraces.xml">backtrace</uri> of the crash.
</p>

<p>
Here you'll find a lot of "why and how" about <c>xine-lib</c> and related
packages like <c>xine-ui</c>, <c>gxine</c> and so on. Hopefully, this guide will
be updated during the time, also when maintainer changes.
</p>

</body>
</section>

<section> <!-- Patches -->
<title>Patches</title>

<body>

<p>
<c>xine-lib</c> is classically heavy patched on Portage tree. Although the
original reason was because of
<uri link="/proj/en/qa/automagic.xml">automagic dependencies</uri>, these are
almost entirely fixed upstream; what remains now are patches and fixes for
"external projects" like the internal copy of <c>ffmpeg</c>, or <c>vidix</c>,
that requires to be, or also changes that are a bit intrusive and upstream is
not likely to apply (like the textrel patch that doesn't work with GCC 2.95).
There are also extra patches to fix crashes and symbols' collisions, but those
are being merged upstream, too.
</p>

<p>
If a patch that is not Gentoo-specific is being added to the ebuild, is usually
suggested to send it to <path>xine-devel</path> mailing list on
<uri link="http://sourceforge.net/projects/xine/">xine project space</uri> to
be applied upstream.
</p>

<p>
As <c>xine-lib</c> uses a number of libraries that are synced from time to time
with its source tree, the patches that changes files imported from other
projects are not accepted by <c>xine-lib</c>'s upstream and needs to be sent to
the originating project. The main examples are <c>ffmpeg</c> and <c>vidix</c>.
In those cases, if the patch is applied upstream, it might be usefult to ask
for a sync of the sources to xine's developers.
</p>

<p>
The patches are hosted in CVS inside <path>gentoo/src/patchsets/xine-lib</path>
and are organized by version. Released patchsets are tagged with the name of the
tarball minus the <path>.tar.bz2</path>. The directories contains also a series
file, as they are used by quilt: just symlink the checked out directory inside
an extracted source tree of xine-lib (for that version) and use <c>quilt</c> to
manage the patches.
</p>

<impo>
Also if usually this point was never stressed out, now that patches are hosted
on the CVS it's important that they bring a description in the header, with also
a link to relevant bugs, both in Gentoo and upstream.
</impo>

</body>
</section>

<section> <!-- External and internal libraries -->
<title>External and internal libraries</title>

<body>
<p>
As many other multimedia programs, also <c>xine-lib</c> has dependencies on a
lot of libraries for format input and output. Most of them are optional, and
some of them are included inside the same source tarball as the library.
</p>

<p>
The patches used in the past to use external libraries intead of internals are
now (as of 1.1.1 version of <c>xine-lib</c>) included in the original sources.
The use of external libraries is enabled passing
<c>--with-external-<e>library</e></c> to the <c>configure</c> script. It's
preferred to use the external libraries (Portage-provided) so that if they need
to be fixed, xine will make use of the fixes. This was for example the case of
<path>libmad</path> decoding library on 64-bit systems.
</p>

<note>
As also <path>libmad</path> is used external or not used at all, <c>xine-lib</c>
might not be able to decode mp3 audio without it. Since versions
1.1.2_pre20060328-r1 this doesn't lead to crashes anymore.
</note>

<p>
An exception to the above rules applies to <c>libdvdnav</c>. For unknown reasons
using the external library a lot of DVDs seems not to work reliably on xine (while
they works fine on vlc using the same external library), and also seeking
capabilities are lost, so the internal library is always used.
</p>

<p>
A different treatment is used for <c>ffmpeg</c>. The included version is highly
recommended by upstream, and sometimes it's just the only practicable way, as the
snapshot on portage might be too updated or too outdated to be used. For this
reason, the default behavior should be to use the internal copy, while the
<b>ffmpeg</b> useflag is used to choose the external copy of it. The
external copy is usually faster and supports extra formats or variations of some
specific video or audio format.
</p>

<warn>
As <c>xine-lib</c> does not detect which formats are supported by ffmpeg at
runtime, when it's released it usually requires a newer snapshot of that package
of the same date or later from when xine devels synced last time. In this case,
-r0 ebuilds might not have <b>ffmpeg</b> useflag and use the internal copy
until an external version is available to be used.
</warn>

<p>
The current ebuilds have to do some tricks to get the path for X libraries, such
as libXv and libXvMC; the reason of this is that the default configure script
does not seem to take the right libraries when looking for them in the usual
places, and we need to pass them the right path. As their path depends vastly
on the version of X11 installed in the system (that might be XFree or Xorg), the
<c>get_x11_dir</c> function can be used to find them.
</p>

<p>
In particular there's the problem that using three different XvMC libraries is
a complex way to handle <b>xvmc</b> flag. There should be support for XvMCW
library (that allows to configure at runtime which XvMC backend to use), but
that requires a newer version of <c>xorg-x11</c>, the experimental 6.8.99 branch
or the modular version. For this reason, it can't be enabled until a stable
modular <c>xorg-x11</c> is out of package masking.
</p>

</body>

</section>

<section> <!-- CFLAGS -->
<title>CFLAGS</title>

<body>

<p>
As many other multimedia programs, also <c>xine-lib</c> has its own problems
with extremely riced flags. Actually, the original xine-lib configure uses by
itself quite extreme flags, on x86 and amd64 platforms. A saner behaviour can be
applied by using the <c>--disable-optimisations</c> option at <c>./configure</c>.
</p>

<p>
Unfortunately, because of the need to build <path>libxine</path> with PIC
enabled and the scarse quantity of registers in x86 platform, a few extra flags
needs to be pushed in. For example it's not possible to build <c>xine-lib</c>
without <c>-fomit-frame-pointer</c> in x86, and this makes difficult to handle
debug. Also, you cannot build it without any kind of <c>-O</c> flag, so if user
doesn't provide one, you should at least use <c>-O2</c>.
</p>

<note>
The aforementioned problem is solved in version 1.1.2_pre20050328-r5. Leave the
note until that's stable.
</note>

</body>
</section>

<section> <!-- useflags -->
<title>useflags</title>

<body>

<p>
<c>xine-lib</c> uses quite a few useflags. Almost every dependency has its own
useflag to enable or disable it. The useflags works basically as every other
useflag with the same name in other packages, but there are a couple that have
notes.
</p>

<p>
The first note is about <b>win32codecs</b> useflag. This is used to enable
the support for the binary win32 codecs that are emulated using a subset of
Wine functions. This flag does not enable the ASF demuxer, so if you want to
play WMV files you also need to enable the <b>asf</b> useflag (present because
the ASF demuxer might be illegal to be used in some countries). This flag is
also needed to be able to play WMA files with <c>ffmpeg</c>.
</p>

<p>
Another flag having a special treatament is <b>xvmc</b>, that conditions the
usage of three <c>VIDEO_CARDS</c> values that might be enabled directly as
useflags or by setting the <c>VIDEO_CARDS</c> variable: <b>nvidia</b>,
<b>i810</b> and <b>via</b>. The single <b>xvmc</b> alone will link
<path>libXvMCW</path> if present, a wrapper library that allows to choose which
other low-level library to use, while setting one of the other useflags will
enable the correspondant driver. If more than one driver is enabled, the ebuild
will behave as if none were enabled, thus using <path>libXvMCW</path> if present
or disabling xvmc in the contrary.
</p>

<p>
A note about the <b>debug</b> useflag is probably good; this useflag was added
after request in
<uri link="http://bugs.gentoo.org/show_bug.cgi?id=112980">bug #112980</uri>, and
just adds <c>-DDEBUG</c> to the flags passed to compiler. <c>xine-lib</c> has
a way to create a "debug build" by using special make targets, this build simply
adds <c>-DDEBUG -g</c> flags to the compiler flags. Using that with <b>debug</b>
useflag is bad looking inside the ebuild. The <c>-g</c> flag should be passed
by the user if he really wants debug, so the only thing ad hoc for the package
is the <c>-DDEBUG</c> flag. If you want to be able to get meaningful backtraces,
please follow <uri link="/proj/en/qa/backtraces.xml">the related guide</uri>.
</p>

</body>
</section>

<section> <!-- The TEXTRELs issue -->
<title>The TEXTRELs issue</title>

<body>

<p>
<c>xine-lib</c>, along with other multimedia software, has problems related to
TEXTRELs in compiled binaries on x86 platform. The problem is stated in
<uri link="http://bugs.gentoo.org/show_bug.cgi?id=113255">bug #113255</uri>.
</p>

<p>
Thanks to the PaX Team, <c>xine-lib-1.1.1-r3</c> and later versions are now
fixed not to have TEXTRELs due to the win32codecs support and to the
postprocessing filters of xine itself. There are still TEXTRELs due to
<c>ffmpeg</c> code that needs to be fixed in ffmpeg first.
</p>

</body>
</section>

<section> <!-- CVS Snapshot -->
<title>CVS Snapshots</title>

<body>

<p>
Missing an updated release after 1.1.1, and this having quite a few of problems
(counting in also a security issue), it happened that a pre-1.1.2 snapshot was
made and also marked stable. In case there will be need for more CVS snapshots,
these are the basic instructions needed to generate one.
</p>

<p>
The first thig is to get a CVS checkout of xine-lib sources, and making sure it
is complete and not with a lot of FIXME in the log. After that you can use the
simple command <c>make dist</c> to build a tarball to use for the ebuild. Make
sure you try a <c>make distcheck</c> to make sure that everything is present,
and run a few compile tests as well as runtime tests so that it works.
</p>

<p>
Patches has to be applied over that snapshot, not included in the snapshot
itself, to make sure they don't collide if they have to be modified. The patches
can be handled as usual from Gentoo CVS with <c>quilt</c>.
</p>

<p>
The naming of the snapshot tarball should be using <c>${P}</c> variable, and
should be compressed with <c>bzip2</c>. The source directory would be named as
<c>make dist</c> command did already (in this case <path>xine-lib-1.1.2cvs</path>),
the one of the patchset can be either <c>${P}</c> or simply
<path>xine-lib-1.1.2cvs${DATE}</path>.
</p>

</body>

</section>

</chapter>

<chapter> <!-- Frontends -->
<title>Frontends</title>

<section> <!-- xine-ui -->
<title>xine-ui</title>

<body>
<p>
<c>media-video/xine-ui</c> is considered the main xine frontend, as it's
released by the same project as <c>xine-lib</c> and it is toolkit-agnostic.
</p>

<p>
Its handling is much simpler than <c>xine-lib</c>'s, the patches can still be
sent upstream to <path>xine-devel</path> mailing list, and then dropped when the
new releases are done.
</p>

<p>
In a fashion similar to xine-lib, also patches to <c>xine-ui</c> are hosted in CVS
at <path>gentoo/src/patchsets/xine-ui</path>, orderd by version. The directories
are also <c>quilt</c> patches so they can be symlinked and then managed by it.
It's important to document the non-obvious patches, as done for xine-lib.
</p>

</body>

</section>

<section> <!-- gxine -->
<title>gxine</title>

<body>
<p>
<c>media-video/gxine</c> is a frontend based on GTK2 toolkit, it has fewer
optional dependencies than <c>xine-ui</c> so it's usually simpler to manage.
Although it had a few security vulnerabilities in the past, the new code should
be safer. Patches to this can be sent to <path>xine-devel</path> mailing list as
usual or to the upstream maintainer,
<mail link="linux@youmustbejoking.demon.co.uk">Darren Salt</mail>.
</p>

<p>
Of the few useflags, the only one that requires a bit of handling is
<b>nsplugin</b>, that is used to build and install the Mozilla plugin.
</p>

</body>
</section>

<section> <!-- Kaffeine -->
<title>Kaffeine</title>

<body>
<p>
<c>media-video/kaffeine</c> is a KDE application that used to be a
<c>xine-lib</c> frontend, while at the moment it supports not only xine, but
also mplayer and gstreamer <e>KParts</e>. Xine remains the main engine and it's
the only mandatory one.
</p>

<p>
Its handling is usually in KDE herd's hands, as most of the problems that might
arise with it are related to <c>xine-lib</c> itself. The only important detail
to remember is that it requires a newer <c>xorg-x11</c> as there were troubles
with old versions and with <c>xfree</c>.
</p>
</body>
</section>

<section> <!-- amaroK -->
<title>amaroK</title>

<body>
<p>
<c>media-sound/amarok</c> is an advanced audio player for KDE, that uses xine as
main engine (the default one). It's in sound and KDE herds, and it's usually not
a big trouble to handle as upstream takes care of most of the issues.
</p>

<p>
The most common problem with amaroK and xine backend is the interface skipping
all around an mp3 playlist. This is usually due to someone who builds
<c>xine-lib</c> with <b>-mad</b> useflag, and then tries to play mp3s with
amaroK using xine engine. Another cause would be unmerging <c>libmad</c>, this
way the mad plugin for xine cannot be loaded and so it doesn't play mp3s either.
</p>

<p>
The same applies when building <c>xine-lib</c> with <b>-asf</b> and trying to
play WMA files, or <b>-aac</b> trying to play AAC files. Those problems are
usually due to users so are not related to this guide.
</p>

</body>

</section>

</chapter>

</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; indent-mode normal; -->
