<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/desktop/video/vlc.xml,v 1.12 2005/12/08 12:32:07 flameeyes Exp $ -->

<guide link="/proj/en/desktop/video/vlc.xml" lang="en">
<title>vlc and related</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>

<abstract>
Maintainer notes about vlc and its relatives
</abstract>


<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.12</version>
<date>2005-12-08</date>

<chapter> <!-- vlc -->
<title>vlc</title>

<section> <!-- Introduction -->
<title>Introduction</title>

<body>

<p>
<c>media-video/vlc</c> is
<uri link="http://www.videolan.org/">Videolan Client</uri>, a multimedia player
with different interface modules, though primarily as a streaming client.
There are no frontends a part the core <c>vlc</c> binary, but the different
interfaces are loaded as modules.
</p>

<p>
Because of its structure, a crash into the decoding routines means a complete
crash of the interface, too. A careful maintenance is needed, similarly to
<c><uri link="xine.xml">xine-lib</uri></c>.
</p>

<p>
Its maintenance is usually simple, as it's one of the most portable solutions
(it runs natively on Linux, Windows, OSX and FreeBSD). Related to <c>vlc</c>
there are, though, different libraries that might be a problem to maintain,
as they are handled differently in Portage from what the other distributions do.
</p>

<p>
As many other software, also <c>vlc</c> is shipped with a <path>debian</path>
subdirectory. In particular, inside that directory there's a
<path>.desktop</path> file that can be installed to provide a menu entry for
vlc itself.
</p>

</body>
</section>

<section> <!-- Patches -->
<title>Patches</title>

<body>

<p>
Patches for <c>vlc</c> are a bit different respect <c>xine-lib</c>, as they are
sometimes exclusive to Gentoo Linux and simply can't be upstreamed at all. This
is the case of the patch that removes glide v2 support and the ones that changes
some libraries from builtin to plugins (with the assumption that Gentoo always
have them as PIC libraries).
</p>

<p>
In general there might be necessity to patch vlc when something in its
dependencies changes, as it's usually quite good-written the internal code and
also the <path>configure.ac</path>. In the past it needed patching to get
wxGTK or Samba dependencies fixed.
</p>

<p>
The bootstrap script provided with the sources should not be used to rebuild
autotools support. While it's usually better to use the upstream-provide file,
that bootstrap script contains also instructions to update gettext support, that
might create confusion with the shipped version, and requires also the cvs
command to get autopoint right. A simple <path>eautoreconf</path> call should
be enough.
</p>

<p>
While there is a Bugzilla for VideoLan software, it's mostly dead, and not
followed by developers at all. The right place where to send patches for
upstream is via their <path>vlc-devel</path>
<uri link="http://developers.videolan.org/lists.html">mailing list</uri>.
</p>

<p>
The patches are hosted in CVS inside <path>gentoo/src/patchsets/vlc</path>
and are organized by version. Released patchsets are tagged with the name of the
tarball minus the <path>.tar.bz2</path>. The directories contains also a series
file, as they are used by quilt: just symlink the checked out directory inside
an extracted source tree of vlc (for that version) and use <c>quilt</c> to
manage the patches.
</p>

<note>
Also if usually this point was never stressed out, now that patches are hosted
on the CVS it's important that they bring a description in the header, with also
a link to relevant bugs, both in Gentoo and upstream.
</note>

<p>
A single note is worth with respect to compiler's flags handling: GCC 2.95
requires to strip <path>-fomit-frame-pointer</path> flag or the build does not
work; that flag is actually required to build <c>vlc</c> with recent GCCs.
</p>

</body>
</section>

<section> <!-- External libraries and plugins -->
<title>External libraries and plugins</title>

<body>

<p>
<c>vlc</c> uses a mixed architecture for linking decoding libraries: some of
them are linked as <e>builtin</e>, statically into the vlc binary, while others
are built as <e>plugins</e> that gets loaded at runtime.
</p>

<p>
As the plugins are by all means shared objects, they must be built with PIC
enabled and can't link against static non-PIC libraries. As some libraries used
to decode or demux (such as libmatroska and libdts) used to be static libraries
only, the configure sometimes checks for two names for libraries, one for the
PIC version (<path>_pic</path> or <path>_p</path>) and one for the non-PIC,
enabling the plugin or the builtin depending on the case.
</p>

<p>
As in Gentoo most of the libraries are patched to build the PIC shared version
with the same name of the original one, the configure script sometimes gets
false negatives, and builds as builtin something that could have been built as
plugin. In those cases, it's needed to edit the <path>configure.ac</path> file
to get the right name for the library to build as plugin.
</p>

<p>
The use of plugins instead of builtins allows VLC to continue working also if
one of the libraries gets broken by a changed ABI, as the plugins fails to load
on demand, while builtins breaks the main executable file. For this reason, the
plugins are preferred over builtins.
</p>

</body>
</section>

<section> <!-- Testing versions -->
<title>Testing versions</title>

<body>

<p>
As many other projects, also <c>vlc</c> releases beta versions of the code
before the actual final release. These beta versions are usually useful to test
the changes to the dependencies and the code in package.mask so that problems
can be found before unleashing the final version to users.
</p>

<p>
Test versions are usually announced on <path>vlc-devel</path> mailing list and
can be found at
<uri link="http://download.videolan.org/pub/videolan/testing/">http://download.videolan.org/pub/videolan/testing/</uri>.
The naming scheme used is X.Y.Z-testT.
</p>

<p>
Since version 0.8.4, the ebuild carries the transformation between _beta to
-beta versions and uses the right URL for betas without having to edit it by
hand.
</p>

</body>
</section>

<section> <!-- useflags -->
<title>useflags</title>

<body>

<p>
As many other multimedia programs, also <c>vlc</c> have quite a lot of useflags
to disable and enable dependencies and extra features. There are a few missing
dependencies that are not enabled, and a few useflags that were removed for
many reasons in the past.
</p>

<p>
The <b>nsplugin</b> useflag is used to build the Netscape-compatible plugins
(used by Mozilla, Firefox and Konqueror); this plugin is quite fragile, and the
useflag is disabled till 0.8.2 versions, as they are patched to build it with
PIC enable. It also builds against Gecko-SDK instead of building against the
complete <c>mozilla</c> suite, to avoid users to have to updated the suite to
get the plugin working on Firefox. The plugin itself is unstable anyway, and if
bugs are reported is probably better to remove it or declare it experimental.
</p>

<p>
As of version 0.8.4, <c>vlc</c> dropped the <b>unicode</b> useflag, this because
the code shipped by upstream is currently bound to <c>wxGTK</c> 2.6 with unicode
support, and it's then better to just stick with that version instead of
tinkering to enable the non-unicode support. <c>wxGTK</c> 2.6 supports unicode
natively and it's no more an experimental version as it was with 2.4 version.
For this reason the <path>--enable-utf8</path> option is also always passed to
the <c>econf</c> line.
</p>

<table>
  <tr>
    <th>Useflag</th>
    <th>Local description</th>
    <th>Dependency</th>
    <th>Reason for removing</th>
  </tr>
  
  <tr>
    <ti>threads</ti>
    <ti>Thread support</ti>
    <ti>dev-libs/pth</ti>
    <ti>
      Pth's threading does not work fine with many of the libraries used by VLC
      itself, enabling it makes the software highly unstable. Don't make an
      useflag, instead pass <path>--disable-pth</path> directly to <c>econf</c>.
    </ti>
  </tr>
  
  <tr>
    <ti>slp</ti>
    <ti>SLP protocol in services' discovery</ti>
    <ti>net-libs/openslp</ti>
    <ti>
      <c>vlc</c> up to 0.8.4 is incompatible with latest <c>openslp</c> API, so
      it won't build against it. To avoid automagic dependencies, pass
      <path>--disable-slp</path> to <c>econf</c>.
    </ti>
  </tr>
  
  <tr>
    <ti>hal</ti>
    <ti>HAL support in services's discovery</ti>
    <ti>=sys-apps/hal-0.4*</ti>
    <ti>
      <c>vlc</c> until version 0.8.4-r1, uses <c>hal</c> 0.4 API, that is
      deprecated and no more supported. As both KDE and GNOME depends on newer
      versions of it, the support is forcefully disabled in previous versions
      with <path>--disable-hal</path>. Support is cleanly working on 0.8.4-r1
      and later on.
    </ti>
  </tr>
  
  <tr>
    <ti>portaudio</ti>
    <ti>PortAudio output plugin</ti>
    <ti>&gt;=media-sound/portaudio-19</ti>
    <ti>
      The required version of <c>portaudio</c> is the currently experimental
      version (19), not present in Portage and too unstable.
    </ti>
  </tr>
  
  <tr>
    <ti>h264</ti>
    <ti>Enables H.264 encoding support with libx264</ti>
    <ti>media-libs/x264-svn</ti>
    <ti>
      This extra support is needed for encoding of video using H.264 codec, but
      the library used (<c>x264-svn</c>) is not yet stable and the API is not
      compatible with <c>vlc</c>. The support is then forcefully disabled by
      <path>--disable-h264</path> to avoid automagic dependencies.
    </ti>
  </tr>
  
  <tr>
    <ti>dirac</ti>
    <ti>Enables experimental dirac codec</ti>
    <ti>media-libs/dirac</ti>
    <ti>
      Missing testcase to evaluate correct behavior of the codec. Until a dirac
      encoded file can be used to check correctness, leave disabled.
    </ti>
  </tr>
  
  <tr>
    <ti>avahi</ti>
    <ti>Enables Bonjour service discovery via Avahi</ti>
    <ti>net-dns/avahi</ti>
    <ti>
      Up to 0.8.4, <c>vlc</c> required a version of <c>avahi</c> between 0.3 and
      0.5, not supporting 0.6 API changes. The flag is present since 0.8.4-r1
      with a patch that fixes the calls to work on both old and new <c>avahi</c>
      versions.
    </ti>
  </tr>

  <tr>
    <ti>tremor</ti>
    <ti>Enables Tremor decoder support</ti>
    <ti></ti>
    <ti>Missing dependency</ti>
  </tr>

  <tr>
    <ti>tarkin</ti>
    <ti>Enables experimental tarkin codec</ti>
    <ti></ti>
    <ti>Missing dependency</ti>
  </tr>

  <tr>
    <ti>cyberlink</ti>
    <ti>Enable CyberLink UPnP stack</ti>
    <ti></ti>
    <ti>Missing dependency</ti>
  </tr>
</table>

</body>
</section>

<section> <!-- ffmpeg handling -->
<title>ffmpeg handling</title>
<body>

<p>
<c>ffmpeg</c> handling in VLC is somewhat particular, respect other software.
First of all, it doesn't carry an internal version. The <b>ffmpeg</b> useflag
enables generic <c>ffmpeg</c> support, that is only external.
</p>

<p>
Other than enabling <c>ffmpeg</c> support, when enabling the useflag you also
need to check for how that has been compiled, as <c>vlc</c> likes to know if
<c>ffmpeg</c> was built with <b>aac</b>, <b>dts</b>, <b>zlib</b> and
<b>encode</b> (lame support).
</p>
</body>
</section>

</chapter>

</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; -->
