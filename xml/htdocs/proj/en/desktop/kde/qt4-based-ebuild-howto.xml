<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/desktop/kde/Attic/qt4-based-ebuild-howto.xml,v 1.4 2009/06/10 18:58:46 hwoarang Exp $ -->

<guide link="/proj/en/desktop/kde/qt4-ebuild-howto.xml" lang="en">
<title>Qt4-based Ebuild HowTo</title>

<author title="Author">
	<mail link="hwoarang@gentoo.org">Markos Chandras</mail>
</author>

<abstract>
This guide is intented to give an overview of how to create a Qt4-based ebuild. It will assist users to write proper ebuilds for Qt4 based packages. using Gentoos' qt4 eclass and splitted Qt4 dependencies
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.2.1</version>
<date>2009-06-10</date>

<chapter>
	<title>Choosing eclass and EAPI version</title>
		<section>
		<title>Valid EAPI version</title>
		<body>
		<p>The first step for your shiny Qt4-based ebuild, is to specify the right EAPI. Current eclass is EAPI 2 compatible,
		so all you need to do is</p>
		<pre caption="Specify correct EAPI version">
EAPI="2"
		</pre>
		<p>That was the most important step for your ebuild.</p>
		</body>
		</section>
		<section>
		<title>Inherit qt4 eclass</title>
		<body>
		<p>All qt4 based ebuilds, can use qt4 eclass which provides usefull tools and operation (listed below) for building qt4 applications.</p>
		<pre caption="Inherit qt4 eclass">
inherit qt4
		</pre>
		</body>
		</section>
</chapter>

<chapter>
	<title>Dependencies and Use flags</title>
	<section>
	<title>Depend on qt4 split packages</title>
	<body>
	<p>Since Qt-4.4.0, Gentoo Qt team, splits monolithic Qt4 package into smaller packages. Those are</p> 
	<ul>
	<li> x11-libs/qt-assistant</li>
	<li> x11-libs/qt-core</li>
	<li> x11-libs/qt-dbus</li>
	<li> x11-libs/qt-demo</li>
	<li> x11-libs/qt-gui</li>
	<li> x11-libs/qt-opengl</li>
	<li> x11-libs/qt-phonon</li>
	<li> x11-libs/qt-qt3support</li>
	<li> x11-libs/qt-script</li>
	<li> x11-libs/qt-sql</li>
	<li> x11-libs/qt-svg</li>
	<li> x11-libs/qt-test</li>
	<li> x11-libs/qt-webkit</li>
	<li> x11-libs/qt-xmlpatterns</li>
	</ul>
	<p>Now all you need to do, is to specify the correct modules on DEPEND variable</p>
	<pre caption="Simple example to demonstrate proper qt4 split dependencies usage">
DEPEND="x11-libs/qt-gui:4
	x11-libs/qt-sql:4"
	</pre>
	<warn>
	Even though there is a qt4 metapackage, you must NOT use it as a dependency.
	</warn>
	</body>
	</section>

	<section>
	<title>Debug and Release scope</title>
	<body>
	<p>Qt offers you the ability to build your applications using two different modes:</p>
	<ul>
	<li>Release: Leads to smaller binaries, usefull for the production state.</li>
	<li>Debug: Leads to bigger binaries, usefull for debugging during development process.</li>
	</ul>
	<p>Thus, qt4 eclass can use the 'debug' use flag in order to build your application with debug symbols.</p> 
	<pre caption="Add 'debug' use flag">
	IUSE="debug"
	</pre>
	</body>
	</section>

</chapter>


<chapter>
	<title>Preparing the package</title>
		<section>
		<title>src_prepare function</title>
		<body>
		<p>EAPI2 introduced the src_prepare function which is executed right after src_unpack. The default implementation does nothing.
		Most of the time, you wont need to use this function at all. Patches are applied automatically via autopatcher</p>
		</body>
		</section>
		<section>
		<title>Applying patches</title>
		<body>
		<p>Qt4 eclass uses the base eclass autopatcher in order to apply patches. All you have to do is to specify which patches 
		you want to apply using PATCHES variable</p>
		<pre caption="Simple example for using PATCHES variable">
PATCHES=(
	"${FILESDIR}/fixconfig.patch"
	"${FILESDIR}/fixgui.patch"
)
		</pre>
		<impo>
		Please note that PATCHES is an array, so you will always need to includes patches between parenthesis.
		</impo>
		</body>
		</section>
</chapter>

<chapter>
	<title>Configure the sources</title>
		<section>
		<title>The 'magic' eqmake4 tool</title>
		<body>
		<p>We provide a special function for configuring Qt4 project files. That is eqmake4 which is provided by qt4 eclass. It is based on qmake, plus it uses
	default Qt variables for proper package configuration. Packages should be configured under src_configure function.</p>
		<pre caption="Simple example for src_configure function">
src_configure() {
	eqmake4
}
		</pre>
		<impo>
		eqmake4 does not need a 'die' statement.
		</impo>
		<p>There are some rare occasions where eqmake4 fails, but qmake works. Please fill a <uri link="http://bugs.gentoo.org">bug</uri> about this in order to take care
	of it</p>
	</body>
	</section>
</chapter>

<chapter>
	<title>Installation</title>
		<section>
		<title>src_install function</title>
		<body>
		<p>Most Qt4 packages use INSTALL_ROOT variable instead of DESTDIR on their Makefiles. Make sure not to use DESTDIR on src_install,
		otherwise you will end up with Access violation errors.
		Below there is an example src_install for most Qt4 packages</p>
		<pre caption="Simple example for src_install function">
src_install() {
	emake INSTALL_ROOT="${D}" install || die "emake install failed"
	dodoc README AUTHORS || die "dodoc failed"
}
		</pre>
		</body>
		</section>
</chapter>

</guide>
