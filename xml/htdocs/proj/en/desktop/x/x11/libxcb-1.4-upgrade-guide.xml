<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/desktop/x/x11/libxcb-1.4-upgrade-guide.xml,v 1.9 2009/09/28 06:22:48 remi Exp $ -->

<guide link="/proj/en/desktop/x/x11/libxcb-1.4-upgrade-guide.xml" lang="en">
<title>Gentoo libxcb 1.4 Upgrade Guide</title>

<author title="Author">
  <mail link="remi" />
</author>

<abstract>
This guide shows how to upgrade from libxcb 1.1.90.2 and earlier to libxcb 1.4.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>
<version>0.1</version>
<date>2009-09-12</date>

<chapter>
<title>Upgrading to libxcb 1.4</title>
<section>
<body>

<pre caption="Updating xcb packages">
# <i>emerge -1av x11-proto/xcb-proto x11-libs/libxcb</i>
# <i>emerge -1av x11-proto/xproto x11-proto/xextproto x11-libs/libX11 x11-libs/libXext</i>
</pre>

<p>
You now have all the needed packages with support for the new libxcb.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Fixing broken libtool archives</title>
<section>
<body>

<p>
While the update may be over and your system may still work, emerging new
packages or updates might yield a few unpleasant surprises, due to libtool's
infamous archives : <c>.la</c> files.
</p>

<p>
The problem is that until recently, libX11 used a private libxcb library called
<c>libxcb-xlib.so</c>, created specifically for libX11. While that is no
problem in itself, this tiny library polluted (almost) every single <c>.la</c>
file on your system. That's how libtool works.
</p>

<p>
But this is now turning into a problem since newer versions of libxcb no longer
ship this library (and libX11 was fixed accordingly, of course). We now need to
get rid of all references to this library within <c>.la</c> files.
</p>

<p>
To do so, just run <c>/usr/portage/x11-libs/libxcb/files/xcb-rebuilder.sh</c>
to fix all <c>.la</c> files on your system.
</p>

<p>
The tool will also report whether shared libraries (<c>.so</c> files, usually
located in <c>/lib</c> and <c>/usr/lib</c>) still reference the now defunct
library. If the tool reports broken packages, please read on. If not, lucky
you, your system is ready to go :)
</p>

</body>
</section>
</chapter>

<chapter>
<title>Fixing "broken" shared libraries</title>
<section>
<body>

<p>
To avoid completely breaking users' system, we decided to keep
<c>libxcb-xlib.so</c> so that you get the chance to fix your system at your own
pace. If you've followed the above instructions, your system should now work
properly, both at build-time and run-time.
</p>

<p>
But before you can remove <c>libxcb-xlib.so</c>, you will need to rebuild a few
packages. If you do not rebuild them, removing the old library will
<b>break</b> your system.
</p>

<p>
Run the following one liner to rebuild a simple, yet effective, subset of
potentially broken packages. Do not worry, packages you don't have installed
will not be installed.
</p>

<pre caption="Rebuilding essential packages first">
# <i>emerge --oneshot \
$(for i in x11-proto/ x11-libs/libxcb x11-libs/libX11 x11-libs/libXext \
           x11-libs/libX x11-libs/xcb-util x11-libs/cairo \
           x11-libs/pango x11-libs/gtk\\+ \
           x11-libs/qt-gui; do \
    qlist -IC $i; \
done) -av</i>
</pre>

<p>
Once this is done, you can use <c>revdep-rebuild</c> (from
<c>app-portage/gentoolkit</c>) to finish fixing the rest of your system.
</p>

<pre caption="Rebuilding the remaining broken packages">
# <i>revdep-rebuild -L libxcb-xlib.so.0</i>
</pre>

<p>
When <c>revdep-rebuild</c> no longer reports broken packages, you can safely
remove <c>libxcb-xlib.so.0</c> from your library directory.
</p>

<pre caption="Removing the now unused libraries">
# <i>rm -i /usr/lib/libxcb-xlib.so*</i>
</pre>

</body>
</section>
</chapter>
</guide>
