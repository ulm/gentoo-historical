<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/desktop/x/x11/porting-modular-x-howto.xml,v 1.1 2006/01/03 08:10:44 fox2mike Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/proj/en/desktop/x/x11/porting-modular-x-howto.xml">
<title>Porting to Modular X HOWTO</title>

<author title="Author">
  <mail link="spyderous@gentoo.org">Donnie Berkholz</mail>
</author>

<abstract>
This guide shows you how to port packages to use the new modular X.Org.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2006-01-03</date>

<chapter>
<title>Background</title>

<section>
<title>Introduction</title>
<body>

<p>
You may be wondering, why in the world did one nice, easy xorg-x11 package turn
into almost 300 separate ones? And you'd certainly be justified in this. =)
It's not something Gentoo is doing independently of upstream X.Org; they're
splitting up all the packages into separate releases, and we're just following
along.
</p>

<p>
You can read up on the details at the <uri
link="http://www.gentoo.org/proj/en/desktop/x/x11/modular-x-howto.xml#doc_chap1_sect1">Migrating
to Modular X HowTo</uri> page.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Dependency checking</title>
<section>
<body>

<p>
We want to enumerate the dependencies as finely as possible, so people don't
to have unused cruft lying all over their systems for things they don't even
use, such as XPrint. So you want to depend directly upon the library and header
packages you need rather than any sort of virtual.
</p>

<p>
Also, we can't guarantee that people will still have subpackages installed just
because they have a metabuild installed, and eliminating that possibility of
breakage will save us all a lot of time that would be spent marking bugs
INVALID.
</p>

<p>
If I find any packages depending upon any of the metabuilds there will be, I
won't hesitate to hassle and haze the maintainer unto eternity.
</p>

<p>
First step is to either install modular X or find somebody who has it installed.
This can be done in a chroot -- there's no need to actually run X, you just need
to have its files available for dependency checking.
</p>

<pre caption="Getting the needed scripts">
$ <i>wget http://dev.gentoo.org/~spyderous/scripts/linking_libs.sh \
	http://dev.gentoo.org/~spyderous/scripts/included_headers.sh</i>
</pre>

<impo>
Do <e>not</e> use <c>gentoolkit-0.2.1_pre9</c>, it produces invalid output. See
<uri>https://bugs.gentoo.org/show_bug.cgi?id=111501</uri>.
</impo>

<p>
The first script, <c>linking_libs.sh</c>, checks a compilation log of your
package for all the libraries it links with, and prints out the packages those
libraries belong to.
</p>

<p>
The second script, <c>included_headers.sh</c>, scans the unpacked source of your
package for lines starting with #include, and grabs out include files contained
in &lt;&gt;. As of 9 Sept. 2005, it does work for ""-style includes as well as
&lt;&gt;.
</p>

<p>
Running these two scripts should get you a good list of packages for both
RDEPEND (for libraries) and DEPEND (headers and libraries). If a library shows
up in the RDEPEND list that doesn't show up in the DEPEND list, be suspicious;
it may be a "false dependency," (a library that's linked against for no reason).
</p>

<p>
Occasionally the relative header search in <c>included_headers.sh</c> will find
the wrong header, because there are multiple ones named the same, and thus will
return an incorrect package. Usually this is quite obvious.
</p>

<p>
If you specify the <c>-d</c> option, occasionally you'll run into a library or
header that comes up "Not found!" This may mean you've uninstalled a header the
package needs since compiling it, or it's an optional header you aren't using.
In the library case, it could mean you uninstalled the lib or perhaps it was
only an internally-built static library that was never installed. 
</p>

<p>
It's worth spending the time to figure out whether libraries or headers that
aren't found need to be added to the dependency list, particularly in the header
case since you don't need the headers installed to run the scan.
</p>

<p>
In some cases, packages require an actual X server of some sort. But if they
don't actually require it during the installation, I encourage you to not put
it into the RDEPEND. This breaks headless X installations, where the programs
actually run on another machine so only need local libraries and headers.
</p>

<p>
There are already a number of X servers in the tree, so if you do need an X
server, please include them all. Modular X's servers are in xorg-server; there's
a DirectFB server at xdirectfb; kdrive provides tiny X servers; and of course
old &lt;xorg-x11-7. Do specify the version restriction on xorg-x11, to ensure an
X server instead of a metabuild. In the near future, I anticipate kdrive moving
to xserver.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Dependency structure</title>
<section>
<body>

<p>
On to actually adding the dependencies -- you'll want a structure like this:
</p>

<pre caption="RDEPEND/DEPEND Structures">
RDEPEND="|| ( ( x11-libs/libXfoo
			x11-libs/libXbar
			blah? ( x11-libs/libXblah )
			whatever else shows up in the library run
		)
		virtual/x11
	)

DEPEND="${RDEPEND}
	|| ( (
			x11-proto/fooproto
			blah? ( x11-proto/blahproto )
			whatever else shows up in both script runs
		)
		virtual/x11
	)
</pre>

<impo>
Some of the results produced by the scripts <e>will</e> be redundant. If the
RDEPEND of one library includes another, you don't need to put both into the
dependencies. If the DEPEND of a library includes a proto, you <e>do</e> need it
in the DEPEND list of the package. Likely candidates for libraries that pull in
lots of other libraries are <c>libXaw</c>, <c>libXmu</c>, <c>libXpm</c>,
<c>libXcursor</c>, <c>libXt</c>. Just do <c>emerge -ep $library | grep
lib[SIX]</c>. Also keep in mind that other packages like <c>gtk+</c> have been
ported to modular dependencies, so they can pull in needed libraries as well. 
</impo>

<note>
Two separate USE flags both will bring in X, but one is not dependent on the
other. In this case, you will need to either duplicate the X dependency section
or define it elsewhere and include it as ${X_DEPEND}. If defined elsewhere,
remember to also include the parts specific to each USE flag.
</note>

<p>
The goal here is defaulting to the new, modular X, but allowing people to also
fulfill the dependencies with the old, monolithic xorg-x11 package. We're
dropping virtual/x11 entirely to encourage the enumeration of proper
dependencies.
</p>

<impo>
This should allow ~arch users to use the modular X by default while
sending non-~arch users to virtual/x11.
</impo>

</body>
</section>
</chapter>

<chapter>
<title>Dealing with USE flags</title>
<section>
<body>

<p>
Caleb raised a good point, and that is, how do you deal with all the USE flags
on packages that have a ton of optional X library dependencies? In many cases,
it will make sense to always force on or off flags. Also, you can make this
easier by grouping flags. Make sure you're naming the flags by their functions
and not by the libraries or packages they use.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Getting your fixes in the tree</title>
<section>
<body>

<p>
If you're a developer, commit them. If not, file a new bug, assigned to the
package maintainers (in metadata.xml). Have it block bug <uri
link="http://bugs.gentoo.org/112675">#112675</uri>. Attach a patch
to fix the dependencies.
</p>

</body>
</section>
</chapter>
</guide>
