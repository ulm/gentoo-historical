<?xml version='1.0' encoding="UTF-8"?>


<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/proj/en/desktop/x/x11/maintaining.xml">
<title>Maintaining X</title>
<author title="Author">
   <mail link="dberkholz@gentoo.org">Donnie Berkholz</mail>
</author>

<abstract>
This document outlines what needs to be done to successfully maintain X
implementations.
</abstract>

<version>1.2</version>
<date>13 September 2005</date>

<chapter>
<title>Introduction</title>
<section>
<body>
<p>
X is one of the more complex and critical maintainer's jobs. There's a lot to
figure out before one can do it properly. This guide attempts to lead a new X
maintainer down one path to keeping sanity.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Preparation</title>
<section>
<title>Mailing Lists</title>
<body>

<p>
The first thing to do is to get in contact with upstream. One of the pathways
is mailing lists. You'll want to subscribe to all of these.
</p>

<table>
<tr>
	<th>List</th>
	<th>Description</th>
	<th>Where/How to Subscribe</th>
</tr>
<tr>
	<ti>dri-devel@lists.sourceforge.net</ti>
	<ti>(Optional) DRI (Direct Rendering Infrastructure) -- i.e., 3D acceleration</ti>
	<ti><uri>http://lists.sourceforge.net/lists/listinfo/dri-devel/</uri></ti>
</tr>
<tr>
	<ti>mesa3d-dev@lists.sourceforge.net</ti>
	<ti>(Optional) X uses this graphics library for OpenGL</ti>
	<ti><uri>http://lists.sourceforge.net/lists/listinfo/mesa3d-dev/</uri></ti>
</tr>
<tr>
	<ti>mesa3d-cvs@lists.sourceforge.net</ti>
	<ti>(Optional) Follow 3D driver, libGL development</ti>
	<ti><uri>http://lists.sourceforge.net/lists/listinfo/mesa3d-cvs/</uri></ti>
</tr>
<tr>
	<ti>cvs-commit@xfree86.org</ti>
	<ti>(Optional) Watch what XFree86 is doing</ti>
	<ti><uri>http://www.xfree86.org/mailman/listinfo/cvs-commit/</uri></ti>
</tr>
<tr>
	<ti>xorg-arch@lists.x.org</ti>
	<ti>X.Org Architecture Working Group</ti>
	<ti><uri>http://lists.x.org/mailman/listinfo/xorg-arch</uri></ti>
</tr>
<tr>
	<ti>xorg@lists.freedesktop.org</ti>
	<ti>Primary X.Org list -- users and devs</ti>
	<ti><uri>http://freedesktop.org/mailman/listinfo/xorg/</uri></ti>
</tr>
<tr>
	<ti>xorg-modular@lists.x.org</ti>
	<ti>Where much of the modularization work and discussion happens</ti>
	<ti><uri>http://lists.x.org/mailman/listinfo/xorg-modular</uri></ti>
</tr>
<tr>
	<ti>xorg-commit@lists.freedesktop.org</ti>
	<ti>CRITICAL to be on this list</ti>
	<ti><uri>http://freedesktop.org/mailman/listinfo/xorg-commit/</uri></ti>
</tr>
<tr>
	<ti>release-wranglers@lists.freedesktop.org</ti>
	<ti>Work for X.Org releases</ti>
	<ti><uri>http://freedesktop.org/mailman/listinfo/release-wranglers/</uri></ti>
</tr>
<tr>
	<ti>x-packagers@freedesktop.org</ti>
	<ti>People like us</ti>
	<ti><uri>http://freedesktop.org/mailman/listinfo/x-packagers/</uri></ti>
</tr>
</table>

</body>
</section>

<section>
<title>IRC Channels</title>
<body>

<p>
A great medium for generating some camaraderie with upstream and other
packagers is IRC. Making connections is a good way to get things accomplished.
Unless specified otherwise, all these are on irc.freenode.net.
</p>

<table>
<tr>
	<th>Channel</th>
	<th>Description</th>
</tr>
<tr>
	<ti>#freedesktop</ti>
	<ti>Many fd.o programmers hang out here.</ti>
</tr>
<tr>
	<ti>#xorg</ti>
	<ti>More user-oriented, although some devs are here too</ti>
</tr>
<tr>
	<ti>#xorg-devel</ti>
	<ti>Developer-centered channel</ti>
</tr>
<tr>
	<ti>#dri</ti>
	<ti>(Optional) DRI user channel</ti>
</tr>
<tr>
	<ti>#dri-devel</ti>
	<ti>(Optional) DRI development channel -- if you like 3D, be here</ti>
</tr>
<tr>
	<ti>#ati</ti>
	<ti>(Optional) Mostly talk about the binary drivers, but some DRI mixed in</ti>
</tr>
<tr>
	<ti>#nvidia</ti>
	<ti>(Optional) Talk about the binary drivers</ti>
</tr>
</table>

</body>
</section>

<section>
<title>Who's Who in X Land?</title>
<body>

<p>
It's a good idea to know who's involved in X. When known and applicable, IRC
nicks are after their names.
</p>

<table>
<tr>
	<th>Who?</th>
	<th>What?</th>
</tr>
<tr>
	<ti>Dave Airlie (airlied)</ti>
	<ti>DRM maintainer. Merges DRM into Linux kernel as well. Hacks some on
		EGL.</ti>
</tr>
<tr>
	<ti>Stuart Anderson (anderson)</ti>
	<ti>X.Org guy. He's on IRC, but I've never seen him say anything. Works for
		The Open Group and is involved with
		<uri link="http://xorg.freedesktop.org/wiki/TestGroup">XTest</uri>.</ti>
</tr>
<tr>
	<ti>Eric Anholt (anholt)</ti>
	<ti>Jumped into X in the past couple of years. Mostly does DRI, radeon
		stuff. FreeBSD X maintainer.</ti>
</tr>
<tr>
	<ti>Kendall Bennett</ti>
	<ti>SciTech CEO. Upstream for the VESA code, and have their own drivers.
	</ti>
</tr>
<tr>
	<ti>Billy Biggs (vektor)</ti>
	<ti>tvtime developer, nice guy. Gets along well with Gentoo. Has been
		hacking some on framebuffer code lately.</ti>
</tr>
<tr>
	<ti>Alan Coopersmith (alanc)</ti>
	<ti>X guy at Sun. Wrote the IPv6 code. Release manager for 6.9.</ti>
</tr>
<tr>
	<ti>Michel Daenzer (MrCooper)</ti>
	<ti>Debian X guy and radeon PPC DRI dev, now works for ATI.</ti>
</tr>
<tr>
	<ti>David Dawes</ti>
	<ti>Lead of XFree86. He's called himself various titles over time, but he's
		always been the dictator.</ti>
</tr>
<tr>
	<ti>Alex Deucher (agd5f)</ti>
	<ti>Hacks on dual-head, Radeon, Savage, and some other misc. stuff</ti>
</tr>
<tr>
	<ti>Thomas Dickey</ti>
	<ti>Maintains xterm, does some other misc. X and ncurses stuff.</ti>
</tr>
<tr>
	<ti>Egbert Eich (egbert)</ti>
	<ti>SuSE X maintainer, X.Org board member. Was release manager for 6.7.0.
	</ti>
</tr>
<tr>
	<ti>Jim Gettys (jg)</ti>
	<ti>keithp's partner in crime</ti>
</tr>
<tr>
	<ti>Mike Harris (mharris)</ti>
	<ti>Red Hat lead X maintainer. Also involved a little in DRI.</ti>
</tr>
<tr>
	<ti>Matthieu Herrb</ti>
	<ti>OpenBSD X maintainer. Many commits are security-related, so watch them.
	</ti>
</tr>
<tr>
	<ti>Benjamin Herrenschmidt (benh)</ti>
	<ti>Works for IBM. Hacks some on Radeon, particularly PPC.</ti>
</tr>
<tr>
	<ti>Kristian Hogsberg (krh)</ti>
	<ti>Works for Red Hat. Hacked on evdev driver, helped in modularization</ti>
</tr>
<tr>
	<ti>Alan Hourihane (alanh)</ti>
	<ti>Maintains i915 driver, trident driver. Has hacked on sunffb DRI too.
		Donnie recently sent him an XGI V3 card to add support to the trident
		driver.</ti>
</tr>
<tr>
	<ti>Adam Jackson (ajax)</ti>
	<ti>DRI, dlloader, and general server cleanup. He uses Gentoo and will help
		 out. He's on the x11 alias. Release manager for 7.0. Works at RH.</ti>
</tr>
<tr>
	<ti>Dave Jones (davej)</ti>
	<ti>Maintains agpgart in Linux kernel</ti>
</tr>
<tr>
	<ti>Nolan Leake (nolan)</ti>
	<ti>Works for VMWare, maintains vmware driver</ti>
</tr>
<tr>
	<ti>Roland Mainz (nrubsig)</ti>
	<ti>Develops XPrint. Been very scarce for the last year or so.</ti>
</tr>
<tr>
	<ti>Kevin Martin (kem)</ti>
	<ti>Works for Red Hat. Release manager for 6.8.0, 6.9/7.0.</ti>
</tr>
<tr>
	<ti>David Nusinow (gravity)</ti>
	<ti>New Debian X maintainer</ti>
</tr>
<tr>
	<ti>Keith Packard (keithp)</ti>
	<ti>A leader of the "new wave" of X developers, works at Intel</ti>
</tr>
<tr>
	<ti>Brian Paul</ti>
	<ti>Mesa maintainer</ti>
</tr>
<tr>
	<ti>Aaron Plattner (AaronP)</ti>
	<ti>Works for nVidia. Maintains nv driver in XOrg.</ti>
</tr>
<tr>
	<ti>Brandon Robinson (Overfiend)</ti>
	<ti>Debian X lead.</ti>
</tr>
<tr>
	<ti>Ian Romanick (idr)</ti>
	<ti>Works for IBM. DRI guru.</ti>
</tr>
<tr>
	<ti>Zack Rusin (zrusin)</ti>
	<ti>Works for Trolltech. Did some work with Exa and Render.</ti>
</tr>
<tr>
	<ti>SÃ¸ren Sandmann (ssp)</ti>
	<ti>Works for Red Hat. Did some MMX optimization, modularization work.</ti>
</tr>
<tr>
	<ti>Daniel Stone (daniels)</ti>
	<ti>Lots of experience in modularized, autotooled X. Ubuntu developer, used
	to be on Debian's X team before disputes with the leader.</ti>
</tr>
<tr>
	<ti>Luc Verhaegen (libv)</ti>
	<ti>Hacks on via driver</ti>
</tr>
<tr>
	<ti>Mark Vojkovich</ti>
	<ti>Works for nVidia. Maintains nv driver in XFree86.</ti>
</tr>
<tr>
	<ti>Keith Whitwell (keithw)</ti>
	<ti>A lead DRI developer, along with idr.</ti>
</tr>
<tr>
	<ti>Thomas Winischhofer (twini)</ti>
	<ti>Maintains SiS/XGI driver</ti>
</tr>
<tr>
	<ti>Hui Yu</ti>
	<ti>Works for ATI, has written lots of the radeon 2D driver code</ti>
</tr>
</table>
</body>
</section>
</chapter>

<chapter>
<title>Handling Bugs</title>
<section>
<title>Queries</title>
<body>
<p>
Before you can start dealing with bugs, you need to have good ways to find which
ones you want to deal with. I have 10 X-related queries saved in my Bugzilla
settings: <c>X Security</c>, <c>X blocker</c>, <c>X critical</c>,
<c>X major</c>, <c>X minor</c>, <c>X trivial</c>, <c>X inclusion</c>,
<c>X CC</c>, <c>X</c> and <c>X enhancements</c>. The <c>X</c> query is: All bugs
with Status UNCONFIRMED NEW ASSIGNED REOPENED where severity is everything
except enhancement and bug owner is <mail>x11@gentoo.org</mail>. The <c>X
enhancements</c> query is the same but with the severity set only to
enhancement. Similar holds true for other severity-related queries. <c>X CC</c>
is all open bugs that <mail>x11@gentoo.org</mail> is CC'd on. <c>X inclusion</c>
is all open bugs assigned to <mail>x11@gentoo.org</mail> with <c>Keywords:
Inclusion</c>. This is used to create a short list of ready-to-go commits with
attached patches or very obvious changes. <c>X Security</c> is a list of all
open bugs with either assignee or CC <mail>x11@gentoo.org</mail> and either
assignee or CC <mail>security@gentoo.org</mail>.
</p>

<p>
You may wish to divide the bugs up better, but first realize this: Bug
priorities are not well-triaged at this point in time (13 Sept. 2005), so
restricting the priority is a very artificial way to do things. After you
enter this search into the advanced page, you'll be able to save it from the
bottom of the results page.
</p>
</body>
</section>
<section>
<title>Triage</title>
<body>
<p>
As soon as you have time after reading your Bugzilla emails, you should go to
the bug URL and glance briefly over the bug. In this time, you should be able to
figure out whether: (a) the bug is assigned to the right people, (b) any other
people should be CC'd, (c) the bug is not obviously invalid and (d) the system
isn't overoptimized. From (d), it follows that you'll need <c>emerge info</c> to
diagnose the problem in nearly all cases, so you get CFLAGS and the toolchain.
</p>

<p>If the bug appears valid and should be assigned to us, then classify the
severity. The basis for this is:</p>

<table>
<tr>
	<th>Severity</th>
	<th>Description</th>
</tr>
<tr>
	<ti>blocker</ti>
	<ti>It breaks entire systems, causes data loss, prevents booting, etc.
	</ti>
</tr>
<tr>
	<ti>critical</ti>
	<ti>Compilation failures that don't appear to be corner cases, unavoidable
		crashes, X not starting</ti>
</tr>
<tr>
	<ti>major</ti>
	<ti>Significant runtime issues that render X useless</ti>
</tr>
<tr>
	<ti>normal</ti>
	<ti>Most bugs will fall under this.</ti>
</tr>
<tr>
	<ti>minor</ti>
	<ti>Bugs that don't significantly affect use and have a workaround</ti>
</tr>
<tr>
	<ti>trivial</ti>
	<ti>Bugs that result in nearly no end-user or developer change. For
		example, prettifying some code in the ebuild, small docs typos, etc.
	</ti>
</tr>
<tr>
	<ti>enhancement</ti>
	<ti>Feature requests, new packages, etc. Version bumps do <b>not</b> fall
		under this. They should probably be "normal."</ti>
</tr>
</table>

<p>Also classify the priority. The basis for this is:</p>

<table>
<tr>
	<th>Priority</th>
	<th>Description</th>
</tr>
<tr>
	<ti>P1</ti>
	<ti>Must-fix</ti>
</tr>
<tr>
	<ti>P2</ti>
	<ti>Might-fix</ti>
</tr>
<tr>
	<ti>P3</ti>
	<ti>Probably won't fix</ti>
</tr>
<tr>
	<ti>P4</ti>
	<ti>Won't fix unless there are no other open bugs and nothing else to do
	</ti>
</tr>
<tr>
	<ti>RESOLVED-&gt;WONTFIX</ti>
	<ti>Won't fix, period
	</ti>
</tr>
</table>
</body>
</section>

<section>
<title>Bug-fixing</title>
<body>

<p>
Once you've got all the open X bugs triaged, you can start fixing them. It's
vital to remember that you need to split your time between <b>all</b> levels of
severity. There will always be more critical bugs coming in, and if you never
work on anything lower unless there are no critical bugs, you'll never work on
anything lower. You don't need to split your time evenly -- just split it.
</p>

<p>
Just start looking through all priority-1 bugs. Ignore anything priority-2 and
lower until all priority-1 bugs are fixed. Always be alert for mis-classified
bugs while you're browsing the list of open bugs, whether they're over- or
under-prioritized. The same goes for severity.
</p>

<p>
Open a bug and glance through it. Does it have all the necessary info? You'll
often need <path>/etc/X11/xorg.conf</path>, <path>/var/log/Xorg.${DISPLAY}.log</path>,
<c>emerge info</c> and <c>dmesg</c>. First, make sure the user has a proper configuration.
Then, make sure the USE combination is known to work. For example, right now,
combining <c>dmx</c> and <c>doc</c> breaks the build. One of my favorite little
commands is <c>grep -e '^(EE)' -e '^(WW)' Xorg.0.log</c>. If it's a problem with
direct rendering, you'll often want <c>LIBGL_DEBUG=verbose glxinfo</c> output.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Patches</title>
<section>
<title>Where to Find Them</title>
<body>

<p>
Patches you'll add will come from basically two places:
<uri link="http://bugs.gentoo.org/">Gentoo's Bugzilla</uri> and
<uri link="http://bugs.freedesktop.org/">freedesktop.org's Bugzilla</uri>. They
may link to other places from there, but don't feel any pressure to go out
patch-hunting beyond those Bugzillas and the X mailing lists.
</p>

</body>
</section>

<section>
<title>When to Accept Them</title>
<body>

<p>
Patches can only be added after there has been an upstream bug filed and the
patch has been added to upstream CVS HEAD. This ensures that the code benefits
from review by the most experienced people in the field and reduces the burden
of support on us, because we can start pointing problems upstream. It also
makes things easier on us in the future, because the next release will have the
patch included so it can be dropped from our patchset.
</p>

<p>
Never accept any requests to add random patches to our ebuilds, regardless of
their source, unless they are also in upstream CVS. If somebody already filed an
upstream bug, follow that bug through until the patch is committed before adding
it to our patchset.
</p>

<p>
The only exceptions to this rule are when the patch fixes a build breakage or a
security vulnerability.
</p>

</body>
</section>

<section>
<title>How to Format Them</title>
<body>

<p>
Patches should always be formatted to apply from the directory one level above
${S}. For example, monolithic X patches should diff from xc.orig to xc, using
<c>diff -urN xc.orig xc > patchname.patch</c>.
</p>

<p>
Above the content of each patch, add comments on what the patch does and why
it is necessary. Make <b>sure</b> there is an <b>upstream</b> bug filed for
every patch added to the tree, and make sure this URL is listed in the top of
the patch. The only exception is a patch that cannot be used by upstream
because it is for some reason Gentoo-specific.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Maintaining Modular</title>
<section>
<title>Dependencies</title>
<body>

<p>
The modularization of X doesn't allow components of X to safely assume
everything they need will be present at both build- and run-time. Modular
packages' configure.ac is useful for finding out what upstream thinks is
required and is a good guide for what your resulting ebuild should require.
Most of this information is held within the <c>PKG_CHECK_MODULES</c> lines
(note that there are often multiple - look through the whole file).
</p>

<p>
As a general (and somewhat obvious) rule of thumb, <c>x11-proto/*</c> packages
belong in <c>DEPEND</c>, and packages containing fonts, libraries and
executables should go in <c>RDEPEND</c>. See the
<uri link="porting-modular-x-howto.xml">modular X porting guide</uri> for
details.
</p>

</body>
</section>

<section>
<title>More stuff relevant to modular maintenance</title>
<body>

<p>
Definitely have a list of every modular package so you can script actions across
all of modular X. Without this, it can take forever to get anything major done.
Even with it, major cross-tree commits take a ton of time.

Get the list <uri link="modular-x-packages.txt">here</uri>. Remember to update it
with any changes.
</p>

<p>
Some useful links are the <uri link="http://sources.redhat.com/autobook/">
Autobook</uri>, the
<uri link="http://xorg.freedesktop.org/wiki/ModularDevelopersGuide">Modular
Developer's Guide</uri>, and the
devmanual
<uri link="http://devmanual.gentoo.org/general-concepts/autotools/index.html">
section on autotools</uri>.

No content yet. Will probably link to modular porting guide once it's in
GuideXML. Perhaps some other scripts, if I have any lying around, and the
ModularDevelopersGuide at the XOrg wiki. Also link to some autotools learning
material like the autobook and Ciaran's dev manual section on autotools.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Maintaining the Monolith</title>
<section>
<title>Keeping Patches Organized</title>
<body>

<impo>Patchsets are becoming less relevant as we migrate to modular X. In the
near future, we should have no need to maintain large patchsets like this.
Also, our increased focus on upstreaming patches should assist in this.</impo>

<p>
I maintain all the <uri link="http://dev.gentoo.org/~dberkholz/xorg-x11/patchsets/6.8.2/">
patchsets</uri> in my dev.gentoo.org <uri link="http://dev.gentoo.org/~dberkholz/">
web space</uri>, at a path of <c>${PN}/patchsets/${PV}/patch-${PATCH_VER}/</c>
with corresponding tarballs at <c>${P}-patches-${PATCH_VER}.tar.bz2</c>. This
ensures that there will always be a patchset available, even instantly after I
commit the ebuild or if the mirrors lose it. The files tarballs and unpacked
source are available at the same location, but replace "patches" with "files."
</p>

<pre caption="Organization on filesystem">
donnie@supernova ~/dev/public_html/xorg-x11/patchsets/6.8.0 $ ls
9940_all_6.8.0-libX11-stack-overflow.patch
<comment>A patch I'm working on</comment>
bugs
<comment>A text file containing things to work on (optional)</comment>
files
<comment>Contains the most recent files tarball, unpacked</comment>
files-0.1
files-0.2
files-0.3
files-0.4
<comment>Contain older unpacked files tarballs (optional)</comment>
patch
<comment>Contains the most recent patch tarball, unpacked</comment>
patch-0.1
patch-0.2
patch-0.2.1
patch-0.2.2
patch-0.2.2.1
patch-0.2.3
patch-0.2.4
<comment>Contain older unpacked patch tarballs (optional)</comment>
xorg-x11-6.8.0-files-0.1.tar.bz2
xorg-x11-6.8.0-files-0.2.tar.bz2
xorg-x11-6.8.0-files-0.3.tar.bz2
xorg-x11-6.8.0-files-0.4.tar.bz2
xorg-x11-6.8.0-patches-0.1.tar.bz2
xorg-x11-6.8.0-patches-0.2.1.tar.bz2
xorg-x11-6.8.0-patches-0.2.2.1.tar.bz2
xorg-x11-6.8.0-patches-0.2.2.tar.bz2
xorg-x11-6.8.0-patches-0.2.3.tar.bz2
xorg-x11-6.8.0-patches-0.2.4.tar.bz2
xorg-x11-6.8.0-patches-0.2.tar.bz2
</pre>

<p>
The naming strategy for patchset versions is pretty straightforward. Some "base"
patchset is started when a new package is, versioned at 1.0.0. Subsequent
patchsets retain the three-number version. The patchset version always follows
the most current ebuild. Sometimes it's necessary to fork off of a patchset from
an older ebuild -- for example, security vulnerabilities affecting multiple
versions of X. In this case, we add a fourth digit to the version.
</p>

<p>
Within each patchset are the patches, named ${NUMBER}_${ARCH}_${DESCRIPTION}.patch.
NUMBER is a four-digit number, ARCH is a valid architecture or "all" and
DESCRIPTION is a hyphenated description of the patch, usually in all lowercase.
When bulk patching, epatch() applies patches according to their number and arch.
We generally want as many patches as possible to <b>always</b> be applied, so
that there are less possible ways of patching the source and therefore less ways
to break. This also encourages patches that are suitable to be applied upstream;
that is a primary goal, to reduce our maintenance work and to give back to the
community.
</p>

<p>
There is also a file called <path>DESCRIPTIONS</path>. It contains a simple
ordered list of all the patches in that patchset with descriptions of each
patch in comments above it.
</p>

<p>
When creating the package ChangeLog entry, simply copy and paste lines from
<path>DESCRIPTIONS</path>. You may need to do this line-by-line to keep
newlines out. For any new PATCH_VER or FILES_VER, note that at the beginning of
the ChangeLog entry: "Patchset 0.5. (#123456) Add 1234_all_fix-foo.patch to
stop broken video. Define HardenedGccSpecs YES for USE=hardened." Always say
"patchset" and "fileset" rather than PATCH_VER or FILES_VER; the ChangeLog is
designed to be human-readable.
</p>

</body>
</section>

<section>
<title>Bumping Patch/Files Tarballs</title>
<body>

<p>
I generally do this in an overlay. In my setup, I have three trees: an rsync
tree, a CVS checkout and an overlay. The CVS checkout is <b>not</b> part of my
Portage tree or any overlays.
</p>

<pre caption="Bumping tarball versions">
$ cd /usr/local/portage/x11-base/xorg-x11/
$ cp /usr/local/gentoo-x86/x11-base/xorg-x11/xorg-x11-6.8.0-r2.ebuild .
<comment>Copy from the CVS checkout to the overlay</comment>
$ nano xorg-x11-6.8.0-r2.ebuild
<comment>Change PATCH_VER or FILES_VER, whichever is being bumped.</comment>
$ /usr/sbin/ebuild xorg-x11-6.8.0-r2.ebuild digest
$ sudo /usr/sbin/ebuild xorg-x11-6.8.0-r2.ebuild install
<comment>Make sure it builds and installs successfully,</comment>
<comment>but keep it off my live filesystem.</comment>
$ cd /usr/local/gentoo-x86/x11-base/xorg-x11/
$ cp /usr/local/portage/x11-base/xorg-x11/xorg-x11-6.8.0-r2.ebuild .
$ cp /usr/local/portage/x11-base/xorg-x11/files/digest-xorg-x11-6.8.0-r2 files/
$ echangelog "Patchset 0.2. Add 3243_sparc_fix-foo.patch."
$ repoman scan
$ repoman ci -m "Patchset 0.2. Add 3243_sparc_fix-foo.patch."
</pre>
<impo>
Make <b>sure</b> the patch or files tarball is uploaded before committing.
</impo>
<p>
I'll repeat the above note again, because you <b>will</b> mess it up,
probably more than once.
</p>
<warn>
Make <b>sure</b> the patch or files tarball is uploaded before committing.
</warn>

</body>
</section>
</chapter>

</guide>
