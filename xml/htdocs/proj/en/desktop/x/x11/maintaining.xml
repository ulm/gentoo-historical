<?xml version='1.0' encoding="UTF-8"?>


<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/proj/en/desktop/x/x11/maintaining.xml">
<title>Maintaining X</title>
<author title="Author">
   <mail link="spyderous@gentoo.org">Donnie Berkholz</mail>
</author>

<abstract>
This document outlines what needs to be done to successfully maintain X
implementations.
</abstract>

<version>1.2</version>
<date>13 September 2005</date>

<chapter>
<title>Introduction</title>
<section>
<body>
<p>
X is one of the more complex and critical maintainer's jobs. There's a lot to
figure out before one can do it properly. This guide attempts to lead a new X
maintainer down one path to keeping sanity.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Preparation</title>
<section>
<title>Mailing Lists</title>
<body>

<p>
The first thing to do is to get in contact with upstream. One of the pathways
is mailing lists. You'll want to subscribe to all of these.
</p>

<table>
<tr>
	<th>List</th>
	<th>Description</th>
	<th>Where/How to Subscribe</th>
</tr>
<tr>
	<ti>dri-devel@lists.sourceforge.net</ti>
	<ti>DRI (Direct Rendering Infrastructure) -- i.e., 3D acceleration</ti>
	<ti><uri>http://lists.sourceforge.net/lists/listinfo/dri-devel/</uri></ti>
</tr>
<tr>
	<ti>mesa3d-dev@lists.sourceforge.net</ti>
	<ti>X uses this graphics library for OpenGL</ti>
	<ti><uri>http://lists.sourceforge.net/lists/listinfo/mesa3d-dev/</uri></ti>
</tr>
<tr>
	<ti>mesa3d-cvs@lists.sourceforge.net</ti>
	<ti>Follow 3D driver, libGL development</ti>
	<ti><uri>http://lists.sourceforge.net/lists/listinfo/mesa3d-cvs/</uri></ti>
</tr>
<tr>
	<ti>cvs-commit@xfree86.org</ti>
	<ti>Got to watch what XFree86 is doing</ti>
	<ti><uri>http://www.xfree86.org/mailman/listinfo/cvs-commit/</uri></ti>
</tr>
<tr>
	<ti>xorg-arch@lists.x.org</ti>
	<ti>X.Org Architecture Working Group</ti>
	<ti><uri>http://lists.x.org/mailman/listinfo/xorg-arch</uri></ti>
</tr>
<tr>
	<ti>xorg@lists.freedesktop.org</ti>
	<ti>Primary X.Org list -- users and devs</ti>
	<ti><uri>http://freedesktop.org/mailman/listinfo/xorg/</uri></ti>
</tr>
<tr>
	<ti>xorg-modular@lists.x</ti>
	<ti>Where much of the modularization work and discussion happens</ti>
	<ti><uri>http://lists.x.org/mailman/listinfo/xorg-modular</uri></ti>
</tr>
<tr>
	<ti>xorg-commit@lists.freedesktop.org</ti>
	<ti>CRITICAL to be on this list</ti>
	<ti><uri>http://freedesktop.org/mailman/listinfo/xorg-commit/</uri></ti>
</tr>
<tr>
	<ti>release-wranglers@lists.freedesktop.org</ti>
	<ti>Work for X.Org releases</ti>
	<ti><uri>http://freedesktop.org/mailman/listinfo/release-wranglers/</uri></ti>
</tr>
<tr>
	<ti>x-packagers@freedesktop.org</ti>
	<ti>People like us</ti>
	<ti><uri>http://freedesktop.org/mailman/listinfo/x-packagers/</uri></ti>
</tr>
</table>

</body>
</section>

<section>
<title>IRC Channels</title>
<body>

<p>
A great medium for generating some camaraderie with upstream and other
packagers is IRC. Making connections is a good way to get things accomplished.
Unless specified otherwise, all these are on irc.freenode.net.
</p>

<table>
<tr>
	<th>Channel</th>
	<th>Description</th>
</tr>
<tr>
	<ti>#freedesktop</ti>
	<ti>Many fd.o programmers hang out here.</ti>
</tr>
<tr>
	<ti>#xorg</ti>
	<ti>More user-oriented, although some devs are here too</ti>
</tr>
<tr>
	<ti>#xorg-devel</ti>
	<ti>Developer-centered channel</ti>
</tr>
<tr>
	<ti>#dri</ti>
	<ti>(Optional) DRI user channel</ti>
</tr>
<tr>
	<ti>#dri-devel</ti>
	<ti>(Optional) DRI development channel -- if you like 3D, be here</ti>
</tr>
<tr>
	<ti>#ati</ti>
	<ti>(Optional) Mostly talk about the binary drivers, but some DRI mixed in</ti>
</tr>
<tr>
	<ti>#nvidia</ti>
	<ti>(Optional) Talk about the binary drivers</ti>
</tr>
</table>

</body>
</section>

<section>
<title>Who's Who in X Land?</title>
<body>

<p>
It's a good idea to know who's involved in X. When known and applicable, IRC
nicks are after their names.
</p>

<table>
<tr>
	<th>Who?</th>
	<th>What?</th>
</tr>
<tr>
	<ti>Stuart Anderson (anderson)</ti>
	<ti>X.Org guy. He's on IRC, but I've never seen him say anything.</ti>
</tr>
<tr>
	<ti>Eric Anholt (anholt)</ti>
	<ti>Jumped into X in the past couple of years. Mostly does DRI, radeon
		stuff. FreeBSD X maintainer.</ti>
</tr>
<tr>
	<ti>Kendall Bennett</ti>
	<ti>SciTech CEO. Upstream for the VESA code, and have their own drivers.
	</ti>
</tr>
<tr>
	<ti>Billy Biggs (vektor)</ti>
	<ti>tvtime developer, nice guy. Gets along well with Gentoo. Has been
		hacking some on framebuffer code lately.</ti>
</tr>
<tr>
	<ti>Alan Coopersmith (alanc)</ti>
	<ti>X guy at Sun. Wrote the IPv6 code. Release manager for 6.9.</ti>
</tr>
<tr>
	<ti>Michel Daenzer (MrCooper)</ti>
	<ti>Debian X guy and radeon PPC DRI dev, now works for ATI.</ti>
</tr>
<tr>
	<ti>David Dawes</ti>
	<ti>Lead of XFree86. He's called himself various titles over time, but he's
		always been the dictator.</ti>
</tr>
<tr>
	<ti>Alex Deucher (agd5f)</ti>
	<ti>Hacks on dual-head, Radeon, Savage, and some other misc. stuff</ti>
</tr>
<tr>
	<ti>Thomas Dickey</ti>
	<ti>Maintains xterm, does some other misc. X and ncurses stuff.</ti>
</tr>
<tr>
	<ti>Egbert Eich (egbert)</ti>
	<ti>SuSE X maintainer, X.Org board member. Was release manager for 6.7.0.
	</ti>
</tr>
<tr>
	<ti>Jim Gettys (jg)</ti>
	<ti>keithp's partner in crime, also at HP</ti>
</tr>
<tr>
	<ti>Mike Harris (mharris)</ti>
	<ti>Red Hat lead X maintainer. Also involved a little in DRI. A little bit
		quick-tempered, so watch your step.</ti>
</tr>
<tr>
	<ti>Matthieu Herrb</ti>
	<ti>OpenBSD X maintainer. Many commits are security-related, so watch them.
	</ti>
</tr>
<tr>
	<ti>Kristian Hogsberg (krh)</ti>
	<ti>Works for Red Hat</ti>
</tr>
<tr>
	<ti>Alan Hourihane (alanh)</ti>
	<ti>Maintains i915 driver, trident driver. Has hacked on sunffb DRI too.
		Donnie recently sent him an XGI V3 card to add support to the trident
		driver.</ti>
</tr>
<tr>
	<ti>Adam Jackson (ajax)</ti>
	<ti>DRI, dlloader, and general server cleanup. He uses Gentoo and will help
		 out. He's on the x11 alias. Release manager for 7.0.</ti>
</tr>
<tr>
	<ti>Nolan Leake (nolan)</ti>
	<ti>Works for VMWare, maintains vmware driver</ti>
</tr>
<tr>
	<ti>Roland Mainz (nrubsig)</ti>
	<ti>Develops XPrint</ti>
</tr>
<tr>
	<ti>Kevin Martin</ti>
	<ti>Works for Red Hat. Release manager for 6.8.0, 6.9/7.0.</ti>
</tr>
<tr>
	<ti>Keith Packard (keithp)</ti>
	<ti>A leader of the "new wave" of X developers, works at HP</ti>
</tr>
<tr>
	<ti>Brian Paul</ti>
	<ti>Mesa maintainer</ti>
</tr>
<tr>
	<ti>Brandon Robinson (Overfiend)</ti>
	<ti>Debian X lead. Also quick-tempered.</ti>
</tr>
<tr>
	<ti>Ian Romanick (idr)</ti>
	<ti>Works for IBM. DRI guru.</ti>
</tr>
<tr>
	<ti>SÃ¶ren Sandmann (ssp)</ti>
	<ti>Works for Red Hat</ti>
</tr>
<tr>
	<ti>Daniel Stone (daniels)</ti>
	<ti>Lots of experience in modularized, autotooled X. Ubuntu developer, used
	to be on Debian's X team before disputes with the leader.</ti>
</tr>
<tr>
	<ti>Luc Verhaegen (libv)</ti>
	<ti>Hacks on via driver</ti>
</tr>
<tr>
	<ti>Mark Vojkovich</ti>
	<ti>Works for nVidia. Maintains nv driver in XFree86.</ti>
</tr>
<tr>
	<ti>Keith Whitwell (keithw)</ti>
	<ti>A lead DRI developer, along with idr.</ti>
</tr>
<tr>
	<ti>Thomas Winischhofer (twini)</ti>
	<ti>Maintains SiS/XGI driver</ti>
</tr>
<tr>
	<ti>Hui Yu</ti>
	<ti>Works for ATI, has written lots of the radeon 2D driver code</ti>
</tr>
</table>
</body>
</section>
</chapter>

<chapter>
<title>Handling Bugs</title>
<section>
<title>Queries</title>
<body>
<p>
Before you can start dealing with bugs, you need to have good ways to find which
ones you want to deal with. I have 10 X-related queries saved in my Bugzilla
settings: <c>X Security</c>, <c>X blocker</c>, <c>X critical</c>,
<c>X major</c>, <c>X minor</c>, <c>X trivial</c>, <c>X inclusion</c>,
<c>X CC</c>, <c>X</c> and <c>X enhancements</c>. The <c>X</c> query is: All bugs
with Status UNCONFIRMED NEW ASSIGNED REOPENED where severity is everything
except enhancement and bug owner is x11@gentoo.org. The <c>X enhancements</c>
query is the same but with the severity set only to enhancement. Similar holds
true for other severity-related queries. <c>X CC</c> is all open bugs that
x11@gentoo.org is CC'd on. <c>X inclusion</c> is all open bugs assigned to
x11@gentoo.org with Keywords: Inclusion. This is used to create a short list of
ready-to-go commits with attached patches or very obvious changes. <c>X Security
</c> is a list of all open bugs with either assignee or CC x11@gentoo.org and
either assignee or CC security@gentoo.org.
</p>

<p>
You may wish to divide the bugs up better, but first realize this: Bug
severities are not well-triaged at this point in time (5 Oct. 2004), so
restricting the severity is a very artificial way to do things. After you
enter this search into the advanced page, you'll be able to save it from the
bottom of the results page.
</p>
</body>
</section>
<section>
<title>Triage</title>
<body>
<p>
As soon as you have time after reading your Bugzilla emails, you should go to
the bug URL and glance briefly over the bug. In this time, you should be able to
figure out whether: (a) the bug is assigned to the right people, (b) any other
people should be CC'd, (c) the bug is not obviously invalid and (d) the system
isn't overoptimized. From (d), it follows that you'll need <c>emerge info</c> to
diagnose the problem in nearly all cases, so you get CFLAGS and the toolchain.
</p>

<p>If the bug appears valid and should be assigned to us, then classify the
severity. The basis for this is:</p>

<table>
<tr>
	<th>Severity</th>
	<th>Description</th>
</tr>
<tr>
	<ti>blocker</ti>
	<ti>It breaks entire systems, causes data loss, prevents booting, etc.
	</ti>
</tr>
<tr>
	<ti>critical</ti>
	<ti>Compilation failures that don't appear to be corner cases, unavoidable
		crashes, X not starting</ti>
</tr>
<tr>
	<ti>major</ti>
	<ti>Significant runtime issues that render X useless</ti>
</tr>
<tr>
	<ti>normal</ti>
	<ti>Most bugs will fall under this.</ti>
</tr>
<tr>
	<ti>minor</ti>
	<ti>Bugs that don't significantly affect use and have a workaround</ti>
</tr>
<tr>
	<ti>trivial</ti>
	<ti>Bugs that result in nearly no end-user or developer change. For
		example, prettifying some code in the ebuild, small docs typos, etc.
	</ti>
</tr>
<tr>
	<ti>enhancement</ti>
	<ti>Feature requests, new packages, etc. Version bumps do <b>not</b> fall
		under this. They should probably be "normal."</ti>
</tr>
</table>

<p>Also classify the priority. The basis for this is:</p>

<table>
<tr>
	<th>Priority</th>
	<th>Description</th>
</tr>
<tr>
	<ti>P1</ti>
	<ti>Must-fix</ti>
</tr>
<tr>
	<ti>P2</ti>
	<ti>Might-fix</ti>
</tr>
<tr>
	<ti>P3</ti>
	<ti>Probably won't fix</ti>
</tr>
<tr>
	<ti>P4</ti>
	<ti>Won't fix unless there are no other open bugs and nothing else to do
	</ti>
</tr>
</table>
</body>
</section>

<section>
<title>Bug-fixing</title>
<body>

<p>
Once you've got all the open X bugs triaged, you can start fixing them. It's
vital to remember that you need to split your time between <b>all</b> levels of
severity. There will always be more critical bugs coming in, and if you never
work on anything lower unless there are no critical bugs, you'll never work on
anything lower. You don't need to split your time evenly -- just split it.
</p>

<p>
Open a bug and glance through it. Does it have all the necessary info? You'll
often need <path>/etc/X11/xorg.conf</path>, <path>/var/log/Xorg.${DISPLAY}.log</path>,
<c>emerge info</c> and <c>dmesg</c>. First, make sure the user has a proper configuration.
Then, make sure the USE combination is known to work. For example, right now,
combining <c>dmx</c> and <c>doc</c> breaks the build. One of my favorite little
commands is <c>grep -e '(EE)' -e '(WW)' Xorg.0.log</c>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Patches</title>
<section>
<title>Where to Find Them</title>
<body>

<p>
Patches you'll add will come from basically two places:
<uri link="http://bugs.gentoo.org/">Gentoo's Bugzilla</uri> and
<uri link="http://bugs.freedesktop.org/">freedesktop.org's Bugzilla</uri>. They
may link to other places from there, but don't feel any pressure to go out
patch-hunting beyond those Bugzillas and the X mailing lists.
</p>

</body>
</section>

<section>
<title>Keeping Patches Organized</title>
<body>

<p>
I maintain all the <uri link="http://dev.gentoo.org/~spyderous/xorg-x11/patchsets/6.8.0/">
patchsets</uri> in my dev.gentoo.org <uri link="http://dev.gentoo.org/~spyderous/">
web space</uri>, at a path of <c>${PN}/patchsets/${PV}/patch-${PATCH_VER}/</c>
with corresponding tarballs at <c>${P}-patches-${PATCH_VER}.tar.bz2</c>. This
ensures that there will always be a patchset available, even instantly after I
commit the ebuild or if the mirrors lose it. The files tarballs and unpacked
source are available at the same location, but replace "patches" with "files."
</p>

<pre caption="Organization on filesystem">
donnie@supernova ~/dev/public_html/xorg-x11/patchsets/6.8.0 $ ls
9940_all_6.8.0-libX11-stack-overflow.patch
<comment>A patch I'm working on</comment>
bugs
<comment>A text file containing things to work on (optional)</comment>
files
<comment>Contains the most recent files tarball, unpacked</comment>
files-0.1
files-0.2
files-0.3
files-0.4
<comment>Contain older unpacked files tarballs</comment>
patch
<comment>Contains the most recent patch tarball, unpacked</comment>
patch-0.1
patch-0.2
patch-0.2.1
patch-0.2.2
patch-0.2.2.1
patch-0.2.3
patch-0.2.4
<comment>Contain older unpacked patch tarballs</comment>
xorg-x11-6.8.0-files-0.1.tar.bz2
xorg-x11-6.8.0-files-0.2.tar.bz2
xorg-x11-6.8.0-files-0.3.tar.bz2
xorg-x11-6.8.0-files-0.4.tar.bz2
xorg-x11-6.8.0-patches-0.1.tar.bz2
xorg-x11-6.8.0-patches-0.2.1.tar.bz2
xorg-x11-6.8.0-patches-0.2.2.1.tar.bz2
xorg-x11-6.8.0-patches-0.2.2.tar.bz2
xorg-x11-6.8.0-patches-0.2.3.tar.bz2
xorg-x11-6.8.0-patches-0.2.4.tar.bz2
xorg-x11-6.8.0-patches-0.2.tar.bz2
</pre>

<p>
The naming strategy for patchset versions is pretty straightforward. Some "base"
patchset is started when a new package is, versioned at 1.0.0. Subsequent
patchsets retain the three-number version. The patchset version always follows
the most current ebuild. Sometimes it's necessary to fork off of a patchset from
an older ebuild -- for example, security vulnerabilities affecting multiple
versions of X. In this case, we add a fourth digit to the version.
</p>

<p>
Within each patchset are the patches, named ${NUMBER}_${ARCH}_${DESCRIPTION}.patch.
NUMBER is a four-digit number, ARCH is a valid architecture or "all" and
DESCRIPTION is a hyphenated description of the patch, usually in all lowercase.
When bulk patching, epatch() applies patches according to their number and arch.
We generally want as many patches as possible to <b>always</b> be applied, so
that there are less possible ways of patching the source and therefore less ways
to break. This also encourages patches that are suitable to be applied upstream;
that is a primary goal, to reduce our maintenance work and to give back to the
community.
</p>

<p>
There is also a file called PatchChangeLog, formatted like this:
</p>

<pre caption="PatchChangeLog format">
* 22 September 2004 Donnie Berkholz &lt;spyderous@gentoo.org&gt; Patchset 0.2.1

-Add 0430_all_6.8.0-sparc-add-mach64-to-devel-dri-drivers.patch (#63994). This
	plus other ebuild modifications from that bug should enable sparc guys to
	use 6.8.0-r1.
<comment>So, a hyphen, then a description, indented by a tab on later lines.
</comment>
-Update patches:
	- 9360_all_6.7.99.2-ppc64-support-updates-v2.patch
	- 9355_all_6.7.99.2-xorgconfig-fontdir-fixes-v2.patch
	- 9010_all_6.7.99.1-logitech-ps2-plusplus-v2.patch
	- 5851_all_6.7.99.1-tdfx-dri-fix-low-texmem-hang.patch
<comment>When something applies to multiple patches, use this format.
</comment>
-43 patches broken
<comment>For generic notes not related to a certain patch, use this.
</comment>
</pre>

<impo>
Remember to only mention patch-related changes in the PatchChangeLog.
</impo>

<p>
When creating the package ChangeLog entry, simply copy and paste lines from the
PatchChangeLog. You may need to do this line-by-line to keep newlines out.
For any new PATCH_VER or FILES_VER, note that at the beginning of the ChangeLog
entry: "PATCH_VER 0.5. Add 1234_all_fix-foo.patch to stop broken video
(#123456). Define HardenedGccSpecs YES for USE=hardened."
</p>

</body>
</section>

<section>
<title>Bumping Patch/Files Tarballs</title>
<body>

<p>
I generally do this in an overlay. In my setup, I have three trees: an rsync
tree, a CVS checkout and an overlay. The CVS checkout is <b>not</b> part of my
Portage tree or any overlays.
</p>

<pre caption="Bumping tarball versions">
$ cd /usr/local/portage/x11-base/xorg-x11/
$ cp /usr/local/gentoo-x86/x11-base/xorg-x11/xorg-x11-6.8.0-r2.ebuild .
<comment>Copy from the CVS checkout to the overlay</comment>
$ nano xorg-x11-6.8.0-r2.ebuild
<comment>Change PATCH_VER or FILES_VER, whichever is being bumped.</comment>
$ /usr/sbin/ebuild xorg-x11-6.8.0-r2.ebuild digest
$ sudo /usr/sbin/ebuild xorg-x11-6.8.0-r2.ebuild install
<comment>Make sure it builds and installs successfully,</comment>
<comment>but keep it off my live filesystem.</comment>
$ cd /usr/local/gentoo-x86/x11-base/xorg-x11/
$ cp /usr/local/portage/x11-base/xorg-x11/xorg-x11-6.8.0-r2.ebuild .
$ cp /usr/local/portage/x11-base/xorg-x11/files/digest-xorg-x11-6.8.0-r2 files/
$ echangelog "PATCH_VER 0.2. Add 3243_sparc_fix-foo.patch."
$ repoman scan
$ repoman ci -m "PATCH_VER 0.2. Add 3243_sparc_fix-foo.patch."
</pre>
<impo>
Make <b>sure</b> the patch or files tarball is uploaded before committing.
</impo>

</body>
</section>
</chapter>

</guide>
