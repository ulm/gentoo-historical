<?xml version='1.0' encoding="UTF-8"?>


<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/proj/en/desktop/x/x11/maintaining.xml">
  <title>Maintaining X</title>
  <author title="Author">
    <mail link="dberkholz@gentoo.org">Donnie Berkholz</mail>
  </author>

  <abstract>
    This document outlines what needs to be done to successfully maintain X
    implementations.
  </abstract>

  <version>1.3</version>
  <date>2 May 2007</date>

  <chapter>
    <title>Introduction</title>
    <section>
      <body>
        <p>
          X is one of the more complex and critical maintainer's jobs. There's
          a lot to figure out before one can do it properly. This guide
          attempts to lead a new X maintainer down one path to keeping sanity.
        </p>

      </body>
    </section>
  </chapter>

  <chapter>
    <title>Preparation</title>
    <section>
      <title>Mailing Lists</title>
      <body>

        <p>
          The first thing to do is to get in contact with upstream. One of the
          pathways is mailing lists. You'll probably want to subscribe to all
          of these.
        </p>

        <table>
          <tr>
            <th>List</th>
            <th>Description</th>
            <th>Where/How to Subscribe</th>
          </tr>
          <tr>
            <ti>xorg@lists.freedesktop.org</ti>
            <ti>Primary X.Org list -- users and devs</ti>
            <ti><uri>http://freedesktop.org/mailman/listinfo/xorg/</uri></ti>
          </tr>
          <tr>
            <ti>xorg-commit@lists.freedesktop.org</ti>
            <ti>CRITICAL to be on this list</ti>
            <ti><uri>http://freedesktop.org/mailman/listinfo/xorg-commit/</uri></ti>
          </tr>
          <tr>
            <ti>x-packagers@freedesktop.org</ti>
            <ti>People like us. Very low traffic.</ti>
            <ti><uri>http://freedesktop.org/mailman/listinfo/x-packagers/</uri></ti>
          </tr>
          <tr>
            <ti>dri-devel@lists.sourceforge.net</ti>
            <ti>(Optional) DRI (Direct Rendering Infrastructure) -- i.e., 3D
            acceleration</ti>
            <ti><uri>http://lists.sourceforge.net/lists/listinfo/dri-devel/</uri></ti>
          </tr>
          <tr>
            <ti>mesa3d-dev@lists.sourceforge.net</ti>
            <ti>(Optional) X uses this graphics library for OpenGL</ti>
            <ti><uri>http://lists.sourceforge.net/lists/listinfo/mesa3d-dev/</uri></ti>
          </tr>
          <tr>
            <ti>mesa-commit@lists.freedesktop.org</ti>
            <ti>(Optional) Follow 3D driver, libGL development</ti>
            <ti><uri>http://lists.freedesktop.org/mailman/listinfo/mesa-commit/</uri></ti>
          </tr>
        </table>

      </body>
    </section>

    <section>
      <title>IRC Channels</title>
      <body>

        <p>
          A great medium for generating some camaraderie with upstream and
          other packagers is IRC. Making connections is a good way to get
          things accomplished.  Unless specified otherwise, all these are on
          irc.freenode.net.
        </p>

        <table>
          <tr>
            <th>Channel</th>
            <th>Description</th>
          </tr>
          <tr>
            <ti>#xorg-devel</ti>
            <ti>Developer-centered channel</ti>
          </tr>
          <tr>
            <ti>#xorg</ti>
            <ti>(Optional) More user-oriented, although some devs are here too</ti>
          </tr>
          <tr>
            <ti>#dri</ti>
            <ti>(Optional) DRI user channel</ti>
          </tr>
          <tr>
            <ti>#dri-devel</ti>
            <ti>(Optional) DRI development channel -- if you like 3D, be
            here</ti>
          </tr>
          <tr>
            <ti>#ati</ti>
            <ti>(Optional) Mostly talk about the binary drivers, but some DRI
            mixed in</ti>
          </tr>
          <tr>
            <ti>#nvidia</ti>
            <ti>(Optional) Talk about the binary drivers</ti>
          </tr>
        </table>

      </body>
    </section>

    <section>
      <title>Who's Who in X Land?</title>
      <body>

        <p>
          It's a good idea to know who's involved in X. When known and
          applicable, IRC nicks are after their names.
        </p>

        <table>
          <tr>
            <th>Who?</th>
            <th>IRC Nick?</th>
            <th>What?</th>
          </tr>
          <tr>
            <ti>Dave Airlie</ti>
            <ti>airlied</ti>
            <ti>DRM maintainer. Merges DRM into Linux kernel as well. Hacks
            some on EGL.</ti>
          </tr>
          <tr>
            <ti>Stuart Anderson</ti>
            <ti>anderson</ti>
            <ti>X.Org guy. He's on IRC, but I've never seen him say
            anything. Works for The Open Group and is involved with <uri
            link="http://xorg.freedesktop.org/wiki/TestGroup">XTest</uri>.</ti>
          </tr>
          <tr>
            <ti>Eric Anholt</ti>
            <ti>anholt</ti>
            <ti>Jumped into X in the past couple of years. Mostly does DRI,
            radeon stuff. FreeBSD X maintainer, now works for Intel on its
            driver.</ti>
          </tr>
          <tr>
            <ti>Alan Coopersmith</ti>
            <ti>alanc</ti>
            <ti>X guy at Sun. Wrote the IPv6 code. Release manager for
            6.9.</ti>
          </tr>
          <tr>
            <ti>Michel Daenzer</ti>
            <ti>MrCooper</ti>
            <ti>Debian X guy and radeon PPC DRI dev, now works for Tungsten
            Graphics.</ti>
          </tr>
          <tr>
            <ti>David Dawes</ti>
            <ti></ti>
            <ti>Lead of XFree86. He's called himself various titles over time,
            but he's always been the dictator.</ti>
          </tr>
          <tr>
            <ti>Alex Deucher</ti>
            <ti>agd5f</ti>
            <ti>Hacks on dual-head, Radeon, Savage, and some other
            misc. stuff</ti>
          </tr>
          <tr>
            <ti>Thomas Dickey</ti>
            <ti></ti>
            <ti>Maintains xterm, does some other misc. X and ncurses
            stuff.</ti>
          </tr>
          <tr>
            <ti>Egbert Eich</ti>
            <ti>egbert</ti>
            <ti>SuSE X maintainer, X.Org board member. Was release manager for
            6.7.0.
            </ti>
          </tr>
          <tr>
            <ti>Jim Gettys</ti>
            <ti>jg</ti>
            <ti>keithp's partner in crime</ti>
          </tr>
          <tr>
            <ti>Matthieu Herrb</ti>
            <ti>herrb</ti>
            <ti>OpenBSD X maintainer. Many commits are security-related, so
            watch them.
            </ti>
          </tr>
          <tr>
            <ti>Benjamin Herrenschmidt</ti>
            <ti>benh</ti>
            <ti>Works for IBM. Hacks some on Radeon, particularly PPC.</ti>
          </tr>
          <tr>
            <ti>Kristian Hogsberg</ti>
            <ti>krh</ti>
            <ti>Works for Red Hat. Hacked on evdev driver, helped in
            modularization</ti>
          </tr>
          <tr>
            <ti>Alan Hourihane</ti>
            <ti>alanh</ti>
            <ti>Maintains i915 driver, trident driver. Has hacked on sunffb
            DRI too.</ti>
          </tr>
          <tr>
            <ti>Adam Jackson</ti>
            <ti>ajax</ti>
            <ti>DRI, dlloader, and general server cleanup. He uses Gentoo and
            will help out. He's on the x11 alias. Release manager for 7.0. Red
            Hat X maintainer.</ti>
          </tr>
          <tr>
            <ti>Dave Jones</ti>
            <ti>davej</ti>
            <ti>Maintains agpgart in Linux kernel</ti>
          </tr>
          <tr>
            <ti>Nolan Leake</ti>
            <ti>nolan</ti>
            <ti>Works for VMWare, maintains vmware driver</ti>
          </tr>
          <tr>
            <ti>Roland Mainz</ti>
            <ti>nrubsig</ti>
            <ti>Develops XPrint. Been very scarce for the last year or so.</ti>
          </tr>
          <tr>
            <ti>Kevin Martin</ti>
            <ti>kem</ti>
            <ti>Works for Red Hat. Release manager for 6.8.0, 6.9/7.0.</ti>
          </tr>
          <tr>
            <ti>David Nusinow</ti>
            <ti>gravity</ti>
            <ti>New Debian X maintainer</ti>
          </tr>
          <tr>
            <ti>Keith Packard</ti>
            <ti>keithp</ti>
            <ti>A leader of the "new wave" of X developers, works at Intel</ti>
          </tr>
          <tr>
            <ti>Brian Paul</ti>
            <ti></ti>
            <ti>Mesa maintainer</ti>
          </tr>
          <tr>
            <ti>Aaron Plattner</ti>
            <ti>AaronP</ti>
            <ti>Works for nVidia. Maintains nv driver in XOrg.</ti>
          </tr>
          <tr>
            <ti>Ian Romanick</ti>
            <ti>idr</ti>
            <ti>Works for IBM. DRI guru.</ti>
          </tr>
          <tr>
            <ti>Zack Rusin</ti>
            <ti>zrusin</ti>
            <ti>Works for Trolltech. Did some work with Exa and Render.</ti>
          </tr>
          <tr>
            <ti>SÃ¸ren Sandmann</ti>
            <ti>ssp</ti>
            <ti>Works for Red Hat. Did some MMX optimization, modularization
            work.</ti>
          </tr>
          <tr>
            <ti>Daniel Stone</ti>
            <ti>daniels</ti>
            <ti>Lots of experience in modularized, autotooled X. Now works at
            Nokia, former Ubuntu and Debian X maintainer.</ti>
          </tr>
          <tr>
            <ti>Luc Verhaegen</ti>
            <ti>libv</ti>
            <ti>Hacks on via driver</ti>
          </tr>
          <tr>
            <ti>Mark Vojkovich</ti>
            <ti></ti>
            <ti>Works for nVidia. Maintains nv driver in XFree86.</ti>
          </tr>
          <tr>
            <ti>Keith Whitwell</ti>
            <ti>keithw</ti>
            <ti>A lead DRI developer, along with idr.</ti>
          </tr>
        </table>
      </body>
    </section>
  </chapter>

  <chapter>
    <title>Handling Bugs</title>
    <section>
      <title>Queries</title>
      <body>
        <p>
          Before you can start dealing with bugs, you need to have good ways
          to find which ones you want to deal with. I have 10 X-related
          queries saved in my Bugzilla settings: <c>X Security</c>, <c>X
          blocker</c>, <c>X critical</c>, <c>X major</c>, <c>X minor</c>, <c>X
          trivial</c>, <c>X inclusion</c>, <c>X CC</c>, <c>X</c> and <c>X
          enhancements</c>. The <c>X</c> query is: All bugs with Status
          UNCONFIRMED NEW ASSIGNED REOPENED where severity is everything
          except enhancement and bug owner is <mail>x11@gentoo.org</mail>. The
          <c>X enhancements</c> query is the same but with the severity set
          only to enhancement. Similar holds true for other severity-related
          queries. <c>X CC</c> is all open bugs that
          <mail>x11@gentoo.org</mail> is CC'd on. <c>X inclusion</c> is all
          open bugs assigned to <mail>x11@gentoo.org</mail> with <c>Keywords:
          Inclusion</c>. This is used to create a short list of ready-to-go
          commits with attached patches or very obvious changes. <c>X
          Security</c> is a list of all open bugs with either assignee or CC
          <mail>x11@gentoo.org</mail> and either assignee or CC
          <mail>security@gentoo.org</mail>.
        </p>

        <p>
          You may wish to divide the bugs up better, but first realize this:
          Bug priorities are not well-triaged at this point in time (2 May
          2007), so restricting the priority is a very artificial way to do
          things. After you enter this search into the advanced page, you'll
          be able to save it from the bottom of the results page.
        </p>
      </body>
    </section>
    <section>
      <title>Triage</title>
      <body>
        <p>
          As soon as you have time after reading your Bugzilla emails, you
          should go to the bug URL and glance briefly over the bug. In this
          time, you should be able to figure out whether: (a) the bug is
          assigned to the right people, (b) any other people should be CC'd,
          (c) the bug is not obviously invalid and (d) the system isn't
          overoptimized. From (d), it follows that you'll need <c>emerge
          info</c> to diagnose the problem in nearly all cases, so you get
          CFLAGS and the toolchain.
        </p>

        <p>
          If the bug appears valid and should be assigned to us, then classify
          the severity. The basis for this is:
        </p>

        <table>
          <tr>
            <th>Severity</th>
            <th>Description</th>
          </tr>
          <tr>
            <ti>blocker</ti>
            <ti>It breaks entire systems, causes data loss, prevents booting,
            etc.
            </ti>
          </tr>
          <tr>
            <ti>critical</ti>
            <ti>Compilation failures that don't appear to be corner cases,
            unavoidable crashes, X not starting</ti>
          </tr>
          <tr>
            <ti>major</ti>
            <ti>Significant runtime issues that render X useless</ti>
          </tr>
          <tr>
            <ti>normal</ti>
            <ti>Most bugs will fall under this.</ti>
          </tr>
          <tr>
            <ti>minor</ti>
            <ti>Bugs that don't significantly affect use and have a
            workaround</ti>
          </tr>
          <tr>
            <ti>trivial</ti>
            <ti>Bugs that result in nearly no end-user or developer
            change. For example, prettifying some code in the ebuild, small
            docs typos, etc.
            </ti>
          </tr>
          <tr>
            <ti>enhancement</ti>
            <ti>Feature requests, new packages, etc. Version bumps do
            <b>not</b> fall under this. They should probably be "normal."</ti>
          </tr>
        </table>

        <p>
          Also classify the priority. The basis for this is:
        </p>

        <table>
          <tr>
            <th>Priority</th>
            <th>Description</th>
          </tr>
          <tr>
            <ti>P1</ti>
            <ti>Must-fix</ti>
          </tr>
          <tr>
            <ti>P2</ti>
            <ti>Might-fix</ti>
          </tr>
          <tr>
            <ti>P3</ti>
            <ti>Probably won't fix</ti>
          </tr>
          <tr>
            <ti>P4</ti>
            <ti>Won't fix unless there are no other open bugs and nothing else
            to do
            </ti>
          </tr>
          <tr>
            <ti>RESOLVED-&gt;WONTFIX</ti>
            <ti>Won't fix, period
            </ti>
          </tr>
        </table>
      </body>
    </section>

    <section>
      <title>Bug-fixing</title>
      <body>

        <p>
          Once you've got all the open X bugs triaged, you can start fixing
          them. It's vital to remember that you need to split your time
          between <b>all</b> levels of severity. There will always be more
          critical bugs coming in, and if you never work on anything lower
          unless there are no critical bugs, you'll never work on anything
          lower. You don't need to split your time evenly -- just split it.
        </p>

        <p>
          Just start looking through all priority-1 bugs. Ignore anything
          priority-2 and lower until all priority-1 bugs are fixed. Always be
          alert for mis-classified bugs while you're browsing the list of open
          bugs, whether they're over- or under-prioritized. The same goes for
          severity.
        </p>

        <p>
          Open a bug and glance through it. Does it have all the necessary
          info? You'll often need <path>/etc/X11/xorg.conf</path>,
          <path>/var/log/Xorg.${DISPLAY}.log</path>, <c>emerge info</c> and
          <c>dmesg</c>. First, make sure the user has a proper configuration.
          Then, make sure the USE combination is known to work. For example,
          right now, combining <c>dmx</c> and <c>doc</c> breaks the build. One
          of my favorite little commands is <c>grep -e '^(EE)' -e '^(WW)'
          Xorg.0.log</c>. If it's a problem with direct rendering, you'll
          often want <c>LIBGL_DEBUG=verbose glxinfo</c> output.
        </p>

        <p>
          After requesting more information from the users, close their bugs
          as RESOLVED->NEEDINFO and ask them to reopen it upon reply. This
          ensures that all open bugs are bugs that require action from the X11
          team.
        </p>

        <p>
          If it's a bug with the X code rather than our ebuilds, the reporter
          needs to send it upstream. Ask them to file it in the xorg product
          at <uri>bugs.freedesktop.org</uri> and post the URL in the Gentoo
          bug, then reopen the bug when it's been committed upstream. Close
          the bug as RESOLVED->UPSTREAM and add the upstream URL to the URL
          field.
        </p>

      </body>
    </section>
  </chapter>

  <chapter>
    <title>Patches</title>
    <section>
      <title>Where to Find Them</title>
      <body>

        <p>
          Patches you'll add will come from basically two places: <uri
          link="http://bugs.gentoo.org/">Gentoo's Bugzilla</uri> and <uri
          link="http://bugs.freedesktop.org/">freedesktop.org's
          Bugzilla</uri>. They may link to other places from there, but don't
          feel any pressure to go out patch-hunting beyond those Bugzillas and
          the X mailing lists.
        </p>

      </body>
    </section>

    <section>
      <title>When to Accept Them</title>
      <body>

        <p>
          Patches can only be added after there has been an upstream bug filed
          and the patch has been committed upstream. This ensures that the
          code benefits from review by the most experienced people in the
          field and reduces the burden of support on us, because we can start
          pointing problems upstream. It also makes things easier on us in the
          future, because the next release will have the patch included so it
          can be dropped from our patchset.
        </p>

        <p>
          Never accept any requests to add random patches to our ebuilds,
          regardless of their source, unless they are also in upstream. If
          somebody already filed an upstream bug, follow that bug through
          until the patch is committed before adding it to our patchset.
        </p>

        <p>
          The only exceptions to this rule are when the patch fixes a build
          breakage or a security vulnerability.
        </p>

      </body>
    </section>

    <section>
      <title>How to Format Them</title>
      <body>

        <p>
          Try to format patches to apply from the directory one level above
          ${S}. For example, a libX11-1.0.0 patch would diff from
          libX11-1.0.0.orig to libX11-1.0.0, using <c>diff -urN
          libX11-1.0.0.orig libX11-1.0.0 > patchname.patch</c>. If you're
          creating the patch from upstream source code, it may be easier to
          apply from within ${S} instead. Don't waste any effort on remaking
          that patch, although you can do this using <c>filterdiff
          --addprefix</c> from <c>patchutils</c>.
        </p>

        <p>
          Above the content of each patch, add comments on what the patch does
          and why it is necessary. Make <b>sure</b> there is an
          <b>upstream</b> bug filed for every patch added to the tree, and
          make sure this URL is listed in the top of the patch. The only
          exception is a patch that cannot be used by upstream because it is
          for some reason Gentoo-specific.
        </p>

      </body>
    </section>
  </chapter>

  <chapter>
    <title>Maintaining Modular</title>
    <section>
      <title>Dependencies</title>
      <body>

        <p>
          The modularization of X doesn't allow components of X to safely
          assume everything they need will be present at both build- and
          run-time. Modular packages' configure.ac is useful for finding out
          what upstream thinks is required and is a good guide for what your
          resulting ebuild should require.  Most of this information is held
          within the <c>PKG_CHECK_MODULES</c> lines (note that there are often
          multiple - look through the whole file).
        </p>

        <p>
          As a general (and somewhat obvious) rule of thumb,
          <c>x11-proto/*</c> packages belong in <c>DEPEND</c>, and packages
          containing fonts, libraries and executables should go in
          <c>RDEPEND</c>. See the <uri
          link="porting-modular-x-howto.xml">modular X porting guide</uri> for
          details.
        </p>

      </body>
    </section>

    <section>
      <title>More stuff relevant to modular maintenance</title>
      <body>

        <p>
          Definitely have a list of every modular package so you can script
          actions across all of modular X. Without this, it can take forever
          to get anything major done.  Even with it, major cross-tree commits
          take a ton of time. Install <c>pkgcore</c> and use this command to
          get the list: <c>pquery --herd x11 --repo /usr/portage --no-version | tee file</c>.
        </p>

        <p>
          Dedicate the time to fully understanding how
          <path>x-modular.eclass</path> works because it will pay off when you
          get tricky bugs, or when you want to make a change to how something
          builds.
        </p>

        <p>
          Some useful links are the <uri
          link="http://sources.redhat.com/autobook/"> Autobook</uri>, the <uri
          link="http://xorg.freedesktop.org/wiki/ModularDevelopersGuide">Modular
          Developer's Guide</uri>, and the devmanual
          <uri link="http://devmanual.gentoo.org/general-concepts/autotools/index.html">
            section on autotools</uri>.
        </p>

      </body>
    </section>
  </chapter>

</guide>
