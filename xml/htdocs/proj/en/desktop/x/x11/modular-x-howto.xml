<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/desktop/x/x11/modular-x-howto.xml,v 1.65 2012/10/28 15:21:02 swift Exp $ -->

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide>
<title>Migrating to Modular X HOWTO</title>

<author title="Author">
  <mail link="dberkholz@gentoo.org">Donnie Berkholz</mail>
</author>
<author title="Author">
  <mail link="joshuabaergen@gmail.com">Joshua Baergen</mail>
</author>

<abstract>
This guide shows you how to migrate to modular X.Org.
</abstract>

<!-- The  content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.1.2</version>
<date>2006-11-05</date>

<chapter>
<title>Introduction</title>
<section>
<title>Why modular?</title>
<body>

<p>
You may be wondering, why in the world did one nice, easy xorg-x11 package turn
into almost 300 separate ones? And you'd certainly be justified in this. =)
It's not something Gentoo is doing independently of upstream X.Org; they're
splitting up all the packages into separate releases, and we're just following
along.
</p>

<p>
The reasoning behind the split and changing build system is at least threefold:
</p>

<ul>
  <li>
    X is too difficult to get into for new devs, so thus the move to autotools,
    a system more people are comfortable with if not happy with.
  </li>
  <li>
    Along with that move, splitting out the source is possible with autotools,
    and this also makes it more developer-friendly.
  </li>
  <li>
    Things have been unnecessarily tied together in the past, and this has made
    getting bugfixes out often impossible. If they were able to get out fixes,
    it required rebuilding all of XOrg. For example, a bug in the ati driver
    would either need to wait 6 months until the next release, or you'd have to
    rebuild your fonts to get it, for absolutely no reason.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Migrating to Modular X</title>
<section>
<title>Introduction</title>
<body>

<p>
To keep old packages from getting in the way, we're going to clean out all the
old xorg-x11 cruft before installing modular X. This isn't absolutely crucial,
but it will help ensure a smooth migration.
</p>

</body>
</section>
<section>
<title>First step: Clean out your old X</title>
<body>

<p>
Create a backup copy of the monolithic xorg-x11 in case modular X works poorly
for you, and you want to revert to 6.x. You may wish to install a text-mode
browser such as links or lynx to view this howto with when X is not available.
</p>

<pre caption="Backing up the old xorg-x11">
# <i>emerge gentoolkit</i>
# <i>quickpkg xorg-x11</i>
</pre>

<p>
Get rid of the monolithic installation. To avoid the possibility of crashes or
hard locking your system, you may want to quit any running X sessions before
uninstalling X.Org.
</p>

<pre caption="Unmerging the monolitic installation">
# <i>emerge -Ca xorg-x11 virtual/x11</i>
</pre>

<p>
If your <path>/usr/X11R6</path> isn't a symlink to <path>/usr</path>, delete it
and start from scratch. But first, save a list of all the packages installing
there. The <c>gentoolkit</c> package provides <c>equery</c>.
</p>

<pre caption="Make a package list">
# <i>if [[ ! -L /usr/X11R6 ]]; \
    then equery belongs /usr/X11R6 > ~/usr-x11r6-packages \
    &amp;&amp; rm -rf /usr/X11R6; fi</i>
</pre>

<p>
Finally, if <path>/usr/lib/X11/xkb</path> (<path>/usr/lib64/X11/xkb</path> for
64-bit users) exists, it should be removed.  This is a requirement for the
<c>xkeyboard-config</c> package to install.
</p>

</body>
</section>
<section>
<title>Second step: Installing modular X</title>
<body>

<p>
For direct rendering, check that the <c>dri</c> USE flag is active. It should
be on by default.
</p>

<p>
Next, decide which drivers you need to install. This will vary depending on
your input and video hardware. If you already have a working
<path>/etc/X11/xorg.conf</path>, then just run this command to get an idea of
what drivers you need:
</p>

<pre caption="Finding what drivers you need">
# <i>grep Driver /etc/X11/xorg.conf</i>
        Driver      "kbd"
        Driver      "mouse"
        Driver      "radeon"
</pre>

<pre caption="Checking available drivers">
# <i>emerge --verbose --pretend xorg-x11</i>
[ebuild   R   ] x11-base/xorg-x11-7.0-r1  USE="-xprint" INPUT_DEVICES="keyboard
mouse -acecad -aiptek -calcomp -citron -digitaledge -dmc -dynapro -elo2300
-elographics -evdev -fpit -hyperpen -jamstudio -joystick -magellan -magictouch
-microtouch -mutouch -palmax -penmount -spaceorb -summa -synaptics% -tek4957
-ur98 -vmmouse -void" VIDEO_CARDS="i128 mga radeon savage -apm -ark -chips
-cirrus -cyrix -dummy -fbdev -fglrx% -glint -i740 -i810 -imstt -mach64 -neomagic
-newport -nsc -nv -nvidia% -r128 -rendition -s3 -s3virge -siliconmotion -sis
-sisusb -sunbw2 -suncg14 -suncg3 -suncg6 -sunffb -sunleo -suntcx -tdfx -tga
-trident -tseng -v4l -vesa -vga -via -vmware -voodoo" 0 kB
</pre>

<p>
Set INPUT_DEVICES and VIDEO_CARDS to what you need in
<path>/etc/make.conf</path>. The minimal setting for the above example would be
INPUT_DEVICES="<c>keyboard mouse</c>" VIDEO_CARDS="<c>radeon</c>". If you don't
set one or the other variable, xorg-x11 will pull in all possible drivers of
that type. For backup drivers, you may also want to add <c>vesa</c> and
<c>fbdev</c> to VIDEO_CARDS.
</p>

<p>
Now, install the metabuild. This will install the server and popular
applications, giving you a working desktop implementation of X:
</p>

<pre caption="Installing the modular metabuild">
# <i>emerge xorg-x11</i>
# <i>etc-update</i>
# <i>revdep-rebuild</i>
# <i>[[ -e ~/usr-x11r6-packages ]] &amp;&amp; emerge 
$(&lt;~/usr-x11r6-packages)</i>
</pre>

<note>
If you really want a minimal installation, just install <c>xorg-server</c>.
This will pull in only what you need to start an X server.
</note>

<p>
This install tries to be rather minimal, so things like xcursor-themes are not
installed by default. In that particular example, you would want xcursor-themes
if you changed your cursor setting to whiteglass, redglass or handhelds. If you
use the gentoo, gentoo-blue or gentoo-silver cursor themes, install
gentoo-xcursors.
</p>

<note>
With modular installed, external drivers such as nvidia-glx and wacom as well
as some vnc apps may not work if they install things to
<path>/usr/lib/modules</path> instead of <path>/usr/lib/xorg/modules</path>.
Many of these will have modular X detection added to the installation process
and thus will need to be re-merged after modular X install. In addition, many
external drivers have a <c>dlloader</c> USE flag that you must enable and then
rebuild the drivers.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Caveats/Common Problems</title>
<section>
<title>'emerge -u world' wants to install xorg-x11 6.x or virtual/x11</title>
<body>

<p>
This is because the tree isn't fixed for modular dependencies yet. You can help
the porting effort by reading the <uri
link="porting-modular-x-howto.xml">Porting to Modular X HOWTO</uri> and filing
bugs with patches to the individual package maintainers. The  maintainers will
be listed in <path>metadata.xml</path> in the same directory as the package and
the <c>herdstat</c> package will speed up querying for them.
</p>

<p>
Particularly if you are running modular X on an otherwise stable system, you
may run into issues with this. Many packages only work with modular X in their
~arch versions, so you may need to add additional packages to
<path>/etc/portage/package.keywords</path>.
</p>

</body>
</section>
<section>
<title>What happened to all the USE flags?</title>
<body>

<p>
Many USE flags in the xorg-x11-6.8 series vanished or moved in 7.0. Some new
USE flags appeared. Here's why:
</p>

<table>
<tr>
  <th>USE flag</th>
  <th>What happens in 7.0?</th>
</tr>
<tr>
  <ti>3dfx</ti>
  <ti>In 7.0, pulls in glide-v3 from the xorg-x11 metabuild</ti>
</tr>
<tr>
  <ti>3dnow, mmx, sse</ti>
  <ti>Enabled by default at build time, because there are runtime checks</ti>
</tr>
<tr>
  <ti>bitmap-fonts, truetype-fonts, type1-fonts</ti>
  <ti>
    The xorg-x11 metabuild pulls in a small selection of the most used or
    required fonts. You may additionally install any others in media-fonts/.
  </ti>
</tr>
<tr>
  <ti>cjk</ti>
  <ti>
    USE=nls on font-misc-misc and font-sony-misc to get Japanese JISX0201
    fonts. More are in font-jis-misc. Chinese fonts are in font-isas-misc.
    Korean fonts are in font-daewoo-misc.
  </ti>
</tr>
<tr>
  <ti>dlloader</ti>
  <ti>7.0 uses the dlloader by default, and the elfloader doesn't work.</ti>
</tr>
<tr>
  <ti>doc</ti>
  <ti>Moved to app-doc/xorg-docs</ti>
</tr>
<tr>
  <ti>dmx</ti>
  <ti>Built in xorg-server unless USE=minimal</ti>
</tr>
<tr>
  <ti>font-server</ti>
  <ti>You may manually install xfs.</ti>
</tr>
<tr>
  <ti>ipv6</ti>
  <ti>Moved to individual packages using it. Set globally if you want it.</ti>
</tr>
<tr>
  <ti>minimal</ti>
  <ti>
    To get the same effect, install just xorg-server rather than xorg-x11.
    USE=minimal on xorg-server to avoid building Xdmx, Xvfb and Xnest.  If you
    require something more minimal, look into x11-base/kdrive.
  </ti>
</tr>
<tr>
  <ti>nls</ti>
  <ti>In 7.0, USE=nls installs all non-ISO8859-1 versions of fonts.</ti>
</tr>
<tr>
  <ti>nocxx</ti>
  <ti>Not yet an equivalent in 7.0</ti>
</tr>
<tr>
  <ti>opengl</ti>
  <ti>
    Changed names to "dri," which enables direct rendering in xorg-server and
    many drivers. Whether USE=dri is on or off, you should still get software
    3D via Mesa.
  </ti>
</tr>
<tr>
  <ti>pam</ti>
  <ti>Moved to individual packages using it, such as xorg-server and xdm</ti>
</tr>
<tr>
  <ti>sdk</ti>
  <ti>7.0 must install the SDK as a consequence of modularization.</ti>
</tr>
<tr>
  <ti>static</ti>
  <ti>
    Mostly doesn't make much sense to try building a static server in a modular
    world, because the driver can't be built into it.
  </ti>
</tr>
<tr>
  <ti>xprint</ti>
  <ti>
    On metabuild, pulls in libXp. On other applications, builds in xprint
    support. Most people will not want to enable this.
  </ti>
</tr>
<tr>
  <ti>xv</ti>
  <ti>
    No longer optional because it doesn't save much size and causes other
    issues with some packages expecting it.
  </ti>
</tr>
</table>

</body>
</section>
<section>
<title>What happened to all the config files?</title>
<body>

<p>
In Gentoo's X.Org 6.8 package, all of the configuration files and scripts were
stored in <path>/etc/X11</path>. In modular X.Org, the upstream locations for
these files have been changed -- that is, configuration files are still in
<path>/etc/X11</path>, but scripts and default configurations are now in
<path>/usr/lib/X11</path> (or <path>/usr/lib64/X11</path>) and
<path>/usr/share/X11</path>.
</p>

<p>
Because of configuration protection (CONFIG_PROTECT), you will probably have
all of your old configuration files from X.Org 6.8 still in
<path>/etc/X11</path>, taking up space and looking useful.
</p>

<p>
Since these new directories are not in CONFIG_PROTECT, it is important that any
changes to default configurations be done by copying the relevant files to
<path>/etc/X11</path> and updating the appropriate configuration file there.
Alternatively, but not recommended, the new location can be config-protected.
Below are some examples:
</p>

<pre caption="Customizing the initialization of XDM">
<comment>
First, copy the Xsetup_0 file to /etc so it is config-protected.
</comment>
# <i>cp -a /usr/lib/X11/xdm/Xsetup_0 /etc/X11/xdm/</i>
<comment>
Edit the file and customize as you wish.
</comment>
<comment>
Then, edit xdm-config to update the path to this file.
</comment>
# <i>nano /etc/X11/xdm/xdm-config</i>
<comment>
Change the following from this:
</comment>
    ! The following three resources set up display :0 as the console.
    DisplayManager._0.setup:        /usr/lib/X11/xdm/Xsetup_0
    DisplayManager._0.startup:      /usr/lib/X11/xdm/GiveConsole
    DisplayManager._0.reset:        /usr/lib/X11/xdm/TakeConsole
<comment>
...to this:
</comment>
    ! The following three resources set up display :0 as the console.
    <i>DisplayManager._0.setup:        /etc/X11/xdm/Xsetup_0</i>
    DisplayManager._0.startup:      /usr/lib/X11/xdm/GiveConsole
    DisplayManager._0.reset:        /usr/lib/X11/xdm/TakeConsole
</pre>
<note>
On 64-bit multilib systems with the no-symlink profile, you need to change lib
to lib64.
</note>

<p>
In this example submitted by Joe Womack, we'll customize some <c>xterm</c>
settings.  This can either be done globally or on a per-user basis.
</p>

<pre caption="Customizing app-defaults/XTerm-color globally">
<comment>
Similar to above, create a copy of the file in /etc so that it is
config-protected:
</comment>
# <i>cp -a /usr/share/X11/app-defaults/XTerm-color /etc/X11/app-defaults/</i>
<comment>
Customize the file as you wish.  Now, we need to tell Xt where to find the
files through XFILESEARCHPATH.  Put it in a file under /etc/env.d:
</comment>
# <i>echo '# This applies the customizations system-wide.' >> /etc/env.d/10xpaths</i>
# <i>echo 'XFILESEARCHPATH=/etc/X11/%T/%N:/usr/share/X11/%T/%N' >> /etc/env.d/10xpaths</i>
</pre>

<pre caption="Customizing app-defaults/XTerm-color locally">
<comment>There are two ways to do this:</comment>
<comment>1) Setup a per-user app-defaults directory:</comment>
# <i>echo '# This applies user customizations in $HOME/app-defaults.' >> /etc/env.d/10xpaths </i>
# <i>echo 'XUSERFILESEARCHPATH=$HOME/%T/%N' >> /etc/env.d/10xpaths</i>

<comment>
2) Create a .Xdefaults or .Xresources and copy the settings you want to
change. This example changes all XTerms to have an orange cursor, run as a
login shell, have a scroll bar decoration, and a 1000 line scroll back buffer:
</comment>
# <i>echo '! Xterm defaults'               >> .Xresources</i>
# <i>echo 'XTerm*CursorColor:      orange' >> .Xresources</i>
# <i>echo 'XTerm*loginShell:       true'   >> .Xresources</i>
# <i>echo 'XTerm*scrollBar:        true'   >> .Xresources</i>
# <i>echo 'XTerm*saveLines:        1000'   >> .Xresources</i>

<comment>
For these setting to take effect, the either re-start X or run:
</comment>
# <i>xrdb -merge $HOME/.Xresources</i>
</pre>

<note>
See http://www.faqs.org/faqs/x-faq/part2/section-22.html for more details on
setting XFILESEARCHPATH and XUSERFILESEARCHPATH.  See
http://tldp.org/HOWTO/XWindow-User-HOWTO/moreconfig.html#XRESOURCES for more
details on .Xresources.
</note>

</body>
</section>
<section>
<title>Driver problems</title>
<body>

<p>
I've had reports that:
</p>

<ul>
  <li>vesa locks up box with a Matrox card</li>
  <li>vga produces a very weird-looking screen, divided into quarters</li>
</ul>

</body>
</section>
<section>
<title>Getting 3D acceleration working again</title>
<body>

<p>
To get some debugging info to help in getting direct rendering working:
</p>

<pre caption="Getting some debug info">
# <i>grep -e EE -e WW /var/log/Xorg.0.log</i>
# <i>LIBGL_DEBUG=verbose glxinfo</i>
</pre>

</body>
</section>
<section>
<title>Mouse protocol autodetection</title>
<body>

<p>
If you have <c>"Protocol" "auto"</c> set in xorg.conf for your mouse, it may
not work. You may need to specify <c>"Protocol" "ExplorerPS/2"</c> or
<c>"IMPS/2"</c> for your wheel to work.
</p>

</body>
</section>
<section>
<title>I'm getting error messages about libbitmap or libpcidata not
found</title>
<body>

<p>
Make sure no <c>ModulePath</c> entry exists in <path>/etc/X11/xorg.conf</path>.
</p>

</body>
</section>
<section>
<title>gdm/kdm don't work</title>
<body>

<p>
If you installed modular X on a fresh Gentoo installation, you may not have a
<path>/usr/X11R6</path> -&gt; <path>/usr</path> symlink. The
<c>x11-base/xorg-x11</c> package will ensure that the symlink exists during the
emerge process.
</p>

<p>
You can help get things out of <path>/usr/X11R6</path> by fixing the packages
that install there and filing bugs. Also, remember to reinstall these packages.
</p>

<pre caption="Packages that install to /usr/X11R6">
# <i>cat ~/usr-x11r6-packages</i>
# <i>emerge --pretend $(&lt; ~/usr-x11r6-packages )</i>
</pre>

</body>
</section>

<section>
<title>XKB doesn't work, I can't switch VTs, etc</title>
<body>

<ul>
  <li>
    Many XKB layouts have moved around, consolidated or disappeared. Take a
    look in <path>/usr/share/X11/xkb/symbols/</path> to see what happened to
    your old XkbLayout settings in xorg.conf. For example, to replace the old
    "us_intl" layout, you would put <c>"XkbLayout" "latin"</c>, <c>"XkbOptions"
    "lv3:ralt_switch"</c>. To replace the old "sk_qwerty" layout, you would put
    <c>"XkbLayout" "sk"</c>, <c>"XkbVariant" "qwerty"</c>. For a more advanced
    example, perhaps you have <c>"XkbLayout" "us,sk_qwerty"</c>. To get that
    working, the new setting would be <c>"XkbLayout" "us,sk"</c>, and the
    tricky part is in the comma here: <c>"XkbVariant" ",qwerty"</c>, because
    you want the variant to apply to your second layout.
  </li>
</ul>

<pre caption="Tracking down XKB changes">
<comment>Check /var/log/Xorg.0.log for this message:</comment>
<comment>(WW) Couldn't load XKB keymap, falling back to pre-XKB keymap</comment>
<comment>If you do not have that error, your XKB works already.</comment>
# <i>grep Xkb /etc/X11/xorg.conf</i>
        Option "XkbModel"  "logibik"
        Option "XkbLayout"  "dvorak"
        Option "XkbOptions" "ctrl:swapcaps"
<comment>First, see what changed with your layout. This is in the symbols/pc 
directory.</comment>
# <i>cd /usr/share/X11/xkb/symbols/</i>
<comment>If you have xkbdata instead of xkeyboard-config installed, change to 
the pc/ subdirectory.</comment>
# <i>ls *dvorak*</i>
<comment>OK, nothing showed up.</comment>
<comment>Lots of old layouts moved into their country-coded keymaps.</comment>
# <i>ls *us*</i>
us
<comment>Now, we check for an xkb_symbols variant called dvorak.</comment>
# <i>grep xkb_symbols.*dvorak us</i>
xkb_symbols "dvorak" {
<comment>That means in xorg.conf, we need Option "XkbLayout" "us"</comment>
<comment>and Option "XkbVariant" "dvorak".</comment>

<comment>But when we try to test this with setxkbmap, we still get an 
error</comment>
# <i>setxkbmap -model logibik -layout us -variant dvorak -option 
"ctrl:swapcaps"</i>
<comment>Maybe the model changed, too.</comment>
# <i>cd /usr/share/X11/xkb/rules/</i>
# <i>grep logibik xorg.lst</i>
<comment>No output from that, so that model is gone. How about similar 
ones?</comment>
# <i>grep logi* xorg.lst</i>
  logiaccess      Logitech Access Keyboard
  logicdit        Logitech Cordless Desktop iTouch
  logicdp         Logitech Cordless Desktop Pro
  logicdpa        Logitech Cordless Desktop Pro (alternate option)
  logicdpa2       Logitech Cordless Desktop Pro (alternate option2)
  logicdo         Logitech Cordless Desktop Optical
  logicfn         Logitech Cordless Freedom/Desktop Navigator
  logicdn         Logitech Cordless Desktop Navigator
  logidak         Logitech Deluxe Access Keyboard
  logiitc         Logitech iTouch Cordless Keyboard (model Y-RB6)
  logiik          Logitech Internet Keyboard
  logiitc         Logitech iTouch Cordless Keyboard (model Y-RB6)
  logiik          Logitech Internet Keyboard
  logiink         Logitech Internet Navigator Keyboard
  logiultrax      Logitech Ultra-X Keyboard
<comment>Great! The "logiik" model looks similar, so test it out with 
setxkbmap.</comment>
# <i>setxkbmap -model logiik -layout us -variant dvorak -option 
"ctrl:swapcaps"</i>
<comment>It worked, so change the XkbModel entry to that.</comment>
<comment>After that, everything works</comment>
</pre>

</body>
</section>
<section>
<title>Other Issues</title>
<body>

<ul>
  <li>
    The <c>x11-base/xorg-x11</c> package now filters all ModulePath and RgbPath
    lines from your <path>/etc/X11/xorg.conf</path>, as both of these paths
    have changed since previous versions. Make sure you run <c>etc-update</c>
    to finalize these changes. If for some reason they weren't filtered, remove
    them yourself.
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
