<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/desktop/games/games-ebuild-howto.xml,v 1.1 2005/06/06 18:29:14 wolf31o2 Exp $ -->
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="games-ebuild-howto.xml">
<title>Gentoo Games Ebuild HOWTO</title>

<author title="Author">
	<mail link="chrisbrill@gmx.net">Christoph Brill</mail>
</author>

<author title="Editor">
	<mail link="wolf31o2@gentoo.org">Chris Gianelloni</mail>
</author>

<abstract>
	This guide outlines the best practices for creating ebuilds for games on Gentoo.
</abstract>

<license/>

<version>0.1</version>
<date>6 June 2005</date>

<chapter>
	<title>Introduction</title>
	<section>
		<body><p>This guide is intended to give an overview of how to write good games ebuilds.  Writing games ebulds using the best possible style allows for your submission to be added to Gentoo quickly and with no issues.  There are several simple steps that you can follow to acheive this goal, starting from games ebuilds basics to some really nice tricks to work around the broken state of some upstream packages.  This guide also tries to point out common mistakes made when contributing an ebuild.</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>Prerequisites</title>
	<section>
		<body><p>First and foremost, this document will show you the proper way to write an ebuild, starting with the file naming and placement.</p>
		</body>
	</section>
	<section>
		<title>Installing vim</title>
		<body><p>This ebuild guide recommends using "vim" for creating ebuilds.  Together with "gentoo-syntax" you can create ebuilds quite simply.</p>
			<pre caption="Installing vim and gentoo-syntax">emerge app-editors/vim app-vim/gentoo-syntax</pre>
			<p>Now vim will have proper syntax highlighting for ebuilds.  It also has a default template for ebuilds.  If you are unfamiliar with vim, I recommend reading the <uri link="http://www.gentoo.org/doc/en/vi-guide.xml">Learning vi</uri> guide to familiarize yourself with it.</p>
		</body>
	</section>
	<section>
		<title>Creating a games ebuild in your overlay</title>
		<body><p>We are going to create a game ebuild in your portage overlay.  The first thing you will need to do, is to decide which game you would like to write as an ebuild.  Next, you will want to decide which category your game best fits.</p>
			<ul>
				<li>games-action</li>
				<li>games-arcade</li>
				<li>games-board</li>
				<li>games-emulation</li>
				<li>games-engines</li>
				<li>games-fps</li>
				<li>games-kids</li>
				<li>games-misc</li>
				<li>games-mud</li>
				<li>games-puzzle</li>
				<li>games-roguelike</li>
				<li>games-rpg</li>
				<li>games-server</li>
				<li>games-simulation</li>
				<li>games-sports</li>
				<li>games-strategy</li>
				<li>games-util</li>
			</ul>
			<p>If, for example, your game is a soccer game named "kickball", you would create a directory in your local overlay like follows.</p>
			<pre caption="Creating your overlay direcory">
# mkdir -p /usr/local/portage/games-sports/kickball
			</pre>
			<p>If the package is a binary package, and does not support compilation, then append a "-bin" to the end of the package name to make up the portage package name.  This is not a requirement, but in most cases is a good idea.  Next, you will need to know the version number of the package.  It might be needed to convert this number into a format suitable to portage.  The ebuild naming policy can be found at <uri link="http://www.gentoo.org/proj/en/devrel/handbook/handbook.xml?part=2"></uri> online.  After deciding on the category and naming of your new ebuild, we will want to start editing on it.</p>
			<pre caption="Using vi to edit your ebuild">
# cd /usr/local/portage/games-sports/kickball
# vi kickball-1.0.ebuild
			</pre>
			<p>At this point, vim will populate out a skeleton ebuild for you.  It should look like the following.</p>
			<pre caption="Skeleton ebuild example">
# Copyright 1999-2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/desktop/games/games-ebuild-howto.xml,v 1.1 2005/06/06 18:29:14 wolf31o2 Exp $

DESCRIPTION=""
HOMEPAGE=""
SRC_URI=""

LICENSE=""
SLOT="0"
KEYWORDS="~x86"
IUSE=""

DEPEND=""
RDEPEND=""
			</pre>
			<p>This actually is a fully functional ebuild, but we will definitely need to do some more editing to get it in a usable state.</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>Writing the ebuild</title>
	<section>
		<body><p>Writing the ebuild is the meat of this document.  We start by describing the elements above and add elements to our ebuild to create a fully working ebuild for our new game.</p>
		</body>
	</section>
	<section>
		<title>inherit games</title>
		<body><p>The first thing we will do is add <c>inherit games</c> to the ebuild.  The games team prefers this to be located between the header and the description lines, surrounded by a blank line.  This is where you inherit eclasses.  If you use a function from an eclass, you must inherit it.  Also, always list the games eclass last, unless using another games eclass to override the default games functionality.  More on this will be explained later.  The games eclass, which will be explained below, is full of functions common to all games ebuilds, and also sets up new defaults for certain ebuild functions, such as pkg_preinst, pkg_postinst, src_compile, and pkg_setup.  It also contains some variables that we will use across all games ebuilds, to maintain consistency.</p>
		</body>
	</section>
	<section>
		<title>DESCRIPTION</title>
		<body><p>This is the description of the package.  The description should be no more than a single line, and should give a quick overview of the game.  Try to make it descriptive, yet succinct.  A good example for our kickball game would be "a fast-paced SDL soccer game with network play".</p>
			<note>Please do not add something like "kickball is" to the beginning of the description.  It is redundant and unwanted by the games team.</note>
		</body>
	</section>
	<section>
		<title>HOMEPAGE</title>
		<body><p>This is the location of this package's homepage.  This should always be linked to the English version of the page, if available.  This should also <b>never</b> contain any variables.</p>
		</body>
	</section>
	<section>
		<title>SRC_URI (and friends)</title>
		<body><p>This is the first real interesting thing in our ebuild, and also the first place for potential problems.  Most upstream packagers use very strange names for their packages.  Let's say kickball uses sourceforge.net's distribution system.  The file is named "kick-ball-src-v1.0.tar.gz".  As you can see, this does not fit the package name in portage.  There are a few portage variables which can be used here.  The two that I will be discussing are ${P} and ${PV}, which refer to the package name and version, and package version, respectively.  If you need to make changes to these, it is recommended to use MY_P or MY_PV, as needed.  Proper games team coding style places these variables above DESCRITION, but in the same block.  In this example, we are going to set MY_P to "kick-ball-src" and MY_PV to "v${PV}".  We want to use the ${PV} variable within MY_PV so that future upgrades are easier.</p>
			<note>Never hard-code package versions within an ebuild unless there is absolutely no other choice.</note>
			<p>This makes our SRC_URI look like the following.</p>
			<pre caption="SRC_URI example 1">
SRC_URI="mirror://sourceforge/${P}/${MY_P}-${MY_PV}.tar.bz2"
			</pre>
			<p>This would cause portage to search the sourceforge mirrors for kickball/kick-ball-src-v1.0.tar.bz2, which is exactly what we are looking to find.  If the package sources are named to match the package, then the SRC_URI line is much simpler.</p>
			<pre caption="SRC_URI example 2">
SRC_URI="mirror://sourceforge/${P}/${P}.tar.bz2"
			</pre>
		</body>
	</section>

</chapter>

</guide>
