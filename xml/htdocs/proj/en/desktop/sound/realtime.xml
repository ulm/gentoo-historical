<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/desktop/sound/realtime.xml,v 1.4 2007/07/29 21:48:05 nightmorph Exp $ -->

<guide link="/proj/en/desktop/sound/realtime.xml" lang="en">
<title>How to Enable Realtime for Multimedia Applications</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>
<author title="Editor">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>

<abstract>
This guide will provide a tutorial to enable Realtime support for processes and
threads so that it can be used for multimedia applications like realtime sound
processing.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.2</version>
<date>2007-07-29</date>

<chapter>
<title>Introduction</title>
<section>
<title>What is realtime support?</title>

<body>
<p>
Some multimedia applications, like digital audio recording, processing and
playback, as well as video playback, require some degree of realtime processing.
Think for instance of a musician playing with a MIDI instrument connected to a
software synthesizer: if the timing is off, or the latency is too high, it will
be difficult to get the proper result even when the instrument is played
correctly.
</p>

<p>
To allow proper multimedia application usage on Linux, there are a few methods
that enable realtime support for users' processes and threads, so that important
processes like JACK can run with the highest priority available, without having
other processes getting in their way.
</p>

<p>
Please note that allowing processes to run at realtime priority will
let them make your system unusable, either because of bugs in the
code, or malicious code that locks memory or executes instructions
that end up using all the CPU power. For this reason, enabling
realtime processing will require reducing security a notch on the
system.
</p>

</body>
</section>
<section>
<title>Do I need realtime support?</title>
<body>

<p>
If your idea of multimedia is playing songs, and watching movies while doing a
few other tasks such as browsing the web, reading and writing emails, you
probably don't need realtime support.
</p>

<p>
Realtime processing support is important for people who actually need the
maximum priority for multimedia process; this includes people who record audio
or video (without losing data) from analog input, people who play with MIDI
musical instruments and set-top boxes wherein video and audio playback is the
principal task.
</p>

<p>
In general, if you're satisfied with your multimedia applications as they are,
you likely don't need realtime support, and you might mess up your system a
whole lot if you try to force it.
</p>

<p>
A different class of users is embedded users who need realtime processing of
signals or input from the users for low latency appliances. These users need
rather different setups than most of the multimedia uses of realtime.
</p>

</body>
</section>
<section>
<title>The different options for realtime</title>

<body>

<p>
Since the realtime scheduler is already built into the recent 2.6 kernels, the
only thing that needs to be done is to give users the ability to effectively
execute processes or threads with realtime priority. This is because, as said
earlier, enabling realtime priority is a security issue, and shouldn't be done
lightly.
</p>

<p>
The aim of this guide is to set up a <path>realtime</path> group whose members
can use realtime priority. Some software, like PulseAudio, expects to find such
a setup to allow users to make use of realtime support. Also, by creating its
own group, the admin does not have to allow realtime scheduling for more users
than needed.
</p>

<note>
Variations on this guide can tighten security a bit, but might require further
fiddling with the configuration of other software that would be able to use
these features.
</note>

<p>
One of the most common options described in guides for various multimedia
software is to use <c>realtime-lsm</c>, a kernel module that can enable either
the whole system or a given group to use realtime priority, and at the same time
disable memory locking to reduce the chances of a DoS attack. Although this
option is very easy to use, it's currently deprecated, as the kernel developers
suggest to use the Linux rlimits instead.
</p>

<p>
The other option is to use the <c>pam_limits</c> PAM module that ships with
Linux-PAM (<c>sys-libs/pam</c>), that allows realtime priority for particular
users or groups. The disadvantage of this is that there is no default
configuration available, it has to be configured from scratch.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Configuration</title>
<section>
<title>The need for capabilities</title>

<body>

<p>
Some of the software that supports realtime priority can make use of the Linux
system capabilities to reduce the chances that bugs or malicious code (in
plugins) might misuse the improved privileges it was given. Enabling these
features is quite important, so it's recommended to enable support for them by
enabling the <b>caps</b> USE flag in either <path>/etc/make.conf</path> or for
the software that will run with realtime priority through
<path>/etc/portage/package.use</path>.
</p>

<p>
On a kernel level, capabilities are enabled by default, but they can be
disabled, so before starting, make sure that the support is at least enabled as
a module (as you'll see later, for <c>realtime-lsm</c> to work they cannot be
built-in, they have to be built as a module).
</p>

<pre caption="Option 1: default configuration">
Security options ---&gt;
  [ ] Enable different security models
</pre>

<p>
The default configuration is good enough for most cases; if you really need to
enable support for extra security modules, you should then also enable the
capabilities, or they will not work:
</p>

<pre caption="Option 2: explicitly enable capabilities">
Security options ---&gt;
  [*] Enable different security models
  &lt;*&gt;   Default Linux Capabilities
</pre>

<p>
As stated earlier, for <c>realtime-lsm</c> to work you must make
capabilities a module, or <c>realtime-lsm</c> will not work at all. In
that case you not only need to configure the kernel properly:
</p>

<pre caption="Option 3: make capabilities a module">
Security options ---&gt;
  [*] Enable different security models
  &lt;M&gt;   Default Linux Capabilities
</pre>

<p>
However, you also need to insert the module in the kernel automatically,
otherwise <c>avahi</c> or any other software that expects capabilities to be
supported will simply fail. To do so, just add <b>capability</b> in a
non-commented line in <path>/etc/modules.autoload.d/kernel-2.6</path>.
</p>

<warn>
If you build capabilities as a module, it's really important to put the
<b>capability</b> module in autoload, otherwise services might fail to start at
boot, or might start with reduced security options.
</warn>

</body>
</section>
<section id="rtgroup">
<title>Creating a realtime group</title>
<body>

<p>
This step is not mandatory; specifically if you're going to use the last version
of <c>realtime-lsm</c>, the group will be created for you; the group will also
be created by installing newer versions of PulseAudio ebuild (0.9.6-r1; see the
notes at the end of the document). Creating the user here won't hurt anyway, as
the ebuilds will gladly accept the manually-created group.
</p>

<p>
It's more important to add your own user to the realtime group, so that it can
use the feature you're enabling. Depending on your setup, it might be your
normal user account, or a specifically-created account that you only use to use
the multimedia applications requiring realtime support. In the example we'll use
the <path>musician</path> user, which you should replace with your own user.
</p>

<pre caption="Create the realtime group, and add a user to it">
# <i>groupadd realtime</i>
# <i>usermod -a -G realtime musician</i>
</pre>

</body>
</section>
<section>
<title>Using Linux rlimits with PAM</title>
<body>

<p>
The recommended way to enable realtime priority support for Linux on recent
kernels (2.6 series) is to use rlimits to enable a user or a group to allow them
the use of the realtime priority.
</p>

<p>
Linux rlimits contain two values for limit:, one is the hard limit, the other is
the soft limit. The hard limit describes the maximum value the user can request
(through <c>ulimit</c>), while the soft limit (that always has to be lower than
the other one) defines the default value given to the user's (or group's)
processes.
</p>

<p>
To set the rlimit for realtime priority, at the moment, the only choice is to
use the <path>pam_limits</path> module, shipped with Linux-PAM
(<c>sys-libs/pam</c>): when this module is executed, the limits are read from
<path>/etc/security/limits.conf</path> and set accordingly.
</p>

<p>
The default configuration for PAM-based logins already execute the limit, both
with console login and with graphical logins like XDM and similar. On the other
hand, to make sure the limits are respected by the services started through init
scripts and by processes run via cron, the <b>pam</b> USE flag should be enabled
on the two respective packages (<c>sys-apps/baselayout</c> and at least for
<c>sys-apps/vixie-cron</c> <!-- I'm not sure about other crons, if someone has
more information about this, it would be nice to integrate that, although an
rlimits guide would be probably more useful -->).
</p>

<note>
The <b>pam</b> USE flag in baselayout only affects the behaviour of
<c>start-stop-daemon</c>, enabling the use of <path>pam_limits</path>.
Unfortunately, not every service can be started through that command, which
means that for those services, the limits configuration will not apply and
instead the default values will be used.
</note>

<p>
The name of the rlimit is <b>rtprio</b> and can be seen by using the <c>ulimit
-r</c> command. By default every user has a hard (and thus also soft) limit of
0. The value of the <b>rtprio</b> limit is the maximum realtime priority a
process can get: the higher the value, the more priority the process is given;
for most multimedia uses, a value of 10 is usually suitable, and is also the
default requested by JACK.
</p>

<p>
To change the default values (that don't allow to use realtime priority to
users), you have to edit the file <path>/etc/security/limits.conf</path>, adding
the following lines:
</p>

<pre caption="Allowing the realtime group to use realtime priority">
*               hard    rtprio          0
*               soft    rtprio          0
@realtime       hard    rtprio          20
@realtime       soft    rtprio          10
</pre>

<p>
The <b>@</b> sign in the front of realtime tells <c>pam_limits</c> that the
limit has to be applied to a group, rather than an user. The limits in the above
example are set so that the user gets a default realtime priority limit of 10
(which means that software like JACK will just work out of the box), while
allowing the users to temporarily change their limit to 20 for special cases and
testing.
</p>

<note>
The first two lines are really needed, otherwise when changing user from a
realtime-enabled user to a limited one through <c>su</c> or <c>sudo</c>, the
limit will not be applied. This is a design constrain of <path>pam_limits</path>.
</note>

<p>
Depending on the needs and the setup you're using, you might need to tweak the
limit values to set an higher realtime priority default.
</p>

</body>
</section>
<section>
<title>The realtime-lsm way</title>
<body>

<p>
Now, we'll see how to configure <c>realtime-lsm</c> to allow realtime priority.
This is the most commonly-documented way to get this feature, although it's not
the preferred way to do it. The advantage of <c>realtime-lsm</c> is that
configuration is almost automatic, and works even when not using PAM and on any
login method (direct, SSH, services running since boot in the system, ...).
</p>

<p>
The first step is to enable capabilities as a module, which is a requirement for
this method to work, as stated earlier, and make sure to add <b>capability</b>
to the list of automatically loaded modules in
<path>/etc/modules.autoload.d/kernel-2.6</path>.
</p>

<pre caption="Kernel configuration to make capabilities a module">
Security options ---&gt;
  [*] Enable different security models
  &lt;M&gt;   Default Linux Capabilities
</pre>

<p>
The next step is to install <c>sys-apps/realtime-lsm</c>. The immediate next
step depends vastly on the version of <c>realtime-lsm</c> you'll be using. The
last version, at the time of writing this guide, is 0.8.5-r2, which already
provides usable defaults, identical to the ones that this guide will provide.
For older versions, you'll have to create the <c>realtime</c> group
manually, following the <uri link="#rtgroup">Creating a realtime group</uri>
section, and then configure the module by hand.
</p>

<pre caption="Sample configuration for the realtime-lsm module">
options realtime gid=1017
</pre>

<p>
The <b>gid</b> parameter should point to the numerical group id of the
<c>realtime</c> group. To find out which one it is, just use the <c>getent</c>
command, and look at the third entry in the list:
</p>

<pre caption="Finding out the group id for the realtime group">
# <i>getent group realtime</i>
realtime:x:1017:musician
</pre>

<note>
The numerical group id will be quite different if you added the group by hand:
1017 is a possible value for a group when added by an ebuild.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Applications notes</title>
<section>
<title>PulseAudio</title>
<body>

<p>
PulseAudio (<c>media-sound/pulseaudio</c>) is a non-professional audio daemon;
the design of this software still allows for meaningful use of realtime
priority.
</p>

<p>
As PulseAudio can run either with a system-wide instance, that runs under its
own user, or as multiple instances launched by the user as needed, the code
detects the ability to use realtime priority by checking the availability of a
realtime group. As up to now there was no official way to handle this, up to
version 0.9.6, the ebuild created a <c>pulse-rt</c> group, and assumed that
being the realtime group.
</p>

<p>
As of version 0.9.6-r1, the <c>pulse-rt</c> group has been replaced with the
<c>realtime</c> group discussed in this guide, so following this guide and
installing a new version of PulseAudio should be enough to make it work, with a
couple tweaks that will be now described.
</p>

<p>
The first important thing is to make sure that the <b>caps</b> USE flag is
enabled for PulseAudio: this will make sure that when run with enhanced
privileges, the ones that are not needed anymore can be dropped right away.
</p>

<pre caption="Verify that PulseAudio has capabilities enabled">
# <i>emerge -pv pulseaudio</i>

These are the packages that would be merged, in order:

Calculating dependencies... done!
[ebuild   R   ] media-sound/pulseaudio-0.9.6-r1  USE="-X alsa avahi caps hal -jack -lirc -oss -tcpd" 0 kB
</pre>

<p>
Then, if you run a system-wide instance, you have to add the <c>pulse</c> user
(which PulseAudio runs under) to the <c>realtime</c> group you created, so that
it can make proper use of realtime priority.
</p>

<pre caption="Adding the pulse user to the realtime group">
# <i>usermod -a -G realtime pulse</i>
</pre>

<p>
At the next restart of the <c>pulseaudio</c> service, it will be executed with
realtime priority to reduce playback latency.
</p>

</body>
</section>
</chapter>
</guide>
