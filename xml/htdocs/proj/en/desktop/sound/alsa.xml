<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/desktop/sound/alsa.xml,v 1.16 2007/01/30 19:29:28 flameeyes Exp $ -->

<guide link="/proj/en/desktop/sound/alsa.xml" lang="en">
<title>ALSA packages maintenance</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>

<abstract>
Guide to maintenance of ALSA drivers and ALSA packages, to help new maintainers
to know the catch ups in its packages.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.14</version>
<date>2007-01-30</date>

<chapter> <!-- Advanced Linux Sound Architecture -->
<title>Advanced Linux Sound Architecture</title>

<section> <!-- Introduction -->
<title>Introduction</title>

<body>

<note>
This guide was last updated for ALSA release 1.0.14_rc2.
</note>

<p>
ALSA is the "next generation" sound drivers suite for Linux, that supersedes the
old OSS (Open Sound System) drivers. The ALSA drivers are provided by kernels
2.6 inside the kernel's sources and are available as external package for those
who are still running 2.4 series kernels. The external package can be used with
2.6 kernels, too, and allows to run a different version of ALSA drivers than the
one shipped with the current kernel.
</p>

<p>
This guide is being wrote to help developers interested in maintenance of ALSA
related packages, as they might be tricky, and it's always useful to know a few
things that are not in the official documentation. It also shows the reasons why
the external ALSA drivers package can't be dropped for 2.6 kernels.
</p>

<p>
Expansion of this guide is really welcome as it might be a bit tricky sometimes
as details are often forgotten until you really need to remember them.
</p>

</body>
</section>

<section> <!-- Resources -->
<title>Resources</title>

<body>

<p>
It's important to know the resources that might be needed to get ALSA right, as
there can be lot of problems that might require one to dig through many
different sites and mailing lists.
</p>

<p>
The first important resource is, obviously, the main
<uri link="http://www.alsa-project.org">ALSA Project homepage</uri>. You can
find there a list of latest news with changelog for different version and a
simple box with latest releases for stable and development packages. As you'll
see later, sometimes development releases are needed to go in ~arch or even on
stable trees, depending on the kernel version used in those trees.
</p>

<p>
As many other projects, ALSA project has a
<uri link="https://bugtrack.alsa-project.org/alsa-bug/main_page.php">bugtracker</uri>,
but that might be a bit difficult to get a hold of, as it's a Mantis tracker
instead of the more common Bugzilla. It's important to note the selector on
top right of the screen: if you select something there you mask all the other
projects' bug and looking for or reporting bugs becomes an hell.
</p>

<p>
Other important resources are the mailing list. ALSA project have different
mailing lists, but the main ones you need to subscribe if you're interested in
maintaining ALSA related packages are <c>alsa-announce</c> and
<c>alsa-devel</c>. You might also want to take a look to
<uri link="http://lkml.org">lkml</uri>, as ALSA drivers are also developed as
part of 2.6 series kernel.
</p>

<p>
When fixing software that uses <c>alsa-lib</c> or when looking at
<c>alsa-lib</c> itself, it might be useful to have at hand the
<uri link="http://www.alsa-project.org/alsa-doc/alsa-lib/">library reference</uri>
that contains the tech level documentation of the functions inside the library.
</p>

</body>
</section>

<section> <!-- Mercurial repository -->
<title>Mercurial repository</title>
<body>

<p>
ALSA sources are managed through
<uri link="http://www.selenic.com/mercurial/">mercurial</uri>
SCM, and as it's stated in
<uri link="http://www.alsa-project.org/download.php">ALSA's download page</uri>,
the checkout command is th following:
</p>

<pre caption="checking out ALSA's repositories">
$ <i>hg clone http://hg-mirror.alsa-project.org/alsa-driver alsa-driver</i>
$ <i>hg clone http://hg-mirror.alsa-project.org/alsa-lib alsa-lib</i>
<comment>And so on for the different needed repositories</comment>
</pre>

<note>
For people not used to mercurial, the command to update the repository checkout
is <c>hg pull -u</c>.
</note>

<p>
Snapshots of ALSA packages are discouraged unless very special circumstances
applies, as they are strictly tied to the kernel development, too. It might be
unsurprising that if no new release candidate are released by upstream, a
snapshot is required after a new kernel release.
</p>

</body>
</section>
</chapter>

<chapter> <!-- The packages -->
<title>The packages</title>

<section> <!-- Overview -->
<title>Overview</title>

<body>

<p>
ALSA support in Linux is provided by a list of different packages; upstream
splits the different pieces of the framework as they might not be used in every
system: some might just need <c>alsa-lib</c>, other might want to use utilities
and tools, too. For this reason there are also different ebuilds for all of
them, distributed between <path>media-sound</path>, <path>media-libs</path> and
<path>media-plugins</path> categories.
</p>

<p>
It's important to note that, while you can use just some of the packages
provided by ALSA, when you use more than one of them, they should always be of
the same version; while some of them are told to be compatible, we had in the
past some problems (between moving from 1.0.8 to 1.0.9) with unaligned drivers
and library, that caused a lot of problems to users.
</p>

<p>
Usually it's anyway possible to use different patchlevels of the same version
without big problems, so different rc versions can work together without being
a problem to users, in most cases.
</p>

</body>
</section>

<section> <!-- alsa-driver -->
<title>alsa-driver</title>

<body>

<p>
The most important piece of ALSA framework is for sure <c>alsa-driver</c>
package. This package is the only way to provide ALSA drivers to 2.4 kernels and
an alternative way to provide ALSA drivers to 2.6 kernels. The ebuild in portage
installs only the plain modules for the drivers, while the original version
would have also installed the headers for them (this is taken care of in the
following package).
</p>

<p>
The <c>alsa-driver</c> package should always remain supported and available for
2.6 kernels, as it provides more reliable drivers for many cases, as it doesn't
get changed by kernel's patches and similar. While
<uri link="/doc/en/alsa-guide.xml">the ALSA guide</uri> suggests to use the
in-kernel drivers for 2.6 kernels because it's simpler for the users, we had
a few cases in the past where people complained about problems with
ALSA due to in-kernel drivers.
</p>

<p>
When receiving bugs about alsa at <path>alsa-bugs@gentoo.org</path> alias, it's
always the case, if the reporter didn't specify it, to ask if he's using the
in-kernel drivers or <c>alsa-driver</c> package. In the former case it's useful
to know the version of the drivers (can be found at
<path>/proc/asound/version</path>) and to try to reproduce the bug with
<c>alsa-driver</c>. If the problem is limited to the in-kernel drivers, re-route
the bug to <path>kernel@gentoo.org</path> devs.
</p>

<p>
<c>alsa-driver</c> uses a mix of autotools-fu and Kconfig to work fine on many
different setups with kernels that might be using incompatible APIs. To the
base drivers' sources found in the package (that are the ones found in the
development kernel at the moment of the release), they apply a series of patches
to become compatible with older kernels, when needed. For this reason, newer
versions of the drivers are usually compatible with older kernels, but the other
way around is not always true.
</p>

<note>
Some API changes specific to given patchsets, such as the ones in
<c>suspend2-sources</c> 2.6.12, are not considered by upstream worth of
detection. As changing the kernel API does anyway break the compatibility with
lots of modules, there's no actual reason for <c>alsa-driver</c> to support
them.
</note>

<p>
Kernels does not look at the status of ALSA drivers sources when releasing, at
least they don't look if they are release candidates or even beta versions; this
created lot of problems in the past. For this reason, while it's usually the
case to mask pre-release versions of ALSA framework, you might be required to
remove them from package masking if a new kernel is released and latest unmasked
version of the drivers does not build against, or the kernel is shipped with a
pre-release version of the drivers (see the notes about <c>alsa-lib</c> package).
</p>

<p>
When a new kernel is going to be marked stable, ALSA drivers that builds against
it must be marked stable, too. This is required to have a working tree. Usually
this also means that the other packages needs to be stabled at the
same point.
This lead more than once in the past to have marked stable release
candidate versions, because of stable marking of a newer kernel
too. Many arch teams had their own stable tree unreliable for many
weeks after a new kernel was marked stable.
</p>

<warn>
<c>alsa-driver</c> package does not only contain the drivers that are available
on the Linux kernel tree, but also some drivers that are not present there.
Those might be more of a problem as they are often outdated and happened in the
past (and still now) to fail building when the kernel deprecates and remove some
APIs or defines.
</warn>

<p>
Starting from the unofficial snapshot 1.0.14_pre20061130, and excluded the live
9999 ebuild, the ebuild provides access to the ALSA_CARDS variable using the
USE_EXPAND method, so that the user can see which cards are supported. The list
of available cards for a given release can be found in the
<path>acinclude.m4</path> files inside the alsa-driver tarball, looking for the
string "Possible cards are:" (<e>TODO</e>: create a simple wrapper script that
converts that list to a suitable IUSE_ALSA_CARDS variable in the ebuild itself).
</p>

<p>
As the USE_EXPANDED variables need a description for the entries, the file
<path>gentoo-x86/profiles/desc/alsa_cards.desc</path> contains the descriptions
of the drivers that can be enabled; the (almost complete) description of the
drivers available can be generated through the following command ran into the
source directory for alsa-driver:
</p>

<pre caption="generating descriptions of ALSA_CARDS values">
alsa-driver-${PV} $ <i>find . -name Kconfig | xargs alsa_cards_desc_converter.awk | sort -u &gt; /tmp/alsa_cards_desc.update</i>
</pre>

<p>
The <uri link="http://dev.gentoo.org/~flameeyes/alsa/alsa_cards_desc_converter.awk">alsa_cards_desc_converter.awk</uri>
script will convert the descriptions in the <path>Kconfig</path> files in the
kernel in a suitable format for the <path>alsa_cards.desc</path> file.
This file won't contain the values for the drivers that miss a description in
the files.
</p>

</body>
</section>

<section> <!-- alsa-headers -->
<title>alsa-headers</title>

<body>

<p>
The <c>alsa-headers</c> package is split out from <c>alsa-driver</c> upstream
package. This package is used to install the headers needed by both the drivers
and the library. It's used to allow people to install alsa-driver for many
different kernel versions without having problems with collision-protect
feature.
</p>

<p>
The ebuild is quite simple, as it does install only a series of header files.
The only catchup is that it needs a single patch to define <path>__user</path>
if it's not defined already.
</p>

</body>
</section>

<section> <!-- alsa-lib -->
<title>alsa-lib</title>

<body>

<p>
As ALSA uses a way more complex interaction between software and driver, the use
of simple access to the devices as done by OSS is no more a viable option. Due
to the number of possible options, and the access to hardware options, the
<c>alsa-lib</c> package is the preferred way to access the sound devices.
</p>

<p>
In the past <c>alsa-lib</c> had a series of "generations" of API compatibility,
so many packages configure in different ways depending if they find a version
of alsa pre-0.5, 0.5 or 0.9. At the moment, portage provides only >=1.0
versions, so all the packages should configure with ALSA generation 0.9.
</p>

<p>
Beside the different generations stated above, <c>alsa-lib</c> should be API
and ABI stable inside the same generation. Unfortunately there are cases for
particular drivers that does not apply cleanly, for example the emu10k1 breakage
between versions 1.0.5 and 1.0.6.
</p>

<p>
An important problem is with test. <c>alsa-lib</c> comes with a couple
of simple testcases to make sure that it works fine. Unfortunately upstream
does not seems to pay enough attention to them before release, so they are often
broken even in the final release. While disabling them is probably simpler, when
possible it's suggested to try fixing the tests and submitting the patches to
ALSA's bugzilla.
</p>

<p>
It's particularly important that <c>alsa-lib</c> and the drivers used (either
from kernel or <c>alsa-driver</c>) are the same version in a working system.
This to avoid problems in communication between the lib (and so forth all the
applications that uses it) and the drivers inside the kernel. Being the single
communication node between kernel and userspace, the library is the strategic
point for the rest of the framework. While it's possible to use an older or
newer init script for <path>alsasound</path> it's usually highly deprecated the
use of <c>alsa-lib</c> with a different version than the current running
drivers.
</p>

</body>
</section>

<section> <!-- alsa-utils -->
<title>alsa-utils</title>

<body>

<p>
Almost as important as <c>alsa-lib</c>, the <c>alsa-utils</c> package provides
the basic utilities to work in an ALSA enabled system. Not only it contains
basic utilities like alsactl and alsamixer, it contains the
<path>alsasound</path> init script that is used to initialize ALSA framework on
a system and to load modules. The init script is better explained later in this
document.
</p>

<p>
The init script loads the modules for ALSA support: before the ALSA interfaces,
then the actual soundcards' drives, looking for <path>snd-card-*</path> aliases
as specified in <path>/etc/modules.d/alsa</path>. When the aliases are not
present because the user hasn't configured them, the init script starts looking
for all the modules installed that corresponds to PCI ids.
</p>

<p>
This is a problem for arches where the sound cards are not on PCI bus, such as
the powermac driver used for Apple PPC systems. For this reason the init script
requires on non-PCI platforms the explicit setting of <path>snd-card-*</path>
aliases so that it knows what to load. It also needs to know the aliases when
there are more than one sound card on the box, so that they can be loaded in the
right order.
</p>

</body>
</section>

<section> <!-- alsa-plugins -->
<title>alsa-plugins</title>

<body>

<p>
<c>alsa-lib</c> can also output, instead than to an actual ALSA device, to some
plugins that pipes the output elsewhere. The first of these plugins was the
<c>jack</c> plugin that was present inside <c>alsa-lib</c> 1.0.9, and then split
out in the <c>alsa-jack</c> ebuild, up to version 1.0.11. Since 1.0.11 there is
a new ebuild, <c>alsa-plugins</c> that replaces <c>alsa-jack</c> entirely and
that also provides the extra plugins as released by upstream.
</p>

<p>
In particular this ebuild provides the OSS output plugin and an AC3 conversion
plugin, that uses <c>ffmpeg</c> for the encoding, other than the <c>jack</c>
plugin as before.
</p>

<note>
With this version the <c>PDEPEND</c> on <c>alsa-jack</c> is gone from
<c>alsa-lib</c> ebuild, too.
</note>

<p>
As of January 2007, <c>alsa-jack</c> is totally phased out and removed
from the tree, and the only way to have Jack output from ALSA is to
use the <c>alsa-plugins</c> package with the jack useflag enabled.
</p>

<p>
Since version 1.0.12, <c>alsa-plugins</c> also provides a pulseaudio use
flag to enable the <uri link="http://www.pulseaudio.org">PulseAudio</uri> plugin.
<!-- TODO: make it point to PulseAudio maintainer's guide when it's ready -->
Assertions for the plugin are disabled, because it makes some sanity check
assumptions that are broken by some clients like alsaplayer (they are errors in
the players, not in the plugin), and this makes it more usable to public. If
debug is required they can easily re-enabled.
</p>

</body>

</section>

</chapter>

<chapter> <!-- Arch-specific notes -->
<title>Arch-specific notes</title>

<section> <!-- PowerPC -->
<title>PowerPC</title>

<body>

<p>
For some reasons, ALSA support on PowerPC platform is not the state of the art.
The first main problem, alreay noted in <c>alsa-utils</c> section above, it's
that the init script does not autorecognize the <path>snd-powermac</path> module
that is used by almost all Apple machines, such as iBooks and PowerBooks. This
means that it has to be aliased to <path>snd-card-0</path> to be loaded
correctly, as it hasn't a PCI alias (not being on PCI bus).
</p>

<p>
Also the driver itself seems to be cause of problems: the
<path>snd-powermac</path> module segfaults modprobe on insertion on ALSA 1.0.10,
while works mostly fine on rc3 (after being patched as rc3 released was not
building at all on PPC).
</p>

</body>
</section>

<section> <!-- SPARC -->
<title>SPARC</title>

<body>

<p>
ALSA support on SPARC systems is, at the time of writing, supported by
experimental development profiles based on 2.6 series kernel (in particular, the
ALSA shipped with kernel 2.6.15).
</p>

<p>
<c>alsa-driver</c> is not supported and not keyworded because it misses some of
the patches needed to make ALSA work on SPARC and because it's not aware of the
mixed userland/kernel compilers.
</p>

<p>
For this reason, SPARC has no reason to forcefully mark stable a new ALSA
release if the main problem lies in <c>alsa-driver</c> not compiling with
current kernel (as there's no <c>alsa-driver</c> keyworded), and can continue
using the most recent non-RC release of ALSA userland that works with their
kernel.
</p>

</body>
</section>
</chapter>

<chapter> <!-- Quirks, useflags, and interactions -->
<title>Quirks, useflags and interactions</title>

<section> <!-- The midi useflag -->
<title>The midi useflag</title>

<body>

<p>
As of 1.0.14_rc2 sub-releases, a new useflag was introduced in some
ALSA packages, the <b>midi</b> useflag. This useflag is used to enable
or disable code, drivers or utilities that are used to control the
sequencer support in ALSA (MIDI support), both hardware, software and
virtual.
</p>

<p>
Probably the majority of users nowadays won't care about MIDI support
at all, so it makes sense for them to disable MIDI support altogether
to save space, time and code that can cause bugs. Unfortunately some
software checks the presence of snd_seq_* functions when checking for
the presence of ALSA itself, leading to unexpected failures or
omissing ALSA support where requested.
</p>

<p>
It was then necesssary not to release to public consumption in ~arch
the new versions of alsa-lib that contain the experimental midi
useflag for a transition phase. The packages testing for snd_seq_*
functions has to be fixed by either make them check for ALSA through
pkg-config (if they don't really require sequencer support, like K3B),
or to check that alsa-lib is built with <b>midi</b> useflag enabled.
</p>

<pre caption="Checking for the midi useflag on alsa-lib.">
pkg_setup() {
    if ! built_with_use --missing true media-libs/alsa-lib midi; then
        eerror ""
        eerror "To be able to build this package with midi support you need"
        eerror "to have built media-libs/alsa-lib with midi USE flag enabled."
        die "Missing midi USE flag on media-libs/alsa-lib"
    fi
}
</pre>

<p>
Please note that the <c>built_with_use</c> check is ran with the
<c>--missing true</c> parameter, to tell the check to report success
if the version of alsa-lib currently installed does not support the
midi useflag at all. This is needed because older version of alsa-lib
always built the sequencer part of the library, without caring for
that useflag.
</p>

<p>
The <b>midi</b> useflag on <c>media-sound/alsa-driver</c> disables the
sequencer drivers, this means that if it's not enabled, even having it
enabled on alsa-lib won't allow you to use sequencers, even virtual
ones created by TiMidity++.
</p>

</body>

</section>

</chapter>

</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; indent-mode normal; -->
