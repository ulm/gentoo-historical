<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/desktop/sound/Attic/amarok.xml,v 1.4 2007/01/30 12:42:58 flameeyes Exp $ -->

<guide link="/proj/en/desktop/sound/amarok.xml" lang="en">
<title>Amarok package maintenance</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>

<abstract>
Guide to maintenance of Amarok package and related packages, to help new
maintainers to know the catch ups in these packages.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.3</version>
<date>2007-01-30</date>

<chapter>
<title>Amarok</title>

<section> <!-- Introduction -->
<title>Introduction</title>

<body>

<note>
This guide was last updated for Amarok 1.4.4-r4.
</note>

<p>
<uri link="http://amarok.kde.org/">Amarok</uri> is one of the most used music
players that uses the KDE libraries and framework. Its usage is not strictly
connected to the KDE desktop itself, although some of its features are only
available when running the KDE desktop.
</p>

<p>
The maintenance of Amarok package isn't hard on its own, especially
since upstream releases are scheduled in advance, and upstream is
usually on time, and provides pre-releases for packagers only, so that
eventual packaging bugs can be found before the actual official release. 
</p>

</body>
</section>

<section> <!-- Version bumps -->
<title>Version bumps</title>
<body>

<p>
The only data that requires to be verified during every version bump is the
availability of translation and documentation, that might vary from release to
release. The easy way to get them is to run the following commands:
</p>

<pre caption="defining the current translations and documentation available">
amarok-${PV} $ <i>ls po | fgrep -v Makefile | xargs echo</i>
af ar ... zh_TW
amarok-${PV} $ <i>ls doc | egrep -v Makefile\|amarok | xargs echo</i>
da de ... sv
</pre>

<p>
at this point, they can easily updated inside the ebuild, by defining the LANGS
and LANGS_DOC variables at the top:
</p>

<pre caption="defining the available translations and documentation in ebuild">
LANGS="<i>az bg ... zh_TW</i>"
LANGS_DOC="<i>da de ... sv</i>"
</pre>

</body>
</section>

<section> <!-- Engines -->
<title>Engines</title>
<body>

<p>
Amarok was designed to support different engines for audio decoding and playing,
but after series 1.3, some of the unstable incomplete ones were dropped.
Currently, the available engines are the <b>xine</b> engine, the default one and
always built from ebuild (see the <uri link="/proj/en/desktop/video/xine.xml">
  xine maintainer's guide</uri>), the <b>Helix/RealPlayer</b> engine, that can
be enabled by the <b>real</b> useflag on x86 architecture, the MAS and the NMM
engines, that are strictly disabled because they are not in portage.
</p>

<p>
Starting from version 1.4 (or rather its beta releases), Amarok
requires that at least one stable engine is enabled, because users
reported problems with experimental engine. The two stable engines
that are available are xine-lib and Helix/RealPlayer. For this reason,
Amarok ebuilds enable xine-lib engine forcefully, without an useflag
related to it, as it's the only one available for more than one
platform (Helix, that would be available for PowerPC beside x86, is no
more in portage, and wouldn't play mp3s anyway).
</p>

<p>
As said, Helix Player is no more available in Portage, so we can only
enable the related Amarok engine with RealPlayer, that is available
only for x86 platform. One has not to be sidetracked by SUSE having an
Helix engine available for AMD64 using RealPlayer, as they basically
rewrote it to play files through commandline interface. Upstream does
not endorse or support this approach.
</p>

<p>
Due to a series of bugs in xine-lib, and some sanity checks applied by
Amarok, since verison 1.4.2 of the player, it is required to have
xine-lib 1.1.2 or later to play FLAC file (or a CVS snapshot just
before it), and xine-lib 1.1.3 to play Shorten (SHN) files.
</p>

</body>
</section>

<section> <!-- Databases -->
<title>Databases</title>
<body>

<p>
As well as different engines, Amarok can use also different database backends.
The default backend is sqlite, and as a special exception, Amarok does not use
the system sqlite version, because that has proven itself unstable. For this
reason only the internal version of sqlite is used, without changes from
upstream provision.
</p>

<p>
Other database backends that can be used are MySQL and PostgreSQL. Both require
user intervention to be set up, there's no way to configure them directly in
ebuilds.
</p>

</body>
</section>

<section> <!-- Media devices -->
<title>Media devices</title>
<body>

<p>
As a full-fledged media player, Amarok also provides support for transmitting
songs to and from media devices, like mp3 players and similars. Its architecture
allows to build plugins for special devices on request, which requires adding
more useflags to the ebuild to handle new media device plugins from release to
release.
</p>

<p>
Currently the supported media devices from the ebuild are the generic USB Mass
Storage (that requires no dependencies), the iPod devices (using libgpod),
the IFP-based devices, early iRivers (using libifp), and the Nomad devices
(using libnjb). MTP-based media devices are supported by Amarok using libmtp
since version 1.4.2 onward, but the support is only present in ebuilds since
version 1.4.4 onward, because precedently noone checked its support. Rio Karma
support is present in Amarok since version 1.4.4, but it requires packages
currently not in portage to work (and one of them is a kernel module).
</p>

<warn>
At the time of writing, the current SVN version of Amarok (going to be
1.4.5) requires at least version 0.1.0 of libmtp, which is not in
Portage. A new maintainer is needed for that package, or the
<b>libmtp</b> useflag is going away in next versions of the ebuild.
</warn>

</body>
</section>

<section> <!-- Ruby dependency -->
<title>Ruby dependency</title>
<body>

<p>
Since version 1.4, Amarok ebuild requires <b>dev-lang/ruby</b> forcefully; this
is upon request by upstream, as the lyrics retrieval support, and the scoring
and rating algorithms are now implemented as Ruby scripts. Then in version 1.4.1
also the last.fm proxy support, to play last.fm streams, was implemented this
way, and the same applies for DAAP support in version 1.4.2. For this reason,
<b>ruby</b> is by all means a mandatory required dependency.
</p>

<p>
Since version 1.4.4-r4 onward, Amarok depends on
<b>www-servers/mongrel</b>. The reason for this is that before it
installed its own copy of mongrel, which would have been fine until
mongrel was not in portage, but might be a security breach now that
mongrel is in portage, as the extensions might be using the wrong
libhttp1.so library. For this reason the internal copy of mongrel is
removed after installation (the build time for that is risible) and
the external copy of mongrel is used. Note that older versions block
mongrel so that they cannot be installed together with it for safety.
</p>

</body>
</section>

<section> <!-- Musicbrainz -->
<title>Musicbrainz</title>
<body>

<p>
Amarok supported for a long time the tag lookup through Musicbrainz by using
the tunepimp library. Unfortunately that library had different versions with
different APIs: 0.3, 0.4, 0.5, and each of them is incompatible with previous.
</p>

<p>
Since version 1.4.2, Amarok supports the libtunepimp API 0.5, that is
the only one available in portage for security reason (older versions
had multiple security bugs, fixed by upstream only in 0.5 series), but
it used to be buggy up to 1.4.4 release (Amarok was not properly
cleaning up in case an entry wasn't found during a timeout), and up to
version 0.5.1, libtunepimp crashed when being used on some types of
files (WMA or FLAC).
</p>

<p>
The issues are resolved as of 1.4.4-r3, and that version has the
<b>musicbrainz</b> useflag available once again.
</p>

</body>
</section>

<section>
<title>The live SVN ebuild</title>

<body>

<p>
As upstream often considers the releases just some "SVN snapshots",
many users got used to simply use the SVN version of Amarok on a daily
basis. To make more friendly building from Subversion, they also
provide an amarok-svn script that takes care of checking out the
sources for the user and of compiling it with the correct options.
</p>

<p>
As this solution does not go along well with Gentoo, many users
developed their amarok-svn ebuild, that fetches the sources from KDE's
repository and compile it with useflags as options. Some of these
ebuilds were published, and advertised on Amarok's wiki and on the
#amarok channel on Freenode.
</p>

<p>
The problems started when these ebuilds started skipping calls to
kde.eclass to work around errors in themselves, and often ended up out
of sync with the official ebuild, installing in the wrong prefix or
behaving inconsistently. To overcome this issue (that was wasting a
lot of the maintainer's time), at the end of December 2006, a Live SVN
ebuild was added with the name <b>amarok-9999</b>.
</p>

<p>
This ebuild is unsupported, albeit kept in sync and fixed when needed,
so that users won't end up to break their systems anymore, and come to
Gentoo developers complaining about it, because of ebuilds entirely
out of sync. Being hardmasked by keywords (-*), it might, for
instance, depend on a newer version of libmtp that is not yet in
portage (this is what happens at the time of writing).
</p>

</body>
</section>

<section>
<title>Extra packages and scripts</title>

<body>

<p>
Amarok has a modular structure with plugins, that allows the user to
add extra features, some of which are embedded in the upstream's
sources, so that new core functionalities are enabled when the proper
packages are available.
</p>

<p>
The main examples are transKode (<b>media-sound/transkode</b>) that
allows to transcode music from one format to another on-the-fly when
loading music to a portable media player device, and moodbar
(<b>media-sound/moodbar</b>) that replaces the feature previously
provided by exscalibar (that was unmaintained upstream and full of
bugs).
</p>

<p>
These packages might have an amarok useflag to enable the support for
the scripts features of Amarok, while Amarok should not have an
useflag for them to avoid cluttering.
</p>

</body>
</section>

</chapter>

</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; indent-mode normal; -->
