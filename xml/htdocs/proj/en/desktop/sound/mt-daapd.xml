<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/desktop/sound/mt-daapd.xml,v 1.1 2005/12/02 01:32:42 flameeyes Exp $ -->

<guide link="/proj/en/desktop/sound/mt-daapd.xml" lang="en">
<title>mt-daapd maintainer's guide</title>

<author title="Author">
  <mail link="flameeyes@gentoo.org">Diego Petten√≤</mail>
</author>

<abstract>
Maintainer notes about mt-daapd package
</abstract>


<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2005-12-02</date>

<chapter> <!-- mt-daapd -->
<title>mt-daapd</title>

<section> <!-- Introduction -->
<title>Introduction</title>

<body>

<p>
<c>media-sound/mt-daapd</c> is a daemon that implements the server part of the
<uri link="http://en.wikipedia.org/wiki/Digital_Audio_Access_Protocol">DAAP</uri>
protocol, developed by Apple for its iTunes 4.0 player to share the music
locally. DAAP is currently supported by <c>rhythmbox</c>, too.
</p>

<p>
This package also replaces the old <c>media-sound/daapd</c> original package,
as that stopped working correctly with recent iTunes (5 and 6). It's also more
performant and currently maintained.
</p>

<p>
The main drawback of <c>mt-daapd</c> respect to <c>daapd</c> is that the shared
files have to be all on the same filesystem for every daemon running. This can
be worked around by using more than one session (see later).
</p>

</body>
</section>

<section> <!-- Multiple instances of mt-daapd -->
<title>Multiple instances of mt-daapd</title>

<body>

<p>
As it was said, <c>mt-daapd</c> requires all the shared music files to be on the
same filesystem, as it uses the inode's indexes to cache the music files. As
this can be a problem for some users, the recent revisions of <c>mt-daapd</c> in
Portage are able to run multiple instances of the daemon itself.
</p>

<p>
Setting up a new <c>mt-daapd</c> instance is simple, and it's alike the way
multiple network interfaces are configured: just symlink
<path>/etc/init.d/mt-daapd</path> to
<path>/etc/init.d/mt-daapd.<e>identifier</e></path>. Once that is done, the
new <path>mt-daapd.<e>identifier</e></path> service will look for the
configuration file in <path>/etc/mt-daapd.d/<e>identifier</e>.conf</path>.
</p>

<note>
When using the simple <path>mt-daapd</path> service, instead, the configuration
remain in <path>/etc/mt-daapd.conf</path>, so there's no problem in leaving the
old-style configuration in place when adding a new instance.
</note>

<p>
It's important to make sure that the different instances of the daemon should
not share the same cache directory or that would break them. The pidfiles are
managed by the init script, using a patch applied by the ebuild to
<c>mt-daapd</c> sources (already accepted upstream).
</p>

<impo>
Multiple instances does not currently work when using howl/avahi mode (see
later on), so <c>mt-daapd</c> should be built with -howl to use them.
</impo>

</body>
</section>

<section> <!-- Interaction with mdns responders -->
<title>Interaction with mdns responders</title>

<body>

<p>
<c>mt-daapd</c> has its own implementation of the Bonjour protocol used by
iTunes for discover the DAAP shares on the current network (for this reason,
Bonjour is one of the fondamental part of a DAAP implementation). It can use
either that internal version or an external responder provided by <c>howl</c>.
</p>

<note>
The internal version does not conflict with the external responders and it's
usually the more tested one. It's also currently the only safe way to get more
than one mt-daapd session running on the same box.
</note>

<p>
Support for <c>avahi</c> responder should be currently worked on by upstream;
in the mean time for people wanting to use that instead of <c>howl</c>, the
ebuild make use of <c>avahi</c>'s compatibility layer with howl. The <b>howl</b>
useflag has a conditioned <b>avahi</b> useflag, when that is enabled, it does
depend on <c>avahi</c> instead of <c>howl</c>, and then uses the includes and
the libraries provided by the first. This compatibility layer issues a few
warnings on daemon's output stream when the library is initialized.
</p>

<p>
As the service have to talk with the responder when started, it has to depend
with a <e>need</e> clause on the right responder; being conditioned on the
<b>howl</b> useflag (as the internal version does not require an extra service
to be running), the dependency is not stated directly on the init.d file
installed in the user's system, instead the dependency is commented prefixed
with <path>#USEHOWL</path> string. When compiling the software, the init file
present on <path>${FILESDIR}</path> is then edited with sed to remove the line
if howl is not requested, to uncomment it when howl is requested, and to change
the service name from <path>mDNSResponder</path> to <path>avahi-daemon</path> if
<b>avahi</b> is used.
</p>

</body>
</section>

</chapter>

</guide>

<!-- kate: space-indent on; indent-width 2; replace-tabs on; -->
