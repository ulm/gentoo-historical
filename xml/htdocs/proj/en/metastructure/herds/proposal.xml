<?xml version='1.0' encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide type="project">
<title>Gentoo herds project</title>
<subtitle>The original proposal</subtitle>
<author title="Author"><mail link="pauldv@gentoo.org">
	Paul de Vrieze</mail>
</author>
<abstract>The herds project aims to ensure that ebuilds are organised in groups
which have maintainers, and that some ebuilds get maintainers assigned</abstract>
<version>1.0</version>
<date>2 Jul 2003</date>
<chapter>
<title>Herds proposal</title>
<section>
<body>
<ol>
<li>An ebuild should have a maintainer assigned to it.

If there is more than one, they can divide the work between them however they
see fit (fex. active developer + inactive backup, rotating roles, or stable
maintainer + ~arch innovator). Maintainers should ideally keep track of changes
to an ebuild even if they're not working on it actively at the moment, in order
to be able to step in if their help is required.

I suggest 2 maintainers for major ebuilds, 3 for the few ebuilds that are very 
important or very complex. The great majority of ebuilds will still have =1 
maintainer or be placed in herds - at least in first.
</li><li>
We cannot provide direct maintainers for every ebuild. At least not at 
first. So 'minor' (maintainer-less) ebuilds will be grouped in 'herds'. Herds 
are mostly thematic, like portage categories: sound, video, network etc. Every 
herd will have maintainer(s) assigned that will take care of its ebuilds. 
Some can specialize in 'watching' (looking for upstream updates and bumping 
ebuilds in ~).

Herds also function as a safety net, to catch ebuilds going unmaintained and 
keep them on lower-levl service until they can find a new direct maintainer.

Since we probably want to continue working in 'workgroups' like the current 
kde@g.o, we extend herds to classify all ebuilds. Maintainers responsible for 
the herd will still work mostly on its minor ebuilds (ie those without a 
direct maintainer), but they and the direct maintainers of the other ebuilds 
in the herd will work together to some extent. (Except for core ebuilds, 
which only direct maintainers should touch normally.)

If an ebuild is well satisfied with the comparatively little attention it gets 
in the herd, there's no good reason for it to ever get a direct maintainer; we 
don't want to 'dilute' their resources. If anything, we might ask for another 
maintainer for a growing herd of such ebuilds. If someone asks to maintain 
such an ebuild directly, the reason behind it ought to be that he'll be doing 
rather more with it than the herd maintainers have been doing so far. Some 
innovative development instead of mere maintenance.

OTOH, if an ebuild is considerably 'heavier' than the average herd ebuild, it 
would be a good thing for someone to maintain it directly. This is a question 
of how much effort the herders need to spend on it when it is in their care.
</li><li>
Herds are just another word for teams or workgroups. Sometimes it makes 
sense for two herds to include a set of minor ebuilds, and for the people of 
those teams to help one another with the two aspects of those ebuilds. For 
example, the kde team might help the audio team with a problem in a kde 
jukebox app related not to sound, but to its kde-ish build system.

Herds are not intended to replace portage categories; they have different 
purposes. Categories are mostly for users (and developers in the role of 
users), they make it easy to find an app or browse a list of alternative 
apps. Herds are for assigning ebuild responsibility to devs; they aren't seen 
by users unless they go looking or have QA issues.
</li><li>
Some ebuilds do not require a "full-time" maintainer; besides, we don't 
have the manpower to provide direct maintainers for all ebuilds right now. So 
we'll have e.g. someone (or two) who takes care of all the x11-themes 
ebuilds, which require very little attention individually. This is similar to 
the semiofficial structure we have in place now.

If an ebuild receives more than a few trivial bugreports now and then, or has 
complex internal code, it generally needs a direct maintainer.

Direct maintainership gives more resources to the ebuild. The maintainer is 
more "committed" to it. Therefore if someone wants to take an ebuild from a 
herd under his wing, he's generally welcome to it.

A move in the opposite direction OTOH, is a step towards the ebuild becoming 
unmaintained. It can still have valid reasons - such as the maintainer having 
little gentoo-time to spare and the ebuild requiring less attention than his 
other ones. To safeguard important ebuilds against that they should have >1 
direct maintainer.

5. If a developer maintains too many ebuilds directly, his resources are 
diluted and he cannot give enough to every ebuild. ("too many" is of course 
different for different people.) The meaning of direct maintainership, as 
distinct from maintaining a herd, would be lost. So if he has too many 
ebuilds he should consider:
<ul>
<li>Moving ebuilds that require little attention to herds. If an ebuild never 
gets bugreports but requires version bumps every week or two, it should be 
low priority from a maintainership POV.
In other words, as developers we might want all our ebuilds to be more like 
that. But as maintainers we want to focus on fixing bugs.</li>

<li>Asking people to take over maintaining ebuilds.</li>
<li>Asking people to co-maintain ebuilds with him.</li>
</ul>
Both of the above come in two shapes - redistributing workload among 
developers, and bringing new people onto the Gentoo team.

</li><li>
An ebuild that does not have a direct maintainer, and whose herd's 
maintainers declare it too important/complicated to be maintained as part of 
a herd (basically anything that gets more than a very few bugreports), is 
declared unmaintained and advertised on a list of such ebuilds. If it is not 
picked up within a deadline (either by a Gentoo dev or by a user who in this 
way will become one), it is hard-masked and later dropped from portage.

After moving to this scheme, we should set such a deadline (sufficiently 
remote) for all ebuilds that haven't yet got a maintainer under the new 
scheme.
</li><li>
Steps to implement (the lower-level how's I leave to our infrastructure 
people):

Maintainership info for a package should be placed in e.g. a 'Maintainers' 
file in its dir. Info about developers maintaining a herd can be placed in 
e.g. $PORTDIR/Maintainers. This is just a suggestion and some people don't 
seem to like it, so feel free to propose any alternative way of managing that 
info (but until udder is mature enough, please keep this discussion centered 
on what we can do right now).

Every package will automatically become a &lt;package&gt;@gentoo.org alias
for mail and bugzilla. Bugs on bugzilla will be assigned to that mailing
address; the maintainer(s) of that package will take care of them. It will also
recieve notifications of cvs changes to that package (like bits of gentoo-cvs
m/l) and anything else people want to send there (discussions/announcements
about the package). Every herd will also become a &lt;herd&gt;@gentoo.org, like
the current kde@gentoo.org, for discussions and bugs not specific to a
package.

The bug wranglers won't be needed as much anymore because a user can easily 
assign his bug according to the malfunctioning ebuild. They are still needed 
to direct bugreports on things other than ebuilds (docs, livecd, website...). 
This also means we'll (finally!) be managing bugreports by package, not by 
developer. It solves issues like going through the buglists of the 4 
developers who are related to an ebuild, or running a bugzilla-wide search 
for the name of a package in a bugreport's subject.

Maintainers can have their bugzilla accounts 'watch' those of the packages 
they maintain, or use the scheme outlined below.

People can set their interest in a package. At first only developers can set 
their interest (maintainer, or just watcher in the meaning of generally 
interested). The specification for maintainers is autogenerated from whatever 
way we use to specify maintainers centrally. As the udder infrastructure for 
users is put into place, they will be able to express interest too. Their 
subscriptions to the package m/ls may or may not be readonly.
</li></ol>

</body>
</section>
</chapter>
</guide>
