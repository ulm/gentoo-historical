<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/apache/doc/developer.xml,v 1.3 2008/03/23 14:26:49 hollow Exp $ -->

<guide link="/proj/en/apache/doc/developer.xml" lang="en">
<title>Apache Developer Documentation</title>

<author title="Author">
  <mail link="vericgar@gentoo.org">Michael Stewart</mail>
</author>
<author title="Editor">
  <mail link="hollow@gentoo.org">Benedikt BÃ¶hm</mail>
</author>

<abstract>
This document provides details about the eclasses available for developers
of packages that relate to the Apache webserver.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>2.5</version>
<date>2008-03-02</date>

<chapter id="modulehowto">
<title>Apache Module Howto</title>
<section>
<title>Overview</title>
<body>

<p>
This chapter will guide a developer through creating an ebuild using one of our
more complex packages, <c>www-apache/mod_ldap_userdir</c> as an example. All
Apache modules need to use the
<uri link="apache-module.eclass.xml">apache-module.eclass</uri> in order to
work with future changes to the apache core.
</p>

</body>
</section>
<section>
<title>Apache Path Locations</title>
<body>

<p>
In order to closely follow how upstream and other distributions install apache,
the following paths must be used as specified by
<uri link="depend.apache.eclass.xml">depend.apache.eclass</uri>:
</p>

<table>
<tr>
  <th>Use</th>
  <th>Variable</th>
  <th>Path</th>
</tr>
<tr>
  <ti>Server Root</ti>
  <ti><c>APACHE_BASEDIR</c></ti>
  <ti><path>/usr/lib/apache2/</path></ti>
</tr>
<tr>
  <ti>Configuration Directory</ti>
  <ti><c>APACHE_CONFDIR</c></ti>
  <ti><path>/etc/apache2/</path></ti>
</tr>
<tr>
  <ti>Vhosts Configuration</ti>
  <ti><c>APACHE_VHOSTS_CONFDIR</c></ti>
  <ti><path>/etc/apache2/vhosts.d/</path></ti>
</tr>
<tr>
  <ti>Modules Configuration</ti>
  <ti><c>APACHE_MODULES_CONFDIR</c></ti>
  <ti><path>/etc/apache2/modules.d/</path></ti>
</tr>
<tr>
  <ti>Module Binaries</ti>
  <ti><c>APACHE_MODULESDIR</c></ti>
  <ti><path>/usr/lib/apache2/modules/</path></ti>
</tr>
<tr>
  <ti>Include Files Directory</ti>
  <ti><c>APACHE_INCLUDEDIR</c></ti>
  <ti><path>/usr/include/apache2/</path></ti>
</tr>
<tr>
  <ti>Apache Binary</ti>
  <ti><c>APACHE_BIN</c></ti>
  <ti><path>/usr/sbin/apache2</path></ti>
</tr>
<tr>
  <ti>Apache Control Script</ti>
  <ti><c>APACHE_CTL</c></ti>
  <ti><path>/usr/sbin/apache2ctl</path></ti>
</tr>
<tr>
  <ti>APXS Binary</ti>
  <ti><c>APXS</c></ti>
  <ti><path>/usr/sbin/apxs2</path></ti>
</tr>
</table>

<note>
If your package isn't actually a module but just needs to know the paths Apache
uses, just <c>inherit depend.apache</c> and use the variables made available
to you in the eclass. See the
<uri link="depend.apache.eclass.xml">depend.apache.eclass</uri> documentation.
</note>

</body>
</section>
<section>
<title>Overview of apache-module ebuilds</title>
<body>

<ul>
  <li>Generally all functions can be removed from the ebuild</li>
  <li>
    Check to see if the default <c>src_compile</c> in the eclass will work.
    If not, set <c>APXS2_ARGS</c> to compile other files as required.
  </li>
  <li>
    Replace any <c>DEPEND</c> on Apache with one of the <c>need_apache*</c>
    functions described in the
    <uri link="depend.apache.eclass">depend.apache.eclass</uri> documentation.
  </li>
  <li>
    Create the module configuration file to use <c>IfDefine</c>s to load and
    configure the module
  </li>
  <li>Add any documentation files to <c>DOCFILES</c></li>
  <li>
    Specify the configuration file src_install should install:
    <c>APACHE2_MOD_CONF</c>
  </li>
  <li>
    Specify the <c>IfDefine</c> that the module uses in its configuration
    file so pkg_postinst can give user information on how to enable the module:
    <c>APACHE2_MOD_DEFINE</c>
  </li>
</ul>

</body>
</section>
<section>
<title>Ebuild Globals</title>
<body>

<pre caption="mod_ldap_userdir-1.1.12 (edited)">
inherit apache-module

DESCRIPTION="Apache module that enables ~/public_html from an LDAP directory."
HOMEPAGE="http://horde.net/~jwm/software/mod_ldap_userdir/"
SRC_URI="http://horde.net/~jwm/software/mod_ldap_userdir/${P}.tar.gz"

LICENSE="GPL-1"
SLOT="0"
KEYWORDS="~ppc ~x86"
IUSE="ssl"

DEPEND="ssl? ( dev-libs/openssl )
    net-nds/openldap"
RDEPEND="${DEPEND}"

DOCFILES="DIRECTIVES README user-ldif posixAccount-objectclass"

APXS2_ARGS="-lldap -llber -c ${PN}.c"
APACHE2_MOD_CONF="47_mod_ldap_userdir"
APACHE2_MOD_DEFINE="LDAP_USERDIR"

need_apache2_2
</pre>

<p>
We start off with <c>inherit apache-module</c> which also inherits
<c>depend.apache</c>. <c>depend.apache</c> defines the
locations Apache uses and more importantly, defines three <c>DEPEND</c>s:
<c>APACHE2_2_DEPEND</c> for
those packages that need Apache-2.2*, <c>APACHE2_DEPEND</c> for those packages
that need Apache-2*, and <c>APACHE_DEPEND</c> for those packages that need
either any version of Apache.
</p>

<p>
<c>apache-module</c> does the heavy lifting for the module packages by
defining sane defaults for <c>pkg_setup</c>, <c>src_compile</c>,
<c>src_install</c> and <c>pkg_postinst</c>.
</p>

<p>
<c>depend.apache</c> handles adding the correct Apache DEPEND to your DEPEND
(if you call one of the <c>need_apache*</c> functions) so you can skip
the apache DEPEND handling in your ebuild.
</p>

<p>
<c>DOCFILES</c> is used by the <c>src_install</c> in <c>apache-modules</c> to 
install all the documentation. <c>src_install</c> automatically detects html 
files and other files and uses either <c>dodoc</c> or <c>dohtml</c> to install
them to their correct locations.
</p>

<p>
<c>APACHE2_MOD_CONF</c> define the configuration
file to install for the module. This is used during <c>src_install</c> and
needs to be relative to <c>FILESDIR</c>. See the
<uri link="apache-module.eclass.xml">apache-module.eclass</uri> documentation
for details.
</p>

<p>
<c>APACHE2_MOD_DEFINE</c> tells the eclass which
<c>&lt;IfDefine MODULENAME&gt;</c> the module uses. It is used for displaying
instructions to the user on how to enable the module.
</p>

</body>
</section>
<section>
<title>src_compile</title>
<body>

<p>
<c>src_compile</c> may be needed if the module requires special steps that the 
eclass can't handle. This would be a rare case. In most cases, just reviewing 
the <path>Makefile</path> and adding items to <c>APXS2_ARGS</c> will be sufficient.
</p>

<pre caption="mod_ldap_userdir-1.1.12 (edited)">
src_compile() {
    econf || die "econf failed"
    use ssl &amp;&amp; APXS2_ARGS="${APXS2_ARGS} -DTLS=1"
    apache-module_src_compile
}
</pre>

<note>
In general, if APXS2_ARGS needs to be different, it is
defined in global space. <path>mod_ldap_userdir</path> is different in this
respect, because the state of the ssl USE-flag affects those variables and
it's more efficient to only set those values in <c>src_compile</c> rather than
run the USE check during every invocation of the ebuild.
</note>

</body>
</section>
<section>
<title>src_install</title>
<body>

<p>
In most cases, <c>src_install</c> will not be needed. The exceptions are when
there are other directories that need to be installed or when file permissions
need to be changed.
</p>

<pre caption="mod_ldap_userdir-1.1.12 (edited)">
src_install() {
    apache-module_src_install
    fperms 600 "${APACHE_MODULES_CONFDIR}"/47_mod_ldap_userdir.conf
}
</pre>

<p>
As you can see, in <path>mod_ldap_userdir</path> we need to set the proper
permissions on its configuration file. But we still let <c>apache-module</c>
strut it's stuff by calling <c>apache-module_src_install</c> inside our
<c>src_install</c>. In most cases, <c>src_install</c> will not be needed at all.
</p>

<p>
<c>src_install</c> completely handles installing the module, configuration 
files and documentation into the correct places.
</p>

</body>
</section>
<section>
<title>Other functions</title>
<body>

<p>
In most cases, there should not be any pkg_postinst or pkg_config as the eclass
handles outputting instructions to the user about enabling a module and where
the configuration file is. If additional setup instructions are needed, then a
<c>pkg_postinst</c> can be added, but should also run
<c>apache-module_pkg_postinst</c> inside it.
</p>

<p>
With the default configuration of Apache, we dont't need to have the
user modify their <path>httpd.conf</path> to enable a module. All the
<path>*.conf</path> files in the <path>modules.d</path> directory are included
automatically. Every file there should be completely wrapped in an
<c>&lt;IfDefine MODULENAME&gt;</c> block so that the directives in that file
are only used if the user adds a <c>"-D MODULENAME"</c> to their
<path>/etc/conf.d/apache2</path> file.
</p>

</body>
</section>
<section>
<title>Configuration file</title>
<body>

<p>
Every module configuration file needs to be wrapped in <c>&lt;IfDefine 
MODULENAME&gt;</c> blocks. If you don't do this, then Apache will load the 
module by default, which we don't want - module loading is to be controlled by 
the user, using the <path>/etc/conf.d/apache2</path> file.
</p>

<pre caption="sample config file">
&lt;IfDefine LDAP_USERDIR&gt;
LoadModule ldap_userdir_module modules/mod_ldap_userdir.so

<comment># Put a good default configuration here:</comment>
LDAPUserDir             public_html
LDAPUserDirDNInfo       cn=root,dc=yourcompany,dc=com yourpassword
LDAPUserDirBaseDN       ou=People,dc=yourcompany,dc=com

&lt;/IfDefine&gt;
</pre>

</body>
</section>
</chapter>

</guide>
