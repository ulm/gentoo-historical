<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header $ -->

<guide link="/proj/fr/apache/apache-developer.xml" lang="fr">
<title>Documentation Apache pour les développeurs</title>

<author title="Auteur">
  <mail link="vericgar@gentoo.org">Michael Stewart</mail>
</author>
<author title="Traducteur">
  <mail link="titefleur@gentoo.org">Marion Agé</mail>
</author>

<abstract>
Ce document fournit des détails au sujet des nouvelles eclass disponibles pour
les développeurs des paquets relatifs à Apache.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>2.4</version>
<date>2007-07-30</date>

<chapter>
<title>À propos de ce document</title>
<section>
<body>

<p>
Ce document détaille les <uri link="#apache-module">nouvelles eclass</uri>,
<uri link="#changes">ce que nous avons changé</uri> depuis le précédent modèle
d'Apache, et la façon dont les ebuilds ont besoin d'être <uri
link="#ebuild-update">modifiés</uri> pour tenir compte des avantages de nos
nouvelles eclass. Si vous êtes un utilisateur à la recherche d'informations
pour la mise à jour d'Apache, veuillez plutôt consulter le documentation de la
<uri link="apache-upgrading.xml">mise à jour d'Apache</uri>.
</p>

</body>
</section>
</chapter>

<chapter id="changes">
<title>Ce qui a changé</title>
<section>
<title>Vue d'ensemble</title>
<body>

<p>
Nous avons fait beaucoup de changements concernant la procédure d'installation
et d'utilisation d'Apache et de ses modules sous Gentoo. Cela facilite les
tâches de maintenance et permet de suivre de près les versions en amont. Voici
nos changements&nbsp;:
</p>

<ul>
  <li>Correction de nombreux <uri link="#buglist">bogues</uri></li>
  <li>Changement des chemins d'installation et de configuration</li>
  <li>
    Création des eclass <uri link="#depend-apache">depend.apache</uri> et <uri	
    link="#apache-module">apache-module</uri>
  </li>
  <li>
    Fusion des fichiers apache.conf et commonapache.conf en un seul fichier
    très similaire à la version de base
  </li>
  <li>
    Dédoublement de <c>apr</c> et <c>apr-utils</c> en-dehors du paquet
    principal d'Apache pour ceux qui ne nécessitent plus Apache
  </li>
  <li>Mise à jour et estampillage d'une version pour presque chaque module</li>
  <li>Mise à disposition d'un plus grand nombre de MPM</li>
  <li>Ajout du support de lingerd</li>
  <li>Fixation du support des longs fichiers</li>
  <li><e>Et bien plus encore, je suis sûr que j'en oublie...</e></li>
</ul>

</body>
</section>
<section>
<title>Localisation des chemins d'Apache</title>
<body>

<p>
Afin de suivre de plus près l'installation d'Apache en amont et celle des
autres distributions, les chemins suivant ont changé&nbsp;:
</p>

</body>
</section>
<section>
<title>Apache 2.x</title>
<body>

<table>
<tr>
  <th>Utilisation</th>
  <th>Ancien chemin</th>
  <th>Nouveau chemin</th>
</tr>
<tr>
  <ti>Racine du serveur</ti>
  <ti><path>/etc/apache2/</path></ti>
  <ti><path>/usr/lib/apache2/</path></ti>
</tr>
<tr>
  <ti>Répertoire de configuration</ti>
  <ti><path>/etc/apache2/conf/</path></ti>
  <ti><path>/etc/apache2/</path></ti>
</tr>
<tr>
  <ti>Configuration</ti>
  <ti><path>/etc/apache2/conf/apache2.conf</path></ti>
  <ti><path>/etc/apache2/httpd.conf</path></ti>
</tr>
<tr>
  <ti>Configuration</ti>
  <ti><path>/etc/apache2/conf/commonapache2.conf</path></ti>
  <ti><path>/etc/apache2/httpd.conf</path></ti>
</tr>
<tr>
  <ti>Configuration des hôtes virtuels</ti>
  <ti><path>/etc/apache2/conf/vhosts/</path></ti>
  <ti><path>/etc/apache2/vhosts.d/</path></ti>
</tr>
<tr>
  <ti>Configuration des modules</ti>
  <ti><path>/etc/apache2/conf/modules.d/</path></ti>
  <ti><path>/etc/apache2/modules.d/</path></ti>
</tr>
<tr>
  <ti>Modules binaires</ti>
  <ti><path>/usr/lib/apache2-extramodules/</path></ti>
  <ti><path>/usr/lib/apache2/modules/</path></ti>
</tr>
</table>

<note>
La configuration inclut désormais automatiquement les fichiers
<path>modules.d/*.conf</path> et <path>vhosts.d/*.conf</path> par défaut.
Cependant, la directive dans le fichier <path>httpd.conf</path> énumère ce qui
précède de la même façon que <path>conf/modules.d/*.conf</path> et
<path>conf/vhosts.d/*.conf</path>. Cela est dû au fait qu'Apache lit la
configuration en utilisant le répertoire <path>/usr/lib/apache{|2}</path> qui
contient un lien symbolique <path>conf -&gt; /etc/apache{|2}</path>.
</note>

<impo>
Si vous êtes développeur et que vous mettez à jour un ebuild pour utiliser les
changements que nous avons faits, veuillez ne pas compliquer les chemins cités
précédemment dans votre ebuild. Regardez plutôt la documentation des eclass
pour les variables appropriées que vous pouvez utiliser.
</impo>

</body>
</section>
</chapter>

<chapter id="ebuild-update">
<title>Mise à jour d'un ebuild</title>
<section>
<body>

<p>
Avec nos nouveaux changements, pratiquement chaque ebuild qui dépend d'Apache
doit être modifié. L'équipe d'Apache a déjà pris compte d'une grande majorité
de ces paquets, car ils en sont responsables. Mais il en reste plusieurs qui
appartiennent à d'autres mainteneurs et qui ont besoin d'être mis à jour.
</p>

<p>
Ce chapitre a pour but de guider un développeur à travers la mise à jour d'un
ebuild pour utiliser les nouvelles eclass, en s'appuyant sur un de nos paquets
les plus complexes, <c>www-apache/mod_ldap_userdir</c> par exemple.
</p>

<note>
Si votre paquet actuellement n'est pas un module mais qu'il a juste besoin de
connaître les chemins qu'utilise Apache, faites simplement un <c>inherit
depend.apache</c> et utilisez les variables qui sont mises à votre disposition
dans les eclass. Consultez pour cela la documentation du <uri
link="#depend-apache">depend.apache</uri> des eclass.
</note>

</body>
</section>
<section>
<title>Vue d'ensemble des changements nécessaires</title>
<body>

<ul>
  <li>
    Une nouvelle révision sera nécessaire tant que les versions modifiées pour
    les nouvelles eclass ne sont pas rétro-compatibles avec les anciennes
    versions d'Apache.
  </li>
  <li>
    Assurez-vous d'avoir mis votre <c>KEYWORDS</c> en instable et (si les
    paquets d'Apache sont encore masqués) ajoutez-les au fichier
    <path>package.mask</path>.
  </li>
  <li>
    Remplacez chaque <c>DEPEND</c> d'Apache par <c>need_apache1</c> (pour les
    modules de Apache-1*), par <c>need_apache2</c> (pour les modules
    d'Apache-2*), ou par <c>need_apache</c> (pour les modules qui peuvent
    dépendre d'Apache-1* ou d'Apache-2* &mdash; selon les variables USE
    indiquées).
  </li>
  <li>
    Retirez n'importe quel code spécifique qui modifie le <c>SLOT</c> ou
    <c>DEPEND</c> avec des «&nbsp;bidouilles&nbsp;» telles que
    <c>has_version</c>.
  </li>
  <li>
    Vérifiez que le <c>src_compile</c> par défaut dans l'eclass est
    fonctionnel.  Si ce n'est pas le cas, réglez <c>APXS1_ARGS</c> et/ou
    <c>APXS2_ARGS</c> pour compiler les autres fichiers requis.
  </li>
  <li>Généralement toutes les fonctions peuvent être retirées de l'ebuild.</li>
  <li>
    Modifiez le fichier de configuration des modules afin d'utiliser les
    directives <c>IfDefine</c> pour charger et configurer le module.
  </li>
  <li>Ajoutez les fichiers de documentation dans <c>DOCFILES</c>.</li>
  <li>
    Spécifiez les fichiers de configuration que src_install devra
    installer&nbsp;: <c>APACHE1_MOD_CONF</c>, <c>APACHE2_MOD_CONF</c>.
  </li>
  <li>
    Spécifiez le <c>IfDefine</c> que le module utilise dans son fichier de
    configuration, pkg_postinst peut vous donner des informations utiles pour
    activer le module&nbsp;: <c>APACHE1_MOD_DEFINE</c>,
    <c>APACHE2_MOD_DEFINE</c>.
  </li>
  <li>
    N'oubliez pas de le tester &mdash; suivez les instructions de mise à jour
    de ce document si vous ne l'avez pas déjà fait.
  </li>
</ul>

</body>
</section>
<section>
<title>Ebuilds globaux</title>
<body>


<pre caption="Diff entre mod_ldap_userdir-1.4.1 et mod_ldap_userdir-1.4.1-r1
(edité)">
+inherit apache-module
+
-IUSE="apache2 ssl"
+IUSE="ssl"

 DESCRIPTION="Apache module that enables ~/public_html from an LDAP directory."
 HOMEPAGE="http://horde.net/~jwm/software/mod_ldap_userdir/"
-KEYWORDS="x86 ppc"
+KEYWORDS="~x86 ~ppc"

 SRC_URI="http://horde.net/~jwm/software/mod_ldap_userdir/${P}.tar.gz"

-DEPEND="=net-www/apache-1*
-		apache2? ( =net-www/apache-2* )
-		ssl? ( dev-libs/openssl )
-		net-nds/openldap"
+DEPEND="ssl? ( dev-libs/openssl )
+		net-nds/openldap"

 LICENSE="GPL-1"
 SLOT="0"
+
+DOCFILES="DIRECTIVES README user-ldif posixAccount-objectclass"
+APACHE1_MOD_CONF="${PVR}/47_mod_ldap_userdir"
+APACHE2_MOD_CONF="${PVR}/47_mod_ldap_userdir"
+APACHE1_MOD_DEFINE="LDAPuserdir"
+APACHE2_MOD_DEFINE="LDAPuserdir"
+
+need_apache
</pre>

<p>
Nous commençons avec <c>inherit apache-module</c> qui hérite également
<c>depend.apache</c>. <c>depend.apache</c> définit les localisations qu'utilise
Apache et, plus important, définit trois <c>DEPEND</c>&nbsp;:
<c>APACHE1_DEPEND</c> pour les paquets qui ont besoin d'Apache-1*,
<c>APACHE2_DEPEND</c> pour les paquets qui ont besoin d'Apache-2*, et
<c>APACHE_DEPEND</c> pour les paquets qui peuvent avoir besoin soit d'Apache-1*
soit d'Apache-2* et qui laissent à la variable USE apache2 le soin de
déterminer cela.
</p>

<note>
Pour le moment, nous ne supportons pas l'installation des deux versions
d'Apache simultanément (bien que cela soit possible), car il n'est pas possible
ensuite d'installer une seule version d'un module pour les deux versions
d'Apache. Les modules devront juste utiliser un <c>SLOT</c> autre que <c>0</c>
s'ils ont des lignes multiples de version et que chacun supporte une version
différente d'Apache. (i.e. <path>mod_layout-3.2.1-r1</path> possède un
<c>SLOT="1"</c> et <path>mod_layout-4.0.1a-r1</path> un <c>SLOT="2"</c>.)
</note>

<p>
<c>apache-module</c> s'occupe d'une lourde tâche pour les paquets de module en
définissant des valeurs convenables par défaut pour <c>pkg_setup</c>,
<c>src_compile</c>, <c>src_install</c> et <c>pkg_postinst</c>.
</p>

<p>
Comme <c>depend.apache</c> ajoute <c>apache2</c> à IUSE si nécessaire, vous ne
devez plus le définir explicitement dans l'IUSE des ebuilds. Vous devrez
cependant le laisser défini si vous employez cette variable USE dans votre
ebuild quelque part.
</p>

<p>
<c>depend.apache</c> s'exécute en ajoutant le DEPEND Apache correct à votre
DEPEND (si vous appelez l'une des fonctions de <c>need_apache{|1|2}</c>), ainsi
vous pouvez retirer le traitement du DEPEND Apache de votre ebuild.
</p>

<p>
<c>DOCFILES</c> est utilisé par <c>src_install</c> dans <c>apache-modules</c>
pour installer toutes les documentations. <c>src_install</c> détecte
automatiquement les fichiers html et les autres fichiers, et utilise
<c>dodoc</c> ou <c>dohtml</c> pour les installer à leur bonne place.
</p>

<p>
<c>APACHE1_MOD_CONF</c> et <c>APACHE2_MOD_CONF</c> définissent le fichier de
configuration à installer pour le module. Ceci est utilisé pendant le
<c>src_install</c>, ainsi ils peuvent être liés à ce que vous avez défini pour
<c>APXS1_S</c> ou <c>APXS2_S</c> (par défaut à <c>${S}/src</c> si c'est un
répertoire, ou juste <c>${S}</c>).
</p>

<p>
<c>APACHE1_MOD_DEFINE</c> et <c>APACHE2_MOD_DEFINE</c> indiquent aux eclass de
quelle directive <c>&lt;IfDefine MODULENAME&gt;</c> le module se sert. Il est
utilisé pour afficher à l'utilisateur des commandes sur la façon d'activer le
module.
</p>

</body>
</section>
<section>
<title>src_compile</title>
<body>

<p>
<c>src_compile</c> peut être nécessaire si le module requiert des étapes
spéciales que l'eclass ne peut traiter. Ce serait un cas assez exceptionnel.
Dans la plupart des cas, en passant juste en revue le fichier
<path>Makefile</path> et en ajoutant les éléments à <c>APXS1_ARGS</c> ou
<c>APXS2_ARGS</c>, cela devrait être suffisant.
</p>

<pre caption="Diff entre mod_ldap_userdir-1.4.1 et mod_ldap_userdir-1.4.1-r1
(édité)">
-src_compile() {
-	local myconf
-	if use apache2; then
-		myconf="${myconf} --with-apxs2=/usr/sbin/apxs2"
-	else
-		myconf="${myconf} --with-apxs=/usr/sbin/apxs"
-	fi
-
-	use ssl &amp;&amp; myconf="${myconf} -with-tls"
-
-	myconf="${myconf} --with-activate"
-	./configure ${myconf} || die "Configure failed"
-	make clean
-	make || die "Make failed"
-}

+src_compile() {
+	local myargs="-lldap -llber -c ${PN}.c"
+	use ssl &amp;&amp; myargs="${myargs} -D TLS=1"
+
+	APXS2_ARGS="${myargs}"
+	APXS1_ARGS="${myargs}"
+
+	apache-module_src_compile
+
+}
</pre>

<note>
En général, si APXS1_ARGS ou APXS2_ARGS ont besoin d'être distincts, ils sont
définis dans l'espace global. <path>mod_ldap_userdir</path> est différent à cet
égard, parce que l'état de la variable USE ssl affecte ces variables et il est
plus efficace de placer uniquement ces valeurs dans <c>src_compile</c> plutôt
que de faire une vérification de la USE à chaque fois que vous invoquerez cet
ebuild.
</note>

</body>
</section>
<section>
<title>src_install</title>
<body>

<p>
Dans la plupart des cas, <c>src_install</c> ne sera pas nécessaire. Il y a des
exceptions quand d'autres répertoires ont besoin d'être installés ou quand les
droits de fichiers doivent être changés.
</p>

<pre caption="Diff entre mod_ldap_userdir-1.4.1 et mod_ldap_userdir-1.4.1-r1
(édité)">
-src_install() {
-	if use apache2; then
-		exeinto /usr/lib/apache2-extramodules
-		doexe mod_ldap_userdir.so
-	else
-		exeinto /usr/lib/apache-extramodules
-		doexe mod_ldap_userdir.so
-	fi
-	dodoc DIRECTIVES README user-ldif posixAccount-objectclass
-}
+src_install() {
+	apache-module_src_install
+	if [ "${APACHE_VERSION}" == "2" ]; then
+		fperms 600 ${APACHE2_MODULES_CONFDIR}/$(basename ${APACHE2_MOD_CONF})
+	else
+		fperms 600 ${APACHE1_MODULES_CONFDIR}/$(basename ${APACHE1_MOD_CONF})
+	fi
+}
</pre>

<p>
Comme vous pouvez le voir, dans <path>mod_ldap_userdir</path> nous avions en
fait ajouté quelques corrections qui n'étaient pas présentes dans la révision
précédente &mdash; l'ajout d'un fichier de configuration et le réglage des
permissions appropriées dessus. Mais nous permettons encore la présentation de
<c>apache-module</c> en appelant <c>apache-module_src_install</c> à l'intérieur
de notre <c>src_install</c>. Dans la plupart des cas, <c>src_install</c> ne
sera pas nécessaire du tout.
</p>

<p>
<c>src_install</c> traite complètement l'installation du module, la
configuration des fichiers et la documentation aux endroits corrects.
</p>

</body>
</section>
<section>
<title>Autres fonctions</title>
<body>

<p>
Dans la plupart des cas, il ne devrait y avoir ni pkg_postinst ni pkg_config
pendant que les eclass manipulent des instructions d'affichage à l'utilisateur
à propos de l'activation d'un module et de l'emplacement du fichier de
configuration. Si des instructions additionnelles d'installation sont
nécessaires, alors un <c>pkg_postinst</c> peut être ajouté, mais il devrait
alors exécuter <c>apache1_pkg_postinst</c> ou <c>apache2_pkg_postinst</c> à
l'intérieur de lui-même.
</p>

<pre caption="Diff entre mod_ldap_userdir-1.4.1 et mod_ldap_userdir-1.4.1-r1
(édité)">
-pkg_postinst() {
-	if use apache2; then
-		elog "Adjust /etc/apache2/conf/modules.d/47_mod_ldap_userdir.conf to match your setup and"
-		elog "add '-D LDAPuserdir' to your APACHE2_OPTS in /etc/conf.d/apache2"
-		elog "To configure the package run \"ebuild /var/db/pkg/net-www/${PF}/${PF}.ebuild config\""
-	fi
-}
-
-pkg_config() {
-	/usr/sbin/apacheaddmod \
-		${ROOT}/etc/apache/conf/apache.conf \
-		extramodules/mod_ldap_userdir.so mod_ldap_userdir.c ldap_userdir_module \
-		define=LDAPuserdir addconf=conf/addon-modules/47_mod_ldap_userdir.conf
-}
</pre>

<p>
Avec la nouvelle configration par défaut d'Apache, nous n'avons plus besoin
d'obliger l'utilisateur à modifier son fichier <path>httpd.conf</path> pour
activer le module. Tous les fichiers <path>*.conf</path> du répertoire
<path>modules.d</path> sont inclus automatiquement. Chaque fichier présent
devra être complètement compris dans un bloc <c>&lt;IfDefine
MODULENAME&gt;</c>, de telle sorte que les directives dans ce fichier ne soient
utilisées que si les utilisateurs ajoutent un <c>"-D MODULENAME"</c> à leur
fichier <path>/etc/conf.d/apache{|2}</path>.
</p>

</body>
</section>
<section>
<title>Fichier de configuration</title>
<body>

<p>
La plupart des fichiers de configuration n'auront besoin que de peu de
changements. Voici le principal à surveiller pour être sûr qu'il utilise le
chemin correct au chargement du module&nbsp;:
</p>


<pre caption="Directive LoadModule">
<comment>(Ancienne directive :)</comment>
LoadModule ldap_userdir_module	extramodules/mod_ldap_userdir.so

<comment>(Nouvelle directive :)</comment>
LoadModule ldap_userdir_module	modules/mod_ldap_userdir.so
</pre>

<p>
Ainsi, chaque fichier de configuration de module a besoin d'être compris dans
un bloc <c>&lt;IfDefine MODULENAME&gt;</c>. Si vous ne faites pas cela, alors
Apache chargera le module par défaut, ce que nous ne voulons pas &mdash; le
chargement du module doit être contrôlé par l'utilisateur, en utilisant le
fichier <path>/etc/conf.d/apache{|2}</path>.
</p>

<pre caption="Exemple de .conf">
&lt;IfDefine LDAPuserdir&gt;
  &lt;IfModule !mod_ldap_userdir.c&gt;
    <comment># Load the module:</comment>
    LoadModule ldap_userdir_module	modules/mod_ldap_userdir.so
  &lt;/IfModule&gt;
&lt;/IfDefine&gt;

&lt;IfModule mod_ldap_userdir.c&gt;
<comment># Mettez une bonne configuration par défaut ici&nbsp;:</comment>

    LDAPUserDir             public_html
    LDAPUserDirDNInfo       cn=root,dc=yourcompany,dc=com yourpassword
    LDAPUserDirBaseDN       ou=People,dc=yourcompany,dc=com

&lt;/IfModule&gt;
</pre>

<note>
Certains modules peuvent vouloir ajouter des extensions qui sont vérifiées dans
le DirectoryIndex. Nous avons modifié Apache afin d'avoir une nouvelle
directive de configuration, AddDirectoryIndex, qui ne s'occupe que de cela.
Utilisez-le exactement comme DirectoryIndex - il travaille de la même manière à
l'exception près qu'il ne remplace pas le DirectoryIndex, il s'ajoute à lui. Il
y a également un RemoveDirectoryIndex si cela est nécessaire pour une raison
quelconque.
</note>

</body>
</section>
</chapter>

<chapter id="apache-module">
<title>Eclass apache-module</title>
<section>
<title>Description</title>
<body>

<p>
L'eclass <c>apache-module</c> fournit des fonctions convenables par défaut pour
la compilation des modules Apache. Puisque la plupart des modules sont compilés
exactement de la même manière, ceci permet aux ebuilds de modules d'être
extrêmement simples.
</p>

</body>
</section>
<section>
<title>Fonctions</title>
<body>

<table>
<tr>
  <th>Fonction</th>
  <th>Description</th>
</tr>
<tr>
  <ti><c>apache_cd_dir</c></ti>
  <ti>Retourne le chemin correct du répertoire temporaire de construction.</ti>
</tr>
<tr>
  <ti><c>apache_mod_file</c></ti>
  <ti>Retourne le chemin du module construit à installer.</ti>
</tr>
<tr>
  <ti><c>apache_doc_magic</c></ti>
  <ti>
    Prend un seul argument optionnel. Si celui-ci est mentionné, la fonction
    retourne tous les fichiers *.html de <c>${DOCFILES}</c>, autrement il
    retourne tous les fichiers non-*.html.
  </ti>
</tr>
<tr>
  <ti><c>apache1_src_compile</c></ti>
  <ti>
    Appelle <c>${APXS1}</c> avec les arguments de <c>${APXS1_ARGS}</c>. Si un
    module requiert une installation différente de construction que celle-ci,
    utilisez <c>${APXS1}</c> dans votre propre src_compile quotidien.
  </ti>
</tr>
<tr>
  <ti><c>apache1_src_install</c></ti>
  <ti>
    Cette fonction installe le module et configure les fichiers dans le
    répertoire d'Apache. Elle gère l'installation des modules, leur
    configuration, les exécutables relatifs et la documentation.
  </ti>
</tr>
<tr>
  <ti><c>apache1_pkg_postinst</c></ti>
  <ti>Affiche les messages de configuration standard.</ti>
</tr>
<tr>
  <ti><c>apache2_pkg_setup</c></ti>
  <ti>
    Si APACHE2_SAFE_MPMS est paramétré, cette fonction vérifie les MPM
    installés et affiche une erreur s'il n'y a aucun MPM sûr installé.
  </ti>
</tr>
<tr>
  <ti><c>apache2_src_compile</c></ti>
  <ti>
    Appelle <c>${APXS2}</c> avec les arguments de <c>${APXS2_ARGS}</c>. Si un
    module requiert une installation différente de construction que celle-ci,
    utilisez <c>${APXS2}</c> dans votre propre src_compile quotidien.
  </ti>
</tr>
<tr>
  <ti><c>apache2_src_install</c></ti>
  <ti>
    Cette fonction installe le module et configure les fichiers dans le
    répertoire d'Apache. Elle gère l'installation des modules, leur
    configuration, les exécutables relatifs et la documentation.
  </ti>
</tr>
<tr>
  <ti>
    <c>apache-module_pkg_setup</c><br />
    <c>apache-module_src_compile</c><br />
    <c>apache-module_src_install</c><br />
    <c>apache-module_pkg_postinst</c>
  </ti>
  <ti>
    Ce sont des fonctions englobantes des fonctions apache1_* or apache2_*.
    Elles détectent automatiquement la version d'Apache avec lesquelles elles
    sont construites.
  </ti>
</tr>
</table>

</body>
</section>
<section>
<title>Variables</title>
<body>

<table>
<tr>
  <th>Variable</th>
  <th>Défaut</th>
  <th>Description</th>
</tr>
<tr>
  <ti>
    <c>APACHE1_MOD_CONF</c><br />
    <c>APACHE2_MOD_CONF</c>
  </ti>
  <ti>Non</ti>
  <ti>
    L'emplacement dans <c>${FILESDIR}</c> de la configuration des modules, sans
    l'extention .conf.
  </ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_MOD_DEFINE</c><br />
    <c>APACHE2_MOD_DEFINE</c>
  </ti>
  <ti>Non</ti>
  <ti>
    Nom du «&nbsp;define&nbsp;» dans la configuration des modules. Utilisé en
    affichant un message à l'utilisateur pour l'ajouter à son
    <path>/etc/conf.d/apache{|2}</path>.
  </ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_EXECFILES</c><br />
    <c>APACHE2_EXECFILES</c>
  </ti>
  <ti>Non</ti>
  <ti>Fichiers exécutables additionnels qui devront être installés.</ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_MOD_FILE</c><br />
    <c>APACHE2_MOD_FILE</c>
  </ti>
  <ti>
    ${PN}.so<br />
    .libs/${PN}.so
  </ti>
  <ti>Les modules que <c>src_install</c> installe.</ti>
</tr>
<tr>
  <ti><c>APACHE2_SAFE_MPMS</c></ti>
  <ti>Non</ti>
  <ti>
    Une liste des MPM qui fonctionnent avec ce module. Si ce n'est pas
    renseigné, alors aucune vérification des MPM ne sera faite. S'il y a des
    MPM peu sûrs d'installés l'utilisateur est averti. S'il n'y pas de MPM
    installés, le module refuse de s'installer.
  </ti>
</tr>
<tr>
  <ti>
    <c>APXS1_S</c><br />
    <c>APXS2_S</c>
  </ti>
  <ti>Non</ti>
  <ti>
    Les chemins vers les répertoires de construction temporaires. Retourné par
    <c>apache_cd_dir</c> si renseigné, sinon il retourne <c>${S}/src</c>
    (si c'est un répertoire) ou <c>${S}</c> sinon.
  </ti>
</tr>
<tr>
  <ti>
    <c>APXS1_ARGS</c><br />
    <c>APXS2_ARGS</c>
  </ti>
  <ti>-c ${PN}.c</ti>
  <ti>Arguments à passer à l'outil apxs.</ti>
</tr>
<tr>
  <ti><c>DOCFILES</c></ti>
  <ti>Non</ti>
  <ti>
    La documentation à installer. Tous les fichiers qui finissent par .html
    sont installés en utilisant <c>dohtml</c>, les autres sont installés en
    utilisant <c>dodoc</c>.
  </ti>
</tr>
</table>

</body>
</section>
</chapter>

<chapter id="depend-apache">
<title>Eclass depend.apache</title>
<section>
<title>Description</title>
<body>

<p>
L'eclass <c>depend.apache</c> règle les localisations par défaut des différents
chemins d'Apache et gère les paramètres des dépendances sur Apache. En général,
cette eclass ne devrait pas être utilisée par les modules. Elle devrait
seulement être employée pour les programmes qui doivent dépendre d'Apache mais
qui ne sont pas des modules. (Les modules devraient employer l'eclass <uri
link="#apache-module">apache-module</uri>.)
</p>

</body>
</section>
<section>
<title>Fonctions</title>
<body>

<table>
<tr>
  <th>Fonction</th>
  <th>Description</th>
</tr>
<tr>
  <ti><c>need_apache1</c></ti>
  <ti>
    Cette fonction renseigne correctement l'information sur les dépendances
    pour les paquets qui ne supportent que Apache-1.x. Les paquets qui
    nécessitent Apache-1.x devront appeler <c>need_apache1</c> dans la portée
    globale pour placer correctement les dépendances.
  </ti>
</tr>
<tr>
  <ti><c>need_apache2</c></ti>
  <ti>
    Cette fonction renseigne correctement l'information sur les dépendances
    pour les paquets qui ne supportent que Apache-2.x. Les paquets qui
    nécessitent Apache-2.x devront appeler <c>need_apache2</c> dans la portée
    globale pour placer correctement les dépendances.
  </ti>
</tr>
<tr>
  <ti><c>need_apache</c></ti>
  <ti>
    Cette fonction renseigne correctement l'information sur les dépendances
    basées sur les variables USE actuellement réglées. Les paquets qui peuvent
    utiliser les deux versions d'Apache devront appeler <c>need_apache</c> dans
    la portée globale pour placer correctement les dépendances.
  </ti>
</tr>
</table>

</body>
</section>
<section>
<title>Variables</title>
<body>

<table>
<tr>
  <th>Variable</th>
  <th>Défaut</th>
  <th>Description</th>
</tr>
<tr>
  <ti><c>APACHE_VERSION</c></ti>
  <ti>1</ti>
  <ti>
    Paramétré par <c>need_apache</c>, <c>need_apache1</c>, <c>need_apache2</c>.
    Stocke la version d'apache que nous allons construire.
  </ti>
</tr>
<tr>
  <ti>
    <c>APXS1</c><br />
    <c>APXS2</c>
  </ti>
  <ti>
    <path>/usr/sbin/apxs</path><br />
    <path>/usr/sbin/apxs2</path>
  </ti>
  <ti>Chemin vers l'outil apxs</ti>
</tr>
<tr>
  <ti>
    <c>APACHECTL1</c><br />
    <c>APACHECTL2</c>
  </ti>
  <ti>
    <path>/usr/sbin/apachectl</path><br />
    <path>/usr/sbin/apache2ctl</path>
  </ti>
  <ti>Chemin vers l'outil apachectl</ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_BASEDIR</c><br />
    <c>APACHE2_BASEDIR</c>
  </ti>
  <ti>
    <path>/usr/lib/apache</path><br />
    <path>/usr/lib/apache2</path>
  </ti>
  <ti>Le chemin dans lequel le serveur tourne.</ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_CONFDIR</c><br />
    <c>APACHE2_CONFDIR</c>
  </ti>
  <ti>
    <path>/etc/apache</path><br />
    <path>/etc/apache2</path>
  </ti>
  <ti>Localisation du fichier de configuration <path>httpd.conf</path></ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_MODULES_CONFDIR</c><br />
    <c>APACHE2_MODULES_CONFDIR</c>
  </ti>
  <ti>
    ${APACHE1_CONFDIR}/modules.d<br />
    ${APACHE2_CONFDIR}/modules.d
  </ti>
  <ti>
    Emplacement où les modules devront installer leur configuration.
    Tous les fichiers *.conf dans ce répertoire sont inclus au lancement.
  </ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_VHOSTDIR</c><br />
    <c>APACHE2_VHOSTDIR</c>
  </ti>
  <ti>
    ${APACHE1_CONFDIR}/vhosts.d<br />
    ${APACHE2_CONFDIR}/vhosts.d
  </ti>
  <ti>
    Emplacement où les configurations des hôtes virtuels devront être gardés.
    Tous les fichiers *.conf dans ce répertoire sont inclus au lancement.
  </ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_MODULESDIR</c><br />
    <c>APACHE2_MODULESDIR</c>
  </ti>
  <ti>
    ${APACHE1_BASEDIR}/modules<br />
    ${APACHE2_BASEDIR}/modules
  </ti>
  <ti>Emplacement où les modules binaires devront être installés.</ti>
</tr>
</table>

<note>
Toutes les variables devront être considérées en lecture seule et ne devront
pas être modifiées dans l'ebuild. Cela pourrait produire des résultats
imprévisibles.
</note>

</body>
</section>
</chapter>
</guide>
