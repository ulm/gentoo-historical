<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/fr/hardened/primer.xml,v 1.2 2006/05/11 09:17:42 neysx Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/fr/hardened/primer.xml" lang="fr">

<title>Introduction à Hardened Gentoo</title>

<author title="Auteur">
  <mail link="method@gentoo.org">Joshua Brindle</mail>
</author>
<author title="Participant">
  <mail link="tocharian@gentoo.org">Adam Mondl</mail>
</author>
<author title="Correcteur">
  <mail link="solar@gentoo.org">Ned Ludd</mail>
</author>
<author title="Traducteur">
  <mail link="ac007@bluewin.ch">Alexandre</mail>
</author>

<abstract>Une introduction à Hardened Gentoo.</abstract>
<license/>

<version>1.2</version>
<date>2005-10-10</date>

<chapter>
<title>Introduction</title>
<section>
<body>

<p>
Ce guide est conçu pour clarifier les différents aspects du projet Hardened
Gentoo (Gentoo sécurisé), expliquer leurs usages complémentaires et détailler
leurs rôles respectifs dans le projet.
</p>

<p>
Le principe de sécurité que nous mettons en œuvre est le principe de la
sécurité par couches. Ce principe est fondamental pour assurer qu'une machine
ne puisse être compromise et, si elle l'est, pour minimiser les dégâts. En
combinant une série de technologies de sécurité différentes, nous obligeons un
intrus à franchir plusieurs obstacles avant qu'il ne soit en mesure de
compromettre un système. Pour cette raison nous recommandons toujours que vous
déterminiez vos besoins spécifiques et qu'en fonction de ces besoins vous
combiniez ces solutions pour protéger votre système. Dans ce document, nous
allons essayer de vous expliquer ces options et de quelle manière elles peuvent
se combiner.
</p>

<p> 
Hardened Gentoo, en soi, n'est pas un produit ou une solution. Il s'agit
simplement d'un projet regroupant des développeurs travaillant tous dans un
même but&nbsp;: la sécurité active. Les sous-projets qui composent Hardened
Gentoo n'ont d'autres liens, entre eux, que d'appartenir au projet principal.
Vous pouvez vous représenter de la même manière KDE et GNOME qui sont tous deux
des projets de gestionnaire de bureau&nbsp;: Ils ont un but commun, mais ne
sont pas liés entre eux.
</p> 

<note> 
Demander de l'aide pour l'installation de votre machine «&nbsp;Hardened
Gentoo&nbsp;» est, par conséquent, trop imprécis. Une demande devra toujours
spécifier que vous avez un problème avec SELinux, PIE/SSP, etc.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Technologies offertes</title>
<section>
<title>PaX</title>
<body>

<p>
PaX est au cœur du projet. PaX est un correctif (patch) du noyau qui permet de
se protéger contre les dépassements de tampons et de tas (buffer et heap
overflows) et contre les attaques similaires. PaX est votre première ligne de
défense.
</p>

<p>
En raison de la mauvaise conception de certains logiciels, vous êtes en
permanence susceptibles d'être attaqué par dépassement de tampon ou de tas.
Les dépassements de tampons et de tas peuvent être exploités lorsque des
applications ne vérifient pas les limites des données saisies par
l'utilisateur. Lorsqu'un intrus, par le biais d'une application, a la
possibilité d'insérer des données directement en mémoire, sans qu'elles soient
vérifiées par l'application, il y a risque de dépassement. Des langages de
programmation bas niveau tels que C et C++ ne protègent pas automatiquement
contre les dépassements. Il en résulte que lorsqu'un tampon est dépassé, le
code adjacent peut être récrit par les données saisies par l'utilisateur.  Cela
devrait provoquer un crash de l'application si le code saisi par l'utilisateur
n'est pas «&nbsp;compris&nbsp;» par la machine. Cela se manifeste généralement
par une erreur de pagination (page fault) parce que les caractères qui
dépassent le tampon et entrent dans la zone de l'exécutable sont traités comme
des adresses qui n'existent (probablement) pas. C'est le résultat le plus bénin
d'un dépassement.
</p>

<p>
Toutefois, si l'attaquant connaît une faille de ce type, il aura l'opportunité
d'ajouter du shellcode à sa saisie et, plutôt que de provoquer un crash de
l'application, la machine exécutera les instructions fournies dans la portion
«&nbsp;dépassante&nbsp;» des données saisies. Le shellcode le permet puisque
c'est de cette manière que les instructions sont stockées en mémoire pour être
exécutées par le processeur. Le shellcode se compose d' «&nbsp;opcodes&nbsp;»
qui se traduisent par des routines en assembleur. Un attaquant connaît ces «
opcodes » sur le bout des doigts et peut créer du shellcode qui lui permet de
faire tout ce qu'il veut&nbsp;; par exemple&nbsp;: exécuter un shell en tant
que root et l'attacher à un port.  Lorsque cela se produit, l'utilisateur
légitime ne s'en aperçoit pas puisque l'application ne crash pas et le code
arbitraire de l'attaquant lui permet alors de faire ce qu'il souhaite. PaX
permet de mitiger ce problème en plaçant en mémoire, de manière aléatoire,
chaque fonction et tampon des applications.  Cela s'appelle ASLR ou Address
Space Layout Randomization (couche d'espace d'adresse aléatoire) et c'est la
pierre angulaire de PaX. En attribuant les espaces mémoire de manière aléatoire
pour toutes les fonctions et tampons, l'attaquant est incapable de produire une
saisie qui garantit que son shellcode sera exécuté (ce qui rend sa tâche très
difficile puisque l'application crashera probablement et qu'elle sera
redémarrée dans d'autres espaces mémoire choisis aléatoirement). ASLR est plus
utile quand il est utilisé avec du code PIE (Position Independent Executable),
mais il fonctionne également avec du code standard ce qui impose, toutefois,
une charge supplémentaire au système.
</p>

<p>
PaX offre également la possibilité aux segments exécutables d'être exécutables,
mais sans accès en écriture ou avec accès en écriture, mais non exécutable.
Cela s'appelle pageexec. Il n'est pas possible de réaliser cela au niveau
matériel sur les processeurs à base de x86 étant donné que les concepteurs de
cette architecture, pour gagner de la place, ont rassemblé les deux indices
«&nbsp;exécutable&nbsp;» et «&nbsp;accès en écriture&nbsp;» en un seul indice.
Puisque qu'une «&nbsp;page&nbsp;» devrait avoir soit l'accès en écriture, soit
l'accès en lecture et en exécution, il ne sert à rien de paramétrer les tampons
en «&nbsp;non exécutables&nbsp;» puisqu'on ne pourrait alors plus les lire. Par
conséquent, sur les architectures à base de x86, PaX émule ce comportement au
niveau logiciel, ce qui induit une charge supplémentaire sur le système, mais
est une aide précieuse pour la sécurité.
</p>

</body>
</section>
<section>
<title>PIE/SSP</title>
<body>

<p>
PIE et SSP (Stack Smashing Protection - Protection contre la corruption de
pile) sont généralement groupés dans les discussions parce qu'ils font partie
de la même chaîne d'outils «&nbsp;hardened&nbsp;». Cependant, afin de clarifier
les choses, PIE et SSP ont des technologies et des objectifs différents. PIE
seul n'apporte aucune amélioration à la sécurité mais, lorsqu'il est combiné
avec PaX dans le noyau, c'est un outil puissant contre les dépassements. SSP
est entièrement implémenté dans le domaine utilisateur et protège contre les
attaques stack smashing sans l'assistance du noyau. Puisqu'ils sont implémentés
séparément et qu'ils n'agissent pas au même niveau, ils représentent deux
couches de protection. Par exemple, une attaque nommée ret2libc pourrait passer
PaX sans encombre, mais serait bloquée par SSP.
</p>

<p>
Nous avons déployé de grands efforts pour fournir aux utilisateurs une manière
facile de construire l'espace utilisateur avec du code PIE afin de bénéficier
de l'ASLR avec très peu de surcharge sur le système. En plus de PIE, notre
chaîne d'outils «&nbsp;hardened&nbsp;» fournit également SSP. SSP protège
contre les attaques stack smashing en allouant un espace en dehors des tampons
et en lui attribuant un «&nbsp;canari&nbsp;» (un marqueur) aléatoire et crypté.
Si le canari a été écrasé après une écriture sur le tampon, SSP sera alors en
mesure de le détecter et de tuer l'application exploitée. La chaîne
«&nbsp;hardened&nbsp;» offre aux utilisateurs un espace utilisateur PIE/SSP de
la manière la plus facile qui soit. Les «&nbsp;stages&nbsp;» estampillés
«&nbsp;pie-ssp&nbsp;» sont des stages standards construits avec PIE et SSP. Ils
n'incluent pas les contrôles d'accès SELinux/RSBAC/grsecurity.
</p>

</body>
</section>
<section>
<title>Contrôles d'accès obligatoires</title>
<body>

<p>
PaX est sans doute la première couche de protection, peut-être la deuxième ou
la troisième si vous avez un firewall et/ou une solution de détection
d'intrusion réseau. Il est également recommandé d'utiliser le contrôle des
accès pour améliorer la sécurité de votre système. Il est très important que
vous vous représentiez le contrôle des accès comme la <b>dernière</b> couche de
protection. Le contrôle des accès est très utile pour contenir un attaquant
ayant déjà accès à votre système ou à vos utilisateurs locaux. Actuellement,
«&nbsp;Hardened Gentoo&nbsp;» supporte 3 solutions de contrôle des accès&nbsp;:
SELinux, grsecurity et RSBAC. Puisque SELinux nécessite des changement dans
l'espace utilisateur, nous construisons également des «&nbsp;stages&nbsp;»
SELinux qu'il ne faut pas confondre avec les stages «&nbsp;pie-ssp&nbsp;».
Néanmoins, puisqu'il est recommandé d'utiliser les stages «&nbsp;pie-ssp&nbsp;»
avec SELinux, des stages «&nbsp;selinux-pie-ssp&nbsp;» sont également offerts
pour votre convenance.
</p>

<p>
Si vous souhaitez utiliser grsecurity, vous n'avez pas à vous soucier des
stages puisque grsecurity ne requiert aucune modification de l'espace
utilisateur. Utilisez simplement les stages «&nbsp;pie-ssp&nbsp;» et, une fois
que vous serez prêt à construire le noyau, utilisez un noyau compatible
grsecurity tel que «&nbsp;hardened-sources&nbsp;». Une fois que votre système
est fonctionnel vous pouvez utiliser le mode d'apprentissage de grsecurity pour
construite les ACL's pour votre système.
</p>

<p>
De même que grsecurity, RSBAC ne requiert pas de modifications dans l'espace
utilisateur, mais peut, en revanche, être installé après une installation
Gentoo normale. RSBAC est supporté par le noyau «&nbsp;rsbac-sources&nbsp;».
Une fois que votre système est fonctionnel vous pouvez choisir parmi les
différents modèles de contrôle d'accès RSBAC puisqu'ils se présentent tous sous
la forme de modules.  La documentation Gentoo de RSBAC liste les différents
modèles offerts et donne plus d'information sur chacun d'eux.
</p>

<p>
Nous avons donc parlé des deux couches de protection que nous offrons. Nous
avons l'intention d'en fournir plus dans le futur. Des exemples de couches
supplémentaires sont la détection/prévention d'intrusion qui deviendrait alors
la première couche, avant même PaX&nbsp;; Le cryptage de disques et des
partitions d'échange (swap) qui permet une protection contre les failles
«&nbsp;physiques&nbsp;»; Les audits, qui permettent de détecter et d'agir selon
les risques, avant qu'il ne se transforment en «&nbsp;système compromis&nbsp;».
Le cryptage des flux réseau et l'authentification forte sont des couches qui
sont fort bien supportées par Linux en standard et qui ne seront probablement
pas abordées ici.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Ressources</title> 
<section>
<body>

<table>
<tr>
  <th>Projet</th>
  <th>Page d'accueil du projet</th>
  <th>Page du projet Gentoo</th>
</tr>
<tr>
  <ti>PaX</ti>
  <ti>
    <uri>http://pax.grsecurity.net</uri>
  </ti>
  <ti>
    <uri link="/proj/en/hardened/pax-quickstart.xml">Hardened Gentoo PaX
    Quickstart</uri>
  </ti>
</tr>
<tr>
  <ti>PIE</ti>
  <ti>Non disponible</ti>
  <ti>Non disponible</ti>
</tr>
<tr>
  <ti>SSP</ti>
  <ti><uri>http://www.trl.ibm.com/projects/security/ssp/</uri></ti>
  <ti>Non disponible</ti>
</tr>
<tr>
  <ti>SELinux</ti>
  <ti><uri>http://www.nsa.gov/selinux</uri></ti>
  <ti><uri link="/proj/en/hardened/selinux/">SELinux</uri>
</ti>
</tr>
<tr>
  <ti>grsecurity</ti>
  <ti><uri>http://www.grsecurity.net</uri></ti>
  <ti><uri link="/proj/fr/hardened/grsecurity2.xml">Guide Gentoo Grsecurity
  version 2</uri></ti>
</tr>
<tr>
  <ti>RSBAC</ti>
  <ti><uri>http://www.rsbac.org</uri></ti>
  <ti>
    <uri link="/proj/en/hardened/rsbac/">Rule Set Based Access Control</uri>
  </ti>
</tr>
</table>

</body>
</section>
</chapter>
</guide>
