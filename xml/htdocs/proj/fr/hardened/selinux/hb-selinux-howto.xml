<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://createivecommons.org/licenses/by-sa/1.0 -->

<!-- Le contenu de ce document est sous licence CC-BY-SA. -->
<!-- Voir http://creativecommons.org/licenses/by-sa/1.0/deed.fr -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/fr/hardened/selinux/hb-selinux-howto.xml,v 1.1 2009/02/23 23:10:47 cam Exp $ -->

<sections>
<version>2.0</version>
<date>2006-10-14</date>

<section>
<title>Charger une politique dans un noyau SELinux</title>
<subsection>
<body>

<p>
Vous devez vous placer dans le rôle <c>sysadm_r</c>.
</p>

<pre caption="La commande semodule">
# <i>semodule -B</i>
</pre>

</body>
</subsection>
</section>

<section>
<title>Changer de rôle</title>
<subsection>
<body>

<p>
Votre utilisateur doit avoir accès au rôle cible. Dans cet exemple, nous nous
mettons dans le rôle <c>sysadm_r</c>.
</p>

<pre caption="La commande newrole">
# <i>newrole -r sysadm_r</i>
</pre>

</body>
</subsection>
</section>

<section>
<title>Spécifier les rôles disponibles pour un utilisateur</title>
<subsection>
<body>

<p>
Il y a une correspondance entre les utilisateurs Linux et les identités
SELinux. La politique dispose d'utilisateurs SELinux génériques selon les
configurations des rôles. Par exemple, pour associer l'utilisateur
<c>pebenito</c> à l'identité SELinux <c>staff_u</c>&nbsp;:
</p>

<pre caption="Associer pebenito à staff_u">
# <i>semanage login -a -s staff_u pebenito</i>
</pre>

<p>
La politique n'a pas besoin d'être rechargée. Si l'utilisateur est connecté, il
doit simplement se reconnecter afin que les changements soient pris en compte.
</p>

</body>
</subsection>
</section>

<section>
<title>Ré-étiqueter les systèmes de fichiers</title>
<subsection>
<body>

<p>
Vous devez vous placer dans le rôle <c>sysadm_r</c>.
</p>

<pre caption="Ré-étiqueter">
# <i>rlpkg -a</i>
</pre>

</body>
</subsection>
</section>

<section>
<title>Ré-étiqueter un paquet individuel</title>
<subsection>
<body>

<p>
En plus de pouvoir ré-étiqueter des systèmes de fichiers entiers, vous pouvez
aussi ré-étiqueter des paquets de Portage individuellement. Pour cela, vous
devez vous placer dans le rôle <c>sysadm_r</c>.
</p>

<pre caption="Exemple de rlpkg">
# <i>rlpkg shadow sash</i>
</pre>

<p>
On utilise le script rlpkg avec un nombre quelconque de noms de paquets comme
arguments.
</p>

</body>
</subsection>
</section>

<section>
<title>Chercher les bibliothèques qui utilisent les relocations de
textes</title>
<subsection>
<body>

<p>
SELinux contient des protections améliorées de la mémoire. Une des
fonctionnalités supportées et d'autoriser les relocations de textes ELF. Les
bibliothèques avec des relocations de textes ont une étiquette spéciale et
l'outil <c>rlpkg</c> possède une option pour rechercher ces bibliothèques.
</p>

<pre caption="Chercher les TEXTREL">
# <i>rlpkg -t</i>
</pre>

<p>
Cela sera également effectué après un ré-étiquetage complet.
</p>

</body>
</subsection>
</section>

<section>
<title>Démarrer les démons dans le bon domaine</title>
<subsection>
<body>

<p>
Contrôler les démons qui possèdent des scripts d'initialisation dans
<path>/etc/init.d</path> est très légèrement différent avec SELinux. La
commande <c>run_init</c> doit être utilisée pour lancer les scripts, afin de
s'assurer qu'ils soient exécutés dans le bon domaine. La commande est
identique, excepté qu'elle est préfixé par <c>run_init</c>. Vous devez être
dans le rôle <c>sysadm_r</c>.
</p>

<pre caption="Exemples d'utilisation de run_init">
# <i>run_init /etc/init.d/ntpd start</i>
# <i>run_init /etc/init.d/apache2 restart</i>
# <i>run_init /etc/init.d/named stop</i>
</pre>

</body>
</subsection>
<subsection>
<title>Intégration de run_init dans Gentoo</title>
<body>

<p>
<c>run_init</c> a été intégré dans le système de scripts d'initialisation de
Gentoo. Avec SELinux installé, les services peuvent être démarrés et arrêtés
comme d'habitude, sauf que maintenant ils authentifieront l'utilisateur.
</p>

<pre caption="Exemple avec run_init une fois intégré">
# <i>/etc/init.d/sshd restart</i>
Authenticating root.
Password:
 * Stopping sshd...                       [ ok ]
 * Starting sshd...                       [ ok ]
</pre>

</body>
</subsection>
</section>

<section>
<title>Basculer entre les modes enforcing et permissive</title>
<subsection>
<body>

<p>
Basculer entre les différents modes de SELinux est très simple. Envoyez 1 pour
enforcing ou 0 pour permissive au fichier <path>/selinux/enforce</path> pour
définir le mode. En lisant le contenu du fichier, vous obtiendrez le mode
courant. Si l'option du noyau «&nbsp;NSA SELinux Development Support&nbsp;» est
désactivée, le système sera toujours en mode enforcing et ne pourra pas être
passé en mode permissive.
</p>

<pre caption="Lire et régler le mode enforce">
<comment>(Lire le mode courant.)</comment>
# <i>cat /selinux/enforce</i>
<comment>(Passer en mode enforcing.)</comment>
# <i>echo 1 > /selinux/enforce</i>
<comment>(Passer en mode permissive.)</comment>
# <i>echo 0 > /selinux/enforce</i>
</pre>

<p>
Une machine dont le support du développement a été activé dans le noyau peut
être démarrée en mode enforcing en spécifiant l'option <c>enforcing=1</c> sur
la ligne de commande de démarrage du noyau dans le chargeur de démarrage (Grub,
LILO, etc.).
</p>

</body>
</subsection>
<subsection>
<title>Définir le mode au démarrage</title>
<body>

<p>
En sus des options du noyau mentionnées précédemment, le mode de démarrage peut
être défini dans le fichier <path>/etc/selinux/config</path>.
</p>

<pre caption="/etc/selinux/config">
# SELINUX can take one of these three values:
#       enforcing - SELinux security policy is enforced.
#       permissive - SELinux prints warnings instead of enforcing.
#       disabled - No SELinux policy is loaded.
SELINUX=<comment>permissive</comment>
</pre>

<p>
Le réglage défini dans ce fichier sera écrasé par la valeur donnée en argument
du noyau décrite précédemment.
</p>

</body>
</subsection>
</section>

<section>
<title>Comprendre le retour de la commande sestatus</title>
<subsection>
<body>

<p>
L'outil <c>sestatus</c> nous permet de récupérer des informations détaillées à
propos des spécificités de SELinux. L'option <c>-v</c> nous fournit des détails
supplémentaires à propos des contextes des processus et des fichiers. Le
résultat de la commande est divisé en quatre sections. Sestatus ne donne des
informations complètes qu'à un utilisateur connecté en root ou bien se trouvant
dans le rôle <c>sysadm_r</c>.
</p>

<pre caption="Exemple de rapport sestatus">
SELinux status:         enabled
SELinuxfs mount:        /selinux
Current mode:           enforcing
Policy version:         18
</pre>

<p>
Les informations principales du rapport sont fournies dans la première section.
La première ligne montre si les fonctions du noyau SELinux existent et sont
activées. Si le statut est désactivé (disabled), soit le noyau n'a pas le
support SELinux, soit la politique n'est pas chargée. La seconde ligne montre
le point de montage du système de fichiers SELinux. Lors d'une utilisation
normale, ce sera <c>/selinux</c>. La troisième ligne montre le mode SELinux
courant, soit enforcing, soit permissive. La quatrième ligne montre la version
de la base de données de la politique supportée par le noyau actuel.
</p>

<pre caption="Quelques booléens">
Policy booleans:
secure_mode             inactive
ssh_sysadm_login        inactive
user_ping               inactive
</pre>

<p>
La seconde section affiche l'état des booléens concernant la politique. La
colonne de gauche contient le nom du booléen et celle de droite son état&nbsp;:
active ou inactive. Cette section n'existe pas avec les noyaux en version 15.
</p>

<pre caption="Exemple de contextes de processus">
Process contexts:
Current context:        pebenito:sysadm_r:sysadm_t
Init context:           system_u:system_r:init_t
/sbin/agetty            system_u:system_r:getty_t
/usr/sbin/sshd          system_u:system_r:sshd_t
</pre>

<p>
La troisième section affiche les contextes des processus courants ainsi que de
quelques processus importants. Si un processus est exécuté dans un contexte
incorrect, il ne fonctionnera pas correctement.
</p>

<pre caption="Exemple de contextes de fichiers">
File contexts:
Controlling term:       pebenito:object_r:sysadm_devpts_t
/sbin/init              system_u:object_r:init_exec_t
/sbin/agetty            system_u:object_r:getty_exec_t
/bin/login              system_u:object_r:login_exec_t
/sbin/rc                system_u:object_r:initrc_exec_t
/sbin/runscript.sh      system_u:object_r:initrc_exec_t
/usr/sbin/sshd          system_u:object_r:sshd_exec_t
/sbin/unix_chkpwd       system_u:object_r:chkpwd_exec_t
/etc/passwd             system_u:object_r:etc_t
/etc/shadow             system_u:object_r:shadow_t
/bin/sh                 system_u:object_r:bin_t -> system_u:object_r:shell_exec_t
/bin/bash               system_u:object_r:shell_exec_t
/bin/sash               system_u:object_r:shell_exec_t
/usr/bin/newrole        system_u:object_r:newrole_exec_t
/lib/libc.so.6          system_u:object_r:lib_t -> system_u:object_r:shlib_t
/lib/ld-linux.so.2      system_u:object_r:lib_t -> system_u:object_r:shlib_t
</pre>

<p>
La quatrième section affiche les contextes du terminal contrôlant le processus
courant ainsi que de quelques fichiers importants. Pour les liens symboliques,
le contexte du lien ainsi que celui de la cible de celui-ci sont affichés. Si
un fichier a un contexte incorrect, le fichier peut être inaccessible ou
posséder des permissions incorrectes par rapport à un processus en particulier.
</p>

</body>
</subsection>
</section>
</sections>
