<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- Le contenu de ce document est sous licence CC-BY-SA. -->
<!-- Voir http://creativecommons.org/licenses/by-sa/1.0/deed.fr -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/fr/hardened/selinux/hb-selinux-overview.xml,v 1.1 2009/02/23 23:02:07 cam Exp $ -->

<sections>
<version>1.5</version>
<date>2008-05-16</date>

<!--
<section><title>Mandatory Access Control</title>
<subsection><body>
<p>
   Security Enhanced Linux is an implementation of mandatory access control
   (MAC) using type enforcement.  In Linux, the regular security permissions
   are a discretionary access control system (DAC).  In DAC, the permissions
   for a particular object, such as a file, are set at the discrection of the
   owner and can be changed at any time by the owner.  In MAC, the access a
   process or user has to an object is defined by the operating system
   security policy, and cannot be bypassed.
!!! still need to update other links in the handbook
</p>
</body></subsection>
</section>
-->   

<section>
<title>Les types SELinux</title>
<subsection>
<body>

<p>
Un type SELinux est un attribut de sécurité assigné à un objet (un fichier, un
port réseau, etc.). Le type d'un processus est communément appelé son domaine.
Une politique de sécurité SELinux est principalement constituée de règles pour
respecter les types, qui décrivent de quelles manières les domaines sont
autorisés à interagir avec les objets et avec les autres domaines. Un type est
généralement suffixé par «&nbsp;_t&nbsp;», par exemple&nbsp;: <c>sysadm_t</c>.
Le type est l'attribut le plus important pour un processus ou un objet, car la
plupart des décisions politiques se basent sur les types sources et cibles.
</p>

</body>
</subsection>
</section>

<section>
<title>Les rôles SELinux</title>
<subsection>
<body>

<p>
La sécurité fournie par SELinux tourne autour des types. Les rôles SELinux sont
donc différents de ce que l'on peut trouver dans un système de contrôle d'accès
basé sur les rôles (RBAC). Les différentes autorisations ne sont pas attribuées
aux rôles. Un rôle décrit l'ensemble des types dont un utilisateur peut se
servir. Par exemple, un administrateur qui utilise un système pour exécuter des
tâches d'utilisateur classique devrait être dans le rôle <c>staff_r</c>. S'il
veut procéder à une tâche d'administration système, il doit alors explicitement
basculer dans le rôle <c>sysadm_r</c>. En termes SELinux, la liste des domaines
dans lesquels un utilisateur peut se trouver dépend de son rôle. Si un rôle
n'est pas autorisé à avoir un certain domaine, une transition vers ce domaine
sera rejetée, même si la règle du type permet la transition de domaine. Un rôle
est généralement suffixé par un «&nbsp;_r&nbsp;», par exemple&nbsp;:
<c>system_r</c>.
</p>

</body>
</subsection>
</section>

<section>
<title>Les identités SELinux</title>
<subsection>
<title>Qu'est-ce qu'une identité SELinux&nbsp;?</title>
<body>

<p>
Une identité SELinux est similaire à un nom d'utilisateur Linux. Le changement
d'identité devrait être limité à certains cas spécifiques, car le contrôle
d'accès basé sur les rôles se repose sur l'identité SELinux. Donc, en général,
l'identité SELinux d'un utilisateur ne changera pas tout au long de sa session.
L'identifiant utilisateur de Linux peut être changé par set(e)uid, ce n'est
donc pas un identifiant approprié pour une identité SELinux. Si on attribue une
identité SELinux à un utilisateur, celle-ci doit correspondre au nom
d'utilisateur Linux. À chaque identité SELinux on attribue un ensemble de
rôles.
</p>

</body>
</subsection>

<subsection>
<title>Configurer la correspondance des identités SELinux</title>
<body>

<p>
Une politique SELinux contient plusieurs identités SELinux génériques qui
devraient convenir pour tous les utilisateurs. Cette correspondance n'a besoin
d'être configurée que lors d'une utilisation de la politique stricte. Vous
n'avez pas besoin de la configurer avec la politique ciblée, car l'identité par
défaut (user_u) est suffisante dans tous les cas.
</p>

<p>
Lorsqu'un utilisateur se connecte, l'identité SELinux est déterminée selon
cette correspondance.
</p>

<table>
<tr>
  <th>Identité SELinux</th>
  <th>Rôles</th>
  <th>Description</th>
</tr>
<tr>
  <ti>system_u</ti>
  <ti>system_r</ti>
  <ti>
    Pour les processus systèmes (non-interactifs). Ne devrait pas être
    attribuée à un utilisateur.
  </ti>
</tr>
<tr>
  <ti>user_u</ti>
  <ti>user_r</ti>
  <ti>Pour les utilisateurs sans privilège. La correspondance par défaut.</ti>
</tr>
<tr>
  <ti>staff_u</ti>
  <ti>staff_r, sysadm_r</ti>
  <ti>
    Pour les administrateurs systèmes qui se connectent également pour exécuter
    des tâches d'utilisateur normal.
  </ti>
</tr>
<tr>
  <ti>sysadm_u</ti>
  <ti>sysadm_r</ti>
  <ti>
    Pour les administrateurs systèmes qui ne font que se connecter pour
    exécuter des tâches administratives. Il est suggéré de ne pas utiliser
    cette identité.
  </ti>
</tr>
<tr>
  <ti>root</ti>
  <ti>staff_r, sysadm_r</ti>
  <ti>
    Identité spéciale pour root. Les autres utilisateurs devraient plutôt
    utiliser staff_u à la place.
  </ti>
</tr>
</table>

<p>
Pour savoir comment utiliser <c>semanage</c> afin de configurer vos
correspondances, lisez notre <uri
link="selinux-handbook.xml?part=3&amp;chap=2#doc_chap3">Guide pratique
SELinux</uri>.
</p>

</body>
</subsection>
</section>

<section>
<title>Les contextes SELinux</title>
<subsection>
<body>

<p>
L'utilisation des trois modèles de sécurité précédents ensemble s'appelle un
contexte SELinux et se note sous la forme&nbsp;:
<c>identité</c>:<c>rôle</c>:<c>type</c>. Le contexte SELinux est la valeur la
plus importante dans la décision d'un accès.
</p>

</body>
</subsection>
<subsection>
<title>Le contexte objet</title>
<body>

<p>
Un <c>ls -Z</c> typique peut renvoyer un résultat semblable à celui-ci&nbsp;:
</p>

<pre caption="Exemple de ls -Z">
drwxr-xr-x  root     root     system_u:object_r:bin_t          bin
drwxr-xr-x  root     root     system_u:object_r:boot_t         boot
drwxr-xr-x  root     root     system_u:object_r:device_t       dev
drwxr-xr-x  root     root     system_u:object_r:etc_t          etc
</pre>

<p>
Les trois premières colonnes décrivent les permissions, le nom d'utilisateur et
le nom de groupe, valeurs typiques de Linux. La quatrième colonne est le
contexte du fichier ou du répertoire. On donne le rôle générique
<c>object_r</c> aux objets. Des deux autres champs du contexte, on en déduit
que les fichiers ont l'identité système et qu'ils sont de types différents,
<c>bin_t</c>, <c>boot_t</c>, <c>device_t</c>, et <c>etc_t</c>.
</p>

</body>
</subsection>
<subsection>
<title>Le contexte processus</title>
<body>

<p>
Un <c>ps ax -Z</c> typique peut renvoyer ce genre de résultat&nbsp;:
</p>

<pre caption="Exemple de ps ax -Z">
  PID CONTEXT                                  COMMAND
    1 system_u:system_r:init_t                 [init]
    2 system_u:system_r:kernel_t               [keventd]
    3 system_u:system_r:kernel_t               [ksoftirqd_CPU0]
    4 system_u:system_r:kernel_t               [kswapd]
    5 system_u:system_r:kernel_t               [bdflush]
    6 system_u:system_r:kernel_t               [kupdated]
  706 system_u:system_r:syslogd_t              [syslog-ng]
  712 system_u:system_r:httpd_t                [apache]
  791 system_u:system_r:sshd_t                 [sshd]
  814 system_u:system_r:crond_t                [cron]
  826 system_u:system_r:getty_t                [agetty]
  827 system_u:system_r:getty_t                [agetty]
  828 system_u:system_r:getty_t                [agetty]
  829 system_u:system_r:getty_t                [agetty]
  830 system_u:system_r:getty_t                [agetty]
  831 system_u:system_r:httpd_t                [apache]
  832 system_u:system_r:httpd_t                [apache]
  833 system_u:system_r:httpd_t                [apache]
23093 system_u:system_r:sshd_t                 [sshd]
23095 user_u:user_r:user_t                     [bash]
23124 system_u:system_r:sshd_t                 [sshd]
23126 user_u:user_r:user_t                     [bash]
23198 system_u:system_r:sshd_t                 [sshd]
23204 user_u:user_r:user_t                     [bash]
23274 system_u:system_r:sshd_t                 [sshd]
23275 pebenito:staff_r:staff_t                 [bash]
23290 pebenito:staff_r:staff_t                 ps ax -Z
</pre>

<p>
Dans cet exemple, le contexte de chaque processus est affiché en plus des
informations typiques. Si on examine cette liste, on remarque que tous les
processus du noyau et les démons tournent sous l'identité <c>system_u</c> et
avec le rôle <c>system_r</c>. Les domaines individuels dépendent du programme.
On note plusieurs utilisateurs connectés en SSH, sous l'identité générique
<c>user_u</c>. Enfin, un utilisateur, portant l'identité <c>pebenito</c>, est
connecté avec le rôle <c>staff_r</c> et se trouve dans le domaine
<c>staff_t</c>.
</p>

</body>
</subsection>
</section>

<section>
<title>Les fichiers de politiques de SELinux</title>
<subsection>
<body>

<p>
Les fichiers sources des politiques de SELinux ne sont plus installés sur le
système. Dans les répertoires <c>/usr/share/selinux/{strict,targeted}</c>, vous
trouverez une série de paquets de politiques et d'en-têtes afin de construire
des modules locaux. Les fichiers de politiques sont traités par m4, puis le
compilateur de politique <c>checkmodule</c> vérifie qu'il n'y ait pas d'erreur
de syntaxe avant de créer un module de politique. Ensuite, un paquet de
politique est créé avec la commande <c>semodule_package</c> en utilisant le
module de politique et les contextes de fichiers du module. La politique, une
fois empaquetée, peut alors être chargée dans un noyau SELinux en l'insérant
dans le magasin de modules.
</p>

</body>
</subsection>
<subsection>
<title>*.pp</title>
<body>

<p>
Les paquets de politiques pour cette politique. Ils doivent être insérés dans
le magasin de modules afin d'être chargés dans la politique. Dans le paquet, se
trouve un module de politique chargeable et éventuellement un fichier de
contexte de fichier.
</p>

</body>
</subsection>
<subsection>
<title>include/</title>
<body>

<p>
Les en-têtes de politiques pour cette politique.
</p>

</body>
</subsection>
</section>

<section>
<title>Les versions de politiques binaires</title>
<subsection>
<body>

<p>
Lors d'une compilation de politique, le fichier binaire résultant contient un
numéro de version. La première version qui a été introduite dans le noyau Linux
a été la version 15. Le numéro de version n'est en général incrémenté que
lorsqu'une nouvelle fonctionnalité ajoutée nécessite des changements de
structure de la politique compilée binaire. Par exemple, dans Linux 2.6.5, des
extensions concernant les politiques conditionnelles ont été ajoutées. Le
numéro de version des politiques résultantes a été incrémenté à 16.
</p>

</body>
</subsection>
<subsection>
<title>Quelle est la version de politique de mon noyau&nbsp;?</title>
<body>

<p>
La version de politique d'un noyau peut se déterminer à l'aide des outils
<c>sestatus</c> ou <c>policyvers</c>. Les noyaux actuels peuvent charger une
politique d'une version antécédente, par exemple un noyau en version 17 peut
aussi charger les politiques en version 16. Cependant, cette compatibilité
pourra être supprimée à l'avenir.
</p>

<note>
L'infrastructure de gestion des politiques (libsemanage) créera et utilisera
automatiquement la bonne version de la politique. Aucune étape supplémentaire
n'est requise.
</note>

</body>
</subsection>
<subsection>
<title>Versions de politiques</title>
<body>

<p>
La table suivante indique l'historique des versions de politiques selon la
version de Linux 2.6.
</p>

<table>
<tr>
  <th>Version</th>
  <th>Description</th>
  <th>Versions de Linux</th>
</tr>
<tr>
  <ti>12</ti>
  <ti>SELinux «&nbsp;Vieille API&nbsp;» (obsolète)</ti>
</tr>
<tr>
  <ti>15</ti>
  <ti>SELinux «&nbsp;nouvelle API&nbsp;» intégrée dans 2.6</ti>
  <ti>2.6.0 - 2.6.4</ti>
</tr>
<tr>
  <ti>16</ti>
  <ti>Ajout d'extensions permettant les politiques conditionnelles</ti>
  <ti>2.6.5</ti>
</tr>
<tr>
  <ti>17</ti>
  <ti>Ajout du support IPv6</ti>
  <ti>2.6.6 - 2.6.7</ti>
</tr>
<tr>
  <ti>18</ti>
  <ti>Amélioration du support des sockets Netlink</ti>
  <ti>2.6.8 - 2.6.11</ti>
</tr>
<tr>
  <ti>19</ti>
  <ti>Amélioration de la sécurité multi-niveaux</ti>
  <ti>2.6.12 - 2.6.13</ti>
</tr>
<tr>
  <ti>20</ti>
  <ti>Optimisation de la taille des tables de vecteurs d'accès</ti>
  <ti>2.6.14 - 2.6.18</ti>
</tr>
<tr>
  <ti>21</ti>
  <ti>Classes d'objets</ti>
  <ti>2.6.19 - 2.6.24</ti>
</tr>
<tr>
  <ti>22</ti>
  <ti>Fonctionnalités des politiques</ti>
  <ti>Depuis 2.6.25</ti>
</tr>
</table>

</body>
</subsection>
</section>

<section>
<title>Les extensions de politique conditionnelle</title>
<subsection>
<body>

<p>
Les extensions de politique conditionnelle permettent l'activation et la
désactivation de règles à la volée, sans besoin de recharger une politique
modifiée. En utilisant les booléens et les expressions de politique, les règles
peuvent être appliquées conditionnellement.
</p>

</body>
</subsection>
<subsection>
<title>Afficher les valeurs des booléens</title>
<body>

<p>
L'état des booléens de la politique courante peut être déterminé de deux
façons. Premièrement, en utilisant <c>sestatus</c>&nbsp;:
</p>

<pre caption="Exemple de résultat de sestatus">
# <i>sestatus</i>
SELinux status:         enabled
SELinuxfs mount:        /selinux
Current mode:           enforcing
Policy version:         17
 
Policy booleans:
user_ping               inactive
</pre>

<p>
La deuxième méthode est l'utilisation de <c>getsebool</c>, un outil simple qui
affiche l'état courant et l'état en attente (pending) des booléens.
</p>

<pre caption="Exemple de résultat de getsebool">
# <i>getsebool -a</i>
user_ping --> active: 0 pending: 0
</pre>

</body>
</subsection>
<subsection>
<title>Modifier un booléen</title>
<body>

<p>
La valeur d'un booléen peut être inversée en utilisant la commande
<c>togglesebool</c>. On peut spécifier plusieurs booléens sur la ligne de
commande. La nouvelle valeur des booléens sera affichée en retour.
</p>

<pre caption="Exemple d'utilisation de togglesebool">
# <i>togglesebool user_ping</i>
user_ping: active
</pre>

<p>
La valeur d'un booléen peut également être définie explicitement avec
<c>setsebool</c>.
</p>

<pre caption="Exemple d'utilisation de setsebool">
# <i>setsebool user_ping 0</i>
</pre>

<p>
Pour définir la valeur d'un booléen et en faire sa valeur par défaut, utilisez
l'option <c>-P</c>.
</p>

<pre caption="Changer la valeur par défaut">
# <i>setsebool -P user_ping 1</i>
</pre>

</body>
</subsection>
</section>

<section>
<title>Les messages du noyau concernant la politique</title>
<subsection>
<body>

<p>
Lorsque le système tourne, un programme ou un utilisateur peut tenter de faire
quelque chose qui viole la politique de sécurité. Si le système respecte la
politique (mode <e>enforcing</e>), l'accès sera refusé et un message sera
envoyé dans le journal du noyau. Si le système est en mode <e>permissive</e>,
l'accès sera autorisé mais il y aura tout de même un message envoyé au journal
du noyau.
</p>

</body>
</subsection>
<subsection>
<title>Les messages de l'AVC</title>
<body>

<p>
La plupart des messages du noyau provenant de SELinux viennent du cache de
vecteurs d'accès (AVC pour Access Vector Cache). Comprendre les refus d'accès
est important pour déterminer si une attaque est en cours ou bien si le
programme demande un accès non prévu. Voici un exemple de refus d'accès&nbsp;:
</p>

<pre caption="Exemple de message de l'AVC">
avc:  denied  { read write } for  pid=3392 exe=/bin/mount dev=03:03 ino=65554
scontext=pebenito:sysadm_r:mount_t tcontext=system_u:object_r:tmp_t tclass=file
</pre>

<p>
Bien que la plupart des messages de l'AVC soient des refus d'accès, il peut
aussi de temps en temps y avoir des messages d'audit à propos d'accès
autorisés&nbsp;:
</p>

<pre caption="Un autre exemple de message de l'AVC">
avc:  granted  { load_policy } for  pid=3385 exe=/usr/sbin/load_policy
scontext=pebenito:sysadm_r:load_policy_t tcontext=system_u:object_r:security_t tclass=security
</pre>

<p>
Dans ce cas-ci, la demande de charger la politique a été autorisée. C'est un
évènement de sécurité critique et est donc toujours audité. Un autre évènement
toujours audité est le passage du mode <e>enforcing</e> vers <e>permissive</e>
et inversement.
</p>

<p>
SELinux n'enregistrera pas les refus d'accès dans le journal s'il y en a trop à
la fois. Cela ne veut pas forcément dire qu'une attaque est en cours. Un
programme peut par exemple être en train d'exécuter un stat() sur les fichiers
présents dans <path>/dev/</path>. SELinux limite le nombre de messages afin de
minimiser les risques de saturation du journal&nbsp;:
</p>

<pre caption="Un dernier exemple de message de l'AVC">
AVC: 12 messages suppressed.
</pre>

<p>
Si le comportement du programme est normal et que ces accès doivent bien être
refusés, la politique doit alors être modifiée afin de ne pas auditer ces
accès.
</p>

</body>
</subsection>
<subsection>
<title>Autres messages du noyau</title>
<body>

<pre caption="inode_doinit_with_dentry">
inode_doinit_with_dentry:  context_to_sid(system_u:object_r:bar_t) returned 22 for dev=hda3 ino=517610
</pre>

<p>
Cela signifie que le fichier se trouvant sur /dev/hda3 et ayant le numéro
d'inode 517610 a le contexte system_u:object_r:bar_t, qui est invalide. Les
objets qui ont un contexte invalide sont traités comme s'ils avaient le
contexte system_u:object_r:unlabeled_t.
</p>

</body>
</subsection>
</section>

<section>
<title>Autopsie d'un refus d'accès</title>
<subsection>
<body>

<p>
Les refus d'accès contiennent une quantité variable d'information, selon le
type d'accès.
</p>

<pre caption="Exemples de refus d'accès">
avc:  denied  { lock } for  pid=28341 exe=/sbin/agetty path=/var/log/wtmp dev=03:03 ino=475406
scontext=system_u:system_r:getty_t tcontext=system_u:object_r:var_log_t tclass=file

avc:  denied  { create } for  pid=20909 exe=/bin/ls scontext=pebenito:sysadm_r:mkinitrd_t
tcontext=pebenito:sysadm_r:mkinitrd_t tclass=unix_stream_socket

avc:  denied  { setuid } for  pid=3170 exe=/usr/bin/ntpd capability=7
scontext=system_u:system_r:ntpd_t tcontext=system_u:system_r:ntpd_t tclass=capability
</pre>

<p>
Les refus d'accès concernent généralement l'accès à un fichier. Pour mieux
comprendre, décortiquons ici le premier message&nbsp;:
</p>

<table>
<tr>
  <th>Extrait</th>
  <th>Explication</th>
</tr>
<tr>
  <ti>avc:  denied</ti>
  <ti>SELinux a refusé l'accès.</ti>
</tr>
<tr>
  <ti>{ lock }</ti>
  <ti>La tentative d'accès est de type «&nbsp;lock&nbsp;» (verrou).</ti>
</tr>
<tr>
  <ti>pid=28341</ti>
  <ti>L'identifiant du processus est 28341.</ti>
</tr>
<tr>
  <ti>exec=/sbin/agetty</ti>
  <ti>Le chemin complet du processus exécutable est /sbin/agetty.</ti>
</tr>
<tr>
  <ti>path=/var/log/wtmp</ti>
  <ti>
    Le chemin complet de l'objet cible est /var/log/wtmp. Notez que le chemin
    complet n'est pas toujours disponible.
  </ti>
</tr>
<tr>
  <ti>dev=03:03</ti>
  <ti>
    L'objet cible réside sur le périphérique 03:03 (numéros majeur:mineur). Le
    noyau 2.6 peut procéder à une résolution de nom, hda3 ici.
  </ti>
</tr>
<tr>
  <ti>ino=475406</ti>
  <ti>Le numéro d'inode de la cible est 475406.</ti>
</tr>
<tr>
  <ti>scontext=system_u:system_r:getty_t</ti>
  <ti>Le contexte du programme est system_u:system_r:getty_t.</ti>
</tr>
<tr>
  <ti>tcontext=system_u:object_r:var_log_t</ti>
  <ti>Le contexte de l'objet cible est system_u:object_r:var_log_t.</ti>
</tr>
<tr>
  <ti>tclass=file</ti>
  <ti>L'objet cible est un fichier normal.</ti>
</tr>
</table>

<p>
Tous les messages de l'AVC n'ont pas forcément tous ces champs, comme notamment
les deux exemples suivants. Les champs présents varient en fonction de la
classe de l'objet cible. Cependant, les champs les plus importants (le type
d'accès, les contextes source et cible et l'objet cible) seront toujours
affichés dans un message de l'AVC.
</p>

</body>
</subsection>
<subsection>
<title>Comprendre le refus d'accès</title>
<body>

<p>
Les messages de refus d'accès sont parfois trompeurs car ils peuvent être
envoyés pour plusieurs raisons. Pour comprendre ce qu'il se passe, il faut
connaitre le comportement du programme et savoir correctement interpréter les
messages de refus d'accès. La cible n'est pas forcément un fichier, mais peut
aussi être une socket réseau, une communication interprocessus, etc.
</p>

<p>
Dans l'exemple précédent, <c>agetty</c> se voit refuser le droit de poser un
verrou sur un fichier. Le type du fichier est var_log_t, ce qui implique que le
fichier cible se trouve dans <path>/var/log/</path>. Grâce aux informations
supplémentaires fournies par le champ path= du message de refus d'accès, on
confirme que le fichier est <path>/var/log/wtmp</path>. Si l'information du
chemin complet n'avait pas été disponible, on aurait pu trouver le fichier avec
le numéro d'inode. <path>wtmp</path> est un fichier qui contient des
informations à propos des utilisateurs actuellement connectés au système et
<c>agetty</c> gère justement les connexions depuis un tty. On peut donc en
conclure que c'est un comportement normal de la part d'<c>agetty</c> de vouloir
mettre à jour <path>wtmp</path>. Cependant, pourquoi cet accès est-il
refusé&nbsp;? Y aurait-il une anomalie dans la politique qui empêcherait
<c>agetty</c> de mettre à jour <path>wtmp</path>&nbsp;? En réalité, c'est
<path>wtmp</path> qui a un mauvais contexte. Cela devrait être
system_u:object_r:wtmp_t et non pas system_u:object_r:var_log_t.
</p>

<p>
Si cette demande d'accès n'avait pas été bien comprise, l'administrateur aurait
pu faire l'erreur d'autoriser les accès en lecture/écriture de getty_t vers les
fichiers var_log_t, ce qui aurait été incorrect, puisqu'<c>agetty</c> n'a
besoin que de modifier <path>/var/log/wtmp</path>. Cet exemple souligne à quel
point il est important de garder les contextes des fichiers dans un état
cohérent.
</p>

</body>
</subsection>
</section>

<section>
<title>Références</title>
<subsection>
<body>

<p>
Le site de <uri link="http://www.nsa.gov/selinux/">SELinux</uri> et le fichier
README de SELinux.
</p>

</body>
</subsection>
</section>
</sections>
