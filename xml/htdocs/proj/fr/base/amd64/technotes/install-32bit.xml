<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/fr/base/amd64/technotes/install-32bit.xml,v 1.1 2005/03/28 13:10:23 neysx Exp $ -->
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The context of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommonds.org/licenses/by-sa/1.0 -->

<sections>

<section>
<title>Lancer des programmes 32&nbsp;bits</title>
<body>

<impo>
VOUS DEVEZ AVOIR ACTIVÉ L'ÉMULATION IA32 («&nbsp;IA32 Emulation&nbsp;») DANS LA
SECTION «&nbsp;Executable File Formats&nbsp;» DE VOTRE NOYAU&nbsp;!
</impo>

<p>
De nombreux changements sont en cours actuellement et le meilleur moyen de
mettre en place un environnement 32&nbsp;bits est d'installer les bibliothèques
d'émulation.
</p>

<pre>
# <i>emerge app-emulation/emul-linux-x86-baselibs</i>
# <i>emerge app-emulation/emul-linux-x86-xlibs</i>
# <i>emerge app-emulation/emul-linux-x86-gtklibs</i>
# <i>emerge app-emulation/emul-linux-x86-qtlibs</i>
</pre>

<p>
L'installation va créer un répertoire <path>/emul/linux/x86</path> et y
installer la plupart des bibliothèques dont vous devriez avoir besoin pour
lancer des applications précompilées 32&nbsp;bits. Des liens symboliques seront
également créés, comme <path>/lib32</path> et <path>/usr/lib32</path>, qui
pointeront vers les bons répertoires dans <path>/emul</path>. Enfin, un lien
symbolique de <path>/lib/ld-linux.so.2</path> vers
<path>/emul/linux/x86/lib/ld-linux.so.2</path> sera créé, puisque la variante
64&nbsp;bits s'appelle, elle, <path>ld-linux-x86-64.so.2</path>.
</p>

<p>
Une fois ces trois paquets installés, vous devriez pouvoir lancer la plupart des
applications 32&nbsp;bits précompilées (comme, par exemple, Java, Oracle 9i ou
Opera).
</p>

</body>
</section>
<section>
<title>Compiler des applications 32&nbsp;bits dans un environnement 64&nbsp;bits
(en utilisant multilib)</title>
<body>

<p>
Vous devez tout d'abord disposer d'un environnement 32&nbsp;bits en état de
fonctionnement, comme nous l'avons décrit dans la section précédente. Ensuite,
vous devez ajouter <c>multilib</c> dans vos paramètres USE dans
<path>/etc/make.conf</path> et installer (ou réinstaller)
<path>gcc-3.3.3-r5</path>. Cela construira GCC avec le support multilib, qui
vous permettra de créer des binaires 32&nbsp;bits en utilisant le paramètre
CFLAGS <c>-m32</c>. Les compilations 64&nbsp;bits ne sont pas affectées par le
support de multilib. (Vous pouvez néanmoins, si vous voulez être sûr de vous,
pour une raison quelconque, utiliser <c>-m64</c>.)
</p>

<note>
Nous recommandons fortement à nos utilisateurs de <e>ne jamais ajouter</e>
<c>-m32</c> dans leur <path>/etc/make.conf</path> et de ne pas utiliser
<c>-m32</c> avec Portage. Nous recommandons de ne faire des compilations
32&nbsp;bits qu'à la main et non en utilisant le système de Portage. Ne pas
tenir compte de cette remarque pourrait fortement endommager la structure de
dépendances de Portage. Ne nous demandez pas de corriger cela, ce sera votre
faute si cela ne fonctionne plus.
</note>

</body>
</section>
<section>
<title>Créer un environnement 32&nbsp;bits chrooté</title>
<body>

<p>
Grâce à l'installation des bibliothèques d'émulation 32&nbsp;bits, il est
possible de lancer la plupart des applications 32&nbsp;bits dans un
environnement 64&nbsp;bits. Cependant, il n'est pas facile de compiler de
nouvelles applications ou d'installer des nouvelles bibliothèques 32&nbsp;bits.
Cela peut rendre difficile l'utilisation d'applications comme Wine ou le
plugin Netscape Flash pour Mozilla. Une installation 32&nbsp;bits chrootée
vous permettra d'utiliser votre gestionnaire de paquets favori pour
installer des applications et des bibliothèques 32&nbsp;bits. Cela signifie
également que vous pouvez alors optimiser les paquets comme vous l'entendez. Les
bibliothèques d'émulation sont compilées avec seulement quelques optimisations
mineures parce qu'elles sont également utilisées sur la plate-forme IA64. Un
contre-coup majeur est l'espace disque utilisé. Toutes les applications et les
bibliothèques seront installées en double.
</p>

<p>
Pour mettre en place un environnement 32&nbsp;bits chrooté, vous devez tout
d'abord créer un répertoire (ou une partition) dans laquelle vous placerez votre
chroot. Ensuite, décompressez-y l'archive d'installation pour x86 (n'utilisez
pas l'archive pour AMD64) et montez-y <path>/proc</path>. Ensuite, vous devez
entrer dans le chroot. Cela se fait de la même manière que dans le manuel, sauf
que vous devrez utiliser le programme «&nbsp;linux32&nbsp;» pour changer
«&nbsp;uname -m&nbsp;» en «&nbsp;i686&nbsp;». Lancez donc cette commande&nbsp;:
</p>

<pre>
# <i>linux32 chroot /mnt/gentoo32 /bin/bash</i>
</pre>

<p>
Vous êtes désormais dans le chroot et «&nbsp;uname -m&nbsp;» devrait vous donner
la valeur «&nbsp;i686&nbsp;». Dans le fichier <path>make.conf</path>, vous
pouvez utiliser, par exemple, ces paramètres&nbsp;:
</p>

<pre>
CHOST="i686-pc-linux-gnu"
CFLAGS="-O2 -march=athlon-xp -msse2 -msse -pipe"
ACCEPT_KEYWORDS="~x86"
</pre>

<p>
Une fois que gcc-3.4 sera installé, vous devriez pouvoir utiliser le paramètre
-march=k8 pour utiliser les optimisations pour AMD64, mais il n'est pas spécifié
dans le ChangeLog si ce paramètre est disponible également pour les compilations
32&nbsp;bits.
</p>

<p>
Continuez l'installation comme indiquée dans le manuel. Vous pouvez sauter la
plupart des étapes après le stage3. Vous n'avez pas besoin de mettre en place un
second noyau, un second système de journalisation ou d'événements. Mais vous
devrez mettre en place les utilisateurs et les fichiers hosts et resolv.conf.
Votre chroot 32&nbsp;bits sera alors prêt à l'emploi. Cela dit, vous ne pourrez
pas utiliser de manière correcte les applications reposant sur le serveur X pour
le moment.
</p>

<p>
Les applications clientes du serveur X utilisent des sockets Unix pour
communiquer avec le serveur X. Ces sockets sont des fichiers présents dans /tmp,
mais le serveur X fonctionne en dehors du chroot. Cela signifie que les
applications clientes dans le chroot ne peuvent pas accéder aux sockets Unix. Il
y a deux moyens de contourner ce problème. Vous pouvez utiliser un socket TCP,
mais ça ne donnera pas un résultat convenable niveau vitesse d'exécution. La
meilleure solution est de monter /tmp dans le chroot. Cela peut se faire ainsi
(à faire en dehors du chroot)&nbsp;:
</p>

<pre>
# <i>mount -o bind /tmp /mnt/gentoo32/tmp</i>
</pre>

<p>
Évidemment, vous devrez lancer <c>xhost local:localhost</c> avant de pouvoir
vous connecter au serveur X à l'intérieur du chroot. Il est également possible
de monter plus de répertoires de la même manière, pour économiser l'espace
disque. De bons candidats seraient <path>/home</path>,
<path>/usr/portage/distfiles</path> et <path>/usr/share</path>.
</p>

<p>
Pour rentrer dans le chroot, utilisez la commande suivante pour mettre en place
les variables d'environnement correctement&nbsp;:
</p>

<pre>
# <i>linux32 chroot /mnt/gentoo32 /bin/bash --login</i>
</pre>

</body>
</section>

</sections>
