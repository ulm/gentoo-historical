<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/ja/hardened/selinux/Attic/hb-install-x86-kernel.xml,v 1.2 2005/04/27 15:31:36 idani Exp $ -->

<!-- Original revision: 1.5 -->
<!-- Translator: kobayashi -->

<sections>
<section>
<title>タイムゾーン</title>
<body>

<p>
最初にタイムゾーンを選択する必要があります。そうするとシステムがどの地域に置かれているかがわかります。
自分のタイムゾーンを<path>/usr/share/zoneinfo</path>から探して、<c>ln</c>を使って<path>/etc/localtime</path>にリンクを張ってください。
</p>

<pre caption="タイムゾーン情報を設定する">
# <i>ls /usr/share/zoneinfo</i>
<comment>(GMTを使うとして)</comment>
# <i>ln -sf /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>ソースをインストールする</title>
<subsection>
<title>カーネルを選択する</title>
<body>

<p>
全ディストリビューションの構成の核をなすのは、Linuxカーネルです。
カーネルはユーザープログラムとシステムハードウェアの間の階層です。
Gentooではユーザーに選択できる色々なカーネルソースを提供しています。
説明付の全リストは<uri link="/doc/en/gentoo-kernel.xml">Gentoo Kernel Guide</uri><uri link="/doc/ja/gentoo-kernel.xml">(日本語訳)</uri>で見られます。
2.6カーネルのみがサポートされており、hardened-sourcesが推奨されています。
</p>

<!--
<p>
If you are performing a network-less install your kernel choices will be limited
to those provided on the CD. For the 2004.2 release those are:
</p>

<ul>
  <li>gentoo-sources</li>
  <li>vanilla-sources</li>
  <li>gentoo-dev-sources</li>
  <li>development-sources</li>
</ul>
-->
<p>
カーネルソースを選んで、<c>emerge</c>を使ってインストールしてください。
</p>

<pre caption="カーネルソースをインストールする">
# <i>emerge hardened-sources</i>
</pre>

<p>
<path>/usr/src</path>の中を見ると、選択したカーネルソースを指す<path>linux</path>と呼ばれるシンボリックリンクが見られるでしょう。
</p>

<pre caption="カーネルソースへのシンボリックリンクを見る">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root     root           12 Oct 13 11:04 /usr/src/linux -&gt; linux-2.6.7-hardened-r6
</pre>

<p>
もしシンボリックリンクが選択したカーネルソースを指していなければ、正しいカーネルソースにシンボリックリンクを変更しなければなりません。
</p>

<pre caption="カーネルソースへのシンボリックリンクを変更する">
# <i>rm /usr/src/linux</i>
# <i>cd /usr/src</i>
# <i>ln -s linux-2.6.7-hardened-r6 linux</i>
</pre>

<p>
さあカーネルソースを設定して、コンパイルするときが来ました。<!-- You 
can use <c>genkernel</c> for this, which will build a generic kernel as used 
by the LiveCD. We explain the "manual" configuration first though, as it is 
the best way to optimize your environment.
</p>

<p>
If you want to manually configure your kernel, continue now with <uri
link="#manual">Default: Manual Configuration</uri>. If you want to use 
<c>genkernel</c> you should read <uri link="#genkernel">Alternative: Using 
genkernel</uri> instead. -->
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>一般的な選択: 手動設定</title>
<subsection>
<title>はじめに</title>
<body>

<p>
カーネルの手動設定はLinuxユーザがこれまでに実行しなければならない手続きの中で最も難しい手続きとしばしば見なされています。何もそれほど真実ではありません。2、3のカーネル設定の後では、難しかったことすら思い出せないでしょう。;)
</p>

<p>
しかし、一つ<e>だけは</e>本当です。手動でカーネルの設定を始めるときに自分のシステムを判ってなければなりません。ほとんどの情報は<path>/proc/pci</path>の内容を見ることで(もしくは有効であれば<c>lspci</c>を使って)集められます。
LiveCDではどんなカーネルモジュールを使っているかを見るために<c>lsmod</c>を実行することもできます(これはどんな機能が利用可能かの良いヒントを与えてくれるかも知れません)。
</p>

<p>
それではカーネルソースのディレクトリに行って、<c>make menuconfig</c>を実行しましょう。
これでncursesベースの設定メニューが立ち上がります。
</p>

<pre caption="menuconfigを実行する">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
いくつかの設定項目が出てきます。
最初に有効にしなければならないいくつかのオプションをリストアップしましょう(そうしなければGentooは機能しないか、特別な調整無しではうまく機能しないでしょう)。
</p>

</body>
</subsection>
<subsection>
<title>必要なオプションを有効にする</title>
<body>

<p>
まず最初に、必要なSELinuxのオプションを有効にします。
</p>

<pre caption="menuconfigでの位置と必要なオプション">
<comment>"Code maturity level options"にある</comment>
[*] Prompt for development and/or incomplete code/drivers

<comment>"General setup"にある</comment>
[*] Auditing support

<comment>"File systems"にある</comment>
&lt;*&gt; Second extended fs support <comment>(ext2を使用しているなら)</comment>
[*]   Ext2 extended attributes
[ ]     Ext2 POSIX Access Control Lists
[*]     Ext2 Security Labels
&lt;*&gt; Ext3 journalling file system support <comment>(ext3を使用しているなら)</comment>
[*]   Ext3 extended attributes
[ ]     Ext3 POSIX Access Control Lists
[*]     Ext3 security labels
&lt;*&gt; JFS filesystem support <comment>(JFSを使用しているなら)</comment>
[ ]   JFS POSIX Access Control Lists
[*]   JFS Security Labels
[ ]   JFS debugging
[ ]   JFS statistics
&lt;*&gt; XFS filesystem support <comment>(XFSを使用しているなら)</comment>
[ ]   Realtime support (EXPERIMENTAL)
[ ]   Quota support
[ ]   ACL support
[*]   Security Labels

[*] /proc file system support
[ ] /dev file system support (EXPERIMENTAL)
[*] /dev/pts file system for Unix98 PTYs <comment>(このオプションは2.6では表示されず、常に有効になります)</comment>
[*]   /dev/pts Extended Attributes
[*]     /dev/pts Security Labels    
[*] Virtual memory file system support (former shm fs)
[*]   tmpfs Extended Attributes
[*]     tmpfs Security Labels

<comment>"Security options"にある</comment>
[*] Enable different security models
[*] Socket and Networking Security Hooks
&lt;*&gt; Capabilities Support
[*] NSA SELinux Support
[ ]   NSA SELinux boot parameter
[ ]   NSA SELinux runtime disable
[*]   NSA SELinux Development Support
[ ]   NSA SELinux AVC Statistics
[ ]   NSA SELinux MLS policy (EXPERIMENTAL)
</pre>

<p>
拡張属性のsecurity labelsはdevptsと使用しているファイルシステムで有効にしなければなりません。
devfsはこれ以上SELinuxで使用できないので、無効にするべきです。
全てのオプションが古い2.6カーネルにあるわけではありません。
例えば、Auditing supportやruntime disableといったオプションがそれに当たります。
</p>

<note>
利用可能なオプションは使用してるカーネルのバージョンによって少し変わるかもしれません。
他の拡張属性オプションは無効にするべきです。
</note>

<warn>
SELinux MLS policyオプションを有効にしないでください。
それはサポートされておらず、マシンが起動しなくなってしまうでしょう。
</warn>

<p>
正しいプロセッサファミリーでカーネルをコンパイルしてるか確認してください。
</p>

<pre caption="正しいプロセッサファミリーを選択する">
Processor type and features ---&gt;
  <comment>(システムによって変更します)</comment>
  (<i>Athlon/Duron/K7</i>) Processor family
</pre>

<p>
もしBIOSが大容量のハードディスクに未対応で、上限サイズを知らせるようハードディスクドライブをジャンパーしていれば、ハードディスクの全領域にアクセスできるように次のオプションを有効にしなければなりません。
</p>

<pre caption="autogeometry resizing supportを選択する">
<comment>(2.4.xカーネルのみ)</comment>
ATA/IDE/MFM/RLL support ---&gt;
  IDE, ATA and ATAPI Block devices ---&gt;
    &lt;*&gt;   Include IDE/ATA-2 DISK support
    [ ]     Use multi-mode by default
    [*]     Auto-Geometry Resizing support
</pre>

<p>
もしインターネット接続にPPPoEを使っていたり、モデムでダイアルアップしているなら、カーネル内の以下のオプションが必要になります。
</p>

<pre caption="PPPoEに必要なドライバーを選択する">
<comment>(2.4.xカーネル用)</comment>
Network device support ---&gt;
  &lt;*&gt; PPP (point-to-point protocol) support
  &lt;*&gt;   PPP support for async serial ports
  &lt;*&gt;   PPP support for sync tty ports

<comment>(2.6.xカーネル用)</comment>
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
2つの圧縮オプションは差し支えは無いけれども、絶対に必要でもありません。
<c>PPP over Ethernet</c>オプションもそうです。
これはカーネルモードのPPPoEをするために設定されたときだけに<c>rp-pppoe</c>に使用されるものです。
</p>

<p>
もしPPPoEを使用する必要があるなら、カーネルにイーサネットカード用のサポートを含めることを忘れないでください。
</p>

<p>
もしハイパースレッディング(tm)に対応したインテルCPUか、マルチCPUのシステムがあるなら、"Symmetric multi-processing support"を有効にしなければなりません。
</p>

<pre caption="SMPサポートを有効にする">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<p>
カーネルの設定が終れば、<uri link="#compiling">コンパイルとインストール</uri>に進んでください。
</p>

</body>
</subsection>
<subsection id="compiling">
<title>コンパイルとインストール</title>
<body>

<p>
これでカーネルの設定がされたので、コンパイルとインストールするときが来ました。設定を抜けて、<c>make dep &amp;&amp; make bzImage modules modules_install</c>を実行してください。
</p>

<pre caption="カーネルをコンパイルする">
<comment>(2.4カーネル用)</comment>
# <i>make dep &amp;&amp; make bzImage modules modules_install</i>

<comment>(2.6カーネル用)</comment>
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
カーネルのコンパイルが終れば、カーネルイメージを<path>/boot</path>にコピーしてください。
ここから先は、インストールしたカーネルは<c>gentoo-sources</c>の2.4.26バージョンと仮定します。
自分が選択したカーネルに適していると感じる名前を好きなように付けてください。
また、ブートローダーの設定をするときに、その名前が必要になるので覚えておいてください。
</p>

<pre caption="カーネルをインストールする">
# <i>cp arch/i386/boot/bzImage /boot/kernel-2.4.26-gentoo-r6</i>
# <i>cp System.map /boot/System.map-2.4.26-gentoo-r6</i>
</pre>

<p>
万が一のためにカーネルの設定ファイルも<path>/boot</path>にコピーしておくのも賢明です。:)
</p>

<pre caption="カーネル設定をバックアップする">
# <i>cp .config /boot/config-2.4.26-gentoo-r6</i>
</pre>

</body>
</subsection>
</section>
<section id="kernel_modules">
<title>個別のカーネルモジュールをインストールする</title>
<subsection>
<title>追加のモジュールをインストールする</title>
<body>

<p>
もし必要なら、システムにある特別なハードウェア用のebuildをemergeしなければなりません。
以下がemerge可能なカーネル関連のebuildの表です。
</p>

<table>
<tcolumn width="1in"/>
<tcolumn width="4in"/>
<tcolumn width="2in"/>
<tr>
  <th>Ebuild</th>
  <th>目的</th>
  <th>コマンド</th>
</tr>
<tr>
  <ti>nvidia-kernel</ti>
  <ti>xorg-x11用の高速化されたNVIDIAグラフィック</ti>
  <ti><c>emerge nvidia-kernel</c></ti>
</tr>
<tr>
  <ti>nforce-net</ti>
  <ti>NVIDIA NForce(2)マザーボードのオンボードイーサネットコントローラ</ti>
  <ti><c>emerge nforce-net</c></ti>
</tr>
<tr>
  <ti>nforce-audio</ti>
  <ti>NVIDIA NForce(2)マザーボードのオンボードオーディオ</ti>
  <ti><c>emerge nforce-audio</c></ti>
</tr>
<tr>
  <ti>e100</ti>
  <ti>インテルのe100ファーストイーサネットアダプタ</ti>
  <ti><c>emerge e100</c></ti>
</tr>
<tr>
  <ti>e1000</ti>
  <ti>インテルのe1000ギガビットイーサネットアダプタ</ti>
  <ti><c>emerge e1000</c></ti>
</tr>
<tr>
  <ti>emu10k1</ti>
  <ti>Creative Sound Blaster Live!/Audigyのサポート</ti>
  <ti><c>emerge emu10k1</c></ti>
</tr>
<tr>
  <ti>ati-drivers</ti>
  <ti>xorg-x11用の高速化されたATI Radeon 8500+/FireGLグラフィック</ti>
  <ti><c>emerge ati-drivers</c></ti>
</tr>
<tr>
  <ti>ati-drivers-extra</ti>
  <ti>グラフィカルなATIツール</ti>
  <ti><c>emerge ati-drivers-extra</c></ti>
</tr>
</table>

<p>
しかし、これらのebuildの内いくつかはかなりの依存関係があるかも知れないことに注意してください。
ebuildをemergeしたらどのパッケージがインストールされるかを検証するには、<c>emerge --pretend</c>を使ってください。
例えば、<c>emu10k1</c>パッケージでは以下のようにします。
</p>

<pre caption="インストールされるすべてのパッケージのリストを見る">
# <i>emerge --pretend emu10k1</i>
</pre>

<p>
もしインストールに必要なパッケージが嫌なら、<c>emerge --pretend --verbose</c>を使って、依存を決めるのにどのUSEフラグが記されているかを見てください。
</p>

<pre caption="USEフラグの使い方を見る">
# <i>emerge --pretend --verbose emu10k1</i>
<comment>...</comment>
[ebuild  N    ] media-sound/aumix-2.8  +gpm +nls +gtk +gnome +alsa -gtk2
</pre>

<p>
前の例では、<c>emu10k1</c>の依存の内1つ(<c>aumix</c>)が<c>gtk</c>と<c>gnome</c>のUSEフラグを使っているのがわかります。
gtk(org-x11に依存する)のUSEフラグがあれば、それも一緒にコンパイルされるということです。
</p>

<p>
もしこのどれもインストールしたくなければ、例えばすべてのUSEフラグを除外してください。
</p>

<pre caption="emu10k1のemergeですべてのUSEフラグを除外する">
# <i>USE="-gpm -nls -gtk -gnome -alsa" emerge --pretend emu10k1</i>
</pre>

<p>
結果に満足なら、<c>--pretend</c>を外して、<c>emu10k1</c>のインストールを始めてください。
</p>

</body>
</subsection>
<subsection>
<title>モジュールを設定する</title>
<body>

<p>
自動的にロードさせたいモジュールを<path>/etc/modules.autoload.d/kernel-2.4</path>(もしくは<path>kernel-2.6</path>)に記入してください。もし望むなら、モジュールに追加オプションを加えることもできます。
</p>

<p>
すべての利用可能なモジュールを見るには、次の<c>find</c>コマンドを実行してください。
"&lt;kernel version&gt;"に今コンパイルしたカーネルのバージョンを入れてください。
</p>

<pre caption="すべての利用可能なモジュールを見る">
# <i>find /lib/modules/&lt;kernel version&gt;/ -type f -iname '*.o' -or -iname '*.ko'</i>
</pre>

<p>
例えば、<c>3c59x.o</c>モジュールを自動でロードするなら、<path>kernel-2.4</path>か<path>kernel-2.6</path>ファイルを開いて、モジュール名をそこに記入してください。
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.4を編集">
<comment>(Example for 2.4 kernels)</comment>
# <i>nano -w /etc/modules.autoload.d/kernel-2.4</i>
</pre>

<pre caption="/etc/modules.autoload.d/kernel-2.4もしくはkernel-2.6">
3c59x
</pre>

<p>
では、変更を<path>/etc/modules.conf</path>ファイルに書き込むために<c>modules-update</c>を実行してください。
</p>

<pre caption="modules-updateを実行する">
# <i>modules-update</i>
</pre>

<p>
<uri link="?part=1&amp;chap=8">システムの設定</uri>に進んで、インストールを続けてください。
</p>

</body>
</subsection>
</section>
</sections>
