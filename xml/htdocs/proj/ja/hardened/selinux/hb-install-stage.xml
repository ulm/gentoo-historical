<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/ja/hardened/selinux/Attic/hb-install-stage.xml,v 1.1 2005/04/04 18:09:23 idani Exp $ -->

<!-- Original revision: 1.2 -->

<sections>
<section>
<title>stage tarballのインストール</title>
<subsection>
<title>日時を正確に設定する</title>
<body>

<p>
先に進める前に、日時をチェックして、更新しておく必要があります。
狂った時計は後でおかしな結果が起きる元になります。
</p>

<p>
現在の日時を確認するには、<c>date</c>を実行してください。
</p>

<pre caption="日時を確認する">
# <i>date</i>
Sun Apr 25 16:21:18 CEST 2004
</pre>

<p>
もし表示された日時が間違っていたら、<c>date MMDDhhmmYYYY</c>を使って更新してください。
構文としては、(<b>M</b>onth(月)、<b>D</b>ay(日)、<b>h</b>our(時)、<b>m</b>inute(分)、<b>Y</b>ear(年)を表しています)。
例えば、2004年4月25日 16:21を設定したい場合には以下のように実行します。
</p>

<pre caption="日時の設定">
# <i>date 042516212004</i>
</pre>

</body>
</subsection>
<subsection>
<title>stageの選択</title>
<body>

<p>
次のステップとして、あなたが選択した<e>stage</e> tarballをシステムにインストールする必要があります。
必要なtarballをインターネットからダウンロードするか、Gentoo Universal LiveCDから起動しているなら、CDからコピーすることができます。
もしUniversal CDを持っていて使用したいstageがCDにあるのなら、インターネットからダウンロードするのは全くネットワーク帯域の浪費でしかありません。
それらのstageは全く同一なのですから。
</p>
<table>
<tr>
  <th>SELinux Stage Tarball</th>
  <th>Hardened GCCが有効なSELinux Stage Tarball</th>
</tr>
<tr>
  <ti>stage1-x86-selinux</ti>
  <ti>stage1-x86-selinux-pie-ssp</ti>

</tr>
<tr>
  <ti>stage2-x86-selinux</ti>
  <ti>stage2-x86-selinux-pie-ssp</ti>
</tr>
<tr>
  <ti>stage3-x86-selinux</ti>
  <ti>stage3-x86-selinux-pie-ssp</ti>
</tr>
</table>
<p>
  SELinuxは標準のSELinux stageからインストールされなければなりません。
  SELinuxでHardened GCCを使用するつもりなら、pie-ssp stagesを使用するべきです。
</p>

<ul>
<li><uri link="#doc_chap2">一般的な選択: インターネットからダウンロードしたstageを使う</uri></li>
<!--
<li><uri link="#doc_chap3">Alternative: Using a Stage from the LiveCD</uri></li>
-->
</ul>

</body>
</subsection>
</section>
<section>
<title>一般的な選択: インターネットからダウンロードしたstageを使う</title>
<subsection>
<title>stage tarballのダウンロード</title>
<body>

<p>
Gentooをインストールしようとしているファイルシステムのマウントポイントに移動してください(大概は<path>/mnt/gentoo</path>です)。
</p>

<pre caption="Gentooマウントポイントへ移動">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
インストールに使用している媒体によって、stageをダウンロードする為に使えるツールは何種類か考えられます。
もし<c>links2</c>が使用可能なら、すぐにでも<uri link="/main/en/mirrors.xml">Gentoo mirrorlist</uri>にアクセスして、最寄のミラーを選択することができます。
そして<path>experimental/</path>ディレクトリを選択し、あなたのアーキテクチャ(たとえば<path>x86/</path>)、そして最後に<path>hardened/stages</path>ディレクトリとたどってください。
あなたのアーキテクチャで入手可能なstageファイルがそこにあるはずです。
ひとつを選択し、<c>D</c>を押してダウンロードしましょう。ダウンロードが完了したら、<c>Q</c>を押してブラウザを終了させます。 
</p>

<pre caption="links2でミラーリストを見る">
<comment>(proxyなしの場合)</comment>   # <i>links2 http://www.gentoo.org/main/en/mirrors.xml</i>
<comment>(proxyありの場合)</comment>   # <i>links2 -http-proxy proxy.server.com:8080 http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

<p>
ダウンロードしたstage tarballの正当性を評価したいなら、<c>md5sum</c>を使って、その出力とミラーで配布されているMD5チェックサムを比較してください。
例えば、x86のstage tarballをチェックするには、以下のようにします。
</p>

<pre caption="stage tarballの正当性のチェックの例">
# <i>md5sum -c stage1-x86-selinux-2004.2.tar.bz2.md5</i>
stage1-x86-selinux-2004.2.tar.bz2: OK
</pre>

</body>
</subsection>
<subsection>
<title>stage tarballの展開</title>
<body>

<p>
さぁ、それではダウンロードしたstageをシステムに展開しましょう。
もっとも簡単な方法として、GNUの<c>tar</c>を使います。
</p>

<pre caption="stageの展開">
# <i>tar -xvjpf stage?-*.tar.bz2</i>
</pre>

<p>
同じオプション(<c>-xvjpf</c>)を必ず使うようにしてください。
<c>x</c>は<e>アーカイブの展開</e>、<c>v</c>は<e>詳細な表示</e>(これは、任意です)、<c>j</c>は<e>bzip2の解凍</e>、<c>p</c>は<e>パーミッションの保存</e>、そして<c>f</c>は、標準入力からではなく、ファイルから展開することを表しています。
</p>
<!--
<p>
Now that the stage is installed, continue with <uri
link="#installing_portage">Installing Portage</uri>.
</p>
-->
</body>
</subsection>
</section>
<!--
<section>
<title>Alternative: Using a Stage from the LiveCD</title>
<subsection>
<title>Extracting the Stage Tarball</title>
<body>

<p>
The stages on the CD reside in the <path>/mnt/cdrom/stages</path> directory. To
see a listing of available stages, use <c>ls</c>:
</p>

<pre caption="List all available stages">
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
If the system replies with an error, you may need to mount the CD-ROM first:
</p>

<pre caption="Mounting the CD-ROM">
# <i>ls /mnt/cdrom/stages</i>
ls: /mnt/cdrom/stages: No such file or directory
# <i>mount /dev/cdroms/cdrom0 /mnt/cdrom</i>
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
Now go into your Gentoo mountpoint (usually <path>/mnt/gentoo</path>):
</p>

<pre caption="Changing directory to /mnt/gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
We will now extract the stage tarball of your choice. We will do this with the
GNU <c>tar</c> tool. Make sure you use the same options (<c>-xvjpf</c>)! In the
next example, we extract the stage tarball 
<path>stage3-&lt;subarch&gt;-2004.2.tar.bz2</path>.
Be sure to substitute the tarball filename with your stage.
</p>

<pre caption="Extracting the stage tarball">
# <i>tar -xvjpf /mnt/cdrom/stages/stage3-&lt;subarch&gt;-2004.2.tar.bz2</i>
</pre>

<p>
Now that the stage is installed, continue with <uri
link="#installing_portage">Installing Portage</uri>.
</p>

</body>
</subsection>
</section>
-->
<!--
<section id="installing_portage">
<title>Installing Portage</title>
<subsection>
<title>Network or No Network?</title>
<body>

<p>
If you don't have a working network connection, you have to install a portage 
snapshot provided by one of our LiveCDs. This automatically assumes that you are
installing from a <e>stage3</e> tarball (as it is the only tarball supported for
networkless installations). If you want to use prebuilt packages
later on to speed up the installation, you <e>must</e> use a portage snapshot
from the LiveCD. Other users will download a fully updated Portage tree using 
<c>emerge</c> in the next chapter.
</p>

<p>
Continue with the appropriate part:
</p>

<ul>
  <li>
    <uri link="#installing_from_LiveCD">Installing a Portage Snapshot and
    Source Code from LiveCD</uri> (for networkless installations or GRP
    installations)
  </li>
  <li>
    <uri link="#compile_options">Configuring the Compile Options</uri> (all 
    other installation methods)
  </li>
</ul>

</body>
</subsection>
<subsection id="installing_from_LiveCD">
<title>Installing a Portage Snapshot and Source Code from LiveCD</title>
<body>

<p>
There is a Portage snapshot available on the Universal LiveCDs. Since you are 
reading this, we can safely assume you are using such a LiveCD. To install this
snapshot, take a look inside <path>/mnt/cdrom/snapshots/</path> to see what
snapshot we have available:
</p>

<pre caption="Checking the /mnt/cdrom/snapshots content">
# <i>ls /mnt/cdrom/snapshots</i>
</pre>

<p>
Now extract the snapshot using the following construct. Again,
make sure you use the correct options to <c>tar</c>. Also, the <c>-C</c> is with
a capital <c>C</c>, not <c>c</c>. In the next example we use
<path>portage-20040710.tar.bz2</path> as the snapshot filename. Be sure to
substitute with your snapshot.
</p>

<pre caption="Extracting a Portage snapshot">
# <i>tar -xvjf /mnt/cdrom/snapshots/portage-20040710.tar.bz2 -C /mnt/gentoo/usr</i>
</pre>

<p>
You also need to copy over all source code from the CD:
</p>

<pre caption="Copy over source code">
# <i>mkdir /mnt/gentoo/usr/portage/distfiles</i>
# <i>cp /mnt/cdrom/distfiles/* /mnt/gentoo/usr/portage/distfiles/</i>
</pre>

<p>
Now that your Portage snapshot is installed, continue with <uri
link="#compile_options">Configuring the Compile Options</uri>.
</p>

</body>
</subsection>
</section>
-->
<section id="compile_options">
<title>コンパイルオプションの設定</title>
<subsection>
<title>はじめに</title>
<body>

<p>
Gentooを最適化するために、Portageの振る舞いに影響を与えるいくつかの変数を設定することができます。
これらの変数は、すべて(<c>export</c>を使用して)環境変数として設定することも可能ですが、環境変数は永続的なものではありません。
設定を保存しておくために、Portageの設定ファイルである<path>/etc/make.conf</path>があります。
これが今から編集するファイルです。
</p>

<note>
設定可能なすべての変数は、<path>/mnt/gentoo/etc/make.conf.example</path>にコメント付きで列挙されています。
Gentooのインストールを成功させるには、次に挙げられている変数を設定するだけでよいです。
</note>

<p>
あとで話題にする最適化のための変数を編集するために、好みのエディタを立ち上げてください(このガイドでは<c>nano</c>を使います)。
</p>

<pre caption="/etc/make.confを開く">
# <i>nano -w /mnt/gentoo/etc/make.conf</i>
</pre>

<p>
おそらく気づいていると思いますが、<path>make.conf.example</path>ファイルは、他の設定ファイルと同様の構造をしています。
"#"で始まる行はコメントで、その他の行には、<c>VARIABLE="content"</c>という構文で変数を定義します。
<path>make.conf</path>は同じ構文を使用しています。
いくつかの変数については、次の節で話題にします。
</p>

</body>
</subsection>
<subsection>
<title>CHOST</title>
<body>

<warn>
stage1から始めていないユーザは、<path>make.conf</path>内の<c>CHOST</c>の設定を変更しては<e>いけません</e>。
そんなことをしてしまったら、そのシステムは使いものにならなくなってしまいます。
もう一度言いますが、この変数を変更してよいのは、<e>stage1</e>からインストールを始めた場合だけです。
</warn>

<p>
<c>CHOST</c>変数は、<c>gcc</c>がどのアーキテクチャでプログラムをコンパイルすべきかを定義します。
次のようなものが設定できます。
</p>

<table>
<tr>
  <th>アーキテクチャ</th>
  <th>サブアーキテクチャ</th>
  <th>CHOSTの設定</th>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i386</ti>
  <ti>i386-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i486</ti>
  <ti>i486-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i586</ti>
  <ti>i586-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i686以降(athlonを含む)</ti>
  <ti>i686-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>alpha</ti>
  <ti></ti>
  <ti>alpha-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>ppc</ti>
  <ti></ti>
  <ti>powerpc-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>ppc64</ti>
  <ti></ti>
  <ti>powerpc64-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>sparc</ti>
  <ti></ti>
  <ti>sparc-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>(一般的なhppa)</ti>
  <ti>hppa-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>pa7000</ti>
  <ti>hppa1.1-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>pa8000 and above</ti>
  <ti>hppa2.0-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>mips</ti>
  <ti></ti>
  <ti>mips-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>amd64</ti>
  <ti></ti>
  <ti>x86_64-pc-linux-gnu</ti>
</tr>
</table>

</body>
</subsection>
<subsection>
<title>CFLAGSとCXXFLAGS</title>
<body>

<p>
<c>CFLAGS</c>と<c>CXXFLAGS</c>変数には、それぞれ、CおよびC++コンパイラである<c>gcc</c>に対する最適化のためのフラグを定義します。
ここでは、一般的なものを定義しますが、それぞれのプログラムごとに最適なフラグを使うことで、最高のパフォーマンスを出すことが可能となります。これは、それぞれのプログラムが異なっていることによります。
</p>

<p>
<path>make.conf</path>には、<e>一般的には</e>システム全体の動作を損なわない範囲で最善の最適化フラグを定義すべきです。
この変数に、実験的な設定をしないでください。
過剰な最適化はプログラムの動作をおかしくします(クラッシュや誤動作の元です)。
</p>

<p>
すべての最適化オプションを説明はしません。
そのすべてを知りたいなら、<uri link="http://gcc.gnu.org/onlinedocs/">GNU Online Manual(s)</uri>や<c>gcc</c>のinfo(<c>info gcc</c> -- このコマンドは既に稼動しているLinuxシステムでのみ動作します)を読んでください。
<path>make.conf.example</path>ファイルにもたくさんの例や情報が含まれています。こちらも忘れずに読んでください。
</p>

<p>
始めに<c>-march=</c>フラグを設定してください。
これには、ターゲットとするアーキテクチャの名前を指定します。
どんなオプションを設定できるかは、<path>make.conf.example</path>ファイルに(コメントとして)書かれています。
例えば、x86、Athlon XPアーキテクチャの場合には以下のように指定します。
</p>

<pre caption="GCC march設定">
<comment># ネイティブ64ビットシステムを使用したいAMD64ユーザはathlon-xpを使用すべきではありません</comment>
-march=athlon-xp
</pre>

<p>
次に、<c>-O</c>フラグ(これは、大文字のOで、ゼロではありません)を設定します。
これは、<c>gcc</c>の最適化クラスのフラグです。
<c>s</c>(サイズの最適化)、<c>0</c>(ゼロ - 最適化なし)、そして、スピードの最適化フラグ<c>1</c>、<c>2</c>、<c>3</c>が指定できます(各クラスは、この順番により強い最適化を行います。より強い最適化をするクラスは、弱い最適化クラスと同様の効果を持ちつつ、追加の最適化を行います)。例えば、クラス2の最適化には以下のフラグをつけます。
</p>

<pre caption="GCC O設定">
-O2
</pre>

<p>
他の人気がある最適化フラグとして<c>-pipe</c>(コンパイル時の様々な段階間の情報のやり取りに、テンポラリファイルではなくパイプを使うようにします)や、<c>-fomit-frame-pointer</c>(必要ない関数に対するレジスタ内のフレームポインタを保持しません)があります。
</p>

<p>
<c>CFLAGS</c>と<c>CXXFLAGS</c>を定義するときに、複数の最適化オプションを次の例のように繋げることができます。
</p>

<pre caption="CFLAGS変数とCXXFLAGS変数の定義">
CFLAGS="-march=athlon-xp -pipe -O2"   <comment># AMD64ユーザはathlon-xpを使うべきではない</comment>
CXXFLAGS="${CFLAGS}"                  <comment># 両方の変数に同じ設定を使う場合</comment>
</pre>

</body>
</subsection>
<subsection>
<title>MAKEOPTS</title>
<body>

<p>
<c>MAKEOPTS</c>には、パッケージをインストールするときに、いくつ平行してコンパイルを走らせるかを定義します。
あなたのシステムのCPU数に1を加えた数が推奨されています。
</p>

<pre caption="一般的な、CPUが1個のシステムに対するMAKEOPTSの設定">
MAKEOPTS="-j2"
</pre>

</body>
</subsection>
<subsection>
<title>さぁ準備ができました。次へ進みましょう!</title>
<body>

<p>
<path>/mnt/gentoo/etc/make.conf</path>をあなたの好みに応じて編集し、保存してください(<c>nano</c>ユーザは、<c>Ctrl-X</c>を押します)。
それでは、<uri link="?part=1&amp;chap=6">Gentooベースシステムのインストール</uri>へ進んでください。
</p>

</body>
</subsection>
</section>
</sections>
