<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/ja/php/php-upgrading.xml,v 1.2 2006/04/13 12:59:18 idani Exp $ -->

<guide link="/proj/ja/php/php-upgrading.xml" lang="ja">
<title>PHPのアップグレード</title>

<author title="Author">
 <mail link="akorthaus@web.de">Andreas Korthaus</mail>
</author>
<author title="翻訳">
 <mail link="idani@gentoo.org">Shigehiro IDANI</mail>
</author>

<abstract>
このドキュメントでは、エンドユーザがPHPを安全にアップグレードするために理解すべきインストール手順を説明します。
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.1</version>
<date>2006-03-19</date>
<!-- original revision 1.3 -->

<chapter>
<title>はじめに</title>
<section>
<body>

<p>
これまで、何故、まだPortageでPHP5がstableにマークされていないのか？というたくさんの要望がありました。
これはPHP5パッケージ自体の問題ではありません。
PHP5がstableにまだマークされない主たる要因は、PHP5で動作しない、たくさんのアプリケーション、PHPの拡張機能やパッケージがPortageにあり、私たちにはどうすることも出来ないからです。
PHP5は、PHP4との100％完全な後方互換性がなく、すべてのPHP4で開発されたプログラムがPHP5の環境で実行するための移植作業が、できなかったり、されてなかったりしていました。
しかし、たくさんのユーザがこれからも長い間PHP4のサポートを必要としています。
</p>

<p>
この問題を解決するための解答は、同時に1つのLinux BoxにPHP4とPHP5の環境を同時に提供することです。
しかし、現在のPHPパッケージとeclassのレイアウトでは不可能でした。このため新しいレイアウト、新しいeclass、新しいebuildへ移行するために多大な努力を行う必要がありました。
</p>

<p>
このドキュメントでは、システムを停止することなくどのようにアップグレードするかを詳細に説明します。
</p>

<note>
新しいPHPパッケージは、新しいApacheレイアウトを必要とします。このためApacheをまだ、アップグレードしていない方は、<uri 
link="/doc/en/apache-upgrading.xml">Upgrading Apache</uri>(<uri 
link="/doc/ja/apache-upgrading.xml">日本語訳</uri>)をご覧ください。
</note>

</body>
</section>
</chapter>

<chapter>
<title>変更点</title>
<section>
<title>基本的なPHPパッケージの統合</title>
<body>

<p>
すべてのPHPのebuildである<c>dev-php/php</c>、<c>dev-php/php-cgi</c>と
<c>dev-php/mod_php</c>は、<c>dev-lang/php</c>へ統合されました。
</p>

<p>
SAPIを使用したい場合は、以下のUSEフラグを使用してください。
</p>

<ul>
  <li><c>cgi</c> - <path>/usr/bin/php-cgiをビルド &amp; インストールする場合に使用</path></li>
  <li><c>cli</c> - <path>/usr/bin/php</path>をビルド &amp; インストールする場合に使用</li>
  <li><c>apache</c> - Apache 1.3(新しいレイアウト)向けの<c>mod_php</c>をビルド&amp;インストールする場合に使用</li>
  <li><c>apache2</c> - Apache 2.0(新しいレイアウト)向けの<c>mod_php</c>をビルド&amp;インストールする場合に使用</li>
</ul>

<p>
上記のUSEフラグを様々にうまく組み合わせて使用できます。ただし、<c>apache</c>と<c>apache2</c>を同時に使用することはできません。
</p>

<p>
これらのebuildで最も重要なことは、PHP4とPHP5を同時にインストールすることができることです。
</p>

<pre caption="PHPをインストールする">
<comment>(CLIとApache2モジュールに対応した最新バージョンのPHPをインストールする)</comment>
<i>USE="cli apache2" emerge 'dev-lang/php'</i>

<comment>(PHP4のみをインストールする)</comment>
<i>USE="cli apache2" emerge '=dev-lang/php-4*'</i>

<comment>(PHP4とPHP5の両方をインストールする)</comment>
<i>USE="cli apache2" emerge '=dev-lang/php-4*' '=dev-lang/php-5*'</i>
</pre>

<note>
USEフラグは、このようにセットするのではなく、これから説明するように、<path>/etc/portage/package.use</path>で設定してください。
</note>
  
</body>
</section>

<section>
<title>新しいPortageカテゴリ</title>
<body>

<p>
新しいPHPのebuildは、<c>dev-php</c>から<c>dev-lang/php</c>へ移動しました。
PHP4とPHP5を独立したパッケージとしてインストールできるようにするために、<c>dev-php4</c> と<c>dev-php5</c>という、2つの新しいPortageカテゴリが作成されました。
これらのカテゴリは、主に<c>pecl-pdo</c>、<c>pecl-apc</c>、<c>php-java-bridge</c>、<c>xdebug</c>といったPECLパッケージで使われます。
</p>

<p>
<c>pecl-apc</c>をインストールには、以下のようにします。
</p>

<pre caption="PECL::APCのようなPHPの拡張機能をインストールする例">
<comment>(PHP4向けのAPCをインストールする)</comment>
<i>emerge dev-php4/pecl-apc</i>

<comment>(PHP5向けのAPCをインストールする)</comment>
<i>emerge dev-php5/pecl-apc</i>

<comment>(PHP4とPHP5の両方へAPCをインストールする)</comment>
<i>emerge dev-php4/pecl-apc dev-php5/pecl-apc</i>
</pre>

</body>
</section>

<section>
<title>新規ディレクトリ</title>
<body>

<ul>
  <li>
  これらの新しいebuildは、<path>/usr/lib/php4</path>と<path>/usr/lib/php5</path>へ
  インストールします(Apache用のモジュールは、Apacheに合わせた正しい場所へ挿入されます)。
  </li>
  <li>
  PEARパッケージとその他のPHPライブラリは、<path>/usr/share/php</path>(以前は、<path>/usr/lib/php</path>でした)にインストールされます。
  </li>
  <li>
  PECLパッケージは、もはや<path>php.ini</path>ファイルに設定ディレクティブを追加することはしません。
  その代わり、<path>[PACKAGE].ini</path>ファイルが<path>/etc/php/[SAPI]/ext</path>ディレクトリに追加されます。
  </li>
</ul>

</body>
</section>

<section>
<title>PHPバイナリへのシンボリックリンク</title>
<body>

<p>
たとえば、1つ以上のPHPバージョンをインストールする場合を説明します。
</p>

<pre caption="PHP4とPHP5をemergeする">
<i>USE="cgi cli apache2" emerge '=dev-lang/php-4*' '=dev-lang/php-5*'</i>
</pre>

<p>
ebuildは、<path>/usr/bin</path>にインストールされた最後のバージョンのPHPへシンボリックリンクを作成します。
上記の場合、PHP4より後にPHP5がインストールされたので、PHP5へシンボリックリンクが作成されます。
<path>/usr/bin/php</path>や、<path>/usr/bin/php-cgi</path>ではPHP4をリンクしたい場合、または、ある場合にはPHP4、別の場合にはPHP5にリンクしたい場合は、<c>app-admin/php-toolkit</c>で提供される<uri 
link="#doc_chap3_sect5">php-select tool</uri>を使うことができます。<c>php-select</c>により、適切なバイナリにシンボリックリンクを簡単に作成できます。
</p>

</body>
</section>
</chapter>

<chapter>
<title>アップグレード手順</title>
<section>
<title>アップグレードするためのパッケージを見つける</title>
<body>

<p>
初めに、アップグレードをするために必要な追加パッケージを特定する必要があります。
<c>app-portage/gentoolkit</c>パッケージに含まれる<c>equery</c>ツールを使用して特定することができます。
</p>

<pre caption="dev-phpカテゴリの中でインストール済みパッケージを一覧表示する">
$ <i>equery list 'dev-php/'</i>
[ Searching for all packages in 'dev-php' among: ]
 * installed packages
[I--] [  ] dev-php/php-4.4.0 (0)
[I--] [  ] dev-php/mod_php-4.4.0 (1)
[I--] [  ] dev-php/smarty-2.6.10 (0)
[I--] [  ] dev-php/PEAR-PEAR-1.3.5-r1 (0)
[I--] [  ] dev-php/PEAR-Mail-1.1.6 (0)
[I--] [  ] dev-php/PEAR-MDB-1.3.0 (0)
[I--] [  ] dev-php/PECL-apc-3.0.6 (0)
[I--] [  ] dev-php/PECL-imagick-0.9.11 (0)
[I--] [  ] dev-php/xdebug-2.0.0_beta3 (0)
</pre>

<impo>
インストール済みパッケージは上記と非常に異なるかもしれません。上記コマンドを自分自身で必ず実行してください。すべてのパッケージを間違いなくアップグレードするように、上記の出力されたリストを保存しておいてください。
</impo>

<note>
大部分のWebアプリケーションでは、自分自身を適切にインストールする
Webアプリケーションeclassを使用しています。
従って、多くのWebアプリケーションは何も影響を受けません。
新しいバージョンがあるかどうか確かめたいかもしれません。
</note>

<p>
たとえば以下のようなPHPの拡張機能は、
</p>

<ul>
  <li><c>PECL-apc</c></li>
   <li><c>PECL-imagick</c></li>
   <li><c>xdebug</c></li>
</ul>

<p>
両方のPHPバージョンで独立して使用できるようにするために、
<c>dev-php4</c>と<c>dev-php5</c>の2つのPortageカテゴリに別けられています。
さらにこれらのパッケージの大部分は、名前が変更されています。
</p>

<p>
新しいディレクトリと名前変更された例を以下に紹介します。
</p>

<table>
  <tr>
    <th>PHP拡張機能</th>
    <th>以前のパッケージ名</th>
    <th>新しいPHP4でのパッケージ名</th>
    <th>新しいPHP5でのパッケージ名</th>
  </tr>
  <tr>
    <ti>APC</ti>
    <ti>dev-php/PECL-apc</ti>
    <ti>dev-php4/pecl-apc</ti>
    <ti>dev-php5/pecl-apc</ti>
  </tr>
  <tr>
    <ti>Imagick</ti>
    <ti>dev-php/PECL-imagick</ti>
    <ti>dev-php4/pecl-imagick</ti>
    <ti>dev-php5/pecl-imagick</ti>
  </tr>
  <tr>
    <ti>Xdebug</ti>
    <ti>dev-php/xdebug</ti>
    <ti>dev-php4/xdebug</ti>
    <ti>dev-php5/xdebug</ti>
  </tr>
</table>

<note>
これらの拡張機能をemergeする前に、再度、どのようにパッケージの名前が変更されているか、<path>/usr/portage</path>の中を調査する必要があります。
</note>

</body>
</section>

<section>
<title>以前の古いパッケージを削除する</title>
<body>

<p>
GentooでPHPの導入方法に関してたくさんの変更が加えられました。
新しいパッケージをインストールする前に、古いPHPパッケージを完全に削除しなければなりません。
</p>

<pre caption="古いパッケージの削除(一例)">
<comment>(PHPパッケージをunmergeする)</comment>
<i>emerge --unmerge php mod_php</i>

<comment>(PHPの拡張機能をunmergeする)</comment>
<i>emerge --unmerge PECL-apc PECL-imagick xdebug</i>

<comment>(PHPライブラリとアプリケーションをunmergeする)</comment>
<i>emerge --unmerge PEAR-PEAR PEAR-Mail PEAR-MDB smarty</i>
</pre>

</body>
</section>

<section>
<title>USEフラグを設定する</title>
<body>

<p>
いくつかの新しいUSEフラグを追加しましたので、それらを再確認し<path>/etc/portage/package.use</path>(存在しない場合には作成してください)に適切な行を追加したいかもしれません。
</p>

<note>
<path>/etc/portage/package.use</path>に、PHPのインストールのためのUSEフラグを設定しましょう。
<path>make.conf</path>を使ってシステム全体の変更をすることはないことを憶えておいてください。
</note>

<p>
PHPインストールでサポートしたい機能に即してUSEフラグを設定してください
(最低でも<c>cli</c>USEフラグを設定することを推奨します)。

</p>

<pre caption="dev-lang/php向けUSEフラグ(例)">
dev-lang/php -* cli apache2 ctype expat fastbuild ftp gd hash iconv memlimit mysql nls pcre pic pdo reflection session simplexml sockets spl ssl tokenizer truetype xml xsl zlib
</pre>

<note>
<c>-*</c>は、すべてのUSEフラグを無効にします(これにより基本的なPHPの機能、Session-、PCRE-、gd-とMySQL-サポートさえも無効になります)。このため使用したいいくつかの機能、拡張機能のすべてのUSEフラグを明確化する必要があります。
詳細は、<uri 
link="http://svn.gnqs.org/projects/gentoo-php-overlay/wiki/ManagingExtensions">
Managing Extensions</uri>を参照ください。
<uri 
link="http://svn.gnqs.org/projects/gentoo-php-overlay/wiki/PhpRefPcre">preg_* 
Functions</uri>を使用したい場合は<c>pcre</c>を、<uri 
link="http://svn.gnqs.org/projects/gentoo-php-overlay/wiki/PhpRefSession">Session 
Handling Functions</uri>を使用したい場合は<c>session</c>という様に上位の標準のUSEフラグを設定する必要があります。
</note>

<p>
並行してPHP4とPHP5をインストールしたい場合、それぞれのバージョンで異なるUSEフラグを設定することができます。
</p>

<pre caption="PHP4とPHP5で異なるUSEフラグを設定する(例)">
=dev-lang/php-4* -* cli cgi apache2 ctype expat fastbuild force-cgi-redirect ftp gd iconv ipv6 memlimit mysql nls pcre pic posix session sockets ssl tokenizer truetype xml xsl zlib
=dev-lang/php-5* -* cli cgi apache2 ctype fastbuild force-cgi-redirect ftp gd hash iconv ipv6 memlimit mysql nls pcre pic posix pdo reflection session simplexml soap sockets spl sqlite ssl tokenizer truetype xml xmlreader xmlwriter xsl zlib
</pre>

<note>
推奨するUSEフラグの一覧として、
<uri 
link="http://svn.gnqs.org/projects/gentoo-php-overlay/wiki/CommonQuestions#DoYouRecommendAnyUSEFlags">
Recommend USE flags</uri>をご覧ください。PHPで利用可能なすべてのUSEフラグの一覧として、
overlay wikiにある<uri 
link="http://svn.gnqs.org/projects/gentoo-php-overlay/wiki/NewUseFlags">USE 
flags table</uri>をご覧ください。
</note>

</body>
</section>

<section>
<title>PHPをemergeする</title>
<body>

<p>
PHP4のみ、PHP5のみ、同時に両方をインストールするかを選べます。
PHP4のみをインストールする場合には、<c>=dev-lang/php-4*</c>でemergeします。
PHP5(最新)のみインストールする場合には、<c>dev-lang/php</c>を使用できます。
同時に両方をインストールする場合には、<c>=dev-lang/php-4*</c>と<c>=dev-lang/php-5*</c>をemergeします。
</p>

<p>
USEフラグの設定を確認します。
</p>

<pre caption="USEフラグの確認(例)">
<comment>(PHP4パッケージの確認)</comment>
<i>emerge --pretend --verbose '=dev-lang/php-4*'</i>

<comment>(PHP5パッケージの確認)</comment>
<i>emerge --pretend --verbose '=dev-lang/php-5*'</i>

<comment>(PHP4向けの拡張機能の確認)</comment>
<i>emerge --pretend --verbose dev-php4/pecl-apc dev-php4/pecl-imagick dev-php4/xdebug</i>

<comment>(PHP5向けの拡張機能の確認)</comment>
<i>emerge --pretend --verbose dev-php5/pecl-apc dev-php5/pecl-imagick</i>

<comment>(PHPライブラリとアプリケーションの確認)</comment>
<i>emerge --pretend --verbose PEAR-PEAR PEAR-Mail PEAR-MDB smarty</i>
</pre>

<p>
すべてよければ、PHPをemergeします。
</p>

<pre caption="新しいパッケージをemergeする(例)">
<comment>(PHP4パッケージをemergeする)</comment>
<i>emerge '=dev-lang/php-4*'</i>

<comment>(PHP5パッケージをemergeする)</comment>
<i>emerge '=dev-lang/php-5*'</i>

<comment>(PHP4向けの拡張機能をemergeする)</comment>
<i>emerge dev-php4/pecl-apc dev-php4/pecl-imagick dev-php4/xdebug</i>

<comment>(PHP5向けの拡張機能をemergeする)</comment>
<i>emerge dev-php5/pecl-apc dev-php5/pecl-imagick</i>

<comment>(PHPライブラリとアプリケーションをemergeする)</comment>
<i>emerge PEAR-PEAR PEAR-Mail PEAR-MDB smarty</i>
</pre>

</body>
</section>

<section>
<title>PHP4とPHP5を同時に使用する場合:cliとcgiバイナリでどちらを使用するか選択する</title>
<body>

<p>
emergeの後、<path>/usr/lib/php4/bin</path>と/または<path>/usr/lib/php5/bin</path>に
<c>cli</c>と/または<c>cgi</c>のバイナリがインストールされます。
PHP4とPHP5を両方インストールする場合、Portageはユーザがどちらを標準として使用するか判断できないので、<path>/usr/bin</path>には、最後にインストールしたPHPのバージョンからシンボリックリンクが作成されます。
このため最後にPHP5をインストールした場合、<path>/usr/bin/php</path>へのシンボリックリンクは、<path>/usr/lib/php5/bin/php</path>から作成されていることに気づくでしょう。
(<c>phpize</c>と<c>php-config</c>を使用してPHPの拡張機能をビルドする責任がある)<c>php-devel</c>と同様に、ある<c>cli</c>と/または<c>cgi</c>バイナリは、(<path>/usr/bin</path>に)シンボリックリンクが作成されなければなりません。
<c>app-admin/php-toolkit</c>で提供される<c>php-select</c>を使用することで、
簡単に変更できます。
</p>

<note>
<c>dev-lang/php</c>は、<c>app-admin/php-toolkit</c>に依存します。
従って、<c>php-select</c>は、新しいスタイルのPHPパッケージをemergeした後に、
自動的に利用可能になります。
</note>

<p>
<c>=dev-lang/php-5*</c>と同様に<c>=dev-lang/php-4*</c>をemergeしていると仮定します。
現在、選択されているPHPのバージョンを表示するために、以下で説明する<c>php-select</c>コマンドを入力してください。
</p>

<pre caption="現在の選択されているPHPバージョンを表示する">
<comment>(cli向け)</comment>
<i>php-select php</i>

<comment>(cgi向け)</comment>
<i>php-select php-cgi</i>

<comment>(phpizeとphp-config向け)</comment>
<i>php-select php-devel</i>
</pre>

<p>
上記、実行結果の一例を示します。
</p>

<pre caption="php-selectの出力例">
# <i>php-select php</i>
/usr/bin/php is set to /usr/lib/php5/bin/php
</pre>

<p>
この出力結果は、PHP cliバイナリの標準パスの<path>/usr/bin/php</path>が、
PHP5のバイナリである<path>/usr/lib/php5/bin/php</path>にシンボリックリンクされていることを意味します。
従って、<path>/usr/bin/php</path>を使用するPHPスクリプトは、PHP5で実行されます。
</p>

</body>
</section>

<section>
<title>標準のPHPを変更するためにphp-selectを使用する</title>
<body>

<p>
前章で調査した標準のバージョンの設定で満足でない場合、
希望するバージョンを選択するために、再び<c>php-select</c>を使用することができます。
</p>

<pre caption="希望するバージョンを選択する">
<comment>(cliを設定する場合)</comment>
<i>php-select php php4</i>

<comment>(cgiを設定する場合)</comment>
<i>php-select php-cgi php5</i>

<comment>(phpizeとphp-configを設定する場合)</comment>
<i>php-select php-devel php5</i>
</pre>

<note>
<c>php-select</c>の機能についてもっと知りたい方は<c>php-select -h</c>とタイプしてください。
</note>

<p>
リンクを確認する。
</p>

<pre caption="シンボリックリンクを確認する">
 # <i>stat /usr/bin/php /usr/bin/php-cgi /usr/bin/phpize /usr/bin/php-config | grep File</i>
 File: `/usr/bin/php' -> `/usr/lib/php4/bin/php'
 File: `/usr/bin/php-cgi' -> `/usr/lib/php5/bin/php-cgi'
 File: `/usr/bin/phpize' -> `/usr/lib/php5/bin/phpize'
 File: `/usr/bin/php-config' -> `/usr/lib/php5/bin/php-config'
</pre>

<note>
<c>php-select</c>は、標準のバージョンの変更しかできないことに注意してください。
PHP4とPHP5のcgi/cliの両方ともインストールしている場合、
特定のバージョンのPHPスクリプトを実行するために、
<path>/usr/lib/php4/bin/php</path>や<path>/usr/lib/php5/bin/php</path>のように
常に絶対パスで使用することができます。
同じApacheのインスタンス上でPHP4とPHP5のcgiを使用できますが、2つの異なるApache用PHPモジュールを1つのApacheインスタンス上で使用できません。詳細は、<uri link="php4-php5-configuration.xml">
PHP4 and PHP5 Configuration Guide</uri>を参照してください。
</note>

</body>
</section>
</chapter>

<chapter>
<title>設定ファイルを移行する</title>
<section>
<body>

<p>
Gentoo PHPパッケージは、
PHPバージョンごと、SAPIごとに1つのサブディレクトリを<path>/etc/php</path>に作成して、
設定ファイルを保持します。
</p>

<pre caption="PHPの設定ディレクトリを一覧表示する">
$ <i>ls -1 /etc/php</i>
apache2-php4
apache2-php5
cli-php4
cli-php5
</pre>

<p>
すべてのサブディレクトリには、以前のパッケージのように、それ向けの<path>php.ini</path>が含まれています。
</p>

</body>
</section>

<section>
<title>php.iniの変更</title>
<body>

<p>
<path>php.ini</path>の古い設定と新しい設定の差分を調べるために、
<c>etc-update</c>、または<c>dispatch-conf</c>を使用すべきです。
確実にチェックする必要がある2つのディレクティブは、
<c>include_path</c>と<c>extension_dir</c>です。
しかし、ここで注意してください。<c>extension_dir</c>は、PHPバージョン間(5.0と5.1でも!)で
異なります。
</p>

<p>
<path>/etc/php/apache2-php5/php.ini</path>と<path>/etc/php/cli-php5/php.ini</path>のPHP5.1の例を示します。
</p>

<pre caption="php.iniの古い設定">
include_path = ".:/usr/lib/php"
extension_dir = "/usr/lib/php/extensions/no-debug-non-zts-20050617/"
</pre>

<pre caption="php.iniの新しい設定">
include_path = ".:/usr/share/php"
extension_dir = "/usr/lib/php5/lib/php/extensions/no-debug-non-zts-20050617/"
</pre>

<warn>
すべてのファイルで正しい設定をするため、必ず<c>etc-update</c>か、<c>dispatch-conf</c>を使用してください。
</warn>

</body>
</section>

<section>
<title>変更されたPHPの拡張機能の設定</title>
<body>

<p>
新しいPHPパッケージは、外部(共有)PHP拡張機能用の設定ディレクティブを、もはや<path>php.ini</path>に保存しません。
これらのディレクティブは、<path>/etc/php/*/ext</path>ディレクトリに拡張機能固有の設定ファイルで保持されます。
共有拡張機能を有効/無効にするために、<path>/etc/php/*/ext-active</path>からシンボリックリンクを作成する仕組みが使われます。
拡張機能を有効にする場合は、<path>/etc/php/*/ext-active</path>から
<path>/etc/php/*/ext/</path>の中の、対応する<path>[EXTENSION].ini</path>へシンボリックリンクを作成します。
拡張機能を無効にする場合は、シンボリックリンクを削除します。
</p>

<p>
以前、<c>dev-php/PECL-apc</c>をインストールしていた場合は、APCの設定は、
<path>php.ini</path>に保存されます。
新しい<c>dev-php5/pecl-apc</c>パッケージを再emergeした場合は、
APCの標準設定は、<path>/etc/php/*5/ext/apc.ini</path>に書き込まれます。
</p>

<p>
APC設定ディレクティブを<path>/etc/php/*5/php.ini</path>から<path>/etc/php/*5/ext/apc.ini</path>へ移動させる必要があるので、
<path>/etc/php/*5/ext-active/apc.ini</path>から<path>/etc/php/*5/ext/apc.ini</path>へシンボリックリンクを作成します。
</p>

<note>
ApacheモジュールとしてPHPをインストールした場合は、
インストールと設定の後にApacheを必ず再起動してください。
</note>

</body>
</section>
</chapter>

<chapter>
<title>PHP4と/またはPHP5が動作するようにApacheを設定する</title>
<section>
<body>

<p>
PHP4またはPHP5モジュール(mod_php)を読み込むように、Apacheを設定するには、
<path>/etc/conf.d/apache2</path>の中の<c>APACHE2_OPTS</c>変数に、
<c>-D PHP4</c>と<c>-D PHP5</c>をそれぞれ追加します。
</p>

<pre caption="mod_phpを読み込むようにApacheを設定する">
<comment>(PHP4向けの設定)</comment>
<i>APACHE2_OPTS="-D PHP4"</i>

<comment>(PHP5向けの設定)</comment>
<i>APACHE2_OPTS="-D PHP5"</i>
</pre>

<p>
同時に2つのPHPバージョンをApache上で動作させる方法はたくさんあります。
一番簡単な方法は、cgiバイナリとしてPHP4とPHP5を使用することと、
PHP4はcgiでPHP5はモジュール(または、その反対)で使用することです。
1つのApacheインスタンスで、PHP4モジュールとPHP5モジュールを使うことはできません。
</p>

<p>
実現可能な手法のいくつかを、<uri link="php4-php5-configuration.xml">PHP4 and PHP5
Configuration Guide</uri>の中で説明しています。
</p>

</body>
</section>
</chapter>

<chapter>
<title>サポート/手がかり</title>
<section>
<body>

<p>
新しいGentooのPHPパッケージで問題に直面している場合は、この章で何か手がかりを得ることができるでしょう。
</p>

<ul>
  <li>
    GentooでのPHPについては、<uri 
link="http://svn.gnqs.org/projects/gentoo-php-overlay/wiki/CommonQuestions">
Common Questions</uri>を参照してください。
  </li>
  <li><uri 
link="http://svn.gnqs.org/projects/gentoo-php-overlay">Development-Page of the 
PHP Overlay</uri>(訳注:PHPオーバーレイの開発ページ)</li>
  <li>
    irc.freenode.net上の#gentoo-phpチャンネル。ここには、オーバーレイを作り出す常連が頻繁に訪れます。お待ちしています!
  </li>
  <li>
    <uri link="http://forums.gentoo.org/">Gentoo Forums</uri>は、ヘルプを求めるのに最適な場所です。とてもたくさんのGentooユーザが24時間フォーラムを読んでいます。
    それゆえ、すぐにヘルプが得られるとても素敵な場所となっています。
  </li>
</ul>

<p>
新しいパッケージの実装の詳細については、<uri 
link="http://article.gmane.org/gmane.linux.gentoo.devel/30050">Stuarts Posting 
on gentoo-dev</uri> と<uri 
link="http://stu.gnqs.org/diary/gentoo.php/2005/07/11/radical_changes_for_php5_support">
'Radical Changes for PHP5 Support'</uri>で始まるStuartsのブログのエントリーを見てください。
</p>

<p>
<uri 
link="http://svn.gnqs.org/projects/gentoo-php-overlay">Development-Page</uri>では、
たくさんのドキュメントと、後に公式のPortageツリーへ移行すると思われる一番新しいebuildを見つけることでしょう。
</p>

</body>
</section>
</chapter>

</guide>
