<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/ja/java/java-upgrade.xml,v 1.2 2012/10/28 15:21:28 swift Exp $ -->

<guide lang="en">
<title>Gentoo Java アップグレードガイド</title>

<author title="Author">
  <mail link="nichoj@gentoo.org">Joshua Nichols</mail>
</author>
<author title="Author">
  <mail link="kartk@gentoo.org">Karl Trygve Kalleberg</mail>
</author>
<author title="Editor">
  <mail link="nightmorph@gentoo.org">Josh Saddler</mail>
</author>
 <author title="翻訳">
    <mail link="tma@gside.org">Takeshi Matsuba</mail>
 </author>

<abstract>
このガイドはGentoo上のJavaを次世代のJavaへアップグレードする方法を、関連するコンセプトやツールに沿って示します。
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0.8</version>
<date>2006-07-24</date>

<!-- Original revision: 1.16 -->

<chapter>
<title>始める前に</title>
<section>
<body>

<p>
アップグレードを始める前に、いくつか知っておくと便利な用語があります。
</p>

<dl>
  <dt>Generation</dt>
  <dd>
    <ul>
      <li>
	これは新しいコンセプトです。このアイデアでは、GenerationとはJavaのパッケージをビルドするためのツールとeclassのセットです。
	ある時点で、現在のGenerationから新しいGenerationに移行を始めます。この間、両方のGenerationが共存します。
	例えば、システムVMであるGeneration X <e>と</e>システムVMである Generation X+1が共存することになります。
	これにより、新しいGenerationへの移行を行っている間、Generation X とGeneration X+1を使用するパッケージが共存することができます。
      </li>
    </ul>
  </dd>
  <dt>Generation 1</dt>
  <dd>
    <ul>
      <li>
	このGenerationは現存のjava-pkgやjava eclass、<c>java-config-1.x</c>を含みます。
      </li>
    </ul>
  </dd>
  <dt>Generation 2</dt>
  <dd>
    <ul>
      <li>
	これは近年開発されてきた新しいGenerationです。
      </li>
    </ul>
  </dd>
</dl>

<dl>
  <dt>Generation 1 システムVM</dt>
  <dd>
    <ul>
      <li>
	これはGeneration 1からeclassを使用するJavaパッケージをemergeするために、使用されるVMです。
	これは<c>java-config-1 --set-system-vm &lt;choice of vm&gt;</c>により設定します。
      </li>
    </ul>
  </dd>
  <dt>Generation 2 システムVM</dt>
  <dd>
    <ul>
      <li>
	Generation 2では、システムVMはrootとユーザVMを設定していないユーザにより使用されます。
      </li>
    </ul>
  </dd>
  <dt>Generation 2 ビルドVM</dt>
  <dd>
    <ul>
      <li>
	Generation 2 はVMに新しいクラスを導入しました。ビルドVMはJavaパッケージのビルドを行うときに使用されます。
	デフォルトでは、パッケージは可能な限り低いバージョンのVMを使用するよう試みます。
	使用されるベンダーはプラットフォームに依存します。
	これらのデフォルトの動作は、<path>/usr/share/java-config-2/config/jdk-defaults.conf</path>により定義されます。
	加えて、ビルドVMは<path>/etc/java-config-2/build/jdk.conf</path>により設定することができます。
      </li>
    </ul>
  </dd>
</dl>

</body>
</section>
</chapter>

<chapter>
<title>キーワード</title>
<section>
<body>

<p>
もし、あなたがstable環境の場合(例えば~x86、~ppcまたは~amd64ではなくx86、ppcまたはamd64)、<path>/etc/portage/package.keywords</path>にいくつか追加する必要があります。
</p>

<pre caption="package.keywords">
# Java パッケージのコア
dev-java/ant-core
dev-java/ant-tasks
dev-java/ant
dev-java/java-config
dev-java/java-config-wrapper
dev-java/javatoolkit
# JDK
dev-java/sun-jdk
dev-java/ibm-jdk-bin
dev-java/jrockit-jdk-bin
dev-java/blackdown-jdk
dev-java/kaffe
# JRE
dev-java/sun-jre-bin
dev-java/ibm-jre-bin
dev-java/blackdown-jre
# Virtual
virtual/jdk
virtual/jre
# コンパイラ
dev-java/eclipse-ecj
dev-java/jikes
# ドキュメント
dev-java/java-sdk-docs
# そのほかの、Generation 2にアップグレードされ、
# Generation 1 ではビルドや実行がちゃんとできないもの
dev-java/lucene
</pre>

<impo>
新しいJavaシステムに関するすべてのパッケージを追加することが重要です。
そうしないと、このガイドの後のステップで問題が発生するでしょう。
</impo>

</body>
</section>
</chapter>

<chapter>
<title>java-configのアップデート</title>
<section>
<body>

<p>
新しいパッケージである、<c>java-config-wrapper</c>は古いバージョンの<c>java-config</c>にブロックされるので、まずはこれを削除します。
</p>

<pre caption="古いjava-configを削除する">
# <i>emerge -C java-config</i>
</pre>

<p>
これで新しいバージョンの<c>java-config</c>をインストールできるでしょう。
</p>

<pre caption="新しいjava-configをインストールする">
# <i>emerge -1 =java-config-1* =java-config-2*</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>環境をチェックする</title>
<section>
<body>

<p>
我々は新しいスクリプト<c>/usr/bin/java-check-environment</c>を提供しました。
これはその名が示すように、Java環境をチェックします。
これは次にどのようにすれば、見つかった問題を修正できるかを示します。実行してみましょう。
</p>

<pre caption="環境をチェックする">
# <i>/usr/bin/java-check-environment</i>
</pre>

<note>
このコマンドはrootではないユーザでも実行可能です。rootやシステムはGeneration 1 のVMのみ必要です。
ユーザアカウントで実行した場合は、このスクリプトはそれが欠けていることについてエラーを返すでしょう。
これは普通で、単にその部分は無視してください。
</note>

<p>
示される内容は以下です。
</p>

</body>
</section>
<section>
<title>バーチャルマシンのアップデート</title>
<body>

<p>
最初のセクションは、古い<path>/etc/env.d/java</path>の<c>java-config</c>ファイルをチェックします。
指示は簡単です。ただそれが示すファイルを取り除いてください。その後、それが示すパッケージを再度emergeしてください。
</p>

</body>
</section>
<section>
<title>古いユーザー設定を削除する</title>
<body>

<p>
次のセクションでは、<c>java-check-environment</c>がGeneration-1の設定をホームディレクトリにあることについて、丁寧に警告してくれます。
これらのファイルはもはや現在の形式ではサポートされません。
もし<c>java-check-environment</c>が問題を検出した場合は、アドバイスに従い、以下を実行します。
</p>

<note>これは非rootユーザにのみ適応されます。</note>

<pre caption="古いユーザー設定を削除する">
# <i>java-config-2 --list-available-vms</i>
# <i>java-config-2 --set-user-vm &lt;Choice of VM&gt;</i>
</pre>

</body>
</section>
<section>
<title>Generation-1のシステムVMが設定されていることを確認する</title>
<body>

<p>
次に起こりうるエラーはGeneration-1システムVMがない場合です。
</p>

<pre caption="Generation1のVMをセットする">
# <i>java-config-1 -L</i>
# <i>java-config-1 -S &lt;system-vm-of-choice-here&gt;</i>
</pre>

<impo>
Generation-1のシステムVMは<b>必ず</b>JDK1.4である必要があります。まだない場合はemergeする必要があります。
</impo>

<note>
いかなる場合もGeneration-1はJDK1.4である必要があります。
これはGeneration-1のパッケージをビルドする場合やJava1.5でコンパイルされていないGeneration-2パッケージのために必要です。
</note>

<p>
もちろん通常通り以下を実行する必要があります。
</p>

<pre caption="環境変数をアップデートする">
# <i>env-update &amp;&amp; source /etc/profile</i>
</pre>

<p>
念のため正しい環境になったか確認して下さい。
</p>

</body>
</section>
<section>
<title>JDK1.5をGeneration-1 VMとする
</title>
<body>

<p>
次のチェックは、もし、JDK1.5をGeneration-1のシステムVMとしている場合です。
この場合、JDK 1.4を代わりに使うようにすべきです。
この時点までこのガイドに従ってきたなら、上記の手順に従い、単純にGeneration-1の新しいシステムVMとして設定するだけです。
</p>

<p>
1.5のためにバイトコードをコンパイルしてきた可能性があります。
これは警告"UnsupportedClassVersionError"を引き起こします。これを修正したければ以下を実行してください。
</p>

<pre caption="java-1.5-fixerスクリプトを実行する">
<comment>まだこのツールを持っていない場合は、java-1.5-fixer をemerge して下さい</comment>
# <i>emerge --noreplace javatoolkit portage-utils</i>
<comment>java-1.5-fixerの実行</comment>
# <i>/usr/bin/java-1.5-fixer</i>
</pre>

<impo>
これまでJDK1.5を使用してきた場合、java-1.5-fixerを実行すべきです。
これは散在するJDK1.5バイトコードが存在しないことを確実にします。
</impo>

<impo>
java-1.5-fixerはJDK1.5でコンパイルされたパッケージをJDK1.4でリビルドする便利な機能を提供するだけです。
これは完全ではなくすべてのシステムのパッケージを修正できるわけではありません。
失敗した場合、失敗したパッケージをunmergeし、再度失敗したパッケージをemergeする必要があることがほとんどです。
</impo>

</body>
</section>
</chapter>

<chapter>
<title>更新されたドキュメント</title>
<section>
<body>
<p>
これらの変更を反映するため、以下のドキュメントが更新されました。
</p>

<ul>
 <li><uri link="/doc/en/java.xml">User Guide</uri>(<uri link="/doc/ja/java.xml">日本語訳</uri>)</li>
 <li><uri link="java-devel.xml">Developer Guide</uri></li>
</ul>
</body>

</section>
</chapter>

<chapter>
<title>共通の問題や質問</title>

<section>
<title>
java-check-environmentは何度も同じVMについての問題を出力します。
また、java-config-1 -Lが何も出力しません。　
</title>
<body>

<p>
これはunmaskするキーワードが間違っているために起こっています。
これを修正するには、新しいJavaシステムに関するすべてをunmaskするように設定する必要があります。
</p>

<p>
具体的には、たいていの場合、システムにインストールしたVMのすべてがunmaskされるよう設定されていないことが原因です。
</p>

</body>
</section>

<section>
<title>なぜJDK1.5をGeneration-1のシステムVMとして使用できないのか</title>
<body>

<p>
JDK1.5をGeneration-1のシステムVMとして用いる事で、最初の段階でpackege.maskとなった原因の、全ての問題に遭遇するでしょう。
</p>

<p>
しばらくの間何人かの人々は、JDK1.5をシステムVMとして用いることに問題はありませんでしたが、多くのパッケージでは問題を抱えていました。
特に新しいJavaシステムに変更されていない全てのパッケージを動作させるため、JDK1.4は必要です。
</p>

</body>
</section>

<section>
<title>アプリケーションが使おうとするJAVA_HOMEはGeneration-1 VMに設定されます</title>
<body>

<p>
いくつかのアプリケーションはJAVA_HOMEにより、javaを呼び出します。
そのため、JAVA_HOMEはGeneration-1のシステムVMが何なのか設定されています。(すなわち<path>/etc/env.d/20java</path>)
これは特定のアプリケーションが新しいeclassを使用するように変更されると問題となるでしょう。
</p>

<p>
回避方法は、下記に従いJAVA_HOMEを設定してください。
</p>

<pre caption="環境をチェックする">
if [[ -L $HOME/.gentoo/java-config-2/current-user-vm ]]; then
  export JAVA_HOME=$HOME/.gentoo/java-config-2/current-user-vm
elif [[ -L /etc/java-config-2/current-system-vm ]]; then
  export JAVA_HOME=/etc/java-config-2/current-system-vm
fi
</pre>

<p>
これを<path>.bash_profile</path>に含めることもできますが、推奨されていません。
これは新しいシステムが取り除いた余計な物について、環境につながりが残したままになるためです。
例えば、ユーザvmの設定がない場合システムVMが採用されます。
もし後でユーザVMを設定するなら、JAVA_HOMEを正しく取得できるように<path>~/.bash_profile</path>を読み込む必要があります。
</p>
      
<warn>
これらをrootユーザの<path>bash_profile</path>に使用しないでください。
もし JDK 1.5のVMをGeneration-2のシステムVMとしていた場合、Generation-1のパッケージを壊すことになります。
</warn>

<p>
よいアプローチはアプリケーションの移行を新しいビルドシステム上で行い、適切に動くことを確実にする方法です。
もし、特定のアプリケーションの実行で問題に悩まされたら、#gentoo-javaの<mail link="nichoj@gentoo.org">nichoj</mail>にコンタクトを取っるか、gentoo-javaメーリングリストにメッセージを出してください。
</p>

</body>
</section>
</chapter>
</guide>
