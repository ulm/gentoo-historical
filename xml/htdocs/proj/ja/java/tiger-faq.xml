<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/ja/java/tiger-faq.xml,v 1.2 2006/01/22 08:32:58 idani Exp $ -->

<guide link="/proj/ja/java/tiger-faq.xml" lang="ja">
<title>Gentoo Java 1.5 FAQ</title>

<author title="Author">
  <mail link="karltk@gentoo.org">Karl Trygve Kalleberg</mail>
</author>

<author title="Author">
  <mail link="axxo@gentoo.org">Thomas Mathijs</mail>
</author>

<author title="Author">
  <mail link="nichoj@gentoo.org">Joshua Nichols</mail>
</author>

<author title="翻訳">
  <mail link="igarashi@gentoo.gr.jp">五十嵐 正尚</mail>
</author>

<abstract>
このFAQはGentooのJava 1.5サポートに関する問題を対象としています。
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2005-12-17</date>

<!-- Original revision: 1.12 -->

<chapter>
<title>なぜJava 1.5はまだhard-maskされているのですか?</title>
<section>
<body>

<p>
  システムVMとしての1.5 JDKの使用は、システムを不安定にする問題が少々あるため、Java 1.5はまだhard maskされています。
</p>

<p>
  Java 1.5を使う上での一つ目の問題は、後方互換性です。
  1.5 JDKを使用してパッケージをコンパイルすると、
  コンパイルされたクラスは1.5もしくはそれ以上のバージョンのVMでのみ利用可能になるのが、デフォルトの動作です。
</p>

<p>
  Java herdはこの問題への対処として、以下で詳しく述べるように、一番古いバージョンのVM用のクラスをコンパイルできるようにする作業を行っています。
</p>

<p>
  それとは別の大きな問題は、現時点のportage内にあるように、JDK 1.5と互換性のないパッケージがあるということです。
  例えば1.5では、いくつかのabstract classとinterfaceにabstractメソッドが新設されています。
  これは、それらabstractメソッドをオーバーライドするための修正が必要になるということを意味します。
  もし心配なら、そのような面倒なパッケージをコンパイルするのに、1.4を使用してみることもできます。
  しかし、上記で述べた後方互換性の問題が原因で、外部ライブラリを使用することができません。なぜなら、外部ライブラリは1.5向けとしてのみコンパイルされているからです。
</p>

</body>
</section>
</chapter>


<chapter>
<title>どうすればシステムを壊さずにJava 1.5を安全に使用できますか?</title>
<section>
<body>
<p>
既に述べたように、システムVMとして1.5 JDKを使用するべきではありません。
しかし、ユーザVMとして使用するのは安全です。
</p>

<p>
  まずは、sun-jdk-1.5と1.4 JDKのどれかをemergeします(まだそれらを実行していない場合)。
</p>

<pre caption="JDKのemerge"><comment>最初にsun-jdk-1.5をunmaskしてください。</comment>
# echo "=dev-java/sun-jdk-1.5*" >> /etc/portage/package.unmask
# echo "=dev-java/sun-jdk-1.5*" >> /etc/portage/package.keywords
# emerge =sun-jdk-1.5*
<comment>そして1.4 JDKのどれか一つをemergeします。この例ではblackdownを使用します。</comment>
# emerge =blackdown-jdk-1.4*
</pre>

<p>
  次にシステムVMが1.4 JDKに設定されていることを確認します。
</p>

<pre caption="システムVMの設定"><comment>インストール済みのVMを表示するためにjava-configを使用します。</comment>
# java-config -L
[sun-jdk-1.5.0.05] "Sun JDK 1.5.0.05" (/etc/env.d/java/20sun-jdk-1.5.0.05)
[kaffe-1.1.6] "Kaffe 1.1.6" (/etc/env.d/java/20kaffe-1.1.6)
[blackdown-jdk-1.4.2.02] "Blackdown JDK 1.4.2.02" (/etc/env.d/java/20blackdown-jdk-1.4.2.02)

<comment>システムVMに1.4 JDKを使用するように設定</comment>
# java-config -S blackdown-jdk-1.4.2.02
System Virtual Machine set
You may want to update your enviroment by running:
        "/usr/sbin/env-update &amp;&amp; source /etc/profile"
# /usr/sbin/env-update &amp;&amp; source /etc/profile
</pre>

<p>
  そして、ユーザVMをsun-jdk-1.5にする設定をします。
</p>

<pre caption="ユーザVMの設定"><comment>インストール済みのVMを表示するためにjava-configを使用します。</comment>
$ java-config -L
[sun-jdk-1.5.0.05] "Sun JDK 1.5.0.05" (/etc/env.d/java/20sun-jdk-1.5.0.05)
[kaffe-1.1.6] "Kaffe 1.1.6" (/etc/env.d/java/20kaffe-1.1.6)
[blackdown-jdk-1.4.2.02] "Blackdown JDK 1.4.2.02" (/etc/env.d/java/20blackdown-jdk-1.4.2.02)

<comment>ユーザVMをsun-jdk-1.5に設定</comment>
$ java-config -s sun-jdk-1.5.0.05
Env files in /home/someuser/.gentoo updated. Source these in your shell's profile.

<comment>ログイン時にJavaの設定が読み込まれるようにbash_profileを調整</comment>
$ echo "source ~/.gentoo/java-env" >> ~/.bash_profile
<comment>使用中の端末の環境を更新</comment>
$ source ~/.gentoo/java-env
</pre>

</body>
</section>
</chapter>

<chapter>
<title>システムVMとして1.5 JDKをサポートするための進行中の作業はありますか?</title>
<section>
<body>
  <p>
    1.5のサポートに向けての作業が進行しているという朗報があります。
    Java 1.5がunmaskされるためには、いくつかの大きな変更が必要で、axxoは彼のoverlayでその変更作業を行っています。
  </p>

  <p>
    以下が大きな変更の主なものです
  </p>
    <ul>
      <li>
	    マージ時VM切り替え機能 (<uri link="http://bugs.gentoo.org/86900">#86900</uri>)
      </li>
      <li>
	    マージ時build.xml書き換え機能 (<uri link="http://bugs.gentoo.org/86903">#86903</uri>)
	  </li>
      <li>
	    java-config-ngのaxxoのブランチがcompnerdによって開始
	  </li>
      <li>
	    ユーザVMとシステムVMとで選択するためのPATH環境変数での細工の代わりに、より柔軟性のあるシンボリックリンクを使用
	  </li>
      <li>
	    jikes USEフラグの削除。よって、javac、eclipse-ecj、jikesの選択が簡単に可能
      </li>
    </ul>
  <p>
    このoverlayでの取り組みのバグの全リストは、
	<uri link="https://svn.gentooexperimental.org/svn/java/axxo-overlay/README/bugs-this-fixed">ここ</uri>で参照できます。
    ですが、しなければならないことがまだいくつかあります。
	最新のTODOリストは<uri link="http://gentooexperimental.org/svn/java/axxo-overlay/README/todo">ここ</uri>で参照できます。
  </p>

  <p>
    まずすべきことはoverlayのコードをローカルにチェックアウトすることです。
  </p>

  <warn>
    他のJavaのoverlayはもちろんのこと、このoverlayの使用もサポートされていません!
  </warn>

  <pre caption="1.5 overlayのチェックアウト"># mkdir -p /usr/local/overlays/axxo-overlay
# svn co https://svn.gentooexperimental.org/svn/java/axxo-overlay /usr/local/overlays/axxo-overlay</pre>


  <p>
    次に、make.confを少し変更する必要があります。
	一行目はoverlayが存在する場所を設定します。
	二行目でrsyncの対象除外指定ファイルを設定します。
	これはemerge syncによってoverlayにあるパッケージを更新してしまうことを防ぐために使用されます。
	このoverlayには、portage内のもので更新される対象となってしまうパッケージがあります。
	よって、リビジョンが<path>/usr/portage</path>からインストールされてしまうことを防ぐために必要です。
  </p>

  <pre caption="make.confの更新">
PORTDIR_OVERLAY="${PORTDIR_OVERLAY} /usr/local/overlays/axxo-overlay"
RSYNC_EXCLUDEFROM=/usr/local/overlays/axxo-overlay/rsync-exclude</pre>


  <p>
    このoverlayは、新しいjava-configに加えて、最新のportageを必要とします。
  </p>

<pre caption="portageとjava-configの更新">
# emerge portage java-config
</pre>

  <p>
    overlayにあるJDK、JRE、Javaコンパイラは、Javaパッケージをemergeするのに必要なメタデータを追加でインストールします。
    初めてこの作業をしているときは、衝突検出機能を無効にしなければなりません。
  </p>
  <pre caption="JRE/JDKとコンパイラの更新">
<comment>blackdown-jdk-1.4とsun-jdk-1.5がインストール済みなら...</comment>
# FEATURES="-collision-detect" emerge --oneshot =blackdown-jdk-1.4* =sun-jdk-1.5*
<comment>そして、jikesとeclipse-ecjがインストール済みなら...</comment>
# emerge --oneshot jikes eclipse-ecj</pre>

  <p>
    すでにユーザVMを設定している場合、それ用の設定ファイルを削除する必要があります。
  </p>

  <pre caption="ユーザVM設定の削除">
$ rm ~/.gentoo/java*
<comment>~/.gentoo/java-envを読み込まないように~/.bashrcと~/.bash_profileを更新する必要があります</comment></pre>

  <p>
    これでoverlayを使用するように、すべて設定されたはずです。
  </p>

  <p>
    説明文書も、新しいoverlayの使用法に合わせて更新しました。
  </p>
    <ul>
      <li><uri link="http://gentooexperimental.org/svn/java/axxo-overlay/README/docs/java-user.html">User Guide</uri></li>
      <li><uri link="http://gentooexperimental.org/svn/java/axxo-overlay/README/docs/java-devel.html">Developer Guide</uri></li>
    </ul>


  <p>
    <mail link="axxo@gentoo.org">axxo</mail>と
	<mail link="nichoj@gentoo.org">nichoj</mail>は改良に対するどんな意見/提案/修正/パッチも歓迎します。
  </p>

</body>
</section>

<section>
<title>なぜportageを更新する必要がありますか?</title>
<body>
  <p>
     パッケージのemerge処理中に使用されるjdkに対してフック処理が必要です。
	 フック処理機能は、最新の2.0.54でportageに追加される予定ですが、それまではoverlayでportageの特別バージョンを提供する必要があります。
  </p>
</body>
</section>

<section>
<title>なぜときどきdigest有効性チェックが失敗するのですか?</title>
<body> 
  <p>
    開発者は修正後のdigest再生成をときどきし忘れます。
    それで有効性チェックが失敗します。
    FEATURES="-strict"を使用するか、ユーザ自身でebuild manifestを実行することで回避できます。
  </p>
</body>
</section>

<section>
<title>Portageツリーに統合されるのはいつですか?</title>
<body>
  <p>
    このoverlayは作成当初からPortageにフック処理を必要としているので、stableユーザに配信できるようになるのは、2.0.54がstableになった後です。
    同時期に~archとarchになる場合については、まだ何も決まっていませんが、これが今のところ有力な案です。
  </p>
</body>
</section>
</chapter>

<chapter>
<title>それで、1.5 JDKを使用しているシステムを壊してしまいました...どうやって直せばいいですか?</title>
<section>
<body>
  <p>修復するには、JDK 1.5かJDK 1.4かのどちらかでJavaベースのパッケージすべてを再度マージしなければなりません。
その作業を正しい順番で間違いなく実行する必要があります。
例えば、JDK 1.5でマージしたパッケージA、B、Cの3つのパッケージがあり、パッケージCはBに依存し、パッケージBはAに依存する場合、最初にパッケージAを、次にBを、そして最後にCをemergeしなければならないでしょう。
これを間違うと、1.4 VMで1.5のバイトコードの使用を試みるため、おそらくclass versionエラーになります。</p>

  <p>gentoolkitにある以下のコマンドは、再マージが必要である可能性があるパッケージのリストを出力します。</p>
  <pre caption="インストール済みのJavaパッケージの表示">$ equery depends virtual/jre
$ equery depends virtual/jdk</pre> 



  <p>以下のコードは、修復が必要なパッケージを再マージするのに助けとなるようなコードです。ダウンロードされてるpythonスクリプトは、どのバージョンでコンパイルされたかを判断するために使われます。</p>
  <pre caption="Java 1.5でビルドされたパッケージの修復">wget http://gentooexperimental.org/svn/java/javatoolkit/src/bsfix/class-version-verify.py; chmod +x class-version-verify.py;
emerge portage-utils; emerge -1 $(for jar in $(./class-version-verify.py -t 1.4 /usr/share/*/lib/*.jar -f); do qfile -C -q ${jar}; done)</pre>

  <p>nichojはこの作業をさらに自動化するスクリプトに関する作業も行っています。それは、
<uri link="http://dev.gentoo.org/~nichoj/scripts/java-1.5-fixer">ここ</uri>から利用できます。</p>
</body>
</section>
</chapter>

</guide>
