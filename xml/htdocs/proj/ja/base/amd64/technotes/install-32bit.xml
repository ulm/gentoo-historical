<?xml version='1.0' encoding='UTF-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/ja/base/amd64/technotes/install-32bit.xml,v 1.1 2005/05/22 17:26:07 idani Exp $ -->
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The context of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommonds.org/licenses/by-sa/1.0 -->

<sections>

<version>2004.3</version>
<date>February 19, 2005</date>
<!-- Original revision: 1.2-->

<section><title>32-bitプログラムを走らせる</title>
<body>
<impo>必ずカーネル内の"Executable File Formats"の下の"IA32 Emulation"を有効にしている必要があります。</impo>
<p>
現在、多くの変更が進行中であり、32-bit環境を設定する一番簡単な方法はエミュレーションライブラリをインストールすることです。
</p>
<pre>
emerge app-emulation/emul-linux-x86-baselibs
emerge app-emulation/emul-linux-x86-xlibs
emerge app-emulation/emul-linux-x86-gtklibs
emerge app-emulation/emul-linux-x86-qtlibs
</pre>
<p> 
エミュレーションライブラリは/emul/linux/x86ディレクトリを作成しプリコンパイルされた32-bitアプリケーションを走らせるために適切なほとんどのライブラリをインストールします。 また適切な/emulディレクトリを指し示す/lib32や/usr/lib32などのsymlinkを作成します。64-bit版はld-linux-x64-64.so.2として知られてる/emul/linux/x86/lib/ld-linux.so.2から/libのld-linux.so.2のsymlinkを作成します。
</p>
<p>
これらの3パッケージをインストールすることで、ほとんどのプリコンパイルされた32-bitアプリケーション(例 Java, Oracle 9i, Opera)を走らせることができます。
</p>
</body>
</section>

<section>
<title>multilibを使用して64-bit環境で32-bitアプリケーションをコンパイルする</title>
<body>
<p>
最初に、前のセクションからの標準32-bit環境が準備されていなければなりません。 <path>/etc/make.conf</path>内の<c>multilib</c>フラグを追加して<path>gcc-3.3.3-r5</path>をemergeもしくは再emergeしてください。 これでCFLAG設定で<c>-m32</c>を使って32-bitバイナリを作成することが出来るGCCをmultilibサポートで構築します。multilibをインストールしても64-bitコンパイルには影響しません(しかしながら、何らかの理由で確実にしたいなら<c>-m64</c>を渡すことも出来ます)。
</p>
<note><path>/etc/make.conf</path>に<c>-m32</c>を加えたり、portageと<c>-m32</c>を一緒に使用することは、如何なる理由であれ止めて下さい。 32-bitコンパイルは、portageシステムを通してではなく、手動で32-bitコンパイルを行なうべきです。 これに関してよく注意を払わないと、依存関係を著しく損なう恐れがあります。 どうやって直すかなんて、聞かないこと。 あなたの責任です。
</note>
</body>
</section>

<section><title>32-bit chroot環境を作成する</title>
<body>
<p>
32-bitエミュレーションライブラリをインストールすることで、64-bit環境でほとんどの32-bitアプリケーションを走らせることが出来ます。 しかしながら、新しい32-bitアプリケーションやライブラリをインストールすることは簡単なことではありません。  これはMozillaのFlashプラグインやWineを使用することを難しくさせます。 32-bit chrootのインストールは、あなたの好みのパッケージマネージャから32-bitアプリケーションとライブラリをインストールすることを許可します。 この意味は、あなたが意図したようにパッケージを最適化できるということです。 emul libは最小の最適化でコンパイルされています、なぜならIA64プラットフォームでも使用されているからです。 主な欠点はハードディスクのスペースでしょう。 すべてのライブラリとアプリケーションは2回インストールされるからです。
</p>
<p>
32-bit chrootを設定するには、まずあなたがchrootしたいディレクトリ(もしくはパーティション)を作成します。 そしてx86 stageをそのディレクトリに解凍し(AMD64stageは使用しないように)、procをmountします。 次のステップはchrootに入ることです。 これはマニュアルにあるように出来ます。 しかしながら、linux32プログラムを使用して'uname -m'を'i686'に変える必要があります。 変わりにこれを走らせて下さい
</p>
<pre>
linux32 chroot /mnt/gentoo32 /bin/bash
</pre>
<p>
これでchrootの中にいます。 'uname -m'は'i686'を表示するべきです。 make.confでは、このようなフラグを使用します。
</p>
<pre>
CHOST="i686-pc-linux-gnu"
CFLAGS="-O2 -march=athlon-xp -msse2 -msse -pipe"
ACCEPT_KEYWORDS="~x86"
</pre>
<p>
gcc-3.4がリリースされれば、-march=k8を使用してamd64に最適化出来ます、しかしこれが32-bitコンパイルでも有効だとchangelogには記載されておりません。
</p>
<p>
マニュアルにしたがってインストールを続けます。 ほとんどのstage3以降の部分はとばすことが出来ます。 二つめのカーネルloggerやcrontabを設定する必要はありません。 しかし、user、host、resolv.confを設定する必要はあります。 32-bit chrootはほぼ使用できる状態になっています。 しかしながら、Xアプリケーションを使用することは今は出来ません。
</p>
<p>
Xクライアントはunixソケットを使用してXサーバと通信します。 これらのソケットは/tmp内のファイルです、しかしXサーバはchroot外で走ります。 この意味はchroot内のXクライアントはunixソケットにアクセス出来ないこととなります。 これを解決するために2つの方法があります。 TCPソケットを使用する方法、しかしこれはあまり速くありません。 最適な解決法は、chroot内に同じ/tmpをmountすることです。これは、(chrootの外から)以下のようにします。
</p>
<pre>
mount -o bind /tmp /mnt/gentoo32/tmp
</pre>
<p>
もちろん、chroonのなかからXサーバに接続する前にchrootの外から<c>xhost local:localhost</c>を走らせておく必要があります。 ディスクの容量をセーブするために他のディレクトリをmountすることも可能です。 候補としては<path>/home</path>, <path>/usr/portage/distfiles</path>と<path>/usr/share</path>です。

</p>
<p>
chroonに入るには、次のコマンド使ってchroot内の正しい環境変数を設定してください。
</p>
<pre>
linux32 chroot /mnt/32-bit /bin/bash --login
</pre>
</body>
</section>
 
</sections>
