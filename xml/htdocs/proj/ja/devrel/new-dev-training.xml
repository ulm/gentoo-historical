<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/proj/ja/devrel/new-dev-training.xml">
<title>Gentoo新人開発者教育</title>
<author title="Author">
<mail link="avenj@gentoo.org">Jon Portnoy</mail>
</author>
<author title="Author">
<mail link="jforman@gentoo.org">Jeffrey Forman</mail>
</author>
<author title="翻訳">
<mail link="ikeda@cs.comp.kyutech.ac.jp">池田 健吾</mail>
</author>

<abstract>Gentoo新人開発者向けの教育です。</abstract>

<version>1.0.2</version>
<date>24 April 2005</date>

<!-- Original revision: 1.13 -->

<chapter>
<title>CVSを利用する</title>
<section>
<title>はじめに</title>
<body>
<p>このガイドをCVSの利用マニュアルにするつもりはありません。
CVSの利用に関しては、CVS infoページや<uri>http://www.gentoo.org/doc/en/cvs-tutorial.xml</uri><uri link="http://www.gentoo.org/doc/ja/cvs-tutorial.xml">(日本語訳)</uri>を参照してください。
代わりに、このガイドでは特にGentooのebuildツリーにおけるCVSとRepomanの利用を中心に説明していきます。
</p>
</body>
</section>
<section>
<title>設定</title>
<body>
<p>普通、<path>~/.cvsrc</path>に以下の行があれば十分です。
</p>

<pre caption="~/.cvsrc">
cvs -q -z0
diff -u -b -B
checkout -P
update -d -P
</pre>

<p>ダイジェストが正しいか確認するために、<c>FEATURES</c>設定には<c>cvs</c>を設定してください。</p>

<p>最後に、CVS利用者の多くは圧縮(-z#)を使うでしょう。
ダイヤルアップ接続でない開発者は-z0を使うようお願いしています。
CVSリポジトリの内容やCVSサーバの負荷にもよるので、圧縮しなくても速度が向上していることが実感できます。</p>
</body>
</section>
<section>
<title>チェックアウト</title>
<body>
<p>GentooのCVSリポジトリには有用なモジュールがいくつかあります。
ebuildは、<path>gentoo-x86</path>モジュールに保管されています。
<path>gentoo-src</path>モジュールには、実用的なプロジェクトから不活発なプロジェクトまで様々あります。
<path>gentoo</path>モジュールには、Webサイト用のXML、ドキュメント、開発者のディレクトリ、開発者の画像用などがあります。
</p>

<pre caption="gentoo-x86をチェックアウトする">
# cvs -d username@cvs.gentoo.org:/var/cvsroot co gentoo-x86
</pre>

<p>
ツリーで作業をする前には常に、アップデートして変更をチェックし、パッケージの衝突を防ぐとよいです。
ツリー全体をアップデートしたくなければ、ツリーの任意のサブディレクトリだけをアップデートすることもできますが、ときどきツリー全体をアップデートしてください。
</p>
		
<pre caption="gentoo-x86でアップデートする">
# cd gentoo-x86
# cvs update
</pre>

</body>
</section>
<section>
<title>追加と削除</title>
<body>
<p>もしapp-miscの<c>foo</c>という新しいパッケージを追加する準備ができている場合は以下の通りにします。</p>

<pre caption="追加例">
# cd CVSROOT/app-misc <comment>(CVSROOTを、あなたがチェックアウトしたCVSツリーの位置に変更してください)</comment>
# cvs update <comment>(ツリーの一部で作業する前には必ずアップデートしてください！)</comment>
# mkdir foo
# cvs add foo <comment>(ここで、CVSリポジトリにfooパッケージディレクトリを追加します)</comment>
# cd foo
# cp /path/to/foo-1.0.ebuild ./ <comment>(あなたのCVSツリーの外側のoverlayに、作業中のebuildを保存しておくとよいでしょう)</comment>
<comment>(ChangeLogを忘れずに作成しましょう。作成については、echangelogのmanページを参照してください)</comment>
# ebuild foo-1.0.ebuild digest <comment>(ダイジェストを作成する場合は、PORTDIR_OVERLAYにCVSディレクトリを設定していることを確認してください)</comment>
# cvs add foo-1.0.ebuild ChangeLog files
# cvs add files/digest-foo-1.0 <comment>(FEATURES=autoaddcvsとするとこれをやってくれます)</comment>
</pre>

<p>また、必ずmetadata.xmlファイルにメンテナ情報を追加してください。
詳しい情報は、<uri link="/proj/en/devrel/handbook/handbook.xml?part=2&amp;chap=4">metadata guide</uri>をご覧ください。</p>
<p>この時点で、コミット(commit)する準備はできています(後述のセクション、コミットを参照してください)。
でも、foo-1.1がリリースされたときにfoo-1.0を削除したい場合はどうすればよいでしょうか？</p>

<pre caption="削除例">
# cd CVSROOT/app-misc/foo
# cvs update
# rm foo-1.0.ebuild files/digest-foo-1.0 <comment>(まずファイルを削除しておくべきです)</comment>
# cvs remove foo-1.0.ebuild files/digest-foo-1.0
</pre>

<p>ということで、コミットする準備ができました(後述のセクション、コミットをご覧ください)。</p>

</body>
</section>
<section>
<title>コミット</title>
<body>
<p>CVSにコミットする場合、<c>cvs commit</c>より<c>repoman commit</c>を使うほうが多いです。
repomanは、基本的なチェックを実行し、manifestを作成する品質保証(QA)ツールです。
もしrepomanの出力がサッパリ理解できないなら、<c>man repoman</c>を見てください。
また、鍵のパスフレーズを繰り返し入力することにうんざりするかもしれません。
そこで、keychain(<uri>http://www.gentoo.org/proj/en/keychain.xml</uri>)が手助けになるでしょう。</p>

<pre caption="commit例">
<comment>(repomanを実行する前に、現在のディレクトリにrootが所有するファイルが無いことを確認してください)</comment>
# repoman scan <comment>("scan"は、現在のディレクトリに品質保証上の問題があるか調査します。"full"はさらに徹底的にやります)</comment>
# repoman commit <comment>("commit"は、scanしてからコミットします。また、ダイジェストも更新します。詳細かつ有用なcvs changelogメッセージを利用するか確認してください)</comment>
</pre>

</body>
</section>

</chapter>
<chapter>
<title>雑則</title>
<section>
<title>mirrorにファイルを置く</title>
<body>
<p>新しいファイルをGentoo mirrorのdistfilesに置く手続きはとても簡単です。 
<path>dev.gentoo.org</path>の<path>/space/distfiles-local</path>に新しいファイルをコピーしてください。</p>
</body>
</section>

<section>
<title>メール</title>
<body>
<p>開発者が自分のメールを管理できるインフラがあります。
<uri>http://www.gentoo.org/proj/en/infrastructure/dev-email.xml</uri><uri link="http://www.gentoo.org/proj/ja/infrastructure/dev-email.xml">(日本語訳)</uri>には、@gentoo.orgメール設定の説明があります。</p>
</body>
</section>

<section>
<title>休暇</title>
<body>
<p>Gentoo開発者は休暇を取ることがよくあります。大学の試験やハネムーンでは開発から少し離れる必要があるでしょう。
Gentooから離れた生活を過ごすのは歓迎ですが、開発から離れたこと、戻ってきたことは把握しておきたいです。
開発から離れるときには、自分が係わっている開発グループ(例えばgentoo-releng@gentoo.orgであったりsparc@gentoo.orgであったり)に連絡してください。
あなたが開発から離れたことをグループに知らせ、不在時にパッケージを更新する必要がある場合には彼らに連絡が行くでしょう。</p>
<pre caption="休暇の例">
<comment>(開発から離れるとき、あなたのhomeディレクトリで…)</comment>
# touch ~/.away
# echo "I've gone to the mountains, will be away from June 29 - Aug 4th, \
contact zhen, cshields, or klieber in my absence." > ~/.away
<comment>(訳注：「山に行ってます。7月29日から8月4日までは不在です。不在中の連絡はzhenあるいはcshieldsもしくはklieberまでお願いします」という文をechoしています)</comment>
<comment>(これで、http://dev.gentoo.org/devawayにスクリプトによる不在通知が出ます。このページは一時間ごとに更新されます)</comment>

<comment>(開発に戻るとき)</comment>
# rm ~/.away
</pre>
</body>
</section>

</chapter>
</guide>
