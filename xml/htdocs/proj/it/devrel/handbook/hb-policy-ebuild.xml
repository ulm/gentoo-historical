<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/it/devrel/handbook/hb-policy-ebuild.xml,v 1.9 2008/02/28 20:52:42 scen Exp $ -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- This document was last synched to:
     cvs://gentoo/gentoo/xml/htdocs/doc/en/policy.xml :: R1.35.
-->

<sections>
<version>1.0.3</version>
<date>2007-01-21</date>

<section>
<title>Linee guida generali</title>
<subsection>
<body>

<p>
Queste sono alcune linee guida generali da seguire per lo sviluppo:
</p>

<ul>
  <li>
    Eseguire sempre l'inserimento (check in) dei cambiamenti con repoman; usare
    repoman commit al posto di cvs commit.</li>
  <li>
    Se un pacchetto è corrotto anche nella sua versione corrente o se ha un
    processo di compilazione/installazione veramente orribile, verificare come
    si comportano altre distribuzioni:
    <ul>
      <li><uri link="http://www.debian.org/distrib/packages">Debian</uri></li>
      <li>
        <uri
        link="http://cvs.mandriva.com/cgi-bin/viewvc.cgi/SPECS/">Mandriva</uri>
      </li>
      <li><uri link="http://cvs.fedora.redhat.com/">Fedora</uri></li>
    </ul>
  </li>
  <li>
    Il proprio pacchetto, nel momento in cui risulta completato e non
    mascherato, si suppone funzioni da subito per l'utente finale. La modifica
    del prodotto installato per farlo funzionare dovrebbe essere opzionale; per
    questo motivo bisogna installare il pacchetto con delle ragionevoli
    impostazioni predefinite.
  </li>
  <li>
    Non aver timore di consultare la documentazione in linea di Gentoo e di
    guardare come sono scritti e mantenuti gli ebuild creati da sviluppatori
    più esperti. Non farsi problemi a contattare direttamente sviluppatori più
    esperti per porre qualsiasi domanda di natura tecnica o di regolamento.
  </li>
  <li>
    Fare attenzione riguardo ai propri commit. Ricordarsi che i propri
    cambiamenti possono potenzialmente danneggiare migliaia di utenti. Se i
    propri cambiamenti causano qualsiasi tipo di malfunzionamento nel portage
    tree, devono essere corretti in modo tempestivo
  </li>
  <li>
    Ogni pacchetto deve essere accompagnato da un file <uri
    link="?part=2&amp;chap=4">metadata.xml</uri> il quale elenca, tra le diverse
    informazioni, quale herd /gruppo) (e/o quali mantenitori) sono incaricati
    del pacchetto.
  </li>
</ul>

</body>
</subsection>
</section>

<section>
<title>Linee guida specifiche</title>
<subsection>
<title>fPIC</title>
<body>

<p>
Su certe architetture, le librerie condivise devono essere compilate con -fPIC.
Nell'architettura x86 ed in altre, le librerie condivise possono compilare senza
-fPIC, ma è uno spreco e potenzialmente potrebbe causare una diminuzione di
prestazioni. Se viene trovato un pacchetto che non compila le librerie condivise
con -fPIC, correggere il Makefile per compilare <b>solo le librerie
condivise</b> con -fPIC. Sono disponibili maggiori informazioni su PIC alla
pagina <uri>http://www.gentoo.org/proj/en/hardened/pic-internals.xml</uri>
(ndT: in inglese). Se non si è sicuri, chiedere aiuto in un forum pubblico di
sviluppatori (come la mailing list gentoo-dev o sul canale irc #gentoo-dev).
</p>

</body>
</subsection>
<subsection>
<title>Perl</title>
<body>

<p>
I nuovi moduli Perl saranno aggiunti al portage solo quando una delle seguenti
condizioni sarà verificata:
</p>

<ul>
  <li>I(l) modulo(i) soddisfa una dipendenza</li>
  <li>I(l) modulo(i) non può essere gestito da <c>g-cpan</c></li>
  <li>I(l) modulo(i) aggiunge funzionalità agli ebuild esistenti</li>
  <li>
    I(l) modulo(i) fornisce strumenti, applicazioni o altre funzionalità (per
    esempio di più di quelle che offre il loro .PM)
  </li>
</ul>

<p>
Assicurarsi che almeno un membro dell'herd di perl approvi questo tipo di
aggiunte.
</p>

</body>
</subsection>
</section>

<section>
<title>Regole per l'Ebuild</title>
<subsection>
<title>Regole per il nome</title>
<body>

<p>
Il nome del file dell'ebuild consiste in quattro sottosezioni logiche:
</p>

<p>
<c>pkg-ver{_suf{#}}{-r#}.ebuild</c>
</p>

<note>
Le parentesi graffe (<c>{}</c>) delimitano campi opzionali e non appariranno nel
nome letterale del pacchetto. <c>#</c> rappresenta qualsiasi intero positivo
diverso da zero.
</note>

<p>
La prima sottosezione, <c>pkg</c>, è il nome del pacchetto, il quale deve
contenere soltanto caratteri minuscoli, i numeri 0-9, qualsiasi numero di
trattini singoli (<c>-</c>), underscore (<c>_</c>) o caratteri più (<c>+</c>).
Esempio: <c>util-linux</c>, <c>sysklogd</c> e <c>gtk+</c>. Ci sono alcuni
pacchetti in Portage che non seguono queste regole, ma il <e>proprio</e>
pacchetto le dovrà seguire.
</p>

<p>
La seconda sottosezione, <c>ver</c>, è la versione del pacchetto, che
normalmente dovrebbe essere uguale alla versione del file archivio dei sorgenti
principale. La versione è normalmente composta da due o tre (o più) numeri
separati da punti, come <c>1.2</c> o <c>4.5.2</c>, e potrebbero avere una
singola lettera alla fine dell'ultima cifra; per esempio, <c>1.4b</c> o
<c>2.6h</c>. La versione del pacchetto è unita al nome del pacchetto con un
trattino. Esempio: <c>foo-1.0</c>, <c>bar-2.4.6</c>.
</p>

<p>
La terza sottosezione, <c>{_suf{#}}</c>, è opzionale è può contenere uno di
questi suffissi predefiniti, elencati dal meno recente al più recente:
</p>

<table>
<tr>
  <th>Suffisso</th>
  <th>Significato</th>
</tr>
<tr>
  <ti><c>_alpha</c></ti>
  <ti>Rilascio alpha</ti>
</tr>
<tr>
  <ti><c>_beta</c></ti>
  <ti>Rilascio beta</ti>
</tr>
<tr>
  <ti><c>_pre</c></ti>
  <ti>Pre rilascio</ti>
</tr>
<tr>
  <ti><c>_rc</c></ti>
  <ti>Candidato ad essere un rilascio</ti>
</tr>
<tr>
  <ti>(none)</ti>
  <ti>Rilascio normale</ti>
</tr>
<tr>
  <ti><c>_p</c></ti>
  <ti>Livello di correzione/patch (normalmente seguito da un intero)</ti>
</tr>
</table>

<p>
Qualsiasi di questi suffissi può essere immediatamente seguito da un numero
positivo diverso da zero, per esempio, <c>linux-2.4.0_pre10</c>. Assumendo la
parte della versione identica, il suffisso è ordinato come segue (più basso
significa più vecchio): <c>_alpha</c> &lt;<c>_beta</c> &lt; <c>_pre</c> &lt;
<c>_rc</c> &lt; (no suffix) &lt; <c>_p</c>.
</p>

<p>
Quando si confrontano suffissi identici seguiti da un intero, quello con il
numero più grande viene considerato il più recente. Esempio:
<c>foo-1.0_alpha4</c> è più recente di <c>foo-1.0_alpha3</c>.
</p>

<p>
La quarta sottosezione del nome del pacchetto è il numero specifico della
revisione Gentoo Linux (<c>{-r#}</c>). Questa sottosezione, come il suffisso,
è opzionale. <c>#</c> è un numero positivo diverso da 0 zero; esempio,
<c>pacchetto-4.5.3-r3</c>.
</p>

<p>
Questo numero di revisione è indipendente dalla versione del relativo file
archivio dei sorgenti, ed è usata per informare le persone della disponibilità
di una nuova e migliorata versione di un particolare pacchetto per Gentoo Linux.
Il rilascio iniziale degli ebuild non deve avere il numero della revisione,
per esempio <c>package-4.5.3</c> ed è considerata da Portage come se avesse un
numero di revisione pari a zero. Questo significa che il conteggio viene fatto
in questo modo: <c>1.0</c> (versione iniziale), <c>1.0-r1</c>, <c>1.0-r2</c>,
ecc.
</p>

</body>
</subsection>
<subsection>
<title>Incrementi di versione e revisione</title>
<body>

<p>
Il numero della revisione di un pacchetto deve essere incrementata dagli
sviluppatori di Gentoo Linux quando l'ebuild ha ricevuto delle modifiche che
impongono agli utenti di effettuare un aggiornamento. Generalmente, questo è il
caso in cui le correzioni vengono fatte su di un ebuild che influenza i file
installati, ma l'ebuild usa lo stesso file archivio del precedente rilascio. Se
viene fatto un cambiamento interno all'ebuild di tipo stilistico il quale non
modifica nessun file installato, allora non è necessario incrementare il numero
della revisione. Allo stesso modo, se nell'ebuild viene corretto un problema di
compilazione che affliggeva alcuni utenti non è necessario incrementare il
numero della revisione, in quanto per tutti quelli a cui il pacchetto funziona
perfettamente non avranno benefici nell'installare una nuova revisione, e quelli
che hanno avuto problemi di installazione non avranno il pacchetto installato
(perché la compilazione è fallita) per cui non c'è bisogno di fare una nuova
revisione per forzare un aggiornamento. La pubblicazione di una revisione non è
inoltre necessaria se il problema è stato riscontrato da un numero minimo di
utenti ed il pacchetto ha un tempo medio di compilazione non trascurabile; in
queste circostanze usare il proprio giudizio nel miglior modo possibile.
</p>

<impo>
Ogni volta che si crea una nuova revisione di un ebuild, assicurarsi di
aggiornare il file <path>ChangeLog</path> nella directory dell'ebuild.
Dimenticarsi di farlo viene considerata una grave mancanza e potrebbe portare a
delle azione disciplinari.
</impo>

<p>
Gli ebuild devono essere basati sulla versione precedente dell'ebuild per
assicurare che i cambiamenti non vengano accidentalmente cancellati. Le
correzioni devono includere dei commenti appropriati nell'ebuild che spiegano
cosa fanno ed il perché sono necessarie. Se non si ha dimestichezza con le
correzioni, o non si riesce a determinare se sono veramente necessarie, non si
dovrebbe aggiornare l'ebuild.
</p>

</body>
</subsection>
<subsection>
<title>Pacchetti 'virtuali' (virtual)</title>
<body>

<p>
Portage supporta il concetto di pacchetti "virtuali" (virtual). Con l'utilizzo
di pacchetti virtuali è possibile mappare un particolare nome di una
categoria/pacchetto con un altro nome.
</p>

<p>
Questo è un esempio di utilizzo dei pacchetti virtuali. Si supponga di creare
pacchetto di cron chiamato <c>foocron</c>: Gentoo Linux è correntemente
impostato in modo che se qualcosa ha bisogno di un pacchetto cron esso dipenderà
dal pacchetto <c>virtual/cron</c>. Questo permette agli ebuild di assicurare che
ci sia un qualche tipo di pacchetto cron disponibile permettendo così agli
utenti di installare il pacchetto cron che preferiscono. Per inserire il proprio
pacchetto <path>foocron-1.0.ebuild</path> in questo sistema, bisogna aggiungere
una linea all'ebuild, in questo modo:
</p>

<pre caption="Come fornire un pacchetto virtuale">
PROVIDE="virtual/cron"
</pre>

<p>
A questo punto, a seguito dell'installazione di <c>foocron-1.0</c>, il pacchetto
<c>virtual/cron</c> verrà registrato. Se precedentemente non era stato
installato nessun pacchetto cron, vorrà dire che qualsiasi pacchetto
<e>dipendente</e> da <c>virtual/cron</c> avrà la dipendenza completamente
soddisfatta. Notare che è consigliabile specificare solamente un valore
<c>PROVIDE</c> per i pacchetti virtuali definiti (vedere
<path>/etc/make.profile/virtuals</path>). Inoltre si prega che (a)
<c>PROVIDE</c> non è pensato per gestire la rinominazione dei pacchetti e (b)
non usarlo con i pacchetti virtuali nuovo stile.
</p>

<p>
C'è un secondo componente nell'implementazione dei pacchetti virtuali in Gentoo
Linux. Cosa succederebbe se non è stato installato alcun pacchetto che fornisce
<c>virtual/cron</c>? Come fa Portage a soddisfare la dipendenza per
<c>virtual/cron</c>? Portage prende in carico questa situazione usando un file
specifico per architettura contenente la mappatura dei pacchetti virtuali
chiamato <path>virtuals</path> il quale è memorizzato nella directory del
profilo <path>/etc/make.profile</path>. Guardando nel proprio file
<path>virtuals</path>, si noterà che il contenuto assomiglia a quanto segue:
</p>

<pre caption="Esempio di file virtual">
virtual/lpr             net-print/cups
virtual/python          dev-lang/python
virtual/mta             net-mail/ssmtp
</pre>

<p>
La prima riga di questo file dice a Portage che se un pacchetto dipende da
<c>virtual/lpr</c> e non c'è installato alcun <c>virtual/lpr</c> disponibile nel
Portage Tree, allora <c>net-print/cups</c> soddisferà questa dipendenza.
<c>net-print/cups</c> contiene una linea uguale a <c>PROVIDE="virtual/lpr"</c>
in modo che tutte le dipendenze future di <c>virtual/lpr</c> saranno
soddisfatte.
</p>

<p>
In base alle linee guida degli sviluppatori, se viene aggiunto il pacchetto
<c>foocron</c>, ovviamente bisogna assicurarsi che tutti i programmi che
dipendono da <c>virtual/cron</c> riescano a funzionare correttamente con esso. E
se è stato aggiunto il pacchetto chiamato <c>foobarosity</c> che dipende da
<c>virtual/cron</c>, allo stesso modo bisognerà assicurarsi che tutti i
pacchetti che forniscono <c>virtual/cron</c> siano adeguati per il corretto
funzionamento di <c>foobarosity</c>.
</p>

<p>
Prima di creare un nuovo pacchetto virtuale, si prega di avviare una discussione
nella mailing list interna riguardo ad esso. Tenere informati gli sviluppatori a
proposito di nuovi pacchetti virtuali è essenziale per assicurare il loro uso
in modo uniforme.
</p>

</body>
</subsection>
<subsection>
<title>Ambito</title>
<body>

<p>
Ogni volta che un ebuild viene derivato, le funzioni e le variabili al suo
interno vengono caricate in memoria dall'interprete dello script. Tuttavia, solo
le variabili e le istruzioni che non sono parte di una funzione vengono
interpretate: funzioni come <c>src_compile()</c> vengono eseguite da Portage
solamente quando l'ebuild ha raggiunto la fase di compilazione.
</p>

<p>
Il codice contenuto in queste funzioni è considerato di "ambito locale" mentre
tutto ciò che sta all'esterno delle funzioni è in "ambito globale", che
comporta la loro esecuzione ogni volta che l'ebuild viene derivato.
</p>

<p>
Un'applicazione esterna (come grep, sed o awk) non dovrebbe mai essere chiamata
nell'ambito globale per questioni di prestazioni, e invece dovrebbero essere
usate delle alternative come l'uso sostitutivo di funzioni native di bash. Si
possono trovare delle utili alternative nella <uri
link="http://www.pluto.it/files/ildp/guide/abs/">Guida avanzata di scripting
Bash</uri> (ndT: <uri link="http://www.tldp.org/LDP/abs/html/">qui</uri>
l'originale inglese).
</p>

<p>
In più, non si può garantire l'esistenza nel sistema delle eventuali
applicazioni esterne richiamate nell'ambito globale. Se il comando viene messo
in un ambito locale (per esempio, nella funzione <c>pkg_setup()</c>), è
possibile garantirne la presenza aggiungendolo alla variabile <c>${DEPEND}</c>
dell'ebuild.
</p>

</body>
</subsection>
<subsection>
<title>Politiche per i sorgenti da CVS</title>
<body>

<p>
Ci sono due modi differenti di compilare un ebuild basato su sorgenti che
provengono da un albero di sviluppo CVS. Il primo e tradizionale metodo è di
creare un ebuild di tipo "CVS snapshot" (ndT: "fotografia" del CVS) creando un
file archivio (tarball) personale dal repository CVS ufficiale, facendo un
mirroring dei sorgenti nel repository ufficiale dei distfile di Gentoo, e
scrivendo un ebuild per l'uso specifico di questo file archivio. In seguito si
farà riferimento a questi tipi di ebuild CVS con il termine "ebuild per snapshot
CVS".
</p>

<p>
L'altro metodo per la creazione di ebuild basati sul CVS è di usare
<path>cvs.eclass</path> per creare un ebuild CVS "live". Questi tipi di ebuild
recuperano il più recente codice sorgente in fase di sviluppo dal repository CVS
durante la fase di scaricamento (fetch) dei sorgenti, assicurando che i sorgenti
siano il più possibile aggiornati. In seguito si farà riferimento a questi tipi
di ebuild CVS con il termine "ebuild 'live'" (ndT: "in diretta/dal vivo").
</p>

<p>
I seguenti paragrafi spiegano in dettaglio le regole riguardanti l'uso di ebuild
basati su CVS. Tenere presente che esistono delle regole molto rigide riguardo
all'aggiunta di questo tipo di ebuild al Portage tree.
</p>

<p>
Ebuild per snapshot CVS sono maggiormente preferiti rispetto ad ebuild "live"
(che utilizzano <path>cvs.eclass</path>).
</p>

<p>
Gli ebuild per snapshot CVS sono autorizzati se uno snapshot del CVS contiene
delle migliorie conosciute necessarie al regolare funzionamento di un pacchetto
software, o si sa (o è stato provato) che la versione da CVS di un particolare
pacchetto software semplicemente funziona meglio della normale versione
rilasciata.
</p>

<p>
Ebuild "live" (basati su <path>cvs.eclass</path>) generalmente sono designati
per la comodità degli sviluppatori e dovrebbero sempre essere mascherati con una
keyword <c>~[arch]</c>. È impossibile garantire la solidità di un ebuild "live"
(basato su <path>cvs.eclass</path>) in quanto l'albero dei sorgenti CVS
ufficiale può subire continue modifiche, e conseguentemente questo tipo di
ebuild dovrebbero essere sempre mascherati.
</p>

<p>
Sia per gli ebuild CVS "live" sia per ebuild CVS "snapshot", <b>il relativo
sviluppatore ha la responsabilità di assicurare il loro corretto
funzionamento</b>; per ovvie ragioni questo è difficile da attuare per gli
ebuild di tipo "live" CVS.
</p>

<p>
Se degli ebuild (di ogni tipo) non funzionano correttamente o risultano fallati,
devono essere corretti o rimossi dal Portage tree. Se sono ebuild CVS "live",
potrebbero essere mascherati tramite la keyword <c>~[arch]</c> per tutto il loro
ciclo di vita (questa speciale eccezione è spiegata in dettaglio qui sotto).
</p>

<p>
Se un utente o gli utenti chiedono specificatamente un ebuild CVS "live", è
possibile aggiungerne uno per loro. Esso dovrà essere marcato come
<c>~[arch]</c> in modo che altri utenti non lo installino inavvertitamente.
</p>

<p>
In questo modo, gli utenti (tipo gli sviluppatori) che richiedono questo tipo di
ebuild li possono installare ma gli altri utenti saranno protetti da una loro
eventuale installazione accidentale. Si ricorda nuovamente che ciò è applicabile
solamente a situazioni in cui un utente o degli utenti richiedono
specificatamente un ebuild CVS "live" (basato su <path>cvs.eclass</path>).
Gli ebuild per snapshot CVS dovrebbero essere aggiunti al Portage tree con
l'obiettivo di renderli stabili e fornire un miglior funzionamento rispetto alla
versione normale di tale software.
</p>

<impo>
Gli ebuild per gli snapshot dei <e>pre-rilasci</e> dei sorgenti del CVS devono
essere nominati nel modo seguente: <path>foo-x.y_preYYYYMMDD.ebuild</path>.
<c>foo</c> è il nome del pacchetto, <c>x.y</c> è il numero della versione della
versione <e>imminente</e>, <c>_pre</c> è una stringa letterale, e
<c>YYYYMMDD</c> è un timestamp del giorno in cui è stato eseguito lo snapshot.
Usare questa convenzione del nome per assicurare che una versione del rilascio
<c>x.y.1</c> non sia considerata più vecchia dello snapshot <c>x.y</c>, mentre
allo stesso tempo assicurare che la versione ufficiale del rilascio <c>x.y</c>
sia considerata <e>più nuova</e> della versione del proprio snapshot del CVS.
Per gli snapshot del CVS dei sorgenti del CVS <e>già rilasciati</e>, usare il
formato <path>foo-x.y_pYYYYMMDD.ebuild</path> (notare la <c>_p</c> che indica il
"livello di patch.") Questo assicurerà che il proprio ebuild da CVS sarà
considerato <e>più nuovo</e> rispetto al rilascio standard <c>x.y</c>.
</impo>

<impo>
Al momento, la politica per dare il nome agli ebuild CVS "live" è quella di
assicurare che il nome del pacchetto finisca con <c>-cvs</c>. In futuro verrà
aggiunta al Portage il suffisso <c>_cvs</c> e questa politica verrà aggiornata.
</impo>

</body>
</subsection>
<subsection>
<title>Ebuild sottoposti dagli utenti</title>
<body>

<p>
Gli ebuild sottoposti dagli utenti non dovrebbero mai essere accettati così come
sono e dovrebbero essere sempre ben testati e verificati prima di effettuarne il
commit nel CVS. <b>Se un ebuild sottoposto da un utente ha dei problemi, lo
sviluppatore che lo ha ricevuto e gestito ne sarà ritenuto responsabile.</b>
Inviandolo al CVS, si attesta che l'ebuild soddisfa tutti gli standard di
sviluppo per Gentoo Linux.
</p>

<p>
Assicurarsi che l'ebuild proposto dall'utente non contenga intestazioni
personalizzate come la seguente:
</p>

<pre caption="Un'intestazione personalizzata che dovrebbe essere trasferita sul
ChangeLog">
# Ebuild updated by: me &lt;me@me.com&gt;
</pre>

<p>
Questa informazione dovrebbe essere aggiunta al <path>ChangeLog</path>
utilizzando in modo corretto la sintassi per i commenti del ChangeLog.
<b>Assicurarsi sempre che il ChangeLog contenga i crediti corretti per l'utente
che ha sottoposto l'ebuild. Questa informazione deve apparire nella prima riga
del ChangeLog.</b>
</p>

<p>
Assicurarsi inoltre che tutti i nuovi ebuild di cui si effettua il commit
contengano la riga seguente:
</p>

<pre caption="Intestazione di un ebuild">
# &#36;Header: &#36;
</pre>

<p>
Alcuni ebuild sottoposti dagli utenti sono basati su file recuperati tramite
rsync, i quali possono contenere intestazione incorrette.
</p>

<p>
Incoraggiare gli utenti a sottoporre le differenze (diff) per gli ebuild
esistenti se stanno sottoponendo un aggiornamento. Facendo questo, è più facile
evitare la re-introduzione di bug già corretti nei propri ebuild "nuovi". Se non
si sta lavorando su di un diff sottoposto da un utente ma su di un ebuild
completo, allora usare il comando <c>diff</c> per vedere cosa è stato cambiato,
tenendo attentamente d'occhio qualsiasi cosa che dal proprio ebuild corrente
dovrebbe apparire nel nuovo ebuild, o qualsiasi cosa che dovrebbe essere
corretta o rimossa nel nuovo ebuild.
</p>

<p>
Generalmente, lasciare che sia l'utente a fare il lavoro richiesto per
aggiornare il proprio ebuild, a meno che non si <e>voglia</e> effettuare una
pulizia dell'ebuild a suo vantaggio. Nondimeno il più delle volte è meglio
lasciar fare il lavoro all'utente in modo da dargli la possibilità di imparare
dai propri errori e inviare ebuild più precisi in futuro. Assicurarsi di essere
riconoscenti per qualsiasi ebuild o patch sottoposta, anche se il lavoro non è
molto buono. Comportarsi in modo educato ma onesto: se un ebuild non è usabile,
l'utente può essere avvisato in un modo da non insultare la sue attuali abilità
nello scrivere ebuild. Ricordarsi che l'utente che invia degli ebuild corrotti
potrebbe essere in futuro un membro responsabile e produttivo del progetto
Gentoo, e questo succederà se riceverà la giusta quantità di incoraggiamenti e
supporto per continuare a migliorare le proprie abilità.
</p>

</body>
</subsection>
</section>

<section>
<title>Politica per la QA (Quality assicurance - Garanzia di Qualità)</title>
<subsection>
<title>Politiche di rilascio per Portage / Baselayout</title>
<body>

<p>
Solo i membri del team di Portage (che si sa chi sono) hanno l'autorità per
rilasciare una nuova versione di Portage, <b>nessun</b> altro è abilitato a
farlo.
</p>

<p>
Solo i membri del team del baselayout (che si sa chi sono) hanno l'autorità di
rilasciare una nuova versione di baselayout, <b>nessun</b> altro è abilitato a
farlo.
</p>

</body>
</subsection>
<subsection>
<title>Pacchetti mascherati</title>
<body>

<p>
<path>/usr/portage/profiles/package.mask</path> contiene una lista di pacchetti
che non dovrebbero essere installati dagli utenti e i commenti che spiegano
in modo dettagliato i motivi dello mascheramento. package.mask è usato per
prevenire l'installazione di pacchetti malfunzionanti, che guastano qualcosa
d'altro o necessitano di test intensivi prima di essere aggiunti nel ~ARCH
KEYWORDS del Portage tree. Quando si aggiunge un pacchetto a package.mask, fare
sempre prima il commit di questo file prima del commit dell'ebuild mascherato,
in modo da prevenire che l'ebuild venga installato erroneamente dagli utenti,
prima che il file package.mask aggiornato lo possa fare da sé.
</p>

<p>
Ogni volta che un pacchetto viene rimosso da <path>package.mask</path> bisogna
fare molta attenzione, poiché c'è un motivo se un ebuild è elencato in questo
file. Se non si ha effettuato personalmente il mascheramento dell'ebuild,
contattare sempre lo sviluppatore elencato nei commenti di
<path>package.mask</path> prima di intraprendere qualsiasi azione. Inoltre, se
l'ebuild mascherato è un pacchetto di sistema, o una sua dipendenza, o se la
rimozione del mascheramento potrebbe avere effetti dannosi, il cambiamento deve
essere discusso internamente nella mailing list degli sviluppatori.
</p>

</body>
</subsection>
<subsection>
<title>~ARCH in KEYWORDS</title>
<body>

<p>
Lo scopo di ~arch è di testare nuovi pacchetti aggiunti a Portage.
</p>

<p>
C'è una differenza tra l'uso di <path>package.mask</path> e ~arch per gli
<b>ebuild</b>. L'uso di ~arch denota il fatto che un <c>ebuild</c> ha
bisogno di essere testato. L'uso di <path>package.mask</path> denota il fatto
che l'applicazione o la libreria stessa è valutata come instabile. Per esempio,
se <c>gimp-1.2.0</c> è la versione stabile per gli sviluppatori di Gimp,
ed è disponibile una nuova versione 1.2.1 contenente delle correzioni, uno
sviluppatore dovrà marcare l'ebuild come ~arch per poterlo testare in portage
perché il rilascio è valutato come stabile. In un altro caso, se Gimp decide di
rilasciare una versione della serie instabile o di sviluppo marcata come 1.3.0,
allora questi ebuild dovranno essere messi in <path>package.mask</path> perché
il software in sé è di una qualità di sviluppo e gli sviluppatori non ne
raccomandano la distribuzione.
</p>

<p>
Tutti i nuovi pacchetti che vengono inseriti in Portage devono essere marcati
come ~arch per la(e) architettura(e) sulle quali si sa che quella versione del
pacchetto funziona correttamente. Lo sviluppatore che fa il commit dell'ebuild
deve verificare che esso funzioni correttamente e che le KEYWORDS siano
corrette.
</p>

</body>
</subsection>
<subsection>
<title>Spostamento delle versioni dei pacchetti da ~ARCH a ARCH</title>
<body>

<p>
Quando una nuove versione di un pacchetto dimostra di essere stabile per un
sufficiente periodo di tempo ed il mantenitore dei pacchetti di Gentoo è
fiducioso nel fatto che l'aggiornamento non creerà problemi alla macchina Gentoo
degli utenti, allora può essere spostato da ~ARCH a ARCH. Un'indicazione della
stabilità del pacchetto può essere se non vengono verificati o non ci sono bug
irrisolti per la versione del pacchetto dopo un mese dalla sua introduzione.
</p>

<p>
È compito del mantenitore del pacchetto reputare quali versioni sono stabili o
se la versione di sviluppo dovrebbe essere in <path>package.mask</path> o
lasciata come ~arch.
</p>

<p>
Bisogna inoltre assicurare che tutte le dipendenze di questa versione del
pacchetto siano anch'esse in ARCH.
</p>

<impo>
Ricordare che solo i team per le architetture hanno la responsabilità di marcare
stabili i pacchetti nella propria architettura. I mantenitori dei pacchetti
dovrebbero aprire dei bug per la stabilizzazione, invece che marcarli come
stabili e basta. Tuttavia, se un mantenitore fa anche parte di un team per
un'architettura, allora potrà autonomamente stabilizzarne il pacchetto.
</impo>

<warn>
Il processo ~ARCH può essere ignorato <e>solo e solo se</e> la versione del
pacchetto in questione contiene una correzione di sicurezza o è necessaria per
risolvere un importante bug nel sistema Gentoo.
</warn>

</body>
</subsection>
</section>

<section>
<title>Variabili</title>
<subsection>
<title>Variabili necessarie</title>
<body>

<p>
La politica di di Gentoo Linux richiede che tutti gli ebuild contengano le
variabili <c>KEYWORDS</c>, <c>LICENSE</c>, e <c>SLOT</c>. Anche <c>HOMEPAGE</c>,
<c>SRC_URI</c> e <c>DESCRIPTION</c> dovrebbero essere incluse eccetto per
circostanze particolari. <c>DEPEND</c> (e se necessario, <c>RDEPEND</c>)
dovrebbero essere incluse se il proprio pacchetto ha rispettivamente delle
dipendenze in fase di compilazione o di esecuzione.
</p>

</body>
</subsection>
<subsection>
<title>DEPEND e RDEPEND</title>
<body>

<p>
Usare <c>DEPEND</c> per definire le dipendenze necessarie per la compilazione di
un pacchetto particolare, ed impostare <c>RDEPEND</c> con le dipendenze
richieste per <e>eseguire</e> un particolare pacchetto. RDEPEND dovrebbe essere
impostato esplicitamente, anche se RDEPEND=${DEPEND}.
</p>

<pre caption="Esempio di RDEPEND">
RDEPEND="${DEPEND}
         net-ftp/curl"
</pre>

<p>
È anche importante notare che quando un pacchetto binario <c>.tbz2</c> viene
installato soltanto le dipendenze di <c>RDEPEND</c> vengono soddisfatte; usare
questa informazione come aiuto nella scelta delle corrette dipendenze per
<c>RDEPEND</c>.
</p>

<p>
Un pacchetto deve dipendere dalle versioni più vecchie che soddisfano le
dipendenze. Se esso funziona con <c>libfoo-1.2.x</c>, non farlo dipendere da
<c>libfoo-2.x</c> solo perché questa è la versione che si ha installato.
</p>

<p>
In generale, i pacchetti dovrebbero dipendere da <c>=libfoo-1.2*</c> invece che
da <c>&gt;=libfoo-1.2</c>. Altrimenti, le cose potrebbero cominciare a non
funzionare più nel momento in cui viene introdotto <c>libfoo-2.0</c>.
</p>

<p>
La dipendenza da un pacchetto virtuale come <c>virtual/foo</c> funzionerà
soltanto se i diversi pacchetti forniti da <c>virtual/foo</c> hanno delle
interfacce uguali tra loro. Considerare <c>virtual/jdk-1.3</c> come esempio:
alcuni pacchetti non funzionano con <c>ibm-jdk-1.3</c>  mentre funzionano
correttamente con <c>sun-jdk-1.3</c>. Per questa ragione, assicurarsi che il
proprio pacchetto sia testato con tutti quelli forniti dal pacchetto virtuale,
prima di rimuovere il mascheramento. Si potrebbe fare dipendere il pacchetto
soltanto da una parte di quelli contenuti nel pacchetto virtuale piuttosto che
dal pacchetto virtuale stesso.
</p>

</body>
</subsection>
</section>

</sections>