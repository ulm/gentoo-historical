<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/it/hardened/capabilities.xml,v 1.3 2012/10/28 15:21:24 swift Exp $ -->

<guide lang="it">
<title>Capacità POSIX</title>

<author title="Autore">
  <mail link="solar@gentoo.org">solar</mail>
</author>
<author title="Contributi">
  <mail link="tocharian@gentoo.org">Adam Mondl</mail>
</author>
<author title="Traduzione">
  <mail link="info@francotampieri.com">Franco Tampieri</mail>
</author>

<abstract>
Le capacità POSIX sono permessi appartenenti a determinati sottoinsiemi, membri
di una partizione dell'insieme dei permessi di root.
</abstract>

<version>1.2</version>
<date>2005-01-22</date>

<chapter>
<title>CAP_CHOWN</title>
<section>
<body>

<pre caption="CAP_CHOWN">
  <i>CAP_CHOWN</i>
  L'opzione [_POSIX_CHOWN_RESTRICTED], se selezionata, permette di ignorare le
  restrizioni sul cambiamento di utente proprietario e sul cambiamento di gruppo
  per un file.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_DAC_OVERRIDE</title>
<section>
<body>

<pre caption="CAP_DAC_OVERRIDE">
  <i>CAP_DAC_OVERRIDE</i>
	Permette di ignorare tutte le restrizioni sugli accessi DAC, inclusi gli
	accessi in esecuzione ACL, se il parametro [_POSIX_ACL] è definito.
	L'esclusione degli accessi DAC è attivata da CAP_LINUX_IMMUTABLE.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_DAC_READ_SEARCH</title>
<section>
<body>

<pre caption="CAP_DAC_READ_SEARCH">
  <i>CAP_DAC_READ_SEARCH</i>
	Permette di ignorare tutte le restrizioni DAC, sia in lettura che in operazioni
	di ricerca su file e directory, incluse le restrizioni ACL, se [_POSIX_ACL]
	è definita. L'esclusione degli accessi DAC è attivata da CAP_LINUX_IMMUTABLE.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_FOWNER</title>
<section>
<body>

<pre caption="CAP_FOWNER">
  <i>CAP_FOWNER</i>
	Permette di ignorare tutte le restrizioni sulle operazioni permesse sui file,
	dove l'ID del proprietario dei file è uguale allo user ID, escluse quelle
	situazioni dove CAP_FSETID è applicabile. Non permette di ignorare le restrizioni
	MAC e DAC.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_FSETID</title>
<section>
<body>

<pre caption="CAP_FSETID">
  <i>CAP_FSETID</i>
	Permette di ignorare le seguenti restrizioni, vale a dire che lo user ID sia
	uguale all'ID del proprietario di un dato file, quando si impostano i bit di
	S_ISUID e S_ISGID; che l'ID di gruppo (o uno degli ID di gruppo supplementari)
	sia uguale all'ID del possessore quando si imposta il bit S_ISGID; che i bit
	S_ISUID e S_ISGID siano azzerati quando il comando chown(2) ha successo (non
	implementata).
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_FS_MASK</title>
<section>
<body>

<pre caption="CAP_FS_MASK">
  <i>CAP_FS_MASK</i>
	E' usato per decidere quale comando attivare tra il vecchio suser() e fsuser().
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_KILL</title>
<section>
<body>

<pre caption="CAP_KILL">
  <i>CAP_KILL</i>
	Permette di ignorare la restrizione che lo user ID reale o attuale di un
	processo, inviante un segnale, debba essere uguale allo user ID reale o
	attuale del processo che riceve il segnale.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_SETGID</title>
<section>
<body>

<pre caption="CAP_SETGID">
  <i>CAP_SETGID</i>
	Permette al comando setgid(2) le relative operazioni;
	Permette l'esecuzione del comando setgroups(2);
	Permette ai gid (Group IDentifiers) di processi trasmessi su socket il
	passaggio delle credenziali.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_SETUID</title>
<section>
<body>

<pre caption="CAP_SETUID">
  <i>CAP_SETUID</i>
	Permette le operazioni al comando set*uid(2) (compreso fsuid);
	Permette le operazioni ai pid (Process IDentifiers) dei processi trasmessi
	da socket il passaggio delle credenziali.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_SETPCAP</title>
<section>
<body>

<pre caption="CAP_SETPCAP">
  <i>CAP_SETPCAP</i>
	Trasferisce o rimuove ogni capacità di un dato sottoinsieme di permessi a ogni
	pid.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_LINUX_IMMUTABLE</title>
<section>
<body>

<pre caption="CAP_LINUX_IMMUTABLE">
  <i>CAP_LINUX_IMMUTABLE</i>
	Permette la modifica degli attributi di file S_IMMUTABLE e S_APPEND.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_NET_BIND_SERVICE</title>
<section>
<body>

<pre caption="CAP_NET_BIND_SERVICE">
  <i>CAP_NET_BIND_SERVICE</i>
	Permette il binding di socket TCP/UDP sotto l'ID 1024;
	Permette il binding a VCIs ATM sotto l'ID 32.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_NET_BROADCAST</title>
<section>
<body>

<pre caption="CAP_NET_BROADCAST">
  <i>CAP_NET_BROADCAST</i>
	Permette il broadcasting, e l'ascolto al multicast.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_NET_ADMIN</title>
<section>
<body>

<pre caption="CAP_NET_ADMIN">
  <i>CAP_NET_ADMIN</i>
	Permette la configurazione delle interfacce;
	Permette l'amministrazione degli IP su firewall, mediante mascheramento e accounting;
	Permette di impostare l'opzione di debug sui socket;
	Permette la modifica delle routing tables;
	Permette di impostare diritti di gruppo arbitrari processo / processo sulle socket;
	Permette il binding ad ogni indirizzo per il proxing trasparente;
	Permette l'impostazione del TOS (type of service);
	Permette l'impostazione del modo promiscuo;
	Permette l'azzeramento della statistica di driver;
	Permette il multicasting;
	Permette la lettura/scrittura dei registri specifici di dispositivo;
	Permette l'attivazione delle socket di controllo ATM.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_NET_RAW</title>
<section>
<body>

<pre caption="CAP_NET_RAW">
  <i>CAP_NET_RAW</i>
	Permette l'uso di socket RAW;
	Permette l'uso di socket PACKET.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_IPC_LOCK</title>
<section>
<body>

<pre caption="CAP_IPC_LOCK">
  <i>CAP_IPC_LOCK</i>
	Permette il lock di segmenti di memoria condivisa;
	Permette mlock e mlockall (che in realtà non ha niente a che fare con l'IPC).
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_IPC_OWNER</title>
<section>
<body>

<pre caption="CAP_IPC_OWNER">
  <i>CAP_IPC_OWNER</i>
	Permette di saltare i controlli di appartenenza sull'IPC.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_SYS_MODULE</title>
<section>
<body>

<pre caption="CAP_SYS_MODULE">
  <i>CAP_SYS_MODULE</i>
	Inserisce e rimuove moduli di kernel, modificando il kernel stesso senza limiti;
	modifica il cap_bset.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_SYS_RAWIO</title>
<section>
<body>

<pre caption="CAP_SYS_RAWIO">
  <i>CAP_SYS_RAWIO</i>
	Permette l'accesso ioperm/iopl;
	Permette l'invio di messaggi USB ad ogni dispositivo via /proc/bus/usb.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_SYS_CHROOT</title>
<section>
<body>

<pre caption="CAP_SYS_CHROOT">
  <i>CAP_SYS_CHROOT</i>
	Permette l'uso di chroot().
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_SYS_PTRACE</title>
<section>
<body>

<pre caption="CAP_SYS_PTRACE">
  <i>CAP_SYS_PTRACE</i>
	Permette il ptrace() di ogni processo.
</pre>

</body>
</section>
</chapter>


<chapter>
<title>CAP_SYS_PACCT</title>
<section>
<body>

<pre caption="CAP_SYS_PACCT">
  <i>CAP_SYS_PACCT</i>
	Permette la configurazione dell'accounting di processo.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_SYS_ADMIN</title>
<section>
<body>

<pre caption="CAP_SYS_ADMIN">
  <i>CAP_SYS_ADMIN</i>
	Permette la configurazione della secure attention key;
	Permette l'amministrazione del dispositivo random;
	Permette l'esame e la configurazione delle quote di disco;
	Permette la configurazione dei syslog del kernel (vale a dire il comportamento
	del printk);
	Permette di impostare il domainname;
	Permette di impostare l'hostname;
	Permette la chiamata della funzione bdflush();
	Permette la mount() a la umount(), impostando una nuova connessione smb;
	Permette l'esecuzione delle ioctl di autofs in root;
	Permette l'nfsservctl; permette VM86_REQUEST_IRQ;
	Permette la configurazione di pci per lettura/scrittura su alpha; permette
	la irix_prctl su mips (setstacksize);
	Permette il flush di tutta la memoria cache sull'm68k (sys_cacheflush);
	Permette la rimozione dei semafori; è usata al posto di CAP_CHOWN in quanto
	effettua il "chown" delle code di messaggi IPC, dei messaggi e della memoria condivisa;
	Permette il lock/unlock del segmento di memoria condivisa;
	Permette di abilitare/disabilitare lo swap;
	Permette il passaggio delle credenziali dei pid trasmessi su socket;
	Permette l'impostazione del readahead e il flush dei buffer sui dispositivi block;
	Permette di scegliere la geometria del floppy driver;
	Permette di abilitare/ disabilitare il DMA sui driver xd;
	Permette di amministrare i dispositivi md (principalmente quelli elencati
	qui sopra, ma anche qualche extra ioctls);
	Permette la regolazione del driver ide;
	Permette l'accesso alla periferica nvram;
	Permette di amministrare l'apm_bios, e i dispositivi serial e bttv (TV);
	Permette l'esecuzione di comandi specifici del costruttore per il driver
	di supporto isdn CAPI;
	Permette la lettura di porzioni non standardizzate dello spazio	di configurazione pci;
	Permette il debug DDI ioctl sui driver sbpcd;
	Permette la configurazione delle porte seriali;
	Permette l'invio di comandi qic117 raw;
	Permette di abilitare/disabilitare il tagged queuing sui controller SCSI
	e l'invio di comandi SCSI arbitrari;
	Permette la configurazioen della chiave di criptazione sui filesystem loopback.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_SYS_BOOT</title>
<section>
<body>

<pre caption="CAP_SYS_BOOT">
  <i>CAP_SYS_BOOT</i>
	Permette l'uso di reboot().
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_SYS_NICE</title>
<section>
<body>

<pre caption="CAP_SYS_NICE">
  <i>CAP_SYS_NICE</i>
	Permette l'incremento di priorità su altri (con diverso UID);
	Permette l'uso dello scheduling FIFO e roundrobin (realtime) su processi propri
	e l'impostazione dell'algoritmo di scheduling usato da un altro processo.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_SYS_RESOURCE</title>
<section>
<body>

<pre caption="CAP_SYS_RESOURCE">
  <i>CAP_SYS_RESOURCE</i>
	Permette di ignorare i limiti di una risorsa. Fissa i limiti di una risorsa;
	Permette di ignorare i limiti di quota;
	Permette di ignorare lo spazio riservato sui filesystem di tipo ext2;
	Modifica il modo data journaling sui filesystem di tipo ext3;
	(usa le risorse di journaling); NOTA: ext2 rispetta il comando fsuid quando
	si controlla l'override delle risorse, così si può eseguire l'override anche
	usando fsuid;
	Permette di ignorare le restrizioni di formato sulle code di messaggi IPC;
	Permette interrupt a più di 64hz dal clock realtime;
	Permette di ignorare il massimo numero di console durante la loro l'allocazione;
	Permette di ignorare il massimo numero di keymaps.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_SYS_TIME</title>
<section>
<body>

<pre caption="CAP_SYS_TIME">
  <i>CAP_SYS_TIME</i>
	Permette il controllo del clock di sistema;
	Permette irix_stime su mips;
	Permette il set up del clock realtime.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_SYS_TTY_CONFIG</title>
<section>
<body>

<pre caption="CAP_SYS_TTY_CONFIG">
  <i>CAP_SYS_TTY_CONFIG</i>
	Permette la configurazione dei dispositivi tty; permette vhangup()
	sui dispositivi tty.
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_MKNOD</title>
<section>
<body>

<pre caption="CAP_MKNOD">
  <i>CAP_MKNOD</i>
	Permette gli aspetti con diritti maggiorati di mknod().
</pre>

</body>
</section>
</chapter>

<chapter>
<title>CAP_LEASE</title>
<section>
<body>

<pre caption="CAP_LEASE">
  <i>CAP_LEASE</i>
	Permette il leasing di file.
</pre>

</body>
</section>
</chapter>
</guide>
