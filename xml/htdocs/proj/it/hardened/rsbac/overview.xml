<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/it/hardened/rsbac/overview.xml,v 1.3 2012/02/26 15:07:07 swift Exp $ -->

<guide link="/proj/it/hardened/rsbac/overview.xml" lang="it">
<title>Rule Set Based Accessi Control (RSBAC) per Linux - Panoramica</title>

<author title="Autore">
  <mail link="ao@rsbac.org">Amon Ott</mail>
</author>
<author title="Redazione">
  <mail link="albeiro@gentoo.pl">Michal Purzynski</mail>
</author>
<author title="Redazione">
  <mail link="kang@gentoo.org">Guillaume Destuynder</mail>
</author>
<author title="Traduzione">
  <mail link="info@francotampieri.com">Franco Tampieri</mail>
</author>

<abstract>
Questo documento vuole illustrare il sistema di controllo d'accesso RSBAC.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->
<license/>

<version>1.2</version>
<date>2005-10-11</date>

<chapter>
<title>Caratteristiche chiave</title>
<section>
<body>

<ul>
  <li>Estensione di sicurezza Open Source (GPL) per il kernel Linux</li>
  <li>Indipendente da governi e grandi compagnie</li>
  <li>
    Diversi modelli di sicurezza supportati, sia noti che nuovi, inclusi MAC,
    ACL ed RC
  </li>
  <li>
    Controlli programmabili sugli utenti individuali e sugli accessi di rete
  </li>
  <li>Possibile combinazione di diversi modelli</li>
  <li>
    Facilmente estendibile: si può scrivere il proprio modello registrandolo in
    fase di esecuzione
  </li>
  <li>Supporta tutti i kernel correnti</li>
  <li>Stabile per uso di produzione</li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Cosa è RSBAC?</title>
<section>
<body>

<p>
RSBAC è un framework open source per il controllo degli accessi, flessibile,
potente e veloce per i kernel Linux di uso corrente, rilasciato in versione
stabile dal gennaio 2000 (versione 1.0.9a). Lo sviluppo completo è stato fatto
indipendentemente, non usando nessun codice di controllo degli accessi
preesistente.
</p>

<p>
Il pacchetto standard contiene una vasta gamma di modelli di controllo degli
accessi come MAC, RC, ACL (si veda di seguito). Inoltre, la possibilità di
registrazione in fase di esecuzione, o "runtime" (REG) rende semplice
implementare moduli di controllo proprietari, trattandoli come fossero moduli
del kernel caricabili runtime.
</p>

<p>
Il framework RSBAC è descritto in modo esteso nel documento <uri
link="http://www.acsac.org/secshelf/book001/09.pdf">Generalized Framework for
Accessi Control (GFAC)</uri> di Abrams e LaPadula. In pratica tutte le chiamate
di sistema con aspetti rilevanti per la sicurezza vengono "estese" con un codice
di rinforzo. Questo codice esegue una chiamata verso un modulo centrale
decisionale, che a sua volta esegue una chiamata a tutti i moduli decisionali
attivi e decide se eseguire o meno la chiamata originaria. Il codice della
chiamata decisa viene poi "rinforzata" con estensioni delle chiamate di sistema
ed eseguita.
</p>

<p>
Le decisioni prese sono basate sul tipo di accessi (tipo di richieste), sul
target cui si accede e sui valori degli attributi associati a tali chiamate e
target. Altri attributi indipendenti possono essere usati da moduli individuali,
es. dal Privacy Module (<uri link="#doc_chap3_sect4">PM</uri>). Tutti gli
attributi sono memorizzati in directory completamente protette, una per ogni
dispositivo montato. Di conseguenza il cambio di questi attributi richiede
chiamate di sistema speciali.
</p>

<p>
Ogni tipo di accesso alla rete può essere controllato individualmente per tutti
gli utenti e i programmi. Questo dà il pieno controllo sul comportamento in rete
e rende più semplice la prevenzione e l'identificazione degli accessi di rete
illegali.
</p>

<p>
Siccome tutti i tipi di decisione di accesso sono basati su richieste generiche
di decisione, politiche di sicurezza diverse possono essere implementate
mediante singoli moduli decisionali. A parte i modelli nativi mostrati di
seguito, l'opzione Module Registration (REG) permette di registrare moduli di
decisione addizionali personalizzati al runtime.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Modelli implementati</title>
<section>
<body>

<p>
Nella versione 1.2.5 di RSBAC, sono inclusi i seguenti moduli. Si noti che
tutti quanti sono opzionali.
</p>

</body>
</section>
<section>
<title>MAC</title>
<body>

<p>
Bell-LaPadula Mandatory Accessi Control Module
</p>

</body>
</section>
<section>
<title>UM</title>
<body>

<p>
Modello User Management. In RSBAC esso è basato sul kernel ed è complementare o
rimpiazza totalmente il sottosistema Linux. L'amministrazione degli utenti è
rinforzato da granularità e flessibilità.
</p>

</body>
</section>
<section>
<title>PM</title>
<body>

<p>
Privacy Model. Il modello di <uri link="http://www.cs.kau.se/~simone/">Simone
Fischer-Huebner</uri> nella sua prima implementazione. Si veda l'articolo RSBAC
su l'<uri link="http://rsbac.org/doc/media/niss98.php"> implementazione di
PM</uri> per la National Information Systems Security Conference (NISSC 98).
</p>

</body>
</section>
<section>
<title>Dazuko</title>
<body>

<p>
Questo non è un vero e proprio modello di controllo degli accessi, ma piuttosto
un modulo di protezione del sistema contro il malware. L'esecuzione e la lettura
dei file infettati da malware può essere prevenuta.
</p>

</body>
</section>
<section>
<title>FF</title>
<body>

<p>
Modello File Flags. Provvede e usa flag per directory e file, al momento
execute_only (file), read_only (file e directory), search_only (directory),
secure_delete (file), no_execute (file), add_inherited (file e directory),
no_rename_or_delete (file e directory, nessuna ereditarietà) e append_only
(file e directory). Solo gli addetti alla sicurezza FF possono modificare queste
flag.
</p>

</body>
</section>
<section>
<title>RC</title>
<body>

<p>
Modello Role Compatibility. Definisce ruoli e tipi per ogni target (file, dir,
dev, ipc, scd, process) del sistema. Per ciascun ruolo, la compatibilità con i
rimanenti e con tutti i tipi può essere personalizzata con la granularità
desiderata. Per l'amministrazione c'è un'ottima e granulare separazione dei
compiti. I diritti possono avere durata temporale limitata. Il modello e le
specifiche di implementazione sono descritte nell'articolo <uri
link="http://rsbac.org/doc/media/rc-nordsec2002/index.html">Nordsec 2002 RC
Paper</uri>
</p>

</body>
</section>
<section>
<title>AUTH</title>
<body>

<p>
Modello Authorization enforcement. Controlla tutte le richieste di CHANGE_OWNER
per processi target, e solo programmi/processi che hanno il permesso di eseguire
il generico setuid e quelli che lo hanno per il target user ID possono eseguire
di fatto questo comando. La capacità di esecuzione di setuid può essere
controllata da altri programmi/processi, es. demoni di autenticazione.
</p>

</body>
</section>
<section>
<title>ACL</title>
<body>

<p>
Modello Access Control Lists. In questo modello, per ogni oggetto esiste una
Lista di Controllo degli Accessi, che definisce quali soggetti possono accedere
ad un oggetto prefissato e con quali tipi di richiesta. I soggetti possono
essere di tipo user, ruolo RC e gruppo ACL. Gli oggetti sono raggruppati
mediante tipo di target, ma hanno liste personalizzate. Se non esiste nessuna
voce nella lista di un dato oggetto relativa a un dato soggetto, i diritti sono
"ereditati" da oggetti "genitori", filtrati da una maschera di "ereditarietà".
Diritti diretti (user) e indiretti (role, group) sono cumulabili. Per ogni tipo
di oggetto esiste una ACL predefinita all'apice della gerarchia prefissata. La
gestione dei gruppi è stata aggiunta nella versione 1.0.9a. Sia diritti che
appartenenza a un dato gruppo possono avere durata temporale limitata.
</p>

</body>
</section>
<section>
<title>CAP</title>
<body>

<p>
Modello Linux Capabilities. Per ogni utente e programma si possono definire un
insieme minimo e uno massimo di capacità, in termini di possibilità di
esecuzione di chiamate al sistema con aspetti di sicurezza, in ambiente Linux
("insieme dei diritti speciali di root"). Ciò permette ad esempio di eseguire
programmi server a semplici utenti, o di restringere i diritti dei programmi di
root nella maniera standard possibile in ambiente Linux.
</p>

</body>
</section>
<section>
<title>JAIL</title>
<body>

<p>
Modello Process Jails. Questo modello aggiunge una nuova chiamata di sistema,
la rsbac_jail, che è fondamentalmente un insieme maggiorato delle chiamate di
sistema jail di FreeBSD. Esso incapsula il processo chiamante e tutti i
sottoprocessi in un ambiente chroot con indirizzo IP prefissato e molte
ulteriori restrizioni.
</p>

</body>
</section>
<section>
<title>RES</title>
<body>

<p>
Modello Linux Resources. Per ogni utente e ogni programma si possono definire un
insieme minimo e uno massimo di risorse usabili dai processi generati in
ambiente Linux (ad esempio formato di memoria, numero di file aperti, numero di
processi per utente). Internamente questi insiemi sono usati come dato per
impostare le flag standard per le risorse in ambiente Linux.
</p>

</body>
</section>
<section>
<body>

<p>
Tutti i modelli di decisione sono trattati in dettaglio nella relativa pagina di
descrizione.
</p>

<p>
L'obiettivo generale del progetto RSBAC è quello di raggiungere un giorno il
livello B1 dell'(obsoleto) Orange Book (TCSEC).
</p>

</body>
</section>
</chapter>
</guide>
