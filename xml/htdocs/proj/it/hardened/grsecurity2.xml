<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/it/hardened/grsecurity2.xml" lang="it">

<title>Guida a Grsecurity v2 su Gentoo</title>

<author title="Autore">
  <mail link="solar@gentoo.org">solar</mail>
</author>
<author title="Autore">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Traduttore">
  <mail link="ordex@ngi.it">ordex</mail>
</author>

<abstract>
Questo documento parla delle opzionalità e delle patch di sicurezza di grsecurity2,
configurazioni del kernel supportate e strumenti forniti dal progetto grsecurity
per portare la sicurezza del tuo sistema a standard più alti.
</abstract>

<version>0.4</version>
<date>2004-10-06</date>

<chapter>
<title>Grsecurity</title>
<section>
<title>Il Progetto Grsecurity</title>
<body>

<p>
Il progetto grsecurity, hostato su <uri link="http://www.grsecurity.org">http://www.grsecurity.org</uri>, fornisce
varie patch per il Kernel Linux le quali intensificano la sicurezza totale
del tuo sistema. Le varie caratteristiche portate da grsecurity saranno oggetto di discussione del prossimo capitolo;
una lista complessiva è situata nella <uri link="http://www.grsecurity.org/features.php">Pagina della caratteristiche di Grsecurity</uri>.
</p>

<p>
Così come le caratteristiche di grsecurity sono principalmente basate sul kernel,
così la maggioranza di questo documento spiegherà le varie caratteristiche del kernel e le loro rispettive operazioni sysctl (se esistenti). 
</p>


</body>
</section>
<section>
<title>L'integrazione Hardened su Gentoo</title>
<body>

<p>
Il <uri link="http://hardened.gentoo.org">progetto Hardened su Gentoo</uri>
mantiene le caratteristiche di intensificazione della sicurezza per Gentoo, includendo, ma non solo, grsecurity.
</p>

</body>
</section>
<section>
<title>La configurazione del Kernel</title>
<body>

<p>
In tutto questo documento parleremo della configurazione del kernel facendo riferimento alle sue variabili come <c>CONFIG_GRKERNSEC_PAX_NO_ACL_FLAGS</c>. Queste sono
le variabili che il processo di compilazione del kernel usa per determinare se una certa caratteristica va implementata o meno.
</p>

<p>
Quando configuri il tuo kernel attraverso <c>make menuconfig</c> o simili, tu
ti trovi di fronte ad un'interfaccia utente attraverso la quale puoi selezionare le diverse opzioni. 
se scegli il bottone <e>Help</e> su una certa caratteristica,
vedrai in il nome della variabile del kernel a cui fa riferimento.
</p>

<p>
Puoi dunque configurare il kernel come più ti piace - con un pò di razionalità.
E se non riesci a trovare una certa opzione, avrai sempre la possibilità di 
modificare <path>/usr/src/linux/.config</path> a mano :)
</p>

<p>
Naturalmente, per poter selezionare le varie opzioni di grsecure del kernel, devi prima installare Grsecure al suo interno:

</p>

<pre caption="Attivare Grsecurity">
CONFIG_GRKERNSEC=y
CONFIG_GRKERNSEC_CUSTOM=y
</pre>

</body>
</section>
</chapter>

<chapter>
<title>PaX</title>
<section>
<title>Combattere lo sfruttamento (Exploiting) dei Bugs del Software</title>
<body>

<p>
PaX introduce un paio di meccanismi di sicurezza che rendono più difficile ad un attaccante di sfruttare bugs del software che che conivolgono la corruzzione della memoria (quindi non trattare PaX come
se ti proteggesse contro tutti i possibili bug dei programmi).  Il <uri link="http://pax.grsecurity.net/docs/pax.txt">Documento di introduzione a PaX</uri>
parla di tre possibili metodi di sfruttamento dei bugs:
</p>

<ol>
  <li>introduzione/esecuzione di codice arbitrario</li>
  <li>esecuzione di codice esistente fuori dal suo regolare uso</li>
  <li>esecuzione di codice esistente nell'uso regolare ma con dati arbitrari</li>
</ol>

<p>
Un metodo di prevenzione consiste nel disabilitare la memorizzazione del codice in una zona di memoria scrivibile. 
Quando noi esaminiamo un processo, esso richiede cinque zone di memoria:
</p>

<ol>
  <li>
    una <e>regione dati</e> che contiene i dati allocati staticamente e i dati globali
  </li>
  <li>
    una <e>regione BSS</e> (Block Started by Symbol - Blocco inziante con simbolo) che contiene informazioni riguardo ai dati inizianti per zero del processo
  </li>
  <li>
    una <e>regione codice</e>, anche chiamata <e>segmento testo</e>, che contiene le istruzioni eseguibili
  </li>
  <li>
    una <e>heap</e> che contiene i dati allocati dinamicamente
  </li>
  <li>
    uno <e>stack</e> che contiene le variabili locali
  </li>
</ol>

<p>
Il primo metodo di prevenzione di PaX, chiamato <b>NOEXEC</b>, consiste nel dare il controllo
oltre la runtime code generation. Esso segna le pagine di memoria non contengono codice eseguibile, come non eseguibili. 
Questo significa che l'heap e lo stack , 
i soli che contengono solo dati e non dovrebbero contenere codice eseguibile,
verranno marcati come non eseguibili. Gli exploit, che piazzeranno il loro codice in ueste aree con l'intento di lanciarlo, falliranno.
</p>

<p>
NOEXEC si occupa di più di quanto descritto, i lettori interessati potrebbero
 focalizzare le loro attenzioni sulla <uri link="http://pax.grsecurity.net/docs/noexec.txt"> documentazione si PaX
NOEXEC</uri>.
</p>

<p>
Il secondo metodo di prevenzione di PaX, chiamato <b>ASLR</b> (Address Space Layout
Randomization), genera casualmente gli indirizzi da dare alle richieste di memroai. Dove
precedentemente la memoria veniva assegnata in modo (che significa che gli exploits sanno dove 
sono locate le zone di memoria dei processi) ASLR rende casuale questa assegnazione,
rendendo le tecniche che si affidano a queste informazioni inutili.
</p>

<p>
Maggiori informazioni riguardo a  ASLR possono essere trovate <uri link="http://pax.grsecurity.net/docs/aslr.txt">online</uri>.
</p>

</body>
</section>
<section>
<title>Abilitare PaX</title>
<body>

<p>
I settaggi del Kernel raccomandati per PaX sono:
</p>

<pre caption="Configurazione del kernel raccomandata per PaX">
<comment>#
# PaX Control
#
# CONFIG_GRKERNSEC_PAX_SOFTMODE is not set</comment>
CONFIG_GRKERNSEC_PAX_EI_PAX=y
CONFIG_GRKERNSEC_PAX_PT_PAX_FLAGS=y
CONFIG_GRKERNSEC_PAX_NO_ACL_FLAGS=y
<comment># CONFIG_GRKERNSEC_PAX_HAVE_ACL_FLAGS is not set
# CONFIG_GRKERNSEC_PAX_HOOK_ACL_FLAGS is not set

#
# Address Space Protection
#</comment>
CONFIG_GRKERNSEC_PAX_NOEXEC=y
<comment># CONFIG_GRKERNSEC_PAX_PAGEEXEC is not set</comment>
CONFIG_GRKERNSEC_PAX_SEGMEXEC=y
CONFIG_GRKERNSEC_PAX_EMUTRAMP=y
CONFIG_GRKERNSEC_PAX_MPROTECT=y
<comment># CONFIG_GRKERNSEC_PAX_NOELFRELOCS is not set</comment>
CONFIG_GRKERNSEC_PAX_ASLR=y
CONFIG_GRKERNSEC_PAX_RANDKSTACK=y
CONFIG_GRKERNSEC_PAX_RANDUSTACK=y
CONFIG_GRKERNSEC_PAX_RANDMMAP=y
CONFIG_GRKERNSEC_PAX_RANDEXEC=y
<comment># CONFIG_GRKERNSEC_KMEM is not set
# CONFIG_GRKERNSEC_IO is not set</comment>
CONFIG_GRKERNSEC_PROC_MEMMAP=y
CONFIG_GRKERNSEC_HIDESYM=y
</pre>


<p>
Se sei su un sistema non-x86 dovrai osservare che non è presente
CONFIG_GRKERNSEC_PAX_NOEXEC. Dovresti selezionare invece CONFIG_GRKERNSEC_PAX_PAGEEXEC, l'unica implementazione non-exec presente.
</p>

</body>
</section>
<section>
<title>Controllare PaX</title>
<body>

<p>
Non tutte le applicazioni di Linux sono contenti delle restrizioni portate da PaX. Questi
tools includono xorg-x11, java, mplayer, xmms e altri. Se prevedi il loro uso sul tuo sistema, potrai elevare la protezione per queste applicazioni utilizzando <c>chpax</c> e <c>paxctl</c>.
</p>

<pre caption="Installare i tool chpax e paxctl">
# <i>emerge app-admin/chpax</i>
# <i>emerge app-admin/paxctl</i>
</pre>

<p>
chpax fornisce un init script che manipola la maggior parte dei settaggi delle applicazioni conosciute al tuo posto:
</p>

<pre caption="Aggiungere l'init script di chpax nel runlevel di default">
# <i>rc-update add chpax default</i>
</pre>

<p>
<c>pax-utils</c> è una piccola cassetta degli attrezzi che contiene utili applicazioni per amministrare un PaX aware server. 
</p>

<pre caption="Istallare pax-utils">
# <i>emerge pax-utils</i>
</pre>

<p>
Interessanti tools includono <c>scanelf</c> e <c>pspax</c>:
</p>

<ul>
  <li>
    Con <c>scanelf</c> puoi esaminare le directory delle librerie e dei binari e fare una lista dei vari permessi e dei tipi di ELF che riguardano l'esecuzione di un ideale setup di pax/grsec
  </li>
  <li>
    Con <c>pspax</c> puoi visualizzare le flags/capabilities/xattr di PaX dalla prospettiva del kernel
  </li>
</ul>

</body>
</section>
<section>
<title>Verificare le impostazioni di PaX</title>
<body>

<p>
Peter Busser ha scritto una suite di test di regressione chiamata <c>paxtest</c>. Questo
tool controllerà i vari casi di possibili vettori di attacchi e ti informerà
sui risultati. Quando lo esegui, lui lascia un file di log chiamato <path>paxtest.log</path>
nella corrente directory di lavoro.
</p>

<pre caption="Installare e lanciare paxtest">
# <i>emerge paxtest</i>

# <i>paxtest</i>
Executable anonymous mapping             : Killed
Executable bss                           : Killed
Executable data                          : Killed
Executable heap                          : Killed
Executable stack                         : Killed
Executable anonymous mapping (mprotect)  : Killed
Executable bss (mprotect)                : Killed
Executable data (mprotect)               : Killed
Executable heap (mprotect)               : Killed
Executable stack (mprotect)              : Killed
Executable shared library bss (mprotect) : Killed
Executable shared library data (mprotect): Killed
Writable text segments                   : Killed
Anonymous mapping randomisation test     : 16 bits (guessed)
Heap randomisation test (ET_EXEC)        : 13 bits (guessed)
Heap randomisation test (ET_DYN)         : 25 bits (guessed)
Main executable randomisation (ET_EXEC)  : 16 bits (guessed)
Main executable randomisation (ET_DYN)   : 17 bits (guessed)
Shared library randomisation test        : 16 bits (guessed)
Stack randomisation test (SEGMEXEC)      : 23 bits (guessed)
Stack randomisation test (PAGEEXEC)      : No randomisation
Return to function (strcpy)              : Vulnerable
Return to function (memcpy)              : Vulnerable
Return to function (strcpy, RANDEXEC)    : Killed
Return to function (memcpy, RANDEXEC)    : Killed
Executable shared library bss            : Killed
Executable shared library data           : Killed
</pre>

<p>
Nell'esempio di cui sopra ti verrebbe notificato che:
</p>

<ul>
  <li>
    strcpy e memcpy sono catalogate come <e>Vulnerabili</e>. Questo è normale
    - sta semplicemente mostrando la necessità di una tecnologia come <uri link="/proj/en/hardened/propolice.xml">ProPolice/SSP</uri>
  </li>
  <li>
    non c'è la modalità casuale per PAGEEXEC. Questo è normale finchè la nostra configurazione raccomandata
    del kernel x86 non attiva l'opzione PAGEEXEC. Comunque, su
    architetture che supportano il vero NX (non-executable) bit (molte lo fanno,
    inclusa x86_64), PAGEEXEC è l'unico metodo disponibile per NOEXEC e 
    non causa danneggiamenti alle performance.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>RBAC</title>
<section>
<title>Role Based Access Control</title>
<body>

<p>
Ci sono due tipi basi di meccanismi di controllo di accesso usati per prevenire
accessi non autorizzati ai files (o alle informazioni in generale): DAC (Discretionary
Access Control) and MAC (Mandatory Access Control). Di default, Linux usa un meccanismo DAC:
il creatore del file può definire chi ha accesso a questo. Un sistema MAC
comunque forza tutti a seguire i ruoli imposti dall'amministratore.
</p>

<p>
L'implementazione del supporto grsecurity MAC è chiamata Role Based Access
Control. RBAC associa <e>ruoli</e> ad ogni utente. Ogni ruolo definisce che
operazioni possono essere eseguite su certi oggetti. Data una ben scritta collezione 
di ruoli e operazioni i tuoi utenti saranno ristretti all'esecuzione di quei soli processi
che tu gli hai comunicato di poter eseguire. Il default "deny-all" ti rassicura che gli utenti
non potranno mai fare operazioni che tu non abbia mai pensato di fargli fare.
</p>

</body>
</section>
<section>
<title>Configurare il Kernel</title>
<body>

<p>
I settaggi del kernel raccomandati per RBAC sono:
</p>

<pre caption="Configurazione del kernel raccomandata per RBAC">
<comment>#
# Role Based Access Control Options
#</comment>
CONFIG_GRKERNSEC_ACL_HIDEKERN=y
CONFIG_GRKERNSEC_ACL_MAXTRIES=3
CONFIG_GRKERNSEC_ACL_TIMEOUT=30
</pre>

</body>
</section>
<section>
<title>Lavorare con gradm</title>
<body>

<p>
<c>gradm</c> è un tool che ti permette di amministrare e gestire una politica per
il tuo sistema. Con esso, puoi abilitare o disabilitare il sistema RBAC, ricaricare 
i ruoli di RBAC, cambiare il tuo ruolo, settare una password per la modalità admin, ecc.
</p>

<p>
Quando installi <c>gradm</c> sarà configurata una politica di default 
<path>/etc/grsec/policy</path>:
</p>

<pre caption="Installare gradm">
# <i>emerge gradm</i>
</pre>


<p>
Di default, le politiche di RBAC non sono attivate. E' lavoro del sysadmin 
stabilire quando nel sistema va imposta una politica di RBAC e non di quella di Gentoo.
Prima di attivare il sistema RBAC dovresti settare una password di amministratore.
</p>

<pre caption="Attivare il sistema RBAC">
# <i>gradm -P admin</i>
Setting up grsecurity RBAC password
Password: <comment>(Enter a well-chosen password)</comment>
Re-enter Password: <comment>(Enter the same password for confirmation)</comment>
Password written in /etc/grsec/pw
# <i>gradm -E</i>
</pre>


<p>
Per disabilitare il sistema RBAC, esegui <c>gradm -D</c>. Se non ti è consentito, ti occorre
prima impostarti nel ruolo di admin:
</p>


<pre caption="Disabilitare il sistema RBAC">
# <i>gradm -a admin</i>
Password: <comment>(Enter your admin role password)</comment>
# <i>gradm -D</i>
</pre>


<p>
Se vuoi abbandonare il ruolo di amministratore, esegui <c>gradm -u admin</c>:
</p>

<pre caption="Uscire dal ruolo di admin">
# <i>gradm -u admin</i>
</pre>

</body>
</section>
<section>
<title>Generare una Politica</title>
<body>

<p>
Il sistema RBAC porta con se una grande caratteristica chiamata "learning mode". Il learning
mode può generare un preventivo di politica con i minori privilegi policy per il tuo sistema. Questo
ti permette di salvare tempo e denaro facendoti diventare rapido nello sviluppo
si multipli secure servers.
</p>

<p>
Per usare il "learning mode", è necessario attivarlo eseguendo <c>gradm</c>:
</p>

<pre caption="Attivare il RBAC learning mode">
# <i>gradm -F -L /etc/grsec/learning.log</i>
</pre>

<p>
Ora usa il tuo sistema, fai le cose che normalmente faresti. Prova ad evitare rsync,
lanciare locate di qualasiasi altro file pesante, operazioni di i/o,  queste potrebbero rallentare sensibilmente il tempo di calcolo della politica.
</p>

<p>
Quando crederai di aver usato il tuo sistema a sufficienza da aver ottenuto una buona politica,
fa si che <c>gradm</c> la processi e proponga i ruoli in 
<path>/etc/grsec/learning.roles</path>:
</p>

<pre caption="Processare i log di learning mode">
# <i>gradm -F -L /etc/grsec/learning.log -O /etc/grsec/learning.roles</i>
</pre>

<p>
Verifica il file <path>/etc/grsec/learning.roles</path> e salvalo come
<path>/etc/grsec/policy</path> (mode 0600) quando hai finito.
</p>

<pre caption="Salvare le politiche">
# <i>mv /etc/grsec/learning.roles /etc/grsec/policy</i>
# <i>chmod 0600 /etc/grsec/policy</i>
</pre>

<p>
Ora è possibile abilitare il sistema RBAC con la tua politica "learned".
</p>

</body>
</section>
<section>
<title>Metti a punto la tua politica</title>
<body>

<p>
Un interessante componente di grsecurity2 è <e>Set Operation Support</e> per i file di configurazione.
Attualmente supporta le unioni, intersezioni e differenze
di set (di oggetti in questo caso).
</p>

<pre caption="Set di esempio">
define objset1 {
/root/blah rw
/root/blah2 r
/root/blah3 x
}

define somename2 {
/root/test1 rw
/root/blah2 rw
/root/test3 h
}
</pre>

<p>
Questo è un esempio del suo uso, e degli oggetti risultanti che verranno aggiunti al tuo soggetto:
</p>

<pre caption="&amp; Esempio">
subject /somebinary o
$objset1 &amp; $somename2
</pre>

<p>
Quanto sopra può essere esteso in:
</p>

<pre caption="Settaggi degli oggetti risultanti">
subject /somebinary o
/root/blah2 r
</pre>


<p>
Questo è il risultato dell'operatore &amp; che prende entrambi i set and restituisce i files che esistono i entrambi i set e i permessi di tali files che esistono in entrambi i set.
</p>

<pre caption="| Esempio">
subject /somebinary o
$objset1 | $somename2
</pre>

<p>
Questo esempio può essere esteso in:
</p>

<pre caption="Settaggi degli oggetti risultanti">
subject /somebinary o
/root/blah rw
/root/blah2 rw
/root/blah3 x
/root/test1 rw
/root/test3 h
</pre>

<p>
Questo è il risultato dell'operatore | che prende entrambi i set e restituisce
i file che esistono sia in un set che nell'altro.  Se un file esiste in entrambi i sets, viene restituito
e gli attributi saranno quelli esistenti in l'uno o l'altro set.
</p>

<pre caption="- Esempio">
subject /somebinary o
$objset1 - $somename2
</pre>

<p>
Questo può essere esteso in:
</p>

<pre caption="Settaggi degli oggetti risultanti">
subject /somebinary o
/root/blah rw
/root/blah2 h
/root/blah3 x
</pre>

<p>
Questo è il risultato dell'operatore  - che prende entrambi i set e ritorna 
i file che esistono nel set di sinistra ma che non sono uguali a nessuno del set di destra. Se un file esiste a sinistra e coincide con uno di destra(o il nome è lo stesso, o esiste una direcroty superiore uguale), il file viene restituito
e gli attributi del secondos e sono rimossi da quello del primo, e tale file viene restituito.
</p>

<p>
In alcuni pseudo-linguaggi oscuri potresti vedere questo:
</p>

<pre caption="Spiegazione Pseudo-linguaggi">
if ( (<i>$objset1</i> contained <i>/tmp/blah rw</i>) and
     (<i>$objset2</i> contained <i>/tmp/blah r</i>) )
then
  <i>$objset1 - $objset2</i> would contain <i>/tmp/blah w</i>

if ( ( <i>$objset1</i> contained <i>/tmp/blah rw</i>) and
     ( <i>$objset2</i> contained <i>/ rwx</i>) )
then 
  <i>$objset1 - $objset2</i> would contain <i>/tmp/blah h</i>
</pre>


<p>
Come in ordine di precedenza (dal più alto al più basso): "-, &amp; |".
</p>

<p>
Se non vuoi noiarti ricordando le precedenze, è anche incluso il supporto
delle parentesi, in modo che tu possa fare così:
</p>

<pre caption="Esempio delle Parentesi">
(($set1 - $set2) | $set3) &amp; $set4
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Protezione del Filesystem</title>
<section>
<title>Combattere Chroot e Abuso di Filesystem</title>
<body>

<p>
Grsecurity2 include molte patch che proibiscono agli utenti di acquisire non necessarie conoscenze riguardo al sistema.
Questo include restrizioni sull'uso di <path>/proc</path>
 chrooting, linking, ecc.
</p>

</body>
</section>
<section>
<title>Configurazione del Kernel</title>
<body>

<p>
Vi raccomandiamo la seguente configurazione del kernel per la protezione 
grsecurity:
</p>

<pre caption="Attivare la protezione del Filesystem">
<comment>#
# Filesystem Protections
#</comment>
CONFIG_GRKERNSEC_PROC=y
<comment># CONFIG_GRKERNSEC_PROC_USER is not set</comment>
CONFIG_GRKERNSEC_PROC_USERGROUP=y
CONFIG_GRKERNSEC_PROC_GID=10
CONFIG_GRKERNSEC_PROC_ADD=y
CONFIG_GRKERNSEC_LINK=y
CONFIG_GRKERNSEC_FIFO=y
CONFIG_GRKERNSEC_CHROOT=y
CONFIG_GRKERNSEC_CHROOT_MOUNT=y
CONFIG_GRKERNSEC_CHROOT_DOUBLE=y
CONFIG_GRKERNSEC_CHROOT_PIVOT=y
CONFIG_GRKERNSEC_CHROOT_CHDIR=y
CONFIG_GRKERNSEC_CHROOT_CHMOD=y
CONFIG_GRKERNSEC_CHROOT_FCHDIR=y
CONFIG_GRKERNSEC_CHROOT_MKNOD=y
CONFIG_GRKERNSEC_CHROOT_SHMAT=y
CONFIG_GRKERNSEC_CHROOT_UNIX=y
CONFIG_GRKERNSEC_CHROOT_FINDTASK=y
CONFIG_GRKERNSEC_CHROOT_NICE=y
CONFIG_GRKERNSEC_CHROOT_SYSCTL=y
CONFIG_GRKERNSEC_CHROOT_CAPS=y
</pre>

</body>
</section>
<section>
<title>Triggering the Security Mechanism</title>
<body>

<p>
Quando userai un kernel compilato con le opzioni soprariportate (o simili),
tu potrai abilitare o disabilitare molte delle opzioni attraverso 
<c>/proc</c> filesystem o tramite <c>sysctl</c>.
</p>

<p>
L'esempio seguente ti mostra una tipica opzione di <path>/etc/sysctl.conf</path>:
</p>

<pre caption="Esempio di settaggio in /etc/sysctl.conf">
kernel.grsecurity.chroot_deny_sysctl = 1
kernel.grsecurity.chroot_caps = 1
kernel.grsecurity.chroot_execlog = 0
kernel.grsecurity.chroot_restrict_nice = 1
kernel.grsecurity.chroot_deny_mknod = 1
kernel.grsecurity.chroot_deny_chmod = 1
kernel.grsecurity.chroot_enforce_chdir = 1
kernel.grsecurity.chroot_deny_pivot = 1
kernel.grsecurity.chroot_deny_chroot = 1
kernel.grsecurity.chroot_deny_fchdir = 1
kernel.grsecurity.chroot_deny_mount = 1
kernel.grsecurity.chroot_deny_unix = 1
kernel.grsecurity.chroot_deny_shmat = 1
</pre>

<p>
Puoi abilitare o disabilitare le varie impostazioni usando il comando <c>sysctl</c>:
</p>

<pre caption="Abilitare opzioni con sysctl">
<comment>(Impostare exec_logging ON)</comment>
# <i>sysctl -w kernel.grsecurity.exec_logging = 1</i>
<comment>(Impostare the exec_logging OFF)</comment>
# <i>sysctl -w kernel.grsecurity.exec_logging = 0</i>
</pre>

<p>
Questa è un importantissima opzione riguardo a grsecurity:
<c>kernel.grsecurity.grsec_lock</c>. Quando abilitata, non puoi più cambiare altre opzioni.
</p>

<pre caption="Bloccare l'interfaccia di sysctl">
# <i>sysctl -w kernel.grsecurity.grsec_lock = 1</i>
</pre>


</body>
</section>
</chapter>

<chapter>
<title>Verifica del Kernel</title>
<section>
<title>Estendere l'azione del Logger di System</title>
<body>

<p>
grsecurity aggiunge funzionalità extra al kernel riguardo al logging. Con la
<e>Verifica del Kernel</e> di grsecurity il kernel ti informa quando le applicazioni partono, le device vengono (s)montate, ecc..
</p>

</body>
</section>
<section>
<title>Le varie opzioni della verifica del kernel</title>
<body>

<p>
La seguente sezione di configurazione del kernel può essere usata per abilitare grsecurity le funzionalità della Verifica del Kernel:
</p>

<pre caption="Attivare Verifica del Kernel">
<comment>#
# Kernel Auditing
#
# CONFIG_GRKERNSEC_AUDIT_GROUP is not set</comment>
CONFIG_GRKERNSEC_EXECLOG=y
CONFIG_GRKERNSEC_RESLOG=y
CONFIG_GRKERNSEC_CHROOT_EXECLOG=y
CONFIG_GRKERNSEC_AUDIT_CHDIR=y
CONFIG_GRKERNSEC_AUDIT_MOUNT=y
CONFIG_GRKERNSEC_AUDIT_IPC=y
CONFIG_GRKERNSEC_SIGNAL=y
CONFIG_GRKERNSEC_FORKFAIL=y
CONFIG_GRKERNSEC_TIME=y
CONFIG_GRKERNSEC_PROC_IPADDR=y
CONFIG_GRKERNSEC_AUDIT_TEXTREL=y
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Restrizioni dei processi</title>
<section>
<title>Protezione Eseguibile</title>
<body>

<p>
Con grsecurity puoi applicare restrizioni agli eseguibili. Finchè molti exploit sfrutteranno uno o più processi in esecuzione, questa protezione salverà la salute del tuo sistema.
</p>

</body>
</section>
<section>
<title>Protezione della Rete</title>
<body>

<p>
Lo stack TCP/IP di Linux è vulnerabile a attacchi di tipo prediction-based. Grsecurity
include alcune patch per evitare tali attacchi. A parte queste
puoi sempre abilitare le restrizioni sui socket, disabilitando particolari accessi di rete contemporaneamente.
</p>

</body>
</section>
<section>
<title>Impostazione del Kernel</title>
<body>

<p>
Le seguenti impostazioni del kernel abilitano varie protezioni eseguibili e di rete:
</p>

<pre caption="Impostazioni del Kernel">
<comment>#
# Executable Protections
#</comment>
CONFIG_GRKERNSEC_EXECVE=y
CONFIG_GRKERNSEC_DMESG=y
CONFIG_GRKERNSEC_RANDPID=y
CONFIG_GRKERNSEC_TPE=y
CONFIG_GRKERNSEC_TPE_ALL=y
CONFIG_GRKERNSEC_TPE_GID=100

<comment>#
# Network Protections
#</comment>
CONFIG_GRKERNSEC_RANDNET=y
CONFIG_GRKERNSEC_RANDISN=y
CONFIG_GRKERNSEC_RANDID=y
CONFIG_GRKERNSEC_RANDSRC=y
CONFIG_GRKERNSEC_RANDRPC=y
<comment># CONFIG_GRKERNSEC_SOCKET is not set</comment>
</pre>


</body>
</section>
</chapter>

<chapter>
<title>La strumentazione per l'Hardened</title>
<section>
<body>

<p>
Benchè sia al di fuori dallo scopo di questo documento abbiamo menzionato l'uso degli strumenti hardened che completano il modello userspace di grsec/PaX.
Come inzio si può fare:
</p>

<pre caption="Uso degli strumenti hardened">
# <i>cd /etc</i>
# <i>rm make.profile</i>
# <i>ln -s ../usr/portage/profiles/hardened/x86 make.profile</i>
# <i>emerge -e world</i>
</pre>


<p>
Se non volessi usare questo profilo, aggiungi la USE flag <c>hardened</c>
alle tue variabili USE in <path>/etc/make.conf</path>. 
</p>

</body>
</section>
</chapter>

<chapter>
<title>Risorse</title>
<section>
<body>

<ul>
  <li><uri link="http://grsecurity.net/">Grsecurity Homepage</uri></li>
  <li><uri link="http://forums.grsecurity.net/">Grsecurity Forums</uri></li>
  <li>
    <uri link="http://grsecurity.net/researchpaper.pdf">Increasing Performance 
    and Granularity in Role-Based Access Control Systems</uri>

  </li>
  <li>
    <uri link="http://www.gentoo.org/proj/en/hardened/capabilities.xml">
    Capability Names and Descriptions</uri>
  </li>
  <li>
    <uri link="http://grsecurity.net/quickstart.pdf">Grsecurity Quick-Start 
    Guide</uri> (NEW .pdf)
  </li>

  <li>
    <uri link="http://www.gentoo.org/proj/en/hardened/pax-quickstart.xml">Using PaX with 
    Gentoo QuickStart</uri> (NEW)
  </li>
  <li>
    <uri link="http://hardened.gentoo.org/grsecurity.xml">Grsecurity with 
    Gentoo 1.9.x MAC system</uri> (OLD)
  </li>
  <li>
    <uri link="http://grsecurity.net/PaX-presentation_files/frame.htm">PaX: The 
    Guaranteed End of Arbitrary Code Execution</uri>

  </li>
  <li>
    <uri link="http://pax.grsecurity.net">PaX HomePage and Documentation</uri>
  </li>
  <li>
    <uri link="http://www.gentoo.org/proj/en/infrastructure/tenshi">Tenshi</uri>
  </li>
</ul>


</body>
</section>
</chapter>

</guide>
