<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "http://www.gentoo.org/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/it/qa/autofailure.xml,v 1.4 2012/10/28 15:21:25 swift Exp $ -->

<guide lang="it">
<title>Come risolvere i guasti negli autotools</title>

<author title="Autore">
  <mail link="flameeyes@gentoo.org">Diego Pettenò</mail>
</author>
<author title="Traduzione">
  <mail link="skypjack@gmail.com">Michele Caini</mail>
</author>

<abstract>
Questa guida si propone di descrivere le situazioni comuni che portano ad un
guasto degli autotools nell'esecuzione in un ebuild, fornendo consigli su
come risolvere questo tipo di problemi.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.10</version>
<date>2008-06-07</date>

<chapter>
<title>Introduzione</title>

<section>
<body>
<p>
Con il termine <e>autotools</e> ci riferiamo solitamente agli strumenti
sviluppati dal progetto GNU per creare un sistema di compilazione indipendente
dalla piattaforma e dal sistema operativo in cui opera, ovvero <c>autoconf</c>,
<c>automake</c> e <c>libtool</c>. Anche se non ogni pacchetto li usa tutti allo
stesso momento, molti dei più moderni lo fanno; i vecchi pacchetti spesso non
usano invece <c>automake</c> e <c>libtool</c>; i pacchetti di KDE usano un più
complesso sistema di compilazione che si basa alla fine sui tre software citati.
</p>

<p>
È semplice riconoscere un pacchetto il cui sistema di compilazione si basa sugli
autotools: se c'è uno script <path>configure</path>, e un file
<path>configure.in</path> o <path>configure.ac</path>, il sistema di
compilazione è basato su <c>autoconf</c>; se ci sono uno o più file
<path>Makefile.am</path> nelle varie sottocartelle, si appoggia anche su
<c>automake</c>; se c'è uno script <path>ltmain.sh</path>, sfrutta infine
<c>libtool</c>.
</p>

<p>
Per compilare un pacchetto che usa un sistema di compilazione basato sugli
autotools, questi stessi strumenti non sono strettamente necessari: lo script
<path>configure</path> è un semplice script per Bourne Shell (di solito, ma
questo sarà discusso in seguito) e trasforma i file <path>Makefile.in</path> in
più semplici <path>Makefile</path> per <c>make</c> (o, più probabilmente,
<c>gmake</c>). Nonostante siano opzionali per compilare il software, spesso le
patch necessarie per risolvere i problemi come le <uri
link="/proj/en/qa/asneeded.xml">compilazioni fallite a causa di
--as-needed</uri> (ndT: in inglese) o le <uri link="automagic.xml">dipendenze
automagic</uri> richiedono di eseguire nuovamente gli strumenti citati per
ricreare i modelli di script e makefile.
</p>

<p>
Questa guida non darà indicazioni su come correggere gli errori dei pacchetti
con l'uso degli autotools, in quanto è un argomento molto vasto che richieder
ebbe molto tempo per essere spiegato. Per una semplice introduzione alla maggior
parte degli errori più comuni nell'uso degli autotools, è caldamente suggerito
la lettura dell'articolo <uri
link="/doc/it/articles/autotools-practices.xml">"Le migliori tecniche con gli
autotools"</uri>. Invece, saranno descritti i casi più comuni in cui il
rieseguire gli autotools porta a degli errori, sia nella creazione degli script
che all'atto della compilazione.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Eseguire nuovamente gli autotools</title>
<section>
<body>

<p>
La prima cosa importante da sapere è come ricreare correttamente il supporto
agli autotools, problema comune che introduce degli errori negli ebuild.
L'ordine in cui gli autotools sono eseguiti è importante, in quanto uno dipende
dall'altro e l'output finale dipende largamente dal rispetto dell'ordine di
esecuzione.
</p>

<p>
Molti pacchetti forniscono uno script singolo, solitamente chiamato
<path>autogen.sh</path> o <path>bootstrap.sh</path> che viene usato per eseguire
i vari strumenti nell'ordine che gli sviluppatori originali ritengono essere
quello corretto, spesso impostando variabili così che le versioni corrette di
tali strumenti vengano eseguite (versioni differenti degli autotools non sempre
vanno bene). Questi script sono, in generale, preferiti al posto di altri metodi
ma a volte contengono errori, o assumono di essere eseguito su un dato ambiente
che potrebbe essere univoco rispetto ad altre distribuzioni, e per questa
ragione vanno controllati attentamente, e quando non comportano nessun vantaggio
rispetto ad altri metodi (come nel caso in cui eseguono i vari strumenti uno
dopo l'altro senza passare loro parametri speciali o controllare il loro valore
di ritorno), dovrebbero essere scartati.
</p>

<p>
Il pacchetto <c>autoconf</c> fornisce uno script automatizzato, chiamato
<c>autoreconf</c> che dovrebbe automaticamente rilevare quali autotools sono
utilizzati e chiamarli, ma troppo spesso fallisce nel riconoscere la corretta
versione o si interrompe perchè incappa in casi specifici. Inoltre, esegue
<c>autopoint</c>, lo script che aggiunge il supporto a <c>gettext</c> ad un
pacchetto, la cui esecuzione non è quasi mai richiesta dopo aver applicato
patch ad un pacchetto. Per questa ragione, <c>autoreconf</c> è deprecato ed
evitato quando possibile (lo stesso vale per gli script forniti dagli
sviluppatori originali che lo usano).
</p>

<p>
Per aggirare questo problema, è stata aggiunta l'eclass <path>autotools</path>,
che fornisce delle funzioni che inglobano gli GNU autotools: <c>eautoconf</c>,
<c>eautomake</c>, <c>_elibtoolize</c> (il simbolo _ è usato come prefisso per
evitare collisioni con le funzioni <c>elibtoolize</c> provenienti invece
dall'eclass <path>libtool</path>) e la più importante funzione
<c>eautoreconf</c>. Questa funzione non include lo script <c>autoreconf</c>
malfunzionante, ma piuttosto analizza i file di supporto agli autotools presenti
ed esegue i vari strumenti nel loro corretto ordine. Inoltre esegue la funzione
<c>elibtoolize</c> per correggere i file di supporto a libtool se necessario,
evitando problemi quando questo viene chiamato prima dell'attuale
ristrutturazione dei file per gli autotools.
</p>

<p>
Le funzioni nell'eclass <path>autotools</path> hanno anche il vantaggio di non
presentare all'utente grosse quantità di output inutile (nel caso di
avvertimenti) o perfino niente (in caso non ci siano problemi); piuttosto
forniscono i messaggi di stato <c>ebegin</c>/<c>eend</c> così che l'utente saprà
cosa sta succedendo, e inoltre tracciano la situazioni d'errore mettendo a
disposizione un messaggio simile a <c>epatch</c> in caso di fallimento. Per tale
ragione, queste funzioni sono preferite al posto delle chiamate manuali, di
comportamenti scorretti o script personalizzati quasi inutili. Un altro motivo è
che l'eclass <path>autotools</path> aggiunge anche una dipendenza di
compilazione sui pacchetti di cui necessita (<b>sys-devel/autoconf</b>,
<b>sys-devel/automake</b>, <b>sys-devel/libtool</b>).
</p>

</body>
</section>
<section>
<title>Casi eccezionali: pacchetti KDE che usano kde.eclass</title>
<body>

<p>
Nonostante KDE 3.x usi gli autotools come molti altri pacchetti software, sta
impiegando un'impostazione personalizzata per essi con diverse macro specifiche
e passaggi aggiuntivi utili a completare la rigenerazione di tutti i file
necessari. Per questa ragione gli <path>autotools</path> non dovrebbero essere
usati per ricompilare gli autotools per pacchetti KDE che usano la
eclass <path>kde</path> per la compilazione.
</p>

<p>
Come particolare eccezione alle regole comuni per la ricompilazione degli
autotools durante la fase di <c>src_unpack</c>, i pacchetti KDE ricompilano i
propri autotools durante la fase <c>src_compile</c> ogni volta che il file
principale <path>configure</path> non viene trovato. Per questa ragione, per chi
volesse ricompilare i file degli autotools per pacchetti KDE, assicurarsi prima
di rimuovere il file <path>configure</path> dalla cartella principale dei
sorgenti.
</p>

<p>
Molti dei problemi sollevati dal sistema di compilazione personalizzato di
KDE, che compaiono con le nuove versioni degli autotools, possono essere di
solito risolti rimpiazzando la cartella <path>admin</path> nell'archivio dei
sorgenti con una nuova copia presa dall'ultimo rilascio di KDE o da SVN. Per
farlo basta aggiungere un archivio, contenente la nuova cartella
<path>admin</path> come unica contenuto della variabile <c>SRC_URI</c>, sarà
poi <c>kde_src_unpack</c> a prendersi cura del rimpiazzo.
</p>

<impo>
Si prega di non creare nuovi archivi contenenti cartelle admin prima di aver
controllato se esiste già un archivio con la nuova cartella <path>admin</path>
di cui si necessita. Il nome di questo archivio è di fatto standardizzato come
<path>kde-admindir-$versione.tar.bz2</path> e la l'ultima versione disponibile
al momento è la 3.5.5.<!-- Sarebbe utile tenere questo riferimento aggiornato,
grazie! -->
</impo>

</body>
</section>
</chapter>

<chapter>
<title>Casi comuni di fallimento e cause</title>

<section>
<title>Possibili macro non definite</title>
<body>

<p>
Il fallimento più comune con gli autotools è legato al messaggio di
<c>autoconf</c> "possibly undefined macro: SOME-MACRO" ("possibile macro non
definita: QUALCHE_MACRO"). Questo messaggio è utilizzato quando una macro viene
chiamata dal file <path>configure.ac</path> o <path>configure.in</path> ma non è
in realtà definita nel file <path>aclocal.m4</path> creato da <c>aclocal</c>.
</p>

<p>
Questo succede spesso perchè la macro indicata non è disponibile quando
<c>aclocal</c> viene eseguito; poiche, in modo predefinito, si caricano le macro
trovate in <path>/usr/share/aclocal</path>, ciò significa che il pacchetto che
fornisce questa macro non è installato (o la macro è chiamata con un altro
nome). Siccome il secondo caso è tanto banale quanto complesso da risolvere, ci
si concentrerà sul primo esempio, la definizione mancante di una macro.
</p>

<p>
Affinchè le macro scritte dagli sviluppatori originali per il loro software
siano rilevate nel sistema dall'uso degli autotools, vengono normalmente scritte
in file m4 che sono poi installati nella già citata cartella
<path>/usr/share/aclocal</path>. Dato che molti pacchetti usano queste macro per
le dipendenze opzionali, potrebbero avere bisogno di un file m4 che non è
installato nel sistema quando vengono eseguiti gli autotools; per risolvere il
problema, è possibile copiare il file m4 in una sottocartella fornita del
pacchetto stesso.
</p>

<p>
Sfortunatamente, per poter utilizzare questa sottocartella, di norma chiamata
<path>m4</path>, <c>aclocal</c> deve essere informato riguardo alla sua
esistenza. Nei progetti che usano <c>automake</c> è possibile specificarlo
all'interno del file <path>Makefile.am</path> principale impostando la variabile
<b>ACLOCAL_AMFLAGS</b>:
</p>

<pre caption="esempio di chiamata ad aclocal per cercare i file di macro nella
cartella m4">
...
ACLOCAL_AMFLAGS = -I m4
...
</pre>

<p>
Questo viene spesso trascurato dagli sviluppatori originali che semplicemente
passano il parametro <c>-I m4</c> ad aclocal quando compilano i loro pacchetti.
Mentre aggiungere una patch per correggere il problema è molto difficile, è
invece semplice, se il pacchetto ha una cartella con i file m4 necessari,
impostarla nella variabile <b>AT_M4DIR</b>. Lo stesso vale se il pacchetto non
usa <c>automake</c> ma solo <c>autoconf</c>.
</p>

<pre caption="indicare ad eautoreconf di cercare i file di macro nella cartella
'm4'">
src_unpack() {
    ...
    AT_M4DIR="m4" eautoreconf
}
</pre>

<p>
Nei rari casi in cui il software usi un sistema di compilazione sostitutivo
simile a Cygnus, il precedente esempio può fallire, in quanto prova a cercare la
sottocartella m4 dal punto in cui risiede lo script configure; per risolvere
questo tipo di problemi, impostare invece la variabile AT_M4DIR a
<path>${S}/m4</path>.
</p>

<note>
È di solito una buona idea fare sapere agli sviluppatori originali se non hanno
impostato la variabile <b>ACLOCAL_AMFLAGS</b>, in modo che possano correggere la
svista nella versione successiva; in un teorico mondo perfetto, il solo
<c>eautoreconf</c> dovrebbe risolvere tutti i problemi.
</note>

<p>
Meno spesso, ma ancora succede, non ci sono cartelle con file m4, o i file con
le macro non definite non sono presenti; per risolvere la questione, si deve
cercare il pacchetto che fornisce le macro m4, quindi aggiungerlo alla cartella,
con una patch o mettendolo su un mirror e poi aggiungendolo a <b>SRC_URI</b> (in
questo caso si dovrà aggiungere <b>${WORKDIR}</b> alla lista delle cartelle di
ricerca o posizionarla nella cartella corretta). Questo tipo di problemi è uno
dei più fastidiosi, perciò è di solito preferibile informare il prima possibile
gli sviluppatori originali così che il rilascio successivo non necessiti di
nessun accorgimento.
</p>

</body>
</section>

<section>
<title>Discrepanza fra le versioni di automake quando viene eseguito
eautoreconf</title>
<body>

<p>
Talvolta <c>eautoreconf</c>, quando eseguito, fallisce riportando un errore di
discrepanza fra le versioni. Ci si potrebbe aspettare di non vedere mai questo
errore dal momento che la funzione <c>eautomake</c> si prenderà cura di eseguire
nuovamente tutti gli autotools laddove la versione di <c>automake</c> usata per
la compilazione del pacchetto differisca da quella usata dall'ebuild; inoltre,
durante <c>eautoreconf</c>, gli strumenti sono usati forzando la sostituzione
dei file, così che i riferimenti ad <c>automake</c> usati dallo sviluppatore
originale dovrebbero sparire del tutto.
</p>

<p>
L'unica (o almeno la più plausibile) causa è una scarsa conoscenza degli
autotools da parte dello sviluppatore dell'ebuild. Quando si trova faccia a
faccia col problema descritto in precedenza di <e>possibili macro non
definite</e>, lo sviluppatore potrebbe sentirsi costretto a copiare
semplicemente il precedente file <path>aclocal.m4</path> dall'archivio originale
con un nome diverso, per preservare anche in questo caso le definizioni delle
macro. Sfortunatamente, questo sovrascrive le macro <c>automake</c>, causando
questo spesso incomprensibile fallimento.
</p>

<warn>
Non andrebbe <b>mai</b> copiato un vecchio file <path>aclocal.m4</path>, dato
che potrebbe risultare in un conflitto con i rilasci di versioni minori
<c>automake</c> e potrebbe anche creare problemi quando <c>automake</c> è
sottoposto a modifiche in Gentoo per risolvere un bug in dette macro.
</warn>

</body>
</section>
<section>
<title>Fallimenti di automake, richiesta file mancanti</title>
<body>

<p>
Un altro errore comune, questa volta con <c>automake</c> è un fallimento causato
da file mancanti, come <path>NEWS</path> o <path>README</path>. Questo avviene
perchè tutti gli autotools assumono, se nessuno li informa del contrario, di
stare lavorando in un pacchetto GNU, quindi di avere una serie di file perchè
appartenenti alla guida sullo stile di codifica del progetto GNU stesso, e
falliscono quando questi file non sono presenti. In questi casi <c>automake</c>
dovrebbe essere chiamato col parametro <c>--foreign</c>, che chiede di non
fallire se i file richiesti dal progetto GNU non sono presenti.
</p>

<p>
D'altra parte, la funzione <c>eautomake</c> prova a semplificare la
ricompilazione con gli autotools controllando se alcuni dei file del progetto
GNU sono presenti, e quindi chiamando <c>automake</c> con le giuste opzioni se
non fosse questo il caso. Il modo corretto per risolvere il problema (da
notificare agli sviluppatori originali) è aggiungere alla variabile
<b>AUTOMAKE_OPTIONS</b> l'opzione <e>foreign</e> così da informarlo di usare il
supporto esterno.
</p>

<p>
Quando i file sono richiesti da <path>configure.in</path> o
<path>configure.ac</path> invece che da <path>Makefile.am</path>, e sono di
solito i due file <path>config.guess</path> e <path>config.sub</path>, il
problema è che il pacchetto non viene correttamente avviato. Per risolvere,
<c>automake</c> dovrebbe essere chiamato con l'opzione <c>--add-missing
--copy</c>. Questo è quello che la funzione <c>eautomake</c> fa già, così se si
riscontra questo problema, dovrebbe essere considerata l'idea di usare le
funzioni fornite dall'eclass <path>autotools</path> invece di eseguire i diversi
strumenti manualmente o con eventuali script forniti col pacchetto stesso.
</p>

<warn>
Uno sbaglio comune fatto quando <c>automake</c> fallisce in questi casi è il non
mettere la condizione <c>|| die</c>, che evita l'interruzione del processo di
compilazione. Questo è un errore, perchè i file saranno di solito necessari più
tardi, è quindi meglio forzare sempre il loro rimpiazzo, anche perchè in molti
casi nuove versioni dei due file sono necessari per la compilazione su molte
architetture.
</warn>

</body>
</section>
<section>
<title>Dipendenze di versione mancanti</title>
<body>

<p>
All'incirca dall'Estate 2006, le funzioni di supporto per <c>automake</c> e
<c>autoconf</c> non dipendono forzatamente da tutte le versioni dei rispettivi
pacchetti, ciò comporta il non potersi affidare al fatto che gli utenti abbiano
tutte le versioni installate, e le dipendenze devono essere risolte in accordo
con i pacchetti usati. Per semplificare la gestione delle dipendenze e la
forzatura delle versioni necessarie, le variabili <b>WANT_AUTOCONF</b> e
<b>WANT_AUTOMAKE</b> sono considerate come input all'eclass che quindi tratterà
sia le dipendenze che l'applicativo.
</p>

<pre caption="dipendere da autoconf 2.1 e automake 1.4">
WANT_AUTOCONF="2.1"
WANT_AUTOMAKE="1.4"

inherit autotools
</pre>

<p>
In molti casi, invece di dipendere da una data versione di automake o autoconf,
si vorrebbe dipendere dall'ultima versione disponibile, più facilmente già
presente nel sistema degli utenti. Per questa ragione, l'eclass autotools
accetterà uno speciale valore per le variabili menzionate, <e>latest</e>, che
sarà poi espanso in <c>autoconf</c> 2.5 e <c>automake</c> 1.9 o 1.10 in
relazione a cosa è smascherato per il dato sistema. Tutto ciò è suggerito quando
un pacchetto non deve essere influenzato da qualche caratteristica o
malfunzionamento di una vecchia versione di questi.
</p>

<pre caption="dipendere dalle ultime versioni degli autotools">
WANT_AUTOCONF="latest"
WANT_AUTOMAKE="latest"

inherit autotools
</pre>

</body>
</section>
<section>
<title>Errori nelle fasi di compilazione riguardanti la versione di
autoconf</title>
<body>

<p>
Talvolta potrebbero nascere errori, durante la compilazione di pacchetti, legati
alla versione di <c>autoconf</c>, nonostante non siano ricompilati i file degli
autotools o in effetti proprio <e>perché</e> non sono stati ricompilati i file
degli autotools.
</p>

<pre caption="errori comuni nella fase di compilazione">
${S}/missing --run
automake-1.10 --gnu  src/Makefile
aclocal.m4:14: error: this file was generated for autoconf 2.61.
You have another version of autoconf.  If you want to use that,
you should regenerate the build system entirely.
aclocal.m4:14: the top level
autom4te-2.62: /usr/bin/m4 failed with exit status: 63
automake-1.10: autoconf failed with exit status: 63
make[2]: *** [Makefile.in] Error 1
</pre>

<p>
Questo messaggio deriva dal codice aggiunto dalla così detta "modalità di
manutenzione" fornita da <c>automake</c>. Questa modalità è per lo più intesa
per assicurare che gli sviluppatori e gli utenti che compilano manualmente
ottengano la versione corretta di <path>configure</path> e
<path>Makefile.in</path>, perfino se risultano modificati dopo l'esecuzione di
<c>make dist</c> per la creazione dell'archivio.
</p>

<p>
Mentre la modalità di manutenzione è abbastanza importante sia per gli
sviluppatori che per gli utenti che compilano manualmente, essa diventa un
fastidio nel cammino degli ebuild poiché esegue automaticamente gli autotools
se vengono applicate patch ai file <path>configure.ac</path> o
<path>Makefile.am</path>, perfino quando gli autotools non sono compresi nelle
dipendenze legate all'atto della compilazione dell'ebuild stesso.
</p>

<p>
Peggio ancora, se la versione di <c>automake</c> usata dal pacchetto non è
installata (per esempio se il pacchetto usa la vecchia versione 1.8, mentre
l'utente ha solo la versione 1.10) sarà saltata per intero la fase di
ricompilazione, rendendo di fatto il risultato non deterministico dal punto di
vista dell'ebuild.
</p>

<p>
L'errore precedente è causato da un pacchetto che ha uno dei suoi file
<path>Makefile.am</path> modificato, di solito tramite una patch, senza che
siano stati ricompilati gli autotools. In questi casi, <c>automake</c> sarà
invocato solo per ricompilare il <path>Makefile.in</path> coinvolto ma
funzionerà solo se la versione di <c>autoconf</c> nel sistema è la stessa di
quella usata per creare lo script originale <path>configure</path>. Questo non è
il caso una volta che nuove versioni di <c>autoconf</c> sono state rilasciate.
</p>

<p>
Ciò viene risolto ricompilando gli autotools in modo corretto come descritto in
precedenza, attraverso la funzione <c>eautoreconf</c> (o altri metodi dipendenti
da eclass eventualmente di livello superiore), invece che lasciando che sia la
modalità di manutenzione a preoccuparsi di questo.
</p>

<impo>
Le nuove pratiche per gli autotools suggeriscono di lasciare che venga forzata
la modalità di manutenzione, che è ciò che accade se il file
<path>configure.ac</path> non invoca la macro <c>AM-MAINTAINER_MODE</c>. Per
quei progetti che ancora forniscono un'opzione, è possibile disabilitare la
modalità di manutenzione (e quindi ritornare ad una ricompilazione
deterministica dal punto di vista dell'ebuild) tramite l'opzione
<c>--disable-maintainer-mode</c> di <c>econf</c>.
</impo>

</body>
</section>
<section>
<title>Fallimenti durante la configurazione di determinati locales (ad esempio
et_EE)</title>
<body>

<p>
Alcuni pacchetti, usando <c>autoconf</c> 2.13, falliscono nella configurazione
di alcuni sistemi con localizzazioni come et_EE. Questo è causato da un bug
nella specifica versione di autoconf (risolto nelle versioni successive, le
quali non sono retro-compatibili) dove sed tenta di usare una sintassi
dipendente dalla localizzazione prima che la variabile LANG sia impostata per
usare il locale C (rendendola indipendente dalla localizzazione).
</p>

<p>
Lo si può osservare per esempio nel <uri
link="http://bugs.gentoo.org/103483">bug #103483</uri>.
</p>

<p>
Per risolvere queste situazioni, è possibile applicare la <uri
link="bug103483-configure-LANG.patch.txt">configure-LANG.patch</uri>, la quale
forza l'impostazione di LANG prima che sia usata la sintassi dipendente dal
locale.
</p>

<p>
Se possibile, viene comunque suggerito di provare ad usare la nuova versione di
<c>autoconf</c> (2.59 o successiva) dove il problema è già risolto.
Sfortunatamente non è cosa fattibile per tutti i pacchetti, quindi
l'applicazione della patch è una buona via per risolvere la questione quando
<c>autoconf</c> 2.1 è effettivamente richiesto.
</p>

</body>
</section>
</chapter>
</guide>
