<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "http://www.gentoo.org/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/it/qa/automagic.xml,v 1.3 2012/02/26 15:07:07 swift Exp $ -->

<guide link="/proj/it/qa/automagic.xml" lang="it">
<title>Dipendenze Automagic, cosa sono e come risolverle</title>

<author title="Autore">
  <mail link="flameeyes@gentoo.org">Diego Elio Pettenò</mail>
</author>
<author title="Autore">
  <mail link="serkan@gentoo.org">Serkan Kaba</mail>
</author>
<author title="Traduzione">
  <mail link="skypjack@gmail.com">Michele Caini</mail>
</author>

<abstract>
Questa guida descrive il problema delle dipendenze "automagic", spiegando le
ragioni per cui sono problematiche e come poterle gestire nei casi più comuni.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.3</version>
<date>2011-06-01</date>

<chapter>
<title>Introduzione</title>
<section>
<title>Cosa sono le dipendenze automagic</title>
<body>

<p>
Le così dette <e>dipendenze "automagic"</e> sono dipendenze insite in un
software, riconosciute all'atto della compilazione o durante l'esecuzione, che
cambiano il modo in cui tale software opera. Il nome <e>automagic</e> è un gioco
di parole riferito all'uso degli GNU autotools, che stanno dietro a molti dei
casi di <e>dipendenze automagic</e>.
</p>

<p>
Il software normalmente possiede due tipi di dipendenze: obbligatorie e
opzionali. Il primo tipo di dipendenze sono necessarie per l'utilizzo del
software stesso (potrebbero rappresentare una libreria o un programma), e non
possono mancare nel sistema quando si compila o esegue il programma (dipende se
sono dipendenze di compilazione o di esecuzione). Le dipendenze opzionali sono
tali da poter essere disabilitate, normalmente al momento della compilazione (ma
talvolta anche durante l'esecuzione).
</p>

<p>
Le dipendenze opzionali vengono solitamente abilitate o disabilitate dall'utente
(o dal compilatore), un esempio classico è portato dalle opzioni
<c>--enable-foo</c> o <c>--with-bar</c> durante la chiamata di
<c>./configure</c> (questi parametri sono usati per abilitare dipendenze che
sono disabilitate in modo predefinito, ma in alcuni casi potrebbero essere
invece abilitate in modo predefinito e si avrà quindi <c>--disable-foo</c> e
<c>--without-bar</c>).
</p>

<p>
Ma con sistemi di compilazione che provano a capire cosa è presente o meno nel
sistema in cui operano, talvolta le dipendenze diventano <e>automagic</e>.
Questo significa che il sistema di compilazione non fornisce al compilatore un
modo per decidere se una data opzione deve o meno essere abilitata, pertanto
viene aggiunta, ma attivata solo quando viene trovata. Questo è un comportamento
sbagliato.
</p>

</body>
</section>
<section>
<title>Perchè le dipendenze automagic sono sbagliate</title>
<body>

<p>
Nel caso di distribuzione basate su binari, come quelle che si appoggiano su RPM
o DEB, le dipendenze automagic non influiscono minimamente: se l'utente ha
installato qualcosa e lo ha creato da solo, è solitamente ciò che vuole
abilitare, mentre se è un manutentore, dovrà solamente aggiungere una dipendenza
fra i pacchetti richiesti per eseguire il binario che ha creato.
</p>

<p>
Diverso il discorso per le distribuzioni basate su sorgenti, come Gentoo Linux
(e varianti). Dal momento che la distribuzione basata su sorgenti non può
distinguere utente e mantenitore del pacchetto, il sistema di compilazione
potrebbe trovare più cose di quelle necessarie all'utente stesso, e proverà a
collegare il software a tutto ciò che conosce a riguardo. Questa è la causa
principale della rottura dei collegamenti dei binari alle librerie a seguito di
una pulizia delle dipendenze inutilizzate (depclean).
</p>

<p>
Per semplificare, quando una dipendenza automagic non è indicata come
obbligatoria in un ebuild, ma piuttosto possiede un flag che semplicemente
aggiunge o rimuove le dipendenze su un dato pacchetto, se il pacchetto è
presente nel sistema viene creato il software con le dipendenze automagic, ma
se in seguito il pacchetto viene rimosso, il software risulterà corrotto,
richiedendo l'esecuzione di <c>revdep-rebuild</c> per correggere il
collegamento. È anche possibile che un utente non voglia realmente abilitare
alcune dipendenze poichè sa che di tanto in tanto danno dei problemi, o perchè
sta creando un pacchetto binario per un'altra macchina dove la dipendenza
potrebbe non essere presente (o potrebbe non funzionare in modo corretto).
</p>

<p>
Quando un pacchetto ha una dipendenza automagic ci sono solo due cose da fare:
le prima è dichiarare la dipendenza come obbligatoria, senza preoccuparsi di
cosa l'utente inserisce nella propria variabile USE, ma questo potrebbe
significare che alcuni supporti non desiderati dagli utenti siano sempre
abilitati e che di conseguenza introducano le relative dipendenze; la seconda è
correggere il sistema di compilazione in modo da renderlo capace di disabilitare
al momento della compilazione la dipendenza anche se presente sul sistema.
</p>

<p>
Per molto tempo gli sviluppatori originali non hanno pensato realmente di
aggiungere il supporto per disabilitare le dipendenze automagic in quanto non le
ritenevano un problema concreto: le avevano tutte installate, o almeno quelle di
cui necessitavano, e normalmente compilavano con tutte queste. Fortunatamente,
molti degli sviluppatori originali inoltre non pensavano nemmeno di aggiungere
delle opzioni per disabilitarle se venivano fornite delle patch (talvolta anche
senza patch, ma certamente l'invio di patch già pronte è sempre più ben
accetto), ma non è sempre così, per esempio gli sviluppatori originali di Wine
non vogliono aggiungere il supporto per abilitare o disabilitare le funzionalità
nella chiamata a <c>./configure</c> perchè desiderano che il software usi sempre
più opzioni possibili.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Risolvere le dipendenze automagic</title>
<section>
<title>Autotools</title>
<body>

<p>
Molte delle dipendenze automagic, come il nome suggerisce, sono dovute all'uso
(scorretto) degli GNU autotools (per essere esatti <c>autoconf</c>). Ci sono
principalmente due casi in cui le dipendenze automagic sono chiamate in causa:
il primo è il caso dei "lazy devs" (sviluppatori pigri), in cui le dipendenze
non hanno affatto un parametro per <c>./configure</c>, bensì vengono solamente
verificate con <b>AC_CHECK_LIB</b> o la macro <b>PKG_CHECK_MODULES</b> di
<c>pkg-config</c>, che permette di eseguire codice specifico quando una libreria
(o un pacchetto) è presente o meno; il secondo caso è detto "silly argument"
(parametro sciocco, ridicolo), dove un parametro <c>--disable-foo</c> o
<c>--without-bar</c> è effettivamente accettato da <c>./configure</c>, ma non
viene verificato correttamente.
</p>

<p>
Il primo caso è di norma semplice da correggere, si riduce al problema di
aggiungere una chiamata <b>AC_ARG_WITH</b> (o <b>AC_ARG_ENABLE</b>) e quindi
controllare la corrispondente variabile prima di effettuare il test. È utile
sapere che il primo parametro passato alla precedente macro solitamente
introduce una variabile che viene caricata da <c>autoconf</c> senza dover
aggiungere parametri extra per far eseguire determinate azioni quando tale
parametro è presente oppure no, la variabile viene chiama
<path>$enable_foo</path> o <path>$with_bar</path>, in base a quale delle due
macro viene utilizzata.
</p>

<note>
Affinchè le patch siano accettate dagli sviluppatori originali, normalmente si
consiglia di non cambiare il comportamento predefinito, quando
<c>./configure</c> viene chiamato senza parametri; per questa ragione, saranno
elencati due metodi per rendere non-automagic le dipendenze, uno per quelle
abilitate in modo predefinito) e una per quelle disabilitate in modo
predefinito.
</note>

<pre caption="Aggiungere un controllo con abilitazione in modo predefinito
per una dipendenza opzionale">
<i>AC_ARG_WITH([foo], AS_HELP_STRING([--without-foo], [Build without foo library (default: test)]))</i>

<i>AS_IF([test "x$with_foo" != "xno"], [</i>
  PKG_CHECK_MODULES([FOO], [foo >= 0.1])
<i>])</i>
</pre>

<pre caption="Aggiungere un controllo con disabilitazione in modo predefinito
per una dipendenza opzionale">
<i>AC_ARG_WITH([foo], AS_HELP_STRING([--with-foo], [Build with foo library (default: disabled)]))</i>

<i>AS_IF([test "x$with_foo" = "xyes"], [</i>
  PKG_CHECK_MODULES([FOO], [foo >= 0.1])
<i>])</i>
</pre>

<p>
Quando il parametro è presente ma non viene rispettato, potrebbe risultare tanto
semplice quanto complesso risolvere la dipendenza. Potrebbe essere solo un test
scritto in modo errato, per cui bisogna apportare delle modifiche in modo simile
ai test precedenti, o un completo pasticcio nelle chiamate alle macro
<b>AC_ARG_WITH</b>. In questi casi, è meglio controllare attentamente il codice
e contattare gli sviluppatori originali se sembrano esserci errori di questo
livello.
</p>

<warn>
Spesso (quasi sempre quando un pacchetto sfrutta automake) le dipendenze
automagic vanno a braccetto con una chiamata <b>AM_CONDITIONAL</b>. È molto
importante che queste chiamate siano messe <e>fuori</e> dai blocchi if/fi,
altrimenti le chiamate a <c>./configure</c> potrebbero fallire con degli errori.
</warn>

<p>
Anche se è possibile aggirare il problema delle dipendenze di automagic
senza modificare <c>configure.ac</c>, rovistando tra i valori di cache di
autoconf, questo metodo non è raccomandato. Non risolve il problema originale e
non può essere inviato agli sviluppatori per l'integrazione nelle prossime
versioni, e potrebbe anche produrre conflitti in quanto i test sono svolti
in ambienti fortemente diffenti.
</p>

</body>
</section>
<section><!-- CMake -->
<title>CMake</title>

<body>

<p>
Le dipendenze automagic possono presentarsi in sistemi di compilazione basati su
CMake laddove venga chiamata <b>PGK_CHECK_MODULES</b> incondizionatamente senza
il parametro <b>REQUIRED</b>. Sopperire a questo problema è abbastanza semplice,
poiché consiste solamente nell'introduzione di un'opzione per il sistema di
compilazione e per l'esecuzione di <b>PKG_CHECK_MODULES</b>, in base al loro
valore.
</p>

<pre caption="Evitare la dipendenza automagic aggiungendo l'opzione ENABLE_FOO">
<i>OPTION(ENABLE_FOO "Enable foo library" ON)</i>
...
<i>IF (ENABLE_FOO)</i>
  PKG_CHECK_MODULES (FOO foo>=0.1)
<i>ENDIF (ENABLE_FOO)</i>
...
<i>IF (ENABLE_FOO)</i>
  IF (FOO_FOUND)
  ...
  ELSE (FOO_FOUND)
  ...
  ENDIF (FOO_FOUND)
<i>ENDIF (ENABLE_FOO)</i>
</pre>

<note>
Impostare il valore predefinito in OPTION, in accordo al comportamento originale.
</note>

</body>
</section>
<section>
<title>Altri sistemi di compilazione</title>

<body>

<impo>
Si prega di ampliare questa guida. Sono benvenute note riguardanti altri sistemi
di compilazione non usuali come <c>scons</c> , se il sistema di compilazione
presenta un modo per definire le dipendenze automagic, potrebbe avere anche un
modo per correggerle.
</impo>

<p>
Le dipendenze automagic possono essere create anche con sistemi di compilazione
personalizzati che vengono utilizzati da alcuni software. Sfortunatamente,
essendo personalizzati, questi sistemi di compilazione sono normalmente
difficili da mettere a punto, e non c'è un modo per descrivere un approccio
generale per la loro risoluzione.
</p>

</body>
</section>
</chapter>

</guide>
