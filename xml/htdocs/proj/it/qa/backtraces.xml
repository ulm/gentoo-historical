<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "http://www.gentoo.org/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/it/qa/backtraces.xml,v 1.4 2009/07/02 21:19:19 scen Exp $ -->

<guide link="/proj/it/qa/backtraces.xml" lang="it">
<title>Come ottenere backtrace significativi in Gentoo</title>

<author title="Autore">
  <mail link="flameeyes@gentoo.org">Diego Pettenò</mail>
</author>
<author title="Informazioni su hardened toolchain">
  <mail link="solar@gentoo.org">Ned Ludd</mail>
</author>
<author title="Informazioni su hardened toolchain e architettura x86">
  <mail link="kevquinn@gentoo.org">Kevin Quinn</mail>
</author>
<author title="Revisione">
  <mail link="dberkholz@gentoo.org">Donnie Berkholz</mail>
</author>
<author title="Traduzione">
  <mail link="skypjack@gmail.com">Michele Caini</mail>
</author>


<abstract>
Questa guida è pensata per dare agli utenti una semplice spiegazione del perché
una installazione di base di Gentoo non fornisca backtrace sensati e come fare
in modo che ciò invece avvenga.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.8</version>
<date>2009-06-03</date>

<chapter>
<title>Backtrace con Gentoo</title>
<section>
<title>Cosa sono i backtrace</title>
<body>

<p>
Un <e>backtrace</e> (talvolta anche chiamato bt, trace, o stack trace) è un
resoconto in un formato leggibile dall'uomo della catena di chiamate (o stack,
pila, di chiamate) di un programma. Dà informazioni sul punto del programma in
cui ci si trova e come questo è stato raggiunto attraverso tutte le funzioni a
partire dal <path>main()</path> (almeno in teoria). I backtrace sono solitamente
analizzati quando utilizzando un debugger come <c>gdb</c> (GNU debugger) ci si
scontra con una situazione di errore come un segmentation fault o un abort, per
scovare la fonte del problema.
</p>

<p>
Un backtrace significativo non contiene solo gli oggetti condivisi dove la
chiamata è stata generata, ma anche il nome della funzione, il nome del file e
la linea dove il programma si è fermato. Sfortunatamente su un sistema
ottimizzato per avere maggiori prestazioni e conservare lo spazio su disco, i
backtrace sono inutili e mostrano solo il puntatore allo stack delle chiamate e
una serie di punti interrogativi (??) invece del nome della funzione e la
posizione.
</p>

<p>
Questa guida mostrerà come è possibile ottenere degli utili, significativi
backtrace in Gentoo, usando alcune caratteristiche di Portage.
</p>

</body>
</section>
<section>
<title>Flag per il compilatore</title>
<body>

<p>
In modo predefinito <c>gcc</c> non compila informazioni di debug all'interno
degli oggetti (librerie e programmi) che crea, in quanto questo porterebbe ad
oggetti di dimensioni maggiori. Inoltre, molte ottimizzazioni interferiscono sul
modo in cui le informazioni di debug vengono salvate. Per queste ragioni, la
prima cosa a cui fare attenzione è il fatto che la variabile CFLAGS venga
impostata in modo da da generare informazioni di debug utili.
</p>

<p>
L'opzione fondamentale da aggiungere in questo caso è <c>-g</c>. Questa informa
il compilatore sul fatto che esso deve aggiungere informazioni ulteriori negli
oggetti, come nome del file e numeri di riga. Ciò è di solito sufficiente per
avere un backtrace basilare, ma l'opzione <c>-ggdb</c> aggiunge ulteriori
informazioni. C'è al momento un'altra opzione (<c>-g3</c>), ma il suo uso non è
raccomandato. Sembra che questa corrompa le interfacce binarie e possa
comportare maggiori fallimenti (crash del programma). Per esempio,
<path>glibc</path> dà problemi quando viene compilato con questa opzione. Se si
desidera ottenere più informazioni possibile, andrebbe utilizzata l'opzione
<c>-ggdb</c>.
</p>

<pre caption="Esempio di CFLAGS per l'aggiunta di informazioni di debug">
CFLAGS="-march=k8 -O2 -ggdb"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
Anche le ottimizzazioni andrebbero limitate. Per esempio, l'opzione <c>-O</c>,
usata per impostare uno dei livelli di ottimizzazione predefiniti, dovrebbe
essere usata con cautela. Se si vuole avere veramente un backtrace preciso,
andrebbe usato <c>-O1</c> (l'uso del livello di ottimizzazione 0 non è
raccomandato in quanto sono noti problemi con gcc che compila codice non
valido). Ma per un backtrace più generico, anche <c>-O2</c> e <c>-Os</c> vanno
bene. Non è ragionevole usare <c>-O3</c> quando si cerca di fare debug su
qualcosa, perchè questa opzione attiva ottimizzazioni aggiuntive che
probabilmente rovineranno le informazioni necessarie per il debug stesso.
</p>

<p>
Nota per gli utenti di architetture x86: tali utenti hanno frequentemente
l'opzione <c>-fomit-frame-pointer</c> nella loro variabile CFLAGS.
L'architettura x86 ha un insieme limitato di registri generali, e questa opzione
può rendere disponibile un registro ulteriore, che migliora le prestazioni. Ma
questo lo si paga: rende impossibile per <c>gdb</c> il "camminare sullo stack"
&#8212; in altre parole, gli impedisce di generare un backtrace in modo
affidabile. Rimuovendo questa opzione dalla variabile CFLAGS si ottiene qualcosa
di più facile comprensione per <c>gdb</c>. Gli utenti della maggior parte delle
altre piattaforme non hanno di che preoccuparsi; o in genere non viene impostata
comunque l'opzione <c>-fomit-frame-pointer</c>, o il codice generato da
<c>gcc</c> non confonderà <c>gdb</c> (in tal caso l'opzione è già abilitata dal
livello di ottimizzazione <c>-O2</c>).
</p>

<p>
Gli utenti di Gentoo Hardened dovrebbero preoccuparsi anche di altri aspetti. Il
documento riguardante le <uri
link="http://www.gentoo.org/proj/it/hardened/hardenedfaq.xml#hardeneddebug">
domande frequenti su Hardened Gentoo</uri> fornisce suggerimenti aggiuntivi e
trucchi che sarebbe necessario conoscere.
</p>

</body>
</section>
<section>
<title>Stripping</title>
<body>

<p>
Cambiando solamente la propria variabile CFLAGS o rieffettuando l'emerge totale
di world non si otterranno comunque dei backtrace significativi, in quanto
bisogna risolvere il problema dello "stripping", o svuotamento. Di norma Portage
ripulisce i binari (ovvero effettua lo "strip" dei binari, termine usato da qui
in avanti). In altre parole, vengono rimosse le sezioni non necessarie
all'esecuzione così da ridurre le dimensioni dei file che vengono installati.
Questa è una cosa utile per l'utente medio che non necessita di backtrace utili,
ma rimuove tutte le informazioni di debug generate dalle opzioni <c>-g*</c>, e
anche le tabelle dei simboli che vengono usate per trovare le informazioni di
base per poter mostrare backtrace in un formato leggibile dall'uomo.
</p>

<p>
Ci sono due modi per impedire al processo di stripping di interferire con il
debug e i backtrace utili. Il primo è quello di indicare a Portage che non deve
effettuare assolutamente lo strip dei binari, aggiungendo <e>nostrip</e> alla
variabile FEATURES. Questo lascerà i file installati esattamente come <c>gcc</c>
li ha creati, con tutte le informazioni di debug e le tabelle di simboli, che
aumentano lo spazio su disco occupato da eseguibili e librerie. Per evitare
questo problema, in Portage versione 2.0.54-r1 e dalla serie 2.1, è possibile
usare invece la FEATURE <e>splitdebug</e>.
</p>

<p>
Con l'opzione <e>splitdebug</e> abilitata, Portage farà ancora lo strip dei
binari installati nel sistema. Ma prima di farlo, tutte le informazioni di debug
utili verranno copiate nel file ".debug", che successivamente verrà installato
in <path>/usr/lib/debug</path> (il nome completo del file potrebbe essere dato
aggiungendo a quest'ultimo il percorso in cui il file è attualmente installato).
Il percorso per raggiungere questo file è poi salvato nel file originale
all'interno di una sezione ELF chiamata ".gnu_debuglink", così che <c>gdb</c>
possa sapere da quale file caricare i simboli.
</p>

<impo>
Se vengono abilitate le opzioni <e>nostrip</e> e <e>splitdebug</e>, Portage non
effettuerà per niente lo strip dei binari, quindi bisogna fare attenzione a cosa
si vuole ottenere.
</impo>

<p>
Un altro vantaggio dell'opzione <e>splitdebug</e> è il fatto che non richiede di
ricompilare il pacchetto per liberarsi delle informazioni di debug. Questo è
utile quando si compilano alcuni pacchetti con informazioni di debug per avere
un backtrace relativo ad un singolo errore. Una volta che questo è corretto,
sarà sufficiente rimuovere la cartella <path>/usr/lib/debug</path>.
</p>

<p>
Per essere sicuri di non effettuare lo strip dei binari, ci si deve anche
assicurare di non avere l'opzione <c>-s</c> impostata nella propria variabile
LDFLAGS. Questa indica al linker di effettuare lo strip dei binari risultanti
nella fase di link. Si noti anche che l'uso di questa opzione potrebbe portare
ad ulteriori problemi. Non verrebbero rispettate le restrizioni sullo stripping
imposte da qualche pacchetto che smette di funzionare quando viene sottoposto a
strip completo.
</p>

<note>
Alcuni pacchetti sfortunatamente gestiscono lo stripping da soli, all'interno
dei makefile forniti dagli sviluppatori originali. Questo è un errore e dovrebbe
essere indicato. Tutti i pacchetti dovrebbero lasciare a Portage il processo di
stripping o semplicemente vietarlo completamente. La principale eccezione a
questo sono i pacchetti binari. Questi sono solitamente sottoposti a stripping
dagli sviluppatori originali, fuori dal controllo di Portage.
</note>

</body>
</section>
<section>
<title>Introduzione a gdb</title>
<body>

<p>
Una volta che i pacchetti sono stati compilati con le informazioni di debug e
non sono sottoposti al processo di stripping, è necessario solamente recuperare
il backtrace. Per farlo c'è bisogno del pacchetto <path>sys-devel/gdb</path>.
Questo contiene il debugger GNU (<c>gdb</c>). Dopo averlo installato, è
possibile procedere al recupero dei backtrace. Il modo più semplice per
ottenerne uno lo si fa eseguendo il programma all'interno di <c>gdb</c>. Per
farlo, è necessario far puntare <c>gdb</c> al percorso del programma da
eseguire, passargli gli argomenti di cui necessita, e quindi eseguirlo:
</p>

<pre caption="Eseguire ls attraverso gdb">
$ <i>gdb /bin/ls</i>
GNU gdb 6.4
[...]

(gdb) <i>set args /usr/share/fonts</i>
(gdb) <i>run</i>
Starting program: /bin/ls /usr/share/fonts
[Thread debugging using libthread_db enabled]
[New Thread 47467411020832 (LWP 11100)]
100dpi  aquafont     baekmuk-fonts  cyrillic  dejavu     fonts.cache-1  kochi-substitute  misc  xdtv
75dpi   arphicfonts  CID            default   encodings  fonts.dir      mikachan-font     util

Program exited normally.
(gdb)
</pre>

<p>
Il messaggio "Program exited normally" (programma terminato correttamente)
significa che il programma è terminato restituendo il codice 0. Questo indica
che non ci sono state situazioni di errore, ma non bisogna farci troppo
affidamento, in quanto ci sono programmi che escono restituendo il valore di
stato 0 quando raggiungono condizioni di errore. Un altro messaggio comune è
"Program exited with code <e>nn</e>" (programma terminato con codice <e>nn</e>).
questo semplicemente informa che è stato restituito un codice di stato diverso
da zero. Potrebbe comportare una situazione di errore gestita o prevista. Per
problemi di segmentation fault o abort, viene invece restituito il messaggio
"Program received signal SIGsomething" (il programma ha ricevuto il segnale
SIGqualcosa).
</p>

<p>
Quando un programma riceve un segnale, potrebbero esserci molte ragioni diverse.
In caso di SIGSEV e SIGABRT (rispettivamente segmentation fault e abort),
significa di solito che il codice ha fatto qualcosa di sbagliato, come
effettuare una syscall (chiamata di sistema) errata o tentare l'accesso in
memoria attraverso un puntatore gestito male. Altri segnali comuni sono SIGTERM,
SIGQUIT e SIGINT (l'ultimo è ricevuto quando viene inviato un CTRL-C al
programma, e normalmente viene intercettato da <c>gdb</c> e ignorato dal
programma stesso).
</p>

<p>
Infine c'è la serie degli "eventi Real-Time". Vengono indicati come SIG<e>nn</e>
dove <e>nn</e> rappresenta un numero maggiore di 31. L'implementazione pthread
di solito li usa per sincronizzare i differenti thread del programma, e quindi
non rappresentano condizione di errore di alcun tipo. È facile ottenere
backtrace senza senso quando si confondono i segnali Real-Time con le condizioni
di errore. Per prevenire questa situazione, è possibile indicare a <c>gdb</c> di
non fermare il programma quando vengono ricevuti tali segnali, ma piuttosto
passarli direttamente al programma, come nel seguente esempio.
</p>

<pre caption="Eseguire xine-ui attraverso gdb, ignorando i segnali real-time">
$ <i>gdb /usr/bin/xine</i>
GNU gdb 6.4
[...]

(gdb) <i>run</i>
Starting program: /usr/bin/xine
[...]

Program received signal SIG33, Real-time event 33.
[Switching to Thread 1182845264 (LWP 11543)]
0x00002b661d87d536 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib/libpthread.so.0
(gdb) <i>handle SIG33 nostop noprint noignore pass</i>
Signal        Stop      Print   Pass to program Description
SIG33         No        No      Yes             Real-time event 33
(gdb) <i>kill</i>
Kill the program being debugged? (y or n) <i>y</i>
(gdb) <i>run</i>
</pre>

<p>
Il comando <c>handle</c> informa <c>gdb</c> su cosa dovrebbe fare quando i
segnali indicati vengono inviati al programma; in questo caso le opzioni sono
<c>nostop</c> (non fermare il programma restituendo il comando al debugger),
<c>noprint</c> (non preoccuparsi di informare alla ricezione dei dati segnali),
<c>noignore</c> (non ignorare il segnale &#8212; ignorare segnali è pericoloso,
in quanto significa scartarli senza passarli al programma), <c>pass</c> (passare
il segnale al programma di cui si sta effettuando il debug).
</p>

<p>
Dopo che gli eventuali eventi Real-Time sono stati ignorati da <c>gdb</c>, si
dovrebbe provare a riprodurre un crash (blocco o chiusura, terminazione inattesa
di un programma) che si desidera riportare. Se lo si può riprodurre
sistematicamente, risulta abbastanza semplice. Quando <c>gdb</c> informa che il
programma ha ricevuto un segnale SIGSEV o SIGABRT (o qualsiasi altro segnale che
potrebbe rappresentare la condizione di errore per il programma), si deve
effettivamente procedere per avere un backtrace, possibilmente salvandolo da
qualche parte. Il comando di base per fare questo è <c>bt</c>, che è una
scorciatoia per <c>backtrace</c>, il quale mostrerà il backtrace del thread
corrente (se il programma non è multi thread, esiste allora un solo thread).
</p>

<p>
Un comando alternativo per avere un backtrace più dettagliato è <c>bt full</c>.
Questo permette di avere anche informazioni riguardo a parametri e variabili
locali della funzione dove vengono effettuate le chiamate (quando questi sono
disponibili e non rimossi dalle ottimizzazioni). Ciò comporta una tracciatura
più lunga ma anche più utile quando si cerca di scoprire, per esempio, perchè un
puntatore non risulta inizializzato.
</p>

<p>
Ultimamente non è raro che perfino semplici programmi vengono scritti con thread
multipli, rendeno l'uso di un semplice output di <c>bt</c>, anche se
significativo, abbastanza inutile, in quanto potrebbe rappresentare lo stato di
un thread diverso da quello in cui il segnale è invocato, o da quello in cui si
manifesta la condizione di errore (nel caso in cui ci sia un altro thread
responsabile dell'invocazione di segnali). Per queste ragioni, si potrebbe
invece recuperare la traccia con il comando esteso <c>thread apply all bt
full</c>, che indica al debugger di riportare la tracciatura completa di tutti i
thread al momento in esecuzione.
</p>

<p>
Se il backtrace è corto, è facile fare copia e incolla fuori dal terminale (a
meno che il fallimento non avvenga in un terminale senza X), ma talvolta è
semplicemente troppo lungo per essere copiato con facilità, perchè si estende su
più pagine. Per poter indirizzare i backtrace su un file da affiancare al bug, è
possibile usare il sistema di <c>logging</c>:
</p>

<pre caption="Usare il sistema di logging per salvare il backtrace su file">
$ <i>gdb /usr/bin/xine</i>
GNU gdb 6.5
[...]

(gdb) <i>run</i>
[...]

(gdb) <i>set logging file backtrace.log</i>
(gdb) <i>set logging on</i>
Copying output to backtrace.log.
(gdb) <i>bt</i>
#0  0x0000003000eb7472 in __select_nocancel () from /lib/libc.so.6
...
(gdb) <i>set logging off</i>
Done logging to backtrace.log.
(gdb) <i>quit</i>
</pre>

<p>
Ora è possibile prendere il backtrace dal file <path>backtrace.log</path>, e
inviarlo semplicemente tramite email o allegare il file al bug relativo.
</p>

</body>
</section>
<section>
<title>Core dump</title>
<body>

<p>
Talvolta non è facile riprodurre il fallimento (o meglio, la situazione di
crash), il programma sfrutta pesantemente i thread, la sua esecuzione in
<c>gdb</c> è troppo lenta o viene scombinata quando eseguito tramite di esso
(non dovrebbe sorprendere nessuno il fatto che eseguendo all'interno del
debugger ci sono più bug che risultano riproducibili senza il debugger stesso).
In questi casi, esiste uno strumento che viene in aiuto: il core dump.
</p>

<p>
Un core dump è un file contenente l'intera area di memoria di un programma
quando questo termina in malo modo. Usando questo file, è possibile estrarre il
backtrace dello stack anche se il programma è incappato in un crash fuori da
<c>gdb</c>, assumendo che i core dump siano abilitati. Di base i core dump non
sono abilitati su Gentoo Linux (lo sono, comunque, in modo predefinito su
<uri
link="http://www.gentoo.org/proj/en/gentoo-alt/bsd/fbsd/">Gentoo/FreeBSD</uri>),
quindi si ha la necessità di abilitarli.
</p>

<p>
I file core dump sono generati direttamente dal kernel; per questa ragione il
kernel ha bisogno che siano abilitate le relative opzioni in fase di
compilazione, per poter lavorare correttamente. Mentre tutte le configurazioni
di base abilitano i file core dump, nel caso in cui si stia eseguendo un kernel
embedded o si siano configurate per altre vie le caratteristiche elementari del
kernel, bisogna verificare le seguenti opzioni:
</p>

<note>
Si può saltare questo passaggio nel caso in cui non si abbia abilitata l'opzione
"Configure standard kernel features", la quale non lo dovrebbe essere a meno
che non si sia certi di cosa si sta facendo.
</note>

<pre caption="Opzioni del kernel per abilitare i core dump">
General Setup ---&gt;
  Configure standard kernel features ---&gt;
    Enable ELF core dumps
</pre>

<p>
I core dump possono essere abilitati a livello di sistema o a livello di
sessione di shell. Nel primo caso, tutto ciò che nel sistema termina in modo non
corretto e non ha già un gestore di tali situazioni (si veda più sotto per
maggiori note riguardo il gestore di crash di KDE) effettuerà il dump. Quando
abilitato a livello di sessione della shell, solo i programmi avviati nella
sessione si lasceranno dietro un dump.
</p>

<p>
Per abilitare i core dump a livello di sistema, bisogna modificare il file
<path>/etc/security/limits.conf</path> (se si utilizza PAM, come avviene
normalmente) oppure <path>/etc/limits.conf</path>. Nel primo caso, è necessario
definire un limite (sia stringente che, più comunemente, non vincolante; per i
file di core, questo può in ogni caso essere compreso fra 0 e no limit, nessun
limite). Nel secondo caso, basta impostare la variabile C alla dimensione limite
del file core (qua non c'è l'opzione "senza limite").
</p>

<pre caption="Esempio di regola per avere file core senza limite sulla
dimensione usando PAM">
# /etc/security/limits.conf
*             soft      core       unlimited
</pre>

<pre caption="Esempio di regola per avere file core con dimensione massima pari
a 20Mb quando non si usa PAM">
# /etc/limits.conf
*       C20480
</pre>

<p>
Per abilitare i file core in una singola sessione di shell è possibile usare il
comando <c>ulimit</c> con l'opzione <c>-c</c>. Il valore 0 significa
disabilitato; ogni altro numero positivo rappresenta la dimensione in KB del
file core generato, mentre <e>unlimited</e> semplicemente rimuove il limite
sulla dimensione del file core. Da questo punto in poi, tutti i programmi che
terminano a causa di un segnale come SIGABRT o SIGSEGV si lasceranno dietro un
file core che può essere chiamato sia "core" che "core.<e>pid</e>" (dove pid è
rimpiazzato con il pid attuale del programma che termina).
</p>

<pre caption="Esempio dell'uso di ulimit">
$ <i>ulimit -c unlimited</i>
$ <i>crashing-program</i>
[...]
Abort (Core Dumped)
$
</pre>

<note>
Il comando <c>ulimit</c> è un comando interno in bash e zsh. Su altre shell
potrebbe essere chiamato in modo diverso o potrebbe perfino non essere
disponibile per niente.
</note>

<p>
Dopo aver ottenuto un core dump, si può lanciare <c>gdb</c> su di esso,
specificando sia il percorso al file che ha generato il core dump (deve essere
lo stesso esatto binario, quindi se si ricompila, il core dump è inutilizzabile)
e il percorso al file core. Una volta che <c>gdb</c> è stato aperto su di esso,
si possono seguire le stesse istruzioni incontrate appena prima che queste
ricevessero il segnale di terminazione.
</p>

<pre caption="Eseguire gdb su un file core">
$ <i>gdb $(which crashing-program) --core core</i>
</pre>

<p>
Come alternativa, si possono usare le potenzialità della riga di comando di
<c>gdb</c> per ottenere il backtrace senza entrare in modalità interattiva.
Questo rende anche più facile il salvataggio del backtrace in un file o il suo
invio ad una pipe di qualsiasi tipo. Il trucco risiede nelle opzioni
<c>--batch</c> e <c>-ex</c> che sono accettate da <c>gdb</c>. È possibile usare
la seguente funzione bash per avere l'intero backtrace di un core dump (inclusi
tutti i thread) sullo standard output stream.
</p>

<pre caption="Funzione per il recupero dell'intero backtrace da un core dump">
gdb_get_backtrace() {
    local exe=$1
    local core=$2

    gdb ${exe} \
        --core ${core} \
        --batch \
        --quiet \
        -ex "thread apply all bt full" \
        -ex "quit"
}
</pre>

</body>
</section>
<section>
<title>Note sul gestore di crash di KDE</title>
<body>

<p>
Le applicazioni basate su KDE vengono eseguite in modo predefinito con il loro
personale gestore di crash, che viene presentato all'utente tramite il così
detto "Dr Konqi" se risulta installato (il pacchetto è o
<path>kdebase-meta/kdebase</path> o <path>kde-base/drkonqi</path>, incluso in
<path>kdebase-meta</path>). Questo gestore di crash mostra all'utente una
finestra informativa che lo informa sul fatto che il programma è terminato in
modo inatteso. In questa finestra c'è una linguetta denominata "Backtrace" che,
quando caricata, invoca <c>gdb</c> e fa si che questo carichi i dati e generi
l'intero backtrace per conto dell'utente, mostrando il tutto nella finestra
principale e dando la possibilità di salvarlo direttamente in un file. Questo
backtrace è normalmente sufficiente per riportare un problema.
</p>

<p>
Quando drkonqi non è installato, una terminazione inattesa non genererà in ogni
caso un core dump, e l'utente in modalità predefinita non riceverà nessuna
informazione. Per evitarlo, è possibile usare con ogni applicazione basata su
KDE l'opzione a riga di comando <c>--nocrashhandler</c>. Questo inibisce
totalmente il gestore di crash e lascia che i segnali vengano gestiti dal
sistema operativo come succede di solito. Ciò è utile per generare i file core
quando drkonqi non è disponibile o quando si vuole ispezionare le varie parti
dello stack a mano.
</p>

</body>
</section>

<!-- TODO
     - aggiungere note riguardo il gestore di crash di gnome
     - aggiungere note riguardo la rinominazione dei file core dump
-->

</chapter>

</guide>
