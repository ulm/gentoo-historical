<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/it/apache/apache-developer.xml,v 1.3 2012/10/28 15:21:22 swift Exp $ -->

<guide lang="it"
disclaimer="obsolete" redirect="doc/developer.xml">
<title>Documentazione per Sviluppatori di Apache</title>

<author title="Autore">
  <mail link="vericgar@gentoo.org">Michael Stewart</mail>
</author>

<author title="Traduzione">
  <mail link="zanetti.massimo@gmail.com">Massimo Zanetti</mail>
</author>

<abstract>
Questo documento fornisce dettagli sulle nuove eclass disponibili per gli
sviluppatori di pacchetti relativi ad Apache.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>2.5</version>
<date>2008-03-02</date>

<chapter>
<title>Introduzione</title>
<section>
<body>

<p>
Questo documento mostra in maniera particolareggiata come le <uri
link="#apache-module">nuove eclasses</uri> siano state <uri
link="#changes">modificate</uri> rispetto al precedente stile di apache e come
si debbano <uri link="#ebuild-update">modificare</uri> le ebuild per sfruttare
al massimo le nuove eclass. Se si è degli utenti interessati a come eseguire
l'aggiornamento, si consiglia di leggere il documento <uri
link="apache-upgrading.xml">Aggiornamento di Apache</uri>.
</p>

</body>
</section>
</chapter>

<chapter id="changes">
<title>Che cosa è cambiato</title>
<section>
<title>Sguardo d'insieme</title>
<body>

<p>
Sono state apportate molte modifiche sulla modalità d'installazione e
funzionamento di Apache e i suoi moduli su Gentoo. Questo rende la manutenzione
più facile e segue più da vicino il concetto di pratica upstream. Queste
modifiche sono:
</p>

<ul>
  <li>Corretti molti bug</li>
  <li>Cambiati i percorsi dell'installazione e della configurazione</li>
  <li>
    Create le eclass <uri link="#depend-apache">depend.apache</uri> e <uri
    link="#apache-module">apache-module</uri>
  </li>
  <li>
    Riuniti apache.conf e commonapache.conf in un unico file, analogamente a
    come vengono distribuiti da apache.org.
  </li>
  <li>
    <c>apr</c> e <c>apr-utils</c> sono stai estratti da apache così che alcuni
    pacchetti non hanno più bisogno di apache
  </li>
  <li>Quasi tutti i moduli sono stati aggiornati</li>
  <li>Maggiore disponibilità di MPMs</li>
  <li>Aggiunto supporto per lingerd</li>
  <li>Corretto il supporto per i file di grandi dimensioni</li>
  <li><e>Sicuramente altro...</e></li>
</ul>

</body>
</section>
<section>
<title>Localizzazione Percorsi Apache</title>
<body>

<p>
Allo scopo di avvicinarsi al tipo di installazione fatto da apache.org e altre
distribuzioni, sono stati modificati i seguenti percorsi:
</p>

</body>
</section>
<section>
<title>Apache 2.x</title>
<body>

<table>
<tr>
  <th>Utilizzo</th>
  <th>Vecchio Percorso</th>
  <th>Nuovo Percorso</th>
</tr>
<tr>
  <ti>Server Root</ti>
  <ti><path>/etc/apache2/</path></ti>
  <ti><path>/usr/lib/apache2/</path></ti>
</tr>
<tr>
  <ti>Directory della Configurazione</ti>
  <ti><path>/etc/apache2/conf/</path></ti>
  <ti><path>/etc/apache2/</path></ti>
</tr>
<tr>
  <ti>Configurazione</ti>
  <ti><path>/etc/apache2/conf/apache2.conf</path></ti>
  <ti><path>/etc/apache2/httpd.conf</path></ti>
</tr>
<tr>
  <ti>Configurazione</ti>
  <ti><path>/etc/apache2/conf/commonapache2.conf</path></ti>
  <ti><path>/etc/apache2/httpd.conf</path></ti>
</tr>
<tr>
  <ti>Configurazione Vhosts</ti>
  <ti><path>/etc/apache2/conf/vhosts/</path></ti>
  <ti><path>/etc/apache2/vhosts.d/</path></ti>
</tr>
<tr>
  <ti>Configuratione Moduli</ti>
  <ti><path>/etc/apache2/conf/modules.d/</path></ti>
  <ti><path>/etc/apache2/modules.d/</path></ti>
</tr>
<tr>
  <ti>Modulo Binari</ti>
  <ti><path>/usr/lib/apache2-extramodules/</path></ti>
  <ti><path>/usr/lib/apache2/modules/</path></ti>
</tr>
</table>

<note>
La configurazione predefinita ora include automaticamente
<path>modules.d/*.conf</path> e <path>vhosts.d/*.conf</path>. Tuttavia la
direttiva contenuta in <path>httpd.conf</path> mostra i percorsi sopra indicati
come <path>conf/modules.d/*.conf</path> e <path>conf/vhosts.d/*.conf</path>.
Questo perchè Apache legge la configurazione usando la directory
<path>/usr/lib/apache{|2}</path>  che contiene un link simbolico a <path>conf ->
/etc/apache{|2}</path>.
</note>

<impo>
Se si è uno sviluppatore e si cerca di aggiornare un'ebuild per farlo funzionare
con le modifiche che sono state fatte, si cerchi di non inserire i percorsi
sopra indicati nell'ebuild, controllare invece la documentazione sulla eclass
relativa alle variabili che possono essere usate.
</impo>

</body>
</section>
</chapter>

<chapter id="ebuild-update">
<title>Aggiornare l'Ebuild</title>
<section>
<body>

<p>
Con queste nuove modifiche quasi tutte le ebuild che hanno una dipendenza da
Apache devono essere cambiate. Il gruppo di Apache si è già preso cura della
maggioranza di questi pacchetti, essendone loro i responsabili. Ma ne rimangono
ancora diversi che, appartenendo ad altri sviluppatori, devono essere
aggiornati.
</p>

<p>
Questo capitolo mostra ad uno sviluppatore l'uso della nuova eclass attraverso
l'aggiornamento di un'ebuild. Per fare questo si prende come esempio uno dei
pacchetti più complessi, <c>www-apache/mod_ldap_userdir</c>.
</p>

<note>
Se il proprio pacchetto non è precisamente un modulo, ma ha solo bisogno di
conoscere i percorsi usati da Apache, eseguire <c>inherit depend.apache</c> ed
usare le variabili rese disponibili nella eclass. A tale proposito si guardi
la documentazione della eclass <uri link="#depend-apache">depend.apache</uri> .
</note>

</body>
</section>
<section>
<title>Sguardo d'insieme delle modifiche necessarie</title>
<body>

<ul>
  <li>
    Sarà necessaria una nuova revisione considerato che le precedenti, adattate
    alla nuova eclass, non sono compatibili con le vecchie versioni di Apache.
  </li>
  <li>
    Assicurarsi di impostare <c>KEYWORDS</c> a testing e, se i pacchetti di
    Apache sono ancora hard-masked, aggiungerli in package.mask
  </li>
  <li>
    Sostituire ciascun <c>DEPEND</c> di Apache con <c>need_apache1</c> (per
    i moduli di Apache-1*), <c>need_apache2</c> (per i moduli di Apache-2*), o
    <c>need_apache</c> (per i moduli che possono dipendere sia da Apache-1* che
    da Apache-2* - determinati da USE-flags)
  </li>
  <li>
    Rimovere qualsiasi linea di codice che modifica <c>SLOT</c> o <c>DEPEND</c>
    con hack tipo <c>has_version</c>.
  </li>
  <li>
    Controllare se l'impostazione predefinita di <c>src_compile</c> nella eclass
    funziona. Altrimenti, impostare <c>APXS1_ARGS</c> o <c>APXS2_ARGS</c> per
    compilare, come richiesto, gli altri file.
  </li>
  <li>Di norma tutte le funzioni possono essere rimosse dall'ebuild</li>
  <li>
    Modificare il file di configurazione del modulo affichè usi gli
    <c>IfDefine</c> per caricare e configurare il modulo
  </li>
  <li>Aggiungere qualsiasi file di documentazione a <c>DOCFILES</c></li>
  <li>
    Specificare il file di configurazione che src_install deve installare:
    <c>APACHE1_MOD_CONF</c>, <c>APACHE2_MOD_CONF</c>
  </li>
  <li>
    Specificare la <c>IfDefine</c> che il modulo usa nel suo file di
    configurazione così che pkg_postinst possa dare informazioni all'utente su
    come abilitare il modulo: <c>APACHE1_MOD_DEFINE</c>,
    <c>APACHE2_MOD_DEFINE</c>
  </li>
  <li>
    Non dimenticarsi di testarlo - nel caso non sia stato fatto, seguire le
    istruzioni di aggiornamento che si trovano in questo documento
  </li>
</ul>

</body>
</section>
<section>
<title>Ebuild Globali</title>
<body>

<pre caption="Diff tra mod_ldap_userdir-1.4.1 e mod_ldap_userdir-1.4.1-r1
(modificato)">
+inherit apache-module
+
-IUSE="apache2 ssl"
+IUSE="ssl"

 DESCRIPTION="Modulo Apache che abilita ~/public_html from an LDAP directory."
 HOMEPAGE="http://horde.net/~jwm/software/mod_ldap_userdir/"
-KEYWORDS="x86 ppc"
+KEYWORDS="~x86 ~ppc"

 SRC_URI="http://horde.net/~jwm/software/mod_ldap_userdir/${P}.tar.gz"

-DEPEND="=net-www/apache-1*
-               apache2? ( =net-www/apache-2* )
-               ssl? ( dev-libs/openssl )
-               net-nds/openldap"
+DEPEND="ssl? ( dev-libs/openssl )
+               net-nds/openldap"

 LICENSE="GPL-1"
 SLOT="0"
+
+DOCFILES="DIRECTIVES README user-ldif posixAccount-objectclass"
+APACHE1_MOD_CONF="${PVR}/47_mod_ldap_userdir"
+APACHE2_MOD_CONF="${PVR}/47_mod_ldap_userdir"
+APACHE1_MOD_DEFINE="LDAPuserdir"
+APACHE2_MOD_DEFINE="LDAPuserdir"
+
+need_apache
</pre>


<p>
Si è partiti da <c>inherit apache-module</c> che a sua volta eredita
<c>depend.apache</c>. <c>depend.apache</c> definisce le locazioni usate da
Apache e, più importante, le tre <c>DEPEND</c>s: <c>APACHE1_DEPEND</c> per quei
pacchetti che hanno bisogno di Apache-1*, <c>APACHE2_DEPEND</c> per quelli che
hanno bisogno di Apache-2*, e <c>APACHE_DEPEND</c> per quelli che hanno bisogno
sia di Apache-1* o di Apache-2* e lasciare ad apache2 USE-flag quale usare.
</p>

<note>
Benchè sia possibile, l'installazione di ambedue le versioni di apache
affiancate non è supportata; d'altra parte non è neanche supportata
l'installazione di un modulo per ambedue le versioni di apache. I moduli
dovrebbero usare solamente uno <c>SLOT</c> che non sia <c>0</c> se hanno
multiple versioni di codice e ciascuna supporta una differente versione di
Apache. (es. <path>mod_layout-3.2.1-r1</path> ha <c>SLOT="1"</c> e
<path>mod_layout-4.0.1a-r1</path> ha <c>SLOT="2"</c>)
</note>

<p>
L'<c>apache-module</c> fa la parte più pesante per i pacchetti del modulo
definendo impostazioni predefinite valide per <c>pkg_setup</c>,
<c>src_compile</c>,<c>src_install</c> e <c>pkg_postinst</c>.
</p>

<p>
Poichè, se necessario, <c>depend.apache</c> aggiunge <c>apache2</c> a IUSE, non
serve più definirlo esplicitamente nella IUSE dell'ebuild. Tuttavia deve essere
lasciato definito se quella use-flag viene usata da qualche parte nell'ebuild.
</p>

<p>
<c>depend.apache</c> lavora aggiungendo il corretto Apache DEPEND al proprio
DEPEND (se si chiama una delle funzioni <c>need_apache{|1|2}</c>) così che si
possa togliere la gestione del apache DEPEND dalla propria ebuild.
</p>

<p>
<c>DOCFILES</c> è usato da <c>src_install</c> in <c>apache-modules</c> per
installare tutta la documentazione. <c>src_install</c> trova automaticamente i
file html e altri e usa sia <c>dodoc</c> che <c>dohtml</c> per installarli al
posto giusto.
</p>

<p>
<c>APACHE1_MOD_CONF</c> e <c>APACHE2_MOD_CONF</c> definiscono il file di
configurazione da installare per il modulo. Questo è usato durante
<c>src_install</c> così che possano essere collegati a qualsiasi cosa si sia
impostata con <c>APXS1_S</c> o <c>APXS2_S</c> (normalmente a <c>${S}/src</c> se
è una directory, altrimenti <c>${S}</c>).
</p>

<p>
<c>APACHE1_MOD_DEFINE</c> e <c>APACHE2_MOD_DEFINE</c> dicono all'eclass quale
<c>&lt;IfDefine MODULENAME&gt;</c> usa il modulo. Servono per mostrare
all'utente le istruzioni su come abilitare il modulo.
</p>

</body>
</section>
<section>
<title>src_compile</title>
<body>

<p>
<c>src_compile</c> può servire se il modulo richiede speciali passi che l'eclass
non può gestire. Questo è un caso raro. Nella maggioranza dei casi, riguardare
il <path>Makefile</path> e aggiungere gli oggetti a <c>APXS1_ARGS</c>
o <c>APXS2_ARGS</c> è sufficiente.
</p>

<pre caption="Diff tra mod_ldap_userdir-1.4.1 e mod_ldap_userdir-1.4.1-r1
(modificato)">
-src_compile() {
-       local myconf
-       if use apache2; then
-               myconf="${myconf} --with-apxs2=/usr/sbin/apxs2"
-       else
-               myconf="${myconf} --with-apxs=/usr/sbin/apxs"
-       fi
-
-       use ssl &amp;&amp; myconf="${myconf} -with-tls"
-
-       myconf="${myconf} --with-activate"
-       ./configure ${myconf} || die "Configure failed"
-       make clean
-       make || die "Make failed"
-}

+src_compile() {
+       local myargs="-lldap -llber -c ${PN}.c"
+       use ssl &amp;&amp; myargs="${myargs} -D TLS=1"
+
+       APXS2_ARGS="${myargs}"
+       APXS1_ARGS="${myargs}"
+
+       apache-module_src_compile
+
+}
</pre>

<note>
In generale se APXS1_ARGS o APXS2_ARGS devono essere diversi, sono definiti
nello spazio globale. <path>mod_ldap_userdir</path> a questo riguardo è
differente perchè lo stato della flag USE di ssl influenza quelle variabili
ed è più efficiente nell'impostare solamente quei valori in <c>src_compile</c>
piuttosto che eseguire il controllo USE durante ogni chiamata dell'ebuild.
</note>

</body>
</section>
<section>
<title>src_install</title>
<body>

<p>
Nella maggior parte dei casi, <c>src_install</c> non è necessario, eccetto
quando ci sono altre directory che hanno bisogno di essere installate o quando
i permessi sui file devono essere modificati.
</p>

<pre caption="Diff tra mod_ldap_userdir-1.4.1 e mod_ldap_userdir-1.4.1-r1
(modificato)">
-src_install() {
-       if use apache2; then
-               exeinto /usr/lib/apache2-extramodules
-               doexe mod_ldap_userdir.so
-       else
-               exeinto /usr/lib/apache-extramodules
-               doexe mod_ldap_userdir.so
-       fi
-       dodoc DIRECTIVES README user-ldif posixAccount-objectclass
-}
+src_install() {
+       apache-module_src_install
+       if [ "${APACHE_VERSION}" == "2" ]; then
+               fperms 600 ${APACHE2_MODULES_CONFDIR}/$(basename ${APACHE2_MOD_CONF})
+       else
+               fperms 600 ${APACHE1_MODULES_CONFDIR}/$(basename ${APACHE1_MOD_CONF})
+       fi
+}
</pre>

<p>
Come si può notare, nel <path>mod_ldap_userdir</path> sono state aggiunte alcune
modifiche che non erano presenti nella revisione precedente - l'aggiunta di un
file di configurazione e l'impostazione corretta dei permessi.
<c>apache-module</c> da il meglio di sè chiamando
<c>apache-module_src_install</c> all'interno del proprio <c>src_install</c>.
Nella maggior parte dei casi <c>src_install</c> non è per nulla necessario.
</p>

<p>
<c>src_install</c> gestisce correttamente e completamente l'installazione del
modulo, dei file di configurazione e della documentazione.
</p>

</body>
</section>
<section>
<title>Altre funzioni</title>
<body>

<p>
Nella maggioranza dei casi, non ci dovrebbe essere nessun pkg_postinst o
pkg_config, visto che l'eclass gestisce direttamente l'invio delle istruzioni
relative all'abilitazione di un modulo e la posizione del file di configurazione
dell'utente. Se ci fosse bisogno di istruzioni aggiuntive per la configurazione,
allora si può aggiungere <c>pkg_postinst</c>, ma si deve ugualmente far andare
<c>apache1_pkg_postinst</c> o <c>apache2_pkg_postinst</c> al suo interno.
</p>

<pre caption="Diff tra mod_ldap_userdir-1.4.1 e mod_ldap_userdir-1.4.1-r1
(modificato)">
-pkg_postinst() {
-       if use apache2; then
-               elog "Adjust /etc/apache2/conf/modules.d/47_mod_ldap_userdir.conf to match your setup and"
-               elog "add '-D LDAPuserdir' to your APACHE2_OPTS in /etc/conf.d/apache2"
-               elog "To configure the package run \"ebuild /var/db/pkg/net-www/${PF}/${PF}.ebuild config\""
-       fi
-}
-
-pkg_config() {
-       /usr/sbin/apacheaddmod \
-               ${ROOT}/etc/apache/conf/apache.conf \
-               extramodules/mod_ldap_userdir.so mod_ldap_userdir.c ldap_userdir_module \
-               define=LDAPuserdir addconf=conf/addon-modules/47_mod_ldap_userdir.conf
-}
</pre>

<p>
Con la nuova configurazione predefinita, gli utenti non devono più modificare
<path>httpd.conf</path> per abilitare un modulo. Tutti i file
<path>*.conf</path> nella directory <path>modules.d</path> sono automaticamente
inclusi. Tutti i file dovrebbero essere inglobati in un blocco <c>&lt;IfDefine
MODULENAME&gt;</c>, in modo che le direttive in quel file siano usate solo se
l'utente aggiunge un <c>"-D MODULENAME"</c> al suo file
<path>/etc/conf.d/apache{|2}</path>.
</p>

</body>
</section>
<section>
<title>File di configurazione</title>
<body>

<p>
La maggior parte dei file di configurazione non deve essere modificata. Bisogna
fare estrema attenzione nell'usare il percorso corretto quando si carica il
modulo:
</p>


<pre caption="LoadModule directive">
<comment>(Vecchia direttiva:)</comment>
LoadModule ldap_userdir_module  extramodules/mod_ldap_userdir.so

<comment>(Nuova direttiva:)</comment>
LoadModule ldap_userdir_module  modules/mod_ldap_userdir.so
</pre>

<p>
Inoltre ciascun file di configurazione del modulo deve essere inglobato nel
blocco <c>&lt;IfDefine MODULENAME&gt;</c>. Se questo non viene fatto, allora
Apache carica il modulo predefinito, cosa che si vuole evitare. Il caricamento
del modulo deve essere controllato dall'utente usando il file
<path>/etc/conf.d/apache{|2}</path>.
</p>

<pre caption="Esempio .conf">
&lt;IfDefine LDAPuserdir&gt;
  &lt;IfModule !mod_ldap_userdir.c&gt;
    <comment># Carica il modulo:</comment>
    LoadModule ldap_userdir_module      modules/mod_ldap_userdir.so
  &lt;/IfModule&gt;
&lt;/IfDefine&gt;

&lt;IfModule mod_ldap_userdir.c&gt;
<comment># Mettere una valida configurazione predefinita:</comment>

    LDAPUserDir             public_html
    LDAPUserDirDNInfo       cn=root,dc=yourcompany,dc=com yourpassword
    LDAPUserDirBaseDN       ou=People,dc=yourcompany,dc=com

&lt;/IfModule&gt;
</pre>

<note>
Alcuni moduli potrebbero voler aggiungere estensioni che sono controllate dalla
DirectoryIndex. Apache è stato modificato per avere una nuova direttiva di
configurazione, AddDirectoryIndex, che fa appunto questo. Si usa come
DirectoryIndex,funziona nello stesso modo eccetto che non sostituisce la
DirectoryIndex, ma la aggiunge. Se, per qualche motivo, ce ne fosse bisogno c'è
anche una RemoveDirectoryIndex.
</note>

</body>
</section>
</chapter>

<chapter id="apache-module">
<title>apache-module eclass</title>
<section>
<title>Descrizione</title>
<body>

<p>
L'eclass <c>apache-module</c> fornisce valide funzioni predefinite per compilare
moduli di apache. Siccome la maggioranza dei moduli sono compilati nella stessa
maniera, è possibile avere un modulo di ebuild estremamente semplice.
</p>

</body>
</section>
<section>
<title>Funzioni</title>
<body>

<table>
<tr>
  <th>Funzione</th>
  <th>Descrizione</th>
</tr>
<tr>
  <ti><c>apache_cd_dir</c></ti>
  <ti>
    Restituisce il percorso corretto alla directory temporanea di compilazione
  </ti>
</tr>
<tr>
  <ti><c>apache_mod_file</c></ti>
  <ti>Restituisce il percorso al modulo compilato da installare</ti>
</tr>
<tr>
  <ti><c>apache_doc_magic</c></ti>
  <ti>
    Prende opzionalmente un unico valore. Se il valore è impostato, restituisce
    tutti i file *.html contenuti in  <c>${DOCFILES}</c>, altrimenti ritorna
    tutti i file  non-*.html.
  </ti>
</tr>
<tr>
  <ti><c>apache1_src_compile</c></ti>
  <ti>
    Chiama <c>${APXS1}</c> con valori di <c>${APXS1_ARGS}</c>. Se un modulo
    richiede un'impostazione di compilazione diversa da questa, allora si usa
    <c>${APXS1}</c> nella routine src_compile.
  </ti>
</tr>
<tr>
  <ti><c>apache1_src_install</c></ti>
  <ti>
    Questo installa il modulo e i file di installazione nella directory di
    apache. Gestisce l'installazione dei moduli, della configurazione, degli
    eseguibili e della documentazione.
  </ti>
</tr>
<tr>
  <ti><c>apache1_pkg_postinst</c></ti>
  <ti>Stampa messaggi standard di configurazione.</ti>
</tr>
<tr>
  <ti><c>apache2_pkg_setup</c></ti>
  <ti>
    Se APACHE2_SAFE_MPMS è impostato, controlla gli MPMs installati e dà errore
    se non ci sono MPMs sicuri installati.
  </ti>
</tr>
<tr>
  <ti><c>apache2_src_compile</c></ti>
  <ti>
    Chiama <c>${APXS2}</c> con valori di <c>${APXS2_ARGS}</c>. Se un modulo ha
    bisogno di una impostazione di compilazione differente, allora usa
    <c>${APXS2}</c> nella routine src_compile.
  </ti>
</tr>
<tr>
  <ti><c>apache2_src_install</c></ti>
  <ti>
    Questo installa il modulo e i file di configurazione nella directory di
    apache. Gestisce l'installazione dei moduli, della configurazione, degli
    eseguibili e della documentazione.
  </ti>
</tr>
<tr>
  <ti>
    <c>apache-module_pkg_setup</c><br />
    <c>apache-module_src_compile</c><br />
    <c>apache-module_src_install</c><br />
    <c>apache-module_pkg_postinst</c>
  </ti>
  <ti>
    Queste sono funzioni "wrapper" sulle funzioni apache1_* o apache2_*.
    Determinano automaticamente la versione di apache su cui la compilazione si
    appoggia.
  </ti>
</tr>
</table>

</body>
</section>
<section>
<title>Variabili</title>
<body>

<table>
<tr>
  <th>Variabile</th>
  <th>Predefinito</th>
  <th>Descrizione</th>
</tr>
<tr>
  <ti>
    <c>APACHE1_MOD_CONF</c><br />
    <c>APACHE2_MOD_CONF</c>
  </ti>
  <ti>Nessuna</ti>
  <ti>
    Il luogo in <c>${FILESDIR}</c> della configurazione del modulo, senza
    l'estensione .conf.
  </ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_MOD_DEFINE</c><br />
    <c>APACHE2_MOD_DEFINE</c>
  </ti>
  <ti>Nessuna</ti>
  <ti>
    Nome del define nella configurazione del modulo. Usato mostrando un
    messaggio all'utente per aggiungere <path>/etc/conf.d/apache{|2}</path> al
    loro percorso.
  </ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_EXECFILES</c><br />
    <c>APACHE2_EXECFILES</c>
  </ti>
  <ti>Nessuno</ti>
  <ti>File eseguibili aggiuntivi che dovrebbero essere installati.</ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_MOD_FILE</c><br />
    <c>APACHE2_MOD_FILE</c>
  </ti>
  <ti>
    ${PN}.so<br />
    .libs/${PN}.so
  </ti>
  <ti>Il modulo che <c>src_install</c> installa.</ti>
</tr>
<tr>
  <ti><c>APACHE2_SAFE_MPMS</c></ti>
  <ti>Nessuno</ti>
  <ti>
    Una lista di MPMs che funzionano con questo modulo. Se non impostati, allora
    non verrà fatto nessun controllo sugli MPMs. Se ci sono degli MPMs non
    sicuri installati, l'utente è avvisato. Se non ci sono MPMs sicuri
    installati, il modulo rifiuta di installarsi.
  </ti>
</tr>
<tr>
  <ti>
    <c>APXS1_S</c><br />
    <c>APXS2_S</c>
  </ti>
  <ti>Nessuna</ti>
  <ti>
    Percorsi verso directory di compilazione temporanee. Restituiti da
    <c>apache_cd_dir</c> se configurati, altrimenti vedere <c>${S}/src</c> (se è
    una directory) oppure <c>${S}</c>.
  </ti>
</tr>
<tr>
  <ti>
    <c>APXS1_ARGS</c><br />
    <c>APXS2_ARGS</c>
  </ti>
  <ti>-c ${PN}.c</ti>
  <ti>Argomenti da passare all'apxs tool.</ti>
</tr>
<tr>
  <ti><c>DOCFILES</c></ti>
  <ti>Nessuno</ti>
  <ti>
    La documentazione da installare. Qualsiasi file con estensione .html è
    installato usando  <c>dohtml</c>, mentre tutti gli altri con <c>dodoc</c>.
  </ti>
</tr>
</table>

</body>
</section>
</chapter>

<chapter id="depend-apache">
<title>eclass depend.apache</title>
<section>
<title>Descrizione</title>
<body>

<p>
La eclass <c>depend.apache</c> imposta le destinazioni predefinite per i
differenti percorsi di apache e gestisce le impostazioni delle dipendenze. In
generale questa eclass non dovrebbe essere usata per i moduli. Dovrebbe essere
invece usata solo per i programmi che dipendono da apache, ma che non sono
moduli. (I moduli dovrebbero usare l'eclass <uri
link="#apache-module">apache-module</uri>.)
</p>

</body>
</section>
<section>
<title>Funzioni</title>
<body>

<table>
<tr>
  <th>Funzione</th>
  <th>Descrizione</th>
</tr>
<tr>
  <ti><c>need_apache1</c></ti>
  <ti>
    Questa funzione imposta in modo corretto le dipendenze per quei pacchetti
    che supportano solo apache-1.x. I pacchetti che hanno bisogno di apache-1.x
    dovrebbero chiamare <c>need_apache1</c> nel global scope per impostare
    correttamente le dipendenze.
  </ti>
</tr>
<tr>
  <ti><c>need_apache2</c></ti>
  <ti>
    Questa funzione imposta in modo corretto le dipendenze per quei pacchetti
    che supportano solo apache-2.x. I pacchetti che hanno bisogno di apache-2.x
    dovrebbero chiamare <c>need_apache2</c> nel global scope per impostare
    correttamente le dipendenze.
  </ti>
</tr>
<tr>
  <ti><c>need_apache</c></ti>
  <ti>
    Questa funzione imposta in modo corretto le informazioni sulla dipendenza
    basandosi sulla flag USE correntemente impostate. I pacchetti che possono
    usare ambedue le versioni di apache dovrebbero chiamare <c>need_apache</c>
    nel global scope per impostare correttamente le dipendenze.
  </ti>
</tr>
</table>

</body>
</section>
<section>
<title>Variabili</title>
<body>

<table>
<tr>
  <th>Variabile</th>
  <th>Predefinito</th>
  <th>Descrizione</th>
</tr>
<tr>
  <ti><c>APACHE_VERSION</c></ti>
  <ti>1</ti>
  <ti>
    Impostata da <c>need_apache</c>,<c>need_apache1</c>,<c>need_apache2</c>.
    Salvano la versione di apache che si sta per compilare.
  </ti>
</tr>
<tr>
  <ti>
    <c>APXS1</c><br />
    <c>APXS2</c>
  </ti>
  <ti>
    <path>/usr/sbin/apxs</path><br />
    <path>/usr/sbin/apxs2</path>
  </ti>
  <ti>Percorso agli apxs tool</ti>
</tr>
<tr>
  <ti>
    <c>APACHECTL1</c><br />
    <c>APACHECTL2</c>
  </ti>
  <ti>
    <path>/usr/sbin/apachectl</path><br />
    <path>/usr/sbin/apache2ctl</path>
  </ti>
  <ti>Percorso agli apachectl tool</ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_BASEDIR</c><br />
    <c>APACHE2_BASEDIR</c>
  </ti>
  <ti>
    <path>/usr/lib/apache</path><br />
    <path>/usr/lib/apache2</path>
  </ti>
  <ti>Il percorso su cui viene eseguito il server</ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_CONFDIR</c><br />
    <c>APACHE2_CONFDIR</c>
  </ti>
  <ti>
    <path>/etc/apache</path><br />
    <path>/etc/apache2</path>
  </ti>
  <ti>Posizione del file di configurazione <path>httpd.conf</path></ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_MODULES_CONFDIR</c><br />
    <c>APACHE2_MODULES_CONFDIR</c>
  </ti>
  <ti>
    ${APACHE1_CONFDIR}/modules.d<br />
    ${APACHE2_CONFDIR}/modules.d
  </ti>
  <ti>
    Posizione dove i moduli dovrebbero installare la loro configurazione. Tutti
    i file *.conf in questa directory sono inclusi durante l'avvio.
  </ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_VHOSTDIR</c><br />
    <c>APACHE2_VHOSTDIR</c>
  </ti>
  <ti>
    ${APACHE1_CONFDIR}/vhosts.d<br />
    ${APACHE2_CONFDIR}/vhosts.d
  </ti>
  <ti>
    Posizione in cui le configurazioni del virtual host dovrebbero essere
    tenute. Tutti i file *.conf in questa directory sono inclusi durante
    l'avvio.
  </ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_MODULESDIR</c><br />
    <c>APACHE2_MODULESDIR</c>
  </ti>
  <ti>
    ${APACHE1_BASEDIR}/modules<br />
    ${APACHE2_BASEDIR}/modules
  </ti>
  <ti>Posizione in cui i binari del modulo dovrebbero essere installati.</ti>
</tr>
</table>

<note>
Tutte le variabili dovrebbero essere trattate come di sola lettura e non
dovrebbero essere modificate nell'ebuild. Fare questo può portare a risultati
imprevedibili.
</note>

</body>
</section>
</chapter>

</guide>
