<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/it/base/amd64/howtos/fpic.xml,v 1.1 2012/01/14 13:29:30 swift Exp $ -->

<sections>

<version>1.2</version>
<date>2006-07-23</date>

<section>
<title>Il Problema</title>
<body>

<p>
Capita a volte che GCC termini con un messaggio di errore simile al seguente:
</p>

<pre caption="Tipico messaggio di errore di GCC">
.libs/assert.o: relocation R_X86_64_32 against `a local symbol' can not be used
when making a shared object; recompile with -fPIC .libs/assert.o: could not
read symbols: Bad value
</pre>

<p>
Ci sono molte tipologie differenti di cause per un dato errore. Questo HOWTO
le spiegherà tutte mostrando le possibili correzioni.
</p>

</body>
</section>
<section>
<title>Cosa è PIC?</title>
<body>

<p>
PIC è l'abbreviazione di <e>Position-Independent Code</e> (ndt <e>Codice
Indipendente dalla Posizione</e>). Il seguente è un estratto dell'
<uri link="http://en.wikipedia.org/wiki/Position-independent_code">articolo su
Wikipedia</uri>(tradotto) in merito al codice indipendente dalla posizione:
</p>

<p by="tratto da Wikipedia Encyclopaedia (traduzione dalla versione inglese)">
"In informatica, per codice indipendente dalla posizione (PIC,
Position-Independent Code) o eseguibile indipendente dalla posizione (PIE,
Position-Independent Executable) s'intende del codice oggetto che può essere
eseguito in differenti locazioni in memoria. Il codice PIC è comunemente usato
per librerie condivise, in modo da permettere che la stessa libreria possa
essere mappata in una locazione di memoria unica per ogni applicazione (usando
il sistema della memoria virtuale) dove non può sovrapporsi all'applicazione o
ad altre librerie condivise. Il codice PIC è stato utilizzato anche su vecchi
sistemi senza supporto MMU, in modo da permettere al sistema operativo di poter
mantenere le applicazioni reciprocamente separate.<br/><br/>
Il codice indipendente dalla posizione può essere copiato in ogni locazione di
memoria senza modifiche ed esecuzioni, contrariamente dal codice rilocabile, che
necessità di una analisi speciale da parte di un link editor oppure di un
program loader per renderlo adatto all'esecuzione in una data locazione. Il
codice deve essere generalmente scritto o compilato in un modo particolare per
renderlo indipendente dalla posizione. Le istruzioni che riferiscono ad
indirizzi di memoria specifici, come salti assoluti, devono essere sostituite
con operazioni equivalenti ma relative al program-counter. L'indirezione
aggiuntiva può causare al codice PIC di essere meno efficiente, anche se i
moderni processori sono progettati per portare migliorie in tal senso."
</p>

<p>
Su alcune architetture (tra cui AMD64), le librerie condivise <e>devono</e>
essere "PIC-abilitate" (ndt, "PIC-enabled").
<!-- [TODO: reasons would be awesome]. -->
</p>

</body>
</section>
<section>
<title>Cosa sono le "riallocazioni"?</title>
<body>

<p>
Ancora una volta, da Wikipedia:
</p>

<p by="tratto da Wikipedia Encyclopaedia (traduzione dalla versione inglese)">
"In informatica, la rilocazione si riferisce al processo di sostituzione dei
riferimenti simbolici o nomi di librerie con gli attuali ed usabili indirizzi di
memoria, prima dell'esecuzione del programma stesso. Questa attività è svolta
tipicamente dal linker durante la compilazione, ma può essere svolta a tempo di
esecuzione dal program loader. I compilatori e gli assemblatori tipicamente
generano l'eseguibile con zero come indirizzo iniziale. Prima dell'esecuzione
del codice oggetto, questi indirizzi devono essere modificati in modo che
possano denotare indirizzi validi a tempo di esecuzione"
</p>

<p>
Con questi termini definiti, è possibile dare uno sguardo ai differenti scenari
dove possono verificarsi dei problemi:
</p>

</body>
</section>
<section>
<title>1° Caso: Compilatore malfunzionante (broken)</title>
<body>

<p>
Almeno GCC 3.4 è conosciuto per avere una implementazione errata dell'opzione
<c>-fvisibility-inlines-hidden</c>. L'uso di questa opzione è comunque altamente
scoraggiata ed i bug relativi riportati sono solitamente marcati come "RESOLVED
INVALID". Vedere il <uri link="http://bugs.gentoo.org/108872">bug 108872</uri>
per un esempio di un tipico errore causato da questa opzione.
</p>

</body>
</section>
<section>
<title>2° Caso: Controllo errato del supporto `-fPIC' nel "configure"</title>
<body>

<p>
Molti strumenti <c>configure</c> verificano l'eventuale supporto per l'opzione
<c>-fPIC</c> da parte del compilatore. La verifica è eseguita compilando un
programma minimale con l'opzione <c>-fPIC</c> e verificando lo <c>stderr</c>. Se
il compilatore visualizza un qualsiasi messaggio di avvertimento (warning), è
assunto che l'opzione <c>-fPIC</c> non sia supportata ed è quindi abbandonata.
Sfortunatamente, se l'utente specifica una opzione inesistente (per esempio,
delle opzioni C++ in <c>CFLAGS</c> oppure opzioni introdotte dalle nuove
versioni di GCC ma non supportate dalle versioni precedenti), GCC visualizza in
ogni caso un messaggio di avviso ("warning"), ottenendo un malfunzionamento
della procedura di verifica.
</p>

<p>
Per evitare questo tipo di problema, i profili definiti per AMD64 usano un
bashrc che filtra le opzioni definite in <c>C[XX]FLAGS</c> non valide.
</p>

<p>
Vedere il <uri link="http://bugs.gentoo.org/122208">bug 122208</uri> per un
esempio.
</p>

</body>
</section>
<section>
<title>3° Caso: Assenza del supporto a `-fPIC' nel software da compilare</title>
<body>

<p>
Questo è il caso più comune. È un vero bug del sistema di compilazione e
dovrebbe essere corretto nell'ebuild, preferibilmente attraverso una patch da
sottoporre agli sviluppatori originali del software. Assumendo che l'errore sia
simile a questo:
</p>

<pre caption="Un esempio di messaggio di errore">
.libs/assert.o: relocation R_X86_64_32 against `a local symbol' can not be used
when making a shared object; recompile with -fPIC .libs/assert.o: could not
read symbols: Bad value
</pre>

<p>
Questo significa che il file <path>assert.o</path> non è stato compilato con
l'opzione <c>-fPIC</c>, contrariamente a come dovrebbe essere. Per la correzione
di questo tipo di errore, bisogna assicurarsi che solo gli oggetti usati nelle
librerie siano compilati con <c>-fPIC</c>.
</p>

<p>
In questo caso, aggiungendo globalmente <c>-fPIC</c> in <c>C[XX]FLAGS</c> si
risolverebbe il problema, ma questa pratica è scoraggiata perché anche gli
eseguibili finirebbero per essere abilitati per essere PIC.
</p>

<note>
L'aggiunta dell'opzione <c>-fPIC</c> al comando di linking o in <c>LDFLAGS</c>
non aiuta.
</note>

</body>
</section>
<section>
<title>4° Caso: Collegare dinamicamente rispetto archivi statici</title>
<body>

<p>
Capita qualche volta che un pacchetto possa creare delle librerie condivise
usando archivi compilati staticamente e non abilitati come PIC. Ci sono due
ragioni principali perché questo possa accadere:
</p>

<p>
Spesso è il risultato di un mix di <c>USE=static</c> e <c>USE=-static</c>. Se un
pacchetto di libreria può essere compilato staticamente impostando
<c>USE=static</c>, solitamente non crea un file <path>.so</path> ma solo un
archivio <path>.a</path>. Comunque, quando a GCC viene passata l'opzione
<c>-l</c> per collegare detta (dinamica o statica) libreria, esso ripiega
sull'archivio statico quando non può individuare la relativa libreria condivisa.
In questo caso, la soluzione preferita è la compilazione statica della libreria
usando anche l'opzione <c>-fPIC</c>.
</p>

<warn>
Compilare gli archivi statici con l'opzione <c>-fPIC</c> abilitata solo su
AMD64. Su altre architetture questo non è necessario ed avrà un impatto a tempo
di esecuzione.
</warn>

<p>
Vedere i bug <uri link="http://bugs.gentoo.org/88360">88360</uri> e <uri
link="http://bugs.mysql.com/bug.php?id=8796">mysql 8796</uri> per un esempio.
</p>

<p>
Qualche volta può essere il caso che una libreria non sia predisposta ad essere
una libreria condivisa, per esempio perché fa un intenso uso di variabili
globali. In questo caso la soluzione è cambiare la libreria condivisa in una
libreria statica.
</p>

<p>
Vedere il <uri link="http://bugs.gentoo.org/131460">bug 131460</uri> per un
esempio
</p>

<pre caption="Esempio di messaggio di errore">
gcc   -fPIC -DSHARED_OBJECT -c lex.yy.c
gcc  -shared -o html2txt.so lex.yy.o -lfl
usr/lib/gcc/x86_64-pc-linux-gnu/4.1.1/../../../../x86_64-pc-linux-gnu/bin/ld:
/usr/lib/gcc/x86_64-pc-linux-gnu/4.1.1/../../../../lib64/libfl.a(libyywrap.o):
relocation R_X86_64_32 against `a local symbol' can not be used when making a
shared object; recompile with -fPIC
/usr/lib/gcc/x86_64-pc-linux-gnu/4.1.1/../../../../lib64/libfl.a: could not
read symbols: Bad value
</pre>

</body>
</section>
</sections>
