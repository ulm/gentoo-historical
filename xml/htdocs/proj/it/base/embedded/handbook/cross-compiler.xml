<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/it/base/embedded/handbook/cross-compiler.xml,v 1.3 2008/08/18 12:19:20 scen Exp $ -->

<sections>

<abstract>
Creare un cross-compilatore sulla propria macchina!
</abstract>

<version>0.1</version>
<date>2007-08-12</date>

<section>
<title>Prologo</title>
<body>

<p>
La prima cosa da sapere sulla creazione di una toolchain è che certe versioni di
alcuni suoi componenti non funzionano assieme. Sapere quali siano le esatte
combinazioni problematiche è un dato che è in costante mutamento a seconda di
come si sviluppa l'albero di portage. L'unico modo sicuro per determinare se una
certa combinazione funziona è eseguire crossdev, specificando le versioni dei
vari componenti secondo necessità, finché non viene completata con successo la
compilazione dell'intera toolchain. Anche a quel punto, la cross toolchain
potrebbe generare binari non funzionanti sul sistema di destinazione. Solo
avendo pazienza e procedendo per tentativi ed errori si potrà ottenere una
combinazione favorevole di tutti i fattori.
</p>

<p>
Tutti i pacchetti della toolchain sono pensati in modo tale da esser totalmente
isolati in base all'architettura di destinazione, per cui non c'è modo che
interferiscano con l'ambiente nativo di compilazione. Questo permette di
installare cross-compilatori per qualunque architettura si desideri senza
intaccare il resto del sistema.
</p>

</body>
</section>
<section>
<title>crossdev</title>
<subsection>
<title>Introduzione</title>
<body>

<p>
Generare a mano un cross-compilatore è un processo lungo e tedioso. Per questo è
stato integrato totalmente in Gentoo! Tramite un'interfaccia chiamata
<c>crossdev</c> (installabile con <c>emerge crossdev</c>) <c>emerge</c> verrà
eseguito con tutte le variabili d'ambiente valorizzate correttamente ed
installerà tutti i pacchetti corretti per generare qualunque tipo di
cross-compilatore di cui si ha bisogno.
</p>

</body>
</subsection>
<subsection>
<title>Installazione</title>
<body>

<p>
Il primo passo consiste nel selezionare la corretta stringa per
il sistema di destinazione. Prendiamo ad esempio che si voglia generare
un cross-compilatore per il processore SH4 (SuperH) con supporto alle
glibc per Sistema Operativo Linux. Il tutto partendo da una macchina
PowerPC.
</p>

<pre caption="Generazione del cross-compilatore per SH4">
# <i>crossdev --target sh4-unknown-linux-gnu</i>
-----------------------------------------------------------------------------------------------------
 * Host Portage ARCH:     ppc
 * Target Portage ARCH:   sh
 * Target System:         sh4-unknown-linux-gnu
 * Stage:                 4 (C/C++ compiler)

 * binutils:              binutils-[latest]
 * gcc:                   gcc-[latest]
 * headers:               linux-headers-[latest]
 * libc:                  glibc-[latest]

 * PORTDIR_OVERLAY:       /usr/local/portage
 * PORT_LOGDIR:           /var/log/portage
 * PKGDIR:                /usr/portage/packages/powerpc-unknown-linux-gnu/cross/sh4-unknown-linux-gnu
 * PORTAGE_TMPDIR:        /var/tmp/cross/sh4-unknown-linux-gnu
  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _  -  ~  -  _
 * Forcing the latest versions of {binutils,gcc}-config/gnuconfig ...                          [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-binutils.log
 * Emerging cross-binutils ...                                                                 [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-gcc-stage1.log
 * Emerging cross-gcc-stage1 ...                                                               [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-linux-headers.log
 * Emerging cross-linux-headers ...                                                            [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-glibc.log
 * Emerging cross-glibc ...                                                                    [ ok ]
 * Log: /var/log/portage/cross-sh4-unknown-linux-gnu-gcc-stage2.log
 * Emerging cross-gcc-stage2 ...                                                               [ ok ]
</pre>

<note>
Al momento non è possibile assegnare a <c>PORTAGE_CONFIGROOT</c> una directory
predisposta per l'architettura di destinazione prima di invocare
<c>crossdev</c>, bisogna invece usare la propria configurazione. Se si vogliono
usare FLAG use specifiche per architettura, come <c>altivec</c> su
un'architettura non powerpc, bisogna smascherare la flag use in
<c>/usr/portage/base/use.mask</c>, o cambiare temporaneamente il proprio
profilo.
</note>

</body>
</subsection>
<subsection>
<title>Test Veloce</title>
<body>

<p>
Se tutto è andato come previsto, si dovrebbe avere un compilatore nuovo
fiammante sulla propria macchina. Facciamo una prova!
</p>

<pre caption="test del cross-compilatore per SH4">
$ <i>sh4-unknown-linux-gnu-gcc --version</i>
sh4-unknown-linux-gnu-gcc (GCC) 4.2.0 (Gentoo 4.2.0 p1.4)
Copyright (C) 2007 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
$ <i>echo 'int main(){return 0;}' > sh4-test.c</i>
$ <i>sh4-unknown-linux-gnu-gcc -Wall sh4-test.c -o sh4-test</i>
$ <i>file sh4-test</i>
sh4-test: ELF 32-bit LSB executable, Renesas SH, version 1 (SYSV), for GNU/Linux 2.6.9, dynamically linked (uses shared libs), not stripped
</pre>

<p>
Se il comando crossdev fallisse, saranno comunque a disposizione i
log per analizzare il problema che si è verificato. Se non si è in
grado di risolvere il problema, aprite pure un bug sul bugzilla di Gentoo.
Per maggiori informazioni visitare la <uri link="communication.xml">pagina
dei Contatti</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Disinstallazione</title>
<body>

<p>
Per disinstallare una toolchain, è sufficiente usare l'opzione <c>--clean</c>.
Se la sysroot è stata modificata a mano, vi verrà domandato se cancellarne il
contenuto, per cui potreste volere mettere in pipe <c>yes |</c> al comando.
</p>

<pre caption="disinstallare il cross-compiler">
# <i>crossdev --clean sh4-unknown-linux-gnu</i>
</pre>

<p>
Nel caso non lo si abbia già notato, cancellare tutti i file contenuti nella
directory <path>/usr/CTARGET/</path> è completamente sicuro.
</p>

</body>
</subsection>
<subsection>
<title>Opzioni</title>
<body>

<p>
Ovviamente crossdev può fare molte altre cose, per scoprirle, basta lanciare
<c>crossdev --help</c> o <c>man crossdev</c>.
</p>

</body>
</subsection>
</section>
<section>
<title>I dettagli della Cross-Compilazione</title>
<subsection>
<body>

<warn>
Questa sezione è inclusa per i posteri, nella speranza che possa essere utile ad
altri. I lettori a cui è dedicata sono coloro che (per una ragione o per
l'altra) vogliono crearsi a mano, tutto da soli, il proprio cross-compilatore
usando binutils/(glibc|uclibc)/gcc . Questa sezione <b>non</b> è intesa per
illustrare/documentare/quelchevolete la miriade di errori di compilazione che
quasi sicuramente si incontreranno lungo la via. Se avete bisogno di tale
supporto, leggete la sezione <uri link="the-more-you-know.xml">Ampliare le
proprie Conoscenze</uri> del Manuale, ma non lamentatevi con l'autore o chiunque
altro all'interno di Gentoo.
</warn>

<warn>
Se state ancora leggendo, dovreste controllare il progetto CrossTool (fate
riferimento alla sezione <uri link="the-more-you-know.xml">Ampliare le proprie
Conoscenze</uri>) che fornisce un metodo generico adatto ad ogni distribuzione
per generare un cross-compilatore. Pur essendo, a giudizio dell'autore, poco
più che un accrocchio, è sicuramente la migliore, nonché l'unica, via
percorribile per ottenere un cross-compilatore.
</warn>

</body>
</subsection>
<subsection>
<title>Introduzione</title>
<body>

<p>
Generalmente ci sono due strade percorribili per generare il proprio
compilatore. La via "maestra" e l'oscura scorciatoia.
</p>

<p>
La via "maestra" è:
</p>

<ol>
  <li>binutils</li>
  <li>header del kernel</li>
  <li>header delle libc</li>
  <li>gcc stage1 (solo c)</li>
  <li>libc</li>
  <li>gcc stage2 (c/c++/etc...)</li>
</ol>

<p>
L'oscura scorciatoia invece è:
</p>

<ol>
  <li>binutils</li>
  <li>header del kernel</li>
  <li>gcc stage1 (solo c)</li>
  <li>libc</li>
  <li>gcc stage2 (c/c++/etc...)</li>
</ol>

<p>
Molte persone seguono la scorciatoia perche la generazione degli header delle
libc richiede molto tempo, specie su macchine lente. Inoltre installare gli
header del kernel e/o delle libc senza un cross-compilatore funzionante potrebbe
esser una scocciatura. Ricordate però che se si cerca aiuto sui
cross-compilatori, il progetto upstream non vi offrirà supporto se avrete
utilizzato la scorciatoia.
</p>

<p>
La scorciatoia inoltre richiede uno stage1 "menomato". Dal momento che si sta
compilando senza gli header, non è possibile abilitare le varie opzione della
sysroot né è possibile compilare correttamente le librerie del gcc. Questa
situazione può essere accettabile solo se si usa lo stage1 per compilare la
libreria C e il kernel, per tutto il resto sarà necessario un compilatore basato
su sysroot.
</p>

<p>
Di seguito verrà descritta solo la via "riconosciuta", i passi da fare comunque
sono praticamente gli stessi. Per la scorciatoia sarà sufficiente applicare
qualche patch supplementare al gcc.
</p>

</body>
</subsection>
<subsection>
<title>Sysroot</title>
<body>

<p>
La cross-compilazione avverrà usando il metodo della sysroot. Ma cosa si intende
precisamente quando si parla di sysroot ?
</p>

<p>
Dalla documentazione del gcc:<br/>
Dice al GCC di considerare dir come la radice (NdT. root) di un'alberatura
contenente il filesystem di root del sistema operativo di destinazione. Gli
header del sistema di destinazione, le librerie e gli oggetti a run-time saranno
ricercati al suo all'interno.
</p>

<p>
La directory radice solitamente viene posizionata in /usr/$CTARGET .
</p>

<pre caption="tipico layout di una sysroot">
/usr/$CTARGET/
|-- bin/
|-- lib/            librerie di runtime critiche (libc/ldso/etc...)
`-- usr/
|-- include/    header per lo sviluppo
|   |-- linux/      come il kernel linux
|   `-- asm/        come le dir. specifiche per ogni architettura
`-- lib/        librerie di runtime / sviluppo non critiche
</pre>

<p>
Come si può notare, è una configurazione analoga alla / , solo che si trova in
/usr/$CTARGET. Questa scelta non è ovviamente accidentale, ma pensata di
proposito così da rendere semplice la migrazione di applicazioni e/o librerie da
/usr/$CTARGET alla / sull'architettura di destinazione. volendo, è possibile
utilizzare /usr/$CTARGET come NFS root pronta all'uso!
</p>

<note>
Note pre sysroot:<br/>
Il vecchio metodo per cross-compilare imponeva l'uso di --prefix=/usr/$CTARGET.
Se si stanno usando versioni di binutils/gcc antecedenti al supporto al sysroot,
ci si potrebbe trovar a dover agire come sopra indicato. Non sarà però qui
illustrato il come, in quanto (1) non si dovrebbero usare versioni così
datate/arrugginite/bacate di tali componenti e (2) sarebbe molto più scomodo e
problematico in confronto a sysroot.
</note>

</body>
</subsection>
<subsection>
<title>Binutils</title>
<body>

<p>
Prelevare l'ultima versione del pacchetto binutils e scompattarlo.
</p>

<p>
L'opzione di configurazione --disable-werror è usata per evitare che la
compilazione delle binutils fallisca per via dei warning. Caratteristica molto
utile per gli sviluppatori, molto problematica invece per gli utenti.
</p>

<pre caption="configurazione e compilazione delle binutils">
$ <i>./configure \
--target=$CTARGET \
--prefix=/usr \
--with-sysroot=/usr/$CTARGET \
--disable-werror</i>
$ <i>make</i>
$ <i>make install DESTDIR=$PWD/install-root</i>
</pre>

<p>
Il motivo per cui le binutils vengono installate nella directory
install-root è per permettere la rimozione di componenti di cui non
si ha bisogno. Ad esempio, una normale installazione creerà
/usr/lib/libiberty.a che non deve però far parte del sistema in uso.
Va perciò fatta prima un po' di pulizia:
</p>

<pre caption="ripuliamo le binutils">
$ <i>rm -rf install-root/usr/{info,lib,man,share}</i>
</pre>

<p>
Installare quindi quanto rimasto :
</p>

<pre caption="installazione delle binutils">
# <i>cp -a install-root/* /</i>
</pre>
</body>
</subsection>
<subsection>
<title>Header del kernel</title>
<body>
<p>
Prelevare l'ultimo pacchetto del kernel e scompattarlo. Gli header possono
essere installati in 2 modi: ripuliti o grezzi. La prima è chiaramente migliore
(richiede però una versione recente del kernel Linux), ma verranno illustrate
brevemente entrambe.
</p>

<note>
Ricordarsi di sostituire $ARCH con un valore sensato per la propria
architettura.
</note>

<pre caption="Compilazione/installazione degli header grezzi">
$ <i>yes "" | make ARCH=$ARCH oldconfig prepare</i>
# <i>mkdir -p /usr/$CTARGET/usr/include</i>
# <i>cp -a include/linux include/asm-generic /usr/$CTARGET/usr/include/</i>
# <i>cp -a include/asm-$ARCH /usr/$CTARGET/usr/include/asm</i>
</pre>

<pre caption="compilazione/installazione degli header ripuliti">
# <i>make ARCH=$ARCH headers_install INSTALL_HDR_PATH=/usr/$CTARGET/usr</i>
</pre>

</body>
</subsection>
<subsection>
<title>Header delle libc di sistema</title>
<body>

<p>
Prelevare l'ultimo pacchetto delle glibc e scompattarlo. Le Glibc sono piuttosto
esigenti, per questo andranno compilate in una directory differente da quella
dei sorgenti.
</p>

<pre caption="compilazione/installazione degli header delle glibc">
$ <i>mkdir build</i>
$ <i>cd build</i>
$ <i>../configure \
--host=$CTARGET \
--prefix=/usr \
--with-headers=/usr/$CTARGET/usr/include \
--disable-sanity-checks</i>
# <i>make -k install-headers install_root=/usr/$CTARGET</i>
</pre>

<p>
Purtroppo le glibc non sono perfette e richiedono che alcune operazioni siano
fatte a mano:
</p>

<pre caption="diamo una mano alle glibc">
# <i>mkdir -p /usr/$CTARGET/usr/include/gnu</i>
# <i>touch /usr/$CTARGET/usr/include/gnu/stubs.h</i>
# <i>cp bits/stdio_lim.h /usr/$CTARGET/usr/include/bits/</i>
</pre>

</body>
</subsection>
<subsection>
<title>GCC Stage 1 (solo C)</title>
<body>

<p>
Prima di tutto bisogna fare in modo che il gcc trovi gli header delle libc.
</p>

<pre caption="diamo una mano al gcc">
# <i>ln -s usr/include /usr/$CTARGET/sys-include</i>
</pre>

<p>
Quindi prelevare l'ultima versione del pacchetto gcc e scompattarlo.
</p>

<pre caption="compilazione del gcc stage 1">
$ <i>mkdir build</i>
$ <i>cd build</i>
$ <i>../configure \
--target=$CTARGET \
--prefix=/usr \
--with-sysroot=/usr/$CTARGET \
--enable-languages=c \
--disable-shared \
--disable-checking \
--disable-werror \
--disable-libmudflap \
--disable-libssp</i>
$ <i>make</i>
$ <i>make install DESTDIR=$PWD/install-root</i>
</pre>

<p>
Come le binutils, anche il gcc crea dei file che non ci interessano.
</p>

<pre caption="ripuliamo il gcc stage 1">
$ <i>rm -rf install-root/usr/{info,include,lib/libiberty.a,man,share}</i>
</pre>

<p>
Installare poi quanto rimasto (tutto dovrebbe finire nelle directory del
CTARGET specificato, senza sovrascrivere alcun file del sistema in uso):
</p>

<pre caption="installazione del gcc stage 1">
# <i>cp -a install-root/* /</i>
</pre>

</body>
</subsection>
<subsection>
<title>Libc di Sistema</title>
<body>

<p>
Eliminare la vecchia cartella di compilazione del gcc e ricrearla.
</p>

<pre caption="compilazione/installazione delle glibc">
$ <i>rm -rf build</i>
$ <i>mkdir build</i>
$ <i>cd build</i>
$ <i>../configure \
--host=$CTARGET \
--prefix=/usr</i>
$ <i>make</i>
# <i>make install install_root=/usr/$CTARGET</i>
</pre>

</body>
</subsection>
<subsection>
<title>GCC Stage 2 (Tutti i frontend)</title>
<body>

<p>
È giunta l'ora di compilare un GCC completo. Scegliere i frontend al
compilatore d'interesse; per semplicità si selezioneranno solo C e C++.
</p>

<pre caption="compilare/installare il gcc stage 2">
$ <i>./configure \
--target=$CTARGET \
--prefix=/usr \
--with-sysroot=/usr/$CTARGET \
--enable-languages=c,c++ \
--enable-shared \
--disable-checking \
--disable-werror</i>
$ <i>make</i>
# <i>make install</i>
</pre>
</body>
</subsection>
<subsection>
<title>File Core Runtime</title>
<body>

<p>
Ci sono diversi file core runtime casuali di cui si vorrebbe conoscerne la
funzione. Ecco una breve spiegazione.
</p>

<table>
<tr>
  <th colspan="2">File forniti dalle glibc</th>
</tr>
<tr>
  <th>File</th> <th>Funzione</th>
</tr>
<tr>
  <ti>crt0.o</ti>
  <ti>
    Vecchio stile del runtime code iniziale ? Nessuno lo genera più.
  </ti>
</tr>
<tr>
  <ti>crt1.o</ti>
  <ti>
    Nuovo stile del runtime code iniziale. Contiene il simbolo _start che
    configura l'ambiente con argc/argv/libc_init/libc_fini prima di passare al
    main della libc. Le glibc chiamano questo file 'start.S'.
  </ti>
</tr>
<tr>
  <ti>crti.o</ti>
  <ti>
    Definisce la funzione prolog; _init nella sezione .init e _fini nella
    sezione .fini. Le glibc chiamano questo file 'initfini.c'.
  </ti>
</tr>
<tr>
  <ti>crtn.o</ti>
  <ti>
    Definisce la funzione epilog. Le glibc chiamano questo file 'initfini.c'.
  </ti>
</tr>
<tr>
  <ti>Scrt1.o</ti>
  <ti>Usato al posto di crt1.o quando si creano eseguibili PIE.</ti>
</tr>
<tr>
  <ti>gcrt1.o</ti>
  <ti>
    Usato al posto di crt1.o quando si crea codice con informazioni per il
    profiling. Compila con -pg. Produce in output dei file adatti al
    programma gprof.
  </ti>
</tr>
<tr>
  <ti>Mcrt1.o</ti>
  <ti>
    Come gcrt1.o, ma è usato con il programma prof. Dal momento che è inutile
    sui sistemi linux, le glibc ne installano una versione fittizia.
  </ti>
</tr>
</table>

<table>
<tr>
  <th colspan="2">File forniti dal GCC</th>
</tr>
<tr>
  <th>File</th>
  <th>Funzione</th>
</tr>
<tr>
  <ti>crtbegin.o</ti>
  <ti>Usato dal GCC per trovare l'inizio dei costruttori.</ti>
</tr>
<tr>
  <ti>crtbeginS.o</ti>
  <ti>
    Usato al posto di crtbegin.o quando si creano shared objects o eseguibili
    PIE.
  </ti>
</tr>
<tr>
  <ti>crtbeginT.o</ti>
  <ti>
    Usato al posto di crtbegin.o quando si creano eseguibili statici.
  </ti>
</tr>
<tr>
  <ti>crtend.o</ti>
  <ti>
    Usato dal GCC per trovare l'inizio dei distruttori.
  </ti>
</tr>
<tr>
  <ti>crtendS.o</ti>
  <ti>
    Usato al posto di crtend.o quando si creano shared objects o eseguibili PIE.
  </ti>
</tr>
</table>

<p>
L'ordine generale in fase di linking:
</p>

<pre caption="ordine generale in fase di linking">
... crt1.o crti.o crtbegin.o [-L paths] [user objects] [gcc libs] [C libs] [gcc libs] crtend.o crtn.o
</pre>

</body>
</subsection>
</section>
</sections>
