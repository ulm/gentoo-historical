<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/it/base/embedded/handbook/cross-compiling-kernel.xml,v 1.1 2008/04/06 15:57:55 scen Exp $ -->

<sections>

<abstract>
Cross-compilare con successo un kernel per il proprio sistema!
</abstract>

<version>0.1</version>
<date>2007-08-12</date>

<section>
<title>Sorgenti</title>
<body>

<p>
Prima di tutto occorre installare i sorgenti del kernel. Si può utilizzare
portage per ottenere i sorgenti del kernel di cui si avrà bisogno, o scaricarli
dall'<uri link="http://kernel.org/">Archivio dei Kernel Linux</uri> o da dove
si preferisce. Il metodo per compilarli è sempre lo stesso.
</p>

<p>
Bisognerà installare il kernel nella sysroot così che se si effettuerà la
cross-compilazione dei pacchetti che includono moduli del kernel, il processo
sarà trasparente. Se non si avrà bisogno di tali pacchetti, allora si potranno
compilare i sorgenti del kernel dove si preferisce. Alcuni mantengono i sorgenti
del kernel in <path>/usr/src/</path>, ad esempio.
</p>

<pre caption="Installazione dei gentoo-sources nella sysroot">
# <i>xmerge -av gentoo-sources</i>
</pre>

</body>
</section>
<section>
<title>Preparazione alla Cross-compilazione</title>
<body>

<p>
Due sono le variabili usate dal kernel per selezionare l'architettura di
destinazione. Normalmente questi valori sono ricavati dall'ambiente dove viene
compilato il kernel, in questo caso però l'ambiente non corrisponde
all'architettura di destinazione, per cui bisogna forzarle. Le variabili in
questione sono <c>ARCH</c> e <c>CROSS_COMPILE</c>. I valori predefiniti per
entrambe si trovano nel Makefile presente nella directory radice dei sorgenti e
possono essere forzati da linea di comando.
</p>

<p>
La variabile <c>ARCH</c> indica il nome l'architettura di destinazione, nel
formato specificato dal kernel. Mentre portage e altri programmi usano la
dicitura "x86", il kernel usa "i386". Per avere un'idea delle sigle delle
diverse architetture visualizzare il contenuto della subdirectory
<path>arch/</path>.
</p>

<p>
La variabile <c>CROSS_COMPILE</c> dovrebbe essere auto esplicativa. Essa va
valorizzata con il prefisso della propria toolchain (trattino finale "<c>-</c>"
incluso). Perciò se si invoca la propria toolchain come
<c>x86_64-pc-linux-gnu-gcc</c>, sarà sufficiente eliminare quel <c>gcc</c> in
coda ed il risultato è ciò che si dovrà usare: <c>x86_64-pc-linux-gnu-</c>.
</p>

<p>
Ci sono due modalità per preparare il sistema. È possibile modificare il
Makefile presente nella directory radice o valorizzare le variabili rilevanti da
linea di comando. Entrambe sono corrette: è solo una questione di gusti, perciò
verranno illustrate entrambe. Sceglierne una delle due.
</p>

<pre caption="Modifica del Makefile nella directory radice">
<comment># Il Makefile di un kernel vanilla si presenta così</comment>
ARCH            ?= $(SUBARCH)
CROSS_COMPILE   ?=

<comment># Specificare i valori predefiniti di ARCH e CROSS_COMPILE</comment>
ARCH            ?= <i>arm</i>
CROSS_COMPILE   ?= <i>arm-unknown-linux-gnu-</i>
</pre>

<pre caption="Valorizzare le variabili da linea di comando">
# <i>make ARCH=arm CROSS_COMPILE=arm-unknown-linux-gnu- ....</i>
</pre>

<p>
È anche possibile usare un piccolo script per semplificarsi la vita se si deve
lavorare con diversi kernel contemporaneamente. Questo script verrà chiamato
<c>xkmake</c>.
</p>

<pre caption="xkmake">
#!/bin/sh
exec make ARCH="arm" CROSS_COMPILE="arm-unknown-linux-gnu-" INSTALL_MOD_PATH="${SYSROOT}" "$@"
</pre>

<p>
Così quando si vorrà compilare un kernel o fare qualunque altra cosa, sarà
sufficiente eseguire <c>xkmake</c> al posto di <c>make</c>.
</p>

</body>
</section>
<section>
<title>Configurazione e Compilazione</title>
<body>

<p>
A questo punto, la configurazione e la compilazione del kernel è la stessa di
ogni altro kernel, per cui non verrà approfondito l'argomento dato che sono
presenti già molti HOWTO e guide che trattano l'argomento in dettaglio.
</p>

<pre caption="Configurazione e Compilazione">
# <i>cd "${SYSROOT}/usr/src/linux"</i>
# <i>xkmake menuconfig</i>
# <i>xkmake</i>
</pre>

</body>
</section>
</sections>
