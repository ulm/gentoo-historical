<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/it/base/embedded/handbook/cross-compiling-packages.xml,v 1.3 2010/06/22 19:17:18 scen Exp $ -->

<sections>

<abstract>
Usare Portage come Cross-Compilatore e Gestore di pacchetti.
</abstract>

<version>0.3</version>
<date>2009-09-23</date>

<section>
<title>Variabili</title>
<body>

<p>
Ci sono alcune importanti variabili che verranno usate in questa sezione.
</p>

<table>
 <tr>
  <th>Variabile</th>
  <th>Significato</th>
 </tr>
 <tr>
  <ti>CBUILD</ti>
  <ti>Piattaforma su cui si sta compilando</ti>
 </tr>
 <tr>
  <ti>CHOST</ti>
  <ti>Piattaforma per cui si sta compilando</ti>
 </tr>
 <tr>
  <ti>ROOT</ti>
  <ti>La <path>/</path> virtuale sulla quale si sta installando</ti>
 </tr>
 <tr>
  <ti>PORTAGE_CONFIGROOT</ti>
  <ti>
    La <path>/</path> dove portage può trovare i suoi file di configurazione
    (come <path>make.conf</path>)
  </ti>
 </tr>
</table>

<p>
È possibile valorizzarle tutte a mano, ma questo ovviamente diventa presto
una scocciatura. Un'idea migliore è invece quella di specificare queste
variabili in uno script di shell così da evitare di digitarle ogni volta.
</p>

</body>
</section>
<section>
<title>Configurazione del Filesystem</title>
<body>

<p>
Il cross-compilare un sistema richiede generalmente due alberature di directory.
La prima, dove tutti i file di sviluppo sono normalmente installati. Questa è
la vostra sysroot. L'altra alberatura è invece dove verranno installati i file
che devono essere eseguiti. Una volta installati con emerge tutti i pacchetti
nella sysroot (senza aver rimosso alcun file) sarà sufficiente installare
tramite pacchetti binari o copiando a mano tutti i file desiderati
nell'alberatura di esecuzione.
</p>

<p>
È convenzione usare l'alberatura presente sotto <path>/usr/CTARGET/</path>
come sysroot, dato che il cross-compilatore è già configurato per cercare in
tale percorso le directory degli include e delle librerie. È anche possibile
usare un'altra directory, aggiungendone poi il percorso alle CPPFLAGS/LDFLAGS
tramite l'opzione -I/-L, ma questo opzione storicamente si è rivelato esser
problematica: anche se dovesse funzionare, è sconsigliata e scoraggiata. D'ora
in avanti si assumerà che si stia usando la sysroot come propria ROOT di
sviluppo.
</p>

<p>
Il sistema che poi si vorrà eseguire avrà probabilmente bisogno di un po' di
lavoro per esser alleggerito e snellito. Proprio per via dei file che si
rimuoveranno dai pacchetti installati, questo ambiente non è adatto per la
compilazione. Mentre si installa la sysroot si possono generare pacchetti binari
dei vari applicativi, dai quali, con l'aggiunta della variabile
<c>INSTALL_MASK</c> sono facilmente rimuovibili i file giudicati superflui.
Leggere <c>man make.conf</c> per ottenere maggiori informazioni.
</p>

</body>
</section>
<section>
<title>Introduzione: wrapper di crossdev</title>
<body>

<p>
Ci sono dei semplici script wrapper che imposteranno al posto dell'utente le
variabili d'ambiente in modo da farle puntare alle giuste posizione per
permettere la cross compilazione usando emerge. PORTAGE_CONFIGROOT e ROOT
punteranno entrambe a SYSROOT.
</p>

<pre caption="wrapper di crossdev">
# <i>echo 'sys-devel/crossdev ~*' >> /etc/portage/package.keywords</i>
# <i>emerge crossdev</i>
</pre>

<p>
È possibile usare questi strumenti sia per installare nella propria root di
sviluppo (sysroot) sia in quella per l'esecuzione. Per quest'ultima,
specificarla usando semplicemente l'opzione <c>--root</c>. Per esempio, se si ha
effettuato l'emerge di una toolchain <c>armv4tl-softfloat-linux-gnueabi</c>
tramite crossdev successivamente si dovrebbe invocare il comando come un
normale emerge, usando però il prefisso <c>ctarget</c>:
</p>

<pre caption="CTARGET-emerge">
# <i>armv4tl-softfloat-linux-gnueabi-emerge pkg0 pkg1 pkg2</i>
</pre>

<p>
Come impostazione predefinita questi wrapper usano l'opzione
<c>--root-deps=rdeps</c> per evitare che le dipendenze dell'host vengano
incluse nell'albero delle dipendenze. Ciò potrebbe portare ad alberi di
dipendenze incompleti. Perciò si potrebbe voler usare --root-deps singolarmente
per vedere il grafico completo delle dipendenze.
</p>

<p>
Come impostazione predefinita i wrapper si collegheranno al profilo embedded
generico. Questo viene fatto per semplificare le cose, ma l'utente potrebbe
desiderare un profilo di destinazione più avanzato. Per poterlo fare è
possibile aggiornare il collegamento simbolico al profilo.
</p>

<pre caption="${SYSROOT}/etc/make.profile">
# <i>ln -s /usr/portage/profiles/default/linux/arm/10.0
${SYSROOT}/etc/make.profile</i>
</pre>

<p>
E naturalmente per cambiare le impostazioni del sistema di destinazione, tipo
flag USE, FEATURES e VIDEO_CARDS, si modificheranno i file di configurazione
standard di portage.
</p>

<pre caption="${SYSROOT}/etc/make.conf">
# <i>$EDITOR ${SYSROOT}/etc/make.conf</i>
</pre>

<p>
Qualche volta ci sono alcun test addizionali per gli script di configurazione
che bisogna necessariamente aggirare. Per far ciò i wrapper esportano alcune
variabili per forzare i test a ricevere la risposta desiderata. Ciò aiuterà a
prevenire sprechi di risorse nei pacchetti che aggiungono funzioni locali per
aggirare eventuali problemi nel proprio sistema che impedirebbero l'esecuzione
del test. Di volta in volta potrebbe essere necessario aggiungere variabili
aggiuntive a questi file in <path>/usr/share/crossdev/include/site/</path> in
modo da permettere la compilazione di un pacchetto. Per capire quale variabile
bisogna aggiungere, spesso basta eseguire un grep sullo script di configurazione
per individuare la variabile autoconf e aggiungerla all'appropriato file di
destinazione. Ciò diviene ovvio dopo le prime volte che si esegue tale
operazione.
</p>

</body>
</section>
<section>
<title>Disintallazione</title>
<body>

<p>
Se si desidera disinstallare ed eliminare quanto fatto, sarà sufficiente
rimuovere l'alberatura presente nella sysroot, senza intaccare alcun pacchetto
nativo installato. Si legga anche la sezione relativa alla disinstallazione
nella guida relativa alla
<uri link="cross-compiler.xml">cross-compilazione</uri>.
</p>

</body>
</section>
</sections>
