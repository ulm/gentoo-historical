<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/it/desktop/x/x11/porting-modular-x-howto.xml,v 1.3 2010/11/17 21:56:40 scen Exp $ -->

<guide link="/proj/it/desktop/x/x11/porting-modular-x-howto.xml" lang="it">
<title>Guida per il porting a X Modulare</title>

<author title="Autore">
  <mail link="dberkholz@gentoo.org">Donnie Berkholz</mail>
</author>
<author title="Traduzione">
  <mail link="scen@gentoo.org">Davide Cendron</mail>
</author>

<abstract>
Questa guida spiega come effettuare il porting dei pacchetti per utilizzare la
struttura modulare del nuovo X.Org.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2006-01-03</date>

<chapter>
<title>Introduzione</title>
<section>
<title>Introduzione</title>
<body>

<p>
Ci si può (giustamente) meravigliare se il comodo pacchetto xorg-x11 si è
trasformato in almeno 300 pacchetti sepatati . Questo cambiamento non è qualcosa
che Gentoo sta facendo indipendentemente dallo sviluppo di X.Org; gli
sviluppatori di questo software stanno suddividendo tutti i pacchetti in
versioni assestanti, e il gruppo degli sviluppatori di Gentoo sta seguendo la
stessa modalità.
</p>

<p>
Si possono ottenere ulteriori dettagli nella <uri
link="/proj/it/desktop/x/x11/modular-x-howto.xml#doc_chap1_sect1">Guida per la
migrazione a X Modulare</uri>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Controllo delle dipendenze</title>
<section>
<body>

<p>
Lo scopo è di enumerare le dipendenze nel modo più preciso possibile, affinchè
agli utenti non vengano installati software inutili che non useranno mai, tipo
XPrint. Perciò è necessario configurare le dipendenze direttamente alle librerie
e ai file header necessari, invece che direttamente ad un qualche pacchetto
virtual.
</p>

<p>
Inoltre, non si garantisce che gli utenti continueranno ad avere installati dei
sottopacchetti solo perchè si ha un metapacchetto installato; eliminando questa
potenziale fonte di problemi gli sviluppatori risparmieranno un sacco di tempo,
altrimenti sprecato a marcare INVALID i bug.
</p>

<p>
Se viene trovato un pacchetto dipendente da uno qualsiasi dei metapacchetti
esistenti, non si esiterà a stressare il suo manutentore per l'eternità.
</p>

<p>
Il primo passaggio è quello di installare X modulare o trovare qualcuno che ce
l'abbia installato. Ciò può essere fatto in un ambiente chroot -- attualmente
non c'è la necessità che X sia in esecuzione, basta che siano disponibili i suoi
file per il controllo delle dipendenze.
</p>

<pre caption="Ottenere gli script necessari">
$ <i>wget http://dev.gentoo.org/~dberkholz/scripts/linking_libs \
  http://dev.gentoo.org/~dberkholz/scripts/included_headers \
  http://dev.gentoo.org/~betelgeuse/scripts/deputils/checkdeps.rb \
  http://dev.gentoo.org/~betelgeuse/scripts/deputils/pkgutil.rb</i>
</pre>

<impo>
<e>Non</e> usare <c>gentoolkit-0.2.1_pre9</c>, in quanto produce degli output
invalidi. Leeggere <uri>https://bugs.gentoo.org/show_bug.cgi?id=111501</uri>.
</impo>

<p>
Il primo script, <c>linking_libs</c>, cerca nel log della compilazione del
pacchetto tutte le librerie alla quale esso viene linkato, e stampa i pacchetti
a cui le librerie appartengono. Per ottenere un log di compilazione, si può
configurare opportunamente la variabile PORT_LOGDIR in
<path>/etc/make.conf</path> o usare la ridirezione dell'output.
</p>

<pre caption="Eseguire linking_libs per il pacchetto gdm">
$ <i>ls /var/log/portage/*gdm* -l</i>
-rw-r--r-- 1 root portage 556551 2006-01-09 11:41 /var/log/portage/8430-gdm-2.8.0.7.log
-rw-r--r-- 1 root portage    855 2006-01-09 11:42 /var/log/portage/8431-gdm-2.8.0.7.log
$ <i>linking_libs /var/log/portage/8430-gdm-2.8.0.7.log</i>
</pre>

<p>
Il secondo script, <c>included_headers</c>, effettua una ricerca, nei file
sorgenti del pacchetto, delle linee che cominciano con #include, e restituisce
gli include file contenuti in &lt;&gt;. Dal 9 Settembre 2005 la ricerca funziona
anche con gli include del tipo "".
</p>

<p>
Il terzo script, <c>checkdeps.rb</c>, esamina i file installati appartenenti al
pacchetto tramite il comando <c>scanelf</c> incluso in pax-utils. È utile nel
caso di pacchetti binari o pacchetti che, diversamente da altri, nascondono
l'output di compilazione. È uno script Ruby, per cui dipenderà sia da
dev-lang/ruby come da app-misc/pax-utils. Il quarto script, <c>pkgutil.rb</c>, è
una dipendenza di <c>checkdeps.rb</c>.
</p>

<p>
Eseguendo i primi due script si otterrà un discreto elenco di pacchetti da usare
sia in RDEPEND (per le librerie) che in DEPEND (per header e librerie). Se una
libreria compare nella lista per RDEPEND ma non in quella per DEPEND bisogna
stare attenti: può essere una "falsa dipendenza" (una libreria che viene linkata
senza motivi apparenti). Un esempio conosciuto di questo tipo di dipendenza
avviene con libXt: diversi pacchetti cercano gli header di libXt per verificare
l'esistenza di X.
</p>

<p>
Occasionalmente la ricerca relativa degli header in <c>included_headers.sh</c>
troverà l'header sbagliato, perchè ce ne sono molti chiamati allo stesso modo,
di conseguenza verrà restituito un pacchetto errato. Il verificarsi di questo
errore è abbastanza ovvio, per esempio quando degli header per Windows fanno
credere che app-emulation/wine sia una dipendenza.
</p>

<p>
Se si specifica l'opzione <c>-d</c>, occasionalmente una libreria o header verrà
segnalato come "Not found!" (ndt "Non Trovato!"). Ciò significa che l'header
richiesto dal pacchetto è stato rimosso a seguito della sua compilazione, o che
l'header è opzionale e non lo si sta usando. Nel caso della libreria, significa
che essa è stata disinstallata o forse era solamente una libreria statica
compilata internamente che non è mai stata installata.
</p>

<p>
Vale la pena di perdere del tempo a capire quali librerie o header non trovate
necessitano di essere inserite nella lista delle dipendenze, in particolar modo
nel caso degli header siccome non occorre siano installati per effettuare la
scansione.
</p>

<p>
In certi casi, i pacchetti richiedono un qualche tipo di server X di ultima
generazione. Ma se effettivamente non lo richiedono in fase di installazione,
viene incoraggiata la pratica di non inserirlo in RDEPEND. Questo rende
problematica l'installazione di X su macchine headless, dove i programmi
effettivamente sono in esecuzione su un'altra macchina per cui necessitano solo
delle librerie locale e degli header.
</p>

<p>
Ci sono già un certo numero di server X nell'albero di Portage, per cui se si
necessita di un server X, è consigliabile includerli tutti. I server X modulari
sono in xorg-server; c'è un server DirectFB in xdirectfb; kdrive fornisce
piccoli server X; ed ovviamente c'è il vecchio &lt;xorg-x11-7. Si deve
specificare la restrizione ella versione di xorg-x11, per assicurarsi di usare
un server X invece di un metapacchetto. Prossimamente è previsto lo spostamento
di kdriver in xserver. Se si ha necessità di un server X, si prega di contattare
un membro del gruppo di X. Verrà creato un virtual se un sufficiente numero di
pacchetti lo richiederà.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Struttura delle dipendenze</title>
<section>
<body>

<p>
Le dipendenze andranno strutturate nel seguente modo:
</p>

<pre caption="Strutture di RDEPEND/DEPEND">
RDEPEND="|| ( ( x11-libs/libXfoo
		x11-libs/libXbar
		blah? ( x11-libs/libXblah )
		qualunque altra cosa mostrata nello script per le librerie
		)
		virtual/x11
	)

DEPEND="${RDEPEND}
	|| ( (  x11-proto/fooproto
		blah? ( x11-proto/blahproto )
		qualunque cosa elencato in entrambi gli script
		)
		virtual/x11
	)
</pre>

<impo>
Alcuni dei risultati ottenuti dagli script <e>saranno</e> ridondanti. Se la voce
RDEPEND di una libreria ne include un'altra, non occorre inserirle entrambe
nelle dipendenze. se la voce DEPEND di una libreria include un proto, si
<e>deve</e> inserirlo nella lista DEPEND del pacchetto. Tra le librerie che
inseriscono dipendenze da molte altre ci sono <c>libXaw</c>, <c>libXmu</c>,
<c>libXpm</c>, <c>libXcursor</c>, <c>libXt</c>. Per verificarlo basta eseguire
<c>emerge -ep $library | grep lib[SIX]</c>. Inoltre si tenga ben presente che
altri pacchetti come <c>gtk+</c> sono già stati portati alle dipendenze
modulari, per cui inseriranno a loro volta le dipendenze necessarie.
</impo>

<note>
Due USE flag separate includono allo stesso tempo X, ma una non dipende
dall'altra. In questo caso, si potrà o duplicare la sezione delle dipendenze a X
o definirla a parte e includerla come ${X_DEPEND}. Se viene definita a parte, ci
si ricordi di includere le parti specifiche per ogni flag USE.
</note>

<p>
L'obiettivo è di passare in modo predefinito al nuovo X modulare, lasciando
comunque che i pacchetti degli utenti rispettino completamente le dipendenze con
il vecchio, monolitico pacchetto xorg-x11. In futuro verrà completamente rimosso
virtual/x11 per incoraggiare l'enumerazione delle dipendenze opportune.
</p>

<p>
Nella revisione iniziale dell'albero, il gruppo responsabile del porting
sistemerà solamente gli ebuild più recenti disponibili per gli utenti ~arch, e
tutti quelli ancora più nuovi (aventi KEYWORDS=-* o inclusi in package.mask). I
manutentori di pacchetti individuali potranno scegliere di effettuare anch'essi
queste operazioni e lasciare che gli ebuild di cui non è stato effettuato il
porting escano gradualmente dall'albero, ma probabilmente vorranno effettuare il
porting di tutti i loro ebuild in una volta sola. Repoman prossimamente si
bloccherà irreversibilmente con ogni ebuild avente una qualsiasi dipendenza con
virtual/x11.
</p>

<impo>
Questo permette agli utenti del ramo ~arch di usare in modo predefinito X
modulare mentre si direzionano gli utenti non ~arch verso virtual/x11
</impo>

</body>
</section>
</chapter>

<chapter>
<title>Come comportarsi con le flag USE</title>
<section>
<body>

<p>
Molti utenti hanno la USE flag xinerama disattivata. Ma se, mentre si sta
eseguendo <c>included_headers</c>, x11-proto/xineramaproto compare tra le
dipendenze, si deve aggiungerla a DEPEND come voce condizionale alla USE
xinerama, ed aggiungere x11-libs/libXinerama a RDEPEND come voce condizionale
alla USE xinerama.
</p>

<p>
Caleb ha sollevato un'interessante questione, ovvero: come ci si comporta con
tutte le flag USE dei pacchetti che hanno tonnellate di dipendenze opzionali
alle librerie X? In molti casi, è più sensato forzare l'abilitazione o la
disabilitazione delle flag. Inoltre, si può facilitare questa operazione
raggruppando le flag. Ci si assicuri di nominare le flag in base alla loro
funzione, e non in base alla libreria o al pacchetto che utilizzano.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Far pervenire le correzioni nell'albero di Portage</title>
<section>
<body>

<p>
Se si è uno sviluppatore, si deve effettuarne il commit. Altrimenti, inserire un
bug, assegnandolo al manutentore del pacchetto (elencato in metadata.xml),
aggiungerlo come dipendenza nell'apposito bug tracker <uri
link="http://bugs.gentoo.org/112675">#112675</uri>, e allegare una patch
per correggere le dipendenze.
</p>

</body>
</section>
</chapter>

</guide>