<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/es/base/amd64/howtos/fpic.xml,v 1.1 2011/03/07 11:11:02 nimiux Exp $ -->

<sections>

<version>1.2</version>
<date>2006-07-23</date>

<section>
<title>El problema</title>
<body>

<p>
A veces gcc termina con un mensaje de error como el siguiente:
</p>

<pre caption="Un típico mensaje de error de gcc">
.libs/assert.o: relocation R_X86_64_32 against `a local symbol' can not be used
when making a shared object; recompile with -fPIC .libs/assert.o: could not
read symbols: Bad value
</pre>

<p>
Hay muchas causas para este tipo de error. Esta guía las explica todas
y muestra cómo solucionarlos.
</p>

</body>
</section>
<section>
<title>¿Qué es PIC?</title>
<body>

<p>
PIC es la abreviación de <e>Código Independiente de la
Posición</e>. Lo siguiente es un extracto
del <uri
link="http://en.wikipedia.org/wiki/Position-independent_code">artículo
de la Wikipedia</uri> (en inglés) acerca del código independiente de
la posición:
</p>

<p by="Enciclopedia Wikipedia">
"En informática, el código independiente de la posición (PIC) o
ejecutable independiente de la posición (PIE) es código objeto que se
puede ejecutar en diferentes localizaciones de la memoria. Las
librerías compartidas suelen usar PIC, así el código de la misma
librería puede ser mapeado a una localización diferente por cada
aplicación (usando el sistema de memoria virtual) donde no se solapará
con la aplicación o con otras librerías compartidas. También se usaba
PIC en viejos sistemas informáticos que carecían de MMU, así el
sistema operativo mantenía las aplicaciones separadas unas de
otras.<br/><br/> El código independiente de la posición puede ser
copiado a cualquier localización de memoria sin modificarlo y
ejecutarlo, a diferencia del código relocalizable, que necesita un
procesamiento especial por un editor de enlaces o un cargador de
programas para prepararlo para la ejecución en una localización
determinada. Generalmente, se debe escribir o compilar el código de
forma especial para que sea independiente de la
posición. Instrucciones que hacen referencia a direcciones de memoria
específicas, como por ejemplo ramas absolutas, se deben cambiar por
instrucciones equivalentes relativas. La redirección extra puede
causar que el código PIC sea menos eficiente aunque los procesadores
modernos están diseñados para aliviar esto."
</p>

<p>
En ciertas arquitecturas (AMD64 entre ellas), las bibliotecas
compartidas
<e>deben</e> estar habilitadas para PIC.
<!-- [TODO: reasons would be awesome]. -->
</p>

</body>
</section>
<section>
<title>¿Qué son las "relocalizaciones"?</title>
<body>

<p>
Otra vez, de la Wikipedia:
</p>

<p by="Enciclopedia Wikipedia">
"En informática, el término relocalización hace referencia a
reemplazar referencias simbólicas o nombres de librerías por las
direcciones reales de memoria antes de ejecutar un
programa. Normalmente esta tarea la lleva a cabo el enlazador durante
la compilación aunque también la puede hacer un cargador durante la
ejecución. Los compiladores y ensambladores normalmente generan
ejecutables cuya dirección inicial (la más baja) es cero. Antes de la
ejecución del código objeto, se deben ajustar estas direcciones para
que apunten a la dirección correcta de ejecución."
</p>

<p>
Ahora que hemos definido estos términos, podemos echar un vistazo a
los distintos escenarios donde se producen estos errores:
</p>

</body>
</section>
<section>
<title>Caso 1: Compilador roto</title>
<body>

<p>
Se sabe que GCC 3.4 tiene rota la implementación del indicador
<c>-fvisibility-inlines-hidden</c>. El uso de este indicador es por
tanto altamente desaconsejado, los errores reportados se marcan
normalmente como RESOLVED INVALID. En la página
<uri link="http://bugs.gentoo.org/108872">error 108872</uri> encontrará un
ejemplo de un mensaje de error típico causado por este indicador.
</p>

</body>
</section>
<section>
<title>Caso 2: Soporte `-fPIC' roto en pruebas de configure</title>
<body>

<p>
Muchas herramientas <c>configure</c> prueban si el compilador soporta
el indicador <c>-fPIC</c> o no. Para hacerlo, compilan un pequeño
programa con el indicador <c>-fPIC</c> y verifican
el <c>stderr</c>. Si el compilador muestra *cualquier* aviso, asume
que el indicador <c>-fPIC</c> no está soportado por el compilador y
aborta. Por desgracia, si el usuario especifica un indicador
inexistente (p.e. indicadores exclusivos de C++ en las <c>CFLAGS</c> o
indicadores introducidos en versiones recientes de GCC pero no en las
viejas), GCC también muestra un aviso resultando en un error.
</p>

<p>
Para evitar este tipo de errores, los perfiles AMD64 usan un bashrc
para filtrar los indicadores no validos en <c>C[XX]FLAGS</c>.
</p>

<p>
Consulte, por ejemplo,
el <uri link="http://bugs.gentoo.org/122208">error 122208</uri>.
</p>

</body>
</section>
<section>
<title>Caso 3: Ausencia de indicador `-fPIC' en el software a construir</title>
<body>

<p>
Éste es el caso más común. Es un error en el sistema de construcción y
debe ser reparado en el ebuild, preferentemente con un parche enviado
a los desarrolladores. Asumiendo que el mensaje de error sea como
éste:
</p>

<pre caption="Un mensaje de error de muestra">
.libs/assert.o: relocation R_X86_64_32 against `a local symbol' can not be used
when making a shared object; recompile with -fPIC .libs/assert.o: could not
read symbols: Bad value
</pre>

<p>
Esto significa que el archivo <path>assert.o</path> no fue compilado
con el indicador <c>-fPIC</c> como debería. Cuando solucione este tipo
de error, asegúrese de que sólo los objetos que vayan a ser usados en
librerías compartidas sean compilados con el indicador <c>-fPIC</c>.
<!-- [TODO: Again, reasons would be lovely] -->
</p>

<p>
En este caso, añadiendo <c>-fPIC</c> a las <c>C[XX]FLAGS</c> globales
se resuelve este problema, aunque no se aconseja esta práctica ya que
los ejecutables también terminan estando habilitados para PIC.
</p>

<note>
Añadir el indicador <c>-fPIC</c> al enlazador o a las <c>LDFLAGS</c>
no sirve.
</note>

</body>
</section>
<section>
<title>Caso 4: Enlazando dinámicamente contra archivos estáticos</title>
<body>

<p>
A veces un paquete trata de construir librerías compartidas usando
archivos construidos estáticamente que no están habilitados para
PIC. Hay dos razones principales por lo que esto ocurre:
</p>

<p>
A menudo es el resultado de mezclar <c>USE=static</c>
y <c>USE=-static</c>. Si un paquete de librería puede ser construido
estáticamente mediante <c>USE=static</c>, normalmente no se crea un
archivo <path>.so</path> sino que sólo se crea un
archivo <path>.a</path>. Sin embargo, cuando se le pasa a GCC la
opción <c>-l</c> para enlazar una librería (estática o dinámica) si no
encuentra una librería compartida usa el archivo estático. En este
caso, la mejor solución es construir la librería estática usando
también el indicador
<c>-fPIC</c>.
</p>

<warn>
Construya solamente archivos estáticos con <c>-fPIC</c> en AMD64. En
otras arquitecturas esto es innecesario y puede afectar al rendimiento
durante la ejecución.
</warn>

<p>
Vea el <uri link="http://bugs.gentoo.org/88360">error 88360</uri> y
el <uri link="http://bugs.mysql.com/bug.php?id=8796">error mysql
8796</uri> como ejemplos de este error.
</p>

<p>
A veces también se da el caso de que una librería no está pensada para
ser una librería compartida, p.e. porque hace un uso intensivo de
variables globales.  En este caso la solución es convertir la librería
compartida que se va a construir en estática.
</p>

<p>
Vea, por ejemplo, el <uri link="http://bugs.gentoo.org/131460">error
131460</uri>.
</p>

<pre caption="Un mensaje de error de muestra">
gcc   -fPIC -DSHARED_OBJECT -c lex.yy.c
gcc  -shared -o html2txt.so lex.yy.o -lfl
usr/lib/gcc/x86_64-pc-linux-gnu/4.1.1/../../../../x86_64-pc-linux-gnu/bin/ld:
/usr/lib/gcc/x86_64-pc-linux-gnu/4.1.1/../../../../lib64/libfl.a(libyywrap.o):
relocation R_X86_64_32 against `a local symbol' can not be used when making a
shared object; recompile with -fPIC
/usr/lib/gcc/x86_64-pc-linux-gnu/4.1.1/../../../../lib64/libfl.a: could not
read symbols: Bad value
</pre>

</body>
</section>
</sections>
