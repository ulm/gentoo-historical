<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/es/hardened/pax-utils.xml,v 1.1 2011/06/10 15:22:44 nimiux Exp $ -->

<guide lang="es">
<title>Utilidades Pax para Gentoo</title>

<author title="Autor">
  <mail link="swift"/>
</author>
<author title="Editor">
  <mail link="solar"/>
</author>
<author title="Editor">
  <mail link="nightmorph"/>
</author>
<author title="Traductor">
  <mail link="nimiux"/>
</author>

<abstract>
Esta guía ofrece instrucciones acerca de cómo asegurar su sistema usando
el paquete pax-utils para encontrar e identificar binarios problemáticos.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.0 -->
<license/>

<version>2</version>
<date>2010-08-29</date>

<chapter>
<title>¿De qué trata esta guía?</title>
<section>
<title>Introducción</title>
<body>

<p>
La seguridad de un sistema es más que configurar decentemente un
cortafuegos y los servicios del mismo. Los binarios que se ejecutan y
las librerías que se cargan pueden ser también vulnerables a los ataques.
Aunque las vulnerabilidades exactas no se conocen hasta que son
descubiertas, hay algunas formas de evitar que ocurran.
</p>

<p>
Un vector posible de ataque es escribir <e>y</e> ejecutar segmentos en
un programa o librería, permitiendo a usuarios maliciosos ejecutar su
código a través de un aplicación o librería vulnerable.
</p>

<p>
Esta guía le informará acerca de cómo usar el paquete <c>pax-utils</c>
para encontrar e identificar binarios problemáticos. También hablaremos
del uso de <c>pspax</c> (una herramienta para ver las capacidades
específicas de PaX) y de <c>dumpelf</c> (una herramienta que
muestra una estructura C conteniendo una copia funcional de un objeto
dado).
</p>

<p>
Pero antes de empezar con esto, daremos alguna información sobre
<e>objetos</e>. Los usuarios familiarizados con los segmentos y el
enlazado dinámico no aprenderán nada en la siguiente sección y pueden
continuar con la sección <uri link="#scanelf">Extraer información ELF
de los binarios</uri>.
</p>

</body>
</section>
<section>
<title>Objetos ELF</title>
<body>

<p>
Todos los binarios ejecutables de su sistema están estructurados de una
forma determinada, permitiendo al núcleo Linux cargar y ejecutar el
fichero. Realmente esto se aplica a más objetos que los binarios
ejecutables planos: esto también sirve para los objetos compartidos,
hablaremos de esto más adelante.
</p>

<p>
La estructura de estos binarios se define en el estándar ELF. El acrónimo
ELF significa <e>Formato Ejecutable y Enlazable</e>. Si está interesado
en los detalles internos, eche un vistazo a la <uri
link="http://refspecs.linux-foundation.org/LSB_4.0.0/LSB-Core-generic/LSB-Core-generic/elf-generic.html">
Especificación Genérica de ELF</uri> o a la página del manual
<c>elf(5)</c>.
</p>

<p>
Un ejecutable ELF consta de las siguientes partes:
</p>

<ul>
  <li>
    La <e>cabecera ELF</e> contiene información del <e>tipo</e> de
    fichero (si es un ejecutable, una librería compartida,...), la
    arquitectura destino, la localización en el fichero de la Cabecera
    del Programa, Cabecera de Sección y de la Cabecera de las
    Cadenas de Texto así como la localización de la primera
    instrucción ejecutable.
  </li>
  <li>
    La <e>Cabecera del Programa</e> informa al sistema acerca de cómo
    debe crear un proceso desde el fichero binario. Realmente se trata
    de una tabla que contiene entradas para cada segmento del programa.
    Cada entrada contiene el tipo, direcciones (físicas y virtuales),
    tamaño, derechos de acceso,...
  </li>
  <li>
    La <e>Cabecera de Sección</e> es una tabla que contiene una entrada
    para cada sección en el programa. Cada una de estas entradas contiene
    el nombre, tipo, tamaño,... así como la información <e>que</e>
    contiene la sección.
  </li>
  <li>
    Datos, conteniendo las secciones y segmentos mencionados arriba.
  </li>
</ul>

<p>
Una <e>sección</e> es una pequeña unidad que contiene datos específicos:
instrucciones, datos variables, tabla de símbolos, información de
relocalización y demás. Un <e>segmento</e> es una colección de secciones.
Los segmentos son unidades que son transferidas a la memoria.
</p>

</body>
</section>
<section>
<title>Objetos compartidos</title>
<body>

<p>
Antiguamente, las aplicaciones binarias contenían <e>todo</e> lo que
necesitaban para operar de forma correcta. Estos binarios se
denominaban binarios <e>enlazados estáticamente</e>. Éstos consumían
mucho espacio debido a que las aplicaciones utilizaban las mismas
funciones una y otra vez.
</p>

<p>
Un <e>objeto compartido</e> contiene la definición e instrucciones para
esas funciones. Cada aplicación que las necesita puede enlazar
<e>dinámicamente</e> este objeto compartido de forma que puede
beneficiarse de la funcionalidad ya existente.
</p>

<p>
Una aplicación que está enlazada dinámicamente con un objeto compartido
contiene <e>símbolos</e>, referencias a la funcionalidad real. Cuando
se carga esta aplicación en memoria, en primer lugar pedirá la enlazador
dinámico que resuelva todos y cada uno de los símbolos que tiene
definidos. El enlazador dinámico cargará el objeto compartido apropiado
en memoria y resolverá las referencias simbólicas entre ellos.
</p>

</body>
</section>
<section>
<title>Segmentos y secciones</title>
<body>

<p>
El modo en que se revisa el fichero ELF, depende de la vista que
tengamos del mismo: cuando estamos tratando con un fichero binario en
Vista de Ejecución, el fichero ELF contiene segmentos. Cuando el fichero
está en Vista de Enlazado, el fichero contiene secciones. Un segmento
se extiende una o más secciones (continuas).
</p>

</body>
</section>
</chapter>

<chapter id="scanelf">
<title>Extraer información ELF de los binarios</title>
<section>
<title>La aplicación scanelf</title>
<body>

<p>
La aplicación <c>scanelf</c> es parte del paquete
<c>app-misc/pax-utils</c>. Con esta aplicación se puede mostrar
información específica de la estructura del binario ELF. La siguiente
tabla resume las distintas opciones.
</p>

<table>
<tr>
  <th>Opción</th>
  <th>Opción larga</th>
  <th>Descripción</th>
</tr>
<tr>
  <ti>-p</ti>
  <ti>--path</ti>
  <ti>Escanea todos los directorios en el entorno PATH</ti>
</tr>
<tr>
  <ti>-l</ti>
  <ti>--ldpath</ti>
  <ti>Escanea todos los directorios en /etc/ld.so.conf</ti>
</tr>
<tr>
  <ti>-R</ti>
  <ti>--recursive</ti>
  <ti>Escanea los directorios de forma recursiva</ti>
</tr>
<tr>
  <ti>-m</ti>
  <ti>--mount</ti>
  <ti>
    No salirse de los puntos de montaje cuando se escanee de forma
    recursiva
  </ti>
</tr>
<tr>
  <ti>-y</ti>
  <ti>--symlink</ti>
  <ti>No escanear enlaces simbólicos</ti>
</tr>
<tr>
  <ti>-A</ti>
  <ti>--archives</ti>
  <ti>Escanear archivos (ficheros .a)</ti>
</tr>
<tr>
  <ti>-L</ti>
  <ti>--ldcache</ti>
  <ti>Utiliza la información de ld.so.cache (usar con -r/-n)</ti>
</tr>
<tr>
  <ti>-X</ti>
  <ti>--fix</ti>
  <ti>Intentar corregir aquello que vaya 'mal' (usar con -r/-e)</ti>
</tr>
<tr>
  <ti>-z [arg]</ti>
  <ti>--setpax [arg]</ti>
  <ti>Ajustar EI_PAX/PT_PAX_FLAGS a [arg] (usar con -Xx)</ti>
</tr>
<tr>
  <th>Opción</th>
  <th>Opción larga</th>
  <th>Descripción</th>
</tr>
<tr>
  <ti>-x</ti>
  <ti>--pax</ti>
  <ti>Imprimir marcas PaX</ti>
</tr>
<tr>
  <ti>-e</ti>
  <ti>--header</ti>
  <ti>Imprimir marcas GNU_STACK/PT_LOAD</ti>
</tr>
<tr>
  <ti>-t</ti>
  <ti>--textrel</ti>
  <ti>Imprimir información TEXTREL</ti>
</tr>
<tr>
  <ti>-r</ti>
  <ti>--rpath</ti>
  <ti>Imprimir información RPATH</ti>
</tr>
<tr>
  <ti>-n</ti>
  <ti>--needed</ti>
  <ti>Imprimir la información NEEDED</ti>
</tr>
<tr>
  <ti>-i</ti>
  <ti>--interp</ti>
  <ti>Imprimir información INTERP</ti>
</tr>
<tr>
  <ti>-b</ti>
  <ti>--bind</ti>
  <ti>Imprimir información BIND</ti>
</tr>
<tr>
  <ti>-S</ti>
  <ti>--soname</ti>
  <ti>Imprimir información SONAME</ti>
</tr>
<tr>
  <ti>-s [arg]</ti>
  <ti>--symbol [arg]</ti>
  <ti>Buscar el símbolo especificado</ti>
</tr>
<tr>
  <ti>-k [arg]</ti>
  <ti>--section [arg]</ti>
  <ti>Encontrar la sección especificada</ti>
</tr>
<tr>
  <ti>-N [arg]</ti>
  <ti>--lib [arg]</ti>
  <ti>Encontrar la librería especificada</ti>
</tr>
<tr>
  <ti>-g</ti>
  <ti>--gmatch</ti>
  <ti>Usar strncmp para cotejar librerías (usar con -N)</ti>
</tr>
<tr>
  <ti>-T</ti>
  <ti>--textrels</ti>
  <ti>Localizar la causa de TEXTREL</ti>
</tr>
<tr>
  <ti>-E [arg]</ti>
  <ti>--etype [arg]</ti>
  <ti>
    Imprimir solo aquéllos ficheros ELF que coinciden con ET_DYN, ET_EXEC ...
  </ti>
</tr>
<tr>
  <ti>-M [arg]</ti>
  <ti>--bits [arg]</ti>
  <ti>
    Imprimir solo los ficheros que coinciden con los bits numéricos indicados
  </ti>
</tr>
<tr>
  <ti>-a</ti>
  <ti>--all</ti>
  <ti>Imprime toda la información escaneada (-x -e -t -r -b)</ti>
</tr>
<tr>
  <th>Opción</th>
  <th>Opción larga</th>
  <th>Descripción</th>
</tr>
<tr>
  <ti>-q</ti>
  <ti>--quiet</ti>
  <ti>Solo muestra aquello que va 'mal'</ti>
</tr>
<tr>
  <ti>-v</ti>
  <ti>--verbose</ti>
  <ti>Salida ampliada (se puede especificar más de una vez)</ti>
</tr>
<tr>
  <ti>-F [arg]</ti>
  <ti>--format [arg]</ti>
  <ti>Usar un formato específico para la salida</ti>
</tr>
<tr>
  <ti>-f [arg]</ti>
  <ti>--from [arg]</ti>
  <ti>Leer la entrada desde un fichero</ti>
</tr>
<tr>
  <ti>-o [arg]</ti>
  <ti>--file [arg]</ti>
  <ti>Escribir la salida a un fichero</ti>
</tr>
<tr>
  <ti>-B</ti>
  <ti>--nobanner</ti>
  <ti>No mostrar la cabecera</ti>
</tr>
<tr>
  <ti>-h</ti>
  <ti>--help</ti>
  <ti>Imprimir esta ayuda y salir</ti>
</tr>
<tr>
  <ti>-V</ti>
  <ti>--version</ti>
  <ti>Imprimir la versión y salir</ti>
</tr>
</table>

<p>
Los especificadores de formato para la opción <c>-F</c> se muestran en la
siguiente tabla. Anteponga un carácter <c>%</c> (salida ampliada) o
<c>#</c> (salida silenciosa) a cada especificador a su antojo.
</p>

<table>
<tr>
  <th>Especificador</th>
  <th>Nombre completo</th>
  <th>Especificador</th>
  <th>Nombre completo</th>
</tr>
<tr>
  <ti>F</ti>
  <ti>Nombre de fichero</ti>
  <ti>x</ti>
  <ti>Ajustes PaX</ti>
</tr>
<tr>
  <ti>e</ti>
  <ti>STACK/RELRO</ti>
  <ti>t</ti>
  <ti>TEXTREL</ti>
</tr>
<tr>
  <ti>r</ti>
  <ti>RPATH</ti>
  <ti>n</ti>
  <ti>NEEDED</ti>
</tr>
<tr>
  <ti>i</ti>
  <ti>INTERP</ti>
  <ti>b</ti>
  <ti>BIND</ti>
</tr>
<tr>
  <ti>s</ti>
  <ti>Símbolo</ti>
  <ti>N</ti>
  <ti>Librería</ti>
</tr>
<tr>
  <ti>o</ti>
  <ti>Tipo</ti>
  <ti>p</ti>
  <ti>Nombre del fichero</ti>
</tr>
<tr>
  <ti>f</ti>
  <ti>Base del nombre del fichero</ti>
  <ti>k</ti>
  <ti>Sección</ti>
</tr>
<tr>
  <ti>a</ti>
  <ti>ARCH/e_machine</ti>
  <ti>&nbsp;</ti>
  <ti>&nbsp;</ti>
</tr>
</table>

</body>
</section>
<section>
<title>Usar scanelf para relocalizaciones de texto</title>
<body>

<p>
Como ejemplo, usaremos <c>scanelf</c> para encontrar binarios que
contienen relocalizaciones de texto.
</p>

<p>
Una relocalización es una operación que sobreescribe una dirección en un
segmento que se ha cargado. Esta sobreescritura de la dirección puede
ocurrir cuando un segmento referencia a un objeto compartido y ese objeto
compartido está cargado en memoria. En este caso, las referencias se
substituyen con los valores reales de la dirección. Pueden ocurrir
eventos similares dentro del propio objeto compartido.
</p>

<p>
Una relocalización de texto es una relocalización en el segmento de texto.
Ya que estos segmentos contienen código ejecutable, los administradores
del sistema puede que deseen que no se pueda escribir en estos segmentos.
Esto es perfectamente posible, sin embargo, ya que estas relocalizaciones
de texto realmente escriben el segmento de texto, esto no es siempre
viable.
</p>

<p>
Si quiere eliminar las relocalizaciones de texto, necesitará asegurarse
de que la aplicación y el objeto compartido se han construido con
<e>Código Independiente de la Posición</e> (PIC), haciendo obsoletas las
referencias. Ésto no solo incrementa la seguridad, también incrementa
el rendimiento para el caso de objetos compartidos (para permitir la
escritura en el segmento de texto, se requiere reservar un espacio de
intercambio y una copia privada del objeto compartido para cada aplicación
que lo utilice).
</p>

<p>
El siguiente ejemplo busca binarios ELF que contengan una relocalización
de texto en sus rutas de librería de forma recursiva, y siempre en el
sistema de ficheros montado, ignorando los enlaces simbólicos.
</p>

<pre caption="Escanea el sistema para buscar binarios con relocalizaciones de texto">
# <i>scanelf -lqtmyR</i>
</pre>

<p>
Si quiere escanear su sistema completo para buscar <e>cualquier</e> fichero
que contenga relocalizaciones de texto:
</p>

<pre caption="Escanea el sistema completo para buscar ficheros con relocalizaciones de texto">
# <i>scanelf -qtmyR /</i>
</pre>

</body>
</section>
<section>
<title>Usar scanelf para cabeceras específicas</title>
<body>

<p>
La utilidad scanelf se puede usar para identificar rápidamente ficheros que
contienen una cabecera de sección dada usando la opción -k .section.
</p>

<p>
En este ejemplo buscamos recursivamente todos los ficheros en
/usr/lib/debug que han sido recortados usando un modificador de formato
con el modo silencioso habilitado. Un fichero elf recortado no posee
la entrada .symtab, por lo que usamos el carácter '!' para invertir
la lógica.
</p>

<pre caption="Escanea en busca de ejecutables recortados o no">
# <i>scanelf -k '!.symtab' /usr/lib/debug -Rq -F%F#k</i>
</pre>

</body>
</section>
<section>
<title>Usando scanelf para buscar marcas de segmento específicas</title>
<body>

<p>
Cada segmento tiene definiciones específicas en la cabecera del programa
binario. Una de estas definiciones es el tipo de segmento. Algunos valores
interesantes son: PT_LOAD (el segmento debe cargarse en memoria desde el
fichero), PT_DYNAMIC (el segmento contiene información de enlace dinámico),
PT_INTERP (el segmento contiene el nombre del intérprete de programa),
PT_GNU_STACK (una extensión GNU para el formato ELF, usado por algunos
mecanismos de protección de pila), y PT_PAX_FLAGS (una extensión PaX para
el formato ELF, usado por el proyecto
<uri link="http://pax.grsecurity.net/">PaX</uri> pensando en la seguridad.
</p>

<p>
Si queremos escanear todos los ejecutables en el directorio de trabajo
actual, en el entorno PATH y en las rutas de las librerías y queremos
ser informados de aquéllos que tengan una marca de escritura y ejecución
PT_LOAD o PT_GNU_STACK, puede usar el siguiente comando:
</p>

<pre caption="Escanea en busca de definiciones de escritura/ejecución PT_LOAD y PT_GNU_STACK">
# <i>scanelf -lpqe .</i>
</pre>

</body>
</section>
<section>
<title>Usar el manejador de modificación de formato de scanelf</title>
<body>

<p>
Una característica útil de la utilidad <c>scanelf</c> es el manejador
de modificación de formato. Con esta opción puede controlar la salida
de <c>scanelf</c>, simplificando por tanto la salida mediante el uso de
guiones.
</p>

<p>
Como ejemplo, usaremos <c>scanelf</c> para mostrar los nombres que
contienen relocalizaciones de texto:
</p>

<pre caption="Ejemplo del manejador de modificación de formato de scanelf">
# <i>scanelf -l -p -R -q -F "%F #t"</i>
</pre>

</body>
</section>
</chapter>

<chapter id="pspax">
<title>Listando definiciones y capacidades de PaX</title>
<section>
<title>Acerca de PaX</title>
<body>

<p>
<uri link="http://pax.grsecurity.net">PaX</uri> es un proyecto que a su
vez está alojado en el proyecto <uri link="http://www.grsecurity.net">
grsecurity</uri>. Citando la <uri
link="http://pax.grsecurity.net/docs/pax.txt">documentación PaX</uri>, su
principal objetivo es "investigar los distintos mecanismos de defensa
contra la explotación de fallos en el software que dan a un atacante
acceso de lectura y escritura al espacio de direcciones del proceso
atacado. Esta clase de fallos contiene, entre otros, varias formas de
desbordamiento de buffer (basados tanto en pila como en heap), fallos
por cadenas de usuario especialmente formateadas, etc.".
</p>

<p>
Para beneficiarse de estos mecanismos de defensa, necesitará correr un
núcleo Linux en el que se apliquen los parches de código de la última
versión de PaX. El proyecto <uri
link="http://hardened.gentoo.org">Gentoo Hardened</uri> ofrece soporte
de PaX y su proyecto padre: grsecurity. El paquete del núcleo con estos
cambios es <c>sys-kernel/hardened-sources</c>.
</p>

<p>
El proyecto Gentoo/Hardened incluye la <uri
link="/proj/es/hardened/pax-quickstart.xml">Guía rápida de comienzo con
PaX</uri> para su lectura.
</p>

</body>
</section>
<section>
<title>Ajustes y capacidades</title>
<body>

<p>
Si su cadena de herramientas lo soporta, sus binarios pueden tener
ajustes PaX adicionales en sus cabeceras de programa. Se permiten
los siguientes ajustes.
</p>

<table>
<tr>
  <th>Ajuste</th>
  <th>Nombre</th>
  <th>Descripción</th>
</tr>
<tr>
  <ti>P</ti>
  <ti>PAGEEXEC</ti>
  <ti>
    Rechaza la ejecución de código, en páginas en las que se puede
    escribir, basándose en el bit NX (o el bit NX emulado).
  </ti>
</tr>
<tr>
  <ti>S</ti>
  <ti>SEGMEXEC</ti>
  <ti>
    Rechaza la ejecución de código, en páginas en las que se puede
    escribir, basándose en la lógica de segmentación de la arquitectura
    IA-32.
  </ti>
</tr>
<tr>
  <ti>E</ti>
  <ti>EMUTRAMP</ti>
  <ti>
    Permite la ejecución de secuencias de ejecución de código conocidas,
    en páginas en las que se puede escribir, que no deberían causar ningún
    daño.
  </ti>
</tr>
<tr>
  <ti>M</ti>
  <ti>MPROTECT</ti>
  <ti>
    Evita la creación de nuevo código ejecutable en el espacio de
    direcciones del proceso.
  </ti>
</tr>
<tr>
  <ti>R</ti>
  <ti>RANDMMAP</ti>
  <ti>
    Aleatoriza la base de la pila para evitar que algunos ataques de
    desbordamiento de pila tengan éxito.
  </ti>
</tr>
<tr>
  <ti>X</ti>
  <ti>RANDEXEC</ti>
  <ti>
    Aleatoriza las direcciones a las que la aplicación mapea para evitar
    que algunos ataques sean practicables.
  </ti>
</tr>
</table>

<p>
El núcleo por defecto de Linux también soporta algunas capacidades,
agrupadas en las llamadas <e>Capacidades POSIX.1e</e>. Puede encontrar
un listado de estas capacidades en nuestro documento <uri
link="/proj/es/hardened/capabilities.xml">Capacidades de POSIX</uri>.
</p>

</body>
</section>
<section>
<title>Usar pspax</title>
<body>

<p>
La aplicación <c>pspax</c>, parte del paquete <c>pax-utils</c>, muestra las
capacidades en tiempo de ejecución de todos los programas para los que se
tiene permiso. Estos atributos también se muestran en los núcleos Linux
con soporte adicional para atributos extendidos (como SELinux).
</p>

<p>
Cuando se ejecuta, <c>pspax</c> muestra la siguiente información:
</p>

<table>
<tr>
  <th>Columna</th>
  <th>Descripción</th>
</tr>
<tr>
  <ti>USER</ti>
  <ti>Propietario del proceso</ti>
</tr>
<tr>
  <ti>PID</ti>
  <ti>Identificador del proceso</ti>
</tr>
<tr>
  <ti>PAX</ti>
  <ti>Ajustes PaX en tiempo de ejecución (si se puede aplicar)</ti>
</tr>
<tr>
  <ti>MAPS</ti>
  <ti>Marcas de escritura/ejecución para el mapa de proceso</ti>
</tr>
<tr>
  <ti>ELF_TYPE</ti>
  <ti>Tipo de ejecutable del proceso: ET_DYN o ET_EXEC</ti>
</tr>
<tr>
  <ti>NAME</ti>
  <ti>Nombre del proceso</ti>
</tr>
<tr>
  <ti>CAPS</ti>
  <ti>Capacidades POSIX.1e (ver nota)</ti>
</tr>
<tr>
  <ti>ATTR</ti>
  <ti>Atributos extendidos (si se puede aplicar)</ti>
</tr>
</table>

<note>
La aplicación <c>pspax</c> únicamente muestra estas capacidades cuando
está enlazada con la librería de capacidades externa. Esto requiere que
se construya <c>pax-utils</c> con -DWANT_SYSCAP.
</note>

<p>
Por defecto, <c>pspax</c> no muestra ningún proceso del núcleo. Si quiere
que estos procesos sean tratados también, deberá usar la opción <c>-a</c>.
</p>

</body>
</section>
</chapter>

<chapter id="dumpelf">
<title>Programar con ficheros ELF</title>
<section>
<title>La utilidad dumpelf</title>
<body>

<p>
Con la utilidad <c>dumpelf</c> puede convertir un fichero ELF en un
fichero de código C legible por los humanos que define una estructura
con la misma imagen que el fichero ELF original.
</p>

<pre caption="Ejemplo de dumpelf">
$ <i>dumpelf /bin/hostname</i>
#include &lt;elf.h&gt;

<comment>/*
 * ELF dump of '/bin/hostname'
 *     10276 (0x2824) bytes
 */</comment>

struct {
        Elf32_Ehdr ehdr;
        Elf32_Phdr phdrs[8];
        Elf32_Shdr shdrs[26];
} dumpedelf_0 = {

.ehdr = {
<comment>(... La salida ha sido recortada ...)</comment>
</pre>

</body>
</section>
</chapter>
</guide>
