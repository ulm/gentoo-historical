<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/es/hardened/selinux/hb-using-commands.xml,v 1.3 2011/07/17 12:40:04 nimiux Exp $ -->

<sections>
<version>5</version>
<date>2011-07-13</date>

<section>
<title>Información sobre las órdenes en SELinux</title>
<subsection>
<title>Introducción</title>
<body>

<p>
A estas alturas, debería tener un sistema con SELinux habilitado (pero
corriendo en modo permisivo (permissive) de modo que no obliga a cumplir
las reglas de la directriz). Por lo que antes de introducirle en el mundo
de SELinux y describir la forma de añadir más reglas sin perder la
funcionalidad cuando cambie al modo forzado (enforcing), echaremos un
vistazo rápido a algunas de las órdenes relacionadas con SELinux.
</p>

<p>
Comenzaremos con las órdenes de estado con las cuales puede obtener
información global sobre el estado de SELinux (si está corriendo
en modo forzado o no, conocer las versiones, etc).
</p>

</body>
</subsection>
<subsection>
<title>Obteniendo el estado de SELinux</title>
<body>

<p>
La primera orden de la que hablaremos es <c>sestatus</c>.
</p>

<pre caption="Ejecutar sestatus">
~# <i>sestatus</i>
SELinux status:                 enabled
SELinuxfs mount:                /selinux
Current mode:                   permissive
Mode from config file:          permissive
Policy version:                 24
Policy from config file:        strict
</pre>

<p>
La salida de esta orden indica que SELinux está habilitado y está
trabajando actualmente en modo permisivo (<e>permissive</e>). También
nos indica que el sistema está configurado para correr en modo
estricto (<e>strict</e>) por lo que no existe el dominio unconfined_t.
</p>

</body>
</subsection>
<subsection>
<title>Obteniendo información de los objetos de SELinux</title>
<body>

<p>
En la siguiente tabla se muestra la orden <c>seinfo</c>. Esta orden
le permite consultar la directriz en ejecución definida para todos los
objetos (tipos, roles, atributos, usuarios, booleanos,...).
</p>

<p>
Algunos usos comunes son los siguientes:
</p>

<ul>
  <li>
    Comprobar si un dominio en particular se ha definido en su sistema
    (para el caso en que se esté preguntando si necesita cargar algún
    módulo adicional de directriz de SELinux o no).
  </li>
  <li>
    Comprobar en qué dominios en particular puede estar un rol (para el
    caso en que se esté preguntando si las directrices SELinux permiten
    a sus usuarios normales cambiar a otro dominio).
  </li>
  <li>
    Comprobar qué atributos están asignados a un dominio específico (o
    viceversa, qué dominios tienen activado un atributo en particular) ya
    que algunas reglas de directriz trabajan sobre atributos en lugar de
    dominios.
  </li>
</ul>

<p>
Como ejemplo, consultaremos si se conoce el dominio crontab_t, si el rol
user_r puede usar el dominio contab_t y finalmente qué dominios tienen
el atributo cron_spool_type activado.
</p>

<pre caption="Usar seinfo">
~# <i>seinfo -tcrontab_t</i>
  crontab_t
~# <i>seinfo -ruser_r -x</i>
  user_r
    Dominated Roles:
      user_r
    Types:
      [...]
      crontab_t
      [...]
~# <i>seinfo -acron_spool_type -x</i>
  cron_spool_type
    user_cron_spool_t
    system_cron_spool_t
</pre>

</body>
</subsection>
<subsection>
<title>Consultando las reglas de directriz de SELinux</title>
<body>

<p>
Una orden que se usa menudo es <c>sesearch</c>. Esta orden le permite
consultar las reglas usadas en la directriz actual y es de gran ayuda
cuando queremos averiguar si algo está permitido (o porqué no
está permitido).
</p>

<p>
La orden <c>sesearch</c> se usa frecuentemente con un dominio origen
(<c>-s</c>), dominio destino (<c>-t</c>) o ambos, la clase sobre la que
quiere hacer la consulta permite reglas para: fichero, directorio, zócalo
(socket), proceso,... y el privilegio que quiere consultar: lectura,
escritura, transición, ejecución...
</p>

<p>
Por ejemplo, para averiguar qué dominios pueden escribir en los ficheros
que tienen el dominio shadow_t:
</p>

<pre caption="Consultando las reglas de concesión con sesearch">
~# <i>sesearch -t shadow_t -c file -p write -A</i>
Found 8 semantic av rules:
  [...]
  allow portage_t shadow_t : file { ioctl read write ... };
  allow useradd_t shadow_t : file { ioctl read write ... };
  ...
</pre>

<p>
Observará que en algunas ocasiones los resultados están basados en los
atributos en lugar de los dominios:
</p>

<pre caption="Regla de permisión basada en atributo">
  allow portage_t file_type : file { ioctl read write ... };
</pre>

<p>
En este caso, al dominio origen (portage_t) se le permite escribir en
los ficheros cuyo dominio tengan el atributo file_type activado. Si ya le
va cogiendo el tacto a todo esto, se preguntará si la regla de arriba
no es un fallo flagrante en la seguridad ya que todos los dominios de los
ficheros tienen el atributo file_type activado. Sí y no, si echamos un
vistazo a los dominios que tienen privilegios para escribir en los
dominios file_type domains, se dará cuenta de que el único es portage:
</p>

<pre caption="Consultando los dominios que tienen privilegios de escritura en fichero en dominios file_type">
~# <i>sesearch -t file_type -c file -p write -A -d</i>
Found 1 semantic av rules:
  allow portage_t file_type : file { ioctl read write ... };
</pre>

<p>
Observe que tenemos una orden sin la opción <c>-d</c> y otra que usa
esta opción. Cuando se indica <c>-d</c>, la búsqueda será realizada de
forma exacta sin resolver los atributos. Cuando no se indica <c>-d</c>,
entonces se resolverá el atributo. En el último ejemplo, el hecho de no
indicar <c>-d</c> podría resultar en cientos de reglas de permisión: para
cada dominio que tenga file_type activado, la búsqueda intenta encontrar
reglas que permiten acceso de escritura al fichero en ese dominio en
particular.
</p>

<p>
Otra interesante funcionalidad de la orden <c>sesearch</c> es mostrarle
las reglas que se aplican dependiendo del estado de un booleano. Si quiere
consultar un booleano en particular, utilice <c>-b</c>. Si quiere ver la
lógica que usa la directriz, utilice, <c>-C</c> (y, sí, ambas opciones
se pueden combinar).
</p>

<p>
A modo de ejemplo, comprobaremos qué permitimos (o denegamos) cuando
el booleano <c>global_ssp</c> está habilitado.
</p>

<pre caption="Comprobando la directriz respecto al booleano global_ssp">
~# <i>sesearch -b global_ssp -A -C -d</i>
Found 2 semantic av rules:
ET allow domain device_t : dir { getattr search open } ; [ global_ssp ]
ET allow domain urandom_device_t : chr_file { ioctl read getattr lock open } ; [ global_ssp ]
</pre>

<p>
El prefijo que se muestra al comienzo de las líneas consiste en dos letras,
las cuales están relacionadas con dos definiciones importantes:
</p>

<ul>
  <li>
    ¿Está la regla habilitada (<b>E</b>nabled) o deshabilitada
    ( <b>D</b>isabled)?
  </li>
  <li>
    ¿Necesita el booleano definirse a cierto (<b>T</b>rue) o falso
    (or <b>F</b>alse para habilitar la regla?
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>Obteniendo información del contexto de seguridad</title>
<body>

<p>
Mientras esté realizando labores de administración y especialmente cuando
esté comprobando si se está produciendo una denegación SELinux, es
importante averiguar qué contexto de seguridad se está empleando para un
recurso en particular. Afortunadamente, si se instala adecuadamente,
Gentoo Hardened ha modificado algunas herramientas para obtener esta
información usando sus herramientas estándar.
</p>

<p>
Para consultar el contexto de seguridad de un fichero, utilice <c>ls -Z</c>:
</p>

<pre caption="Obtener el contexto de seguridad de un fichero">
~$ <i>ls -Z /etc/make.conf</i>
system_u:object_r:portage_conf_t /etc/make.conf
</pre>

<p>
Para obtener el contexto de seguridad de un proceso, utilice <c>ps -Z</c>:
</p>

<pre caption="Obtener el contexto de seguridad de un proceso">
~# <i>ps -Z $(pidof init)</i>
LABEL                             PID TTY      STAT   TIME COMMAND
system_u:system_r:init_t            1 ?        Ss     0:00 init [3]
</pre>

<p>
Para obtener el contexto de seguridad del usuario actual, utilice
<c>id -Z</c>:
</p>

<pre caption="Obtener el contexto de seguridad de un usuario">
~$ <i>id -Z</i>
staff_u:staff_r:staff_t
</pre>

</body>
</subsection>
</section>
<section>
<title>Gestionar SELinux</title>
<subsection>
<title>Introducción</title>
<body>

<p>
La gestión de los objetos de SELinux (booleanos, usuarios, puertos,
contextos ...) se realiza en la mayoría de las ocasiones usando
<c>semanage</c>. Debido a que esta aplicación ofrece la interfaz para
varias configuraciones de SELinux, le dedicaremos una sección completa,
aunque cubriremos también las órdenes que ofrecen una funcionalidad
parecida (y que en algunas ocasiones son más fáciles de recordar).
</p>

</body>
</subsection>
<subsection>
<title>Booleanos</title>
<body>

<p>
Hemos hablado de los booleanos de SELinux anteriormente en este libro
así como de las órdenes <c>getsebool</c> and <c>setsebool</c>. Con
<c>semanage</c> puede también gestionar los booleanos y, como valor
añadido, al listar los booleanos también se mostrará su descripción
(aunque queda aún trabajo por realizar en este área).
</p>

<pre caption="Listar los booleanos de SELinux disponibles">
~# <i>semanage boolean -l</i>
SELinux boolean                 Description

allow_ptrace            -> off  allow_ptrace
rsync_export_all_ro     -> off  rsync_export_all_ro
</pre>

<note>
Como habrá notado, la mayor parte de las descripciones consisten
únicamente en el nombre del booleano, sin embargo encontrará booleano
con una mejor descripción cuando se haya familiarizado y/o instale más
módulos de directriz de SELinux.
</note>

<p>
Puede definir el valor de un booleano con <c>setsebool</c> y
<c>semanage</c>:
</p>

<pre caption="Definir el valor de un booleano de SELinux">
~# <i>semanage boolean -m --on -F user_dmesg</i>
</pre>

</body>
</subsection>
<subsection id="users">
<title>Usuarios y cuentas de SELinux</title>
<body>

<p>
Los usuarios y cuentas de SELinux son diferentes de las de Unix. Las
cuentas de SELinux le permiten asociar una cuenta Unix a un usuario
SELinux:
</p>

<pre caption="Listar las cuentas de SELinux">
~# <i>semanage login -l</i>
Login Name          SELinux User

__default__         user_u
root                root
swift               staff_u
system_u            system_u
</pre>

<p>
El comportamiento por defecto es que los usuarios ingresan en el sistema
como el usuario <e>user_u</e> de SELinux. Este usuario de SELinux es un
usuario no administrador: no tiene privilegios específicos y se debe
usar para para cada cuenta que nunca requiera elevar sus privilegios
(por lo que no tendrá privilegios <c>su</c> o <c>sudo</c> para nada).
</p>

<p>
La cuenta que use para administrar su sistema debe ser mapeada al
usuario SELinux <c>staff_u</c> (o su propio usuario con los roles
apropiados). Esto se puede conseguir de la siguiente forma (ejemplo
con la cuenta Unix <e>ana</e>):
</p>

<pre caption="Permitiendo que 'ana' ingrese en el sistema como 'staff_u'">
~# <i>semanage login -a -s staff_u ana</i>
</pre>

<impo>
Asegúrese de que sea cual sea la cuenta que utilice para administrar
su sistema, está mapeada al usuario <c>staff_u</c> o tiene la capacidad
de cambiar al rol <c>sysadm_r</c>. Portage únicamente trabaja desde el
rol <c>sysadm_r</c>.
</impo>

<p>
Como se ha mencionado, los usuarios SELinux están configurados para que
puedean unirse a uno o más roles. Para listar los roles disponibles, puede
usar <c>semanage user -l</c>:

</p>

<pre caption="Listar las asociaciones de cuentas a roles">
~# <i>semanage user -l</i>
SELinux User        SELinux Roles

root                staff_r sysadm_r
staff_u             staff_r sysadm_r
[...]
</pre>

</body>
</subsection>
<subsection>
<title>Gestionando puertos</title>
<body>

<p>
Incluso los puertos (como el puerto 22 para SSH) están 'protegidos' por
SELinux. Para echar un vistazo rápido de qué dominios están asignados
a qué puertos (o rangos de puertos) utilice <c>semanage port -l</c>.
</p>

<pre caption="Listar los puestos gestionados por SELinux">
~# <i>semanage port -l | grep '22$'</i>
ssh_port_t             tcp     22
</pre>

</body>
</subsection>
</section>

<section>
<title>Usar SELinux</title>
<subsection>
<title>Introducción</title>
<body>

<p>
Hasta ahora hemos visto cómo obtener información relacionada con SELinux
así como la gestión de los ajustes de SELinux. Sin embargo los usuarios
de un sistema reforzado con SELinux necesitarán también saber algunas
cosas acerca de cómo trabajar con SELinux, incluyendo (pero no
limitándose a) roles y transiciones entre roles.
</p>

</body>
</subsection>
<subsection>
<title>Cambiando de roles</title>
<body>

<p>
Como una forma más del reforzamiento de un sistema de control de acceso,
SELinux permite que algunos roles en particular estén en un conjunto de
dominios. Si está utilizando un rol que no está permitido en un dominio
en particular, no podrá usar ese dominio y se le denegará el acceso a las
acciones asignadas a ese dominio.
</p>

<p>
Si sus usuarios estándar son todos usuarios user_u de SELinux
(soportándose únicamente el rol user_r), entonces estos usuarios nunca
necesitarán cambiar a otro rol (aunque tampoco se les permitiría). Sin
embargo, se tiene que dejar bien claro como cambian entre roles los
usuarios que son staff_u (u otros usuarios que tienen múltiples roles).
Hemos visto cómo asociar estos usuarios al usuario correcto SELinux
(mire <uri link="#users">Usuarios y cuentas de SELinux</uri>).
</p>

<p>
La orden que permite cambiar entre roles es <c>newrole</c>. Su uso es
bastante lógico.
</p>

<pre caption="Usar newrole">
~$ <i>newrole -r sysadm_r</i>
Password: <comment>(Introduzca la contraseña del usuario, ¡no la de root!)</comment>
</pre>

<p>
Cuando se realiza una transición de rol, SELinux pedirá que el usuario
vuelva a autenticarse usando su contraseña. Si ha ingresado en el
sistema como un usuario normal y utiliza <c>su</c> o <c>sudo</c> para
convertirse en root, entonces <c>newrole</c> le obligará a introducir
la contraseña de ese usuario.
</p>

</body>
</subsection>
</section>
</sections>
