<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/es/hardened/selinux/hb-using-policies.xml,v 1.3 2012/05/02 21:18:04 nimiux Exp $ -->

<sections>
<version>4</version>
<date>2012-04-29</date>

<section>
<title>Lenguaje de la directriz SELinux</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Por defecto, Gentoo ofrece una directriz genérica aunque altamente
controlada que es considerada como una buena directriz de comienzo
para todos los usuarios. Sin embargo, el propósito detrás de los
sistemas de Control de Acceso Obligatorio es que el administrador
de seguridad tome el control. Por lo tanto, un manual sobre SELinux
sin información acerca de como escribir directrices no estaría
completo.
</p>

<p>
En este capítulo, hablaremos un poco sobre el lenguaje que hay
detrás de las directrices SELinux y daremos algunos consejos sobre
cómo crear sus propias directrices, roles, etc.
</p>

</body>
</subsection>
<subsection>
<title>Construyendo un módulo SELinux</title>
<body>

<p>
En primer lugar, antes de que descubramos el arte sobre la escritura
de directrices SELinux, crearemos un pequeño módulo SELinux con una
regla que podamos probar, construiremos el módulo y veremos si las
cosas funcionan. A pesar de que estos pasos son muy fáciles de
realizar, son muy importantes. Modificar la directriz SELInux tal y
como la ofrece Gentoo se lleva a cabo de mejor forma a través de las
directrices de módulo adicionales. Solo cuando la directriz principal
(la directriz base) no es de su agrado, deberá plantearse el uso
de una directriz completamente distinta.
</p>

<p>
Comencemos con un esqueleto para un módulo de directriz que llamaremos
<e>testmod</e>. Utilice nombres simples para los módulos ya que la
infraestructura de construcción es muy sensible a nombres especiales.
Utilice únicamente letras de la a a la z y números, y nunca comience
el nombre de un módulo con un número.
</p>

<pre caption="Esqueleto de módulo de directriz">
policy_module(testmod, 1.0.0)
</pre>

<p>
Sí, eso es todo. Pero, como puede observar, está prácticamente vacío.
Añadamos una regla que permita a un usuario normal (en el dominio
user_t) leer ficheros ebuild (de tipo portage_ebuild_t).
</p>

<pre caption="Módulo de directriz testmod">
policy_module(testmod, 1.0.0)

require {
  type user_t;
  type portage_ebuild_t;
  class file { read open getattr };
  class dir { read search open getattr };
}

allow user_t portage_ebuild_t:file { read open getattr };
allow user_t portage_ebuild_t:dir { read search open getattr };
</pre>

<p>
Como puede ver, algo tan simple como permitir a un usuario leer
ficheros requiere unos cuantos privilegios. Los privilegios de
directorio son necesarios para permitir a un usuario navegar
por la estructura de árbol de Portage, mientras que  los privilegios
de fichero son necesarios para que el usuario puede acceder y abrir
los ebuilds. Guarde este fichero con el nombre <path>testmod.te</path>.
</p>

<p>
Para construir la directriz y convertirla en un módulo binario que
se pueda cargar en el almacén de directriz SELinux, podemos utilizar
el fichero <path>Makefile</path> disponible en
<path>/usr/share/selinux/strict/include</path> (sustituya strict por
el tipo de directriz SELinux que esté utilizando).
</p>

<pre caption="Construir un módulo de directriz binario">
$ <i>make -f /usr/share/selinux/struct/include/Makefile testmod.pp</i>
</pre>

<p>
El nombre de fichero (<path>testmod.pp</path>) es el nombre para
el fichero binario SELinux destino. El <path>Makefile</path>
buscará automáticamente el fichero <path>testmod.te</path> que tiene
en su directorio de trabajo.
</p>

<p>
Deberá obtener como resultado un fichero llamado
<path>testmod.pp</path>. Este fichero de módulo se puede ahora
cargar en el almacén de directriz SELinux de la siguiente forma:
</p>

<pre caption="Cargar un módulo binario">
# <i>semodule -i /path/to/testmod.pp</i>
</pre>

<p>
¡Enhorabuena! Acaba de construir su primer módulo de directriz SELinux.
Si quiere deshabilitarlo, elimínelo usando <c>semodule -r testmod</c>.
</p>

<p>
Este método de construcción de una directriz (utilizando el
<path>Makefile</path> y <c>semodule</c>) es algo que necesitará hacer
cada vez que actualice la directriz SELinux en su sistema. El contenido
de la directriz, sin embargo, cambia como veremos en el resto de este
documento.
</p>

</body>
</subsection>
<subsection>
<title>Obtener las interfaces de directriz SELinux</title>
<body>

<p>
Para hacer más rápido el desarrollo de directrices, la directriz
SELinux basada en la directriz de referencia utiliza interfaces
para acceder a los privilegios dentro de un módulo. Si ha
construido <path>selinux-base-policy</path> con <c>USE="doc"</c>
entonces esta información está disponible en
<path>/usr/share/doc/selinux-base-policy-&lt;versión&gt;/html</path>.
Se recomienda tener esta información a mano ya que la mayoría
de los desarrollos o actualizaciones se realizarán utilizando las
interfaces que ofrece la directriz.
</p>

<p>
Si está interesado, puede también encontrar estas definiciones de
interfaz <uri
link="http://oss.tresys.com/docs/refpolicy/api/">en línea</uri>.
Recuerde que este recurso en línea es únicamente la directriz
de referencia y puede variar un poco de la disponible en Gentoo.
</p>

</body>
</subsection>
<subsection>
<title>Usar interfaces de directriz</title>
<body>

<p>
El uso de interfaces de directriz le permite actualizar la directriz
con funciones más legibles. Por ejemplo, para permitir al dominio
user_t domain llamar y utilizar aplicaciones Portage, el módulo
podría tener el siguiente aspecto:
</p>

<pre caption="Directriz ejemplo para permitir a user_t utilizar portage">
policy_module(testmod, 1.0.0)

require {
  type user_t;
  role user_r;
}

portage_run(user_t, user_r)
</pre>

<p>
Desde luego, esto hace que el dominio user_t tenga más privilegios que
las reglas definidas anteriormente para leer fichero ebuild: permite
al usuario llamar a portage, actualizar el sistema, etc. Desde luego,
el usuario todavía necesita los permisos comunes de Linux apropiados
(por lo que necesita pertenecer al grupo portage o poder convertirse
en root). Por supuesto, no recomendamos conceder esto a un usuario
regular ;-)
</p>

</body>
</subsection>
</section>

<section>
<title>Módulos completos de directriz SELinux</title>
<subsection>
<title>Comprobando un módulo aislado</title>
<body>

<p>
Teniendo en cuenta lo de arriba, podemos avanzar un poco más e
investigar un módulo de directriz completo, con las reglas de
forzado de tipos (fichero <path>.te</path>), los ficheros de
contextos (<path>.fc</path>) e interfaces (<path>.if</path>).
</p>

<p>
Debería saber que escribir un módulo requiere familiarizarse con la
aplicación. Es cuestión de simplemente esperar lo mejor: como
administrador de seguridad, será el responsable de definir qué accesos
se permiten y cuáles no. Si olvida alguno, la aplicación se podría
romper en las manos de los usuarios. Pero, si añade demasiados, podría
estar concediendo privilegios de los cuales se podría abusar en
adelante. También sería más complicado hacer un seguimiento y eliminar
privilegios más adelante ya que se dudaría de si ese privilegio es
necesario o no.
</p>

<p>
En esta sección, no discutiremos como crear uno. Tenemos un excelente
recurso: <uri link="/proj/en/hardened/selinux-development.xml">Desarrollo
SELinux en Gentoo Hardened</uri> que le guía en ese proceso. Sin embargo,
echaremos un vistazo a ese módulo completo para explicar otros
aspectos del desarrollo de directrices.
</p>

</body>
</subsection>
<subsection>
<title>Fichero de forzado de tipos</title>
<body>

<p>
El fichero <path>.te</path> que escribimos anteriormente es un
<e>fichero de forzado de tipos</e>. Se utiliza para definir reglas de
acceso al módulo que se está construyendo, pero también, y
más importante, define nuevos tipos (e incluso roles).
</p>

<p>
El ejemplo de abajo es un extracto de un módulo para la aplicación skype.
</p>

<pre caption="Extracto de skype.te">
policy_module(skype, 1.0.0)

type skype_t;
type skype_exec_t;
application_domain(skype_t, skype_exec_t)

type skype_home_t;
userdom_user_home_content(skype_home_t)

manage_dirs_pattern(skype_t, skype_home_t, skype_home_t)
manage_files_pattern(skype_t, skype_home_t, skype_home_t)
</pre>

<p>
En el ejemplo de arriba, se declaran tres nuevo tipos: <c>skype_t</c>
(que se usará para la aplicación), <c>skype_exec_t</c> (que es la
etiqueta que se asigna al binario de la aplicación) y
<c>skype_home_t</c> (que se utilizará para la ubicación del fichero de
usuario <path>~/.Skype</path>). También, se asignan al dominio
<c>skype_t</c> algunos privilegios con respecto a la etiqueta
<c>skype_home_t</c> (gestionar directorios y ficheros).
</p>

</body>
</subsection>
<subsection>
<title>Fichero de contexto de ficheros</title>
<body>

<p>
En el fichero <path>.fc</path> (cuya extensión significa
<e>file context file</e> o fichero de contexto de ficheros), se definen
los recursos del modulo (ficheros, directorios, zócalos, etc.). Una
vez se carga el módulo, estas reglas se añaden de forma que el
reetiquetado del sistema de ficheros asignará los contextos correctos
a cada uno de los ficheros.
</p>

<p>
El ejemplo de abajo es un extracto del fichero de contexto de ficheros
del módulo skype.
</p>

<pre caption="Extracto de skype.fc">
HOME_DIR/\.Skype(/.*)?    gen_context(system_u:object_r:skype_home_t,s0)
/opt/skype/skype       -- gen_context(system_u:object_r:skype_exec_t,s0)
/usr/bin/skype         -- gen_context(system_u:object_r:skype_exec_t,s0)
</pre>

<p>
El formato del fichero tiene la siguiente sintaxis:
</p>

<ol>
  <li>
    La expresión regular que concuerda con el/los fichero/s y directorio/s
    afectados por esa línea.
  </li>
  <li>
    Un identificador opcional para diferenciar el tipo de objeto (fichero,
    directorio, zócalo o socket, enlace simbólico, etc.)
  </li>
  <li>
    Una línea <c>gen_context</c> que contiene el contexto que se debe
    asignar a el/los fichero/s y directorio/s.
  </li>
</ol>

</body>
</subsection>
<subsection>
<title>Fichero de interfaz</title>
<body>

<p>
En el fichero <path>.if</path> (que significa <e>interface file</e> o
fichero de interfaz), se declaran las interfaces que pueden usar otros
módulos. Es, mediante el uso de interfaces, la forma en la que una
directriz definida se puede construir de forma adecuada sobre otros
módulos existentes.
</p>

<p>
Una interfaz podría usarse para permitir a los usuarios llamar y ejecutar
una aplicación. Por ejemplo, podemos encontrar en el módulo skype, la
siguiente interfaz.
</p>

<pre caption="Extracto de skype.if">
interface(`skype_role',`
        gen_require(`
                type skype_t, skype_exec_t, skype_tmpfs_t, skype_home_t;
        ')

        role $1 types skype_t;

        domtrans_pattern($2, skype_exec_t, skype_t)

        allow $2 skype_t:process { ptrace signal_perms };

        manage_dirs_pattern($2, skype_home_t, skype_home_t)
        manage_files_pattern($2, skype_home_t, skype_home_t)
        manage_lnk_files_pattern($2, skype_home_t, skype_home_t)

        relabel_dirs_pattern($2, skype_home_t, skype_home_t)
        relabel_files_pattern($2, skype_home_t, skype_home_t)
        relabel_lnk_files_pattern($2, skype_home_t, skype_home_t)

        ps_process_pattern($2, skype_t)
')
</pre>

<p>
A través de este <c>skype_role</c>, podemos permitir a los usuarios que
llamen a skype, tal y como se indica en el fichero
<path>unprivuser.te</path> (el cual define el dominio user_t):
</p>

<pre caption="Extracto de unprivuser.te para llamar a skype">
optional_policy(`
        skype_role(user_r, user_t)
')
</pre>

<p>
La siguiente tabla muestra algunas interfaces comunes que se podrían
utilizar. Recomendamos echar un vistazo a las interfaces disponibles
cuando cree o mejore sus propios módulos. Asegúrese de elegir la
interfaz que añade exactamente lo que necesita y nada más.
</p>

<table>
<tr>
  <th colspan="3">Plantillas</th>
</tr>
<tr>
  <th>Sufijo</th>
  <th>Ejemplo</th>
  <th>Descripción</th>
</tr>
<tr>
  <ti>_template</ti>
  <ti>virt_domain_template(prefijo)</ti>
  <ti>
    No se trata realmente de una interfaz, las plantillas crean dominios
    adicionales basados en la información que se les facilita. Esto se
    realiza normalmente en plantillas de directriz ajustadas finamente con
    un (sub)conjunto de privilegios.
  </ti>
</tr>
<tr>
  <th colspan="3">Transformaciones</th>
</tr>
<tr>
  <th>Sufijo</th>
  <th>Ejemplo</th>
  <th>Descripción</th>
</tr>
<tr>
  <ti></ti>
  <ti>miscfiles_cert_type(recurso)</ti>
  <ti>
    Las interfaces de transformación, generalmente añaden atributos
    específicos a recursos o dominios. Los atributos "transforman" el
    recurso dado en algo más. En el ejemplo dado,
    miscfiles_cert_type(recurso), asigna el atributo cert_type al
    recurso (y también lo marca como un fichero). Las interfaces como
    miscfiles_read_all_certs trabajan con estos atributos.
  </ti>
</tr>
<tr>
  <th colspan="3">Interfaces de acceso</th>
</tr>
<tr>
  <th>Sufijo</th>
  <th>Ejemplo</th>
  <th>Descripción</th>
</tr>
<tr>
  <ti>_&lt;access&gt;_&lt;recurso&gt;</ti>
  <ti>mta_getattr_spool(dominio)</ti>
  <ti>
    Concede acceso al dominio especificado al recurso mostrado. El
    recurso normalmente define también el tipo (como
    kudzu_getattr_exec_files: concede getattr sobre los ficheros
    kudzu_exec_t) a menos que sea obvio a partir del nombre, o cuando
    el recurso es un término más específico que el dominio. Puede incluir
    también dontaudit (como mta_dontaudit_getattr_spool).
  </ti>
</tr>
<tr>
  <ti>_exec</ti>
  <ti>dmesg_exec(dominio)</ti>
  <ti>
    Concede a un dominio el derecho de ejecutar el fichero ejecutable del
    dominio dado (en el ejemplo, permite a "dominio" ejecutar
    dmesg_exec_t files), pero sin implicar una transición del dominio.
    En otras palabras, dmesg se ejecuta pero está confinado por los
    privilegios del dominio fuente.
  </ti>
</tr>
<tr>
  <ti>_domtrans</ti>
  <ti>dmesg_domtrans(dominio)</ti>
  <ti>
    Concede a un dominio ejecutar y transicionar privilegios hacia el
    nuevo dominio. Esta interfaz es comúnmente utilizada para permitir
    a los dominios de aplicación transicionar a otros dominios. En el
    ejemplo dado, dmesg se ejecuta con los privilegios del dominio
    dmesg_t.
  </ti>
</tr>
<tr>
  <ti>_run</ti>
  <ti>netutils_run(dominio, rol)</ti>
  <ti>
    Concede a un rol y dominio dados los derechos para ejecutar y
    transicionar hacia el dominio dado. Esto se concede normalmente a
    roles y dominios de usuario (ya existentes) y les da un conjunto de
    privilegios necesarios para interactuar de forma segura con el
    nuevo dominio (interactivo), tal como el acceso a un terminal.
  </ti>
</tr>
<tr>
  <ti>_role</ti>
  <ti>xserver_role(rol, dominio)</ti>
  <ti>
    Permite al rol y dominio dado los permisos necesarios para
    transicionar e interactuar con el dominio dado. Esta interfaz se
    ha mejorado con los privilegios para interactuar más extensamente
    con el dominio (y sus ficheros correspondientes), y normalmente
    se asigna a los nuevos usuarios y roles creados en la directriz
    (en lugar de mejorar los dominios y roles de usuario ya existentes).
  </ti>
</tr>
<tr>
  <ti>_admin</ti>
  <ti>aide_admin(dominio)</ti>
  <ti>
    Concede al dominio dado los derechos para administrar el entorno
    del dominio objetivo. Esto normalmente involucra privilegios para
    gestionar y reetiquetar todos los ficheros, directorios, zócalos
    (sockets), etc. asociados.
  </ti>
</tr>
</table>

</body>
</subsection>
</section>

<section>
<title>Utilizar audit2allow</title>
<subsection>
<title>Introducción</title>
<body>

<p>
Cuando lea los recursos disponibles en línea sobre SELinux, observará
que hay muchas referencias a una herramienta llamada <c>audit2allow</c>.
El propósito de esta herramienta es leer los mensajes de denegación AVC
del registro de auditoría y transformarlos en un módulo de directriz
que se pueda cargar. La ventaja aquí es que hace bastante más fácil
la escritura de directrices. La parte mala es que la salida (a menos
que utilice la opción <c>-R</c>) no se puede utilizar en el fichero
<path>Makefile</path> que utilizamos anteriormente para construir
módulos.
</p>

<p>
Otra desventaja es que la herramienta no actúa inteligentemente ante los
cambios. Acepta las denegaciones a ciegas y las trata como si debieran
ser permitidas en lugar de investigar si se deberían asignar otros
contextos al fichero, etc.
</p>

</body>
</subsection>
<subsection>
<title>Usar audit2allow</title>
<body>

<p>
El uso de <c>audit2allow</c> es bastante simple. Se le envían las
denegaciones que quiere corregir y se almacena el resultado en un
fichero <path>.te</path>. Puede entonces convertir este fichero a
un formato intermedio que se puede traducir a un fichero
<path>.pp</path> para cargarlo finalmente con <c>semodule</c>.
</p>

<p>
Por ejemplo, para capturar todas las denegaciones y transformarlas en
sentencias válidas para las denegaciones relacionadas con firefox:
</p>

<pre caption="Generar una nueva directriz utilizando audit2allow">
# <i>grep firefox /var/log/avc.log | audit2allow -m firefoxmod &gt; firefoxmod.te</i>
# <i>checkmodule -m -o firefoxmod.mod firefoxmod.te</i>
# <i>semodule_package -o firefoxmod.pp -m firefoxmod.mod</i>
# <i>semodule -i firefoxmod.pp</i>
</pre>

<p>
El nombre del módulo (indicado mediante la opción <c>-m</c>) debe ser
sencillo: únicamente utilice caracteres (<c>[a-z]</c>) y números
(<c>[0-9]</c>), y comience el nombre del módulo con un carácter.
</p>

</body>
</subsection>
</section>

</sections>
