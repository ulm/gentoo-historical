<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/es/hardened/selinux/hb-intro-enhancingsecurity.xml,v 1.1 2011/06/07 18:05:53 nimiux Exp $ -->

<sections>
<version>1</version>
<date>2011-01-10</date>

<section>
<title>Introducción</title>
<subsection>
<title>Una bienvenida amigable</title>
<body>

<p>
Bienvenido al manual de SELinux para Gentoo. Con este recurso
queremos presentarle rápidamente la implementación de SELinux y
las directrices implicadas. Parte de esta presentación consiste
en ayudarle a comprender porqué se creó SELinux y qué conceptos se
esconden detrás de los parches de SELinux. Cubriremos los conceptos
más importantes de SELinux, las directrices de referencia que utiliza
Gentoo Hardened y desarrollaremos el trabajo con algunas herramientas
de SELinux.
</p>

<p>
El propósito de este libro no es explicar en detalle el funcionamiento
del propio SELinux. Existen muchas referencias disponibles en Internet
y en muchos libros que le ayudarán con SELinux. En lugar de esto, nos
centraremos en la integración de SELinux en Gentoo Hardened. Desde
luego, le ofreceremos una rápida introducción a SELinux para que
pueda comprender cómo trabaja, lo que es, y le ayudaremos a identificar
las acciones que necesita realizar para asegurar su sistema usando
las herramientas de SELinux.
</p>

</body>
</subsection>
</section>
<section>
<title>Asegurando Linux</title>
<subsection>
<title>Seguridad en general</title>
<body>

<p>
La seguridad se ve a menudo como un concepto vago. ¿Qué es la seguridad
en general? ¿Cómo se mide? ¿Qué beneficio se obtiene y cómo asegurarse
de no poner demasiado esfuerzo en asegurar su sistema?
</p>

<p>
Bien, los fanáticos de la seguridad le contarán que no existe otra
cosa salvo el exceso de seguridad. Si se implementa de forma correcta,
la seguridad no restrige la funcionalidad o el rendimiento. No le da
demasiado trabajo para realizar sus tareas. Pero implementar la
seguridad de forma apropiada es una tarea diferente y que conlleva
mucho tiempo. Esta es la razón por la que en muchas ocasiones se
escucha que la seguridad es tan buena como su administrador.
</p>

<p>
Entonces, ¿Cómo puedo velar por la seguridad?. Una buena práctica
consiste en definir sus metas en lo que a seguridad se refiere. Haga
una lista de que lo que quiere conseguir y porqué lo quiere hacer.
Haciendo un seguimiento de las amenazas que quiere minimizar, podrá
construir un modelo de seguridad que es el adecuado para su entorno.
Estas amenazas pueden ser muy pretenciosas, como por ejemplo
"Asegurarse de que nadie pueda violar nuestras medidas de seguridad".
</p>

<p>
En el caso de un sistema Linux funcionando con SELinux, esto podría
significar que desea que nadie o nada, salvo los procesos de confianza,
puedan escribir en ficheros críticos del sistema, como por ejemplo,
la(s) imagen(es) del núcleo, configuración del gestor de arranque,
las contraseñas y el propio binario de SELinux con las directrices.
</p>

</body>
</subsection>
<!-- Suggestion to remove from guide, more interesting for a generic security
document?
<subsection>
<title>Security on Operating System Level</title>
<body>

<p>
So far for the high-level and theoretic explanation on security. What about
operating system security?
</p>

<p>
On the Internet, you will find a multitude of documents helping you secure your
system. Some of these documents are procedure-driven (execute this, delete that,
change permissions of this file and that file) and are often found as security
best practices for operating systems or distributions. You can find such
documents on the project sites themselves (such as the <uri
link="/doc/en/security/security-handbook.xml">Gentoo Security Handbook</uri>) or
on specialized sites of organizations that keep track of secure configuration
baselines in general (such as <uri
link="http://www.cisecurity.org">CISecurity</uri>'s benchmark documents).
Others are higher-level descriptions (often called frameworks) that help you
focus on the various fields in which security plays a role.
</p>

<p>
A simple example of such higher-level descriptions can be seen in the CoBIT
framework, which has a process called <e>Ensure Systems Security</e> which
defines (at least) the following control objectives:
</p>

<ol>
  <li>Manage Security Measures</li>
  <li>Identification, Authentication and Access</li>
  <li>Security of Online Access to Data</li>
  <li>User Account Management</li>
  <li>Management Review of User Accounts</li>
  <li>User Control of User Accounts</li>
  <li>Security Surveillance</li>
  <li>Data Classification</li>
  <li>Central Identification and Access Rights Management</li>
  <li>Violation and Security Activity Reports</li>
  <li>Incident Handling</li>
  <li>Re-accreditation</li>
  <li>Counterparty Trust</li>
  <li>Transaction Authorization</li>
  <li>Non-repudiation</li>
  <li>Trusted Path</li>
  <li>Protection of Security Functions</li>
  <li>Cryptographic Key Management</li>
  <li>Malicious Software Preventions, Detection and Correction</li>
  <li>Firewall Architectures and Connections with Public Networks</li>
  <li>Protection of Electronic Value</li>
</ol>

<p>
If your head is not spinning yet, then I suggest to dive deeper into these
subjects. However, for this handbook, we'll leave it at this and focus on those
topics that are relevant for further SELinux discussions.
</p>

</body>
</subsection>
<subsection>
<title>Operating System Security Best Practices</title>
<body>

<p>
To properly secure any operating system, there are a few best practices that you
might need to keep in mind. They do not cover the full spectrum of configuration
directives or requirements, but if you do not implement those properly, you risk
that the threats facing your system become reality faster.
</p>

<dl>
  <dt>Only run necessary services</dt>
  <dd>
    Only run services (scripts, daemons, jobs, servers ...) of which you know
    you need them. Regularly verify your system runtime behavior to see if no
    services are running that you don't need. The more services that run, the
    more <e>access vectors</e> intruders or malicious people have towards your
    system.
  </dd>
  <dt>Update your system regularly</dt>
  <dd>
    Updating your system will resolve all potential vulnerabilities of software
    you have if they were known by the developers and fixed in later versions.
    Some distributions, including Gentoo, allow you to pull in only
    security-related updates so that your upgrade cycle is not too time and
    resource consuming. See <c>glsa-check</c> for more information on how to do
    this with Gentoo.
  </dd>
  <dt>Do not use privileged accounts</dt>
  <dd>
    For each task you execute on a system, make sure that that task has the
    least amount of privileges needed to get to its goal. Only a few services
    will require root privileges (Unix/Linux' highest privileged account), but
    other accounts might also be seen as privileged (such as accounts that have
    password-less <c>sudo</c> rights, or accounts that are in the <e>wheel</e>
    group. The same is true for your regular day-to-day tasks.
  </dd>
  <dt>Implement a good password policy</dt>
  <dd>
    Make sure that your passwords are not easy to guess or to brute-force. If
    your system uses passwords for authentication and the password is
    compromised, security is completely compromised as well as, as far as the
    system knows, the malicious user that is using your password is you.
  </dd>
  <dt>Configure your services properly</dt>
  <dd>
    Do not trust services to come with a good, default configuration. Most
    default configurations are so that the majority of users can use the service
    (feature-wise), which might not always be the proper configuration for you.
  </dd>
  <dt>Use proper permissions</dt>
  <dd>
    Make sure your files are properly protected permission-wise. Never use
    world-readable files and only allow other accounts to read (or modify) your
    file(s) if they need to. Use group-permissions wisely and often validate
    group membership. If file systems can be used in a read-only fashion, do so.
    If you do not need to access a particular file system by default, don't
    mount it.
  </dd>
</dl>

<p>
This is just a subset of best practices. One of the aspects within an operating
system setup is the method of <e>accessing</e> the system, services or data.
Implementing a good access control is mandatory from a systems' security
point-of-view.
</p>

</body>
</subsection>
-->
<subsection>
<title>Control de acceso</title>
<body>

<p>
Un control de acceso decente de un sistema (o grupo de sistemas),
asegura que únicamente se permite acceso a las personas o procesos
autorizados a los recursos con los que quieren trabajar.
</p>

<p>
Antes de que pueda implementar un control de acceso al sistema,
necesitará obtener la autorización adecuada. Si sus esquemas de
autenticación fallan, su sistema de control de acceso al sistema
podría no diferenciar a los usuarios legítimos de los maliciosos.
</p>

<p>
La autenticación de los usuarios en los sistemas Linux se realiza
a través de PAM (<e>Módulos de Autenticación Enchufables</e>), un
potente mecanismo para integrar esquemas múltiples de autenticación
de bajo nivel en una interfaz de alto nivel.
</p>

<p>
Sin embargo, la autorización para el uso de los recursos, se realiza
a veces a través de un esquema simple de permisos. La mayoría de los
recursos no están ocultos por defecto, aunque existen parches y
actualizaciones (tales como las ofrecidas por las fuentes del núcleo
Gentoo Hardened con parches grSecurity que incluyen soporte para este
tipo de medidas). Puede ocultar la existencia de archivos en todo
el sistema de ficheros asegurándose de que el directorio en el que
residen no es legible ni "ejecutable" por cuentas no autorizadas.
</p>

<p>
Este esquema de permisos por defecto tiene algunos inconvenientes
importantes. No le permite definir autorizaciones flexibles (únicamente
permite autorizaciones a tres niveles: propietario, grupo propietario
y cualquier otra cuenta) y además está limitada a los permisos
lectura/escritura/ejecución (aunque algunos atributos adicionales
están disponibles hoy en día).
</p>

<p>
Otro problema es que el esquema de permisos es <e>discrecional</e>, lo
que significa que los usuarios y procesos pueden cambiar las directrices
de seguridad.
</p>

<p>
Este esquema de permisos es suficiente Para la mayoría de usuarios y ha
demostrado ofrecer un método adecuado para gestionar las autorizaciones
de acceso. Si embargo, los inconvenientes que presenta han resultado
ser un agujero importante en lo que Linux ofrece.
</p>

</body>
</subsection>
</section>
<section>
<title>Control de acceso obligatorio</title>
<subsection>
<title>Entre en SELinux</title>
<body>

<p>
Si el control de acceso discrecional, abreviado <e>DAC</e>, mencionado
arriba no es suficiente (y si es riguroso con la seguridad, no lo
encontrará suficiente), entonces necesitará un sistema Control de Acceso
<e>Obligatorio</e> o <e>MAC</e>.
</p>

<p>
Cuando se usa un sistema MAC, se necesita permitir explícitamente las
actividades que un proceso quiere realizar en un recurso. Esto ofrece
mayor granularidad con los permisos y los recursos. A menudo
ofrecen no sólo soporte para ficheros, sino también para zócalos
(sockets), puertos, segmentos de memoria, colas, procesos, servicios
del núcleo, llamadas al sistema, dispositivos, sistemas de ficheros y
mucho más. La granularidad de las actividades soportadas es también
muy grande. Para los ficheros, esto incluye: añadir, crear, ejecutar,
escribir, enlazar, llamadas ioctl, obtener atributos (getattr), dar
valor a atributos (setattr), lectura, renombrado, bloqueo,... mientras
que para los zócalos (sockets) estos pueden ser: añadir, asociar (bind),
conectar, crear, escribir, enviar a, aceptar,... También, cuando se
utiliza un sistema MAC, ningún usuario ni proceso puede manipular las
directrices de seguridad por sí mismo: lo que el administrador ha
concedido no puede ser revocado.
</p>

<p>
Aquí es donde SELinux entra en juego. SELinux es una característica del
núcleo Linux que implementa, entre otras cosas, un sistema MAC para
controlar y gobernar el acceso a varios recursos. Usa un esquema de
permisos de denegación por defecto, de forma que se necesita conceder
explícitamente el acceso que ha solicitado un proceso.
</p>

<p>
SELinux permite igualmente un modelo de permisos más fino <b>encima
del</b> sistema tradicional DAC (el cual se usa también mientras SELinux
está en funcionamiento; en otras palabras: si el sistema tradicional
no permite ciertas actividades, éstas no serán permitidas incluso si
las directrices de SELinux permiten la acción).
</p>

</body>
</subsection>
<subsection>
<title>¿Qué es SELinux?</title>
<body>

<p>
Para dar soporte a este modelo fino de permisos, es lógico pensar que
se deben realizar cambios al núcleo Linux. Sí, gracias a la interfaz
del núcleo Linux <e>LSM</e> (<e>Módulos de Seguridad de Linux</e>), el
soporte para SELinux se añadió de forma muy sencilla desde el comienzo
de las series 2.6 del núcleo. SELinux se ha integrado en el árbol
principal del núcleo. Sin embargo, el soporte de SELinux y su utilización
son dos cosas muy diferentes.
</p>

<p>
Para identificar adecuadamente los recursos, SELinux necesita asignar
etiquetas a estos recursos. Cuando los recursos están en memoria, se
realiza principalmente en el núcleo Linux, sin embargo, para recursos
persistentes como ficheros, estas etiquetas deben localizarse en algún
lugar. En SELinux, se ha elegido usar atributos extendidos del fichero
(que son almacenados en el propio sistema de ficheros). La ventaja de
este enfoque es que la etiqueta permanece junto al fichero incluso si
éste cambia de nombre. Por el contrario, una desventaja de este enfoque
es que el sistema de ficheros debe soportar estos
<e>atributos extendidos</e>, los cuales no todos los sistemas de
ficheros poseen (o tienen activados).
</p>

<p>
SELinux también utiliza roles para gestionar el acceso a los recursos.
A un usuario que no tiene el rol de acceso a la administración del
sistema no se le debe permitir ejecutar cualquier actividad de
administración del sistema incluso si es capaz de escalar sus privilegios
(por ejemplo usando una aplicación con la capacidad set-uid). Para el
soporte de roles, SELinux requiere cambios en los servicios de
autenticación (PAM) y necesita almacenar en algún lugar las definiciones
de los roles y las autorizaciones.
</p>

<p>
Aparte del soporte en el núcleo y las etiquetas asignadas a los recursos
en el sistema de autorización, SELinux requiere también herramientas
específicas para consultar y manipular las etiquetas, gestión de
privilegios (por ejemplo la herramienta <c>sudo</c>), servicios del
sistema (como HAL o SysVInit) etc. Esto se traduce en un conjunto de parches
que se aplican a estas herramientas (y más) los cuales no son siempre parte
del código fuente principal de la aplicación.
</p>

</body>
</subsection>
<subsection>
<title>Gentoo Hardened y SELinux</title>
<body>

<p>
Gentoo Hardened ofrece SELinux integrado en la distribución. Cuando se
selecciona soporte para SELinux, Gentoo Hardened aplicará los parches
necesarios a las aplicaciones y le ayudará a (re)etiquetar sus ficheros y
otros recursos para que puedan ser gestionados por SELinux. Gentoo Hardened
también integra soporte SELinux en Portage, permitiendo que los nuevos
ficheros que se instalen sean etiquetados automáticamente y que se utilice
un entorno inofensivo (sandbox) para la construcción segura de los
paquetes.
</p>

<p>
Aparte del soporte tecnológico puro, esperamos que encuentre los documentos
de soporte, guías, experiencia y soporte en línea necesarios para usar
SELinux en Gentoo. No dude en entrar y decir ¡hola! en el canal de chat
<c>#gentoo-hardened</c> de la red IRC en Freenode o en nuestra lista de
correo.
</p>

<p>
Si piensa que SELinux es apropiado para sus pretensiones y quiere
probarlo usando Gentoo Hardened, por favor, continúe leyendo. En el
próximo capítulo le informaremos de como se ha "diseñado" la seguridad
en SELinux y cómo está estructurada conceptualmente. En capítulos
posteriores le ayudaremos con el lenguaje de autorización y las
directrices "base" con las que la mayoría de las distribuciones
comienzan y finalmente le ayudaremos a instalar, ejecutar y gestionar
un sistema SELinux con Gentoo Hardened.
</p>

</body>
</subsection>
</section>
</sections>
