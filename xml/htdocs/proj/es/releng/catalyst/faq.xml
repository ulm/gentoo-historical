<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/proj/es/releng/catalyst/faq.xml" lang="es">

<title>FAQ de Catalyst</title>
<author title="Autor">
  John P. Davis
</author>
<author title="Autor">
  Daniel Robbins
</author>
<author title="Contributor">
  William Kilian
</author>
<author title="Editor">
  Chris Gianelloni
</author>
<author title="Traductor">
  <mail link="nimiux" />
</author>

<abstract>
Preguntas frecuentes relacionadas con la herramienta Catalyst.
</abstract>

<version>1.2</version>
<date>2010-09-08</date>

<faqindex>
<title>Índice</title>
<section>
<title>Introducción</title>
<body>

<p>
Esta no es una lista exhaustiva de FAQ sobre Catalyst.
</p>

</body>
</section>
</faqindex>

<chapter>
<title>Preguntas Frecuentes</title>

<section id="stage23-nongeneric">
<title>¿Cómo construyo un tarball stage2 y stage3 para un tipo de CPU
no genérico como pentium4?</title>
<body>

<p>
En primer lugar, asegúrese de que su hardware es capaz de construir
ese stage. Si desea construir un stage <c>pentium4</c> necesitará
construirlo en un sistema Pentium 4 o AMD64/Opteron (o superior). No
puede construir un stage <c>pentium4</c> en un sistema Athlon XP, ya
que las CPUs Athlon XP no soportan las instrucciones SSE2, y estas
instrucciones se activan para los stages <c>pentium4</c>. Del mismo
modo, si desea construir un stage <c>g4</c>, necesitará hacerlo en un
sistema PowerPC G4 o G5.
</p>

<p>
Una vez se haya asegurado de que está construyendo en el hardware
correcto, simplemente siga los pasos de arriba. Para construir el
stage2, simplemente cambie el ajuste <c>subarch</c> a una
subarquitectura no genérica válida (p.e. <c>pentium4</c>). Entonces su
stage2 será construido para la subarquitectura que especificó. A
continuación, use este stage2 como el stage "semilla" para construir
su stage3. Por supuesto, puede que quiera también modificar el ajuste
<c>subarch</c> en su fichero spec del stage3 para que concuerde con el
que usó en su fichero spec para el stage2.
</p>
</body>
</section>

<section id="subarch">
<title>Quiero construir unos cuantos stages para varias
subarquitecturas. ¿Cómo debo hacer esto?</title>
<body>

<p>
En primer lugar, construya un stage1 genérico. Entonces use este
stage1 para construir los stage2 y stage3 específicos. Use el stage1
de nuevo para construir otro stage2 y stage2 específicos. No necesita
reconstruir el stage1 -- todos sus stage2 y stage3 específicos pueden
usar el mismo stage1 "semilla".
</p>
</body>
</section>

<section id="stage1-nongeneric">
<title>¿Puedo construir un stage1 para un tipo de CPU no
genérico?</title>
<body>

<p>
Esto es muy mala idea, ya que los usuarios esperan que el stage1 va a
funcionar en cualquier tipo de subarquitectura. De esta forma, pueden
usar el stage1 en cualquier sistema sin preocuparse. Debe estar seguro
de no "contaminar" su stage1 con código específico de una CPU no
genérica. Siempre use un stage3 "genérico" como semilla para construir
un nuevo stage1.
</p>
</body>
</section>

<section id="scratch">
<title>Creía que catalyst podía construir stages "desde cero". Si
catalyst construye los stages desde cero, entonces ¿Porqué se necesita
un "stage semilla"?
</title>
<body>

<p>
Buena pregunta. Como sabe, los stage2 y stage3 dependen de los stages
previos para la construcción, la cual se especifica y define por su
nombre (p.e. un "stage2" implica que hubo un "stage1"). Sin embargo
catalyst necesita un stage semilla para construir un stage1, por lo
que en lo que a la construcción de un stage1 se refiere, merece la
pena comprobar porque esto es necesario. Cuando se construye un
stage1, catalyst usa como semilla un stage3 para preparar un entorno
chroot. Dentro de este entorno chroot, el nuevo stage1 es construido
ajustando la variable de entorno <c>ROOT</c> a
<path>/tmp/stage1root</path>. Esto ordena al gestor de paquetes que
haga emerge de todos los nuevos paquetes, no en el sistema de ficheros
actual, sino en el sistema de ficheros localizado en
<path>/tmp/stage1root</path>. Catalyst, entonces empaqueta
<path>/tmp/stage1root</path> y éste se convierte en el stage1
objetivo. Esto significa que cuando catalyst construye un stage1, el
stage2 en sí mismo no hereda ningún binario ni librería del stage1
semilla que ha usado. La semilla que se usa <e>afecta</e> al stage1
destino de alguna forma -- Los ficheros cabecera de Linux en la
semilla son usados para construir la librería glibc del stage1, y los
compiladores presentes en la semilla son usados para compilar todos
los programas en el stage1. El stage semilla es usado para aislar el
proceso de construcción del stage1 de su sistema local, y también
permite, por ejemplo, construir stage1 para x86 en sistemas amd64.
</p>
</body>
</section>

<section id="howto">
<title>¿Existe un HOWTO oficial para Catalyst?</title>
<body>

<p>
Actualmente, no hay un HOWTO oficial. Si está interesado en escribir
uno, por favor, abra una incidencia con el HOWTO adjunto. Sin embargo,
la falta de un HOWTO oficial no significa que catalyst este
completamente indocumentado. Cuando se hace emerge de catalyst, un
conjunto bien comentado de ficheros spec ejemplo se instalan en
<path>/usr/share/doc/catalyst-$version/examples</path>.
</p>

<p>
Si aún tiene preguntas después de leer los ejemplos, suscríbase a la
lista de correo gentoo-catalyst.
</p>
</body>
</section>

<section id="perpackage">
<title>¿Dónde pongo los ajustes use, mask, etc. particulares de
cada paquete?</title>
<body>

<p>
Catalyst soporta los ficheros de configuración presentes en
/etc/portage. Simplemente añada lo siguiente a su fichero spec, y
asegúrese igualmente de que usa el mismo ajuste <c>portage_confdir</c>
para sus stages semilla:
</p>

<p>
portage_confdir: /camino/a/personal/etc/portage
</p>
</body>
</section>

<section id="ownstage1">
<title>¿Debo realmente construir mi propio stage1 o simplemente usar
uno de un servidor réplica de Gentoo?</title>
<body>

<p>
La mejor práctica es construir <b>siempre</b> sus propios stages si no
está usando la misma instantánea (snapshot) que fue utilizada para
construir la última release. El estado del árbol de Portage depende
mucho de sí mismo. Si dispone de un stage1 de hace 3 meses, es muy
probable que tenga problemas con paquetes que bloquean a otros y
cambios en el árbol que causarán que la construcción dé problemas de
compatibilidad.
</p>
</body>
</section>

<section id="update">
<title>¿Cómo mantengo mis paquetes GRP/stages/LiveCD
actualizados?</title>
<body>

<p>
Catalyst usa Portage para todo el trabajo de construcción, de este
modo lo único que debe hacer es regenerar su instantánea de Portage y
reconstruir su GRP/stages/LiveCD. Portage seguirá todas sus reglas
normalmente para decidir qué paquetes deben ser actualizados.
</p>
</body>
</section>

<section id="special-syntax">
<title>¿Usa Catalyst alguna sintaxis de ajustes USE especial?</title>
<body>

<p>
No, la sintaxis de los ajustes USE en catalysts es exactamente la
misma que en portage.
</p>
</body>
</section>

<section id="crosscompile">
<title>¿Soporta Catalyst compilación cruzada?</title>
<body>

<p>
No, en este momento no.
</p>

</body>
</section>

</chapter>
</guide>
