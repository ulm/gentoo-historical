<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/de/java/java-upgrade.xml,v 1.2 2008/08/29 22:07:58 keytoaster Exp $ -->

<!-- English CVS Version: 1.24 -->

<guide link="/proj/de/java/java-upgrade.xml" lang="de">
<title>Gentoo Java Aktualisierungsleitfaden</title>

<author title="Author">
  <mail link="nichoj@gentoo.org">Joshua Nichols</mail>
</author>
<author title="Author">
  <mail link="kartk@gentoo.org">Karl Trygve Kalleberg</mail>
</author>
<author title="Bearbeiter">
  <mail link="nightmorph@gentoo.org">Josh Saddler</mail>
</author>
<author title="Übersetzer">
  <mail link="stefansusenet@nurfuerspam.de">Stefan Kienzl</mail>
</author>
<author title="Übersetzer">
  <mail link="keytoaster@gentoo.org">Tobias Heinlein</mail>
</author>

<abstract>
Dieser Leitfaden zeigt ihnen wie Sie Java auf die neue Java Generation auf einem
Gentoo aktualisieren, einhergehend mit bekannten Konzepten und Werkzeugen.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.1</version>
<date>2008-08-25</date>

<chapter>
<title>Einführung</title>

<section>
<body>
<p>
Hallo und herzlich willkommen. Sie werden sich vermutlich fragen "Warum sollte
ich mein Java ugraden wollen?". Vielleicht haben sie diesen Prozess aber auch
schon begonnen und wurden wegen einem Fehler während eines Merges auf diese
Seite geleitet? Wie auch immer, das Ziel dieses Dokuments ist es Ihnen während
des Upgradens auf das neue Java-System zu helfen. Aber was ist eigentlich mit
diesem neuen Java-System los?
</p>
</body>
</section>

<section>
<title>Das neue Java-System</title>
<body>
<p>
Für diejenigen, die mit dem neuen Java-System noch nicht vertraut sind, folgt
nun eine kurze Liste der neuen Funktionen:
</p>

<ul>
<li>Fähigkeit die aktuelle VM fliegend umzuschalten</li>
<li>
  Änderungen an der Benutzer- und System-VM treten direkt in Kraft und sind
  nicht mehr an die Shell-Umgebung gebunden (d.h. env-update &amp;&amp; source
  /etc/profile nach dem Umschalten der System-VM wird nicht mehr benötigt)
</li>
<li>
  Hat nun das Konzept einer "Bau-VM", welche benutzt wird um Pakete zu emergen
  und unabhängig von der System-VM konfiguriert wird.
</li>
<li>
  Für jede Version von Java, d.h. 1.3, 1.4, 1.5, usw., kann die Bau-VM
  darauf hin konfiguriert werden, welcher Anbieter und welche Version einer VM
  benutzt wird
</li>
<li>
  Die VM zur Emergezeit wird gemäß ihrer Konfiguration fliegend umgeschaltet,
  genau wie die Abhängigkeit des Pakets. Zum Beispiel lassen sich einige
  Pakete nicht mit 1.5 kompilieren. In diesem Fall wird eine 1.4-VM zur
  Bauzeit verwendet.
</li>
<li>
  Java-Pakete, welche mit ant gebaut werden, werden ihre build.xml zur Bauzeit
  neuschreiben, um zu gewährleisten, dass die richtige Version von
  Java-Bytecode kompiliert wird.
</li>
<li>
  Java 1.5 ist unmaskiert, nachdem es einige Zeit in package.mask gewesen ist
</li>
<li>Java 1.6 wird verfügbar gestellt so bald es veröffentlicht ist.</li>
</ul>
</body>
</section>

<section>
<title>Fachausdrücke / Konzepte</title>
<body>

<p>
Da Sie nun einen Einblick haben, auf was Sie sich gefasst machen müssen... Hier
sind einige Ausdrücke, die Sie vor dem Beginn wahrscheinlich für brauchbar
halten.
</p>

<dl>
  <dt>Generation</dt>
  <dd>
    Das ist ein neues Konzept. Die Idee ist, dass eine Generation eine Sammlung
    von Werkzeugen und Eclasses zum Bauen von Java-Paketen ist. Als erstes
    beginnen wir von einer existierenden Generation auf eine neue zu migrieren.
    Während dieser Zeit, koexistieren beide Generationen auf Ihrem System und im
    Portage-Baum. Als Beispiel, haben Sie eine System VM für Generation X
    <e>und</e> eine System-VM für Generation X+1 gesetzt. Dadurch können Pakete,
    die Generation X und Generation X+1 benutzen, während der Migration zur
    neuen Generation koexistieren.
  </dd>
  <dt>Generation 1</dt>
  <dd>
    Diese Generation besteht aus den bestehenden Eclasses (java-pkg, java-utils
    und java) und <c>java-config-1.</c> Generation 1 ist ein Altlast-System,
    welches abgeschafft werden wird.
  </dd>
  <dt>Generation 2</dt>
  <dd>
    Diese Generation besteht aus den neuen Eclasses (java-pkg-2, java-pkg-opt-2,
    java-ant-2 und java-utils-2) und der neuen Version von java-config. Dies ist
    die Generation auf die wir migrieren werden.
  </dd>
  <dt>Generation 1 System VM</dt>
  <dd>
    Das ist die VM die dazu verwendet wird, Java-Pakete durch Verwendung von
    Eclasses aus Generation 1 zu emergen. Sie wird durch Verwendung von
    <c>java-config-1 --set-system-vm &lt;Wahl der VM&gt;</c> gesetzt.
  </dd>
  <dt>Generation 2 System VM</dt>
  <dd>
    Mit Generation 2 wird die System-VM nur für root und für Anwender, die
    keine Benutzer-VM gesetzt haben, verwendet.
  </dd>
  <dt>Generation 2 Build VM</dt>
  <dd>
    Generation 2 führt eine neue Klasse von VM ein. Die Build-VM wird während
    der Mergezeit zum Bauen von Java-Paketen verwendet. Sie wird falls nötig
    geändert, abhängig vom Paket. Ein Beispiel: Falls sich ein Paket nur mit
    1.4 kompilieren lässt, wird eine 1.4 VM benutzt. Standardwerte werden in
    <path>/usr/share/java-config-2/config/jdk-defaults.conf</path> definiert.
    Zusätzlich kann die Build-VM in
    <path>/etc/java-config-2/build/jdk.conf</path> konfiguriert werden.
  </dd>
</dl>

</body>
</section>
</chapter>

<chapter>
<title>java-config updaten</title>
<section>
<body>

<p>
Ein neues Paket, <c>java-config-wrapper</c>, wird durch die alten Versionen von
<c>java-config</c> blockiert, daher sollten wir diese zuerst entfernen:
</p>

<pre caption="Altes java-config entfernen">
# <i>emerge -C java-config</i>
</pre>

<p>
Jetzt sollten wir die neue Version von <c>java-config</c> installieren:
</p>

<pre caption="Neues java-config installieren">
# <i>emerge -1 java-config:0 java-config:2</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Ihre Umgebung überprüfen</title>
<section>
<body>

<p>
Wir stellen jetzt ein neues Skript zur Verfügung,
<c>/usr/bin/java-check-environment</c>. Dieses, wie der Name vielleicht schon
sagt, überprüft den Zustand der Java-Umgebung Ihres Systems. Es weist Sie dann
darauf hin, welche Aktionen Sie durchführen sollten, um gefundene Probleme zu
beheben. Starten Sie jetzt:
</p>

<pre caption="Überprüfen ihrer Umgebung">
# <i>java-check-environment</i>
</pre>

<p>
Falls java-check-environment einen Fehler findet, wird es stoppen und Ihnen
mitteilen, was das Problem ist und wie es zu beheben ist. Folgen Sie dem
gegebenen Ratschlag und führen Sie java-check-environment erneut aus bis es
keine weiteren Probleme mehr findet.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Upgrade... abgeschlossen!</title>
<section>
<body>
<p>
Wenn Sie so weit gekommen sind, haben Sie das Upgrade auf das neue Java-System
erfolgreich vollzogen. Herzlichen Glückwunsch!
</p>

<p>
Jetzt möchten Sie vielleicht einen Blick auf unsere aktualisierte Dokumentation
werfen:
</p>

<ul>
 <li><uri link="/doc/de/java.xml">Benutzeranleitung</uri></li>
 <li><uri link="java-devel.xml">Entwickleranleitung</uri></li>
</ul>
</body>

</section>
</chapter>

<chapter>
<title>Bekannte Probleme und Fragen</title>
<section>
<body>
<p>
Um auf allgemeine Probleme, die mit dem Upgrade zusammenhängen, hinzuweisen, hat
das Java-Team
<uri link="http://overlays.gentoo.org/proj/java/wiki/Common_Problems">hier</uri>
eine Wikiseite gestartet. Bevor Sie Hilfe suchen oder irgendwo anders Probleme
melden, schauen Sie sich diese Seite an.
</p>
</body>

</section>
</chapter>
</guide>
