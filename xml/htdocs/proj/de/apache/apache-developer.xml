<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/de/apache/apache-developer.xml,v 1.3 2008/05/12 19:21:04 keytoaster Exp $ -->

<guide link="/proj/de/apache/apache-developer.xml" lang="de" disclaimer="obsolete" redirect="/proj/en/apache/doc/developer.xml">
<title>Apache Dokumentation für Entwickler</title>

<author title="Autor">
  <mail link="vericgar@gentoo.org">Michael Stewart</mail>
</author>
<author title="Übersetzer">
  <mail link="gentoo-doc-de@plicht.de">Ekki Plicht</mail>
</author>

<abstract>
Dieses Dokument beschreibt Details zu den neuen 'eclasses', die für Entwickler
von Paketen, die sich auf Apache beziehen, zur Verfügung stehen.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>2.5</version>
<date>2008-03-02</date>

<chapter>
<title>Über dieses Dokument</title>
<section>
<body>

<p>
Dieses Dokument erläutert die <uri link="#apache-module">neuen 'eclasses'</uri>,
<uri link="#changes">Änderungen</uri> gegenüber dem früheren Stil bei
Apacheinstallationen, sowie notwendige <uri link="#ebuild-update">
Modifikationen</uri> an den ebuilds um unsere neuen 'eclasses' zu verwenden.
Falls Sie als Endanwender nach Informationen zum Upgrade suchen, dann lesen
Sie bitte das <uri link="apache-upgrading.xml">Apache Upgrade</uri> Dokument.
</p>

</body>
</section>
</chapter>

<chapter id="changes">
<title>Was sich geändert hat</title>
<section>
<title>Überblick</title>
<body>

<p>
Wir haben viele Änderungen an der Art vorgenommen, wie Apache und die
dazugehörenden Module installiert werden und bei Gentoo arbeiten. Dies
erleichtert die Pflege und ist stärker an die Vorgehensweise im Upstream
angeleht. Unsere Änderungen sind:
</p>

<ul>
  <li>Viele Bugs behoben</li>
  <li>Veränderte Installations- und Konfigurationsverzeichnisse</li>
  <li>
    Neu erstellte eclasses <uri link="#depend-apache">depend.apache</uri>
    und <uri link="#apache-module">apache-module</uri>
  </li>
  <li>
    Zusammenfassen der Dateien apache.conf und commonapache.conf in eine
    Datei, die sehr ähnlich zu der im Upstream verteilten Datei ist
  </li>
  <li>
    Die Pakete <c>apr</c> und <c>apr-utils</c> wurden herausgenommen, damit
    einige andere Pakete nicht länger Apache benötigen
  </li>
  <li>Updates und neue Versionsnummer bei fast jedem Modul</li>
  <li>Mehr Apache MPMs verfügbar</li>
  <li>'lingerd' Unterstützung hinzugefügt</li>
  <li>Unterstützung für große Dateien repariert</li>
  <li><e>Und noch viel mehr, das ich sicherlich übersehen habe...</e></li>
</ul>

</body>
</section>
<section>
<title>Apache Verzeichnisse</title>
<body>

<p>
In engerer Anlehnung an die Praktiken im Upstream und bei anderen
Distributionen wurden folgende Verzeichnispfade geändert:
</p>

</body>
</section>
<section>
<title>Apache 2.x</title>
<body>

<table>
<tr>
  <th>Verwendung</th>
  <th>Alter Pfad</th>
  <th>Neuer Pfad</th>
</tr>
<tr>
  <ti>Server Root</ti>
  <ti><path>/etc/apache2/</path></ti>
  <ti><path>/usr/lib/apache2/</path></ti>
</tr>
<tr>
  <ti>Konfigurationsverzeichnis</ti>
  <ti><path>/etc/apache2/conf/</path></ti>
  <ti><path>/etc/apache2/</path></ti>
</tr>
<tr>
  <ti>Konfigurationsdatei</ti>
  <ti><path>/etc/apache2/conf/apache2.conf</path></ti>
  <ti><path>/etc/apache2/httpd.conf</path></ti>
</tr>
<tr>
  <ti>Konfigurationsdatei</ti>
  <ti><path>/etc/apache2/conf/commonapache2.conf</path></ti>
  <ti><path>/etc/apache2/httpd.conf</path></ti>
</tr>
<tr>
  <ti>Vhosts Konfiguration</ti>
  <ti><path>/etc/apache2/conf/vhosts/</path></ti>
  <ti><path>/etc/apache2/vhosts.d/</path></ti>
</tr>
<tr>
  <ti>Modul-Konfiguration</ti>
  <ti><path>/etc/apache2/conf/modules.d/</path></ti>
  <ti><path>/etc/apache2/modules.d/</path></ti>
</tr>
<tr>
  <ti>Modul-Binärdateien</ti>
  <ti><path>/usr/lib/apache2-extramodules/</path></ti>
  <ti><path>/usr/lib/apache2/modules/</path></ti>
</tr>
</table>

<note>
Die vorgegebene Standardkonfiguration schließt nun automatisch Dateien in den
Verzeichnissen <path>modules.d/*.conf</path> und <path>vhosts.d/*.conf</path>
mit ein. Die Anweisungen in <path>httpd.conf</path> zu den vorgenannten
Verzeichnissen lauten allerdings <path>conf/modules.d/*.conf</path> und
<path>conf/vhosts.d/*.conf</path>. Dies kommt daher, weil Apache die
Konfiguration über das Verzeichnis <path>/usr/lib/apache{|2}</path> einliest,
das wiederum einen symbolischen Link auf <path>conf -> /etc/apache{|2}</path>
enthält.
</note>


<impo>
Falls Sie als Entwickler ein Ebuild an die von uns vorgenommenen Änderungen
anpassen möchten, dann verwenden Sie bitte keine fest einkodierten Pfade in
Ihrem Ebuild. Bitte lesen Sie die Dokumentation zu den eclasses über
geeignete Variablen, die man statt dessen verwenden kann.
</impo>

</body>
</section>
</chapter>

<chapter id="ebuild-update">
<title>Ebuild anpassen</title>
<section>
<body>


<p>
Durch die von uns vorgenommenen Änderungen muss nahezu jedes ebuild, das eine
Äbhängigkeit zu Apache hat, modifiziert werden. Die Apache 'herd' hat sich
bereits um die Mehrzahl der betroffenen Pakete gekümmert, da die ja auch
dafür zuständig sind. Es verbleiben aber eine Reihe von Paketen von anderen
Verantwortlichen, die noch angepasst werden müssen.
</p>

<p>
Dieses Kapitel führt einen Entwickler durch die an einem Ebuild nötigen
Anpassungen, um die neue Eclass zu verwenden. Dabei verwenden wir eins von
unseren etwas komplexeren Beispielen: <c>www-apache/mod_ldap_userdir</c>.
</p>


<note>
Falls Ihr Paket kein eigenständiges Apache Modul ist, sondern nur die von
Apache verwendeten Verzeichnisse kennen muss, dann verwenden Sie einfach
<c>inherit depend.apache</c> sowie die von der eclass zur Verfügung
gestellten Variablen. Siehe die <uri link="#depend-apache">depend.apache
</uri> Dokumentation.
</note>

</body>
</section>
<section>
<title>Überblick über die notwendigen Änderungen</title>
<body>

<ul>
  <li>
    Es ist eine neue Revisionsnummer nötig, da ein an die neue eclass
    angepasstes Paket nicht abwärtskompatibel zu den früheren Versionen
    von Apache ist.
  </li>
  <li>
    Stellen Sie sicher, dass <c>KEYWORDS</c> auf testing steht und (falls
    die Apache Pakete noch hart-maskiert sein sollten) fügen Sie das auch
    in packages.mask hinzu.
  </li>
  <li>
    Ersetzen Sie alle <c>DEPEND</c> auf Apache durch <c>need_apache1</c>
    (für Apache-1* Module), durch <c>need_apache2</c> (für Apache-2* Module)
    bzw. durch <c>need_apache</c> (für Module die von Apache-1* oder Apache-2*
    abhängen können - je nach verwendeten USE Flags).
  </li>
  <li>
    Entfernen Sie alle speziellen Anweisungenm die <c>SLOT</c> oder
    <c>DEPEND</c> modifizieren, z.B. durch Hacks mit <c>has_version</c>.
  </li>
  <li>
    Überprüfen Sie, ob <c>src_compile</c> in der eclass funktioniert. Falls
    nicht, setzen Sie <c>APXS1_ARGS</c> und/oder <c>APXS2_ARGS</c>, um andere
    benötigte Dateien zu kompilieren.
  </li>
  <li>Generell können alle Funktionen aus dem Ebuild entfernt werden.</li>
  <li>
    Passen Sie die Konfigurationsdatei des Modules so an, dass
    <c>IfDefine</c>s verwendet werden, um das Modul zu laden und zu
    konfigurieren.
  </li>
  <li>Fügen Sie alle Dokumentationsdateien zu <c>DOCFILES</c> hinzu.</li>
  <li>
    Geben Sie die Konfigurationsdatei an, die src_install installieren soll:
    <c>APACHE1_MOD_CONF</c>, <c>APACHE2_MOD_CONF</c>
  </li>
  <li>
    Geben Sie das <c>IfDefine</c> an, welches das Modul in der
    Konfigurationsdatei verwendet, damit pkg_postinst den Anwender darüber
    informieren kann, wie das Modul aktiviert wird: <c>APACHE1_MOD_DEFINE</c>,
    <c>APACHE2_MOD_DEFINE</c>
  </li>
  <li>
    Vergessen Sie nicht das Ebuild zu testen - und folgen Sie den Hinweisen zur
    Anpassung in diesem Dokument, falls Sie das noch nicht getan haben sollten.
  </li>
</ul>

</body>
</section>
<section>
<title>Ebuild globale Definitionen</title>
<body>


<pre caption="Diff-Ausgabe von mod_ldap_userdir-1.4.1 und
mod_ldap_userdir-1.4.1-r1 (angepasst)">
+inherit apache-module
+
-IUSE="apache2 ssl"
+IUSE="ssl"

 DESCRIPTION="Apache module that enables ~/public_html from an LDAP directory."
 HOMEPAGE="http://horde.net/~jwm/software/mod_ldap_userdir/"
-KEYWORDS="x86 ppc"
+KEYWORDS="~x86 ~ppc"

 SRC_URI="http://horde.net/~jwm/software/mod_ldap_userdir/${P}.tar.gz"

-DEPEND="=net-www/apache-1*
-               apache2? ( =net-www/apache-2* )
-               ssl? ( dev-libs/openssl )
-               net-nds/openldap"
+DEPEND="ssl? ( dev-libs/openssl )
+               net-nds/openldap"

 LICENSE="GPL-1"
 SLOT="0"
+
+DOCFILES="DIRECTIVES README user-ldif posixAccount-objectclass"
+APACHE1_MOD_CONF="${PVR}/47_mod_ldap_userdir"
+APACHE2_MOD_CONF="${PVR}/47_mod_ldap_userdir"
+APACHE1_MOD_DEFINE="LDAPuserdir"
+APACHE2_MOD_DEFINE="LDAPuserdir"
+
+need_apache
</pre>


<p>
Wir beginnen mit <c>inherit apache-module</c>, das seinerseits
<c>depend.apache</c> beerbt. <c>depend-apache</c> definiert zum Einen die
Verzeichnisse von Apache, zum Anderen (und noch wichtiger) definiert es drei
<c>DEPEND</c>s. <c>APACHAE1_DEPEND</c> für die Pakete, die apache-1*
benötigen, <c>APACHE2_DEPEND</c> für die Pakete, die apache-2* benötigen,
sowie <c>APACHE_DEPEND</c> für die Pakete, die in Abhängigkeit von den
USE-Flags entweder apache-1* oder apache-2* benötigen.
</p>

<note>
Zu diesem Zeitpunkt unterstützen wir keine gleichzeitige Installation beider
Versionen (obwohl das möglich ist), daher unterstützen wir auch nicht die
Installation eines Moduls für beide Versionen von Apache. Module sollten
nur dann einen <c>SLOT</c> ungleich <c>0</c> verwenden, wenn sie mehrere
Versionszeilen haben und jeweils eine andere Version von Apache unterstützen
(z.B.: <path>mod_layout-3.2.1-r1</path> hat <c>SLOT="1"</c> und
<path>mod_layout-4.0.1a-r1</path> hat <c>SLOT="2"</c>).
</note>

<p>
Die Hauptlast für die Modul-Pakete wird von <c>apache-module</c> getragen,
das vernünftige Vorgaben für <c>pkg_setup</c>, <c>src_compile</c>,
<c>src_install</c> und <c>pkg_postinst</c> voreinstellt.
</p>

<p>
Da <c>depend.apache</c> je nach Notwendigkeit <c>apache2</c> zu IUSE
hinzufügt, müssen Sie dieses im IUSE Ihres Ebuilds nicht mehr explizit
definieren. Lassen Sie bestehende Definitonen jedoch drin, falls Sie in Ihrem
Ebuild das USE-Flag irgendwo verwenden.
</p>

<p>
<c>depend.apache</c> übernimmt es, das richtige DEPEND zur Ihrem DEPEND
hinzuzufügen (falls Sie eine der Funktionen <c>need_apache{|1|2}</c>
verwenden), daher können Sie das Apache DEPEND aus Ihrem Ebuild entfernen.
</p>

<p>
<c>src_install</c> aus <c>apache-module</c> verwendet <c>DOCFILES</c>, um die
gesamte Dokumentation zu installieren. Dabei erkennt <c>src_install</c>
automatisch HTML- und andere Dateien und verwendet entsprechend <c>dodoc</c>
oder <c>dohtml</c>, um die Dateien in die richtigen Verzeichnisse zu
installieren.
</p>

<p>
<c>APACHE1_MOD_CONF</c> und <c>APACHE2_MOD_CONF</c> definieren die
Konfigurationsdatei, die für das Modul installiert werden soll. Diese wird
während <c>src_install</c> verwendet, so können die Pfade relativ zu dem
sein, was Sie in <c>APXS1_S</c> oder <c>APXS2_S</c> festlegen (Vorgabe ist
<c>${S}/src</c> falls es sich um ein Verzeichnis handelt, sonst nur
<c>${S}</c>).
</p>

<p>
<c>APACHE1_MOD_DEFINE</c> und <c>APACHE2_MOD_DEFINE</c> teilen der eclass mit,
welche <c>&lt;IfDefine MODULENAME&gt;</c> das Modul verwendet. Dies wird
verwendet, um dem Anwender Anweisungen anzuzeigen, wie das Modul zu aktivieren
ist.
</p>

</body>
</section>
<section>
<title>src_compile</title>
<body>

<p>
Unter Umständen wird <c>src_compile</c> benötigt, um spezielle Schritte
auszuführen, die die eclass nicht bearbeiten kann. Das sollten aber wenige
Fälle sein. In den meisten Fällen sollte es ausreichen das <c>Makefile</c>
zu überarbeiten und entsprechende Einträge zu <c>APXS1_ARGS</c> und
<c>APXS2_ARGS</c> hinzuzufügen.
</p>

<pre caption="Diff-Ausgabe von mod_ldap_userdir-1.4.1 und
mod_ldap_userdir-1.4.1-r1 (angepasst)">
-src_compile() {
-       local myconf
-       if use apache2; then
-               myconf="${myconf} --with-apxs2=/usr/sbin/apxs2"
-       else
-               myconf="${myconf} --with-apxs=/usr/sbin/apxs"
-       fi
-
-       use ssl &amp;&amp; myconf="${myconf} -with-tls"
-
-       myconf="${myconf} --with-activate"
-       ./configure ${myconf} || die "Configure failed"
-       make clean
-       make || die "Make failed"
-}

+src_compile() {
+       local myargs="-lldap -llber -c ${PN}.c"
+       use ssl &amp;&amp; myargs="${myargs} -D TLS=1"
+
+       APXS2_ARGS="${myargs}"
+       APXS1_ARGS="${myargs}"
+
+       apache-module_src_compile
+
+}
</pre>

<note>
Falls APXS1_ARGS oder APXS2_ARGS unterschiedlich sein müssen, gilt generell,
dass diese im globalen Adressbereich definiert sind. <path>mod_ldap_userdir
</path> unterscheidet sich in dieser Hinsicht, weil der Zustand des ssl
USE-Flags diese Variablen beeinflusst und es effizienter ist, diese Werte
nur in <c>src_compile</c> zu setzen, anstatt bei jedem Aufruf des Ebuilds
den USE check ablaufen zu lassen.
</note>

</body>
</section>
<section>
<title>src_install</title>
<body>

<p>
In den meisten Fällen wird <c>src_install</c> nicht benötigt. Ausnahmen gibt
es dann, wenn andere Verzeichnisse installiert oder die Dateiberechtigungen
verändert werden müssen.
</p>

<pre caption="Diff-Ausgabe von mod_ldap_userdir-1.4.1 und mod_ldap_userdir-1.4.1-r1 (angepasst)">
-src_install() {
-       if use apache2; then
-               exeinto /usr/lib/apache2-extramodules
-               doexe mod_ldap_userdir.so
-       else
-               exeinto /usr/lib/apache-extramodules
-               doexe mod_ldap_userdir.so
-       fi
-       dodoc DIRECTIVES README user-ldif posixAccount-objectclass
-}
+src_install() {
+       apache-module_src_install
+       if [ "${APACHE_VERSION}" == "2" ]; then
+               fperms 600 ${APACHE2_MODULES_CONFDIR}/$(basename ${APACHE2_MOD_CONF})
+       else
+               fperms 600 ${APACHE1_MODULES_CONFDIR}/$(basename ${APACHE1_MOD_CONF})
+       fi
+}
</pre>

<p>
Wie Sie sehen können haben wir in <path>mod_ldap_userdir</path> einige
Korrekturen hinzugefügt, die in der vorherigen Version nicht vorhanden waren.
So wurde eine Konfigurationsdatei eingefügt, ebenso das Setzen der dafür
nötigen Berechtigungen. Aber das Ganze ist immer noch in <c>apache-module</c>
eingebunden indem wir <c>apache-module_src_install</c> aus unserem
<c>src_install</c> heraus aufrufen. In den meisten Fällen wird aber
<c>src_install</c> gar nicht nötig sein.
</p>

<p>
Die Installation des Modules, der Konfigurationsdateien und der Dokumentation
an die richtigen Stellen im Dateisystem wird komplett von <c>src_install</c>
vorgenommen.
</p>

</body>
</section>
<section>
<title>Andere Funktionen</title>
<body>

<p>
In den meisten Fällen braucht pkg_postinst oder pkg_config nicht verwendet zu
werden, da es die eclass übernimmt dem Anwender die Anweisungen darüber
auszugeben, wie das Modul aktiviert werden kann und wo sich die
Konfigurationsdatei befindet. Falls zusätzliche Anweisungen für die
Einrichtung des Modules nötig sind, kann ein <c>pkg_postinst</c> hinzugefügt
werden. Das sollte dann aber selbst auch <c>apache1_pkg_postinst</c> bzw.
<c>apache2_pkg_postinst</c> aufrufen.
</p>

<pre caption="Diff-Ausgabe von mod_ldap_userdir-1.4.1 und mod_ldap_userdir-1.4.1-r1 (angepasst)">
-pkg_postinst() {
-       if use apache2; then
-               elog "Adjust /etc/apache2/conf/modules.d/47_mod_ldap_userdir.conf to match your setup and"
-               elog "add '-D LDAPuserdir' to your APACHE2_OPTS in /etc/conf.d/apache2"
-               elog "To configure the package run \"ebuild /var/db/pkg/net-www/${PF}/${PF}.ebuild config\""
-       fi
-}
-
-pkg_config() {
-       /usr/sbin/apacheaddmod \
-       ${ROOT}/etc/apache/conf/apache.conf \
-       extramodules/mod_ldap_userdir.so mod_ldap_userdir.c ldap_userdir_module \
-       define=LDAPuserdir addconf=conf/addon-modules/47_mod_ldap_userdir.conf
-}
</pre>

<p>
Mit der neuen Vorgabekonfiguration von Apache ist es für den Anwender nicht
länger nötig <c>httpd.conf</c> anzupassen, um einzelne Module zu aktivieren.
Sämtliche <path>*.conf</path>-Dateien im Verzeichnis <path>modules.d</path>
werden automatisch eingefügt. Jede Datei in diesem Verzeichnis sollte
vollständig von einem <c>&lt;IfDefine MODULNAME&gt;</c>-Block umschlossen
sein, damit die Anweisungen aus diesem Block nur ausgeführt werden, wenn der
Anwender ein <c>-D MODULNAME</c> in der Datei <c>/etc/conf.d/apache{|2}</c>
eingetragen hat.
</p>

</body>
</section>
<section>
<title>Konfigurationsdatei</title>
<body>

<p>
Die meisten Konfigurationsdateien werden nicht viele Anpassungen benötigen.
Das Wichtigste worauf man achten muss, ist es sicherzustellen, dass die
richtigen Verzeichnispfade beim Laden der Module verwendet werden:
</p>


<pre caption="LoadModule Anweisung">
<comment>(Bisherige Anweisung:)</comment>
LoadModule ldap_userdir_module  extramodules/mod_ldap_userdir.so

<comment>(Neue Anweisung:)</comment>
LoadModule ldap_userdir_module  modules/mod_ldap_userdir.so
</pre>

<p>
Desweiteren ist es nötig, dass jede Konfigurationsdatei vollständig in einen
<c>%lt;IfDefine MODULENAME&gt;</c>-Block eingeschlossen ist. Falls Sie das
nicht machen, wird das Modul grundsätzlich von Apache geladen. Das wollen wir
aber nicht - welches Modul geladen wird, soll der Anwender steuern können,
indem er die <path>/etc/conf.d/apache{|2}</path> Datei anpasst.
</p>

<pre caption="Beispiel .conf Datei">
&lt;IfDefine LDAPuserdir&gt;
  &lt;IfModule !mod_ldap_userdir.c&gt;
    <comment># Load the module:</comment>
    LoadModule ldap_userdir_module  modules/mod_ldap_userdir.so
  &lt;/IfModule&gt;
&lt;/IfDefine&gt;

&lt;IfModule mod_ldap_userdir.c&gt;
<comment># Stellen Sie hier eine vernünftige Vorgabekonfiguration ein:</comment>

    LDAPUserDir             public_html
    LDAPUserDirDNInfo       cn=root,dc=yourcompany,dc=com yourpassword
    LDAPUserDirBaseDN       ou=People,dc=yourcompany,dc=com

&lt;/IfModule&gt;
</pre>

<note>
Einige Module möchten Dateinamenserweiterungen einführen, die von
DirectoryIndex berücksichtigt werden sollen. Wir haben Apache entsprechend
erweitert und eine neue Anweisung AddDirectoyIndex eingeführt, die genau das
übernimmt. AddDirectoryIndex wird genauso verwendet wie DirectoryIndex, mit
dem Unterschied, dass der bisherige Inhalt von DirectoryIndex nicht ersetzt
wird. Darüberhinaus gibt es eine neue Anweisung RemoveDirectoryIndex, falls
das mal nötig werden sollte.
</note>

</body>
</section>
</chapter>

<chapter id="apache-module">
<title>apache-module eclass</title>
<section>
<title>Beschreibung</title>
<body>

<p>
Die eclass <c>apache-module</c> bietet eine Reihe von nützlichen Funktionen
um Apache-Module zu kompilieren. Da die meisten Module auf genau die gleiche
Weise kompiliert werden, ermöglicht dies extrem einfach aufgebaute Ebuilds.
</p>

</body>
</section>
<section>
<title>Funktionen</title>
<body>

<table>
<tr>
  <th>Funktion</th>
  <th>Beschreibung</th>
</tr>
<tr>
  <ti><c>apache_cd_dir</c></ti>
  <ti>Liefert den richtigen Pfad zum temporären build-Verzeichnis</ti>
</tr>
<tr>
  <ti><c>apache_mod_file</c></ti>
  <ti>Liefert den Pfad zum gerade erstellten und installationsbereiten Modul
  </ti>
</tr>
<tr>
  <ti><c>apache_doc_magic</c></ti>
  <ti>
    Kann mit einem optionalen Argument aufgerufen werden. Falls das Argument
    vorhanden ist, liefert die Funktion alle *.html Dateien in <c>${DOCFILES}
    </c>, andernfalls alle nicht-*.html Dateien.
  </ti>
</tr>
<tr>
  <ti><c>apache1_src_compile</c></ti>
  <ti>
    Ruft <c>${APXS1}</c> mit den Argumenten aus <c>${APXS1_ARGS}</c> auf.
    Falls ein Modul eine andere build-Parametrisierung benötigt, verwenden
    Sie <c>${APXS1}</c> in Ihrer eigenen src_compile Routine.
  </ti>
</tr>
<tr>
  <ti><c>apache1_src_install</c></ti>
  <ti>
    Installiert das Modul und die Konfigurationsdateien in die Verzeichnisse
    von Apache. Diese Funktion führt die Installation des Moduls und dessen
    Konfiguration durch, sowie die Bearbeitung aller damit zusammenhängenden
    ausführbaren Dateien sowie der Dokumentation.
  </ti>
</tr>
<tr>
  <ti><c>apache1_pkg_postinst</c></ti>
  <ti>Gibt die Standard-Konfigurationsmeldungen aus.</ti>
</tr>
<tr>
  <ti><c>apache2_pkg_setup</c></ti>
  <ti>
    Falls APACHE2_SAFE_MPMS gesetzt ist, prüft diese Funktion die installierten
    MPMs und gibt eine Fehlermeldung aus, falls keine sicheren MPMs installiert
    sind.
  </ti>
</tr>
<tr>
  <ti><c>apache2_src_compile</c></ti>
  <ti>
    Ruft <c>${APXS2}</c> mit den Argumenten aus <c>${APXS2_ARGS}</c> auf.
    Falls ein Modul eine andere build-Parametrisierung benötigt, verwenden
    Sie <c>${APXS2}</c> in Ihrer eigenen src_compile Routine.
  </ti>
</tr>
<tr>
  <ti><c>apache2_src_install</c></ti>
  <ti>
    Installiert das Modul und die Konfigurationsdateien in die Verzeichnisse
    von Apache. Diese Funktion führt die Installation des Moduls und dessen
    Konfiguration durch, sowie die Bearbeitung aller damit zusammenhängenden
    ausführbaren Dateien und der Dokumentation.
  </ti>
</tr>
<tr>
  <ti>
    <c>apache-module_pkg_setup</c><br />
    <c>apache-module_src_compile</c><br />
    <c>apache-module_src_install</c><br />
    <c>apache-module_pkg_postinst</c>
  </ti>
  <ti>
    Dies sind verallgemeinerte apache1_*- oder apache2_*-Funktionen. Sie
    erkennen automatisch die Apacheversion, für die das Modul installiert
    und konfiguriert werden soll.
  </ti>
</tr>
</table>

</body>
</section>
<section>
<title>Variablen</title>
<body>

<table>
<tr>
  <th>Variable</th>
  <th>Voreinstellung</th>
  <th>Beschreibung</th>
</tr>
<tr>
  <ti>
    <c>APACHE1_MOD_CONF</c><br />
    <c>APACHE2_MOD_CONF</c>
  </ti>
  <ti>Keine</ti>
  <ti>
    Der Ort der Modulkonfiguration innerhalb von <c>${FILESDIR]</c>, ohne
    die .conf Dateinamenserweiterung.
  </ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_MOD_DEFINE</c><br />
    <c>APACHE2_MOD_DEFINE</c>
  </ti>
  <ti>Keine</ti>
  <ti>
    Name des 'define's in der Modulkonfiguration. Wird für eine Ausgabe an
    den Anwender verwendet, dass dieser es zu der <path>/etc/conf.d/apache{|2}
    </path>Datei hinzufügen soll.
  </ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_EXECFILES</c><br />
    <c>APACHE2_EXECFILES</c>
  </ti>
  <ti>Keine</ti>
  <ti>Weitere ausführbare Dateien, die installiert werden sollen.</ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_MOD_FILE</c><br />
    <c>APACHE2_MOD_FILE</c>
  </ti>
  <ti>
    ${PN}.so<br />
    .libs/${PN}.so
  </ti>
  <ti>Das Modul, das von <c>src_install</c> installiert werden soll.</ti>
</tr>
<tr>
  <ti><c>APACHE2_SAFE_MPMS</c></ti>
  <ti>Keine</ti>
  <ti>
    Eine Liste von MPMs die mit diesem Modul zusammenarbeiten. Falls diese
    Variable nicht gesetzt ist, wird keine Prüfung über vorhandene MPMs
    vorgenommen. Falls unsichere MPMs installiert sind, bekommt der Anwender
    eine Warnung. Falls keine sicheren MPMs installiert sind, verweigert das
    Modul die Installation.
  </ti>
</tr>
<tr>
  <ti>
    <c>APXS1_S</c><br />
    <c>APXS2_S</c>
  </ti>
  <ti>Keine</ti>
  <ti>
    Pfade zu den temporären build-Verzeichnissen. Falls gesetzt, werden diese
    Werte von <c>apache_cd_dir</c> zurückgegeben, andernfalls gibt diese
    Funktion <c>${S}/src</c> (falls es sich um ein Verzeichnis handelt) oder
    <c>${S}</c> zurück.
  </ti>
</tr>
<tr>
  <ti>
    <c>APXS1_ARGS</c><br />
    <c>APXS2_ARGS</c>
  </ti>
  <ti>-c ${PN}.c</ti>
  <ti>Argumente die an das apxs-Werkzeug übergeben werden.</ti>
</tr>
<tr>
  <ti><c>DOCFILES</c></ti>
  <ti>Keine</ti>
  <ti>
    Die Dokumentationsdateien, die installiert werden sollen. Dateien mit der
    Endung .html werden mit <c>dohtml</c>, alle anderen Dateien mit
    <c>dodoc</c> installiert.
  </ti>
</tr>
</table>

</body>
</section>
</chapter>

<chapter id="depend-apache">
<title>depend.apache eclass</title>
<section>
<title>Beschreibung</title>
<body>

<p>
Die <c>depend.apache</c> eclass setzt die Vorgaben für verschiedene Apache
Verzeichnisse und übernimmt das Setzen von Abhängigkeiten zu Apache. Generell
sollte diese eclass nicht für Module verwendet werden, sondern nur für
Programme die von Apache abhängig sind, selbst aber keine Module sind.
(Module sollten die <uri link="#apache-module">apache-module</uri> eclass
verwenden.)
</p>

</body>
</section>
<section>
<title>Funktionen</title>
<body>

<table>
<tr>
  <th>Funktion</th>
  <th>Beschreibung</th>
</tr>
<tr>
  <ti><c>need_apache1</c></ti>
  <ti>
    Diese Funktion setzt die richtigen Abhängigkeitsinformationen für Pakete,
    die nur apache-1.x unterstützen. Pakete, die apache-1.x benötigen, sollen
    <c>need_apache1</c> im globalen Geltungsbereich aufrufen, um die
    Abhängigkeiten korrekt zu setzen.
  </ti>
</tr>
<tr>
  <ti><c>need_apache2</c></ti>
  <ti>
    Diese Funktion setzt die richtigen Abhängigkeitsinformationen für Pakete,
    die nur apache-2.x unterstützen. Pakete, die apache-2.x benötigen, sollen
    <c>need_apache2</c> im globalen Geltungsbereich aufrufen, um die
    Abhängigkeiten korrekt zu setzen.
  </ti>
</tr>
<tr>
  <ti><c>need_apache</c></ti>
  <ti>
    Diese Funktion setzt die richtigen Abhängigkeitsinformationen in Bezug
    auf die momentan eingestellten USE-Flags. Pakete, die beide Versionen von
    Apache verwenden können, sollen <c>need_apache</c> im globalen
    Geltungsbereich aufrufen, um die Abhängigkeiten korrekt zu setzen.
  </ti>
</tr>
</table>

</body>
</section>
<section>
<title>Variablen</title>
<body>

<table>
<tr>
  <th>Variable</th>
  <th>Voreinstellung</th>
  <th>Beschreibung</th>
</tr>
<tr>
  <ti><c>APACHE_VERSION</c></ti>
  <ti>1</ti>
  <ti>
    Wird gesetzt von <c>need_apache</c>, <c>need_apache1</c>,
    <c>need_apache2</c>. Speichert die Version von Apache, die erstellt werden
    soll.
  </ti>
</tr>
<tr>
  <ti>
    <c>APXS1</c><br />
    <c>APXS2</c>
  </ti>
  <ti>
    <path>/usr/sbin/apxs</path><br />
    <path>/usr/sbin/apxs2</path>
  </ti>
  <ti>Verzeichnispfad zum apxs-Werkzeug</ti>
</tr>
<tr>
  <ti>
    <c>APACHECTL1</c><br />
    <c>APACHECTL2</c>
  </ti>
  <ti>
    <path>/usr/sbin/apachectl</path><br />
    <path>/usr/sbin/apache2ctl</path>
  </ti>
  <ti>Verzeichnispfad zum apachectl Werkzeug</ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_BASEDIR</c><br />
    <c>APACHE2_BASEDIR</c>
  </ti>
  <ti>
    <path>/usr/lib/apache</path><br />
    <path>/usr/lib/apache2</path>
  </ti>
  <ti>Verzeichnispfad in dem der Server läuft</ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_CONFDIR</c><br />
    <c>APACHE2_CONFDIR</c>
  </ti>
  <ti>
    <path>/etc/apache</path><br />
    <path>/etc/apache2</path>
  </ti>
  <ti>Speicherort der <path>httpd.conf</path> Konfigurationsdatei</ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_MODULES_CONFDIR</c><br />
    <c>APACHE2_MODULES_CONFDIR</c>
  </ti>
  <ti>
    ${APACHE1_CONFDIR}/modules.d<br />
    ${APACHE2_CONFDIR}/modules.d
  </ti>
  <ti>
    Verzeichnis in dem die Module ihre Konfiguration installieren. Alle *.conf
    Dateien aus diesem Verzeichnis werden beim Start eingefügt.
  </ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_VHOSTDIR</c><br />
    <c>APACHE2_VHOSTDIR</c>
  </ti>
  <ti>
    ${APACHE1_CONFDIR}/vhosts.d<br />
    ${APACHE2_CONFDIR}/vhosts.d
  </ti>
  <ti>
    Verzeichnis der Virtual Host Konfiguration. Alle *.conf Dateien aus diesem
    Verzeichnis werden beim Start eingefügt.
  </ti>
</tr>
<tr>
  <ti>
    <c>APACHE1_MODULESDIR</c><br />
    <c>APACHE2_MODULESDIR</c>
  </ti>
  <ti>
    ${APACHE1_BASEDIR}/modules<br />
    ${APACHE2_BASEDIR}/modules
  </ti>
  <ti>Verzeichnis in dem die Binärdateien der Module installiert werden
  sollen.</ti>
</tr>
</table>

<note>
Alle Variablen sollten als Nur-Lese Variablen betrachtet und im Ebuild nicht
verändert werden. Falls man das doch tut, können unvorhersehbare Resultate
entstehen.
</note>

</body>
</section>
</chapter>

</guide>
