<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/security/en/vulnerability-policy.xml">
<title>Gentoo Linux Vulnerability Treatment Policy</title>
<author title="Author">
  <mail link="koon@gentoo.org">Thierry Carrez</mail>
</author>

<abstract>
This document describes the policy used in Gentoo Linux to treat
vulnerabilities discovered in the packages made available to our
users.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->
<license/>

<version>1.2.5</version>
<date>March 4, 2007</date>

<chapter>
<title>Scope</title>
<section>
<title>Supported architectures</title>
<body>

<p>
Gentoo Linux is offered on many different architectures. Some of these
architectures have more developers than others and, as such, are able to
respond to new security vulnerabilities more quickly.  While the ultimate goal
of the Gentoo Security project is to ensure that all architectures receive
security fixes at the same time, we must also balance that against releasing
security fixes and GLSAs as quickly as possible so that the majority of our
users are informed and protected.
</p>

<p>
For this reason, the security team separates Gentoo architectures into two
groups, <b>supported</b> and <b>unsupported</b>:
</p>

<ul>
<li><b>Supported:</b> these architectures must have a stable fix committed
before the GLSA can be released</li>
<li><b>Unsupported:</b> these architectures will be notified of new
vulnerabilities (cc on relevant bugs), however, we will not wait for a stable
fix on these arches before issuing the GLSA and closing the bug</li>
</ul>

<p>
Here is the list of currently supported architectures:
</p>

<table>
<tr>
  <th>Supported architectures</th>
</tr>
<tr>
  <ti>x86</ti>
</tr>
<tr>
  <ti>ppc</ti>
</tr>
<tr>
  <ti>sparc</ti>
</tr>
<tr>
  <ti>amd64</ti>
</tr>
<tr>
  <ti>alpha</ti>
</tr>
<tr>
  <ti>ppc64</ti>
</tr>
<tr>
  <ti>hppa</ti>
</tr>
</table>
  
<p>
All architectures are welcomed and encouraged to become a supported arch. There
are two straightforward criteria that need to be met in order to be officially
supported by the Gentoo Security project:
</p>

<ul>
<li>Appoint a developer who is the primary point of contact for security
issues related to your arch: we will look to this person to be
responsible for ensuring that security bugs are adequately remediated on
their particular architecture</li>
<li>Agree to adhere to the published timelines for testing and
marking packages as stable</li>
</ul>

</body>
</section>
<section>
<title>Kernels</title>
<body>

<p>
Currently kernels are not covered by the GLSA release process.
Vulnerabilities must still be reported and will be fixed, but 
<e>no GLSA will be issued</e> when everything is solved.
</p>

<note>
This policy should be changed when new tools are added to cover
security vulnerabilities affecting the different kernel sources.
</note>

</body>
</section>
<section>
<title>Non-stable packages</title>
<body>

<p>
Sometimes a vulnerability is found in a package that is not part of the stable
trees. This is the case when the vulnerability is a security regression in a
newer (~ARCH) ebuild, but the older (stable) packages are not affected, or when
the package has never had any stable ebuilds in the tree.
In this case the vulnerability must still be reported and will be fixed, but 
<e>no GLSA will be issued</e> when everything is solved.
</p>

<note>
This policy might be changed when our tools support more complex
upgrade paths and if a sufficient number of GLSA coordinators join
the security team.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Vulnerability feed</title>
<section>
<title>Published vulnerabilities</title>
<body>

<p>
Each vulnerability should initially be entered as a
<uri link="http://bugs.gentoo.org">Bugzilla</uri> entry with
product "Gentoo Security" and component "Vulnerabilities" (assigned to
<mail link="security@gentoo.org">security@gentoo.org</mail>).
Major security lists should have official scouts assigned to them which
should ensure that all vulnerabilities announced on these lists get a
security bugzilla entry.
</p>

</body>
</section>
<section>
<title>Confidential vulnerabilities</title>
<body>

<p>
Confidential vulnerabilities (for example coming from developer's direct
communication or restricted vendor-sec lists) should follow a specific
procedure. They should not appear as a public
bugzilla entry, but only in security-restricted media like a private
bugzilla section or the GLSAMaker tool. They should get
corrected using private communication channels between the GLSA coordinator
and the package maintainer.
</p>

<note>
Communication for confidential vulnerabilities should be properly encrypted.
They should be sent to specific security team members and encrypted with
their GPG key. The list of the security team members is available at 
<uri link="http://security.gentoo.org">security.gentoo.org</uri>, their key
IDs can be looked up on the
<uri link="http://www.gentoo.org/proj/en/devrel/roll-call/userinfo.xml">Gentoo
Linux Developers List</uri>
and their keys can be retrieved from the
<uri link="http://subkeys.pgp.net:11371">subkeys.pgp.net</uri> keyserver.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Dispatch</title>
<section>
<title>Severity level</title>
<body>

<p>
In order to seed the appropriate reaction times and escalation procedures, we
need to assign a severity level to each vulnerability. This severity
level must be based on how widespread the affected software is amongst Gentoo
users and depth of the vulnerability.
</p>

<p>
You can use the following two tables to help you assign the severity level:
</p>

<table>
<tr>
  <th>How widespread the package is</th>
  <th>Configurations affected</th>
  <th> </th>
</tr>
<tr>
  <ti>System package</ti>
  <ti>Default or specific</ti>
  <ti>A</ti>
</tr>
<tr>
  <ti>Common package (supposed present on at least 1/20 Gentoo
  installs)</ti>
  <ti>Default</ti>
  <ti>A</ti>
</tr>
<tr>
  <ti></ti>
  <ti>Specific</ti>
  <ti>B</ti>
</tr>
<tr>
  <ti>Marginal software (supposed present on less than 1/20 Gentoo
  installs)</ti>
  <ti>Default</ti>
  <ti>B</ti>
</tr>
<tr>
  <ti> </ti>
  <ti>Specific</ti>
  <ti>C</ti>
</tr>
<tr>
  <ti>Package that never had an affected version stable</ti>
  <ti>Default or Specific</ti>
  <ti>~</ti>
</tr>
</table>

<table>
<tr>
  <th>Evaluate the vulnerability type</th>
  <th> </th>
  <th>Corresponding GLSA severity</th>
</tr>
<tr>
  <ti>Complete remote system compromise: remote execution of arbitrary code
  with root privileges</ti>
  <ti>0</ti>
  <ti>high</ti>
</tr>
<tr>
  <ti>Remote active compromise: direct remote execution of arbitrary code
  with reduced or user rights on a server</ti>
  <ti>1</ti>
  <ti>high</ti>
</tr>
<tr>
  <ti>Local privilege escalation: flaw allowing root compromise when you
  have local access</ti>
  <ti>1</ti>
  <ti>high</ti>
</tr>
<tr>
  <ti>Remote passive compromise: remote execution
  of arbitrary code by enticing a user to visit a malicious server or using
  malicious data</ti>
  <ti>2</ti>
  <ti>normal</ti>
</tr>
<tr>
  <ti>Global service compromise: denial of service, passwords or full
  database leaks...</ti>
  <ti>3</ti>
  <ti>normal</ti>
</tr>
<tr>
  <ti>Others: cross-site-scripting, information leak...</ti>
  <ti>4</ti>
  <ti>low</ti>
</tr>
</table>

<p>
Here is the table of the resulting severity levels. They should be set
to the bugzilla severity level of the same name:
</p>

<table>
<tr>
  <th>Severity level</th>
  <th>Corresponding evaluations</th>
  <th>Target delay</th>
  <th>GLSA</th>
</tr>
<tr>
  <ti>Blocker</ti>
  <ti>A0, B0</ti>
  <ti>1 day</ti>
  <ti>yes</ti>
</tr>
<tr>
  <ti>Critical</ti>
  <ti>A1, C0</ti>
  <ti>3 days</ti>
  <ti>yes</ti>
</tr>
<tr>
  <ti>Major</ti>
  <ti>A2, B1, C1</ti>
  <ti>5 days</ti>
  <ti>yes</ti>
</tr>
<tr>
  <ti>Normal</ti>
  <ti>A3, B2, C2</ti>
  <ti>10 days</ti>
  <ti>yes</ti>
</tr>
<tr>
  <ti>Minor</ti>
  <ti>A4, B3, B4, C3</ti>
  <ti>20 days</ti>
  <ti>?</ti>
</tr>
<tr>
  <ti>Trivial</ti>
  <ti>C4, ~0, ~1, ~2, ~3, ~4</ti>
  <ti>40 days</ti>
  <ti>no</ti>
</tr>
</table>

<note>
The delay indicated in this table is what we want to be the maximum time
between the release of a fix by the upstream package developer and the release
of a stable ebuild and corresponding GLSA.
</note>

</body>
</section>
<section>
<title>Security Bug Wrangler role</title>
<body>

<p>
Someone should assume the responsibility of security bug
wrangler and do the following tasks as soon as a new vulnerability
enters <uri link="http://bugs.gentoo.org">Bugzilla</uri>:
</p>

<ul>
<li>checking for duplicates: if the bug describes a vulnerability already
    reported it should be resolved as DUPLICATE</li>
<li>checking for wrong component: if the bug is not about a vulnerability
    its component should be changed appropriately</li>
<li>checking if the bug is really a vulnerability and that it affects a
    Gentoo Linux package, otherwise resolve the bug as INVALID</li>
</ul>

<p>
During this phase it may be necessary to ask the reporter for details. The bug
remains with status NEW as long as necessary. When (if) the bug passes these
sanity tests, it should be accepted and the bug wrangler should do the
following:
</p>

<ul>
<li>rename the bug so that it includes category/package-name at start
    (for example: "net-mail/clamav: DoS using RAR files")</li>
<li>evaluate and assign a severity level (see above)</li>
<li>set the status to ASSIGNED</li>
<li>seed the status whiteboard to the correct severity code and status</li>
<li>optionally assign a GLSA coordinator for the bug, by adding the
    coordinator name to the status whiteboard</li>
</ul>

<warn>
You should not change bug severity once it has been assigned. If you want to
increase developer awareness that a bug needs care, use the Priority field
instead.
</warn>

</body>
</section>
<section>
<title>Timeframe and backup procedures</title>
<body>

<p>
This dispatch has to be done quickly after bug creation in order to seed
short delays for major vulnerabilities and to show appreciation to the bug
reporter. The target delay is 12 hours. The security bug wrangler has to
maintain a list of possible GLSA coordinators with disponibilities and
preferred areas of expertise. In order to ensure permanent dispatch, the
security bug wrangler job should have appropriate back-ups.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Bug correction and GLSA draft</title>
<section>
<title>GLSA Coordinator role</title>
<body>

<p>
The GLSA coordinator has responsibility for the following tasks:
</p>

<ul>
<li>determine what must be done in order to close the vulnerability (for
    example identify the upstream version containing the fix)</li>
<li>if no fix is available from upstream yet, ensure that the bug is correctly
    reported to the upstream developer and set status whiteboard to
    <c>upstream</c></li>
<li>if a fix is available, get the package maintainer involved to produce and
    commit an ebuild containing the fix (package maintainer/herd should be
    cc'd on the bug) and set status whiteboard to <c>ebuild</c></li>
<li>once an ebuild is committed, evaluate what keywords are needed for the fix
    ebuild and get arch-specific teams to test and mark
    the ebuild stable on their architectures (arch-teams should be cc'd on
    the bug) and set status whiteboard to <c>stable</c></li>
<li>arch-maintainers should mark the ebuild stable if there is no regression
    in the fix ebuild compared to the latest vulnerable version</li>
<li>in parallel, writing a draft GLSA using the GLSAMaker tool</li>
<li>when the corrective ebuild is ready for all supported archs, set the
    status whiteboard to <c>glsa</c></li>
</ul>

<note>
If the bug makes progress and the assigned GLSA coordinator does not react,
the other members of the security team can help keeping the bug rolling by
updating its status.
</note>

</body>
</section>
<section>
<title>Timeframe and escalation procedures</title>
<body>

<p>
In order to meet the target delay for vulnerability resolution, a number of
escalation procedures have been defined. These include:
</p>

<ul>
<li>when a bug in a waiting state needs urgent care,
    you should change the status whiteboard
    entries to their "+" counterpart: <c>upstream+</c>, <c>ebuild+</c>,
    <c>stable+</c> and <c>glsa+</c></li>
<li>if no upstream fix is available (<c>upstream+</c> status), a decision must
    be taken on masking the
    package: the security team can mask a package which is not depended on by
    itself, but need a TLP manager approval before masking a package which is
    not standalone</li>
<li>if the maintainer/herd does not show up for producing the ebuild during 48
    hours after summoning (<c>ebuild+</c> status), the security team should
    try to bump the ebuild by itself</li>
<li>if testing and marking stable takes too much time (<c>stable+</c> status),
    the security team will shout on IRC channels and gentoo-dev list to get
    more testers. It will either mark the ebuild stable by itself or, in the
    event this cannot be done due to stability issues, mask it (see security
    masking approval policy above)</li>
<li>if the GLSA coordinator does not show up to draft a GLSA (<c>glsa+</c>
    status), then another member of the security team should draft the GLSA
    and submit it to peer review</li>
</ul>

</body>
</section>
<section>
<title>Good practices for security bugs</title>
<body>

<p>
Security bugs differ from other bugs, in that an easy and simple upgrade path
must be presented to users through the GLSA. Therefore package maintainers and
GLSA coordinators should follow these good practices:
</p>

<ul>
<li>The ebuild including the security fix should have its own version number,
    so that it gets picked up in the normal system upgrade process: use
    rev-bumps if needed</li>
<li>The ebuild including the security fix should have a higher version number
    than any previously published version, so that an easy upgrade path can
    be proposed to the user</li>
<li>In case of a patch, it should only be applied to the more recent version,
    there is no need to rev-bump all ebuilds with a patched version</li>
<li>Vulnerable versions should be left in the tree until the bug enters the
    <c>stable</c> status, in order to correctly evaluate what keywords
    are needed for the fix version</li>
</ul>

</body>
</section>
<section>
<title>Temporary GLSAs</title>
<body>

<p>
If a <e>blocker</e> or <e>critical</e> or <e>major</e> vulnerability cannot
totally be corrected in the target delay
(for example a kernel vulnerability that has to be corrected on all sources),
an early warning GLSA should be written with workaround information
(for example: install these vanilla-sources, or here is the kernel patch to
apply to your sources). This GLSA will be replaced by the final GLSA when the
definitive correction is available.
</p>

<p>
If a common (type A or B) package is masked for security reasons, a temporary
GLSA should be issued to explain why the package is currently unavailable
and/or why people should uninstall the current version. This GLSA will be
replaced by the final GLSA when the fix becomes available and the package is
unmasked.
</p>

</body>
</section>
</chapter>

<chapter>
<title>GLSA publication process</title>
<section>
<title>Peer review</title>
<body>

<p>
Once ready, a GLSA should be submitted to peer review. At least two members
of the security team must approve the draft GLSA. Once the draft passes the
peer review process, it should be assigned an official GLSA number.
</p>

</body>
</section>
<section>
<title>GLSA release</title>
<body>

<p>
Once the GLSA passes the peer review process (and after making sure the ebuild
has made its way into the stable tree), the GLSA coordinator should
commit the GLSA XML in the Gentoo CVS repository.
Once this is done, the GLSA will automatically appear on the
<uri link="http://glsa.gentoo.org">official GLSA index page</uri> and
<uri link="http://www.gentoo.org/rdf/en/glsa-index.rdf">RDF feed</uri>.
</p>

</body>
</section>
<section>
<title>GLSA publication</title>
<body>

<p>
The GLSA text version must be published by the GLSA coordinator to the
following media:
</p>

<table>
<tr>
  <ti>Gentoo Linux official announcement mailing-list</ti>
  <ti>
  <mail link="gentoo-announce@gentoo.org">gentoo-announce@gentoo.org</mail>
  </ti>
</tr>
<tr>
  <ti>Bugtraq security mailing-list</ti>
  <ti>
  <mail link="bugtraq@securityfocus.com">bugtraq@securityfocus.com</mail>
  </ti>
</tr>
<tr>
  <ti>Full-disclosure security mailing-list</ti>
  <ti>
  <mail link="full-disclosure@lists.grok.org.uk">
  full-disclosure@lists.grok.org.uk
  </mail>
  </ti>
</tr>
<tr>
  <ti>Linuxsecurity.com advisories service</ti>
  <ti>
  <mail link="alerts@linuxsecurity.com">
  alerts@linuxsecurity.com
  </mail>
  </ti>
</tr>
<tr>
  <ti>Gentoo Linux announcement forum</ti>
  <ti><uri>http://forums.gentoo.org/viewforum.php?f=16</uri></ti>
</tr>
</table>

<p>
There should be one single email sent, with the following rules:
</p>

<ul>
<li>The <c>To:</c> field must be set to gentoo-announce</li>
<li>The <c>Cc:</c> filed must contain the other email addresses</li>
<li>The <c>From:</c> and <c>Return-Path:</c> must be set to the GLSA
    coordinator @gentoo.org address</li>
<li>The <c>Subject:</c> field must be "[ GLSA XXXXYY-ZZ ] Your vulnerability
    here"</li>
<li>The body should only contain the text version of the GLSA</li>
<li>The email must be signed by the GLSA coordinator GPG key</li>
</ul>

<note>
Developer key IDs can be found on the Gentoo Linux
<uri link="http://www.gentoo.org/proj/en/devrel/roll-call/userinfo.xml">
Developer list</uri>. All the security team GPG keys are published on public
key servers, including (but not limited to)
<uri link="http://subkeys.pgp.net:11371">subkeys.pgp.net</uri>.
</note>

<note>
To minimize errors in the publication process, the forum publication step is 
handled by an automatic poster when it receives the announcement.
</note>

<p>
When the GLSA has been published the corresponding bugzilla bug should be
resolved as FIXED, with the GLSA number referenced in the comments section
of the bug.
</p>

</body>
</section>
<section>
<title>GLSA errata</title>
<body>

<p>
Sometimes an error will slip through the peer-review process and an incorrect
GLSA will be published to the world. Depending on the severity of the error(s),
the following policy for erratum should be applied:
</p>

<table>
<tr>
  <th>GLSA error type</th>
  <th>Erratum action</th>
</tr>
<tr>
  <ti>Typos: presentation, grammar or syntax errors</ti>
  <ti>Do nothing</ti>
</tr>
<tr>
  <ti>Error in title: title is about another package or does not
  describe the vulnerability correctly</ti>
  <ti>An erratum GLSA should be published, replacing the erroneous one</ti>
</tr>
<tr>
  <ti>Error in description: the problem is not described correctly</ti>
  <ti>The GLSA XML should be corrected, no publication</ti>
</tr>
<tr>
  <ti>Omission: GLSA is correct but incomplete, you also need to update
  another package to get protection from that vulnerability</ti>
  <ti>A separate GLSA should be issued on the other vulnerable package</ti>
</tr>
<tr>
  <ti>Error in affected/unaffected versions number, but people using stable
  packages and applying GLSA instructions are protected anyway</ti>
  <ti>The GLSA XML should be corrected, no publication</ti>
</tr>
<tr>
  <ti>Error in the workaround, but people using stable
    packages and applying the workaround instructions are protected anyway,
    or they are not protected while the impact is DoS or minor</ti>
  <ti>The GLSA XML should be corrected, no publication</ti>
</tr>
<tr>
  <ti>Error in affected/unaffected versions number, people applying GLSA
  instructions are not at all protected</ti>
  <ti>An erratum GLSA should be published, replacing the erroneous one</ti>
</tr>
<tr>
  <ti>Error in the workaround, people applying the workaround
    instructions are not at all protected while the sevevity is execution of code
    or privilege escalation</ti>
  <ti>An erratum GLSA should be published, replacing the erroneous one</ti>
</tr>
</table>

</body>
</section>
</chapter>
</guide>
