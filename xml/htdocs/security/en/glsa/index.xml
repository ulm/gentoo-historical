<?xml version='1.0' encoding="utf-8"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/security/en/index.xml">

<author title="Author">
	<mail link="genone@gentoo.org">genone</mail>
</author>
<author title="Author">
	<mail link="solar@gentoo.org">solar</mail>
</author>
<abstract>Security</abstract>

<version>0.1</version>
<date>20031027</date>

<chapter>
	<title>Release Plan (initial draft)</title>
	<body>
	<p>
	The following release plain details the necessary steps a Gentoo Security developer must take to release a new GLSA.
	</p>
	<ul>
		<li>a dev writes a XML GLSA, using a normal editor or a specialty tool to be created at a later date.  As part of this process, the dev should ensure the following steps are completed:</li>
			<ul>
				<li>ensure syntactical correctness of the GLSA XML using tools such as <c>xmllint</c></li>
				<li>check for semantical errors, such as non-existant packages and/or versions as well as incorrect dates, etc.</li>
				<li>gpg-sign the XML GLSA with the developers key.  <em>All GLSAs MUST be signed by the sending developer</em></li>
				<li>cvs commit the XML GLSA and the signature to <path>gentoo-x86/glsa/</path> using a defined naming of YYYYMMDD-&lt;package&gt;-glsa.xml</li>
				<li>cvs commit the XML GLSA and the signature to <path>gentoo/xml/htdocs/security/en/glsa/</path> using the same naming scheme</li>
				<li>edit the GLSA index page (<path>gentoo/xml/htdocs/security/en/glsa/index.xml</path>) to include the new GLSA</li>
			</ul>		
	</ul>
	<p>
	Once completed, these steps ensure that the GLSA is then available over the website and over the rsync tree.  Users will be able to retrieve the new GLSA either by checking the web site or simply running <c>emerge sync</c>.
	</p>
	</body>
</chapter>
<chapter>
	<title>Portage Integration (pending)</title>
	<body>
	<p>
	The GLSA process will also be integrated with Portage to allow users to run <c>emerge --security</c> or a similar command and get only security-related updates and dependencies for their system.  The feature requirements and process definitions are still being finalized, but the final product is expected to work in a fashion similar to the one outlined below:
	</p>
	<ul>
		<li><c>emerge --security</c> checks for available GLSAs in the portage tree and optionally, may also check the website for new GLSAs not yet in the tree.</li>
		<li>It will then check which GLSAs are not applied to the system, as well as which of the pending GLSAs should be applied to the system.</li>
		<li>With that list, it then runs a series of validation and verification steps on the pending security updates, including validating the GPG signature and ensuring that the required dependencies of the update is available in the porteage tree.</li>
		<li>After each pending update has passed those tests, Portage will execute the actions defined in the GLSA.  This will generally be a package update, along with updating and/or installing any required dependencies.  Future additional options may also be defined for this step.</li> 
	</ul>
	</body>
</chapter>
</guide>
