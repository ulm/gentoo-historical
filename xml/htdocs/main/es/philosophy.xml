<?xml version='1.0' encoding='utf-8'?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/main/es/philosophy.xml,v 1.1 2005/09/27 01:31:11 yoswink Exp $-->

<!DOCTYPE mainpage SYSTEM "/dtd/guide.dtd">

<mainpage id="contract" lang="es">
<title>Contrato Social Gentoo Linux</title>
<author title="Autor">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Editor Es">
  <mail link="chiguire@gentoo.org">John Christian Stoddart</mail>
</author>
<author title="Editor Es">
  <mail link="yoswink@gentoo.org">José Luis Rivero</mail>
</author>
<author title="Traductor">
  <mail link="linuxblues@gentoo-es.org">LinuxBlues</mail>
</author>

<abstract>
El documento explica la filosofía que sigue Gentoo.
</abstract>

<version>1.1</version>
<date>2003-10-27</date>

<chapter>
<title>Contrato Social Gentoo Linux</title>
<section>
<body>	
	
<p>
Nuestro <b><uri link="/main/es/contract.xml">contrato social</uri></b>
pretende describir claramente y en conjunto las políticas de desarrollo y los
estándares del equipo de desarrollo de Gentoo Linux.
</p>
		
</body>
</section>
</chapter>
<chapter>
<title>La Filosofía de Gentoo</title>
<section>
<body>

<p>
He creado Gentoo porque no pude encontrar una distribución Linux que me
gustase.  La única cosa predominante en todas las distribuciones Linux es que
las "herramientas de la distro" que manejaban todo el sistema -- las
utilidades que se suponía que harían todo <e>más fácil</e> de usar --
realmente parecían requerir muchísima atención y me llevaron a pensar en la
forma en que yo quería hacer las cosas.  Quería decirles a <e>ellos</e> lo
que yo quería hacer, pero a ellos parecía interesarles más decirme a
<e>mí</e> lo que <e>ellos</e> querían que hiciese.
</p>

<p>
Así pues, yo creé Gentoo Linux, y diseñé Portage para ser una herramienta más
perfeccionada que las que habían existido con anterioridad. Para hacer ésto,
lo hice muy flexible permitiéndome hacer lo que quería hacer, y también
intenté hacerlo flexible para permitir a otros hacer lo que pensaba que ellos
querrían hacer.
</p>

<p>
Si ellos querían ver cómo se construía un paquete, podían mirar a un
ebuild fácil de entender y de aprender. Si ellos querían modificar a su
antojo la forma en que se construye, disponen de los parámetros USE para
hacerlo. Si ellos querían añadir un paquete, podían crear un nuevo ebuild
para el árbol. Si ellos querían usar un paquete, sencillamente lo emergen
y las dependencias se resuelven automáticamente.
</p>

<p>
A la gente le gustó el concepto Portage, y Gentoo Linux creció rápidamente.
Se nos ha llegado a conocer como una distribución "desde código fuente".
"Desde código fuente" es un aspecto muy importante, crucial, de Gentoo
y es algo que ha sido y continuará siendo necesario para Gentoo. Pero
no es la cuestión clave de Gentoo o la más fundamental. <e>La cuestión
fundamental es diseñar una tecnología que permita hacer a todo el mundo
lo que desee hacer, sin restricciones.</e>
</p>

<p>
Para resumir el corazón de Gentoo, se puede imaginar a un usuario sentado
ante un sistema Linux. ¿Qué quiere hacer? La filosofía de Gentoo es permitirle
hacer lo que él o ella pretendan hacer, sin inmiscuirse en la forma de
hacerlo.
</p>

<p>
En el tiempo en que Gentoo nació, el único inconveniente era la falta
de un método sencillo para construir los paquetes desde código fuente
adaptándolos a las especificaciones del usuario. Ahora, hemos logrado
hacer eso muy bien, pero lo que no hemos logrado tan bien ha sido el
soporte para paquetes pre-construidos, aunque Portage ha soportado
construir paquetes binarios desde su origen. Así que estamos haciendo
precisamente eso ahora.
</p>

<p>
Es importante que nuestras herramientas soporten paquetes binarios,
porque los paquetes binarios son ampliamente usados y gozan de una
amplia demanda en la comunidad Linux. Si nuestras herramientas no
soportan paquetes binarios, entonces no podemos decir que nuestras
herramientas estén diseñadas para permitir hacer a un usuario lo que
él o ella quisieran hacer. Si elegimos intencionadamente excluir el
soporte de binarios, entonces estamos intentando interferir en la
forma en que un usuario podría decidir enfrertarse a ciertos problemas,
imponiendo nuestra propia forma de ver a cómo enfrentarse a esos
problemas. Si no construimos paquetes binarios, entonces no estamos
avanzando en cuanto a que nuestras herramientas soporten dichos
paquetes, tampoco en cuanto a que otros puedan crear esos paquetes
binarios, ni tampoco en cuanto a poder *demostrar* que nuestras
herramientas funcionan bien con paquetes binarios. Además de estas
razones filosóficas, hay muchas otras razones prácticas para crear
paquetes binarios.
</p>

<p>
La filosofía de Gentoo, en un párrafo, es esta. Cada usuario tiene un
trabajo que necesita hacer. La meta de Gentoo es diseñar herramientas
y sistemas que permitan hacer a dicho usuario su trabajo tan eficiente
y placenteramente como sea posible, como <e>ellos</e> prefieran hacerlo.
Nuestras herramientas deben ser como un juguete al usarlas y deberían
ayudar al usuario a apreciar la riqueza de la comunidad Linux y del
software libre. Ésto solo es posible cuando la herramienta está diseñada
para reflejar y transmitir la voluntad del usuario, y dejar todas las
posibilidades abiertas, hasta la última, de su materia prima (el código
fuente). Si la herramienta fuerza al usuario a hacer cosas de una
determinada manera, entonces la herramienta trabaja contra, en lugar de
para, el usuario. Todos hemos experimentado situaciones en las que las
herramientas nos imponían formas de hacer las cosas. Esto es dar un paso
atrás, y es contrario a la filosofía de Gentoo.
</p>

<p>
Dicho de otra forma, la filosofía de Gentoo es crear mejores herramientas.
Cuando una herramienta hace su trabajo a la perfección, ni tan siquiera es
necesario preocuparse por ella, porque ni interrumpe ni da muestras de su
ejecución, ni hace interactuar con ella cuando no se desea. La herramienta
sirve al usuario, en lugar de que el usuario sirva a la herramienta.
</p>

<p>
La meta de Gentoo en el futuro es continuar esforzándose por crear
herramientas casi ideales. Herramientas que puedan acomodarse a las
necesidades de usuarios muy diferentes (con metas muy distintas) de
forma fácil y extremadamente poderosa. ¿No se ama a una herramienta
cuando hace precisamente lo que uno necesita?, ¿no nos hace sentir
estupendamente? Nuestra misión es proporcionar esta sensación a tanta
gente como sea posible.
</p>

<p>
Daniel Robbins<br/>
Anterior Arquitecto Jefe
</p>

</body>
</section>
</chapter>
</mainpage>
