# Catalyst (Hardened Stager) instructions
# by drobbins@gentoo.org, 03 Jun 2003
# updated, 09 Jul 2003

IMPORTANT: if you "su" before using stager, remember to "su -" rather than
just doing an "su". In particular, make sure that the $USER env var is set
to "root" rather than your original username after your "su -" is complete.
Otherwise, evolution and potentially other grp packages will fail to build.

ALSO IMPORTANT: Let's say you are building a stage tarball by typing "./stager
x86 2 20030605 20030605".  Then, you notice something went wrong with the
build, so you ^C stager to abort the building process.  It is possible that
many bind mounts will still be mounted. Type "mount" to see if they are. If you
see a lot of bind-mounts, be sure to run "./stager umount x86 2 20030605
20030605" to unmount the bind-mounts properly.


How to build a new stage1 tarball for dummies
=============================================

First, grab a stage1 to use as a "seed" for all your other stages:

mkdir stages
cd stages
wget http://path/to/latest/stage1-x86-20030101.tar.bz2
cd ..

*NEW STEP*

Before we can begin building, we need to generate a Portage snapshot. Stager no
longer uses a live Portage tree for building stages, instead it uses a static
Portage snapshot. To generate a portage snapshot from your existing portage
tree, type:

./stager snap 20030709

...where 20030709 is today's date.

Now, we will build a stage2 tarball that uses "generic" (x86) optimizations so
that it will run on any PC CPU. This generic stage2 tarball, because it is
optimized for "x86" and not a specific type of CPU, can be used to build new
*stage1* tarballs:

./stager x86 2 20030101 20030709

After the script completes, you should now have a new stage2 tarball alongside
your stage1 tarball:

stages/stage1-x86-20030101.tar.bz2
stages/stage2-x86-20030709.tar.bz2

Also, I should mention that typically "orig" and "dest" will be timestamps like
20030305 or something like that. 

You can now use the x86 (generic) stage2 to build a new stage1. Remember, a
non-generic stage2 (like athlon-xp or ev67) *cannot* be used to build a new
stage1. Here's how we build a new stage1 using stage2-x86-20030709.tar.bz2 as the
"source" and creating stage1-x86-20030709.tar.bz2 as the result:

./stager x86 1 20030709 20030709

Congratulations, you've started with an older 20030101 stage1 x86 tarball,
created an up-to-date 20030709 stage2 x86 tarball, and then in turn used it to
create an up-to-date 20030709 stage1 x86 tarball. You can now upload the 20030709
tarballs you've created to the experimental directory so that they can be used
by Gentoo users.

How to build a specialized stage2 and stage3 tarball for dummies
================================================================

Once you have an up-to-date stage1 tarball, you can use it to build up-to-date
stage2 tarballs that are optimized for a specific CPU sub-type. Here's how:

./stager athlon-xp 2 20030709 20030709 

or:

./stager ev67 2 20030709 20030709

These commands will use stage1-x86-20030709.tar.bz2 and
stage1-alpha-20030709.tar.bz2 as sources, and will produce
stage2-athlon-xp-20030709.tar.bz2 and stage2-ev67-20030709.tar.bz2 stages.

Note that we are now using the "athlon-xp" (and "ev67," in the second example)
CPU type so that our stage 2 is optimized for specific CPU sub-types. We didn't
use this directive with stage 1 tarballs or earlier "generic" stage2 tarballs
because it's important that these tarballs *always run on any CPU*. 

Note: to see a list of supported CPU sub-types, type:

./stager

A list of all CPU types and subtypes (each "generic" type is also considered a
subtype) will be displayed.  

Now, let's continue and build stage3 tarballs:

./stager athlon-xp 3 20030709 20030709 

or: 

./stager ev67 3 20030709 20030709

You now have the following tarball:

stages/stage3-athlon-xp-20030709.tar.bz2

or:

stages/stage3-ev67-20030709.tar.bz2

Ain't that cool? :)
