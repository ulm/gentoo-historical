#!/bin/bash
# Copyright 1999-2003 Gentoo Technologies, Inc.
# Distributed under the terms of the GNU General Public License v2
# $Header: /var/cvsroot/gentoo/users/zhen/catalyst/catalyst,v 1.23 2003/10/08 04:29:09 zhen Exp $

VERSION="2.0"

if [ -e files/catalyst.conf ]
then
	source files/catalyst.conf
else
	eerror"!!! Config file ${BASEDIR}files/catalyst.conf not found!!"
	exit 1
fi

source /sbin/functions.sh
source ${BASEDIR}/include/build_functions.sh

SNAPBALL=${SNAPDIR}/portage-${4}.tar.bz2

# unset so chroot doesn't get our custom setting
unset PORTDIR DISTDIR
[ ! -e "$MY_PORTDIR" ] && die "Portage dir $MY_PORTDIR not found, exiting."
[ ! -e "$MY_DISTDIR" ] && die "Distdir $MY_DISTDIR not found; exiting."

MY_DIST_LOCALS=${BASEDIR}/dists/${4}
install -d $MY_DIST_LOCALS
[ "$TMPDIR" = "" ] && CHROOTDIR="/var/tmp/catalyst/build/stage-${2}-${4}" || CHROOTDIR="$TMPDIR/stage-${2}-${4}"

MYPROFILEDIR="/usr/portage/profiles/${BUILDTYPE}-x86-${MAINVERSION}"

usage() {
	einfo "Catalyst: Gentoo Hardened Stage Building tool v${VERSION}"
	einfo "Copyright 2003, Gentoo Technologies. Licensed under the GPLv2"
	echo
	einfo "Syntax: catalyst <arch> <stage> srcver destver"
	einfo "Valid stage targets: [0|1|2|3]"
	echo
	einfo "Valid stage target architectures: "
	einfo "${SUBARCHES}"

} #end usage()

prechecks() {
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		usage
		exit 1
	fi
	
	if [ -z $1 ]
	then
		usage
		exit 1
	fi

	if [ "`whoami`" != "root" ]
	then
		eerror "$0: This script requires root privileges to operate."
		exit 1
	fi
	
	if [ -z ${MYPROFILEDIR} ]
	then
		eerror "!!! Profile missing! You must 'emerge sync'"
		exit 1
	fi

} #end prechecks() 

umount_all() {
	local x
	for x in /usr/portage/packages /usr/portage/distfiles /var/tmp/distfiles /proc /root/.ccache /dev
	do
		umount ${CHROOTDIR}${x} 2>/dev/null || true 
	done

} #end umount_all()

die() {
	#unmount filesystems if script is aborted
	[ -n "${1}" ] && einfo "${0}: error: ${1}"
	umount_all 
	exit 1

} #end die()

mount_all() {
	local x
	if [ ! -d /root/.ccache ]
	then 
		mkdir /root/.ccache || die "Couldn't create /root/.ccache dir"
	fi
	for x in /root/.ccache /proc  
	do
		[ ! -e ${CHROOTDIR}${x} ] && install -d ${CHROOTDIR}${x}
		mount --bind ${x} ${CHROOTDIR}${x} || die "Couldn't bind-mount ${x}"
	done
	[ ! -e ${SNAPBALL} ] && die "Can't find $SNAPBALL ; exiting." 	
	einfo "Extracting Portage tree snapshot..."
	tar xjf ${SNAPBALL} -C ${CHROOTDIR}/usr || die "Error extracting Portage snapshot"
	[ ! -e ${CHROOTDIR}/usr/portage/packages ] && install -d ${CHROOTDIR}/usr/portage/packages
	mount --bind ${MY_PKGDIR} ${CHROOTDIR}/usr/portage/packages || die
	[ ! -e ${CHROOTDIR}/usr/portage/distfiles ] && install -d ${CHROOTDIR}/usr/portage/distfiles
	mount --bind ${MY_DISTDIR} ${CHROOTDIR}/usr/portage/distfiles || die
	[ ! -e ${CHROOTDIR}/var/tmp/distfiles ] && install -d ${CHROOTDIR}/var/tmp/distfiles
	mount --bind ${MY_DIST_LOCALS} ${CHROOTDIR}/var/tmp/distfiles || die

	if [ "$2" = "3" ]
	then
		#stage3, needed for perl? Let's see.
		mount --bind /dev ${CHROOTDIR}/dev
	fi

} #end mount_all

unpack() {
	[ ! -d ${CHROOTDIR} ] && die "Chroot directory doesn't exist; exiting."
	tar xjpf ${1} -C ${CHROOTDIR} || die "Error unpacking ${1}; exiting."

} #end unpack()

tardir() {
	einfo "Creating ${DESTBALL}..."
	cd ${SRCFORTAR} || die "Couldn't chdir; exiting."
	tar -cjf ${DESTBALL} . --numeric-owner || die "Tarball creation error; exiting."
	cd ${BASEDIR}

} #end tardir()

makeconf() {
	[ ! -d ${1}/etc ] && install -d ${1}/etc
	cat ${BASEDIR}/files/make.conf.${MAINARCH} | sed -e "s:##CFLAGS##:${CFLAGS}:" \
	-e "s:##CHOST##:${CHOST}:" > ${1}/etc/make.conf || die

} #end makeconf()

print_build() { 
	echo
	einfo "Gentoo Hardened stager (Catalyst) V${VERSION} starting."
	einfo "Tarball Settings:"
	einfo  " Architecture: ${MAINARCH}"
	einfo  " Sub-architecture: ${SUBARCH}"
	einfo  " CFLAGS: ${CFLAGS}"
	einfo  " CHOST: ${CHOST}"
	einfo  " Source tarball: ${SRCBALL}"
	einfo  " Portage snapshot: ${SNAPBALL}"
	echo

} #end print_build()

is_special() {
	if [ $1 -e "snap" -o $1 = "enter" -o $1 = "umount" ]
	then
		return 0
	else
		return 1
	fi

} #end is_special()

check_special() {
	
	if [ $1 = "snap" ]
	then
		[ "$TMPDIR" = "" ] && CHROOTDIR="/var/tmp/catalyst/build/snap-${2}" || CHROOTDIR="$TMPDIR/snap-${2}"
		SNAPBALL=${SNAPDIR}/portage-${2}.tar.bz2

		install -d ${SNAPDIR}
		einfo "Cleaning up build directory..."
		rm -rf ${CHROOTDIR}
		install -d ${CHROOTDIR}
		einfo "Creating Portage tree snapshot..."	
		rsync -a --exclude /packages/ --exclude /distfiles/ --exclude CVS/ ${MY_PORTDIR}/ ${CHROOTDIR}/portage/ || die
		einfo "Creating Portage tree tarball..."
		( cd $CHROOTDIR; tar cjf ${SNAPBALL} portage ) || die
		einfo "done!"
		exit 0
	fi

	if [ $1 = "umount" ]
	then
		einfo "Unmounting..."
		umount_all
		exit 0

	fi
	
	if [ $1 = "enter" ]
	then
		install -d ${CHROOTDIR}
		cd ${CHROOTDIR}
		mount_all
		einfo "Chrooting to ${CHROOTDIR}..."
		$CHROOT ${CHROOTDIR}
		umount_all
		exit 0
	fi
	
} #end check_special()

## START MAIN PROGRAM ##

# more or less a sanity check
prechecks $1

if [ "$1" = "enter" ] || [ "$1" = "umount" ] || [ "$1" = "snap" ]
then
	check_special $1 $2
	shift
fi

# all of the special preconditions should be filled, so start
# the body of the program now

get_arch $1 $2 $4
pre_build $2 $3 $4
build $2
post_build $2

# vim ts=4
