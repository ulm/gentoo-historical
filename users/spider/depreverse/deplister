#! /bin/bash 




# Hackish tool meant to be ran toggled by a FEATURE flag to track dependencies. 
# reads a list of files from STDIN and writes a list of files on STDOUT.

# basically, this currently deals with:
# dynamic executable binaries
# libraries
# python code ( .py files and imports )
# all scripts (#!/usr/bin/bash and #!/usr/bin/env bash )
# Perl code, at least partially?

ulimit -c 0

# Parse stdin ->  list.  Ugly sed. Ugly, but works. 
# Replaces odd chars with their quoted version. 
LIST=`sed "s:[]['\"*?{}]:\\\\\&:g"`

# ripped from find-requires 
EXELIST=`echo $LIST | xargs -r file | egrep -v ":.* (commands|script) " | \
	grep ":.*executable" | cut -d: -f1`

# Ripped too. I highly doubt this covers everything. :(
SCRIPTLIST=`echo $LIST | xargs -r file | egrep ":.* (commands|script) " | cut -d: -f1 `
LIBLIST=`echo $LIST | xargs -r file | grep ":.*shared object" | cut -d : -f1`
# List of perl-stuffies. 
PERLLIST=""
PYTHONLIST=""
PYTHONREQ=""
# List of engines for scripts (interpreters).
ENGINES=""

#extract the python include path
PYTHONPATH=`./python.path | sed -e s:,:\\\n:g -e s:'\['::g -e s:'\]'::g -e s:\'::g`



for FILE in $EXELIST; do
	if [ -r $FILE -a -x $FILE ]; then
		ldd $FILE |grep -v 'libNoVersion.so' | grep -v 'linux-gate.so' | awk '/=>/ { print $3 }'
	fi
done | sort -u | sed "s/['\"]/\\\&/g" | sort -u

for FILE in $LIBLIST; do
	if [ -r $FILE ]; then
		ldd $FILE |grep -v 'libNoVersion.so' | grep -v 'linux-gate.so' | awk '/=>/ { print $3 }'
	fi
done | sort -u | sed "s/['\"]/\\\&/g" | sort -u

for FILE in $SCRIPTLIST; do
	if [ -x $FILE -a -r $FILE ]; then
		LINE=`head -n 1 $FILE | sed -e 's/^\#\![   ]*//' `
		 # this traps the "real" dependency in case something uses "/usr/bin/env python" or "/bin/env perl"
		case $LINE in
			*bin/env\ *) 
				# this is brutish and ugly, can be prettified.
				# however, it adds both the real interpreter, and the "env" one.
				# Mark though, that "env" is probably not needed, since its in "coreutils"
				# might be necessary for something somewhere however, and I want to be complete.
				ENGINE=`echo $LINE | cut -d" " -f1`
				ENGINES="$ENGINES $ENGINE"
				ENGINE=`echo $LINE | cut -d" " -f2`
				ENGINES="$ENGINES `which $ENGINE`" ;;
			*)  
				ENGINE=`echo $LINE | cut -d" " -f1`
				ENGINES="$ENGINES $ENGINE";;
		esac
		case $LINE in
			*perl*) PERLLIST="$PERLLIST $FILE" ;;
			*python*) PYTHONLIST="$PYTHONLIST $FILE" ;;
		esac
		
	fi
done 
if [ -n "$ENGINES" ] ; then
	echo $ENGINES | tr '[:blank:]' \\n | sort -u
fi

for FILE in $LIST; do
	if [ -r $FILE ]; then
		if [ "${FILE%.pm}" != "${FILE}" ]; then
			PERLLIST="$PERLLIST $FILE"
		fi
		if [ "${FILE%.py}" != "${FILE}" ]; then
			PYTHONLIST="$PYTHONLIST $FILE"
		fi
	fi
done

for FILE in $PYTHONLIST; do
	grep import $FILE | while read LINE ; do
		LINE2=`echo "$LINE" | grep from | cut -d" " -f-2 |sed s:from:import:g`
		if [ -n "$LINE2" ]; then
			LINE="$LINE2"
		fi
		echo "$LINE" | sed  s/,/\\nimport/g
	done
done | sort -u | cut -d" " -f2 | while read MODULE;
do
	for PLACE in $PYTHONPATH; do
		if [ -f "$PLACE/$MODULE.py" ]; then
			ls -1 "$PLACE/$MODULE.py"
		fi
		if [ -f "$PLACE/$MODULE.so" ] ; then
			ls -1 "$PLACE/$MODULE.so"
		fi
	done
done | sort -u

for FILE in $PERLLIST; do
	echo $FILE | ./perl.req  | sed -e s,::,/,g | while read MODULE; do
		perl -e ' print join ("\n", @INC);' | while read PLACE; do
			if [ -e "$PLACE/$MODULE.pm" ]; then
				ls -1 "$PLACE/$MODULE.pm"
			fi
		done
	done
done | sort -u
