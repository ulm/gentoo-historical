-------------------------------------------------------------------------------
                   Gentoo Java Packaging Guide
-------------------------------------------------------------------------------
   
Author : Karl Trygve Kalleberg <karltk@gentoo.org>
Updated: 2004-06-20


0.   Preliminaries
1.   Background
2.   Naming
2.1  Package names
2.2  Directory names
3.   Versioning
4.   Writing the ebuild
4.1  The java-pkg eclass
4.2  The java eclass
5.   Dependencies
6.   Lifecycle

0. Preliminaries
----------------

The first thing you should know is that the build systems for open-sourced Java
projects generally leave almost everything to be desired. A good dose of
patience is necessary to squeeze the hair-brained ant-based miscreations of
acid-tripped java hackers into submission for the regular Linux distribution.
You have been warned.

1. Background
-------------

This guide tries to document best-practises for writing ebuilds for programs
written in the Java language on the Gentoo Linux distribution.

In the Java world, installation infrastructure like the autotools
(automake, autoconf, ...) do not exist (yet), and it is common practice for
Java developers to bundle everything they could possibly need in their 
releases.


2. Naming
---------

2.1 Package names
-----------------

In line with the general Gentoo ebuild naming policies, all package names shall
be lowercase.

Packages that do not compile their product from source code shall have the -bin
suffix. We should strive to only accept ebuilds that build their product from
source code, because:
* End-users may want to manually patch or tweak the sources between src_unpack
  and src_compile.
* The USE flags will normally impact on which features are to be compiled in,
  and which dependencies we want to allow.
* When security flaws are found, we want to issue a hotfix immediately. It is
  not always feasible to wait for the upstream project to make a new release.
  With binary-only packages, the only fix we can offer is disabling the software
  entirely and masking it.
* It is common that we need to apply Gentoo-specific tweaks and intermediary
  patches when upstream takes a long time to issue a new release, which is
  almost always only possible when we compile from sources.
* There is an obvious correspondence between the source code and the resulting
  binaries, so the user is guaranteed that there are no trojans hiding in the
  binaries (we don't guarantee the lack of trojans in the source code itself,
  but at least it's easier to find there).
* We guarantee to our users that the source exists and compiles properly, the
  basis of regular open-source development.
* For immature library packages, where documentation is often scanty, the user
  can easily run javadoc on the sources, as a stop-gap measure, without needing
  to dig out the source code from upstream.

In cases where multiple vendors supply implementations of the same standards,
the package name shall have a vendor prefix.

Examples: ibm-jdk-bin and sun-javamail-bin.

2.2 Directory names
-------------------

In generate, the directory policies are handled for you by the helper functions
in the java-pkg eclass.

These functions adhere to the following pathname conventions:

* .jar files created from source code are installed in
  /usr/share/${PN}-${SLOT}/lib/
* .jar pre-built files not compiled by the ebuild go into /opt/${PN}/${SLOT}
* Javadoc documentantation is installed in /usr/share/doc/${PF}/html/api/
* user-runnable scripts are installed in /usr/bin
* system-wide env files are in /usr/env.d/java
* user-specific env files are in ${HOME}/.gentoo/env.d/

3. Versioning
-------------

The packages should be versioned according to the general Gentoo ebuild
guidelines. 

Libraries should be SLOTed according to interface. If two versions of a given
library follow the same API, it should be SLOTted in identically.

This allows for concurrent installations of multiple versions of a given
library, one for each SLOT, i.e., one for each interface.

Example: xerces-2.4.1 and 2.4.2 are both in SLOT 2.4, as they supply the 
same interface, whereas xerces-2.6.0 and 2.6.1 are in SLOT 2.6, allowing
programs that require the 2.4 interface to coexist with programs requiring the
2.6 interface.

When putting two versions of the same library in the same SLOT, you
should make certain they are indeed binary compatible.

4. Writing the ebuild 
--------------------

The normal Gentoo style guides for ebuilds apply. Furthermore, your ebuild will
in all likelyhood need to use the java-pkg eclass, described in 3.1.

When packagaging java programs, always try to follow these simple guidelines:

* Add support for jikes, as it's sometimes more an order of magnitude faster at
  compiling than is any of the javac implementations.

* In RDEPEND, use ">=virtual/jre-<minimal-version>", in DEPEND, use 
  ">=virtual/jdk-<minimal-version", unless of course javac, jar or some other
  developer tool from the JDK is required at runtime for normal operation of 
  your package. Note: Even libraries should have the JRE only in their RDEPEND.

* If the program provides documentation, in particular API documentation, make
  certain your ebuild runs javadoc and installs the documentation using
  java-pkg_dohtml, see 3.1.3.

* Add support for pre-install unit testing, and have this be end-user selectable
  through the junit useflag in IUSE.

* Always remove supplied .jar-files with a source drop and replace with our
  own libraries, using java-pkg_jar-from, see 3.1.2

* Always add an easily understandable reason after 'die', so that end-users 
  will provide the maintainers with sensible feedback should the build fail.

* As far as possible, _do not_ clutter up the environment by adding env
  files to /etc/env.d/. Rather, store your env file in /etc/env.d/java/
  and have the command line scripts source that env file on startup.
  Otherwise, developers, who regularily override CLASSPATH, CATALINA_HOME
  and other env vars, will have problems running regular apps.

  Example snippets from /usr/bin/javacc:

  #! /bin/sh
  . /etc/env.d/java/22javacc
  [ -f "${HOME}/.gentoo/env.d/22javacc" ] && . ${HOME}/.gentoo/env.d/22javacc

  This allows the user to override the system-wide defaults, even without
  cluttering his environment.
    
4.1 The java-pkg eclass
-----------------------

This eclass is for regular Java programs and libraries. It currently has three
functions of interest:

* java-pkg_dojar:
  This function takes a list of jar files and installs them into the image.

* java-pkg_jar-from:
  This function takes a slotted library name as argument, and creates a symlink
  to the .jar files provided by this library into cwd.

  This is the preferred way to resolve external libraries, next after appending
  their paths to build.properties.

* java-pkg_dohtml:
  This function takes a list of directories, containing javadoc-generated API
  documentaiton, and installs them into the image.

4.2 The java eclass
-------------------

This eclass is only useful when packaging a Java Virtual Machine.

When packaging, please follow these guidelines

* when installing a JDK, it's okay to set it as the default system VM, using
  java_pkg_postinst XXX: rename to java_set-default-vm?

* when installing a JRE, you can only set it as the default system VM, if no
  JDK is set. Check for the presence of ${JAVAC}, and if not, call
  java_pkg_postinst.

* JDKs and JREs should warn when they are removed, if they are the default
  system VM; in pkg_prerm, check if java-config -J points at your VM, 
  and warn if it does.
  
5. Dependencies
---------------

As you should not keep included .jar files for which there exists no source
code, these .jars will need to be satisfied by external packages.

When depending on an external package, take care that you depend on a
sufficiently recent version, and explicitly ensure at building time that 
the providing package gives you the correct interface, i.e. the correct 
SLOT, see java-pkg_jar-from.

XXX: How should we handle closure of deps, i.e. package X depends on jars from 
Y which depend on jars from Z? Should java-pkg_jar-from do the transitive
closure to recursively include all .jars required?


6. Lifecycle
------------

XXX: Any ideas for good guidelines for when it's okay to remove old ebuilds?

When removing an ebuild, always make certain it's not depended on my other
pacakges.

When removing VMs, be very careful that you are not breaking a profile on a
different arch by your removal.
