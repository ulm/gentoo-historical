#!/bin/bash
# Peter Johanson, 28 Sep 2002 <latexer@gentoo.org>
# Copyright 2002 Gentoo Technologies, Inc; http://www.gentoo.org
# Released under the GNU General Public License version 2

#
# cryptoinitrd - script for creating cryptolooped / partitions
# generates the required initrd to decrypt /
# Run this *after* doing all the installation steps for gentoo
#

# Large portions of the initrd creation process are from 
# Daniel Robbins' livecd-ng script from Gentoo.
# Thanks for his basis to work from.
#


# Variables to be changed if necessary

GENTOO_ROOT=/
#GENTOO_ROOT=/mnt/gentoo
DIST_DIR=/usr/portage/distfiles
DIST_MIRROR="http://gentoo.oregonstate.edu/"
CRYPTO_MODS=${GENTOO_ROOT}/usr/src/linux/crypto
CRYPTO_TMP=/tmp/crytpoinitrd
CRYPTO_CONFIG=${CRYPTO_TMP}/config
INITRD_ROOT=${CRYPTO_TMP}/crypto-initrd
BUSYBOX_PACKAGE="busybox-0.60.5"
BUSYBOX_DIR=${CRYPTO_TMP}/${BUSYBOX_PACKAGE}
UTIL_LINUX="util-linux-2.11y"
UTIL_LINUX_DIR=${CRYPTO_TMP}/${UTIL_LINUX}
CRYPTOAPI_UTIL_PATCH="${UTIL_LINUX}-crypt-gentoo.patch"
CRYPTOINITRD_RUN_LOCATION=/root/cryptoinitrd

usage() {
	echo "cryptoinitrd Usage"
	echo "------------------"
	echo "cryptoinitrd <option>"
	echo ""
	echo "Options -"
	echo "---------"
	echo "all		Perform all the steps to generate an initrd"
	echo "fetch		Fetch the busybox and util-linux tarballs"
	echo "linuxrc		Configure and create a linuxrc"
	echo "busybox		Generate the busybox binary"
	echo "mount-utils	Create mount and losetup used to mount encrypted filesystems"
	echo "clean 		Clean up the temporary build directory"
	echo "delete		Delete the entire cryptoinitrd directory"
}

fetch_files() {
	cd ${GENTOO_ROOT}/usr/portage/distfiles
	if [ ! -e ${GENTOO_ROOT}/${DIST_DIR}/${BUSYBOX_PACKAGE}.tar.bz2 ]; then
		wget ${DIST_MIRROR}/${BUSYBOX_PACKAGE}.tar.bz2
	else
		echo "${BUSYBOX_PACKAGE}.tar.bz2 found. Not fetching"
	fi
	if [ ! -e ${GENTOO_ROOT}/${DIST_DIR}/${UTIL_LINUX}.tar.bz2 ]; then
		wget ${DIST_MIRROR}/${UTIL_LINUX}.tar.bz2
	else
		echo "${UTIL_LINUX}.tar.bz2 found. Not fetching"
	fi
	if [ ! -e ${GENTOO_ROOT}/${DIST_DIR}/${CRYPTOAPI_UTIL_PATCH}.gz ]; then
		wget ${DIST_MIRROR}/${CRYPTOAPI_UTIL_PATCH}.gz
	else
		echo "${CRYPTOAPI_UTIL_PATCH}.gz found. Not fetching"
	fi
}

linuxrc_create() {
	# Generate a linuxrc script for us. Use this till we actually have
	# Something created to generate it.

	cp ${GENTOO_ROOT}/usr/share/cryptoinitrd-0.1/linuxrc ${CRYPTO_TMP}/

	for i in blowfish aes cast5 des des_ede3 dfc idea mars rc5 rc6 serpent twofish; do \
		if [ -e ${GENTOO_ROOT}/${CRYPTO_MODS}/ciphers/cipher-$i.o ]; then
			CIPHERS="${CIPHERS} $i"
		fi
	done
	

	echo "Available ciphers:${CIPHERS}"
	echo "Enter a cipher to be used:"
	read tmp
	CIPHER_CHOICE=$tmp
	if [[ "${CIPHERS}" != *${CIPHER_CHOICE}* ]]; then
		echo "Not a valid cipher. Re-run cryptoinitrd."
		exit 1
	fi

	# It's really ugly doing this over and over again, i'll fix this later.
	# works for now.

	echo "Do you have a seperate, encrypted partition for / ?"
	read tmp
	if [ $tmp = "y" ] || [ $tmp = "yes" ]; then
		ROOT=y
		echo "Enter the device / is mounted to"
		read tmp
		ROOT_DEV=$tmp
		if [ ! -b /dev/${ROOT_DEV} ]; then
			echo "/dev/${ROOT_DEV} is not a valid device."
			exit 1
		fi
		echo "Enter the FS type:"
		read tmp
		ROOT_FS=$tmp
	else
		ROOT=n
	fi
	echo "Do you have a seperate, encrypted partition for /home ?"
	read tmp
	if [ $tmp = "y" ] || [ $tmp = "yes" ]; then
		HOME=y
		echo "Enter the device /home is mounted to"
		read tmp
		HOME_DEV=$tmp
		if [ ! -b /dev/${HOME_DEV} ]; then
			echo "/dev/${HOME_DEV} is not a valid device."
			exit 1
		fi
		echo "Enter the FS type:"
		read tmp
		HOME_FS=$tmp
	else
		HOME=n
	fi
	echo "Do you have a seperate, encrypted partition for /usr ?"
	read tmp
	if [ $tmp = "y" ] || [ $tmp = "yes" ]; then
		USR=y
		echo "Enter the device /usr is mounted to"
		read tmp
		USR_DEV=$tmp
		if [ ! -b /dev/${USR_DEV} ]; then
			echo "/dev/${USR_DEV} is not a valid device."
			exit 1
		fi
		echo "Enter the FS type:"
		read tmp
		USR_FS=$tmp
	else
		USR=n
	fi
	echo "Do you have a seperate, encrypted partition for /var ?"
	read tmp
	if [ $tmp = "y" ] || [ $tmp = "yes" ]; then
		VAR=y
		echo "Enter the device /var is mounted to"
		read tmp
		VAR_DEV=$tmp
		if [ ! -b /dev/${VAR_DEV} ]; then
			echo "/dev/${VAR_DEV} is not a valid device."
			exit 1
		fi
		echo "Enter the FS type:"
		read tmp
		VAR_FS=$tmp
	else
		VAR=n
	fi
	echo "Do you have a seperate, encrypted partition for /tmp ?"
	read tmp
	if [ $tmp = "y" ] || [ $tmp = "yes" ]; then
		TMP=y
		echo "Enter the device /tmp is mounted to"
		read tmp
		TMP_DEV=$tmp
		if [ ! -b /dev/${TMP_DEV} ]; then
			echo "/dev/${TMP_DEV} is not a valid device."
			exit 1
		fi
		echo "Enter the FS type:"
		read tmp
		TMP_FS=$tmp
	else
		TMP=n
	fi
	
	cd ${CRYPTO_TMP}
	mv linuxrc linuxrc.orig
	sed -e "s:CIPHER=:CIPHER=${CIPHER_CHOICE}:" \
		linuxrc.orig > linuxrc
	rm linuxrc.orig

	if [ "${ROOT}" = "y" ]; then
		mv linuxrc linuxrc.orig
		sed -e "s:#ROOT#::" \
		    -e "s:#ROOT_DEV=:ROOT_DEV=${ROOT_DEV}:" \
		    -e "s:#ROOT_FSTYPE=:ROOT_FSTYPE=${ROOT_FS}:" \
			linuxrc.orig > linuxrc
	fi
	if [ "${HOME}" = "y" ]; then
		mv linuxrc linuxrc.orig
		sed -e "s:#HOME#::" \
		    -e "s:#HOME_DEV=:HOME_DEV=${HOME_DEV}:" \
		    -e "s:#HOME_FSTYPE=:HOME_FSTYPE=${HOME_FS}:" \
			linuxrc.orig > linuxrc
	fi
	if [ "${USR}" = "y" ]; then
		mv linuxrc linuxrc.orig
		sed -e "s:#USR#::" \
		    -e "s:#USR_DEV=:USR_DEV=${USR_DEV}:" \
		    -e "s:#USR_FSTYPE=:USR_FSTYPE=${USR_FS}:" \
			linuxrc.orig > linuxrc
	fi
	if [ "${VAR}" = "y" ]; then
		mv linuxrc linuxrc.orig
		sed -e "s:#VAR#::" \
		    -e "s:#VAR_DEV=:VAR_DEV=${VAR_DEV}:" \
		    -e "s:#VAR_FSTYPE=:VAR_FSTYPE=${VAR_FS}:" \
			linuxrc.orig > linuxrc
	fi
	if [ "${TMP}" = "y" ]; then
		mv linuxrc linuxrc.orig
		sed -e "s:#TMP#::" \
		    -e "s:#TMP_DEV=:TMP_DEV=${TMP_DEV}:" \
		    -e "s:#TMP_FSTYPE=:TMP_FSTYPE=${TMP_FS}:" \
			linuxrc.orig > linuxrc
	fi
	rm linuxrc.orig
}

busybox_create() {
	# Find a busybox tarball, and unpack and compile

	cp ${GENTOO_ROOT}/${DIST_DIR}/${BUSYBOX_PACKAGE}.tar.bz2 ${CRYPTO_TMP}
	cd ${CRYPTO_TMP}
	tar xjf ${BUSYBOX_PACKAGE}.tar.bz2 && rm -f ${BUSYBOX_PACKAGE}.tar.bz2

	# need to sed out losetup and mount. These will be statically
	# compiled from util-linux and included in the initrd

	for util in MOUNT DATE CUT DU HEAD MD5SUM WHICH WHOAMI WGET;
	do
		cd ${BUSYBOX_DIR}
		mv Config.h Config.h.orig
		sed -e "s:#define BB_$util://#define BB_$util:" \
			Config.h.orig > Config.h
		rm Config.h.orig
	done
	make clean
	make DOSTATIC=true
}

static_mount_losetup(){
	cp ${GENTOO_ROOT}/${DIST_DIR}/${UTIL_LINUX}.tar.bz2 ${CRYPTO_TMP}
	cd ${CRYPTO_TMP}
	tar -xjf ${UTIL_LINUX}.tar.bz2 && rm ${UTIL_LINUX}.tar.bz2
	cd ${UTIL_LINUX_DIR}
	cp ${GENTOO_ROOT}/${DIST_DIR}/${CRYPTOAPI_UTIL_PATCH}.gz ./
	gunzip ${CRYPTOAPI_UTIL_PATCH}.gz
	patch -p1 < ${CRYPTOAPI_UTIL_PATCH}
	./configure
	cd ${UTIL_LINUX_DIR}/lib
	make
	cd ${UTIL_LINUX_DIR}/mount
	mv Makefile Makefile.orig
	sed -e "s:\$(LDFLAGS):-static:" \
		Makefile.orig > Makefile
	make
}

initrd_create(){
	install -d ${INITRD_ROOT}
	dd if=/dev/zero of=${CRYPTO_TMP}/initrd bs=1k count=3000
	mke2fs -F -q -N3000 ${CRYPTO_TMP}/initrd
	mount -t ext2 -o loop ${CRYPTO_TMP}/initrd ${INITRD_ROOT}
	#makeinitrd
	if [ ! -e ${INITRD_ROOT}/bin ]
	then
		install -d ${INITRD_ROOT}/{bin,etc,usr,proc,tmp}	
		(mkdir ${INITRD_ROOT}/dev;cd ${INITRD_ROOT}/dev;MAKEDEV generic-i386;MAKEDEV scd)
		cat >${INITRD_ROOT}/etc/fstab <<EOF
proc            /proc         proc   defaults  0 0
EOF
	fi

	# Copy the linuxrc over

	install -m755 ${CRYPTO_TMP}/linuxrc ${INITRD_ROOT}

	# Install busybox and the statically compiled losetup and mount

	cp ${BUSYBOX_DIR}/busybox ${INITRD_ROOT}/bin
	cp ${UTIL_LINUX_DIR}/mount/{mount,losetup} ${INITRD_ROOT}/bin

	# Generate busybox links. We really do not need all of them but its good to
	# have a fall back in case we need them someday.

	for i in ash basename cat chroot clear cp dirname echo env false find \
	grep gunzip gzip insmod ln ls loadkmap lsmod mkdir mknod modprobe more mv \
	pivot_root ps pwd rm rmdir rmmod sh sleep tar test touch true umount uname \
	xargs yes zcat chmod chown; do 
		rm -f ${INITRD_ROOT}/bin/$i
		ln ${INITRD_ROOT}/bin/busybox ${INITRD_ROOT}/bin/$i || die
	done 

	# Copy the cryptoapi modules over

	install -d ${INITRD_ROOT}/modules
	cp ${CRYPTO_MODS}/cryptoapi.o ${INITRD_ROOT}/modules
	cp ${CRYPTO_MODS}/cryptoloop/cryptoloop.o ${INITRD_ROOT}/modules
	cp ${CRYPTO_MODS}/ciphers/cipher-${CIPHER_CHOICE}.o ${INITRD_ROOT}/modules

	chmod +x ${INITRD_ROOT}/linuxrc
	umount ${INITRD_ROOT}
	gzip -f -9 ${CRYPTO_TMP}/initrd
}

clean_up() {
	rm ${CRYPTO_TMP}/linuxrc
	rm -rf ${CRYPTO_TMP}/${UTIL_LINUX}
	rm -rf ${CRYPTO_TMP}/${BUSYBOX_PACKAGE}
	rmdir ${INITRD_ROOT}
}
	
install -d ${CRYPTO_TMP}
case "${1}" in
	all)
		linuxrc_create
		busybox_create
		static_mount_losetup
		initrd_create
		clean_up
			;;
	fetch)
		fetch_files
			;;
	linuxrc)
		linuxrc_create
			;;
	busybox)
		busybox_create
			;;
	mount-utils)
		static_mount_losetup
			;;
	initrd)
		initrd_create
			;;
	clean)
		clean_up
			;;
	delete)
		rm -rf ${CRYPTO_TMP}
			;;
	*)
		usage
		exit 1
		;;
esac
exit 0
