GLEP: xx+1
Title: Security of distribution of Gentoo software - Infrastructure to User distribution - MetaManifest
Version: $Revision: 1.7 $
Last-Modified: $Date: 2007/11/28 04:36:48 $
Author: Robin Hugh Johnson <robbat2@gentoo.org>, 
Status: Draft
Type: Standards Track
Content-Type: text/plain
Requires: GLEP44, GLEPxx+5
Created: October 2006
Updated: November 2007
Post-History: ...

Abstract
========
MetaManifest provides a means of verifiable distribution from Gentoo
Infrastructure to a user system, while data is conveyed over completely
untrusted networks and system, by extending the Manifest2 specification,
and adding a top-level Manifest file, with support for other nested
Manifests.

Motivation
==========
As part of a comprehensive security plan, we need a way to prove that
something originating from Gentoo as an organization (read Gentoo-owned
hardware, run by infrastructure), has not been tampered with. This
allows the usage of third-party rsync mirrors, without worrying that
they have modified something critical (e.g. eclasses, which are still
unsigned).

Securing the untrusted distribution is one of the easier tasks in the
security plan - in short, all that is required is having a hash of every
item in the tree, and signing that hash to prove it came from Gentoo.

Ironically we have a hashed and signed distribution (it's just not used
by most users, due to it's drawbacks): Our tree snapshot tarballs have
hashes and signatures.

So now we want to add the same verification to our material that is
distributed by rsync. We already provide hashes of subsets of the tree -
our Manifests protect individual packages. However metadata, eclasses
and profiles are not protected at this time. The directories of
packages and distfiles are NOT covered by this, as they are not
distributed by rsync.

This portion of the tree-signing work provides only the following
guarantee: A user can prove that the tree from the Gentoo infrastructure
has not been tampered with since leaving the Gentoo infrastructure.
No other guarantees, either implicit or explicit are made.

Specification
=============
For lack of a better name, the following solution should be known as the
MetaManifest. Those responsible for the name have already been sacked.

MetaManifest basically contains hashes of every file in the tree, either
directly or indirectly. The direct case applies to ANY file that does
not appear in an existing Manifest file (e.g. eclasses, Manifest files
themselves). The indirect case is covered by the CONTENTS of existing
Manifest files. If the Manifest itself is correct, we know that by
tracking the hash of the Manifest, we can be assured that the contents
are protected.

In the following, the MetaManifest file is a file named 'Manifest',
located at the root of a repository.

Procedure for creating the MetaManifest file:
---------------------------------------------
1. Start at the root of the Gentoo Portage tree (gentoo-x86, although
   this procedure applies to overlays as well).

2. Initialize two unordered sets: COVERED, ALL.
2.1. 'ALL' will contain every file in the tree.
2.2. 'COVERED' will contain every file that is mentioned in an existing
     Manifest2.

3. Traverse the tree, depth-first.
3.1. At the top level only, ignore the distfiles and packages
     directories.
3.2. Place every file (including the Manifest itself) in the directory
     in the ALL set.
3.3. If a directory contains a Manifest file, extract all AUX, MISC, and
     EBUILD items from it, and place them into the COVERED set.

4. Produce a new set, UNCOVERED, as the set-difference between ALL and
   COVERED. This is every item that is not covered by another Manifest.
5. If an existing MetaManifest file is present, remove it.
6. For each file in UNCOVERED, assign a Manifest2 type per [GLEPxx+5].
7. For each file in UNCOVERED, produce the hashes, and add with the
   filetype to the MetaManifest file.

8. The MetaManifest must ultimately be GnuPG-signed.
8.1. For the initial implementation, the same key as used for snapshot
     tarball signing is sufficient.
8.2. For the future, the key used for fully automated signing by infra
     should not be on the same keyring as developer keys. See [GLEPxx+3
     for further notes].

The above does not conflict the proposal contained in GLEP33, which
restructure eclasses to include subdirectories and Manifest files, as
the Manifest rules above still provide indirect verification for all
files after the GLEP33 restructuring if it comes to pass.

If other Manifests are added (such as per-category, or protecting
versioned eclases), the size of the MetaManifest will be greatly
reduced, and this specification was written with such a possible future
addition in mind.

MetaManifest generation will take place as part of the existing process
by infrastructure that takes the contents of CVS and prepares it for
distribution via rsync, which includes generating metadata. In-tree
Manifest files are not checked at this point, as they are assumed to be
correct.

Verification of one or more items from the MetaManifest:
There are two times that this may happen: firstly, immediately after the
rsync has completed - this has the advantage that the kernel file cache
is hot, and checking the entire tree can be accomplished quickly.
Secondly, the MetaManifest may be checked during installation of a
package.

Procedure for verifying an item in the MetaManifest:
----------------------------------------------------
In the following, I've used term 'M2-verify' to note following the hash
verification procedures as defined by the Manifest2 format - which
compromise checking the file length, and that the hashes match. Which
filetypes may be ignored on missing is discussed in [GLEPxx+5].

1. Check the GnuPG signature on the MetaManifest against the keyring of
   automated Gentoo keys. See [GLEPxx+3] for full details regarding
   verification of GnuPG signatures. 
1.1. Do not continue if the signature check fails.

2. For a verification of the tree following an rsync:
2.1. Build a set 'ALL' of every file covered by the rsync. (exclude
     $DISTDIR, $PKGDIR, local/)
2.2. M2-verify every entry in the MetaManifest, descending into inferior
     Manifests as needed. Place the relative path of every checked item
     into a set 'COVERED'.
2.3. Construct the set 'UNCOVERED' by set-difference between the ALL and
     COVERED sets.
2.4. For each file in the UNCOVERED set, assign a Manifest2 filetype.
2.5. If the filetype for any file in the UNCOVERED set requires a halt
     on error, do so.
2.6. Completed verification

3. If checking at the installation of a package:
3.1. M2-verify the entry in MetaManifest for the Manifest
3.2. M2-verify all relevant metadata/ contents if metadata/ is being
     used (optionally done before dependancy checking).
3.3. M2-verifying the contents of the Manifest. 
3.4. Perform M2-verification of all eclasses and profiles used (both
     directly and indirectly) by the ebuild.
3.5. For initial implementations, it is acceptable to check EVERY item
     in the eclass and profiles directory, rather than tracking the
     exact files used by every eclass (see note #1). Later
     implementations should strive to only verify individual eclasses
     and profiles as needed.

Notes:
1. Tracking of exact files is of specific significance to the libtool
eclass, as it stores patches under eclass/ELT-patches, and as such that
would not be picked up by any tracing of the inherit function. This may
be alleviated by a later eclass and ebuild variable that explicitly
declares what files from the tree are used by a package.

Implementation Notes
====================
For this portion of the tree-signing work, no actions are required of
the individual Gentoo developers. They will continue to develop and
commit as they do presently, and the MetaManifest is added by
Infrastructure during the tree generation process, and distributed to
users.

Backwards Compatibility
=======================
There are no backwards compatibility issues, as old versions of Portage
do not look for a Manifest file at the top level of the tree.
Manifest2-aware versions of Portage ignore entries that they are not
certain how to handle.

Thanks
======
I'd like to thank the following people for input on this GLEP.
- Patrick Lauer (patrick): Prodding me to get all of the tree-signing
  work finished, and helping to edit.
- Ciaran McCreesh (ciaranm): Paludis Manifest2
- Brian Harring (ferringb): PkgCore Manifest2
- Marius Mauch (genone) & Zac Medico (zmedico): Portage Manifest2
TODO:
- Ned Ludd (solar) - Security concept review

Copyright
=========
Copyright (c) 2006 by Robin Hugh Johnson. This material may be
distributed only subject to the terms and conditions set forth in the
Open Publication License, v1.0.

vim: tw=72 ts=2 expandtab:
