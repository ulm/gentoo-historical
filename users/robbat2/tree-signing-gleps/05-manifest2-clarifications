GLEP: xx+5
Title: Manifest2 filetypes
Version: $Revision: 1.7 $
Last-Modified: $Date: 2008/07/01 07:20:55 $
Author: Robin Hugh Johnson <robbat2@gentoo.org> 
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Requires: GLEP44
Created: November 2007
Updated: June 2008
Post-History: ...
Updates: GLEP44

Abstract
========
Clarification of the Manifest2 [GLEP44] specification, including new types to
help in the tree-signing specification.

Motivation
==========
[GLEP44] was not entirely clear on the usage of filetype specifiers.
This document serves to provide some of the internal logic used by
Portage at the point of writing, as well as adding new types to cover
the rest of the tree, for the purposes of tree-signing coverage.

Specification
=============
General
-------
For any given directory with a Manifest file, every file located in that
directory, or a sub-directory must be listed in that Manifest file,
unless stated otherwise in the following sections. The Manifest file
must not contain an entry for itself.

Excluded files
--------------
When generating or validating a Manifest, the package manager should endeavour
to ignore files created by a version control system, backup files from . A
non-exhaustive list is suggested here: .cvs/, .svn/, .git/, .hg/, .#*, *.rej,
*.orig, *.bak, *~.
Additionally, for a transitional Manifest1->Manifest2 system, old-style
digest files located in a 'files/' directory, may be excluded from
Manifest2 generation, or included with a type of MISC.

Filetype: AUX
-------------
- The AUX type is used for all items under the 'files' subdirectory. 
- They should be verified relative to $FILESDIR. 
- The string 'files/' is left out of the Manifest line. 
- The absence of a file mentioned by AUX must be treated as an error. 
- The AUX type is intended to denote potentially executable content
  (either directly or indirectly), that must be treated an error if
  modified or absent.

Filetype: EBUILD
----------------
- The EBUILD type is used solely for files ending in .ebuild, 
- The files are located in the same directory as the Manifest file. 
- The modification or absence of a file mentioned by EBUILD must be
  treated as an error.

Filetype: DIST
--------------
- The DIST type is used for distfiles
- They may be found directly via the $DISTDIR setting of the package manager. 
- During simple verification of a Manifest, a missing DIST file should
  not be consider as a validation error (it is however a failure to
  fetch or unpack).

Filetype: MISC
--------------
- The MISC type covers all remaining files in a directory. 
- MISC was originally intended to mark all content that was not used in
  some way that directly affected execution of the package manager. 
- This includes metadata.xml and ChangeLog entries, and any other purely
  informational content.
- MISC entries where the file is missing may optionally be ignored as by
  non-strict package managers.

Filetype: MANIFEST (new)
------------------------
- The MANIFEST type is explicitly to cover all nested Manifest files.
- During validation, this serves as an indicator that the package
  manager may need to check subtree Manifest file. 
- A missing MANIFEST file may be treated as a minor (eg excluding an
  entire category) or critical validation failure.
- [TODO expand on how to know if it's a critical failure]

Filetype: EXE (new)
-------------------
- The EXE type is identical to the AUX type, except that it does not
  imply the prefix 'files/' in front of each filename. 
- If the file gets sourced, executed, or causes a change (patches) in
  how something is sourced or execututed, it belongs in the EXE
  filetype.
- This filetype should be used for the eclasses, profiles, and scripts
  directories of a repository for important files.
- This may ultimately replace use of the AUX filetype.

On bloat
--------
If repeated use of a common path prefix is considered a bloat problem, a
Manifest file should be added inside the common directory, however this
should not be done blindly, as bloat by inodes is more significant for
the majority of use cases. 

Chosing a filetype
------------------
1. Is it an ebuild? => EBUILD, break
2. Is it a Manifest? => MANIFEST, break
3. Is it a distfile? => DIST, break
4. (if compatibility) Is it located within a files/ subdirectory of a
   package? => AUX, continue
5. Does it get sourced, executed, or cause something that is
   sourced/executed to be changed? (scripts, patches etc) => EXE, break
6. Do we know that it does NOT fill any of the requirements for the EXE
   filetype?  => MISC, break
7. Failsafe point, consider it to be dangerous => EXE, break

The logic behind 5, 6, 7 is ensuring that every item that by it's
presence or absense may be dangerous should always be treated strictly.
(Consider epatch given a directory of patches ${FILESDIR}/${PV}/, where
it blindly includes them, or alternatively, the package.mask file or a
profile being altered/missing).

Backwards Compatibility
=======================
For generation of existing package Manifests, the AUX entries must
continue to be present for the standard Portage deprecation cycle.
The new entries may be included already in all Manifest files, as they
will be ignored by older Portage versions.

The adoption of this proposal does also affect [GLEPxx+1] as part of
this GLEP series, however this GLEP was an offset of the research in
that GLEP.

Thanks to
=========
I'd like to thank the following people for input on this GLEP.
- Marius Mauch (genone) & Zac Medico (zmedico): Portage Manifest2

References
==========
[GLEP44] Mauch, M. (2005) GLEP44 - Manifest2 format.
  http://www.gentoo.org/proj/en/glep/glep-0044.html	

Copyright
=========
Copyright (c) 2007 by Robin Hugh Johnson. This material may be
distributed only subject to the terms and conditions set forth in the
Open Publication License, v1.0.

vim: tw=72 ts=2 expandtab:
