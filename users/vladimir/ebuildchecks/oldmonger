#!/usr/bin/perl -w
use strict;

################################################################################
#  Init type stuff, set up lists and such
#
my (%valid_keywords, %valid_licenses, %valid_iuses);

# Possible KEYWORDS
{
	$valid_keywords{$_}++ for qw( x86 ppc alpha sparc mips hppa arm );
	map {
		$valid_keywords{"~$_"}++;
		$valid_keywords{"-$_"}++;
	} keys %valid_keywords;

}

# Possible LICENSEs
{
	opendir(LICENSE_DIR, "/usr/portage/licenses/")
	  or die "Can't open /usr/portage/licenses/: $!";
	$valid_licenses{$_}++ for grep !/^\.+$/, readdir LICENSE_DIR;
	close LICENSE_DIR;
}

# Possible IUSEs
{
	open(USE_DESC, "/usr/portage/profiles/use.desc")
	  or die "Can't open /usr/portage/profiles/use.desc: $!";
	while (<USE_DESC>) {
		$valid_iuses{$1}++ if /^(\w+) - /;
	}
	close USE_DESC;
	map { delete $valid_iuses{$_} } keys %valid_keywords;
}





################################################################################
#  Main


for (`find /usr/gentoo-x86 -name "*.ebuild"`) {
    
    # Don't want that in there
    next if /skel.ebuild$/;
	if(m|^/usr/portage/(.+?)/(.+?)/\2-(.+?)\.ebuild$|) {
		print "$1/$2-$3 -> ";
		print "ENAM " unless verify_ebuild_name("$1/$2-$3");
	}
	else {
		chomp $_;
		print "Parse error: $_ ->";
	}

	
	open(EBUILD, $_) or die "Can't open $_: $!\n";
    echeck(<EBUILD>);
	close EBUILD;
	print "\n";
}


sub verify_ebuild_name {
	# The following regex is *not* a quick hack
    # I decided I'd spare the non-Perlers among us, and use /x and comments on
    # the regex. Ideally, the remaining portion of this script is two lines
	#
	# Note!: Last second I learned that portage is going case sensitive, so I
	#        just added the case insensitivity operator to the end of the regex
	
    return 1 if $_[0] =~ m/^
    
    # The Gentoo standards describe four different fields which may be present
    # in an ebuild name. 
    
    # The ebuild name is prefixed with the category name, which contains 
    # lowercase letters and dashes. There is an actual list of valid categories,
    # but I have left this rather simple due to lack of necessity
    
    [a-z\-]+
    
    # Which is followed by a backslash
    
    \/
    
    # Name:    May contain lowercase letters, numbers, and dashes
    
    [a-z\d\-+_]+
    
    # Which is followed by a dash
    
    -
    
    # Version: Any number of numbers and periods, optionally followed by a
    #          single lowercase letter
    
    [\d\.]+[a-z]?
    
    # Suffix (Optional): An underscore, followed by 'alpha', 'beta', 'pre',
    # 'rc', or 'p' which is optionally followed by a number
    
    (_(alpha|beta|pre|rc|p)\d*)?
    
    # Revision (Optional): '-r', optionally followed by a number
    (-r\d+)?
    $/ix;
}




# Usage  : echeck(@ebuild)
# Returns: Nothing
sub echeck {
	my @ebuild = @_;
	my ($keywords, $license, $iuse) = (0) x 3;
	
	for (@ebuild) {
		return if /^inherit /;
		if    (m/^LICENSE="([^"]+)"/) {
			$license++ if license_check($1);
		}
		elsif (m/^KEYWORDS="([^"]+)"/) {
			$keywords++ if keywords_check($1);
		}
		elsif (m/^IUSE="([^"]*)"/) {
			$iuse++ if iuse_check($1);
		}
	}
	
	print "LCNS " if $license != 1;
	print "KYWD " if $keywords != 1;
	print "IUSE" if $iuse != 1;
}

# Usage  : keywords_check($keywords)
# Returns: 1 if ok, 0 if not
sub keywords_check {
	my $keywords = shift;
	for (split/ /, $keywords) {
		next if $_ eq "";
		return 0 unless defined $valid_keywords{$_};
	}
	return 1;
}

# Usage  : license_check($license)
# Returns: 1 if ok, 0 if not
sub license_check {
	my $license = shift;
	for (split/ /, $license) {
		return 0 unless defined $valid_licenses{$_};
	}
	return 1;
}

# Usage  : iuse_check($iuses)
# Returns: 1 if ok, 0 if not
sub iuse_check {
	my $iuses = shift;
	for (split/ /, $iuses) {
		return 0 unless defined $valid_iuses{$_};
	}
	return 1;
}
