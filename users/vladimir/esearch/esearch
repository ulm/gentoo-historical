#!/usr/bin/perl -w
# $Header: /var/cvsroot/gentoo/users/vladimir/esearch/esearch,v 1.2 2003/03/08 10:28:14 vladimir Exp $
# Copyright (c) 2003 Graham Forest <vladimir@gentoo.org>
# Distributed under the GPL v2 or later
#
# This is my quick, simple, caching Perl implimentation of emerge -s/S
# I like to think it's nifty. It's not quite done yet, so don't get whiny
#
use strict;
use File::Find;
use File::Basename;
use Term::ANSIColor qw(:constants);
use Getopt::Long;
use Time::HiRes qw(time);

###############################################################################
#  User prefs
#
my $regex      = '0';
my $searchall  = '0';
my $showmasked = '1';

###############################################################################
#  Main
#
my $starttime = time;
Getopt::Long::Configure("no_ignore_case", "bundling");
GetOptions(
    'help|h|?'		=> sub { &print_usage; exit; },
	
	# These make a commandline switch toggle the user pref above
    'regex|r'		=> sub { $regex      = $regex      ? 0 : 1 },
    'searchall|S'	=> sub { $searchall  = $searchall  ? 0 : 1 },
    'showmasked|m'	=> sub { $showmasked = $showmasked ? 0 : 1 },
) or &print_usage, exit;

# No arguments
unless (scalar @ARGV > 0) {
	&print_usage;
	exit;
}

# Concatenate all arguments that aren't options as a space seperated string
$ARGV[0] = join " ", @ARGV;

# Quote metachars if we don't want regex matching
unless ($regex) {
	$ARGV[0] = quotemeta $ARGV[0];
}

# Grab our DB
my @packages;
if ( -e "$ENV{'HOME'}/.esearchdb" ) {
	@packages = get_file("$ENV{'HOME'}/.esearchdb");
}
else {
	print RED "Please generate your .esearchdb by running edbgen", RESET, "\n";
	exit;
}


# First line of the DB is our arch, followed by any accepted keywords
#   as set in /etc/make.conf
my @ACCEPT_KEYWORDS = split/ /, shift @packages;

# Number of packages matched, for a summary
my $hitcount = 0;

for (@packages) {
# Search the DB, line by line
	
	# Split on \0's (rather unlikely char to conflict with anything
	my ($package, $desc, $homepage, $keywords) = split/\0/;
	
	if ($searchall) {
	# Match the whole thing if we're searching all categories
		next if ! /$ARGV[0]/oi;
	}
	else {
	# Otherwise, match only the package category/name
		next if $package !~ /$ARGV[0]/oi;
	}
	
	# Start off considering everything masked
	my $keyworks = 0;
	
	for (@ACCEPT_KEYWORDS) {
	# Check if any accepted keywords exist
		$keyworks++ if $keywords =~ / $_ /;
	}

	# Remove leading and trailing space in keywords
	$keywords =~ s/^\s+(.+)\s+$/$1/;
	
	unless ($showmasked) {
	# Skip out now if we aren't printing masked, and we don't have good keywords
		next unless $keyworks;
	}
	
	# Spring cleaning
	chomp for ($package, $desc, $homepage, $keywords);
	
	# Print the category/name in bold white
	print BOLD "$package", RESET;
	
	# Print keywords in green if accepted, in red otherwise
	print "[ ";
	print $keyworks ? BOLD GREEN : BOLD RED;
	print $keywords, RESET;
	print "]\n";
	
	# Print our description and home page
	print "    Description : $desc\n";
	print "    Home page   : $homepage", RESET, "\n\n";
	
	$hitcount++;
}

my $bragstring = "Matched $hitcount package"
  . ($hitcount > 1 ? "s" : "") . " in "
  . sprintf( "%.3f", (time - $starttime)) . " seconds";

print BOLD YELLOW $bragstring, RESET, "\n\n";

###############################################################################
#  Subroutines
#
sub get_file {
# Return the contents of the specified file
	my $file = shift;
	open(MOO, "<$file") or die "Couldn't open $file for reading\n";
	my @contents = <MOO>;
	close MOO;
	return @contents;
}

sub print_usage {
# If you're wondering, give up now
	my $desc = "Lightweight, extremely fast Portage search";
	my $usage = "[options] search string";
	
	my %options = (
		"--help|h|?"     => "Display this",
		"--regex|r"      => "Toggle Perl regular expressions (Default: Off)",
		"--searchall|S"  => "Toggle search all fields (Default: Off)",
		"--showmasked|m" => "Toggle showing of masked packages (Default: On)",
	);	
	
	print "\n";
	print BOLD basename($0), "- $desc", RESET;
	print "\n\n";
	print BOLD YELLOW "Usage:", RESET, "\n";
	print "   " . basename($0) . " $usage\n\n";
	print BOLD YELLOW "Options:", RESET, "\n";
	for (sort keys %options) {
		print "   $_\t$options{$_}\n";
	}
	print "\n";
	print BOLD "Copyright (c) 2003 Graham Forest <vladimir\@gentoo.org>", RESET;
	print "\n\n";
	
	exit;
}
