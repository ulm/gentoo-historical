30/05/2005 - mcummings

- Commented out the rmdir of .cpan/build - this was causing weird random (harmless) error messages. Reviewing the code, we don't actually use this dir ourselves, but point to it for CPAN's build area. Since the default config for CPAN cleans this up itself, lets leave it at that for now.
- Corrected dev-perl/File-Spec to perl-core/File-Spec following the perl-core migration last week. Releasing this as -r1 in portage since its a minor change, not a major update.

20/05/2005 - mcummings

- Moved color block so I could invoke it outside the usage function
- Added options to the "don't combine" block. Cleaned up text since the block was getting too long to handle/read
- Added catch for when no options were passed :)
- Modified check and output for arguments without a module pass
- Reorganized the checking of PORTDIR_OVERLAY and tmp_dir creation.
	- Check to make sure we aren't attempting a non-emerge and creating a temp dir
	- Add tmp_dir to overlay list earlier
	- set ENV{TMPDIR} explicitly if there are no overlays
	- Bundle the creation of tmp_dir into the block of "if there are no overlays"
- Invoke clean up no matter what -if we are far enough to reach it, we ran something that needs it
- Modified clean up to only remove the tmpdir if it is from our ENV{TMPDIR} - that way we don't wipe overlays by accident
- Updated copyright info for generated ebuild :) Also added a line to indicate that the ebuild was generated by g-cpan and which version
- Added output for existing ebuilds found. This helps in the event of invoking g-cpan for an ebuild that already exists. Without this, we return to the prompt without knowing why g-cpan didn't do anything
- Removed die from call to emerge. Seems the way portage runs it returns an exit code that perl is interpeting as a die
- Removed $MAKECONF - we have a constant for this.
- Added verbose message for overlays during discovery phase
- Inform user which overlay dir is being used
- Corrected cat'ing of /var/db/pkg dirs to pdirs
- Tweaked and tested invocations. g-cpan returns proper messages now under the following conditions:
	* User with overlays attempts to emerge and can't
	* No overlays defined and user attempts generate
	* Confirmed multiple overlays work - g-cpan will select the first overlay that it has write access to
	* Emerging without any overlays
	* I think that's all that can be tested :)


17/05/2005 - mcummings

- Changed searching to use i() instead of m() (catch more flies with i than m ;) )
- Modified fatal exist to use cab-colors
- Added generate to create ebuilds for when you don't have perms to emerge

16/05/2005 - mcummings

- Checks for write privs in overlays and choosing the correct overlay based on that
- cleaned up the multiple cleanup blocks
- Updated the man pages. Left out cab's and sniper's email in case they didn't want them published (so fill it in if you do :) )

15/05/2005 - mcummings

- Added check to make sure @ebuild_list had contents before trying to run emerge - less chance of emerge just junking out on us.
- Added "or die" to system call - at least its a start at handling an error return from the call to portage

15/05/2005 - cab in wonderland

- Lots of colours everywhere !
- new subs for text formatting
- replaced all simple print() call by print_x() ones

15/05/2005 - mcummings

- Removed sub that was no longer being invoked (had cleaned up the code for this last week)

15/05/2005 - cab, second pass !

- Played with CPAN stuff so that it comes AFTER options parsing (see rev 25 for FIXME)
- Moved some 'use Module' strings

15/05/2005 - Wonderful colored world, by cab ;)

- corrected indentation and typos in exit_usage()
- colorized exit_usage (feel like portage)
- rearranged code (categorizing sub - easier to find what we're looking for)
- added some comments here and there (again ;p)

11/05/2005 - mcummings makes weird changes

- cleaned up calls to merge, added -p,-a,-n,-u flags to respective portions
- Removed the "for (@ARGV) to the call for emerge*module subs - all this was doing was forcing us to call emerge multiple times; the actual subs weren't using @ARGV, but using @ebuild_list, which was already populated elsewhere with all of the modules we wanted plus their generated deps.
- moved list function so that it was called *after* we define the list of dirs to check
- added basename so program name was pretty (beu)
- To explain my changes for that dir read -noticed when traversing for multiple files that the directory list checked was decreasing in size each pass until it was only checking one directory chain in the end. Pushing it all into a single array that's built temporarily, while ugly, seems to work. This was all due to a bug in modules like Bundle-W3C-Validator (go ahead and try with the old code). Sorry for the kludges, thanks snip for the regex help

10/05/2005 - cab strikes g-cpan again.. :)

- added comments here and there..
- modified the cpan-config-needed if() test
- modified switches interpretations
- added -l,--list switch (nothing behind for now)
- added a new sub : clean_the_mess, that should take care of system's sanity
- changed my $arches
- subbed the MD5 sum calculation
- updated exit_usage()

07/05/2005 -  cab first strike !

- Added search capabilities (same as m // command in CPAN Shell
  Use -s or --search switch to get it.

- Now Using Getopt::Long to handle switches, options, and so on..

- get_globals totally rewritten : now uses open/parse/close on make.conf,
  instead of 3 times qx() : performance boost guaranteed. Sets up default before 
  overwriting them if needed and can replace variables like ${PORTDIR} if ever
  they are used in make.conf : quality improvement guaranteed. :p
  thx to Sniper (sniper@mongueurs.net) for the s// regexp !

- Added a bit more explicative Usage message.. in fact a whole sub. 
  Available with -h or --help switch but will also appear if user
  requires impossible or wrong things (plus a detailed error message
  on what when wrong).

- Installing a module now requires the -i or --install switch, to differentiate
  from searching. Can be modified to become default 'no option' behaviour,
  but i'm not fan : searching as default would be far less dangerous. :)

- Reorganised code, adding some comments, removing some useless others.

- Had fun !

--------------------------------------
Old Changelog 
-------------

#Copyright 1999-2004 Gentoo Foundation
#Distributed under the terms of the GNU General Public License v2
#$Header: /var/cvsroot/gentoo/users/mcummings/g-cpan/g-cpan-0.13/Changes,v 1.2 2005/05/30 14:07:03 mcummings Exp $

History: 

04/30/05: mcummings@gentoo.org
	Moving g-cpan into its own package space withing app-portage for better managability.
	Also, this breaks the tie to g-cpan fixes being reliant on the next release of portage.

01/29/05: andrew-g@oxhut.co.uk: 
	Improved filename/version matching to close bugs 64403 74149 69464 23951.  
	Improved default help message.  Added -v verbose flag.

11/16/04: pete@peteleonard.com:
	Fixed handling of CPAN modules that end in '.pm' (e.g. CGI.pm)
	Closes bug 64403.

10/29/04: rac@gentoo.org:
	attempt to recognize lowercased packages in dev-perl in portage_dir

05/23/03: jrray@gentoo.org: 
	Skip modules the CPAN thinks are included with perl (closes bug 14679).

	Used the CPAN module to discover the real location of Makefile.PL to set
	the ${S} variable in the ebuild, sometimes the location isn't the same as
	${P}.
	
	Don't assume the filename of the tarball will be ${P}.tar.gz, use the
	real filename out of CPAN.
	
	Some modules' filenames have underscores in unfortunate places.  Change
	all of them to hyphens to avoid that mess.

02/23/03: alain@gentoo.org: 
	removed portage direct-access code, and switched to using the
	portageq utility which hides the portage APIs.

01/08/03: jrray@gentoo.org: 
	remove dependency on Digest::MD5

01/07/03: jrray@gentoo.org: getting the way subroutines are fed variables
	sorted out (they're in @_)
	Clean out module_check, unnecessary temp variables are evil.
	It isn't okay to skip a module if module_check succeeds when
	that module is listed as a dependency for a module we're trying
	to install, the subsequent emerge can fail if the ebuild doesn't
	exist.  So only skip a module if it is a first order module from
	the command line but not if it is being considered to meet a
	dependency.
	Use the portage python module to learn some configuration values
	instead of trying to parse make.conf.
	Need to use system and not exec when calling out to emerge, exec
	ends our process!

12/09/02: baz@bluefuton.com: some further amends:
	standardised code, declared external vars early, 
	amended layout and sub styles for consistency and brevity,
	also removed a 'spare' function :-)

12/07/02: mcummings: Reviewed baz's comments (thanks!). Moved the make.conf check to an external
	 sub so that we could grab other important functions. Added Digest::MD5 so that we could
	 check the checksum more cleanly instead of making a system call.
	 Thanks to stocke2 for pointing me in the direction of File::Path -
	 and helping me debug silly michael coding with rmtree

12/07/02: baz@bluefuton.com: 
	comments added, basically a very picky code review.

12/06/02: mcummings; 
	Added emerge functionality. Now emerges modules on the 
	fly

12/03/02: mcummings; 
	Added checks for /var/db/pkg and manually installed 
	modules

11/07/02: jrray : Initial upload to bug 3450
