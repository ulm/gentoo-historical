
   Gentoo Linux/PPC 1.4 Installation Instructions

   1.Getting the CD

   The Gentoo/PPC 1.4 CD can be found in the releases directory on any of the Gentoo Mirrors. Experimental versions are also available
   from the experimental directory. Please have a look at the Gentoo mirrors list (http://www.gentoo.org/main/en/mirrors.xml) and select
   the mirror which is located closest to where you live. For the inpatient, click on one of these:

   Type         Link
   Experimental http://www.ibiblio.org/gentoo/releases/ppc/
   Released     http://www.ibiblio.org/gentoo/releases/ppc/

   There are several CD flavors available:

   * allstages

   This type of CD contains all ppc stages. A stage is a unix tarball that contains a minimal linux system that needs to be unpacked on
   an empty partition on the hard disk you wish to install Gentoo on. Stages also come in different sizes: A stage1 contains a very
   minimal system (only directory structure and non-bootstrapped compiler), a stage2 tarball is a bit larger (the compiler is already
   bootstrapped, which saves you quite some time during installation.) and a stage3 contains a basic linux system (bootstrapped compiler
   and basic tools). You'll need to choose one of these stages later on in this document. Stages are available separately from all Gentoo
   mirrors, but the allstages CD already contains all stages.

   * nostages

   Same as the allstages CD, but contains no stages. On major releases
   versions with GRP are made available for all architectures.
   
   * developer

   Same as the nostages CD but is debug enabled and has some very advanced, experimental features. This CD contains man pages,
   documentation, i18n stuff and an entire compiler. This type of CD was created for developers who are working on hfs (apple filesystem)
   resizing algorithms, but it can also be used to create a livecd-based distcc, ccache enabled workstation to speed up installation of
   Gentoo (both x86, PPC and Sparc) machines on your network. (no grp)
   
   * KDE/GNOME CD

   X enabled developer cd (no grp)

   * smallestcd

   This CD is only around for historical reasons. It's only 15M in size. (no airport or ppc support)

   All Gentoo Linux/PPC 1.4 boot CDs will boot any New World Macs. Any 1.4 boot CD can be easily booted on oldworld macs by downloading
   BootX and starting it (from a hfs partition) with the correct arguments. (Select /boot/initrd.img.gz as initrd, /boot/vmlinux as
   kernel, set initrd-size to 11000, set root to /dev/ram and set init to /linuxrc). Several people have installed Gentoo/PPC on oldworld
   machines (even some former http://support.apple.com ANS machines now run Gentoo/PPC). Feel free to share your experiences with the PPC
   developers by visiting the #gentoo-ppc room on irc.freenode.net. Both irssi and bitchX are available on the installation cdrom.

   To install from the build CD, you will need to have a PowerPC 603 or better processor on a PowerPC PCI based system or newer. Less
   than 128mb Ram is possible but the build process could be very slow under those conditions and could die. At the time of writing Nubus
   machines are not officially supported, but it should be noted that developers succeeded in installing Gentoo on nubus machines (using
   cross compilation and distcc).

   Now, let's quickly review the install process. We'll create partitions, create our file systems, and extract either a stage1, stage2
   or stage3 tarball. If we are using a stage1 or stage2 tarball, we will take the appropriate steps to get our systems to stage3. Once
   our systems are at stage3, we can configure them (tweaking config files, installing a bootloader, etc) and boot them and have a
   fully-functional Gentoo Linux system. Depending on what stage of the build process you're starting from, here's what's required for
   installation:

   stage tarball requirements for installation
   1             partition/file system setup, emerge sync, bootstrap, emerge system, emerge ppc-sources, final configuration
   2             partition/file system setup, emerge sync, emerge system, emerge linux sources, final configuration
   3             partition/file system setup, emerge sync (optional), final configuration

   2.Booting

   Once you've chosen the CD you want to use, go ahead and boot it either by holding down the 'C' key at bootup or by running an OldWorld
   bootloader (BootX, quik). You'll be greeted by a friendly welcome message and a boot: prompt at the bottom of the screen. At this
   prompt, hit enter, and a complete Gentoo Linux environment will be loaded from the CD.

   Use root as username and leave the password blank to login on the live cd (a "live" gentoo/PPC system). Logging in is not necessary on
   the smallestcd.

   If you're installing on a system with a non-US keymap, use the loadkeys command to set your keymap. Keymaps can be found in
   /usr/share/keymaps. The smallestcd uses a menu (configuration system) to set keymaps during boot.

   A lot of linux kernel modules are available and automatically loaded if needed. The livecds (not smallestcd) even contains multimedia
   stuff (ALSA, mplayer, ...) and can be used to play live music during installation. (Please note that playing a high bandwidth stream
   will probably slow down installation a bit.)

   Lots of programs are available on the livecd (like irc clients, webbrowsers, ssh, telnet, samba, talk ...) and can be used
   simultanuously during installation by using Linux console. You should have a root prompt on the current console, but you could also
   open new consoles by typing ctrl+alt+f2, ctrl+alt+f3 (on powerbooks/ibooks possible fn+ctrl+alt+f2), to activate other consoles.

   3.Load kernel modules

   We're almost ready to begin installing Gentoo Linux, and for the most part the Gentoo PPC ISO kernel includes any drivers you will
   need on most standard Macs (Airport, 10/100/1000mbit ethernet), but should you need any extras we have included a huge amount of extra
   modules as well. To view a list of all modules included look in /lib/modules/*/kernel/drivers/*. To load a particular module, type:

   Code listing 3.1
# modprobe modulename
        (replace modulename with your desired module)

   4.Configure and Install networking

   The new boot CDs allow you to configure a working network, allowing you to use ssh, scp or wget as needed before even beginning the
   installation process. Even if you don't need to do these things now, you should go ahead and set up networking now. Once set up,
   Portage (the Gentoo Package manager) will be able to use your configured network. There are several ways of setting up the network.
   Perhaps the most common used and also easiest is DHCP:

   DHCP

   Network configuration is simple with DHCP; If your ISP is not using DHCP, skip down to the static configuration section below.

   Code listing 4.1: Network configuration with DHCP
   # dhcpcd eth0

   Note: Some ISPs require you to provide a hostname. To do that, add a -h myhostname flag to the dhcpcd command line above.

   If you receive dhcpConfig warnings, don't panic; the errors are most likely cosmetic. Skip down to Network testing below.

   Please note that eth0 defaults to the internal network adapter om most ppc livecds. If you want to install gentoo using airport
   execute:

   Code listing 4.2: Network (airport) configuration with DHCP
   # dhcpcd eth1

   If your airport base station is configured to encrypt connections using WEP, use the iwconfig command to set the correct parameters.

   Static configuration

   We need to setup just enough networking so that we can download sources for the system build, as well as the required localhost
   interface. Type in the following commands, replacing $IFACE with your network interface (typically eth0), $IPNUM with your IP address,
   $BCAST with your broadcast address, and $NMASK with your network mask. For the route command, replace $GTWAY with your default
   gateway.

   Code listing 4.3
# /sbin/ifconfig $IFACE $IPNUM broadcast $BCAST netmask $NMASK
# /sbin/route add -net default gw $GTWAY netmask 0.0.0.0 metric 1

   Now, it's time to create the /etc/resolv.conf file so that name resolution (finding Web/FTP sites by name, rather than just by IP
   address) will work.

   Note: For historic reasons, Gentoo uses a small text editor called nano (a pico clone) during installation. All Gentoo/PPC CDs also
   include the more popular vim and emacs. Other editors can be added by making a simple request to the livecd maintainer (Pieter Van den
   abeele)

   Here's a template to follow for creating your /etc/resolv.conf file:

   Code listing 4.4: /etc/resolv.conf template
domain mydomain.com
nameserver 10.0.0.1
nameserver 10.0.0.2

   Replace 10.0.0.1 and 10.0.0.2 with the IP addresses of your primary and secondary DNS servers respectively.

   Network testing

   Now that your network has been configured, the /sbin/ifconfig -a command should show (hopefully!) that your network card is working
   (look for UP and RUNNING in the output).

   Code listing 4.5: /sbin/ifconfig for a working network card
eth0      Link encap:Ethernet  HWaddr 00:50:BA:8F:61:7A
          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::50:ba8f:617a/10 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1498792 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1284980 errors:0 dropped:0 overruns:0 carrier:0
          collisions:1984 txqueuelen:100
          RX bytes:485691215 (463.1 Mb)  TX bytes:123951388 (118.2 Mb)
          Interrupt:11

   Note: Use export http_proxy=http://myISPproxy:port or export http_proxy=myISPproxy:port if your ISP requires you to set up a http
   proxy.

   Note: Gentoo/PPC also support other types of connections (ADSL, ppp,...). Have a look at the Gentoo/x86 installation document if you
   need to set up such a connection on a Gentoo/PPC machine.

   Networking is go!

   Networking should now be configured and useable. You should be able to use the included ssh, scp, wget, ... commands to connect to
   other machines on your LAN or the Internet.

   5.Set up partitions

   Now that the kernel can see our network card and disk controllers, it's time to set up disk partitions for Gentoo Linux.

   Here's a quick overview of the standard Gentoo Linux partition layout. We're going to create at least three partitions: a swap
   partition, a root partition (to hold the bulk of Gentoo Linux), and a special bootstrap partition. The bootstrap partition is designed
   to hold the YABOOT boot loader information. OldWorld users do not require this bootstrap partition as their machine is initially
   booted by MacOS, and BootX is used to initialize the linux kernel and init scripts.

   Now, on to file system types. Right now, you have four file system options: XFS, ext2, ext3 (journaling) and ReiserFS. ext2 is the
   tried and true Linux file system but doesn't have metadata journaling. ext3 is the new version of ext2 with both metadata journaling
   and ordered data writes, effectively providing data journaling as well. Either one of these is the recommended type to use for
   GentooPPC. ReiserFS and XFS are both newer high performance File systems, but are more experimental on PPC in general and are not
   recommended. Feel free to experiment with these filesystems if your machine is not a mission-critical machine.

   Note: At this point, create your partitions using mac-fdisk, mac-fdisk /dev/hdx (where x is your drive letter, a, b, c - /dev/sdx for
   scsi disks). You will need to make at a minimum a bootstrap partition (b in mac-fdisk) (New World users only), a swap partition
   (generally 1,5* ram in your box is good, however I would recommend at least 512MB swap partition if you plan on compiling any large
   packages), and a root partition. ? at the prompt of mac-fdisk will give you a list of options.

   Once you've created your partitions using mac-fdisk, it's time to initialize the file systems that will be used to house our data.
   Initialize swap as follows:

   Code listing 5.1
   # mkswap /dev/hda3

   You can use the mke2fs command to create ext2 file systems:

   Code listing 5.2
   # mke2fs /dev/hda4

   If you'd like to use ext3, you can create ext3 file systems using mke2fs -j:

   Code listing 5.3
   # mke2fs -j /dev/hda4

   Note: You can find out more about using ext3 under Linux 2.4 at http://www.zip.com.au/~akpm/linux/ext3/ext3-usage.html.

   6.Mount partitions

   Now, we'll activate our new swap, since we may need the additional virtual memory that provides later:

   Code listing 6.1
   # swapon /dev/hda3

   Next, we'll create the /mnt/gentoo mountpoint, and we'll mount our file system to this mountpoint.

   Code listing 6.2
# mkdir /mnt/gentoo
# mount /dev/hda4 /mnt/gentoo

   If you are setting up Gentoo Linux with a separate /usr or /var, these would get mounted to /mnt/gentoo/usr and /mnt/gentoo/var,
   respectively.

   7.Mounting the CD-ROM

   On the livecds, the cdrom is automatically detected and mounted in /mnt/cdrom.

   If you are booting using the smallestcd (please note that this CD is no longer actively maintained and only around for historical
   reasons (no support for wireless, ppp...)) the cdrom is not mounted under the smallestcd minimal Linux boot CD environment. We'll need
   to mount it so that we can access the compressed build image tarball contained on the CD-ROM. To mount the CD-ROM, one typically
   types:

   Code listing 7.1
   # mount /dev/cdroms/cdrom0 /mnt/cdrom -o ro -t iso9660

   With the CD-ROM mounted, you should be able to see the stage???.tbz2 file(s) by typing ls /mnt/cdrom/build.

   Note: If you are unable to mount your cdrom, it is still possible to retrieve the stage1/2/3 from the ibiblio site using wget
   http://www.ibiblio.org/pub/Linux/distributions/gentoo/releases/build/1.2/stage1-ppc-1.2.tbz2

   8.Unpack the stage you want to use

   With the allstages CD-ROM mounted, you should be able to see the stage???.tbz2 tarballs in the /mnt/cdrom/ppc-stages , the
   /mnt/cdrom/g3-stages or the /mnt/cdrom/g4-stages directory.

   If your livecd does not contain stages or you want to use the latest, point lynx or wget to your Gentoo mirror and download either the
   latest official ppc stages from the releases/1.4_* directory or the latest experimental ppc stages from the experimental/1.4_*
   directory. For historical reasons, the 1.2 stages are still available in the releases/build directory, but these are outdated and
   certainly no longer actively maintained.

   Important: Be sure to use the p option with tar. Forgetting to do this will cause certain files to contain incorrect permissions.

   Important: If your want to build really everything from scratch, optimized for your processor, you should use a stage1 image, however
   you'll also have a choice of a stage2 and stage3 image. These images allow you to save time at the expense of configurability (we've
   already chosen compiler optimizations and default USE variables for you.)

   Code listing 8.1
# cd /mnt/gentoo
# tar -xvjpf /mnt/cdrom/build/stage?-*.tbz2
# mount -o bind /proc /mnt/gentoo/proc
# cp /etc/resolv.conf /mnt/gentoo/etc/resolv.conf

   Code listing 8.2
# chroot /mnt/gentoo /bin/bash
# env-update
>>> Regenerating /etc/ld.so.cache...
# source /etc/profile
#

   After you execute these commands, you'll be "inside" your new Gentoo Linux environment.

   Note: Ignore the warning that env-update spawns about the missing portage tree (Gentoo Packages directory), this directory will be
   created in the next step.

   9.Rsync

   Now, you'll need to run emerge sync which will connect to rsync.gentoo.org and download the latest version of our Portage ports tree:

   Code listing 9.1
   # emerge sync

   The Portage tree will be downloaded; it's about 10Mb in size.

   Important: The address for the rsync server is currently rsync://rsync.gentoo.org/gentoo-portage. If you have trouble accessing Gentoo
   rsync, make sure you're using this address by setting it as the SYNC variable in your /etc/make.conf.

   Note: The rsync command can be configured to use an HTTP proxy if you are behind a firewall. To configure this item set
   RSYNC_PROXY="hostname:port" in /etc/make.conf or set it as an environment variable.

   Note: Have a look at the other settings in /etc/make.conf and configure them to your needs. There are several tools available to
   automatically select the best mirror (emerge mirrorselect && mirrorselect -a) or to set the use flags (emerge ufed && ufed). Make sure
   that your CFLAGS setting corresponds to the processor of the machine you are installing Gentoo on.

   10.Progressing from stage1 to stage2

   Important: If you are a stage2 or stage3 tarball, then we've already bootstrapped for you. There is no reason for you to bootstrap
   again, unless you decided to do an emerge sync and want to ensure that you have an up-to-the-minute current Gentoo Linux system. Most
   people using stage2 or stage3 tarballs will not want to bootstrap again, since it can take up to an hour even on very fast machines.

   Now that you have a working copy of the Portage tree, people using stage1 to install will need to bootstrap their Gentoo Linux system
   as follows. First edit the file /etc/make.conf. In this file, you should set your USE flags, which specify optional functionality that
   you would like to be built into packages; generally, the defaults (an empty or unset USE variable) are fine. You also should set
   appropriate CHOST, CFLAGS and CXXFLAGS settings for the kind of system that you are creating (commented examples can be found further
   down in the file.) If necessary, you can also set proxy information here if you are behind a firewall.

   Code listing 10.1
   # nano -w /etc/make.conf (Adjust these settings)

   Note: People who need to substantially tweak the build process should take a look at the /etc/make.globals file. This file comprises
   gentoo defaults and should never be touched. If the defaults do not suffice, then new values should be put in /etc/make.conf, as
   entries in make.conf override the entries in make.globals. If you're interested in tweaking USE settings, look in
   /etc/make.profile/make.defaults. If you want to turn off any USE settings found here, add an appropriate USE="-foo" in /etc/make.conf
   (to turn off the foo USE setting.)

   Now, it's time to start the "bootstrap" process. This process will last 1-4 hours depending on how zippy your machine is. During this
   time, the extracted build image will be prepped for compiling the rest of the system. The GNU compiler suite will be built, as well as
   the GNU C library. These are time consuming builds and make up the bulk of the bootstrap process:

   Code listing 10.2
# cd /usr/portage
# scripts/bootstrap.sh

   The "bootstrap" process will now begin.

   Note: Portage by default uses /var/tmp during package building, often using several hundred megabytes of temporary storage. If you
   would like to change where Portage stores these temporary files, set a new PORTAGE_TMPDIR before starting the bootstrap process, as
   follows:

   Code listing 10.3
   # export PORTAGE_TMPDIR="/otherdir/tmp"

   The bootstrap.sh will build binutils, gcc, gettext, and glibc, rebuilding binutils, gcc, and gettext after glibc is built. Needless to
   say, this process takes a while. Have a nice nap. Once this process completes, your system will be in a "stage2" state.

   11.Progressing from stage2 to stage3

   Note: If you haven't done so, please edit /etc/make.conf to your flavor.

   Once your build image has been bootstrapped and you're at stage2 (again, if you're using a stage3 tarball than these steps are not
   required) it's time to build or install the rest of the base system as follows:

   Code listing 11.1
# export CONFIG_PROTECT=""
# emerge --pretend system
        [lists the packages to be installed]
# emerge system

   Note: The export CONFIG_PROTECT="" line ensures that any new scripts installed to /etc will overwrite the old scripts (stored in
   sys-apps/baselayout), bypassing Portage's new config file management support. Type emerge --help config for more details.

   It's going to take a while to finish building the entire base system. Your reward is that it will be thoroughly optimized for your
   system. The drawback is that you have to find a way to keep yourself occupied for some time to come. The author suggests "Star Wars -
   Super Bombad Racing" for the PS2. When emerge system completes, you'll have a stage3 Gentoo Linux system.

   12.Final steps: timezone

   Note: If you haven't done so, please edit /etc/make.conf to your flavor.

   At this point, you should have a stage3 system that's ready for final configuration. We'll start this process by setting the time
   zone. By setting the time zone before building the kernel we ensure that users get reasonable uname -a output.

   Look for your time zone (or GMT if you using Greenwich Mean Time) in /usr/share/zoneinfo. Then, make a symbolic link by typing:

   Code listing 12.1
   # ln -sf /usr/share/zoneinfo/path/to/timezonefile /etc/localtime

   13.Kernel, system logger, and cron

   You will now need to emerge the ppc kernel sources, this can be accomplished with emerge sys-kernel/ppc-sources.

   Once you have a Linux kernel source tree available, it's time to compile your own custom kernel:

   Code listing 13.1
# cd /usr/src/linux
# make menuconfig
# make dep && make clean vmlinux modules modules_install
# cp vmlinux System.map /boot

   Note: You should only use the sys-kernel/ppc-sources gentoo kernels on PowerPC based machines.

   Warning: For your kernel to function properly, there are several options that you will need to ensure are in the kernel proper -- that
   is, they should be enabled and not compiled as modules. You will need to enable the "Code maturity level options --> Prompt for
   development and/or incomplete code/drivers" option to see several of these selections. Under the "File systems" section, be sure to
   enable the Device File System (note that you don't need to enable the "/dev/pts file system support" option). You'll also need to
   enable the Virtual Memory File system. Also under Macintosh Device Drivers make sure to disable the default of Support for ADB raw
   keycodes. Also make sure to disable the Enhanced RTC option (in "Character devices") as it's not PPC friendly ATM. But turn on Support
   for /dev/rtc in "General setup". It's always a good idea to leave ext2 enabled whether you are using it or not. Users with OldWorld
   machines will want HFS support so they can copy compiled kernels to the MacOS partition.

   Important: If you have an IDE CD burner and/or DVD, then you need to enable SCSI emulation in the kernel. Turn on "ATA/IDE/MFM/RLL
   support" ---> "IDE, ATA and ATAPI Block devices" ---> "SCSI emulation support" (I usually make it a module), then under "SCSI support"
   enable "SCSI support", "SCSI CD-ROM support" and "SCSI generic support" (again, I usually compile them as modules). If you also choose
   to use modules, then echo -e "ide-scsi\nsg\nsr_mod" >> /etc/modules.autoload to have them automatically added at boot time. You should
   also add this line to your /etc/yaboot.conf file append="hdc=ide-scsi".

   Important: If you have an OldWorld machine you will need to mount your HFS (MacOS) partition, then copy your kernel over so BootX can
   load it at startup. BootX will automatically find kernels in the Linux Kernels folder in the System Folder.

   Your new custom kernel (and modules) are now installed. Now you need to choose a system logger that you would like to install. We
   offer sysklogd, which is the traditional set of system logging daemons. We also have metalog. Power users seem to gravitate away from
   sysklogd (not very good performance) and towards metalog. If in doubt, you may want to try metalog, since it seems to be quite
   popular. To merge your logger of choice, type one of the next two lines:

   Code listing 13.2
# emerge app-admin/sysklogd
# rc-update add sysklogd default
or
# emerge app-admin/metalog
# rc-update add metalog default

   Warning: If you used the version 1.2 stage3 tarball you do not need to install a system logger. stage3-ppc-1.2.tbz2 includes sysklogd
   (although older and newer versions do not). If you would like to use metalog instead, you will first need to remove sysklogd: After
   installation is complete, prevent sysklogd from running at startup with rc-update del sysklogd default. Then emerge unmerge sysklogd
   to remove it. You will probably also have to manually delete the sysklogd configuration files in /etc (look for cfgpro in the file
   list while unmerging). To install metalog, run emerge metalog, then rc-update add metalog default.

   Important: Metalog flushes output to the disk in blocks, so messages aren't immediately recorded into the system logs. If you are
   trying to debug a daemon, this performance-enhancing behavior is less than helpful. When your Gentoo Linux system is up and running,
   you can send metalog a USR1 signal to temporarily turn off this message buffering (meaning that tail -f /var/log/everything/current
   will now work in real time, as expected), and a USR2 signal to turn buffering back on again.

   Now, you may optionally choose a cron package that you'd like to use. Right now, we offer dcron, fcron and vcron. If you don't know
   which one to choose, you might as well grab vcron. They can be installed as follows:

   Code listing 13.3
# emerge sys-apps/dcron
# crontab /etc/crontab
or
# emerge sys-apps/fcron
# crontab /etc/crontab
or
# emerge sys-apps/vcron

   For more information how cron works under Gentoo Linux, see this announcement.

   14.Install additional packages

   If you're a laptop user and wish to use your pcmcia slots on your first real reboot, you'll want to make sure you install the
   pcmcia-cs package.

   Code listing 14.1
   # emerge sys-apps/pcmcia-cs

   15.Final steps: system configuration

   Final steps: /etc/fstab

   Your Gentoo Linux system is almost ready for use. All we need to do now is configure a few important system files and install the
   yaboot boot loader. The first file we need to configure is /etc/fstab. Remember to specify ext2 or ext3 file system types as
   appropriate.

   Use something like the /etc/fstab listed below, but of course be sure to replace "ROOT" and "SWAP" with the actual block devices you
   are using (such as hda2, etc.). Note that NewWorld users do not add your bootstrap partition to this file.

   Code listing 15.1: /etc/fstab

# /etc/fstab: static file system information.
#
# noatime turns of atimes for increased performance (atimes normally aren't
# needed; notail increases performance of ReiserFS (at the expense of storage
# efficiency).  It's safe to drop the noatime options if you want and to
# switch between notail and tail freely.
# <fs>           <mountpoint>   <type>   <opts>          <dump/pass>

/dev/ROOT           /           ext3     noatime         0 1
/dev/SWAP           none        swap     sw              0 0
/dev/cdroms/cdrom0  /mnt/cdrom  iso9660  noauto,ro       0 0
proc                /proc       proc     defaults        0 0

   Final steps: set the root password

   Before you forget, set the root password by typing:

   Code listing 15.2
   # passwd

   Final steps: /etc/hostname

   Edit this file so that it contains your fully-qualified domain name on a single line, i.e. mymachine.mydomain.com.

   Final steps: /etc/hosts

   This file contains a list of ip addresses and their associated hostnames. It's used by the system to resolve the IP addresses of any
   hostnames that may not be in your nameservers. Here's a template for this file:

   Code listing 15.3: /etc/hosts
127.0.0.1      localhost
# the next line contains your IP for your local LAN, and your associated machine name
192.168.1.1    mymachine.mydomain.com   mymachine

   Final network configuration

   Add the names of any modules that are necessary for the proper functioning of your system to /etc/modules.autoload file (you can also
   add any options you need to the same line.) When Gentoo Linux boots, these modules will be automatically loaded. Of particular
   importance is your ethernet card module, if you happened to compile it as a module:

   Code listing 15.4: /etc/modules.autoload
   sungem

   Edit the /etc/conf.d/net script to get your network configured for your first boot:

   Code listing 15.5
# nano -w /etc/conf.d/net
# rc-update add net.eth0 default

   If you have multiple network cards you need to create additional net.ethx scripts for each one (x = 1, 2, ...):

   Code listing 15.6: Multiple network interfaces
# cd /etc/init.d
# cp net.eth0 net.ethx
# rc-update add net.ethx default

   If you have a PCMCIA card installed, have a quick look into /etc/init.d/pcmcia to verify that things seem all right for your setup,
   then add

   Code listing 15.7
depend() {
        need pcmcia
}

   on top of your /etc/init.d/net.ethx file, for the pcmcia drivers to be autoloaded whenever your network is loaded.

   Final steps: configure basic settings (including the international keymap setting)

   Code listing 15.8: basic configuration
   # nano -w /etc/rc.conf

   Follow the directions in the file to configure the basic settings. All users will want to make sure that CLOCK is set to his/her
   liking. International keyboard users will want to set the KEYMAP variable (browse /usr/share/keymaps to see the various
   possibilities).

   16.Configuring the Boot Loader

   The main difference you'll find here from x86 Linux is the bootloader. NewWorld machines will use yaboot. OldWorld machines use BootX.

   yaboot for NewWorld machines (automatic setup using yabootconfig)

   You can use the new and improved yabootconfig, included with yaboot-1.3.8-r1 and later, to automatically setup yaboot. yabootconfig
   will auto-detect the partitions on your machine and will setup dual and triple boot combinations with Linux, Mac OS, and Mac OS X.

   To use yabootconfig, your drive must have a bootstrap partition, and /etc/fstab must be configured with your Linux partitions. Both of
   these should have been done already in the steps above. To start, ensure that you have the latest version of yaboot installed by
   running emerge -u yaboot. This is necessary as the latest version will be available via Portage, but it may not have made it into the
   stage files.

   At the command prompt run yabootconfig. The program will run and it will confirm the location of the bootstrap partition. Type Y if it
   is correct. If not, double check /etc/fstab. yabootconfig will then scan your system setup, create /etc/yaboot.conf and run mkofboot
   for you. (mkofboot is used to format the bootstrap partition, and install the yaboot configuration file into it.)

   You might want to verify the contents of /etc/yaboot.conf. If you make changes to /etc/yaboot.conf (like setting the default/boot OS),
   make sure to rerun ybin -v to apply changes to the bootstrap partition.

   yaboot for NewWorld machines (manual setup of yaboot.conf)

   If for some reason you do not want to run yabootconfig to automatically setup /etc/yaboot.conf, you can just edit the sample file
   already installed on your system. Below is a completed yaboot.conf file:

   Code listing 16.1: /etc/yaboot.conf
## /etc/yaboot.conf
##
## run: "man yaboot.conf" for details. Do not make changes until you have!!
## see also: /usr/share/doc/yaboot/examples for example configurations.
##
## For a dual-boot menu, add one or more of:
## bsd=/dev/hdaX, macos=/dev/hdaY, macosx=/dev/hdaZ

## our bootstrap partition:
boot=/dev/hda9

##hd: is open firmware speak for hda
device=hd:
partition=11

root=/dev/hda11
delay=5
defaultos=macosx
timeout=30
install=/usr/lib/yaboot/yaboot
magicboot=/usr/lib/yaboot/ofboot

#################
## This section can be duplicated if you have more than one kernel or set of
## boot options
#################
image=/boot/vmlinux
        label=Linux
        sysmap=/boot/System.map
        read-only
##################

macos=/dev/hda13
macosx=/dev/hda12
enablecdboot
enableofboot

   Once yaboot.conf is set up how you want it, you run mkofboot -v to install the settings in the bootstrap partition. Don't forget this!
   If all goes well, and you have the same options as the sample above, your next reboot will give you a simple, five-entry boot menu. If
   you update your yaboot config later on, you'll just need to run ybin -v to update the bootstrap partition - mkofboot is for initial
   setup only.

   Note: Yaboot has some functionality for setting config at boot time, so take a look at http://penguinppc.org/projects/yaboot for more
   info.

   BootX for OldWorld machines

   Important: Follow these steps after you reboot your machine in the next step.

   Boot your machine in MacOS and open the BootX control panel. Select Options, and uncheck Used specified RAM disk. When you return to
   the BootX main screen, you will now find an option to specify your machine's root disk and partition. Fill these in with the
   appropriate values.

   BootX can be configured to start Linux upon boot. If you do this, you will first see your machine boot into MacOS then, during
   startup, BootX will load and start Linux. See the BootX home page for more information.

   17.Installation complete!

   Now, Gentoo Linux is installed. The only remaining step is to exit the chrooted shell, safely unmount your partitions and reboot the
   system:

   Code listing 17.1
# exit  // This exits the chrooted shell; you can also type ^D
# cd /
# umount /mnt/gentoo/proc
# umount /mnt/gentoo
# reboot

   Note: After rebooting, it is a good idea to run the update-modules command to create the /etc/modules.conf file. Instead of modifying
   this file directly, you should generally make changes to the files in /etc/modules.d.

   18.Extras

   Multiple mouse button emulation

   You may want to add these lines to an /etc/sysctl.conf to enable multiple mouse button emulation at each boot. The key values can be
   obtained with command line utility showkey. Here is a sample using F11 and F12.

   Code listing 18.1
# Enable mouse button emulation
dev.mac_hid.mouse_button_emulation = 1
# Set 2nd button to 87 - F11
dev.mac_hid.mouse_button2_keycode = 87
# Set 3rd button to 88 - F12
dev.mac_hid.mouse_button3_keycode = 88

   Gentoo-Stats

   The Gentoo Linux usage statistics program was started as an attempt to give the developers a way to find out about their user base. It
   collects information about Gentoo Linux usage to help us in set priorities our development. Installing it is completely optional, and
   it would be greatly appreciated if you decide to use it. Compiled statistics can be viewed at http://stats.gentoo.org/.

   The gentoo-stats server will assign a unique ID to your system. This ID is used to make sure that each system is counted only once.
   The ID will not be used to individually identify your system, nor will it be matched against an IP address or other personal
   information. Every precaution has been taken to assure your privacy in the development of this system. The following are the things
   that we are monitoring right now through our "gentoo-stats" program:
     * installed packages and their version numbers
     * CPU information: speed (MHz), vendor name, model name, CPU flags (like "altivec")
     * memory information (total available physical RAM, total available swap space)
     * PCI cards and network controller chips
     * the Gentoo Linux profile your machine is using (that is, where the /etc/make.profile link is pointing to).

   We are aware that disclosure of sensitive information is a threat to most Gentoo Linux users (just as it is to the developers).
     * Unless you modify the gentoo-stats program, it will never transmit sensitive information such as your passwords, configuration
       data, favorite movie...
     * Transmission of your e-mail addresses is optional and turned off by default.
     * The IP address your data transmission originates from will never be logged in such a way that we can identify you. There are no
       "IP address/system ID" pairs.

   The installation is easy - just run the following commands:

   Code listing 18.2: Installing gentoo-stats
# emerge gentoo-stats   // Installs gentoo-stats
# gentoo-stats --new    // Obtains a new system ID

   The second command above will request a new system ID and enter it into /etc/gentoo-stats/gentoo-stats.conf automatically. You can
   view this file to see additional configuration options.

   After that, the program should be run on a regular schedule (gentoo-stats does not have to be run as root). Add this line to your
   crontab:

   Code listing 18.3: Updating gentoo-stats with cron
   0 0 * * 0,4 /usr/sbin/gentoo-stats --update > /dev/null

   The gentoo-stats program is a simple perl script which can be viewed with your favorite pager or editor: /usr/sbin/gentoo-stats.

   Where to go from here

   Some very good all-arch docs are available in the docs section of the Gentoo Main site. Prelinking your system is adviced (not
   necessary) if you want bleeding edge performance (KDE startup time improves by at least 50%). Alsa (advanced linux sound architecture)
   is also very good on some ppc machines (especially newer powerbooks). If you want a highly configurable audio system check that doc
   out. Applications that you really want to check out and set up on a mac machine are pmud (advanced power management) or pbbuttons (if
   you're a powerbook owner). Setting up Xfree on PPC machines is very easy; emerge Xeasyconf && Xeasyconf should do.

   If you have any questions or would like to get involved with Gentoo Linux development, consider joining our gentooppc-user and
   gentooppc-dev mailing lists (there's a "click to subscribe" link on our main page). We also have a handy Desktop configuration guide
   that will help you to continue configuring your new Gentoo Linux system, and a useful Portage user guide to help familiarize you with
   Portage basics. Enjoy and welcome to Gentoo Linux!

   The Gentoo Linux/PowerPC FAQ covers frequently asked questions about running Gentoo Linux/PPC. The general Gentoo Linux FAQ might also
   help to get you started, although it is geared towards x86 installations. Gentoo on PPC (on forums.gentoo.org) is a open
   bulletin-board for discussion of all PowerPC issues. Also, there is usually a lively discussion on IRC. Join us on #gentoo-ppc on
   irc.freenode.net.

   Thanks and have fun with Gentoo!
