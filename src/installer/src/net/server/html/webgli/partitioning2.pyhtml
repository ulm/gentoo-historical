<? include /webgli/common.pyhtml ?>
<?
if self.get_params['editdrive']:
	self.post_params['editdrive'] = self.get_params['editdrive']
colors = { 'ext2': '#0af2fe', 'ext3': '#0af2fe', 'unalloc': '#a2a2a2', 'unknown': '#ed03e0', 'free': '#ffffff', 'ntfs': '#f20600', 'fat16': '#3d07f9', 'fat32': '#3d07f9', 'reiserfs': '#f0ff00', 'linux-swap': '#12ff09', 'xfs': '#006600', 'jfs': '#ffb400' }
?>
<h4>Select a partition or unallocated space to edit</h4>
<: if not self.post_params['editdrive']:
ERROR: You must select a drive to be editing!<br>
<!-- return self.wrap_in_webgli_template(data) -->
<: else:
<?
drive_to_partition = self.post_params['editdrive']
self.shared_info.drive_to_partition = drive_to_partition
partitions = self.shared_info.devices[drive_to_partition].get_partitions()
partlist = self.shared_info.devices[drive_to_partition].get_ordered_partition_list()
tmpparts = self.shared_info.devices[drive_to_partition].get_partitions()
?>
<form name="part2" action="/webgli/partitioning3.pyhtml" method="POST" enctype="multipart/form-data">
<input type="hidden" name="editdrive" value="<% drive_to_partition %>">
<input type="hidden" name="editpart2" value="">
<script>
function partition_selected(minor) {
  document.part2.editpart2.value = minor;
  document.part2.submit();
}
</script>
<?
if self.shared_info.error_message:
	print '<span style="color: red;">' + self.shared_info.error_message + '</span><br><br>'
	self.shared_info.error_message = ""
total_mb = self.shared_info.devices[drive_to_partition].get_total_mb()
extended_total_mb = 0
last_percent = 0
last_log_percent = 0
if len(partlist):
	print '<table width="100%" cellspacing="0" cellpadding="0" border="1">'
	print '  <tr>'
for part in partlist:
	tmppart = tmpparts[part]
	if tmppart.get_type() == "free":
		partsize = tmppart.get_mb()
		percent = (float(partsize) / float(total_mb)) * 100
		if percent < 1: percent = 1
		percent = int(percent)
		if tmppart.is_logical():
			ext_percent = (float(partsize) / float(extended_total_mb)) * 100
			if ext_percent < 1: ext_percent = 1
			ext_percent = int(ext_percent)
			print '    <td height="40" width="' + str(ext_percent) + '%" align="center" style="background-color: ' + colors['unalloc'] + ';" onclick="partition_selected(' + str(part) + ');">' + "&nbsp;</td>\n"
			last_log_percent = last_log_percent + percent
		else:
			print '    <td height="40" width="' + str(percent) + '%" align="center" style="background-color: ' + colors['unalloc'] + ';" onclick="partition_selected(' + str(part) + ');">' + "&nbsp;</td>\n"
			last_percent = last_percent + percent
	else:
		partsize = tmppart.get_mb()
		percent = (float(partsize) / float(total_mb)) * 100
		if percent < 1: percent = 1
		percent = int(percent)
		tmpminor = int(tmppart.get_minor())
		tmpdevice = drive_to_partition
		if tmppart.is_extended():
			print '    <td height="40" width="' + str(percent) + '%" align="center" style="background-color: #ffffff;">' + "\n" + '      <table width="100%" cellspacing="0" cellpadding="0" border="1" style="margin: 2px;">' + "\n        <tr>\n"
			extended_total_mb = tmppart.get_mb()
			last_percent = last_percent + percent
		elif tmppart.is_logical():
			ext_percent = (float(partsize) / float(extended_total_mb)) * 100
			if ext_percent < 1: ext_percent = 1
			ext_percent = int(ext_percent)
			print '    <td height="40" width="' + str(ext_percent) + '%" align="center" style="background-color: ' + colors[tmppart.get_type()] + ';" onclick="partition_selected(' + str(tmpminor) + ');">'
			if percent >= 15:
				print tmpdevice + str(tmpminor)
			print "</td>\n"
			last_log_percent = last_log_percent + percent
		else:
			if extended_total_mb:
				print "        </tr>\n      </table>\n    </td>\n"
				extended_total_mb = 0
			print '    <td height="40" width="' + str(percent) + '%" align="center" style="background-color: ' + colors[tmppart.get_type()] + ';" onclick="partition_selected(' + str(tmpminor) + ');">'
			if percent >= 15:
				print tmpdevice + str(tmpminor)
			print "</td>\n"
			last_percent = last_percent + percent
if extended_total_mb:
	print "        </tr>\n      </table>\n    </td>\n"
	extended_total_mb = 0
if len(partlist):
	print "  </tr>\n</table>\n<br>\n"
if self.shared_info.devices[drive_to_partition].get_model() == "Generic disk":
	print '<input type="button" value="Add new at end" onclick="partition_selected(-1);"> &nbsp; '
else:
	print '<input type="submit" name="recommended" value="Recommended layout"> &nbsp; '
?>
<input type="submit" name="cleardrive" value="Clear drive"><br>
<table style="display: none;">
  <tr>
    <td>EDIT</td>
    <td>INFO: Key: Minor, Pri/Ext, Filesystem, MkfsOpts, Mountpoint, MountOpts, Size.</td>
  </tr>
<: for i, part in __builtins__.enumerate(partlist):
<?
tmppart = tmpparts[part]
minor = tmppart.get_minor()
if not tmppart.get_type() == "free":
	minor = int(minor)
?>
  <tr>
    <td><input type="radio" name="editpart" value="<% str(minor) %>"></td>
<?
if tmppart.get_type() == "free":
	#partschoice = "New"
	entry = _(u" - Unallocated space (")
	if tmppart.is_logical():
		entry += _(u"logical, ")
	entry += str(tmppart.get_mb()) + "MB)"
elif tmppart.get_type() == "extended":
	entry = str(int(tmppart.get_minor()))
	entry += _(u" - Extended Partition (") + str(tmppart.get_mb()) + "MB)"
else:
	entry = str(int(tmppart.get_minor())) + " - "
	# Type: " + tmppart.get_type() + ", Mountpoint: " + tmppart.get_mountpoint() + ", Mountopts: " + tmppart.get_mountopts() + "("
	if tmppart.is_logical():
		entry += _(u"Logical (")
	else:
		entry += _(u"Primary (")
	entry += tmppart.get_type() + ", "
	entry += (tmppart.get_mkfsopts() or "none") + ", "
	entry += (tmppart.get_mountpoint() or "none") + ", "
	entry += (tmppart.get_mountopts() or "none") + ", "
	entry += str(tmppart.get_mb()) + "MB)"
?>
    <td><% entry %></td>
  </tr>
:>
<: if self.shared_info.devices[drive_to_partition].get_model() == "Generic disk":
  <tr>
    <td><input type="radio" name="editpart" value="-1"></td><td>Add new at end</td>
  </tr>
:>
  <tr>
    <td colspan="2"><br><input type="submit" name="SubmitEditPart" value="Edit Partition"></td>
  </tr>
</table>
</form>
<? return_content = self.wrap_in_webgli_template(return_content) ?>
