	def saveclientconfig(self):
		data = ""
				
		if 'ArchType' in self.post_params:
			data += "Found an architecture:  you submitted " + self.post_params['ArchType']+ "<BR>\n"
			try:
				self.shared_info.client_profile.set_architecture_template(None, self.post_params['ArchType'], None)
			except:
				data += "ERROR: Could not set the Architecture Template<br>\n"
		if 'Logfile' in self.post_params:
			data += "Found a logfile: you submitted " + self.post_params['Logfile'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_log_file(None, self.post_params['Logfile'], None)
			except:
				data += "ERROR: Could not set the Logfile <BR>\n"
		if 'RootMountPoint' in self.post_params:
			data += "Found a root mount point: you submitted " + self.post_params['RootMountPoint'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_root_mount_point(None, self.post_params['RootMountPoint'], None)
			except:
				data += "ERROR: Could not set the Root Mount Point<BR>\n"
		if 'Network_Iface' in self.post_params:
			data += "Found a network interface: you submitted " + self.post_params['Network_Iface'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_network_interface(None, self.post_params['Network_Iface'], None)
			except:
				data += "ERROR: Could not set the Network Interface<BR>\n"
		if 'Network_Type' in self.post_params:
			data += "Found a Network Type: you submitted " + self.post_params['Network_Type'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_network_type(None, self.post_params['Network_Type'], None)
			except:
				data += "ERROR: Could not set the Network Type<BR>\n"
		if 'dhcp_options' in self.post_params:
			data += "Found DHCP Options.  You submitted " + self.post_params['dhcp_options'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_network_dhcp_options(None, self.post_params['dhcp_options'], None)
			except:
				data += "ERROR: Could not set the dhcp options<br>\n"
		if 'ip' in self.post_params:
			data += "Found an IP: you submitted " + self.post_params['ip'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_network_ip(None, self.post_params['ip'], None)
			except:
				data += "ERROR: Could not set the IP<BR>\n"
		if 'broadcast' in self.post_params:
			data += "Found an broadcast IP: you submitted " + self.post_params['broadcast'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_network_broadcast(None, self.post_params['broadcast'], None)
			except:
				data += "ERROR: Could not set the broadcast IP<BR>\n"
		if 'netmask' in self.post_params:
			data += "Found an netmask IP: you submitted " + self.post_params['netmask'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_network_netmask(None, self.post_params['netmask'], None)
			except:
				data += "ERROR: Could not set the netmask IP<BR>\n"
		if 'gateway' in self.post_params:
			data += "Found an gateway IP: you submitted " + self.post_params['gateway'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_network_gateway(None, self.post_params['gateway'], None)
			except:
				data += "ERROR: Could not set the gateway IP<BR>\n"
		if 'http_proxy' in self.post_params:
			data += "Found an HTTP Proxy IP: you submitted " + self.post_params['http_proxy'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_http_proxy(None, self.post_params['http_proxy'], None)
			except:
				data += "ERROR: Could not set the HTTP Proxy IP<BR>\n"
		if 'ftp_proxy' in self.post_params:
			data += "Found an FTP Proxy IP: you submitted " + self.post_params['ftp_proxy'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_ftp_proxy(None, self.post_params['ftp_proxy'], None)
			except:
				data += "ERROR: Could not set the FTP Proxy IP<BR>\n"
		if 'rsync_proxy' in self.post_params:
			data += "Found an RSYNC Proxy IP: you submitted " + self.post_params['rsync_proxy'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_rsync_proxy(None, self.post_params['rsync_proxy'], None)
			except:
				data += "ERROR: Could not set the RSYNC Proxy IP<BR>\n"
		if 'dnsserver' in self.post_params:
			data += "Found an DNS server: you submitted " + self.post_params['dnsserver'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_dns_servers(None, self.post_params['dnsserver'], None)
			except:
				data += "ERROR: Could not set the DNS Server<BR>\n"
		if 'EnableSSH' in self.post_params:
			data += "Found an Enable SSH Flag: you set it to " + self.post_params['EnableSSH'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_enable_ssh(None, self.post_params['EnableSSH'], None)
			except:
				data += "ERROR: Could not set the SSH flag<BR>\n"
		if 'Verbose' in self.post_params:
			data += "Found an Verbose Mode Flag: you set it to " + self.post_params['Verbose'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_verbose(None, self.post_params['Verbose'], None)
			except:
				data += "ERROR: Could not set the Verbose mode flag<BR>\n"
		if ('RootPass1' in self.post_params) and ('RootPass2' in self.post_params):
			data += "Found a root password1: you submitted " + self.post_params['RootPass1'] + "<BR>\n"
			data += "Found a root password2: you submitted " + self.post_params['RootPass2'] + "<BR>\n"
			if self.post_params['RootPass1'] == self.post_params['RootPass2']:
				try:
					self.shared_info.client_profile.set_root_passwd(None, GLIUtility.hash_password(self.post_params['RootPass1']), None)
				except:
					data += "ERROR: Could not set the root password<BR>\n"
			else:
				data += "ERROR: Passwords DO NOT MATCH!<BR>\n"
		if 'Modules' in self.post_params:
			data += "Found an Additional Module: you submitted " + self.post_params['Modules'] + "<BR>\n"
			try:
				self.shared_info.client_profile.set_kernel_modules(None, self.post_params['Modules'], None)
			except:
				data += "ERROR: Could not set the Kernel Modules<BR>\n"
		if 'SaveCCFile' in self.post_params:
			data += "Found a filename to save the Client Profile:" + self.post_params['SaveCCFile'] + "<BR>\n"
			try:
				configuration = open(self.post_params['SaveCCFile'] ,"w")
				configuration.write(self.shared_info.client_profile.serialize())
				configuration.close()
				data += "Profile saved successfully.	Here it is <BR><pre>" + self.shared_info.client_profile.serialize() + "</pre><br>\n"
			except:
				data += "ERROR: Could not save the profile!<BR>\n"
		return self.wrap_in_webgli_template(data)
		
	def loadprofile(self):
		content = """
		<h2>Load Client Profile</h2>
		<br>
		<form action="/webgli/loadprofile2" method="POST" enctype="multipart/form-data">
		Use local (to server) file: <input type="text" name="clientfile"><br>
		or<br>
		Upload file: <input type="file" name="uploadclientfile"><br>
		<input type="submit" value="Load">
		</form><hr>
		<h2>Load Install Profile</h2>
		<br>
		<form action="/webgli/loadprofile2" method="POST" enctype="multipart/form-data">
		Use local (to server) file: <input type="text" name="installfile"><br>
		or<br>
		Upload file: <input type="file" name="uploadipfile"><br>
		<input type="submit" value="Load">
		</form>
		"""
		return self.wrap_in_webgli_template(content)
	def loadprofile2(self):
		content = "<h2>Load Profile</h2>"
		xmlfile = ""
		if self.post_params['clientfile']:
			xmlfile = self.post_params['clientfile']
