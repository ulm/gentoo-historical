	def savekernel(self):
		data = ""
		if self.post_params['setkernel']:
			if self.post_params['manualsouces']:
				try:
					self.shared_info.install_profile.set_kernel_source_pkg(None,self.post_params['manualsouces'],None)
				except:
					data += "ERROR: Could not set the kernel sources!" + self.post_params['manualsouces']
			elif self.post_params['sources']:
				try:
					self.shared_info.install_profile.set_kernel_source_pkg(None,self.post_params['sources'],None)
				except:
					data += "ERROR: Could not set the kernel sources!" + self.post_params['sources']
			if self.post_params['build_method']:
				try:
					self.shared_info.install_profile.set_kernel_build_method(None,self.post_params['build_method'],None)
				except:
					data += "ERROR: Could not set the kernel build method!"
				if self.post_params['configuri']:
					try:
						self.shared_info.install_profile.set_kernel_config_uri(None,self.post_params['configuri'],None)
					except:
						data += "ERROR: Could not set the kernel config URI!"
			if self.post_params['bootsplash']:
				try:
					self.shared_info.install_profile.set_kernel_bootsplash(None,self.post_params['bootsplash'],None)
				except:
					data += "ERROR: Could not set the kernel bootsplash!" + self.post_params['bootsplash']
		
		return self.wrap_in_webgli_template(data)
	def bootloader(self):
		arch = self.shared_info.client_profile.get_architecture_template()
		parts = self.shared_info.install_profile.get_partition_tables()
		#Bootloader code yanked from the x86ArchTemplate
		if self.shared_info.install_profile.get_boot_device():
			boot_device = self.shared_info.install_profile.get_boot_device()
		else:
			boot_device = ""
			foundboot = False
			for device in parts:
				tmp_partitions = parts[device].get_install_profile_structure()
				for partition in tmp_partitions:
					mountpoint = tmp_partitions[partition]['mountpoint']
					if (mountpoint == "/boot"):
						foundboot = True
					if (( (mountpoint == "/") and (not foundboot) ) or (mountpoint == "/boot")):
						boot_device = device

		bootloader = self.shared_info.install_profile.get_boot_loader_pkg()
		arch_loaders = { 'x86': [
				("grub",(u"GRand Unified Bootloader, newer, RECOMMENDED")),
				("lilo",(u"LInux LOader, older, traditional.(detects windows partitions)"))],
			'amd64': [
				("grub",(u"GRand Unified Bootloader, newer, RECOMMENDED"))]} #FIXME ADD OTHER ARCHS
		data = "<p>Bootloader Settings:</p>"
		data += '<form name="Bloader" method="post" action="/webgli/savebootloader" enctype="multipart/form-data">'
		data += """  <p>To boot successfully into your new Linux system, a bootloader will be needed. If you already have a bootloader you want to use you can select None here. The bootloader choices available are dependent on what GLI supports and what architecture your system is. Choose a bootloader:</p>
		<table width="100%"  border="1">"""
		boot_loaders = arch_loaders[arch]
		boot_loaders.append(("none", (u"Do not install a bootloader.	(System may be unbootable!)")))
		for i,bloader in enumerate(boot_loaders):
			data += '<tr><td><input name="bootloader" type="radio" value="'+boot_loaders[i][0]+'" '
			if bootloader == boot_loaders[i][0]:
				data += "checked"
			data += '>'+boot_loaders[i][0]+'</td><td>'+boot_loaders[i][1]+"</td></tr>\n"
		data += """
		</table>
		<hr>
		Most bootloaders have the ability to install to either the Master Boot Record (MBR) or some other partition. Most people will want their bootloader installed on the MBR for successful boots, but if you have special circumstances, you can have the bootloader installed to the /boot partition instead. Do you want the boot loader installed in the MBR? (YES is RECOMMENDED)
		<p>"""
		bootmbr = self.shared_info.install_profile.get_boot_loader_mbr()
		data += '<input name="bootmbr" type="checkbox" id="bootmbr" value="True"'
		if bootmbr:
			data += " checked"
		data += ">Install to MBR</p>"
		
		if not boot_device:
			data += _(u"You need to partition before you can select the boot device.")
		if boot_device and boot_device[-1] != 'a':
			#show the menu.
			data += _(u"Your boot device may not be correct.  It is currently set to %s, but this device may not be the first to boot.  Usually boot devices end in 'a' such as hda or sda.") % boot_device
			data += _(u"  Please confirm your boot device.<br>")
			#grab choies from the partiton list.
			boot_drive_choices = []
			for device in parts:
				data += '<input type="radio" name="boot_drive_choice" value="'+device+'">'+device+"<br>\n"
				
		data += """<br><p>If you have any additional optional arguments you want to pass to the kernel at boot, type them here: 
		<input name="bootargs" type="text" id="bootargs" """
		bootargs = self.shared_info.install_profile.get_bootloader_kernel_args()
		if bootargs:
			data += ' value="'+bootargs+'"'
		data += """>
	</p>
		<p>
		<input name="setbootloader" type="submit" id="setbootloader" value="Save Bootloader Settings">
		</p>
	</form>"""

		return self.wrap_in_webgli_template(data)
	def savebootloader(self):
		data = ""
		if self.post_params['setbootloader']:
			if self.post_params['bootloader']:
				try:
					self.shared_info.install_profile.set_boot_loader_pkg(None,self.post_params['bootloader'],None)
				except:
					data += "ERROR: Could not set the bootloader pkg!"
			if self.post_params['bootmbr']:
				try:
					self.shared_info.install_profile.set_boot_loader_mbr(None,self.post_params['bootmbr'],None)
					if self.post_params['boot_drive_choice']:
						try:
							self.shared_info.install_profile.set_boot_device(None,self.post_params['boot_drive_choice'],None)
						except:
							data += "ERROR! Could not set the boot device!"+self.post_params['boot_drive_choice']
				except:
					data += "ERROR: Could not set the bootloader MBR flag to TRUE and set boot drive too!"
			else:
				try:
					self.shared_info.install_profile.set_boot_loader_mbr(None,False,None)
				except:
					data += "ERROR: Could not set the bootloader MBR flag to FALSE."
			if self.post_params['bootargs']:
				try:
					self.shared_info.install_profile.set_bootloader_kernel_args(None,self.post_params['bootargs'],None)
				except:
					data += "ERROR: Could not set the bootloader kernel arguments!"
		return self.wrap_in_webgli_template(data)
	def timezone(self):
		data = "<h2>Timezone Setup </h2>"
		if self.post_params['back']:
			zonepath = self.post_params['tzback']
		if self.get_params['zonepath']:
			zonepath = self.get_params['zonepath']
			if zonepath[-1] != "/":
				try:
					self.shared_info.install_profile.set_time_zone(None, zonepath[20:], None)
					return self.wrap_in_webgli_template("Timezone Set")
				except:
					return self.wrap_in_webgli_template("ERROR: Could not set that timezone!")	
		else:
			zonepath = "/usr/share/zoneinfo/"
		skiplist = ["zone.tab","iso3166.tab","posixrules"]
		tzlist = []
		for entry in os.listdir(zonepath):
			if entry not in skiplist:
				if os.path.isdir(zonepath + "/" + entry): entry += "/"
				tzlist.append(entry)
		tzlist.sort()
		
