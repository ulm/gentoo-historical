	def globaluse(self):
		data = "<h2>Configuration Files Settings</h2><p>Make.conf Settings:</p>"
		if self.shared_info.install_profile.get_dynamic_stage3():
			data += "<b>You have selected a dynamic stage3 installation.  This setting forbids you from changing your USE flags until after the installation to prevent breaking the stage3 creation process.</b>"
			return self.wrap_in_webgli_template(data)
		etc_files = self.shared_info.install_profile.get_etc_files()
		if etc_files.has_key("make.conf"):
			make_conf = etc_files['make.conf']
		else:
			make_conf = {}
		data += """The installer will now gather information regarding the contents of /etc/make.conf
One of the unique (and best) features of Gentoo is the ability to
define flags (called USE flags) that define what components are 
compiled into applications.  For example, you can enable the alsa
flag and programs that have alsa capability will use it.	
The result is a finely tuned OS with no unnecessary components to
slow you down.
The installer divides USE flag selection into two screens, one for
global USE flags and one for local flags specific to each program.
Please be patient while the screens load. It may take awhile.
<form action="/webgli/saveglobaluse" method="POST" enctype="multipart/form-data">
"""
#First set the USE flags, this is a biggie.
		if make_conf.has_key("USE"): 
			system_use_flags = make_conf["USE"]
		else:  #not a preloaded config.  this is the NORMAL case.
			system_use_flags = GLIUtility.spawn("portageq envvar USE", return_output=True)[1].strip().split()
		use_flags = []
		use_desc = GLIUtility.get_global_use_flags()
		#populate the choices list
		sorted_use = use_desc.keys()
		sorted_use.sort()
		#present the GLOBAL checkbox list
		data += '<h3>Global USE Flags:</h3><table width="100%"	border="1"><tr><th scope="col">Active</th><th scope="col">Flag</th><th scope="col">Description</th></tr>'+"\n"
		for flagname in sorted_use:
			data += '<tr><td><input name="flags" type="checkbox" id="flags" value="'+flagname+'" '
			if flagname in system_use_flags:
				data += "checked"
			data += "></td><td>"+flagname+"</td><td>"+use_desc[flagname]+"</td></tr>\n"
		data += "</table><br>"
		data += '<input name="saveglobaluse" type="submit" id="saveglobaluse" value="Save Global USE Settings">'
		data += "</form>\n"
		return self.wrap_in_webgli_template(data)
	def saveglobaluse(self):
		data = ""
		temp_use = "-* "
		if self.post_params['flags']:
			if isinstance(self.post_params['flags'], list):
				use_flags = self.post_params['flags'];
				for flag in use_flags:
					temp_use += flag + " "
			else:
				temp_use += self.post_params['flags'] + " "
			self.shared_info.temp_use = temp_use
		return self.wrap_in_webgli_template(data)
	def localuse(self):
		data = "<h2>Configuration Files Settings</h2><p>Make.conf Settings:</p>"
		if self.shared_info.install_profile.get_dynamic_stage3():
			data += "<b>You have selected a dynamic stage3 installation.  This setting forbids you from changing your USE flags until after the installation to prevent breaking the stage3 creation process.</b>"
			return self.wrap_in_webgli_template(data)
		etc_files = self.shared_info.install_profile.get_etc_files()
		if etc_files.has_key("make.conf"):
			make_conf = etc_files['make.conf']
		else:
			make_conf = {}
		data += """The installer will now gather information regarding the contents of /etc/make.conf
One of the unique (and best) features of Gentoo is the ability to
define flags (called USE flags) that define what components are 
compiled into applications.  For example, you can enable the alsa
flag and programs that have alsa capability will use it.	
The result is a finely tuned OS with no unnecessary components to
slow you down.
The installer divides USE flag selection into two screens, one for
global USE flags and one for local flags specific to each program.
Please be patient while the screens load. It may take awhile.
<form action="/webgli/savelocaluse" method="POST" enctype="multipart/form-data">
"""
#First set the USE flags, this is a biggie.

		if make_conf.has_key("USE"): 
			system_use_flags = make_conf["USE"]
		else:  #not a preloaded config.  this is the NORMAL case.
			system_use_flags = GLIUtility.spawn("portageq envvar USE", return_output=True)[1].strip().split()
		use_local_flags = []
		use_local_desc = GLIUtility.get_local_use_flags()
		#re-populate the chocies list
		sorted_use = use_local_desc.keys()
		sorted_use.sort()
		#present the LOCALcheckbox list
		data += '<h3>Local USE Flags:</h3><table width="100%"  border="1"><tr><th scope="col">Active</th><th scope="col">Flag</th><th scope="col">Description</th></tr>'+"\n"
		for flagname in sorted_use:
			data += '<tr><td><input name="flags" type="checkbox" id="flags" value="'+flagname+'" '
			if flagname in system_use_flags:
				data += "checked"
			data += "></td><td>"+flagname+"</td><td>"+use_local_desc[flagname]+"</td></tr>\n"
		data += "</table><br>"
		data += '<input name="savelocaluse" type="submit" id="savelocaluse" value="Save Local USE Settings">'
		data += "</form>\n"
		return self.wrap_in_webgli_template(data)
	def savelocaluse(self):
		data = ""
		temp_use = " "
		if self.post_params['flags']:
			if isinstance(self.post_params['flags'], list):
				use_local_flags = self.post_params['flags']
				for flag in use_local_flags:
					temp_use += flag + " "
			else:
				tempuse += self.post_params['flags'] + " "
		#get the make.conf
		etc_files = self.shared_info.install_profile.get_etc_files()
		if etc_files.has_key("make.conf"):
			make_conf = etc_files['make.conf']
		else:
			make_conf = {}
		make_conf["USE"] = self.shared_info.temp_use + temp_use
		etc_files['make.conf'] = make_conf
		self.shared_info.install_profile.set_etc_files(etc_files)
		return self.wrap_in_webgli_template(data)
	def makedotconf(self):
		data = "<b>Make.conf Settings:</b><br>\n"
		if self.shared_info.install_profile.get_dynamic_stage3():
			data += "<b>You have selected a dynamic stage3 installation.  This setting forbids you from changing some make.conf settings until after the installation to prevent breaking the stage3 creation process.</b>"
		data += "<b>NOTE: Your old values are NOT loaded here.  Do not save these settings without making sure all values are what you want.  To keep your old values just skip this step.</b>\b"
		data += '<form action="/webgli/savemakedotconf" method="POST" enctype="multipart/form-data">'
		arch_procs = { 'x86': ("i386", "i486", "i586", "pentium", "pentium-mmx", "i686", "pentiumpro", "pentium2", "pentium3", "pentium3m", "pentium-m", "pentium4", "pentium4m", "prescott", "nocona", "k6", "k6-2", "k6-3", "athlon", "athlon-tbird", "athlon-4", "athlon-xp", "athlon-mp", "k8", "opteron", "athlon64", "athlon-fx", "winchip-c6", "winchip2", "c3", "c3-2") }
		etc_files = self.shared_info.install_profile.get_etc_files()
		if etc_files.has_key("make.conf"):
			make_conf = etc_files['make.conf']
		else:
			make_conf = {}
		
		data += '<h3>CFLAGS Settings: </h3>(only show these if not dynamic):<table width="100%"  border="1"><tr><td scope="col"><div align="left">Processor:<select name="proc" id="proc">'
		procs = arch_procs[self.shared_info.client_profile.get_architecture_template()]
		for proc in procs:
			data += "<option value=\""+proc+"\">"+proc+"</option>\n"
		data += """
					</select>
					<br>
					<input type="radio" name"m_thing" value="-march">-march 
					<input type="radio" name"m_thing" value="-mcpu">-mcpu 
					<input type="radio" name"m_thing" value="-mtune">-mtune 

			</div></td>
			<td scope="col">Optimizations: 
				<select name="optim1" id="optim1">
					<option value="-O1">-O1</option>
					<option value="-O2" selected>-O2 (Recommended)</option>
					<option value="-O3">-O3</option>
					<option value="-O4">-O4</option>
					<option value="-O5">-O5</option>
