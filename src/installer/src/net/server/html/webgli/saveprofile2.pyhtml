	def saveprofile2(self):
		content = "<h2>Save Profile</h2>"
		if not 'downloadclient' in post_params and post_params['clientfile']:
			try:
				tmpfile = open(post_params['clientfile'], "w")
				tmpfile.write(shared_info.client_profile.serialize())
				tmpfile.close()
			except:
				content += "There was a problem writing the file" + get_exception()
				return wrap_in_webgli_template(content)
			return wrap_in_webgli_template(content + "Client Profile saved successfully")
		elif 'downloadclient' in post_params:
			headers_out.append(("Content-type", "text/xml"))
			headers_out.append(('Content-disposition', "attatchment;filename=clientprofile.xml"))
			return shared_info.client_profile.serialize()
		if not 'downloadip' in post_params and post_params['ipfile']:
			try:
				tmpfile = open(post_params['ipfile'], "w")
				tmpfile.write(shared_info.install_profile.serialize())
				tmpfile.close()
			except:
				content += "There was a problem writing the file" + get_exception()
				return wrap_in_webgli_template(content)
			return wrap_in_webgli_template(content + "Client Profile saved successfully")
		elif 'downloadip' in post_params:
			headers_out.append(("Content-type", "text/xml"))
			headers_out.append(('Content-disposition', "attatchment;filename=installprofile.xml"))
			return shared_info.install_profile.serialize()
	def showwelcome(self):
		data = "Welcoming string here.<BR>LOCAL INSTALL ASSUMED FOR THIS FRONT END<br>\n"
		return wrap_in_webgli_template(data)
	def partitioning(self):
		if 'add_device' in post_params:
			shared_info.devices[post_params['add_device']] = GLIStorageDevice.Device(post_params['add_device'], set_geometry=False, local_device=False)
#		data = '<form name="part" action="/webgli/Partitioning2" method="POST" enctype="multipart/form-data">'
		data = """The first thing on the new system to setup is the partitoning.
You will first select a drive and then edit its partitions.
No changes will be saved until the end of the step.
No changes to your disk will be made until the installation.
NOTE: YOU MUST AT LEAST SELECT ONE PARTITION AS YOUR ROOT PARTITION "/"
If your drive is pre-partitioned, just select the mountpoints and make 
sure that the format option is set to FALSE or it will erase your data.
The installer does not yet support resizing of partitions (its not safe).
Please refer to the Gentoo Installation Handbook for more information
on partitioning and the various filesystem types available in Linux.<br><br>
Which drive would you like to partition?<br>"""
#		data += partitions_string1
		shared_info.devices = shared_info.install_profile.get_partition_tables()
		drives = shared_info.devices.keys()
		drives.sort()
		choice_list = []
		if not shared_info.devices:
			tmp_drives = GLIStorageDevice.detect_devices()
			tmp_drives.sort()
			for drive in tmp_drives:
				shared_info.devices[drive] = GLIStorageDevice.Device(drive)
				#if local_install:  #when uncommenting please indent the next line.
				shared_info.devices[drive].set_partitions_from_disk()
				drives.append(drive)
				choice_list.append((drive, shared_info.devices[drive].get_model()))
		else:
			for drive in drives:
				choice_list.append((drive, shared_info.devices[drive].get_model()))
		data += "<table>\n"
#		data += "<tr><td>&nbsp;</td><td>EDIT</td><td>Drive</td><td>Drive Information</td></tr>\n"
		for i, choice in enumerate(choice_list):
			data += '<tr><td><a href="/webgli/Partitioning2?editdrive=' + choice[0] + '"><img src="/images/icon-harddisk-noia_48x48.png" border="0" alt="' + choice[0] + '"></a></td><td valign="bottom">' + choice[1] + ' (' + choice[0] + ")</td></tr>\n"
		data += '</table>'
		data += """
		<br>
		<form name="genericdisk" action="/webgli/Partitioning" method="POST">
		Add generic disk: <input type="text" name="add_device" size="14"> <input type="submit" value="Add">
		</form>"""
		return wrap_in_webgli_template(data)

	def partitioning2(self):
		if get_params['editdrive']:
			post_params['editdrive'] = get_params['editdrive']
		colors = { 'ext2': '#0af2fe', 'ext3': '#0af2fe', 'unalloc': '#a2a2a2', 'unknown': '#ed03e0', 'free': '#ffffff', 'ntfs': '#f20600', 'fat16': '#3d07f9', 'fat32': '#3d07f9', 'reiserfs': '#f0ff00', 'linux-swap': '#12ff09', 'xfs': '#006600', 'jfs': '#ffb400' }
		data = "<h4>Select a partition or unallocated space to edit</h4>\n"
		#MOVE THIS TO PART2
		#if int(new_mb) > free_mb:
		#	_d.msgbox(_(u"The size you entered (%s MB) is larger than the maximum of %s MB") % (new_mb, str(free_mb)))
		#	continue
		# now add it to the data structure
			#shared_info.devices[drive_to_partition].add_partition(part_to_edit, int(new_mb), 0, 0, type)

		if not post_params['editdrive']:
			data = "ERROR: You must select a drive to be editing!<br>\n"
			return wrap_in_webgli_template(data)
		
		drive_to_partition = post_params['editdrive']
		shared_info.drive_to_partition = drive_to_partition
		partitions = shared_info.devices[drive_to_partition].get_partitions()
		partlist = shared_info.devices[drive_to_partition].get_ordered_partition_list()
		tmpparts = shared_info.devices[drive_to_partition].get_partitions()

		data += '<form name="part2" action="/webgli/Partitioning3" method="POST" enctype="multipart/form-data">'
		data += '<input type="hidden" name="editdrive" value="'+drive_to_partition+"\">\n"
		data += '<input type="hidden" name="editpart2" value="">' + "\n"
		data += "<script>\nfunction partition_selected(minor) {\n  document.part2.editpart2.value = minor;\n  document.part2.submit();\n}\n</script>\n"

		if shared_info.error_message:
			data += '<span style="color: red;">' + shared_info.error_message + '</span><br><br>'
			shared_info.error_message = ""

		total_mb = shared_info.devices[drive_to_partition].get_total_mb()
		extended_total_mb = 0
		last_percent = 0
		last_log_percent = 0
		if len(partlist):
			data += '<table width="100%" cellspacing="0" cellpadding="0" border="1">' + "\n  <tr>\n"
		for part in partlist:
			tmppart = tmpparts[part]
			if tmppart.get_type() == "free":
				partsize = tmppart.get_mb()
				percent = (float(partsize) / float(total_mb)) * 100
				if percent < 1: percent = 1
				percent = int(percent)
				if tmppart.is_logical():
					ext_percent = (float(partsize) / float(extended_total_mb)) * 100
					if ext_percent < 1: ext_percent = 1
					ext_percent = int(ext_percent)
					data += '    <td height="40" width="' + str(ext_percent) + '%" align="center" style="background-color: ' + colors['unalloc'] + ';" onclick="partition_selected(' + str(part) + ');">' + "&nbsp;</td>\n"
					last_log_percent = last_log_percent + percent
				else:
					data += '    <td height="40" width="' + str(percent) + '%" align="center" style="background-color: ' + colors['unalloc'] + ';" onclick="partition_selected(' + str(part) + ');">' + "&nbsp;</td>\n"
					last_percent = last_percent + percent
			else:
				partsize = tmppart.get_mb()
				percent = (float(partsize) / float(total_mb)) * 100
				if percent < 1: percent = 1
				percent = int(percent)
				tmpminor = int(tmppart.get_minor())
				tmpdevice = drive_to_partition
				if tmppart.is_extended():
					data += '    <td height="40" width="' + str(percent) + '%" align="center" style="background-color: #ffffff;">' + "\n" + '      <table width="100%" cellspacing="0" cellpadding="0" border="1" style="margin: 2px;">' + "\n        <tr>\n"
					extended_total_mb = tmppart.get_mb()
					last_percent = last_percent + percent
				elif tmppart.is_logical():
					ext_percent = (float(partsize) / float(extended_total_mb)) * 100
					if ext_percent < 1: ext_percent = 1
					ext_percent = int(ext_percent)
					data += '    <td height="40" width="' + str(ext_percent) + '%" align="center" style="background-color: ' + colors[tmppart.get_type()] + ';" onclick="partition_selected(' + str(tmpminor) + ');">'
					if percent >= 15:
						data += tmpdevice + str(tmpminor)
					data += "</td>\n"
					last_log_percent = last_log_percent + percent
				else:
					if extended_total_mb:
						data += "        </tr>\n      </table>\n    </td>\n"
