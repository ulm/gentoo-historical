	def saveusers(self):
		data = ""
		users = {}
		for user in self.shared_info.install_profile.get_users():
			users[user[0]] = (user[0], user[1], user[2], user[3], user[4], user[5], user[6])
		if self.post_params['addnewuser']:
			if self.post_params['newusername'] and self.post_params['newuserpass']:
				newuser = self.post_params['newusername']
				newuserpass = self.post_params['newuserpass']
				groups = ()
				if self.post_params['newusergroupsmanual']:
					groups = string.split(self.post_params['newusergroupsmanual'], ",")
				elif self.post_params['newusergroups']:
					groups = self.post_params['newusergroups']
				if self.post_params['newusercomment']:
					newusercomment = self.post_params['newusercomment']
				else:
					newusercomment = ""
				if self.post_params['newuserid']:
					newuserid = self.post_params['newuserid']
				else:
					newuserid = ""
				if self.post_params['newuserhomedir']:
					newuserhomedir = self.post_params['newuserhomedir']
				else:
					newuserhomedir = "/home/"+newuser
				if self.post_params['newusershell']:
					newusershell = self.post_params['newusershell']
				else:
					newusershell = "/bin/bash"
				try:
					new_user = [newuser, GLIUtility.hash_password(newuserpass), groups, newusershell, newuserhomedir, newuserid, newusercomment]
					users[newuser] = new_user
					tmpusers = []
					for user in users:
						tmpusers.append(users[user])
					self.shared_info.install_profile.set_users(tmpusers)	
				except:
					data += "ERROR: could not set the users.<br>\n"				
			else:
				data += "ERROR: NO USERNAME SPECIFIED<br>\n"
		if self.post_params['rootpass1'] and self.post_params['rootpass2']:
			if self.post_params['rootpass1'] == self.post_params['rootpass2']:
				try:
					self.shared_info.install_profile.set_root_pass_hash(None, GLIUtility.hash_password(self.post_params['rootpass1']), None)
				except:
					data += "ERROR: Could not set root password!<br>\n"
			else:
				data += "ERROR: Passwords do not match!<br>\n"
		if self.post_params['setrootpass']:
			try:
				self.shared_info.install_profile.set_root_pass_hash(None, "",None)
				return self.return_redirect("/webgli/Users")
			except:
				data = "ERROR: Could not reset the root password!<br>\n"
		if self.post_params['userdelsubmit']:
			if self.post_params['edituser']:
				user_to_del = self.post_params['edituser']
				try:
					data += "Deleting user: "+user_to_del
					del users[user_to_del]
					tmpusers = []
					for user in users:
						tmpusers.append(users[user])
					self.shared_info.install_profile.set_users(tmpusers)	
				except:
					data += "ERROR: could not set the users.<br>\n"		
			
		return self.wrap_in_webgli_template(data)
	def review(self):
		settings = "<pre>Look carefully at the following settings to check for mistakes.\nThese are the installation settings you have chosen:\n\n"
		#Partitioning
		settings += "Partitioning:	\n	Key: Minor, Pri/Ext, Filesystem, MkfsOpts, Mountpoint, MountOpts, Size.\n"
		devices = self.shared_info.install_profile.get_partition_tables()
		drives = devices.keys()
		drives.sort()
		for drive in drives:
			settings += "  Drive: " + drive + devices[drive].get_model() + "\n"
			partlist = devices[drive].get_ordered_partition_list()
			tmpparts = devices[drive].get_partitions()
			for part in partlist:
				tmppart = tmpparts[part]
				entry = "		 "
				if tmppart.get_type() == "free":
					#partschoice = "New"
					entry += _(u" - Unallocated space (")
					if tmppart.is_logical():
						entry += _(u"logical, ")
					entry += str(tmppart.get_mb()) + "MB)"
				elif tmppart.get_type() == "extended":
					entry += str(int(tmppart.get_minor()))
					entry += _(u" - Extended Partition (") + str(tmppart.get_mb()) + "MB)"
				else:
					entry += str(int(tmppart.get_minor())) + " - "
					if tmppart.is_logical():
						entry += _(u"Logical (")
					else:
						entry += _(u"Primary (")
					entry += tmppart.get_type() + ", "
					entry += (tmppart.get_mkfsopts() or "none") + ", "
					entry += (tmppart.get_mountpoint() or "none") + ", "
					entry += (tmppart.get_mountopts() or "none") + ", "
					entry += str(tmppart.get_mb()) + "MB)"
				settings += entry + "\n"
			
		#Network Mounts:
		network_mounts = copy.deepcopy(self.shared_info.install_profile.get_network_mounts())
		settings += "\nNetwork Mounts: \n"
		for mount in network_mounts:
			settings += "  "+mount['host']+":"+mount['export']+"\n"
			
		#Install Stage:
		settings += "\nInstall Stage: " + str(self.shared_info.install_profile.get_install_stage()) + "\n"
		if self.shared_info.install_profile.get_dynamic_stage3():
			settings += "  Tarball will be generated on the fly from the CD.\n"
		else:
			settings += "  Tarball URI: " + self.shared_info.install_profile.get_stage_tarball_uri() + "\n"
			
		#Portage Tree Sync Type:
		settings += "\nPortage Tree Sync Type: " + self.shared_info.install_profile.get_portage_tree_sync_type() + "\n"
		if self.shared_info.install_profile.get_portage_tree_sync_type() == "snapshot":
			settings += "  Portage snapshot URI: " + self.shared_info.install_profile.get_portage_tree_snapshot_uri() + "\n"
			
		#Kernel Settings:
		settings += "\nKernel Settings:\n"
		settings += "  Kernel Sources: " + self.shared_info.install_profile.get_kernel_source_pkg() + "\n"
		if self.shared_info.install_profile.get_kernel_source_pkg() != "livecd-kernel":
			settings += "  Kernel Build Method: " + self.shared_info.install_profile.get_kernel_build_method() + "\n"
			if self.shared_info.install_profile.get_kernel_build_method() == "genkernel":
				settings += "  Kernel Bootsplash Option: " + str(self.shared_info.install_profile.get_kernel_bootsplash()) + "\n"
		if self.shared_info.install_profile.get_kernel_config_uri():
			settings += "  Kernel Configuration URI: " + self.shared_info.install_profile.get_kernel_config_uri() + "\n"
				
		#Bootloader Settings:
		settings += "\nBootloader Settings:\n"
		settings += "  Bootloader package: " + self.shared_info.install_profile.get_boot_loader_pkg() + "\n"
		if self.shared_info.install_profile.get_boot_loader_pkg() != "none":
			settings += "  Install bootloader to MBR: " + str(self.shared_info.install_profile.get_boot_loader_mbr()) + "\n"
			settings += "  Bootloader kernel arguments: " +self.shared_info.install_profile.get_bootloader_kernel_args() + "\n"
			
		#Timezone:
		settings += "\nTimezone: " + self.shared_info.install_profile.get_time_zone() + "\n"
		
		#Networking Settings:
		settings += "\nNetworking Settings: \n"
		interfaces = self.shared_info.install_profile.get_network_interfaces()
		for iface in interfaces:
			if interfaces[iface][0] == 'dhcp':
				settings += "  " + iface + _(u":	Settings: DHCP. Options: ") + interfaces[iface][1] + "\n"
			else:
				settings += "  " + iface + _(u"IP: ") + interfaces[iface][0] + _(u" Broadcast: ") + interfaces[iface][1] + _(u" Netmask: ") + interfaces[iface][2] + "\n"
