	def savereview(self):
		data = ""
		return self.wrap_in_webgli_template(data)

	def uribrowser(self):
		formfields = {	'portage': "opener.document.portage.snapshoturi", 
						'stage': "opener.document.stage.tarballuri",
						'kernel': "opener.document.kernel.configuri" }
		try:
			formfield = formfields[self.get_params['screen']]
		except:
			return "Parameter 'screen' was not passed"
		if self.get_params['uritype']:
			if self.get_params['mirror']:
				uri = self.get_params['mirror']
				if not uri.endswith('/'):
					uri += "/"
			else:
				if self.get_params['uritype'] == "file":
					uri = "file://"
				else:
					uri = self.get_params['uritype'] + "://"
					if self.get_params['username']:
						uri += self.get_params['username']
						if self.get_params['password']:
							uri += ":" + self.get_params['password']
						uri += "@"
					uri += self.get_params['host']
					if self.get_params['port']:
						uri += ":" + self.get_params['port']
				uri += (self.get_params['path'] or "/")
		else:
			uri = self.get_params['baseuri']
		if not uri:
			uri = "file:///"
		if not uri.endswith('/'):
			uri = uri[:uri.rfind('/')+1]
		uriparts = list(GLIUtility.parse_uri(uri))
		for i in range(len(uriparts)):
			if not uriparts[i]:
				uriparts[i] = ""
		uritypes = { 'file': "", 'http': "", 'ftp': "", 'scp': "" }
		uritypes[uriparts[0]] = " selected"
		if uriparts[0] == "http":
			mirrors = GLIUtility.list_mirrors(http=True, ftp=False, rsync=False)
		elif uriparts[0] == "ftp":
			mirrors = GLIUtility.list_mirrors(http=False, ftp=True, rsync=False)
		else:
			mirrors = []
		mirrorlist = ""
		for mirror in mirrors:
			mirrorlist += '<option value="%s">%s</option>' % (mirror[0], mirror[1])
		content = """
		<script>
		function select_uri(uri) {
			%s.value = document.uri.baseuri.value + uri;
			window.close();
		}

		function browse_uri(uri) {
			location.replace('/webgli/URIBrowser?screen=%s&baseuri=' + uri);
		}

		function refresh_uri() {
			//location.replace('/webgli/URIBrowser?screen=%s&uritype=' + document.uri.uritype.value + '&host=' + document.uri.host.value + '&username=' + document.uri.username.value + '&password=' + document.uri.password.value + '&port=' + document.uri.port.value + '&path=' + document.uri.path.value + '&mirror=' + document.uri.mirror.value);
			document.uri.submit();
		}

		function change_uritype() {
			location.replace('/webgli/URIBrowser?screen=%s&uritype=' + document.uri.uritype.value);
		}
		</script>
		<h3>URI Browser</h3>
		<form name="uri" action="/webgli/URIBrowser" method="GET">
		<input type="hidden" name="baseuri" value="%s">
		<input type="hidden" name="screen" value="%s">
		<table>
			<tr>
				<td width="90">URI type:</td>
				<td><select name="uritype" onchange="change_uritype()"><option%s>file</option><option%s>http</option><option%s>ftp</option><option%s>scp</option></select></td>
			</tr>
			<tr>
				<td valign="top">Host:</td>
				<td><input type="text" name="host" size="30" value="%s"><br>or choose a mirror:<br><select name="mirror" onchange="document.uri.submit()"><option value=""> - </option>%s</select></td>
			</tr>
			<tr>
				<td>Username:</td>
				<td><input type="text" name="username" size="15" value="%s"></td>
			</tr>
			<tr>
				<td>Password:</td>
				<td><input type="text" name="password" size="15" value="%s"></td>
			</tr>
			<tr>
				<td>Port:</td>
				<td><input type="text" name="port" size="5" value="%s"></td>
			</tr>
			<tr>
				<td>Path:</td>
				<td><input type="text" name="path" size="30" value="%s"></td>
			</tr>
			<tr>
				<td>&nbsp;</td>
				<td>&nbsp;</td>
			</tr>
			<tr>
				<td colspan="2"><input type="button" value="Cancel" onclick="window.close();"> &nbsp; <input type="button" value="Refresh" onclick="refresh_uri()"></td>
			</tr>
			<tr>
				<td>&nbsp;</td>
				<td>&nbsp;</td>
			</tr>
		</table>
		<table>""" % (formfield, self.get_params['screen'], self.get_params['screen'], self.get_params['screen'], uri, self.get_params['screen'], uritypes['file'], uritypes['http'], uritypes['ftp'], uritypes['scp'], uriparts[3], mirrorlist, uriparts[1], uriparts[2], uriparts[4], uriparts[5])
		if not uri.endswith("/"):
			uri = uri[:uri.rfind("/")+1]
		try:
			filelist = GLIUtility.get_directory_listing_from_uri(uri)
		except:
			filelist = ["There was an error loading the directory list"]
		for listing in filelist:
			content += "	<tr>\n		<td>"
			if listing.endswith('/'):
				content += '<img src="../folder.gif">'
			else:
				content += '&nbsp;'
			content += '</td>\n		 <td><a href="#" onclick="'
			if listing.endswith('/'):
				listing = listing[:-1]
				if listing == "..":
					tmpuri = uri[:uri[:-1].rfind("/")+1]
				else:
					tmpuri = uri + listing + "/"
				content += "browse_uri('%s')" % tmpuri
			else:
				content += "select_uri('%s')" % listing
			content += "; return false\">%s</a></td>\n	</tr>\n" % listing

		return content
	
	def handle(self, path):
		if not self.shared_info.install_profile:
			self.shared_info.install_profile = GLIInstallProfile.InstallProfile()
		if not self.shared_info.client_profile:
			self.shared_info.client_profile = GLIClientConfiguration.ClientConfiguration()
		paths = { '/webgli': self.showwelcome,
					'/webgli/': self.showwelcome,
					'/webgli/ClientConfig': self.clientconfig,
					'/webgli/saveclientconfig': self.saveclientconfig,
					'/webgli/NetworkMounts': self.networkmounts,
					'/webgli/savenetmounts': self.savenetmounts,
