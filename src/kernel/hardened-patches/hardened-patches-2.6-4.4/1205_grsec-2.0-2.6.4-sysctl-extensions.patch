diff -ruN linux-2.6.4-base/arch/i386/kernel/ioport.c linux-2.6.4/arch/i386/kernel/ioport.c
--- linux-2.6.4-base/arch/i386/kernel/ioport.c	2004-03-24 11:31:46.858541312 -0500
+++ linux-2.6.4/arch/i386/kernel/ioport.c	2004-03-24 11:34:01.457883766 -0500
@@ -63,16 +63,15 @@
 
 	if ((from + num <= from) || (from + num > IO_BITMAP_BITS))
 		return -EINVAL;
-#ifdef CONFIG_GRKERNSEC_IO
+	if (grsec_enable_secure_io) {
 	if (turn_on) {
 		gr_handle_ioperm();
-#else
+		return -EPERM;
+	} else
 	if (turn_on && !capable(CAP_SYS_RAWIO))
-#endif
 		return -EPERM;
-#ifdef CONFIG_GRKERNSEC_IO
 	}
-#endif
+
 	/*
 	 * If it's the first ioperm() call in this thread's lifetime, set the
 	 * IO bitmap up. ioperm() is much less timing critical than clone(),
@@ -123,13 +122,12 @@
 		return -EINVAL;
 	/* Trying to gain more privileges? */
 	if (level > old) {
-#ifdef CONFIG_GRKERNSEC_IO
+	    if (grsec_enable_secure_io) {
 		gr_handle_iopl();
 		return -EPERM;
-#else
+	    } else
 		if (!capable(CAP_SYS_RAWIO))
 			return -EPERM;
-#endif
 	}
 	regs->eflags = (regs->eflags &~ 0x3000UL) | (level << 12);
 	/* Make sure we return the long way (not sysenter) */
diff -ruN linux-2.6.4-base/drivers/char/mem.c linux-2.6.4/drivers/char/mem.c
--- linux-2.6.4-base/drivers/char/mem.c	2004-03-24 11:31:47.148473121 -0500
+++ linux-2.6.4/drivers/char/mem.c	2004-03-24 11:34:06.999580368 -0500
@@ -177,10 +177,10 @@
 	if (!valid_phys_addr_range(p, &count))
 		return -EFAULT;
 
-#ifdef CONFIG_GRKERNSEC_KMEM
+	if (grsec_enable_secure_kmem) {
 	gr_handle_mem_write();
 	return -EPERM;
-#endif
+	}
 
 	return do_write_mem(file, __va(p), p, buf, count, ppos);
 }
@@ -196,10 +196,10 @@
 		vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
 #endif
 
-#ifdef CONFIG_GRKERNSEC_KMEM
+	if (grsec_enable_secure_kmem) {
 	if (gr_handle_mem_mmap(offset, vma))
 		return -EPERM;
-#endif
+	}
 
 	/* Don't try to swap out physical pages.. */
 	vma->vm_flags |= VM_RESERVED;
@@ -293,10 +293,10 @@
 	ssize_t virtr = 0;
 	char * kbuf; /* k-addr because vwrite() takes vmlist_lock rwlock */
 
-#ifdef CONFIG_GRKERNSEC_KMEM
+	if (grsec_enable_secure_kmem) {
 	gr_handle_kmem_write();
 	return -EPERM;
-#endif
+	}
 
 	if (p < (unsigned long) high_memory) {
 		wrote = count;
@@ -580,10 +580,10 @@
 
 static int open_port(struct inode * inode, struct file * filp)
 {
-#ifdef CONFIG_GRKERNSEC_KMEM
+	if (grsec_enable_secure_kmem) {
 	gr_handle_open_port();
 	return -EPERM;
-#endif
+	}
 
 	return capable(CAP_SYS_RAWIO) ? 0 : -EPERM;
 }
diff -ruN linux-2.6.4-base/fs/proc/array.c linux-2.6.4/fs/proc/array.c
--- linux-2.6.4-base/fs/proc/array.c	2004-03-24 11:31:47.332429854 -0500
+++ linux-2.6.4/fs/proc/array.c	2004-03-24 11:32:47.759217572 -0500
@@ -168,6 +168,17 @@
 		p->pid && p->ptrace ? p->parent->pid : 0,
 		p->uid, p->euid, p->suid, p->fsuid,
 		p->gid, p->egid, p->sgid, p->fsgid);
+#ifdef CONFIG_GRKERNSEC
+	buffer += sprintf(buffer,
+		"PaX:\t%c%c%c%c%c%c\n",
+		p->flags & PF_PAX_PAGEEXEC ? 'P' : 'p',
+		p->flags & PF_PAX_EMUTRAMP ? 'E' : 'e',
+		p->flags & PF_PAX_MPROTECT ? 'M' : 'm',
+		p->flags & PF_PAX_RANDMMAP ? 'R' : 'r',
+		p->flags & PF_PAX_RANDEXEC ? 'X' : 'x',
+		p->flags & PF_PAX_SEGMEXEC ? 'S' : 's'
+	);
+#endif
 	read_unlock(&tasklist_lock);	
 	task_lock(p);
 	buffer += sprintf(buffer,
diff -ruN linux-2.6.4-base/grsecurity/Kconfig linux-2.6.4/grsecurity/Kconfig
--- linux-2.6.4-base/grsecurity/Kconfig	2004-03-24 11:31:47.345426797 -0500
+++ linux-2.6.4/grsecurity/Kconfig	2004-03-24 11:32:34.156416929 -0500
@@ -602,7 +602,14 @@
 	  to a local attack.  The entry is readable by only the owner of the
 	  process (and root if he has CAP_DAC_OVERRIDE, which can be removed via
 	  the RBAC system), and thus does not create privacy concerns.
-
+config GRKERNSEC_AUDIT_TEXTREL
+	bool "ELF text relocation logging"
+	help
+	  If you say Y here, a new entry will be added to enable the auditing
+	  of ELF text relocations. This is only mainly useful while your in the
+	  the transision process of getting your system to become PIC/ET_DYN 
+	  aware. A sysctl entry kernel.grsecurity.audit_textrel is created 
+	  when enabled.
 endmenu
 
 menu "Executable Protections"
diff -ruN linux-2.6.4-base/grsecurity/Makefile linux-2.6.4/grsecurity/Makefile
--- linux-2.6.4-base/grsecurity/Makefile	2004-03-24 11:31:47.345426797 -0500
+++ linux-2.6.4/grsecurity/Makefile	2004-03-24 11:32:34.157416694 -0500
@@ -19,3 +19,4 @@
 obj-y += grsec_disabled.o
 endif
 
+obj-y += grsec_textrel.o
diff -ruN linux-2.6.4-base/grsecurity/grsec_init.c linux-2.6.4/grsecurity/grsec_init.c
--- linux-2.6.4-base/grsecurity/grsec_init.c	2004-03-24 11:31:47.356424211 -0500
+++ linux-2.6.4/grsecurity/grsec_init.c	2004-03-24 11:34:07.000580133 -0500
@@ -7,6 +7,7 @@
 #include <linux/vmalloc.h>
 #include <linux/percpu.h>
 
+int grsec_enable_audit_textrel;
 int grsec_enable_link;
 int grsec_enable_dmesg;
 int grsec_enable_fifo;
@@ -48,6 +49,8 @@
 int grsec_socket_client_gid;
 int grsec_enable_socket_server;
 int grsec_socket_server_gid;
+int grsec_enable_secure_io;
+int grsec_enable_secure_kmem;
 int grsec_lock;
 
 spinlock_t grsec_alert_lock = SPIN_LOCK_UNLOCKED;
@@ -108,6 +111,9 @@
 	grsec_enable_group = 1;
 	grsec_audit_gid = CONFIG_GRKERNSEC_AUDIT_GID;
 #endif
+#ifdef	CONFIG_GRKERNSEC_AUDIT_TEXTREL
+	grsec_enable_audit_textrel = 1;
+#endif
 #ifdef CONFIG_GRKERNSEC_AUDIT_CHDIR
 	grsec_enable_chdir = 1;
 #endif
@@ -217,6 +223,12 @@
 	grsec_enable_socket_server = 1;
 	grsec_socket_server_gid = CONFIG_GRKERNSEC_SOCKET_SERVER_GID;
 #endif
+#ifdef CONFIG_GRKERNSEC_IO
+	grsec_enable_secure_io = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_KMEM
+	grsec_enable_secure_kmem = 1;
+#endif
 #endif
 
 	return;
diff -ruN linux-2.6.4-base/grsecurity/grsec_sysctl.c linux-2.6.4/grsecurity/grsec_sysctl.c
--- linux-2.6.4-base/grsecurity/grsec_sysctl.c	2004-03-24 11:31:47.359423505 -0500
+++ linux-2.6.4/grsecurity/grsec_sysctl.c	2004-03-24 11:34:51.994997519 -0500
@@ -26,7 +26,7 @@
 GS_SOCKET_ALL, GS_SOCKET_ALL_GID, GS_SOCKET_CLIENT,
 GS_SOCKET_CLIENT_GID, GS_SOCKET_SERVER, GS_SOCKET_SERVER_GID, GS_TTY, GS_TTYS,
 GS_PTY, GS_GROUP, GS_GID, GS_ACHDIR, GS_AMOUNT, GS_AIPC, GS_DMSG, GS_RANDRPC,
-GS_FINDTASK, GS_LOCK};
+GS_FINDTASK, GS_LOCK, GS_TEXTREL, GS_IO, GS_KMEM};
 
 
 ctl_table grsecurity_table[] = {
@@ -430,6 +430,36 @@
 		.proc_handler	= &proc_dointvec,
 	},
 #endif
+#ifdef CONFIG_GRKERNSEC_AUDIT_TEXTREL
+	{
+		.ctl_name	= GS_TEXTREL,
+		.procname	= "audit_textrel",
+		.data		= &grsec_enable_audit_textrel,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_IO
+	{
+		.ctl_name	= GS_IO,
+		.procname	= "secure_io",
+		.data		= &grsec_enable_secure_io,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_KMEM
+	{
+		.ctl_name	= GS_KMEM,
+		.procname	= "secure_kmem",
+		.data		= &grsec_enable_secure_kmem,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec,
+	},
+#endif
 	{
 		.ctl_name	= GS_LOCK,
 		.procname	= "grsec_lock",
diff -ruN linux-2.6.4-base/grsecurity/grsec_textrel.c linux-2.6.4/grsecurity/grsec_textrel.c
--- linux-2.6.4-base/grsecurity/grsec_textrel.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.6.4/grsecurity/grsec_textrel.c	2004-03-24 11:32:34.158416458 -0500
@@ -0,0 +1,17 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/mm.h>
+#include <linux/grinternal.h>
+#include <linux/grsecurity.h>
+
+void
+gr_log_textrel(struct vm_area_struct * vma)
+{
+#ifdef CONFIG_GRKERNSEC_AUDIT_TEXTREL
+	if (grsec_enable_audit_textrel)
+		security_audit(GR_TEXTREL_AUDIT_MSG, 
+		vma->vm_start, vma->vm_pgoff, 
+		DEFAULTSECARGS);
+#endif
+	return;
+}
diff -ruN linux-2.6.4-base/include/linux/grmsg.h linux-2.6.4/include/linux/grmsg.h
--- linux-2.6.4-base/include/linux/grmsg.h	2004-03-24 11:31:47.629360017 -0500
+++ linux-2.6.4/include/linux/grmsg.h	2004-03-24 11:32:34.158416458 -0500
@@ -12,6 +12,7 @@
 #define GR_MEM_MMAP_MSG "attempted mmap write of /dev/[k]mem by " DEFAULTSECMSG
 #define GR_SYMLINK_MSG "not following symlink %.950s owned by %d.%d by " DEFAULTSECMSG
 #define GR_LEARN_AUDIT_MSG "%s\t%u\t%u\t%u\t%.4095s\t%.4095s\t%lu\t%lu\t%.4095s\t%lu\t%u.%u.%u.%u"
+#define GR_TEXTREL_AUDIT_MSG "textrel VMA:0x%08lx 0x%08lx in " DEFAULTSECMSG
 #define GR_HIDDEN_ACL_MSG "%s access to hidden file %.950s by " DEFAULTSECMSG
 #define GR_OPEN_ACL_MSG "%s open of %.950s for%s%s by " DEFAULTSECMSG
 #define GR_CREATE_ACL_MSG "%s create of %.950s for%s%s by " DEFAULTSECMSG
diff -ruN linux-2.6.4-base/include/linux/grsecurity.h linux-2.6.4/include/linux/grsecurity.h
--- linux-2.6.4-base/include/linux/grsecurity.h	2004-03-24 11:31:47.629360017 -0500
+++ linux-2.6.4/include/linux/grsecurity.h	2004-03-24 11:34:06.999580368 -0500
@@ -176,11 +176,14 @@
 extern __u32 ip_randomisn(void);
 extern unsigned long get_random_long(void);
 
+extern int grsec_enable_secure_io;
+extern int grsec_enable_secure_kmem;
 extern int grsec_enable_dmesg;
 extern int grsec_enable_randid;
 extern int grsec_enable_randisn;
 extern int grsec_enable_randsrc;
 extern int grsec_enable_randrpc;
+extern int grsec_enable_audit_textrel;
 #endif
 
 #endif
diff -ruN linux-2.6.4-base/mm/mprotect.c linux-2.6.4/mm/mprotect.c
--- linux-2.6.4-base/mm/mprotect.c	2004-03-24 11:31:47.000000000 -0500
+++ linux-2.6.4/mm/mprotect.c	2004-03-24 11:32:34.159416223 -0500
@@ -328,6 +328,9 @@
 			return;
 		if (dyn.d_tag == DT_TEXTREL || (dyn.d_tag == DT_FLAGS && (dyn.d_un.d_val & DF_TEXTREL))) {
 			vma->vm_flags |= VM_MAYWRITE | VM_MAYNOTWRITE;
+#ifdef CONFIG_GRKERNSEC_AUDIT_TEXTREL
+			gr_log_textrel(vma);
+#endif
 			return;
 		}
 		i++;
