# 2.6.3-WOLK1.1

diff -Naurp linux-2.6.3-wolk1.0-fullkernel/include/linux/sysctl.h linux-2.6.3-wolk1.0-work/include/linux/sysctl.h
--- linux-2.6.3-wolk1.0-fullkernel/include/linux/sysctl.h	2004-02-27 15:24:55.000000000 +0100
+++ linux-2.6.3-wolk1.0-work/include/linux/sysctl.h	2004-02-27 15:35:10.000000000 +0100
@@ -337,7 +337,9 @@ enum
 	NET_IPV4_IP_MASQ_UDP_DLOOSE=102,
 	NET_TCP_STACK_SYNFIN=103,
 	NET_TCP_STACK_BOGUS=104,
 	NET_TCP_STACK_ACK=105,
+	NET_IPV4_ICMP_RESTRICT=106,
+	NET_IPV4_TCP_RESTRICT=107,
 };
 
 enum {
diff -Naurp linux-2.6.3-wolk1.0-fullkernel/net/ipv4/Kconfig linux-2.6.3-wolk1.0-work/net/ipv4/Kconfig
--- linux-2.6.3-wolk1.0-fullkernel/net/ipv4/Kconfig	2004-02-27 14:59:48.000000000 +0100
+++ linux-2.6.3-wolk1.0-work/net/ipv4/Kconfig	2004-02-27 15:34:31.000000000 +0100
@@ -365,6 +365,21 @@ config NET_STEALTH_LOG
 	  This turns on a logging facility that logs all tcp packets with
 	  bad flags.  If you said Y to "TCP stealth options", say Y too.
 
+config IP_NMAP_FREAK
+	bool "IP: NMAP freak (disabled per default)"
+	depends on INET
+	default n
+	---help---
+	  This is a feature to prevent stealth,fin,rst scans and slows down
+	  the tcp connect scan, it also does not show the Operating System.
+
+	  You can turn this on(1) and off(0) using /proc
+
+	   echo 1 > /proc/sys/net/ipv4/tcp_restrict
+	   echo 1 > /proc/sys/net/ipv4/icmp_restrict
+
+	  If unsure, say N.
+
 config INET_AH
 	tristate "IP: AH transformation"
 	select XFRM
diff -Naurp linux-2.6.3-wolk1.0-fullkernel/net/ipv4/icmp.c linux-2.6.3-wolk1.0-work/net/ipv4/icmp.c
--- linux-2.6.3-wolk1.0-fullkernel/net/ipv4/icmp.c	2004-02-26 05:12:22.000000000 +0100
+++ linux-2.6.3-wolk1.0-work/net/ipv4/icmp.c	2004-02-27 15:34:24.000000000 +0100
@@ -190,6 +190,10 @@ struct icmp_err icmp_err_convert[] = {
 int sysctl_icmp_echo_ignore_all;
 int sysctl_icmp_echo_ignore_broadcasts;
 
+#ifdef CONFIG_IP_NMAP_FREAK
+int sysctl_icmp_restrict = 0;
+#endif
+
 /* Control parameter - ignore bogus broadcast responses? */
 int sysctl_icmp_ignore_bogus_error_responses;
 
@@ -782,7 +786,10 @@ static void icmp_echo(struct sk_buff *sk
 		icmp_param.offset	   = 0;
 		icmp_param.data_len	   = skb->len;
 		icmp_param.head_len	   = sizeof(struct icmphdr);
-		icmp_reply(&icmp_param, skb);
+#ifdef CONFIG_IP_NMAP_FREAK
+		if (!sysctl_icmp_restrict)
+			icmp_reply (&icmp_param, skb);
+#endif
 	}
 }
 
diff -Naurp linux-2.6.3-wolk1.0-fullkernel/net/ipv4/sysctl_net_ipv4.c linux-2.6.3-wolk1.0-work/net/ipv4/sysctl_net_ipv4.c
--- linux-2.6.3-wolk1.0-fullkernel/net/ipv4/sysctl_net_ipv4.c	2004-02-27 15:33:07.000000000 +0100
+++ linux-2.6.3-wolk1.0-work/net/ipv4/sysctl_net_ipv4.c	2004-02-27 15:34:13.000000000 +0100
@@ -37,6 +37,11 @@ extern int sysctl_ip_dynaddr;
 extern int sysctl_icmp_ratelimit;
 extern int sysctl_icmp_ratemask;
 
+#ifdef CONFIG_IP_NMAP_FREAK
+extern int sysctl_icmp_restrict;
+extern int sysctl_tcp_restrict;
+#endif
+
 /* From igmp.c */
 extern int sysctl_igmp_max_memberships;
 
@@ -349,6 +354,24 @@ ctl_table ipv4_table[] = {
 		.proc_handler	= &proc_dointvec
 	},
 #endif
+#ifdef CONFIG_IP_NMAP_FREAK
+	{
+		.ctl_name	= NET_IPV4_ICMP_RESTRICT,
+		.procname	= "icmp_restrict",
+		.data		= &sysctl_icmp_restrict,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec
+	},
+	{
+		.ctl_name	= NET_IPV4_TCP_RESTRICT,
+		.procname	= "tcp_restrict",
+		.data		= &sysctl_tcp_restrict,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec
+	},
+#endif
 	{
 		.ctl_name	= NET_TCP_TW_RECYCLE,
 		.procname	= "tcp_tw_recycle",
diff -Naurp linux-2.6.3-wolk1.0-fullkernel/net/ipv4/tcp_ipv4.c linux-2.6.3-wolk1.0-work/net/ipv4/tcp_ipv4.c
--- linux-2.6.3-wolk1.0-fullkernel/net/ipv4/tcp_ipv4.c	2004-02-27 14:59:48.000000000 +0100
+++ linux-2.6.3-wolk1.0-work/net/ipv4/tcp_ipv4.c	2004-02-27 15:34:06.000000000 +0100
@@ -85,6 +85,10 @@ extern int sysctl_tcp_ignore_bogus;
 extern int sysctl_tcp_ignore_ack;
 #endif
 
+#ifdef CONFIG_IP_NMAP_FREAK
+int sysctl_tcp_restrict = 0;
+#endif
+
 /* Check TCP sequence numbers in ICMP packets. */
 #define ICMP_MIN_LENGTH 8
 
@@ -1179,6 +1183,11 @@ static void tcp_v4_send_reset(struct sk_
 	struct tcphdr rth;
 	struct ip_reply_arg arg;
 
+#ifdef CONFIG_IP_NMAP_FREAK
+	if (sysctl_tcp_restrict)
+		return;
+#endif
+
 	/* Never send a reset in response to a reset. */
 	if (th->rst)
 		return;
