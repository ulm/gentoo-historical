diff -urN linux-2.4.27-hardened-0/Documentation/Configure.help linux-2.4.27-hardened-1/Documentation/Configure.help
--- linux-2.4.27-hardened-0/Documentation/Configure.help	2004-08-08 15:19:52.000000000 -0500
+++ linux-2.4.27-hardened-1/Documentation/Configure.help	2004-08-08 15:20:29.000000000 -0500
@@ -29637,6 +29637,15 @@
   NOTE: you can use the 'chpax' or 'paxctl' utilities to control this
   feature on a per file basis.
 
+Prevent basic info leaking through procfs and others
+CONFIG_PAX_OBSCURE
+  By saying Y here /proc/#/maps and /proc/#/stat won't give out
+  information the ASLR system is trying to hide. Additionaly it
+  will prevent such information leaking for users with console access
+  through keyboard's magic hotkeys.
+  If you use ASLR, you definitely should say Y here unless you already
+  prevent such access with a ACL system.
+
 Randomize ET_EXEC base
 CONFIG_PAX_RANDEXEC
   By saying Y here the kernel will randomize the base address of normal
diff -urN linux-2.4.27-hardened-0/arch/alpha/config.in linux-2.4.27-hardened-1/arch/alpha/config.in
--- linux-2.4.27-hardened-0/arch/alpha/config.in	2004-08-08 15:19:52.000000000 -0500
+++ linux-2.4.27-hardened-1/arch/alpha/config.in	2004-08-08 15:20:29.000000000 -0500
@@ -515,6 +515,7 @@
    if [ "$CONFIG_PAX_ASLR" = "y" ]; then
       bool '  Randomize user stack base' CONFIG_PAX_RANDUSTACK
       bool '  Randomize mmap() base' CONFIG_PAX_RANDMMAP
+      bool '  Prevent basic info leaking through procfs and others' CONFIG_PAX_OBSCURE
       if [ "$CONFIG_PAX_RANDMMAP" = "y" -a "$CONFIG_PAX_MPROTECT" = "y" ]; then
          bool '  Randomize ET_EXEC base' CONFIG_PAX_RANDEXEC
       fi
diff -urN linux-2.4.27-hardened-0/arch/i386/config.in linux-2.4.27-hardened-1/arch/i386/config.in
--- linux-2.4.27-hardened-0/arch/i386/config.in	2004-08-08 15:19:52.000000000 -0500
+++ linux-2.4.27-hardened-1/arch/i386/config.in	2004-08-08 15:20:29.000000000 -0500
@@ -551,6 +551,7 @@
       fi
       bool '  Randomize user stack base' CONFIG_PAX_RANDUSTACK
       bool '  Randomize mmap() base' CONFIG_PAX_RANDMMAP
+      bool '  Prevent basic info leaking through procfs and others' CONFIG_PAX_OBSCURE
       if [ "$CONFIG_PAX_RANDMMAP" = "y" -a "$CONFIG_PAX_MPROTECT" = "y" ]; then
          bool '  Randomize ET_EXEC base' CONFIG_PAX_RANDEXEC
       fi
diff -urN linux-2.4.27-hardened-0/arch/parisc/config.in linux-2.4.27-hardened-1/arch/parisc/config.in
--- linux-2.4.27-hardened-0/arch/parisc/config.in	2004-08-08 15:19:53.000000000 -0500
+++ linux-2.4.27-hardened-1/arch/parisc/config.in	2004-08-08 15:20:29.000000000 -0500
@@ -255,6 +255,7 @@
    if [ "$CONFIG_PAX_ASLR" = "y" ]; then
       bool '  Randomize user stack base' CONFIG_PAX_RANDUSTACK
       bool '  Randomize mmap() base' CONFIG_PAX_RANDMMAP
+      bool '  Prevent basic info leaking through procfs and others' CONFIG_PAX_OBSCURE
       if [ "$CONFIG_PAX_RANDMMAP" = "y" -a "$CONFIG_PAX_MPROTECT" = "y" ]; then
          bool '  Randomize ET_EXEC base' CONFIG_PAX_RANDEXEC
       fi
diff -urN linux-2.4.27-hardened-0/arch/ppc/config.in linux-2.4.27-hardened-1/arch/ppc/config.in
--- linux-2.4.27-hardened-0/arch/ppc/config.in	2004-08-08 15:19:53.000000000 -0500
+++ linux-2.4.27-hardened-1/arch/ppc/config.in	2004-08-08 15:20:29.000000000 -0500
@@ -716,6 +716,7 @@
    if [ "$CONFIG_PAX_ASLR" = "y" ]; then
       bool '  Randomize user stack base' CONFIG_PAX_RANDUSTACK
       bool '  Randomize mmap() base' CONFIG_PAX_RANDMMAP
+      bool '  Prevent basic info leaking through procfs and others' CONFIG_PAX_OBSCURE
       if [ "$CONFIG_PAX_RANDMMAP" = "y" -a "$CONFIG_PAX_MPROTECT" = "y" ]; then
          bool '  Randomize ET_EXEC base' CONFIG_PAX_RANDEXEC
       fi
diff -urN linux-2.4.27-hardened-0/arch/sparc/config.in linux-2.4.27-hardened-1/arch/sparc/config.in
--- linux-2.4.27-hardened-0/arch/sparc/config.in	2004-08-08 15:19:53.000000000 -0500
+++ linux-2.4.27-hardened-1/arch/sparc/config.in	2004-08-08 15:20:29.000000000 -0500
@@ -331,6 +331,7 @@
    if [ "$CONFIG_PAX_ASLR" = "y" ]; then
       bool '  Randomize user stack base' CONFIG_PAX_RANDUSTACK
       bool '  Randomize mmap() base' CONFIG_PAX_RANDMMAP
+      bool '  Prevent basic info leaking through procfs and others' CONFIG_PAX_OBSCURE
       if [ "$CONFIG_PAX_RANDMMAP" = "y" -a "$CONFIG_PAX_MPROTECT" = "y" ]; then
          bool '  Randomize ET_EXEC base' CONFIG_PAX_RANDEXEC
       fi
diff -urN linux-2.4.27-hardened-0/arch/sparc64/config.in linux-2.4.27-hardened-1/arch/sparc64/config.in
--- linux-2.4.27-hardened-0/arch/sparc64/config.in	2004-08-08 15:19:53.000000000 -0500
+++ linux-2.4.27-hardened-1/arch/sparc64/config.in	2004-08-08 15:20:29.000000000 -0500
@@ -369,6 +369,7 @@
    if [ "$CONFIG_PAX_ASLR" = "y" ]; then
       bool '  Randomize user stack base' CONFIG_PAX_RANDUSTACK
       bool '  Randomize mmap() base' CONFIG_PAX_RANDMMAP
+      bool '  Prevent basic info leaking through procfs and others' CONFIG_PAX_OBSCURE
       if [ "$CONFIG_PAX_RANDMMAP" = "y" -a "$CONFIG_PAX_MPROTECT" = "y" ]; then
          bool '  Randomize ET_EXEC base' CONFIG_PAX_RANDEXEC
       fi
diff -urN linux-2.4.27-hardened-0/drivers/char/keyboard.c linux-2.4.27-hardened-1/drivers/char/keyboard.c
--- linux-2.4.27-hardened-0/drivers/char/keyboard.c	2003-11-28 12:26:20.000000000 -0600
+++ linux-2.4.27-hardened-1/drivers/char/keyboard.c	2004-08-08 15:20:29.000000000 -0500
@@ -404,8 +404,11 @@
 
 static void show_ptregs(void)
 {
+#ifdef CONFIG_PAX_OBSCURE
+#else
 	if (kbd_pt_regs)
 		show_regs(kbd_pt_regs);
+#endif
 }
 
 static void hold(void)
diff -urN linux-2.4.27-hardened-0/fs/proc/array.c linux-2.4.27-hardened-1/fs/proc/array.c
--- linux-2.4.27-hardened-0/fs/proc/array.c	2004-08-08 15:19:53.000000000 -0500
+++ linux-2.4.27-hardened-1/fs/proc/array.c	2004-08-08 15:20:29.000000000 -0500
@@ -391,11 +391,19 @@
 		vsize,
 		mm ? mm->rss : 0, /* you might want to shift this left 3 */
 		task->rlim[RLIMIT_RSS].rlim_cur,
+#ifdef CONFIG_PAX_OBSCURE
+		0,
+		0,
+		0,
+		0,
+		0,
+#else
 		mm ? mm->start_code : 0,
 		mm ? mm->end_code : 0,
 		mm ? mm->start_stack : 0,
 		esp,
 		eip,
+#endif
 		/* The signal information here is obsolete.
 		 * It must be decimal for Linux 2.0 compatibility.
 		 * Use /proc/#/status for real-time signals.
@@ -404,7 +412,11 @@
 		task->blocked.sig[0] & 0x7fffffffUL,
 		sigign      .sig[0] & 0x7fffffffUL,
 		sigcatch    .sig[0] & 0x7fffffffUL,
+#ifdef CONFIG_PAX_OBSCURE
+		0,
+#else		
 		wchan,
+#endif
 		task->nswap,
 		task->cnswap,
 		task->exit_signal,
@@ -545,9 +557,13 @@
 	}
 
 	seq_printf(m, "%08lx-%08lx %c%c%c%c %08lx %02x:%02x %lu %n",
+#ifdef CONFIG_PAX_OBSCURE
+			0,
+			0,
+#else
 			map->vm_start,
 			map->vm_end,
-
+#endif
 #if 1
 			flags & VM_MAYREAD ? flags & VM_READ ? 'R' : '+' : flags & VM_READ ? 'r' : '-',
 			flags & VM_MAYWRITE ? flags & VM_WRITE ? 'W' : '+' : flags & VM_WRITE ? 'w' : '-',
@@ -559,7 +575,11 @@
 #endif
 
 			flags & VM_MAYSHARE ? 's' : 'p',
+#ifdef CONFIG_PAX_OBSCURE
+			0,
+#else
 			map->vm_pgoff << PAGE_SHIFT,
+#endif
 			MAJOR(dev), MINOR(dev), ino, &len);
 
 	if (map->vm_file) {
diff -urN linux-2.4.27-hardened-0/fs/proc/vm_file linux-2.4.27-hardened-1/fs/proc/vm_file
--- linux-2.4.27-hardened-0/fs/proc/vm_file	1969-12-31 18:00:00.000000000 -0600
+++ linux-2.4.27-hardened-1/fs/proc/vm_file	2004-08-08 15:20:29.000000000 -0500
@@ -0,0 +1,27 @@
+./array.c.orig:	struct file *file = map->vm_file;
+./array.c.orig:	int flags = map->vm_flags;
+./array.c.orig:		struct inode *inode = map->vm_file->f_dentry->d_inode;
+./array.c.orig:			map->vm_start,
+./array.c.orig:			map->vm_end,
+./array.c.orig:			map->vm_pgoff << PAGE_SHIFT,
+./array.c.orig:	if (map->vm_file) {
+./array.c.orig:		map = map->vm_next;
+./array.c.orig:		struct mm_struct *mm = map->vm_mm;
+./array.c.orig:	if (map->vm_next)
+./array.c.orig:		return map->vm_next;
+Binary file ./.array.c.rej.swp matches
+./array.c:	struct file *file = map->vm_file;
+./array.c:	int flags = map->vm_flags;
+./array.c:		struct inode *inode = map->vm_file->f_dentry->d_inode;
+./array.c:			map->vm_start,
+./array.c:			map->vm_end,
+./array.c:			map->vm_pgoff << PAGE_SHIFT,
+./array.c:	if (map->vm_file) {
+./array.c:		map = map->vm_next;
+./array.c:		struct mm_struct *mm = map->vm_mm;
+./array.c:	if (map->vm_next)
+./array.c:		return map->vm_next;
+./array.c.rej:  		      map->vm_start, map->vm_end, str, map->vm_pgoff << PAGE_SHIFT,
+./array.c.rej:  	if(map->vm_file) {
+./array.c.rej:  		      map->vm_start, map->vm_end, str, map->vm_pgoff << PAGE_SHIFT,
+./array.c.rej:  	if(map->vm_file) {
