#!/usr/bin/env python2

# kernel-config - Utility for configuring various aspects of kernel
# installation and general configuration. This utility is *not* intended
# to be used for kernel compilation, installation, etc. Other tools can do
# that.

# Peter Johanson <latexer@gentoo.org

import sys, getopt, os

from config_kernel import ck_actions, ck_env

__version__ = "$Revision: 0.2.7 " [11:-2]

envVals = { "KBUILD_OUTPUT_PREFIX":"", \
			"AUTO_SYMLINK":"", \
			"LINUX_PORTAGE_WRITABLE":"", }
			# "AUTO_CONFIG":"", \

def main():
	# Private ops should be listed here. These remain undocumented
	# Used internally for eclasses, etc.

	privateopts = [ "eclass-symlink=", \
					"get-kbuild-prefix", ]
	# If you update publicopts, make sure to update ck_actions.usage() and
	# config-kernel.1 to keep things documented
	publicopts = [ "help", \
					"display", \
					"allow-writable=", \
					"auto-symlink=", \
					"set-symlink=", \
					"list-targets", \
					"output-dir=", \
					"make-koutput=", \
					"set-extraversion=", ]
					#"auto-config=" , \

	longoptions = privateopts + publicopts

	try:
		opts, args = getopt.getopt(sys.argv[1:], "hdl" , longoptions )
	except getopt.GetoptError:
		ck_actions.usage()
		sys.exit(2)
	
	commands, variables, needroot, needEnvUpdate = parseopts(opts)

	if not commands and not needEnvUpdate:
		ck_actions.usage()
		sys.exit()

	# 
	if needroot and os.getuid() != 0:
		print "Action requires root priveleges!"
		sys.exit(2)
	
	if needEnvUpdate:
		ck_env.setenv(envVals)

	for act in commands:
		if act == "printenv":
			ck_actions.printenv()
		elif act == "list":
			ck_actions.listkernels()
		elif act == "setsymlink":
			ck_actions.setsymlink(variables['symlink-target'])
		elif act == "eclassymlink":
			ck_actions.eclassymlink(variables['eclass-symlink'])
		elif act == "getoutputprefix":
			ck_actions.getOutputPrefix()
		elif act == "extraversion":
				ck_actions.setextraversion(variables['extraversion'])
		elif act == "makeoutput":
			if variables['makeoutput']:
				ck_actions.makekoutput(variables['makeoutput'])
			else:
				ck_actions.makekoutput("/usr/src/linux")
	
def parseopts(opt):
	actions=[]
	vars={}
	priveleged = False
	updateEnv = False
	for o, a in opt:
		if o in ("-h", "--help"):
			ck_actions.usage()
			sys.exit()
		elif o in ("-l", "--list-targets"):
			actions.append("list")
		elif o in ("-d", "--display"):
			actions.append("printenv")
		elif o == "--allow-writable":
			updateEnv = True
			try:
				envVals['LINUX_PORTAGE_WRITABLE'] = makeBool(a)
			except:
				ck_actions.usage()
				sys.exit(2)
		elif o == "--auto-symlink":
			priveleged = True
			updateEnv = True
			try:
				envVals['AUTO_SYMLINK'] = makeBool(a)
			except:
				ck_actions.usage()
				sys.exit(2)
		#elif o == "--auto-config":
			#updateEnv = True
			#priveleged = True
			#try:
				#envVals['AUTO_CONFIG'] = makeBool(a)
			#except:
				#ck_actions.usage()
				#sys.exit(2)
		elif o == "--set-symlink":
			priveleged = True
			actions.append("setsymlink")
			vars['symlink-target'] = a
		elif o == "--eclass-symlink":
			priveleged = True
			actions.append("eclassymlink")
			vars['eclass-symlink'] = a
		elif o == "--get-kbuild-prefix":
			actions.append("getoutputprefix")
		elif o == "--output-dir":
			priveleged = True
			updateEnv = True
			envVals['KBUILD_OUTPUT_PREFIX'] = a
		elif o == "--make-koutput":
			priveleged = True
			actions.append("makeoutput")
			if a != "current":
				vars['makeoutput'] = a
			else:
				vars['makeoutput'] = os.path.join("/","usr","src","linux")
		elif o == "--set-extraversion":
			priveleged = True
			actions.append("extraversion")
			vars['extraversion'] = a

	return actions, vars, priveleged, updateEnv
			
def makeBool(val):
	if val == "yes" or val == "no" :
		return val
	else:
		raise 'Invalid Option', val
		
if __name__ == "__main__":
	main()

# vim:ts=4:
