#!/usr/bin/env python2
# $Header: /var/cvsroot/gentoo/src/kernel/config-kernel/config-kernel,v 1.1 2004/03/16 03:52:52 latexer Exp $

# kernel-config - Utility for configuring various aspects of kernel
# installation and general configuration. This utility is *not* intended
# to be used for kernel compilation, installation, etc. Other tools can do
# that.

# Peter Johanson <latexer@gentoo.org

import sys, getopt

from config_kernel import ck_actions

__version__ = "$Revision: 0.1 " [11:-2]

envVals = { "KBUILD_OUTPUT_PREFIX":"", \
			"AUTO_SYMLINK":"", \
			"AUTO_CONFIG":"", \
			"LINUX_PORTAGE_WRITABLE":"", }

def main():
	longoptions = [ "help", "display", "allow-writable=", "auto-symlink=", "set-symlink=", "list-targets", "auto-config=" , "output-dir=", "make-koutput="]

	try:
		opts, args = getopt.getopt(sys.argv[1:], "hdl" , longoptions )
	except getopt.GetoptError:
		ck_actions.usage()
		sys.exit(2)
	
	commands, variables, needroot, needEnvUpdate = parseopts(opts)

	if not commands and not needEnvUpdate:
		ck_actions.usage()
		sys.exit()

	# 
	if needroot and os.getuid() != 0:
		print "Action requires root priveleges!"
		sys.exit(2)
	
	if needEnvUpdate:
		setenv(envVals)

	for act in commands:
		if act == "printenv":
			ck_actions.printenv()
		elif act == "list":
			ck_actions.listkernels()
		elif act == "setsymlink":
			ck_actions.setsymlink(variables['symlink-target'])
		elif act == "makeoutput":
			if variables['makeoutput']:
				ck_actions.makekoutput(variables['makeoutput'])
			else:
				ck_actions.makekoutput("/usr/src/linux")
	
def parseopts(opt):
	actions=[]
	vars={}
	priveleged = False
	updateEnv = False
	for o, a in opt:
		if o in ("-h", "--help"):
			ck_actions.usage()
			sys.exit()
		elif o in ("-l", "--list-targets"):
			actions.append("list")
		elif o in ("-d", "--display"):
			actions.append("printenv")
		elif o == "--allow-writable":
			updateEnv = True
			try:
				envVals['LINUX_PORTAGE_WRITABLE'] = makeBool(a)
			except:
				ck_actions.usage()
				sys.exit(2)
		elif o == "--auto-symlink":
			priveleged = True
			updateEnv = True
			try:
				envVals['AUTO_SYMLINK'] = makeBool(a)
			except:
				ck_actions.usage()
				sys.exit(2)
		elif o == "--auto-config":
			updateEnv = True
			priveleged = True
			try:
				envVals['AUTO_CONFIG'] = makeBool(a)
			except:
				ck_actions.usage()
				sys.exit(2)
		elif o  == "--set-symlink":
			priveleged = True
			actions.append("setsymlink")
			vars['symlink-target'] = a
		elif o == "--output-dir":
			priveleged = True
			updateEnv = True
			envVals['KBUILD_OUTPUT_PREFIX'] = a
		elif o == "--make-koutput":
			priveleged = True
			actions.append("makeoutput")
			if a != "current":
				vars['makeoutput'] = a
			else:
				vars['makeoutput'] = os.path.join("/","usr","src","linux")

	return actions, vars, priveleged, updateEnv
			
def makeBool(val):
	if val == "yes" or val == "no" :
		return val
	else:
		raise 'Invalid Option', val
		
if __name__ == "__main__":
	main()

# vim:ts=4:
