The timestamps in the emacs-23.3b tarball are messed up, triggering
an incorrect rebuild of loaddefs files. We therefore start from
emacs-23.3a and patch it up to 23.3b.
http://lists.gnu.org/archive/html/emacs-devel/2011-12/msg00137.html

--- emacs-23.3a/etc/grammars/README	2011-08-01 00:31:44.000000000 +0000
+++ emacs-23.3b/etc/grammars/README	2011-11-26 03:25:39.000000000 +0000
@@ -4,13 +4,5 @@
 lisp/ are generated by hand, not automatically.  You can run the
 parser generators with
 
-emacs -batch --no-site-file -l bovine-grammar.el -f semantic-mode \
- -f semantic-grammar-batch-build-packages *.by
-
-emacs -batch --no-site-file -l wisent-grammar.el -f semantic-mode \
- -f semantic-grammar-batch-build-packages *.wy
-
-The output files were subsequently edited by hand to fix copyright
-headers, variable names (to follow library name conventions), and
-feature names.  A patch to produce the files actually present in the
-lisp/ tree is found in fixes.patch.
+emacs -batch -Q -l bovine-grammar.el -f bovine-make-parsers
+emacs -batch -Q -l wisent-grammar.el -f wisent-make-parsers
--- emacs-23.3a/etc/grammars/bovine-grammar.el	2011-07-31 20:36:58.000000000 +0000
+++ emacs-23.3b/etc/grammars/bovine-grammar.el	2011-11-26 03:25:42.000000000 +0000
@@ -435,4 +435,67 @@
 
 (provide 'semantic/bovine/grammar)
 
+
+(defun bovine-make-parsers ()
+  "Generate Emacs' built-in Bovine-based parser files."
+  (semantic-mode 1)
+  ;; Loop through each .by file in current directory, and run
+  ;; `semantic-grammar-batch-build-one-package' to build the grammar.
+  (dolist (f (directory-files default-directory nil ".by$"))
+    (let ((packagename
+           (condition-case err
+               (with-current-buffer (find-file-noselect f)
+                 (semantic-grammar-create-package))
+             (error (message "%s" (error-message-string err)) nil)))
+	  lang)
+      (when (and packagename
+		 (string-match "^semantic-\\(.*\\)-by.el$" packagename))
+	(setq lang (match-string 1 packagename))
+	(with-temp-buffer
+	  (insert-file-contents packagename)
+	  (setq buffer-file-name (expand-file-name packagename))
+	  ;; Fix copyright header:
+	  (goto-char (point-min))
+	  (re-search-forward "^;; Author:")
+	  (setq copyright-end (match-beginning 0))
+	  (re-search-forward "^;;; Code:\n")
+	  (delete-region copyright-end (match-end 0))
+	  (goto-char copyright-end)
+	  (insert ";; This file is part of GNU Emacs.
+
+;; GNU Emacs is free software: you can redistribute it and/or modify
+;; it under the terms of the GNU General Public License as published by
+;; the Free Software Foundation, either version 3 of the License, or
+;; (at your option) any later version.
+
+;; GNU Emacs is distributed in the hope that it will be useful,
+;; but WITHOUT ANY WARRANTY; without even the implied warranty of
+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+;; GNU General Public License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
+
+;;; Commentary:
+;;
+;; This file was generated from etc/grammars/"
+		  lang ".by.
+
+;;; Code:
+
+\(require 'semantic/lex)
+\(eval-when-compile (require 'semantic/bovine))\n")
+	  (goto-char (point-min))
+	  (delete-region (point-min) (line-end-position))
+	  (insert ";;; semantic/bovine/" lang
+		  "-by.el --- Generated parser support file")
+	  (delete-trailing-whitespace)
+	  ;; Fix footer:
+	  (goto-char (point-max))
+	  (re-search-backward ".\n;;; Analyzers")
+	  (delete-region (point) (point-max))
+	  (insert "(provide 'semantic/bovine/" lang "-by)\n\n")
+	  (insert ";;; semantic/bovine/" lang "-by.el ends here\n")
+	  (save-buffer))))))
+
 ;;; bovine-grammar.el ends here
--- emacs-23.3a/etc/grammars/fixes.patch	2011-08-01 00:32:02.000000000 +0000
+++ emacs-23.3b/etc/grammars/fixes.patch	1970-01-01 00:00:00.000000000 +0000
@@ -1,1199 +0,0 @@
-diff -c -r grammars/semantic-c-by.el new/semantic-c-by.el
-*** semantic-c-by.el	2011-07-31 20:19:31.884753047 -0400
---- c-by.el	2011-07-31 20:21:02.694753113 -0400
-***************
-*** 1,42 ****
-! ;;; semantic-c-by.el --- Generated parser support file
-  
-! ;; Copyright (C) 1999-2011 Free Software Foundation, Inc.
-  
-! ;; Author: Chong Yidong <cyd@furball>
-! ;; Created: 2011-07-31 20:19:31-0400
-! ;; Keywords: syntax
-! ;; X-RCS: $Id$
-  
-! ;; This file is not part of GNU Emacs.
-  
-! ;; This program is free software; you can redistribute it and/or
-! ;; modify it under the terms of the GNU General Public License as
-! ;; published by the Free Software Foundation, either version 3 of
-! ;; the License, or (at your option) any later version.
-! 
-! ;; This software is distributed in the hope that it will be useful,
-  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-! ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-! ;; General Public License for more details.
-! ;;
-  ;; You should have received a copy of the GNU General Public License
-! ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
-  
-  ;;; Commentary:
-  ;;
-! ;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-! ;; generated from the grammar file c.by.
-! 
-! ;;; History:
-! ;;
-  
-  ;;; Code:
-! 
-! ;;; Prologue
-! ;;
-! 
-! ;;; Declarations
-! ;;
-  (defconst semantic-c-by--keyword-table
-    (semantic-lex-make-keyword-table
-     '(("extern" . EXTERN)
---- 1,36 ----
-! ;;; semantic/bovine/c-by.el --- Generated parser support file
-  
-! ;;; Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
-! ;;; 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
-  
-! ;; This file is part of GNU Emacs.
-  
-! ;; GNU Emacs is free software: you can redistribute it and/or modify
-! ;; it under the terms of the GNU General Public License as published by
-! ;; the Free Software Foundation, either version 3 of the License, or
-! ;; (at your option) any later version.
-  
-! ;; GNU Emacs is distributed in the hope that it will be useful,
-  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-! ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-! ;; GNU General Public License for more details.
-! 
-  ;; You should have received a copy of the GNU General Public License
-! ;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
-  
-  ;;; Commentary:
-  ;;
-! ;; This file was generated from etc/grammars/c.by.
-  
-  ;;; Code:
-! 
-! (require 'semantic/lex)
-! (eval-when-compile (require 'semantic/bovine))
-! 
-! (declare-function semantic-c-reconstitute-token "semantic/bovine/c")
-! (declare-function semantic-c-reconstitute-template "semantic/bovine/c")
-! (declare-function semantic-expand-c-tag "semantic/bovine/c")
-! 
-  (defconst semantic-c-by--keyword-table
-    (semantic-lex-make-keyword-table
-     '(("extern" . EXTERN)
-***************
-*** 189,199 ****
-  
-  (defconst semantic-c-by--parse-table
-    `(
-!     (bovine-toplevel 
-       (declaration)
-       ) ;; end bovine-toplevel
-  
-!     (bovine-inner-scope 
-       (codeblock)
-       ) ;; end bovine-inner-scope
-  
---- 183,193 ----
-  
-  (defconst semantic-c-by--parse-table
-    `(
-!     (bovine-toplevel
-       (declaration)
-       ) ;; end bovine-toplevel
-  
-!     (bovine-inner-scope
-       (codeblock)
-       ) ;; end bovine-inner-scope
-  
-***************
-*** 1245,1253 ****
-  	 (nth 7 vals))
-  	(nth 0 vals)
-  	(nth 10 vals)
-! 	(list
-! 	 (nth 4 vals))
-! 	(nth 9 vals))
-        )
-       (opt-stars
-        opt-class
---- 1239,1245 ----
-  	 (nth 7 vals))
-  	(nth 0 vals)
-  	(nth 10 vals)
-! 	(nth 4 vals))
-        )
-       (opt-stars
-        opt-class
-***************
-*** 1269,1277 ****
-  	 (nth 6 vals))
-  	(nth 0 vals)
-  	(nth 9 vals)
-! 	(list
-! 	 (nth 4 vals))
-! 	(nth 8 vals))
-        )
-       ) ;; end func-decl
-  
---- 1261,1267 ----
-  	 (nth 6 vals))
-  	(nth 0 vals)
-  	(nth 9 vals)
-! 	(nth 4 vals))
-        )
-       ) ;; end func-decl
-  
-***************
-*** 1442,1452 ****
-        namespace-symbol
-        opt-bits
-        opt-array
-        ,(semantic-lambda
-  	(nth 2 vals)
-  	(nth 0 vals)
-  	(nth 3 vals)
-! 	(nth 4 vals))
-        )
-       ) ;; end varname
-  
---- 1432,1444 ----
-        namespace-symbol
-        opt-bits
-        opt-array
-+       opt-assign
-        ,(semantic-lambda
-  	(nth 2 vals)
-  	(nth 0 vals)
-  	(nth 3 vals)
-! 	(nth 4 vals)
-! 	(nth 5 vals))
-        )
-       ) ;; end varname
-  
-***************
-*** 1491,1518 ****
-        )
-       ) ;; end variablearg-opt-name
-  
--     (varname-opt-initializer
--      (semantic-list)
--      (opt-assign)
--      ( ;;EMPTY
--       )
--      ) ;; end varname-opt-initializer
-- 
-      (varnamelist
-       (opt-ref
-        varname
--       varname-opt-initializer
-        punctuation
-        "\\`[,]\\'"
-        varnamelist
-        ,(semantic-lambda
-  	(cons
-  	 (nth 1 vals)
-! 	 (nth 4 vals)))
-        )
-       (opt-ref
-        varname
--       varname-opt-initializer
-        ,(semantic-lambda
-  	(list
-  	 (nth 1 vals)))
---- 1483,1501 ----
-        )
-       ) ;; end variablearg-opt-name
-  
-      (varnamelist
-       (opt-ref
-        varname
-        punctuation
-        "\\`[,]\\'"
-        varnamelist
-        ,(semantic-lambda
-  	(cons
-  	 (nth 1 vals)
-! 	 (nth 3 vals)))
-        )
-       (opt-ref
-        varname
-        ,(semantic-lambda
-  	(list
-  	 (nth 1 vals)))
-***************
-*** 2124,2187 ****
-        "\\`[&]\\'")
-       ) ;; end expr-start
-  
--     (expr-binop
--      (punctuation
--       "\\`[-]\\'")
--      (punctuation
--       "\\`[+]\\'")
--      (punctuation
--       "\\`[*]\\'")
--      (punctuation
--       "\\`[/]\\'")
--      (punctuation
--       "\\`[&]\\'"
--       punctuation
--       "\\`[&]\\'")
--      (punctuation
--       "\\`[&]\\'")
--      (punctuation
--       "\\`[|]\\'"
--       punctuation
--       "\\`[|]\\'")
--      (punctuation
--       "\\`[|]\\'")
--      ) ;; end expr-binop
-- 
-      (expression
-!      (unaryexpression
-!       expr-binop
-!       unaryexpression
-        ,(semantic-lambda
-  	(list
-  	 (identity start)
-  	 (identity end)))
-        )
-!      (unaryexpression
-        ,(semantic-lambda
-  	(list
-  	 (identity start)
-  	 (identity end)))
-        )
--      ) ;; end expression
-- 
--     (unaryexpression
--      (number)
--      (multi-stage-dereference)
-       (NEW
-!       multi-stage-dereference)
-       (NEW
-        builtintype-types
-!       semantic-list)
-!      (namespace-symbol)
-!      (string-seq)
-       (type-cast
-!       expression)
-       (semantic-list
-!       expression)
-!      (semantic-list)
-       (expr-start
-!       expression)
-!      ) ;; end unaryexpression
-      )
-    "Parser table.")
-  
---- 2107,2180 ----
-        "\\`[&]\\'")
-       ) ;; end expr-start
-  
-      (expression
-!      (number
-        ,(semantic-lambda
-  	(list
-  	 (identity start)
-  	 (identity end)))
-        )
-!      (multi-stage-dereference
-        ,(semantic-lambda
-  	(list
-  	 (identity start)
-  	 (identity end)))
-        )
-       (NEW
-!       multi-stage-dereference
-!       ,(semantic-lambda
-! 	(list
-! 	 (identity start)
-! 	 (identity end)))
-!       )
-       (NEW
-        builtintype-types
-!       semantic-list
-!       ,(semantic-lambda
-! 	(list
-! 	 (identity start)
-! 	 (identity end)))
-!       )
-!      (namespace-symbol
-!       ,(semantic-lambda
-! 	(list
-! 	 (identity start)
-! 	 (identity end)))
-!       )
-!      (string-seq
-!       ,(semantic-lambda
-! 	(list
-! 	 (identity start)
-! 	 (identity end)))
-!       )
-       (type-cast
-!       expression
-!       ,(semantic-lambda
-! 	(list
-! 	 (identity start)
-! 	 (identity end)))
-!       )
-!      (semantic-list
-!       expression
-!       ,(semantic-lambda
-! 	(list
-! 	 (identity start)
-! 	 (identity end)))
-!       )
-       (semantic-list
-!       ,(semantic-lambda
-! 	(list
-! 	 (identity start)
-! 	 (identity end)))
-!       )
-       (expr-start
-!       expression
-!       ,(semantic-lambda
-! 	(list
-! 	 (identity start)
-! 	 (identity end)))
-!       )
-!      ) ;; end expression
-      )
-    "Parser table.")
-  
-***************
-*** 2193,2208 ****
-  	semantic-flex-keywords-obarray semantic-c-by--keyword-table
-  	semantic-equivalent-major-modes '(c-mode c++-mode)
-  	))
-- 
-- 
-- ;;; Analyzers
-- ;;
-- (require 'semantic-lex)
-- 
-  
-  ;;; Epilogue
-  ;;
-  
-! (provide 'semantic-c-by)
-  
-! ;;; semantic-c-by.el ends here
---- 2186,2196 ----
-  	semantic-flex-keywords-obarray semantic-c-by--keyword-table
-  	semantic-equivalent-major-modes '(c-mode c++-mode)
-  	))
-  
-  ;;; Epilogue
-  ;;
-  
-! (provide 'semantic/bovine/c-by)
-  
-! ;; arch-tag: 27da9f71-d2ef-473f-92a7-b0006b1a8491
-! ;;; semantic/bovine/c-by.el ends here
-diff -c -r grammars/semantic-make-by.el new/semantic-make-by.el
-*** semantic-make-by.el	2011-07-31 20:19:32.304753048 -0400
---- make-by.el	2011-07-31 20:21:02.694753113 -0400
-***************
-*** 1,36 ****
-! ;;; semantic-make-by.el --- Generated parser support file
-  
-! ;; Copyright (C) 1999-2011 Free Software Foundation, Inc.
-  
-! ;; Author: Chong Yidong <cyd@furball>
-! ;; Created: 2011-07-31 20:19:32-0400
-! ;; Keywords: syntax
-! ;; X-RCS: $Id$
-  
-! ;; This file is not part of GNU Emacs.
-  
-! ;; This program is free software; you can redistribute it and/or
-! ;; modify it under the terms of the GNU General Public License as
-! ;; published by the Free Software Foundation, either version 3 of
-! ;; the License, or (at your option) any later version.
-! 
-! ;; This software is distributed in the hope that it will be useful,
-  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-! ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-! ;; General Public License for more details.
-! ;;
-  ;; You should have received a copy of the GNU General Public License
-! ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
-  
-  ;;; Commentary:
-  ;;
-! ;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-! ;; generated from the grammar file make.by.
-! 
-! ;;; History:
-! ;;
-  
-  ;;; Code:
-  
-  ;;; Prologue
-  ;;
---- 1,32 ----
-! ;;; semantic/bovine/make-by.el --- Generated parser support file
-  
-! ;; Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2008, 2009, 2010
-! ;;   Free Software Foundation, Inc.
-  
-! ;; This file is part of GNU Emacs.
-  
-! ;; GNU Emacs is free software: you can redistribute it and/or modify
-! ;; it under the terms of the GNU General Public License as published by
-! ;; the Free Software Foundation, either version 3 of the License, or
-! ;; (at your option) any later version.
-  
-! ;; GNU Emacs is distributed in the hope that it will be useful,
-  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-! ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-! ;; GNU General Public License for more details.
-! 
-  ;; You should have received a copy of the GNU General Public License
-! ;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
-  
-  ;;; Commentary:
-  ;;
-! ;; This file was generated from etc/grammars/make.by.
-  
-  ;;; Code:
-+ 
-+ (require 'semantic/lex)
-+ (eval-when-compile (require 'semantic/bovine))
-+ 
-  
-  ;;; Prologue
-  ;;
-***************
-*** 70,76 ****
-  
-  (defconst semantic-make-by--parse-table
-    `(
-!     (bovine-toplevel 
-       (Makefile)
-       ) ;; end bovine-toplevel
-  
---- 66,72 ----
-  
-  (defconst semantic-make-by--parse-table
-    `(
-!     (bovine-toplevel
-       (Makefile)
-       ) ;; end bovine-toplevel
-  
-***************
-*** 385,399 ****
-  	semantic-flex-keywords-obarray semantic-make-by--keyword-table
-  	))
-  
-! 
-! ;;; Analyzers
-! ;;
-! (require 'semantic-lex)
-! 
-! 
-! ;;; Epilogue
-! ;;
-! 
-! (provide 'semantic-make-by)
-  
-! ;;; semantic-make-by.el ends here
---- 381,387 ----
-  	semantic-flex-keywords-obarray semantic-make-by--keyword-table
-  	))
-  
-! (provide 'semantic/bovine/make-by)
-  
-! ;; arch-tag: 8c3749b8-7b19-46e0-af01-2a4d02fd0352
-! ;;; semantic/bovine/make-by.el ends here
-diff -c -r grammars/semantic-scm-by.el new/semantic-scm-by.el
-*** semantic-scm-by.el	2011-07-31 20:19:32.434753048 -0400
---- scm-by.el	2011-07-31 20:21:02.694753113 -0400
-***************
-*** 1,36 ****
-  ;;; semantic-scm-by.el --- Generated parser support file
-  
-! ;; Copyright (C) 2001-2011 Free Software Foundation, Inc.
-  
-! ;; Author: Chong Yidong <cyd@furball>
-! ;; Created: 2011-07-31 20:19:32-0400
-! ;; Keywords: syntax
-! ;; X-RCS: $Id$
-  
-! ;; This file is not part of GNU Emacs.
-  
-! ;; This program is free software; you can redistribute it and/or
-! ;; modify it under the terms of the GNU General Public License as
-! ;; published by the Free Software Foundation, either version 3 of
-! ;; the License, or (at your option) any later version.
-! 
-! ;; This software is distributed in the hope that it will be useful,
-  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-! ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-! ;; General Public License for more details.
-! ;;
-  ;; You should have received a copy of the GNU General Public License
-! ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
-  
-  ;;; Commentary:
-  ;;
-! ;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-! ;; generated from the grammar file scheme.by.
-! 
-! ;;; History:
-! ;;
-  
-  ;;; Code:
-  
-  ;;; Prologue
-  ;;
---- 1,31 ----
-  ;;; semantic-scm-by.el --- Generated parser support file
-  
-! ;; Copyright (C) 2001, 2003, 2009, 2010 Free Software Foundation, Inc.
-  
-! ;; This file is part of GNU Emacs.
-  
-! ;; GNU Emacs is free software: you can redistribute it and/or modify
-! ;; it under the terms of the GNU General Public License as published by
-! ;; the Free Software Foundation, either version 3 of the License, or
-! ;; (at your option) any later version.
-  
-! ;; GNU Emacs is distributed in the hope that it will be useful,
-  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-! ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-! ;; GNU General Public License for more details.
-! 
-  ;; You should have received a copy of the GNU General Public License
-! ;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
-  
-  ;;; Commentary:
-  ;;
-! ;; This file was generated from etc/grammars/scm.by.
-  
-  ;;; Code:
-+ 
-+ (require 'semantic/lex)
-+ 
-+ (eval-when-compile (require 'semantic/bovine))
-  
-  ;;; Prologue
-  ;;
-***************
-*** 58,64 ****
-  
-  (defconst semantic-scm-by--parse-table
-    `(
-!     (bovine-toplevel 
-       (scheme)
-       ) ;; end bovine-toplevel
-  
---- 53,59 ----
-  
-  (defconst semantic-scm-by--parse-table
-    `(
-!     (bovine-toplevel
-       (scheme)
-       ) ;; end bovine-toplevel
-  
-***************
-*** 190,204 ****
-  	semantic-flex-keywords-obarray semantic-scm-by--keyword-table
-  	))
-  
-! 
-! ;;; Analyzers
-! ;;
-! (require 'semantic-lex)
-! 
-! 
-! ;;; Epilogue
-! ;;
-! 
-! (provide 'semantic-scm-by)
-  
-! ;;; semantic-scm-by.el ends here
---- 185,191 ----
-  	semantic-flex-keywords-obarray semantic-scm-by--keyword-table
-  	))
-  
-! (provide 'semantic/bovine/scm-by)
-  
-! ;; arch-tag: 945749cc-a039-434f-bf95-bf2480a506c3
-! ;;; semantic/bovine/scm-by.el ends here
-diff -c -r grammars/wisent-javascript-jv-wy.el new/wisent-javascript-jv-wy.el
-*** wisent-javascript-jv-wy.el	2011-07-31 20:19:49.284753061 -0400
---- js-wy.el	2011-07-31 20:21:11.574753119 -0400
-***************
-*** 1,36 ****
-! ;;; wisent-javascript-jv-wy.el --- Generated parser support file
-  
-! ;; Copyright (C) 2005-2011 Free Software Foundation, Inc.
-  
-! ;; Author: Chong Yidong <cyd@furball>
-! ;; Created: 2011-07-31 20:19:49-0400
-! ;; Keywords: syntax
-! ;; X-RCS: $Id$
-  
-! ;; This file is not part of GNU Emacs.
-  
-! ;; This program is free software; you can redistribute it and/or
-! ;; modify it under the terms of the GNU General Public License as
-! ;; published by the Free Software Foundation, either version 3 of
-! ;; the License, or (at your option) any later version.
-  
-! ;; This software is distributed in the hope that it will be useful,
-  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-! ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-! ;; General Public License for more details.
-! ;;
-  ;; You should have received a copy of the GNU General Public License
-! ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
-  
-  ;;; Commentary:
-  ;;
-! ;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-! ;; generated from the grammar file js.wy.
-! 
-! ;;; History:
-  ;;
-  
-  ;;; Code:
-  
-  ;;; Prologue
-  ;;
---- 1,66 ----
-! ;;; semantic/wisent/js-wy.el --- Generated parser support file
-  
-! ;; Copyright (C) 2005, 2009, 2010  Free Software Foundation, Inc.
-! ;; Copyright (C) 1998-2011 Ecma International.
-  
-! ;; Author: Joakim Verona
-  
-! ;; This file is part of GNU Emacs.
-  
-! ;; GNU Emacs is free software: you can redistribute it and/or modify
-! ;; it under the terms of the GNU General Public License as published by
-! ;; the Free Software Foundation, either version 3 of the License, or
-! ;; (at your option) any later version.
-  
-! ;; GNU Emacs is distributed in the hope that it will be useful,
-  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-! ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-! ;; GNU General Public License for more details.
-! 
-  ;; You should have received a copy of the GNU General Public License
-! ;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
-  
-  ;;; Commentary:
-  ;;
-! ;; This file was generated from etc/grammars/js.wy.
-! ;;
-! ;; It is derived from the grammar in the ECMAScript Language
-! ;; Specification published at
-! ;;
-! ;; http://www.ecma-international.org/publications/standards/Ecma-262.htm
-  ;;
-+ ;; and redistributed under the following license:
-+ ;;
-+ ;; Redistribution and use in source and binary forms, with or without
-+ ;; modification, are permitted provided that the following conditions
-+ ;; are met:
-+ ;;
-+ ;; 1. Redistributions of source code must retain the above copyright
-+ ;; notice, this list of conditions and the following disclaimer.
-+ ;;
-+ ;; 2. Redistributions in binary form must reproduce the above
-+ ;; copyright notice, this list of conditions and the following
-+ ;; disclaimer in the documentation and/or other materials provided
-+ ;; with the distribution.
-+ ;;
-+ ;; 3. Neither the name of the authors nor Ecma International may be
-+ ;; used to endorse or promote products derived from this software
-+ ;; without specific prior written permission.  THIS SOFTWARE IS
-+ ;; PROVIDED BY THE ECMA INTERNATIONAL "AS IS" AND ANY EXPRESS OR
-+ ;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-+ ;; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-+ ;; ARE DISCLAIMED. IN NO EVENT SHALL ECMA INTERNATIONAL BE LIABLE FOR
-+ ;; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-+ ;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
-+ ;; OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
-+ ;; BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-+ ;; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-+ ;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
-+ ;; USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
-+ ;; DAMAGE.
-  
-  ;;; Code:
-+ (require 'semantic/lex)
-  
-  ;;; Prologue
-  ;;
-***************
-*** 377,383 ****
-     '((parse-stream . wisent-parse-stream)))
-    (setq semantic-parser-name "LALR"
-  	semantic--parse-table wisent-javascript-jv-wy--parse-table
-! 	semantic-debug-parser-source "js.wy"
-  	semantic-flex-keywords-obarray wisent-javascript-jv-wy--keyword-table
-  	semantic-lex-types-obarray wisent-javascript-jv-wy--token-table)
-    ;; Collect unmatched syntax lexical tokens
---- 407,413 ----
-     '((parse-stream . wisent-parse-stream)))
-    (setq semantic-parser-name "LALR"
-  	semantic--parse-table wisent-javascript-jv-wy--parse-table
-! 	semantic-debug-parser-source "wisent-javascript-jv.wy"
-  	semantic-flex-keywords-obarray wisent-javascript-jv-wy--keyword-table
-  	semantic-lex-types-obarray wisent-javascript-jv-wy--token-table)
-    ;; Collect unmatched syntax lexical tokens
-***************
-*** 388,395 ****
-  
-  ;;; Analyzers
-  ;;
-- (require 'semantic-lex)
-- 
-  (define-lex-keyword-type-analyzer wisent-javascript-jv-wy--<keyword>-keyword-analyzer
-    "keyword analyzer for <keyword> tokens."
-    "\\(\\sw\\|\\s_\\)+")
---- 418,423 ----
-***************
-*** 495,500 ****
-    semantic-lex-default-action
-    )
-  
-! (provide 'wisent-javascript-jv-wy)
-  
-! ;;; wisent-javascript-jv-wy.el ends here
---- 523,529 ----
-    semantic-lex-default-action
-    )
-  
-! (provide 'semantic/wisent/js-wy)
-  
-! ;; arch-tag: ff9ecf05-18e6-46a6-a3bb-e7f43f04640f
-! ;;; semantic/wisent/js-wy.el ends here
-diff -c -r grammars/wisent-java-tags-wy.el new/wisent-java-tags-wy.el
-*** wisent-java-tags-wy.el	2011-07-31 20:19:48.674753059 -0400
---- javat-wy.el	2011-07-31 20:21:11.574753119 -0400
-***************
-*** 1,36 ****
-! ;;; wisent-java-tags-wy.el --- Generated parser support file
-  
-! ;; Copyright (C) 2002-2011 Free Software Foundation, Inc.
-  
-! ;; Author: Chong Yidong <cyd@furball>
-! ;; Created: 2011-07-31 20:19:48-0400
-! ;; Keywords: syntax
-! ;; X-RCS: $Id$
-  
-! ;; This file is not part of GNU Emacs.
-  
-! ;; This program is free software; you can redistribute it and/or
-! ;; modify it under the terms of the GNU General Public License as
-! ;; published by the Free Software Foundation, either version 3 of
-! ;; the License, or (at your option) any later version.
-! 
-! ;; This software is distributed in the hope that it will be useful,
-  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-! ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-! ;; General Public License for more details.
-! ;;
-  ;; You should have received a copy of the GNU General Public License
-! ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
-  
-  ;;; Commentary:
-  ;;
-! ;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-! ;; generated from the grammar file java-tags.wy.
-! 
-! ;;; History:
-! ;;
-  
-  ;;; Code:
-  
-  ;;; Prologue
-  ;;
---- 1,31 ----
-! ;;; semantic/wisent/javat-wy.el --- Generated parser support file
-  
-! ;; Copyright (C) 2002, 2007, 2009, 2010  Free Software Foundation, Inc.
-  
-! ;; This file is part of GNU Emacs.
-  
-! ;; GNU Emacs is free software: you can redistribute it and/or modify
-! ;; it under the terms of the GNU General Public License as published by
-! ;; the Free Software Foundation, either version 3 of the License, or
-! ;; (at your option) any later version.
-  
-! ;; GNU Emacs is distributed in the hope that it will be useful,
-  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-! ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-! ;; GNU General Public License for more details.
-! 
-  ;; You should have received a copy of the GNU General Public License
-! ;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
-  
-  ;;; Commentary:
-  ;;
-! ;; This file was generated from the grammar file
-! ;; semantic/wisent/wisent-java-tags.wy in the CEDET repository.
-  
-  ;;; Code:
-+ 
-+ (require 'semantic/lex)
-+ 
-  
-  ;;; Prologue
-  ;;
-***************
-*** 181,187 ****
-       ("continue" summary "continue [<label>] ;")
-       ("const" summary "Unused reserved word")
-       ("class" summary "Class declaration: class <name>")
-!      ("char" summary "Integral primitive type (' ' to '￿') (0 to 65535)")
-       ("catch" summary "try {<stmts>} catch(<parm>) {<stmts>} ... ")
-       ("case" summary "switch(<expr>) {case <const-expr>: <stmts> ... }")
-       ("byte" summary "Integral primitive type (-128 to 127)")
---- 176,182 ----
-       ("continue" summary "continue [<label>] ;")
-       ("const" summary "Unused reserved word")
-       ("class" summary "Class declaration: class <name>")
-!      ("char" summary "Integral primitive type ('\000' to '￿') (0 to 65535)")
-       ("catch" summary "try {<stmts>} catch(<parm>) {<stmts>} ... ")
-       ("case" summary "switch(<expr>) {case <const-expr>: <stmts> ... }")
-       ("byte" summary "Integral primitive type (-128 to 127)")
-***************
-*** 402,408 ****
-  	((SEMICOLON))
-  	((block)))
-         (block
-! 	((BRACE_BLOCK)))
-         (formal_parameter_list
-  	((PAREN_BLOCK)
-  	 (semantic-parse-region
---- 397,403 ----
-  	((SEMICOLON))
-  	((block)))
-         (block
-! 	   ((BRACE_BLOCK)))
-         (formal_parameter_list
-  	((PAREN_BLOCK)
-  	 (semantic-parse-region
-***************
-*** 563,569 ****
-     '((parse-stream . wisent-parse-stream)))
-    (setq semantic-parser-name "LALR"
-  	semantic--parse-table wisent-java-tags-wy--parse-table
-! 	semantic-debug-parser-source "java-tags.wy"
-  	semantic-flex-keywords-obarray wisent-java-tags-wy--keyword-table
-  	semantic-lex-types-obarray wisent-java-tags-wy--token-table)
-    ;; Collect unmatched syntax lexical tokens
---- 558,564 ----
-     '((parse-stream . wisent-parse-stream)))
-    (setq semantic-parser-name "LALR"
-  	semantic--parse-table wisent-java-tags-wy--parse-table
-! 	semantic-debug-parser-source "wisent-java-tags.wy"
-  	semantic-flex-keywords-obarray wisent-java-tags-wy--keyword-table
-  	semantic-lex-types-obarray wisent-java-tags-wy--token-table)
-    ;; Collect unmatched syntax lexical tokens
-***************
-*** 574,581 ****
-  
-  ;;; Analyzers
-  ;;
-- (require 'semantic-lex)
-- 
-  (define-lex-keyword-type-analyzer wisent-java-tags-wy--<keyword>-keyword-analyzer
-    "keyword analyzer for <keyword> tokens."
-    "\\(\\sw\\|\\s_\\)+")
---- 569,574 ----
-***************
-*** 684,689 ****
-    ;;;;
-    semantic-lex-default-action)
-  
-! (provide 'wisent-java-tags-wy)
-  
-! ;;; wisent-java-tags-wy.el ends here
---- 677,683 ----
-    ;;;;
-    semantic-lex-default-action)
-  
-! (provide 'semantic/wisent/javat-wy)
-  
-! ;; arch-tag: b035ba00-e014-4c71-9bc7-a9dbf3d5b911
-! ;;; semantic/wisent/javat-wy.el ends here
-diff -c -r grammars/wisent-python-wy.el new/wisent-python-wy.el
-*** wisent-python-wy.el	2011-07-31 20:19:50.254753061 -0400
---- python-wy.el	2011-07-31 20:21:11.574753119 -0400
-***************
-*** 1,36 ****
-! ;;; wisent-python-wy.el --- Generated parser support file
-  
-! ;; Copyright (C) 2002-2011 Free Software Foundation, Inc.
-  
-! ;; Author: Chong Yidong <cyd@furball>
-! ;; Created: 2011-07-31 20:19:50-0400
-! ;; Keywords: syntax
-! ;; X-RCS: $Id$
-  
-! ;; This file is not part of GNU Emacs.
-  
-! ;; This program is free software; you can redistribute it and/or
-! ;; modify it under the terms of the GNU General Public License as
-! ;; published by the Free Software Foundation, either version 3 of
-! ;; the License, or (at your option) any later version.
-! 
-! ;; This software is distributed in the hope that it will be useful,
-  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-! ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-! ;; General Public License for more details.
-! ;;
-  ;; You should have received a copy of the GNU General Public License
-! ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
-  
-  ;;; Commentary:
-  ;;
-! ;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-! ;; generated from the grammar file python.wy.
-! 
-! ;;; History:
-  ;;
-  
-  ;;; Code:
-  
-  ;;; Prologue
-  ;;
---- 1,81 ----
-! ;;; semantic/wisent/python-wy.el --- Generated parser support file
-  
-! ;; Copyright (C) 2002-2004, 2007, 2010-2011  Free Software Foundation, Inc.
-! ;; Copyright (C) 2001-2010 Python Software Foundation
-  
-! ;; This file is part of GNU Emacs.
-  
-! ;; GNU Emacs is free software: you can redistribute it and/or modify
-! ;; it under the terms of the GNU General Public License as published by
-! ;; the Free Software Foundation, either version 3 of the License, or
-! ;; (at your option) any later version.
-  
-! ;; GNU Emacs is distributed in the hope that it will be useful,
-  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-! ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-! ;; GNU General Public License for more details.
-! 
-  ;; You should have received a copy of the GNU General Public License
-! ;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
-  
-  ;;; Commentary:
-  ;;
-! ;; This file was generated from etc/grammars/python.wy.
-! ;; It is derived in part from the Python grammar, used under the
-! ;; following license:
-! ;;
-! ;; PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2
-! ;; --------------------------------------------
-! ;; 1. This LICENSE AGREEMENT is between the Python Software Foundation
-! ;; ("PSF"), and the Individual or Organization ("Licensee") accessing
-! ;; and otherwise using this software ("Python") in source or binary
-! ;; form and its associated documentation.
-! ;;
-! ;; 2. Subject to the terms and conditions of this License Agreement,
-! ;; PSF hereby grants Licensee a nonexclusive, royalty-free, world-wide
-! ;; license to reproduce, analyze, test, perform and/or display
-! ;; publicly, prepare derivative works, distribute, and otherwise use
-! ;; Python alone or in any derivative version, provided, however, that
-! ;; PSF's License Agreement and PSF's notice of copyright, i.e.,
-! ;; "Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
-! ;; 2009, 2010 Python Software Foundation; All Rights Reserved" are
-! ;; retained in Python alone or in any derivative version prepared by
-! ;; Licensee.
-! ;;
-! ;; 3. In the event Licensee prepares a derivative work that is based
-! ;; on or incorporates Python or any part thereof, and wants to make
-! ;; the derivative work available to others as provided herein, then
-! ;; Licensee hereby agrees to include in any such work a brief summary
-! ;; of the changes made to Python.
-! ;;
-! ;; 4. PSF is making Python available to Licensee on an "AS IS"
-! ;; basis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
-! ;; IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND
-! ;; DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
-! ;; FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT
-! ;; INFRINGE ANY THIRD PARTY RIGHTS.
-  ;;
-+ ;; 5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
-+ ;; FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A
-+ ;; RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR
-+ ;; ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
-+ ;;
-+ ;; 6. This License Agreement will automatically terminate upon a
-+ ;; material breach of its terms and conditions.
-+ ;;
-+ ;; 7. Nothing in this License Agreement shall be deemed to create any
-+ ;; relationship of agency, partnership, or joint venture between PSF
-+ ;; and Licensee.  This License Agreement does not grant permission to
-+ ;; use PSF trademarks or trade name in a trademark sense to endorse or
-+ ;; promote products or services of Licensee, or any third party.
-+ ;;
-+ ;; 8. By copying, installing or otherwise using Python, Licensee
-+ ;; agrees to be bound by the terms and conditions of this License
-+ ;; Agreement.
-  
-  ;;; Code:
-+ 
-+ (require 'semantic/lex)
-  
-  ;;; Prologue
-  ;;
-***************
-*** 40,46 ****
-  (defconst wisent-python-wy--keyword-table
-    (semantic-lex-make-keyword-table
-     '(("and" . AND)
--      ("as" . AS)
-       ("assert" . ASSERT)
-       ("break" . BREAK)
-       ("class" . CLASS)
---- 85,90 ----
-***************
-*** 78,84 ****
-       ("pass" summary "Statement that does nothing")
-       ("or" summary "Binary logical 'or' operator")
-       ("not" summary "Unary boolean negation operator")
--      ("lambda" summary "Create anonymous function")
-       ("is" summary "Binary operator that tests for object equality")
-       ("in" summary "Part of 'for' statement ")
-       ("import" summary "Load specified modules")
---- 122,127 ----
-***************
-*** 93,103 ****
-       ("elif" summary "Shorthand for 'else if' following an 'if' statement")
-       ("del" summary "Delete specified objects, i.e., undo what assignment did")
-       ("def" summary "Define a new function")
-!      ("continue" summary "Skip to the next iteration of enclosing 'for' or 'while' loop")
-       ("class" summary "Define a new class")
-       ("break" summary "Terminate 'for' or 'while' loop")
-       ("assert" summary "Raise AssertionError exception if <expr> is false")
--      ("as" summary "EXPR as NAME makes value of EXPR available as variable NAME")
-       ("and" summary "Logical AND binary operator ... ")))
-    "Table of language keywords.")
-  
---- 136,145 ----
-       ("elif" summary "Shorthand for 'else if' following an 'if' statement")
-       ("del" summary "Delete specified objects, i.e., undo what assignment did")
-       ("def" summary "Define a new function")
-!      ("continue" summary "Skip to the next interation of enclosing 'for' or 'while' loop")
-       ("class" summary "Define a new class")
-       ("break" summary "Terminate 'for' or 'while' loop")
-       ("assert" summary "Raise AssertionError exception if <expr> is false")
-       ("and" summary "Logical AND binary operator ... ")))
-    "Table of language keywords.")
-  
-***************
-*** 180,186 ****
-      (eval-when-compile
-        (require 'semantic/wisent/comp))
-      (wisent-compile-grammar
-!      '((BACKSLASH NEWLINE INDENT DEDENT INDENT_BLOCK PAREN_BLOCK BRACE_BLOCK BRACK_BLOCK LPAREN RPAREN LBRACE RBRACE LBRACK RBRACK LTLTEQ GTGTEQ EXPEQ DIVDIVEQ DIVDIV LTLT GTGT EXPONENT EQ GE LE PLUSEQ MINUSEQ MULTEQ DIVEQ MODEQ AMPEQ OREQ HATEQ LTGT NE HAT LT GT AMP MULT DIV MOD PLUS MINUS PERIOD TILDE BAR COLON SEMICOLON COMMA ASSIGN BACKQUOTE STRING_LITERAL NUMBER_LITERAL NAME AND AS ASSERT BREAK CLASS CONTINUE DEF DEL ELIF ELSE EXCEPT EXEC FINALLY FOR FROM GLOBAL IF IMPORT IN IS LAMBDA NOT OR PASS PRINT RAISE RETURN TRY WHILE YIELD)
-         nil
-         (goal
-  	((NEWLINE))
---- 222,228 ----
-      (eval-when-compile
-        (require 'semantic/wisent/comp))
-      (wisent-compile-grammar
-!      '((BACKSLASH NEWLINE INDENT DEDENT INDENT_BLOCK PAREN_BLOCK BRACE_BLOCK BRACK_BLOCK LPAREN RPAREN LBRACE RBRACE LBRACK RBRACK LTLTEQ GTGTEQ EXPEQ DIVDIVEQ DIVDIV LTLT GTGT EXPONENT EQ GE LE PLUSEQ MINUSEQ MULTEQ DIVEQ MODEQ AMPEQ OREQ HATEQ LTGT NE HAT LT GT AMP MULT DIV MOD PLUS MINUS PERIOD TILDE BAR COLON SEMICOLON COMMA ASSIGN BACKQUOTE STRING_LITERAL NUMBER_LITERAL NAME AND ASSERT BREAK CLASS CONTINUE DEF DEL ELIF ELSE EXCEPT EXEC FINALLY FOR FROM GLOBAL IF IMPORT IN IS LAMBDA NOT OR PASS PRINT RAISE RETURN TRY WHILE YIELD)
-         nil
-         (goal
-  	((NEWLINE))
-***************
-*** 288,296 ****
-  	((testlist)
-  	 nil))
-         (yield_stmt
-- 	((YIELD)
-- 	 (wisent-raw-tag
-- 	  (semantic-tag-new-code $1 nil)))
-  	((YIELD testlist)
-  	 (wisent-raw-tag
-  	  (semantic-tag-new-code $1 nil))))
---- 330,335 ----
-***************
-*** 331,344 ****
-  	((import_as_name_list COMMA import_as_name)
-  	 nil))
-         (import_as_name
-! 	((NAME as_name_opt)
-  	 nil))
-         (dotted_as_name
-! 	((dotted_name as_name_opt)))
-!        (as_name_opt
-  	(nil)
-! 	((AS NAME)
-! 	 (identity $2)))
-         (dotted_name
-  	((NAME))
-  	((dotted_name PERIOD NAME)
---- 370,383 ----
-  	((import_as_name_list COMMA import_as_name)
-  	 nil))
-         (import_as_name
-! 	((NAME name_name_opt)
-  	 nil))
-         (dotted_as_name
-! 	((dotted_name name_name_opt)))
-!        (name_name_opt
-  	(nil)
-! 	((NAME NAME)
-! 	 nil))
-         (dotted_name
-  	((NAME))
-  	((dotted_name PERIOD NAME)
-***************
-*** 670,676 ****
-     '((parse-stream . wisent-parse-stream)))
-    (setq semantic-parser-name "LALR"
-  	semantic--parse-table wisent-python-wy--parse-table
-! 	semantic-debug-parser-source "python.wy"
-  	semantic-flex-keywords-obarray wisent-python-wy--keyword-table
-  	semantic-lex-types-obarray wisent-python-wy--token-table)
-    ;; Collect unmatched syntax lexical tokens
---- 709,715 ----
-     '((parse-stream . wisent-parse-stream)))
-    (setq semantic-parser-name "LALR"
-  	semantic--parse-table wisent-python-wy--parse-table
-! 	semantic-debug-parser-source "wisent-python.wy"
-  	semantic-flex-keywords-obarray wisent-python-wy--keyword-table
-  	semantic-lex-types-obarray wisent-python-wy--token-table)
-    ;; Collect unmatched syntax lexical tokens
-***************
-*** 680,687 ****
-  
-  
-  ;;; Analyzers
-- ;;
-- (require 'semantic-lex)
-  
-  (define-lex-keyword-type-analyzer wisent-python-wy--<keyword>-keyword-analyzer
-    "keyword analyzer for <keyword> tokens."
---- 719,724 ----
-***************
-*** 757,762 ****
-  ;;; Epilogue
-  ;;
-  
-! (provide 'wisent-python-wy)
-  
-! ;;; wisent-python-wy.el ends here
---- 794,799 ----
-  ;;; Epilogue
-  ;;
-  
-! (provide 'semantic/wisent/python-wy)
-  
-! ;;; semantic/wisent/python-wy.el ends here
--- emacs-23.3a/etc/grammars/grammar.wy	1970-01-01 00:00:00.000000000 +0000
+++ emacs-23.3b/etc/grammars/grammar.wy	2011-11-26 03:32:27.000000000 +0000
@@ -0,0 +1,432 @@
+;;; semantic-grammar.wy -- LALR grammar of Semantic input grammars
+;;
+;; Copyright (C) 2002-2011 Free Software Foundation, Inc.
+;;
+;; Author: David Ponce <david@dponce.com>
+;; Maintainer: David Ponce <david@dponce.com>
+;; Created: 26 Aug 2002
+;; Keywords: syntax
+;; X-RCS: $Id: semantic-grammar.wy,v 1.16 2005/09/30 20:20:27 zappo Exp $
+
+;; This file is part of GNU Emacs.
+
+;; GNU Emacs is free software: you can redistribute it and/or modify
+;; it under the terms of the GNU General Public License as published by
+;; the Free Software Foundation, either version 3 of the License, or
+;; (at your option) any later version.
+
+;; GNU Emacs is distributed in the hope that it will be useful,
+;; but WITHOUT ANY WARRANTY; without even the implied warranty of
+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+;; GNU General Public License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
+
+%{
+  ;; Current parsed nonterminal name.
+  (defvar semantic-grammar-wy--nterm nil)
+  ;; Index of rule in a nonterminal clause.
+  (defvar semantic-grammar-wy--rindx nil)
+  }
+
+%package semantic-grammar-wy
+
+%languagemode wy-mode
+
+;; Main
+%start grammar
+;; Reparse
+%start prologue epilogue declaration nonterminal rule
+;; EXPANDFULL
+%start put_names put_values use_names
+
+;; Keywords
+%type    <keyword>
+%keyword DEFAULT-PREC    "%default-prec"
+%keyword NO-DEFAULT-PREC "%no-default-prec"
+%keyword KEYWORD         "%keyword"
+%keyword LANGUAGEMODE    "%languagemode"
+%keyword LEFT            "%left"
+%keyword NONASSOC        "%nonassoc"
+%keyword PACKAGE         "%package"
+%keyword PREC            "%prec"
+%keyword PUT             "%put"
+%keyword QUOTEMODE       "%quotemode"
+%keyword RIGHT           "%right"
+%keyword SCOPESTART      "%scopestart"
+%keyword START           "%start"
+%keyword TOKEN           "%token"
+%keyword TYPE            "%type"
+%keyword USE-MACROS      "%use-macros"
+
+;; Literals
+%type  <string>
+%token <string>      STRING
+
+%type  <symbol>      syntax ":?\\(\\sw\\|\\s_\\)+"
+%token <symbol>      SYMBOL
+%token <symbol>      PERCENT_PERCENT "\\`%%\\'"
+
+%type  <char>        syntax semantic-grammar-lex-c-char-re
+%token <char>        CHARACTER
+
+%type  <qlist>       matchdatatype sexp syntax "\\s'\\s-*("
+%token <qlist>       PREFIXED_LIST
+
+%type  <sexp>        matchdatatype sexp syntax "\\="
+%token <sexp>        SEXP
+
+;; Don't generate these analyzers which needs special handling code.
+%token <code>        PROLOGUE "%{...%}"
+%token <code>        EPILOGUE "%%...EOF"
+
+;; Blocks & Parenthesis
+%type  <block>
+%token <block>       PAREN_BLOCK "(LPAREN RPAREN)"
+%token <block>       BRACE_BLOCK "(LBRACE RBRACE)"
+%token <open-paren>  LPAREN      "("
+%token <close-paren> RPAREN      ")"
+%token <open-paren>  LBRACE      "{"
+%token <close-paren> RBRACE      "}"
+
+;; Punctuations
+%type  <punctuation>
+%token <punctuation> COLON       ":"
+%token <punctuation> SEMI        ";"
+%token <punctuation> OR          "|"
+%token <punctuation> LT          "<"
+%token <punctuation> GT          ">"
+
+%%
+
+grammar:
+    prologue
+  | epilogue
+  | declaration
+  | nonterminal
+  | PERCENT_PERCENT
+  ;
+
+;;; Prologue/Epilogue
+;;
+prologue:
+    PROLOGUE
+    (CODE-TAG "prologue" nil)
+  ;
+
+epilogue:
+    EPILOGUE
+    (CODE-TAG "epilogue" nil)
+  ;
+
+;;; Declarations
+;;
+declaration:
+    decl
+    (eval $1)
+  ;
+
+decl:
+    default_prec_decl
+  | no_default_prec_decl
+  | languagemode_decl
+  | package_decl
+  | precedence_decl
+  | put_decl
+  | quotemode_decl
+  | scopestart_decl
+  | start_decl
+  | keyword_decl
+  | token_decl
+  | type_decl
+  | use_macros_decl
+  ;
+
+default_prec_decl:
+    DEFAULT-PREC
+    `(TAG "default-prec" 'assoc :value '("t"))
+  ;
+
+no_default_prec_decl:
+    NO-DEFAULT-PREC
+    `(TAG "default-prec" 'assoc :value '("nil"))
+  ;
+
+languagemode_decl:
+    LANGUAGEMODE symbols
+    `(TAG ',(car $2) 'languagemode :rest ',(cdr $2))
+  ;
+
+package_decl:
+    PACKAGE SYMBOL
+    `(PACKAGE-TAG ',$2 nil)
+  ;
+
+precedence_decl:
+    associativity token_type_opt items
+    `(TAG ',$1 'assoc :type ',$2 :value ',$3)
+  ;
+
+associativity:
+    LEFT
+    (progn "left")
+  | RIGHT
+    (progn "right")
+  | NONASSOC
+    (progn "nonassoc")
+  ;
+
+put_decl:
+    PUT put_name put_value
+    `(TAG ',$2 'put :value ',(list $3))
+  | PUT put_name put_value_list
+    `(TAG ',$2 'put :value ',$3)
+  | PUT put_name_list put_value
+    `(TAG ',(car $2) 'put :rest ',(cdr $2) :value ',(list $3))
+  | PUT put_name_list put_value_list
+    `(TAG ',(car $2) 'put :rest ',(cdr $2) :value ',$3)
+  ;
+
+put_name_list:
+    BRACE_BLOCK
+    (mapcar 'semantic-tag-name (EXPANDFULL $1 put_names))
+  ;
+
+put_names:
+    LBRACE
+    ()
+  | RBRACE
+    ()
+  | put_name
+ ;; Must return a list of Semantic tags to EXPANDFULL!
+    (TAG $1 'put-name)
+  ;
+
+put_name:
+    SYMBOL
+  | token_type
+  ;
+
+put_value_list:
+    BRACE_BLOCK
+    (mapcar 'semantic-tag-code-detail (EXPANDFULL $1 put_values))
+  ;
+
+put_values:
+    LBRACE
+    ()
+  | RBRACE
+    ()
+  | put_value
+ ;; Must return a list of Semantic tags to EXPANDFULL!
+    (CODE-TAG "put-value" $1)
+  ;
+
+put_value:
+    SYMBOL any_value
+    (cons $1 $2)
+  ;
+
+scopestart_decl:
+    SCOPESTART SYMBOL
+    `(TAG ',$2 'scopestart)
+  ;
+
+quotemode_decl:
+    QUOTEMODE SYMBOL
+    `(TAG ',$2 'quotemode)
+  ;
+
+start_decl:
+    START symbols
+    `(TAG ',(car $2) 'start :rest ',(cdr $2))
+  ;
+
+keyword_decl:
+    KEYWORD SYMBOL string_value
+    `(TAG ',$2 'keyword :value ',$3)
+  ;
+
+token_decl:
+    TOKEN token_type_opt SYMBOL string_value
+    `(TAG ',$3 ',(if $2 'token 'keyword) :type ',$2 :value ',$4)
+  | TOKEN token_type_opt symbols
+    `(TAG ',(car $3) 'token :type ',$2 :rest ',(cdr $3))
+  ;
+
+token_type_opt:
+ ;; EMPTY
+  | token_type
+  ;
+
+token_type:
+    LT SYMBOL GT
+    (progn $2)
+  ;
+
+type_decl:
+    TYPE token_type plist_opt
+    `(TAG ',$2 'type :value ',$3)
+  ;
+
+plist_opt:
+ ;;EMPTY
+  | plist
+  ;
+
+plist:
+    plist put_value
+    (append (list $2) $1)
+  | put_value
+    (list $1)
+  ;
+
+use_name_list:
+    BRACE_BLOCK
+    (mapcar 'semantic-tag-name (EXPANDFULL $1 use_names))
+  ;
+
+use_names:
+    LBRACE
+    ()
+  | RBRACE
+    ()
+  | SYMBOL
+ ;; Must return a list of Semantic tags to EXPANDFULL!
+    (TAG $1 'use-name)
+  ;
+
+use_macros_decl:
+    USE-MACROS SYMBOL use_name_list
+    `(TAG "macro" 'macro :type ',$2 :value ',$3)
+  ;
+
+string_value:
+    STRING
+    (read $1)
+  ;
+
+;; Return a Lisp readable form
+any_value:
+    SYMBOL
+  | STRING
+  | PAREN_BLOCK
+  | PREFIXED_LIST
+  | SEXP
+  ;
+
+symbols:
+    lifo_symbols
+    (nreverse $1)
+  ;
+
+lifo_symbols:
+    lifo_symbols SYMBOL
+    (cons $2 $1)
+  | SYMBOL
+    (list $1)
+  ;
+
+;;; Grammar rules
+;;
+nonterminal:
+    SYMBOL
+    (setq semantic-grammar-wy--nterm $1
+          semantic-grammar-wy--rindx 0)
+    COLON rules SEMI
+    (TAG $1 'nonterminal :children $4)
+  ;
+
+rules:
+    lifo_rules
+    (apply 'nconc (nreverse $1))
+  ;
+
+lifo_rules:
+    lifo_rules OR rule
+    (cons $3 $1)
+  | rule
+    (list $1)
+  ;
+
+rule:
+    rhs
+    (let* ((nterm semantic-grammar-wy--nterm)
+           (rindx semantic-grammar-wy--rindx)
+           (rhs   $1)
+           comps prec action elt)
+      (setq semantic-grammar-wy--rindx (1+ semantic-grammar-wy--rindx))
+      (while rhs
+        (setq elt (car rhs)
+              rhs (cdr rhs))
+        (cond
+         ;; precedence level
+         ((vectorp elt)
+          (if prec
+              (error "Duplicate %%prec in `%s:%d' rule" nterm rindx))
+          (setq prec (aref elt 0)))
+         ;; action
+         ((consp elt)
+          ;; don't forget that rhs items are in reverse order, so
+          ;; the end-of-rule semantic action is the first item.
+          (if (or action comps)
+              ;; a mid-rule action
+              (setq comps (cons elt comps)
+                    ;; keep rule and action index synchronized
+                    semantic-grammar-wy--rindx
+                    (1+ semantic-grammar-wy--rindx))
+            ;; the end-of-rule action
+            (setq action (car elt))))
+         ;; item
+         (t
+          (setq comps (cons elt comps)))))
+      (EXPANDTAG
+       (TAG (format "%s:%d" nterm rindx) 'rule
+            :type (if comps "group" "empty")
+            :value comps :prec prec :expr action)))
+  ;
+
+rhs:
+ ;; EMPTY
+  | rhs item
+    (cons $2 $1)
+  | rhs action
+    (cons (list $2) $1)
+  | rhs PREC item
+    (cons (vector $3) $1)
+  ;
+
+action:
+    PAREN_BLOCK
+  | PREFIXED_LIST
+  | BRACE_BLOCK
+    (format "(progn\n%s)"
+            (let ((s $1))
+              (if (string-match "^{[\r\n\t ]*" s)
+                  (setq s (substring s (match-end 0))))
+              (if (string-match "[\r\n\t ]*}$" s)
+                  (setq s (substring s 0 (match-beginning 0))))
+              s))
+  ;
+
+items:
+    lifo_items
+    (nreverse $1)
+  ;
+
+lifo_items:
+    lifo_items item
+    (cons $2 $1)
+  | item
+    (list $1)
+  ;
+
+item:
+    SYMBOL
+  | CHARACTER
+  ;
+
+%%
+
+;;; grammar.wy ends here
--- emacs-23.3a/etc/grammars/srecode-template.wy	1970-01-01 00:00:00.000000000 +0000
+++ emacs-23.3b/etc/grammars/srecode-template.wy	2011-11-26 03:32:30.000000000 +0000
@@ -0,0 +1,235 @@
+;;; srecode-template.wy --- Semantic Recoder Template parser
+
+;; Copyright (C) 2005-2011 Free Software Foundation, Inc.
+
+;; Author: Eric Ludlam <zappo@gnu.org>
+;; Keywords: syntax
+;; X-RCS: $Id: srecode-template.wy,v 1.10 2009-01-09 23:01:54 zappo Exp $
+
+;; This file is part of GNU Emacs.
+
+;; GNU Emacs is free software: you can redistribute it and/or modify
+;; it under the terms of the GNU General Public License as published by
+;; the Free Software Foundation, either version 3 of the License, or
+;; (at your option) any later version.
+
+;; GNU Emacs is distributed in the hope that it will be useful,
+;; but WITHOUT ANY WARRANTY; without even the implied warranty of
+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+;; GNU General Public License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
+
+;;; Commentary:
+;;
+;; Parser for the Semantic Recoder template language
+;;
+;; Semantic Recoder templates are based on Google Templates
+;; and are at the bottom of the Semantic Recoder API.
+
+%languagemode  srecode-mode
+
+%start template_file
+
+;;; KEYWORDS
+%type    <keyword>
+%keyword SET  "set"
+%put     SET  summary "set <name> <value>"
+%keyword SHOW "show"
+%put     SHOW summary "show <name>   ; to show a section"
+%keyword MACRO "macro"
+%put     MACRO summary "... macro \"string\" ..."
+%keyword CONTEXT "context"
+%put     CONTEXT summary "context <name>"
+%keyword TEMPLATE  "template"
+%put     TEMPLATE  summary "template <name>\\n <template definition>"
+%keyword SECTIONDICTIONARY "sectiondictionary"
+%put     SECTIONDICTIONARY summary "sectiondictionary <name>\\n <dictionary entries>"
+%keyword PROMPT "prompt"
+%keyword DEFAULT "default"
+%keyword DEFAULTMACRO "defaultmacro"
+%keyword READ "read"
+%put     { PROMPT DEFAULT DEFAULTMACRO READ } summary "prompt <symbol> \"Describe Symbol: \" [default[macro] <lispsym>|\"valuetext\"] [read <lispsym>]"
+%keyword BIND "bind"
+%put     BIND summary "bind \"<letter>\""
+
+;;; Punctuation Types
+%type <punctuation> syntax "\\s.+"
+%type <newline>
+%token <newline> newline
+
+%token <separator> TEMPLATE_BLOCK "^----"
+
+;;; Bland default types
+%type <property> ":\\(\\w\\|\\s_\\)*"
+%token <property> property
+
+%type  <symbol>
+%token <symbol> symbol
+
+%type  <string>
+%token <string> string
+
+%type  <number>
+%token <number> number
+
+%%
+
+template_file
+  : newline ( )
+  | context
+  | prompt
+  | variable
+  | template
+  ;
+
+context
+  : CONTEXT symbol newline
+    (TAG $2 'context)
+  ;
+
+prompt
+  : PROMPT symbol string opt-default-fcn opt-read-fcn newline
+    (TAG $2 'prompt :text (read $3) :default $4 :read $5)
+  ;
+
+opt-default-fcn
+  : DEFAULT symbol
+    (progn (read $2))
+  | DEFAULT string
+    (progn (read $2))
+  | DEFAULTMACRO string
+    (progn (cons 'macro (read $2)))
+  | ()
+  ;
+
+opt-read-fcn
+  : READ symbol
+    (progn (read $2))
+  | ()
+  ;
+
+variable
+  : SET symbol insertable-string-list newline
+    (VARIABLE-TAG $2 nil $3)
+  | SHOW symbol newline
+    (VARIABLE-TAG $2 nil t)
+  ;
+
+insertable-string-list
+  : insertable-string
+    (list $1)
+  | insertable-string-list insertable-string
+    (append $1 (list $2))
+  ;
+
+insertable-string
+  : string
+    (read $1)
+  | MACRO string
+    (cons 'macro (read $2))
+  ;
+
+template
+  : TEMPLATE templatename opt-dynamic-arguments newline
+    opt-string
+    opt-section-dictionaries
+    TEMPLATE_BLOCK newline
+    opt-bind
+    (FUNCTION-TAG $2 nil $3 :documentation $5 :code $7
+		  :dictionaries $6 :binding $9 )
+  ;
+
+templatename
+  : symbol
+  | PROMPT
+  | CONTEXT
+  | TEMPLATE
+  | DEFAULT
+  | MACRO
+  | DEFAULTMACRO
+  | READ
+  | SET
+  ;
+
+opt-dynamic-arguments
+  : property opt-dynamic-arguments
+    (cons $1 $2)
+  | ()
+  ;
+
+opt-string
+  : string newline
+    ( read $1 )
+  | ()
+  ;
+
+opt-section-dictionaries
+  : () ;; EMPTY
+  | section-dictionary-list
+  ;
+
+section-dictionary-list
+  : one-section-dictionary
+    (list $1)
+  | section-dictionary-list one-section-dictionary
+    (append $1 (list $2))
+  ;
+
+one-section-dictionary
+  : SECTIONDICTIONARY string newline
+    variable-list
+    (cons (read $2) $4)
+  ;
+
+variable-list
+  : variable
+    (EXPANDTAG $1)
+  | variable-list variable
+    (append $1 (EXPANDTAG $2))
+  ;
+
+opt-bind
+  : BIND string newline
+    ( read $2 )
+  | ()
+  ;
+
+%%
+(define-lex-simple-regex-analyzer srecode-template-property-analyzer
+  "Detect and create a dynamic argument properties."
+  ":\\(\\w\\|\\s_\\)*" 'property 0)
+
+(define-lex-regex-analyzer srecode-template-separator-block
+  "Detect and create a template quote block."
+  "^----\n"
+  (semantic-lex-push-token
+   (semantic-lex-token
+    'TEMPLATE_BLOCK
+    (match-end 0)
+    (semantic-lex-unterminated-syntax-protection 'TEMPLATE_BLOCK
+      (goto-char (match-end 0))
+      (re-search-forward "^----$")
+      (match-beginning 0))))
+  (setq semantic-lex-end-point (point)))
+
+
+(define-lex wisent-srecode-template-lexer
+  "Lexical analyzer that handles SRecode Template buffers.
+It ignores whitespace, newlines and comments."
+  semantic-lex-newline
+  semantic-lex-ignore-whitespace
+  semantic-lex-ignore-newline
+  semantic-lex-ignore-comments
+  srecode-template-separator-block
+  srecode-template-wy--<keyword>-keyword-analyzer
+  srecode-template-property-analyzer
+  srecode-template-wy--<symbol>-regexp-analyzer
+  srecode-template-wy--<number>-regexp-analyzer
+  srecode-template-wy--<string>-sexp-analyzer
+  srecode-template-wy--<punctuation>-string-analyzer
+  semantic-lex-default-action
+  )
+
+;;; wisent-dot.wy ends here
--- emacs-23.3a/etc/grammars/wisent-grammar.el	2011-07-31 20:36:58.000000000 +0000
+++ emacs-23.3b/etc/grammars/wisent-grammar.el	2011-11-26 03:25:46.000000000 +0000
@@ -358,4 +358,185 @@
     )
   "Semantic grammar macros used in wisent grammars.")
 
+
+(defvar wisent-make-parsers--emacs-license
+  ";; This file is part of GNU Emacs.
+
+;; GNU Emacs is free software: you can redistribute it and/or modify
+;; it under the terms of the GNU General Public License as published by
+;; the Free Software Foundation, either version 3 of the License, or
+;; (at your option) any later version.
+
+;; GNU Emacs is distributed in the hope that it will be useful,
+;; but WITHOUT ANY WARRANTY; without even the implied warranty of
+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+;; GNU General Public License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.")
+
+(defvar wisent-make-parsers--python-license
+  ";; It is derived in part from the Python grammar, used under the
+;; following license:
+;;
+;; PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2
+;; --------------------------------------------
+;; 1. This LICENSE AGREEMENT is between the Python Software Foundation
+;; (\"PSF\"), and the Individual or Organization (\"Licensee\") accessing
+;; and otherwise using this software (\"Python\") in source or binary
+;; form and its associated documentation.
+;;
+;; 2. Subject to the terms and conditions of this License Agreement,
+;; PSF hereby grants Licensee a nonexclusive, royalty-free, world-wide
+;; license to reproduce, analyze, test, perform and/or display
+;; publicly, prepare derivative works, distribute, and otherwise use
+;; Python alone or in any derivative version, provided, however, that
+;; PSF's License Agreement and PSF's notice of copyright, i.e.,
+;; \"Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
+;; 2009, 2010 Python Software Foundation; All Rights Reserved\" are
+;; retained in Python alone or in any derivative version prepared by
+;; Licensee.
+;;
+;; 3. In the event Licensee prepares a derivative work that is based
+;; on or incorporates Python or any part thereof, and wants to make
+;; the derivative work available to others as provided herein, then
+;; Licensee hereby agrees to include in any such work a brief summary
+;; of the changes made to Python.
+;;
+;; 4. PSF is making Python available to Licensee on an \"AS IS\"
+;; basis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
+;; IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND
+;; DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
+;; FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT
+;; INFRINGE ANY THIRD PARTY RIGHTS.
+;;
+;; 5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
+;; FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A
+;; RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR
+;; ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
+;;
+;; 6. This License Agreement will automatically terminate upon a
+;; material breach of its terms and conditions.
+;;
+;; 7. Nothing in this License Agreement shall be deemed to create any
+;; relationship of agency, partnership, or joint venture between PSF
+;; and Licensee.  This License Agreement does not grant permission to
+;; use PSF trademarks or trade name in a trademark sense to endorse or
+;; promote products or services of Licensee, or any third party.
+;;
+;; 8. By copying, installing or otherwise using Python, Licensee
+;; agrees to be bound by the terms and conditions of this License
+;; Agreement.")
+
+(defvar wisent-make-parsers--ecmascript-license
+  "\n;; It is derived from the grammar in the ECMAScript Language
+;; Specification published at
+;;
+;; http://www.ecma-international.org/publications/standards/Ecma-262.htm
+;;
+;; and redistributed under the following license:
+;;
+;; Redistribution and use in source and binary forms, with or without
+;; modification, are permitted provided that the following conditions
+;; are met:
+;;
+;; 1. Redistributions of source code must retain the above copyright
+;; notice, this list of conditions and the following disclaimer.
+;;
+;; 2. Redistributions in binary form must reproduce the above
+;; copyright notice, this list of conditions and the following
+;; disclaimer in the documentation and/or other materials provided
+;; with the distribution.
+;;
+;; 3. Neither the name of the authors nor Ecma International may be
+;; used to endorse or promote products derived from this software
+;; without specific prior written permission.  THIS SOFTWARE IS
+;; PROVIDED BY THE ECMA INTERNATIONAL \"AS IS\" AND ANY EXPRESS OR
+;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+;; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+;; ARE DISCLAIMED. IN NO EVENT SHALL ECMA INTERNATIONAL BE LIABLE FOR
+;; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+;; OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+;; BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+;; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
+;; USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+;; DAMAGE.")
+
+(defvar wisent-make-parsers--parser-file-name
+  `(("semantic-grammar-wy.el"
+     "semantic/grammar-wy")
+    ("srecode-template-wy.el"
+     "srecode/srt-wy")
+    ("wisent-javascript-jv-wy.el"
+     "semantic/wisent/js-wy"
+     "Copyright (C) 1998-2011 Ecma International"
+     ,wisent-make-parsers--ecmascript-license)
+    ("wisent-java-tags-wy.el"
+     "semantic/wisent/javat-wy")
+    ("wisent-python-wy.el"
+     "semantic/wisent/python-wy"
+     "Copyright (C) 2001-2010 Python Software Foundation"
+     ,wisent-make-parsers--python-license)))
+
+(defun wisent-make-parsers ()
+  "Generate Emacs' built-in Wisent-based parser files."
+  (semantic-mode 1)
+  ;; Loop through each .wy file in current directory, and run
+  ;; `semantic-grammar-batch-build-one-package' to build the grammar.
+  (dolist (f (directory-files default-directory nil ".wy$"))
+    (let ((packagename
+           (condition-case err
+               (with-current-buffer (find-file-noselect f)
+                 (semantic-grammar-create-package))
+             (error (message "%s" (error-message-string err)) nil)))
+	  output-data)
+      (when (setq output-data (assoc packagename wisent-make-parsers--parser-file-name))
+	(let ((require-name         (nth 1 output-data))
+	      (additional-copyright (nth 2 output-data))
+	      (additional-license   (nth 3 output-data))
+	      copyright-end)
+	  ;; Touch up the generated parsers for Emacs integration.
+	  (with-temp-buffer
+	    (insert-file-contents packagename)
+	    (setq buffer-file-name (expand-file-name packagename))
+	    ;; Fix copyright header:
+	    (goto-char (point-min))
+	    (when additional-copyright
+	      (re-search-forward "Copyright (C).*$")
+	      (insert "\n;; " additional-copyright))
+	    (re-search-forward "^;; Author:")
+	    (setq copyright-end (match-beginning 0))
+	    (re-search-forward "^;;; Code:\n")
+	    (delete-region copyright-end (match-end 0))
+	    (goto-char copyright-end)
+	    (insert wisent-make-parsers--emacs-license)
+	    (insert "\n\n;;; Commentary:
+;;
+;; This file was generated from etc/grammars/"
+			f ".")
+	    (when additional-license
+	      (insert "\n" additional-license))
+	    (insert "\n\n;;; Code:\n
+\(require 'semantic/lex)\n")
+	    (goto-char (point-min))
+	    (delete-region (point-min) (line-end-position))
+	    (insert ";;; " require-name
+		    ".el --- Generated parser support file")
+	    (delete-trailing-whitespace)
+	    (re-search-forward ";;\n(require 'semantic-lex)\n")
+	    (delete-region (match-beginning 0) (match-end 0))
+	    ;; Fix footer:
+	    (goto-char (point-max))
+	    (re-search-backward "^(provide")
+	    (delete-region (match-beginning 0) (point-max))
+	    (goto-char (point-max))
+	    (insert "(provide '" require-name ")\n\n")
+	    (insert ";;; " require-name ".el ends here\n")
+	    (let ((make-backup-files nil))
+	      (save-buffer))))))))
+
+
+
 ;;; wisent-grammar.el ends here
