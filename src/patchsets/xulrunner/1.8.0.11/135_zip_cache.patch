#! /bin/sh /usr/share/dpatch/dpatch-run
## 35_zip_cache.dpatch by Mike Hommey <glandium@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Invalidate cache for a zip file that got modified. It will prevent
## DP: corruption of the XUL FastLoad cache when upgrade is performed
## DP: while an instance of the application is running. bz#368428.

@DPATCH@

--- iceape/modules/libjar/nsJAR.h
+++ iceape/modules/libjar/nsJAR.h
@@ -117,6 +117,10 @@
       mCache = cache;
     }
 
+    PRInt64 GetMtime() {
+      return mMtime;
+    }
+
     PRFileDesc* OpenFile();
   protected:
     //-- Private data members
@@ -131,6 +135,7 @@
 	PRLock*					 mLock;	
     PRInt32                  mTotalItemsInManifest;
     PRFileDesc*              mFd;
+    PRInt64                  mMtime;
     
     //-- Private functions
     nsresult ParseManifest(nsISignatureVerifier* verifier);
--- iceape/modules/libjar/nsJAR.cpp
+++ iceape/modules/libjar/nsJAR.cpp
@@ -214,6 +214,7 @@
 nsJAR::Init(nsIFile* zipFile)
 {
   mZipFile = zipFile;
+  zipFile->GetLastModifiedTime(&mMtime);
   mLock = PR_NewLock();
   return mLock ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
 }
@@ -1216,15 +1217,24 @@
   rv = zipFile->GetNativePath(path);
   if (NS_FAILED(rv)) return rv;
 
+  PRInt64 Mtime;
+  rv = zipFile->GetLastModifiedTime(&Mtime);
+  if (NS_FAILED(rv)) return rv;
+
   nsCStringKey key(path);
   nsJAR* zip = NS_STATIC_CAST(nsJAR*, NS_STATIC_CAST(nsIZipReader*,mZips.Get(&key))); // AddRefs
-  if (zip) {
+  if (zip && LL_EQ(Mtime, zip->GetMtime())) {
 #ifdef ZIP_CACHE_HIT_RATE
     mZipCacheHits++;
 #endif
     zip->ClearReleaseTime();
   }
   else {
+    if (zip) {
+      lock.unlock();
+      mZips.Remove(&key);
+      lock.lock();
+    }
     zip = new nsJAR();
     if (zip == nsnull)
         return NS_ERROR_OUT_OF_MEMORY;
