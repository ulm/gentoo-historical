diff -urN netcat-110/README.aes-netcat netcat-110.aes/README.aes-netcat
--- netcat-110/README.aes-netcat	1969-12-31 19:00:00.000000000 -0500
+++ netcat-110.aes/README.aes-netcat	2004-05-05 17:08:34.117308272 -0400
@@ -0,0 +1,163 @@
+-----BEGIN PGP SIGNED MESSAGE-----
+
+
+			Netcat 1.10 AES encryption patch
+		     (Patch version 2 - the working one =P)
+		      (c) Mixter <mixter@newyorkoffice.com>
+
+With this patch for netcat you will be able to run secure encrypted netcat
+sessions. Both server and client must run this version of netcat with the
+same password set. I found AES suitable for this kind of encryption, because
+it uses symmetric keys (same key on both sides) and is the next generation
+strong encryption standard. You can chose between five AES candidates:
+cast256 (default), mars, saferp, twofish, rijndael (winning aes algorithm).
+
+This distribution contains:
+
+* modified version of netcat v110
+* netcat-patch.diff - the patch to see the changes
+
+Installing:
+
+* Type 'make your-os-name'. That should do it.
+
+Usage:
+
+Secure netcat behaves just like the normal netcat. When you want to
+encrypt a session, type nc -k <password> <options> <host> <ip>
+To start a listening server, simply nc -k password -l -p port
+Lets say, Saddam wants to tell John something and they both know
+that the password is 'iraq'.
+John does a 'nc -k iraq -l 123', and Saddam would do a
+'echo i want to kill the president|nc -k iraq johns.host.com 123'.
+
+To select a different crypto algorithm, just add the option -A
+to the command line, followed by "mars" "saferp" "twofish"
+"rijndael" or "cast256".
+
+Changes:
+
+- - I've decided to use LibMix for aes-netcat, which I originally started
+developing because of this project. This should make things more easier
+and comfortable.
+- - It actually works now. The previous release had a non-implemented
+setkey() function, which, well, which caused it not to actually encrypt
+the data. ;/ Many thanks to bind@subterrain.net for finding this error!
+- - You can now select your algorithm at the command line.
+
+Caveats:
+
+- - Secure netcat can also be used with -e argument (program execution
+after connection), however, it does this by execve() and it would be
+quite complicated to do transparent de-/encryption. Therefore, you should
+only execute programs with -k -e that handle the encryption. To code such
+programs, include base64.h, aes.h and your algorithm, setkey() a password
+and then simply encode64() everything sent to stdout, and decode64()
+everything received from stdin.
+- - The current public aes algorithms are distributed for evaluation
+purposes only. Endian conversions (on big endian architectures) should
+generally work, but are not guaranteed to.
+
+My cute legal disclaimer:
+
+THIS SOFTWARE IS MADE AVAILABLE "AS IS", AND THE AUTHOR DISCLAIMS ALL
+WARRANTIES, EXPRESS OR IMPLIED, WITH REGARD TO THIS SOFTWARE, INCLUDING
+WITHOUT LIMITATION ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+FOR A PARTICULAR PURPOSE, AND IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
+RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
+CONTRACT, TORT (INCLUDING NEGLIGENCE) OR STRICT LIABILITY, ARISING OUT OF
+OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+
+The original netcat can be found at these great places:
+
+http://www.l0pht.com/users/10pht/nc110.tgz
+http://packetstorm.securify.com/UNIX/netcat
+ftp://ftp.technotronic.com
+ftp://avian.org:/src/hacks/nc110.tgz
+ftp://zippy.telcom.arizona.edu:/pub/mirrors/avian.org/hacks/nc110.tgz
+ftp://ftp.sterling.com:/mirrors/avian.org/src/hacks/nc110.tgz
+ftp://coast.cs.purdue.edu:/pub/tools/unix/netcat/nc110.tgz
+ftp://ftp.rge.com:/pub/security/coast/mirrors/avian.org/netcat/nc110.tgz
+
+Checksums:
+
+330ffaaaac7d40e36bb63740fded5c01  Changelog
+527af8c03a54e97f049667d8e6bbe8de  Makefile
+f1557018bf57b2ca74c68d44c03ddd91  README.netcat
+03f2a43f230d5139aa21cd55ba7f1d8c  generic.h
+bd87ff3d66e832692c48a2935269c2a9  netcat-patch.diff
+9faa53dcf7446e40bbe72706c1ec3226  netcat.blurb
+91723969e18ff3ea2675a3f6afd06753  netcat.c
+0db440646515384cbfd94a235a90f3ed  stupidh
+6ab8dee297f6e8d84061d848a68cfa4e  data/Makefile
+3d26e127b9691586d6a80f736ab461c2  data/README
+c7aae64a82d56171225c64892a291366  data/data.c
+450cf107e0ff9aec8025d058a7502c79  data/dns-any.d
+e181220d9394b28982b20ecbb484e019  data/nfs-0.d
+cc82f9ecc16219019860a907b595cfd2  data/pm.d
+f7a39541dc2422ccbbbb2e2154208926  data/pmap-dump.d
+f3d280c86c2121b03df1e08b97e13091  data/pmap-mnt.d
+68f9547b38b241cdef32c7ec558b3293  data/rip.d
+bddf26f2c1029936692f8bcd8bd5262d  data/rservice.c
+08bc597b20299be9241ef13763b27ed7  data/showmount.d
+7c641a3ad03f05c19645c1369dffea23  data/xor.c
+17972f07d3d93db5c4a02689d972a75d  libmix/Makefile.in
+9423e1a7c863db3cfbf7b5ebbfac321d  libmix/acconfig.h
+5b073ef881a70ea40f56e6612616ba9b  libmix/configure
+fa1a11b06ad83aa31ef1abb873fc34ef  libmix/configure.in
+5afe8eb5573965dfb58378e4e46f3813  libmix/install-sh
+09339689908aa4ad3d20eaa3f9c43c0f  libmix/libmix.3
+4cf0130f0b33f87bceab502cdca47bd2  libmix/libtest.c
+cb58a9da1e68f13d997c9eef70afa2ac  libmix/md5.sh
+5413b15cbbc1fb54ef472f86e7bc78da  scripts/README
+544c19da387112fa40ca7926e77aeb1b  scripts/alta
+6f15c855fff0cdeeb8c08ab7e2c28b60  scripts/bsh
+e319e17eb956b8a4c65d5582584ba0bb  scripts/dist.sh
+8c787e1a2a17d235a39b95c3d29daf9a  scripts/irc
+a8ec4e32660d14c1df15498e7b890c41  scripts/iscan
+fa679307322bb3f379877b19afd116ac  scripts/ncp
+430a1b955ad2da1fc053985423a52f17  scripts/probe
+04b7816212812a57e24e7e0dfa142088  scripts/web
+393193b684e0efb135e8459aecf6900b  scripts/webproxy
+eb3bcb13d36395d0b09a3ef66b2ca2ff  scripts/webrelay
+f1570f4c5cc27216ad800e7bf023c4d3  scripts/websearch
+f5d8281d11a320e178a7c060f3811ac1  libmix/aes/aes.c
+46951b0206212bbee0c7d8c493737021  libmix/aes/cast-256.c
+2b30173d1775ecb42fab4f2193c59909  libmix/aes/mars.c
+acf937c0f135163bb85a23cf7eb31e3e  libmix/aes/md5.c
+8e17326e5346d58fbc96691610f9ea12  libmix/aes/rijndael.c
+b69b95c913664a9229eb5b7f8d21b964  libmix/aes/saferp.c
+31e662d969885e75832e6c1667da007a  libmix/aes/twofish.c
+6e79e651c06d31fc5131418a666168e2  libmix/misc/exclude.c
+7d49792599df9ae873b7c2714e8687f7  libmix/misc/misc.c
+0a50238653a825ecf9af51b5339d5d71  libmix/mix/aes.h
+bd6f388c10cdfd986a19e8c07ba9f1a3  libmix/mix/lmconfig.h.in
+93a265ec508e500468c729a4cc728294  libmix/mix/misc.h
+48a4f18b800b721899d7c21ebf65b4cd  libmix/mix/mix.h
+d4fa27296f9809580758bb8af0df58f6  libmix/mix/net.h.in
+0a50238653a825ecf9af51b5339d5d71  libmix/mixnc/aes.h
+bd6f388c10cdfd986a19e8c07ba9f1a3  libmix/mixnc/lmconfig.h.in
+93a265ec508e500468c729a4cc728294  libmix/mixnc/misc.h
+48a4f18b800b721899d7c21ebf65b4cd  libmix/mixnc/mix.h
+d4fa27296f9809580758bb8af0df58f6  libmix/mixnc/net.h.in
+7c18399150a24cd8bf5a31949d70975d  libmix/net/net.c
+b0e4b486978106d7be410dee6af11b9b  libmix/test/ipaddr.txt
+98af3cfb69e900fddd4242f183e73e37  libmix/test/libtest2.c
+
+Have fun,
+
+Mixter <mixter@newyorkoffice.com>
+http://mixter.warrior2k.com
+-----BEGIN PGP SIGNATURE-----
+Version: GnuPG v1.0.4 (GNU/Linux)
+Comment: For info see http://www.gnupg.org
+
+iQEVAwUBOjJ3wLdkBvUb0vPhAQFWYAf+M/5DzBMcDCGLrRyyZ4oIbvszUbAqhNsP
+WCE0+NliAsTu2plaZOeULhB/FwxU5jnyeJOnydEjXZh88JMQ3edLjQNaLSl9HCIs
+0ARa1zLDJi0vC92+ThryhFvb1odVwCp9JVojQpjPiFUAWcQSSBy0XdnacqIaBish
+C6xNtWXcQgJDmFVKKlEe2Dql7N2E5pW7FbHlRx0HSKvoIG/MXHMJoTugUdRD5YqP
+0m8oo8cPDZOwc78FQRJKfr7//5ZBjvlXoMty+Vbx89+jQBC8W45jcGMnnM7p3Vbc
+cylA+UJtVD5K1lqGhSgpvh4EC5THDxD3IivjH3przWwJQd4+9gUFxQ==
+=LhXs
+-----END PGP SIGNATURE-----
diff -urN netcat-110/netcat.c netcat-110.aes/netcat.c
--- netcat-110/netcat.c	2004-05-05 17:08:15.881080600 -0400
+++ netcat-110.aes/netcat.c	2004-05-05 17:36:20.805933088 -0400
@@ -35,6 +35,12 @@
 #define HAVE_HELP		/* undefine if you dont want the help text */
 /* #define ANAL			/* if you want case-sensitive DNS matching */
 
+#ifdef AESCRYPT
+#include <mix/mix.h>
+#ifndef HAVE_STDLIB_H
+#define HAVE_STDLIB_H 1
+#endif
+#endif
 #ifdef HAVE_STDLIB_H
 #include <stdlib.h>
 #else
@@ -100,6 +106,10 @@
 #define USHORT unsigned short	/* use these for options an' stuff */
 #define BIGSIZ 8192		/* big buffers */
 
+#ifdef AESCRYPT
+int krypton;
+#endif
+
 #ifndef INADDR_NONE
 #define INADDR_NONE 0xffffffff
 #endif
@@ -1761,6 +1771,17 @@
 	return (1);
     }
     if (rnleft) {
+#ifdef AESCRYPT
+          if (krypton)
+            {
+              char *tp = (char *)aes_decrypt((const s1byte *)np, rnleft);
+              if(write (1, tp, strlen (tp))<0) exit(1337);
+              memset(np,0,strlen(np));
+              free(tp);
+              rr = rnleft;
+            }
+          else
+#endif
 	rr = write (1, np, rnleft);
 	if (rr > 0) {
 	  if (o_wfile)
@@ -1776,6 +1797,18 @@
 	  rr = findline (zp, rzleft);
 	else
 	  rr = rzleft;
+#ifdef AESCRYPT
+          if (krypton && rr)
+            {
+              /* int tlen = rr; */
+              int tlen = strlen(zp);
+              char *tp = (char *)aes_encrypt((const u1byte *)zp,&tlen);
+              if(write (fd, tp, tlen)<0) exit(1337);
+              memset(zp,0,strlen(zp));
+              free(tp);
+            }
+          else
+#endif
 	rr = write (fd, zp, rr);	/* one line, or the whole buffer */
 	if (rr > 0) {
 	  if (o_wfile)
@@ -1918,7 +1951,7 @@
 
 /* If your shitbox doesn't have getopt, step into the nineties already. */
 /* optarg, optind = next-argv-component [i.e. flag arg]; optopt = last-char */
-  while ((x = getopt (argc, argv, "46abc:e:g:G:hi:lno:p:q:rs:tuvw:z")) != EOF) {
+  while ((x = getopt (argc, argv, "46A:abc:e:g:G:hi:k:lno:p:q:rs:tuvw:z")) != EOF) {
 /* Debug (("in go: x now %c, optarg %x optind %d", x, optarg, optind)) */
     switch (x) {
 #ifdef INET6
@@ -1968,6 +2001,47 @@
 	if (! o_interval)
 	  bail ("invalid interval time %s", optarg);
 	break;
+#ifdef AESCRYPT
+      case 'A':
+        if (!strcasecmp(optarg,"cast256"))
+        { 
+         alg = CAST256;
+         break;
+        }
+        if (!strcasecmp(optarg,"mars"))
+        { 
+         alg = MARS;
+         break;
+        }
+        if (!strcasecmp(optarg,"saferp"))
+        { 
+         alg = SAFERP;
+         break;
+        }
+        if (!strcasecmp(optarg,"twofish"))
+        { 
+         alg = TWOFISH;
+         break;
+        }
+        if (!strcasecmp(optarg,"rijndael"))
+        { 
+         alg = RIJNDAEL;
+         break;
+        }
+        bail("invalid algorithm selected");
+        break;
+      case 'k':
+          aes_key (optarg);
+          {
+           /* lets see, do we want our passwords to show
+              up in the process table...? hmm, nope */
+          int i;
+          for (i=strlen(optarg);i>=0;i--)
+             optarg[i] = '\0';
+          }
+          krypton++;
+          break;
+#endif
       case 'l':				/* listen mode */
 	o_listen++; break;
       case 'n':				/* numeric-only, no DNS lookups */
@@ -2248,6 +2322,12 @@
   holler ("\
 	-e prog			program to exec after connect [dangerous!!]");
 #endif
+#ifdef AESCRYPT
+   holler ("\
+	-A algorithm		cast256, mars, saferp, twofish, or rijndael");
+   holler ("\
+ 	-k password		AES encrypt and ascii armor session");
+#endif
   holler ("\
 	-b			allow broadcasts\n\
 	-g gateway		source-routing hop point[s], up to 8\n\
