Index: virtinst-0.300.3-2ubuntu1/virtinst/cli.py
===================================================================
--- virtinst-0.300.3-2ubuntu1.orig/virtinst/cli.py	2008-05-01 03:50:44.000000000 +0200
+++ virtinst-0.300.3-2ubuntu1/virtinst/cli.py	2008-05-02 10:20:03.261364155 +0200
@@ -205,6 +205,7 @@
     else:
         print >> sys.stderr, _("Unknown network type ") + network
         sys.exit(1)
+    n.virtio = guest.get_virtio_net()
     guest.nics.append(n)
 
 def digest_networks(macs, bridges, networks):
Index: virtinst-0.300.3-2ubuntu1/virtinst/FullVirtGuest.py
===================================================================
--- virtinst-0.300.3-2ubuntu1.orig/virtinst/FullVirtGuest.py	2008-05-02 10:14:16.041362260 +0200
+++ virtinst-0.300.3-2ubuntu1/virtinst/FullVirtGuest.py	2008-05-02 10:21:12.285819315 +0200
@@ -35,6 +35,8 @@
                             "apic": True, \
                             "clock": "utc",\
                             "continue": False, \
+                            "virtio_blk": False, \
+                            "virtio_net": False, \
                             "input": [ "mouse", "ps2"],
                             "variants": { "rhel2.1": { "label": "Red Hat Enterprise Linux 2.1", "distro": "rhel" }, \
                                           "rhel3": { "label": "Red Hat Enterprise Linux 3", "distro": "rhel" }, \
@@ -49,6 +51,7 @@
                                           "debianLenny": { "label": "Debian Lenny", "distro": "debian" }, \
                                           "generic24": { "label": "Generic 2.4.x kernel" }, \
                                           "generic26": { "label": "Generic 2.6.x kernel" }, \
+                                          "ubuntuHardy": { "label": "Ubuntu Hardy", "distro": "ubuntu", "virtio_blk" : False, "virtio_net" : True }, \
                                           }, \
                             }, \
                  "windows": { "label": "Windows", \
@@ -175,6 +178,36 @@
                     features[f] = True
         return features
 
+    def get_virtio_net(self):
+        """Determine the guest virtio network capabilities, based on the 
+           OS_TYPE and OS_VARIANT"""
+
+        # virtio only supported on kvm
+        if self.installer.get_type() != "kvm":
+            return False
+
+        if self.os_type is not None:
+            if self.os_variant is not None and FullVirtGuest.OS_TYPES[self.os_type]["variants"][self.os_variant].has_key("virtio_net"):
+                return FullVirtGuest.OS_TYPES[self.os_type]["variants"][self.os_variant]["virtio_net"]
+            elif self.os_variant is not None and FullVirtGuest.OS_TYPES[self.os_type].has_key("virtio_net"):
+                return FullVirtGuest.OS_TYPES[self.os_type]["virtio_net"]
+        return False
+
+    def get_virtio_blk(self):
+        """Determine the guest virtio block device capabilities, based on the
+           OS_TYPE and OS_VARIANT"""
+
+        # virtio only supported on kvm
+        if self.installer.get_type() != "kvm":
+            return False
+
+        if self.os_type is not None:
+            if self.os_variant is not None and FullVirtGuest.OS_TYPES[self.os_type]["variants"][self.os_variant].has_key("virtio_blk"):
+                return FullVirtGuest.OS_TYPES[self.os_type]["variants"][self.os_variant]["virtio_blk"]
+            elif self.os_variant is not None and FullVirtGuest.OS_TYPES[self.os_type].has_key("virtio_blk"):
+                return FullVirtGuest.OS_TYPES[self.os_type]["virtio_blk"]
+        return False
+
     def get_os_distro(self):
         if self.os_type is not None and self.os_variant is not None and "distro" in FullVirtGuest.OS_TYPES[self.os_type]["variants"][self.os_variant]:
             return FullVirtGuest.OS_TYPES[self.os_type]["variants"][self.os_variant]["distro"]
Index: virtinst-0.300.3-2ubuntu1/virtinst/Guest.py
===================================================================
--- virtinst-0.300.3-2ubuntu1.orig/virtinst/Guest.py	2008-05-02 10:14:24.681362236 +0200
+++ virtinst-0.300.3-2ubuntu1/virtinst/Guest.py	2008-05-02 10:20:03.265363665 +0200
@@ -183,7 +183,11 @@
             ret += "      <source %(typeattr)s='%(disk)s'/>\n" % { "typeattr": typeattr, "disk": path }
         if self.target is not None:
             disknode = self.target
-        ret += "      <target dev='%(disknode)s'/>\n" % { "disknode": disknode }
+        if hasattr(self, 'virtio') and self.virtio:
+            disknode = 'v' + disknode[1:]
+            ret += "      <target dev='%(disknode)s' bus='virtio'/>\n" % { "disknode": disknode }
+        else:
+            ret += "      <target dev='%(disknode)s'/>\n" % { "disknode": disknode }
         if self.read_only:
             ret += "      <readonly/>\n"
         ret += "    </disk>\n"
@@ -339,23 +343,26 @@
 
     def get_xml_config(self):
         if self.type == "bridge":
-            return ("    <interface type='bridge'>\n" + \
+            ret =  ("    <interface type='bridge'>\n" + \
                     "      <source bridge='%(bridge)s'/>\n" + \
-                    "      <mac address='%(mac)s'/>\n" + \
-                    "    </interface>\n") % \
+                    "      <mac address='%(mac)s'/>\n") % \
                     { "bridge": self.bridge, "mac": self.macaddr }
         elif self.type == "network":
-            return ("    <interface type='network'>\n" + \
+            ret =  ("    <interface type='network'>\n" + \
                     "      <source network='%(network)s'/>\n" + \
-                    "      <mac address='%(mac)s'/>\n" + \
-                    "    </interface>\n") % \
+                    "      <mac address='%(mac)s'/>\n") % \
                     { "network": self.network, "mac": self.macaddr }
         elif self.type == "user":
-            return ("    <interface type='user'>\n" + \
-                    "      <mac address='%(mac)s'/>\n" + \
-                    "    </interface>\n") % \
+            ret =  ("    <interface type='user'>\n" + \
+                    "      <mac address='%(mac)s'/>\n") % \
                     { "mac": self.macaddr }
 
+        if hasattr(self, 'virtio') and self.virtio:
+            ret += "      <model type='virtio'/>\n"
+
+        ret += "    </interface>\n"
+        return ret
+
     def countMACaddr(self, vms):
         count = 0
         for vm in vms:
Index: virtinst-0.300.3-2ubuntu1/virt-install
===================================================================
--- virtinst-0.300.3-2ubuntu1.orig/virt-install	2008-05-01 03:50:43.000000000 +0200
+++ virtinst-0.300.3-2ubuntu1/virt-install	2008-05-02 10:20:03.269433786 +0200
@@ -73,6 +73,7 @@
             if d.type == virtinst.VirtualDisk.TYPE_FILE \
                and not(hvm) and virtinst.util.is_blktap_capable():
                 d.driver_name = virtinst.VirtualDisk.DRIVER_TAP
+            d.virtio = guest.get_virtio_blk()
         except ValueError, e:
             print _("ERROR: "), e
             disk = size = None
@@ -402,6 +403,11 @@
     if type == "xen":
         cli.get_cpuset(options.cpuset, guest)
 
+    if hvm and options.os_type is not None:
+        guest.set_os_type(options.os_type)
+        if options.os_variant is not None:
+            guest.set_os_variant(options.os_variant)
+
     # set up disks
     get_disks(options.diskfile, options.disksize, options.sparse, options.nodisks,
               guest, hvm, conn)
@@ -424,10 +430,6 @@
             guest.features["acpi"] = False
         if options.noapic:
             guest.features["apic"] = False
-        if options.os_type is not None:
-            guest.set_os_type(options.os_type)
-            if options.os_variant is not None:
-                guest.set_os_variant(options.os_variant)
         continue_inst = guest.get_continue_inst()
 
     def show_console(dom):
