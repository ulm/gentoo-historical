diff -Naur boost_1_35_0.orig/boost/archive/polymorphic_iarchive.hpp boost_1_35_0/boost/archive/polymorphic_iarchive.hpp
--- boost_1_35_0.orig/boost/archive/polymorphic_iarchive.hpp	2008-04-24 16:00:51.000000000 +0200
+++ boost_1_35_0/boost/archive/polymorphic_iarchive.hpp	2008-04-24 16:05:15.000000000 +0200
@@ -17,6 +17,7 @@
 //  See http://www.boost.org for updates, documentation, and revision history.
 
 #include <cstddef> // std::size_t
+#include <climits> // ULONG_MAX 
 #include <boost/config.hpp>
 
 #if defined(BOOST_NO_STDC_NAMESPACE)
@@ -38,9 +39,16 @@
 // i.e. that its not a synonym for (unsigned) long
 // if there is no 64 bit int or if its the same as a long
 // we shouldn't define separate functions for int64 data types.
-#if defined(BOOST_NO_INT64_T) \
-    || (ULONG_MAX != 0xffffffff && ULONG_MAX == 18446744073709551615u) // 2**64 - 1
-#   define BOOST_NO_INTRINSIC_INT64_T
+#if defined(BOOST_NO_INT64_T)
+    #define BOOST_NO_INTRINSIC_INT64_T
+#else 
+    #if defined(ULONG_MAX)
+        #if(ULONG_MAX != 0xffffffff && ULONG_MAX == 18446744073709551615u) // 2**64 - 1
+            #define BOOST_NO_INTRINSIC_INT64_T
+        #endif
+    #else 
+        #define BOOST_NO_INTRINSIC_INT64_T
+    #endif
 #endif
 
 namespace boost {
@@ -123,7 +131,7 @@
         load_end(t.name());
     }
 protected:
-    virtual ~polymorphic_iarchive_impl(){}
+    virtual ~polymorphic_iarchive_impl(){};
 public:
     // utility function implemented by all legal archives
     virtual void set_library_version(unsigned int archive_library_version) = 0;
@@ -166,7 +174,10 @@
 class polymorphic_iarchive : 
     public polymorphic_iarchive_impl,
     public detail::shared_ptr_helper
-{};
+{
+public:
+    virtual ~polymorphic_iarchive(){};
+};
 
 } // namespace archive
 } // namespace boost
diff -Naur boost_1_35_0.orig/boost/archive/polymorphic_oarchive.hpp boost_1_35_0/boost/archive/polymorphic_oarchive.hpp
--- boost_1_35_0.orig/boost/archive/polymorphic_oarchive.hpp	2008-04-24 16:00:51.000000000 +0200
+++ boost_1_35_0/boost/archive/polymorphic_oarchive.hpp	2008-04-24 16:04:41.000000000 +0200
@@ -17,6 +17,7 @@
 //  See http://www.boost.org for updates, documentation, and revision history.
 
 #include <cstddef> // size_t
+#include <climits> // ULONG_MAX 
 #include <string>
 
 #include <boost/config.hpp>
@@ -37,9 +38,16 @@
 // i.e. that its not a synonym for (unsigned) long
 // if there is no 64 bit int or if its the same as a long
 // we shouldn't define separate functions for int64 data types.
-#if defined(BOOST_NO_INT64_T) \
-    || (ULONG_MAX != 0xffffffff && ULONG_MAX == 18446744073709551615u) // 2**64 - 1
-#   define BOOST_NO_INTRINSIC_INT64_T
+#if defined(BOOST_NO_INT64_T)
+    #define BOOST_NO_INTRINSIC_INT64_T
+#else 
+    #if defined(ULONG_MAX)
+        #if(ULONG_MAX != 0xffffffff && ULONG_MAX == 18446744073709551615u) // 2**64 - 1
+            #define BOOST_NO_INTRINSIC_INT64_T
+        #endif
+    #else 
+        #define BOOST_NO_INTRINSIC_INT64_T
+    #endif
 #endif
 
 namespace boost {
@@ -123,7 +131,7 @@
         save_end(t.name());
     }
 protected:
-    virtual ~polymorphic_oarchive_impl(){}
+    virtual ~polymorphic_oarchive_impl(){};
 public:
     // utility functions implemented by all legal archives
     virtual unsigned int get_flags() const = 0;
@@ -143,7 +151,10 @@
 // note: preserve naming symmetry
 class polymorphic_oarchive : 
     public polymorphic_oarchive_impl
-{};
+{
+public:
+    virtual ~polymorphic_oarchive(){};
+};
 
 } // namespace archive
 } // namespace boost
diff -Naur boost_1_35_0.orig/boost/gil/algorithm.hpp boost_1_35_0/boost/gil/algorithm.hpp
--- boost_1_35_0.orig/boost/gil/algorithm.hpp	2008-04-24 16:00:47.000000000 +0200
+++ boost_1_35_0/boost/gil/algorithm.hpp	2008-04-24 16:09:51.000000000 +0200
@@ -16,9 +16,11 @@
 
 #include <cassert>
 #include <cstddef>
+#include <cstring>
 #include <algorithm>
 #include <iterator>
 #include <memory>
+#include <typeinfo>
 #include "gil_config.hpp"
 #include "gil_concept.hpp"
 #include "color_base_algorithm.hpp"
@@ -31,7 +33,7 @@
 /// \brief Some basic STL-style algorithms when applied to image views
 /// \author Lubomir Bourdev and Hailin Jin \n
 ///         Adobe Systems Incorporated
-/// \date   2005-2007 \n Last updated on May 6, 2007
+/// \date   2005-2008 \n Last updated on March 12, 2008
 ///
 ////////////////////////////////////////////////////////////////////////////////////////
 
diff -Naur boost_1_35_0.orig/boost/gil/bit_aligned_pixel_reference.hpp boost_1_35_0/boost/gil/bit_aligned_pixel_reference.hpp
--- boost_1_35_0.orig/boost/gil/bit_aligned_pixel_reference.hpp	2008-04-24 16:00:47.000000000 +0200
+++ boost_1_35_0/boost/gil/bit_aligned_pixel_reference.hpp	2008-04-24 16:09:01.000000000 +0200
@@ -121,7 +121,7 @@
           bool IsMutable>
 struct bit_aligned_pixel_reference {
     BOOST_STATIC_CONSTANT(int, bit_size = (mpl::accumulate<ChannelBitSizes, mpl::int_<0>, mpl::plus<mpl::_1, mpl::_2> >::type::value));
-    typedef bit_range<bit_size,IsMutable>                                           bit_range_t;
+    typedef boost::gil::bit_range<bit_size,IsMutable>                                           bit_range_t;
     typedef BitField                                                                bitfield_t;  
     typedef typename mpl::if_c<IsMutable,unsigned char*,const unsigned char*>::type data_ptr_t;
 
diff -Naur boost_1_35_0.orig/boost/wave/util/macro_helpers.hpp boost_1_35_0/boost/wave/util/macro_helpers.hpp
--- boost_1_35_0.orig/boost/wave/util/macro_helpers.hpp	2008-04-24 16:00:47.000000000 +0200
+++ boost_1_35_0/boost/wave/util/macro_helpers.hpp	2008-04-24 16:13:31.000000000 +0200
@@ -17,6 +17,7 @@
 #include <boost/wave/wave_config.hpp>
 #include <boost/wave/token_ids.hpp>
 #include <boost/wave/cpplexer/validate_universal_char.hpp>
+#include <boost/wave/util/unput_queue_iterator.hpp>
 
 // this must occur after all of the includes and before any code appears
 #ifdef BOOST_HAS_ABI_HEADERS
