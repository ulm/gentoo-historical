Index: vlc-0.8.6-rc1/configure.ac
===================================================================
--- vlc-0.8.6-rc1.orig/configure.ac
+++ vlc-0.8.6-rc1/configure.ac
@@ -5310,6 +5310,16 @@ then
 fi
 
 
+AC_CACHE_CHECK([if \$CXX accepts -fno-strict-aliasing],
+   [ac_cv_cxx_fnostrictaliasing],
+   [CXXFLAGS="${CXXFLAGS_save} -fno-strict-aliasing"
+    AC_TRY_COMPILE([],,ac_cv_cxx_fnostrictaliasing=yes,
+       ac_cv_cxx_fnostrictaliasing=no)])
+# wxWidgest has the bad behaviour of forcing breakages of strict aliasing
+# rules all over, so pass this to force using -fno-strict-aliasing on it.
+if test "${ac_cv_cxx_fnostrictaliasing}" = "yes"; then
+  VLC_ADD_CXXFLAGS([wxwidgets skins2],-fno-strict-aliasing)
+fi
 dnl
 dnl  Plugin and builtin checks
 dnl
Index: vlc-0.8.6-rc1/modules/demux/m3u.c
===================================================================
--- vlc-0.8.6-rc1.orig/modules/demux/m3u.c
+++ vlc-0.8.6-rc1/modules/demux/m3u.c
@@ -127,7 +127,7 @@ static int Activate( vlc_object_t * p_th
     if( i_type != TYPE_M3U )
     {
         char *p_peek;
-        int i_size = stream_Peek( p_demux->s, (uint8_t **)&p_peek, MAX_LINE );
+        int i_size = stream_Peek( p_demux->s, &p_peek, MAX_LINE );
         i_size -= sizeof("[Reference]") - 1;
 
         if( i_size > 0 )
Index: vlc-0.8.6-rc1/modules/demux/mkv.cpp
===================================================================
--- vlc-0.8.6-rc1.orig/modules/demux/mkv.cpp
+++ vlc-0.8.6-rc1/modules/demux/mkv.cpp
@@ -5307,11 +5307,11 @@ bool matroska_segment_c::CompareSegmentU
     if ( p_item_a == NULL || p_item_b == NULL )
         return false;
 
-    EbmlBinary * p_itema = (EbmlBinary *)(p_item_a->p_segment_uid);
+    EbmlBinary * p_itema = dynamic_cast<EbmlBinary *>(p_item_a->p_segment_uid);
     if ( p_item_b->p_prev_segment_uid != NULL && *p_itema == *p_item_b->p_prev_segment_uid )
         return true;
 
-    p_itema = (EbmlBinary *)(&p_item_a->p_next_segment_uid);
+    p_itema = dynamic_cast<EbmlBinary *>(p_item_a->p_next_segment_uid);
     if ( p_item_b->p_segment_uid != NULL && *p_itema == *p_item_b->p_segment_uid )
         return true;
 
