The mozilla plugin needs to be built as a shared object, so on PIC arches such
as AMD64 it has to be built with PIC enabled code. The MMX asm code in some
source file is PIC incompatible, so if __PIC__ is defined (GCC3 and later) the
code is built with no MMX asm and falls back to the standard C code.

This patch also contains the patch from Markus Kohls reported in bug #113590,
needed to build the mozilla plugin (with PIC enabled) on x86.

Index: vlc-0.8.4/modules/video_chroma/i420_rgb16.c
===================================================================
--- vlc-0.8.4.orig/modules/video_chroma/i420_rgb16.c
+++ vlc-0.8.4/modules/video_chroma/i420_rgb16.c
@@ -31,7 +31,7 @@
 #include <vlc/vout.h>
 
 #include "i420_rgb.h"
-#if defined (MODULE_NAME_IS_i420_rgb)
+#if defined (MODULE_NAME_IS_i420_rgb) || defined(__PIC__)
 #   include "i420_rgb_c.h"
 #elif defined (MODULE_NAME_IS_i420_rgb_mmx)
 #   if defined(HAVE_MMX_INTRINSICS)
@@ -220,7 +220,7 @@ void E_(I420_RGB16)( vout_thread_t *p_vo
     int         i_scale_count;                       /* scale modulo counter */
     int         i_chroma_width = p_vout->render.i_width / 2; /* chroma width */
     uint16_t *  p_pic_start;       /* beginning of the current line for copy */
-#if defined (MODULE_NAME_IS_i420_rgb)
+#if defined (MODULE_NAME_IS_i420_rgb) || defined (__PIC__)
     int         i_uval, i_vval;                           /* U and V samples */
     int         i_red, i_green, i_blue;          /* U and V modified samples */
     uint16_t *  p_yuv = p_vout->chroma.p_sys->p_rgb16;
@@ -268,7 +268,7 @@ void E_(I420_RGB16)( vout_thread_t *p_vo
         p_pic_start = p_pic;
         p_buffer = b_hscale ? p_buffer_start : p_pic;
 
-#if defined (MODULE_NAME_IS_i420_rgb)
+#if defined (MODULE_NAME_IS_i420_rgb) || defined(__PIC__)
         for ( i_x = p_vout->render.i_width / 8; i_x--; )
         {
             CONVERT_YUV_PIXEL(2);  CONVERT_Y_PIXEL(2);
@@ -341,24 +341,19 @@ void E_(I420_RGB16)( vout_thread_t *p_vo
          * at least we have all the pixels */
         if( i_rewind )
         {
-#if defined (MODULE_NAME_IS_i420_rgb_mmx)
-#   if defined (HAVE_MMX_INTRINSICS)
-            __m64 mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;
-            uint64_t tmp64;
-#   endif
-#endif
             p_y -= i_rewind;
             p_u -= i_rewind >> 1;
             p_v -= i_rewind >> 1;
             p_buffer -= i_rewind;
-#if defined (MODULE_NAME_IS_i420_rgb)
+#if defined (MODULE_NAME_IS_i420_rgb) || defined(__PIC__)
             CONVERT_YUV_PIXEL(2);  CONVERT_Y_PIXEL(2);
             CONVERT_YUV_PIXEL(2);  CONVERT_Y_PIXEL(2);
             CONVERT_YUV_PIXEL(2);  CONVERT_Y_PIXEL(2);
             CONVERT_YUV_PIXEL(2);  CONVERT_Y_PIXEL(2);
 #elif defined (MODULE_NAME_IS_i420_rgb_mmx)
-
 #   if defined (HAVE_MMX_INTRINSICS)
+            __m64 mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;
+            uint64_t tmp64;
             INTRINSICS_INIT_16
 #   else
             __asm__( MMX_INIT_16
@@ -442,7 +437,7 @@ void E_(I420_RGB32)( vout_thread_t *p_vo
     int         i_scale_count;                       /* scale modulo counter */
     int         i_chroma_width = p_vout->render.i_width / 2; /* chroma width */
     uint32_t *  p_pic_start;       /* beginning of the current line for copy */
-#if defined (MODULE_NAME_IS_i420_rgb)
+#if defined (MODULE_NAME_IS_i420_rgb) || defined (__PIC__)
     int         i_uval, i_vval;                           /* U and V samples */
     int         i_red, i_green, i_blue;          /* U and V modified samples */
     uint32_t *  p_yuv = p_vout->chroma.p_sys->p_rgb32;
@@ -492,7 +487,7 @@ void E_(I420_RGB32)( vout_thread_t *p_vo
 
         for ( i_x = p_vout->render.i_width / 8; i_x--; )
         {
-#if defined (MODULE_NAME_IS_i420_rgb)
+#if defined (MODULE_NAME_IS_i420_rgb) || defined(__PIC__)
             CONVERT_YUV_PIXEL(4);  CONVERT_Y_PIXEL(4);
             CONVERT_YUV_PIXEL(4);  CONVERT_Y_PIXEL(4);
             CONVERT_YUV_PIXEL(4);  CONVERT_Y_PIXEL(4);
@@ -527,23 +522,19 @@ void E_(I420_RGB32)( vout_thread_t *p_vo
          * at least we have all the pixels */
         if( i_rewind )
         {
-#if defined (MODULE_NAME_IS_i420_rgb_mmx)
-#   if defined (HAVE_MMX_INTRINSICS)
-            __m64 mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;
-            uint64_t tmp64;
-#   endif
-#endif
             p_y -= i_rewind;
             p_u -= i_rewind >> 1;
             p_v -= i_rewind >> 1;
             p_buffer -= i_rewind;
-#if defined (MODULE_NAME_IS_i420_rgb)
+#if defined (MODULE_NAME_IS_i420_rgb) || defined(__PIC__)
             CONVERT_YUV_PIXEL(4);  CONVERT_Y_PIXEL(4);
             CONVERT_YUV_PIXEL(4);  CONVERT_Y_PIXEL(4);
             CONVERT_YUV_PIXEL(4);  CONVERT_Y_PIXEL(4);
             CONVERT_YUV_PIXEL(4);  CONVERT_Y_PIXEL(4);
 #elif defined (MODULE_NAME_IS_i420_rgb_mmx)
 #   if defined (HAVE_MMX_INTRINSICS)
+            __m64 mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;
+            uint64_t tmp64;
             INTRINSICS_INIT_32
             INTRINSICS_YUV_MUL
             INTRINSICS_YUV_ADD
Index: vlc-0.8.4/modules/video_chroma/i420_rgb.h
===================================================================
--- vlc-0.8.4.orig/modules/video_chroma/i420_rgb.h
+++ vlc-0.8.4/modules/video_chroma/i420_rgb.h
@@ -35,7 +35,7 @@ struct chroma_sys_t
     uint8_t  *p_buffer;
     int *p_offset;
 
-#ifdef MODULE_NAME_IS_i420_rgb
+#if defined (MODULE_NAME_IS_i420_rgb) || defined(__PIC__)
     /**< Pre-calculated conversion tables */
     void *p_base;                      /**< base for all conversion tables */
     uint8_t   *p_rgb8;                 /**< RGB 8 bits table */
@@ -55,7 +55,7 @@ struct chroma_sys_t
 /*****************************************************************************
  * Prototypes
  *****************************************************************************/
-#ifdef MODULE_NAME_IS_i420_rgb
+#if defined (MODULE_NAME_IS_i420_rgb) || defined(__PIC__)
 void E_(I420_RGB8)         ( vout_thread_t *, picture_t *, picture_t * );
 void E_(I420_RGB16_dither) ( vout_thread_t *, picture_t *, picture_t * );
 #endif
