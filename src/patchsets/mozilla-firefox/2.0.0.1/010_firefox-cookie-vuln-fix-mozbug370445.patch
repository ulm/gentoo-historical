https://bugzilla.mozilla.org/show_bug.cgi?id=370445

There is a serious vulnerability in Mozilla Firefox, tested with 2.0.0.1,
but quite certainly affecting all recent versions.

The problem lies in how Firefox handles writes to the 'location.hostname'
DOM property. It is possible for a script to set it to values that would
not otherwise be accepted as a hostname when parsing a regular URL -
including a string containing \x00.

Doing this prompts a peculiar behavior: internally, DOM string variables
are not NUL-terminated, and as such, most of checks will consider
'evil.com\x00foo.example.com' to be a part of *.example.com domain. The
DNS resolver, however, and much of the remaining browser code, operates on
ASCIZ strings native to C/C++ instead, treating the aforementioned example
as 'evil.com'.

This makes it possible for evil.com to modify location.hostname as
described above, and have the resulting HTTP request still sent to
evil.com. Once the new page is loaded, the attacker will be able to set
cookies for *.example.com; he'll be also able to alter document.domain
accordingly, in order to bypass the same-origin policy for XMLHttpRequest
and cross-frame / cross-window data access.

A quick demonstration is available here:

  http://lcamtuf.dione.cc/ffhostname.html

This patch has been committed upstream.

Index: netwerk/base/src/nsSimpleURI.cpp
===================================================================
RCS file: /cvsroot/mozilla/netwerk/base/src/nsSimpleURI.cpp,v
retrieving revision 1.43
diff -u -p -6 -r1.43 nsSimpleURI.cpp
--- netwerk/base/src/nsSimpleURI.cpp	29 Jun 2005 21:03:23 -0000	1.43
+++ netwerk/base/src/nsSimpleURI.cpp	15 Feb 2007 21:47:54 -0000
@@ -152,13 +152,13 @@ nsSimpleURI::SetSpec(const nsACString &a
 
     // nsSimpleURI currently restricts the charset to US-ASCII
     nsCAutoString spec;
     NS_EscapeURL(specPtr, specLen, esc_OnlyNonASCII|esc_AlwaysCopy, spec);
 
     PRInt32 pos = spec.FindChar(':');
-    if (pos == -1)
+    if (pos == -1 || !net_IsValidScheme(spec.get(), pos))
         return NS_ERROR_MALFORMED_URI;
 
     mScheme.Truncate();
     mPath.Truncate();
 
     PRInt32 n = spec.Left(mScheme, pos);
@@ -179,12 +179,18 @@ nsSimpleURI::GetScheme(nsACString &resul
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsSimpleURI::SetScheme(const nsACString &scheme)
 {
+    const nsPromiseFlatCString &flat = PromiseFlatCString(scheme);
+    if (!net_IsValidScheme(flat)) {
+        NS_ERROR("the given url scheme contains invalid characters");
+        return NS_ERROR_MALFORMED_URI;
+    }
+
     mScheme = scheme;
     ToLowerCase(mScheme);
     return NS_OK;
 }
 
 NS_IMETHODIMP
Index: netwerk/base/src/nsStandardURL.cpp
===================================================================
RCS file: /cvsroot/mozilla/netwerk/base/src/nsStandardURL.cpp,v
retrieving revision 1.82.4.8
diff -u -p -6 -r1.82.4.8 nsStandardURL.cpp
--- netwerk/base/src/nsStandardURL.cpp	22 Jun 2006 19:13:01 -0000	1.82.4.8
+++ netwerk/base/src/nsStandardURL.cpp	15 Feb 2007 21:47:56 -0000
@@ -501,12 +501,14 @@ nsStandardURL::BuildNormalizedSpec(const
     // already point to a [ ] delimited IPv6 address literal.
     // However, perform Unicode normalization on it, as IDN does.
     mHostEncoding = eEncoding_ASCII;
     if (mHost.mLen > 0) {
         const nsCSubstring& tempHost =
             Substring(spec + mHost.mPos, spec + mHost.mPos + mHost.mLen);
+        if (tempHost.FindChar('\0') != kNotFound)
+            return NS_ERROR_MALFORMED_URI;  // null embedded in hostname
         if ((useEncHost = NormalizeIDN(tempHost, encHost)))
             approxLen += encHost.Length();
         else
             approxLen += mHost.mLen;
     }
 
@@ -1405,12 +1407,15 @@ nsStandardURL::SetHost(const nsACString 
         if (flat.IsEmpty())
             return NS_OK;
         NS_ERROR("cannot set host on no-auth url");
         return NS_ERROR_UNEXPECTED;
     }
 
+    if (host && strlen(host) < flat.Length())
+        return NS_ERROR_MALFORMED_URI; // found embedded null
+
     InvalidateCache();
     mHostEncoding = eEncoding_ASCII;
 
     if (!(host && *host)) {
         // remove existing hostname
         if (mHost.mLen > 0) {
Index: netwerk/base/src/nsURLHelper.cpp
===================================================================
RCS file: /cvsroot/mozilla/netwerk/base/src/nsURLHelper.cpp,v
retrieving revision 1.60.2.3
diff -u -p -6 -r1.60.2.3 nsURLHelper.cpp
--- netwerk/base/src/nsURLHelper.cpp	20 Jul 2006 22:59:11 -0000	1.60.2.3
+++ netwerk/base/src/nsURLHelper.cpp	15 Feb 2007 21:47:57 -0000
@@ -504,17 +504,18 @@ net_ExtractURLScheme(const nsACString &i
     return NS_ERROR_MALFORMED_URI;
 }
 
 PRBool
 net_IsValidScheme(const char *scheme, PRUint32 schemeLen)
 {
-    // first char much be alpha
+    // first char must be alpha
     if (!nsCRT::IsAsciiAlpha(*scheme))
         return PR_FALSE;
-    
-    for (; schemeLen && *scheme; ++scheme, --schemeLen) {
+
+    // nsCStrings may have embedded nulls -- reject those too
+    for (; schemeLen; ++scheme, --schemeLen) {
         if (!(nsCRT::IsAsciiAlpha(*scheme) ||
               nsCRT::IsAsciiDigit(*scheme) ||
               *scheme == '+' ||
               *scheme == '.' ||
               *scheme == '-'))
             return PR_FALSE;
