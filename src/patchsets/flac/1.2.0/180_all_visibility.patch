diff -urN flac-1.2.0.orig/configure.in flac-1.2.0/configure.in
--- flac-1.2.0.orig/configure.in	2007-07-07 09:10:35.000000000 +0300
+++ flac-1.2.0/configure.in	2007-08-06 22:08:51.000000000 +0300
@@ -290,6 +290,9 @@
 AM_CONDITIONAL(FLaC__HAS_AS__TEMPORARILY_DISABLED, test "yes" = "no")
 AM_CONDITIONAL(FLaC__HAS_GAS__TEMPORARILY_DISABLED, test "yes" = "no")
 
+CC_ATTRIBUTE_VISIBILITY
+CC_FLAG_VISIBILITY([CFLAGS="$CFLAGS -fvisibility=hidden"; CXXFLAGS="$CXXFLAGS -fvisibility=hidden"])
+
 AC_CONFIG_FILES([ \
 	Makefile \
 	src/Makefile \
diff -urN flac-1.2.0.orig/include/FLAC/export.h flac-1.2.0/include/FLAC/export.h
--- flac-1.2.0.orig/include/FLAC/export.h	2007-07-10 05:09:38.000000000 +0300
+++ flac-1.2.0/include/FLAC/export.h	2007-08-06 22:08:51.000000000 +0300
@@ -55,8 +55,17 @@
  * \{
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
 #if defined(FLAC__NO_DLL) || !defined(_MSC_VER)
+
+#if defined(FLAC_API_EXPORTS) && SUPPORT_ATTRIBUTE_VISIBILITY
+#define FLAC_API __attribute__((visibility("protected")))
+#else
 #define FLAC_API
+#endif
 
 #else
 
diff -urN flac-1.2.0.orig/include/FLAC++/export.h flac-1.2.0/include/FLAC++/export.h
--- flac-1.2.0.orig/include/FLAC++/export.h	2007-07-10 05:09:38.000000000 +0300
+++ flac-1.2.0/include/FLAC++/export.h	2007-08-06 22:08:51.000000000 +0300
@@ -55,8 +55,17 @@
  * \{
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
 #if defined(FLAC__NO_DLL) || !defined(_MSC_VER)
+
+#if defined(FLACPP_API_EXPORTS) && SUPPORT_ATTRIBUTE_VISIBILITY
+#define FLACPP_API __attribute__((visibility("default")))
+#else
 #define FLACPP_API
+#endif
 
 #else
 
diff -urN flac-1.2.0.orig/m4/attributes.m4 flac-1.2.0/m4/attributes.m4
--- flac-1.2.0.orig/m4/attributes.m4	1970-01-01 02:00:00.000000000 +0200
+++ flac-1.2.0/m4/attributes.m4	2007-08-06 22:10:14.000000000 +0300
@@ -0,0 +1,163 @@
+# Functions to check for attributes support in compiler
+
+AC_DEFUN([CC_ATTRIBUTE_CONSTRUCTOR], [
+	AC_CACHE_CHECK([if compiler supports __attribute__((constructor))],
+		[cc_cv_attribute_constructor],
+		[AC_COMPILE_IFELSE([
+			void ctor() __attribute__((constructor));
+			void ctor() { };
+			],
+			[cc_cv_attribute_constructor=yes],
+			[cc_cv_attribute_constructor=no])
+		])
+	
+	if test "x$cc_cv_attribute_constructor" = "xyes"; then
+		AC_DEFINE([SUPPORT_ATTRIBUTE_CONSTRUCTOR], 1, [Define this if the compiler supports the constructor attribute])
+		$1
+	else
+		true
+		$2
+	fi
+])
+
+AC_DEFUN([CC_ATTRIBUTE_FORMAT], [
+	AC_CACHE_CHECK([if compiler supports __attribute__((format(printf, n, n)))],
+		[cc_cv_attribute_format],
+		[AC_COMPILE_IFELSE([
+			void __attribute__((format(printf, 1, 2))) printflike(const char *fmt, ...) { }
+			],
+			[cc_cv_attribute_format=yes],
+			[cc_cv_attribute_format=no])
+		])
+	
+	if test "x$cc_cv_attribute_format" = "xyes"; then
+		AC_DEFINE([SUPPORT_ATTRIBUTE_FORMAT], 1, [Define this if the compiler supports the format attribute])
+		$1
+	else
+		true
+		$2
+	fi
+])
+
+AC_DEFUN([CC_ATTRIBUTE_FORMAT_ARG], [
+	AC_CACHE_CHECK([if compiler supports __attribute__((format_arg(printf)))],
+		[cc_cv_attribute_format_arg],
+		[AC_COMPILE_IFELSE([
+			void __attribute__((format_arg(printf, 1))) gettextlike(const char *fmt) { }
+			],
+			[cc_cv_attribute_format_arg=yes],
+			[cc_cv_attribute_format_arg=no])
+		])
+	
+	if test "x$cc_cv_attribute_format_arg" = "xyes"; then
+		AC_DEFINE([SUPPORT_ATTRIBUTE_FORMAT_ARG], 1, [Define this if the compiler supports the format_arg attribute])
+		$1
+	else
+		true
+		$2
+	fi
+])
+
+AC_DEFUN([CC_ATTRIBUTE_VISIBILITY], [
+	AC_CACHE_CHECK([if compiler supports __attribute__((visibility("...")))],
+		[cc_cv_attribute_visibility],
+		[AC_COMPILE_IFELSE([
+			void __attribute__((visibility("internal"))) internal_function() { }
+			void __attribute__((visibility("hidden"))) hidden_function() { }
+			void __attribute__((visibility("default"))) external_function() { }
+			],
+			[cc_cv_attribute_visibility=yes],
+			[cc_cv_attribute_visibility=no])
+		])
+	
+	if test "x$cc_cv_attribute_visibility" = "xyes"; then
+		AC_DEFINE([SUPPORT_ATTRIBUTE_VISIBILITY], 1, [Define this if the compiler supports the visibility attribute])
+		$1
+	else
+		true
+		$2
+	fi
+])
+
+AC_DEFUN([CC_FLAG_VISIBILITY], [
+	AC_CACHE_CHECK([if compiler supports -fvisibility=hidden],
+		[cc_cv_flag_visibility],
+		[
+		save_CFLAGS=$CFLAGS
+		CFLAGS="$CFLAGS -fvisibility=hidden"
+		AC_COMPILE_IFELSE([int a;],
+			[cc_cv_flag_visibility=yes],
+			[cc_cv_flag_visibility=no])
+		CFLAGS="$save_CFLAGS"
+		])
+	
+	if test "x$cc_cv_flag_visibility" = "xyes"; then
+		AC_DEFINE([SUPPORT_FLAG_VISIBILITY], 1, [Define this if the compiler supports the -fvisibility flag])
+		$1
+	else
+		true
+		$2
+	fi
+])
+
+AC_DEFUN([CC_ATTRIBUTE_NONNULL], [
+	AC_CACHE_CHECK([if compiler supports __attribute__((nonnull()))],
+		[cc_cv_attribute_nonnull],
+		[AC_COMPILE_IFELSE([
+			void some_function(void *foo, void *bar) __attribute__((nonnull()));
+			void some_function(void *foo, void *bar) { }
+			],
+			[cc_cv_attribute_nonnull=yes],
+			[cc_cv_attribute_nonnull=no])
+		])
+	
+	if test "x$cc_cv_attribute_nonnull" = "xyes"; then
+		AC_DEFINE([SUPPORT_ATTRIBUTE_NONNULL], 1, [Define this if the compiler supports the nonnull attribute])
+		$1
+	else
+		true
+		$2
+	fi
+])
+
+AC_DEFUN([CC_ATTRIBUTE_UNUSED], [
+	AC_CACHE_CHECK([if compiler supports __attribute__((unused))],
+		[cc_cv_attribute_unused],
+		[AC_COMPILE_IFELSE([
+			void some_function(void *foo, __attribute__((unused)) void *bar);
+			],
+			[cc_cv_attribute_unused=yes],
+			[cc_cv_attribute_unused=no])
+		])
+	
+	if test "x$cc_cv_attribute_unused" = "xyes"; then
+		AC_DEFINE([SUPPORT_ATTRIBUTE_UNUSED], 1, [Define this if the compiler supports the unused attribute])
+		$1
+	else
+		true
+		$2
+	fi
+])
+
+AC_DEFUN([CC_FUNC_EXPECT], [
+	AC_CACHE_CHECK([if compiler has __builtin_expect function],
+		[cc_cv_func_expect],
+		[AC_COMPILE_IFELSE([
+			int some_function()
+			{
+				int a = 3;
+				return (int)__builtin_expect(a, 3);
+			}
+			],
+			[cc_cv_func_expect=yes],
+			[cc_cv_func_expect=no])
+		])
+	
+	if test "x$cc_cv_func_expect" = "xyes"; then
+		AC_DEFINE([SUPPORT__BUILTIN_EXPECT], 1, [Define this if the compiler supports __builtin_expect() function])
+		$1
+	else
+		true
+		$2
+	fi
+])
diff -urN flac-1.2.0.orig/src/libFLAC/Makefile.am flac-1.2.0/src/libFLAC/Makefile.am
--- flac-1.2.0.orig/src/libFLAC/Makefile.am	2007-07-11 07:13:09.000000000 +0300
+++ flac-1.2.0/src/libFLAC/Makefile.am	2007-08-06 22:08:51.000000000 +0300
@@ -45,7 +45,7 @@
 endif
 endif
 
-AM_CFLAGS = $(DEBUGCFLAGS) $(CPUCFLAGS) @OGG_CFLAGS@
+AM_CFLAGS = $(DEBUGCFLAGS) $(CPUCFLAGS) @OGG_CFLAGS@ -DFLAC_API_EXPORTS
 
 if FLaC__NO_ASM
 else
diff -urN flac-1.2.0.orig/src/libFLAC++/Makefile.am flac-1.2.0/src/libFLAC++/Makefile.am
--- flac-1.2.0.orig/src/libFLAC++/Makefile.am	2007-07-11 07:13:09.000000000 +0300
+++ flac-1.2.0/src/libFLAC++/Makefile.am	2007-08-06 22:08:51.000000000 +0300
@@ -46,6 +46,7 @@
 	libFLAC++.m4
 
 # see 'http://www.gnu.org/software/libtool/manual.html#Libtool-versioning' for numbering convention
+libFLAC___la_CXXFLAGS = -DFLACPP_API_EXPORTS
 libFLAC___la_LDFLAGS = -version-info 7:0:1
 libFLAC___la_LIBADD = ../libFLAC/libFLAC.la
 
diff -urN flac-1.2.0.orig/src/Makefile.am flac-1.2.0/src/Makefile.am
--- flac-1.2.0.orig/src/Makefile.am	2007-02-02 08:58:21.000000000 +0200
+++ flac-1.2.0/src/Makefile.am	2007-08-06 22:08:51.000000000 +0300
@@ -30,7 +30,6 @@
 	plugin_winamp2 \
 	test_grabbag \
 	test_libs_common \
-	test_libFLAC \
 	test_libFLAC++ \
 	test_seeking \
 	test_streams
